{"hands_on_practices": [{"introduction": "The journey from a gene to a protein begins with the transcription of DNA into messenger RNA (mRNA), which is then read by the ribosome in three-nucleotide units called codons. This first practice exercise models this fundamental biological process as a computational task involving string manipulation. By learning to parse an mRNA sequence into its constituent codons, you will develop a foundational skill for bioinformatics while also learning to handle common data imperfections, such as sequences whose lengths are not a neat multiple of three [@problem_id:1418276].", "problem": "In computational biology, processing genetic sequences is a fundamental task. During the process of translation, a cell's machinery reads a messenger Ribonucleic Acid (mRNA) sequence and synthesizes a protein. This reading occurs in discrete, non-overlapping groups of three nucleotide bases, known as codons.\n\nA Python function, `sequence_to_codons`, is designed to model the first step of this process. The function accepts one argument: `mrna_sequence`, a string consisting of the characters 'A', 'U', 'G', and 'C'. The function processes this string from the beginning and splits it into a list of 3-character codon strings. The function's specification requires that if the length of the input `mrna_sequence` is not a perfect multiple of three, the trailing one or two bases that do not form a complete codon must be discarded and not included in the final output list.\n\nGiven the input `mrna_sequence = \"AUGGCCGUCAUAGCUCAGUUGA\"`, what is the exact output returned by a correct implementation of the `sequence_to_codons` function call?\n\nA. `['AUG', 'GCC', 'GUC', 'AUA', 'GCU', 'CAG', 'UUG', 'A']`\n\nB. `['AUG', 'GCC', 'GUC', 'AUA', 'GCU', 'CAG', 'UUG']`\n\nC. `['UGG', 'CCG', 'UCA', 'UAG', 'CUC', 'AGU', 'UG']`\n\nD. `['AUG', 'GCC', 'GUC', 'AUA', 'GCU', 'CAG']`\n\nE. `['AUG', 'GCC', 'GUC', 'AUA', 'GCU', 'CAG', 'UUA']`", "solution": "We model the function as taking the input string and partitioning it from the start into consecutive, non-overlapping substrings of length $3$, discarding any trailing bases that do not complete a full triplet. Let the input be $s=\\text{\"AUGGCCGUCAUAGCUCAGUUGA\"}$. Its length is $n=|s|=22$, so $n \\bmod 3=1$. Therefore, only the first $k=\\left\\lfloor \\frac{n}{3} \\right\\rfloor=\\left\\lfloor \\frac{22}{3} \\right\\rfloor=7$ codons are kept, and the final single trailing base is discarded.\n\nExtracting the codons from the start yields the list: \"AUG\", \"GCC\", \"GUC\", \"AUA\", \"GCU\", \"CAG\", \"UUG\". The trailing \"A\" is discarded, so the function returns ['AUG', 'GCC', 'GUC', 'AUA', 'GCU', 'CAG', 'UUG'], which corresponds to option B.", "answer": "$$\\boxed{B}$$", "id": "1418276"}, {"introduction": "High-throughput experimental methods in systems biology, such as microarrays or RNA-seq, often produce data in the form of large matrices, where rows might represent genes and columns represent different experimental conditions. A frequent and essential data manipulation task is matrix transposition, which swaps rows and columns to shift the analytical focus—for instance, from comparing gene behaviors to comparing condition outcomes. This exercise hones your ability to programmatically manipulate two-dimensional data structures, a crucial skill for preparing datasets for analysis [@problem_id:1418284].", "problem": "In systems biology, gene expression data is often organized into a matrix where rows represent different genes and columns represent different experimental conditions or time points. A common preliminary task in data analysis is to transpose this matrix, which swaps the rows and columns. This allows for an analysis focused on conditions rather than genes.\n\nYour task is to determine the result of transposing a specific gene expression matrix. The matrix is represented in Python as a list of lists, where each inner list is a row. You must perform this operation without using any external libraries like `numpy` or `pandas`.\n\nConsider the following gene expression matrix, `expression_data`, where rows correspond to three genes (Gene A, Gene B, Gene C) and columns correspond to four different experimental conditions (C1, C2, C3, C4):\n\n`expression_data = [[10, 12, 15, 9], [5, 8, 7, 11], [20, 18, 22, 16]]`\n\nIf you were to write a Python function `transpose_matrix(data)` that takes a rectangular matrix (represented as a non-empty list of lists) and returns its transpose, what would be the output for `transpose_matrix(expression_data)`?\n\nSelect the correct transposed matrix from the options below.\n\nA. `[[10, 5, 20], [12, 8, 18], [15, 7, 22], [9, 11, 16]]`\n\nB. `[[10, 12, 15], [5, 8, 7], [20, 18, 22]]`\n\nC. `[[10, 5], [12, 8], [15, 7], [9, 11], [20, 18], [22, 16]]`\n\nD. `[[10, 12, 15, 9], [5, 8, 7, 11], [20, 18, 22, 16]]`\n\nE. `[[9, 11, 16], [15, 7, 22], [12, 8, 18], [10, 5, 20]]`", "solution": "Let the given gene expression matrix be denoted by\n$$A=\\begin{bmatrix}10&12&15&9\\\\5&8&7&11\\\\20&18&22&16\\end{bmatrix}.$$\nBy the definition of the transpose, for all valid indices $i$ and $j$, the entries satisfy\n$$(A^{\\top})_{ij}=A_{ji}.$$\nThus, each row of $A^{\\top}$ is the corresponding column of $A$:\n- Column $1$ of $A$ is $\\begin{bmatrix}10\\\\5\\\\20\\end{bmatrix}$, so row $1$ of $A^{\\top}$ is $[10,\\,5,\\,20]$.\n- Column $2$ of $A$ is $\\begin{bmatrix}12\\\\8\\\\18\\end{bmatrix}$, so row $2$ of $A^{\\top}$ is $[12,\\,8,\\,18]$.\n- Column $3$ of $A$ is $\\begin{bmatrix}15\\\\7\\\\22\\end{bmatrix}$, so row $3$ of $A^{\\top}$ is $[15,\\,7,\\,22]$.\n- Column $4$ of $A$ is $\\begin{bmatrix}9\\\\11\\\\16\\end{bmatrix}$, so row $4$ of $A^{\\top}$ is $[9,\\,11,\\,16]$.\n\nTherefore,\n$$A^{\\top}=\\begin{bmatrix}10&5&20\\\\12&8&18\\\\15&7&22\\\\9&11&16\\end{bmatrix},$$\nwhich corresponds to option A.", "answer": "$$\\boxed{A}$$", "id": "1418284"}, {"introduction": "Biological systems are intricate webs of interactions, and abstracting them as networks or graphs is a powerful approach in systems biology. In this exercise, you will model a cellular signaling pathway as a directed graph, where proteins are nodes and activation events are edges. Your task is to determine the most efficient signaling cascade, which translates to finding the shortest path between a starting receptor and a final transcription factor, providing an intuitive introduction to network analysis and its application in uncovering the logic of biological processes [@problem_id:1418254].", "problem": "A team of systems biologists is investigating a newly discovered signaling pathway, which they have named the Stress-Adaptive Kinase Pathway (SAKP). This pathway is initiated by the activation of a membrane receptor, the Stress-Adaptive Kinase Receptor (SAKR), and culminates in the activation of a key transcription factor, the Transcription Factor for Stress Adaptation (TFSA). The team has mapped out the direct activation steps between the various protein components of this pathway. An activation step means that one protein directly causes a conformational change or phosphorylation that activates the next protein in the sequence.\n\nThe known one-way activation interactions are as follows:\n\n*   The Stress-Adaptive Kinase Receptor (SAKR) directly activates both MAPK1 and PI3K.\n*   MAPK1 directly activates MAPK2 and Raf.\n*   MAPK2 directly activates ERK.\n*   Raf directly activates MEK.\n*   MEK directly activates ERK.\n*   PI3K directly activates Akt and PDK1.\n*   PDK1 directly activates Akt.\n*   Akt directly activates mTOR and GSK3.\n*   GSK3 directly activates CREB.\n*   ERK directly activates the Transcription Factor for Stress Adaptation (TFSA).\n*   CREB directly activates the Transcription Factor for Stress Adaptation (TFSA).\n*   mTOR directly activates S6K, which is a terminal protein in its branch and does not activate any other proteins in this mapped network.\n\nGiven these interactions, determine the length of the shortest signaling cascade connecting the initial signal at the SAKR to the activation of the TFSA. The length of a cascade is defined as the number of individual activation steps (i.e., interactions) it contains.", "solution": "Model the signaling network as a directed graph where each protein is a node and each direct activation is a directed edge from activator to target. The length of a cascade equals the number of edges in a directed path from the source (SAKR) to the target (TFSA). We seek the shortest such path.\n\nList the outgoing edges from SAKR: SAKR activates MAPK1 and PI3K, so any path must begin with SAKR → MAPK1 or SAKR → PI3K.\n\nConsider paths reaching TFSA via ERK:\n- Path P1: SAKR → MAPK1 → MAPK2 → ERK → TFSA. This contains $4$ activation steps.\n- Path P2: SAKR → MAPK1 → Raf → MEK → ERK → TFSA. This contains $5$ activation steps.\n\nConsider paths reaching TFSA via CREB:\n- Path P3: SAKR → PI3K → Akt → GSK3 → CREB → TFSA. This contains $5$ activation steps.\n- Path P4: SAKR → PI3K → PDK1 → Akt → GSK3 → CREB → TFSA. This contains $6$ activation steps.\n\nThe mTOR branch (SAKR → PI3K → Akt → mTOR → S6K) terminates at S6K and does not reach TFSA, so it cannot yield a valid path to TFSA.\n\nNo other direct activations to TFSA are given except from ERK and CREB, and all enumerated paths to TFSA are covered by the branches above. Therefore, the minimal number of activation steps from SAKR to TFSA is achieved by Path P1 with length $4$.\n\nHence, the length of the shortest signaling cascade from SAKR to TFSA is $4$.", "answer": "$$\\boxed{4}$$", "id": "1418254"}]}