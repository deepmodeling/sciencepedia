{"hands_on_practices": [{"introduction": "The foundation of genomics lies in sequencing DNA, but a fundamental challenge is that modern technologies produce millions of short, jumbled fragments called \"reads.\" Reconstructing the original genome from this data is like solving a massive, one-dimensional jigsaw puzzle. This first exercise introduces the most intuitive approach to this problem, known as overlap-layout-consensus assembly, where you will manually piece together short DNA reads by finding where their sequences overlap to build a longer, contiguous sequence, or \"contig.\" [@problem_id:2290971]", "problem": "In a genomic sequencing project, three short, overlapping DNA fragments, referred to as \"reads,\" were obtained from a single, non-repetitive region of an organism's chromosome. Your task is to perform a *de novo* assembly by finding the correct overlaps between these reads to reconstruct the single, longest possible contiguous DNA sequence, known as a contig. The three reads are provided below:\n\n- Read 1: `AGCTTAGGCT`\n- Read 2: `AGGCTACGT`\n- Read 3: `ACGTACGAT`\n\nDetermine the full sequence of the assembled contig. The answer should be a single string of characters representing the DNA sequence.", "solution": "We are to assemble a shortest common superstring by maximizing overlaps between the reads. Define the overlap function between two strings $X$ and $Y$ as\n$$\n\\operatorname{ovl}(X,Y)=\\max\\{k \\in \\mathbb{N} \\mid \\text{the suffix of } X \\text{ of length } k \\text{ equals the prefix of } Y \\text{ of length } k\\}.\n$$\nCompute pairwise directed overlaps:\n- For $R_{1}=\\text{AGCTTAGGCT}$ and $R_{2}=\\text{AGGCTACGT}$, the longest overlap is $\\operatorname{ovl}(R_{1},R_{2})=5$ with the matching substring $\\text{AGGCT}$. No longer match exists because the length-$6$ suffix of $R_{1}$ is $\\text{TAGGCT}$, which does not equal the prefix of $R_{2}$.\n- For $R_{2}$ and $R_{3}=\\text{ACGTACGAT}$, the longest overlap is $\\operatorname{ovl}(R_{2},R_{3})=4$ with the matching substring $\\text{ACGT}$. A length-$5$ overlap would require the suffix $\\text{TACGT}$ of $R_{2}$ to match the prefix of $R_{3}$, which it does not.\n- All other directed overlaps among the pairs $(R_{1},R_{3})$, $(R_{3},R_{1})$, $(R_{2},R_{1})$, and $(R_{3},R_{2})$ are zero because no nontrivial suffix of the first equals a prefix of the second in each case.\n\nThus, the unique maximal-overlap ordering is $R_{1} \\rightarrow R_{2} \\rightarrow R_{3}$. Assemble by concatenating while removing the overlaps:\n- Merge $R_{1}$ and $R_{2}$ using the $5$-base overlap $\\text{AGGCT}$ to obtain $\\text{AGCTTAGGCTACGT}$.\n- Merge this result with $R_{3}$ using the $4$-base overlap $\\text{ACGT}$ (which is the suffix of the current string and the prefix of $R_{3}$) to obtain the final contig $\\text{AGCTTAGGCTACGTACGAT}$.\n\nLet $\\ell(\\cdot)$ denote string length. The final length is\n$$\n\\ell(R_{1})+\\ell(R_{2})-\\operatorname{ovl}(R_{1},R_{2})+\\ell(R_{3})-\\operatorname{ovl}(R_{2},R_{3})=10+9-5+9-4=19,\n$$\nconsistent with the assembled sequence. Therefore, the assembled contig is AGCTTAGGCTACGTACGAT.", "answer": "$$\\boxed{AGCTTAGGCTACGTACGAT}$$", "id": "2290971"}, {"introduction": "While the simple overlap method is conceptually clear, it becomes computationally challenging for large genomes with repetitive sequences. To overcome this, modern bioinformatics employs a more elegant and powerful strategy based on De Bruijn graphs. This exercise demonstrates how to move from overlapping entire reads to using short, fixed-length sequences called $k$-mers to build a graph, where the genomic sequence is revealed by finding a special path through it. By working through this process, you will gain insight into the algorithmic core of many contemporary genome assemblers. [@problem_id:2290987]", "problem": "A molecular biologist is performing *de novo* genome assembly on a short, linear DNA fragment from a newly discovered extremophilic bacterium. The sequencing process yielded a collection of short, overlapping reads. To reconstruct the original DNA sequence, the biologist employs a De Bruijn graph assembly strategy. The process begins by breaking down all the sequencing reads into a complete set of k-mers, which are short substrings of a fixed length $k$.\n\nFor this particular assembly, a value of $k=4$ was used. The complete, unordered set of all 4-mers obtained from the reads is:\n`{ ATGC, TGCG, GCGT, CGTA, GTAC, TACG, ACGT, CGTG }`\n\nYou are tasked with reconstructing the original, contiguous DNA sequence from this set of 4-mers. To do this, you must first construct the corresponding De Bruijn graph. In this specific graph model:\n1.  The nodes (or vertices) of the graph are all the unique (k-1)-mers. A (k-1)-mer is a sequence of length $k-1=3$. These nodes are derived from the prefixes (the first 3 bases) and suffixes (the last 3 bases) of every 4-mer in the given set.\n2.  A directed edge is drawn from a node `U` to a node `V` if and only if there exists a 4-mer in the set whose prefix is `U` and whose suffix is `V`. Each 4-mer in the set corresponds to exactly one directed edge in the graph.\n\nBy finding the unique path that traverses every edge exactly once, determine the full DNA sequence of the original linear fragment.", "solution": "The problem asks us to reconstruct a DNA sequence from a set of k-mers using a De Bruijn graph. The given set of k-mers with $k=4$ is `{ATGC, TGCG, GCGT, CGTA, GTAC, TACG, ACGT, CGTG}`.\n\n**Step 1: Identify the nodes of the De Bruijn graph.**\nThe nodes are the unique (k-1)-mers, which are 3-mers (trinucleotides). We can find them by listing the prefixes and suffixes of all the given 4-mers.\n\nThe 4-mers are:\n- `ATGC`: prefix `ATG`, suffix `TGC`\n- `TGCG`: prefix `TGC`, suffix `GCG`\n- `GCGT`: prefix `GCG`, suffix `CGT`\n- `CGTA`: prefix `CGT`, suffix `GTA`\n- `GTAC`: prefix `GTA`, suffix `TAC`\n- `TACG`: prefix `TAC`, suffix `ACG`\n- `ACGT`: prefix `ACG`, suffix `CGT`\n- `CGTG`: prefix `CGT`, suffix `GTG`\n\nThe set of all prefixes is `{ATG, TGC, GCG, CGT, GTA, TAC, ACG}`.\nThe set of all suffixes is `{TGC, GCG, CGT, GTA, TAC, ACG, GTG}`.\n\nThe complete set of unique nodes is the union of these two sets:\nNodes = `{ATG, TGC, GCG, CGT, GTA, TAC, ACG, GTG}`.\n\n**Step 2: Construct the directed edges.**\nEach 4-mer corresponds to a directed edge from its prefix node to its suffix node.\n\n- `ATGC` → edge from `ATG` to `TGC`\n- `TGCG` → edge from `TGC` to `GCG`\n- `GCGT` → edge from `GCG` to `CGT`\n- `CGTA` → edge from `CGT` to `GTA`\n- `GTAC` → edge from `GTA` to `TAC`\n- `TACG` → edge from `TAC` to `ACG`\n- `ACGT` → edge from `ACG` to `CGT`\n- `CGTG` → edge from `CGT` to `GTG`\n\n**Step 3: Find the start and end nodes of the Eulerian path.**\nReconstructing the sequence requires finding an Eulerian path, which is a path that visits every edge exactly once. For a directed graph, an Eulerian path exists if and only if the graph is connected and at most one vertex has `out-degree - in-degree = 1`, at most one vertex has `in-degree - out-degree = 1`, and all other vertices have `in-degree = out-degree`.\n\nLet's calculate the in-degree and out-degree for each node:\n- **ATG**: out-degree = 1 (to TGC), in-degree = 0. Difference = +1. This is the starting node.\n- **TGC**: out-degree = 1 (to GCG), in-degree = 1 (from ATG). Difference = 0.\n- **GCG**: out-degree = 1 (to GCG), in-degree = 1 (from TGC). Difference = 0.\n- **CGT**: out-degree = 2 (to GTA, to GTG), in-degree = 2 (from GCG, from ACG). Difference = 0.\n- **GTA**: out-degree = 1 (to TAC), in-degree = 1 (from CGT). Difference = 0.\n- **TAC**: out-degree = 1 (to ACG), in-degree = 1 (from GTA). Difference = 0.\n- **ACG**: out-degree = 1 (to CGT), in-degree = 1 (from TAC). Difference = 0.\n- **GTG**: out-degree = 0, in-degree = 1 (from CGT). Difference = -1. This is the ending node.\n\nThe graph has a single start node (`ATG`) and a single end node (`GTG`), so a unique Eulerian path exists.\n\n**Step 4: Trace the Eulerian path and reconstruct the sequence.**\nThe path starts at the node `ATG`. The sequence begins with the string of the starting node, which is `ATG`. We then append the last character of each subsequent k-mer traversed in the path.\n\n1.  Start at `ATG`. The only outgoing edge corresponds to the k-mer `ATGC`. Sequence so far: `ATGC`. We are now at node `TGC`.\n2.  From `TGC`, the outgoing edge corresponds to `TGCG`. We append the last character, `G`. Sequence: `ATGCG`. We are now at node `GCG`.\n3.  From `GCG`, the outgoing edge corresponds to `GCGT`. We append `T`. Sequence: `ATGCGT`. We are now at node `CGT`.\n4.  From `CGT`, there are two outgoing edges, `CGTA` and `CGTG`. We know `GTG` is the final node in the entire path, so we should not traverse the edge to `GTG` yet, unless it's the only option. Let's take the edge for `CGTA`. We append `A`. Sequence: `ATGCGTA`. We are now at node `GTA`.\n5.  From `GTA`, the outgoing edge corresponds to `GTAC`. Append `C`. Sequence: `ATGCGTAC`. We are now at node `TAC`.\n6.  From `TAC`, the outgoing edge corresponds to `TACG`. Append `G`. Sequence: `ATGCGTACG`. We are now at node `ACG`.\n7.  From `ACG`, the outgoing edge corresponds to `ACGT`. Append `T`. Sequence: `ATGCGTACGT`. This leads us back to node `CGT`.\n8.  We are at `CGT` again. The edge for `CGTA` has been used. The only remaining unused edge from `CGT` is the one for `CGTG`. We traverse this edge. Append `G`. Sequence: `ATGCGTACGTG`. We arrive at the final node `GTG`.\n\nAll 8 edges (k-mers) have been used exactly once. The path starts at `ATG` and ends at `GTG`. The final reconstructed sequence is the string we have built.\n\nFinal Sequence: `ATGCGTACGTG`.", "answer": "$$\\boxed{ATGCGTACGTG}$$", "id": "2290987"}, {"introduction": "After running one or more assembly programs, a critical question arises: how good is the result? A key measure of assembly quality is its contiguity—how well the assembler connected short reads into long, unbroken contigs. This practice introduces the N50, a standard and essential metric used to quantify an assembly's contiguity. Understanding and calculating the N50 will equip you with a vital tool for quantitatively evaluating and comparing the performance of different genome assembly projects. [@problem_id:1436278]", "problem": "A bioinformatics research group is working on the *de novo* genome assembly of a newly discovered microorganism. After sequencing, they used two different assembly programs, \"Assembler-X\" and \"Assembler-Y\", which produced two distinct sets of contigs. A key metric for evaluating the quality of an assembly is its contiguity, which is often quantified by the N50 statistic. The N50 value represents the length of the smallest contig in the set of largest contigs that together cover at least 50% of the total assembly length.\n\nYou are provided with the complete lists of contig lengths (in kilobase pairs, kbp) for both assemblies:\n\n**Assembler-X Contig Lengths (kbp):**\n`198.2, 15.1, 45.3, 121.0, 78.5, 22.7, 153.6, 9.4, 55.8`\n\n**Assembler-Y Contig Lengths (kbp):**\n`250.5, 5.2, 180.1, 44.6, 99.8, 12.1`\n\nCalculate the contig N50 value for the draft genome produced by **Assembler-X**. Express your answer in kilobase pairs (kbp), rounded to three significant figures.", "solution": "The N50 is defined as the length of the smallest contig among the largest contigs whose cumulative length is at least one half of the total assembly length.\n\nFor Assembler-X, the contig lengths (in kbp) are:\n$$198.2,\\;15.1,\\;45.3,\\;121.0,\\;78.5,\\;22.7,\\;153.6,\\;9.4,\\;55.8.$$\n\n1) Compute the total assembly length:\n$$L_{\\text{total}}=198.2+15.1+45.3+121.0+78.5+22.7+153.6+9.4+55.8=699.6.$$\n\n2) Compute one half of the total:\n$$\\frac{1}{2}L_{\\text{total}}=0.5\\times 699.6=349.8.$$\n\n3) Sort contigs in nonincreasing order and compute cumulative sums:\n$$\\text{Sorted: }198.2,\\;153.6,\\;121.0,\\;78.5,\\;55.8,\\;45.3,\\;22.7,\\;15.1,\\;9.4.$$\nCumulative after first contig:\n$$198.2<349.8.$$\nCumulative after second contig:\n$$198.2+153.6=351.8\\geq 349.8.$$\n\nThus, the set of largest contigs reaching at least one half of the total length is $\\{198.2,\\,153.6\\}$, and the N50 is the length of the smallest contig in this set:\n$$N50=153.6\\ \\text{kbp}.$$\n\nRounded to three significant figures:\n$$N50=154\\ \\text{kbp}.$$", "answer": "$$\\boxed{154}$$", "id": "1436278"}]}