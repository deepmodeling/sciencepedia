{"hands_on_practices": [{"introduction": "To begin our hands-on exploration, we first need a systematic way to define and communicate the rules of a cellular automaton. This foundational exercise introduces Wolfram's classification scheme, a powerful convention for numbering the rules of one-dimensional elementary cellular automata. By translating a descriptive rule into its corresponding Wolfram number, you will gain a core skill for identifying and discussing specific automata in the vast landscape of possible systems [@problem_id:1666358].", "id": "1666358", "problem": "A one-dimensional elementary cellular automaton consists of a line of cells, where each cell can be in one of two states: active (1) or inactive (0). The state of each cell at a time step $t+1$ is determined by a fixed rule based on the states of itself and its immediate left and right neighbors at time step $t$. The group of these three cells is called the neighborhood.\n\nThere are $2^3=8$ possible configurations for a neighborhood. The behavior of an elementary cellular automaton is completely specified by an 8-bit binary string, where each bit corresponds to the output state (0 or 1) for one of the 8 neighborhood configurations. By convention, these configurations are ordered from `111`, `110`, `101`, down to `000`. The corresponding 8-bit output string is then interpreted as a binary number to yield the automaton's Wolfram rule number, an integer from 0 to 255.\n\nConsider a specific elementary cellular automaton designed to detect local singularity. The rule for this automaton is as follows: a cell becomes active in the next time step if and only if exactly one cell in its 3-cell neighborhood (left, center, right) was active in the current time step.\n\nDetermine the Wolfram rule number that corresponds to this behavior.\n\n", "solution": "An elementary cellular automaton with neighborhood $(l,c,r)$ updates according to the rule: the next state is $1$ if and only if exactly one of $l,c,r$ is $1$. Equivalently, letting $s=l+c+r$, the output is $1$ if $s=1$ and $0$ otherwise.\n\nEnumerating the neighborhoods in the prescribed order $111,110,101,100,011,010,001,000$, their sums $s$ are $3,2,2,1,2,1,1,0$, respectively. Therefore the outputs are $0,0,0,1,0,1,1,0$. Hence the 8-bit output string is $00010110$.\n\nInterpreting this as a binary number with the leftmost bit weighted by $2^{7}$ down to the rightmost by $2^{0}$ gives\n$$0\\cdot 2^{7}+0\\cdot 2^{6}+0\\cdot 2^{5}+1\\cdot 2^{4}+0\\cdot 2^{3}+1\\cdot 2^{2}+1\\cdot 2^{1}+0\\cdot 2^{0}=16+4+2=22.$$\nThus, the Wolfram rule number is $22$.", "answer": "$$\\boxed{22}$$"}, {"introduction": "With a method for defining rules in hand, let's now apply them in a hands-on simulation. This practice challenges you to manually trace the evolution of a two-dimensional cellular automaton designed as a simplified model for cell differentiation. This exercise not only builds your intuition for how local interactions generate global patterns but also familiarizes you with essential concepts like the Moore neighborhood and periodic boundary conditions, which are common in biological and physical modeling [@problem_id:1421612].", "id": "1421612", "problem": "A developmental biologist is creating a simplified model to study patterns of cell differentiation using a two-dimensional cellular automaton. The model is simulated on a 3x3 grid of cells with periodic boundary conditions. This means the grid wraps around, so the right neighbor of a cell in the rightmost column is the corresponding cell in the leftmost column, and the top neighbor of a cell in the top row is the corresponding cell in the bottom row, and so on.\n\nEach cell in the grid can exist in one of four possible integer states:\n- `0`: Empty Space\n- `1`: Stem Cell\n- `2`: Differentiated Cell Type A\n- `3`: Differentiated Cell Type B\n\nThe state of every cell in the grid is updated simultaneously at each discrete time step. The state of a given cell at time $t+1$ is determined by its own state and the states of its eight immediate neighbors (the Moore neighborhood) at time $t$. The update rules are applied as follows:\n\n1.  **Empty Space (`0`):** An Empty Space becomes a Stem Cell (`1`) if it has exactly three Stem Cell (`1`) neighbors. Otherwise, it remains an Empty Space.\n2.  **Stem Cell (`1`):** Its fate is determined by the following ordered checks:\n    a. If it has one or more Type A (`2`) neighbors, it becomes a Type A (`2`).\n    b. If rule 2a does not apply, and the sum of the states of its eight neighbors is strictly greater than 5, it becomes a Type B (`3`).\n    c. If neither rule 2a nor 2b applies, it remains a Stem Cell (`1`).\n3.  **Differentiated Cells (`2` or `3`):** These cells are terminally differentiated and remain in their current state for all subsequent time steps.\n\nAt time $t=0$, the grid is initialized with a horizontal line of three Stem Cells in the middle row, with all other cells being Empty Spaces, as represented by the following matrix:\n$$\n\\begin{pmatrix}\n0 & 0 & 0 \\\\\n1 & 1 & 1 \\\\\n0 & 0 & 0\n\\end{pmatrix}\n$$\n\nBased on this initial configuration and the rules provided, simulate the evolution of the grid. Calculate the sum of the states of all nine cells in the grid at time $t=3$.\n\n", "solution": "At time $t=0$, the states are $1$ in the entire middle row and $0$ elsewhere. With periodic (toroidal) boundaries, for any cell, its eight neighbors consist of three cells in the row above, two in the same row (left and right), and three in the row below.\n\nFrom $t=0$ to $t=1$:\n- For any cell in the top or bottom row (state $0$ at $t=0$), its three neighbors in the middle row are all state $1$, while its other five neighbors are state $0$. Thus each such cell has exactly $3$ neighbors with state $1$, so by rule 1 it becomes state $1$.\n- For any cell in the middle row (state $1$ at $t=0$), its two same-row neighbors are state $1$, and the other six neighbors (in the rows above and below) are state $0$, so the sum of neighbor states is $2$, which is not greater than $5$. There are no neighbors in state $2$, so rule 2a does not apply. Hence by rule 2c it remains state $1$.\n\nTherefore, at $t=1$, all nine cells are state $1$.\n\nFrom $t=1$ to $t=2$:\n- There are no cells in state $2$, so rule 2a never applies.\n- Every cell is state $1$ and all eight neighbors of any cell are also state $1$, so the sum of the neighbor states is $8$, which satisfies $8>5$. Hence by rule 2b, every cell becomes state $3$.\n\nThus, at $t=2$, all nine cells are state $3$.\n\nFrom $t=2$ to $t=3$:\n- By rule 3, differentiated cells in states $2$ or $3$ remain unchanged. Therefore, all cells stay in state $3$.\n\nThe sum of the states at $t=3$ is\n$$\n\\sum_{i=1}^{9} 3 = 9 \\cdot 3 = 27.\n$$", "answer": "$$\\boxed{27}$$"}, {"introduction": "Beyond simple simulation, cellular automata offer a framework for analyzing emergent, system-level properties. This practice moves into that analytical space by asking you to investigate \"total gridlock\"—a stable fixed point—in the well-known Rule 184 traffic model. Instead of just running a simulation, you will need to deduce a general property of the system's long-term behavior from its rules, learning how constraints on a configuration can determine its ultimate fate [@problem_id:1666412].", "id": "1666412", "problem": "Consider a one-dimensional cellular automaton that models simplified traffic flow on an infinitely long, single-lane road. The road is divided into discrete sites, indexed by integers. Each site can either be empty (state 0) or occupied by a car (state 1). The system evolves in discrete time steps.\n\nThe rule for updating the state of the system, known as Rule 184, is as follows:\n- A car at site `i` at time `t` will move one site to the right (to site `i+1`) at time `t+1` if and only if site `i+1` is empty at time `t`.\n- If a car at site `i` at time `t` cannot move because site `i+1` is occupied, it remains at site `i` at time `t+1`.\n- An empty site `i` at time `t` becomes occupied at time `t+1` if and only if a car from site `i-1` moves into it.\n\nA \"finite configuration\" is a state of the road where only a finite number of sites are occupied by cars. All other sites extending to infinity in both directions are empty.\n\nA \"total gridlock\" is defined as a fixed-point configuration, meaning the arrangement of cars and empty spaces on the road does not change after one time step.\n\nWhich of the following represents a non-empty, finite configuration that is in a state of total gridlock? For the options, the strings of 0s and 1s represent the states of a contiguous segment of the road, with the understanding that all sites outside this segment are empty (state 0).\n\nA. `1`\nB. `11`\nC. `101`\nD. No such non-empty, finite configuration exists.\n\n", "solution": "Let $x_{i}(t) \\in \\{0,1\\}$ denote the state (empty or occupied) of site $i \\in \\mathbb{Z}$ at time $t$. Under Rule 184, a car at site $i$ moves to site $i+1$ at the next time step if and only if $x_{i}(t)=1$ and $x_{i+1}(t)=0$. A configuration is a fixed point (total gridlock) if and only if no car can move, which is equivalent to the absence of the local pattern $(x_{i}(t),x_{i+1}(t))=(1,0)$ for every $i$. Thus a necessary and sufficient condition for being a fixed point is\n$$\n\\forall i \\in \\mathbb{Z},\\quad x_{i}(t)=1 \\implies x_{i+1}(t)=1,\n$$\nequivalently,\n$$\n\\forall i \\in \\mathbb{Z},\\quad x_{i}(t) \\leq x_{i+1}(t).\n$$\nHence any fixed-point configuration must be nondecreasing along the lattice: once a $1$ appears at some site, all sites to its right must also be $1$. Therefore any fixed point either has no $1$ anywhere (the all-zero configuration), or has an infinite tail of $1$'s to the right.\n\nA finite configuration is defined to have only finitely many $1$'s, with $x_{i}(t)=0$ for all sufficiently large $|i|$. This rules out an infinite tail of $1$'s. Consequently, the only finite fixed point is the empty configuration with $x_{i}(t)=0$ for all $i$, which is not among the non-empty options.\n\nChecking the given non-empty examples:\n- A: $1$ has $(1,0)$ at its right boundary, so the car moves; not fixed.\n- B: $11$ has the rightmost $1$ followed by $0$, so it moves; not fixed.\n- C: $101$ contains $(1,0)$ twice; both cars move; not fixed.\n\nThus, no non-empty, finite configuration is a fixed point.\n\nTherefore the correct choice is D.", "answer": "$$\\boxed{D}$$"}]}