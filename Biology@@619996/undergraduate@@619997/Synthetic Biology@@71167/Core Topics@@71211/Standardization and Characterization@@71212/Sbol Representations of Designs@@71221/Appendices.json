{"hands_on_practices": [{"introduction": "Before building complex biological circuits, we must first master the fundamentals of representing them. This exercise challenges you to think from the ground up, translating a simple biological process—a two-step metabolic pathway—into its minimal set of core SBOL objects. By determining the necessary number of `ComponentDefinition`, `Interaction`, and `Participation` objects, you'll develop a crucial intuition for how the SBOL data model structurally maps to biological reality, a foundational skill for creating well-formed and efficient designs. [@problem_id:2066823]", "problem": "A synthetic biologist is designing a simple biosynthetic pathway and wants to create a formal representation of it using the Synthetic Biology Open Language (SBOL). The pathway consists of two sequential enzymatic reactions. In the first step, a substrate molecule, `S`, is converted into an intermediate molecule, `I`, catalyzed by an enzyme, `E1`. In the second step, the intermediate molecule, `I`, is converted into the final product molecule, `P`, catalyzed by a second, different enzyme, `E2`.\n\nTo model this system in SBOL, one must define the components and the interactions between them. The core SBOL data model objects for this task are `ComponentDefinition` (to represent the physical entities), `Interaction` (to represent the processes), and `Participation` (to link entities to processes with specific roles).\n\nAssuming the most parsimonious representation that captures all specified entities and processes without ambiguity, what is the minimum number of `ComponentDefinition`, `Interaction`, and `Participation` objects required to model this two-step metabolic pathway?\n\nA. 5 `ComponentDefinition`s, 2 `Interaction`s, 6 `Participation`s\n\nB. 3 `ComponentDefinition`s, 2 `Interaction`s, 4 `Participation`s\n\nC. 5 `ComponentDefinition`s, 1 `Interaction`, 4 `Participation`s\n\nD. 5 `ComponentDefinition`s, 2 `Interaction`s, 4 `Participation`s", "solution": "We model the pathway using SBOL core concepts with the following minimal assumptions:\n- Each distinct physical entity (molecule or enzyme) requires a separate ComponentDefinition.\n- Each distinct process (reaction step) requires a separate Interaction.\n- Each entity involved in a given Interaction must be linked via a Participation with an appropriate role, and a Participation is scoped to a single Interaction (i.e., it cannot be shared across Interactions).\n\nFirst, count ComponentDefinitions. The distinct physical entities are the substrate $S$, intermediate $I$, product $P$, and the two enzymes $E1$ and $E2$. Therefore,\n$$\n\\text{ComponentDefinitions} = 5 \\quad \\text{for } \\{S, I, P, E1, E2\\}.\n$$\n\nSecond, count Interactions. There are two sequential enzymatic reactions: $S \\rightarrow I$ catalyzed by $E1$, and $I \\rightarrow P$ catalyzed by $E2$. To unambiguously represent two distinct processes with different catalysts, we require\n$$\n\\text{Interactions} = 2.\n$$\n\nThird, count Participations. For each enzymatic reaction, the minimal roles are substrate (reactant), product, and catalyst. Thus, for each Interaction there are exactly $3$ Participations:\n- For $S \\rightarrow I$ catalyzed by $E1$: $S$ as reactant, $I$ as product, $E1$ as catalyst.\n- For $I \\rightarrow P$ catalyzed by $E2$: $I$ as reactant, $P$ as product, $E2$ as catalyst.\n\nSince Participations are per Interaction, the intermediate $I$ requires one Participation in each Interaction. Therefore, the total number of Participations is\n$$\n\\text{Participations} = 3 \\times 2 = 6.\n$$\n\nCombining these, the minimal unambiguous representation uses $5$ ComponentDefinitions, $2$ Interactions, and $6$ Participations, which corresponds to option A.", "answer": "$$\\boxed{A}$$", "id": "2066823"}, {"introduction": "The power of SBOL extends beyond abstract representation; it is a vital tool for ensuring that our digital designs are biochemically viable for laboratory assembly. This practice bridges the gap between digital design and the wet lab by focusing on the Golden Gate assembly method, where you will analyze a design that uses `SequenceConstraint` objects to order genetic parts. Your task is to act as a design validator, checking the compatibility of DNA overhangs to find an error in the assembly plan, a critical step in automated bio-design workflows. [@problem_id:2066806]", "problem": "A synthetic biologist is designing a bacterial expression cassette using the Golden Gate assembly method with the Type IIs restriction enzyme BsaI. The design, which specifies the linear ordering of genetic parts, is formally described using the Synthetic Biology Open Language (SBOL). The design consists of four basic parts: a promoter, a Ribosome Binding Site (RBS), a Coding Sequence (CDS), and a terminator.\n\nThe Golden Gate assembly protocol for this project requires that for any two parts to be ligated together, the 4-base-pair (bp) overhang at the 3' end of the preceding part must be identical to the 4-bp overhang at the 5' end of the succeeding part.\n\nThe SBOL document contains `ComponentDefinition` objects for each genetic part and `SequenceConstraint` objects to define their relative order. Below is a summary of the relevant data from the SBOL document.\n\n**Component Definitions:**\nEach part is defined by a `ComponentDefinition` with a unique Uniform Resource Identifier (URI) and specified 5' and 3' overhang sequences.\n\n| URI Fragment | Part Role | 5' Overhang | 3' Overhang |\n| :--- | :--- | :--- | :--- |\n| `p_J23100` | Promoter | `GGAG` | `AATG` |\n| `rbs_B0034`| RBS | `AATG` | `TTCG` |\n| `cds_sfGFP`| CDS | `TTCG` | `GCTC` |\n| `t_L3S2P21`| Terminator | `GCTA` | `CGCT` |\n\n**Sequence Constraints:**\nThe assembly order is specified by `SequenceConstraint` objects. Each constraint has a URI and defines a `subject` (preceding part) that must come before an `object` (succeeding part).\n\n| Constraint URI | Subject URI Fragment | Object URI Fragment |\n| :--- | :--- | :--- |\n| `http://example.org/sc/1` | `p_J23100` | `rbs_B0034` |\n| `http://example.org/sc/2` | `rbs_B0034` | `cds_sfGFP` |\n| `http://example.org/sc/3` | `cds_sfGFP` | `t_L3S2P21` |\n\nAn error was made during the design process, resulting in one of the `SequenceConstraint`s representing a biochemically invalid ligation junction according to the Golden Gate assembly rules. Identify the URI of the invalid `SequenceConstraint`.\n\nA. `http://example.org/sc/1`\n\nB. `http://example.org/sc/2`\n\nC. `http://example.org/sc/3`\n\nD. All constraints represent valid junctions.", "solution": "Golden Gate assembly with a Type IIs enzyme requires that, for two parts to ligate, the 4-bp overhang at the 3' end of the preceding part is identical to the 4-bp overhang at the 5' end of the succeeding part.\n\nCheck each SequenceConstraint against the overhangs:\n\n1) Constraint http://example.org/sc/1: subject p_J23100 precedes object rbs_B0034. The 3' overhang of p_J23100 is AATG, and the 5' overhang of rbs_B0034 is AATG. These are identical, so this junction is valid.\n\n2) Constraint http://example.org/sc/2: subject rbs_B0034 precedes object cds_sfGFP. The 3' overhang of rbs_B0034 is TTCG, and the 5' overhang of cds_sfGFP is TTCG. These are identical, so this junction is valid.\n\n3) Constraint http://example.org/sc/3: subject cds_sfGFP precedes object t_L3S2P21. The 3' overhang of cds_sfGFP is GCTC, while the 5' overhang of t_L3S2P21 is GCTA. These differ (C versus A at the fourth position), so this junction is invalid.\n\nTherefore, the invalid SequenceConstraint is http://example.org/sc/3.", "answer": "$$\\boxed{C}$$", "id": "2066806"}, {"introduction": "As synthetic biological systems grow in complexity, managing that complexity becomes paramount, and hierarchical design is the key to creating large, reliable genetic circuits. This problem introduces you to modular design in SBOL, where complex systems like an Incoherent Feed-Forward Loop (I1-FFL) are built by connecting smaller, self-contained sub-systems. You will explore how to use `ModuleDefinition` containers and `MapsTo` mappings to \"wire\" signals between different functional modules, a powerful technique for creating scalable and reusable designs. [@problem_id:2066811]", "problem": "A synthetic biology research team is designing an Incoherent Type 1 Feed-Forward Loop (I1-FFL) to generate a pulse of protein expression in *E. coli*. The circuit is intended to function as follows:\n1.  An input molecule, arabinose, induces the expression of the transcriptional repressor protein TetR.\n2.  Arabinose also independently activates the expression of Green Fluorescent Protein (GFP). This activation is mediated by the AraC protein, which is supplied by a separate, constitutively expressed gene.\n3.  The newly synthesized TetR protein then represses and shuts off the expression of GFP.\n\nTo formally capture this design, the team uses the Synthetic Biology Open Language (SBOL). They decide on a hierarchical structure:\n- A top-level `ModuleDefinition` named `IFFL_System` encapsulates the entire design.\n- The `IFFL_System` contains two `Module` instances (sub-modules):\n    1.  `sensor_subsystem`, which is an instantiation of a `ModuleDefinition` named `SensorModuleDef`. This module's purpose is to sense arabinose and produce TetR. It has a formal output port (a `FunctionalComponent`) for the `TetR_protein`.\n    2.  `actuator_subsystem`, which is an instantiation of a `ModuleDefinition` named `ActuatorModuleDef`. This module's purpose is to produce GFP. It has a formal input port for `Arabinose` and another formal input port for `TetR_protein`.\n- The `IFFL_System` itself has a top-level input port for `Arabinose` and a top-level output port for `GFP`.\n\nIn SBOL, connections between module instances are not made directly. Instead, a `Module` instance uses `MapsTo` objects to link its internal `FunctionalComponent`s (its ports) to `FunctionalComponent`s defined within its parent container (`IFFL_System` in this case). To connect the output of `sensor_subsystem` to the input of `actuator_subsystem`, their respective ports must be mapped to a common `FunctionalComponent` that represents the shared signal within the `IFFL_System` design.\n\nGiven this hierarchical structure and the rules of SBOL wiring, which of the following statements correctly describes a necessary set of mappings within the `IFFL_System` `ModuleDefinition` to ensure the circuit is wired correctly?\n\nA. A `MapsTo` object must link the top-level `Arabinose` input port of `IFFL_System` exclusively to the `Arabinose` input port of the `sensor_subsystem` `Module` instance.\n\nB. Two `MapsTo` objects are required: one linking the `TetR_protein` output port of the `sensor_subsystem` `Module` instance to a shared `FunctionalComponent` representing the TetR protein signal within `IFFL_System`, and a second linking that same shared `FunctionalComponent` to the `TetR_protein` input port of the `actuator_subsystem` `Module` instance.\n\nC. A single `MapsTo` object must be created that directly links the `gfp_cds` `ComponentDefinition` within the `actuator_subsystem` to the `tetR_cds` `ComponentDefinition` within the `sensor_subsystem`.\n\nD. A `MapsTo` object must link the `GFP` output port of the `actuator_subsystem` back to the `Arabinose` input port of the `sensor_subsystem` to create a feedback loop.\n\nE. A single `MapsTo` object must be created that directly links the `TetR_protein` output port of the `sensor_subsystem` `Module` instance to the `TetR_protein` input port of the `actuator_subsystem` `Module` instance.", "solution": "1. Define the hierarchy and ports in SBOL terms. The top-level design is a `ModuleDefinition` called IFFL_System that contains:\n- Top-level `FunctionalComponent`s serving as ports for the shared signals: an input for Arabinose, an internal shared signal for TetR protein, and an output for GFP.\n- Two `Module` instances: sensor_subsystem (instantiating SensorModuleDef) that produces TetR and exports a TetR_protein output port; actuator_subsystem (instantiating ActuatorModuleDef) that consumes Arabinose and TetR_protein and produces GFP.\n\n2. State the SBOL wiring rule. In SBOL, a `Module` instance cannot directly connect its internal `FunctionalComponent`s to those of a sibling `Module`. Instead, each `Module` instance uses `MapsTo` objects to map its internal `FunctionalComponent`s (ports) to `FunctionalComponent`s defined in the parent `ModuleDefinition`. Formally, if a child module has an internal port $p_{child}$ and the parent has a `FunctionalComponent` $P_{parent}$ representing the same signal, a `MapsTo` establishes the relation $p_{child} \\leftrightarrow P_{parent}$. Sibling modules communicate by both mapping their respective ports to the same parent-level `FunctionalComponent`.\n\n3. Apply the rule to the TetR connection. To route the TetR signal from sensor_subsystem to actuator_subsystem, both modules must map their TetR ports to a common parent-level `FunctionalComponent` that represents the TetR protein within IFFL_System. This requires:\n- A `MapsTo` in sensor_subsystem linking its TetR_protein output port to the parent-level TetR `FunctionalComponent`.\n- A `MapsTo` in actuator_subsystem linking its TetR_protein input port to that same parent-level TetR `FunctionalComponent`.\nThese two mappings together implement the effective connection between the sensor’s TetR output and the actuator’s TetR input.\n\n4. Evaluate the options:\n- Option A is incorrect because Arabinose must be available to any submodule that consumes it. Since actuator_subsystem has an Arabinose input port, the top-level Arabinose `FunctionalComponent` must map to both sensor_subsystem and actuator_subsystem ports; mapping exclusively to the sensor is insufficient.\n- Option B is correct because it specifies the required two `MapsTo` objects that connect both submodules’ TetR ports to a shared parent-level TetR `FunctionalComponent`, which is the SBOL-prescribed pattern for wiring signals between siblings.\n- Option C is incorrect because `MapsTo` objects map `FunctionalComponent`s (instances), not `ComponentDefinition`s (types). Linking `gfp_cds` to `tetR_cds` is also semantically wrong for the intended signal wiring.\n- Option D is incorrect because it proposes mapping GFP output to Arabinose input, which both creates an unintended feedback loop and violates the requirement that a `MapsTo` maps corresponding representations of the same signal.\n- Option E is incorrect because SBOL does not allow a single `MapsTo` directly between sibling modules; the mapping must be via a common parent-level `FunctionalComponent`.\n\nTherefore, only the description in Option B matches the necessary SBOL mappings to wire the TetR signal correctly within the IFFL_System hierarchy.", "answer": "$$\\boxed{B}$$", "id": "2066811"}]}