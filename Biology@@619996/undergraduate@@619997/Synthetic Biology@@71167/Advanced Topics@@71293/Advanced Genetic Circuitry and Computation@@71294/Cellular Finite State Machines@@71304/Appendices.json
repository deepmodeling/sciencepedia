{"hands_on_practices": [{"introduction": "Understanding how a cell's state evolves over time is the first step in mastering cellular FSMs. This exercise provides a concrete model of an optogenetic switch, where light acts as an input to control a cell's phenotype. By tracing the state of the bacterium through a sequence of light pulses, you will practice the fundamental skill of applying state transition rules, which is essential for predicting the behavior of any programmed biological circuit [@problem_id:2025665].", "problem": "In the field of synthetic biology, researchers design artificial gene circuits to program novel behaviors in cells. Consider an engineered bacterium whose motility is controlled by an optogenetic switch, a system that uses light to control gene expression. The behavior of this bacterium can be modeled as a discrete-time Finite State Machine (FSM), a mathematical model of computation with a finite number of states.\n\nThe system is characterized by a single binary input, Blue Light ($L$), where $L=1$ indicates the light is ON and $L=0$ indicates the light is OFF. The state of the bacterium is described by one of four possibilities: $S_0, S_1, S_2, S_3$, where $S_0$ is the initial state.\n- $S_0$: Motile and Responsive. The cell is actively moving and can react to the light stimulus.\n- $S_1$: Sessile and Responsive. The cell is stationary, attached to a surface, and can react to the light stimulus.\n- $S_2$: Motile and Refractory. The cell is moving but is in a one-time-step cooldown period, during which it cannot react to light.\n- $S_3$: Sessile and Refractory. The cell is stationary but is in a one-time-step cooldown period, during which it cannot react to light.\n\nThe state transitions at each time step, from time $t$ to $t+1$, are governed by the following rules:\n1.  If the cell is in a Responsive state ($S_0$ or $S_1$) at time $t$ and the light is ON ($L(t)=1$), it toggles its phenotype (Motile $\\leftrightarrow$ Sessile) and enters the corresponding Refractory state at time $t+1$. Specifically, a state of $S_0$ transitions to $S_3$, and a state of $S_1$ transitions to $S_2$.\n2.  If the cell is in a Responsive state ($S_0$ or $S_1$) at time $t$ and the light is OFF ($L(t)=0$), its state does not change. The state at $t+1$ is the same as the state at $t$.\n3.  If the cell is in a Refractory state ($S_2$ or $S_3$) at time $t$, it transitions to its corresponding Responsive state ($S_2 \\rightarrow S_0$, $S_3 \\rightarrow S_1$) at time $t+1$, regardless of the light input $L(t)$.\n\nSuppose a bacterium is in state $S_1$ (Sessile and Responsive) at time $t=0$. It is then subjected to a sequence of light inputs given by $L(0)=1$, $L(1)=0$, $L(2)=1$, and $L(3)=1$. What is the state of the bacterium at time $t=4$?\n\nA. $S_0$\n\nB. $S_1$\n\nC. $S_2$\n\nD. $S_3$", "solution": "The problem asks for the final state of a Finite State Machine (FSM) after a sequence of inputs. We need to trace the state of the bacterium step-by-step, applying the given transition rules at each time interval from $t=0$ to $t=4$.\n\nThe initial state is given as $S(0) = S_1$. The input light sequence is $L = \\{L(0), L(1), L(2), L(3)\\} = \\{1, 0, 1, 1\\}$.\n\n**Time step 1 (from $t=0$ to $t=1$):**\n- Current State at $t=0$: $S(0) = S_1$ (Sessile and Responsive).\n- Input at $t=0$: $L(0) = 1$.\n- Applicable Rule: The cell is in a Responsive state ($S_1$) and the light is ON ($L=1$). We apply Rule 1. The cell toggles from Sessile to Motile and enters the Refractory state. Thus, the transition is $S_1 \\rightarrow S_2$.\n- State at $t=1$: $S(1) = S_2$.\n\n**Time step 2 (from $t=1$ to $t=2$):**\n- Current State at $t=1$: $S(1) = S_2$ (Motile and Refractory).\n- Input at $t=1$: $L(1) = 0$.\n- Applicable Rule: The cell is in a Refractory state ($S_2$). We apply Rule 3, which states that the transition is independent of the light input. The cell transitions to its corresponding Responsive state. Thus, the transition is $S_2 \\rightarrow S_0$.\n- State at $t=2$: $S(2) = S_0$.\n\n**Time step 3 (from $t=2$ to $t=3$):**\n- Current State at $t=2$: $S(2) = S_0$ (Motile and Responsive).\n- Input at $t=2$: $L(2) = 1$.\n- Applicable Rule: The cell is in a Responsive state ($S_0$) and the light is ON ($L=1$). We apply Rule 1. The cell toggles from Motile to Sessile and enters the Refractory state. Thus, the transition is $S_0 \\rightarrow S_3$.\n- State at $t=3$: $S(3) = S_3$.\n\n**Time step 4 (from $t=3$ to $t=4$):**\n- Current State at $t=3$: $S(3) = S_3$ (Sessile and Refractory).\n- Input at $t=3$: $L(3) = 1$.\n- Applicable Rule: The cell is in a Refractory state ($S_3$). We apply Rule 3, which is independent of the light input. The cell transitions to its corresponding Responsive state. Thus, the transition is $S_3 \\rightarrow S_1$.\n- State at $t=4$: $S(4) = S_1$.\n\nAfter processing the entire input sequence, the final state of the bacterium at time $t=4$ is $S_1$. This corresponds to option B.", "answer": "$$\\boxed{B}$$", "id": "2025665"}, {"introduction": "Beyond simply predicting a circuit's behavior, synthetic biologists must design circuits to perform specific computational tasks. This practice challenges you to think like a designer by constructing the logic for a cellular \"combination lock\" [@problem_id:2025697]. Your goal is to map out the state transitions required to recognize a precise sequence of chemical inputs, including defining irreversible failure states, a crucial feature for building robust and reliable biological machines.", "problem": "A team of synthetic biologists is designing a cellular \"combination lock\" using a Finite State Machine (FSM) architecture. The engineered cell is designed to produce a specific reporter protein only after it is exposed to three different chemical inducers in a precise, predefined sequence. If the inducers are added out of order, the cell must enter a permanent, irreversible failure state from which it cannot recover to produce the reporter.\n\nThe system has the following components:\n- **States**: The cell can exist in one of five states:\n    - `$S_0$`: The initial \"locked\" ground state.\n    - `$S_1$`: The state after receiving the first correct inducer.\n    - `$S_2$`: The state after receiving the second correct inducer.\n    - `$S_3$`: The final \"unlocked\" state where the reporter protein is produced. This state is a latch, meaning once entered, the cell remains in this state indefinitely.\n    - `$S_F$`: An irreversible \"failure\" state. Once entered, the cell remains in this state indefinitely.\n\n- **Inputs**: At any given time, the cell is exposed to one of four possible input conditions:\n    - `A`: Presence of Arabinose only.\n    - `T`: Presence of anhydrotetracycline (aTc) only.\n    - `I`: Presence of Isopropyl Î²-D-1-thiogalactopyranoside (IPTG) only.\n    - `N`: Absence of any inducer.\n\n- **Logic**:\n    1. The required sequence to reach the unlocked state `$S_3$` is Arabinose (`A`), followed by aTc (`T`), followed by IPTG (`I`).\n    2. The cell starts in state `$S_0$`.\n    3. Exposure to an incorrect inducer at any stage before reaching `$S_3$` sends the cell to the failure state `$S_F$`.\n    4. If the cell is in a correct intermediate state (`$S_1$` or `$S_2$`) and the inducer is removed (input `N`), or if it is re-exposed to a previous correct inducer, it should maintain its current state, waiting for the next correct signal in the sequence.\n\nYour task is to determine the correct state transition table for this cellular FSM. A state transition is denoted by `(Current State, Input) -> Next State`. Which of the following sets of transitions correctly describes the behavior of the combination lock cell?\n\nA.\n`($S_0$, A) -> $S_1$`, `($S_0$, T) -> $S_F$`, `($S_0$, I) -> $S_F$`, `($S_0$, N) -> $S_0$`\n`($S_1$, T) -> $S_2$`, `($S_1$, I) -> $S_F$`, `($S_1$, A) -> $S_1$`, `($S_1$, N) -> $S_1$`\n`($S_2$, I) -> $S_3$`, `($S_2$, A) -> $S_2$`, `($S_2$, T) -> $S_2$`, `($S_2$, N) -> $S_2$`\n`($S_3$, any) -> $S_3$`, `($S_F$, any) -> $S_F$`\n\nB.\n`($S_0$, A) -> $S_1$`, `($S_0$, T) -> $S_F$`, `($S_0$, I) -> $S_F$`, `($S_0$, N) -> $S_0$`\n`($S_1$, T) -> $S_2$`, `($S_1$, I) -> $S_0$`, `($S_1$, A) -> $S_1$`, `($S_1$, N) -> $S_0$`\n`($S_2$, I) -> $S_3$`, `($S_2$, A) -> $S_0$`, `($S_2$, T) -> $S_2$`, `($S_2$, N) -> $S_0$`\n`($S_3$, any) -> $S_3$`, `($S_F$, N) -> $S_0$`\n\nC.\n`($S_0$, A) -> $S_1$`, `($S_0$, T) -> $S_1$`, `($S_0$, I) -> $S_1$`, `($S_0$, N) -> $S_0$`\n`($S_1$, T) -> $S_2$`, `($S_1$, I) -> $S_F$`, `($S_1$, A) -> $S_1$`, `($S_1$, N) -> $S_1$`\n`($S_2$, I) -> $S_3$`, `($S_2$, A) -> $S_F$`, `($S_2$, T) -> $S_2$`, `($S_2$, N) -> $S_2$`\n`($S_3$, any) -> $S_3$`, `($S_F$, any) -> $S_F$`\n\nD.\n`($S_0$, A) -> $S_1$`, `($S_0$, T) -> $S_F$`, `($S_0$, I) -> $S_F$`, `($S_0$, N) -> $S_0$`\n`($S_1$, I) -> $S_2$`, `($S_1$, T) -> $S_F$`, `($S_1$, A) -> $S_1$`, `($S_1$, N) -> $S_1$`\n`($S_2$, T) -> $S_3$`, `($S_2$, A) -> $S_2$`, `($S_2$, I) -> $S_2$`, `($S_2$, N) -> $S_2$`\n`($S_3$, any) -> $S_3$`, `($S_F$, any) -> $S_F$`", "solution": "To solve this problem, we must construct the state transition table based on the rules provided in the problem statement. We will analyze the required transitions from each state one by one. The `any` input condition for states `$S_3$` and `$S_F$` refers to any of the possible inputs: `A`, `T`, `I`, or `N`.\n\n**State $S_0$ (Initial State):**\nThe cell starts in `$S_0$`. The correct first input is Arabinose (`A`).\n- If the input is `A`, the cell should transition to `$S_1$`. So, `($S_0$, A) -> $S_1$`.\n- Any other inducer, `T` or `I`, is an incorrect first input. This should send the cell to the failure state `$S_F$`. So, `($S_0$, T) -> $S_F$` and `($S_0$, I) -> $S_F$`.\n- If no inducer is present (input `N`), the cell remains in its initial state. So, `($S_0$, N) -> $S_0$`.\nThe transitions from `$S_0$` are: `($S_0$, A) -> $S_1$`, `($S_0$, T) -> $S_F$`, `($S_0$, I) -> $S_F$`, `($S_0$, N) -> $S_0$`.\n\n**State $S_1$ (First Correct Input Received):**\nThe cell is in `$S_1$` after correctly processing input `A`. The correct next input is aTc (`T`).\n- If the input is `T`, the cell should transition to `$S_2$`. So, `($S_1$, T) -> $S_2$`.\n- The input `I` is incorrect at this stage. This should send the cell to the failure state `$S_F$`. So, `($S_1$, I) -> $S_F$`.\n- According to the rules, if the cell is re-exposed to a previous correct inducer (`A`) or if the inducer is removed (`N`), it should maintain its current state. So, `($S_1$, A) -> $S_1$` and `($S_1$, N) -> $S_1$`.\nThe transitions from `$S_1$` are: `($S_1$, T) -> $S_2$`, `($S_1$, I) -> $S_F$`, `($S_1$, A) -> $S_1$`, `($S_1$, N) -> $S_1$`.\n\n**State $S_2$ (Second Correct Input Received):**\nThe cell is in `$S_2$` after correctly processing the sequence `A` then `T`. The correct final input is IPTG (`I`).\n- If the input is `I`, the cell completes the sequence and transitions to the unlocked state `$S_3$`. So, `($S_2$, I) -> $S_3$`.\n- Re-exposure to previous correct inducers (`A` or `T`) or removal of the inducer (`N`) should cause the cell to maintain its state. So, `($S_2$, A) -> $S_2$`, `($S_2$, T) -> $S_2$`, and `($S_2$, N) -> $S_2$`. Note that exposure to `A` is an incorrect input at this stage in the sequence, but the rule for maintaining state upon exposure to *previous correct* inducers is specified. If we were to interpret \"incorrect inducer\" strictly, `($S_2$, A) -> $S_F$` would also be a valid design, but rule 4 guides us to `($S_2$, A) -> $S_2$`. Let's re-examine the options based on this. All options that are close to correct, like A and D, use `($S_2$, A) -> $S_2$` and `($S_2$, T) -> $S_2$`. This confirms the interpretation that the cell should \"hold\" its state when re-exposed to previous signals in the sequence.\nThe transitions from `$S_2$` are: `($S_2$, I) -> $S_3$`, `($S_2$, A) -> $S_2$`, `($S_2$, T) -> $S_2$`, `($S_2$, N) -> $S_2$`.\n\n**State $S_3$ (Unlocked State):**\nThe problem states that `$S_3$` is a \"latch\" state, meaning once entered, the cell remains there indefinitely.\n- Therefore, for any input (`A`, `T`, `I`, or `N`), the cell stays in `$S_3$`. We can write this as `($S_3$, any) -> $S_3$`.\n\n**State $S_F$ (Failure State):**\nThe problem states that `$S_F$` is an \"irreversible\" failure state. Once entered, the cell remains there indefinitely.\n- Therefore, for any input (`A`, `T`, `I`, or `N`), the cell stays in `$S_F$`. We can write this as `($S_F$, any) -> $S_F$`.\n\n**Comparing with the Options:**\nLet's assemble our derived transition table and compare it with the given options.\n- Our derived table:\n    - `($S_0$, A) -> $S_1$`, `($S_0$, T) -> $S_F$`, `($S_0$, I) -> $S_F$`, `($S_0$, N) -> $S_0$`\n    - `($S_1$, T) -> $S_2$`, `($S_1$, I) -> $S_F$`, `($S_1$, A) -> $S_1$`, `($S_1$, N) -> $S_1$`\n    - `($S_2$, I) -> $S_3$`, `($S_2$, A) -> $S_2$`, `($S_2$, T) -> $S_2$`, `($S_2$, N) -> $S_2$`\n    - `($S_3$, any) -> $S_3$`, `($S_F$, any) -> $S_F$`\n\n- **Option A:** This matches our derived table exactly.\n- **Option B:** This option incorrectly resets the state to `$S_0$` on incorrect inputs `($S_1$, I) -> $S_0$` or upon removal of the inducer `($S_1$, N) -> $S_0$`, which violates rule 4 and the requirement for a permanent failure state. It also incorrectly shows the failure state `$S_F$` as being reversible `($S_F$, N) -> $S_0$`.\n- **Option C:** This option incorrectly assumes any inducer can start the sequence (`($S_0$, T) -> $S_1$`, `($S_0$, I) -> $S_1$`), violating the specific sequence requirement.\n- **Option D:** This option has the wrong sequence of inducers after the first step. It requires `I` then `T` (`($S_1$, I) -> $S_2$` then `($S_2$, T) -> $S_3$`), which contradicts the required sequence of `A -> T -> I`.\n\nTherefore, the only option that correctly models the specified cellular FSM is A.", "answer": "$$\\boxed{A}$$", "id": "2025697"}, {"introduction": "In synthetic biology, elegance and efficiency are key engineering goals, as simpler genetic circuits are often more stable and less burdensome to the host cell. This exercise introduces the formal process of Finite State Machine minimization, a powerful technique for optimizing computational circuits [@problem_id:2025677]. By identifying and merging equivalent states in a given biosensor design, you will learn how to create a functionally identical FSM with the minimum possible complexity.", "problem": "A team of synthetic biologists has engineered *Escherichia coli* to function as a sequential logic biosensor. The genetic circuit within the bacterium can be modeled as a Finite State Machine (FSM). The purpose of this biosensor is to detect the temporal order of two specific chemical inducers, Ligand-X and Ligand-Y, in its environment.\n\nThe FSM has five states, denoted $S_0, S_1, S_2, S_3, S_4$, where $S_0$ is the initial state. The machine's behavior is determined by the presence of the inducers, which are represented by three possible inputs:\n- `x`: Only Ligand-X is present.\n- `y`: Only Ligand-Y is present.\n- `n`: Neither ligand is present.\n\nThe FSM is a Moore machine, meaning its output is determined solely by its current state. The output is a binary value: `1` if the cell produces a specific reporter protein, and `0` otherwise. The state transition function and the output for each state are defined in the table below.\n\n| Current State | Output | Next State (on input `x`) | Next State (on input `y`) | Next State (on input `n`) |\n| :------------ | :----: | :-----------------------: | :-----------------------: | :-----------------------: |\n| $S_0$         |   0    |          $S_1$          |          $S_2$          |          $S_0$          |\n| $S_1$         |   0    |          $S_1$          |          $S_3$          |          $S_0$          |\n| $S_2$         |   0    |          $S_4$          |          $S_2$          |          $S_0$          |\n| $S_3$         |   1    |          $S_1$          |          $S_2$          |          $S_0$          |\n| $S_4$         |   0    |          $S_1$          |          $S_2$          |          $S_0$          |\n\nTo optimize the genetic circuit, the team wants to construct an equivalent FSM with the minimum possible number of states. In a minimal FSM, no two states are equivalent. Two states are considered equivalent if for every possible input sequence, the machine produces the same output sequence regardless of which of the two states is the starting state.\n\nWhich of the following pairs of states in the original FSM are equivalent?\n\nA. $S_1$ and $S_2$\n\nB. $S_2$ and $S_4$\n\nC. $S_0$ and $S_4$\n\nD. $S_3$ and $S_4$\n\nE. No two states are equivalent.", "solution": "Because this is a Moore machine, two states can be equivalent only if they have the same output and, for each input symbol, transition to equivalent states. Since $S_{3}$ has output $1$ and all others have output $0$, $S_{3}$ cannot be equivalent to any other state.\n\nBegin with the initial partition by output:\n$$P_{0}=\\{\\{S_{3}\\},\\{S_{0},S_{1},S_{2},S_{4}\\}\\}.$$\n\nRefine $\\{S_{0},S_{1},S_{2},S_{4}\\}$ by examining, for each state, the block reached under each input when blocks are those of $P_{0}$. Let $A=\\{S_{3}\\}$ and $B=\\{S_{0},S_{1},S_{2},S_{4}\\}$. The transition signatures to blocks are:\n- $S_{0}$: $(x\\to B,\\ y\\to B,\\ n\\to B)$,\n- $S_{1}$: $(x\\to B,\\ y\\to A,\\ n\\to B)$,\n- $S_{2}$: $(x\\to B,\\ y\\to B,\\ n\\to B)$,\n- $S_{4}$: $(x\\to B,\\ y\\to B,\\ n\\to B)$.\n\nThus $S_{1}$ separates. The refined partition is\n$$P_{1}=\\{\\{S_{3}\\},\\{S_{1}\\},\\{S_{0},S_{2},S_{4}\\}\\}.$$\n\nRefine $\\{S_{0},S_{2},S_{4}\\}$ using $P_{1}$. Let $C=\\{S_{3}\\}$, $D=\\{S_{1}\\}$, $E=\\{S_{0},S_{2},S_{4}\\}$. The signatures are:\n- $S_{0}$: $(x\\to D,\\ y\\to E,\\ n\\to E)$,\n- $S_{2}$: $(x\\to E,\\ y\\to E,\\ n\\to E)$,\n- $S_{4}$: $(x\\to D,\\ y\\to E,\\ n\\to E)$.\n\nThus $S_{2}$ separates, leaving\n$$P_{2}=\\{\\{S_{3}\\},\\{S_{1}\\},\\{S_{2}\\},\\{S_{0},S_{4}\\}\\}.$$\n\nCheck stability of $\\{S_{0},S_{4}\\}$ with respect to $P_{2}$: both have identical transitions\n$$x\\to S_{1}\\in\\{S_{1}\\},\\quad y\\to S_{2}\\in\\{S_{2}\\},\\quad n\\to S_{0}\\in\\{S_{0},S_{4}\\},$$\nso no further refinement occurs. Therefore $S_{0}$ and $S_{4}$ are equivalent, and no other pair among the options is equivalent.\n\nA direct distinguishing-sequence check confirms the non-equivalences: for example, starting from $S_{2}$ and $S_{4}$, the input $xy$ yields output sequences $0,0,0$ from $S_{2}$ and $0,0,1$ from $S_{4}$, so $S_{2}\\not\\equiv S_{4}$; and $S_{1}$ has a $y$-transition to $S_{3}$ (output $1$), unlike $S_{2}$.\n\nHence the only equivalent pair among the given options is $S_{0}$ and $S_{4}$.", "answer": "$$\\boxed{C}$$", "id": "2025677"}]}