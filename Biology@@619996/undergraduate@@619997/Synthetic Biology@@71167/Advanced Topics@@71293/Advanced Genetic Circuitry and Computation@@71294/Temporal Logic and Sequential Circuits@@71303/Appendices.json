{"hands_on_practices": [{"introduction": "Sequential circuits are powerful because they possess 'memory,' allowing their output to depend on the history of inputs, not just the current one. A fundamental way to model this behavior is through a finite-state machine, where the circuit can exist in a limited number of stable states and transitions between them based on defined rules. This exercise [@problem_id:2073892] provides hands-on practice in tracing the step-by-step evolution of such a genetic state machine, a core skill for predicting the behavior of any programmed biological system.", "problem": "A synthetic biology research team is designing a genetic sequential circuit within a bacterium. This circuit, termed the \"Tri-stable Memory Module,\" is designed to respond to a sequence of chemical inputs. The state of the circuit determines which protein, if any, the bacterium produces. The module can exist in one of three discrete states:\n\n1.  **OFF**: The baseline state where no specific output protein is produced. The module is always in this state upon its initial creation.\n2.  **PRIMED**: An intermediate state triggered by an initial signal. In this state, the cell produces a transient, non-functional marker peptide but not the final output protein.\n3.  **ON**: The fully activated state where the cell stably produces a desired functional protein (e.g., an enzyme or a fluorescent marker).\n\nThe transitions between these states are governed by the addition of three distinct, non-interacting chemical signals to the cell's environment. The circuit processes one signal at a time, and its state transitions are deterministic based on the current state and the current input signal. The logic is as follows:\n\n*   **Transitions from the OFF state:**\n    *   An input of `Signal-X` causes a transition to the `PRIMED` state.\n    *   An input of `Signal-Y` or `Reset-Z` causes no change, and the state remains `OFF`.\n\n*   **Transitions from the PRIMED state:**\n    *   An input of `Signal-Y` causes a transition to the `ON` state.\n    *   An input of `Signal-X` causes no change, and the state remains `PRIMED`.\n    *   An input of `Reset-Z` causes a transition to the `OFF` state.\n\n*   **Transitions from the ON state:**\n    *   An input of `Reset-Z` causes a transition to the `OFF` state.\n    *   An input of `Signal-X` or `Signal-Y` causes no change, and the state remains `ON`.\n\nA fresh culture of bacteria containing this circuit is prepared, meaning all circuits are initially in the `OFF` state. The culture is then subjected to the following sequence of signals, added one after another in the specified order:\n\n`Signal-X`, `Signal-X`, `Signal-Y`, `Reset-Z`, `Signal-X`, `Signal-Y`\n\nWhat is the final state of the Tri-stable Memory Module after this entire sequence of signals has been processed?\n\nA. OFF\n\nB. PRIMED\n\nC. ON\n\nD. The state oscillates between PRIMED and ON.\n\nE. The final state cannot be determined without knowing the signal concentrations.", "solution": "We model the module as a deterministic finite-state machine with initial state OFF. The allowed state transitions are:\n- From OFF: Signal-X leads to PRIMED; Signal-Y or Reset-Z lead to no change (remain OFF).\n- From PRIMED: Signal-Y leads to ON; Signal-X leads to no change (remain PRIMED); Reset-Z leads to OFF.\n- From ON: Reset-Z leads to OFF; Signal-X or Signal-Y lead to no change (remain ON).\n\nProcess the given sequence in order, starting from OFF.\n\n1) Input: Signal-X, current state: OFF. Rule from OFF with Signal-X gives next state PRIMED.\nState becomes PRIMED.\n\n2) Input: Signal-X, current state: PRIMED. Rule from PRIMED with Signal-X gives no change.\nState remains PRIMED.\n\n3) Input: Signal-Y, current state: PRIMED. Rule from PRIMED with Signal-Y gives next state ON.\nState becomes ON.\n\n4) Input: Reset-Z, current state: ON. Rule from ON with Reset-Z gives next state OFF.\nState becomes OFF.\n\n5) Input: Signal-X, current state: OFF. Rule from OFF with Signal-X gives next state PRIMED.\nState becomes PRIMED.\n\n6) Input: Signal-Y, current state: PRIMED. Rule from PRIMED with Signal-Y gives next state ON.\nState becomes ON.\n\nTherefore, after processing the entire sequence, the final state is ON, corresponding to option C. The transitions are deterministic and do not depend on concentrations, so the final state is uniquely determined.", "answer": "$$\\boxed{C}$$", "id": "2073892"}, {"introduction": "More complex sequential behaviors, such as counting events, can be constructed by logically connecting simpler memory elements, analogous to the flip-flops used in digital electronics. This exercise [@problem_id:2073923] challenges you to think like a circuit designer by modifying a standard up-counter into a down-counter. Understanding how a small change in wiring can reverse the circuit's function is key to mastering the design of programmable biological counters and timers.", "problem": "In a synthetic biology project, a team is engineering a bacterium to manage the consumption of a limited resource. They have designed a genetic circuit intended to act as a 2-bit countdown timer. The timer should start in a state representing the total number of resource units and decrement by one each time a resource unit is consumed. An intracellular signal, `PULSE`, goes from LOW to HIGH and back to LOW each time a unit is consumed.\n\nThe core of the timer is built from two identical genetic modules, `FF0` (for the least significant bit, LSB) and `FF1` (for the most significant bit, MSB). These modules behave exactly like negative-edge-triggered T-type flip-flops. A negative-edge-triggered flip-flop only changes its output state at the precise moment its clock (CLK) input transitions from a HIGH signal to a LOW signal. A T-type flip-flop is set to \"toggle,\" meaning its output Q will flip to the opposite state (from LOW to HIGH, or HIGH to LOW) upon a valid clock edge, provided its T input is held HIGH. Each module has a standard output `Q` and an inverted output `Q_bar`.\n\nThe initial design, intended as a prototype, is wired as a 2-bit asynchronous up-counter:\n1.  The `PULSE` signal is connected to the CLK input of `FF0`.\n2.  The standard output of `FF0`, `Q_0`, is connected to the CLK input of `FF1`.\n3.  The T inputs of both `FF0` and `FF1` are permanently held HIGH.\n4.  The state of the counter is read from the outputs (`Q_1`, `Q_0`).\n\nThis circuit incorrectly counts up: 00 -> 01 -> 10 -> 11 -> 00. To fix this and create the desired down-counter (e.g., a sequence like 11 -> 10 -> 01 -> 00), a single wiring modification must be made. Which of the following changes will correctly transform the circuit into a 2-bit asynchronous down-counter?\n\nA. The CLK input of `FF1` should be connected to the inverted output of `FF0` (`Q_bar_0`) instead of the standard output (`Q_0`).\n\nB. The `PULSE` signal should be connected to the CLK input of `FF1`, and the output `Q_1` should be connected to the CLK input of `FF0`.\n\nC. The T input of `FF1` should be connected to the inverted output of `FF0` (`Q_bar_0`) instead of being held HIGH.\n\nD. The CLK inputs of both `FF0` and `FF1` should be connected directly to the `PULSE` signal.\n\nE. The standard output `Q_0` should be connected to the T input of `FF1`, while the `PULSE` signal is connected to the CLK input of `FF1`.", "solution": "The problem asks us to identify the single wiring change that converts a 2-bit asynchronous up-counter into a down-counter, using negative-edge-triggered T-type flip-flops. Let's denote the LOW state as 0 and the HIGH state as 1. The counter state is given by the tuple $(Q_1, Q_0)$.\n\nFirst, let's analyze the behavior of the initial up-counter circuit.\nThe flip-flops are negative-edge-triggered, meaning their outputs toggle when their respective clock (CLK) inputs transition from 1 to 0. Both T inputs are held at 1, so they are always in toggle mode.\n\n-   **Flip-Flop FF0 (LSB):** Its clock input is the `PULSE` signal. For each complete pulse cycle (0 -> 1 -> 0), there is one negative edge (1 -> 0). Therefore, $Q_0$ toggles on every pulse. Its sequence is 0, 1, 0, 1, ...\n\n-   **Flip-Flop FF1 (MSB):** Its clock input is connected to $Q_0$. It will toggle only when its clock input, $Q_0$, experiences a negative edge (transitions from 1 to 0).\n\nLet's trace the state transitions $(Q_1, Q_0)$ starting from (0, 0):\n1.  **Initial State:** $(Q_1, Q_0) = (0, 0)$.\n2.  **Pulse 1:** `PULSE` goes 1 -> 0. $Q_0$ toggles from 0 to 1. $Q_0$ made a 0 -> 1 transition (a positive edge), so $Q_1$ does not toggle. New state is (0, 1).\n3.  **Pulse 2:** `PULSE` goes 1 -> 0. $Q_0$ toggles from 1 to 0. $Q_0$ made a 1 -> 0 transition (a negative edge), so $Q_1$ toggles from 0 to 1. New state is (1, 0).\n4.  **Pulse 3:** `PULSE` goes 1 -> 0. $Q_0$ toggles from 0 to 1. $Q_0$ made a 0 -> 1 transition, so $Q_1$ does not toggle. New state is (1, 1).\n5.  **Pulse 4:** `PULSE` goes 1 -> 0. $Q_0$ toggles from 1 to 0. $Q_0$ made a 1 -> 0 transition, so $Q_1$ toggles from 1 to 0. New state is (0, 0).\n\nThe sequence is $00 \\rightarrow 01 \\rightarrow 10 \\rightarrow 11 \\rightarrow 00$, which corresponds to counting up: 0, 1, 2, 3, 0. This confirms the initial circuit is an up-counter.\n\nNow, let's determine the required behavior for a down-counter. The sequence should be $00 \\rightarrow 11 \\rightarrow 10 \\rightarrow 01 \\rightarrow 00$ (or, starting from a full count of 3, $11 \\rightarrow 10 \\rightarrow 01 \\rightarrow 00$).\nLet's trace the desired sequence starting from state (1, 1):\n-   **Start State:** $(Q_1, Q_0) = (1, 1)$.\n-   **Pulse 1:** `PULSE` clock causes $Q_0$ to toggle to 0. The desired next state is (1, 0). This means $Q_1$ should not have toggled.\n-   **Pulse 2:** `PULSE` clock causes $Q_0$ to toggle to 1. The desired next state is (0, 1). This means $Q_1$ must have toggled from 1 to 0.\n-   **Pulse 3:** `PULSE` clock causes $Q_0$ to toggle to 0. The desired next state is (0, 0). This means $Q_1$ should not have toggled.\n-   **Pulse 4:** `PULSE` clock causes $Q_0$ to toggle to 1. The desired next state is (1, 1) (if we loop around from 0). This means $Q_1$ must have toggled from 0 to 1.\n\nFrom this analysis, we can see the rule for the down-counter: $Q_1$ must toggle whenever $Q_0$ transitions from 0 to 1.\nThe flip-flop `FF1` is negative-edge-triggered, so it requires a 1 -> 0 transition on its CLK input to toggle. We need to find a signal that provides a 1 -> 0 transition whenever $Q_0$ makes a 0 -> 1 transition.\nLet's consider the inverted output of `FF0`, which is `Q_bar_0`. By definition, `Q_bar_0` is the logical opposite of $Q_0$.\n-   When $Q_0$ transitions from 0 to 1, `Q_bar_0` transitions from 1 to 0.\nThis is exactly the negative-edge signal required to clock `FF1` at the correct moments for down-counting.\nTherefore, the correct modification is to disconnect the CLK input of `FF1` from $Q_0$ and connect it to `Q_bar_0`. This corresponds to option A.\n\nLet's briefly analyze why the other options are incorrect:\n-   **B:** Reversing the order of the flip-flops (`PULSE` -> `FF1`, `Q_1` -> `FF0`) would just make $Q_1$ the LSB and $Q_0$ the MSB, but it would still be an up-counter in terms of its operation $(Q_0, Q_1)$.\n-   **C:** Connecting T input of `FF1` to `Q_bar_0`. This would mean `FF1` only toggles if `Q_bar_0` is HIGH (i.e., $Q_0$ is LOW) when its clock edge arrives. Its clock is still $Q_0$, which gives a negative edge when $Q_0$ goes 1->0. At that moment, `Q_bar_0` is 0, so the T input would be LOW, and `FF1` would never toggle. The counter would get stuck.\n-   **D:** Connecting both CLK inputs to `PULSE` creates a synchronous counter. With both T inputs high, both $Q_0$ and $Q_1$ would toggle on every pulse. The sequence would be $00 \\rightarrow 11 \\rightarrow 00 \\rightarrow 11 ...$, which is not a down-counter.\n-   **E:** This describes a different, more complex circuit configuration that doesn't correspond to a standard up or down counter.\n\nThus, the only correct modification is to use the inverted output of the preceding stage to clock the next stage.", "answer": "$$\\boxed{A}$$", "id": "2073923"}, {"introduction": "While digital abstractions are useful, the true behavior of synthetic circuits is governed by the continuous dynamics of protein production and degradation. This advanced practice [@problem_id:2073941] delves into this quantitative reality, exploring how to engineer a circuit that responds only to an input signal of a specific duration—a temporal 'band-pass' filter. Solving this problem requires moving beyond simple logic to manipulate the underlying differential equations, offering insight into how precise temporal computation can be achieved by tuning the kinetic parameters of a genetic circuit.", "problem": "A synthetic gene circuit is designed to function as a temporal band-pass filter, responding only to an input signal of a specific duration. The circuit is structured as follows:\n\nAn input signal, modeled as a square pulse of a chemical inducer `S` present for a duration $d_{in}$, simultaneously initiates the production of an activator protein `A` and a repressor protein `R`. The dynamics of their concentrations, denoted $[A]$ and $[R]$, are governed by the following first-order differential equations:\n$$ \\frac{d[A]}{dt} = \\alpha_A S(t) - \\delta_A [A] $$\n$$ \\frac{d[R]}{dt} = \\alpha_R S(t) - \\delta_R [R] $$\nwhere $S(t) = 1$ for $0 \\le t \\le d_{in}$ and $S(t) = 0$ otherwise. The parameters $\\alpha_A$ and $\\alpha_R$ are the maximum production rates, and $\\delta_A$ and $\\delta_R$ are the first-order degradation rates. Both proteins are absent at $t=0$.\n\nThe circuit produces a fluorescent output protein `Y` only at times $t$ when the concentration of the activator is above an activation threshold, $[A](t) > K_A$, and the concentration of the repressor is below a repression threshold, $[R](t) < K_R$. The circuit is designed such that the activator is more stable than the repressor, i.e., $\\delta_A < \\delta_R$. Output can be produced either during or after the input pulse, provided the conditions on $[A]$ and $[R]$ are met.\n\nThe operational window of the filter is defined by the range of input durations $[T_{min}, T_{max}]$ that result in the production of some amount of output `Y`.\n- $T_{min}$ is the minimum input duration required for the peak concentration of activator `A` to just reach the threshold $K_A$.\n- $T_{max}$ is the input duration at which the opportunity for output vanishes. This critical point occurs when, for the concentrations $[A](T_{max})$ and $[R](T_{max})$ at the end of the pulse, the subsequent decay causes the activator to drop below $K_A$ at the exact same instant the repressor drops below $K_R$.\n\nAssume that all production rates and threshold constants are set such that $0 < K_A \\delta_A < \\alpha_A$ and $0 < K_R \\delta_R < \\alpha_R$. A key feature of this circuit is the ability to tune its properties by varying the repressor production rate $\\alpha_R$.\n\nDetermine the specific value of $\\alpha_R$ for which the temporal filtering window completely closes, i.e., $T_{max} = T_{min}$. Express your answer as a symbolic expression in terms of $\\alpha_A, \\delta_A, \\delta_R, K_A,$ and $K_R$.", "solution": "During the input pulse, with $S(t)=1$ for $0 \\leq t \\leq d$, the dynamics\n$$\\frac{d[A]}{dt}=\\alpha_A-\\delta_A [A],\\qquad \\frac{d[R]}{dt}=\\alpha_R-\\delta_R [R],\\qquad [A](0)=[R](0)=0$$\nhave solutions\n$$[A](t)=\\frac{\\alpha_A}{\\delta_A}\\left(1-\\exp(-\\delta_A t)\\right),\\qquad [R](t)=\\frac{\\alpha_R}{\\delta_R}\\left(1-\\exp(-\\delta_R t)\\right).$$\nThus, at the end of a pulse of duration $d$, the concentrations are\n$$A_d=[A](d)=\\frac{\\alpha_A}{\\delta_A}\\left(1-\\exp(-\\delta_A d)\\right),\\qquad R_d=[R](d)=\\frac{\\alpha_R}{\\delta_R}\\left(1-\\exp(-\\delta_R d)\\right).$$\nAfter the pulse ($t>d$), both species decay:\n$$[A](t)=A_d\\,\\exp(-\\delta_A(t-d)),\\qquad [R](t)=R_d\\,\\exp(-\\delta_R(t-d)).$$\n\nBy definition, $T_{min}$ is the smallest duration for which the peak activator just reaches $K_A$. Since $[A](t)$ increases monotonically during the pulse and then decays, its peak at fixed $d$ occurs at $t=d$. Hence $T_{min}$ satisfies\n$$A_{T_{min}}=K_A\\quad\\Longrightarrow\\quad \\frac{\\alpha_A}{\\delta_A}\\left(1-\\exp(-\\delta_A T_{min})\\right)=K_A,$$\nwhich gives\n$$\\exp(-\\delta_A T_{min})=1-\\frac{K_A\\delta_A}{\\alpha_A},\\qquad T_{min}=\\frac{1}{\\delta_A}\\ln\\!\\left(\\frac{\\alpha_A}{\\alpha_A-K_A\\delta_A}\\right).$$\n\nFor $T_{max}$, define $t_A$ and $t_R$ as the post-pulse times when $[A]$ and $[R]$ cross their thresholds. From the post-pulse decays,\n$$t_A-d=\\frac{1}{\\delta_A}\\ln\\!\\left(\\frac{A_d}{K_A}\\right),\\qquad t_R-d=\\frac{1}{\\delta_R}\\ln\\!\\left(\\frac{R_d}{K_R}\\right).$$\nAt $T_{max}$, the opportunity for output vanishes when these crossings coincide:\n$$\\frac{1}{\\delta_A}\\ln\\!\\left(\\frac{A_d}{K_A}\\right)=\\frac{1}{\\delta_R}\\ln\\!\\left(\\frac{R_d}{K_R}\\right)\\quad\\text{with }d=T_{max}.$$\n\nWe now impose the window-closure condition $T_{max}=T_{min}$. At $d=T_{min}$ we have $A_d=K_A$ by definition, so\n$$\\frac{1}{\\delta_A}\\ln\\!\\left(\\frac{A_d}{K_A}\\right)=\\frac{1}{\\delta_A}\\ln(1)=0,$$\nforcing\n$$\\frac{1}{\\delta_R}\\ln\\!\\left(\\frac{R_d}{K_R}\\right)=0\\quad\\Longrightarrow\\quad R_d=K_R.$$\nTherefore, at $d=T_{min}$ the repressor end-of-pulse concentration must satisfy\n$$\\frac{\\alpha_R}{\\delta_R}\\left(1-\\exp(-\\delta_R T_{min})\\right)=K_R,$$\nwhich solves for $\\alpha_R$ as\n$$\\alpha_R=\\frac{\\delta_R K_R}{1-\\exp(-\\delta_R T_{min})}.$$\nSubstituting $T_{min}=\\frac{1}{\\delta_A}\\ln\\!\\left(\\frac{\\alpha_A}{\\alpha_A-K_A\\delta_A}\\right)$ yields\n$$\\exp(-\\delta_R T_{min})=\\exp\\!\\left(-\\frac{\\delta_R}{\\delta_A}\\ln\\!\\left(\\frac{\\alpha_A}{\\alpha_A-K_A\\delta_A}\\right)\\right)=\\left(\\frac{\\alpha_A-K_A\\delta_A}{\\alpha_A}\\right)^{\\delta_R/\\delta_A}.$$\nHence the repressor production rate at which the temporal window closes is\n$$\\alpha_R=\\frac{\\delta_R K_R}{1-\\left(\\frac{\\alpha_A-K_A\\delta_A}{\\alpha_A}\\right)^{\\delta_R/\\delta_A}}=\\frac{\\delta_R K_R}{1-\\left(1-\\frac{K_A\\delta_A}{\\alpha_A}\\right)^{\\delta_R/\\delta_A}}.$$\nThis expression respects the assumptions $0<K_A\\delta_A<\\alpha_A$ (ensuring $T_{min}>0$ and the exponent base in $(0,1)$) and gives a positive finite $\\alpha_R$.", "answer": "$$\\boxed{\\frac{\\delta_R K_R}{1-\\left(1-\\frac{K_A \\delta_A}{\\alpha_A}\\right)^{\\delta_R/\\delta_A}}}$$", "id": "2073941"}]}