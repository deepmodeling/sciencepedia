{"hands_on_practices": [{"introduction": "The first step in comparing biological sequences is understanding how an alignment's quality is quantified. This practice provides a direct, hands-on opportunity to calculate the total score for a given alignment by combining substitution scores from the widely-used BLOSUM62 matrix with a linear gap penalty. Mastering this fundamental calculation is essential before exploring how algorithms automatically find the optimal alignment [@problem_id:2136014].", "problem": "In the field of bioinformatics, sequence alignment is a fundamental method for comparing protein or nucleotide sequences to identify regions of similarity that may be a consequence of functional, structural, or evolutionary relationships. The quality of an alignment is quantified by a score, calculated using a substitution matrix and gap penalties.\n\nConsider the following gapped alignment of two short peptide sequences, Seq1 and Seq2:\n\nSeq1: `F E S A G K D E`\nSeq2: `F R S - G K T E`\n\nCalculate the total alignment score using the BLOcks SUbstitution Matrix 62 (BLOSUM62) and a linear gap penalty. A linear gap penalty means that each gap character, represented by a hyphen (`-`), incurs a fixed negative score, regardless of its length or position. For this problem, the linear gap penalty is $-8$.\n\nThe relevant substitution scores from the BLOSUM62 matrix are provided below:\n- Score(F, F) = 6\n- Score(E, R) = 0\n- Score(S, S) = 4\n- Score(G, G) = 6\n- Score(K, K) = 5\n- Score(D, T) = -1\n- Score(E, E) = 5\n\nProvide the total score as an integer.", "solution": "An alignment score with a substitution matrix and a linear gap penalty is computed by summing the substitution score for each aligned residue pair and adding the gap penalty for each gap character. Let $s(x,y)$ denote the BLOSUM62 substitution score and let the linear gap penalty be $g=-8$ per gap character.\n\nFor the given alignment across 8 columns, the contributions are:\n$$\ns(F,F)=6,\\quad s(E,R)=0,\\quad s(S,S)=4,\\quad \\text{gap}=g=-8,\\quad s(G,G)=6,\\quad s(K,K)=5,\\quad s(D,T)=-1,\\quad s(E,E)=5.\n$$\n\nTherefore, the total alignment score $S$ is\n$$\nS=6+0+4+(-8)+6+5+(-1)+5=17.\n$$", "answer": "$$\\boxed{17}$$", "id": "2136014"}, {"introduction": "Sequence alignment algorithms like Needleman-Wunsch build their solutions by filling a dynamic programming matrix, where each cell represents an optimal sub-problem. This exercise focuses on the core computational step: the recurrence relation used to calculate the score of a single cell based on its neighbors and the scoring system [@problem_id:2136015]. Understanding this \"local\" decision-making process is the key to grasping how the algorithm finds the \"global\" optimal alignment.", "problem": "In bioinformatics, the global alignment of two sequences is often performed using a dynamic programming algorithm. This algorithm fills a matrix, let's call it $M$, where the entry $M(i,j)$ represents the maximum possible score for aligning the first $i$ characters of sequence $A$ with the first $j$ characters of sequence $B$.\n\nA computational biologist is in the process of calculating a single entry, $M(i,j)$, in such a matrix for two protein sequences. The calculation of $M(i,j)$ depends on the values of its neighboring cells and the parameters of the scoring system. The scoring system uses a substitution matrix to score the alignment of two amino acids and a linear gap penalty for aligning an amino acid with a gap.\n\nYou are given the following pre-computed values from the dynamic programming matrix:\n- The score for aligning the first $i-1$ characters of sequence $A$ with the first $j-1$ characters of sequence $B$ is $M(i-1, j-1) = 15$.\n- The score for aligning the first $i-1$ characters of sequence $A$ with the first $j$ characters of sequence $B$ is $M(i-1, j) = 6$.\n- The score for aligning the first $i$ characters of sequence $A$ with the first $j-1$ characters of sequence $B$ is $M(i, j-1) = 9$.\n\nAdditionally, you are given the relevant scoring parameters:\n- The substitution score for aligning the $i$-th character of sequence $A$ with the $j$-th character of sequence $B$ is $S(A_i, B_j) = -3$.\n- A constant linear gap penalty of $d = -5$ is applied for any gap introduced.\n\nThe value of $M(i, j)$ is the maximum score achievable from the three possible moves that can lead to this cell: aligning character $A_i$ with $B_j$, aligning $A_i$ with a gap, or aligning $B_j$ with a gap.\n\nCalculate the numerical value of the matrix entry $M(i,j)$.", "solution": "The problem asks for the value of a cell $M(i,j)$ in a dynamic programming matrix for global sequence alignment, a process described by the Needleman-Wunsch algorithm. The value of $M(i,j)$ is computed based on a recurrence relation that considers three possibilities leading to the alignment of the first $i$ characters of sequence $A$ and the first $j$ characters of sequence $B$.\n\nThe three possibilities are:\n1.  The $i$-th character of sequence $A$, denoted $A_i$, is aligned with the $j$-th character of sequence $B$, denoted $B_j$. The score for this case is the score of the alignment up to the previous characters, $M(i-1, j-1)$, plus the substitution score for aligning $A_i$ and $B_j$, which is $S(A_i, B_j)$.\n2.  The $i$-th character of sequence $A$ is aligned with a gap. The score for this case is the score of aligning the first $i-1$ characters of $A$ with the first $j$ characters of $B$, which is $M(i-1, j)$, plus the gap penalty $d$.\n3.  The $j$-th character of sequence $B$ is aligned with a gap. The score for this case is the score of aligning the first $i$ characters of $A$ with the first $j-1$ characters of $B$, which is $M(i, j-1)$, plus the gap penalty $d$.\n\nThe value of $M(i,j)$ is the maximum of the scores from these three possibilities. The recurrence relation is:\n$$\nM(i,j) = \\max \\left\\{ M(i-1, j-1) + S(A_i, B_j), \\quad M(i-1, j) + d, \\quad M(i, j-1) + d \\right\\}\n$$\n\nWe are given the following values:\n- $M(i-1, j-1) = 15$\n- $M(i-1, j) = 6$\n- $M(i, j-1) = 9$\n- $S(A_i, B_j) = -3$\n- $d = -5$\n\nNow, we calculate the score for each of the three cases.\n\nCase 1 (Align $A_i$ with $B_j$):\nScore$_1 = M(i-1, j-1) + S(A_i, B_j) = 15 + (-3) = 12$\n\nCase 2 (Align $A_i$ with a gap):\nScore$_2 = M(i-1, j) + d = 6 + (-5) = 1$\n\nCase 3 (Align $B_j$ with a gap):\nScore$_3 = M(i, j-1) + d = 9 + (-5) = 4$\n\nThe value of $M(i,j)$ is the maximum of these three scores:\n$$\nM(i,j) = \\max\\{12, 1, 4\\}\n$$\n\nComparing the three values, the maximum is 12.\n\nTherefore, the value of the matrix entry $M(i,j)$ is 12.", "answer": "$$\\boxed{12}$$", "id": "2136015"}, {"introduction": "With the fundamentals of scoring and the dynamic programming recurrence in hand, we can now tackle a complete alignment problem. This practice challenges you to determine the maximum possible global alignment score between two sequences using a defined scoring system [@problem_id:2135997]. By solving this, you will see how the interplay between match rewards, mismatch costs, and gap penalties guides the algorithm toward the most evolutionarily or structurally plausible alignment.", "problem": "In a protein engineering study, a researcher is comparing a newly synthesized heptapeptide with a known tripeptide motif that is crucial for a specific biological function. The goal is to quantify the overall similarity between the two sequences using a global alignment algorithm. The sequence of the new heptapeptide is `C-A-L-T-E-C-H` and the sequence of the known functional motif is `C-A-T`.\n\nTo perform the alignment, a simple scoring system is employed. A match between two identical amino acids receives a score of $+2$, while a mismatch receives a score of $-1$. A linear gap penalty of $-2$ is applied for each amino acid aligned with a gap.\n\nUsing the Needleman-Wunsch algorithm for global sequence alignment, calculate the maximum possible alignment score between the heptapeptide `C-A-L-T-E-C-H` and the tripeptide `C-A-T`.", "solution": "Let the sequences be $S=\\text{C-A-L-T-E-C-H}$ of length $7$ and $T=\\text{C-A-T}$ of length $3$. Use the Needleman-Wunsch global alignment with scoring function\n$$\ns(x,y)=\\begin{cases}\n+2, & x=y,\\\\\n-1, & x\\neq y,\n\\end{cases}\n\\quad\\text{and gap penalty }g=-2\\text{ per gap.}\n$$\nIn any global alignment, if $g_{1}$ gaps are inserted in $S$ and $g_{2}$ gaps in $T$, then the aligned length $L$ satisfies\n$$\nL=7+g_{1}=3+g_{2}\\quad\\Rightarrow\\quad g_{2}-g_{1}=4.\n$$\nThe total gap penalty equals\n$$\ng\\,(g_{1}+g_{2})=-2\\,(g_{1}+g_{2})=-2\\,(2g_{1}+4)=-4g_{1}-8,\n$$\nwhich is maximized (least negative) by taking $g_{1}=0$, giving an unavoidable gap cost of $-8$.\n\nWith $g_{1}=0$, there are exactly $3$ letter-letter aligned columns (since $7-(g_{2})=7-4=3$), so the maximum possible contribution from these is achieved if all $3$ are matches, yielding at most\n$$\n3\\times(+2)=+6.\n$$\nTherefore, the overall alignment score is bounded above by\n$$\n(+6)+(-8)=-2.\n$$\nThis bound is attainable because $T=\\text{C-A-T}$ appears as an ordered subsequence of $S$ at positions $1,2,4$. An explicit optimal alignment is\n$$\n\\begin{array}{ccccccc}\n\\text{C} & \\text{A} & \\text{L} & \\text{T} & \\text{E} & \\text{C} & \\text{H}\\\\\n\\text{C} & \\text{A} & \\text{-} & \\text{T} & \\text{-} & \\text{-} & \\text{-}\n\\end{array}\n$$\nwith score\n$$\n(+2)+(+2)+(-2)+(+2)+(-2)+(-2)+(-2)=-2.\n$$\nSince the upper bound $-2$ is achieved, the maximum possible Needleman-Wunsch global alignment score is $-2$.", "answer": "$$\\boxed{-2}$$", "id": "2135997"}]}