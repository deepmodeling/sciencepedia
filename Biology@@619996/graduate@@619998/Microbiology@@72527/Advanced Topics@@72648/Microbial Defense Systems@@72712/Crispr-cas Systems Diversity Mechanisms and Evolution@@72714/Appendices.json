{"hands_on_practices": [{"introduction": "The journey of a CRISPR-Cas system from a genomic locus to an active defense complex begins with the precise processing of the CRISPR transcript into mature guide RNAs. This exercise [@problem_id:2485206] applies the classic Michaelis-Menten model to the Cas6 endoribonuclease, allowing you to quantitatively explore how enzymatic efficiency impacts the rate of crRNA maturation. By analyzing the effect of a mutation on the Michaelis constant ($K_m$), you will gain a deeper appreciation for the biochemical parameters that govern the readiness of the CRISPR immune response.", "problem": "A Clustered Regularly Interspaced Short Palindromic Repeats (CRISPR)-associated endoribonuclease, Cas6, processes precursor CRISPR RNA (pre-crRNA) into mature CRISPR RNA (crRNA). Consider a single-substrate, single-active-site enzyme following steady-state Michaelis–Menten behavior under conditions where product inhibition and reverse reaction are negligible. The turnover number is $k_{\\text{cat}}=1\\,\\text{s}^{-1}$, the Michaelis constant is $K_{m}=200\\,\\text{nM}$, and the substrate concentration is $[S]=500\\,\\text{nM}$.\n\nUsing only standard steady-state enzyme kinetics and the definitions of $k_{\\text{cat}}$ and $K_{m}$, first determine the initial processing rate per active site (that is, the initial rate normalized by the total concentration of active sites). Then, model a mutation that leaves $k_{\\text{cat}}$ unchanged but causes a two-fold increase in $K_{m}$ while $[S]$ remains the same. Compute the fold-change in the initial processing rate per active site caused by this two-fold increase in $K_{m}$, defined as the ratio of the mutated rate to the wild-type rate.\n\nReport only the fold-change as your final answer, expressed as a decimal and rounded to four significant figures. Do not include units in the final answer.", "solution": "The problem requires the analysis of enzyme kinetics based on the Michaelis–Menten model. The model describes the initial reaction rate, $v_0$, as a function of substrate concentration, $[S]$. The governing equation is:\n$$v_0 = \\frac{V_{\\text{max}} [S]}{K_{m} + [S]}$$\nIn this equation, $K_{m}$ is the Michaelis constant, and $V_{\\text{max}}$ is the maximum reaction rate. $V_{\\text{max}}$ is defined as the product of the total concentration of enzyme active sites, $[E_T]$, and the turnover number, $k_{\\text{cat}}$:\n$$V_{\\text{max}} = k_{\\text{cat}} [E_T]$$\nThe problem asks for the \"initial processing rate per active site\". This is the initial velocity $v_0$ normalized by the total concentration of active sites $[E_T]$. We will denote this quantity by $v'$.\n$$v' = \\frac{v_0}{[E_T]}$$\nBy substituting the expressions for $v_0$ and $V_{\\text{max}}$, we derive the formula for $v'$:\n$$v' = \\frac{1}{[E_T]} \\left( \\frac{k_{\\text{cat}} [E_T] [S]}{K_{m} + [S]} \\right) = \\frac{k_{\\text{cat}} [S]}{K_{m} + [S]}$$\nThis equation represents the number of substrate molecules converted to product per unit time, per enzyme active site.\n\nFirst, we define the rate for the wild-type (wt) enzyme using the provided parameters: $k_{\\text{cat}} = 1\\,\\text{s}^{-1}$, $K_{m, \\text{wt}} = 200\\,\\text{nM}$, and $[S] = 500\\,\\text{nM}$.\nThe initial processing rate per active site for the wild-type enzyme is:\n$$v'_{\\text{wt}} = \\frac{k_{\\text{cat}} [S]}{K_{m, \\text{wt}} + [S]}$$\n\nNext, we consider the mutant (mut) enzyme. The mutation leaves $k_{\\text{cat}}$ unchanged but doubles $K_{m}$. The substrate concentration $[S]$ remains constant.\nThe parameters for the mutant enzyme are:\n$k_{\\text{cat, mut}} = k_{\\text{cat}} = 1\\,\\text{s}^{-1}$\n$K_{m, \\text{mut}} = 2 \\times K_{m, \\text{wt}} = 2 \\times 200\\,\\text{nM} = 400\\,\\text{nM}$\nThe initial processing rate per active site for the mutant enzyme is:\n$$v'_{\\text{mut}} = \\frac{k_{\\text{cat, mut}} [S]}{K_{m, \\text{mut}} + [S]} = \\frac{k_{\\text{cat}} [S]}{K_{m, \\text{mut}} + [S]}$$\n\nThe objective is to compute the fold-change, defined as the ratio of the mutated rate to the wild-type rate.\n$$\\text{Fold-change} = \\frac{v'_{\\text{mut}}}{v'_{\\text{wt}}}$$\nWe substitute the expressions for $v'_{\\text{mut}}$ and $v'_{\\text{wt}}$ into this ratio:\n$$\\text{Fold-change} = \\frac{\\frac{k_{\\text{cat}} [S]}{K_{m, \\text{mut}} + [S]}}{\\frac{k_{\\text{cat}} [S]}{K_{m, \\text{wt}} + [S]}}$$\nThe terms $k_{\\text{cat}}$ and $[S]$ are present in both the numerator and the denominator, and thus they cancel out, simplifying the expression significantly:\n$$\\text{Fold-change} = \\frac{K_{m, \\text{wt}} + [S]}{K_{m, \\text{mut}} + [S]}$$\nThis simplified form demonstrates that the fold-change is independent of $k_{\\text{cat}}$ and depends only on the Michaelis constants and the substrate concentration.\n\nNow, we substitute the numerical values into the expression. The use of consistent concentration units (nM) ensures a dimensionless result for the ratio.\n$K_{m, \\text{wt}} = 200\\,\\text{nM}$\n$K_{m, \\text{mut}} = 400\\,\\text{nM}$\n$[S] = 500\\,\\text{nM}$\n$$\\text{Fold-change} = \\frac{200 + 500}{400 + 500} = \\frac{700}{900} = \\frac{7}{9}$$\nThe problem requires this result as a decimal number rounded to four significant figures.\n$$\\frac{7}{9} \\approx 0.777777...$$\nRounding to four significant figures gives $0.7778$. An increase in $K_m$ signifies weaker substrate binding, which, at a given substrate concentration, leads to a lower reaction rate, as confirmed by a fold-change value less than $1$.", "answer": "$$\\boxed{0.7778}$$", "id": "2485206"}, {"introduction": "For a CRISPR-Cas nuclease to act, it must first recognize a short DNA sequence known as a Protospacer Adjacent Motif (PAM) next to its target. The density of these PAMs throughout a genome defines the targeting range of the system. In this practice [@problem_id:2485193], you will use first principles of probability to build a model that predicts PAM frequency based on genomic GC content, rigorously quantifying how different PAM requirements (e.g., $NGG$ vs. $NTTN$) influence the potential targeting coverage. This exercise illuminates a key factor in the evolution and application of diverse CRISPR-Cas systems.", "problem": "A double-stranded bacterial genome has guanine–cytosine (GC) content of $0.60$. Consider Clustered Regularly Interspaced Short Palindromic Repeats (CRISPR) with a CRISPR-associated (Cas) nuclease that requires a Protospacer Adjacent Motif (PAM) to bind and cleave. Assume the following baseline model for nucleotide sequences: positions are independent and identically distributed; within the GC and adenine–thymine (AT) classes, bases are equiprobable, so $P(G)=P(C)$ and $P(A)=P(T)$ with $P(G)+P(C)=0.60$ and $P(A)+P(T)=0.40$; and the symbol $N$ in a PAM denotes any nucleotide. A PAM occurrence is counted by its start position on a strand. A targetable site is one with a PAM on either strand in the correct orientation (that is, either the PAM or its reverse complement occurs). Define the per-kilobase PAM density as the expected number of targetable PAM start positions in a contiguous stretch of $L=1000$ base pairs, counting occurrences on both orientations as distinct targetable sites.\n\nUsing only these assumptions and first principles of probability (independence, equiprobability within base classes, and linearity of expectation), do the following:\n- Derive a general expression for the expected per-kilobase PAM density for a PAM specified by a consensus with fixed letters and $N$ symbols, explicitly accounting for both the PAM and its reverse complement on the opposite strand.\n- Apply your expression to compute the expected per-kilobase density for an $N\\!GG$ PAM (as used by Streptococcus pyogenes Cas9) and for an $N\\!TTN$ PAM.\n- Define the coverage factor as the ratio of the $N\\!GG$ density to the $N\\!TTN$ density, and compute its numerical value.\n\nReport as your final answer only the coverage factor, rounded to four significant figures. The coverage factor is unitless. Do not include any units in your final answer. You may compute intermediate densities in units of sites per kilobase within your solution, but they are not part of the final reported value.", "solution": "The problem requires the calculation of Protospacer Adjacent Motif (PAM) densities based on a probabilistic model of a bacterial genome. This analysis rests on two fundamental principles: the Bernoulli model for nucleotide sequences, which assumes sequence positions are independent and identically distributed (i.i.d.), and the linearity of expectation.\n\nFirst, we determine the probabilities of the four nucleotides (Adenine $A$, Cytosine $C$, Guanine $G$, Thymine $T$). The problem states a guanine-cytosine (GC) content of $0.60$. Therefore, the probability of a randomly selected base being either $G$ or $C$ is:\n$$P(G) + P(C) = 0.60$$\nThe problem also states that within the GC and adenine-thymine (AT) classes, bases are equiprobable, meaning $P(G) = P(C)$ and $P(A) = P(T)$.\nSubstituting this into the GC content equation gives:\n$$2 \\times P(G) = 0.60 \\implies P(G) = P(C) = 0.30$$\nThe total probability must be $1$, so the AT content is $P(A) + P(T) = 1 - 0.60 = 0.40$. Using the equiprobability assumption for the AT class:\n$$2 \\times P(A) = 0.40 \\implies P(A) = P(T) = 0.20$$\nThe symbol $N$ represents any nucleotide, so its probability is $P(N) = P(A) + P(C) + P(G) + P(T) = 1$.\n\nNext, we derive a general expression for the per-kilobase PAM density. Let a PAM be represented by a sequence $S = s_1s_2...s_k$ of length $k$. Due to the i.i.d. assumption, the probability of observing this specific sequence starting at any given position is the product of the individual nucleotide probabilities:\n$$P(S) = \\prod_{i=1}^{k} P(s_i)$$\nA targetable site can have the PAM on either the forward or the reverse strand. A PAM on the reverse strand corresponds to its reverse complement, $S_{RC}$, appearing on the forward strand. Let $S_{RC} = s'_1s'_2...s'_k$, where $s'_i$ is the complement of $s_{k-i+1}$ (complements are $A \\leftrightarrow T$ and $G \\leftrightarrow C$). The probability of the reverse complement is:\n$$P(S_{RC}) = \\prod_{i=1}^{k} P(s'_i)$$\nThe problem defines the per-kilobase PAM density as the total expected number of targetable sites in a sequence of length $L=1000$ base pairs, counting occurrences on both orientations as distinct sites. For a sequence of length $L$, there are $L-k+1$ possible starting positions for a $k$-mer. Let $E_S$ be the expected number of occurrences of $S$ on the forward strand and $E_{S_{RC}}$ be the expected number of occurrences of $S_{RC}$ on the forward strand. By linearity of expectation:\n$$E_S = (L-k+1) \\times P(S)$$\n$$E_{S_{RC}} = (L-k+1) \\times P(S_{RC})$$\nThe total density, $\\rho$, is the sum of these expectations for $L=1000$:\n$$\\rho(S) = (1000 - k + 1) \\times [P(S) + P(S_{RC})]$$\n\nWe now apply this general formula to the specified PAMs.\n\nFor the $NGG$ PAM:\nThe sequence is $S=NGG$, so its length is $k=3$. The probability is:\n$$P(NGG) = P(N) \\times P(G) \\times P(G) = 1 \\times 0.30 \\times 0.30 = 0.09$$\nThe reverse complement of $NGG$ is $CCN$. Its probability is:\n$$P(CCN) = P(C) \\times P(C) \\times P(N) = 0.30 \\times 0.30 \\times 1 = 0.09$$\nThe number of possible starting positions is $1000 - 3 + 1 = 998$.\nThe density for the $NGG$ PAM, $\\rho_{NGG}$, is:\n$$\\rho_{NGG} = 998 \\times [P(NGG) + P(CCN)] = 998 \\times (0.09 + 0.09) = 998 \\times 0.18 = 179.64$$\n\nFor the $NTTN$ PAM:\nThe sequence is $S=NTTN$, so its length is $k=4$. The probability is:\n$$P(NTTN) = P(N) \\times P(T) \\times P(T) \\times P(N) = 1 \\times 0.20 \\times 0.20 \\times 1 = 0.04$$\nThe reverse complement of $NTTN$ is $NAAN$. Its probability is:\n$$P(NAAN) = P(N) \\times P(A) \\times P(A) \\times P(N) = 1 \\times 0.20 \\times 0.20 \\times 1 = 0.04$$\nThe number of possible starting positions is $1000 - 4 + 1 = 997$.\nThe density for the $NTTN$ PAM, $\\rho_{NTTN}$, is:\n$$\\rho_{NTTN} = 997 \\times [P(NTTN) + P(NAAN)] = 997 \\times (0.04 + 0.04) = 997 \\times 0.08 = 79.76$$\n\nFinally, we compute the coverage factor, defined as the ratio of the $NGG$ density to the $NTTN$ density. Let this factor be $C$.\n$$C = \\frac{\\rho_{NGG}}{\\rho_{NTTN}} = \\frac{179.64}{79.76}$$\n$$C \\approx 2.2522567...$$\nRounding to four significant figures, the coverage factor is $2.252$.", "answer": "$$\\boxed{2.252}$$", "id": "2485193"}, {"introduction": "The therapeutic and research potential of CRISPR-Cas9 hinges on our ability to design highly specific and efficient guide RNAs (gRNAs). This advanced problem [@problem_id:2485229] challenges you to step into the role of a computational biologist and develop a complete pipeline for gRNA selection. You will formalize a scoring model based on key biophysical principles—including on-target activity and off-target risk—to rank guides and then validate your model's predictive power against real-world GUIDE-seq data. This comprehensive exercise simulates the end-to-end process of rational gRNA design, a cornerstone of modern genome engineering.", "problem": "You are asked to formalize, implement, and validate a computational pipeline for guide RNA (gRNA) selection in Clustered Regularly Interspaced Short Palindromic Repeats (CRISPR) and CRISPR-associated protein (CRISPR-Cas) systems, focusing on Streptococcus pyogenes Cas9 (SpCas9). The pipeline must rank guides by maximizing on-target activity while minimizing off-target potential, and validate predicted off-target propensities against Genome-wide, Unbiased Identification of Double-stranded breaks Enabled by sequencing (GUIDE-seq) measurements. Your final output must be produced by a complete, runnable program, and follow the precise output specification given below.\n\nBase principles and modeling assumptions (derivations are required in the solution):\n- Target recognition in CRISPR-Cas9 follows base-pairing between a guide RNA (gRNA; protospacer length $L=20$ nucleotides) and the target DNA adjacent to a Protospacer Adjacent Motif (PAM).\n- For SpCas9, the canonical PAM is “NGG”; non-canonical but tolerated is “NAG”. Assume a PAM weight factor $w_{\\mathrm{pam}}$ that is $1$ for “GG”, $q$ for “AG”, and $0$ for any other dinucleotide.\n- Duplex stability and cleavage efficiency depend on gRNA-DNA hybridization thermodynamics. Assume that the optimal guanine-cytosine (GC) content is $50\\%$ (i.e., $10$ GC bases for $L=20$), with stability decreasing symmetrically away from this optimum. Use a Boltzmann-like relationship between an effective energy penalty and predicted activity, and model the GC-deviation penalty as quadratic in the deviation from the optimum with a coefficient $\\beta$.\n- Off-target recognition by SpCas9 is highly sensitive to mismatches in a “seed” region near the PAM. Assume positions are indexed $j=1,\\dots,L$ from the $5'$ end of the protospacer, and the PAM-proximal “seed” region is $j\\in\\{13,\\dots,20\\}$. Under an independent penalty model, each mismatch at position $j$ contributes an additive energetic penalty: $\\lambda_{\\mathrm{seed}}$ if $j$ is in the seed region and $\\lambda_{\\mathrm{nonseed}}$ otherwise. Assume a Boltzmann-like relationship between the sum of mismatch penalties and site propensity, and scale by the site’s PAM weight.\n- To balance benefit (on-target activity) and risk (aggregate off-target propensity), construct a single scalar score per guide by combining the above in a principled, dimensionless ratio with add-one smoothing in the denominator to avoid division by zero.\n- For validation against GUIDE-seq, compare predicted off-target propensities for a selected guide to the corresponding observed GUIDE-seq read counts across provided candidate off-target sites, excluding the exact on-target site (i.e., any site with zero mismatches to the guide). Use the Spearman rank correlation coefficient between the vectors of predictions and observations for this subset, using average ranks for ties. If fewer than $2$ off-target sites remain after exclusion or either vector is constant, define the correlation to be $0.0$. All quantities in this problem are dimensionless scalars; report correlations as decimal fractions, not percentages.\n\nYour program must implement the above modeling assumptions, derive the required formulas from these principles, and then compute the requested outputs for the following test suite. For all sequence comparisons, use Hamming distance on the $L=20$-mer protospacer sequences; the PAM is provided separately.\n\nTest Suite:\n- Test case $1$:\n  - Guides (protospacers of length $20$) and their PAMs:\n    - $g_1=$ \"GAGTCCGAGCAGAAGAAGAA\", PAM: \"GG\"\n    - $g_2=$ \"CCTGACCTTGACATCGTGGA\", PAM: \"AG\"\n    - $g_3=$ \"TTTATGCGGCTAACGTTGCT\", PAM: \"GG\"\n  - Candidate off-target sites (each protospacer length $20$) with PAMs, in fixed order:\n    - $s_1=$ \"GAGTCCGAGCAGAAGAAGAT\", PAM: \"GG\"\n    - $s_2=$ \"GAGTCCGAGTAGAAGAAGAA\", PAM: \"AG\"\n    - $s_3=$ \"GAGTCCGAGCAGAAAAAGAA\", PAM: \"GG\"\n    - $s_4=$ \"CCTGACCTTGACATCGTGGA\", PAM: \"GG\"\n    - $s_5=$ \"TTTATGCGGCTAACGTTGCT\", PAM: \"AG\"\n    - $s_6=$ \"GAGTCCGAGCAGAAGAAGAA\", PAM: \"GT\"\n  - GUIDE-seq observed read counts for each guide (aligned to the above sites $s_1$ to $s_6$):\n    - For $g_1$: $[300,120,40,3,4,900]$\n    - For $g_2$: $[20,15,8,800,10,5]$\n    - For $g_3$: $[12,8,6,3,700,2]$\n  - Parameters: $\\beta=0.03$, $q=0.5$, $\\lambda_{\\mathrm{seed}}=1.2$, $\\lambda_{\\mathrm{nonseed}}=0.6$.\n- Test case $2$:\n  - Guides and PAMs:\n    - $g_1=$ \"TTTATGCGGCTAACGTTGCT\", PAM: \"GG\"\n    - $g_2=$ \"AAAATTTTAAAATTTTAAAA\", PAM: \"GG\"\n    - $g_3=$ \"GCGCGCGCGCGCGCGCGCGC\", PAM: \"AG\"\n  - Candidate off-target sites with PAMs:\n    - $s_1=$ \"GCGCGCGCGCGCGCGCGCGT\", PAM: \"GG\"\n    - $s_2=$ \"AAAATTTTAAAATTTTAAAT\", PAM: \"AG\"\n    - $s_3=$ \"TTTATGCGGCTAACGTTGCT\", PAM: \"GG\"\n    - $s_4=$ \"GCGTACGCGCGTACGCGTAC\", PAM: \"GG\"\n    - $s_5=$ \"AAAAAAAATTTTTTTTAAAA\", PAM: \"GT\"\n    - $s_6=$ \"GCGCGCGCGCGCGCGCGCGC\", PAM: \"AG\"\n  - GUIDE-seq observed read counts:\n    - For $g_1$: $[25,8,600,15,1,5]$\n    - For $g_2$: $[5,700,2,3,1,4]$\n    - For $g_3$: $[300,10,5,25,0,650]$\n  - Parameters: $\\beta=0.05$, $q=0.4$, $\\lambda_{\\mathrm{seed}}=1.5$, $\\lambda_{\\mathrm{nonseed}}=0.7$.\n- Test case $3$:\n  - Guides and PAMs:\n    - $g_1=$ \"ACGTACGTACGTACGTACGT\", PAM: \"GG\"\n    - $g_2=$ \"TTTTTTTTTTTTTTTTTTTT\", PAM: \"GA\"\n    - $g_3=$ \"CCCCCCCCCCCCCCCCCCCC\", PAM: \"GG\"\n  - Candidate off-target sites with PAMs:\n    - $s_1=$ \"ACGTACGTACGTACGTACGA\", PAM: \"GG\"\n    - $s_2=$ \"ACGTACGTACGTACGTACGT\", PAM: \"GG\"\n    - $s_3=$ \"TTTTTTTTTTTTTTTTTTTA\", PAM: \"AG\"\n    - $s_4=$ \"CCCCCCCCCCCCCCCCCCCA\", PAM: \"GG\"\n  - GUIDE-seq observed read counts:\n    - For $g_1$: $[200,1000,2,3]$\n    - For $g_2$: $[1,0,50,2]$\n    - For $g_3$: $[2,1,3,500]$\n  - Parameters: $\\beta=0.03$, $q=0.5$, $\\lambda_{\\mathrm{seed}}=1.0$, $\\lambda_{\\mathrm{nonseed}}=0.5$.\n\nImplementation requirements:\n- On-target activity: derive from the above principles an expression that increases with PAM strength and is maximized at GC count $10$ for $L=20$, with a quadratic deviation penalty scaled by $\\beta$, mapped through a Boltzmann-like function. Use the guide’s own PAM for this factor.\n- Off-target site propensity: for a guide–site pair, compute Hamming mismatches and assign mismatch penalties by position as above; combine additively in energy and map to propensity via a Boltzmann-like function, scaled by the site’s PAM factor. Exclude exact matches (Hamming distance $0$) from the off-target aggregation and from correlation evaluation.\n- Aggregate off-target risk: sum site propensities over the provided candidate off-target sites for that test case.\n- Guide score: combine on-target activity and off-target risk into a single scalar in a benefit–risk ratio with add-one smoothing in the denominator to avoid division by zero. Use this scalar to rank the guides; if there is a tie, select the smallest index.\n- Validation: for the selected guide in each test case, compute the Spearman rank correlation coefficient between the vector of predicted site propensities and the corresponding GUIDE-seq counts for the same subset of off-target sites (excluding exact matches), using average ranks for ties; if the subset size is less than $2$ or either vector is constant, return $0.0$. Round each correlation to $4$ decimals.\n\nFinal output format:\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets. Each result must itself be a two-element list of the form $[i,\\rho]$, where $i$ is the $0$-based index of the selected (best-ranked) guide for that test case, and $\\rho$ is the Spearman correlation (rounded to $4$ decimals) for that selected guide. For example: $[[i_1,\\rho_1],[i_2,\\rho_2],[i_3,\\rho_3]]$.\n\nAll computations are dimensionless; no physical units are required. Angles are not involved. All reported decimals must be in fractional form, not percentages.", "solution": "The problem statement presented is a well-defined task in computational biology, specifically for the design of guide RNAs for the CRISPR-Cas9 system. It requires the formalization and implementation of a biophysically-inspired scoring model.\n\n### **Problem Validation**\n\nBefore proceeding, a validation of the problem statement is required.\n\n**Step 1: Extract Givens**\n\n*   **System**: *Streptococcus pyogenes* Cas9 (SpCas9).\n*   **Protospacer Length**: $L=20$ nucleotides.\n*   **PAM Motifs**: Canonical \"NGG\", tolerated non-canonical \"NAG\".\n*   **PAM Weights ($w_{\\mathrm{pam}}$)**: $1$ for \"GG\", $q$ for \"AG\", $0$ otherwise.\n*   **GC Content Model**: Optimal GC content is $10$ out of $20$. Activity penalty is quadratic in deviation from the optimum, with coefficient $\\beta$, mapped through a Boltzmann-like function.\n*   **Mismatch Penalty Model**: Positions indexed $j=1, \\dots, L$ from $5'$ end. Seed region is $j \\in \\{13, \\dots, 20\\}$. Mismatch penalty is $\\lambda_{\\mathrm{seed}}$ for seed region, $\\lambda_{\\mathrm{nonseed}}$ for non-seed region. Total penalty is additive. Site propensity uses a Boltzmann-like function, scaled by the site's PAM weight.\n*   **Guide Score**: A dimensionless ratio of on-target activity to aggregate off-target risk, with add-one smoothing in the denominator: $Score = \\frac{A_{\\text{on}}}{1+R_{\\text{off}}}$.\n*   **Validation Metric**: Spearman rank correlation coefficient ($\\rho$) between predicted off-target propensities and observed GUIDE-seq read counts. Excludes exact on-target matches (Hamming distance $0$). $\\rho=0.0$ if fewer than $2$ off-target sites remain or if either prediction or observation vector is constant.\n*   **Test Cases**: Three test cases are provided, each with a set of guides, candidate off-target sites, GUIDE-seq data, and specific model parameters ($\\beta, q, \\lambda_{\\mathrm{seed}}, \\lambda_{\\mathrm{nonseed}}$).\n\n**Step 2: Validate Using Extracted Givens**\n\nThe problem is evaluated against the specified criteria:\n1.  **Scientific Grounding**: The model is a simplified but scientifically sound representation of CRISPR-Cas9 mechanics. It incorporates established principles: PAM dependence, the importance of GC content for duplex stability, and the heightened sensitivity to mismatches in the PAM-proximal seed region. The use of GUIDE-seq data for validation is standard practice. The problem is scientifically grounded.\n2.  **Well-Posedness**: The objectives are clear and the required output is specified precisely. The modeling assumptions are explicit, and all necessary parameters are provided. The tie-breaking rule (select smallest index) ensures a unique solution. The problem is well-posed.\n3.  **Objectivity**: The problem is stated using precise, quantitative, and unbiased language. There are no subjective or opinion-based components. The problem is objective.\n4.  **Completeness and Consistency**: The problem is self-contained. All data and parameters required for the computation are given for each test case. There are no internal contradictions.\n\n**Step 3: Verdict and Action**\n\nThe problem statement is **valid**. It is a rigorous, quantitative, and scientifically grounded task that can be formalized and solved computationally. I will now proceed with the derivation of the model and the solution algorithm.\n\n### **Formalization of the Computational Model**\n\nLet a guide RNA be defined by its $L=20$ nucleotide protospacer sequence, $g$, and its associated PAM, $PAM_g$. A potential target site is similarly defined by its sequence, $s$, and PAM, $PAM_s$.\n\n**1. On-Target Activity ($A_{\\text{on}}$)**\n\nThe on-target activity of a guide $g$ is a function of its own properties. It combines the favorability of its PAM and the stability of the gRNA-DNA duplex, which is modeled via GC content.\n\nLet $GC_g$ be the number of guanine ('G') or cytosine ('C') bases in the sequence $g$. The optimal count is $GC_{\\text{opt}} = L/2 = 10$. The energy penalty associated with deviation from this optimum is modeled quadratically:\n$$ E_{GC} = \\beta (GC_g - GC_{\\text{opt}})^2 = \\beta (GC_g - 10)^2 $$\nThe PAM weight, $w_{\\text{pam}}(PAM_g)$, is defined as:\n$$ w_{\\text{pam}}(P) = \\begin{cases} 1 & \\text{if } P = \\text{\"GG\"} \\\\ q & \\text{if } P = \\text{\"AG\"} \\\\ 0 & \\text{otherwise} \\end{cases} $$\nThe on-target activity $A_{\\text{on}}(g)$ is formulated using a Boltzmann-like relationship, combining the PAM contribution and the GC-content penalty:\n$$ A_{\\text{on}}(g) = w_{\\text{pam}}(PAM_g) \\exp(-E_{GC}) = w_{\\text{pam}}(PAM_g) \\exp(-\\beta (GC_g - 10)^2) $$\n\n**2. Off-Target Site Propensity ($P_{\\text{off}}$)**\n\nThe propensity for a guide $g$ to bind and cleave an off-target site $s$ depends on the number and location of mismatches and the site's PAM.\n\nLet $d(g, s)$ be the set of positions $j \\in \\{1, \\dots, 20\\}$ where the sequences $g$ and $s$ differ. The seed region is defined as positions $j \\in \\{13, \\dots, 20\\}$. The total additive energetic mismatch penalty, $E_{\\text{mismatch}}(g,s)$, is:\n$$ E_{\\text{mismatch}}(g,s) = \\sum_{j \\in d(g, s)} \\lambda(j) $$\nwhere the positional penalty $\\lambda(j)$ is:\n$$ \\lambda(j) = \\begin{cases} \\lambda_{\\text{seed}} & \\text{if } j \\in \\{13, \\dots, 20\\} \\\\ \\lambda_{\\text{nonseed}} & \\text{if } j \\in \\{1, \\dots, 12\\} \\end{cases} $$\nThe propensity $P_{\\text{off}}(g,s)$ is then given by the site's PAM weight and a Boltzmann-like term for the mismatch penalty:\n$$ P_{\\text{off}}(g,s) = w_{\\text{pam}}(PAM_s) \\exp(-E_{\\text{mismatch}}(g,s)) $$\nNote that if the Hamming distance between $g$ and $s$ is $0$, the site is considered an on-target site, not an off-target.\n\n**3. Aggregate Off-Target Risk ($R_{\\text{off}}$)**\n\nFor a given guide $g$, the aggregate off-target risk is the sum of its propensities over all potential off-target sites provided in the set $S$ for a test case. Let $S'_{\\text{off}}(g)$ be the subset of $S$ containing sites with non-zero Hamming distance to $g$.\n$$ R_{\\text{off}}(g) = \\sum_{s \\in S'_{\\text{off}}(g)} P_{\\text{off}}(g,s) $$\n\n**4. Guide Score and Selection**\n\nThe overall score for a guide $g$ balances its on-target activity (benefit) against its aggregate off-target risk. Add-one smoothing is applied to the denominator to prevent division by zero.\n$$ \\text{Score}(g) = \\frac{A_{\\text{on}}(g)}{1 + R_{\\text{off}}(g)} $$\nThe guide with the highest score is selected. If multiple guides have the same maximal score, the one with the smallest $0$-based index is chosen.\n\n**5. Validation with Spearman's Rank Correlation ($\\rho$)**\n\nFor the selected guide, $g_{\\text{best}}$, we validate its predicted off-target profile against experimental data.\nLet $S'_{\\text{off}}(g_{\\text{best}})$ be the set of off-target sites for the selected guide. We construct two vectors of length $n = |S'_{\\text{off}}(g_{\\text{best}})|$:\n*   The vector of predicted propensities: $\\vec{P}_{\\text{pred}} = \\left( P_{\\text{off}}(g_{\\text{best}}, s_k) \\right)_{s_k \\in S'_{\\text{off}}(g_{\\text{best}})}$\n*   The vector of observed GUIDE-seq counts: $\\vec{O}_{\\text{obs}} = \\left( \\text{count}(s_k) \\right)_{s_k \\in S'_{\\text{off}}(g_{\\text{best}})}$\n\nThe Spearman rank correlation coefficient, $\\rho$, is the Pearson correlation coefficient applied to the rank-transformed vectors. Let $rg_P$ and $rg_O$ be the rank vectors of $\\vec{P}_{\\text{pred}}$ and $\\vec{O}_{\\text{obs}}$, using average ranks for ties.\n$$ \\rho = \\frac{\\text{cov}(rg_P, rg_O)}{\\sigma_{rg_P} \\sigma_{rg_O}} $$\nAs per the problem, if $n < 2$ or if either vector is constant (all elements are identical), $\\rho$ is defined as $0.0$. The final value is rounded to $4$ decimal places.\n\n### **Algorithmic Pipeline**\n\nThe solution is implemented via the following computational steps for each test case:\n1.  **Iterate through Guides**: For each guide provided in the test case, calculate its comprehensive score.\n    a.  Compute the on-target activity $A_{\\text{on}}$ using the guide's sequence and PAM.\n    b.  Compute the aggregate off-target risk $R_{\\text{off}}$ by summing the individual propensities $P_{\\text{off}}$ for all candidate sites that are not an exact match to the guide's protospacer.\n    c.  Calculate the final score $\\text{Score}(g) = A_{\\text{on}}(g) / (1 + R_{\\text{off}}(g))$.\n2.  **Select Best Guide**: Identify the guide with the maximum score. The `argmax` function naturally handles the specified tie-breaking rule (first occurrence, which is the smallest index).\n3.  **Perform Validation**: For the selected guide:\n    a.  Construct the list of predicted off-target propensities and the corresponding list of observed GUIDE-seq counts, excluding the on-target site.\n    b.  Check the special conditions: if the number of off-target sites is less than $2$, or if either the prediction or observation vector is constant, the correlation $\\rho$ is $0.0$.\n    c.  Otherwise, compute the Spearman correlation coefficient $\\rho$ between the two lists.\n    d.  Round $\\rho$ to $4$ decimal places.\n4.  **Format Output**: Store the resulting pair of [best guide index, correlation] for the test case and format the final output as specified.\n\nThis procedure is deterministic and directly implements the formalized model.", "answer": "```python\nimport numpy as np\nfrom scipy.stats import spearmanr\n\ndef solve():\n    \"\"\"\n    Main function to process all test cases and print the final result.\n    \"\"\"\n    test_cases = [\n        {\n            \"guides\": [\n                {\"seq\": \"GAGTCCGAGCAGAAGAAGAA\", \"pam\": \"GG\"},\n                {\"seq\": \"CCTGACCTTGACATCGTGGA\", \"pam\": \"AG\"},\n                {\"seq\": \"TTTATGCGGCTAACGTTGCT\", \"pam\": \"GG\"},\n            ],\n            \"sites\": [\n                {\"seq\": \"GAGTCCGAGCAGAAGAAGAT\", \"pam\": \"GG\"},\n                {\"seq\": \"GAGTCCGAGTAGAAGAAGAA\", \"pam\": \"AG\"},\n                {\"seq\": \"GAGTCCGAGCAGAAAAAGAA\", \"pam\": \"GG\"},\n                {\"seq\": \"CCTGACCTTGACATCGTGGA\", \"pam\": \"GG\"},\n                {\"seq\": \"TTTATGCGGCTAACGTTGCT\", \"pam\": \"AG\"},\n                {\"seq\": \"GAGTCCGAGCAGAAGAAGAA\", \"pam\": \"GT\"},\n            ],\n            \"guide_seq_counts\": [\n                [300, 120, 40, 3, 4, 900],\n                [20, 15, 8, 800, 10, 5],\n                [12, 8, 6, 3, 700, 2],\n            ],\n            \"params\": {\"beta\": 0.03, \"q\": 0.5, \"lambda_seed\": 1.2, \"lambda_nonseed\": 0.6},\n        },\n        {\n            \"guides\": [\n                {\"seq\": \"TTTATGCGGCTAACGTTGCT\", \"pam\": \"GG\"},\n                {\"seq\": \"AAAATTTTAAAATTTTAAAA\", \"pam\": \"GG\"},\n                {\"seq\": \"GCGCGCGCGCGCGCGCGCGC\", \"pam\": \"AG\"},\n            ],\n            \"sites\": [\n                {\"seq\": \"GCGCGCGCGCGCGCGCGCGT\", \"pam\": \"GG\"},\n                {\"seq\": \"AAAATTTTAAAATTTTAAAT\", \"pam\": \"AG\"},\n                {\"seq\": \"TTTATGCGGCTAACGTTGCT\", \"pam\": \"GG\"},\n                {\"seq\": \"GCGTACGCGCGTACGCGTAC\", \"pam\": \"GG\"},\n                {\"seq\": \"AAAAAAAATTTTTTTTAAAA\", \"pam\": \"GT\"},\n                {\"seq\": \"GCGCGCGCGCGCGCGCGCGC\", \"pam\": \"AG\"},\n            ],\n            \"guide_seq_counts\": [\n                [25, 8, 600, 15, 1, 5],\n                [5, 700, 2, 3, 1, 4],\n                [300, 10, 5, 25, 0, 650],\n            ],\n            \"params\": {\"beta\": 0.05, \"q\": 0.4, \"lambda_seed\": 1.5, \"lambda_nonseed\": 0.7},\n        },\n        {\n            \"guides\": [\n                {\"seq\": \"ACGTACGTACGTACGTACGT\", \"pam\": \"GG\"},\n                {\"seq\": \"TTTTTTTTTTTTTTTTTTTT\", \"pam\": \"GA\"},\n                {\"seq\": \"CCCCCCCCCCCCCCCCCCCC\", \"pam\": \"GG\"},\n            ],\n            \"sites\": [\n                {\"seq\": \"ACGTACGTACGTACGTACGA\", \"pam\": \"GG\"},\n                {\"seq\": \"ACGTACGTACGTACGTACGT\", \"pam\": \"GG\"},\n                {\"seq\": \"TTTTTTTTTTTTTTTTTTTA\", \"pam\": \"AG\"},\n                {\"seq\": \"CCCCCCCCCCCCCCCCCCCA\", \"pam\": \"GG\"},\n            ],\n            \"guide_seq_counts\": [\n                [200, 1000, 2, 3],\n                [1, 0, 50, 2],\n                [2, 1, 3, 500],\n            ],\n            \"params\": {\"beta\": 0.03, \"q\": 0.5, \"lambda_seed\": 1.0, \"lambda_nonseed\": 0.5},\n        },\n    ]\n\n    final_results = []\n    for case in test_cases:\n        result = process_test_case(case)\n        final_results.append(f\"[{result[0]},{result[1]:.4f}]\")\n\n    print(f\"[{','.join(final_results)}]\")\n\ndef get_pam_weight(pam_str, q):\n    \"\"\"Calculates the PAM weight factor.\"\"\"\n    if pam_str == \"GG\":\n        return 1.0\n    if pam_str == \"AG\":\n        return q\n    return 0.0\n\ndef calculate_on_target_activity(guide, params):\n    \"\"\"Calculates the on-target activity score for a guide.\"\"\"\n    beta = params[\"beta\"]\n    q = params[\"q\"]\n    \n    gc_count = guide[\"seq\"].count('G') + guide[\"seq\"].count('C')\n    gc_opt = 10\n    e_gc = beta * (gc_count - gc_opt)**2\n    \n    w_pam = get_pam_weight(guide[\"pam\"], q)\n    \n    activity = w_pam * np.exp(-e_gc)\n    return activity\n\ndef calculate_mismatch_penalty(g_seq, s_seq, params):\n    \"\"\"Calculates the additive energetic penalty due to mismatches.\"\"\"\n    lambda_seed = params[\"lambda_seed\"]\n    lambda_nonseed = params[\"lambda_nonseed\"]\n    L = 20\n    seed_start_idx = 12 # Position 13 is index 12\n    \n    penalty = 0.0\n    for i in range(L):\n        if g_seq[i] != s_seq[i]:\n            if i >= seed_start_idx:\n                penalty += lambda_seed\n            else:\n                penalty += lambda_nonseed\n    return penalty\n\ndef calculate_off_target_propensity(g_seq, site, params):\n    \"\"\"Calculates the off-target propensity for a guide-site pair.\"\"\"\n    q = params[\"q\"]\n    w_pam = get_pam_weight(site[\"pam\"], q)\n    if w_pam == 0:\n        return 0.0\n    \n    mismatch_penalty = calculate_mismatch_penalty(g_seq, site[\"seq\"], params)\n    propensity = w_pam * np.exp(-mismatch_penalty)\n    return propensity\n\ndef process_test_case(case_data):\n    \"\"\"Processes a single test case to find the best guide and its validation score.\"\"\"\n    guides = case_data[\"guides\"]\n    sites = case_data[\"sites\"]\n    all_counts = case_data[\"guide_seq_counts\"]\n    params = case_data[\"params\"]\n    \n    guide_scores = []\n    for i, guide in enumerate(guides):\n        # Calculate on-target activity\n        a_on = calculate_on_target_activity(guide, params)\n        \n        # Calculate aggregate off-target risk\n        r_off = 0.0\n        for site in sites:\n            # Exclude exact matches from off-target risk calculation\n            if guide[\"seq\"] != site[\"seq\"]:\n                r_off += calculate_off_target_propensity(guide[\"seq\"], site, params)\n        \n        # Calculate final guide score\n        score = a_on / (1.0 + r_off)\n        guide_scores.append(score)\n        \n    # Select best guide (highest score, smallest index for ties)\n    best_guide_idx = int(np.argmax(guide_scores))\n    best_guide = guides[best_guide_idx]\n    \n    # --- Validation Step ---\n    pred_propensities = []\n    obs_counts = []\n    \n    for j, site in enumerate(sites):\n        # Exclude exact matches from correlation calculation\n        if best_guide[\"seq\"] != site[\"seq\"]:\n            propensity = calculate_off_target_propensity(best_guide[\"seq\"], site, params)\n            pred_propensities.append(propensity)\n            obs_counts.append(all_counts[best_guide_idx][j])\n\n    # Check conditions for rho = 0.0\n    if len(pred_propensities)  2:\n        rho = 0.0\n    # Check if either vector is constant\n    elif len(np.unique(pred_propensities)) == 1 or len(np.unique(obs_counts)) == 1:\n        rho = 0.0\n    else:\n        # Calculate Spearman correlation\n        rho, _ = spearmanr(pred_propensities, obs_counts)\n        # Handle potential NaN from spearmanr if inputs are pathological\n        if np.isnan(rho):\n             rho = 0.0\n\n    return best_guide_idx, rho\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "2485229"}]}