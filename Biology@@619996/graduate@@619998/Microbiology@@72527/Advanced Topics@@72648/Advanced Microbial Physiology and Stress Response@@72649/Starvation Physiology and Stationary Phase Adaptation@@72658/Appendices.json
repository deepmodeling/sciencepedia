{"hands_on_practices": [{"introduction": "The entry into stationary phase is governed by master regulators, with the sigma factor RpoS ($\\sigma^S$) being paramount in many bacteria. This exercise provides a hands-on approach to understanding how cells achieve a rapid and substantial accumulation of RpoS by simultaneously increasing its synthesis and inhibiting its degradation. By applying a fundamental mass-balance model, you will quantify this regulatory switch and connect it to a functional outcome: the activation of the RpoS-dependent stress regulon [@problem_id:2534404].", "problem": "A single-cell level mass balance connects intracellular protein accumulation with synthesis, active degradation, and dilution by cell growth. Consider the RNA polymerase sigma factor S (RpoS, also known as $\\sigma^{\\mathrm{S}}$), whose degradation is mediated by the caseinolytic protease XP (ClpXP) adaptor regulator of sigma S (RssB), and whose accumulation is central to starvation physiology and stationary phase adaptation. Assume the following well-tested facts as your starting point: (i) first-order degradation of a protein with half-life $t_{1/2}$ implies a degradation rate constant $k_{\\mathrm{deg}} = \\ln(2)/t_{1/2}$; (ii) exponential growth with doubling time $T_{d}$ dilutes intracellular protein at rate $\\mu = \\ln(2)/T_{d}$; and (iii) at steady state, the mass balance of a well-mixed intracellular species equates synthesis to total first-order loss.\n\nYou measure the RpoS protein synthesis rate per cell as a zero-order flux $\\alpha$ (molecules per cell per minute), the ClpXP-RssB mediated first-order degradation via the half-life $t_{1/2}$ (minutes), and the growth dilution via the doubling time $T_{d}$ (minutes) or the growth rate constant $\\mu$ (per minute), in two conditions:\n\n- Before carbon starvation (balanced exponential growth at $37\\,^{\\circ}\\mathrm{C}$): $\\alpha_{\\mathrm{pre}} = 40$ molecules $\\mathrm{cell}^{-1}\\,\\mathrm{min}^{-1}$, $t_{1/2,\\mathrm{pre}} = 2.31\\,\\mathrm{min}$, and $T_{d,\\mathrm{pre}} = 30\\,\\mathrm{min}$.\n- After a shift to carbon starvation (entry into stationary phase, same temperature): $\\alpha_{\\mathrm{post}} = 100$ molecules $\\mathrm{cell}^{-1}\\,\\mathrm{min}^{-1}$, $t_{1/2,\\mathrm{post}} = 13.9\\,\\mathrm{min}$, and a residual growth rate $\\mu_{\\mathrm{post}} = 0.0010\\,\\mathrm{min}^{-1}$.\n\nAssume that RpoS-dependent promoter output is proportional to the occupancy by RpoS-holoenzyme and follows a Hill-type dependence on the steady-state RpoS level $S^{\\ast}$ (molecules per cell),\n$$f(S^{\\ast}) = \\frac{(S^{\\ast})^{n}}{K^{n} + (S^{\\ast})^{n}},$$\nwith Hill coefficient $n = 2$ and half-saturation constant $K = 500$ molecules per cell. Treat $f$ as a normalized transcriptional activity.\n\nUsing only the principles stated above, first derive an expression for the steady-state RpoS level $S^{\\ast}$ in each condition, then evaluate $f$ before and after carbon starvation, and finally compute the fold-change in RpoS-dependent transcription, defined as $f_{\\mathrm{post}}/f_{\\mathrm{pre}}$.\n\nReport only the fold-change as your final answer. Round your answer to $3$ significant figures. Because it is a ratio, express it as a pure number with no units.", "solution": "The problem will first be subjected to rigorous validation.\n\n### Step 1: Extract Givens\n\nThe givens are extracted verbatim as follows:\n- First-order degradation rate constant: $k_{\\mathrm{deg}} = \\ln(2)/t_{1/2}$, where $t_{1/2}$ is the half-life.\n- Growth dilution rate: $\\mu = \\ln(2)/T_{d}$, where $T_{d}$ is the doubling time.\n- Steady-state condition: synthesis = total first-order loss.\n- Synthesis rate is a zero-order flux $\\alpha$ (molecules per cell per minute).\n- Condition 1 (pre-starvation): $\\alpha_{\\mathrm{pre}} = 40$ molecules $\\mathrm{cell}^{-1}\\,\\mathrm{min}^{-1}$, $t_{1/2,\\mathrm{pre}} = 2.31\\,\\mathrm{min}$, and $T_{d,\\mathrm{pre}} = 30\\,\\mathrm{min}$.\n- Condition 2 (post-starvation): $\\alpha_{\\mathrm{post}} = 100$ molecules $\\mathrm{cell}^{-1}\\,\\mathrm{min}^{-1}$, $t_{1/2,\\mathrm{post}} = 13.9\\,\\mathrm{min}$, and $\\mu_{\\mathrm{post}} = 0.0010\\,\\mathrm{min}^{-1}$.\n- Transcriptional activity function: $f(S^{\\ast}) = \\frac{(S^{\\ast})^{n}}{K^{n} + (S^{\\ast})^{n}}$, where $S^{\\ast}$ is the steady-state RpoS level.\n- Hill coefficient: $n = 2$.\n- Half-saturation constant: $K = 500$ molecules per cell.\n- The task is to compute the fold-change in RpoS-dependent transcription, defined as $f_{\\mathrm{post}}/f_{\\mathrm{pre}}$, rounded to 3 significant figures.\n\n### Step 2: Validate Using Extracted Givens\n\n- **Scientifically Grounded:** The problem uses a standard mass-balance model for protein dynamics within a single cell, which is a fundamental concept in systems biology and microbial physiology. The use of a Hill function to model transcriptional regulation is also a standard and well-accepted formalism. The parameters provided for the RpoS sigma factor regulation are biologically realistic. The problem is firmly grounded in established scientific principles.\n- **Well-Posed:** The problem provides all necessary parameters and a clear set of instructions to calculate a unique, quantitative answer. The objective is explicitly stated.\n- **Objective:** The language is formal, precise, and devoid of subjective or ambiguous terminology.\n- **Incomplete or Contradictory Setup:** The problem is self-contained. All required data are provided, and there are no contradictions in the setup.\n- **Unrealistic or Infeasible:** The conditions described (exponential growth vs. stationary phase) and the associated parameter values are plausible for a bacterium like *E. coli* at $37\\,^{\\circ}\\mathrm{C}$.\n- **Other Flaws:** The problem is not trivial, metaphorical, or tautological. It requires the application of defined principles to a specific biological context.\n\n### Step 3: Verdict and Action\n\nThe problem statement is valid. It is scientifically sound, well-posed, objective, and internally consistent. A reasoned solution will be provided.\n\nThe dynamics of the intracellular RpoS protein level, denoted by $S(t)$, are governed by a mass balance equation. The rate of change of $S$ is the difference between the synthesis rate and the total loss rate.\n$$ \\frac{dS}{dt} = \\text{synthesis} - \\text{degradation} - \\text{dilution} $$\nThe synthesis rate is given as a constant flux $\\alpha$. The degradation is a first-order process with rate constant $k_{\\mathrm{deg}}$, contributing a loss term of $k_{\\mathrm{deg}}S$. The dilution due to cell growth is also a first-order process with rate constant $\\mu$, contributing a loss term of $\\mu S$. The complete differential equation is:\n$$ \\frac{dS}{dt} = \\alpha - (k_{\\mathrm{deg}} + \\mu)S $$\nAt steady state, the concentration does not change, so $\\frac{dS}{dt} = 0$. This yields:\n$$ 0 = \\alpha - (k_{\\mathrm{deg}} + \\mu)S^{\\ast} $$\nSolving for the steady-state RpoS level, $S^{\\ast}$, provides the expression requested by the problem:\n$$ S^{\\ast} = \\frac{\\alpha}{k_{\\mathrm{deg}} + \\mu} $$\nThis expression will be evaluated for the two specified conditions.\n\n**Condition 1: Pre-starvation (Balanced Exponential Growth)**\nThe parameters are:\n$\\alpha_{\\mathrm{pre}} = 40\\,\\mathrm{molecules}\\,\\mathrm{cell}^{-1}\\,\\mathrm{min}^{-1}$\n$t_{1/2,\\mathrm{pre}} = 2.31\\,\\mathrm{min}$\n$T_{d,\\mathrm{pre}} = 30\\,\\mathrm{min}$\n\nFirst, we calculate the first-order rate constants for degradation and dilution:\n$$ k_{\\mathrm{deg, pre}} = \\frac{\\ln(2)}{t_{1/2,\\mathrm{pre}}} = \\frac{\\ln(2)}{2.31\\,\\mathrm{min}} \\approx 0.30006\\,\\mathrm{min}^{-1} $$\n$$ \\mu_{\\mathrm{pre}} = \\frac{\\ln(2)}{T_{d,\\mathrm{pre}}} = \\frac{\\ln(2)}{30\\,\\mathrm{min}} \\approx 0.02310\\,\\mathrm{min}^{-1} $$\nNow, we calculate the steady-state RpoS level, $S^{\\ast}_{\\mathrm{pre}}$:\n$$ S^{\\ast}_{\\mathrm{pre}} = \\frac{\\alpha_{\\mathrm{pre}}}{k_{\\mathrm{deg, pre}} + \\mu_{\\mathrm{pre}}} = \\frac{40}{0.30006 + 0.02310} = \\frac{40}{0.32316}\\,\\mathrm{molecules} \\approx 123.78\\,\\mathrm{molecules} $$\nThe transcriptional activity, $f_{\\mathrm{pre}}$, is calculated using the Hill function with $n=2$ and $K=500$:\n$$ f_{\\mathrm{pre}} = \\frac{(S^{\\ast}_{\\mathrm{pre}})^{2}}{K^{2} + (S^{\\ast}_{\\mathrm{pre}})^{2}} = \\frac{(123.78)^{2}}{(500)^{2} + (123.78)^{2}} = \\frac{15321.4}{250000 + 15321.4} \\approx 0.05775 $$\n\n**Condition 2: Post-starvation (Stationary Phase)**\nThe parameters are:\n$\\alpha_{\\mathrm{post}} = 100\\,\\mathrm{molecules}\\,\\mathrm{cell}^{-1}\\,\\mathrm{min}^{-1}$\n$t_{1/2,\\mathrm{post}} = 13.9\\,\\mathrm{min}$\n$\\mu_{\\mathrm{post}} = 0.0010\\,\\mathrm{min}^{-1}$\n\nThe degradation rate constant is:\n$$ k_{\\mathrm{deg, post}} = \\frac{\\ln(2)}{t_{1/2,\\mathrm{post}}} = \\frac{\\ln(2)}{13.9\\,\\mathrm{min}} \\approx 0.04987\\,\\mathrm{min}^{-1} $$\nThe steady-state RpoS level, $S^{\\ast}_{\\mathrm{post}}$, is:\n$$ S^{\\ast}_{\\mathrm{post}} = \\frac{\\alpha_{\\mathrm{post}}}{k_{\\mathrm{deg, post}} + \\mu_{\\mathrm{post}}} = \\frac{100}{0.04987 + 0.0010} = \\frac{100}{0.05087}\\,\\mathrm{molecules} \\approx 1965.8\\,\\mathrm{molecules} $$\nThe transcriptional activity, $f_{\\mathrm{post}}$, is:\n$$ f_{\\mathrm{post}} = \\frac{(S^{\\ast}_{\\mathrm{post}})^{2}}{K^{2} + (S^{\\ast}_{\\mathrm{post}})^{2}} = \\frac{(1965.8)^{2}}{(500)^{2} + (1965.8)^{2}} = \\frac{3864369}{250000 + 3864369} \\approx 0.9392 $$\n\n**Final Calculation: Fold-change**\nThe fold-change in RpoS-dependent transcription is the ratio $f_{\\mathrm{post}}/f_{\\mathrm{pre}}$:\n$$ \\text{Fold-change} = \\frac{f_{\\mathrm{post}}}{f_{\\mathrm{pre}}} = \\frac{0.9392}{0.05775} \\approx 16.263 $$\nThe problem requires the answer to be rounded to $3$ significant figures.\n$$ \\text{Fold-change} \\approx 16.3 $$\nThis result demonstrates a strong upregulation of RpoS-dependent genes upon entry into stationary phase, driven by a combination of increased synthesis ($\\alpha$) and drastically reduced degradation (longer $t_{1/2}$), which together cause a substantial accumulation of the RpoS protein, pushing the transcriptional switch into a nearly fully \"on\" state.", "answer": "$$\\boxed{16.3}$$", "id": "2534404"}, {"introduction": "Survival strategies always involve trade-offs, and for a bacterium, the proteome is a zero-sum budget that must be carefully allocated. This practice uses a powerful proteome allocation model to translate hypothetical proteomics data into a quantitative understanding of these trade-offs [@problem_id:2534419]. You will calculate how reallocating protein resources towards the stress-response sector ($S$) upon starvation comes at a direct and predictable \"opportunity cost\" to the cell's maximal growth potential.", "problem": "You are given paired proteomics intensity profiles for a single bacterial population measured immediately before and after the onset of nutrient starvation. Each measured protein is assigned to exactly one of four proteome sectors: ribosomal (R), metabolic enzymes needed for biosynthesis (E), stress-response and protective functions (S), and housekeeping and core maintenance (Q). Assume that label-free intensities are proportional to protein mass contributions so that sector fractions can be estimated by normalized sums. Your task is to compute the shift in sector fractions and then estimate the decrease in the maximal possible balanced-growth rate due solely to the observed increase in the stress-response sector fraction.\n\nFoundational principles to use:\n- Central Dogma of Molecular Biology and proteome budget: the proteome is partitioned among sectors with fractions $\\phi_R$, $\\phi_E$, $\\phi_S$, and $\\phi_Q$ satisfying $\\phi_R + \\phi_E + \\phi_S + \\phi_Q = 1$.\n- Translation-limited growth law in ribosome-limited conditions: the maximal balanced-growth rate $\\mu_{\\max}$ scales with ribosomal proteome fraction according to $\\mu_{\\max} = \\kappa_t \\, (\\phi_R - \\phi_R^0)$, where $\\kappa_t$ is the translational capacity (in $\\mathrm{h}^{-1}$ per unit ribosomal fraction) and $\\phi_R^0$ is the inactive ribosome offset.\n- Proteome allocation constraint at maximal growth under a given stress burden: the ribosomal fraction cannot exceed what remains after inelastic baselines for housekeeping and minimal biosynthesis are satisfied, so the maximum allocable ribosomal fraction is $\\phi_R^{\\mathrm{max}} = 1 - \\phi_Q - \\phi_E^{\\min} - \\phi_S$. Consequently, the maximal growth rate consistent with a given $\\phi_S$ is $\\mu_{\\max}(\\phi_S) = \\max\\{0,\\ \\kappa_t \\, (\\phi_R^{\\mathrm{max}} - \\phi_R^0)\\} = \\max\\{0,\\ \\kappa_t \\, (1 - \\phi_Q - \\phi_E^{\\min} - \\phi_S - \\phi_R^0)\\}$.\n- The opportunity cost in maximal growth rate due to a change in the stress sector is defined as $\\Delta \\mu_{\\mathrm{opp}} = \\mu_{\\max}(\\phi_S^{\\mathrm{before}}) - \\mu_{\\max}(\\phi_S^{\\mathrm{after}})$, with the physical constraint that $\\mu_{\\max} \\ge 0$.\n\nAssumptions and constants to use for all test cases:\n- Translational capacity $\\kappa_t = 2.0\\ \\mathrm{h}^{-1}$.\n- Inactive ribosome offset $\\phi_R^0 = 0.05$ (dimensionless).\n- Baseline housekeeping fraction $\\phi_Q = 0.28$ (dimensionless).\n- Minimal biosynthetic enzyme fraction $\\phi_E^{\\min} = 0.12$ (dimensionless).\n- Sector fractions $\\phi_X$ are computed from proteomics as $\\phi_X = \\dfrac{\\sum_{i \\in X} I_i}{\\sum_{j} I_j}$, where $I_i$ is the intensity of protein $i$ and the sum in the denominator runs over all proteins.\n\nYour program must:\n- For each test case, compute the sector fractions before and after starvation, then compute the sector shifts $\\Delta \\phi_R$, $\\Delta \\phi_E$, $\\Delta \\phi_S$, $\\Delta \\phi_Q$ defined as $\\phi_X^{\\mathrm{after}} - \\phi_X^{\\mathrm{before}}$ for each sector $X \\in \\{R,E,S,Q\\}$.\n- Compute the opportunity cost $\\Delta \\mu_{\\mathrm{opp}}$ in $\\mathrm{h}^{-1}$ due solely to the change in $\\phi_S$ using the formula above, with the physical clipping $\\mu_{\\max} \\ge 0$.\n- Return, for each test case, a list of five numbers: `[\\Delta \\phi_R, \\Delta \\phi_E, \\Delta \\phi_S, \\Delta \\phi_Q, \\Delta \\mu_{\\mathrm{opp}}]`.\n\nImportant requirements:\n- All sector fractions are dimensionless and must be reported as decimals (not percentages).\n- The opportunity cost must be reported in $\\mathrm{h}^{-1}$.\n- Round every reported number to exactly $6$ decimal places.\n- Your program should produce a single line of output containing the results for all test cases as a comma-separated list of lists enclosed in square brackets (for example, `[[\\dots]]`). No other output is allowed.\n\nProtein-to-sector mapping used in all test cases:\n- R sector (ribosomal): proteins `[\"R1\",\"R2\",\"R3\"]`.\n- E sector (metabolic enzymes): proteins `[\"E1\",\"E2\"]`.\n- S sector (stress-response): proteins `[\"S1\",\"S2\",\"S3\"]`.\n- Q sector (housekeeping): proteins `[\"Q1\",\"Q2\"]`.\n\nTest suite:\n- Test case $1$ (moderate stress increase):\n  - Before intensities (arbitrary units): R1 24, R2 9, R3 7, E1 14, E2 10, S1 3, S2 2, S3 1, Q1 15, Q2 15.\n  - After intensities: R1 20, R2 7, R3 5, E1 13, E2 9, S1 8, S2 6, S3 4, Q1 14, Q2 14.\n- Test case $2$ (no change in stress fraction but redistribution among other sectors):\n  - Before intensities: R1 18, R2 9, R3 8, E1 14, E2 11, S1 4, S2 3, S3 3, Q1 16, Q2 14.\n  - After intensities: R1 17, R2 8, R3 5, E1 16, E2 14, S1 4, S2 3, S3 3, Q1 16, Q2 14.\n- Test case $3$ (extreme stress increase approaching the no-growth boundary):\n  - Before intensities: R1 20, R2 10, R3 8, E1 12, E2 10, S1 6, S2 5, S3 4, Q1 13, Q2 12.\n  - After intensities: R1 12, R2 5, R3 3, E1 6, E2 4, S1 24, S2 18, S3 14, Q1 7, Q2 7.\n\nFinal output format:\n- Produce exactly one line: a single string representing a list of three lists, one per test case, where each inner list is `[\\Delta \\phi_R, \\Delta \\phi_E, \\Delta \\phi_S, \\Delta \\phi_Q, \\Delta \\mu_{\\mathrm{opp}}]` rounded to $6$ decimal places, with $\\Delta \\mu_{\\mathrm{opp}}$ expressed in $\\mathrm{h}^{-1}$.", "solution": "The problem statement has been subjected to rigorous validation and is deemed valid. It is scientifically grounded in established principles of bacterial growth physiology, mathematically well-posed, and free from contradiction or ambiguity. The provided parameters and experimental context are physically and biologically plausible. We may thus proceed with the formal solution.\n\nThe objective is to quantify the reallocation of the bacterial proteome in response to nutrient starvation and to calculate the theoretical opportunity cost in maximal growth rate incurred by the observed change in the stress-response sector. This will be accomplished by applying a standard model of proteome partitioning and translation-limited growth.\n\nThe computational procedure is as follows:\n1. For each condition (before and after starvation), the fractional abundances of the four proteome sectors—ribosomal ($R$), biosynthetic ($E$), stress ($S$), and housekeeping ($Q$)—are computed from the provided protein intensity data.\n2. The change, or shift, in each sector's fraction is calculated as the difference between the 'after' and 'before' states.\n3. The maximal possible growth rate, $\\mu_{\\max}$, is calculated for both the 'before' and 'after' states. This calculation is a function of the stress-response sector fraction, $\\phi_S$, and is based on a theoretical proteome allocation model with fixed, inelastic components.\n4. The opportunity cost, $\\Delta \\mu_{\\mathrm{opp}}$, is determined as the reduction in this maximal theoretical growth rate resulting from the observed shift in $\\phi_S$.\n\nThe governing equations are defined as follows:\n\nThe fraction of the proteome allocated to sector $X$, denoted $\\phi_X$, is calculated from protein intensities $I_i$:\n$$\n\\phi_X = \\frac{\\sum_{i \\in X} I_i}{\\sum_{\\text{all } j} I_j}\n$$\nwhere the denominator is the sum of all measured protein intensities. By definition, the sum of all sector fractions is unity:\n$$\n\\phi_R + \\phi_E + \\phi_S + \\phi_Q = 1\n$$\nThe shift in each sector fraction, $\\Delta \\phi_X$, is the difference between the post-starvation ('after') and pre-starvation ('before') states:\n$$\n\\Delta \\phi_X = \\phi_X^{\\mathrm{after}} - \\phi_X^{\\mathrm{before}}\n$$\nThe theoretical maximal growth rate under a given stress burden $\\phi_S$ is constrained by the non-negotiable proteome fractions required for other functions. The maximal fraction available for ribosomes, $\\phi_R^{\\mathrm{max}}$, is what remains after allocating fixed minimal fractions for housekeeping ($\\phi_Q$), minimal biosynthesis ($\\phi_E^{\\min}$), and the given stress response ($\\phi_S$):\n$$\n\\phi_R^{\\mathrm{max}} = 1 - \\phi_Q - \\phi_E^{\\min} - \\phi_S\n$$\nThe maximal growth rate, $\\mu_{\\max}$, is then determined by the translation-limited growth law, which accounts for an inactive ribosome fraction, $\\phi_R^0$:\n$$\n\\mu_{\\max}(\\phi_S) = \\max\\{0, \\kappa_t (\\phi_R^{\\mathrm{max}} - \\phi_R^0)\\} = \\max\\{0, \\kappa_t (1 - \\phi_Q - \\phi_E^{\\min} - \\phi_S - \\phi_R^0)\\}\n$$\nwhere $\\kappa_t$ is the translational capacity. The $\\max\\{0, \\dots\\}$ term enforces the physical constraint that growth rate cannot be negative.\n\nThe opportunity cost in maximal growth rate, $\\Delta \\mu_{\\mathrm{opp}}$, due to the change in the stress sector from $\\phi_S^{\\mathrm{before}}$ to $\\phi_S^{\\mathrm{after}}$ is:\n$$\n\\Delta \\mu_{\\mathrm{opp}} = \\mu_{\\max}(\\phi_S^{\\mathrm{before}}) - \\mu_{\\max}(\\phi_S^{\\mathrm{after}})\n$$\n\nWe apply these principles using the provided constants:\n*   Translational capacity $\\kappa_t = 2.0\\ \\mathrm{h}^{-1}$\n*   Baseline housekeeping fraction $\\phi_Q = 0.28$\n*   Minimal biosynthetic enzyme fraction $\\phi_E^{\\min} = 0.12$\n*   Inactive ribosome offset $\\phi_R^0 = 0.05$\n\nLet us demonstrate the calculation for Test Case $1$.\n\nFirst, we calculate the sector fractions.\nTotal intensity before starvation: $\\sum I^{\\mathrm{before}} = (24+9+7) + (14+10) + (3+2+1) + (15+15) = 40+24+6+30 = 100$.\nBefore fractions:\n$\\phi_R^{\\mathrm{before}} = 40/100 = 0.40$\n$\\phi_E^{\\mathrm{before}} = 24/100 = 0.24$\n$\\phi_S^{\\mathrm{before}} = 6/100 = 0.06$\n$\\phi_Q^{\\mathrm{before}} = 30/100 = 0.30$\n\nTotal intensity after starvation: $\\sum I^{\\mathrm{after}} = (20+7+5) + (13+9) + (8+6+4) + (14+14) = 32+22+18+28 = 100$.\nAfter fractions:\n$\\phi_R^{\\mathrm{after}} = 32/100 = 0.32$\n$\\phi_E^{\\mathrm{after}} = 22/100 = 0.22$\n$\\phi_S^{\\mathrm{after}} = 18/100 = 0.18$\n$\\phi_Q^{\\mathrm{after}} = 28/100 = 0.28$\n\nNext, we calculate the shifts, $\\Delta \\phi_X$:\n$\\Delta \\phi_R = 0.32 - 0.40 = -0.08$\n$\\Delta \\phi_E = 0.22 - 0.24 = -0.02$\n$\\Delta \\phi_S = 0.18 - 0.06 = 0.12$\n$\\Delta \\phi_Q = 0.28 - 0.30 = -0.02$\n\nFinally, we calculate the opportunity cost, $\\Delta \\mu_{\\mathrm{opp}}$. The argument of the $\\mu_{\\max}$ function simplifies to:\n$1 - \\phi_Q - \\phi_E^{\\min} - \\phi_S - \\phi_R^0 = 1 - 0.28 - 0.12 - \\phi_S - 0.05 = 0.55 - \\phi_S$.\n$\\mu_{\\max}(\\phi_S) = \\max\\{0, 2.0 \\times (0.55 - \\phi_S)\\}$.\n\nFor the 'before' state, with $\\phi_S^{\\mathrm{before}} = 0.06$:\n$\\mu_{\\max}(\\phi_S^{\\mathrm{before}}) = \\max\\{0, 2.0 \\times (0.55 - 0.06)\\} = \\max\\{0, 2.0 \\times 0.49\\} = 0.98\\ \\mathrm{h}^{-1}$.\n\nFor the 'after' state, with $\\phi_S^{\\mathrm{after}} = 0.18$:\n$\\mu_{\\max}(\\phi_S^{\\mathrm{after}}) = \\max\\{0, 2.0 \\times (0.55 - 0.18)\\} = \\max\\{0, 2.0 \\times 0.37\\} = 0.74\\ \\mathrm{h}^{-1}$.\n\nThe opportunity cost is:\n$\\Delta \\mu_{\\mathrm{opp}} = 0.98 - 0.74 = 0.24\\ \\mathrm{h}^{-1}$.\n\nThe final vector of results for Test Case $1$, rounded to six decimal places, is $[-0.080000, -0.020000, 0.120000, -0.020000, 0.240000]$. The same procedure is applied to all other test cases, as implemented in the following program.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n# from scipy import ...\n\ndef solve():\n    \"\"\"\n    Computes proteome sector shifts and growth opportunity cost for bacterial\n    starvation response based on proteomics data.\n    \"\"\"\n    \n    # Define constants from the problem statement.\n    KAPPA_T = 2.0  # Translational capacity, h^-1\n    PHI_R0 = 0.05  # Inactive ribosome offset, dimensionless\n    PHI_Q_CONST = 0.28  # Baseline housekeeping fraction, dimensionless\n    PHI_E_MIN = 0.12 # Minimal biosynthetic enzyme fraction, dimensionless\n\n    # Protein-to-sector mapping\n    SECTOR_MAP = {\n        \"R\": [\"R1\", \"R2\", \"R3\"],\n        \"E\": [\"E1\", \"E2\"],\n        \"S\": [\"S1\", \"S2\", \"S3\"],\n        \"Q\": [\"Q1\", \"Q2\"],\n    }\n    \n    # Define the test cases from the problem statement.\n    test_cases = [\n        # Test case 1 (moderate stress increase)\n        (\n            {\"R1\": 24, \"R2\": 9, \"R3\": 7, \"E1\": 14, \"E2\": 10, \"S1\": 3, \"S2\": 2, \"S3\": 1, \"Q1\": 15, \"Q2\": 15},\n            {\"R1\": 20, \"R2\": 7, \"R3\": 5, \"E1\": 13, \"E2\": 9, \"S1\": 8, \"S2\": 6, \"S3\": 4, \"Q1\": 14, \"Q2\": 14}\n        ),\n        # Test case 2 (no change in stress fraction)\n        (\n            {\"R1\": 18, \"R2\": 9, \"R3\": 8, \"E1\": 14, \"E2\": 11, \"S1\": 4, \"S2\": 3, \"S3\": 3, \"Q1\": 16, \"Q2\": 14},\n            {\"R1\": 17, \"R2\": 8, \"R3\": 5, \"E1\": 16, \"E2\": 14, \"S1\": 4, \"S2\": 3, \"S3\": 3, \"Q1\": 16, \"Q2\": 14}\n        ),\n        # Test case 3 (extreme stress increase)\n        (\n            {\"R1\": 20, \"R2\": 10, \"R3\": 8, \"E1\": 12, \"E2\": 10, \"S1\": 6, \"S2\": 5, \"S3\": 4, \"Q1\": 13, \"Q2\": 12},\n            {\"R1\": 12, \"R2\": 5, \"R3\": 3, \"E1\": 6, \"E2\": 4, \"S1\": 24, \"S2\": 18, \"S3\": 14, \"Q1\": 7, \"Q2\": 7}\n        )\n    ]\n\n    def calculate_fractions(intensities, sector_map):\n        \"\"\"Computes proteome fractions for each sector from intensity data.\"\"\"\n        total_intensity = np.sum(list(intensities.values()))\n        \n        if total_intensity == 0:\n            return {sector: 0.0 for sector in sector_map}\n\n        fractions = {}\n        for sector, proteins in sector_map.items():\n            sector_intensity = np.sum([intensities[p] for p in proteins])\n            fractions[sector] = sector_intensity / total_intensity\n        return fractions\n\n    def calculate_mu_max(phi_s):\n        \"\"\"Calculates the theoretical maximal growth rate for a given stress fraction.\"\"\"\n        # Argument for the growth law: 1 - phi_Q_const - phi_E_min - phi_s - phi_R0\n        growth_arg = 1.0 - PHI_Q_CONST - PHI_E_MIN - phi_s - PHI_R0\n        mu_max = KAPPA_T * growth_arg\n        return max(0.0, mu_max)\n\n    all_results = []\n    for before_intensities, after_intensities in test_cases:\n        # Calculate fractions for before and after states\n        phi_before = calculate_fractions(before_intensities, SECTOR_MAP)\n        phi_after = calculate_fractions(after_intensities, SECTOR_MAP)\n        \n        # Compute shifts in sector fractions\n        delta_phi_r = phi_after[\"R\"] - phi_before[\"R\"]\n        delta_phi_e = phi_after[\"E\"] - phi_before[\"E\"]\n        delta_phi_s = phi_after[\"S\"] - phi_before[\"S\"]\n        delta_phi_q = phi_after[\"Q\"] - phi_before[\"Q\"]\n        \n        # Compute opportunity cost\n        mu_max_before = calculate_mu_max(phi_before[\"S\"])\n        mu_max_after = calculate_mu_max(phi_after[\"S\"])\n        delta_mu_opp = mu_max_before - mu_max_after\n        \n        case_result = [\n            delta_phi_r,\n            delta_phi_e,\n            delta_phi_s,\n            delta_phi_q,\n            delta_mu_opp\n        ]\n        all_results.append(case_result)\n\n    # Format the final output string to meet exact specifications,\n    # including 6 decimal places with trailing zeros.\n    case_strings = []\n    for case_result in all_results:\n        num_strings = [f\"{num:.6f}\" for num in case_result]\n        case_strings.append(f\"[{','.join(num_strings)}]\")\n    \n    final_output = f\"[{','.join(case_strings)}]\"\n    print(final_output)\n\nsolve()\n```", "id": "2534419"}, {"introduction": "The significant investment in the stress proteome during starvation provides a crucial benefit known as cross-protection, enhancing survival against subsequent, unrelated challenges. This exercise introduces you to the quantitative framework of survival analysis, a tool used to model and measure risk over time [@problem_id:2534412]. By calculating and comparing hazard rates from hypothetical survival data, you will quantify the magnitude of cross-protection and gain a deeper appreciation for the adaptive advantages of the stationary phase program.", "problem": "You are given time-resolved fractional survival trajectories for two bacterial populations subjected to a constant Hydrogen Peroxide ($H_2O_2$) challenge: cells that were previously starved and cells that were not previously starved. Model the survival dynamics using a standard survival framework grounded in the differential relation between the survival function and the hazard function. Assume that killing under constant $H_2O_2$ exposure is memoryless over short intervals so that the survival function $S(t)$ satisfies the first-order kinetics relation\n$$\n\\frac{dS(t)}{dt} = -h(t)\\,S(t),\n$$\nwhere $h(t)$ is the instantaneous hazard rate. By definition, the hazard function satisfies\n$$\nh(t) = -\\frac{d}{dt}\\ln S(t).\n$$\nFrom this, for discrete times $t_0 < t_1 < \\dots < t_n$ and measured survival fractions $S(t_k)$, estimate a piecewise-constant hazard over each interval $[t_k,t_{k+1}]$ by\n$$\n\\hat{h}_k \\approx -\\frac{\\ln S(t_{k+1}) - \\ln S(t_k)}{t_{k+1} - t_k} = -\\frac{\\ln\\left(\\frac{S(t_{k+1})}{S(t_k)}\\right)}{\\Delta t_k},\n$$\nwith $\\Delta t_k = t_{k+1} - t_k$. Compute interval-wise hazard ratios between starved and non-starved cells,\n$$\nHR_k = \\frac{\\hat{h}^{\\mathrm{starved}}_k}{\\hat{h}^{\\mathrm{non}}_k}.\n$$\nTo ensure numerical stability if any $S(t_k)$ equals zero, clamp survival fractions into $[\\delta,1]$ before taking logarithms, with $\\delta = 10^{-12}$. Let $\\hat{h}^{\\mathrm{starved}}_k$ and $\\hat{h}^{\\mathrm{non}}_k$ be the resulting estimates. Define $HR_k$ by the following rules:\n- If $\\hat{h}^{\\mathrm{non}}_k > 0$ and $\\hat{h}^{\\mathrm{starved}}_k = 0$, then $HR_k = 0$.\n- If $\\hat{h}^{\\mathrm{non}}_k = 0$ and $\\hat{h}^{\\mathrm{starved}}_k > 0$, then $HR_k = +\\infty$.\n- If $\\hat{h}^{\\mathrm{non}}_k = 0$ and $\\hat{h}^{\\mathrm{starved}}_k = 0$, then $HR_k = 1$.\n- Otherwise, $HR_k = \\hat{h}^{\\mathrm{starved}}_k / \\hat{h}^{\\mathrm{non}}_k$.\n\nDefine the magnitude of cross-protection as the constant multiplicative reduction in hazard of starved relative to non-starved cells. Operationally, estimate a time-invariant hazard ratio $g$ by the weighted geometric mean of the interval-wise hazard ratios over intervals where both hazards are strictly positive:\n$$\ng = \\exp\\left( \\frac{\\sum_{k \\in \\mathcal{J}} w_k \\ln \\mathrm{HR}_k}{\\sum_{k \\in \\mathcal{J}} w_k} \\right), \\quad \\text{with} \\quad \\mathcal{J} = \\{k : \\hat{h}^{\\mathrm{starved}}_k > 0 \\ \\text{and} \\ \\hat{h}^{\\mathrm{non}}_k > 0\\},\n$$\nand weights $w_k = \\Delta t_k$. The cross-protection magnitude is then\n$$\nP = \\frac{1}{g}.\n$$\nIf $\\mathcal{J}$ is empty, define $P$ by cases consistent with the limiting behavior of the geometric mean: if $\\hat{h}^{\\mathrm{non}}_k = 0$ for all $k$ and $\\hat{h}^{\\mathrm{starved}}_k = 0$ for all $k$, then $P = 1$; if $\\hat{h}^{\\mathrm{non}}_k > 0$ for at least one $k$ and $\\hat{h}^{\\mathrm{starved}}_k = 0$ for all $k$, then $P = +\\infty$; if $\\hat{h}^{\\mathrm{non}}_k = 0$ for all $k$ and $\\hat{h}^{\\mathrm{starved}}_k > 0$ for at least one $k$, then $P = 0$.\n\nYour task is to implement a program that, for the test suite below, computes:\n- The list of interval-wise hazard ratios `$HR_k$` (one per interval between consecutive time points).\n- The cross-protection magnitude $P$.\n\nRound every $HR_k$ and $P$ to six decimal places. All outputs are unitless. Time is in minutes, but only ratios are reported.\n\nTest suite (times in minutes, survival fractions unitless):\n- Case $1$ (happy path, starved cells are more tolerant): $t = [\\,0,\\,5,\\,10,\\,15\\,]$, $S_{\\mathrm{non}} = [\\,1.0,\\,0.6,\\,0.36,\\,0.216\\,]$, $S_{\\mathrm{starved}} = [\\,1.0,\\,0.8,\\,0.64,\\,0.512\\,]$.\n- Case $2$ (no cross-protection, identical trajectories): $t = [\\,0,\\,4,\\,8\\,]$, $S_{\\mathrm{non}} = [\\,1.0,\\,0.7,\\,0.49\\,]$, $S_{\\mathrm{starved}} = [\\,1.0,\\,0.7,\\,0.49\\,]$.\n- Case $3$ (edge case with a zero-hazard interval for starved): $t = [\\,0,\\,10,\\,20\\,]$, $S_{\\mathrm{non}} = [\\,1.0,\\,0.5,\\,0.25\\,]$, $S_{\\mathrm{starved}} = [\\,1.0,\\,1.0,\\,0.95\\,]$.\n\nFinal output format:\nYour program should produce a single line of output containing a Python-style list of three elements, one per test case. Each element must be a two-element list of the form `[[\\mathrm{HR}_0,\\mathrm{HR}_1,\\dots],\\,P\\,]`, where the inner list contains the rounded hazard ratios for that case and $P$ is the rounded cross-protection magnitude. For example, the output should look like\n$$\n\\big[\\,[\\,[\\dots], P_1],\\,[\\,[\\dots], P_2],\\,[\\,[\\dots], P_3]\\,\\big].\n$$", "solution": "The problem statement has been validated and is determined to be scientifically and mathematically sound. It presents a well-posed computational task grounded in standard survival analysis principles relevant to microbiology. We shall proceed with the solution.\n\nThe objective is to quantify the cross-protection conferred by starvation on bacterial cells against a subsequent lethal challenge. This is achieved by calculating hazard rates from survival data and comparing them between a starved and a non-starved population. The procedure is organized into three principal steps.\n\nFirst, we estimate the piecewise-constant hazard rate for each population over discrete time intervals. The fundamental relationship between the survival function $S(t)$ and the hazard function $h(t)$ is given by the first-order differential equation $\\frac{dS(t)}{dt} = -h(t)S(t)$. For a time interval $[t_k, t_{k+1}]$ of duration $\\Delta t_k = t_{k+1} - t_k$, assuming the hazard rate is constant, $h(t) = \\hat{h}_k$, we integrate this equation to find $S(t_{k+1}) = S(t_k) \\exp(-\\hat{h}_k \\Delta t_k)$. Solving for the hazard rate $\\hat{h}_k$ yields the formula for its estimation:\n$$\n\\hat{h}_k = -\\frac{\\ln\\left(\\frac{S(t_{k+1})}{S(t_k)}\\right)}{\\Delta t_k}\n$$\nThis calculation is performed for both the non-starved population, yielding a sequence of hazard rates $\\hat{h}^{\\mathrm{non}}_k$, and the starved population, yielding $\\hat{h}^{\\mathrm{starved}}_k$. To ensure numerical stability, any survival fraction $S(t_k)$ that is measured as $0$ is clamped to a small positive value $\\delta = 10^{-12}$ before the logarithm is taken. Since a survival function must be non-increasing, i.e., $S(t_{k+1}) \\le S(t_k)$, the estimated hazard rates $\\hat{h}_k$ must be non-negative.\n\nSecond, we compute the interval-wise hazard ratio, $HR_k$, for each interval $k$. This ratio compares the risk of death for starved cells relative to non-starved cells. It is defined as:\n$$\nHR_k = \\frac{\\hat{h}^{\\mathrm{starved}}_k}{\\hat{h}^{\\mathrm{non}}_k}\n$$\nThe problem defines specific rules for cases where one or both hazard rates are zero.\n- If $\\hat{h}^{\\mathrm{non}}_k > 0$ and $\\hat{h}^{\\mathrm{starved}}_k = 0$, then $HR_k = 0$. This indicates complete protection in the starved population for that interval.\n- If $\\hat{h}^{\\mathrm{non}}_k = 0$ and $\\hat{h}^{\\mathrm{starved}}_k > 0$, then $HR_k = +\\infty$. This indicates that non-starved cells faced zero risk while starved cells did, a case of sensitization.\n- If $\\hat{h}^{\\mathrm{non}}_k = 0$ and $\\hat{h}^{\\mathrm{starved}}_k = 0$, then $HR_k = 1$. Both populations face zero risk, so their relative risk is unity.\n\nThird, we synthesize these interval-wise ratios into a single metric for cross-protection magnitude, $P$. This requires calculating an aggregate time-invariant hazard ratio, $g$. This is estimated as the weighted geometric mean of the $HR_k$ values, but only over the set of intervals $\\mathcal{J} = \\{k : \\hat{h}^{\\mathrm{starved}}_k > 0 \\ \\text{and} \\ \\hat{h}^{\\mathrm{non}}_k > 0\\}$. The use of a geometric mean is appropriate for averaging ratios, and the weights $w_k = \\Delta t_k$ correctly account for the duration of each interval. The formula for $g$ is:\n$$\ng = \\exp\\left( \\frac{\\sum_{k \\in \\mathcal{J}} w_k \\ln \\mathrm{HR}_k}{\\sum_{k \\in \\mathcal{J}} w_k} \\right)\n$$\nThe cross-protection magnitude $P$ is then defined as the reciprocal of $g$:\n$$\nP = \\frac{1}{g}\n$$\nA value of $P > 1$ signifies that starvation confers protection, reducing the effective hazard rate. $P  1$ would signify sensitization. $P=1$ indicates no effect. If the set $\\mathcal{J}$ is empty, $P$ is determined by specific rules that correctly interpret the limiting behaviors: $P=1$ if all hazards are zero; $P=+\\infty$ if only the non-starved population dies; and $P=0$ if only the starved population dies.\n\nThe implementation will systematically apply these steps to each test case. For each case, it will first compute the sequences of hazard rates for both populations, then the corresponding hazard ratios for each interval, and finally the aggregate cross-protection magnitude. All results will be rounded to six decimal places as required.", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the problem for all test cases and prints the result in the specified format.\n    \"\"\"\n    test_cases = [\n        {\n            \"t\": [0., 5., 10., 15.],\n            \"S_non\": [1.0, 0.6, 0.36, 0.216],\n            \"S_starved\": [1.0, 0.8, 0.64, 0.512]\n        },\n        {\n            \"t\": [0., 4., 8.],\n            \"S_non\": [1.0, 0.7, 0.49],\n            \"S_starved\": [1.0, 0.7, 0.49]\n        },\n        {\n            \"t\": [0., 10., 20.],\n            \"S_non\": [1.0, 0.5, 0.25],\n            \"S_starved\": [1.0, 1.0, 0.95]\n        }\n    ]\n    \n    delta = 1e-12\n    all_case_results = []\n\n    for case in test_cases:\n        times = np.array(case[\"t\"])\n        s_non = np.array(case[\"S_non\"])\n        s_starved = np.array(case[\"S_starved\"])\n\n        # Step 1: Calculate piecewise-constant hazard rates\n        def calculate_hazards(t, s, d):\n            hazards = []\n            num_intervals = len(t) - 1\n            for k in range(num_intervals):\n                dt = t[k+1] - t[k]\n                s_k = np.maximum(d, s[k])\n                s_k_plus_1 = np.maximum(d, s[k+1])\n                \n                # S(t) is non-increasing, so s_k_plus_1 / s_k = 1, log is = 0\n                # h_k will be = 0\n                if dt  0:\n                    h_k = -np.log(s_k_plus_1 / s_k) / dt\n                else: # Should not happen with valid time data\n                    h_k = 0.0\n                hazards.append(h_k)\n            return hazards\n\n        h_non_list = calculate_hazards(times, s_non, delta)\n        h_starved_list = calculate_hazards(times, s_starved, delta)\n\n        # Step 2: Calculate interval-wise hazard ratios (HR_k)\n        hr_list = []\n        for k in range(len(h_non_list)):\n            h_non_k = h_non_list[k]\n            h_starved_k = h_starved_list[k]\n            \n            hr_k = 0.0\n            if h_non_k  0 and h_starved_k == 0:\n                hr_k = 0.0\n            elif h_non_k == 0 and h_starved_k  0:\n                hr_k = np.inf\n            elif h_non_k == 0 and h_starved_k == 0:\n                hr_k = 1.0\n            elif h_non_k  0: # Implies h_starved_k  0 as other cases are covered\n                hr_k = h_starved_k / h_non_k\n            # The h_non_k  0 case is physically unrealistic but would result in hr_k=0.0\n            \n            hr_list.append(hr_k)\n\n        # Step 3: Calculate cross-protection magnitude (P)\n        J_indices = [k for k in range(len(h_non_list)) if h_non_list[k]  0 and h_starved_list[k]  0]\n        \n        P = 0.0\n        if not J_indices:\n            # Special cases for P when J is empty\n            all_non_zero = all(h == 0 for h in h_non_list)\n            all_starved_zero = all(h == 0 for h in h_starved_list)\n            any_non_pos = any(h  0 for h in h_non_list)\n            any_starved_pos = any(h  0 for h in h_starved_list)\n\n            if all_non_zero and all_starved_zero:\n                P = 1.0\n            elif any_non_pos and all_starved_zero:\n                P = np.inf\n            elif all_non_zero and any_starved_pos:\n                P = 0.0\n        else:\n            # Calculate P via weighted geometric mean hazard ratio g\n            w_k_ln_hr_k_sum = 0.0\n            w_k_sum = 0.0\n            \n            for k in J_indices:\n                dt_k = times[k+1] - times[k]\n                hr_k_val = h_starved_list[k] / h_non_list[k]\n                w_k_ln_hr_k_sum += dt_k * np.log(hr_k_val)\n                w_k_sum += dt_k\n            \n            if w_k_sum  0:\n                g = np.exp(w_k_ln_hr_k_sum / w_k_sum)\n                if g  0:\n                    P = 1.0 / g\n                else: # g can be 0 if some hr_k is 0, but J forbids that. Safety check.\n                    P = np.inf\n            else: # Should not happen if J is not empty\n                P = 1.0\n\n        # Round all results to 6 decimal places\n        rounded_hr_list = []\n        for hr in hr_list:\n            if np.isinf(hr):\n                rounded_hr_list.append(hr)\n            else:\n                rounded_hr_list.append(round(hr, 6))\n\n        if np.isinf(P):\n            rounded_p = P\n        else:\n            rounded_p = round(P, 6)\n        \n        # Prepare the string for this case's result\n        def format_float(val):\n            if isinstance(val, float) and val == int(val):\n                return str(int(val)) + '.0' # Match 1.0 style from case 2\n            return str(val)\n\n        hr_strs = []\n        for hr in rounded_hr_list:\n            if np.isinf(hr):\n                hr_strs.append('inf')\n            else:\n                hr_strs.append(str(hr))\n\n        p_str = ''\n        if np.isinf(rounded_p):\n            p_str = 'inf'\n        else:\n            p_str = str(rounded_p)\n\n        case_result = [rounded_hr_list, rounded_p]\n        all_case_results.append(case_result)\n\n    # Final print statement must match the required format exactly\n    print(str(all_case_results).replace(\" \", \"\"))\n\nsolve()\n```", "id": "2534412"}]}