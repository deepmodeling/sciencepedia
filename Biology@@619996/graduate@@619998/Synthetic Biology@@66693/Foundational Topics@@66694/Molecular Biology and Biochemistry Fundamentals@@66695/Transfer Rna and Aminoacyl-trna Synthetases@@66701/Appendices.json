{"hands_on_practices": [{"introduction": "To truly grasp the importance of aminoacyl-tRNA synthetases, we begin with a foundational thought experiment. This exercise explores the \"second genetic code\" by postulating a specific failure in the charging process. By considering the consequences of a synthetase that consistently attaches the wrong amino acid, you will clarify the distinct roles of the synthetase (which ensures chemical identity) and the ribosome (which reads the genetic message via codon-anticodon pairing), a fundamental principle of translational fidelity [@problem_id:2142006].", "problem": "In a hypothetical eukaryotic cell line, a specific genetic mutation has occurred in the gene encoding the enzyme Valyl-tRNA synthetase. This mutation alters the enzyme's amino acid binding site, causing it to exclusively and consistently charge all transfer Ribonucleic Acid (tRNA) molecules that possess an anticodon for Valine (tRNA-Val) with the amino acid Glycine. All other aminoacyl-tRNA synthetases in this cell line function normally.\n\nWhich of the following statements most accurately describes the primary, direct consequence of this specific enzymatic defect on all newly synthesized polypeptides within this mutant cell line?\n\nA. Translation will terminate prematurely whenever a Valine codon is encountered on the messenger RNA (mRNA).\n\nB. The mischarged tRNA-Val will be unable to bind to the ribosome, leading to a pause in translation at all Valine codons.\n\nC. Every position in a newly synthesized polypeptide chain that is specified by a Valine codon will instead be occupied by a Glycine residue.\n\nD. The ribosome's proofreading mechanism will identify the incorrect amino acid (Glycine) and reject the mischarged tRNA-Val, preventing its use in translation.\n\nE. Newly synthesized proteins will contain Glycine at positions specified by Valine codons, but only when the cell is under metabolic stress.", "solution": "Aminoacyl-tRNA synthetases are responsible for charging each tRNA with its correct amino acid based on identity elements in the tRNA (the so-called second genetic code). During translation, the ribosome selects tRNAs primarily through codon-anticodon base pairing; the ribosome’s proofreading and kinetic selection mechanisms monitor the accuracy of this base pairing, not the chemical identity of the attached amino acid. Quality control for amino acid identity resides at the level of the aminoacyl-tRNA synthetases.\n\nIn the mutant described, the Valyl-tRNA synthetase mischarges all tRNA molecules that have anticodons for Valine with Glycine, while all other synthetases function normally. Therefore, every tRNA-Val that base-pairs with a Valine codon on mRNA will carry Glycine instead of Valine.\n\nBecause the ribosome accepts an aminoacyl-tRNA based on correct codon-anticodon pairing, the mischarged tRNA-Val will still be efficiently delivered to the A site at all Valine codons and its attached amino acid will be incorporated into the growing polypeptide. There is no ribosomal mechanism to detect that the attached amino acid is incorrect; proofreading against incorrect amino acids is performed by the synthetase, which is precisely the defective step here.\n\nThus:\n- Translation will not terminate at Valine codons, since termination requires stop codons, not Valine codons (rejecting option A).\n- The mischarged tRNA-Val will still bind the ribosome when its anticodon matches a Valine codon, so translation will not pause at Valine codons (rejecting option B).\n- The ribosome will not reject the mischarged tRNA-Val based on amino acid identity (rejecting option D).\n- The effect is constitutive given the described mutation and does not depend on metabolic stress (rejecting option E).\n\nConsequently, every position specified by a Valine codon will be occupied by Glycine in newly synthesized polypeptides. This matches option C.", "answer": "$$\\boxed{C}$$", "id": "2142006"}, {"introduction": "Having established the qualitative consequences of mischarging, we now move to a quantitative analysis of its impact on the entire proteome. Translational fidelity is not absolute, and small error frequencies can have significant cumulative effects. This practice challenges you to apply basic probability theory to estimate the proteome-wide rate of amino acid misincorporation arising from a single, defined mischarging pathway, connecting a molecular error rate to a system-level outcome [@problem_id:2542529].", "problem": "A cell maintains translational fidelity through accurate aminoacylation of transfer ribonucleic acid (tRNA) by aminoacyl-tRNA synthetases and correct codon–anticodon pairing on the ribosome. Consider a single amino acid species whose set of cognate codons accounts for a fraction $0.03$ of all sense codons across the expressed messenger ribonucleic acid (mRNA) pool. Let the steady-state mischarging frequency for the combined pool of tRNAs that decode exactly this codon set be $2\\times 10^{-3}$, defined as the fraction of those tRNAs that are misacylated with an incorrect amino acid after quality control by the aminoacyl-tRNA synthetase, with no additional downstream correction of amino acid identity by the ribosome. Assume the following:\n- Each elongation step samples codons according to their proteome-wide usage frequencies, independently across steps.\n- The ribosome selects tRNA solely by codon–anticodon complementarity; thus, when a codon from this set is in the A site, the recruited tRNA is drawn from the cognate tRNA pool, and if that tRNA is misacylated, the incorrect amino acid is incorporated.\n- Ignore all other error sources (e.g., misreading, frameshifting, premature termination), and assume there is no kinetic coupling between codon choice and tRNA charging state beyond the specified frequencies.\n\nUsing only these assumptions and fundamental definitions of probability, derive and compute the expected proteome-wide misincorporation rate per amino acid added that is attributable solely to this mischarging pathway. Express your final answer as a decimal fraction and round to two significant figures.", "solution": "The problem as stated is scientifically grounded, self-contained, and well-posed. It presents a simplified but valid model of a fundamental process in molecular biology, translational fidelity, allowing for a quantitative solution based on the principles of probability theory. All necessary data are provided, and the assumptions create a clear framework for calculation. There are no contradictions, ambiguities, or factual inaccuracies that would invalidate the problem.\n\nWe are tasked with computing the expected proteome-wide misincorporation rate per amino acid added, resulting from a specific mischarging pathway. This rate is equivalent to the probability that a misincorporation event occurs during any single, randomly selected peptide chain elongation step.\n\nLet $f_{codon}$ be the fraction of all sense codons in the expressed mRNA pool that are cognate to the amino acid species under consideration. From the problem statement, we have:\n$$f_{codon} = 0.03$$\nThis value represents the probability that a randomly chosen codon position on an mRNA being translated corresponds to this specific amino acid.\n\nLet $f_{mischarge}$ be the steady-state mischarging frequency for the corresponding set of tRNAs. This is the fraction of the tRNAs specific for this amino acid that are incorrectly acylated with a different amino acid. The problem gives this value as:\n$$f_{mischarge} = 2 \\times 10^{-3}$$\nThis represents the conditional probability that, given the ribosome has selected a tRNA from this cognate pool, the tRNA is carrying an incorrect amino acid.\n\nA misincorporation event attributable to this specific pathway occurs if and only if two events happen in sequence for a single elongation step:\n1.  Event $A$: The codon presented in the ribosomal A-site is one of the cognate codons for the amino acid of interest. The probability of this is $P(A) = f_{codon}$.\n2.  Event $B$: The tRNA molecule recruited to this codon, which is selected based on its anticodon, is one of the misacylated members of the cognate pool. The problem states that the ribosome selects tRNA solely by codon–anticodon complementarity. Therefore, if event $A$ occurs, a tRNA from the cognate pool is recruited. The probability that this recruited tRNA is mischarged is given as $f_{mischarge}$. This is the conditional probability $P(B|A) = f_{mischarge}$.\n\nThe overall probability of misincorporation per amino acid added, which we denote $R_{misinc}$, is the probability of the joint occurrence of these two events. Based on the assumption that codon selection and the charging state of the tRNA pool are independent, we can find this joint probability by multiplying the probability of the first event by the conditional probability of the second event:\n$$R_{misinc} = P(A \\cap B) = P(A) \\times P(B|A)$$\nSubstituting the defined variables:\n$$R_{misinc} = f_{codon} \\times f_{mischarge}$$\nNow, we insert the numerical values provided in the problem statement:\n$$R_{misinc} = (0.03) \\times (2 \\times 10^{-3})$$\nProceeding with the calculation:\n$$R_{misinc} = (3 \\times 10^{-2}) \\times (2 \\times 10^{-3}) = 6 \\times 10^{-5}$$\nThe problem requires the final answer to be expressed as a decimal fraction and rounded to two significant figures. The calculated value is:\n$$R_{misinc} = 0.00006$$\nTo express this with two significant figures, we must include a trailing zero, which is significant in this context. Therefore, the result is $0.000060$.", "answer": "$$\\boxed{0.000060}$$", "id": "2542529"}, {"introduction": "Our final practice advances from static error rates to the dynamic, kinetic nature of protein synthesis, a core concern in synthetic biology. The speed of translation is often limited by the availability of \"substrates\"—in this case, charged tRNAs. This advanced, hands-on modeling problem asks you to implement a kinetic model based on Michaelis-Menten principles to simulate how the depletion of a single tRNA species creates a bottleneck, affecting the global rate of protein production [@problem_id:2785571].", "problem": "You are asked to formalize and compute the effect of depleting a single charged transfer ribonucleic acid (tRNA) species on the global protein synthesis rate across a proteome, given a distribution of codon frequencies and wobble recognition between codons and tRNA species. Your program must implement the mechanistic kinetics and produce quantitative results. All outputs are dimensionless relative rates.\n\nMechanistic base and definitions:\n- Translation elongation proceeds by repeated selection of an aminoacylated transfer ribonucleic acid (tRNA) ternary complex by the ribosome. For a codon $j$, the effective cognate ternary complex concentration is $x_j = \\sum_{i=1}^{N} w_{j,i}\\,c'_i$, where $w_{j,i} \\in [0,1]$ encodes wobble recognition efficiency of codon $j$ by tRNA species $i$, and $c'_i$ is the charged tRNA concentration of species $i$ after perturbation. The baseline charged tRNA concentration vector is $\\mathbf{c} = (1,1,\\dots,1)$.\n- Aminoacyl-transfer ribonucleic acid synthetases (aaRS) maintain charging; here, depletion of a single charged tRNA species $g$ is modeled by $c'_g = d \\cdot c_g$ with $d \\in [0,1]$, and $c'_i = c_i$ for all $i \\neq g$.\n- The per-codon elongation (arrival) rate is given by a single-substrate Michaelis–Menten form $r_j = k_{\\max}\\,\\dfrac{x_j}{K_M + x_j}$, where $k_{\\max} > 0$ is an effective maximal rate and $K_M > 0$ is an effective Michaelis constant. The per-codon waiting time is $t_j = 1/r_j$ when $x_j > 0$, and $t_j = +\\infty$ when $x_j = 0$.\n- Let $f_j \\ge 0$ denote the proteome-wide codon frequency with $\\sum_{j=1}^{M} f_j = 1$. The proteome-weighted mean per-codon waiting time is $\\tau = \\sum_{j=1}^{M} f_j\\,t_j$. Define the baseline mean per-codon waiting time $\\tau_0$ using the same $K_M$ but with no depletion, i.e., $d = 1$ so that $\\mathbf{c'} = \\mathbf{c}$. The relative global protein synthesis rate per ribosome is $R = \\tau_0 / \\tau$ if $\\tau$ is finite. If there exists any $j$ with $f_j > 0$ and $x_j = 0$, then $\\tau = +\\infty$ and $R = 0$.\n\nData for this problem:\n- Number of codons $M = 5$ and number of tRNA species $N = 3$.\n- Wobble efficiency matrix entries (rows are codons $j \\in \\{1,2,3,4,5\\}$; columns are tRNA species $i \\in \\{1,2,3\\}$): the nonzero values are\n  $w_{1,1} = 1.0$,\n  $w_{2,1} = 0.5$, $w_{2,2} = 0.5$,\n  $w_{3,2} = 1.0$,\n  $w_{4,3} = 1.0$,\n  $w_{5,1} = 0.2$, $w_{5,2} = 0.2$, $w_{5,3} = 0.6$,\n  and $w_{j,i} = 0$ otherwise.\n- Proteome codon frequencies: $f_1 = 0.25$, $f_2 = 0.30$, $f_3 = 0.15$, $f_4 = 0.20$, $f_5 = 0.10$.\n- Baseline charged tRNA concentrations: $c_1 = 1.0$, $c_2 = 1.0$, $c_3 = 1.0$.\n- The depleted species index is $g = 2$, so that $c'_2 = d$ and $c'_1 = 1.0$, $c'_3 = 1.0$.\n\nYour task:\n- For each test case specified below by a pair $(d, K_M)$, compute the relative global protein synthesis rate $R$ using the definitions above. You may assume any fixed $k_{\\max} > 0$ (it cancels in $R$), but you must adhere to the mechanistic definitions to compute $r_j$, $t_j$, $\\tau$, and $\\tau_0$.\n\nTest suite (each item is $(d, K_M)$):\n- Case A: $(0.4, 0.5)$\n- Case B: $(1.0, 0.5)$\n- Case C: $(0.0, 0.5)$\n- Case D: $(0.6, 5.0)$\n\nFinal output format:\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets. The entries must be the four $R$ values for Cases A–D, in order, each rounded to exactly six decimal places as decimals (no unit), e.g., $[0.123456,0.234567,0.345678,0.456789]$.", "solution": "The problem statement is evaluated and deemed valid. It is scientifically grounded, well-posed, and contains all necessary information for a unique solution. We will proceed with a formal derivation and computation.\n\nThe central task is to compute the relative global protein synthesis rate, $R$, which is defined as the ratio of the baseline mean per-codon waiting time, $\\tau_0$, to the perturbed mean per-codon waiting time, $\\tau$.\n$$R = \\frac{\\tau_0}{\\tau}$$\nThe mean per-codon waiting time is the proteome-weighted average of individual codon waiting times, $t_j$.\n$$\\tau = \\sum_{j=1}^{M} f_j t_j$$\nwhere $f_j$ is the frequency of codon $j$ and $M$ is the total number of codon types. The per-codon waiting time, $t_j$, is the reciprocal of the per-codon elongation rate, $r_j$.\n$$t_j = \\frac{1}{r_j}$$\nThe rate $r_j$ is given a single-substrate Michaelis-Menten form:\n$$r_j = k_{\\max} \\frac{x_j}{K_M + x_j}$$\nwhere $k_{\\max}$ is the maximal rate, $K_M$ is the Michaelis constant, and $x_j$ is the effective concentration of the cognate ternary complex for codon $j$. Combining these, the waiting time for codon $j$ is:\n$$t_j = \\frac{K_M + x_j}{k_{\\max} x_j} = \\frac{1}{k_{\\max}} \\left(1 + \\frac{K_M}{x_j}\\right)$$\nThis expression is valid for $x_j > 0$. If $x_j = 0$ for a codon $j$ with $f_j > 0$, then $t_j \\to \\infty$, causing $\\tau \\to \\infty$ and thus $R = 0$.\n\nThe mean waiting time $\\tau$ can now be expressed as:\n$$\\tau = \\sum_{j=1}^{M} f_j \\left[ \\frac{1}{k_{\\max}} \\left(1 + \\frac{K_M}{x_j}\\right) \\right] = \\frac{1}{k_{\\max}} \\left( \\sum_{j=1}^{M} f_j + K_M \\sum_{j=1}^{M} \\frac{f_j}{x_j} \\right)$$\nGiven that $\\sum_{j=1}^{M} f_j = 1$, this simplifies to:\n$$\\tau = \\frac{1}{k_{\\max}} \\left(1 + K_M \\sum_{j=1}^{M} \\frac{f_j}{x_j}\\right)$$\nThe baseline waiting time, $\\tau_0$, is computed under baseline conditions (no tRNA depletion), using the baseline effective concentrations, $x_{j,0}$.\n$$\\tau_0 = \\frac{1}{k_{\\max}} \\left(1 + K_M \\sum_{j=1}^{M} \\frac{f_j}{x_{j,0}}\\right)$$\nThe relative rate $R$ is the ratio of these two quantities. The term $k_{\\max}$ cancels, as stated in the problem.\n$$R = \\frac{\\tau_0}{\\tau} = \\frac{1 + K_M \\sum_{j=1}^{M} \\frac{f_j}{x_{j,0}}}{1 + K_M \\sum_{j=1}^{M} \\frac{f_j}{x_j}}$$\nThe effective concentration $x_j$ depends on the charged tRNA concentrations $c'_i$ and the wobble recognition matrix $w_{j,i}$.\n$$x_j = \\sum_{i=1}^{N} w_{j,i} c'_i$$\nThis can be written in matrix form as $\\mathbf{x} = \\mathbf{W}\\mathbf{c'}$.\n\nWe now apply the specific data from the problem. We have $M=5$ codons and $N=3$ tRNA species.\nThe wobble matrix $\\mathbf{W}$ is:\n$$\\mathbf{W} = \\begin{pmatrix} 1.0 & 0.0 & 0.0 \\\\ 0.5 & 0.5 & 0.0 \\\\ 0.0 & 1.0 & 0.0 \\\\ 0.0 & 0.0 & 1.0 \\\\ 0.2 & 0.2 & 0.6 \\end{pmatrix}$$\nThe codon frequency vector $\\mathbf{f}$ is:\n$$\\mathbf{f} = \\begin{pmatrix} 0.25 \\\\ 0.30 \\\\ 0.15 \\\\ 0.20 \\\\ 0.10 \\end{pmatrix}$$\nThe baseline charged tRNA concentration vector is $\\mathbf{c} = (1, 1, 1)^T$. First, we compute the baseline effective concentrations, $\\mathbf{x}_0$, using $\\mathbf{c'}_0 = \\mathbf{c}$.\n$$\\mathbf{x}_0 = \\mathbf{W}\\mathbf{c} = \\begin{pmatrix} 1.0 & 0.0 & 0.0 \\\\ 0.5 & 0.5 & 0.0 \\\\ 0.0 & 1.0 & 0.0 \\\\ 0.0 & 0.0 & 1.0 \\\\ 0.2 & 0.2 & 0.6 \\end{pmatrix} \\begin{pmatrix} 1.0 \\\\ 1.0 \\\\ 1.0 \\end{pmatrix} = \\begin{pmatrix} 1.0 \\\\ 1.0 \\\\ 1.0 \\\\ 1.0 \\\\ 1.0 \\end{pmatrix}$$\nWith all $x_{j,0} = 1.0$, the sum in the numerator of $R$ becomes $\\sum_{j=1}^{M} \\frac{f_j}{x_{j,0}} = \\sum_{j=1}^{M} f_j = 1$. The formula for $R$ simplifies to:\n$$R = \\frac{1 + K_M}{1 + K_M \\sum_{j=1}^{M} \\frac{f_j}{x_j}}$$\nNext, we compute the perturbed effective concentrations $\\mathbf{x}$. The depletion targets tRNA species $g=2$ by a factor $d \\in [0,1]$. The perturbed concentration vector is $\\mathbf{c'} = (1.0, d, 1.0)^T$.\n$$\\mathbf{x} = \\mathbf{W}\\mathbf{c'} = \\begin{pmatrix} 1.0 & 0.0 & 0.0 \\\\ 0.5 & 0.5 & 0.0 \\\\ 0.0 & 1.0 & 0.0 \\\\ 0.0 & 0.0 & 1.0 \\\\ 0.2 & 0.2 & 0.6 \\end{pmatrix} \\begin{pmatrix} 1.0 \\\\ d \\\\ 1.0 \\end{pmatrix} = \\begin{pmatrix} 1.0 \\\\ 0.5 + 0.5d \\\\ d \\\\ 1.0 \\\\ 0.8 + 0.2d \\end{pmatrix}$$\nThe sum in the denominator of $R$ is $S(d) = \\sum_{j=1}^{5} \\frac{f_j}{x_j}$:\n$$S(d) = \\frac{0.25}{1.0} + \\frac{0.30}{0.5 + 0.5d} + \\frac{0.15}{d} + \\frac{0.20}{1.0} + \\frac{0.10}{0.8 + 0.2d}$$\nHere we must check for the condition $x_j=0$. Since all $f_j > 0$, we must check if any $x_j$ can be zero.\n$x_1=1.0 > 0$. $x_2 = 0.5(1+d) > 0$ for $d \\geq 0$. $x_3 = d$, which is $0$ if $d=0$. $x_4=1.0 > 0$. $x_5 = 0.8+0.2d > 0$ for $d \\geq 0$.\nThus, for $d=0$, $x_3=0$. Since $f_3=0.15 > 0$, the waiting time for codon $3$ is infinite, which makes $\\tau$ infinite and $R=0$ for any case where $d=0$.\n\nWe now calculate $R$ for the four test cases.\n\nCase A: $(d, K_M) = (0.4, 0.5)$\nWe first compute $S(d=0.4)$:\n$$S(0.4) = \\frac{0.25}{1.0} + \\frac{0.30}{0.5 + 0.5(0.4)} + \\frac{0.15}{0.4} + \\frac{0.20}{1.0} + \\frac{0.10}{0.8 + 0.2(0.4)}$$\n$$ S(0.4) = 0.25 + \\frac{0.30}{0.7} + 0.375 + 0.20 + \\frac{0.10}{0.88} \\approx 0.25 + 0.428571 + 0.375 + 0.20 + 0.113636 = 1.367207... $$\nNow, we compute $R$:\n$$R_A = \\frac{1 + 0.5}{1 + 0.5 \\times 1.367207...} = \\frac{1.5}{1 + 0.683604...} = \\frac{1.5}{1.683604...} \\approx 0.890948$$\n\nCase B: $(d, K_M) = (1.0, 0.5)$\nThis is the baseline condition, where $d=1.0$. Thus $\\mathbf{c'} = \\mathbf{c}$, $\\mathbf{x} = \\mathbf{x}_0$, and $\\tau = \\tau_0$. The ratio $R=\\tau_0/\\tau$ must be $1$.\nUsing the formula to verify: $S(d=1.0) = \\sum f_j/x_j = \\sum f_j/x_{j,0} = 1$.\n$$R_B = \\frac{1 + 0.5}{1 + 0.5 \\times 1} = \\frac{1.5}{1.5} = 1.0$$\n\nCase C: $(d, K_M) = (0.0, 0.5)$\nAs established, for $d=0$, $x_3 = 0$. Since $f_3 > 0$, the mean waiting time $\\tau$ is infinite.\nTherefore, $R_C = 0.0$.\n\nCase D: $(d, K_M) = (0.6, 5.0)$\nWe compute $S(d=0.6)$:\n$$S(0.6) = \\frac{0.25}{1.0} + \\frac{0.30}{0.5 + 0.5(0.6)} + \\frac{0.15}{0.6} + \\frac{0.20}{1.0} + \\frac{0.10}{0.8 + 0.2(0.6)}$$\n$$ S(0.6) = 0.25 + \\frac{0.30}{0.8} + 0.25 + 0.20 + \\frac{0.10}{0.92} = 0.25 + 0.375 + 0.25 + 0.20 + 0.108696... = 1.183696... $$\nNow, we compute $R$:\n$$R_D = \\frac{1 + 5.0}{1 + 5.0 \\times 1.183696...} = \\frac{6.0}{1 + 5.918478...} = \\frac{6.0}{6.918478...} \\approx 0.867232$$\nThe final results, rounded to six decimal places, are compiled for the final answer.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes the relative global protein synthesis rate for given test cases.\n    \"\"\"\n\n    # --- Data for the problem ---\n    # Number of codons M = 5, number of tRNA species N = 3.\n    # Wobble efficiency matrix W (shape M x N)\n    W = np.array([\n        [1.0, 0.0, 0.0],  # Codon 1\n        [0.5, 0.5, 0.0],  # Codon 2\n        [0.0, 1.0, 0.0],  # Codon 3\n        [0.0, 0.0, 1.0],  # Codon 4\n        [0.2, 0.2, 0.6]   # Codon 5\n    ])\n\n    # Proteome codon frequencies f (vector of length M)\n    f = np.array([0.25, 0.30, 0.15, 0.20, 0.10])\n\n    # Baseline charged tRNA concentrations c (vector of length N)\n    c = np.array([1.0, 1.0, 1.0])\n\n    # Depleted species index g = 2 (0-indexed: 1)\n    g_idx = 1\n\n    # Test suite: each item is a tuple (d, K_M)\n    test_cases = [\n        (0.4, 0.5),  # Case A\n        (1.0, 0.5),  # Case B\n        (0.0, 0.5),  # Case C\n        (0.6, 5.0)   # Case D\n    ]\n\n    results = []\n\n    # --- Calculations ---\n    # According to the derived formula:\n    # R = (1 + K_M) / (1 + K_M * sum(f_j / x_j))\n    # where x_j is the perturbed effective cognate concentration.\n    # The term sum(f_j / x_{j,0}) simplifies to 1 as all x_{j,0} = 1.\n\n    for d, K_M in test_cases:\n        # Per problem definition, if d=0, an essential codon's tRNA\n        # resource is zero, so protein synthesis halts.\n        # x_3 = d, and f_3 = 0.15 > 0.\n        if d == 0.0:\n            results.append(0.0)\n            continue\n\n        # 1. Calculate perturbed charged tRNA concentrations c'\n        c_prime = c.copy()\n        c_prime[g_idx] = d * c[g_idx]\n\n        # 2. Calculate effective cognate ternary complex concentrations x\n        x = W @ c_prime\n\n        # 3. Calculate the sum term for the denominator\n        # We must check if any x_j is zero for f_j > 0.\n        # This is already handled by the d=0 check above, as all f_j > 0 and\n        # only x_3 can be zero, which happens when d=0.\n        sum_term = np.sum(f / x)\n\n        # 4. Calculate relative global protein synthesis rate R\n        numerator = 1.0 + K_M\n        denominator = 1.0 + K_M * sum_term\n        R = numerator / denominator\n        results.append(R)\n\n    # Format output to exactly six decimal places\n    formatted_results = [f\"{res:.6f}\" for res in results]\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n```", "id": "2785571"}]}