{"hands_on_practices": [{"introduction": "The central dogma describes the flow of information, but it is fundamentally a physical process that consumes cellular resources. This first practice grounds our understanding by quantifying the bioenergetic cost of synthesizing a single protein. By calculating the number of high-energy phosphate bonds required for transcription and translation, we develop a crucial intuition for resource allocation, a key constraint in designing and engineering biological systems [@problem_id:2842316].", "problem": "A single round of gene expression synthesizes one messenger ribonucleic acid (mRNA) of length $3000$ nucleotides and one protein of length $1000$ amino acids. Using only foundational definitions from the central dogma and macromolecular enzymology, derive from first principles an exact expression for the total number of high-energy phosphate equivalents consumed by this single round, under the following explicit assumptions that reflect well-established biochemical steps:\n\n- Aminoacylation (charging) of transfer ribonucleic acid (tRNA) by aminoacyl-tRNA synthetases consumes adenosine triphosphate (ATP) to adenosine monophosphate (AMP) plus inorganic pyrophosphate (PPi), which corresponds to $2$ high-energy phosphate equivalents per amino acid charged.\n- Translational elongation on the ribosome consumes guanosine triphosphate (GTP) for each elongation cycle: $1$ GTP for aminoacyl-tRNA delivery and $1$ GTP for translocation per peptide bond formed, for a total of $2$ GTP per peptide bond. Count each GTP hydrolyzed to guanosine diphosphate (GDP) as $1$ high-energy phosphate equivalent.\n- Transcription by RNA polymerase consumes one nucleoside triphosphate (NTP) per phosphodiester bond formed. For an RNA of length $m$ nucleotides, there are $m-1$ such bonds; for each bond, cleavage of the incoming NTP to nucleoside monophosphate (NMP) plus PPi breaks one phosphoanhydride bond, and subsequent hydrolysis of PPi to two inorganic phosphates breaks a second high-energy bond. Thus, count $2$ high-energy phosphate equivalents per phosphodiester bond formed.\n- Ignore all costs of initiation, termination, proofreading, quality control, mRNA processing (such as capping and polyadenylation), degradation, ribosome assembly, and any other overhead not explicitly listed above.\n\nCompute the total number of high-energy phosphate equivalents consumed to produce exactly one $3000$-nucleotide mRNA and one $1000$-amino-acid protein from it. Report your final result as an exact integer count of high-energy phosphate equivalents (no units). No rounding is required, and no percentage notation is permitted.", "solution": "The problem statement is validated and found to be scientifically grounded, well-posed, and objective. It provides a set of clear, explicit assumptions and sufficient data to derive a unique, exact solution from first principles of molecular biology and biochemistry. The problem reduces to a straightforward calculation based on the provided bioenergetic costs for transcription and translation. We shall proceed with the derivation.\n\nThe total number of high-energy phosphate equivalents consumed, which we will denote as $E_{total}$, is the sum of the energy consumed during transcription ($E_{transcription}$) and translation ($E_{translation}$).\n$$E_{total} = E_{transcription} + E_{translation}$$\n\nFirst, we will calculate the energy cost of transcription.\nThe synthesis of a messenger ribonucleic acid (mRNA) molecule of length $m$ nucleotides requires the formation of $m-1$ phosphodiester bonds. The problem specifies that the length of the mRNA is $m = 3000$ nucleotides. Therefore, the number of phosphodiester bonds formed is $3000 - 1 = 2999$.\nAccording to the provided assumptions, the formation of each phosphodiester bond consumes $2$ high-energy phosphate equivalents. This accounts for the cleavage of a nucleoside triphosphate (NTP) to a nucleoside monophosphate (NMP) and inorganic pyrophosphate (PPi), followed by the hydrolysis of PPi.\nThe total energy cost for transcription is therefore:\n$$E_{transcription} = (m-1) \\times 2$$\nSubstituting the value $m=3000$:\n$$E_{transcription} = (3000 - 1) \\times 2 = 2999 \\times 2 = 5998$$\n\nNext, we calculate the energy cost of translation, $E_{translation}$. This process, under the given constraints, consists of two distinct energetic costs: the charging of transfer RNA (tRNA) molecules (aminoacylation), and the elongation of the polypeptide chain on the ribosome.\n$$E_{translation} = E_{aminoacylation} + E_{elongation}$$\n\nThe cost of aminoacylation, $E_{aminoacylation}$, is the energy required to attach each amino acid to its corresponding tRNA. The protein to be synthesized has a length of $n = 1000$ amino acids. Each of these $1000$ amino acids must be \"charged\" or activated. The problem states that charging one tRNA molecule consumes ATP, yielding AMP and PPi, which is equivalent to the hydrolysis of two phosphoanhydride bonds, or $2$ high-energy phosphate equivalents per amino acid.\nThe total cost for aminoacylation is:\n$$E_{aminoacylation} = n \\times 2$$\nSubstituting the value $n=1000$:\n$$E_{aminoacylation} = 1000 \\times 2 = 2000$$\n\nThe cost of elongation, $E_{elongation}$, is associated with the formation of peptide bonds. A protein of length $n$ amino acids contains $n-1$ peptide bonds. For a protein of $1000$ amino acids, this is $1000 - 1 = 999$ peptide bonds.\nThe problem states that each elongation cycle, which forms one peptide bond, consumes $2$ molecules of GTP. One GTP is used for the delivery of the aminoacyl-tRNA to the A-site of the ribosome, and a second GTP is used for the translocation of the ribosome along the mRNA. Each GTP hydrolyzed to GDP is counted as $1$ high-energy phosphate equivalent. Thus, the formation of one peptide bond costs $2$ high-energy phosphate equivalents.\nThe total cost for elongation is:\n$$E_{elongation} = (n-1) \\times 2$$\nSubstituting the value $n=1000$:\n$$E_{elongation} = (1000 - 1) \\times 2 = 999 \\times 2 = 1998$$\n\nFinally, we sum these individual costs to find the total energy consumption for this single round of gene expression.\n$$E_{total} = E_{transcription} + E_{aminoacylation} + E_{elongation}$$\n$$E_{total} = 5998 + 2000 + 1998$$\n$$E_{total} = 7998 + 1998 = 9996$$\n\nAlternatively, we can construct a general formula from the symbolic expressions:\n$$E_{total} = 2(m-1) + 2n + 2(n-1)$$\n$$E_{total} = 2m - 2 + 2n + 2n - 2$$\n$$E_{total} = 2m + 4n - 4$$\nSubstituting the given values $m=3000$ and $n=1000$:\n$$E_{total} = 2(3000) + 4(1000) - 4$$\n$$E_{total} = 6000 + 4000 - 4$$\n$$E_{total} = 10000 - 4 = 9996$$\nBoth methods yield the same result. The total number of high-energy phosphate equivalents consumed is $9996$.", "answer": "$$\\boxed{9996}$$", "id": "2842316"}, {"introduction": "Beyond the static genetic code lies the dynamic process of translation, where the speed of ribosome movement can be as important as the final amino acid sequence. This practice explores how \"codon usage bias\" can be harnessed as an engineering tool to control gene expression kinetically. You will design a genetic switch by strategically placing slow-translating codons, learning how to pace the ribosome to create a time-based regulatory mechanism [@problem_id:2074436].", "problem": "A team of synthetic biologists is designing a genetic switch in *Escherichia coli* to control the expression of a Green Fluorescent Protein (GFP). The switch's logic is embedded within the 5' untranslated region and a short leader peptide of the GFP messenger RNA (mRNA). The goal is to create a system that is OFF in a standard growth medium (Medium A) and ON in a specially supplemented medium (Medium B).\n\nThe regulatory mechanism relies on a \"kinetic trap\" involving three key components:\n1.  **Kinetic Switch Operator (KSO):** A sequence within the leader peptide region that, once fully transcribed, folds into a stable hairpin structure. The KSO sequence begins at codon position $M=50$ and has a length of $L_{KSO}=15$ codons. The folding process takes a characteristic time of $\\tau_{\\text{fold}} = 200$ ms.\n2.  **Repressor Protein (RepP):** A constitutively expressed protein that binds specifically to the folded KSO hairpin. This binding event irreversibly terminates translation. The characteristic time for RepP to find and bind to a fully formed KSO hairpin is $\\tau_{\\text{bind}} = 2500$ ms.\n3.  **Codon-Mediated Pacing:** The leader peptide coding sequence, which is $M-1=49$ codons long, is constructed using two types of codons: a fast-translating codon (FC) and a slow-translating codon (SC). Their translation times depend on the growth medium:\n    *   **Medium A (Standard):** $\\tau_{\\text{fast}} = 20$ ms/codon; $\\tau_{\\text{slow}} = 300$ ms/codon.\n    *   **Medium B (Supplemented):** $\\tau_{\\text{fast}} = 20$ ms/codon; $\\tau_{\\text{slow}} = 25$ ms/codon.\n\nThe switch's function is determined by a race: if the first ribosome translating the mRNA reaches the KSO at position $M$ *before* the RepP protein can bind to the folded KSO, the ribosome unwinds the hairpin and translation of the downstream GFP proceeds (ON state). If the RepP binds first, translation is blocked (OFF state).\n\nIn *E. coli*, transcription and translation are coupled. The RNA polymerase transcribes the gene at a constant rate, taking $\\tau_{\\text{transcription}} = 75$ ms to synthesize each codon. A ribosome can only translate a codon after it has been transcribed. Assume that translation initiation is instantaneous once the start codon is synthesized.\n\nYour task is to determine the correct placement of a contiguous block of $N=20$ slow codons (SC) within the 49-codon leader peptide. The remaining $49 - 20 = 29$ codons in the leader are fast codons (FC). Which of the following designs for the leader peptide results in a switch that is OFF in Medium A and ON in Medium B?\n\nA. The 20-codon SC block is placed at positions 1-20.\n\nB. The 20-codon SC block is placed at positions 15-34.\n\nC. The 20-codon SC block is placed at positions 30-49.\n\nD. It is not possible to construct such a switch with the given components and parameters.", "solution": "Define the per-codon transcription time as $\\tau_{\\text{tx}}=75$ ms. Let $\\tau_{\\text{fast}}$ and $\\tau_{\\text{slow}}$ be the per-codon translation times of FC and SC, respectively, which depend on the medium. Translation initiation is instantaneous once codon $1$ is transcribed.\n\nWith transcription-translation coupling, the completion time of translating codon $i$ satisfies the recurrence\n$$\nt_{i}^{\\text{end}}=\\max\\!\\big(t_{i-1}^{\\text{end}},\\,i\\,\\tau_{\\text{tx}}\\big)+\\tau_{i},\\quad t_{0}^{\\text{end}}=0,\n$$\nwhere $\\tau_{i}$ is the translation time for codon $i$. The time the ribosome first reaches the KSO at position $M=50$ is\n$$\na_{50}=\\max\\!\\big(t_{49}^{\\text{end}},\\,50\\,\\tau_{\\text{tx}}\\big).\n$$\nRepP can bind only after the KSO (codons $50$–$64$) is fully transcribed and folded. The KSO is fully transcribed at time\n$$\nt_{\\text{KSO,tx}}=(49+15)\\,\\tau_{\\text{tx}}=64\\,\\tau_{\\text{tx}},\n$$\nfolds by an additional $\\tau_{\\text{fold}}$, and RepP binding occurs after a further $\\tau_{\\text{bind}}$. Hence the characteristic binding time is\n$$\nt_{\\text{bind}}=64\\,\\tau_{\\text{tx}}+\\tau_{\\text{fold}}+\\tau_{\\text{bind}}.\n$$\nThe switch is ON if $a_{50}<t_{\\text{bind}}$ and OFF if $a_{50}>t_{\\text{bind}}$.\n\nCompute $t_{\\text{bind}}$ using the given parameters:\n$$\nt_{\\text{bind}}=64\\cdot 75+200+2500=4800+2700=7500\\ \\text{ms}.\n$$\n\nTo evaluate $t_{49}^{\\text{end}}$ with mixed FC/SC and coupling, define the lag relative to transcription,\n$$\nD_{i}\\equiv t_{i}^{\\text{end}}-i\\,\\tau_{\\text{tx}},\n$$\nwhich obeys\n$$\nD_{i}=\\max\\!\\big(D_{i-1}-\\tau_{\\text{tx}},\\,0\\big)+\\tau_{i},\\quad D_{0}=0.\n$$\n\nMedium A: $\\tau_{\\text{fast}}=20$ ms, $\\tau_{\\text{slow}}=300$ ms, $\\tau_{\\text{tx}}=75$ ms.\nFor FC: $D_{i}=\\max(D_{i-1}-75,0)+20$; for SC: $D_{i}=\\max(D_{i-1}-75,0)+300$.\n\nEach design has a single SC block of length $20$, with $k$ FC before and $r=49-20-k$ FC after:\n- After the initial $k$ FC (starting from $D_{0}=0\\le 75$), $D$ stabilizes at $20$ (transcription-limited).\n- Entering the SC block from $D\\le 75$, the first SC sets $D=300$; each of the remaining $19$ SC increases $D$ by $300-75=225$, yielding after the $20$-SC block:\n$$\nD_{\\text{after SC}}=300+19\\cdot 225=4575.\n$$\n- Each subsequent FC reduces $D$ by $75-20=55$ (while $D>75$). With $r\\le 29$, $D$ remains $>75$, so\n$$\nD_{49}=4575-55\\,r.\n$$\nTherefore\n$$\nt_{49}^{\\text{end}}=49\\cdot 75 + D_{49}=3675+4575-55\\,r=8250-55\\,r,\n$$\nand since $t_{49}^{\\text{end}}>50\\cdot 75=3750$ for all $r\\in[0,29]$, we have $a_{50}=t_{49}^{\\text{end}}$.\n\nEvaluate each option (noting $r$ is the number of FC after the SC block):\n- A: SC at $1$–$20$ gives $r=29$. Then $a_{50}=8250-55\\cdot 29=8250-1595=6655<7500$ ⇒ ON (not desired).\n- B: SC at $15$–$34$ gives $r=15$. Then $a_{50}=8250-55\\cdot 15=8250-825=7425<7500$ ⇒ ON (not desired).\n- C: SC at $30$–$49$ gives $r=0$. Then $a_{50}=8250>7500$ ⇒ OFF (desired for Medium A).\n\nMedium B: $\\tau_{\\text{fast}}=20$ ms, $\\tau_{\\text{slow}}=25$ ms, with both $\\le \\tau_{\\text{tx}}$.\nIf $\\tau_{i}\\le \\tau_{\\text{tx}}$ for all $i$, the recurrence simplifies to $a_{i}=i\\,\\tau_{\\text{tx}}$ and $t_{i}^{\\text{end}}=i\\,\\tau_{\\text{tx}}+\\tau_{i}$ for every $i$ (since $i\\,\\tau_{\\text{tx}}\\ge t_{i-1}^{\\text{end}}$). Thus\n$$\nt_{49}^{\\text{end}}=49\\,\\tau_{\\text{tx}}+\\tau_{49}=3675+\\tau_{49},\\quad\na_{50}=\\max\\!\\big(3675+\\tau_{49},\\,3750\\big)=3750,\n$$\nindependent of option (since $\\tau_{49}\\le 75$). Hence $a_{50}=3750<7500$ and the switch is ON in Medium B for A, B, and C.\n\nConclusion:\n- Medium A OFF and Medium B ON occurs only for option C (SC block at positions $30$–$49$).", "answer": "$$\\boxed{C}$$", "id": "2074436"}, {"introduction": "Many intricate biological phenomena, like the relationship between protein synthesis and a messenger's own stability, emerge from complex, coupled dynamics that are difficult to predict with simple equations. This advanced practice introduces computational modeling as a powerful tool for exploring such systems. You will use a stochastic simulation based on the Totally Asymmetric Simple Exclusion Process (TASEP) to model ribosome traffic, revealing how physical crowding on an mRNA can paradoxically protect it from degradation and alter its functional lifetime [@problem_id:2782553].", "problem": "You are to implement a mechanistic simulation that couples translation to messenger RNA (mRNA) decay in order to quantify how ribosome queueing alters mRNA stability. Use the central dogma of molecular biology as the foundational base: translation is the ribosome-mediated decoding of codons on an mRNA into a polypeptide, proceeding unidirectionally along the mRNA, while mRNA decay is executed by ribonucleases whose access is impeded by ribosome occupancy. The translation dynamics must be modeled as a Totally Asymmetric Simple Exclusion Process (TASEP), which is a continuous-time stochastic process with unidirectional moves and hard exclusion, and the mRNA decay must be modeled by a hazard (instantaneous decay rate) that monotonically decreases as a function of the average ribosome coverage (fraction of codons protected by ribosomes). Your task is to compute the effective mRNA lifetime from mechanistic first principles.\n\nModel specification to implement:\n- Lattice and particles:\n  - The mRNA comprises $L$ codon sites labeled $1,2,\\dots,L$.\n  - Each ribosome is an extended particle with footprint length $\\ell$ codons. A ribosome at head position $p$ ($1 \\le p \\le L - \\ell + 1$) occupies codons $p, p+1, \\dots, p+\\ell-1$.\n- Kinetics:\n  - Initiation occurs at rate $\\alpha$ (in $\\mathrm{s}^{-1}$) if and only if codons $1$ through $\\ell$ are empty; initiation places a ribosome with head at $p=1$.\n  - Elongation is site-dependent: the per-codon elongation rate array $\\{k_i\\}_{i=1}^L$ (in $\\mathrm{s}^{-1}$) assigns a rate to each codon. A ribosome with head at $p$ attempts to advance its head to $p+1$ at rate $k_{p+\\ell-1}$ provided that codon $p+\\ell$ is empty (hard exclusion). If $p = L - \\ell + 1$, an attempted advance corresponds to termination and the ribosome exits at rate $k_L$, vacating its entire footprint.\n  - All reactions occur in continuous time and are executed one at a time according to the Gillespie stochastic simulation algorithm: at any state, enumerate all currently enabled events and their rates, draw the next reaction time as an exponential random variable with mean equal to the inverse of the total rate, and select which event fires proportional to its rate.\n- Coverage:\n  - Define the instantaneous coverage $\\rho(t)$ as the fraction of codons currently occupied by any ribosome at time $t$, i.e., the number of occupied codons divided by $L$.\n  - Define the time-average coverage over a measurement window as $\\bar{\\rho} = \\frac{1}{T_{\\mathrm{meas}}} \\int_{t_0}^{t_0 + T_{\\mathrm{meas}}} \\rho(t)\\, dt$, where $t_0$ is a warm-up time to allow the TASEP to approach stationarity, and $T_{\\mathrm{meas}}$ is the duration of the measurement window.\n- Decay coupling and lifetime:\n  - Let the baseline (unprotected) decay rate be $\\delta_0$ (in $\\mathrm{s}^{-1}$). Couple decay to coverage by the monotone, strictly positive mapping\n    $$ \\delta(\\bar{\\rho}) = \\delta_0 \\exp(-\\beta \\bar{\\rho}), $$\n    where $\\beta \\ge 0$ is a dimensionless parameter controlling the strength of ribosome protection.\n  - Under the assumption that the coverage process reaches a stationary regime on a timescale fast compared to mRNA decay, treat $\\delta(\\bar{\\rho})$ as constant over mRNA lifetime. The effective mRNA lifetime is then\n    $$ \\tau = \\frac{1}{\\delta(\\bar{\\rho})}. $$\n  - Report $\\tau$ in seconds, rounded to $3$ decimal places.\n- Simulation protocol and units:\n  - Use seconds for time and $\\mathrm{s}^{-1}$ for all rates.\n  - Use a continuous-time Gillespie simulation of the extended-particle TASEP to estimate $\\bar{\\rho}$ via time averaging. Use a warm-up of $T_{\\mathrm{warm}} = 40$ seconds followed by a measurement window of $T_{\\mathrm{meas}} = 160$ seconds (so total simulated time $T_{\\mathrm{total}} = 200$ seconds). If no events are possible (total rate $0$), the system remains static thereafter.\n  - For reproducibility, use a fixed random seed $0$.\n- Output format:\n  - Your program should produce a single line of output containing the lifetimes for the test suite below as a comma-separated list enclosed in square brackets, in seconds, each rounded to $3$ decimal places. For example, an output with three results should look like \"[x1,x2,x3]\" where $x_1$, $x_2$, and $x_3$ are the rounded lifetimes.\n\nTest suite to implement and evaluate:\nAll cases use $L = 60$ codons and ribosome footprint $\\ell = 10$ codons. In each case, define $k_i$ (in $\\mathrm{s}^{-1}$) as follows: unless otherwise specified, $k_i = 10$ for all $i$. In cases specifying a slow region, set $k_i = 1$ for codon indices $i \\in \\{25,26,27,28,29,30\\}$ (these indices are $1$-based).\n- Case $1$ (happy path, uniform elongation, moderate initiation): $\\alpha = 0.6$, $k_i = 10$ for all $i$, $\\delta_0 = 1/300$, $\\beta = 3.0$.\n- Case $2$ (queueing due to slow codons, high initiation): $\\alpha = 1.0$, $k_i = 10$ except $k_i = 1$ for $i \\in \\{25,\\dots,30\\}$, $\\delta_0 = 1/300$, $\\beta = 3.0$.\n- Case $3$ (boundary, no initiation): $\\alpha = 0.0$, $k_i = 10$ for all $i$, $\\delta_0 = 1/300$, $\\beta = 3.0$.\n- Case $4$ (strong decay sensitivity under queueing): same $k_i$ and $\\alpha$ as Case $2$, with $\\delta_0 = 1/300$, $\\beta = 8.0$.\n- Case $5$ (weak decay sensitivity under queueing): same $k_i$ and $\\alpha$ as Case $2$, with $\\delta_0 = 1/300$, $\\beta = 0.5$.\n\nDeliverable:\n- Implement the above, compute $\\bar{\\rho}$ by time averaging over $[T_{\\mathrm{warm}}, T_{\\mathrm{warm}} + T_{\\mathrm{meas}}]$, compute $\\delta(\\bar{\\rho})$ and $\\tau = 1/\\delta(\\bar{\\rho})$ for each case, and print a single line containing $5$ lifetimes in seconds rounded to $3$ decimal places, as a list in the format \"[v1,v2,v3,v4,v5]\".", "solution": "The problem as stated is valid. It is scientifically grounded, well-posed, and all parameters and kinetic rules for the simulation are defined unambiguously. The model combines the Totally Asymmetric Simple Exclusion Process (TASEP), a canonical model in statistical physics for transport phenomena, with a biologically motivated mechanism for mRNA decay modulation by ribosome protection. The task is to compute a derived quantity, the effective mRNA lifetime, through direct stochastic simulation. The methodology follows from the problem specification.\n\nThe core of the solution is the implementation of the Gillespie stochastic simulation algorithm (SSA) for the specified continuous-time Markov process. The state of the system at any time $t$ is fully described by the set of positions of the ribosomes on the mRNA lattice. Computationally, we represent this state using a sorted list of integer head positions $\\{p_j\\}$ for each ribosome $j$ on the lattice. This representation is efficient for identifying possible kinetic events.\n\nThe simulation proceeds by iteratively executing kinetic events. At each step, we first enumerate all possible events that can occur from the current state and their associated rates:\n- **Initiation**: A new ribosome can initiate translation and be placed with its head at position $p=1$. This event is possible if and only if the entire footprint required, codons $1$ through $\\ell$, is unoccupied. The rate of this event, if it is possible, is the constant initiation rate $\\alpha$.\n- **Advancement**: Each ribosome $j$ already on the lattice, located at head position $p_j$, may advance to $p_j+1$. This event represents one step of elongation or, if $p_j = L - \\ell + 1$, termination. The event is possible only if there is no steric hindrance. For an extended particle of footprint $\\ell$, a move from $p_j$ to $p_j+1$ requires that the site $p_j+\\ell$ is unoccupied. The next ribosome in the sequence is at position $p_{j+1}$, so this condition is equivalent to $p_{j+1} > p_j+\\ell$. For termination, the ribosome at $p_j = L - \\ell+1$ moves off the lattice, so its destination is always considered free. The rate of advancement from position $p_j$ is given by the site-dependent elongation rate $k_{p_j+\\ell-1}$.\n\nOnce the list of all possible events and their rates $\\{r_i\\}$ is compiled, the Gillespie algorithm proceeds as follows:\n$1$. The total rate of any event occurring is calculated: $R_{\\text{total}} = \\sum_i r_i$. If $R_{\\text{total}} = 0$, the system has reached an absorbing state, and the simulation time is advanced to the end of the measurement period.\n$2$. The time until the next event, $\\Delta t$, is drawn from an exponential distribution with mean $1/R_{\\text{total}}$, i.e., $\\Delta t = -(1/R_{\\text{total}}) \\ln(U_1)$, where $U_1$ is a random variate from a uniform distribution on $(0,1)$.\n$3$. An event $j$ is chosen to occur with probability $r_j / R_{\\text{total}}$. This is achieved by drawing a second uniform random variate $U_2$ and selecting the event $j$ that satisfies $\\sum_{i=1}^{j-1} r_i < U_2 R_{\\text{total}} \\le \\sum_{i=1}^{j} r_i$.\n$4$. The system state is updated according to the selected event (a ribosome is added, moved, or removed), and the simulation time is advanced by $\\Delta t$.\n\nTo compute the time-average coverage $\\bar{\\rho}$, we must evaluate the integral $\\bar{\\rho} = \\frac{1}{T_{\\mathrm{meas}}} \\int_{T_{\\mathrm{warm}}}^{T_{\\mathrm{warm}} + T_{\\mathrm{meas}}} \\rho(t)\\, dt$. Numerically, this is done by accumulating the product of the instantaneous coverage $\\rho(t)$ and the duration $\\Delta t$ for which the system remains in that state. The instantaneous coverage is $\\rho(t) = N(t) \\cdot \\ell / L$, where $N(t)$ is the number of ribosomes on the mRNA. During the simulation loop, for each time step $\\Delta t$ occurring between time $t$ and $t+\\Delta t$, we add the contribution $\\rho(t) \\cdot \\Delta t'$ to a running total, where $\\Delta t'$ is the portion of the $[t, t+\\Delta t)$ interval that falls within the measurement window $[T_{\\mathrm{warm}}, T_{\\mathrm{warm}}+T_{\\mathrm{meas}}]$.\n\nAfter the simulation completes at total time $T_{\\mathrm{total}} = T_{\\mathrm{warm}} + T_{\\mathrm{meas}}$, the time-averaged coverage is calculated as $\\bar{\\rho} = (\\text{accumulated integral}) / T_{\\mathrm{meas}}$.\n\nFinally, the effective mRNA lifetime $\\tau$ is determined from this average coverage using the provided formula, which models the protective effect of ribosomes against degradation by ribonucleases:\n$$ \\tau = \\frac{1}{\\delta(\\bar{\\rho})} = \\frac{1}{\\delta_0 \\exp(-\\beta \\bar{\\rho})} $$\nThe entire procedure is repeated for each set of parameters specified in the test suite, using a fixed random seed for reproducibility.", "answer": "```python\nimport numpy as np\nimport math\n\ndef run_simulation(L, l, alpha, k, delta0, beta, Twarm, Tmeas, seed):\n    \"\"\"\n    Runs a single Gillespie simulation of the TASEP model for ribosome traffic.\n\n    Args:\n        L (int): Length of the mRNA lattice in codons.\n        l (int): Footprint of a ribosome in codons.\n        alpha (float): Initiation rate (s^-1).\n        k (list[float]): List of per-codon elongation rates (s^-1).\n        delta0 (float): Baseline mRNA decay rate (s^-1).\n        beta (float): Dimensionless parameter for decay protection.\n        Twarm (float): Warm-up time (s).\n        Tmeas (float): Measurement time (s).\n        seed (int): Seed for the random number generator.\n    \n    Returns:\n        float: The calculated effective mRNA lifetime (tau).\n    \"\"\"\n    rng = np.random.default_rng(seed)\n    T_total = Twarm + Tmeas\n\n    time = 0.0\n    ribosome_heads = []  # Stores head positions, kept sorted\n    num_occupied_codons = 0\n    \n    # Using 1-based indexing for k to match problem statement's math notation\n    # k_rates[i] gives the rate for codon i\n    k_rates = np.array([0.0] + k) \n\n    # This stores the integral of rho(t) over the measurement window\n    integrated_rho_Tmeas = 0.0\n\n    while time < T_total:\n        events = []\n        rates = []\n\n        # 1. Enumerate all possible events and their rates\n        \n        # Event: Initiation\n        # Possible if codons 1..l are empty.\n        # This is true if there are no ribosomes, or the first one is at a position > l.\n        can_initiate = not ribosome_heads or ribosome_heads[0] > l\n        if can_initiate and alpha > 0:\n            events.append({'type': 'init', 'data': None})\n            rates.append(alpha)\n\n        # Event: Elongation/Termination for each ribosome\n        for i, p in enumerate(ribosome_heads):\n            # The rate of advancement from position p is determined by codon p + l - 1\n            rate = k_rates[p + l - 1]\n\n            # Hard exclusion rule: check if space ahead is free\n            is_space_ahead = True\n            # Check for collision with the next ribosome\n            if i + 1 < len(ribosome_heads):\n                p_next = ribosome_heads[i+1]\n                # Site p+l is occupied if p_next <= p+l.\n                if p_next <= p + l:\n                    is_space_ahead = False\n            \n            if is_space_ahead and rate > 0:\n                event_type = 'term' if p == L - l + 1 else 'elong'\n                events.append({'type': event_type, 'data': i}) # data is the index of the ribosome\n                rates.append(rate)\n\n        total_rate = sum(rates)\n\n        # 2. Calculate time step for the Gillespie algorithm\n        current_rho = num_occupied_codons / L if L > 0 else 0\n        \n        if total_rate == 0:\n            # Absorbing state, no more events can occur. Advance time to end.\n            dt = T_total - time\n        else:\n            dt = rng.exponential(scale=1.0 / total_rate)\n\n        # 3. Accumulate coverage integral for the measurement window\n        integration_start = max(time, Twarm)\n        integration_end = min(time + dt, T_total)\n        interval_in_meas_window = max(0, integration_end - integration_start)\n        \n        if interval_in_meas_window > 0:\n            integrated_rho_Tmeas += current_rho * interval_in_meas_window\n\n        # 4. Advance time. If past T_total, exit loop.\n        time += dt\n        if time >= T_total:\n            break\n\n        # 5. Select and execute a single event\n        if total_rate > 0:\n            # Choose event proportional to its rate\n            norm_rates = np.array(rates) / total_rate\n            chosen_idx = rng.choice(len(events), p=norm_rates)\n            event = events[chosen_idx]\n            event_type, data = event['type'], event['data']\n\n            if event_type == 'init':\n                p_new = 1\n                ribosome_heads.insert(0, p_new) # keeps the list sorted\n                num_occupied_codons += l\n            \n            elif event_type == 'elong':\n                rib_idx = data\n                ribosome_heads[rib_idx] += 1\n                # num_occupied_codons does not change\n            \n            elif event_type == 'term':\n                rib_idx = data\n                ribosome_heads.pop(rib_idx)\n                num_occupied_codons -= l\n\n    # After simulation, calculate final results from observables\n    if Tmeas > 0:\n        avg_rho = integrated_rho_Tmeas / Tmeas\n    else:\n        avg_rho = 0.0\n\n    if delta0 > 0:\n        delta_eff = delta0 * math.exp(-beta * avg_rho)\n        tau = 1.0 / delta_eff\n    else:\n        tau = float('inf')\n\n    return tau\n\ndef solve():\n    # Define the test cases from the problem statement.\n    L = 60\n    l = 10\n    Twarm = 40.0\n    Tmeas = 160.0\n    seed = 0\n\n    k_uniform = [10.0] * L\n    \n    k_slow_region = [10.0] * L\n    # Slow region from codon 25 to 30 (1-based index)\n    for i in range(25, 31):\n        k_slow_region[i-1] = 1.0\n\n    test_cases = [\n        # Case 1: uniform elongation, moderate initiation\n        {'alpha': 0.6, 'k': k_uniform, 'delta0': 1/300.0, 'beta': 3.0},\n        # Case 2: queueing due to slow codons, high initiation\n        {'alpha': 1.0, 'k': k_slow_region, 'delta0': 1/300.0, 'beta': 3.0},\n        # Case 3: no initiation\n        {'alpha': 0.0, 'k': k_uniform, 'delta0': 1/300.0, 'beta': 3.0},\n        # Case 4: strong decay sensitivity under queueing\n        {'alpha': 1.0, 'k': k_slow_region, 'delta0': 1/300.0, 'beta': 8.0},\n        # Case 5: weak decay sensitivity under queueing\n        {'alpha': 1.0, 'k': k_slow_region, 'delta0': 1/300.0, 'beta': 0.5},\n    ]\n\n    results = []\n    for case in test_cases:\n        tau = run_simulation(L, l, case['alpha'], case['k'], case['delta0'], case['beta'], Twarm, Tmeas, seed)\n        results.append(f\"{tau:.3f}\")\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\n# Execute the solution\nsolve()\n```", "id": "2782553"}]}