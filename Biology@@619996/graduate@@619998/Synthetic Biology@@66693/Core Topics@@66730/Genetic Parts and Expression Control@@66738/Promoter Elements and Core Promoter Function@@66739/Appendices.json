{"hands_on_practices": [{"introduction": "Quantifying promoter function begins with understanding its binding affinity for RNA polymerase. A powerful, first-principles approach is to use a thermodynamic model where the total binding free energy, $\\Delta G$, is the sum of contributions from individual promoter elements. This exercise [@problem_id:2764635] provides practice with this additive energy model, a foundational concept for rationally designing and predicting the strength of synthetic promoters based on their modular components.", "problem": "In a thermodynamic occupancy model of transcription initiation for a bacterial promoter, the binding of RNA polymerase (RNAP) is treated as a reversible equilibrium process in which the statistical weight of the RNAP-bound state is governed by Boltzmann statistics. When distinct promoter contacts are independent, the contribution of each contact to the free energy is extensive. Consider a promoter architecture with four contributions to the RNAP binding free energy: the $-10$ element, the $-35$ element, the spacer length/geometry between $-10$ and $-35$, and the Upstream Promoter (UP) element. A reference promoter lacking all four features is used to define the zero of the binding free energy scale. For a particular engineered promoter, the measured per-feature contributions to the RNAP binding free energy (relative to the reference) are:\n- $-10$ element: $-4\\,k_{\\mathrm{B}}T$\n- $-35$ element: $-3\\,k_{\\mathrm{B}}T$\n- Spacer mismatch penalty: $+2\\,k_{\\mathrm{B}}T$\n- Upstream Promoter (UP) element: $-1\\,k_{\\mathrm{B}}T$\nHere $k_{\\mathrm{B}}$ is the Boltzmann constant and $T$ is the absolute temperature. Under the standard independence assumption for these contacts, what is the net change in RNAP binding free energy for the engineered promoter relative to the reference? Express your answer as a single signed number in units of $k_{\\mathrm{B}}T$ (do not include units in your final entry). Provide the exact value; no rounding is required.", "solution": "The fundamental base is the statistical mechanics of binding equilibria. For a macromolecule binding to a site, the statistical weight of a microstate with energy $E$ is proportional to $\\exp(-\\beta E)$, where $\\beta = 1/(k_{\\mathrm{B}}T)$. The binding free energy change $\\Delta G$ defines the equilibrium constant via $\\Delta G = -k_{\\mathrm{B}}T \\ln K$, and for independent subsystems, the total partition function factorizes. \n\nSpecifically, if distinct, non-interacting contacts each contribute a free energy change $\\Delta G_{i}$ upon formation, then the total statistical weight of the bound complex relative to the unbound state is the product of the weights from each contact:\n$$\nw_{\\text{bound}} = \\prod_{i} \\exp\\!\\left(-\\beta \\Delta G_{i}\\right) = \\exp\\!\\left(-\\beta \\sum_{i} \\Delta G_{i}\\right).\n$$\nTaking $-k_{\\mathrm{B}}T \\ln(\\cdot)$ yields the total free energy change:\n$$\n\\Delta G_{\\text{total}} = \\sum_{i} \\Delta G_{i}.\n$$\nThus, under the independence assumption, free energies add.\n\nIn this problem, the per-feature contributions are already given as free energies in units of $k_{\\mathrm{B}}T$:\n- $-10$ element: $\\Delta G_{-10} = -4\\,k_{\\mathrm{B}}T$,\n- $-35$ element: $\\Delta G_{-35} = -3\\,k_{\\mathrm{B}}T$,\n- Spacer mismatch penalty: $\\Delta G_{\\text{spacer}} = +2\\,k_{\\mathrm{B}}T$,\n- Upstream Promoter (UP) element: $\\Delta G_{\\text{UP}} = -1\\,k_{\\mathrm{B}}T$.\n\nThe net change in RNAP binding free energy relative to the reference is\n$$\n\\Delta G_{\\text{total}} \\;=\\; \\Delta G_{-10} + \\Delta G_{-35} + \\Delta G_{\\text{spacer}} + \\Delta G_{\\text{UP}}\n\\;=\\; (-4 - 3 + 2 - 1)\\,k_{\\mathrm{B}}T\n\\;=\\; -6\\,k_{\\mathrm{B}}T.\n$$\nThe problem requests the answer as a single signed number in units of $k_{\\mathrm{B}}T$ (omitting units in the final entry), so the required numerical value is $-6$.", "answer": "$$\\boxed{-6}$$", "id": "2764635"}, {"introduction": "While thermodynamic stability of the RNAP-promoter complex is essential, promoter output is ultimately a rate. This rate of transcription initiation is not determined by a single step, but by a sequence of kinetic events including binding, isomerization to an open complex, and promoter escape. This practice [@problem_id:2764691] delves into a kinetic model of this process, challenging you to derive the effective initiation rate from the underlying rate constants and connecting the microscopic dynamics of the promoter to its macroscopic function.", "problem": "A synthetic biologist is quantifying how core promoter elements modulate the kinetics of transcription initiation by Ribonucleic Acid (RNA) polymerase (RNAP) on Deoxyribonucleic Acid (DNA). Consider a minimal, mechanistically interpretable model of the core promoter in which the promoter cycles through three kinetically defined states during initiation:\n- A free promoter state, denoted by $F$.\n- A closed complex in which RNAP is bound but the DNA is not yet unwound, denoted by $C$.\n- An open complex in which the DNA is unwound and the complex is competent for promoter escape, denoted by $O$.\n\nAssume the following transitions:\n- Binding: $F \\xrightarrow{k_{\\mathrm{on}}[P]} C$, where $[P]$ is the RNAP concentration and $k_{\\mathrm{on}}$ is the bimolecular on-rate. Under pseudo-first-order conditions, $k_{\\mathrm{on}}[P]$ is an effective first-order rate.\n- Dissociation (from $C$): $C \\xrightarrow{k_{\\mathrm{off}}} F$.\n- Isomerization to the open complex: $C \\xrightarrow{k_{\\mathrm{iso}}} O$.\n- Promoter escape (productive initiation): $O \\xrightarrow{k_{\\mathrm{esc}}} F + \\text{transcript}$.\n\nAssume isomerization is effectively irreversible on the timescale of interest (no back reaction $O \\to C$), and that each promoter escape produces one initiated transcript and returns the promoter to $F$. The effective initiation rate $r$ is defined as the reciprocal of the mean waiting time from $F$ to the next promoter escape event at stationarity.\n\nStarting from first principles of chemical kinetics and mean first-passage times in continuous-time Markov processes, derive an expression for $r$ in terms of $k_{\\mathrm{on}}[P]$, $k_{\\mathrm{off}}$, $k_{\\mathrm{iso}}$, and $k_{\\mathrm{esc}}$. Then, using $k_{\\mathrm{on}}[P]=1\\,\\mathrm{s}^{-1}$, $k_{\\mathrm{off}}=0.5\\,\\mathrm{s}^{-1}$, $k_{\\mathrm{iso}}=0.1\\,\\mathrm{s}^{-1}$, and $k_{\\mathrm{esc}}=0.2\\,\\mathrm{s}^{-1}$, compute the numerical value of $r$.\n\nExpress your final numerical answer as an exact fraction in $\\mathrm{s}^{-1}$ (no rounding required). Do not include the unit in your final boxed answer.", "solution": "The problem asks us to calculate the effective transcription initiation rate, $r$, for a three-state kinetic model of promoter function. The rate $r$ is defined as the reciprocal of the mean first-passage time (MFPT), $\\tau_F$, for a promoter starting in the free state ($F$) to undergo a promoter escape event. The system transitions through a closed complex ($C$) and an open complex ($O$) before resetting to $F$. This is a classic MFPT problem for a continuous-time Markov process.\n\nLet $\\tau_i$ be the MFPT to the escape event, given the system starts in state $i \\in \\{F, C, O\\}$. We can establish a system of linear equations for these mean times based on the principles of continuous-time Markov processes. The mean time to absorption from a state $i$ is the sum of the average time spent in state $i$ before any transition, plus the weighted average of the MFPTs from the states to which it can transition. The average time spent in state $i$ is the reciprocal of the sum of all exit rates from $i$.\n\n1.  For state $F$: The only exit is to state $C$ with rate $k_{\\mathrm{on}}[P]$. The average time spent in $F$ is $1/(k_{\\mathrm{on}}[P])$. After this time, the system is in state $C$. Thus, the MFPT from $F$ is:\n    $$ \\tau_F = \\frac{1}{k_{\\mathrm{on}}[P]} + \\tau_C $$\n\n2.  For state $C$: There are two exits: to $F$ with rate $k_{\\mathrm{off}}$ and to $O$ with rate $k_{\\mathrm{iso}}$. The total exit rate is $k_{\\mathrm{off}} + k_{\\mathrm{iso}}$. The average time spent in $C$ is $1/(k_{\\mathrm{off}} + k_{\\mathrm{iso}})$. From $C$, the process transitions to state $F$ with probability $P_{C \\to F} = \\frac{k_{\\mathrm{off}}}{k_{\\mathrm{off}} + k_{\\mathrm{iso}}}$ and to state $O$ with probability $P_{C \\to O} = \\frac{k_{\\mathrm{iso}}}{k_{\\mathrm{off}} + k_{\\mathrm{iso}}}$. The equation for $\\tau_C$ is:\n    $$ \\tau_C = \\frac{1}{k_{\\mathrm{off}} + k_{\\mathrm{iso}}} + \\left(\\frac{k_{\\mathrm{off}}}{k_{\\mathrm{off}} + k_{\\mathrm{iso}}}\\right)\\tau_F + \\left(\\frac{k_{\\mathrm{iso}}}{k_{\\mathrm{off}} + k_{\\mathrm{iso}}}\\right)\\tau_O $$\n\n3.  For state $O$: The only exit is promoter escape with rate $k_{\\mathrm{esc}}$. This is the target \"absorption\" event. The mean time to escape from state $O$ is simply the mean lifetime of this state.\n    $$ \\tau_O = \\frac{1}{k_{\\mathrm{esc}}} $$\n\nWe now have a system of three linear equations. Our goal is to solve for $\\tau_F$.\nFirst, substitute the expression for $\\tau_O$ into the equation for $\\tau_C$:\n$$ \\tau_C = \\frac{1}{k_{\\mathrm{off}} + k_{\\mathrm{iso}}} + \\frac{k_{\\mathrm{off}}}{k_{\\mathrm{off}} + k_{\\mathrm{iso}}}\\tau_F + \\frac{k_{\\mathrm{iso}}}{(k_{\\mathrm{off}} + k_{\\mathrm{iso}})k_{\\mathrm{esc}}} $$\n\nNext, substitute this expression for $\\tau_C$ into the equation for $\\tau_F$:\n$$ \\tau_F = \\frac{1}{k_{\\mathrm{on}}[P]} + \\left( \\frac{1}{k_{\\mathrm{off}} + k_{\\mathrm{iso}}} + \\frac{k_{\\mathrm{off}}}{k_{\\mathrm{off}} + k_{\\mathrm{iso}}}\\tau_F + \\frac{k_{\\mathrm{iso}}}{(k_{\\mathrm{off}} + k_{\\mathrm{iso}})k_{\\mathrm{esc}}} \\right) $$\n\nNow, we must algebraically isolate $\\tau_F$:\n$$ \\tau_F - \\frac{k_{\\mathrm{off}}}{k_{\\mathrm{off}} + k_{\\mathrm{iso}}}\\tau_F = \\frac{1}{k_{\\mathrm{on}}[P]} + \\frac{1}{k_{\\mathrm{off}} + k_{\\mathrm{iso}}} + \\frac{k_{\\mathrm{iso}}}{(k_{\\mathrm{off}} + k_{\\mathrm{iso}})k_{\\mathrm{esc}}} $$\n\nFactor out $\\tau_F$ on the left side:\n$$ \\tau_F \\left( 1 - \\frac{k_{\\mathrm{off}}}{k_{\\mathrm{off}} + k_{\\mathrm{iso}}} \\right) = \\tau_F \\left( \\frac{k_{\\mathrm{off}} + k_{\\mathrm{iso}} - k_{\\mathrm{off}}}{k_{\\mathrm{off}} + k_{\\mathrm{iso}}} \\right) = \\tau_F \\left( \\frac{k_{\\mathrm{iso}}}{k_{\\mathrm{off}} + k_{\\mathrm{iso}}} \\right) $$\n\nThus, the equation becomes:\n$$ \\tau_F \\left( \\frac{k_{\\mathrm{iso}}}{k_{\\mathrm{off}} + k_{\\mathrm{iso}}} \\right) = \\frac{1}{k_{\\mathrm{on}}[P]} + \\frac{1}{k_{\\mathrm{off}} + k_{\\mathrm{iso}}} + \\frac{k_{\\mathrm{iso}}}{(k_{\\mathrm{off}} + k_{\\mathrm{iso}})k_{\\mathrm{esc}}} $$\n\nTo solve for $\\tau_F$, multiply both sides by $\\frac{k_{\\mathrm{off}} + k_{\\mathrm{iso}}}{k_{\\mathrm{iso}}}$:\n$$ \\tau_F = \\frac{k_{\\mathrm{off}} + k_{\\mathrm{iso}}}{k_{\\mathrm{iso}}} \\left( \\frac{1}{k_{\\mathrm{on}}[P]} + \\frac{1}{k_{\\mathrm{off}} + k_{\\mathrm{iso}}} + \\frac{k_{\\mathrm{iso}}}{(k_{\\mathrm{off}} + k_{\\mathrm{iso}})k_{\\mathrm{esc}}} \\right) $$\nDistributing this term yields:\n$$ \\tau_F = \\frac{k_{\\mathrm{off}} + k_{\\mathrm{iso}}}{k_{\\mathrm{on}}[P]k_{\\mathrm{iso}}} + \\frac{1}{k_{\\mathrm{iso}}} + \\frac{1}{k_{\\mathrm{esc}}} $$\n\nThis expression for $\\tau_F$ is the mean time from the promoter being in state $F$ until the first transcript is produced. The effective initiation rate $r$ is the reciprocal of this time.\n\nNow, we compute the numerical value using the provided data:\n$k_{\\mathrm{on}}[P] = 1\\,\\mathrm{s}^{-1}$\n$k_{\\mathrm{off}} = 0.5\\,\\mathrm{s}^{-1}$\n$k_{\\mathrm{iso}} = 0.1\\,\\mathrm{s}^{-1}$\n$k_{\\mathrm{esc}} = 0.2\\,\\mathrm{s}^{-1}$\n\nWe calculate $\\tau_F$ first:\n$$ \\tau_F = \\frac{k_{\\mathrm{off}} + k_{\\mathrm{iso}}}{k_{\\mathrm{on}}[P]k_{\\mathrm{iso}}} + \\frac{1}{k_{\\mathrm{iso}}} + \\frac{1}{k_{\\mathrm{esc}}} $$\n$$ \\tau_F = \\frac{0.5 + 0.1}{1 \\times 0.1} + \\frac{1}{0.1} + \\frac{1}{0.2} $$\n$$ \\tau_F = \\frac{0.6}{0.1} + 10 + 5 $$\n$$ \\tau_F = 6 + 10 + 5 = 21\\,\\mathrm{s} $$\n\nThe effective initiation rate $r$ is the reciprocal of $\\tau_F$:\n$$ r = \\frac{1}{\\tau_F} = \\frac{1}{21}\\,\\mathrm{s}^{-1} $$\nThe problem requires an exact fraction. The result is already in this form.", "answer": "$$\\boxed{\\frac{1}{21}}$$", "id": "2764691"}, {"introduction": "The theoretical models of intrinsic promoter strength we've explored must be validated with experimental data. However, in practice, the measured output of a synthetic promoter is often heavily influenced by its genomic location—a phenomenon known as a 'context effect'. This advanced computational practice [@problem_id:2764696] introduces a common and powerful statistical framework to deconvolve the intrinsic strength of a promoter from these position-dependent effects, a critical skill for interpreting high-throughput reporter assays in synthetic biology.", "problem": "Design and implement a program that, given measurements of transcriptional output for a set of promoters integrated at multiple independent genomic insertion sites, deconvolves intrinsic promoter strength from genomic context effects using multiple independent genomic insertion sites. Start from the following fundamental base: the Central Dogma of Molecular Biology (deoxyribonucleic acid to ribonucleic acid to protein) and the widely used observation that, in steady-state reporter assays where messenger ribonucleic acid is rapidly translated and degraded on timescales longer than transcription initiation, the steady-state reporter signal is proportional to the transcription initiation rate. In synthetic biology, for core promoter function, a standard and well-tested assumption is that intrinsic promoter strength and genomic context contribute multiplicatively to transcription rate, so that, after a logarithmic transformation, contributions are additive. Under this base, the measured log-expression for promoter $i$ at insertion site $j$ in replicate $r$ can be modeled as the sum of an intrinsic promoter term, a site context term, and a mean-zero residual.\n\nYour task is to, for each test case below, recover the intrinsic promoter strengths and site effects from synthetic datasets constructed from known ground truths. Use only linear algebraic reasoning and implement an estimator that minimizes the residual sum of squares subject to identifiability constraints.\n\nMathematical model and identifiability:\n- Let there be $P$ promoters, $S$ sites, and $R$ replicates per promoter-site combination.\n- Let $\\alpha_i$ be the intrinsic strength of promoter $i \\in \\{0,1,\\ldots,P-1\\}$ on the log scale.\n- Let $\\beta_j$ be the site effect of site $j \\in \\{0,1,\\ldots,S-1\\}$ on the log scale.\n- Let $\\varepsilon_{i,j,r}$ be a deterministic mean-zero residual constructed as specified for each test case.\n- The measured log-expression is\n$$\ny_{i,j,r} = \\alpha_i + \\beta_j + \\varepsilon_{i,j,r}.\n$$\n- Impose the identifiability constraints\n$$\n\\sum_{i=0}^{P-1} \\alpha_i = 0, \\qquad \\sum_{j=0}^{S-1} \\beta_j = 0.\n$$\n- Estimate $(\\alpha_i)_{i=0}^{P-1}$ and $(\\beta_j)_{j=0}^{S-1}$ by minimizing\n$$\n\\sum_{i=0}^{P-1} \\sum_{j=0}^{S-1} \\sum_{r=0}^{R-1} \\left(y_{i,j,r} - \\alpha_i - \\beta_j\\right)^2\n$$\nsubject to the two linear equality constraints above.\n\nTest suite (all values are unitless log-expression units):\n\nCase A (general, balanced):\n- $P = 5$, $S = 4$, $R = 2$.\n- Ground-truth intrinsic promoter vector\n$$\n\\boldsymbol{\\alpha}^{\\star} = (-0.40, -0.10, 0.00, 0.20, 0.30),\n$$\nwhich satisfies $\\sum_i \\alpha_i^{\\star} = 0$.\n- Ground-truth site context vector\n$$\n\\boldsymbol{\\beta}^{\\star} = (-0.30, -0.10, 0.15, 0.25),\n$$\nwhich satisfies $\\sum_j \\beta_j^{\\star} = 0$.\n- Residuals are defined deterministically by\n$$\n\\varepsilon_{i,j,r} = \\delta \\cdot (-1)^r \\cdot \\frac{i - j}{P+S}, \\quad \\delta = 0.02,\n$$\nfor $i \\in \\{0,1,2,3,4\\}$, $j \\in \\{0,1,2,3\\}$, $r \\in \\{0,1\\}$.\n\nCase B (boundary: no site effect):\n- $P = 4$, $S = 3$, $R = 3$.\n- Ground-truth intrinsic promoter vector\n$$\n\\boldsymbol{\\alpha}^{\\star} = (-0.30, -0.05, 0.10, 0.25), \\quad \\sum_i \\alpha_i^{\\star} = 0.\n$$\n- Ground-truth site context vector\n$$\n\\boldsymbol{\\beta}^{\\star} = (0.00, 0.00, 0.00).\n$$\n- Residuals:\n$$\n\\varepsilon_{i,j,r} = \\delta \\cdot (-1)^r \\cdot \\frac{i - j}{P+S}, \\quad \\delta = 0.015,\n$$\nfor $i \\in \\{0,1,2,3\\}$, $j \\in \\{0,1,2\\}$, $r \\in \\{0,1,2\\}$.\n\nCase C (edge: single replicate, stronger site variation):\n- $P = 6$, $S = 5$, $R = 1$.\n- Ground-truth intrinsic promoter vector\n$$\n\\boldsymbol{\\alpha}^{\\star} = (-0.50, -0.20, -0.05, 0.10, 0.25, 0.40), \\quad \\sum_i \\alpha_i^{\\star} = 0.\n$$\n- Ground-truth site context vector\n$$\n\\boldsymbol{\\beta}^{\\star} = (-0.40, -0.15, -0.05, 0.20, 0.40), \\quad \\sum_j \\beta_j^{\\star} = 0.\n$$\n- Residuals:\n$$\n\\varepsilon_{i,j,0} = \\delta \\cdot \\frac{i - j}{P+S}, \\quad \\delta = 0.03,\n$$\nfor $i \\in \\{0,1,2,3,4,5\\}$, $j \\in \\{0,1,2,3,4\\}$.\n\nProgram requirements:\n- For each case, construct all $y_{i,j,r}$ from the definitions above.\n- Formulate and solve the constrained least squares estimation problem for $(\\alpha_i)$ and $(\\beta_j)$ under the sum-to-zero constraints.\n- For each case, compute the root mean squared error (RMSE) for the promoter estimates and for the site estimates:\n$$\n\\operatorname{RMSE}_{\\alpha} = \\sqrt{\\frac{1}{P}\\sum_{i=0}^{P-1} \\left(\\widehat{\\alpha}_i - \\alpha_i^{\\star}\\right)^2}, \\quad\n\\operatorname{RMSE}_{\\beta} = \\sqrt{\\frac{1}{S}\\sum_{j=0}^{S-1} \\left(\\widehat{\\beta}_j - \\beta_j^{\\star}\\right)^2}.\n$$\n\nFinal output format:\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets.\n- The entries must be, in order:\n$$\n[\\operatorname{RMSE}_{\\alpha}^{(A)}, \\operatorname{RMSE}_{\\beta}^{(A)}, \\operatorname{RMSE}_{\\alpha}^{(B)}, \\operatorname{RMSE}_{\\beta}^{(B)}, \\operatorname{RMSE}_{\\alpha}^{(C)}, \\operatorname{RMSE}_{\\beta}^{(C)}].\n$$\n- Each value must be rounded to six decimal places and printed as a decimal number without any unit.", "solution": "The problem requires us to deconvolve intrinsic promoter strengths ($\\alpha_i$) and genomic context effects ($\\beta_j$) from simulated gene expression data using a linear model. The estimation needs to be performed under specific sum-to-zero identifiability constraints. This is a classic constrained least squares optimization problem, which we can solve analytically.\n\nThe model for the measured log-expression $y_{i,j,r}$ for promoter $i$ at site $j$ in replicate $r$ is:\n$$\ny_{i,j,r} = \\alpha_i + \\beta_j + \\varepsilon_{i,j,r}\n$$\nwhere $\\alpha_i$ is the intrinsic promoter strength, $\\beta_j$ is the site effect, and $\\varepsilon_{i,j,r}$ is a residual term. We are given $P$ promoters, $S$ sites, and $R$ replicates per combination. The parameters $(\\alpha_i)_{i=0}^{P-1}$ and $(\\beta_j)_{j=0}^{S-1}$ are to be estimated by minimizing the Residual Sum of Squares (RSS):\n$$\n\\text{RSS} = \\sum_{i=0}^{P-1} \\sum_{j=0}^{S-1} \\sum_{r=0}^{R-1} \\left(y_{i,j,r} - \\alpha_i - \\beta_j\\right)^2\n$$\nThis estimation is subject to the identifiability constraints:\n$$\n\\sum_{i=0}^{P-1} \\alpha_i = 0, \\qquad \\sum_{j=0}^{S-1} \\beta_j = 0\n$$\nThis is a standard problem in two-way ANOVA. The least squares estimates for the parameters under these sum-to-zero constraints are given by the differences between the specific means and the grand mean. Let $\\bar{y}_{i..}$ be the mean expression for promoter $i$, $\\bar{y}_{.j.}$ be the mean for site $j$, and $\\bar{y}_{...}$ be the grand mean over all measurements.\n$$ \\bar{y}_{i..} = \\frac{1}{SR} \\sum_{j=0}^{S-1} \\sum_{r=0}^{R-1} y_{i,j,r} $$\n$$ \\bar{y}_{.j.} = \\frac{1}{PR} \\sum_{i=0}^{P-1} \\sum_{r=0}^{R-1} y_{i,j,r} $$\n$$ \\bar{y}_{...} = \\frac{1}{PSR} \\sum_{i=0}^{P-1} \\sum_{j=0}^{S-1} \\sum_{r=0}^{R-1} y_{i,j,r} $$\nThe estimators for $\\alpha_i$ and $\\beta_j$ that minimize the RSS subject to the constraints are:\n$$\n\\hat{\\alpha}_i = \\bar{y}_{i..} - \\bar{y}_{...}\n$$\n$$\n\\hat{\\beta}_j = \\bar{y}_{.j.} - \\bar{y}_{...}\n$$\nThese estimators are intuitive: the effect of a given promoter is its average expression, corrected for the overall average expression level. The same logic applies to the site effects.\n\nThe implementation plan is as follows:\n1. For each test case, generate the full data tensor $y_{i,j,r}$ of size $(P, S, R)$ using the provided ground-truth parameters $\\boldsymbol{\\alpha}^{\\star}$, $\\boldsymbol{\\beta}^{\\star}$ and the specified deterministic residual function $\\varepsilon_{i,j,r}$.\n2. Compute the required means: the grand mean $\\bar{y}_{...}$, the promoter-specific means $\\bar{y}_{i..}$, and the site-specific means $\\bar{y}_{.j.}$.\n3. Apply the derived formulas to compute the estimated parameters $\\widehat{\\boldsymbol{\\alpha}}$ and $\\widehat{\\boldsymbol{\\beta}}$.\n4. Calculate the Root Mean Squared Error (RMSE) for the promoter and site estimates against their ground-truth values:\n$$\n\\operatorname{RMSE}_{\\alpha} = \\sqrt{\\frac{1}{P}\\sum_{i=0}^{P-1} \\left(\\widehat{\\alpha}_i - \\alpha_i^{\\star}\\right)^2}\n$$\n$$\n\\operatorname{RMSE}_{\\beta} = \\sqrt{\\frac{1}{S}\\sum_{j=0}^{S-1} \\left(\\widehat{\\beta}_j - \\beta_j^{\\star}\\right)^2}\n$$\n5. Consolidate the results from all test cases into the specified output format. This is a purely computational procedure based on the analytical solution derived above.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Main function to solve the problem for all test cases and print results.\n    \"\"\"\n\n    # Define the test cases from the problem statement.\n    test_cases = [\n        # Case A: General, balanced\n        {\n            \"name\": \"A\",\n            \"P\": 5, \"S\": 4, \"R\": 2,\n            \"alpha_star\": np.array([-0.40, -0.10, 0.00, 0.20, 0.30]),\n            \"beta_star\": np.array([-0.30, -0.10, 0.15, 0.25]),\n            \"delta\": 0.02,\n            \"residual_func\": lambda i, j, r, P, S, delta: delta * ((-1) ** r) * (i - j) / (P + S),\n        },\n        # Case B: Boundary, no site effect\n        {\n            \"name\": \"B\",\n            \"P\": 4, \"S\": 3, \"R\": 3,\n            \"alpha_star\": np.array([-0.30, -0.05, 0.10, 0.25]),\n            \"beta_star\": np.array([0.00, 0.00, 0.00]),\n            \"delta\": 0.015,\n            \"residual_func\": lambda i, j, r, P, S, delta: delta * ((-1) ** r) * (i - j) / (P + S),\n        },\n        # Case C: Edge, single replicate\n        {\n            \"name\": \"C\",\n            \"P\": 6, \"S\": 5, \"R\": 1,\n            \"alpha_star\": np.array([-0.50, -0.20, -0.05, 0.10, 0.25, 0.40]),\n            \"beta_star\": np.array([-0.40, -0.15, -0.05, 0.20, 0.40]),\n            \"delta\": 0.03,\n            \"residual_func\": lambda i, j, r, P, S, delta: delta * (i - j) / (P + S),\n        },\n    ]\n\n    results = []\n    for case in test_cases:\n        rmse_alpha, rmse_beta = estimate_and_evaluate(case)\n        results.extend([rmse_alpha, rmse_beta])\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(f'{r:.6f}' for r in results)}]\")\n\ndef estimate_and_evaluate(params):\n    \"\"\"\n    Generates data, estimates parameters, and computes RMSE for a single case.\n    \"\"\"\n    P = params[\"P\"]\n    S = params[\"S\"]\n    R = params[\"R\"]\n    alpha_star = params[\"alpha_star\"]\n    beta_star = params[\"beta_star\"]\n    delta = params[\"delta\"]\n    residual_func = params[\"residual_func\"]\n\n    # 1. Construct the data tensor y_ijr\n    y_data = np.zeros((P, S, R))\n    for i in range(P):\n        for j in range(S):\n            for r in range(R):\n                residual = residual_func(i, j, r, P, S, delta)\n                y_data[i, j, r] = alpha_star[i] + beta_star[j] + residual\n\n    # 2. Compute the means\n    # Grand mean\n    y_grand_mean = np.mean(y_data)\n    # Mean per promoter (averaging over sites and replicates)\n    y_promoter_means = np.mean(y_data, axis=(1, 2))\n    # Mean per site (averaging over promoters and replicates)\n    y_site_means = np.mean(y_data, axis=(0, 2))\n\n    # 3. Apply the derived estimators\n    alpha_hat = y_promoter_means - y_grand_mean\n    beta_hat = y_site_means - y_grand_mean\n\n    # 4. Compute the Root Mean Squared Error (RMSE)\n    rmse_alpha = np.sqrt(np.mean((alpha_hat - alpha_star) ** 2))\n    rmse_beta = np.sqrt(np.mean((beta_hat - beta_star) ** 2))\n    \n    return rmse_alpha, rmse_beta\n\nsolve()\n```", "id": "2764696"}]}