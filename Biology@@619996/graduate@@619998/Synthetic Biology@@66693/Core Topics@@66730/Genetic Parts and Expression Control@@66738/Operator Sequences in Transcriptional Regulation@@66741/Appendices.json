{"hands_on_practices": [{"introduction": "This first exercise grounds our practice in the core principles of statistical thermodynamics, a cornerstone of quantitative biology. We will explore how a common strategy in protein engineering—converting a monomeric repressor into a dimer—quantitatively impacts its regulatory function. By constructing a simple thermodynamic model, you will analytically derive the change in repression strength, providing a foundational understanding of how protein-protein interactions can be harnessed to tune gene circuit performance [@problem_id:2755180].", "problem": "You are engineering a transcriptional repressor in a bacterial synthetic gene circuit. The operator consists of two adjacent palindromic half-sites that together overlap the core promoter, such that any occupancy by the repressor excludes ribonucleic acid polymerase (RNAP) and blocks transcription initiation. Initially, the repressor is monomeric and can bind each half-site independently with the same binding free energy per half-site, denoted by $\\epsilon_{h}$, measured in units of $k_{B} T$, where $k_{B}$ is the Boltzmann constant and $T$ is the absolute temperature. The effective availability of the repressor in the cell is captured by the standard thermodynamic model with a nonspecific deoxyribonucleic acid (DNA) reservoir of size $N_{ns}$ and a total number of repressor molecules $R$, such that the dimensionless concentration parameter is $\\rho \\equiv R/N_{ns}$. Assume $R \\ll N_{ns}$ so that $\\rho$ is small but finite. In the monomeric state, the operator can be in three types of repressor-bound configurations that exclude RNAP: left half-site occupied, right half-site occupied, or both half-sites occupied. \n\nYou then convert the repressor to a dimer by fusing a dimerization domain with dimerization free energy $\\Delta \\epsilon_{dim}$ (in units of $k_{B} T$). In the engineered dimeric design, repression occurs predominantly by a dimer that spans and binds both half-sites simultaneously; single-monomer binding to a half-site in this engineered design is negligible. Within the equilibrium statistical mechanics framework of transcriptional regulation, assume that the dimeric binding state to the two half-sites is equivalent to the two-monomer double-occupancy state acquiring an additional interaction free energy $\\Delta \\epsilon_{dim}$ when both subunits are present at the operator, so that the total binding free energy of the dimeric bound state is $2 \\epsilon_{h} + \\Delta \\epsilon_{dim}$.\n\nDefine the repression factor $\\mathcal{R}$ as the inverse of the fold-change in expression relative to the no-repressor reference, i.e., $\\mathcal{R} \\equiv 1/\\text{fold-change}$, which for a simple repression architecture equals $1$ plus the sum of the statistical weights of all repressor-bound states that exclude RNAP. Using this definition and the assumptions above, derive a closed-form analytical expression for the change in repression upon conversion to the dimeric design, quantified as the ratio $\\mathcal{R}_{dimer}/\\mathcal{R}_{mono}$, in terms of $\\rho$, $\\epsilon_{h}$, and $\\Delta \\epsilon_{dim}$. Express your final answer as a single simplified analytic expression. No numerical evaluation is required.", "solution": "We begin from the equilibrium thermodynamic model of transcriptional regulation for a simple repression architecture. The probability that the promoter is transcriptionally active is proportional to the probability that the operator is not occupied by the repressor. In the weak RNAP-binding limit, the fold-change in expression is given by the probability that the operator is unbound by the repressor, which equals the statistical weight of the unbound state divided by the total statistical weight of all states that are compatible with RNAP exclusion by repressor. With the unbound state weight normalized to $1$, the repression factor, defined as $\\mathcal{R} \\equiv 1/\\text{fold-change}$, becomes\n$$\n\\mathcal{R} = 1 + \\sum_{\\text{repressor-bound states}} \\text{(statistical weight)}.\n$$\n\nWe adopt the standard nonspecific DNA reservoir model in which the statistical weight for placing one repressor monomer on a specific half-site is $\\rho \\exp(-\\epsilon_{h})$, where $\\rho \\equiv R/N_{ns}$ and all energies are expressed in units of $k_{B} T$, so Boltzmann factors are $\\exp(-\\text{energy})$.\n\nMonomeric repressor (baseline):\n- There are two half-sites, each of which can be singly occupied, yielding two distinct singly occupied states. Each single-occupancy state has weight $\\rho \\exp(-\\epsilon_{h})$, so the total weight of singly occupied states is\n$$\n2 \\, \\rho \\exp(-\\epsilon_{h}).\n$$\n- Both half-sites can be occupied simultaneously by two monomers. Assuming independent binding without additional interaction energy for the monomeric baseline, the weight of the double-occupancy state is the product of the weights for the two sites,\n$$\n\\left[\\rho \\exp(-\\epsilon_{h})\\right]^{2} = \\rho^{2} \\exp(-2 \\epsilon_{h}).\n$$\nAll of these repressor-bound states exclude ribonucleic acid polymerase (RNAP), so the repression factor for the monomeric case is\n$$\n\\mathcal{R}_{mono} = 1 + 2 \\rho \\exp(-\\epsilon_{h}) + \\rho^{2} \\exp(-2 \\epsilon_{h}).\n$$\n\nEngineered dimeric repressor:\n- In the engineered dimer design, repression occurs predominantly via a dimer that spans both adjacent half-sites. This state can be viewed as the double-occupancy configuration endowed with an additional interaction (dimerization) free energy $\\Delta \\epsilon_{dim}$. Thus the statistical weight of the dimer-bound operator is the double-occupancy weight multiplied by the Boltzmann factor for the interaction:\n$$\n\\rho^{2} \\exp\\!\\left[-2 \\epsilon_{h} - \\Delta \\epsilon_{dim}\\right].\n$$\n- By construction of the engineered design, single-monomer binding to one half-site is negligible compared to dimer binding and can be ignored.\n\nTherefore, the repression factor for the dimeric case is\n$$\n\\mathcal{R}_{dimer} = 1 + \\rho^{2} \\exp\\!\\left(-2 \\epsilon_{h} - \\Delta \\epsilon_{dim}\\right).\n$$\n\nThe requested change in repression is the ratio\n$$\n\\frac{\\mathcal{R}_{dimer}}{\\mathcal{R}_{mono}} \\;=\\; \\frac{1 + \\rho^{2} \\exp\\!\\left(-2 \\epsilon_{h} - \\Delta \\epsilon_{dim}\\right)}{1 + 2 \\rho \\exp(-\\epsilon_{h}) + \\rho^{2} \\exp(-2 \\epsilon_{h})}.\n$$\n\nThis expression is fully specified in terms of $\\rho$, $\\epsilon_{h}$, and $\\Delta \\epsilon_{dim}$, with all energies in units of $k_{B} T$. It captures how favorable dimerization, i.e., $\\Delta \\epsilon_{dim}  0$, increases the statistical weight of the dimer-bound state relative to the monomeric baseline and thus changes the repression factor.", "answer": "$$\\boxed{\\frac{1+\\rho^{2}\\,\\exp\\!\\left(-2\\epsilon_{h}-\\Delta\\epsilon_{dim}\\right)}{1+2\\rho\\,\\exp\\!\\left(-\\epsilon_{h}\\right)+\\rho^{2}\\,\\exp\\!\\left(-2\\epsilon_{h}\\right)}}$$", "id": "2755180"}, {"introduction": "Having established the fundamentals of repressor binding, we now scale up our analysis from an isolated operator to the complexity of an entire genome. A successful synthetic circuit must operate orthogonally, without interfering with the host organism's native processes. This computational exercise [@problem_id:2755167] tackles this critical design challenge by asking you to quantify the specificity of a transcription factor. You will implement a thermodynamic model to calculate the probability of off-target binding, a key metric for evaluating the robustness and insulation of any synthetic component.", "problem": "You are given a thermodynamic model of a transcription factor binding to Deoxyribonucleic Acid (DNA) in which each genomic site can bind at most one protein molecule and binding sites are independent. The fundamental base is statistical thermodynamics with the grand canonical ensemble, which implies that the average occupancy of a site with binding energy $E$ at chemical potential $\\mu$ is $1/(1+\\exp(E-\\mu))$. Assume all energies are expressed in units of $k_\\mathrm{B}T$ (dimensionless). A particular engineered operator sequence of interest has a motif score $s_O$, and the rest of the genome has a distribution of motif scores $s$ that we model as a Normal distribution with mean $m_s$ and standard deviation $\\sigma_s$. The mapping from motif score $s$ to binding energy is linear: $E(s)=E_{\\mathrm{ref}} - \\lambda s$, where $\\lambda0$ is the energetic sensitivity per motif score unit and $E_{\\mathrm{ref}}$ is a reference energy. \n\nYour task is to compute, for each specified test case, the probability that a randomly chosen bound transcription factor molecule is bound off-target (i.e., to any genomic site other than the engineered operator). In the grand canonical dilute-site model, this off-target binding probability is the fraction\n$$\nP_{\\mathrm{off}} \\equiv \\frac{B}{n_O + B},\n$$\nwhere $n_O$ is the mean occupancy of the engineered operator and $B$ is the total mean occupancy integrated over the genomic background. For the given model,\n- The engineered operator occupancy is $n_O = \\dfrac{1}{1+\\exp(E(s_O)-\\mu)}$.\n- The genome background total occupancy is approximated by\n$$\nB \\approx N \\int_{-\\infty}^{+\\infty} \\phi(s\\,;\\, m_s,\\sigma_s)\\, \\frac{1}{1+\\exp(E(s)-\\mu)}\\, ds,\n$$\nwhere $N$ is the number of independent genomic sites (excluding the engineered operator) and $\\phi(s\\,;\\, m_s,\\sigma_s)$ is the Normal probability density function with mean $m_s$ and standard deviation $\\sigma_s$.\n\nAdditionally, let the “next-best genomic site” be defined by the expected maximum motif score among the $N$ background sites. Using the quantile approximation for the expected maximum of $N$ independent and identically distributed Normal variables, take the expected best background score to be\n$$\ns_{\\mathrm{best}} \\approx m_s + \\sigma_s\\,\\Phi^{-1}\\!\\left(1-\\frac{1}{N}\\right),\n$$\nwhere $\\Phi^{-1}$ is the inverse cumulative distribution function of the standard Normal distribution. The energy gap to this next-best genomic site is then\n$$\n\\Delta E \\equiv E(s_{\\mathrm{best}}) - E(s_O).\n$$\nYou will assess how increasing $\\Delta E$ reduces $P_{\\mathrm{off}}$ by evaluating $P_{\\mathrm{off}}$ across test cases that vary $s_O$ and $N$.\n\nAll energies are in units of $k_\\mathrm{B}T$ (dimensionless), and angles are not involved. Report each $P_{\\mathrm{off}}$ as a float rounded to six decimal places.\n\nTest suite (use the same $E_{\\mathrm{ref}}$, $\\lambda$, $m_s$, $\\sigma_s$, and $\\mu$ across all cases unless a case explicitly overrides a symbol):\n- Shared parameters for all cases: $E_{\\mathrm{ref}}=0$, $\\lambda=1.5$, $m_s=0.0$, $\\sigma_s=1.0$, $\\mu=-5.0$.\n- Case 1 (happy path): $N=10{,}000{,}000$, $s_O=5.0$.\n- Case 2 (genome-size stress): $N=100{,}000{,}000$, $s_O=5.0$.\n- Case 3 (near-zero energy gap): $N=10{,}000{,}000$, $s_O = m_s + \\sigma_s\\,\\Phi^{-1}\\!\\left(1-\\frac{1}{N}\\right)$.\n- Case 4 (negative energy gap): $N=10{,}000{,}000$, $s_O = \\left[m_s + \\sigma_s\\,\\Phi^{-1}\\!\\left(1-\\frac{1}{N}\\right)\\right] - 1.0$.\n- Case 5 (large positive energy gap): $N=10{,}000{,}000$, $s_O=7.0$.\n\nYour program must:\n- Implement the definitions above.\n- Numerically evaluate the integral for $B$ with sufficient precision for stable six-decimal-place answers.\n- For each case, compute $P_{\\mathrm{off}}$.\n- Produce a single line of output containing the results as a comma-separated list enclosed in square brackets, in the order of the cases listed above. For example: \"[x1,x2,x3,x4,x5]\". Each $x_i$ must be rounded to six decimal places (decimal notation).\n\nThe final outputs are floats; no other units are required since all energies are in $k_\\mathrm{B}T$ units (dimensionless).", "solution": "The problem statement has been critically examined and found to be valid. It is scientifically grounded in the principles of statistical thermodynamics as applied to molecular biology, is well-posed with all necessary information provided, and is expressed in objective, quantitative terms. There are no logical contradictions, factual inaccuracies, or unphysical assumptions. We may therefore proceed with the solution.\n\nThe task is to compute the off-target binding probability, $P_{\\mathrm{off}}$, for a transcription factor. This probability is defined as the fraction of all bound protein molecules that are located at non-specific (background) genomic sites, rather than at the single engineered operator site. The model is based on the grand canonical ensemble, where sites are independent and each can be either empty or occupied by one molecule.\n\nThe probability is given by the expression:\n$$\nP_{\\mathrm{off}} = \\frac{B}{n_O + B}\n$$\nHere, $n_O$ represents the mean number of molecules bound to the engineered operator site, and $B$ is the total mean number of molecules bound across all background genomic sites.\n\nThe calculation is performed in three stages:\n1.  Calculation of the mean occupancy of the engineered operator, $n_O$.\n2.  Calculation of the total mean occupancy of the background genome, $B$.\n3.  Combination of these quantities to determine $P_{\\mathrm{off}}$.\n\nThe shared parameters for all test cases are:\n- Reference energy, $E_{\\mathrm{ref}} = 0.0$\n- Energetic sensitivity, $\\lambda = 1.5$\n- Mean background motif score, $m_s = 0.0$\n- Standard deviation of background motif score, $\\sigma_s = 1.0$\n- Chemical potential, $\\mu = -5.0$\n\nThe binding energy $E$ is a linear function of the motif score $s$:\n$$\nE(s) = E_{\\mathrm{ref}} - \\lambda s = 0.0 - 1.5s = -1.5s\n$$\nAll energies are dimensionless, expressed in units of $k_{\\mathrm{B}}T$.\n\nFirst, we determine the mean occupancy of the engineered operator, $n_O$. For a single site with motif score $s_O$, the binding energy is $E(s_O)$. The occupancy follows from the grand canonical partition function for a single site:\n$$\nn_O = \\frac{1}{1 + \\exp(E(s_O) - \\mu)}\n$$\nThis value must be computed for each specific $s_O$ in the test cases.\n\nSecond, we determine the total mean occupancy of the genomic background, $B$. The background consists of $N$ independent sites, whose motif scores $s$ are described by a Normal probability density function, $\\phi(s\\,;\\, m_s, \\sigma_s)$. The total background occupancy is the integral of the site occupancy over this distribution, multiplied by the number of sites $N$:\n$$\nB = N \\int_{-\\infty}^{+\\infty} \\phi(s\\,;\\, m_s, \\sigma_s) \\left( \\frac{1}{1 + \\exp(E(s) - \\mu)} \\right) ds\n$$\nSubstituting the given functions and parameters for the background:\n$$\nB = N \\int_{-\\infty}^{+\\infty} \\frac{1}{\\sqrt{2\\pi}\\sigma_s} \\exp\\left(-\\frac{(s-m_s)^2}{2\\sigma_s^2}\\right) \\cdot \\frac{1}{1 + \\exp(-1.5s - (-5.0))} ds\n$$\nWith $m_s=0.0$ and $\\sigma_s=1.0$, the integral becomes:\n$$\nI = \\int_{-\\infty}^{+\\infty} \\frac{1}{\\sqrt{2\\pi}} \\exp\\left(-\\frac{s^2}{2}\\right) \\cdot \\frac{1}{1 + \\exp(5.0 - 1.5s)} ds\n$$\nso that $B = N \\times I$. This definite integral does not possess a simple closed-form analytical solution and must be computed numerically. Since the parameters defining the background distribution ($m_s$, $\\sigma_s$) and the system conditions ($\\lambda$, $\\mu$) are constant across all test cases, this integral $I$ needs to be calculated only once. We employ a high-precision numerical quadrature method for this task.\n\nWith the values of $n_O$ and $B$ computed, we calculate $P_{\\mathrm{off}}$ for each case.\n\nCase-by-case analysis:\n\n**Case 1:** $N=10,000,000$, $s_O=5.0$.\nWe directly calculate $n_O$ using $s_O=5.0$, and $B$ using $N=10^7$ and the pre-computed integral $I$.\n\n**Case 2:** $N=100,000,000$, $s_O=5.0$.\nThis case is identical to Case 1, but with a ten-fold larger genome size $N$. $n_O$ remains the same, while $B$ increases proportionally with $N$.\n\n**Case 3:** $N=10,000,000$, $s_O = m_s + \\sigma_s\\,\\Phi^{-1}\\!\\left(1-\\frac{1}{N}\\right)$.\nFor this case, the operator score $s_O$ is set to the expected maximum score found among the $N$ background sites, $s_{\\mathrm{best}}$. The function $\\Phi^{-1}$ is the inverse of the standard Normal cumulative distribution function (CDF), also known as the probit function. We first compute $s_O = 0.0 + 1.0 \\times \\Phi^{-1}(1 - 10^{-7})$ and then proceed as in a standard case.\n\n**Case 4:** $N=10,000,000$, $s_O = \\left[m_s + \\sigma_s\\,\\Phi^{-1}\\!\\left(1-\\frac{1}{N}\\right)\\right] - 1.0$.\nHere, the operator score $s_O$ is weaker than the expected best background site by $1.0$ score unit. The calculation follows that of Case 3, with the final value of $s_O$ reduced by $1.0$.\n\n**Case 5:** $N=10,000,000$, $s_O=7.0$.\nThis case examines the effect of a very strong operator site, with $s_O$ increased to $7.0$. The procedure is identical to Case 1, using the new value for $s_O$.\n\nThe final results are rounded to six decimal places as required.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.integrate import quad\nfrom scipy.stats import norm\n\ndef solve():\n    \"\"\"\n    Solves the transcription factor binding problem for five test cases.\n    \"\"\"\n    # Shared parameters for all cases\n    E_ref = 0.0\n    lambda_ = 1.5\n    m_s = 0.0\n    sigma_s = 1.0\n    mu = -5.0\n\n    # Define the energy function E(s)\n    def energy(s, E_ref_val, lambda_val):\n        return E_ref_val - lambda_val * s\n\n    # Define the integrand for the total background occupancy B.\n    # The integrand is the product of the Normal PDF of motif scores and the\n    # occupancy probability for a given score.\n    def integrand_for_B(s, E_ref_val, lambda_val, mu_val, m_s_val, sigma_s_val):\n        E_s = energy(s, E_ref_val, lambda_val)\n        occupancy = 1.0 / (1.0 + np.exp(E_s - mu_val))\n        pdf = norm.pdf(s, loc=m_s_val, scale=sigma_s_val)\n        return pdf * occupancy\n\n    # The integral part of B is constant across all cases since the background\n    # distribution and thermodynamic parameters do not change.\n    # We calculate it once with high precision.\n    integral_val, _ = quad(\n        integrand_for_B,\n        -np.inf,\n        np.inf,\n        args=(E_ref, lambda_, mu, m_s, sigma_s),\n        epsabs=1e-12, # Use high precision for stable results\n        epsrel=1e-12\n    )\n\n    # Define the test cases. Each tuple contains (N, s_O_value or function to compute it).\n    # Using lambda functions for cases where s_O depends on N.\n    test_cases = [\n        {'N': 10_000_000, 's_O': 5.0},\n        {'N': 100_000_000, 's_O': 5.0},\n        {'N': 10_000_000, 's_O': lambda N: m_s + sigma_s * norm.ppf(1.0 - 1.0 / N)},\n        {'N': 10_000_000, 's_O': lambda N: (m_s + sigma_s * norm.ppf(1.0 - 1.0/N)) - 1.0},\n        {'N': 10_000_000, 's_O': 7.0}\n    ]\n\n    results = []\n    for case in test_cases:\n        N = case['N']\n        s_O_spec = case['s_O']\n        \n        # Resolve s_O if it's a function\n        if callable(s_O_spec):\n            s_O = s_O_spec(N)\n        else:\n            s_O = s_O_spec\n        \n        # Calculate n_O: mean occupancy of the engineered operator\n        E_O = energy(s_O, E_ref, lambda_)\n        n_O = 1.0 / (1.0 + np.exp(E_O - mu))\n        \n        # Calculate B: total mean occupancy of the genomic background\n        B = N * integral_val\n        \n        # Calculate P_off: probability of off-target binding\n        P_off = B / (n_O + B)\n        \n        results.append(P_off)\n\n    # Format the final output as a comma-separated list of floats rounded to six decimal places,\n    # enclosed in square brackets.\n    print(f\"[{','.join(f'{r:.6f}' for r in results)}]\")\n\nsolve()\n```", "id": "2755167"}, {"introduction": "Our final practice bridges the gap between theoretical models and experimental measurements, a crucial step in the synthetic biology design-build-test-learn cycle. Many advanced regulatory architectures, both natural and synthetic, rely on DNA looping between distant operator sites, which results in a characteristic transcriptional response that oscillates with operator spacing. This exercise [@problem_id:2755169] guides you through deriving a biophysical model for this phenomenon and then using a computational approach to fit this model to data, allowing for the extraction of fundamental physical parameters of DNA itself from experimental measurements.", "problem": "A protein repressor that binds to two operator sequences can form a DNA loop. The strength of transcriptional repression as a function of operator spacing is governed by two fundamental aspects of deoxyribonucleic acid (DNA) mechanics: the helical twist alignment of the operators and the loop formation probability. Within Synthetic Biology, the physical basis for this effect can be reasoned from the Central Dogma of molecular biology (deoxyribonucleic acid to ribonucleic acid to protein), equilibrium statistical mechanics of binding, and the worm-like chain model for DNA elasticity. The helical twist introduces a periodic dependence on the operator spacing, while the loop formation probability decreases with increasing loop length due to bending energy costs and loss of configurational entropy. Together, these considerations imply that repression versus operator spacing should be described by a model that combines a periodic helical term (with a characteristic helical repeat in base pairs) and a decaying envelope capturing the loop formation penalty.\n\nYour task is to:\n- Derive, from the above fundamental principles, a minimal parametric model that combines a periodic helical dependence on spacing and a decaying envelope for loop formation, along with a baseline that captures the unrepressed level. The model must include the following identifiable parameters: a helical repeat $P$ (in base pairs), a decay length $L_{d}$ (in base pairs), a phase offset $\\phi$ (in radians), an amplitude $A$ (dimensionless), and a baseline $B$ (dimensionless).\n- Use your derived model to fit synthetic repression-versus-spacing datasets for multiple test cases and report the fitted parameter values.\n\nAssumptions to guide the derivation and modeling:\n- The helical twist alignment contributes a single dominant periodic component with a period equal to the helical repeat $P$ of DNA, with an unknown phase $\\phi$ determined by the operator registers.\n- The probability of forming a loop of length $s$ decays with $s$ according to an effective decay length $L_{d}$, capturing the combined effects of bending elasticity and entropy over the range of loop sizes probed.\n- The measured repression is a dimensionless quantity.\n- Angles must be treated in radians, not degrees. Report $P$ and $L_{d}$ in base pairs, and report $\\phi$ in radians. Report $A$ and $B$ as dimensionless quantities.\n- You must not import any external data; all computations must be self-contained.\n\nTest suite specification:\n- For each test case below, synthesize noiseless measurements by applying your derived model to the provided parameter values at the specified operator spacings $s$ (in base pairs). That is, the measurement at each spacing is the value of your derived model evaluated at that spacing using the listed parameter values. Then fit your model back to these synthetic data to recover parameter estimates.\n\nTest Case 1 (happy path):\n- True parameters: $P = 10.5$ (bp), $L_{d} = 120.0$ (bp), $\\phi = 0.5$ (rad), $A = 2.0$, $B = 10.0$.\n- Spacings $s$ (bp): $[60, 66, 72, 78, 84, 90, 96, 102, 108, 114, 120, 126, 132, 138, 144]$.\n\nTest Case 2 (small oscillation amplitude):\n- True parameters: $P = 10.7$ (bp), $L_{d} = 80.0$ (bp), $\\phi = -1.0$ (rad), $A = 0.2$, $B = 5.0$.\n- Spacings $s$ (bp): $[40, 46, 52, 58, 64, 70, 76, 82, 88, 94, 100, 106, 112, 118, 124]$.\n\nTest Case 3 (rapidly decaying loop probability):\n- True parameters: $P = 11.0$ (bp), $L_{d} = 30.0$ (bp), $\\phi = 1.2$ (rad), $A = 3.0$, $B = 8.0$.\n- Spacings $s$ (bp): $[30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96, 102, 108, 114]$.\n\nRequired output:\n- For each test case, fit your model to the synthetic data and estimate the parameter vector $[P, L_{d}, \\phi, A, B]$.\n- Your program should produce a single line of output containing the results as a comma-separated list of three lists, one per test case, enclosed in square brackets. Each inner list must be ordered as $[P, L_{d}, \\phi, A, B]$, where $P$ and $L_{d}$ are in base pairs, $\\phi$ is in radians, and $A$ and $B$ are dimensionless. Round every reported number to exactly three decimal places. For example, the output should look like $[[x_{11},x_{12},x_{13},x_{14},x_{15}],[x_{21},x_{22},x_{23},x_{24},x_{25}],[x_{31},x_{32},x_{33},x_{34},x_{35}]]$ with each $x_{ij}$ a decimal literal rounded to three places.\n\nScoring and coverage:\n- The test suite covers: a typical case with moderate decay and clear periodicity (Test Case $1$), a small-amplitude oscillation that challenges the recovery of the helical period (Test Case $2$), and a short decay length where only the first few oscillations are visible (Test Case $3$).\n- The expected correct results are floats close to the generating parameters for each case given the noiseless synthesis and correct derivation.\n\nImplementation constraints:\n- The final answer must be a complete, runnable program in Python that constructs the synthetic datasets from the above parameter values, fits your derived model using a mathematically justified algorithm, and prints the fitted parameters in the exact required format.", "solution": "The problem has been subjected to rigorous validation and is deemed valid. It is scientifically grounded in the biophysics of DNA, well-posed, and expressed in objective, formalizable terms. It does not violate any of the criteria for invalidity. The task is a standard exercise in biophysical modeling: deriving a phenomenological model from first principles and performing a parameter estimation on synthetic data.\n\nThe derivation of the model for repression level, $R(s)$, as a function of operator spacing, $s$, proceeds from the fundamental principles outlined in the problem statement. The total repression is considered as a superposition of a baseline level and a spacing-dependent contribution from DNA looping.\n\n$1$. **Model Structure**: The total repression $R(s)$ is the sum of a constant baseline, $B$, and a term that describes the effect of DNA looping, $R_{\\text{looping}}(s)$. The baseline $B$ represents the unrepressed state or basal level of transcription.\n$$\nR(s) = B + R_{\\text{looping}}(s)\n$$\n\n$2$. **Looping Contribution**: The formation of a stable, repressive DNA loop depends on two main physical factors acting in concert: the statistical probability of the DNA chain ends meeting in space, and their relative helical orientation upon meeting. Thus, the looping term $R_{\\text{looping}}(s)$ is proportional to the product of a decay term modeling loop formation probability and a periodic term modeling helical alignment. The magnitude of this effect is scaled by an amplitude parameter, $A$.\n\n$3$. **Decay Envelope (Loop Formation Probability)**: The problem states that the probability of forming a DNA loop of length $s$ decays with an effective decay length $L_d$. This decay phenomenologically captures the combined effects of the bending energy penalty (which disfavors short loops) and the loss of configurational entropy (which disfavors long loops). The simplest mathematical form that represents a decay process governed by a characteristic length is an exponential decay. Therefore, the decay envelope is modeled as:\n$$\n\\text{Envelope}(s) \\propto e^{-s/L_d}\n$$\nwhere $L_d$ is the decay length in base pairs.\n\n$4$. **Periodic Term (Helical Alignment)**: B-form DNA has a helical structure. For two operators to be co-facially aligned for protein binding and looping, their angular separation along the helix must be an integer multiple of $2\\pi$ radians. The relative angle between two sites separated by $s$ base pairs on a helix with a period of $P$ base pairs per turn is $\\frac{2\\pi s}{P}$. A cosine function naturally describes this periodic requirement for optimal alignment. An additional phase offset, $\\phi$, is introduced to account for the specific rotational registers of the operator sequences on the DNA backbone. The periodic component is thus:\n$$\n\\text{Periodic}(s) = \\cos\\left(\\frac{2\\pi s}{P} + \\phi\\right)\n$$\n\n$5$. **Complete Model Assembly**: Combining these components, the looping-dependent repression term is the product of the amplitude, the decay envelope, and the periodic term. Summing this with the baseline $B$ gives the final minimal parametric model for repression $R(s)$ as a function of operator spacing $s$:\n$$\nR(s) = A \\cdot e^{-s/L_d} \\cdot \\cos\\left(\\frac{2\\pi s}{P} + \\phi\\right) + B\n$$\nThis model contains the five required identifiable parameters: the helical repeat $P$ (base pairs), the decay length $L_d$ (base pairs), the phase offset $\\phi$ (radians), the dimensionless amplitude $A$, and the dimensionless baseline $B$.\n\n**Parameter Estimation**: To find the parameters $[P, L_d, \\phi, A, B]$ for each test case, we must fit the derived model $R(s)$ to the provided data. Since the relationship between the parameters and the dependent variable $R(s)$ is non-linear, a non-linear least-squares fitting algorithm is required. The objective is to find the set of parameters $\\theta = \\{P, L_d, \\phi, A, B\\}$ that minimizes the sum of the squared differences between the synthetic measurements $y_i$ at spacings $s_i$ and the model's predictions $R(s_i; \\theta)$. The objective function to be minimized is the sum of squared residuals, $\\chi^2$:\n$$\n\\chi^2(\\theta) = \\sum_{i} \\left( y_i - R(s_i; \\theta) \\right)^2\n$$\nThe `scipy.optimize.curve_fit` function, which implements the Levenberg-Marquardt algorithm, is the appropriate tool for this task. To ensure convergence to a physically meaningful solution, initial parameter guesses and bounds are necessary.\n- **Initial Guesses**: The helical period $P$ of DNA is known to be approximately $10.5$ bp. The baseline $B$ can be estimated from the mean of the data, and the amplitude $A$ from the data's range. The decay length $L_d$ can be roughly estimated from the span of the operator spacings. A phase offset of $0$ is a neutral starting point.\n- **Bounds**: Physical constraints must be respected. The parameters $P$, $L_d$, $A$, and $B$ must be positive. The helical period $P$ lies within a known biological range (e.g., $8$ to $12$ bp). The phase $\\phi$ is cyclic and can be constrained to an interval of length $2\\pi$, such as $[-\\pi, \\pi]$, to ensure a unique solution. The amplitude $A$ is constrained to be non-negative based on the provided test cases.\n\nThe procedure for each test case is:\n$1$. Generate the noiseless synthetic data points $(s_i, y_i)$ using the provided true parameters and the derived model $R(s)$.\n$2$. Use `scipy.optimize.curve_fit` to fit the model $R(s)$ to the synthetic data, providing a set of reasonable initial guesses and bounds to find the optimal parameter estimates.\n$3$. Report the fitted parameters, rounded to the specified precision. Given that the data are noiseless and generated from the model itself, this procedure is expected to recover the true parameters accurately.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.optimize import curve_fit\n\ndef solve():\n    \"\"\"\n    Derives a biophysical model for DNA looping-mediated repression,\n    generates synthetic data, and fits the model to recover parameters.\n    \"\"\"\n\n    # Define the derived parametric model for transcriptional repression.\n    # The model describes a periodic signal with a decaying envelope on a baseline.\n    # s: operator spacing (bp)\n    # P: helical repeat (bp)\n    # Ld: decay length (bp)\n    # phi: phase offset (radians)\n    # A: amplitude (dimensionless)\n    # B: baseline (dimensionless)\n    def repression_model(s, P, Ld, phi, A, B):\n        \"\"\"\n        Calculates repression R(s) based on the derived biophysical model.\n        R(s) = A * exp(-s/Ld) * cos(2*pi*s/P + phi) + B\n        \"\"\"\n        return A * np.exp(-s / Ld) * np.cos(2 * np.pi * s / P + phi) + B\n\n    # Test cases with true parameters and measurement spacings.\n    # Each case is a dictionary containing 'params' (P, Ld, phi, A, B)\n    # and 'spacings' (array of operator spacings in bp).\n    test_cases = [\n        {\n            \"params\": [10.5, 120.0, 0.5, 2.0, 10.0],\n            \"spacings\": np.array([60, 66, 72, 78, 84, 90, 96, 102, 108, 114, 120, 126, 132, 138, 144])\n        },\n        {\n            \"params\": [10.7, 80.0, -1.0, 0.2, 5.0],\n            \"spacings\": np.array([40, 46, 52, 58, 64, 70, 76, 82, 88, 94, 100, 106, 112, 118, 124])\n        },\n        {\n            \"params\": [11.0, 30.0, 1.2, 3.0, 8.0],\n            \"spacings\": np.array([30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96, 102, 108, 114])\n        }\n    ]\n\n    results = []\n    for case in test_cases:\n        true_params = case[\"params\"]\n        s_data = case[\"spacings\"]\n\n        # 1. Synthesize noiseless measurement data using the true parameters.\n        y_data = repression_model(s_data, *true_params)\n\n        # 2. Set up initial guesses and bounds for the fitting algorithm.\n        # A data-driven approach for initial guesses improves robustness.\n        p0 = [\n            10.5,                               # P_guess: known biophysical value\n            (s_data[-1] - s_data[0]) / 2,       # Ld_guess: decay over half the range\n            0.0,                                # phi_guess: neutral phase\n            (np.max(y_data) - np.min(y_data)) / 2,  # A_guess: half the peak-to-peak range\n            np.mean(y_data)                     # B_guess: mean of the signal\n        ]\n\n        # Bounds enforce physical constraints on the parameters.\n        bounds = (\n            [8.0, 1.0, -np.pi, 0.0, 0.0],        # Lower bounds\n            [12.0, 1000.0, np.pi, np.inf, np.inf] # Upper bounds\n        )\n\n        # 3. Fit the model to the synthetic data to recover parameters.\n        # curve_fit returns the optimal parameters (popt) and the covariance matrix (pcov).\n        popt, _ = curve_fit(\n            repression_model,\n            s_data,\n            y_data,\n            p0=p0,\n            bounds=bounds,\n            maxfev=5000  # Increase iterations for robustness\n        )\n        \n        # Handle potential phase wrapping for consistency if A is not constrained\n        # to be positive, but here A0 is a bound, so this is not required.\n        # If popt[3]  0: # Amplitude A\n        #    popt[3] = -popt[3]\n        #    popt[2] = popt[2] + np.pi # phi\n        # while popt[2]  np.pi:\n        #    popt[2] -= 2*np.pi\n        # while popt[2]  -np.pi:\n        #    popt[2] += 2*np.pi\n\n        results.append(popt)\n\n    # 4. Format the final output as specified.\n    # Each parameter is rounded to exactly three decimal places.\n    formatted_results = []\n    for res in results:\n        # Order is [P, Ld, phi, A, B]\n        formatted_case = (f\"[{res[0]:.3f},{res[1]:.3f},{res[2]:.3f},\"\n                          f\"{res[3]:.3f},{res[4]:.3f}]\")\n        formatted_results.append(formatted_case)\n\n    # The final print statement produces a single line in the required format.\n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n```", "id": "2755169"}]}