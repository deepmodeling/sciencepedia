{"hands_on_practices": [{"introduction": "The efficiency of translating a gene into a protein is not solely determined by its amino acid sequence but is also highly dependent on the host organism's cellular machinery. This practice delves into the concept of \"codon usage bias,\" where different organisms show preferences for certain codons over others that code for the same amino acid. By implementing a kinetic model based on hypothetical codon availability weights, you will quantify how these preferences can create translational bottlenecks and affect the overall protein yield, a foundational skill for rationally designing genes for heterologous expression in chassis like E. coli and S. cerevisiae [@problem_id:2732911].", "problem": "You are given a formalized kinetic model for translation elongation to compare expected translation efficiencies of a single coding DNA sequence in two host organisms: Escherichia coli (E. coli) and Saccharomyces cerevisiae (S. cerevisiae). The model adheres to the central dogma of molecular biology and posits that the average per-codon decoding time in a host is inversely proportional to the availability of the corresponding transfer ribonucleic acid (tRNA), which is here proxied by host-specific codon availability weights. Formally, for a host $h$, a codon $c$, and an arbitrary host-dependent proportionality constant $k_h > 0$, the decoding time is $t_{c,h} = 1/(k_h f_{c,h})$ where $f_{c,h} > 0$ is the given relative availability weight for codon $c$ in host $h$. For a coding sequence comprising codons $\\{c_1, \\dots, c_L\\}$, the total elongation time is $T_h = \\sum_{i=1}^{L} t_{c_i,h}$. To eliminate unknown host-dependent scale factors and the effect of sequence length, you must compute the normalized relative translation efficiency in host $h$ defined as\n$$\nE_h \\equiv \\frac{T_{h,\\mathrm{opt}}}{T_h} = \\frac{\\sum_{i=1}^{L} \\frac{1}{f_{a_i,h}^{\\max}}}{\\sum_{i=1}^{L} \\frac{1}{f_{c_i,h}}},\n$$\nwhere $a_i$ is the amino acid specified at position $i$, and $f_{a_i,h}^{\\max}$ is the maximum $f_{c,h}$ among the synonymous codons for amino acid $a_i$ in host $h$. This normalization corresponds to the ratio of the optimal time (using, at each position, the best synonymous codon in host $h$) to the actual time of the given sequence. Additionally, define translation bottlenecks in host $h$ as the set of codon positions achieving the maximum per-codon time $t_{c_i,h}$ along the sequence; that is, positions $i$ such that $\\frac{1}{f_{c_i,h}}$ is maximized.\n\nInput data for this task are fully specified below and must be embedded directly in your program. The sequence alphabet is deoxyribonucleic acid (DNA) with standard uppercase bases, and reading frames are in-frame from the first nucleotide. All frequencies $f_{c,h}$ are strictly positive real numbers.\n\nYou must implement the above model and compute, for each test case: the pair $(E_{\\mathrm{Ec}}, E_{\\mathrm{Sc}})$, the cross-host ratio $R = E_{\\mathrm{Ec}}/E_{\\mathrm{Sc}}$, and the bottleneck position lists for both hosts as $1$-based indices. All floating-point outputs must be rounded to $6$ decimal places. The only amino acids present in the sequences and needed for normalization are Lysine (K), Glycine (G), Proline (P), and Aspartic Acid (D), with the following synonymous codons:\n- Lysine (K): {AAA, AAG}.\n- Glycine (G): {GGT, GGC, GGA, GGG}.\n- Proline (P): {CCT, CCC, CCA, CCG}.\n- Aspartic Acid (D): {GAT, GAC}.\n\nHost-specific codon availability weights $f_{c,h}$ are as follows:\n- Escherichia coli (E. coli): AAA: $0.7$, AAG: $0.3$; GGT: $0.35$, GGC: $0.4$, GGA: $0.1$, GGG: $0.15$; CCT: $0.3$, CCC: $0.18$, CCA: $0.22$, CCG: $0.3$; GAT: $0.65$, GAC: $0.35$.\n- Saccharomyces cerevisiae (S. cerevisiae): AAA: $0.3$, AAG: $0.7$; GGT: $0.4$, GGC: $0.2$, GGA: $0.25$, GGG: $0.15$; CCT: $0.2$, CCC: $0.15$, CCA: $0.5$, CCG: $0.15$; GAT: $0.45$, GAC: $0.55$.\n\nTest suite to implement and evaluate:\n- Test case $1$ (mixed codons): coding sequence with codons in order AAA, GGA, GGT, GGC, GGG, CCG, CCA, CCC, CCT, GAT, GAC, AAG; that is, the concatenated DNA string \"AAAGGAGGTGGCCCGCCACCCCCTGATGACAAG\".\n- Test case $2$ (single-codon repeat): coding sequence of Lysine using AAA repeated $10$ times consecutively; that is, the concatenated DNA string of length $30$ bases comprising \"AAA\" repeated $10$ times without separators.\n- Test case $3$ (E. coliâ€“optimal codons per amino acid): coding sequence with codons in order AAA, GGC, CCG, GAT, AAA, GGC, CCG, GAT; that is, the concatenated DNA string \"AAAGGCCCGGATAAAGGCCCGGAT\".\n\nFor each test case, your program must:\n- Parse the DNA sequence into codons $\\{c_1, \\dots, c_L\\}$.\n- For each host $h \\in \\{\\mathrm{Ec}, \\mathrm{Sc}\\}$, compute $E_h$ as defined above and identify the bottleneck positions as $1$-based indices where $\\frac{1}{f_{c_i,h}}$ attains its maximum along the sequence.\n- Compute the cross-host ratio $R = E_{\\mathrm{Ec}}/E_{\\mathrm{Sc}}$.\n\nFinal output format:\nYour program should produce a single line of output containing the results over all test cases as a comma-separated list enclosed in square brackets, where each test case result is itself a list of the form $[E_{\\mathrm{Ec}}, E_{\\mathrm{Sc}}, R, \\mathrm{bneck}_{\\mathrm{Ec}}, \\mathrm{bneck}_{\\mathrm{Sc}}]$, with all $E$ and $R$ values rounded to $6$ decimal places, and each bottleneck list $\\mathrm{bneck}_{\\mathrm{Ec}}$ and $\\mathrm{bneck}_{\\mathrm{Sc}}$ being a list of integers in ascending order. For example, a valid output structure looks like \"[[...], [...], [...]]\".", "solution": "The problem statement presents a formalized kinetic model to assess the translation efficiency of a given coding DNA sequence in two different host organisms, *Escherichia coli* and *Saccharomyces cerevisiae*. The problem is to be validated before any solution is attempted.\n\n**Step 1: Extract Givens**\n- **Model for per-codon decoding time:** For a host $h$ and codon $c$, the decoding time is $t_{c,h} = 1/(k_h f_{c,h})$, where $k_h > 0$ is a host-specific proportionality constant and $f_{c,h} > 0$ is the codon's relative availability weight in that host.\n- **Total elongation time:** For a sequence of $L$ codons $\\{c_1, \\dots, c_L\\}$, the total time is $T_h = \\sum_{i=1}^{L} t_{c_i,h}$.\n- **Normalized relative translation efficiency:**\n$$E_h = \\frac{T_{h,\\mathrm{opt}}}{T_h} = \\frac{\\sum_{i=1}^{L} \\frac{1}{f_{a_i,h}^{\\max}}}{\\sum_{i=1}^{L} \\frac{1}{f_{c_i,h}}}$$\nHere, $a_i$ is the amino acid at position $i$, and $f_{a_i,h}^{\\max}$ is the maximum availability weight among all synonymous codons for amino acid $a_i$ in host $h$.\n- **Translation bottlenecks:** The set of $1$-based codon positions $i$ where the decoding time $t_{c_i,h}$ (or equivalently, the value $1/f_{c_i,h}$) is maximized for the sequence in host $h$.\n- **Cross-host ratio:** $R = E_{\\mathrm{Ec}}/E_{\\mathrm{Sc}}$.\n- **Amino Acid to Codon Mapping:**\n  - Lysine (K): {AAA, AAG}\n  - Glycine (G): {GGT, GGC, GGA, GGG}\n  - Proline (P): {CCT, CCC, CCA, CCG}\n  - Aspartic Acid (D): {GAT, GAC}\n- **Host-specific Codon Availability Weights ($f_{c,h}$):**\n  - **E. coli (Ec):** AAA: $0.7$, AAG: $0.3$; GGT: $0.35$, GGC: $0.4$, GGA: $0.1$, GGG: $0.15$; CCT: $0.3$, CCC: $0.18$, CCA: $0.22$, CCG: $0.3$; GAT: $0.65$, GAC: $0.35$.\n  - **S. cerevisiae (Sc):** AAA: $0.3$, AAG: $0.7$; GGT: $0.4$, GGC: $0.2$, GGA: $0.25$, GGG: $0.15$; CCT: $0.2$, CCC: $0.15$, CCA: $0.5$, CCG: $0.15$; GAT: $0.45$, GAC: $0.55$.\n- **Test Cases (DNA sequences):**\n  1. \"AAAGGAGGTGGCCCGCCACCCCCTGATGACAAG\"\n  2. \"AAA\" repeated $10$ times.\n  3. \"AAAGGCCCGGATAAAGGCCCGGAT\"\n- **Output Specifications:** For each test case, compute the tuple $(E_{\\mathrm{Ec}}, E_{\\mathrm{Sc}})$, the ratio $R$, and the lists of bottleneck positions for each host. Floating-point values must be rounded to $6$ decimal places.\n\n**Step 2: Validate Using Extracted Givens**\nThe problem is subjected to validation.\n- **Scientific Grounding:** The model is a simplified but standard and scientifically accepted representation of translation kinetics, where translation speed is correlated with tRNA abundance, proxied here by codon availability weights. The model is grounded in molecular biology principles.\n- **Well-Posedness:** The problem is well-posed. All necessary data (sequences, weights, mappings) and definitions (formulas for $E_h$ and bottlenecks) are explicitly provided. The objective is clear, and a unique solution can be algorithmically determined.\n- **Objectivity:** The problem statement is written in precise, objective language, free of subjective claims.\n- **Completeness and Consistency:** The data provided is sufficient and self-consistent. The set of codons in the test sequences is a subset of the codons for which weights are provided.\n- **Realism and Feasibility:** The given weights are plausible numerical values. The model, while an abstraction, is not physically impossible or scientifically implausible for its intended purpose of relative comparison.\n- **Structural Integrity:** The definitions are unambiguous. The logic is non-circular.\n\n**Step 3: Verdict and Action**\nThe problem is deemed **valid**. It is scientifically grounded, well-posed, and all necessary components for a solution are provided. A complete, reasoned solution will be developed.\n\n**Principle-Based Design of the Solution**\n\nThe task is to implement the provided quantitative model. The core of the problem lies in the correct application of the formula for normalized relative translation efficiency, $E_h$, and the identification of translation bottlenecks.\n\nFirst, the necessary biological information must be encoded into appropriate data structures. This includes:\n1.  A mapping from each codon to its corresponding amino acid.\n2.  The host-specific availability weights, $f_{c,h}$, for each codon $c$ in each host $h \\in \\{\\mathrm{Ec}, \\mathrm{Sc}\\}$.\n\nThe formula for efficiency $E_h$ is a ratio of two sums. The denominator, $\\sum_{i=1}^{L} \\frac{1}{f_{c_i,h}}$, represents the sum of inverse availability weights for the codons $c_i$ actually present in the sequence. This term is proportional to the total elongation time, $T_h$. The numerator, $\\sum_{i=1}^{L} \\frac{1}{f_{a_i,h}^{\\max}}$, represents the sum of inverse availability weights for an idealized optimal sequence, where for each amino acid $a_i$ in the translated protein, the most abundant (fastest to decode) synonymous codon in host $h$ is used. This term is proportional to the minimal possible elongation time, $T_{h,\\mathrm{opt}}$.\n\nThe computational procedure for a given DNA sequence is as follows:\n\n1.  **Sequence Parsing:** The input DNA string is parsed into a list of $L$ codons, $\\{c_1, c_2, \\dots, c_L\\}$, by taking successive non-overlapping triplets of nucleotides.\n\n2.  **Pre-computation of Optimal Weights:** For each host $h$ and each relevant amino acid $a$, we must pre-calculate the maximum availability weight, $f_{a,h}^{\\max}$. This is done by iterating through all synonymous codons for $a$ and finding the maximum of their $f_{c,h}$ values in host $h$.\n\n3.  **Per-Host Calculation:** The following steps are performed for each host, $h=\\mathrm{Ec}$ and $h=\\mathrm{Sc}$.\n    a.  **Summation for $E_h$**:\n        - Initialize two accumulators: `sum_inv_f_actual` for the denominator and `sum_inv_f_optimal` for the numerator.\n        - Initialize a list to store the per-codon time metric, $\\{1/f_{c_1,h}, 1/f_{c_2,h}, \\dots, 1/f_{c_L,h}\\}$.\n        - Iterate from $i=1$ to $L$:\n            i.  Identify the codon $c_i$ and the corresponding amino acid $a_i$.\n            ii. Retrieve the actual weight $f_{c_i,h}$ and the pre-computed optimal weight $f_{a_i,h}^{\\max}$.\n            iii. Add $1/f_{c_i,h}$ to `sum_inv_f_actual` and store it for bottleneck analysis.\n            iv. Add $1/f_{a_i,h}^{\\max}$ to `sum_inv_f_optimal`.\n    b.  **Efficiency Calculation**: Compute $E_h = \\text{sum\\_inv\\_f\\_optimal} / \\text{sum\\_inv\\_f\\_actual}$.\n    c.  **Bottleneck Identification**: Find the maximum value in the stored list of per-codon time metrics, $\\{1/f_{c_i,h}\\}$. Identify all $1$-based indices $i$ where this maximum value occurs. These indices form the bottleneck list for host $h$.\n\n4.  **Cross-Host Ratio**: After computing $E_{\\mathrm{Ec}}$ and $E_{\\mathrm{Sc}}$, calculate the ratio $R = E_{\\mathrm{Ec}} / E_{\\mathrm{Sc}}$.\n\n5.  **Formatting**: The results for each test caseâ€”$E_{\\mathrm{Ec}}$, $E_{\\mathrm{Sc}}$, $R$, and the two bottleneck listsâ€”are collected and formatted according to the output specification, with floating-point numbers rounded to $6$ decimal places. This process is repeated for all provided test cases. The final output is a single string representing a list of these results.\n\nThis structured, step-by-step process ensures that all components of the problem are addressed accurately and systematically, transforming the biological model into a deterministic algorithm.", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes translation efficiency and bottlenecks for DNA sequences in E. coli and S. cerevisiae.\n    \"\"\"\n\n    # --- Data Definition ---\n    # Codon to Amino Acid mapping\n    codon_to_aa = {\n        'AAA': 'K', 'AAG': 'K',  # Lysine\n        'GGT': 'G', 'GGC': 'G', 'GGA': 'G', 'GGG': 'G',  # Glycine\n        'CCT': 'P', 'CCC': 'P', 'CCA': 'P', 'CCG': 'P',  # Proline\n        'GAT': 'D', 'GAC': 'D',  # Aspartic Acid\n    }\n\n    # Amino Acid to Synonymous Codons mapping\n    aa_to_codons = {\n        'K': ['AAA', 'AAG'],\n        'G': ['GGT', 'GGC', 'GGA', 'GGG'],\n        'P': ['CCT', 'CCC', 'CCA', 'CCG'],\n        'D': ['GAT', 'GAC'],\n    }\n\n    # Host-specific codon availability weights (f_c,h)\n    f_weights = {\n        'Ec': {\n            'AAA': 0.7, 'AAG': 0.3,\n            'GGT': 0.35, 'GGC': 0.4, 'GGA': 0.1, 'GGG': 0.15,\n            'CCT': 0.3, 'CCC': 0.18, 'CCA': 0.22, 'CCG': 0.3,\n            'GAT': 0.65, 'GAC': 0.35,\n        },\n        'Sc': {\n            'AAA': 0.3, 'AAG': 0.7,\n            'GGT': 0.4, 'GGC': 0.2, 'GGA': 0.25, 'GGG': 0.15,\n            'CCT': 0.2, 'CCC': 0.15, 'CCA': 0.5, 'CCG': 0.15,\n            'GAT': 0.45, 'GAC': 0.55,\n        }\n    }\n\n    # Test cases\n    test_cases = [\n        \"AAAGGAGGTGGCCCGCCACCCCCTGATGACAAG\",\n        \"AAA\" * 10,\n        \"AAAGGCCCGGATAAAGGCCCGGAT\",\n    ]\n\n    # --- Pre-computation ---\n    # Pre-compute maximum availability weights (f_a,h^max) for each amino acid in each host\n    f_max_weights = {'Ec': {}, 'Sc': {}}\n    for host in ['Ec', 'Sc']:\n        for aa, codons in aa_to_codons.items():\n            max_f = max(f_weights[host][c] for c in codons)\n            f_max_weights[host][aa] = max_f\n\n    # --- Main Logic ---\n    all_results = []\n    for dna_sequence in test_cases:\n        # 1. Parse DNA sequence into codons\n        codons = [dna_sequence[i:i+3] for i in range(0, len(dna_sequence), 3)]\n        \n        e_values = {}\n        bottleneck_values = {}\n\n        for host in ['Ec', 'Sc']:\n            sum_inv_f_actual = 0.0\n            sum_inv_f_optimal = 0.0\n            inv_f_values_per_pos = []\n\n            # 2. Calculate sums and collect inverse frequencies\n            for codon in codons:\n                aa = codon_to_aa[codon]\n                \n                f_actual = f_weights[host][codon]\n                f_optimal = f_max_weights[host][aa]\n\n                inv_f_actual = 1.0 / f_actual\n                inv_f_optimal = 1.0 / f_optimal\n\n                sum_inv_f_actual += inv_f_actual\n                sum_inv_f_optimal += inv_f_optimal\n                inv_f_values_per_pos.append(inv_f_actual)\n\n            # 3. Compute efficiency E_h\n            if sum_inv_f_actual == 0:\n                 # This case should not happen with valid positive frequencies\n                 e_h = 0.0\n            else:\n                 e_h = sum_inv_f_optimal / sum_inv_f_actual\n            e_values[host] = e_h\n            \n            # 4. Identify bottleneck positions\n            if not inv_f_values_per_pos:\n                bottlenecks = []\n            else:\n                max_inv_f = max(inv_f_values_per_pos)\n                # Use a tolerance for float comparison to be robust\n                bottlenecks = [\n                    i + 1 for i, val in enumerate(inv_f_values_per_pos)\n                    if np.isclose(val, max_inv_f)\n                ]\n            bottleneck_values[host] = bottlenecks\n\n        # 5. Compute cross-host ratio R\n        e_ec = e_values['Ec']\n        e_sc = e_values['Sc']\n        \n        if e_sc == 0:\n            # Handle division by zero case\n            ratio_r = 0.0\n        else:\n            ratio_r = e_ec / e_sc\n\n        # 6. Format results for the current test case\n        case_result = [\n            round(e_ec, 6),\n            round(e_sc, 6),\n            round(ratio_r, 6),\n            bottleneck_values['Ec'],\n            bottleneck_values['Sc']\n        ]\n        all_results.append(case_result)\n\n    # Final print statement in the exact required format.\n    # The str() of a list in Python produces the required format `[...]`.\n    print(f\"[{','.join(map(str, all_results))}]\")\n\nsolve()\n```", "id": "2732911"}, {"introduction": "Engineering a multi-step metabolic pathway requires more than just expressing all the necessary enzymes; their activities must be carefully balanced to achieve high flux towards the desired product. This exercise guides you through a first-principles analysis of a linear pathway, applying fundamental Michaelis-Menten kinetics to predict the catalytic capacity of each step based on enzyme parameters and expression levels [@problem_id:2732893]. This process will allow you to identify the \"rate-limiting step\" or bottleneck, a critical diagnostic skill for rationally optimizing and debugging metabolic pathways in any chassis.", "problem": "A heterologous, linear, irreversible, $3$-step pathway $S \\xrightarrow{E_{1}} I_{1} \\xrightarrow{E_{2}} I_{2} \\xrightarrow{E_{3}} P$ is implemented in both Escherichia coli and Saccharomyces cerevisiae as chassis organisms. Each step is catalyzed by a distinct monomeric enzyme $E_{i}$ with turnover number $k_{\\text{cat},i}$ and Michaelis constant $K_{m,i}$ that are intrinsic to the enzyme and identical across chassis. Host-specific expression levels differ and are given as enzyme copy numbers (molecules per cell). Assume:\n- All steps are effectively irreversible on the timescale of interest and there are no branches or bypass reactions.\n- Protein expression leads to active, properly folded enzyme unless otherwise noted.\n- Intracellular substrate concentrations for each step are maintained by upstream design at $[S_{i}] = 10\\,K_{m,i}$ in both chassis.\n- Cell-to-cell variation is negligible; consider a representative cell.\n\nEnzyme kinetic parameters (identical in both chassis):\n- Step $1$: $k_{\\text{cat},1} = 50\\,\\text{s}^{-1}$, $K_{m,1} = 50\\,\\mu\\text{M}$.\n- Step $2$: $k_{\\text{cat},2} = 25\\,\\text{s}^{-1}$, $K_{m,2} = 20\\,\\mu\\text{M}$.\n- Step $3$: $k_{\\text{cat},3} = 100\\,\\text{s}^{-1}$, $K_{m,3} = 10\\,\\mu\\text{M}$.\n\nHost-specific active enzyme copy numbers (molecules per cell):\n- Escherichia coli: $n_{1}^{(\\text{Ec})} = 5.0 \\times 10^{3}$, $n_{2}^{(\\text{Ec})} = 8.0 \\times 10^{3}$, $n_{3}^{(\\text{Ec})} = 2.0 \\times 10^{3}$.\n- Saccharomyces cerevisiae: $n_{1}^{(\\text{Sc})} = 1.5 \\times 10^{4}$, $n_{2}^{(\\text{Sc})} = 3.0 \\times 10^{3}$, $n_{3}^{(\\text{Sc})} = 5.0 \\times 10^{3}$. Due to partial misfolding in Saccharomyces cerevisiae, only a fraction $f_{2}^{(\\text{Sc})} = 0.80$ of $E_{2}$ is active; all other enzymes are fully active.\n\nStarting from the foundational Michaelisâ€“Menten description of catalysis and basic molecular counting (Avogadroâ€™s constant), and without invoking any unsubstantiated shortcuts, compute the steady-state per-cell pathway flux for each chassis under the given conditions and identify the rate-limiting step(s) in each chassis by first principles. Then, report as your final answer the ratio of the predicted steady-state per-cell flux in Escherichia coli to that in Saccharomyces cerevisiae, expressed as a single exact fraction with no units. Do not round; provide the exact value.", "solution": "The problem statement is subjected to validation before any solution is attempted.\n\n**Step 1: Extracted Givens**\n- Pathway: A heterologous, linear, irreversible, $3$-step pathway $S \\xrightarrow{E_{1}} I_{1} \\xrightarrow{E_{2}} I_{2} \\xrightarrow{E_{3}} P$.\n- Chassis Organisms: *Escherichia coli* and *Saccharomyces cerevisiae*.\n- Enzyme Properties: $E_{i}$ are distinct monomeric enzymes. $k_{\\text{cat},i}$ and $K_{m,i}$ are intrinsic and identical across chassis.\n- Substrate Condition: For each step $i$, the substrate concentration is maintained at $[S_{i}] = 10\\,K_{m,i}$.\n- Assumptions: No side reactions, perfect protein expression and folding unless specified, negligible cell-to-cell variation.\n- Kinetic Parameters (identical in both chassis):\n    - Step $1$: $k_{\\text{cat},1} = 50\\,\\text{s}^{-1}$, $K_{m,1} = 50\\,\\mu\\text{M}$.\n    - Step $2$: $k_{\\text{cat},2} = 25\\,\\text{s}^{-1}$, $K_{m,2} = 20\\,\\mu\\text{M}$.\n    - Step $3$: $k_{\\text{cat},3} = 100\\,\\text{s}^{-1}$, $K_{m,3} = 10\\,\\mu\\text{M}$.\n- Host-Specific Enzyme Copy Numbers (molecules per cell):\n    - *E. coli*: $n_{1}^{(\\text{Ec})} = 5.0 \\times 10^{3}$, $n_{2}^{(\\text{Ec})} = 8.0 \\times 10^{3}$, $n_{3}^{(\\text{Ec})} = 2.0 \\times 10^{3}$.\n    - *S. cerevisiae*: $n_{1}^{(\\text{Sc})} = 1.5 \\times 10^{4}$, $n_{2}^{(\\text{Sc})} = 3.0 \\times 10^{3}$, $n_{3}^{(\\text{Sc})} = 5.0 \\times 10^{3}$.\n- Enzyme Activity Fraction: In *S. cerevisiae*, only a fraction $f_{2}^{(\\text{Sc})} = 0.80$ of enzyme $E_{2}$ is active. All other enzymes are fully active ($f=1$).\n\n**Step 2: Validation**\nThe problem is scientifically grounded, being based on standard Michaelis-Menten kinetics and concepts from synthetic biology. It is well-posed, providing all necessary parameters for a unique solution. The language is objective and precise. The condition that $[S_i] = 10\\,K_{m,i}$ for each step is a strong idealization. In a simple unregulated linear pathway, intermediate concentrations would adjust to equalize step fluxes. However, the problem explicitly states this is a maintained condition achieved by \"upstream design.\" This is a valid simplifying constraint within the context of synthetic biology, where such regulation is conceivable, and it serves to make the problem tractable by focusing the analysis on calculating and comparing the maximum potential flux of each step. The problem is therefore deemed valid.\n\n**Step 3: Solution**\nThe solution will be derived from first principles as required.\n\nThe rate of an enzymatic reaction $i$, denoted as the volumetric flux $v_i$ (in units of molar concentration per time), is described by the Michaelis-Menten equation:\n$$v_i = \\frac{k_{\\text{cat},i} [E_T]_i [S_i]}{K_{m,i} + [S_i]}$$\nwhere $[E_T]_i$ is the total concentration of active enzyme $i$, and $[S_i]$ is the concentration of its substrate.\n\nThe problem specifies that for each step, $[S_i] = 10\\,K_{m,i}$. Substituting this condition into the equation gives the specific volumetric flux under these saturating conditions:\n$$v_i = \\frac{k_{\\text{cat},i} [E_T]_i (10\\,K_{m,i})}{K_{m,i} + 10\\,K_{m,i}} = \\frac{10\\,k_{\\text{cat},i} [E_T]_i K_{m,i}}{11\\,K_{m,i}} = \\frac{10}{11} k_{\\text{cat},i} [E_T]_i$$\nThis volumetric flux has units of moles per liter per second. The problem requires the per-cell flux, $J_i$, in units of molecules per cell per second. To convert, we must multiply the volumetric flux by the cell volume, $V_{\\text{cell}}$, and Avogadro's constant, $N_A$:\n$$J_i = v_i \\cdot V_{\\text{cell}} \\cdot N_A$$\nThe enzyme concentration $[E_T]_i$ is related to the number of active enzyme molecules per cell, $n_{i, \\text{active}}$, by:\n$$[E_T]_i = \\frac{n_{i, \\text{active}}}{N_A \\cdot V_{\\text{cell}}}$$\nSubstituting the expressions for $v_i$ and $[E_T]_i$ into the equation for $J_i$:\n$$J_i = \\left(\\frac{10}{11} k_{\\text{cat},i} \\frac{n_{i, \\text{active}}}{N_A \\cdot V_{\\text{cell}}}\\right) \\cdot V_{\\text{cell}} \\cdot N_A$$\nThe terms for cell volume $V_{\\text{cell}}$ and Avogadro's constant $N_A$ cancel, yielding a direct relationship for the per-cell flux of step $i$:\n$$J_i = \\frac{10}{11} k_{\\text{cat},i} n_{i, \\text{active}}$$\nThis represents the catalytic capacity of each step under the given substrate saturation. For a linear irreversible pathway, the overall steady-state flux, $J_{\\text{pathway}}$, is governed by the step with the lowest capacity, known as the rate-limiting step or bottleneck.\n$$J_{\\text{pathway}} = \\min(J_1, J_2, J_3)$$\n\nWe now compute the step capacities for each chassis.\n\n**Analysis for *Escherichia coli***\nIn this chassis, all enzymes are fully active, so $n_{i, \\text{active}}^{(\\text{Ec})} = n_i^{(\\text{Ec})}$.\nThe step capacities are:\n$J_{1}^{(\\text{Ec})} = \\frac{10}{11} k_{\\text{cat},1} n_{1}^{(\\text{Ec})} = \\frac{10}{11} (50) (5.0 \\times 10^{3}) = \\frac{10}{11} (250 \\times 10^{3}) = \\frac{2500 \\times 10^{3}}{11}$ molecules cell$^{-1}$ s$^{-1}$.\n$J_{2}^{(\\text{Ec})} = \\frac{10}{11} k_{\\text{cat},2} n_{2}^{(\\text{Ec})} = \\frac{10}{11} (25) (8.0 \\times 10^{3}) = \\frac{10}{11} (200 \\times 10^{3}) = \\frac{2000 \\times 10^{3}}{11}$ molecules cell$^{-1}$ s$^{-1}$.\n$J_{3}^{(\\text{Ec})} = \\frac{10}{11} k_{\\text{cat},3} n_{3}^{(\\text{Ec})} = \\frac{10}{11} (100) (2.0 \\times 10^{3}) = \\frac{10}{11} (200 \\times 10^{3}) = \\frac{2000 \\times 10^{3}}{11}$ molecules cell$^{-1}$ s$^{-1}$.\n\nComparing these values, the minimum capacity is $\\frac{2000 \\times 10^{3}}{11}$.\nTherefore, the steady-state pathway flux in *E. coli* is:\n$$J^{(\\text{Ec})} = \\min(J_{1}^{(\\text{Ec})}, J_{2}^{(\\text{Ec})}, J_{3}^{(\\text{Ec})}) = \\frac{2000 \\times 10^{3}}{11} \\text{ molecules cell}^{-1} \\text{ s}^{-1}$$\nThe rate-limiting steps are step $2$ and step $3$, which are co-limiting as they have identical and minimal capacities.\n\n**Analysis for *Saccharomyces cerevisiae***\nIn this chassis, enzyme $E_2$ is only partially active. The number of active $E_2$ molecules is:\n$n_{2, \\text{active}}^{(\\text{Sc})} = n_{2}^{(\\text{Sc})} \\cdot f_{2}^{(\\text{Sc})} = (3.0 \\times 10^{3}) \\cdot (0.80) = 2.4 \\times 10^{3}$.\nEnzymes $E_1$ and $E_3$ are fully active: $n_{1, \\text{active}}^{(\\text{Sc})} = n_{1}^{(\\text{Sc})} = 1.5 \\times 10^{4}$ and $n_{3, \\text{active}}^{(\\text{Sc})} = n_{3}^{(\\text{Sc})} = 5.0 \\times 10^{3}$.\n\nThe step capacities are:\n$J_{1}^{(\\text{Sc})} = \\frac{10}{11} k_{\\text{cat},1} n_{1, \\text{active}}^{(\\text{Sc})} = \\frac{10}{11} (50) (1.5 \\times 10^{4}) = \\frac{10}{11} (75 \\times 10^{4}) = \\frac{7500 \\times 10^{3}}{11}$ molecules cell$^{-1}$ s$^{-1}$.\n$J_{2}^{(\\text{Sc})} = \\frac{10}{11} k_{\\text{cat},2} n_{2, \\text{active}}^{(\\text{Sc})} = \\frac{10}{11} (25) (2.4 \\times 10^{3}) = \\frac{10}{11} (60 \\times 10^{3}) = \\frac{600 \\times 10^{3}}{11}$ molecules cell$^{-1}$ s$^{-1}$.\n$J_{3}^{(\\text{Sc})} = \\frac{10}{11} k_{\\text{cat},3} n_{3, \\text{active}}^{(\\text{Sc})} = \\frac{10}{11} (100) (5.0 \\times 10^{3}) = \\frac{10}{11} (500 \\times 10^{3}) = \\frac{5000 \\times 10^{3}}{11}$ molecules cell$^{-1}$ s$^{-1}$.\n\nComparing these values, the minimum capacity is $\\frac{600 \\times 10^{3}}{11}$.\nTherefore, the steady-state pathway flux in *S. cerevisiae* is:\n$$J^{(\\text{Sc})} = \\min(J_{1}^{(\\text{Sc})}, J_{2}^{(\\text{Sc})}, J_{3}^{(\\text{Sc})}) = \\frac{600 \\times 10^{3}}{11} \\text{ molecules cell}^{-1} \\text{ s}^{-1}$$\nThe rate-limiting step is step $2$.\n\n**Final Calculation**\nThe problem requests the ratio of the steady-state per-cell flux in *E. coli* to that in *S. cerevisiae*.\n$$ \\text{Ratio} = \\frac{J^{(\\text{Ec})}}{J^{(\\text{Sc})}} = \\frac{\\frac{2000 \\times 10^{3}}{11}}{\\frac{600 \\times 10^{3}}{11}} $$\nThe common factors of $\\frac{10^3}{11}$ cancel:\n$$ \\text{Ratio} = \\frac{2000}{600} = \\frac{20}{6} = \\frac{10}{3} $$\nThis is the final answer as an exact fraction.", "answer": "$$\\boxed{\\frac{10}{3}}$$", "id": "2732893"}, {"introduction": "A crucial decision in synthetic biology is how to introduce a genetic circuit into a chassis: on a multi-copy plasmid or as a stable integration into the chromosome. This choice profoundly impacts not just the average expression level but also its cell-to-cell variability, or \"noise\". This practice employs the law of total variance to dissect the origins of expression noise, separating the contribution of a gene's intrinsic biochemical stochasticity from the extrinsic noise caused by fluctuations in plasmid copy number [@problem_id:2732815]. Mastering this analysis provides a quantitative basis for choosing an expression platform that meets the specific stability requirements of an application.", "problem": "In a comparative study of gene expression noise across chassis organisms, an engineered reporter gene is expressed from either a medium-copy plasmid in Escherichia coli (E. coli) or a single-copy genomic integration in Saccharomyces cerevisiae (S. cerevisiae). The following experimentally measured and standardized quantities are provided:\n\n1. Per-copy expression statistics of the reporter, measured under identical promoter, untranslated region, and codon-optimization contexts across hosts: the protein output per gene copy over a fixed cell-ageâ€“matched sampling window is a random variable with mean $\\alpha = 50$ molecules per copy and variance $\\sigma^2 = 2500$ molecules$^2$ per copy. Assume these per-copy contributions are independent and identically distributed across copies and independent of copy number, conditional on the cellular state.\n\n2. Copy number statistics:\n   - For the E. coli plasmid construct, the plasmid copy number per cell is a random variable with mean $\\mathbb{E}[N_{\\mathrm{pl}}] = 20$ and variance $\\mathrm{Var}(N_{\\mathrm{pl}}) = 60$, reflecting cell-to-cell variation in plasmid segregation and replication.\n   - For the S. cerevisiae integrated construct, the copy number per cell is deterministic single-copy, $N_{\\mathrm{int}} \\equiv 1$, so that $\\mathbb{E}[N_{\\mathrm{int}}] = 1$ and $\\mathrm{Var}(N_{\\mathrm{int}}) = 0$.\n\nDefine the total cellular protein output as $X = \\sum_{i=1}^{N} Y_{i}$, where $N$ is the copy number in the corresponding system and $Y_{i}$ are independent per-copy outputs with mean $\\alpha$ and variance $\\sigma^2$. Using only fundamental probability rules (linearity of expectation and the law of total variance) and the gene dosage principle that expected output scales linearly with copy number, compute the expected mean and variance of total expression $X$ for each system.\n\nFinally, define the Fano factor as $\\mathrm{Fano}(X) = \\mathrm{Var}(X) / \\mathbb{E}[X]$. Compute the ratio of the plasmid constructâ€™s Fano factor to the integrated constructâ€™s Fano factor. Report only this ratio as a single dimensionless number. No rounding is required.", "solution": "The problem statement is subjected to validation.\n\n**Step 1: Extract Givens**\n- Per-copy mean expression: $\\alpha = 50$.\n- Per-copy variance of expression: $\\sigma^2 = 2500$.\n- Per-copy outputs $Y_i$ are independent and identically distributed (i.i.d.) random variables.\n- Total cellular protein output: $X = \\sum_{i=1}^{N} Y_i$.\n- *E. coli* plasmid system:\n    - Copy number is a random variable $N_{\\mathrm{pl}}$.\n    - Mean copy number: $\\mathbb{E}[N_{\\mathrm{pl}}] = 20$.\n    - Variance of copy number: $\\mathrm{Var}(N_{\\mathrm{pl}}) = 60$.\n- *S. cerevisiae* integrated system:\n    - Copy number is a deterministic constant $N_{\\mathrm{int}} = 1$.\n    - Mean copy number: $\\mathbb{E}[N_{\\mathrm{int}}] = 1$.\n    - Variance of copy number: $\\mathrm{Var}(N_{\\mathrm{int}}) = 0$.\n- Definition of Fano factor: $\\mathrm{Fano}(X) = \\mathrm{Var}(X) / \\mathbb{E}[X]$.\n- Required calculation: The ratio of the plasmid constructâ€™s Fano factor to the integrated constructâ€™s Fano factor.\n\n**Step 2: Validate Using Extracted Givens**\nThe problem is scientifically grounded, employing established models of gene expression noise from quantitative biology. The model of total expression as a sum of i.i.d. random variables, where the number of terms in the sum is itself a random variable, is a standard compound random variable formulation. The problem is well-posed, providing all necessary parameters and definitions for a unique solution. It is stated objectively and formally. It does not violate any of the invalidity criteria.\n\n**Step 3: Verdict and Action**\nThe problem is valid. A complete solution will be provided.\n\nThe total protein output, $X$, is a compound random variable defined as $X = \\sum_{i=1}^{N} Y_{i}$, where $N$ is the random gene copy number and $Y_{i}$ are i.i.d. random variables representing protein expression from the $i$-th gene copy, with mean $\\mathbb{E}[Y_{i}] = \\alpha$ and variance $\\mathrm{Var}(Y_{i}) = \\sigma^2$. We will first derive general expressions for the mean and variance of $X$.\n\nTo find the expected value of $X$, we apply the Law of Total Expectation (or the tower property):\n$$ \\mathbb{E}[X] = \\mathbb{E}[\\mathbb{E}[X|N]] $$\nFirst, we compute the inner conditional expectation, $\\mathbb{E}[X|N]$. Given a fixed copy number $N=n$, the conditional expectation is:\n$$ \\mathbb{E}[X|N=n] = \\mathbb{E}\\left[\\sum_{i=1}^{n} Y_{i}\\right] = \\sum_{i=1}^{n} \\mathbb{E}[Y_{i}] = n\\alpha $$\nThus, the conditional expectation as a function of the random variable $N$ is $\\mathbb{E}[X|N] = N\\alpha$.\nSubstituting this back into the Law of Total Expectation:\n$$ \\mathbb{E}[X] = \\mathbb{E}[N\\alpha] = \\alpha \\mathbb{E}[N] $$\n\nTo find the variance of $X$, we apply the Law of Total Variance:\n$$ \\mathrm{Var}(X) = \\mathbb{E}[\\mathrm{Var}(X|N)] + \\mathrm{Var}(\\mathbb{E}[X|N]) $$\nWe must compute the two terms on the right-hand side.\nFor the first term, we need the conditional variance $\\mathrm{Var}(X|N)$. Given a fixed copy number $N=n$, and since the $Y_i$ are independent:\n$$ \\mathrm{Var}(X|N=n) = \\mathrm{Var}\\left(\\sum_{i=1}^{n} Y_{i}\\right) = \\sum_{i=1}^{n} \\mathrm{Var}(Y_{i}) = n\\sigma^2 $$\nAs a function of the random variable $N$, this is $\\mathrm{Var}(X|N) = N\\sigma^2$. The expectation of this quantity is:\n$$ \\mathbb{E}[\\mathrm{Var}(X|N)] = \\mathbb{E}[N\\sigma^2] = \\sigma^2 \\mathbb{E}[N] $$\nFor the second term, we use the expression for the conditional expectation derived earlier, $\\mathbb{E}[X|N] = N\\alpha$:\n$$ \\mathrm{Var}(\\mathbb{E}[X|N]) = \\mathrm{Var}(N\\alpha) = \\alpha^2 \\mathrm{Var}(N) $$\nCombining these two terms, the total variance of $X$ is:\n$$ \\mathrm{Var}(X) = \\sigma^2 \\mathbb{E}[N] + \\alpha^2 \\mathrm{Var}(N) $$\n\nNow, we apply these general formulae to the two specified biological systems.\n\n**System 1: *E. coli* Plasmid Construct ($X_{\\mathrm{pl}}$)**\nThe given parameters are $\\mathbb{E}[N_{\\mathrm{pl}}] = 20$, $\\mathrm{Var}(N_{\\mathrm{pl}}) = 60$, $\\alpha = 50$, and $\\sigma^2 = 2500$.\nThe mean total expression is:\n$$ \\mathbb{E}[X_{\\mathrm{pl}}] = \\alpha \\mathbb{E}[N_{\\mathrm{pl}}] = (50)(20) = 1000 $$\nThe variance of total expression is:\n$$ \\mathrm{Var}(X_{\\mathrm{pl}}) = \\sigma^2 \\mathbb{E}[N_{\\mathrm{pl}}] + \\alpha^2 \\mathrm{Var}(N_{\\mathrm{pl}}) = (2500)(20) + (50)^2(60) $$\n$$ \\mathrm{Var}(X_{\\mathrm{pl}}) = 50000 + (2500)(60) = 50000 + 150000 = 200000 $$\nThe Fano factor for the plasmid system is:\n$$ \\mathrm{Fano}(X_{\\mathrm{pl}}) = \\frac{\\mathrm{Var}(X_{\\mathrm{pl}})}{\\mathbb{E}[X_{\\mathrm{pl}}]} = \\frac{200000}{1000} = 200 $$\n\n**System 2: *S. cerevisiae* Integrated Construct ($X_{\\mathrm{int}}$)**\nThe given parameters are $\\mathbb{E}[N_{\\mathrm{int}}] = 1$, $\\mathrm{Var}(N_{\\mathrm{int}}) = 0$, $\\alpha = 50$, and $\\sigma^2 = 2500$.\nThe mean total expression is:\n$$ \\mathbb{E}[X_{\\mathrm{int}}] = \\alpha \\mathbb{E}[N_{\\mathrm{int}}] = (50)(1) = 50 $$\nThe variance of total expression is:\n$$ \\mathrm{Var}(X_{\\mathrm{int}}) = \\sigma^2 \\mathbb{E}[N_{\\mathrm{int}}] + \\alpha^2 \\mathrm{Var}(N_{\\mathrm{int}}) = (2500)(1) + (50)^2(0) $$\n$$ \\mathrm{Var}(X_{\\mathrm{int}}) = 2500 + 0 = 2500 $$\nThe Fano factor for the integrated system is:\n$$ \\mathrm{Fano}(X_{\\mathrm{int}}) = \\frac{\\mathrm{Var}(X_{\\mathrm{int}})}{\\mathbb{E}[X_{\\mathrm{int}}]} = \\frac{2500}{50} = 50 $$\n\nFinally, we compute the required ratio of the Fano factors.\n$$ \\text{Ratio} = \\frac{\\mathrm{Fano}(X_{\\mathrm{pl}})}{\\mathrm{Fano}(X_{\\mathrm{int}})} = \\frac{200}{50} = 4 $$\nThis ratio quantifies the increase in relative expression noise (as measured by the Fano factor) that arises from using a multi-copy plasmid with copy number fluctuations compared to a stable, single-copy genomic integration.", "answer": "$$\\boxed{4}$$", "id": "2732815"}]}