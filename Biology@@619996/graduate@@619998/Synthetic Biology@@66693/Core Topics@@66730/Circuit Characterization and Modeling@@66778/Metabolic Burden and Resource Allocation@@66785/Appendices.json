{"hands_on_practices": [{"introduction": "Understanding metabolic burden begins with quantifying its most direct component: the energetic cost of synthesizing heterologous proteins. This exercise provides a foundational, bottom-up approach to calculating the ATP demand of translation. By applying established bioenergetic costs for amino acid activation, peptide elongation, and translation initiation/termination, you will determine the maximum protein production rate a cell can sustain, offering a tangible link between a synthetic circuit's output and the host's central energy budget [@problem_id:2750632].", "problem": "A single bacterial cell at steady state produces adenosine triphosphate (ATP) at a rate of $6\\times 10^{9}\\ \\text{ATP s}^{-1}$. The cell must reserve $1\\times 10^{9}\\ \\text{ATP s}^{-1}$ to sustain baseline maintenance processes such as ion homeostasis, protein quality control, and turnover, and this maintenance allocation cannot be reduced. The remaining ATP can be allocated to heterologous protein synthesis. Consider a heterologous protein of length $300$ amino acids (aa). Assume the following widely used energetic accounting based on the Central Dogma of molecular biology and biochemical measurements of translation:\n\n- Charging a transfer ribonucleic acid (tRNA) with one amino acid by aminoacyl-tRNA synthetase consumes an ATP molecule to adenosine monophosphate (AMP) plus pyrophosphate, which corresponds to $2$ ATP-equivalents per incorporated amino acid when counting high-energy phosphate bonds.\n- Elongation for each incorporated amino acid consumes $2$ guanosine triphosphate (GTP) molecules (one for delivery and one for translocation); count each GTP hydrolysis as $1$ ATP-equivalent, for a total of $2$ ATP-equivalents per incorporated amino acid.\n- Initiation and termination together consume a fixed overhead of $2$ GTP per completed polypeptide; count this as $2$ ATP-equivalents per protein.\n- Neglect the ATP cost of transcription, messenger ribonucleic acid (mRNA) turnover, protein folding, and post-translational processing, and assume that ribosomes and precursor supply are not limiting.\n\nUnder these assumptions, and without diverting any ATP from maintenance demand, what is the maximal sustainable production rate of the $300$ aa protein, expressed in molecules per second? Round your answer to three significant figures and report it in units of molecules s$^{-1}$.", "solution": "The problem statement is subjected to validation.\n\n**Step 1: Extract Givens**\n- Total ATP production rate, $R_{ATP, total} = 6 \\times 10^{9}\\ \\text{ATP s}^{-1}$.\n- Maintenance ATP consumption rate, $R_{ATP, maint} = 1 \\times 10^{9}\\ \\text{ATP s}^{-1}$.\n- Heterologous protein length, $L_p = 300$ amino acids (aa).\n- Cost of tRNA charging, $C_{charge} = 2$ ATP-equivalents per amino acid.\n- Cost of elongation, $C_{elong} = 2$ GTP per amino acid.\n- Energetic equivalence, $1$ GTP $= 1$ ATP-equivalent.\n- Fixed cost of initiation and termination, $C_{fixed, \\text{GTP}} = 2$ GTP per polypeptide.\n- Assumptions: Neglect costs of transcription, mRNA turnover, protein folding, and post-translational processing. Ribosomes and precursors are not limiting.\n- Objective: Calculate the maximal sustainable production rate of the protein in molecules per second, rounded to three significant figures.\n\n**Step 2: Validate Using Extracted Givens**\nThe problem is scientifically grounded, as it is based on established principles of bioenergetics and metabolic accounting in molecular biology. The provided numerical values for ATP production rates and costs of protein synthesis are consistent with figures reported for model organisms like *Escherichia coli*. The problem is well-posed, providing all necessary information to calculate a unique, meaningful solution. It is stated objectively and is free from ambiguity or contradiction. The assumptions made, such as neglecting transcription costs and assuming non-limiting resources, are common and explicitly stated simplifications used in such models to isolate the impact of translational burden. The problem is neither trivial nor pseudo-profound; it requires a straightforward but non-obvious calculation based on fundamental principles.\n\n**Step 3: Verdict and Action**\nThe problem is deemed valid. A solution will be formulated.\n\nThe solution proceeds by first determining the net ATP flux available for heterologous protein synthesis, then calculating the total energetic cost to synthesize a single polypeptide, and finally dividing the available flux by the per-unit cost to find the maximal production rate.\n\nFirst, we calculate the rate of ATP supply available for protein production, $R_{ATP, avail}$. This is the total ATP production rate, $R_{ATP, total}$, minus the non-negotiable rate required for maintenance processes, $R_{ATP, maint}$.\n$$R_{ATP, avail} = R_{ATP, total} - R_{ATP, maint}$$\nSubstituting the given values:\n$$R_{ATP, avail} = (6 \\times 10^{9} - 1 \\times 10^{9})\\ \\text{ATP s}^{-1} = 5 \\times 10^{9}\\ \\text{ATP s}^{-1}$$\nThis is the total energetic currency available per second for the synthesis of the heterologous protein.\n\nNext, we calculate the total cost in ATP-equivalents to synthesize one molecule of the protein, which we denote as $C_{protein}$. This cost is the sum of a variable cost that scales with protein length and a fixed cost for initiation and termination.\n\nThe variable cost is associated with the incorporation of each amino acid. For each of the $L_p = 300$ amino acids, there are two components:\n1.  The cost of charging a tRNA molecule, $C_{charge} = 2$ ATP-equivalents per amino acid.\n2.  The cost of elongation (tRNA delivery and translocation), which consumes $2$ GTP molecules per amino acid. Given that $1$ GTP is equivalent to $1$ ATP, this cost is $C_{elong} = 2 \\times 1 = 2$ ATP-equivalents per amino acid.\n\nThe total cost per amino acid, $C_{aa}$, is therefore:\n$$C_{aa} = C_{charge} + C_{elong} = 2 + 2 = 4\\ \\text{ATP-equivalents per amino acid}$$\nThe total variable cost for a protein of length $L_p$ is:\n$$C_{variable} = C_{aa} \\times L_p = 4 \\times 300 = 1200\\ \\text{ATP-equivalents}$$\nThe fixed cost, $C_{fixed}$, for initiation and termination is given as $2$ GTP per protein. This is equivalent to:\n$$C_{fixed} = 2\\ \\text{GTP} \\times \\frac{1\\ \\text{ATP-equivalent}}{1\\ \\text{GTP}} = 2\\ \\text{ATP-equivalents}$$\nThe total cost to synthesize one protein molecule is the sum of the variable and fixed costs:\n$$C_{protein} = C_{variable} + C_{fixed} = 1200 + 2 = 1202\\ \\text{ATP-equivalents per molecule}$$\nFinally, the maximal sustainable production rate of the protein, $P_{max}$, is the available ATP supply rate divided by the cost per protein molecule:\n$$P_{max} = \\frac{R_{ATP, avail}}{C_{protein}}$$\nSubstituting the calculated values:\n$$P_{max} = \\frac{5 \\times 10^{9}\\ \\text{ATP s}^{-1}}{1202\\ \\text{ATP molecule}^{-1}} \\approx 4159733.777\\ \\text{molecules s}^{-1}$$\nThe problem requires the answer to be rounded to three significant figures.\n$$P_{max} \\approx 4.16 \\times 10^{6}\\ \\text{molecules s}^{-1}$$\nThis represents the maximum number of protein molecules that can be synthesized per second given the specified energetic constraints.", "answer": "$$\\boxed{4.16 \\times 10^{6}}$$", "id": "2750632"}, {"introduction": "Beyond the cost of a single protein, effective metabolic engineering requires the optimal allocation of cellular resources across an entire pathway. This practice explores how to minimize the total protein mass investment needed to sustain a desired metabolic flux. By analyzing a simple two-enzyme pathway, you will derive the principle that pathway efficiency is maximized when the proteome is allocated in inverse proportion to the enzymes' catalytic efficiencies ($k_{\\text{cat}}$), a core concept in balancing synthetic pathways to avoid bottlenecks and reduce burden [@problem_id:2750701].", "problem": "An engineered $2$-step linear biosynthetic pathway in a bacterium converts an abundant precursor to a product via two serial enzymes $E_{1}$ and $E_{2}$. Under steady state, the pathway flux is constrained to a fixed value $v$ by upstream physiological demands. Both enzymes operate under saturating substrate conditions so that each step’s rate equals its catalytic capacity. Assume the following physical and biological bases:\n- Under saturating conditions of Michaelis–Menten (MM) kinetics, the rate through step $i$ is $v_{i} = k_{\\text{cat},i} E_{i}$, where $k_{\\text{cat},i}$ is the turnover number and $E_{i}$ is the molar concentration of catalytically active enzyme $i$.\n- The steady-state flux through serial steps is equal, so $v = v_{1} = v_{2}$.\n- The total protein mass invested in the pathway is proportional to $E_{1} + E_{2}$ because both enzymes have equal molecular mass per active site and identical per-mole protein cost in the cytosol.\n- There are no extraneous constraints such as crowding penalties or chaperone limitations beyond the proportional mass cost.\n\nYou are given $k_{\\text{cat},1} = 100\\ \\text{s}^{-1}$ and $k_{\\text{cat},2} = 10\\ \\text{s}^{-1}$. For a fixed flux $v$, determine the mass fraction allocated to enzyme $E_{1}$ that minimizes the total enzyme mass required to sustain the flux. Express your final answer as a single number representing the fraction of total enzyme mass assigned to $E_{1}$ (unitless). You may provide an exact fraction. If you choose a decimal representation, round your answer to five significant figures.", "solution": "The problem asks for the determination of the optimal allocation of cellular resources, specifically the mass fraction of enzyme $E_{1}$ in a two-step pathway, that minimizes the total enzyme mass required to sustain a fixed metabolic flux $v$.\n\nLet the molar concentrations of the two enzymes be $E_{1}$ and $E_{2}$. The problem states that the molecular mass per active site is identical for both enzymes. Therefore, minimizing the total protein mass is equivalent to minimizing the total molar concentration of enzymes, which we denote as $E_{total}$.\n$$E_{total} = E_{1} + E_{2}$$\nThe mass fraction allocated to enzyme $E_{1}$ is equivalent to its molar fraction, $f_{1}$.\n$$f_{1} = \\frac{E_{1}}{E_{1} + E_{2}} = \\frac{E_{1}}{E_{total}}$$\nFrom this definition, we can express the individual enzyme concentrations in terms of the total concentration $E_{total}$ and the fraction $f_{1}$:\n$$E_{1} = f_{1} E_{total}$$\n$$E_{2} = (1 - f_{1}) E_{total}$$\nThe rate of each enzymatic step, $v_{i}$, is given by the Michaelis-Menten equation under saturating substrate conditions, which simplifies to $v_{i} = k_{\\text{cat},i} E_{i}$. Substituting the expressions for $E_{1}$ and $E_{2}$ gives the catalytic capacity of each step as a function of $f_{1}$ and $E_{total}$:\n$$v_{1} = k_{\\text{cat},1} E_{1} = k_{\\text{cat},1} f_{1} E_{total}$$\n$$v_{2} = k_{\\text{cat},2} E_{2} = k_{\\text{cat},2} (1 - f_{1}) E_{total}$$\nThe overall flux $v$ of a linear pathway is limited by the rate of its slowest step (the bottleneck). Therefore, the steady-state flux $v$ is the minimum of the capacities of the individual steps.\n$$v = \\min(v_{1}, v_{2}) = \\min(k_{\\text{cat},1} f_{1} E_{total}, k_{\\text{cat},2} (1-f_{1}) E_{total})$$\nThe objective is to find the fraction $f_{1}$ that minimizes the total enzyme concentration $E_{total}$ required to achieve a fixed flux $v$. We can rearrange the flux equation to express $E_{total}$ as a function of $f_{1}$ and the constant flux $v$:\n$$E_{total}(f_{1}) = \\frac{v}{\\min(k_{\\text{cat},1} f_{1}, k_{\\text{cat},2} (1-f_{1}))}$$\nTo minimize $E_{total}(f_{1})$, we must maximize its denominator, which we define as a function $g(f_{1})$:\n$$g(f_{1}) = \\min(k_{\\text{cat},1} f_{1}, k_{\\text{cat},2} (1-f_{1}))$$\nThe function $g(f_{1})$ represents the minimum of two linear functions of $f_{1}$ over the interval $f_1 \\in [0, 1]$. The term $k_{\\text{cat},1} f_{1}$ is a monotonically increasing function of $f_{1}$, starting from $0$ at $f_{1}=0$. The term $k_{\\text{cat},2} (1-f_{1})$ is a monotonically decreasing function of $f_{1}$, starting from $k_{\\text{cat},2}$ at $f_{1}=0$. The maximum value of the minimum of these two functions occurs at the point where they are equal. At this point, the pathway is perfectly balanced, with no single step being a bottleneck.\nWe find the optimal fraction $f_{1}$ by setting the two arguments of the $\\min$ function equal to each other:\n$$k_{\\text{cat},1} f_{1} = k_{\\text{cat},2} (1-f_{1})$$\nSolving for $f_{1}$:\n$$k_{\\text{cat},1} f_{1} = k_{\\text{cat},2} - k_{\\text{cat},2} f_{1}$$\n$$k_{\\text{cat},1} f_{1} + k_{\\text{cat},2} f_{1} = k_{\\text{cat},2}$$\n$$f_{1} (k_{\\text{cat},1} + k_{\\text{cat},2}) = k_{\\text{cat},2}$$\n$$f_{1} = \\frac{k_{\\text{cat},2}}{k_{\\text{cat},1} + k_{\\text{cat},2}}$$\nThis expression gives the fraction of total enzyme that must be allocated to $E_{1}$ to maximize the pathway flux for a given total amount of enzyme, which is equivalent to minimizing the total enzyme required for a given flux.\nNow, we substitute the given values for the turnover numbers: $k_{\\text{cat},1} = 100\\ \\text{s}^{-1}$ and $k_{\\text{cat},2} = 10\\ \\text{s}^{-1}$.\n$$f_{1} = \\frac{10}{100 + 10} = \\frac{10}{110} = \\frac{1}{11}$$\nThe optimal fraction to allocate to enzyme $E_{1}$ is $\\frac{1}{11}$.", "answer": "$$\\boxed{\\frac{1}{11}}$$", "id": "2750701"}, {"introduction": "The principles of resource cost and optimal allocation can be scaled up to create powerful, predictive models of the entire cellular metabolism. This final hands-on practice guides you through the process of integrating a global proteome constraint into the framework of Flux Balance Analysis (FBA). You will derive a single linear constraint representing the finite proteome budget and implement it computationally, transforming classical FBA into a more realistic, resource-aware modeling tool that can predict growth-limiting trade-offs in metabolic network design [@problem_id:2750686].", "problem": "You are asked to implement a computational model that augments classical Flux Balance Analysis (FBA) with a proteome budget constraint to capture metabolic burden and resource allocation. The goal is to start from valid foundational principles and derive a linear optimization problem whose solution predicts the maximal growth rate. Then, quantify how the proteome constraint alters the predicted maximal growth rate by computing the ratio of the proteome-constrained optimum to the classical FBA optimum for a small, well-defined set of networks.\n\nFundamental base to be used:\n- Steady-state mass conservation for intracellular metabolites implies a linear constraint of the form $$S v = 0,$$ where $S$ is the stoichiometric matrix and $v$ is the vector of reaction fluxes, both defined over a fixed network.\n- Enzyme catalytic capacity yields the inequality $$v_i \\leq E_i k_{\\text{cat},i},$$ where $v_i$ is the flux, $E_i$ is the concentration (or allocation) of the enzyme catalyzing reaction $i$, and $k_{\\text{cat},i}$ is the catalytic turnover number for reaction $i$ in $\\text{h}^{-1}$.\n- A proteome budget captures a resource constraint on total enzyme allocation, such that $$\\sum_i E_i \\leq \\phi_P^{\\max},$$ where $\\phi_P^{\\max}$ is a dimensionless proteome fraction available for the modeled catalytic enzymes.\n\nFrom these premises, derive a linear constraint purely in terms of fluxes and catalytic turnover numbers that can be integrated into FBA. Formulate the growth-rate maximization as a linear program with and without this derived constraint. Assume the growth rate equals the flux through the biomass-producing reactions. Solve both optimization problems for each test network and compute the dimensionless ratio $r = \\mu_{\\text{prot}} / \\mu_{\\text{classical}}$, where $\\mu_{\\text{prot}}$ is the optimal growth rate with the proteome constraint and $\\mu_{\\text{classical}}$ is the optimal growth rate without it.\n\nImplementation requirements:\n- For each network, you must maximize a linear objective $c^\\top v$ subject to $S v = 0$ and bound constraints $l \\leq v \\leq u$. The objective encodes the biomass flux; if multiple biomass-producing reactions exist, $c$ can have multiple positive entries.\n- For the proteome-constrained case, add the single linear inequality that you derive from the enzyme capacity and proteome budget principles.\n- The growth rate has units of $\\text{h}^{-1}$; however, your required outputs are ratios that are unitless and must be expressed as decimals.\n\nTest suite:\nFor each case, the network is fully specified by the stoichiometric matrix $S$, the objective coefficient vector $c$, lower and upper bounds $l$ and $u$ for each flux, the catalytic turnover numbers $k_{\\text{cat}}$ in $\\text{h}^{-1}$, and the proteome budget $\\phi_P^{\\max}$ (dimensionless). In all cases, bounds are component-wise, and unbounded upper limits should be treated as $+\\infty$.\n\n- Case A (single-path growth; proteome non-limiting):\n  - $$S = \\begin{bmatrix} 1 & -1 \\end{bmatrix}.$$\n  - $$c = \\begin{bmatrix} 0 \\\\ 1 \\end{bmatrix}.$$\n  - $$l = \\begin{bmatrix} 0 \\\\ 0 \\end{bmatrix}, \\quad u = \\begin{bmatrix} 10 \\\\ +\\infty \\end{bmatrix}.$$\n  - $$k_{\\text{cat}} = \\begin{bmatrix} 1000 \\\\ 1000 \\end{bmatrix} \\ \\text{h}^{-1}.$$\n  - $$\\phi_P^{\\max} = 0.05.$$\n\n- Case B (single-path growth; proteome limiting):\n  - $$S = \\begin{bmatrix} 1 & -1 \\end{bmatrix}.$$\n  - $$c = \\begin{bmatrix} 0 \\\\ 1 \\end{bmatrix}.$$\n  - $$l = \\begin{bmatrix} 0 \\\\ 0 \\end{bmatrix}, \\quad u = \\begin{bmatrix} 10 \\\\ +\\infty \\end{bmatrix}.$$\n  - $$k_{\\text{cat}} = \\begin{bmatrix} 1000 \\\\ 1000 \\end{bmatrix} \\ \\text{h}^{-1}.$$\n  - $$\\phi_P^{\\max} = 0.001.$$\n\n- Case C (two alternative biomass routes; trade-off between yield and enzyme efficiency):\n  - $$S = \\begin{bmatrix} 1 & -1 & -2 \\end{bmatrix}.$$\n  - $$c = \\begin{bmatrix} 0 \\\\ 1 \\\\ 3 \\end{bmatrix}.$$\n  - $$l = \\begin{bmatrix} 0 \\\\ 0 \\\\ 0 \\end{bmatrix}, \\quad u = \\begin{bmatrix} 10 \\\\ +\\infty \\\\ +\\infty \\end{bmatrix}.$$\n  - $$k_{\\text{cat}} = \\begin{bmatrix} 500 \\\\ 2000 \\\\ 100 \\end{bmatrix} \\ \\text{h}^{-1}.$$\n  - $$\\phi_P^{\\max} = 0.02.$$\n\n- Case D (single-path growth; zero proteome budget):\n  - $$S = \\begin{bmatrix} 1 & -1 \\end{bmatrix}.$$\n  - $$c = \\begin{bmatrix} 0 \\\\ 1 \\end{bmatrix}.$$\n  - $$l = \\begin{bmatrix} 0 \\\\ 0 \\end{bmatrix}, \\quad u = \\begin{bmatrix} 10 \\\\ +\\infty \\end{bmatrix}.$$\n  - $$k_{\\text{cat}} = \\begin{bmatrix} 1000 \\\\ 1000 \\end{bmatrix} \\ \\text{h}^{-1}.$$\n  - $$\\phi_P^{\\max} = 0.$$\n\nYour program must:\n- For each case, solve two linear programs to obtain $\\mu_{\\text{classical}}$ and $\\mu_{\\text{prot}}$.\n- Compute the ratio $r = \\mu_{\\text{prot}} / \\mu_{\\text{classical}}$ as a decimal rounded to exactly $6$ decimal places.\n- Produce a single line of output containing the results as a comma-separated list enclosed in square brackets, in the order of the cases A, B, C, D, for example, $$[r_A, r_B, r_C, r_D].$$\n\nAll inputs are provided above; no user input is required. All outputs must be ratios that are unitless decimals rounded to exactly $6$ decimal places. Ensure scientific realism by adhering to the provided data and assumptions.", "solution": "The problem presented is a valid exercise in computational systems biology, specifically concerning the integration of resource allocation constraints into flux balance analysis. It is scientifically grounded, well-posed, and all necessary parameters for its solution are provided. We shall first derive the required constraint and then formulate the optimization problems.\n\nThe fundamental principles provided are:\n$1$. The enzyme capacity constraint for each reaction $i$:\n$$v_i \\leq E_i k_{\\text{cat},i}$$\nwhere $v_i$ is the flux, $E_i$ is the enzyme concentration, and $k_{\\text{cat},i}$ is the turnover number. The problem specifies non-negative lower bounds for all fluxes, so we consider $v_i \\geq 0$.\n\n$2$. The total proteome budget for the modeled enzymes:\n$$\\sum_i E_i \\leq \\phi_P^{\\max}$$\nwhere $\\phi_P^{\\max}$ is the maximum available proteome fraction.\n\nOur objective is to derive a single linear constraint on the fluxes $v_i$ by eliminating the enzyme concentrations $E_i$. From the enzyme capacity constraint, we can state the minimum required enzyme concentration to sustain a flux $v_i$. Assuming $k_{\\text{cat},i} > 0$, we rearrange the inequality to solve for $E_i$:\n$$E_i \\geq \\frac{v_i}{k_{\\text{cat},i}}$$\nThis inequality gives the minimal proteome resource that must be allocated to enzyme $i$ to achieve flux $v_i$. To satisfy the proteome budget for the entire network, the sum of these minimal allocations over all enzymes must not exceed the total available budget, $\\phi_P^{\\max}$. Summing the minimal requirement over all reactions $i$:\n$$\\sum_i E_i \\geq \\sum_i \\frac{v_i}{k_{\\text{cat},i}}$$\nBy combining this with the proteome budget constraint, we arrive at the desired relationship:\n$$\\sum_i \\frac{v_i}{k_{\\text{cat},i}} \\leq \\sum_i E_i \\leq \\phi_P^{\\max}$$\nThis yields the final linear inequality that constrains the reaction fluxes based on the total proteome budget:\n$$\\sum_i \\frac{v_i}{k_{\\text{cat},i}} \\leq \\phi_P^{\\max}$$\nThis constraint can be expressed in vector form as $a^\\top v \\leq \\phi_P^{\\max}$, where the components of the vector $a$ are the reciprocals of the turnover numbers, $a_i = 1/k_{\\text{cat},i}$.\n\nWe can now formulate the two required linear programming (LP) problems.\n\n$1$. **Classical Flux Balance Analysis (FBA):**\nThe objective is to maximize the growth rate, $\\mu_{\\text{classical}}$, which is represented by a linear combination of fluxes, $c^\\top v$.\n- **Maximize:** $\\mu_{\\text{classical}} = c^\\top v$\n- **Subject to:**\n  - $S v = 0$ (steady-state mass balance)\n  - $l \\leq v \\leq u$ (flux bounds)\n\n$2$. **Proteome-Constrained FBA (p-FBA):**\nThis formulation is identical to classical FBA, with the addition of the derived proteome constraint.\n- **Maximize:** $\\mu_{\\text{prot}} = c^\\top v$\n- **Subject to:**\n  - $S v = 0$\n  - $l \\leq v \\leq u$\n  - $\\sum_i \\frac{v_i}{k_{\\text{cat},i}} \\leq \\phi_P^{\\max}$ (proteome budget)\n\nThese are standard LP problems. To solve them computationally using a typical solver that performs minimization, such as `scipy.optimize.linprog`, we reformulate the maximization of $c^\\top v$ as the minimization of $-c^\\top v$. The optimal objective value from the solver, let us call it $\\mu^*$, relates to the maximal growth rate by $\\mu = -\\mu^*$.\n\nFor each test case, we solve both LP problems to find $\\mu_{\\text{classical}}$ and $\\mu_{\\text{prot}}$. The final requested quantity is the dimensionless ratio $r = \\mu_{\\text{prot}} / \\mu_{\\text{classical}}$, which quantifies the impact of the proteome constraint on the predicted maximal growth rate. The implementation will proceed by constructing the appropriate matrices and vectors for each case and employing a numerical LP solver.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.optimize import linprog\n\ndef solve():\n    \"\"\"\n    Solves for the ratio of proteome-constrained to classical FBA optimal growth rates\n    for a series of test cases.\n    \"\"\"\n    test_cases = [\n        # Case A: single-path growth; proteome non-limiting\n        {\n            \"S\": np.array([[1, -1]]),\n            \"c\": np.array([0, 1]),\n            \"l\": np.array([0, 0]),\n            \"u\": np.array([10, np.inf]),\n            \"k_cat\": np.array([1000, 1000]),\n            \"phi_P_max\": 0.05\n        },\n        # Case B: single-path growth; proteome limiting\n        {\n            \"S\": np.array([[1, -1]]),\n            \"c\": np.array([0, 1]),\n            \"l\": np.array([0, 0]),\n            \"u\": np.array([10, np.inf]),\n            \"k_cat\": np.array([1000, 1000]),\n            \"phi_P_max\": 0.001\n        },\n        # Case C: two alternative biomass routes; trade-off\n        {\n            \"S\": np.array([[1, -1, -2]]),\n            \"c\": np.array([0, 1, 3]),\n            \"l\": np.array([0, 0, 0]),\n            \"u\": np.array([10, np.inf, np.inf]),\n            \"k_cat\": np.array([500, 2000, 100]),\n            \"phi_P_max\": 0.02\n        },\n        # Case D: single-path growth; zero proteome budget\n        {\n            \"S\": np.array([[1, -1]]),\n            \"c\": np.array([0, 1]),\n            \"l\": np.array([0, 0]),\n            \"u\": np.array([10, np.inf]),\n            \"k_cat\": np.array([1000, 1000]),\n            \"phi_P_max\": 0.0\n        }\n    ]\n\n    results = []\n    for case in test_cases:\n        S = case[\"S\"]\n        c = case[\"c\"]\n        l = case[\"l\"]\n        u = case[\"u\"]\n        k_cat = case[\"k_cat\"]\n        phi_P_max = case[\"phi_P_max\"]\n        \n        # Common parameters for linprog\n        # We maximize c'v by minimizing -c'v\n        c_obj = -c\n        A_eq = S\n        b_eq = np.zeros(S.shape[0])\n        \n        # Create bounds list, replacing np.inf with None for scipy\n        bounds = []\n        for i in range(len(l)):\n            upper_bound = u[i] if u[i] != np.inf else None\n            bounds.append((l[i], upper_bound))\n\n        # 1. Solve classical FBA\n        res_classical = linprog(c=c_obj, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')\n        \n        # The result from minimizing -c'v is -mu\n        mu_classical = -res_classical.fun if res_classical.success else 0.0\n\n        # 2. Solve proteome-constrained FBA\n        # Add the proteome constraint: sum(v_i / k_cat_i) <= phi_P_max\n        A_ub_prot = (1 / k_cat).reshape(1, -1)\n        b_ub_prot = [phi_P_max]\n        \n        res_prot = linprog(c=c_obj, A_eq=A_eq, b_eq=b_eq, A_ub=A_ub_prot, b_ub=b_ub_prot, bounds=bounds, method='highs')\n\n        mu_prot = -res_prot.fun if res_prot.success else 0.0\n        \n        # 3. Compute the ratio\n        if mu_classical > 1e-9:  # Avoid division by zero\n            ratio = mu_prot / mu_classical\n        else:\n            # If classical growth is zero, the ratio is ill-defined unless proteome-\n            # constrained growth is also zero, in which case one might consider the ratio to be 1.\n            # However, for the given problem, mu_classical is always positive.\n            # Case D gives mu_prot = 0, mu_classical = 10, so ratio is 0.\n            ratio = 0.0\n\n        results.append(f\"{ratio:.6f}\")\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2750686"}]}