{"hands_on_practices": [{"introduction": "A central goal of computational enzyme design is to rationally modify a protein's structure to achieve a desired change in its catalytic activity. This first exercise provides a direct, hands-on application of transition state theory to a core design problem [@problem_id:2713840]. You will connect a computational prediction—a change in the activation free energy, a quantity denoted as $\\Delta\\Delta G^{\\ddagger}$—to its expected consequence on the enzyme's catalytic efficiency, $k_{\\text{cat}}/K_M$. This calculation is fundamental for translating theoretical models into testable kinetic hypotheses about enzyme performance.", "problem": "In a computational protein design campaign to alter substrate specificity, you engineer a single amino acid substitution in an enzyme’s active site to preferentially stabilize the transition state of a non-native substrate $S_2$. The design model predicts a change in activation free energy for the rate-limiting step of catalysis for $S_2$ of $\\Delta\\Delta G^{\\ddagger} = \\Delta G^{\\ddagger}_{\\text{mut}} - \\Delta G^{\\ddagger}_{\\text{wt}} = -1.80~\\text{kcal}\\cdot\\text{mol}^{-1}$ at temperature $T = 298~\\text{K}$. Assume that ground-state binding is unchanged so that the Michaelis constant $K_M$ is unaffected by the mutation for $S_2$. Using transition state theory and standard thermodynamic-statistical reasoning, determine the expected fold-change in catalytic efficiency $k_{\\text{cat}}/K_M$ for $S_2$ between mutant and wild type. Use the gas constant $R = 1.987 \\times 10^{-3}~\\text{kcal}\\cdot\\text{mol}^{-1}\\cdot\\text{K}^{-1}$. Express your answer as a dimensionless fold-change and round to three significant figures.", "solution": "The problem statement will first be subjected to a rigorous validation process.\n\nStep 1: Extract Givens.\n- The system involves a wild-type enzyme (wt) and a mutant enzyme (mut).\n- The substrate of interest is a non-native substrate, denoted $S_2$.\n- The change in activation free energy for the rate-limiting step of catalysis for $S_2$ is given as $\\Delta\\Delta G^{\\ddagger} = \\Delta G^{\\ddagger}_{\\text{mut}} - \\Delta G^{\\ddagger}_{\\text{wt}} = -1.80~\\text{kcal}\\cdot\\text{mol}^{-1}$.\n- The temperature is constant at $T = 298~\\text{K}$.\n- An explicit assumption is provided: the Michaelis constant $K_M$ is unaffected by the mutation for substrate $S_2$.\n- The value of the gas constant is $R = 1.987 \\times 10^{-3}~\\text{kcal}\\cdot\\text{mol}^{-1}\\cdot\\text{K}^{-1}$.\n- The objective is to determine the dimensionless fold-change in catalytic efficiency, $\\frac{k_{\\text{cat}}}{K_M}$, for the mutant relative to the wild type, rounded to three significant figures.\n\nStep 2: Validate Using Extracted Givens.\n- Scientific Grounding: The problem is fundamentally based on transition state theory and Michaelis-Menten enzyme kinetics, which are cornerstones of physical chemistry and biochemistry. The scenario, altering enzyme specificity through mutation, is a primary goal of computational protein design and synthetic biology. The provided numerical values for energy, temperature, and the gas constant are physically realistic and consistent. The problem is scientifically sound.\n- Well-Posedness: The problem is well-posed. It asks for a specific, calculable quantity (fold-change in catalytic efficiency) and provides all necessary data and a key simplifying assumption ($\\Delta K_M = 0$) to arrive at a unique solution.\n- Objectivity: The problem is stated in precise, objective, and quantitative terms, free of any subjective or ambiguous language.\n\nStep 3: Verdict and Action.\nThe problem is valid. It is a standard, well-defined problem in biophysical chemistry that can be solved using established principles. We will now proceed with the solution.\n\nThe core of the problem lies in the relationship between the rate constant of a reaction and its activation free energy, as described by transition state theory. For an enzymatic reaction, the catalytic rate constant, $k_{\\text{cat}}$, is related to the activation free energy of the rate-limiting step, $\\Delta G^{\\ddagger}$, by the Eyring equation:\n$$ k_{\\text{cat}} = \\kappa \\frac{k_B T}{h} \\exp\\left(-\\frac{\\Delta G^{\\ddagger}}{RT}\\right) $$\nwhere $\\kappa$ is the transmission coefficient (often assumed to be $1$), $k_B$ is the Boltzmann constant, $h$ is the Planck constant, $R$ is the gas constant, and $T$ is the absolute temperature. For our purposes, the pre-exponential factor $\\kappa \\frac{k_B T}{h}$ can be treated as a constant, $A$.\n$$ k_{\\text{cat}} = A \\exp\\left(-\\frac{\\Delta G^{\\ddagger}}{RT}\\right) $$\nWe are asked to find the fold-change in catalytic efficiency, which is defined as the ratio of the catalytic efficiency of the mutant enzyme to that of the wild-type enzyme.\n$$ \\text{Fold-change} = \\frac{(k_{\\text{cat}}/K_M)_{\\text{mut}}}{(k_{\\text{cat}}/K_M)_{\\text{wt}}} $$\nThe problem explicitly states that the ground-state binding is unchanged, which implies that the Michaelis constant, $K_M$, is the same for both the wild-type and mutant enzymes with respect to substrate $S_2$. That is, $(K_M)_{\\text{mut}} = (K_M)_{\\text{wt}}$. Therefore, the $K_M$ terms cancel out in the expression for the fold-change:\n$$ \\text{Fold-change} = \\frac{(k_{\\text{cat}})_{\\text{mut}}}{(k_{\\text{cat}})_{\\text{wt}}} $$\nNow, we substitute the expression for $k_{\\text{cat}}$ from transition state theory for both the mutant and wild-type enzymes.\n$$ \\text{Fold-change} = \\frac{A \\exp\\left(-\\frac{\\Delta G^{\\ddagger}_{\\text{mut}}}{RT}\\right)}{A \\exp\\left(-\\frac{\\Delta G^{\\ddagger}_{\\text{wt}}}{RT}\\right)} $$\nThe pre-exponential factor $A$ cancels, and we can combine the exponential terms:\n$$ \\text{Fold-change} = \\exp\\left(-\\frac{\\Delta G^{\\ddagger}_{\\text{mut}}}{RT} + \\frac{\\Delta G^{\\ddagger}_{\\text{wt}}}{RT}\\right) $$\n$$ \\text{Fold-change} = \\exp\\left(-\\frac{\\Delta G^{\\ddagger}_{\\text{mut}} - \\Delta G^{\\ddagger}_{\\text{wt}}}{RT}\\right) $$\nThe term in the numerator of the exponent is the given change in activation free energy, $\\Delta\\Delta G^{\\ddagger}$.\n$$ \\text{Fold-change} = \\exp\\left(-\\frac{\\Delta\\Delta G^{\\ddagger}}{RT}\\right) $$\nWe now substitute the provided numerical values into this expression.\nGiven:\n- $\\Delta\\Delta G^{\\ddagger} = -1.80~\\text{kcal}\\cdot\\text{mol}^{-1}$\n- $R = 1.987 \\times 10^{-3}~\\text{kcal}\\cdot\\text{mol}^{-1}\\cdot\\text{K}^{-1}$\n- $T = 298~\\text{K}$\n\nFirst, we calculate the value of the exponent:\n$$ -\\frac{\\Delta\\Delta G^{\\ddagger}}{RT} = -\\frac{-1.80~\\text{kcal}\\cdot\\text{mol}^{-1}}{(1.987 \\times 10^{-3}~\\text{kcal}\\cdot\\text{mol}^{-1}\\cdot\\text{K}^{-1})(298~\\text{K})} $$\nThe units cancel out as required for the argument of an exponential function.\n$$ \\text{Exponent} = \\frac{1.80}{1.987 \\times 10^{-3} \\times 298} = \\frac{1.80}{0.592126} \\approx 3.04000 $$\nNow, we compute the fold-change:\n$$ \\text{Fold-change} = \\exp(3.04000) \\approx 20.9056 $$\nThe problem requires the answer to be rounded to three significant figures, which is consistent with the precision of the input value $\\Delta\\Delta G^{\\ddagger} = -1.80$.\n$$ \\text{Fold-change} \\approx 20.9 $$\nThe negative sign for $\\Delta\\Delta G^{\\ddagger}$ indicates that the mutation stabilizes the transition state, which is expected to increase the catalytic rate, leading to a fold-change greater than $1$. Our result is consistent with this physical expectation.", "answer": "$$\n\\boxed{20.9}\n$$", "id": "2713840"}, {"introduction": "While the previous exercise established the energetic principles of enzyme engineering, this practice dives into the algorithmic methods used to achieve those energy changes. Here, you will tackle a simplified yet representative rotamer packing problem, a cornerstone of computational protein design software [@problem_id:2713890]. By implementing a geometric-combinatorial solver, you will find the minimal set of side-chain conformational changes required to introduce a new substrate into an active site without creating steric clashes, gaining practical insight into the complex structural optimization at the heart of redesigning specificity.", "problem": "You are tasked with implementing a geometric-combinatorial solver for a simplified protein design problem relevant to altering enzyme substrate specificity via side-chain rotamer changes. In the hard-sphere steric model, each atom is approximated as a sphere. Each side-chain rotamer of a residue is given as a finite set of pseudo-atom spheres that approximate the side-chain envelope. A substrate analog introduces an extra spherical substituent that must be accommodated without steric clashes.\n\nFundamental base:\n- In the hard-sphere model, two spheres with centers at positions $\\mathbf{x} \\in \\mathbb{R}^3$ and $\\mathbf{y} \\in \\mathbb{R}^3$ and radii $a \\in \\mathbb{R}_{\\ge 0}$ and $b \\in \\mathbb{R}_{\\ge 0}$ clash if and only if $\\lVert \\mathbf{x} - \\mathbf{y} \\rVert_2 < a + b$.\n- Side-chain rotamers are discrete conformations; choosing one rotamer per residue fixes its side-chain pseudo-atom geometry.\n\nMathematical formulation:\n- There are $N$ residues indexed by $i \\in \\{1,\\dots,N\\}$. Residue $i$ has $K_i$ rotamers indexed by $k \\in \\{0,1,\\dots,K_i-1\\}$. Rotamer $k$ of residue $i$ comprises $M_{i,k}$ pseudo-atoms with centers $\\{\\mathbf{x}_{i,k,m}\\}_{m=1}^{M_{i,k}} \\subset \\mathbb{R}^3$ and radii $\\{a_{i,k,m}\\}_{m=1}^{M_{i,k}} \\subset \\mathbb{R}_{\\ge 0}$.\n- The substrate analog’s extra substituent is a sphere with center $\\mathbf{s} \\in \\mathbb{R}^3$ and radius $r \\in \\mathbb{R}_{\\ge 0}$.\n- A selection is a choice of exactly one rotamer per residue. Let binary decision variables be $y_{i,k} \\in \\{0,1\\}$ with $\\sum_{k=0}^{K_i-1} y_{i,k} = 1$ for all $i$.\n- Substrate clash avoidance: for any chosen rotamer $(i,k)$ and any $m \\in \\{1,\\dots,M_{i,k}\\}$, require $\\lVert \\mathbf{x}_{i,k,m} - \\mathbf{s} \\rVert_2 \\ge a_{i,k,m} + r$.\n- Inter-residue clash avoidance: for any two distinct residues $i \\ne j$, chosen rotamers $(i,k)$ and $(j,\\ell)$, and any $m \\in \\{1,\\dots,M_{i,k}\\}$, $n \\in \\{1,\\dots,M_{j,\\ell}\\}$, require $\\lVert \\mathbf{x}_{i,k,m} - \\mathbf{x}_{j,\\ell,n} \\rVert_2 \\ge a_{i,k,m} + a_{j,\\ell,n}$.\n- The baseline (wild-type) assignment is $k=0$ for every residue $i$. Define the cost of an assignment as $C = \\sum_{i=1}^{N} \\left(1 - y_{i,0}\\right)$, which counts the number of residues changed from baseline. The goal is to minimize $C$ subject to the clash-avoidance constraints.\n- If no feasible assignment exists, return an infeasible indicator.\n\nGeometry and units:\n- All coordinates $\\mathbf{x}_{i,k,m}$ and $\\mathbf{s}$ are in Angstroms. All radii $a_{i,k,m}$ and $r$ are in Angstroms. All distances are Euclidean in Angstroms. Your program must compute exact clash checks using the strict inequality $\\lVert \\mathbf{x} - \\mathbf{y} \\rVert_2 < a + b$ as a clash definition.\n\nYour task:\n- Implement a program that, for each test case below, computes the minimal number of residues that must change rotamer relative to the baseline to accommodate the extra substituent without any clashes, or returns $-1$ if no feasible assignment exists.\n- The required final output format is a single line containing a list of the results for all test cases as a comma-separated list enclosed in square brackets, e.g., $[\\text{result}_1,\\text{result}_2,\\dots]$.\n- There are no physical units in the output because the outputs are integers.\n\nTest suite (use exactly these $4$ cases):\n\n- Test case $1$ (happy path):\n  - Substituent: center $\\mathbf{s} = (\\,0.0,\\,0.0,\\,0.0\\,)$, radius $r = 1.5$.\n  - Residue $1$:\n    - Rotamer $0$: one pseudo-atom at $(\\,1.5,\\,0.0,\\,0.0\\,)$ with radius $1.7$.\n    - Rotamer $1$: one pseudo-atom at $(\\,5.0,\\,0.0,\\,0.0\\,)$ with radius $1.7$.\n  - Residue $2$:\n    - Rotamer $0$: one pseudo-atom at $(\\,0.0,\\,1.5,\\,0.0\\,)$ with radius $1.7$.\n    - Rotamer $1$: one pseudo-atom at $(\\,0.0,\\,4.8,\\,0.0\\,)$ with radius $1.7$.\n  - Residue $3$:\n    - Rotamer $0$: one pseudo-atom at $(\\,0.0,\\,0.0,\\,4.0\\,)$ with radius $1.7$.\n    - Rotamer $1$: one pseudo-atom at $(\\,0.0,\\,0.0,\\,2.0\\,)$ with radius $1.7$.\n\n- Test case $2$ (no changes needed):\n  - Substituent: center $\\mathbf{s} = (\\,0.0,\\,0.0,\\,0.0\\,)$, radius $r = 1.2$.\n  - Residue $1$:\n    - Rotamer $0$: one pseudo-atom at $(\\,4.0,\\,0.0,\\,0.0\\,)$ with radius $1.7$.\n    - Rotamer $1$: one pseudo-atom at $(\\,5.0,\\,0.0,\\,0.0\\,)$ with radius $1.7$.\n  - Residue $2$:\n    - Rotamer $0$: one pseudo-atom at $(\\,0.0,\\,4.0,\\,0.0\\,)$ with radius $1.7$.\n    - Rotamer $1$: one pseudo-atom at $(\\,0.0,\\,5.0,\\,0.0\\,)$ with radius $1.7$.\n  - Residue $3$:\n    - Rotamer $0$: one pseudo-atom at $(\\,0.0,\\,0.0,\\,4.0\\,)$ with radius $1.7$.\n    - Rotamer $1$: one pseudo-atom at $(\\,0.0,\\,0.0,\\,5.0\\,)$ with radius $1.7$.\n\n- Test case $3$ (infeasible due to one residue with no acceptable rotamer):\n  - Substituent: center $\\mathbf{s} = (\\,0.0,\\,0.0,\\,0.0\\,)$, radius $r = 2.0$.\n  - Residue $1$:\n    - Rotamer $0$: one pseudo-atom at $(\\,2.0,\\,0.0,\\,0.0\\,)$ with radius $1.5$.\n    - Rotamer $1$: one pseudo-atom at $(\\,2.2,\\,0.0,\\,0.0\\,)$ with radius $1.5$.\n  - Residue $2$:\n    - Rotamer $0$: one pseudo-atom at $(\\,0.0,\\,4.0,\\,0.0\\,)$ with radius $1.7$.\n    - Rotamer $1$: one pseudo-atom at $(\\,0.0,\\,5.0,\\,0.0\\,)$ with radius $1.7$.\n\n- Test case $4$ (interaction-induced extra change needed):\n  - Substituent: center $\\mathbf{s} = (\\,0.0,\\,0.0,\\,0.0\\,)$, radius $r = 1.5$.\n  - Residue $A$ (treated as residue $1$):\n    - Rotamer $0$: one pseudo-atom at $(\\,3.6,\\,0.0,\\,0.0\\,)$ with radius $1.7$.\n    - Rotamer $1$: one pseudo-atom at $(\\,0.0,\\,3.6,\\,0.0\\,)$ with radius $1.7$.\n  - Residue $B$ (treated as residue $2$):\n    - Rotamer $0$: one pseudo-atom at $(\\,0.0,\\,1.5,\\,0.0\\,)$ with radius $1.7$.\n    - Rotamer $1$: one pseudo-atom at $(\\,3.6,\\,0.0,\\,0.0\\,)$ with radius $1.7$.\n\nFor each test case, compute the minimal number of residues that must change rotamer relative to baseline (rotamer index $0$) to satisfy all clash-avoidance constraints. If no feasible assignment exists, return $-1$. Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, for example $[x_1,x_2,x_3,x_4]$, where each $x_i$ is an integer for test case $i$.", "solution": "The problem presented is a well-posed combinatorial optimization problem rooted in the principles of computational protein design, a sub-discipline of synthetic biology. Its structure is scientifically sound, relying on the established hard-sphere model for steric interactions, and all necessary parameters are provided, rendering the problem valid for a formal solution.\n\nThe task is to find a selection of side-chain rotamers, one for each of the $N$ residues, that collectively avoids steric clashes while minimizing the number of deviations from a baseline (wild-type) conformation. The cost of an assignment is defined as $C = \\sum_{i=1}^{N} (1 - y_{i,0})$, where $y_{i,0}$ is a binary variable indicating if residue $i$ is in its baseline rotamer (indexed by $k=0$). This cost function quantifies the number of \"mutations\" or changes from the original state.\n\nThe system is subject to two sets of geometric constraints, both derived from the hard-sphere model. Two spheres, with centers $\\mathbf{x}, \\mathbf{y} \\in \\mathbb{R}^3$ and radii $a, b \\in \\mathbb{R}_{\\ge 0}$ respectively, are defined to clash if and only if the Euclidean distance between their centers is less than the sum of their radii: $\\lVert \\mathbf{x} - \\mathbf{y} \\rVert_2 < a + b$. For computational efficiency, this check is more readily implemented by comparing squared quantities: $\\lVert \\mathbf{x} - \\mathbf{y} \\rVert_2^2 < (a + b)^2$.\n\nThe constraints are:\n$1$. **Substrate-Residue Clash Avoidance:** For any selected rotamer $k$ of residue $i$, each of its constituent pseudo-atoms (center $\\mathbf{x}_{i,k,m}$, radius $a_{i,k,m}$) must not clash with the substrate's substituent sphere (center $\\mathbf{s}$, radius $r$). This is expressed as $\\lVert \\mathbf{x}_{i,k,m} - \\mathbf{s} \\rVert_2 \\ge a_{i,k,m} + r$ for all atoms $m$.\n$2$. **Inter-Residue Clash Avoidance:** For any two distinct residues $i$ and $j$ with selected rotamers $k$ and $\\ell$ respectively, none of their constituent pseudo-atoms may clash with one another. This is expressed as $\\lVert \\mathbf{x}_{i,k,m} - \\mathbf{x}_{j,\\ell,n} \\rVert_2 \\ge a_{i,k,m} + a_{j,\\ell,n}$ for all atom pairs $(m, n)$.\n\nA rotamer assignment is a vector of choices $(k_1, k_2, \\dots, k_N)$, where $k_i$ is the index of the chosen rotamer for residue $i$. The total set of possible assignments constitutes the search space. For a system with $N$ residues, where residue $i$ possesses $K_i$ possible rotamers, the total size of this discrete search space is $\\prod_{i=1}^{N} K_i$.\n\nFor the test cases provided, the number of residues $N$ (either $2$ or $3$) and the number of rotamers per residue $K_i$ (always $2$) are small. This results in a very small search space (e.g., $2^3 = 8$ total assignments for a $3$-residue system). Consequently, an exhaustive search, or brute-force enumeration, of all possible assignments is a computationally feasible and entirely rigorous method to find the optimal solution. This approach guarantees finding the global minimum cost if a feasible solution exists.\n\nThe algorithm proceeds as follows:\n$1$. Initialize a minimum cost variable, $\\text{min\\_cost}$, to a value larger than any possible cost, such as $N+1$ or infinity.\n$2$. Generate every possible rotamer assignment. An assignment is a tuple $(k_1, k_2, \\dots, k_N)$, where $k_i \\in \\{0, 1, \\dots, K_i-1\\}$. This can be achieved systematically, for instance, by computing the Cartesian product of the sets of rotamer indices for each residue.\n$3$. For each generated assignment:\n    a. Assume the assignment is valid.\n    b. Check for substrate clashes: For each residue $i \\in \\{1,\\dots,N\\}$, iterate through all pseudo-atoms of its assigned rotamer $k_i$ and verify the non-clash condition with the substrate sphere. If a clash is detected, the assignment is invalid; proceed to the next assignment.\n    c. If no substrate clashes are found, check for inter-residue clashes: For every unique pair of distinct residues $(i, j)$ with $i \\ne j$, iterate through all pairs of pseudo-atoms, one from rotamer $k_i$ and one from rotamer $k_j$, and verify the non-clash condition. If a clash is detected, the assignment is invalid; proceed to the next assignment.\n    d. If the assignment is deemed valid (i.e., it is clash-free), calculate its cost: $C = \\sum_{i=1}^{N} \\mathbb{I}(k_i \\ne 0)$, where $\\mathbb{I}$ is the indicator function. Update $\\text{min\\_cost} = \\min(\\text{min\\_cost}, C)$.\n$4$. After evaluating all possible assignments, if $\\text{min\\_cost}$ remains at its initial high value, it signifies that no feasible, clash-free assignment exists. In this case, the result is $-1$. Otherwise, the final value of $\\text{min\\_cost}$ is the minimum number of mutations required and is the solution.\n\nThis deterministic algorithm correctly solves the posed problem by systematically exploring the complete, finite solution space and identifying the feasible solution with the lowest cost.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom itertools import product, combinations\n\ndef solve():\n    \"\"\"\n    Main function to define test cases, run the solver for each,\n    and print the results in the required format.\n    \"\"\"\n    # Define the test cases from the problem statement.\n    test_cases_data = [\n        # Test case 1 (happy path)\n        {\n            'substrate': {'center': np.array([0.0, 0.0, 0.0]), 'radius': 1.5},\n            'residues': [\n                # Residue 1\n                [\n                    [{'center': np.array([1.5, 0.0, 0.0]), 'radius': 1.7}], # Rotamer 0\n                    [{'center': np.array([5.0, 0.0, 0.0]), 'radius': 1.7}], # Rotamer 1\n                ],\n                # Residue 2\n                [\n                    [{'center': np.array([0.0, 1.5, 0.0]), 'radius': 1.7}], # Rotamer 0\n                    [{'center': np.array([0.0, 4.8, 0.0]), 'radius': 1.7}], # Rotamer 1\n                ],\n                # Residue 3\n                [\n                    [{'center': np.array([0.0, 0.0, 4.0]), 'radius': 1.7}], # Rotamer 0\n                    [{'center': np.array([0.0, 0.0, 2.0]), 'radius': 1.7}], # Rotamer 1\n                ],\n            ]\n        },\n        # Test case 2 (no changes needed)\n        {\n            'substrate': {'center': np.array([0.0, 0.0, 0.0]), 'radius': 1.2},\n            'residues': [\n                # Residue 1\n                [\n                    [{'center': np.array([4.0, 0.0, 0.0]), 'radius': 1.7}], # Rotamer 0\n                    [{'center': np.array([5.0, 0.0, 0.0]), 'radius': 1.7}], # Rotamer 1\n                ],\n                # Residue 2\n                [\n                    [{'center': np.array([0.0, 4.0, 0.0]), 'radius': 1.7}], # Rotamer 0\n                    [{'center': np.array([0.0, 5.0, 0.0]), 'radius': 1.7}], # Rotamer 1\n                ],\n                # Residue 3\n                [\n                    [{'center': np.array([0.0, 0.0, 4.0]), 'radius': 1.7}], # Rotamer 0\n                    [{'center': np.array([0.0, 0.0, 5.0]), 'radius': 1.7}], # Rotamer 1\n                ],\n            ]\n        },\n        # Test case 3 (infeasible due to one residue)\n        {\n            'substrate': {'center': np.array([0.0, 0.0, 0.0]), 'radius': 2.0},\n            'residues': [\n                # Residue 1\n                [\n                    [{'center': np.array([2.0, 0.0, 0.0]), 'radius': 1.5}], # Rotamer 0\n                    [{'center': np.array([2.2, 0.0, 0.0]), 'radius': 1.5}], # Rotamer 1\n                ],\n                # Residue 2\n                [\n                    [{'center': np.array([0.0, 4.0, 0.0]), 'radius': 1.7}], # Rotamer 0\n                    [{'center': np.array([0.0, 5.0, 0.0]), 'radius': 1.7}], # Rotamer 1\n                ],\n            ]\n        },\n        # Test case 4 (interaction-induced extra change needed)\n        {\n            'substrate': {'center': np.array([0.0, 0.0, 0.0]), 'radius': 1.5},\n            'residues': [\n                # Residue A (1)\n                [\n                    [{'center': np.array([3.6, 0.0, 0.0]), 'radius': 1.7}], # Rotamer 0\n                    [{'center': np.array([0.0, 3.6, 0.0]), 'radius': 1.7}], # Rotamer 1\n                ],\n                # Residue B (2)\n                [\n                    [{'center': np.array([0.0, 1.5, 0.0]), 'radius': 1.7}], # Rotamer 0\n                    [{'center': np.array([3.6, 0.0, 0.0]), 'radius': 1.7}], # Rotamer 1\n                ],\n            ]\n        }\n    ]\n\n    results = [solve_case(case) for case in test_cases_data]\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\ndef clashes(sphere1, sphere2):\n    \"\"\"\n    Checks if two spheres clash based on the hard-sphere model.\n    Uses squared distances for efficiency.\n    \"\"\"\n    center1, r1 = sphere1['center'], sphere1['radius']\n    center2, r2 = sphere2['center'], sphere2['radius']\n    dist_sq = np.sum((center1 - center2)**2)\n    radii_sum_sq = (r1 + r2)**2\n    return dist_sq < radii_sum_sq\n\ndef is_assignment_valid(assignment, substrate, residues):\n    \"\"\"\n    Checks if a given rotamer assignment is valid (clash-free).\n    \"\"\"\n    # Check for substrate clashes\n    for i, rot_idx in enumerate(assignment):\n        rotamer = residues[i][rot_idx]\n        for atom in rotamer:\n            if clashes(atom, substrate):\n                return False\n\n    # Check for inter-residue clashes\n    num_residues = len(residues)\n    if num_residues < 2:\n        return True\n    \n    for i, j in combinations(range(num_residues), 2):\n        rotamer_i = residues[i][assignment[i]]\n        rotamer_j = residues[j][assignment[j]]\n        for atom_i in rotamer_i:\n            for atom_j in rotamer_j:\n                if clashes(atom_i, atom_j):\n                    return False\n    return True\n\ndef solve_case(case_data):\n    \"\"\"\n    Solves a single test case by exhaustively searching all rotamer assignments.\n    \"\"\"\n    substrate = case_data['substrate']\n    residues = case_data['residues']\n    \n    # Generate all possible rotamer assignments using itertools.product\n    rotamer_indices_per_residue = [range(len(res)) for res in residues]\n    all_assignments = product(*rotamer_indices_per_residue)\n    \n    min_cost = float('inf')\n    \n    # Iterate through every possible assignment\n    for assignment in all_assignments:\n        if is_assignment_valid(assignment, substrate, residues):\n            # If the assignment is valid, calculate its cost\n            cost = sum(1 for rot_idx in assignment if rot_idx > 0)\n            # Update the minimum cost found so far\n            if cost < min_cost:\n                min_cost = cost\n                \n    return min_cost if min_cost != float('inf') else -1\n\nif __name__ == '__main__':\n    solve()\n\n```", "id": "2713890"}, {"introduction": "The design-build-test cycle is incomplete without rigorous experimental validation. This final practice places you in the role of an experimental biochemist tasked with deciphering the mechanistic basis of a computationally designed enzyme variant [@problem_id:2713915]. By analyzing hypothetical pH-rate profiles, you will learn to interpret kinetic data to distinguish between competing hypotheses, such as a shift in a catalytic residue's $\\text{p}K_a$ versus effects stemming from substrate ionization. This skill is crucial for verifying design principles and informing the next round of computational improvements.", "problem": "An engineered hydrolase is being redesigned to alter its substrate specificity between two esters, denoted $S_A$ (aryl ester) and $S_B$ (alkyl ester). A computational protein design workflow proposed mutations that reposition a general base in the active site to increase its basicity. To evaluate whether the resulting specificity arises primarily from altered acid dissociation constants ($\\text{p}K_a$) of catalytic residues or from differences in substrate ionization, you measure the second-order rate constant $k_{\\mathrm{cat}}/K_M$ as a function of acidity (pH) under identical conditions for the wild-type enzyme ($E_{\\mathrm{WT}}$) and the designed variant ($E^*$).\n\nExperimental details:\n- Temperature: $25\\,^{\\circ}\\mathrm{C}$; ionic strength: $0.15\\,\\mathrm{M}$; buffer components chosen to avoid general acid/base catalysis.\n- For each enzyme–substrate pair, $k_{\\mathrm{cat}}/K_M$ is measured across pH.\n- Independent solution measurements (no enzyme) indicate that the dominant ionizable group relevant to nucleophilic attack on $S_A$ has $\\text{p}K_a$ $=6.2$, whereas for $S_B$ it has $\\text{p}K_a$ $=9.6$.\n\nMeasured $k_{\\mathrm{cat}}/K_M$ values (in $\\mathrm{M^{-1}\\,s^{-1}}$):\n\n- $E_{\\mathrm{WT}}$ with $S_A$:\n  - pH $6.0$: $3.0\\times 10^{4}$\n  - pH $7.0$: $1.2\\times 10^{5}$\n  - pH $8.0$: $2.0\\times 10^{5}$\n  - pH $9.0$: $1.0\\times 10^{5}$\n  - pH $10.0$: $2.0\\times 10^{4}$\n\n- $E_{\\mathrm{WT}}$ with $S_B$:\n  - pH $6.0$: $1.5\\times 10^{4}$\n  - pH $7.0$: $6.0\\times 10^{4}$\n  - pH $8.0$: $1.0\\times 10^{5}$\n  - pH $9.0$: $5.0\\times 10^{4}$\n  - pH $10.0$: $1.0\\times 10^{4}$\n\n- $E^{*}$ with $S_A$:\n  - pH $7.0$: $2.0\\times 10^{5}$\n  - pH $8.0$: $4.0\\times 10^{5}$\n  - pH $9.0$: $2.0\\times 10^{5}$\n  - pH $10.0$: $4.0\\times 10^{4}$\n  - pH $11.0$: $8.0\\times 10^{3}$\n\n- $E^{*}$ with $S_B$:\n  - pH $7.0$: $1.0\\times 10^{5}$\n  - pH $8.0$: $2.0\\times 10^{5}$\n  - pH $9.0$: $1.0\\times 10^{5}$\n  - pH $10.0$: $2.0\\times 10^{4}$\n  - pH $11.0$: $4.0\\times 10^{3}$\n\nAssume that $k_{\\mathrm{cat}}/K_M$ reports on the fraction of the enzyme and substrate that are in their catalytically competent protonation states times a pH-independent chemical step for each enzyme–substrate pair, and that diffusion control is not operative in the measured range.\n\nWhich inference is best supported by these data?\n\nA. The altered specificity in $E^{*}$ arises primarily from an upward shift in the $\\text{p}K_a$ of a catalytic residue in the enzyme active site, producing a parallel pH-dependent shift for both substrates; substrate ionization differences do not measurably limit reactivity under these conditions.\n\nB. The altered specificity in $E^{*}$ arises primarily from the different solution $\\text{p}K_a$ values of $S_A$ and $S_B$, with the enzyme leaving catalytic residue protonation unchanged; the observed profiles reflect substrate protonation equilibria.\n\nC. The altered specificity in $E^{*}$ is due to pH-dependent changes in substrate diffusion coefficients, pushing $S_A$ reactions toward the encounter limit while leaving $S_B$ unaffected.\n\nD. Both enzyme residue $\\text{p}K_a$ shifts and substrate ionization contribute equally, as evidenced by non-parallel pH-rate profiles that cross as pH increases.", "solution": "The problem requires an analysis of pH-rate profiles for a wild-type hydrolase ($E_{\\mathrm{WT}}$) and a designed variant ($E^*$) with two different substrates, $S_A$ and $S_B$, to determine the molecular basis for changes in catalytic activity and specificity.\n\n### Step 1: Problem Validation\n\n**1. Extraction of Givens:**\n- **Enzymes:** Wild-type ($E_{\\mathrm{WT}}$) and designed variant ($E^*$).\n- **Substrates:** Aryl ester ($S_A$) and alkyl ester ($S_B$).\n- **Goal of redesign:** Alter substrate specificity by repositioning a general base to increase its basicity.\n- **Measured parameter:** Second-order rate constant $k_{\\mathrm{cat}}/K_M$ as a function of pH.\n- **Experimental Conditions:** Temperature $25\\,^{\\circ}\\mathrm{C}$, ionic strength $0.15\\,\\mathrm{M}$.\n- **Substrate $\\text{p}K_a$ values (in solution):** a group on $S_A$ has $\\text{p}K_a = 6.2$; a group on $S_B$ has $\\text{p}K_a = 9.6$.\n- **Data Tables:**\n  - $E_{\\mathrm{WT}}$ with $S_A$: pH $6.0$ ($3.0\\times 10^{4}$), pH $7.0$ ($1.2\\times 10^{5}$), pH $8.0$ ($2.0\\times 10^{5}$), pH $9.0$ ($1.0\\times 10^{5}$), pH $10.0$ ($2.0\\times 10^{4}$). Units are $\\mathrm{M^{-1}\\,s^{-1}}$.\n  - $E_{\\mathrm{WT}}$ with $S_B$: pH $6.0$ ($1.5\\times 10^{4}$), pH $7.0$ ($6.0\\times 10^{4}$), pH $8.0$ ($1.0\\times 10^{5}$), pH $9.0$ ($5.0\\times 10^{4}$), pH $10.0$ ($1.0\\times 10^{4}$). Units are $\\mathrm{M^{-1}\\,s^{-1}}$.\n  - $E^{*}$ with $S_A$: pH $7.0$ ($2.0\\times 10^{5}$), pH $8.0$ ($4.0\\times 10^{5}$), pH $9.0$ ($2.0\\times 10^{5}$), pH $10.0$ ($4.0\\times 10^{4}$), pH $11.0$ ($8.0\\times 10^{3}$). Units are $\\mathrm{M^{-1}\\,s^{-1}}$.\n  - $E^{*}$ with $S_B$: pH $7.0$ ($1.0\\times 10^{5}$), pH $8.0$ ($2.0\\times 10^{5}$), pH $9.0$ ($1.0\\times 10^{5}$), pH $10.0$ ($2.0\\times 10^{4}$), pH $11.0$ ($4.0\\times 10^{3}$). Units are $\\mathrm{M^{-1}\\,s^{-1}}$.\n- **Assumptions:**\n  - The observed $k_{\\mathrm{cat}}/K_M$ depends on the catalytically competent protonation states of the enzyme and substrate.\n  - The chemical step is pH-independent.\n  - Diffusion control is not operative.\n\n**2. Validation Verdict:**\nThe problem is scientifically grounded, well-posed, and objective. It presents a standard biochemical kinetics problem involving the interpretation of pH-rate profiles to deduce information about catalytic residues. The data are internally consistent and sufficient for analysis. The assumptions provided are standard for such problems. The information about substrate $\\text{p}K_a$ values is a component to be evaluated against the kinetic data, not a flaw in the problem setup itself. The problem is therefore deemed **valid**.\n\n### Step 2: Solution Derivation\n\nThe pH dependence of the second-order rate constant, $(k_{\\mathrm{cat}}/K_M)_{\\mathrm{obs}}$, for an enzyme requiring a basic group (deprotonated, $\\text{p}K_{a1}$) and an acidic group (protonated, $\\text{p}K_{a2}$) for activity is described by the equation:\n$$ (k_{\\mathrm{cat}}/K_M)_{\\mathrm{obs}} = \\frac{(k_{\\mathrm{cat}}/K_M)_{\\mathrm{max}}}{1 + 10^{\\mathrm{p}K_{a1}-\\mathrm{pH}} + 10^{\\mathrm{pH}-\\mathrm{p}K_{a2}}} $$\nThe $\\text{p}K_a$ values correspond to the pH values at which the rate is half of its maximum value, on the acidic and basic limbs of the pH-rate profile, respectively. The peak of the profile occurs between $\\text{p}K_{a1}$ and $\\text{p}K_{a2}$.\n\n**Analysis of Wild-Type Enzyme ($E_{\\mathrm{WT}}$):**\n- **$E_{\\mathrm{WT}}$ with $S_A$**: The maximum observed rate is $2.0\\times 10^{5} \\, \\mathrm{M^{-1}\\,s^{-1}}$ at pH $8.0$.\n  - The rate at pH $9.0$ is $1.0\\times 10^{5} \\, \\mathrm{M^{-1}\\,s^{-1}}$, which is exactly half the maximum. This indicates that $\\mathrm{p}K_{a2} \\approx 9.0$.\n  - The rate decreases at lower pH. The half-maximum value ($1.0\\times 10^{5}$) is reached between pH $6.0$ and pH $7.0$. At pH $7.0$, the rate is $1.2\\times 10^{5}$. Using the model equation, $1.2\\times 10^{5} = (2.0\\times 10^{5}) / (1 + 10^{\\mathrm{p}K_{a1}-7.0})$. Solving gives $10^{\\mathrm{p}K_{a1}-7.0} \\approx 0.67$, which yields $\\mathrm{p}K_{a1} \\approx 6.8$.\n- **$E_{\\mathrm{WT}}$ with $S_B$**: The maximum observed rate is $1.0\\times 10^{5} \\, \\mathrm{M^{-1}\\,s^{-1}}$ at pH $8.0$.\n  - The rate at pH $9.0$ is $5.0\\times 10^{4} \\, \\mathrm{M^{-1}\\,s^{-1}}$, which is exactly half the maximum. This indicates $\\mathrm{p}K_{a2} \\approx 9.0$.\n  - At pH $7.0$, the rate is $6.0\\times 10^{4} \\, \\mathrm{M^{-1}\\,s^{-1}}$. Using the model, $6.0\\times 10^{4} = (1.0\\times 10^{5}) / (1 + 10^{\\mathrm{p}K_{a1}-7.0})$. Solving gives $10^{\\mathrm{p}K_{a1}-7.0} \\approx 0.67$, which yields $\\mathrm{p}K_{a1} \\approx 6.8$.\n- **Conclusion for $E_{\\mathrm{WT}}$**: For both substrates, the enzyme displays activity governed by two ionizations with $\\text{p}K_a$ values of approximately $6.8$ and $9.0$. This shows these $\\text{p}K_a$ values are intrinsic properties of the enzyme.\n\n**Analysis of Designed Variant ($E^*$):**\n- **$E^*$ with $S_A$**: The maximum observed rate is $4.0\\times 10^{5} \\, \\mathrm{M^{-1}\\,s^{-1}}$ at pH $8.0$.\n  - The rate at pH $7.0$ is $2.0\\times 10^{5} \\, \\mathrm{M^{-1}\\,s^{-1}}$, which is half the maximum. This indicates $\\mathrm{p}K_{a1} \\approx 7.0$.\n  - The rate at pH $9.0$ is $2.0\\times 10^{5} \\, \\mathrm{M^{-1}\\,s^{-1}}$, which is also half the maximum. This indicates $\\mathrm{p}K_{a2} \\approx 9.0$.\n- **$E^*$ with $S_B$**: The maximum observed rate is $2.0\\times 10^{5} \\, \\mathrm{M^{-1}\\,s^{-1}}$ at pH $8.0$.\n  - The rate at pH $7.0$ is $1.0\\times 10^{5} \\, \\mathrm{M^{-1}\\,s^{-1}}$, which is half the maximum. This implies $\\mathrm{p}K_{a1} \\approx 7.0$.\n  - The rate at pH $9.0$ is $1.0\\times 10^{5} \\, \\mathrm{M^{-1}\\,s^{-1}}$, which is also half the maximum. This implies $\\mathrm{p}K_{a2} \\approx 9.0$.\n- **Conclusion for $E^*$**: For both substrates, the enzyme displays activity governed by two ionizations with $\\text{p}K_a$ values of approximately $7.0$ and $9.0$.\n\n**Comparison and Inference:**\nThe mutation from $E_{\\mathrm{WT}}$ to $E^*$ caused the lower $\\text{p}K_a$ ($\\mathrm{p}K_{a1}$) to shift upward from $\\approx 6.8$ to $\\approx 7.0$. The higher $\\text{p}K_a$ ($\\mathrm{p}K_{a2}$) remained unchanged at $\\approx 9.0$. An upward shift in the $\\text{p}K_a$ of a general base (which must be deprotonated for activity, hence defining $\\mathrm{p}K_{a1}$) signifies an increase in its basicity. This is consistent with the stated goal of the computational design.\n\n**Role of Substrate Ionization:**\nThe problem gives substrate $\\text{p}K_a$ values of $6.2$ ($S_A$) and $9.6$ ($S_B$). If the observed pH profiles were determined by substrate ionization, the kinetic $\\text{p}K_a$ values would match these. However, the kinetic profiles for both substrates with a given enzyme are identical in shape and only differ in absolute magnitude. The kinetic $\\text{p}K_a$ values are clearly properties of the enzyme ($E_{\\mathrm{WT}}$: $\\approx 6.8$ and $9.0$; $E^*$: $\\approx 7.0$ and $9.0$) and do not correlate with the substrate $\\text{p}K_a$ values. Therefore, substrate ionization does not appear to be a rate-limiting factor under these conditions.\n\n**Analysis of Specificity:**\nSpecificity for $S_A$ over $S_B$ is the ratio $(k_{\\mathrm{cat}}/K_M)_{S_A} / (k_{\\mathrm{cat}}/K_M)_{S_B}$.\n- For $E_{\\mathrm{WT}}$ at pH $8.0$: $(2.0\\times 10^{5}) / (1.0\\times 10^{5}) = 2.0$.\n- For $E^*$ at pH $8.0$: $(4.0\\times 10^{5}) / (2.0\\times 10^{5}) = 2.0$.\n- The ratio is consistently $2.0$ across all measured pH values for both enzymes. The mutation increased the absolute activity ($k_{\\mathrm{cat}}/K_M$) for both substrates by a factor of $\\approx 2$, but did not alter the specificity ratio between them.\n\n### Step 3: Option-by-Option Analysis\n\n**A. The altered specificity in $E^{*}$ arises primarily from an upward shift in the $\\text{p}K_a$ of a catalytic residue in the enzyme active site, producing a parallel pH-dependent shift for both substrates; substrate ionization differences do not measurably limit reactivity under these conditions.**\n- \"upward shift in the $\\text{p}K_a$ of a catalytic residue\": Correct. The data shows $\\mathrm{p}K_{a1}$ shifted from $\\approx 6.8$ to $\\approx 7.0$.\n- \"producing a parallel pH-dependent shift for both substrates\": Correct. The mutation shifts the acidic limb of the pH profile for both substrates in the same manner. Also, for a given enzyme, the profiles for $S_A$ and $S_B$ are parallel.\n- \"substrate ionization differences do not measurably limit reactivity\": Correct. The kinetic $\\text{p}K_a$ values are determined by the enzyme, not the substrates.\n- \"altered specificity\": This term is slightly ambiguous. While the specificity *ratio* did not change, the absolute values of the specificity constant, $k_{\\mathrm{cat}}/K_M$, were indeed altered (increased) for both substrates. In the context of the other profoundly correct statements in this option, this is the most reasonable interpretation.\nVerdict: **Correct**.\n\n**B. The altered specificity in $E^{*}$ arises primarily from the different solution $\\text{p}K_a$ values of $S_A$ and $S_B$, with the enzyme leaving catalytic residue protonation unchanged; the observed profiles reflect substrate protonation equilibria.**\n- \"observed profiles reflect substrate protonation equilibria\": Incorrect. The observed kinetic $\\text{p}K_a$ values ($\\approx 6.8/7.0$ and $9.0$) do not match the given substrate $\\text{p}K_a$ values ($6.2$ and $9.6$).\n- \"enzyme leaving catalytic residue protonation unchanged\": Incorrect. The mutation clearly shifted $\\mathrm{p}K_{a1}$.\nVerdict: **Incorrect**.\n\n**C. The altered specificity in $E^{*}$ is due to pH-dependent changes in substrate diffusion coefficients, pushing $S_A$ reactions toward the encounter limit while leaving $S_B$ unaffected.**\n- \"diffusion control is not operative in the measured range\" is an explicit statement in the problem, which this option contradicts. The measured rates (max of $4.0 \\times 10^5 \\, \\mathrm{M^{-1}\\,s^{-1}}$) are far below the diffusion limit (typically $10^8 - 10^9 \\, \\mathrm{M^{-1}\\,s^{-1}}$).\nVerdict: **Incorrect**.\n\n**D. Both enzyme residue $\\text{p}K_a$ shifts and substrate ionization contribute equally, as evidenced by non-parallel pH-rate profiles that cross as pH increases.**\n- \"substrate ionization contribute equally\": Incorrect. As established, substrate ionization does not appear to contribute measurably.\n- \"non-parallel pH-rate profiles that cross\": Incorrect. The ratio of $(k_{\\mathrm{cat}}/K_M)_{S_A} / (k_{\\mathrm{cat}}/K_M)_{S_B}$ is a constant value of $2$ for both enzymes across all measured pH values. This means the profiles are parallel and never cross.\nVerdict: **Incorrect**.", "answer": "$$\\boxed{A}$$", "id": "2713915"}]}