{"hands_on_practices": [{"introduction": "Understanding the transmission of a CRISPR-Cas9 induced edit to the next generation is fundamental for creating genetically modified organisms. This exercise explores the probabilistic nature of inheritance from a founder organism exhibiting germline mosaicism, a common outcome of genome editing. By applying basic principles of probability, you will derive an expression to calculate the likelihood of successfully recovering an edited allele, a critical skill for designing efficient breeding and screening strategies [@problem_id:2802363].", "problem": "A founder organism is subjected to Clustered Regularly Interspaced Short Palindromic Repeats (CRISPR)-Cas9 genome editing targeting a single autosomal locus in the germline. After development, deep sequencing of the gonadal tissue estimates that the edited allele constitutes a fraction $f$ of the haploid genomes contributing to gametogenesis. Assume that meiosis follows random assortment and that the sampled gametes are drawn independently from a very large pool, so that each gamete independently carries the edited allele with probability $f$. A researcher randomly samples $n$ mature gametes from this pool to screen for the presence of the edit.\n\nStarting only from the following fundamental principles and definitions: (i) meiosis produces haploid gametes in which alleles segregate randomly; (ii) the estimated allele fraction $f$ in the contributing haploid genomes can be interpreted as the probability that a randomly chosen gamete carries the edited allele; (iii) independent trials multiply in probability; and (iv) the probability of the complement of an event is one minus the probability of the event itself, derive a closed-form analytic expression, in terms of $f$ and $n$, for the probability that at least one of the $n$ sampled gametes carries the edited allele.\n\nExpress your final answer as a single simplified analytic expression in terms of $f$ and $n$. No units are required. Do not provide a numerical approximation.", "solution": "The problem statement has been subjected to rigorous validation and is deemed valid. It is scientifically grounded, well-posed, objective, and internally consistent. It provides a formalizable scenario based on established principles of genetics and probability theory without containing any factual errors, ambiguities, or contradictions. The task is to derive an expression from first principles, which is a standard and meaningful exercise in quantitative science.\n\nLet $A$ be the event that at least one of the $n$ sampled gametes carries the edited allele. The objective is to find the probability of this event, $P(A)$.\n\nDirectly calculating $P(A)$ would require summing the probabilities of observing exactly $k$ edited gametes for all values of $k$ from $1$ to $n$:\n$$P(A) = \\sum_{k=1}^{n} P(\\text{exactly } k \\text{ edited gametes})$$\nThis is a correct but unnecessarily complex path. A more efficient derivation utilizes the principle of the complement, which is one of the four axioms provided in the problem statement.\n\nLet $A^c$ be the complement of event $A$. The event $A^c$ is that *none* of the $n$ sampled gametes carry the edited allele. According to principle (iv), the relationship between the probability of an event and its complement is:\n$$P(A) = 1 - P(A^c)$$\nWe will now derive an expression for $P(A^c)$.\n\nLet $E_i$ represent the event that the $i$-th sampled gamete carries the edited allele, for $i \\in \\{1, 2, \\dots, n\\}$.\nAccording to principle (ii), the probability of this event for any single gamete is given as $f$:\n$$P(E_i) = f$$\nThe complement of $E_i$, denoted $E_i^c$, is the event that the $i$-th gamete does *not* carry the edited allele. Using principle (iv) for a single trial:\n$$P(E_i^c) = 1 - P(E_i) = 1 - f$$\nThe event $A^c$ (no edited gametes in the sample of size $n$) is the simultaneous occurrence of all $n$ independent events $E_1^c, E_2^c, \\dots, E_n^c$. This can be written as the intersection of these events:\n$$A^c = E_1^c \\cap E_2^c \\cap \\dots \\cap E_n^c$$\nThe problem states that the gametes are drawn independently. This allows us to use principle (iii), which states that the probability of a series of independent events is the product of their individual probabilities. Therefore:\n$$P(A^c) = P(E_1^c) \\times P(E_2^c) \\times \\dots \\times P(E_n^c)$$\nSince the probability $P(E_i^c) = 1 - f$ is the same for all $n$ trials, this product simplifies to:\n$$P(A^c) = (1 - f) \\times (1 - f) \\times \\dots \\times (1 - f) \\quad (n \\text{ times})$$\n$$P(A^c) = (1 - f)^{n}$$\nFinally, we substitute this expression for $P(A^c)$ back into the equation for $P(A)$:\n$$P(A) = 1 - (1 - f)^{n}$$\nThis is the closed-form analytic expression for the probability that at least one of the $n$ sampled gametes carries the edited allele, derived strictly from the fundamental principles provided.", "answer": "$$\\boxed{1 - (1-f)^{n}}$$", "id": "2802363"}, {"introduction": "A crucial aspect of any CRISPR-Cas9 experiment is ensuring the guide RNA directs cleavage to the intended locus with minimal off-target activity. This problem challenges you to first construct a naive specificity score based on a simplified 'seed region' model, and then to critically evaluate its failings [@problem_id:2626133]. This two-part exercise highlights the importance of understanding a model's underlying assumptions and recognizing the complex biological factors, such as chromatin state and sgRNA-DNA duplex stability, that ultimately determine editing outcomes.", "problem": "A developmental biology lab intends to disrupt a transcription factor locus during early mouse gastrulation using Clustered Regularly Interspaced Short Palindromic Repeats/CRISPR-associated protein 9 (CRISPR/Cas9) with a single-guide RNA (sgRNA). The sgRNA is a standard length of $20$ nucleotides and has a guanine-cytosine (GC) content of $g=0.62$. Genome-wide alignment against the mouse reference genome identifies $m=7$ loci (excluding the intended on-target locus) that have a perfect match to the $10$-nucleotide protospacer “seed” region adjacent to a canonical protospacer adjacent motif (PAM) and thus are plausible off-target sites under a naive seed-based model. Assume, for the purposes of a deliberately simplified model, that each seed-matched locus (including the on-target locus) is equally likely to be bound and cleaved by the CRISPR/Cas9 ribonucleoprotein in any given editing event, and that events are independent and identically distributed across loci. Using only probability normalization and this equiprobable-events assumption, derive a symbolic expression for a naive specificity score $S(m)$ defined as the probability that any given cleavage event occurs at the intended on-target locus, expressed solely in terms of $m$. Then evaluate this expression for $m=7$. Report your final numerical answer as a unitless decimal rounded to four significant figures. In your reasoning, explain from first principles how the expression follows from the assumptions and briefly articulate two concrete biological limitations of this scoring approach in the context of developmental genome editing, referencing the given GC content $g$ where relevant.", "solution": "The problem statement is analyzed for validity.\n\nGivens are extracted verbatim:\n1.  System: CRISPR/Cas9 with a single-guide RNA (sgRNA) in early mouse gastrulation.\n2.  sgRNA length: $20$ nucleotides.\n3.  sgRNA guanine-cytosine (GC) content: $g=0.62$.\n4.  Number of identified off-target loci: $m=7$.\n5.  Off-target criterion: perfect match to the $10$-nucleotide protospacer “seed” region adjacent to a canonical protospacer adjacent motif (PAM). These $m=7$ loci exclude the intended on-target locus.\n6.  Assumption 1: Each seed-matched locus (the on-target and $m$ off-targets) is equally likely to be bound and cleaved.\n7.  Assumption 2: Events are independent and identically distributed across loci.\n8.  Definition: A naive specificity score $S(m)$ is the probability that any given cleavage event occurs at the intended on-target locus.\n9.  Constraint: The expression for $S(m)$ must be in terms of $m$ only.\n10. Task: Evaluate $S(m)$ for $m=7$ and round to four significant figures.\n11. Task: Articulate two concrete biological limitations of the model.\n\nValidation Verdict:\nThe problem is valid. It presents a simplified, but well-defined, theoretical model based on established concepts in molecular biology (CRISPR/Cas9 genome editing). The assumptions, while biologically naive, are explicitly stated for the purpose of the model, which is a standard practice in quantitative problem-solving. The problem is self-contained, logically consistent, and requires both mathematical derivation and conceptual biological reasoning. It is not scientifically unsound, incomplete, or ambiguous. Therefore, a solution will be provided.\n\nThe problem requires the derivation of a specificity score $S(m)$ under a set of deliberately simplified assumptions. Let us proceed from first principles.\n\nThe core of the problem lies in defining the sample space of possible outcomes for a single cleavage event. The model posits that cleavage can occur only at loci that possess a perfect match to the $10$-nucleotide seed region and are adjacent to a canonical PAM. We are given that there is $1$ such intended on-target locus and $m$ such off-target loci.\n\nLet $N$ be the total number of loci susceptible to cleavage under this model. This set comprises the single on-target locus and the $m$ off-target loci. Therefore, the total number of potential cleavage sites is:\n$$N = 1 + m$$\nThe problem states that \"each seed-matched locus ... is equally likely to be bound and cleaved\". This is the classical assumption of a uniform probability distribution over a finite sample space. The sample space, $\\Omega$, consists of the set of all possible cleavage events, one for each susceptible locus. The size of this sample space is $|\\Omega| = N = 1+m$.\n\nThe specificity score, $S(m)$, is defined as the probability that a given cleavage event occurs at the intended on-target locus. Let $A$ be the event that cleavage occurs at the on-target locus. Within our sample space, there is exactly one such outcome. Thus, the number of outcomes favorable to event $A$ is $|A|=1$.\n\nAccording to the fundamental definition of probability for equiprobable outcomes, the probability of an event is the ratio of the number of favorable outcomes to the total number of possible outcomes.\n$$P(A) = \\frac{\\text{Number of favorable outcomes}}{\\text{Total number of possible outcomes}}$$\nApplying this to our problem, the expression for the specificity score $S(m)$ is:\n$$S(m) = \\frac{|A|}{|\\Omega|} = \\frac{1}{1+m}$$\nThis expression is solely in terms of $m$, as required by the problem statement.\n\nNext, we must evaluate this expression for the given value of $m=7$.\nSubstituting $m=7$ into our derived formula:\n$$S(7) = \\frac{1}{1+7} = \\frac{1}{8}$$\nTo report this as a decimal rounded to four significant figures, we perform the division:\n$$\\frac{1}{8} = 0.125$$\nTo express this with four significant figures, we append a trailing zero, which is significant in this context.\n$$S(7) = 0.1250$$\n\nFinally, the problem demands an articulation of two concrete biological limitations of this simplistic scoring approach. The central flaw is the assumption of equiprobability for cleavage at all seed-matched sites.\n\n1.  **Chromatin Accessibility**: The model treats the genome as a naked, uniformly accessible polymer of DNA. This is biologically incorrect. In the eukaryotic nucleus, DNA is complexed with histone proteins to form chromatin, which exists in various states of compaction. A potential off-target site located within a region of highly condensed heterochromatin is sterically inaccessible to the large CRISPR/Cas9 ribonucleoprotein complex and is therefore highly unlikely to be cleaved, regardless of its sequence identity. Conversely, a site within open euchromatin is much more accessible. During dynamic developmental processes like mouse gastrulation, chromatin landscapes are actively remodeled, making accessibility a critical and variable determinant of Cas9 activity that is completely ignored by the model.\n\n2.  **Influence of Mismatches Outside the Seed Region and Duplex Stability**: The model's criterion for a plausible off-target site is a perfect match only in the $10$-nucleotide seed region. It completely disregards the remaining portion of the $20$-nucleotide sgRNA binding site. In reality, the number, position, and type of mismatches between the sgRNA and the DNA target outside the seed region profoundly impact cleavage efficiency. While the seed region is critical for initial binding, a high number of mismatches in the non-seed portion can destabilize the sgRNA-DNA duplex and prevent the conformational change in the Cas9 protein required for nuclease activation. Furthermore, the thermodynamic stability of the RNA-DNA hybrid, influenced by its overall GC content (given as $g=0.62$), affects binding affinity and kinetics. A site with a perfect seed but a lower GC content or destabilizing mismatches elsewhere will be cleaved much less efficiently than the on-target site, which has a perfect match along the entire $20$-nucleotide length. The model's equiprobability assumption incorrectly equates these vastly different scenarios.", "answer": "$$\\boxed{0.1250}$$", "id": "2626133"}, {"introduction": "The ultimate goal of many genome editing experiments is to achieve a functional knockout of a target gene. This capstone problem guides you through the process of building a comprehensive computational model to predict the probability of this outcome from first principles [@problem_id:2725970]. You will integrate the probabilities of various repair outcomes (indels) with rules governing protein function—including frameshifts and domain integrity—to translate a molecular indel spectrum into a macroscopic functional prediction, a core skill in modern synthetic biology.", "problem": "Write a complete, runnable program that, starting from fundamental definitions in molecular biology and probability, computes the probability that a gene is functionally knocked out after Clustered Regularly Interspaced Short Palindromic Repeats (CRISPR)-associated protein 9 (Cas9)-mediated editing given an indel spectrum and gene-specific tolerance to truncations derived from protein domain architecture. The program must implement the following scientifically grounded assumptions and definitions without using any external data or user input.\n\nFoundational bases to use:\n- Central Dogma of Molecular Biology: Deoxyribonucleic acid (DNA) is transcribed to Ribonucleic acid (RNA) and translated to protein in codons of size $3$ nucleotides; the open reading frame is determined by the phase modulo $3$. Insertions or deletions that change the coding sequence length by a non-multiple of $3$ nucleotides induce a frameshift, generally leading to premature termination.\n- In the shifted frame, premature termination arises when a stop codon is encountered. Under a simplifying and widely used model, stop codons in a random frame appear with a per-codon probability $s$ (treated as a constant per test), leading to a geometric distribution for the additional number of amino acids that can be translated before termination.\n- Protein domains are structural and functional units; a gene’s functionality may require that each essential domain retain at least a specified fraction of its amino acids after any truncation or in-frame editing. Insertions within a domain above a domain-specific size threshold are disruptive.\n\nModel definitions to implement:\n- Coding sequence length $L$ is specified in nucleotides, with $L$ divisible by $3$. Let $L_{\\mathrm{aa}} = L/3$ be the protein length in amino acids.\n- The Cas9 cut is modeled at an amino acid index $p$ (one-based), meaning the first amino acid potentially affected by an indel is at position $p$. Amino acids at positions less than $p$ are intact prior to any post-cut effects.\n- The gene has a set of essential domains, each represented as a $4$-tuple $(a_i, b_i, f_i, g_i)$:\n  - $a_i$ and $b_i$ are one-based amino acid indices with $1 \\le a_i \\le b_i \\le L_{\\mathrm{aa}}$.\n  - $f_i \\in [0,1]$ is the minimal fraction of domain $i$ that must remain intact to preserve function.\n  - $g_i \\in \\mathbb{N}_0$ is the maximal number of amino acids that can be inserted at a site within domain $i$ without loss of function.\n- The per-codon stop probability in the shifted frame is $s \\in (0,1)$, which induces a geometric distribution for the number of additional amino acids translated after the cut before encountering a stop codon.\n\nIndel spectrum:\n- Each editing outcome is a tuple $(\\text{type}, \\ell, q)$ where $\\text{type} \\in \\{\\text{\"ins\"}, \\text{\"del\"}, \\text{\"none\"}\\}$, $\\ell$ is the indel length in nucleotides (for $\\text{\"none\"}$, set $\\ell = 0$), and $q$ is its probability, with all $q$ summing to $1$.\n- Outcomes with $\\ell \\bmod 3 \\ne 0$ are frameshifts (both insertions and deletions), and outcomes with $\\ell \\bmod 3 = 0$ are in-frame (again both insertions and deletions). The $\\text{\"none\"}$ outcome leaves the protein unchanged.\n\nFunctional-loss rules to implement:\n- Frameshift outcomes:\n  - Let $T$ be the nonnegative integer number of additional amino acids translated in the shifted frame after the cut before encountering a stop codon; under the geometric model with parameter $s$, $T$ has support $\\{0,1,2,\\dots\\}$.\n  - The truncated protein length (in amino acids) is $L_{\\text{trunc}} = \\min\\{L_{\\mathrm{aa}}, (p-1) + T\\}$.\n  - For each domain $i$ with length $n_i = b_i - a_i + 1$, at least $\\lceil f_i \\cdot n_i \\rceil$ amino acids of that domain must be present in $L_{\\text{trunc}}$ to preserve function. The domain is fully intact if $b_i \\le p-1$; it is entirely downstream if $a_i \\ge p$; otherwise it spans the cut.\n  - Derive from first principles the minimal $L_{\\text{trunc}}$ required for each domain to meet its fractional intactness, and thereby the minimal requirement across all domains; use the geometric tail to compute the probability that a frameshift retains function. The loss-of-function probability for a frameshift outcome is one minus this retention probability.\n- In-frame deletion outcomes ($\\ell \\bmod 3 = 0$, type $\\text{\"del\"}$):\n  - Let $D_{\\mathrm{aa}} = \\ell/3$ be the number of deleted amino acids, assumed to be a contiguous segment starting at $p$ and extending to $p + D_{\\mathrm{aa}} - 1$ inclusive.\n  - For each domain $i$, compute the overlap length between the deleted segment and $[a_i,b_i]$. If the intact fraction $(n_i - \\text{overlap})/n_i$ is strictly less than $f_i$ for any domain, this outcome is a loss of function; otherwise it is not.\n- In-frame insertion outcomes ($\\ell \\bmod 3 = 0$, type $\\text{\"ins\"}$):\n  - Let $I_{\\mathrm{aa}} = \\ell/3$ be the number of inserted amino acids, inserted at position $p$.\n  - If $p \\in [a_i,b_i]$ for any domain $i$ and $I_{\\mathrm{aa}} > g_i$, the outcome is a loss of function; otherwise it is not.\n- No-edit outcomes ($\\text{\"none\"}$) do not cause loss of function.\n\nOverall knockout probability:\n- The overall probability of functional knockout is the probability-weighted sum of loss-of-function indicators across the indel spectrum. Express the final answer as a decimal for each test case.\n\nTest suite:\nProvide code that computes the knockout probability for the following $5$ cases. Each case is independent and must be evaluated exactly as specified.\n\n- Case $1$:\n  - $L = 1500$, $p = 100$, $s = 0.05$.\n  - Domains: $\\{(50, 150, 0.9, 2), (300, 400, 0.5, 5)\\}$.\n  - Indel spectrum (each entry is $(\\text{type}, \\ell, q)$):\n    - $(\\text{\"del\"}, 1, 0.2)$,\n    - $(\\text{\"del\"}, 3, 0.15)$,\n    - $(\\text{\"del\"}, 9, 0.05)$,\n    - $(\\text{\"ins\"}, 1, 0.1)$,\n    - $(\\text{\"ins\"}, 3, 0.1)$,\n    - $(\\text{\"ins\"}, 6, 0.1)$,\n    - $(\\text{\"none\"}, 0, 0.3)$.\n- Case $2$:\n  - $L = 300$, $p = 95$, $s = 0.05$.\n  - Domains: $\\{(1, 90, 0.8, 3)\\}$.\n  - Indel spectrum:\n    - $(\\text{\"del\"}, 1, 0.4)$,\n    - $(\\text{\"ins\"}, 2, 0.4)$,\n    - $(\\text{\"ins\"}, 3, 0.2)$.\n- Case $3$:\n  - $L = 900$, $p = 1$, $s = 0.05$.\n  - Domains: $\\{\\}$ (no essential domains).\n  - Indel spectrum:\n    - $(\\text{\"del\"}, 1, 0.5)$,\n    - $(\\text{\"ins\"}, 1, 0.2)$,\n    - $(\\text{\"ins\"}, 3, 0.3)$.\n- Case $4$:\n  - $L = 1200$, $p = 50$, $s = 0.06$.\n  - Domains: $\\{(1, 120, 1.0, 0)\\}$.\n  - Indel spectrum:\n    - $(\\text{\"del\"}, 1, 0.25)$,\n    - $(\\text{\"ins\"}, 2, 0.25)$,\n    - $(\\text{\"ins\"}, 5, 0.1)$,\n    - $(\\text{\"ins\"}, 3, 0.1)$,\n    - $(\\text{\"del\"}, 6, 0.3)$.\n- Case $5$:\n  - $L = 1800$, $p = 350$, $s = 0.04$.\n  - Domains: $\\{(100, 200, 0.7, 3), (320, 500, 0.8, 2)\\}$.\n  - Indel spectrum:\n    - $(\\text{\"del\"}, 3, 0.2)$,\n    - $(\\text{\"ins\"}, 3, 0.2)$,\n    - $(\\text{\"del\"}, 30, 0.1)$,\n    - $(\\text{\"ins\"}, 6, 0.1)$,\n    - $(\\text{\"del\"}, 1, 0.2)$,\n    - $(\\text{\"ins\"}, 2, 0.2)$.\n\nRequired output:\n- Your program must compute one floating-point knockout probability for each case.\n- Express each probability as a decimal rounded to exactly $6$ digits after the decimal point.\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets (e.g., $[\\text{result}_1,\\text{result}_2,\\dots,\\text{result}_5]$), with no spaces.\n\nAngle units do not apply. No physical units are involved. All probabilities must be decimals, not percentages.", "solution": "The problem statement poses a well-defined and scientifically grounded question in computational synthetic biology. It is self-contained, consistent, and free of invalidating flaws. We shall proceed to derive the solution from the provided first principles.\n\nThe total probability of a functional knockout, denoted $P(\\text{KO})$, is computed by summing the probabilities of all individual editing outcomes that result in a loss of function (LoF). For an indel spectrum consisting of outcomes $j$ with probabilities $q_j$, the total knockout probability is:\n$$ P(\\text{KO}) = \\sum_j q_j \\cdot \\mathbb{I}(\\text{outcome } j \\text{ causes LoF}) $$\nwhere $\\mathbb{I}(\\cdot)$ is the indicator function, which evaluates to $1$ if the condition is true and $0$ otherwise. We must therefore determine the LoF condition for each class of outcome.\n\nThe problem specifies a gene with a coding sequence length of $L$ nucleotides, which corresponds to a protein of length $L_{\\mathrm{aa}} = L/3$ amino acids. The CRISPR-Cas9 cut site is at amino acid position $p$ (1-based). The gene's functionality depends on a set of essential domains, each described by a tuple $(a_i, b_i, f_i, g_i)$.\n\nWe analyze each outcome type based on its effect on the open reading frame.\n\n**1. Frameshift Outcomes**\nAn insertion or deletion of length $\\ell$ nucleotides where $\\ell \\pmod 3 \\neq 0$ causes a frameshift. This invariably leads to a truncated protein product due to the high probability of encountering a premature stop codon in the new reading frame. The protein function is retained only if the truncated protein is long enough to preserve the required portions of all essential domains.\n\nLet $T$ be the number of additional amino acids translated in the shifted frame before a stop codon is encountered. As per the model, $T$ is a random variable following a geometric distribution with success probability $s$ (where success is encountering a stop codon). The probability mass function is $P(T=k) = (1-s)^k s$ for $k \\in \\{0, 1, 2, \\dots\\}$. The resulting truncated protein has an amino acid length of $L_{\\text{trunc}} = \\min\\{L_{\\mathrm{aa}}, (p-1) + T\\}$, where $(p-1)$ is the length of the intact N-terminal portion of the protein.\n\nFor each essential domain $i$, starting at $a_i$ and ending at $b_i$, its length is $n_i = b_i - a_i + 1$. Functionality requires that at least $m_i = \\lceil f_i \\cdot n_i \\rceil$ amino acids of this domain remain. For the protein to be functional, the number of intact amino acids for domain $i$, which is the size of the intersection $[a_i, b_i] \\cap [1, L_{\\text{trunc}}]$, must be at least $m_i$. This condition is met if and only if the truncated protein includes the first $m_i$ amino acids of the domain. The last required amino acid position for domain $i$ is therefore $c_i = a_i + m_i - 1$.\n\nFor the entire protein to remain functional, this condition must hold for all essential domains. This necessitates that the truncated protein length $L_{\\text{trunc}}$ must be at least the maximum of all such required positions. Let $L_{\\text{trunc,min}} = \\max_i \\{c_i\\}$. If there are no essential domains, we define $L_{\\text{trunc,min}} = 0$.\nFunction is retained if $L_{\\text{trunc}} \\ge L_{\\text{trunc,min}}$. Substituting the expression for $L_{\\text{trunc}}$, we get:\n$$ \\min\\{L_{\\mathrm{aa}}, (p-1) + T\\} \\ge L_{\\text{trunc,min}} $$\nIf $L_{\\text{trunc,min}} > L_{\\mathrm{aa}}$, it is impossible to satisfy this condition, and the probability of retaining function is $0$. Otherwise, the condition simplifies to $(p-1) + T \\ge L_{\\text{trunc,min}}$, which means $T \\ge L_{\\text{trunc,min}} - (p-1)$. Let $T_{\\min} = \\max\\{0, L_{\\text{trunc,min}} - (p-1)\\}$. The probability of retaining function is the tail probability of the geometric distribution, $P(T \\ge T_{\\min})$.\n$$ P(\\text{retain function} | \\text{frameshift}) = \\sum_{k=T_{\\min}}^{\\infty} (1-s)^k s = (1-s)^{T_{\\min}} $$\nThe probability of loss of function for any frameshift outcome is therefore $P(\\text{LoF} | \\text{frameshift}) = 1 - (1-s)^{T_{\\min}}$.\n\n**2. In-Frame Deletion Outcomes**\nA deletion of length $\\ell$ where $\\ell \\pmod 3 = 0$ and $\\ell > 0$ results in an in-frame deletion of $D_{\\mathrm{aa}} = \\ell/3$ amino acids. The problem states this deletion spans the segment from amino acid $p$ to $p+D_{\\mathrm{aa}}-1$, i.e., the interval $S_{del} = [p, p+D_{\\mathrm{aa}}-1]$.\nThis outcome causes LoF if it disrupts any essential domain. For a domain $i$ spanning $[a_i, b_i]$, we calculate the number of amino acids lost from it, which is the length of the intersection of $S_{del}$ and $[a_i, b_i]$. The overlap length is $\\text{overlap}_i = \\max\\{0, \\min(b_i, p+D_{\\mathrm{aa}}-1) - \\max(a_i, p) + 1 \\}$.\nThe number of remaining amino acids in the domain is $n_i - \\text{overlap}_i$. The domain is disrupted, causing LoF, if the fraction of remaining amino acids is less than the required fraction $f_i$:\n$$ \\frac{n_i - \\text{overlap}_i}{n_i} < f_i $$\nIf this condition holds for any essential domain $i$, the outcome is classified as a LoF.\n\n**3. In-Frame Insertion Outcomes**\nAn insertion of length $\\ell$ where $\\ell \\pmod 3 = 0$ and $\\ell > 0$ results in an in-frame insertion of $I_{\\mathrm{aa}} = \\ell/3$ amino acids at position $p$. This causes LoF if the insertion occurs within an essential domain and its size exceeds the domain's tolerance. For each domain $i$ with parameters $(a_i, b_i, f_i, g_i)$, LoF occurs if the insertion site $p$ falls within the domain's boundaries AND the insertion size $I_{\\mathrm{aa}}$ is greater than the tolerated size $g_i$.\n$$ (p \\in [a_i, b_i]) \\land (I_{\\mathrm{aa}} > g_i) $$\nIf this condition is met for any essential domain $i$, the outcome is a LoF.\n\n**4. Other Outcomes**\n- The \"none\" outcome, representing an unedited allele, does not cause LoF. Its contribution to $P(\\text{KO})$ is $0$.\n- If there are no essential domains specified (an empty set), then by the given rules, none of the outcomes can cause LoF, and the total $P(\\text{KO})$ is $0$.\n\nThe overall $P(\\text{KO})$ is the sum of contributions $q_j \\cdot P(\\text{LoF}_j)$ from each outcome $j$ in the indel spectrum, calculated according to the principles above.", "answer": "```python\nimport math\nimport numpy as np\n\ndef calculate_ko_probability(L, p, s, domains, spectrum):\n    \"\"\"\n    Computes the knockout probability based on the provided model.\n    \"\"\"\n    total_ko_prob = 0.0\n    L_aa = L / 3.0\n\n    # Pre-calculate the probability of loss of function for any frameshift event,\n    # as it is constant for a given gene and cut site configuration.\n    c_i_list = []\n    for (a_i, b_i, f_i, g_i) in domains:\n        n_i = float(b_i - a_i + 1)\n        # Required number of intact amino acids for domain i\n        m_i = np.ceil(f_i * n_i)\n        # Position of the last required amino acid for domain i\n        c_i = a_i + m_i - 1\n        c_i_list.append(c_i)\n    \n    # Minimum required length of a truncated protein to be functional.\n    # max of an empty list would error, so start with [0].\n    L_trunc_min = max([0] + c_i_list)\n\n    prob_lof_frameshift = 0.0\n    if L_trunc_min > L_aa:\n        # If the minimally required length is greater than the full protein length,\n        # retention is impossible.\n        prob_lof_frameshift = 1.0\n    else:\n        # Minimum number of additional amino acids needed after the cut.\n        # Position p is 1-based, so (p-1) amino acids precede the cut.\n        T_min = max(0, L_trunc_min - (p - 1))\n        # Probability of retention is the tail probability of the geometric distribution.\n        prob_retain = (1.0 - s)**T_min\n        prob_lof_frameshift = 1.0 - prob_retain\n\n    for (type_outcome, l, q) in spectrum:\n        is_lof = False\n        \n        if type_outcome == \"none\":\n            is_lof = False\n        elif l % 3 != 0:  # Frameshift (insertion or deletion)\n            # For frameshifts, the LoF probability is calculated once and applied here.\n            total_ko_prob += q * prob_lof_frameshift\n            continue  # Proceed to the next outcome in the spectrum\n        elif l > 0:  # In-frame (insertion or deletion)\n            if type_outcome == \"del\":\n                D_aa = l // 3\n                del_start = p\n                del_end = p + D_aa - 1\n                for (a_i, b_i, f_i, g_i) in domains:\n                    n_i = float(b_i - a_i + 1)\n                    \n                    overlap_start = max(a_i, del_start)\n                    overlap_end = min(b_i, del_end)\n                    overlap_len = float(max(0, overlap_end - overlap_start + 1))\n                    \n                    # LoF if domain's intact fraction is below threshold\n                    if n_i > 0 and (n_i - overlap_len) / n_i < f_i:\n                        is_lof = True\n                        break\n            elif type_outcome == \"ins\":\n                I_aa = l // 3\n                for (a_i, b_i, f_i, g_i) in domains:\n                    # LoF if insertion is in-domain and larger than tolerance\n                    if a_i <= p <= b_i and I_aa > g_i:\n                        is_lof = True\n                        break\n        \n        if is_lof:\n            total_ko_prob += q\n            \n    return total_ko_prob\n\ndef solve():\n    \"\"\"\n    Main function to define test cases and compute results.\n    \"\"\"\n    test_cases = [\n        {\n            \"L\": 1500, \"p\": 100, \"s\": 0.05,\n            \"domains\": [(50, 150, 0.9, 2), (300, 400, 0.5, 5)],\n            \"spectrum\": [\n                (\"del\", 1, 0.2), (\"del\", 3, 0.15), (\"del\", 9, 0.05),\n                (\"ins\", 1, 0.1), (\"ins\", 3, 0.1), (\"ins\", 6, 0.1),\n                (\"none\", 0, 0.3)\n            ]\n        },\n        {\n            \"L\": 300, \"p\": 95, \"s\": 0.05,\n            \"domains\": [(1, 90, 0.8, 3)],\n            \"spectrum\": [(\"del\", 1, 0.4), (\"ins\", 2, 0.4), (\"ins\", 3, 0.2)]\n        },\n        {\n            \"L\": 900, \"p\": 1, \"s\": 0.05,\n            \"domains\": [],\n            \"spectrum\": [(\"del\", 1, 0.5), (\"ins\", 1, 0.2), (\"ins\", 3, 0.3)]\n        },\n        {\n            \"L\": 1200, \"p\": 50, \"s\": 0.06,\n            \"domains\": [(1, 120, 1.0, 0)],\n            \"spectrum\": [\n                (\"del\", 1, 0.25), (\"ins\", 2, 0.25), (\"ins\", 5, 0.1),\n                (\"ins\", 3, 0.1), (\"del\", 6, 0.3)\n            ]\n        },\n        {\n            \"L\": 1800, \"p\": 350, \"s\": 0.04,\n            \"domains\": [(100, 200, 0.7, 3), (320, 500, 0.8, 2)],\n            \"spectrum\": [\n                (\"del\", 3, 0.2), (\"ins\", 3, 0.2), (\"del\", 30, 0.1),\n                (\"ins\", 6, 0.1), (\"del\", 1, 0.2), (\"ins\", 2, 0.2)\n            ]\n        }\n    ]\n\n    results = []\n    for case in test_cases:\n        result = calculate_ko_probability(\n            case[\"L\"], case[\"p\"], case[\"s\"],\n            case[\"domains\"], case[\"spectrum\"]\n        )\n        results.append(f\"{result:.6f}\")\n\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2725970"}]}