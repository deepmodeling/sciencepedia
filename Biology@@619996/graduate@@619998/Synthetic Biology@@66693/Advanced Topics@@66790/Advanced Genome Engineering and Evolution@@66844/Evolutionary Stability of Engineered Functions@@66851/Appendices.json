{"hands_on_practices": [{"introduction": "The metabolic cost of any engineered function inevitably creates a selective pressure favoring \"cheaters\" who discard the function but reap its benefits. A cornerstone of robust design is to counteract this pressure by linking the desired public good to an essential, non-transferable private good. This thought experiment [@problem_id:2316349] challenges you to analyze the evolutionary resilience of such a coercively linked system, applying fundamental principles of molecular biology to predict the fates of various potential mutants.", "problem": "A team of synthetic biologists is engineering a strain of *Escherichia coli* for bioremediation. The goal is to have the bacteria secrete an enzyme, Pdeg, which degrades a harmful environmental toxin, Tox-A. The production of Pdeg represents a significant metabolic cost to an individual cell, but its action benefits the entire population by making the environment habitable. This is a classic \"public good\" scenario, vulnerable to the rise of non-producing \"cheater\" mutants that benefit from the detoxification without paying the cost.\n\nTo enforce cooperation, the team has designed a synthetic gene circuit that links the production of the public good (Pdeg) to an essential private good (synthesis of the amino acid Tryptophan). The engineering involves the following modifications to the bacterium's genome:\n\n1.  The native `trpC` gene is deleted. The protein product of `trpC` normally catalyzes the conversion of Indole-3-glycerol phosphate (IGP) to Indole, a critical step in the Tryptophan biosynthesis pathway.\n2.  A synthetic operon is inserted into the chromosome. The structure of this operon is: `P_L - pdeg - synC`.\n    *   `P_L` is a strong, inducible promoter activated by the molecule Isopropyl Î²-D-1-thiogalactopyranoside (IPTG).\n    *   `pdeg` is the gene encoding the secreted public good enzyme, Pdeg.\n    *   `synC` is a synthetic gene encoding an intracellular enzyme, SynC, which is designed to functionally replace the deleted `trpC` gene product. That is, SynC also catalyzes the conversion of IGP to Indole.\n\nThe engineered bacteria are cultured in a chemostat containing a minimal medium that is continuously supplied. This medium contains glucose as a carbon source, the inducer IPTG, the toxin Tox-A, and an ample supply of the precursor IGP. The medium conspicuously lacks both Indole and Tryptophan. Assume that all other genes required for Tryptophan synthesis from Indole are present and constitutively expressed, and that transcription of the `P_L - pdeg - synC` operon yields a single polycistronic messenger RNA.\n\nBased on the design of this synthetic system, which of the following statements most accurately describes the evolutionary dynamics of the bacterial population when rare, spontaneous mutations arise?\n\nA. A mutant with a full deletion of the `pdeg - synC` operon will rapidly dominate the population as a \"cheater,\" as it avoids the metabolic burden of enzyme synthesis while benefiting from the detoxification performed by producer cells.\n\nB. A mutant with a missense mutation that inactivates the Pdeg enzyme's catalytic site but does not alter its size or stability is the most likely cheater to arise and persist, as `synC` expression would be unaffected, and this mutant would have the highest relative fitness in the population.\n\nC. The system is inherently unstable because the public good Pdeg is costly to produce. Natural selection will always favor any non-producer, leading to population collapse once the toxin Tox-A accumulates.\n\nD. A mutant with a frameshift or nonsense mutation occurring near the beginning of the `pdeg` gene will be selectively purged from the population, because such a mutation is expected to exert a strong polar effect on the translation of the downstream `synC` gene.\n\nE. The most significant threat to the system's stability is a mutation that renders the promoter `P_L` non-functional, as this provides the greatest metabolic savings by preventing transcription of the entire operon.", "solution": "The problem asks us to analyze the evolutionary stability of a synthetic gene circuit designed to enforce the production of a public good. The core of the design is the linking of a public good (Pdeg enzyme) and a private good (Tryptophan synthesis via the SynC enzyme) on a single polycistronic operon, `P_L - pdeg - synC`. Let's evaluate each option by considering the fate of the described mutants in the specified environment.\n\n**Analysis of the Wild-Type (Producer) Cell:**\nIn the Tryptophan-free medium, survival is contingent on the cell's ability to synthesize its own Tryptophan. The pathway is blocked by the deletion of the native `trpC` gene. The only way to bypass this block is by expressing the `synC` gene from the synthetic operon. Since the operon is induced by IPTG (present in the medium), the `pdeg - synC` polycistronic mRNA is transcribed. This allows for the translation of both Pdeg and SynC. SynC allows the cell to produce Tryptophan and survive. Pdeg is secreted to detoxify the environment. This cell is viable but pays the metabolic cost of producing both proteins.\n\n**Evaluation of Option A: Full Deletion Mutant**\nA mutant with a full deletion of the `pdeg - synC` operon loses the ability to produce both Pdeg and SynC. Without the SynC enzyme, the cell cannot convert IGP to Indole and is therefore unable to synthesize Tryptophan. In a medium lacking Tryptophan, this cell cannot produce essential proteins and will be unable to grow and divide. It is a non-viable mutant, not a successful cheater. Thus, statement A is incorrect.\n\n**Evaluation of Option E: Non-functional Promoter Mutant**\nA mutation that inactivates the `P_L` promoter prevents the transcription of the entire `pdeg - synC` operon. No mRNA is produced, so neither Pdeg nor SynC protein can be synthesized. The consequence is identical to the full deletion mutant described in option A: the cell cannot produce Tryptophan and is non-viable. This mutation does not create a cheater; it creates a dead cell. Thus, statement E is incorrect.\n\n**Evaluation of Option C: Inherent Instability**\nThis statement claims that the system is fundamentally unstable because public goods are costly. While the premise is true in general, the entire purpose of this specific synthetic circuit is to counteract this exact problem. The circuit creates a \"coercive\" link where the private good essential for survival is inseparable from the public good. The statement ignores the specific mechanism put in place to enforce cooperation. The system is designed to be stable, so claiming it is inherently unstable without considering the design's effect is incorrect.\n\n**Evaluation of Option D: Nonsense/Frameshift Mutant in `pdeg`**\nThis option considers a common type of inactivating mutation: a nonsense (premature stop codon) or frameshift mutation early in the first gene of the operon, `pdeg`. In prokaryotes, polycistronic operons often exhibit a phenomenon called \"translational coupling\" or \"polar effects\". When a ribosome translating an mRNA encounters a premature stop codon, it can terminate translation and dissociate from the message. This significantly reduces the probability that ribosomes will initiate translation on downstream genes (like `synC`) on the same mRNA. Therefore, a nonsense or frameshift mutation in `pdeg` will not only abolish the production of a functional Pdeg protein but will also severely inhibit or completely prevent the production of the essential SynC protein. Without SynC, the mutant cell cannot synthesize Tryptophan and will be purged from the population due to its inability to survive. This describes a powerful, built-in mechanism that enforces the integrity of the system by eliminating common loss-of-function mutants. This statement accurately describes the key design feature that promotes evolutionary stability.\n\n**Evaluation of Option B: Missense Mutant in `pdeg`**\nThis option describes a more subtle cheater. A missense mutation could change a critical amino acid in Pdeg, destroying its enzymatic activity without affecting the protein's overall synthesis, size, or stability. In this scenario, the full-length polycistronic mRNA is transcribed, and the ribosome translates the entire `pdeg` coding sequence (producing a faulty protein) and then proceeds to translate `synC`. The `synC` gene is expressed, so the cell produces Tryptophan and survives. This cell is a true cheater: it avoids contributing to the public good but still produces its essential private good and benefits from the detoxification done by others. While this type of cheater could indeed arise and potentially persist, the statement in option D describes a more fundamental and critical aspect of the system's dynamics. Nonsense and frameshift mutations are a major and frequent source of gene inactivation. The fact that the circuit's architecture actively purges these common mutants is the primary reason the system is considered evolutionarily robust. Option D describes the enforcement mechanism, while option B describes a way to evade it. Therefore, D is a more accurate and central description of the system's designed stability. The question asks for the most accurate description of the dynamics, and the purging of common mutants via polar effects is the most crucial dynamic for maintaining the cooperative population.\n\n**Conclusion:**\nOption D provides the most accurate and insightful analysis of the system's evolutionary stability. The strategic placement of the public good gene (`pdeg`) upstream of the essential private good gene (`synC`) leverages the molecular phenomenon of polar effects to create a robust self-policing system that purges cells with common disabling mutations in the public good gene.", "answer": "$$\\boxed{D}$$", "id": "2316349"}, {"introduction": "While clever designs provide a blueprint for stability, quantitative modeling is crucial for predicting a system's real-world performance and identifying its failure modes. This practice [@problem_id:2738997] transitions from conceptual design to computational analysis, guiding you to model how physical parameters like diffusion and spatial structure impact the invasion dynamics of cheaters. By implementing a model of public good sharing in a microbial microcolony, you will calculate the \"time to takeover\" and gain a deeper appreciation for the delicate balance between cooperation and exploitation.", "problem": "Consider a clonal microcolony of engineered producer cells interspersed with cheater cells that do not produce a diffusible public-good molecule. The microcolony is approximated as a disk of radius $R$ (in $\\mu\\mathrm{m}$) and uniform areal cell density $\\rho$ (in cells $\\mu\\mathrm{m}^{-2}$). Each producer emits molecules at a rate $q$ (in molecule-units $\\mathrm{h}^{-1}$). Molecules experience three competing first-order hazards: (i) self-uptake by the emitting producer at rate $k_s$ (in $\\mathrm{h}^{-1}$), (ii) uptake by other cells in the neighborhood at a per-cell rate $k_u$ (in $\\mathrm{h}^{-1}$ per neighboring cell), and (iii) diffusive escape out of the colony at a size-dependent rate $k_e(R)$ (in $\\mathrm{h}^{-1}$). The interaction range is finite due to diffusion and decay, and is summarized by an effective diffusion length $L$ (in $\\mu\\mathrm{m}$), beyond which uptake is negligible. The escape rate scales with the colonyâs surface-to-volume ratio as $k_e(R) = k_{e0}\\, (L/R)$, where $k_{e0}$ (in $\\mathrm{h}^{-1}$) is a constant prefactor. The effective number of neighbors within interaction range is given by\n$$\nN(R) = \\max\\!\\left(0,\\, \\rho\\, \\pi\\, \\min(R^2, L^2) - 1\\right).\n$$\nUnder these assumptions, the total competing hazard rate for a molecule emitted by a producer is\n$$\nH(R) = k_s + k_u\\, N(R) + k_{e0}\\, \\frac{L}{R}.\n$$\nFor a given emitted molecule, the probability of capture by the emitter is $k_s/H(R)$, while the probability of capture by any particular other cell is $k_u/H(R)$ (by symmetry of the per-cell uptake hazard). Let the translation from captured molecule-units to per-capita Malthusian growth-rate increment be $\\alpha$ (in $\\mathrm{h}^{-1}$ per molecule-unit $\\mathrm{h}^{-1}$). Producers pay a constant production cost $c$ (in $\\mathrm{h}^{-1}$). Let the per-capita Malthusian growth rates of producers and cheaters be $w_P$ and $w_C$, respectively. Assuming random mixing within the colony, and that uptake hazards are memoryless and additive, the difference in growth rates simplifies to\n$$\nw_C - w_P \\equiv \\Delta w(R) = c - \\alpha q\\, \\frac{k_s - k_u}{H(R)}.\n$$\nLet $x(t)$ be the fraction of producers at time $t$ (in $\\mathrm{h}$), evolving under frequency dynamics driven by the fitness difference according to the ordinary differential equation (ODE) $dx/dt = x(1 - x)(w_P - w_C) = -x(1 - x)\\, \\Delta w(R)$. Define the initial producer fraction $x_0 \\in (0,1)$ and a producer threshold $x_f \\in (0,1)$ that encodes cheater takeover at target cheater fraction $1 - x_f$. The time to cheater takeover, $T(R)$ (in $\\mathrm{h}$), is then\n$$\nT(R) =\n\\begin{cases}\n+\\infty, & \\text{if } \\Delta w(R) \\le 0,\\\\[6pt]\n\\displaystyle \\frac{1}{\\Delta w(R)} \\ln\\!\\left(\\frac{x_0 (1 - x_f)}{x_f (1 - x_0)}\\right), & \\text{if } \\Delta w(R) > 0.\n\\end{cases}\n$$\n\nUsing only the definitions and relationships above, implement a program that computes the cheater takeover time $T(R)$ for the following parameter set, which is scientifically plausible for bacterial microcolonies:\n\n- $\\rho = 0.01$ (cells $\\mu\\mathrm{m}^{-2}$),\n- $L = 30$ ($\\mu\\mathrm{m}$),\n- $k_s = 0.5$ ($\\mathrm{h}^{-1}$),\n- $k_u = 0.05$ ($\\mathrm{h}^{-1}$ per cell),\n- $k_{e0} = 0.02$ ($\\mathrm{h}^{-1}$),\n- $q = 100$ (molecule-units $\\mathrm{h}^{-1}$),\n- $\\alpha = 0.001$ ($\\mathrm{h}^{-1}$ per molecule-unit $\\mathrm{h}^{-1}$),\n- $c = 0.03$ ($\\mathrm{h}^{-1}$),\n- $x_0 = 0.99$,\n- $x_f = 0.1$.\n\nYour program must evaluate the test suite of microcolony radii\n$$\nR \\in \\{\\, 8,\\, 20,\\, 26,\\, 30,\\, 100 \\,\\}\\ \\text{in}\\ \\mu\\mathrm{m}.\n$$\nFor each test case, compute $T(R)$ in hours, rounded to three decimal places for finite values. If $\\Delta w(R) \\le 0$, output $+\\infty$. The final output format must be a single line containing a Python-style list of the five results in the same order as the test suite, for example $[t_1,t_2,t_3,t_4,t_5]$, where each $t_i$ is either a float or $+\\infty$ represented as the IEEE floating-point infinity. No other text should be printed.", "solution": "The problem statement has been validated and found to be scientifically grounded, well-posed, and self-contained. It presents a standard, albeit simplified, mathematical model from theoretical biology concerning the evolutionary dynamics of cooperation and cheating. All parameters, variables, and functional relationships are explicitly defined, permitting a direct and unambiguous calculation. We shall proceed with the solution.\n\nThe objective is to compute the cheater takeover time, $T(R)$, for a set of microcolony radii $R$. The computation follows a sequence of steps derived from the definitions provided in the problem statement.\n\nFirst, we must determine the effective number of neighbors, $N(R)$, for a cell within a colony of radius $R$. This is given by the formula:\n$$\nN(R) = \\max\\!\\left(0,\\, \\rho\\, \\pi\\, \\min(R^2, L^2) - 1\\right)\n$$\nHere, $\\rho$ is the areal cell density and $L$ is the effective diffusion length. This function accounts for the geometry of interaction, which is limited by either the colony size (for $R \\le L$) or the diffusion length (for $R > L$). The term '$-1$' subtracts the producer cell itself.\n\nSecond, we calculate the total competing hazard rate, $H(R)$, for a molecule emitted by a producer. This rate is the sum of the rates of three mutually exclusive events: self-uptake, uptake by neighbors, and diffusive escape. The formula is:\n$$\nH(R) = k_s + k_u\\, N(R) + k_{e0}\\, \\frac{L}{R}\n$$\nwhere $k_s$ is the self-uptake rate, $k_u$ is the per-cell uptake rate by neighbors, and $k_e(R) = k_{e0} (L/R)$ is the size-dependent escape rate.\n\nThird, we compute the difference in Malthusian growth rates between cheaters and producers, $\\Delta w(R)$. This quantity determines the direction and speed of selection. It is defined as:\n$$\n\\Delta w(R) = c - \\alpha q\\, \\frac{k_s - k_u}{H(R)}\n$$\nIn this expression, $c$ is the fixed cost of production. The second term represents the net private benefit to a producer, scaled by the production rate $q$ and the conversion factor $\\alpha$. The term $k_s - k_u$ reflects the difference between the self-serving capture hazard, $k_s$, and the socially available capture hazard, $k_u$. If $\\Delta w(R) > 0$, cheaters have a higher growth rate and will increase in frequency. If $\\Delta w(R) \\le 0$, producers are evolutionarily stable or neutral against cheaters.\n\nFinally, we calculate the time to cheater takeover, $T(R)$. The dynamics follow the standard replicator equation, for which the time to transit from an initial producer fraction $x_0$ to a final fraction $x_f$ is given by:\n$$\nT(R) =\n\\begin{cases}\n+\\infty, & \\text{if } \\Delta w(R) \\le 0, \\\\\n\\displaystyle \\frac{1}{\\Delta w(R)} \\ln\\!\\left(\\frac{x_0 (1 - x_f)}{x_f (1 - x_0)}\\right), & \\text{if } \\Delta w(R) > 0.\n\\end{cases}\n$$\nThe logarithmic term is a constant for fixed $x_0$ and $x_f$. If selection favors producers ($\\Delta w(R) < 0$) or is neutral ($\\Delta w(R) = 0$), the cheater fraction does not grow to fixation, and the takeover time is defined as infinite.\n\nThe implementation will use the following specified parameter values:\n-   $\\rho = 0.01 \\text{ cells}\\,\\mu\\mathrm{m}^{-2}$\n-   $L = 30 \\,\\mu\\mathrm{m}$\n-   $k_s = 0.5 \\,\\mathrm{h}^{-1}$\n-   $k_u = 0.05 \\,\\mathrm{h}^{-1}$ per cell\n-   $k_{e0} = 0.02 \\,\\mathrm{h}^{-1}$\n-   $q = 100$ molecule-units $\\mathrm{h}^{-1}$\n-   $\\alpha = 0.001 \\,\\mathrm{h}^{-1}$ per molecule-unit $\\mathrm{h}^{-1}$\n-   $c = 0.03 \\,\\mathrm{h}^{-1}$\n-   $x_0 = 0.99$\n-   $x_f = 0.1$\n\nThe program will iterate through the test suite of radii $R \\in \\{8, 20, 26, 30, 100\\}$ $\\mu$m. For each value of $R$, it will execute the four steps outlined above. If the result for $T(R)$ is finite, it will be rounded to three decimal places. If infinite, it will be represented by the IEEE $754$ standard for infinity. The final output is an ordered list of these results.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nimport math\n\ndef solve():\n    \"\"\"\n    Computes the cheater takeover time T(R) for a range of microcolony radii.\n    \"\"\"\n    \n    # Define the parameters from the problem statement.\n    params = {\n        'rho': 0.01,    # cells Âµmâ»Â²\n        'L': 30.0,      # Âµm\n        'k_s': 0.5,     # hâ»Â¹\n        'k_u': 0.05,    # hâ»Â¹ per cell\n        'k_e0': 0.02,   # hâ»Â¹\n        'q': 100.0,     # molecule-units hâ»Â¹\n        'alpha': 0.001, # hâ»Â¹ per molecule-unit hâ»Â¹\n        'c': 0.03,      # hâ»Â¹\n        'x_0': 0.99,    # initial producer fraction\n        'x_f': 0.1,     # final producer fraction\n    }\n\n    # Define the test suite of microcolony radii.\n    radii = [8.0, 20.0, 26.0, 30.0, 100.0]  # in Âµm\n\n    results = []\n\n    # Pre-calculate the constant logarithmic term for T(R).\n    # This term is derived from the solution to the replicator ODE.\n    log_term = math.log(\n        (params['x_0'] * (1 - params['x_f'])) / \n        (params['x_f'] * (1 - params['x_0']))\n    )\n\n    for R in radii:\n        # Step 1: Calculate the effective number of neighbors, N(R).\n        # The interaction area is the minimum of the colony area and diffusion area.\n        min_R_L_sq = min(R**2, params['L']**2)\n        N_R = max(0.0, params['rho'] * math.pi * min_R_L_sq - 1.0)\n\n        # Step 2: Calculate the total competing hazard rate, H(R).\n        # This is the sum of self-uptake, neighbor uptake, and escape hazards.\n        # A check for R=0 is good practice, although not required by the test cases.\n        if R == 0:\n            # The escape rate would be infinite, making H(R) infinite.\n            # This implies any secreted molecule is instantly lost.\n            H_R = float('inf')\n        else:\n            H_R = params['k_s'] + params['k_u'] * N_R + params['k_e0'] * params['L'] / R\n        \n        # Step 3: Calculate the fitness difference between cheaters and producers, Îw(R).\n        # This determines the direction of selection.\n        if H_R == 0:\n             # Avoid division by zero; physically H(R) is always positive.\n             # This case implies Îw -> -inf, so producers are strongly favored.\n             delta_w_R = -float('inf')\n        else:\n            net_private_benefit = (params['alpha'] * params['q'] * \n                                  (params['k_s'] - params['k_u'])) / H_R\n            delta_w_R = params['c'] - net_private_benefit\n\n        # Step 4: Calculate the cheater takeover time, T(R).\n        if delta_w_R <= 0:\n            # If cheaters are not favored, takeover time is infinite.\n            T_R = float('inf')\n        else:\n            # If cheaters are favored, calculate the finite takeover time.\n            T_R = (1 / delta_w_R) * log_term\n            # Round to three decimal places as required.\n            T_R = round(T_R, 3)\n\n        results.append(T_R)\n    \n    # Final print statement in the exact required format.\n    # The string representation of float('inf') is 'inf'.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2738997"}, {"introduction": "The evolutionary trajectory of an engineered function is not a simple binary of persistence versus loss; it can follow more complex and subtle paths. This final practice [@problem_id:2739051] expands our view by introducing a third possible outcome: repurposing, where the host population co-opts the engineered function for a new, native benefit. Using a selection-mutation framework, you will determine the long-term equilibrium composition of a population containing producers, cheaters, and repurposers, thereby exploring how such novel evolutionary avenues can fundamentally reshape the stability of synthetic constructs.", "problem": "Consider an asexual, well-mixed microbial population in which an engineered function can either be maintained as designed, lost, or repurposed by the host for native benefit. There are exactly $3$ heritable genotypes: the engineered-function producer $P$, the engineered-function cheater $C$ that has lost the function, and the repurposer $R$ that retains the engineered function while mutationally reconfiguring regulation to provide a native host benefit. The population is large enough that stochastic drift is negligible, and generations overlap. Assume the infinite-population, continuous-time selectionâmutation limit with mass-action reproduction.\n\nEach genotype $i \\in \\{P,C,R\\}$ has a constant Malthusian fitness $w_i$ that depends on a cost of producing the engineered function and, for the repurposer, a host-native benefit:\n- $w_P = 1 - c$\n- $w_C = 1$\n- $w_R = 1 - c_r + b$\n\nwhere $c \\in (0,1)$ and $c_r \\in (0,1)$ are the costs paid by $P$ and $R$, respectively, and $b \\ge 0$ is the host-native benefit realized only by $R$.\n\nMutations occur at reproduction. Let $Q$ be the $3 \\times 3$ row-stochastic mutation matrix with entries $Q_{j i}$ equal to the probability that an offspring of a parent of type $j$ is of type $i$. Off-diagonal entries are given as small forward or back mutation rates and the diagonal entries are set to ensure each row sums to $1$.\n\nYou must compute, for each test case below, the asymptotic genotype composition at the globally attracting fixed point of the standard selectionâmutation dynamics in this setting. From that composition, compute the equilibrium fraction of function-bearing genotypes,\n$$\nF^\\star = x_P^\\star + x_R^\\star,\n$$\nwhere $x_P^\\star$ and $x_R^\\star$ are the equilibrium frequencies of $P$ and $R$, respectively. Report $F^\\star$ rounded to exactly $6$ decimal places as a real number in $[0,1]$.\n\nTest suite parameterization. For each case, you are given $(c, c_r, b)$ and the off-diagonal mutation rates $(u_{P\\to C}, u_{P\\to R}, u_{C\\to P}, u_{C\\to R}, u_{R\\to P}, u_{R\\to C})$. Construct $Q$ by placing these rates in the corresponding off-diagonal positions and setting each diagonal $Q_{j j} = 1 - \\sum_{i \\ne j} Q_{j i}$. Use the following $5$ cases:\n\n- Case $1$ (no repurposing benefit):\n  - $(c, c_r, b) = (0.05, 0.05, 0.0)$\n  - $(u_{P\\to C}, u_{P\\to R}, u_{C\\to P}, u_{C\\to R}, u_{R\\to P}, u_{R\\to C}) = (0.0001, 0.00001, 0.000001, 0.000001, 0.00001, 0.0001)$\n\n- Case $2$ (repurposing strongly beneficial):\n  - $(c, c_r, b) = (0.05, 0.05, 0.08)$\n  - $(u_{P\\to C}, u_{P\\to R}, u_{C\\to P}, u_{C\\to R}, u_{R\\to P}, u_{R\\to C}) = (0.0001, 0.00001, 0.000001, 0.000001, 0.00001, 0.0001)$\n\n- Case $3$ (repurposing marginally beneficial, net neutral relative to $C$):\n  - $(c, c_r, b) = (0.05, 0.05, 0.05)$\n  - $(u_{P\\to C}, u_{P\\to R}, u_{C\\to P}, u_{C\\to R}, u_{R\\to P}, u_{R\\to C}) = (0.0001, 0.00001, 0.000001, 0.000001, 0.00001, 0.0001)$\n\n- Case $4$ (repurposing not beneficial enough given higher cost):\n  - $(c, c_r, b) = (0.10, 0.08, 0.05)$\n  - $(u_{P\\to C}, u_{P\\to R}, u_{C\\to P}, u_{C\\to R}, u_{R\\to P}, u_{R\\to C}) = (0.0001, 0.00001, 0.000001, 0.000001, 0.00001, 0.0001)$\n\n- Case $5$ (repurposing beneficial but mutation pressure toward loss is high):\n  - $(c, c_r, b) = (0.05, 0.05, 0.08)$\n  - $(u_{P\\to C}, u_{P\\to R}, u_{C\\to P}, u_{C\\to R}, u_{R\\to P}, u_{R\\to C}) = (0.0001, 0.00001, 0.000001, 0.000001, 0.00001, 0.01)$\n\nYour program must produce a single line of output containing the $5$ results as a comma-separated list enclosed in square brackets, in the same order as the cases above, for example, $[0.123456,0.234567,0.345678,0.456789,0.567890]$. All numbers in the output must be rounded to exactly $6$ decimal places and must be decimals in $[0,1]$ (no percentage signs).", "solution": "The problem statement is subjected to validation.\n\n**Step 1: Extract Givens**\n\nThe problem defines a system of three genotypes: Producer ($P$), Cheater ($C$), and Repurposer ($R$). Their dynamics are governed by continuous-time selection-mutation in a well-mixed, asexual population of infinite size.\n\nThe Malthusian fitnesses $w_i$ for $i \\in \\{P, C, R\\}$ are given by:\n- $w_P = 1 - c$\n- $w_C = 1$\n- $w_R = 1 - c_r + b$\n\nwhere $c \\in (0,1)$, $c_r \\in (0,1)$, and $b \\ge 0$.\n\nMutation is described by a $3 \\times 3$ row-stochastic matrix $Q$, where $Q_{ji}$ is the probability of an offspring from a parent of type $j$ being of type $i$. Off-diagonal entries $Q_{ji}$ for $i \\ne j$ are given by mutation rates $u_{j \\to i}$. Diagonal entries are $Q_{jj} = 1 - \\sum_{i \\ne j} Q_{ji}$.\n\nThe objective is to compute the equilibrium fraction of function-bearing genotypes, $F^\\star = x_P^\\star + x_R^\\star$, where $x_P^\\star$ and $x_R^\\star$ are the equilibrium frequencies of genotypes $P$ and $R$.\n\nFive test cases are provided with specific values for $(c, c_r, b)$ and the six off-diagonal mutation rates $(u_{P\\to C}, u_{P\\to R}, u_{C\\to P}, u_{C\\to R}, u_{R\\to P}, u_{R\\to C})$.\n\n**Step 2: Validate Using Extracted Givens**\n\nThe problem is analyzed against the specified validation criteria.\n\n- **Scientifically Grounded:** The model is an instance of the standard replicator-mutator equation, a fundamental and well-established framework in theoretical population genetics and evolutionary dynamics. It is scientifically sound.\n- **Well-Posed:** The dynamics described are known to possess a unique, globally attracting fixed point (equilibrium). This is guaranteed by the Perron-Frobenius theorem applied to the matrix governing the dynamics, as explained in the solution. The problem is therefore well-posed.\n- **Objective:** The problem is formulated using precise mathematical language and objective parameters, free of any subjective or ambiguous terminology.\n\nThe problem does not exhibit any of the listed flaws (Scientific Unsoundness, Non-Formalizable, Incomplete Setup, Unrealistic, Ill-Posed, Pseudo-Profound, or Outside Verifiability). All necessary parameters are provided, the model is standard and solvable, and the request is for a specific, computable quantity.\n\n**Step 3: Verdict and Action**\n\nThe problem is deemed **valid**. A full solution will be provided.\n\n**Solution Derivation**\n\nLet the frequencies of the three genotypes be denoted by the vector $\\mathbf{x} = [x_P, x_C, x_R]^T$. The continuous-time selection-mutation dynamics are described by the system of ordinary differential equations:\n$$\n\\frac{dx_i}{dt} = \\sum_{j \\in \\{P,C,R\\}} x_j w_j Q_{ji} - \\bar{w} x_i\n$$\nwhere $\\bar{w} = \\sum_{k \\in \\{P,C,R\\}} x_k w_k$ is the mean fitness of the population.\n\nAt equilibrium, the frequencies are constant, so $\\frac{dx_i}{dt} = 0$ for all $i$. This leads to the system of equations:\n$$\n\\bar{w} x_i^\\star = \\sum_{j \\in \\{P,C,R\\}} x_j^\\star w_j Q_{ji}\n$$\nwhere $\\mathbf{x}^\\star = [x_P^\\star, x_C^\\star, x_R^\\star]^T$ is the equilibrium frequency vector.\n\nTo express this in matrix form, let $W$ be the diagonal matrix of fitnesses:\n$$\nW = \\begin{pmatrix} w_P & 0 & 0 \\\\ 0 & w_C & 0 \\\\ 0 & 0 & w_R \\end{pmatrix}\n$$\nThe equilibrium equation can be written as:\n$$\n\\bar{w} \\mathbf{x}^\\star = (Q^T W) \\mathbf{x}^\\star\n$$\nThis is a right-eigenvector equation. The equilibrium frequency vector $\\mathbf{x}^\\star$ is the right eigenvector of the matrix $M = Q^T W$, and the mean fitness at equilibrium, $\\bar{w}$, is the corresponding eigenvalue.\n\nThe matrix $M$ is constructed as:\n$$\nM = Q^T W = \n\\begin{pmatrix}\nQ_{PP} & Q_{CP} & Q_{RP} \\\\\nQ_{PC} & Q_{CC} & Q_{RC} \\\\\nQ_{PR} & Q_{CR} & Q_{RR}\n\\end{pmatrix}\n\\begin{pmatrix}\nw_P & 0 & 0 \\\\\n0 & w_C & 0 \\\\\n0 & 0 & w_R\n\\end{pmatrix}\n=\n\\begin{pmatrix}\nQ_{PP}w_P & Q_{CP}w_C & Q_{RP}w_R \\\\\nQ_{PC}w_P & Q_{CC}w_C & Q_{RC}w_R \\\\\nQ_{PR}w_P & Q_{CR}w_C & Q_{RR}w_R\n\\end{pmatrix}\n$$\n\nSince all fitnesses $w_i > 0$ and all mutation rates $u_{j \\to i} > 0$, all entries of the mutation matrix $Q$ are strictly positive. Consequently, all entries of the matrix $M$ are strictly positive. By the Perron-Frobenius theorem for positive matrices, $M$ has a unique largest real eigenvalue, which is simple and positive. This is the Perron-Frobenius eigenvalue, $\\lambda_{PF}$. The corresponding eigenvector is unique up to scaling and can be chosen to have all positive components.\n\nThis eigenvector represents the stable genotype composition of the population. The computational procedure is as follows:\n1. For each test case, construct the fitness vector $\\mathbf{w} = [w_P, w_C, w_R]^T$ and the mutation matrix $Q$.\n2. Form the matrix $M = Q^T \\text{diag}(\\mathbf{w})$.\n3. Compute the eigenvalues and right eigenvectors of $M$.\n4. Identify the eigenvector corresponding to the Perron-Frobenius (largest real) eigenvalue.\n5. Normalize this eigenvector by dividing each component by their sum, yielding the equilibrium frequency vector $\\mathbf{x}^\\star$.\n6. Calculate the final quantity $F^\\star = x_P^\\star + x_R^\\star$.\n7. Report $F^\\star$ rounded to $6$ decimal places.\n\nThis procedure will be implemented for each of the five provided test cases.", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves for the equilibrium fraction of function-bearing genotypes\n    for a series of test cases based on a replicator-mutator model.\n    \"\"\"\n\n    # Define the 5 test cases from the problem statement.\n    # Each case is a tuple: ((c, c_r, b), (mutation_rates))\n    # mutation_rates = (u_PC, u_PR, u_CP, u_CR, u_RP, u_RC)\n    test_cases = [\n        # Case 1 (no repurposing benefit)\n        ((0.05, 0.05, 0.0), (0.0001, 0.00001, 0.000001, 0.000001, 0.00001, 0.0001)),\n        # Case 2 (repurposing strongly beneficial)\n        ((0.05, 0.05, 0.08), (0.0001, 0.00001, 0.000001, 0.000001, 0.00001, 0.0001)),\n        # Case 3 (repurposing marginally beneficial, net neutral relative to C)\n        ((0.05, 0.05, 0.05), (0.0001, 0.00001, 0.000001, 0.000001, 0.00001, 0.0001)),\n        # Case 4 (repurposing not beneficial enough given higher cost)\n        ((0.10, 0.08, 0.05), (0.0001, 0.00001, 0.000001, 0.000001, 0.00001, 0.0001)),\n        # Case 5 (repurposing beneficial but mutation pressure toward loss is high)\n        ((0.05, 0.05, 0.08), (0.0001, 0.00001, 0.000001, 0.000001, 0.00001, 0.01)),\n    ]\n\n    results = []\n    for params in test_cases:\n        fitness_params, mutation_rates = params\n        c, c_r, b = fitness_params\n        \n        # Calculate Malthusian fitnesses for P, C, R\n        w = np.array([1 - c, 1.0, 1 - c_r + b])\n\n        # Unpack mutation rates\n        u_PC, u_PR, u_CP, u_CR, u_RP, u_RC = mutation_rates\n        \n        # Construct the 3x3 row-stochastic mutation matrix Q\n        # Q[j, i] is the probability of parent j producing offspring i\n        Q = np.array([\n            [1 - u_PC - u_PR, u_PC, u_PR],  # Parent P (j=0) to P, C, R (i=0,1,2)\n            [u_CP, 1 - u_CP - u_CR, u_CR],  # Parent C (j=1) to P, C, R (i=0,1,2)\n            [u_RP, u_RC, 1 - u_RP - u_RC]   # Parent R (j=2) to P, C, R (i=0,1,2)\n        ])\n        \n        # Construct the governing matrix M = Q^T W\n        W = np.diag(w)\n        M = Q.T @ W\n        \n        # Find the eigenvalues and right eigenvectors of M\n        eigenvalues, eigenvectors = np.linalg.eig(M)\n        \n        # The Perron-Frobenius eigenvalue is the largest real eigenvalue.\n        # Its corresponding eigenvector gives the stable state.\n        pf_index = np.argmax(eigenvalues.real)\n        pf_eigenvector = eigenvectors[:, pf_index].real\n        \n        # Normalize the eigenvector to get frequencies (sum to 1).\n        # The vector can have an arbitrary sign, so we use its absolute value.\n        x_star = np.abs(pf_eigenvector) / np.sum(np.abs(pf_eigenvector))\n        \n        x_P_star, x_C_star, x_R_star = x_star\n        \n        # Calculate the total fraction of function-bearing genotypes\n        F_star = x_P_star + x_R_star\n        \n        # Round to exactly 6 decimal places and store\n        results.append(f\"{F_star:.6f}\")\n\n    # Print the final result in the specified format\n    print(f\"[{','.join(results)}]\")\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "2739051"}]}