{"hands_on_practices": [{"introduction": "Toxin-antitoxin systems are a cornerstone of many kill switch designs, but their reliability hinges on a delicate quantitative balance. Upon activation, the concentration of free toxin must accumulate to a lethal level, a process governed by the rates of production, degradation, and binding affinity ($K_d$). This practice exercise challenges you to apply steady-state analysis to a classic TA system, using these biochemical parameters to predict whether the kill switch will be effective [@problem_id:2716751]. Mastering this quantitative approach is essential for designing and troubleshooting molecular circuits.", "problem": "A toxin–antitoxin (TA) kill switch is integrated into an auxotrophic Escherichia coli strain engineered to require exogenous lysine for growth. In the intended deployment environment, lysine is absent, which reduces the specific growth rate; the measured effective first-order loss rates reported below already include both biochemical degradation and growth dilution under these auxotrophic conditions. The toxin, denoted by $T$, and the antitoxin, denoted by $A$, reversibly bind to form a neutral complex $C$ following mass-action kinetics. The dissociation constant is measured by Isothermal Titration Calorimetry (ITC) to be $K_d = 5\\ \\mathrm{nM}$ at $37\\ ^\\circ\\mathrm{C}$.\n\nUpon activation of the kill-switch trigger, the following effective zero-order production rates and first-order loss rates are measured:\n- Toxin production rate $\\,\\alpha_T = 6.0\\ \\mathrm{nM}\\ \\mathrm{min}^{-1}\\,$ and toxin loss rate $\\,\\delta_T = 0.060\\ \\mathrm{min}^{-1}\\,$.\n- Antitoxin production rate $\\,\\alpha_A = 4.0\\ \\mathrm{nM}\\ \\mathrm{min}^{-1}\\,$ and antitoxin loss rate $\\,\\delta_A = 0.200\\ \\mathrm{min}^{-1}\\,$.\n\nAssume the following fundamental bases:\n1. Under steady-state in a well-mixed environment, the total concentrations satisfy $d[T]_{\\mathrm{tot}}/dt = \\alpha_T - \\delta_T [T]_{\\mathrm{tot}} = 0$ and $d[A]_{\\mathrm{tot}}/dt = \\alpha_A - \\delta_A [A]_{\\mathrm{tot}} = 0$, where $[T]_{\\mathrm{tot}} = [T] + [C]$ and $[A]_{\\mathrm{tot}} = [A] + [C]$.\n2. Binding is fast relative to production and loss, so the free species satisfy the thermodynamic equilibrium relation $K_d = \\dfrac{[T][A]}{[C]}$ at steady-state.\n\nA prior characterization of this toxin indicates that a free toxin concentration exceeding $50\\ \\mathrm{nM}$ is sufficient to cause lethality on the timescale relevant here.\n\nCompute the steady-state free toxin fraction $f^\\ast = \\dfrac{[T]}{[T]_{\\mathrm{tot}}}$ under the trigger conditions specified. Express your answer as a dimensionless decimal rounded to four significant figures. Also state whether the lethal threshold is exceeded based on your computed steady-state free toxin level, but report only the value of $f^\\ast$ as your final numeric answer.", "solution": "The problem statement has been validated and found to be scientifically sound, well-posed, and self-contained. It presents a standard quantitative model of a Type II toxin-antitoxin system, a common problem in synthetic biology. We may proceed with the solution.\n\nThe analysis begins from the two fundamental assumptions provided: steady-state mass balance for the total molecular species and fast-binding equilibrium.\n\nFirst, we determine the total steady-state concentrations of toxin, $[T]_{\\mathrm{tot}}$, and antitoxin, $[A]_{\\mathrm{tot}}$. The problem states that under steady-state conditions, the time derivatives of the total concentrations are zero.\n\nFor the total toxin concentration, we have:\n$$\n\\frac{d[T]_{\\mathrm{tot}}}{dt} = \\alpha_T - \\delta_T [T]_{\\mathrm{tot}} = 0\n$$\nSolving for $[T]_{\\mathrm{tot}}$ is trivial:\n$$\n[T]_{\\mathrm{tot}} = \\frac{\\alpha_T}{\\delta_T}\n$$\nSubstituting the given values, $\\alpha_T = 6.0\\ \\mathrm{nM}\\ \\mathrm{min}^{-1}$ and $\\delta_T = 0.060\\ \\mathrm{min}^{-1}$:\n$$\n[T]_{\\mathrm{tot}} = \\frac{6.0\\ \\mathrm{nM}\\ \\mathrm{min}^{-1}}{0.060\\ \\mathrm{min}^{-1}} = 100\\ \\mathrm{nM}\n$$\n\nSimilarly, for the total antitoxin concentration:\n$$\n\\frac{d[A]_{\\mathrm{tot}}}{dt} = \\alpha_A - \\delta_A [A]_{\\mathrm{tot}} = 0\n$$\n$$\n[A]_{\\mathrm{tot}} = \\frac{\\alpha_A}{\\delta_A}\n$$\nSubstituting the given values, $\\alpha_A = 4.0\\ \\mathrm{nM}\\ \\mathrm{min}^{-1}$ and $\\delta_A = 0.200\\ \\mathrm{min}^{-1}$:\n$$\n[A]_{\\mathrm{tot}} = \\frac{4.0\\ \\mathrm{nM}\\ \\mathrm{min}^{-1}}{0.200\\ \\mathrm{min}^{-1}} = 20\\ \\mathrm{nM}\n$$\n\nNext, we establish a system of equations to solve for the free concentrations, $[T]$ and $[A]$, and the complex concentration, $[C]$, at steady-state. The relationships between total and free species are given by:\n1. $[T]_{\\mathrm{tot}} = [T] + [C]$\n2. $[A]_{\\mathrm{tot}} = [A] + [C]$\n\nThe binding equilibrium is described by the dissociation constant, $K_d$:\n3. $K_d = \\frac{[T][A]}{[C]}$\n\nWe have a system of three equations and three unknowns ($[T]$, $[A]$, $[C]$). We can solve this system by expressing $[A]$ and $[C]$ as functions of $[T]$.\nFrom equation (1):\n$$\n[C] = [T]_{\\mathrm{tot}} - [T]\n$$\nFrom equation (2):\n$$\n[A] = [A]_{\\mathrm{tot}} - [C]\n$$\nSubstituting the expression for $[C]$ into the equation for $[A]$ yields:\n$$\n[A] = [A]_{\\mathrm{tot}} - ([T]_{\\mathrm{tot}} - [T]) = [T] + [A]_{\\mathrm{tot}} - [T]_{\\mathrm{tot}}\n$$\nNow, substitute the expressions for $[A]$ and $[C]$ into the equilibrium equation (3):\n$$\nK_d = \\frac{[T]([T] + [A]_{\\mathrm{tot}} - [T]_{\\mathrm{tot}})}{[T]_{\\mathrm{tot}} - [T]}\n$$\nThis can be rearranged into a standard quadratic equation of the form $ax^2 + bx + c = 0$ for the variable $[T]$.\n$$\nK_d ([T]_{\\mathrm{tot}} - [T]) = [T]^2 + ([A]_{\\mathrm{tot}} - [T]_{\\mathrm{tot}})[T]\n$$\n$$\n0 = [T]^2 + ([A]_{\\mathrm{tot}} - [T]_{\\mathrm{tot}})[T] + K_d [T] - K_d [T]_{\\mathrm{tot}}\n$$\n$$\n[T]^2 + ([A]_{\\mathrm{tot}} - [T]_{\\mathrm{tot}} + K_d)[T] - K_d [T]_{\\mathrm{tot}} = 0\n$$\nWe now substitute the known numerical values into this quadratic equation: $[T]_{\\mathrm{tot}} = 100\\ \\mathrm{nM}$, $[A]_{\\mathrm{tot}} = 20\\ \\mathrm{nM}$, and $K_d = 5\\ \\mathrm{nM}$.\n$$\n[T]^2 + (20 - 100 + 5)[T] - (5)(100) = 0\n$$\n$$\n[T]^2 - 75[T] - 500 = 0\n$$\nWe solve this equation for $[T]$ using the quadratic formula, $[T] = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a}$, where $a=1$, $b=-75$, and $c=-500$.\n$$\n[T] = \\frac{-(-75) \\pm \\sqrt{(-75)^2 - 4(1)(-500)}}{2(1)}\n$$\n$$\n[T] = \\frac{75 \\pm \\sqrt{5625 + 2000}}{2}\n$$\n$$\n[T] = \\frac{75 \\pm \\sqrt{7625}}{2}\n$$\nThe value of $\\sqrt{7625}$ is approximately $87.3212$. This gives two possible mathematical solutions:\n$$\n[T]_1 = \\frac{75 + 87.3212}{2} \\approx 81.1606\\ \\mathrm{nM}\n$$\n$$\n[T]_2 = \\frac{75 - 87.3212}{2} \\approx -6.1606\\ \\mathrm{nM}\n$$\nSince concentration must be a non-negative quantity, the only physically meaningful solution is $[T] \\approx 81.1606\\ \\mathrm{nM}$.\n\nThe lethal threshold for the free toxin is given as $50\\ \\mathrm{nM}$. Our calculated steady-state concentration $[T] \\approx 81.16\\ \\mathrm{nM}$ is substantially greater than this threshold. Therefore, the kill switch is activated and cell death is expected.\n\nThe problem requires the computation of the steady-state free toxin fraction, $f^* = \\frac{[T]}{[T]_{\\mathrm{tot}}}$.\n$$\nf^* = \\frac{81.1606\\ \\mathrm{nM}}{100\\ \\mathrm{nM}} = 0.811606\n$$\nRounding this result to four significant figures as requested, we obtain $f^* = 0.8116$.", "answer": "$$\\boxed{0.8116}$$", "id": "2716751"}, {"introduction": "A critical aspect of biocontainment design is anticipating and mitigating evolutionary escape through spontaneous mutation. This hands-on practice explores how to quantify this risk by introducing the concept of a 'mutational target size'—the number of distinct mutations that can disable the system [@problem_id:2716739]. By applying first principles of probability, you will calculate the effective per-division escape mutation rate ($\\mu_{\\text{eff}}$) and discover the dramatic increase in security achieved by layering two independent containment modules.", "problem": "A synthetic containment design in a bacterium implements an auxotrophic dependency on a nonstandard nutrient and, optionally, a toxin-based kill switch. Consider the following modeling assumptions consistent with population genetics and molecular mutagenesis:\n\n- The per-base, per-division point-mutation probability is $\\,\\mu_{b} = 1.0 \\times 10^{-10}\\,$, assumed identical at all relevant sites and independent across sites and loci.\n- Within any genetic module, an \"escape\" is caused by any one of a specified set of single-nucleotide changes; these single-nucleotide changes are non-overlapping and each, by itself, is sufficient to cause escape within that module.\n- Distinct genetic modules (for example, an auxotrophy module and a kill-switch module) are unlinked and mutate independently during a single cell division.\n- Insertions, deletions, recombination, gene conversion, and selection are negligible on the single-division timescale considered here.\n\nDefine the effective escape mutation rate $\\,\\mu_{\\text{eff}}\\,$ as the per-division probability that a newborn cell is already an escaper (that is, it can grow without the nonstandard nutrient and will not be killed by the kill switch if present). Use only first principles of rare-event combination and independence for your derivations.\n\nThe auxotrophy module has three genetically redundant escape routes (any one route mutating yields escape of the module). The numbers of distinct, single-nucleotide escape-conferring changes in each route are:\n- Route A: $\\,25\\,$\n- Route B: $\\,12\\,$\n- Route C: $\\,8\\,$\n\nThe toxin-based kill-switch module has two disjoint mutational targets that independently yield escape of the module (any one suffices):\n- Toxin coding sequence critical sites: $\\,110\\,$\n- Promoter/operator critical nucleotides: $\\,20\\,$\n\nTasks:\n1. Starting from the definition of per-base mutation probability and independence, derive an expression for the module-level escape probability in a single division when a module has $\\,T\\,$ distinct single-nucleotide escape-conferring targets. State and justify any approximation you use.\n2. Using your result, derive the expression for the design-level $\\,\\mu_{\\text{eff}}\\,$ when escape requires the simultaneous failure of two independent modules (for example, auxotrophy and kill switch), each defined by its own total target size.\n3. Numerically estimate $\\,\\mu_{\\text{eff}}\\,$ for:\n   - The single-locus dependency in which only the auxotrophy module is implemented.\n   - The two-locus dependency in which both the auxotrophy and the kill-switch modules must fail for escape.\n   \nRound each final numerical value to four significant figures. Express your final answers as dimensionless probabilities in standard scientific notation. Provide your two final values as a single row vector in the order listed above.", "solution": "The problem as stated is scientifically grounded, well-posed, and contains sufficient information for a unique solution. It is based on established principles of molecular genetics and probability theory. We will proceed with the derivation and solution.\n\nThe fundamental givens are:\nThe per-base, per-division point-mutation probability is $\\mu_{b} = 1.0 \\times 10^{-10}$.\nMutations at relevant sites are independent events.\nA module escapes if any one of its specific single-nucleotide targets mutates.\nThe design escapes only if all its constituent modules fail.\n\nThe analysis is performed per cell division.\n\nTask 1: Derivation of module-level escape probability.\n\nLet a given genetic module contain $T$ distinct, non-overlapping single-nucleotide sites where a point mutation at any single site is sufficient to cause the module to fail (i.e., to \"escape\" its intended function). The probability of a mutation at any single one of these sites during one cell division is given as $\\mu_{b}$.\n\nThe probability that a specific site does *not* mutate is therefore $1 - \\mu_{b}$.\nFor the module to remain functional, *none* of the $T$ critical sites may mutate. Since the mutations are independent events, the probability that no mutation occurs at any of the $T$ sites is the product of the individual probabilities of non-mutation:\n$$P(\\text{no escape}) = (1 - \\mu_{b})^{T}$$\nThe probability of module escape, which we denote $\\mu_{\\text{module}}$, is the complement of this event. That is, the module escapes if at least one of the $T$ sites mutates.\n$$\\mu_{\\text{module}} = 1 - P(\\text{no escape}) = 1 - (1 - \\mu_{b})^{T}$$\nThis is the exact expression under the assumption of independence.\n\nThe problem asks us to state and justify any approximation used. Given that $\\mu_{b} = 1.0 \\times 10^{-10}$ is an extremely small number, we can employ a binomial approximation for the term $(1 - \\mu_{b})^{T}$. For a small value $x$ and any real number $n$, the expansion is $(1 - x)^{n} \\approx 1 - nx$.\nApplying this to our expression with $x = \\mu_{b}$ and $n = T$:\n$$(1 - \\mu_{b})^{T} \\approx 1 - T\\mu_{b}$$\nSubstituting this approximation back into the expression for $\\mu_{\\text{module}}$:\n$$\\mu_{\\text{module}} \\approx 1 - (1 - T\\mu_{b}) = T\\mu_{b}$$\nThe justification for this approximation is that the probability of simultaneous mutations at two or more of the $T$ sites is negligible. The next term in the binomial expansion is $\\binom{T}{2}(-\\mu_{b})^2$, which is of order $T^2\\mu_{b}^2$. Since $\\mu_{b}^2$ is of order $10^{-20}$, this and all higher-order terms are vanishingly small and can be safely ignored for any realistic value of $T$. The approximation is equivalent to stating that for rare, independent events, the probability of their union is well-approximated by the sum of their individual probabilities.\n\nTask 2: Derivation of design-level escape probability for two independent modules.\n\nLet us consider a containment design composed of two independent modules, Module 1 and Module 2, with total single-nucleotide target sizes $T_{1}$ and $T_{2}$, respectively. Let their per-division escape probabilities be $\\mu_{1}$ and $\\mu_{2}$. From Task 1, we have:\n$$\\mu_{1} \\approx T_{1}\\mu_{b}$$\n$$\\mu_{2} \\approx T_{2}\\mu_{b}$$\nThe problem states that for the overall design to fail (i.e., for the cell to become an \"escaper\"), *both* modules must fail simultaneously within the same division lineage. Since the modules are specified to be unlinked and mutate independently, the joint probability of both events occurring is the product of their individual probabilities.\nTherefore, the effective escape rate for the two-module design, $\\mu_{\\text{eff}}$, is:\n$$\\mu_{\\text{eff}} = \\mu_{1} \\times \\mu_{2}$$\nSubstituting the approximated expressions for $\\mu_{1}$ and $\\mu_{2}$:\n$$\\mu_{\\text{eff}} \\approx (T_{1}\\mu_{b})(T_{2}\\mu_{b}) = T_{1}T_{2}\\mu_{b}^{2}$$\nThis expression represents the per-division probability that a newborn cell has acquired mutations that disable both containment modules.\n\nTask 3: Numerical estimation.\n\nFirst, we must calculate the total target size, $T$, for each module. The problem specifies that for each module, any one of the listed changes is sufficient for escape. This means the total target size for a module is the sum of the sizes of its disjoint escape routes or targets.\n\nFor the auxotrophy module (let us denote it 'aux'), the total target size $T_{\\text{aux}}$ is the sum of the targets in its three redundant routes:\n$$T_{\\text{aux}} = 25 + 12 + 8 = 45$$\n\nFor the toxin-based kill-switch module (let us denote it 'ks'), the total target size $T_{\\text{ks}}$ is the sum of its two disjoint targets:\n$$T_{\\text{ks}} = 110 + 20 = 130$$\n\nThe per-base mutation rate is given as $\\mu_{b} = 1.0 \\times 10^{-10}$.\n\nCase i: Single-locus dependency (auxotrophy module only).\nIn this scenario, the design consists of only the auxotrophy module. The effective escape rate $\\mu_{\\text{eff,1}}$ is simply the escape rate of this single module. Using the formula from Task 1:\n$$\\mu_{\\text{eff,1}} = \\mu_{\\text{aux}} \\approx T_{\\text{aux}}\\mu_{b} = 45 \\times (1.0 \\times 10^{-10})$$\n$$\\mu_{\\text{eff,1}} = 4.5 \\times 10^{-9}$$\nTo four significant figures, this is $4.500 \\times 10^{-9}$.\n\nCase ii: Two-locus dependency (auxotrophy and kill-switch modules).\nIn this scenario, the design requires the simultaneous failure of both modules. We use the formula derived in Task 2:\n$$\\mu_{\\text{eff,2}} \\approx T_{\\text{aux}}T_{\\text{ks}}\\mu_{b}^{2} = (45)(130)(1.0 \\times 10^{-10})^{2}$$\n$$\\mu_{\\text{eff,2}} \\approx 5850 \\times (1.0 \\times 10^{-20})$$\n$$\\mu_{\\text{eff,2}} \\approx 5.85 \\times 10^{3} \\times 10^{-20} = 5.85 \\times 10^{-17}$$\nTo four significant figures, this is $5.850 \\times 10^{-17}$.\n\nFinal answers are to be presented as a row vector.", "answer": "$$\n\\boxed{\n\\begin{pmatrix}\n4.500 \\times 10^{-9} & 5.850 \\times 10^{-17}\n\\end{pmatrix}\n}\n$$", "id": "2716739"}, {"introduction": "While static calculations provide crucial estimates of escape probability, the true test of containment is its long-term stability within an evolving population. This practice guides you to implement a replicator-mutator model, a fundamental tool in evolutionary dynamics, to simulate the competition between engineered and escapee genotypes over thousands of generations [@problem_id:2716804]. By modeling the interplay of fitness costs, mutation, and fluctuating selection pressures, you will explore how evolutionary forces can either maintain or undermine layered containment strategies under different environmental conditions.", "problem": "You are to implement a deterministic replicator–mutator model for the joint evolution of auxotrophy and kill-switch components in a microbial population exposed to a two-state fluctuating environment. The goal is to start from first principles of selection and mutation, specify a minimal but biologically realistic model, and compute whether compensatory evolution undermines both containment layers, operationalized as the double-escape genotype reaching or exceeding a specified frequency threshold.\n\nFundamental base and modeling assumptions:\n- The Central Dogma of Molecular Biology (CDMB) implies that genotypes map to phenotypes that determine fitness, and differential reproduction under selection changes genotype frequencies from one generation to the next.\n- In a deterministic, infinite-population approximation of the Wright–Fisher model with selection and mutation, the genotype frequency update follows a replicator–mutator dynamic. If $x_i(t)$ is the frequency of genotype $i$ at generation $t$, $w_i(e)$ is its fitness in environment $e$, and $\\mathbf{M}$ is the mutation transition matrix with entries $M_{ij}$ giving the probability that an offspring of type $i$ becomes type $j$, then one generation of selection followed by mutation is\n$$\n\\tilde{x}_i(t) = \\frac{w_i(e_t)\\,x_i(t)}{\\sum_k w_k(e_t)\\,x_k(t)}, \\quad x_j(t+1) = \\sum_i \\tilde{x}_i(t)\\,M_{ij}.\n$$\n- Two engineered containment layers are present: auxotrophy (nutritional dependency) and a kill switch. Each layer may be intact or undermined by mutation or compensatory evolution.\n\nGenotype state space:\n- There are four genotypes, each encoded by two binary traits: auxotrophy state and kill-switch state.\n    - $g_0 = \\mathrm{AK}$: auxotrophy intact (dependent), kill switch intact.\n    - $g_1 = \\mathrm{AM}$: auxotrophy intact (dependent), kill switch mutated (disabled).\n    - $g_2 = \\mathrm{CK}$: auxotrophy compensated (prototrophy restored), kill switch intact.\n    - $g_3 = \\mathrm{CM}$: auxotrophy compensated, kill switch mutated (double escape).\n- The initial population is monomorphic, $x_0(0) = 1$, $x_1(0) = 0$, $x_2(0) = 0$, $x_3(0) = 0$.\n\nEnvironments and fitness:\n- The environment alternates between a permissive state $\\mathrm{P}$ (nutrient present, kill switch repressed) and a restrictive state $\\mathrm{R}$ (nutrient absent, kill switch active).\n- Fitnesses in $\\mathrm{P}$ impose only metabolic burdens:\n    - $w_{\\mathrm{AK}}(\\mathrm{P}) = 1 - c_A - c_K$,\n    - $w_{\\mathrm{AM}}(\\mathrm{P}) = 1 - c_A$,\n    - $w_{\\mathrm{CK}}(\\mathrm{P}) = 1 - b_C - c_K$,\n    - $w_{\\mathrm{CM}}(\\mathrm{P}) = 1 - b_C$,\n  where $c_A$ is the burden of auxotrophy engineering, $c_K$ is the burden of maintaining the intact kill switch, and $b_C$ is the cost of compensatory prototrophy.\n- Fitnesses in $\\mathrm{R}$ impose survival penalties due to containment layers:\n    - $w_{\\mathrm{AK}}(\\mathrm{R}) = s_A \\, s_K$,\n    - $w_{\\mathrm{AM}}(\\mathrm{R}) = s_A$,\n    - $w_{\\mathrm{CK}}(\\mathrm{R}) = s_K$,\n    - $w_{\\mathrm{CM}}(\\mathrm{R}) = 1$,\n  where $s_A \\in (0,1]$ quantifies survival under auxotrophic starvation and $s_K \\in (0,1]$ quantifies survival under an active kill switch; smaller values mean stronger containment.\n\nMutation structure:\n- Let $u_A$ be the per-generation probability that a lineage with auxotrophy intact becomes compensated (A→C), and $u_K$ be the probability that an intact kill switch mutates to disabled (K→M). Back-mutation is neglected.\n- The per-generation transition probabilities for each genotype, allowing simultaneous independent mutations, are:\n    - From $\\mathrm{AK}$: to $\\mathrm{CM}$ with probability $u_A u_K$, to $\\mathrm{CK}$ with probability $u_A (1-u_K)$, to $\\mathrm{AM}$ with probability $(1-u_A) u_K$, and remain $\\mathrm{AK}$ with probability $(1-u_A)(1-u_K)$.\n    - From $\\mathrm{AM}$: to $\\mathrm{CM}$ with probability $u_A$, else remain $\\mathrm{AM}$.\n    - From $\\mathrm{CK}$: to $\\mathrm{CM}$ with probability $u_K$, else remain $\\mathrm{CK}$.\n    - From $\\mathrm{CM}$: remain $\\mathrm{CM}$.\n\nEnvironment schedule:\n- Consider a periodic schedule of length $L$ generations. In each period, the first $n_R = \\mathrm{round}(f_R \\, L)$ generations are restrictive ($\\mathrm{R}$), and the remaining $L - n_R$ generations are permissive ($\\mathrm{P}$). This period repeats until a total of $T$ generations elapse. The fraction $f_R \\in [0,1]$ controls the restrictive-duty cycle.\n\nDecision rule for “undermined containment”:\n- Define a threshold $\\tau \\in (0,1)$. After $T$ generations, if the double-escape genotype frequency satisfies $x_{\\mathrm{CM}}(T) \\ge \\tau$, declare that compensatory evolution undermines both layers; otherwise, declare that it does not.\n\nYour task:\n- Implement the replicator–mutator update with the above structure and compute the boolean outcome for each provided test case.\n\nTest suite:\n- Use the following four test cases, each specified as a tuple $(T, L, f_R, s_A, s_K, c_A, c_K, b_C, u_A, u_K, \\tau)$:\n    - Case $1$ (balanced, strong restriction, moderate burdens): $(T=\\;20000,\\; L=\\;20,\\; f_R=\\;0.5,\\; s_A=\\;0.01,\\; s_K=\\;0.01,\\; c_A=\\;0.01,\\; c_K=\\;0.03,\\; b_C=\\;0.02,\\; u_A=\\;10^{-4},\\; u_K=\\;10^{-4},\\; \\tau=\\;0.5)$.\n    - Case $2$ (rare restriction, compensation costly): $(T=\\;20000,\\; L=\\;100,\\; f_R=\\;0.01,\\; s_A=\\;0.01,\\; s_K=\\;0.01,\\; c_A=\\;0.01,\\; c_K=\\;0.03,\\; b_C=\\;0.05,\\; u_A=\\;10^{-4},\\; u_K=\\;10^{-4},\\; \\tau=\\;0.5)$.\n    - Case $3$ (always restrictive): $(T=\\;10000,\\; L=\\;10,\\; f_R=\\;1.0,\\; s_A=\\;0.01,\\; s_K=\\;0.01,\\; c_A=\\;0.01,\\; c_K=\\;0.03,\\; b_C=\\;0.02,\\; u_A=\\;10^{-4},\\; u_K=\\;10^{-4},\\; \\tau=\\;0.5)$.\n    - Case $4$ (leaky barriers and high burdens): $(T=\\;20000,\\; L=\\;20,\\; f_R=\\;0.5,\\; s_A=\\;0.2,\\; s_K=\\;0.2,\\; c_A=\\;0.01,\\; c_K=\\;0.10,\\; b_C=\\;0.10,\\; u_A=\\;10^{-4},\\; u_K=\\;10^{-4},\\; \\tau=\\;0.5)$.\n\nFinal output format:\n- Your program should produce a single line of output containing the results as a Python-style list of booleans, for example, $[\\mathrm{True},\\mathrm{False},\\mathrm{True},\\mathrm{False}]$. Do not print any additional text.", "solution": "The problem posed is a request to implement a deterministic population genetics model to simulate the evolutionary dynamics of a synthetically engineered microbial population. The model must account for selection in a fluctuating environment and mutation. The objective is to determine whether a \"double-escape\" mutant, which has evaded two independent containment systems, reaches a specified frequency threshold within a given timeframe.\n\nThis problem is valid. It is scientifically grounded in the principles of evolutionary dynamics, specifically the replicator-mutator framework, which is a standard deterministic approximation of the Wright-Fisher model for large populations. The problem is well-posed, providing a complete set of initial conditions, deterministic update rules, and parameters for all test cases. The language is objective and the setup is internally consistent. We shall therefore proceed with the solution.\n\nThe core of the model is the replicator-mutator equation, which describes the change in genotype frequencies over discrete, non-overlapping generations. The process for a single generation $t$ consists of two steps: selection followed by mutation.\n\nLet $\\mathbf{x}(t) = [x_0(t), x_1(t), x_2(t), x_3(t)]$ be the row vector of frequencies for the four genotypes $g_0(\\mathrm{AK})$, $g_1(\\mathrm{AM})$, $g_2(\\mathrm{CK})$, and $g_3(\\mathrm{CM})$ at generation $t$. The initial state is given as $\\mathbf{x}(0) = [1, 0, 0, 0]$.\n\nFirst, the selection step updates the frequencies based on differential fitness in the environment $e_t$ of the current generation. The fitness of genotype $i$ is $w_i(e_t)$. The mean fitness of the population is $\\bar{w}(t) = \\sum_{k=0}^{3} w_k(e_t) x_k(t)$. The frequency of genotype $i$ after selection is $\\tilde{x}_i(t)$:\n$$\n\\tilde{x}_i(t) = \\frac{w_i(e_t) x_i(t)}{\\bar{w}(t)}\n$$\nIn vector notation, this can be written as $\\tilde{\\mathbf{x}}(t) = \\frac{\\mathbf{x}(t) \\circ \\mathbf{W}(e_t)}{\\mathbf{x}(t) \\cdot \\mathbf{W}(e_t)}$, where $\\circ$ denotes the element-wise (Hadamard) product and $\\mathbf{W}(e_t)$ is the vector of fitness values for the environment $e_t$.\n\nSecond, the mutation step modifies these post-selection frequencies. We define a $4 \\times 4$ mutation matrix $\\mathbf{M}$, where the entry $M_{ij}$ is the probability that an offspring from a parent of genotype $i$ mutates to genotype $j$. The frequencies at the next generation, $x_j(t+1)$, are obtained by summing over all possible parental sources:\n$$\nx_j(t+1) = \\sum_{i=0}^{3} \\tilde{x}_i(t) M_{ij}\n$$\nIn vector form, this is a matrix multiplication: $\\mathbf{x}(t+1) = \\tilde{\\mathbf{x}}(t) \\mathbf{M}$.\n\nWe must now construct the specific components of this model based on the problem statement.\n\nThe state space consists of four genotypes, which we index from $0$ to $3$:\n- $0$: $g_0 = \\mathrm{AK}$ (auxotrophy intact, kill switch intact)\n- $1$: $g_1 = \\mathrm{AM}$ (auxotrophy intact, kill switch mutated)\n- $2$: $g_2 = \\mathrm{CK}$ (auxotrophy compensated, kill switch intact)\n- $3$: $g_3 = \\mathrm{CM}$ (auxotrophy compensated, kill switch mutated)\n\nThere are two environments, permissive ($\\mathrm{P}$) and restrictive ($\\mathrm{R}$), with corresponding fitness vectors $\\mathbf{W}_{\\mathrm{P}}$ and $\\mathbf{W}_{\\mathrm{R}}$.\nIn the permissive environment $\\mathrm{P}$, fitness is determined by metabolic costs:\n- $w_0(\\mathrm{P}) = 1 - c_A - c_K$\n- $w_1(\\mathrm{P}) = 1 - c_A$\n- $w_2(\\mathrm{P}) = 1 - b_C - c_K$\n- $w_3(\\mathrm{P}) = 1 - b_C$\nSo, $\\mathbf{W}_{\\mathrm{P}} = [1 - c_A - c_K, 1 - c_A, 1 - b_C - c_K, 1 - b_C]$.\n\nIn the restrictive environment $\\mathrm{R}$, fitness is determined by survival penalties:\n- $w_0(\\mathrm{R}) = s_A s_K$\n- $w_1(\\mathrm{R}) = s_A$\n- $w_2(\\mathrm{R}) = s_K$\n- $w_3(\\mathrm{R}) = 1$\nSo, $\\mathbf{W}_{\\mathrm{R}} = [s_A s_K, s_A, s_K, 1]$.\n\nThe mutation matrix $\\mathbf{M}$ is constructed from the mutation probabilities $u_A$ (A→C) and $u_K$ (K→M), neglecting back mutations. The matrix is:\n$$\n\\mathbf{M} = \\begin{pmatrix}\nM_{00} & M_{01} & M_{02} & M_{03} \\\\\nM_{10} & M_{11} & M_{12} & M_{13} \\\\\nM_{20} & M_{21} & M_{22} & M_{23} \\\\\nM_{30} & M_{31} & M_{32} & M_{33}\n\\end{pmatrix}\n=\n\\begin{pmatrix}\n(1-u_A)(1-u_K) & (1-u_A)u_K & u_A(1-u_K) & u_A u_K \\\\\n0 & 1-u_A & 0 & u_A \\\\\n0 & 0 & 1-u_K & u_K \\\\\n0 & 0 & 0 & 1\n\\end{pmatrix}\n$$\nThis is an upper-triangular matrix, reflecting the unidirectional nature of escape mutations in this model.\n\nThe environmental schedule is periodic with length $L$. For each period, the first $n_R = \\mathrm{round}(f_R L)$ generations are restrictive ($\\mathrm{R}$), and the subsequent $L - n_R$ generations are permissive ($\\mathrm{P}$). The environment for generation $t$ is thus $\\mathrm{R}$ if $(t \\pmod L) < n_R$, and $\\mathrm{P}$ otherwise.\n\nThe simulation algorithm proceeds as follows:\n1. For each test case, extract the parameters: $T, L, f_R, s_A, s_K, c_A, c_K, b_C, u_A, u_K, \\tau$.\n2. Construct the fitness vectors $\\mathbf{W}_{\\mathrm{P}}$ and $\\mathbf{W}_{\\mathrm{R}}$ and the mutation matrix $\\mathbf{M}$.\n3. Calculate the number of restrictive generations per cycle, $n_R = \\mathrm{round}(f_R L)$.\n4. Initialize the genotype frequency vector $\\mathbf{x} = [1.0, 0.0, 0.0, 0.0]$.\n5. Iterate for $t$ from $0$ to $T-1$:\n    a. Determine the current environment based on $t \\pmod L$ and $n_R$. Select the corresponding fitness vector $\\mathbf{W}_{env}$.\n    b. Apply selection: Calculate $\\bar{w} = \\mathbf{x} \\cdot \\mathbf{W}_{env}$. Then calculate the intermediate frequencies $\\tilde{\\mathbf{x}} = (\\mathbf{x} \\circ \\mathbf{W}_{env}) / \\bar{w}$.\n    c. Apply mutation: Update the frequency vector for the next generation: $\\mathbf{x} \\leftarrow \\tilde{\\mathbf{x}} \\mathbf{M}$.\n6. After $T$ generations, retrieve the final frequency of the double-escape mutant, $x_3 = \\mathbf{x}[3]$.\n7. The outcome is `True` if $x_3 \\ge \\tau$ and `False` otherwise.\n\nThis procedure will be implemented for each test case to produce the final boolean results.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Implements a deterministic replicator–mutator model for the joint evolution\n    of auxotrophy and kill-switch components in a microbial population.\n    \"\"\"\n    \n    # Test cases as tuples: (T, L, f_R, s_A, s_K, c_A, c_K, b_C, u_A, u_K, tau)\n    test_cases = [\n        # Case 1 (balanced, strong restriction, moderate burdens)\n        (20000, 20, 0.5, 0.01, 0.01, 0.01, 0.03, 0.02, 1e-4, 1e-4, 0.5),\n        # Case 2 (rare restriction, compensation costly)\n        (20000, 100, 0.01, 0.01, 0.01, 0.01, 0.03, 0.05, 1e-4, 1e-4, 0.5),\n        # Case 3 (always restrictive)\n        (10000, 10, 1.0, 0.01, 0.01, 0.01, 0.03, 0.02, 1e-4, 1e-4, 0.5),\n        # Case 4 (leaky barriers and high burdens)\n        (20000, 20, 0.5, 0.2, 0.2, 0.01, 0.10, 0.10, 1e-4, 1e-4, 0.5),\n    ]\n\n    results = []\n    \n    # Genotype indices: 0:AK, 1:AM, 2:CK, 3:CM\n    for case in test_cases:\n        T, L, f_R, s_A, s_K, c_A, c_K, b_C, u_A, u_K, tau = case\n\n        # 1. Construct model components\n        \n        # Fitness vectors W_P (permissive) and W_R (restrictive)\n        W_P = np.array([\n            1 - c_A - c_K,  # AK fitness in P\n            1 - c_A,          # AM fitness in P\n            1 - b_C - c_K,  # CK fitness in P\n            1 - b_C           # CM fitness in P\n        ])\n\n        W_R = np.array([\n            s_A * s_K,      # AK fitness in R\n            s_A,            # AM fitness in R\n            s_K,            # CK fitness in R\n            1.0             # CM fitness in R\n        ])\n        \n        # Mutation matrix M\n        M = np.array([\n            # AK(0) -> AK(0), AM(1), CK(2), CM(3)\n            [(1-u_A)*(1-u_K), (1-u_A)*u_K, u_A*(1-u_K), u_A*u_K],\n            # AM(1) -> AM(1), CM(3)\n            [0, 1-u_A, 0, u_A],\n            # CK(2) -> CK(2), CM(3)\n            [0, 0, 1-u_K, u_K],\n            # CM(3) -> CM(3)\n            [0, 0, 0, 1]\n        ])\n\n        # 2. Set up simulation\n        \n        # Initial population: monomorphic for AK (genotype 0)\n        x = np.array([1.0, 0.0, 0.0, 0.0])\n        \n        # Environmental schedule\n        n_R = round(f_R * L)\n\n        # 3. Run simulation\n        for t in range(T):\n            # Determine environment for generation t\n            if (t % L) < n_R:\n                W_env = W_R\n            else:\n                W_env = W_P\n\n            # Selection step\n            mean_fitness = np.dot(x, W_env)\n            if mean_fitness <= 0: # Population extinction, no escape\n                x[3] = 0.0\n                break\n            \n            x_tilde = (x * W_env) / mean_fitness\n            \n            # Mutation step\n            x = x_tilde @ M\n\n        # 4. Final decision\n        # Check if the double-escape genotype frequency exceeds the threshold\n        undermined = (x[3] >= tau)\n        results.append(undermined)\n\n    # Final print statement in the exact required format.\n    # The default str() for a boolean is 'True' or 'False'\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n\n```", "id": "2716804"}]}