{"hands_on_practices": [{"introduction": "Before leveraging automated model checkers, it is crucial to understand how they compute properties from first principles. This exercise guides you through the fundamental analysis of a Continuous-Time Markov Chain (CTMC) by calculating a key property—reachability—from its embedded Discrete-Time Markov Chain (DTMC). By applying the state elimination method, you will derive a symbolic solution, revealing how a system's behavior depends directly on its underlying biochemical rate parameters [@problem_id:2739288].", "problem": "A synthetic promoter is regulated by a competing activator and repressor whose stochastic binding, unbinding, and commitment events are modeled as a Continuous-Time Markov Chain (CTMC). The promoter can be in one of five states: the unbound basal state $S_{0}$, the activator-bound state $S_{A}$, the repressor-bound state $S_{R}$, an absorbing transcriptional commitment state $G$ (goal), and an absorbing repressive commitment state $F$ (fail). The CTMC transitions are parameterized as follows, with all parameters strictly positive:\n- From $S_{0}$: activator binding occurs with rate $k_{a}$ to $S_{A}$; repressor binding occurs with rate $k_{r}$ to $S_{R}$.\n- From $S_{A}$: activator unbinding occurs with rate $u_{a}$ to $S_{0}$; transcriptional commitment occurs with rate $c_{a}$ to $G$.\n- From $S_{R}$: repressor unbinding occurs with rate $u_{r}$ to $S_{0}$; repressive commitment occurs with rate $c_{r}$ to $F$.\n- States $G$ and $F$ are absorbing.\n\nAssume the system starts in $S_{0}$. The probability of eventually reaching $G$ before $F$ in a CTMC depends only on the embedded Discrete-Time Markov Chain (DTMC) induced by normalizing the outgoing rates at each non-absorbing state. Using this fact as the foundational starting point together with the definition of a Markov chain and the standard state-elimination construction for reachability, do the following:\n1. Construct the embedded DTMC for the transient states $\\{S_{0}, S_{A}, S_{R}\\}$ with absorbing states $\\{G, F\\}$ by expressing each transition probability as a rational function of the CTMC rates $k_{a}, k_{r}, u_{a}, u_{r}, c_{a}, c_{r}$.\n2. Using state elimination on the embedded DTMC, first eliminate $S_{A}$ and then eliminate $S_{R}$ to obtain an equivalent DTMC over $\\{S_{0}, G, F\\}$ whose transitions are rational functions of the parameters. Then, from the resulting one-transient-state DTMC, derive a closed-form analytical expression for the reachability probability $\\Pr(\\lozenge G \\text{ before } F \\mid S_{0})$ as a single simplified rational function of $k_{a}, k_{r}, u_{a}, u_{r}, c_{a}, c_{r}$.\n\nProvide the final answer as a single closed-form expression. No numerical evaluation is required. Do not include units. Your final answer must be a single expression.", "solution": "The problem statement is subjected to validation.\n\n**Step 1: Extract Givens**\n-   System: A Continuous-Time Markov Chain (CTMC) model of a synthetic promoter.\n-   States: $S_{0}$ (unbound), $S_{A}$ (activator-bound), $S_{R}$ (repressor-bound), $G$ (goal, absorbing), $F$ (fail, absorbing).\n-   Initial State: The system starts in state $S_{0}$.\n-   CTMC Transition Rates (all parameters are strictly positive):\n    -   From $S_{0}$: to $S_{A}$ with rate $k_{a}$; to $S_{R}$ with rate $k_{r}$.\n    -   From $S_{A}$: to $S_{0}$ with rate $u_{a}$; to $G$ with rate $c_{a}$.\n    -   From $S_{R}$: to $S_{0}$ with rate $u_{r}$; to $F$ with rate $c_{r}$.\n-   Objective: Derive a closed-form analytical expression for the reachability probability $\\Pr(\\lozenge G \\text{ before } F \\mid S_{0})$.\n-   Methodology:\n    1.  Construct the embedded Discrete-Time Markov Chain (DTMC) for the transient states $\\{S_{0}, S_{A}, S_{R}\\}$.\n    2.  Use state elimination on the DTMC, first eliminating $S_{A}$, then $S_{R}$, to find the probability.\n\n**Step 2: Validate Using Extracted Givens**\nThe problem is assessed against the validation criteria.\n-   **Scientifically Grounded**: The problem describes a standard stochastic model used in synthetic and systems biology. CTMCs are a fundamental tool for analyzing biochemical reaction networks. The model is a valid, if simplified, representation of promoter regulation.\n-   **Well-Posed**: The problem is mathematically precise. The states, transitions, rates, and initial conditions are explicitly defined. The objective is to calculate a reachability probability, a standard problem in Markov chain theory. The existence of a unique solution is guaranteed.\n-   **Objective**: The language is formal and unambiguous. The parameters are defined mathematically.\n-   **Completeness**: The problem is self-contained and provides all necessary information to derive a solution. There are no contradictions.\n\n**Step 3: Verdict and Action**\nThe problem is valid. The solution process will now commence.\n\nThe problem requires the calculation of a reachability probability in a CTMC, starting from the embedded Discrete-Time Markov Chain (DTMC). The probability of reaching a target set of states before another disjoint set is identical for a CTMC and its embedded DTMC.\n\n**Part 1: Construction of the Embedded DTMC**\nThe transition probabilities of the embedded DTMC are found by normalizing the outgoing rates from each non-absorbing state.\nThe transient states are $\\{S_{0}, S_{A}, S_{R}\\}$ and the absorbing states are $\\{G, F\\}$.\n\nFrom state $S_{0}$, the total outgoing rate is $\\lambda_{0} = k_{a} + k_{r}$. The transition probabilities are:\n-   $P(S_{A} | S_{0}) = \\frac{k_{a}}{k_{a} + k_{r}}$\n-   $P(S_{R} | S_{0}) = \\frac{k_{r}}{k_{a} + k_{r}}$\n\nFrom state $S_{A}$, the total outgoing rate is $\\lambda_{A} = u_{a} + c_{a}$. The transition probabilities are:\n-   $P(S_{0} | S_{A}) = \\frac{u_{a}}{u_{a} + c_{a}}$\n-   $P(G | S_{A}) = \\frac{c_{a}}{u_{a} + c_{a}}$\n\nFrom state $S_{R}$, the total outgoing rate is $\\lambda_{R} = u_{r} + c_{r}$. The transition probabilities are:\n-   $P(S_{0} | S_{R}) = \\frac{u_{r}}{u_{r} + c_{r}}$\n-   $P(F | S_{R}) = \\frac{c_{r}}{u_{r} + c_{r}}$\n\n**Part 2: State Elimination and Probability Calculation**\nLet $\\pi_{i}$ be the probability of eventually reaching state $G$ starting from state $i$. By definition, for the absorbing states, we have $\\pi_{G} = 1$ and $\\pi_{F} = 0$. For the transient states, we can set up a system of linear equations by conditioning on the first transition:\n$$\n\\pi_{i} = \\sum_{j} P(j|i) \\pi_{j}\n$$\nThis gives the following system of equations:\n1.  $\\pi_{S_{0}} = P(S_{A} | S_{0}) \\pi_{S_{A}} + P(S_{R} | S_{0}) \\pi_{S_{R}} = \\left(\\frac{k_{a}}{k_{a} + k_{r}}\\right) \\pi_{S_{A}} + \\left(\\frac{k_{r}}{k_{a} + k_{r}}\\right) \\pi_{S_{R}}$\n2.  $\\pi_{S_{A}} = P(S_{0} | S_{A}) \\pi_{S_{0}} + P(G | S_{A}) \\pi_{G} = \\left(\\frac{u_{a}}{u_{a} + c_{a}}\\right) \\pi_{S_{0}} + \\left(\\frac{c_{a}}{u_{a} + c_{a}}\\right)(1)$\n3.  $\\pi_{S_{R}} = P(S_{0} | S_{R}) \\pi_{S_{0}} + P(F | S_{R}) \\pi_{F} = \\left(\\frac{u_{r}}{u_{r} + c_{r}}\\right) \\pi_{S_{0}} + \\left(\\frac{c_{r}}{u_{r} + c_{r}}\\right)(0) = \\left(\\frac{u_{r}}{u_{r} + c_{r}}\\right) \\pi_{S_{0}}$\n\nThe problem requires a state elimination procedure. This is equivalent to solving this system by substitution.\n\nFirst, we eliminate $\\pi_{S_{A}}$ by substituting equation (2) into equation (1):\n$$\n\\pi_{S_{0}} = \\left(\\frac{k_{a}}{k_{a} + k_{r}}\\right) \\left[ \\left(\\frac{u_{a}}{u_{a} + c_{a}}\\right) \\pi_{S_{0}} + \\frac{c_{a}}{u_{a} + c_{a}} \\right] + \\left(\\frac{k_{r}}{k_{a} + k_{r}}\\right) \\pi_{S_{R}}\n$$\n$$\n\\pi_{S_{0}} = \\frac{k_{a} u_{a}}{(k_{a} + k_{r})(u_{a} + c_{a})} \\pi_{S_{0}} + \\frac{k_{a} c_{a}}{(k_{a} + k_{r})(u_{a} + c_{a})} + \\frac{k_{r}}{k_{a} + k_{r}} \\pi_{S_{R}}\n$$\nNext, we eliminate $\\pi_{S_{R}}$ by substituting equation (3) into the above expression:\n$$\n\\pi_{S_{0}} = \\frac{k_{a} u_{a}}{(k_{a} + k_{r})(u_{a} + c_{a})} \\pi_{S_{0}} + \\frac{k_{a} c_{a}}{(k_{a} + k_{r})(u_{a} + c_{a})} + \\frac{k_{r}}{k_{a} + k_{r}} \\left[ \\left(\\frac{u_{r}}{u_{r} + c_{r}}\\right) \\pi_{S_{0}} \\right]\n$$\nThis results in a single equation for $\\pi_{S_{0}}$, representing the equivalent DTMC on $\\{S_{0}, G, F\\}$ as requested.\n$$\n\\pi_{S_{0}} = \\left( \\frac{k_{a} u_{a}}{(k_{a} + k_{r})(u_{a} + c_{a})} + \\frac{k_{r} u_{r}}{(k_{a} + k_{r})(u_{r} + c_{r})} \\right) \\pi_{S_{0}} + \\frac{k_{a} c_{a}}{(k_{a} + k_{r})(u_{a} + c_{a})}\n$$\nNow, we solve for $\\pi_{S_{0}}$:\n$$\n\\pi_{S_{0}} \\left[ 1 - \\frac{k_{a} u_{a}}{(k_{a} + k_{r})(u_{a} + c_{a})} - \\frac{k_{r} u_{r}}{(k_{a} + k_{r})(u_{r} + c_{r})} \\right] = \\frac{k_{a} c_{a}}{(k_{a} + k_{r})(u_{a} + c_{a})}\n$$\nLet us simplify the term in the brackets:\n$$\n1 - \\frac{k_{a} u_{a}}{(k_{a} + k_{r})(u_{a} + c_{a})} - \\frac{k_{r} u_{r}}{(k_{a} + k_{r})(u_{r} + c_{r})} = \\frac{(k_{a} + k_{r})(u_{a} + c_{a})(u_{r} + c_{r}) - k_{a} u_{a}(u_{r} + c_{r}) - k_{r} u_{r}(u_{a} + c_{a})}{(k_{a} + k_{r})(u_{a} + c_{a})(u_{r} + c_{r})}\n$$\nExpanding the numerator:\n$$\n(k_{a} + k_{r})(u_{a} + c_{a}) = k_{a}u_{a} + k_{a}c_{a} + k_{r}u_{a} + k_{r}c_{a}\n$$\n$$\n(k_{a}u_{a} + k_{a}c_{a} + k_{r}u_{a} + k_{r}c_{a})(u_{r} + c_{r}) = k_{a}u_{a}u_{r} + k_{a}u_{a}c_{r} + k_{a}c_{a}u_{r} + k_{a}c_{a}c_{r} + k_{r}u_{a}u_{r} + k_{r}u_{a}c_{r} + k_{r}c_{a}u_{r} + k_{r}c_{a}c_{r}\n$$\nSubtracting the other terms $k_{a} u_{a}(u_{r} + c_{r}) = k_{a}u_{a}u_{r} + k_{a}u_{a}c_{r}$ and $k_{r} u_{r}(u_{a} + c_{a}) = k_{r}u_{a}u_{r} + k_{r}c_{a}u_{r}$:\n$$\n\\text{Numerator} = (k_{a}u_{a}u_{r} + k_{a}u_{a}c_{r} + k_{a}c_{a}u_{r} + k_{a}c_{a}c_{r} + k_{r}u_{a}u_{r} + k_{r}u_{a}c_{r} + k_{r}c_{a}u_{r} + k_{r}c_{a}c_{r}) - (k_{a}u_{a}u_{r} + k_{a}u_{a}c_{r}) - (k_{r}u_{a}u_{r} + k_{r}c_{a}u_{r})\n$$\nThe terms $k_{a}u_{a}u_{r}$, $k_{a}u_{a}c_{r}$, $k_{r}u_{a}u_{r}$, and $k_{r}c_{a}u_{r}$ cancel. The simplified numerator is:\n$$\nk_{a}c_{a}u_{r} + k_{a}c_{a}c_{r} + k_{r}u_{a}c_{r} + k_{r}c_{a}c_{r}\n$$\nThis can be factored as:\n$$\nk_{a}c_{a}(u_{r} + c_{r}) + k_{r}c_{r}(u_{a} + c_{a})\n$$\nSubstituting this back into the equation for $\\pi_{S_{0}}$:\n$$\n\\pi_{S_{0}} \\left[ \\frac{k_{a}c_{a}(u_{r} + c_{r}) + k_{r}c_{r}(u_{a} + c_{a})}{(k_{a} + k_{r})(u_{a} + c_{a})(u_{r} + c_{r})} \\right] = \\frac{k_{a} c_{a}}{(k_{a} + k_{r})(u_{a} + c_{a})}\n$$\nSolving for $\\pi_{S_{0}}$:\n$$\n\\pi_{S_{0}} = \\frac{k_{a} c_{a}}{(k_{a} + k_{r})(u_{a} + c_{a})} \\cdot \\frac{(k_{a} + k_{r})(u_{a} + c_{a})(u_{r} + c_{r})}{k_{a}c_{a}(u_{r} + c_{r}) + k_{r}c_{r}(u_{a} + c_{a})}\n$$\nThe term $(k_{a} + k_{r})(u_{a} + c_{a})$ cancels out from the numerator and denominator:\n$$\n\\pi_{S_{0}} = \\frac{k_{a} c_{a} (u_{r} + c_{r})}{k_{a}c_{a}(u_{r} + c_{r}) + k_{r}c_{r}(u_{a} + c_{a})}\n$$\nThis is the final closed-form expression for the reachability probability $\\Pr(\\lozenge G \\text{ before } F \\mid S_{0})$. It is a simple rational function of the given CTMC rate parameters, as required.", "answer": "$$\n\\boxed{\\frac{k_{a} c_{a} (u_{r} + c_{r})}{k_{a} c_{a} (u_{r} + c_{r}) + k_{r} c_{r} (u_{a} + c_{a})}}\n$$", "id": "2739288"}, {"introduction": "While reachability is a fundamental property, we often need to ask more nuanced, quantitative questions about system performance. This practice demonstrates how to translate a biological requirement, such as the 'expected total mRNA produced by a certain time,' into a precise, verifiable query using Continuous Stochastic Logic (CSL) with a reward structure. Mastering this translation is a vital skill for practical model checking, allowing you to formally specify and test complex hypotheses about your genetic circuit's behavior [@problem_id:2739299].", "problem": "A genetic circuit with a single gene is modeled as a Continuous-Time Markov Chain (CTMC). The CTMC state $s \\in S$ records the promoter state and discrete molecular counts, including messenger RNA (mRNA). The generator matrix is $Q = (q(s,s'))_{s,s' \\in S}$, with transitions corresponding to stochastic reaction events under the chemical master equation semantics. In particular, transcription is modeled as a reaction $R_1$ that, when it fires, increases the mRNA count by $1$ and has propensity (hazard) $a_1(s)$ in state $s$. Degradation reduces mRNA count but does not affect how many mRNA molecules have ever been produced. Let $N_1(t)$ denote the number of firings of $R_1$ up to time $t$.\n\nA reward structure for a CTMC consists of a state reward $r: S \\to \\mathbb{R}_{\\ge 0}$ and an impulse (transition) reward $\\iota: S \\times S \\to \\mathbb{R}_{\\ge 0}$. For a sample path $\\omega$, the cumulative reward up to time $T$ is\n$$\n\\mathcal{C}_T(\\omega) \\;=\\; \\int_0^T r\\!\\left(X(t,\\omega)\\right)\\, dt \\;+\\; \\sum_{0 < t \\le T} \\iota\\!\\left(X(t^- ,\\omega), X(t,\\omega)\\right),\n$$\nand its expectation is $\\mathbb{E}[\\mathcal{C}_T]$.\n\nYou are interested in verifying the following requirement for the CTMC model of this genetic circuit using Continuous Stochastic Logic (CSL) with rewards: “The expected total number of mRNA molecules produced by time $T$ is at most $M$.” The phrase “total number produced” refers to the cumulative count of transcription events by time $T$ (i.e., $N_1(T)$), not the number of mRNA molecules present at time $T$ and not any time-averaged occupancy.\n\nWhich option correctly defines a reward structure and a CSL reward property that captures this requirement?\n\nA. Define an impulse reward $\\iota(s,s') = 1$ if the transition $(s \\to s')$ is a firing of transcription reaction $R_1$, and $\\iota(s,s') = 0$ otherwise, with $r(s)=0$ for all $s$. Check the CSL reward property $R\\{\\text{mRNA\\_prod}\\} \\le M \\,[\\, C \\le T \\,]$.\n\nB. Define a state reward $r(s) = a_1(s)$ (the transcription propensity) and $\\iota \\equiv 0$. Check the CSL reward property $R\\{\\text{mRNA\\_rate}\\} \\le M \\,[\\, C \\le T \\,]$.\n\nC. Define an impulse reward $\\iota(s,s') = 1$ for transcription transitions and $0$ otherwise, with $r \\equiv 0$. Check the CSL reward property $R\\{\\text{mRNA\\_prod}\\} \\le M \\,[\\, I = T \\,]$.\n\nD. Define a state reward $r(s)$ equal to the current mRNA count in state $s$, with $\\iota \\equiv 0$. Check the CSL reward property $R\\{\\text{mRNA\\_count}\\} \\le M \\,[\\, C \\le T \\,]$.\n\nE. Check the probability property $P_{\\le M}\\big[\\, F^{\\le T}\\, (N_1 \\ge M) \\,\\big]$ on the CTMC without defining rewards, where $F^{\\le T}$ denotes “eventually within time $T$.”", "solution": "The problem statement will be validated before a solution is attempted.\n\n### Step 1: Extract Givens\n-   **Model**: Continuous-Time Markov Chain (CTMC)\n-   **State Space**: $S$, where each state $s \\in S$ records promoter state and discrete molecular counts, including mRNA.\n-   **Generator Matrix**: $Q = (q(s,s'))_{s,s' \\in S}$\n-   **Semantics**: Chemical Master Equation.\n-   **Transcription Reaction ($R_1$)**: An event that increases mRNA count by $1$.\n-   **Transcription Propensity**: $a_1(s)$ is the hazard (rate) of reaction $R_1$ in state $s$.\n-   **Degradation Reaction**: Reduces mRNA count; does not affect the total number of mRNA molecules ever produced.\n-   **Cumulative Production Count**: $N_1(t)$ is the number of firings of reaction $R_1$ up to time $t$.\n-   **Reward Structure**: Consists of a state reward $r: S \\to \\mathbb{R}_{\\ge 0}$ and an impulse reward $\\iota: S \\times S \\to \\mathbb{R}_{\\ge 0}$.\n-   **Cumulative Reward Formula**: For a sample path $\\omega$, $\\mathcal{C}_T(\\omega) = \\int_0^T r(X(t,\\omega))\\, dt + \\sum_{0 < t \\le T} \\iota(X(t^- ,\\omega), X(t,\\omega))$.\n-   **Expected Cumulative Reward**: $\\mathbb{E}[\\mathcal{C}_T]$.\n-   **Requirement to Verify**: \"The expected total number of mRNA molecules produced by time $T$ is at most $M$.\" This is explicitly defined as verifying $\\mathbb{E}[N_1(T)] \\le M$.\n\n### Step 2: Validate Using Extracted Givens\nThe problem describes a standard scenario in the formal verification of stochastic biological systems. The use of a CTMC model based on the Chemical Master Equation, propensity functions, and reward structures for analysis is a well-established and scientifically sound methodology in probabilistic model checking and systems biology. The terminology of Continuous Stochastic Logic (CSL) is used correctly. The problem is self-contained, providing all necessary definitions. The objective is clear and unambiguous: to translate a requirement expressed in natural language into a formal CSL property with an appropriately defined reward structure. The problem is well-posed and objective. It does not violate any criteria for validity.\n\n### Step 3: Verdict and Action\nThe problem statement is valid. A solution will be derived.\n\nThe problem requires the formalization of the statement $\\mathbb{E}[N_1(T)] \\le M$ using a reward structure and a CSL query. The quantity of interest is the expected value of $N_1(T)$, which is the total count of transcription reaction ($R_1$) firings by time $T$. The goal is to define a reward structure $(r, \\iota)$ such that the expected cumulative reward, $\\mathbb{E}[\\mathcal{C}_T]$, is equal to $\\mathbb{E}[N_1(T)]$.\n\nThe expected cumulative reward is given by:\n$$\n\\mathbb{E}[\\mathcal{C}_T] = \\mathbb{E}\\left[ \\int_0^T r(X(t))\\, dt \\right] + \\mathbb{E}\\left[ \\sum_{0 < t \\le T} \\iota(X(t^-), X(t)) \\right]\n$$\nThere are two standard, correct methods to compute the expected number of reaction events in this framework.\n\n**Method 1: Direct Counting via Impulse Rewards**\nThe most direct way to count events is to use impulse rewards. The term $\\sum_{0 < t \\le T} \\iota(X(t^-), X(t))$ sums rewards for each discrete transition (reaction firing) along a path. If we wish for this sum to be equal to $N_1(T)$, we must assign a reward of $1$ to each firing of reaction $R_1$ and a reward of $0$ to all other events.\nThis implies the following impulse reward definition:\n$$\n\\iota(s, s') = \\begin{cases} 1 & \\text{if the transition } s \\to s' \\text{ is a firing of } R_1 \\\\ 0 & \\text{otherwise} \\end{cases}\n$$\nTo ensure that the total cumulative reward only reflects this count, the state reward integral must be zero. This is achieved by setting the state reward function $r(s) = 0$ for all states $s \\in S$.\nWith this structure, $\\mathcal{C}_T = N_1(T)$, and thus $\\mathbb{E}[\\mathcal{C}_T] = \\mathbb{E}[N_1(T)]$. The CSL query must then check if this expected cumulative reward over the time interval $[0, T]$ is at most $M$. The CSL path operator for cumulative properties over a finite time horizon is $C \\le T$. Therefore, the CSL property is $R\\{\\text{label}\\} \\le M \\,[\\, C \\le T \\,]$.\n\n**Method 2: Integrating the Rate via State Rewards**\nA fundamental theorem for counting processes associated with CTMCs states that the expected number of events is the integral of the expected event rate. The instantaneous rate of reaction $R_1$ in state $s$ is its propensity, $a_1(s)$. The expected number of $R_1$ firings up to time $T$ is therefore:\n$$\n\\mathbb{E}[N_1(T)] = \\int_0^T \\mathbb{E}[a_1(X(t))] dt\n$$\nBy the linearity of expectation (or Fubini's theorem), this can be rewritten as:\n$$\n\\mathbb{E}[N_1(T)] = \\mathbb{E}\\left[ \\int_0^T a_1(X(t)) dt \\right]\n$$\nThe right-hand side corresponds to the expected cumulative reward $\\mathbb{E}[\\mathcal{C}_T]$ for a reward structure where the state reward is $r(s) = a_1(s)$ and the impulse reward $\\iota(s, s')$ is identically zero for all transitions. This provides an alternative, yet equally correct, method for computing $\\mathbb{E}[N_1(T)]$. The CSL part of the query remains identical: $R\\{\\text{label}\\} \\le M \\,[\\, C \\le T \\,]$.\n\nWith these two valid methods established, we analyze the given options.\n\n**Option-by-Option Analysis**\n\n**A. Define an impulse reward $\\iota(s,s') = 1$ if the transition $(s \\to s')$ is a firing of transcription reaction $R_1$, and $\\iota(s,s') = 0$ otherwise, with $r(s)=0$ for all $s$. Check the CSL reward property $R\\{\\text{mRNA\\_prod}\\} \\le M \\,[\\, C \\le T \\,]$.**\nThis option perfectly matches the derivation in Method 1. It uses impulse rewards to count transcription events directly. The state reward is set to $0$ to avoid confounding the count. The CSL property uses the correct operator $R$ for expectation and the correct path formula $C \\le T$ for cumulative reward over a finite horizon. The label `mRNA_prod` simply names this reward structure. This is a correct formalization.\nVerdict: **Correct**.\n\n**B. Define a state reward $r(s) = a_1(s)$ (the transcription propensity) and $\\iota \\equiv 0$. Check the CSL reward property $R\\{\\text{mRNA\\_rate}\\} \\le M \\,[\\, C \\le T \\,]$.**\nThis option perfectly matches the derivation in Method 2. It correctly uses the mathematical property that the expected number of events is the time integral of the expected propensity. The reward structure sets $r(s) = a_1(s)$ and $\\iota \\equiv 0$. The CSL property is also formulated correctly. This is a valid, though perhaps less direct, formalization of the same requirement.\nVerdict: **Correct**.\n\n**C. Define an impulse reward $\\iota(s,s') = 1$ for transcription transitions and $0$ otherwise, with $r \\equiv 0$. Check the CSL reward property $R\\{\\text{mRNA\\_prod}\\} \\le M \\,[\\, I = T \\,]$.**\nThis option uses the correct reward structure from Method 1. However, the CSL path formula is $I = T$. This formula pertains to the expected reward at a specific instant in time $T$, not the cumulative reward over the interval $[0, T]$. The requirement concerns the \"total number ... produced by time $T$,\" which is an accumulative quantity. Therefore, the use of $I=T$ is a semantic error.\nVerdict: **Incorrect**.\n\n**D. Define a state reward $r(s)$ equal to the current mRNA count in state $s$, with $\\iota \\equiv 0$. Check the CSL reward property $R\\{\\text{mRNA\\_count}\\} \\le M \\,[\\, C \\le T \\,]$.**\nThis option calculates the expected cumulative reward $\\mathbb{E}[\\int_0^T m(X(t)) dt]$, where $m(s)$ is the mRNA count in state $s$. This quantity is the expected time-integrated mRNA population size. The problem statement explicitly requires the cumulative count of production events, $N_1(T)$, and contrasts it with \"the number of mRNA molecules present at time $T$\" and \"time-averaged occupancy,\" which is what this option calculates. It fails to distinguish between production and degradation.\nVerdict: **Incorrect**.\n\n**E. Check the probability property $P_{\\le M}\\big[\\, F^{\\le T}\\, (N_1 \\ge M) \\,\\big]$ on the CTMC without defining rewards, where $F^{\\le T}$ denotes “eventually within time $T$.”**\nThis option is invalid for multiple reasons. First, the requirement is about an *expected value*, which is handled by the CSL operator $R$, not the probability operator $P$. Second, the syntax $P_{\\le M}[\\ldots]$ is malformed; the bound for a probability operator must be a value in $[0, 1]$, but $M$ is a molecule count. Third, the formula $(N_1 \\ge M)$ is not a valid state property, because the cumulative count $N_1(t)$ is not part of the state vector $s \\in S$ as defined in the problem. The option is syntactically and semantically inconsistent with the requirement.\nVerdict: **Incorrect**.\n\nBoth options A and B provide valid and mathematically sound formalizations of the required property.", "answer": "$$\\boxed{AB}$$", "id": "2739299"}, {"introduction": "The exact, symbolic analyses in the previous exercises are powerful but become computationally intractable for large-scale systems, which is where statistical model checking based on simulation becomes essential. This exercise delves into the statistical foundations of this approach by applying Wald's Sequential Probability Ratio Test (SPRT) to verify a probabilistic property with predefined confidence levels [@problem_id:2739310]. Understanding this framework provides deep insight into how verification tools can draw rigorous conclusions from a finite number of simulations, bridging the gap between theoretical models and practical verification.", "problem": "Consider a stochastic Chemical Master Equation model of a bistable genetic toggle switch controlled by two repressors. In probabilistic model checking, you wish to verify the temporal property $\\phi$: “by time $T$, the reporter is ON,” meaning the reporter protein copy number exceeds a preset threshold at or before time $T$. A statistically sound verification framework simulates independent trajectories and records the indicator $X_i \\in \\{0,1\\}$ for whether $\\phi$ holds on trajectory $i$. Under stationarity and independent sampling across runs, the $X_i$ are independent and identically distributed Bernoulli random variables with success probability $\\theta = \\Pr(\\phi)$.\n\nYou aim to decide between the hypotheses $H_0: \\theta \\ge p$ and $H_1: \\theta \\le p - \\delta$ for given $p \\in (0,1)$ and $\\delta \\in (0,p)$, using a Sequential Probability Ratio Test (SPRT), where the two “simple” hypotheses defining the test are pinned at the boundary values $p_0 = p$ for $H_0$ and $p_1 = p - \\delta$ for $H_1$. The test must satisfy the Type I error bound $\\alpha$ and the Type II error bound $\\beta$, meaning that the probability of erroneously rejecting $H_0$ under $H_0$ is at most $\\alpha$, and the probability of erroneously accepting $H_0$ under $H_1$ is at most $\\beta$.\n\nStarting from first principles (Bernoulli likelihoods, independence, and the definition of a likelihood ratio), derive the SPRT decision statistic and stopping rule for this verification task. Then, derive in closed form the likelihood ratio thresholds that guarantee the error bounds, expressed entirely in terms of $\\alpha$ and $\\beta$.\n\nFinally, evaluate the natural-logarithm thresholds for the concrete design parameters $\\alpha = 0.01$ and $\\beta = 0.05$. Round your numerical results to four significant figures and report the pair $\\big(\\ln A, \\ln B\\big)$ as a row matrix. No physical units are required for the final answer.", "solution": "The problem is well-posed and scientifically grounded. It concerns the application of the Sequential Probability Ratio Test (SPRT), a standard method in statistical decision theory, to the verification of stochastic models in synthetic biology. All required information is provided. We will proceed with the derivation.\n\nThe problem requires us to analyze a hypothesis test for the success probability, $\\theta$, of a Bernoulli trial. The simulation of a single trajectory of the stochastic genetic circuit is considered a trial. The outcome is represented by a random variable $X_i$, where $X_i=1$ if the property $\\phi$ holds (a \"success\"), and $X_i=0$ otherwise (a \"failure\"). The trials are independent and identically distributed, so $X_i \\sim \\text{Bernoulli}(\\theta)$, where $\\theta = \\Pr(X_i=1)$.\n\nThe hypotheses to be tested are composite:\n$H_0: \\theta \\ge p$\n$H_1: \\theta \\le p - \\delta$\n\nThe SPRT framework simplifies these to two simple hypotheses by considering the boundary cases: a null hypothesis $H'_0: \\theta = p_0$ versus an alternative hypothesis $H'_1: \\theta = p_1$. The problem specifies these as $p_0 = p$ and $p_1 = p - \\delta$.\n\nLet the sequence of outcomes from $n$ independent simulations be $x_1, x_2, \\ldots, x_n$. The likelihood of observing this specific sequence, under the hypothesis that the true parameter is $\\theta^*$, is given by:\n$$ L(\\theta^*) = \\prod_{i=1}^{n} P(X_i=x_i | \\theta=\\theta^*) = \\prod_{i=1}^{n} (\\theta^*)^{x_i} (1-\\theta^*)^{1-x_i} $$\nLet $S_n = \\sum_{i=1}^{n} x_i$ be the number of successes after $n$ trials. The likelihood function can be written more compactly as:\n$$ L(\\theta^*) = (\\theta^*)^{S_n} (1-\\theta^*)^{n-S_n} $$\n\nThe core of the SPRT is the likelihood ratio, $\\Lambda_n$, defined as the ratio of the likelihood under the alternative hypothesis ($H'_1$) to the likelihood under the null hypothesis ($H'_0$):\n$$ \\Lambda_n = \\frac{L(p_1)}{L(p_0)} = \\frac{p_1^{S_n} (1-p_1)^{n-S_n}}{p_0^{S_n} (1-p_0)^{n-S_n}} $$\nThis can be rearranged as:\n$$ \\Lambda_n = \\left(\\frac{p_1}{p_0}\\right)^{S_n} \\left(\\frac{1-p_1}{1-p_0}\\right)^{n-S_n} $$\nThis expression is the decision statistic for the SPRT.\n\nThe stopping rule is defined by two thresholds, $A$ and $B$, which are determined by the desired error probabilities. The standard convention is $0 < B < 1 < A$. After each observation $X_n$, the likelihood ratio $\\Lambda_n$ is computed and compared to the thresholds:\n1. If $\\Lambda_n \\ge A$, the test stops, and $H'_0$ is rejected in favor of $H'_1$. In the context of the original composite hypotheses, we accept $H_1$.\n2. If $\\Lambda_n \\le B$, the test stops, and $H'_0$ is accepted. In the context of the original composite hypotheses, we accept $H_0$.\n3. If $B < \\Lambda_n < A$, the evidence is insufficient to make a decision, and another observation, $X_{n+1}$, is taken.\n\nWorking with the natural logarithm of the likelihood ratio is often more convenient computationally, as it converts the product into a sum. The log-likelihood ratio, $Z_n = \\ln(\\Lambda_n)$, is:\n$$ Z_n = S_n \\ln\\left(\\frac{p_1}{p_0}\\right) + (n-S_n) \\ln\\left(\\frac{1-p_1}{1-p_0}\\right) $$\nThe stopping rule in terms of $Z_n$ becomes:\n1. If $Z_n \\ge \\ln A$, stop and accept $H_1$.\n2. If $Z_n \\le \\ln B$, stop and accept $H_0$.\n3. If $\\ln B < Z_n < \\ln A$, continue sampling.\n\nNext, we derive the expressions for the thresholds $A$ and $B$ in terms of the specified Type I error bound, $\\alpha$, and Type II error bound, $\\beta$.\n- A Type I error occurs if we reject $H_0$ when it is true. The probability of this event is to be at most $\\alpha$. In the SPRT context, this is $\\Pr(\\text{reject } H'_0 | \\theta=p_0) = \\Pr(\\Lambda_N \\ge A | \\theta=p_0)$, where $N$ is the random stopping time of the test.\n- A Type II error occurs if we accept $H_0$ when $H_1$ is true. The probability of this event is to be at most $\\beta$. In the SPRT context, this is $\\Pr(\\text{accept } H'_0 | \\theta=p_1) = \\Pr(\\Lambda_N \\le B | \\theta=p_1)$.\n\nThe derivation of the thresholds, pioneered by Abraham Wald, uses an approximation that neglects the \"overshoot\" of the boundary by the statistic $\\Lambda_N$. That is, at the moment of decision, we approximate $\\Lambda_N \\approx A$ for rejection and $\\Lambda_N \\approx B$ for acceptance.\n\nLet $\\mathcal{R}$ be the set of all sample paths for which the test stops and rejects $H_0$ (i.e., $\\Lambda_N \\ge A$). Then the probability of a Type I error is $\\alpha \\approx \\sum_{\\text{paths} \\in \\mathcal{R}} P(\\text{path}|p_0)$. The probability of correctly rejecting $H_0$ when $H_1$ is true is $1-\\beta \\approx \\sum_{\\text{paths} \\in \\mathcal{R}} P(\\text{path}|p_1)$.\nFor any path in $\\mathcal{R}$, we have $\\Lambda_N = \\frac{P(\\text{path}|p_1)}{P(\\text{path}|p_0)} \\approx A$. Thus, $P(\\text{path}|p_1) \\approx A \\cdot P(\\text{path}|p_0)$.\nSumming over all paths in $\\mathcal{R}$:\n$$ \\sum_{\\text{paths} \\in \\mathcal{R}} P(\\text{path}|p_1) \\approx A \\sum_{\\text{paths} \\in \\mathcal{R}} P(\\text{path}|p_0) $$\n$$ 1-\\beta \\approx A \\cdot \\alpha $$\nThis gives the approximation for the upper threshold: $A \\approx \\frac{1-\\beta}{\\alpha}$.\n\nSimilarly, let $\\mathcal{A}$ be the set of all sample paths for which the test stops and accepts $H_0$ (i.e., $\\Lambda_N \\le B$). The probability of a Type II error is $\\beta \\approx \\sum_{\\text{paths} \\in \\mathcal{A}} P(\\text{path}|p_1)$. The probability of correctly accepting $H_0$ is $1-\\alpha \\approx \\sum_{\\text{paths} \\in \\mathcal{A}} P(\\text{path}|p_0)$.\nFor any path in $\\mathcal{A}$, we have $\\Lambda_N = \\frac{P(\\text{path}|p_1)}{P(\\text{path}|p_0)} \\approx B$. Thus, $P(\\text{path}|p_1) \\approx B \\cdot P(\\text{path}|p_0)$.\nSumming over all paths in $\\mathcal{A}$:\n$$ \\sum_{\\text{paths} \\in \\mathcal{A}} P(\\text{path}|p_1) \\approx B \\sum_{\\text{paths} \\in \\mathcal{A}} P(\\text{path}|p_0) $$\n$$ \\beta \\approx B \\cdot (1-\\alpha) $$\nThis gives the approximation for the lower threshold: $B \\approx \\frac{\\beta}{1-\\alpha}$.\n\nTo guarantee that the actual error probabilities, $\\alpha'$ and $\\beta'$, satisfy $\\alpha' \\le \\alpha$ and $\\beta' \\le \\beta$, these approximations are treated as equalities and are used to set the thresholds. Thus, the closed-form expressions for the thresholds are:\n$$ A = \\frac{1-\\beta}{\\alpha} \\quad \\text{and} \\quad B = \\frac{\\beta}{1-\\alpha} $$\n\nFinally, we evaluate the natural-logarithm thresholds for the concrete design parameters $\\alpha = 0.01$ and $\\beta = 0.05$.\nThe upper log-threshold is:\n$$ \\ln A = \\ln\\left(\\frac{1-\\beta}{\\alpha}\\right) = \\ln\\left(\\frac{1 - 0.05}{0.01}\\right) = \\ln\\left(\\frac{0.95}{0.01}\\right) = \\ln(95) $$\n$$ \\ln(95) \\approx 4.55387689 $$\nRounding to four significant figures, we get $\\ln A \\approx 4.554$.\n\nThe lower log-threshold is:\n$$ \\ln B = \\ln\\left(\\frac{\\beta}{1-\\alpha}\\right) = \\ln\\left(\\frac{0.05}{1 - 0.01}\\right) = \\ln\\left(\\frac{0.05}{0.99}\\right) $$\n$$ \\ln\\left(\\frac{0.05}{0.99}\\right) \\approx \\ln(0.050505...) \\approx -2.98567735 $$\nRounding to four significant figures, we get $\\ln B \\approx -2.986$.\n\nThe pair of natural-logarithm thresholds is $(\\ln A, \\ln B) = (4.554, -2.986)$.", "answer": "$$\n\\boxed{\\begin{pmatrix} 4.554 & -2.986 \\end{pmatrix}}\n$$", "id": "2739310"}]}