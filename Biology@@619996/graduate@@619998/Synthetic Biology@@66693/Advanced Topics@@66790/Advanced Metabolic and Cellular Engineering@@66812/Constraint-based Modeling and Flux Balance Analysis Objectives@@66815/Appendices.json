{"hands_on_practices": [{"introduction": "A core challenge in constraint-based modeling is ensuring that the model parameters accurately reflect biological reality. This exercise focuses on a critical parameter: the Non-Growth Associated Maintenance (NGAM) energy, which represents the ATP cost of cellular processes required simply to stay alive. You will use Flux Balance Analysis to demonstrate how misestimating this single parameter can lead to significant overprediction of growth rates, particularly in nutrient-limited environments, a crucial insight for building predictive models [@problem_id:2724005].", "problem": "Consider a minimal constraint-based metabolic model suitable for Flux Balance Analysis (FBA) of adenosine triphosphate (ATP) production and growth, focusing on the role of Non-Growth Associated Maintenance (NGAM). The model contains two intracellular metabolites, substrate $S$ and ATP $A$, and four reactions ordered as the flux vector $v = (v_{\\text{upt}}, v_{\\text{cat}}, v_{\\text{ngam}}, v_{\\text{gr}})$:\n- Substrate uptake: $v_{\\text{upt}}: \\varnothing \\to S$,\n- Catabolism to ATP: $v_{\\text{cat}}: S \\to y \\, A$,\n- NGAM ATP hydrolysis: $v_{\\text{ngam}}: A \\to \\varnothing$,\n- Biomass formation (growth-associated ATP demand): $v_{\\text{gr}}: \\gamma \\, A \\to \\text{Biomass}$.\n\nAssume steady-state mass balance $S v = 0$ with the stoichiometric constraints\n$$\n\\begin{aligned}\nS\\text{-balance:}\\quad & v_{\\text{upt}} - v_{\\text{cat}} = 0, \\\\\nA\\text{-balance:}\\quad & y \\, v_{\\text{cat}} - v_{\\text{ngam}} - \\gamma \\, v_{\\text{gr}} = 0,\n\\end{aligned}\n$$\nand bounds\n$$\n0 \\le v_{\\text{upt}} \\le V_{\\max}, \\quad v_{\\text{cat}} \\ge 0, \\quad v_{\\text{ngam}} \\ge \\text{NGAM}, \\quad v_{\\text{gr}} \\ge 0.\n$$\nThe FBA objective is to maximize the growth rate $v_{\\text{gr}}$ subject to these linear constraints. Here $y$ is the ATP yield from substrate, $\\gamma$ is the ATP demand per unit growth (Growth-Associated Maintenance, GAM), and NGAM is the non-growth associated ATP drain.\n\nYour task is to demonstrate, with explicit simulation, how underestimating NGAM leads to overpredicted growth under low-substrate conditions. Use linear programming to compute the optimal $v_{\\text{gr}}$ for two parameterizations:\n- The true NGAM value $\\text{NGAM}_{\\text{true}}$,\n- An underestimated NGAM value $\\text{NGAM}_{\\text{under}}$.\n\nUse the following scientifically realistic parameter values and units:\n- ATP yield $y = 10$ $\\left(\\mathrm{mmol\\ A \\, per \\, mmol\\ S}\\right)$,\n- Growth-associated ATP demand $\\gamma = 30$ $\\left(\\mathrm{mmol\\ A \\, per \\, gDW}\\right)$,\n- True non-growth ATP drain $\\text{NGAM}_{\\text{true}} = 1.5$ $\\left(\\mathrm{mmol\\ A \\, gDW^{-1} \\, h^{-1}}\\right)$,\n- Underestimated non-growth ATP drain $\\text{NGAM}_{\\text{under}} = 0.5$ $\\left(\\mathrm{mmol\\ A \\, gDW^{-1} \\, h^{-1}}\\right)$.\n\nThe test suite is the set of substrate uptake upper bounds, which you must treat as independent cases:\n$$\nV_{\\max} \\in \\{0.15, 0.16, 0.5, 1.0\\} \\ \\mathrm{mmol\\ S \\, gDW^{-1} \\, h^{-1}}.\n$$\nThese values include a boundary case at $V_{\\max} = \\text{NGAM}_{\\text{true}}/y = 0.15$, a near-threshold low-substrate case $V_{\\max} = 0.16$, and two higher-substrate cases. For each $V_{\\max}$, solve two linear programs (once with $\\text{NGAM}=\\text{NGAM}_{\\text{true}}$ and once with $\\text{NGAM}=\\text{NGAM}_{\\text{under}}$) and report:\n- The optimal growth rates $v_{\\text{gr,true}}$ and $v_{\\text{gr,under}}$ in $\\mathrm{h^{-1}}$,\n- The overprediction bias $b = v_{\\text{gr,under}} - v_{\\text{gr,true}}$ in $\\mathrm{h^{-1}}$.\n\nExpress all growth rates and biases as floating-point numbers rounded to $6$ decimal places and reported in $\\mathrm{h^{-1}}$. Your program should produce a single line of output containing three lists in a single bracketed structure:\n- The list of $v_{\\text{gr,true}}$ values for the test suite,\n- The list of $v_{\\text{gr,under}}$ values for the test suite,\n- The list of biases $b$ for the test suite.\n\nFinal output format requirement:\nYour program should produce a single line of output containing the results as a comma-separated list of three bracket-enclosed lists, in the exact form\n$$\n[ [g^{\\text{true}}_1,\\dots,g^{\\text{true}}_n], [g^{\\text{under}}_1,\\dots,g^{\\text{under}}_n], [b_1,\\dots,b_n] ]\n$$\nwith each scalar rounded to $6$ decimals and no units in the printed line. For the specified test suite, $n=4$. All computations must adhere to the model and constraints given above, and the units are $\\mathrm{mmol\\ gDW^{-1} \\, h^{-1}}$ for fluxes and $\\mathrm{h^{-1}}$ for growth rates.", "solution": "The problem statement has been validated and is deemed a well-posed, scientifically-grounded problem in the field of constraint-based metabolic modeling. We shall proceed with the solution.\n\nThe problem requires us to solve a Flux Balance Analysis (FBA) problem, which is a specific application of Linear Programming (LP), to quantify the effect of underestimating the Non-Growth Associated Maintenance (NGAM) energy demand on the predicted growth rate of a microorganism.\n\nFirst, we formalize the problem into the standard LP format. The state of the system is described by the flux vector $v = (v_{\\text{upt}}, v_{\\text{cat}}, v_{\\text{ngam}}, v_{\\text{gr}})^T$. For the purpose of a standard solver, we denote this as $x = (x_1, x_2, x_3, x_4)^T$. The objective is to maximize the growth rate, $v_{\\text{gr}}$ or $x_4$. In the standard minimization form of LP, this is equivalent to minimizing $-x_4$. Thus, the objective function is defined by the cost vector $c$:\n$$\n\\text{minimize } c^T x \\quad \\text{where} \\quad c = \\begin{pmatrix} 0 \\\\ 0 \\\\ 0 \\\\ -1 \\end{pmatrix}\n$$\n\nThe system is subject to two types of constraints: mass balance equality constraints and flux bound inequality constraints.\n\nThe steady-state mass balance equations, $S v = 0$, form the equality constraints $A_{eq} x = b_{eq}$:\n$$\n\\begin{aligned}\n1 \\cdot v_{\\text{upt}} - 1 \\cdot v_{\\text{cat}} + 0 \\cdot v_{\\text{ngam}} + 0 \\cdot v_{\\text{gr}} &= 0 \\\\\n0 \\cdot v_{\\text{upt}} + y \\cdot v_{\\text{cat}} - 1 \\cdot v_{\\text{ngam}} - \\gamma \\cdot v_{\\text{gr}} &= 0\n\\end{aligned}\n$$\nThis gives the equality constraint matrix $A_{eq}$ and vector $b_{eq}$:\n$$\nA_{eq} = \\begin{pmatrix} 1 & -1 & 0 & 0 \\\\ 0 & y & -1 & -\\gamma \\end{pmatrix}, \\quad b_{eq} = \\begin{pmatrix} 0 \\\\ 0 \\end{pmatrix}\n$$\nThe parameters are given as $y=10$ and $\\gamma=30$.\n\nThe flux bounds are given as individual inequality constraints on the elements of $x$:\n$$\n\\begin{aligned}\n0 \\le v_{\\text{upt}} \\le V_{\\max} \\\\\nv_{\\text{cat}} \\ge 0 \\\\\nv_{\\text{ngam}} \\ge \\text{NGAM} \\\\\nv_{\\text{gr}} \\ge 0\n\\end{aligned}\n$$\nThese are lower and upper bounds for each variable $x_i$: $l_i \\le x_i \\le u_i$.\n- $0 \\le x_1 \\le V_{\\max}$\n- $0 \\le x_2 < \\infty$\n- $\\text{NGAM} \\le x_3 < \\infty$\n- $0 \\le x_4 < \\infty$\n\nThe problem is simple enough to permit an analytical solution, which provides critical insight before numerical computation. From the first equality constraint, $v_{\\text{upt}} = v_{\\text{cat}}$. Since $0 \\le v_{\\text{upt}} \\le V_{\\max}$, it follows that $0 \\le v_{\\text{cat}} \\le V_{\\max}$.\n\nFrom the second equality constraint, we can express the growth rate $v_{\\text{gr}}$:\n$$\n\\gamma v_{\\text{gr}} = y v_{\\text{cat}} - v_{\\text{ngam}} \\implies v_{\\text{gr}} = \\frac{1}{\\gamma} (y v_{\\text{cat}} - v_{\\text{ngam}})\n$$\nTo maximize $v_{\\text{gr}}$, we must maximize its value subject to the constraints. The expression for $v_{\\text{gr}}$ is maximized by simultaneously maximizing $v_{\\text{cat}}$ and minimizing $v_{\\text{ngam}}$. According to the bounds, the maximum value for $v_{\\text{cat}}$ is $V_{\\max}$ (by setting $v_{\\text{upt}}$ to its maximum), and the minimum value for $v_{\\text{ngam}}$ is $\\text{NGAM}$.\n\nSubstituting these into the expression for $v_{\\text{gr}}$ gives the potential maximum growth rate. However, we must also respect the non-negativity constraint $v_{\\text{gr}} \\ge 0$. Therefore, the optimal growth rate is:\n$$\nv_{\\text{gr,opt}} = \\max\\left(0, \\frac{y V_{\\max} - \\text{NGAM}}{\\gamma}\\right)\n$$\nThis analytical formula reveals a critical threshold for substrate uptake. Growth is only possible ($v_{\\text{gr,opt}} > 0$) if the rate of ATP generation from the maximum substrate uptake, $y V_{\\max}$, is sufficient to overcome the non-growth associated maintenance cost, $\\text{NGAM}$. This defines a minimum substrate uptake rate for growth:\n$$\ny V_{\\max} > \\text{NGAM} \\implies V_{\\max} > \\frac{\\text{NGAM}}{y}\n$$\nIf $V_{\\max} \\le \\text{NGAM}/y$, all generated ATP is diverted to NGAM, and the optimal growth rate is $0$.\n\nUsing this formula, we can analyze the overprediction bias, $b = v_{\\text{gr,under}} - v_{\\text{gr,true}}$.\n- $v_{\\text{gr,true}} = \\max\\left(0, \\frac{y V_{\\max} - \\text{NGAM}_{\\text{true}}}{\\gamma}\\right)$\n- $v_{\\text{gr,under}} = \\max\\left(0, \\frac{y V_{\\max} - \\text{NGAM}_{\\text{under}}}{\\gamma}\\right)$\n\nFor substrate uptake rates high enough such that both models predict positive growth (i.e., $V_{\\max} > \\text{NGAM}_{\\text{true}}/y$), the bias becomes:\n$$\nb = \\left(\\frac{y V_{\\max} - \\text{NGAM}_{\\text{under}}}{\\gamma}\\right) - \\left(\\frac{y V_{\\max} - \\text{NGAM}_{\\text{true}}}{\\gamma}\\right) = \\frac{\\text{NGAM}_{\\text{true}} - \\text{NGAM}_{\\text{under}}}{\\gamma}\n$$\nWith the given parameters, $\\text{NGAM}_{\\text{true}} = 1.5$, $\\text{NGAM}_{\\text{under}} = 0.5$, and $\\gamma = 30$, this constant bias is:\n$$\nb = \\frac{1.5 - 0.5}{30} = \\frac{1.0}{30} \\approx 0.033333 \\, \\mathrm{h^{-1}}\n$$\nThis bias represents the portion of growth that is erroneously predicted because the model fails to account for the full maintenance energy cost. The effect is particularly pronounced at low-substrate conditions, where the underestimated model might predict growth while the true model correctly predicts zero growth, as seen at the $V_{\\max} = 0.15$ boundary case.\n\nFor the implementation, we will solve the LP numerically for each case using the `scipy.optimize.linprog` function. This function takes the parameters $c$, $A_{eq}$, $b_{eq}$, and `bounds` that we have formally defined. For each value of $V_{\\max}$ in the test suite $\\{0.15, 0.16, 0.5, 1.0\\}$, we will execute this procedure twice: once with $\\text{NGAM} = \\text{NGAM}_{\\text{true}} = 1.5$ and once with $\\text{NGAM} = \\text{NGAM}_{\\text{under}} = 0.5$. The resulting optimal $v_{\\text{gr}}$ values and their difference will be collected and formatted as specified. The numerical solution must conform to the analytical results derived above.", "answer": "```python\nimport numpy as np\nfrom scipy.optimize import linprog\n\ndef solve():\n    \"\"\"\n    Solves the FBA problem for a minimal metabolic model to demonstrate\n    how underestimating NGAM leads to overpredicted growth.\n    \"\"\"\n    \n    # Model Parameters\n    y = 10.0  # ATP yield (mmol A per mmol S)\n    gamma = 30.0  # Growth-associated ATP demand (mmol A per gDW)\n    \n    # NGAM cases\n    NGAM_true = 1.5  # True NGAM (mmol A gDW^-1 h^-1)\n    NGAM_under = 0.5  # Underestimated NGAM (mmol A gDW^-1 h^-1)\n    \n    # Test suite for substrate uptake upper bounds\n    V_max_suite = [0.15, 0.16, 0.5, 1.0]  # (mmol S gDW^-1 h^-1)\n\n    # Lists to store the results\n    g_true_list = []\n    g_under_list = []\n    bias_list = []\n\n    def solve_fba_instance(ngam_val, v_max_val):\n        \"\"\"\n        Solves the linear programming problem for a given set of parameters.\n\n        Variables are (v_upt, v_cat, v_ngam, v_gr).\n        \"\"\"\n        # Objective function: Maximize v_gr (v[3]). linprog minimizes, so minimize -v_gr.\n        c = [0, 0, 0, -1]\n        \n        # Equality constraints: S*v = 0\n        # v_upt - v_cat = 0\n        # y*v_cat - v_ngam - gamma*v_gr = 0\n        A_eq = np.array([\n            [1, -1, 0, 0],\n            [0, y, -1, -gamma]\n        ])\n        b_eq = np.array([0, 0])\n        \n        # Bounds on fluxes\n        # 0 <= v_upt <= v_max_val\n        # v_cat >= 0\n        # v_ngam >= ngam_val\n        # v_gr >= 0\n        bounds = [\n            (0, v_max_val),\n            (0, None),\n            (ngam_val, None),\n            (0, None)\n        ]\n        \n        # Solve the linear program using the 'highs' method for robustness.\n        res = linprog(c, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')\n        \n        if not res.success:\n            # For this well-posed problem, the solver should always succeed.\n            # An infeasible status (2) would imply no solution, but the analytical\n            # derivation proves a feasible solution always exists (even if v_gr=0).\n            # This check is for robust programming.\n            if res.status == 2: # Infeasible\n                return 0.0\n            raise ValueError(f\"Linear programming solver failed with status {res.status}: {res.message}\")\n        \n        # Optimal growth rate is the 4th variable in the solution vector x.\n        optimal_growth_rate = res.x[3]\n        \n        # Due to floating-point inaccuracies, the result can be a very small\n        # negative number close to zero. We enforce the non-negativity constraint.\n        return max(0.0, optimal_growth_rate)\n\n    # Iterate through each substrate uptake capacity in the test suite\n    for v_max in V_max_suite:\n        # Calculate optimal growth for the true NGAM value\n        v_gr_true = solve_fba_instance(NGAM_true, v_max)\n        \n        # Calculate optimal growth for the underestimated NGAM value\n        v_gr_under = solve_fba_instance(NGAM_under, v_max)\n        \n        # Calculate the overprediction bias\n        bias = v_gr_under - v_gr_true\n        \n        # Append results to their respective lists\n        g_true_list.append(v_gr_true)\n        g_under_list.append(v_gr_under)\n        bias_list.append(bias)\n    \n    # Format the lists into strings with 6 decimal places for each number\n    def format_list(data_list):\n        return \",\".join([f\"{x:.6f}\" for x in data_list])\n\n    g_true_str = format_list(g_true_list)\n    g_under_str = format_list(g_under_list)\n    b_str = format_list(bias_list)\n\n    # Print the final result in the exact specified format\n    print(f\"[[{g_true_str}],[{g_under_str}],[{b_str}]]\")\n\nsolve()\n```", "id": "2724005"}, {"introduction": "While Flux Balance Analysis (FBA) is excellent at finding the optimal value for a biological objective, it typically returns only one of potentially many different flux distributions that can achieve this optimum. This practice introduces you to Flux Variability Analysis (FVA), a powerful technique for characterizing the entire space of optimal solutions. By computing the feasible flux range for each reaction at maximal growth, you will learn to classify reactions as essential, flexible, or blocked, thereby revealing the system's inherent robustness and redundancy [@problem_id:2723988].", "problem": "You must implement a complete program that computes Flux Variability Analysis (FVA) ranges at the growth optimum for a small metabolic network with known degeneracy and then interprets which reactions are essential versus flexible at optimal growth. The scientific foundation is the steady-state mass balance of intracellular metabolites under the quasi-steady-state assumption and linear programming. The fundamental base you must start from is: (i) the steady-state constraint $S \\, v = 0$ for a stoichiometric matrix $S$ and reaction flux vector $v$, (ii) bound constraints $l \\le v \\le u$ reflecting irreversibility and capacity limits, and (iii) linear objective maximization of biomass production represented by a linear functional $c^\\top v$. Flux Balance Analysis (FBA) solves a linear program to find the maximal growth rate $z^\\star$, and Flux Variability Analysis (FVA) computes, for each reaction $j$, the minimum and maximum feasible flux values at the fixed optimal growth $z^\\star$ subject to the same constraints.\n\nUse the following network structure, which is intentionally designed to exhibit alternate optimal solutions in some test cases. There are $m = 3$ intracellular metabolites and $n = 6$ reactions. The stoichiometric matrix $S \\in \\mathbb{R}^{m \\times n}$ is\n$$\nS \\;=\\;\n\\begin{bmatrix}\n1 & -1 & -1 & 0 & 0 & 0 \\\\\n0 & 1  & 0  & -1 & 0 & -1 \\\\\n0 & 0  & 1  & 0  & -1 & 1\n\\end{bmatrix},\n$$\nwith rows corresponding to metabolites $\\{A, B, C\\}$ and columns corresponding to reactions $\\{R_1, R_2, R_3, R_4, R_5, R_6\\}$ defined as:\n- $R_1$: uptake of $A$ into the cell (forward-only).\n- $R_2$: conversion $A \\rightarrow B$ (forward-only).\n- $R_3$: conversion $A \\rightarrow C$ (forward-only).\n- $R_4$: drain of $B$ to biomass (forward-only).\n- $R_5$: drain of $C$ to biomass (forward-only).\n- $R_6$: interconversion $B \\leftrightarrow C$ (reversible, defined as $B \\rightarrow C$ when positive).\n\nThe objective vector is\n$$\nc = [\\,0,\\,0,\\,0,\\,1,\\,1,\\,0\\,]^\\top,\n$$\nso that the growth objective to be maximized is $c^\\top v = v_4 + v_5$. All fluxes are to be treated as dimensionless real numbers for the purpose of this exercise. Numerical answers must be expressed as floating-point numbers (no units), rounded to three decimals where applicable.\n\nAlgorithmic requirements:\n1. Perform Flux Balance Analysis (FBA) by solving the linear program\n$$\n\\max_{v \\in \\mathbb{R}^n} \\; c^\\top v \\quad \\text{subject to } S v = 0, \\; l \\le v \\le u,\n$$\nto obtain the optimal growth value $z^\\star = c^\\top v^\\star$.\n2. For Flux Variability Analysis (FVA), for each reaction index $j \\in \\{1,\\dots,n\\}$, compute the minimum and maximum feasible values of $v_j$ under the constraints\n$$\nS v = 0, \\quad c^\\top v = z^\\star, \\quad l \\le v \\le u,\n$$\nby solving two linear programs:\n$$\n\\min_{v} \\; v_j \\quad \\text{and} \\quad \\max_{v} \\; v_j,\n$$\nsubject to the above constraints. Implement $\\max v_j$ by minimizing $-v_j$. Use a numerical equality tolerance of $\\tau = 10^{-9}$ when imposing $c^\\top v = z^\\star$; implement this as an equality constraint $c^\\top v = z^\\star$ in your solver and treat any absolute deviations less than $\\tau$ as zero in your post-processing.\n3. Classify each reaction using the FVA ranges at $z^\\star$ with a classification tolerance $\\epsilon = 10^{-7}$:\n   - Blocked at optimal growth if $\\max_j \\le \\epsilon$ and $\\min_j \\ge -\\epsilon$.\n   - Essential at optimal growth if either $\\min_j \\ge \\epsilon$ or $\\max_j \\le -\\epsilon$ (that is, the flux is nonzero in the same sign across all optimal solutions).\n   - Flexible at optimal growth otherwise (the flux can be zero in at least one optimal solution).\n4. Round all reported FVA bounds to three decimals for output. Use exact integers for the classification labels.\n\nTest suite:\nImplement three test cases, each specified by lower and upper bounds $l, u \\in \\mathbb{R}^n$:\n\n- Test case $1$ (degenerate optimal solutions):\n  - $l = [\\,0,\\,0,\\,0,\\,0,\\,0,\\,-1000\\,]^\\top$\n  - $u = [\\,10,\\,1000,\\,1000,\\,1000,\\,1000,\\,1000\\,]^\\top$\n\n- Test case $2$ (one pathway disabled; removes degeneracy):\n  - $l = [\\,0,\\,0,\\,0,\\,0,\\,0,\\,-1000\\,]^\\top$\n  - $u = [\\,10,\\,1000,\\,0,\\,1000,\\,0,\\,1000\\,]^\\top$\n\n- Test case $3$ (both internal branches capacity-limited; reversible interconversion disabled):\n  - $l = [\\,0,\\,0,\\,0,\\,0,\\,0,\\,0\\,]^\\top$\n  - $u = [\\,5,\\,3,\\,3,\\,1000,\\,1000,\\,0\\,]^\\top$\n\nFor each test case, your program must:\n- Compute $z^\\star$ via FBA.\n- Compute the FVA bounds $\\min_j$ and $\\max_j$ for each reaction $j \\in \\{1,\\dots,6\\}$ at $z^\\star$.\n- Classify each reaction with labels $0$ for blocked, $1$ for flexible, and $2$ for essential, according to the above rule.\n\nFinal output format:\nYour program should produce a single line of output containing the aggregated results across the three test cases as a comma-separated nested list. For each test case, output a list of two lists:\n- The first list is the flattened sequence $[\\,\\min_1, \\max_1, \\min_2, \\max_2, \\dots, \\min_6, \\max_6\\,]$ of floats rounded to three decimals.\n- The second list is the classification list $[\\,\\kappa_1, \\kappa_2, \\dots, \\kappa_6\\,]$ of integers.\n\nThus the final output must be a single line of the form\n\"[ [ [min_1,max_1,min_2,max_2,...,min_6,max_6], [kappa_1,kappa_2,...,kappa_6] ], [ ... for case 2 ... ], [ ... for case 3 ... ] ]\"\nwith no additional text. Ensure the order of reactions is $[R_1,R_2,R_3,R_4,R_5,R_6]$ in all outputs.", "solution": "The problem statement requires the implementation of Flux Balance Analysis (FBA) and Flux Variability Analysis (FVA) for a given metabolic network, followed by a classification of reactions. The problem is scientifically grounded, well-posed, and all necessary data and algorithms are specified. It is a valid problem.\n\nThe solution will be developed by following the required algorithmic steps.\nFirst, we define the stoichiometric matrix $S$ and the objective vector $c$.\n$$\nS = \\begin{bmatrix}\n1 & -1 & -1 & 0 & 0 & 0 \\\\\n0 & 1  & 0  & -1 & 0 & -1 \\\\\n0 & 0  & 1  & 0  & -1 & 1\n\\end{bmatrix} \\in \\mathbb{R}^{3 \\times 6}\n$$\n$$\nc = [\\,0,\\,0,\\,0,\\,1,\\,1,\\,0\\,]^\\top \\in \\mathbb{R}^{6}\n$$\nThe linear programming problems will be solved using the `scipy.optimize.linprog` function, which solves problems in the form $\\min_{x} c^\\top x$ subject to $A_{eq}x = b_{eq}$ and $lb \\le x \\le ub$.\n\n**Step 1: Flux Balance Analysis (FBA)**\n\nTo find the maximal growth rate $z^\\star$, we solve the following linear program (LP):\n$$\n\\max_{v} z = c^\\top v \\quad \\text{subject to} \\quad S v = 0, \\quad l \\le v \\le u\n$$\nThis is equivalent to minimizing $-c^\\top v$. We formulate this for the `scipy.optimize.linprog` solver:\n- Objective function coefficients: $-c$\n- Equality constraint matrix: $A_{eq} = S$\n- Equality constraint vector: $b_{eq} = [\\,0,\\,0,\\,0\\,]^\\top$\n- Bounds: $(l_i, u_i)$ for each flux $v_i$.\n\nThe optimal objective value returned by the solver, let us call it $z_{min}$, will be the minimum of $-c^\\top v$. The maximum growth rate is therefore $z^\\star = -z_{min}$. This calculation is performed for each of the three test cases, using their specific lower ($l$) and upper ($u$) bounds.\n\n**Step 2: Flux Variability Analysis (FVA)**\n\nFVA determines the feasible range of each reaction flux $v_j$ while the total growth rate is fixed at its optimum, $z^\\star$. For each reaction $j \\in \\{1,\\dots,6\\}$, we must solve two LPs: one for the minimum possible flux $(\\min v_j)$ and one for the maximum $(\\max v_j)$.\n\nThe constraints for these LPs are:\n1. $S v = 0$ (steady-state)\n2. $l \\le v \\le u$ (thermodynamic and capacity constraints)\n3. $c^\\top v = z^\\star$ (fixed optimal objective)\n\nThe third constraint is added to the system of equality constraints. The new equality constraint matrix $A'_{eq}$ and vector $b'_{eq}$ are:\n$$\nA'_{eq} = \\begin{bmatrix} S \\\\ c^\\top \\end{bmatrix}, \\quad b'_{eq} = \\begin{bmatrix} 0 \\\\ 0 \\\\ 0 \\\\ z^\\star \\end{bmatrix}\n$$\nFor each reaction $j$, we solve:\n- To find $\\min v_j$:\n  $$ \\min_{v} v_j \\quad \\text{s.t.} \\quad A'_{eq} v = b'_{eq}, \\quad l \\le v \\le u $$\n  The objective vector is $e_j$, a vector with $1$ at position $j$ and $0$ elsewhere.\n- To find $\\max v_j$:\n  $$ \\max_{v} v_j \\quad \\text{s.t.} \\quad A'_{eq} v = b'_{eq}, \\quad l \\le v \\le u $$\n  This is equivalent to minimizing $-v_j$. The objective vector is $-e_j$. The maximum flux is the negative of the optimal value returned by the solver.\n\nThis process is repeated for all $n=6$ reactions, yielding $6$ pairs of $(\\min_j, \\max_j)$ values for each test case.\n\n**Step 3: Reaction Classification**\n\nUsing the computed FVA ranges and the classification tolerance $\\epsilon = 10^{-7}$, each reaction is classified as follows:\n- **Blocked (0)**: if its flux range $[\\min_j, \\max_j]$ is contained within $[-\\epsilon, \\epsilon]$. This is checked by the condition $\\max_j \\le \\epsilon$ and $\\min_j \\ge -\\epsilon$.\n- **Essential (2)**: if the flux is strictly positive or strictly negative across all optimal solutions. This is checked by the condition $\\min_j \\ge \\epsilon$ (strictly positive) or $\\max_j \\le -\\epsilon$ (strictly negative).\n- **Flexible (1)**: if the reaction is neither Blocked nor Essential. This means the flux range straddles zero but is wider than the blocked tolerance (e.g., $[-5, 5]$ or $[0, 10]$).\n\nThe final program will systematically execute these steps for each of the three test cases provided. The numerical results for the FVA bounds will be formatted to three decimal places. The results will then be aggregated and printed in the specified nested list format.\n\nHere is a summary of the expected analytical results which the code will compute:\n- **Test Case 1**: With high capacities and reversible interconversion, multiple pathways can achieve the maximum growth of $z^\\star=10$. This degeneracy leads to flexibility. The uptake reaction $R_1$ must carry a flux of $10$, making it essential. All other reactions are flexible, as flux can be rerouted between the $A \\to B \\to \\text{Biomass}$ and $A \\to C \\to \\text{Biomass}$ pathways.\n- **Test Case 2**: By setting the upper bounds for $v_3$ and $v_5$ to zero, the pathway through metabolite $C$ is disabled. This removes the degeneracy. To achieve the maximum growth of $z^\\star=10$, the flux must proceed entirely through the $A \\to B \\to \\text{Biomass}$ pathway. This fixes the fluxes of $R_1, R_2, R_4$ to $10$, making them essential. The disabled reactions $R_3, R_5, R_6$ are blocked.\n- **Test Case 3**: The uptake $v_1$ is limited to $5$, and the internal branch fluxes $v_2, v_3$ are each limited to $3$. The interconversion $v_6$ is blocked. The maximum growth is $z^\\star=v_1=5$. Since $v_2+v_3 = v_1 = 5$ and neither $v_2$ nor $v_3$ can exceed $3$, both must be active. The range for $v_2$ is $[2, 3]$, and consequently the range for $v_3$ is also $[2, 3]$. Since these ranges are strictly positive, reactions $R_1, R_2, R_3, R_4, R_5$ are all essential for optimal growth. $R_6$ is blocked by its bounds.", "answer": "```python\nimport numpy as np\nfrom scipy.optimize import linprog\n\ndef solve():\n    \"\"\"\n    Computes FVA ranges and classifies reactions for a metabolic network\n    across three test cases as specified in the problem statement.\n    \"\"\"\n    S = np.array([\n        [1, -1, -1, 0, 0, 0],\n        [0, 1, 0, -1, 0, -1],\n        [0, 0, 1, 0, -1, 1]\n    ])\n    c_obj = np.array([0, 0, 0, 1, 1, 0])\n    num_reactions = 6\n    epsilon = 1e-7\n\n    test_cases = [\n        # Case 1: Degenerate optimal solutions\n        {\n            \"l\": np.array([0, 0, 0, 0, 0, -1000]),\n            \"u\": np.array([10, 1000, 1000, 1000, 1000, 1000])\n        },\n        # Case 2: One pathway disabled\n        {\n            \"l\": np.array([0, 0, 0, 0, 0, -1000]),\n            \"u\": np.array([10, 1000, 0, 1000, 0, 1000])\n        },\n        # Case 3: Internal branches capacity-limited\n        {\n            \"l\": np.array([0, 0, 0, 0, 0, 0]),\n            \"u\": np.array([5, 3, 3, 1000, 1000, 0])\n        }\n    ]\n\n    all_results = []\n\n    for case in test_cases:\n        l_bounds, u_bounds = case[\"l\"], case[\"u\"]\n        bounds = list(zip(l_bounds, u_bounds))\n\n        # Step 1: FBA to find optimal growth rate z_star\n        res_fba = linprog(\n            c=-c_obj,\n            A_eq=S,\n            b_eq=np.zeros(S.shape[0]),\n            bounds=bounds,\n            method='highs'\n        )\n\n        if not res_fba.success:\n            # Problem setup should guarantee feasibility\n            raise RuntimeError(\"FBA optimization failed.\")\n        \n        z_star = -res_fba.fun\n\n        # Step 2: FVA for each reaction\n        fva_bounds = []\n        A_eq_fva = np.vstack([S, c_obj])\n        b_eq_fva = np.hstack([np.zeros(S.shape[0]), z_star])\n\n        for j in range(num_reactions):\n            # Minimize v_j\n            c_min = np.zeros(num_reactions)\n            c_min[j] = 1\n            res_min = linprog(\n                c=c_min,\n                A_eq=A_eq_fva,\n                b_eq=b_eq_fva,\n                bounds=bounds,\n                method='highs'\n            )\n            min_val = res_min.fun if res_min.success else np.nan\n\n            # Maximize v_j (by minimizing -v_j)\n            c_max = np.zeros(num_reactions)\n            c_max[j] = -1\n            res_max = linprog(\n                c=c_max,\n                A_eq=A_eq_fva,\n                b_eq=b_eq_fva,\n                bounds=bounds,\n                method='highs'\n            )\n            max_val = -res_max.fun if res_max.success else np.nan\n            \n            fva_bounds.append((min_val, max_val))\n\n        # Flatten and round FVA bounds\n        flat_fva_rounded = []\n        for min_v, max_v in fva_bounds:\n            flat_fva_rounded.append(f\"{min_v:.3f}\")\n            flat_fva_rounded.append(f\"{max_v:.3f}\")\n\n        # Step 3: Classify reactions\n        classifications = []\n        for min_v, max_v in fva_bounds:\n            # Blocked\n            if max_v <= epsilon and min_v >= -epsilon:\n                classifications.append(0)\n            # Essential\n            elif min_v >= epsilon or max_v <= -epsilon:\n                classifications.append(2)\n            # Flexible\n            else:\n                classifications.append(1)\n        \n        all_results.append(f\"[[{','.join(flat_fva_rounded)}],[{','.join(map(str, classifications))}]]\")\n\n    # Final print statement\n    print(f\"[{','.join(all_results)}]\")\n\nsolve()\n```", "id": "2723988"}, {"introduction": "Standard FBA provides a static snapshot of metabolism, yet biological systems are inherently dynamic. This advanced practice guides you through the implementation of dynamic FBA (dFBA) to simulate the changing metabolic states of a batch culture over time. By iteratively solving an FBA problem and updating the extracellular environment, you will observe the emergence of distinct growth phases and predict complex phenomena like overflow metabolism, bridging the gap between steady-state models and dynamic experimental observations [@problem_id:2723964].", "problem": "You are asked to write a complete, runnable program that performs a dynamic, constraint-based batch culture simulation using Flux Balance Analysis (FBA) for a minimal, pedagogical metabolic network. The goal is to determine growth phases and detect the onset of overflow metabolism (secretion of an overflow metabolite) given initial extracellular substrate concentrations and uptake bounds. Your program must compute, for each test case, a set of quantitative outputs that summarize the dynamic behavior. Answers must be printed in the specified format at the end of execution.\n\nThe simulation must be constructed from the following foundational bases and definitions:\n\n- Mass conservation and quasi-steady-state intracellular metabolism: If $S$ denotes the intracellular stoichiometric matrix and $v$ the vector of reaction fluxes, then $S v = 0$ holds for intracellular metabolites under quasi-steady-state.\n- Flux Balance Analysis (FBA): A linear optimization problem that maximizes a cellular objective (here, biomass formation rate) subject to intracellular stoichiometric equalities and reaction bounds.\n- Dynamic extracellular mass balances in a batch culture: For each extracellular species $i$ with concentration $C_i(t)$ in millimoles per liter, $dC_i/dt = - v_i(t) X(t)$, where $v_i(t)$ is the per biomass uptake or secretion flux in millimoles per gram dry weight per hour, and $X(t)$ is the biomass concentration in grams dry weight per liter. For secretion, $v_i(t)$ is taken positive in the intracellular-to-extracellular direction.\n- Biomass dynamics: The specific growth rate equals the biomass reaction flux, so $dX/dt = \\mu(t) X(t)$ with $\\mu(t) = v_{\\text{biomass}}(t)$ in per hour.\n\nModel a minimal network with the following intracellular metabolites: intracellular glucose ($\\text{glc}_c$), intracellular oxygen ($\\text{o}_2{}_c$), adenosine triphosphate ($\\text{ATP}_c$), and intracellular acetate ($\\text{ac}_c$). The extracellular metabolites are glucose ($\\text{glc}_e$), oxygen ($\\text{o}_2{}_e$), and acetate ($\\text{ac}_e$). The reaction set, flux variables, and stoichiometry to be used are:\n\n- Glucose uptake: $v_{\\text{glc\\_in}} \\ge 0$, $\\text{glc}_e \\rightarrow \\text{glc}_c$. Intracellular balance contributes $+1$ to $\\text{glc}_c$.\n- Oxygen uptake: $v_{\\text{o2\\_in}} \\ge 0$, $\\text{o}_2{}_e \\rightarrow \\text{o}_2{}_c$. Intracellular balance contributes $+1$ to $\\text{o}_2{}_c$.\n- Respiration: $v_{\\text{resp}} \\ge 0$, $\\text{glc}_c + 6\\,\\text{o}_2{}_c \\rightarrow 30\\,\\text{ATP}_c$. Intracellular balances contribute $-1$ for $\\text{glc}_c$, $-6$ for $\\text{o}_2{}_c$, and $+30$ for $\\text{ATP}_c$.\n- Fermentation: $v_{\\text{ferm}} \\ge 0$, $\\text{glc}_c \\rightarrow 2\\,\\text{ac}_c + 2\\,\\text{ATP}_c$. Intracellular balances contribute $-1$ for $\\text{glc}_c$, $+2$ for $\\text{ac}_c$, and $+2$ for $\\text{ATP}_c$.\n- Biomass formation: $v_{\\text{biomass}} \\ge 0$, $10\\,\\text{ATP}_c \\rightarrow \\text{biomass}$. Intracellular balance contributes $-10$ for $\\text{ATP}_c$.\n- Non-growth associated maintenance: $v_{\\text{maint}} \\ge m$, $\\text{ATP}_c \\rightarrow \\emptyset$. Intracellular balance contributes $-1$ for $\\text{ATP}_c$. The parameter $m$ is a given non-negative lower bound in millimoles per gram dry weight per hour.\n- Acetate secretion: $v_{\\text{ac\\_ex}} \\ge 0$, $\\text{ac}_c \\rightarrow \\text{ac}_e$. Intracellular balance contributes $-1$ for $\\text{ac}_c$.\n\nThe intracellular steady-state constraints are the linear equalities:\n- Glucose balance: $v_{\\text{glc\\_in}} - v_{\\text{resp}} - v_{\\text{ferm}} = 0$.\n- Oxygen balance: $v_{\\text{o2\\_in}} - 6 v_{\\text{resp}} = 0$.\n- Adenosine triphosphate balance: $30 v_{\\text{resp}} + 2 v_{\\text{ferm}} - 10 v_{\\text{biomass}} - v_{\\text{maint}} = 0$.\n- Acetate balance: $2 v_{\\text{ferm}} - v_{\\text{ac\\_ex}} = 0$.\n\nBounds for exchange fluxes depend on extracellular concentrations and per-biomass uptake limits:\n- If extracellular glucose concentration $C_{\\text{glc}}(t) > 0$, then $0 \\le v_{\\text{glc\\_in}} \\le V_{\\text{glc}}$; if $C_{\\text{glc}}(t) = 0$, then $v_{\\text{glc\\_in}} = 0$.\n- If extracellular oxygen concentration $C_{\\text{o2}}(t) > 0$, then $0 \\le v_{\\text{o2\\_in}} \\le V_{\\text{o2}}$; if $C_{\\text{o2}}(t) = 0$, then $v_{\\text{o2\\_in}} = 0$.\n- All other fluxes remain bounded below by $0$ (or by $m$ for $v_{\\text{maint}}$) with sufficiently large upper bounds so as not to constrain the solution.\n\nAt each time $t$, solve the FBA linear program that maximizes $v_{\\text{biomass}}$ subject to the equalities and bounds above. Use the optimal fluxes to advance the extracellular concentrations and biomass with an explicit time-stepping scheme. Specifically, if the step size is $\\Delta t$ hours and the current biomass is $X(t)$ grams dry weight per liter, then update:\n- $C_{\\text{glc}}(t + \\Delta t) = \\max\\{0, C_{\\text{glc}}(t) - v_{\\text{glc\\_in}}(t)\\, X(t)\\, \\Delta t\\}$ in millimoles per liter.\n- $C_{\\text{o2}}(t + \\Delta t) = \\max\\{0, C_{\\text{o2}}(t) - v_{\\text{o2\\_in}}(t)\\, X(t)\\, \\Delta t\\}$ in millimoles per liter.\n- $C_{\\text{ac}}(t + \\Delta t) = C_{\\text{ac}}(t) + v_{\\text{ac\\_ex}}(t)\\, X(t)\\, \\Delta t$ in millimoles per liter.\n- $X(t + \\Delta t) = X(t) + v_{\\text{biomass}}(t)\\, X(t)\\, \\Delta t$ in grams dry weight per liter.\n\nDefine overflow onset time as the earliest $t$ at which the optimal acetate secretion flux satisfies $v_{\\text{ac\\_ex}}(t) > \\varepsilon$, where $\\varepsilon$ is a small positive tolerance. If no such time occurs before simulation end, report $-1$ for the onset time.\n\nStop the simulation when $t$ reaches a specified final time $T_{\\text{end}}$ or when glucose is depleted, whichever comes first. Define the glucose depletion time as the earliest $t$ for which $C_{\\text{glc}}(t) \\le \\delta$, where $\\delta$ is a small positive tolerance.\n\nUnits and numerical requirements:\n- Time must be in hours, concentrations in millimoles per liter, and biomass in grams dry weight per liter.\n- Report times in hours and concentrations in millimoles per liter.\n- Use a fixed time step $\\Delta t$ in hours.\n- Use a positive tolerance $\\varepsilon$ to detect overflow onset and $\\delta$ to detect glucose depletion.\n\nYour program must use the exact network and rules above and produce outputs for each of the following test cases. For each test case, parameters are given as the tuple $(C_{\\text{glc}}(0), C_{\\text{o2}}(0), V_{\\text{glc}}, V_{\\text{o2}}, m, X(0), T_{\\text{end}}, \\Delta t)$, in the units described. Use $\\varepsilon = 10^{-9}$ and $\\delta = 10^{-9}$.\n\nTest suite (three cases):\n- Case A (oxygen non-limiting, no overflow expected): (100.0, 1000.0, 10.0, 60.0, 1.0, 0.1, 5.0, 0.005).\n- Case B (oxygen uptake strongly limiting, overflow from the start): (100.0, 50.0, 10.0, 10.0, 1.0, 0.1, 5.0, 0.005).\n- Case C (oxygen initially sufficient per biomass but finitely depleting, delayed overflow onset): (100.0, 20.0, 10.0, 60.0, 1.0, 0.1, 5.0, 0.005).\n\nFor each test case, your program must compute and return the list $[t_{\\text{overflow}}, t_{\\text{glc\\_dep}}, C_{\\text{ac}}(t_{\\text{stop}}), X(t_{\\text{stop}})]$, where $t_{\\text{overflow}}$ is the overflow onset time in hours (report $-1$ if never occurs), $t_{\\text{glc\\_dep}}$ is the glucose depletion time in hours (if glucose never depletes before $T_{\\text{end}}$, report the time when the simulation stops), $C_{\\text{ac}}(t_{\\text{stop}})$ is the final acetate concentration in millimoles per liter, and $X(t_{\\text{stop}})$ is the final biomass in grams dry weight per liter.\n\nFinal output format:\n- Your program should produce a single line of output containing the results for all test cases as a comma-separated list of the per-case lists, enclosed in square brackets, with no extra spaces. For example: \"[[a,b,c,d],[e,f,g,h],[i,j,k,l]]\".\n- Each floating-point number in the output must be rendered with exactly six digits after the decimal point.\n\nAll numerical values in the model specification are provided explicitly; no further domain knowledge is required beyond the rules listed above. Focus on correctly encoding the linear constraints, solving the linear program at each time step, and integrating the extracellular and biomass dynamics. Ensure that the use of Glucose and Oxygen follows the specified bounds and that overflow detection is implemented exactly as defined here.", "solution": "We begin from the foundational principles required for constraint-based dynamic simulation.\n\nFirst, intracellular fluxes must satisfy steady-state mass conservation, expressed as $S v = 0$, where $S$ is the stoichiometric matrix over intracellular metabolites and $v$ is the vector of reaction fluxes. In this simplified network, we track intracellular balances for $\\text{glc}_c$, $\\text{o}_2{}_c$, $\\text{ATP}_c$, and $\\text{ac}_c$. The reactions and stoichiometry are chosen to be biochemically plausible and to encode two energy generation modes: respiration and fermentation. Respiration has high adenosine triphosphate yield per glucose and consumes oxygen, while fermentation has low adenosine triphosphate yield per glucose and produces acetate, an overflow metabolite. The non-growth associated maintenance drain ensures that adenosine triphosphate demand remains nonzero even at zero growth.\n\nLet the intracellular flux vector be ordered as $v = [v_{\\text{glc\\_in}}, v_{\\text{o2\\_in}}, v_{\\text{resp}}, v_{\\text{ferm}}, v_{\\text{biomass}}, v_{\\text{maint}}, v_{\\text{ac\\_ex}}]^T$. The equalities $S v = 0$ correspond to the following balances:\n\n- Glucose: $v_{\\text{glc\\_in}} - v_{\\text{resp}} - v_{\\text{ferm}} = 0$, because intracellular glucose is created by uptake and consumed by respiration and fermentation.\n- Oxygen: $v_{\\text{o2\\_in}} - 6 v_{\\text{resp}} = 0$, because respiration consumes six oxygen per glucose and oxygen enters by uptake.\n- Adenosine triphosphate: $30 v_{\\text{resp}} + 2 v_{\\text{ferm}} - 10 v_{\\text{biomass}} - v_{\\text{maint}} = 0$, reflecting production by energy-yielding pathways and consumption by biomass synthesis and maintenance.\n- Acetate: $2 v_{\\text{ferm}} - v_{\\text{ac\\_ex}} = 0$, enforcing that acetate produced by fermentation leaves the cell via secretion at steady state.\n\nBounds derive from extracellular availability and per-biomass transport capacities. For glucose, if extracellular concentration $C_{\\text{glc}}(t)$ is positive, the per-biomass uptake bound is $0 \\le v_{\\text{glc\\_in}} \\le V_{\\text{glc}}$, otherwise $v_{\\text{glc\\_in}} = 0$. Similarly, for oxygen, if $C_{\\text{o2}}(t) > 0$, then $0 \\le v_{\\text{o2\\_in}} \\le V_{\\text{o2}}$, else $v_{\\text{o2\\_in}} = 0$. All other fluxes are non-negative, and the maintenance reaction has a lower bound $v_{\\text{maint}} \\ge m$. The optimization objective for Flux Balance Analysis (FBA) is to maximize the biomass formation rate $v_{\\text{biomass}}$ subject to these equalities and bounds. In code, we can solve this by minimizing the negative of $v_{\\text{biomass}}$ with a linear programming solver.\n\nGiven the optimal fluxes at time $t$, the dynamic evolution of extracellular metabolites follows from material balance per volume, using the convention that uptake fluxes are positive into the cell. For glucose and oxygen:\n- $dC_{\\text{glc}}/dt = - v_{\\text{glc\\_in}}(t) X(t)$,\n- $dC_{\\text{o2}}/dt = - v_{\\text{o2\\_in}}(t) X(t)$.\n\nFor acetate, secretion increases extracellular concentration:\n- $dC_{\\text{ac}}/dt = + v_{\\text{ac\\_ex}}(t) X(t)$.\n\nBiomass grows exponentially at rate $\\mu(t) = v_{\\text{biomass}}(t)$:\n- $dX/dt = \\mu(t) X(t)$.\n\nThese are integrated with an explicit Euler step of size $\\Delta t$: $C_i(t+\\Delta t) = C_i(t) + (dC_i/dt)\\, \\Delta t$ for each extracellular species $i$, with concentration clamped below by zero, and $X(t+\\Delta t) = X(t) + (dX/dt)\\, \\Delta t$.\n\nOverflow metabolism is identified when fermentation is active and acetate is secreted; in this steady-state model, $v_{\\text{ac\\_ex}} > 0$ if and only if $v_{\\text{ferm}} > 0$, due to the acetate balance $2 v_{\\text{ferm}} - v_{\\text{ac\\_ex}} = 0$. Define the overflow onset time as the smallest time $t$ such that $v_{\\text{ac\\_ex}}(t) > \\varepsilon$, where $\\varepsilon$ is a small positive tolerance; if this never occurs, report $-1$. The glucose depletion time is the smallest time $t$ with $C_{\\text{glc}}(t) \\le \\delta$, where $\\delta$ is a small positive tolerance. The simulation stops at $t = T_{\\text{end}}$ or upon glucose depletion, whichever occurs first. The outputs requested are:\n- $t_{\\text{overflow}}$ in hours,\n- $t_{\\text{glc\\_dep}}$ in hours,\n- $C_{\\text{ac}}(t_{\\text{stop}})$ in millimoles per liter,\n- $X(t_{\\text{stop}})$ in grams dry weight per liter.\n\nAlgorithmic steps suitable for implementation:\n1. Initialize $t = 0$, $C_{\\text{glc}}(0)$, $C_{\\text{o2}}(0)$, $C_{\\text{ac}}(0) = 0$, and $X(0)$ for each test case.\n2. At each time step:\n   - Set bounds for $v_{\\text{glc\\_in}}$ and $v_{\\text{o2\\_in}}$ based on $C_{\\text{glc}}(t)$ and $C_{\\text{o2}}(t)$.\n   - Formulate the linear program with the equalities and bounds, and maximize $v_{\\text{biomass}}$ (equivalently, minimize its negative).\n   - Extract $v_{\\text{biomass}}$, $v_{\\text{glc\\_in}}$, $v_{\\text{o2\\_in}}$, and $v_{\\text{ac\\_ex}}$ from the solution.\n   - If $v_{\\text{ac\\_ex}} > \\varepsilon$ and overflow onset time has not yet been set, set it to the current $t$.\n   - Update $C_{\\text{glc}}$, $C_{\\text{o2}}$, $C_{\\text{ac}}$, and $X$ with the explicit Euler step, using the current $X(t)$ to compute consumption and production rates.\n   - If $C_{\\text{glc}}$ crosses below $\\delta$ for the first time, record $t_{\\text{glc\\_dep}}$ as the current $t$.\n   - Increment $t$ by $\\Delta t$.\n3. Stop when $t \\ge T_{\\text{end}}$ or $C_{\\text{glc}} \\le \\delta$. If $t_{\\text{glc\\_dep}}$ was not set and stopping occurred due to $T_{\\text{end}}$, set $t_{\\text{glc\\_dep}} = t$.\n4. If overflow onset was never detected, set $t_{\\text{overflow}} = -1$.\n5. Return the four requested outputs in the order and units specified.\n\nScientific interpretation of phases under the given network:\n- When oxygen uptake capacity per biomass is sufficient relative to glucose uptake ($V_{\\text{o2}} \\ge 6 V_{\\text{glc}}$) and oxygen remains available, the optimizer prefers respiration because it yields more adenosine triphosphate per glucose. Fermentation remains inactive, and acetate secretion stays zero: no overflow.\n- If oxygen uptake capacity is insufficient relative to glucose uptake or oxygen depletes, the optimizer can increase adenosine triphosphate supply by diverting glucose through fermentation, activating acetate secretion: overflow begins immediately (if oxygen is limiting from the start) or at the moment oxygen depletes.\n- The growth rate is limited by adenosine triphosphate availability: $\\mu = v_{\\text{biomass}} = \\left(30 v_{\\text{resp}} + 2 v_{\\text{ferm}} - v_{\\text{maint}}\\right) / 10$ at optimality when the adenosine triphosphate balance is active and $v_{\\text{maint}}$ is at its lower bound $m$.\n\nThe test suite covers distinct regimes:\n- Case A: $V_{\\text{o2}} = 60$ and $V_{\\text{glc}} = 10$ satisfy $V_{\\text{o2}} \\ge 6 V_{\\text{glc}}$, with abundant oxygen pool; strictly respiratory growth and no overflow.\n- Case B: $V_{\\text{o2}} = 10$ is much less than $6 V_{\\text{glc}} = 60$; overflow occurs immediately and persists until glucose depletion or end time.\n- Case C: $V_{\\text{o2}} = 60$ allows fully respiratory uptake while oxygen remains; the finite oxygen pool depletes, and overflow begins at the depletion time.\n\nFinally, the program must aggregate the per-case results into a single line formatted as a list of lists, with each floating-point number printed to exactly six digits after the decimal point, as required.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.optimize import linprog\n\ndef fba_step(C_glc, C_o2, V_glc, V_o2, m_lb):\n    \"\"\"\n    Solve the instantaneous FBA given extracellular concentrations and uptake bounds.\n    Returns the optimal flux vector and status flag.\n    Variable order:\n    0: v_glc_in\n    1: v_o2_in\n    2: v_resp\n    3: v_ferm\n    4: v_biomass\n    5: v_maint\n    6: v_ac_ex\n    \"\"\"\n    # Bounds depend on extracellular availability\n    # If pool is depleted (<= 0), set uptake bound to exactly zero.\n    ub_glc = V_glc if C_glc > 0.0 else 0.0\n    ub_o2 = V_o2 if C_o2 > 0.0 else 0.0\n\n    # Equality constraints matrix A_eq * v = 0\n    # Rows: [glc_c, o2_c, ATP_c, ac_c]\n    A_eq = np.array([\n        [1.0, 0.0, -1.0, -1.0,  0.0,  0.0,  0.0],  # glc balance\n        [0.0, 1.0, -6.0,  0.0,  0.0,  0.0,  0.0],  # o2 balance\n        [0.0, 0.0, 30.0,  2.0, -10.0, -1.0,  0.0], # ATP balance\n        [0.0, 0.0,  0.0,  2.0,  0.0,  0.0, -1.0],  # acetate balance\n    ])\n    b_eq = np.zeros(4)\n\n    # Bounds for variables\n    bounds = [\n        (0.0, ub_glc),      # v_glc_in\n        (0.0, ub_o2),       # v_o2_in\n        (0.0, None),        # v_resp\n        (0.0, None),        # v_ferm\n        (0.0, None),        # v_biomass\n        (m_lb, None),       # v_maint (lower bound m)\n        (0.0, None),        # v_ac_ex\n    ]\n\n    # Objective: maximize v_biomass -> minimize -v_biomass\n    c = np.array([0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0])\n\n    res = linprog(c, A_eq=A_eq, b_eq=b_eq, bounds=bounds, method='highs')\n    return res\n\ndef simulate_case(params, eps_overflow=1e-9, delta_glc=1e-9):\n    \"\"\"\n    Simulate one test case.\n    params: (C_glc0, C_o20, V_glc, V_o2, m, X0, T_end, dt)\n    Returns [t_overflow, t_glc_dep, C_ac_final, X_final]\n    \"\"\"\n    C_glc, C_o2, V_glc, V_o2, m, X, T_end, dt = params\n    C_ac = 0.0\n    t = 0.0\n    t_overflow = None\n    t_glc_dep = None\n\n    # Run until time end or glucose depletion\n    while t < T_end and C_glc > delta_glc:\n        # Solve FBA at current state\n        res = fba_step(C_glc, C_o2, V_glc, V_o2, m)\n        if not res.success:\n            # Infeasible or failed optimization; treat as zero growth and no fluxes\n            v = np.zeros(7)\n            v[5] = m  # attempt to respect maintenance bound; but no ATP => growth 0\n        else:\n            v = res.x\n\n        v_glc_in = max(0.0, v[0])\n        v_o2_in = max(0.0, v[1])\n        v_resp = max(0.0, v[2])\n        v_ferm = max(0.0, v[3])\n        v_bio = max(0.0, v[4])\n        v_maint = max(m, v[5])\n        v_ac_ex = max(0.0, v[6])\n\n        # Detect overflow onset\n        if v_ac_ex > eps_overflow and t_overflow is None:\n            t_overflow = t\n\n        # Store previous concentrations for depletion time detection\n        C_glc_prev = C_glc\n\n        # Euler updates using current X\n        glc_cons = v_glc_in * X * dt\n        o2_cons = v_o2_in * X * dt\n        ac_prod = v_ac_ex * X * dt\n        growth = v_bio * X * dt\n\n        C_glc = max(0.0, C_glc - glc_cons)\n        C_o2 = max(0.0, C_o2 - o2_cons)\n        C_ac = C_ac + ac_prod\n        X = X + growth\n\n        t += dt\n\n        # Record glucose depletion time when it first crosses below delta_glc\n        if C_glc <= delta_glc and C_glc_prev > delta_glc and t_glc_dep is None:\n            t_glc_dep = t\n\n    # If simulation ended due to time, set t_glc_dep accordingly if not set\n    if t_glc_dep is None:\n        t_glc_dep = t\n\n    if t_overflow is None:\n        t_overflow_out = -1.0\n    else:\n        t_overflow_out = t_overflow\n\n    return [t_overflow_out, t_glc_dep, C_ac, X]\n\ndef solve():\n    # Define the test cases from the problem statement.\n    # Each tuple: (C_glc0, C_o20, V_glc, V_o2, m, X0, T_end, dt)\n    test_cases = [\n        (100.0, 1000.0, 10.0, 60.0, 1.0, 0.1, 5.0, 0.005),  # Case A\n        (100.0, 50.0,   10.0, 10.0, 1.0, 0.1, 5.0, 0.005),  # Case B\n        (100.0, 20.0,   10.0, 60.0, 1.0, 0.1, 5.0, 0.005),  # Case C\n    ]\n\n    results = []\n    for case in test_cases:\n        t_overflow, t_glc_dep, C_ac_final, X_final = simulate_case(case, eps_overflow=1e-9, delta_glc=1e-9)\n        # Format to six decimals as strings; final assembly without spaces\n        formatted = [\n            f\"{t_overflow:.6f}\",\n            f\"{t_glc_dep:.6f}\",\n            f\"{C_ac_final:.6f}\",\n            f\"{X_final:.6f}\",\n        ]\n        results.append(f\"[{','.join(formatted)}]\")\n\n    # Final print statement in the exact required format: list of lists, no spaces\n    print(f\"[{','.join(results)}]\")\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "2723964"}]}