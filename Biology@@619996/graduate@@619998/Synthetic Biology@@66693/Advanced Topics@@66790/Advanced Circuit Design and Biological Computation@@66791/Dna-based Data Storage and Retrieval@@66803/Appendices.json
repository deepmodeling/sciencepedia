{"hands_on_practices": [{"introduction": "A primary challenge in DNA-based data storage is mitigating errors associated with homopolymers, which are long runs of a single nucleotide. This exercise guides you through the process of designing a constrained code to explicitly forbid such sequences, a common practice known as run-length-limited (RLL) coding. By constructing a finite-state machine and calculating its capacity, you will connect foundational concepts from information theory and automata theory to solve a tangible problem in synthetic biology engineering. [@problem_id:2730426]", "problem": "A synthetic DNA (Deoxyribonucleic Acid) storage device is required to map binary input symbols to DNA output symbols while forbidding the substrings `AAAA` and `CCCC` anywhere in the output, in order to mitigate homopolymer-associated sequencing errors. \n\nTask:\n1) Construct a minimal deterministic finite-state transducer (FST) that emits symbols from the alphabet $\\{A,C,G,T\\}$ and guarantees that no emitted string ever contains `AAAA` or `CCCC`. Your construction must be minimal in the sense of deterministic finite-state realization: the set of states must encode exactly the minimum necessary memory about the recent output history to enforce the constraint, without redundancy. Explicitly specify the states and the allowed transitions labeled by output symbols.\n\n2) Starting from first principles for constrained systems, derive the asymptotic growth rate of the number of admissible output strings of length $n$, and from it determine the maximum achievable information rate, in bits per nucleotide, for mapping independent fair binary input into output strings produced by your FST without violating the constraint. Base your derivation on standard definitions and well-tested results from finite-state constrained coding theory (e.g., counting admissible sequences via a state transition graph and asymptotic growth rates from spectral radii), not on any shortcut formulas introduced ad hoc for this particular constraint.\n\n3) Report the maximum achievable coding rate in bits per nucleotide as a single real number, rounded to $4$ significant figures. Express the final answer in bits per nucleotide as instructed (do not include units in your final boxed answer).", "solution": "The problem given is a well-posed problem in applied information theory, specifically in the domain of constrained coding for data storage systems. It is scientifically grounded, as homopolymer runs are a known source of errors in DNA sequencing. The problem is to design a code that avoids such runs and to calculate the theoretical maximum efficiency of such a code. The solution requires the application of standard methods from the theory of finite automata and symbolic dynamics.\n\nThe problem consists of three parts. First, the construction of a minimal state machine to enforce the constraint. Second, the derivation of the maximum information rate, or capacity, for this constrained system. Third, the calculation of this capacity's numerical value.\n\n**Part 1: Construction of the Minimal Finite-State Realization**\n\nThe constraint is that the output sequence, composed of symbols from the alphabet $\\{A, C, G, T\\}$, must not contain the substrings `AAAA` or `CCCC`. To enforce this, a system must maintain memory of the recent output sequence. Specifically, it must track the length of any terminal run of $A$'s or $C$'s.\n\nA minimal deterministic finite automaton (DFA) that recognizes the set of all valid sequences can be constructed. The states of this DFA will represent the necessary memory. The states correspond to the longest suffix of the sequence that is also a prefix of a forbidden string.\n\nLet the set of states be $Q = \\{S_0, S_A, S_{AA}, S_{AAA}, S_C, S_{CC}, S_{CCC}\\}$. The meaning of each state is as follows:\n- $S_0$: The initial state. The output sequence is empty or its suffix is not a prefix of `AAAA` or `CCCC`. This is the case if the last output symbol was $G$ or $T$.\n- $S_A$: The last output was $A$.\n- $S_{AA}$: The last two outputs were $AA$.\n- $S_{AAA}$: The last three outputs were $AAA$.\n- $S_C$: The last output was $C$.\n- $S_{CC}$: The last two outputs were $CC$.\n- $S_{CCC}$: The last three outputs were $CCC$.\n\nThis set of $7$ states is minimal. To see this, one must demonstrate that each state is distinguishable in the Myhill-Nerode sense. For instance, a sequence ending in state $S_{AA}$ must be distinguished from one ending in $S_{AAA}$, because appending an $A$ is permissible for the former (leading to $S_{AAA}$) but forbidden for the latter. A similar argument applies to all pairs of states.\n\nThe transitions of the automaton are defined by the current state and the next output symbol. All states are accepting states, as any prefix of a valid sequence is itself valid. The transitions are:\n\n- From state $S_0$:\n  - On output $A$, transition to $S_A$.\n  - On output $C$, transition to $S_C$.\n  - On output $G$ or $T$, transition to $S_0$.\n\n- From state $S_A$:\n  - On output $A$, transition to $S_{AA}$.\n  - On output $C$, transition to $S_C$.\n  - On output $G$ or $T$, transition to $S_0$.\n\n- From state $S_{AA}$:\n  - On output $A$, transition to $S_{AAA}$.\n  - On output $C$, transition to $S_C$.\n  - On output $G$ or $T$, transition to $S_0$.\n\n- From state $S_{AAA}$:\n  - On output $A$, this transition is forbidden.\n  - On output $C$, transition to $S_C$.\n  - On output $G$ or $T$, transition to $S_0$.\n\n- From state $S_C$:\n  - On output $C$, transition to $S_{CC}$.\n  - On output $A$, transition to $S_A$.\n  - On output $G$ or $T$, transition to $S_0$.\n\n- From state $S_{CC}$:\n  - On output $C$, transition to $S_{CCC}$.\n  - On output $A$, transition to $S_A$.\n  - On output $G$ or $T$, transition to $S_0$.\n\n- From state $S_{CCC}$:\n  - On output $C$, this transition is forbidden.\n  - On output $A$, transition to $S_A$.\n  - On output $G$ or $T$, transition to $S_0$.\n\nThis automaton describes the structure of all valid output sequences. A finite-state transducer (FST) would be built upon this automaton by assigning input symbols (e.g., from the binary alphabet $\\{0,1\\}$) to the allowed transitions. The maximum information rate is a property of the underlying constraint graph and is independent of any specific input assignment.\n\n**Part 2: Derivation of the Maximum Information Rate**\n\nThe number of admissible output strings of length $n$, denoted $N(n)$, is the total number of paths of length $n$ in the state transition graph starting from $S_0$. For large $n$, $N(n)$ grows asymptotically as $N(n) \\sim k \\cdot \\lambda^n$, where $\\lambda$ is the spectral radius (the largest-magnitude eigenvalue) of the adjacency matrix of the graph. The maximum achievable information rate, or channel capacity $C$, is given by the Shannon-Hartley theorem adapted for discrete noiseless channels, which is the topological entropy of the system:\n$$C = \\lim_{n\\to\\infty} \\frac{\\log_2 N(n)}{n} = \\log_2(\\lambda)$$\n\nThe adjacency matrix $M$ of the state transition graph represents the number of single-symbol transitions between states. Let the states be ordered as $(S_0, S_A, S_{AA}, S_{AAA}, S_C, S_{CC}, S_{CCC})$. The matrix $M$ is:\n$$ M = \\begin{pmatrix}\n2 & 1 & 0 & 0 & 1 & 0 & 0 \\\\\n2 & 0 & 1 & 0 & 1 & 0 & 0 \\\\\n2 & 0 & 0 & 1 & 1 & 0 & 0 \\\\\n2 & 0 & 0 & 0 & 1 & 0 & 0 \\\\\n2 & 1 & 0 & 0 & 0 & 1 & 0 \\\\\n2 & 1 & 0 & 0 & 0 & 0 & 1 \\\\\n2 & 1 & 0 & 0 & 0 & 0 & 0\n\\end{pmatrix} $$\nTo find the eigenvalue $\\lambda$, we solve the characteristic equation $\\det(M - \\lambda I) = 0$. A more direct approach is to establish a system of recurrence relations for the number of paths ending in each state. Let $N_i(n)$ be the number of valid sequences of length $n$ ending in state $i$. For large $n$, we assume an exponential growth form $N_i(n) \\approx c_i \\lambda^n$ for some constants $c_i$. The recurrence relations for the coefficients $c_i$ form a linear system:\nLet's use a simplified notation for the coefficients: $c_0, c_A, c_{AA}, c_{AAA}, c_C, c_{CC}, c_{CCC}$.\nThe system of equations, derived from the transitions into each state, is:\n$\\lambda c_0 = 2(c_0 + c_A + c_{AA} + c_{AAA} + c_C + c_{CC} + c_{CCC})$\n$\\lambda c_A = c_0 + c_C + c_{CC} + c_{CCC}$\n$\\lambda c_{AA} = c_A$\n$\\lambda c_{AAA} = c_{AA}$\n$\\lambda c_C = c_0 + c_A + c_{AA} + c_{AAA}$\n$\\lambda c_{CC} = c_C$\n$\\lambda c_{CCC} = c_{CC}$\n\nFrom these, we can express the coefficients for longer runs in terms of the first one:\n$c_{AA} = c_A/\\lambda$, $c_{AAA} = c_{AA}/\\lambda = c_A/\\lambda^2$.\n$c_{CC} = c_C/\\lambda$, $c_{CCC} = c_{CC}/\\lambda = c_C/\\lambda^2$.\n\nLet $g(\\lambda) = 1 + \\lambda^{-1} + \\lambda^{-2}$. The system for $c_A$ and $c_C$ becomes:\n$\\lambda c_A = c_0 + c_C(1 + \\lambda^{-1} + \\lambda^{-2}) = c_0 + c_C g(\\lambda)$\n$\\lambda c_C = c_0 + c_A(1 + \\lambda^{-1} + \\lambda^{-2}) = c_0 + c_A g(\\lambda)$\n\nSubtracting these two equations yields $(\\lambda + g(\\lambda))(c_A - c_C) = 0$. Since $\\lambda > 0$ and $g(\\lambda) > 0$, we must have $c_A = c_C$.\nSubstituting $c_A = c_C$ gives $c_A(\\lambda - g(\\lambda)) = c_0$.\n\nThe first equation for $c_0$ involves the sum of all coefficients $\\sum_i c_i$.\n$\\sum_i c_i = c_0 + c_A(1+\\lambda^{-1}+\\lambda^{-2}) + c_C(1+\\lambda^{-1}+\\lambda^{-2}) = c_0 + 2c_A g(\\lambda)$.\nSo, $\\lambda c_0 = 2(c_0 + 2c_A g(\\lambda))$, which means $(\\lambda - 2)c_0 = 4c_A g(\\lambda)$.\n\nWe now have a system of two equations for $c_0$ and $c_A$:\n1) $c_A(\\lambda - g(\\lambda)) = c_0$\n2) $(\\lambda - 2)c_0 = 4c_A g(\\lambda)$\n\nSubstituting (1) into (2) for a non-trivial solution ($c_A \\ne 0, c_0 \\ne 0$):\n$(\\lambda - 2)c_A(\\lambda - g(\\lambda)) = 4c_A g(\\lambda)$\n$(\\lambda - 2)(\\lambda - g(\\lambda)) = 4g(\\lambda)$\n$\\lambda(\\lambda - 2) - (\\lambda - 2)g(\\lambda) = 4g(\\lambda)$\n$\\lambda(\\lambda - 2) = (4 + \\lambda - 2)g(\\lambda) = (\\lambda + 2)g(\\lambda)$\n\nSubstituting $g(\\lambda) = 1 + \\lambda^{-1} + \\lambda^{-2} = \\frac{\\lambda^2+\\lambda+1}{\\lambda^2}$:\n$\\lambda(\\lambda - 2) = (\\lambda + 2)\\frac{\\lambda^2+\\lambda+1}{\\lambda^2}$\nMultiplying by $\\lambda^2$:\n$\\lambda^3(\\lambda - 2) = (\\lambda + 2)(\\lambda^2 + \\lambda + 1)$\n$\\lambda^4 - 2\\lambda^3 = \\lambda^3 + \\lambda^2 + \\lambda + 2\\lambda^2 + 2\\lambda + 2$\n$\\lambda^4 - 2\\lambda^3 = \\lambda^3 + 3\\lambda^2 + 3\\lambda + 2$\nThis simplifies to the characteristic polynomial for $\\lambda$:\n$$ \\lambda^4 - 3\\lambda^3 - 3\\lambda^2 - 3\\lambda - 2 = 0 $$\nBy the Perron-Frobenius theorem, this irreducible and aperiodic system has a unique positive real eigenvalue $\\lambda$ that determines the growth rate.\n\n**Part 3: Numerical Calculation of the Information Rate**\n\nThe polynomial $\\lambda^4 - 3\\lambda^3 - 3\\lambda^2 - 3\\lambda - 2 = 0$ does not have simple analytical roots and must be solved numerically. The maximum number of choices from any state is $4$, so $\\lambda \\le 4$.\nLet $P(\\lambda) = \\lambda^4 - 3\\lambda^3 - 3\\lambda^2 - 3\\lambda - 2$.\n$P(3) = 81 - 81 - 27 - 9 - 2 = -38$.\n$P(4) = 256 - 192 - 48 - 12 - 2 = 2$.\nThe root $\\lambda$ is between $3$ and $4$. Numerical methods (such as Newton's method or bisection) yield the solution:\n$$\\lambda \\approx 3.97436$$\nThe maximum achievable coding rate $C$ is then calculated in bits per nucleotide:\n$$C = \\log_2(\\lambda) = \\log_2(3.97436)$$\n$$ C \\approx 1.99105 $$\nRounding to $4$ significant figures, the capacity is $1.991$ bits per nucleotide. This represents the theoretical upper limit on the amount of information that can be encoded per DNA base under the given constraints.", "answer": "$$\\boxed{1.991}$$", "id": "2730426"}, {"introduction": "The retrieval of information from a DNA archive almost always requires Polymerase Chain Reaction (PCR) to amplify the signal, but this process introduces errors. This practice introduces a powerful method for modeling the accumulation of such errors by treating the state of a nucleotide as a Markov process. Deriving the expected number of substitutions after $c$ cycles based on the polymerase error rate $p_{\\text{pol}}$ provides a quantitative framework for assessing data fidelity and setting quality control parameters for retrieval. [@problem_id:2730491]", "problem": "In a deoxyribonucleic acid (DNA)-based data storage system, retrieval often requires Polymerase Chain Reaction (PCR) amplification of short oligonucleotides to obtain enough material for sequencing. Consider a single-stranded target of length $L = 200$ nucleotides that is initially error-free. Let $p_{\\text{pol}}$ denote the per-base per-copy probability of a substitution error during DNA polymerase extension, assumed constant across cycles and positions. Assume the following conditions, grounded in standard fidelity models for DNA polymerases:\n- At each copying event, for any given nucleotide position, with probability $p_{\\text{pol}}$ a substitution is introduced relative to the template, and with probability $1 - p_{\\text{pol}}$ the nucleotide is copied identically to the template.\n- Conditional on a substitution occurring at a position, the misincorporated nucleotide is equally likely to be any of the $3$ nucleotides different from the template base.\n- Insertions and deletions do not occur, and different nucleotide positions behave independently.\n- You sample one amplicon uniformly at random from the population after $c$ PCR cycles originating from a single initial template, so that along the lineage from the original template to the sampled amplicon there have been exactly $c$ copying events at each position.\n\nUsing only fundamental probability rules and Markovian reasoning on the correctness state of a single nucleotide relative to the original template, derive from first principles a closed-form expression for the expected number of nucleotide substitutions in the sampled $L = 200$-nucleotide amplicon after $c$ cycles, as a function of $p_{\\text{pol}}$ and $c$. Express your final answer as a single simplified analytic expression in terms of $p_{\\text{pol}}$ and $c$. Do not round.", "solution": "The problem statement as presented is scientifically grounded, well-posed, and objective. It provides a simplified but standard model of error accumulation during Polymerase Chain Reaction (PCR), which is a common problem in synthetic biology and bioinformatics. The assumptions, such as the independence of nucleotide positions and the absence of insertions or deletions, are acceptable idealizations for constructing a tractable mathematical model. All necessary parameters are provided for a unique solution. Therefore, the problem is valid, and a rigorous derivation can proceed.\n\nThe objective is to find the expected number of nucleotide substitutions, denoted $E[N]$, in a DNA amplicon of length $L=200$ nucleotides after $c$ cycles of amplification.\n\nThe problem states that different nucleotide positions behave independently. This assumption is critical. It allows us to analyze a single nucleotide position and then scale the result to the full length of the DNA strand. Let $X_i$ be an indicator random variable for the $i$-th nucleotide position, where $X_i=1$ if the nucleotide at that position is a substitution (i.e., different from the original template) and $X_i=0$ if it is correct. The total number of substitutions is $N = \\sum_{i=1}^{L} X_i$.\n\nBy the linearity of expectation, the expected total number of substitutions is the sum of the expectations of the individual indicator variables:\n$$E[N] = E\\left[\\sum_{i=1}^{L} X_i\\right] = \\sum_{i=1}^{L} E[X_i]$$\nThe expectation of an indicator variable is the probability of the event it indicates. Thus, $E[X_i] = P(X_i=1)$. Since the error process is identical for all positions, this probability is the same for all $i$. Let us denote this probability as $P_{\\text{err}}(c)$, the probability that a single nucleotide site is in an error state after $c$ cycles. The expression for the expected number of substitutions simplifies to:\n$$E[N] = L \\cdot P_{\\text{err}}(c)$$\n\nWe will now determine $P_{\\text{err}}(c)$ using the specified Markovian reasoning. Consider a single nucleotide position. At any cycle, this position can be in one of two states relative to the original template:\n- State $S_0$: The nucleotide is correct (identical to the original template).\n- State $S_1$: The nucleotide is incorrect (it has been substituted).\n\nLet $P_0(c)$ be the probability that the nucleotide is in state $S_0$ after $c$ cycles, and $P_1(c)$ be the probability that it is in state $S_1$ after $c$ cycles. By definition, $P_1(c) = P_{\\text{err}}(c)$ and $P_0(c) + P_1(c) = 1$. The initial template is error-free, so at cycle $c=0$, we have $P_0(0)=1$ and $P_1(0)=0$.\n\nThe lineage of the sampled amplicon consists of exactly $c$ copying events. We can model the state evolution from cycle $c$ to $c+1$ as a discrete-time Markov process. We need to find the one-step transition probabilities.\n1.  Transition from $S_0$: If a site is correct (in state $S_0$) at cycle $c$, it will remain correct at cycle $c+1$ if it is copied without error. This occurs with probability $1 - p_{\\text{pol}}$. It will become incorrect (transition to $S_1$) if a substitution occurs, which has probability $p_{\\text{pol}}$.\n2.  Transition from $S_1$: If a site is incorrect (in state $S_1$) at cycle $c$, its state at cycle $c+1$ depends on the next copying event.\n    - It remains incorrect if it is either copied correctly (probability $1-p_{\\text{pol}}$) or if a substitution occurs to one of the other $2$ incorrect bases. A substitution from one incorrect base to another specific incorrect base has probability $p_{\\text{pol}} \\times \\frac{1}{3}$. So, the probability of substituting to any of the other $2$ incorrect bases is $p_{\\text{pol}} \\times \\frac{2}{3}$.\n    - It becomes correct (transitions to $S_0$) only if a substitution occurs *and* the new base happens to be the original, correct one. Given a substitution, there are $3$ equiprobable outcomes. The probability of this specific \"back-mutation\" is $p_{\\text{pol}} \\times \\frac{1}{3}$.\n\nTherefore, the transition probabilities are:\n- $P(S_{c+1}=S_0 | S_c=S_0) = 1 - p_{\\text{pol}}$\n- $P(S_{c+1}=S_1 | S_c=S_0) = p_{\\text{pol}}$\n- $P(S_{c+1}=S_0 | S_c=S_1) = \\frac{1}{3}p_{\\text{pol}}$\n- $P(S_{c+1}=S_1 | S_c=S_1) = (1 - p_{\\text{pol}}) + p_{\\text{pol}}\\frac{2}{3} = 1 - \\frac{1}{3}p_{\\text{pol}}$\n\nWe can write a recurrence relation for $P_0(c)$, the probability of being correct:\n$$P_0(c+1) = P_0(c) \\cdot P(S_{c+1}=S_0 | S_c=S_0) + P_1(c) \\cdot P(S_{c+1}=S_0 | S_c=S_1)$$\nSubstituting the transition probabilities and using $P_1(c) = 1 - P_0(c)$:\n$$P_0(c+1) = P_0(c) (1 - p_{\\text{pol}}) + (1 - P_0(c)) \\left(\\frac{1}{3}p_{\\text{pol}}\\right)$$\n$$P_0(c+1) = P_0(c) - p_{\\text{pol}}P_0(c) + \\frac{1}{3}p_{\\text{pol}} - \\frac{1}{3}p_{\\text{pol}}P_0(c)$$\n$$P_0(c+1) = P_0(c) \\left(1 - \\frac{4}{3}p_{\\text{pol}}\\right) + \\frac{1}{3}p_{\\text{pol}}$$\nThis is a linear first-order recurrence relation. Let us find its fixed point, $P_{0, \\text{eq}}$, by setting $P_0(c+1) = P_0(c) = P_{0, \\text{eq}}$:\n$$P_{0, \\text{eq}} = P_{0, \\text{eq}} \\left(1 - \\frac{4}{3}p_{\\text{pol}}\\right) + \\frac{1}{3}p_{\\text{pol}}$$\n$$P_{0, \\text{eq}} \\left(1 - \\left(1 - \\frac{4}{3}p_{\\text{pol}}\\right)\\right) = \\frac{1}{3}p_{\\text{pol}}$$\n$$P_{0, \\text{eq}} \\left(\\frac{4}{3}p_{\\text{pol}}\\right) = \\frac{1}{3}p_{\\text{pol}}$$\nFor $p_{\\text{pol}} \\neq 0$, the equilibrium probability of being correct is $P_{0, \\text{eq}} = \\frac{1}{4}$. This is expected, as after infinite cycles, any of the $4$ nucleotides should be equally likely at any position.\n\nThe general solution to the recurrence $P_0(c+1) = a P_0(c) + b$ is $P_0(c) = A \\cdot a^c + P_{0, \\text{eq}}$, where $a = 1 - \\frac{4}{3}p_{\\text{pol}}$. We find the constant $A$ using the initial condition $P_0(0)=1$:\n$$1 = A \\cdot \\left(1 - \\frac{4}{3}p_{\\text{pol}}\\right)^0 + \\frac{1}{4}$$\n$$1 = A + \\frac{1}{4} \\implies A = \\frac{3}{4}$$\nThe probability of a site being correct after $c$ cycles is:\n$$P_0(c) = \\frac{3}{4} \\left(1 - \\frac{4}{3}p_{\\text{pol}}\\right)^c + \\frac{1}{4}$$\nThe probability of an error, $P_{\\text{err}}(c) = P_1(c)$, is therefore:\n$$P_{\\text{err}}(c) = 1 - P_0(c) = 1 - \\left[\\frac{3}{4} \\left(1 - \\frac{4}{3}p_{\\text{pol}}\\right)^c + \\frac{1}{4}\\right]$$\n$$P_{\\text{err}}(c) = \\frac{3}{4} - \\frac{3}{4} \\left(1 - \\frac{4}{3}p_{\\text{pol}}\\right)^c = \\frac{3}{4} \\left[1 - \\left(1 - \\frac{4}{3}p_{\\text{pol}}\\right)^c\\right]$$\nFinally, we compute the expected number of substitutions in the amplicon of length $L=200$:\n$$E[N] = L \\cdot P_{\\text{err}}(c) = 200 \\cdot \\frac{3}{4} \\left[1 - \\left(1 - \\frac{4}{3}p_{\\text{pol}}\\right)^c\\right]$$\n$$E[N] = 150 \\left[1 - \\left(1 - \\frac{4}{3}p_{\\text{pol}}\\right)^c\\right]$$\nThis is the closed-form expression for the expected number of substitutions as a function of the polymerase error rate $p_{\\text{pol}}$ and the number of cycles $c$.", "answer": "$$\n\\boxed{150 \\left(1 - \\left(1 - \\frac{4}{3}p_{\\text{pol}}\\right)^{c}\\right)}\n$$", "id": "2730491"}, {"introduction": "After amplification, the DNA library is sequenced, which is fundamentally a stochastic sampling process where some molecules may be missed. This complete loss of an oligonucleotide, known as dropout, is a critical failure mode. This exercise asks you to derive, from first principles, the probability of dropout as a function of the mean sequencing coverage $\\lambda$, demonstrating how the discrete binomial sampling model converges to the convenient Poisson distribution in the limit of large-scale systems. [@problem_id:2730425]", "problem": "A DNA-based archival system encodes digital information into a well-mixed pool of $M$ unique oligonucleotides, each present at equal molar abundance. A sequencing run performs $R$ independent read events. For each read event, a single molecule is captured and sequenced, and the probability that a particular target oligonucleotide is captured in any given event is $1/M$, assuming unbiased sampling and no amplification bias or read-to-read dependence. Define the mean per-oligonucleotide coverage as $\\lambda = R/M$. In the asymptotic regime of large libraries and deep sequencing where $M \\to \\infty$ and $R \\to \\infty$ while $\\lambda$ remains fixed, the number of reads mapping to any given oligonucleotide is modeled as a Poisson count with mean $\\lambda$ under the standard independent sampling assumptions of massively parallel sequencing.\n\nStarting from the independent Bernoulli sampling model and without appealing to any pre-stated target formula, derive from first principles the limiting probability that a particular oligonucleotide is completely missing from the sequencing output (that is, receives $0$ reads) as a function of $\\lambda$. Provide your final result as a single closed-form analytic expression in terms of $\\lambda$. No numerical approximation or rounding is required, and no units are needed since this is a probability.", "solution": "The problem statement has been validated and is deemed scientifically sound, well-posed, and objective. It poses a standard, non-trivial question in probabilistic modeling relevant to genomics and synthetic biology. We will proceed with the derivation from first principles as requested.\n\nThe process of sequencing molecules from a a large pool can be modeled as a series of independent trials. We consider a single, specific oligonucleotide from the pool of $M$ unique types. For each of the $R$ independent read events, we define a \"success\" as the event where our specific oligonucleotide is captured and sequenced.\n\nGiven that the pool is well-mixed and all $M$ oligonucleotides are at equal molar abundance, the probability of success in any single trial is $p = \\frac{1}{M}$. Consequently, the probability of \"failure\" (sequencing any of the other $M-1$ oligonucleotides) is $q = 1 - p = 1 - \\frac{1}{M}$.\n\nThe total number of reads, $R$, constitutes the number of independent Bernoulli trials. The number of reads mapping to our specific oligonucleotide, which we denote by the random variable $k$, therefore follows a binomial distribution with parameters $n=R$ and $p=\\frac{1}{M}$. The probability mass function for observing exactly $k$ reads is given by:\n$$P(k) = \\binom{R}{k} p^k (1-p)^{R-k} = \\binom{R}{k} \\left(\\frac{1}{M}\\right)^k \\left(1 - \\frac{1}{M}\\right)^{R-k}$$\nThe problem asks for the probability that the oligonucleotide is \"completely missing,\" which corresponds to the case where it receives $k=0$ reads. We substitute $k=0$ into the binomial probability mass function:\n$$P(k=0) = \\binom{R}{0} \\left(\\frac{1}{M}\\right)^0 \\left(1 - \\frac{1}{M}\\right)^{R-0}$$\nBy definition, $\\binom{R}{0} = 1$ and for any non-zero base, $x^0 = 1$. This simplifies the expression to:\n$$P(k=0) = \\left(1 - \\frac{1}{M}\\right)^R$$\nThis formula gives the exact probability for finite $M$ and $R$. The problem, however, specifies an asymptotic regime where $M \\to \\infty$ and $R \\to \\infty$ while the mean per-oligonucleotide coverage, $\\lambda = \\frac{R}{M}$, remains a fixed constant.\n\nTo find the limiting probability, we first express $R$ in terms of $M$ and the constant $\\lambda$: $R = \\lambda M$. We substitute this into our expression for $P(k=0)$:\n$$P(k=0) = \\left(1 - \\frac{1}{M}\\right)^{\\lambda M}$$\nWe must now evaluate the limit of this expression as $M \\to \\infty$. Let the limiting probability be $P_0$.\n$$P_0 = \\lim_{M \\to \\infty} \\left(1 - \\frac{1}{M}\\right)^{\\lambda M}$$\nUsing the property of exponents $(a^b)^c = a^{bc}$, we can rewrite the expression as:\n$$P_0 = \\lim_{M \\to \\infty} \\left[ \\left(1 - \\frac{1}{M}\\right)^M \\right]^{\\lambda}$$\nThis form contains a well-known limit that serves as a fundamental definition of the exponential function:\n$$\\lim_{n \\to \\infty} \\left(1 + \\frac{x}{n}\\right)^n = \\exp(x)$$\nFor our case, we set the variable $n=M$ and the constant $x=-1$. The limit of the inner part of our expression is therefore:\n$$\\lim_{M \\to \\infty} \\left(1 - \\frac{1}{M}\\right)^M = \\lim_{M \\to \\infty} \\left(1 + \\frac{-1}{M}\\right)^M = \\exp(-1)$$\nSince the function $f(y) = y^{\\lambda}$ is continuous for a fixed $\\lambda$, the limit of the function is the function of the limit. We can thus substitute the result of the inner limit back into our expression for $P_0$:\n$$P_0 = \\left[ \\lim_{M \\to \\infty} \\left(1 - \\frac{1}{M}\\right)^M \\right]^{\\lambda} = \\left(\\exp(-1)\\right)^{\\lambda}$$\nApplying the rules of exponents once more, we arrive at the final expression:\n$$P_0 = \\exp(-\\lambda)$$\nThis result represents the limiting probability that a particular oligonucleotide receives zero reads as a function of the mean coverage $\\lambda$. This derivation, beginning from the basic Bernoulli trial model, rigorously establishes the required probability without pre-supposing the Poisson distribution, although the result is indeed the probability of a zero outcome for a Poisson random variable with mean $\\lambda$.", "answer": "$$\\boxed{\\exp(-\\lambda)}$$", "id": "2730425"}]}