{"hands_on_practices": [{"introduction": "The formation of a stable biofilm begins with the successful adhesion and growth of microcolonies. This primary step involves a physical contest between the adhesive forces holding the bacteria to a surface and the hydrodynamic forces of the surrounding fluid trying to tear them away. This exercise guides you through a first-principles scaling analysis to determine the mechanical stability of a microcolony, a foundational concept in understanding biofilm architecture [@problem_id:2763871]. By balancing the adhesion torque against the shear-induced torque, you will derive a critical condition for stability and discover how it depends on both cellular-level properties and the macroscopic environment.", "problem": "You are asked to formalize and analyze the competition between adhesion-driven clustering and shear-driven dispersion for a spherical bacterial microcolony at a solid surface, and to compute the stability regime using a physically consistent, first-principles scaling model.\n\nA spherical aggregate of radius $R$ adheres to a planar surface through extracellular polymeric substances (EPS). The surrounding fluid is Newtonian with dynamic viscosity $\\mu$ and is driven in steady planar shear of rate $\\dot{\\gamma}$ near the wall. You may assume the following fundamental bases and standard definitions without additional derivation:\n- Newtonian wall shear stress is $\\tau = \\mu \\dot{\\gamma}$.\n- The hydrodynamic torque magnitude about the attachment region scales as a dimensionless geometric prefactor times the product of the local stress, a characteristic area that scales with size squared, and a characteristic lever arm that scales with size. Denote this prefactor by $k_h$.\n- Adhesion arises from independent, load-sharing bonds. The number of engaged bonds is $N_b = \\rho_b A_c$, where $\\rho_b$ is the areal density of bonds and $A_c$ is the contact area. The circular contact radius scales as $R_c = \\alpha R$, so $A_c = \\pi (\\alpha R)^2$. Each bond sustains at most a tensile force $f_b$. The characteristic adhesion lever arm scales as $R_\\ell = \\beta R$, with $0 < \\beta \\le 1$.\n- The stability criterion is torque balance: an aggregate is mechanically stable against shear-driven dispersion if and only if the total resisting adhesion torque is greater than or equal to the applied hydrodynamic torque.\n\nTasks:\n1) Starting only from the bases above, derive a dimensionless stability index $S$ as the ratio of total resisting adhesion torque to applied hydrodynamic torque, and hence obtain the critical shear rate $\\dot{\\gamma}_\\star$ at which $S = 1$. Express $\\dot{\\gamma}_\\star$ symbolically in terms of $\\mu$, $k_h$, $\\rho_b$, $f_b$, $\\alpha$, $\\beta$, and any universal constants needed. Do not use or assume any formula not derivable from the stated bases.\n2) Using your derivation, design an algorithm that, for given parameters $(R,\\rho_b,f_b,\\dot{\\gamma})$, computes:\n   - The boolean stability verdict under the criterion $S \\ge 1$.\n   - The critical shear rate $\\dot{\\gamma}_\\star$, expressed in $\\mathrm{s^{-1}}$, rounded to three significant figures.\n3) Implement the algorithm as a complete program that evaluates the following test suite. Use International System of Units (SI) consistently: $R$ in $\\mathrm{m}$, $\\rho_b$ in $\\mathrm{m^{-2}}$, $f_b$ in $\\mathrm{N}$, $\\mu$ in $\\mathrm{Pa\\cdot s}$, and $\\dot{\\gamma}$ and $\\dot{\\gamma}_\\star$ in $\\mathrm{s^{-1}}$. Treat equality $S=1$ as stable.\n\nUse the fixed constants for all cases: $\\mu = 10^{-3}\\,\\mathrm{Pa\\cdot s}$, $k_h = 1.1$, $\\alpha = 0.2$, $\\beta = 0.5$.\n\nProvide results for the following $4$ parameter sets $(R,\\rho_b,f_b,\\dot{\\gamma})$:\n- Case A: $R = 1.0\\times 10^{-5}\\,\\mathrm{m}$, $\\rho_b = 1.0\\times 10^{14}\\,\\mathrm{m^{-2}}$, $f_b = 5.0\\times 10^{-11}\\,\\mathrm{N}$, $\\dot{\\gamma} = 1.0\\times 10^{5}\\,\\mathrm{s^{-1}}$.\n- Case B: $R = 3.0\\times 10^{-5}\\,\\mathrm{m}$, $\\rho_b = 1.0\\times 10^{14}\\,\\mathrm{m^{-2}}$, $f_b = 5.0\\times 10^{-11}\\,\\mathrm{N}$, $\\dot{\\gamma} = 2.85599332\\times 10^{5}\\,\\mathrm{s^{-1}}$.\n- Case C: $R = 2.0\\times 10^{-5}\\,\\mathrm{m}$, $\\rho_b = 2.5\\times 10^{13}\\,\\mathrm{m^{-2}}$, $f_b = 5.0\\times 10^{-11}\\,\\mathrm{N}$, $\\dot{\\gamma} = 2.0\\times 10^{5}\\,\\mathrm{s^{-1}}$.\n- Case D: $R = 5.0\\times 10^{-5}\\,\\mathrm{m}$, $\\rho_b = 1.0\\times 10^{14}\\,\\mathrm{m^{-2}}$, $f_b = 1.0\\times 10^{-10}\\,\\mathrm{N}$, $\\dot{\\gamma} = 4.0\\times 10^{5}\\,\\mathrm{s^{-1}}$.\n\nFinal Output Format:\nYour program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets. Each element corresponds to one case, in the order A, B, C, D, and must itself be a two-element list of the form $[\\text{stable},\\dot{\\gamma}_\\star]$, where $\\text{stable}$ is a boolean and $\\dot{\\gamma}_\\star$ is the critical shear rate in $\\mathrm{s^{-1}}$ rounded to three significant figures. For example: [[True, 2.86e+05],...].", "solution": "The problem posed is a well-defined exercise in scaling analysis and mechanical stability, grounded in the principles of fluid dynamics and adhesion physics. It is scientifically sound, self-contained, and objective. We shall proceed with its formal resolution.\n\nThe task is to determine the stability of a spherical microcolony of radius $R$ against shear-driven dispersion. The stability is governed by a torque balance. Let $\\mathcal{T}_h$ be the applied hydrodynamic torque and $\\mathcal{T}_a$ be the total resisting adhesion torque. The stability criterion is $\\mathcal{T}_a \\ge \\mathcal{T}_h$.\n\nFirst, we formalize the hydrodynamic torque, $\\mathcal{T}_h$. It is stated to scale with a dimensionless prefactor $k_h$, the local shear stress $\\tau$, a characteristic area, and a characteristic lever arm. The aggregate's size is defined by its radius $R$. Thus, the characteristic area scales as $R^2$ and the characteristic lever arm scales as $R$. The wall shear stress is given as $\\tau = \\mu \\dot{\\gamma}$. Combining these, the scaling for the hydrodynamic torque is:\n$$ \\mathcal{T}_h = k_h \\tau (\\text{Area}) (\\text{Lever Arm}) \\propto k_h (\\mu \\dot{\\gamma}) R^2 R $$\n$$ \\mathcal{T}_h = k_h \\mu \\dot{\\gamma} R^3 $$\n\nNext, we formalize the resisting adhesion torque, $\\mathcal{T}_a$. This torque arises from the collective action of molecular bonds within a contact area $A_c$ at the base of the aggregate. The problem states that the number of bonds is $N_b = \\rho_b A_c$, where $\\rho_b$ is the areal density of bonds. The contact area is circular with a radius $R_c$ that scales with the aggregate radius, $R_c = \\alpha R$. Therefore, the contact area is $A_c = \\pi R_c^2 = \\pi (\\alpha R)^2 = \\pi \\alpha^2 R^2$. The number of bonds is:\n$$ N_b = \\rho_b (\\pi \\alpha^2 R^2) $$\nEach bond can sustain a maximum force $f_b$. Assuming all bonds act in concert to resist detachment, the total maximum resisting force $F_{a, \\text{max}}$ is the number of bonds multiplied by the force per bond:\n$$ F_{a, \\text{max}} = N_b f_b = (\\pi \\alpha^2 \\rho_b R^2) f_b $$\nThis force acts at a characteristic adhesion lever arm, which scales as $R_\\ell = \\beta R$. The resulting maximum adhesion torque is the product of this force and lever arm:\n$$ \\mathcal{T}_a = F_{a, \\text{max}} R_\\ell = (\\pi \\alpha^2 \\rho_b f_b R^2) (\\beta R) $$\n$$ \\mathcal{T}_a = \\pi \\alpha^2 \\beta \\rho_b f_b R^3 $$\n\nWe are now equipped to address Task 1. The dimensionless stability index, $S$, is defined as the ratio of the resisting torque to the applied torque:\n$$ S = \\frac{\\mathcal{T}_a}{\\mathcal{T}_h} = \\frac{\\pi \\alpha^2 \\beta \\rho_b f_b R^3}{k_h \\mu \\dot{\\gamma} R^3} $$\nA critical observation is the cancellation of the $R^3$ term. This implies that for a given set of material and fluid properties, the stability index $S$ is independent of the aggregate's size $R$. The expression for $S$ is therefore:\n$$ S = \\frac{\\pi \\alpha^2 \\beta \\rho_b f_b}{k_h \\mu \\dot{\\gamma}} $$\nThe critical shear rate, $\\dot{\\gamma}_\\star$, is defined as the shear rate at which the system is at the threshold of instability, i.e., $S=1$. We set $S=1$ in the expression above and solve for $\\dot{\\gamma} = \\dot{\\gamma}_\\star$:\n$$ 1 = \\frac{\\pi \\alpha^2 \\beta \\rho_b f_b}{k_h \\mu \\dot{\\gamma}_\\star} $$\nSolving for $\\dot{\\gamma}_\\star$ yields the symbolic expression:\n$$ \\dot{\\gamma}_\\star = \\frac{\\pi \\alpha^2 \\beta \\rho_b f_b}{k_h \\mu} $$\n\nFor Task 2, we design the algorithm. The stability criterion is $\\mathcal{T}_a \\ge \\mathcal{T}_h$, which is equivalent to $S = \\mathcal{T}_a / \\mathcal{T}_h \\ge 1$. Using the derived expressions:\n$$ \\frac{\\dot{\\gamma}_\\star}{\\dot{\\gamma}} \\ge 1 \\implies \\dot{\\gamma}_\\star \\ge \\dot{\\gamma} $$\nThus, an aggregate is stable if and only if the critical shear rate is greater than or equal to the applied shear rate. The algorithm is as follows:\n1.  Given the input parameters $(R, \\rho_b, f_b, \\dot{\\gamma})$ and the fixed constants $(\\mu, k_h, \\alpha, \\beta, \\pi)$. Note that $R$ is not needed for the calculation of $\\dot{\\gamma}_\\star$ but is provided in the problem statement, which is not an inconsistency but simply a feature of the scaling result.\n2.  Calculate the critical shear rate $\\dot{\\gamma}_\\star$ using the derived formula $\\dot{\\gamma}_\\star = \\frac{\\pi \\alpha^2 \\beta \\rho_b f_b}{k_h \\mu}$.\n3.  Compare $\\dot{\\gamma}_\\star$ with the applied shear rate $\\dot{\\gamma}$. The stability verdict is 'True' if $\\dot{\\gamma}_\\star \\ge \\dot{\\gamma}$, and 'False' otherwise.\n4.  Format the computed value of $\\dot{\\gamma}_\\star$ to three significant figures.\n5.  Return the boolean stability verdict and the formatted critical shear rate.\n\nThis completes the derivation and algorithmic design. The implementation will proceed based on this formal analysis for the specified test suite.", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes the stability and critical shear rate for bacterial microcolonies.\n    \"\"\"\n\n    # Fixed physical and geometric constants, in SI units.\n    mu = 1.0e-3  # Dynamic viscosity of the fluid (Pa*s)\n    k_h = 1.1    # Dimensionless hydrodynamic torque prefactor\n    alpha = 0.2  # Scaling factor for contact radius (R_c = alpha * R)\n    beta = 0.5   # Scaling factor for adhesion lever arm (R_l = beta * R)\n\n    # Test suite: (R, rho_b, f_b, gamma_dot)\n    # R: aggregate radius (m)\n    # rho_b: areal density of bonds (m^-2)\n    # f_b: maximum force per bond (N)\n    # gamma_dot: applied shear rate (s^-1)\n    test_cases = [\n        # Case A\n        (1.0e-5, 1.0e14, 5.0e-11, 1.0e5),\n        # Case B\n        (3.0e-5, 1.0e14, 5.0e-11, 2.85599332e5),\n        # Case C\n        (2.0e-5, 2.5e13, 5.0e-11, 2.0e5),\n        # Case D\n        (5.0e-5, 1.0e14, 1.0e-10, 4.0e5),\n    ]\n\n    results = []\n    \n    # Pre-compute the constant part of the critical shear rate formula\n    # gamma_star = (pi * alpha^2 * beta / (k_h * mu)) * rho_b * f_b\n    constant_factor = (np.pi * alpha**2 * beta) / (k_h * mu)\n\n    for case in test_cases:\n        # Unpack parameters for the current case. Note: R is not needed for\n        # the calculation of gamma_star or the stability verdict based on it.\n        _R, rho_b, f_b, gamma_dot = case\n\n        # 1. Calculate the critical shear rate (gamma_star)\n        # This is the shear rate at which the stability index S = 1.\n        gamma_star = constant_factor * rho_b * f_b\n        \n        # 2. Determine the stability verdict.\n        # The aggregate is stable if the applied shear rate is less than or\n        # equal to the critical shear rate (gamma_dot <= gamma_star).\n        # This is equivalent to the stability index S = gamma_star / gamma_dot >= 1.\n        is_stable = gamma_star >= gamma_dot\n\n        # 3. Format the critical shear rate to three significant figures.\n        gamma_star_formatted = \"{:.2e}\".format(gamma_star)\n\n        # Append the [stability, formatted_gamma_star] pair to the results list.\n        results.append([is_stable, gamma_star_formatted])\n    \n    # 4. Generate the final output string in the exact required format.\n    # e.g., [[True,2.86e+05],[True,2.86e+05],...]\n    output_strings = []\n    for res_pair in results:\n        # f-string formatting correctly converts boolean to 'True'/'False'\n        output_strings.append(f\"[{res_pair[0]},{res_pair[1]}]\")\n    \n    final_output = f\"[{','.join(output_strings)}]\"\n    print(final_output)\n\nsolve()\n```", "id": "2763871"}, {"introduction": "A defining feature of mature biofilms is their remarkable tolerance to antimicrobial agents, a property intrinsically linked to their dense, structured nature. This enhanced resistance often arises from the biofilm's ability to act as a diffusion barrier, preventing antibiotics from reaching cells deep within the community. This practice challenges you to model this phenomenon by combining a reaction-diffusion model for antibiotic penetration with a pharmacodynamic model for cell killing [@problem_id:2763767]. Through this process, you will quantify the overall survival of a biofilm population, gaining a deeper, quantitative understanding of how spatial structure governs function.", "problem": "You are designing a computational routine to predict the survival fraction of bacteria in a spatially structured biofilm under exposure to an antibiotic with first-order kill kinetics. Use the following foundational bases and definitions.\n\n- Local bacterial population dynamics under time-dependent antibiotic exposure obeys first-order kill kinetics: for a small subpopulation at depth coordinate $z$, the local population $N(t,z)$ satisfies $dN/dt = -k(S(z))\\,N$, where $S(z)$ is the local antibiotic concentration at depth $z$ and $k(S)$ is a rate constant that depends on $S$.\n- The antibiotic concentration profile $S(z)$ within a one-dimensional biofilm slab of thickness $L$ under steady-state diffusion with first-order degradation satisfies $0 = D\\,d^2S/dz^2 - k_{\\mathrm{deg}}\\,S$ with boundary conditions $S(0) = S_{\\mathrm{ext}}$ (fixed concentration at the biofilm-bulk interface) and $\\left.\\frac{dS}{dz}\\right|_{z=L} = 0$ (no-flux at the base).\n- The pharmacodynamic kill rate follows the saturating form $k(S) = k_{\\max}\\,\\frac{S}{K_S + S}$, where $k_{\\max}$ is the maximum kill rate and $K_S$ is a half-saturation concentration.\n- The initial cell density across the biofilm is $\\rho(z) \\ge 0$. The survival fraction after a constant exposure for time $T$ is the weighted integral of the local survival $e^{-k(S(z))\\,T}$:\n$$\nF(T) = \\frac{\\int_0^L \\rho(z)\\,e^{-k(S(z))\\,T}\\,dz}{\\int_0^L \\rho(z)\\,dz}.\n$$\n- Assume the cell density profile is $\\rho(z) = \\exp(-\\beta z)$, where $\\beta$ is a real constant (with units of inverse length). For $\\beta = 0$, this reduces to a uniform density.\n\nYour task is to write a complete program that:\n1. Derives or otherwise computes the concentration profile $S(z)$ consistent with the steady-state diffusion-degradation model and boundary conditions above.\n2. Computes $F(T)$ by numerically evaluating the integral in $z \\in [0,L]$ using the provided $k(S)$ and $\\rho(z)$.\n3. Applies this computation to the following five test cases.\n\nUse the following units consistently:\n- Distance $z$ and thickness $L$ in meters (m).\n- Time $T$ in seconds (s).\n- Diffusion coefficient $D$ in square meters per second (m²/s).\n- Degradation rate $k_{\\mathrm{deg}}$ and kill parameters $k_{\\max}$ in per second (s⁻¹).\n- Antibiotic concentrations $S$ and $K_S$ in micrograms per milliliter (µg/mL).\n- The survival fraction $F(T)$ is unitless and must be reported as a decimal number.\n\nTest suite (each line is a parameter tuple $(L, D, k_{\\mathrm{deg}}, S_{\\mathrm{ext}}, k_{\\max}, K_S, T, \\beta)$):\n- Case 1 (happy path): (L = 1.0 x 10⁻⁴ m, D = 5.0 x 10⁻¹⁰ m²/s, k_deg = 1.0 x 10⁻³ s⁻¹, S_ext = 8.0 µg/mL, k_max = 1.2 x 10⁻³ s⁻¹, K_S = 1.5 µg/mL, T = 7200 s, β = 1.0 x 10⁴ m⁻¹).\n- Case 2 (boundary: very thin biofilm): (L = 1.0 x 10⁻⁶ m, D = 5.0 x 10⁻¹⁰ m²/s, k_deg = 1.0 x 10⁻³ s⁻¹, S_ext = 8.0 µg/mL, k_max = 1.2 x 10⁻³ s⁻¹, K_S = 1.5 µg/mL, T = 7200 s, β = 0.0 m⁻¹).\n- Case 3 (boundary: no degradation, uniform $S$): (L = 2.0 x 10⁻⁴ m, D = 4.0 x 10⁻¹⁰ m²/s, k_deg = 0.0 s⁻¹, S_ext = 6.0 µg/mL, k_max = 2.0 x 10⁻³ s⁻¹, K_S = 2.0 µg/mL, T = 3600 s, β = 5.0 x 10³ m⁻¹).\n- Case 4 (edge: strong degradation and deep-weighted cells): (L = 2.0 x 10⁻⁴ m, D = 3.0 x 10⁻¹⁰ m²/s, k_deg = 5.0 x 10⁻² s⁻¹, S_ext = 10.0 µg/mL, k_max = 1.5 x 10⁻³ s⁻¹, K_S = 1.0 µg/mL, T = 5400 s, β = -5.0 x 10³ m⁻¹).\n- Case 5 (edge: low antibiotic exposure): (L = 1.5 x 10⁻⁴ m, D = 6.0 x 10⁻¹⁰ m²/s, k_deg = 2.0 x 10⁻³ s⁻¹, S_ext = 0.1 µg/mL, k_max = 2.0 x 10⁻³ s⁻¹, K_S = 5.0 µg/mL, T = 1800 s, β = 0.0 m⁻¹).\n\nYour program should produce a single line of output containing the five survival fractions as a comma-separated list enclosed in square brackets, in the order of the cases above (for example, \"[f1,f2,f3,f4,f5]\"). Each $f_i$ must be a floating-point decimal number (unitless).", "solution": "The problem statement has been validated and is deemed valid. It is scientifically grounded, well-posed, objective, and provides a complete, consistent set of data and definitions for a solvable problem in computational systems biology. No flaws were identified.\n\nThe solution proceeds in two stages. First, an analytical expression for the steady-state antibiotic concentration profile $S(z)$ is derived. Second, this expression is used to formulate the survival fraction $F(T)$ as an integral, which is then computed numerically.\n\nThe antibiotic concentration profile $S(z)$ within the biofilm of thickness $L$ is governed by the steady-state reaction-diffusion equation:\n$$D \\frac{d^2S}{dz^2} - k_{\\mathrm{deg}}S = 0$$\nwith boundary conditions $S(0) = S_{\\mathrm{ext}}$ and $\\left.\\frac{dS}{dz}\\right|_{z=L} = 0$. The coordinate $z=0$ represents the biofilm-bulk interface, and $z=L$ represents the impermeable base of the biofilm.\n\nWe analyze two cases for the degradation rate constant $k_{\\mathrm{deg}}$.\n\nCase 1: $k_{\\mathrm{deg}} > 0$.\nThe equation can be rewritten as $\\frac{d^2S}{dz^2} - \\lambda^2 S = 0$, where $\\lambda = \\sqrt{k_{\\mathrm{deg}}/D}$ is the inverse characteristic length of antibiotic penetration. The general solution to this ordinary differential equation is:\n$$S(z) = C_1 \\cosh(\\lambda z) + C_2 \\sinh(\\lambda z)$$\nThe constants $C_1$ and $C_2$ are determined by the boundary conditions.\nApplying the first boundary condition at $z=0$:\n$$S(0) = S_{\\mathrm{ext}} = C_1 \\cosh(0) + C_2 \\sinh(0) = C_1$$\nThus, $C_1 = S_{\\mathrm{ext}}$. The solution becomes $S(z) = S_{\\mathrm{ext}} \\cosh(\\lambda z) + C_2 \\sinh(\\lambda z)$.\nTo apply the second boundary condition, we first find the derivative:\n$$\\frac{dS}{dz} = \\lambda S_{\\mathrm{ext}} \\sinh(\\lambda z) + \\lambda C_2 \\cosh(\\lambda z)$$\nApplying the no-flux condition at $z=L$:\n$$\\left.\\frac{dS}{dz}\\right|_{z=L} = \\lambda S_{\\mathrm{ext}} \\sinh(\\lambda L) + \\lambda C_2 \\cosh(\\lambda L) = 0$$\nSolving for $C_2$ (assuming $\\lambda \\ne 0$):\n$$C_2 = -S_{\\mathrm{ext}} \\frac{\\sinh(\\lambda L)}{\\cosh(\\lambda L)} = -S_{\\mathrm{ext}} \\tanh(\\lambda L)$$\nSubstituting $C_1$ and $C_2$ back into the expression for $S(z)$:\n$$S(z) = S_{\\mathrm{ext}} \\cosh(\\lambda z) - S_{\\mathrm{ext}} \\tanh(\\lambda L) \\sinh(\\lambda z)$$\nUsing the identity $\\cosh(A-B) = \\cosh(A)\\cosh(B) - \\sinh(A)\\sinh(B)$, we can simplify this expression:\n$$S(z) = S_{\\mathrm{ext}} \\frac{\\cosh(\\lambda L)\\cosh(\\lambda z) - \\sinh(\\lambda L)\\sinh(\\lambda z)}{\\cosh(\\lambda L)} = S_{\\mathrm{ext}} \\frac{\\cosh(\\lambda(L-z))}{\\cosh(\\lambda L)}$$\nThis is the analytical solution for the concentration profile when antibiotic degradation occurs.\n\nCase 2: $k_{\\mathrm{deg}} = 0$.\nThe governing equation simplifies to $\\frac{d^2S}{dz^2} = 0$. Integrating twice yields the linear profile $S(z) = C_1 z + C_2$.\nApplying the boundary conditions:\n$$S(0) = S_{\\mathrm{ext}} \\implies C_2 = S_{\\mathrm{ext}}$$\n$$\\left.\\frac{dS}{dz}\\right|_{z=L} = C_1 = 0$$\nTherefore, for the case of no degradation, the concentration is uniform throughout the biofilm:\n$$S(z) = S_{\\mathrm{ext}}$$\n\nWith the concentration profile $S(z)$ determined, we can compute the survival fraction $F(T)$. The formula is given as the ratio of two integrals:\n$$F(T) = \\frac{\\int_0^L \\rho(z)\\,e^{-k(S(z))\\,T}\\,dz}{\\int_0^L \\rho(z)\\,dz}$$\nwhere the initial cell density is $\\rho(z) = \\exp(-\\beta z)$ and the kill rate is $k(S) = k_{\\max}\\,\\frac{S}{K_S + S}$.\n\nThe denominator, representing the total initial cell mass, can be calculated analytically:\n$$I_{\\text{den}} = \\int_0^L \\exp(-\\beta z) dz$$\nIf $\\beta \\neq 0$:\n$$I_{\\text{den}} = \\left[-\\frac{1}{\\beta}\\exp(-\\beta z)\\right]_0^L = \\frac{1 - \\exp(-\\beta L)}{\\beta}$$\nIf $\\beta = 0$, the density $\\rho(z)=1$ is uniform, and the integral is simply:\n$$I_{\\text{den}} = \\int_0^L 1 dz = L$$\n\nThe numerator integral is:\n$$I_{\\text{num}} = \\int_0^L \\exp(-\\beta z) \\exp\\left(-T \\cdot k_{\\max} \\frac{S(z)}{K_S + S(z)}\\right) dz$$\nwhere $S(z)$ is the profile derived earlier. This integral does not generally have a closed-form analytical solution due to the complex form of the integrand. Therefore, it will be computed using numerical quadrature.\n\nThe complete algorithm for each test case is as follows:\n1.  Given the parameters $(L, D, k_{\\mathrm{deg}}, S_{\\mathrm{ext}}, k_{\\max}, K_S, T, \\beta)$, determine the functional form of $S(z)$ based on whether $k_{\\mathrm{deg}}$ is zero or positive.\n2.  Calculate the denominator integral $I_{\\text{den}}$ analytically, handling the cases $\\beta=0$ and $\\beta \\neq 0$ separately.\n3.  Define the integrand for the numerator, $f_{\\text{num}}(z) = \\exp(-\\beta z) \\exp(-T k(S(z)))$.\n4.  Numerically evaluate the numerator integral $I_{\\text{num}} = \\int_0^L f_{\\text{num}}(z) dz$ using a standard numerical integration routine like `scipy.integrate.quad`.\n5.  Compute the survival fraction $F(T) = I_{\\text{num}} / I_{\\text{den}}$.\n\nThis procedure is implemented for each provided set of parameters to generate the final results.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.integrate import quad\n\ndef solve():\n    \"\"\"\n    Main function to run the biofilm survival simulation for all test cases.\n    \"\"\"\n    # Test suite (L, D, k_deg, S_ext, k_max, K_S, T, beta)\n    test_cases = [\n        # Case 1 (happy path)\n        (1.0e-4, 5.0e-10, 1.0e-3, 8.0, 1.2e-3, 1.5, 7200, 1.0e4),\n        # Case 2 (boundary: very thin biofilm, uniform density)\n        (1.0e-6, 5.0e-10, 1.0e-3, 8.0, 1.2e-3, 1.5, 7200, 0.0),\n        # Case 3 (boundary: no degradation, uniform S)\n        (2.0e-4, 4.0e-10, 0.0, 6.0, 2.0e-3, 2.0, 3600, 5.0e3),\n        # Case 4 (edge: strong degradation and deep-weighted cells)\n        (2.0e-4, 3.0e-10, 5.0e-2, 10.0, 1.5e-3, 1.0, 5400, -5.0e3),\n        # Case 5 (edge: low antibiotic exposure)\n        (1.5e-4, 6.0e-10, 2.0e-3, 0.1, 2.0e-3, 5.0, 1800, 0.0),\n    ]\n\n    results = []\n    for params in test_cases:\n        survival_fraction = calculate_survival_fraction(*params)\n        results.append(f\"{survival_fraction:.8f}\")\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\ndef calculate_survival_fraction(L, D, k_deg, S_ext, k_max, K_S, T, beta):\n    \"\"\"\n    Calculates the bacterial survival fraction in a biofilm.\n\n    Args:\n        L (float): Biofilm thickness (m).\n        D (float): Diffusion coefficient (m^2/s).\n        k_deg (float): Antibiotic degradation rate (s^-1).\n        S_ext (float): External antibiotic concentration (μg/mL).\n        k_max (float): Maximum kill rate (s^-1).\n        K_S (float): Half-saturation concentration for killing (μg/mL).\n        T (float): Exposure time (s).\n        beta (float): Parameter for cell density profile (m^-1).\n\n    Returns:\n        float: The unitless survival fraction F(T).\n    \"\"\"\n\n    # 1. Define the antibiotic concentration profile function S(z)\n    if k_deg > 0:\n        # Case with antibiotic degradation\n        lam = np.sqrt(k_deg / D)\n        cosh_lam_L = np.cosh(lam * L)\n        def S(z):\n            return S_ext * np.cosh(lam * (L - z)) / cosh_lam_L\n    else:  # k_deg == 0\n        # Case with no degradation, concentration is uniform\n        def S(z):\n            # The function must accept z, even if unused, for quad compatibility.\n            return S_ext * np.ones_like(z) if isinstance(z, np.ndarray) else S_ext\n\n    # 2. Define the pharmacodynamic kill rate function k(S)\n    def k(s_val):\n        return k_max * s_val / (K_S + s_val)\n\n    # 3. Define the integrand for the numerator of F(T)\n    def numerator_integrand(z):\n        s_z = S(z)\n        kill_rate = k(s_z)\n        # Factor for cell density profile\n        density_factor = np.exp(-beta * z)\n        # Factor for cell survival at depth z\n        survival_factor = np.exp(-kill_rate * T)\n        return density_factor * survival_factor\n\n    # 4. Compute the numerator integral I_num numerically\n    # We use quad from scipy for robust numerical integration.\n    I_num, _ = quad(numerator_integrand, 0, L, epsabs=1.49e-12, epsrel=1.49e-12)\n\n    # 5. Compute the denominator integral I_den analytically\n    # This represents the total initial number of cells, weighted.\n    if beta == 0:\n        # Uniform density profile\n        I_den = L\n    else:\n        # Exponential density profile\n        I_den = (1.0 - np.exp(-beta * L)) / beta\n    \n    # Check for non-physical cases like L=0 leading to I_den=0\n    if I_den == 0:\n        # For a biofilm of zero thickness, the concept of survival fraction\n        # is ill-defined. The problem constraints (L>0) prevent this.\n        # If it were to happen, the total number of cells is zero.\n        return 0.0\n\n    # 6. Calculate the final survival fraction\n    survival_fraction = I_num / I_den\n    return survival_fraction\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "2763767"}, {"introduction": "Moving from analyzing natural biofilm properties to actively programming their behavior is a central goal of synthetic biology. A powerful method for control is entrainment, where an external periodic signal synchronizes the behavior of an engineered cellular process. In this exercise, you will explore how a synthetic gene oscillator within a biofilm can be controlled by periodic light stimulation [@problem_id:2763789]. You will apply the theory of phase reduction, a cornerstone of nonlinear dynamics, to model this synchronization and determine the conditions under which the oscillator 'locks' onto the external signal, a concept captured by the 'Arnold tongue'.", "problem": "You are modeling a spatially homogeneous patch of a bacterial biofilm hosting a synthetic gene expression oscillator whose dynamics can be approximated by a stable limit cycle in the absence of external inputs. The biofilm is illuminated by an optogenetic light program, modeled as a periodic stimulus with a prescribed angular frequency and amplitude. You will analyze entrainment of the oscillator by the periodic light and determine whether each tested condition lies within the one-to-one Arnold tongue in frequency-amplitude space.\n\nFundamental bases to be used include: the Central Dogma of molecular biology (deoxyribonucleic acid to ribonucleic acid to protein), the existence of a stable limit cycle for a sustained biochemical oscillator, the concept of a phase variable for limit cycle dynamics, and first-order phase reduction for weak periodic forcing using a phase response curve. Assume weak forcing and a Type I phase response curve (PRC) dominated by its first Fourier harmonic, such that the reduced forcing term is sinusoidal in the phase difference at leading order. Angles must be in radians, time in hours, and angular frequencies in radians per hour. Your program must numerically integrate a reduced, first-order, scalar phase model derived from these bases to detect one-to-one entrainment under periodic forcing. Specifically, implement a time-domain simulation that evolves the oscillator phase under periodic forcing, discards an initial transient, and then computes the long-time average angular frequency of the oscillator to test if it matches the forcing angular frequency within a given numerical tolerance.\n\nMathematically, you must proceed from the assumption of a stable limit cycle oscillator with natural angular frequency $\\omega_0$ and a weak periodic input with forcing angular frequency $\\Omega$ and amplitude $\\varepsilon$. Use first-order phase reduction with a Type I phase response curve approximated by its leading sinusoidal harmonic to obtain a scalar phase evolution law driven by the periodic input. Then integrate this scalar phase model in continuous time using a fixed time step $\\Delta t$. After a transient of duration $T_{\\mathrm{trans}}$, estimate the long-time average angular frequency of the oscillator by a finite difference quotient over a window of length $T_{\\mathrm{avg}}$, and declare one-to-one entrainment if the absolute difference between the estimated average angular frequency and the forcing angular frequency is less than or equal to a specified tolerance $\\delta$. You must use angles in radians and report a boolean for each test case indicating whether entrainment is detected.\n\nNumerical requirements:\n- Use a total simulation time $T_{\\mathrm{total}} = 200$ hours, with a fixed time step $\\Delta t = 0.005$ hours.\n- Use a transient duration $T_{\\mathrm{trans}} = 100$ hours and an averaging window of length $T_{\\mathrm{avg}} = T_{\\mathrm{total}} - T_{\\mathrm{trans}} = 100$ hours.\n- Use a locking tolerance $\\delta = 0.01$ radians per hour for determining whether the oscillator is entrained in a one-to-one manner to the input.\n- Initialize the oscillator phase at $\\theta(0) = 0$ radians.\n\nAngle unit: radians. Time unit: hours. Angular frequencies must be in radians per hour.\n\nTest suite:\nFor each case, parameters are ordered as the tuple $(\\omega_0, \\Omega, \\varepsilon)$.\n\n- Case 1: $\\omega_0 = 6.283185307179586$, $\\Omega = 6.283185307179586$, $\\varepsilon = 0.1$.\n- Case 2: $\\omega_0 = 6.283185307179586$, $\\Omega = 5.5$, $\\varepsilon = 0.5$.\n- Case 3: $\\omega_0 = 6.283185307179586$, $\\Omega = 5.9$, $\\varepsilon = 0.5$.\n- Case 4: $\\omega_0 = 6.283185307179586$, $\\Omega = 6.073185307179586$, $\\varepsilon = 0.2$.\n- Case 5: $\\omega_0 = 6.283185307179586$, $\\Omega = 7.0$, $\\varepsilon = 1.0$.\n- Case 6: $\\omega_0 = 6.283185307179586$, $\\Omega = 6.0$, $\\varepsilon = 0.0$.\n\nYour program must:\n- Implement the reduced scalar phase model derived from the fundamental bases described above.\n- For each test case, simulate the model, compute the long-time average angular frequency over the averaging window, compare it to the forcing angular frequency with tolerance $\\delta$, and record a boolean indicating one-to-one entrainment.\n- Produce a single line of output containing the results as a comma-separated list enclosed in square brackets, in the order of the cases above. For example, an output of the form [True,False,True] is acceptable.\n\nThe required final output format is exactly one line:\n- A single Python list literal containing 6 booleans corresponding to the 6 cases, e.g., [True,False,True,False,True,False]. No extra whitespace or text is permitted.", "solution": "We consider a synthetic gene expression oscillator embedded in a bacterial biofilm. In the absence of external input, assume the oscillator converges to a stable limit cycle with angular frequency $\\,\\omega_0\\,$. Under weak, periodic optogenetic forcing, the system can be reduced to a scalar phase description at first order using phase reduction. The fundamental basis is that near a stable limit cycle, the state of the oscillator can be parameterized by a phase $\\,\\theta \\in [0,2\\pi)\\,$ whose dynamics obey $\\,\\dot{\\theta} = \\omega_0\\,$ when unforced. Under a weak input $\\,u(t)\\,$, the leading-order effect on the phase is $\\,\\dot{\\theta} = \\omega_0 + \\varepsilon Z(\\theta) u(t)\\,$, where $\\,Z(\\theta)\\,$ is the infinitesimal phase response curve (PRC), $\\,\\varepsilon\\,$ scales the input strength, and $\\,u(t)\\,$ is the time-varying stimulus. This is a well-tested and widely used formula in the theory of weakly forced oscillators derived from linearization along isochrons.\n\nAssume a Type I PRC dominated by its fundamental Fourier component, so that $\\,Z(\\theta)\\,$ can be approximated by a sinusoid at leading order. Let the light stimulus be periodic with angular frequency $\\,\\Omega\\,$; for definiteness, take $\\,u(t) = \\sin(\\Omega t)\\,$ with amplitude absorbed into $\\,\\varepsilon\\,$. With the PRC approximation and by averaging or harmonic balance at leading order, the phase dynamics can be reduced to a phase-difference form where only the relative phase between the oscillator and the drive matters. A standard and well-supported reduced model in this setting is\n$$\n\\dot{\\theta} = \\omega_0 + \\varepsilon \\,\\sin(\\Omega t - \\theta),\n$$\nwhich is obtained by taking the first harmonic of the interaction function between the PRC and the sinusoidal input. Define the phase difference $\\,\\phi = \\theta - \\Omega t\\,$. Differentiating gives\n$$\n\\dot{\\phi} = \\dot{\\theta} - \\Omega = \\omega_0 - \\Omega - \\varepsilon \\sin(\\phi) = \\Delta - \\varepsilon \\sin(\\phi),\n$$\nwhere $\\,\\Delta = \\omega_0 - \\Omega\\,$ is the detuning. Fixed points of $\\,\\dot{\\phi}\\,$ satisfy $\\,0 = \\Delta - \\varepsilon \\sin(\\phi^\\ast)\\,$, which exist if and only if $\\,|\\Delta| \\le \\varepsilon\\,$. When a fixed point exists and is stable, $\\,\\phi(t)\\,$ converges to $\\,\\phi^\\ast\\,$, and the oscillator is one-to-one phase-locked (entrained), with long-time average angular frequency equal to the drive, that is $\\,\\langle \\dot{\\theta} \\rangle = \\Omega\\,$. The set $\\,\\{(\\Omega,\\varepsilon): |\\omega_0 - \\Omega| \\le \\varepsilon\\}\\,$ defines a classical one-to-one Arnold tongue.\n\nAlgorithmic design:\n- We simulate the reduced scalar phase model $\\,\\dot{\\theta} = \\omega_0 + \\varepsilon \\sin(\\Omega t - \\theta)\\,$ in continuous time to remain faithful to the first-principles derivation without invoking the explicit fixed-point criterion as a shortcut. We integrate with a fixed time step $\\,\\Delta t\\,$ using a fourth-order Runge–Kutta scheme for accuracy.\n- Numerical parameters: total simulation time $\\,T_{\\mathrm{total}} = 200\\,$ hours, time step $\\,\\Delta t = 0.005\\,$ hours, transient duration $\\,T_{\\mathrm{trans}} = 100\\,$ hours, averaging window $\\,T_{\\mathrm{avg}} = 100\\,$ hours. Initial phase $\\,\\theta(0) = 0\\,$ radians.\n- For each test case with parameters $\\,(\\omega_0,\\Omega,\\varepsilon)\\,$, we integrate $\\,\\theta(t)\\,$ over $\\,t \\in [0,T_{\\mathrm{total}}]\\,$. To estimate the long-time average angular frequency, we compute\n$$\n\\hat{\\omega} = \\frac{\\theta(T_{\\mathrm{total}}) - \\theta(T_{\\mathrm{trans}})}{T_{\\mathrm{total}} - T_{\\mathrm{trans}}}.\n$$\n- We declare entrainment if $\\,|\\hat{\\omega} - \\Omega| \\le \\delta\\,$ with $\\,\\delta = 0.01\\,$ radians per hour. This condition detects one-to-one frequency locking.\n- This approach inherently respects the requirement that angles are in radians and times are in hours.\n\nExpected qualitative outcomes for the test suite:\n- Case $\\,1\\,$: Zero detuning with nonzero forcing, entrained (boolean True).\n- Case $\\,2\\,$: Detuning magnitude approximately $\\,0.783185\\,$ greater than amplitude $\\,0.5\\,$, outside the Arnold tongue, not entrained (boolean False).\n- Case $\\,3\\,$: Detuning magnitude approximately $\\,0.383185\\,$ less than amplitude $\\,0.5\\,$, inside the Arnold tongue, entrained (boolean True).\n- Case $\\,4\\,$: Detuning magnitude approximately $\\,0.21\\,$ greater than amplitude $\\,0.2\\,$, outside the Arnold tongue, not entrained (boolean False).\n- Case $\\,5\\,$: Detuning magnitude approximately $\\,0.716815\\,$ less than amplitude $\\,1.0\\,$, inside the Arnold tongue, entrained (boolean True).\n- Case $\\,6\\,$: Zero forcing with nonzero detuning, no entrainment (boolean False).\n\nThe final program implements the integration and produces a single-line list of booleans in the specified order.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef rk4_step(theta, t, dt, omega0, Omega, eps):\n    # dtheta/dt = omega0 + eps * sin(Omega * t - theta)\n    def f(th, time):\n        return omega0 + eps * np.sin(Omega * time - th)\n    k1 = f(theta, t)\n    k2 = f(theta + 0.5 * dt * k1, t + 0.5 * dt)\n    k3 = f(theta + 0.5 * dt * k2, t + 0.5 * dt)\n    k4 = f(theta + dt * k3, t + dt)\n    return theta + (dt / 6.0) * (k1 + 2*k2 + 2*k3 + k4)\n\ndef simulate_and_check_lock(omega0, Omega, eps,\n                            T_total=200.0, dt=0.005,\n                            T_trans=100.0, tol=0.01):\n    steps = int(np.round(T_total / dt))\n    trans_steps = int(np.round(T_trans / dt))\n    t = 0.0\n    theta = 0.0\n    # Integrate\n    for i in range(steps):\n        theta = rk4_step(theta, t, dt, omega0, Omega, eps)\n        t += dt\n        # Keep theta from overflowing to maintain numerical stability\n        # but preserve monotonicity (unwrap); no modulo.\n        # No special action needed; theta can grow.\n        pass\n    # Re-simulate to get theta at T_trans and T_total without storing the entire trajectory\n    t = 0.0\n    theta_trans = 0.0\n    for i in range(trans_steps):\n        theta_trans = rk4_step(theta_trans, t, dt, omega0, Omega, eps)\n        t += dt\n    # theta at T_total already computed as 'theta'\n    avg_omega = (theta - theta_trans) / (T_total - T_trans)\n    return abs(avg_omega - Omega) = tol\n\ndef solve():\n    # Define the test cases from the problem statement.\n    # Each case: (omega0, Omega, epsilon)\n    test_cases = [\n        (6.283185307179586, 6.283185307179586, 0.1),   # Case 1\n        (6.283185307179586, 5.5,                0.5),  # Case 2\n        (6.283185307179586, 5.9,                0.5),  # Case 3\n        (6.283185307179586, 6.073185307179586,  0.2),  # Case 4\n        (6.283185307179586, 7.0,                1.0),  # Case 5\n        (6.283185307179586, 6.0,                0.0),  # Case 6\n    ]\n\n    # Numerical parameters (must match the problem statement)\n    T_total = 200.0\n    dt = 0.005\n    T_trans = 100.0\n    tol = 0.01\n\n    results = []\n    for omega0, Omega, eps in test_cases:\n        locked = simulate_and_check_lock(omega0, Omega, eps,\n                                         T_total=T_total, dt=dt,\n                                         T_trans=T_trans, tol=tol)\n        results.append(locked)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2763789"}]}