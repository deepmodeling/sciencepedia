{"hands_on_practices": [{"introduction": "The journey of creating a recoded organism begins with a quantitative assessment of the required genomic edits. Before embarking on a large-scale synthesis or editing project, it is crucial to estimate the number of changes and their potential impact on baseline genomic properties. This first practice problem [@problem_id:2768341] provides a foundational exercise in translating high-level design goals into concrete numbers, asking you to calculate the total number of synonymous codon replacements and the resulting shift in the genome's guanine-cytosine (GC) content.", "problem": "A central design in constructing recoded organisms with virus resistance is to eliminate a specified subset of codons from the genome while preserving the encoded proteins. This leverages redundancy in the genetic code: multiple codons can encode the same amino acid or a translation termination signal. Consider a coding genome with a total of $N_{\\mathrm{tot}}$ codons and codon frequencies $f_i$ (fraction of all codons that are codon $i$). Suppose the recoding objective is to eliminate the set $S=\\{\\text{TCG},\\ \\text{TCA},\\ \\text{TAG}\\}$ across all genes by replacing each codon in $S$ with a synonymous alternative according to the mapping $\\text{TCG}\\rightarrow\\text{AGC}$, $\\text{TCA}\\rightarrow\\text{AGT}$, and $\\text{TAG}\\rightarrow\\text{TAA}$. Assume that these replacements preserve amino acid sequence and translation termination, as guaranteed by the standard genetic code.\n\nWork from first principles using the Central Dogma of molecular biology (Deoxyribonucleic Acid (DNA) to Ribonucleic Acid (RNA) to protein), the definition of codon usage frequency, and the definition of guanine-cytosine (GC) content. The GC content of a DNA sequence is the fraction of nucleotides that are either guanine (G) or cytosine (C). Each codon contributes three nucleotides to the coding DNA length and a corresponding number of G or C nucleotides to the GC count.\n\nYou are given:\n- The total number of codons in the coding genome is $N_{\\mathrm{tot}}=1.2\\times 10^{6}$.\n- The codon frequencies for the codons to be eliminated are $f_{\\mathrm{TCG}}=\\frac{1}{20}$, $f_{\\mathrm{TCA}}=\\frac{1}{30}$, and $f_{\\mathrm{TAG}}=\\frac{1}{600}$. The remaining codons collectively have frequency $1-f_{\\mathrm{TCG}}-f_{\\mathrm{TCA}}-f_{\\mathrm{TAG}}$ and are left unchanged by the recoding.\n- Use only the fact that the GC contribution of a codon is the count of its G and C nucleotides. For example, the GC contributions are: $\\text{TCG}\\mapsto 2$, $\\text{AGC}\\mapsto 2$, $\\text{TCA}\\mapsto 1$, $\\text{AGT}\\mapsto 1$, $\\text{TAG}\\mapsto 1$, $\\text{TAA}\\mapsto 0$.\n\nTasks:\n1. Derive from definitions an expression for the total number of required synonymous replacements to eliminate $S$ in terms of $N_{\\mathrm{tot}}$ and $f_i$, and then evaluate it numerically.\n2. Define the fractional GC content change of the coding genome as $f_{\\mathrm{GC}}^{\\mathrm{after}}-f_{\\mathrm{GC}}^{\\mathrm{before}}$, where $f_{\\mathrm{GC}}$ is the GC fraction of all coding nucleotides. Derive a general expression for this change induced by the specified replacements, and then evaluate it numerically for the given data. Express the GC change as a fraction (not a percentage), and give exact values (no rounding).\n\nReport your final answer as a two-component row vector $\\begin{pmatrix}\\text{total replacements} & \\text{GC fraction change}\\end{pmatrix}$.", "solution": "The problem as stated is scientifically grounded, internally consistent, and well-posed. All necessary data and definitions are provided for a unique solution. We will proceed with the derivation as requested.\n\nThe analysis is divided into two parts, corresponding to the two tasks presented in the problem.\n\n**Part 1: Total Number of Synonymous Replacements**\n\nThe problem requires the elimination of all codons belonging to the set $S=\\{\\text{TCG}, \\text{TCA}, \\text{TAG}\\}$. The total number of replacements, which we denote as $N_{\\mathrm{repl}}$, is the sum of the occurrences of each of these three codons in the entire coding genome.\n\nFrom first principles, the frequency of a given codon $i$, denoted $f_i$, is defined as the ratio of the number of occurrences of that codon, $N_i$, to the total number of codons in the genome, $N_{\\mathrm{tot}}$.\n$$f_i = \\frac{N_i}{N_{\\mathrm{tot}}}$$\nTherefore, the number of occurrences of codon $i$ can be expressed as:\n$$N_i = f_i N_{\\mathrm{tot}}$$\nThe total number of replacements is the sum of the counts of each codon in the set $S$:\n$$N_{\\mathrm{repl}} = N_{\\mathrm{TCG}} + N_{\\mathrm{TCA}} + N_{\\mathrm{TAG}}$$\nSubstituting the expression for $N_i$ for each codon, we derive the general expression for the total number of replacements:\n$$N_{\\mathrm{repl}} = (f_{\\mathrm{TCG}} + f_{\\mathrm{TCA}} + f_{\\mathrm{TAG}}) N_{\\mathrm{tot}}$$\nWe are given the following values:\n- Total number of codons: $N_{\\mathrm{tot}} = 1.2 \\times 10^{6}$\n- Codon frequencies: $f_{\\mathrm{TCG}} = \\frac{1}{20}$, $f_{\\mathrm{TCA}} = \\frac{1}{30}$, and $f_{\\mathrm{TAG}} = \\frac{1}{600}$.\n\nFirst, we compute the sum of the frequencies of the codons to be eliminated:\n$$\\sum_{i \\in S} f_i = f_{\\mathrm{TCG}} + f_{\\mathrm{TCA}} + f_{\\mathrm{TAG}} = \\frac{1}{20} + \\frac{1}{30} + \\frac{1}{600}$$\nTo sum these fractions, we find a common denominator, which is $600$:\n$$\\sum_{i \\in S} f_i = \\frac{30}{600} + \\frac{20}{600} + \\frac{1}{600} = \\frac{30+20+1}{600} = \\frac{51}{600}$$\nNow, we calculate the total number of replacements:\n$$N_{\\mathrm{repl}} = \\left(\\frac{51}{600}\\right) \\times (1.2 \\times 10^{6}) = \\frac{51}{6 \\times 10^{2}} \\times (12 \\times 10^{5}) = 51 \\times \\left(\\frac{12}{6}\\right) \\times 10^{5-2} = 51 \\times 2 \\times 10^{3} = 102 \\times 10^{3} = 102000$$\nExpressing this in standard scientific notation as required:\n$$N_{\\mathrm{repl}} = 1.02 \\times 10^{5}$$\n\n**Part 2: Fractional Guanine-Cytosine (GC) Content Change**\n\nThe fractional GC content, $f_{\\mathrm{GC}}$, is defined as the total number of guanine (G) or cytosine (C) nucleotides divided by the total number of nucleotides in the sequence.\n\nA coding genome with $N_{\\mathrm{tot}}$ codons has a total of $3N_{\\mathrm{tot}}$ nucleotides, as each codon consists of $3$ nucleotides. The total count of G and C nucleotides, $N_{\\mathrm{GC}}$, is the sum of the GC contributions from each codon across the genome. Let $\\text{GC}_i$ be the number of G or C nucleotides in codon $i$. The total GC count is:\n$$N_{\\mathrm{GC}} = \\sum_{i} N_i \\times \\text{GC}_i = \\sum_{i} (f_i N_{\\mathrm{tot}}) \\times \\text{GC}_i = N_{\\mathrm{tot}} \\sum_{i} f_i \\text{GC}_i$$\nThe fractional GC content is then:\n$$f_{\\mathrm{GC}} = \\frac{N_{\\mathrm{GC}}}{3N_{\\mathrm{tot}}} = \\frac{N_{\\mathrm{tot}} \\sum_{i} f_i \\text{GC}_i}{3N_{\\mathrm{tot}}} = \\frac{1}{3} \\sum_{i} f_i \\text{GC}_i$$\nThe change in fractional GC content, $\\Delta f_{\\mathrm{GC}}$, is the difference between the content after recoding, $f_{\\mathrm{GC}}^{\\mathrm{after}}$, and before recoding, $f_{\\mathrm{GC}}^{\\mathrm{before}}$.\n$$\\Delta f_{\\mathrm{GC}} = f_{\\mathrm{GC}}^{\\mathrm{after}} - f_{\\mathrm{GC}}^{\\mathrm{before}} = \\frac{1}{3} \\sum_{i} f_i^{\\mathrm{after}} \\text{GC}_i - \\frac{1}{3} \\sum_{i} f_i^{\\mathrm{before}} \\text{GC}_i = \\frac{1}{3} \\sum_{i} (f_i^{\\mathrm{after}} - f_i^{\\mathrm{before}}) \\text{GC}_i$$\nThe recoding process only changes the frequencies of the codons in the set $S$ and their synonymous replacements. Let $i \\in S$ be a codon that is replaced by a synonymous codon $\\text{syn}(i)$. The frequency of codon $i$ becomes zero ($f_i^{\\mathrm{after}} = 0$), and its original frequency ($f_i^{\\mathrm{before}}$) is added to the frequency of its replacement codon $\\text{syn}(i)$. For any codon $j$ not involved in a replacement, $f_j^{\\mathrm{after}} = f_j^{\\mathrm{before}}$.\n\nThe sum can be simplified by considering only codons whose frequencies change:\n$$3\\Delta f_{\\mathrm{GC}} = \\sum_{i \\in S} \\left[ (f_i^{\\mathrm{after}} - f_i^{\\mathrm{before}})\\text{GC}_i + (f_{\\text{syn}(i)}^{\\mathrm{after}} - f_{\\text{syn}(i)}^{\\mathrm{before}})\\text{GC}_{\\text{syn}(i)} \\right]$$\nFor each $i \\in S$, we have:\n- $f_i^{\\mathrm{after}} = 0 \\implies f_i^{\\mathrm{after}} - f_i^{\\mathrm{before}} = -f_i^{\\mathrm{before}}$\n- $f_{\\text{syn}(i)}^{\\mathrm{after}} = f_{\\text{syn}(i)}^{\\mathrm{before}} + f_i^{\\mathrm{before}} \\implies f_{\\text{syn}(i)}^{\\mathrm{after}} - f_{\\text{syn}(i)}^{\\mathrm{before}} = f_i^{\\mathrm{before}}$\nSubstituting these into the equation for a single replacement pair $(i, \\text{syn}(i))$:\n$$(-f_i^{\\mathrm{before}})\\text{GC}_i + (f_i^{\\mathrm{before}})\\text{GC}_{\\text{syn}(i)} = f_i^{\\mathrm{before}} (\\text{GC}_{\\text{syn}(i)} - \\text{GC}_i)$$\nSumming over all replacement rules gives the general expression for the total change:\n$$\\Delta f_{\\mathrm{GC}} = \\frac{1}{3} \\sum_{i \\in S} f_i^{\\mathrm{before}} (\\text{GC}_{\\text{syn}(i)} - \\text{GC}_i)$$\nWe now use the given data:\n- Replacement 1: $\\text{TCG} \\rightarrow \\text{AGC}$\n  - $f_{\\mathrm{TCG}} = \\frac{1}{20}$\n  - $\\text{GC}_{\\mathrm{TCG}} = 2$\n  - $\\text{GC}_{\\mathrm{AGC}} = 2$\n  - Change contribution: $\\frac{1}{20} (2 - 2) = 0$\n- Replacement 2: $\\text{TCA} \\rightarrow \\text{AGT}$\n  - $f_{\\mathrm{TCA}} = \\frac{1}{30}$\n  - $\\text{GC}_{\\mathrm{TCA}} = 1$\n  - $\\text{GC}_{\\mathrm{AGT}} = 1$\n  - Change contribution: $\\frac{1}{30} (1 - 1) = 0$\n- Replacement 3: $\\text{TAG} \\rightarrow \\text{TAA}$\n  - $f_{\\mathrm{TAG}} = \\frac{1}{600}$\n  - $\\text{GC}_{\\mathrm{TAG}} = 1$\n  - $\\text{GC}_{\\mathrm{TAA}} = 0$\n  - Change contribution: $\\frac{1}{600} (0 - 1) = -\\frac{1}{600}$\n\nThe total change is the sum of these contributions, divided by $3$:\n$$\\Delta f_{\\mathrm{GC}} = \\frac{1}{3} \\left( 0 + 0 - \\frac{1}{600} \\right) = \\frac{1}{3} \\left( -\\frac{1}{600} \\right) = -\\frac{1}{1800}$$\nThis is the exact fractional change in GC content.", "answer": "$$\n\\boxed{\\begin{pmatrix} 1.02 \\times 10^{5} & -\\frac{1}{1800} \\end{pmatrix}}\n$$", "id": "2768341"}, {"introduction": "After quantifying the scope of genome recoding, the next logical step is to model its intended effect: conferring virus resistance. The primary mechanism for this resistance is the catastrophic failure of viral protein synthesis due to codon reassignment in the host. This exercise [@problem_id:2768369] challenges you to build a simple but powerful probabilistic model that directly connects the fraction of recoded codons to the expected level of misincorporation in a viral protein, offering a clear mathematical understanding of how and why recoding works.", "problem": "A recoded bacterial chassis has been engineered for virus resistance by reassigning a subset of sense codons such that their decoded amino acids differ from those specified by the canonical genetic code used by an infecting virus. Assume the following fundamental base: by the Central Dogma, translation maps codons to amino acids; in a recoded organism, a codon reassignment changes this mapping; and under uniform codon use, each sense codon is equally likely to appear at any position in a coding sequence. Let $m \\in [0,1]$ denote the proportion of sense codons whose decoded amino acids in the host differ from those in the canonical code used by the virus. Consider a viral protein of length $L$ codons translated on this host, with the following assumptions: each of the $L$ positions independently uses one of the $61$ sense codons with equal probability; if a position uses a reassigned codon (counted in the proportion $m$), the incorporated amino acid is always different from the viral intended amino acid; if a position uses a non-reassigned codon, the incorporated amino acid is always the viral intended amino acid; there are no premature terminations or frameshifts.\n\nStarting from these assumptions and standard probability definitions, derive a closed-form analytic expression that maps $m$ and $L$ to the expected fraction of positions in the length-$L$ viral protein that contain a misincorporated amino acid upon translation in the recoded host. Provide your final expression in simplest form. No rounding is required. The expected fraction is dimensionless and should be given as a pure number in terms of $m$ and $L$.", "solution": "The problem as stated is scientifically grounded, well-posed, and self-contained. It presents a simplified but valid theoretical model for assessing the impact of codon reassignment on viral protein synthesis. The assumptions, such as uniform codon usage and the deterministic outcome of translation for reassigned versus non-reassigned codons, are explicit and serve to make the problem analytically tractable. Therefore, a solution can be derived from first principles.\n\nLet the set of all sense codons be $\\mathcal{C}$, with cardinality $|\\mathcal{C}| = 61$. Let $\\mathcal{C}_R \\subset \\mathcal{C}$ be the subset of reassigned codons. The problem states that the proportion of reassigned codons is $m$, so the size of this subset is $|\\mathcal{C}_R| = m \\times 61$. The subset of non-reassigned codons is $\\mathcal{C}_N = \\mathcal{C} \\setminus \\mathcal{C}_R$, with size $|\\mathcal{C}_N| = (1-m) \\times 61$.\n\nThe viral protein has a length of $L$ codons. According to the problem statement, for each position $i \\in \\{1, 2, \\dots, L\\}$, a codon is chosen from $\\mathcal{C}$ with uniform probability. The probability of choosing any specific codon $c \\in \\mathcal{C}$ at position $i$ is therefore $P(\\text{codon}_i = c) = \\frac{1}{61}$.\n\nA misincorporation occurs at position $i$ if and only if the codon at that position, $\\text{codon}_i$, belongs to the set of reassigned codons $\\mathcal{C}_R$. Let us define $p$ as the probability of a misincorporation at any single position $i$. This is the probability that the chosen codon is in $\\mathcal{C}_R$.\n$$p = P(\\text{codon}_i \\in \\mathcal{C}_R)$$\nBy the sum rule of probability, this is the sum of the probabilities of choosing each codon in $\\mathcal{C}_R$:\n$$p = \\sum_{c \\in \\mathcal{C}_R} P(\\text{codon}_i = c) = \\sum_{c \\in \\mathcal{C}_R} \\frac{1}{61}$$\nSince there are $|\\mathcal{C}_R| = m \\times 61$ such codons, the probability is:\n$$p = (m \\times 61) \\times \\frac{1}{61} = m$$\nThus, the probability of a misincorporation at any given position is $m$.\n\nTo formalize the analysis, let us define an indicator random variable $X_i$ for each position $i=1, \\dots, L$:\n$$\nX_i =\n\\begin{cases}\n1 & \\text{if a misincorporation occurs at position } i \\\\\n0 & \\text{if no misincorporation occurs at position } i\n\\end{cases}\n$$\nThe probability distribution of $X_i$ is given by:\n$$P(X_i = 1) = p = m$$\n$$P(X_i = 0) = 1-p = 1-m$$\nThe expected value of this indicator random variable is:\n$$E[X_i] = 1 \\cdot P(X_i = 1) + 0 \\cdot P(X_i = 0) = P(X_i = 1) = m$$\nThis is the expected number of misincorporations at a single position.\n\nLet $N$ be the total number of misincorporated amino acids in the protein of length $L$. $N$ is the sum of the individual indicator variables:\n$$N = \\sum_{i=1}^{L} X_i$$\nThe problem asks for the expected fraction of positions with a misincorporation. This quantity is $E\\left[\\frac{N}{L}\\right]$. Using the linearity of expectation, we first find the expected total number of misincorporations, $E[N]$.\n$$E[N] = E\\left[\\sum_{i=1}^{L} X_i\\right] = \\sum_{i=1}^{L} E[X_i]$$\nSince the codon at each position is chosen independently and from the same distribution, $E[X_i] = m$ for all $i$. Therefore:\n$$E[N] = \\sum_{i=1}^{L} m = Lm$$\nThe expected total number of misincorporations is $Lm$.\n\nThe final step is to calculate the expected fraction of misincorporations. This is the expected number of misincorporations divided by the total length of the protein, $L$.\n$$E\\left[\\frac{N}{L}\\right] = \\frac{1}{L} E[N]$$\nSubstituting the expression for $E[N]$:\n$$E\\left[\\frac{N}{L}\\right] = \\frac{1}{L} (Lm) = m$$\nThe expected fraction of positions in the viral protein that contain a misincorporated amino acid is $m$. This result is independent of the protein length $L$. The parameter $L$ is necessary to define the total protein and the total number of errors, but it cancels when computing the expected fraction. The final expression is simply $m$.", "answer": "$$\\boxed{m}$$", "id": "2768369"}, {"introduction": "While the principle of synonymous substitution seems straightforward, its practical application is fraught with complexities, especially in the dense informational landscape of many genomes. A single nucleotide change can have unintended pleiotropic effects, such as disrupting a gene in an overlapping reading frame. This computational challenge [@problem_id:2768399] moves from theory to practice, requiring you to develop an algorithm that navigates these \"hard\" constraints, a crucial skill for designing successful recoding strategies that avoid unintended functional consequences.", "problem": "You are asked to formalize, compute, and report codon-level synonymous recoding options in a coding sequence that contains an overlapping reading frame on the same strand. The goal is to eliminate a specified target codon without altering the peptide translated from the overlapping frame. Your derivation and program must proceed from fundamental biological principles and produce a mathematically well-defined, testable output.\n\nFundamental base:\n- Central Dogma of Molecular Biology states that Deoxyribonucleic Acid (DNA) is transcribed to Ribonucleic Acid (RNA), and RNA is translated to protein. In this problem, translation is modeled directly from DNA codons to amino acids using the standard genetic code.\n- A codon is a triplet of nucleotides drawn from the alphabet {A, C, G, T}. The standard genetic code defines a function that maps each codon to a single amino acid or to a termination signal.\n- Synonymous codons are codons that map to the same amino acid. Codon degeneracy implies there may exist multiple synonymous codons for a given amino acid.\n- Translation in a reading frame is defined by partitioning a DNA sequence into non-overlapping codons starting at a specified offset. For a DNA sequence string of length $L$, and a frame offset $f \\in \\{0,1,2\\}$, the translated peptide is obtained by reading codons at indices $i = f, f+3, f+6, \\dots$ up to the largest $i$ such that $i+2 < L$; each codon is mapped to its corresponding amino acid.\n\nDefinitions:\n- Let $S$ be the DNA sequence string.\n- Let $p_0 \\in \\{0,1,2\\}$ be the primary frame offset.\n- Let $q_0 \\in \\{0,1,2\\}$ be the overlapping frame offset (same-strand alternative reading frame).\n- Let $t$ be the integer index of the first nucleotide of the target codon in the primary frame, with $t \\equiv p_0 \\pmod{3}$ and $0 \\leq t \\leq L-3$.\n- Let $X$ be the banned codon string (length $3$) that must be eliminated at position $t$ in the primary frame.\n- Let $G$ denote the standard genetic code mapping from codons to amino acids (single-letter codes, and possibly the stop symbol).\n\nTask to be derived and implemented:\n- Consider replacing the codon at indices $[t, t+1, t+2]$ in $S$ by another codon $c'$ that is synonymous with the original codon $c = S[t:t+3]$ (that is, $G(c') = G(c)$), and $c' \\neq X$. Only the three nucleotides in this window may be changed; all other positions in $S$ must remain unchanged.\n- Define the translated peptide function in frame $f$ as $T_f(S)$, obtained by applying $G$ to each full codon window starting at offset $f$.\n- A candidate $c'$ is feasible if and only if both of the following hold:\n  1. $T_{p_0}(S') = T_{p_0}(S)$, where $S'$ is $S$ with $S'[t:t+3] = c'$ (this enforces synonymous replacement in the primary frame).\n  2. $T_{q_0}(S') = T_{q_0}(S)$ (this enforces that the overlapping frame peptide is unchanged).\n- The feasible set is the collection of all such $c'$.\n\nEncoding requirement for outputs:\n- To ensure purely numerical outputs, encode each codon $b_1 b_2 b_3$ as an integer in base-$4$ using the mapping $A \\mapsto 0$, $C \\mapsto 1$, $G \\mapsto 2$, $T \\mapsto 3$, and\n  $$ \\mathrm{code}(b_1 b_2 b_3) = 16 \\cdot \\mathrm{code}(b_1) + 4 \\cdot \\mathrm{code}(b_2) + \\mathrm{code}(b_3). $$\n- Your program must, for each test case, output a sorted list (ascending) of the encoded integers corresponding to all feasible $c'$.\n\nAngle units are not applicable. There are no physical units. All reported numerical outputs must be integers, and lists of integers.\n\nInput is embedded in your program. No external input should be read. Use the following test suite:\n\n- Case A (typical overlapping constraint with multiple feasible solutions expected):\n  - $S =$ \"GCCGCCGCTGCCGCCGCC\"\n  - $p_0 = 0$\n  - $q_0 = 1$\n  - $t = 6$\n  - $X =$ \"GCT\"\n\n- Case B (engineered to produce no feasible solution due to uniquely encoded overlapping codons constraining all three positions):\n  - $S =$ \"GCCGCCGCCGATGTGGGCGCCGCC\"\n  - $p_0 = 0$\n  - $q_0 = 2$\n  - $t = 12$\n  - $X =$ \"GTG\"\n\n- Case C (boundary condition where part of the target codon lies outside any complete codon in the overlapping frame):\n  - $S =$ \"GCTGCCGCCGCCGCC\"\n  - $p_0 = 0$\n  - $q_0 = 1$\n  - $t = 0$\n  - $X =$ \"GCT\"\n\n- Case D (overlapping frame identical to primary frame, so all primary synonymous codons are feasible except the banned one):\n  - $S =$ \"GCCTCGGCCGCC\"\n  - $p_0 = 0$\n  - $q_0 = 0$\n  - $t = 3$\n  - $X =$ \"TCG\"\n\nYour program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets. Each element is itself a comma-separated list of integers enclosed in square brackets. For example, the output format must look like:\n\"[ [a,b], [c], [d,e,f], [ ] ]\"\nbut without any spaces. Concretely, your program must print:\n\"[[caseA_list],[caseB_list],[caseC_list],[caseD_list]]\"\nwhere each \"caseX_list\" is a list of encoded integers sorted in ascending order and without spaces.\n\nThe objective is to test your ability to:\n- Derive the feasibility condition from first principles using $T_f$ and the standard genetic code $G$.\n- Design an algorithm that enumerates and filters synonymous codons based on overlapping frame invariance.\n- Implement a robust and testable computation that handles typical, boundary, and infeasible scenarios while producing purely numerical outputs.", "solution": "The problem requires the formalization and computation of a set of feasible synonymous codons that can replace a target codon in a primary reading frame, with the constraint that the peptide sequence of an overlapping reading frame remains unaltered. We begin by establishing the mathematical and biological principles governing the solution.\n\nLet the DNA sequence be a string $S$ of length $L$ over the alphabet $\\{A, C, G, T\\}$. Let $G$ be the function representing the standard genetic code, which maps a $3$-nucleotide codon to an amino acid or a stop signal. The translation of $S$ in a reading frame with offset $f \\in \\{0, 1, 2\\}$ is denoted by $T_f(S)$ and is produced by applying $G$ to the sequence of codons $S[i:i+3]$ for $i = f, f+3, f+6, \\dots$ where $i+2 < L$.\n\nThe problem is to find all codons $c'$ that can replace the original codon $c = S[t:t+3]$ at a given starting index $t$ in the primary frame $p_0$. The replacement $c'$ must satisfy two conditions:\n$1$. The peptide from the primary frame $p_0$ is preserved. This is a synonymous mutation, meaning $G(c') = G(c)$. Additionally, the replacement codon $c'$ must not be the specific banned codon $X$, i.e., $c' \\neq X$.\n$2$. The peptide from the overlapping frame $q_0$ is preserved, i.e., $T_{q_0}(S') = T_{q_0}(S)$, where $S'$ is the sequence $S$ after replacing the substring at indices $[t, t+1, t+2]$ with $c'$.\n\nThe overall approach is to first generate a set of candidate codons based on the primary frame constraint and then filter this set using the more complex overlapping frame constraint.\n\nFirst, we address the primary frame constraint. The original codon is $c = S[t:t+3]$, which translates to the amino acid $A_c = G(c)$. Any valid replacement $c'$ must also translate to $A_c$. This defines a set of synonymous codons. From this set, we exclude the banned codon $X$. The resulting set of candidate codons is:\n$$ \\mathcal{C}_{\\text{cand}} = \\{ c' \\mid G(c') = G(c) \\land c' \\neq X \\} $$\nThis set contains all potential solutions that satisfy the first condition.\n\nNext, we address the overlapping frame constraint. A modification made to the three nucleotides at indices $t, t+1, t+2$ can potentially alter the codons in the overlapping frame $q_0$. A codon in frame $q_0$ begins at an index $j$ such that $j \\equiv q_0 \\pmod{3}$. Such a codon, occupying indices $[j, j+1, j+2]$, is affected if its window overlaps with the modification window $[t, t+1, t+2]$. This condition holds if and only if $t-2 \\le j \\le t+2$.\n\nFor each candidate codon $c' \\in \\mathcal{C}_{\\text{cand}}$, we must verify that it does not alter the translation of the overlapping frame. This requires us to check every affected codon in frame $q_0$. Let $c' = n'_0n'_1n'_2$. The new sequence $S'$ is identical to $S$ except that $S'[t]=n'_0$, $S'[t+1]=n'_1$, and $S'[t+2]=n'_2$.\nFor each integer $j$ such that $j \\equiv q_0 \\pmod{3}$ and $t-2 \\le j \\le t+2$, we must check if the amino acid is preserved. We only consider complete codons, those for which $j \\ge 0$ and $j+3 \\le L$. For each such valid $j$, let the original $q_0$-frame codon be $c_{q,j} = S[j:j+3]$ and the new codon be $c'_{q,j}=S'[j:j+3]$. The constraint $T_{q_0}(S') = T_{q_0}(S)$ reduces to the set of local conditions:\n$$ G(c'_{q,j}) = G(c_{q,j}) \\quad \\forall j \\in \\{k \\mid k \\equiv q_0 \\pmod 3 \\land t-2 \\le k \\le t+2 \\land k \\ge 0 \\land k+3 \\le L\\} $$\nThe new codon $c'_{q,j}$ is composed of nucleotides from $c'$ if their indices fall within $[t, t+1, t+2]$, and from the original sequence $S$ otherwise. A candidate $c'$ from $\\mathcal{C}_{\\text{cand}}$ is deemed feasible if and only if it satisfies this condition for all affected complete codons in the $q_0$ frame.\n\nLet us analyze Case B as a concrete example:\n- $S = \\text{\"GCCGCCGCCGATGTGGGCGCCGCC\"}$ ($L=24$)\n- $p_0 = 0$, $q_0 = 2$, $t = 12$, $X = \\text{\"GTG\"}$\nThe original codon in the primary frame is $c = S[12:15] = \\text{\"GTG\"}$, which codes for Valine ($G(\\text{GTG}) = V$). The synonymous codons for Valine are GTT, GTC, GTA, GTG. Since $X=\\text{GTG}$ is banned, the candidate set is $\\mathcal{C}_{\\text{cand}} = \\{\\text{GTT, GTC, GTA}\\}$.\n\nThe modification occurs at indices $12, 13, 14$. The overlapping frame is $q_0=2$. The affected codon start indices $j$ must satisfy $j \\equiv 2 \\pmod{3}$ and $12-2 \\le j \\le 12+2$, so $10 \\le j \\le 14$. The integers in this range that satisfy $j \\equiv 2 \\pmod 3$ are $j=11$ and $j=14$. Both form complete codons.\n\nFor $j=11$: The affected codon is at $[11, 12, 13]$.\n- Original codon: $c_{q,11} = S[11:14] = \\text{\"TGT\"}$, which codes for Cysteine ($G(\\text{TGT})=C$).\n- Let $c' = n'_0 n'_1 n'_2$. The new codon is $c'_{q,11} = S[11]S'[12]S'[13] = \\text{\"T\"}n'_0n'_1$.\n- Constraint: $G(\\text{T}n'_0n'_1)$ must be Cysteine. The codons for Cysteine are TGT and TGC. Therefore, $n'_0n'_1$ must be \"GT\" or \"GC\".\n\nFor $j=14$: The affected codon is at $[14, 15, 16]$.\n- Original codon: $c_{q,14} = S[14:17] = \\text{\"GGC\"}$, which codes for Glycine ($G(\\text{GGC})=G$).\n- The new codon is $c'_{q,14} = S'[14]S[15]S[16] = n'_2\\text{\"GG\"}$.\n- Constraint: $G(n'_2\\text{GG})$ must be Glycine. The codons for Glycine are GGT, GGC, GGA, GGG. All have the form $GGN$. Our new codon has the form $NGG$. The only codons of the form $NGG$ are AGG (Arginine), CGG (Arginine), GGG (Glycine), and TGG (Tryptophan). For the amino acid to be Glycine, $n'_2$ must be 'G'.\n\nCombining constraints for a candidate $c' = n'_0n'_1n'_2$:\n1. $G(n'_0n'_1n'_2)$ is Valine, and $c' \\neq \\text{GTG}$.\n2. $n'_0n'_1$ is \"GT\" or \"GC\".\n3. $n'_2$ is \"G\".\n\nWe test the candidates from $\\mathcal{C}_{\\text{cand}}$:\n- $c'=\\text{GTT}$: $n'_0n'_1 = \\text{GT}$, $n'_2=\\text{T}$. Fails condition $3$.\n- $c'=\\text{GTC}$: $n'_0n'_1 = \\text{GT}$, $n'_2=\\text{C}$. Fails condition $3$.\n- $c'=\\text{GTA}$: $n'_0n'_1 = \\text{GT}$, $n'_2=\\text{A}$. Fails condition $3$.\n\nNone of the candidate codons satisfy all constraints. Therefore, the set of feasible codons is empty, which aligns with the problem's expectation for this test case. The same rigorous, principle-based derivation is applied to all cases to produce the final computational result.", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the codon recoding problem for a suite of test cases.\n    The solution is derived from first principles of molecular biology,\n    including the standard genetic code and reading frame translation.\n    \"\"\"\n\n    # The standard genetic code mapping DNA codons to single-letter amino acid codes.\n    # '*' denotes a stop codon.\n    GENETIC_CODE = {\n        'TTT': 'F', 'TTC': 'F', 'TTA': 'L', 'TTG': 'L',\n        'TCT': 'S', 'TCC': 'S', 'TCA': 'S', 'TCG': 'S',\n        'TAT': 'Y', 'TAC': 'Y', 'TAA': '*', 'TAG': '*',\n        'TGT': 'C', 'TGC': 'C', 'TGA': '*', 'TGG': 'W',\n        'CTT': 'L', 'CTC': 'L', 'CTA': 'L', 'CTG': 'L',\n        'CCT': 'P', 'CCC': 'P', 'CCA': 'P', 'CCG': 'P',\n        'CAT': 'H', 'CAC': 'H', 'CAA': 'Q', 'CAG': 'Q',\n        'CGT': 'R', 'CGC': 'R', 'CGA': 'R', 'CGG': 'R',\n        'ATT': 'I', 'ATC': 'I', 'ATA': 'I', 'ATG': 'M',\n        'ACT': 'T', 'ACC': 'T', 'ACA': 'T', 'ACG': 'T',\n        'AAT': 'N', 'AAC': 'N', 'AAA': 'K', 'AAG': 'K',\n        'AGT': 'S', 'AGC': 'S', 'AGA': 'R', 'AGG': 'R',\n        'GTT': 'V', 'GTC': 'V', 'GTA': 'V', 'GTG': 'V',\n        'GCT': 'A', 'GCC': 'A', 'GCA': 'A', 'GCG': 'A',\n        'GAT': 'D', 'GAC': 'D', 'GAA': 'E', 'GAG': 'E',\n        'GGT': 'G', 'GGC': 'G', 'GGA': 'G', 'GGG': 'G',\n    }\n\n    BASE_TO_INT = {'A': 0, 'C': 1, 'G': 2, 'T': 3}\n\n    def encode_codon(codon):\n        \"\"\"Encodes a 3-base codon string into a base-4 integer.\"\"\"\n        val = 16 * BASE_TO_INT[codon[0]] + 4 * BASE_TO_INT[codon[1]] + BASE_TO_INT[codon[2]]\n        return val\n\n    # Generate all 64 possible codons once.\n    all_codons = []\n    int_to_base = {0: 'A', 1: 'C', 2: 'G', 3: 'T'}\n    for i in range(64):\n        n = i\n        c = \"\"\n        c = int_to_base[n % 4] + c\n        n //= 4\n        c = int_to_base[n % 4] + c\n        n //= 4\n        c = int_to_base[n % 4] + c\n        all_codons.append(c)\n    \n    # Define test cases as specified in the problem statement.\n    test_cases = [\n        {\"S\": \"GCCGCCGCTGCCGCCGCC\", \"p0\": 0, \"q0\": 1, \"t\": 6, \"X\": \"GCT\"},\n        {\"S\": \"GCCGCCGCCGATGTGGGCGCCGCC\", \"p0\": 0, \"q0\": 2, \"t\": 12, \"X\": \"GTG\"},\n        {\"S\": \"GCTGCCGCCGCCGCC\", \"p0\": 0, \"q0\": 1, \"t\": 0, \"X\": \"GCT\"},\n        {\"S\": \"GCCTCGGCCGCC\", \"p0\": 0, \"q0\": 0, \"t\": 3, \"X\": \"TCG\"},\n    ]\n\n    final_results = []\n\n    for case in test_cases:\n        S, p0, q0, t, X = case[\"S\"], case[\"p0\"], case[\"q0\"], case[\"t\"], case[\"X\"]\n        L = len(S)\n\n        # 1. Determine candidate codons based on primary frame constraint\n        original_codon = S[t : t + 3]\n        target_aa = GENETIC_CODE[original_codon]\n        \n        candidate_codons = []\n        for codon in all_codons:\n            if GENETIC_CODE[codon] == target_aa and codon != X:\n                candidate_codons.append(codon)\n\n        # 2. Filter candidates based on overlapping frame constraint\n        feasible_codons = []\n        for c_prime in candidate_codons:\n            is_feasible = True\n            \n            # The range of start indices 'j' for q0-frame codons affected by a\n            # change at [t, t+1, t+2] is [t-2, t+2].\n            for j_start in range(t - 2, t + 3):\n                # Check if j_start is a valid start for a q0-frame codon\n                if j_start % 3 == q0:\n                    # Check if the codon is complete within the sequence boundaries\n                    if j_start >= 0 and j_start + 3 = L:\n                        original_q_codon = S[j_start:j_start + 3]\n                        \n                        # Construct the new q0-frame codon by overlaying c_prime\n                        new_q_codon_list = list(original_q_codon)\n                        for i in range(3): # iterate through positions in codon\n                            global_idx = j_start + i\n                            if t = global_idx  t + 3:\n                                c_prime_idx = global_idx - t\n                                new_q_codon_list[i] = c_prime[c_prime_idx]\n                        new_q_codon = \"\".join(new_q_codon_list)\n                        \n                        if GENETIC_CODE[original_q_codon] != GENETIC_CODE[new_q_codon]:\n                            is_feasible = False\n                            break\n            \n            if is_feasible:\n                feasible_codons.append(c_prime)\n                \n        # 3. Encode feasible codons and sort them\n        encoded_results = sorted([encode_codon(codon) for codon in feasible_codons])\n        final_results.append(encoded_results)\n\n    # 4. Format and print the final output exactly as required\n    output_str = \"[\" + \",\".join([f\"[{','.join(map(str, r))}]\" for r in final_results]) + \"]\"\n    print(output_str)\n\nsolve()\n```", "id": "2768399"}]}