{"hands_on_practices": [{"introduction": "Designing a minimal genome from first principles requires a systematic method for selecting a viable set of genetic components. This challenge can be elegantly framed as a combinatorial optimization problem, where the goal is to choose the smallest possible set of genetic modules that collectively satisfy all essential cellular functions. This practice introduces Integer Linear Programming (ILP) as a powerful formal framework for genome design, allowing you to model functions, genetic modules, dependencies, and incompatibilities to find the most parsimonious and functional genetic blueprint [@problem_id:2783543].", "problem": "In synthetic minimal genome design, the guiding starting point is the Central Dogma of molecular biology: genes encode functional products through Deoxyribonucleic Acid (DNA) transcription to Ribonucleic Acid (RNA) and translation into protein, and a viable cell must encode modules that realize essential functions such as DNA replication, transcription, translation, and core metabolism. Consider an abstraction in which a finite set of functional requirements $\\mathcal{F}$ must be satisfied, and a library of candidate genetic modules $\\mathcal{M}$ is available. Each module $i \\in \\mathcal{M}$ has a DNA length $l_i$ measured in kilobase pairs (kbp) and covers a subset $S_i \\subseteq \\mathcal{F}$ of functions due to the activities of its expressed gene products. Selecting a subset of modules assembles a genome. The minimal genome problem is posed as selecting a subset of modules that covers each required function at least a specified redundancy level, while minimizing total genome length, and respecting biological constraints such as dependencies and incompatibilities.\n\nFormulate this minimal genome design as a combinatorial optimization problem using the following primitives:\n\n- Decision variables: for each module $i \\in \\mathcal{M}$, choose a binary decision $x_i \\in \\{0,1\\}$ indicating whether module $i$ is included.\n- Objective: minimize $\\sum_{i \\in \\mathcal{M}} l_i x_i$.\n- Coverage constraints: for each function $f \\in \\mathcal{F}$ with required redundancy $r_f \\in \\mathbb{Z}_{\\ge 0}$, enforce $\\sum_{i \\in \\mathcal{M}: f \\in S_i} x_i \\ge r_f$.\n- Dependency constraints: if module $j$ requires module $k$, enforce $x_j \\le x_k$; more generally, if module $j$ requires at least one among a set $\\mathcal{A}$, enforce $x_j \\le \\sum_{a \\in \\mathcal{A}} x_a$.\n- Incompatibility constraints: if modules $p$ and $q$ are mutually incompatible, enforce $x_p + x_q \\le 1$.\n\nNow consider the specific instance below. The functional requirements are $\\mathcal{F}=\\{\\text{DNA replication }(R), \\text{ transcription }(T), \\text{ translation }(L), \\text{ phospholipid synthesis }(P), \\text{ nucleotide synthesis }(N), \\text{ amino acid synthesis }(A), \\text{ membrane transport }(M), \\text{ energy metabolism }(E)\\}$, and all have redundancy requirement $r_f = 1$ for all $f \\in \\mathcal{F}$. The candidate modules $\\mathcal{M}$, their covered functions $S_i$, and lengths $l_i$ (in kbp) are:\n\n- $m_1$: $S_1=\\{R\\}$, $l_1=5.0$.\n- $m_2$: $S_2=\\{T\\}$, $l_2=4.0$.\n- $m_3$: $S_3=\\{L\\}$, $l_3=12.0$.\n- $m_4$: $S_4=\\{P\\}$, $l_4=6.0$.\n- $m_5$: $S_5=\\{N\\}$, $l_5=7.0$.\n- $m_6$: $S_6=\\{A\\}$, $l_6=8.0$.\n- $m_7$: $S_7=\\{M\\}$, $l_7=3.0$.\n- $m_8$: $S_8=\\{E\\}$, $l_8=5.0$.\n- $m_9$: $S_9=\\{E\\}$, $l_9=4.2$.\n- $m_{10}$: $S_{10}=\\{N,A\\}$, $l_{10}=13.5$.\n- $m_{11}$: $S_{11}=\\{M\\}$, $l_{11}=2.6$.\n- $m_{12}$: $S_{12}=\\{N\\}$, $l_{12}=4.5$.\n- $m_{13}$: $S_{13}=\\{R,T\\}$, $l_{13}=7.9$.\n\nThe biological constraints are:\n\n- Dependency: $m_9$ requires $m_7$ (oxygen import), i.e., $x_9 \\le x_7$.\n- Dependency: $m_{10}$ requires $m_4$ (precursor supply), i.e., $x_{10} \\le x_4$.\n- Conditional dependency (salvage relies on transport): $m_{12}$ requires at least one of $\\{m_7,m_{11}\\}$, i.e., $x_{12} \\le x_7 + x_{11}$.\n- Incompatibility: $m_9$ is incompatible with $m_{11}$ (transport specificity), i.e., $x_9 + x_{11} \\le 1$.\n- Incompatibility: $m_{13}$ cannot co-exist with $m_1$ nor with $m_2$ (redundant operon architectures), i.e., $x_{13} + x_1 \\le 1$ and $x_{13} + x_2 \\le 1$.\n\nTasks:\n\n1. Write the explicit mixed-integer linear programming formulation specialized to this instance (state the decision variables, the objective function, and all constraints).\n2. Solve the instance to obtain the minimal total genome length, in kilobase pairs, of a feasible selection that covers all functions and respects all constraints. Express the final genome length in kbp. Round your answer to four significant figures.", "solution": "The problem presented is a specific instance of a combinatorial optimization problem, namely the set covering problem with additional constraints, which is a classic problem in operations research and computer science. It is formulated as an integer linear program (ILP). I will first validate the problem statement and then proceed to its solution.\n\nFirst, a validation of the problem statement is required.\n\nThe givens are as follows:\n- A set of functional requirements $\\mathcal{F}=\\{\\text{DNA replication }(R), \\text{ transcription }(T), \\text{ translation }(L), \\text{ phospholipid synthesis }(P), \\text{ nucleotide synthesis }(N), \\text{ amino acid synthesis }(A), \\text{ membrane transport }(M), \\text{ energy metabolism }(E)\\}$.\n- A uniform redundancy requirement $r_f = 1$ for all $f \\in \\mathcal{F}$.\n- A set of $13$ candidate modules $\\mathcal{M}=\\{m_1, \\dots, m_{13}\\}$.\n- For each module $m_i$, a length $l_i$ (in kbp) and a set of covered functions $S_i$:\n  - $m_1$: $S_1=\\{R\\}, l_1=5.0$.\n  - $m_2$: $S_2=\\{T\\}, l_2=4.0$.\n  - $m_3$: $S_3=\\{L\\}, l_3=12.0$.\n  - $m_4$: $S_4=\\{P\\}, l_4=6.0$.\n  - $m_5$: $S_5=\\{N\\}, l_5=7.0$.\n  - $m_6$: $S_6=\\{A\\}, l_6=8.0$.\n  - $m_7$: $S_7=\\{M\\}, l_7=3.0$.\n  - $m_8$: $S_8=\\{E\\}, l_8=5.0$.\n  - $m_9$: $S_9=\\{E\\}, l_9=4.2$.\n  - $m_{10}$: $S_{10}=\\{N,A\\}, l_{10}=13.5$.\n  - $m_{11}$: $S_{11}=\\{M\\}, l_{11}=2.6$.\n  - $m_{12}$: $S_{12}=\\{N\\}, l_{12}=4.5$.\n  - $m_{13}$: $S_{13}=\\{R,T\\}, l_{13}=7.9$.\n- Binary decision variables $x_i \\in \\{0,1\\}$ for each module $m_i$.\n- An objective function to minimize total genome length: $\\sum_{i \\in \\mathcal{M}} l_i x_i$.\n- A set of biological constraints:\n  - $x_9 \\le x_7$\n  - $x_{10} \\le x_4$\n  - $x_{12} \\le x_7 + x_{11}$\n  - $x_9 + x_{11} \\le 1$\n  - $x_{13} + x_1 \\le 1$\n  - $x_{13} + x_2 \\le 1$\n\nThe problem is scientifically grounded, representing a simplified but valid abstraction of the minimal genome design challenge in synthetic biology. The functions listed are indeed essential for cellular life, and the constraints model plausible biological dependencies and incompatibilities. The problem is well-posed; it is a standard integer linear programming formulation with a finite number of variables and constraints, for which an optimal solution is guaranteed to exist. The language is objective and precise, and the provided data are complete and consistent. No scientific principles are violated. Therefore, the problem is deemed valid. We proceed to the solution.\n\nThe task is twofold: first, to state the specific integer linear program, and second, to solve it.\n\nPart 1: Integer Linear Programming Formulation\n\nDecision Variables:\nFor a set of modules $\\mathcal{M}=\\{m_1, \\dots, m_{13}\\}$, we define binary decision variables $x_i \\in \\{0, 1\\}$ for each $i \\in \\{1, 2, \\dots, 13\\}$, where $x_i=1$ if module $m_i$ is selected for the genome, and $x_i=0$ otherwise.\n\nObjective Function:\nMinimize the total genome length $L_{total}$, which is the sum of the lengths of the selected modules:\n$$ \\text{Minimize } L_{total} = 5.0x_1 + 4.0x_2 + 12.0x_3 + 6.0x_4 + 7.0x_5 + 8.0x_6 + 3.0x_7 + 5.0x_8 + 4.2x_9 + 13.5x_{10} + 2.6x_{11} + 4.5x_{12} + 7.9x_{13} $$\n\nConstraints:\nThe solution must satisfy the following constraints.\n\nCoverage Constraints (for each function $f \\in \\mathcal{F}$, with redundancy $r_f=1$):\n- Function $R$ (DNA replication): $x_1 + x_{13} \\ge 1$\n- Function $T$ (transcription): $x_2 + x_{13} \\ge 1$\n- Function $L$ (translation): $x_3 \\ge 1$\n- Function $P$ (phospholipid synthesis): $x_4 \\ge 1$\n- Function $N$ (nucleotide synthesis): $x_5 + x_{10} + x_{12} \\ge 1$\n- Function $A$ (amino acid synthesis): $x_6 + x_{10} \\ge 1$\n- Function $M$ (membrane transport): $x_7 + x_{11} \\ge 1$\n- Function $E$ (energy metabolism): $x_8 + x_9 \\ge 1$\n\nBiological Constraints:\n- Dependency ($m_9$ requires $m_7$): $x_9 \\le x_7$\n- Dependency ($m_{10}$ requires $m_4$): $x_{10} \\le x_4$\n- Conditional dependency ($m_{12}$ requires $m_7$ or $m_{11}$): $x_{12} \\le x_7 + x_{11}$\n- Incompatibility ($m_9$ and $m_{11}$): $x_9 + x_{11} \\le 1$\n- Incompatibility ($m_{13}$ and $m_1$): $x_{13} + x_1 \\le 1$\n- Incompatibility ($m_{13}$ and $m_2$): $x_{13} + x_2 \\le 1$\n\nPart 2: Solution of the Optimization Problem\n\nWe solve the ILP by logical deduction.\n\n1.  Mandatory Modules: The coverage constraints for functions $L$ and $P$ are $x_3 \\ge 1$ and $x_4 \\ge 1$. Since $x_i$ are binary, this forces $x_3=1$ and $x_4=1$. Modules $m_3$ and $m_4$ must be included.\n    - This contributes $l_3 + l_4 = 12.0 + 6.0 = 18.0$ kbp to the total length.\n    - Since $x_4=1$, the dependency $x_{10} \\le x_4$ becomes $x_{10} \\le 1$, which is always true for a binary variable and thus provides no further restriction on $x_{10}$.\n\n2.  Coverage of Functions $R$ and $T$: These functions are covered by modules $\\{m_1, m_2, m_{13}\\}$. The constraints are $x_1 + x_{13} \\ge 1$ and $x_2 + x_{13} \\ge 1$, coupled with incompatibility constraints $x_{13} + x_1 \\le 1$ and $x_{13} + x_2 \\le 1$.\n    - Option A: Select $m_{13}$ ($x_{13}=1$). This immediately satisfies coverage for both $R$ and $T$. The incompatibility constraints imply $x_1=0$ and $x_2=0$. The cost is $l_{13} = 7.9$ kbp.\n    - Option B: Do not select $m_{13}$ ($x_{13}=0$). Coverage constraints require $x_1=1$ and $x_2=1$. The cost is $l_1 + l_2 = 5.0 + 4.0 = 9.0$ kbp.\n    - Option A is cheaper. As this choice does not negatively constrain other parts of the problem, we select $m_{13}$. So, $x_{13}=1, x_1=0, x_2=0$. The cumulative length is $18.0 + 7.9 = 25.9$ kbp.\n\n3.  Coverage of Remaining Functions $\\{M, E, N, A\\}$: We must cover these four functions by selecting from the remaining available modules $\\{m_5, m_6, m_7, m_8, m_9, m_{10}, m_{11}, m_{12}\\}$, while minimizing cost and satisfying all remaining constraints. The key interacting constraints are $x_9 \\le x_7$, $x_{12} \\le x_7 + x_{11}$, and $x_9 + x_{11} \\le 1$. The choice for function $M$ ($m_7$ or $m_{11}$) is pivotal.\n\n    - Case I: Select $m_{11}$ for function $M$ ($x_{11}=1, x_7=0$). The cost for $M$ is $l_{11}=2.6$.\n        - The incompatibility $x_9 + x_{11} \\le 1$ forces $x_9=0$.\n        - To cover function $E$ ($x_8 + x_9 \\ge 1$), we must select $m_8$ ($x_8=1$). Cost for $E$ is $l_8=5.0$.\n        - To cover functions $N$ and $A$, we can either use $m_{10}$ (cost $13.5$) or separate modules. For separate modules, we must use $m_6$ for $A$ (cost $l_6=8.0$) and the cheapest option for $N$. The options for $N$ are $m_5$ ($7.0$), $m_{10}$ ($13.5$), and $m_{12}$ ($4.5$). The cheapest is $m_{12}$. The dependency $x_{12} \\le x_7 + x_{11} \\implies x_{12} \\le 0+1=1$ is satisfied. So we take $m_6$ and $m_{12}$. Total cost for $N$ and $A$ is $l_6+l_{12}=8.0+4.5=12.5$. This is cheaper than $m_{10}$.\n        - Total cost for this case: $l_{11} + l_8 + l_6 + l_{12} = 2.6 + 5.0 + 8.0 + 4.5 = 20.1$ kbp.\n\n    - Case II: Select $m_7$ for function $M$ ($x_7=1, x_{11}=0$). The cost for $M$ is $l_7=3.0$.\n        - To cover function $E$ ($x_8 + x_9 \\ge 1$), we can choose between $m_8$ ($l_8=5.0$) and $m_9$ ($l_9=4.2$). Module $m_9$ is cheaper. Its dependency $x_9 \\le x_7$ is satisfied since $x_7=1$. So we select $m_9$ ($x_9=1, x_8=0$). Cost for $E$ is $l_9=4.2$.\n        - To cover functions $N$ and $A$, as in Case I, the cheapest option is to use separate modules $m_6$ (for $A$) and $m_{12}$ (for $N$). The dependency $x_{12} \\le x_7 + x_{11} \\implies x_{12} \\le 1+0=1$ is satisfied. The cost is $l_6+l_{12}=8.0+4.5=12.5$.\n        - Total cost for this case: $l_7 + l_9 + l_6 + l_{12} = 3.0 + 4.2 + 8.0 + 4.5 = 19.7$ kbp.\n\n    Comparing the two cases, Case II yields a lower cost for covering functions $\\{M, E, N, A\\}$.\n\n4.  Final Solution:\n    The optimal set of modules is the union of the choices from each step.\n    - Mandatory: $\\{m_3, m_4\\}$\n    - For $R, T$: $\\{m_{13}\\}$\n    - For $M, E, N, A$: $\\{m_7, m_9, m_6, m_{12}\\}$ (from Case II)\n    The complete set of selected modules is $\\{m_3, m_4, m_6, m_7, m_9, m_{12}, m_{13}\\}$.\n\n5.  Calculation of Minimal Total Length:\n    The total length is the sum of the lengths of the selected modules:\n    $L_{total} = l_3 + l_4 + l_6 + l_7 + l_9 + l_{12} + l_{13}$\n    $L_{total} = 12.0 + 6.0 + 8.0 + 3.0 + 4.2 + 4.5 + 7.9$\n    $L_{total} = 45.6$ kbp.\n\nThe problem asks for the answer to be rounded to four significant figures. The calculated value $45.6$ has three significant figures. To express this with four significant figures, we write it as $45.60$.", "answer": "$$\n\\boxed{45.60}\n$$", "id": "2783543"}, {"introduction": "A viable minimal genome must not only contain all essential parts but also express them in the right proportions to enable robust growth. This exercise explores a foundational principle of quantitative biology: the trade-off in allocating finite proteome resources between different cellular sectors, such as ribosomes and metabolic enzymes. By developing a simple analytical model, you will derive the optimal proteome allocation that maximizes the cellular growth rate $\\mu$, providing a deep, quantitative understanding of the economic principles that constrain and govern cell physiology [@problem_id:2783592].", "problem": "A core design task in constructing a minimal genome is to allocate the proteome between ribosomes and metabolic enzymes while preserving an incompressible set of essential proteins. Let $\\phi_{R}$ denote the proteome fraction in ribosomes, $\\phi_{E}$ the proteome fraction in metabolic enzymes that synthesize amino acid precursors, and $\\phi_{0}$ the incompressible fraction of all other essential proteins that cannot be reduced in a given minimal genome design. The proteome fractions satisfy the conservation constraint $\\phi_{R}+\\phi_{E}+\\phi_{0}=1$ with $0<\\phi_{0}<1$. Consider balanced exponential growth with specific growth rate $\\mu$ (in $\\mathrm{h}^{-1}$), grounded in the following widely accepted principles:\n\n- By the Central Dogma of molecular biology (deoxyribonucleic acid to ribonucleic acid to protein) and extensive empirical measurements, the capacity of protein synthesis scales with ribosome abundance, so that the specific protein synthesis capacity is proportional to $\\phi_{R}$ with proportionality constant $k_{R}$ (in $\\mathrm{h}^{-1}$), yielding an upper bound $\\mu \\leq k_{R}\\,\\phi_{R}$.\n- The supply of amino acid precursors generated by metabolism scales with the abundance of the metabolic enzyme sector, so that the specific precursor production capacity is proportional to $\\phi_{E}$ with proportionality constant $k_{E}$ (in $\\mathrm{h}^{-1}$), yielding an upper bound $\\mu \\leq k_{E}\\,\\phi_{E}$.\n- The remaining proteome fraction $\\phi_{0}$ is nonproductive with respect to these two capacities but is essential and fixed by the minimal genome design.\n\nAssume there are no other constraints and that $\\phi_{R}$ is the decision variable, with $\\phi_{E}=1-\\phi_{0}-\\phi_{R}$ and $0 \\leq \\phi_{R} \\leq 1-\\phi_{0}$. Under these assumptions:\n\n1. Derive the explicit analytic expression for the upper boundary $\\mu_{\\max}(\\phi_{R})$ of the feasible growth-rate region in the $(\\phi_{R},\\mu)$ plane as a function of $\\phi_{R}$, $k_{R}$, $k_{E}$, and $\\phi_{0}$.\n2. Determine the value $\\phi_{R}^{\\star}$ that maximizes $\\mu_{\\max}(\\phi_{R})$ and compute the corresponding maximal growth rate $\\mu^{\\star}$.\n3. Provide your final answer as the simplified closed-form expression for $\\mu^{\\star}$. Express the maximal growth rate in $\\mathrm{h}^{-1}$. Do not substitute numerical values.\n\nYour final boxed answer must be only the expression for $\\mu^{\\star}$, without units. No rounding is required.", "solution": "The problem as stated is well-posed, scientifically grounded, and contains all necessary information for a unique analytical solution. We will proceed with the derivation.\n\nThe system is defined by a set of constraints on the specific growth rate, $\\mu$. There are two capacity limitations. The first is from protein synthesis, which is proportional to the ribosome fraction $\\phi_{R}$:\n$$\n\\mu \\leq k_{R}\\,\\phi_{R}\n$$\nThe second is from the synthesis of metabolic precursors, which is proportional to the metabolic enzyme fraction $\\phi_{E}$:\n$$\n\\mu \\leq k_{E}\\,\\phi_{E}\n$$\nThese two proteome fractions, along with the incompressible fraction $\\phi_{0}$, must sum to the total proteome, which is normalized to $1$:\n$$\n\\phi_{R} + \\phi_{E} + \\phi_{0} = 1\n$$\nFrom this conservation law, we express the metabolic enzyme fraction $\\phi_{E}$ as a function of the ribosome fraction $\\phi_{R}$, since $\\phi_{R}$ is designated as the decision variable:\n$$\n\\phi_{E} = 1 - \\phi_{0} - \\phi_{R}\n$$\nThe problem specifies that $0 < \\phi_{0} < 1$, and the decision variable $\\phi_{R}$ is constrained to the interval $0 \\leq \\phi_{R} \\leq 1 - \\phi_{0}$. This ensures that $\\phi_{E}$ is also non-negative, as $0 \\leq \\phi_{E} \\leq 1 - \\phi_{0}$.\n\nSubstituting the expression for $\\phi_{E}$ into the second capacity constraint gives:\n$$\n\\mu \\leq k_{E}(1 - \\phi_{0} - \\phi_{R})\n$$\nFor any given proteome allocation $\\phi_{R}$, the growth rate $\\mu$ must satisfy both capacity constraints simultaneously. The highest possible growth rate for a given $\\phi_{R}$, hereby denoted $\\mu_{\\max}(\\phi_{R})$, is therefore the minimum of the two upper bounds. This provides the explicit analytic expression for the upper boundary of the feasible growth-rate region:\n$$\n\\mu_{\\max}(\\phi_{R}) = \\min(k_{R}\\,\\phi_{R}, k_{E}(1 - \\phi_{0} - \\phi_{R}))\n$$\nThis completes the first part of the problem.\n\nTo solve the second part, we must find the value of $\\phi_{R}$, which we will call $\\phi_{R}^{\\star}$, that maximizes the function $\\mu_{\\max}(\\phi_{R})$. The function $\\mu_{\\max}(\\phi_{R})$ is the lower envelope of two linear functions of $\\phi_{R}$: one with a positive slope $k_{R}$ and one with a negative slope $-k_{E}$. The maximum value of this composite function is achieved at the intersection point of these two lines, where their values are equal. This represents the balanced growth condition where both capacities are simultaneously limiting. We set the two arguments of the $\\min$ function equal to each other to find $\\phi_{R}^{\\star}$:\n$$\nk_{R}\\,\\phi_{R}^{\\star} = k_{E}(1 - \\phi_{0} - \\phi_{R}^{\\star})\n$$\nWe now solve this linear equation for $\\phi_{R}^{\\star}$:\n$$\nk_{R}\\,\\phi_{R}^{\\star} = k_{E} - k_{E}\\phi_{0} - k_{E}\\phi_{R}^{\\star}\n$$\n$$\nk_{R}\\,\\phi_{R}^{\\star} + k_{E}\\phi_{R}^{\\star} = k_{E}(1 - \\phi_{0})\n$$\n$$\n\\phi_{R}^{\\star}(k_{R} + k_{E}) = k_{E}(1 - \\phi_{0})\n$$\nThis yields the optimal ribosome fraction:\n$$\n\\phi_{R}^{\\star} = \\frac{k_{E}(1 - \\phi_{0})}{k_{R} + k_{E}}\n$$\nThis value for $\\phi_{R}^{\\star}$ is guaranteed to be within the valid range $[0, 1-\\phi_{0}]$ because $k_{R}, k_{E} > 0$ and $0 < 1-\\phi_{0} < 1$.\n\nFinally, to compute the maximal growth rate $\\mu^{\\star}$, we substitute the optimal fraction $\\phi_{R}^{\\star}$ back into either of the two initial capacity expressions. Using the first expression, $\\mu = k_{R}\\,\\phi_{R}$, is the most direct path:\n$$\n\\mu^{\\star} = \\mu_{\\max}(\\phi_{R}^{\\star}) = k_{R}\\,\\phi_{R}^{\\star}\n$$\n$$\n\\mu^{\\star} = k_{R} \\left( \\frac{k_{E}(1 - \\phi_{0})}{k_{R} + k_{E}} \\right)\n$$\nUpon simplification, we obtain the final closed-form expression for the maximal growth rate:\n$$\n\\mu^{\\star} = \\frac{k_{R}k_{E}(1 - \\phi_{0})}{k_{R} + k_{E}}\n$$\nThis expression represents the highest possible growth rate achievable by optimally partitioning the proteome between ribosomes and metabolic enzymes, given the incompressible cellular machinery represented by $\\phi_{0}$.", "answer": "$$\\boxed{\\frac{k_{R}k_{E}(1 - \\phi_{0})}{k_{R} + k_{E}}}$$", "id": "2783592"}, {"introduction": "After designing a minimal genome, its predicted functions, particularly metabolism, must be computationally validated. This practice provides hands-on experience with Flux Balance Analysis (FBA), a cornerstone constraint-based modeling technique for predicting metabolic capabilities at a genome-scale. By implementing FBA to simulate the effects of single and double gene knockouts, you will learn to computationally assess gene essentiality and identify synthetic lethal interactions, a critical skill for prototyping and debugging metabolic networks in synthetic organisms [@problem_id:2783655].", "problem": "A cellular minimal-genome design task is posed using Flux Balance Analysis (FBA) (Flux Balance Analysis (FBA)) as the computational framework. The fundamental base is the steady-state mass balance of intracellular metabolites and the Central Dogma of Molecular Biology operationalized through Gene–Protein–Reaction (GPR) associations. The steady-state assumption imposes that the intracellular accumulation rate is zero, which yields a linear constraint system on reaction fluxes. Essentiality is defined operationally: a reaction or gene set is essential if constraining it to be inactive forces the optimal biomass production flux to be zero. Synthetic lethality refers to the case where two perturbations are jointly lethal although neither alone is lethal.\n\nYou are given a toy, but scientifically consistent, metabolic network with $m$ intracellular metabolites and $n$ reactions. The network is encoded by a stoichiometric matrix $S \\in \\mathbb{R}^{m \\times n}$, lower and upper bounds on reaction fluxes $l \\in \\mathbb{R}^{n}$ and $u \\in \\mathbb{R}^{n}$, and an objective vector $c \\in \\mathbb{R}^{n}$ selecting a “biomass” reaction to be maximized. In FBA, the primal problem is\n$$\n\\max_{v \\in \\mathbb{R}^{n}} \\; c^{\\top} v \\quad \\text{subject to} \\quad S v = 0, \\; l \\le v \\le u,\n$$\nwhere $v$ is the vector of reaction fluxes. Reaction or gene knockouts are simulated by tightening bounds to $l_i = u_i = 0$ for the affected reactions $i$.\n\nNetwork specification (all indices are $0$-based):\n- Metabolites: $m = 2$, named “A” and “B”.\n- Reactions: $n = 4$, with the following columns in $S$ and bounds $(l_i,u_i)$:\n  - Reaction $0$ (“A\\_imp”): import of A, stoichiometry produces A, bounds $[0,10]$.\n  - Reaction $1$ (“B\\_imp”): import of B, stoichiometry produces B, bounds $[0,10]$.\n  - Reaction $2$ (“Biomass”): consumes A and B, bounds $[0,1000]$.\n  - Reaction $3$ (“A\\_to\\_B”): converts A to B, bounds $[0,1000]$.\nThe stoichiometric matrix (rows ordered as [A, B], columns ordered as [$0,1,2,3$]) is\n$$\nS =\n\\begin{bmatrix}\n+1 & 0 & -1 & -1 \\\\\n0 & +1 & -1 & +1\n\\end{bmatrix}.\n$$\nThe objective vector selects the biomass reaction: $c = [0,0,1,0]$, so the optimal growth rate is $c^{\\top} v = v_2$ in “flux units”. The bounds are $l = [0,0,0,0]$ and $u = [10,10,1000,1000]$.\n\nGene–Protein–Reaction (GPR) mapping is given in disjunctive normal form (an “OR of ANDs”), where each reaction is associated with a set of gene clauses; a reaction is active if at least one clause is fully satisfied (all genes in that clause are present). Let the gene set be $\\{\\text{gA1}, \\text{gA2}, \\text{gB}, \\text{gBiom}, \\text{gAToB1}, \\text{gAToB2}\\}$. The GPR associations are:\n- Reaction $0$ (“A\\_imp”): $(\\text{gA1}) \\lor (\\text{gA2})$.\n- Reaction $1$ (“B\\_imp”): $(\\text{gB})$.\n- Reaction $2$ (“Biomass”): $(\\text{gBiom})$.\n- Reaction $3$ (“A\\_to\\_B”): $(\\text{gAToB1} \\land \\text{gAToB2})$.\n\nSingle and double knockouts are simulated at the reaction level by setting $l_i = u_i = 0$ for the corresponding reactions, and at the gene level by first evaluating GPR to determine which reactions become inactive under the gene deletions and then setting those reactions’ bounds to $0$. The linear program must be solved for each knockout setting. A solution is interpreted as “zero growth” if the optimal objective value is less than or equal to a small numerical tolerance $\\varepsilon = 10^{-9}$; otherwise, it is “nonzero growth.” For reporting, round each optimal growth value to $6$ decimal places.\n\nYour program must compute the optimal growth $c^{\\top} v$ for each of the following test cases, in the exact order listed. Each test case is specified either as a reaction knockout set by indices or as a gene knockout set by names:\n- Test case $0$: baseline, no knockouts.\n- Test case $1$: reaction knockout $\\{0\\}$.\n- Test case $2$: reaction knockout $\\{1\\}$.\n- Test case $3$: reaction knockout $\\{3\\}$.\n- Test case $4$: reaction knockout $\\{2\\}$.\n- Test case $5$: reaction knockout $\\{1,3\\}$.\n- Test case $6$: reaction knockout $\\{0,1\\}$.\n- Test case $7$: reaction knockout $\\{0,3\\}$.\n- Test case $8$: reaction knockout $\\{1,2\\}$.\n- Test case $9$: gene knockout $\\{\\text{gA1}\\}$.\n- Test case $10$: gene knockout $\\{\\text{gA2}\\}$.\n- Test case $11$: gene knockout $\\{\\text{gAToB1}\\}$.\n- Test case $12$: gene knockout $\\{\\text{gB}\\}$.\n- Test case $13$: gene knockout $\\{\\text{gA1},\\text{gA2}\\}$.\n- Test case $14$: gene knockout $\\{\\text{gB},\\text{gAToB1}\\}$.\n\nFinal output format requirement:\n- Your program should produce a single line of output containing the $15$ results as a comma-separated list enclosed in square brackets, in the order of the test cases above. Each entry must be a float rounded to $6$ decimal places (e.g., $[x_0,x_1,\\dots,x_{14}]$).\n- No units are required because fluxes are unitless in this abstract formulation. Angles are not involved. Percentages are not used.\n\nScientific realism notes: The steady-state constraint $S v = 0$ approximates intracellular homeostasis over timescales where metabolite pools are quasi-stationary. Exchange or source/sink reactions are represented as bounded fluxes with single-metabolite stoichiometry, which is standard practice in constraint-based reconstruction and analysis when external pools are not explicitly modeled.\n\nImplement the linear programs with a standard linear solver. Do not use shortcuts beyond the stated definitions. Ensure that gene essentiality and synthetic lethality are determined by evaluating the GPR rules, then re-optimizing under the resulting reaction availability. Use $\\varepsilon = 10^{-9}$ to interpret numerical zeros, but always report the raw optimal value rounded to $6$ decimals as specified.", "solution": "The problem presented is a well-defined exercise in computational systems biology, specifically using the Flux Balance Analysis (FBA) framework. It requires the solution of a series of linear programming problems to determine the optimal growth rate of a toy metabolic network under various genetic and reaction-level perturbations. The problem is scientifically grounded, mathematically consistent, and contains all necessary information for a unique solution. Therefore, it is deemed valid.\n\nThe core of FBA is the steady-state assumption, which posits that for all intracellular metabolites, the rate of production equals the rate of consumption. For a network with $m$ metabolites and $n$ reactions, characterized by a stoichiometric matrix $S \\in \\mathbb{R}^{m \\times n}$, this is expressed as a system of linear equations:\n$$\nS v = 0\n$$\nwhere $v \\in \\mathbb{R}^{n}$ is the vector of reaction fluxes. Each flux $v_i$ is constrained by lower and upper bounds, $l_i \\le v_i \\le u_i$, reflecting thermodynamic and capacity limitations. The biological objective, typically biomass production, is represented by a linear objective function $c^{\\top} v$ to be maximized. The problem is thus formulated as a linear program (LP):\n$$\n\\text{maximize} \\quad z = c^{\\top} v \\\\\n\\text{subject to} \\quad S v = 0 \\\\\nl \\le v \\le u\n$$\nFor this specific problem, we are given:\n- The number of metabolites $m=2$ and reactions $n=4$.\n- The stoichiometric matrix:\n$$\nS =\n\\begin{bmatrix}\n1 & 0 & -1 & -1 \\\\\n0 & 1 & -1 & 1\n\\end{bmatrix}\n$$\n- The baseline flux bounds: $l = [0, 0, 0, 0]^{\\top}$ and $u = [10, 10, 1000, 1000]^{\\top}$.\n- The objective vector, which isolates the biomass reaction flux ($v_2$): $c = [0, 0, 1, 0]^{\\top}$.\n\nPerturbations such as reaction or gene knockouts are simulated by modifying the flux bounds. A reaction $i$ knockout is implemented by setting its bounds to zero: $l_i = u_i = 0$.\n\nGene knockouts are translated into reaction knockouts via Gene-Protein-Reaction (GPR) associations. The provided GPRs are given in disjunctive normal form (an \"OR of ANDs\"). A reaction is active if at least one of its boolean clauses is true. A clause (an AND-group of genes) is true if and only if all genes within it are present. Consequently, a reaction is inactivated if and only if every one of its clauses is falsified by the gene knockout set.\n\nThe GPR rules are:\n- Reaction $0$ (A\\_imp): $(\\text{gA1}) \\lor (\\text{gA2})$. This reaction is inactive if and only if both gA1 and gA2 are knocked out.\n- Reaction $1$ (B\\_imp): $(\\text{gB})$. This reaction is inactive if gB is knocked out.\n- Reaction $2$ (Biomass): $(\\text{gBiom})$. This reaction is inactive if gBiom is knocked out.\n- Reaction $3$ (A\\_to\\_B): $(\\text{gAToB1} \\land \\text{gAToB2})$. This reaction is inactive if gAToB1 or gAToB2 (or both) are knocked out.\n\nThe solution methodology for each test case is as follows:\n1.  Identify the set of knockout genes or reactions specified by the test case.\n2.  If the knockout is specified at the gene level, apply the GPR logic to determine the corresponding set of reactions to be inactivated.\n3.  For each inactivated reaction $i$, adjust its flux bounds to $l_i = 0$ and $u_i = 0$.\n4.  Construct the LP problem instance with the modified bounds. Standard LP solvers are typically minimization solvers. To maximize $c^{\\top}v$, we minimize $-c^{\\top}v$.\n5.  Solve the LP to find the optimal objective value, which represents the maximal biomass flux.\n6.  The problem states that a predicted growth rate $z_{opt} \\le \\varepsilon$ (where $\\varepsilon = 10^{-9}$) is interpreted as \"zero growth\". However, the output must be the raw numerical value from the solver, rounded to $6$ decimal places. Numerical floating-point inaccuracies may result in values very close to zero, which will be correctly handled by the rounding requirement.\n\nThis procedure will be systematically applied to all $15$ test cases. The implementation will use the `linprog` function from the `scipy.optimize` library, which is a standard and robust tool for solving such problems. The final output will be a list of these $15$ computed optimal growth values, formatted as specified.", "answer": "[10.000000,0.000000,5.000000,10.000000,0.000000,0.000000,0.000000,0.000000,0.000000,10.000000,10.000000,10.000000,5.000000,0.000000,0.000000]", "id": "2783655"}]}