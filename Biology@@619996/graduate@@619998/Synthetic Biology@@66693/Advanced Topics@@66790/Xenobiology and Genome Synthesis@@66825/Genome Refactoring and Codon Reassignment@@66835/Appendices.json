{"hands_on_practices": [{"introduction": "A core challenge in reassigning a codon is ensuring the new orthogonal tRNA can function efficiently and accurately. This practice delves into the fundamental kinetic competition that occurs at the ribosomal A-site, where the engineered tRNA must outcompete endogenous, near-cognate tRNAs. By applying steady-state kinetic analysis, you will derive and quantify the probability of misincorporation at a reassigned codon, a critical factor determining the fidelity of the expanded genetic code [@problem_id:2742133]. This exercise provides a quantitative foundation for understanding and engineering translational accuracy.", "problem": "You are refactoring the genome of *Escherichia coli* (*E. coli*) to remove all natural UAG stop codons and reassigned UAG to encode a noncanonical amino acid via an orthogonal transfer ribonucleic acid (tRNA)–aminoacyl system. At a target UAG codon in a reporter gene, aminoacyl-tRNA species compete for the ribosomal aminoacyl site (A-site). In a minimal, scientifically realistic model of A-site decoding, each tRNA species $i$ (one engineered cognate and two endogenous near-cognates) engages the ribosome via three elementary steps: bimolecular association to the empty A-site with second-order rate constant $k_{\\text{on},i}^{0}$, unimolecular dissociation with first-order rate constant $k_{\\text{off},i}$, and peptidyl transfer (catalysis) with first-order rate constant $k_{\\text{cat},i}$. Assume:\n- The A-site is either empty or occupied by a single tRNA.\n- When a tRNA is bound, exactly one of two mutually exclusive events occurs next: dissociation or catalysis, with rates $k_{\\text{off},i}$ and $k_{\\text{cat},i}$, respectively.\n- After any dissociation event, the A-site returns to the empty state and the competition restarts.\n- All processes are memoryless (exponentially distributed waiting times).\n- Only three tRNA species are present at appreciable levels: the engineered cognate for UAG (index $c$) and two near-cognates (indices $n_{1}$ and $n_{2}$) that can misread UAG at low probability.\n\nAt the operating intracellular concentrations, the tRNA association steps can be treated as pseudo-first-order with effective rates $k_{\\text{on},i} \\equiv k_{\\text{on},i}^{0}[{\\rm tRNA}_{i}]$. The following parameters are measured at $37\\,^{\\circ}\\mathrm{C}$:\n- Cognate: $k_{\\text{on},c}^{0} = 6.0 \\times 10^{6}\\ \\mathrm{M}^{-1}\\mathrm{s}^{-1}$, $[{\\rm tRNA}_{c}] = 3.0\\,\\mu\\mathrm{M}$, $k_{\\text{off},c} = 3.0\\ \\mathrm{s}^{-1}$, $k_{\\text{cat},c} = 30.0\\ \\mathrm{s}^{-1}$.\n- Near-cognate $n_{1}$: $k_{\\text{on},n_{1}}^{0} = 5.0 \\times 10^{6}\\ \\mathrm{M}^{-1}\\mathrm{s}^{-1}$, $[{\\rm tRNA}_{n_{1}}] = 0.50\\,\\mu\\mathrm{M}$, $k_{\\text{off},n_{1}} = 120.0\\ \\mathrm{s}^{-1}$, $k_{\\text{cat},n_{1}} = 2.00\\ \\mathrm{s}^{-1}$.\n- Near-cognate $n_{2}$: $k_{\\text{on},n_{2}}^{0} = 4.0 \\times 10^{6}\\ \\mathrm{M}^{-1}\\mathrm{s}^{-1}$, $[{\\rm tRNA}_{n_{2}}] = 0.20\\,\\mu\\mathrm{M}$, $k_{\\text{off},n_{2}} = 150.0\\ \\mathrm{s}^{-1}$, $k_{\\text{cat},n_{2}} = 1.00\\ \\mathrm{s}^{-1}$.\n\nStarting only from mass-action kinetics and the memoryless two-step competition on the ribosome described above, derive an analytic expression for the steady-state misincorporation probability $P_{\\text{mis}}$ at this UAG codon (the probability that a completed peptidyl transfer event at this codon results from either near-cognate $n_{1}$ or $n_{2}$ rather than the cognate $c$). Then compute its numerical value using the given parameters. Round your final result to four significant figures and express it as a pure number (dimensionless).", "solution": "The problem asks for the probability of misincorporation, $P_{\\text{mis}}$, at a reassigned UAG codon. The problem is well-posed and scientifically grounded in the principles of chemical kinetics as applied to ribosomal translation. We will proceed by deriving an analytical expression for $P_{\\text{mis}}$ from the given reaction scheme and then compute its numerical value.\n\nThe core of the problem is a kinetic competition among three transfer ribonucleic acid (tRNA) species—one cognate ($c$) and two near-cognates ($n_1$, $n_2$)—for an empty aminoacyl site (A-site) on the ribosome. Let $A$ denote the empty A-site. The interaction of each tRNA species $i$ (where $i \\in \\{c, n_1, n_2\\}$) with the A-site is described by a three-step mechanism: pseudo-first-order binding, dissociation, and catalysis (peptidyl transfer). The kinetic scheme is as follows:\n\n$1$. Binding of tRNA$_i$ to the empty A-site, $A$:\n$$ A \\xrightarrow{k_{\\text{on},i}} A:tRNA_i $$\nwhere $k_{\\text{on},i}$ is the pseudo-first-order rate constant, defined as $k_{\\text{on},i} = k_{\\text{on},i}^{0} [{\\rm tRNA}_{i}]$.\n\n$2$. Once the complex $A:tRNA_i$ is formed, two mutually exclusive, irreversible pathways are possible:\n($2a$) Dissociation of tRNA$_i$, returning the A-site to the empty state:\n$$ A:tRNA_i \\xrightarrow{k_{\\text{off},i}} A $$\n($2b$) Catalysis, where the amino acid carried by tRNA$_i$ is incorporated into the growing polypeptide chain. This is a terminal step for the competition at this codon:\n$$ A:tRNA_i \\xrightarrow{k_{\\text{cat},i}} \\text{Incorporation}_i $$\n\nWe are interested in the steady-state probability that an incorporation event is due to a near-cognate tRNA. This probability is the ratio of the total rate of misincorporation to the total rate of all incorporation events. Let $V_i$ be the steady-state rate of incorporation for species $i$. Then, by definition:\n$$ P_{\\text{mis}} = \\frac{V_{n_1} + V_{n_2}}{V_c + V_{n_1} + V_{n_2}} $$\n\nTo find the rate $V_i$, we apply the steady-state approximation to the intermediate complex $A:tRNA_i$. Let $[A]$ and $[A:tRNA_i]$ represent the steady-state concentrations (or probabilities) of the empty A-site and the A-site bound to tRNA$_i$, respectively. For each species $i$, the rate of formation of the complex must equal its rate of consumption:\n$$ \\frac{d[A:tRNA_i]}{dt} = k_{\\text{on},i} [A] - (k_{\\text{off},i} + k_{\\text{cat},i}) [A:tRNA_i] = 0 $$\nSolving for the steady-state concentration of the complex $[A:tRNA_i]$ gives:\n$$ [A:tRNA_i] = \\frac{k_{\\text{on},i}}{k_{\\text{off},i} + k_{\\text{cat},i}} [A] $$\nThe rate of incorporation for species $i$, $V_i$, is the rate of the catalytic step:\n$$ V_i = k_{\\text{cat},i} [A:tRNA_i] $$\nSubstituting the expression for $[A:tRNA_i]$:\n$$ V_i = k_{\\text{cat},i} \\left( \\frac{k_{\\text{on},i}}{k_{\\text{off},i} + k_{\\text{cat},i}} \\right) [A] $$\nThe term $[A]$ is a common factor for all species and will cancel when we take the ratio to find $P_{\\text{mis}}$. The expression for the misincorporation probability is:\n$$ P_{\\text{mis}} = \\frac{k_{\\text{cat},n_1} \\left( \\frac{k_{\\text{on},n_1}}{k_{\\text{off},n_1} + k_{\\text{cat},n_1}} \\right) [A] + k_{\\text{cat},n_2} \\left( \\frac{k_{\\text{on},n_2}}{k_{\\text{off},n_2} + k_{\\text{cat},n_2}} \\right) [A]}{k_{\\text{cat},c} \\left( \\frac{k_{\\text{on},c}}{k_{\\text{off},c} + k_{\\text{cat},c}} \\right) [A] + k_{\\text{cat},n_1} \\left( \\frac{k_{\\text{on},n_1}}{k_{\\text{off},n_1} + k_{\\text{cat},n_1}} \\right) [A] + k_{\\text{cat},n_2} \\left( \\frac{k_{\\text{on},n_2}}{k_{\\text{off},n_2} + k_{\\text{cat},n_2}} \\right) [A]} $$\nCanceling $[A]$ yields the final analytical expression for $P_{\\text{mis}}$:\n$$ P_{\\text{mis}} = \\frac{ \\sum_{j \\in \\{n_1, n_2\\}} k_{\\text{on},j} \\frac{k_{\\text{cat},j}}{k_{\\text{off},j} + k_{\\text{cat},j}} }{ \\sum_{i \\in \\{c, n_1, n_2\\}} k_{\\text{on},i} \\frac{k_{\\text{cat},i}}{k_{\\text{off},i} + k_{\\text{cat},i}} } $$\nThis expression represents the ratio of effective catalytic fluxes. The term $\\frac{k_{\\text{cat},i}}{k_{\\text{off},i} + k_{\\text{cat},i}}$ is the partitioning factor, representing the probability of catalysis versus dissociation once a tRNA has bound.\n\nNow, we compute the numerical value using the provided parameters.\nFirst, we calculate the pseudo-first-order rate constants $k_{\\text{on},i} = k_{\\text{on},i}^{0} [{\\rm tRNA}_{i}]$:\nFor the cognate species $c$:\n$k_{\\text{on},c} = (6.0 \\times 10^{6}\\ \\mathrm{M}^{-1}\\mathrm{s}^{-1}) \\times (3.0 \\times 10^{-6}\\ \\mathrm{M}) = 18.0\\ \\mathrm{s}^{-1}$\nFor the near-cognate species $n_1$:\n$k_{\\text{on},n_1} = (5.0 \\times 10^{6}\\ \\mathrm{M}^{-1}\\mathrm{s}^{-1}) \\times (0.50 \\times 10^{-6}\\ \\mathrm{M}) = 2.5\\ \\mathrm{s}^{-1}$\nFor the near-cognate species $n_2$:\n$k_{\\text{on},n_2} = (4.0 \\times 10^{6}\\ \\mathrm{M}^{-1}\\mathrm{s}^{-1}) \\times (0.20 \\times 10^{-6}\\ \\mathrm{M}) = 0.80\\ \\mathrm{s}^{-1}$\n\nNext, we calculate the effective flux term, $S_i = k_{\\text{on},i} \\frac{k_{\\text{cat},i}}{k_{\\text{off},i} + k_{\\text{cat},i}}$, for each species.\n$S_c = 18.0 \\times \\frac{30.0}{3.0 + 30.0} = 18.0 \\times \\frac{30.0}{33.0} = \\frac{180}{11}\\ \\mathrm{s}^{-1}$\n$S_{n_1} = 2.5 \\times \\frac{2.00}{120.0 + 2.00} = 2.5 \\times \\frac{2.00}{122.0} = \\frac{5}{122}\\ \\mathrm{s}^{-1}$\n$S_{n_2} = 0.80 \\times \\frac{1.00}{150.0 + 1.00} = 0.80 \\times \\frac{1.00}{151.0} = \\frac{0.8}{151} = \\frac{4}{755}\\ \\mathrm{s}^{-1}$\n\nThe probability of misincorporation is $P_{\\text{mis}} = \\frac{S_{n_1} + S_{n_2}}{S_c + S_{n_1} + S_{n_2}}$.\nThe numerator (total misincorporation flux) is:\n$S_{\\text{mis}} = S_{n_1} + S_{n_2} = \\frac{5}{122} + \\frac{4}{755} = \\frac{5 \\times 755 + 4 \\times 122}{122 \\times 755} = \\frac{3775 + 488}{92110} = \\frac{4263}{92110}\\ \\mathrm{s}^{-1}$\nThe denominator (total incorporation flux) is:\n$S_{\\text{total}} = S_c + S_{\\text{mis}} = \\frac{180}{11} + \\frac{4263}{92110}\\ \\mathrm{s}^{-1}$\n\nNow we compute the ratio:\n$P_{\\text{mis}} = \\frac{\\frac{4263}{92110}}{\\frac{180}{11} + \\frac{4263}{92110}} = \\frac{4263}{180 \\times \\frac{92110}{11} + 4263} = \\frac{4263}{180 \\times 8373.\\overline{63} + 4263}$\nTo avoid rounding errors, we compute the values numerically with high precision:\n$S_c = \\frac{180}{11} \\approx 16.363636...$\n$S_{n_1} = \\frac{5}{122} \\approx 0.0409836...$\n$S_{n_2} = \\frac{4}{755} \\approx 0.0052980...$\n$S_{\\text{mis}} = S_{n_1} + S_{n_2} \\approx 0.0462816...$\n$S_{\\text{total}} = S_c + S_{n_1} + S_{n_2} \\approx 16.363636... + 0.0462816... \\approx 16.409918...$\n$P_{\\text{mis}} = \\frac{S_{\\text{mis}}}{S_{\\text{total}}} \\approx \\frac{0.0462816}{16.409918} \\approx 0.002820349...$\n\nRounding the result to four significant figures gives $0.002820$.", "answer": "$$ \\boxed{0.002820} $$", "id": "2742133"}, {"introduction": "Building on the kinetics of a single codon, we can now assess the cumulative effect of codon choice on the translation of an entire gene. A primary goal of genome refactoring is to optimize protein expression, often by replacing slow-to-translate codons with faster synonymous ones. This exercise uses a Michaelis-Menten-based model to connect local codon dwell times to the total translation elongation time for a messenger RNA [@problem_id:2742019]. Completing this practice will illustrate the powerful link between microscopic kinetic rates and a macroscopic cellular phenotype, providing a practical framework for gene-level design.", "problem": "A refactoring project replaces a rare synonymous codon with a more frequent synonym throughout a single messenger RNA (mRNA) coding sequence. Assume translation elongation at codon $i$ by a single ribosome can be modeled as an enzyme-catalyzed step in which the ribosome accepts a cognate aminoacyl–transfer ribonucleic acid (transfer RNA, tRNA) ternary complex with effective availability proportional to $t_i$, yielding an elongation velocity $v_i$ that follows a Michaelis–Menten form with a codon-dependent pairing efficiency factor $\\eta_i$. Specifically, for codon $i$,\n$$\nv_i \\;=\\; \\frac{k_{\\mathrm{cat}}\\, \\eta_i\\, t_i}{K_M + \\eta_i\\, t_i},\n$$\nand the mean dwell time per codon is $\\tau_i = 1/v_i$. The total elongation time for a coding sequence with codon counts $u_i$ is $T = \\sum_i u_i \\tau_i$, under the assumption that ribosome traffic effects are negligible and codon-wise dwell times add linearly.\n\nYou are given a codon usage vector $\\mathbf{u}$ (counts per codon in the gene) and a tRNA availability vector $\\mathbf{t}$ (relative availability units per codon). Only two synonymous codons differ between the pre- and post-refactoring sequences:\n- The rare codon $c_r$ has count $u_r = 60$ before refactoring and is entirely removed after refactoring (all its instances are replaced).\n- The frequent codon $c_f$ has count $u_f = 120$ before refactoring and increases to $u_f' = u_f + u_r$ after refactoring.\n- All other codon counts and parameters are unchanged and identical before and after refactoring.\n\nThe kinetic parameters and codon-specific quantities are:\n- $k_{\\mathrm{cat}} = 20\\,\\mathrm{s}^{-1}$,\n- $K_M = 4$ (in the same relative availability units as $t_i$),\n- For $c_f$: $t_f = 10$, $\\eta_f = 1.0$,\n- For $c_r$: $t_r = 2$, $\\eta_r = 0.8$.\n\nUsing only the assumptions stated above and standard enzyme kinetics, compute the predicted change in total translation elongation time defined as $\\Delta T = T_{\\mathrm{after}} - T_{\\mathrm{before}}$, in seconds, due solely to replacing all $u_r$ instances of $c_r$ with $c_f$. Express your final answer in seconds, rounded to four significant figures.", "solution": "The problem as stated is scientifically grounded, well-posed, and self-contained. It presents a standard kinetic model applied to a realistic problem in synthetic biology. All required parameters are provided. We may proceed with the solution.\n\nThe objective is to compute the change in total translation elongation time, $\\Delta T$, resulting from the codon refactoring. This change is defined as the total time after refactoring, $T_{\\mathrm{after}}$, minus the total time before refactoring, $T_{\\mathrm{before}}$:\n$$\n\\Delta T = T_{\\mathrm{after}} - T_{\\mathrm{before}}\n$$\nThe total elongation time, $T$, is given by the linear sum of the dwell times for each codon, weighted by their counts in the coding sequence:\n$$\nT = \\sum_i u_i \\tau_i\n$$\nwhere $u_i$ is the count of codon $i$ and $\\tau_i$ is its mean dwell time.\n\nBefore refactoring, the total time is a sum over all codon types, which we can separate into the contributions from the rare codon $c_r$, the frequent codon $c_f$, and all other codons:\n$$\nT_{\\mathrm{before}} = u_r \\tau_r + u_f \\tau_f + \\sum_{k \\neq r, f} u_k \\tau_k\n$$\nAfter refactoring, all $u_r = 60$ instances of the rare codon $c_r$ are replaced by the frequent codon $c_f$. The new codon counts become $u_r' = 0$ and $u_f' = u_f + u_r$. The counts of all other codons, $u_k$ for $k \\neq r, f$, remain unchanged. The total time after refactoring is thus:\n$$\nT_{\\mathrm{after}} = (0) \\tau_r + (u_f + u_r) \\tau_f + \\sum_{k \\neq r, f} u_k \\tau_k = (u_f + u_r) \\tau_f + \\sum_{k \\neq r, f} u_k \\tau_k\n$$\nThe change in total elongation time, $\\Delta T$, is the difference between $T_{\\mathrm{after}}$ and $T_{\\mathrm{before}}$:\n$$\n\\Delta T = \\left( (u_f + u_r) \\tau_f + \\sum_{k \\neq r, f} u_k \\tau_k \\right) - \\left( u_r \\tau_r + u_f \\tau_f + \\sum_{k \\neq r, f} u_k \\tau_k \\right)\n$$\nThe summation term, which represents the contribution from all unchanged codons, cancels out, leaving:\n$$\n\\Delta T = (u_f + u_r) \\tau_f - u_r \\tau_r - u_f \\tau_f = u_f \\tau_f + u_r \\tau_f - u_r \\tau_r - u_f \\tau_f\n$$\nThis expression simplifies to a compact and intuitive form:\n$$\n\\Delta T = u_r (\\tau_f - \\tau_r)\n$$\nThis equation signifies that the total time change is the number of codons modified, $u_r$, multiplied by the change in dwell time per modification, $\\tau_f - \\tau_r$.\n\nNext, we must calculate the dwell times $\\tau_r$ and $\\tau_f$. The mean dwell time $\\tau_i$ is the reciprocal of the elongation velocity $v_i$. From the provided Michaelis–Menten model, we have:\n$$\n\\tau_i = \\frac{1}{v_i} = \\frac{K_M + \\eta_i t_i}{k_{\\mathrm{cat}} \\eta_i t_i}\n$$\nThe given parameters are $k_{\\mathrm{cat}} = 20\\,\\mathrm{s}^{-1}$ and $K_M = 4$.\n\nFor the rare codon $c_r$, the specific quantities are $t_r = 2$ and $\\eta_r = 0.8$. Its dwell time $\\tau_r$ is:\n$$\n\\tau_r = \\frac{K_M + \\eta_r t_r}{k_{\\mathrm{cat}} \\eta_r t_r} = \\frac{4 + (0.8)(2)}{20 \\times (0.8)(2)} = \\frac{4 + 1.6}{20 \\times 1.6} = \\frac{5.6}{32} = 0.175\\,\\mathrm{s}\n$$\nFor the frequent codon $c_f$, the quantities are $t_f = 10$ and $\\eta_f = 1.0$. Its dwell time $\\tau_f$ is:\n$$\n\\tau_f = \\frac{K_M + \\eta_f t_f}{k_{\\mathrm{cat}} \\eta_f t_f} = \\frac{4 + (1.0)(10)}{20 \\times (1.0)(10)} = \\frac{4 + 10}{200} = \\frac{14}{200} = 0.07\\,\\mathrm{s}\n$$\nFinally, we substitute the calculated dwell times and the initial count of the rare codon, $u_r = 60$, into the expression for $\\Delta T$:\n$$\n\\Delta T = 60 \\times (0.07\\,\\mathrm{s} - 0.175\\,\\mathrm{s}) = 60 \\times (-0.105\\,\\mathrm{s})\n$$\n$$\n\\Delta T = -6.3\\,\\mathrm{s}\n$$\nThe problem requires the answer to be expressed in seconds, rounded to four significant figures.\n$$\n\\Delta T = -6.300\\,\\mathrm{s}\n$$\nThe negative sign indicates a decrease in total elongation time, which is the expected outcome of replacing a kinetically slow codon with a faster one.", "answer": "$$\\boxed{-6.300}$$", "id": "2742019"}, {"introduction": "Scaling up from single genes to an entire genome introduces immense logistical and genetic complexity. To successfully reassign codons genome-wide, one must develop a systematic plan that accounts for the location of essential genes, the capabilities of editing tools, and constraints such as genetic linkage. This problem models the challenge of genome-scale refactoring as a constrained combinatorial optimization task [@problem_id:2742059]. By tackling this computational problem, you will develop a high-level, algorithmic perspective on planning complex synthetic biology projects, learning how to find optimal editing strategies that satisfy multiple biological and engineering constraints.", "problem": "You are given a formalized abstraction of genome refactoring for codon reassignment grounded in the Central Dogma of molecular biology: Deoxyribonucleic Acid (DNA) is transcribed to Ribonucleic Acid (RNA) and translated to protein by reading triplet codons. To implement a codon reassignment at the genome scale without disrupting essential protein function, assume the following model. A set of essential genes each has a codon composition over a finite set of codon classes. A set of nonessential loci can be altered to compensate for the reassignment of specific codon classes, but each nonessential locus acts only within its linkage group. Additionally, some pairs of nonessential loci cannot be altered together due to linkage interference constraints.\n\nFormally, let the finite codon class universe be indexed as $C=\\{0,1,\\dots,|C|-1\\}$. You are given:\n\n- A target set $T \\subseteq C$ of codon classes designated for reassignment.\n- A collection of essential genes $G=\\{g_0,g_1,\\dots,g_{n-1}\\}$, each with:\n  - A linkage group label $\\ell(g_i) \\in \\mathbb{Z}_{\\ge 0}$.\n  - A codon composition vector $v_i \\in \\mathbb{Z}_{\\ge 0}^{|C|}$ where $v_i[c]$ is the count of codon class $c$ in $g_i$.\n- A collection of nonessential loci $N=\\{n_0,n_1,\\dots,n_{m-1}\\}$, each with:\n  - A linkage group label $\\ell(n_j) \\in \\mathbb{Z}_{\\ge 0}$.\n  - A capability set $S(n_j) \\subseteq C$ indicating which codon classes a modification at $n_j$ can compensate.\n- An undirected incompatibility set $E \\subseteq \\{\\{i,j\\} \\mid 0 \\le i < j \\le m-1\\}$ specifying pairs of locus indices that cannot be simultaneously altered.\n\nDefine the requirement induced by $G$ and $T$ at each linkage group $x$ as the set $R_x = \\{ c \\in T \\mid \\exists\\, g \\in G \\text{ with } \\ell(g)=x \\text{ and } v_g[c] > 0 \\}$. The goal is to choose a subset $X \\subseteq \\{0,1,\\dots,m-1\\}$ of nonessential locus indices to alter such that:\n\n1) For every linkage group $x$ and every $c \\in R_x$, there exists some $j \\in X$ with $\\ell(n_j)=x$ and $c \\in S(n_j)$.\n\n2) For every distinct $i,j \\in X$, $\\{i,j\\} \\notin E$.\n\nAmong all such feasible $X$, choose one with minimum cardinality $|X|$. If multiple such $X$ exist with equal minimum cardinality, choose the one whose sorted index list is lexicographically smallest. If no feasible $X$ exists, report $-1$.\n\nYour task is to implement a program that, for the test suite below, returns for each case either:\n- The lexicographically smallest sorted list of indices of the minimal-cardinality $X$, or\n- The integer $-1$ when no feasible $X$ exists.\n\nIndices start at $0$.\n\nTest Suite (each case independently specifies $C$, $T$, $G$, $N$, and $E$):\n\n- Case $1$:\n  - $|C| = 2$, $T = \\{0,1\\}$\n  - $G = \\big[(\\ell=0, v=[1,0]),\\,(\\ell=0, v=[0,1]),\\,(\\ell=1, v=[1,1])\\big]$\n  - $N = \\big[(i=0,\\ell=0,S=\\{0\\}),\\,(i=1,\\ell=0,S=\\{1\\}),\\,(i=2,\\ell=1,S=\\{0,1\\}),\\,(i=3,\\ell=1,S=\\{1\\})\\big]$\n  - $E = \\emptyset$\n- Case $2$:\n  - $|C| = 1$, $T = \\{0\\}$\n  - $G = \\big[(\\ell=0, v=[0])\\big]$\n  - $N = \\big[(i=0,\\ell=0,S=\\{0\\})\\big]$\n  - $E = \\emptyset$\n- Case $3$:\n  - $|C| = 1$, $T = \\{0\\}$\n  - $G = \\big[(\\ell=0, v=[1]),\\,(\\ell=1, v=[1])\\big]$\n  - $N = \\big[(i=0,\\ell=0,S=\\{0\\}),\\,(i=1,\\ell=1,S=\\{0\\}),\\,(i=2,\\ell=1,S=\\{0\\})\\big]$\n  - $E = \\big\\{\\{0,1\\}\\big\\}$\n- Case $4$:\n  - $|C| = 2$, $T = \\{0,1\\}$\n  - $G = \\big[(\\ell=0, v=[0,1]),\\,(\\ell=1, v=[1,0])\\big]$\n  - $N = \\big[(i=0,\\ell=0,S=\\{0\\}),\\,(i=1,\\ell=1,S=\\{1\\})\\big]$\n  - $E = \\emptyset$\n\nFinal Output Format: Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets (e.g., \"[result_case1,result_case2,result_case3,result_case4]\"). Each result is either a list of integers (the sorted indices of the chosen nonessential loci) or the integer $-1$ when no solution exists. No additional whitespace or text is permitted in the output.", "solution": "The problem presented is a formal model of genome refactoring for codon reassignment, framed as a combinatorial optimization task. Before proceeding to a solution, a rigorous validation is required.\n\n### Step 1: Extract Givens\n\nThe problem provides the following formal definitions and data:\n- A finite set of codon classes, indexed as $C=\\{0,1,\\dots,|C|-1\\}$.\n- A target set of codon classes for reassignment, $T \\subseteq C$.\n- A collection of essential genes, $G=\\{g_0,g_1,\\dots,g_{n-1}\\}$. Each gene $g_i$ is defined by a pair:\n    - A linkage group label $\\ell(g_i) \\in \\mathbb{Z}_{\\ge 0}$.\n    - A codon composition vector $v_i \\in \\mathbb{Z}_{\\ge 0}^{|C|}$, where $v_i[c]$ is the count of codon class $c$.\n- A collection of nonessential loci, $N=\\{n_0,n_1,\\dots,n_{m-1}\\}$. Each locus $n_j$ is defined by:\n    - An index $j$.\n    - A linkage group label $\\ell(n_j) \\in \\mathbb{Z}_{\\ge 0}$.\n    - A capability set $S(n_j) \\subseteq C$, indicating codon classes it can compensate for.\n- An undirected incompatibility set $E \\subseteq \\{\\{i,j\\} \\mid 0 \\le i < j \\le m-1\\}$, specifying pairs of locus indices that cannot be simultaneously altered.\n- A definition for the requirement at each linkage group $x$: $R_x = \\{ c \\in T \\mid \\exists\\, g \\in G \\text{ with } \\ell(g)=x \\text{ and } v_g[c] > 0 \\}$.\n\nThe objective is to find a subset of nonessential locus indices, $X \\subseteq \\{0,1,\\dots,m-1\\}$, that satisfies two conditions:\n1.  **Coverage Condition**: For every linkage group $x$ and every codon class $c \\in R_x$, there must exist some $j \\in X$ such that the locus $n_j$ belongs to the same linkage group ($\\ell(n_j)=x$) and can compensate for the codon class ($c \\in S(n_j)$).\n2.  **Incompatibility Condition**: For every distinct pair of indices $i,j \\in X$, the pair must not be in the incompatibility set, i.e., $\\{i,j\\} \\notin E$.\n\nThe optimization goal is to find a feasible $X$ that:\n- First, has the minimum possible cardinality, $|X|$.\n- Second, among all sets with minimum cardinality, is lexicographically smallest when its indices are sorted.\n\nIf no such feasible set $X$ exists, a value of $-1$ is to be reported.\n\n### Step 2: Validate Using Extracted Givens\n\nThe problem is subjected to validation against the specified criteria.\n\n- **Scientifically Grounded**: The problem is a valid abstraction of a genuine challenge in synthetic biology. Concepts such as genes, codons, linkage groups (representing chromosomes or physically linked regions), and genetic interference (modeled by the incompatibility set $E$) are fundamental to genetics and molecular biology. The model, while a simplification, is based on sound scientific principles. It is not pseudoscientific.\n- **Well-Posed**: The problem is mathematically well-defined. It constitutes a constrained optimization problem on a finite set. The objective function (minimizing cardinality, then lexicographically) and constraints (coverage and incompatibility) are stated with precision. A solution is guaranteed to either exist or be proven non-existent within the finite search space of subsets of $N$.\n- **Objective**: The problem statement uses formal, objective language and mathematical notation, devoid of any subjectivity or ambiguity.\n- **Flaw Analysis**:\n    1.  **Scientific/Factual Unsoundness**: None. The model is a plausible, albeit abstract, representation.\n    2.  **Non-Formalizable/Irrelevant**: None. The problem is already formalized and is directly relevant to the specified topic.\n    3.  **Incomplete/Contradictory**: None. The givens and constraints are self-contained and not inherently contradictory.\n    4.  **Unrealistic/Infeasible**: None. The model operates on abstract data, which is internally consistent.\n    5.  **Ill-Posed/Poorly Structured**: None. The optimization criteria are clear and ensure a unique optimal solution exists if any solution exists.\n    6.  **Pseudo-Profound/Trivial**: The problem is a variant of the set cover problem, with an additional graph-theoretic constraint (finding an independent set). This is a known NP-hard class of problem in its general form, making it computationally non-trivial. The small scale of the test cases does not diminish the conceptual validity of the problem.\n    7.  **Outside Scientific Verifiability**: None. The problem is a self-contained computational task that can be solved and verified.\n\n### Step 3: Verdict and Action\n\nThe problem is **valid**. A solution will be developed.\n\n### Solution Design\n\nThe problem requires finding an optimal subset of nonessential loci. Given the small number of loci ($m$) in the test cases, a systematic search through the space of possible solutions is feasible. The optimization criteria—minimal cardinality, then lexicographically smallest—naturally suggest an iterative, ordered search.\n\nThe algorithm proceeds as follows:\n\n1.  **Determine Requirements**: For each linkage group $x$ present in the set of essential genes $G$, we first compute the set of required codon classes $R_x$. According to the definition, $R_x = \\{ c \\in T \\mid \\exists\\, g \\in G, \\ell(g)=x, v_g[c] > 0 \\}$. This can be implemented by iterating through all genes, and for each gene, adding its required codon classes (those in $T$ with counts greater than $0$) to the requirement set of its corresponding linkage group. If no gene requires any codon from $T$, the requirement set is empty, and the optimal solution is the empty set of loci, $X = \\emptyset$.\n\n2.  **Systematic Search**: We search for a solution set $X$ by iterating through all possible cardinalities, $k$, from $k=0$ up to $m=|N|$. For each $k$, we generate all combinations of $k$ locus indices from the set $\\{0, 1, \\dots, m-1\\}$. Crucially, these combinations must be generated in lexicographical order. The `itertools.combinations` function in Python provides this ordering by default.\n\n3.  **Validate Candidate Solutions**: For each generated candidate set $X$, we must verify if it is feasible by checking both conditions:\n    a.  **Incompatibility Check**: The set $X$ must be an independent set in the graph whose vertices are the loci and edges are the pairs in $E$. We iterate through all pairs of distinct indices $\\{i, j\\} \\subseteq X$ and check if $\\{i,j\\} \\in E$. If any such pair is found in $E$, $X$ is invalid, and we proceed to the next candidate.\n    b.  **Coverage Check**: If $X$ passes the incompatibility check, we verify if it satisfies all requirements. For each linkage group $x$ with a non-empty requirement set $R_x$, we check if the loci in $X$ that belong to linkage group $x$ collectively cover all codon classes in $R_x$. That is, for each $c \\in R_x$, we must find a $j \\in X$ such that $\\ell(n_j) = x$ and $c \\in S(n_j)$. If any requirement for any linkage group is not met, $X$ is invalid.\n\n4.  **Identify Optimal Solution**: Because we are iterating through subset sizes $k$ in increasing order, and for each $k$, iterating through subsets in lexicographical order, the *first* feasible set $X$ we find is guaranteed to be the optimal one. It has the minimum cardinality, and among all sets of that minimal cardinality, it is the lexicographically smallest.\n\n5.  **Handle No-Solution Case**: If the search completes (i.e., we have checked all subsets of all possible sizes) without finding any feasible set $X$, we conclude that no solution exists. In this case, the specified output is $-1$.\n\nThis exhaustive but structured search guarantees finding the correct answer as defined by the problem's strict optimization criteria. We will apply this algorithm to each provided test case.", "answer": "```\n[[0,1,2],[],[0,2],-1]\n```", "id": "2742059"}]}