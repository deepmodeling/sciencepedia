{"hands_on_practices": [{"introduction": "A fundamental challenge in growing three-dimensional tissues is ensuring an adequate supply of oxygen and nutrients to all cells. This practice explores this critical biophysical constraint by asking you to derive the maximum theoretical size of a spherical organoid before its core becomes anoxic, or oxygen-deprived [@problem_id:2622583]. By applying Fick's laws of diffusion within a reaction-diffusion model, you will gain a quantitative understanding of how metabolic rate and nutrient availability dictate the limits of organoid viability, a crucial consideration for any 3D culture system.", "problem": "A cerebral organoid maintained in a well-mixed bioreactor is approximately spherical with radius $R$. Oxygen is supplied from the culture medium at the organoid surface, where the dissolved oxygen concentration is held at $c_{0}$ by fast external transport. Inside the organoid there is no convection, and oxygen diffuses with molecular diffusivity $D$ through a homogeneous cellular matrix that consumes oxygen at a uniform, zero-order volumetric rate $q$ (moles per unit volume per unit time), reflecting saturating intracellular kinetics at the operating concentrations. Assume quasi-steady state.\n\nStarting only from Fick’s first law of diffusion, $\\mathbf{J}=-D \\nabla c$, and conservation of mass at steady state, derive the closed-form expression for the largest radius $R_{\\max}$ such that the center just reaches anoxia, that is, $c(0)=0$ while $c(R_{\\max})=c_{0}$. You may assume spherical symmetry and the regularity condition at the center implied by symmetry. Express your final answer for $R_{\\max}$ in terms of $D$, $q$, and $c_{0}$ as a single analytic expression. Do not introduce any additional empirical formulas or fitting parameters.", "solution": "The problem requires the derivation of the maximum radius $R_{\\max}$ of a spherical organoid for which the center is just anoxic, given a constant surface oxygen concentration $c_0$, a uniform zero-order consumption rate $q$, and a constant oxygen diffusivity $D$. The derivation must begin from Fick's first law and the principle of mass conservation at steady state.\n\nWe begin with the general differential mass balance for a species with concentration $c$ in a control volume:\n$$\n\\frac{\\partial c}{\\partial t} = -\\nabla \\cdot \\mathbf{J} + S\n$$\nHere, $\\frac{\\partial c}{\\partial t}$ is the rate of accumulation of the species, $\\mathbf{J}$ is the molar flux vector, and $S$ is the net rate of generation per unit volume.\n\nThe problem specifies several conditions:\n1.  **Quasi-steady state:** The system does not change in time, so the accumulation term is zero: $\\frac{\\partial c}{\\partial t} = 0$.\n2.  **Fick's first law:** The flux $\\mathbf{J}$ is due to diffusion and is given by $\\mathbf{J} = -D \\nabla c$, where $D$ is the molecular diffusivity, assumed to be constant.\n3.  **Zero-order consumption:** Oxygen is consumed at a uniform rate $q$. This corresponds to a sink term $S = -q$.\n\nSubstituting these conditions into the mass balance equation yields:\n$$\n0 = -\\nabla \\cdot (-D \\nabla c) - q\n$$\nAssuming the diffusivity $D$ is a constant, we can move it outside the divergence operator:\n$$\n0 = D (\\nabla \\cdot \\nabla c) - q\n$$\nThis simplifies to the Poisson equation for reaction-diffusion:\n$$\nD \\nabla^2 c = q\n$$\n\nThe problem states the organoid is spherical and we can assume spherical symmetry. Therefore, the concentration $c$ is a function only of the radial coordinate $r$, i.e., $c = c(r)$. In spherical coordinates, the Laplacian operator $\\nabla^2$ acting on a function of only $r$ is:\n$$\n\\nabla^2 c = \\frac{1}{r^2}\\frac{d}{dr}\\left(r^2 \\frac{dc}{dr}\\right)\n$$\nSubstituting this into our governing equation gives the ordinary differential equation (ODE) for the concentration profile:\n$$\n\\frac{D}{r^2}\\frac{d}{dr}\\left(r^2 \\frac{dc}{dr}\\right) = q\n$$\n\nTo solve this ODE for $c(r)$, we integrate with respect to $r$. First, we rearrange the equation:\n$$\n\\frac{d}{dr}\\left(r^2 \\frac{dc}{dr}\\right) = \\frac{q}{D} r^2\n$$\nIntegrating once with respect to $r$ gives:\n$$\nr^2 \\frac{dc}{dr} = \\int \\frac{q}{D} r^2 \\, dr = \\frac{q}{3D} r^3 + C_1\n$$\nwhere $C_1$ is the first integration constant. To find $C_1$, we apply a boundary condition at the center of the sphere, $r=0$. Due to spherical symmetry, the concentration profile must be smooth at the center, meaning the concentration gradient must be zero. A non-zero gradient would imply a physically impossible source or sink at the origin. This is the regularity condition.\n$$\n\\left. \\frac{dc}{dr} \\right|_{r=0} = 0\n$$\nTo apply this, we first solve for the gradient $\\frac{dc}{dr}$:\n$$\n\\frac{dc}{dr} = \\frac{q}{3D} r + \\frac{C_1}{r^2}\n$$\nAt $r=0$, the term $\\frac{C_1}{r^2}$ is singular unless $C_1=0$. Therefore, we must have $C_1=0$.\nThe gradient expression simplifies to:\n$$\n\\frac{dc}{dr} = \\frac{q}{3D} r\n$$\nNow, we integrate a second time to find the concentration profile $c(r)$:\n$$\nc(r) = \\int \\frac{q}{3D} r \\, dr = \\frac{q}{6D} r^2 + C_2\n$$\nwhere $C_2$ is the second integration constant.\n\nWe now use the specific conditions for the critical radius $R_{\\max}$. This radius is defined as the size where the center just becomes anoxic. This provides two boundary conditions for our specific case:\n1.  At the center, $r=0$, the concentration is zero: $c(0) = 0$.\n2.  At the surface, $r=R_{\\max}$, the concentration is maintained at $c_0$: $c(R_{\\max}) = c_0$.\n\nUsing the first condition, $c(0)=0$:\n$$\nc(0) = \\frac{q}{6D} (0)^2 + C_2 = 0 \\implies C_2 = 0\n$$\nThus, the concentration profile for an organoid with an anoxic core is:\n$$\nc(r) = \\frac{q}{6D} r^2\n$$\nNow, we apply the second condition at the surface $r=R_{\\max}$:\n$$\nc(R_{\\max}) = c_0\n$$\nSubstituting $r=R_{\\max}$ into the concentration profile yields:\n$$\nc_0 = \\frac{q}{6D} R_{\\max}^2\n$$\nFinally, we solve for the maximum radius, $R_{\\max}$, by rearranging the equation:\n$$\nR_{\\max}^2 = \\frac{6 D c_0}{q}\n$$\nTaking the square root, and noting that a radius must be positive, we obtain the final expression:\n$$\nR_{\\max} = \\sqrt{\\frac{6 D c_0}{q}}\n$$\nThis expression represents the largest possible radius a spherical tissue can have before a region of complete oxygen deprivation (anoxia) develops at its center, under the specified model conditions.", "answer": "$$\\boxed{\\sqrt{\\frac{6 D c_{0}}{q}}}$$", "id": "2622583"}, {"introduction": "Beyond physical constraints, the true power of organoids lies in their ability to self-organize and maintain tissue-like structures through complex cellular dynamics. This exercise abstracts the intestinal crypt-villus axis into a compartmental model to explore the principles of tissue homeostasis [@problem_id:2622421]. By balancing the fluxes of cell proliferation, differentiation, and loss, you will calculate the steady-state populations of different cell types, providing a quantitative lens through which to understand how tissues maintain their form and function.", "problem": "An intestinal organoid can be idealized as three serial compartments along the crypt–villus axis: a self-renewing stem cell pool at the crypt base, a proliferative Transit-Amplifying (TA) progenitor pool, and terminally differentiated villus enterocytes. Assume the following mechanistic features rooted in conservation of cell number and first-order kinetics for fate transitions:\n\n- The stem cell compartment size is maintained by niche feedback at a constant value $S_{0}$ (cells). Each stem cell commits to the progenitor state with a per-capita transition rate $k_{ST}$ (in $\\mathrm{day}^{-1}$), generating flux into the TA pool. You may treat $S_{0}$ as externally fixed by the niche and not determined by the dynamics below.\n- Each TA cell proliferates with a net per-capita division rate $\\lambda_{T}$ (in $\\mathrm{day}^{-1}$), differentiates into a villus cell with a per-capita rate $k_{TV}$ (in $\\mathrm{day}^{-1}$), and is lost (death) with a per-capita rate $\\delta_{T}$ (in $\\mathrm{day}^{-1}$). All processes are independent and memoryless.\n- Each villus cell is lost (shedding/apoptosis) with a per-capita rate $\\delta_{V}$ (in $\\mathrm{day}^{-1}$). There is no proliferation in the villus compartment.\n\nAssume homeostasis (steady state) so that the expected cell numbers in the TA and villus compartments are time-invariant and the flux from stem to TA equals the downstream fluxes. Using only conservation of cell number for each compartment at steady state and the definitions above, first derive expressions for the steady-state TA and villus cell numbers, $T^{\\ast}$ and $V^{\\ast}$, in terms of $S_{0}$ and the rates $k_{ST}$, $\\lambda_{T}$, $k_{TV}$, $\\delta_{T}$, and $\\delta_{V}$.\n\nThen, for the parameter values $S_{0}=100$ (cells), $k_{ST}=0.3\\,\\mathrm{day}^{-1}$, $\\lambda_{T}=0.8\\,\\mathrm{day}^{-1}$, $k_{TV}=1.0\\,\\mathrm{day}^{-1}$, $\\delta_{T}=0.2\\,\\mathrm{day}^{-1}$, and $\\delta_{V}=0.5\\,\\mathrm{day}^{-1}$, compute the steady-state fraction of villus cells among all cells,\n$$\nf_{V} \\equiv \\frac{V^{\\ast}}{S_{0}+T^{\\ast}+V^{\\ast}}.\n$$\nExpress your final answer as a unitless decimal, rounded to four significant figures.", "solution": "The problem statement is subjected to validation before a solution is attempted.\n\n**Step 1: Extract Givens**\n-   The system comprises three compartments: a stem cell pool ($S$), a Transit-Amplifying (TA) progenitor pool ($T$), and a villus enterocyte pool ($V$).\n-   Stem cell compartment size is a constant, $S_{0}$.\n-   Per-capita transition rate from stem cell to TA state: $k_{ST}$ [$\\mathrm{day}^{-1}$].\n-   Net per-capita proliferation rate of TA cells: $\\lambda_{T}$ [$\\mathrm{day}^{-1}$].\n-   Per-capita differentiation rate from TA to villus state: $k_{TV}$ [$\\mathrm{day}^{-1}$].\n-   Per-capita loss rate of TA cells: $\\delta_{T}$ [$\\mathrm{day}^{-1}$].\n-   Per-capita loss rate of villus cells: $\\delta_{V}$ [$\\mathrm{day}^{-1}$].\n-   The system is at homeostasis (steady state), where cell numbers $T^{\\ast}$ and $V^{\\ast}$ are time-invariant.\n-   Parameter values for numerical calculation: $S_{0}=100$, $k_{ST}=0.3\\,\\mathrm{day}^{-1}$, $\\lambda_{T}=0.8\\,\\mathrm{day}^{-1}$, $k_{TV}=1.0\\,\\mathrm{day}^{-1}$, $\\delta_{T}=0.2\\,\\mathrm{day}^{-1}$, $\\delta_{V}=0.5\\,\\mathrm{day}^{-1}$.\n-   Objective: Derive expressions for $T^{\\ast}$ and $V^{\\ast}$, and then compute the fraction $f_{V} \\equiv \\frac{V^{\\ast}}{S_{0}+T^{\\ast}+V^{\\ast}}$.\n\n**Step 2: Validate Using Extracted Givens**\n-   **Scientifically Grounded**: The problem describes a simplified but standard compartmental model of tissue homeostasis, a cornerstone of quantitative developmental biology and systems biology. It is based on first-order kinetics, which is a common and valid approximation. All concepts are well-established.\n-   **Well-Posed**: The problem is mathematically well-posed. It asks for the steady-state solution of a system of linear ordinary differential equations. The provided parameters lead to a unique, stable, and positive steady state, as the effective loss rate for TA cells, $k_{TV} + \\delta_{T} - \\lambda_{T}$, is positive ($1.0 + 0.2 - 0.8 = 0.4 > 0$), ensuring stability.\n-   **Objective**: The problem is stated with precise, unambiguous scientific terminology. There is no subjective content.\n-   **Completeness**: All necessary parameters, definitions, and conditions (steady state) are provided to find a unique solution.\n\n**Step 3: Verdict and Action**\nThe problem is deemed valid. A solution will be provided.\n\nThe problem requires the derivation of steady-state cell numbers for the Transit-Amplifying (TA) and villus ($V$) compartments based on the principle of conservation of cell number, which at homeostasis dictates that the total influx of cells into a compartment must equal the total outflux from it.\n\nLet $T^{\\ast}$ and $V^{\\ast}$ represent the number of cells in the TA and villus compartments at steady state, respectively. The number of stem cells is fixed at $S_{0}$.\n\nFor the TA compartment, we balance the fluxes:\nThe total influx into the TA compartment is the sum of cells arriving from the stem cell pool and cells generated by proliferation within the TA pool itself.\n$$\n\\text{Flux in}_{T} = k_{ST} S_{0} + \\lambda_{T} T^{\\ast}\n$$\nThe total outflux from the TA compartment is the sum of cells lost to differentiation into villus cells and cells lost to death.\n$$\n\\text{Flux out}_{T} = k_{TV} T^{\\ast} + \\delta_{T} T^{\\ast} = (k_{TV} + \\delta_{T}) T^{\\ast}\n$$\nAt steady state, $\\text{Flux in}_{T} = \\text{Flux out}_{T}$:\n$$\nk_{ST} S_{0} + \\lambda_{T} T^{\\ast} = (k_{TV} + \\delta_{T}) T^{\\ast}\n$$\nWe solve this algebraic equation for $T^{\\ast}$:\n$$\nk_{ST} S_{0} = (k_{TV} + \\delta_{T}) T^{\\ast} - \\lambda_{T} T^{\\ast}\n$$\n$$\nk_{ST} S_{0} = (k_{TV} + \\delta_{T} - \\lambda_{T}) T^{\\ast}\n$$\nThus, the steady-state number of TA cells is:\n$$\nT^{\\ast} = \\frac{k_{ST} S_{0}}{k_{TV} + \\delta_{T} - \\lambda_{T}}\n$$\n\nNext, we perform the same flux balance for the villus compartment.\nThe influx into the villus compartment is solely from the differentiation of TA cells. There is no proliferation in this compartment.\n$$\n\\text{Flux in}_{V} = k_{TV} T^{\\ast}\n$$\nThe outflux from the villus compartment is due to cell shedding and apoptosis.\n$$\n\\text{Flux out}_{V} = \\delta_{V} V^{\\ast}\n$$\nAt steady state, $\\text{Flux in}_{V} = \\text{Flux out}_{V}$:\n$$\nk_{TV} T^{\\ast} = \\delta_{V} V^{\\ast}\n$$\nSolving for $V^{\\ast}$:\n$$\nV^{\\ast} = \\frac{k_{TV} T^{\\ast}}{\\delta_{V}}\n$$\nSubstituting the previously derived expression for $T^{\\ast}$:\n$$\nV^{\\ast} = \\frac{k_{TV}}{\\delta_{V}} \\left( \\frac{k_{ST} S_{0}}{k_{TV} + \\delta_{T} - \\lambda_{T}} \\right)\n$$\nThese are the required analytical expressions for $T^{\\ast}$ and $V^{\\ast}$.\n\nNow, we substitute the given numerical values to compute the specific cell numbers:\n$S_{0}=100$, $k_{ST}=0.3$, $\\lambda_{T}=0.8$, $k_{TV}=1.0$, $\\delta_{T}=0.2$, and $\\delta_{V}=0.5$.\n\nFirst, we calculate $T^{\\ast}$:\n$$\nT^{\\ast} = \\frac{(0.3)(100)}{1.0 + 0.2 - 0.8} = \\frac{30}{0.4} = 75\n$$\nSo, there are $75$ TA cells at steady state.\n\nNext, we calculate $V^{\\ast}$:\n$$\nV^{\\ast} = \\frac{k_{TV} T^{\\ast}}{\\delta_{V}} = \\frac{1.0 \\times 75}{0.5} = 150\n$$\nSo, there are $150$ villus cells at steady state.\n\nThe final step is to compute the fraction of villus cells among all cells, $f_{V}$:\n$$\nf_{V} = \\frac{V^{\\ast}}{S_{0} + T^{\\ast} + V^{\\ast}}\n$$\nThe total number of cells in the organoid model is:\n$$\nS_{0} + T^{\\ast} + V^{\\ast} = 100 + 75 + 150 = 325\n$$\nThe fraction is:\n$$\nf_{V} = \\frac{150}{325}\n$$\nTo express this as a decimal, we perform the division:\n$$\nf_{V} = \\frac{150}{325} = \\frac{6 \\times 25}{13 \\times 25} = \\frac{6}{13} \\approx 0.46153846...\n$$\nRounding to four significant figures, we obtain:\n$$\nf_{V} \\approx 0.4615\n$$", "answer": "$$\n\\boxed{0.4615}\n$$", "id": "2622421"}, {"introduction": "A primary goal of organoid research is to create models that faithfully recapitulate in vivo development, but how do we quantitatively assess this fidelity, especially when developmental timing may differ? This computational practice introduces Dynamic Time Warping (DTW) as a powerful method for aligning the gene expression trajectory of an organoid with that of its in vivo counterpart [@problem_id:2622535]. By implementing this algorithm, you will learn how to correct for developmental heterochrony and create a precise temporal map, a key skill for validating organoid models and interpreting their data.", "problem": "You are tasked with building a complete temporal alignment analysis that maps organoid gene expression trajectories onto in vivo developmental timelines using Dynamic Time Warping (DTW). The goal is to compute, for each organoid sampling time, the corresponding in vivo developmental time that best aligns multidimensional gene expression profiles under a monotone, continuous time-warping constraint.\n\nScientific base to use:\n- The Central Dogma of molecular biology states that DNA is transcribed to RNA and translated to protein; messenger RNA abundance profiles across time provide a well-tested proxy for temporal gene regulatory state during organogenesis.\n- In developmental biology, heterochrony is common: organoid systems often reproduce in vivo gene expression programs with phase shifts or dilations. DTW is a well-established method for aligning two sequences that may be out of phase or differ in sampling density, by minimizing cumulative distance under monotone path constraints.\n\nMathematical formulation to implement:\n- Let the in vivo trajectory be a sequence of time points $\\{t_j^{\\mathrm{in}}\\}_{j=0}^{m-1}$ (in days) with corresponding gene expression vectors $\\{\\mathbf{x}_j^{\\mathrm{in}}\\in\\mathbb{R}^G\\}_{j=0}^{m-1}$ over $G$ genes, and the organoid trajectory be $\\{t_i^{\\mathrm{org}}\\}_{i=0}^{n-1}$ with $\\{\\mathbf{x}_i^{\\mathrm{org}}\\in\\mathbb{R}^G\\}_{i=0}^{n-1}$. Define the pointwise cost as the Euclidean distance $d(i,j)=\\lVert \\mathbf{x}_i^{\\mathrm{org}}-\\mathbf{x}_j^{\\mathrm{in}}\\rVert_2$.\n- Compute the DTW cumulative cost matrix $D\\in\\mathbb{R}^{n\\times m}$ using dynamic programming with allowed steps $\\{(1,0),(0,1),(1,1)\\}$, enforcing monotonicity and continuity from $(0,0)$ to $(n-1,m-1)$. Initialize $D_{0,0}=d(0,0)$ and use valid predecessors on the top row and left column accordingly. At each $(i,j)$, the recurrence adds $d(i,j)$ to the minimal admissible predecessor. When multiple predecessors are tied, break ties by preferring $(1,1)$ over $(0,1)$ over $(1,0)$.\n- Backtrack from $(n-1,m-1)$ to $(0,0)$ to extract an optimal warping path $\\mathcal{P}=\\{(i_k,j_k)\\}_{k=0}^{K-1}$ with $i_{k+1}-i_k\\in\\{0,1\\}$, $j_{k+1}-j_k\\in\\{0,1\\}$, and $(i_{k+1}-i_k)+(j_{k+1}-j_k)\\in\\{1,2\\}$.\n- Define the organoid-to-in vivo time map $f:\\{0,\\dots,n-1\\}\\to\\mathbb{R}$ by averaging the in vivo times paired to each organoid index along the optimal path: for each organoid index $i$, let $J(i)=\\{j\\mid (i,j)\\in\\mathcal{P}\\}$ and set $f(i)=\\frac{1}{|J(i)|}\\sum_{j\\in J(i)} t_j^{\\mathrm{in}}$. Express $f(i)$ in days as real numbers rounded to three decimals.\n\nYour program must:\n- Implement the above DTW algorithm in a numerically robust way.\n- Apply it to the test suite below.\n- For each test case, output the list $[f(0),f(1),\\dots,f(n-1)]$ in days, each rounded to three decimals.\n- Aggregate the three test-case results into a single line as a list of lists: for example, if there are three test cases with results $\\mathrm{R}_1$, $\\mathrm{R}_2$, $\\mathrm{R}_3$, the output must be a single line of the form $[\\mathrm{R}_1,\\mathrm{R}_2,\\mathrm{R}_3]$ where each $\\mathrm{R}_k$ is a bracketed, comma-separated list of decimals.\n\nDistance metric:\n- Use the Euclidean norm in gene-expression space $\\mathbb{R}^G$.\n\nTie-breaking:\n- When predecessor cumulative costs are exactly equal within floating tolerance, prefer the diagonal step $(1,1)$, then the horizontal step $(0,1)$, then the vertical step $(1,0)$.\n\nAngle units:\n- Not applicable.\n\nPhysical units:\n- All times must be expressed in days. Report each mapped time as a real number in days rounded to three decimals.\n\nTest suite (all arrays are explicit and must be used exactly as given):\n\nTest case $1$ (brain organoid to in vivo cortex-like trajectory; $G=3$ genes; in vivo times $6$ points; organoid times $6$ points):\n- In vivo times (days): $[0.0,10.0,20.0,30.0,40.0,50.0]$\n- Organoid times (days): $[0.0,3.0,8.0,15.0,28.0,40.0]$\n- In vivo expressions $\\mathbf{x}_j^{\\mathrm{in}}=[g_1,g_2,g_3]$:\n  - $t=0.0$: $[1.000,0.027,0.017]$\n  - $t=10.0$: $[0.717,0.105,0.360]$\n  - $t=20.0$: $[0.513,0.328,1.000]$\n  - $t=30.0$: $[0.368,0.671,0.360]$\n  - $t=40.0$: $[0.264,0.895,0.017]$\n  - $t=50.0$: $[0.189,0.973,0.0001]$\n- Organoid expressions $\\mathbf{x}_i^{\\mathrm{org}}=[g_1,g_2,g_3]$:\n  - $t=0.0$: $[1.000,0.027,0.017]$\n  - $t=3.0$: $[0.905,0.042,0.052]$\n  - $t=8.0$: $[0.766,0.081,0.230]$\n  - $t=15.0$: $[0.607,0.193,0.775]$\n  - $t=28.0$: $[0.394,0.606,0.520]$\n  - $t=40.0$: $[0.264,0.895,0.017]$\n\nTest case $2$ (intestinal organoid to in vivo gut-like trajectory; $G=3$ genes; in vivo times $6$ points; organoid times $6$ points):\n- In vivo times (days): $[0.0,5.0,10.0,15.0,25.0,35.0]$\n- Organoid times (days): $[0.0,2.0,6.0,12.0,18.0,30.0]$\n- In vivo expressions $\\mathbf{x}_j^{\\mathrm{in}}=[g_1,g_2,g_3]$:\n  - $t=0.0$: $[0.066,0.249,0.011]$\n  - $t=5.0$: $[0.269,1.000,0.037]$\n  - $t=10.0$: $[0.661,0.249,0.119]$\n  - $t=15.0$: $[0.911,0.0039,0.321]$\n  - $t=25.0$: $[0.997,0.000,0.852]$\n  - $t=35.0$: $[1.000,0.000,0.986]$\n- Organoid expressions $\\mathbf{x}_i^{\\mathrm{org}}=[g_1,g_2,g_3]$:\n  - $t=0.0$: $[0.066,0.249,0.011]$\n  - $t=2.0$: $[0.119,0.607,0.018]$\n  - $t=6.0$: $[0.339,0.946,0.047]$\n  - $t=12.0$: $[0.791,0.066,0.183]$\n  - $t=18.0$: $[0.966,0.0001,0.500]$\n  - $t=30.0$: $[0.999,0.000,0.953]$\n\nTest case $3$ (edge case with constant expression; $G=2$ genes; in vivo times $4$ points; organoid times $3$ points):\n- In vivo times (days): $[0.0,1.0,2.0,3.0]$\n- Organoid times (days): $[0.0,1.0,2.0]$\n- In vivo expressions $\\mathbf{x}_j^{\\mathrm{in}}=[g_1,g_2]$ at all times: $[0.5,0.5]$\n- Organoid expressions $\\mathbf{x}_i^{\\mathrm{org}}=[g_1,g_2]$ at all times: $[0.5,0.5]$\n\nFinal output format requirement:\n- Your program should produce a single line of output containing the three result lists as a comma-separated list enclosed in square brackets. For example: $[[1.000,2.000],[3.000,4.000,5.000],[6.000]]$ (this is only an example of formatting, not the correct answer). Each value must be a real number in days rounded to three decimals, and each test case’s result must appear in the same order as the test cases are listed above.", "solution": "The problem statement has been subjected to rigorous validation and is deemed valid. It is scientifically grounded in molecular and developmental biology, mathematically well-posed, and provides a complete, self-contained specification for a computational task. The defined task is to implement a Dynamic Time Warping (DTW) algorithm to align temporal gene expression data from organoid cultures with corresponding in vivo developmental data. While there is a minor terminological inconsistency in the description of the tie-breaking rule, the intended logic is unambiguous from the provided vector notation and can be resolved without compromising the integrity of the problem.\n\nThe solution proceeds by implementing the specified temporal alignment analysis. The core of this analysis is the DTW algorithm, a standard method for comparing two temporal sequences that may vary in speed.\n\n**Methodology**\n\nLet the in vivo reference trajectory be a sequence of $m$ gene expression vectors $\\{\\mathbf{x}_j^{\\mathrm{in}} \\in \\mathbb{R}^G\\}_{j=0}^{m-1}$ sampled at times $\\{t_j^{\\mathrm{in}}\\}_{j=0}^{m-1}$. Let the organoid trajectory be a sequence of $n$ vectors $\\{\\mathbf{x}_i^{\\mathrm{org}} \\in \\mathbb{R}^G\\}_{i=0}^{n-1}$ sampled at times $\\{t_i^{\\mathrm{org}}\\}_{i=0}^{n-1}$. The objective is to find a mapping function $f: \\{0, \\dots, n-1\\} \\to \\mathbb{R}$ where $f(i)$ represents the in vivo developmental time corresponding to the $i$-th organoid time point.\n\nThe procedure is executed in four steps:\n\n**1. Pairwise Cost Matrix Construction**\nFirst, we construct a pairwise cost matrix $C \\in \\mathbb{R}^{n \\times m}$. Each element $C_{i,j}$ quantifies the dissimilarity between the $i$-th state of the organoid and the $j$-th state of the in vivo reference. As stipulated, this cost is the Euclidean distance between the corresponding $G$-dimensional gene expression vectors:\n$$C_{i,j} = d(i,j) = \\lVert \\mathbf{x}_i^{\\mathrm{org}} - \\mathbf{x}_j^{\\mathrm{in}} \\rVert_2$$\n\n**2. Cumulative Cost Matrix Computation**\nNext, we compute the cumulative cost matrix $D \\in \\mathbb{R}^{n \\times m}$ using dynamic programming. An entry $D_{i,j}$ represents the minimum total cost of an alignment path from the starting point $(0,0)$ to the point $(i,j)$. The matrix is constructed as follows:\n\n*   **Initialization:**\n    *   The cost at the origin is simply the local cost: $D_{0,0} = C_{0,0}$.\n    *   The first row is filled by accumulating costs horizontally: $D_{0,j} = C_{0,j} + D_{0,j-1}$ for $j=1, \\dots, m-1$.\n    *   The first column is filled by accumulating costs vertically: $D_{i,0} = C_{i,0} + D_{i-1,0}$ for $i=1, \\dots, n-1$.\n\n*   **Recurrence Relation:**\n    For all other entries ($i>0, j>0$), the cumulative cost is the sum of the local cost $C_{i,j}$ and the minimum cumulative cost of the allowed predecessors:\n    $$D_{i,j} = C_{i,j} + \\min(D_{i-1,j-1}, D_{i,j-1}, D_{i-1,j})$$\n    The allowed step types from a predecessor to $(i,j)$ are diagonal from $(i-1,j-1)$, horizontal from $(i,j-1)$, and vertical from $(i-1,j)$.\n\n*   **Tie-Breaking:** To ensure a unique path, ties in the `min` operation are resolved according to the specified preference: diagonal step $(1,1)$ is preferred over horizontal step $(0,1)$, which is preferred over vertical step $(1,0)$. In terms of predecessor cells, this means the choice is $(i-1,j-1)$ over $(i,j-1)$ over $(i-1,j)$. A predecessor matrix $P$ is maintained to store the decision at each point $(i,j)$ for later backtracking.\n\n**3. Optimal Path Backtracking**\nThe optimal warping path $\\mathcal{P}$ is a sequence of index pairs $\\{(i_k, j_k)\\}_{k=0}^{K-1}$ that connects $(0,0)$ to $(n-1,m-1)$ with the lowest total cumulative cost, $D_{n-1,m-1}$. This path is extracted by backtracking from $(n-1,m-1)$ to $(0,0)$, following the predecessors stored in matrix $P$. The resulting path is a set of correspondences between the time points of the two series.\n\n**4. Organoid-to-In Vivo Time Mapping**\nFinally, the optimal path $\\mathcal{P}$ is used to define the time map $f(i)$. For each organoid index $i \\in \\{0, \\dots, n-1\\}$, we identify the set of all in vivo indices $J(i) = \\{j \\mid (i,j) \\in \\mathcal{P}\\}$ that are paired with $i$ along the path. The corresponding mapped time $f(i)$ is the arithmetic mean of the in vivo times for these indices:\n$$f(i) = \\frac{1}{|J(i)|} \\sum_{j \\in J(i)} t_j^{\\mathrm{in}}$$\nThe final values of $f(i)$ are reported in days, rounded to three decimal places. This procedure is applied to each test case to generate the required results.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve_dtw(org_times, org_expr, in_vivo_times, in_vivo_expr):\n    \"\"\"\n    Computes the temporal alignment of organoid to in vivo data using DTW.\n    \"\"\"\n    org_expr = np.array(org_expr)\n    in_vivo_expr = np.array(in_vivo_expr)\n    \n    n, g_org = org_expr.shape\n    m, g_in_vivo = in_vivo_expr.shape\n\n    if g_org != g_in_vivo:\n        raise ValueError(\"Gene expression vectors must have the same dimension G.\")\n\n    # 1. Compute pairwise cost matrix C using Euclidean distance\n    cost_matrix = np.zeros((n, m))\n    for i in range(n):\n        for j in range(m):\n            cost_matrix[i, j] = np.linalg.norm(org_expr[i] - in_vivo_expr[j])\n\n    # 2. Compute cumulative cost matrix D and predecessor matrix P\n    cum_cost_matrix = np.zeros((n, m))\n    # Predecessor codes: 0: diagonal, 1: horizontal (from left), 2: vertical (from top)\n    pred_matrix = np.zeros((n, m), dtype=int)\n\n    # Initialization\n    cum_cost_matrix[0, 0] = cost_matrix[0, 0]\n    for j in range(1, m):\n        cum_cost_matrix[0, j] = cost_matrix[0, j] + cum_cost_matrix[0, j - 1]\n        pred_matrix[0, j] = 1 # Horizontal predecessor (i, j-1) -> step (0,1)\n    for i in range(1, n):\n        cum_cost_matrix[i, 0] = cost_matrix[i, 0] + cum_cost_matrix[i - 1, 0]\n        pred_matrix[i, 0] = 2 # Vertical predecessor (i-1, j) -> step (1,0)\n\n    # Recurrence with tie-breaking\n    for i in range(1, n):\n        for j in range(1, m):\n            cost_diag = cum_cost_matrix[i - 1, j - 1]\n            cost_horiz = cum_cost_matrix[i, j - 1]\n            cost_vert = cum_cost_matrix[i - 1, j]\n            \n            # Tie-breaking: prefer diagonal (1,1) > horizontal (0,1) > vertical (1,0)\n            # Implemented by predecessor preference: (i-1,j-1) > (i, j-1) > (i-1, j)\n            if cost_diag = cost_horiz and cost_diag = cost_vert:\n                min_cost = cost_diag\n                pred_matrix[i, j] = 0  # Diagonal\n            elif cost_horiz = cost_vert:\n                min_cost = cost_horiz\n                pred_matrix[i, j] = 1  # Horizontal\n            else:\n                min_cost = cost_vert\n                pred_matrix[i, j] = 2  # Vertical\n            \n            cum_cost_matrix[i, j] = cost_matrix[i, j] + min_cost\n\n    # 3. Backtrack to find the optimal path\n    path = []\n    i, j = n - 1, m - 1\n    while i >= 0 and j >= 0:\n        path.append((i, j))\n        if i == 0 and j == 0:\n            break\n        \n        pred = pred_matrix[i, j]\n        if pred == 0:  # Diagonal\n            i, j = i - 1, j - 1\n        elif pred == 1:  # Horizontal\n            j = j - 1\n        else: # pred == 2, Vertical\n            i = i - 1\n    \n    path.reverse()\n\n    # 4. Compute the organoid-to-in vivo time map f(i)\n    i_to_j_map = {i_org: [] for i_org in range(n)}\n    for i_org, j_vivo in path:\n        i_to_j_map[i_org].append(j_vivo)\n        \n    mapped_times = []\n    for i in range(n):\n        j_indices = i_to_j_map[i]\n        if not j_indices:\n            continue\n        \n        avg_time = np.mean([in_vivo_times[j] for j in j_indices])\n        mapped_times.append(round(avg_time, 3))\n\n    return mapped_times\n\ndef solve():\n    \"\"\"\n    Main function to run all test cases and print the final output.\n    \"\"\"\n    test_cases = [\n        {\n            \"org_times\": [0.0, 3.0, 8.0, 15.0, 28.0, 40.0],\n            \"org_expr\": [\n                [1.000, 0.027, 0.017], [0.905, 0.042, 0.052], [0.766, 0.081, 0.230],\n                [0.607, 0.193, 0.775], [0.394, 0.606, 0.520], [0.264, 0.895, 0.017]\n            ],\n            \"in_vivo_times\": [0.0, 10.0, 20.0, 30.0, 40.0, 50.0],\n            \"in_vivo_expr\": [\n                [1.000, 0.027, 0.017], [0.717, 0.105, 0.360], [0.513, 0.328, 1.000],\n                [0.368, 0.671, 0.360], [0.264, 0.895, 0.017], [0.189, 0.973, 0.0001]\n            ]\n        },\n        {\n            \"org_times\": [0.0, 2.0, 6.0, 12.0, 18.0, 30.0],\n            \"org_expr\": [\n                [0.066, 0.249, 0.011], [0.119, 0.607, 0.018], [0.339, 0.946, 0.047],\n                [0.791, 0.066, 0.183], [0.966, 0.0001, 0.500], [0.999, 0.000, 0.953]\n            ],\n            \"in_vivo_times\": [0.0, 5.0, 10.0, 15.0, 25.0, 35.0],\n            \"in_vivo_expr\": [\n                [0.066, 0.249, 0.011], [0.269, 1.000, 0.037], [0.661, 0.249, 0.119],\n                [0.911, 0.0039, 0.321], [0.997, 0.000, 0.852], [1.000, 0.000, 0.986]\n            ]\n        },\n        {\n            \"org_times\": [0.0, 1.0, 2.0],\n            \"org_expr\": [[0.5, 0.5], [0.5, 0.5], [0.5, 0.5]],\n            \"in_vivo_times\": [0.0, 1.0, 2.0, 3.0],\n            \"in_vivo_expr\": [[0.5, 0.5], [0.5, 0.5], [0.5, 0.5], [0.5, 0.5]]\n        }\n    ]\n\n    all_results = []\n    for case in test_cases:\n        result = solve_dtw(\n            case[\"org_times\"],\n            case[\"org_expr\"],\n            case[\"in_vivo_times\"],\n            case[\"in_vivo_expr\"]\n        )\n        all_results.append(result)\n\n    final_output = []\n    for res_list in all_results:\n        # Format numbers to 3 decimal places as strings\n        formatted_list_str = [f\"{x:.3f}\" for x in res_list]\n        final_output.append(f\"[{','.join(formatted_list_str)}]\")\n    \n    print(f\"[{','.join(final_output)}]\")\n\nsolve()\n```", "id": "2622535"}]}