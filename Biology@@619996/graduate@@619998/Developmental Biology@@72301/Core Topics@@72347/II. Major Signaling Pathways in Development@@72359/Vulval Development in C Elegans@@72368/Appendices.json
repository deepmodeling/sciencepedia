{"hands_on_practices": [{"introduction": "At the heart of developmental patterning lies a set of logical rules that govern cell fate decisions based on combinatorial signaling inputs. Before diving into quantitative molecular details, it is crucial to first build a formal framework that captures these high-level interactions. This exercise [@problem_id:2687466] challenges you to translate classic genetic observations from *C. elegans* vulval development—such as the Multivulva and Vulvaless phenotypes—into a precise Boolean logic model, distilling complex biology into its essential operational principles.", "problem": "A central objective in studying vulval development in the nematode *Caenorhabditis elegans* is to formalize how signaling pathways integrate to determine whether the animal exhibits a Multivulva (Muv), Vulvaless (Vul), or wild-type (WT) phenotype. Use the following well-tested facts as the fundamental base for your reasoning:\n\n- The anchor cell secretes epidermal growth factor (EGF; LIN-3), which signals through the epidermal growth factor receptor (EGFR; LET-23), the RAS small guanosine triphosphatase (RAS; LET-60), and the mitogen-activated protein kinase (MAPK; MPK-1) cascade to specify the primary vulval fate in a central vulval precursor cell (VPC). Sufficient inductive RAS/MAPK drive is necessary for any vulval fate; complete loss-of-function in this inductive pathway yields a Vul phenotype.\n- The primary VPC laterally activates LIN-12 (Notch) in adjacent VPCs, promoting secondary fate and inhibiting their adoption of primary fate. Loss-of-function in LIN-12 (Notch) disrupts lateral inhibition, allowing excess primary fates when inductive signal is present. Wild-type LIN-12 (Notch) restrains the spread of primary fate.\n- Synthetic Multivulva (SynMuv) class A and class B gene products act as transcriptional repressors that limit vulval competence and dampen responsiveness to EGF; combined loss of class A and class B repression derepresses vulval potential. SynMuv double mutants display Muv only when inductive signal is present; in the absence of induction they are Vul.\n\nDefine three binary inputs that abstract the pathway states:\n\n- $I \\in \\{0,1\\}$: inductive RAS/MAPK drive absent ($0$) or present at or above threshold ($1$).\n- $N \\in \\{0,1\\}$: lateral LIN-12 (Notch) restraint present ($1$; wild-type) or absent ($0$; loss-of-function).\n- $S \\in \\{0,1\\}$: SynMuv repression derepressed ($1$; combined class A and class B loss) or intact ($0$; wild-type repression).\n\nLet the output be the categorical phenotype: Muv, Vul, or WT. The following observed genotype-to-phenotype constraints must be satisfied:\n\n- Anchor cell or EGF pathway loss (e.g., lin-3 null; $I=0$) yields Vul regardless of $N$ and $S$.\n- Wild type ($I=1$, $N=1$, $S=0$) yields WT.\n- LIN-12 (Notch) loss-of-function ($I=1$, $N=0$, $S=0$) yields Muv.\n- SynMuv class A;class B double loss ($I=1$, $N=1$, $S=1$) yields Muv.\n- Combining LIN-12 (Notch) loss-of-function with SynMuv double loss ($I=1$, $N=0$, $S=1$) yields Muv.\n- SynMuv double loss cannot bypass absence of induction: with $I=0$ and $S=1$ the phenotype is Vul regardless of $N$.\n\nWhich of the following minimal Boolean specifications over $(I,N,S)$ correctly recapitulates all constraints and thereby defines a logic table for pathway interactions?\n\nA. Muv if and only if $I \\land (\\neg N \\lor S)$; Vul if and only if $\\neg I$; WT if and only if $I \\land N \\land \\neg S$.\n\nB. Muv if and only if $(I \\lor S) \\land \\neg N$; Vul if and only if $\\neg I \\land N$; WT if and only if $I \\land N \\land S$.\n\nC. Muv if and only if $S$; Vul if and only if $\\neg I$; WT if and only if $I \\land N$.\n\nD. Muv if and only if $I \\lor S$; Vul if and only if $\\neg I \\land \\neg S$; WT if and only if $I \\land N \\land \\neg S$.", "solution": "The problem statement is presented for validation.\n\n**Step 1: Extract Givens**\n\nThe problem provides a set of biological facts and constraints concerning vulval development in *C. elegans*, which are abstracted into a logical system.\n- **Binary Inputs**:\n    - $I \\in \\{0,1\\}$: Inductive RAS/MAPK drive. $I=1$ for present, $I=0$ for absent.\n    - $N \\in \\{0,1\\}$: Lateral LIN-12/Notch restraint. $N=1$ for present (wild-type), $N=0$ for absent.\n    - $S \\in \\{0,1\\}$: SynMuv repression. $S=1$ for derepressed (double mutant), $S=0$ for intact.\n- **Categorical Outputs**: Phenotypes are Multivulva (Muv), Vulvaless (Vul), or wild-type (WT).\n- **Constraints**:\n    1. If $I=0$, the phenotype is Vul, for any values of $N$ and $S$.\n    2. If ($I=1, N=1, S=0$), the phenotype is WT.\n    3. If ($I=1, N=0, S=0$), the phenotype is Muv.\n    4. If ($I=1, N=1, S=1$), the phenotype is Muv.\n    5. If ($I=1, N=0, S=1$), the phenotype is Muv.\n    6. A redundant constraint is given: if ($I=0, S=1$), the phenotype is Vul. This is already covered by constraint 1.\n\n**Step 2: Validate Using Extracted Givens**\n\nThe problem is scientifically grounded in established principles of developmental biology and genetics of *C. elegans*. The abstraction of signaling pathways into a Boolean logic framework is a standard and valid technique in systems biology. The problem is well-posed, providing a complete and consistent set of constraints that define the phenotype for all $2^3=8$ possible input combinations of $(I,N,S)$. There are no contradictions, ambiguities, or missing information. The language is objective and precise. The problem is therefore deemed valid.\n\n**Step 3: Solution Derivation**\n\nThe first step is a rigorous tabulation of the provided constraints into a complete logic table, which serves as our ground truth.\n\n| $I$ | $N$ | $S$ | Phenotype |\n|---|---|---|---|\n| $0$ | $0$ | $0$ | Vul |\n| $0$ | $0$ | $1$ | Vul |\n| $0$ | $1$ | $0$ | Vul |\n| $0$ | $1$ | $1$ | Vul |\n| $1$ | $0$ | $0$ | Muv |\n| $1$ | $0$ | $1$ | Muv |\n| $1$ | $1$ | $0$ | WT |\n| $1$ | $1$ | $1$ | Muv |\n\nFrom this truth table, we derive the minimal Boolean expression for each phenotype. Logical \"AND\" is denoted by $\\land$, \"OR\" by $\\lor$, and \"NOT\" by $\\neg$.\n\n1.  **Vul Phenotype**: The phenotype is Vul if and only if $I=0$. All four input combinations where $I=0$ result in Vul, and no other combinations do. Thus, the condition for Vul is:\n    $$ \\text{Vul} \\iff \\neg I $$\n\n2.  **WT Phenotype**: The WT phenotype occurs for one and only one input combination: $(I=1, N=1, S=0)$. The corresponding logical expression is a conjunction of these input states:\n    $$ \\text{WT} \\iff I \\land N \\land \\neg S $$\n\n3.  **Muv Phenotype**: The Muv phenotype occurs for the remaining three input combinations: $(1,0,0)$, $(1,0,1)$, and $(1,1,1)$. The sum-of-products expression is:\n    $$ (I \\land \\neg N \\land \\neg S) \\lor (I \\land \\neg N \\land S) \\lor (I \\land N \\land S) $$\n    This expression must be minimized using the axioms of Boolean algebra. We factor out the common term $I$:\n    $$ I \\land [ (\\neg N \\land \\neg S) \\lor (\\neg N \\land S) \\lor (N \\land S) ] $$\n    We apply the adjacency rule $(\\neg N \\land \\neg S) \\lor (\\neg N \\land S) = \\neg N$:\n    $$ I \\land [ \\neg N \\lor (N \\land S) ] $$\n    Finally, we use the distributive law $A \\lor (B \\land C) = (A \\lor B) \\land (A \\lor C)$:\n    $$ I \\land [ (\\neg N \\lor N) \\land (\\neg N \\lor S) ] $$\n    Since $\\neg N \\lor N = 1$, the expression simplifies to:\n    $$ I \\land [ 1 \\land (\\neg N \\lor S) ] = I \\land (\\neg N \\lor S) $$\n    Thus, the minimal condition for Muv is:\n    $$ \\text{Muv} \\iff I \\land (\\neg N \\lor S) $$\n\nThe derived set of minimal Boolean specifications is:\n- Muv: $I \\land (\\neg N \\lor S)$\n- Vul: $\\neg I$\n- WT: $I \\land N \\land \\neg S$\n\nThese three conditions are mutually exclusive and exhaustive, correctly partitioning the entire input space, as is required for a valid specification.\n\n**Option-by-Option Analysis**\n\nWe now evaluate each provided option against our rigorously derived specifications.\n\n**A. Muv if and only if $I \\land (\\neg N \\lor S)$; Vul if and only if $\\neg I$; WT if and only if $I \\land N \\land \\neg S$.**\n- The condition for Muv, $I \\land (\\neg N \\lor S)$, is identical to our derived expression.\n- The condition for Vul, $\\neg I$, is identical to our derived expression.\n- The condition for WT, $I \\land N \\land \\neg S$, is identical to our derived expression.\nAll three conditions are correct and form a complete and consistent set.\n**Verdict: Correct.**\n\n**B. Muv if and only if $(I \\lor S) \\land \\neg N$; Vul if and only if $\\neg I \\land N$; WT if and only if $I \\land N \\land S$.**\n- Muv condition: $(I \\lor S) \\land \\neg N$. Let us test this for input $(1,1,1)$, which must yield Muv. The expression gives $(1 \\lor 1) \\land \\neg 1 = 1 \\land 0 = 0$. This is false. The condition is incorrect.\n- Vul condition: $\\neg I \\land N$. Let us test for input $(0,0,0)$, which must yield Vul. The expression gives $\\neg 0 \\land 0 = 1 \\land 0 = 0$. This is false. The condition is incorrect.\n- WT condition: $I \\land N \\land S$. The true WT input is $(1,1,0)$. The expression gives $1 \\land 1 \\land 0 = 0$. This is false. The condition is incorrect.\n**Verdict: Incorrect.**\n\n**C. Muv if and only if $S$; Vul if and only if $\\neg I$; WT if and only if $I \\land N$.**\n- Muv condition: $S$. Let us test for input $(1,0,0)$, which must yield Muv. The expression gives $S=0$. This is false. The condition is incorrect.\n- Vul condition: $\\neg I$. This is correct.\n- WT condition: $I \\land N$. Let us test for input $(1,1,1)$, which must yield Muv. The expression gives $1 \\land 1 = 1$, falsely predicting WT. The condition is insufficiently specific and thus incorrect.\n**Verdict: Incorrect.**\n\n**D. Muv if and only if $I \\lor S$; Vul if and only if $\\neg I \\land \\neg S$; WT if and only if $I \\land N \\land \\neg S$.**\n- Muv condition: $I \\lor S$. Let us test for input $(1,1,0)$, which must yield WT. The expression gives $1 \\lor 0 = 1$, falsely predicting Muv. The condition is incorrect.\n- Vul condition: $\\neg I \\land \\neg S$. Let us test for input $(0,1,1)$, which must yield Vul. The expression gives $\\neg 0 \\land \\neg 1 = 1 \\land 0 = 0$. This is false. The condition is incorrect.\n- WT condition: $I \\land N \\land \\neg S$. This is correct. However, since other conditions are wrong, the overall specification is invalid.\n**Verdict: Incorrect.**\n\nOnly option A provides the correct logical specification for all three phenotypes based on the given biological constraints.", "answer": "$$\\boxed{A}$$", "id": "2687466"}, {"introduction": "A key question in pattern formation is how cells translate a smooth gradient of an external signal into sharp, all-or-none fate decisions, a phenomenon often achieved through 'ultrasensitivity.' This practice problem [@problem_id:2687443] provides a hands-on opportunity to quantify this effect using the Hill function, a fundamental model in biophysics. By applying this model, you will understand how a modest difference in LIN-3 signal between adjacent cells can be amplified into a large, decisive difference in downstream MPK-1 kinase activity.", "problem": "In *Caenorhabditis elegans* vulval development, the central vulval precursor cells P6.p and P5.p experience different extracellular concentrations of the Epidermal Growth Factor (EGF) ortholog LIN-3 emanating from the gonadal anchor cell. This signal activates the Ras–Mitogen-Activated Protein Kinase (MAPK) cascade, culminating in the activation of the extracellular signal-regulated kinase homolog MPK-1 in the receiving cells, which biases fate decisions. A widely used and well-tested biophysical approximation for ligand-driven signaling outputs is that the steady-state activity of a downstream effector, here MPK-1, is a saturable, monotonic function of ligand concentration described by a Hill function with Hill coefficient $n$ and half-maximal constant $K$.\n\nAssume that the steady-state MPK-1 activity $A([L])$ in a vulval precursor cell exposed to an extracellular LIN-3 concentration $[L]$ is given by a Hill function of the form\n$$\nA([L]) \\propto \\frac{[L]^{n}}{K^{n} + [L]^{n}}.\n$$\nSuppose that P6.p experiences a LIN-3 concentration that is a factor of $2$ higher than that experienced by P5.p. Let the LIN-3 concentration at P5.p be $C$ (so P6.p experiences $2C$). The effective Hill coefficient of the pathway is $n=3$.\n\nDerive, from the stated assumptions and functional form, the exact expression for the ratio of steady-state MPK-1 activities between P6.p and P5.p. Express your final answer as a single closed-form expression in terms of $K$ and $C$. Your answer should be a dimensionless ratio with no units.", "solution": "The problem statement has been evaluated and is deemed valid. It is scientifically grounded in the context of developmental biology and biophysical modeling, well-posed with sufficient information for a unique solution, and objectively formulated. We may proceed with the derivation.\n\nThe problem states that the steady-state activity of MPK-1, denoted as $A$, is a function of the extracellular LIN-3 concentration, $[L]$, and follows a Hill function. This relationship is given by the proportionality:\n$$\nA([L]) \\propto \\frac{[L]^{n}}{K^{n} + [L]^{n}}\n$$\nWe can introduce a proportionality constant, $\\alpha$, to write this as an equality:\n$$\nA([L]) = \\alpha \\frac{[L]^{n}}{K^{n} + [L]^{n}}\n$$\nwhere $n$ is the Hill coefficient and $K$ is the half-maximal concentration constant.\n\nThe problem provides the following specific values:\n- The Hill coefficient is $n = 3$.\n- The LIN-3 concentration experienced by the cell P5.p is $[L]_{\\text{P5.p}} = C$.\n- The LIN-3 concentration experienced by the cell P6.p is $[L]_{\\text{P6.p}} = 2C$.\n\nWe are required to find the ratio of the steady-state MPK-1 activities in P6.p to P5.p, which is $\\frac{A([L]_{\\text{P6.p}})}{A([L]_{\\text{P5.p}})}$.\n\nFirst, we write the expression for the activity in cell P5.p, $A_{\\text{P5.p}}$, by substituting $[L] = C$ and $n=3$ into the general formula:\n$$\nA_{\\text{P5.p}} = A(C) = \\alpha \\frac{C^{3}}{K^{3} + C^{3}}\n$$\n\nNext, we write the expression for the activity in cell P6.p, $A_{\\text{P6.p}}$, by substituting $[L] = 2C$ and $n=3$:\n$$\nA_{\\text{P6.p}} = A(2C) = \\alpha \\frac{(2C)^{3}}{K^{3} + (2C)^{3}}\n$$\nWe simplify the terms involving $2C$:\n$$\n(2C)^{3} = 2^{3}C^{3} = 8C^{3}\n$$\nSubstituting this back into the expression for $A_{\\text{P6.p}}$ gives:\n$$\nA_{\\text{P6.p}} = \\alpha \\frac{8C^{3}}{K^{3} + 8C^{3}}\n$$\n\nNow, we compute the desired ratio, $\\frac{A_{\\text{P6.p}}}{A_{\\text{P5.p}}}$.\n$$\n\\frac{A_{\\text{P6.p}}}{A_{\\text{P5.p}}} = \\frac{\\alpha \\frac{8C^{3}}{K^{3} + 8C^{3}}}{\\alpha \\frac{C^{3}}{K^{3} + C^{3}}}\n$$\nThe proportionality constant $\\alpha$ cancels from the numerator and the denominator. This is expected, as a ratio of activities should not depend on the absolute scale of the measurement.\n$$\n\\frac{A_{\\text{P6.p}}}{A_{\\text{P5.p}}} = \\frac{\\frac{8C^{3}}{K^{3} + 8C^{3}}}{\\frac{C^{3}}{K^{3} + C^{3}}}\n$$\nTo simplify this complex fraction, we multiply the numerator by the reciprocal of the denominator:\n$$\n\\frac{A_{\\text{P6.p}}}{A_{\\text{P5.p}}} = \\left( \\frac{8C^{3}}{K^{3} + 8C^{3}} \\right) \\times \\left( \\frac{K^{3} + C^{3}}{C^{3}} \\right)\n$$\nThe term $C^{3}$ appears in the numerator of the first fraction and the denominator of the second fraction, so it can be canceled, provided $C \\neq 0$. The biological context implies $C > 0$, as it represents a concentration.\n$$\n\\frac{A_{\\text{P6.p}}}{A_{\\text{P5.p}}} = \\frac{8(K^{3} + C^{3})}{K^{3} + 8C^{3}}\n$$\nThis expression is the final, exact form for the ratio of activities, expressed in terms of the given parameters $K$ and $C$. It is a dimensionless quantity as required.", "answer": "$$\n\\boxed{\\frac{8(K^{3} + C^{3})}{K^{3} + 8C^{3}}}\n$$", "id": "2687443"}, {"introduction": "Cell fate decisions are not instantaneous; they are the result of integrating signaling inputs over time, a process that relies on 'cellular memory.' This advanced computational exercise [@problem_id:2687447] moves beyond steady-state analysis to model this temporal integration directly. You will implement a convolution-based model where the final outcome depends on a weighted history of past EGF signals and fit this model to experimental data, a workflow that is central to modern systems biology.", "problem": "In the nematode *Caenorhabditis elegans*, the six vulval precursor cells integrate epidermal growth factor (EGF) signaling over time to decide between primary, secondary, or tertiary fates. A first-principles interpretation grounded in gene regulation is that transcriptional outputs at time $t$ are proportional to a weighted integral of past signaling inputs, where recent inputs are weighted more heavily than older inputs due to molecular turnover. Mathematically, this is modeled as a causal convolution of a stimulus with a kernel that reflects the effective memory of the gene expression machinery. You will implement and fit such a model to labeled activation protocols and then use the fitted model to predict the fates for unlabeled protocols.\n\nModel definition and fitting objective:\n- Let discrete time be indexed by $t \\in \\{0,1,\\dots,T-1\\}$ with uniform step $\\Delta t = 1$ minute, and let $u(t)$ be the nonnegative input intensity at time $t$ (dimensionless).\n- The decision variable at the final time is\n$$\nz = \\sum_{n=0}^{T-1} k(n; A,\\tau)\\, u(T-1-n)\\, \\Delta t,\n$$\nwhere the kernel is an exponential memory\n$$\nk(n; A,\\tau) = \\begin{cases}\nA \\, e^{-n/\\tau}, & n \\ge 0,\\\\\n0, & n < 0,\n\\end{cases}\n$$\nwith gain $A>0$ and time constant $\\tau>0$ (in minutes).\n- Given $z$, the fate class $c \\in \\{0,1,2\\}$ is assigned by two thresholds $\\theta_0$ and $\\theta_1$ with $\\theta_1 > \\theta_0 > 0$ as\n$$\nc =\n\\begin{cases}\n0, & z < \\theta_0,\\\\\n1, & \\theta_0 \\le z < \\theta_1,\\\\\n2, & z \\ge \\theta_1.\n\\end{cases}\n$$\n- You must fit $(A,\\tau,\\theta_0,\\theta_1)$ by minimizing the total number of misclassifications on the labeled training protocols defined below. Restrict the search to the discrete grid\n$$\nA \\in \\{\\,0.8,\\;1.0,\\;1.2\\,\\},\\quad\n\\tau \\in \\{\\,2,\\;3,\\;4,\\;5\\,\\},\\quad\n\\theta_0 \\in \\{\\,0.5,\\;0.6,\\;0.7\\,\\},\\quad\n\\theta_1 \\in \\{\\,1.0,\\;1.2,\\;1.4\\,\\}.\n$$\n- If multiple parameter tuples achieve the same minimum misclassification count, break ties by maximizing the total correct-classification margin\n$$\nM = \\sum_{i \\in \\mathcal{I}_{\\mathrm{correct}}} m_i,\n$$\nwhere for each correctly classified training protocol $i$ with decision variable $z_i$ and true class $c_i$,\n$$\nm_i =\n\\begin{cases}\n\\theta_0 - z_i, & c_i=0,\\\\\n\\min\\{\\,z_i - \\theta_0,\\;\\theta_1 - z_i\\,\\}, & c_i=1,\\\\\nz_i - \\theta_1, & c_i=2.\n\\end{cases}\n$$\nIf there is still a tie, choose the tuple with the smallest $\\tau$; if still tied, the smallest $A$; if still tied, the smallest $\\theta_0$; if still tied, the smallest $\\theta_1$.\n\nTraining protocols and labels (all with $T=20$ time steps and $\\Delta t = 1$ minute):\n- Protocol $\\mathrm{U1}$ (constant low): $u(t)=0.05$ for all $t \\in \\{0,\\dots,19\\}$; label $c=0$.\n- Protocol $\\mathrm{U2}$ (constant medium): $u(t)=0.15$ for all $t \\in \\{0,\\dots,19\\}$; label $c=1$.\n- Protocol $\\mathrm{U3}$ (constant high): $u(t)=0.40$ for all $t \\in \\{0,\\dots,19\\}$; label $c=2$.\n- Protocol $\\mathrm{U4}$ (single late pulse): $u(19)=1.00$ and $u(t)=0$ for $t \\in \\{0,\\dots,18\\}$; label $c=2$.\n- Protocol $\\mathrm{U5}$ (two late pulses): $u(16)=0.60$, $u(18)=0.60$, and $u(t)=0$ for $t \\in \\{0,\\dots,19\\}\\setminus\\{16,18\\}$; label $c=1$.\n- Protocol $\\mathrm{U6}$ (early pulses only): $u(2)=1.00$, $u(4)=1.00$, and $u(t)=0$ for $t \\in \\{0,\\dots,19\\}\\setminus\\{2,4\\}$; label $c=0$.\n\nUnlabeled test protocols to predict (all with $T=20$ and $\\Delta t = 1$ minute):\n- Protocol $\\mathrm{V1}$ (no input): $u(t)=0$ for all $t \\in \\{0,\\dots,19\\}$.\n- Protocol $\\mathrm{V2}$ (ramp): $u(t)=0.015 \\, t$ for all $t \\in \\{0,\\dots,19\\}$.\n- Protocol $\\mathrm{V3}$ (alternating late pulses): $u(14)=0$, $u(15)=0.70$, $u(16)=0$, $u(17)=0.70$, $u(18)=0$, $u(19)=0.70$, and $u(t)=0$ for $t \\in \\{0,\\dots,13\\}$.\n- Protocol $\\mathrm{V4}$ (weak then stronger): $u(t)=0.10$ for $t \\in \\{0,\\dots,14\\}$ and $u(t)=0.30$ for $t \\in \\{15,\\dots,19\\}$.\n\nYour tasks:\n- Implement the convolutional decision model specified above.\n- Fit $(A,\\tau,\\theta_0,\\theta_1)$ by exhaustive search over the given discrete grid to minimize training misclassification with the specified tie-breaking rules.\n- Using the fitted parameters, compute the predicted classes for $\\mathrm{V1}$, $\\mathrm{V2}$, $\\mathrm{V3}$, and $\\mathrm{V4}$.\n\nFinal output format:\n- Your program should produce a single line of output containing the four predicted classes, in the order $\\mathrm{V1}$, $\\mathrm{V2}$, $\\mathrm{V3}$, $\\mathrm{V4}$, as a comma-separated list enclosed in square brackets (for example, $[0,1,2,2]$). The outputs are integers with no units.\n\nScientifically grounded base for this model:\n- Transcriptional outputs integrate signaling inputs over time according to the Central Dogma of Molecular Biology and the kinetics of regulatory molecule turnover; this supports a weighted integral model of input history.\n- In linear-response regimes of signal transduction cascades such as Ras/mitogen-activated protein kinase (MAPK) downstream of epidermal growth factor (EGF) and extracellular signal-regulated kinase (ERK), the effective memory can be approximated by an exponential kernel, consistent with first-order degradation and deactivation processes.\n- Vulval fate boundaries can be represented as thresholds on an integrated decision variable, reflecting the existence of commitment boundaries between tertiary, secondary, and primary fates under graded EGF signaling; the exact numerical values are to be inferred from data.", "solution": "The problem statement has been subjected to rigorous validation and is determined to be valid. It is scientifically grounded in established principles of developmental biology and systems theory, well-posed with a clear objective and constraints, and mathematically unambiguous. We may therefore proceed with the derivation of the solution.\n\nThe problem requires us to fit a biophysical model of cell fate determination to a set of training data and then use the fitted model to predict outcomes for a set of test cases. The model describes the integration of a time-varying signaling input, $u(t)$, into a single decision variable, $z$, which is then classified into one of three fates based on two thresholds.\n\nThe core of the model is the calculation of the decision variable $z$ at a final time $T$. This is a causal convolution of the input signal $u(t)$ with an exponential memory kernel $k(t)$. For discrete time steps $t \\in \\{0, 1, \\dots, T-1\\}$ with a uniform step $\\Delta t$, the formula is given as:\n$$\nz = \\sum_{n=0}^{T-1} k(n; A,\\tau)\\, u(T-1-n)\\, \\Delta t\n$$\nThe kernel function, $k(n; A,\\tau) = A \\, e^{-n/\\tau}$ for $n \\ge 0$, represents the memory of the cellular system, where $A$ is a gain parameter and $\\tau$ is a time constant. Given that the problem specifies $\\Delta t = 1$ minute, a unity value, we can simplify the expression by omitting this factor:\n$$\nz = \\sum_{n=0}^{T-1} A \\, e^{-n/\\tau} \\, u(T-1-n)\n$$\nThis calculation represents a discrete convolution, which can be computed efficiently as the dot product of a kernel vector and the time-reversed input vector. Let $\\vec{k}$ be the vector of kernel values $[k(0), k(1), \\dots, k(T-1)]$ and $\\vec{u}_{\\text{rev}}$ be the time-reversed input vector $[u(T-1), u(T-2), \\dots, u(0)]$. Then, $z = \\vec{k} \\cdot \\vec{u}_{\\text{rev}}$.\n\nThe cell fate $c$ is determined by comparing $z$ to two thresholds, $\\theta_0$ and $\\theta_1$, where $\\theta_1 > \\theta_0 > 0$:\n$$\nc(z; \\theta_0, \\theta_1) =\n\\begin{cases}\n0, & z < \\theta_0 \\\\\n1, & \\theta_0 \\le z < \\theta_1 \\\\\n2, & z \\ge \\theta_1\n\\end{cases}\n$$\nThe problem requires an exhaustive search over a discrete grid of parameters $(A, \\tau, \\theta_0, \\theta_1)$ to find the optimal set. The total number of parameter combinations to be evaluated is $3 \\times 4 \\times 3 \\times 3 = 108$, which is computationally manageable. The grid is defined as:\n- $A \\in \\{0.8, 1.0, 1.2\\}$\n- $\\tau \\in \\{2, 3, 4, 5\\}$\n- $\\theta_0 \\in \\{0.5, 0.6, 0.7\\}$\n- $\\theta_1 \\in \\{1.0, 1.2, 1.4\\}$\nFor all specified combinations, the condition $\\theta_1 > \\theta_0$ holds.\n\nThe optimization procedure is clearly defined with a strict set of rules. The primary objective is to find the parameter tuple that minimizes the total number of misclassifications on the six provided training protocols. Should a tie occur (i.e., multiple parameter sets yield the same minimal number of misclassifications), a series of tie-breaking rules must be applied in a specific order:\n1.  Maximize the total correct-classification margin, $M$. The margin $m_i$ for a single correctly classified protocol $i$ with decision variable $z_i$ and true class $c_i$ is defined as:\n$$\nm_i =\n\\begin{cases}\n\\theta_0 - z_i, & \\text{if } c_i=0 \\\\\n\\min\\{z_i - \\theta_0, \\theta_1 - z_i\\}, & \\text{if } c_i=1 \\\\\nz_i - \\theta_1, & \\text{if } c_i=2\n\\end{cases}\n$$\nThe total margin is the sum $M = \\sum_{i \\in \\mathcal{I}_{\\text{correct}}} m_i$.\n2.  If a tie persists, select the tuple with the smallest time constant $\\tau$.\n3.  If still tied, select the tuple with the smallest gain $A$.\n4.  If still tied, select the tuple with the smallest lower threshold $\\theta_0$.\n5.  If still tied, select the tuple with the smallest upper threshold $\\theta_1$.\n\nThis lexicographical sorting of performance metrics guarantees a unique optimal parameter set. The solution is thus implemented as follows:\nFirst, we iterate through every possible parameter tuple $(A, \\tau, \\theta_0, \\theta_1)$ from the specified grids. For each tuple, we evaluate its performance on all six training protocols. This involves:\na. For each training protocol $u_i(t)$ with its corresponding correct label $c_i$, we compute the decision variable $z_i$.\nb. We then use the current thresholds $(\\theta_0, \\theta_1)$ to predict the class $c_{\\text{pred}, i}$.\nc. We count the number of misclassifications (where $c_{\\text{pred}, i} \\neq c_i$) and compute the total margin $M$ for all correctly classified protocols.\n\nSecond, we store the performance metrics (misclassification count, total margin) along with the parameters $(\\tau, A, \\theta_0, \\theta_1)$ that produced them. A list of tuples, for example `(misclassifications, margin, tau, A, theta0, theta1)`, is created.\n\nThird, we sort this list of results according to the specified tie-breaking rules. This is achieved by a lexicographical sort on a key `(misclassifications, -margin, tau, A, theta0, theta1)`. The negative margin is used because we wish to maximize it, which is equivalent to minimizing its negation.\n\nFourth, the first element of the sorted list corresponds to the optimal parameter set $(A^*, \\tau^*, \\theta_0^*, \\theta_1^*)$.\n\nFinally, we use this optimal parameter set to predict the fates for the four unlabeled test protocols ($V1, V2, V3, V4$). For each test protocol $u_j(t)$, we compute its decision variable $z_j$ using the optimal $(A^*, \\tau^*)$ and classify it using the optimal thresholds $(\\theta_0^*, \\theta_1^*)$. The resulting four class labels are then formatted into the required output string.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nimport itertools\n\ndef solve():\n    \"\"\"\n    Implements the model fitting and prediction for *C. elegans* vulval fate determination.\n    \"\"\"\n    # Define problem constants\n    T = 20\n    dt = 1.0\n\n    # Define the discrete search grid for parameters\n    A_grid = [0.8, 1.0, 1.2]\n    tau_grid = [2, 3, 4, 5]\n    theta0_grid = [0.5, 0.6, 0.7]\n    theta1_grid = [1.0, 1.2, 1.4]\n\n    # Define training protocols and labels\n    # U1: constant low\n    u1 = np.full(T, 0.05)\n    # U2: constant medium\n    u2 = np.full(T, 0.15)\n    # U3: constant high\n    u3 = np.full(T, 0.40)\n    # U4: single late pulse\n    u4 = np.zeros(T)\n    u4[19] = 1.00\n    # U5: two late pulses\n    u5 = np.zeros(T)\n    u5[16], u5[18] = 0.60, 0.60\n    # U6: early pulses only\n    u6 = np.zeros(T)\n    u6[2], u6[4] = 1.00, 1.00\n\n    training_protocols = [u1, u2, u3, u4, u5, u6]\n    training_labels = [0, 1, 2, 2, 1, 0]\n\n    # Define unlabeled test protocols\n    # V1: no input\n    v1 = np.zeros(T)\n    # V2: ramp\n    v2 = 0.015 * np.arange(T)\n    # V3: alternating late pulses\n    v3 = np.zeros(T)\n    v3[15], v3[17], v3[19] = 0.70, 0.70, 0.70\n    # V4: weak then stronger\n    v4 = np.full(T, 0.10)\n    v4[15:] = 0.30\n\n    test_protocols = [v1, v2, v3, v4]\n\n    # Helper function to compute the decision variable z\n    def calculate_z(u, A, tau):\n        n = np.arange(T)\n        kernel = A * np.exp(-n / tau)\n        # Convolution as a dot product with the time-reversed input signal\n        return np.dot(kernel, u[::-1]) * dt\n\n    # Helper function for classification\n    def classify(z, theta0, theta1):\n        if z  theta0:\n            return 0\n        elif z  theta1:\n            return 1\n        else:\n            return 2\n\n    # Helper function to compute the classification margin\n    def calculate_margin(z, c_true, theta0, theta1):\n        if c_true == 0:\n            return theta0 - z\n        elif c_true == 1:\n            return min(z - theta0, theta1 - z)\n        else: # c_true == 2\n            return z - theta1\n\n    # Grid search to find the optimal parameters\n    results = []\n    param_grid = itertools.product(A_grid, tau_grid, theta0_grid, theta1_grid)\n\n    for A, tau, theta0, theta1 in param_grid:\n        if theta1 = theta0:\n            continue\n        num_misclassifications = 0\n        total_margin = 0.0\n\n        for i, u in enumerate(training_protocols):\n            c_true = training_labels[i]\n            z = calculate_z(u, A, tau)\n            c_pred = classify(z, theta0, theta1)\n\n            if c_pred != c_true:\n                num_misclassifications += 1\n            else:\n                total_margin += calculate_margin(z, c_true, theta0, theta1)\n        \n        # Store results for sorting\n        results.append(\n            (num_misclassifications, total_margin, tau, A, theta0, theta1)\n        )\n\n    # Sort results according to the specified tie-breaking rules\n    # 1. Minimize misclassifications (ascending)\n    # 2. Maximize margin (descending, so use -margin ascending)\n    # 3. Minimize tau (ascending)\n    # 4. Minimize A (ascending)\n    # 5. Minimize theta0 (ascending)\n    # 6. Minimize theta1 (ascending)\n    results.sort(key=lambda x: (x[0], -x[1], x[2], x[3], x[4], x[5]))\n\n    # The best parameters are the first entry in the sorted list\n    best_result = results[0]\n    _, _, best_tau, best_A, best_theta0, best_theta1 = best_result\n\n    # Predict classes for test protocols using the optimal parameters\n    predictions = []\n    for u_test in test_protocols:\n        z_test = calculate_z(u_test, best_A, best_tau)\n        c_pred = classify(z_test, best_theta0, best_theta1)\n        predictions.append(c_pred)\n\n    # Print results in the required format\n    print(f\"[{','.join(map(str, predictions))}]\")\n\nsolve()\n```", "id": "2687447"}]}