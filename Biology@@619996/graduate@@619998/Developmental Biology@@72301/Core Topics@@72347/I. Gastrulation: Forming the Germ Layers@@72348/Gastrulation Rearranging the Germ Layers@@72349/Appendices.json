{"hands_on_practices": [{"introduction": "The large-scale rearrangements of gastrulation are driven by physical forces generated at the cellular level. A central concept in understanding this process is the Differential Adhesion Hypothesis, which posits that differences in cell-cell adhesion can lead to tissue sorting and boundary formation. This first practice exercise provides a quantitative look at this principle by modeling the relationship between the density of adhesion molecules like E-cadherin and the emergent tissue surface tension, offering a first step towards building a mechanical understanding of morphogenesis from molecular parts.", "problem": "In a vertebrate embryo undergoing epiboly during gastrulation, the blastoderm spreads over the yolk cell as a cohesive epithelial sheet. Cohesion is mediated by epithelial cadherin (E-cadherin), and the emergent effective tissue surface tension, denoted by $\\Gamma$, is an aggregate property that resists areal expansion and curvature changes of the tissue boundary. Consider a minimal, mechanically consistent description grounded in the Differential Adhesion Hypothesis (DAH), in which the density of functional E-cadherin bonds per unit area, $\\rho_{\\text{cad}}$, is taken as the primary microscopic variable controlling cohesion. You are told that, for small perturbations and fixed cytoskeletal contractility and geometry, the tissue-level surface tension scales linearly with the density of cadherin bonds, that is, $\\Gamma$ is proportional to $\\rho_{\\text{cad}}$. The blastoderm is approximated as a thin sheet of constant curvature, so that capillary resistance to spreading is described by the Young–Laplace relation, with pressure drop $\\Delta P = \\Gamma \\kappa$, where $\\kappa$ is the mean curvature.\n\nAn experimental manipulation reduces the functional E-cadherin bond density to one-half of its baseline value without altering the geometry or active protrusive tractions. Let $\\rho_{\\text{cad},0}$ and $\\Gamma_{0}$ denote the baseline values of cadherin bond density and surface tension, respectively, and let $\\rho_{\\text{cad},1}$ and $\\Gamma_{1}$ denote the post-manipulation values. Using only the above foundational assumptions and relations, compute the new surface tension $\\Gamma_{1}$ in terms of $\\Gamma_{0}$. Then, based on the sign of the change in $\\Delta P$ at fixed $\\kappa$, predict qualitatively whether the net resistance to spreading increases or decreases. Report only the symbolic expression for $\\Gamma_{1}$ in terms of $\\Gamma_{0}$ as your final answer. No rounding is required. No units should be included in the final answer.", "solution": "The problem statement will first be validated for correctness and solvability.\n\nThe givens extracted from the problem statement are:\n1.  The tissue surface tension, $\\Gamma$, scales linearly with the density of E-cadherin bonds, $\\rho_{\\text{cad}}$. This is stated as $\\Gamma$ is proportional to $\\rho_{\\text{cad}}$, which can be written as $\\Gamma \\propto \\rho_{\\text{cad}}$.\n2.  The capillary resistance to spreading is described by the Young–Laplace relation, $\\Delta P = \\Gamma \\kappa$, where $\\Delta P$ is the pressure drop and $\\kappa$ is the mean curvature.\n3.  An experimental manipulation reduces the functional E-cadherin bond density to one-half of its baseline value.\n4.  The baseline values are denoted $\\rho_{\\text{cad},0}$ and $\\Gamma_{0}$.\n5.  The post-manipulation values are denoted $\\rho_{\\text{cad},1}$ and $\\Gamma_{1}$.\n6.  The manipulation implies the relation $\\rho_{\\text{cad},1} = \\frac{1}{2} \\rho_{\\text{cad},0}$.\n7.  The geometry (and thus the mean curvature $\\kappa$) and active protrusive tractions are assumed to be fixed during the comparison.\n\nThe problem is scientifically grounded, drawing upon the Differential Adhesion Hypothesis and standard biophysical models of tissue mechanics like the Young-Laplace equation. The concepts of E-cadherin-mediated cohesion and tissue surface tension are central to developmental biology. The problem is well-posed, providing a clear mathematical relationship and a specified perturbation, from which a unique answer can be derived. The language is objective and the setup is internally consistent. All necessary information is provided for the calculation. Therefore, the problem is valid and a solution can be constructed.\n\nThe core of the problem lies in the stated linear proportionality between the tissue surface tension $\\Gamma$ and the density of functional E-cadherin bonds $\\rho_{\\text{cad}}$. This relationship can be expressed mathematically as:\n$$\n\\Gamma = k \\cdot \\rho_{\\text{cad}}\n$$\nwhere $k$ is a constant of proportionality. This constant $k$ encapsulates other biomechanical parameters such as cytoskeletal contractility and bond properties, which are assumed to be fixed as per the problem statement.\n\nWe can write this relation for both the baseline (initial) state and the post-manipulation (final) state.\nFor the baseline state, denoted by the subscript $0$:\n$$\n\\Gamma_{0} = k \\cdot \\rho_{\\text{cad},0}\n$$\nFor the post-manipulation state, denoted by the subscript $1$:\n$$\n\\Gamma_{1} = k \\cdot \\rho_{\\text{cad},1}\n$$\nThe problem states that the experimental manipulation reduces the E-cadherin bond density to one-half of its baseline value. This provides the following relation:\n$$\n\\rho_{\\text{cad},1} = \\frac{1}{2} \\rho_{\\text{cad},0}\n$$\nWe can now substitute this expression for $\\rho_{\\text{cad},1}$ into the equation for $\\Gamma_{1}$:\n$$\n\\Gamma_{1} = k \\cdot \\left(\\frac{1}{2} \\rho_{\\text{cad},0}\\right)\n$$\nBy rearranging the terms, we get:\n$$\n\\Gamma_{1} = \\frac{1}{2} \\left(k \\cdot \\rho_{\\text{cad},0}\\right)\n$$\nWe recognize the term in the parentheses, $k \\cdot \\rho_{\\text{cad},0}$, as the expression for the baseline surface tension, $\\Gamma_{0}$. Therefore, we can substitute $\\Gamma_{0}$ into the equation:\n$$\n\\Gamma_{1} = \\frac{1}{2} \\Gamma_{0}\n$$\nThis result shows that the new surface tension $\\Gamma_{1}$ is one-half of the original surface tension $\\Gamma_{0}$.\n\nThe second part of the question asks to predict the change in net resistance to spreading. The resistance is related to the pressure drop $\\Delta P$ from the Young-Laplace relation, $\\Delta P = \\Gamma \\kappa$. Since the curvature $\\kappa$ is stated to be fixed, the change in $\\Delta P$ is determined solely by the change in $\\Gamma$.\nThe new pressure drop is $\\Delta P_{1} = \\Gamma_{1} \\kappa$. Substituting our result for $\\Gamma_{1}$:\n$$\n\\Delta P_{1} = \\left(\\frac{1}{2} \\Gamma_{0}\\right) \\kappa = \\frac{1}{2} (\\Gamma_{0} \\kappa)\n$$\nSince the original pressure drop was $\\Delta P_{0} = \\Gamma_{0} \\kappa$, we find that $\\Delta P_{1} = \\frac{1}{2} \\Delta P_{0}$. The change in pressure drop is negative ($\\Delta P_1 < \\Delta P_0$). As $\\Delta P$ represents the capillary resistance to spreading, a decrease in $\\Delta P$ signifies a decrease in the net resistance. Thus, the tissue spreading is less resisted after the E-cadherin reduction.\n\nThe final answer, as requested, is only the symbolic expression for $\\Gamma_{1}$ in terms of $\\Gamma_{0}$.", "answer": "$$\n\\boxed{\\frac{1}{2} \\Gamma_{0}}\n$$", "id": "2640043"}, {"introduction": "Having established a link between molecules and tissue tension, we now turn to the analysis of the resulting large-scale tissue flows. By treating the embryo as a continuous medium, we can apply the tools of continuum mechanics to decompose complex movements into fundamental modes of deformation, such as compression, expansion, and shear. This exercise guides you through the process of computing the strain rate tensor from a velocity field, a common task in analyzing modern microscopy data, to quantitatively classify morphogenetic movements and correlate them with underlying cellular events like intercalation.", "problem": "You are given two-dimensional Eulerian tissue velocity fields from Particle Image Velocimetry (PIV) during convergent extension in gastrulation. Model the tissue as a planar continuum with velocity field $\\mathbf{v}(x,y) = (u(x,y), v(x,y))$. The kinematic rate-of-deformation tensor (symmetric strain rate tensor) is defined as\n$$\n\\mathbf{D} = \\frac{1}{2}\\left(\\nabla \\mathbf{v} + \\nabla \\mathbf{v}^{\\mathsf{T}}\\right),\n$$\nwhere\n$$\n\\nabla \\mathbf{v} =\n\\begin{bmatrix}\n\\frac{\\partial u}{\\partial x} & \\frac{\\partial u}{\\partial y}\\\\\n\\frac{\\partial v}{\\partial x} & \\frac{\\partial v}{\\partial y}\n\\end{bmatrix}.\n$$\nDefine the divergence $\\delta = \\mathrm{tr}(\\mathbf{D}) = \\frac{\\partial u}{\\partial x} + \\frac{\\partial v}{\\partial y}$ and the deviatoric tensor $\\mathbf{D}' = \\mathbf{D} - \\frac{1}{2}\\delta\\,\\mathbf{I}$, where $\\mathbf{I}$ is the identity tensor in two dimensions. Define the scalar shear-rate magnitude by the second invariant\n$$\n\\dot{\\gamma} = \\sqrt{2\\,\\mathbf{D}':\\mathbf{D}'},\n$$\nwhere $:$ denotes the double contraction. Using these invariants, classify each grid point into regimes using two thresholds: a dimensionless ratio $\\rho > 0$ and a noise floor $\\varepsilon \\ge 0$,\n- shear-dominated if $\\dot{\\gamma} \\ge \\rho\\,|\\delta|$ and $\\dot{\\gamma} \\ge \\varepsilon$,\n- compression-dominated if $\\delta \\le -\\varepsilon$ and $|\\delta| > \\rho\\,\\dot{\\gamma}$,\n- otherwise neither.\n\nAssume velocity components $u$ and $v$ are provided on a uniform rectangular grid with spacing $\\Delta x$ and $\\Delta y$ along $x$ and $y$. Use second-order central differences for interior points and first-order one-sided differences on the boundary to approximate partial derivatives. A list of cell intercalation events is provided as point coordinates $(x_e, y_e)$ in the same coordinate system as the velocity field; correlate these events with the classification by nearest-neighbor assignment to the closest grid node.\n\nYour program must, for each test case, compute:\n- the fraction of intercalation events that lie in shear-dominated regions,\n- the fraction of intercalation events that lie in compression-dominated regions.\n\nFractions are unitless and must be reported rounded to three decimal places.\n\nFundamental base you may assume:\n- At the mesoscopic scale, epithelial tissues undergoing gastrulation can be treated as continuous media; the symmetric part of the velocity gradient $\\mathbf{D}$ captures instantaneous tissue strain rate.\n- Particle Image Velocimetry (PIV) yields an Eulerian velocity field $\\mathbf{v}(x,y)$.\n- Finite differences consistently approximate spatial derivatives on uniform grids.\n\nAngle units are not involved. Velocity fields are specified in micrometers per minute, grid coordinates in micrometers, and strain-rate invariants in per minute. The requested output fractions are dimensionless.\n\nTest Suite:\nFor all cases, use a square grid with $N_x = 21$, $N_y = 21$, $x \\in \\{-10,-9,\\dots,10\\}$ micrometers, $y \\in \\{-10,-9,\\dots,10\\}$ micrometers, $\\Delta x = 1$ micrometer, $\\Delta y = 1$ micrometer. For each case, construct $u(x,y)$ and $v(x,y)$ as specified.\n\n- Test Case $1$ (convergent extension, area-preserving extensional shear):\n  - Parameter $a = 0.1$ per minute.\n  - Velocity field: $u(x,y) = -a\\,x$, $v(x,y) = a\\,y$.\n  - Thresholds: $\\rho = 1.0$, $\\varepsilon = 10^{-6}$ per minute.\n  - Intercalation events (micrometers): $\\{(0,0), (1,0), (-1,0), (0,1), (2,-1), (-2,1)\\}$.\n\n- Test Case $2$ (isotropic compression):\n  - Parameter $k = 0.05$ per minute.\n  - Velocity field: $u(x,y) = -k\\,x$, $v(x,y) = -k\\,y$.\n  - Thresholds: $\\rho = 1.0$, $\\varepsilon = 10^{-6}$ per minute.\n  - Intercalation events (micrometers): $\\{(5,5), (-5,-5), (3,-7), (0,0), (9,-2)\\}$.\n\n- Test Case $3$ (simple shear):\n  - Parameter $s = 0.08$ per minute.\n  - Velocity field: $u(x,y) = s\\,y$, $v(x,y) = 0$.\n  - Thresholds: $\\rho = 2.0$, $\\varepsilon = 0.01$ per minute.\n  - Intercalation events (micrometers): $\\{(-6,0), (0,5), (7,-3), (2,2)\\}$.\n\n- Test Case $4$ (isotropic expansion, edge case with neither shear nor compression):\n  - Parameter $k = 0.06$ per minute.\n  - Velocity field: $u(x,y) = k\\,x$, $v(x,y) = k\\,y$.\n  - Thresholds: $\\rho = 1.0$, $\\varepsilon = 10^{-6}$ per minute.\n  - Intercalation events (micrometers): $\\{(0,0), (8,8)\\}$.\n\nRequired final output format:\nYour program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, where each test case contributes a two-element list in the order $[\\text{fraction\\_shear}, \\text{fraction\\_compression}]$, with each fraction rounded to three decimal places. For example, a valid output for two cases would look like $[[0.500,0.250],[1.000,0.000]]$.", "solution": "The problem statement has been analyzed and is deemed valid. It is scientifically grounded in continuum mechanics and developmental biology, mathematically well-posed, and presented with objective, unambiguous language. All necessary data, models, and boundary conditions for a unique solution are provided. We may proceed.\n\nThe fundamental task is to classify the deformation regimes of a biological tissue, modeled as a two-dimensional continuum, based on its velocity field $\\mathbf{v}(x,y) = (u(x,y), v(x,y))$. The classification is then used to analyze the environment of specific biological events, namely cell intercalations.\n\nThe solution methodology involves the following steps:\n1.  A discrete computational grid is established to represent the continuous domain. The problem specifies a uniform grid of $N_x=21 \\times N_y=21$ points, with $x \\in \\{-10, -9, \\dots, 10\\}$ and $y \\in \\{-10, -9, \\dots, 10\\}$, corresponding to grid spacings of $\\Delta x = 1$ micrometer and $\\Delta y = 1$ micrometer.\n2.  The analytical velocity fields $(u(x,y), v(x,y))$ for each test case are sampled onto this grid.\n3.  The velocity gradient tensor, $\\nabla \\mathbf{v}$, is computed at each grid point. The problem specifies a numerical differentiation scheme: second-order central differences for interior points and first-order one-sided differences for boundary points. This scheme is conveniently implemented using the `numpy.gradient` function with the `edge_order=1` argument. The components of the gradient are:\n    $$\n    \\nabla \\mathbf{v} =\n    \\begin{bmatrix}\n    \\frac{\\partial u}{\\partial x} & \\frac{\\partial u}{\\partial y}\\\\\n    \\frac{\\partial v}{\\partial x} & \\frac{\\partial v}{\\partial y}\n    \\end{bmatrix}\n    $$\n4.  From the velocity gradient, we compute two key kinematic invariants: the divergence, $\\delta$, and the scalar shear-rate magnitude, $\\dot{\\gamma}$.\n    - The divergence, $\\delta$, is the trace of the rate-of-deformation tensor $\\mathbf{D} = \\frac{1}{2}(\\nabla \\mathbf{v} + \\nabla \\mathbf{v}^{\\mathsf{T}})$, which simplifies to the trace of the velocity gradient itself:\n      $$\n      \\delta = \\mathrm{tr}(\\mathbf{D}) = \\frac{\\partial u}{\\partial x} + \\frac{\\partial v}{\\partial y}\n      $$\n      This scalar quantity measures the rate of local area change (expansion for $\\delta > 0$, compression for $\\delta < 0$).\n    - The scalar shear-rate magnitude, $\\dot{\\gamma}$, is defined from the second invariant of the deviatoric rate-of-deformation tensor $\\mathbf{D}' = \\mathbf{D} - \\frac{1}{2}\\delta\\,\\mathbf{I}$. The definition is $\\dot{\\gamma} = \\sqrt{2\\,\\mathbf{D}':\\mathbf{D}'}$, where $:$ denotes the double dot product. A direct calculation yields a more convenient formula in terms of the velocity derivatives:\n      $$\n      \\dot{\\gamma} = \\sqrt{\\left(\\frac{\\partial u}{\\partial x} - \\frac{\\partial v}{\\partial y}\\right)^2 + \\left(\\frac{\\partial u}{\\partial y} + \\frac{\\partial v}{\\partial x}\\right)^2}\n      $$\n      This scalar measures the magnitude of the rate of shape change (shear) at constant area.\n5.  Using the computed fields of $\\delta$ and $\\dot{\\gamma}$, and the given thresholds $\\rho$ and $\\varepsilon$, each grid point is classified into one of three regimes:\n    - Shear-dominated: if $\\dot{\\gamma} \\ge \\rho\\,|\\delta|$ and $\\dot{\\gamma} \\ge \\varepsilon$.\n    - Compression-dominated: if $\\delta \\le -\\varepsilon$ and $|\\delta| > \\rho\\,\\dot{\\gamma}$.\n    - Otherwise, classified as 'neither'.\n    A classification map is thus generated for the entire domain.\n6.  The given cell intercalation events, located at coordinates $(x_e, y_e)$, are correlated with the classified regions. This is done by nearest-neighbor assignment. For an event at $(x_e, y_e)$, the closest grid node is found, and the classification of that node is assigned to the event. Since the grid nodes and event locations are given at integer coordinates, an event at $(x_e, y_e)$ coincides exactly with the grid node at the same coordinates. The grid indices $(i,j)$ for a coordinate pair $(x,y)$ are determined by the mapping:\n    $$\n    i = x - x_{\\min} = x + 10\n    $$\n    $$\n    j = y - y_{\\min} = y + 10\n    $$\n7.  Finally, for each test case, we count the number of events that fall into shear-dominated ($N_{shear}$) and compression-dominated ($N_{compression}$) regions. The required fractions are then computed as:\n    $$\n    f_{shear} = \\frac{N_{shear}}{N_{total}}, \\quad f_{compression} = \\frac{N_{compression}}{N_{total}}\n    $$\n    where $N_{total}$ is the total number of intercalation events. These fractions are rounded to three decimal places as required. This procedure is systematically applied to all provided test cases.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the tissue mechanics problem by computing deformation invariants,\n    classifying grid points, and analyzing intercalation event locations.\n    \"\"\"\n\n    # Grid definition, constant for all test cases\n    Nx, Ny = 21, 21\n    x_min, x_max = -10, 10\n    y_min, y_max = -10, 10\n    dx, dy = 1.0, 1.0\n\n    x_coords = np.arange(x_min, x_max + 1, dx)\n    y_coords = np.arange(y_min, y_max + 1, dy)\n    \n    # Using 'ij' indexing so that the first axis of arrays corresponds to x\n    # and the second to y.\n    xx, yy = np.meshgrid(x_coords, y_coords, indexing='ij')\n\n    test_cases = [\n        {\n            \"name\": \"Test Case 1 (Convergent Extension)\",\n            \"params\": {\"a\": 0.1},\n            \"u_func\": lambda x, y, p: -p[\"a\"] * x,\n            \"v_func\": lambda x, y, p: p[\"a\"] * y,\n            \"rho\": 1.0,\n            \"epsilon\": 1e-6,\n            \"events\": [(0, 0), (1, 0), (-1, 0), (0, 1), (2, -1), (-2, 1)],\n        },\n        {\n            \"name\": \"Test Case 2 (Isotropic Compression)\",\n            \"params\": {\"k\": 0.05},\n            \"u_func\": lambda x, y, p: -p[\"k\"] * x,\n            \"v_func\": lambda x, y, p: -p[\"k\"] * y,\n            \"rho\": 1.0,\n            \"epsilon\": 1e-6,\n            \"events\": [(5, 5), (-5, -5), (3, -7), (0, 0), (9, -2)],\n        },\n        {\n            \"name\": \"Test Case 3 (Simple Shear)\",\n            \"params\": {\"s\": 0.08},\n            \"u_func\": lambda x, y, p: p[\"s\"] * y,\n            \"v_func\": lambda x, y, p: 0 * x, # Keep it as a 2D array\n            \"rho\": 2.0,\n            \"epsilon\": 0.01,\n            \"events\": [(-6, 0), (0, 5), (7, -3), (2, 2)],\n        },\n        {\n            \"name\": \"Test Case 4 (Isotropic Expansion)\",\n            \"params\": {\"k\": 0.06},\n            \"u_func\": lambda x, y, p: p[\"k\"] * x,\n            \"v_func\": lambda x, y, p: p[\"k\"] * y,\n            \"rho\": 1.0,\n            \"epsilon\": 1e-6,\n            \"events\": [(0, 0), (8, 8)],\n        },\n    ]\n\n    results = []\n\n    for case in test_cases:\n        params = case[\"params\"]\n        rho = case[\"rho\"]\n        epsilon = case[\"epsilon\"]\n        events = case[\"events\"]\n\n        # 1. Generate velocity fields on the grid\n        u = case[\"u_func\"](xx, yy, params)\n        v = case[\"v_func\"](xx, yy, params)\n\n        # 2. Compute partial derivatives using specified finite difference rules\n        # np.gradient with edge_order=1 uses 2nd-order central differences in the\n        # interior and 1st-order one-sided differences at the boundaries.\n        # The return order is [derivative_along_axis_0, derivative_along_axis_1, ...].\n        # Due to `indexing='ij'`, axis 0 is x and axis 1 is y.\n        dudx, dudy = np.gradient(u, dx, dy, edge_order=1)\n        dvdx, dvdy = np.gradient(v, dx, dy, edge_order=1)\n\n        # 3. Calculate kinematic invariants: divergence (delta) and shear rate (gamma_dot)\n        delta = dudx + dvdy\n        gamma_dot = np.sqrt((dudx - dvdy)**2 + (dudy + dvdx)**2)\n\n        # 4. Classify each grid point\n        is_shear_dominated = (gamma_dot >= rho * np.abs(delta)) & (gamma_dot >= epsilon)\n        is_compression_dominated = (delta <= -epsilon) & (np.abs(delta) > rho * gamma_dot)\n\n        # 5. Correlate intercalation events with grid classifications\n        shear_event_count = 0\n        compression_event_count = 0\n        total_events = len(events)\n        \n        if total_events == 0:\n            results.append([0.0, 0.0])\n            continue\n\n        for xe, ye in events:\n            # Map event coordinates to grid indices.\n            # Grid runs from -10 to 10, so index i corresponds to x = i - 10.\n            # Thus, for a given coordinate x, the index is i = x + 10.\n            # Event coordinates are integers, so they fall exactly on grid nodes.\n            ix = int(round(xe - x_min))\n            iy = int(round(ye - y_min))\n\n            if is_shear_dominated[ix, iy]:\n                shear_event_count += 1\n            elif is_compression_dominated[ix, iy]:\n                compression_event_count += 1\n        \n        # 6. Calculate fractions\n        frac_shear = shear_event_count / total_events\n        frac_compression = compression_event_count / total_events\n        \n        results.append([frac_shear, frac_compression])\n\n    # 7. Format final output string\n    formatted_results = [f\"[{r[0]:.3f},{r[1]:.3f}]\" for r in results]\n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n\n```", "id": "2640076"}, {"introduction": "The coordinated cell behaviors that drive the mechanics of gastrulation are orchestrated by precise signaling pathways. However, these pathways operate in a noisy environment, raising the question of how reliable patterning is achieved. In this final practice, we will build a probabilistic model to explore how signaling gradients, their antagonists, and intrinsic stochasticity interact to determine developmental outcomes, using the establishment of left-right asymmetry as a classic and clinically relevant example.", "problem": "You are given a mechanistic probabilistic model of Nodal signaling during gastrulation in the lateral plate mesoderm (LPM), in which the Transforming Growth Factor beta (TGF-$\\beta$) family ligand Nodal establishes a left-biased signaling field and the antagonist Dand5 (also known as Cerl2), when present in a cell, reduces the effective Nodal input. The model assumes the following foundational facts: (i) ligand concentration fields subject to diffusion, degradation, and advection can be approximated locally by a continuous distribution; (ii) the probability of gene activation is a monotonic function of effective ligand input relative to a cellular threshold; (iii) stochasticity of production, transport, and receptor noise can be modeled by a continuous random variable. You will combine these with elementary probability theory to compute embryo-level left–right asymmetry penetrance under genetic mosaic conditions for Dand5.\n\nModel assumptions to be used:\n- For each embryo side $s \\in \\{L,R\\}$ (left $L$ and right $R$), the per-cell extracellular Nodal input $X_s$ is modeled as a Gaussian random variable $X_s \\sim \\mathcal{N}(\\mu_s, \\sigma^2)$ with mean $\\mu_s$ and standard deviation $\\sigma$, where $\\mu_L \\ge \\mu_R$ due to leftward bias from ciliary flow at the left–right organizer.\n- Dand5, when present in a cell, multiplicatively reduces the effective Nodal input by a factor $(1-\\gamma)$, where $0<\\gamma<1$ quantifies antagonism strength. In Dand5-null cells, $\\gamma=0$ for that cell. Thus the effective input for a cell on side $s$ is $C_s = X_s$ in Dand5-null cells and $C_s = (1-\\gamma) X_s$ in Dand5-present cells.\n- A cell activates the Nodal response if and only if $C_s \\ge T$, where $T>0$ is the cell-autonomous activation threshold (dimensionless).\n- The tissue is a genetic mosaic: independently for each cell on side $s$, the probability of being Dand5-null is $q_s \\in [0,1]$, and Dand5-present with probability $1-q_s$. Assume independence among cells and between sides at the cell level.\n- Each side $s$ has $N_s$ cells in the Nodal-competent domain. Let $K_s$ be the number of cells that activate on side $s$. The embryo is scored as having correct leftward asymmetry if and only if $K_L \\ge m$ and $K_R < m$, where $m$ is a fixed integer threshold for tissue-level readout. The asymmetry penetrance is the probability of this event across embryos, under the stochastic model.\n\nTasks:\n1) From these assumptions, derive a formula for the per-cell activation probability $p_s$ on side $s$ as a function of $(\\mu_s, \\sigma, \\gamma, T, q_s)$, using only the properties of the Gaussian distribution and conditioning on Dand5 state. Express your result in terms of the Gaussian tail probability.\n2) Using the independence assumptions, derive a closed-form expression (in terms of standard probability distribution functions) for the embryo-level probability of correct leftward asymmetry as a function of $N_L, N_R, m, p_L, p_R$.\n3) To explicitly connect “how local loss of Dand5 alters the threshold for Nodal activation,” compute the effective input thresholds for activation in the presence versus absence of Dand5. Report these two thresholds as $T_{\\text{present}}$ and $T_{\\text{null}}$ where $T_{\\text{present}}$ is the minimum $X_s$ such that $(1-\\gamma) X_s \\ge T$ and $T_{\\text{null}}$ is the minimum $X_s$ such that $X_s \\ge T$.\n\nNumerical evaluation:\n- Implement a program that, for the test suite below, outputs for each case a list of three floats $[T_{\\text{present}}, T_{\\text{null}}, P_{\\text{asym}}]$, where $P_{\\text{asym}}$ is the embryo-level probability of correct leftward asymmetry obtained in task $2$. All outputs are dimensionless and must be reported as decimals rounded to six digits after the decimal point.\n- Use the following test suite. Each test case is a tuple $(N_L,N_R,\\mu_L,\\mu_R,\\sigma,\\gamma,T,q_L,q_R,m)$:\n    - Case A (happy path): $(100, 100, 1.0, 0.8, 0.2, 0.4, 0.9, 0.3, 0.3, 30)$, i.e., $N_L=100$, $N_R=100$, $\\mu_L=1.0$, $\\mu_R=0.8$, $\\sigma=0.2$, $\\gamma=0.4$, $T=0.9$, $q_L=0.3$, $q_R=0.3$, $m=30$.\n    - Case B (boundary: no mosaic): $(100, 100, 1.0, 0.8, 0.2, 0.4, 0.9, 0.0, 0.0, 30)$.\n    - Case C (boundary: full local loss): $(100, 100, 1.0, 0.8, 0.2, 0.4, 0.9, 1.0, 1.0, 30)$.\n    - Case D (small noise, moderate bias): $(80, 80, 0.95, 0.85, 0.05, 0.3, 0.9, 0.2, 0.2, 10)$.\n    - Case E (high threshold, weak bias): $(120, 120, 1.0, 0.95, 0.2, 0.3, 1.2, 0.5, 0.5, 20)$.\n\nFinal output format requirement:\n- Your program should produce a single line of output containing the results for the five cases as a comma-separated list enclosed in square brackets, where each element is itself a list of three floats $[T_{\\text{present}}, T_{\\text{null}}, P_{\\text{asym}}]$ rounded to six decimal places, for example: $[[a_1,b_1,c_1],[a_2,b_2,c_2],\\dots,[a_5,b_5,c_5]]$.", "solution": "The problem statement is scrutinized and found to be valid. It is scientifically grounded in the principles of developmental biology and quantitative modeling, mathematically well-posed with sufficient information for a unique solution, and phrased with objective, formal language. There are no contradictions, ambiguities, or factual errors. We shall proceed with the derivation and solution.\n\nThe solution is partitioned into three tasks as requested.\n\n### Task 1: Derivation of Per-Cell Activation Probability, $p_s$\n\nLet $A_s$ be the event that a single cell on side $s \\in \\{L, R\\}$ activates the Nodal response. The probability of this event is $p_s = P(A_s)$. The problem states that the tissue is a genetic mosaic. For any given cell on side $s$, let $D_{null}$ be the event that the cell is Dand5-null, which occurs with probability $P(D_{null}) = q_s$. The complementary event, that the cell is Dand5-present, is denoted $D_{present}$, and its probability is $P(D_{present}) = 1 - q_s$.\n\nUsing the law of total probability, we condition the activation event $A_s$ on the genotype of the cell:\n$$p_s = P(A_s) = P(A_s | D_{null}) P(D_{null}) + P(A_s | D_{present}) P(D_{present})$$\nSubstituting the known probabilities gives:\n$$p_s = q_s \\cdot P(A_s | D_{null}) + (1-q_s) \\cdot P(A_s | D_{present})$$\n\nNext, we evaluate the conditional probabilities. Activation occurs if the effective Nodal input $C_s$ meets or exceeds a threshold $T$, i.e., $C_s \\ge T$.\n\nFor a Dand5-null cell, $C_s = X_s$, where $X_s \\sim \\mathcal{N}(\\mu_s, \\sigma^2)$ is the extracellular Nodal input. The activation condition is $X_s \\ge T$. The probability is:\n$$P(A_s | D_{null}) = P(X_s \\ge T)$$\n\nFor a Dand5-present cell, $C_s = (1-\\gamma) X_s$. The activation condition is $(1-\\gamma)X_s \\ge T$. Since the problem specifies $0 < \\gamma < 1$, the term $(1-\\gamma)$ is positive, so we can divide by it without altering the inequality: $X_s \\ge \\frac{T}{1-\\gamma}$. The probability is:\n$$P(A_s | D_{present}) = P\\left(X_s \\ge \\frac{T}{1-\\gamma}\\right)$$\n\nThese probabilities are Gaussian tail probabilities. For a random variable $X \\sim \\mathcal{N}(\\mu, \\sigma^2)$, the tail probability $P(X \\ge x)$ is computed by standardizing the variable. Let $Z = (X-\\mu)/\\sigma \\sim \\mathcal{N}(0, 1)$. The cumulative distribution function of $Z$ is $\\Phi(z) = P(Z \\le z)$. The tail probability is $1 - \\Phi(z)$.\n$$P(X \\ge x) = P\\left(\\frac{X - \\mu}{\\sigma} \\ge \\frac{x - \\mu}{\\sigma}\\right) = 1 - \\Phi\\left(\\frac{x - \\mu}{\\sigma}\\right)$$\n\nApplying this formula to our conditional probabilities:\n$$P(A_s | D_{null}) = 1 - \\Phi\\left(\\frac{T - \\mu_s}{\\sigma}\\right)$$\n$$P(A_s | D_{present}) = 1 - \\Phi\\left(\\frac{T/(1-\\gamma) - \\mu_s}{\\sigma}\\right)$$\n\nSubstituting these expressions back into the formula for $p_s$ yields the final derived formula:\n$$p_s = q_s \\left[1 - \\Phi\\left(\\frac{T - \\mu_s}{\\sigma}\\right)\\right] + (1-q_s) \\left[1 - \\Phi\\left(\\frac{T/(1-\\gamma) - \\mu_s}{\\sigma}\\right)\\right]$$\n\n### Task 2: Derivation of Embryo-Level Asymmetry Probability, $P_{\\text{asym}}$\n\nLet $K_s$ be the random variable for the number of activated cells on side $s$, which contains $N_s$ cells. As each cell activates independently with probability $p_s$ (derived in Task 1), $K_s$ follows a binomial distribution, $K_s \\sim \\text{Binomial}(N_s, p_s)$. The probability mass function is $P(K_s = k) = \\binom{N_s}{k} p_s^k (1-p_s)^{N_s-k}$ for $k \\in \\{0, 1, \\dots, N_s\\}$.\n\nCorrect leftward asymmetry is defined by the joint event $\\{K_L \\ge m\\} \\cap \\{K_R < m\\}$. The model assumes independence of cell fates between the left and right sides, which implies the random variables $K_L$ and $K_R$ are independent. Therefore, the probability of the joint event, which is the asymmetry penetrance $P_{\\text{asym}}$, is the product of the marginal probabilities:\n$$P_{\\text{asym}} = P(K_L \\ge m) \\cdot P(K_R < m)$$\n\nThese probabilities can be expressed using the cumulative distribution function (CDF) of the binomial distribution, which we denote as $F_{\\text{Bin}}(k; N, p) = P(K \\le k) = \\sum_{i=0}^{k} \\binom{N}{i} p^i (1-p)^{N-i}$.\n\nThe probability for the right side, $K_R < m$, is equivalent to $K_R \\le m-1$. This is a direct evaluation of the binomial CDF:\n$$P(K_R < m) = P(K_R \\le m-1) = F_{\\text{Bin}}(m-1; N_R, p_R)$$\n\nThe probability for the left side, $K_L \\ge m$, is the survival function, or complementary CDF:\n$$P(K_L \\ge m) = 1 - P(K_L < m) = 1 - P(K_L \\le m-1) = 1 - F_{\\text{Bin}}(m-1; N_L, p_L)$$\n\nCombining these results gives the final closed-form expression for the asymmetry penetrance:\n$$P_{\\text{asym}} = \\left(1 - F_{\\text{Bin}}(m-1; N_L, p_L)\\right) \\cdot F_{\\text{Bin}}(m-1; N_R, p_R)$$\nwhere the probabilities $p_L$ and $p_R$ are computed using the formula from Task 1 with the respective parameters for each side.\n\n### Task 3: Calculation of Effective Input Thresholds, $T_{\\text{present}}$ and $T_{\\text{null}}$\n\nThis task requires finding the minimum extracellular Nodal concentration $X_s$ required for a cell to activate, depending on its Dand5 status. The general activation rule is $C_s \\ge T$.\n\nFor a Dand5-null cell, the effective input is $C_s = X_s$. The activation condition becomes $X_s \\ge T$. The minimum value of $X_s$ that satisfies this is $T$. Thus, the effective threshold is:\n$$T_{\\text{null}} = T$$\n\nFor a Dand5-present cell, the effective input is $C_s = (1-\\gamma)X_s$. The activation condition is $(1-\\gamma)X_s \\ge T$. Given $0 < \\gamma < 1$, we can divide by the positive constant $(1-\\gamma)$ to isolate $X_s$:\n$$X_s \\ge \\frac{T}{1-\\gamma}$$\nThe minimum value of $X_s$ that satisfies this is $T/(1-\\gamma)$. Thus, the effective threshold is:\n$$T_{\\text{present}} = \\frac{T}{1-\\gamma}$$\nThis confirms the biological intuition that an antagonist increases the ligand concentration required to elicit a response.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.stats import norm, binom\n\ndef solve():\n    \"\"\"\n    Calculates asymmetry penetrance for a probabilistic model of Nodal signaling.\n    \"\"\"\n    # Define the test cases from the problem statement.\n    # Each case is a tuple: (N_L, N_R, mu_L, mu_R, sigma, gamma, T, q_L, q_R, m)\n    test_cases = [\n        (100, 100, 1.0, 0.8, 0.2, 0.4, 0.9, 0.3, 0.3, 30), # Case A\n        (100, 100, 1.0, 0.8, 0.2, 0.4, 0.9, 0.0, 0.0, 30), # Case B\n        (100, 100, 1.0, 0.8, 0.2, 0.4, 0.9, 1.0, 1.0, 30), # Case C\n        (80, 80, 0.95, 0.85, 0.05, 0.3, 0.9, 0.2, 0.2, 10), # Case D\n        (120, 120, 1.0, 0.95, 0.2, 0.3, 1.2, 0.5, 0.5, 20), # Case E\n    ]\n\n    all_results_str = []\n\n    for case in test_cases:\n        N_L, N_R, mu_L, mu_R, sigma, gamma, T, q_L, q_R, m = case\n\n        # Task 3: Calculate effective input thresholds\n        T_null = float(T)\n        T_present = T / (1 - gamma)\n\n        # Task 1: Calculate per-cell activation probabilities p_L and p_R\n        def calculate_p_s(mu_s, q_s, T_val, T_present_val, sigma_val):\n            \"\"\"Calculates per-cell activation probability for a given side.\"\"\"\n            # Probability of activation for a Dand5-null cell: P(X_s >= T)\n            # norm.sf is the survival function (1 - CDF), which is P(X > x)\n            # For a continuous distribution, P(X >= x) = P(X > x)\n            prob_act_null = norm.sf(T_val, loc=mu_s, scale=sigma_val)\n            \n            # Probability of activation for a Dand5-present cell: P(X_s >= T/(1-gamma))\n            prob_act_present = norm.sf(T_present_val, loc=mu_s, scale=sigma_val)\n            \n            # Total probability via law of total probability\n            p_s = q_s * prob_act_null + (1 - q_s) * prob_act_present\n            return p_s\n\n        p_L = calculate_p_s(mu_L, q_L, T, T_present, sigma)\n        p_R = calculate_p_s(mu_R, q_R, T, T_present, sigma)\n\n        # Task 2: Calculate embryo-level asymmetry probability P_asym\n        # Probability of correct activation on the left side: K_L >= m\n        # This is 1 - P(K_L <= m-1). binom.cdf(k, n, p) computes P(X <= k).\n        # We need to handle m=0 case for m-1=-1, where cdf is 0, correctly.\n        # Scipy's binom.cdf correctly handles k < 0 by returning 0.\n        prob_correct_L = 1.0 - binom.cdf(m - 1, n=N_L, p=p_L)\n\n        # Probability of correct lack of activation on the right side: K_R < m\n        # This is P(K_R <= m-1).\n        prob_correct_R = binom.cdf(m - 1, n=N_R, p=p_R)\n\n        # Total asymmetry probability assuming independence\n        P_asym = prob_correct_L * prob_correct_R\n\n        # Format results for the current case into a string '[f1,f2,f3]'\n        result_str = f\"[{T_present:.6f},{T_null:.6f},{P_asym:.6f}]\"\n        all_results_str.append(result_str)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(all_results_str)}]\")\n\nsolve()\n```", "id": "2640068"}]}