{"hands_on_practices": [{"introduction": "Autonomous specification proposes that cell fate is determined by factors inherited within the cell's cytoplasm. This practice challenges you to move beyond this qualitative concept by modeling a classic experimental test: transplanting cytoplasm to re-specify a cell's fate. By incorporating principles like mass action, first-order decay, and threshold-based activation, you will derive the minimum volume of cytoplasm needed for a successful specification event [@problem_id:2650804]. This exercise sharpens your ability to translate a biological hypothesis into a predictive mathematical model that reflects real-world biophysical constraints.", "problem": "Micromanipulation experiments that transplant cytoplasm from a donor blastomere to a recipient region are a classical approach to test autonomous specification. Consider a syncytial embryo in which a single cytoplasmic determinant drives fate autonomously when its free concentration exceeds a threshold. You microinject a small volume of donor cytoplasm into a defined recipient region of cytoplasmic volume $V$ (assume $v \\ll V$ so that volume change upon injection is negligible). The donor cytoplasm contains the determinant at a uniform total concentration $C_{d}$.\n\nWithin the recipient region, after instantaneous mixing, the determinant is subject to the following processes:\n- Reversible binding to a uniform pool of a single binding partner at total concentration $B_{\\mathrm{tot}}$, with dissociation constant $K_{d}$ defined by the law of mass action. Only the free (unbound) determinant is bioactive.\n- First-order degradation of total determinant (free plus bound) with rate constant $k$.\n- No exchange with other regions after mixing, and binding equilibrates rapidly relative to degradation.\n\nAutonomous re-specification requires that the free determinant concentration stay at or above a threshold $T$ for a contiguous duration $\\tau$ immediately following injection.\n\nUsing conservation of mass, the definition of the dissociation constant by the law of mass action, and first-order decay kinetics, derive a closed-form analytic expression for the minimal injected volume $v_{\\min}$ of donor cytoplasm that guarantees the free determinant concentration criterion above is met. Express your final answer in terms of $C_{d}$, $V$, $B_{\\mathrm{tot}}$, $K_{d}$, $T$, $k$, and $\\tau$. No numerical rounding is required. Express $v_{\\min}$ in liters.", "solution": "The problem is scientifically grounded, well-posed, and objective. It describes a classical experimental scenario in developmental biology using a standard quantitative model based on conservation of mass, the law of mass action for binding kinetics, and first-order decay. All necessary parameters are provided to derive a unique analytical solution. The problem is valid.\n\nThe objective is to derive an expression for the minimum injected volume, $v_{\\min}$, required to ensure the free concentration of a cytoplasmic determinant, $C_{\\text{free}}$, remains at or above a threshold, $T$, for a duration $\\tau$ after injection.\n\nFirst, we establish the initial condition at time $t=0$. The total amount of determinant introduced into the recipient region is the product of the injected volume, $v$, and the donor concentration, $C_{d}$. This amount is instantaneously mixed into the recipient volume, $V$. Since the problem states $v \\ll V$, the total volume is approximately constant at $V$. The initial total concentration of the determinant, $C_{\\text{tot}}(0)$, is therefore:\n$$C_{\\text{tot}}(0) = \\frac{v C_{d}}{V}$$\n\nNext, we model the change in the total determinant concentration over time. The problem states that the total determinant (both free and bound) degrades via a first-order process with rate constant $k$. This is described by the differential equation:\n$$\\frac{dC_{\\text{tot}}(t)}{dt} = -k C_{\\text{tot}}(t)$$\nThe solution to this first-order linear ordinary differential equation, with the initial condition $C_{\\text{tot}}(0)$, is:\n$$C_{\\text{tot}}(t) = C_{\\text{tot}}(0) \\exp(-kt) = \\frac{v C_{d}}{V} \\exp(-kt)$$\n\nThe bioactive determinant is the free form, $C_{\\text{free}}$. Its concentration is related to the total concentration, $C_{\\text{tot}}$, through a rapid binding equilibrium with a binding partner. Let $C$, $B$, and $CB$ represent the free determinant, free binding partner, and the complex, respectively. Their concentrations are denoted $C_{\\text{free}}$, $B_{\\text{free}}$, and $[CB]$. The equilibrium is governed by the law of mass action with dissociation constant $K_{d}$:\n$$K_{d} = \\frac{C_{\\text{free}} B_{\\text{free}}}{[CB]}$$\nConservation of mass for the determinant and its binding partner gives two additional equations:\n$$C_{\\text{tot}} = C_{\\text{free}} + [CB]$$\n$$B_{\\text{tot}} = B_{\\text{free}} + [CB]$$\nwhere $B_{\\text{tot}}$ is the total concentration of the binding partner.\n\nWe can solve this system of three equations to relate $C_{\\text{tot}}$ to $C_{\\text{free}}$. From the mass balance equations, we express $[CB]$ and $B_{\\text{free}}$ in terms of $C_{\\text{tot}}$ and $C_{\\text{free}}$:\n$$[CB] = C_{\\text{tot}} - C_{\\text{free}}$$\n$$B_{\\text{free}} = B_{\\text{tot}} - [CB] = B_{\\text{tot}} - (C_{\\text{tot}} - C_{\\text{free}})$$\nSubstituting these into the expression for $K_{d}$:\n$$K_{d} = \\frac{C_{\\text{free}} (B_{\\text{tot}} - C_{\\text{tot}} + C_{\\text{free}})}{C_{\\text{tot}} - C_{\\text{free}}}$$\nWe need to use this relationship to evaluate the re-specification criterion. It is algebraically more convenient to express $C_{\\text{tot}}$ as a function of $C_{\\text{free}}$. Rearranging the equation above:\n$$K_{d} (C_{\\text{tot}} - C_{\\text{free}}) = C_{\\text{free}} (B_{\\text{tot}} - C_{\\text{tot}} + C_{\\text{free}})$$\n$$K_{d} C_{\\text{tot}} - K_{d} C_{\\text{free}} = C_{\\text{free}} B_{\\text{tot}} - C_{\\text{free}} C_{\\text{tot}} + C_{\\text{free}}^{2}$$\nCollecting terms with $C_{\\text{tot}}$:\n$$C_{\\text{tot}} (K_{d} + C_{\\text{free}}) = C_{\\text{free}}^{2} + B_{\\text{tot}} C_{\\text{free}} + K_{d} C_{\\text{free}}$$\n$$C_{\\text{tot}} (K_{d} + C_{\\text{free}}) = C_{\\text{free}} (C_{\\text{free}} + B_{\\text{tot}} + K_{d})$$\nSolving for $C_{\\text{tot}}$:\n$$C_{\\text{tot}} = C_{\\text{free}} \\frac{C_{\\text{free}} + B_{\\text{tot}} + K_{d}}{C_{\\text{free}} + K_{d}}$$\nThis equation shows that $C_{\\text{tot}}$ is a monotonically increasing function of $C_{\\text{free}}$ for all physically meaningful (non-negative) concentrations.\n\nThe condition for autonomous re-specification is that the free determinant concentration must stay at or above the threshold $T$ for a duration $\\tau$ immediately following injection, i.e., $C_{\\text{free}}(t) \\ge T$ for all $t \\in [0, \\tau]$.\nSince $C_{\\text{tot}}(t)$ is a monotonically decreasing function of time $t$, and $C_{\\text{free}}$ is a monotonically increasing function of $C_{\\text{tot}}$, it follows that $C_{\\text{free}}(t)$ must also be a monotonically decreasing function of time. Therefore, the condition $C_{\\text{free}}(t) \\ge T$ is most difficult to satisfy at the end of the time interval, $t=\\tau$. The requirement simplifies to satisfying the inequality at this single time point:\n$$C_{\\text{free}}(\\tau) \\ge T$$\n\nThe minimum injected volume, $v_{\\min}$, corresponds to the boundary case where the equality holds:\n$$C_{\\text{free}}(\\tau) = T$$\nWe can find the corresponding total concentration at time $\\tau$, which we will call $C_{\\text{tot}}^{*}$, by substituting $C_{\\text{free}} = T$ into our derived relationship:\n$$C_{\\text{tot}}^{*} = T \\frac{T + B_{\\text{tot}} + K_{d}}{T + K_{d}}$$\nThis is the minimum total concentration that must be present at time $t=\\tau$ to meet the specification criterion. Now, we relate this back to the injected volume $v$. The total concentration at time $\\tau$ is given by the degradation kinetics:\n$$C_{\\text{tot}}(\\tau) = \\frac{v C_{d}}{V} \\exp(-k\\tau)$$\nFor the minimal volume $v_{\\min}$, we set $C_{\\text{tot}}(\\tau) = C_{\\text{tot}}^{*}$:\n$$\\frac{v_{\\min} C_{d}}{V} \\exp(-k\\tau) = T \\frac{T + B_{\\text{tot}} + K_{d}}{T + K_{d}}$$\nFinally, we solve for $v_{\\min}$:\n$$v_{\\min} C_{d} = V T \\frac{T + B_{\\text{tot}} + K_{d}}{T + K_{d}} \\exp(k\\tau)$$\n$$v_{\\min} = \\frac{V}{C_{d}} T \\frac{T + B_{\\text{tot}} + K_{d}}{T + K_{d}} \\exp(k\\tau)$$\nThis is the final closed-form analytic expression for the minimal injected volume. The units are consistent, as the ratio of concentrations is dimensionless, and $k\\tau$ is dimensionless, resulting in $v_{\\min}$ having the units of volume, same as $V$.", "answer": "$$\\boxed{\\frac{V T \\left(T + B_{\\mathrm{tot}} + K_{d}\\right)}{C_{d} \\left(T + K_{d}\\right)} \\exp(k \\tau)}$$", "id": "2650804"}, {"introduction": "In contrast to autonomous fate determination, conditional specification relies on intercellular signaling, often through graded morphogen concentrations. This problem explores the foundational \"French flag\" model of positional information using a steady-state reaction-diffusion framework to describe a morphogen gradient [@problem_id:2650835]. You will analytically solve for the concentration profile and then investigate how the position of a fate boundary, defined by a concentration threshold $c_{\\theta}$, scales with changes in morphogen production. This practice provides a rigorous basis for understanding how embryos can generate precise patterns and exhibit regulative, or scaling, properties.", "problem": "A morphogen gradient is used to implement conditional specification in a one-dimensional embryonic field of length $L$. A single morphogen is produced at the anterior boundary at $x=0$ as a constant boundary flux $J$ (molecules per unit area per unit time), diffuses with diffusion coefficient $D$, and is removed by first-order degradation with rate constant $k$. The posterior boundary at $x=L$ is an effective sink that maintains the concentration at zero, representing clearance at the edge. Cells adopt fates by reading a positional value proportional to the local morphogen concentration $c(x)$ at steady state, consistent with the French flag model of positional information.\n\nUse the following foundational principles:\n- Fick's first law for diffusive flux, $J_{\\text{diff}}(x) = -D\\,\\frac{\\partial c}{\\partial x}$.\n- Local mass conservation with first-order removal and no volumetric sources in the interior, $\\frac{\\partial c}{\\partial t} = -\\frac{\\partial J_{\\text{diff}}}{\\partial x} - k\\,c$.\n- Steady state, $\\frac{\\partial c}{\\partial t}=0$, with boundary conditions $-D\\,\\frac{\\partial c}{\\partial x}\\big|_{x=0}=J$ and $c(L)=0$.\n\nLet $c_{\\theta}>0$ be a fixed fate-determining threshold concentration. Define $x_{\\theta}(J)$ as the unique position in $[0,L]$ where $c(x_{\\theta}(J))=c_{\\theta}$ for a given source strength $J$, assuming parameters $(D,k,L)$ and $c_{\\theta}$ admit such a position.\n\nNow, the source strength is doubled to $2J$ while $D$, $k$, $L$, and $c_{\\theta}$ remain unchanged. Compute, in exact closed form, the ratio\n$$\nr \\equiv \\frac{L - x_{\\theta}(2J)}{L - x_{\\theta}(J)} \\, .\n$$\nExpress your final answer as a symbolic expression in terms of $J$, $D$, $k$, $L$, and $c_{\\theta}$ only. No numerical approximation is required.\n\nBriefly justify, based on your derivation, whether positional values rescale proportionally with the change in source strength under this conditional-specification gradient model.", "solution": "The problem statement is validated as scientifically grounded, well-posed, and objective. It presents a standard one-dimensional reaction-diffusion model relevant to morphogen gradients in developmental biology. The physical principles and boundary conditions provided are consistent and sufficient for a unique solution. Therefore, the problem is valid, and we proceed with the derivation.\n\nThe steady-state behavior of the morphogen concentration $c(x)$ is governed by the condition $\\frac{\\partial c}{\\partial t}=0$. The provided mass conservation equation thus becomes:\n$$\n-\\frac{\\partial J_{\\text{diff}}}{\\partial x} - k\\,c = 0\n$$\nSubstituting Fick's first law, $J_{\\text{diff}}(x) = -D\\,\\frac{\\partial c}{\\partial x}$, and recognizing that at steady state the concentration depends only on position $x$, we obtain a second-order ordinary differential equation:\n$$\nD\\,\\frac{d^2c}{dx^2} - k\\,c = 0\n$$\nThis is customarily written as:\n$$\n\\frac{d^2c}{dx^2} - \\lambda^2 c = 0\n$$\nwhere a characteristic length scale is introduced through the parameter $\\lambda = \\sqrt{\\frac{k}{D}}$. The general solution to this linear, homogeneous differential equation is:\n$$\nc(x) = A\\,\\cosh(\\lambda x) + B\\,\\sinh(\\lambda x)\n$$\nThe constants of integration, $A$ and $B$, are determined by applying the specified boundary conditions. The derivative of $c(x)$ required for the flux condition is:\n$$\n\\frac{dc}{dx} = A\\lambda\\,\\sinh(\\lambda x) + B\\lambda\\,\\cosh(\\lambda x)\n$$\nThe boundary conditions are:\n1.  Source flux at the anterior boundary, $x=0$: $-D\\,\\frac{dc}{dx}\\big|_{x=0}=J$\n2.  Zero concentration at the posterior boundary, $x=L$: $c(L)=0$\n\nApplying the first boundary condition at $x=0$:\n$$\n-D\\,[A\\lambda\\,\\sinh(0) + B\\lambda\\,\\cosh(0)] = J\n$$\nGiven that $\\sinh(0)=0$ and $\\cosh(0)=1$, this equation simplifies to:\n$$\n-D B \\lambda = J \\quad \\implies \\quad B = -\\frac{J}{D\\lambda}\n$$\nApplying the second boundary condition at $x=L$:\n$$\nA\\,\\cosh(\\lambda L) + B\\,\\sinh(\\lambda L) = 0\n$$\nWe substitute the determined value of $B$ into this equation to solve for $A$:\n$$\nA\\,\\cosh(\\lambda L) - \\frac{J}{D\\lambda}\\,\\sinh(\\lambda L) = 0 \\quad \\implies \\quad A = \\frac{J}{D\\lambda}\\,\\frac{\\sinh(\\lambda L)}{\\cosh(\\lambda L)} = \\frac{J}{D\\lambda}\\,\\tanh(\\lambda L)\n$$\nSubstituting the expressions for $A$ and $B$ back into the general solution for $c(x)$:\n$$\nc(x) = \\left(\\frac{J}{D\\lambda}\\,\\tanh(\\lambda L)\\right)\\cosh(\\lambda x) - \\left(\\frac{J}{D\\lambda}\\right)\\sinh(\\lambda x)\n$$\nTo simplify, we express $\\tanh(\\lambda L)$ as $\\frac{\\sinh(\\lambda L)}{\\cosh(\\lambda L)}$:\n$$\nc(x) = \\frac{J}{D\\lambda\\,\\cosh(\\lambda L)} \\left( \\sinh(\\lambda L)\\cosh(\\lambda x) - \\cosh(\\lambda L)\\sinh(\\lambda x) \\right)\n$$\nUsing the hyperbolic sine subtraction identity, $\\sinh(u-v) = \\sinh(u)\\cosh(v) - \\cosh(u)\\sinh(v)$, this expression elegantly simplifies to:\n$$\nc(x) = \\frac{J}{D\\lambda\\,\\cosh(\\lambda L)} \\sinh(\\lambda(L-x))\n$$\nNext, we determine the position $x_{\\theta}(J)$ where the concentration equals the specified threshold $c_{\\theta}$:\n$$\nc(x_{\\theta}(J)) = c_{\\theta} = \\frac{J}{D\\lambda\\,\\cosh(\\lambda L)} \\sinh(\\lambda(L-x_{\\theta}(J)))\n$$\nWe isolate the hyperbolic sine term and solve for the argument:\n$$\n\\sinh(\\lambda(L-x_{\\theta}(J))) = \\frac{c_{\\theta} D \\lambda \\cosh(\\lambda L)}{J}\n$$\nApplying the inverse hyperbolic sine function, $\\text{arcsinh}$, to both sides of the equation yields:\n$$\n\\lambda(L - x_{\\theta}(J)) = \\text{arcsinh}\\left(\\frac{c_{\\theta} D \\lambda \\cosh(\\lambda L)}{J}\\right)\n$$\nThis provides a direct expression for the distance from the posterior end, $L - x_{\\theta}(J)$:\n$$\nL - x_{\\theta}(J) = \\frac{1}{\\lambda} \\text{arcsinh}\\left(\\frac{c_{\\theta} D \\lambda \\cosh(\\lambda L)}{J}\\right)\n$$\nWhen the source strength is doubled to $2J$, while all other parameters remain constant, the corresponding distance becomes:\n$$\nL - x_{\\theta}(2J) = \\frac{1}{\\lambda} \\text{arcsinh}\\left(\\frac{c_{\\theta} D \\lambda \\cosh(\\lambda L)}{2J}\\right)\n$$\nThe problem requires the computation of the ratio $r \\equiv \\frac{L - x_{\\theta}(2J)}{L - x_{\\theta}(J)}$. Using the expressions derived above:\n$$\nr = \\frac{\\frac{1}{\\lambda} \\text{arcsinh}\\left(\\frac{c_{\\theta} D \\lambda \\cosh(\\lambda L)}{2J}\\right)}{\\frac{1}{\\lambda} \\text{arcsinh}\\left(\\frac{c_{\\theta} D \\lambda \\cosh(\\lambda L)}{J}\\right)}\n$$\nThe factor of $\\frac{1}{\\lambda}$ in the numerator and denominator cancels. To express the final answer in terms of the initial parameters, we substitute back $\\lambda = \\sqrt{k/D}$:\n$$\nr = \\frac{\\text{arcsinh}\\left(\\frac{c_{\\theta} \\sqrt{kD} \\cosh(L\\sqrt{k/D})}{2J}\\right)}{\\text{arcsinh}\\left(\\frac{c_{\\theta} \\sqrt{kD} \\cosh(L\\sqrt{k/D})}{J}\\right)}\n$$\nFor the justification of scaling, we examine the dependence of the concentration profile $c(x)$ on the source strength $J$:\n$$\nc(x; J) = J \\cdot \\left[ \\frac{\\sinh(\\sqrt{k/D}\\,(L-x))}{\\sqrt{kD} \\cosh(L\\sqrt{k/D})} \\right]\n$$\nThe term enclosed in the square brackets is a function of position $x$ and system parameters $(D, k, L)$, but it is independent of the source strength $J$. Consequently, the concentration at any point $x$ is directly proportional to $J$. Since the problem defines \"positional value\" as being proportional to the local concentration, it is rigorously established that the positional values rescale proportionally with changes in the source strength. This is a property of the linearity of the governing differential equation.", "answer": "$$\n\\boxed{\\frac{\\arcsinh\\left(\\frac{c_{\\theta} \\sqrt{kD} \\cosh\\left(L\\sqrt{\\frac{k}{D}}\\right)}{2J}\\right)}{\\arcsinh\\left(\\frac{c_{\\theta} \\sqrt{kD} \\cosh\\left(L\\sqrt{\\frac{k}{D}}\\right)}{J}\\right)}}\n$$", "id": "2650835"}, {"introduction": "Modern developmental biology heavily relies on computational models to integrate biophysical processes and predict emergent outcomes. This hands-on programming exercise guides you through building a complete simulation of pattern formation in a syncytial embryo [@problem_id:2650781]. You will numerically solve the reaction-diffusion equation for a morphogen, couple it to a cooperative, Hill-type gene expression response, and determine the resulting fate boundary. By implementing a sensitivity analysis, you will gain invaluable practical experience in how key parameters govern the precision and robustness of developmental patterning, bridging the gap between theoretical models and quantitative experimental data.", "problem": "You are to implement a complete, runnable program that models positional information decoding in a syncytial embryo by simulating a steady-state morphogen gradient in one spatial dimension and applying a Hill-type gene regulatory decoder. The biological context is developmental specification by a graded morphogen in a pre-cellular (syncytial) field, where a continuous nuclear array decodes concentration into discrete fates. Your program must compute the boundary position at which the decoded output crosses a fixed threshold, and the sensitivity of that boundary to parameter perturbations. All quantities are nondimensionalized; therefore, report all positions as fractions of the domain length with no physical units.\n\nFundamental base and model assumptions:\n- The morphogen is modeled as obeying a one-dimensional reaction-diffusion Partial Differential Equation (PDE) at steady state, derived from Fick's law of diffusion and first-order degradation. Let $x \\in [0,L]$, concentration $C(x)$, diffusion coefficient $D$, and uniform first-order degradation rate $k$. The steady-state equation is\n$$\nD \\frac{d^2 C}{dx^2} - k\\,C = 0.\n$$\n- Production is represented as a constant influx boundary condition at the anterior end $x=0$ with magnitude $J$, so that the flux condition is\n$$\n- D \\frac{dC}{dx}\\bigg|_{x=0} = J.\n$$\n- The posterior boundary is absorbing, so\n$$\nC(L) = 0.\n$$\n- Gene expression decoding follows a Hill-type activation function with Hill coefficient $n$ and half-activation constant $K$,\n$$\nG(x) = \\frac{C(x)^n}{K^n + C(x)^n}.\n$$\n- A boundary position $x_b \\in [0,L]$ is defined as the unique location where $G(x)$ crosses a fixed threshold $T$ from above to below as $x$ increases. If $G(x) < T$ for all $x \\in [0,L]$, define $x_b = -1.0$ by convention.\n\nNumerical method requirements:\n- Discretize the interval $[0,L]$ with $N$ uniformly spaced grid points and solve the steady-state linear boundary value problem by a finite-difference scheme. Use second-order centered differences in the interior, impose the Neumann influx at $x=0$ by eliminating the ghost point via the flux condition, and impose the Dirichlet boundary at $x=L$ by fixing $C(L)=0$. This yields a tridiagonal linear system for the unknown concentrations at the grid points excluding $x=L$. Solve this system exactly by a direct tridiagonal solver.\n- After computing $C(x)$, evaluate $G(x)$ pointwise using the Hill function. Locate the boundary $x_b$ by linear interpolation between the last grid point $i$ with $G_i \\ge T$ and the next grid point $i+1$ with $G_{i+1} < T$. If no such $i$ exists, output $x_b = -1.0$.\n- Sensitivity of the boundary to a parameter $p$ is defined as the central finite difference\n$$\nS = \\frac{x_b(p+\\Delta p) - x_b(p-\\Delta p)}{2\\,\\Delta p},\n$$\nwhere $\\Delta p = \\max(\\epsilon\\,|p|, \\delta)$ with user-provided relative step $\\epsilon$ and a fixed absolute floor $\\delta = 10^{-6}$. When perturbations would make a strictly positive parameter negative or zero, clamp the perturbed value to a small positive number, but still use the same $\\Delta p$ in the denominator. If either perturbed evaluation has $x_b=-1.0$, then define the sensitivity $S=0.0$.\n\nComputational task:\n- Implement the above model and algorithm.\n- For each test case defined below, compute and return two numbers: the boundary position as a fraction of $L$ (that is, $x_b/L$) and the sensitivity $S$ with respect to the specified parameter. Round each returned float to $6$ decimals.\n- If no boundary exists in the base parameter set, return $-1.0$ for the boundary and still compute the sensitivity according to the rule above; if either perturbed case lacks a boundary, set $S=0.0$.\n- The Hill function and all arithmetic must be evaluated in real numbers.\n\nTest suite:\nUse the following $6$ test cases, each specified as a tuple $(L,N,D,k,J,K,n,T,p,\\epsilon)$ where $p$ is the parameter name to perturb and $\\epsilon$ is the relative step for the sensitivity.\n- Case $1$: $(L,N,D,k,J,K,n,T,p,\\epsilon) = (1.0, 1001, 0.01, 1.0, 1.0, 0.2, 3.0, 0.5, \\text{\"k\"}, 0.01)$\n- Case $2$: $(1.0, 1001, 0.02, 0.05, 1.0, 0.1, 2.0, 0.3, \\text{\"D\"}, 0.05)$\n- Case $3$: $(1.0, 1001, 0.01, 5.0, 1.0, 0.05, 4.0, 0.5, \\text{\"J\"}, 0.02)$\n- Case $4$: $(1.0, 1001, 0.01, 1.0, 0.01, 0.5, 2.0, 0.6, \\text{\"J\"}, 0.5)$\n- Case $5$: $(1.0, 1001, 0.01, 1.0, 1.0, 0.15, 10.0, 0.5, \\text{\"K\"}, 0.01)$\n- Case $6$: $(1.0, 1001, 0.01, 10^{-6}, 1.0, 0.2, 3.0, 0.5, \\text{\"k\"}, 0.5)$\n\nFinal output format:\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets. The list must contain $12$ floats in order, two per test case, namely $[x_{b,1}, S_1, x_{b,2}, S_2, \\dots, x_{b,6}, S_6]$, each rounded to $6$ decimals.\n\nConstraints and notes to ensure scientific realism:\n- All parameters $D,k,J,K,n,L$ are strictly positive reals; the grid size $N$ is an integer with $N \\ge 3$; the threshold $T$ satisfies $0 < T < 1$.\n- The model captures conditional specification via a positional cue in a syncytial field; no autonomous specification is assumed in this simulation. The Hill-type decoding represents cooperative gene regulation.", "solution": "We begin from the standard reaction-diffusion formulation for a morphogen in one dimension. The steady-state equation for concentration $C(x)$ on $x \\in [0,L]$ with diffusion coefficient $D$ and first-order degradation rate $k$ is given by\n$$\nD \\frac{d^2 C}{dx^2} - k\\,C = 0,\n$$\nwhich follows from Fick's Law of diffusion for flux $J_{\\mathrm{diff}} = -D\\,\\frac{dC}{dx}$ and a sink term $-k\\,C$ representing linear degradation, at steady state where $\\frac{dC}{dt}=0$.\n\nBoundary conditions encode production and loss. The anterior boundary $x=0$ receives a constant influx $J$, which is a Neumann condition on the derivative:\n$$\n- D \\frac{dC}{dx}\\bigg|_{x=0} = J.\n$$\nThe posterior boundary is absorbing:\n$$\nC(L) = 0.\n$$\nThese two conditions, together with the linear second-order ordinary differential equation, define a unique solution that is monotonic decreasing from $x=0$ to $x=L$ for all $D>0$, $k \\ge 0$, $J>0$.\n\nTo discretize, let $N$ be the number of uniformly spaced grid points including the endpoints, with spacing $\\Delta x = L/(N-1)$. Index grid points by $i=0,1,\\dots,N-1$ with positions $x_i = i\\,\\Delta x$. We represent the unknowns $C_i \\approx C(x_i)$ and enforce the steady-state equation at the interior points using the second-order centered finite difference approximation:\n$$\n\\frac{d^2 C}{dx^2}\\bigg|_{x_i} \\approx \\frac{C_{i+1} - 2 C_i + C_{i-1}}{\\Delta x^2}, \\quad \\text{for } i=1,2,\\dots,N-2.\n$$\nAt $x=L$, the Dirichlet boundary condition is $C_{N-1} = 0$. At $x=0$, we impose the influx via a Neumann condition. Introduce a ghost value $C_{-1}$ to use a centered derivative formula at $i=0$:\n$$\n\\frac{dC}{dx}\\bigg|_{x=0} \\approx \\frac{C_1 - C_{-1}}{2 \\Delta x}.\n$$\nThe flux boundary condition $- D \\frac{dC}{dx}|_{x=0} = J$ implies\n$$\n\\frac{C_1 - C_{-1}}{2 \\Delta x} = -\\frac{J}{D} \\quad \\Rightarrow \\quad C_{-1} = C_1 + 2 \\Delta x \\frac{J}{D}.\n$$\nWe then enforce the steady-state equation at $i=0$ using the discrete Laplacian with the ghost eliminated:\n$$\nD \\frac{C_1 - 2 C_0 + C_{-1}}{\\Delta x^2} - k\\,C_0 = 0\n\\quad \\Rightarrow \\quad\nD \\frac{2 C_1 - 2 C_0}{\\Delta x^2} + \\frac{2 J}{\\Delta x} - k\\,C_0 = 0.\n$$\nCollecting terms, define $\\alpha = D/\\Delta x^2$. The resulting linear system over the unknown vector $\\mathbf{u} = [C_0, C_1, \\dots, C_{N-2}]^\\top$ is tridiagonal with the following rows:\n- For $i=0$:\n$$\n(-2\\alpha - k) C_0 + (2\\alpha) C_1 = -\\frac{2J}{\\Delta x}.\n$$\n- For $i=1,2,\\dots,N-3$:\n$$\n\\alpha C_{i-1} + (-2\\alpha - k) C_i + \\alpha C_{i+1} = 0.\n$$\n- For $i=N-2$ (neighboring $C_{N-1}=0$):\n$$\n\\alpha C_{N-3} + (-2\\alpha - k) C_{N-2} = 0.\n$$\nThis system is strictly diagonally dominant for $k>0$ and can be solved robustly by the Thomas algorithm for tridiagonal matrices in $\\mathcal{O}(N)$ time.\n\nOnce the concentration profile $\\{C_i\\}$ is obtained, we evaluate the Hill-type decoder at each grid point. For half-activation constant $K$ and Hill coefficient $n>0$, the activation is\n$$\nG_i = \\frac{C_i^n}{K^n + C_i^n},\n$$\nwhich is a monotone increasing function of $C_i$ taking values in $[0,1)$. Because $C_i$ is monotone decreasing in $x_i$ under the given boundary data, $G_i$ is also monotone decreasing in $x_i$.\n\nThe boundary position $x_b$ for a fixed threshold $T \\in (0,1)$ is defined as the location where $G(x)$ crosses from at least $T$ to below $T$ as $x$ increases. Numerically, let $i^\\star$ be the largest index such that $G_{i^\\star} \\ge T$; then $G_{i^\\star+1} < T$ unless no crossing exists. We linearly interpolate between $x_{i^\\star}$ and $x_{i^\\star+1}$ to estimate the exact crossing location. Denoting $y_1 = G_{i^\\star}$, $y_2 = G_{i^\\star+1}$, and $\\Delta x = x_{i^\\star+1}-x_{i^\\star}$, the fraction along the interval is\n$$\nf = \\frac{y_1 - T}{y_1 - y_2},\n$$\nand hence\n$$\nx_b \\approx x_{i^\\star} + f \\,\\Delta x.\n$$\nIf the set $\\{ i \\mid G_i \\ge T \\}$ is empty, then $G(x) < T$ everywhere and we define $x_b = -1.0$.\n\nSensitivity analysis quantifies how $x_b$ changes with a parameter $p \\in \\{D,k,J,K,n\\}$. Using a symmetric finite difference with step $\\Delta p = \\max(\\epsilon\\,|p|,\\delta)$ for a given relative step $\\epsilon$ and an absolute floor $\\delta = 10^{-6}$, we compute\n$$\nS = \\frac{x_b(p+\\Delta p) - x_b(p-\\Delta p)}{2\\,\\Delta p}.\n$$\nTo respect positivity of parameters, if $p-\\Delta p \\le 0$ we clamp the perturbed value to a small positive number while keeping the denominator unchanged. If either $x_b(p+\\Delta p)$ or $x_b(p-\\Delta p)$ equals $-1.0$, we define $S=0.0$ to avoid undefined derivatives when the boundary does not exist under perturbation.\n\nAlgorithmic outline for each test case $(L,N,D,k,J,K,n,T,p,\\epsilon)$:\n1. Compute $\\Delta x = L/(N-1)$ and assemble the tridiagonal matrix coefficients $(\\mathbf{a},\\mathbf{b},\\mathbf{c})$ and right-hand side $\\mathbf{d}$ corresponding to the system described above, with $\\alpha = D/\\Delta x^2$.\n2. Solve the tridiagonal system by the Thomas algorithm to obtain $C_0,\\dots,C_{N-2}$ and set $C_{N-1}=0$.\n3. Evaluate $G_i = \\frac{C_i^n}{K^n + C_i^n}$ for all $i$.\n4. Determine $x_b$ via the threshold crossing and linear interpolation. Return $x_b/L$ as a unitless fraction of the length.\n5. For sensitivity, create perturbed parameter sets $p_\\pm = p \\pm \\Delta p$ with clamping to positivity if needed, repeat steps $1$–$4$ for each, and compute $S = \\frac{x_b(p+\\Delta p)-x_b(p-\\Delta p)}{2\\Delta p}$. If either perturbed boundary is missing, set $S=0.0$.\n6. Round $x_b/L$ and $S$ to $6$ decimals and append to the output list.\n\nThis approach links core principles of conditional specification in a syncytium to a precise computational model: diffusion and degradation establish a graded morphogen profile, a cooperative Hill response decodes this gradient into a gene expression domain, and the positional boundary’s robustness is quantified by sensitivities to biophysical parameters. The finite-difference steady-state formulation avoids time-stepping stability constraints and provides an unambiguous, reproducible solution for the posed test suite.", "answer": "```python\nimport numpy as np\n\ndef solve_tridiagonal(a, b, c, d):\n    \"\"\"\n    Thomas algorithm for solving a tridiagonal linear system.\n    a: sub-diagonal (length n-1)\n    b: main diagonal (length n)\n    c: super-diagonal (length n-1)\n    d: right-hand side (length n)\n    Returns x: solution vector (length n)\n    \"\"\"\n    n = len(b)\n    # Make copies to avoid modifying inputs\n    ac, bc, cc, dc = a.copy(), b.copy(), c.copy(), d.copy()\n    # Forward sweep\n    for i in range(1, n):\n        if bc[i-1] == 0.0:\n            # Prevent division by zero in pathological cases\n            bc[i-1] = 1e-12\n        m = ac[i-1] / bc[i-1]\n        bc[i] = bc[i] - m * cc[i-1]\n        dc[i] = dc[i] - m * dc[i-1]\n    # Back substitution\n    x = np.zeros(n, dtype=float)\n    if bc[-1] == 0.0:\n        bc[-1] = 1e-12\n    x[-1] = dc[-1] / bc[-1]\n    for i in range(n - 2, -1, -1):\n        denom = bc[i]\n        if denom == 0.0:\n            denom = 1e-12\n        x[i] = (dc[i] - cc[i] * x[i + 1]) / denom\n    return x\n\ndef solve_concentration(L, N, D, k, J):\n    \"\"\"\n    Solve steady-state D C'' - k C = 0 on [0,L]\n    with -D C'(0) = J and C(L) = 0 using finite differences.\n    Returns arrays x (grid) and C (concentration).\n    \"\"\"\n    # Grid\n    x = np.linspace(0.0, L, N)\n    dx = x[1] - x[0]\n    alpha = D / (dx * dx)\n\n    # Unknowns are C[0..N-2], with C[N-1]=0\n    M = N - 1\n    a = np.zeros(M - 1, dtype=float)  # sub-diagonal\n    b = np.zeros(M, dtype=float)      # main diagonal\n    c = np.zeros(M - 1, dtype=float)  # super-diagonal\n    d = np.zeros(M, dtype=float)      # RHS\n\n    # First row (i=0), using ghost elimination for flux\n    b[0] = -2.0 * alpha - k\n    c[0] = 2.0 * alpha\n    d[0] = -(2.0 * J) / dx\n\n    # Interior rows\n    for i in range(1, M - 1):\n        a[i - 1] = alpha\n        b[i] = -2.0 * alpha - k\n        c[i] = alpha\n        d[i] = 0.0\n\n    # Last row (i=M-1), neighbor at x=L has C=0\n    if M > 1:\n        a[M - 2] = alpha\n        b[M - 1] = -2.0 * alpha - k\n        d[M - 1] = 0.0\n\n    # Solve tridiagonal system\n    C_unknown = solve_tridiagonal(a, b, c, d)\n    C = np.zeros(N, dtype=float)\n    C[:M] = C_unknown\n    C[M] = 0.0  # C at x=L\n\n    # Ensure non-negative due to possible tiny numerical underflow\n    C[C < 0.0] = 0.0\n    return x, C\n\ndef hill_activation(C, K, n):\n    # Compute G = C^n / (K^n + C^n) safely\n    # Avoid numerical issues for very small/large values\n    Cn = np.power(C, n)\n    Kn = K ** n\n    denom = Kn + Cn\n    # Prevent division by zero\n    denom[denom == 0.0] = 1e-12\n    return Cn / denom\n\ndef boundary_position(x, G, T):\n    \"\"\"\n    Find boundary x_b where G crosses threshold T from above to below.\n    Returns x_b if found, otherwise -1.0\n    \"\"\"\n    # Indices where G >= T\n    mask = G >= T\n    if not np.any(mask):\n        return -1.0\n    # Last index with G >= T\n    idx = np.max(np.where(mask)[0])\n    if idx == len(G) - 1:\n        # Threshold not crossed within domain (should not happen since G[-1] ~ 0)\n        return -1.0\n    # If next point is also >= T, continue forward until drop (safeguard)\n    N = len(G)\n    i = idx\n    while i < N - 1 and G[i + 1] >= T:\n        i += 1\n    if i == N - 1:\n        return -1.0\n    # If current G[i] < T but there was at least one >= T earlier, move back\n    while i > 0 and G[i] < T and G[i - 1] < T:\n        i -= 1\n    # Define i_star as last index where G >= T\n    if G[i] < T and i > 0:\n        i_star = i - 1\n    else:\n        i_star = i if G[i] >= T else i - 1\n    if i_star < 0 or i_star >= N - 1:\n        return -1.0\n    y1 = G[i_star]\n    y2 = G[i_star + 1]\n    x1 = x[i_star]\n    x2 = x[i_star + 1]\n    if y1 == y2:\n        # Flat segment; cannot interpolate reliably\n        return x1\n    # Linear interpolation fraction\n    f = (y1 - T) / (y1 - y2)\n    xb = x1 + f * (x2 - x1)\n    return float(xb)\n\ndef compute_boundary_and_sensitivity(case, eps_abs=1e-6):\n    \"\"\"\n    Given a test case dict, compute (boundary_fraction, sensitivity)\n    \"\"\"\n    L = case[\"L\"]\n    N = case[\"N\"]\n    D = case[\"D\"]\n    k = case[\"k\"]\n    J = case[\"J\"]\n    K = case[\"K\"]\n    n = case[\"n\"]\n    T = case[\"T\"]\n    p_name = case[\"p\"]\n    eps_rel = case[\"eps\"]\n\n    # Base boundary\n    x_grid, C = solve_concentration(L, N, D, k, J)\n    G = hill_activation(C, K, n)\n    xb = boundary_position(x_grid, G, T)\n    xb_frac = xb / L if xb >= 0.0 else -1.0\n\n    # Sensitivity via central difference\n    def clamp_positive(val):\n        return max(val, 1e-12)\n\n    # Prepare perturbed params\n    params = {\"L\": L, \"N\": N, \"D\": D, \"k\": k, \"J\": J, \"K\": K, \"n\": n, \"T\": T}\n\n    p_val = params[p_name]\n    dp = max(abs(eps_rel * p_val), eps_abs)\n\n    # p_plus and p_minus (with clamping for positivity)\n    p_plus = p_val + dp\n    p_minus = p_val - dp\n    if p_minus <= 0.0:\n        p_minus = clamp_positive(p_minus)\n\n    # Evaluate xb at p_plus\n    params_plus = params.copy()\n    params_plus[p_name] = p_plus\n    xg_p, C_p = solve_concentration(params_plus[\"L\"], params_plus[\"N\"],\n                                    params_plus[\"D\"], params_plus[\"k\"], params_plus[\"J\"])\n    G_p = hill_activation(C_p, params_plus[\"K\"], params_plus[\"n\"])\n    xb_p = boundary_position(xg_p, G_p, params_plus[\"T\"])\n    xb_p_frac = xb_p / L if xb_p >= 0.0 else -1.0\n\n    # Evaluate xb at p_minus\n    params_minus = params.copy()\n    params_minus[p_name] = p_minus\n    xg_m, C_m = solve_concentration(params_minus[\"L\"], params_minus[\"N\"],\n                                    params_minus[\"D\"], params_minus[\"k\"], params_minus[\"J\"])\n    G_m = hill_activation(C_m, params_minus[\"K\"], params_minus[\"n\"])\n    xb_m = boundary_position(xg_m, G_m, params_minus[\"T\"])\n    xb_m_frac = xb_m / L if xb_m >= 0.0 else -1.0\n\n    # Sensitivity\n    if xb_p_frac < 0.0 or xb_m_frac < 0.0:\n        S = 0.0\n    else:\n        S = (xb_p_frac - xb_m_frac) / (2.0 * dp)\n\n    return round(xb_frac, 6), round(S, 6)\n\ndef solve():\n    # Define the test cases from the problem statement.\n    test_cases = [\n        # Case 1\n        {\"L\": 1.0, \"N\": 1001, \"D\": 0.01, \"k\": 1.0, \"J\": 1.0, \"K\": 0.2, \"n\": 3.0, \"T\": 0.5, \"p\": \"k\", \"eps\": 0.01},\n        # Case 2\n        {\"L\": 1.0, \"N\": 1001, \"D\": 0.02, \"k\": 0.05, \"J\": 1.0, \"K\": 0.1, \"n\": 2.0, \"T\": 0.3, \"p\": \"D\", \"eps\": 0.05},\n        # Case 3\n        {\"L\": 1.0, \"N\": 1001, \"D\": 0.01, \"k\": 5.0, \"J\": 1.0, \"K\": 0.05, \"n\": 4.0, \"T\": 0.5, \"p\": \"J\", \"eps\": 0.02},\n        # Case 4\n        {\"L\": 1.0, \"N\": 1001, \"D\": 0.01, \"k\": 1.0, \"J\": 0.01, \"K\": 0.5, \"n\": 2.0, \"T\": 0.6, \"p\": \"J\", \"eps\": 0.5},\n        # Case 5\n        {\"L\": 1.0, \"N\": 1001, \"D\": 0.01, \"k\": 1.0, \"J\": 1.0, \"K\": 0.15, \"n\": 10.0, \"T\": 0.5, \"p\": \"K\", \"eps\": 0.01},\n        # Case 6\n        {\"L\": 1.0, \"N\": 1001, \"D\": 0.01, \"k\": 1e-6, \"J\": 1.0, \"K\": 0.2, \"n\": 3.0, \"T\": 0.5, \"p\": \"k\", \"eps\": 0.5},\n    ]\n\n    results = []\n    for case in test_cases:\n        xb_frac, sens = compute_boundary_and_sensitivity(case)\n        results.append(f\"{xb_frac:.6f}\")\n        results.append(f\"{sens:.6f}\")\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "2650781"}]}