{"hands_on_practices": [{"introduction": "The initiation of a cleavage furrow is a critical event governed by an interplay of biochemistry and mechanics. In large, yolk-rich eggs undergoing meroblastic cleavage, furrows preferentially appear at the highly curved animal pole. This exercise [@problem_id:2624949] invites you to explore the physical basis for this phenomenon by applying Laplace's law, which connects membrane tension, curvature, and pressure. By calculating the mechanical requirements for furrowing in different geometric contexts, you will gain a quantitative understanding of how cell shape can direct the machinery of cytokinesis.", "problem": "In many meroblastic embryos with telolecithal eggs, cleavage furrows initiate preferentially near the animal pole rather than the flatter, yolk-rich vegetal hemisphere. Consider a simplified, mechanically consistent model in which the cell cortex is a thin contractile shell with uniform effective cortical tension $\\gamma$ that sustains an inward pressure difference across the cortex proportional to the local mean curvature. Assume that furrow initiation at a location requires the inward pressure difference to exceed a critical value $\\Delta P_{c}$, and that the local inward pressure difference generated by the cortex follows the classical Laplace relation linking $\\Delta P$, $\\gamma$, and the sum of the principal curvatures. \n\nModel two representative surface patches:\n- Animal pole patch: principal radii of curvature $R_{1}^{(a)} = 50\\,\\mu\\mathrm{m}$ and $R_{2}^{(a)} = 50\\,\\mu\\mathrm{m}$.\n- Vegetal hemisphere patch: principal radii $R_{1}^{(v)} = 100\\,\\mu\\mathrm{m}$ and $R_{2}^{(v)} = 200\\,\\mu\\mathrm{m}$.\n\nWorking from first principles of membrane mechanics and the Laplace relation, derive the minimal cortical tension $\\gamma_{\\min}$ required for furrow initiation at each location in terms of $\\Delta P_{c}$ and the local principal radii. Then compute the fold-difference in the minimal cortical tension requirement between the vegetal and animal locations, defined as\n$$\n\\frac{\\gamma_{\\min}^{(v)}}{\\gamma_{\\min}^{(a)}}.\n$$\nGive your final answer as an exact fraction (dimensionless). No rounding is required.", "solution": "The fundamental mechanical base is the Laplace relation, which states that the pressure difference sustained by a curved surface with isotropic tension equals the product of the tension and the sum of the principal curvatures. For a cortex with effective tension $\\gamma$ and local principal radii of curvature $R_{1}$ and $R_{2}$, the inward pressure difference $\\Delta P$ obeys\n$$\n\\Delta P = \\gamma\\left(\\frac{1}{R_{1}} + \\frac{1}{R_{2}}\\right).\n$$\nFurrow initiation at a given location requires that the inward pressure difference exceed a critical threshold $\\Delta P_{c}$. The minimal cortical tension needed to reach this threshold at that location is obtained by setting $\\Delta P = \\Delta P_{c}$:\n$$\n\\gamma_{\\min} = \\frac{\\Delta P_{c}}{\\frac{1}{R_{1}} + \\frac{1}{R_{2}}}.\n$$\nApplying this expression to the two locations:\n\n1. Animal pole:\n- $R_{1}^{(a)} = 50\\,\\mu\\mathrm{m}$,\n- $R_{2}^{(a)} = 50\\,\\mu\\mathrm{m}$.\nThus the local curvature sum is\n$$\nH^{(a)} = \\frac{1}{R_{1}^{(a)}} + \\frac{1}{R_{2}^{(a)}} = \\frac{1}{50\\,\\mu\\mathrm{m}} + \\frac{1}{50\\,\\mu\\mathrm{m}} = \\frac{2}{50\\,\\mu\\mathrm{m}} = \\frac{1}{25\\,\\mu\\mathrm{m}}.\n$$\nHence,\n$$\n\\gamma_{\\min}^{(a)} = \\frac{\\Delta P_{c}}{H^{(a)}} = \\Delta P_{c}\\left(25\\,\\mu\\mathrm{m}\\right).\n$$\n\n2. Vegetal hemisphere:\n- $R_{1}^{(v)} = 100\\,\\mu\\mathrm{m}$,\n- $R_{2}^{(v)} = 200\\,\\mu\\mathrm{m}$.\nThus\n$$\nH^{(v)} = \\frac{1}{R_{1}^{(v)}} + \\frac{1}{R_{2}^{(v)}} = \\frac{1}{100\\,\\mu\\mathrm{m}} + \\frac{1}{200\\,\\mu\\mathrm{m}} = \\frac{2 + 1}{200\\,\\mu\\mathrm{m}} = \\frac{3}{200\\,\\mu\\mathrm{m}}.\n$$\nHence,\n$$\n\\gamma_{\\min}^{(v)} = \\frac{\\Delta P_{c}}{H^{(v)}} = \\Delta P_{c}\\left(\\frac{200\\,\\mu\\mathrm{m}}{3}\\right).\n$$\n\nThe requested fold-difference is\n$$\n\\frac{\\gamma_{\\min}^{(v)}}{\\gamma_{\\min}^{(a)}} = \\frac{\\Delta P_{c}\\left(\\frac{200\\,\\mu\\mathrm{m}}{3}\\right)}{\\Delta P_{c}\\left(25\\,\\mu\\mathrm{m}\\right)} = \\frac{\\frac{200}{3}}{25} = \\frac{200}{3 \\times 25} = \\frac{200}{75} = \\frac{8}{3}.\n$$\n\nInterpretation in the context of cleavage patterns: Because the animal pole has a higher mean curvature, its local curvature sum $\\left(\\frac{1}{R_{1}} + \\frac{1}{R_{2}}\\right)$ is larger, which reduces the minimal cortical tension required to reach the same pressure threshold $\\Delta P_{c}$. The vegetal hemisphere, being flatter, requires a larger tension by a factor of $\\frac{8}{3}$ relative to the animal pole. This quantitative disparity helps explain why furrows preferentially initiate near the animal pole in meroblastic embryos, consistent with observed cleavage patterns.", "answer": "$$\\boxed{\\frac{8}{3}}$$", "id": "2624949"}, {"introduction": "A hallmark of early animal development is the rapid succession of cleavage divisions, which abruptly ceases or slows at the Midblastula Transition (MBT). A prevailing model posits that this transition is not timed by a clock, but by the embryo reaching a critical nuclear-to-cytoplasmic ($N/C$) ratio. This practice [@problem_id:2624952] challenges you to mathematically formalize this hypothesis, deriving an expression for the number of divisions required to trigger the MBT. This exercise demonstrates how a simple, elegant biophysical model can account for the precise temporal control of a crucial developmental checkpoint.", "problem": "An embryo undergoing early cleavage maintains approximately constant effective cytoplasmic volume because there is no net growth between divisions. In holoblastic cleavage, the entire zygote cytoplasm is partitioned, whereas in meroblastic cleavage only the blastodisc cytoplasm is partitioned while the yolk mass remains largely inert. Let the effective cytoplasmic volume accessible to the nuclei be denoted by $V$. Empirically, the Midblastula Transition (MBT) is triggered when the Nuclear-to-Cytoplasmic (N/C) ratio, operationally modeled as total nuclear deoxyribonucleic acid (DNA) content per unit effective cytoplasmic volume, reaches a threshold value $\\theta$. Assume the following foundational facts:\n- Each synchronous cleavage cycle doubles the total nuclear DNA content, so that after $n$ cleavages the total DNA is $D(n)$, with $D(0)=D_{0}$ and $D(n)$ doubling each cycle.\n- The effective cytoplasmic volume $V$ remains approximately constant over the pre-MBT cleavage cycles.\n- The MBT is triggered at the smallest $n$ for which the ratio $D(n)/V$ meets or exceeds the threshold $\\theta$.\n\nStarting from these premises, derive an explicit closed-form expression for the number of completed cleavage divisions before the MBT in terms of $D_{0}$, $V$, and $\\theta$. Express your final answer as a single analytic expression involving $D_{0}$, $V$, and $\\theta$. Do not include units in your final expression. If the expression evaluates to a non-integer for particular parameter values, your expression must correctly return the smallest integer number of completed divisions required to reach the threshold. No numerical rounding is required.", "solution": "The problem as stated is scientifically grounded, internally consistent, and well-posed. It presents a simplified but standard biophysical model for the timing of the Midblastula Transition (MBT). We shall proceed with a rigorous derivation.\n\nThe provided premises are:\n1. The effective cytoplasmic volume, $V$, is constant during the early cleavage stages.\n2. The initial amount of total nuclear deoxyribonucleic acid (DNA) before the first cleavage ($n=0$) is $D(0) = D_{0}$.\n3. After each synchronous cleavage cycle, the total number of cells doubles, and thus the total nuclear DNA content doubles.\n4. The Midblastula Transition is initiated at the smallest integer number of completed divisions, $n$, at which the Nuclear-to-Cytoplasmic (N/C) ratio, defined as $\\frac{D(n)}{V}$, meets or exceeds a critical threshold value, $\\theta$.\n\nOur first task is to derive an explicit formula for the total DNA content, $D(n)$, after $n$ cleavage cycles. The DNA content doubles with each cycle, which is characteristic of a geometric progression with a common ratio of $2$.\nAt $n=0$ cycles, $D(0) = D_{0} = 2^{0}D_{0}$.\nAt $n=1$ cycle, $D(1) = 2 \\cdot D(0) = 2^{1}D_{0}$.\nAt $n=2$ cycles, $D(2) = 2 \\cdot D(1) = 2^{2}D_{0}$.\nGeneralizing this by induction, the total DNA content after $n$ completed divisions is:\n$$D(n) = D_{0} \\cdot 2^{n}$$\n\nThe condition for the onset of the MBT is given by the inequality:\n$$\\frac{D(n)}{V} \\geq \\theta$$\n\nWe substitute the expression for $D(n)$ into this inequality:\n$$\\frac{D_{0} \\cdot 2^{n}}{V} \\geq \\theta$$\n\nTo find $n$, we must solve this inequality. We first isolate the exponential term containing $n$:\n$$2^{n} \\geq \\frac{\\theta V}{D_{0}}$$\n\nTo solve for the exponent $n$, we apply a logarithm to both sides of the inequality. Since the logarithmic function is monotonically increasing, the direction of the inequality is preserved (assuming the argument of the logarithm is positive, which it must be, as $\\theta$, $V$, and $D_{0}$ represent physical quantities and must be positive). Using the logarithm in base $2$ provides the most direct simplification.\n$$\\log_{2}(2^{n}) \\geq \\log_{2}\\left(\\frac{\\theta V}{D_{0}}\\right)$$\n\nApplying the identity $\\log_{b}(b^{x}) = x$, we obtain:\n$$n \\geq \\log_{2}\\left(\\frac{\\theta V}{D_{0}}\\right)$$\n\nThe problem requires the smallest integer value of $n$ that satisfies this condition. Cleavage divisions are discrete events, so $n$ must be an integer. The mathematical function that returns the smallest integer greater than or equal to a given real number is the ceiling function, denoted by $\\lceil \\cdot \\rceil$.\n\nTherefore, the number of completed cleavage divisions, $n$, required to trigger the MBT is given by the ceiling of the expression on the right-hand side. This provides the first integer value of $n$ for which the N/C ratio threshold is met or surpassed. The final expression is:\n$$n = \\left\\lceil \\log_{2}\\left(\\frac{\\theta V}{D_{0}}\\right) \\right\\rceil$$\nThis formula is the required closed-form expression for $n$ in terms of the given parameters $D_{0}$, $V$, and $\\theta$.", "answer": "$$\n\\boxed{\\left\\lceil \\log_{2}\\left(\\frac{\\theta V}{D_{0}}\\right) \\right\\rceil}\n$$", "id": "2624952"}, {"introduction": "On the surface of a large blastodisc, such as in a bird or fish embryo, cleavage furrows often propagate as coordinated waves. This emergent, system-level behavior arises from local interactions between biochemical signaling pathways and the mechanical properties of the cell cortex. This advanced practice [@problem_id:2624940] guides you through building a computational model of such a mechanochemical wave using reaction-diffusion equations. Implementing this simulation provides hands-on experience with the modern tools used to investigate how complex spatiotemporal patterns self-organize during development.", "problem": "You are asked to formalize a minimal mechanochemical model of cleavage wave propagation across a meroblastic blastodisc as a one-dimensional excitable medium, compute the emergent front position under specified parameter sets, and report the effect of changing the activator diffusion coefficient. The aim is to reason from core definitions in reaction–diffusion systems and overdamped linear mechanics in a continuum, and to implement a stable numerical solver whose outputs are quantifiable.\n\nStart from the following fundamental base:\n- Diffusion in one spatial dimension follows Fick’s law, giving the diffusion term $D \\frac{\\partial^2 c}{\\partial x^2}$ for concentration $c$ with diffusion coefficient $D$.\n- An excitable reaction–diffusion medium can be captured by a two-variable activator–inhibitor system, here of FitzHugh–Nagumo type, where a fast activator field $u$ and a slow recovery field $v$ interact via local nonlinear reactions.\n- Overdamped linear mechanics for a scalar mechanical field $M$ with spatial coupling can be represented by diffusion-like spreading of mechanical stress and linear relaxation toward zero with source proportional to local biochemical activation.\n- No-flux boundaries correspond to zero spatial derivative at the domain edges (Neumann boundary conditions).\n- For an explicit central-difference scheme for the one-dimensional diffusion equation, a conservative sufficient stability bound is $\\Delta t \\le \\frac{1}{2}\\frac{\\Delta x^{2}}{\\max(D)}$, where $\\Delta t$ is the time step, $\\Delta x$ is the spatial grid spacing, and $\\max(D)$ is the maximum diffusion coefficient among diffusing fields.\n\nModel specification:\n- Spatial domain: a one-dimensional line segment representing a transect across the blastodisc of nondimensional length $L = 1$ with coordinate $x \\in [0, L]$.\n- Fields:\n  - Activator $u(x,t)$.\n  - Inhibitor $v(x,t)$.\n  - Mechanical field $M(x,t)$ representing an effective scalar strain or tension proxy that diffuses and relaxes.\n- Governing equations:\n  $$\n  \\frac{\\partial u}{\\partial t} = D_{u}\\,\\frac{\\partial^{2} u}{\\partial x^{2}} + u\\,(u - a)\\,(1 - u) - v + \\alpha\\,M,\n  $$\n  $$\n  \\frac{\\partial v}{\\partial t} = D_{v}\\,\\frac{\\partial^{2} v}{\\partial x^{2}} + \\varepsilon\\,(u - b\\,v),\n  $$\n  $$\n  \\frac{\\partial M}{\\partial t} = D_{m}\\,\\frac{\\partial^{2} M}{\\partial x^{2}} - k_{m}\\,M + k_{a}\\,u.\n  $$\n- Boundary conditions: no-flux (Neumann) at $x = 0$ and $x = L$ for all fields, i.e., $\\frac{\\partial u}{\\partial x} = \\frac{\\partial v}{\\partial x} = \\frac{\\partial M}{\\partial x} = 0$.\n- Initial conditions: a localized activation near the left edge to seed a cleavage wave,\n  $u(x,0) = \\exp\\!\\left(-\\frac{(x - x_{0})^{2}}{2\\,\\sigma^{2}}\\right), \\quad v(x,0) = 0, \\quad M(x,0) = 0$,\n  with $x_{0} = 0.05$ and $\\sigma = 0.02$.\n\nFixed parameters for all simulations:\n- Domain length $L = 1$.\n- Number of spatial grid points $N = 300$ (uniform grid, $\\Delta x = \\frac{L}{N-1}$).\n- Inhibitor diffusion $D_{v} = 0.0001$.\n- Mechanical diffusion $D_{m} = 0.01$.\n- Reaction parameters $a = 0.1$, $\\varepsilon = 0.01$, $b = 0.5$.\n- Mechanochemical coupling parameters $\\alpha = 0.1$, $k_{m} = 1.0$, $k_{a} = 1.0$.\n- Final simulation time $T_{\\text{end}} = 8.0$.\n- Time step $\\Delta t$ chosen to satisfy the explicit stability condition with a safety factor, specifically,\n  $$\n  \\Delta t = 0.45\\,\\frac{\\Delta x^{2}}{\\max(D_{u}, D_{v}, D_{m})}.\n  $$\n\nQuantity to compute:\n- Define a cleavage “front” position at time $T_{\\text{end}}$ as the rightmost spatial location where the activator crosses a threshold $u_{\\text{thr}} = 0.5$. Numerically, if the discrete grid values $\\{u_{i}\\}$ at positions $\\{x_{i}\\}$ satisfy $u_{i} \\ge u_{\\text{thr}}$ for at least one $i$, let $x_{\\text{front}}$ be the maximum $x_{i}$ satisfying this. If no $u_{i}$ crosses threshold, define $x_{\\text{front}} = 0$.\n- Report $x_{\\text{front}}$ as a fraction of the domain length $L$ (dimensionless), rounded to three decimal places.\n\nTest suite (each test is an independent run differing only in $D_{u}$):\n- Case A (edge case, no activator diffusion): $D_{u} = 0.0$.\n- Case B (low activator diffusion): $D_{u} = 0.0001$.\n- Case C (moderate activator diffusion): $D_{u} = 0.001$.\n- Case D (high activator diffusion): $D_{u} = 0.005$.\n\nYour task:\n- Implement a solver that discretizes the system using second-order central differences in space and forward Euler in time, enforces the specified Neumann boundary conditions, uses the stability-constrained $\\Delta t$ above for each case, integrates up to $T_{\\text{end}}$, computes $x_{\\text{front}}$ for each case, and rounds each result to three decimal places.\n\nFinal output format:\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, in the order $[r_A,r_B,r_C,r_D]$. For example, the output must look like\n  $[r_A,r_B,r_C,r_D]$,\n  where each $r_{*}$ is the rounded decimal described above and there is no additional text. No units are required because the output is a fraction of $L$ and is therefore dimensionless.", "solution": "The problem statement presented is a well-posed and scientifically grounded task in computational biophysics. It requests the numerical solution of a system of one-dimensional reaction-diffusion partial differential equations (PDEs) that model a simplified mechanochemical process in a developing biological tissue. The model is based on the established FitzHugh-Nagumo framework for excitable media, coupled to a linear mechanical field. All parameters, equations, initial conditions, and boundary conditions are specified without ambiguity. The numerical method (Method of Lines with Forward Euler in time and second-order central differences in space) and the stability criteria are explicitly defined. The problem is therefore deemed **valid**.\n\nThe solution proceeds by implementing a numerical solver based on the finite difference method, as specified.\n\n**1. Mathematical Model Discretization**\n\nThe problem involves three coupled PDEs for an activator $u(x,t)$, an inhibitor $v(x,t)$, and a mechanical field $M(x,t)$. We employ the Method of Lines, first discretizing the spatial domain and then integrating the resulting system of ordinary differential equations (ODEs) in time.\n\n**Spatial Discretization**:\nThe spatial domain $x \\in [0, L]$ is discretized into $N$ uniformly spaced grid points $x_i = i \\cdot \\Delta x$ for $i = 0, 1, \\dots, N-1$, where the grid spacing is $\\Delta x = L/(N-1)$. The continuous fields $u(x,t)$, $v(x,t)$, and $M(x,t)$ are approximated by discrete arrays $u_i(t)$, $v_i(t)$, and $M_i(t)$ at these points.\n\nThe diffusion term, the Laplacian $\\frac{\\partial^2 f}{\\partial x^2}$ for a generic field $f$, is approximated at interior grid points ($i=1, \\dots, N-2$) using a second-order central difference formula:\n$$\n\\frac{\\partial^2 f}{\\partial x^2}\\bigg|_{x=x_i} \\approx \\frac{f_{i+1} - 2f_i + f_{i-1}}{\\Delta x^2}\n$$\n\n**Temporal Discretization**:\nThe time evolution is handled using the Forward Euler method, an explicit first-order scheme. For an ODE of the form $\\frac{df}{dt} = F(f, t)$, the update rule is:\n$$\nf^{n+1} = f^n + \\Delta t \\cdot F(f^n, t^n)\n$$\nwhere $f^n$ denotes the value of $f$ at time step $t_n = n \\cdot \\Delta t$.\n\nCombining these, the fully discretized update equation for the activator field $u$ at an interior point $i$ is:\n$$\nu_i^{n+1} = u_i^n + \\Delta t \\left( D_u \\frac{u_{i+1}^n - 2u_i^n + u_{i-1}^n}{\\Delta x^2} + u_i^n(u_i^n - a)(1 - u_i^n) - v_i^n + \\alpha M_i^n \\right)\n$$\nAnalogous equations are derived for $v_i^{n+1}$ and $M_i^{n+1}$.\n\n**2. Boundary Conditions**\n\nThe problem specifies no-flux (Neumann) boundary conditions, $\\frac{\\partial f}{\\partial x}=0$, at $x=0$ and $x=L$ for all fields. To maintain second-order accuracy of the spatial discretization, we implement these conditions using ghost points.\n\nAt the left boundary ($i=0$), a ghost point at $x_{-1}$ is assumed. The boundary condition is approximated by a central difference at $x_0$:\n$$\n\\frac{u_1 - u_{-1}}{2\\Delta x} = 0 \\implies u_{-1} = u_1\n$$\nSubstituting this into the Laplacian formula at $i=0$:\n$$\n\\frac{\\partial^2 u}{\\partial x^2}\\bigg|_{x_0} \\approx \\frac{u_1^n - 2u_0^n + u_{-1}^n}{\\Delta x^2} = \\frac{2(u_1^n - u_0^n)}{\\Delta x^2}\n$$\nSimilarly, at the right boundary ($i=N-1$), a ghost point at $x_N$ with $u_N = u_{N-2}$ yields:\n$$\n\\frac{\\partial^2 u}{\\partial x^2}\\bigg|_{x_{N-1}} \\approx \\frac{u_N^n - 2u_{N-1}^n + u_{N-2}^n}{\\Delta x^2} = \\frac{2(u_{N-2}^n - u_{N-1}^n)}{\\Delta x^2}\n$$\nThese modified formulas are applied at the boundaries for all three fields.\n\n**3. Numerical Stability**\n\nFor an explicit time integration scheme like Forward Euler a stability constraint on the time step $\\Delta t$ is required. The problem provides a sufficient condition:\n$$\n\\Delta t \\le \\frac{1}{2}\\frac{\\Delta x^{2}}{\\max(D)}\n$$\nWe use the specified conservative choice, which is calculated for each test case based on its respective activator diffusion coefficient $D_u$:\n$$\n\\Delta t = 0.45\\,\\frac{\\Delta x^{2}}{\\max(D_{u}, D_{v}, D_{m})}\n$$\nGiven the fixed parameters $D_v = 0.0001$ and $D_m = 0.01$, the value of $\\max(D_u, D_v, D_m)$ is dominated by $D_m$ for all test cases provided, resulting in a constant $\\Delta t$ for this specific problem set.\n\n**4. Algorithmic Implementation**\n\nThe overall algorithm proceeds as follows:\n1.  For each test case specified by a value of $D_u$:\n2.  Set all fixed model parameters ($L, N, a, \\varepsilon, b$, etc.).\n3.  Calculate the spatial grid spacing $\\Delta x$ and create the spatial grid array $x$.\n4.  Calculate the time step $\\Delta t$ according to the stability criterion. Determine the total number of time steps, $N_{steps} = \\lceil T_{\\text{end}} / \\Delta t \\rceil$.\n5.  Initialize the discrete fields $u^0, v^0, M^0$ at $t=0$ using the given Gaussian profile for $u$ and zero for $v$ and $M$.\n6.  Iterate for $n$ from $0$ to $N_{steps}-1$:\n    a. Calculate the Laplacian for each field, $u^n, v^n, M^n$, applying the special boundary formulas at the edges and the standard central difference formula in the interior.\n    b. Calculate the reaction terms for each field at every grid point.\n    c. Update the fields to the next time step, $u^{n+1}, v^{n+1}, M^{n+1}$, using the Forward Euler equations.\n7.  After the final time step, analyze the resulting activator field $u$ at $t=T_{\\text{end}}$.\n8.  Identify all grid indices $i$ where $u_i \\ge u_{\\text{thr}} = 0.5$.\n9.  If such indices exist, find the maximum index $i_{\\text{max}}$ and set the front position $x_{\\text{front}} = x_{i_{\\text{max}}}$. Otherwise, set $x_{\\text{front}} = 0$.\n10. Store the computed value of $x_{\\text{front}}$, which is dimensionless as $L=1$.\n\nThis procedure is executed for each of the four cases, and the resulting values of $x_{\\text{front}}$ are collected and formatted to three decimal places. The implementation uses the `numpy` library for efficient vectorized operations on the grid arrays.", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Main function to run the simulation for all test cases and print the final results.\n    \"\"\"\n    # Define the test cases for the activator diffusion coefficient D_u.\n    test_cases_Du = [0.0, 0.0001, 0.001, 0.005]\n\n    results = []\n    for Du in test_cases_Du:\n        # Run the simulation for each case and store the result.\n        front_position = simulate_cleavage_wave(Du)\n        results.append(front_position)\n\n    # Format the results as a comma-separated list of strings,\n    # with each number rounded to three decimal places, enclosed in brackets.\n    formatted_results = [f\"{r:.3f}\" for r in results]\n    print(f\"[{','.join(formatted_results)}]\")\n\n\ndef simulate_cleavage_wave(D_u_case):\n    \"\"\"\n    Simulates the 1D mechanochemical model for a single test case.\n\n    Args:\n        D_u_case (float): The activator diffusion coefficient for this simulation run.\n\n    Returns:\n        float: The calculated front position x_front, rounded to three decimal places.\n    \"\"\"\n    # --- Model and Simulation Parameters ---\n    L = 1.0\n    N = 300\n    D_v = 0.0001\n    D_m = 0.01\n    a = 0.1\n    epsilon = 0.01\n    b = 0.5\n    alpha = 0.1\n    k_m = 1.0\n    k_a = 1.0\n    T_end = 8.0\n    \n    # --- Initial Conditions Parameters ---\n    x_0 = 0.05\n    sigma = 0.02\n    \n    # --- Front Detection Threshold ---\n    u_thr = 0.5\n\n    # --- Discretization Setup ---\n    dx = L / (N - 1)\n    x_grid = np.linspace(0, L, N)\n    dx_sq = dx**2\n\n    # --- Time Step Calculation (Stability) ---\n    max_D = max(D_u_case, D_v, D_m)\n    if max_D = 0:\n        # Fallback for non-diffusive case, though not strictly needed for this problem set.\n        dt = 0.0001\n    else:\n        dt = 0.45 * dx_sq / max_D\n    \n    num_steps = int(np.ceil(T_end / dt))\n\n    # --- Field Initialization ---\n    u = np.exp(-((x_grid - x_0)**2) / (2 * sigma**2))\n    v = np.zeros(N)\n    M = np.zeros(N)\n\n    # --- Main Time-Stepping Loop ---\n    for _ in range(num_steps):\n        # Store old state for update calculations\n        u_old, v_old, M_old = u.copy(), v.copy(), M.copy()\n\n        # --- Calculate Laplacians with Neumann Boundary Conditions ---\n        # A vectorized approach is used for efficiency.\n        \n        # Activator u Laplacian\n        lap_u = np.zeros(N)\n        lap_u[1:-1] = (u_old[2:] - 2*u_old[1:-1] + u_old[:-2]) / dx_sq\n        lap_u[0]    = 2 * (u_old[1] - u_old[0]) / dx_sq  # Left boundary\n        lap_u[-1]   = 2 * (u_old[-2] - u_old[-1]) / dx_sq # Right boundary\n\n        # Inhibitor v Laplacian\n        lap_v = np.zeros(N)\n        lap_v[1:-1] = (v_old[2:] - 2*v_old[1:-1] + v_old[:-2]) / dx_sq\n        lap_v[0]    = 2 * (v_old[1] - v_old[0]) / dx_sq\n        lap_v[-1]   = 2 * (v_old[-2] - v_old[-1]) / dx_sq\n        \n        # Mechanical field M Laplacian\n        lap_M = np.zeros(N)\n        lap_M[1:-1] = (M_old[2:] - 2*M_old[1:-1] + M_old[:-2]) / dx_sq\n        lap_M[0]    = 2 * (M_old[1] - M_old[0]) / dx_sq\n        lap_M[-1]   = 2 * (M_old[-2] - M_old[-1]) / dx_sq\n\n        # --- Calculate Reaction Terms (Vectorized) ---\n        reaction_u = u_old * (u_old - a) * (1 - u_old) - v_old + alpha * M_old\n        reaction_v = epsilon * (u_old - b * v_old)\n        reaction_M = -k_m * M_old + k_a * u_old\n\n        # --- Update Fields with Forward Euler Step ---\n        u = u_old + dt * (D_u_case * lap_u + reaction_u)\n        v = v_old + dt * (D_v * lap_v + reaction_v)\n        M = M_old + dt * (D_m * lap_M + reaction_M)\n\n    # --- Determine Front Position at T_end ---\n    activated_indices = np.where(u >= u_thr)[0]\n    \n    if activated_indices.size > 0:\n        # The front is the rightmost position where u exceeds the threshold.\n        max_index = activated_indices.max()\n        x_front = x_grid[max_index]\n    else:\n        # If no part of the wave crosses the threshold, the front is at the origin.\n        x_front = 0.0\n    \n    return x_front\n\nif __name__ == '__main__':\n    solve()\n```", "id": "2624940"}]}