{"hands_on_practices": [{"introduction": "The transduction of low-concentration sodium salts is mediated by the amiloride-sensitive epithelial sodium channel (ENaC). Understanding how pharmacological agents like amiloride block this channel is crucial for dissecting its role and function. This practice challenges you to derive the dose-response relationship from first principles, connecting the microscopic Law of Mass Action to the macroscopic phenomenon of channel inhibitionâ€”a foundational skill in biophysics and pharmacology [@problem_id:2760630].", "problem": "In a voltage-clamped fungiform taste receptor cell, the Epithelial Sodium Channel (ENaC) mediates amiloride-sensitive sodium entry central to the transduction of low-salt stimuli. Consider steady-state block by amiloride, a pore blocker that binds in a one-to-one manner to a single site in the conduction pathway, with no cooperativity between subunits and no voltage dependence at the test potential. Assume the following well-tested premises: (i) the Law of Mass Action governs blocker binding at equilibrium; (ii) the open probability of the unblocked channel is not altered by blocker binding beyond occupancy; (iii) the macroscopic current is proportional to the fraction of unblocked channels; and (iv) the half-maximal inhibitory concentration (denoted $IC_{50}$) is the free blocker concentration at which the macroscopic current is reduced to one-half of its control value under otherwise identical conditions.\n\nStarting only from these premises, first derive an expression relating the steady-state fraction of channels blocked, denoted $f_{\\mathrm{block}}$, to the free amiloride concentration $[B]$ and $IC_{50}$ when the Hill coefficient is $n=1$. Then, using this expression, compute $f_{\\mathrm{block}}$ for $[B]=1\\,\\mu\\mathrm{M}$ given $IC_{50}=0.1\\,\\mu\\mathrm{M}$. Round your final numerical result to four significant figures and express it as a unitless decimal fraction.", "solution": "The problem statement has been validated and found to be self-contained, scientifically grounded, and well-posed. The premises provided are sufficient for a rigorous derivation and subsequent calculation. We will proceed with the solution.\n\nThe first task is to derive an expression for the steady-state fraction of blocked channels, $f_{\\mathrm{block}}$, as a function of the free amiloride concentration, $[B]$, and the half-maximal inhibitory concentration, $IC_{50}$. The model describes a one-to-one binding interaction between the channel ($C$) and the blocker ($B$), consistent with a Hill coefficient of $n=1$.\n\nThe reversible binding reaction is:\n$$ C + B \\rightleftharpoons CB $$\nwhere $CB$ represents the blocked channel complex.\n\nAccording to premise (i), the Law of Mass Action applies at equilibrium. The dissociation constant, $K_d$, is defined as:\n$$ K_d = \\frac{[C][B]}{[CB]} $$\nHere, $[C]$, $[B]$, and $[CB]$ are the equilibrium concentrations of the free channel, free blocker, and blocked channel complex, respectively.\n\nThe fraction of channels that are blocked, $f_{\\mathrm{block}}$, is the ratio of the concentration of blocked channels to the total concentration of channels, $[C]_{\\text{total}} = [C] + [CB]$:\n$$ f_{\\mathrm{block}} = \\frac{[CB]}{[C] + [CB]} $$\n\nTo express $f_{\\mathrm{block}}$ in terms of $[B]$ and $K_d$, we first rearrange the definition of $K_d$ to express $[C]$ in terms of the other species:\n$$ [C] = \\frac{K_d [CB]}{[B]} $$\n\nSubstituting this into the expression for $f_{\\mathrm{block}}$ yields:\n$$ f_{\\mathrm{block}} = \\frac{[CB]}{\\frac{K_d [CB]}{[B]} + [CB]} $$\n\nAssuming a non-zero blocker concentration such that $[CB]$ is non-zero, we can divide the numerator and the denominator by $[CB]$:\n$$ f_{\\mathrm{block}} = \\frac{1}{\\frac{K_d}{[B]} + 1} $$\n\nBy algebraic manipulation, this is rewritten as the Hill equation for $n=1$:\n$$ f_{\\mathrm{block}} = \\frac{[B]}{K_d + [B]} $$\n\nNow, we must relate the biophysical constant $K_d$ to the phenomenological parameter $IC_{50}$. Premise (iii) states that the macroscopic current, $I$, is proportional to the fraction of unblocked channels, $f_{\\text{unblock}}$. The fraction of unblocked channels is given by $f_{\\text{unblock}} = 1 - f_{\\text{block}}$:\n$$ f_{\\text{unblock}} = 1 - \\frac{[B]}{K_d + [B]} = \\frac{(K_d + [B]) - [B]}{K_d + [B]} = \\frac{K_d}{K_d + [B]} $$\n\nLet $I_{\\text{max}}$ be the control current when no blocker is present ($[B]=0$), where $f_{\\text{unblock}}=1$. The current at any given blocker concentration $[B]$ is:\n$$ I([B]) = I_{\\text{max}} \\cdot f_{\\text{unblock}} = I_{\\text{max}} \\left( \\frac{K_d}{K_d + [B]} \\right) $$\n\nPremise (iv) defines $IC_{50}$ as the concentration of blocker at which the current is reduced to one-half of its control value. Thus, at $[B] = IC_{50}$, we have $I(IC_{50}) = \\frac{1}{2} I_{\\text{max}}$. We can write:\n$$ \\frac{1}{2} I_{\\text{max}} = I_{\\text{max}} \\left( \\frac{K_d}{K_d + IC_{50}} \\right) $$\n\nDividing by $I_{\\text{max}}$ (which must be non-zero for a meaningful experiment) gives:\n$$ \\frac{1}{2} = \\frac{K_d}{K_d + IC_{50}} $$\n\nSolving this algebraic equation for $IC_{50}$ demonstrates their equivalence under these model assumptions:\n$$ K_d + IC_{50} = 2 K_d \\implies IC_{50} = K_d $$\n\nBy substituting $K_d = IC_{50}$ into our derived equation for $f_{\\mathrm{block}}$, we obtain the final expression relating the fraction of blocked channels to the blocker concentration and $IC_{50}$:\n$$ f_{\\mathrm{block}} = \\frac{[B]}{IC_{50} + [B]} $$\nThis concludes the derivation.\n\nThe second task is to compute $f_{\\mathrm{block}}$ using the provided numerical values: $[B] = 1 \\, \\mu\\mathrm{M}$ and $IC_{50} = 0.1 \\, \\mu\\mathrm{M}$.\n\nSubstituting these values into the derived formula:\n$$ f_{\\mathrm{block}} = \\frac{1 \\, \\mu\\mathrm{M}}{0.1 \\, \\mu\\mathrm{M} + 1 \\, \\mu\\mathrm{M}} = \\frac{1}{1.1} $$\n\nThe result is a dimensionless quantity, as expected for a fraction. Performing the division:\n$$ f_{\\mathrm{block}} = \\frac{10}{11} \\approx 0.909090... $$\n\nThe problem requires the result to be rounded to four significant figures.\n$$ f_{\\mathrm{block}} \\approx 0.9091 $$", "answer": "$$\\boxed{0.9091}$$", "id": "2760630"}, {"introduction": "Sour taste is initiated by an influx of protons through the otopetrin 1 (OTOP1) channel, which directly depolarizes the taste receptor cell. A key question in sensory neurobiology is how fast this initial electrical event occurs, as it determines the speed of taste perception. This exercise provides a hands-on application of the fundamental membrane capacitor relation, $I = C_{m} \\frac{dV}{dt}$, to calculate the initial rate of membrane potential change, directly linking a specific ion current to the cell's excitability and its ability to fire action potentials [@problem_id:2760640].", "problem": "A sour-transducing Type III taste receptor cell expresses the proton-selective channel Otopetrin 1 (OTOP1). Upon an extracellular acidification step, an inward proton current of magnitude $I_{H} = 50$ pA is recorded in current clamp at the onset of the response. The cell has a membrane capacitance $C_{m} = 10$ pF. Assume that the inward proton current is carried by positive charge entry and therefore produces an initial depolarizing change in membrane potential. Starting from the capacitor relation and standard electrophysiological sign conventions, derive the initial rate of change of membrane potential $\\Delta V / \\Delta t$ at response onset. Express your final numerical answer in $\\mathrm{mV/ms}$ and round your answer to three significant figures.\n\nThen, using first principles of excitability in spiking Type III cells (voltage-gated sodium channel activation following sufficient depolarization), interpret whether the computed initial rate is likely to be sufficient to rapidly drive the membrane toward spike threshold from rest, assuming other conductances have not yet substantially changed at the instant immediately following current onset. Your interpretation should be mechanistic and based on the sign and magnitude of the rate you computed. Do not provide any additional numerical answers beyond the requested initial rate.", "solution": "The appropriate fundamental starting point is the capacitor relation that links membrane current to the rate of change of membrane voltage: for a membrane treated as a capacitor, the total membrane current $I$ and the membrane capacitance $C_{m}$ determine the instantaneous rate of membrane potential change according to\n$$\nI \\;=\\; C_{m}\\,\\frac{dV}{dt}.\n$$\nHere, at the onset of the response, the recorded inward proton current carried by Otopetrin 1 (OTOP1) is specified to be of magnitude $I_{H} = 50$ pA and is depolarizing because it is carried by the entry of positive charges (protons). Taking $I$ to be the depolarizing current driving the capacitor, the initial rate of change of the membrane potential obeys\n$$\n\\frac{dV}{dt} \\;=\\; \\frac{I_{H}}{C_{m}}.\n$$\nSubstituting the given values $I_{H} = 50$ pA and $C_{m} = 10$ pF yields\n$$\n\\frac{dV}{dt} \\;=\\; \\frac{50~\\mathrm{pA}}{10~\\mathrm{pF}}.\n$$\nUsing the definitions $1~\\mathrm{pA} = 10^{-12}~\\mathrm{A}$ and $1~\\mathrm{pF} = 10^{-12}~\\mathrm{F}$,\n$$\n\\frac{dV}{dt} \\;=\\; \\frac{50 \\times 10^{-12}~\\mathrm{A}}{10 \\times 10^{-12}~\\mathrm{F}} \\;=\\; 5~\\mathrm{V/s}.\n$$\nTo express this in $\\mathrm{mV/ms}$, note that $1~\\mathrm{V/s} = 1~\\mathrm{mV/ms}$, because $1~\\mathrm{V} = 10^{3}~\\mathrm{mV}$ and $1~\\mathrm{s} = 10^{3}~\\mathrm{ms}$, so the factors of $10^{3}$ cancel:\n$$\n5~\\mathrm{V/s} \\;=\\; 5~\\mathrm{mV/ms}.\n$$\nRounding to three significant figures gives $5.00~\\mathrm{mV/ms}$.\n\nMechanistic interpretation for Type III taste receptor cell spiking: The sign of $\\frac{dV}{dt}$ is positive, indicating an initial depolarization. Its magnitude, $5~\\mathrm{mV/ms}$, is relatively steep on the timescale of voltage-gated sodium channel activation, which typically occurs on submillisecond to millisecond timescales once depolarization approaches threshold. If the membrane were near a resting potential approximately tens of millivolts below spike threshold (for example, a difference on the order of $20$â€“$30$ mV), a sustained initial slope of $5~\\mathrm{mV/ms}$ would, in the absence of immediate strong countervailing conductances, be sufficient to bring the membrane towards threshold within a few milliseconds. Concretely, a $30$ mV depolarization at $5~\\mathrm{mV/ms}$ would require approximately $6$ ms if the slope were maintained, which is well within the activation window of voltage-gated sodium channels. Therefore, the computed initial rate is consistent with a rapid approach to spike threshold in Type III cells at response onset, supporting the view that OTOP1-mediated proton entry can provide a strong depolarizing drive that initiates action potential firing, with subsequent dynamics shaped by voltage-gated sodium and potassium channel engagement and any acid-sensitive leak modulation.", "answer": "$$\\boxed{5.00}$$", "id": "2760640"}, {"introduction": "Unlike salty and sour tastes, sweet, umami, and bitter modalities are detected via a complex G protein-coupled receptor (GPCR) cascade, a signaling motif found throughout biology. To grasp the dynamics and emergent properties of this multi-step pathway, such as its switch-like sensitivity, we must move beyond static diagrams and employ computational modeling. This advanced problem guides you through building a minimal ordinary differential equation (ODE) model of the transduction cascade, offering a powerful lesson in how systems biology can be used to simulate and analyze the behavior of complex cellular machinery [@problem_id:2760644].", "problem": "You are asked to construct and analyze a minimal but mechanistically faithful ordinary differential equation model of G protein-coupled taste receptor transduction for sweet, umami, or bitter ligands. The model must link receptor occupancy, heterotrimeric G-protein activation, Phospholipase C beta 2 (PLCÎ²2) activity, inositol trisphosphate ($IP_3$) dynamics, intracellular calcium ($Ca^{2+}$) release, and Transient Receptor Potential Melastatin 5 (TRPM5) channel opening. All quantities are dimensionless and time is in arbitrary normalized units.\n\nUse only the following foundational laws and facts as the base of your derivation and implementation:\n- Mass-action binding for receptor-ligand interactions and first-order deactivation for signaling intermediates.\n- Hill-type sigmoid activation for cooperative processes including $Ca^{2+}$-dependent PLCÎ²2 activation, $IP_3$ receptor-mediated $Ca^{2+}$ release, and TRPM5 gating by $Ca^{2+}$.\n- The causal pathway: ligand occupancy of taste G protein-coupled receptors activates the G protein, which stimulates PLCÎ²2; PLCÎ²2 produces $IP_3$, which binds to $IP_3$ receptors on the endoplasmic reticulum to release $Ca^{2+}$ into the cytosol; cytosolic $Ca^{2+}$ opens TRPM5 channels.\n\nDefine the following state variables, each a function of time $t$: receptor active fraction $R(t)$, active G protein fraction $G(t)$, active PLCÎ²2 fraction $P(t)$, $IP_3$ level $I(t)$, cytosolic calcium $C(t)$, and TRPM5 open probability $T(t)$. Let $L$ denote the extracellular ligand concentration, treated as a constant input.\n\nImplement the following minimal ODEs parameterized by nonnegative constants:\n- Receptor occupancy by mass action:\n$$\\frac{dR}{dt} = k_{\\mathrm{on}}\\,L\\,(1 - R) - k_{\\mathrm{off}}\\,R.$$\n- G protein activation by active receptor and deactivation:\n$$\\frac{dG}{dt} = k_{G}^{\\mathrm{act}}\\,R\\,(1 - G) - k_{G}^{\\mathrm{deact}}\\,G.$$\n- PLCÎ²2 activation requiring $G$ and $Ca^{2+}$ with Hill nonlinearities and first-order deactivation:\n$$\\frac{dP}{dt} = k_{P}^{\\mathrm{act}}\\,H(G;K_G,n_G)\\,H(C;K_C,n_{P\\_Ca})\\,(1 - P) - k_{P}^{\\mathrm{deact}}\\,P.$$\n- $IP_3$ production by active PLCÎ²2 and first-order degradation:\n$$\\frac{dI}{dt} = v_{I}^{\\mathrm{prod}}\\,P\\,(1 - I) - k_{I}^{\\mathrm{deg}}\\,I.$$\n- $Ca^{2+}$ release controlled by $IP_3$ receptor and pumping out of the cytosol:\n$$\\frac{dC}{dt} = v_{C}^{\\mathrm{rel}}\\,H(I;K_I,n_I)\\,(1 - C) - v_{C}^{\\mathrm{pump}}\\,C.$$\n- TRPM5 gating as a first-order relaxation to a $Ca^{2+}$-dependent steady state:\n$$\\frac{dT}{dt} = \\frac{H(C;K_T,n_T) - T}{\\tau_T}.$$\nHere $H(x;K,n)$ is the Hill function:\n$$H(x;K,n) = \\frac{x^{n}}{K^{n} + x^{n}},$$\nwith $x \\ge 0$, $K > 0$, and $n \\ge 1$.\n\nYour program must:\n1. For each test case below (a parameter set), compute the steady-state doseâ€“response $T^\\ast(L)$ by numerically integrating the ODEs to steady state for a logarithmically spaced set of ligand concentrations $L \\in [10^{-6}, 10^{2}]$ sampled at $N = 41$ points.\n2. For each test case, estimate an effective Hill coefficient $n_{\\mathrm{eff}}$ of the steady-state mapping $L \\mapsto T^\\ast(L)$ by fitting the fractional response $T^\\ast(L)/\\max_{L}T^\\ast(L)$ to a Hill function $L^{n}/(EC_{50}^{n} + L^{n})$ over the range where the fractional response lies between $0.1$ and $0.9$. If fitting fails or there are insufficient points, estimate $n_{\\mathrm{eff}}$ as the local slope of the logit of the fractional response versus $\\log L$ near the midpoint.\n3. Decide whether the test case is ultrasensitive by thresholding $n_{\\mathrm{eff}}$ at $n_{\\mathrm{th}} = 2.5$. Output a boolean for each test case indicating whether $n_{\\mathrm{eff}} > n_{\\mathrm{th}}$.\n4. All ODE integrations must enforce nonnegativity of state variables and use reasonable tolerances ensuring convergence.\n\nUse these constants for all simulations unless otherwise specified in a test case:\n- $k_{\\mathrm{on}} = 1.0$, $k_{\\mathrm{off}} = 1.0$, $k_{G}^{\\mathrm{act}} = 5.0$, $k_{G}^{\\mathrm{deact}} = 1.0$, $k_{P}^{\\mathrm{act}} = 2.0$, $k_{P}^{\\mathrm{deact}} = 1.0$, $v_{I}^{\\mathrm{prod}} = 2.0$, $v_{C}^{\\mathrm{rel}} = 5.0$, $K_G = 0.3$, $n_G = 1.0$, $K_C = 0.3$, $K_I = 0.2$, $K_T = 0.3$, $n_T = 3.0$, $\\tau_T = 0.1$.\n\nTest Suite (each case specifies $(n_{P\\_Ca}, n_I, k_{I}^{\\mathrm{deg}}, v_{C}^{\\mathrm{pump}})$; all unspecified constants are as above):\n- Case A (baseline cooperativity): $(2.0, 2.0, 1.0, 1.0)$.\n- Case B (strong nonlinearities, expected ultrasensitivity): $(3.5, 3.0, 0.5, 0.8)$.\n- Case C (weak $Ca^{2+}$ dependence of PLCÎ²2): $(1.0, 2.0, 1.0, 1.0)$.\n- Case D (strong $IP_3$ degradation and $Ca^{2+}$ pumping): $(3.0, 3.0, 3.0, 3.0)$.\n\nYour program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets (e.g., \"[resultA,resultB,resultC,resultD]\"), where each item is a boolean corresponding to the cases A, B, C, and D in order. All values are dimensionless; no physical units are required. The final booleans must be printed without quotes.\n\nYour implementation must be a complete, runnable program in a general-purpose programming language and must not require any input.", "solution": "The problem statement is subjected to validation.\n\n**Step 1: Extract Givens**\n- **State Variables**: $R(t)$, $G(t)$, $P(t)$, $I(t)$, $C(t)$, $T(t)$, all dimensionless.\n- **Input**: Ligand concentration $L$, a constant.\n- **Hill Function**: $H(x;K,n) = \\frac{x^{n}}{K^{n} + x^{n}}$, with $x \\ge 0$, $K > 0$, and $n \\ge 1$.\n- **ODE System**:\n    1.  $\\frac{dR}{dt} = k_{\\mathrm{on}}\\,L\\,(1 - R) - k_{\\mathrm{off}}\\,R$\n    2.  $\\frac{dG}{dt} = k_{G}^{\\mathrm{act}}\\,R\\,(1 - G) - k_{G}^{\\mathrm{deact}}\\,G$\n    3.  $\\frac{dP}{dt} = k_{P}^{\\mathrm{act}}\\,H(G;K_G,n_G)\\,H(C;K_C,n_{P\\_Ca})\\,(1 - P) - k_{P}^{\\mathrm{deact}}\\,P$\n    4.  $\\frac{dI}{dt} = v_{I}^{\\mathrm{prod}}\\,P\\,(1 - I) - k_{I}^{\\mathrm{deg}}\\,I$\n    5.  $\\frac{dC}{dt} = v_{C}^{\\mathrm{rel}}\\,H(I;K_I,n_I)\\,(1 - C) - v_{C}^{\\mathrm{pump}}\\,C$\n    6.  $\\frac{dT}{dt} = \\frac{H(C;K_T,n_T) - T}{\\tau_T}$\n- **Default Constants**: $k_{\\mathrm{on}} = 1.0$, $k_{\\mathrm{off}} = 1.0$, $k_{G}^{\\mathrm{act}} = 5.0$, $k_{G}^{\\mathrm{deact}} = 1.0$, $k_{P}^{\\mathrm{act}} = 2.0$, $k_{P}^{\\mathrm{deact}} = 1.0$, $v_{I}^{\\mathrm{prod}} = 2.0$, $v_{C}^{\\mathrm{rel}} = 5.0$, $K_G = 0.3$, $n_G = 1.0$, $K_C = 0.3$, $K_I = 0.2$, $K_T = 0.3$, $n_T = 3.0$, $\\tau_T = 0.1$.\n- **Test Cases** (specify $(n_{P\\_Ca}, n_I, k_{I}^{\\mathrm{deg}}, v_{C}^{\\mathrm{pump}})$):\n    - Case A: $(2.0, 2.0, 1.0, 1.0)$\n    - Case B: $(3.5, 3.0, 0.5, 0.8)$\n    - Case C: $(1.0, 2.0, 1.0, 1.0)$\n    - Case D: $(3.0, 3.0, 3.0, 3.0)$\n- **Computational Task**:\n    1.  Compute steady-state doseâ€“response $T^\\ast(L)$ for $L \\in [10^{-6}, 10^{2}]$ at $N = 41$ logarithmic points.\n    2.  Estimate the effective Hill coefficient $n_{\\mathrm{eff}}$ from the curve $T^\\ast(L) / \\max_{L} T^\\ast(L)$ by fitting a Hill function to the response range $[0.1, 0.9]$, or by using a local slope of logit-log plot as a fallback.\n    3.  Classify as ultrasensitive if $n_{\\mathrm{eff}} > n_{\\mathrm{th}} = 2.5$.\n    4.  Output a boolean for each case.\n\n**Step 2: Validate Using Extracted Givens**\n- **Scientific Grounding**: The problem is grounded in the principles of biochemical kinetics, specifically mass-action kinetics for binding and first-order decay, and Hill functions for cooperative enzymatic and channel-gating processes. This is a standard and mechanistically plausible simplification of G protein-coupled receptor (GPCR) signaling cascades used in computational systems biology.\n- **Well-Posedness**: The problem defines a system of six coupled, non-linear, first-order ordinary differential equations. Given a set of non-negative parameters and initial conditions (all state variables starting at $0$), a unique solution is guaranteed to exist for a finite time interval by the Picard-LindelÃ¶f theorem. The model structure, comprising activation and deactivation/degradation terms for each component, suggests that the system will converge to a unique, stable steady state for any constant input $L$, making the problem well-posed.\n- **Objectivity**: The problem is expressed entirely in objective, mathematical language, free of subjective or ambiguous terminology.\n- All other validation criteria are met. The problem is self-contained, computationally tractable, and relevant to the specified scientific domain. It does not contain contradictions, factual errors, or unverifiable claims.\n\n**Step 3: Verdict and Action**\nThe problem is deemed **valid**. A solution will be constructed.\n\n**Methodology**\n\nThe problem requires the analysis of a dynamical system that models a taste transduction pathway. The system is described by a set of $6$ coupled ordinary differential equations (ODEs), representing the time evolution of the concentrations or activities of key signaling molecules. The state vector is defined as $\\vec{y}(t) = [R(t), G(t), P(t), I(t), C(t), T(t)]^T$.\n\nFirst, a function implementing the ODE system $\\frac{d\\vec{y}}{dt} = f(t, \\vec{y}, \\text{params})$ is constructed, where `params` is a structure containing the ligand concentration $L$ and all rate constants and Hill parameters. The initial condition for an unstimulated cell is $\\vec{y}(0) = \\vec{0}$.\n\nTo generate the dose-response curve, $T^\\ast(L)$, we must determine the steady-state open probability of the TRPM5 channel, $T^\\ast$, for a range of ligand concentrations, $L$. The concentrations are logarithmically spaced with $N=41$ points over the interval $[10^{-6}, 10^{2}]$. For each value of $L$, the ODE system is numerically integrated over a time interval sufficiently long to ensure the system relaxes to its steady state. The final value of the state variable $T(t)$ from the integration is taken as the steady-state value $T^\\ast(L)$. The `solve_ivp` function from the SciPy library is suitable for this task, as it provides robust and adaptive algorithms for solving initial value problems.\n\nThe central task is to quantify the \"steepness\" or \"switch-likeness\" of the dose-response curve $L \\mapsto T^\\ast(L)$. This is accomplished by estimating an effective Hill coefficient, $n_{\\mathrm{eff}}$. The response data $T^\\ast(L)$ is first normalized to its maximum value, yielding a fractional response $T_{\\mathrm{frac}}(L) = T^\\ast(L) / \\max_{L} T^\\ast(L)$.\n\nThe primary method for estimating $n_{\\mathrm{eff}}$ is nonlinear least-squares fitting. The data points $(L, T_{\\mathrm{frac}}(L))$ for which $0.1 \\le T_{\\mathrm{frac}}(L) \\le 0.9$ are selected. These points are fit to the two-parameter Hill function $H(L; EC_{50}, n_{\\mathrm{eff}}) = \\frac{L^{n_{\\mathrm{eff}}}}{EC_{50}^{n_{\\mathrm{eff}}} + L^{n_{\\mathrm{eff}}}}$. The `curve_fit` function from SciPy's optimization module is used to find the optimal values for $EC_{50}$ and $n_{\\mathrm{eff}}$.\n\nA fallback method is specified for cases where fitting fails or is unreliable due to an insufficient number of data points in the target range. This method leverages the linear relationship that arises from a logit transformation of the Hill equation:\n$$ \\log\\left(\\frac{T_{\\mathrm{frac}}}{1 - T_{\\mathrm{frac}}}\\right) = n_{\\mathrm{eff}} \\log(L) - n_{\\mathrm{eff}} \\log(EC_{50}) $$\nThis shows that a plot of $\\log(T_{\\mathrm{frac}} / (1 - T_{\\mathrm{frac}}))$ versus $\\log(L)$ is a straight line with slope $n_{\\mathrm{eff}}$. We therefore estimate $n_{\\mathrm{eff}}$ by computing the local slope of this transformed plot near the midpoint of the response, i.e., where $T_{\\mathrm{frac}} \\approx 0.5$.\n\nFinally, for each of the four test cases, the estimated $n_{\\mathrm{eff}}$ is compared against the threshold $n_{\\mathrm{th}} = 2.5$. If $n_{\\mathrm{eff}} > n_{\\mathrm{th}}$, the system's response is classified as ultrasensitive, and a boolean value of `True` is recorded. Otherwise, it is `False`. The entire procedure is encapsulated in a program that executes for the four specified parameter sets and outputs the list of boolean results.", "answer": "```python\nimport numpy as np\nfrom scipy.integrate import solve_ivp\nfrom scipy.optimize import curve_fit\n\ndef solve():\n    \"\"\"\n    Solves the taste transduction ODE model and determines ultrasensitivity\n    for four test cases.\n    \"\"\"\n    \n    # --- Model Definition ---\n    \n    def hill_function(x, K, n):\n        \"\"\"Standard Hill function.\"\"\"\n        # Add a small epsilon to prevent division by zero if x and K are 0\n        x_n = x**n\n        K_n = K**n\n        return x_n / (K_n + x_n + 1e-12)\n\n    def ode_system(t, y, params):\n        \"\"\"The system of 6 ODEs for taste transduction.\"\"\"\n        R, G, P, I, C, T = y\n        \n        # Ensure states remain non-negative\n        R, G, P, I, C, T = max(0, R), max(0, G), max(0, P), max(0, I), max(0, C), max(0, T)\n\n        # Unpack parameters\n        L = params['L']\n        k_on, k_off = params['k_on'], params['k_off']\n        k_G_act, k_G_deact = params['k_G_act'], params['k_G_deact']\n        k_P_act, k_P_deact = params['k_P_act'], params['k_P_deact']\n        v_I_prod, k_I_deg = params['v_I_prod'], params['k_I_deg']\n        v_C_rel, v_C_pump = params['v_C_rel'], params['v_C_pump']\n        tau_T = params['tau_T']\n        K_G, n_G = params['K_G'], params['n_G']\n        K_C, n_P_Ca = params['K_C'], params['n_P_Ca']\n        K_I, n_I = params['K_I'], params['n_I']\n        K_T, n_T = params['K_T'], params['n_T']\n        \n        # ODEs\n        dR_dt = k_on * L * (1.0 - R) - k_off * R\n        dG_dt = k_G_act * R * (1.0 - G) - k_G_deact * G\n        dP_dt = k_P_act * hill_function(G, K_G, n_G) * hill_function(C, K_C, n_P_Ca) * (1.0 - P) - k_P_deact * P\n        dI_dt = v_I_prod * P * (1.0 - I) - k_I_deg * I\n        dC_dt = v_C_rel * hill_function(I, K_I, n_I) * (1.0 - C) - v_C_pump * C\n        dT_dt = (hill_function(C, K_T, n_T) - T) / tau_T\n        \n        return [dR_dt, dG_dt, dP_dt, dI_dt, dC_dt, dT_dt]\n\n    # --- Analysis Functions ---\n    def fit_hill_function(L, T_frac):\n        \"\"\"Fits a Hill function to the dose-response curve to find n_eff.\"\"\"\n        def hill_model(x, n, ec50):\n            return x**n / (ec50**n + x**n)\n\n        # Select data points between 0.1 and 0.9 of max response\n        mask = (T_frac >= 0.1)  (T_frac = 0.9)\n        L_fit = L[mask]\n        T_frac_fit = T_frac[mask]\n\n        if len(L_fit)  3:  # Not enough points to fit reliably\n            return None\n\n        try:\n            p0 = [1.0, np.median(L_fit)]  # Initial guess for [n, ec50]\n            bounds = ([0.1, 1e-7], [10.0, 1e3])\n            popt, _ = curve_fit(hill_model, L_fit, T_frac_fit, p0=p0, bounds=bounds)\n            n_eff = popt[0]\n            return n_eff\n        except (RuntimeError, ValueError):\n            return None\n\n    def estimate_n_eff_slope(L, T_frac):\n        \"\"\"Estimates n_eff from the logit-log slope as a fallback.\"\"\"\n        midpoint_idx = np.argmin(np.abs(T_frac - 0.5))\n\n        # Check for valid points around the midpoint for finite difference\n        if midpoint_idx == 0 or midpoint_idx == len(L) - 1:\n            return 1.0 # Cannot compute slope, return default\n\n        # Use indices around the midpoint\n        indices_to_check = [midpoint_idx - 1, midpoint_idx, midpoint_idx + 1]\n        valid_indices = []\n        for i in indices_to_check:\n            if 0.001  T_frac[i]  0.999: # Ensure logit is well-behaved\n                valid_indices.append(i)\n        \n        if len(valid_indices)  2:\n            return 1.0 # Not enough valid points, return default\n\n        # Use finite difference on the valid points\n        # Using two outer points for a more stable slope calculation\n        i1 = valid_indices[0]\n        i2 = valid_indices[-1]\n        if i1 == i2:\n            return 1.0\n\n        logit_y1 = np.log(T_frac[i1] / (1.0 - T_frac[i1]))\n        logit_y2 = np.log(T_frac[i2] / (1.0 - T_frac[i2]))\n        \n        log_L1 = np.log(L[i1])\n        log_L2 = np.log(L[i2])\n\n        if np.isclose(log_L2, log_L1):\n            return 1.0\n\n        n_eff = (logit_y2 - logit_y1) / (log_L2 - log_L1)\n        return n_eff\n    \n    # --- Simulation Setup ---\n    \n    base_params = {\n        'k_on': 1.0, 'k_off': 1.0,\n        'k_G_act': 5.0, 'k_G_deact': 1.0,\n        'k_P_act': 2.0, 'k_P_deact': 1.0,\n        'v_I_prod': 2.0, 'k_I_deg': 1.0,\n        'v_C_rel': 5.0, 'v_C_pump': 1.0,\n        'K_G': 0.3, 'n_G': 1.0,\n        'K_C': 0.3, 'n_P_Ca': 2.0,\n        'K_I': 0.2, 'n_I': 2.0,\n        'K_T': 0.3, 'n_T': 3.0,\n        'tau_T': 0.1,\n    }\n\n    test_cases = {\n        'A': {'n_P_Ca': 2.0, 'n_I': 2.0, 'k_I_deg': 1.0, 'v_C_pump': 1.0},\n        'B': {'n_P_Ca': 3.5, 'n_I': 3.0, 'k_I_deg': 0.5, 'v_C_pump': 0.8},\n        'C': {'n_P_Ca': 1.0, 'n_I': 2.0, 'k_I_deg': 1.0, 'v_C_pump': 1.0},\n        'D': {'n_P_Ca': 3.0, 'n_I': 3.0, 'k_I_deg': 3.0, 'v_C_pump': 3.0},\n    }\n    \n    L_values = np.logspace(-6, 2, 41)\n    y0 = np.zeros(6)\n    t_span = (0, 500) # Integration time, long enough for steady state\n    n_th = 2.5\n    results = []\n\n    # --- Main Loop ---\n    \n    for case_id in ['A', 'B', 'C', 'D']:\n        params = base_params.copy()\n        params.update(test_cases[case_id])\n        \n        T_star = np.zeros_like(L_values)\n        \n        for i, L_val in enumerate(L_values):\n            current_params = params.copy()\n            current_params['L'] = L_val\n            \n            sol = solve_ivp(\n                fun=ode_system,\n                t_span=t_span,\n                y0=y0,\n                method='Radau',\n                args=(current_params,),\n                dense_output=True,\n                rtol=1e-6,\n                atol=1e-8\n            )\n            \n            # The last value is the steady state\n            T_star[i] = sol.y[5, -1]\n        \n        # --- Hill Coefficient Estimation ---\n        T_max = np.max(T_star)\n        if T_max  1e-6: # No response\n            n_eff = 1.0\n        else:\n            T_frac = T_star / T_max\n            n_eff = fit_hill_function(L_values, T_frac)\n            if n_eff is None:\n                n_eff = estimate_n_eff_slope(L_values, T_frac)\n        \n        is_ultrasensitive = n_eff > n_th\n        results.append(is_ultrasensitive)\n\n    # --- Final Output ---\n    # Python booleans True/False need to be lowercase as 'true'/'false' for output\n    final_output = [str(r).lower() for r in results]\n    print(f\"[{','.join(final_output)}]\")\n\nsolve()\n\n```", "id": "2760644"}]}