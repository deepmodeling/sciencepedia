{"hands_on_practices": [{"introduction": "Intracellular calcium signals are profoundly shaped by mobile and fixed buffers that rapidly bind free $Ca^{2+}$ ions. To build quantitative models of these signals, we must first understand the equilibrium relationship between free $[Ca^{2+}]$ and the fraction of occupied buffer binding sites. This fundamental exercise guides you through deriving the Hill-Langmuir equation from first principles—the law of mass action and mass conservation—to calculate the bound status of a simple buffer, a critical first step in analyzing more complex calcium dynamics [@problem_id:2746473].", "problem": "A neuron’s cytosol contains a mobile calcium-binding buffer with a single binding site that binds calcium ion $\\mathrm{Ca^{2+}}$ according to a one-to-one reversible reaction at thermodynamic equilibrium. Let the free buffer concentration be $[B]$, the calcium-bound buffer concentration be $[BC]$, the total buffer concentration be $B_T$, and the free calcium concentration be $[ \\mathrm{Ca}^{2+} ]_f$. The binding equilibrium is characterized by the dissociation constant $K_d$ defined by the law of mass action. Assume no cooperativity, a single class of sites, and that $[ \\mathrm{Ca}^{2+} ]_f$ is controlled externally (for example, by clamped calcium microdomain conditions), so that buffer binding does not alter $[ \\mathrm{Ca}^{2+} ]_f$.\n\nStarting only from the definition of the dissociation constant by the law of mass action and conservation of mass for the buffer, derive an expression for the bound fraction $f_B \\equiv [BC]/B_T$ as a function of $[ \\mathrm{Ca}^{2+} ]_f$ and $K_d$. Then evaluate this fraction for $B_T = 50\\,\\mu\\mathrm{M}$, $K_d = 200\\,\\mathrm{nM}$ at two free calcium levels: $[ \\mathrm{Ca}^{2+} ]_f = 100\\,\\mathrm{nM}$ and $[ \\mathrm{Ca}^{2+} ]_f = 1\\,\\mu\\mathrm{M}$. \n\nReport your two numerical results for $f_B$ as a two-entry row vector in the order $\\big(100\\,\\mathrm{nM},\\,1\\,\\mu\\mathrm{M}\\big)$. Express your final answer as a dimensionless fraction and round to four significant figures.", "solution": "The problem as stated constitutes a valid and well-posed exercise in fundamental biophysical chemistry. It is scientifically grounded, internally consistent, and requires the application of first principles. We will proceed with the derivation and subsequent calculation.\n\nThe problem describes a reversible binding reaction between a buffer, $B$, and a calcium ion, $\\mathrm{Ca^{2+}}$, to form a complex, $BC$. The reaction is represented as:\n$$\nB + \\mathrm{Ca^{2+}} \\rightleftharpoons BC\n$$\nThis reaction is governed by two fundamental principles: the law of mass action at equilibrium and the conservation of mass for the buffer species.\n\n$1$. The Law of Mass Action:\nThe equilibrium state is characterized by the dissociation constant, $K_d$, which is defined as:\n$$\nK_d = \\frac{[B] [\\mathrm{Ca}^{2+}]_f}{[BC]}\n$$\nHere, $[B]$ is the concentration of the free buffer, $[\\mathrm{Ca}^{2+}]_f$ is the concentration of free calcium ions, and $[BC]$ is the concentration of the calcium-bound buffer.\n\n$2$. Conservation of Mass:\nThe total concentration of the buffer, $B_T$, is the sum of the concentrations of its free and bound forms:\n$$\nB_T = [B] + [BC]\n$$\n\nThe objective is to derive an expression for the bound fraction, $f_B$, defined as the ratio of the bound buffer concentration to the total buffer concentration:\n$$\nf_B \\equiv \\frac{[BC]}{B_T}\n$$\nThis expression must be in terms of $[\\mathrm{Ca}^{2+}]_f$ and $K_d$.\n\nWe begin by rearranging the mass conservation equation to express the free buffer concentration, $[B]$, in terms of $B_T$ and $[BC]$:\n$$\n[B] = B_T - [BC]\n$$\nNext, we substitute this expression for $[B]$ into the equation for the dissociation constant $K_d$:\n$$\nK_d = \\frac{(B_T - [BC]) [\\mathrm{Ca}^{2+}]_f}{[BC]}\n$$\nThis equation establishes a relationship between the concentrations, the free calcium level, and the dissociation constant. Our goal is to solve for the ratio $\\frac{[BC]}{B_T}$. To do this, we perform algebraic manipulation. First, multiply both sides by $[BC]$:\n$$\nK_d [BC] = (B_T - [BC]) [\\mathrm{Ca}^{2+}]_f\n$$\nDistribute the term $[\\mathrm{Ca}^{2+}]_f$ on the right-hand side:\n$$\nK_d [BC] = B_T [\\mathrm{Ca}^{2+}]_f - [BC] [\\mathrm{Ca}^{2+}]_f\n$$\nTo solve for $[BC]$, we gather all terms containing $[BC]$ on one side of the equation:\n$$\nK_d [BC] + [BC] [\\mathrm{Ca}^{2+}]_f = B_T [\\mathrm{Ca}^{2+}]_f\n$$\nFactor out $[BC]$ from the left-hand side:\n$$\n[BC] (K_d + [\\mathrm{Ca}^{2+}]_f) = B_T [\\mathrm{Ca}^{2+}]_f\n$$\nFinally, to obtain the desired bound fraction $f_B = \\frac{[BC]}{B_T}$, we divide both sides by $B_T$ and by the term $(K_d + [\\mathrm{Ca}^{2+}]_f)$:\n$$\nf_B = \\frac{[BC]}{B_T} = \\frac{[\\mathrm{Ca}^{2+}]_f}{K_d + [\\mathrm{Ca}^{2+}]_f}\n$$\nThis is the required expression for the bound fraction. It is a specific instance of the Hill-Langmuir equation for a system with a single class of non-cooperative binding sites. It is important to note that the total buffer concentration, $B_T$, does not appear in the final formula for the fraction $f_B$. Thus, the given value $B_T = 50\\,\\mu\\mathrm{M}$ is irrelevant for this calculation.\n\nNow, we evaluate this expression for the given numerical values. The dissociation constant is $K_d = 200\\,\\mathrm{nM}$. We must evaluate $f_B$ at two different free calcium concentrations.\n\nCase 1: $[\\mathrm{Ca}^{2+}]_f = 100\\,\\mathrm{nM}$\nSubstituting the values into the derived expression:\n$$\nf_B = \\frac{100\\,\\mathrm{nM}}{200\\,\\mathrm{nM} + 100\\,\\mathrm{nM}} = \\frac{100}{300} = \\frac{1}{3}\n$$\nExpressed as a decimal rounded to four significant figures, this is $0.3333$.\n\nCase 2: $[\\mathrm{Ca}^{2+}]_f = 1\\,\\mu\\mathrm{M}$\nFirst, we must ensure consistent units. We convert $1\\,\\mu\\mathrm{M}$ to nanomolars: $1\\,\\mu\\mathrm{M} = 1000\\,\\mathrm{nM}$.\nSubstituting the values:\n$$\nf_B = \\frac{1000\\,\\mathrm{nM}}{200\\,\\mathrm{nM} + 1000\\,\\mathrm{nM}} = \\frac{1000}{1200} = \\frac{10}{12} = \\frac{5}{6}\n$$\nExpressed as a decimal rounded to four significant figures, this is $0.8333$.\n\nThe final answer should be reported as a two-entry row vector containing these two results in the specified order.", "answer": "$$\n\\boxed{\\begin{pmatrix} 0.3333 & 0.8333 \\end{pmatrix}}\n$$", "id": "2746473"}, {"introduction": "Beyond passive buffering, neurons actively maintain steep $Ca^{2+}$ gradients across organellar membranes, with the endoplasmic reticulum (ER) serving as a key internal store. This homeostasis is achieved through a dynamic balance between active transport into the ER by pumps like SERCA and passive leak back into the cytosol. This practice challenges you to model this steady-state equilibrium by calculating the luminal ER $[Ca^{2+}]$ that results from balancing the cooperative SERCA pump flux against the passive leak flux, illustrating a core principle of ion homeostasis [@problem_id:2746401].", "problem": "A single-compartment neuronal endoplasmic reticulum (ER) is separated from the cytosol by a membrane across which calcium ions are transported. Assume the cytosolic free calcium concentration is clamped at a constant value by powerful extrusion and buffering mechanisms. Let the cytosolic free calcium concentration be $[ \\mathrm{Ca}^{2+} ]_{\\mathrm{cyt}} = 0.2\\,\\mu\\mathrm{M}$. The Sarco/Endoplasmic Reticulum Calcium Adenosine Triphosphatase (SERCA) pumps calcium from cytosol into the ER lumen with uptake flux density $J_{\\mathrm{SERCA}}$ that depends on cytosolic calcium via cooperative binding, and the passive leak flux density $J_{\\mathrm{leak}}$ carries calcium from the ER lumen back to the cytosol, driven by the concentration difference. Use the following biophysically standard constitutive relations for the flux densities per unit membrane area:\n- SERCA uptake: $J_{\\mathrm{SERCA}} = V_{\\max} \\dfrac{[ \\mathrm{Ca}^{2+} ]_{\\mathrm{cyt}}^{n}}{K^{n} + [ \\mathrm{Ca}^{2+} ]_{\\mathrm{cyt}}^{n}}$,\n- Passive leak: $J_{\\mathrm{leak}} = P_{\\mathrm{leak}} \\left( [ \\mathrm{Ca}^{2+} ]_{\\mathrm{ER}} - [ \\mathrm{Ca}^{2+} ]_{\\mathrm{cyt}} \\right)$,\n\nwhere $[ \\mathrm{Ca}^{2+} ]_{\\mathrm{ER}}$ is the free calcium concentration in the ER lumen. All concentrations entering the flux formulas must be expressed in $\\mathrm{mol\\,m^{-3}}$. The parameters are:\n- Maximum SERCA uptake $V_{\\max} = 1.6 \\times 10^{-8}\\,\\mathrm{mol\\,m^{-2}\\,s^{-1}}$,\n- Half-activation constant $K = 0.3\\,\\mu\\mathrm{M}$,\n- Hill coefficient $n = 2$,\n- Passive permeability $P_{\\mathrm{leak}} = 1.0 \\times 10^{-8}\\,\\mathrm{m\\,s^{-1}}$.\n\nAssume steady state with no net accumulation of calcium in the ER (i.e., the membrane fluxes balance). Starting from mass conservation at the membrane and the definitions above, derive and compute the steady-state $[ \\mathrm{Ca}^{2+} ]_{\\mathrm{ER}}$. Express your final numerical answer in $\\mu\\mathrm{M}$ and round your answer to four significant figures.", "solution": "The problem as stated is a well-posed exercise in biophysical modeling and is scientifically sound. All necessary parameters and conditions are provided for a unique solution. We shall proceed with the derivation.\n\nThe fundamental principle is the conservation of mass. At steady state, the net flux of calcium ions across the endoplasmic reticulum (ER) membrane is zero. This means the influx into the ER must exactly balance the efflux from the ER. The influx is mediated by the SERCA pump, with flux density $J_{\\mathrm{SERCA}}$, and the efflux is a passive leak, with flux density $J_{\\mathrm{leak}}$. The steady-state condition is therefore:\n$$\nJ_{\\mathrm{SERCA}} = J_{\\mathrm{leak}}\n$$\nThe problem provides the constitutive relations for these fluxes:\n$$\nJ_{\\mathrm{SERCA}} = V_{\\max} \\frac{[ \\mathrm{Ca}^{2+} ]_{\\mathrm{cyt}}^{n}}{K^{n} + [ \\mathrm{Ca}^{2+} ]_{\\mathrm{cyt}}^{n}}\n$$\n$$\nJ_{\\mathrm{leak}} = P_{\\mathrm{leak}} \\left( [ \\mathrm{Ca}^{2+} ]_{\\mathrm{ER}} - [ \\mathrm{Ca}^{2+} ]_{\\mathrm{cyt}} \\right)\n$$\nHere, $[ \\mathrm{Ca}^{2+} ]_{\\mathrm{cyt}}$ is the cytosolic free calcium concentration, $[ \\mathrm{Ca}^{2+} ]_{\\mathrm{ER}}$ is the free calcium concentration in the ER lumen, $V_{\\max}$ is the maximum SERCA pump rate, $K$ is the half-activation constant for SERCA, $n$ is the Hill coefficient, and $P_{\\mathrm{leak}}$ is the leak permeability of the membrane.\n\nBy substituting these expressions into the steady-state balance equation, we obtain:\n$$\nV_{\\max} \\frac{[ \\mathrm{Ca}^{2+} ]_{\\mathrm{cyt}}^{n}}{K^{n} + [ \\mathrm{Ca}^{2+} ]_{\\mathrm{cyt}}^{n}} = P_{\\mathrm{leak}} \\left( [ \\mathrm{Ca}^{2+} ]_{\\mathrm{ER}} - [ \\mathrm{Ca}^{2+} ]_{\\mathrm{cyt}} \\right)\n$$\nOur objective is to determine the steady-state value of $[ \\mathrm{Ca}^{2+} ]_{\\mathrm{ER}}$. We rearrange the equation to solve for this variable. First, divide by $P_{\\mathrm{leak}}$:\n$$\n\\frac{V_{\\max}}{P_{\\mathrm{leak}}} \\frac{[ \\mathrm{Ca}^{2+} ]_{\\mathrm{cyt}}^{n}}{K^{n} + [ \\mathrm{Ca}^{2+} ]_{\\mathrm{cyt}}^{n}} = [ \\mathrm{Ca}^{2+} ]_{\\mathrm{ER}} - [ \\mathrm{Ca}^{2+} ]_{\\mathrm{cyt}}\n$$\nNext, we isolate $[ \\mathrm{Ca}^{2+} ]_{\\mathrm{ER}}$ by adding $[ \\mathrm{Ca}^{2+} ]_{\\mathrm{cyt}}$ to both sides:\n$$\n[ \\mathrm{Ca}^{2+} ]_{\\mathrm{ER}} = [ \\mathrm{Ca}^{2+} ]_{\\mathrm{cyt}} + \\frac{V_{\\max}}{P_{\\mathrm{leak}}} \\frac{[ \\mathrm{Ca}^{2+} ]_{\\mathrm{cyt}}^{n}}{K^{n} + [ \\mathrm{Ca}^{2+} ]_{\\mathrm{cyt}}^{n}}\n$$\nThis is the symbolic solution for the steady-state ER calcium concentration.\n\nWe must now perform the numerical calculation. A critical point is the handling of units. The problem specifies that concentrations must be in SI units of $\\mathrm{mol\\,m^{-3}}$ within the flux equations. The given concentration values are in micromolar ($\\mu\\mathrm{M}$). The conversion is $1\\,\\mu\\mathrm{M} = 10^{-6}\\,\\mathrm{mol\\,L^{-1}} = 10^{-6}\\,\\mathrm{mol}\\,(10^{-3}\\,\\mathrm{m}^3)^{-1} = 10^{-3}\\,\\mathrm{mol\\,m^{-3}}$.\n\nThe given parameters are:\n- $[ \\mathrm{Ca}^{2+} ]_{\\mathrm{cyt}} = 0.2\\,\\mu\\mathrm{M} = 0.2 \\times 10^{-3}\\,\\mathrm{mol\\,m^{-3}}$\n- $K = 0.3\\,\\mu\\mathrm{M} = 0.3 \\times 10^{-3}\\,\\mathrm{mol\\,m^{-3}}$\n- $n = 2$\n- $V_{\\max} = 1.6 \\times 10^{-8}\\,\\mathrm{mol\\,m^{-2}\\,s^{-1}}$\n- $P_{\\mathrm{leak}} = 1.0 \\times 10^{-8}\\,\\mathrm{m\\,s^{-1}}$\n\nLet us first evaluate the dimensionless Hill term, $\\mathcal{H} = \\frac{[ \\mathrm{Ca}^{2+} ]_{\\mathrm{cyt}}^{n}}{K^{n} + [ \\mathrm{Ca}^{2+} ]_{\\mathrm{cyt}}^{n}}$. Since this is a ratio of terms with the same units, we can use the values in $\\mu\\mathrm{M}$ directly:\n$$\n\\mathcal{H} = \\frac{(0.2)^{2}}{(0.3)^{2} + (0.2)^{2}} = \\frac{0.04}{0.09 + 0.04} = \\frac{0.04}{0.13} = \\frac{4}{13}\n$$\nNext, we evaluate the term $\\frac{V_{\\max}}{P_{\\mathrm{leak}}}$:\n$$\n\\frac{V_{\\max}}{P_{\\mathrm{leak}}} = \\frac{1.6 \\times 10^{-8}\\,\\mathrm{mol\\,m^{-2}\\,s^{-1}}}{1.0 \\times 10^{-8}\\,\\mathrm{m\\,s^{-1}}} = 1.6\\,\\mathrm{mol\\,m^{-3}}\n$$\nThe units of this term are correctly that of a concentration, confirming the dimensional consistency of our derived symbolic expression.\n\nNow we substitute these values into the equation for $[ \\mathrm{Ca}^{2+} ]_{\\mathrm{ER}}$, ensuring all terms are in SI units ($\\mathrm{mol\\,m^{-3}}$):\n$$\n[ \\mathrm{Ca}^{2+} ]_{\\mathrm{ER}} = (0.2 \\times 10^{-3}) + (1.6) \\times \\left(\\frac{4}{13}\\right)\n$$\nAll terms are in $\\mathrm{mol\\,m^{-3}}$.\n$$\n[ \\mathrm{Ca}^{2+} ]_{\\mathrm{ER}} = 0.0002 + \\frac{6.4}{13} \\approx 0.0002 + 0.49230769\n$$\n$$\n[ \\mathrm{Ca}^{2+} ]_{\\mathrm{ER}} \\approx 0.49250769\\,\\mathrm{mol\\,m^{-3}}\n$$\nThe problem requires the final answer in $\\mu\\mathrm{M}$. We use the conversion factor $1\\,\\mathrm{mol\\,m^{-3}} = 10^3\\,\\mu\\mathrm{M}$.\n$$\n[ \\mathrm{Ca}^{2+} ]_{\\mathrm{ER}} \\approx 0.49250769 \\times 10^3\\,\\mu\\mathrm{M} = 492.50769\\,\\mu\\mathrm{M}\n$$\nFinally, we round the answer to four significant figures as requested:\n$$\n[ \\mathrm{Ca}^{2+} ]_{\\mathrm{ER}} \\approx 492.5\\,\\mu\\mathrm{M}\n$$\nThis result is biophysically plausible, as ER luminal calcium concentrations are typically in the range of hundreds of micromolars, whereas resting cytosolic levels are orders of magnitude lower.", "answer": "$$\\boxed{492.5}$$", "id": "2746401"}, {"introduction": "The ultimate goal of studying individual calcium handling mechanisms is to understand their integrated function in a living neuron, where influx, buffering, extrusion, and diffusion interact across different compartments. This computational practice provides an opportunity to build and analyze a dynamic two-compartment model, simulating the full time course of a $Ca^{2+}$ transient in the soma and dendrites. By performing a sensitivity analysis, you will gain hands-on experience in identifying which biophysical parameters—from pump rates to buffer capacity—most critically control the signal's amplitude and duration [@problem_id:2746415].", "problem": "You are asked to write a complete, runnable program that performs a local, one-at-a-time sensitivity analysis on peak amplitude and decay time of cytosolic calcium concentration in a two-compartment neuronal model. The two compartments represent soma and dendrite, with diffusive coupling between them. The aim is to identify, for each provided parameter set, which single parameter most strongly influences each of the two metrics: peak amplitude and decay time in the soma.\n\nFundamental base and model formulation:\n- Start from mass balance in each compartment: rate of change equals sum of sources and sinks. Use Fick's law for inter-compartmental diffusion, and first-order kinetics for extrusion by membrane pumps such as Plasma Membrane Calcium ATPase (PMCA) and Sodium-Calcium Exchanger (NCX). Represent fast buffering by a constant buffering capacity that reduces the effective free calcium change.\n- Let $c_s(t)$ and $c_d(t)$ denote free cytosolic calcium concentration in the soma and dendrite, respectively, in micromolar (denoted $\\mu\\text{M}$). Let $c_0$ be the resting free calcium level, in $\\mu\\text{M}$.\n- Let $J_{\\text{in},s}(t)$ and $J_{\\text{in},d}(t)$ be external calcium influxes into soma and dendrite, respectively, modeling a brief opening of Voltage-Gated Calcium Channels (VGCC). Use an $\\alpha$-function time course $g(t)$ with a single parameter $\\tau_{\\text{in}}$ to shape the influx: $$g(t) = \\begin{cases}\\dfrac{t}{\\tau_{\\text{in}}}\\exp\\!\\left(1-\\dfrac{t}{\\tau_{\\text{in}}}\\right), & t \\ge 0 \\\\ 0, & t < 0\\end{cases}$$ which has unitless peak $1$ at $t=\\tau_{\\text{in}}$. Then set $$J_{\\text{in},s}(t) = V_{\\text{in},s}\\, g(t), \\quad J_{\\text{in},d}(t) = V_{\\text{in},d}\\, g(t),$$ where $V_{\\text{in},s}$ and $V_{\\text{in},d}$ are influx amplitudes in $\\mu\\text{M}$/s.\n- Let $k_{\\text{out},s}$ and $k_{\\text{out},d}$ be first-order extrusion rate constants (in s$^{-1}$), modeling PMCA and NCX as $J_{\\text{out},x} = k_{\\text{out},x}\\,(c_x - c_0)$ for compartment $x\\in\\{s,d\\}$.\n- Let $\\kappa_s$ and $\\kappa_d$ be dimensionless buffering capacities for soma and dendrite, respectively. Fast buffering reduces effective time derivatives by a factor $(1+\\kappa_x)$ in each compartment.\n- Let $D_{sd}$ be the effective diffusive coupling rate (in s$^{-1}$) between compartments, generating fluxes $J_{\\text{diff},s} = D_{sd}\\,(c_d - c_s)$ and $J_{\\text{diff},d} = D_{sd}\\,(c_s - c_d)$.\n- The resulting system is\n$$\\frac{dc_s}{dt} = \\frac{1}{1+\\kappa_s}\\left[J_{\\text{in},s}(t) - k_{\\text{out},s}\\,\\big(c_s-c_0\\big) + D_{sd}\\,\\big(c_d - c_s\\big)\\right],$$\n$$\\frac{dc_d}{dt} = \\frac{1}{1+\\kappa_d}\\left[J_{\\text{in},d}(t) - k_{\\text{out},d}\\,\\big(c_d-c_0\\big) + D_{sd}\\,\\big(c_s - c_d\\big)\\right],$$\nwith initial condition $c_s(0)=c_d(0)=c_0$.\n\nMetrics to compute from the soma trace $c_s(t)$:\n- Peak amplitude above baseline: $$A = \\max_{t\\in[0,T_{\\max}]} c_s(t) - c_0,$$ expressed in $\\mu\\text{M}$.\n- Decay time to a fraction $1/e$ of the peak: If the peak occurs at time $t_{\\text{peak}}$ with amplitude $A$, then set a threshold $c_{\\text{thr}} = c_0 + A/e$. The decay time is $$\\tau_{\\text{decay}} = t_{\\text{cross}} - t_{\\text{peak}},$$ where $t_{\\text{cross}}$ is the first time $t\\ge t_{\\text{peak}}$ such that $c_s(t) \\le c_{\\text{thr}}$. Express $\\tau_{\\text{decay}}$ in seconds. If the threshold is not reached within the simulation horizon $[0,T_{\\max}]$, treat this as not measurable.\n\nSensitivity definition:\n- For a scalar metric $M$ (either $A$ or $\\tau_{\\text{decay}}$) and a parameter $p$, define the dimensionless local sensitivity coefficient as $$S_M(p) = \\frac{p}{M}\\,\\frac{dM}{dp},$$ approximated numerically by a central finite difference with a small relative perturbation $\\delta>0$:\n$$S_M(p) \\approx \\frac{p}{M(p)}\\cdot \\frac{M\\big(p(1+\\delta)\\big) - M\\big(p(1-\\delta)\\big)}{2\\,\\delta\\,p} = \\frac{M\\big(p(1+\\delta)\\big) - M\\big(p(1-\\delta)\\big)}{2\\,\\delta\\,M(p)}.$$\nCompute one-at-a-time sensitivities by perturbing a single parameter and holding the others fixed at baseline.\n\nSimulation protocol and constants:\n- Use $c_0 = 0.1\\,\\mu\\text{M}$ (write this as $c_0 = 0.1$ in the code, since concentrations are in $\\mu\\text{M}$).\n- Use $\\tau_{\\text{in}} = 0.02\\,\\text{s}$ (write this as $\\tau_{\\text{in}} = 0.02$).\n- Simulate on $[0,T_{\\max}]$ with $T_{\\max} = 4.0\\,\\text{s}$ (write this as $T_{\\max} = 4.0$).\n- Use a relative perturbation $\\delta = 0.05$ (write this as $\\delta = 0.05$).\n- Use initial conditions $c_s(0)=c_d(0)=c_0$.\n\nParameter vector and indexing:\n- The parameter vector is ordered as $$\\mathbf{p} = \\big[V_{\\text{in},s},\\, V_{\\text{in},d},\\, k_{\\text{out},s},\\, k_{\\text{out},d},\\, \\kappa_s,\\, \\kappa_d,\\, D_{sd}\\big].$$\n- Use zero-based indexing: index $0$ for $V_{\\text{in},s}$, $1$ for $V_{\\text{in},d}$, $2$ for $k_{\\text{out},s}$, $3$ for $k_{\\text{out},d}$, $4$ for $\\kappa_s$, $5$ for $\\kappa_d$, $6$ for $D_{sd}$.\n\nTest suite:\nProvide the following four baseline parameter sets (all concentrations in $\\mu\\text{M}$, times in s):\n- Case $1$: $[6.0,\\,3.0,\\,3.0,\\,3.0,\\,20.0,\\,20.0,\\,1.0]$.\n- Case $2$: $[6.0,\\,6.0,\\,3.5,\\,3.5,\\,60.0,\\,60.0,\\,10.0]$.\n- Case $3$: $[6.0,\\,3.0,\\,3.0,\\,3.0,\\,300.0,\\,50.0,\\,1.0]$.\n- Case $4$: $[6.0,\\,3.0,\\,3.0,\\,0.5,\\,80.0,\\,50.0,\\,2.0]$.\n\nRequired tasks for your program:\n- For each test case, simulate the model, compute the soma peak amplitude $A$ and the decay time $\\tau_{\\text{decay}}$ as defined above.\n- Compute the one-at-a-time, dimensionless local sensitivities $S_A(p_i)$ and $S_{\\tau}(p_i)$ for all seven parameters $p_i$ using the central difference approximation with $\\delta$.\n- Identify, for each metric, the index $i$ of the single parameter with the largest absolute sensitivity magnitude.\n\nFinal output specification:\n- Your program should produce a single line of output containing the results as a comma-separated Python-style list of integers. Concatenate, for each test case in the order given above, two integers: first the index of the parameter with the largest $|S_A|$, then the index of the parameter with the largest $|S_{\\tau}|$. For example, the output should have the form $$[i_{A,1},i_{\\tau,1},i_{A,2},i_{\\tau,2},i_{A,3},i_{\\tau,3},i_{A,4},i_{\\tau,4}],$$ where each $i$ is an integer index in $\\{0,1,2,3,4,5,6\\}$.", "solution": "The user-provided problem statement has been subjected to rigorous validation.\n\n### Step 1: Extract Givens\n\n- **Model Variables**: Free cytosolic calcium concentrations $c_s(t)$ and $c_d(t)$ in soma and dendrite, respectively.\n- **Model Equations**:\n$$\n\\frac{dc_s}{dt} = \\frac{1}{1+\\kappa_s}\\left[J_{\\text{in},s}(t) - k_{\\text{out},s}\\,\\big(c_s-c_0\\big) + D_{sd}\\,\\big(c_d - c_s\\big)\\right]\n$$\n$$\n\\frac{dc_d}{dt} = \\frac{1}{1+\\kappa_d}\\left[J_{\\text{in},d}(t) - k_{\\text{out},d}\\,\\big(c_d-c_0\\big) + D_{sd}\\,\\big(c_s - c_d\\big)\\right]\n$$\n- **Influx Term**:\n$J_{\\text{in},x}(t) = V_{\\text{in},x}\\, g(t)$, for $x \\in \\{s, d\\}$, where the temporal profile is given by the $\\alpha$-function:\n$$\ng(t) = \\begin{cases}\\dfrac{t}{\\tau_{\\text{in}}}\\exp\\!\\left(1-\\dfrac{t}{\\tau_{\\text{in}}}\\right), & t \\ge 0 \\\\ 0, & t < 0\\end{cases}\n$$\n- **Initial Conditions**: $c_s(0) = c_0$, $c_d(0) = c_0$.\n- **Constants**:\n    - Resting calcium concentration: $c_0 = 0.1\\,\\mu\\text{M}$.\n    - Influx time constant: $\\tau_{\\text{in}} = 0.02\\,\\text{s}$.\n    - Simulation time horizon: $T_{\\max} = 4.0\\,\\text{s}$.\n    - Relative perturbation for sensitivity: $\\delta = 0.05$.\n- **Parameter Vector**: $\\mathbf{p} = \\big[V_{\\text{in},s},\\, V_{\\text{in},d},\\, k_{\\text{out},s},\\, k_{\\text{out},d},\\, \\kappa_s,\\, \\kappa_d,\\, D_{sd}\\big]$. Parameter indices are zero-based from $0$ to $6$.\n- **Metrics**:\n    - Peak amplitude: $A = \\max_{t\\in[0,T_{\\max}]} c_s(t) - c_0$.\n    - Decay time: $\\tau_{\\text{decay}} = t_{\\text{cross}} - t_{\\text{peak}}$, where $t_{\\text{peak}}$ is the time of the peak, and $t_{\\text{cross}}$ is the first time $t \\ge t_{\\text{peak}}$ such that $c_s(t) \\le c_0 + A/e$.\n- **Sensitivity Definition**:\n$$\nS_M(p) \\approx \\frac{M\\big(p(1+\\delta)\\big) - M\\big(p(1-\\delta)\\big)}{2\\,\\delta\\,M(p)}\n$$\n- **Test Cases (Baseline Parameter Sets)**:\n    - Case $1$: $[6.0,\\,3.0,\\,3.0,\\,3.0,\\,20.0,\\,20.0,\\,1.0]$.\n    - Case $2$: $[6.0,\\,6.0,\\,3.5,\\,3.5,\\,60.0,\\,60.0,\\,10.0]$.\n    - Case $3$: $[6.0,\\,3.0,\\,3.0,\\,3.0,\\,300.0,\\,50.0,\\,1.0]$.\n    - Case $4$: $[6.0,\\,3.0,\\,3.0,\\,0.5,\\,80.0,\\,50.0,\\,2.0]$.\n- **Task**: For each test case, identify the index of the parameter with the largest absolute sensitivity for peak amplitude $A$ and for decay time $\\tau_{\\text{decay}}$.\n- **Output Format**: A single line Python-style list of 8 integers: $[i_{A,1},i_{\\tau,1},i_{A,2},i_{\\tau,2},i_{A,3},i_{\\tau,3},i_{A,4},i_{\\tau,4}]$.\n\n### Step 2: Validate Using Extracted Givens\n\n- **Scientifically Grounded**: The problem describes a standard two-compartment model for calcium dynamics, based on principles of mass balance, first-order kinetics for ion transport, and diffusive coupling (Fick's law). The fast-buffering approximation and the $\\alpha$-function for synaptic input are common and valid simplifications in computational neuroscience. The model is scientifically sound.\n- **Well-Posed**: The problem is a system of two coupled, linear, first-order ordinary differential equations (ODEs) with a time-dependent forcing term. With specified initial conditions, a unique solution exists for any given parameter set. The metrics and sensitivity analysis are defined unambiguously. The problem is well-posed.\n- **Objective**: All terms, variables, parameters, and tasks are defined with mathematical precision. The problem is objective and free from subjective interpretation.\n- **Incomplete or Contradictory Setup**: The problem is self-contained. All necessary equations, constants, parameter values, initial conditions, and procedural definitions are provided. There are no contradictions.\n- **Unrealistic or Infeasible**: The parameter values are within physiologically plausible ranges for simplified neuronal models. The setup is feasible.\n\n### Step 3: Verdict and Action\n\nThe problem is valid. It is scientifically grounded, well-posed, objective, and complete. A solution will be constructed.\n\nThe task requires performing a one-at-a-time local sensitivity analysis for a system of ODEs. The overall computational procedure is as follows:\n1.  For each of the four baseline parameter sets provided, a series of numerical simulations will be executed.\n2.  The core of the procedure is a function that, for a given parameter vector $\\mathbf{p} = [p_0, \\dots, p_6]$, solves the system of ODEs and computes the two output metrics: peak amplitude ($A$) and decay time ($\\tau_{\\text{decay}}$) of the somatic calcium concentration, $c_s(t)$.\n3.  The system of ODEs is given by:\n    $$\n    \\frac{d}{dt}\\begin{pmatrix} c_s \\\\ c_d \\end{pmatrix} = \\begin{pmatrix} \\frac{1}{1+p_4} \\left[ p_0 g(t) - p_2(c_s - c_0) + p_6(c_d - c_s) \\right] \\\\ \\frac{1}{1+p_5} \\left[ p_1 g(t) - p_3(c_d - c_0) + p_6(c_s - c_d) \\right] \\end{pmatrix}\n    $$\n    with initial conditions $c_s(0) = c_d(0) = c_0$. This system will be solved numerically over the time interval $[0, T_{\\max}]$ using a standard ODE solver, specifically `scipy.integrate.solve_ivp`, which is suitable for such non-stiff systems.\n4.  From the resulting somatic trace $c_s(t)$, the metrics are calculated:\n    -   The peak time $t_{\\text{peak}}$ is found as $\\arg\\max_t c_s(t)$.\n    -   The peak amplitude is $A = c_s(t_{\\text{peak}}) - c_0$.\n    -   The threshold for decay is $c_{\\text{thr}} = c_0 + A/e$.\n    -   The crossing time $t_{\\text{cross}}$ is the first time $t \\ge t_{\\text{peak}}$ where $c_s(t) \\le c_{\\text{thr}}$.\n    -   The decay time is $\\tau_{\\text{decay}} = t_{\\text{cross}} - t_{\\text{peak}}$. If the threshold is not crossed by $T_{\\max}$, this metric is considered not measurable.\n5.  With the baseline parameter vector $\\mathbf{p}_{\\text{base}}$, the baseline metrics $A_{\\text{base}}$ and $\\tau_{\\text{decay},\\text{base}}$ are computed.\n6.  The sensitivity analysis proceeds by iterating through each parameter $p_i$, for $i \\in \\{0, 1, \\dots, 6\\}$. For each $p_i$, two perturbed parameter vectors are created:\n    -   $\\mathbf{p}^+$, where $p_i$ is replaced by $p_i(1+\\delta)$.\n    -   $\\mathbf{p}^-$, where $p_i$ is replaced by $p_i(1-\\delta)$.\n7.  The metrics are computed for each perturbed vector, yielding $(A^+, \\tau_{\\text{decay}}^+) $ and $(A^-, \\tau_{\\text{decay}}^-)$.\n8.  The dimensionless local sensitivity coefficients for $A$ and $\\tau_{\\text{decay}}$ with respect to parameter $p_i$ are then approximated using the central finite difference formula:\n    $$\n    S_A(p_i) \\approx \\frac{A^+ - A^-}{2\\,\\delta\\,A_{\\text{base}}}\n    $$\n    $$\n    S_{\\tau}(p_i) \\approx \\frac{\\tau_{\\text{decay}}^+ - \\tau_{\\text{decay}}^-}{2\\,\\delta\\,\\tau_{\\text{decay},\\text{base}}}\n    $$\n9.  After computing the seven sensitivities for each metric ($S_A(p_0), \\dots, S_A(p_6)$ and $S_{\\tau}(p_0), \\dots, S_{\\tau}(p_6)$), the absolute values are taken.\n10. The index of the parameter that yields the maximum absolute sensitivity is identified for both $A$ and $\\tau_{\\text{decay}}$. For a metric $M$, this is $\\arg\\max_i |S_M(p_i)|$.\n11. This process is repeated for all four test cases. The resulting eight indices are collected and formatted into the required output string.\nThe implementation will be encapsulated in a single Python script, adhering to the specified environment and libraries.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.integrate import solve_ivp\n\ndef solve():\n    \"\"\"\n    Performs a one-at-a-time sensitivity analysis on a two-compartment neuronal\n    calcium model for four different parameter sets.\n    \"\"\"\n\n    # --- Define constants and test cases ---\n    c0 = 0.1  # Resting [Ca2+], uM\n    tau_in = 0.02  # Influx time constant, s\n    t_max = 4.0  # Simulation time horizon, s\n    delta = 0.05  # Relative perturbation for sensitivity analysis\n\n    test_cases = [\n        [6.0, 3.0, 3.0, 3.0, 20.0, 20.0, 1.0],   # Case 1\n        [6.0, 6.0, 3.5, 3.5, 60.0, 60.0, 10.0],  # Case 2\n        [6.0, 3.0, 3.0, 3.0, 300.0, 50.0, 1.0],  # Case 3\n        [6.0, 3.0, 3.0, 0.5, 80.0, 50.0, 2.0],   # Case 4\n    ]\n\n    # --- Helper function for influx time course ---\n    def influx_g(t):\n        if t < 0:\n            return 0.0\n        # The alpha-function is implemented such that its peak is 1.\n        # This requires the factor exp(1-t/tau_in)\n        return (t / tau_in) * np.exp(1 - t / tau_in)\n\n    # --- ODE system definition ---\n    def model(t, y, params):\n        cs, cd = y\n        v_in_s, v_in_d, k_out_s, k_out_d, kappa_s, kappa_d, d_sd = params\n        \n        g_t = influx_g(t)\n        \n        # dcs/dt\n        dcs_dt = (1 / (1 + kappa_s)) * (\n            v_in_s * g_t - k_out_s * (cs - c0) + d_sd * (cd - cs)\n        )\n        # dcd/dt\n        dcd_dt = (1 / (1 + kappa_d)) * (\n            v_in_d * g_t - k_out_d * (cd - c0) + d_sd * (cs - cd)\n        )\n        \n        return [dcs_dt, dcd_dt]\n\n    # --- Function to run simulation and compute metrics ---\n    def get_metrics(current_params):\n        sol = solve_ivp(\n            model,\n            [0, t_max],\n            [c0, c0],\n            args=(current_params,),\n            dense_output=True,\n            method='RK45',\n            t_eval=np.linspace(0, t_max, 2000) # Ensure sufficient time resolution\n        )\n        t = sol.t\n        cs = sol.y[0]\n\n        # Metric 1: Peak amplitude A\n        if len(cs) == 0:\n            return np.nan, np.nan\n        \n        peak_idx = np.argmax(cs)\n        t_peak = t[peak_idx]\n        c_peak = cs[peak_idx]\n        amplitude = c_peak - c0\n\n        # Metric 2: Decay time tau_decay\n        if amplitude <= 0: # Should not happen with positive influx\n            return amplitude, np.nan\n            \n        threshold = c0 + amplitude / np.e\n        \n        # Find first time t >= t_peak where cs(t) <= threshold\n        decay_indices = np.where((t >= t_peak) & (cs <= threshold))[0]\n        \n        if len(decay_indices) == 0:\n            # Threshold not reached\n            tau_decay = np.nan\n        else:\n            t_cross_idx = decay_indices[0]\n            \n            # Linear interpolation for better accuracy\n            if t_cross_idx > 0:\n                t1, c1 = t[t_cross_idx - 1], cs[t_cross_idx - 1]\n                t2, c2 = t[t_cross_idx], cs[t_cross_idx]\n                if c1 - c2 > 1e-9: # Avoid division by zero\n                    t_cross = t1 + (t2 - t1) * (threshold - c1) / (c2 - c1)\n                else:\n                    t_cross = t2\n            else:\n                 t_cross = t[t_cross_idx]\n            \n            tau_decay = t_cross - t_peak\n\n        return amplitude, tau_decay\n\n    # --- Main analysis loop ---\n    final_results = []\n    \n    for base_params in test_cases:\n        # Calculate baseline metrics\n        A_base, tau_base = get_metrics(base_params)\n\n        sens_A = []\n        sens_tau = []\n\n        for i in range(len(base_params)):\n            # Perturb parameter p_i\n            p_val = base_params[i]\n            \n            # Positive perturbation\n            params_plus = list(base_params)\n            params_plus[i] = p_val * (1 + delta)\n            A_plus, tau_plus = get_metrics(params_plus)\n\n            # Negative perturbation\n            params_minus = list(base_params)\n            params_minus[i] = p_val * (1 - delta)\n            A_minus, tau_minus = get_metrics(params_minus)\n            \n            # Calculate sensitivity for Amplitude\n            if A_base > 1e-9 and not np.isnan(A_plus) and not np.isnan(A_minus):\n                s_A = (A_plus - A_minus) / (2 * delta * A_base)\n            else:\n                s_A = 0.0\n            sens_A.append(s_A)\n\n            # Calculate sensitivity for Decay Time\n            if tau_base > 1e-9 and not np.isnan(tau_plus) and not np.isnan(tau_minus):\n                s_tau = (tau_plus - tau_minus) / (2 * delta * tau_base)\n            else:\n                s_tau = 0.0 # If baseline or perturbed is invalid, sensitivity is zero\n            sens_tau.append(s_tau)\n\n        # Find index of parameter with max absolute sensitivity\n        # Use np.nanargmax to handle potential NaNs safely, though logic above avoids them\n        idx_max_sens_A = np.argmax(np.abs(sens_A))\n        idx_max_sens_tau = np.argmax(np.abs(sens_tau))\n        \n        final_results.extend([idx_max_sens_A, idx_max_sens_tau])\n\n    # --- Format and print final output ---\n    print(f\"[{','.join(map(str, final_results))}]\")\n\n\nsolve()\n```", "id": "2746415"}]}