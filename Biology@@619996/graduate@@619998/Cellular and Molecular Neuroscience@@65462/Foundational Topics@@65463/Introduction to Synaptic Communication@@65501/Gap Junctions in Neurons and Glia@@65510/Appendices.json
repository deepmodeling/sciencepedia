{"hands_on_practices": [{"introduction": "Understanding electrical synapses begins with quantifying their strength. The steady-state coupling coefficient, $k$, is a fundamental experimental metric that describes how effectively voltage spreads between two coupled cells. This exercise guides you through deriving the relationship between this macroscopic measurement and the underlying biophysical parameter—the total gap junctional conductance, $g_j$—using first principles like Kirchhoff's and Ohm's laws. By completing this practice [@problem_id:2712420], you will develop the essential skill of translating experimental data from a simple, symmetric two-cell system into a core property of the electrical synapse.", "problem": "Two identical neurons are coupled by a gap junction (GJ), modeled as an ohmic conductance connecting the two otherwise isopotential cells. Each neuron is represented by a single passive compartment with membrane conductance $g_{m}$ to ground. A small hyperpolarizing current step of amplitude $I$ is injected into neuron $1$, and the steady-state voltage deflections $\\Delta V_{1}$ and $\\Delta V_{2}$ are recorded in neurons $1$ and $2$, respectively. The steady-state coupling coefficient is defined as $k \\equiv \\Delta V_{2}/\\Delta V_{1}$.\n\nAssume the following conditions hold:\n- The system operates in the linear, ohmic regime (small signal), so that Ohm’s law and Kirchhoff’s current law apply at steady state.\n- The two neurons are identical and the gap junction does not rectify.\n- Capacitive currents are negligible at steady state.\n- The single-cell input resistance $R_{\\text{in}}$ has been separately measured in the absence of coupling and equals $R_{\\text{in}} = 1/g_{m}$.\n\nFrom first principles, starting with Kirchhoff’s current law at each node and Ohm’s law, derive an expression for the gap junctional conductance $g_{j}$ in terms of the coupling coefficient $k$ and the membrane conductance $g_{m}$. Then compute $g_{j}$ for the measured values $k = 0.12$ and $R_{\\text{in}} = 300\\ \\mathrm{M}\\Omega$. Finally, estimate the mean number of simultaneously open GJ channels $N_{\\text{mean}}$ assuming a unitary (single-channel) conductance $\\gamma_{u} = 15\\ \\mathrm{pS}$ that is voltage independent in this regime.\n\nInstructions:\n- Express $g_{j}$ in $\\mathrm{nS}$ and $N_{\\text{mean}}$ as a dimensionless number.\n- Round both final numerical results to three significant figures.\n- Report your final answers together as a single row vector $\\big[g_{j}\\ \\text{in}\\ \\mathrm{nS},\\ N_{\\text{mean}}\\big]$.", "solution": "The problem as stated is scientifically grounded, well-posed, and objective. It presents a standard, simplified biophysical model of two electrically coupled cells and requests the derivation and calculation of physical parameters based on fundamental principles. The provided data are consistent and physically plausible. Therefore, a solution will be provided.\n\nThe system is modeled as a simple electrical circuit with two nodes, representing the two neurons. Let the steady-state voltage deflections from rest for neuron $1$ and neuron $2$ be $\\Delta V_{1}$ and $\\Delta V_{2}$, respectively. The reference potential (ground) is the extracellular space.\n\nAccording to the problem description:\n- Each neuron has a membrane conductance $g_{m}$ connecting its intracellular potential to ground. The corresponding resistance is the single-cell input resistance, $R_{\\text{in}} = 1/g_{m}$.\n- The two neurons are connected by a gap junction with conductance $g_{j}$.\n- A constant current $I$ is injected into neuron $1$.\n- At steady state, capacitive currents are zero.\n\nWe apply Kirchhoff's Current Law (KCL) to each node. The sum of currents leaving a node must be zero.\n\nFor node $1$ (neuron $1$), the injected current $I$ enters the node. The currents leaving the node are the current through the membrane, $I_{m1}$, and the current flowing through the gap junction to neuron $2$, $I_{j}$.\n- The membrane current is given by Ohm's law: $I_{m1} = g_{m} \\Delta V_{1}$.\n- The junctional current is also given by Ohm's law: $I_{j} = g_{j} (\\Delta V_{1} - \\Delta V_{2})$.\n\nKCL at node $1$ states that the total current entering equals the total current leaving:\n$$I = I_{m1} + I_{j}$$\n$$I = g_{m} \\Delta V_{1} + g_{j} (\\Delta V_{1} - \\Delta V_{2}) \\quad (1)$$\n\nFor node $2$ (neuron $2$), no external current is injected. The current entering from neuron $1$ through the gap junction, $-I_{j} = g_{j} (\\Delta V_{1} - \\Delta V_{2})$, must equal the current leaving through the membrane, $I_{m2}$.\n- The membrane current is $I_{m2} = g_{m} \\Delta V_{2}$.\n\nKCL at node $2$ gives:\n$$g_{j} (\\Delta V_{1} - \\Delta V_{2}) = g_{m} \\Delta V_{2} \\quad (2)$$\n\nOur objective is to derive an expression for the junctional conductance, $g_{j}$, in terms of the membrane conductance, $g_{m}$, and the coupling coefficient, $k$. The coupling coefficient is defined as $k \\equiv \\Delta V_{2} / \\Delta V_{1}$.\n\nEquation $(2)$ contains all the necessary variables. We can rearrange it to solve for $g_{j}$. Since a current $I$ is injected and all conductances are finite and positive, it must be that $\\Delta V_{1} \\neq 0$. We can therefore divide Equation $(2)$ by $\\Delta V_{1}$:\n$$g_{j} \\left( \\frac{\\Delta V_{1}}{\\Delta V_{1}} - \\frac{\\Delta V_{2}}{\\Delta V_{1}} \\right) = g_{m} \\frac{\\Delta V_{2}}{\\Delta V_{1}}$$\nSubstituting the definition of the coupling coefficient $k$:\n$$g_{j} (1 - k) = g_{m} k$$\nSolving for $g_{j}$, we obtain the desired expression:\n$$g_{j} = g_{m} \\frac{k}{1-k}$$\nThis is the first part of the required derivation.\n\nNext, we must compute the numerical value of $g_{j}$. We are given $k = 0.12$ and $R_{\\text{in}} = 300\\ \\mathrm{M}\\Omega$.\nFirst, we calculate the membrane conductance $g_{m}$:\n$$g_{m} = \\frac{1}{R_{\\text{in}}} = \\frac{1}{300 \\times 10^{6}\\ \\Omega} = \\frac{1}{3} \\times 10^{-8}\\ \\mathrm{S}$$\nThe result is required in nanoSiemens ($\\mathrm{nS}$), where $1\\ \\mathrm{nS} = 10^{-9}\\ \\mathrm{S}$.\n$$g_{m} = \\frac{1}{3} \\times 10 \\times 10^{-9}\\ \\mathrm{S} = \\frac{10}{3}\\ \\mathrm{nS}$$\nNow, we substitute the values of $g_{m}$ and $k$ into our derived expression for $g_{j}$:\n$$g_{j} = \\left(\\frac{10}{3}\\ \\mathrm{nS}\\right) \\frac{0.12}{1 - 0.12} = \\left(\\frac{10}{3}\\ \\mathrm{nS}\\right) \\frac{0.12}{0.88}$$\n$$g_{j} = \\left(\\frac{10}{3}\\ \\mathrm{nS}\\right) \\frac{12}{88} = \\left(\\frac{10}{3}\\ \\mathrm{nS}\\right) \\frac{3}{22} = \\frac{10}{22}\\ \\mathrm{nS} = \\frac{5}{11}\\ \\mathrm{nS}$$\nAs a decimal, this is $g_{j} \\approx 0.454545...\\ \\mathrm{nS}$. Rounding to three significant figures, we get:\n$$g_{j} \\approx 0.455\\ \\mathrm{nS}$$\n\nFinally, we must estimate the mean number of simultaneously open gap junction channels, $N_{\\text{mean}}$. The total junctional conductance $g_{j}$ is the product of the number of open channels and the unitary conductance of a single channel, $\\gamma_{u}$.\n$$g_{j} = N_{\\text{mean}} \\cdot \\gamma_{u}$$\nTherefore, $N_{\\text{mean}} = g_{j} / \\gamma_{u}$.\nWe are given $\\gamma_{u} = 15\\ \\mathrm{pS} = 15 \\times 10^{-12}\\ \\mathrm{S}$.\nTo avoid intermediate rounding errors, we use the exact fractional value for $g_{j}$:\n$$g_{j} = \\frac{5}{11}\\ \\mathrm{nS} = \\frac{5}{11} \\times 10^{-9}\\ \\mathrm{S}$$\nNow we compute $N_{\\text{mean}}$:\n$$N_{\\text{mean}} = \\frac{\\frac{5}{11} \\times 10^{-9}\\ \\mathrm{S}}{15 \\times 10^{-12}\\ \\mathrm{S}} = \\frac{5}{11 \\times 15} \\times 10^{3} = \\frac{1}{11 \\times 3} \\times 1000 = \\frac{1000}{33}$$\nAs a decimal, this is $N_{\\text{mean}} \\approx 30.3030...\\ $. Rounding to three significant figures, we find:\n$$N_{\\text{mean}} \\approx 30.3$$\nThe number of channels is a dimensionless quantity.\n\nThe final answer requires a row vector containing the numerical value of $g_{j}$ in $\\mathrm{nS}$ and the value of $N_{\\text{mean}}$, both rounded to three significant figures.\nThe values are $0.455$ and $30.3$.", "answer": "$$\\boxed{\\begin{pmatrix} 0.455 & 30.3 \\end{pmatrix}}$$", "id": "2712420"}, {"introduction": "While models often assume identical cells for simplicity, biological reality is filled with heterogeneity. This practice explores the important consequences of asymmetry in electrically coupled systems. Starting from a two-cell model with different membrane properties ($g_m$ and $C$), you will analyze why a symmetric, non-rectifying gap junction can still produce asymmetric voltage transfer. This thought experiment [@problem_id:2712415] is crucial for building intuition about how a cell's intrinsic properties, such as its leakiness and size, shape its communication with network partners.", "problem": "Two electrotonically coupled neurons, neuron $1$ and neuron $2$, are connected by a non-rectifying, ohmic gap junction of constant conductance $g_{j}$. Each neuron is modeled as a single isopotential compartment consisting of a membrane leak conductance $g_{m}$ in parallel with a membrane capacitance $C$ to ground. Assume linear subthreshold behavior about the same resting potential, no voltage dependence of any conductance, and no ionic batteries. The parameter values are: neuron $1$ has $g_{m1} = 10\\,\\mathrm{nS}$ and $C_{1} = 50\\,\\mathrm{pF}$; neuron $2$ has $g_{m2} = 5\\,\\mathrm{nS}$ and $C_{2} = 100\\,\\mathrm{pF}$; the gap junction has $g_{j} = 5\\,\\mathrm{nS}$. Consider two experiments:\n\n(i) A long (duration $\\gg \\max\\{C_{1}/g_{m1},\\,C_{2}/g_{m2}\\}$) hyperpolarizing step current is injected into neuron $1$ producing a steady voltage change $\\Delta V_{1}$ in neuron $1$ and a coupled steady voltage change $\\Delta V_{2}$ in neuron $2$. Define the forward coupling coefficient $k_{\\mathrm{forward}} = \\Delta V_{2}/\\Delta V_{1}$.\n\n(ii) The same long step is injected into neuron $2$ producing changes $\\Delta V_{2}'$ (in neuron $2$) and $\\Delta V_{1}'$ (in neuron $1$). Define the reverse coupling coefficient $k_{\\mathrm{reverse}} = \\Delta V_{1}'/\\Delta V_{2}'$.\n\nStarting only from the linear resistor-capacitor description of each membrane, Ohm’s law, and Kirchhoff’s current law (KCL), determine which direction has the stronger steady-state voltage transfer and predict which postsynaptic response rises more slowly to its asymptote. Choose the single best statement.\n\nA. $k_{\\mathrm{forward}} > k_{\\mathrm{reverse}}$ because steady-state voltage division across the gap junction depends on the membrane conductance of the receiving cell; the postsynaptic response in the forward direction (in neuron $2$) rises more slowly because neuron $2$ has larger $C_{2}$ and smaller $g_{m2}$.\n\nB. $k_{\\mathrm{reverse}} > k_{\\mathrm{forward}}$ because the source neuron in the reverse direction has higher input resistance and thus generates a larger driving voltage; the postsynaptic response in the reverse direction (in neuron $1$) rises more slowly because neuron $1$ has smaller $C_{1}$.\n\nC. $k_{\\mathrm{forward}} = k_{\\mathrm{reverse}}$ because a non-rectifying gap junction is symmetric; both postsynaptic responses rise with the same time course because only the junction conductance $g_{j}$ matters.\n\nD. $k_{\\mathrm{reverse}} > k_{\\mathrm{forward}}$ because smaller $g_{m2}$ reduces loading when current is injected into neuron $2$; the postsynaptic response in the reverse direction rises more slowly because neuron $1$ has larger $g_{m1}$.", "solution": "The problem statement is first validated to ensure it is scientifically sound, well-posed, and contains sufficient information for a unique solution.\n\n### Step 1: Extract Givens\n- Neuron $1$ parameters: membrane leak conductance $g_{m1} = 10\\,\\mathrm{nS}$, membrane capacitance $C_{1} = 50\\,\\mathrm{pF}$.\n- Neuron $2$ parameters: membrane leak conductance $g_{m2} = 5\\,\\mathrm{nS}$, membrane capacitance $C_{2} = 100\\,\\mathrm{pF}$.\n- Gap junction parameters: non-rectifying, ohmic conductance $g_{j} = 5\\,\\mathrm{nS}$.\n- Model: Each neuron is a single isopotential RC circuit. The two neurons are connected by the conductance $g_{j}$.\n- Assumptions: Linear subthreshold behavior, common resting potential (taken as $0\\,\\mathrm{V}$), constant conductances, no ionic batteries.\n- Experiment (i): A long step current $I_{inj}$ is injected into neuron $1$, resulting in steady-state voltage changes $\\Delta V_{1}$ and $\\Delta V_{2}$. The forward coupling coefficient is $k_{\\mathrm{forward}} = \\Delta V_{2}/\\Delta V_{1}$.\n- Experiment (ii): The same step current $I_{inj}$ is injected into neuron $2$, resulting in steady-state voltage changes $\\Delta V_{2}'$ and $\\Delta V_{1}'$. The reverse coupling coefficient is $k_{\\mathrm{reverse}} = \\Delta V_{1}'/\\Delta V_{2}'$.\n\n### Step 2: Validate Using Extracted Givens\n- **Scientific Grounding:** The problem uses a standard and fundamental model in computational neuroscience (the passive RC compartment model) to describe electrically coupled neurons. The concepts and parameters ($g_m$, $C$, $g_j$, coupling coefficient) are central to the field. The parameter values are biophysically realistic. The problem is scientifically grounded.\n- **Well-Posedness:** The problem is well-posed. It provides all necessary parameters and clear definitions to determine the steady-state coupling coefficients and to analyze the transient dynamics. A unique solution exists.\n- **Objectivity:** The problem is stated in precise, objective language without ambiguity or subjective claims.\n\n**Verdict:** The problem is valid. The solution process may proceed.\n\n### Derivation\n\nThe analysis is divided into two parts: steady-state coupling and transient dynamics.\n\n**Part 1: Steady-State Coupling Coefficients**\n\nAt steady state (for a \"long\" current injection, where $t \\rightarrow \\infty$), the voltages are constant, so the currents through the capacitors are zero ($I_C = C \\frac{dV}{dt} = 0$). The circuit behaves as a purely resistive network. We apply Kirchhoff's Current Law (KCL) at each neuronal node. The voltages $V_1$ and $V_2$ represent the steady-state deviations from the resting potential.\n\n**Forward Coupling ($k_{\\mathrm{forward}}$)**\nCurrent $I_{inj}$ is injected into neuron $1$.\nKCL at node $1$: $I_{inj} = I_{m1} + I_j = g_{m1}V_1 + g_j(V_1 - V_2)$\nKCL at node $2$: $I_j = I_{m2} \\implies g_j(V_1 - V_2) = g_{m2}V_2$\n\nFrom the KCL equation at node $2$, we solve for the ratio $V_2/V_1$:\n$g_j V_1 = (g_{m2} + g_j)V_2$\n$$k_{\\mathrm{forward}} = \\frac{V_2}{V_1} = \\frac{g_j}{g_{m2} + g_j}$$\nThis shows that the coupling coefficient is a voltage divider ratio, where the voltage at neuron $1$ is divided between the junction conductance $g_j$ and the postsynaptic membrane conductance $g_{m2}$.\n\nPlugging in the given values:\n$g_j = 5\\,\\mathrm{nS}$\n$g_{m2} = 5\\,\\mathrm{nS}$\n$$k_{\\mathrm{forward}} = \\frac{5\\,\\mathrm{nS}}{5\\,\\mathrm{nS} + 5\\,\\mathrm{nS}} = \\frac{5}{10} = 0.5$$\n\n**Reverse Coupling ($k_{\\mathrm{reverse}}$)**\nCurrent $I_{inj}$ is injected into neuron $2$. The logic is symmetric.\nKCL at node $2$: $I_{inj} = I_{m2}' + I_j' = g_{m2}V_2' + g_j(V_2' - V_1')$\nKCL at node $1$: $I_j' = I_{m1}' \\implies g_j(V_2' - V_1') = g_{m1}V_1'$\n\nFrom the KCL equation at node $1$, we solve for the ratio $V_1'/V_2'$:\n$g_j V_2' = (g_{m1} + g_j)V_1'$\n$$k_{\\mathrm{reverse}} = \\frac{V_1'}{V_2'} = \\frac{g_j}{g_{m1} + g_j}$$\n\nPlugging in the given values:\n$g_j = 5\\,\\mathrm{nS}$\n$g_{m1} = 10\\,\\mathrm{nS}$\n$$k_{\\mathrm{reverse}} = \\frac{5\\,\\mathrm{nS}}{10\\,\\mathrm{nS} + 5\\,\\mathrm{nS}} = \\frac{5}{15} = \\frac{1}{3} \\approx 0.333$$\n\n**Comparison of Coefficients**\nWe find that $k_{\\mathrm{forward}} = 0.5 > k_{\\mathrm{reverse}} \\approx 0.333$. The steady-state voltage transfer is stronger in the forward direction (from neuron $1$ to neuron $2$). This happens because the receiving cell, neuron $2$, has a lower membrane conductance ($g_{m2} < g_{m1}$), meaning it is less \"leaky\" and thus a greater fraction of the current flowing through the junction contributes to its voltage change.\n\n**Part 2: Transient Dynamics (Rise Time)**\n\nThe question asks which postsynaptic response rises more slowly. The speed of a neuron's voltage response is determined by its membrane time constant $\\tau = RC = C/g$. A larger capacitance $C$ and a larger membrane resistance $R_m$ (smaller conductance $g_m$) both lead to a slower response (larger $\\tau$).\n\nIn the coupled system, the total conductance seen by the postsynaptic capacitor, which determines its charging rate, is the sum of its own membrane conductance and the conductance of the path through the gap junction.\nThe effective time constant governing the postsynaptic potential's rise can be approximated as $\\tau_{\\mathrm{post}} \\approx C_{\\mathrm{post}} / (g_{m, \\mathrm{post}} + g_j)$.\n\n**Forward Direction (Neuron $2$ is postsynaptic)**\nThe postsynaptic neuron is neuron $2$.\nThe relevant parameters are $C_2 = 100\\,\\mathrm{pF}$, $g_{m2} = 5\\,\\mathrm{nS}$, and $g_j = 5\\,\\mathrm{nS}$.\nThe intrinsic time constant of neuron $2$ is $\\tau_{m2} = C_2/g_{m2} = 100\\,\\mathrm{pF} / 5\\,\\mathrm{nS} = 20\\,\\mathrm{ms}$.\nThe effective postsynaptic time constant is approximately $\\tau_{\\mathrm{fwd-post}} \\approx \\frac{C_2}{g_{m2} + g_j} = \\frac{100\\,\\mathrm{pF}}{(5+5)\\,\\mathrm{nS}} = 10\\,\\mathrm{ms}$.\n\n**Reverse Direction (Neuron $1$ is postsynaptic)**\nThe postsynaptic neuron is neuron $1$.\nThe relevant parameters are $C_1 = 50\\,\\mathrm{pF}$, $g_{m1} = 10\\,\\mathrm{nS}$, and $g_j = 5\\,\\mathrm{nS}$.\nThe intrinsic time constant of neuron $1$ is $\\tau_{m1} = C_1/g_{m1} = 50\\,\\mathrm{pF} / 10\\,\\mathrm{nS} = 5\\,\\mathrm{ms}$.\nThe effective postsynaptic time constant is approximately $\\tau_{\\mathrm{rev-post}} \\approx \\frac{C_1}{g_{m1} + g_j} = \\frac{50\\,\\mathrm{pF}}{(10+5)\\,\\mathrm{nS}} \\approx 3.33\\,\\mathrm{ms}$.\n\n**Comparison of Dynamics**\nNeuron $2$ has a larger capacitance ($C_2 > C_1$) and a smaller membrane conductance ($g_{m2}  g_{m1}$). Both of these factors contribute to its intrinsic time constant being much larger ($\\tau_{m2} = 20\\,\\mathrm{ms}$ vs. $\\tau_{m1} = 5\\,\\mathrm{ms}$). Consequently, the voltage response of neuron $2$ will be slower than that of neuron $1$. The comparison of the effective postsynaptic time constants ($\\tau_{\\mathrm{fwd-post}} > \\tau_{\\mathrm{rev-post}}$) confirms this: the postsynaptic response in the forward direction (in neuron $2$) rises more slowly.\n\n### Option-by-Option Analysis\n\n**A. $k_{\\mathrm{forward}}  k_{\\mathrm{reverse}}$ because steady-state voltage division across the gap junction depends on the membrane conductance of the receiving cell; the postsynaptic response in the forward direction (in neuron $2$) rises more slowly because neuron $2$ has larger $C_{2}$ and smaller $g_{m2}$.**\n- The comparison $k_{\\mathrm{forward}}  k_{\\mathrm{reverse}}$ is **Correct**.\n- The reasoning based on the receiving cell's conductance is **Correct**.\n- The claim that the forward postsynaptic response (in neuron $2$) is slower is **Correct**.\n- The reasoning based on neuron $2$'s larger $C_2$ and smaller $g_{m2}$ is **Correct**.\nThis statement is fully consistent with our derivation.\n\n**B. $k_{\\mathrm{reverse}}  k_{\\mathrm{forward}}$ because the source neuron in the reverse direction has higher input resistance and thus generates a larger driving voltage; the postsynaptic response in the reverse direction (in neuron $1$) rises more slowly because neuron $1$ has smaller $C_{1}$.**\n- The comparison $k_{\\mathrm{reverse}}  k_{\\mathrm{forward}}$ is **Incorrect**.\n- The reasoning is flawed; the coupling coefficient $k = V_{post}/V_{pre}$ is independent of the presynaptic voltage's magnitude.\n- The claim that the reverse postsynaptic response is slower is **Incorrect**.\n- The reasoning \"because neuron $1$ has smaller $C_{1}$\" is faulty; a smaller capacitance leads to a *faster*, not slower, response.\n\n**C. $k_{\\mathrm{forward}} = k_{\\mathrm{reverse}}$ because a non-rectifying gap junction is symmetric; both postsynaptic responses rise with the same time course because only the junction conductance $g_{j}$ matters.**\n- The claim $k_{\\mathrm{forward}} = k_{\\mathrm{reverse}}$ is **Incorrect**. Symmetry of the junction does not guarantee symmetry of coupling for an asymmetric pair of neurons.\n- The claim that both responses rise with the same time course is subtly complex, but the reasoning \"because only the junction conductance $g_j$ matters\" is definitively **Incorrect**. The membrane properties ($C_m$, $g_m$) of both neurons are critical for the system's dynamics.\n\n**D. $k_{\\mathrm{reverse}}  k_{\\mathrm{forward}}$ because smaller $g_{m2}$ reduces loading when current is injected into neuron $2$; the postsynaptic response in the reverse direction rises more slowly because neuron $1$ has larger $g_{m1}$.**\n- The comparison $k_{\\mathrm{reverse}}  k_{\\mathrm{forward}}$ is **Incorrect**.\n- The reasoning provided is confused and does not correctly explain coupling.\n- The claim that the reverse postsynaptic response (in neuron $1$) is slower is **Incorrect**.\n- The reasoning \"because neuron $1$ has larger $g_{m1}$\" is faulty; a larger conductance leads to a *faster* time constant, thus a faster response.\n\nBased on the analysis, option A is the only statement that is correct in all its parts.", "answer": "$$\\boxed{A}$$", "id": "2712415"}, {"introduction": "Gap junctions rarely act in isolation; they form vast networks that synchronize populations of neurons and glia. This advanced practice takes you from analyzing cell pairs to simulating network-level phenomena. You will implement a computational model to investigate how factors like conductance heterogeneity, rectification, and network damage impact the emergence of synchronous activity. This exercise [@problem_id:2712378] provides hands-on experience with the tools of computational neuroscience used to bridge the gap between single-synapse properties and collective network dynamics.", "problem": "You are to implement a simulation of a network of electrically coupled neurons or glia via gap junctions to study the influence of heterogeneity in conductance and rectification on cluster synchronization, and to assess robustness to random removal of connections (bond percolation). The simulation must be based on first principles of membrane dynamics and resistive coupling. Use the following foundational base.\n\nFundamental base:\n- Kirchhoff’s current law (KCL): the algebraic sum of currents into any node is zero at all times.\n- Ohm’s law across a gap junction: the current from node $j$ to node $i$ is $I_{ij} = g_{ij}\\,\\phi_{ij}(V_{j} - V_{i})$, where $g_{ij}$ is the gap-junctional conductance and $\\phi_{ij}$ encodes rectification.\n- Passive membrane dynamics (single-compartment): $C\\,\\frac{dV_{i}}{dt} = -\\frac{V_{i} - E_{i}}{R_{m}} + \\sum_{j} I_{ij} + I_{i}^{\\mathrm{noise}}(t)$. In dimensionless units, one can write $\\tau\\,\\frac{dV_{i}}{dt} = -(V_{i} - E_{i}) + \\tau\\sum_{j} I_{ij} + \\tau\\,\\sigma\\,\\xi_{i}(t)$, where $\\tau$ is a membrane time constant, $\\sigma$ is a noise amplitude, and $\\xi_{i}(t)$ is white noise with zero mean and unit variance.\n\nNetwork and coupling:\n- Consider $N$ nodes with undirected, symmetric structural connectivity encoded by an adjacency matrix $A \\in \\{0,1\\}^{N \\times N}$ with zero diagonal, sampled from an Erdős–Rényi model with connection probability $p_{\\mathrm{conn}}$. For each present undirected edge $\\{i,j\\}$, assign a base conductance $g_{ij} = g_{ji}$. Heterogeneity is modeled by sampling $g_{ij}$ from a log-normal distribution with a specified arithmetic mean $g_{\\mathrm{mean}}$ and coefficient of variation $c_{\\mathrm{v}}$; homogeneous coupling is obtained by $c_{\\mathrm{v}} = 0$ which sets all present edges to $g_{ij} = g_{\\mathrm{mean}}$.\n- Rectification is modeled by a ratio $r \\in [0,1]$ such that the directional current into node $i$ from node $j$ is $I_{ij} = g_{ij}\\,\\psi(V_{j}-V_{i})$, where\n$$\n\\psi(\\Delta) = \n\\begin{cases}\n\\Delta,  \\Delta \\ge 0,\\\\\nr\\,\\Delta,  \\Delta  0.\n\\end{cases}\n$$\nThis yields antisymmetric currents $I_{ji} = -I_{ij}$ for each edge.\n\nDynamics and numerical integration:\n- Use $E_{i} = 0$ for all $i$ to isolate gap-junctional effects. Simulate the stochastic differential equation\n$$\n\\frac{dV_{i}}{dt} = -\\frac{V_{i}}{\\tau} + \\sum_{j} I_{ij}(t) + \\sigma\\,\\eta_{i}(t),\n$$\nwith $\\eta_{i}(t)$ denoting standard white noise. Integrate using the Euler–Maruyama method with time step $\\Delta t$, total duration $T$, and discard the initial fraction of samples as transient before computing statistics. Initialize $V_{i}(0)$ to small random values.\n- Bond percolation: after generating $A$ and $g_{ij}$, remove a fraction $q \\in [0,1]$ of currently present undirected edges at random (uniformly over edges), independently of other parameters, to form the final structural graph on which dynamics evolve.\n\nSynchronization quantification:\n- From the simulated time series $V_{i}(t)$, compute the Pearson correlation coefficient (PCC) for each unordered pair $\\{i,j\\}$ over the analysis window (after transient). Build a synchronization graph $S$ on the same node set with undirected edges $\\{i,j\\}$ if and only if the PCC between nodes $i$ and $j$ is at least a fixed threshold $\\theta$. The synchronized clusters are the connected components of $S$. Define the cluster synchronization metric for the network as the fraction of nodes in the largest synchronized cluster,\n$$\n\\kappa = \\frac{1}{N}\\,\\max_{k}\\left|\\mathcal{C}_{k}\\right|,\n$$\nwhere $\\{\\mathcal{C}_{k}\\}$ are the connected components of $S$.\n\nYour program must implement the above and, for each test case, output the single scalar $\\kappa$ rounded to $3$ decimals.\n\nSimulation constants to use in all test cases:\n- Membrane time constant $\\tau = 0.01$.\n- Time step $\\Delta t = 0.0005$.\n- Total simulated time $T = 2.0$.\n- Transient fraction to discard before analysis $f_{\\mathrm{transient}} = 0.4$.\n- Noise amplitude $\\sigma = 0.5$.\n- Synchronization threshold $\\theta = 0.6$.\n\nTest suite:\nFor each tuple $(N, p_{\\mathrm{conn}}, g_{\\mathrm{mean}}, c_{\\mathrm{v}}, r, q, s)$, where $s$ is the random seed for all randomness, run a complete simulation as specified and report $\\kappa$.\n\n- Case $1$: $(20, 0.25, 0.5, 0.0, 1.0, 0.0, 1)$.\n- Case $2$: $(20, 0.25, 0.5, 1.0, 0.3, 0.0, 2)$.\n- Case $3$: $(20, 0.25, 0.5, 0.5, 0.3, 0.5, 3)$.\n- Case $4$: $(20, 0.25, 0.5, 0.0, 1.0, 0.9, 4)$.\n\nFinal output format:\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets. The $i$-th entry must be the value of $\\kappa$ for the $i$-th test case, each rounded to $3$ decimals, for example, $[0.875,0.500,0.350,0.050]$. No other text should be printed.", "solution": "The problem presented is a well-defined computational task in theoretical neuroscience. It requires the simulation of a network of $N$ passive cells, modeled as single electrical compartments, coupled by rectifying gap junctions. The objective is to compute a cluster synchronization metric, $\\kappa$, under varying conditions of network structure, coupling heterogeneity, and connection integrity. The problem is scientifically grounded in established principles of electrophysiology and network science, is well-posed, and all parameters and procedures are specified objectively and without ambiguity. The problem is therefore valid, and we proceed to outline the solution methodology.\n\nThe solution is broken down into four stages: network construction, numerical simulation of the dynamics, analysis of the resulting time series, and calculation of the synchronization metric.\n\n1.  **Network Architecture and Coupling**:\n    The structural connectivity of the network is represented by an adjacency matrix $A$, where $A_{ij} = 1$ if a connection exists between node $i$ and node $j$, and $A_{ij} = 0$ otherwise. For a network of $N$ nodes, $A$ is an $N \\times N$ symmetric matrix with zero diagonal ($A_{ii}=0$). The matrix $A$ is generated as an instance of an Erdős–Rényi random graph, where each possible edge $\\{i, j\\}$ with $i \\ne j$ is created independently with probability $p_{\\mathrm{conn}}$.\n\n    For each existing edge $\\{i, j\\}$, a conductance value $g_{ij} = g_{ji}  0$ is assigned. To model heterogeneity, these conductances are drawn from a log-normal distribution, which is defined by its arithmetic mean $g_{\\mathrm{mean}}$ and its coefficient of variation $c_{\\mathrm{v}}$. For the case $c_{\\mathrm{v}}  0$, the parameters of the underlying normal distribution—its mean $\\mu_{\\ln}$ and standard deviation $\\sigma_{\\ln}$—are calculated as:\n    $$\n    \\sigma_{\\ln}^2 = \\ln(c_{\\mathrm{v}}^2 + 1)\n    $$\n    $$\n    \\mu_{\\ln} = \\ln(g_{\\mathrm{mean}}) - \\frac{1}{2}\\sigma_{\\ln}^2\n    $$\n    Samples are then drawn from this log-normal distribution. The homogeneous case, where all conductances are identical ($g_{ij} = g_{\\mathrm{mean}}$), is specified by setting $c_{\\mathrm{v}} = 0$.\n\n    After the graph and its conductances are generated, it undergoes bond percolation. A fraction $q \\in [0, 1]$ of all existing edges are selected uniformly at random and are permanently removed from the network. This modifies the adjacency and conductance matrices for the subsequent dynamical simulation.\n\n2.  **System Dynamics and Numerical Integration**:\n    The membrane potential $V_i(t)$ of each node $i$ evolves according to the following system of stochastic differential equations (SDEs):\n    $$\n    \\frac{dV_i}{dt} = -\\frac{V_i}{\\tau} + \\sum_{j=1}^{N} I_{ij}(t) + \\sigma \\eta_i(t)\n    $$\n    where $\\tau$ is the membrane time constant, $\\sigma$ is the noise amplitude, and $\\eta_i(t)$ represents independent standard white noise. The term $I_{ij}(t)$ is the current from node $j$ to node $i$ through the gap junction, defined as:\n    $$\n    I_{ij}(t) = g_{ij}\\,\\psi(V_j(t) - V_i(t))\n    $$\n    The function $\\psi$ models rectification, controlled by the parameter $r \\in [0, 1]$:\n    $$\n    \\psi(\\Delta V) =\n    \\begin{cases}\n    \\Delta V,  \\text{if } \\Delta V \\ge 0 \\\\\n    r \\cdot \\Delta V,  \\text{if } \\Delta V  0\n    \\end{cases}\n    $$\n    This system of SDEs is numerically integrated using the Euler-Maruyama method with a time step $\\Delta t$. The update equation for the voltage of node $i$ at time step $k$ is:\n    $$\n    V_i(t_{k+1}) = V_i(t_k) + \\Delta t \\left( -\\frac{V_i(t_k)}{\\tau} + \\sum_{j=1}^{N} g_{ij} \\psi(V_j(t_k) - V_i(t_k)) \\right) + \\sigma \\sqrt{\\Delta t} \\cdot \\mathcal{N}_i(0, 1)\n    $$\n    where $t_{k+1} = t_k + \\Delta t$ and $\\mathcal{N}_i(0, 1)$ is a random variable sampled from a standard normal distribution, drawn independently for each node and each time step. For computational efficiency, this update is performed in a vectorized manner across all $N$ nodes at each time step. The simulation starts from initial voltages $V_i(0)$ drawn from a uniform distribution over $[0, 0.01]$ and runs for a total duration $T$.\n\n3.  **Synchronization Analysis**:\n    To analyze the steady-state behavior of the network, the initial transient phase of the simulation, corresponding to a fraction $f_{\\mathrm{transient}}$ of the total duration $T$, is discarded.\n    \n    Using the voltage time series from the remaining analysis window, the Pearson Correlation Coefficient (PCC), $P_{ij}$, is computed for every pair of nodes $\\{i, j\\}$. This yields a symmetric $N \\times N$ correlation matrix $P$.\n\n    A synchronization graph, represented by an adjacency matrix $S$, is then constructed. An edge is placed between nodes $i$ and $j$ in this graph if their activity is sufficiently correlated, i.e., if $P_{ij} \\ge \\theta$, where $\\theta$ is a predefined synchronization threshold. Formally, for $i \\ne j$, $S_{ij} = 1$ if $P_{ij} \\ge \\theta$, and $S_{ij} = 0$ otherwise.\n\n    The final step is to quantify the degree of large-scale synchrony in the network. The synchronized clusters are defined as the connected components of the graph $S$. We find all such components and determine their sizes. The cluster synchronization metric, $\\kappa$, is the size of the largest connected component, normalized by the total number of nodes in the network:\n    $$\n    \\kappa = \\frac{1}{N}\\,\\max_{k}\\left|\\mathcal{C}_{k}\\right|\n    $$\n    where $\\{\\mathcal{C}_k\\}$ is the set of connected components of $S$. For each test case defined in the problem, this entire procedure is executed, and the resulting value of $\\kappa$ is reported, rounded to three decimal places. The use of a specified random seed $s$ for each case ensures the entire process is deterministic and reproducible.", "answer": "```python\nimport numpy as np\nfrom scipy.sparse.csgraph import connected_components\n\ndef run_simulation(N, p_conn, g_mean, c_v, r, q, seed):\n    \"\"\"\n    Runs a single simulation for a given set of parameters.\n\n    Args:\n        N (int): Number of nodes.\n        p_conn (float): Connection probability for Erdős–Rényi graph.\n        g_mean (float): Mean conductance.\n        c_v (float): Coefficient of variation for conductance.\n        r (float): Rectification ratio.\n        q (float): Fraction of edges to remove (bond percolation).\n        seed (int): Random seed for all stochastic processes.\n\n    Returns:\n        float: The cluster synchronization metric kappa, rounded to 3 decimals.\n    \"\"\"\n    # Simulation constants from the problem statement\n    TAU = 0.01\n    DT = 0.0005\n    T_TOTAL = 2.0\n    F_TRANSIENT = 0.4\n    SIGMA = 0.5\n    THETA_SYNC = 0.6\n\n    # Set the seed for reproducibility\n    np.random.seed(seed)\n\n    # 1. Network Generation\n    # Create Erdős–Rényi adjacency matrix\n    A = np.random.rand(N, N)  p_conn\n    A = np.triu(A, 1)  # Use upper triangle to define undirected edges\n    A = A + A.T\n\n    # Create conductance matrix G\n    G = np.zeros((N, N))\n    \n    # Isolate unique edges for sampling conductances\n    unique_edges = np.argwhere(np.triu(A, 1))\n\n    if c_v == 0.0:\n        conductances = np.full(len(unique_edges), g_mean)\n    else:\n        # Parameters for the underlying normal distribution of the log-normal\n        var_log = np.log(c_v**2 + 1)\n        mu_log = np.log(g_mean) - 0.5 * var_log\n        sigma_log = np.sqrt(var_log)\n        conductances = np.random.lognormal(mu_log, sigma_log, size=len(unique_edges))\n    \n    for idx, (i, j) in enumerate(unique_edges):\n        G[i, j] = G[j, i] = conductances[idx]\n\n    # 2. Bond Percolation\n    if q > 0.0:\n        num_edges_to_remove = int(round(q * len(unique_edges)))\n        if num_edges_to_remove > 0 and len(unique_edges) > 0:\n            indices_to_remove = np.random.choice(len(unique_edges), size=num_edges_to_remove, replace=False)\n            edges_to_remove = unique_edges[indices_to_remove]\n            for i, j in edges_to_remove:\n                G[i, j] = G[j, i] = 0.0\n\n    # 3. Numerical Integration (Euler-Maruyama)\n    num_steps = int(T_TOTAL / DT)\n    V_history = np.zeros((num_steps + 1, N))\n    V = np.random.rand(N) * 0.01  # Initial small random voltages\n    V_history[0, :] = V\n\n    for t_step in range(num_steps):\n        # Vectorized calculation of gap-junction currents\n        V_matrix = V[:, np.newaxis]\n        V_diff = V_matrix.T - V_matrix  # V_diff[i, j] = V_j - V_i\n        \n        # Apply rectification\n        psi_V_diff = np.where(V_diff >= 0, V_diff, r * V_diff)\n        \n        # Total current into each node\n        I_gap = np.sum(G * psi_V_diff, axis=1) # Sum over j for each i\n\n        # Calculate drift and diffusion terms\n        drift = -V / TAU + I_gap\n        noise = np.random.randn(N)\n        diffusion = SIGMA * noise # SDE form requires sqrt(dt) later\n\n        # Update voltages\n        V = V + drift * DT + np.sqrt(DT) * diffusion\n        V_history[t_step + 1, :] = V\n\n    # 4. Synchronization Analysis\n    transient_steps = int(F_TRANSIENT * num_steps)\n    V_analysis = V_history[transient_steps:, :]\n\n    # Pearson Correlation Coefficient matrix\n    # rowvar=False means columns are variables (nodes), rows are observations (time)\n    if V_analysis.shape[0] > 1 and np.all(np.std(V_analysis, axis=0) > 1e-9):\n      PCC_matrix = np.corrcoef(V_analysis, rowvar=False)\n    else: # Handle cases with no variance or single data point\n      PCC_matrix = np.eye(N)\n    \n    PCC_matrix = np.nan_to_num(PCC_matrix) # Replace NaNs with 0 in case of zero variance\n\n    # Synchronization graph\n    S = (PCC_matrix >= THETA_SYNC).astype(int)\n    np.fill_diagonal(S, 0) # No self-loops\n\n    # Find connected components to identify clusters\n    # directed=False because S is symmetric\n    n_components, labels = connected_components(csgraph=S, directed=False, return_labels=True)\n    \n    if n_components > 0:\n        component_sizes = np.bincount(labels)\n        max_cluster_size = np.max(component_sizes)\n    else: # Should not happen for N > 0\n        max_cluster_size = 0\n\n    # Calculate kappa\n    kappa = max_cluster_size / N if N > 0 else 0.0\n\n    return kappa\n\ndef solve():\n    \"\"\"\n    Main function to run the test suite and print results.\n    \"\"\"\n    test_cases = [\n        # (N, p_conn, g_mean, c_v, r, q, seed)\n        (20, 0.25, 0.5, 0.0, 1.0, 0.0, 1),\n        (20, 0.25, 0.5, 1.0, 0.3, 0.0, 2),\n        (20, 0.25, 0.5, 0.5, 0.3, 0.5, 3),\n        (20, 0.25, 0.5, 0.0, 1.0, 0.9, 4),\n    ]\n\n    results = []\n    for params in test_cases:\n        kappa = run_simulation(*params)\n        results.append(kappa)\n\n    # Format the output as specified\n    formatted_results = ','.join([f\"{res:.3f}\" for res in results])\n    print(f\"[{formatted_results}]\")\n\nif __name__ == '__main__':\n    solve()\n```", "id": "2712378"}]}