{"hands_on_practices": [{"introduction": "The hallmark of genuine ribosome footprints is their triplet periodicity, which arises from the codon-by-codon movement of ribosomes along an mRNA. The accuracy of this signal depends critically on correctly inferring the location of the ribosomal P-site from each sequenced fragment. This exercise [@problem_id:2963266] challenges you to quantify how a small but systematic error in P-site assignment can distort the observed reading frame distribution and the resulting periodicity metrics, providing a crucial lesson in how preprocessing decisions propagate through an analysis pipeline.", "problem": "Ribosome profiling (Ribo-seq) estimates ribosome positions on messenger ribonucleic acid (mRNA) by mapping the protected fragment and inferring the peptidyl-site (P-site) nucleotide of the ribosome. Translation proceeds in codons of length $3$, so reads aligned to protein-coding regions exhibit triplet periodicity: when the aligned P-site positions are reduced modulo $3$, the majority fall in the annotated coding frame. Consider the following controlled scenario of coding-region reads in which the investigator’s P-site offset is misestimated by a systematic shift of $+1$ nucleotide (that is, every assigned P-site is advanced by exactly $1$ nucleotide relative to its true position).\n\nAssume the following fundamental base:\n- Translation maintains a constant reading frame; modulo-$3$ frame indices are $j \\in \\{0,1,2\\}$, with $j=0$ denoting the annotated coding frame.\n- The true frame-assignment probabilities of bona fide coding-region footprints are $p_{0}, p_{1}, p_{2}$ with $\\sum_{j=0}^{2} p_{j} = 1$.\n- A circular shift of the assigned P-site by $+1$ nucleotide maps a true frame $j$ to an observed frame $(j+1) \\bmod 3$.\n- A fraction $c$ of aligned reads derive from genuine elongating ribosomes on coding sequences (signal) with the above triplet structure, and the remaining fraction $r = 1-c$ are background reads with no frame preference (noise) that are uniformly distributed across frames with probability vector $u = (1/3, 1/3, 1/3)$.\n\nLet the true frame probabilities be $p = (p_{0}, p_{1}, p_{2}) = (0.82, 0.09, 0.09)$, and let the signal fraction be $c = 0.80$ (so $r = 0.20$). Define the investigator’s triplet periodicity statistic as the magnitude of the first nonzero discrete Fourier transform (DFT) component of the frame-deviation vector from uniform:\n$$\nA(p) \\equiv \\left| \\sum_{j=0}^{2} \\left(p_{j} - \\frac{1}{3}\\right) \\,\\omega^{j} \\right|, \\quad \\text{where } \\omega \\equiv \\exp\\!\\left(-\\frac{2\\pi i}{3}\\right).\n$$\n\nStarting only from the above definitions and assumptions, compute under the systematic $+1$-nucleotide P-site error:\n1) the observed frame-assignment probability vector across coding regions after mixing signal and noise, and\n2) the corresponding triplet periodicity amplitude.\n\nExpress your final answer as a single row matrix $\\begin{pmatrix} \\hat{p}_{0} & \\hat{p}_{1} & \\hat{p}_{2} & \\hat{A} \\end{pmatrix}$, where $\\hat{p}_{j}$ are the observed frame probabilities and $\\hat{A}$ is the observed periodicity amplitude. Round each entry to four significant figures. The quantities are dimensionless.", "solution": "We begin from the definitions of frame indices modulo $3$, mixture of signal and uniform background, and the discrete Fourier transform (DFT)-based periodicity statistic. Let the true frame-distribution vector for bona fide coding reads be $p = (p_{0}, p_{1}, p_{2})$ with $\\sum_{j=0}^{2} p_{j} = 1$. A systematic $+1$-nucleotide P-site assignment error maps a true frame $j$ to an observed frame $(j+1) \\bmod 3$, which is a circular shift of the frame vector by one position. Denote this rotation operator by $R$, so that\n$$\nR(p) \\equiv \\big(p_{2},\\, p_{0},\\, p_{1}\\big).\n$$\nGiven a signal fraction $c$ and a background fraction $r = 1-c$ that is uniform across frames with $u = (1/3, 1/3, 1/3)$, the observed frame vector under the systematic error is the mixture\n$$\n\\hat{p} \\equiv c\\,R(p) + r\\,u.\n$$\n\nSubstituting the provided values $p = (0.82, 0.09, 0.09)$ and $c=0.80$ (so $r=0.20$), we first compute the rotated coding component:\n$$\nR(p) = \\big(0.09,\\, 0.82,\\, 0.09\\big).\n$$\nMixing with uniform background yields\n$$\n\\hat{p} = 0.80 \\cdot \\big(0.09,\\, 0.82,\\, 0.09\\big) + 0.20 \\cdot \\left(\\frac{1}{3},\\, \\frac{1}{3},\\, \\frac{1}{3}\\right).\n$$\nCompute each component:\n$$\n0.80 \\cdot 0.09 = 0.072,\\quad 0.80 \\cdot 0.82 = 0.656,\\quad 0.20 \\cdot \\frac{1}{3} = \\frac{1}{15} \\approx 0.066\\overline{6}.\n$$\nTherefore\n$$\n\\hat{p}_{0} = 0.072 + \\frac{1}{15} = \\frac{9}{125} + \\frac{1}{15} = \\frac{52}{375} \\approx 0.1386\\overline{6},\n$$\n$$\n\\hat{p}_{1} = 0.656 + \\frac{1}{15} = \\frac{82}{125} + \\frac{1}{15} = \\frac{271}{375} \\approx 0.7226\\overline{6},\n$$\n$$\n\\hat{p}_{2} = 0.072 + \\frac{1}{15} = \\frac{52}{375} \\approx 0.1386\\overline{6}.\n$$\n\nNext, we compute the triplet periodicity amplitude. By definition,\n$$\nA(p) \\equiv \\left| \\sum_{j=0}^{2} \\left(p_{j} - \\frac{1}{3}\\right)\\omega^{j} \\right|,\\quad \\omega \\equiv \\exp\\!\\left(-\\frac{2\\pi i}{3}\\right).\n$$\nWe will first establish two general invariance properties using only the definitions:\n\n1) Invariance to circular shift up to phase. For a $+1$ circular shift, $R(p)_{j} = p_{j-1}$ with indices modulo $3$. Then\n$$\n\\sum_{j=0}^{2} \\left(R(p)_{j} - \\frac{1}{3}\\right)\\omega^{j}\n= \\sum_{j=0}^{2} \\left(p_{j-1} - \\frac{1}{3}\\right)\\omega^{j}\n= \\omega \\sum_{m=0}^{2} \\left(p_{m} - \\frac{1}{3}\\right)\\omega^{m},\n$$\nwhere we substituted $m=j-1$ and extracted a factor $\\omega$ because $\\omega^{j} = \\omega \\cdot \\omega^{m}$. Since $|\\omega|=1$, it follows that\n$$\nA\\big(R(p)\\big) = A(p).\n$$\n\n2) Linearity and annihilation of the uniform component. For the mixture $\\hat{p} = c\\,R(p) + r\\,u$,\n$$\nA(\\hat{p}) = \\left| \\sum_{j=0}^{2} \\left(c\\,R(p)_{j} + r\\,\\frac{1}{3} - \\frac{1}{3}\\right)\\omega^{j} \\right|\n= \\left| c \\sum_{j=0}^{2} \\left(R(p)_{j} - \\frac{1}{3}\\right)\\omega^{j} + (r-1)\\sum_{j=0}^{2} \\frac{1}{3}\\omega^{j} \\right|.\n$$\nBut $\\sum_{j=0}^{2} \\omega^{j} = 0$ for third roots of unity, hence the uniform term vanishes and\n$$\nA(\\hat{p}) = c \\left| \\sum_{j=0}^{2} \\left(R(p)_{j} - \\frac{1}{3}\\right)\\omega^{j} \\right| = c\\,A\\big(R(p)\\big) = c\\,A(p).\n$$\n\nTherefore, we only need $A(p)$ for the given $p$ and then scale by $c=0.80$. Compute $A(p)$ explicitly. Let\n$$\nq_{j} \\equiv p_{j} - \\frac{1}{3}.\n$$\nFor $p=(0.82,0.09,0.09)$,\n$$\nq_{0} = 0.82 - \\frac{1}{3} = \\frac{41}{50} - \\frac{1}{3} = \\frac{73}{150},\n$$\n$$\nq_{1} = 0.09 - \\frac{1}{3} = \\frac{9}{100} - \\frac{1}{3} = -\\frac{73}{300},\n$$\n$$\nq_{2} = -\\frac{73}{300}.\n$$\nUsing $\\omega^{0}=1$, $\\omega^{1}=-\\frac{1}{2} - i\\frac{\\sqrt{3}}{2}$, and $\\omega^{2}=-\\frac{1}{2} + i\\frac{\\sqrt{3}}{2}$, observe that $q_{1}=q_{2}$, so the imaginary parts cancel:\n$$\n\\sum_{j=0}^{2} q_{j}\\omega^{j} = q_{0}\\cdot 1 + q_{1}\\omega + q_{2}\\omega^{2}\n= q_{0} + q_{1}(\\omega + \\omega^{2}) = q_{0} + q_{1}(-1) = q_{0} - q_{1}.\n$$\nThus\n$$\nA(p) = |q_{0} - q_{1}| = \\left|\\frac{73}{150} - \\left(-\\frac{73}{300}\\right)\\right| = \\left|\\frac{73}{150} + \\frac{73}{300}\\right| = \\frac{73}{100} = 0.73.\n$$\nApplying the scaling by $c=0.80 = \\frac{4}{5}$,\n$$\n\\hat{A} = A(\\hat{p}) = c\\,A(p) = \\frac{4}{5} \\cdot \\frac{73}{100} = \\frac{73}{125} = 0.584.\n$$\n\nCollecting results and rounding each entry to four significant figures:\n$$\n\\hat{p}_{0} \\approx 0.1387,\\quad \\hat{p}_{1} \\approx 0.7227,\\quad \\hat{p}_{2} \\approx 0.1387,\\quad \\hat{A} \\approx 0.5840.\n$$\n\nThese values encode how the $+1$-nucleotide systematic P-site offset error circularly permutes the frame-assignment probabilities while leaving the triplet periodicity amplitude invariant except for the dilution by uniform background, which scales the amplitude by the signal fraction $c$.", "answer": "$$\\boxed{\\begin{pmatrix}0.1387 & 0.7227 & 0.1387 & 0.5840\\end{pmatrix}}$$", "id": "2963266"}, {"introduction": "Comparing gene expression levels between conditions is a primary goal of Ribo-seq, but this requires careful normalization to account for differences in library size and composition. This is particularly challenging when translation is globally perturbed, as standard methods often rely on assumptions that no longer hold. Through this practice problem [@problem_id:2963241], you will critically evaluate the underlying assumptions of common normalization strategies and learn to predict their failure modes, a vital skill for avoiding artifacts and drawing correct biological conclusions.", "problem": "A laboratory performs a side-by-side measurement of translation and transcription by generating both ribosome profiling libraries of ribosome protected fragments (RPF) and messenger RNA sequencing (RNA-seq) libraries from the same cells. The cells are subjected to a control condition and to a stress condition. In both modalities, each sample is sequenced to roughly equal total reads, and reads are mapped to coding sequences. For cross-sample comparisons, the team will apply standard library size normalization methods, including Counts Per Million (CPM), Trimmed Mean of M-values (TMM), and the median-of-ratios size factors used by Differential Expression by Sequencing 2 (DESeq2).\n\nAssume the following per-cell biological changes from control to stress, defined in terms of absolute molecular abundances per cell (not proportions):\n\n- For RPF: approximately $80\\%$ of genes undergo a global reduction in ribosome footprints of about $2\\times$ (half the absolute ribosome load), approximately $1\\%$ of genes (stress-response genes) increase their ribosome footprints by about $10\\times$, and the remaining genes are approximately unchanged.\n- For RNA: approximately $80\\%$ of genes are unchanged, approximately $5\\%$ decrease by about $2\\times$, approximately $1\\%$ increase by about $4\\times$, and the remainder are approximately unchanged.\n\nNo external spike-in controls are used. Mapping and duplication rates are similar across libraries, and there is no major contamination reported. The goal is to detect biologically meaningful changes, including any global shifts in translation, without introducing artifacts from compositional effects introduced by finite library sizes.\n\nWhich of the following statements about the behavior and failure modes of CPM, TMM, and DESeq2 size factors, when applied separately within RPF libraries and within RNA libraries, are most consistent with first principles of compositional data and the stated scenario? Select all that apply.\n\nA. In the RPF data under stress, CPM will tend to overstate the magnitude and prevalence of downregulation among the $80\\%$ of genes with reduced translation because the few ($\\approx 1\\%$) massively upregulated genes will inflate the total library, thereby pushing down the CPM of many other genes; without an external yardstick, CPM cannot recover the absolute per-cell global repression.\n\nB. In the RPF data, TMM will be essentially unbiased here because it trims extreme log fold-changes and high-intensity features; since only a small minority of genes change, the assumption that most genes are not differentially expressed is met, so TMM will preserve the global two-fold repression among the majority.\n\nC. In the RPF data, DESeq2 median-of-ratios size factors computed across control and stress will tend to normalize away the true global two-fold repression affecting the majority, shifting medians toward no change and thereby underestimating broad downregulation.\n\nD. In the RNA data, CPM is acceptable in this scenario because the majority of genes are unchanged and no small set of transcripts dominates the library composition; however, if a handful of highly expressed transcripts were to constitute more than $50\\%$ of reads in one condition, CPM would similarly fail due to compositional distortion.\n\nE. For estimating changes in translation efficiency (TE), defined conceptually as the ratio of RPF abundance to RNA abundance per gene, one should avoid any library-size normalization of the RPF data and only normalize the RNA data, because TE ratios will cancel any RPF library-size differences by construction even under compositional shifts.", "solution": "The problem statement describes a standard experimental setup in functional genomics, comparing transcriptional and translational landscapes under two conditions using RNA-sequencing and ribosome profiling. The core of the problem lies in understanding the mathematical properties and inherent limitations of common normalization methods when applied to compositional data, particularly under conditions of large-scale, asymmetric changes in molecular populations. The problem is scientifically grounded, well-posed, and objective. I will proceed with a rigorous analysis of each statement based on the first principles of compositional data analysis.\n\nLet $M_{i,j}$ be the absolute number of molecules (RPFs or RNAs) for gene $i$ in condition $j$ (where $j \\in \\{\\text{control, stress}\\}$). The total number of molecules per cell is $M_{\\text{tot},j} = \\sum_i M_{i,j}$.\nThe sequencing process samples from this molecular pool and generates a library of a fixed total size (number of reads), $L_j$. The number of counts for gene $i$ is $C_{i,j}$, and $L_j = \\sum_i C_{i,j}$. By the problem statement, $L_{\\text{control}} \\approx L_{\\text{stress}} = L$.\nThe expected number of counts is proportional to the molecule's fraction in the pool: $C_{i,j} = k_j \\cdot M_{i,j}$, where $k_j$ is a library-specific constant. More accurately, the counts follow a multinomial distribution based on the proportions $p_{i,j} = M_{i,j} / M_{\\text{tot},j}$. Therefore, $C_{i,j} \\approx L_j \\cdot p_{i,j} = L \\cdot \\frac{M_{i,j}}{M_{\\text{tot},j}}$.\n\nThe true biological fold-change for gene $i$ is $FC_{i, \\text{bio}} = \\frac{M_{i,\\text{stress}}}{M_{i,\\text{control}}}$.\nThe observed raw fold-change from counts is $\\frac{C_{i,\\text{stress}}}{C_{i,\\text{control}}} = \\frac{L \\cdot M_{i,\\text{stress}}/M_{\\text{tot},\\text{stress}}}{L \\cdot M_{i,\\text{control}}/M_{\\text{tot},\\text{control}}} = FC_{i, \\text{bio}} \\cdot \\frac{M_{\\text{tot},\\text{control}}}{M_{\\text{tot},\\text{stress}}}$.\nThis equation is fundamental: the observed fold-change is the product of the true biological fold-change and a compositional distortion factor, $\\frac{M_{\\text{tot},\\text{control}}}{M_{\\text{tot},\\text{stress}}}$, which reflects the change in the total number of molecules per cell. Normalization methods attempt to estimate this factor, or a relative version of it, to recover the true biological changes.\n\n### Analysis of the RPF Data Scenario\n\nThe biological changes are: $80\\%$ of genes decrease by $2\\times$, $1\\%$ increase by $10\\times$, and $19\\%$ are unchanged. This is a massive, unidirectional shift. The majority of genes are downregulated. This violates the central assumption of most standard normalization methods: that most genes are not differentially expressed (DE), or that DE is symmetric around a fold-change of $1$.\n\nLet us estimate the change in the total RPF population, $M_{\\text{tot}}$. Let $F_D$, $F_U$, and $F_S$ be the fractional contribution of the downregulated, upregulated, and stable genes to the total RPF pool in the control condition.\n$\\frac{M_{\\text{tot},\\text{stress}}}{M_{\\text{tot},\\text{control}}} = 0.5 \\cdot F_D + 10 \\cdot F_U + 1 \\cdot F_S$.\nThe problem implies a \"global reduction\", which suggests that the downregulation of $80\\%$ of genes (many of which are highly-expressed housekeeping genes) outweighs the upregulation of a small minority ($1\\%$). For example, if $F_D=0.8$, $F_U=0.05$, and $F_S=0.15$:\n$\\frac{M_{\\text{tot},\\text{stress}}}{M_{\\text{tot},\\text{control}}} = 0.5(0.8) + 10(0.05) + 0.15 = 0.4 + 0.5 + 0.15 = 1.05$.\nIn this plausible scenario, the total number of RPFs per cell actually increases slightly. On the other hand, if the upregulated genes are of low abundance, e.g., $F_U=0.01$, and the downregulated genes dominate, e.g., $F_D=0.8$:\n$\\frac{M_{\\text{tot},\\text{stress}}}{M_{\\text{tot},\\text{control}}} = 0.5(0.8) + 10(0.01) + 0.19 = 0.4 + 0.1 + 0.19 = 0.69$.\nIn this case, a global repression occurs. The phrasing in option A (\"inflate the total library\") suggests the first scenario where a few actors increase demand on the fixed sequencing budget, so we will proceed with the understanding that the compositional fraction of the few upregulated genes increases substantially.\n\n### Analysis of Individual Options\n\n**A. In the RPF data under stress, CPM will tend to overstate the magnitude and prevalence of downregulation among the $80\\%$ of genes with reduced translation because the few ($\\approx 1\\%$) massively upregulated genes will inflate the total library, thereby pushing down the CPM of many other genes; without an external yardstick, CPM cannot recover the absolute per-cell global repression.**\n\nThe Counts Per Million (CPM) method normalizes by the total number of reads, $L_j$. Since $L_{\\text{stress}} \\approx L_{\\text{control}}$, the normalization factors are effectively equal. CPM-normalized values are thus proportional to the raw counts, and their fold-changes are the raw fold-changes.\nThe argument is based on the compositional nature of the data. The massive ($10\\times$) upregulation of $1\\%$ of genes means this small set of genes will command a much larger *fraction* of the total reads in the stress library compared to the control library. Since the total number of reads is fixed, the increased fractional abundance of these genes must be balanced by a decrease in the fractional abundance of all other genes.\nLet's analyze a gene that is biologically unchanged. Its absolute abundance $M_{i,j}$ is constant. However, its fraction $p_{i,j} = M_{i,j}/M_{\\text{tot},j}$ will change. If the total number of molecules increases ($M_{\\text{tot},\\text{stress}} > M_{\\text{tot},\\text{control}}$), its fraction will decrease, and CPM will incorrectly report downregulation.\nFor a gene that is already biologically downregulated by $2\\times$ ($FC_{i, \\text{bio}}=0.5$), its CPM fold-change will be $0.5 \\cdot \\frac{M_{\\text{tot},\\text{control}}}{M_{\\text{tot},\\text{stress}}}$. If $M_{\\text{tot},\\text{stress}} > M_{\\text{tot},\\text{control}}$ (the library is \"inflated\"), then the distortion factor is less than $1$, e.g., $1/1.05 \\approx 0.95$. The observed fold-change would be $0.5 \\times 0.95 = 0.475$, a downregulation of $1/0.475 \\approx 2.1\\times$. This is an overestimation of the true $2\\times$ downregulation. The logic presented in the statement is correct. The final clause, that CPM cannot recover global shifts without an external standard (like a spike-in), is a fundamental truth of this method. CPM normalizes away any change in the total molecular output per cell by its very definition.\n\nVerdict: **Correct**.\n\n**B. In the RPF data, TMM will be essentially unbiased here because it trims extreme log fold-changes and high-intensity features; since only a small minority of genes change, the assumption that most genes are not differentially expressed is met, so TMM will preserve the global two-fold repression among the majority.**\n\nThis statement makes a factually incorrect claim about the premise. It states \"only a small minority of genes change\". The problem explicitly states that $80\\%$ of genes are downregulated by $2\\times$. This is a vast majority, not a minority. Therefore, the core assumption of Trimmed Mean of M-values (TMM)—that most genes are not DE—is severely violated. TMM identifies the bulk of the distribution of log-fold-changes and assumes its center should be at zero. In this case, the bulk of the distribution is centered around a log-fold-change corresponding to the $2\\times$ downregulation. TMM will misinterpret this biological shift as a technical bias and calculate a normalization factor to shift this bulk distribution back to zero. In doing so, it will completely absorb and mask the global repression signal. It will not preserve the two-fold repression; it will eliminate it.\n\nVerdict: **Incorrect**.\n\n**C. In the RPF data, DESeq2 median-of-ratios size factors computed across control and stress will tend to normalize away the true global two-fold repression affecting the majority, shifting medians toward no change and thereby underestimating broad downregulation.**\n\nThe median-of-ratios method, used by DESeq2, operates on the assumption that the median gene is not differentially expressed. The size factor for a sample is the median of the ratios of a gene's count to its geometric mean across all samples. In a two-condition experiment, this simplifies to the size factor being related to the median of the square root of the raw fold-changes. Given that $80\\%$ of genes are downregulated, the median gene will be a member of this downregulated group. The normalization procedure will calculate a size factor that forces the median gene's normalized fold-change to be $1$. Consequently, the entire population of $80\\%$ of genes will be reported as having fold-changes close to $1$, not $0.5$. The result is a gross underestimation of the downregulation, effectively normalizing away the widespread biological effect.\n\nVerdict: **Correct**.\n\n**D. In the RNA data, CPM is acceptable in this scenario because the majority of genes are unchanged and no small set of transcripts dominates the library composition; however, if a handful of highly expressed transcripts were to constitute more than $50\\%$ of reads in one condition, CPM would similarly fail due to compositional distortion.**\n\nThe scenario for RNA changes is: $5\\%$ decrease by $2\\times$, $1\\%$ increase by $4\\times$, and the rest ($94\\%$) are unchanged. Here, the vast majority of genes are stable, and the changes are relatively small and balanced. The total number of RNA molecules per cell will be nearly constant: $\\frac{M_{\\text{tot},\\text{stress}}}{M_{\\text{tot},\\text{control}}} \\approx 0.5(F_{D}) + 4(F_{U}) + 1(F_{S})$. Assuming fractions of library mass are similar to fractions of genes ($F_D\\approx 0.05, F_U\\approx 0.01, F_S\\approx 0.94$), this ratio is $\\approx 0.5(0.05) + 4(0.01) + 0.94 = 0.025 + 0.04 + 0.94 = 1.005$, which is very close to $1$. In this case, compositional distortion is minimal, and the underlying assumption for simple normalization like CPM (that total molecular output per cell is constant) holds approximately true. The second part of the statement correctly identifies the classic failure mode for CPM: when a few highly expressed genes change dramatically, they distort the compositional landscape, invalidating the method. The entire statement is a sound analysis of the applicability and limitations of CPM.\n\nVerdict: **Correct**.\n\n**E. For estimating changes in translation efficiency (TE), defined conceptually as the ratio of RPF abundance to RNA abundance per gene, one should avoid any library-size normalization of the RPF data and only normalize the RNA data, because TE ratios will cancel any RPF library-size differences by construction even under compositional shifts.**\n\nTranslation efficiency (TE) for gene $i$ is $TE_i \\propto \\text{RPF}_i/\\text{RNA}_i$. The change in TE is a ratio of these ratios. The statement proposes to use raw RPF counts, effectively setting the RPF normalization factor to $1$. The change in TE would be estimated as $\\frac{C_{\\text{RPF},i,\\text{stress}}/C_{\\text{RNA},i,\\text{stress}}}{C_{\\text{RPF},i,\\text{control}}/C_{\\text{RNA},i,\\text{control}}}$. Let's assume normalized RNA counts are used. The expression for the TE change becomes:\n$$ \\text{TE}_{i, \\text{change}} = \\frac{C_{\\text{RPF},i,\\text{stress}}}{C_{\\text{RPF},i,\\text{control}}} / \\frac{N_{\\text{RNA},i,\\text{stress}}}{N_{\\text{RNA},i,\\text{control}}} $$\nThe term for the RPF ratio is $\\frac{C_{\\text{RPF},i,\\text{stress}}}{C_{\\text{RPF},i,\\text{control}}} = FC_{i, \\text{bio, RPF}} \\cdot \\frac{M_{\\text{tot, RPF, control}}}{M_{\\text{tot, RPF, stress}}}$.\nThis term contains the compositional distortion from the RPF experiment. This distortion factor does not cancel out. It is a property of the RPF data alone. The RNA data has its own, separate compositional properties. Dividing RPF data by RNA data does not magically correct the compositional artifacts inherent to the RPF data. In fact, failing to normalize the RPF data guarantees that the TE calculation will be biased by the ratio of the total RPF molecule counts between conditions, $\\frac{M_{\\text{tot, RPF, control}}}{M_{\\text{tot, RPF, stress}}}$. Proper normalization of *both* datasets is required for a meaningful TE analysis.\n\nVerdict: **Incorrect**.", "answer": "$$\\boxed{ACD}$$", "id": "2963241"}, {"introduction": "A persistent challenge in analyzing sequencing data is the presence of reads that map to multiple genomic locations, such as highly similar paralogous genes. Simply discarding these \"multi-mapping\" reads can discard valuable data and bias quantification. This advanced exercise [@problem_id:2963228] guides you through the development of statistical models, including a powerful iterative algorithm, to intelligently resolve this ambiguity. This practice demonstrates how moving beyond simple heuristics to principled modeling can yield more accurate estimates of gene-specific translational efficiency.", "problem": "You are given a principled modeling task rooted in ribosome profiling of translation. Use the following fundamental base to derive an algorithm and then implement it as a program. Fundamental base: the Central Dogma states that genes are transcribed into messenger RNA (mRNA) and translated by ribosomes into protein. In ribosome profiling, ribosome-protected fragments (RPFs) are sequenced; counts of RPFs reflect ribosome occupancy. It is well established that, for a gene indexed by $g$, if $m_g$ denotes its mRNA abundance and $\\theta_g$ denotes its translational efficiency (TE), then the expected RPF count is proportional to $m_g \\theta_g$. A practical definition of translational efficiency in this setup is $TE_g \\equiv \\theta_g = \\text{RPF}_g / m_g$, which is dimensionless. Multi-mapping reads arise when a read aligns equally well to multiple paralogous genes; the allocation of these ambiguous reads across genes influences estimates of $TE_g$.\n\nYour task is to derive, from the above base and standard likelihood principles, a method to weight multi-mapping reads across paralogous genes and to evaluate how different weighting schemes influence estimates of $TE_g$. Specifically:\n\n1. Represent a paralog group as a set of genes $\\{g\\}$ for which you are given:\n   - An mRNA abundance vector $\\mathbf{m} = (m_g)$,\n   - A vector of unique RPF counts $\\mathbf{u} = (u_g)$, and\n   - A scalar $M$ denoting the total number of ambiguous RPF reads that map equally to any gene in the group.\n   - A ground-truth translational efficiency vector $\\boldsymbol{\\theta}^{\\ast} = (\\theta^{\\ast}_g)$ used solely for evaluation.\n\n2. Define and implement three allocation schemes for the $M$ ambiguous reads in a group:\n   - Uniform allocation: allocate equally across all genes in the group.\n   - Proportional-to-mRNA allocation: allocate proportional to $m_g$.\n   - An iterative maximum-likelihood allocation justified by a Poisson generative model in which observed RPF counts for gene $g$ follow a Poisson distribution with mean $m_g \\theta_g$. Under this model, ambiguous read responsibilities for gene $g$ at iteration $t$ are proportional to $m_g \\theta_g^{(t)}$. Initialize $\\theta_g^{(0)}$ using only information available without knowledge of multi-mappers by combining the unique-data estimator with a nonzero baseline so that $\\theta_g^{(0)} = u_g / m_g + \\lambda$, where $\\lambda$ is the baseline estimated as the global unique-data mean $\\lambda = \\left(\\sum_g u_g\\right)/\\left(\\sum_g m_g\\right)$. Iterate until the maximum absolute change in $\\theta_g$ across genes is below a tolerance of $10^{-10}$ or until $10{,}000$ iterations, whichever occurs first. After convergence, define the allocated ambiguous reads as $a_g$, the expected ambiguous read count for gene $g$, with $\\sum_g a_g = M$, and compute the resulting $\\widehat{\\theta}_g = (u_g + a_g)/m_g$.\n   Your program must implement all three schemes exactly as described.\n\n3. For each scheme, compute the translational efficiency estimate $\\widehat{\\theta}_g = (u_g + a_g)/m_g$ and evaluate the mean squared error (MSE) against the provided ground truth $\\theta^{\\ast}_g$ across genes in the group:\n   $$ \\text{MSE} = \\frac{1}{G} \\sum_{g=1}^{G} \\left(\\widehat{\\theta}_g - \\theta^{\\ast}_g \\right)^2, $$\n   where $G$ is the number of genes in the paralog group.\n\nTest suite. Implement your program to run on the following four paralog-group cases. Each case specifies $(\\mathbf{m}, \\mathbf{u}, M, \\boldsymbol{\\theta}^{\\ast})$.\n\n- Case A (balanced paralogs):\n  - $\\mathbf{m} = [500, 500]$,\n  - $\\mathbf{u} = [10, 10]$,\n  - $M = 20$,\n  - $\\boldsymbol{\\theta}^{\\ast} = [0.04, 0.04]$.\n\n- Case B (imbalanced translational efficiencies with equal mRNA):\n  - $\\mathbf{m} = [500, 500]$,\n  - $\\mathbf{u} = [16, 4]$,\n  - $M = 30$,\n  - $\\boldsymbol{\\theta}^{\\ast} = [0.08, 0.02]$.\n\n- Case C (one paralog with zero unique RPFs):\n  - $\\mathbf{m} = [400, 200]$,\n  - $\\mathbf{u} = [2, 0]$,\n  - $M = 22$,\n  - $\\boldsymbol{\\theta}^{\\ast} = [0.05, 0.02]$.\n\n- Case D (three paralogs with sparse unique RPFs):\n  - $\\mathbf{m} = [300, 150, 50]$,\n  - $\\mathbf{u} = [4, 1, 0]$,\n  - $M = 19$,\n  - $\\boldsymbol{\\theta}^{\\ast} = [0.06, 0.03, 0.015]$.\n\nOutput specification. Your program must compute, for each case in the order A, B, C, D, the MSE under the three schemes in the fixed order: uniform, proportional-to-mRNA, iterative maximum-likelihood. Aggregate all $12$ floating-point MSE values into a single list in this order:\n$$[\\text{A\\_uniform}, \\text{A\\_mRNA}, \\text{A\\_iterative}, \\text{B\\_uniform}, \\text{B\\_mRNA}, \\text{B\\_iterative}, \\text{C\\_uniform}, \\text{C\\_mRNA}, \\text{C\\_iterative}, \\text{D\\_uniform}, \\text{D\\_mRNA}, \\text{D\\_iterative}]$$\nand print them as a single line, as a comma-separated list enclosed in square brackets. Express each number with exactly $6$ digits after the decimal point (round half away from zero if needed). No additional text may be printed.", "solution": "The problem is subjected to validation and is determined to be valid. It is scientifically grounded in the principles of molecular biology and statistical inference, specifically ribosome profiling and likelihood-based modeling of count data. The problem is well-posed, providing a complete and consistent set of definitions, data, and objectives. It is an objective, formalizable task that is directly relevant to its stated field and free from ambiguity or fallacy.\n\nThe central task is to estimate gene-specific translational efficiencies, denoted by $\\theta_g$, from ribosome profiling data. The fundamental relationship provided is that the expected ribosome-protected fragment (RPF) count for a gene $g$, $\\text{RPF}_g$, is proportional to the product of its messenger RNA (mRNA) abundance, $m_g$, and its translational efficiency, $\\theta_g$. A practical estimator for $\\theta_g$ is thus $\\widehat{\\theta}_g = \\text{RPF}_g / m_g$.\n\nThe complexity arises from multi-mapping reads, which are RPFs that cannot be uniquely assigned to a single gene. For a paralog group of $G$ genes, we are given a vector of uniquely mapped RPF counts, $\\mathbf{u} = (u_1, u_2, \\ldots, u_G)$, the vector of mRNA abundances, $\\mathbf{m} = (m_1, m_2, \\ldots, m_G)$, and a total count of ambiguous RPFs, $M$. The total RPF count for gene $g$ is $u_g + a_g$, where $a_g$ is the number of ambiguous reads allocated to gene $g$, and $\\sum_{g=1}^G a_g = M$. The estimated translational efficiency is then given by:\n$$ \\widehat{\\theta}_g = \\frac{u_g + a_g}{m_g} $$\nWe will now derive the allocation vector $\\mathbf{a} = (a_1, a_2, \\ldots, a_G)$ for each of the three specified schemes and then evaluate their performance using the Mean Squared Error (MSE) against a ground truth $\\boldsymbol{\\theta}^{\\ast}$:\n$$ \\text{MSE} = \\frac{1}{G} \\sum_{g=1}^{G} \\left(\\widehat{\\theta}_g - \\theta^{\\ast}_g \\right)^2 $$\n\nScheme 1: Uniform Allocation\nThis scheme is the most naive approach, distributing the ambiguous reads equally among all genes in the paralog group, irrespective of any other information. For a group of size $G$, the allocation for each gene $g$ is:\n$$ a_g = \\frac{M}{G} $$\n\nScheme 2: Proportional-to-mRNA Allocation\nThis scheme assumes that the likelihood of an ambiguous read originating from a gene is proportional to that gene's mRNA abundance. This is a more informed heuristic than the uniform scheme. The proportion of reads allocated to gene $g$ is the ratio of its mRNA abundance to the total mRNA abundance in the group.\n$$ a_g = M \\cdot \\frac{m_g}{\\sum_{i=1}^G m_i} $$\n\nScheme 3: Iterative Maximum-Likelihood Allocation\nThis scheme is derived from a generative statistical model. We assume the total RPF count for gene $g$ follows a Poisson distribution with mean (and variance) $\\lambda_g = m_g \\theta_g$. The goal is to find the $\\theta_g$ values that maximize the likelihood of the observed data, which consists of the unique counts $\\mathbf{u}$ and the ambiguous count $M$. This is a classic missing data problem, solvable with an Expectation-Maximization (EM) algorithm.\n\nThe algorithm proceeds as follows:\n1.  **Initialization**: At iteration $t=0$, we require an initial estimate for the translational efficiencies, $\\boldsymbol{\\theta}^{(0)}$. The problem specifies an initialization that combines the unique-read information with a baseline term $\\lambda$ to avoid zero estimates for genes with no unique reads.\n    The baseline is the global mean TE calculated from unique reads:\n    $$ \\lambda = \\frac{\\sum_{i=1}^G u_i}{\\sum_{i=1}^G m_i} $$\n    The initial TE for gene $g$ is:\n    $$ \\theta_g^{(0)} = \\frac{u_g}{m_g} + \\lambda $$\n2.  **Iteration**: The algorithm iterates between an E-step and an M-step.\n    -   **E-Step (Expectation)**: At iteration $t$, given the current TE estimates $\\boldsymbol{\\theta}^{(t)}$, we calculate the expected allocation of the $M$ ambiguous reads. The probability (or responsibility) that an ambiguous read belongs to gene $g$ is proportional to the expected number of RPFs from that gene, which is $m_g \\theta_g^{(t)}$. Thus, the responsibility for gene $g$ is:\n        $$ r_g^{(t)} = \\frac{m_g \\theta_g^{(t)}}{\\sum_{i=1}^G m_i \\theta_i^{(t)}} $$\n        The expected number of ambiguous reads allocated to gene $g$, denoted $a_g^{(t)}$, is then:\n        $$ a_g^{(t)} = M \\cdot r_g^{(t)} $$\n    -   **M-Step (Maximization)**: Using the expected allocation $a_g^{(t)}$, we update the TE estimate for each gene to get $\\boldsymbol{\\theta}^{(t+1)}$. The updated total RPF count for gene $g$ is $u_g + a_g^{(t)}$. The new TE estimate that maximizes the Poisson likelihood is:\n        $$ \\theta_g^{(t+1)} = \\frac{u_g + a_g^{(t)}}{m_g} $$\n3.  **Termination**: The iteration continues until the maximum absolute change in any $\\theta_g$ between successive iterations falls below a tolerance of $10^{-10}$, or until a maximum of $10,000$ iterations is reached.\n\nUpon convergence, the final allocation $\\mathbf{a}$ is taken from the last iteration, and the final TE estimates $\\widehat{\\boldsymbol{\\theta}}$ and the resulting MSE are computed.\n\nThe implementation will apply these three distinct methodologies to each of the four test cases provided, calculating the MSE for each combination of case and scheme.", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the ribosome profiling multi-mapper problem for the given test cases.\n    \"\"\"\n\n    test_cases = [\n        # Case A: balanced paralogs\n        {\n            \"m\": np.array([500, 500]),\n            \"u\": np.array([10, 10]),\n            \"M\": 20,\n            \"theta_star\": np.array([0.04, 0.04])\n        },\n        # Case B: imbalanced TEs with equal mRNA\n        {\n            \"m\": np.array([500, 500]),\n            \"u\": np.array([16, 4]),\n            \"M\": 30,\n            \"theta_star\": np.array([0.08, 0.02])\n        },\n        # Case C: one paralog with zero unique RPFs\n        {\n            \"m\": np.array([400, 200]),\n            \"u\": np.array([2, 0]),\n            \"M\": 22,\n            \"theta_star\": np.array([0.05, 0.02])\n        },\n        # Case D: three paralogs with sparse unique RPFs\n        {\n            \"m\": np.array([300, 150, 50]),\n            \"u\": np.array([4, 1, 0]),\n            \"M\": 19,\n            \"theta_star\": np.array([0.06, 0.03, 0.015])\n        }\n    ]\n\n    all_mse_results = []\n\n    for case in test_cases:\n        m, u, M, theta_star = case[\"m\"], case[\"u\"], case[\"M\"], case[\"theta_star\"]\n        G = len(m) # Number of genes in the paralog group\n\n        # --- Scheme 1: Uniform allocation ---\n        a_uniform = M / G\n        theta_hat_uniform = (u + a_uniform) / m\n        mse_uniform = np.mean((theta_hat_uniform - theta_star)**2)\n        all_mse_results.append(mse_uniform)\n\n        # --- Scheme 2: Proportional-to-mRNA allocation ---\n        # A small epsilon is added to the denominator to prevent division by zero\n        # if total mRNA count is zero, though not the case in test data.\n        sum_m = np.sum(m)\n        a_proportional = M * m / (sum_m if sum_m > 0 else 1.0)\n        theta_hat_proportional = (u + a_proportional) / m\n        mse_proportional = np.mean((theta_hat_proportional - theta_star)**2)\n        all_mse_results.append(mse_proportional)\n\n        # --- Scheme 3: Iterative maximum-likelihood allocation ---\n        # Initialization\n        sum_u_total = np.sum(u)\n        sum_m_total = np.sum(m)\n        \n        # Prevent division by zero, though not in test data.\n        if sum_m_total > 0:\n            lambda_baseline = sum_u_total / sum_m_total\n        else:\n            lambda_baseline = 0\n            \n        theta_t = u / m + lambda_baseline\n        \n        # Iteration\n        max_iter = 10000\n        tolerance = 1e-10\n        a_iter = np.zeros_like(m, dtype=float)\n\n        for _ in range(max_iter):\n            theta_prev = theta_t.copy()\n            \n            # E-step: calculate responsibilities and expected allocations\n            weighted_sum = np.sum(m * theta_t)\n            if weighted_sum > 0:\n                responsibilities = (m * theta_t) / weighted_sum\n            else:\n                responsibilities = np.ones(G) / G # Fallback to uniform\n            \n            a_iter = M * responsibilities\n            \n            # M-step: update TE estimates\n            theta_t = (u + a_iter) / m\n            \n            # Check for convergence\n            if np.max(np.abs(theta_t - theta_prev)) < tolerance:\n                break\n        \n        # Final calculation after convergence or max iterations\n        theta_hat_iter = theta_t\n        mse_iterative = np.mean((theta_hat_iter - theta_star)**2)\n        all_mse_results.append(mse_iterative)\n\n    # Format output as specified\n    formatted_results = [f\"{res:.6f}\" for res in all_mse_results]\n    print(f\"[{','.join(formatted_results)}]\")\n\n\nsolve()\n```", "id": "2963228"}]}