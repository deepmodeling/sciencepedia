{"hands_on_practices": [{"introduction": "Gene regulatory and protein-protein networks are fundamentally built upon discrete molecular interactions. To model these networks, we must first quantitatively describe the strength of their constituent links. This practice guides you through the derivation of the equilibrium dissociation constant ($K_d$) and promoter occupancy ($\\theta$) from the first principles of reaction kinetics, providing a foundational connection between microscopic rate constants and the macroscopic behavior of a single regulatory interaction [@problem_id:2956839]. Mastering this concept is the first step toward understanding the assembly and function of complex biological networks.", "problem": "In a gene regulatory network (GRN), a transcription factor (TF) binds to a promoter site to regulate transcription. Consider a single TF binding site with bimolecular reversible binding governed by the law of mass action for the reaction $P + L \\rightleftharpoons PL$, where $P$ denotes the unbound promoter, $L$ denotes free TF, and $PL$ denotes the TF-promoter complex. The microscopic association and dissociation rate constants are $k_{\\text{on}}=10^{6}\\,\\text{M}^{-1}\\text{s}^{-1}$ and $k_{\\text{off}}=10^{-2}\\,\\text{s}^{-1}$, respectively. Assume well-mixed conditions, negligible ligand depletion (so free ligand concentration equals total TF concentration), and that the system is at thermodynamic equilibrium. Starting only from the law of mass action and the definition of the equilibrium dissociation constant, first derive an expression for the equilibrium dissociation constant $K_{d}$ in terms of $k_{\\text{on}}$ and $k_{\\text{off}}$, and then derive the equilibrium promoter occupancy (fraction bound) $\\theta$ as a function of free TF concentration $[L]$ and $K_{d}$. Finally, evaluate $K_{d}$ and $\\theta$ at $[L]=10\\,\\text{nM}$. Express $K_{d}$ in molar units and $\\theta$ as a dimensionless decimal. Round both reported values to three significant figures. Provide your final numerical results only.", "solution": "The problem statement undergoes validation. The givens are: the bimolecular reversible reaction $P + L \\rightleftharpoons PL$; the association rate constant $k_{\\text{on}}=10^{6}\\,\\text{M}^{-1}\\text{s}^{-1}$; the dissociation rate constant $k_{\\text{off}}=10^{-2}\\,\\text{s}^{-1}$; the system is at thermodynamic equilibrium; ligand depletion is negligible. The problem requires the derivation of the equilibrium dissociation constant $K_{d}$ and the promoter occupancy $\\theta$, followed by their numerical evaluation for a free transcription factor concentration of $[L]=10\\,\\text{nM}$. The problem is scientifically grounded in the law of mass action, is well-posed, objective, and contains all necessary information for a unique solution. It is therefore deemed valid. We proceed with the derivation and calculation.\n\nFirst, we derive the expression for the equilibrium dissociation constant, $K_{d}$. The reaction is given by $P + L \\rightleftharpoons PL$. According to the law of mass action, the rate of the forward association reaction, $v_{\\text{f}}$, is proportional to the concentrations of the reactants:\n$$\nv_{\\text{f}} = k_{\\text{on}} [P] [L]\n$$\nThe rate of the reverse dissociation reaction, $v_{\\text{r}}$, is proportional to the concentration of the product:\n$$\nv_{\\text{r}} = k_{\\text{off}} [PL]\n$$\nAt thermodynamic equilibrium, the net rate of the reaction is zero, which means the forward and reverse rates are equal: $v_{\\text{f}} = v_{\\text{r}}$.\n$$\nk_{\\text{on}} [P] [L] = k_{\\text{off}} [PL]\n$$\nThe equilibrium dissociation constant, $K_{d}$, is defined by the ratio of concentrations of dissociated species to the concentration of the complex at equilibrium:\n$$\nK_{d} = \\frac{[P][L]}{[PL]}\n$$\nBy rearranging the rate equality from equilibrium, we obtain:\n$$\n\\frac{[P][L]}{[PL]} = \\frac{k_{\\text{off}}}{k_{\\text{on}}}\n$$\nTherefore, the expression for $K_{d}$ in terms of the microscopic rate constants is:\n$$\nK_{d} = \\frac{k_{\\text{off}}}{k_{\\text{on}}}\n$$\nNext, we derive the expression for the equilibrium promoter occupancy, $\\theta$. Occupancy is defined as the fraction of total promoter sites that are bound by the ligand (the transcription factor).\n$$\n\\theta = \\frac{\\text{Concentration of bound promoters}}{\\text{Total concentration of promoters}} = \\frac{[PL]}{[P]_{\\text{total}}}\n$$\nThe total concentration of promoters, $[P]_{\\text{total}}$, is the sum of the concentrations of unbound (free) promoters, $[P]$, and bound promoters, $[PL]$.\n$$\n[P]_{\\text{total}} = [P] + [PL]\n$$\nSubstituting this into the expression for $\\theta$:\n$$\n\\theta = \\frac{[PL]}{[P] + [PL]}\n$$\nFrom the definition of $K_{d}$, we can express the concentration of free promoters, $[P]$, in terms of $[PL]$, $[L]$, and $K_{d}$:\n$$\n[P] = K_{d} \\frac{[PL]}{[L]}\n$$\nSubstituting this expression for $[P]$ into the equation for $\\theta$:\n$$\n\\theta = \\frac{[PL]}{K_{d} \\frac{[PL]}{[L]} + [PL]}\n$$\nThe term $[PL]$ is common to all terms in the fraction and can be cancelled, provided $[PL] > 0$:\n$$\n\\theta = \\frac{1}{\\frac{K_{d}}{[L]} + 1}\n$$\nBy multiplying the numerator and denominator by $[L]$, we obtain the standard form of the binding isotherm, often called the Langmuir-Hill equation for non-cooperative binding:\n$$\n\\theta = \\frac{[L]}{K_{d} + [L]}\n$$\nNow, we proceed to numerical evaluation.\nFirst, we calculate the value of $K_{d}$ using the provided rate constants:\n$$\nK_{d} = \\frac{k_{\\text{off}}}{k_{\\text{on}}} = \\frac{10^{-2}\\,\\text{s}^{-1}}{10^{6}\\,\\text{M}^{-1}\\text{s}^{-1}} = 10^{-8}\\,\\text{M}\n$$\nThe problem requires this value to be rounded to three significant figures, so $K_{d} = 1.00 \\times 10^{-8}\\,\\text{M}$.\n\nNext, we calculate the occupancy $\\theta$ at a free ligand concentration $[L] = 10\\,\\text{nM}$. We must first convert the units of $[L]$ to be consistent with $K_{d}$, which is in Molar (M).\n$$\n[L] = 10\\,\\text{nM} = 10 \\times 10^{-9}\\,\\text{M} = 10^{-8}\\,\\text{M}\n$$\nNow we substitute the numerical values of $[L]$ and $K_{d}$ into the derived expression for $\\theta$:\n$$\n\\theta = \\frac{[L]}{K_{d} + [L]} = \\frac{10^{-8}\\,\\text{M}}{1.00 \\times 10^{-8}\\,\\text{M} + 10^{-8}\\,\\text{M}} = \\frac{10^{-8}\\,\\text{M}}{2.00 \\times 10^{-8}\\,\\text{M}} = \\frac{1}{2} = 0.5\n$$\nThe problem requires this value to be expressed as a dimensionless decimal rounded to three significant figures. Thus, $\\theta = 0.500$.\nThe problem asks for the final numerical results only, which are $K_{d} = 1.00 \\times 10^{-8}\\,\\text{M}$ and $\\theta = 0.500$.", "answer": "$$\\boxed{\\begin{pmatrix} 1.00 \\times 10^{-8} & 0.500 \\end{pmatrix}}$$", "id": "2956839"}, {"introduction": "Moving from a single interaction to a network, we can ask how the position of a node within the network topology affects its importance. Centrality metrics are a class of graph-theoretic tools designed to answer this question. This exercise challenges you to apply the definition of betweenness centrality to one of the most common network motifs, the coherent feed-forward loop (FFL), to quantify the role of each node in mediating the flow of information along shortest paths [@problem_id:2956735]. This analysis reveals how network structure dictates the potential influence of each component.", "problem": "In a gene regulatory network, nodes represent transcription factors and directed edges represent regulatory influence from a regulator to its target. Consider the directed, unweighted network with three transcription factors $A$, $B$, and $C$ forming a coherent feed-forward motif through edges $A \\to B$, $B \\to C$, and $A \\to C$. Using the standard graph-theoretic definition of betweenness centrality for directed graphs based on geodesic (shortest) paths and the commonly used normalization that scales values to the unit interval for a directed network with $n$ nodes, compute the betweenness centrality for each node. Report the centralities in the order $\\big(C_{B}(A), C_{B}(B), C_{B}(C)\\big)$. Then, identify the most central node by returning the index $v^{\\ast}$ of the maximizer in the order $A \\mapsto 1$, $B \\mapsto 2$, $C \\mapsto 3$, using alphabetical tie-breaking if necessary. \n\nExpress your final answer as a single row matrix \n$$\n\\begin{pmatrix}\nC_{B}(A) & C_{B}(B) & C_{B}(C) & v^{\\ast}\n\\end{pmatrix}.\n$$\n\nNo rounding is required. Units are not applicable. Your derivation should begin from the core definitions of directed shortest paths and betweenness centrality and should justify each step.", "solution": "The problem statement has been validated and is deemed valid. It is a well-posed, scientifically grounded problem in network theory as applied to molecular biology. All necessary information is provided, and the definitions are standard. We will now proceed with the solution.\n\nThe problem requires the computation of the normalized betweenness centrality for each node in a specific directed graph, the coherent feed-forward loop. The network consists of $n=3$ nodes, $V = \\{A, B, C\\}$, and a set of directed, unweighted edges, $E = \\{(A, B), (B, C), (A, C)\\}$.\n\nFirst, we must recall the formal definition of betweenness centrality for a node $v$. The unnormalized betweenness centrality, $C_B^{\\text{unnorm}}(v)$, is defined as the sum of the fraction of shortest paths (geodesics) between all pairs of other nodes $(s, t)$ that pass through $v$. Mathematically, this is expressed as:\n$$\nC_B^{\\text{unnorm}}(v) = \\sum_{s \\neq v \\neq t \\in V} \\frac{\\sigma_{st}(v)}{\\sigma_{st}}\n$$\nwhere $\\sigma_{st}$ is the total number of shortest paths from node $s$ to node $t$, and $\\sigma_{st}(v)$ is the number of those shortest paths that pass through node $v$. The node $v$ must be an intermediate node on the path, meaning $s \\neq v$ and $t \\neq v$.\n\nThe problem specifies normalization to the unit interval using the standard formula for directed graphs. The normalization factor is the maximum possible number of pairs of nodes $(s, t)$ for which a node $v$ can be an intermediary. For a directed graph with $n$ nodes, this is $(n-1)(n-2)$. In our case, with $n=3$, the normalization factor is $(3-1)(3-2) = 2 \\times 1 = 2$.\nThe normalized betweenness centrality is therefore:\n$$\nC_B(v) = \\frac{C_B^{\\text{unnorm}}(v)}{(n-1)(n-2)} = \\frac{1}{2} \\sum_{s \\neq v \\neq t \\in V} \\frac{\\sigma_{st}(v)}{\\sigma_{st}}\n$$\n\nTo compute the centralities, we must first identify all pairs of nodes $(s, t)$ and their corresponding shortest paths. The graph is directed and acyclic. The possible paths are:\n\\begin{enumerate}\n    \\item From $A$ to $B$: The only path is $A \\to B$. Its length is $1$. This is the shortest path. So, $\\sigma_{AB} = 1$.\n    \\item From $A$ to $C$: There are two paths: $A \\to C$ with length $1$, and $A \\to B \\to C$ with length $2$. The shortest path (geodesic) is $A \\to C$. Thus, the shortest path length is $d(A,C)=1$, and there is only one such path, $\\sigma_{AC} = 1$.\n    \\item From $B$ to $C$: The only path is $B \\to C$. Its length is $1$. This is the shortest path. So, $\\sigma_{BC} = 1$.\n\\end{enumerate}\nFor all other pairs of distinct nodes, such as $(B, A)$, $(C, A)$, or $(C, B)$, no path exists.\n\nNow, we calculate the unnormalized centrality for each node by examining if it lies on any of the identified shortest paths.\n\nFor node $A$:\nA node can only contribute to the betweenness centrality of another node if it is an intermediate node. Node $A$ is a source node (its in-degree is $0$). It cannot be an intermediate node on any path, let alone a shortest path. Therefore, for all pairs $(s, t)$, $\\sigma_{st}(A) = 0$.\n$$\nC_B^{\\text{unnorm}}(A) = 0\n$$\n\nFor node $C$:\nNode $C$ is a sink node (its out-degree is $0$). It cannot be an intermediate node on any path, as no path can continue from $C$. Therefore, for all pairs $(s, t)$, $\\sigma_{st}(C) = 0$.\n$$\nC_B^{\\text{unnorm}}(C) = 0\n$$\n\nFor node $B$:\nNode $B$ can potentially serve as an intermediate node for a path from $A$ to $C$. The path is $A \\to B \\to C$. However, as established, this path has a length of $2$, while the shortest path from $A$ to $C$ is the direct edge $A \\to C$ with a length of $1$. Since the definition of betweenness centrality is strictly based on geodesics (shortest paths), the longer path $A \\to B \\to C$ does not contribute to the calculation. The only shortest path from $A$ to $C$ is $A \\to C$, which does not pass through $B$. Thus, $\\sigma_{AC}(B) = 0$. There are no other pairs of nodes $(s,t)$ for which $B$ could serve as an intermediary on a shortest path.\nTherefore, the total sum for node $B$ is zero.\n$$\nC_B^{\\text{unnorm}}(B) = \\frac{\\sigma_{AC}(B)}{\\sigma_{AC}} = \\frac{0}{1} = 0\n$$\n\nThe unnormalized centralities for all nodes are zero. Applying the normalization factor of $2$ does not change this result:\n$$\nC_B(A) = \\frac{0}{2} = 0\n$$\n$$\nC_B(B) = \\frac{0}{2} = 0\n$$\n$$\nC_B(C) = \\frac{0}{2} = 0\n$$\nThis result is a direct consequence of the direct edge $A \\to C$, which makes the path through $B$ non-geodesic. Without this edge, node $B$ would have a non-zero centrality.\n\nFinally, we must identify the most central node, $v^{\\ast}$. The centralities are $C_B(A)=0$, $C_B(B)=0$, and $C_B(C)=0$. Since all values are equal, we have a three-way tie. The problem specifies alphabetical tie-breaking. Alphabetically, $A$ precedes $B$ and $C$.\nThe node indexing is given as $A \\mapsto 1$, $B \\mapsto 2$, $C \\mapsto 3$.\nTherefore, the most central node is $A$, and its index is $v^{\\ast} = 1$.\n\nThe final answer is to be reported in a single row matrix $\\begin{pmatrix} C_B(A) & C_B(B) & C_B(C) & v^{\\ast} \\end{pmatrix}$.\nSubstituting the computed values, we have:\n$\\begin{pmatrix} 0 & 0 & 0 & 1 \\end{pmatrix}$.", "answer": "$$\n\\boxed{\n\\begin{pmatrix}\n0 & 0 & 0 & 1\n\\end{pmatrix}\n}\n$$", "id": "2956735"}, {"introduction": "While static structural analysis is insightful, the ultimate purpose of many network motifs lies in their dynamic function. In this advanced practice, we will revisit the coherent feed-forward loop and model its behavior over time using a system of ordinary differential equations (ODEs). By simulating the motif's response to different input signals, you will discover how its specific architecture enables it to function as a \"persistence detector,\" a filter that rejects transient noise while responding to sustained stimuli [@problem_id:2956867]. This exercise provides a powerful illustration of the core principle that network structure determines biological function.", "problem": "Construct a dynamic model for a coherent type-1 feedforward loop in a gene regulatory network, and use it to algorithmically test for persistence detection in response to input steps and short pulses. The network consists of three nodes: an upstream transcription factor $X$, an intermediate transcription factor $Y$ activated by $X$, and a target gene product $Z$ activated by both $X$ and $Y$. The input $u(t)$ is an external signal that controls the synthesis of $X$. The desired model and analysis must be derived and implemented strictly from the following fundamental base:\n\n- Central Dogma of Molecular Biology and gene regulation: a transcription factor regulates a target gene’s synthesis rate through promoter occupancy, and gene products degrade proportionally to their concentrations.\n- Mass-action degradation: each species $S \\in \\{X,Y,Z\\}$ decays with a term proportional to its concentration, with decay constant $\\gamma_S$.\n- Hill-type activation for a single activator: the promoter occupancy is a saturating function of the activator concentration, parameterized by Hill coefficient $n$ and half-saturation constant $K$.\n- For the $Z$ promoter that integrates $X$ and $Y$ with an AND logic, assume independent binding of $X$ and $Y$ to distinct regulatory sites on the promoter, such that the promoter activity is proportional to the joint occupancy under independence.\n\nFrom these principles, derive a system of ordinary differential equations (ODEs) for $X$, $Y$, and $Z$ driven by $u(t)$, with initial conditions $X(0)=0$, $Y(0)=0$, and $Z(0)=0$. All concentrations are in arbitrary consistent units, and time is in arbitrary time units. You must implement two input stimuli for each parameter set:\n\n- Sustained step: $u(t)=u_{\\mathrm{amp}}$ for all $t \\ge 0$.\n- Finite pulse: $u(t)=u_{\\mathrm{amp}}$ for $0 \\le t < T_{\\mathrm{pulse}}$ and $u(t)=0$ for $t \\ge T_{\\mathrm{pulse}}$.\n\nFor each parameter set, simulate the ODEs over a finite horizon $[0, T_{\\mathrm{end}}]$. Define “threshold crossing” for $Z$ as the existence of some $t \\in [0, T_{\\mathrm{end}}]$ such that $Z(t) \\ge z_{\\mathrm{thresh}}$. Define “persistence detection” to be true if and only if the sustained step causes threshold crossing while the finite pulse does not cause threshold crossing. For each test case below, your program must output a boolean indicating whether persistence detection holds.\n\nTest suite (each line is one test case; use the given symbols and values exactly as stated):\n\n- Case $1$ (happy path, slow $Y$ and stringent $Z$ gate): $ \\alpha_X=5.0$, $ \\gamma_X=1.0$, $ \\alpha_Y=0.6$, $ \\gamma_Y=0.1$, $ K_{XY}=3.0$, $ n_{XY}=2.0$, $ \\alpha_Z=1.0$, $ \\gamma_Z=0.5$, $ K_{XZ}=3.0$, $ n_{XZ}=2.0$, $ K_{YZ}=4.0$, $ n_{YZ}=2.0$, $ u_{\\mathrm{amp}}=1.0$, $ T_{\\mathrm{pulse}}=10.0$, $ T_{\\mathrm{end}}=120.0$, $ z_{\\mathrm{thresh}}=0.6$.\n- Case $2$ (edge case, fast and strong $Y$ makes short pulse elicit response): $ \\alpha_X=5.0$, $ \\gamma_X=1.0$, $ \\alpha_Y=3.0$, $ \\gamma_Y=0.5$, $ K_{XY}=1.0$, $ n_{XY}=2.0$, $ \\alpha_Z=1.0$, $ \\gamma_Z=0.5$, $ K_{XZ}=1.0$, $ n_{XZ}=2.0$, $ K_{YZ}=1.0$, $ n_{YZ}=2.0$, $ u_{\\mathrm{amp}}=1.0$, $ T_{\\mathrm{pulse}}=10.0$, $ T_{\\mathrm{end}}=60.0$, $ z_{\\mathrm{thresh}}=0.6$.\n- Case $3$ (low cooperativity, stricter $Z$ gate still yields persistence detection): $ \\alpha_X=5.0$, $ \\gamma_X=1.0$, $ \\alpha_Y=0.4$, $ \\gamma_Y=0.1$, $ K_{XY}=3.0$, $ n_{XY}=1.0$, $ \\alpha_Z=1.0$, $ \\gamma_Z=0.5$, $ K_{XZ}=3.0$, $ n_{XZ}=1.0$, $ K_{YZ}=3.0$, $ n_{YZ}=1.0$, $ u_{\\mathrm{amp}}=1.0$, $ T_{\\mathrm{pulse}}=6.0$, $ T_{\\mathrm{end}}=120.0$, $ z_{\\mathrm{thresh}}=0.5$.\n- Case $4$ (weak $Z$ synthesis prevents any threshold crossing): $ \\alpha_X=5.0$, $ \\gamma_X=1.0$, $ \\alpha_Y=0.6$, $ \\gamma_Y=0.1$, $ K_{XY}=3.0$, $ n_{XY}=2.0$, $ \\alpha_Z=0.2$, $ \\gamma_Z=0.5$, $ K_{XZ}=3.0$, $ n_{XZ}=2.0$, $ K_{YZ}=4.0$, $ n_{YZ}=2.0$, $ u_{\\mathrm{amp}}=1.0$, $ T_{\\mathrm{pulse}}=10.0$, $ T_{\\mathrm{end}}=120.0$, $ z_{\\mathrm{thresh}}=0.6$.\n\nYour program must implement the derived ODE model, numerically integrate it for both stimuli per case, and determine the boolean “persistence detection” outcome for each case. Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets (e.g., “[result1,result2,result3,result4]”), where each result is a boolean corresponding to the cases listed above, in order.", "solution": "We construct and analyze a coherent type-1 feedforward loop using ordinary differential equations grounded in core principles of gene regulation. The network’s logic is as follows: species $X$ is synthesized proportionally to an external input $u(t)$ and degrades with first-order kinetics; $Y$ is synthesized from a promoter activated by $X$ and degrades with first-order kinetics; $Z$ is synthesized from a promoter that requires both $X$ and $Y$ for activation (logical AND) and also degrades with first-order kinetics.\n\nPrinciples used:\n\n- Central Dogma of Molecular Biology and standard gene regulation imply that the synthesis rate of a gene product can be modeled as a promoter activity (occupancy) multiplied by a maximal synthesis rate.\n- Mass-action degradation yields a linear decay term $-\\gamma_S S$ for each species $S \\in \\{X,Y,Z\\}$ with decay constant $\\gamma_S$.\n- For an activator at concentration $A$ binding a promoter with $n$ identical effective binding sites and half-saturation $K$, the promoter occupancy follows a Hill function as a well-tested phenomenological model. This provides a smooth, saturating activation that increases with $A$.\n- For two independent activators $X$ and $Y$ acting as an AND gate, independent binding to distinct sites yields a joint probability of both sites being occupied given by the product of their individual occupancies.\n\nDerivation of the ODE model:\n\n- Species $X$: its synthesis is proportional to the external input $u(t)$ with a maximal rate $\\alpha_X$, and it degrades at rate $\\gamma_X X$. Hence\n$$\n\\frac{dX}{dt} = \\alpha_X\\, u(t) - \\gamma_X X.\n$$\n\n- Species $Y$: its synthesis rate depends on $X$ via a Hill-type activation with coefficient $n_{XY}$ and half-saturation $K_{XY}$, scaled by a maximal rate $\\alpha_Y$. The decay is $-\\gamma_Y Y$. Therefore\n$$\n\\frac{dY}{dt} = \\alpha_Y \\cdot \\frac{X^{n_{XY}}}{K_{XY}^{n_{XY}} + X^{n_{XY}}} - \\gamma_Y Y.\n$$\n\n- Species $Z$: its promoter requires both $X$ and $Y$. Under independent binding and AND logic, the activity is the product of the occupancy due to $X$ and the occupancy due to $Y$, each represented by a Hill function with parameters $(n_{XZ}, K_{XZ})$ and $(n_{YZ}, K_{YZ})$, respectively. With maximal rate $\\alpha_Z$ and decay $-\\gamma_Z Z$, we obtain\n$$\n\\frac{dZ}{dt} = \\alpha_Z \\cdot \\left( \\frac{X^{n_{XZ}}}{K_{XZ}^{n_{XZ}} + X^{n_{XZ}}} \\right) \\cdot \\left( \\frac{Y^{n_{YZ}}}{K_{YZ}^{n_{YZ}} + Y^{n_{YZ}}} \\right) - \\gamma_Z Z.\n$$\n\nInitial conditions are $X(0)=0$, $Y(0)=0$, $Z(0)=0$.\n\nStimuli definitions:\n\n- Sustained step: $u(t)=u_{\\mathrm{amp}}$ for all $t \\ge 0$.\n- Finite pulse: $u(t)=u_{\\mathrm{amp}}$ for $0 \\le t < T_{\\mathrm{pulse}}$ and $u(t)=0$ for $t \\ge T_{\\mathrm{pulse}}$.\n\nAlgorithmic detection criterion:\n\n- For each parameter set, integrate the ODE system on $[0, T_{\\mathrm{end}}]$ for both the sustained step and the finite pulse.\n- For each run, compute $\\max_{t \\in [0, T_{\\mathrm{end}}]} Z(t)$.\n- Define a threshold crossing if $\\max Z(t) \\ge z_{\\mathrm{thresh}}$.\n- Define persistence detection to be true if the sustained step crosses the threshold while the finite pulse does not.\n\nRationale for persistence detection in a coherent type-1 feedforward loop with AND integration:\n\n- The direct activation $X \\rightarrow Z$ provides a fast input, while the indirect arm $X \\rightarrow Y \\rightarrow Z$ introduces a delay because $Y$ must accumulate before $Z$’s promoter is fully active.\n- For a short pulse, $X$ rises and falls rapidly, but $Y$ does not have sufficient time to build up; therefore the AND gate remains largely inactive, and $Z$ stays below threshold.\n- For a sustained input, $Y$ accumulates and, together with $X$, drives $Z$ above the threshold. This implements a persistence detector that rejects brief inputs while accepting longer ones.\n\nNumerical implementation details:\n\n- The ODE system is stiff to a modest degree depending on parameters; a robust explicit solver with adaptive step sizes (for example, a Runge–Kutta method) suffices over the given horizons.\n- To evaluate threshold crossing reliably, the numerical solution is sampled on a sufficiently fine time grid within $[0, T_{\\mathrm{end}}]$ and the maximum of $Z(t)$ is computed.\n- The test suite comprises $4$ cases:\n  - Case $1$ uses slower $Y$ dynamics and a relatively stringent $Z$ gate so that only the sustained step crosses the threshold.\n  - Case $2$ uses faster and stronger $Y$ activation such that even a short pulse yields sufficient $Y$, causing the finite pulse to cross the threshold; persistence detection should be false.\n  - Case $3$ uses lower cooperativity ($n=1$) with stricter $Z$ gating to still yield persistence detection behavior.\n  - Case $4$ uses weak $Z$ synthesis so that no threshold crossing occurs even for the sustained step; persistence detection should be false.\n\nThe implementation computes the boolean outcome for each case and prints a single line in the required format: a bracketed, comma-separated list of booleans in order, e.g., `[True,False,True,False]`.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.integrate import solve_ivp\n\ndef hill_activation(a, K, n):\n    # Hill activation function a^n / (K^n + a^n)\n    # Ensure non-negativity for numerical robustness\n    a = max(a, 0.0)\n    return (a ** n) / (K ** n + a ** n) if (K > 0) else 1.0\n\ndef and_gate_activity(x, y, Kx, nx, Ky, ny):\n    # Independent binding AND gate: product of two Hill activations\n    return hill_activation(x, Kx, nx) * hill_activation(y, Ky, ny)\n\ndef simulate_case(params, stimulus_type):\n    # Unpack parameters\n    alpha_x = params['alpha_x']\n    gamma_x = params['gamma_x']\n    alpha_y = params['alpha_y']\n    gamma_y = params['gamma_y']\n    K_xy = params['K_xy']\n    n_xy = params['n_xy']\n    alpha_z = params['alpha_z']\n    gamma_z = params['gamma_z']\n    K_xz = params['K_xz']\n    n_xz = params['n_xz']\n    K_yz = params['K_yz']\n    n_yz = params['n_yz']\n    u_amp = params['u_amp']\n    T_pulse = params['T_pulse']\n    T_end = params['T_end']\n\n    # Define input u(t)\n    if stimulus_type == 'step':\n        def u(t):\n            return u_amp\n    elif stimulus_type == 'pulse':\n        def u(t):\n            return u_amp if (t  T_pulse) else 0.0\n    else:\n        raise ValueError(\"Unknown stimulus_type\")\n\n    # ODE system\n    def ode(t, state):\n        X, Y, Z = state\n        dXdt = alpha_x * u(t) - gamma_x * X\n        f_XY = hill_activation(X, K_xy, n_xy)\n        dYdt = alpha_y * f_XY - gamma_y * Y\n        f_AND = and_gate_activity(X, Y, K_xz, n_xz, K_yz, n_yz)\n        dZdt = alpha_z * f_AND - gamma_z * Z\n        return [dXdt, dYdt, dZdt]\n\n    # Initial conditions\n    y0 = [0.0, 0.0, 0.0]\n\n    # Time grid for evaluation\n    dt = 0.05\n    t_eval = np.arange(0.0, T_end + dt, dt)\n\n    # Integrate ODEs\n    sol = solve_ivp(\n        ode,\n        (0.0, T_end),\n        y0,\n        method='RK45',\n        t_eval=t_eval,\n        rtol=1e-7,\n        atol=1e-9\n    )\n\n    # Extract Z over time and compute max\n    Z_traj = sol.y[2]\n    # Numerical safety: clip tiny negatives\n    Z_traj = np.maximum(Z_traj, 0.0)\n    Z_max = float(np.max(Z_traj))\n    return Z_max\n\ndef solve():\n    # Define the test cases from the problem statement.\n    test_cases = [\n        # Case 1\n        {\n            'alpha_x': 5.0, 'gamma_x': 1.0,\n            'alpha_y': 0.6, 'gamma_y': 0.1, 'K_xy': 3.0, 'n_xy': 2.0,\n            'alpha_z': 1.0, 'gamma_z': 0.5, 'K_xz': 3.0, 'n_xz': 2.0, 'K_yz': 4.0, 'n_yz': 2.0,\n            'u_amp': 1.0, 'T_pulse': 10.0, 'T_end': 120.0, 'z_thresh': 0.6\n        },\n        # Case 2\n        {\n            'alpha_x': 5.0, 'gamma_x': 1.0,\n            'alpha_y': 3.0, 'gamma_y': 0.5, 'K_xy': 1.0, 'n_xy': 2.0,\n            'alpha_z': 1.0, 'gamma_z': 0.5, 'K_xz': 1.0, 'n_xz': 2.0, 'K_yz': 1.0, 'n_yz': 2.0,\n            'u_amp': 1.0, 'T_pulse': 10.0, 'T_end': 60.0, 'z_thresh': 0.6\n        },\n        # Case 3\n        {\n            'alpha_x': 5.0, 'gamma_x': 1.0,\n            'alpha_y': 0.4, 'gamma_y': 0.1, 'K_xy': 3.0, 'n_xy': 1.0,\n            'alpha_z': 1.0, 'gamma_z': 0.5, 'K_xz': 3.0, 'n_xz': 1.0, 'K_yz': 3.0, 'n_yz': 1.0,\n            'u_amp': 1.0, 'T_pulse': 6.0, 'T_end': 120.0, 'z_thresh': 0.5\n        },\n        # Case 4\n        {\n            'alpha_x': 5.0, 'gamma_x': 1.0,\n            'alpha_y': 0.6, 'gamma_y': 0.1, 'K_xy': 3.0, 'n_xy': 2.0,\n            'alpha_z': 0.2, 'gamma_z': 0.5, 'K_xz': 3.0, 'n_xz': 2.0, 'K_yz': 4.0, 'n_yz': 2.0,\n            'u_amp': 1.0, 'T_pulse': 10.0, 'T_end': 120.0, 'z_thresh': 0.6\n        },\n    ]\n\n    results = []\n    for params in test_cases:\n        # Simulate sustained step\n        Zmax_step = simulate_case(params, 'step')\n        # Simulate finite pulse\n        Zmax_pulse = simulate_case(params, 'pulse')\n        # Threshold crossing checks\n        z_thresh = params['z_thresh']\n        crossed_step = Zmax_step >= z_thresh\n        crossed_pulse = Zmax_pulse >= z_thresh\n        # Persistence detection: step crosses AND pulse does not\n        result = (crossed_step and (not crossed_pulse))\n        results.append(result)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "2956867"}]}