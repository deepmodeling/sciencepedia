{"hands_on_practices": [{"introduction": "A successful genome-wide CRISPR screen begins long before the first cell is transduced; it starts with rigorous quantitative planning. This exercise guides you through the essential upfront calculations required to ensure adequate library representation, a cornerstone of statistical power in pooled screens. By modeling viral transduction and cell survival with fundamental probability theory, you will determine the number of starting cells needed to achieve a desired experimental coverage, a critical skill for designing robust and cost-effective experiments [@problem_id:2946912].", "problem": "A laboratory is planning a genome-wide Clustered Regularly Interspaced Short Palindromic Repeats (CRISPR) knockout screen using a lentiviral single guide RNA library of size $L = 120{,}000$. The goal is to achieve post-selection library coverage of $c = 300$ in terms of the expected number of integrated guide constructs represented in the surviving cell population per guide. The following experimental design and assumptions apply, grounded in standard viral transduction modeling.\n\n- The multiplicity of infection (MOI) is $\\lambda = 0.3$, understood as the mean number of virions delivered per cell.\n- Each virion independently yields a successful genomic integration with probability $\\eta = 0.20$ (transduction efficiency). Assume independent “thinning” of virion arrival events.\n- The number of successful integrations per cell is modeled as a Poisson random variable with mean $\\mu = \\lambda \\eta$.\n- Antibiotic selection eliminates all cells that have zero integrations. Among cells with at least one integration, survival occurs independently with probability $s = 0.80$.\n- Coverage is defined as the expected total number of surviving integrated guide constructs divided by $L$.\n\nLet $N$ be the number of starting cells seeded prior to transduction. Using only the Poisson modeling assumptions stated above and first principles of expectation, derive an expression for $N$ that achieves the desired coverage $c$, and compute its value for the given parameters. Give your answer as an exact integer number of cells (no rounding or approximation). Express the number of cells as an integer count.", "solution": "The problem statement has been validated and is determined to be scientifically grounded, well-posed, and objective. It is a standard problem in the quantitative modeling of genome-wide CRISPR screens. We may therefore proceed with a formal derivation.\n\nThe problem asks for the initial number of cells, $N$, required to achieve a specified post-selection library coverage, $c$. The derivation will proceed from first principles based on the provided probabilistic model.\n\nFirst, we define the parameters given in the problem statement:\n- Size of the single guide RNA (sgRNA) library: $L = 120,000$.\n- Desired post-selection coverage: $c = 300$.\n- Multiplicity of infection (MOI): $\\lambda = 0.3$.\n- Transduction efficiency (probability of integration per virion): $\\eta = 0.20$.\n- Survival probability for cells with at least one integration: $s = 0.80$.\n\nThe model states that the number of successful integrations per cell, let us denote this by the random variable $K$, follows a Poisson distribution. The mean of this distribution, $\\mu$, is the product of the mean number of virions delivered per cell ($\\lambda$) and the probability that any single virion successfully integrates ($\\eta$). This is based on the principle of Poisson thinning.\n$$ \\mu = E[K] = \\lambda \\eta $$\nThe probability mass function for $K$ is therefore:\n$$ P(K=k) = \\frac{\\exp(-\\mu) \\mu^k}{k!} \\quad \\text{for } k = 0, 1, 2, \\dots $$\n\nThe goal is to find the total number of starting cells, $N$. The linkage between $N$ and the desired coverage $c$ is the expected total number of surviving integrated sgRNA constructs. Let us denote this quantity by $E_{total}$. The problem defines coverage as:\n$$ c = \\frac{E_{total}}{L} $$\nThis implies $E_{total} = c L$.\n\nThe total expectation $E_{total}$ is the sum of the expected contributions from each of the $N$ independent and identically distributed starting cells. Let $E_C$ be the expected number of surviving integrated constructs from a single starting cell. Then, by linearity of expectation:\n$$ E_{total} = \\sum_{i=1}^{N} E_C = N E_C $$\n\nOur central task is to derive an expression for $E_C$. Let $K_S$ be the random variable representing the number of surviving integrated constructs from one cell. A construct survives if and only if the cell it integrated into survives the selection process.\nAccording to the problem:\n1. If a cell has $K=0$ integrations, it is eliminated by antibiotic selection. Thus, the number of surviving constructs is $0$.\n2. If a cell has $K=k \\ge 1$ integrations, it survives the second selection step with probability $s$. If it survives, all $k$ of its integrated constructs survive. If it does not survive (with probability $1-s$), the number of surviving constructs is $0$.\n\nWe can calculate $E_C = E[K_S]$ using the law of total expectation, conditioning on the number of initial integrations, $K$.\n$$ E_C = E[K_S] = E[E[K_S | K]] = \\sum_{k=0}^{\\infty} E[K_S | K=k] P(K=k) $$\n\nWe evaluate the conditional expectation $E[K_S | K=k]$ for each possible value of $k$:\n- For $k=0$, the cell is eliminated. So, $E[K_S | K=0] = 0$.\n- For $k \\ge 1$, the cell survives with probability $s$, in which case it contributes $k$ constructs. It is eliminated with probability $1-s$, contributing $0$ constructs. The expected number of surviving constructs, given $k$ initial integrations, is therefore $E[K_S | K=k] = k \\cdot s + 0 \\cdot (1-s) = ks$.\n\nSubstituting these into the sum for $E_C$:\n$$ E_C = E[K_S | K=0] P(K=0) + \\sum_{k=1}^{\\infty} E[K_S | K=k] P(K=k) $$\n$$ E_C = 0 \\cdot P(K=0) + \\sum_{k=1}^{\\infty} (ks) P(K=k) $$\n$$ E_C = s \\sum_{k=1}^{\\infty} k P(K=k) $$\n\nThe sum $\\sum_{k=1}^{\\infty} k P(K=k)$ is related to the expectation of the Poisson-distributed random variable $K$. The expectation of $K$ is:\n$$ E[K] = \\sum_{k=0}^{\\infty} k P(K=k) = 0 \\cdot P(K=0) + \\sum_{k=1}^{\\infty} k P(K=k) = \\sum_{k=1}^{\\infty} k P(K=k) $$\nSince $E[K] = \\mu$, we have:\n$$ E_C = s \\cdot E[K] = s \\mu $$\n\nNow we can relate the total number of cells $N$ to the coverage $c$.\nWe have $E_{total} = N E_C = N s \\mu$.\nSubstituting this into the definition of coverage:\n$$ c = \\frac{N s \\mu}{L} $$\nSolving for $N$, we obtain the general expression:\n$$ N = \\frac{c L}{s \\mu} $$\nFinally, substituting $\\mu = \\lambda \\eta$:\n$$ N = \\frac{c L}{s \\lambda \\eta} $$\n\nNow, we compute the numerical value for $N$ using the provided parameters:\n$c = 300$\n$L = 120,000$\n$s = 0.80$\n$\\lambda = 0.3$\n$\\eta = 0.20$\n\n$$ N = \\frac{300 \\times 120,000}{0.80 \\times 0.3 \\times 0.20} $$\nFirst, calculate the numerator:\n$$ 300 \\times 120,000 = 36,000,000 $$\nNext, calculate the denominator:\n$$ 0.80 \\times 0.3 \\times 0.20 = 0.80 \\times 0.06 = 0.048 $$\nNow, perform the division:\n$$ N = \\frac{36,000,000}{0.048} = \\frac{36 \\times 10^6}{48 \\times 10^{-3}} = \\frac{36}{48} \\times 10^{9} $$\nSimplifying the fraction:\n$$ \\frac{36}{48} = \\frac{3 \\times 12}{4 \\times 12} = \\frac{3}{4} = 0.75 $$\nThus,\n$$ N = 0.75 \\times 10^9 = 750,000,000 $$\nThe required number of starting cells is $750,000,000$. This is an exact integer as required.", "answer": "$$\\boxed{750000000}$$", "id": "2946912"}, {"introduction": "Interpreting the results of a CRISPR screen requires a deep understanding of the underlying molecular biology and potential technology-specific artifacts. This practice challenges you to compare CRISPR-Cas9 knockout and CRISPR interference (CRISPRi) in the context of cancer-associated gene amplification, a common source of confounding signals. By reasoning from first principles, you will learn to dissect how phenomena like double-strand break toxicity and repressive chromatin spreading can influence screen outcomes, enabling you to select the appropriate technology and avoid misinterpreting your data [@problem_id:2946920].", "problem": "A pooled genome-scale screen is performed in a human cancer cell line that harbors a focal amplification of a chromosome segment containing an oncogene, here denoted $G^\\*$, present at copy number $C_{\\mathrm{amp}}$ with $C_{\\mathrm{amp}} \\approx 20$, while most of the genome is near $2$ copies. Two screening modalities are run in parallel using the same single-guide Ribonucleic Acid (sgRNA) library: a Clustered Regularly Interspaced Short Palindromic Repeats (CRISPR)-Cas9 nuclease knockout screen and a CRISPR interference (CRISPRi) screen using deactivated Cas9 (dCas9) fused to Krüppel-associated box (KRAB). The cell line is wild-type for tumor protein p53 (TP53).\n\nThe following observations are made: in the CRISPR-Cas9 nuclease screen, many sgRNAs mapping anywhere within the amplified segment (including intergenic regions) produce strong negative viability scores that correlate with $C_{\\mathrm{amp}}$. In contrast, in the CRISPR interference screen, strong negative viability scores are observed for sgRNAs targeting the transcription start site region of $G^\\*$ and for a subset of sgRNAs targeting nearby noncoding regulatory elements within a few kilobases, but not for sgRNAs targeting distant intergenic sites within the amplicon.\n\nUsing only fundamental principles and core definitions, argue when CRISPR interference avoids copy-number–mediated double-strand break toxicity and identify scenarios under which CRISPR interference could still be confounded by transcriptional dependencies in amplified regions. Base your reasoning on the following widely accepted facts: CRISPR-Cas9 nuclease creates double-strand breaks (DSBs) at DNA targets, DSB load activates DNA damage responses including p53-dependent checkpoints, CRISPR interference uses dCas9-KRAB to repress transcription without introducing DSBs, copy-number amplification increases the number of matching DNA target sites, and KRAB-mediated repression acts through chromatin modification that can influence nearby regulatory DNA on the kilobase scale.\n\nWhich of the following statements are most consistent with these principles and the observations? Select all that apply.\n\nA. CRISPR interference avoids copy-number–mediated toxicity observed in CRISPR-Cas9 nuclease screens because dCas9-KRAB does not introduce DSBs; therefore the viability effect linked to the DNA damage response does not scale with the number of DNA target copies $C_{\\mathrm{amp}}$.\n\nB. Despite avoiding DSBs, CRISPR interference can still yield apparent amplicon-linked dependencies if targeting a promoter within a tandemly duplicated region deposits KRAB-linked repressive chromatin that spreads over adjacent regulatory DNA (for example, enhancers located within a few kilobases), thereby reducing $G^\\*$ expression and producing a dependency that correlates with $C_{\\mathrm{amp}}$.\n\nC. CRISPR interference is immune to copy-number–related artifacts because dCas9-KRAB binding is governed by messenger Ribonucleic Acid (mRNA) abundance rather than Deoxyribonucleic Acid (DNA) template abundance; thus $C_{\\mathrm{amp}}$ cannot influence guide occupancy.\n\nD. In extremely high-copy amplicons with repetitive promoter sequences (for example, extrachromosomal DNA where $C_{\\mathrm{amp}} \\gg 10$), a single CRISPR interference sgRNA matching that promoter can bind many identical promoter copies, reducing the total transcript output from the amplicon in proportion to $C_{\\mathrm{amp}}$ and yielding an apparent copy-number–correlated dependency even if each individual gene copy would not be essential at baseline copy number.\n\nE. The only way CRISPR interference can be confounded in amplified regions is via off-target cleavage at mismatched loci, which is eliminated by using a nuclease-dead Cas9; therefore no copy-number–related confounders remain.\n\nF. CRISPR interference sgRNAs that target duplicated noncoding elements co-amplified within the segment (for example, a high-output enhancer sequence driving $G^\\*$ that has been tandemly duplicated) can silence that enhancer, causing an amplicon enhancer dependency whose magnitude tracks $C_{\\mathrm{amp}}$, even when the intended on-target gene adjacent to the guide is not itself causal for fitness.\n\nAnswer choices have been written to include plausible but incorrect reasoning. Your task is to select the statements that best capture when CRISPR interference avoids copy-number–mediated DSB toxicity and when it could still be confounded by transcriptional dependencies in amplified regions.", "solution": "The user has provided a problem statement regarding the interpretation of genome-wide CRISPR screens in a cancer cell line with a focal gene amplification. The problem is scientifically valid, well-posed, and based on established principles of molecular biology and functional genomics. I will now proceed to derive the solution.\n\nThe core of the problem lies in the differential effects of two CRISPR-based technologies—CRISPR-Cas9 nuclease knockout and CRISPR interference (CRISPRi)—in the context of a high copy number amplification ($C_{\\mathrm{amp}} \\approx 20$). The cell line is wild-type for TP53, which is a critical detail.\n\nFirst, let us analyze the CRISPR-Cas9 nuclease screen. The Cas9 nuclease is programmed by a single-guide RNA (sgRNA) to create a double-strand break (DSB) at a specific DNA target. In a region amplified $\\approx 20$-fold, an sgRNA targeting any sequence within that amplicon will generate $\\approx 20$ DSBs simultaneously. In a TP53-proficient background, a high DSB load robustly activates the DNA Damage Response (DDR), leading to p53-mediated cell cycle arrest or apoptosis. This results in a strong negative viability phenotype (cell depletion) that is independent of the function of the targeted DNA sequence. The effect is a direct consequence of the massively increased DNA damage, and its magnitude correlates with the copy number, $C_{\\mathrm{amp}}$. This explains the observation that \"many sgRNAs mapping anywhere within the amplified segment (including intergenic regions) produce strong negative viability scores\". This phenomenon is a well-known artifact in CRISPR-Cas9 knockout screens.\n\nNext, we analyze the CRISPR interference (CRISPRi) screen. This technology uses a nuclease-deactivated Cas9 (dCas9) fused to a transcriptional repressor domain, typically Krüppel-associated box (KRAB). dCas9-KRAB binds to target DNA as directed by the sgRNA but does not cleave it. Thus, it does not generate DSBs. Its function is to recruit cellular machinery that establishes repressive heterochromatin, thereby silencing transcription at and near the target locus. This mechanism inherently avoids the DSB-dependent toxicity observed with Cas9 nuclease. The observed negative viability scores are therefore expected to result from the transcriptional repression of genes or regulatory elements that are essential for cell survival. The observation that hits are confined to the transcription start site (TSS) of the oncogene $G^\\*$ and nearby regulatory elements, but not distant intergenic sites, is consistent with this mechanism. The cell's viability depends on the expression of $G^\\*$, an example of oncogene addiction.\n\nThe question asks when CRISPRi avoids this DSB toxicity and when it can still be confounded.\n1.  **Avoiding Toxicity**: CRISPRi avoids the copy-number-mediated DSB toxicity precisely because dCas9 does not create DSBs.\n2.  **Potential Confounders**: Despite avoiding DSB toxicity, CRISPRi is not free from artifacts, especially in complex genomic regions like amplicons. These can include:\n    *   **Context-Dependent Essentiality**: A gene like $G^\\*$ may not be essential at diploid copy number ($2$) but becomes essential when amplified to $C_{\\mathrm{amp}} \\approx 20$, as the cell becomes \"addicted\" to its high expression. Repressing such a gene causes a viability loss that correlates with $C_{\\mathrm{amp}}$. This is a true biological dependency but can confound the search for universally essential genes.\n    *   **Chromatin Spreading**: The repressive chromatin established by dCas9-KRAB can spread several kilobases from the initial binding site. An sgRNA targeting a non-essential gene or inert region could cause a phenotype if the repression spreads to a nearby essential gene (like $G^\\*$) or a critical regulatory element.\n    *   **Misattribution of Noncoding Hits**: An sgRNA might target a functional noncoding element, such as an enhancer for $G^\\*$. The resulting viability phenotype is real, but screen analysis pipelines often annotate sgRNAs to the nearest gene, leading to the misattribution of the effect to a potentially non-causal \"target\" gene. If such an enhancer is co-amplified, the effect will be stronger.\n\nBased on these principles, I will evaluate each statement.\n\n**A. CRISPR interference avoids copy-number–mediated toxicity observed in CRISPR-Cas9 nuclease screens because dCas9-KRAB does not introduce DSBs; therefore the viability effect linked to the DNA damage response does not scale with the number of DNA target copies $C_{\\mathrm{amp}}$.**\n*   **Analysis**: This statement is fundamentally correct. The absence of nuclease activity in dCas9 is the key reason why CRISPRi is not subject to the massive DSB-induced, p53-dependent cell death that plagues Cas9 nuclease screens in amplified regions. Because no DSBs are formed, the DDR is not activated in a copy-number-dependent manner. This directly addresses the first part of the problem's query.\n*   **Verdict**: **Correct**.\n\n**B. Despite avoiding DSBs, CRISPR interference can still yield apparent amplicon-linked dependencies if targeting a promoter within a tandemly duplicated region deposits KRAB-linked repressive chromatin that spreads over adjacent regulatory DNA (for example, enhancers located within a few kilobases), thereby reducing $G^\\*$ expression and producing a dependency that correlates with $C_{\\mathrm{amp}}$.**\n*   **Analysis**: This describes a valid confounding mechanism based on a known property of KRAB-mediated repression: the spreading of heterochromatin. If an sgRNA targets a sequence near a critical element for $G^\\*$ expression, such as an enhancer, the local chromatin repression can spread to that element, silencing it indirectly. This would create a viability phenotype that is not due to the repression of the intended sgRNA target. This is a plausible scenario for a confounding hit in a CRISPRi screen.\n*   **Verdict**: **Correct**.\n\n**C. CRISPR interference is immune to copy-number–related artifacts because dCas9-KRAB binding is governed by messenger Ribonucleic Acid (mRNA) abundance rather than Deoxyribonucleic Acid (DNA) template abundance; thus $C_{\\mathrm{amp}}$ cannot influence guide occupancy.**\n*   **Analysis**: This statement contains a critical factual error. The CRISPR system, including dCas9-KRAB, targets DNA, not mRNA. The binding of the dCas9-sgRNA complex is determined by the presence of a matching sequence in the genomic DNA. Therefore, the number of available binding sites is directly proportional to the DNA copy number, $C_{\\mathrm{amp}}$. The premise is false, and so is the conclusion.\n*   **Verdict**: **Incorrect**.\n\n**D. In extremely high-copy amplicons with repetitive promoter sequences (for example, extrachromosomal DNA where $C_{\\mathrm{amp}} \\gg 10$), a single CRISPR interference sgRNA matching that promoter can bind many identical promoter copies, reducing the total transcript output from the amplicon in proportion to $C_{\\mathrm{amp}}$ and yielding an apparent copy-number–correlated dependency even if each individual gene copy would not be essential at baseline copy number.**\n*   **Analysis**: This statement accurately describes the phenomenon of context-dependent essentiality driven by gene amplification. Cells can become addicted to the high level of an oncoprotein produced from an amplicon. While the gene might be non-essential at a normal copy number of $2$, the cellular state becomes dependent on its overexpression from $C_{\\mathrm{amp}} \\approx 20$ copies. CRISPRi-mediated repression of this gene would cause a significant drop in its product, leading to a viability defect. The strength of this \"dependency\" is linked to the high copy number itself, making it a \"copy-number-correlated dependency\". This is a key concept in interpreting screens in cancer cells and represents a type of confounder when searching for general vulnerabilities.\n*   **Verdict**: **Correct**.\n\n**E. The only way CRISPR interference can be confounded in amplified regions is via off-target cleavage at mismatched loci, which is eliminated by using a nuclease-dead Cas9; therefore no copy-number–related confounders remain.**\n*   **Analysis**: This statement is incorrect on multiple counts. First, the claim that off-target cleavage is the *only* confounder is false; we have already identified valid confounders in options B, D, and F. Second, while dCas9 eliminates off-target *cleavage*, it can still bind to off-target sites and cause transcriptional repression, which is itself a potential source of confounding effects. The conclusion that \"no copy-number–related confounders remain\" is demonstrably false.\n*   **Verdict**: **Incorrect**.\n\n**F. CRISPR interference sgRNAs that target duplicated noncoding elements co-amplified within the segment (for example, a high-output enhancer sequence driving $G^\\*$ that has been tandemly duplicated) can silence that enhancer, causing an amplicon enhancer dependency whose magnitude tracks $C_{\\mathrm{amp}}$, even when the intended on-target gene adjacent to the guide is not itself causal for fitness.**\n*   **Analysis**: This describes another valid and important confounding scenario in the interpretation of CRISPRi screens, particularly those targeting the noncoding genome. An sgRNA may physically target a noncoding element, but standard analysis pipelines attribute its effect to the nearest annotated gene. If the targeted noncoding element is a crucial enhancer for a distant driver oncogene (like $G^\\*$), silencing it will produce a strong viability phenotype. This effect is then incorrectly blamed on the \"intended on-target gene,\" which may be a non-functional passenger. This is a potent confounder that directly addresses the observation of hits in \"noncoding regulatory elements.\"\n*   **Verdict**: **Correct**.", "answer": "$$\\boxed{ABDF}$$", "id": "2946920"}, {"introduction": "The final step in a screening campaign is to translate raw sequencing counts into reliable biological insights. This computational exercise guides you through building a regression model, similar to those used in state-of-the-art analysis pipelines, to derive adjusted gene essentiality scores from a multi-cell-line dataset. You will implement a ridge regression to correct for known systematic biases, such as gene copy number and expression effects, providing you with hands-on experience in the quantitative methods that power modern functional genomics [@problem_id:2946910].", "problem": "You are given a small, synthetic dataset that mimics a negative-selection genome-wide Clustered Regularly Interspaced Short Palindromic Repeats (CRISPR) screening experiment across multiple cell lines, with per-guide plasmid library counts and post-treatment counts. The objective is to compute adjusted gene scores using a regression that includes copy-number and expression covariates, in the spirit of CERES-like modeling. Your solution must be a complete, runnable program that constructs a linear design matrix from first principles and estimates gene effects via ridge regression.\n\nYou must ground your derivation in the following foundations:\n- The Central Dogma of molecular biology motivates the use of gene expression as a covariate in cellular phenotypes observed after perturbation.\n- Sequencing read counts are nonnegative integers arising from high-throughput sampling and, under standard large-sample approximations, multiplicative effects on counts become additive under a logarithmic transformation. Thus, a multiplicative model on counts leads to an additive linear model on log fold-changes.\n- Ridge regression is a regularized least-squares method that resolves multicollinearity in overparameterized linear models by adding an $\\ell_2$ penalty.\n\nData and definitions:\n- There are $C=3$ cell lines labeled $[$C1, C2, C3$]$.\n- There are $G=4$ genes labeled $[$G1, G2, G3, G4$]$.\n- There are $8$ guides, two per gene, labeled $[$g1, g2, g3, g4, g5, g6, g7, g8$]$ with the mapping:\n  - g1 $\\rightarrow$ G1, g2 $\\rightarrow$ G1\n  - g3 $\\rightarrow$ G2, g4 $\\rightarrow$ G2\n  - g5 $\\rightarrow$ G3, g6 $\\rightarrow$ G3\n  - g7 $\\rightarrow$ G4, g8 $\\rightarrow$ G4\n- Plasmid library counts per guide (in the order $[$g1, g2, g3, g4, g5, g6, g7, g8$]$): $[$$100000$, $90000$, $110000$, $105000$, $95000$, $98000$, $102000$, $101000$$]$.\n- Post-treatment counts per cell line (each list ordered $[$g1, g2, g3, g4, g5, g6, g7, g8$]$):\n  - For C1: $[$$31300$, $30600$, $57970$, $57015$, $92245$, $95258$, $131682$, $123927$$]$.\n  - For C2: $[$$29900$, $29250$, $65780$, $64680$, $59090$, $60956$, $122706$, $115645$$]$.\n  - For C3: $[$$32800$, $31950$, $71610$, $70350$, $104500$, $107800$, $111588$, $105141$$]$.\n- Gene-level covariates provided as cell-line-specific matrices (rows correspond to $[$G1, G2, G3, G4$]$, columns correspond to $[$C1, C2, C3$]$):\n  - Copy-number matrix $\\mathbf{CN}$:\n    $$\n    \\begin{bmatrix}\n    2.0 & 1.0 & 3.0\\\\\n    4.0 & 1.5 & 2.0\\\\\n    1.0 & 5.0 & 1.0\\\\\n    3.0 & 2.0 & 6.0\n    \\end{bmatrix}\n    $$\n  - Expression matrix (for example, log Transcripts Per Million (TPM)) $\\mathbf{EXPR}$:\n    $$\n    \\begin{bmatrix}\n    5.0 & 4.5 & 5.5\\\\\n    2.0 & 2.5 & 1.0\\\\\n    1.0 & 0.5 & 1.5\\\\\n    3.5 & 2.5 & 3.0\n    \\end{bmatrix}\n    $$\n\nModeling and computational tasks:\n1. Compute guide-level log fold-change using the natural logarithm with a pseudocount of $1$. For guide $i$ in cell line $c$ with post-treatment count $P_{i,c}$ and plasmid count $L_i$, define\n   $$\n   y_{i,c} \\equiv \\log\\left(\\frac{P_{i,c} + 1}{L_i + 1}\\right).\n   $$\n2. Aggregate to gene-level by averaging over guides that target the same gene, yielding $y_{g,c}$ for each gene $g$ and cell line $c$.\n3. Standardize each covariate across the full set of gene-cell pairs to zero mean and unit variance. If $x$ denotes either $\\mathrm{CN}$ or $\\mathrm{EXPR}$ flattened across all $(g,c)$, compute\n   $$\n   z = \\frac{x - \\mu_x}{\\sigma_x},\n   $$\n   where $\\mu_x$ is the mean and $\\sigma_x$ is the standard deviation across all entries.\n4. Build a linear model for the gene-level log fold-change:\n   $$\n   y_{g,c} \\approx \\beta_0 + \\alpha_c + \\beta_g + \\gamma \\cdot \\mathrm{CN}_{g,c}^{(z)} + \\delta \\cdot \\mathrm{EXPR}_{g,c}^{(z)},\n   $$\n   where $\\beta_0$ is a global intercept, $\\alpha_c$ are cell-line effects, $\\beta_g$ are gene effects (the desired adjusted gene scores), and $\\gamma$, $\\delta$ are global coefficients for standardized copy-number and standardized expression, respectively. When expression is excluded (as specified in certain test cases), omit the $\\delta$ term and the corresponding column from the design.\n5. Construct a design matrix $\\mathbf{X}$ and response vector $\\mathbf{y}$ by flattening the $G \\times C$ matrix $[y_{g,c}]$ in row-major order (iterate genes in the order $[$G1, G2, G3, G4$]$, and for each gene, iterate cell lines in the order $[$C1, C2, C3$]$). The columns of $\\mathbf{X}$ must be, in order: a column of ones for $\\beta_0$, $C$ columns for the cell-line indicators, $G$ columns for gene indicators, then the standardized copy-number column, and, if included, the standardized expression column.\n6. Estimate parameters by ridge regression with regularization strength $\\lambda > 0$ using\n   $$\n   \\hat{\\boldsymbol{\\theta}} = \\left(\\mathbf{X}^\\top \\mathbf{X} + \\lambda \\mathbf{I}\\right)^{-1} \\mathbf{X}^\\top \\mathbf{y},\n   $$\n   where $\\mathbf{I}$ is the identity matrix of matching dimension. Regularize all parameters equally.\n7. Extract the estimated gene effects $\\hat{\\beta}_g$ in the order $[$G1, G2, G3, G4$]$ as the adjusted gene scores for the given test case.\n\nTest suite:\nRun your program on the following three test cases, each specifying the ridge penalty and whether to include expression:\n- Test case $1$: $\\lambda = 0.1$, include expression $=$ true.\n- Test case $2$: $\\lambda = 10.0$, include expression $=$ true.\n- Test case $3$: $\\lambda = 0.1$, include expression $=$ false.\n\nFinal output format:\nYour program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets. Each test-case result must itself be a list of four floating-point numbers corresponding to the adjusted gene scores in the order $[$G1, G2, G3, G4$]$, and the test-case results must appear in the order of the test suite above. For example, the printed output must look like\n$[$$[a_1,a_2,a_3,a_4]$, $[b_1,b_2,b_3,b_4]$, $[c_1,c_2,c_3,c_4]$$]$\nwith all $a_i$, $b_i$, $c_i$ being valid floats. No physical units are required, no angles are involved, and if you choose to round, express any ratios as decimals, not with a percentage sign.", "solution": "The problem presented is a well-posed and scientifically grounded task in computational biology. It requires the implementation of a statistical model to analyze synthetic CRISPR screen data. The problem is valid, and a solution will be derived from first principles.\n\nThe analysis begins with the raw sequencing counts. In a CRISPR negative selection screen, the depletion of guides targeting a specific gene reflects the essentiality of that gene for cell survival or proliferation under the given conditions. The effect is quantified by the log-fold change (LFC) of guide representation between the post-treatment state and the initial plasmid library. Given the nature of sequencing read counts as samples from a large population, multiplicative effects on guide abundance are appropriately modeled as additive effects on the logarithm of these counts. We compute the guide-level LFC, $y_{i,c}$, for each guide $i$ in cell line $c$ using a natural logarithm, adding a pseudocount of $1$ to stabilize the calculation for low counts:\n$$\ny_{i,c} = \\log\\left(\\frac{P_{i,c} + 1}{L_i + 1}\\right)\n$$\nwhere $P_{i,c}$ is the post-treatment count and $L_i$ is the plasmid library count.\n\nSince multiple guides ($2$ in this problem) target each gene, we aggregate the guide-level LFCs to obtain a robust gene-level LFC, $y_{g,c}$, for each gene $g$ and cell line $c$. This is achieved by taking the arithmetic mean of the LFCs for all guides targeting gene $g$. This process yields a $G \\times C$ matrix of gene-level LFCs, where $G=4$ is the number of genes and $C=3$ is the number of cell lines. This matrix of LFCs serves as the response variable for our linear model.\n\nThe objective is to estimate the intrinsic essentiality of each gene, adjusted for confounding factors. We construct a linear model that decomposes the observed LFC, $y_{g,c}$, into several components:\n$$\ny_{g,c} \\approx \\beta_0 + \\alpha_c + \\beta_g + \\gamma \\cdot \\mathrm{CN}_{g,c}^{(z)} + \\delta \\cdot \\mathrm{EXPR}_{g,c}^{(z)}\n$$\nThe terms are defined as follows:\n- $\\beta_0$: A global intercept, representing the baseline LFC across all conditions.\n- $\\alpha_c$: A set of $C$ coefficients representing the fixed effects of each cell line. This term accounts for systematic differences in screen performance or growth rates between cell lines.\n- $\\beta_g$: A set of $G$ coefficients representing the intrinsic gene effects. These are the quantities of interest—the adjusted gene scores.\n- $\\gamma \\cdot \\mathrm{CN}_{g,c}^{(z)}$: The effect of gene copy-number (CN) on guide efficacy. The CRISPR-Cas9 system is more effective at inducing a functional knockout when targeting amplified regions, leading to an artifactual dependency of LFC on CN. $\\gamma$ is the coefficient for this effect.\n- $\\delta \\cdot \\mathrm{EXPR}_{g,c}^{(z)}$: The effect of gene expression (EXPR). The Central Dogma dictates that gene function is mediated by its expression, making it a relevant predictor of phenotype. $\\delta$ is the coefficient for this effect.\n\nThe continuous covariates, $\\mathrm{CN}_{g,c}$ and $\\mathrm{EXPR}_{g,c}$, are standardized to have a mean of $0$ and a standard deviation of $1$ across all $G \\times C = 12$ observations. This standardization, denoted by the superscript $(z)$, is critical. It places the covariates on a common scale, making their respective coefficients, $\\gamma$ and $\\delta$, directly comparable in magnitude. It also improves the numerical conditioning of the problem.\n\nTo solve for the model parameters, we formulate the problem in matrix form, $\\mathbf{y} \\approx \\mathbf{X}\\boldsymbol{\\theta}$. The response vector $\\mathbf{y}$ is created by flattening the $G \\times C$ gene-level LFC matrix in row-major order (iterating through genes, then cell lines for each gene). This results in a vector of length $12$. The design matrix $\\mathbf{X}$ is constructed to match this ordering. Its columns correspond to the model parameters $\\boldsymbol{\\theta} = [\\beta_0, \\alpha_1, \\dots, \\alpha_C, \\beta_1, \\dots, \\beta_G, \\gamma, \\delta]^\\top$. The columns of $\\mathbf{X}$ are, in order:\n1.  An intercept column of all ones (for $\\beta_0$).\n2.  $C=3$ columns of one-hot encoded indicators for each cell line (for $\\alpha_c$).\n3.  $G=4$ columns of one-hot encoded indicators for each gene (for $\\beta_g$).\n4.  A column containing the standardized copy-number values (for $\\gamma$).\n5.  A column containing the standardized expression values (for $\\delta$), if included in the model.\n\nThis construction leads to a design matrix $\\mathbf{X}$ that is rank-deficient. For example, the sum of the $G$ gene indicator columns is identical to the intercept column. Standard ordinary least squares (OLS) would fail as $\\mathbf{X}^\\top \\mathbf{X}$ is singular. To overcome this, we employ ridge regression, which introduces an $\\ell_2$ penalty on the magnitude of the coefficients. This is a form of Tikhonov regularization. The estimator for the parameter vector $\\boldsymbol{\\theta}$ is given by:\n$$\n\\hat{\\boldsymbol{\\theta}} = \\left(\\mathbf{X}^\\top \\mathbf{X} + \\lambda \\mathbf{I}\\right)^{-1} \\mathbf{X}^\\top \\mathbf{y}\n$$\nwhere $\\lambda > 0$ is the regularization parameter and $\\mathbf{I}$ is the identity matrix. The term $\\lambda \\mathbf{I}$ ensures that the matrix to be inverted is always positive definite and thus invertible, providing a unique and stable solution. The parameter $\\lambda$ controls the trade-off between fitting the data and penalizing coefficient size. A larger $\\lambda$ imposes stronger shrinkage on the coefficients. The problem requires all parameters to be regularized equally, which is precisely what this formulation achieves.\n\nAfter computing $\\hat{\\boldsymbol{\\theta}}$, the adjusted gene scores are the estimated gene effects, $\\hat{\\beta}_g$. These correspond to the entries in the $\\hat{\\boldsymbol{\\theta}}$ vector from index $1+C$ to $1+C+G$. The implementation will calculate these scores for each of the three test cases specified.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes adjusted gene scores from synthetic CRISPR screen data using ridge regression.\n    \"\"\"\n    # Define the constants and data from the problem statement.\n    C = 3\n    G = 4\n    num_guides = 8\n    \n    gene_labels = [f\"G{i+1}\" for i in range(G)]\n    cell_line_labels = [f\"C{i+1}\" for i in range(C)]\n    \n    # Mapping from guide index (0-7) to gene index (0-3)\n    guide_to_gene_idx_map = np.repeat(np.arange(G), 2)\n\n    plasmid_counts = np.array([100000.0, 90000.0, 110000.0, 105000.0, 95000.0, 98000.0, 102000.0, 101000.0])\n    \n    post_treatment_counts = np.array([\n        [31300.0, 30600.0, 57970.0, 57015.0, 92245.0, 95258.0, 131682.0, 123927.0],  # C1\n        [29900.0, 29250.0, 65780.0, 64680.0, 59090.0, 60956.0, 122706.0, 115645.0],  # C2\n        [32800.0, 31950.0, 71610.0, 70350.0, 104500.0, 107800.0, 111588.0, 105141.0]   # C3\n    ]) # Shape: (C, num_guides)\n\n    cn_matrix = np.array([\n        [2.0, 1.0, 3.0],\n        [4.0, 1.5, 2.0],\n        [1.0, 5.0, 1.0],\n        [3.0, 2.0, 6.0]\n    ]) # Shape: (G, C)\n    \n    expr_matrix = np.array([\n        [5.0, 4.5, 5.5],\n        [2.0, 2.5, 1.0],\n        [1.0, 0.5, 1.5],\n        [3.5, 2.5, 3.0]\n    ]) # Shape: (G, C)\n    \n    test_cases = [\n        {'lambda': 0.1, 'include_expression': True},\n        {'lambda': 10.0, 'include_expression': True},\n        {'lambda': 0.1, 'include_expression': False}\n    ]\n\n    # Task 1: Compute guide-level log fold-change (LFC)\n    # y_{i,c} = log((P_{i,c} + 1) / (L_i + 1))\n    guide_lfc = np.log((post_treatment_counts + 1.0) / (plasmid_counts[np.newaxis, :] + 1.0)) # Shape (C, num_guides)\n    \n    # Task 2: Aggregate to gene-level LFC\n    # y_{g,c} is the average of y_{i,c} for guides targeting gene g.\n    gene_lfc = np.zeros((G, C))\n    for g_idx in range(G):\n        guide_indices_for_gene = np.where(guide_to_gene_idx_map == g_idx)[0]\n        # guide_lfc is (C, guides), so we average across the guide dimension (axis=1)\n        # and assign to the correct gene row, but the result needs to be (G,C), so we transpose guide_lfc first.\n        gene_lfc[g_idx, :] = np.mean(guide_lfc[:, guide_indices_for_gene], axis=1)\n    \n    # The response vector y is the flattened gene_lfc matrix (row-major order)\n    y = gene_lfc.flatten(order='C')\n\n    # Task 3: Standardize covariates\n    cn_flat = cn_matrix.flatten(order='C')\n    expr_flat = expr_matrix.flatten(order='C')\n\n    cn_std = (cn_flat - np.mean(cn_flat)) / np.std(cn_flat)\n    expr_std = (expr_flat - np.mean(expr_flat)) / np.std(expr_flat)\n\n    # Task 4 and 5: Build the common components of the design matrix X\n    num_obs = G * C\n    \n    intercept_col = np.ones(num_obs)\n    \n    cl_indicator_block = np.eye(C)\n    cl_indicators = np.tile(cl_indicator_block, (G, 1))\n\n    gene_indicator_block = np.eye(G)\n    gene_indicators = np.repeat(gene_indicator_block, C, axis=0)\n\n    all_results = []\n    for case in test_cases:\n        lambda_val = case['lambda']\n        include_expr = case['include_expression']\n\n        # Assemble the full design matrix X for the current test case\n        if include_expr:\n            X = np.c_[intercept_col, cl_indicators, gene_indicators, cn_std, expr_std]\n        else:\n            X = np.c_[intercept_col, cl_indicators, gene_indicators, cn_std]\n\n        # Task 6: Estimate parameters via ridge regression\n        n_params = X.shape[1]\n        XTX = X.T @ X\n        lambda_I = lambda_val * np.eye(n_params)\n        \n        # Calculate theta_hat = (X'X + lambda*I)^-1 * X'y\n        inv_term = np.linalg.inv(XTX + lambda_I)\n        theta_hat = inv_term @ (X.T @ y)\n\n        # Task 7: Extract the estimated gene effects (beta_g)\n        # a_c are C params, b_g are G params. They follow the intercept.\n        # beta_0, alpha_1..C, beta_1..G, gamma, delta\n        # Gene effects start at index 1 (for intercept) + C (for cell lines)\n        start_idx = 1 + C\n        end_idx = start_idx + G\n        gene_effects = theta_hat[start_idx:end_idx].tolist()\n        \n        all_results.append(gene_effects)\n\n    # Final print statement in the exact required format.\n    # The string representation of a list of lists is already the correct format.\n    # We remove spaces for exact match.\n    print(str(all_results).replace(\" \", \"\"))\n\nsolve()\n```", "id": "2946910"}]}