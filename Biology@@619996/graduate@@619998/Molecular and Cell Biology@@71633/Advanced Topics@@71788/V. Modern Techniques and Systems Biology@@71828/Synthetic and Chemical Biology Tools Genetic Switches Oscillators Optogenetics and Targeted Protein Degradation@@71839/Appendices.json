{"hands_on_practices": [{"introduction": "The foundation of synthetic biology lies in creating predictable and well-characterized genetic parts. A core component is the transcriptional switch, where a repressor protein controls gene expression. This exercise focuses on quantifying the input-output behavior of such a switch using the Hill function, a fundamental model in biochemistry. By calculating the input concentration range that transitions the switch from nearly off to nearly on, you will determine a critical performance metric for any genetic part. [@problem_id:2965315]", "problem": "In a synthetic gene circuit implementing a transcriptional repressor, the steady-state promoter activity is normalized to the unit interval $[0,1]$ and follows the Hill-type repression model. Assume the repressor binds cooperatively with effective Hill coefficient $n$, and the promoter activity as a function of free repressor concentration $[X]$ is given by the repression function $f([X])=\\frac{1}{1+([X]/K_d)^{n}}$, where $K_d$ is the equilibrium dissociation constant. Consider a repressor characterized by $n=2$ and $K_d=20\\ \\text{nM}$. Determine the input concentration interval over which the promoter activity transitions between $f([X])=0.9$ and $f([X])=0.1$. Report your answer as the ordered pair $\\left([X]_{0.9},\\,[X]_{0.1}\\right)$, where $[X]_{0.9}$ and $[X]_{0.1}$ are the repressor concentrations that yield $f([X])=0.9$ and $f([X])=0.1$, respectively. Round each value to three significant figures and express your answer in nanomolar (nM).", "solution": "The problem statement is subjected to validation.\n\nFirst, the givens are extracted verbatim:\n- The system is a synthetic gene circuit with a transcriptional repressor.\n- The steady-state promoter activity is modeled by the Hill-type repression function: $f([X])=\\frac{1}{1+([X]/K_d)^{n}}$.\n- $[X]$ represents the free repressor concentration.\n- $n$ is the effective Hill coefficient.\n- $K_d$ is the equilibrium dissociation constant.\n- The specific parameters are given: $n=2$ and $K_d=20\\ \\text{nM}$.\n- The task is to find the input concentrations $[X]_{0.9}$ and $[X]_{0.1}$ that correspond to promoter activities of $f([X])=0.9$ and $f([X])=0.1$, respectively.\n- The final answer must be an ordered pair $\\left([X]_{0.9},\\,[X]_{0.1}\\right)$, with each value rounded to three significant figures and expressed in nanomolar (nM).\n\nValidation of the problem statement:\n- **Scientific Grounding**: The Hill equation is a fundamental and widely accepted model in biochemistry and molecular systems biology for describing cooperative binding phenomena, including transcriptional regulation. The given parameters, a Hill coefficient of $n=2$ and a dissociation constant of $K_d=20\\ \\text{nM}$, are physically realistic for synthetic gene circuits. The problem is scientifically sound.\n- **Well-Posedness**: The problem provides a well-defined mathematical function and all necessary parameters to calculate a unique solution. The repression function is monotonic for positive concentrations, ensuring that a single, unique concentration corresponds to each specified promoter activity level. The problem is well-posed.\n- **Objectivity**: The problem is stated in precise, quantitative terms, free from ambiguity, subjectivity, or opinion.\n\nThe problem is deemed valid as it is scientifically grounded, well-posed, and objective. It is a straightforward application of a standard model in synthetic biology. Therefore, a solution will be provided.\n\nThe repression function is given by:\n$$f([X]) = \\frac{1}{1 + \\left(\\frac{[X]}{K_d}\\right)^{n}}$$\nWe are given the parameters $n=2$ and $K_d=20\\ \\text{nM}$. The objective is to find the repressor concentrations $[X]$ that result in promoter activities of $f = 0.9$ and $f = 0.1$.\n\nTo solve for $[X]$ as a function of $f$, we rearrange the equation:\n$$1 + \\left(\\frac{[X]}{K_d}\\right)^{n} = \\frac{1}{f([X])}$$\n$$\\left(\\frac{[X]}{K_d}\\right)^{n} = \\frac{1}{f([X])} - 1 = \\frac{1 - f([X])}{f([X])}$$\nTaking the $n$-th root of both sides:\n$$\\frac{[X]}{K_d} = \\left(\\frac{1 - f([X])}{f([X])}\\right)^{1/n}$$\nSince concentration $[X]$ must be non-negative, we only consider the positive real root.\n$$[X] = K_d \\left(\\frac{1 - f([X])}{f([X])}\\right)^{1/n}$$\nNow we can substitute the given values to find the specific concentrations.\n\nFirst, we calculate $[X]_{0.9}$ for which $f([X]_{0.9}) = 0.9$.\nSubstituting $f([X]) = 0.9$, $n=2$, and $K_d=20\\ \\text{nM}$:\n$$[X]_{0.9} = 20 \\left(\\frac{1 - 0.9}{0.9}\\right)^{1/2}$$\n$$[X]_{0.9} = 20 \\left(\\frac{0.1}{0.9}\\right)^{1/2} = 20 \\left(\\frac{1}{9}\\right)^{1/2}$$\n$$[X]_{0.9} = 20 \\times \\frac{1}{3} = \\frac{20}{3} \\approx 6.666... \\text{ nM}$$\nRounding to three significant figures, we get $[X]_{0.9} = 6.67\\ \\text{nM}$.\n\nSecond, we calculate $[X]_{0.1}$ for which $f([X]_{0.1}) = 0.1$.\nSubstituting $f([X]) = 0.1$, $n=2$, and $K_d=20\\ \\text{nM}$:\n$$[X]_{0.1} = 20 \\left(\\frac{1 - 0.1}{0.1}\\right)^{1/2}$$\n$$[X]_{0.1} = 20 \\left(\\frac{0.9}{0.1}\\right)^{1/2} = 20 \\sqrt{9}$$\n$$[X]_{0.1} = 20 \\times 3 = 60\\ \\text{nM}$$\nTo express this with three significant figures, we write it as $60.0\\ \\text{nM}$.\n\nThe requested ordered pair is $\\left([X]_{0.9},\\,[X]_{0.1}\\right)$. Therefore, the result is $(6.67\\ \\text{nM}, 60.0\\ \\text{nM})$. This interval, from $6.67\\ \\text{nM}$ to $60.0\\ \\text{nM}$, represents the \"transition region\" of the genetic switch, where the promoter activity changes from $90\\%$ to $10\\%$.", "answer": "$$\n\\boxed{\n\\begin{pmatrix}\n6.67 & 60.0\n\\end{pmatrix}\n}\n$$", "id": "2965315"}, {"introduction": "Having characterized a single component, we now explore the emergent behaviors that arise when these parts are assembled into circuits. This practice examines the \"genetic toggle switch,\" a canonical motif in synthetic biology created by wiring two transcriptional repressors in a mutually inhibitory loop. You will perform a formal dynamical systems analysis, a key skill for a circuit designer, to identify the system's steady states and determine their stability. This analysis reveals whether the circuit can achieve bistability, a property that endows it with cellular memory. [@problem_id:2965326]", "problem": "Consider a symmetric two-gene toggle switch in nondimensional form, where two transcriptional repressors mutually inhibit each other through Hill-type repression. The dynamics are modeled by the coupled ordinary differential equations\n$$\n\\frac{dx}{dt} \\;=\\; \\frac{\\alpha}{1+\\left(\\frac{y}{K}\\right)^{n}} \\;-\\; \\delta\\,x, \n\\qquad\n\\frac{dy}{dt} \\;=\\; \\frac{\\alpha}{1+\\left(\\frac{x}{K}\\right)^{n}} \\;-\\; \\delta\\,y,\n$$\nwith Hill coefficient $n$, synthesis rate $\\alpha$, repression threshold $K$, and first-order degradation rate $\\delta$. Assume the following parameter values: $n=2$, $K=50$, $\\alpha=100$, and $\\delta=1$.\n\nUsing only fundamental definitions (steady state defined by $\\frac{dx}{dt}=\\frac{dy}{dt}=0$; Jacobian-based linear stability via eigenvalues of the Jacobian matrix), do the following:\n\n1) Compute all fixed points.\n\n2) Derive the Jacobian matrix at a generic point $(x,y)$, evaluate it at each fixed point, and determine the linear stability of each fixed point from the signs of the real parts of its eigenvalues.\n\n3) Decide whether the system is bistable under the given parameters, based on your fixed point and linear stability analysis.\n\nProvide all derivations in closed form whenever possible, and justify each step from the stated base. For your final reported quantity, provide the largest real part of the Jacobian eigenvalues at the unique fixed point you find, expressed in nondimensional inverse-time units. Report this final quantity as an exact value (no rounding).", "solution": "The problem statement provides a deterministic model of a symmetric two-gene toggle switch and requests a standard dynamical systems analysis. The model is a cornerstone of synthetic biology, and the parameters provided are mathematically consistent. The question is well-posed, scientifically grounded, and objective. It contains no logical contradictions or factual errors. Therefore, the problem is valid, and we proceed with the solution.\n\nThe system of ordinary differential equations is given by:\n$$\n\\frac{dx}{dt} \\;=\\; \\frac{\\alpha}{1+\\left(\\frac{y}{K}\\right)^{n}} \\;-\\; \\delta\\,x\n$$\n$$\n\\frac{dy}{dt} \\;=\\; \\frac{\\alpha}{1+\\left(\\frac{x}{K}\\right)^{n}} \\;-\\; \\delta\\,y\n$$\nThe specified parameter values are $n=2$, $K=50$, $\\alpha=100$, and $\\delta=1$.\n\nFirst, we compute the system's fixed points, which are points $(x^*, y^*)$ where the time derivatives are zero: $\\frac{dx}{dt}=0$ and $\\frac{dy}{dt}=0$. This yields the following system of algebraic equations:\n$$\nx^* \\;=\\; \\frac{\\alpha}{\\delta} \\frac{1}{1 + \\left(\\frac{y^*}{K}\\right)^{n}}\n$$\n$$\ny^* \\;=\\; \\frac{\\alpha}{\\delta} \\frac{1}{1 + \\left(\\frac{x^*}{K}\\right)^{n}}\n$$\nSubstituting the given parameter values:\n$$\nx^* \\;=\\; \\frac{100}{1 + \\left(\\frac{y^*}{50}\\right)^{2}}\n$$\n$$\ny^* \\;=\\; \\frac{100}{1 + \\left(\\frac{x^*}{50}\\right)^{2}}\n$$\nDue to the symmetry of the equations, there must exist at least one symmetric fixed point where $x^* = y^*$. We find this point by substituting $y^* = x^*$ into either equation:\n$$\nx^* \\;=\\; \\frac{100}{1 + \\left(\\frac{x^*}{50}\\right)^{2}}\n$$\n$$\nx^* \\left(1 + \\frac{(x^*)^{2}}{2500}\\right) \\;=\\; 100\n$$\n$$\nx^* + \\frac{(x^*)^{3}}{2500} \\;=\\; 100\n$$\nMultiplying by $2500$ gives a cubic equation for $x^*$:\n$$\n(x^*)^{3} + 2500x^* - 250000 \\;=\\; 0\n$$\nTo find the real roots of this polynomial, let $p(x) = x^{3} + 2500x - 250000$. The derivative is $p'(x) = 3x^{2} + 2500$, which is strictly positive for all real $x$. This implies that $p(x)$ is a strictly monotonic function, and thus can have at most one real root. By inspection, we test integer values and find that $x^*=50$ is a solution:\n$$\n(50)^{3} + 2500(50) - 250000 \\;=\\; 125000 + 125000 - 250000 \\;=\\; 0\n$$\nSince there is only one real root, the only symmetric fixed point is $(x^*, y^*) = (50, 50)$.\nThe existence of other, non-symmetric fixed points depends on the slope of the nullcline function $h(x) = \\frac{100}{1+(x/50)^2}$ at the symmetric fixed point. Multiple fixed points exist only if $|h'(50)| > 1$. We find $h'(x) = -\\frac{500000x}{(2500+x^2)^2}$. Evaluating at $x=50$:\n$$\nh'(50) \\;=\\; -\\frac{500000(50)}{(2500+50^2)^2} \\;=\\; -\\frac{25000000}{(5000)^2} \\;=\\; -1\n$$\nSince $|h'(50)| = 1$, the system is poised at a bifurcation point. The nullcline $y=h(x)$ is tangent to the line $y=x$ at $x=50$, resulting in a single point of intersection. Therefore, there is only one fixed point for the given parameters, which is $(50, 50)$. The problem's reference to a \"unique fixed point\" is correct.\n\nNext, we perform a linear stability analysis. The Jacobian matrix $J$ of the system at a generic point $(x,y)$ is:\n$$\nJ(x,y) \\;=\\; \\begin{pmatrix} \\frac{\\partial}{\\partial x}\\left(\\frac{\\alpha}{1+(y/K)^n} - \\delta x\\right) & \\frac{\\partial}{\\partial y}\\left(\\frac{\\alpha}{1+(y/K)^n} - \\delta x\\right) \\\\ \\frac{\\partial}{\\partial x}\\left(\\frac{\\alpha}{1+(x/K)^n} - \\delta y\\right) & \\frac{\\partial}{\\partial y}\\left(\\frac{\\alpha}{1+(x/K)^n} - \\delta y\\right) \\end{pmatrix}\n$$\nThe partial derivatives are:\n$$\n\\frac{\\partial}{\\partial x} \\left(...\\right) = -\\delta\n$$\n$$\n\\frac{\\partial}{\\partial y} \\left(...\\right) = -\\frac{\\alpha n y^{n-1}}{K^n(1+(y/K)^n)^2}\n$$\nBy symmetry for the other equation:\n$$\n\\frac{\\partial}{\\partial x} \\left(...\\right) = -\\frac{\\alpha n x^{n-1}}{K^n(1+(x/K)^n)^2}\n$$\n$$\n\\frac{\\partial}{\\partial y} \\left(...\\right) = -\\delta\n$$\nSubstituting the given parameters ($n=2, K=50, \\alpha=100, \\delta=1$):\n$$\nJ(x,y) \\;=\\; \\begin{pmatrix} -1 & -\\frac{100 \\cdot 2 \\cdot y}{50^2(1+(y/50)^2)^2} \\\\ -\\frac{100 \\cdot 2 \\cdot x}{50^2(1+(x/50)^2)^2} & -1 \\end{pmatrix} \\;=\\; \\begin{pmatrix} -1 & -\\frac{500000y}{(2500+y^2)^2} \\\\ -\\frac{500000x}{(2500+x^2)^2} & -1 \\end{pmatrix}\n$$\nWe evaluate this matrix at the unique fixed point $(50, 50)$:\n$$\nJ(50,50) \\;=\\; \\begin{pmatrix} -1 & -\\frac{500000(50)}{(2500+50^2)^2} \\\\ -\\frac{500000(50)}{(2500+50^2)^2} & -1 \\end{pmatrix}\n$$\nThe off-diagonal elements evaluate to:\n$$\n-\\frac{25000000}{(2500+2500)^2} \\;=\\; -\\frac{25000000}{5000^2} \\;=\\; -\\frac{25000000}{25000000} \\;=\\; -1\n$$\nThus, the Jacobian at the fixed point is:\n$$\nJ(50,50) \\;=\\; \\begin{pmatrix} -1 & -1 \\\\ -1 & -1 \\end{pmatrix}\n$$\nThe stability of the fixed point is determined by the eigenvalues $\\lambda$ of this matrix, which are found by solving the characteristic equation $\\det(J - \\lambda I)=0$:\n$$\n\\det\\begin{pmatrix} -1-\\lambda & -1 \\\\ -1 & -1-\\lambda \\end{pmatrix} \\;=\\; 0\n$$\n$$\n(-1-\\lambda)^2 - (-1)(-1) \\;=\\; 0\n$$\n$$\n(1+\\lambda)^2 - 1 \\;=\\; 0\n$$\n$$\n\\lambda^2 + 2\\lambda + 1 - 1 \\;=\\; 0\n$$\n$$\n\\lambda(\\lambda+2) \\;=\\; 0\n$$\nThe eigenvalues are $\\lambda_1 = 0$ and $\\lambda_2 = -2$.\n\nThe stability of the fixed point is determined by the sign of the real parts of the eigenvalues. Here, the real parts are $0$ and $-2$. The presence of a zero eigenvalue indicates that the fixed point is non-hyperbolic, meaning linear stability analysis is not strictly sufficient to determine stability. The system is at a pitchfork bifurcation point separating monostable and bistable regimes. Since only one fixed point exists, the system is monostable, not bistable. Bistability requires the existence of two distinct stable fixed points.\n\nThe problem asks for the largest real part of the Jacobian eigenvalues at the unique fixed point. The eigenvalues are $\\lambda_1 = 0$ and $\\lambda_2 = -2$. The real parts are $\\text{Re}(\\lambda_1)=0$ and $\\text{Re}(\\lambda_2)=-2$. The largest of these is $0$.", "answer": "$$\\boxed{0}$$", "id": "2965326"}, {"introduction": "Theoretical models are powerful, but their predictive value hinges on parameters grounded in experimental reality. This final practice bridges the gap between abstract models and noisy lab data by introducing computational parameter estimation. You will use Bayesian inference, a robust statistical framework, to analyze a dose-response dataset for a genetic switch. This task involves estimating the Hill parameters, such as the cooperativity $n$ and the half-maximal concentration $EC_{50}$, while also quantifying the uncertainty in these estimates, a crucial step in rigorous quantitative biology. [@problem_id:2965254]", "problem": "A gene-regulated synthetic switch is driven by a small-molecule inducer at concentration $x$ (in nanomolar). Under a thermodynamic occupancy model for promoter regulation, assuming $E_{\\min} = 0$ and $E_{\\max} = 1$ and cooperative binding described by the Hill formalism, the mean response follows the Hill function $f(x;n, EC_{50}) = \\dfrac{1}{1 + \\left(\\dfrac{EC_{50}}{x}\\right)^{n}}$, where $n$ is the Hill coefficient and $EC_{50}$ is the half-maximal effective concentration (EC50). Measurements $y_i$ at doses $x_i$ are modeled as independent Gaussian observations about the mean response with known standard deviation $\\sigma$:\n$$\ny_i \\sim \\mathcal{N}\\left(f(x_i;n, EC_{50}), \\sigma^2\\right).\n$$\nBayesian inference is to be performed over $(n, EC_{50})$ given multiple noisy dose-response data points $(x_i, y_i)$ and a bounded prior. Adopt independent uniform priors on $n$ and $\\ell = \\log_{10}(EC_{50})$:\n$$\np(n) \\propto \\mathbf{1}[n_{\\min} \\le n \\le n_{\\max}], \\quad p(\\ell) \\propto \\mathbf{1}[\\ell_{\\min} \\le \\ell \\le \\ell_{\\max}],\n$$\nso that the prior on $EC_{50}$ is log-uniform within the bounds $[10^{\\ell_{\\min}}, 10^{\\ell_{\\max}}]$ nanomolar. The posterior density over $(n, \\ell)$ is proportional to the product of the likelihood and the prior. Your program must compute the normalized posterior density on a rectangular grid over $(n, \\ell)$ and then return posterior summaries.\n\nUse the following test suite of three datasets. In all cases, concentrations are in nanomolar, responses are unitless, and the required reported $EC_{50}$ values must be expressed in nanomolar. The Gaussian noise standard deviation $\\sigma$ is given for each case.\n\nCommon prior bounds and grid specification to be used for all cases:\n- Prior bounds: $n \\in [0.3, 4.0]$ and $\\ell = \\log_{10}(EC_{50}) \\in [0, 3]$ (thus $EC_{50} \\in [1, 1000]$ nanomolar).\n- Grid resolution: $N_n = 401$ points uniformly spaced in $n$, and $N_{\\ell} = 601$ points uniformly spaced in $\\ell$.\n\nCase A (typical cooperative switch):\n- Doses $x = [1, 3, 10, 30, 100, 300, 1000]$ nanomolar.\n- Observations $y = [0.000133, 0.006045, 0.0342, 0.2359, 0.8292, 0.9760, 1.0006]$.\n- Noise level $\\sigma = 0.03$.\n\nCase B (near lower prior $EC_{50}$ bound, approximately noncooperative):\n- Doses $x = [1, 3, 10, 30, 100, 300, 1000]$ nanomolar.\n- Observations $y = [0.3033, 0.61, 0.8133, 0.9425, 0.992392, 0.989377, 0.999004]$.\n- Noise level $\\sigma = 0.02$.\n\nCase C (shallow slope and high noise):\n- Doses $x = [1, 3, 10, 30, 100, 300, 1000]$ nanomolar.\n- Observations $y = [0.0438, 0.0203, 0.1593, 0.1695, 0.4411, 0.5014, 0.7857]$.\n- Noise level $\\sigma = 0.08$.\n\nStarting from fundamental laws and core definitions:\n- The Central Dogma of Molecular Biology links regulation to output, and a thermodynamic occupancy model yields a Hill-type form for promoter activity in cooperative binding, providing $f(x;n, EC_{50})$.\n- Bayes’ rule states $p(\\theta \\mid \\mathcal{D}) \\propto p(\\mathcal{D} \\mid \\theta) p(\\theta)$ for parameters $\\theta$ and data $\\mathcal{D}$.\n- Independent Gaussian measurement noise implies a product of Gaussian likelihoods for independent observations.\n\nTask:\n1. Formulate the posterior on a two-dimensional grid $(n, \\ell)$ using Bayes’ rule and the specified priors and likelihood.\n2. Normalize the posterior by numerical integration over the grid using the rectangle rule with the given uniform grids.\n3. Compute the following summaries for each case:\n   - Maximum a posteriori (MAP) estimates: $(n_{\\mathrm{MAP}}, EC_{50,\\mathrm{MAP}})$.\n   - Posterior means: $\\mathbb{E}[n]$ and $\\mathbb{E}[EC_{50}]$.\n   - Equal-tailed $0.95$ credible intervals for $n$ and for $EC_{50}$. For $EC_{50}$, compute the interval in $\\ell$ and then map the endpoints via $EC_{50} = 10^{\\ell}$ to preserve quantiles under the monotone transform.\n\nNumerical details:\n- Implement the posterior on the $(n, \\ell)$ grid and stabilize exponentials by subtracting the maximum log-likelihood before exponentiation.\n- Use the Jacobian-free parameterization in $\\ell$ (log base $10$), consistent with the uniform prior in $\\ell$.\n- Use the rectangle rule for all numerical integrals over the uniform grids.\n\nRequired final output format:\n- For each case, return a list containing $8$ floating-point numbers in this order:\n  $[n_{\\mathrm{MAP}}, EC_{50,\\mathrm{MAP}} \\text{ in nanomolar}, \\mathbb{E}[n], \\mathbb{E}[EC_{50}] \\text{ in nanomolar}, n_{0.025}, n_{0.975}, EC_{50,0.025} \\text{ in nanomolar}, EC_{50,0.975} \\text{ in nanomolar}]$,\n  where $q_{0.025}$ and $q_{0.975}$ denote equal-tailed quantiles at probabilities $0.025$ and $0.975$.\n- Round $n$-valued outputs to $3$ decimal places and $EC_{50}$-valued outputs to $1$ decimal place.\n- Your program should produce a single line of output containing the results as a comma-separated list of the three per-case lists enclosed in square brackets, for example: $[[\\cdots],[\\cdots],[\\cdots]]$.", "solution": "The problem requires the application of Bayesian inference to determine the parameters of a gene-regulated synthetic switch. The analysis will be performed on three separate datasets. Before proceeding to the solution, the problem statement has been rigorously validated and found to be scientifically sound, well-posed, and objective. It provides a complete specification of the model, data, priors, and computational tasks, all of which are standard in the fields of quantitative biology and statistical modeling.\n\nThe core of the problem is to characterize the posterior probability distribution of the model parameters given experimental data. The model describes the mean response $f(x)$ of a synthetic switch to an inducer concentration $x$ using the Hill function:\n$$\nf(x; n, EC_{50}) = \\frac{1}{1 + \\left(\\frac{EC_{50}}{x}\\right)^{n}}\n$$\nHere, $n$ is the Hill coefficient, which quantifies the steepness or cooperativity of the response, and $EC_{50}$ is the half-maximal effective concentration. The problem assumes $E_{\\min} = 0$ and $E_{\\max} = 1$.\n\nThe parameters to be inferred are $\\theta = (n, EC_{50})$. For computational convenience and consistency with the specified prior, we work with the parameterization $(n, \\ell)$, where $\\ell = \\log_{10}(EC_{50})$, which implies $EC_{50} = 10^{\\ell}$.\n\nAccording to Bayes' rule, the posterior distribution is proportional to the product of the likelihood and the prior:\n$$\np(n, \\ell \\mid \\mathcal{D}) \\propto p(\\mathcal{D} \\mid n, \\ell) \\, p(n, \\ell)\n$$\nwhere $\\mathcal{D} = \\{(x_i, y_i)\\}_{i=1}^{M}$ represents the set of $M$ experimental data points.\n\nThe prior distribution on the parameters $(n, \\ell)$ is given as independent and uniform over a specified rectangular domain:\n$$\np(n, \\ell) = p(n)p(\\ell) \\propto \\mathbf{1}[n_{\\min} \\le n \\le n_{\\max}] \\cdot \\mathbf{1}[\\ell_{\\min} \\le \\ell \\le \\ell_{\\max}]\n$$\nFor this problem, the bounds are $n \\in [0.3, 4.0]$ and $\\ell \\in [0, 3]$, which corresponds to $EC_{50} \\in [1, 1000]$ nanomolar. Within this domain, the prior probability density is constant; outside, it is zero.\n\nThe likelihood function $p(\\mathcal{D} \\mid n, \\ell)$ is derived from the data model. The measurements $y_i$ are assumed to be independent Gaussian random variables centered around the mean response $f(x_i; n, 10^{\\ell})$ with a known standard deviation $\\sigma$:\n$$\ny_i \\sim \\mathcal{N}\\left(f(x_i; n, 10^{\\ell}), \\sigma^2\\right)\n$$\nThe likelihood for a single data point $(x_i, y_i)$ is the value of the Gaussian probability density function:\n$$\np(y_i \\mid n, \\ell) = \\frac{1}{\\sqrt{2\\pi\\sigma^2}} \\exp\\left(-\\frac{(y_i - f(x_i; n, 10^{\\ell}))^2}{2\\sigma^2}\\right)\n$$\nDue to the independence of measurements, the total likelihood for the dataset $\\mathcal{D}$ is the product of the individual likelihoods:\n$$\np(\\mathcal{D} \\mid n, \\ell) = \\prod_{i=1}^{M} p(y_i \\mid n, \\ell)\n$$\nBecause the prior $p(n, \\ell)$ is constant over the specified domain, the posterior distribution $p(n, \\ell \\mid \\mathcal{D})$ is directly proportional to the likelihood function within this domain.\n\nFor numerical computation, it is more stable and convenient to work with the log-posterior. The log-posterior is, up to an additive constant, equal to the log-likelihood:\n$$\n\\log p(n, \\ell \\mid \\mathcal{D}) \\propto \\log p(\\mathcal{D} \\mid n, \\ell) = \\sum_{i=1}^{M} \\log p(y_i \\mid n, \\ell) = -\\frac{1}{2\\sigma^2} \\sum_{i=1}^{M} (y_i - f(x_i; n, 10^{\\ell}))^2 + \\text{const.}\n$$\nThe strategy is to evaluate this log-posterior on a discrete grid of parameter values and then compute the required summary statistics from the resulting discrete approximation of the posterior distribution.\n\nThe computational procedure is as follows:\n$1$. **Grid Generation**: A uniform rectangular grid is constructed in the $(n, \\ell)$ parameter space. The grid for $n$ consists of $N_n = 401$ points spanning $[0.3, 4.0]$, and the grid for $\\ell$ consists of $N_\\ell = 601$ points spanning $[0, 3]$. Let these grid points be $(n_j, \\ell_k)$ for $j \\in \\{0, \\dots, N_n-1\\}$ and $k \\in \\{0, \\dots, N_\\ell-1\\}$.\n\n$2$. **Posterior Calculation and Normalization**:\n   - At each grid point $(n_j, \\ell_k)$, the value of the log-posterior (proportional to the negative sum of squared errors) is calculated. For numerical stability, the Hill function is evaluated as $f(x) = 1/(1 + \\exp(n(\\log(EC_{50}) - \\log(x))))$.\n   - To prevent numerical underflow or overflow when exponentiating, the maximum value of the log-posterior grid, $L_{\\max}$, is found and subtracted from all elements: $L'_{jk} = L_{jk} - L_{\\max}$.\n   - The unnormalized posterior probability at each grid point is then $P_{jk} = \\exp(L'_{jk})$.\n   - These values are normalized to sum to $1$, creating a discrete probability mass function (PMF), $P'_{jk} = P_{jk} / \\sum_{a,b} P_{ab}$, which serves as a discrete approximation of the full posterior distribution.\n\n$3$. **Computation of Posterior Summaries**: All summaries are calculated from this discrete PMF, $P'_{jk}$.\n   - **Maximum a posteriori (MAP)**: The MAP estimates $(n_{\\mathrm{MAP}}, EC_{50, \\mathrm{MAP}})$ correspond to the grid point $(n_j, \\ell_k)$ with the highest probability mass $P'_{jk}$.\n   - **Posterior Means**: The means are computed as expectations over the PMF. The expectation of any function $g(n, \\ell)$ is approximated by $\\mathbb{E}[g(n, \\ell)] \\approx \\sum_{j,k} g(n_j, \\ell_k) P'_{jk}$. Thus:\n     $$\n     \\mathbb{E}[n] \\approx \\sum_{j=0}^{N_n-1} \\sum_{k=0}^{N_\\ell-1} n_j P'_{jk} \\quad \\text{and} \\quad \\mathbb{E}[EC_{50}] \\approx \\sum_{j=0}^{N_n-1} \\sum_{k=0}^{N_\\ell-1} 10^{\\ell_k} P'_{jk}\n     $$\n   - **Credible Intervals**: The $95\\%$ equal-tailed credible intervals are found by first computing the marginal distributions.\n     - The marginal PMF for $n$ is $p'(n_j) = \\sum_{k=0}^{N_\\ell-1} P'_{jk}$. Its cumulative distribution function (CDF) is $C(n_j) = \\sum_{i=0}^{j} p'(n_i)$.\n     - The $0.025$ and $0.975$ quantiles for $n$ are found by linear interpolation of the inverse of this CDF.\n     - Similarly, the marginal PMF for $\\ell$ is computed, $p'(\\ell_k) = \\sum_{j=0}^{N_n-1} P'_{jk}$, and its CDF is used to find the quantiles $\\ell_{0.025}$ and $\\ell_{0.975}$.\n     - The credible interval for $EC_{50}$ is obtained by transforming the endpoints of the $\\ell$ interval: $[10^{\\ell_{0.025}}, 10^{\\ell_{0.975}}]$. This transformation is valid because $EC_{50}=10^\\ell$ is a monotonic function, which preserves quantiles.\n\nThis procedure is applied independently to each of the three test cases provided.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef compute_posterior_summaries(x_data, y_data, sigma, n_bounds, l_bounds, grid_res):\n    \"\"\"\n    Computes posterior summaries for a Bayesian dose-response analysis.\n    \n    Args:\n        x_data (np.ndarray): Array of inducer concentrations.\n        y_data (np.ndarray): Array of observed responses.\n        sigma (float): Standard deviation of Gaussian noise.\n        n_bounds (tuple): (n_min, n_max) for the Hill coefficient prior.\n        l_bounds (tuple): (l_min, l_max) for the log10(EC50) prior.\n        grid_res (tuple): (N_n, N_l) for the grid resolution.\n\n    Returns:\n        list: A list of 8 floating-point summary statistics.\n    \"\"\"\n    n_min, n_max = n_bounds\n    l_min, l_max = l_bounds\n    n_pts, l_pts = grid_res\n\n    # 1. Create parameter grids\n    n_vec = np.linspace(n_min, n_max, n_pts)\n    l_vec = np.linspace(l_min, l_max, l_pts)\n    n_mesh, l_mesh = np.meshgrid(n_vec, l_vec, indexing='ij')\n\n    # 2. Calculate log-posterior on the grid\n    # Reshape arrays for broadcasting\n    # n_mesh/l_mesh: (n_pts, l_pts), x_data/y_data: (n_data,)\n    n_mesh_r = n_mesh[:, :, np.newaxis]      # shape (n_pts, l_pts, 1)\n    l_mesh_r = l_mesh[:, :, np.newaxis]      # shape (n_pts, l_pts, 1)\n    x_data_r = x_data[np.newaxis, np.newaxis, :]  # shape (1, 1, n_data)\n    y_data_r = y_data[np.newaxis, np.newaxis, :]  # shape (1, 1, n_data)\n\n    # Use log-transformed calculation for numerical stability\n    log_ec50 = l_mesh_r * np.log(10)\n    log_x = np.log(x_data_r)\n    \n    # The term (ec50/x)**n can lead to overflow with large n. \n    # Use exp(n * (log(ec50) - log(x)))\n    hill_arg = n_mesh_r * (log_ec50 - log_x)\n\n    # Predicted response f(x) for all grid points and all data points\n    f_pred = 1.0 / (1.0 + np.exp(hill_arg))  # shape (n_pts, l_pts, n_data)\n\n    # Sum of squared errors for each grid point\n    sum_sq_err = np.sum((y_data_r - f_pred)**2, axis=2) # shape (n_pts, l_pts)\n\n    # Log-posterior (proportional to -sum_sq_err)\n    log_posterior = -sum_sq_err / (2.0 * sigma**2)\n\n    # 3. Normalize the posterior\n    # Subtract max for numerical stability before exponentiation\n    log_posterior -= np.max(log_posterior)\n    posterior_unnorm = np.exp(log_posterior)\n    \n    # Normalize to a probability mass function (sum = 1)\n    posterior_pmf = posterior_unnorm / np.sum(posterior_unnorm)\n\n    # 4. Calculate posterior summaries\n    \n    # MAP estimate\n    map_idx = np.unravel_index(np.argmax(posterior_pmf), posterior_pmf.shape)\n    n_map = n_vec[map_idx[0]]\n    l_map = l_vec[map_idx[1]]\n    ec50_map = 10**l_map\n\n    # Posterior means\n    ec50_mesh = 10**l_mesh\n    n_mean = np.sum(n_mesh * posterior_pmf)\n    ec50_mean = np.sum(ec50_mesh * posterior_pmf)\n\n    # Credible intervals\n    \n    # For n\n    marginal_n = np.sum(posterior_pmf, axis=1) # Sum over l-axis\n    cdf_n = np.cumsum(marginal_n)\n    n_025 = np.interp(0.025, cdf_n, n_vec)\n    n_975 = np.interp(0.975, cdf_n, n_vec)\n\n    # For EC50 (via l)\n    marginal_l = np.sum(posterior_pmf, axis=0) # Sum over n-axis\n    cdf_l = np.cumsum(marginal_l)\n    l_025 = np.interp(0.025, cdf_l, l_vec)\n    l_975 = np.interp(0.975, cdf_l, l_vec)\n    \n    ec50_025 = 10**l_025\n    ec50_975 = 10**l_975\n\n    return [n_map, ec50_map, n_mean, ec50_mean, n_025, n_975, ec50_025, ec50_975]\n\ndef solve():\n    # Common parameters for all cases\n    n_bounds = (0.3, 4.0)\n    l_bounds = (0.0, 3.0) # Corresponds to EC50 in [1, 1000]\n    grid_res = (401, 601) # (N_n, N_l)\n    \n    # Define the test cases from the problem statement.\n    test_cases = [\n        {\n            \"x\": np.array([1, 3, 10, 30, 100, 300, 1000]),\n            \"y\": np.array([0.000133, 0.006045, 0.0342, 0.2359, 0.8292, 0.9760, 1.0006]),\n            \"sigma\": 0.03\n        },\n        {\n            \"x\": np.array([1, 3, 10, 30, 100, 300, 1000]),\n            \"y\": np.array([0.3033, 0.61, 0.8133, 0.9425, 0.992392, 0.989377, 0.999004]),\n            \"sigma\": 0.02\n        },\n        {\n            \"x\": np.array([1, 3, 10, 30, 100, 300, 1000]),\n            \"y\": np.array([0.0438, 0.0203, 0.1593, 0.1695, 0.4411, 0.5014, 0.7857]),\n            \"sigma\": 0.08\n        }\n    ]\n\n    all_results = []\n    for case in test_cases:\n        result = compute_posterior_summaries(\n            case[\"x\"], case[\"y\"], case[\"sigma\"], n_bounds, l_bounds, grid_res\n        )\n        all_results.append(result)\n\n    # Format the final output string as specified.\n    output_parts = []\n    for r in all_results:\n        # [n, EC50, n, EC50, n, n, EC50, EC50]\n        # Round n to 3 decimal places, EC50 to 1 decimal place.\n        case_str = (\n            f\"[{r[0]:.3f},{r[1]:.1f},\"\n            f\"{r[2]:.3f},{r[3]:.1f},\"\n            f\"{r[4]:.3f},{r[5]:.3f},\"\n            f\"{r[6]:.1f},{r[7]:.1f}]\"\n        )\n        output_parts.append(case_str)\n    \n    final_output = f\"[{','.join(output_parts)}]\"\n    print(final_output)\n\nsolve()\n```", "id": "2965254"}]}