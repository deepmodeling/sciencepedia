{"hands_on_practices": [{"introduction": "The adhesive function of classical cadherins is critically dependent on extracellular calcium ($\\mathrm{Ca}^{2+}$), which rigidifies the ectodomain to enable proper dimerization. This exercise provides quantitative practice in applying the law of mass action to determine the free $\\mathrm{Ca}^{2+}$ concentration in a buffered solution, a common experimental challenge. By calculating the fractional occupancy of cadherin's calcium-binding sites, you will build a concrete understanding of how the biochemical environment governs the very first step of cell-cell adhesion [@problem_id:2936361].", "problem": "Classical cadherins require extracellular calcium ions ($\\mathrm{Ca}^{2+}$) bound at conserved linker sites between adjacent extracellular cadherin (EC) repeats to adopt a rigid, adhesive-competent conformation. Consider one EC1–EC2 linker that presents three nonidentical $\\mathrm{Ca}^{2+}$ binding sites, each obeying the law of mass action and binding independently. The dissociation constants for $\\mathrm{Ca}^{2+}$ at these three sites are $K_{d,1} = 0.3\\,\\mathrm{mM}$, $K_{d,2} = 0.8\\,\\mathrm{mM}$, and $K_{d,3} = 1.5\\,\\mathrm{mM}$, respectively. A cell is bathed in a buffered extracellular solution containing total calcium $C_T = 2.0\\,\\mathrm{mM}$ and the chelator ethylene glycol-bis($\\beta$-aminoethyl ether)-$N,N,N',N'$-tetraacetic acid (EGTA) at total concentration $E_T = 1.5\\,\\mathrm{mM}$. Under the experimental conditions, the dissociation constant for the $\\mathrm{Ca}^{2+}$–EGTA complex is $K_{d,\\mathrm{EGTA}} = 2.0 \\times 10^{-4}\\,\\mathrm{mM}$. The cadherin concentration is sufficiently low that its $\\mathrm{Ca}^{2+}$ binding does not measurably deplete the free $\\mathrm{Ca}^{2+}$ pool.\n\nStarting from the law of mass action and conservation of mass for the $\\mathrm{Ca}^{2+}$–EGTA equilibrium, and the definition of a dissociation constant for ligand binding to a single site, determine the fraction $f$ of the three EC linker sites that are occupied by $\\mathrm{Ca}^{2+}$ at equilibrium. Express the final answer as a unitless decimal rounded to four significant figures.", "solution": "The goal is to compute the unitless fraction $f$ of the three EC linker sites that are occupied by $\\mathrm{Ca}^{2+}$ at equilibrium. The calculation proceeds in two stages: (i) determine the free calcium concentration $[\\mathrm{Ca}^{2+}]_{\\mathrm{free}}$ in the presence of ethylene glycol-bis($\\beta$-aminoethyl ether)-$N,N,N',N'$-tetraacetic acid (EGTA) using the law of mass action and conservation of mass, and (ii) compute the fractional occupancy of each independent site using the definition of a dissociation constant, then average across the three sites.\n\nStage (i): Free calcium from $\\mathrm{Ca}^{2+}$–EGTA equilibrium.\n- Let $c = [\\mathrm{Ca}^{2+}]_{\\mathrm{free}}$, $e = [\\mathrm{EGTA}]_{\\mathrm{free}}$, and $x = [\\mathrm{CaEGTA}]$.\n- The law of mass action for the $1{:}1$ complex gives $K_{d,\\mathrm{EGTA}} = \\dfrac{c\\,e}{x}$.\n- Conservation of mass gives $C_T = c + x$ and $E_T = e + x$, where $C_T$ and $E_T$ are the total calcium and total EGTA concentrations, respectively.\n\nEliminate $e$ using $e = E_T - x$ and $x = C_T - c$:\n$$\nK_{d,\\mathrm{EGTA}} = \\frac{c\\,(E_T - x)}{x} = \\frac{c\\,[E_T - (C_T - c)]}{C_T - c} = \\frac{c\\,(E_T - C_T + c)}{C_T - c}.\n$$\nRearrange to obtain a quadratic in $c$:\n$$\nK_{d,\\mathrm{EGTA}}(C_T - c) = c\\,(E_T - C_T + c)\n\\;\\Longrightarrow\\;\nc^2 + c\\,(K_{d,\\mathrm{EGTA}} + E_T - C_T) - C_T K_{d,\\mathrm{EGTA}} = 0.\n$$\nWith $C_T = 2.0\\,\\mathrm{mM}$, $E_T = 1.5\\,\\mathrm{mM}$, and $K_{d,\\mathrm{EGTA}} = 2.0 \\times 10^{-4}\\,\\mathrm{mM}$, the physically relevant (positive) root is\n$$\nc = \\frac{ -\\big(K_{d,\\mathrm{EGTA}} + E_T - C_T\\big) + \\sqrt{\\big(K_{d,\\mathrm{EGTA}} + E_T - C_T\\big)^2 + 4 C_T K_{d,\\mathrm{EGTA}}} }{2}.\n$$\nNumerically,\n$$\nK_{d,\\mathrm{EGTA}} + E_T - C_T = 2.0\\times 10^{-4} - 0.5 = -0.4998,\n$$\n$$\n\\sqrt{(-0.4998)^2 + 4(2.0)(2.0\\times 10^{-4})} = \\sqrt{0.25140004} \\approx 0.501398085,\n$$\nso\n$$\nc \\approx \\frac{0.4998 + 0.501398085}{2} \\approx 0.5005990425\\ \\text{mM}.\n$$\n\nStage (ii): Fractional occupancy of independent sites.\nFor a single binding site $R + \\mathrm{Ca}^{2+} \\rightleftharpoons R\\mathrm{Ca}$ with dissociation constant $K_{d,i} = \\dfrac{[R][\\mathrm{Ca}^{2+}]}{[R\\mathrm{Ca}]}$, the fractional occupancy is\n$$\n\\theta_i \\equiv \\frac{[R\\mathrm{Ca}]}{[R] + [R\\mathrm{Ca}]} = \\frac{[\\mathrm{Ca}^{2+}]_{\\mathrm{free}}}{[\\mathrm{Ca}^{2+}]_{\\mathrm{free}} + K_{d,i}}.\n$$\nUsing $[\\mathrm{Ca}^{2+}]_{\\mathrm{free}} = c \\approx 0.5005990425\\,\\mathrm{mM}$:\n- For $K_{d,1} = 0.3\\,\\mathrm{mM}$,\n$$\n\\theta_1 = \\frac{0.5005990425}{0.5005990425 + 0.3} = \\frac{0.5005990425}{0.8005990425} \\approx 0.625280563.\n$$\n- For $K_{d,2} = 0.8\\,\\mathrm{mM}$,\n$$\n\\theta_2 = \\frac{0.5005990425}{0.5005990425 + 0.8} = \\frac{0.5005990425}{1.3005990425} \\approx 0.384898845.\n$$\n- For $K_{d,3} = 1.5\\,\\mathrm{mM}$,\n$$\n\\theta_3 = \\frac{0.5005990425}{0.5005990425 + 1.5} = \\frac{0.5005990425}{2.0005990425} \\approx 0.250224495.\n$$\n\nThe fraction $f$ of the three sites that are occupied is the mean occupancy across the independent sites:\n$$\nf = \\frac{\\theta_1 + \\theta_2 + \\theta_3}{3} \\approx \\frac{0.625280563 + 0.384898845 + 0.250224495}{3} \\approx 0.4201346343.\n$$\n\nRounded to four significant figures, the unitless fraction is $0.4201$.", "answer": "$$\\boxed{0.4201}$$", "id": "2936361"}, {"introduction": "Adherens junctions are not static structures; they are dynamic, force-bearing complexes central to mechanosensing. This problem delves into the mechanical stability of a single cadherin trans-dimer using the celebrated Bell model of force-dependent bond rupture. You will derive and apply this model to calculate how a bond's lifetime changes under tension, providing a fundamental biophysical perspective on how junctions withstand and respond to the physical forces that shape tissues [@problem_id:2936405].", "problem": "A single epithelial cadherin (E-cadherin) trans-bond between opposing cells is held under a constant tensile force clamp. Model the dissociation as escape over a single thermally activated energy barrier using transition-state theory, where the off-rate scales as $k_{\\mathrm{off}} \\propto \\exp\\!\\big(-\\Delta G^{\\ddagger}/(k_B T)\\big)$, with $k_B$ the Boltzmann constant and $T$ the absolute temperature. At zero force, the barrier is $\\Delta G^{\\ddagger}_0$ and the off-rate is $k_0$. Under a constant force $F$ aligned with the reaction coordinate, the barrier is lowered by the mechanical work $W=F x_b$, where $x_b$ is the projection distance from the bound-state minimum to the transition state along the pulling coordinate.\n\nStarting from these premises and the definition of the mean lifetime of a Poisson (memoryless) dissociation process, derive an expression for the force-dependent mean lifetime $\\tau(F)$ in terms of $k_0$, $F$, $x_b$, $k_B$, and $T$. Then evaluate $\\tau(F)$ numerically for a cadherin bond with zero-force off-rate $k_0 = 0.020~\\mathrm{s}^{-1}$, barrier projection distance $x_b = 0.50~\\mathrm{nm}$, held at force $F = 25~\\mathrm{pN}$ and temperature $T = 310~\\mathrm{K}$. Use the Boltzmann constant $k_B = 1.380649 \\times 10^{-23}~\\mathrm{J\\,K^{-1}}$. Express the final lifetime in seconds and round your answer to three significant figures.", "solution": "The force-dependent dissociation rate, $k_{\\mathrm{off}}(F)$, is given to be proportional to $\\exp(-\\Delta G^{\\ddagger}(F)/(k_B T))$, where $\\Delta G^{\\ddagger}(F)$ is the force-dependent activation energy barrier. Let the constant of proportionality be $A$. Thus,\n$$k_{\\mathrm{off}}(F) = A \\exp\\left(-\\frac{\\Delta G^{\\ddagger}(F)}{k_B T}\\right)$$\nAt zero force ($F=0$), the barrier is $\\Delta G^{\\ddagger}(0) = \\Delta G^{\\ddagger}_0$, and the dissociation rate is $k_0$.\n$$k_0 = A \\exp\\left(-\\frac{\\Delta G^{\\ddagger}_0}{k_B T}\\right)$$\nFrom this, we can identify the pre-exponential factor $A = k_0 \\exp(\\Delta G^{\\ddagger}_0/(k_B T))$.\n\nUnder an applied tensile force $F$, the energy barrier is lowered by an amount equal to the mechanical work done on the system to move it from the bound state to the transition state. This work is given as $W = F x_b$. The new, force-dependent energy barrier is therefore:\n$$\\Delta G^{\\ddagger}(F) = \\Delta G^{\\ddagger}_0 - F x_b$$\nSubstituting this into the general expression for $k_{\\mathrm{off}}(F)$:\n$$k_{\\mathrm{off}}(F) = A \\exp\\left(-\\frac{\\Delta G^{\\ddagger}_0 - F x_b}{k_B T}\\right)$$\n$$k_{\\mathrm{off}}(F) = A \\exp\\left(-\\frac{\\Delta G^{\\ddagger}_0}{k_B T}\\right) \\exp\\left(\\frac{F x_b}{k_B T}\\right)$$\nRecognizing that the term $A \\exp(-\\Delta G^{\\ddagger}_0 / (k_B T))$ is precisely the zero-force off-rate, $k_0$, we obtain the Bell model equation:\n$$k_{\\mathrm{off}}(F) = k_0 \\exp\\left(\\frac{F x_b}{k_B T}\\right)$$\nThe problem states that the dissociation is a Poisson process. For a memoryless process described by a constant rate $k$, the probability that the event has not occurred by time $t$ is $P(t) = \\exp(-kt)$. The mean lifetime, $\\tau$, is the expectation value of the lifetime, which is given by the integral $\\int_0^\\infty t (k \\exp(-kt)) dt = 1/k$.\nTherefore, the mean lifetime $\\tau(F)$ is the reciprocal of the force-dependent off-rate $k_{\\mathrm{off}}(F)$:\n$$\\tau(F) = \\frac{1}{k_{\\mathrm{off}}(F)}$$\nSubstituting the expression for $k_{\\mathrm{off}}(F)$, we arrive at the final analytical expression for the force-dependent mean lifetime:\n$$\\tau(F) = \\frac{1}{k_0} \\exp\\left(-\\frac{F x_b}{k_B T}\\right)$$\nThis concludes the derivation.\n\nNow, we must evaluate this expression numerically using the provided data. The parameters must be in base SI units for consistency.\n- $k_0 = 0.020~\\mathrm{s}^{-1}$\n- $F = 25~\\mathrm{pN} = 25 \\times 10^{-12}~\\mathrm{N}$\n- $x_b = 0.50~\\mathrm{nm} = 0.50 \\times 10^{-9}~\\mathrm{m}$\n- $T = 310~\\mathrm{K}$\n- $k_B = 1.380649 \\times 10^{-23}~\\mathrm{J\\,K^{-1}}$\n\nFirst, we compute the value of the dimensionless exponent, $\\frac{F x_b}{k_B T}$.\nThe mechanical work term in the numerator is:\n$$F x_b = (25 \\times 10^{-12}~\\mathrm{N}) \\times (0.50 \\times 10^{-9}~\\mathrm{m}) = 1.25 \\times 10^{-20}~\\mathrm{N \\cdot m} = 1.25 \\times 10^{-20}~\\mathrm{J}$$\nThe thermal energy term in the denominator is:\n$$k_B T = (1.380649 \\times 10^{-23}~\\mathrm{J\\,K^{-1}}) \\times (310~\\mathrm{K}) \\approx 4.2799919 \\times 10^{-21}~\\mathrm{J}$$\nThe ratio is:\n$$\\frac{F x_b}{k_B T} \\approx \\frac{1.25 \\times 10^{-20}~\\mathrm{J}}{4.2799919 \\times 10^{-21}~\\mathrm{J}} \\approx 2.920565$$\nNow we can calculate the mean lifetime $\\tau(F)$:\n$$\\tau(F) = \\frac{1}{0.020~\\mathrm{s}^{-1}} \\exp(-2.920565) = 50~\\mathrm{s} \\times \\exp(-2.920565)$$\n$$\\exp(-2.920565) \\approx 0.053901$$\n$$\\tau(F) \\approx 50~\\mathrm{s} \\times 0.053901 \\approx 2.69505~\\mathrm{s}$$\nThe problem requires the answer to be rounded to three significant figures.\n$$\\tau(F) \\approx 2.70~\\mathrm{s}$$", "answer": "$$\\boxed{2.70}$$", "id": "2936405"}, {"introduction": "The collective behavior of cells in a tissue emerges from local mechanical interactions at their junctions. This hands-on computational exercise introduces the vertex model, a powerful framework for simulating tissue mechanics by representing cells as polygons governed by line tension and area elasticity. By implementing a simplified two-cell system, you will directly investigate how an increase in cadherin-mediated tension at a single cell-cell interface can trigger a topological rearrangement—a fundamental event in tissue morphogenesis and repair [@problem_id:2936395].", "problem": "You are asked to formalize a minimal vertex-model representation of adherens junction mechanics dominated by cadherin-mediated junctional line tension and cell area elasticity, and to predict which specified interfaces undergo topology change. In epithelia, epithelial cadherin (E-cadherin) at adherens junctions couples to the actomyosin cortex, which can be modeled in a coarse-grained way by a line-tension parameter. In a vertex model, the energy of a network of cells with vertices is written as the sum of junctional line-tension terms and cell area elasticity terms. In this problem you will implement a reduced, but mechanically consistent, two-cell system sharing a single junctional interface, and assess whether increasing the tension at that interface is sufficient to drive a topological edge collapse, which is the precursor to a neighbor exchange (a so-called T1 transition). The goal is to encode the following fundamental base into a runnable program and compute on a predefined test suite.\n\nFundamental definitions and assumptions:\n- The system comprises two polygonal cells that share a single straight interface (the “central interface”), represented by two mobile vertices. Two fixed “lateral anchors” represent mechanical constraints from the surrounding tissue. The entire system is planar.\n- The total mechanical energy is\n$$\nE = \\sum_{e \\in \\mathcal{E}} \\Lambda_e \\, L_e \\;+\\; \\sum_{i \\in \\mathcal{C}} \\frac{K}{2}\\,\\big(A_i - A_i^{(0)}\\big)^2,\n$$\nwhere $e$ indexes edges with line tension $\\Lambda_e$ and length $L_e$, and $i$ indexes cells with area $A_i$, target area $A_i^{(0)}$, and area elasticity $K$.\n- The only movable degrees of freedom are the two vertices forming the shared interface; all other vertices are fixed. The target areas $A_i^{(0)}$ are set to the initial areas at $t=0$.\n- A topology-change prediction is operationally defined as follows: after minimizing $E$ with respect to the two mobile vertices, if the optimized length of the shared interface is less than or equal to a small threshold $\\ell_{\\min}$, then the interface is predicted to collapse and a T1 neighbor exchange is expected; otherwise, it is not predicted to collapse. You must use $\\ell_{\\min} = 10^{-3}$ in dimensionless units.\n\nGeometry and parameters to implement:\n- Fixed anchor vertices are $L=(-1,0)$ and $R=(1,0)$.\n- The two mobile vertices are initially placed at $v_1=(0,-0.2)$ and $v_2=(0,0.2)$, forming the shared “central” interface with initial length $L_{\\mathrm{central}}(0)=0.4$.\n- Two cells are defined with counterclockwise vertex order:\n  - Left cell: polygon $[L, v_1, v_2]$.\n  - Right cell: polygon $[R, v_2, v_1]$.\n- The edge set $\\mathcal{E}$ contains the following undirected edges: the central interface $(v_1,v_2)$ and the four “lateral” edges $(v_1,L)$, $(v_2,L)$, $(v_1,R)$, $(v_2,R)$. The fixed anchors are not moved during minimization.\n- Line tensions are uniform on noncentral edges: $\\Lambda_{\\mathrm{other}}$ for edges $(v_1,L)$, $(v_2,L)$, $(v_1,R)$, $(v_2,R)$. The central interface has $\\Lambda_{\\mathrm{central}}$, which can be higher than $\\Lambda_{\\mathrm{other}}$ to encode a junctional tension increase at that specific interface.\n- The target areas $A_i^{(0)}$ are set to the initial areas at $t=0$ for each cell, i.e., $A_{\\mathrm{left}}^{(0)}=A_{\\mathrm{left}}(0)$ and $A_{\\mathrm{right}}^{(0)}=A_{\\mathrm{right}}(0)$.\n\nMinimization protocol to implement:\n- Use gradient descent with backtracking line-search to minimize $E$ with respect to the coordinates of $v_1$ and $v_2$, keeping $L$ and $R$ fixed. The gradient must be computed from first principles:\n  - For an edge $e=(i,j)$ with $\\Lambda_e$ and length $L_e=\\|\\mathbf{x}_j-\\mathbf{x}_i\\|$, the contribution to the gradient at $\\mathbf{x}_i$ is $-\\Lambda_e\\,(\\mathbf{x}_j-\\mathbf{x}_i)/L_e$ and at $\\mathbf{x}_j$ is $+\\Lambda_e\\,(\\mathbf{x}_j-\\mathbf{x}_i)/L_e$.\n  - For a polygonal cell with counterclockwise vertices $[\\mathbf{x}_0,\\dots,\\mathbf{x}_{n-1}]$, the signed area is $A=\\frac{1}{2}\\sum_{k} (x_k y_{k+1} - x_{k+1} y_k)$ with indices modulo $n$. The gradient of $A$ with respect to vertex $\\mathbf{x}_k=(x_k,y_k)$ is $\\nabla_{\\mathbf{x}_k} A = \\frac{1}{2}\\,(y_{k+1}-y_{k-1},\\,x_{k-1}-x_{k+1})$. The cell’s area-elasticity contribution to the gradient is $K\\,(A-A^{(0)})\\,\\nabla A$ at each vertex.\n- Terminate when either the gradient norm falls below $10^{-8}$ or a maximum of $5000$ iterations is reached. Use an Armijo-type condition with parameter $c=10^{-4}$ and backtracking factor $1/2$ starting from an initial step size $0.1$.\n\nTest suite:\nFor each test case, you are given $(K,\\Lambda_{\\mathrm{other}},\\Lambda_{\\mathrm{central}})$. Initialize the geometry and $A_i^{(0)}$ as specified above, minimize $E$, compute the optimized central length $L_{\\mathrm{central}}^{\\ast}$, and output a boolean indicating whether $L_{\\mathrm{central}}^{\\ast} \\le \\ell_{\\min}$.\n\nUse the following five test cases:\n- Case $1$: $K=10.0$, $\\Lambda_{\\mathrm{other}}=0.1$, $\\Lambda_{\\mathrm{central}}=0.5$.\n- Case $2$: $K=10.0$, $\\Lambda_{\\mathrm{other}}=0.05$, $\\Lambda_{\\mathrm{central}}=10.0$.\n- Case $3$: $K=100.0$, $\\Lambda_{\\mathrm{other}}=0.1$, $\\Lambda_{\\mathrm{central}}=5.0$.\n- Case $4$: $K=5.0$, $\\Lambda_{\\mathrm{other}}=0.1$, $\\Lambda_{\\mathrm{central}}=1.5$.\n- Case $5$ (edge case with very strong area constraint): $K=1000.0$, $\\Lambda_{\\mathrm{other}}=0.1$, $\\Lambda_{\\mathrm{central}}=50.0$.\n\nFinal output format:\nYour program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, in the same order as the test cases, for example, \"[True,False,True,False,True]\".", "solution": "### Solution Derivation and Algorithm\n\nThe task is to find the equilibrium configuration of the two-cell system by minimizing the total energy $E$ with respect to the coordinates of the mobile vertices $v_1 = (x_1, y_1)$ and $v_2 = (x_2, y_2)$. The state of the system can be represented by a vector $\\mathbf{X} = [x_1, y_1, x_2, y_2]^T$.\n\n**1. Initial State and Target Areas**\n\nThe fixed vertices are $L=(-1,0)$ and $R=(1,0)$. The initial positions of the mobile vertices are $v_1(0)=(0,-0.2)$ and $v_2(0)=(0,0.2)$. The target areas $A_i^{(0)}$ are calculated from these initial positions using the Shoelace formula for polygonal area, $A = \\frac{1}{2}\\sum_{k=0}^{n-1} (x_k y_{k+1} - x_{k+1} y_k)$ for counterclockwise vertices.\n\n- **Left cell** vertices: $[L, v_1(0), v_2(0)] = [(-1,0), (0,-0.2), (0,0.2)]$.\n  $$A_{\\mathrm{left}}^{(0)} = \\frac{1}{2} \\left| (-1)(-0.2) - (0)(0) + (0)(0.2) - (-0.2)(0) + (0)(0) - (0.2)(-1) \\right| = 0.2$$\n- **Right cell** vertices: $[R, v_2(0), v_1(0)] = [(1,0), (0,0.2), (0,-0.2)]$.\n  $$A_{\\mathrm{right}}^{(0)} = \\frac{1}{2} \\left| (1)(0.2) - (0)(0) + (0)(-0.2) - (0.2)(0) + (0)(0) - (-0.2)(1) \\right| = 0.2$$\nDue to symmetry, $A_{\\mathrm{left}}^{(0)} = A_{\\mathrm{right}}^{(0)} = 0.2$.\n\n**2. Energy and Gradient Calculation**\n\nThe total gradient $\\nabla_{\\mathbf{X}} E$ is the sum of gradients from the tension and area terms.\n\n- **Tension Term:** The potential energy of an edge with tension $\\Lambda_e$ between vertices $\\mathbf{x}_i$ and $\\mathbf{x}_j$ is $E_e = \\Lambda_e \\|\\mathbf{x}_j - \\mathbf{x}_i\\|$. The gradient with respect to $\\mathbf{x}_i$ is $\\nabla_{\\mathbf{x}_i} E_e = \\Lambda_e \\frac{\\mathbf{x}_i - \\mathbf{x}_j}{\\|\\mathbf{x}_j - \\mathbf{x}_i\\|}$. This matches the provided formula. The total tension gradient is the sum over all edges connected to a mobile vertex.\n\n- **Area Term:** The potential energy for a cell $i$ is $E_{A_i} = \\frac{K}{2}(A_i - A_i^{(0)})^2$. The gradient with respect to a vertex $\\mathbf{x}_k$ is $\\nabla_{\\mathbf{x}_k} E_{A_i} = K(A_i - A_i^{(0)}) \\nabla_{\\mathbf{x}_k} A_i$.\n  The gradient of the area itself, $\\nabla_{\\mathbf{x}_k} A_i$, is given by the specified formula $\\frac{1}{2}(y_{k+1}-y_{k-1}, x_{k-1}-x_{k+1})$. We apply this to both cells for each mobile vertex.\n\n  - **For the left cell** $[L, v_1, v_2]$ ($p_0=L, p_1=v_1, p_2=v_2$):\n    - $\\nabla_{v_1} A_{\\mathrm{left}} = \\frac{1}{2}(y_2 - y_L, x_L - x_2) = \\frac{1}{2}(y_2, -1 - x_2)$\n    - $\\nabla_{v_2} A_{\\mathrm{left}} = \\frac{1}{2}(y_L - y_1, x_1 - x_L) = \\frac{1}{2}(-y_1, x_1 + 1)$\n  - **For the right cell** $[R, v_2, v_1]$ ($q_0=R, q_1=v_2, q_2=v_1$):\n    - $\\nabla_{v_1} A_{\\mathrm{right}} = \\frac{1}{2}(y_R - y_2, x_2 - x_R) = \\frac{1}{2}(-y_2, x_2 - 1)$\n    - $\\nabla_{v_2} A_{\\mathrm{right}} = \\frac{1}{2}(y_1 - y_R, x_R - x_1) = \\frac{1}{2}(y_1, 1 - x_1)$\n\nThe total gradient $\\nabla_{\\mathbf{X}} E$ is a $4$-dimensional vector composed of the gradient contributions to $v_1=(x_1, y_1)$ and $v_2=(x_2, y_2)$.\n\n**3. Minimization Algorithm: Gradient Descent with Backtracking Line Search**\n\nThe algorithm proceeds as follows:\n1. Initialize $\\mathbf{X}^{(0)} = [0, -0.2, 0, 0.2]$.\n2. For iteration $k=0, 1, \\dots, N_{\\max}-1$:\n   a. Calculate the current energy $E^{(k)}$ and gradient $\\mathbf{g}^{(k)} = \\nabla_{\\mathbf{X}} E(\\mathbf{X}^{(k)})$.\n   b. Check for convergence: if $\\|\\mathbf{g}^{(k)}\\| < 10^{-8}$, terminate.\n   c. **Backtracking Line Search:**\n      i. Initialize step size $\\alpha = \\alpha_0 = 0.1$.\n      ii. While $E(\\mathbf{X}^{(k)} - \\alpha \\mathbf{g}^{(k)}) > E^{(k)} - c \\alpha \\|\\mathbf{g}^{(k)}\\|^2$:\n         - Reduce step size: $\\alpha \\leftarrow \\rho \\alpha$, where $\\rho=0.5$.\n      iii. Accept the step size $\\alpha$.\n   d. Update the state: $\\mathbf{X}^{(k+1)} = \\mathbf{X}^{(k)} - \\alpha \\mathbf{g}^{(k)}$.\n3. After termination, calculate the final length of the central interface, $L_{\\mathrm{central}}^{\\ast} = \\|\\mathbf{v}_2^{\\ast} - \\mathbf{v}_1^{\\ast}\\|$.\n4. The prediction is `True` if $L_{\\mathrm{central}}^{\\ast} \\le 10^{-3}$, and `False` otherwise. This procedure is repeated for each test case.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Main function to run the simulation for all test cases and print results.\n    \"\"\"\n    test_cases = [\n        (10.0, 0.1, 0.5),    # Case 1\n        (10.0, 0.05, 10.0),   # Case 2\n        (100.0, 0.1, 5.0),    # Case 3\n        (5.0, 0.1, 1.5),      # Case 4\n        (1000.0, 0.1, 50.0),  # Case 5\n    ]\n\n    results = []\n    for case in test_cases:\n        K, L_other, L_central = case\n        result = run_minimization(K, L_other, L_central)\n        results.append(result)\n\n    print(f\"[{','.join(map(str, results))}]\")\n\ndef run_minimization(K, L_other, L_central):\n    \"\"\"\n    Performs energy minimization for a single set of parameters.\n    \n    Args:\n        K (float): Area elasticity modulus.\n        L_other (float): Line tension for lateral edges.\n        L_central (float): Line tension for the central interface.\n        \n    Returns:\n        bool: True if the central interface is predicted to collapse, False otherwise.\n    \"\"\"\n    # Fixed and initial vertex positions\n    L_pos = np.array([-1.0, 0.0])\n    R_pos = np.array([1.0, 0.0])\n    v1_init = np.array([0.0, -0.2])\n    v2_init = np.array([0.0, 0.2])\n    \n    # State vector X = [v1_x, v1_y, v2_x, v2_y]\n    X = np.concatenate([v1_init, v2_init])\n    \n    # Calculate initial areas to set as target areas A^(0)\n    A0_left = 0.5 * (-v1_init[1] + v1_init[0]*v2_init[1] - v1_init[1]*v2_init[0] + v2_init[1])\n    A0_right = 0.5 * (v2_init[1] + v2_init[0]*v1_init[1] - v2_init[1]*v1_init[0] - v1_init[1])\n\n    # Minimization parameters\n    max_iter = 5000\n    grad_norm_thresh = 1e-8\n    l_min = 1e-3\n    \n    # Backtracking line search parameters\n    alpha_init = 0.1\n    c_armijo = 1e-4\n    backtrack_factor = 0.5\n\n    for _ in range(max_iter):\n        energy, grad = calculate_energy_and_gradient(X, K, L_other, L_central, A0_left, A0_right, L_pos, R_pos)\n        \n        grad_norm = np.linalg.norm(grad)\n        if grad_norm < grad_norm_thresh:\n            break\n        \n        # Backtracking line search\n        alpha = alpha_init\n        while True:\n            X_new = X - alpha * grad\n            new_energy, _ = calculate_energy_and_gradient(X_new, K, L_other, L_central, A0_left, A0_right, L_pos, R_pos)\n            \n            # Armijo condition\n            if new_energy <= energy - c_armijo * alpha * grad_norm**2:\n                break\n            \n            alpha *= backtrack_factor\n            if alpha < 1e-15:  # Prevent infinite loop if step size becomes too small\n                break\n\n        X = X - alpha * grad\n\n    v1_final = X[0:2]\n    v2_final = X[2:4]\n    final_central_length = np.linalg.norm(v2_final - v1_final)\n    \n    return final_central_length <= l_min\n\ndef calculate_energy_and_gradient(X, K, L_other, L_central, A0_left, A0_right, L_pos, R_pos):\n    \"\"\"\n    Calculates the total energy and its gradient for a given state.\n    \"\"\"\n    v1 = X[0:2]\n    v2 = X[2:4]\n    \n    # --- Energy Calculation ---\n    \n    # Area calculation using Shoelace formula for CCW vertices\n    A_left = 0.5 * (-v1[1] + v1[0]*v2[1] - v1[1]*v2[0] + v2[1])\n    A_right = 0.5 * (v2[1] + v2[0]*v1[1] - v2[1]*v1[0] - v1[1])\n    \n    E_area = (K / 2) * ((A_left - A0_left)**2 + (A_right - A0_right)**2)\n    \n    # Length calculation (add epsilon for numerical stability if needed, though unlikely here)\n    eps = 1e-12\n    vec_v1_v2 = v2 - v1\n    len_v1_v2 = np.linalg.norm(vec_v1_v2) + eps\n    \n    vec_v1_L = L_pos - v1\n    len_v1_L = np.linalg.norm(vec_v1_L) + eps\n    vec_v1_R = R_pos - v1\n    len_v1_R = np.linalg.norm(vec_v1_R) + eps\n    \n    vec_v2_L = L_pos - v2\n    len_v2_L = np.linalg.norm(vec_v2_L) + eps\n    vec_v2_R = R_pos - v2\n    len_v2_R = np.linalg.norm(vec_v2_R) + eps\n    \n    E_tension = L_central * len_v1_v2 + L_other * (len_v1_L + len_v1_R + len_v2_L + len_v2_R)\n    \n    total_energy = E_area + E_tension\n    \n    # --- Gradient Calculation ---\n    \n    # Gradient of area terms\n    dA_left_dv1 = 0.5 * np.array([v2[1], -1.0 - v2[0]])\n    dA_left_dv2 = 0.5 * np.array([-v1[1], v1[0] + 1.0])\n    \n    dA_right_dv1 = 0.5 * np.array([-v2[1], v2[0] - 1.0])\n    dA_right_dv2 = 0.5 * np.array([v1[1], 1.0 - v1[0]])\n    \n    term_A_left = K * (A_left - A0_left)\n    term_A_right = K * (A_right - A0_right)\n    \n    grad_v1_area = term_A_left * dA_left_dv1 + term_A_right * dA_right_dv1\n    grad_v2_area = term_A_left * dA_left_dv2 + term_A_right * dA_right_dv2\n    \n    # Gradient of tension terms\n    grad_v1_tension = (L_central * (-vec_v1_v2) / len_v1_v2 + \n                       L_other * (-vec_v1_L) / len_v1_L + \n                       L_other * (-vec_v1_R) / len_v1_R)\n                       \n    grad_v2_tension = (L_central * (vec_v1_v2) / len_v1_v2 +\n                       L_other * (-vec_v2_L) / len_v2_L + \n                       L_other * (-vec_v2_R) / len_v2_R)\n\n    grad = np.concatenate([grad_v1_area + grad_v1_tension,\n                           grad_v2_area + grad_v2_tension])\n                           \n    return total_energy, grad\n\nif __name__ == \"__main__\":\n    solve()\n\n```", "id": "2936395"}]}