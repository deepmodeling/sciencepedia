{"hands_on_practices": [{"introduction": "The strength of a promoter is critically dependent on its DNA sequence. This exercise provides a foundational, hands-on approach to quantifying this relationship using an additive energy model. You will calculate the precise change in binding free energy resulting from a single-base mutation, a core skill for understanding how genetic variation can impact gene regulation [@problem_id:2934443].", "problem": "In bacteria, the sigma factor 70 ($\\sigma^{70}$) of Ribonucleic Acid (RNA) polymerase (RNAP) recognizes the promoter $-35$ hexamer via base-specific contacts formed by region $4$ of $\\sigma^{70}$. A widely used and experimentally supported approximation for sequence-specific binding is that the binding free energy is the sum of independent, position-specific contributions from nucleotides at each position in the motif, plus a sequence-independent offset. Let the binding free energy for a hexamer sequence $b_{1}b_{2}b_{3}b_{4}b_{5}b_{6}$ be modeled as\n$$\n\\Delta G_{\\text{bind}} = \\Delta G_{0} + \\sum_{i=1}^{6} \\varepsilon_{i}(b_{i}),\n$$\nwhere $\\varepsilon_{i}(b)$ is the contribution of base $b \\in \\{\\mathrm{A},\\mathrm{C},\\mathrm{G},\\mathrm{T}\\}$ at position $i$. Consider the $-35$ hexamer of a strong $\\sigma^{70}$ promoter with sequence TTGACA (read $5'$ to $3'$ on the non-template, coding strand), where position $1$ is the $5'$-most base of the hexamer. The additive energy matrix $\\varepsilon_{i}(b)$ (in kcal/mol) is given by:\n- Position $1$: A: $0.6$, C: $0.7$, G: $0.3$, T: $-1.6$\n- Position $2$: A: $0.5$, C: $0.8$, G: $0.4$, T: $-1.3$\n- Position $3$: A: $0.9$, C: $0.6$, G: $-2.1$, T: $0.2$\n- Position $4$: A: $-1.4$, C: $0.5$, G: $0.1$, T: $0.3$\n- Position $5$: A: $0.7$, C: $-1.5$, G: $0.2$, T: $0.4$\n- Position $6$: A: $-1.2$, C: $0.4$, G: $0.0$, T: $0.5$\n\nA single-nucleotide variant is introduced in the $-35$ hexamer, changing TTGACA to TTAACA (a $\\mathrm{G} \\rightarrow \\mathrm{A}$ substitution at position $3$).\n\nUsing the additive model above and fundamental thermodynamic additivity of independent contact energies, compute the expected change in binding free energy,\n$$\n\\Delta\\Delta G \\equiv \\Delta G_{\\text{bind}}(\\text{mutant}) - \\Delta G_{\\text{bind}}(\\text{wild type}),\n$$\nfor this single base substitution. Express your final answer in kcal/mol and round your answer to four significant figures.", "solution": "The problem is first validated for scientific soundness and consistency.\n\n**Step 1: Extract Givens**\n- The binding free energy for a hexamer sequence $b_{1}b_{2}b_{3}b_{4}b_{5}b_{6}$ is given by the additive model:\n$$\n\\Delta G_{\\text{bind}} = \\Delta G_{0} + \\sum_{i=1}^{6} \\varepsilon_{i}(b_{i})\n$$\n- The wild-type (WT) $-35$ hexamer sequence is $\\text{TTGACA}$.\n- A single-nucleotide variant (mutant) sequence is $\\text{TTAACA}$, which corresponds to a $\\mathrm{G} \\rightarrow \\mathrm{A}$ substitution at position $3$.\n- The position-specific energy matrix $\\varepsilon_{i}(b)$ in units of kcal/mol is:\n  - Position $1$: $\\varepsilon_{1}(\\mathrm{A})=0.6$, $\\varepsilon_{1}(\\mathrm{C})=0.7$, $\\varepsilon_{1}(\\mathrm{G})=0.3$, $\\varepsilon_{1}(\\mathrm{T})=-1.6$\n  - Position $2$: $\\varepsilon_{2}(\\mathrm{A})=0.5$, $\\varepsilon_{2}(\\mathrm{C})=0.8$, $\\varepsilon_{2}(\\mathrm{G})=0.4$, $\\varepsilon_{2}(\\mathrm{T})=-1.3$\n  - Position $3$: $\\varepsilon_{3}(\\mathrm{A})=0.9$, $\\varepsilon_{3}(\\mathrm{C})=0.6$, $\\varepsilon_{3}(\\mathrm{G})=-2.1$, $\\varepsilon_{3}(\\mathrm{T})=0.2$\n  - Position $4$: $\\varepsilon_{4}(\\mathrm{A})=-1.4$, $\\varepsilon_{4}(\\mathrm{C})=0.5$, $\\varepsilon_{4}(\\mathrm{G})=0.1$, $\\varepsilon_{4}(\\mathrm{T})=0.3$\n  - Position $5$: $\\varepsilon_{5}(\\mathrm{A})=0.7$, $\\varepsilon_{5}(\\mathrm{C})=-1.5$, $\\varepsilon_{5}(\\mathrm{G})=0.2$, $\\varepsilon_{5}(\\mathrm{T})=0.4$\n  - Position $6$: $\\varepsilon_{6}(\\mathrm{A})=-1.2$, $\\varepsilon_{6}(\\mathrm{C})=0.4$, $\\varepsilon_{6}(\\mathrm{G})=0.0$, $\\varepsilon_{6}(\\mathrm{T})=0.5$\n- The quantity to be computed is the change in binding free energy:\n$$\n\\Delta\\Delta G = \\Delta G_{\\text{bind}}(\\text{mutant}) - \\Delta G_{\\text{bind}}(\\text{wild type})\n$$\n\n**Step 2: Validate Using Extracted Givens**\n- **Scientific Groundedness**: The problem is based on the widely accepted additive model (Position Weight Matrix) used in biophysics to approximate protein-DNA binding energies. This is a standard concept in molecular and cell biology.\n- **Well-Posedness**: The problem is well-posed. It provides a clear mathematical model, all necessary parameters (the energy matrix), the specific sequences, and a well-defined target quantity to calculate. A unique solution exists.\n- **Objectivity**: The problem is stated in objective, scientific language, free of ambiguity or subjective claims.\n- The problem is self-contained and internally consistent. The value of the sequence-independent offset $\\Delta G_{0}$ is not given, but it is not required for the calculation of a *change* in free energy, as it will cancel out.\n\n**Step 3: Verdict and Action**\nThe problem is deemed valid. A solution will be derived.\n\nThe change in binding free energy, $\\Delta\\Delta G$, is defined as the difference between the binding free energy of the mutant sequence and the wild-type sequence.\n$$\n\\Delta\\Delta G = \\Delta G_{\\text{bind}}(\\text{mutant}) - \\Delta G_{\\text{bind}}(\\text{wild type})\n$$\nWe apply the given additive model for the binding free energy.\nFor the wild-type sequence, $\\text{TTGACA}$, the binding free energy is:\n$$\n\\Delta G_{\\text{bind}}(\\text{WT}) = \\Delta G_{0} + \\varepsilon_{1}(\\mathrm{T}) + \\varepsilon_{2}(\\mathrm{T}) + \\varepsilon_{3}(\\mathrm{G}) + \\varepsilon_{4}(\\mathrm{A}) + \\varepsilon_{5}(\\mathrm{C}) + \\varepsilon_{6}(\\mathrm{A})\n$$\nFor the mutant sequence, $\\text{TTAACA}$, the binding free energy is:\n$$\n\\Delta G_{\\text{bind}}(\\text{mutant}) = \\Delta G_{0} + \\varepsilon_{1}(\\mathrm{T}) + \\varepsilon_{2}(\\mathrm{T}) + \\varepsilon_{3}(\\mathrm{A}) + \\varepsilon_{4}(\\mathrm{A}) + \\varepsilon_{5}(\\mathrm{C}) + \\varepsilon_{6}(\\mathrm{A})\n$$\nNow, we compute the difference $\\Delta\\Delta G$:\n$$\n\\Delta\\Delta G = \\left( \\Delta G_{0} + \\sum_{i=1}^{6} \\varepsilon_{i}(b_{i}^{\\text{mutant}}) \\right) - \\left( \\Delta G_{0} + \\sum_{i=1}^{6} \\varepsilon_{i}(b_{i}^{\\text{WT}}) \\right)\n$$\nThe sequence-independent term $\\Delta G_{0}$ cancels out:\n$$\n\\Delta\\Delta G = \\sum_{i=1}^{6} \\varepsilon_{i}(b_{i}^{\\text{mutant}}) - \\sum_{i=1}^{6} \\varepsilon_{i}(b_{i}^{\\text{WT}}) = \\sum_{i=1}^{6} \\left( \\varepsilon_{i}(b_{i}^{\\text{mutant}}) - \\varepsilon_{i}(b_{i}^{\\text{WT}}) \\right)\n$$\nThe mutation is a single base substitution at position $i=3$, where the base changes from $\\mathrm{G}$ to $\\mathrm{A}$. For all other positions ($i \\in \\{1, 2, 4, 5, 6\\}$), the base is unchanged, i.e., $b_{i}^{\\text{mutant}} = b_{i}^{\\text{WT}}$. Consequently, the terms in the summation are zero for all $i \\neq 3$. The expression for $\\Delta\\Delta G$ simplifies dramatically to only the contribution from the mutated site:\n$$\n\\Delta\\Delta G = \\varepsilon_{3}(b_{3}^{\\text{mutant}}) - \\varepsilon_{3}(b_{3}^{\\text{WT}})\n$$\nThe wild-type base at position $3$ is $\\mathrm{G}$, so $b_{3}^{\\text{WT}} = \\mathrm{G}$. The mutant base at position $3$ is $\\mathrm{A}$, so $b_{3}^{\\text{mutant}} = \\mathrm{A}$.\nSubstituting these into the simplified equation gives:\n$$\n\\Delta\\Delta G = \\varepsilon_{3}(\\mathrm{A}) - \\varepsilon_{3}(\\mathrm{G})\n$$\nFrom the provided energy matrix for position $3$:\n- $\\varepsilon_{3}(\\mathrm{A}) = 0.9$ kcal/mol\n- $\\varepsilon_{3}(\\mathrm{G}) = -2.1$ kcal/mol\nWe substitute these values into our equation for $\\Delta\\Delta G$:\n$$\n\\Delta\\Delta G = 0.9 - (-2.1) \\text{ kcal/mol}\n$$\n$$\n\\Delta\\Delta G = 0.9 + 2.1 \\text{ kcal/mol}\n$$\n$$\n\\Delta\\Delta G = 3.0 \\text{ kcal/mol}\n$$\nThe problem requires the answer to be rounded to four significant figures. The calculated value is exactly $3.0$. To express this with four significant figures, we write it as $3.000$. A positive $\\Delta\\Delta G$ indicates that the mutation destabilizes the binding interaction, making it less favorable.", "answer": "$$\n\\boxed{3.000}\n$$", "id": "2934443"}, {"introduction": "While binding affinity provides a static measure of promoter strength, the actual rate of transcription is a dynamic process. This practice moves beyond simple binding thermodynamics to explore the kinetics of transcription initiation, where multiple steps contribute to the final output. By analyzing a two-step kinetic model, you will learn how to calculate and compare the transcriptional flux of different promoters, revealing that the \"strongest\" promoter is not always the one with the tightest binding [@problem_id:2934446].", "problem": "A single-copy chromosomal promoter is modeled as a two-step kinetic system for bacterial transcription initiation by a pre-assembled ribonucleic acid polymerase (RNAP) holoenzyme containing a specific sigma factor (σ) that confers promoter recognition. The mechanistic steps are: RNAP holoenzyme binds the promoter to form a closed complex, and the closed complex either dissociates or isomerizes and escapes into productive initiation. Assume that isomerization and escape are lumped into a single effectively irreversible step on the timescale of interest. Consider two Escherichia coli promoters, $P_{A}$ and $P_{B}$, both recognized by the same RNAP–sigma holoenzyme, but with different kinetic parameters reflecting different sigma factor recognition strengths.\n\nLet the kinetic scheme for each promoter be: $E + P \\xrightleftharpoons[k_{-1}]{k_{1}} EP \\xrightarrow{k_{2}} \\text{initiation}$, where $E$ denotes the RNAP–sigma holoenzyme, $P$ the free promoter, $EP$ the RNAP–promoter closed complex, $k_{1}$ the second-order association rate constant, $k_{-1}$ the first-order dissociation rate constant, and $k_{2}$ the first-order isomerization/escape rate constant to productive initiation. Assume that $[E]$ is effectively constant (the RNAP holoenzyme pool is large), and that each promoter exists in a single copy so that the initiation flux per promoter copy equals the steady-state initiation rate for that single site.\n\nExperimental measurements at $37\\ ^\\circ\\mathrm{C}$ yield the following kinetic constants:\n- For promoter $P_{A}$: $k_{1,A} = 0.05\\ \\mathrm{nM}^{-1}\\ \\mathrm{s}^{-1}$, $k_{-1,A} = 2.0\\ \\mathrm{s}^{-1}$, $k_{2,A} = 0.50\\ \\mathrm{s}^{-1}$.\n- For promoter $P_{B}$: $k_{1,B} = 0.020\\ \\mathrm{nM}^{-1}\\ \\mathrm{s}^{-1}$, $k_{-1,B} = 0.50\\ \\mathrm{s}^{-1}$, $k_{2,B} = 2.0\\ \\mathrm{s}^{-1}$.\n\nIn a defined growth condition, the concentration of RNAP–sigma holoenzyme available to these promoters is $[E] = 30\\ \\mathrm{nM}$. Under the assumptions above, compute the ratio of steady-state initiation fluxes per promoter copy, $J_{A}/J_{B}$, where $J_{A}$ and $J_{B}$ are the initiation fluxes for $P_{A}$ and $P_{B}$, respectively. Express your answer as a single dimensionless number. No rounding is required.", "solution": "The problem presented is a standard exercise in chemical kinetics, specifically the application of the steady-state approximation to enzyme-like catalysis, in this case, transcription initiation by RNA polymerase. The problem is scientifically grounded, well-posed, and contains all necessary information for a unique solution. Therefore, we proceed with the derivation.\n\nThe kinetic scheme for transcription initiation at a promoter $P$ by the RNAP-holoenzyme $E$ is given as:\n$$ E + P \\xrightleftharpoons[k_{-1}]{k_{1}} EP \\xrightarrow{k_{2}} \\text{initiation} $$\nHere, $EP$ represents the closed complex. The final step, with rate constant $k_2$, is irreversible and leads to productive initiation. The initiation flux per promoter copy, $J$, is the rate of this final step.\n\nSince the promoter is a single copy on the chromosome, its state can be described by probabilities. Let $p_{free}$ be the probability that the promoter is free ($P$) and $p_{bound}$ be the probability that it is occupied by the holoenzyme in a closed complex ($EP$). By definition, the sum of these probabilities is unity:\n$$ p_{free} + p_{bound} = 1 $$\n\nThe rate of change of the probability of the bound state is described by the following differential equation, where the concentration of the RNAP-holoenzyme $[E]$ is assumed to be constant:\n$$ \\frac{dp_{bound}}{dt} = k_{1} [E] p_{free} - (k_{-1} + k_{2}) p_{bound} $$\nAt steady state, $\\frac{dp_{bound}}{dt} = 0$. This condition implies that the rate of formation of the closed complex equals the rate of its disappearance (either by dissociation or by productive initiation).\n$$ k_{1} [E] p_{free,ss} = (k_{-1} + k_{2}) p_{bound,ss} $$\nwhere the subscript $ss$ denotes the steady state.\n\nSubstituting $p_{free,ss} = 1 - p_{bound,ss}$ into the steady-state equation:\n$$ k_{1} [E] (1 - p_{bound,ss}) = (k_{-1} + k_{2}) p_{bound,ss} $$\nExpanding the left side and rearranging to solve for $p_{bound,ss}$:\n$$ k_{1} [E] - k_{1} [E] p_{bound,ss} = (k_{-1} + k_{2}) p_{bound,ss} $$\n$$ k_{1} [E] = (k_{1} [E] + k_{-1} + k_{2}) p_{bound,ss} $$\nThis yields the steady-state probability of the promoter being in the closed complex conformation:\n$$ p_{bound,ss} = \\frac{k_{1} [E]}{k_{1} [E] + k_{-1} + k_{2}} $$\nThe steady-state initiation flux per promoter, $J$, is the rate of the productive step, which is the product of the rate constant $k_{2}$ and the probability of the promoter being in the prerequisite state, $p_{bound,ss}$:\n$$ J = k_{2} \\cdot p_{bound,ss} = k_{2} \\frac{k_{1} [E]}{k_{1} [E] + k_{-1} + k_{2}} $$\nWe apply this general formula to each promoter, $P_{A}$ and $P_{B}$, using the provided kinetic parameters and the constant holoenzyme concentration $[E] = 30\\ \\mathrm{nM}$.\n\nFor promoter $P_{A}$:\n$k_{1,A} = 0.05\\ \\mathrm{nM}^{-1}\\ \\mathrm{s}^{-1}$\n$k_{-1,A} = 2.0\\ \\mathrm{s}^{-1}$\n$k_{2,A} = 0.50\\ \\mathrm{s}^{-1}$\nFirst, we compute the product $k_{1,A} [E]$:\n$$ k_{1,A} [E] = (0.05\\ \\mathrm{nM}^{-1}\\ \\mathrm{s}^{-1}) \\times (30\\ \\mathrm{nM}) = 1.5\\ \\mathrm{s}^{-1} $$\nNow, we compute the flux $J_{A}$:\n$$ J_{A} = k_{2,A} \\frac{k_{1,A} [E]}{k_{1,A} [E] + k_{-1,A} + k_{2,A}} = (0.50\\ \\mathrm{s}^{-1}) \\frac{1.5\\ \\mathrm{s}^{-1}}{1.5\\ \\mathrm{s}^{-1} + 2.0\\ \\mathrm{s}^{-1} + 0.50\\ \\mathrm{s}^{-1}} $$\n$$ J_{A} = 0.50 \\frac{1.5}{4.0} \\ \\mathrm{s}^{-1} = \\frac{1}{2} \\cdot \\frac{3/2}{4} \\ \\mathrm{s}^{-1} = \\frac{1}{2} \\cdot \\frac{3}{8} \\ \\mathrm{s}^{-1} = \\frac{3}{16}\\ \\mathrm{s}^{-1} $$\n\nFor promoter $P_{B}$:\n$k_{1,B} = 0.020\\ \\mathrm{nM}^{-1}\\ \\mathrm{s}^{-1}$\n$k_{-1,B} = 0.50\\ \\mathrm{s}^{-1}$\n$k_{2,B} = 2.0\\ \\mathrm{s}^{-1}$\nFirst, we compute the product $k_{1,B} [E]$:\n$$ k_{1,B} [E] = (0.020\\ \\mathrm{nM}^{-1}\\ \\mathrm{s}^{-1}) \\times (30\\ \\mathrm{nM}) = 0.60\\ \\mathrm{s}^{-1} $$\nNow, we compute the flux $J_{B}$:\n$$ J_{B} = k_{2,B} \\frac{k_{1,B} [E]}{k_{1,B} [E] + k_{-1,B} + k_{2,B}} = (2.0\\ \\mathrm{s}^{-1}) \\frac{0.60\\ \\mathrm{s}^{-1}}{0.60\\ \\mathrm{s}^{-1} + 0.50\\ \\mathrm{s}^{-1} + 2.0\\ \\mathrm{s}^{-1}} $$\n$$ J_{B} = 2.0 \\frac{0.60}{3.1} \\ \\mathrm{s}^{-1} = 2 \\cdot \\frac{6/10}{31/10} \\ \\mathrm{s}^{-1} = 2 \\cdot \\frac{6}{31} \\ \\mathrm{s}^{-1} = \\frac{12}{31}\\ \\mathrm{s}^{-1} $$\n\nFinally, we compute the ratio of the steady-state initiation fluxes, $J_{A}/J_{B}$:\n$$ \\frac{J_{A}}{J_{B}} = \\frac{3/16\\ \\mathrm{s}^{-1}}{12/31\\ \\mathrm{s}^{-1}} = \\frac{3}{16} \\cdot \\frac{31}{12} = \\frac{1}{16} \\cdot \\frac{31}{4} = \\frac{31}{64} $$\nThis ratio is a dimensionless number, as required.", "answer": "$$\\boxed{\\frac{31}{64}}$$", "id": "2934446"}, {"introduction": "Identifying and classifying promoters across a genome is a central task in molecular biology, often tackled with computational methods. This advanced practice challenges you to integrate the principles of binding energy, sequence motifs, and spacer constraints into a comprehensive bioinformatic tool. You will build an energy-based classifier to discriminate between promoters recognized by different sigma factors, a task that mirrors the real-world application of biophysical models in genomics [@problem_id:2934426].", "problem": "You are asked to construct an energy-based binary classifier for bacterial promoters that discriminates recognition by the housekeeping sigma factor $\\sigma^{70}$ versus the extracytoplasmic function sigma factor $\\sigma^{E}$ in bacteria. The classifier must operate on a fixed-length deoxyribonucleic acid (DNA) sequence window and must be grounded in the following principles and definitions.\n\nFundamental biological base:\n- Transcription initiation in bacteria proceeds when ribonucleic acid polymerase (RNA polymerase) holoenzyme, which includes a sigma factor, binds a promoter sequence upstream of a transcription start site. Different sigma factors exhibit distinct sequence specificities at the $-35$ and $-10$ promoter elements (relative to the transcription start site).\n- A standard and well-tested abstraction is that the binding free energy is additive across independently contributing positions, and that the probability of binding is proportional to a Boltzmann factor of the form $\\exp(-E)$, where $E$ is a free energy in units of thermal energy $k_B T$.\n- The total energy $E$ of sigma factor binding to a promoter candidate is modeled as the sum of: per-position base-specific energies for the $-35$ and $-10$ elements and a spacer length penalty that depends quadratically on the deviation of the spacer length from its factor-specific optimum.\n\nMathematical and algorithmic specification to implement:\n- You are given a DNA sequence window $S$ of length $L_w = 40$ (characters from the alphabet $\\{ \\mathrm{A}, \\mathrm{C}, \\mathrm{G}, \\mathrm{T} \\}$).\n- For each sigma factor $f \\in \\{\\sigma^{70}, \\sigma^{E}\\}$, you must consider placements of a $-35$ hexamer and a $-10$ hexamer within the window.\n- A placement is fully specified by the start index $i$ of the $-35$ hexamer (zero-based indexing into $S$) and a spacer length $L \\in \\{14,15,16,17,18,19,20\\}$, with the start index of the $-10$ hexamer given by $j = i + 6 + L$. Placements are valid only if both hexamers fit inside the window (i.e., $0 \\le i \\le L_w - 6$ and $0 \\le j \\le L_w - 6$).\n- For a given placement $(i,L)$ and sigma factor $f$, the total energy is\n$$\nE_f(i,L; S) = E_{-35,f}(S[i:i+6]) + E_{-10,f}(S[j:j+6]) + k_f \\, (L - L^{\\mathrm{opt}}_f)^2,\n$$\nwhere $E_{-35,f}$ and $E_{-10,f}$ are additive per-base contributions (defined below), $k_f$ is the spacer stiffness (in units of $k_B T$), and $L^{\\mathrm{opt}}_f$ is the optimal spacer length for factor $f$.\n- The binding free energy for factor $f$ is the minimum over all valid placements:\n$$\nE^{\\star}_f(S) = \\min_{\\substack{0 \\le i \\le L_w - 6 \\\\ L \\in \\{14,\\dots,20\\} \\\\ i + 6 + L \\le L_w - 6}} E_f(i,L; S).\n$$\n\nPer-base energy model:\n- For $\\sigma^{70}$:\n  - $-35$ consensus sequence: $\\mathrm{TTGACA}$.\n  - $-10$ consensus sequence: $\\mathrm{TATAAT}$.\n  - Per-position energy contributions for a hexamer $X_0 X_1 X_2 X_3 X_4 X_5$ aligned to a sequence $Y_0 Y_1 Y_2 Y_3 Y_4 Y_5$:\n    - At each position $p \\in \\{0,1,2,3,4,5\\}$, if $Y_p = X_p$ then contribute $e^{(70)}_{\\mathrm{cons},-35} = -2.0$ for $-35$, and $e^{(70)}_{\\mathrm{cons},-10} = -2.5$ for $-10$.\n    - Otherwise, contribute $e^{(70)}_{\\mathrm{mis}} = +0.5$.\n  - Spacer penalty: $k_{70} = 0.05$, optimal spacer $L^{\\mathrm{opt}}_{70} = 17$.\n\n- For $\\sigma^{E}$:\n  - $-35$ consensus sequence: $\\mathrm{GGAACT}$.\n  - $-10$ consensus sequence: $\\mathrm{TCAAAG}$.\n  - Per-position energy contributions:\n    - At each position $p \\in \\{0,1,2,3,4,5\\}$, if $Y_p = X_p$ then contribute $e^{(E)}_{\\mathrm{cons},-35} = -2.0$ for $-35$, and $e^{(E)}_{\\mathrm{cons},-10} = -2.3$ for $-10$.\n    - Otherwise, contribute $e^{(E)}_{\\mathrm{mis}} = +0.5$.\n  - Spacer penalty: $k_{E} = 0.08$, optimal spacer $L^{\\mathrm{opt}}_{E} = 16$.\n\nPosterior probability and decision rule:\n- Assume equal prior probabilities for $\\sigma^{70}$ and $\\sigma^{E}$. The posterior probability that $S$ is recognized by $\\sigma^{E}$ is\n$$\np_{\\sigma^{E}}(S) = \\frac{\\exp(-E^{\\star}_{E}(S))}{\\exp(-E^{\\star}_{E}(S)) + \\exp(-E^{\\star}_{70}(S))}.\n$$\n- The binary classification label is defined as $1$ if $\\sigma^{E}$ is more probable (i.e., $p_{\\sigma^{E}}(S) \\ge 0.5$) and $0$ otherwise.\n\nTest suite:\n- Use the following four sequences (each of length $L_w = 40$), where concatenation is indicated explicitly. All positions not explicitly specified are filled with cytosine.\n  - Case $1$ (engineered $\\sigma^{70}$-like, optimal spacer): $S_1 = \\mathrm{CC}$ + $\\mathrm{TTGACA}$ + $\\mathrm{C}$ repeated $17$ times + $\\mathrm{TATAAT}$ + $\\mathrm{C}$ repeated to reach length $40$.\n  - Case $2$ (engineered $\\sigma^{E}$-like, optimal spacer): $S_2 = \\mathrm{GGAACT}$ + $\\mathrm{C}$ repeated $16$ times + $\\mathrm{TCAAAG}$ + $\\mathrm{C}$ repeated to reach length $40$.\n  - Case $3$ (guanine–cytosine-rich, minimal adenine–thymine content): $S_3 = \\mathrm{GCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGC}$.\n  - Case $4$ (engineered $\\sigma^{70}$-like, boundary spacer): $S_4 = \\mathrm{C}$ repeated $10$ times + $\\mathrm{TTGACA}$ + $\\mathrm{C}$ repeated $14$ times + $\\mathrm{TATAAT}$ + $\\mathrm{C}$ repeated to reach length $40$.\n\nRequired computations and output:\n- For each $S_k$ with $k \\in \\{1,2,3,4\\}$, compute $E^{\\star}_{70}(S_k)$ and $E^{\\star}_E(S_k)$ by exhaustive search over all valid placements, then compute $p_{\\sigma^{E}}(S_k)$ as specified above.\n- For each case, output two values in order: the integer classification label (with $\\sigma^{E}$ coded as $1$ and $\\sigma^{70}$ coded as $0$) and the posterior probability $p_{\\sigma^{E}}(S_k)$ as a decimal rounded to exactly three digits after the decimal point.\n- Your program should produce a single line of output containing the results for all four test cases, aggregated as a flat list in the order $[ \\text{label}_1, p_{\\sigma^{E}}(S_1), \\text{label}_2, p_{\\sigma^{E}}(S_2), \\text{label}_3, p_{\\sigma^{E}}(S_3), \\text{label}_4, p_{\\sigma^{E}}(S_4) ]$, printed as a comma-separated list enclosed in square brackets, for example, $[0,0.123,1,0.876, \\dots ]$.\n\nAngle units are not applicable. No physical units are required beyond the implicit $k_B T$ normalization of energies. All numeric outputs must be in decimal form, not percentages.", "solution": "The problem statement is subjected to validation and is determined to be valid. It is scientifically grounded in established principles of molecular biophysics, specifically the energy-based modeling of protein-DNA interactions. The problem is well-posed, providing a complete set of definitions, parameters, and a clear objective. It is free from ambiguity, contradiction, and factual error. Therefore, a solution will be provided.\n\nThe task is to implement a binary classifier that determines whether a given deoxyribonucleic acid (DNA) sequence $S$ of length $L_w = 40$ is more likely to be recognized by the $\\sigma^{70}$ or $\\sigma^{E}$ sigma factor. The classification is based on the binding free energies of the respective RNA polymerase holoenzymes.\n\nThe core of the model is the calculation of the minimum binding free energy, $E^{\\star}_f(S)$, for each sigma factor $f \\in \\{\\sigma^{70}, \\sigma^{E}\\}$. This energy is found by searching over all possible placements of the promoter elements (the $-35$ and $-10$ hexamers) within the sequence window $S$. A placement is defined by a pair $(i, L)$, where $i$ is the zero-based starting index of the $-35$ hexamer and $L$ is the length of the spacer separating the $-35$ and $-10$ elements. The starting index of the $-10$ hexamer is then $j = i + 6 + L$.\n\nFor the search to be exhaustive, we must consider all valid placements. A placement $(i, L)$ is valid if both hexamers lie entirely within the sequence $S$ of length $L_w = 40$. This imposes the constraints:\n$0 \\le i \\le L_w - 6$\n$0 \\le i + 6 + L \\le L_w - 6$\nGiven $L_w = 40$, the conditions are $0 \\le i \\le 34$ and $i+L \\le 28$. The spacer length $L$ is restricted to the set $\\{14, 15, 16, 17, 18, 19, 20\\}$.\n\nFor each valid placement $(i, L)$ and sigma factor $f$, the total binding energy $E_f(i,L; S)$ is calculated as the sum of three components:\n$$\nE_f(i,L; S) = E_{-35,f}(S[i:i+6]) + E_{-10,f}(S[j:j+6]) + k_f \\, (L - L^{\\mathrm{opt}}_f)^2\n$$\nThe terms $E_{-35,f}$ and $E_{-10,f}$ represent the binding energy of the respective hexamers. This energy is additive, calculated on a per-base basis by comparing the sequence segment to the factor's consensus sequence. A match with the consensus base at a given position contributes a favorable (negative) energy, $e^{(f)}_{\\mathrm{cons}}$, while a mismatch contributes an unfavorable (positive) energy, $e^{(f)}_{\\mathrm{mis}}$.\n\nSpecifically, for a hexamer $Y = Y_0Y_1Y_2Y_3Y_4Y_5$ and a consensus sequence $X = X_0X_1X_2X_3X_4X_5$, the energy is:\n$$\nE_{\\text{hexamer}}(Y) = \\sum_{p=0}^{5} \\delta(Y_p, X_p)\n$$\nwhere $\\delta(Y_p, X_p)$ is $e^{(f)}_{\\mathrm{cons}}$ if $Y_p = X_p$ and $e^{(f)}_{\\mathrm{mis}}$ otherwise. The parameters ($e^{(f)}_{\\mathrm{cons},-35}$, $e^{(f)}_{\\mathrm{cons},-10}$, $e^{(f)}_{\\mathrm{mis}}$, $k_f$, $L^{\\mathrm{opt}}_f$) are provided for both $\\sigma^{70}$ and $\\sigma^{E}$.\n\nThe binding free energy for factor $f$, $E^{\\star}_f(S)$, is the minimum energy over all valid placements:\n$$\nE^{\\star}_f(S) = \\min_{i,L} E_f(i,L; S)\n$$\nAn algorithm will be implemented to perform this minimization by iterating through all valid values of $i$ and $L$, computing $E_f(i,L; S)$ for each, and retaining the minimum value found.\n\nOnce the minimum energies $E^{\\star}_{70}(S)$ and $E^{\\star}_{E}(S)$ are determined, the posterior probability that the sequence is recognized by $\\sigma^{E}$ is computed. Assuming equal prior probabilities, this is given by the Boltzmann-weighted ratio:\n$$\np_{\\sigma^{E}}(S) = \\frac{\\exp(-E^{\\star}_{E}(S))}{\\exp(-E^{\\star}_{E}(S)) + \\exp(-E^{\\star}_{70}(S))}\n$$\nFor numerical stability, this is equivalent to:\n$$\np_{\\sigma^{E}}(S) = \\frac{1}{1 + \\exp(E^{\\star}_{E}(S) - E^{\\star}_{70}(S))}\n$$\nThe final binary classification label is assigned based on this probability. The label is $1$ (for $\\sigma^{E}$) if $p_{\\sigma^{E}}(S) \\ge 0.5$, which corresponds to the condition $E^{\\star}_{E}(S) \\le E^{\\star}_{70}(S)$. Otherwise, the label is $0$ (for $\\sigma^{70}$).\n\nThe procedure will be applied to each of the four provided test sequences. The final output will be a flat list containing the integer label and the posterior probability rounded to three decimal places for each sequence.", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the bacterial promoter classification problem.\n    \"\"\"\n\n    # --- Problem Parameters ---\n\n    # General parameters\n    L_w = 40\n    spacer_lengths = range(14, 21)\n\n    # Parameters for sigma-70\n    params_70 = {\n        'cons_35': \"TTGACA\",\n        'cons_10': \"TATAAT\",\n        'e_cons_35': -2.0,\n        'e_cons_10': -2.5,\n        'e_mis': 0.5,\n        'k': 0.05,\n        'L_opt': 17\n    }\n\n    # Parameters for sigma-E\n    params_E = {\n        'cons_35': \"GGAACT\",\n        'cons_10': \"TCAAAG\",\n        'e_cons_35': -2.0,\n        'e_cons_10': -2.3,\n        'e_mis': 0.5,\n        'k': 0.08,\n        'L_opt': 16\n    }\n    \n    # --- Test Cases Construction ---\n\n    test_cases = []\n    # Case 1: Engineered sigma-70-like, optimal spacer\n    s1 = \"CC\" + \"TTGACA\" + \"C\" * 17 + \"TATAAT\"\n    s1 += \"C\" * (L_w - len(s1))\n    test_cases.append(s1)\n\n    # Case 2: Engineered sigma-E-like, optimal spacer\n    s2 = \"GGAACT\" + \"C\" * 16 + \"TCAAAG\"\n    s2 += \"C\" * (L_w - len(s2))\n    test_cases.append(s2)\n\n    # Case 3: Guanine-cytosine-rich\n    s3 = \"GCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGCGC\"\n    test_cases.append(s3)\n\n    # Case 4: Engineered sigma-70-like, boundary spacer\n    s4 = \"C\" * 10 + \"TTGACA\" + \"C\" * 14 + \"TATAAT\"\n    s4 += \"C\" * (L_w - len(s4))\n    test_cases.append(s4)\n\n    # --- Core Logic Functions ---\n\n    def calculate_hexamer_energy(hexamer, consensus, e_cons, e_mis):\n        \"\"\"Calculates the binding energy for a single hexamer.\"\"\"\n        energy = 0.0\n        for i in range(6):\n            if hexamer[i] == consensus[i]:\n                energy += e_cons\n            else:\n                energy += e_mis\n        return energy\n\n    def calculate_min_energy(sequence, params):\n        \"\"\"Calculates the minimum binding energy over all valid placements.\"\"\"\n        min_total_energy = float('inf')\n        \n        # Unpack parameters for clarity\n        cons_35 = params['cons_35']\n        cons_10 = params['cons_10']\n        e_cons_35 = params['e_cons_35']\n        e_cons_10 = params['e_cons_10']\n        e_mis = params['e_mis']\n        k = params['k']\n        L_opt = params['L_opt']\n        \n        # Exhaustive search over all valid placements (i, L)\n        for i in range(L_w - 6 + 1):\n            for L in spacer_lengths:\n                j = i + 6 + L\n                \n                # Check if placement is valid (both hexamers fit in the window)\n                if j > L_w - 6:\n                    continue\n\n                # Extract hexamer sequences\n                seq_35 = sequence[i : i+6]\n                seq_10 = sequence[j : j+6]\n\n                # Calculate energy components\n                e_35 = calculate_hexamer_energy(seq_35, cons_35, e_cons_35, e_mis)\n                e_10 = calculate_hexamer_energy(seq_10, cons_10, e_cons_10, e_mis)\n                e_spacer = k * (L - L_opt)**2\n\n                total_energy = e_35 + e_10 + e_spacer\n                \n                if total_energy < min_total_energy:\n                    min_total_energy = total_energy\n        \n        return min_total_energy\n\n    # --- Main Processing Loop ---\n\n    results = []\n    for s_k in test_cases:\n        # Calculate minimum energies for both sigma factors\n        e_star_70 = calculate_min_energy(s_k, params_70)\n        e_star_E = calculate_min_energy(s_k, params_E)\n        \n        # Calculate posterior probability for sigma-E\n        # p = 1 / (1 + exp(E_E - E_70))\n        # np.exp can handle large arguments without overflow issues in many cases\n        # by returning inf/0 which is handled correctly in division.\n        try:\n            p_sigma_E = 1.0 / (1.0 + np.exp(e_star_E - e_star_70))\n        except OverflowError:\n            # If (e_star_E - e_star_70) is very large, exp overflows.\n            # In this case, the denominator is huge, and p_sigma_E is practically 0.\n            p_sigma_E = 0.0\n\n        # Determine classification label\n        # Label is 1 if p_sigma_E >= 0.5, which is equivalent to E_E <= E_70\n        label = 1 if e_star_E <= e_star_70 else 0\n        \n        results.append(str(label))\n        results.append(f\"{p_sigma_E:.3f}\")\n        \n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2934426"}]}