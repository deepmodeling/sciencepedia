{"hands_on_practices": [{"introduction": "The most fundamental quantitative description of a molecular switch is its dose-response curve. This first exercise challenges you to derive the functional form of a riboswitch's response from first principles, using the law of mass action to model the binding equilibrium between the aptamer and its ligand. Mastering this derivation [@problem_id:2847437] is essential, as it provides the foundational equation that connects the physical chemistry of binding to the observable regulatory output, forming the basis for analyzing experimental data.", "problem": "In a bacterium, a metabolite-sensing riboswitch embedded in the 5′ untranslated region of a messenger ribonucleic acid (mRNA) regulates gene expression by altering transcription readthrough. The aptamer domain of the riboswitch binds a small-molecule ligand with one-to-one stoichiometry at a single site. Assume the following fundamental bases:\n- Gene expression is governed by the Central Dogma and, on the timescale of transcription initiation and elongation, the riboswitch aptamer–ligand binding reaches thermodynamic equilibrium quickly relative to transcriptional decisions.\n- The interaction obeys the law of mass action for a reversible binding reaction between free aptamer $A$ and free ligand $L$, forming the complex $AL$ with dissociation constant $K_{d}$ defined by $K_{d} = \\frac{[A][L]}{[AL]}$.\n- The total aptamer concentration is conserved: $A_{\\text{tot}} = [A] + [AL]$, and the free ligand concentration $[L]$ is not appreciably depleted by binding (ligand is in excess relative to the aptamer).\n- The regulatory output is transcriptional readthrough. For this riboswitch, binding of ligand stabilizes a terminator structure so that the transcript is terminated when the aptamer is bound. Therefore, the normalized transcriptional readthrough $R([L])$ is equal to the probability that the aptamer is unbound at the decision point.\n\nStarting from these foundations and without invoking any pre-derived occupancy formulas, derive a closed-form analytic expression for the normalized transcriptional readthrough $R([L])$ as a function of the free ligand concentration $[L]$ and the dissociation constant $K_{d}$. Provide your final answer as a single analytic expression for $R([L])$. No numerical evaluation is required.", "solution": "The problem statement is subjected to validation and is found to be valid. It is scientifically grounded in the principles of chemical equilibrium and molecular biology, is well-posed with sufficient information for a unique solution, and is expressed in objective, unambiguous language. We may therefore proceed with the derivation.\n\nThe objective is to derive a closed-form expression for the normalized transcriptional readthrough, $R([L])$, as a function of the free ligand concentration, $[L]$, and the dissociation constant, $K_{d}$.\n\nThe problem states that the normalized transcriptional readthrough $R([L])$ is equal to the probability that the aptamer is unbound. For a system in thermodynamic equilibrium containing a large ensemble of molecules, this probability is equivalent to the fraction of the total aptamer population that is in the free, unbound state. Let $[A]$ be the concentration of the free aptamer and $A_{\\text{tot}}$ be the total concentration of the aptamer. The regulatory output is thus given by the relation:\n$$\nR([L]) = \\frac{[A]}{A_{\\text{tot}}}\n$$\nThe derivation must express this ratio solely in terms of $[L]$ and $K_{d}$. We are provided with two fundamental equations governing the system:\n$1$. The definition of the dissociation constant, $K_{d}$, from the law of mass action for the reaction $A + L \\rightleftharpoons AL$:\n$$\nK_{d} = \\frac{[A][L]}{[AL]}\n$$\n$2$. The principle of mass conservation for the aptamer:\n$$\nA_{\\text{tot}} = [A] + [AL]\n$$\nOur strategy is to use these two equations to eliminate $[A]$, $[AL]$, and $A_{\\text{tot}}$ from the expression for $R([L])$.\n\nFrom the dissociation constant expression, we can rearrange to solve for the concentration of the bound complex, $[AL]$, in terms of $[A]$, $[L]$, and $K_{d}$:\n$$\n[AL] = \\frac{[A][L]}{K_{d}}\n$$\nThis is permissible as long as $K_{d} \\neq 0$, which is a physical necessity for a reversible binding reaction.\n\nNext, we substitute this expression for $[AL]$ into the mass conservation equation for the total aptamer concentration, $A_{\\text{tot}}$:\n$$\nA_{\\text{tot}} = [A] + \\frac{[A][L]}{K_{d}}\n$$\nOn the right-hand side of this equation, we can factor out the common term $[A]$:\n$$\nA_{\\text{tot}} = [A] \\left( 1 + \\frac{[L]}{K_{d}} \\right)\n$$\nNow, we can rearrange this equation to form the ratio $\\frac{[A]}{A_{\\text{tot}}}$, which is our desired function $R([L])$. Assuming $A_{\\text{tot}} \\neq 0$, we can divide both sides by $A_{\\text{tot}}$ and by the term in parentheses:\n$$\n\\frac{[A]}{A_{\\text{tot}}} = \\frac{1}{1 + \\frac{[L]}{K_{d}}}\n$$\nTherefore, the expression for the normalized transcriptional readthrough is:\n$$\nR([L]) = \\frac{1}{1 + \\frac{[L]}{K_{d}}}\n$$\nTo present this in a more simplified algebraic form, we can multiply the numerator and the denominator of the fraction by $K_{d}$:\n$$\nR([L]) = \\frac{1 \\cdot K_{d}}{\\left(1 + \\frac{[L]}{K_{d}}\\right) \\cdot K_{d}} = \\frac{K_{d}}{K_{d} \\cdot 1 + K_{d} \\cdot \\frac{[L]}{K_{d}}}\n$$\nThis simplifies to the final closed-form analytic expression:\n$$\nR([L]) = \\frac{K_{d}}{K_{d} + [L]}\n$$\nThis expression is derived strictly from the provided foundational principles and relates the regulatory output, $R([L])$, to the independent variable, $[L]$, and the system parameter, $K_{d}$.", "answer": "$$\n\\boxed{\\frac{K_{d}}{K_{d} + [L]}}\n$$", "id": "2847437"}, {"introduction": "While equilibrium models provide a powerful framework, the function of many riboswitches is determined by the speed of molecular events during transcription. This practice moves beyond thermodynamics to explore a kinetic competition model, where the regulatory outcome emerges from a race between ligand binding, RNA folding, and transcriptional elongation. By analyzing this system [@problem_id:2847372], you will gain insight into how the time-dependent interplay of different molecular processes governs genetic control, a concept central to understanding co-transcriptional regulation.", "problem": "A cis-acting S-adenosylmethionine (SAM) riboswitch controls transcription termination by biasing the folding of a nascent RNA terminator element during a defined transcriptional pause. Consider a minimal kinetic competition during this pause between (i) escape of the RNA polymerase (RNAP) from the pause and (ii) ligand-mediated commitment to termination. Assume the following foundational facts and definitions: the pause dwell time is exponentially distributed with a half-life, unimolecular steps are memoryless with a constant hazard rate, and reversible bimolecular ligand binding follows mass-action kinetics. Specifically, model the decision module as a continuous-time Markov chain with the following states and transitions prior to commitment:\n- Unbound aptamer state transitions: unbound to bound at second-order rate $k_{\\mathrm{on}}[\\mathrm{SAM}]$, and unbound to RNAP escape at rate $k_{e}$.\n- Bound aptamer state transitions: bound to unbound at rate $k_{\\mathrm{off}}$, bound to termination commitment at rate $k_{c}$, and bound to RNAP escape at rate $k_{e}$.\n- Upon commitment, termination occurs and precludes escape; once escape occurs, termination cannot occur in that transcription round.\n\nAt the onset of the pause, the aptamer is unbound. The pause half-life is $T_{1/2}$, so that the escape rate is $k_{e} = \\ln(2)/T_{1/2}$. All rates are time-invariant during the pause.\n\nGiven the parameter values $T_{1/2} = 2.0$ s, $k_{\\mathrm{on}} = 2.0 \\times 10^{6}$ M$^{-1}$ s$^{-1}$, $k_{\\mathrm{off}} = 0.20$ s$^{-1}$, and $k_{c} = 20$ s$^{-1}$, compute the free SAM concentration $[\\mathrm{SAM}]$ required to achieve a termination probability of $0.90$ in this model. Express your answer in micromolar, and round your answer to three significant figures.", "solution": "The problem presented is a classic kinetic competition problem in the domain of biophysical chemistry, applied to the function of a riboswitch. It is well-posed and scientifically grounded. We will solve it by analyzing the probabilities of the different pathways available to the system, which is described as a continuous-time Markov chain.\n\nLet the state space of the system consist of two transient states, Unbound ($U$) and Bound ($B$), and two absorbing states, Terminated ($T$) and Escaped ($E$). The system starts in state $U$ at time $t=0$, corresponding to the onset of the transcriptional pause, so the initial condition is $P_U(0) = 1$.\n\nThe problem asks for the total probability of termination, $P_T$. This is the probability that the system, starting from state $U$, will eventually reach the absorbing state $T$. Let $\\Phi_T(S)$ denote the probability of eventual termination given the system is currently in state $S$. We are asked to find the concentration $[\\text{SAM}]$ for which $\\Phi_T(U) = 0.90$.\n\nWe can establish a system of linear equations for the probabilities $\\Phi_T(U)$ and $\\Phi_T(B)$ by considering the first transition out of each state. The probability of a specific transition occurring first is the ratio of its rate to the sum of the rates of all possible transitions from that state.\n\nFrom the Unbound state ($U$), two transitions are possible:\n1. Binding of SAM: $U \\to B$ with pseudo-first-order rate constant $k' = k_{\\text{on}}[\\text{SAM}]$.\n2. RNAP escape: $U \\to E$ with first-order rate constant $k_e$.\n\nThe total rate of exit from state $U$ is $k' + k_e$. If the system transitions to state $B$, the subsequent probability of termination is $\\Phi_T(B)$. If the system transitions to state $E$, termination is precluded, so the probability of termination is $0$. The law of total probability gives:\n$$ \\Phi_T(U) = \\frac{k'}{k' + k_e} \\Phi_T(B) + \\frac{k_e}{k' + k_e} \\cdot 0 = \\frac{k_{\\text{on}}[\\text{SAM}]}{k_{\\text{on}}[\\text{SAM}] + k_e} \\Phi_T(B) $$\n\nFrom the Bound state ($B$), three transitions are possible:\n1. Commitment to termination: $B \\to T$ with rate constant $k_c$.\n2. Dissociation of SAM: $B \\to U$ with rate constant $k_{\\text{off}}$.\n3. RNAP escape: $B \\to E$ with rate constant $k_e$.\n\nThe total rate of exit from state $B$ is $k_c + k_{\\text{off}} + k_e$. If the system commits to termination ($B \\to T$), termination is guaranteed (probability $1$). If it dissociates ($B \\to U$), it returns to the unbound state, from which the probability of eventual termination is $\\Phi_T(U)$. If it escapes ($B \\to E$), termination is precluded (probability $0$). Thus:\n$$ \\Phi_T(B) = \\frac{k_c}{k_c + k_{\\text{off}} + k_e} \\cdot 1 + \\frac{k_{\\text{off}}}{k_c + k_{\\text{off}} + k_e} \\Phi_T(U) + \\frac{k_e}{k_c + k_{\\text{off}} + k_e} \\cdot 0 $$\n$$ \\Phi_T(B) = \\frac{k_c + k_{\\text{off}} \\Phi_T(U)}{k_c + k_{\\text{off}} + k_e} $$\n\nWe now have a system of two linear equations for $\\Phi_T(U)$ and $\\Phi_T(B)$. Let $P_T = \\Phi_T(U)$, as this is the overall termination probability we are interested in. Substitute the second equation into the first:\n$$ P_T = \\frac{k_{\\text{on}}[\\text{SAM}]}{k_{\\text{on}}[\\text{SAM}] + k_e} \\left( \\frac{k_c + k_{\\text{off}} P_T}{k_c + k_{\\text{off}} + k_e} \\right) $$\nWe are given $P_T = 0.90$ and must solve for $[\\text{SAM}]$. Let us first rearrange the equation to express $[\\text{SAM}]$ in terms of $P_T$ and the rate constants.\n$$ P_T (k_{\\text{on}}[\\text{SAM}] + k_e) (k_c + k_{\\text{off}} + k_e) = k_{\\text{on}}[\\text{SAM}] (k_c + k_{\\text{off}} P_T) $$\nExpand and collect terms containing $[\\text{SAM}]$:\n$$ P_T k_e (k_c + k_{\\text{off}} + k_e) = k_{\\text{on}}[\\text{SAM}] (k_c + k_{\\text{off}} P_T) - P_T k_{\\text{on}}[\\text{SAM}] (k_c + k_{\\text{off}} + k_e) $$\n$$ P_T k_e (k_c + k_{\\text{off}} + k_e) = k_{\\text{on}}[\\text{SAM}] \\left[ (k_c + k_{\\text{off}} P_T) - P_T(k_c + k_{\\text{off}} + k_e) \\right] $$\n$$ P_T k_e (k_c + k_{\\text{off}} + k_e) = k_{\\text{on}}[\\text{SAM}] \\left[ k_c + k_{\\text{off}} P_T - P_T k_c - P_T k_{\\text{off}} - P_T k_e \\right] $$\n$$ P_T k_e (k_c + k_{\\text{off}} + k_e) = k_{\\text{on}}[\\text{SAM}] \\left[ k_c(1 - P_T) - P_T k_e \\right] $$\nAnother way to write the term in the brackets is $k_c - P_T(k_c+k_e)$. So, we isolate $[\\text{SAM}]$:\n$$ [\\text{SAM}] = \\frac{P_T k_e (k_c + k_{\\text{off}} + k_e)}{k_{\\text{on}} (k_c - P_T(k_c + k_e))} $$\nThis is the analytical solution. Now, we substitute the given numerical values.\n\nFirst, calculate the escape rate constant $k_e$:\n$T_{1/2} = 2.0$ s\n$k_e = \\frac{\\ln(2)}{T_{1/2}} = \\frac{\\ln(2)}{2.0}$ s$^{-1}$.\n\nThe other parameters are:\n$P_T = 0.90$\n$k_{\\text{on}} = 2.0 \\times 10^6$ M$^{-1}$s$^{-1}$\n$k_{\\text{off}} = 0.20$ s$^{-1}$\n$k_c = 20$ s$^{-1}$\n\nWe substitute these values into the expression for $[\\text{SAM}]$.\nNumerator:\n$N = P_T k_e (k_c + k_{\\text{off}} + k_e) = 0.90 \\times \\frac{\\ln(2)}{2.0} \\times \\left(20 + 0.20 + \\frac{\\ln(2)}{2.0}\\right)$\n$N = 0.45 \\ln(2) \\left(20.2 + 0.5 \\ln(2)\\right)$\nUsing $\\ln(2) \\approx 0.69315$:\n$N \\approx 0.45 \\times 0.69315 \\times (20.2 + 0.5 \\times 0.69315) \\approx 0.31192 \\times (20.2 + 0.34658) \\approx 0.31192 \\times 20.54658 \\approx 6.4089$ s$^{-2}$.\n\nDenominator:\n$D = k_{\\text{on}} (k_c - P_T(k_c + k_e)) = (2.0 \\times 10^6) \\times \\left(20 - 0.90\\left(20 + \\frac{\\ln(2)}{2.0}\\right)\\right)$\n$D = (2.0 \\times 10^6) \\times (20 - 18 - 0.90 \\times 0.5 \\ln(2)) = (2.0 \\times 10^6) \\times (2 - 0.45 \\ln(2))$\nUsing $\\ln(2) \\approx 0.69315$:\n$D \\approx (2.0 \\times 10^6) \\times (2 - 0.45 \\times 0.69315) \\approx (2.0 \\times 10^6) \\times (2 - 0.31192) \\approx (2.0 \\times 10^6) \\times 1.68808 \\approx 3.37616 \\times 10^6$ M$^{-1}$s$^{-2}$.\n\nNow, we compute the concentration:\n$$ [\\text{SAM}] = \\frac{N}{D} \\approx \\frac{6.4089}{3.37616 \\times 10^6} \\text{ M} \\approx 1.8983 \\times 10^{-6} \\text{ M} $$\nThe problem requires the answer in micromolar ($\\mu$M).\n$1 \\text{ M} = 10^6$ $\\mu$M.\n$$ [\\text{SAM}] \\approx 1.8983 \\times 10^{-6} \\times 10^6 \\text{ } \\mu\\text{M} = 1.8983 \\text{ } \\mu\\text{M} $$\nRounding to three significant figures, we get $1.90$ $\\mu$M.", "answer": "$$ \\boxed{1.90} $$", "id": "2847372"}, {"introduction": "To fully understand a riboswitch, we must learn how its sequence dictates its function. This final practice brings you to the forefront of modern genetics with a hands-on computational exercise in analyzing deep mutational scanning (DMS) data. You will implement a pipeline that transforms raw high-throughput sequencing data into a quantitative, predictive model mapping sequence to function [@problem_id:2847388]. This problem synthesizes principles from biophysics, statistics, and bioinformatics, providing a realistic experience in constructing the comprehensive sequence-function landscapes that drive modern RNA engineering and synthetic biology.", "problem": "You are to formalize, implement, and test a computational pipeline that corresponds to a deep mutational scanning assay for a riboswitch. From first principles, consider a library of variants of an aptamer region of a riboswitch that modulates gene expression in response to ligand binding. The assay proceeds by collecting high-throughput sequencing read counts from a pre-selection population and from a post-selection population under two conditions: ligand-present and ligand-absent. The high-selection gate enriches variants with higher expression (for example, by fluorescence-activated cell sorting into a high-expression bin), so the relative frequency change of each variant between pre- and post-selection is informative about its expression output. Your task is to derive and implement an estimator of enrichment and then a mapping from sequence to a quantitative expression output using a principled linear model.\n\nFundamental bases you may assume:\n- The Central Dogma of Molecular Biology states that sequence differences can lead to differences in gene expression, which can be measured by changes in cell phenotype that alter selection.\n- Sequencing read counts are well modeled as samples from a multinomial distribution, with unknown variant frequencies in the population. Conjugate prior regularization with a symmetric Dirichlet prior yields estimates that smooth zero counts.\n- Linear models with Gaussian noise and ridge (L2) regularization can be derived from maximum a posteriori estimation with a zero-mean Gaussian prior on coefficients.\n\nImplement the following with explicit derivation embedded in your design:\n\n1) Enrichment estimator under a multinomial sampling model with symmetric Dirichlet prior. For each variant index $i \\in \\{1,\\dots,N\\}$, and for each condition $c \\in \\{+,-\\}$ (ligand-present denoted by $+$ and ligand-absent denoted by $-$), denote the pre-selection read count as $n_{i,\\mathrm{pre}}^{(c)}$ and the post-selection read count as $n_{i,\\mathrm{post}}^{(c)}$. Let $T_{\\mathrm{pre}}^{(c)}=\\sum_{i=1}^{N} n_{i,\\mathrm{pre}}^{(c)}$ and $T_{\\mathrm{post}}^{(c)}=\\sum_{i=1}^{N} n_{i,\\mathrm{post}}^{(c)}$. With a symmetric Dirichlet prior of concentration $\\alpha$ across $N$ variants, the posterior mean frequency estimate is\n$$\n\\widehat{f}_{i,\\mathrm{pre}}^{(c)}=\\frac{n_{i,\\mathrm{pre}}^{(c)}+\\alpha}{T_{\\mathrm{pre}}^{(c)}+N\\alpha},\\quad\n\\widehat{f}_{i,\\mathrm{post}}^{(c)}=\\frac{n_{i,\\mathrm{post}}^{(c)}+\\alpha}{T_{\\mathrm{post}}^{(c)}+N\\alpha}.\n$$\nDefine the enrichment of variant $i$ in condition $c$ as\n$$\nE_i^{(c)}=\\frac{\\widehat{f}_{i,\\mathrm{post}}^{(c)}}{\\widehat{f}_{i,\\mathrm{pre}}^{(c)}},\n$$\nand the log-base-$2$ enrichment as\n$$\n\\ell_i^{(c)}=\\log_2 E_i^{(c)}.\n$$\nDefine a differential activity score for each variant as\n$$\ny_i=\\ell_i^{(+)}-\\ell_i^{(-)}.\n$$\n\n2) Sequence-to-activity mapping via a weighted, additively separable linear model. Let the aptamer length be $L$. Use the alphabet $\\{\\mathrm{A},\\mathrm{C},\\mathrm{G},\\mathrm{U}\\}$. For a chosen reference sequence $r$ of length $L$, construct for each variant $i$ a feature vector $x_i \\in \\mathbb{R}^{1+3L}$ as follows: an intercept entry of $1$; and for each position $j\\in\\{1,\\dots,L\\}$, create three binary indicator features corresponding to the three non-reference nucleotides at that position. Exactly one of the three indicators is $1$ if the variant differs from the reference at position $j$, otherwise all three are $0$. Fit the weighted ridge regression model\n$$\ny_i=\\beta_0+\\sum_{j=1}^{L}\\sum_{b\\in\\mathcal{B}_j} \\beta_{j,b}\\,x_{i,j,b}+\\varepsilon_i,\n$$\nwhere $\\mathcal{B}_j$ is the set of non-reference bases at position $j$, weights are $w_i=n_{i,\\mathrm{pre}}^{(+)}+n_{i,\\mathrm{post}}^{(+)}+n_{i,\\mathrm{pre}}^{(-)}+n_{i,\\mathrm{post}}^{(-)}$, and the ridge (L2) penalty with regularization parameter $\\lambda$ is applied to all coefficients except the intercept. The closed form for the maximum a posteriori estimate is\n$$\n\\widehat{\\boldsymbol{\\beta}}=\\arg\\min_{\\boldsymbol{\\beta}} \\sum_{i=1}^{N} w_i\\left(y_i-\\mathbf{x}_i^\\top\\boldsymbol{\\beta}\\right)^2+\\lambda \\,\\boldsymbol{\\beta}^\\top \\mathbf{R}\\, \\boldsymbol{\\beta},\n$$\nwhere $\\mathbf{R}$ is diagonal with entry $0$ for the intercept and $1$ for all other coefficients. Show how to compute\n$$\n\\widehat{\\boldsymbol{\\beta}}=\\left(\\mathbf{X}^\\top \\mathbf{W}\\mathbf{X}+\\lambda \\mathbf{R}\\right)^{-1}\\mathbf{X}^\\top \\mathbf{W}\\mathbf{y},\n$$\nwith $\\mathbf{W}=\\mathrm{diag}(w_1,\\dots,w_N)$.\n\nEdge-case handling requirements:\n- If any $n_{i,\\cdot}^{(c)}$ are zero, the estimator must remain finite due to the Dirichlet pseudocount $\\alpha$.\n- Variants with total weight $w_i=0$ must be excluded from the regression fit but still assigned $y_i$ according to the enrichment estimator.\n- The intercept must not be regularized.\n\nYour program must implement the above, hardcoding and executing the following test suite and then printing a single line with the specified final outputs:\n\nTest Suite:\n- Case $1$:\n  - Reference $r=\\mathrm{GCUAUG}$ (length $L=6$).\n  - Variants (in order): $\\mathrm{GCUAUG}, \\mathrm{GAUAUG}, \\mathrm{GCUCUG}, \\mathrm{GCUAAG}, \\mathrm{ACUAUG}$, so $N=5$.\n  - Counts, ligand-present: pre $[100,80,70,60,40]$, post $[120,50,100,30,20]$.\n  - Counts, ligand-absent: pre $[100,80,70,60,40]$, post $[40,30,40,20,15]$.\n  - Pseudocount $\\alpha=0.5$, regularization $\\lambda=1.0$.\n  - Query sequence for prediction: $\\mathrm{GAUACG}$.\n- Case $2$:\n  - Reference $r=\\mathrm{AUGC}$ (length $L=4$).\n  - Variants: $\\mathrm{AUGC}, \\mathrm{CUGC}, \\mathrm{AUGU}, \\mathrm{GUGC}$, so $N=4$.\n  - Counts, ligand-present: pre $[0,0,10,0]$, post $[0,5,20,0]$.\n  - Counts, ligand-absent: pre $[0,0,10,0]$, post $[0,2,5,0]$.\n  - Pseudocount $\\alpha=0.5$, regularization $\\lambda=0.5$.\n  - Query sequence: $\\mathrm{CUGU}$.\n- Case $3$:\n  - Reference $r=\\mathrm{GGGG}$ (length $L=4$).\n  - Variants: $\\mathrm{GGGG}, \\mathrm{AGGG}, \\mathrm{GAGG}, \\mathrm{GGAG}, \\mathrm{GGGA}, \\mathrm{AAAA}$, so $N=6$.\n  - Counts, ligand-present: pre $[50,10,10,10,10,5]$, post $[20,5,5,5,5,30]$.\n  - Counts, ligand-absent: pre $[50,10,10,10,10,5]$, post $[45,9,9,9,9,4]$.\n  - Pseudocount $\\alpha=0.5$, regularization $\\lambda=0.1$.\n  - Query sequence: $\\mathrm{AAGA}$.\n\nRequired outputs:\n- For each case, compute $y_i$ for all provided variants, fit the weighted ridge model as specified, and then compute the predicted differential activity $\\widehat{y}$ for the query sequence of that case. Round each predicted value to $6$ decimal places.\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets (e.g., $[\\text{result1},\\text{result2},\\text{result3}]$).\n\nNo input should be read. All constants are specified above. The alphabet is restricted to $\\{\\mathrm{A},\\mathrm{C},\\mathrm{G},\\mathrm{U}\\}$. The final numerical answers must be floats rounded to $6$ decimal places, in the single-line format specified.", "solution": "The problem is subjected to rigorous validation and is determined to be scientifically grounded, well-posed, and objective. It provides a complete and consistent formulation for a computational analysis of deep mutational scanning data for a riboswitch, based on established principles of molecular biology and statistical inference. The task consists of two main parts: first, the estimation of a differential activity score for each sequence variant, and second, the construction of a predictive linear model mapping sequence to this activity.\n\nThe derivation and computational procedure are as follows.\n\nPart $1$: Estimation of Differential Activity\n\nThe analysis begins with read counts from high-throughput sequencing. For each of $N$ variants, indexed by $i$, and for each condition $c \\in \\{+,-\\}$ (ligand-present and ligand-absent), we are given pre-selection counts $n_{i,\\mathrm{pre}}^{(c)}$ and post-selection counts $n_{i,\\mathrm{post}}^{(c)}$. The experimental process is modeled as multinomial sampling of variants from the population. To robustly estimate the underlying population frequencies from finite read counts, particularly when counts are zero, a Bayesian approach is employed.\n\nWe adopt a symmetric Dirichlet prior with a concentration parameter $\\alpha$ over the $N$ possible variants. The Dirichlet distribution is the conjugate prior for the multinomial distribution, which simplifies the posterior calculation. The posterior distribution for the variant frequencies is also a Dirichlet distribution. The posterior mean, which serves as our frequency estimate $\\widehat{f}$, is given by the provided formula:\n$$\n\\widehat{f}_{i,s}^{(c)} = \\frac{n_{i,s}^{(c)} + \\alpha}{T_{s}^{(c)} + N\\alpha}\n$$\nwhere $s \\in \\{\\mathrm{pre}, \\mathrm{post}\\}$ indicates the selection stage, and $T_{s}^{(c)} = \\sum_{i=1}^{N} n_{i,s}^{(c)}$ is the total read count for that stage and condition. The term $\\alpha$ is a pseudocount, which ensures that even variants with zero observed counts are assigned a non-zero frequency, preventing division by zero in subsequent steps.\n\nThe enrichment $E_i^{(c)}$ of a variant $i$ under condition $c$ is defined as the ratio of its estimated frequency in the post-selection population to its estimated frequency in the pre-selection population:\n$$\nE_i^{(c)} = \\frac{\\widehat{f}_{i,\\mathrm{post}}^{(c)}}{\\widehat{f}_{i,\\mathrm{pre}}^{(c)}}\n$$\nThis ratio quantifies how the relative abundance of a variant changes due to selection, which is a proxy for its functional activity (e.g., gene expression level). For mathematical convenience and to better handle the distribution of enrichment values, we work with the log-base-$2$ enrichment, $\\ell_i^{(c)} = \\log_2 E_i^{(c)}$.\n\nThe riboswitch's function is to modulate expression in a ligand-dependent manner. The differential activity score $y_i$ is designed to capture this specific function. It is defined as the difference between the log-enrichment in the ligand-present condition and the ligand-absent condition:\n$$\ny_i = \\ell_i^{(+)} - \\ell_i^{(-)} = \\log_2\\left(\\frac{E_i^{(+)}}{E_i^{(-)}}\\right)\n$$\nA large positive $y_i$ indicates that the variant's activity is significantly enhanced by the ligand, as expected for a functional \"on\" switch. These $y_i$ values form the target variable for the subsequent regression analysis.\n\nPart $2$: Sequence-to-Activity Linear Model\n\nThe second part of the problem is to model the relationship between a variant's sequence and its calculated differential activity score $y_i$. An additive linear model is assumed, where the effect of multiple mutations is the sum of the effects of individual mutations.\n\nFor a reference sequence $r$ of length $L$ over the alphabet $\\{\\mathrm{A}, \\mathrm{C}, \\mathrm{G}, \\mathrm{U}\\}$, each variant sequence $s_i$ is converted into a high-dimensional feature vector $\\mathbf{x}_i$. A one-hot encoding scheme is used for single-nucleotide mutations relative to the reference. The feature vector $\\mathbf{x}_i \\in \\mathbb{R}^{D}$ where $D=1+3L$ is constructed as follows:\n- An intercept term, $x_{i,0} = 1$, which captures the baseline activity of the reference sequence.\n- For each position $j \\in \\{1,\\dots,L\\}$, three features are defined, corresponding to the three possible non-reference bases. If the base at position $j$ in sequence $s_i$ is the same as the reference base $r_j$, all three features for this position are $0$. If the base is a mutation to one of the non-reference bases, the corresponding feature is set to $1$, while the other two are $0$.\n\nThe model relating the feature vector $\\mathbf{x}_i$ to the activity $y_i$ is a weighted linear regression model:\n$$\ny_i = \\mathbf{x}_i^\\top \\boldsymbol{\\beta} + \\varepsilon_i\n$$\nwhere $\\boldsymbol{\\beta}$ is the vector of model coefficients and $\\varepsilon_i$ is a noise term. The weight for each variant, $w_i = n_{i,\\mathrm{pre}}^{(+)}+n_{i,\\mathrm{post}}^{(+)}+n_{i,\\mathrm{pre}}^{(-)}+n_{i,\\mathrm{post}}^{(-)}$, reflects the total number of reads observed for that variant across all experiments. This weighting scheme gives more influence to variants with higher data support, for which the $y_i$ estimate is statistically more reliable. Variants with $w_i=0$ have no data support and must be excluded from the model fitting process.\n\nTo prevent overfitting, especially when the number of features $D$ is large relative to the number of variants $N$, and to ensure a unique solution, ridge (L$2$) regularization is applied. This corresponds to a Maximum A Posteriori (MAP) estimation assuming a zero-mean Gaussian prior on the model coefficients. The objective is to find the coefficient vector $\\boldsymbol{\\beta}$ that minimizes the weighted sum of squared errors plus a penalty term on the magnitude of the coefficients:\n$$\n\\widehat{\\boldsymbol{\\beta}} = \\arg\\min_{\\boldsymbol{\\beta}} \\sum_{i=1}^{N'} w_i(y_i - \\mathbf{x}_i^\\top \\boldsymbol{\\beta})^2 + \\lambda \\sum_{k=1}^{D-1} \\beta_k^2\n$$\nwhere $N'$ is the number of variants with $w_i > 0$, $\\lambda$ is the regularization strength, and the penalty is applied to all coefficients except the intercept $\\beta_0$.\n\nThis optimization problem has a closed-form solution. In matrix notation, let $\\mathbf{y}$ be the vector of activities, $\\mathbf{X}$ be the design matrix whose rows are $\\mathbf{x}_i^\\top$, and $\\mathbf{W}$ be a diagonal matrix with weights $w_i$ on the diagonal. The objective function is:\n$$\n(\\mathbf{y} - \\mathbf{X}\\boldsymbol{\\beta})^\\top \\mathbf{W} (\\mathbf{y} - \\mathbf{X}\\boldsymbol{\\beta}) + \\lambda \\boldsymbol{\\beta}^\\top \\mathbf{R} \\boldsymbol{\\beta}\n$$\nwhere $\\mathbf{R}$ is a diagonal matrix with $R_{00}=0$ and $R_{kk}=1$ for $k > 0$. Taking the gradient with respect to $\\boldsymbol{\\beta}$ and setting it to zero yields the normal equations for weighted ridge regression:\n$$\n-2\\mathbf{X}^\\top \\mathbf{W}(\\mathbf{y} - \\mathbf{X}\\boldsymbol{\\beta}) + 2\\lambda \\mathbf{R} \\boldsymbol{\\beta} = 0\n$$\n$$\n(\\mathbf{X}^\\top \\mathbf{W}\\mathbf{X} + \\lambda \\mathbf{R})\\boldsymbol{\\beta} = \\mathbf{X}^\\top \\mathbf{W}\\mathbf{y}\n$$\nThe matrix $\\mathbf{A} = \\mathbf{X}^\\top \\mathbf{W}\\mathbf{X} + \\lambda \\mathbf{R}$ is positive definite for $\\lambda>0$ and thus invertible. The solution for the coefficients is therefore:\n$$\n\\widehat{\\boldsymbol{\\beta}} = (\\mathbf{X}^\\top \\mathbf{W}\\mathbf{X} + \\lambda \\mathbf{R})^{-1} \\mathbf{X}^\\top \\mathbf{W}\\mathbf{y}\n$$\nNumerically, this is solved by constructing the matrix $\\mathbf{A}$ and the vector $\\mathbf{b} = \\mathbf{X}^\\top \\mathbf{W}\\mathbf{y}$, and then solving the linear system $\\mathbf{A}\\widehat{\\boldsymbol{\\beta}} = \\mathbf{b}$ for $\\widehat{\\boldsymbol{\\beta}}$.\n\nOnce the model coefficients $\\widehat{\\boldsymbol{\\beta}}$ are determined, the differential activity $\\widehat{y}_q$ for any new query sequence $q$ can be predicted by first constructing its feature vector $\\mathbf{x}_q$ and then computing the dot product:\n$$\n\\widehat{y}_q = \\mathbf{x}_q^\\top \\widehat{\\boldsymbol{\\beta}}\n$$\nThis procedure is implemented for the provided test cases.", "answer": "```python\nimport numpy as np\nimport math\n\ndef solve():\n    \"\"\"\n    Main function to run the test suite for the riboswitch DMS analysis pipeline.\n    \"\"\"\n    \n    test_cases = [\n        {\n            \"ref_seq\": \"GCUAUG\",\n            \"variants\": [\"GCUAUG\", \"GAUAUG\", \"GCUCUG\", \"GCUAAG\", \"ACUAUG\"],\n            \"counts_pos_pre\": [100, 80, 70, 60, 40],\n            \"counts_pos_post\": [120, 50, 100, 30, 20],\n            \"counts_neg_pre\": [100, 80, 70, 60, 40],\n            \"counts_neg_post\": [40, 30, 40, 20, 15],\n            \"alpha\": 0.5,\n            \"lambda_reg\": 1.0,\n            \"query_seq\": \"GAUACG\",\n        },\n        {\n            \"ref_seq\": \"AUGC\",\n            \"variants\": [\"AUGC\", \"CUGC\", \"AUGU\", \"GUGC\"],\n            \"counts_pos_pre\": [0, 0, 10, 0],\n            \"counts_pos_post\": [0, 5, 20, 0],\n            \"counts_neg_pre\": [0, 0, 10, 0],\n            \"counts_neg_post\": [0, 2, 5, 0],\n            \"alpha\": 0.5,\n            \"lambda_reg\": 0.5,\n            \"query_seq\": \"CUGU\",\n        },\n        {\n            \"ref_seq\": \"GGGG\",\n            \"variants\": [\"GGGG\", \"AGGG\", \"GAGG\", \"GGAG\", \"GGGA\", \"AAAA\"],\n            \"counts_pos_pre\": [50, 10, 10, 10, 10, 5],\n            \"counts_pos_post\": [20, 5, 5, 5, 5, 30],\n            \"counts_neg_pre\": [50, 10, 10, 10, 10, 5],\n            \"counts_neg_post\": [45, 9, 9, 9, 9, 4],\n            \"alpha\": 0.5,\n            \"lambda_reg\": 0.1,\n            \"query_seq\": \"AAGA\",\n        },\n    ]\n\n    results = []\n    for case in test_cases:\n        result = process_case(case)\n        results.append(round(result, 6))\n\n    print(f\"[{','.join(map(str, results))}]\")\n\ndef get_log_enrichment(n_pre, n_post, T_pre, T_post, N, alpha):\n    \"\"\"Calculates the log2 enrichment for a single condition.\"\"\"\n    if T_pre + N * alpha == 0 or T_post + N * alpha == 0:\n        return 0.0 # Should not happen with N*alpha > 0\n\n    f_pre = (n_pre + alpha) / (T_pre + N * alpha)\n    f_post = (n_post + alpha) / (T_post + N * alpha)\n\n    if f_pre == 0: # Should not happen with alpha > 0\n        return float('inf') if f_post > 0 else 0.0\n\n    enrichment = f_post / f_pre\n    return math.log2(enrichment)\n\ndef build_feature_vector(sequence, ref_sequence, alphabet):\n    \"\"\"Constructs the feature vector for a given sequence relative to a reference.\"\"\"\n    L = len(ref_sequence)\n    num_features = 1 + 3 * L\n    x = np.zeros(num_features)\n    x[0] = 1.0  # Intercept\n\n    for j in range(L):\n        ref_char = ref_sequence[j]\n        seq_char = sequence[j]\n        \n        if seq_char != ref_char:\n            non_ref_bases = sorted([b for b in alphabet if b != ref_char])\n            try:\n                mut_idx = non_ref_bases.index(seq_char)\n                feature_idx = 1 + j * 3 + mut_idx\n                x[feature_idx] = 1.0\n            except ValueError:\n                # This would happen if a character not in the alphabet appears\n                # The problem statement guarantees this will not occur.\n                pass\n    return x\n\ndef process_case(case_data):\n    \"\"\"Processes a single test case from the suite.\"\"\"\n    ref_seq = case_data[\"ref_seq\"]\n    variants = case_data[\"variants\"]\n    counts_pos_pre = np.array(case_data[\"counts_pos_pre\"])\n    counts_pos_post = np.array(case_data[\"counts_pos_post\"])\n    counts_neg_pre = np.array(case_data[\"counts_neg_pre\"])\n    counts_neg_post = np.array(case_data[\"counts_neg_post\"])\n    alpha = case_data[\"alpha\"]\n    lambda_reg = case_data[\"lambda_reg\"]\n    query_seq = case_data[\"query_seq\"]\n    \n    L = len(ref_seq)\n    N = len(variants)\n    alphabet = ['A', 'C', 'G', 'U']\n\n    # Part 1: Enrichment and Differential Activity Calculation\n    T_pos_pre = np.sum(counts_pos_pre)\n    T_pos_post = np.sum(counts_pos_post)\n    T_neg_pre = np.sum(counts_neg_pre)\n    T_neg_post = np.sum(counts_neg_post)\n    \n    y = np.zeros(N)\n    for i in range(N):\n        l_pos = get_log_enrichment(counts_pos_pre[i], counts_pos_post[i], T_pos_pre, T_pos_post, N, alpha)\n        l_neg = get_log_enrichment(counts_neg_pre[i], counts_neg_post[i], T_neg_pre, T_neg_post, N, alpha)\n        y[i] = l_pos - l_neg\n\n    # Part 2: Sequence-to-Activity Mapping\n    \n    # Calculate weights and filter variants with zero weight\n    weights = counts_pos_pre + counts_pos_post + counts_neg_pre + counts_neg_post\n    fittable_indices = np.where(weights > 0)[0]\n    \n    if len(fittable_indices) == 0:\n        # No data to fit the model. Prediction is baseline (intercept effect).\n        # This assumes intercept is 0 without data, which is a reasonable guess.\n        # A more complex model may give non-zero baseline.\n        # Here we just predict 0, as beta_hat would be all zeros.\n        return 0.0\n\n    y_fit = y[fittable_indices]\n    variants_fit = [variants[i] for i in fittable_indices]\n    W_fit_diag = weights[fittable_indices]\n\n    num_features = 1 + 3 * L\n    X_fit = np.vstack([build_feature_vector(var, ref_seq, alphabet) for var in variants_fit])\n    W_fit = np.diag(W_fit_diag)\n    \n    # Construct regularization matrix R\n    R = np.eye(num_features)\n    R[0, 0] = 0\n    \n    # Solve for beta_hat using the normal equation\n    # (X.T @ W @ X + lambda * R) @ beta = X.T @ W @ y\n    A = X_fit.T @ W_fit @ X_fit + lambda_reg * R\n    b = X_fit.T @ W_fit @ y_fit\n    \n    try:\n        beta_hat = np.linalg.solve(A, b)\n    except np.linalg.LinAlgError:\n        # Fallback to pseudo-inverse if solve fails (e.g., singular matrix)\n        # Ridge should prevent this for lambda > 0, but as a safeguard.\n        A_inv = np.linalg.pinv(A)\n        beta_hat = A_inv @ b\n\n    # Prediction for the query sequence\n    x_query = build_feature_vector(query_seq, ref_seq, alphabet)\n    y_hat_query = x_query @ beta_hat\n    \n    return y_hat_query\n\nif __name__ == '__main__':\n    solve()\n```", "id": "2847388"}]}