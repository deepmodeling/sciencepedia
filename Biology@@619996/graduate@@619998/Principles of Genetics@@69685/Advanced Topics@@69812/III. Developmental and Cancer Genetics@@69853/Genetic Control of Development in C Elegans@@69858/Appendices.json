{"hands_on_practices": [{"introduction": "The invariant somatic cell lineage of *C. elegans* is a cornerstone of developmental biology, providing a complete map from zygote to adult. This practice grounds your understanding in the fundamental numbers that define this process, involving cell proliferation and programmed cell death (apoptosis). By calculating the final adult cell count from the total births and deaths, you will then explore the concept of redundancy in developmental programs, a key question addressed by studying apoptosis [@problem_id:2816138].", "problem": "In the nematode Caenorhabditis elegans (C. elegans), the somatic cell lineage is invariant such that every cell division and programmed cell death event occurs at a stereotyped time and in a specific lineage position. Let the total number of somatic cell births during development be $1090$, and the total number of programmed cell deaths (apoptosis) be $131$. Using only the principles that (i) somatic cell number at adulthood equals the total somatic births minus the somatic deaths and (ii) programmed cell death prunes cells from the lineage rather than adding to it, first compute the adult hermaphrodite somatic cell count.\n\nNext, define the uniform redundancy load per surviving somatic cell, denoted $b$, as the average number of developmentally produced somatic cells that are eliminated by programmed cell death for each adult somatic cell. Under the simplifying assumption that all apoptotic events reflect the removal of redundant cells rather than the elimination of essential patterning intermediates, justify how $b$ provides an upper bound on a uniformly distributed redundancy per lineage and then compute $b$ from the given counts.\n\nReport your final numerical answer as the value of $b$ in decimal form, rounded to $4$ significant figures. No units are required.", "solution": "The problem will first be validated for scientific and logical integrity before any attempt is made at a solution.\n\nThe givens are extracted verbatim:\n1.  The total number of somatic cell births during development is $N_{births} = 1090$.\n2.  The total number of programmed cell deaths (apoptosis) is $N_{deaths} = 131$.\n3.  Principle (i): Adult somatic cell number, $N_{adult}$, is given by the relation $N_{adult} = N_{births} - N_{deaths}$.\n4.  Principle (ii): Programmed cell death prunes cells from the lineage.\n5.  Definition: The uniform redundancy load per surviving somatic cell, $b$, is the average number of developmentally produced somatic cells that are eliminated by programmed cell death for each adult somatic cell.\n6.  Assumption: All apoptotic events reflect the removal of redundant cells.\n\nThe problem is scientifically grounded. The values for cell births ($1090$) and deaths ($131$) in the *C. elegans* hermaphrodite are canonical figures established through decades of research, most notably by the work of Sulston and Horvitz. The concepts of an invariant cell lineage and programmed cell death are fundamental principles of developmental biology, and *C. elegans* is the model organism for their study. The problem is well-posed, objective, and contains all necessary information for its resolution. No scientific principles are violated. The problem is therefore deemed valid.\n\nThe solution proceeds in stages.\n\nFirst, we compute the number of somatic cells in the adult hermaphrodite, $N_{adult}$. According to the first principle provided, this is the difference between the total number of cells born and the total number of cells that undergo programmed death.\n$$\nN_{adult} = N_{births} - N_{deaths}\n$$\nSubstituting the given values:\n$$\nN_{adult} = 1090 - 131 = 959\n$$\nThis result, $959$ somatic cells, is the established number for an adult *C. elegans* hermaphrodite.\n\nSecond, we address the uniform redundancy load, $b$. It is defined as the average number of eliminated cells for each surviving adult cell. This translates to the following ratio:\n$$\nb = \\frac{\\text{Total number of deaths}}{\\text{Total number of surviving cells}} = \\frac{N_{deaths}}{N_{adult}}\n$$\n\nThe problem requires a justification for why this quantity, $b$, represents an *upper bound* on redundancy, given the simplifying assumption that all $N_{deaths}$ events are for removing redundant cells. The justification is as follows. In the actual biological system, not all cell deaths serve to eliminate redundant cells. Some deaths are critical for morphogenesis, such as sculpting tissues and organs, or for removing cells that have performed a transient function. These are not instances of redundancy. Let us denote the number of deaths that remove truly redundant cells as $N_{redundant}$ and the number of deaths for essential patterning or other non-redundancy functions as $N_{essential}$. The total number of deaths is the sum:\n$$\nN_{deaths} = N_{redundant} + N_{essential}\n$$\nBy definition, $N_{essential} \\ge 0$, which implies $N_{redundant} \\le N_{deaths}$.\nA more precise measure of the redundancy load, let us call it $b_{true}$, would only consider the removal of truly redundant cells:\n$$\nb_{true} = \\frac{N_{redundant}}{N_{adult}}\n$$\nGiven that $N_{redundant} \\le N_{deaths}$, it follows directly that:\n$$\n\\frac{N_{redundant}}{N_{adult}} \\le \\frac{N_{deaths}}{N_{adult}}\n$$\nTherefore, $b_{true} \\le b$. The problem's assumption that *all* apoptotic events are for removing redundant cells is equivalent to setting $N_{essential} = 0$, which maximizes the numerator in the calculation of the load. Consequently, the calculated value $b$ represents the maximum possible value for this metric and is thus a correct upper bound on the true, biologically nuanced redundancy load.\n\nThird, we compute the numerical value of $b$ using the given data.\n$$\nb = \\frac{N_{deaths}}{N_{adult}} = \\frac{131}{959}\n$$\nPerforming the division:\n$$\nb \\approx 0.13660062565...\n$$\n\nFinally, the problem requires this value to be rounded to $4$ significant figures. The first four significant figures are $1$, $3$, $6$, $6$. The fifth digit is $0$, so we do not round up the last significant digit.\n$$\nb \\approx 0.1366\n$$\nThis is the final numerical answer.", "answer": "$$\n\\boxed{0.1366}\n$$", "id": "2816138"}, {"introduction": "Developmental outcomes are rarely the product of a single gene but emerge from complex genetic networks. To decipher these networks, geneticists study how mutations in different genes combine, a phenomenon known as epistasis. This exercise guides you through the process of quantifying genetic interactions from penetrance data, using a multiplicative null model to define the expected outcome and a statistical test to determine if the observed data deviates significantly, thus revealing a functional relationship between the genes [@problem_id:2816165].", "problem": "In the study of genetic control of development in Caenorhabditis elegans (C. elegans), penetrance is defined as the probability that an individual with a given genotype expresses a specified developmental phenotype. Consider two genes, denoted $A$ and $B$, each perturbed by loss-of-function mutations that affect the probability of a Vulvaless developmental outcome (Vul phenotype). Assume the following data from independent cohorts, where each individual is scored for the presence or absence of the Vul phenotype:\n- Single mutant $A$: $x_{A}$ out of $n_{A}$ show Vul, with $x_{A}=120$ and $n_{A}=400$.\n- Single mutant $B$: $x_{B}$ out of $n_{B}$ show Vul, with $x_{B}=150$ and $n_{B}=300$.\n- Double mutant $AB$: $x_{AB}$ out of $n_{AB}$ show Vul, with $x_{AB}=63$ and $n_{AB}=350$.\n\nUse only the following fundamental bases:\n- The Central Dogma of Molecular Biology and the notion that gene products act in pathways regulating developmental cell fates.\n- The definition of penetrance as a probability and the binomial sampling model for counts of a phenotype.\n- The probability calculus of independent events.\n- Asymptotic normality of maximum likelihood estimators and first-order multivariate delta approximations for functions of independent estimators.\n\nTasks:\n1. Starting from the binomial likelihood for each genotype class, derive the maximum likelihood estimator for the penetrance $p_{g}$ for $g \\in \\{A,B,AB\\}$ and estimate $p_{A}$, $p_{B}$, and $p_{AB}$ from the data.\n2. Justify a multiplicative null model by explicitly modeling the Vul phenotype in the $AB$ double as the intersection of two independent, mutation-specific failure events that together are necessary to produce the Vul outcome. Under this null, derive the expected penetrance in the double in terms of $p_{A}$ and $p_{B}$, and define the quantitative epistasis coefficient $\\varepsilon$ as the deviation of the observed double-mutant penetrance from this null expectation.\n3. Using first-order multivariate delta approximations and the independence of the three cohorts, derive an asymptotic standard error for the estimator of $\\varepsilon$, construct a Wald statistic to test the null hypothesis $H_{0}: \\varepsilon=0$ at significance level $\\alpha=0.05$ (two-sided), and state whether there is evidence for epistasis.\nFor the final numerical answer, report only the maximum likelihood estimate of $\\varepsilon$ as a decimal fraction. Round your answer to four significant figures.", "solution": "The problem as stated is scientifically grounded, well-posed, and contains all necessary information for a rigorous solution. We shall proceed by addressing each task in sequence.\n\nFirst, we address Task $1$: the derivation of the maximum likelihood estimator (MLE) for penetrance and its estimation from the provided data.\nFor any given genotype class $g \\in \\{A, B, AB\\}$, the number of individuals $x_g$ expressing the Vul phenotype out of a total of $n_g$ individuals is modeled as a draw from a binomial distribution, $X_g \\sim \\text{Binomial}(n_g, p_g)$, where $p_g$ is the penetrance. The likelihood function for $p_g$ given the observation $x_g$ is:\n$$L(p_g | x_g) = \\binom{n_g}{x_g} p_g^{x_g} (1 - p_g)^{n_g - x_g}$$\nTo find the MLE, $\\hat{p}_g$, we maximize this function. It is equivalent and simpler to maximize the log-likelihood function, $\\ln L(p_g)$.\n$$\\ln L(p_g) = \\ln\\left(\\binom{n_g}{x_g}\\right) + x_g \\ln(p_g) + (n_g - x_g) \\ln(1 - p_g)$$\nWe find the maximum by taking the derivative with respect to $p_g$ and setting it to zero:\n$$\\frac{d \\ln L}{d p_g} = \\frac{x_g}{p_g} - \\frac{n_g - x_g}{1 - p_g} = 0$$\nSolving for $p_g$ yields the maximum likelihood estimator:\n$$x_g(1 - p_g) = p_g(n_g - x_g)$$\n$$x_g - x_g p_g = n_g p_g - x_g p_g$$\n$$x_g = n_g p_g \\implies \\hat{p}_g = \\frac{x_g}{n_g}$$\nUsing the provided data:\n- For single mutant $A$: $\\hat{p}_A = \\frac{x_A}{n_A} = \\frac{120}{400} = 0.3$.\n- For single mutant $B$: $\\hat{p}_B = \\frac{x_B}{n_B} = \\frac{150}{300} = 0.5$.\n- For double mutant $AB$: $\\hat{p}_{AB} = \\frac{x_{AB}}{n_{AB}} = \\frac{63}{350} = 0.18$.\n\nNext, we address Task $2$: the justification of a multiplicative null model and the definition of the epistasis coefficient $\\varepsilon$.\nThe problem instructs us to model the Vul phenotype in the double mutant as arising from the intersection of two independent, mutation-specific failure events. Let us define these abstract events as $F_A$ and $F_B$, associated with the loss of function of genes $A$ and $B$, respectively. The null hypothesis of genetic independence posits that these events are statistically independent. We further model that the penetrance of a single mutant, say $p_A$, is the probability of its associated failure event, i.e., $p_A = P(F_A)$ and $p_B = P(F_B)$. The problem states that for the double mutant, both failure events are necessary to produce the Vul outcome. This implies that the Vul phenotype occurs if and only if the event $F_A \\cap F_B$ occurs. Therefore, the expected penetrance in the double mutant under this null model, $p_{AB}^{\\text{exp}}$, is:\n$$p_{AB}^{\\text{exp}} = P(F_A \\cap F_B)$$\nBy the assumption of independence, this becomes:\n$$p_{AB}^{\\text{exp}} = P(F_A)P(F_B) = p_A p_B$$\nThis multiplicative model is consistent with the observed data, where the double mutant penetrance ($\\hat{p}_{AB} = 0.18$) is less than the penetrance of each single mutant ($\\hat{p}_A=0.3$, $\\hat{p}_B=0.5$), a phenomenon known as suppressive or alleviating epistasis. The quantitative epistasis coefficient, $\\varepsilon$, is defined as the deviation of the observed double-mutant penetrance from this null expectation:\n$$\\varepsilon = p_{AB} - p_A p_B$$\nThe maximum likelihood estimate of $\\varepsilon$ is obtained by substituting the MLEs of the penetrances:\n$$\\hat{\\varepsilon} = \\hat{p}_{AB} - \\hat{p}_A \\hat{p}_B = 0.18 - (0.3)(0.5) = 0.18 - 0.15 = 0.03$$\n\nFinally, we address Task $3$: the derivation of the standard error of $\\hat{\\varepsilon}$ and the execution of a Wald test for epistasis.\nThe estimator $\\hat{\\varepsilon}$ is a function of three independent random variables, $\\hat{p}_A$, $\\hat{p}_B$, and $\\hat{p}_{AB}$. We use the first-order multivariate delta method to approximate its variance. Let $g(p_A, p_B, p_{AB}) = p_{AB} - p_A p_B$. The variance of $\\hat{\\varepsilon}$ is approximated as:\n$$\\text{Var}(\\hat{\\varepsilon}) \\approx \\left(\\frac{\\partial g}{\\partial p_A}\\right)^2 \\text{Var}(\\hat{p}_A) + \\left(\\frac{\\partial g}{\\partial p_B}\\right)^2 \\text{Var}(\\hat{p}_B) + \\left(\\frac{\\partial g}{\\partial p_{AB}}\\right)^2 \\text{Var}(\\hat{p}_{AB})$$\nThe required partial derivatives are:\n$$\\frac{\\partial g}{\\partial p_A} = -p_B, \\quad \\frac{\\partial g}{\\partial p_B} = -p_A, \\quad \\frac{\\partial g}{\\partial p_{AB}} = 1$$\nThe variance of a binomial proportion estimator $\\hat{p}_g$ is $\\text{Var}(\\hat{p}_g) = \\frac{p_g(1-p_g)}{n_g}$. Substituting these into the formula for $\\text{Var}(\\hat{\\varepsilon})$:\n$$\\text{Var}(\\hat{\\varepsilon}) \\approx (-p_B)^2 \\frac{p_A(1-p_A)}{n_A} + (-p_A)^2 \\frac{p_B(1-p_B)}{n_B} + (1)^2 \\frac{p_{AB}(1-p_{AB})}{n_{AB}}$$\nWe estimate this variance by plugging in the MLEs for the penetrances:\n$$\\widehat{\\text{Var}}(\\hat{\\varepsilon}) = \\hat{p}_B^2 \\frac{\\hat{p}_A(1-\\hat{p}_A)}{n_A} + \\hat{p}_A^2 \\frac{\\hat{p}_B(1-\\hat{p}_B)}{n_B} + \\frac{\\hat{p}_{AB}(1-\\hat{p}_{AB})}{n_{AB}}$$\nUsing the calculated values: $\\hat{p}_A=0.3$, $\\hat{p}_B=0.5$, $\\hat{p}_{AB}=0.18$, and $n_A=400$, $n_B=300$, $n_{AB}=350$:\n$$\\widehat{\\text{Var}}(\\hat{\\varepsilon}) = (0.5)^2 \\frac{0.3(1-0.3)}{400} + (0.3)^2 \\frac{0.5(1-0.5)}{300} + \\frac{0.18(1-0.18)}{350}$$\n$$\\widehat{\\text{Var}}(\\hat{\\varepsilon}) = 0.25 \\left(\\frac{0.21}{400}\\right) + 0.09 \\left(\\frac{0.25}{300}\\right) + \\frac{0.1476}{350}$$\n$$\\widehat{\\text{Var}}(\\hat{\\varepsilon}) = 0.25(0.000525) + 0.09(0.0008333\\dots) + 0.00042171\\dots$$\n$$\\widehat{\\text{Var}}(\\hat{\\varepsilon}) = 0.00013125 + 0.000075 + 0.00042171\\dots \\approx 0.00062796$$\nThe asymptotic standard error of $\\hat{\\varepsilon}$ is the square root of this variance:\n$$SE(\\hat{\\varepsilon}) = \\sqrt{\\widehat{\\text{Var}}(\\hat{\\varepsilon})} \\approx \\sqrt{0.00062796} \\approx 0.025059$$\nWe test the null hypothesis $H_0: \\varepsilon = 0$ using a Wald statistic, which follows an asymptotic standard normal distribution under $H_0$:\n$$W = \\frac{\\hat{\\varepsilon} - 0}{SE(\\hat{\\varepsilon})} = \\frac{0.03}{0.025059} \\approx 1.197$$\nFor a two-sided test at significance level $\\alpha=0.05$, the critical value is $z_{\\alpha/2} = z_{0.025} \\approx 1.96$. Since the absolute value of our test statistic, $|W| \\approx 1.197$, is less than the critical value of $1.96$, we fail to reject the null hypothesis. There is insufficient statistical evidence at the $\\alpha=0.05$ level to conclude that there is epistasis between genes $A$ and $B$ according to the multiplicative model. The observed deviation is consistent with chance.\n\nThe final task is to report the maximum likelihood estimate of $\\varepsilon$ rounded to four significant figures.\n$\\hat{\\varepsilon} = 0.03$. To four significant figures, this is $0.03000$.", "answer": "$$\n\\boxed{0.03000}\n$$", "id": "2816165"}, {"introduction": "A central goal in modern developmental biology is to build predictive models that bridge the gap between genetic pathways and the physical machinery of the cell. This practice challenges you to construct a computational, mechanochemical model that does just that, linking the genetic polarity established by PAR proteins to the physical forces that position the mitotic spindle for asymmetric cell division. By implementing a force-balance equation, you will predict how genetic perturbations affect a fundamental developmental outcome, moving from a genetic blueprint to a quantitative, physical prediction [@problem_id:2816158].", "problem": "You are asked to formalize and compute a mechanochemical model that links anterior–posterior polarity established by Partitioning defective (PAR) proteins to asymmetric spindle positioning via the force-generating complex containing G protein regulator (GPR-1/2) and LIN-5 in the one-cell embryo of Caenorhabditis elegans. Your program must implement the following, starting from fundamental bases and using only the logical and mathematical specifications given below.\n\nFundamental base:\n- Central Dogma of Molecular Biology: spatially patterned gene expression leads to spatially patterned proteins and complexes. In this problem, assume that the anterior PAR-3/PAR-6/Protein Kinase C (PKC-3) domain inhibits cortical recruitment of GPR-1/2, while the posterior PAR-2 domain promotes it.\n- Newtonian quasi-static force balance: the spindle position is determined by the condition that the net force along the anterior–posterior axis is zero, assuming overdamped dynamics and negligible inertia. Formally, the static equilibrium condition is $\\sum F = 0$.\n\nModel definitions and assumptions:\n- Geometry:\n  - The embryo is a one-dimensional segment of length $L$ (in micrometers, $\\mu\\mathrm{m}$), with the anterior pole at position $x = 0$ and the posterior pole at position $x = L$.\n  - The mitotic spindle is represented by its center position $x$ and a fixed half-spindle length $s$ (in $\\mu\\mathrm{m}$), so that the anterior aster is at $x - s$ and the posterior aster is at $x + s$. The physically allowed domain for $x$ is $x \\in [s, L - s]$.\n- Polarity-to-force mapping:\n  - Let the anterior PAR domain fraction be $f_A \\in (0,1)$; then the posterior fraction is $f_P = 1 - f_A$.\n  - Let $d \\in [0,1]$ be the fractional abundance of GPR-1/2 (with $d = 1$ being wild-type and $d = 0$ being full depletion).\n  - Let $\\rho \\in [0,1)$ quantify inhibition of GPR-1/2 recruitment by anterior PAR domain, and let $\\pi \\in [0,1)$ quantify promotion of GPR-1/2 recruitment by the posterior PAR domain.\n  - Let $S_0$ (in piconewtons, $\\mathrm{pN}$) be a baseline cortical pulling strength scaling that includes dynein force per microtubule and LIN-5 mediated anchoring; assume LIN-5 is not limiting and is included in $S_0$ as a constant multiplier.\n  - The effective side strengths are:\n    - Anterior: $S_A = d \\cdot S_0 \\cdot f_A \\cdot (1 - \\rho)$\n    - Posterior: $S_P = d \\cdot S_0 \\cdot f_P \\cdot (1 + \\pi)$\n- Distance-dependent contact probability:\n  - The number of astral microtubules contacting the cortex from a given aster decreases with the aster-to-cortex distance. Model this by a saturating contact function $C(d) = \\dfrac{1}{1 + d/\\lambda}$, where $d$ is the distance (in $\\mu\\mathrm{m}$) and $\\lambda > 0$ is a characteristic length (in $\\mu\\mathrm{m}$).\n  - Distances are $d_A = x - s$ (from the anterior aster to the anterior cortex) and $d_P = L - (x + s)$ (from the posterior aster to the posterior cortex).\n- Centering elasticity:\n  - Model cytoskeletal centering forces as a linear spring with stiffness $k_c$ (in $\\mathrm{pN}/\\mu\\mathrm{m}$) acting to restore the spindle center to the embryo midpoint $L/2$. The centering force is $F_{\\text{spring}} = -k_c \\cdot (x - L/2)$.\n- Static force balance:\n  - The net force along the anterior–posterior axis at position $x$ is\n    $$F(x) = S_P \\cdot C\\big(L - (x + s)\\big) - S_A \\cdot C\\big(x - s\\big) - k_c \\cdot \\big(x - L/2\\big).$$\n  - The equilibrium position $x^\\ast$ satisfies $F(x^\\ast) = 0$ and $x^\\ast \\in [s, L - s]$.\n\nDivision asymmetry readout:\n- Assume the cleavage plane forms at the spindle center $x^\\ast$. The anterior daughter length is $x^\\ast$ and the posterior daughter length is $L - x^\\ast$.\n- For each test case, your program must output the anterior size fraction $x^\\ast/L$ as a decimal number. This is dimensionless; do not include any unit. Round to six decimal places.\n\nNumerical constraints and algorithmic requirements:\n- Implement a robust numerical method to find $x^\\ast$ for each parameter set. The function $F(x)$ is continuous on $[s, L - s]$. You may use bracketing with scanning to detect a sign change and then apply bisection, or if no sign change is detected, choose the minimizer of $|F(x)|$ on a fine grid as an approximation.\n- All lengths must be treated in micrometers, forces in piconewtons, and stiffness in $\\mathrm{pN}/\\mu\\mathrm{m}$.\n- Angle units are not used in this problem.\n\nTest suite:\n- Use the following parameter sets (each tuple lists $(L, s, f_A, d, \\rho, \\pi, S_0, k_c, \\lambda)$):\n  - Case $1$: $(50, 5, 0.6, 1.0, 0.4, 0.3, 1.0, 0.08, 10)$\n  - Case $2$: $(50, 5, 0.6, 0.5, 0.4, 0.3, 1.0, 0.08, 10)$\n  - Case $3$: $(50, 5, 0.6, 0.2, 0.4, 0.3, 1.0, 0.08, 10)$\n  - Case $4$: $(50, 5, 0.5, 1.0, 0.0, 0.0, 1.0, 0.08, 10)$\n  - Case $5$: $(50, 5, 0.6, 0.0, 0.4, 0.3, 1.0, 0.08, 10)$\n  - Case $6$: $(50, 5, 0.8, 1.0, 0.4, 0.3, 1.0, 0.08, 10)$\n\nFinal output format:\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, in the same order as the test suite cases, with each value rounded to six decimal places, for example: \"[0.540000,0.530000,0.520000,0.500000,0.500000,0.560000]\".", "solution": "The problem statement has been subjected to rigorous validation and is found to be scientifically grounded, mathematically well-defined, and internally consistent. It presents a simplified but coherent mechanochemical model for spindle positioning in a one-cell embryo, based on established principles of cell biology and Newtonian mechanics. The problem is well-posed, providing all necessary parameters and definitions for a unique solution to be computed. Therefore, a formal solution is warranted.\n\nThe central task is to determine the equilibrium position of the mitotic spindle center, denoted by $x^\\ast$, within a one-dimensional embryo of length $L$. The embryo's anterior pole is at $x=0$ and the posterior pole is at $x=L$. The spindle has a fixed half-length $s$, so its center $x$ is constrained to the domain $[s, L-s]$. The equilibrium position $x^\\ast$ is the point where the net force along the anterior-posterior axis is zero. This is a quasi-static force balance problem, expressed as $F(x^\\ast)=0$.\n\nThe net force function $F(x)$ is explicitly defined as:\n$$F(x) = F_{\\text{pull, post}} - F_{\\text{pull, ant}} + F_{\\text{center}}$$\nwhere the terms are:\n$1$. The posterior-directed pulling force, $F_{\\text{pull, post}} = S_P \\cdot C(d_P)$, where $d_P = L - (x+s)$ is the distance from the posterior aster to the posterior cortex.\n$2$. The anterior-directed pulling force, $F_{\\text{pull, ant}} = S_A \\cdot C(d_A)$, where $d_A = x-s$ is the distance from the anterior aster to the anterior cortex.\n$3$. The centering spring force, $F_{\\text{center}} = -k_c \\cdot (x - L/2)$, which acts to restore the spindle to the embryo's geometric center, $L/2$.\n\nThe full expression for the net force balance is given by:\n$$F(x) = S_P \\cdot C\\big(L - (x + s)\\big) - S_A \\cdot C\\big(x - s\\big) - k_c \\cdot \\big(x - L/2\\big) = 0$$\nThe parameters $S_A$ and $S_P$ represent the effective strengths of the anterior and posterior force-generating machinery, respectively. They are functions of the wild-type force $S_0$, the GPR-1/2 abundance $d$, the PAR domain fractions $f_A$ and $f_P = 1-f_A$, and the regulation parameters $\\rho$ and $\\pi$:\n$$S_A = d \\cdot S_0 \\cdot f_A \\cdot (1 - \\rho)$$\n$$S_P = d \\cdot S_0 \\cdot f_P \\cdot (1 + \\pi)$$\nThe function $C(d)$ models the distance-dependent probability of microtubule-cortex contact and is given by a saturating function:\n$$C(d) = \\frac{1}{1 + d/\\lambda}$$\nwhere $\\lambda$ is a characteristic length scale.\n\nTo find the root $x^\\ast$ of the equation $F(x)=0$, we first analyze the properties of $F(x)$ on the domain $[s, L-s]$.\n- **Continuity**: The function $F(x)$ is composed of arithmetic operations and compositions of continuous functions. The denominators in the $C(d)$ terms are of the form $1+d/\\lambda$. Since $d \\ge 0$ and $\\lambda > 0$, the denominators are never zero. Thus, $F(x)$ is continuous on the entire domain $[s, L-s]$.\n- **Monotonicity**: The derivative, $F'(x)$, is computed to understand the function's behavior:\n$$F'(x) = \\frac{d}{dx}F(x) = \\frac{S_P}{\\lambda(1 + (L-x-s)/\\lambda)^2} + \\frac{S_A}{\\lambda(1 + (x-s)/\\lambda)^2} - k_c$$\nFor all provided test cases, the parameters $S_A$, $S_P$, $k_c$, and $\\lambda$ are all positive constants. The first two terms are strictly positive, while the third is a negative constant. Numerical evaluation confirms that for the given parameters, $F'(x)$ is consistently negative across the domain $x \\in [s, L-s]$. This proves that $F(x)$ is a strictly decreasing function.\n\nA strictly decreasing continuous function can have at most one root. The existence of a root is guaranteed by the Intermediate Value Theorem if $F(s)$ and $F(L-s)$ have opposite signs. For the asymmetric cases where posterior pulling forces are dominant ($S_P > S_A$), analysis shows $F(s) > 0$ and $F(L-s) < 0$, which brackets a unique root $x^\\ast \\in (s, L-s)$.\n\nGiven these properties, the bisection method is a robust and appropriate numerical algorithm to find the root $x^\\ast$. The algorithm proceeds as follows:\n$1$. Initialize a search interval $[x_{\\text{low}}, x_{\\text{high}}] = [s, L-s]$.\n$2$. Iteratively compute the midpoint $x_{\\text{mid}} = (x_{\\text{low}} + x_{\\text{high}})/2$.\n$3$. Evaluate the sign of $F(x_{\\text{mid}})$. If $\\text{sign}(F(x_{\\text{mid}})) = \\text{sign}(F(x_{\\text{low}}))$, the root lies in $[x_{\\text{mid}}, x_{\\text{high}}]$, so we set $x_{\\text{low}} = x_{\\text{mid}}$. Otherwise, the root lies in $[x_{\\text{low}}, x_{\\text{mid}}]$, and we set $x_{\\text{high}} = x_{\\text{mid}}$.\n$4$. Repeat for a sufficient number of iterations until the interval width $(x_{\\text{high}} - x_{\\text{low}})$ is smaller than a specified tolerance $\\epsilon$ (e.g., $\\epsilon=10^{-9}$), which guarantees the required precision of the solution.\n\nThis numerical procedure must be applied to each test case. Two special cases serve as a logical consistency check of the model:\n- **Case $4$**: Parameters are symmetric ($f_A=0.5$, $\\rho=0$, $\\pi=0$), which results in $S_A = S_P$. The force equation becomes symmetric around $L/2$. The unique solution is $x^\\ast = L/2$, leading to a symmetric division, $x^\\ast/L = 0.5$.\n- **Case $5$**: GPR-1/2 is fully depleted ($d=0$), so $S_A = S_P = 0$. The pulling forces vanish. The equation simplifies to $-k_c(x - L/2) = 0$, giving the solution $x^\\ast = L/2$. The spindle is centered by the spring-like centering force alone.\n\nThe final output for each case is the dimensionless anterior size fraction, $x^\\ast/L$, rounded to six decimal places. The implemented program will execute this logic.", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves for the spindle equilibrium position in a one-cell C. elegans embryo model\n    for a given suite of test cases.\n    \"\"\"\n\n    # Each tuple lists (L, s, f_A, d, rho, pi, S0, kc, lam)\n    test_cases = [\n        (50, 5, 0.6, 1.0, 0.4, 0.3, 1.0, 0.08, 10),\n        (50, 5, 0.6, 0.5, 0.4, 0.3, 1.0, 0.08, 10),\n        (50, 5, 0.6, 0.2, 0.4, 0.3, 1.0, 0.08, 10),\n        (50, 5, 0.5, 1.0, 0.0, 0.0, 1.0, 0.08, 10),\n        (50, 5, 0.6, 0.0, 0.4, 0.3, 1.0, 0.08, 10),\n        (50, 5, 0.8, 1.0, 0.4, 0.3, 1.0, 0.08, 10),\n    ]\n\n    results = []\n    for params in test_cases:\n        result = find_equilibrium_fraction(params)\n        results.append(result)\n\n    # Format output as a comma-separated list in brackets, with 6 decimal places.\n    print(f\"[{','.join(f'{r:.6f}' for r in results)}]\")\n\ndef find_equilibrium_fraction(params):\n    \"\"\"\n    Calculates the anterior size fraction x*/L for a single parameter set.\n    \"\"\"\n    L, s, f_A, d, rho, pi, S0, kc, lam = params\n\n    # Trivial case: no GPR-1/2, so cortical pulling forces are zero.\n    # The spindle is centered by the centering spring alone.\n    if d == 0.0:\n        x_star = L / 2.0\n        return x_star / L\n\n    # Calculate effective side strengths\n    f_P = 1.0 - f_A\n    S_A = d * S0 * f_A * (1.0 - rho)\n    S_P = d * S0 * f_P * (1.0 + pi)\n\n    # Define the contact probability function C(d)\n    def C(dist):\n        return 1.0 / (1.0 + dist / lam)\n\n    # Define the net force function F(x)\n    def F(x):\n        d_A = x - s\n        d_P = L - (x + s)\n        \n        force_posterior = S_P * C(d_P)\n        force_anterior = S_A * C(d_A)\n        force_centering = kc * (x - L / 2.0)\n        \n        return force_posterior - force_anterior - force_centering\n\n    # Bisection method to find the root of F(x) = 0\n    # The valid domain for the spindle center x is [s, L-s]\n    low = float(s)\n    high = float(L - s)\n    \n    f_low = F(low)\n    f_high = F(high)\n    \n    # Check if a root is bracketed. If not, fall back to grid search.\n    if np.sign(f_low) == np.sign(f_high) and f_low != 0 and f_high != 0:\n        # Fallback as per instructions: find min(|F(x)|) on a fine grid\n        grid = np.linspace(low, high, 20000)\n        f_vals = np.abs(F(grid))\n        min_idx = np.argmin(f_vals)\n        x_star = grid[min_idx]\n        return x_star / L\n\n    # Set tolerance for convergence\n    tolerance = 1e-12\n    max_iterations = 200\n\n    for _ in range(max_iterations):\n        mid = (low + high) / 2.0\n        if high - low  tolerance:\n            break\n        \n        f_mid = F(mid)\n        \n        if np.sign(f_mid) == np.sign(f_low):\n            low = mid\n            f_low = f_mid\n        else:\n            high = mid\n            \n    x_star = (low + high) / 2.0\n    \n    return x_star / L\n\n# Execute the main function\nsolve()\n```", "id": "2816158"}]}