{"hands_on_practices": [{"introduction": "To truly grasp pharmacogenetics, we must first connect the dots from gene to function. This exercise guides you through a first-principles derivation, linking the number of active gene copies to enzymatic activity using the classic Michaelis-Menten model. By working through this problem [@problem_id:2836759], you will build a quantitative intuition for the \"gene-dose\" effect, providing a solid theoretical foundation for the activity scoring systems used in clinical practice.", "problem": "An individual carries a Copy Number Variation (CNV) resulting in three active copies of the Cytochrome P450 Family 2 Subfamily D Member 6 (CYP2D6) gene. Consider drug metabolism by CYP2D6 to follow Michaelis–Menten (MM) kinetics at a fixed substrate concentration $[S]$ that does not change over the course of the initial rate measurement. Assume that each gene copy produces enzyme according to the Central Dogma of molecular biology with identical per-copy transcription and translation efficiencies and identical degradation kinetics, and that per-enzyme catalytic parameters are invariant across copies. In the linear dosage model, the steady-state enzyme abundance is directly proportional to the number of active gene copies.\n\nDefine the normalized activity score $\\mathcal{A}(n)$ as the ratio of the initial reaction velocity with $n$ active CYP2D6 copies, $v(n)$, to the initial reaction velocity with $2$ active copies, $v(2)$, both measured at the same fixed $[S]$:\n$$\n\\mathcal{A}(n) \\equiv \\frac{v(n)}{v(2)}.\n$$\nStarting from the above principles and definitions, derive a closed-form expression for $\\mathcal{A}(n)$ and then evaluate it for $n=3$ under the linear dosage model. Briefly explain mechanistically when and why the linear dosage assumption may fail in pharmacogenetic contexts, but only report the value of $\\mathcal{A}(3)$ as your final answer. Express the final answer as an exact number without units.", "solution": "The problem requires the derivation of a normalized enzymatic activity score for an individual with a specific gene copy number variation, based on the principles of Michaelis-Menten kinetics and a linear gene dosage model. The validity of the problem is established, as its premises are scientifically grounded in enzyme kinetics and molecular genetics, and it is well-posed.\n\nThe initial velocity, $v$, of an enzyme-catalyzed reaction is described by the Michaelis-Menten equation:\n$$\nv = \\frac{V_{\\text{max}} [S]}{K_M + [S]}\n$$\nHere, $[S]$ is the substrate concentration, $K_M$ is the Michaelis constant, and $V_{\\text{max}}$ is the maximum reaction velocity. The value of $V_{\\text{max}}$ is directly proportional to the total concentration of active enzyme, $[E]_{\\text{total}}$, according to the relation $V_{\\text{max}} = k_{\\text{cat}} [E]_{\\text{total}}$, where $k_{\\text{cat}}$ is the turnover number or catalytic constant of the enzyme.\n\nThe problem states that the individual has $n$ active copies of the CYP2D6 gene. The \"linear dosage model\" posits that the steady-state enzyme abundance is directly proportional to the number of active gene copies. We can express this formally as:\n$$\n[E]_{\\text{total}}(n) = c_1 \\cdot n\n$$\nwhere $c_1$ is a constant of proportionality that consolidates the efficiencies of transcription, translation, and protein stability, assumed to be identical for each gene copy.\n\nSubstituting this relationship into the expression for $V_{\\text{max}}$, we find that $V_{\\text{max}}$ is also a linear function of the gene copy number, $n$:\n$$\nV_{\\text{max}}(n) = k_{\\text{cat}} [E]_{\\text{total}}(n) = k_{\\text{cat}} (c_1 \\cdot n) = c_2 \\cdot n\n$$\nwhere $c_2 = k_{\\text{cat}} c_1$ is a new constant.\n\nThe initial reaction velocity for an individual with $n$ gene copies, $v(n)$, at a fixed substrate concentration $[S]$, is therefore given by:\n$$\nv(n) = \\frac{V_{\\text{max}}(n) [S]}{K_M + [S]} = \\frac{(c_2 \\cdot n) [S]}{K_M + [S]}\n$$\nThe problem defines the normalized activity score, $\\mathcal{A}(n)$, as the ratio of the velocity for $n$ copies to the velocity for a normal diploid individual with $n=2$ copies:\n$$\n\\mathcal{A}(n) \\equiv \\frac{v(n)}{v(2)}\n$$\nWe can now substitute our expression for $v(n)$ into this definition. The velocity for $n=2$ copies is:\n$$\nv(2) = \\frac{(c_2 \\cdot 2) [S]}{K_M + [S]}\n$$\nThe ratio is then:\n$$\n\\mathcal{A}(n) = \\frac{\\frac{(c_2 \\cdot n) [S]}{K_M + [S]}}{\\frac{(c_2 \\cdot 2) [S]}{K_M + [S]}}\n$$\nThe term $\\frac{c_2 [S]}{K_M + [S]}$ is common to both the numerator and the denominator. Since the reaction parameters ($c_2$, $K_M$) and experimental condition ($[S]$) are identical for both measurements, this term cancels out, provided it is not zero. This simplification yields the closed-form expression for the normalized activity score under the linear dosage model:\n$$\n\\mathcal{A}(n) = \\frac{n}{2}\n$$\nThis result demonstrates that within this model, the activity score is independent of the substrate concentration and the intrinsic kinetic parameters of the enzyme; it depends only on the gene copy number.\n\nThe problem specifies an individual with three active copies, so we must evaluate $\\mathcal{A}(n)$ for $n=3$:\n$$\n\\mathcal{A}(3) = \\frac{3}{2} = 1.5\n$$\nThis individual would be classified as an ultrarapid metabolizer, having $1.5$ times the metabolic capacity of a normal metabolizer.\n\nFinally, the problem asks for a brief mechanistic explanation for the potential failure of the linear dosage assumption. The assumption $[E]_{\\text{total}} \\propto n$ implies that every additional gene copy contributes an equal amount to the total enzyme pool. This linearity can fail in real biological systems for several reasons. Primarily, the cellular machinery for gene expression (e.g., RNA polymerases, ribosomes, specific transcription factors) is finite. As the copy number $n$ becomes large, one or more of these components can become a rate-limiting factor, causing the production of enzyme per gene copy to decrease. This would lead to a saturation effect, where the increase in $[E]_{\\text{total}}$ becomes sub-linear with respect to $n$. Similarly, limitations in the availability of essential co-factors (such as heme for P450 enzymes) or protein folding and transport machinery can also create a bottleneck at high expression levels, breaking the linear relationship. Thus, while the linear model is a useful approximation for small variations in copy number, it may overestimate the functional consequence of very high gene amplifications.", "answer": "$$\n\\boxed{1.5}\n$$", "id": "2836759"}, {"introduction": "Building on the gene-dose concept, this practice moves from theory to clinical application. Pharmacogenomic lab reports often describe complex genetic architectures, including \"star alleles\" and copy number variations like gene duplications. This problem [@problem_id:2836780] provides essential hands-on experience in interpreting such data for the critical drug-metabolizing enzyme CYP2D6, challenging you to apply standardized guidelines to translate a complex genotype into a clinically actionable metabolizer phenotype.", "problem": "A clinical pharmacogenomics laboratory analyzed an individual’s cytochrome P450 family 2 subfamily D member 6 (CYP2D6) locus using long-read sequencing with read-backed phasing and quantitative copy-number calling. The results show the following phased configuration of star alleles and copy numbers:\n\n- Haplotype 1 contains a tandem duplication of two identical CYP2D6 units, each annotated as star allele CYP2D6*2.\n- Haplotype 2 contains a single CYP2D6 unit annotated as star allele CYP2D6*4.\n- There is no evidence of hybrid genes or additional copies beyond those described, and no gene deletion beyond what is implied by the stated copy numbers.\n\nUse the following consensus framework, consistent with Clinical Pharmacogenetics Implementation Consortium (CPIC) conventions:\n\n- Functional category to activity value mapping: normal function allele has activity value $1.0$, decreased function allele has activity value $0.5$, and no function allele has activity value $0.0$.\n- Per-haplotype activity is the sum of activity values across all CYP2D6 copies present on that haplotype. The individual-level CYP2D6 activity score is the sum of the per-haplotype activities.\n- Phenotype bins by total CYP2D6 activity score: $0$ is poor metabolizer, any value greater than $0$ and less than or equal to $1.0$ is intermediate metabolizer, any value greater than or equal to $1.25$ and less than or equal to $2.25$ is normal metabolizer, and any value greater than $2.25$ is ultrarapid metabolizer.\n\nAssume CYP2D6*2 is a normal function allele and CYP2D6*4 is a no function allele under these conventions. Using only these rules, compute the individual’s CYP2D6 activity score and classify the metabolizer phenotype. Report the activity score as your final numeric answer (unitless). No rounding is required.", "solution": "The problem statement has been subjected to rigorous validation and is found to be scientifically sound, well-posed, and internally consistent. It presents a standard, albeit simplified, scenario in clinical pharmacogenomics, providing all necessary definitions, data, and rules to deduce a unique and unambiguous solution. We may therefore proceed with the analysis.\n\nThe objective is to compute the CYP2D6 activity score for an individual and classify their metabolizer phenotype based on a provided framework. The process must be executed with strict adherence to the given rules.\n\nFirst, we must assign numerical activity values to the specified CYP2D6 star alleles according to the problem's functional category mapping.\nThe CYP2D6*2 allele is defined as a normal function allele. Therefore, its activity value is $1.0$.\nThe CYP2D6*4 allele is defined as a no function allele. Therefore, its activity value is $0.0$.\n\nNext, we calculate the per-haplotype activity for each of the two haplotypes. The problem states that the per-haplotype activity is the sum of the activity values of all CYP2D6 gene copies present on that haplotype.\n\nFor Haplotype $1$, the configuration is a tandem duplication of two identical CYP2D6*2 units. This means there are two copies of the CYP2D6*2 allele on this single haplotype. The activity of Haplotype $1$, which we shall denote as $A_{H1}$, is the sum of the activities of these two copies.\n$$ A_{H1} = (\\text{Activity of } CYP2D6*2) + (\\text{Activity of } CYP2D6*2) $$\n$$ A_{H1} = 1.0 + 1.0 = 2.0 $$\n\nFor Haplotype $2$, the configuration consists of a single CYP2D6*4 unit. The activity of Haplotype $2$, denoted as $A_{H2}$, is simply the activity of this single allele.\n$$ A_{H2} = \\text{Activity of } CYP2D6*4 $$\n$$ A_{H2} = 0.0 $$\n\nThe total individual-level CYP2D6 activity score, which we denote as $A_{Total}$, is defined as the sum of the per-haplotype activities.\n$$ A_{Total} = A_{H1} + A_{H2} $$\nSubstituting the calculated values:\n$$ A_{Total} = 2.0 + 0.0 = 2.0 $$\n\nThe individual's CYP2D6 activity score is therefore $2.0$.\n\nFinally, we must classify the metabolizer phenotype by comparing this total activity score to the provided phenotype bins.\n- Poor metabolizer: score is $0$. Our score is not $0$.\n- Intermediate metabolizer: score is greater than $0$ and less than or equal to $1.0$. Our score of $2.0$ does not fall in this range $(0, 1.0]$.\n- Normal metabolizer: score is greater than or equal to $1.25$ and less than or equal to $2.25$. Our score of $2.0$ satisfies this condition, as $1.25 \\le 2.0 \\le 2.25$.\n- Ultrarapid metabolizer: score is greater than $2.25$. Our score is not greater than $2.25$.\n\nThe individual is classified as a normal metabolizer. The problem, however, asks only for the activity score as the final numeric answer.\nThe computed activity score is $2.0$.", "answer": "$$\\boxed{2.0}$$", "id": "2836780"}, {"introduction": "This final exercise represents the cutting edge of personalized medicine, where genetic data actively guides patient care. You will implement a Bayesian adaptive dosing algorithm, a powerful method that uses a patient's genotype to set an initial (prior) estimate of their drug clearance and then refines that estimate using real-time therapeutic drug monitoring data. This problem [@problem_id:2836657] is a capstone practice that integrates genetics, pharmacology, and statistics to solve the very real challenge of tailoring drug dosage to the individual.", "problem": "You are asked to implement a Bayesian adaptive dosing algorithm for a one-compartment, linear pharmacokinetic system under steady-state dosing, in which genotype informs a prior distribution on clearance. The algorithm must update the posterior distribution of clearance using observed steady-state trough concentrations from therapeutic drug monitoring and compute the next dose that targets a specified steady-state trough concentration. All quantities in your program must be handled in the units specified below, and all outputs must follow the required format exactly.\n\nFundamental base and modeling assumptions to use:\n- Central Dogma of Molecular Biology and enzyme-mediated drug metabolism: gene sequence variants can alter enzyme levels or function, which in turn modulate drug clearance. Clearance is defined as the volume of plasma cleared of drug per unit time.\n- One-compartment model with linear kinetics and first-order elimination, with steady-state reached under repeated dosing. Superposition and geometric decay imply that, at steady state with bolus dose $D$ given every $\\tau$ hours, clearance $CL$ in $\\mathrm{L/h}$, and volume of distribution $V$ in $\\mathrm{L}$, the steady-state trough concentration immediately before the next dose is\n$$\nC_{\\mathrm{trough}}(CL; D,\\tau,V) \\;=\\; \\frac{D}{V}\\,\\frac{e^{-\\left(\\frac{CL}{V}\\right)\\tau}}{1 - e^{-\\left(\\frac{CL}{V}\\right)\\tau}} \\quad \\text{in mg/L.}\n$$\n- Genotype-informed prior for clearance: the prior for $CL$ is Log-Normal with parameters on the logarithmic scale determined by a population typical clearance multiplied by a genotype effect. Specifically, let $CL_{\\mathrm{pop}}$ denote the typical clearance for a normal metabolizer, and let $g$ denote a multiplicative genotype factor. Then\n$$\n\\ln(CL) \\sim \\mathcal{N}\\!\\left(\\mu_{\\mathrm{prior}}, \\sigma_{\\mathrm{prior}}^2\\right), \\quad \\mu_{\\mathrm{prior}} = \\ln\\!\\left(g \\cdot CL_{\\mathrm{pop}}\\right).\n$$\n- Residual error model for troughs: conditional on $CL$, each observed steady-state trough concentration $y_i$ (in $\\mathrm{mg/L}$) is independently Log-Normally distributed around the model prediction $C_{\\mathrm{trough}}(CL; D,\\tau,V)$ with logarithmic residual standard deviation $\\sigma_{\\mathrm{res}}$:\n$$\n\\ln(y_i) \\mid CL \\sim \\mathcal{N}\\!\\left(\\ln\\!\\left(C_{\\mathrm{trough}}(CL; D,\\tau,V)\\right),\\, \\sigma_{\\mathrm{res}}^2\\right).\n$$\n- Bayesian update target: compute the posterior mean of $CL$,\n$$\n\\mathbb{E}[CL \\mid \\{y_i\\}] \\;=\\; \\int_{0}^{\\infty} CL \\, p(CL \\mid \\{y_i\\}) \\, dCL,\n$$\nand use this as a plug-in estimator in the dosing equation below.\n\nDosing control objective:\n- Given a target steady-state trough concentration $C_{\\mathrm{target}}$ in $\\mathrm{mg/L}$ and a fixed dosing interval $\\tau$ in $\\mathrm{h}$, compute the next dose $D_{\\mathrm{next}}$ in $\\mathrm{mg}$ that is expected to achieve $C_{\\mathrm{target}}$ under the posterior-mean clearance. Solve the steady-state trough equation for $D$ to obtain\n$$\nD_{\\mathrm{next}} \\;=\\; V \\cdot C_{\\mathrm{target}} \\left(\\exp\\!\\left(\\frac{\\mathbb{E}[CL \\mid \\{y_i\\}]}{V}\\,\\tau\\right) - 1\\right).\n$$\n\nComputational requirements to ensure testability and reproducibility:\n- Use a numerical quadrature by discrete grid to approximate the posterior of $CL$:\n  - Grid over $CL$ on a uniform linear grid with $N = 20001$ points spanning $[0.5, 15.0]$ in $\\mathrm{L/h}$, inclusive.\n  - Evaluate the log-prior and log-likelihood at each grid point; combine to obtain unnormalized log-posterior. Exponentiate after subtracting the maximum log value for numerical stability, then normalize to obtain discrete posterior weights that sum to $1$.\n  - Compute the posterior mean as the weighted sum over the grid.\n- Prior hyperparameters:\n  - Population typical clearance $CL_{\\mathrm{pop}} = 4.5$ $\\mathrm{L/h}$.\n  - Log-prior standard deviation $\\sigma_{\\mathrm{prior}} = 0.35$ on the natural logarithm scale.\n- Residual error:\n  - Log-residual standard deviation $\\sigma_{\\mathrm{res}} = 0.25$ on the natural logarithm scale.\n- Genotype-to-factor mapping $g$:\n  - Normal metabolizer (NM): $g = 1.0$\n  - Intermediate metabolizer (IM): $g = 0.8$\n  - Poor metabolizer (PM): $g = 0.6$\n  - Ultrarapid metabolizer (UM): $g = 1.5$\n\nUnits and rounding:\n- Clearance $CL$ in $\\mathrm{L/h}$, volume $V$ in $\\mathrm{L}$, dosing interval $\\tau$ in $\\mathrm{h}$, concentrations in $\\mathrm{mg/L}$, and doses in $\\mathrm{mg}$.\n- Your program must output $D_{\\mathrm{next}}$ for each test case in $\\mathrm{mg}$, rounded to the nearest integer.\n\nInput specification for your program:\n- There is no input. Hard-code the test suite below and produce the specified single-line output.\n\nTest suite:\nFor each case, use the tuple $(\\text{genotype}, V, \\tau, D_{\\mathrm{prev}}, \\{y_i\\}, C_{\\mathrm{target}})$ with the exact values provided.\n\n- Case $1$: $\\text{genotype} = \\text{\"NM\"}$, $V = 50$ $\\mathrm{L}$, $\\tau = 12$ $\\mathrm{h}$, $D_{\\mathrm{prev}} = 1000$ $\\mathrm{mg}$, observed troughs $\\{9.0, 8.5\\}$ $\\mathrm{mg/L}$, $C_{\\mathrm{target}} = 15.0$ $\\mathrm{mg/L}$.\n- Case $2$: $\\text{genotype} = \\text{\"PM\"}$, $V = 50$ $\\mathrm{L}$, $\\tau = 12$ $\\mathrm{h}$, $D_{\\mathrm{prev}} = 1000$ $\\mathrm{mg}$, observed troughs $\\{22.0, 24.0, 23.0\\}$ $\\mathrm{mg/L}$, $C_{\\mathrm{target}} = 15.0$ $\\mathrm{mg/L}$.\n- Case $3$: $\\text{genotype} = \\text{\"UM\"}$, $V = 50$ $\\mathrm{L}$, $\\tau = 12$ $\\mathrm{h}$, $D_{\\mathrm{prev}} = 1000$ $\\mathrm{mg}$, observed trough $\\{4.0\\}$ $\\mathrm{mg/L}$, $C_{\\mathrm{target}} = 15.0$ $\\mathrm{mg/L}$.\n- Case $4$: $\\text{genotype} = \\text{\"IM\"}$, $V = 50$ $\\mathrm{L}$, $\\tau = 24$ $\\mathrm{h}$, $D_{\\mathrm{prev}} = 1500$ $\\mathrm{mg}$, observed troughs $\\{7.0, 6.5\\}$ $\\mathrm{mg/L}$, $C_{\\mathrm{target}} = 10.0$ $\\mathrm{mg/L}$.\n- Case $5$: $\\text{genotype} = \\text{\"NM\"}$, $V = 50$ $\\mathrm{L}$, $\\tau = 24$ $\\mathrm{h}$, $D_{\\mathrm{prev}} = 1000$ $\\mathrm{mg}$, observed trough $\\{5.0\\}$ $\\mathrm{mg/L}$, $C_{\\mathrm{target}} = 5.0$ $\\mathrm{mg/L}$.\n\nRequired final output format:\n- Your program should produce a single line of output containing the $5$ computed next doses in $\\mathrm{mg}$, rounded to the nearest integer, as a comma-separated list enclosed in square brackets. For example, an output with three results should look like $[a,b,c]$, but here you must output exactly five integers in the order of the cases above.", "solution": "The problem statement is scientifically sound, well-posed, and objective. It provides a complete set of equations, parameters, and computational specifications for implementing a Bayesian adaptive dosing algorithm. The task is to calculate the optimal next dose for a series of simulated patient cases based on pharmacogenetic information and therapeutic drug monitoring data. The problem is valid and a solution can be constructed.\n\nThe core of the problem is to implement a Bayesian inference procedure to update our belief about a patient's drug clearance ($CL$) and then use this updated belief to guide dosing. The algorithm proceeds in two main stages: Bayesian updating and dose control.\n\nFirst, we establish the components of the Bayesian model. The parameter of interest is the drug clearance, $CL$, measured in $\\mathrm{L/h}$.\n\nThe prior distribution for $CL$ is informed by the patient's genotype. It is specified as a Log-Normal distribution, which is equivalent to stating that the natural logarithm of clearance is Normally distributed:\n$$\n\\ln(CL) \\sim \\mathcal{N}(\\mu_{\\mathrm{prior}}, \\sigma_{\\mathrm{prior}}^2)\n$$\nThe mean of this distribution, $\\mu_{\\mathrm{prior}}$, is determined by a population typical clearance, $CL_{\\mathrm{pop}}$, adjusted by a genotype-specific factor, $g$. The formula is:\n$$\n\\mu_{\\mathrm{prior}} = \\ln(g \\cdot CL_{\\mathrm{pop}})\n$$\nThe standard deviation, $\\sigma_{\\mathrm{prior}}$, reflects the inter-individual variability in clearance even within the same genotype group. The problem provides values for $CL_{\\mathrm{pop}}$, $\\sigma_{\\mathrm{prior}}$, and the mapping from genotype (NM, IM, PM, UM) to the factor $g$.\n\nThe likelihood function quantifies how probable the observed data are for a given value of $CL$. The data consist of one or more steady-state trough concentrations, $\\{y_i\\}$. According to the one-compartment pharmacokinetic model provided, the predicted trough concentration, $C_{\\mathrm{trough}}$, for a dose $D$ given every $\\tau$ hours to a patient with clearance $CL$ and volume of distribution $V$ is:\n$$\nC_{\\mathrm{trough}}(CL; D, \\tau, V) = \\frac{D}{V} \\frac{e^{-(\\frac{CL}{V})\\tau}}{1 - e^{-(\\frac{CL}{V})\\tau}}\n$$\nThe observed values $y_i$ are assumed to be Log-Normally distributed around this model prediction, accounting for measurement error and model misspecification. The log of an observation $\\ln(y_i)$ is thus Normally distributed:\n$$\n\\ln(y_i) \\mid CL \\sim \\mathcal{N}(\\ln(C_{\\mathrm{trough}}(CL; D, \\tau, V)), \\sigma_{\\mathrm{res}}^2)\n$$\nwhere $\\sigma_{\\mathrm{res}}$ is the residual standard deviation on the logarithmic scale. The total log-likelihood for a set of independent observations $\\{y_i\\}$ is the sum of the individual log-likelihoods:\n$$\n\\ln\\mathcal{L}(CL \\mid \\{y_i\\}) = \\sum_{i} \\ln p(y_i \\mid CL)\n$$\n\nAccording to Bayes' theorem, the posterior probability of $CL$ given the data is proportional to the product of the prior probability and the likelihood: $p(CL \\mid \\{y_i\\}) \\propto p(\\{y_i\\} \\mid CL) \\cdot p(CL)$. In logarithmic space, this becomes:\n$$\n\\ln p(CL \\mid \\{y_i\\}) = \\ln\\mathcal{L}(CL \\mid \\{y_i\\}) + \\ln p(CL) + \\text{constant}\n$$\nThe problem specifies a numerical approach to compute the posterior distribution. We discretize the continuous range of $CL$ into a fine grid of $N = 20001$ points from $0.5$ to $15.0$ $\\mathrm{L/h}$. For each point $CL_j$ on this grid, we compute the log-prior and the total log-likelihood, and sum them to get the unnormalized log-posterior. To obtain a normalized discrete probability distribution (posterior weights), we exponentiate the log-posterior values (after shifting by subtracting the maximum value for numerical stability) and normalize the resulting values to sum to one.\n\nThe second stage is dose control. The goal is to find the next dose, $D_{\\mathrm{next}}$, that will achieve a target trough concentration, $C_{\\mathrm{target}}$. The problem mandates using the posterior mean of clearance, $\\mathbb{E}[CL \\mid \\{y_i\\}]$, as a \"plug-in\" estimate for the true clearance. This posterior mean is calculated as the weighted average of the $CL$ values on the grid, with the posterior probabilities as weights:\n$$\n\\mathbb{E}[CL \\mid \\{y_i\\}] = \\sum_{j} CL_j \\cdot p(CL_j \\mid \\{y_i\\})\n$$\nBy rearranging the trough concentration formula and substituting $\\mathbb{E}[CL \\mid \\{y_i\\}]$ for $CL$ and $C_{\\mathrm{target}}$ for $C_{\\mathrm{trough}}$, we solve for the next dose:\n$$\nD_{\\mathrm{next}} = V \\cdot C_{\\mathrm{target}} \\left(\\exp\\left(\\frac{\\mathbb{E}[CL \\mid \\{y_i\\}]}{V}\\tau\\right) - 1\\right)\n$$\nThis calculation is performed for each test case specified. The final dose in milligrams is rounded to the nearest integer. The implementation will use `numpy` for efficient array computations and `scipy.stats.lognorm` to evaluate the log-probability densities for the prior and likelihood calculations.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.stats import lognorm\n\ndef solve():\n    # Define problem constants and parameters.\n    CL_POP = 4.5  # L/h\n    SIGMA_PRIOR = 0.35\n    SIGMA_RES = 0.25\n    \n    GENOTYPE_FACTORS = {\n        \"NM\": 1.0,\n        \"IM\": 0.8,\n        \"PM\": 0.6,\n        \"UM\": 1.5,\n    }\n    \n    # Computational grid for Clearance (CL)\n    CL_GRID_MIN = 0.5   # L/h\n    CL_GRID_MAX = 15.0  # L/h\n    N_POINTS = 20001\n    cl_grid = np.linspace(CL_GRID_MIN, CL_GRID_MAX, N_POINTS)\n\n    # Define the test cases from the problem statement.\n    test_cases = [\n        # (genotype, V, tau, D_prev, observed_troughs, C_target)\n        (\"NM\", 50.0, 12.0, 1000.0, [9.0, 8.5], 15.0),\n        (\"PM\", 50.0, 12.0, 1000.0, [22.0, 24.0, 23.0], 15.0),\n        (\"UM\", 50.0, 12.0, 1000.0, [4.0], 15.0),\n        (\"IM\", 50.0, 24.0, 1500.0, [7.0, 6.5], 10.0),\n        (\"NM\", 50.0, 24.0, 1000.0, [5.0], 5.0),\n    ]\n\n    def calculate_next_dose(genotype, V, tau, D_prev, y_obs, C_target):\n        \"\"\"\n        Calculates the next dose based on Bayesian adaptive dosing.\n        \"\"\"\n        # 1. Calculate log-prior\n        g = GENOTYPE_FACTORS[genotype]\n        mu_prior_ln_cl = np.log(g * CL_POP)\n        prior_scale = np.exp(mu_prior_ln_cl)\n        \n        # Using scipy.stats.lognorm.logpdf\n        # s = sigma, scale = exp(mu)\n        log_prior = lognorm.logpdf(cl_grid, s=SIGMA_PRIOR, scale=prior_scale)\n        \n        # 2. Calculate log-likelihood\n        # Calculate predicted trough concentrations for all CL values on the grid\n        k = cl_grid / V\n        exp_term = np.exp(-k * tau)\n        \n        # Avoid division by zero for very small k * tau (though not an issue with given grid)\n        # Using np.expm1 for better precision with small arguments\n        c_trough_pred = (D_prev / V) * exp_term / -np.expm1(-k * tau)\n\n        # Sum log-likelihoods over all observations\n        total_log_likelihood = np.zeros_like(cl_grid)\n        for y in y_obs:\n            # Likelihood of observing y given the predicted trough (as scale)\n            # The model is y ~ LogNormal(mean=c_trough_pred, sigma=SIGMA_RES)\n            # This means ln(y) ~ Normal(mean=ln(c_trough_pred), sigma=SIGMA_RES)\n            # The scale parameter in scipy's lognorm is exp(mu_normal) = c_trough_pred\n            log_lik_y = lognorm.logpdf(y, s=SIGMA_RES, scale=c_trough_pred)\n            total_log_likelihood += log_lik_y\n            \n        # 3. Calculate unnormalized log-posterior\n        log_posterior = log_prior + total_log_likelihood\n        \n        # 4. Normalize the posterior for numerical stability\n        log_posterior_shifted = log_posterior - np.max(log_posterior)\n        unnormalized_posterior = np.exp(log_posterior_shifted)\n        posterior_weights = unnormalized_posterior / np.sum(unnormalized_posterior)\n        \n        # 5. Compute the posterior mean of CL\n        E_cl_posterior = np.sum(cl_grid * posterior_weights)\n        \n        # 6. Calculate the next dose\n        exp_arg = (E_cl_posterior / V) * tau\n        # Use np.expm1 for precision: exp(x) - 1\n        D_next = V * C_target * np.expm1(exp_arg)\n        \n        return round(D_next)\n\n    results = []\n    for case in test_cases:\n        result = calculate_next_dose(*case)\n        results.append(result)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2836657"}]}