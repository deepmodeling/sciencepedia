{"hands_on_practices": [{"introduction": "To effectively use bioinformatics tools, one must first appreciate the structure and nuances of the underlying data. This exercise reveals the critical importance of understanding data formats by exploring a common but consequential pitfall in next-generation sequencing analysis. By quantifying the bias introduced when a pipeline misinterprets Phred quality score encoding, this problem [@problem_id:2793617] demonstrates how a seemingly minor technical detail can systematically skew downstream results, such as variant calling, and underscores the necessity of rigorous data quality control.", "problem": "A sequencing pipeline consumes reads in the FASTQ file format and uses per-base Phred quality scores to compute a preliminary, uncalibrated variant-support score at a site. By definition, a Phred quality score $Q$ is related to the base-calling error probability $p$ by $Q = -10 \\log_{10} p$. The FASTQ file encodes $Q$ as a printable character by adding a fixed offset to $Q$ and storing the corresponding American Standard Code for Information Interchange (ASCII) character. Two conventions exist: Phred$+33$ and Phred$+64$, meaning the stored ASCII code is $Q + 33$ or $Q + 64$, respectively.\n\nConsider a site where a variant calling module computes a preliminary, uncalibrated Phred-scale support for a non-reference allele as follows: it defines the score $S$ to be\n$$\nS \\equiv -10 \\log_{10}\\left(\\text{probability that all } x \\text{ observed non-reference reads are sequencing errors}\\right),\n$$\nassuming independence across reads and using per-read error probabilities derived from the decoded Phred scores.\n\nSuppose the actual FASTQ data are encoded as Phred$+64$, but the pipeline mistakenly treats them as Phred$+33$. At a particular site, exactly $x = 7$ reads support the non-reference allele (with arbitrary true underlying qualities), and all other reads at the site support the reference. Under the assumptions above, what is the additive bias $B \\equiv S_{\\text{mis}} - S_{\\text{true}}$ (in Phred units) introduced into the preliminary variant-support score at this site by this encoding mistake? Provide your answer as a single real number. No rounding is required, and no units should be included in your final answer.", "solution": "The problem is subjected to validation before a solution is attempted.\n\nThe givens are as follows:\n- The definition of a Phred quality score $Q$ in terms of base-calling error probability $p$ is $Q = -10 \\log_{10} p$.\n- Two FASTQ encoding schemes exist: Phred$+33$, where the stored ASCII code is $Q + 33$, and Phred$+64$, where the stored ASCII code is $Q + 64$.\n- The preliminary variant-support score $S$ for a non-reference allele is defined as $S \\equiv -10 \\log_{10}(\\text{probability that all } x \\text{ observed non-reference reads are sequencing errors})$.\n- The problem assumes independence of errors across reads.\n- The true data encoding is Phred$+64$.\n- The analysis pipeline mistakenly assumes Phred$+33$ encoding.\n- The number of reads supporting the non-reference allele is $x = 7$.\n- The objective is to compute the additive bias $B \\equiv S_{\\text{mis}} - S_{\\text{true}}$.\n\nThe problem is scientifically grounded, well-posed, and objective. The definitions are standard in bioinformatics, and the scenario of misinterpreting FASTQ encoding is a practical concern. The problem is self-contained; the fact that the underlying quality scores are arbitrary does not preclude a solution, as the bias is independent of these scores, which will be demonstrated. Thus, the problem is valid.\n\nLet us proceed with the derivation.\n\nLet there be $x=7$ reads supporting the non-reference allele. For the $i$-th read, where $i \\in \\{1, 2, \\dots, 7\\}$, let $Q_{\\text{true}, i}$ be its true Phred quality score and $p_{\\text{true}, i}$ be its true base-calling error probability. By definition:\n$$Q_{\\text{true}, i} = -10 \\log_{10}(p_{\\text{true}, i})$$\nFrom this, we can express the error probability as:\n$$p_{\\text{true}, i} = 10^{-Q_{\\text{true}, i} / 10}$$\nThe true variant-support score, $S_{\\text{true}}$, is calculated based on these true probabilities. The problem states that errors are independent across reads. Therefore, the probability that all $x$ reads are sequencing errors is the product of their individual error probabilities:\n$$P(\\text{all } x \\text{ are errors})_{\\text{true}} = \\prod_{i=1}^{x} p_{\\text{true}, i}$$\nThe true score $S_{\\text{true}}$ is then:\n$$S_{\\text{true}} = -10 \\log_{10} \\left( \\prod_{i=1}^{x} p_{\\text{true}, i} \\right)$$\nUsing the property of logarithms that $\\log(ab) = \\log(a) + \\log(b)$:\n$$S_{\\text{true}} = -10 \\sum_{i=1}^{x} \\log_{10}(p_{\\text{true}, i})$$\nSubstituting the definition of $Q_{\\text{true}, i} = -10 \\log_{10}(p_{\\text{true}, i})$:\n$$S_{\\text{true}} = \\sum_{i=1}^{x} Q_{\\text{true}, i}$$\nThis shows that the Phred-scaled support score is simply the sum of the individual Phred quality scores of the supporting reads.\n\nNext, we analyze the calculation performed by the pipeline, which makes an encoding mistake. The data is encoded as Phred$+64$, so the ASCII character for the $i$-th read corresponds to the integer value $C_i = Q_{\\text{true}, i} + 64$.\nThe pipeline, however, assumes a Phred$+33$ encoding. It decodes the quality score by subtracting $33$ from the ASCII value. Let the misinterpreted Phred score be $Q_{\\text{mis}, i}$.\n$$Q_{\\text{mis}, i} = C_i - 33$$\nSubstituting the expression for $C_i$:\n$$Q_{\\text{mis}, i} = (Q_{\\text{true}, i} + 64) - 33 = Q_{\\text{true}, i} + 31$$\nThe pipeline thus overestimates the quality of each read by a constant value of $31$.\n\nThe misinterpreted variant-support score, $S_{\\text{mis}}$, is calculated using the same logic as $S_{\\text{true}}$, but with the misinterpreted quality scores $Q_{\\text{mis}, i}$. Therefore:\n$$S_{\\text{mis}} = \\sum_{i=1}^{x} Q_{\\text{mis}, i}$$\n\nThe problem requires us to find the additive bias $B = S_{\\text{mis}} - S_{\\text{true}}$. We substitute the expressions for $S_{\\text{mis}}$ and $S_{\\text{true}}$:\n$$B = \\left(\\sum_{i=1}^{x} Q_{\\text{mis}, i}\\right) - \\left(\\sum_{i=1}^{x} Q_{\\text{true}, i}\\right)$$\n$$B = \\sum_{i=1}^{x} (Q_{\\text{mis}, i} - Q_{\\text{true}, i})$$\nWe have already found the difference for each read: $Q_{\\text{mis}, i} - Q_{\\text{true}, i} = 31$. This difference is a constant, independent of the actual quality score of the read.\nSubstituting this constant difference into the sum:\n$$B = \\sum_{i=1}^{x} 31$$\nThe sum is over $x$ terms, where $x=7$.\n$$B = x \\times 31 = 7 \\times 31$$\nThe final calculation is:\n$$B = 217$$\nThe additive bias introduced into the preliminary variant-support score is $217$ Phred units. This result is independent of the specific quality scores of the $7$ reads, which validates our initial assessment that the problem is well-posed.", "answer": "$$\\boxed{217}$$", "id": "2793617"}, {"introduction": "At the heart of sequence analysis lies the fundamental task of alignment: identifying regions of similarity between two sequences. The Smith-Waterman algorithm provides the rigorous, mathematically optimal solution for local alignment, and understanding its mechanics is essential for any bioinformatician. This practice [@problem_id:2793645] guides you through a manual application of the algorithm, offering invaluable hands-on experience with the dynamic programming principles, scoring matrices, and gap penalties that form the conceptual bedrock of nearly all modern sequence alignment tools.", "problem": "You are studying local sequence similarity under a substitution model that distinguishes transitions from transversions, a practice motivated by the differing mutation rates observed under the principles of genetics. Consider the deoxyribonucleic acid (DNA) sequences $X$ and $Y$:\n- $X = \\text{AGTCTGAC}$\n- $Y = \\text{GTTCTGCA}$\n\nUse the Smith–Waterman local alignment algorithm with a linear gap model to compute an optimal local alignment between substrings of $X$ and $Y$. The substitution scoring function $s(x,y)$ is defined on nucleotides $x,y \\in \\{\\text{A},\\text{C},\\text{G},\\text{T}\\}$ as follows:\n- If $x = y$, then $s(x,y) = +3$.\n- If $(x,y)$ is a transition (A$\\leftrightarrow$G or C$\\leftrightarrow$T), then $s(x,y) = -1$.\n- If $(x,y)$ is a transversion (all other mismatches), then $s(x,y) = -2$.\n\nUse a constant gap penalty $g = -2$ per gap (linear, not affine).\n\nTasks:\n1. Construct the dynamic programming (DP) matrix for Smith–Waterman and determine the optimal local alignment(s) between substrings of $X$ and $Y$ under the scoring scheme above. Report the aligned substrings you obtain (including any indels) and the corresponding optimal Smith–Waterman score.\n2. For your final numeric answer, enter only the optimal Smith–Waterman local alignment score (no units, no additional text). No rounding is required because all scores are integers.\n\nYour reasoning should begin from the definition of local alignment optimality and the Smith–Waterman DP recurrence, not from any pre-stated closed-form shortcuts. The biological assumptions should be scientifically realistic and consistent with empirical mutation patterns, and all steps must preserve the rigorous definition of local alignment optimality. The final answer must be a single real number.", "solution": "The task is to compute the optimal local alignment between two deoxyribonucleic acid (DNA) sequences, $X = \\text{AGTCTGAC}$ and $Y = \\text{GTTCTGCA}$, using the Smith–Waterman algorithm. The problem specifies a scoring scheme that differentiates between transitions and transversions, and a linear gap penalty.\n\nFirst, I will validate the problem statement.\n\n**Step 1: Extract Givens**\n-   Sequence $X$: $\\text{AGTCTGAC}$, with length $m=8$.\n-   Sequence $Y$: $\\text{GTTCTGCA}$, with length $n=8$.\n-   Scoring function $s(x,y)$:\n    -   Match: $s(x,y) = +3$ if $x=y$.\n    -   Transition (A$\\leftrightarrow$G or C$\\leftrightarrow$T): $s(x,y) = -1$.\n    -   Transversion (all other mismatches): $s(x,y) = -2$.\n-   Linear gap penalty $g = -2$.\n\n**Step 2: Validate Using Extracted Givens**\nThe problem is scientifically grounded. The Smith–Waterman algorithm is a fundamental tool in bioinformatics for local sequence alignment. The scoring model, which assigns a smaller penalty to transitions than to transversions, reflects empirical observations of mutation patterns in genetics, where transitions are more frequent than transversions. The problem is well-posed, providing all necessary parameters (sequences, scoring function, gap penalty) for a unique solution score to be computed via a standard algorithm. The language is objective and precise. The problem is not trivial, as it requires a full dynamic programming matrix computation. It is fully specified and contains no contradictions.\n\n**Step 3: Verdict and Action**\nThe problem is valid. I will now proceed with the solution.\n\nThe Smith–Waterman algorithm utilizes dynamic programming to find the optimal local alignment. A matrix, $H$, of size $(n+1) \\times (m+1)$ is constructed, where $m$ and $n$ are the lengths of sequences $X$ and $Y$, respectively. Each entry $H_{i,j}$ stores the maximum score of an alignment ending at position $i$ of sequence $Y$ and position $j$ of sequence $X$.\n\nThe matrix is initialized with $H_{i,0} = 0$ for $0 \\le i \\le n$ and $H_{0,j} = 0$ for $0 \\le j \\le m$. The remaining entries are computed using the following recurrence relation for $1 \\le i \\le n$ and $1 \\le j \\le m$:\n$$H_{i,j} = \\max \\begin{cases} 0 \\\\ H_{i-1,j-1} + s(y_i, x_j) \\\\ H_{i-1,j} + g \\\\ H_{i,j-1} + g \\end{cases}$$\nHere, $x_j$ is the $j$-th character of $X$, $y_i$ is the $i$-th character of $Y$, $s(y_i, x_j)$ is the substitution score, and $g = -2$ is the gap penalty. The $0$ in the recurrence allows for the start of a new local alignment at any position.\n\nThe scoring matrix $s(x,y)$ based on the problem's rules is as follows:\n$$\n\\begin{array}{c|rrrr}\ns(x,y) & \\text{A} & \\text{C} & \\text{G} & \\text{T} \\\\\n\\hline\n\\text{A} & +3 & -2 & -1 & -2 \\\\\n\\text{C} & -2 & +3 & -2 & -1 \\\\\n\\text{G} & -1 & -2 & +3 & -2 \\\\\n\\text{T} & -2 & -1 & -2 & +3\n\\end{array}\n$$\n\nWith $X = \\text{AGTCTGAC}$ and $Y = \\text{GTTCTGCA}$, we construct the $9 \\times 9$ dynamic programming matrix $H$.\n\n$$\nH = \\begin{array}{c|c|cccccccc}\n& & \\ _{j=0} & \\text{A}_{j=1} & \\text{G}_{j=2} & \\text{T}_{j=3} & \\text{C}_{j=4} & \\text{T}_{j=5} & \\text{G}_{j=6} & \\text{A}_{j=7} & \\text{C}_{j=8} \\\\\n\\hline\n\\ _{i=0} & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\\n\\text{G}_{i=1} & 0 & 0 & 3 & 1 & 0 & 0 & 3 & 1 & 0 \\\\\n\\text{T}_{i=2} & 0 & 0 & 1 & 6 & 4 & 3 & 1 & 1 & 0 \\\\\n\\text{T}_{i=3} & 0 & 0 & 0 & 4 & 5 & 7 & 5 & 3 & 1 \\\\\n\\text{C}_{i=4} & 0 & 0 & 0 & 2 & 7 & 5 & 5 & 3 & 6 \\\\\n\\text{T}_{i=5} & 0 & 0 & 0 & 3 & 5 & 10 & 8 & 6 & 4 \\\\\n\\text{G}_{i=6} & 0 & 0 & 3 & 1 & 3 & 8 & 13 & 11 & 9 \\\\\n\\text{C}_{i=7} & 0 & 0 & 1 & 2 & 4 & 6 & 11 & 11 & 14 \\\\\n\\text{A}_{i=8} & 0 & 3 & 1 & 0 & 2 & 4 & 9 & 14 & 12 \\\\\n\\end{array}\n$$\n\nThe optimal local alignment score is the maximum value in the matrix $H$, which is $14$. This value appears at two positions: $H_{7,8}$ and $H_{8,7}$. We perform a traceback from each position to find the corresponding optimal alignment(s). The traceback proceeds from the cell with the maximum score to a cell with a score of $0$, following the path that generated the scores.\n\n**Traceback 1: Starting from $H_{7,8} = 14$**\nThe alignment is constructed in reverse order.\n1.  $(i,j)=(7,8)$: $H_{7,8}=14$. $y_7=\\text{C}, x_8=\\text{C}$. Score is from $H_{6,7} + s(\\text{C},\\text{C}) = 11 + 3 = 14$. Diagonal move. Align C with C.\n2.  $(i,j)=(6,7)$: $H_{6,7}=11$. $y_6=\\text{G}, x_7=\\text{A}$. Score is from $H_{6,6} + g = 13 - 2 = 11$. Horizontal move. Align A with a gap.\n3.  $(i,j)=(6,6)$: $H_{6,6}=13$. $y_6=\\text{G}, x_6=\\text{G}$. Score is from $H_{5,5} + s(\\text{G},\\text{G}) = 10 + 3 = 13$. Diagonal move. Align G with G.\n4.  $(i,j)=(5,5)$: $H_{5,5}=10$. $y_5=\\text{T}, x_5=\\text{T}$. Score is from $H_{4,4} + s(\\text{T},\\text{T}) = 7 + 3 = 10$. Diagonal move. Align T with T.\n5.  $(i,j)=(4,4)$: $H_{4,4}=7$. $y_4=\\text{C}, x_4=\\text{C}$. Score is from $H_{3,3} + s(\\text{C},\\text{C}) = 4 + 3 = 7$. Diagonal move. Align C with C.\n6.  $(i,j)=(3,3)$: $H_{3,3}=4$. $y_3=\\text{T}, x_3=\\text{T}$. Score is from $H_{2,2} + s(\\text{T},\\text{T}) = 1 + 3 = 4$. Diagonal move. Align T with T.\n7.  $(i,j)=(2,2)$: $H_{2,2}=1$. $y_2=\\text{T}, x_2=\\text{G}$. Score is from $H_{1,2} + g = 3 - 2 = 1$. Vertical move. Align T with a gap.\n8.  $(i,j)=(1,2)$: $H_{1,2}=3$. $y_1=\\text{G}, x_2=\\text{G}$. Score is from $H_{0,1} + s(\\text{G},\\text{G}) = 0 + 3 = 3$. Diagonal move. Align G with G.\nThe traceback terminates at $H_{0,1} = 0$.\n\nThis traceback yields the alignment of substrings $X' = x_2 \\ldots x_8 = \\text{GTCTGAC}$ and $Y' = y_1 \\ldots y_7 = \\text{GTTCTGC}$.\nAlignment 1:\n-   X: $\\text{G - T C T G A C}$\n-   Y: $\\text{G T T C T G - C}$\nScore: $s(\\text{G},\\text{G}) + g + s(\\text{T},\\text{T}) + s(\\text{C},\\text{C}) + s(\\text{T},\\text{T}) + s(\\text{G},\\text{G}) + g + s(\\text{C},\\text{C}) = 3 - 2 + 3 + 3 + 3 + 3 - 2 + 3 = 14$.\n\n**Traceback 2: Starting from $H_{8,7} = 14$**\n1.  $(i,j)=(8,7)$: $H_{8,7}=14$. $y_8=\\text{A}, x_7=\\text{A}$. Score is from $H_{7,6} + s(\\text{A},\\text{A}) = 11 + 3 = 14$. Diagonal move. Align A with A.\n2.  $(i,j)=(7,6)$: $H_{7,6}=11$. $y_7=\\text{C}, x_6=\\text{G}$. Score is from $H_{6,6} + g = 13 - 2 = 11$. Vertical move. Align C with a gap.\n3.  The path from $H_{6,6}=13$ is identical to the one in Traceback 1, ending at $H_{0,1}=0$. The sub-alignment from this point is:\n    -   X: $\\text{G - T C T G}$\n    -   Y: $\\text{G T T C T G}$\n\nThis traceback yields the alignment of substrings $X' = x_2 \\ldots x_7 = \\text{GTCTGA}$ and $Y' = y_1 \\ldots y_8 = \\text{GTTCTGCA}$.\nAlignment 2:\n-   X: $\\text{G - T C T G - A}$\n-   Y: $\\text{G T T C T G C A}$\nScore: $s(\\text{G},\\text{G}) + g + s(\\text{T},\\text{T}) + s(\\text{C},\\text{C}) + s(\\text{T},\\text{T}) + s(\\text{G},\\text{G}) + g + s(\\text{A},\\text{A}) = 3 - 2 + 3 + 3 + 3 + 3 - 2 + 3 = 14$.\n\nBoth tracebacks confirm that the optimal local alignment score is $14$. The problem asks for the optimal score as the final answer.", "answer": "$$\\boxed{14}$$", "id": "2793645"}, {"introduction": "While the Smith-Waterman algorithm guarantees optimality, its computational cost makes it impractical for aligning millions of reads to a large genome. To solve this scalability challenge, modern aligners use sophisticated data structures like the FM-index, which is based on the Burrows-Wheeler Transform (BWT). This advanced exercise [@problem_id:2793627] provides a rare glimpse into the inner workings of these powerful tools, allowing you to manually perform the \"backward search\" algorithm to see how a pattern can be located with remarkable efficiency, without ever decompressing the full reference sequence.", "problem": "You are given a text over the DNA alphabet with a unique sentinel end-marker, represented implicitly by its Burrows–Wheeler Transform (BWT). You are also given the corresponding $C$ array and occurrence function $\\mathrm{Occ}$ needed for backward search in a Ferragina–Manzini index (FM-index). Indices are $0$-based and suffix array (SA) intervals are half-open $[l, r)$. The alphabet is ordered as $ \\$  \\text{A}  \\text{C}  \\text{G}  \\text{T} $.\n\nData:\n- BWT string: $\\text{ACGTGAA\\$A}$, of length $n=9$.\n- $C$ array (number of characters in the text strictly smaller than $c$):\n  $C(\\$)=0$, $C(\\text{A})=1$, $C(\\text{C})=5$, $C(\\text{G})=6$, $C(\\text{T})=8$.\n- $\\mathrm{Occ}(c, i)$ returns the number of occurrences of character $c$ in the BWT prefix of length $i$ (that is, in positions $0$ through $i-1$). The values for $i=0,1,\\dots,9$ are:\n  - $\\mathrm{Occ}(\\text{A}, i) = [\\,0,\\,1,\\,1,\\,1,\\,1,\\,1,\\,2,\\,3,\\,3,\\,4\\,]$,\n  - $\\mathrm{Occ}(\\text{C}, i) = [\\,0,\\,0,\\,1,\\,1,\\,1,\\,1,\\,1,\\,1,\\,1,\\,1\\,]$,\n  - $\\mathrm{Occ}(\\text{G}, i) = [\\,0,\\,0,\\,0,\\,1,\\,1,\\,2,\\,2,\\,2,\\,2,\\,2\\,]$,\n  - $\\mathrm{Occ}(\\text{T}, i) = [\\,0,\\,0,\\,0,\\,0,\\,1,\\,1,\\,1,\\,1,\\,1,\\,1\\,]$,\n  - $\\mathrm{Occ}(\\$, i) = [\\,0,\\,0,\\,0,\\,0,\\,0,\\,0,\\,0,\\,0,\\,1,\\,1\\,]$.\n\nQuery:\n- Pattern $P=\\text{AGA}$.\n\nTask:\nUsing only the definitions of the Burrows–Wheeler Transform (BWT), the $C$ array, the occurrence function $\\mathrm{Occ}$, and the last-to-first (LF) mapping principle underlying backward search, perform the FM-index backward search for the pattern $P$ character by character from right to left. Start from the full suffix array interval $[0, n)$ and compute the final suffix array interval $[l, r)$ that corresponds to all occurrences of $P$ in the text.\n\nAnswer specification:\n- Report the final suffix array interval as the ordered pair $(l, r)$, using integers with no units.\n- No rounding is required.", "solution": "The problem statement has been validated and is found to be self-contained, consistent, and scientifically grounded. It provides all necessary data structures—the Burrows–Wheeler Transform (BWT), the $C$ array, and the occurrence function $\\mathrm{Occ}$—to perform a backward search for a given pattern on a text represented by an FM-index. The data provided for the BWT, $C$ array, and $\\mathrm{Occ}$ function are mutually consistent. Therefore, a unique solution can be derived through a direct application of the standard backward search algorithm.\n\nThe backward search algorithm iteratively refines a suffix array (SA) interval $[l, r)$ corresponding to all suffixes that are prefixed by the pattern fragment processed so far. The search proceeds from the last character of the query pattern to the first. For a pattern $P = p_1 p_2 \\dots p_m$, the search is performed for characters $p_m, p_{m-1}, \\dots, p_1$ in sequence.\n\nThe core of the algorithm is the update step, which computes the new SA interval $[l_{\\text{new}}, r_{\\text{new}})$ from the current interval $[l_{\\text{old}}, r_{\\text{old}})$ when prepending a character $c$. This update is based on the Last-to-First (LF) mapping principle, which is captured by the formula:\n$$ l_{\\text{new}} = C(c) + \\mathrm{Occ}(c, l_{\\text{old}}) $$\n$$ r_{\\text{new}} = C(c) + \\mathrm{Occ}(c, r_{\\text{old}}) $$\nHere, $C(c)$ gives the starting position in the conceptual sorted first column (F) of the BWT matrix for character $c$, and $\\mathrm{Occ}(c, i)$ counts the occurrences of $c$ in the BWT prefix of length $i$, which effectively computes the rank of the character at a given BWT position among its identical peers.\n\nThe initial state of the search, corresponding to an empty pattern, is the full SA interval $[0, n)$, where $n$ is the length of the text. For this problem, the text length is $n=9$, so the initial interval is $[0, 9)$. The query pattern is $P = \\text{AGA}$. The search will proceed with the characters in the order: 'A', then 'G', then 'A'.\n\nLet the initial interval be $[l_0, r_0) = [0, 9)$.\n\nStep $1$: Search for the last character of $P$, which is $p_3 = \\text{A}$.\nThe current interval is $[l_0, r_0) = [0, 9)$. The character to prepend is $c = \\text{A}$.\nWe compute the new interval $[l_1, r_1)$:\n$$ l_1 = C(\\text{A}) + \\mathrm{Occ}(\\text{A}, l_0) = C(\\text{A}) + \\mathrm{Occ}(\\text{A}, 0) $$\n$$ r_1 = C(\\text{A}) + \\mathrm{Occ}(\\text{A}, r_0) = C(\\text{A}) + \\mathrm{Occ}(\\text{A}, 9) $$\nUsing the provided data:\n$C(\\text{A}) = 1$\n$\\mathrm{Occ}(\\text{A}, 0) = 0$\n$\\mathrm{Occ}(\\text{A}, 9) = 4$\nSubstituting these values:\n$$ l_1 = 1 + 0 = 1 $$\n$$ r_1 = 1 + 4 = 5 $$\nThe SA interval for all suffixes prefixed by 'A' is $[l_1, r_1) = [1, 5)$. The size of this interval, $r_1 - l_1 = 4$, correctly indicates that there are $4$ occurrences of 'A' in the original text.\n\nStep $2$: Prepend the next character of $P$, which is $p_2 = \\text{G}$.\nThe current interval is $[l_1, r_1) = [1, 5)$. The character to prepend is $c = \\text{G}$.\nWe compute the new interval $[l_2, r_2)$:\n$$ l_2 = C(\\text{G}) + \\mathrm{Occ}(\\text{G}, l_1) = C(\\text{G}) + \\mathrm{Occ}(\\text{G}, 1) $$\n$$ r_2 = C(\\text{G}) + \\mathrm{Occ}(\\text{G}, r_1) = C(\\text{G}) + \\mathrm{Occ}(\\text{G}, 5) $$\nUsing the provided data:\n$C(\\text{G}) = 6$\n$\\mathrm{Occ}(\\text{G}, 1) = 0$\n$\\mathrm{Occ}(\\text{G}, 5) = 2$\nSubstituting these values:\n$$ l_2 = 6 + 0 = 6 $$\n$$ r_2 = 6 + 2 = 8 $$\nThe SA interval for all suffixes prefixed by 'GA' is $[l_2, r_2) = [6, 8)$. The size of this interval, $r_2 - l_2 = 2$, indicates two occurrences of 'GA'.\n\nStep $3$: Prepend the first character of $P$, which is $p_1 = \\text{A}$.\nThe current interval is $[l_2, r_2) = [6, 8)$. The character to prepend is $c = \\text{A}$.\nWe compute the final interval $[l_3, r_3)$:\n$$ l_3 = C(\\text{A}) + \\mathrm{Occ}(\\text{A}, l_2) = C(\\text{A}) + \\mathrm{Occ}(\\text{A}, 6) $$\n$$ r_3 = C(\\text{A}) + \\mathrm{Occ}(\\text{A}, r_2) = C(\\text{A}) + \\mathrm{Occ}(\\text{A}, 8) $$\nUsing the provided data:\n$C(\\text{A}) = 1$\n$\\mathrm{Occ}(\\text{A}, 6) = 2$\n$\\mathrm{Occ}(\\text{A}, 8) = 3$\nSubstituting these values:\n$$ l_3 = 1 + 2 = 3 $$\n$$ r_3 = 1 + 3 = 4 $$\nThe final SA interval for all suffixes prefixed by the full pattern 'AGA' is $[l_3, r_3) = [3, 4)$. The size of the interval, $r_3 - l_3 = 1$, indicates that the pattern 'AGA' occurs exactly once in the text.\n\nThe problem asks for the final suffix array interval as the ordered pair $(l, r)$. This corresponds to $(l_3, r_3)$.", "answer": "$$\\boxed{(3, 4)}$$", "id": "2793627"}]}