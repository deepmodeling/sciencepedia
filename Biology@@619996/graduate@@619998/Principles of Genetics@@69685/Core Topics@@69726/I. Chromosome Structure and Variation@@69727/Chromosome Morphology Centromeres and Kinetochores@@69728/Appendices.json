{"hands_on_practices": [{"introduction": "To understand how chromosomes are moved, we must first build a quantitative picture of the machinery involved. This exercise [@problem_id:2798912] provides a foundational step by modeling the kinetochore, the crucial interface between a chromosome and the spindle microtubules. You will apply basic multiplicative and load-sharing principles to connect the number of microscopic components, the Ndc80 complexes, to the macroscopic tension the entire structure must withstand, illustrating how collective molecular action generates robust biological function.", "problem": "A vertebrate kinetochore binds a bundle of kinetochore microtubules to the outer kinetochore plate. The Nuclear division cycle 80 (Ndc80) complex is a core microtubule-binding element that forms multiple attachments per microtubule and is thought to bear tensile load under metaphase tension. Assume the following fundamental bases: (i) counts of independent constituents combine multiplicatively across hierarchical levels (for example, the total copy number across a bundle is the product of the number of elements in the bundle and the average copy number per element), and (ii) for a set of mechanically identical, parallel load-bearing linkers undergoing small elastic deformations, the total force is the sum of forces across linkers and load is shared equally among the engaged linkers.\n\nLet a single kinetochore bind $m$ kinetochore microtubules, and let the average number of Ndc80 complexes per microtubule be $n$. High-resolution imaging and force calibration estimate that, at metaphase, a total poleward tension $F$ acts across the outer kinetochore, but only a fraction $f$ of the Ndc80 complexes are mechanically engaged in load-bearing at any instant.\n\n1) Using only the fundamental bases stated above, derive an expression for the total number of Ndc80 complexes per kinetochore in terms of $m$ and $n$.\n\n2) Under the equal-load-sharing assumption for the engaged subset, derive an expression for the load per engaged Ndc80 complex, $L$, in terms of $F$, $m$, $n$, and $f$.\n\n3) Evaluate $L$ for $m = 18$, $n = 13$, $f = 0.7$, and $F = 72\\,\\mathrm{pN}$. Express the final numerical value of $L$ in picoNewtons. Round your answer to four significant figures. Report only the per-complex load $L$ as your final numeric answer.\n\nIn your derivation, briefly justify the equal-load-sharing step in terms of the parallel composition of identical elastic linkers at small strain, and comment on how $f$ modulates the per-complex load without altering the total copy number.", "solution": "The problem requires the derivation of expressions for the total number of Ndc80 complexes per kinetochore and the load per engaged complex, followed by a numerical calculation. The validity of the problem is confirmed, as it is scientifically grounded in the principles of cell biology and biophysics, is well-posed, and provides all necessary information for a unique solution. We proceed directly to the derivation.\n\nLet the variables be defined as follows:\n- $m$: the number of kinetochore microtubules bound to a single kinetochore.\n- $n$: the average number of Ndc80 complexes per microtubule.\n- $F$: the total poleward tension acting on the kinetochore.\n- $f$: the fraction of Ndc80 complexes that are mechanically engaged at any instant.\n- $L$: the load per engaged Ndc80 complex.\n\nPart 1: Derivation of the total number of Ndc80 complexes per kinetochore.\nLet $N_{total}$ represent the total number of Ndc80 complexes associated with one kinetochore. The problem describes a hierarchical system where one kinetochore binds $m$ microtubules, and each microtubule is associated with an average of $n$ Ndc80 complexes. According to the explicitly stated fundamental basis (i), \"counts of independent constituents combine multiplicatively across hierarchical levels\". Therefore, the total number of complexes is the product of the number of elements at each level of the hierarchy.\nThe total number of Ndc80 complexes per kinetochore is the number of microtubules per kinetochore multiplied by the number of complexes per microtubule:\n$$N_{total} = m \\times n$$\n\nPart 2: Derivation of the load per engaged Ndc80 complex.\nThe total population of Ndc80 complexes is $N_{total}$, but only a fraction $f$ of these is load-bearing. The number of engaged complexes, which we denote as $N_{engaged}$, is given by:\n$$N_{engaged} = f \\times N_{total}$$\nSubstituting the expression for $N_{total}$ from Part 1, we obtain:\n$$N_{engaged} = f \\times m \\times n$$\nThe total force $F$ is distributed among these $N_{engaged}$ linkers. The problem states as basis (ii) the \"equal-load-sharing assumption\". This assumption is justified by modeling the engaged Ndc80 complexes as a set of identical, parallel elastic linkers operating in the regime of small deformations. In such a model, each linker can be treated as an ideal spring with spring constant $k$. For a parallel arrangement of $N_{engaged}$ springs, the total force required to produce a displacement $\\Delta x$ is $F = N_{engaged} \\times (k \\Delta x)$. The force on any individual spring is $L = k \\Delta x$. From these two relations, it is clear that $L = \\frac{F}{N_{engaged}}$, which is the mathematical statement of equal load sharing.\n\nTherefore, the load $L$ on a single engaged Ndc80 complex is the total tension $F$ divided by the number of engaged complexes $N_{engaged}$:\n$$L = \\frac{F}{N_{engaged}}$$\nBy substituting our expression for $N_{engaged}$, we arrive at the final expression for the per-complex load in terms of the given parameters:\n$$L = \\frac{F}{f \\times m \\times n}$$\nAs requested, we comment on the role of $f$. The per-complex load $L$ is inversely proportional to the fraction of engaged linkers $f$. The total number of Ndc80 complexes $N_{total} = m \\times n$ represents the static, structural composition of the interface. However, $f$, a dynamic parameter, dictates how many of these complexes are actively resisting force at a given moment. A smaller $f$ implies that the total load $F$ is concentrated onto fewer molecular supports, thereby increasing the stress $L$ on each one. This modulation of load concentration is a critical feature of such molecular systems, allowing for dynamic regulation of mechanical stability.\n\nPart 3: Numerical evaluation of $L$.\nWe are provided with the following values:\n- $m = 18$\n- $n = 13$\n- $f = 0.7$\n- $F = 72\\,\\mathrm{pN}$\n\nWe substitute these numerical values into our derived expression for $L$:\n$$L = \\frac{72}{0.7 \\times 18 \\times 13}$$\nFirst, we compute the product in the denominator, which is the number of engaged complexes, $N_{engaged}$:\n$$N_{engaged} = 0.7 \\times 18 \\times 13 = 163.8$$\nNow, we can calculate the load $L$:\n$$L = \\frac{72}{163.8} \\approx 0.43956043956\\,\\mathrm{pN}$$\nThe problem demands the answer be rounded to four significant figures.\n$$L \\approx 0.4396\\,\\mathrm{pN}$$\nThis is the calculated load per engaged Ndc80 complex under the specified conditions.", "answer": "$$\n\\boxed{0.4396}\n$$", "id": "2798912"}, {"introduction": "While the kinetochore provides the attachment point, the region between sister kinetochores, the centromere, acts like a spring resisting the constant pull of the spindle. This practice [@problem_id:2798922] employs a Hookean spring model to dissect the mechanical contributions of chromatin and the cohesin rings that hold sister chromatids together. By calculating how the inter-kinetochore distance changes upon cohesin loss, you will develop an intuitive and quantitative grasp of how these components cooperatively ensure chromosomal integrity.", "problem": "A pair of sister kinetochores on a replicated chromosome are attached to opposite spindle poles during metaphase. The region between the kinetochores consists of pericentromeric chromatin and pericentromeric cohesin, which together resist spindle pulling. In the linear regime relevant for small extensions around metaphase, approximate each half of the centromere (from the midpoint to one kinetochore) as an elastic element subject to Hookeâ€™s law. Model each half as two elastic contributions acting in parallel: (i) chromatin with stiffness $k_{\\mathrm{chrom}}$, and (ii) $N$ identical cohesin linkers, each with stiffness $k_{0}$, that crosslink pericentromeric chromatin and act as parallel springs. Assume the spindle exerts a constant poleward force $F$ on each kinetochore, the two halves are symmetric, and microtubule and kinetochore body compliances are negligible compared to the pericentromeric region.\n\nBefore cohesin loss, let the number of load-bearing cohesin linkers be $N_{i}$; after cohesin loss, let it be $N_{f}$. The interkinetochore rest distance (with no tension) is $d_{0}$, and the interkinetochore distance under load increases by the sum of the extensions of the two symmetric halves. Use the following values: $F = 10\\,\\mathrm{pN}$, $k_{\\mathrm{chrom}} = 0.10\\,\\mathrm{pN\\,nm^{-1}}$, $k_{0} = 0.020\\,\\mathrm{pN\\,nm^{-1}}$, $N_{i} = 100$, and $N_{f} = 20$. Compute the increase in interkinetochore distance caused specifically by cohesin loss under the same constant spindle force, i.e., the difference between the interkinetochore distance after cohesin loss and before cohesin loss. Express your final result in nanometers and round your answer to three significant figures.", "solution": "The problem as stated is scientifically grounded, well-posed, and objective. It provides a standard biophysical model of chromosome mechanics based on Hooke's law and the principles of parallel elastic elements. All necessary parameters are provided, the terminology is precise, and the objective is clearly defined. The problem is therefore valid for solution.\n\nThe problem requires us to determine the increase in interkinetochore distance upon the loss of a subset of cohesin linkers. The system is modeled as a pair of symmetric elastic elements, representing the two halves of the pericentromeric region, each subjected to a pulling force $F$ from the spindle pole. The total interkinetochore distance $d$ is the sum of the rest distance $d_0$ and the extensions of these two halves.\n\nEach half-centromere is described as an elastic system composed of two components acting in parallel: the chromatin, with stiffness $k_{\\mathrm{chrom}}$, and a set of $N$ cohesin linkers. The cohesin linkers themselves are modeled as $N$ parallel springs, each with stiffness $k_0$. The total stiffness of the $N$ cohesin linkers acting in parallel is the sum of their individual stiffnesses:\n$$ k_{\\mathrm{coh}} = N k_0 $$\n\nSince the chromatin component and the cohesin complex act in parallel, the total effective stiffness, $k_{\\mathrm{eff}}$, of one half-centromere is the sum of their respective stiffnesses:\n$$ k_{\\mathrm{eff}} = k_{\\mathrm{chrom}} + k_{\\mathrm{coh}} = k_{\\mathrm{chrom}} + N k_0 $$\n\nAccording to Hooke's law, the extension $\\Delta x$ of one half-centromere under the force $F$ is given by:\n$$ F = k_{\\mathrm{eff}} \\Delta x $$\nThus, the extension is:\n$$ \\Delta x = \\frac{F}{k_{\\mathrm{eff}}} = \\frac{F}{k_{\\mathrm{chrom}} + N k_0} $$\n\nThe total interkinetochore distance, $d$, is the rest distance $d_0$ plus the extensions of both symmetric halves:\n$$ d = d_0 + 2 \\Delta x = d_0 + \\frac{2F}{k_{\\mathrm{chrom}} + N k_0} $$\n\nWe are asked to compute the change in interkinetochore distance, $\\Delta d$, when the number of cohesin linkers decreases from an initial number $N_i$ to a final number $N_f$.\n\nThe initial distance, $d_i$, with $N_i = 100$ cohesins is:\n$$ d_i = d_0 + \\frac{2F}{k_{\\mathrm{chrom}} + N_i k_0} $$\n\nThe final distance, $d_f$, with $N_f = 20$ cohesins is:\n$$ d_f = d_0 + \\frac{2F}{k_{\\mathrm{chrom}} + N_f k_0} $$\n\nThe increase in distance is $\\Delta d = d_f - d_i$. Substituting the expressions for $d_f$ and $d_i$:\n$$ \\Delta d = \\left( d_0 + \\frac{2F}{k_{\\mathrm{chrom}} + N_f k_0} \\right) - \\left( d_0 + \\frac{2F}{k_{\\mathrm{chrom}} + N_i k_0} \\right) $$\nThe rest distance $d_0$ cancels, yielding:\n$$ \\Delta d = \\frac{2F}{k_{\\mathrm{chrom}} + N_f k_0} - \\frac{2F}{k_{\\mathrm{chrom}} + N_i k_0} = 2F \\left( \\frac{1}{k_{\\mathrm{chrom}} + N_f k_0} - \\frac{1}{k_{\\mathrm{chrom}} + N_i k_0} \\right) $$\n\nNow, we substitute the provided numerical values:\n$F = 10\\,\\mathrm{pN}$\n$k_{\\mathrm{chrom}} = 0.10\\,\\mathrm{pN\\,nm^{-1}}$\n$k_0 = 0.020\\,\\mathrm{pN\\,nm^{-1}}$\n$N_i = 100$\n$N_f = 20$\n\nFirst, let us calculate the initial and final effective stiffnesses for one half-centromere.\nInitial effective stiffness, $k_{\\mathrm{eff},i}$:\n$$ k_{\\mathrm{eff},i} = k_{\\mathrm{chrom}} + N_i k_0 = 0.10\\,\\mathrm{pN\\,nm^{-1}} + (100)(0.020\\,\\mathrm{pN\\,nm^{-1}}) = 0.10 + 2.0 = 2.10\\,\\mathrm{pN\\,nm^{-1}} $$\nFinal effective stiffness, $k_{\\mathrm{eff},f}$:\n$$ k_{\\mathrm{eff},f} = k_{\\mathrm{chrom}} + N_f k_0 = 0.10\\,\\mathrm{pN\\,nm^{-1}} + (20)(0.020\\,\\mathrm{pN\\,nm^{-1}}) = 0.10 + 0.40 = 0.50\\,\\mathrm{pN\\,nm^{-1}} $$\n\nNow we can compute the total extension before and after cohesin loss. Let $\\Delta d_{ext, i}$ and $\\Delta d_{ext, f}$ be the total extensions from the rest distance.\nInitial total extension:\n$$ \\Delta d_{ext, i} = d_i - d_0 = \\frac{2F}{k_{\\mathrm{eff},i}} = \\frac{2 \\times 10\\,\\mathrm{pN}}{2.10\\,\\mathrm{pN\\,nm^{-1}}} = \\frac{20}{2.10}\\,\\mathrm{nm} \\approx 9.5238\\,\\mathrm{nm} $$\nFinal total extension:\n$$ \\Delta d_{ext, f} = d_f - d_0 = \\frac{2F}{k_{\\mathrm{eff},f}} = \\frac{2 \\times 10\\,\\mathrm{pN}}{0.50\\,\\mathrm{pN\\,nm^{-1}}} = \\frac{20}{0.50}\\,\\mathrm{nm} = 40\\,\\mathrm{nm} $$\n\nThe increase in interkinetochore distance is the difference between these extensions:\n$$ \\Delta d = \\Delta d_{ext, f} - \\Delta d_{ext, i} = 40\\,\\mathrm{nm} - \\frac{20}{2.10}\\,\\mathrm{nm} = 40 - 9.5238... = 30.47619...\\,\\mathrm{nm} $$\n\nThe problem requires the answer to be rounded to three significant figures.\n$$ \\Delta d \\approx 30.5\\,\\mathrm{nm} $$", "answer": "$$\n\\boxed{30.5}\n$$", "id": "2798922"}, {"introduction": "Biological structures rarely behave as perfect springs; they exist in a viscous cellular environment. This practice [@problem_id:2798931] advances our model to include both elastic and viscous effects, providing a more realistic description of chromosome mechanics. In this hands-on computational task, you will act as a quantitative biologist, deriving the equation for viscoelastic relaxation and fitting this model to simulated experimental data from a laser ablation experiment to extract fundamental physical parameters, bridging the gap between theoretical models and data-driven discovery.", "problem": "You are given a scenario motivated by the mechanics of centromere recoil after laser ablation of kinetochore microtubules. After ablation, the inter-kinetochore distance relaxes toward a new equilibrium as the elastic compliance of the centromeric chromatin (modeled as a linear spring) recoils against viscous drag in the nucleoplasm. Assume the following fundamental base, which is widely used to describe cellular-scale viscoelastic relaxation: in the overdamped regime where inertia is negligible, the force balance along the one-dimensional axis of recoil for time $t \\gt 0$ is $ \\gamma \\, \\frac{dx}{dt} + k \\, (x - x_{\\infty}) = 0 $, where $x(t)$ is the inter-kinetochore distance, $x_{\\infty}$ is the long-time equilibrium distance, $k$ is the effective elastic stiffness (in picoNewtons per micrometer), and $\\gamma$ is the effective viscous damping coefficient (in picoNewtonsÂ·second per micrometer). At $t = 0^{+}$ immediately after ablation, the external pulling force transmitted by the severed microtubules drops, such that the initial displacement relative to the new equilibrium, $A = x(0) - x_{\\infty}$, is related to the pre-ablation external force $F_{0}$ through the linear relation $A = F_{0}/k$.\n\nYour tasks are:\n- From the stated force balance, derive the functional form of $x(t)$ for $t \\ge 0$ in terms of $x_{\\infty}$, $A$, and the relaxation time $\\tau$. Use this to define a model to be fitted to data. Your derivation must start from the differential equation $ \\gamma \\, \\frac{dx}{dt} + k \\, (x - x_{\\infty}) = 0 $ and the assumption of a constant $k$ and $\\gamma$ over the time course.\n- Given time-resolved inter-kinetochore distances for several conditions and the known $F_{0}$ for each condition, estimate $k$ and $\\gamma$ for each condition by fitting the model to the data via nonlinear least squares. Report $k$ in picoNewtons per micrometer and $\\gamma$ in picoNewtonsÂ·second per micrometer. Round each reported $k$ and $\\gamma$ to $3$ decimals.\n- Compare conditions by returning the zero-based index of the condition with the largest estimated $k$, and the zero-based index with the largest estimated $\\gamma$.\n\nUnits and numerical requirements:\n- Time must be in seconds.\n- Distance must be in micrometers.\n- Force must be in picoNewtons.\n- Report $k$ in picoNewtons per micrometer and $\\gamma$ in picoNewtonsÂ·second per micrometer, rounded to $3$ decimals.\n- Angles are not used.\n- Percentages must not be used; any fractional quantities must be decimals.\n\nTest suite and data to be used by your program:\n- Time points (common to all conditions): $t = [\\, 0.0, \\, 0.1, \\, 0.2, \\, 0.35, \\, 0.5, \\, 0.7, \\, 1.0 \\,]$ seconds.\n- Condition $0$ (general case):\n    - Observed distances (micrometers): $[\\, 1.700000000, \\, 1.576959198, \\, 1.514363832, \\, 1.449132183, \\, 1.426625500, \\, 1.407059215, \\, 1.403021384 \\,]$.\n    - Pre-ablation force $F_{0} = 6.0$ picoNewtons.\n- Condition $1$ (stiffer, faster relaxation):\n    - Observed distances (micrometers): $[\\, 1.600000000, \\, 1.461649552, \\, 1.395218901, \\, 1.367548000, \\, 1.350877000, \\, 1.352732500, \\, 1.348060100 \\,]$.\n    - Pre-ablation force $F_{0} = 7.5$ picoNewtons.\n- Condition $2$ (softer, slower relaxation, larger recoil amplitude):\n    - Observed distances (micrometers): $[\\, 2.000000000, \\, 1.869738650, \\, 1.787359060, \\, 1.679939720, \\, 1.622825520, \\, 1.564667640, \\, 1.530500000 \\,]$.\n    - Pre-ablation force $F_{0} = 6.0$ picoNewtons.\n- Condition $3$ (small amplitude edge case):\n    - Observed distances (micrometers): $[\\, 1.500000000, \\, 1.484516000, \\, 1.471466000, \\, 1.463329850, \\, 1.455766760, \\, 1.453040500, \\, 1.450915780 \\,]$.\n    - Pre-ablation force $F_{0} = 1.2$ picoNewtons.\n\nComputational specification:\n- Fit the model defined from first principles above to each conditionâ€™s time series to estimate the parameters needed to compute $k$ and $\\gamma$.\n- Use the identifiability relation $A = F_{0}/k$ together with the fitted amplitude to compute $k$, and the relation $\\tau = \\gamma / k$ to compute $\\gamma$ from the fitted relaxation time $\\tau$.\n- Your program should output a single line containing a Python-like list with two elements:\n    - First element: a list of length $4$ whose $j$-th entry is a two-element list $[\\, \\hat{k}_{j}, \\, \\hat{\\gamma}_{j} \\,]$ with $\\hat{k}_{j}$ and $\\hat{\\gamma}_{j}$ rounded to $3$ decimals for condition $j$.\n    - Second element: a two-element list $[\\, i_{k,\\max}, \\, i_{\\gamma,\\max} \\,]$ giving the zero-based indices of the conditions with the largest $\\hat{k}$ and largest $\\hat{\\gamma}$, respectively.\n- For example, the output format must look like $[\\,[\\,[k_{0},\\gamma_{0}],\\,[k_{1},\\gamma_{1}],\\,[k_{2},\\gamma_{2}],\\,[k_{3},\\gamma_{3}]\\,],\\,[i_{k,\\max},i_{\\gamma,\\max}]\\,]$ on a single line with no extra text.\n\nScientific realism constraints:\n- The modeling assumptions must remain within the overdamped, linear viscoelastic regime.\n- The solution must justify the model form from the provided force balance and definitions, not by invoking an unmotivated fitting formula.", "solution": "The problem as stated is scientifically sound, well-posed, and contains all necessary information for a unique solution. It describes a classical viscoelastic relaxation process in an overdamped system, which is a standard and appropriate model for the described biophysical scenario. We shall proceed with the derivation and subsequent computation.\n\nFirst, we must derive the functional form for the inter-kinetochore distance, $x(t)$, from the provided force balance equation. The governing ordinary differential equation (ODE) for $t > 0$ is:\n$$ \\gamma \\, \\frac{dx}{dt} + k \\, (x - x_{\\infty}) = 0 $$\nHere, $x(t)$ is the distance, $t$ is time, $\\gamma$ is the viscous damping coefficient, $k$ is the elastic stiffness, and $x_{\\infty}$ is the final equilibrium distance. Both $\\gamma$ and $k$ are assumed to be constant.\n\nTo solve this first-order linear ODE, we introduce a change of variable. Let $y(t) = x(t) - x_{\\infty}$. This variable represents the displacement from the final equilibrium. Its time derivative is $\\frac{dy}{dt} = \\frac{dx}{dt}$. Substituting these into the governing equation gives:\n$$ \\gamma \\, \\frac{dy}{dt} + k \\, y(t) = 0 $$\nThis is a standard homogeneous ODE with constant coefficients. We can rearrange it for separation of variables:\n$$ \\frac{dy}{dt} = - \\left(\\frac{k}{\\gamma}\\right) y(t) $$\nThe quantity $k/\\gamma$ has units of inverse time. We define the characteristic relaxation time, $\\tau$, as $\\tau = \\gamma/k$. The equation becomes:\n$$ \\frac{dy}{dt} = -\\frac{1}{\\tau} y(t) $$\nThe solution to this equation is an exponential decay function:\n$$ y(t) = y(0) \\, e^{-t/\\tau} $$\nwhere $y(0)$ is the initial displacement at $t=0$. We now substitute back in terms of $x(t)$. The initial displacement is $y(0) = x(0) - x_{\\infty}$. The problem statement defines this initial recoil amplitude as $A = x(0) - x_{\\infty}$. Therefore, the solution for the displacement is:\n$$ x(t) - x_{\\infty} = A \\, e^{-t/\\tau} $$\nSolving for $x(t)$, we obtain the final functional form of the model to be used for data fitting:\n$$ x(t) = x_{\\infty} + A \\, e^{-t/\\tau} $$\nThis model has three parameters to be determined from experimental data: the final equilibrium distance $x_{\\infty}$, the initial recoil amplitude $A$, and the relaxation time $\\tau$.\n\nThe second task is to estimate the physical parameters $k$ and $\\gamma$ for each of the $4$ experimental conditions. For each condition, we are given time points $t_i$ and corresponding observed distances $x_{\\text{obs},i}$. We will fit the derived model $x(t)$ to this data using the method of nonlinear least squares. This involves finding the set of parameters $(\\hat{x}_{\\infty}, \\hat{A}, \\hat{\\tau})$ that minimizes the sum of squared residuals, $S$:\n$$ S(x_{\\infty}, A, \\tau) = \\sum_{i} (x_{\\text{obs},i} - (x_{\\infty} + A e^{-t_i/\\tau}))^2 $$\nThis optimization will be performed using the `scipy.optimize.curve_fit` function.\n\nOnce the best-fit parameters $\\hat{A}$ and $\\hat{\\tau}$ are determined for a given condition, we use the provided physical relations to calculate $\\hat{k}$ and $\\hat{\\gamma}$. The initial amplitude $A$ is related to the pre-ablation force $F_0$ and stiffness $k$ by $A = F_0/k$. Thus, the stiffness is estimated as:\n$$ \\hat{k} = \\frac{F_0}{\\hat{A}} $$\nThe relaxation time $\\tau$ is defined as $\\tau = \\gamma/k$. Therefore, the viscous damping coefficient is estimated as:\n$$ \\hat{\\gamma} = \\hat{\\tau} \\hat{k} $$\nThese calculations will be performed for each of the $4$ conditions. The resulting values for $\\hat{k}$ and $\\hat{\\gamma}$ will be rounded to $3$ decimal places as required.\n\nFinally, the estimated stiffness values $\\{\\hat{k}_0, \\hat{k}_1, \\hat{k}_2, \\hat{k}_3\\}$ and damping coefficients $\\{\\hat{\\gamma}_0, \\hat{\\gamma}_1, \\hat{\\gamma}_2, \\hat{\\gamma}_3\\}$ will be compared to find the indices of the conditions with the maximum stiffness, $i_{k,\\max}$, and maximum damping, $i_{\\gamma,\\max}$. The complete results will be presented in the specified format.", "answer": "```python\nimport numpy as np\nfrom scipy.optimize import curve_fit\n\ndef solve():\n    \"\"\"\n    Solves the centromere recoil problem by fitting a derived viscoelastic model\n    to experimental data to estimate stiffness (k) and damping (gamma).\n    \"\"\"\n\n    # Define the model function derived from the force balance equation.\n    # x(t) = x_inf + A * exp(-t / tau)\n    def recoil_model(t, x_inf, A, tau):\n        \"\"\"\n        Calculates the inter-kinetochore distance based on the exponential\n        relaxation model.\n        Args:\n            t (np.ndarray): Time points.\n            x_inf (float): Equilibrium distance at t -> infinity.\n            A (float): Initial recoil amplitude.\n            tau (float): Relaxation time constant.\n        Returns:\n            np.ndarray: Calculated distances.\n        \"\"\"\n        # A physically meaningful model requires tau > 0 for decay.\n        # Bounds in curve_fit handle this, but as a safeguard:\n        if tau <= 0:\n            return np.full_like(t, np.inf)\n        return x_inf + A * np.exp(-t / tau)\n\n    # Time points common to all conditions (in seconds).\n    time_points = np.array([0.0, 0.1, 0.2, 0.35, 0.5, 0.7, 1.0])\n\n    # Data for each experimental condition.\n    conditions = [\n        {\n            \"distances\": np.array([1.700000000, 1.576959198, 1.514363832, 1.449132183, 1.426625500, 1.407059215, 1.403021384]),\n            \"F0\": 6.0\n        },\n        {\n            \"distances\": np.array([1.600000000, 1.461649552, 1.395218901, 1.367548000, 1.350877000, 1.352732500, 1.348060100]),\n            \"F0\": 7.5\n        },\n        {\n            \"distances\": np.array([2.000000000, 1.869738650, 1.787359060, 1.679939720, 1.622825520, 1.564667640, 1.530500000]),\n            \"F0\": 6.0\n        },\n        {\n            \"distances\": np.array([1.500000000, 1.484516000, 1.471466000, 1.463329850, 1.455766760, 1.453040500, 1.450915780]),\n            \"F0\": 1.2\n        }\n    ]\n\n    estimated_params = []\n\n    for i, cond in enumerate(conditions):\n        x_data = cond[\"distances\"]\n        F0 = cond[\"F0\"]\n\n        # Provide reasonable initial guesses (p0) for the optimizer.\n        x_inf_guess = x_data[-1]  # Equilibrium is likely near the last data point.\n        A_guess = x_data[0] - x_inf_guess  # A = x(0) - x_inf.\n        tau_guess = 0.3  # A typical timescale based on the data range.\n        p0 = [x_inf_guess, A_guess, tau_guess]\n        \n        # Set bounds for parameters to ensure physical meaning (A>=0, tau>0).\n        # A small lower bound on tau avoids division by zero.\n        bounds = ([-np.inf, 0, 1e-9], [np.inf, np.inf, np.inf])\n\n        # Perform nonlinear least squares fitting.\n        popt, _ = curve_fit(recoil_model, time_points, x_data, p0=p0, bounds=bounds)\n        \n        x_inf_hat, A_hat, tau_hat = popt\n        \n        # Calculate k and gamma from the fitted parameters.\n        # k = F0 / A\n        k_hat = F0 / A_hat\n        \n        # gamma = tau * k\n        gamma_hat = tau_hat * k_hat\n        \n        # Round to 3 decimal places as required.\n        k_rounded = round(k_hat, 3)\n        gamma_rounded = round(gamma_hat, 3)\n        \n        estimated_params.append([k_rounded, gamma_rounded])\n\n    # Find the zero-based indices of the conditions with the largest k and gamma.\n    k_values = [p[0] for p in estimated_params]\n    gamma_values = [p[1] for p in estimated_params]\n    \n    ik_max = int(np.argmax(k_values))\n    ig_max = int(np.argmax(gamma_values))\n    \n    # Construct the final output string exactly as specified, without extra spaces.\n    params_str = \",\".join([f\"[{k},{g}]\" for k, g in estimated_params])\n    indices_str = f\"[{ik_max},{ig_max}]\"\n    \n    print(f\"[[{params_str}],{indices_str}]\")\n\nsolve()\n```", "id": "2798931"}]}