{"hands_on_practices": [{"introduction": "A cornerstone of population genetics is the Hardy-Weinberg Equilibrium (HWE) principle, which provides a null model for allele and genotype frequencies in an idealized population. Testing for deviations from HWE is often the first step in analyzing molecular marker data, as significant deviations can signal the action of evolutionary forces like selection, non-random mating, or population structuring, as well as potential technical artifacts in genotyping. This practice will guide you through the fundamental process of performing a chi-square goodness-of-fit test to assess whether a population's observed genotype counts at a SNP locus conform to HWE expectations [@problem_id:2831149].", "problem": "A biallelic Single Nucleotide Polymorphism (SNP) marker is genotyped in a randomly sampled population of size $N=200$. The observed genotype counts are: $AA=92$, $Aa=96$, and $aa=12$. Using the Hardy–Weinberg principle as the null model (random mating, no selection, no migration, no mutation, and large population size), derive the allele frequencies from the observed data, compute the expected genotype counts under Hardy–Weinberg equilibrium, and then calculate the chi-square statistic testing Hardy–Weinberg equilibrium. Assume the usual degrees of freedom for a bi-allelic marker where allele frequencies are estimated from the sample. Round your chi-square statistic to $4$ significant figures. Express your final answer as a pure number without units. In one sentence, comment on whether a technical factor such as a null allele or a biological factor such as selection would be consistent with the direction of any deviation observed, but do not include this commentary in your final numeric answer.", "solution": "The problem is well-defined and grounded in the fundamental principles of population genetics. It requires the application of the Hardy–Weinberg principle and a chi-square goodness-of-fit test. The problem is valid, and a solution will be derived.\n\nFirst, we must validate the provided data. The total sample size is given as $N=200$. The observed genotype counts are $n_{AA}=92$, $n_{Aa}=96$, and $n_{aa}=12$. The sum of these counts must equal the total sample size: $92 + 96 + 12 = 200$. The data is internally consistent.\n\nThe first step is to calculate the frequencies of the two alleles, $A$ and $a$, from the observed genotype counts. Let $p$ be the frequency of allele $A$ and $q$ be the frequency of allele $a$. The total number of alleles in the sample is $2N$, which is $2 \\times 200 = 400$.\n\nThe frequency of allele $A$, denoted $p$, is calculated as:\n$$p = \\frac{2 \\times (\\text{count of } AA) + 1 \\times (\\text{count of } Aa)}{2N}$$\nSubstituting the observed counts:\n$$p = \\frac{2 \\times 92 + 96}{2 \\times 200} = \\frac{184 + 96}{400} = \\frac{280}{400} = 0.7$$\n\nThe frequency of allele $a$, denoted $q$, is calculated similarly:\n$$q = \\frac{2 \\times (\\text{count of } aa) + 1 \\times (\\text{count of } Aa)}{2N}$$\nSubstituting the observed counts:\n$$q = \\frac{2 \\times 12 + 96}{2 \\times 200} = \\frac{24 + 96}{400} = \\frac{120}{400} = 0.3$$\nAs a necessary check, the sum of allele frequencies must be unity: $p + q = 0.7 + 0.3 = 1.0$. The calculation is correct.\n\nNext, under the null hypothesis of Hardy–Weinberg equilibrium (HWE), the expected genotype frequencies are given by $p^2$ for $AA$, $2pq$ for $Aa$, and $q^2$ for $aa$. We use the estimated allele frequencies ($p=0.7$ and $q=0.3$) to calculate the expected counts for a sample of size $N=200$.\n\nThe expected count of genotype $AA$, $E_{AA}$, is:\n$$E_{AA} = N \\times p^2 = 200 \\times (0.7)^2 = 200 \\times 0.49 = 98$$\n\nThe expected count of genotype $Aa$, $E_{Aa}$, is:\n$$E_{Aa} = N \\times 2pq = 200 \\times 2 \\times 0.7 \\times 0.3 = 200 \\times 0.42 = 84$$\n\nThe expected count of genotype $aa$, $E_{aa}$, is:\n$$E_{aa} = N \\times q^2 = 200 \\times (0.3)^2 = 200 \\times 0.09 = 18$$\nAs a check, the sum of expected counts must equal the total sample size: $E_{AA} + E_{Aa} + E_{aa} = 98 + 84 + 18 = 200$. This is correct.\n\nNow, we calculate the chi-square ($\\chi^2$) statistic to test for goodness-of-fit between the observed ($O$) and expected ($E$) counts. The formula is:\n$$\\chi^2 = \\sum \\frac{(O - E)^2}{E}$$\nApplying this formula to our data:\n$$\\chi^2 = \\frac{(O_{AA} - E_{AA})^2}{E_{AA}} + \\frac{(O_{Aa} - E_{Aa})^2}{E_{Aa}} + \\frac{(O_{aa} - E_{aa})^2}{E_{aa}}$$\nSubstituting the observed ($O_{AA}=92$, $O_{Aa}=96$, $O_{aa}=12$) and expected ($E_{AA}=98$, $E_{Aa}=84$, $E_{aa}=18$) counts:\n$$\\chi^2 = \\frac{(92 - 98)^2}{98} + \\frac{(96 - 84)^2}{84} + \\frac{(12 - 18)^2}{18}$$\n$$\\chi^2 = \\frac{(-6)^2}{98} + \\frac{(12)^2}{84} + \\frac{(-6)^2}{18}$$\n$$\\chi^2 = \\frac{36}{98} + \\frac{144}{84} + \\frac{36}{18}$$\nPerforming the division:\n$$\\chi^2 \\approx 0.3673469... + 1.7142857... + 2.0$$\n$$\\chi^2 \\approx 4.0816326...$$\nThe problem requires the result to be rounded to $4$ significant figures.\n$$\\chi^2 \\approx 4.082$$\nThe degrees of freedom ($df$) for this test are calculated as the number of genotype classes minus $1$, minus the number of independent allele frequencies estimated from the data. For a bi-allelic locus, there are $3$ genotype classes. We estimated one independent parameter ($p$, since $q=1-p$), so the degrees of freedom are $df = 3 - 1 - 1 = 1$.\n\nFinally, we comment on the deviation. The observed count of heterozygotes ($96$) is greater than expected ($84$), while the observed counts of both homozygote classes ($92$ and $12$) are less than expected ($98$ and $18$, respectively). The observed excess of heterozygotes and deficit of homozygotes is consistent with a biological factor such as balancing selection (heterozygote advantage), and inconsistent with a technical artifact like a null allele which would typically cause an apparent heterozygote deficit.", "answer": "$$\n\\boxed{4.082}\n$$", "id": "2831149"}, {"introduction": "Beyond analyzing a single marker, a key task in genetics is to select the most suitable markers for a specific purpose, such as parentage analysis or population mapping. The \"informativeness\" of a marker is directly related to its level of genetic diversity within a population. This practice builds upon the concept of allele frequencies to introduce expected heterozygosity ($H_E$), a crucial measure of genetic diversity, and explores how it predicts a marker's power to resolve genetic relationships [@problem_id:2831128]. By comparing a bi-allelic SNP to a multi-allelic microsatellite, you will develop an intuition for how allele number and frequency distribution contribute to a marker's practical utility.", "problem": "A wildlife genetics lab is evaluating two co-dominant markers for single-locus parentage assignment in a large, randomly mating, panmictic population at Hardy–Weinberg equilibrium, neglecting genotyping error and mutation. Marker 1 is a single-nucleotide polymorphism (SNP) with two alleles whose population frequencies are $0.5$ and $0.5$. Marker 2 is a tri-allelic microsatellite with three alleles whose population frequencies are $(0.5, 0.25, 0.25)$. The lab adopts expected heterozygosity as the population-level measure of single-locus informativeness, defined as the probability that two alleles drawn at random (with replacement) from the gene pool are different.\n\nStarting only from the definition of expected heterozygosity as a probability over allele draws and the Hardy–Weinberg assumption that alleles sampled from the gene pool are independent, derive the general expression for expected heterozygosity at a $k$-allele locus in terms of the allele frequencies, and then evaluate it for both markers. Based on first principles, explain which of the two markers is expected to be more informative for excluding an unrelated candidate parent when the true other parent’s genotype is known.\n\nReport as your final answer the numerical difference $\\Delta H_E = H_E^{(\\text{tri-allelic})} - H_E^{(\\text{bi-allelic})}$ as a single reduced fraction. Do not include any units and do not round.", "solution": "The problem will first be validated for scientific soundness and logical consistency.\n\nStep 1: Extract Givens.\n- A large, randomly mating, panmictic population at Hardy–Weinberg equilibrium.\n- Genotyping error and mutation are neglected.\n- The markers are co-dominant and used for single-locus parentage assignment.\n- Marker 1 is a single-nucleotide polymorphism (SNP) with two alleles.\n- The two allele frequencies for Marker 1 are $0.5$ and $0.5$.\n- Marker 2 is a tri-allelic microsatellite with three alleles.\n- The three allele frequencies for Marker 2 are $0.5$, $0.25$, and $0.25$.\n- Expected heterozygosity, $H_E$, is defined as \"the probability that two alleles drawn at random (with replacement) from the gene pool are different\".\n- The Hardy–Weinberg assumption implies that alleles sampled from the gene pool are independent.\n- The tasks are: (1) derive the general expression for $H_E$ at a $k$-allele locus, (2) evaluate $H_E$ for both markers, (3) explain which marker is more informative for parentage exclusion, and (4) report the numerical difference $\\Delta H_E = H_E^{(\\text{tri-allelic})} - H_E^{(\\text{bi-allelic})}$.\n\nStep 2: Validate Using Extracted Givens.\nThe problem is scientifically grounded, rooted in the fundamental principles of population genetics, specifically the Hardy–Weinberg principle and the concept of heterozygosity as a measure of genetic diversity. The given definitions and data are clear, consistent, and sufficient to perform the required derivations and calculations. The scenario is a standard theoretical exercise in the application of molecular markers. The problem is well-posed and objective, containing no scientific inaccuracies, ambiguities, or logical contradictions.\n\nStep 3: Verdict and Action.\nThe problem is valid. A complete solution will be provided.\n\nThe derivation and solution proceed as follows.\n\nFirst, the general expression for expected heterozygosity ($H_E$) at a locus with $k$ alleles is derived. Let the alleles be $A_1, A_2, \\dots, A_k$, with corresponding population frequencies $p_1, p_2, \\dots, p_k$, such that $\\sum_{i=1}^{k} p_i = 1$.\n\nThe problem defines $H_E$ as the probability that two alleles drawn at random, with replacement, from the gene pool are different. It is more direct to first calculate the complementary probability: that two randomly drawn alleles are identical. This event is the union of the mutually exclusive events of drawing two $A_1$ alleles, or two $A_2$ alleles, and so on, up to two $A_k$ alleles.\n\nGiven the assumption of independent sampling from the gene pool, the probability of drawing allele $A_i$ is $p_i$. Therefore, the probability of drawing two copies of allele $A_i$ is $p_i \\times p_i = p_i^2$.\n\nThe total probability of drawing two identical alleles, which we can denote as $G$ (for expected homozygosity or gene identity), is the sum of these probabilities over all alleles:\n$$G = \\sum_{i=1}^{k} p_i^2$$\n\nSince the events \"the two alleles are different\" and \"the two alleles are identical\" are complementary, their probabilities must sum to $1$.\n$$H_E + G = 1$$\n\nThus, the general expression for expected heterozygosity is:\n$$H_E = 1 - G = 1 - \\sum_{i=1}^{k} p_i^2$$\nThis completes the first part of the problem.\n\nNext, this expression is evaluated for each of the two markers.\n\nFor Marker 1 (SNP, bi-allelic):\nThe number of alleles is $k=2$. The frequencies are $p_1 = 0.5 = \\frac{1}{2}$ and $p_2 = 0.5 = \\frac{1}{2}$.\nThe expected heterozygosity, $H_E^{(\\text{bi-allelic})}$, is:\n$$H_E^{(\\text{bi-allelic})} = 1 - \\left( p_1^2 + p_2^2 \\right) = 1 - \\left( \\left(\\frac{1}{2}\\right)^2 + \\left(\\frac{1}{2}\\right)^2 \\right)$$\n$$H_E^{(\\text{bi-allelic})} = 1 - \\left( \\frac{1}{4} + \\frac{1}{4} \\right) = 1 - \\frac{2}{4} = 1 - \\frac{1}{2} = \\frac{1}{2}$$\n\nFor Marker 2 (Microsatellite, tri-allelic):\nThe number of alleles is $k=3$. The frequencies are $p_1 = 0.5 = \\frac{1}{2}$, $p_2 = 0.25 = \\frac{1}{4}$, and $p_3 = 0.25 = \\frac{1}{4}$.\nThe expected heterozygosity, $H_E^{(\\text{tri-allelic})}$, is:\n$$H_E^{(\\text{tri-allelic})} = 1 - \\left( p_1^2 + p_2^2 + p_3^2 \\right) = 1 - \\left( \\left(\\frac{1}{2}\\right)^2 + \\left(\\frac{1}{4}\\right)^2 + \\left(\\frac{1}{4}\\right)^2 \\right)$$\n$$H_E^{(\\text{tri-allelic})} = 1 - \\left( \\frac{1}{4} + \\frac{1}{16} + \\frac{1}{16} \\right) = 1 - \\left( \\frac{4}{16} + \\frac{1}{16} + \\frac{1}{16} \\right) = 1 - \\frac{6}{16} = 1 - \\frac{3}{8} = \\frac{5}{8}$$\nThis completes the second part of the problem.\n\nThird, an explanation is required for which marker is more informative for parentage exclusion. The informativeness of a genetic marker for parentage analysis is its power to exclude an individual who is not the true parent. For a given mother-offspring pair, the offspring must have inherited one allele from its biological father. This allele is known as the \"obligatory paternal allele\". A candidate male is excluded as the father if his genotype does not contain this obligatory allele.\n\nThe ability to exclude a non-father depends on the genetic diversity at the locus. Expected heterozygosity, $H_E$, is a direct measure of this diversity. A higher $H_E$ implies a greater number of heterozygous individuals and typically a larger number of alleles at more even frequencies, leading to a greater number of possible genotypes in the population.\n\nMarker 2 ($k=3$, $H_E = \\frac{5}{8}$) has a greater number of alleles and a higher expected heterozygosity than Marker 1 ($k=2$, $H_E = \\frac{1}{2}$). The larger number of alleles and a more diverse distribution of genotypes for Marker 2 provide more opportunities for a mismatch between the obligatory paternal allele and the genotype of a randomly chosen unrelated male. The probability of excluding a non-father is higher when there is a greater chance that the non-father lacks the specific allele required for parentage. Therefore, Marker 2 is expected to be more informative for parentage exclusion.\n\nFinally, the numerical difference $\\Delta H_E = H_E^{(\\text{tri-allelic})} - H_E^{(\\text{bi-allelic})}$ is calculated.\n$$\\Delta H_E = \\frac{5}{8} - \\frac{1}{2} = \\frac{5}{8} - \\frac{4}{8} = \\frac{1}{8}$$\nThe result must be reported as a single reduced fraction.", "answer": "$$\\boxed{\\frac{1}{8}}$$", "id": "2831128"}, {"introduction": "Real-world genetic data are rarely perfect, and a common technical issue in microsatellite analysis is the presence of \"null alleles\" that fail to amplify during PCR. This phenomenon creates ambiguity, as a true homozygote ($AA$) becomes phenotypically indistinguishable from a heterozygote carrying the null allele ($AN$). This advanced practice challenges you to move beyond simple counts and apply a powerful statistical framework, the Expectation-Maximization (EM) algorithm, to resolve this ambiguity. By treating the true genotypes as \"missing data,\" you will learn how to derive and implement an algorithm that iteratively estimates the frequencies of the visible and null alleles from the observed, ambiguous data [@problem_id:2831184].", "problem": "Consider a codominant locus used in microsatellite genotyping where two visible alleles, denoted $A$ and $B$, segregate in a randomly mating diploid population and a third, unobservable amplification-failure (null) allele, denoted $N$, may be present. Let the population allele frequencies be $p_A$, $p_B$, and $\\nu$, respectively, with the constraint $p_A + p_B + \\nu = 1$ and $p_A, p_B, \\nu \\ge 0$. Assume Hardy–Weinberg Equilibrium (HWE) and independence of individuals. The unobservable true genotype classes and their expected HWE frequencies are:\n- $AA$ with frequency $p_A^2$,\n- $AB$ with frequency $2 p_A p_B$,\n- $BB$ with frequency $p_B^2$,\n- $AN$ with frequency $2 p_A \\nu$,\n- $BN$ with frequency $2 p_B \\nu$,\n- $NN$ with frequency $\\nu^2$.\n\nIn microsatellite assays, the null allele $N$ does not amplify. Thus, the observation model is: true $AA$ and $AN$ both appear as an apparent homozygote $AA$; true $AB$ appears as $AB$; true $BB$ and $BN$ both appear as an apparent homozygote $BB$; true $NN$ yields a non-amplified (missing) observation. Let the observed counts be $O_{AA}$ for apparent $AA$, $O_{AB}$ for $AB$, $O_{BB}$ for apparent $BB$, and $O_{\\varnothing}$ for missing, with total $n = O_{AA} + O_{AB} + O_{BB} + O_{\\varnothing}$.\n\nTasks:\n1) Starting only from the HWE assumption and the observation model above, write the complete-data log-likelihood in terms of the latent true genotype counts and the parameters $p_A$, $p_B$, and $\\nu$. Then, using a Lagrange multiplier to enforce $p_A + p_B + \\nu = 1$, derive the form of the maximum likelihood updates for $p_A$, $p_B$, and $\\nu$ when the latent genotype counts are replaced by their conditional expectations given the observed data under current parameter values.\n2) By first principles, construct the Expectation–Maximization (EM) algorithm that alternates:\n   - an E-step computing the expected allocation of $O_{AA}$ between true $AA$ and $AN$, and of $O_{BB}$ between true $BB$ and $BN$, and\n   - an M-step updating $p_A$, $p_B$, and $\\nu$ from the expected allele counts,\nuntil convergence. State clearly the E-step allocation formulas and the M-step update formulas. Convergence may be declared when the Euclidean norm of the change in the parameter vector drops below a small tolerance.\n3) Implement this EM algorithm as a program that, for each test case below, computes the maximum likelihood estimates $\\widehat{p}_A$, $\\widehat{p}_B$, and $\\widehat{\\nu}$, rounding each to $6$ decimal places. No physical units are involved. Express all final numeric outputs as decimals.\n\nTest suite (each test case is a quadruple $(O_{AA}, O_{AB}, O_{BB}, O_{\\varnothing})$):\n- Case $1$: $(300, 450, 247, 3)$.\n- Case $2$: $(40, 60, 40, 0)$.\n- Case $3$: $(225, 150, 105, 20)$.\n- Case $4$: $(8, 90, 900, 2)$.\n- Case $5$: $(4, 4, 2, 0)$.\n- Case $6$: $(0, 0, 0, 50)$.\n\nOutput specification:\n- Your program should produce a single line of output containing the results as a comma-separated JSON-like list of lists, where each inner list is $[\\widehat{p}_A, \\widehat{p}_B, \\widehat{\\nu}]$ for the corresponding test case, each value rounded to $6$ decimal places. For example, an output with two cases would look like $[[0.500000,0.450000,0.050000],[0.300000,0.600000,0.100000]]$.\n- The program must not read any input and must not print anything else.", "solution": "The problem as stated is scientifically grounded, well-posed, objective, and self-contained. It describes a standard scenario in population genetics involving the estimation of allele frequencies in the presence of a null allele, a classic application of the Expectation-Maximization (EM) algorithm. The problem is valid and a solution will be provided.\n\nThe objective is to find the maximum likelihood estimates (MLE) for the allele frequencies $p_A$, $p_B$, and the null allele frequency $\\nu$, given the observed phenotype counts $O_{AA}$, $O_{AB}$, $O_{BB}$, and $O_{\\varnothing}$. This is a problem of statistical inference with missing data, as the true genotypes for the apparent homozygotes ($AA$ and $BB$) are not observed directly. The EM algorithm is the appropriate methodology.\n\nThe derivation and algorithm construction proceed in three stages as requested.\n\nTask 1: Derivation of the Maximum Likelihood Update Form\nLet the complete data be the unobserved (latent) counts of the true genotypes: $N_{AA}$, $N_{AB}$, $N_{BB}$, $N_{AN}$, $N_{BN}$, and $N_{NN}$. The total sample size is $n = N_{AA} + N_{AB} + N_{BB} + N_{AN} + N_{BN} + N_{NN}$.\nUnder the assumption of Hardy-Weinberg Equilibrium (HWE), the probability of observing a specific set of true genotype counts follows a multinomial distribution. The complete-data log-likelihood function, $\\log L_c$, can be written in terms of the parameters $p_A, p_B, \\nu$:\n$$ \\log L_c(p_A, p_B, \\nu) = C + N_{AA}\\log((p_A)^2) + N_{AB}\\log(2p_A p_B) + N_{BB}\\log((p_B)^2) + N_{AN}\\log(2p_A \\nu) + N_{BN}\\log(2p_B \\nu) + N_{NN}\\log(\\nu^2) $$\nwhere $C$ is a constant that does not depend on the parameters.\nBy rearranging terms based on the parameters, we can simplify this expression:\n$$ \\log L_c \\propto (2N_{AA} + N_{AB} + N_{AN})\\log(p_A) + (N_{AB} + 2N_{BB} + N_{BN})\\log(p_B) + (N_{AN} + N_{BN} + 2N_{NN})\\log(\\nu) $$\nThe terms in parentheses are the total counts of alleles $A$, $B$, and $N$ in the sample. Let these be $C_A, C_B, C_N$:\n$C_A = 2N_{AA} + N_{AB} + N_{AN}$\n$C_B = N_{AB} + 2N_{BB} + N_{BN}$\n$C_N = N_{AN} + N_{BN} + 2N_{NN}$\nThe sum of these allele counts is $C_A + C_B + C_N = 2n$. The log-likelihood is that of a multinomial distribution for the three alleles:\n$$ \\log L_c \\propto C_A\\log(p_A) + C_B\\log(p_B) + C_N\\log(\\nu) $$\nTo find the maximum likelihood estimates, we must maximize this function subject to the constraint $p_A + p_B + \\nu = 1$. We use a Lagrange multiplier, $\\lambda$. The Lagrangian function $\\mathcal{L}$ is:\n$$ \\mathcal{L}(p_A, p_B, \\nu, \\lambda) = C_A\\log(p_A) + C_B\\log(p_B) + C_N\\log(\\nu) - \\lambda(p_A + p_B + \\nu - 1) $$\nTaking the partial derivatives with respect to $p_A, p_B, \\nu$ and setting them to zero gives:\n$$ \\frac{\\partial \\mathcal{L}}{\\partial p_A} = \\frac{C_A}{p_A} - \\lambda = 0 \\implies p_A = \\frac{C_A}{\\lambda} $$\n$$ \\frac{\\partial \\mathcal{L}}{\\partial p_B} = \\frac{C_B}{p_B} - \\lambda = 0 \\implies p_B = \\frac{C_B}{\\lambda} $$\n$$ \\frac{\\partial \\mathcal{L}}{\\partial \\nu} = \\frac{C_N}{\\nu} - \\lambda = 0 \\implies \\nu = \\frac{C_N}{\\lambda} $$\nSumming these and using the constraint $p_A + p_B + \\nu = 1$:\n$$ \\frac{C_A}{\\lambda} + \\frac{C_B}{\\lambda} + \\frac{C_N}{\\lambda} = 1 \\implies \\frac{C_A + C_B + C_N}{\\lambda} = 1 \\implies \\lambda = C_A + C_B + C_N = 2n $$\nThus, if the complete data were known, the MLEs would be:\n$$ \\widehat{p}_A = \\frac{C_A}{2n}, \\quad \\widehat{p}_B = \\frac{C_B}{2n}, \\quad \\widehat{\\nu} = \\frac{C_N}{2n} $$\nIn the EM algorithm framework, the M-step involves maximizing the expectation of the complete-data log-likelihood. This is equivalent to using the above formulas, but with the latent counts ($N_{AA}, N_{AN}$, etc.) replaced by their conditional expectations given the observed data and the current parameter estimates. Let $\\theta^{(t)} = (p_A^{(t)}, p_B^{(t)}, \\nu^{(t)})$ be the parameter estimates at iteration $t$. The M-step update formulas are:\n$$ p_A^{(t+1)} = \\frac{E[C_A | O, \\theta^{(t)}]}{2n}, \\quad p_B^{(t+1)} = \\frac{E[C_B | O, \\theta^{(t)}]}{2n}, \\quad \\nu^{(t+1)} = \\frac{E[C_N | O, \\theta^{(t)}]}{2n} $$\nwhere $O = (O_{AA}, O_{AB}, O_{BB}, O_{\\varnothing})$ represents the observed counts.\n\nTask 2: Construction of the Expectation-Maximization (EM) Algorithm\nThe EM algorithm alternates between an Expectation (E) step and a Maximization (M) step. For this problem, we need to formalize the latent variable expectations and the parameter updates.\n\nInitialization: Start with an initial guess for the parameters, $\\theta^{(0)} = (p_A^{(0)}, p_B^{(0)}, \\nu^{(0)})$. A reasonable approach is to estimate frequencies from observed phenotypes, initially ignoring the ambiguity:\n$p_A^{(0)} = (2O_{AA} + O_{AB}) / (2n')$, $p_B^{(0)} = (O_{AB} + 2O_{BB}) / (2n')$, where $n' = O_{AA} + O_{AB} + O_{BB}$. A small positive value $\\epsilon$ is assigned to $\\nu^{(0)}$, and $p_A^{(0)}, p_B^{(0)}$ are rescaled. A simpler method is to assume all counts contribute to a total of $2n$ alleles: $p_A^{(0)} \\propto 2O_{AA}+O_{AB}$, $p_B^{(0)} \\propto O_{AB}+2O_{BB}$, $\\nu^{(0)} \\propto 2O_{\\varnothing}$, then normalize to sum to $1$.\n\nE-Step: At iteration $t$, we compute the conditional expectation of the true genotype counts, given the observed data $O$ and current parameter estimates $\\theta^{(t)}$.\nThe counts $O_{AB}$ and $O_{\\varnothing}$ are unambiguous:\n$E[N_{AB} | O, \\theta^{(t)}] = O_{AB}$\n$E[N_{NN} | O, \\theta^{(t)}] = O_{\\varnothing}$\nFor the ambiguous count $O_{AA}$, we partition it into true $AA$ and true $AN$ genotypes. The probability of an individual having an apparent $AA$ phenotype is $P(\\text{obs } AA) = P(\\text{true } AA) + P(\\text{true } AN) = (p_A^{(t)})^2 + 2p_A^{(t)}\\nu^{(t)}$.\nThe conditional probability of a true genotype, given an apparent $AA$ observation, is by Bayes' rule:\n$$ P(\\text{true } AA | \\text{obs } AA) = \\frac{P(\\text{true } AA)}{P(\\text{obs } AA)} = \\frac{(p_A^{(t)})^2}{(p_A^{(t)})^2 + 2p_A^{(t)}\\nu^{(t)}} = \\frac{p_A^{(t)}}{p_A^{(t)} + 2\\nu^{(t)}} $$\n$$ P(\\text{true } AN | \\text{obs } AA) = \\frac{P(\\text{true } AN)}{P(\\text{obs } AA)} = \\frac{2p_A^{(t)}\\nu^{(t)}}{(p_A^{(t)})^2 + 2p_A^{(t)}\\nu^{(t)}} = \\frac{2\\nu^{(t)}}{p_A^{(t)} + 2\\nu^{(t)}} $$\nThe expected counts are then:\n$E[N_{AA} | O, \\theta^{(t)}] = O_{AA} \\left( \\frac{p_A^{(t)}}{p_A^{(t)} + 2\\nu^{(t)}} \\right)$\n$E[N_{AN} | O, \\theta^{(t)}] = O_{AA} \\left( \\frac{2\\nu^{(t)}}{p_A^{(t)} + 2\\nu^{(t)}} \\right)$\nSimilarly for the ambiguous count $O_{BB}$:\n$E[N_{BB} | O, \\theta^{(t)}] = O_{BB} \\left( \\frac{p_B^{(t)}}{p_B^{(t)} + 2\\nu^{(t)}} \\right)$\n$E[N_{BN} | O, \\theta^{(t)}] = O_{BB} \\left( \\frac{2\\nu^{(t)}}{p_B^{(t)} + 2\\nu^{(t)}} \\right)$\nThese expectations are calculated assuming the denominators are non-zero. If a denominator is zero, the corresponding observed count must also be zero for the likelihood to be finite, making the expected count zero.\n\nM-Step: We use the expected genotype counts from the E-step to compute the expected allele counts, $E[C_A]$, $E[C_B]$, and $E[C_N]$.\n$E[C_A] = 2 E[N_{AA}] + E[N_{AB}] + E[N_{AN}]$\n$E[C_B] = E[N_{AB}] + 2 E[N_{BB}] + E[N_{BN}]$\n$E[C_N] = E[N_{AN}] + E[N_{BN}] + 2 E[N_{NN}]$\nThe parameter estimates are updated using the allele counting formulas derived in Task 1:\n$$ p_A^{(t+1)} = \\frac{E[C_A]}{2n} $$\n$$ p_B^{(t+1)} = \\frac{E[C_B]}{2n} $$\n$$ \\nu^{(t+1)} = \\frac{E[C_N]}{2n} $$\nThese new estimates, which are guaranteed to sum to $1$, form $\\theta^{(t+1)}$.\n\nConvergence: The E-step and M-step are iterated until the parameter estimates converge. Convergence is declared when the change in the parameter vector is smaller than a specified tolerance, $\\epsilon$. The condition is typically based on the Euclidean norm: $\\sqrt{(p_A^{(t+1)} - p_A^{(t)})^2 + (p_B^{(t+1)} - p_B^{(t)})^2 + (\\nu^{(t+1)} - \\nu^{(t)})^2} < \\epsilon$.\n\nTask 3: Implementation\nThe EM algorithm as described above is implemented in Python. The implementation takes the four observed counts for each test case, initializes the parameters, and iterates the E and M steps until the convergence criterion is met. The final estimated parameters $\\widehat{p}_A, \\widehat{p}_B, \\widehat{\\nu}$ are then reported.", "answer": "```python\nimport numpy as np\n\ndef em_for_null_allele(O_AA, O_AB, O_BB, O_null, tol=1e-9, max_iter=5000):\n    \"\"\"\n    Computes MLE for allele frequencies p_A, p_B, and null nu using the EM algorithm.\n\n    Args:\n        O_AA (int): Observed count of apparent AA homozygotes.\n        O_AB (int): Observed count of AB heterozygotes.\n        O_BB (int): Observed count of apparent BB homozygotes.\n        O_null (int): Observed count of null/non-amplified samples.\n        tol (float): Convergence tolerance.\n        max_iter (int): Maximum number of iterations.\n\n    Returns:\n        list: A list containing the estimated frequencies [p_A, p_B, nu].\n    \"\"\"\n    n = O_AA + O_AB + O_BB + O_null\n    if n == 0:\n        return [0.0, 0.0, 0.0]\n\n    # Initial parameter estimates\n    # Based on simple allele counting from observed phenotypes, then normalized.\n    p_A_est = (2 * O_AA + O_AB)\n    p_B_est = (O_AB + 2 * O_BB)\n    nu_est = (2 * O_null)\n    total_count = p_A_est + p_B_est + nu_est\n\n    if total_count == 0:\n        # If all counts are zero, distribute probability uniformly.\n        p_A, p_B, nu = 1/3, 1/3, 1/3\n    else:\n        p_A = p_A_est / total_count\n        p_B = p_B_est / total_count\n        nu = nu_est / total_count\n\n    for i in range(max_iter):\n        p_A_old, p_B_old, nu_old = p_A, p_B, nu\n\n        # --- E-step: Compute expected counts of latent true genotypes ---\n        \n        # Denominators for conditional probabilities\n        # (p_A^2 + 2*p_A*nu) = p_A * (p_A + 2*nu)\n        # P(true AA | obs AA) = p_A / (p_A + 2*nu)\n        # P(true AN | obs AA) = 2*nu / (p_A + 2*nu)\n        den_A = p_A_old + 2 * nu_old\n        den_B = p_B_old + 2 * nu_old\n        \n        # Expected counts of true genotypes\n        # Handling the case where denominator is 0 (e.g. p_A=0 and nu=0).\n        # In this case, O_AA must also be 0, so the product is 0.\n        E_N_AA = (O_AA * p_A_old / den_A) if den_A > 0 else 0.0\n        E_N_AN = (O_AA * 2 * nu_old / den_A) if den_A > 0 else 0.0\n        \n        E_N_BB = (O_BB * p_B_old / den_B) if den_B > 0 else 0.0\n        E_N_BN = (O_BB * 2 * nu_old / den_B) if den_B > 0 else 0.0\n        \n        # Unambiguous counts\n        E_N_AB = float(O_AB)\n        E_N_NN = float(O_null)\n\n        # --- M-step: Update parameter estimates based on expected counts ---\n        \n        # Expected allele counts\n        E_C_A = 2 * E_N_AA + E_N_AB + E_N_AN\n        E_C_B = E_N_AB + 2 * E_N_BB + E_N_BN\n        E_C_N = E_N_AN + E_N_BN + 2 * E_N_NN\n        \n        total_alleles = 2.0 * n\n        \n        p_A = E_C_A / total_alleles\n        p_B = E_C_B / total_alleles\n        nu = E_C_N / total_alleles\n\n        # Check for convergence\n        change = np.sqrt((p_A - p_A_old)**2 + (p_B - p_B_old)**2 + (nu - nu_old)**2)\n        if change  tol:\n            break\n            \n    return [p_A, p_B, nu]\n\ndef solve():\n    # Define the test cases from the problem statement.\n    test_cases = [\n        (300, 450, 247, 3),    # Case 1\n        (40, 60, 40, 0),      # Case 2\n        (225, 150, 105, 20),  # Case 3\n        (8, 90, 900, 2),      # Case 4\n        (4, 4, 2, 0),         # Case 5\n        (0, 0, 0, 50)         # Case 6\n    ]\n\n    results = []\n    for case in test_cases:\n        O_AA, O_AB, O_BB, O_null = case\n        estimates = em_for_null_allele(O_AA, O_AB, O_BB, O_null)\n        results.append(estimates)\n\n    # Format the final output string as specified.\n    output_str = \",\".join(\n        [f\"[{res[0]:.6f},{res[1]:.6f},{res[2]:.6f}]\" for res in results]\n    )\n    \n    print(f\"[{output_str}]\")\n\nsolve()\n```", "id": "2831184"}]}