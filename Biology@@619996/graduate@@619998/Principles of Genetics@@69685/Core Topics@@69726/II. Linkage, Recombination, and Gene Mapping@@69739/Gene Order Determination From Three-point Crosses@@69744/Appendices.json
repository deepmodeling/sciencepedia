{"hands_on_practices": [{"introduction": "The three-point testcross is the cornerstone of classical gene mapping. This foundational exercise guides you through the complete, step-by-step process of converting raw progeny counts into a genetic map. By systematically identifying parental, single-crossover, and double-crossover classes based on their frequencies, you will determine the correct gene order and calculate the map distances between adjacent loci. This practice is essential for building a solid understanding of how recombination frequencies relate to physical gene arrangement on a chromosome and for mastering the calculation of interference [@problem_id:2814423].", "problem": "An autosomal three-point testcross is performed in Drosophila melanogaster. A heterozygous female with coupling-phase haplotypes $A B C / a b c$ is crossed to a triple-recessive tester $a b c / a b c$. You are given the following observed progeny classes, recorded as the haplotype of the gamete contributed by the heterozygous female and the corresponding counts out of a total of $1000$ progeny:\n\n- $A B C$: $380$\n- $a b c$: $372$\n- $a B C$: $84$\n- $A b c$: $76$\n- $A B c$: $40$\n- $a b C$: $36$\n- $A b C$: $5$\n- $a B c$: $7$\n\nTwo candidate gene orders have been proposed: $A\\text{-}B\\text{-}C$ and $A\\text{-}C\\text{-}B$.\n\nUsing only foundational principles for linkage analysis in three-point testcrosses—namely, that progeny class categories reflect the gametes produced by the heterozygous parent; that the most frequent classes are the parental (nonrecombinant) types; that double crossover (DCO) classes are the least frequent; and that in a true three-point cross the DCO haplotypes differ from the parental haplotypes only at the middle locus—perform the following:\n\n- Identify the parental and the double crossover classes based on the above principles.\n- Use the defining property of DCOs to decide which of the two proposed gene orders is correct by determining which locus must be in the middle.\n- With the correct order in hand, classify single crossover (SCO) and DCO classes by interval, compute the recombination fractions for the two adjacent intervals, and from first principles compute the expected number of DCOs under independence of crossovers.\n- Define the coefficient of coincidence as the ratio of observed to expected DCOs, and define interference as one minus the coefficient of coincidence. Then compute the interference.\n\nReport only the final interference as a decimal fraction. Round your answer to four significant figures. Do not use a percent sign in your answer.", "solution": "The problem as stated is subjected to rigorous validation before any attempt at a solution is made.\n\nThe givens are extracted verbatim as follows:\n- A heterozygous female of genotype $A B C / a b c$.\n- A tester male of genotype $a b c / a b c$.\n- A total progeny count of $N = 1000$.\n- Observed progeny F1 gamete classes and counts:\n    - $A B C$: $380$\n    - $a b c$: $372$\n    - $a B C$: $84$\n    - $A b c$: $76$\n    - $A B c$: $40$\n    - $a b C$: $36$\n    - $A b C$: $5$\n    - $a B c$: $7$\n- Two candidate gene orders: $A\\text{-}B\\text{-}C$ and $A\\text{-}C\\text{-}B$.\n- Foundational principles for analysis are explicitly provided.\n- Required calculations include identification of parental and double crossover (DCO) classes, determination of the correct gene order, calculation of recombination fractions, expected DCOs, coefficient of coincidence, and interference.\n- The final answer must be the interference value, rounded to four significant figures.\n\nThe problem is scientifically grounded in the principles of Mendelian genetics and linkage analysis as developed by Alfred Sturtevant. It is well-posed, with a complete and consistent dataset; the sum of observed progeny is $380 + 372 + 84 + 76 + 40 + 36 + 5 + 7 = 1000$, which matches the stated total $N$. The problem is objective and formalizable. Therefore, the problem is deemed valid and a solution will be furnished.\n\nThe solution proceeds by adhering to the steps outlined in the problem statement.\n\nFirst, we identify the parental and double crossover (DCO) progeny classes. According to the foundational principles of linkage, the parental classes are the most frequent, and the DCO classes are the least frequent.\n- The most numerous progeny classes are $A B C$ (with count $380$) and $a b c$ (with count $372$). These are the parental, or nonrecombinant, classes. Their total is $380 + 372 = 752$. This is consistent with the initial information that the female parent has the genotype $A B C / a b c$.\n- The least numerous progeny classes are $A b C$ (with count $5$) and $a B c$ (with count $7$). These are the DCO classes. Their total is $5 + 7 = 12$.\n\nSecond, we determine the correct gene order. The defining characteristic of a DCO is that the resulting haplotype differs from the parental haplotypes only at the middle locus. We compare a parental haplotype with a DCO haplotype to identify which gene is in the middle. Let us compare the parental haplotype $A B C$ with the DCO haplotype $A b C$. The only locus at which they differ is $B$. To confirm, let us compare the other parental haplotype $a b c$ with the other DCO haplotype $a B c$. Again, the only locus at which they differ is $B$. This establishes unequivocally that the gene $B$ is located between genes $A$ and $C$. Therefore, the correct gene order is $A\\text{-}B\\text{-}C$.\n\nThird, with the correct gene order $A\\text{-}B\\text{-}C$ established, we can classify the remaining progeny classes and calculate recombination frequencies for the two intervals, which are region I ($A\\text{-}B$) and region II ($B\\text{-}C$).\n\n- Single Crossover (SCO) in Region I ($A\\text{-}B$): A crossover event between $A$ and $B$ would produce gametes of haplotype $A b c$ and $a B C$. The observed counts for these classes are $76$ and $84$, respectively. The total number of SCOs in region I is $76 + 84 = 160$.\n- Single Crossover (SCO) in Region II ($B\\text{-}C$): A crossover event between $B$ and $C$ would produce gametes of haplotype $A B c$ and $a b C$. The observed counts for these classes are $40$ and $36$, respectively. The total number of SCOs in region II is $40 + 36 = 76$.\n\nThe recombination frequency for a given interval is the ratio of the total number of recombinant progeny for that interval to the total number of progeny. Recombinant progeny for an interval include the single crossovers in that interval as well as all double crossovers, as a DCO involves a crossover in both intervals.\n\n- Recombination frequency for Region I ($A\\text{-}B$), denoted $R_{A-B}$:\n$$R_{A-B} = \\frac{(\\text{SCO in I}) + (\\text{DCO})}{N} = \\frac{160 + 12}{1000} = \\frac{172}{1000} = 0.172$$\n\n- Recombination frequency for Region II ($B\\text{-}C$), denoted $R_{B-C}$:\n$$R_{B-C} = \\frac{(\\text{SCO in II}) + (\\text{DCO})}{N} = \\frac{76 + 12}{1000} = \\frac{88}{1000} = 0.088$$\n\nFourth, we compute the expected number of DCOs and the interference. If crossover events in the two regions were independent, the expected frequency of DCOs would be the product of the individual recombination frequencies for each region.\n\n- Expected frequency of DCOs = $R_{A-B} \\times R_{B-C} = 0.172 \\times 0.088 = 0.015136$.\n- Expected number of DCOs = (Expected frequency) $\\times N = 0.015136 \\times 1000 = 15.136$.\n\nThe coefficient of coincidence, $C$, is defined as the ratio of the observed number of DCOs to the expected number of DCOs.\n$$C = \\frac{\\text{Observed DCOs}}{\\text{Expected DCOs}} = \\frac{12}{15.136}$$\n\nInterference, $I$, measures the degree to which a crossover in one region affects the probability of a crossover in an adjacent region. It is defined as $I = 1 - C$.\n$$I = 1 - C = 1 - \\frac{12}{15.136} \\approx 1 - 0.7928052... \\approx 0.2071947...$$\n\nThe problem requires the final answer to be rounded to four significant figures.\n$$I \\approx 0.2072$$\nThis positive interference value indicates that a crossover in one region reduces the likelihood of a simultaneous crossover in the adjacent region, which is a common biological phenomenon.", "answer": "$$\\boxed{0.2072}$$", "id": "2814423"}, {"introduction": "Genetic analysis often relies on useful heuristics, but a true expert knows when these rules of thumb can be misleading. This exercise presents a scenario designed to challenge the common assumption that double-crossover events always produce the rarest progeny classes. By analyzing a hypothetical dataset exhibiting strong negative interference, you will learn to rely on first principles and logical hypothesis testing to determine the correct gene order [@problem_id:2814455]. This practice sharpens critical thinking and demonstrates that a rigorous, methodical approach is superior to a rote application of rules, especially when confronted with unusual biological phenomena.", "problem": "A trihybrid in a model organism is heterozygous for three recessive visible markers and is testcrossed to a triple-recessive tester. Let the three loci be labeled $A$, $B$, and $C$, with unknown linear order on a single chromosome. The heterozygous parent carries the haplotypes $A B C$ and $a b c$, and the tester carries $a b c$. The progeny phenotype reveals the gamete transmitted by the heterozygous parent. Assume no chromatid interference, and that each observed progeny class accurately reflects a distinct meiotic recombinant class.\n\nFrom a sample of $N = 10000$ progeny, the counts by progeny class are:\n- $A B C$: $3160$\n- $a b c$: $3160$\n- $A b c$: $90$\n- $a B C$: $90$\n- $A B c$: $1540$\n- $a b C$: $1540$\n- $A b C$: $210$\n- $a B c$: $210$\n\nYou are told that strong negative interference operates in this region, so the “smallest two classes are the double crossovers” heuristic can fail. Using only first principles about three-point testcrosses and crossover classification (nonrecombinant, single crossover in the left interval, single crossover in the right interval, and double crossover), do the following without invoking the “smallest are double crossovers” rule:\n- Diagnose the nonrecombinant (parental) classes.\n- Determine the correct gene order.\n- Correctly classify each of the eight classes as nonrecombinant, single crossover in the left interval, single crossover in the right interval, or double crossover.\n- From your classification, compute the recombination fractions $r_{A B}$ and $r_{B C}$, the observed double-crossover frequency $f_{\\mathrm{DCO,obs}}$, the expected double-crossover frequency under independence $f_{\\mathrm{DCO,exp}}$, the coefficient of coincidence, and the interference.\n\nReport only the interference as your final answer. Express it as a decimal number and round your answer to four significant figures.", "solution": "The problem presented is a standard three-point testcross analysis, a fundamental exercise in transmission genetics. It contains all necessary data and is scientifically sound. The premise of strong negative interference, while less common than positive interference, is a known biological phenomenon. The explicit warning against using the common heuristic that the smallest progeny classes represent double crossovers is a key directive that must be followed. The problem is valid, so we proceed with the solution.\n\nThe first step is to identify the nonrecombinant, or parental, gamete types. These are expected to be the most frequent classes in the progeny. The heterozygous parent was formed from haplotypes $A B C$ and $a b c$. The progeny classes corresponding to these gametes are phenotypically $A B C$ and $a b c$. The observed counts are $3160$ and $3160$, respectively. These are the largest classes, confirming they are the nonrecombinant (NCO) types. The total number of NCO progeny is $3160 + 3160 = 6320$. The total progeny count $N$ is $10000$.\n\nThe central task is to determine the correct linear order of the three genes, $A$, $B$, and $C$. There are three logical possibilities for the gene order: $A-B-C$, $A-C-B$, and $B-A-C$. A double crossover (DCO) event exchanges the middle gene with respect to the two flanking genes, when comparing the parental and double-recombinant chromosomes. We must test each hypothesis for gene order by classifying the progeny and checking for consistency with the data and the provided information about negative interference.\n\nHypothesis 1: The gene order is $A-B-C$.\nThe parental chromosomes are $A-B-C$ and $a-b-c$.\n- Nonrecombinants (NCO): $A B C$ and $a b c$. Counts: $3160 + 3160 = 6320$.\n- Single Crossovers in Region 1 ($A-B$), SCO-1: These result from a crossover between gene $A$ and gene $B$. The resulting gametes are $A b c$ and $a B C$. The observed counts are $90 + 90 = 180$.\n- Single Crossovers in Region 2 ($B-C$), SCO-2: These result from a crossover between gene $B$ and gene $C$. The resulting gametes are $A B c$ and $a b C$. The observed counts are $1540 + 1540 = 3080$.\n- Double Crossovers (DCO): These result from simultaneous crossovers in both Region 1 and Region 2. The resulting gametes are $A b C$ and $a B c$. The observed counts are $210 + 210 = 420$.\nThe sum of all classes is $6320 + 180 + 3080 + 420 = 10000$, which matches the total $N$.\nUnder this hypothesis, the DCO class (count $420$) is not the smallest class; the SCO-1 class (count $180$) is the rarest. This scenario is consistent with the problem's explicit warning that the standard heuristic for identifying DCOs might fail due to strong negative interference. We retain this hypothesis as plausible.\n\nHypothesis 2: The gene order is $A-C-B$.\nThe parental chromosomes are $A-C-B$ and $a-c-b$.\n- NCO: $A C B$ ($A B C$) and $a c b$ ($a b c$). Counts: $6320$.\n- SCO in Region 1 ($A-C$): Gametes are $A c b$ ($A b c$) and $a C B$ ($a B C$). Counts: $90 + 90 = 180$.\n- SCO in Region 2 ($C-B$): Gametes are $A C b$ ($A b C$) and $a c B$ ($a B c$). Counts: $210 + 210 = 420$.\n- DCO: Gametes are $A c B$ ($A B c$) and $a C b$ ($a b C$). Counts: $1540 + 1540 = 3080$.\nThis hypothesis requires that the double crossover class be the most frequent recombinant class, with a count of $3080$. A double crossover event is mechanistically the product of two single crossover events. For its frequency to be substantially higher than that of either single crossover class is biologically implausible. Therefore, this gene order is rejected.\n\nHypothesis 3: The gene order is $B-A-C$.\nThe parental chromosomes are $B-A-C$ and $b-a-c$.\n- NCO: $B A C$ ($A B C$) and $b a c$ ($a b c$). Counts: $6320$.\n- SCO in Region 1 ($B-A$): Gametes are $b A C$ ($A b C$) and $B a c$ ($a B c$). Counts: $210 + 210 = 420$.\n- SCO in Region 2 ($A-C$): Gametes are $B A c$ ($A B c$) and $b a C$ ($a b C$). Counts: $1540 + 1540 = 3080$.\n- DCO: Gametes are $b A c$ ($A b c$) and $B a C$ ($a B C$). Counts: $90 + 90 = 180$.\nUnder this hypothesis, the DCO class is the rarest, with count $180$. This is the standard observation where the \"smallest are DCO\" rule holds true. However, the problem explicitly states that strong negative interference is operating and that this rule may fail. If this order were correct, the warning in the problem statement would be irrelevant and misleading. Furthermore, we can calculate the interference for this order. The recombination frequency for interval $B-A$ would be $r_{BA} = \\frac{420+180}{10000} = 0.06$. The recombination frequency for interval $A-C$ would be $r_{AC} = \\frac{3080+180}{10000} = 0.326$. The expected DCO frequency would be $f_{\\mathrm{DCO,exp}} = r_{BA} \\times r_{AC} = 0.06 \\times 0.326 = 0.01956$. The observed DCO frequency is $f_{\\mathrm{DCO,obs}} = \\frac{180}{10000} = 0.018$. The coefficient of coincidence would be $C.o.C. = \\frac{0.018}{0.01956} \\approx 0.92$, yielding an interference of $I = 1 - C.o.C. \\approx 0.08$. This is weak positive interference, which directly contradicts the problem's premise of strong negative interference. Thus, this gene order is also rejected.\n\nConclusion on Gene Order: The only gene order consistent with all provided information is $A-B-C$.\n\nWe now proceed with calculations based on the established gene order $A-B-C$.\nThe classification of progeny is as determined under Hypothesis 1:\n- Nonrecombinant (NCO): $A B C$ ($3160$), $a b c$ ($3160$).\n- Single Crossover, Region 1 ($A-B$): $A b c$ ($90$), $a B C$ ($90$).\n- Single Crossover, Region 2 ($B-C$): $A B c$ ($1540$), $a b C$ ($1540$).\n- Double Crossover (DCO): $A b C$ ($210$), $a B c$ ($210$).\n\nWe compute the required genetic parameters:\n1. Recombination fraction for interval $A-B$, $r_{AB}$. This is the sum of SCO-1 and DCO progeny, divided by the total.\n$$r_{AB} = \\frac{(\\text{Count of SCO-1}) + (\\text{Count of DCO})}{N} = \\frac{180 + 420}{10000} = \\frac{600}{10000} = 0.06$$\n\n2. Recombination fraction for interval $B-C$, $r_{BC}$. This is the sum of SCO-2 and DCO progeny, divided by the total.\n$$r_{BC} = \\frac{(\\text{Count of SCO-2}) + (\\text{Count of DCO})}{N} = \\frac{3080 + 420}{10000} = \\frac{3500}{10000} = 0.35$$\n\n3. Observed double-crossover frequency, $f_{\\mathrm{DCO,obs}}$.\n$$f_{\\mathrm{DCO,obs}} = \\frac{\\text{Count of DCO}}{N} = \\frac{420}{10000} = 0.042$$\n\n4. Expected double-crossover frequency, $f_{\\mathrm{DCO,exp}}$. This assumes no interference and is the product of the individual interval recombination fractions.\n$$f_{\\mathrm{DCO,exp}} = r_{AB} \\times r_{BC} = 0.06 \\times 0.35 = 0.021$$\n\n5. Coefficient of Coincidence, $C.o.C$. This is the ratio of the observed DCO frequency to the expected DCO frequency.\n$$C.o.C. = \\frac{f_{\\mathrm{DCO,obs}}}{f_{\\mathrm{DCO,exp}}} = \\frac{0.042}{0.021} = 2$$\n\n6. Interference, $I$. This is defined as $1 - C.o.C$.\n$$I = 1 - C.o.C. = 1 - 2 = -1$$\nA negative interference value indicates that a crossover in one region increases the probability of a crossover in the adjacent region. A value of $-1$ represents strong negative interference, where double crossovers occur at twice the rate expected by chance alone. This result is fully consistent with the problem statement. The problem requires the answer to be rounded to four significant figures.", "answer": "$$\\boxed{-1.000}$$", "id": "2814455"}, {"introduction": "Moving from idealized textbook problems to real-world data analysis requires a mastery of statistical techniques for handling imperfect information. This advanced practice addresses a common challenge in genetics: missing data. You will be tasked with developing and implementing an Expectation-Maximization (EM) algorithm, a powerful computational method for finding maximum likelihood estimates when some loci are untyped [@problem_id:2814383]. This hands-on coding exercise provides invaluable experience in statistical genetics, demonstrating how to extract accurate linkage information even from incomplete datasets.", "problem": "You are given a classical three-point testcross framework in which a cis-phase heterozygote $ABC/abc$ is crossed to $abc/abc$. Assume the gene order hypothesis $A\\text{-}B\\text{-}C$ throughout. The gamete produced by the heterozygote determines the progeny haplotype. Let the adjacent-interval recombination fractions be $r_{AB}$ and $r_{BC}$, with $0 \\le r_{AB} \\le \\tfrac{1}{2}$ and $0 \\le r_{BC} \\le \\tfrac{1}{2}$. Let $D$ denote the double-recombinant gamete fraction, subject to $0 \\le D \\le \\min(r_{AB}, r_{BC})$ and $1 - r_{AB} - r_{BC} + D \\ge 0$. Under these definitions, the quartet of class probabilities is\n$$\np \\equiv 1 - r_{AB} - r_{BC} + D,\\quad s_1 \\equiv r_{AB} - D,\\quad s_2 \\equiv r_{BC} - D,\\quad d \\equiv D,\n$$\nwith $p + s_1 + s_2 + d = 1$. The eight gametic haplotypes and their probabilities (each class split evenly into two haplotypes) are:\n- No crossover: $ABC$ and $abc$, each with probability $p/2$.\n- Single crossover in $AB$: $Abc$ and $aBC$, each with probability $s_1/2$.\n- Single crossover in $BC$: $ABc$ and $abC$, each with probability $s_2/2$.\n- Double crossover: $AbC$ and $aBc$, each with probability $d/2$.\n\nIn practice, some progeny have locus $B$ untyped. Consequently, for those individuals only the pair $(A,C)$ is observed, taking one of the four values: $A\\_C$ (meaning allele $A$ and allele $C$), $A\\_c$, $a\\_C$, or $a\\_c$. These correspond to the haplotype pairs:\n- $A\\_C \\leftrightarrow \\{ABC, AbC\\}$,\n- $A\\_c \\leftrightarrow \\{ABc, Abc\\}$,\n- $a\\_C \\leftrightarrow \\{aBC, abC\\}$,\n- $a\\_c \\leftrightarrow \\{aBc, abc\\}$.\n\nTask. Starting only from the fundamental definitions of recombination fraction, linkage phase, and multinomial likelihood, derive an Expectation-Maximization (EM) algorithm that handles the untyped locus $B$ by treating the exact haplotype for those individuals as latent. Your algorithm must maximize the marginal likelihood with respect to $(r_{AB}, r_{BC})$, profiling out $D$ via the complete-data multinomial maximum likelihood estimation (MLE) at each M-step. Specifically:\n\n- E-step. Given current parameter values $(r_{AB}, r_{BC}, D)$, compute the conditional probabilities that each partially observed $(A,C)$ individual belongs to each of its two consistent haplotypes, and accumulate the corresponding expected complete-data counts.\n- M-step. Maximize the expected complete-data log-likelihood to update the class probabilities $(p, s_1, s_2, d)$ subject to nonnegativity and total sum $1$, then set\n$$\n\\widehat{r}_{AB} \\leftarrow s_1 + d,\\quad \\widehat{r}_{BC} \\leftarrow s_2 + d,\\quad \\widehat{D} \\leftarrow d.\n$$\nBecause the expected complete-data log-likelihood is multinomial and strictly concave on the simplex, the M-step reduces to normalizing the expected class counts. If a denominator in the E-step conditional probabilities becomes $0$ (e.g., $p + d = 0$ or $s_1 + s_2 = 0$), split the corresponding ambiguous counts evenly between the two compatible haplotypes.\n\nConvergence. Iterate until the sup-norm parameter change satisfies $\\max\\{|\\Delta r_{AB}|, |\\Delta r_{BC}|, |\\Delta D|\\} \\le \\varepsilon$ for a small tolerance $\\varepsilon$, or until a maximum number of iterations is reached. Report $(\\widehat{r}_{AB}, \\widehat{r}_{BC})$ as decimals (not percentages), rounded to $6$ decimal places.\n\nInput model. There is no external input. Your program must embed the following test suite as constants and execute the EM algorithm independently for each case.\n\nTest suite. Each test case supplies two sets of integer counts:\n- Fully typed haplotypes: counts for $ABC$, $ABc$, $AbC$, $Abc$, $aBC$, $aBc$, $abC$, $abc$.\n- Partially typed $(A,C)$ groups: counts for $A\\_C$, $A\\_c$, $a\\_C$, $a\\_c$.\n\nAll counts are exact and scientifically plausible under a three-point cross.\n\n- Test case $1$ (mixed typedness):\n  - Fully typed haplotypes ($8$ categories summing to $800$):\n    - $ABC = 286$, $ABc = 66$, $AbC = 6$, $Abc = 42$, $aBC = 42$, $aBc = 6$, $abC = 66$, $abc = 286$.\n  - Partially typed $(A,C)$ groups ($4$ categories summing to $200$):\n    - $A\\_C = 73$, $A\\_c = 27$, $a\\_C = 27$, $a\\_c = 73$.\n- Test case $2$ (all loci typed, double crossovers absent):\n  - Fully typed haplotypes ($8$ categories summing to $500$):\n    - $ABC = 175$, $ABc = 25$, $AbC = 0$, $Abc = 50$, $aBC = 50$, $aBc = 0$, $abC = 25$, $abc = 175$.\n  - Partially typed $(A,C)$ groups: all $0$.\n- Test case $3$ (heavy missingness at $B$):\n  - Fully typed haplotypes ($8$ categories summing to $100$):\n    - $ABC = 35$, $ABc = 12$, $AbC = 1$, $Abc = 2$, $aBC = 2$, $aBc = 1$, $abC = 12$, $abc = 35$.\n  - Partially typed $(A,C)$ groups ($4$ categories summing to $900$):\n    - $A\\_C = 324$, $A\\_c = 126$, $a\\_C = 126$, $a\\_c = 324$.\n\nOutput specification. For each test case $i \\in \\{1,2,3\\}$, output the pair $\\big(\\widehat{r}_{AB}^{(i)}, \\widehat{r}_{BC}^{(i)}\\big)$ as a two-element list $[\\widehat{r}_{AB}^{(i)}, \\widehat{r}_{BC}^{(i)}]$, with each value rounded to $6$ decimal places and expressed as a decimal in $[0, 0.5]$. Your program should produce a single line of output containing a list of these three results in order:\n$$\n\\big[\\, [\\widehat{r}_{AB}^{(1)}, \\widehat{r}_{BC}^{(1)}],\\ [\\widehat{r}_{AB}^{(2)}, \\widehat{r}_{BC}^{(2)}],\\ [\\widehat{r}_{AB}^{(3)}, \\widehat{r}_{BC}^{(3)}] \\,\\big].\n$$\nNo other text should be printed.", "solution": "The problem requires the derivation and implementation of an Expectation-Maximization (EM) algorithm to estimate recombination fractions from three-point testcross data, where some progeny have an untyped middle locus. The problem is scientifically sound, well-posed, and provides all necessary information for a solution. It constitutes a classical application of the EM algorithm to handle missing data in genetic linkage analysis.\n\n### 1. Statistical Model and Log-Likelihood\n\nThe experiment is a three-point testcross involving a cis-phase heterozygote, $ABC/abc$, and a homozygous recessive individual, $abc/abc$. The gene order is assumed to be $A-B-C$. The progeny's phenotype reveals the gamete contributed by the heterozygote. There are eight possible gametic haplotypes, which arise from four mutually exclusive events: no crossover (parental), single crossover in region 1 ($A-B$), single crossover in region 2 ($B-C$), and double crossover (one in each region).\n\nLet the model parameters be the recombination fractions $r_{AB}$ and $r_{BC}$, and the double-crossover fraction $D$. The probabilities of the four event classes are given as:\n- Parental class ($p$): $p = 1 - r_{AB} - r_{BC} + D$. Haplotypes: $ABC, abc$.\n- Region 1 SCO class ($s_1$): $s_1 = r_{AB} - D$. Haplotypes: $Abc, aBC$.\n- Region 2 SCO class ($s_2$): $s_2 = r_{BC} - D$. Haplotypes: $ABc, abC$.\n- Double crossover class ($d$): $d = D$. Haplotypes: $AbC, aBc$.\n\nThe probability of each of the two haplotypes within a class is half the class probability. For instance, $P(ABC) = P(abc) = p/2$.\n\nThe data consists of two parts:\n1.  **Complete Data**: Counts of $n_h$ for each of the $8$ fully typed haplotypes $h$.\n2.  **Incomplete Data**: Counts for the $4$ partially typed groups where locus $B$ is unobserved: $N_{A\\_C}, N_{A\\_c}, N_{a\\_C}, N_{a\\_c}$. These observations are ambiguous, corresponding to pairs of underlying haplotypes.\n\nThe goal is to estimate $(r_{AB}, r_{BC})$ by maximizing the marginal likelihood of the observed data. The EM algorithm achieves this by iteratively working with the complete-data log-likelihood, which is simpler. If we knew the true count for every haplotype, the set of counts would follow a multinomial distribution. The complete-data log-likelihood, up to a constant, is:\n$$\n\\ell_c(p, s_1, s_2, d) \\propto N_p \\log p + N_{s1} \\log s_1 + N_{s2} \\log s_2 + N_d \\log d\n$$\nwhere $N_p, N_{s1}, N_{s2}, N_d$ are the total counts for the parental, SCO-1, SCO-2, and DCO classes, respectively.\n\n### 2. The Expectation-Maximization (EM) Algorithm\n\nThe EM algorithm is an iterative procedure for finding maximum likelihood estimates in problems with missing or latent data. Each iteration consists of two steps:\n- **E-step (Expectation):** Computes the expectation of the complete-data log-likelihood, conditioned on the observed data and the current parameter estimates. This is equivalent to computing the expected values of the sufficient statistics (the class counts $N_p, N_{s1}, N_{s2}, N_d$).\n- **M-step (Maximization):** Maximizes the expected log-likelihood computed in the E-step to find updated parameter estimates.\n\nLet $\\mathbf{\\theta}^{(t)} = (r_{AB}^{(t)}, r_{BC}^{(t)}, D^{(t)})$ be the parameter estimates at iteration $t$. These define the class probabilities $(p^{(t)}, s_1^{(t)}, s_2^{(t)}, d^{(t)})$.\n\n### 3. Derivation of the E-Step\n\nIn the E-step, we calculate the expected counts for each of the four crossover classes, which we denote $E_p, E_{s1}, E_{s2}, E_d$. These expected counts are the sum of the counts from the fully typed data and the expected contributions from the partially typed data.\n\nLet the counts from fully typed observations be:\n- $C_p = N_{ABC} + N_{abc}$\n- $C_{s1} = N_{Abc} + N_{aBC}$\n- $C_{s2} = N_{ABc} + N_{abC}$\n- $C_d = N_{AbC} + N_{aBc}$\n\nThe partially typed counts must be distributed among the classes based on conditional probabilities derived from the current parameter estimates $\\mathbf{\\theta}^{(t)}$.\n\n- An individual of type $A\\_C$ must have haplotype $ABC$ (parental, prob. $p/2$) or $AbC$ (double crossover, prob. $d/2$). The conditional probability of it being parental is:\n  $$P(\\text{parental} | A\\_C, \\mathbf{\\theta}^{(t)}) = \\frac{P(ABC)}{P(ABC) + P(AbC)} = \\frac{p^{(t)}/2}{p^{(t)}/2 + d^{(t)}/2} = \\frac{p^{(t)}}{p^{(t)} + d^{(t)}}$$\n- An individual of type $a\\_c$ must have haplotype $abc$ (parental, prob. $p/2$) or $aBc$ (double crossover, prob. d/2$). The conditional probability of it being parental is also $\\frac{p^{(t)}}{p^{(t)} + d^{(t)}}$.\n- An individual of type $A\\_c$ must have haplotype $Abc$ (SCO-1, prob. $s_1/2$) or $ABc$ (SCO-2, prob. $s_2/2$). The conditional probability of it being SCO-1 is:\n  $$P(\\text{SCO-1} | A\\_c, \\mathbf{\\theta}^{(t)}) = \\frac{P(Abc)}{P(Abc) + P(ABc)} = \\frac{s_1^{(t)}/2}{s_1^{(t)}/2 + s_2^{(t)}/2} = \\frac{s_1^{(t)}}{s_1^{(t)} + s_2^{(t)}}$$\n- An individual of type $a\\_C$ must have haplotype $aBC$ (SCO-1, prob. $s_1/2$) or $abC$ (SCO-2, prob. $s_2/2$). The conditional probability of it being SCO-1 is also $\\frac{s_1^{(t)}}{s_1^{(t)} + s_2^{(t)}}$.\n\nLet's define the allocation fractions, handling the special case of zero denominators as specified:\n- $\\gamma_p = \\frac{p^{(t)}}{p^{(t)} + d^{(t)}}$ if $p^{(t)} + d^{(t)} > 0$, else $0.5$.\n- $\\gamma_{s1} = \\frac{s_1^{(t)}}{s_1^{(t)} + s_2^{(t)}}$ if $s_1^{(t)} + s_2^{(t)} > 0$, else $0.5$.\n\nThe total expected counts for each class are then:\n- $E_p = C_p + (N_{A\\_C} + N_{a\\_c}) \\cdot \\gamma_p$\n- $E_{s1} = C_{s1} + (N_{A\\_c} + N_{a\\_C}) \\cdot \\gamma_{s1}$\n- $E_{s2} = C_{s2} + (N_{A\\_c} + N_{a\\_C}) \\cdot (1 - \\gamma_{s1})$\n- $E_d = C_d + (N_{A\\_C} + N_{a\\_c}) \\cdot (1 - \\gamma_p)$\n\n### 4. Derivation of the M-Step\n\nIn the M-step, we find the parameters $(p, s_1, s_2, d)$ that maximize the expected complete-data log-likelihood, which is equivalent to maximizing $E_p \\log p + E_{s1} \\log s_1 + E_{s2} \\log s_2 + E_d \\log d$ subject to the constraint that probabilities sum to $1$. This is a standard multinomial MLE problem, and the solution is to normalize the expected counts.\nLet $N_{total}$ be the total sample size (sum of all fully and partially typed counts).\nThe updated class probabilities are:\n$$\np^{(t+1)} = \\frac{E_p}{N_{total}}, \\quad s_1^{(t+1)} = \\frac{E_{s1}}{N_{total}}, \\quad s_2^{(t+1)} = \\frac{E_{s2}}{N_{total}}, \\quad d^{(t+1)} = \\frac{E_d}{N_{total}}\n$$\nFrom these, we update the recombination parameters according to their definitions:\n- $\\widehat{r}_{AB}^{(t+1)} \\leftarrow s_1^{(t+1)} + d^{(t+1)}$\n- $\\widehat{r}_{BC}^{(t+1)} \\leftarrow s_2^{(t+1)} + d^{(t+1)}$\n- $\\widehat{D}^{(t+1)} \\leftarrow d^{(t+1)}$\n\n### 5. Algorithm Summary\n\n1.  **Initialization**: Compute initial parameter estimates $(r_{AB}^{(0)}, r_{BC}^{(0)}, D^{(0)})$ using only the fully typed counts. If there are no fully typed counts, a non-informative starting point (e.g., $r_{AB}=r_{BC}=0.1, D=0.01$) can be used.\n2.  **Iteration**:\n    a.  **E-Step**: Given the current parameters $(p^{(t)}, s_1^{(t)}, s_2^{(t)}, d^{(t)})$, compute the expected class counts $(E_p, E_{s1}, E_{s2}, E_d)$ as derived above.\n    b.  **M-Step**: Update the class probabilities by normalizing the expected counts: $p^{(t+1)} = E_p/N_{total}$, etc. Then, update the recombination parameters $r_{AB}^{(t+1)}, r_{BC}^{(t+1)}, D^{(t+1)}$.\n3.  **Convergence**: Repeat the E- and M-steps until the change in parameters is smaller than a specified tolerance $\\varepsilon$ (e.g., $\\max\\{|\\Delta r_{AB}|, |\\Delta r_{BC}|, |\\Delta D|\\} \\le 10^{-7}$), or a maximum number of iterations is reached.\n4.  **Output**: Report the final estimates $(\\widehat{r}_{AB}, \\widehat{r}_{BC})$.\n\nThis completes the derivation of the required algorithm.", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Main function to solve the problem for the given test suite.\n    \"\"\"\n    # Define the test cases from the problem statement.\n    test_suite = [\n        {\n            \"full_counts\": {\n                'ABC': 286, 'ABc': 66, 'AbC': 6, 'Abc': 42,\n                'aBC': 42, 'aBc': 6, 'abC': 66, 'abc': 286,\n            },\n            \"partial_counts\": {\n                'A_C': 73, 'A_c': 27, 'a_C': 27, 'a_c': 73,\n            }\n        },\n        {\n            \"full_counts\": {\n                'ABC': 175, 'ABc': 25, 'AbC': 0, 'Abc': 50,\n                'aBC': 50, 'aBc': 0, 'abC': 25, 'abc': 175,\n            },\n            \"partial_counts\": {\n                'A_C': 0, 'A_c': 0, 'a_C': 0, 'a_c': 0,\n            }\n        },\n        {\n            \"full_counts\": {\n                'ABC': 35, 'ABc': 12, 'AbC': 1, 'Abc': 2,\n                'aBC': 2, 'aBc': 1, 'abC': 12, 'abc': 35,\n            },\n            \"partial_counts\": {\n                'A_C': 324, 'A_c': 126, 'a_C': 126, 'a_c': 324,\n            }\n        }\n    ]\n\n    results = []\n    for case in test_suite:\n        r_ab, r_bc = run_em_algorithm(case['full_counts'], case['partial_counts'])\n        results.append([round(r_ab, 6), round(r_bc, 6)])\n\n    # The final print statement must follow the exact format given.\n    # Using str() on a list of lists produces the required formatting with spaces.\n    print(str(results))\n\ndef run_em_algorithm(full_counts, partial_counts, max_iter=1000, tol=1e-7):\n    \"\"\"\n    Implements the Expectation-Maximization (EM) algorithm for a single test case.\n    \n    Args:\n        full_counts (dict): Counts of the 8 fully typed haplotypes.\n        partial_counts (dict): Counts of the 4 partially typed (A,C) groups.\n        max_iter (int): Maximum number of iterations.\n        tol (float): Convergence tolerance.\n\n    Returns:\n        tuple: A tuple containing the estimated (r_AB, r_BC).\n    \"\"\"\n    # 1. Parse data and calculate total counts\n    # Class counts from fully typed observations\n    C_p = full_counts['ABC'] + full_counts['abc']\n    C_s1 = full_counts['Abc'] + full_counts['aBC']\n    C_s2 = full_counts['ABc'] + full_counts['abC']\n    C_d = full_counts['AbC'] + full_counts['aBc']\n\n    # Ambiguous group counts from partially typed observations\n    N_AC = partial_counts['A_C']\n    N_Ac = partial_counts['A_c']\n    N_aC = partial_counts['a_C']\n    N_ac = partial_counts['a_c']\n    \n    N_total_full = C_p + C_s1 + C_s2 + C_d\n    N_total_partial = N_AC + N_Ac + N_aC + N_ac\n    N_total = N_total_full + N_total_partial\n\n    # 2. Initialization\n    if N_total_full > 0:\n        p = C_p / N_total_full\n        s1 = C_s1 / N_total_full\n        s2 = C_s2 / N_total_full\n        d = C_d / N_total_full\n    else: # Fallback if no fully typed data, not required for these tests\n        p, s1, s2, d = 0.7, 0.1, 0.1, 0.1\n\n    r_ab = s1 + d\n    r_bc = s2 + d\n    D = d\n\n    # 3. EM Iteration loop\n    for _ in range(max_iter):\n        r_ab_old, r_bc_old, D_old = r_ab, r_bc, D\n\n        # E-Step: Calculate expected counts\n        \n        # Denominators for conditional probabilities\n        denom1 = p + d\n        denom2 = s1 + s2\n        \n        # Allocation fractions (gamma parameters)\n        # Handle zero denominator case as per problem spec\n        gamma_p = p / denom1 if denom1 > 0 else 0.5\n        gamma_d = 1.0 - gamma_p\n        \n        gamma_s1 = s1 / denom2 if denom2 > 0 else 0.5\n        gamma_s2 = 1.0 - gamma_s1\n\n        # Expected counts (E_p, E_s1, E_s2, E_d)\n        E_p = C_p + (N_AC + N_ac) * gamma_p\n        E_s1 = C_s1 + (N_Ac + N_aC) * gamma_s1\n        E_s2 = C_s2 + (N_Ac + N_aC) * gamma_s2\n        E_d = C_d + (N_AC + N_ac) * gamma_d\n\n        # M-Step: Update parameters\n        p = E_p / N_total\n        s1 = E_s1 / N_total\n        s2 = E_s2 / N_total\n        d = E_d / N_total\n\n        r_ab = s1 + d\n        r_bc = s2 + d\n        D = d\n        \n        # Check for convergence\n        delta_r_ab = abs(r_ab - r_ab_old)\n        delta_r_bc = abs(r_bc - r_bc_old)\n        delta_D = abs(D - D_old)\n        \n        if max(delta_r_ab, delta_r_bc, delta_D)  tol:\n            break\n            \n    return r_ab, r_bc\n\n# Execute the solver\nif __name__ == '__main__':\n    solve()\n```", "id": "2814383"}]}