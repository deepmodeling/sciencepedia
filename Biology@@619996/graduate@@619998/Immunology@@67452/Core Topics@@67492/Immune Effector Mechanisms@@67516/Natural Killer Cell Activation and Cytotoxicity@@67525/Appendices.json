{"hands_on_practices": [{"introduction": "A cornerstone of experimental immunology is the quantitative assessment of cytotoxic lymphocyte function. In this exercise, you will work with hypothetical data from a classic chromium release assay, which measures target cell lysis across a range of effector-to-target ($E:T$) ratios. You will apply a standard analysis technique, semi-logarithmic interpolation, to calculate and compare the potency of Natural Killer (NK) cells under different conditions using the concept of Lytic Units ($LU$), a common metric in the field [@problem_id:2875114].", "problem": "Natural Killer (NK) cells integrate activating and inhibitory signals to execute cytotoxicity against susceptible target cells. In a standard $4$-hour chromium-$51$ release assay, the cytotoxic readout is the fraction of specific lysis as a function of the effector-to-target (E:T) ratio. Consider an experiment with $T = 10^4$ target cells per well, comparing two conditions: a control condition (no receptor perturbation) and an inhibitory receptor blockade condition. Effector-to-target ratios tested were $1:1$, $3:1$, $10:1$, $30:1$, and $100:1$. The measured specific lysis values (fractions, not percentages) for each condition were:\n\n- Control: at $1:1 \\rightarrow 0.06$, $3:1 \\rightarrow 0.14$, $10:1 \\rightarrow 0.31$, $30:1 \\rightarrow 0.56$, $100:1 \\rightarrow 0.77$.\n- Blockade: at $1:1 \\rightarrow 0.09$, $3:1 \\rightarrow 0.22$, $10:1 \\rightarrow 0.46$, $30:1 \\rightarrow 0.71$, $100:1 \\rightarrow 0.87$.\n\nAssume the following:\n- Between the tested E:T ratios, the specific lysis varies monotonically and approximately linearly with the base-$10$ logarithm of the E:T ratio (a common empirical property of cytotoxic dose-response curves).\n- One lytic unit at $0.20$ specific lysis (denoted LU$20$) is defined as the number of effector cells required to achieve $0.20$ specific lysis of $T$ targets under the assay conditions. The “lytic units per $10^7$ effector cells” is the count of such LU$20$ units contained in $10^7$ effector cells.\n\nUsing only the definitions and the data above, compute the fold-change in LU$20$ per $10^7$ effector cells in the blockade condition relative to the control condition. Round your final answer to three significant figures. Express the final answer as a unitless number (no units, no percentage sign).", "solution": "The problem will first be subject to rigorous validation.\n\n**Step 1: Extract Givens**\n- Assay: $4$-hour chromium-$51$ release assay.\n- Target cells per well: $T = 10^4$.\n- Effector-to-target (E:T) ratios tested ($R$): $1:1$, $3:1$, $10:1$, $30:1$, and $100:1$.\n- Specific lysis data for Control condition ($L_{\\text{ctrl}}$):\n  - At $R=1$, $L_{\\text{ctrl}} = 0.06$.\n  - At $R=3$, $L_{\\text{ctrl}} = 0.14$.\n  - At $R=10$, $L_{\\text{ctrl}} = 0.31$.\n  - At $R=30$, $L_{\\text{ctrl}} = 0.56$.\n  - At $R=100$, $L_{\\text{ctrl}} = 0.77$.\n- Specific lysis data for Blockade condition ($L_{\\text{block}}$):\n  - At $R=1$, $L_{\\text{block}} = 0.09$.\n  - At $R=3$, $L_{\\text{block}} = 0.22$.\n  - At $R=10$, $L_{\\text{block}} = 0.46$.\n  - At $R=30$, $L_{\\text{block}} = 0.71$.\n  - At $R=100$, $L_{\\text{block}} = 0.87$.\n- Assumption: Specific lysis ($L$) varies approximately linearly with $\\log_{10}(R)$.\n- Definition 1: One lytic unit at $0.20$ specific lysis (LU$20$) is the number of effector cells ($E_{20}$) required to achieve $0.20$ specific lysis.\n- Definition 2: Lytic units per $10^7$ effector cells is given by the formula $\\frac{10^7}{E_{20}}$.\n- Objective: Compute the fold-change in LU$20$ per $10^7$ cells for the blockade condition relative to the control condition.\n- Final Answer Requirement: Round to three significant figures.\n\n**Step 2: Validate Using Extracted Givens**\n- **Scientific Grounding**: The problem describes a standard immunological cytotoxicity assay. The concept of lytic units and the semi-log linear approximation of the dose-response curve are established methods for analyzing such data. The provided numerical values are within a realistic range for this type of experiment. The problem is scientifically grounded.\n- **Well-Posedness**: The problem is self-contained. All necessary data, definitions, and assumptions for the calculation are provided. The target lysis value of $0.20$ is bracketed by the experimental data points for both conditions, allowing for interpolation. The problem is well-posed.\n- **Objectivity**: The problem statement is quantitative and objective, free of subjective or ambiguous language.\n\n**Step 3: Verdict and Action**\nThe problem is valid. A solution will be derived.\n\nThe task is to compute the fold-change, which is the ratio of the lytic units per $10^7$ cells in the blockade condition to that in the control condition. Let $U$ denote the lytic units per $10^7$ cells.\n$$ \\text{Fold-Change} = \\frac{U_{\\text{blockade}}}{U_{\\text{control}}} $$\nBy definition, $U = \\frac{10^7}{E_{20}}$, where $E_{20}$ is the number of effector cells required to achieve a specific lysis of $0.20$. Substituting this into the fold-change expression gives:\n$$ \\text{Fold-Change} = \\frac{10^7 / E_{20, \\text{blockade}}}{10^7 / E_{20, \\text{control}}} = \\frac{E_{20, \\text{control}}}{E_{20, \\text{blockade}}} $$\nThe number of effector cells, $E$, is related to the effector-to-target ratio, $R$, and the number of target cells, $T$, by the equation $E = R \\times T$. Therefore, $E_{20} = R_{20} \\times T$, where $R_{20}$ is the E:T ratio that yields $0.20$ specific lysis. The fold-change expression becomes:\n$$ \\text{Fold-Change} = \\frac{R_{20, \\text{control}} \\times T}{R_{20, \\text{blockade}} \\times T} = \\frac{R_{20, \\text{control}}}{R_{20, \\text{blockade}}} $$\nThe problem is now reduced to finding the E:T ratio ($R_{20}$) for each condition. We use the given assumption that specific lysis, $L$, is a linear function of $x = \\log_{10}(R)$. We apply linear interpolation to find the value of $x$ corresponding to $L=0.20$. The formula for linear interpolation to find $x$ given $y$ is:\n$$ x = x_1 + (y - y_1) \\frac{x_2 - x_1}{y_2 - y_1} $$\nHere, $x = \\log_{10}(R)$ and $y=L$.\n\n**1. Calculation for the Control Condition**\nWe seek $R_{20, \\text{control}}$. The target lysis is $L=0.20$. From the data, this value lies between $L_1=0.14$ (at $R_1=3$) and $L_2=0.31$ (at $R_2=10$). The corresponding logarithmic points are $x_1 = \\log_{10}(3)$ and $x_2 = \\log_{10}(10)=1$.\nWe interpolate to find $x_{20, \\text{control}} = \\log_{10}(R_{20, \\text{control}})$:\n$$ x_{20, \\text{control}} = \\log_{10}(3) + (0.20 - 0.14) \\frac{1 - \\log_{10}(3)}{0.31 - 0.14} $$\n$$ x_{20, \\text{control}} = \\log_{10}(3) + \\frac{0.06}{0.17} (1 - \\log_{10}(3)) $$\nEvaluating this expression:\n$$ x_{20, \\text{control}} \\approx 0.477121 + \\frac{0.06}{0.17} (1 - 0.477121) \\approx 0.477121 + (0.352941)(0.522879) \\approx 0.661667 $$\nThen, the E:T ratio is:\n$$ R_{20, \\text{control}} = 10^{x_{20, \\text{control}}} \\approx 10^{0.661667} \\approx 4.5885 $$\n\n**2. Calculation for the Blockade Condition**\nWe seek $R_{20, \\text{blockade}}$. The target lysis is $L=0.20$. This value lies between $L_1=0.09$ (at $R_1=1$) and $L_2=0.22$ (at $R_2=3$). The corresponding logarithmic points are $x_1 = \\log_{10}(1)=0$ and $x_2 = \\log_{10}(3)$.\nWe interpolate to find $x_{20, \\text{blockade}} = \\log_{10}(R_{20, \\text{blockade}})$:\n$$ x_{20, \\text{blockade}} = 0 + (0.20 - 0.09) \\frac{\\log_{10}(3) - 0}{0.22 - 0.09} $$\n$$ x_{20, \\text{blockade}} = \\frac{0.11}{0.13} \\log_{10}(3) $$\nEvaluating this expression:\n$$ x_{20, \\text{blockade}} \\approx \\frac{0.11}{0.13} \\times 0.477121 \\approx (0.846154)(0.477121) \\approx 0.403786 $$\nThen, the E:T ratio is:\n$$ R_{20, \\text{blockade}} = 10^{x_{20, \\text{blockade}}} \\approx 10^{0.403786} \\approx 2.5339 $$\n\n**3. Final Fold-Change Calculation**\nThe fold-change is the ratio of these two E:T ratios:\n$$ \\text{Fold-Change} = \\frac{R_{20, \\text{control}}}{R_{20, \\text{blockade}}} \\approx \\frac{4.5885}{2.5339} \\approx 1.81085 $$\nRounding to three significant figures, as required by the problem statement, yields $1.81$.", "answer": "$$\\boxed{1.81}$$", "id": "2875114"}, {"introduction": "Moving from empirical data analysis to theoretical modeling, this practice challenges you to derive a cytotoxicity model from first principles. You will explore the stochastic nature of Antibody-Dependent Cellular Cytotoxicity (ADCC), where random encounters between effector and target cells determine the ultimate outcome. By applying the Poisson distribution to model conjugate formation, you will build an equation that predicts the fraction of lysed targets based on parameters like the effector-to-target ratio ($R$) and single-cell kill probability ($p$), gaining insight into the probabilistic foundations of immune responses [@problem_id:2875036].", "problem": "A $4$-hour antibody-dependent cellular cytotoxicity (ADCC) assay is performed using human natural killer (NK) cells as effectors and a homogeneous tumor cell line as targets. A fraction $f$ of the target cells is opsonized by immunoglobulin G (IgG) at the start of the assay, enabling recognition via the Fc gamma receptor IIIa (CD16). During the assay, each NK cell forms exactly one stable conjugate with a randomly chosen target, and conjugation events are independent across NK cells. Let the total numbers of effectors and targets be $E$ and $T$, respectively, with an effector-to-target ratio $R = E/T$. Assume $T$ is sufficiently large that the number of NK conjugates received by any given target can be modeled by the appropriate large-population limit of independent random assignments.\n\nFor any opsonized target that receives $n$ NK conjugates, each conjugate independently triggers a lethal hit with probability $p$ within the $4$-hour window. A target is considered lysed if at least one lethal hit occurs within this window. Non-opsonized targets are not lysed by ADCC on this timescale, and other cytotoxic pathways are negligible. You may assume statistical independence of conjugation and triggering events across effectors and targets, conditional on opsonization status.\n\nUsing only these assumptions and standard probabilistic limits for large $T$, derive from first principles the expected fraction of targets lysed after $4$ hours in terms of $R$, $f$, and $p$. Then evaluate this expected fraction for $R = 8$, $f = 0.6$, and $p = 0.18$. Express your final result as a decimal fraction and round your answer to four significant figures.", "solution": "The problem as stated is scientifically grounded, well-posed, objective, and self-contained. It presents a standard probabilistic modeling scenario in immunology. Therefore, I will proceed with a full derivation.\n\nThe objective is to derive the expected fraction of target cells that are lysed after a $4$-hour incubation period. This requires a step-by-step probabilistic analysis based on the given assumptions.\n\nFirst, we must establish the statistical distribution of natural killer (NK) cell conjugates per target cell. We are given $E$ effector cells (NK cells) and $T$ target cells. Each of the $E$ NK cells forms a conjugate with a randomly and independently chosen target. This is a classic \"balls-into-bins\" problem, where $E$ balls are placed into $T$ bins. The number of conjugates, $N$, received by a single target cell follows a binomial distribution, $N \\sim B(E, 1/T)$. The problem states that $T$ is sufficiently large, and we are to use the \"appropriate large-population limit\". As $T \\rightarrow \\infty$ and $E \\rightarrow \\infty$ such that the ratio $R = E/T$ remains constant, the binomial distribution $B(E, 1/T)$ converges to a Poisson distribution with mean $\\lambda = E \\times (1/T) = R$. Therefore, the probability that a randomly selected target cell receives $n$ NK cell conjugates is given by the Poisson probability mass function:\n$$ P(N=n) = \\frac{e^{-R} R^n}{n!} \\quad \\text{for } n = 0, 1, 2, \\dots $$\nHere, $R$ is the effector-to-target ratio.\n\nNext, we determine the probability of lysis for a single target cell. The fate of a target cell depends on two factors: its opsonization status and the number of NK conjugates it receives.\nThe problem states that a fraction $f$ of the target cells are opsonized, and the remaining fraction $1-f$ are non-opsonized. Non-opsonized targets are not lysed. Thus, the probability of lysis for a non-opsonized target is $0$.\n\nNow, consider an opsonized target cell. If this cell receives $n$ conjugates, each conjugate has an independent probability $p$ of triggering a lethal hit. A target is lysed if at least one lethal hit occurs. It is more direct to calculate the probability of the complementary event: no lethal hits occur. For a single conjugate, the probability of *not* triggering a lethal hit is $1-p$. Since the $n$ triggers are independent, the probability that *none* of the $n$ conjugates deliver a lethal hit is $(1-p)^n$.\nThe probability of lysis for an opsonized target that has formed $n$ conjugates, $P(L|N=n, \\text{opsonized})$, is therefore:\n$$ P(L \\,|\\, N=n, \\text{opsonized}) = 1 - (1-p)^n $$\nThis probability is conditional on receiving exactly $n$ conjugates. To find the overall probability of lysis for any given opsonized target, we must average this conditional probability over all possible values of $n$, weighted by the Poisson distribution $P(N=n)$:\n$$ P(L \\,|\\, \\text{opsonized}) = \\sum_{n=0}^{\\infty} P(L \\,|\\, N=n, \\text{opsonized}) P(N=n) $$\nSubstituting the expressions derived above:\n$$ P(L \\,|\\, \\text{opsonized}) = \\sum_{n=0}^{\\infty} [1 - (1-p)^n] \\frac{e^{-R} R^n}{n!} $$\nWe can separate the sum into two parts:\n$$ P(L \\,|\\, \\text{opsonized}) = \\sum_{n=0}^{\\infty} \\frac{e^{-R} R^n}{n!} - \\sum_{n=0}^{\\infty} (1-p)^n \\frac{e^{-R} R^n}{n!} $$\nThe first term is the sum of all probabilities of the Poisson distribution, which is equal to $1$. The second term can be rewritten by factoring out the constant $e^{-R}$:\n$$ \\sum_{n=0}^{\\infty} (1-p)^n \\frac{e^{-R} R^n}{n!} = e^{-R} \\sum_{n=0}^{\\infty} \\frac{[R(1-p)]^n}{n!} $$\nThe summation is the Maclaurin series for the exponential function, $\\sum_{k=0}^{\\infty} \\frac{x^k}{k!} = e^x$. With $x = R(1-p)$, the sum evaluates to $\\exp(R(1-p))$.\nSo, the second term becomes:\n$$ e^{-R} \\exp(R(1-p)) = \\exp(-R + R(1-p)) = \\exp(-R + R - Rp) = \\exp(-Rp) $$\nTherefore, the probability of lysis for an opsonized target is:\n$$ P(L \\,|\\, \\text{opsonized}) = 1 - \\exp(-Rp) $$\n\nFinally, we calculate the total expected fraction of lysed targets, $L_{frac}$. This is the weighted average of the lysis probabilities for the opsonized and non-opsonized subpopulations. Using the law of total probability:\n$$ L_{frac} = P(L) = P(L \\,|\\, \\text{opsonized})P(\\text{opsonized}) + P(L \\,|\\, \\text{non-opsonized})P(\\text{non-opsonized}) $$\nWe are given $P(\\text{opsonized}) = f$ (and thus $P(\\text{non-opsonized}) = 1-f$) and $P(L \\,|\\, \\text{non-opsonized}) = 0$. Substituting these values along with our derived expression for $P(L \\,|\\, \\text{opsonized})$:\n$$ L_{frac} = (1 - \\exp(-Rp)) \\cdot f + (0) \\cdot (1-f) $$\nThis gives the final analytical expression for the expected fraction of lysed targets:\n$$ L_{frac} = f(1 - \\exp(-Rp)) $$\nThis is the general solution derived from first principles.\n\nNow, we must evaluate this expression for the given numerical values: $R = 8$, $f = 0.6$, and $p = 0.18$.\nFirst, calculate the exponent:\n$$ -Rp = -(8)(0.18) = -1.44 $$\nNow substitute the values into the derived formula:\n$$ L_{frac} = 0.6 \\times (1 - \\exp(-1.44)) $$\nCalculating the numerical value:\n$$ \\exp(-1.44) \\approx 0.23692776... $$\n$$ 1 - \\exp(-1.44) \\approx 1 - 0.23692776 = 0.76307224... $$\n$$ L_{frac} \\approx 0.6 \\times 0.76307224 = 0.457843344... $$\nThe problem requires the result to be rounded to four significant figures.\n$$ L_{frac} \\approx 0.4578 $$\nThis is the final numerical answer.", "answer": "$$\\boxed{0.4578}$$", "id": "2875036"}, {"introduction": "This final practice elevates our perspective to the systems level, tackling the complex interplay between a diverse Natural Killer (NK) cell repertoire and a heterogeneous tumor. You will construct a computational simulation to test the hypothesis that NK repertoire diversity is crucial for effective tumor immunosurveillance. By implementing a signal integration rule and exploring how different NK clones cover a landscape of tumor variants defined by \"missing-self\" ($m$) and \"induced-self\" ($s$) signals, you will gain hands-on experience in the powerful domain of in silico immunology [@problem_id:2875099].", "problem": "Construct a complete, runnable program that simulates how increasing Natural Killer (NK) repertoire diversity improves coverage of tumor variants with heterogeneous Major Histocompatibility Complex class I (MHC I) and stress-ligand expression, using a principled, first-principles integration rule. The simulation must be built from the following fundamental base: (i) NK cells integrate activating and inhibitory cues; (ii) MHC I engagement of inhibitory receptors reduces NK activation (\"missing-self\" increases activation when MHC I is low); (iii) stress-induced ligands engaging activating receptors increase NK activation (\"induced-self\"); and (iv) activation occurs when the net signal exceeds a threshold. Your program must translate these rules into a quantitative decision function that depends on clone-specific sensitivities and tumor ligand levels, and must compute the fraction of a heterogeneous tumor distribution that is recognized (killed) by at least one clone in the repertoire.\n\nModel specification:\n- Tumor variants are represented by two continuous variables: MHC I level $m \\in [0,1]$ and stress-ligand level $s \\in [0,1]$. Heterogeneity across a tumor population is modeled as independent Beta distributions for $m$ and $s$ with parameters $(\\beta_m^1,\\beta_m^2)$ and $(\\beta_s^1,\\beta_s^2)$, respectively.\n- Each NK clone $i$ is characterized by an activating sensitivity $\\alpha_i > 0$, an inhibitory sensitivity $\\kappa_i > 0$, and an activation threshold $\\theta_i \\ge 0$. The net signal generated by clone $i$ against a tumor variant $(m,s)$ is defined as $x_i(m,s) = \\alpha_i s - \\kappa_i m - \\theta_i$. Clone $i$ recognizes (kills) the variant if and only if $x_i(m,s) > 0$. A variant is considered covered by the repertoire if any clone recognizes it.\n- To model repertoire diversity using a single parameter $D \\in \\mathbb{N}$ (the number of distinct clones), construct a set of $D$ clones whose $(\\alpha_i,\\kappa_i)$ values evenly span prespecified ranges $[\\alpha_{\\min},\\alpha_{\\max}]$ and $[\\kappa_{\\min},\\kappa_{\\max}]$ with an antagonistic trade-off: let $t_j = j/(D-1)$ for $j \\in \\{0,1,\\dots,D-1\\}$ when $D \\ge 2$ and $t_0 = 1/2$ when $D=1$, and define $\\alpha_j = \\alpha_{\\min} + t_j(\\alpha_{\\max}-\\alpha_{\\min})$ and $\\kappa_j = \\kappa_{\\max} - t_j(\\kappa_{\\max}-\\kappa_{\\min})$. All clones share the same threshold $\\theta$.\n- Let coverage be the expected indicator of recognition over the tumor distribution, that is, the integral over $(m,s) \\in [0,1]^2$ of the indicator that any clone recognizes $(m,s)$, weighted by the joint density (the product of Beta densities due to independence). Numerically approximate this expectation by a Riemann sum on a uniform grid of size $G \\times G$ using midpoints. Express the coverage as a decimal in $[0,1]$.\n\nYour program must:\n- Implement the decision rule $x_i(m,s) = \\alpha_i s - \\kappa_i m - \\theta$.\n- Construct the clone set from $D$, $\\alpha_{\\min}$, $\\alpha_{\\max}$, $\\kappa_{\\min}$, $\\kappa_{\\max}$, and $\\theta$ as specified.\n- Approximate the coverage using a uniform grid of $G \\times G$ midpoints on $[0,1]^2$ and Beta probability density functions for $m$ and $s$ with parameters $(\\beta_m^1,\\beta_m^2)$ and $(\\beta_s^1,\\beta_s^2)$, respectively.\n- Produce a single line of output containing the coverages for all requested test cases, rounded to exactly three decimal places, as a comma-separated list inside square brackets. The values must be decimals, not percentages.\n\nTest suite:\nFor all test cases except where noted, use $\\alpha_{\\min} = 0.5$, $\\alpha_{\\max} = 2.0$, $\\kappa_{\\min} = 0.5$, $\\kappa_{\\max} = 2.0$, $\\theta = 0.3$, and $G = 121$.\n- Test $1$: $D=1$, $(\\beta_m^1,\\beta_m^2)=(2,2)$, $(\\beta_s^1,\\beta_s^2)=(2,2)$.\n- Test $2$: $D=8$, $(\\beta_m^1,\\beta_m^2)=(2,2)$, $(\\beta_s^1,\\beta_s^2)=(2,2)$.\n- Test $3$: $D=1$, $(\\beta_m^1,\\beta_m^2)=(5,1)$, $(\\beta_s^1,\\beta_s^2)=(1,5)$.\n- Test $4$: $D=8$, $(\\beta_m^1,\\beta_m^2)=(5,1)$, $(\\beta_s^1,\\beta_s^2)=(1,5)$.\n- Test $5$: $D=1$, $(\\beta_m^1,\\beta_m^2)=(1,5)$, $(\\beta_s^1,\\beta_s^2)=(5,1)$.\n- Test $6$: $D=8$, $(\\beta_m^1,\\beta_m^2)=(1,5)$, $(\\beta_s^1,\\beta_s^2)=(5,1)$.\n- Test $7$: $D=4$, $(\\beta_m^1,\\beta_m^2)=(1,1)$, $(\\beta_s^1,\\beta_s^2)=(1,1)$.\n- Test $8$: $D=16$, $(\\beta_m^1,\\beta_m^2)=(1,1)$, $(\\beta_s^1,\\beta_s^2)=(1,1)$, with $\\theta=0.6$ and $G=151$.\n\nFinal output format:\n- Your program should produce a single line of output containing the coverages for Tests $1$ through $8$ in order, rounded to exactly three decimals, as a comma-separated list enclosed in square brackets (e.g., $[0.123,0.456,0.789]$).", "solution": "The problem statement has been subjected to rigorous validation and is determined to be valid. It is scientifically grounded in the principles of immunology, mathematically well-posed, and provides a complete and unambiguous set of specifications for constructing a computational model. There are no logical contradictions, scientific inaccuracies, or missing data. The task is to construct a program that simulates Natural Killer (NK) cell repertoire coverage against a heterogeneous tumor population, a non-trivial problem in computational biology.\n\nThe solution proceeds by first translating the biological principles into a precise mathematical framework, and second, implementing this framework as a numerical algorithm.\n\nFirst, we formalize the model. The state of a tumor cell variant is defined by a point in a two-dimensional feature space, $(m, s) \\in [0,1] \\times [0,1]$, where $m$ is the Major Histocompatibility Complex class I (MHC I) level and $s$ is the stress-ligand level. The heterogeneity of the tumor is modeled by assuming $m$ and $s$ are independent random variables following Beta distributions. The probability density function for $m$ is $p_m(m) = \\text{Beta}(m; \\beta_m^1, \\beta_m^2)$, and for $s$ it is $p_s(s) = \\text{Beta}(s; \\beta_s^1, \\beta_s^2)$. The joint probability density is $p(m,s) = p_m(m) p_s(s)$. The Beta distribution PDF is given by:\n$$\nf(x; \\alpha, \\beta) = \\frac{x^{\\alpha-1}(1-x)^{\\beta-1}}{B(\\alpha, \\beta)}\n$$\nwhere $B(\\alpha, \\beta)$ is the Beta function, serving as a normalization constant.\n\nNext, we model the NK cell repertoire. The repertoire consists of $D$ distinct clones, indexed by $j \\in \\{0, 1, \\dots, D-1\\}$. Each clone is defined by its activating sensitivity $\\alpha_j > 0$ and inhibitory sensitivity $\\kappa_j > 0$. All clones share a common activation threshold $\\theta$. The sensitivities are constructed based on an antagonistic trade-off relationship. A parameter $t_j$ is defined as $t_j = j/(D-1)$ for $D \\ge 2$, and $t_0 = 1/2$ for the special case of $D=1$. The sensitivities are then determined by linear interpolation across specified ranges:\n$$\n\\alpha_j = \\alpha_{\\min} + t_j(\\alpha_{\\max} - \\alpha_{\\min})\n$$\n$$\n\\kappa_j = \\kappa_{\\max} - t_j(\\kappa_{\\max} - \\kappa_{\\min})\n$$\nThe net activation signal received by clone $j$ from a tumor cell $(m,s)$ is a linear integration of inputs:\n$$\nx_j(m,s) = \\alpha_j s - \\kappa_j m - \\theta\n$$\nClone $j$ is activated and kills the tumor cell if this signal is positive, i.e., $x_j(m,s) > 0$. A tumor cell is considered \"covered\" or recognized by the repertoire if at least one clone is activated. Let $\\mathcal{I}(m,s)$ be the indicator function for this event:\n$$\n\\mathcal{I}(m,s) =\n\\begin{cases}\n1 & \\text{if } \\exists j \\in \\{0, \\dots, D-1\\} \\text{ such that } x_j(m,s) > 0 \\\\\n0 & \\text{otherwise}\n\\end{cases}\n$$\nThe total coverage, $C$, is the expected value of this indicator function over the entire tumor population, calculated by integrating over the state space, weighted by the joint probability density:\n$$\nC = \\mathbb{E}[\\mathcal{I}(m,s)] = \\int_{0}^{1} \\int_{0}^{1} \\mathcal{I}(m,s) p_m(m) p_s(s) \\,dm\\,ds\n$$\nThis integral does not, in general, have a simple analytical solution. Therefore, a numerical approximation is required. The problem specifies a Riemann sum on a uniform $G \\times G$ grid over the unit square $[0,1]^2$. The grid cells have dimensions $\\Delta m = \\Delta s = 1/G$. We use the midpoints of these cells for evaluation:\n$m_k = (k + 0.5)/G$ for $k=0, \\dots, G-1$\n$s_l = (l + 0.5)/G$ for $l=0, \\dots, G-1$\nThe coverage is then approximated by the sum:\n$$\nC \\approx \\sum_{k=0}^{G-1} \\sum_{l=0}^{G-1} \\mathcal{I}(m_k, s_l) p_m(m_k) p_s(s_l) (\\Delta m \\Delta s)\n$$\nwhere the area element is $(\\Delta m \\Delta s) = (1/G)^2$.\n\nFor the implementation, a vectorized approach using `numpy` is mandatory for efficiency. First, we generate the $D$ clone parameter pairs $(\\alpha_j, \\kappa_j)$. Second, we create two 1D arrays representing the midpoint coordinates for the $m$ and $s$ axes, and then use `np.meshgrid` to generate 2D arrays, `m_grid` and `s_grid`, of shape $(G, G)$ holding all grid point coordinates. The probability densities $p_m(m_k)$ and $p_s(s_l)$ are calculated for each grid point using `scipy.stats.beta.pdf`, resulting in two 2D arrays, `pdf_m` and `pdf_s`. The weight for each grid cell is then `(pdf_m * pdf_s) / (G*G)`.\n\nThe most computationally intensive step is evaluating $\\mathcal{I}(m_k, s_l)$ for all $(k,l)$. This can be vectorized using broadcasting. The clone parameters `alphas` and `kappas` (shape $(D,)$) and the grid coordinates `m_grid` and `s_grid` (shape $(G,G)$) are reshaped to be compatible for broadcasting, e.g., `alphas` to $(D, 1, 1)$, and grids to $(1, G, G)$. The net signal for all clones on all grid points can be computed in a single operation:\n`signals = alphas[:, None, None] * s_grid[None, :, :] - kappas[:, None, None] * m_grid[None, :, :] - theta`\nThis produces a 3D array of shape $(D, G, G)$. A logical OR operation, `np.any(signals > 0, axis=0)`, is then applied along the clone axis (axis 0) to compute the indicator array $\\mathcal{I}(m_k, s_l)$ of shape $(G, G)$. Finally, the total coverage is the sum of the element-wise product of this indicator array and the pre-computed weight array. This procedure is repeated for each test case.", "answer": "```python\nimport numpy as np\nfrom scipy.stats import beta\n\ndef solve():\n    \"\"\"\n    Main function to run the simulation for all test cases and print the results.\n    \"\"\"\n    \n    # Common parameters for tests 1-7\n    common_params = {\n        'alpha_min': 0.5, 'alpha_max': 2.0,\n        'kappa_min': 0.5, 'kappa_max': 2.0,\n        'theta': 0.3, 'G': 121\n    }\n\n    test_cases = [\n        {'D': 1, 'beta_m': (2, 2), 'beta_s': (2, 2), **common_params},\n        {'D': 8, 'beta_m': (2, 2), 'beta_s': (2, 2), **common_params},\n        {'D': 1, 'beta_m': (5, 1), 'beta_s': (1, 5), **common_params},\n        {'D': 8, 'beta_m': (5, 1), 'beta_s': (1, 5), **common_params},\n        {'D': 1, 'beta_m': (1, 5), 'beta_s': (5, 1), **common_params},\n        {'D': 8, 'beta_m': (1, 5), 'beta_s': (5, 1), **common_params},\n        {'D': 4, 'beta_m': (1, 1), 'beta_s': (1, 1), **common_params},\n        # Test 8 has custom parameters\n        {\n            'D': 16, 'beta_m': (1, 1), 'beta_s': (1, 1),\n            'alpha_min': 0.5, 'alpha_max': 2.0,\n            'kappa_min': 0.5, 'kappa_max': 2.0,\n            'theta': 0.6, 'G': 151\n        },\n    ]\n\n    results = []\n    for params in test_cases:\n        coverage = calculate_coverage(**params)\n        results.append(coverage)\n    \n    # Format the output as specified: a list of strings rounded to 3 decimal places.\n    formatted_results = [f'{r:.3f}' for r in results]\n    print(f\"[{','.join(formatted_results)}]\")\n\ndef calculate_coverage(D, beta_m, beta_s, alpha_min, alpha_max, kappa_min, kappa_max, theta, G):\n    \"\"\"\n    Calculates the NK cell repertoire coverage for a given set of parameters.\n\n    Args:\n        D (int): Number of distinct NK clones.\n        beta_m (tuple): Parameters (a, b) for the Beta distribution of MHC I levels.\n        beta_s (tuple): Parameters (a, b) for the Beta distribution of stress-ligand levels.\n        alpha_min (float): Minimum activating sensitivity.\n        alpha_max (float): Maximum activating sensitivity.\n        kappa_min (float): Minimum inhibitory sensitivity.\n        kappa_max (float): Maximum inhibitory sensitivity.\n        theta (float): Activation threshold.\n        G (int): Grid size for numerical integration.\n\n    Returns:\n        float: The calculated coverage, a value between 0 and 1.\n    \"\"\"\n    \n    # Step 1: Generate NK clone repertoire\n    if D == 1:\n        t = np.array([0.5])\n    else:\n        t = np.linspace(0, 1, num=D)\n    \n    alphas = alpha_min + t * (alpha_max - alpha_min)\n    kappas = kappa_max - t * (kappa_max - kappa_min)\n\n    # Step 2: Set up the numerical grid\n    h = 1.0 / G\n    grid_coords = np.linspace(0, 1, num=G, endpoint=False) + h / 2.0\n    m_grid, s_grid = np.meshgrid(grid_coords, grid_coords)\n\n    # Step 3: Calculate weights from probability density functions\n    pdf_m = beta.pdf(m_grid, a=beta_m[0], b=beta_m[1])\n    pdf_s = beta.pdf(s_grid, a=beta_s[0], b=beta_s[1])\n    \n    # The area element dA = dm * ds\n    dA = h * h\n    weights = pdf_m * pdf_s * dA\n\n    # Step 4: Evaluate recognition condition for all clones and grid points\n    # Use broadcasting for efficiency.\n    # alphas -> (D, 1, 1)\n    # s_grid -> (1, G, G)\n    # kappas -> (D, 1, 1)\n    # m_grid -> (1, G, G)\n    # The result 'signals' will have shape (D, G, G)\n    signals = (alphas[:, np.newaxis, np.newaxis] * s_grid[np.newaxis, :, :] - \n               kappas[:, np.newaxis, np.newaxis] * m_grid[np.newaxis, :, :] - \n               theta)\n    \n    # A tumor variant is recognized if ANY clone's signal is > 0.\n    # This reduces the D-dimension to a boolean (G, G) grid.\n    recognition_grid = np.any(signals > 0, axis=0)\n\n    # Step 5: Compute the coverage by summing weights where recognition occurs.\n    coverage = np.sum(recognition_grid * weights)\n    \n    return coverage\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "2875099"}]}