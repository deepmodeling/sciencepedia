{"hands_on_practices": [{"introduction": "Detecting the signature of natural selection in protein-coding genes is a central task in evolutionary biology. The ratio of the nonsynonymous substitution rate ($d_N$) to the synonymous substitution rate ($d_S$) provides a powerful metric, where a ratio greater than one ($d_N/d_S \\gt 1$) indicates positive selection. This exercise [@problem_id:2842372] allows you to apply this fundamental concept to the Major Histocompatibility Complex (MHC), quantifying the intense selective pressure that pathogens exert on the parts of the immune system responsible for antigen presentation.", "problem": "Across many vertebrates, the Major Histocompatibility Complex (MHC) peptide-binding region is a focal point of host-pathogen coevolution. Consider an alignment of orthologous coding sequences from two closely related primate species for an MHC class II gene, partitioned into the peptide-binding region (PBR) and the non-peptide-binding remainder (non-PBR). Let $d_N$ denote the number of nonsynonymous substitutions per nonsynonymous site and $d_S$ denote the number of synonymous substitutions per synonymous site. Assume that sequence divergence is sufficiently low that multiple hits are negligible, so that counting observed fixed differences divided by the corresponding site class is an appropriate estimator of $d_N$ and $d_S$. You are given the following for each region:\n- PBR: nonsynonymous sites $L_N = 420$, synonymous sites $L_S = 180$, observed fixed nonsynonymous differences $N = 58$, observed fixed synonymous differences $S = 6$.\n- Non-PBR: nonsynonymous sites $L_N = 2880$, synonymous sites $L_S = 960$, observed fixed nonsynonymous differences $N = 35$, observed fixed synonymous differences $S = 20$.\n\nUsing only core definitions (nonsynonymous versus synonymous, and substitutions per site), compute the region-specific $d_N/d_S$ values, and interpret which selective regimes are most consistent with the results in each region in the context of comparative and evolutionary immunology. For your final reported value, compute the ratio\n$$\nR \\equiv \\frac{(d_N/d_S)_{\\mathrm{PBR}}}{(d_N/d_S)_{\\mathrm{non\\text{-}PBR}}}.\n$$\nRound your final answer for $R$ to three significant figures. Do not include any units in your final reported value.", "solution": "The core of the problem lies in the analysis of selective pressure on different regions of a gene by comparing the rate of nonsynonymous substitutions ($d_N$) to the rate of synonymous substitutions ($d_S$). The rate $d_S$ is the number of synonymous substitutions ($S$) per synonymous site ($L_S$), and it serves as a baseline estimate of the mutation rate under neutral evolution, as these substitutions do not alter the amino acid sequence and are thus largely invisible to natural selection. The rate $d_N$ is the number of nonsynonymous substitutions ($N$) per nonsynonymous site ($L_N$).\n\nAccording to the problem statement, we are to use the simple estimator where the rate is the count of observed differences divided by the number of sites.\nFor any given region of a gene, these rates are defined as:\n$$\nd_N = \\frac{N}{L_N}\n$$\n$$\nd_S = \\frac{S}{L_S}\n$$\nThe ratio $\\omega = d_N/d_S$ is a classic indicator of the mode of selection acting on a protein-coding sequence. A value of $\\omega = 1$ suggests neutral evolution, where nonsynonymous mutations are fixed at the same rate as synonymous ones. A value of $\\omega  1$ indicates purifying (or negative) selection, where nonsynonymous mutations are deleterious and are removed from the population. A value of $\\omega  1$ is a strong signal of positive (or diversifying) selection, where nonsynonymous mutations are advantageous and are driven to fixation at a higher rate than neutral mutations.\n\nFirst, we will analyze the peptide-binding region (PBR). The provided data for the PBR are:\n- Nonsynonymous sites, $L_{N, \\mathrm{PBR}} = 420$\n- Synonymous sites, $L_{S, \\mathrm{PBR}} = 180$\n- Nonsynonymous differences, $N_{\\mathrm{PBR}} = 58$\n- Synonymous differences, $S_{\\mathrm{PBR}} = 6$\n\nWe compute the rates for the PBR:\n$$\n(d_N)_{\\mathrm{PBR}} = \\frac{N_{\\mathrm{PBR}}}{L_{N, \\mathrm{PBR}}} = \\frac{58}{420}\n$$\n$$\n(d_S)_{\\mathrm{PBR}} = \\frac{S_{\\mathrm{PBR}}}{L_{S, \\mathrm{PBR}}} = \\frac{6}{180} = \\frac{1}{30}\n$$\nNow, we calculate the ratio $\\omega_{\\mathrm{PBR}} = (d_N/d_S)_{\\mathrm{PBR}}$:\n$$\n\\omega_{\\mathrm{PBR}} = \\frac{(d_N)_{\\mathrm{PBR}}}{(d_S)_{\\mathrm{PBR}}} = \\frac{58/420}{1/30} = \\frac{58}{420} \\times 30 = \\frac{58}{14} = \\frac{29}{7}\n$$\nNumerically, $\\omega_{\\mathrm{PBR}} \\approx 4.14$. Since this value is significantly greater than $1$, it is indicative of strong positive selection. This is the expected result for the PBR of an MHC gene. This region is directly involved in binding and presenting peptides from pathogens. Host-pathogen coevolution creates intense selective pressure for the host to recognize a diverse and evolving array of pathogen peptides, which drives the rapid evolution of new amino acid variants in the PBR.\n\nNext, we analyze the non-peptide-binding region (non-PBR). The provided data for this region are:\n- Nonsynonymous sites, $L_{N, \\text{non-PBR}} = 2880$\n- Synonymous sites, $L_{S, \\text{non-PBR}} = 960$\n- Nonsynonymous differences, $N_{\\text{non-PBR}} = 35$\n- Synonymous differences, $S_{\\text{non-PBR}} = 20$\n\nWe compute the rates for the non-PBR:\n$$\n(d_N)_{\\text{non-PBR}} = \\frac{N_{\\text{non-PBR}}}{L_{N, \\text{non-PBR}}} = \\frac{35}{2880}\n$$\n$$\n(d_S)_{\\text{non-PBR}} = \\frac{S_{\\text{non-PBR}}}{L_{S, \\text{non-PBR}}} = \\frac{20}{960} = \\frac{1}{48}\n$$\nNow, we calculate the ratio $\\omega_{\\text{non-PBR}} = (d_N/d_S)_{\\text{non-PBR}}$:\n$$\n\\omega_{\\text{non-PBR}} = \\frac{(d_N)_{\\text{non-PBR}}}{(d_S)_{\\text{non-PBR}}} = \\frac{35/2880}{1/48} = \\frac{35}{2880} \\times 48 = \\frac{35 \\times 48}{2880}\n$$\nRecognizing that $2880 = 60 \\times 48$, the calculation simplifies to:\n$$\n\\omega_{\\text{non-PBR}} = \\frac{35}{60} = \\frac{7}{12}\n$$\nNumerically, $\\omega_{\\text{non-PBR}} \\approx 0.583$. Since this value is less than $1$, it indicates purifying selection. This is also expected. The non-PBR portions of the MHC molecule have critical structural and signaling functions that must be conserved. Most amino acid changes in these regions would likely be deleterious, disrupting the protein's overall structure or its interaction with other components of the immune system (like the T-cell receptor or CD4 co-receptor), and are therefore selected against.\n\nFinally, the problem requires the computation of the ratio $R$, which contrasts the strength of selection in the PBR with that in the non-PBR.\n$$\nR \\equiv \\frac{(d_N/d_S)_{\\mathrm{PBR}}}{(d_N/d_S)_{\\mathrm{non\\text{-}PBR}}} = \\frac{\\omega_{\\mathrm{PBR}}}{\\omega_{\\text{non-PBR}}}\n$$\nSubstituting the exact fractional values we computed:\n$$\nR = \\frac{29/7}{7/12} = \\frac{29}{7} \\times \\frac{12}{7} = \\frac{29 \\times 12}{7 \\times 7} = \\frac{348}{49}\n$$\nTo obtain the final numerical answer, we perform the division and round to three significant figures as instructed.\n$$\nR = \\frac{348}{49} \\approx 7.1020408...\n$$\nRounding to three significant figures gives $7.10$.\nThis large value of $R$ quantitatively demonstrates the dramatic difference in selective pressures acting on the different functional domains of the MHC protein, with the peptide-binding region evolving under strong positive selection at a rate over $7$ times faster (in terms of the $\\omega$ ratio) than the background rate of the functionally constrained non-PBR regions.", "answer": "$$\n\\boxed{7.10}\n$$", "id": "2842372"}, {"introduction": "The establishment of self-tolerance is a complex process governed by stochastic interactions in the thymus. This exercise [@problem_id:2842341] guides you through the process of building a quantitative model from first principles to understand how variations in the expression of the Autoimmune Regulator (Aire) gene can alter the risk of autoimmunity. By deriving the probability of an autoreactive T cell clone escaping negative selection, you will gain hands-on experience in modeling complex biological systems and connecting molecular-level parameters to organismal-level phenotypes.", "problem": "In vertebrates, central tolerance is enforced in the thymus by deleting thymocytes whose T cell receptor (TCR) binds strongly to self-peptide–major histocompatibility complex (MHC) complexes during negative selection. Autoimmune regulator (Aire) expressed by medullary thymic epithelial cells induces promiscuous expression of tissue-restricted antigens (TRAs), enabling presentation to developing T cells. Consider two closely related mammalian species that are identical in all thymic selection parameters except that Species B expresses Aire at a relative level $A \\in (0,1]$ compared with Species A, which has $A = 1$. Assume the following modeling assumptions grounded in thymic selection principles and widely used stochastic descriptions of antigen presentation and T cell scanning:\n\n1. For a given TRA on a representative antigen-presenting cell (APC), the number of cognate peptide–MHC complexes available to trigger deletion is a Poisson random variable with mean $\\mu(A) = \\mu_{0} A$, where $\\mu_{0}$ is the mean under wild-type Aire ($A=1$).\n2. A developing thymocyte makes $M$ independent serial contacts with distinct APCs during the window in which it can be negatively selected. In any one contact, if at least one cognate peptide–MHC complex for that clone’s self-epitope is present, deletion is triggered with probability $\\sigma \\in (0,1)$ due to signaling variability; otherwise the clone is not deleted in that contact.\n3. In a cohort of $T$ distinct pre-selection thymocyte clones, the fraction $f$ of clones that are specific (and potentially autoreactive) to any particular single TRA epitope is small, and there are $N$ distinct, non-overlapping TRAs whose central tolerance depends predominantly on Aire. You may assume $N f \\ll 1$ so that double-specificity is negligible at this scale and independence approximations for rare events apply across clones and TRAs.\n\nTasks:\na) Starting from these assumptions and the definition of negative selection, derive a closed-form expression for the autoimmunity risk $R(A)$ in Species B, defined as the probability that at least one autoreactive clone specific to any of the $N$ TRAs escapes negative selection, in terms of $A$, $\\mu_{0}$, $M$, $\\sigma$, $T$, $N$, and $f$.\n\nb) Using your derived expression, evaluate $R(A)$ for Species B when $A = \\frac{1}{2}$ with the following empirically plausible parameters that are assumed to be conserved across these species: $\\mu_{0} = 0.02$, $M = 800$, $\\sigma = 0.4$, $T = 10^{6}$, $N = 10^{3}$, and $f = 5 \\times 10^{-9}$. Report the final numerical value of $R\\!\\left(\\tfrac{1}{2}\\right)$ as a unitless decimal rounded to four significant figures.", "solution": "a) Derivation of the autoimmunity risk $R(A)$.\n\nThe derivation proceeds by first calculating the probability of a single autoreactive thymocyte escaping negative selection, and then aggregating this risk over the entire relevant T-cell repertoire.\n\nLet us consider a single autoreactive thymocyte clone specific to one of the $N$ tissue-restricted antigens (TRAs).\nAccording to assumption 1, the number of cognate peptide-MHC (pMHC) complexes, $K$, on a single antigen-presenting cell (APC) follows a Poisson distribution with mean $\\mu(A) = \\mu_0 A$. The probability mass function is $P(K=k) = \\frac{\\exp(-\\mu_0 A)(\\mu_0 A)^k}{k!}$.\n\nThe probability that an APC presents zero cognate pMHC complexes is:\n$$ P(K=0) = \\exp(-\\mu_0 A) $$\nThe probability that an APC presents at least one cognate pMHC complex is:\n$$ P(K \\geq 1) = 1 - P(K=0) = 1 - \\exp(-\\mu_0 A) $$\nAccording to assumption 2, deletion of the thymocyte during a single encounter with an APC can only occur if $K \\geq 1$. If $K \\geq 1$, deletion is triggered with probability $\\sigma$. Thus, the thymocyte is *not* deleted in this encounter if either $K=0$ (no signal) or if $K \\geq 1$ and the deletion signal fails (with probability $1-\\sigma$).\n\nThe probability of non-deletion for a thymocyte in a single encounter with an APC, denoted $p_{nd,1}$, is the sum of probabilities of these two mutually exclusive events:\n$$ p_{nd,1} = P(K=0) + P(K \\geq 1) \\times (1-\\sigma) $$\nSubstituting the expressions derived from the Poisson distribution:\n$$ p_{nd,1} = \\exp(-\\mu_0 A) + (1 - \\exp(-\\mu_0 A))(1-\\sigma) $$\n$$ p_{nd,1} = \\exp(-\\mu_0 A) + 1 - \\sigma - \\exp(-\\mu_0 A) + \\sigma \\exp(-\\mu_0 A) $$\n$$ p_{nd,1} = 1 - \\sigma + \\sigma \\exp(-\\mu_0 A) = 1 - \\sigma(1 - \\exp(-\\mu_0 A)) $$\nA thymocyte undergoes $M$ such independent encounters. For the clone to escape negative selection, it must survive all $M$ encounters. The probability of escape for a single autoreactive clone, $P_{\\text{esc,clone}}$, is therefore:\n$$ P_{\\text{esc,clone}} = (p_{nd,1})^M = \\left[ 1 - \\sigma(1 - \\exp(-\\mu_0 A)) \\right]^M $$\nThe autoimmunity risk $R(A)$ is the probability that at least one autoreactive clone escapes negative selection. The total number of pre-selection thymocyte clones is $T$. The fraction specific to a single TRA is $f$. There are $N$ such TRAs. The total number of potentially autoreactive clones across all $N$ TRAs is $N \\times T \\times f$.\nThe escape probability for any single one of these clones is $P_{\\text{esc,clone}}$, which is a small value. The number of such clones, $N T f$, can be large. The number of escaped clones can be modeled by a Poisson distribution, justified by the independence of clones (assumption $Nf \\ll 1$) and the rarity of the escape event.\n\nThe mean (or parameter $\\lambda$) of this Poisson distribution, which represents the expected number of escaped autoreactive clones, is:\n$$ \\lambda_{\\text{total}} = (\\text{Total number of autoreactive clones}) \\times (\\text{Probability of escape per clone}) $$\n$$ \\lambda_{\\text{total}} = (N T f) \\times P_{\\text{esc,clone}} $$\n$$ \\lambda_{\\text{total}} = N T f \\left[ 1 - \\sigma(1 - \\exp(-\\mu_0 A)) \\right]^M $$\nThe risk $R(A)$ is the probability that the number of escaped clones is at least one. For a Poisson-distributed random variable $X$ with mean $\\lambda$, $P(X \\geq 1) = 1 - P(X=0) = 1 - \\exp(-\\lambda)$.\nTherefore, the autoimmunity risk is:\n$$ R(A) = 1 - \\exp(-\\lambda_{\\text{total}}) $$\nSubstituting the expression for $\\lambda_{\\text{total}}$, we obtain the final closed-form expression for the autoimmunity risk:\n$$ R(A) = 1 - \\exp\\left(-N T f \\left[1 - \\sigma\\left(1 - \\exp(-\\mu_0 A)\\right)\\right]^M\\right) $$\n\nb) Evaluation of $R(A)$ for the given parameters.\n\nWe are asked to evaluate $R(A)$ for $A = \\frac{1}{2}$ with the parameters: $\\mu_{0} = 0.02$, $M = 800$, $\\sigma = 0.4$, $T = 10^{6}$, $N = 10^{3}$, and $f = 5 \\times 10^{-9}$.\n\nFirst, we calculate the exponent of the inner exponential term:\n$$ \\mu_0 A = (0.02) \\times \\left(\\frac{1}{2}\\right) = 0.01 $$\nNext, we calculate the probability of non-deletion in a single encounter, $p_{nd,1}$:\n$$ p_{nd,1} = 1 - \\sigma(1 - \\exp(-\\mu_0 A)) = 1 - 0.4(1 - \\exp(-0.01)) $$\nThis can be rewritten as $0.6 + 0.4 \\exp(-0.01)$.\nUsing $\\exp(-0.01) \\approx 0.99004983$:\n$$ p_{nd,1} \\approx 0.6 + 0.4 \\times 0.99004983 = 0.6 + 0.39601993 = 0.99601993 $$\nNow, we calculate the escape probability for a single clone, $P_{\\text{esc,clone}}$:\n$$ P_{\\text{esc,clone}} = (p_{nd,1})^M = (0.99601993)^{800} $$\nTaking the natural logarithm:\n$$ \\ln(P_{\\text{esc,clone}}) = 800 \\ln(0.99601993) \\approx 800 \\times (-0.00398807) \\approx -3.190456 $$\n$$ P_{\\text{esc,clone}} = \\exp(-3.190456) \\approx 0.0411516 $$\nNext, we calculate the mean number of escaped clones, $\\lambda_{\\text{total}}$. First, we find the total number of relevant clones:\n$$ N T f = (10^3) \\times (10^6) \\times (5 \\times 10^{-9}) = 5 $$\nSo, $\\lambda_{\\text{total}} = 5 \\times P_{\\text{esc,clone}}$:\n$$ \\lambda_{\\text{total}} \\approx 5 \\times 0.0411516 = 0.205758 $$\nFinally, we calculate the autoimmunity risk $R(\\frac{1}{2})$:\n$$ R\\!\\left(\\frac{1}{2}\\right) = 1 - \\exp(-\\lambda_{\\text{total}}) \\approx 1 - \\exp(-0.205758) $$\n$$ R\\!\\left(\\frac{1}{2}\\right) \\approx 1 - 0.8140321 = 0.1859679 $$\nRounding the result to four significant figures as requested:\n$$ R\\!\\left(\\frac{1}{2}\\right) \\approx 0.1860 $$\nThis indicates that for an individual of Species B with a $50\\%$ reduction in Aire level, there is an approximate $18.6\\%$ probability of at least one autoreactive T-cell clone escaping central tolerance for the set of $N$ Aire-dependent antigens.", "answer": "$$\\boxed{0.1860}$$", "id": "2842341"}, {"introduction": "Translating immunological principles into effective clinical or veterinary strategies often requires quantitative optimization. This practice [@problem_id:2842338] presents a real-world challenge: determining the optimal vaccination time for an infant in the presence of decaying maternal antibodies that both protect and interfere with immunization. You will fit a model to empirical data, calculate time-dependent infection risk, and use this framework to find the vaccination age that minimizes the overall probability of disease, illustrating a powerful application of comparative immunology.", "problem": "You are given comparative datasets that reflect species-specific passive immunity dynamics and environmental exposure. Your task is to write a complete program that, for each dataset, fits a passive antibody decay model from titer-time observations, integrates a risk functional under a piecewise-constant force of infection, and computes the optimal vaccination age (in days, integer) that minimizes the infant’s expected infection probability over a fixed horizon. The program must use all supplied datasets as its test suite and produce a single line of output containing all optimal ages as a comma-separated list enclosed in square brackets.\n\nFoundational background:\n- In many mammals and other vertebrates, passive immunity is provided by maternally derived Immunoglobulin G (IgG). Empirically, IgG catabolism and recycling via the Neonatal Fc receptor (FcRn) lead to approximately first-order decay of circulating IgG concentration after birth. Thus, it is standard to model maternal IgG titer as an exponential decay.\n- Vaccine-induced active immunity in neonates can be inhibited by the presence of high maternal antibody titers due to antigen masking and feedback mechanisms. Above a titer-dependent interference threshold, vaccine take fails. After a vaccine take, a finite maturation delay precedes the onset of active protection.\n- Under standard survival analysis, for a small interval with force of infection, the infection probability accumulates according to a hazard integral. For a piecewise-constant hazard, the cumulative risk can be computed by summing over days.\n\nModel specifications to implement:\n1) Passive titer model: Fit the parameters of the exponential model\n$$\nM(t) = M_0 \\, e^{-k t},\n$$\nwhere $M(t)$ is the maternal antibody titer at age $t$ (in days), $M_0$ is the titer at birth, and $k$ is the decay constant (in day$^{-1}$). Both $M_0$ and $k$ must be estimated by nonlinear least squares using the provided titer observations $(t_i, y_i)$.\n\n2) Protection and interference thresholds:\n- Passive protection is present on any day $d$ such that $M(d) \\geq P_{\\mathrm{prot}}$, where $P_{\\mathrm{prot}}$ is a given protective titer threshold.\n- Vaccine interference: A vaccination administered at integer day $t_{\\mathrm{vac}}$ succeeds (vaccine take) only if $M(t_{\\mathrm{vac}}) \\leq T_{\\mathrm{block}}$, where $T_{\\mathrm{block}}$ is a given interference threshold. If the vaccine does not take, then active protection is never established.\n- Active protection onset: If the vaccine takes on day $t_{\\mathrm{vac}}$, active protection begins after a fixed delay $L$ days, i.e., for all days $d \\geq t_{\\mathrm{vac}} + L$. Assume once active protection starts, it persists through the end of the horizon.\n\n3) Force of infection:\n- Each dataset provides intervals $[a_j, b_j)$ with a corresponding infection probability $r_j$ for immunologically naive neonates over that interval. Convert each interval’s risk to a constant daily hazard\n$$\n\\lambda_j = -\\frac{\\ln(1 - r_j)}{b_j - a_j}.\n$$\nConstruct a daily hazard function $\\lambda(d)$ that equals $\\lambda_j$ for each day $d \\in \\{a_j, a_j + 1, \\ldots, b_j - 1\\}$.\n\n4) Expected infection probability over a horizon:\n- For a given candidate vaccination day $t_{\\mathrm{vac}} \\in \\{0, 1, 2, \\ldots, T_{\\mathrm{end}}\\}$, define the daily indicator of being unprotected\n$$\nI_{\\mathrm{unprot}}(d; t_{\\mathrm{vac}}) =\n\\begin{cases}\n1,  \\text{if } M(d)  P_{\\mathrm{prot}} \\text{ and there is no active protection on day } d, \\\\\n0,  \\text{otherwise.}\n\\end{cases}\n$$\n- The cumulative infection hazard over the horizon $\\{0,1,\\ldots, T_{\\mathrm{end}}-1\\}$ is\n$$\nH(t_{\\mathrm{vac}}) = \\sum_{d=0}^{T_{\\mathrm{end}}-1} \\lambda(d) \\, I_{\\mathrm{unprot}}(d; t_{\\mathrm{vac}}).\n$$\n- The expected infection probability is\n$$\n\\pi(t_{\\mathrm{vac}}) = 1 - e^{-H(t_{\\mathrm{vac}})}.\n$$\n\n5) Optimization:\n- Search over all integer days $t_{\\mathrm{vac}} \\in \\{0, 1, \\ldots, T_{\\mathrm{end}}\\}$ and choose any minimizer of $\\pi(t_{\\mathrm{vac}})$. If there are multiple minimizers (ties), select the smallest $t_{\\mathrm{vac}}$.\n\n6) Units and output:\n- All times are in days. Report each optimal vaccination age as an integer number of days.\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets (e.g., \"[$x_1,x_2,x_3$]\"), where $x_i$ is the optimal vaccination day for dataset $i$.\n\nTest suite (three datasets reflecting comparative and evolutionary differences in passive immunity and exposure):\n\nDataset A (placental mammal with moderate half-life):\n- Titer observations $(t_i, y_i)$ (days, arbitrary units): $(0, 1.2)$, $(30, 0.755952621)$, $(60, 0.476220316)$, $(90, 0.3)$.\n- Protective threshold: $P_{\\mathrm{prot}} = 0.25$.\n- Interference threshold: $T_{\\mathrm{block}} = 0.4$.\n- Active protection delay: $L = 14$.\n- Horizon: $T_{\\mathrm{end}} = 180$.\n- Naive infection risks over intervals:\n  - $[0, 30)$ with $r = 0.05$,\n  - $[30, 90)$ with $r = 0.10$,\n  - $[90, 180)$ with $r = 0.20$.\n\nDataset B (ungulate receiving colostrum with shorter half-life):\n- Titer observations $(t_i, y_i)$: $(0, 2.0)$, $(7, 1.337480)$, $(14, 1.0)$, $(28, 0.5)$, $(42, 0.25)$.\n- Protective threshold: $P_{\\mathrm{prot}} = 0.3$.\n- Interference threshold: $T_{\\mathrm{block}} = 0.6$.\n- Active protection delay: $L = 7$.\n- Horizon: $T_{\\mathrm{end}} = 84$.\n- Naive infection risks over intervals:\n  - $[0, 14)$ with $r = 0.15$,\n  - $[14, 42)$ with $r = 0.25$,\n  - $[42, 84)$ with $r = 0.40$.\n\nDataset C (species with low initial titer and very short protection):\n- Titer observations $(t_i, y_i)$: $(0, 0.3)$, $(10, 0.15)$, $(20, 0.075)$, $(30, 0.0375)$.\n- Protective threshold: $P_{\\mathrm{prot}} = 0.2$.\n- Interference threshold: $T_{\\mathrm{block}} = 0.25$.\n- Active protection delay: $L = 10$.\n- Horizon: $T_{\\mathrm{end}} = 90$.\n- Naive infection risks over intervals:\n  - $[0, 30)$ with $r = 0.30$,\n  - $[30, 90)$ with $r = 0.35$.\n\nRequirements and constraints:\n- Fit $M_0$ and $k$ by nonlinear least squares from the provided titer data for each dataset. Constrain $M_0  0$ and $k  0$.\n- Use the definitions above without introducing alternative models.\n- Discretize days as integers and evaluate $M(d)$ at integer $d$.\n- Return the optimal vaccination day (in days, integer) for each dataset in the exact output format described.", "solution": "The methodology is executed for each dataset through a sequence of computational steps.\n\n1.  **Passive Immunity Model Fitting**: The decay of maternal antibody titer $M(t)$ is described by the first-order kinetic model $M(t) = M_0 e^{-k t}$. The parameters $M_0$ (initial titer) and $k$ (decay rate constant) must be estimated from the provided titer observations $(t_i, y_i)$. This is a parameter estimation task, for which we employ nonlinear least squares. This method finds the parameter values that minimize the sum of squared differences between the model's predictions and the empirical data. We must enforce the physical constraints $M_0 > 0$ and $k > 0$.\n\n2.  **Force of Infection Calculation**: The problem specifies infection probabilities, $r_j$, for naive individuals over given time intervals $[a_j, b_j)$. To model risk accumulation, we convert these probabilities into a daily, piecewise-constant force of infection, or hazard rate, $\\lambda(d)$. The relationship between a constant hazard $\\lambda_j$ and the probability of remaining uninfected over an interval of duration $\\Delta t = b_j - a_j$ is given by $1 - r_j = e^{-\\lambda_j \\Delta t}$. From this, we derive the daily hazard rate for each interval: $\\lambda_j = -\\frac{\\ln(1 - r_j)}{b_j - a_j}$. We then construct a vector representing $\\lambda(d)$ for each day $d$ in the horizon $\\{0, 1, \\dots, T_{\\mathrm{end}}-1\\}$.\n\n3.  **Optimization Formulation**: Our objective is to find the vaccination age $t_{\\mathrm{vac}}$, from the integer set $\\{0, 1, \\dots, T_{\\mathrm{end}}\\}$, that minimizes the total probability of infection, $\\pi(t_{\\mathrm{vac}})$. The probability $\\pi(t_{\\mathrm{vac}}) = 1 - e^{-H(t_{\\mathrm{vac}})}$ is a monotonic transformation of the cumulative hazard $H(t_{\\mathrm{vac}})$. Therefore, minimizing the infection probability is equivalent to minimizing the cumulative hazard. The cumulative hazard is the sum of daily hazards during periods of susceptibility:\n$$\nH(t_{\\mathrm{vac}}) = \\sum_{d=0}^{T_{\\mathrm{end}}-1} \\lambda(d) \\, I_{\\mathrm{unprot}}(d; t_{\\mathrm{vac}})\n$$\nThe indicator function $I_{\\mathrm{unprot}}(d; t_{\\mathrm{vac}})$ is $1$ if the infant is unprotected on day $d$, and $0$ otherwise.\n\n4.  **Defining the Unprotected State**: An infant is unprotected on day $d$ if it lacks both passive and active immunity.\n    -   Passive protection is lost when the titer falls below a threshold: $M(d)  P_{\\mathrm{prot}}$.\n    -   Active protection depends on vaccine success. A vaccine administered at $t_{\\mathrm{vac}}$ is successful only if the maternal titer is sufficiently low: $M(t_{\\mathrm{vac}}) \\leq T_{\\mathrm{block}}$. If successful, active protection begins after a delay of $L$ days, i.e., for $d \\geq t_{\\mathrm{vac}} + L$. If the vaccine fails, active protection is never acquired.\n\n5.  **Computational Search**: The optimal $t_{\\mathrm{vac}}$ is found by a simple but exhaustive search over the discrete and finite set of possible vaccination days. For each candidate $t_{\\mathrm{vac}}$, we calculate the total cumulative hazard $H(t_{\\mathrm{vac}})$. We then identify the $t_{\\mathrm{vac}}$ corresponding to the minimum calculated hazard. In case of multiple ages yielding the same minimum hazard, the problem specifies selecting the smallest age, a rule naturally handled by an ordered search.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.optimize import curve_fit\n\ndef find_optimal_vaccination_age(case):\n    \"\"\"\n    Calculates the optimal vaccination age for a single dataset by minimizing\n    the cumulative infection hazard over a finite horizon.\n    \"\"\"\n    # Step 1: Extract data and parameters from the provided case\n    titer_obs = case[\"titer_obs\"]\n    t_obs, y_obs = titer_obs[:, 0], titer_obs[:, 1]\n    P_prot = case[\"P_prot\"]\n    T_block = case[\"T_block\"]\n    L = case[\"L\"]\n    T_end = case[\"T_end\"]\n    risks = case[\"risks\"]\n\n    # Step 2: Fit the passive titer model M(t) = M0 * exp(-k*t)\n    def titer_model(t, M0, k):\n        return M0 * np.exp(-k * t)\n\n    # Use nonlinear least squares with positivity constraints on parameters\n    popt, _ = curve_fit(titer_model, t_obs, y_obs, p0=[y_obs[0], 0.1], bounds=([0, 0], [np.inf, np.inf]))\n    M0_fit, k_fit = popt\n\n    # Step 3: Construct the piecewise-constant daily hazard array\n    daily_hazards = np.zeros(T_end)\n    for a, b, r in risks:\n        # The interval [a, b) corresponds to indices from a up to b-1\n        if b > a:\n            hazard_rate = -np.log(1 - r) / (b - a)\n            daily_hazards[a:b] = hazard_rate\n\n    # Step 4: Pre-calculate daily maternal titers over the horizon\n    days_horizon = np.arange(T_end)\n    maternal_titers_horizon = titer_model(days_horizon, M0_fit, k_fit)\n\n    # Pre-calculate passive protection status for each day in the horizon\n    passively_protected = maternal_titers_horizon >= P_prot\n\n    # Pre-calculate titers for all possible vaccination days {0, ..., T_end}\n    vac_days_candidates = np.arange(T_end + 1)\n    titers_at_vac_time = titer_model(vac_days_candidates, M0_fit, k_fit)\n    \n    # Step 5: Search for the optimal vaccination day by minimizing cumulative hazard\n    min_hazard = float('inf')\n    optimal_tvac = -1\n\n    for t_vac in vac_days_candidates:\n        # Determine if the vaccine takes based on the interference threshold\n        vaccine_takes = titers_at_vac_time[t_vac] = T_block\n\n        # Determine the period of active protection if the vaccine takes\n        if vaccine_takes:\n            active_protection_starts = t_vac + L\n            actively_protected = days_horizon >= active_protection_starts\n        else:\n            # If vaccine fails, there is no active protection\n            actively_protected = np.zeros_like(days_horizon, dtype=bool)\n\n        # An infant is protected if either passive or active immunity is present\n        is_protected = np.logical_or(passively_protected, actively_protected)\n        \n        # The unprotected indicator is the logical negation of being protected\n        unprotected_indicator = np.logical_not(is_protected)\n        \n        # Calculate the cumulative hazard H(t_vac) for this choice of t_vac\n        cumulative_hazard = np.dot(daily_hazards, unprotected_indicator)\n\n        # If this hazard is lower than the minimum found so far, update the optimum.\n        # The loop's ascending order ensures the smallest t_vac is chosen in a tie.\n        if cumulative_hazard  min_hazard:\n            min_hazard = cumulative_hazard\n            optimal_tvac = t_vac\n    \n    return optimal_tvac\n\ndef solve():\n    \"\"\"\n    Main function to define test cases, run the optimization for each,\n    and print the results in the specified format.\n    \"\"\"\n    # Define the test cases from the problem statement.\n    test_cases = [\n        {\n            \"name\": \"A (placental mammal)\",\n            \"titer_obs\": np.array([\n                (0, 1.2), \n                (30, 0.755952621), \n                (60, 0.476220316), \n                (90, 0.3)\n            ]),\n            \"P_prot\": 0.25,\n            \"T_block\": 0.4,\n            \"L\": 14,\n            \"T_end\": 180,\n            \"risks\": [\n                (0, 30, 0.05),\n                (30, 90, 0.10),\n                (90, 180, 0.20),\n            ]\n        },\n        {\n            \"name\": \"B (ungulate)\",\n            \"titer_obs\": np.array([\n                (0, 2.0), \n                (7, 1.337480), \n                (14, 1.0), \n                (28, 0.5), \n                (42, 0.25)\n            ]),\n            \"P_prot\": 0.3,\n            \"T_block\": 0.6,\n            \"L\": 7,\n            \"T_end\": 84,\n            \"risks\": [\n                (0, 14, 0.15),\n                (14, 42, 0.25),\n                (42, 84, 0.40),\n            ]\n        },\n        {\n            \"name\": \"C (low initial titer species)\",\n            \"titer_obs\": np.array([\n                (0, 0.3), \n                (10, 0.15), \n                (20, 0.075), \n                (30, 0.0375)\n            ]),\n            \"P_prot\": 0.2,\n            \"T_block\": 0.25,\n            \"L\": 10,\n            \"T_end\": 90,\n            \"risks\": [\n                (0, 30, 0.30),\n                (30, 90, 0.35),\n            ]\n        }\n    ]\n\n    results = []\n    for case in test_cases:\n        optimal_age = find_optimal_vaccination_age(case)\n        results.append(optimal_age)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\n# Execute the main solver function.\nsolve()\n```", "id": "2842338"}]}