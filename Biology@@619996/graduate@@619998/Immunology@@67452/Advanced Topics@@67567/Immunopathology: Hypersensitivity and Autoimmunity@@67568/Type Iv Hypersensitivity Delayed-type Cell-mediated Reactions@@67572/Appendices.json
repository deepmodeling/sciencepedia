{"hands_on_practices": [{"introduction": "Understanding the diagnosis of delayed-type hypersensitivity (DTH) reactions in a clinical setting requires more than just knowing the immunological pathway; it demands a firm grasp of biostatistics. This exercise challenges you to move beyond the binary 'positive' or 'negative' result of a patch test and quantify its true predictive power using core principles like sensitivity, specificity, and prevalence. By calculating the positive predictive value (PPV), you will gain a crucial perspective on how population characteristics influence the interpretation of diagnostic data for individual patients [@problem_id:2904769].", "problem": "A dermatology clinic is evaluating a patch test used to diagnose a delayed-type hypersensitivity (DTH) reaction mediated by T helper type 1 (Th1) cells to a particular contact allergen. The patch test is read at $48$–$72$ hours and is considered positive if a characteristic eczematous reaction develops at the application site, reflecting antigen-specific memory T cell activation in the skin. In a target outpatient population with suspected contact dermatitis, the prevalence of true allergen sensitization is $0.10$. Prior validation studies report that, for this allergen, the test sensitivity is $0.85$ and the test specificity is $0.95$. Using only the core definitions of sensitivity, specificity, prevalence, and Bayes’ theorem from probability theory, derive the expression needed to compute the positive predictive value (PPV) of this test in this population, then calculate the PPV. Finally, state in one sentence the clinical implication of this PPV for interpreting a positive patch test in this DTH context. Express the final PPV as a decimal fraction and round your answer to four significant figures.", "solution": "The problem statement is subjected to validation before a solution is attempted.\n\nFirst, the givens are extracted verbatim:\n- The prevalence of true allergen sensitization is $0.10$.\n- The test sensitivity is $0.85$.\n- The test specificity is $0.95$.\n- The task is to derive the expression for the positive predictive value (PPV), calculate it, and state its clinical implication.\n- The final numerical answer must be a decimal fraction rounded to four significant figures.\n\nSecond, the problem is validated against the required criteria. The problem is scientifically grounded, as it describes a standard scenario in diagnostic immunology concerning delayed-type hypersensitivity (DTH) and uses correct terminology and realistic parameters. The concepts of prevalence, sensitivity, specificity, and positive predictive value are fundamental principles in biostatistics and epidemiology. The problem is well-posed; it provides all necessary data to compute a unique, meaningful solution using Bayes' theorem. It is objective and free of ambiguity, contradiction, or logical flaws. The problem is therefore deemed valid and a solution will be provided.\n\nTo derive the expression for the positive predictive value (PPV), we must first define the relevant events in probabilistic terms.\nLet $D$ be the event that a patient has the true allergen sensitization (the \"disease\").\nLet $D^c$ be the event that a patient does not have the true allergen sensitization.\nLet $T^+$ be the event that the patch test result is positive.\nLet $T^-$ be the event that the patch test result is negative.\n\nFrom the problem statement, we translate the given information into conditional probabilities:\n- The prevalence is the a priori probability of having the sensitization: $P(D) = 0.10$.\n- The sensitivity is the probability of a positive test given the patient is sensitized (a true positive): $P(T^+ | D) = 0.85$.\n- The specificity is the probability of a negative test given the patient is not sensitized (a true negative): $P(T^- | D^c) = 0.95$.\n\nThe positive predictive value (PPV) is the probability that a patient is truly sensitized given that they have a positive test result. This is the conditional probability $P(D | T^+)$.\n\nUsing Bayes' theorem, the expression for PPV is:\n$$ \\text{PPV} = P(D | T^+) = \\frac{P(T^+ | D) P(D)}{P(T^+)} $$\n\nThe denominator, $P(T^+)$, is the total probability of a positive test result, which can be found using the law of total probability. A positive test can occur in two mutually exclusive ways: a true positive (patient is sensitized and tests positive) or a false positive (patient is not sensitized but tests positive).\n$$ P(T^+) = P(T^+ \\cap D) + P(T^+ \\cap D^c) $$\n$$ P(T^+) = P(T^+ | D) P(D) + P(T^+ | D^c) P(D^c) $$\n\nWe need to determine the terms $P(D^c)$ and $P(T^+ | D^c)$.\nThe probability of not being sensitized is the complement of the prevalence:\n$$ P(D^c) = 1 - P(D) = 1 - 0.10 = 0.90 $$\nThe probability of a positive test in a non-sensitized patient, $P(T^+ | D^c)$, is the false positive rate. It is the complement of the specificity (the true negative rate):\n$$ P(T^+ | D^c) = 1 - P(T^- | D^c) = 1 - 0.95 = 0.05 $$\n\nNow, we substitute these expressions back into the formula for $P(T^+)$:\n$$ P(T^+) = (0.85)(0.10) + (0.05)(0.90) $$\n\nFinally, we substitute the full expression for $P(T^+)$ into the Bayes' theorem formula for PPV. This provides the complete derived expression required by the problem:\n$$ \\text{PPV} = P(D | T^+) = \\frac{P(T^+ | D) P(D)}{P(T^+ | D) P(D) + P(T^+ | D^c) P(D^c)} $$\n\nNow, we calculate the numerical value by substituting the given probabilities:\n$$ \\text{PPV} = \\frac{(0.85)(0.10)}{(0.85)(0.10) + (0.05)(0.90)} $$\n$$ \\text{PPV} = \\frac{0.085}{0.085 + 0.045} $$\n$$ \\text{PPV} = \\frac{0.085}{0.130} $$\n$$ \\text{PPV} \\approx 0.65384615... $$\n\nRounding to four significant figures, the positive predictive value is $0.6538$.\n\nThe clinical implication of this positive predictive value is that for a patient in this outpatient population with a positive patch test, there is only a $65.38\\%$ probability of true allergen sensitization, indicating that a significant proportion of positive results (approximately $35\\%$) are false positives.", "answer": "$$\\boxed{0.6538}$$", "id": "2904769"}, {"introduction": "The term 'delayed-type' hypersensitivity implies that the immunological reaction takes a significant amount of time to develop, but what is the rate-limiting step? This practice asks you to perform a foundational biophysical calculation to test the hypothesis that the passive diffusion of signaling molecules, like chemokines, is the source of this delay. By comparing the timescale of diffusion to the known clinical timescale of a DTH response, you will develop an intuition for identifying the true bottlenecks in complex biological processes [@problem_id:2904780].", "problem": "A delayed-type hypersensitivity (DTH) reaction is driven by T lymphocyte recruitment to a site of antigen challenge, guided by chemokine gradients produced by resident and infiltrating cells. Consider a simplified one-dimensional, homogeneous, isotropic interstitial environment in skin with no convection and negligible binding. Starting from Fick’s second law of diffusion, $\\frac{\\partial C}{\\partial t} = D \\frac{\\partial^{2} C}{\\partial x^{2}}$, and the well-tested observation that for diffusion from a localized source the mean-squared displacement grows linearly in time, derive an expression for the characteristic time-scale $t$ for a chemokine to explore a distance $L$ purely by diffusion in one dimension. Then, for a small chemokine with diffusion coefficient $D = 100\\,\\mu\\text{m}^{2}\\!/\\text{s}$ in the interstitial space, estimate the time required to explore a distance $L = 500\\,\\mu\\text{m}$.\n\nFinally, using core immunology facts about delayed-type hypersensitivity, briefly state whether chemokine diffusion alone is likely to be the rate-limiting step for the onset of a DTH response, which typically emerges on the order of tens of hours.\n\nReport only the numerical value of the diffusion time you compute, expressed in minutes, and round your answer to three significant figures. Use minutes as the unit for the reported value. Do not include any units in your final boxed answer.", "solution": "The problem as stated is scientifically grounded, well-posed, and objective. It is based on the fundamental principles of diffusion and established concepts in immunology. All required information is provided. Therefore, the problem is valid, and we shall proceed with its solution.\n\nThe problem asks for three tasks: first, to derive a characteristic time-scale for diffusion over a distance $L$; second, to calculate this time for a given chemokine; and third, to contextualize this time-scale within the known biology of delayed-type hypersensitivity (DTH).\n\nThe analysis begins with the relationship between diffusion and the mean-squared displacement (MSD) of diffusing particles. The problem correctly states that for diffusion from a localized source, the MSD grows linearly with time. For diffusion in a single dimension, this relationship, known as the Einstein relation, is given by:\n$$\n\\langle x^2(t) \\rangle = 2Dt\n$$\nwhere $\\langle x^2(t) \\rangle$ is the mean-squared displacement at time $t$, and $D$ is the diffusion coefficient. The characteristic time $t$ required for a particle to \"explore\" a distance $L$ can be defined as the time at which the root-mean-square (RMS) displacement, $\\sqrt{\\langle x^2(t) \\rangle}$, is equal to $L$.\n\nSetting the RMS displacement equal to the distance $L$:\n$$\n\\sqrt{\\langle x^2(t) \\rangle} = L\n$$\nSubstituting the Einstein relation:\n$$\n\\sqrt{2Dt} = L\n$$\nTo solve for the characteristic time $t$, we square both sides of the equation:\n$$\n2Dt = L^2\n$$\nThis gives the expression for the characteristic diffusion time $t$ in one dimension:\n$$\nt = \\frac{L^2}{2D}\n$$\nThis is the required general expression.\n\nNext, we must calculate this time for the specific parameters provided. The diffusion coefficient is given as $D = 100\\,\\mu\\text{m}^{2}\\!/\\text{s}$, and the distance to be explored is $L = 500\\,\\mu\\text{m}$. We substitute these values into our derived formula:\n$$\nt = \\frac{(500\\,\\mu\\text{m})^2}{2 \\times (100\\,\\mu\\text{m}^{2}\\!/\\text{s})} = \\frac{250000\\,\\mu\\text{m}^2}{200\\,\\mu\\text{m}^{2}\\!/\\text{s}}\n$$\nThe units of $\\mu\\text{m}^2$ cancel, leaving the time in seconds:\n$$\nt = \\frac{2500}{2}\\,\\text{s} = 1250\\,\\text{s}\n$$\nThe problem requires the answer to be expressed in minutes. There are $60$ seconds in one minute, so we perform the conversion:\n$$\nt_{\\text{min}} = \\frac{1250\\,\\text{s}}{60\\,\\text{s/min}} = \\frac{125}{6}\\,\\text{min} \\approx 20.833... \\,\\text{min}\n$$\nRounding to three significant figures, as instructed, yields $20.8$ minutes.\n\nFinally, we must assess whether chemokine diffusion is the rate-limiting step for the onset of a DTH response. The calculated diffusion time-scale is approximately $20.8$ minutes, or about one-third of an hour. A DTH response, such as the tuberculin skin test, characteristically manifests over a much longer period, typically peaking at $48$ to $72$ hours after antigen exposure. The time-scale of chemokine diffusion is several orders of magnitude smaller than the time-scale of the overall DTH response ($20.8\\,\\text{min} \\ll 48\\,\\text{h}$).\n\nTherefore, the purely physical process of chemokine diffusion across a sub-millimeter tissue distance is extremely rapid compared to the biological processes that orchestrate the DTH reaction. The rate-limiting steps are entirely biological and include:\n$1$. The migration of antigen-presenting cells (e.g., Langerhans cells, dermal dendritic cells) from the skin to draining lymph nodes.\n$2$. The processing and presentation of antigen to naive T lymphocytes in the lymph node.\n$3$. The activation and clonal expansion of antigen-specific helper T cells (Th1 cells), a process which takes several days.\n$4$. The trafficking of these newly generated effector T cells from the lymph node, through the circulation, and into the inflamed tissue site.\n$5$. The subsequent local re-activation of these T cells and their orchestration of an inflammatory response via cytokine release (e.g., IFN-$\\gamma$), leading to the recruitment and activation of macrophages.\n\nEach of these cellular-level processes operates on a time-scale of many hours to days. The rapid establishment of a chemokine gradient by diffusion is a necessary, but not sufficient, condition for the response and is in no way the rate-limiting factor. The delay in \"delayed-type\" hypersensitivity is a direct consequence of the time required for the cellular immune response to develop and mobilize.", "answer": "$$\n\\boxed{20.8}\n$$", "id": "2904780"}, {"introduction": "Having established that the 'delay' in DTH is due to cellular kinetics, this final practice challenges you to synthesize this knowledge into a dynamic, predictive model. You will design an agent-based simulation from first principles to recreate a contact hypersensitivity reaction *in silico*, translating immunological rules into computational logic. This exercise exemplifies a modern, systems-level approach to immunology, where understanding emerges not just from describing the components, but from modeling their complex, stochastic interactions over time to reproduce a macroscopic outcome [@problem_id:2904755].", "problem": "You are to implement a minimal agent-based simulation of contact hypersensitivity as a delayed-type, cell-mediated reaction in skin microanatomy, in which epidermal keratinocyte damage emerges from the interplay of antigen-bearing dendritic cells, recruited T lymphocytes, and macrophages. The simulation must be constructed from first principles consistent with established immunology: antigen exposure causes danger signaling by damaged keratinocytes, dendritic cell activation and migration to lymph nodes, and after a delay, effector T cells return to the tissue, activate macrophages, and amplify keratinocyte damage.\n\nYour program must execute a discrete-time, two-dimensional agent-based model grounded in these core biological bases without relying on any domain-specific \"black box\" formulas. Use the following fundamental bases and core definitions as the starting point for your model design:\n\n- Cellular agents occupy a two-dimensional lattice and undergo stochastic state changes and movements consistent with local interactions and random motility; such rules approximate diffusion and chemotaxis on microscopic time scales via random walks and neighborhood-dependent transition probabilities.\n- Dendritic cells present antigen to T cells in lymph nodes; the expansion and return of effector T cells to tissue is delayed relative to the initial exposure, characteristic of type IV delayed-type hypersensitivity.\n- T helper type $1$ effector cells produce interferon gamma and activate macrophages; activated macrophages mediate collateral tissue damage on keratinocytes through inflammatory effector functions.\n- Local interaction rates can be modeled as Bernoulli processes per time step with probabilities derived from mass-action-like dependence on neighbor counts.\n\nImplement the following model, parameters, and rules exactly as specified.\n\nState space and geometry:\n- Use a square lattice of size $N \\times N$ with $N = 20$. Indices are integers with $x \\in \\{0,\\dots,N-1\\}$ and $y \\in \\{0,\\dots,N-1\\}$.\n- The epidermis occupies rows $y \\in \\{0,\\dots,N_{e}-1\\}$ and the dermis occupies rows $y \\in \\{N_{e},\\dots,N-1\\}$, where $N_{e} = \\lfloor N/2 \\rfloor = 10$.\n- Keratinocytes reside implicitly on the epidermal lattice sites and have a binary damage state $K(y,x,t) \\in \\{0,1\\}$, where $1$ denotes damaged at time step $t$.\n- Dendritic cells, T cells, and macrophages are explicit agents with integer lattice positions $(x,y)$ constrained to the dermis for all times, i.e., $y \\geq N_{e}$.\n\nTime and initialization:\n- Simulate discrete time steps $t = 0,1,2,\\dots,T_{\\text{end}}-1$ with $T_{\\text{end}} = 72$.\n- The delayed effector phase begins at $t = \\tau_{\\text{sens}}$ with $\\tau_{\\text{sens}} = 24$.\n- At $t=0$, a circular hapten patch centered at $(x_{c},y_{c}) = (\\lfloor N/2 \\rfloor,\\lfloor N_{e}/2 \\rfloor)$ with radius $R(d) = 2 + \\lfloor d \\rfloor$ is applied, where $d$ is the hapten dose parameter from the test suite. Each keratinocyte $(y,x)$ within Euclidean distance $\\leq R(d)$ from the center is independently damaged with probability $p_{0}(d) = 1 - e^{-\\alpha d}$, where $\\alpha = 0.5$.\n- Initialize $N_{\\text{DC}} = 40$ dendritic cell agents at uniformly random dermal positions with $y \\in \\{N_{e},N_{e}+1,N_{e}+2\\}$ and $x \\in \\{0,\\dots,N-1\\}$, all in the resting state.\n- Initialize $N_{\\text{M}} = 60$ macrophage agents at uniformly random dermal positions $y \\in \\{N_{e},\\dots,N-1\\}$ and $x \\in \\{0,\\dots,N-1\\}$, all in the resting state.\n- Initialize zero T cells at $t=0$. Effector T cells will be introduced at $t=\\tau_{\\text{sens}}$ as specified below.\n\nStochasticity and reproducibility:\n- Use a pseudorandom number generator with a deterministic seed per test case: the seed must be $12345 + i$, where $i$ is the zero-based index of the test case in the provided test suite. All random draws in a test case must be derived from this seed.\n\nPer-time-step rules:\n- Dendritic cell activation and migration:\n  - For each dendritic cell at position $(x,y)$ with $y \\geq N_{e}$, define its epidermal contact neighborhood as the basal epidermal row $y^{*} = N_{e}-1$ at columns $x + \\Delta x$ with $\\Delta x \\in \\{-1,0,1\\}$ clamped to lattice bounds. Let $n_{d}(t)$ be the number of damaged keratinocytes among these positions at time $t$.\n  - A resting dendritic cell becomes activated at time $t$ with probability $p_{\\text{act}}(t) = 1 - e^{-\\beta n_{d}(t)}$, where $\\beta = 0.25$.\n  - An activated dendritic cell attempts to migrate toward lymphatic exit at the bottom boundary. At each time step, with probability $m$ (a test-case parameter), it moves one lattice step to $(x, y+1)$ if $y < N-1$. If $y = N-1$, then with probability $m$ it exits the tissue and is removed, and the exited dendritic cell count $E(t)$ is incremented by $1$. If it does not move due to the Bernoulli outcome, it stays in place for that step.\n  - A resting dendritic cell performs a random jitter with probability $p_{\\text{jitter}} = 0.3$ by moving to one of the $3 \\times 3$ Moore neighbors in the dermis (Chebyshev step of at most $1$) uniformly at random; otherwise, it remains in place. All positions must be clamped to remain in the dermis ($y \\geq N_{e}$).\n- Effector T cell recruitment:\n  - At $t = \\tau_{\\text{sens}}$, introduce $N_{\\text{T}}(\\tau_{\\text{sens}}) = \\left\\lfloor 0.5 + k_{T} \\cdot E(\\tau_{\\text{sens}}) \\right\\rfloor$ effector T cells at uniformly random dermal positions, where $k_{T} = 0.8$ and $E(\\tau_{\\text{sens}})$ is the cumulative number of exited dendritic cells up to and including time $\\tau_{\\text{sens}}$. No additional T cells are introduced after $t = \\tau_{\\text{sens}}$.\n  - For all $t \\geq \\tau_{\\text{sens}}$, each T cell performs a simple random walk: at each step it moves to a uniformly chosen Moore neighbor in the dermis (Chebyshev step of at most $1$), with lattice clamping to enforce $y \\geq N_{e}$.\n- Macrophage activation and keratinocyte damage amplification:\n  - For all $t \\geq \\tau_{\\text{sens}}$, any macrophage that has at least one T cell within Chebyshev distance $\\leq 1$ becomes activated and remains activated thereafter.\n  - Each activated macrophage independently attempts to damage an epidermal keratinocyte once per time step. It selects a target epidermal site $(x',y')$ where $x' \\in \\{x-1,x,x+1\\}$ clamped to lattice bounds and $y' \\in \\{N_{e}-2,N_{e}-1\\}$ clamped to $\\{0,\\dots,N_{e}-1\\}$, with equal probability over the available choices. If that keratinocyte is not already damaged, it becomes damaged with probability $p_{K} = \\min(1,c)$, where $c$ is the T cell–macrophage interaction strength parameter for the test case.\n\nOutput observable:\n- The lesion size is defined as the total number of damaged keratinocytes at the end of the simulation, i.e., $L = \\sum_{y=0}^{N_{e}-1} \\sum_{x=0}^{N-1} K(y,x,T_{\\text{end}})$, an integer count.\n\nInput-free execution and test suite:\n- Your program must run without any input and must execute the simulation for each of the following test cases, where each test case is a triple $(d,m,c)$:\n  - Case $0$: $(d,m,c) = (1.5,0.6,0.4)$.\n  - Case $1$: $(d,m,c) = (0.0,0.8,0.7)$.\n  - Case $2$: $(d,m,c) = (3.0,0.9,0.9)$.\n  - Case $3$: $(d,m,c) = (1.5,0.1,0.9)$.\n- For each case $i \\in \\{0,1,2,3\\}$, run the model with the specified parameters, using the random seed $12345 + i$, and compute $L_{i}$.\n\nFinal output format:\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, with the lesion sizes in case order, i.e., the exact string format must be $[L_{0},L_{1},L_{2},L_{3}]$ where each $L_{i}$ is an integer written in base-$10$ digits with no spaces.", "solution": "The problem statement has been subjected to rigorous validation and is deemed valid. It provides a complete, self-contained, and scientifically plausible specification for an agent-based model of a delayed-type hypersensitivity reaction. All parameters, initial conditions, and dynamic rules are explicitly defined, permitting a unique and reproducible computational solution. The model, while a simplification, is grounded in established immunological principles: danger signaling, antigen presentation by dendritic cells, delayed clonal expansion of T cells, and macrophage-mediated effector functions. The problem is well-posed and objective. We shall now proceed with the solution.\n\nThe core of the problem is to construct a discrete-time, two-dimensional agent-based simulation. We will design this simulation by defining the state space and the dynamic rules that govern the evolution of agents and the environment over time, adhering strictly to the provided specifications.\n\n**1. State Space Representation**\n\nThe system's state at any time step $t$ is defined by the states of its components: the lattice representing the skin tissue and the populations of mobile cellular agents.\n\n-   **Skin Lattice**: The tissue is a $N \\times N$ grid, with $N=20$. It is divided into an epidermis for $y \\in \\{0, \\dots, N_e-1\\}$ and a dermis for $y \\in \\{N_e, \\dots, N-1\\}$, where $N_e = \\lfloor N/2 \\rfloor = 10$.\n    -   **Keratinocyte Damage**: The state of the epidermis is represented by a two-dimensional integer array $K$ of size $N_e \\times N$. An element $K(y,x,t) = 1$ signifies a damaged keratinocyte at position $(x,y)$ at time $t$, and $K(y,x,t) = 0$ signifies an undamaged one.\n\n-   **Cellular Agents**: Dendritic cells (DCs), T cells, and macrophages are represented as individual agents. For a simulation of this scale, a list of data structures (e.g., Python dictionaries) for each cell type is efficient. Each agent's state includes at a minimum its position $(x,y)$ and an activation status.\n    -   **Dendritic Cells (DCs)**: A list of $N_{DC} = 40$ agents, each defined by its position $(x,y)$ in the dermis ($y \\ge N_e$) and its state (resting or activated).\n    -   **T Cells**: A list of agents, initially empty. Each is defined by its dermal position $(x,y)$.\n    -   **Macrophages (Ms)**: A list of $N_M = 60$ agents, each defined by its fixed dermal position $(x,y)$ and its state (resting or activated).\n\n-   **Global Variables**:\n    -   $E(t)$: The cumulative count of DCs that have exited the tissue by time $t$.\n\n**2. Initialization (Time $t=0$)**\n\nThe simulation begins by setting up the initial state according to the problem rules. A specific seed, $12345 + i$ for test case $i$, is used to initialize a pseudorandom number generator (PRNG) to ensure reproducibility.\n\n-   **Initial Keratinocyte Damage**: A circular patch of initial damage is created. The center is $(x_c, y_c) = (\\lfloor N/2 \\rfloor, \\lfloor N_e/2 \\rfloor) = (10, 5)$. The radius is $R(d) = 2 + \\lfloor d \\rfloor$. For each keratinocyte within this radius, a random number is drawn from the PRNG. If this number is less than the initial damage probability $p_0(d) = 1 - e^{-\\alpha d}$ (with $\\alpha = 0.5$), the keratinocyte state $K(y,x,0)$ is set to $1$.\n\n-   **Initial Agent Populations**:\n    -   $N_{DC} = 40$ DCs are created with uniformly random positions in the upper dermis ($y \\in \\{10, 11, 12\\}$ and $x \\in \\{0, \\dots, 19\\}$) and are all set to the 'resting' state.\n    -   $N_M = 60$ macrophages are created with uniformly random positions throughout the dermis ($y \\in \\{10, \\dots, 19\\}$ and $x \\in \\{0, \\dots, 19\\}$) and are all set to the 'resting' state.\n    -   The T cell population is initially zero.\n    -   The exited DC count $E(0)$ is initialized to $0$.\n\n**3. Simulation Dynamics (Time Evolution)**\n\nThe simulation proceeds in discrete time steps from $t=0$ to $t=T_{\\text{end}}-1$, with $T_{\\text{end}} = 72$. At each step, the state of the system is updated based on the rules applied sequentially to each agent population.\n\n-   **Dendritic Cell Dynamics**:\n    1.  **Activation**: For each resting DC at position $(x,y)$, we count the number of damaged keratinocytes, $n_d(t)$, in its sensory neighborhood. This neighborhood consists of the three basal epidermal sites $\\{(x-1, N_e-1), (x, N_e-1), (x+1, N_e-1)\\}$, with x-coordinates clamped to the lattice boundaries $\\{0, \\dots, N-1\\}$. The DC becomes activated with probability $p_{\\text{act}}(t) = 1 - e^{-\\beta n_d(t)}$, where $\\beta = 0.25$. Once activated, a DC remains activated.\n    2.  **Movement**: An activated DC attempts to migrate towards the lymphatic exit. With probability $m$ (a test parameter), it moves one step in the positive y-direction to $(x, y+1)$. If it is at the boundary $y=N-1$, this move results in its exit from the simulation. Exited DCs are removed, and the counter $E(t)$ is incremented. A resting DC performs a random jitter with probability $p_{\\text{jitter}} = 0.3$. This involves moving to a new position chosen uniformly from its $3 \\times 3$ Moore neighborhood (including its current position), with the new position clamped to remain within the dermis ($y' \\ge N_e$).\n\n-   **T Cell Recruitment and Dynamics**:\n    1.  **Recruitment**: At a single, specific time point, $t = \\tau_{\\text{sens}} = 24$, effector T cells are introduced. Their number is $N_T = \\lfloor 0.5 + k_T \\cdot E(\\tau_{\\text{sens}}) \\rfloor$, where $k_T = 0.8$ and $E(\\tau_{\\text{sens}})$ is the total count of DCs that have exited by this time. These T cells are placed at uniformly random positions in the dermis.\n    2.  **Movement**: For all $t \\ge \\tau_{\\text{sens}}$, each T cell performs a random walk. At each time step, it moves to one of its eight adjacent Moore neighbors (excluding its current position), chosen uniformly at random. The new position is clamped to the dermal boundaries.\n\n-   **Macrophage Dynamics**:\n    1.  **Activation**: For all $t \\ge \\tau_{\\text{sens}}$, any resting macrophage becomes permanently activated if at least one T cell is found within a Chebyshev distance of $1$ (i.e., in its $3 \\times 3$ Moore neighborhood). Macrophages are sessile and do not move.\n    2.  **Keratinocyte Damage**: Each activated macrophage attempts to induce damage once per time step. It selects a target keratinocyte uniformly at random from the sites $(x', y')$ where $x' \\in \\{x_M-1, x_M, x_M+1\\}$ (clamped) and $y' \\in \\{N_e-2, N_e-1\\}$, where $(x_M, y_M)$ is the macrophage's position. If the chosen keratinocyte is not already damaged, it becomes damaged with probability $p_K = \\min(1, c)$, where $c$ is a test parameter.\n\n**4. Output Calculation**\n\nAfter the final time step $t=T_{\\text{end}}-1=71$, the simulation terminates. The final lesion size $L$ is calculated as the total number of damaged keratinocytes:\n$$L = \\sum_{y=0}^{N_e-1} \\sum_{x=0}^{N-1} K(y,x,T_{\\text{end}})$$\nThis process is repeated for each test case, and the resulting integer lesion sizes are reported.\n```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nimport math\nimport itertools\n\nclass ContactHypersensitivitySim:\n    \"\"\"\n    Implements a discrete-time, 2D agent-based model of contact hypersensitivity.\n    \"\"\"\n\n    def __init__(self, d, m, c, seed):\n        # Test case parameters\n        self.d = d\n        self.m = m\n        self.c = c\n        self.seed = seed\n        self.rng = np.random.default_rng(self.seed)\n\n        # Model constants\n        self.N = 20\n        self.N_e = self.N // 2\n        self.T_end = 72\n        self.tau_sens = 24\n        self.alpha = 0.5\n        self.beta = 0.25\n        self.p_jitter = 0.3\n        self.k_T = 0.8\n        self.N_DC = 40\n        self.N_M = 60\n        self.p_K = min(1.0, self.c)\n\n        # Agent state storage\n        self.K = np.zeros((self.N_e, self.N), dtype=np.int8)\n        self.dc_agents = []\n        self.mac_agents = []\n        self.t_cell_agents = []\n        self.E = 0  # Cumulative exited DC count\n\n        # Pre-calculated offsets for Moore neighborhoods\n        self.moore_offsets_8 = np.array([p for p in itertools.product([-1, 0, 1], repeat=2) if p != (0, 0)])\n        self.moore_offsets_9 = np.array(list(itertools.product([-1, 0, 1], repeat=2)))\n\n    def run_simulation(self):\n        \"\"\"Initializes and runs the full simulation, returning the final lesion size.\"\"\"\n        self._initialize_state()\n        for t in range(self.T_end):\n            self._tick(t)\n        return int(np.sum(self.K))\n\n    def _initialize_state(self):\n        \"\"\"Sets up the initial state of the simulation at t=0.\"\"\"\n        # 1. Initial keratinocyte damage\n        x_c, y_c = self.N // 2, self.N_e // 2\n        R_d = 2 + math.floor(self.d)\n        p0_d = 1.0 - math.exp(-self.alpha * self.d)\n\n        if self.d > 0:\n            for y in range(self.N_e):\n                for x in range(self.N):\n                    dist = math.sqrt((x - x_c)**2 + (y - y_c)**2)\n                    if dist = R_d:\n                        if self.rng.random()  p0_d:\n                            self.K[y, x] = 1\n\n        # 2. Initial DC population\n        xs_dc = self.rng.integers(0, self.N, size=self.N_DC)\n        ys_dc = self.rng.integers(self.N_e, self.N_e + 3, size=self.N_DC)\n        self.dc_agents = [{'pos': (xs_dc[i], ys_dc[i]), 'state': 'resting'} for i in range(self.N_DC)]\n\n        # 3. Initial macrophage population\n        xs_m = self.rng.integers(0, self.N, size=self.N_M)\n        ys_m = self.rng.integers(self.N_e, self.N, size=self.N_M)\n        self.mac_agents = [{'pos': (xs_m[i], ys_m[i]), 'state': 'resting'} for i in range(self.N_M)]\n\n    def _tick(self, t):\n        \"\"\"Executes a single time step of the simulation.\"\"\"\n        self._update_dcs()\n        self._recruit_t_cells(t)\n        self._update_t_cells_and_macrophages(t)\n\n    def _update_dcs(self):\n        \"\"\"Updates the state and position of all dendritic cells.\"\"\"\n        next_dc_agents = []\n        exited_this_step = 0\n\n        for dc in self.dc_agents:\n            pos = dc['pos']\n            current_state = dc['state']\n            is_activated = (current_state == 'activated')\n\n            if not is_activated:\n                # Check for activation\n                x_dc, _ = pos\n                n_d = 0\n                for dx in [-1, 0, 1]:\n                    x_contact = np.clip(x_dc + dx, 0, self.N - 1)\n                    if self.K[self.N_e - 1, x_contact] == 1:\n                        n_d += 1\n                \n                p_act = 1.0 - math.exp(-self.beta * n_d) if n_d > 0 else 0.0\n                if self.rng.random()  p_act:\n                    is_activated = True\n\n            # Movement logic\n            if is_activated:\n                if self.rng.random()  self.m:\n                    if pos[1] == self.N - 1:\n                        exited_this_step += 1\n                        continue  # DC exits and is removed\n                    else:\n                        pos = (pos[0], pos[1] + 1)\n            else:  # Resting DC jitter\n                if self.rng.random()  self.p_jitter:\n                    offset = self.rng.choice(self.moore_offsets_9, axis=0)\n                    new_x = np.clip(pos[0] + offset[0], 0, self.N - 1)\n                    new_y = np.clip(pos[1] + offset[1], self.N_e, self.N - 1)\n                    pos = (new_x, new_y)\n\n            next_dc_agents.append({'pos': pos, 'state': 'activated' if is_activated else 'resting'})\n\n        self.dc_agents = next_dc_agents\n        self.E += exited_this_step\n\n    def _recruit_t_cells(self, t):\n        \"\"\"Introduces T cells at the sensitization time.\"\"\"\n        if t == self.tau_sens:\n            n_t = math.floor(0.5 + self.k_T * self.E)\n            if n_t > 0:\n                xs_t = self.rng.integers(0, self.N, size=n_t)\n                ys_t = self.rng.integers(self.N_e, self.N, size=n_t)\n                self.t_cell_agents = [{'pos': (xs_t[i], ys_t[i])} for i in range(n_t)]\n\n    def _update_t_cells_and_macrophages(self, t):\n        \"\"\"Updates T-cell positions, macrophage activation, and macrophage-mediated damage.\"\"\"\n        if t  self.tau_sens or not self.t_cell_agents:\n            return\n\n        # Update T-cell positions\n        for tc in self.t_cell_agents:\n            offset = self.rng.choice(self.moore_offsets_8, axis=0)\n            new_x = np.clip(tc['pos'][0] + offset[0], 0, self.N - 1)\n            new_y = np.clip(tc['pos'][1] + offset[1], self.N_e, self.N - 1)\n            tc['pos'] = (new_x, new_y)\n        \n        t_cell_locs = {tc['pos'] for tc in self.t_cell_agents}\n\n        # Update macrophages and damage\n        for mac in self.mac_agents:\n            # Activation\n            if mac['state'] == 'resting':\n                mac_x, mac_y = mac['pos']\n                for dx in [-1, 0, 1]:\n                    for dy in [-1, 0, 1]:\n                        neighbor_pos = (mac_x + dx, mac_y + dy)\n                        if neighbor_pos in t_cell_locs:\n                            mac['state'] = 'activated'\n                            break\n                    if mac['state'] == 'activated':\n                        break\n\n            # Damage amplification\n            if mac['state'] == 'activated':\n                mac_x, _ = mac['pos']\n                \n                # Determine valid targets\n                valid_x = [x for x in range(mac_x - 1, mac_x + 2) if 0 = x  self.N]\n                valid_y = [self.N_e - 2, self.N_e - 1]\n                target_choices = list(itertools.product(valid_x, valid_y))\n                \n                target_idx = self.rng.integers(0, len(target_choices))\n                target_x, target_y = target_choices[target_idx]\n\n                if self.K[target_y, target_x] == 0:\n                    if self.rng.random()  self.p_K:\n                        self.K[target_y, target_x] = 1\n\ndef solve():\n    \"\"\"\n    Runs the simulation for all specified test cases and prints the final results.\n    \"\"\"\n    test_cases = [\n        (1.5, 0.6, 0.4),  # Case 0\n        (0.0, 0.8, 0.7),  # Case 1\n        (3.0, 0.9, 0.9),  # Case 2\n        (1.5, 0.1, 0.9),  # Case 3\n    ]\n\n    results = []\n    for i, (d, m, c) in enumerate(test_cases):\n        seed = 12345 + i\n        sim = ContactHypersensitivitySim(d, m, c, seed)\n        lesion_size = sim.run_simulation()\n        results.append(lesion_size)\n\n    # Format the final output string exactly as required\n    print(f\"[{','.join(map(str, results))}]\")\n\nif __name__ == '__main__':\n    solve()\n```", "answer": "[93,0,165,116]", "id": "2904755"}]}