{"hands_on_practices": [{"introduction": "The vastness of the adaptive immune repertoire is a cornerstone of its function, but where does this diversity originate? Before considering complex factors like junctional diversity or somatic hypermutation, we can establish a baseline by calculating the 'raw' combinatorial diversity from the V(D)J gene segments. This foundational exercise [@problem_id:2886937] demonstrates how the simple multiplication rule allows us to estimate the immense number of unique T-cell and B-cell receptors that can be generated just by mixing and matching gene segments, providing a crucial first look into the scale of the immune system's potential.", "problem": "A large-scale repertoire sequencing study aims to quantify the potential diversity contributed purely by combinatorial gene segment choice in the T-cell receptor (TCR) and B-cell receptor (BCR) loci, ignoring junctional diversity, selection, and pairing with other chains. Consider the T-cell receptor beta (TRB) locus and the immunoglobulin heavy chain (IGH) locus. Assume the following, consistent with widely accepted immunological principles: during V(D)J recombination, a single variable (V), diversity (D), and joining (J) gene segment are chosen to form the complementarity-determining region 3 (CDR3)-spanning exon in loci that contain all three segment types, and that in the raw combinatorial model these choices are independent within a locus. The repertoire sequencing curation has yielded counts of functional gene segments for the TRB locus as $48$ V segments, $2$ D segments, and $13$ J segments, and for the IGH locus as $44$ V segments, $23$ D segments, and $6$ J segments. Take these counts as exact and assume that only functional gene segments are considered in the combinatorial space.\n\nStarting from the definition of V(D)J recombination as independent selection of one gene segment from each class present in the locus and the multiplication rule for counting independent choices, first determine the number of raw combinatorial gene choices for TRB and for IGH. Then compute the fold-difference, defined as the ratio of the IGH raw combinatorial count to the TRB raw combinatorial count. Report this fold-difference as a unitless decimal. Round your final answer to four significant figures.", "solution": "The problem statement is subjected to validation.\n\n**Step 1: Extract Givens**\n- The context is V(D)J recombination for the T-cell receptor beta (TRB) locus and the immunoglobulin heavy chain (IGH) locus.\n- The principle of recombination is the independent selection of one variable (V), one diversity (D), and one joining (J) gene segment.\n- For the TRB locus, the number of functional gene segments are:\n  - $N_V^{\\text{TRB}} = 48$\n  - $N_D^{\\text{TRB}} = 2$\n  - $N_J^{\\text{TRB}} = 13$\n- For the IGH locus, the number of functional gene segments are:\n  - $N_V^{\\text{IGH}} = 44$\n  - $N_D^{\\text{IGH}} = 23$\n  - $N_J^{\\text{IGH}} = 6$\n- The task is to first compute the raw combinatorial diversity for each locus.\n- The final task is to compute the fold-difference, defined as the ratio of the IGH combinatorial count to the TRB combinatorial count, rounded to four significant figures.\n\n**Step 2: Validate Using Extracted Givens**\n- **Scientifically Grounded:** The problem describes V(D)J recombination, a cornerstone of adaptive immunology. The model of independent choice of one V, one D, and one J segment to calculate raw combinatorial diversity is a standard, correct, albeit simplified, approach. The gene segment counts provided are realistic approximations for the human genome. The problem is scientifically sound.\n- **Well-Posed:** The problem provides all necessary numerical data and a clear definition of the combinatorial rule (multiplication principle for independent choices) and the desired final metric (ratio of counts). The instructions for calculation and rounding are explicit. A unique, stable solution is attainable.\n- **Objective:** The problem is stated in precise, quantitative, and objective language, free of ambiguity, subjectivity, or opinion.\n\n**Step 3: Verdict and Action**\nThe problem is valid. It is a straightforward application of combinatorial principles to a well-defined biological context. Proceeding to solution.\n\nThe fundamental principle for calculating the number of possible outcomes for a series of independent events is the multiplication rule. For a given locus, the total number of raw combinatorial V(D)J gene choices, denoted as $C$, is the product of the number of available choices for each gene segment type.\n\nFor the T-cell receptor beta (TRB) locus, we are given:\n- Number of V segments: $N_V^{\\text{TRB}} = 48$\n- Number of D segments: $N_D^{\\text{TRB}} = 2$\n- Number of J segments: $N_J^{\\text{TRB}} = 13$\n\nThe raw combinatorial diversity for the TRB locus, $C_{\\text{TRB}}$, is calculated as the product of these counts:\n$$C_{\\text{TRB}} = N_V^{\\text{TRB}} \\times N_D^{\\text{TRB}} \\times N_J^{\\text{TRB}}$$\n$$C_{\\text{TRB}} = 48 \\times 2 \\times 13 = 96 \\times 13 = 1248$$\n\nFor the immunoglobulin heavy chain (IGH) locus, we are given:\n- Number of V segments: $N_V^{\\text{IGH}} = 44$\n- Number of D segments: $N_D^{\\text{IGH}} = 23$\n- Number of J segments: $N_J^{\\text{IGH}} = 6$\n\nThe raw combinatorial diversity for the IGH locus, $C_{\\text{IGH}}$, is calculated similarly:\n$$C_{\\text{IGH}} = N_V^{\\text{IGH}} \\times N_D^{\\text{IGH}} \\times N_J^{\\text{IGH}}$$\n$$C_{\\text{IGH}} = 44 \\times 23 \\times 6 = 1012 \\times 6 = 6072$$\n\nThe problem asks for the fold-difference, $F$, defined as the ratio of the IGH raw combinatorial count to the TRB raw combinatorial count.\n$$F = \\frac{C_{\\text{IGH}}}{C_{\\text{TRB}}}$$\nSubstituting the calculated values:\n$$F = \\frac{6072}{1248}$$\n\nWe perform the division to obtain a decimal value:\n$$F \\approx 4.865384615...$$\n\nThe problem requires the final answer to be rounded to four significant figures. The first four significant figures are $4$, $8$, $6$, and $5$. The fifth significant digit is $3$, which is less than $5$, so we round down (i.e., we truncate).\nTherefore, the rounded fold-difference is $4.865$. This represents that the raw combinatorial potential of the IGH locus is approximately $4.865$ times greater than that of the TRB locus, based on the provided gene segment counts.", "answer": "$$\\boxed{4.865}$$", "id": "2886937"}, {"introduction": "High-throughput sequencing has revolutionized immunology, but it's not a perfect technology; every base call has an associated probability of error. This practice [@problem_id:2886929] delves into the critical task of quality control by exploring the Phred quality score, the industry standard for quantifying sequencing accuracy. You will derive the logarithmic relationship $Q = -10 \\log_{10}(p)$ between error probability $p$ and Phred scores $Q$, and apply this knowledge to set a practical quality threshold to ensure the CDR3 sequences you analyze are trustworthy.", "problem": "A laboratory performing high-throughput repertoire sequencing of T Cell Receptors (TCRs) and B Cell Receptors (BCRs) seeks to set a base-calling quality threshold that controls sequence-level errors in complementarity-determining region 3 (CDR3) calls. Consider a single base call with error probability $p \\in (0,1)$, and let the associated Phred quality score be $Q$. By definition, the Phred scale is logarithmic on base $10$ such that a tenfold decrease in $p$ corresponds to an additive increase of $10$ in $Q$, and $Q=0$ when $p=1$.\n\nTask (i): Using only these defining properties, derive an explicit expression for $Q$ as a function of $p$.\n\nTask (ii): For a TCR $\\beta$-chain CDR3 region of length $L=45$ bases, assume base-calling errors occur independently across positions with identical per-base error probability bounded above by $p$. The laboratory will enforce a single per-base Phred threshold $Q^{\\star}$ across the entire CDR3 region; only bases with scores at least $Q^{\\star}$ are retained, so the per-base error probability satisfies $p \\leq p^{\\star}$ implied by $Q^{\\star}$. Determine the minimum $Q^{\\star}$ that guarantees the probability that a retained CDR3 sequence contains at least one erroneous base is at most $\\alpha=0.01$. Round your final numerical answer for $Q^{\\star}$ to four significant figures.", "solution": "The problem as stated is scientifically grounded in the principles of bioinformatics and probability theory, is well-posed with all necessary data provided, and is expressed in objective, unambiguous language. It is therefore deemed valid and a rigorous solution will be constructed.\n\nThe problem is divided into two parts. We will address each in sequence.\n\nPart (i): Derivation of the Phred score formula.\n\nThe problem provides two defining properties of the Phred quality score, $Q$, as a function of the base-calling error probability, $p$.\n$1$. A tenfold decrease in $p$ corresponds to an additive increase of $10$ in $Q$.\n$2$. $Q=0$ when $p=1$.\n\nThe first property suggests a logarithmic relationship between $Q$ and $p$. Let us propose a general form based on a base-$10$ logarithm, as is conventional for such scales:\n$$Q(p) = A \\log_{10}(p) + B$$\nwhere $A$ and $B$ are constants to be determined.\n\nLet us consider two error probabilities, $p_1$ and $p_2$, where $p_2 = \\frac{p_1}{10}$. The corresponding quality scores are $Q_1 = Q(p_1)$ and $Q_2 = Q(p_2)$. According to property $1$, we must have $Q_2 = Q_1 + 10$.\n\nLet us apply our proposed functional form:\n$$Q_1 = A \\log_{10}(p_1) + B$$\n$$Q_2 = A \\log_{10}(p_2) + B = A \\log_{10}\\left(\\frac{p_1}{10}\\right) + B$$\nUsing the properties of logarithms, $\\log_{10}(x/y) = \\log_{10}(x) - \\log_{10}(y)$, we have:\n$$Q_2 = A (\\log_{10}(p_1) - \\log_{10}(10)) + B = A (\\log_{10}(p_1) - 1) + B$$\n$$Q_2 = (A \\log_{10}(p_1) + B) - A = Q_1 - A$$\nWe are given that $Q_2 = Q_1 + 10$. Comparing this with our derived relation $Q_2 = Q_1 - A$, we find:\n$$Q_1 + 10 = Q_1 - A \\implies A = -10$$\nSo, the function must be of the form $Q(p) = -10 \\log_{10}(p) + B$.\n\nNow, we use the second property: $Q(1) = 0$.\n$$Q(1) = -10 \\log_{10}(1) + B$$\nSince $\\log_{10}(1) = 0$, this simplifies to:\n$$0 = -10(0) + B \\implies B = 0$$\nThus, the constants are determined. The explicit expression for $Q$ as a function of $p$ is:\n$$Q(p) = -10 \\log_{10}(p)$$\n\nPart (ii): Determination of the minimum Phred score threshold $Q^{\\star}$.\n\nWe are given a complementarity-determining region 3 (CDR3) of length $L=45$ bases. Base-calling errors are assumed to be independent events, and the per-base error probability $p$ is identical for all positions. A quality threshold $Q^{\\star}$ is applied, which means that for any retained base, its quality score $Q \\geq Q^{\\star}$. This implies an upper bound on its error probability, $p \\leq p^{\\star}$, where $p^{\\star}$ is the error probability corresponding to the score $Q^{\\star}$.\n\nLet $E$ be the event that a CDR3 sequence of length $L$ contains at least one erroneous base. The probability of this event, $P(E)$, must be at most $\\alpha = 0.01$.\nThe event complementary to $E$ is the event that the sequence contains zero errors, i.e., all $L$ bases are called correctly. The probability of a single base being correct is $1-p$. Due to the independence of errors, the probability of the entire sequence being correct is:\n$$P(E^c) = (1-p)^L$$\nThe probability of at least one error is therefore:\n$$P(E) = 1 - P(E^c) = 1 - (1-p)^L$$\nThe quality control constraint is $P(E) \\leq \\alpha$.\n$$1 - (1-p)^L \\leq \\alpha$$\nThe function $f(p) = 1 - (1-p)^L$ is monotonically increasing with $p$. To ensure the constraint is met for all sequences passing the filter (where $p \\leq p^{\\star}$), we must satisfy the constraint for the worst-case scenario, which is $p = p^{\\star}$.\n$$1 - (1-p^{\\star})^L \\leq \\alpha$$\nWe seek the minimum required threshold $Q^{\\star}$. The function $Q(p) = -10 \\log_{10}(p)$ is monotonically decreasing in $p$. A lower $Q^{\\star}$ permits a higher $p^{\\star}$. Therefore, the minimum $Q^{\\star}$ corresponds to the maximum permissible error probability $p^{\\star}$. We find this maximum $p^{\\star}$ by solving the equality:\n$$1 - (1-p^{\\star})^L = \\alpha$$\n$$(1-p^{\\star})^L = 1 - \\alpha$$\n$$1-p^{\\star} = (1 - \\alpha)^{1/L}$$\n$$p^{\\star} = 1 - (1 - \\alpha)^{1/L}$$\nNow, we can find the minimum threshold $Q^{\\star}$ using the derived formula from Part (i):\n$$Q^{\\star} = -10 \\log_{10}(p^{\\star}) = -10 \\log_{10}\\left(1 - (1 - \\alpha)^{1/L}\\right)$$\nWe substitute the given values $L=45$ and $\\alpha=0.01$:\n$$Q^{\\star} = -10 \\log_{10}\\left(1 - (1 - 0.01)^{1/45}\\right) = -10 \\log_{10}\\left(1 - (0.99)^{1/45}\\right)$$\nWe proceed with numerical computation.\nFirst, we evaluate the term inside the logarithm:\n$$p^{\\star} = 1 - (0.99)^{1/45} \\approx 1 - 0.9997766842 = 0.0002233158$$\nNext, we substitute this value into the expression for $Q^{\\star}$:\n$$Q^{\\star} = -10 \\log_{10}(0.0002233158) \\approx -10(-3.651130) \\approx 36.51130$$\nThe problem requires the final answer to be rounded to four significant figures. The first four significant figures are $3$, $6$, $5$, and $1$. The fifth significant figure is $1$, so we round down.\n$$Q^{\\star} \\approx 36.51$$", "answer": "$$\\boxed{36.51}$$", "id": "2886929"}, {"introduction": "After sequencing and quality filtering, a central challenge in analyzing B-cell repertoires is distinguishing true biological mutations—somatic hypermutations (SHM)—from the inevitable background of PCR and sequencing errors. This advanced practice [@problem_id:2886899] guides you in designing a powerful statistical test to solve this very problem. By leveraging the biological signature of SHM, specifically its enrichment at 'hotspot' DNA motifs targeted by the AID enzyme, you will learn to build a model that can computationally separate meaningful biological signal from technical noise.", "problem": "You are tasked with designing and implementing a statistical hypothesis test to distinguish Somatic Hypermutation (SHM) from Polymerase Chain Reaction (PCR) or sequencing errors in immunoglobulin repertoire sequencing using Unique Molecular Identifier (UMI)-based consensus and context-dependent enrichment at Activation-Induced Cytidine Deaminase (AID) hotspots. Your solution must be a complete, runnable program that computes a p-value for each provided dataset and applies a decision rule.\n\nFundamental bases and core definitions:\n\n- Activation-Induced Cytidine Deaminase (AID) generates SHM enriched at sequence motifs known as hotspots, specifically the trinucleotide motifs WRC on the coding strand (where W is A or T, R is A or G, and the central base is C) and its reverse complement GYW on the opposite strand. In explicit forward-strand conditions, a position at index $i$ is an AID hotspot if either $s[i] = \\text{C}$ and $s[i-1] \\in \\{\\text{A},\\text{T}\\}$ and $s[i+1] \\in \\{\\text{A},\\text{G}\\}$ (WRC) or $s[i] = \\text{G}$ and $s[i-1] \\in \\{\\text{C},\\text{T}\\}$ and $s[i+1] \\in \\{\\text{A},\\text{T}\\}$ (GYW).\n- Unique Molecular Identifier (UMI)-based consensus collapses PCR duplicates by grouping reads derived from the same starting molecule; a consensus base call is accepted for a UMI family only when it exceeds a predetermined fraction threshold $\\tau$ of reads within that family.\n- Under the null hypothesis representing residual sequencing or PCR errors after UMI consensus, the per-opportunity error rate is approximately context-independent. Under the alternative hypothesis representing SHM, substitutions are enriched at AID hotspots, producing a higher rate at hotspots than at non-hotspots.\n\nStatistical model and test:\n\n- For each dataset, compute the number of opportunities (exposures) and the number of observed substitutions at hotspot and non-hotspot positions as follows. Let $E_h$ be the total number of UMI-family consensus opportunities at hotspot positions and $E_n$ be the total number at non-hotspot positions. Let $k_h$ and $k_n$ be the corresponding counts of observed consensus substitutions (consensus base different from germline reference) in these two context classes.\n- Model counts as independent Poisson random variables with means proportional to exposures. Under the null hypothesis $\\mathcal{H}_0$, a single rate $r$ applies to both classes: $k_h \\sim \\text{Poisson}(r E_h)$ and $k_n \\sim \\text{Poisson}(r E_n)$. Under the alternative hypothesis $\\mathcal{H}_1$, allow separate rates: $k_h \\sim \\text{Poisson}(r_h E_h)$ and $k_n \\sim \\text{Poisson}(r_n E_n)$ with $r_h \\neq r_n$ and biologically $r_h > r_n$. Use the likelihood ratio test statistic\n$$\n\\Lambda \\equiv -2 \\log\\left(\\frac{L_0}{L_1}\\right) = 2\\left[\\ell_1 - \\ell_0\\right],\n$$\nwhere $\\ell_0$ and $\\ell_1$ are the maximized log-likelihoods under $\\mathcal{H}_0$ and $\\mathcal{H}_1$. The maximum likelihood estimates are $ \\hat r = \\frac{k_h + k_n}{E_h + E_n}$ under $\\mathcal{H}_0$ and $\\hat r_h = \\frac{k_h}{E_h}$, $\\hat r_n = \\frac{k_n}{E_n}$ under $\\mathcal{H}_1$. Using the Poisson log-likelihoods and dropping $k!$ terms that cancel in the ratio, the statistic simplifies to\n$$\n\\Lambda = 2\\left[ k_h \\log\\left(\\frac{k_h}{\\hat r E_h}\\right) + k_n \\log\\left(\\frac{k_n}{\\hat r E_n}\\right) - \\left(k_h + k_n - \\hat r (E_h + E_n)\\right) \\right],\n$$\nwith the conventions that $0 \\log(0/x) \\equiv 0$ and if $k_h + k_n = 0$ then $\\Lambda = 0$. Under standard regularity conditions, $\\Lambda$ is approximately $\\chi^2$ distributed with $1$ degree of freedom; thus the p-value is $p = 1 - F_{\\chi^2_1}(\\Lambda)$.\n- Decision rule: reject $\\mathcal{H}_0$ in favor of enrichment consistent with SHM if $p < \\alpha$ with $\\alpha = 0.01$.\n\nUMI consensus calling:\n\n- For each UMI family at a given position, compute base counts for $\\{\\text{A}, \\text{C}, \\text{G}, \\text{T}\\}$. Let the family size be $n$. A consensus base call is accepted if the maximum count $m$ is unique and $\\frac{m}{n} \\ge \\tau$. If no consensus is accepted, the family is excluded from exposure counts.\n- Exposures are counted as the number of accepted-consensus UMI families per position. Substitutions are counted when the accepted consensus base differs from the germline reference base at that position.\n\nAngle units are not applicable. There are no physical units. All real-valued outputs must be rounded to $6$ decimal places. All decisions are booleans.\n\nYour program must implement the above and evaluate the following test suite. The UMI consensus threshold is $\\tau = 0.7$ for all cases. Each test case is defined by a germline reference sequence and, for each position, a list of UMI families represented as strings of base calls, one character per read. For simplicity, every UMI family here has $5$ reads.\n\nTest suite:\n\n- Case $1$ (enriched SHM-like pattern):\n  - Reference: \"ATCAGTCGTACG\"\n  - UMI families by position index $0$ to $11$:\n    - $0$: [\"AAAAA\",\"AAAAA\",\"AAAAA\"]\n    - $1$: [\"TTTTT\",\"TTTTT\",\"TTTTT\"]\n    - $2$: [\"TTTTT\",\"TTTTT\",\"CCCCC\"]\n    - $3$: [\"AAAAA\",\"AAAAA\",\"AAAAA\"]\n    - $4$: [\"GGGGG\",\"GGGGG\",\"GGGGG\"]\n    - $5$: [\"TTTTT\",\"TTTTT\",\"TTTTT\"]\n    - $6$: [\"TTTTT\",\"TTTTT\",\"CCCCC\"]\n    - $7$: [\"AAAAA\",\"AAAAA\",\"GGGGG\"]\n    - $8$: [\"TTTTT\",\"TTTTT\",\"TTTTT\"]\n    - $9$: [\"AAAAA\",\"GGGGG\",\"AAAAA\"]\n    - $10$: [\"TTTTT\",\"TTTTT\",\"CCCCC\"]\n    - $11$: [\"GGGGG\",\"GGGGG\",\"GGGGG\"]\n- Case $2$ (null-like, errors distributed similarly in both contexts):\n  - Reference: \"ATCAGTCGTACG\"\n  - UMI families by position:\n    - $0$: [\"AAAAA\",\"AAAAA\",\"AAAAA\"]\n    - $1$: [\"TTTTT\",\"TTTTT\",\"GGGGG\"]\n    - $2$: [\"CCCCC\",\"TTTTT\",\"CCCCC\"]\n    - $3$: [\"AAAAA\",\"AAAAA\",\"AAAAA\"]\n    - $4$: [\"GGGGG\",\"GGGGG\",\"AAAAA\"]\n    - $5$: [\"TTTTT\",\"TTTTT\",\"TTTTT\"]\n    - $6$: [\"CCCCC\",\"CCCCC\",\"CCCCC\"]\n    - $7$: [\"GGGGG\",\"GGGGG\",\"AAAAA\"]\n    - $8$: [\"TTTTT\",\"TTTTT\",\"TTTTT\"]\n    - $9$: [\"AAAAA\",\"AAAAA\",\"AAAAA\"]\n    - $10$: [\"CCCCC\",\"CCCCC\",\"CCCCC\"]\n    - $11$: [\"GGGGG\",\"GGGGG\",\"GGGGG\"]\n- Case $3$ (no detected substitutions):\n  - Reference: \"ATCAGTCGTACG\"\n  - UMI families by position:\n    - $0$: [\"AAAAA\",\"AAAAA\",\"AAAAA\"]\n    - $1$: [\"TTTTT\",\"TTTTT\",\"TTTTT\"]\n    - $2$: [\"CCCCC\",\"CCCCC\",\"CCCCC\"]\n    - $3$: [\"AAAAA\",\"AAAAA\",\"AAAAA\"]\n    - $4$: [\"GGGGG\",\"GGGGG\",\"GGGGG\"]\n    - $5$: [\"TTTTT\",\"TTTTT\",\"TTTTT\"]\n    - $6$: [\"CCCCC\",\"CCCCC\",\"CCCCC\"]\n    - $7$: [\"GGGGG\",\"GGGGG\",\"GGGGG\"]\n    - $8$: [\"TTTTT\",\"TTTTT\",\"TTTTT\"]\n    - $9$: [\"AAAAA\",\"AAAAA\",\"AAAAA\"]\n    - $10$: [\"CCCCC\",\"CCCCC\",\"CCCCC\"]\n    - $11$: [\"GGGGG\",\"GGGGG\",\"GGGGG\"]\n\nFinal output format requirements:\n\n- For each case, output a two-element list $[p, d]$ where $p$ is the p-value rounded to $6$ decimal places and $d$ is a boolean indicating whether $\\mathcal{H}_0$ is rejected at $\\alpha = 0.01$.\n- Your program should produce a single line of output containing the results for the three cases as a comma-separated list enclosed in square brackets, with no spaces, for example: \"[[p1,d1],[p2,d2],[p3,d3]]\".", "solution": "The problem requires the design and implementation of a statistical hypothesis test to determine if observed substitutions in immunoglobulin sequences are due to Somatic Hypermutation (SHM) or are consistent with random sequencing errors. The method relies on the enrichment of SHM at specific DNA motifs (AID hotspots) and leverages Unique Molecular Identifiers (UMIs) to reduce noise from PCR and sequencing artifacts. The solution is executed by implementing the specified procedure, from data processing to statistical inference.\n\nThe overall workflow is structured as follows:\nFirst, for a given germline reference sequence, we identify all positions that qualify as Activation-Induced Cytidine Deaminase (AID) hotspots based on the provided trinucleotide context rules.\nSecond, we process the UMI-based sequencing data. For each UMI family at each position, we apply a consensus calling rule to determine the most likely base. A consensus is accepted only if the dominant base appears in a fraction of reads exceeding a threshold $\\tau$.\nThird, we aggregate counts across all positions and UMI families. We tabulate the total number of opportunities (exposures) and the number of observed substitutions, separately for hotspot and non-hotspot positions. This yields four crucial values: $k_h$ (substitutions at hotspots), $E_h$ (exposures at hotspots), $k_n$ (substitutions at non-hotspots), and $E_n$ (exposures at non-hotspots).\nFourth, we perform a likelihood ratio test based on a Poisson model of substitution counts. The null hypothesis, $\\mathcal{H}_0$, posits a single, context-independent substitution rate $r$, while the alternative hypothesis, $\\mathcal{H}_1$, allows for different rates, $r_h$ and $r_n$, for hotspot and non-hotspot contexts.\nFinally, we calculate the p-value and apply the specified decision rule.\n\nHere is a detailed breakdown of each step:\n\n**1. AID Hotspot Identification**\nThe biological premise is that the AID enzyme preferentially introduces mutations at specific sequence motifs. The problem defines these hotspots on the forward strand by the trinucleotide contexts $WRC$ (where $W \\in \\{A, T\\}$, $R \\in \\{A, G\\}$, and the central mutated base is $C$) and its reverse complement $GYW$ (where $Y \\in \\{C, T\\}$, $W \\in \\{A, T\\}$, and the central mutated base is $G$). For a reference sequence $s$, a position $i$ is a hotspot if it meets one of these conditions:\n- $s[i] = \\text{'C'}$, $s[i-1] \\in \\{\\text{'A'}, \\text{'T'}\\}$, and $s[i+1] \\in \\{\\text{'A'}, \\text{'G'}\\}$.\n- $s[i] = \\text{'G'}$, $s[i-1] \\in \\{\\text{'C'}, \\text{'T'}\\}$, and $s[i+1] \\in \\{\\text{'A'}, \\text{'T'}\\}$.\nThis definition requires inspecting the immediate neighbors of a position, so the first ($i=0$) and last ($i=N-1$) bases of a sequence of length $N$ cannot be identified as hotspots. A boolean mask is generated to classify each position of the reference sequence as either a hotspot or a non-hotspot.\n\n**2. UMI Consensus and Data Aggregation**\nUMIs allow for the computational bundling of sequencing reads originating from a single initial molecule. This helps distinguish true biological variation from stochastic PCR and sequencing errors. For a given UMI family of size $n$, a consensus base is called if a single base appears with a count $m$ that is both unique and satisfies the condition $m/n \\ge \\tau$. For this problem, $n=5$ and $\\tau=0.7$, which implies a consensus requires a base to be present in at least $m \\ge 3.5$, i.e., $m=4$ or $m=5$ reads. If a UMI family fails to produce a consensus, it is discarded.\n\nFor each position in the reference sequence, we iterate through its associated UMI families:\n- If a valid consensus base is determined, this UMI family contributes one count to the total exposures. Based on the pre-computed hotspot mask, this exposure is added to either $E_h$ or $E_n$.\n- If the consensus base differs from the corresponding base in the germline reference, it is counted as a substitution. This substitution count is added to either $k_h$ or $k_n$, again depending on the context.\n\n**3. The Likelihood Ratio Test**\nThe core of the statistical analysis is the comparison of two models using a likelihood ratio test. The counts are modeled as independent Poisson random variables.\n- **Null Hypothesis ($\\mathcal{H}_0$)**: There is no enrichment at hotspots. Substitutions occur with a single, uniform rate $r$. The expected counts are $\\lambda_h = r E_h$ and $\\lambda_n = r E_n$.\n- **Alternative Hypothesis ($\\mathcal{H}_1$)**: SHM causes enrichment at hotspots. The rates are different, $r_h \\neq r_n$. The expected counts are $\\lambda_h = r_h E_h$ and $\\lambda_n = r_n E_n$.\n\nThe maximum likelihood estimate (MLE) for the rate under $\\mathcal{H}_0$ is the pooled rate across both contexts:\n$$ \\hat{r} = \\frac{k_h + k_n}{E_h + E_n} $$\nUnder $\\mathcal{H}_1$, the MLEs are the individual rates for each context:\n$$ \\hat{r}_h = \\frac{k_h}{E_h} \\quad \\text{and} \\quad \\hat{r}_n = \\frac{k_n}{E_n} $$\nThe likelihood ratio test statistic $\\Lambda$ is given by $\\Lambda = -2 \\log(\\frac{L_0}{L_1})$, where $L_0$ and $L_1$ are the maximized likelihoods of the data under each hypothesis. Using the Poisson log-likelihood function and substituting the MLEs, this simplifies. The problem provides the formula:\n$$ \\Lambda = 2\\left[ k_h \\log\\left(\\frac{k_h}{\\hat{r} E_h}\\right) + k_n \\log\\left(\\frac{k_n}{\\hat{r} E_n}\\right) - \\left(k_h + k_n - \\hat{r} (E_h + E_n)\\right) \\right] $$\nThe term $(k_h + k_n - \\hat{r} (E_h + E_n))$ is identically zero by the definition of $\\hat{r}$. Thus, the calculation simplifies to the G-test statistic for homogeneity of Poisson rates:\n$$ \\Lambda = 2\\left[ k_h \\log\\left(\\frac{k_h}{\\hat{r} E_h}\\right) + k_n \\log\\left(\\frac{k_n}{\\hat{r} E_n}\\right) \\right] $$\nSpecial cases must be handled: by convention, if a count $k_i$ is $0$, the corresponding term $k_i \\log(\\dots)$ is taken as $0$. If there are no substitutions at all ($k_h + k_n = 0$), then $\\hat{r}=0$, and the statistic $\\Lambda$ is defined to be $0$, indicating no evidence against $\\mathcal{H}_0$.\n\n**4. P-value and Decision Rule**\nAccording to Wilks' theorem, under the null hypothesis, the $\\Lambda$ statistic is approximately distributed as a chi-squared ($\\chi^2$) variable. Since the alternative model ($\\mathcal{H}_1$) has one more free parameter ($r_h, r_n$) than the null model ($\\mathcal{H}_0$, with only $r$), the degrees of freedom for the $\\chi^2$ distribution is $1$. The p-value is the probability of observing a test statistic as extreme or more extreme than the one calculated, assuming $\\mathcal{H}_0$ is true:\n$$ p = P(\\chi^2_1 \\ge \\Lambda_{obs}) = 1 - F_{\\chi^2_1}(\\Lambda_{obs}) $$\nwhere $F_{\\chi^2_1}$ is the cumulative distribution function (CDF) of the $\\chi^2$ distribution with $1$ degree of freedom.\nThe final step is to apply the decision rule. If the calculated p-value is less than the significance level $\\alpha = 0.01$, we reject the null hypothesis $\\mathcal{H}_0$. This implies that the observed enrichment of substitutions at hotspots is statistically significant and consistent with the action of SHM rather than random error. Otherwise, we fail to reject $\\mathcal{H}_0$. The program implements this entire procedure and formats the results as requested.", "answer": "```python\nimport numpy as np\nfrom scipy.stats import chi2\n\ndef solve():\n    \"\"\"\n    Main function to run the hypothesis test on the provided test suite.\n    \"\"\"\n\n    test_suite = [\n        {\n            \"name\": \"Case 1 (enriched SHM-like pattern)\",\n            \"reference\": \"ATCAGTCGTACG\",\n            \"umi_data\": {\n                0: [\"AAAAA\", \"AAAAA\", \"AAAAA\"],\n                1: [\"TTTTT\", \"TTTTT\", \"TTTTT\"],\n                2: [\"TTTTT\", \"TTTTT\", \"CCCCC\"],\n                3: [\"AAAAA\", \"AAAAA\", \"AAAAA\"],\n                4: [\"GGGGG\", \"GGGGG\", \"GGGGG\"],\n                5: [\"TTTTT\", \"TTTTT\", \"TTTTT\"],\n                6: [\"TTTTT\", \"TTTTT\", \"CCCCC\"],\n                7: [\"AAAAA\", \"AAAAA\", \"GGGGG\"],\n                8: [\"TTTTT\", \"TTTTT\", \"TTTTT\"],\n                9: [\"AAAAA\", \"GGGGG\", \"AAAAA\"],\n                10: [\"TTTTT\", \"TTTTT\", \"CCCCC\"],\n                11: [\"GGGGG\", \"GGGGG\", \"GGGGG\"],\n            }\n        },\n        {\n            \"name\": \"Case 2 (null-like, errors distributed similarly)\",\n            \"reference\": \"ATCAGTCGTACG\",\n            \"umi_data\": {\n                0: [\"AAAAA\", \"AAAAA\", \"AAAAA\"],\n                1: [\"TTTTT\", \"TTTTT\", \"GGGGG\"],\n                2: [\"CCCCC\", \"TTTTT\", \"CCCCC\"],\n                3: [\"AAAAA\", \"AAAAA\", \"AAAAA\"],\n                4: [\"GGGGG\", \"GGGGG\", \"AAAAA\"],\n                5: [\"TTTTT\", \"TTTTT\", \"TTTTT\"],\n                6: [\"CCCCC\", \"CCCCC\", \"CCCCC\"],\n                7: [\"GGGGG\", \"GGGGG\", \"AAAAA\"],\n                8: [\"TTTTT\", \"TTTTT\", \"TTTTT\"],\n                9: [\"AAAAA\", \"AAAAA\", \"AAAAA\"],\n                10: [\"CCCCC\", \"CCCCC\", \"CCCCC\"],\n                11: [\"GGGGG\", \"GGGGG\", \"GGGGG\"],\n            }\n        },\n        {\n            \"name\": \"Case 3 (no detected substitutions)\",\n            \"reference\": \"ATCAGTCGTACG\",\n            \"umi_data\": {\n                0: [\"AAAAA\", \"AAAAA\", \"AAAAA\"],\n                1: [\"TTTTT\", \"TTTTT\", \"TTTTT\"],\n                2: [\"CCCCC\", \"CCCCC\", \"CCCCC\"],\n                3: [\"AAAAA\", \"AAAAA\", \"AAAAA\"],\n                4: [\"GGGGG\", \"GGGGG\", \"GGGGG\"],\n                5: [\"TTTTT\", \"TTTTT\", \"TTTTT\"],\n                6: [\"CCCCC\", \"CCCCC\", \"CCCCC\"],\n                7: [\"GGGGG\", \"GGGGG\", \"GGGGG\"],\n                8: [\"TTTTT\", \"TTTTT\", \"TTTTT\"],\n                9: [\"AAAAA\", \"AAAAA\", \"AAAAA\"],\n                10: [\"CCCCC\", \"CCCCC\", \"CCCCC\"],\n                11: [\"GGGGG\", \"GGGGG\", \"GGGGG\"],\n            }\n        }\n    ]\n\n    tau = 0.7\n    alpha = 0.01\n\n    def get_hotspots(ref):\n        n = len(ref)\n        is_hotspot = [False] * n\n        for i in range(1, n - 1):\n            if ref[i] == 'C' and ref[i-1] in 'AT' and ref[i+1] in 'AG':  # WRC\n                is_hotspot[i] = True\n            elif ref[i] == 'G' and ref[i-1] in 'CT' and ref[i+1] in 'AT': # GYW\n                is_hotspot[i] = True\n        return is_hotspot\n\n    def get_consensus(umi_family_str, tau_val):\n        n = len(umi_family_str)\n        if n == 0:\n            return None, False\n        \n        counts = {'A': 0, 'C': 0, 'G': 0, 'T': 0}\n        for base in umi_family_str:\n            if base in counts:\n                counts[base] += 1\n        \n        sorted_bases = sorted(counts.items(), key=lambda item: item[1], reverse=True)\n        max_count = sorted_bases[0][1]\n        consensus_base = sorted_bases[0][0]\n        \n        is_max_unique = True\n        if len(sorted_bases) > 1 and sorted_bases[1][1] == max_count:\n            is_max_unique = False\n        \n        if is_max_unique and (max_count / n) >= tau_val:\n            return consensus_base, True\n        else:\n            return None, False\n\n    def process_case(case_data, tau_val):\n        reference = case_data[\"reference\"]\n        umi_data = case_data[\"umi_data\"]\n        \n        is_hotspot = get_hotspots(reference)\n        \n        k_h, E_h, k_n, E_n = 0, 0, 0, 0\n        \n        for i, ref_base in enumerate(reference):\n            if i in umi_data:\n                for umi_family in umi_data[i]:\n                    consensus_base, is_valid = get_consensus(umi_family, tau_val)\n                    if is_valid:\n                        if is_hotspot[i]:\n                            E_h += 1\n                            if consensus_base != ref_base:\n                                k_h += 1\n                        else:\n                            E_n += 1\n                            if consensus_base != ref_base:\n                                k_n += 1\n        return k_h, E_h, k_n, E_n\n\n    results = []\n    for case in test_suite:\n        k_h, E_h, k_n, E_n = process_case(case, tau)\n        \n        total_k = k_h + k_n\n        total_E = E_h + E_n\n        \n        Lambda = 0.0\n        if total_k > 0 and total_E > 0:\n            r_hat = total_k / total_E\n            \n            term_h = 0.0\n            if k_h > 0:\n                expected_h = r_hat * E_h\n                if expected_h > 0:\n                    term_h = k_h * np.log(k_h / expected_h)\n            \n            term_n = 0.0\n            if k_n > 0:\n                expected_n = r_hat * E_n\n                if expected_n > 0:\n                    term_n = k_n * np.log(k_n / expected_n)\n            \n            Lambda = 2 * (term_h + term_n)\n\n        p_value = chi2.sf(Lambda, 1) if Lambda > 0 else 1.0\n        decision = p_value  alpha\n        \n        results.append([round(p_value, 6), decision])\n        \n    formatted_results = []\n    for p, d in results:\n        formatted_results.append(f\"[{p:.6f},{str(d)}]\")\n    \n    final_output = f\"[{','.join(formatted_results)}]\"\n    # Python's default str(bool) is 'True' or 'False' which is fine\n    # The problem asks for no spaces, which join accomplishes.\n    # A final replacement is needed to convert 'True'/'False' to 'true'/'false'\n    # if that's what the execution environment requires, but typically\n    # capitalized is standard for string representation of booleans.\n    # The example shows 'd1', which is ambiguous. Let's stick to standard python output.\n    print(final_output.replace(\" \", \"\"))\n\nsolve()\n```", "id": "2886899"}]}