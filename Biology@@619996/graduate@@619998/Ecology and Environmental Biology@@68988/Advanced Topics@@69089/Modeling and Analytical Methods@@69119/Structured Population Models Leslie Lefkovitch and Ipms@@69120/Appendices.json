{"hands_on_practices": [{"introduction": "The cornerstone of structured population models is the projection equation $\\mathbf{n}_{t+1} = \\mathbf{A}\\mathbf{n}_t$, which describes how a population's stage structure evolves over time. A key result from Perron-Frobenius theory is that for a \"well-behaved\" (primitive) projection matrix $\\mathbf{A}$, any initial population will eventually converge in shape to a unique, stable stage distribution (SSD), denoted by the vector $\\mathbf{w}$. This exercise provides a direct, computational experience of this fundamental process, guiding you to simulate population dynamics and numerically track the convergence of the population's structure towards the SSD using standard distance metrics. [@problem_id:2536698]", "problem": "You are given a set of discrete-time, nonnegative, stage-structured population projection matrices and initial stage-abundance vectors. In each case, the population evolves according to the fundamental recurrence of structured population dynamics, namely $\\mathbf{n}_{t+1} = \\mathbf{A}\\mathbf{n}_t$ for integer time $t \\geq 0$, where $\\mathbf{n}_t$ is the stage-abundance column vector at time $t$ and $\\mathbf{A}$ is a fixed nonnegative projection matrix. For a primitive nonnegative matrix $\\mathbf{A}$, the Perronâ€“Frobenius theorem guarantees a unique positive right eigenvector $\\mathbf{w}$ associated with the dominant eigenvalue, which, when normalized to sum to $1$, is called the stable stage distribution. To quantify how a population starting from an initial abundance vector $\\mathbf{n}_0$ approaches $\\mathbf{w}$, use two metrics computed on normalized stage frequency vectors $\\mathbf{p}_t = \\mathbf{n}_t / \\sum_i n_{t,i}$:\n- Total variation distance defined by $\\mathrm{TV}(\\mathbf{p}_t,\\mathbf{w}) = \\tfrac{1}{2}\\sum_i \\lvert p_{t,i} - w_i \\rvert$.\n- Cosine similarity defined by $\\cos(\\theta_t) = \\dfrac{\\mathbf{p}_t^\\top \\mathbf{w}}{\\lVert \\mathbf{p}_t \\rVert_2 \\lVert \\mathbf{w} \\rVert_2}$.\n\nStarting only from these definitions and the recurrence $\\mathbf{n}_{t+1} = \\mathbf{A}\\mathbf{n}_t$, write a program that, for each test case below, performs the following:\n- Compute the stable stage distribution $\\mathbf{w}$ as the $\\ell_1$-normalized limit of repeatedly applying $\\mathbf{A}$ to an arbitrary positive starting vector; that is, iterate $\\mathbf{v}_{k+1} \\propto \\mathbf{A}\\mathbf{v}_k$ with $\\sum_i v_{k+1,i} = 1$ until convergence.\n- Simulate the projection $\\mathbf{n}_{t+1} = \\mathbf{A}\\mathbf{n}_t$ forward from the specified $\\mathbf{n}_0$.\n- At each requested time $t$ in the provided list, form $\\mathbf{p}_t = \\mathbf{n}_t / \\sum_i n_{t,i}$ and compute $\\mathrm{TV}(\\mathbf{p}_t,\\mathbf{w})$ and $\\cos(\\theta_t)$.\n\nAll values to be output should be rounded to $6$ decimal places. There are no physical units involved. Angles are not to be reported; report the cosine similarity as a decimal.\n\nTest suite:\n- Case $1$ (Leslie matrix, $3\\times 3$):\n  $$\\mathbf{A}_1 = \\begin{bmatrix}\n  0 & 1.1 & 1.8 \\\\\n  0.5 & 0 & 0 \\\\\n  0 & 0.7 & 0\n  \\end{bmatrix},\\quad \\mathbf{n}_{0,1} = \\begin{bmatrix} 0 \\\\ 0 \\\\ 10000 \\end{bmatrix},\\quad \\mathcal{T}_1 = [1,2,5,10,20].$$\n- Case $2$ (Lefkovitch matrix, $4\\times 4$ with stasis and growth):\n  $$\\mathbf{A}_2 = \\begin{bmatrix}\n  0 & 0 & 1.2 & 2.0 \\\\\n  0.3 & 0.3 & 0 & 0 \\\\\n  0 & 0.6 & 0.3 & 0 \\\\\n  0 & 0 & 0.5 & 0.8\n  \\end{bmatrix},\\quad \\mathbf{n}_{0,2} = \\begin{bmatrix} 10000 \\\\ 0 \\\\ 0 \\\\ 0 \\end{bmatrix},\\quad \\mathcal{T}_2 = [1,2,5,10,20].$$\n- Case $3$ (Lefkovitch matrix, $3\\times 3$ with high stasis causing slow convergence):\n  $$\\mathbf{A}_3 = \\begin{bmatrix}\n  0 & 0.8 & 1.0 \\\\\n  0.95 & 0.95 & 0 \\\\\n  0 & 0.04 & 0.95\n  \\end{bmatrix},\\quad \\mathbf{n}_{0,3} = \\begin{bmatrix} 0 \\\\ 10000 \\\\ 0 \\end{bmatrix},\\quad \\mathcal{T}_3 = [1,2,5,10,20].$$\n\nAssume each $\\mathbf{A}$ is primitive so that a unique positive stable stage distribution exists, and that $\\sum_i n_{t,i} > 0$ for all requested times so normalization is well defined.\n\nRequired final output format:\n- Your program should produce a single line of output containing, for each case in order $1,2,3$, a pair of lists: the first list contains the total variation distances at the requested times and the second list contains the cosine similarities at those times. Aggregate all three case results into an outer list. Concretely, the output must be a single line with no spaces that looks like\n  $$[[[\\mathrm{TV}_{1,1},\\dots],[\\cos_{1,1},\\dots]],[[\\mathrm{TV}_{2,1},\\dots],[\\cos_{2,1},\\dots]],[[\\mathrm{TV}_{3,1},\\dots],[\\cos_{3,1},\\dots]]],$$\nwhere $\\mathrm{TV}_{i,j}$ and $\\cos_{i,j}$ denote the metric values (rounded to $6$ decimals) for case $i$ at the $j$-th time in $\\mathcal{T}_i$. For example, the line should resemble\n$$[[[0.123456,0.012345,\\dots],[0.987654,0.998765,\\dots]],[[\\dots],[\\dots]],[[\\dots],[\\dots]]].$$", "solution": "The problem requires the analysis of discrete-time structured population models. The dynamics of the population are governed by the linear recurrence relation:\n$$\n\\mathbf{n}_{t+1} = \\mathbf{A}\\mathbf{n}_t\n$$\nwhere $\\mathbf{n}_t$ is a column vector representing the abundance of individuals in each stage at an integer time $t \\geq 0$, and $\\mathbf{A}$ is a non-negative, time-invariant population projection matrix. The element $a_{ij}$ of $\\mathbf{A}$ represents the per capita contribution of individuals from stage $j$ to stage $i$ in one time step.\n\nA central concept in the analysis of such models is the long-term behavior of the population's structure. For a matrix $\\mathbf{A}$ that is primitive (i.e., irreducible and aperiodic, which is equivalent to $\\mathbf{A}^k$ being a strictly positive matrix for some integer $k \\geq 1$), the Perron-Frobenius theorem provides a powerful result. It guarantees the existence of a unique positive eigenvalue $\\lambda_1$, called the dominant eigenvalue, which is simple and strictly greater in magnitude than any other eigenvalue. The corresponding right eigenvector, denoted $\\mathbf{w}$, has all positive entries. When this eigenvector is normalized such that its elements sum to $1$ (i.e., $\\|\\mathbf{w}\\|_1 = \\sum_i w_i = 1$), it is termed the stable stage distribution. Any initial population vector $\\mathbf{n}_0$ with at least one non-zero entry corresponding to a reproductive stage will, after a few time steps, converge in structure to this distribution $\\mathbf{w}$. That is, the stage frequency vector $\\mathbf{p}_t = \\mathbf{n}_t / \\sum_i n_{t,i}$ converges to $\\mathbf{w}$ as $t \\to \\infty$.\n\nThe problem demands the computation of this stable stage distribution $\\mathbf{w}$ using the power iteration method, which is a direct numerical consequence of the dominance of $\\lambda_1$. Starting with an arbitrary positive vector $\\mathbf{v}_0$, the sequence defined by\n$$\n\\mathbf{v}_{k+1} = \\frac{\\mathbf{A} \\mathbf{v}_k}{\\|\\mathbf{A} \\mathbf{v}_k\\|_1}\n$$\nconverges to the stable stage distribution $\\mathbf{w}$. The normalization at each step prevents the vector's magnitude from growing uncontrollably while preserving the direction towards the dominant eigenvector.\n\nOnce $\\mathbf{w}$ is determined, the next step is to simulate the population's trajectory from a given initial state $\\mathbf{n}_0$. This is achieved by repeatedly applying the matrix $\\mathbf{A}$ according to the fundamental recurrence $\\mathbf{n}_{t} = \\mathbf{A}^t \\mathbf{n}_0$.\n\nAt specified time points $t$ from the sets $\\mathcal{T}_i$, we must quantify the \"distance\" between the population's current structure, $\\mathbf{p}_t$, and the asymptotic stable structure, $\\mathbf{w}$. Two metrics are prescribed:\n\n$1$. Total Variation Distance: This is a standard metric for comparing probability distributions. It is defined as\n$$\n\\mathrm{TV}(\\mathbf{p}_t, \\mathbf{w}) = \\frac{1}{2} \\sum_i |p_{t,i} - w_i|\n$$\nThis value ranges from $0$ (for identical distributions) to $1$ (for non-overlapping distributions).\n\n$2$. Cosine Similarity: This metric measures the cosine of the angle between the two vectors in a multi-dimensional Euclidean space. It is calculated as the normalized dot product:\n$$\n\\cos(\\theta_t) = \\frac{\\mathbf{p}_t^\\top \\mathbf{w}}{\\|\\mathbf{p}_t\\|_2 \\|\\mathbf{w}\\|_2}\n$$\nwhere $\\|\\cdot\\|_2$ denotes the Euclidean ($\\ell_2$) norm. A value of $1$ indicates that the vectors point in the same direction, signifying identical population structure, while lower values indicate divergence.\n\nThe overall algorithm to satisfy the problem's requirements is as follows:\n$1$. For each provided test case $(\\mathbf{A}_i, \\mathbf{n}_{0,i}, \\mathcal{T}_i)$:\n    a. Implement the power iteration method to compute the stable stage distribution $\\mathbf{w}_i$ for the matrix $\\mathbf{A}_i$. An initial vector of ones is a suitable choice for $\\mathbf{v}_0$. The iteration continues until the change between successive vectors is below a small tolerance (e.g., $10^{-12}$ in the $\\ell_1$ norm).\n    b. Initialize the population vector $\\mathbf{n}_t = \\mathbf{n}_{0,i}$.\n    c. Iterate from time $t=1$ to the maximum time required in $\\mathcal{T}_i$. In each step, calculate $\\mathbf{n}_{t+1} = \\mathbf{A}_i \\mathbf{n}_t$.\n    d. If the current time $t$ is in the list of specified times $\\mathcal{T}_i$, compute the stage frequency vector $\\mathbf{p}_t = \\mathbf{n}_t / \\sum_j n_{t,j}$. Then, calculate $\\mathrm{TV}(\\mathbf{p}_t, \\mathbf{w}_i)$ and $\\cos(\\theta_t)$ using the formulas above.\n    e. Store the computed metric values, rounded to $6$ decimal places.\n\n$2$. Assemble the results from all test cases into a single nested list structure as specified by the output format.  This involves creating pairs of lists (one for total variation distances, one for cosine similarities) for each case, and then nesting these pairs within an outer list.\n\n$3$. Convert the final data structure into a compact string representation with no extraneous spaces and print it as a single line. This strict formatting is achieved by building the string representation of the nested lists and ensuring floating-point numbers are formatted to the required precision.\n\nThis procedure is deterministic and directly implements the specified mathematical definitions and algorithms, ensuring a correct and verifiable solution.", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the structured population dynamics problem for the given test cases.\n    \"\"\"\n\n    def compute_stable_stage_distribution(A, tol=1e-12, max_iter=2000):\n        \"\"\"\n        Computes the stable stage distribution (w) for a primitive matrix A\n        using the power iteration method.\n        \"\"\"\n        n = A.shape[0]\n        # Start with a uniform positive vector (l1-normalized)\n        v = np.ones(n) / n\n        for _ in range(max_iter):\n            Av = A @ v\n            # If the population dies out, there's no distribution.\n            # Problem assumes this doesn't happen.\n            norm_Av = np.sum(Av)\n            if norm_Av == 0:\n                # Return a zero vector if population crashes, though this\n                # case is excluded by the problem statement assumptions.\n                return np.zeros(n)\n            \n            v_new = Av / norm_Av\n            \n            # Check for convergence using the l1 norm of the difference\n            if np.sum(np.abs(v_new - v)) < tol:\n                return v_new\n            v = v_new\n        \n        # Return the last computed vector if max_iter is reached\n        return v\n\n    def format_list(data):\n        \"\"\"\n        Recursively formats a nested list of floats into the required string format\n        with no spaces and 6 decimal places for floats.\n        \"\"\"\n        if isinstance(data, list):\n            return f\"[{','.join(format_list(item) for item in data)}]\"\n        elif isinstance(data, (float, np.floating)):\n            return f\"{data:.6f}\"\n        else:\n            return repr(data)\n\n    # Define the test cases from the problem statement.\n    test_cases = [\n        {\n            \"A\": np.array([\n                [0, 1.1, 1.8],\n                [0.5, 0, 0],\n                [0, 0.7, 0]\n            ]),\n            \"n0\": np.array([0, 0, 10000]),\n            \"T\": [1, 2, 5, 10, 20]\n        },\n        {\n            \"A\": np.array([\n                [0, 0, 1.2, 2.0],\n                [0.3, 0.3, 0, 0],\n                [0, 0.6, 0.3, 0],\n                [0, 0, 0.5, 0.8]\n            ]),\n            \"n0\": np.array([10000, 0, 0, 0]),\n            \"T\": [1, 2, 5, 10, 20]\n        },\n        {\n            \"A\": np.array([\n                [0, 0.8, 1.0],\n                [0.95, 0.95, 0],\n                [0, 0.04, 0.95]\n            ]),\n            \"n0\": np.array([0, 10000, 0]),\n            \"T\": [1, 2, 5, 10, 20]\n        }\n    ]\n\n    all_results = []\n    for case in test_cases:\n        A = case[\"A\"]\n        n0 = case[\"n0\"].astype(float)\n        T_list = case[\"T\"]\n\n        # 1. Compute the stable stage distribution, w\n        w = compute_stable_stage_distribution(A)\n\n        # 2. Simulate dynamics and compute metrics at specified times\n        tv_results = []\n        cos_results = []\n        n_t = n0\n        t_max = max(T_list)\n\n        for t in range(1, t_max + 1):\n            n_t = A @ n_t\n            if t in T_list:\n                # Normalize the state vector to get the stage frequency vector p_t\n                total_pop = np.sum(n_t)\n                p_t = n_t / total_pop\n\n                # Calculate Total Variation Distance\n                tv = 0.5 * np.sum(np.abs(p_t - w))\n                \n                # Calculate Cosine Similarity\n                # Note: np.linalg.norm is the L2 norm by default\n                p_t_norm = np.linalg.norm(p_t)\n                w_norm = np.linalg.norm(w)\n                cos_sim = (p_t @ w) / (p_t_norm * w_norm)\n\n                # Append rounded results\n                tv_results.append(round(tv, 6))\n                cos_results.append(round(cos_sim, 6))\n        \n        all_results.append([tv_results, cos_results])\n\n    # Convert the final list to the required string format and print\n    final_output_str = format_list(all_results)\n    \n    # As per problem specification, the output format can be achieved\n    # by simple string replacement if specific formatting is not critical.\n    # The example suggests fixed-width is not needed, so round()+str() is sufficient.\n    # Let's rebuild the string without the formatter to be safer against ambiguity.\n\n    final_structured_list = []\n    for case in test_cases:\n        A = case[\"A\"]\n        n0 = case[\"n0\"].astype(float)\n        T_list = case[\"T\"]\n\n        w = compute_stable_stage_distribution(A)\n\n        tv_results = []\n        cos_results = []\n        n_t = n0\n        t_max = max(T_list)\n\n        for t in range(1, t_max + 1):\n            n_t = A @ n_t\n            if t in T_list:\n                total_pop = np.sum(n_t)\n                p_t = n_t / total_pop\n                tv = 0.5 * np.sum(np.abs(p_t - w))\n                cos_sim = (p_t @ w) / (np.linalg.norm(p_t) * np.linalg.norm(w))\n                \n                tv_results.append(round(tv, 6))\n                cos_results.append(round(cos_sim, 6))\n        \n        final_structured_list.append([tv_results, cos_results])\n\n    print(str(final_structured_list).replace(\" \", \"\"))\n\nsolve()\n```", "id": "2536698"}, {"introduction": "While the dominant eigenvalue $\\lambda$ of the full projection matrix $\\mathbf{A}$ gives the population's asymptotic growth rate, a more mechanistic understanding can be gained by decomposing $\\mathbf{A}$ into its fertility ($\\mathbf{F}$) and transition ($\\mathbf{P}$) components. This approach enables the calculation of the basic reproduction number, $R_0$, defined as the expected number of offspring produced by an average individual over its lifetime. In this practice, you will implement an algorithm based on the next-generation matrix method, $N = F(I-P)^{-1}$, to compute $R_0$, a critical threshold that determines whether a population will persist or decline. [@problem_id:2536660]", "problem": "Consider a discrete-time, stage-structured population model with a nonnegative, finite-dimensional projection matrix decomposed as $A = F + P$, where $F$ is the fertility operator (newborn production) and $P$ is the transition operator (survival, growth, and stasis without reproduction). Let $n_t$ denote the stage distribution at time $t$, so that $n_{t+1} = A n_t$. Assume that $P$ does not include any reproductive contribution and that all entries of $F$ and $P$ are nonnegative. In this setting, the net reproductive contribution of a cohort of newborns over its entire lifetime can be captured by a linear operator $N$ that maps an initial newborn distribution to the expected total newborns produced by that cohort over all future times.\n\nTask 1 (derivation from first principles): Starting from the cohort perspective and the linear recursion $n_{t+1} = F n_t + P n_t$, derive, from the definition of expected newborn production across time, an expression for the net reproductive operator $N$ as an infinite series built from $F$ and $P$. State the precise spectral condition on $P$ that guarantees convergence of this series in finite-dimensional spaces, and justify convergence using a standard matrix norm and the fact that the spectral radius is strictly less than one. Then, using the convergence of the series, show that $N$ is a well-defined nonnegative matrix.\n\nTask 2 (dominant eigenvalue and the basic reproduction number): Define the basic reproduction number $R_0$ as the long-term per-capita newborn production resulting from the net reproductive process encoded by $N$. Prove that, under the assumptions above and irreducibility of the reproductive process, $R_0$ is the dominant eigenvalue (in the sense of the Perronâ€“Frobenius theorem) of $N$, and equals the spectral radius of $N$. Explain why $R_0$ is strictly positive and corresponds to a unique (up to scaling) positive right eigenvector, and interpret biologically what this eigenpair represents. Your derivation must start from the definitions and general Perronâ€“Frobenius theory, not from any pre-stated closed-form for $N$.\n\nTask 3 (numerical computation by iteration and summation): Design an algorithm to approximate $N$ numerically by iteratively composing $P$ and summing the sequence of matrices that encode cumulative newborn production from a cohort, stopping when the Frobenius norm of the next term falls below a prescribed absolute tolerance. Then compute $R_0$ as the spectral radius of the truncated sum. Justify correctness of the algorithm based on your derivation in Task 1 and the positivity and spectral properties in Task 2, and discuss how the stopping tolerance and the spectral radius of $P$ affect convergence.\n\nYou must implement this algorithm as a program that produces the following outputs for a test suite of three cases. All quantities are dimensionless. For each case, construct $F$ and $P$ exactly as specified below, approximate $N$ via summation until the Frobenius norm of the next term falls below $10^{-12}$, and then compute $R_0$ as the spectral radius of the truncated sum. Round each reported $R_0$ to $6$ decimals.\n\nTest suite (covering a general case, a near-boundary case with slow convergence, and an edge case):\n- Case $1$ (a $3 \\times 3$ Lefkovitch-type model):\n  $$\n  F_1 =\n  \\begin{bmatrix}\n  0.0 & 1.2 & 2.1 \\\\\n  0.0 & 0.0 & 0.0 \\\\\n  0.0 & 0.0 & 0.0\n  \\end{bmatrix},\n  \\quad\n  P_1 =\n  \\begin{bmatrix}\n  0.3 & 0.0 & 0.0 \\\\\n  0.6 & 0.5 & 0.0 \\\\\n  0.0 & 0.4 & 0.7\n  \\end{bmatrix}.\n  $$\n- Case $2$ (a $4 \\times 4$ model with spectral radius of $P$ close to $1$):\n  $$\n  F_2 =\n  \\begin{bmatrix}\n  0.0 & 1.5 & 0.5 & 0.0 \\\\\n  0.0 & 0.0 & 0.0 & 0.0 \\\\\n  0.0 & 0.0 & 0.0 & 0.0 \\\\\n  0.0 & 0.0 & 0.0 & 0.0\n  \\end{bmatrix},\n  \\quad\n  P_2 =\n  \\begin{bmatrix}\n  0.0 & 0.0 & 0.0 & 0.0 \\\\\n  0.95 & 0.0 & 0.0 & 0.0 \\\\\n  0.0 & 0.94 & 0.0 & 0.0 \\\\\n  0.0 & 0.0 & 0.93 & 0.97\n  \\end{bmatrix}.\n  $$\n- Case $3$ (an edge case with $P$ identically zero):\n  $$\n  F_3 =\n  \\begin{bmatrix}\n  1.1 & 0.9 \\\\\n  0.0 & 0.0\n  \\end{bmatrix},\n  \\quad\n  P_3 =\n  \\begin{bmatrix}\n  0.0 & 0.0 \\\\\n  0.0 & 0.0\n  \\end{bmatrix}.\n  $$\n\nFinal output format: Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, in the order of the cases $1$, $2$, $3$, each entry being the rounded approximation of $R_0$ for that case (for example, $[x_1,x_2,x_3]$). No other output is permitted. The algorithm must be fully self-contained and must not read input. You must use the absolute tolerance $10^{-12}$ for the Frobenius norm stopping rule and a maximum of $10{,}000$ iterations as a safeguard. Your implementation should work in general for any finite-dimensional nonnegative $F$ and $P$ with spectral radius of $P$ strictly less than $1$, which also covers discretized Integral Projection Model (IPM) kernels.", "solution": "The problem presented is a standard, well-posed exercise in the theory of structured population models. It is scientifically sound, internally consistent, and requires the application of fundamental principles from linear algebra and demographic theory. It is therefore deemed valid. We proceed with the solution.\n\nThe task is to analyze a discrete-time, stage-structured population model described by the linear recursion $n_{t+1} = A n_t$, where the projection matrix $A$ is decomposed into a fertility component $F$ and a transition component $P$, such that $A = F + P$. Both $F$ and $P$ are finite-dimensional matrices with non-negative entries.\n\n**Task 1: Derivation of the Net Reproductive Operator $N$**\n\nThe net reproductive operator, $N$, is defined as the linear operator that maps an initial distribution of newborns, $n_0$, to the expected total number of newborns produced by this cohort throughout its entire lifetime. We derive its form from first principles.\n\nLet $n_0$ represent a cohort of individuals at time $t=0$. For this problem, we consider $n_0$ to be composed entirely of newborns. The population of this specific cohort evolves according to the transition operator $P$, as $P$ governs survival and stage transitions without adding new individuals. The population vector of the surviving members of the original cohort at time $k$ is given by $P^k n_0$.\n\nAt each time step $k \\ge 0$, the surviving cohort members, whose stage distribution is $P^k n_0$, produce new offspring. The quantity of newborns produced at time step $k+1$ by the cohort that was of size and structure $P^k n_0$ at time $k$ is given by $F(P^k n_0)$.\n\nThe total number of newborns produced by the initial cohort $n_0$ over its entire lifetime is the sum of newborns produced at all future time steps:\n$$\n\\text{Total Newborns} = \\sum_{k=0}^{\\infty} (\\text{Newborns produced at time step } k+1)\n$$\n$$\n\\text{Total Newborns} = \\sum_{k=0}^{\\infty} F(P^k n_0) = \\left( \\sum_{k=0}^{\\infty} F P^k \\right) n_0\n$$\nBy the distributive property of matrix multiplication, this is equivalent to:\n$$\n\\text{Total Newborns} = F \\left( \\sum_{k=0}^{\\infty} P^k \\right) n_0\n$$\nFrom this expression, we identify the net reproductive operator $N$ as the transformation applied to the initial newborn cohort $n_0$:\n$$\nN = F \\sum_{k=0}^{\\infty} P^k\n$$\nThis is the expression for $N$ as an infinite series.\n\nFor this series to be meaningful, the geometric matrix series $\\sum_{k=0}^{\\infty} P^k$ must converge. In a finite-dimensional vector space, this series converges if and only if the spectral radius of the matrix $P$, denoted $\\rho(P)$, is strictly less than $1$. That is, the precise condition for convergence is $\\rho(P) < 1$. Biologically, this condition means that any cohort of individuals must eventually go extinct in the absence of reproduction, which is a requirement for a stable population structure where lifetime reproductive output is finite.\n\nTo justify convergence, we invoke a standard result from matrix analysis. Gelfand's formula states that for any matrix norm $\\|\\cdot\\|$, the spectral radius is given by $\\rho(P) = \\lim_{k\\to\\infty} \\|P^k\\|^{1/k}$. If $\\rho(P) < 1$, we can choose a real number $r$ such that $\\rho(P) < r < 1$. It is a known theorem that for any such $r$, there exists a consistent matrix norm (an operator norm induced by a vector norm) such that $\\|P\\| \\le r$. Using this norm, the terms of the series can be bounded:\n$$\n\\|P^k\\| \\le \\|P\\|^k \\le r^k\n$$\nSince $0 \\le r < 1$, the geometric series of real numbers $\\sum_{k=0}^{\\infty} r^k$ converges to $1/(1-r)$. By the matrix analogue of the Weierstrass M-test (comparison test), the matrix series $\\sum_{k=0}^{\\infty} P^k$ converges absolutely. The sum of this convergent series is the matrix $(I-P)^{-1}$, where $I$ is the identity matrix.\n\nThus, under the condition $\\rho(P) < 1$, the net reproductive operator is given by the closed-form expression:\n$$\nN = F(I-P)^{-1}\n$$\nThe problem states that $F$ and $P$ are non-negative matrices. Consequently, each term $P^k$ in the series is also non-negative. The partial sums $S_m = \\sum_{k=0}^{m} P^k$ form a sequence of non-negative matrices whose entries are non-decreasing with $m$. If this sequence converges, its limit, $S = (I-P)^{-1}$, must also be a non-negative matrix. Since $N$ is the product of two non-negative matrices, $F$ and $S$, it follows that $N$ itself is a well-defined non-negative matrix.\n\n**Task 2: The Basic Reproduction Number $R_0$**\n\nThe basic reproduction number, $R_0$, is defined as the expected number of new offspring produced by a typical individual over its entire lifetime in a population at demographic equilibrium. In our matrix context, this translates to the long-term, per-generation growth factor of the newborn population.\n\nLet $v_k$ be the vector representing the distribution of newborns in generation $k$. The operator $N$ maps the newborn distribution of one generation to the newborn distribution of the next generation. Thus, we have the generational recursion:\n$$\nv_{k+1} = N v_k\n$$\nThis is a standard discrete-time linear dynamical system. Its long-term behavior is governed by the eigenvalues of the matrix $N$. Specifically, the asymptotic growth rate of the system is determined by the dominant eigenvalue of $N$, which is its spectral radius, $\\rho(N)$. This dominant eigenvalue is, by definition, the basic reproduction number $R_0$.\n$$\nR_0 = \\rho(N)\n$$\nTo prove the properties of $R_0$, we assume that the reproductive process is \"irreducible.\" In the context of the next-generation matrix $N$, this means that $N$ is an irreducible matrix. A non-negative square matrix $M$ is irreducible if for every pair of indices $(i, j)$, there exists an integer $k \\ge 1$ such that the $(i, j)$-th entry of $M^k$ is strictly positive. Biologically, this means that a newborn of any stage can, through some sequence of descendants, ultimately contribute to the production of newborns of any other stage.\n\nSince $N$ is a non-negative matrix, we can apply the Perron-Frobenius theorem. The theorem for irreducible non-negative matrices states:\n1. The spectral radius $\\rho(N)$ is a simple, positive eigenvalue.\n2. This eigenvalue, $R_0 = \\rho(N)$, is strictly greater than the magnitude of any other eigenvalue.\n3. There exists a right eigenvector $w$ corresponding to $R_0$ whose components are all strictly positive. This eigenvector is unique up to scalar multiplication.\n4. There also exists a unique (up to scaling) positive left eigenvector.\n\nTherefore, under the assumption of irreducibility, $R_0$ is the simple, positive, and dominant eigenvalue of $N$. The positivity, $R_0>0$, is guaranteed for any biologically relevant system where reproduction is possible (i.e., $F$ is not the zero matrix and offspring can be produced from some initial state). The uniqueness and positivity of the corresponding right eigenvector $w$ (where $N w = R_0 w$) are also guaranteed.\n\nBiologically, this eigenpair $(R_0, w)$ has a critical interpretation:\n- $R_0$: The basic reproduction number. If $R_0 > 1$, each generation of newborns is larger than the last, and the population will grow. If $R_0 < 1$, each generation is smaller, and the population will decline towards extinction. If $R_0 = 1$, the newborn population replaces itself exactly each generation, leading to demographic stability at the threshold.\n- $w$: The stable stage distribution of newborns. It represents the relative proportions of newborns in different stages that will be maintained from one generation to the next. If an initial cohort of newborns is proportional to $w$, the cohort of their direct offspring will also be proportional to $w$, scaled by the factor $R_0$.\n\n**Task 3: Numerical Algorithm and Justification**\n\nThe derivation in Task 1 provides a direct method for numerically approximating the operator $N$. We use the series expansion $N = \\sum_{k=0}^{\\infty} F P^k$.\n\n**Algorithm:**\n1.  Initialize the approximation of $N$ as a zero matrix: $N_{approx} \\leftarrow \\mathbf{0}$.\n2.  Initialize a matrix to store powers of $P$: $P_{pow} \\leftarrow I$, the identity matrix.\n3.  Iterate for $k = 0, 1, 2, \\dots$ up to a specified maximum number of iterations.\n    a. Calculate the next term in the series: $Term \\leftarrow F \\cdot P_{pow}$.\n    b. Check the stopping criterion: Calculate the Frobenius norm of the term, $\\|Term\\|_F$. If $\\|Term\\|_F$ is less than a prescribed tolerance $\\varepsilon$, terminate the iteration. The Frobenius norm is defined as $\\|M\\|_F = \\sqrt{\\sum_{i,j} |m_{ij}|^2}$.\n    c. Add the term to the sum: $N_{approx} \\leftarrow N_{approx} + Term$.\n    d. Update the power of $P$ for the next iteration: $P_{pow} \\leftarrow P_{pow} \\cdot P$.\n4.  Once the loop terminates, compute the eigenvalues of the resulting matrix $N_{approx}$.\n5.  $R_0$ is the spectral radius of $N_{approx}$, which is the maximum of the absolute values of its computed eigenvalues: $R_0 \\leftarrow \\max(|\\lambda_i|)$ for $\\lambda_i \\in \\text{eig}(N_{approx})$.\n\n**Justification:**\nThe correctness of this algorithm rests on the convergence of the geometric matrix series, which is guaranteed if $\\rho(P) < 1$. When this condition holds, $\\|P^k\\| \\to 0$ as $k \\to \\infty$ for any matrix norm. Consequently, $\\|F P^k\\| \\le \\|F\\| \\|P^k\\| \\to 0$, so the norms of the terms vanish. The algorithm truncates the infinite sum once the contribution of the next term is negligibly small, as measured by its Frobenius norm. This provides a finite and accurate approximation of $N$. The properties established in Task 2 justify computing $R_0$ as the spectral radius of this approximated non-negative matrix $N_{approx}$.\n\nThe rate of convergence is determined by $\\rho(P)$. The error of the truncated series after $M$ terms behaves proportionally to $(\\rho(P))^{M+1}$.\n-   If $\\rho(P)$ is small (e.g., close to $0$), convergence is extremely rapid, requiring few iterations.\n-   If $\\rho(P)$ is close to $1$, convergence is very slow, as $(\\rho(P))^k$ decreases slowly. This necessitates a small tolerance $\\varepsilon$ and a large number of iterations to achieve a given accuracy. The case $P_2$ in the problem is an example of this slow convergence regime.", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the structured population model problem for the given test cases.\n\n    This function implements the three tasks described in the problem:\n    1.  The logic for computing the net reproductive operator N is based on the\n        derived infinite series N = sum(F * P^k for k in 0..inf).\n    2.  The basic reproduction number R0 is computed as the spectral radius\n        (dominant eigenvalue) of the numerically approximated N matrix.\n    3.  The algorithm iteratively sums the terms F * P^k until the Frobenius norm\n        of the current term falls below a specified tolerance.\n\n    The function processes a suite of test cases and formats the output\n    as required.\n    \"\"\"\n\n    def compute_r0(F: np.ndarray, P: np.ndarray, tol: float = 1e-12, max_iter: int = 10000) -> float:\n        \"\"\"\n        Computes the basic reproduction number R0 for a given F and P matrix.\n\n        Args:\n            F (np.ndarray): The fertility matrix.\n            P (np.ndarray): The transition matrix.\n            tol (float): The absolute tolerance for the Frobenius norm stopping criterion.\n            max_iter (int): The maximum number of iterations to prevent infinite loops.\n\n        Returns:\n            float: The computed value of R0, the spectral radius of the net\n                   reproductive operator N.\n        \"\"\"\n        # Ensure matrices are numpy arrays of float type for precision.\n        F = np.asarray(F, dtype=float)\n        P = np.asarray(P, dtype=float)\n\n        # Check for convergence condition: spectral radius of P must be less than 1.\n        # This is a prerequisite for the sum to converge.\n        # Although the problem guarantees this for the test cases, it is good practice.\n        if np.max(np.abs(np.linalg.eigvals(P))) >= 1.0:\n            raise ValueError(\"Spectral radius of P must be < 1 for the series to converge.\")\n\n        dim = F.shape[0]\n        n_approx = np.zeros((dim, dim), dtype=float)\n        p_pow = np.identity(dim, dtype=float)\n\n        for _ in range(max_iter):\n            term = F @ p_pow\n            \n            # Check stopping criterion based on the Frobenius norm of the current term\n            if np.linalg.norm(term, 'fro') < tol:\n                break\n                \n            n_approx += term\n            p_pow = p_pow @ P\n        else:\n            # This part is executed if the loop completes without a 'break'.\n            # It can indicate that max_iter was reached before convergence to the tolerance.\n            # For this problem's constraints, we assume this is not an issue.\n            # We add the last computed term if the loop finished due to max_iter\n            n_approx += F @ p_pow\n\n        # R0 is the spectral radius of the approximated N matrix.\n        eigenvalues = np.linalg.eigvals(n_approx)\n        r0 = np.max(np.abs(eigenvalues))\n        \n        return r0\n\n    # Define the test cases from the problem statement.\n    test_cases = [\n        # Case 1: A 3x3 Lefkovitch-type model\n        {\n            \"F\": [[0.0, 1.2, 2.1], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],\n            \"P\": [[0.3, 0.0, 0.0], [0.6, 0.5, 0.0], [0.0, 0.4, 0.7]],\n        },\n        # Case 2: A 4x4 model with spectral radius of P close to 1\n        {\n            \"F\": [[0.0, 1.5, 0.5, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0]],\n            \"P\": [[0.0, 0.0, 0.0, 0.0], [0.95, 0.0, 0.0, 0.0], [0.0, 0.94, 0.0, 0.0], [0.0, 0.0, 0.93, 0.97]],\n        },\n        # Case 3: An edge case with P identically zero\n        {\n            \"F\": [[1.1, 0.9], [0.0, 0.0]],\n            \"P\": [[0.0, 0.0], [0.0, 0.0]],\n        }\n    ]\n\n    results = []\n    for case in test_cases:\n        r0 = compute_r0(F=case[\"F\"], P=case[\"P\"])\n        # Round the result to 6 decimal places as required.\n        results.append(f\"{r0:.6f}\")\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2536660"}, {"introduction": "Ecological models often involve a trade-off between realism and tractability, leading researchers to simplify complex life cycles by aggregating stages. This practice explores the consequences of such simplification, providing a rigorous method for merging stages that preserves the model's key predictions about long-term population growth. You will use the stable stage distribution of a full model to derive a reduced projection matrix and discover the conditions under which the asymptotic growth rate $\\lambda$ remains unchanged, offering deep insight into the principles of model abstraction. [@problem_id:2536679]", "problem": "Consider a stage-structured population described by a three-stage Lefkovitch matrix $A$ acting on the stage-abundance vector $n_{t}$ via $n_{t+1} = A n_{t}$, where\n$$\nA \\;=\\;\n\\begin{pmatrix}\n0 & 0.8 & 1.2 \\\\\n0.5 & 0.3 & 0.1 \\\\\n0 & 0.4 & 0.6\n\\end{pmatrix}.\n$$\nHere, column $j$ lists the expected contributions of individuals currently in stage $j$ to each stage at the next census, including fecundity in the first row and stage transitions in the lower rows. The dominant eigenvalue $\\lambda$ of $A$ equals the long-term per-time-step asymptotic growth rate, and the associated right eigenvector (normalized to sum to one) gives the stable stage distribution.\n\nYou are to merge the adjacent stages $2$ and $3$ into a single composite stage, using probability-weighted averaging based on the conditional composition of the original stage-$2$ and stage-$3$ individuals within the composite stage under the original system's stable stage distribution. Specifically, let $p_{2}$ and $p_{3}$ be the probabilities of being in original stage $2$ or $3$, respectively, conditional on being in the composite stage; these must be derived from the original modelâ€™s stable stage distribution and must satisfy $p_{2} + p_{3} = 1$. Construct the resulting reduced $2 \\times 2$ projection matrix by:\n- computing the effective fecundity of the composite stage as the probability-weighted average of the original fecundities of stages $2$ and $3$, and\n- computing the composite-stage transitions by probability-weighted averaging of the corresponding original transitions, respecting additivity where appropriate for transitions into and out of the composite stage.\n\nThen compute the dominant eigenvalue $\\lambda'$ of the reduced matrix and quantify the induced absolute error in long-term growth rate as $|\\lambda' - \\lambda|$. Express the final numerical value of $|\\lambda' - \\lambda|$ as a decimal. If your result is nonzero, round it to four significant figures. Clearly show how you derive $p_{2}$ and $p_{3}$ from first principles and how you construct the reduced matrix from these probabilities.", "solution": "The problem requires the analysis of a three-stage Lefkovitch matrix model, the reduction of this model to a two-stage model by merging two adjacent stages, and the calculation of the error in the long-term asymptotic growth rate induced by this reduction. The analysis must be conducted with full mathematical rigor.\n\nThe given $3 \\times 3$ Lefkovitch matrix is:\n$$\nA \\;=\\;\n\\begin{pmatrix}\n0 & 0.8 & 1.2 \\\\\n0.5 & 0.3 & 0.1 \\\\\n0 & 0.4 & 0.6\n\\end{pmatrix}\n$$\nThe long-term asymptotic growth rate, $\\lambda$, is the dominant eigenvalue of $A$. It is found by solving the characteristic equation $\\det(A - \\lambda I) = 0$.\n$$\n\\det\n\\begin{pmatrix}\n-\\lambda & 0.8 & 1.2 \\\\\n0.5 & 0.3 - \\lambda & 0.1 \\\\\n0 & 0.4 & 0.6 - \\lambda\n\\end{pmatrix}\n\\;=\\; 0\n$$\nExpanding the determinant along the first column gives:\n$$\n(-\\lambda) \\left[ (0.3 - \\lambda)(0.6 - \\lambda) - (0.1)(0.4) \\right] - (0.5) \\left[ (0.8)(0.6 - \\lambda) - (1.2)(0.4) \\right] + 0 = 0\n$$\n$$\n(-\\lambda) \\left[ \\lambda^2 - 0.9\\lambda + 0.18 - 0.04 \\right] - (0.5) \\left[ 0.48 - 0.8\\lambda - 0.48 \\right] = 0\n$$\n$$\n(-\\lambda) (\\lambda^2 - 0.9\\lambda + 0.14) - (0.5)(-0.8\\lambda) = 0\n$$\n$$\n-\\lambda^3 + 0.9\\lambda^2 - 0.14\\lambda + 0.4\\lambda = 0\n$$\n$$\n-\\lambda^3 + 0.9\\lambda^2 + 0.26\\lambda = 0\n$$\nFactoring out $-\\lambda$:\n$$\n-\\lambda (\\lambda^2 - 0.9\\lambda - 0.26) = 0\n$$\nThe solutions are $\\lambda = 0$ and the roots of the quadratic equation $\\lambda^2 - 0.9\\lambda - 0.26 = 0$. By the Perron-Frobenius theorem, the dominant eigenvalue is the unique positive root. Using the quadratic formula:\n$$\n\\lambda = \\frac{-(-0.9) + \\sqrt{(-0.9)^2 - 4(1)(-0.26)}}{2(1)} = \\frac{0.9 + \\sqrt{0.81 + 1.04}}{2} = \\frac{0.9 + \\sqrt{1.85}}{2}\n$$\nNumerically, this value is $\\lambda \\approx 1.1300735$.\n\nNext, we find the corresponding right eigenvector $w = (w_1, w_2, w_3)^T$, which represents the stable stage distribution (SSD). It satisfies $(A - \\lambda I)w = 0$.\n$$\n\\begin{pmatrix}\n-\\lambda & 0.8 & 1.2 \\\\\n0.5 & 0.3 - \\lambda & 0.1 \\\\\n0 & 0.4 & 0.6 - \\lambda\n\\end{pmatrix}\n\\begin{pmatrix} w_1 \\\\ w_2 \\\\ w_3 \\end{pmatrix}\n= \\begin{pmatrix} 0 \\\\ 0 \\\\ 0 \\end{pmatrix}\n$$\nFrom the third row, $0.4w_2 + (0.6 - \\lambda)w_3 = 0$, which implies $w_2 = \\frac{\\lambda - 0.6}{0.4} w_3$.\nFrom the first row, $-\\lambda w_1 + 0.8w_2 + 1.2w_3 = 0$. Substituting the expression for $w_2$:\n$$\n-\\lambda w_1 + 0.8 \\left( \\frac{\\lambda - 0.6}{0.4} \\right) w_3 + 1.2w_3 = 0\n$$\n$$\n-\\lambda w_1 + 2(\\lambda - 0.6)w_3 + 1.2w_3 = 0\n$$\n$$\n-\\lambda w_1 + (2\\lambda - 1.2 + 1.2)w_3 = 0\n$$\n$$\n-\\lambda w_1 + 2\\lambda w_3 = 0\n$$\nSince $\\lambda \\ne 0$, we have $w_1 = 2w_3$. The eigenvector is proportional to $\\begin{pmatrix} 2w_3, \\frac{\\lambda-0.6}{0.4}w_3, w_3 \\end{pmatrix}^T$. The SSD is given by proportions, so we can set $w_3=1$ for convenience, giving a relative abundance vector $w \\propto \\begin{pmatrix} 2, \\frac{\\lambda-0.6}{0.4}, 1 \\end{pmatrix}^T$.\n\nThe problem requires merging stages $2$ and $3$ into a composite stage. The weighting probabilities, $p_2$ and $p_3$, are the conditional probabilities of an individual being in stage $2$ or $3$, respectively, given it is in the composite stage, at the stable stage distribution.\n$$\np_2 = \\frac{w_2}{w_2 + w_3} \\quad \\text{and} \\quad p_3 = \\frac{w_3}{w_2 + w_3}\n$$\nUsing our expressions for $w_2$ and $w_3$:\n$$\nw_2 + w_3 = \\left(\\frac{\\lambda-0.6}{0.4}\\right) + 1 = \\frac{\\lambda - 0.6 + 0.4}{0.4} = \\frac{\\lambda - 0.2}{0.4}\n$$\nTherefore, the probabilities are:\n$$\np_2 = \\frac{(\\lambda - 0.6)/0.4}{(\\lambda - 0.2)/0.4} = \\frac{\\lambda - 0.6}{\\lambda - 0.2}\n$$\n$$\np_3 = \\frac{1}{(\\lambda - 0.2)/0.4} = \\frac{0.4}{\\lambda - 0.2}\n$$\nIt is verified that $p_2 + p_3 = \\frac{\\lambda - 0.6 + 0.4}{\\lambda - 0.2} = 1$.\n\nNow, we construct the reduced $2 \\times 2$ matrix, $A'$, for the new stage structure: stage $1'$ (original stage $1$) and stage $2'$ (composite of stages $2$ and $3$).\n$$\nA' = \\begin{pmatrix} A'_{11} & A'_{12} \\\\ A'_{21} & A'_{22} \\end{pmatrix}\n$$\n$A'_{11}$: Individuals from stage $1'$ that remain in stage $1'$. This is $A_{11} = 0$.\n$A'_{21}$: Individuals from stage $1'$ that transition to stage $2'$. This is the sum of transitions from stage $1$ to stages $2$ and $3$: $A'_{21} = A_{21} + A_{31} = 0.5 + 0 = 0.5$.\n$A'_{12}$: Effective fecundity of stage $2'$. This is the weighted average of the fecundities of stages $2$ and $3$: $A'_{12} = p_2 A_{12} + p_3 A_{13} = p_2(0.8) + p_3(1.2)$. Substituting the symbolic expressions for $p_2$ and $p_3$:\n$$\nA'_{12} = \\left(\\frac{\\lambda - 0.6}{\\lambda - 0.2}\\right) (0.8) + \\left(\\frac{0.4}{\\lambda - 0.2}\\right) (1.2) = \\frac{0.8\\lambda - 0.48 + 0.48}{\\lambda - 0.2} = \\frac{0.8\\lambda}{\\lambda - 0.2}\n$$\n$A'_{22}$: Individuals from stage $2'$ that remain in stage $2'$. An individual in stage $2'$ is in original stage $2$ with probability $p_2$ or stage $3$ with probability $p_3$. Its offspring that enter the composite stage are found by summing the transitions into stages $2$ and $3$.\n$$\nA'_{22} = p_2 (A_{22} + A_{32}) + p_3 (A_{23} + A_{33}) = p_2(0.3 + 0.4) + p_3(0.1 + 0.6) = p_2(0.7) + p_3(0.7) = 0.7(p_2+p_3) = 0.7\n$$\nThe reduced matrix is:\n$$\nA' = \\begin{pmatrix}\n0 & \\frac{0.8\\lambda}{\\lambda - 0.2} \\\\\n0.5 & 0.7\n\\end{pmatrix}\n$$\nThe dominant eigenvalue $\\lambda'$ of $A'$ is found from its characteristic equation $\\det(A' - \\lambda' I) = 0$:\n$$\n\\det\\begin{pmatrix} -\\lambda' & \\frac{0.8\\lambda}{\\lambda - 0.2} \\\\ 0.5 & 0.7 - \\lambda' \\end{pmatrix} = 0\n$$\n$$\n(-\\lambda')(0.7 - \\lambda') - (0.5)\\left(\\frac{0.8\\lambda}{\\lambda - 0.2}\\right) = 0\n$$\n$$\n(\\lambda')^2 - 0.7\\lambda' - \\frac{0.4\\lambda}{\\lambda - 0.2} = 0\n$$\nWe must now test if the original eigenvalue $\\lambda$ is a solution to this new equation. Let's substitute $\\lambda' = \\lambda$:\n$$\n\\lambda^2 - 0.7\\lambda - \\frac{0.4\\lambda}{\\lambda - 0.2} = 0\n$$\nSince $\\lambda$ is the dominant eigenvalue, $\\lambda > 0$, and we can divide the equation by $\\lambda$:\n$$\n\\lambda - 0.7 - \\frac{0.4}{\\lambda - 0.2} = 0\n$$\nMultiplying by $(\\lambda - 0.2)$ to clear the denominator (noting $\\lambda \\approx 1.13 \\ne 0.2$):\n$$\n(\\lambda - 0.7)(\\lambda - 0.2) - 0.4 = 0\n$$\n$$\n\\lambda^2 - 0.2\\lambda - 0.7\\lambda + 0.14 - 0.4 = 0\n$$\n$$\n\\lambda^2 - 0.9\\lambda - 0.26 = 0\n$$\nThis is precisely the characteristic equation for the original matrix $A$. Since $\\lambda$ satisfies this equation, $\\lambda$ is an eigenvalue of the reduced matrix $A'$. Because $A'$ is a non-negative, irreducible matrix, its dominant eigenvalue is unique and positive. Therefore, the dominant eigenvalue $\\lambda'$ of $A'$ must be equal to $\\lambda$.\n\nThe induced absolute error in the long-term growth rate is $|\\lambda' - \\lambda|$. Since we have proven that $\\lambda' = \\lambda$, the error is:\n$$\n|\\lambda' - \\lambda| = |\\lambda - \\lambda| = 0\n$$\nThe aggregation procedure, when based on the stable stage distribution of the original system, is constructed in such a way that it exactly preserves the dominant eigenvalue. Any non-zero result obtained through numerical calculation would be an artifact of rounding error. The analytical result is exact.", "answer": "$$\\boxed{0}$$", "id": "2536679"}]}