{"hands_on_practices": [{"introduction": "The species-area relationship (SAR) is one of the most fundamental laws in ecology, providing a quantitative link between the size of a habitat and the number of species it can support. This principle forms the theoretical bedrock of the \"Single Large or Several Small\" (SLOSS) debate. This exercise [@problem_id:2528359] provides a hands-on application of the classic power-law SAR model, allowing you to directly calculate the consequences of habitat loss on species richness and understand how this relationship's sensitivity influences reserve design strategies.", "problem": "A landscape conservation planner must downsize a contiguous protected area due to budget constraints. Empirical species–area relationship (SAR) data for the focal taxon in this ecoregion show a log–log slope of $z = 0.25$ when fitting the power-law SAR $S = c A^{z}$, where $S$ is species richness, $A$ is area, and $c$ is a constant. Assume the system tracks the SAR at equilibrium without time lags or extinction debt, and that other drivers of richness remain constant. The total protected area will be reduced from $A_{0}$ to $A_{1} = 0.5 A_{0}$ while maintaining a single, well-connected block to minimize edge and isolation effects.\n\nUsing only the SAR as the fundamental base, derive the expected proportion of species richness retained, defined as $R \\equiv S(A_{1})/S(A_{0})$, and compute its value for $z = 0.25$ and $A_{1}/A_{0} = 0.5$. Provide the final numerical value of $R$ as a decimal fraction. Round your answer to four significant figures. Express the final answer with no unit.\n\nIn your derivation, briefly justify how the dependence of $R$ on $z$ arises from the SAR and why this implies that retention is more sensitive to $z$ when area reductions are more severe in reserve design, with implications for Single Large or Several Small (SLOSS) and connectivity planning. Do not report any additional numerical quantities besides the requested value of $R$.", "solution": "The problem statement is subjected to validation before a solution is attempted.\n\n**Step 1: Extract Givens**\n- Species-Area Relationship (SAR) model: $S = c A^{z}$\n- $S$: species richness\n- $A$: area\n- $c$: a constant\n- Log-log slope of the SAR: $z = 0.25$\n- Initial protected area: $A_{0}$\n- Final protected area: $A_{1} = 0.5 A_{0}$\n- Assumption: The system is at equilibrium, with no time lags or extinction debt.\n- Assumption: Other drivers of species richness are held constant.\n- Assumption: The reserve is maintained as a single, contiguous block.\n- Definition of retained species richness proportion: $R \\equiv S(A_{1})/S(A_{0})$\n- Task 1: Derive the expression for $R$.\n- Task 2: Compute the numerical value of $R$ for the given parameters, rounded to four significant figures.\n- Task 3: Justify the dependence of $R$ on $z$ and its implications for reserve design.\n\n**Step 2: Validate Using Extracted Givens**\nThe problem is assessed for validity.\n- **Scientifically Grounded**: The problem is based on the power-law species-area relationship, $S = cA^z$, which is a fundamental and empirically well-supported model in ecology and biogeography. The given value of $z = 0.25$ is a canonical and realistic value for mainland and continental settings. The concepts mentioned—reserve design, SLOSS, connectivity, and extinction debt—are standard in conservation biology. The assumptions, while simplifications of reality, are appropriate for constructing a tractable theoretical model to illustrate a core principle.\n- **Well-Posed**: The problem is clearly stated, providing all necessary information to derive the required ratio $R$ and compute its value. The objective is unambiguous. A unique, stable, and meaningful solution exists.\n- **Objective**: The problem is framed in precise, quantitative, and objective language, free of subjective claims.\n\n**Step 3: Verdict and Action**\nThe problem is scientifically grounded, well-posed, and objective. It contains no invalidating flaws. Therefore, the problem is deemed **valid**. A full solution will be provided.\n\nThe fundamental relationship governing species richness ($S$) as a function of area ($A$) is given by the power-law model:\n$$S(A) = c A^{z}$$\nHere, $c$ is a taxon- and region-specific constant representing the number of species per unit area, and $z$ is the exponent that determines how rapidly species richness increases with area.\n\nThe species richness in the initial, larger protected area, $A_{0}$, is given by:\n$$S_{0} = S(A_{0}) = c A_{0}^{z}$$\n\nFollowing the reduction in area, the new species richness in the smaller area, $A_{1}$, is:\n$$S_{1} = S(A_{1}) = c A_{1}^{z}$$\n\nThe problem defines the proportion of species richness retained, $R$, as the ratio of the final species richness to the initial species richness:\n$$R \\equiv \\frac{S_{1}}{S_{0}}$$\n\nSubstituting the expressions for $S_{1}$ and $S_{0}$ into the definition of $R$ yields:\n$$R = \\frac{c A_{1}^{z}}{c A_{0}^{z}}$$\n\nThe constant $c$ is independent of area and thus cancels from the numerator and denominator. The expression simplifies to:\n$$R = \\left(\\frac{A_{1}}{A_{0}}\\right)^{z}$$\nThis is the general symbolic expression for the proportion of species retained after a change in area.\n\nThe problem provides the specific numerical values for the parameters. The area is reduced by half, so the ratio of final to initial area is:\n$$\\frac{A_{1}}{A_{0}} = \\frac{0.5 A_{0}}{A_{0}} = 0.5$$\nThe log-log slope of the SAR is given as $z = 0.25$.\n\nSubstituting these values into the derived equation for $R$:\n$$R = (0.5)^{0.25}$$\nThe exponent $0.25$ is equivalent to the fraction $\\frac{1}{4}$. Thus, the calculation is for the fourth root of $0.5$:\n$$R = (0.5)^{1/4} = \\sqrt[4]{0.5}$$\nComputing the numerical value:\n$$R \\approx 0.8408964...$$\nRounding this result to four significant figures, as required, we obtain:\n$$R \\approx 0.8409$$\n\nThe dependence of $R$ on $z$ is explicit in the derived formula $R = (A_{1}/A_{0})^{z}$. For any given fractional area reduction where $A_{1}/A_{0} < 1$, $R$ is an exponentially decreasing function of $z$. A higher $z$ value, which signifies a steeper SAR slope and a stronger dependence of species number on area, results in a smaller proportion of species retained ($R$) for the same reduction in habitat area. This is because $\\ln(A_{1}/A_{0})$ is negative, so the function decreases with $z$.\n\nThe sensitivity of retention to $z$ is more pronounced for more severe area reductions. To formalize this, consider the derivative of $R$ with respect to $z$, which measures the rate of change of retention as $z$ varies: $\\frac{\\partial R}{\\partial z} = (A_{1}/A_{0})^{z} \\ln(A_{1}/A_{0})$. The magnitude of this sensitivity, $|\\frac{\\partial R}{\\partial z}|$, indicates how strongly an uncertainty in $z$ affects the prediction of species loss. For the domain of realistic conservation scenarios, such as the given $A_1/A_0 = 0.5$, a more severe reduction (a smaller $A_{1}/A_{0}$ ratio) leads to a larger magnitude of this derivative. This implies that predictions of species loss are more sensitive to the exact value of $z$ when the planned habitat destruction is greater.\n\nThis has direct implications for the Single Large or Several Small (SLOSS) debate and connectivity planning. The SAR model demonstrates that fragmenting a single large area into several smaller ones, even if the total area is conserved, will result in species loss because smaller patches individually support fewer species. A high $z$ value exacerbates this effect, strongly favoring the \"Single Large\" option to maximize the area of any single patch. The problem's specification of maintaining a \"single, well-connected block\" is a direct application of this principle. Furthermore, if fragmentation is unavoidable, the high sensitivity associated with large $z$ values underscores the critical importance of creating and maintaining corridors for connectivity. Such connectivity allows organisms to move between patches, partially amalgamating the several small reserves into a functionally larger metapopulation network, thereby mitigating the species loss predicted by the SAR for isolated fragments.", "answer": "$$\n\\boxed{0.8409}\n$$", "id": "2528359"}, {"introduction": "In real-world landscapes, the distance between two points is rarely a straight line for a dispersing organism. The intervening terrain, with its barriers and corridors, creates a complex \"cost surface\" that dictates movement patterns. This practice [@problem_id:2528280] introduces the critical concept of \"effective distance\" and challenges you to compute it using a shortest-path algorithm, a core skill in modern connectivity planning. By translating cost into effective distance and then into a colonization probability, you will model how landscape heterogeneity directly shapes the potential for metapopulation persistence.", "problem": "You are given a discrete raster representation of a movement cost surface for organisms dispersing across a landscape. Consider a regular square grid where each cell has a positive movement cost. Movement is allowed to any of the eight neighbors of a cell (four cardinal and four diagonal). Define the cost to traverse an edge between a cell with cost $c_{u}$ and a neighboring cell with cost $c_{v}$ as the arithmetic mean of the endpoint costs multiplied by the Euclidean step length, i.e., for a cardinal move the step length is $1$ and for a diagonal move the step length is $\\sqrt{2}$. The effective distance $d_{\\text{eff}}$ between a source cell and a target cell is the minimum total traversal cost over all valid paths between the two cell centers under these edge weights.\n\nAssume propagule arrivals at the target from the source follow a Poisson process with mean number of arrivals $m$ equal to a source supply $s$ multiplied by a dispersal kernel $k(d_{\\text{eff}})$ evaluated at the effective distance. Assume an exponential dispersal kernel with rate parameter $\\alpha > 0$, so that $k(d) = \\exp(-\\alpha d)$. Using these premises and only properties of the Poisson distribution, derive the colonization probability $K(d_{\\text{eff}})$ as the probability of at least one arrival. Then, for the given test suite, compute $d_{\\text{eff}}$ for each case and return the corresponding colonization probabilities under $K(d_{\\text{eff}})$.\n\nGrid geometry and indexing:\n- Use coordinates $(x,y)$ with $x$ the column index and $y$ the row index.\n- The origin $(0,0)$ is the top-left cell of the grid.\n- Grid shape is height $H$ by width $W$; valid indices satisfy $0 \\le y < H$ and $0 \\le x < W$.\n\nEdge traversal cost between adjacent cells $(x,y)$ and $(x',y')$ is\n$$\nw\\big((x,y)\\to(x',y')\\big) \\;=\\; \\frac{c(x,y) + c(x',y')}{2} \\cdot \\ell\\big((x,y),(x',y')\\big),\n$$\nwhere\n$$\n\\ell\\big((x,y),(x',y')\\big) \\;=\\; \\begin{cases}\n1, & \\text{if } |x-x'| + |y-y'| = 1,\\\\\n\\sqrt{2}, & \\text{if } |x-x'| = 1 \\text{ and } |y-y'| = 1.\n\\end{cases}\n$$\n\nDefinition of effective distance:\n$$\nd_{\\text{eff}}(\\text{source},\\text{target}) \\;=\\; \\min_{\\text{8-neighbor paths } P} \\sum_{e \\in P} w(e).\n$$\n\nColonization model assumptions:\n- Expected arrivals: $m \\;=\\; s \\cdot k\\!\\left(d_{\\text{eff}}\\right)$.\n- Exponential kernel: $k(d) \\;=\\; \\exp(-\\alpha d)$.\n- Arrivals follow a Poisson process with mean $m$.\n\nYour program must:\n- Compute $d_{\\text{eff}}$ via a correct shortest-path algorithm on the grid with the specified edge weights.\n- From first principles of the Poisson model, derive and implement $K(d_{\\text{eff}})$.\n- Apply to the following test suite in order. Each test case is defined by a cost grid $C$, a source coordinate $(x_s,y_s)$, a target coordinate $(x_t,y_t)$, and parameters $\\alpha$ and $s$.\n\nTest suite:\n1. Case A (uniform movement cost):\n   - Grid $C_A$ is $5 \\times 5$ with all entries equal to $1$.\n   - Source $(x_s,y_s) = (0,0)$, target $(x_t,y_t) = (4,3)$.\n   - Parameters: $\\alpha = 0.5$, $s = 3.0$.\n2. Case B (zero-distance boundary):\n   - Grid $C_B$ is $5 \\times 5$ with all entries equal to $1$.\n   - Source $(x_s,y_s) = (2,2)$, target $(x_t,y_t) = (2,2)$.\n   - Parameters: $\\alpha = 0.9$, $s = 2.0$.\n3. Case C (central barrier detour):\n   - Grid $C_C$ is $3 \\times 3$ given by\n     $$\n     C_C \\;=\\; \\begin{bmatrix}\n     1 & 1 & 1\\\\\n     1 & 100 & 1\\\\\n     1 & 1 & 1\n     \\end{bmatrix}.\n     $$\n   - Source $(x_s,y_s) = (0,0)$, target $(x_t,y_t) = (2,2)$.\n   - Parameters: $\\alpha = 0.7$, $s = 1.5$.\n\nAnswer specification:\n- For each case, output the colonization probability as a floating-point number rounded to exactly $6$ decimal places.\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, in the same order as the test suite (e.g., $[r_1,r_2,r_3]$).\n- No external input is provided; embed the test suite directly in the program.", "solution": "The problem posed is a well-defined exercise in ecological modeling, specifically concerning landscape connectivity. It requires the synthesis of two components: a graph-theoretic pathfinding problem to determine an effective distance and a probabilistic model for colonization. The problem is scientifically grounded and internally consistent, thus admitting a rigorous solution.\n\nThe overall task is to compute the colonization probability $K$ for several scenarios. This requires two principal steps: first, the derivation of the function $K$ in terms of the effective distance $d_{\\text{eff}}$, and second, the computation of $d_{\\text{eff}}$ for each specific scenario.\n\nFirst, we derive the expression for the colonization probability $K(d_{\\text{eff}})$. The problem states that propagule arrivals at a target cell follow a Poisson process. The number of arrivals, a random variable which we denote by $N$, thus follows a Poisson distribution with a mean $m$. The probability mass function is given by:\n$$\nP(N=k) \\;=\\; \\frac{e^{-m} m^k}{k!}\n$$\nfor a non-negative integer number of arrivals $k$. Colonization is defined as the event of at least one arrival, which corresponds to $N \\ge 1$. The probability of this event, $K$, is the complement of the probability of zero arrivals, $N=0$.\n$$\nK(d_{\\text{eff}}) \\;=\\; P(N \\ge 1) \\;=\\; 1 - P(N=0)\n$$\nSubstituting $k=0$ into the Poisson probability mass function yields:\n$$\nP(N=0) \\;=\\; \\frac{e^{-m} m^0}{0!} \\;=\\; e^{-m}\n$$\nTherefore, the colonization probability is:\n$$\nK(d_{\\text{eff}}) \\;=\\; 1 - e^{-m}\n$$\nThe mean number of arrivals $m$ is given as a function of the effective distance $d_{\\text{eff}}$:\n$$\nm \\;=\\; s \\cdot k(d_{\\text{eff}})\n$$\nwhere $s$ is the source supply and $k(d)$ is an exponential dispersal kernel with rate parameter $\\alpha > 0$:\n$$\nk(d) \\;=\\; \\exp(-\\alpha d)\n$$\nBy substitution, we obtain the complete expression for the colonization probability as a function of effective distance:\n$$\nK(d_{\\text{eff}}) \\;=\\; 1 - \\exp\\left(-s \\cdot \\exp(-\\alpha d_{\\text{eff}})\\right)\n$$\nThis formula provides the analytical basis for the colonization model.\n\nSecond, we must devise a method to compute the effective distance, $d_{\\text{eff}}$. The problem defines $d_{\\text{eff}}$ as the minimum total cost over all valid paths between a source and a target cell. The landscape is represented as a grid, which can be interpreted as a graph where each cell $(x,y)$ is a node. An edge exists between a cell and its eight neighbors (the Moore neighborhood). The weight of an edge connecting cell $u$ with cost $c_u$ and cell $v$ with cost $c_v$ is defined as:\n$$\nw_{uv} \\;=\\; \\frac{c_u + c_v}{2} \\cdot \\ell_{uv}\n$$\nwhere $\\ell_{uv}$ is the Euclidean distance between cell centers, being $1$ for cardinal moves and $\\sqrt{2}$ for diagonal moves. Since all movement costs $c$ are specified as positive, all edge weights $w_{uv}$ are strictly positive.\n\nThe problem of finding $d_{\\text{eff}}$ is thus a classic single-source shortest path problem on a graph with non-negative edge weights. For this class of problem, Dijkstra's algorithm is the standard and correct procedure. The algorithm systematically finds the shortest path from a source node to all other nodes in the graph.\n\nThe implementation of Dijkstra's algorithm proceeds as follows:\n$1.$ A distance array, `dist`, is initialized with infinity for all cells except for the source cell, whose distance is set to $0$.\n$2.$ A min-priority queue is used to store nodes to visit, prioritized by their current shortest distance from the source. The source cell is added initially.\n$3.$ The algorithm iteratively extracts the node `(x,y)` with the smallest distance from the priority queue.\n$4.$ For each neighbor `(nx,ny)` of `(x,y)`, it calculates the potential new distance through `(x,y)` as `dist[y,x] + w`, where `w` is the weight of the edge between them.\n$5.$ If this new distance is less than the currently known distance to `(nx,ny)`, the distance is updated, and the neighbor is added to the priority queue with its new, shorter distance.\n$6.$ The process terminates when the priority queue is empty, or, as an optimization, when the target node is extracted from the queue. The value in `dist` for the target cell upon termination is the effective distance $d_{\\text{eff}}$.\n\nThe final solution is an algorithm that, for each test case, first executes Dijkstra's algorithm on the provided cost grid to compute $d_{\\text{eff}}$ between the specified source and target cells. Then, it substitutes this computed $d_{\\text{eff}}$, along with the given parameters $\\alpha$ and $s$, into the derived formula for $K(d_{\\text{eff}})$ to obtain the colonization probability. The final numerical results are rounded to the specified precision.", "answer": "```python\nimport numpy as np\nimport heapq\n\ndef solve():\n    \"\"\"\n    Solves the problem by calculating effective distance and colonization probability\n    for a suite of test cases.\n    \"\"\"\n\n    def _calculate_colonization_probability(case):\n        \"\"\"\n        Computes the colonization probability for a single test case.\n\n        A test case is a dictionary containing:\n        - C: numpy array for the cost grid\n        - source: (x, y) tuple for the source cell\n        - target: (x, y) tuple for the target cell\n        - alpha: float, rate parameter for the exponential kernel\n        - s: float, source supply\n        \"\"\"\n        cost_grid = case[\"C\"]\n        source = case[\"source\"]\n        target = case[\"target\"]\n        alpha = case[\"alpha\"]\n        s = case[\"s\"]\n        \n        # Sub-function for Dijkstra's algorithm\n        def dijkstra(grid, src, tgt):\n            H, W = grid.shape\n            dist = np.full((H, W), np.inf, dtype=float)\n            \n            xs, ys = src\n            xt, yt = tgt\n            \n            dist[ys, xs] = 0.0\n            pq = [(0.0, xs, ys)]  # (distance, x, y)\n            \n            sqrt2 = np.sqrt(2.0)\n            \n            while pq:\n                d, x, y = heapq.heappop(pq)\n                \n                if d > dist[y, x]:\n                    continue\n                \n                if x == xt and y == yt:\n                    return d\n                \n                # Explore 8 neighbors\n                for dx in [-1, 0, 1]:\n                    for dy in [-1, 0, 1]:\n                        if dx == 0 and dy == 0:\n                            continue\n                        \n                        nx, ny = x + dx, y + dy\n                        \n                        # Check grid boundaries\n                        if 0 = nx  W and 0 = ny  H:\n                            step_length = sqrt2 if dx != 0 and dy != 0 else 1.0\n                            \n                            cost_u = grid[y, x]\n                            cost_v = grid[ny, nx]\n                            \n                            weight = (cost_u + cost_v) / 2.0 * step_length\n                            \n                            new_dist = d + weight\n                            \n                            if new_dist  dist[ny, nx]:\n                                dist[ny, nx] = new_dist\n                                heapq.heappush(pq, (new_dist, nx, ny))\n                                \n            return dist[yt, xt]\n\n        # Get effective distance\n        if source == target:\n            d_eff = 0.0\n        else:\n            d_eff = dijkstra(cost_grid, source, target)\n        \n        # Calculate colonization probability K\n        m = s * np.exp(-alpha * d_eff)\n        K = 1.0 - np.exp(-m)\n        \n        return K\n\n    test_cases = [\n        # Case A: uniform movement cost\n        {\n            \"C\": np.full((5, 5), 1.0),\n            \"source\": (0, 0),\n            \"target\": (4, 3),\n            \"alpha\": 0.5,\n            \"s\": 3.0\n        },\n        # Case B: zero-distance boundary\n        {\n            \"C\": np.full((5, 5), 1.0),\n            \"source\": (2, 2),\n            \"target\": (2, 2),\n            \"alpha\": 0.9,\n            \"s\": 2.0\n        },\n        # Case C: central barrier detour\n        {\n            \"C\": np.array([\n                [1.0, 1.0, 1.0],\n                [1.0, 100.0, 1.0],\n                [1.0, 1.0, 1.0]\n            ]),\n            \"source\": (0, 0),\n            \"target\": (2, 2),\n            \"alpha\": 0.7,\n            \"s\": 1.5\n        }\n    ]\n\n    results = []\n    for case in test_cases:\n        result = _calculate_colonization_probability(case)\n        # Round to exactly 6 decimal places\n        results.append(round(result, 6))\n\n    # Format the output as specified\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2528280"}, {"introduction": "Conservation planning is ultimately about making optimal decisions under constraints. It requires synthesizing ecological principles with economic and logistical realities to generate defensible, on-the-ground strategies. This exercise [@problem_id:2528291] guides you through the process of formulating a binary integer program, a powerful operations research technique, to solve a realistic reserve design problem. By integrating species benefits, land costs, and a sophisticated flow-based constraint to ensure contiguity, you will learn how to translate complex conservation goals into a solvable mathematical model that finds the best possible solution.", "problem": "A conservation planner must design a terrestrial reserve under the Single Large or Several Small (SLOSS) framing by selecting planning units that maximize ecological benefit subject to a budget and a single-contiguous-reserve requirement. The planning region is modeled as a simple undirected graph where vertices represent planning units and edges represent adjacency. The fundamental base you must use is: (i) the definition of graph connectivity as the existence of paths between vertices, (ii) the principle of conservation of flow at nodes (flow balance), and (iii) linear budget accounting. It is ecologically reasonable to require that all selected planning units form a single connected set, which can be enforced using a flow-based formulation that sends commodity from a designated root to all selected units inside the induced subgraph.\n\nThe planning units are $V=\\{1,2,3,4,5\\}$ arranged linearly with undirected edges $E=\\{(1,2),(2,3),(3,4),(4,5)\\}$. Let $A$ be the set of directed arcs obtained by replacing each undirected edge $(i,j)\\in E$ with two directed arcs $(i,j)$ and $(j,i)$. The cost and benefit of selecting unit $i\\in V$ are given by $c_i$ and $b_i$, respectively, and the total available budget is $B$. The designated root is $r=3$. Data are:\n- $c_1=3$, $c_2=2$, $c_3=2$, $c_4=1$, $c_5=3$.\n- $b_1=8$, $b_2=5$, $b_3=4$, $b_4=2$, $b_5=7$.\n- $B=7$.\n\nTasks:\n- Construct a binary integer program whose decision variables select a subset of $V$ that maximizes $\\sum_{i\\in V} b_i x_i$ subject to the budget constraint $\\sum_{i\\in V} c_i x_i \\le B$, the requirement that $x_r=1$, and a single-commodity flow-based connectivity constraint that ensures every selected unit is connected to the root $r$ within the subgraph induced by the selected units. Your construction must rely only on the above-stated fundamental base and must introduce and justify all variables and constraints needed for contiguity.\n- Using your formulation and the provided data, compute the optimal total benefit value achieved by a feasible connected selection. Express the final answer as a single number with no units. No rounding is required.", "solution": "The problem will be validated prior to any attempt at a solution.\n\n### Step 1: Extract Givens\nThe givens are extracted verbatim from the problem statement:\n- **Model Framework:** The problem is a reserve design task under the Single Large or Several Small (SLOSS) framing, modeled on a simple undirected graph. Vertices represent planning units and edges represent adjacency.\n- **Fundamental Principles:** (i) Graph connectivity as path existence, (ii) conservation of flow at nodes, (iii) linear budget accounting.\n- **Connectivity Enforcement:** A single-commodity flow-based formulation ensures all selected units form a single connected set containing a designated root.\n- **Graph Definition:**\n    - Vertices: $V=\\{1,2,3,4,5\\}$.\n    - Undirected edges: $E=\\{(1,2),(2,3),(3,4),(4,5)\\}$.\n    - Directed arcs: $A$ is formed by replacing each edge in $E$ with two directed arcs.\n- **Problem Data:**\n    - Costs: $c_1=3$, $c_2=2$, $c_3=2$, $c_4=1$, $c_5=3$.\n    - Benefits: $b_1=8$, $b_2=5$, $b_3=4$, $b_4=2$, $b_5=7$.\n    - Budget: $B=7$.\n    - Root: $r=3$.\n- **Tasks:**\n    - Construct a binary integer program (BIP) to maximize total benefit subject to budget and connectivity constraints, with the root $r$ required to be selected.\n    - Compute the optimal total benefit value.\n\n### Step 2: Validate Using Extracted Givens\nThe problem is subjected to a rigorous validation check:\n- **Scientific Grounding:** The problem is a standard, scientifically sound application of operations research (specifically, integer programming) to conservation planning. The use of graph theory and flow-based constraints to model spatial contiguity is a well-established and valid method in landscape ecology and reserve design literature. The problem is firmly grounded in established mathematical and ecological principles.\n- **Well-Posedness:** The problem specifies a clear objective function (maximize total benefit) and a set of well-defined constraints (budget, root selection, connectivity). It is a maximization problem over a finite, non-empty feasible set (the set containing only the root is feasible), which guarantees that an optimal solution exists. The problem is well-posed.\n- **Objectivity:** The problem is stated in precise, quantitative terms. All parameters are explicitly defined. There is no subjective, ambiguous, or opinion-based language.\n- **Completeness and Consistency:** All necessary data ($V$, $E$, costs, benefits, budget, root) are provided. The requirement to select the root ($x_r=1$) is consistent with the budget, as the cost of the root ($c_3=2$) is less than the total budget ($B=7$). There are no contradictions.\n- **Realism and Feasibility:** The problem is an abstracted representation, but it does not violate any physical or logical principles. The numerical values are chosen for a tractable example.\n\n### Step 3: Verdict and Action\nThe problem is **valid**. It is a correct and well-formulated problem in the field of applied optimization for conservation biology. A solution will be provided.\n\n### Integer Program Formulation\nFirst, we construct the binary integer program as required.\n\n**Decision Variables:**\n- Let $x_i \\in \\{0, 1\\}$ be a decision variable for each planning unit $i \\in V$. If $x_i=1$, unit $i$ is selected; if $x_i=0$, it is not.\n- Let $f_{ij} \\ge 0$ be a continuous variable representing the amount of a conceptual commodity flowing on the directed arc $(i,j) \\in A$.\n\n**Objective Function:**\nThe objective is to maximize the sum of benefits from the selected units:\n$$ \\text{Maximize } \\sum_{i \\in V} b_i x_i = 8x_1 + 5x_2 + 4x_3 + 2x_4 + 7x_5 $$\n\n**Constraints:**\n1.  **Budget Constraint:** The total cost of selected units cannot exceed the budget $B$.\n    $$ \\sum_{i \\in V} c_i x_i = 3x_1 + 2x_2 + 2x_3 + 1x_4 + 3x_5 \\le 7 $$\n\n2.  **Root Selection Constraint:** The designated root unit $r=3$ must be selected.\n    $$ x_3 = 1 $$\n\n3.  **Connectivity Constraints (Single-Commodity Flow):** These constraints ensure that the subgraph induced by the set of selected units $\\{i \\in V \\mid x_i=1\\}$ is connected and contains the root $r=3$. This is achieved by demanding that each selected non-root node consumes one unit of flow supplied by the root, with flow being restricted to paths of selected nodes.\n\n    a. **Flow Balance at the Root ($r=3$):** The net flow out of the root must equal the number of other selected units (sinks).\n    $$ \\sum_{(3,j)\\in A} f_{3j} - \\sum_{(j,3)\\in A} f_{j3} = \\sum_{i \\in V \\setminus \\{3\\}} x_i $$\n    For the given graph, this is:\n    $$ (f_{32} + f_{34}) - (f_{23} + f_{43}) = x_1 + x_2 + x_4 + x_5 $$\n\n    b. **Flow Balance at Non-Root Nodes ($i \\in V \\setminus \\{3\\}$):** Each selected non-root node must consume one unit of flow. If a node is not selected, its inflow must equal its outflow (it acts as a transit point).\n    $$ \\sum_{(j,i)\\in A} f_{ji} - \\sum_{(i,j)\\in A} f_{ij} = x_i \\quad \\forall i \\in V \\setminus \\{3\\} $$\n    For the given graph nodes:\n    - $i=1$: $f_{21} - f_{12} = x_1$\n    - $i=2$: $(f_{12} + f_{32}) - (f_{21} + f_{23}) = x_2$\n    - $i=4$: $(f_{34} + f_{54}) - (f_{43} + f_{45}) = x_4$\n    - $i=5$: $f_{45} - f_{54} = x_5$\n\n    c. **Flow Capacity Constraints:** Flow is restricted to originating from selected nodes only. If a node $i$ is not selected ($x_i=0$), no flow can leave it. This is enforced by linking the total outflow from a node to its selection status. A correct and common way to write this is:\n    $$ \\sum_{(i,j)\\in A} f_{ij} \\le (|V|-1) x_i \\quad \\forall i \\in V $$\n    Here, $|V|-1 = 4$ is the maximum possible number of sinks.\n    - $i=1$: $f_{12} \\le 4x_1$\n    - $i=2$: $f_{21} + f_{23} \\le 4x_2$\n    - $i=3$: $f_{32} + f_{34} \\le 4x_3$\n    - $i=4$: $f_{43} + f_{45} \\le 4x_4$\n    - $i=5$: $f_{54} \\le 4x_5$\n\nThis completes the formulation of the binary integer program.\n\n### Optimal Solution Calculation\nFor a problem of this small dimension, the optimal solution can be found by systematically enumerating all feasible connected reserve configurations and comparing their total benefits. A feasible configuration is a set of planning units $S \\subseteq V$ that:\n1.  Includes the root: $3 \\in S$.\n2.  Induces a connected subgraph.\n3.  Satisfies the budget: $\\sum_{i \\in S} c_i \\le 7$.\n\nThe graph is a linear path $1-2-3-4-5$. Any connected subgraph containing node $3$ must be a contiguous segment of this path that includes node $3$. We list all such segments, check their cost against the budget, and compute their benefit.\n\n- **Candidate Set $S_1 = \\{3\\}$:**\n  - Cost: $c_3 = 2$. Budget check: $2 \\le 7$ (Feasible).\n  - Benefit: $b_3 = 4$.\n\n- **Candidate Set $S_2 = \\{2, 3\\}$:**\n  - Cost: $c_2 + c_3 = 2 + 2 = 4$. Budget check: $4 \\le 7$ (Feasible).\n  - Benefit: $b_2 + b_3 = 5 + 4 = 9$.\n\n- **Candidate Set $S_3 = \\{3, 4\\}$:**\n  - Cost: $c_3 + c_4 = 2 + 1 = 3$. Budget check: $3 \\le 7$ (Feasible).\n  - Benefit: $b_3 + b_4 = 4 + 2 = 6$.\n\n- **Candidate Set $S_4 = \\{1, 2, 3\\}$:**\n  - Cost: $c_1 + c_2 + c_3 = 3 + 2 + 2 = 7$. Budget check: $7 \\le 7$ (Feasible).\n  - Benefit: $b_1 + b_2 + b_3 = 8 + 5 + 4 = 17$.\n\n- **Candidate Set $S_5 = \\{2, 3, 4\\}$:**\n  - Cost: $c_2 + c_3 + c_4 = 2 + 2 + 1 = 5$. Budget check: $5 \\le 7$ (Feasible).\n  - Benefit: $b_2 + b_3 + b_4 = 5 + 4 + 2 = 11$.\n\n- **Candidate Set $S_6 = \\{3, 4, 5\\}$:**\n  - Cost: $c_3 + c_4 + c_5 = 2 + 1 + 3 = 6$. Budget check: $6 \\le 7$ (Feasible).\n  - Benefit: $b_3 + b_4 + b_5 = 4 + 2 + 7 = 13$.\n\n- **Candidate Set $S_7 = \\{1, 2, 3, 4\\}$:**\n  - Cost: $c_1 + c_2 + c_3 + c_4 = 3 + 2 + 2 + 1 = 8$. Budget check: $8 > 7$ (Infeasible).\n\n- **Candidate Set $S_8 = \\{2, 3, 4, 5\\}$:**\n  - Cost: $c_2 + c_3 + c_4 + c_5 = 2 + 2 + 1 + 3 = 8$. Budget check: $8 > 7$ (Infeasible).\n\n- **Candidate Set $S_9 = \\{1, 2, 3, 4, 5\\}$:**\n  - Cost: $c_1 + c_2 + c_3 + c_4 + c_5 = 3 + 2 + 2 + 1 + 3 = 11$. Budget check: $11 > 7$ (Infeasible).\n\nComparing the total benefits of the feasible sets:\n$B(S_1) = 4$\n$B(S_2) = 9$\n$B(S_3) = 6$\n$B(S_4) = 17$\n$B(S_5) = 11$\n$B(S_6) = 13$\n\nThe maximum value among these is $17$. This benefit is achieved by selecting the planning units $\\{1, 2, 3\\}$. The total cost is $7$, which exhausts the budget. The selection is connected and contains the root. Therefore, the optimal total benefit is $17$.", "answer": "$$\\boxed{17}$$", "id": "2528291"}]}