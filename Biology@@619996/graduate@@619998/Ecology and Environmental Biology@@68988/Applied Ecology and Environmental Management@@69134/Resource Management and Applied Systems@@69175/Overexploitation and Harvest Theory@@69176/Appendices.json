{"hands_on_practices": [{"introduction": "We begin our hands-on exploration with the cornerstone of classical harvest theory: the concept of Maximum Sustainable Yield ($MSY$). This exercise [@problem_id:2516838] uses the foundational Schaefer model, which couples logistic population growth with a simple representation of fishing effort. By working through the derivation from first principles, you will develop a concrete understanding of how a fishery's sustainable yield is related to the effort exerted, and how to identify the optimal effort that provides the largest long-term catch.", "problem": "A single-species fish population exploited by a fishery is described at the population (biomass) level by the Verhulst logistic equation with continuous harvest. Let biomass be $B$ and intrinsic growth rate be $r$. Under density dependence with carrying capacity $K$, the unharvested dynamics are $\\frac{dB}{dt} = r B \\left(1 - B/K\\right)$. Under proportional harvest, the annual catch is $H = q E B$, where $q$ is the catchability coefficient and $E$ is fishing effort. Assume all parameters are constant and positive and that the fishery operates at a constant effort $E$ over a long period, so that a nontrivial equilibrium biomass $B^{*} > 0$ exists and defines a sustainable harvest.\n\nStarting only from these definitions, derive the sustainable yield $Y(E)$ as a function of $E$ by using the nontrivial equilibrium condition $\\frac{dB}{dt}=0$, and then determine the effort $E_{MSY}$ that maximizes $Y(E)$ using calculus. Use your derived expressions to compute the following for the parameter values $r = 0.3\\,\\text{y}^{-1}$, $K = 5000\\,\\text{t}$, and $q = 2 \\times 10^{-4}\\,\\text{y}^{-1}\\,\\text{effort}^{-1}$:\n- the Maximum Sustainable Yield (MSY), expressed in tonnes per year ($\\text{t}\\,\\texty^{-1}$),\n- the maximizing effort $E_{MSY}$, expressed in the given effort units,\n- the resulting equilibrium biomass $B^{*}$ at $E_{MSY}$, expressed in tonnes ($\\text{t}$).\n\nReport your final numerical results in the order $(MSY, E_{MSY}, B^{*})$. No rounding is required; provide exact values based on the given parameters.", "solution": "The problem statement is scientifically grounded, well-posed, objective, and provides a complete and consistent set of definitions and parameters. It is a standard problem in theoretical ecology and fisheries management. Therefore, it is valid and a solution will be derived.\n\nThe dynamics of the exploited fish population are described by the logistic growth equation with a proportional harvest term. Let $B(t)$ be the biomass of the population at time $t$. The governing differential equation is:\n$$\n\\frac{dB}{dt} = \\text{Growth} - \\text{Harvest}\n$$\nThe growth term is given by the Verhulst logistic model, $rB(1 - B/K)$, where $r$ is the intrinsic growth rate and $K$ is the carrying capacity. The harvest term is $H = qEB$, where $q$ is the catchability coefficient and $E$ is the fishing effort. The complete model is:\n$$\n\\frac{dB}{dt} = rB\\left(1 - \\frac{B}{K}\\right) - qEB\n$$\nA sustainable yield, denoted $Y$, is the harvest rate at a stable, non-trivial equilibrium biomass, $B^{*}$. An equilibrium is found by setting $\\frac{dB}{dt} = 0$:\n$$\nrB^{*}\\left(1 - \\frac{B^{*}}{K}\\right) - qEB^{*} = 0\n$$\nThe problem specifies a non-trivial equilibrium, so we assume $B^{*} > 0$ and can divide by $B^{*}$:\n$$\nr\\left(1 - \\frac{B^{*}}{K}\\right) - qE = 0\n$$\nSolving for the equilibrium biomass $B^{*}$ as a function of effort $E$:\n$$\n1 - \\frac{B^{*}}{K} = \\frac{qE}{r}\n$$\n$$\n\\frac{B^{*}}{K} = 1 - \\frac{qE}{r}\n$$\n$$\nB^{*}(E) = K\\left(1 - \\frac{qE}{r}\\right)\n$$\nFor $B^{*}$ to be positive, the effort $E$ must be constrained such that $E < \\frac{r}{q}$.\n\nThe sustainable yield $Y(E)$ is the harvest rate at this equilibrium biomass:\n$$\nY(E) = qEB^{*} = qE K\\left(1 - \\frac{qE}{r}\\right)\n$$\nThis expression can be expanded into a quadratic function of $E$:\n$$\nY(E) = qKE - \\frac{q^{2}K}{r}E^{2}\n$$\nTo find the effort, $E_{MSY}$, that maximizes the sustainable yield, we must find the maximum of the function $Y(E)$. This is accomplished by taking the first derivative of $Y(E)$ with respect to $E$ and setting it to zero:\n$$\n\\frac{dY}{dE} = \\frac{d}{dE}\\left(qKE - \\frac{q^{2}K}{r}E^{2}\\right) = qK - \\frac{2q^{2}K}{r}E\n$$\nSetting the derivative to zero, we solve for $E_{MSY}$:\n$$\nqK - \\frac{2q^{2}K}{r}E_{MSY} = 0\n$$\n$$\nqK = \\frac{2q^{2}K}{r}E_{MSY}\n$$\nSince $q$ and $K$ are positive constants, we can simplify to find $E_{MSY}$:\n$$\nE_{MSY} = \\frac{r}{2q}\n$$\nThe second derivative, $\\frac{d^{2}Y}{dE^{2}} = -\\frac{2q^{2}K}{r}$, is negative since $r, q, K > 0$, confirming that $E_{MSY}$ corresponds to a maximum.\n\nNext, we find the equilibrium biomass at this optimal effort, denoted $B^{*}_{MSY}$:\n$$\nB^{*}_{MSY} = B^{*}(E_{MSY}) = K\\left(1 - \\frac{q E_{MSY}}{r}\\right) = K\\left(1 - \\frac{q(r/2q)}{r}\\right) = K\\left(1 - \\frac{1}{2}\\right) = \\frac{K}{2}\n$$\nThe Maximum Sustainable Yield (MSY) is the yield at $E_{MSY}$ and $B^{*}_{MSY}$:\n$$\nMSY = Y(E_{MSY}) = q E_{MSY} B^{*}_{MSY} = q \\left(\\frac{r}{2q}\\right) \\left(\\frac{K}{2}\\right) = \\frac{rK}{4}\n$$\nNow, we substitute the given numerical parameter values: $r = 0.3\\,\\text{y}^{-1}$, $K = 5000\\,\\text{t}$, and $q = 2 \\times 10^{-4}\\,\\text{y}^{-1}\\,\\text{effort}^{-1}$.\n\nThe effort that maximizes sustainable yield is:\n$$\nE_{MSY} = \\frac{r}{2q} = \\frac{0.3}{2 \\times (2 \\times 10^{-4})} = \\frac{0.3}{4 \\times 10^{-4}} = \\frac{3 \\times 10^{-1}}{4 \\times 10^{-4}} = 0.75 \\times 10^{3} = 750\n$$\nThe resulting equilibrium biomass at $E_{MSY}$ is:\n$$\nB^{*}_{MSY} = \\frac{K}{2} = \\frac{5000}{2} = 2500\n$$\nThe Maximum Sustainable Yield is:\n$$\nMSY = \\frac{rK}{4} = \\frac{0.3 \\times 5000}{4} = \\frac{1500}{4} = 375\n$$\nThe problem requires the final results in the order $(MSY, E_{MSY}, B^{*})$. The computed values are $MSY = 375\\,\\text{t}\\,\\text{y}^{-1}$, $E_{MSY} = 750\\,\\text{effort units}$, and $B^{*} = 2500\\,\\text{t}$.", "answer": "$$\n\\boxed{\\begin{pmatrix} 375 & 750 & 2500 \\end{pmatrix}}\n$$", "id": "2516838"}, {"introduction": "While simple biomass models provide essential insights, real-world management must account for the complex life histories of organisms, where age and size dictate growth, reproduction, and vulnerability to harvesting. This practice [@problem_id:2516876] introduces you to per-recruit analysis, a powerful age-structured approach for evaluating management strategies. You will compare the effects of a minimum-size limit versus a protected slot limit on both fishery yield (YPR) and spawning potential (SPR), gaining applied experience with the critical trade-offs that define modern resource conservation.", "problem": "A single-species fish population is subject to continuous fishing with constant fishing mortality rate per unit time. Use the standard per-recruit framework grounded in age-structured demography to compare two harvest regulations applied at the same instantaneous fishing mortality rate.\n\nFundamental base:\n- Survivorship per recruit at age $a$, denoted $l(a)$, satisfies $\\frac{d}{da} l(a) = -\\left(M + F s(a)\\right) l(a)$ with $l(0)=1$, where $M$ is the age-independent natural mortality rate, $F$ is the fully selected instantaneous fishing mortality rate, and $s(a)$ is the selectivity at age.\n- Yield per recruit (YPR) is the integral $$YPR = \\int_{0}^{\\infty} F s(a) l(a) W(a) \\, da,$$ where $W(a)$ is weight at age.\n- Spawning potential ratio (SPR) is $$SPR = \\frac{\\int_{0}^{\\infty} m(a) l(a) f(a) \\, da}{\\int_{0}^{\\infty} m(a) l_{0}(a) f(a) \\, da},$$ where $m(a)$ is maturity at age, $f(a)$ is fecundity-at-age (assumed proportional to body size), and $l_{0}(a)$ is unfished survivorship satisfying $\\frac{d}{da} l_{0}(a) = -M l_{0}(a)$ with $l_{0}(0)=1$.\n\nLife-history and fishery specifications:\n- Von Bertalanffy growth in length: $L(a) = L_{\\infty} \\left(1 - \\exp(-k (a - t_{0}))\\right)$ with $L_{\\infty} = 100$, $k = 0.2$, and $t_{0} = 0$.\n- Weight-at-age is proportional to length: $W(a) = \\omega \\left(1 - \\exp(-k a)\\right)$ with $\\omega = 100$.\n- Natural mortality is constant: $M = 0.2$.\n- Fishing mortality is constant and equal across regulations: $F = 0.5$.\n- Maturity is knife-edged at length $L_{\\mathrm{mat}} = 50$: $m(a) = 0$ if $L(a) < L_{\\mathrm{mat}}$ and $m(a) = 1$ if $L(a) \\geq L_{\\mathrm{mat}}$.\n- Fecundity-at-age is proportional to length: $f(a) \\propto L(a)$; the proportionality cancels in $SPR$.\n- Two regulations define length-based selectivity:\n  1. Minimum-size limit at $L_{\\min} = 60$: $s_{\\min}(a) = 0$ if $L(a) < L_{\\min}$ and $s_{\\min}(a) = 1$ if $L(a) \\geq L_{\\min}$.\n  2. Slot limit $[L_{\\min}, L_{\\max}]$ with $L_{\\max} = 80$: $s_{\\mathrm{slot}}(a) = 0$ if $L(a) < L_{\\min}$, $s_{\\mathrm{slot}}(a) = 1$ if $L_{\\min} \\leq L(a) \\leq L_{\\max}$, and $s_{\\mathrm{slot}}(a) = 0$ if $L(a) > L_{\\max}$.\n\nTasks:\n- Starting from the definitions above, derive expressions for YPR and SPR under the minimum-size limit and the slot limit. Use the monotonicity of $L(a)$ to identify the ages $a_{x}$ at which $L(a) = x$ for $x \\in \\{L_{\\mathrm{mat}}, L_{\\min}, L_{\\max}\\}$.\n- Evaluate the resulting expressions numerically using the parameter values provided.\n- Briefly interpret the trade-offs between the two regulations in terms of the computed YPR and SPR.\n\nAnswer specification:\n- For your final numeric answer, report the ratio $R = \\frac{YPR_{\\mathrm{slot}}}{YPR_{\\min}}$ as a dimensionless decimal number. Round your answer to four significant figures. Do not include any units in your final reported value.", "solution": "We proceed from the per-recruit definitions with piecewise constant hazards determined by length-based selectivity via von Bertalanffy growth.\n\nStep 1: Threshold ages from von Bertalanffy growth.\nThe length-at-age is $L(a) = L_{\\infty} \\left(1 - \\exp(-k a)\\right)$ because $t_{0} = 0$. Solving $L(a) = x$ for $a$ gives\n$$\na_{x} = -\\frac{1}{k} \\ln\\!\\left(1 - \\frac{x}{L_{\\infty}}\\right).\n$$\nWith $L_{\\infty} = 100$ and $k = 0.2$, we obtain\n$$\na_{50} = -\\frac{1}{0.2} \\ln\\!\\left(1 - \\frac{50}{100}\\right) = -5 \\ln(0.5),\n$$\n$$\na_{60} = -5 \\ln(0.4), \\qquad a_{80} = -5 \\ln(0.2).\n$$\nIt will be convenient later to note the following exponentials using $k = 0.2$ and $M = 0.2$:\n$$\n\\exp(-k a_{60}) = \\exp(-M a_{60}) = 0.4, \\quad \\exp(-k a_{80}) = \\exp(-M a_{80}) = 0.2,\n$$\nand with $\\Delta \\equiv a_{80} - a_{60} = -5 \\ln(0.5)$,\n$$\n\\exp\\!\\left(-(M+F)\\Delta\\right) = \\exp(-0.7 \\Delta) = \\left(\\frac{1}{2}\\right)^{3.5}, \\quad \\exp\\!\\left(-(M+F+k)\\Delta\\right) = \\exp(-0.9 \\Delta) = \\left(\\frac{1}{2}\\right)^{4.5}.\n$$\n\nStep 2: Survivorship and selectivity structure.\nLet $l(a)$ denote the survivorship under a given selectivity pattern $s(a)$. In all cases,\n$$\n\\frac{d}{da} l(a) = -\\left(M + F s(a)\\right) l(a), \\quad l(0) = 1.\n$$\nFor the minimum-size limit:\n- For $a < a_{60}$, $s_{\\min}(a) = 0$, so $l_{\\min}(a) = \\exp(-M a)$.\n- For $a \\geq a_{60}$, $s_{\\min}(a) = 1$, so $l_{\\min}(a) = \\exp(-M a_{60}) \\exp\\!\\left(-(M+F)(a - a_{60})\\right)$.\n\nFor the slot limit:\n- For $a < a_{60}$, $s_{\\mathrm{slot}}(a) = 0$, so $l_{\\mathrm{slot}}(a) = \\exp(-M a)$.\n- For $a_{60} \\leq a \\leq a_{80}$, $s_{\\mathrm{slot}}(a) = 1$, so $l_{\\mathrm{slot}}(a) = \\exp(-M a_{60}) \\exp\\!\\left(-(M+F)(a - a_{60})\\right)$.\n- For $a > a_{80}$, $s_{\\mathrm{slot}}(a) = 0$, so $l_{\\mathrm{slot}}(a) = \\exp(-M a_{60}) \\exp\\!\\left(-(M+F)(a_{80} - a_{60})\\right) \\exp\\!\\left(-M (a - a_{80})\\right)$.\n\nStep 3: Yield per recruit under each regulation.\nBy definition,\n$$\nYPR = \\int_{0}^{\\infty} F s(a) l(a) W(a) \\, da, \\qquad W(a) = \\omega \\left(1 - \\exp(-k a)\\right), \\quad \\omega = 100.\n$$\n\nMinimum-size limit. Since $s_{\\min}(a) = 0$ for $a < a_{60}$ and $1$ for $a \\geq a_{60}$,\n$$\nYPR_{\\min} = \\int_{a_{60}}^{\\infty} F \\, l_{\\min}(a) \\, \\omega \\left(1 - \\exp(-k a)\\right) \\, da.\n$$\nSubstitute $l_{\\min}(a)$ on $[a_{60}, \\infty)$ and change variables $t = a - a_{60}$:\n$$\nYPR_{\\min} = F \\exp(-M a_{60}) \\, \\omega \\int_{0}^{\\infty} \\exp\\!\\left(-(M+F) t\\right) \\left(1 - \\exp(-k (a_{60} + t))\\right) dt.\n$$\nSplit the integral:\n$$\nYPR_{\\min} = F \\exp(-M a_{60}) \\, \\omega \\left[\\int_{0}^{\\infty} \\exp\\!\\left(-(M+F) t\\right) dt - \\exp(-k a_{60}) \\int_{0}^{\\infty} \\exp\\!\\left(-(M+F+k) t\\right) dt \\right].\n$$\nEvaluate the geometric integrals:\n$$\nYPR_{\\min} = F \\exp(-M a_{60}) \\, \\omega \\left[\\frac{1}{M+F} - \\frac{\\exp(-k a_{60})}{M+F+k}\\right].\n$$\nWith $M = 0.2$, $F = 0.5$, $k = 0.2$, $\\exp(-M a_{60}) = 0.4$, $\\exp(-k a_{60}) = 0.4$, and $\\omega = 100$,\n$$\nYPR_{\\min} = (0.5)(0.4)(100) \\left[\\frac{1}{0.7} - \\frac{0.4}{0.9}\\right] = 20 \\left[\\frac{10}{7} - \\frac{4}{9}\\right] = 20 \\left(\\frac{62}{63}\\right) = 19.6825396825...\n$$\n\nSlot limit. The catch occurs only for $a \\in [a_{60}, a_{80}]$, so\n$$\nYPR_{\\mathrm{slot}} = \\int_{a_{60}}^{a_{80}} F \\, l_{\\mathrm{slot}}(a) \\, \\omega \\left(1 - \\exp(-k a)\\right) \\, da.\n$$\nOn this interval, $l_{\\mathrm{slot}}(a) = \\exp(-M a_{60}) \\exp\\!\\left(-(M+F)(a - a_{60})\\right)$. With $t = a - a_{60}$ and $\\Delta = a_{80} - a_{60}$,\n$$\nYPR_{\\mathrm{slot}} = F \\exp(-M a_{60}) \\, \\omega \\int_{0}^{\\Delta} \\exp\\!\\left(-(M+F) t\\right) \\left(1 - \\exp(-k (a_{60} + t))\\right) dt.\n$$\nAs before,\n$$\nYPR_{\\mathrm{slot}} = F \\exp(-M a_{60}) \\, \\omega \\left[\\frac{1 - \\exp\\!\\left(-(M+F)\\Delta\\right)}{M+F} - \\exp(-k a_{60}) \\frac{1 - \\exp\\!\\left(-(M+F+k)\\Delta\\right)}{M+F+k}\\right].\n$$\nInsert values $\\exp(-M a_{60}) = 0.4$, $\\exp(-k a_{60}) = 0.4$, $\\exp\\!\\left(-(M+F)\\Delta\\right) = 2^{-3.5}$, $\\exp\\!\\left(-(M+F+k)\\Delta\\right) = 2^{-4.5}$:\n$$\nYPR_{\\mathrm{slot}} = 20 \\left[\\frac{1 - 2^{-3.5}}{0.7} - 0.4 \\frac{1 - 2^{-4.5}}{0.9}\\right].\n$$\nNumerically, $2^{-3.5} \\approx 0.0883883476483$ and $2^{-4.5} \\approx 0.0441941738242$, giving\n$$\nYPR_{\\mathrm{slot}} \\approx 20 \\left[1.3023023605024 - 0.4248025894115\\right] \\approx 20 \\times 0.8774997710909 \\approx 17.5499954218.\n$$\n\nTherefore, the requested ratio is\n$$\nR \\equiv \\frac{YPR_{\\mathrm{slot}}}{YPR_{\\min}} \\approx \\frac{17.5499954218}{19.6825396825} \\approx 0.891653.\n$$\n\nStep 4: Spawning potential ratio under each regulation.\nBy definition with knife-edged maturity at $a_{50}$ (the age at $L_{\\mathrm{mat}} = 50$), fecundity proportional to length ($f(a) \\propto L(a)$), and the same proportionality in numerator and denominator, we have\n$$\nSPR = \\frac{\\int_{a_{50}}^{\\infty} l(a) \\, \\omega \\left(1 - \\exp(-k a)\\right) \\, da}{\\int_{a_{50}}^{\\infty} l_{0}(a) \\, \\omega \\left(1 - \\exp(-k a)\\right) \\, da}.\n$$\nThe factor $\\omega$ cancels but we keep it for clarity.\n\nUnfished baseline:\n$$\nl_{0}(a) = \\exp(-M a), \\quad S_{0} \\equiv \\int_{a_{50}}^{\\infty} \\exp(-M a) \\omega \\left(1 - \\exp(-k a)\\right) da\n= \\omega \\left[\\frac{\\exp(-M a_{50})}{M} - \\frac{\\exp(-(M+k)a_{50})}{M+k}\\right].\n$$\nWith $a_{50} = -5 \\ln(0.5)$, we have $\\exp(-M a_{50}) = \\exp(-k a_{50}) = 0.5$, so\n$$\nS_{0} = \\omega \\left[\\frac{0.5}{0.2} - \\frac{0.25}{0.4}\\right] = \\omega (2.5 - 0.625) = \\omega \\times 1.875 = 187.5.\n$$\n\nMinimum-size limit:\nSplit the integral at $a_{60}$ where fishing begins:\n$$\nS_{\\min} = \\omega \\left[\\int_{a_{50}}^{a_{60}} \\exp(-M a)\\left(1 - \\exp(-k a)\\right) da + \\exp(-M a_{60}) \\int_{a_{60}}^{\\infty} \\exp\\!\\left(-(M+F)(a - a_{60})\\right)\\left(1 - \\exp(-k a)\\right) da \\right].\n$$\nThe first piece evaluates to\n$$\nJ_{1} = \\left[\\frac{\\exp(-M a_{50}) - \\exp(-M a_{60})}{M}\\right] - \\left[\\frac{\\exp(-(M+k)a_{50}) - \\exp(-(M+k)a_{60})}{M+k}\\right].\n$$\nUsing $\\exp(-M a_{50}) = 0.5$, $\\exp(-M a_{60}) = 0.4$, $\\exp(-(M+k)a_{50}) = 0.25$, $\\exp(-(M+k)a_{60}) = 0.16$,\n$$\nJ_{1} = \\frac{0.1}{0.2} - \\frac{0.09}{0.4} = 0.5 - 0.225 = 0.275.\n$$\nThe second piece is\n$$\nJ_{2} = \\exp(-M a_{60}) \\left[\\frac{1}{M+F} - \\frac{\\exp(-k a_{60})}{M+F+k}\\right] = 0.4 \\left[\\frac{1}{0.7} - \\frac{0.4}{0.9}\\right] = 0.4 \\times \\frac{62}{63} \\approx 0.39365079365.\n$$\nThus\n$$\nS_{\\min} = \\omega (J_{1} + J_{2}) \\approx 100 \\times (0.275 + 0.39365079365) \\approx 66.865079365.\n$$\nSo\n$$\nSPR_{\\min} = \\frac{S_{\\min}}{S_{0}} \\approx \\frac{66.865079365}{187.5} \\approx 0.356613733.\n$$\n\nSlot limit:\nSplit across $[a_{50}, a_{60}]$, $[a_{60}, a_{80}]$, and $[a_{80}, \\infty)$:\n$$\nS_{\\mathrm{slot}} = \\omega \\left[J_{1} + J_{2}^{\\mathrm{slot}} + J_{3}^{\\mathrm{slot}}\\right],\n$$\nwith $J_{1}$ as above, and\n$$\nJ_{2}^{\\mathrm{slot}} = \\exp(-M a_{60}) \\left[\\frac{1 - \\exp\\!\\left(-(M+F)\\Delta\\right)}{M+F} - \\exp(-k a_{60}) \\frac{1 - \\exp\\!\\left(-(M+F+k)\\Delta\\right)}{M+F+k}\\right],\n$$\n$$\nJ_{3}^{\\mathrm{slot}} = \\exp(-M a_{60}) \\exp\\!\\left(-(M+F)\\Delta\\right) \\left[\\frac{1}{M} - \\frac{\\exp(-k a_{80})}{M+k}\\right].\n$$\nInsert the values: $\\exp(-M a_{60}) = 0.4$, $\\exp(-k a_{60}) = 0.4$, $\\exp\\!\\left(-(M+F)\\Delta\\right) = 2^{-3.5}$, $\\exp\\!\\left(-(M+F+k)\\Delta\\right) = 2^{-4.5}$, and $\\exp(-k a_{80}) = 0.2$:\n$$\nJ_{2}^{\\mathrm{slot}} \\approx 0.4 \\left[\\frac{1 - 2^{-3.5}}{0.7} - 0.4 \\frac{1 - 2^{-4.5}}{0.9}\\right] \\approx 0.350999908436,\n$$\n$$\nJ_{3}^{\\mathrm{slot}} \\approx 0.4 \\cdot 2^{-3.5} \\left[\\frac{1}{0.2} - \\frac{0.2}{0.4}\\right] = 0.4 \\cdot 2^{-3.5} \\cdot 4.5 \\approx 0.159099025767.\n$$\nTherefore,\n$$\nS_{\\mathrm{slot}} \\approx 100 \\times \\left(0.275 + 0.350999908436 + 0.159099025767\\right) \\approx 78.5098934203,\n$$\nand\n$$\nSPR_{\\mathrm{slot}} \\approx \\frac{78.5098934203}{187.5} \\approx 0.418719431.\n$$\n\nStep 5: Interpretation of trade-offs.\nUnder the same instantaneous fishing mortality $F$, the slot limit reduces catchability of the largest fish relative to the minimum-size limit, which reduces YPR but increases SPR by preserving more large, highly fecund spawners. Numerically, $YPR_{\\mathrm{slot}} \\approx 17.55$ and $YPR_{\\min} \\approx 19.68$, while $SPR_{\\mathrm{slot}} \\approx 0.419$ and $SPR_{\\min} \\approx 0.357$. Thus, the slot limit sacrifices a fraction of yield (about $1 - R \\approx 0.108$) to gain higher reproductive potential, illustrating the classic yield–conservation trade-off.\n\nFinally, the requested ratio is\n$$\nR = \\frac{YPR_{\\mathrm{slot}}}{YPR_{\\min}} \\approx 0.891653.\n$$\nRounded to four significant figures, $R \\approx 0.8917$.", "answer": "$$\\boxed{0.8917}$$", "id": "2516876"}, {"introduction": "Effective management must navigate a world of uncertainty, where environmental fluctuations can dramatically alter population dynamics. This computational practice [@problem_id:2516796] moves beyond deterministic equilibria into the modern framework of stochastic dynamic programming. You will implement a value iteration algorithm to find an optimal, state-dependent harvest policy that maximizes long-term utility in a fluctuating environment, and explore how increasing environmental variance quantitatively leads to more precautionary management strategies.", "problem": "Consider a single-species fish stock harvested in discrete time under environmental stochasticity. Let $x_t$ denote the biomass at time $t$, $h_t$ the harvest at time $t$, and $s_t$ the escapement left after harvest at time $t$, with $s_t = x_t - h_t$ and the feasibility constraint $0 \\le s_t \\le x_t$. The stock dynamics follow a density-dependent logistic growth with multiplicative environmental noise:\n$$x_{t+1} = \\Big(s_t + r s_t \\big(1 - \\tfrac{s_t}{K}\\big)\\Big)\\, \\exp(\\varepsilon_t),$$\nwhere $r > 0$ is the intrinsic growth rate, $K > 0$ is the carrying capacity, and $\\varepsilon_t \\sim \\mathcal{N}(\\mu, \\sigma^2)$ is an independent and identically distributed environmental shock with $\\mu = -\\tfrac{1}{2}\\sigma^2$ so that $\\mathbb{E}[\\exp(\\varepsilon_t)] = 1$. The harvester is risk-averse with period utility $u(h_t) = \\sqrt{h_t}$ and discounts the future with discount factor $\\beta \\in (0,1)$. The management problem is to choose an escapement rule that maximizes expected discounted utility:\n$$\\max_{\\{s_t\\}} \\ \\mathbb{E}\\Bigg[\\sum_{t=0}^{\\infty} \\beta^t\\, u(h_t)\\Bigg] \\quad \\text{subject to} \\quad h_t = x_t - s_t,\\ 0 \\le s_t \\le x_t,$$\nand the stock dynamics above.\n\nFormulate this as a stationary Markov decision process and solve it by value iteration (Dynamic Programming (DP)) on a uniform grid of stock sizes, using the Bellman equation:\n$$V(x) = \\max_{0 \\le s \\le x} \\left\\{ u(x - s) + \\beta\\, \\mathbb{E}_{\\varepsilon}\\left[V\\Big(\\big(s + r s (1 - s/K)\\big)\\, \\exp(\\varepsilon)\\Big)\\right] \\right\\}.$$\nApproximate the expectation with Gauss–Hermite quadrature with $n$ nodes and approximate the continuation value by linear interpolation on the stock grid. Compute the stationary optimal escapement rule $s^{\\star}(x)$ and summarize it by an estimated optimal constant escapement target $\\hat{s}^{\\star}$ defined as the median of $s^{\\star}(x)$ over high-stock states.\n\nUse the following parameterization and numerical specifications for all computations:\n- Biological and economic parameters: $r = 0.6$, $K = 100$, $\\beta = 0.95$, $u(h) = \\sqrt{h}$.\n- Shock distribution: $\\varepsilon \\sim \\mathcal{N}(\\mu, \\sigma^2)$ with $\\mu = -\\tfrac{1}{2}\\sigma^2$ and the variance $\\sigma^2$ specified in the test suite.\n- State grid: $N_x = 301$ uniformly spaced points on $[0, X_{\\max}]$ with $X_{\\max} = 200$.\n- Action grid: the escapement grid equals the state grid.\n- Expectation approximation: Gauss–Hermite quadrature with $n = 15$ nodes.\n- Value iteration stopping criterion: $\\|V^{(k+1)} - V^{(k)}\\|_{\\infty} < 10^{-8}$ or a hard cap of $2000$ iterations, whichever occurs first.\n- Interpolation: linear interpolation of the value function on the state grid; for out-of-grid next states, clamp to the nearest endpoint of the grid.\n\nTest suite. Solve the problem for the following environmental standard deviations (all values are in plain decimals, not percentages):\n- Case A: $\\sigma = 0.0$ (deterministic boundary case).\n- Case B: $\\sigma = 0.1$ (low variance).\n- Case C: $\\sigma = 0.3$ (moderate variance).\n- Case D: $\\sigma = 0.6$ (high variance).\n\nFor each case, compute the stationary optimal escapement rule $s^{\\star}(x)$ and report a single scalar summary $\\hat{s}^{\\star}$ defined as the median of $s^{\\star}(x)$ over all states with $x \\ge K$. Your program should produce a single line of output containing the four summaries, ordered [Case A, Case B, Case C, Case D], as a comma-separated list enclosed in square brackets, with each number rounded to three decimal places (unitless biomass). For example, the output format must be like:\n`[12.345,67.890,23.456,78.901]`.", "solution": "The problem statement is subjected to validation.\n\n**Step 1: Extract Givens**\n- **Population Dynamics:**\n  - State variable: $x_t$ (biomass at time $t$).\n  - Control variable: $s_t$ (escapement at time $t$).\n  - Harvest: $h_t = x_t - s_t$.\n  - State transition (stock-recruitment): $x_{t+1} = G(s_t, \\varepsilon_t) = \\Big(s_t + r s_t \\big(1 - \\tfrac{s_t}{K}\\big)\\Big)\\, \\exp(\\varepsilon_t)$.\n  - Constraint: $0 \\le s_t \\le x_t$.\n- **Economic Model:**\n  - Period utility function: $u(h_t) = \\sqrt{h_t}$.\n  - Discount factor: $\\beta \\in (0,1)$.\n  - Objective: Maximize $\\mathbb{E}\\Bigg[\\sum_{t=0}^{\\infty} \\beta^t\\, u(h_t)\\Bigg]$.\n- **Stochastic Shock:**\n  - $\\varepsilon_t$ are i.i.d. draws from $\\mathcal{N}(\\mu, \\sigma^2)$.\n  - Mean specification: $\\mu = -\\tfrac{1}{2}\\sigma^2$, which ensures $\\mathbb{E}[\\exp(\\varepsilon_t)] = 1$.\n- **Parameters:**\n  - Intrinsic growth rate: $r = 0.6$.\n  - Carrying capacity: $K = 100$.\n  - Discount factor: $\\beta = 0.95$.\n- **Numerical Method: Dynamic Programming**\n  - Bellman Equation: $V(x) = \\max_{0 \\le s \\le x} \\left\\{ u(x - s) + \\beta\\, \\mathbb{E}_{\\varepsilon}\\left[V\\big(G(s, \\varepsilon)\\big)\\right] \\right\\}$.\n  - State grid: $N_x = 301$ points, uniformly spaced on $[0, X_{\\max}]$, with $X_{\\max} = 200$.\n  - Action grid: Identical to the state grid.\n  - Expectation approximation: Gauss–Hermite quadrature with $n = 15$ nodes.\n  - Value function approximation: Linear interpolation on the state grid. Out-of-grid values are clamped to the nearest boundary value.\n  - Value iteration convergence: $\\|V^{(k+1)} - V^{(k)}\\|_{\\infty} < 10^{-8}$ or $2000$ iterations.\n- **Test Cases:**\n  - Environmental standard deviation $\\sigma$ values: $0.0$, $0.1$, $0.3$, $0.6$.\n- **Output Requirement:**\n  - For each $\\sigma$, compute the median of the optimal escapement policy $s^{\\star}(x)$ over states $x \\ge K$. Let this be $\\hat{s}^{\\star}$.\n  - Report the four $\\hat{s}^{\\star}$ values as a comma-separated list in brackets, rounded to three decimal places.\n\n**Step 2: Validate Using Extracted Givens**\nThe problem is a standard, well-formulated stochastic dynamic programming problem from the field of bioeconomics and renewable resource management.\n\n- **Scientific Grounding:** The model is based on established principles. The discrete-time logistic growth function is a canonical model of density-dependent population dynamics. The inclusion of multiplicative, log-normally distributed noise is a standard method for representing environmental stochasticity. The objective of maximizing the expected present value of utility from harvest is the cornerstone of resource economics. All components are scientifically sound.\n- **Well-Posedness:** The problem is well-posed. For a discounted, infinite-horizon problem with a bounded return function (which is true here, as the state space is effectively bounded by the grid and harvest cannot exceed the maximum stock), the Bellman operator is a contraction mapping. Standard theorems guarantee the existence of a unique value function $V(x)$ and convergence of the value iteration algorithm to it.\n- **Completeness and Consistency:** The problem is self-contained. All model parameters, functional forms, and numerical specifications are provided unambiguously. There are no contradictions in the setup.\n\n**Step 3: Verdict and Action**\nThe problem is valid. We proceed to its solution.\n\n**Solution Methodology**\n\nThe problem is to find an optimal stationary escapement policy, $s^{\\star}(x)$, that maximizes the expected sum of discounted utilities. This is a classic Markov decision process, which we solve using value function iteration as specified. The core of the method is the recursive Bellman equation:\n$$V(x) = \\max_{0 \\le s \\le x} \\left\\{ \\sqrt{x - s} + \\beta\\, \\mathbb{E}_{\\varepsilon}\\left[V\\left(G(s, \\varepsilon)\\right)\\right] \\right\\}$$\nHere, $V(x)$ is the maximum attainable value starting with stock $x$, and $G(s, \\varepsilon) = (s + r s (1 - s/K)) \\exp(\\varepsilon)$ is the stock in the next period.\n\nSince the state space $x \\in [0, \\infty)$ is continuous, we cannot solve this equation analytically. We must resort to numerical approximation on a finite grid.\n\n1.  **Discretization:** The continuous state variable $x$ is discretized into a uniform grid of $N_x = 301$ points from $x=0$ to $x=X_{\\max}=200$. The set of possible actions (escapement levels, $s$) is taken to be the same grid, with the additional constraint that for a given state $x$, only actions $s \\le x$ are feasible.\n\n2.  **Expectation Approximation:** The expectation over the stochastic shock $\\varepsilon$ is approximated using Gauss-Hermite quadrature. The shock $\\varepsilon$ follows a normal distribution $\\mathcal{N}(-\\sigma^2/2, \\sigma^2)$. We can express $\\varepsilon = \\mu + \\sigma Z$, where $Z \\sim \\mathcal{N}(0,1)$. The expectation becomes:\n    $$\\mathbb{E}_{\\varepsilon}[V(G(s, \\varepsilon))] = \\mathbb{E}_{Z}\\left[V\\left(G(s, -\\tfrac{1}{2}\\sigma^2 + \\sigma Z)\\right)\\right]$$\n    This expectation is approximated by a weighted sum over $n=15$ quadrature nodes:\n    $$\\mathbb{E}_{Z}[f(Z)] \\approx \\sum_{i=1}^{n} \\tilde{w}_i f(\\tilde{z}_i)$$\n    where $\\tilde{z}_i$ and $\\tilde{w}_i$ are the nodes and weights for the standard normal distribution, derived from the standard Gauss-Hermite quadrature nodes $z_i$ and weights $w_i$ (for weight function $e^{-z^2}$) by the transformation $\\tilde{z}_i = \\sqrt{2}z_i$ and $\\tilde{w}_i = w_i/\\sqrt{\\pi}$.\n\n3.  **Value Function Interpolation:** During iteration, the next-period stock $G(s, \\varepsilon)$ will generally not fall on a grid point. We must therefore approximate $V(G(s, \\varepsilon))$ from the values on the grid. As specified, we use linear interpolation. For any value $x'$ falling between grid points $x_j$ and $x_{j+1}$, we approximate $V(x')$ as:\n    $$V(x') \\approx V(x_j) + \\frac{V(x_{j+1}) - V(x_j)}{x_{j+1} - x_j} (x' - x_j)$$\n    For values outside the grid $[0, X_{\\max}]$, the value is clamped to the value at the nearest endpoint, i.e., $V(x') = V(0)$ for $x' < 0$ and $V(x') = V(X_{\\max})$ for $x' > X_{\\max}$.\n\n4.  **Value Iteration Algorithm:** We initialize the value function, typically $V^{(0)}(x) = 0$ for all $x$ on the grid. Then, we iterate the Bellman equation:\n    $$V^{(k+1)}(x_i) = \\max_{s_j \\in \\text{grid}, s_j \\le x_i} \\left\\{ \\sqrt{x_i - s_j} + \\beta \\sum_{l=1}^{n} \\tilde{w}_l V^{(k)}_{\\text{interp}}\\left(G(s_j, \\varepsilon_l)\\right) \\right\\}$$\n    for each state $x_i$ on the grid. Here, $V^{(k)}_{\\text{interp}}$ denotes the function that interpolates the vector of values $V^{(k)}$. In each step, we also store the escapement $s_j$ that achieves the maximum for each $x_i$; this defines the policy at iteration $k+1$, $s^{(k+1)}(x_i)$. The process continues until the difference between successive value functions is negligible, i.e., $\\|V^{(k+1)} - V^{(k)}\\|_{\\infty} < 10^{-8}$.\n\n5.  **Derivation of Final Answer:** Upon convergence, the final policy, $s^{\\star}(x)$, is obtained. The required summary statistic, $\\hat{s}^{\\star}$, is the median of this policy function evaluated over all grid states for which $x \\ge K$. This provides a single-number summary of the policy's precautionary level, particularly for a well-stocked fishery. The procedure is repeated for each specified value of $\\sigma$. The results are then formatted as requested.", "answer": "```python\nimport numpy as np\nfrom scipy import interpolate\n\ndef solve():\n    \"\"\"\n    Solves a stochastic dynamic programming problem for optimal fishery management\n    using value iteration for different levels of environmental stochasticity.\n    \"\"\"\n    #\n    # --- Model and Numerical Parameters ---\n    #\n    r = 0.6          # Intrinsic growth rate\n    K = 100.0        # Carrying capacity\n    beta = 0.95      # Discount factor\n    \n    Nx = 301         # Number of state grid points\n    X_max = 200.0    # Maximum stock level in the grid\n    n_quad = 15      # Number of Gauss-Hermite quadrature nodes\n    \n    tol = 1e-8       # Convergence tolerance for value iteration\n    max_iter = 2000  # Maximum number of iterations\n\n    # Test cases for environmental standard deviation\n    sigmas = [0.0, 0.1, 0.3, 0.6]\n\n    final_results = []\n\n    #\n    # --- State and Action Space Discretization ---\n    #\n    # The state grid for stock 'x' and action grid for escapement 's' are identical.\n    x_grid = np.linspace(0, X_max, Nx)\n\n    #\n    # --- Gauss-Hermite Quadrature Setup ---\n    #\n    # Get standard nodes and weights for integral with weight func exp(-x^2)\n    nodes_h, weights_h = np.polynomial.hermite.hermgauss(n_quad)\n    # Transform for standard normal distribution N(0,1) with PDF (1/sqrt(2pi))exp(-x^2/2)\n    quad_nodes_std_norm = np.sqrt(2) * nodes_h\n    quad_weights_std_norm = weights_h / np.sqrt(np.pi)\n\n    #\n    # --- Main Loop over Test Cases ---\n    #\n    for sigma in sigmas:\n        #\n        # --- Pre-calculate shock multipliers ---\n        #\n        # The shock is eps ~ N(mu, sigma^2) with mu = -0.5*sigma^2\n        # The multiplicative factor on growth is exp(eps). We pre-calculate\n        # this for each quadrature node.\n        mu_eps = -0.5 * sigma**2\n        exp_eps_nodes = np.exp(mu_eps + sigma * quad_nodes_std_norm)\n        \n        #\n        # --- Value Iteration Initialization ---\n        #\n        V = np.zeros(Nx)  # Initial guess for the value function\n        policy = np.zeros(Nx) # To store the optimal escapement policy\n\n        for k in range(max_iter):\n            V_old = V.copy()\n\n            # Create an interpolant for the current value function.\n            # This is faster than calling np.interp repeatedly inside the loop.\n            # 'bounds_error=False' and 'fill_value=(V_old[0], V_old[-1])'\n            # ensures clamping to the grid endpoints.\n            V_interp_func = interpolate.interp1d(x_grid, V_old, kind='linear', \n                                                 bounds_error=False, \n                                                 fill_value=(V_old[0], V_old[-1]))\n            \n            # Loop through each state on the grid\n            for i, x in enumerate(x_grid):\n                # Possible escapement levels 's' are those <= current stock 'x'\n                s_options = x_grid[x_grid <= x]\n                if s_options.size == 0:\n                    # This case handles x=0, where only s=0 is possible.\n                    # Value is 0 if starting stock is 0.\n                    V[i] = 0.0\n                    policy[i] = 0.0\n                    continue\n\n                # --- Calculate Q-values for all feasible actions 's' ---\n\n                # 1. Current-period utility: u(h) = sqrt(x-s)\n                harvest = x - s_options\n                # Ensure harvest is non-negative due to float precision\n                harvest[harvest < 0] = 0\n                utility = np.sqrt(harvest)\n\n                # 2. Expected continuation value\n                # Growth function part: g(s) = s + r*s*(1-s/K)\n                g_s = s_options + r * s_options * (1 - s_options / K)\n                \n                # Next-period stock under all shock scenarios\n                # Shape: (num_s_options, num_quad_nodes)\n                next_x_matrix = np.outer(g_s, exp_eps_nodes)\n                \n                # Interpolate the value function at all next-period stock levels\n                V_interp = V_interp_func(next_x_matrix)\n                \n                # Calculate the expectation by taking a weighted sum over shocks\n                # This is a matrix-vector product.\n                expected_V = V_interp @ quad_weights_std_norm\n\n                # Bellman evaluation (Q-values)\n                q_values = utility + beta * expected_V\n                \n                # Find the best action and update V and policy\n                best_q_idx = np.argmax(q_values)\n                V[i] = q_values[best_q_idx]\n                policy[i] = s_options[best_q_idx]\n\n            # --- Check for convergence ---\n            if np.max(np.abs(V - V_old)) < tol:\n                break\n        \n        #\n        # --- Post-processing: Calculate Summary Statistic ---\n        #\n        # Find indices where stock x >= K\n        high_stock_indices = np.where(x_grid >= K)[0]\n        # Get the optimal escapement policy for these high-stock states\n        high_stock_policy = policy[high_stock_indices]\n        # Compute the median as the summary statistic\n        s_hat_star = np.median(high_stock_policy)\n        \n        final_results.append(s_hat_star)\n\n    #\n    # --- Format and Print Final Output ---\n    #\n    formatted_results = [f\"{res:.3f}\" for res in final_results]\n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n```", "id": "2516796"}]}