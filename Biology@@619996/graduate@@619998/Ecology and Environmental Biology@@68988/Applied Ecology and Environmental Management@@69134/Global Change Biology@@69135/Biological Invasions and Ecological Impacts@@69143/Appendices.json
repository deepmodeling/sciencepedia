{"hands_on_practices": [{"introduction": "A fundamental question in invasion biology is whether a small, newly introduced population will establish or go extinct. While simple models predict growth whenever the birth rate exceeds the death rate, reality is often more complex. This practice explores the strong Allee effect, a phenomenon where populations at low densities suffer from reduced fitness, creating a critical threshold for survival. By analyzing this model [@problem_id:2473492], you will develop the skill to identify such thresholds and understand why the initial size of an introduction, or 'propagule pressure', can be the deciding factor between invasion failure and success.", "problem": "A non-native organism is introduced into a novel habitat where mate-finding and cooperative behaviors at low density generate a strong Allee effect. Let the population density be modeled by the ordinary differential equation (ODE)\n$$\n\\dot{N} \\equiv \\frac{dN}{dt} = r\\,N\\left(1-\\frac{N}{K}\\right)\\left(\\frac{N}{A}-1\\right),\n$$\nwith parameters satisfying $r>0$, $K>A>0$, where $r$ is the intrinsic rate of increase, $K$ is the environmental carrying capacity, and $A$ is the Allee threshold density. Assume $N(t)\\ge 0$ for all $t\\ge 0$ and $N(0)=N_{0}$.\n\nUsing only the fundamental definitions of equilibria for an ODE ($\\dot{N}=0$) and local stability determined by the sign of the derivative of the right-hand side with respect to $N$ at each equilibrium, do the following:\n\n- Identify all equilibria and determine their local stability by linearizing the ODE near each equilibrium.\n- From first principles, deduce the invasion criterion that separates trajectories converging to extinction from those establishing and converging to the carrying capacity.\n- Report, as a single closed-form expression in terms of the model parameters $r$, $K$, and $A$, the minimal initial density $N_{\\mathrm{crit}}$ that guarantees establishment rather than extinction.\n\nExpress the final $N_{\\mathrm{crit}}$ in individuals per hectare. No numerical evaluation is required, and no inequalities should appear in your final reported expression.", "solution": "The problem requires an analysis of the ordinary differential equation (ODE) governing population density $N(t)$ with a strong Allee effect. The model is given by:\n$$\n\\frac{dN}{dt} = r\\,N\\left(1-\\frac{N}{K}\\right)\\left(\\frac{N}{A}-1\\right)\n$$\nwhere $N(t) \\ge 0$ for all $t \\ge 0$, and the parameters satisfy $r>0$ and $K>A>0$.\n\nFirst, we must validate the problem statement.\n**Step 1: Extract Givens**\n-   The governing ODE is $\\frac{dN}{dt} = r\\,N\\left(1-\\frac{N}{K}\\right)\\left(\\frac{N}{A}-1\\right)$.\n-   Parameters are the intrinsic rate of increase $r>0$, the carrying capacity $K$, and the Allee threshold $A$. They are constrained by $K>A>0$.\n-   The initial condition is $N(0)=N_0$ and the population density is non-negative, $N(t) \\ge 0$.\n-   The task is to find all equilibria, determine their local stability via linearization, deduce the criterion for population establishment, and find the minimal initial density $N_{\\mathrm{crit}}$ for said establishment.\n\n**Step 2: Validate Using Extracted Givens**\n-   **Scientific Grounding:** The model is a standard and well-established representation of population dynamics subject to a strong Allee effect, combining logistic growth with a threshold term. It is a fundamental model in theoretical ecology. The problem is scientifically sound.\n-   **Well-Posedness:** The problem is a well-posed initial value problem for a first-order autonomous ODE. The right-hand side is a polynomial, guaranteeing existence and uniqueness of solutions. The question is unambiguous and seeks a mathematically derivable result.\n-   **Objectivity and Completeness:** The problem is stated in precise mathematical terms, free of subjectivity. All necessary parameters and constraints ($r, K, A$, and $K>A>0$) are provided to perform the required analysis. The reference to 'individuals per hectare' simply specifies the physical units of the density variable $N$ and its associated parameters $A$ and $K$, which is consistent and does not introduce a flaw.\n\n**Step 3: Verdict and Action**\nThe problem is valid. It is a standard exercise in the stability analysis of a one-dimensional dynamical system. We proceed with the solution.\n\nLet the right-hand side of the ODE be denoted by $f(N)$:\n$$\nf(N) = r\\,N\\left(1-\\frac{N}{K}\\right)\\left(\\frac{N}{A}-1\\right)\n$$\nPer the problem's instructions, we must first identify the equilibria and then determine their stability.\n\n**Identification of Equilibria**\nThe equilibrium points, denoted by $N^*$, are the values of $N$ for which the rate of change of population density is zero. This is defined by the condition $\\frac{dN}{dt} = f(N^*) = 0$:\n$$\nr\\,N^*\\left(1-\\frac{N^*}{K}\\right)\\left(\\frac{N^*}{A}-1\\right) = 0\n$$\nSince $r > 0$, the solutions are found by setting each factor containing $N^*$ to zero:\n$1$. $N^* = 0$\n$2$. $1 - \\frac{N^*}{K} = 0 \\implies N^* = K$\n$3$. $\\frac{N^*}{A} - 1 = 0 \\implies N^* = A$\nThus, there are three equilibrium points for the system: $N_1^* = 0$, $N_2^* = A$, and $N_3^* = K$.\n\n**Stability Analysis by Linearization**\nTo determine the local stability of each equilibrium, we must compute the derivative of $f(N)$ with respect to $N$, which is the Jacobian of the $1$-dimensional system.\n$$\nf(N) = \\frac{r}{AK}N(K-N)(N-A) = \\frac{r}{AK}(-N^3 + (A+K)N^2 - AKN)\n$$\nThe derivative, $f'(N) = \\frac{df}{dN}$, is:\n$$\nf'(N) = \\frac{r}{AK}(-3N^2 + 2(A+K)N - AK)\n$$\nThe stability of an equilibrium $N^*$ is determined by the sign of $f'(N^*)$:\n-   If $f'(N^*)  0$, the equilibrium is locally stable.\n-   If $f'(N^*)  0$, the equilibrium is locally unstable.\n\nWe evaluate $f'(N^*)$ at each of the three equilibria.\n\n$1$. **Equilibrium at $N_1^* = 0$:**\n$$\nf'(0) = \\frac{r}{AK}(-3(0)^2 + 2(A+K)(0) - AK) = \\frac{r}{AK}(-AK) = -r\n$$\nSince $r > 0$, we have $f'(0)  0$. Therefore, the equilibrium $N^* = 0$ is **stable**. This represents population extinction.\n\n$2$. **Equilibrium at $N_2^* = A$:**\n$$\nf'(A) = \\frac{r}{AK}(-3A^2 + 2(A+K)A - AK) = \\frac{r}{AK}(-3A^2 + 2A^2 + 2AK - AK)\n$$\n$$\nf'(A) = \\frac{r}{AK}(-A^2 + AK) = \\frac{r}{AK}A(K-A) = \\frac{r}{K}(K-A)\n$$\nGiven the constraint $K > A > 0$ and $r>0$, the term $(K-A)$ is positive. Therefore, $f'(A) > 0$. The equilibrium $N^* = A$ is **unstable**. This is the Allee threshold.\n\n$3$. **Equilibrium at $N_3^* = K$:**\n$$\nf'(K) = \\frac{r}{AK}(-3K^2 + 2(A+K)K - AK) = \\frac{r}{AK}(-3K^2 + 2K^2 + 2AK - AK)\n$$\n$$\nf'(K) = \\frac{r}{AK}(-K^2 + AK) = \\frac{r}{AK}K(A-K) = \\frac{r}{A}(A-K)\n$$\nGiven $K > A > 0$ and $r>0$, the term $(A-K)$ is negative. Therefore, $f'(K)  0$. The equilibrium $N^* = K$ is **stable**. This represents population establishment at the carrying capacity.\n\n**Invasion Criterion and Critical Density $N_{\\mathrm{crit}}$**\nThe stability analysis reveals the dynamics on the phase line $N \\ge 0$. The system has two stable equilibria, at $N=0$ (extinction) and $N=K$ (establishment), separated by an unstable equilibrium at $N=A$. This unstable equilibrium acts as a separatrix, partitioning the state space into two basins of attraction.\n-   For an initial population density $N_0$ such that $0 \\le N_0  A$, the population trajectory will converge to the stable equilibrium at $N=0$. This leads to extinction.\n-   For an initial population density $N_0$ such that $N_0  A$, the population trajectory will converge to the stable equilibrium at $N=K$. This constitutes establishment.\n-   If $N_0 = A$, the population remains at the unstable equilibrium, but any infinitesimal perturbation will drive it to either $0$ or $K$.\n\nThe problem asks for the minimal initial density $N_{\\mathrm{crit}}$ that guarantees establishment. \"Establishment\" is defined as convergence to the carrying capacity $K$. This occurs if and only if the initial density $N_0$ is greater than the Allee threshold $A$. The threshold value itself is the boundary that must be crossed. Therefore, the critical density is the value of the unstable equilibrium.\n$$\nN_{\\mathrm{crit}} = A\n$$\nThis is the minimal density threshold; any initial population density exceeding this value will lead to successful establishment. The expression is given in terms of the model parameters as required.", "answer": "$$\n\\boxed{A}\n$$", "id": "2473492"}, {"introduction": "Successful invasions often hinge on human transport networks that move species over vast distances. To understand and manage this, we can model the system as a network of connected locations, like ports or airports. This exercise uses the power of linear algebra and network theory to identify the most critical nodes for invasion spread [@problem_id:2473504]. Mastering this approach will allow you to quantify the vulnerability of a network and develop data-driven strategies for surveillance and control, such as prioritizing inspections to most effectively reduce system-wide invasion risk.", "problem": "You are given a directed, weighted network of maritime ports where each node represents a port and each edge weight represents the mean number of ship arrivals per time unit from one port to another. At low invader density, the spread of a non-native species transported by ships can be approximated by a linear, density-independent dispersal-establishment process. Assume that in each time step the expected number of viable colonists transported per ship and that successfully establish is captured by a single scalar factor, and that the resulting dynamics can be written as a homogeneous linear system.\n\nFundamental base:\n- Low-density invasion dynamics near the invasion-free state can be approximated by the linear system $x_{t+1} = B x_t$, where $x_t$ is the vector of expected propagule pressure across nodes at time $t$, and $B$ is a nonnegative matrix encoding expected successful movements and establishments.\n- The matrix $B$ is constructed as $B = \\beta A$, where $A$ is the weighted adjacency matrix of ship arrivals and $\\beta$ is a nonnegative scalar representing the product of per-arrival propagule production and establishment probability per propagule.\n- For a nonnegative, irreducible matrix $B$, the Perron–Frobenius theorem guarantees a unique largest eigenvalue (the spectral radius) $\\rho(B)$ with a strictly positive right eigenvector $v$.\n- Invasion can grow if $\\rho(B) > 1$, while $\\rho(B) \\le 1$ indicates no asymptotic growth of the linearized system.\n\nDefinitions for this task:\n- Define invasion-centrality of node $i$ as the $i$-th component of the dominant right eigenvector $v$ of $B$, normalized so that the entries sum to $1$, i.e., $\\sum_i v_i = 1$ and $v_i \\ge 0$.\n- An inspection applied to node $i$ reduces all of its incoming contributions by a fixed effectiveness factor $c \\in (0,1)$, implemented as multiplying row $i$ of $B$ by $(1-c)$.\n\nYour tasks for each test case are:\n1. Compute the invasion-centrality vector $v$ of $B = \\beta A$, normalized to sum to $1$. Round each component to four decimal places.\n2. Starting from no inspections, iteratively select nodes to inspect to reduce the invasion risk (quantified by the spectral radius $\\rho(B)$). At each iteration, among all uninspected nodes, choose the single node whose inspection (row scaling by $(1-c)$) produces the largest decrease in $\\rho(B)$ when applied to the current matrix. Break ties by selecting the smallest node index. Continue until either $\\rho(B) \\le 1$ or all nodes have been inspected. If $\\rho(B) > 1$ even after inspecting all nodes, stop and return the full set of nodes.\n3. Use zero-based indexing for node indices in the inspection list.\n\nNumerical rules:\n- All computations are dimensionless in this problem; no physical units are required.\n- Round invasion-centrality components to four decimal places using standard rounding to the nearest value at the fourth decimal place.\n\nInput (embedded test suite):\nFor each test case, you are given the number of nodes $n$, the adjacency matrix $A \\in \\mathbb{R}_{\\ge 0}^{n \\times n}$, the scalar $\\beta \\ge 0$, and the inspection effectiveness $c \\in (0,1)$. The threshold for controlling invasion growth is $\\rho(B) \\le 1$.\n\nTest cases:\n- Test case $1$:\n  - $n = 4$\n  - $A = \\begin{bmatrix}\n  0  12  1  0\\\\\n  2  0  6  1\\\\\n  1  0  0  9\\\\\n  0  4  0  0\n  \\end{bmatrix}$\n  - $\\beta = 0.12$\n  - $c = 0.5$\n- Test case $2$:\n  - $n = 5$\n  - $A = \\begin{bmatrix}\n  0  2  0  0  1\\\\\n  1  0  1  0  0\\\\\n  0  1  0  2  0\\\\\n  0  0  1  0  1\\\\\n  1  0  0  1  0\n  \\end{bmatrix}$\n  - $\\beta = 0.1$\n  - $c = 0.4$\n- Test case $3$:\n  - $n = 4$\n  - $A = \\begin{bmatrix}\n  0  15  3  2\\\\\n  4  0  8  1\\\\\n  2  2  0  12\\\\\n  1  6  1  0\n  \\end{bmatrix}$\n  - $\\beta = 0.2$\n  - $c = 0.1$\n\nRequired final output format:\n- Your program should produce a single line of output containing the results for the three test cases as a comma-separated list enclosed in square brackets.\n- For each test case, output a list of two elements: the invasion-centrality vector (a list of floats rounded to four decimals) and the list of inspected node indices (a list of integers in zero-based indexing).\n- The final output should therefore have the structure:\n  - $[[\\text{cent}_1,\\ \\text{inspect}_1],\\ [\\text{cent}_2,\\ \\text{inspect}_2],\\ [\\text{cent}_3,\\ \\text{inspect}_3]]$\n  where each $\\text{cent}_k$ is a list of floats and each $\\text{inspect}_k$ is a list of integers.", "solution": "The problem statement is parsed and validated. It is found to be scientifically sound, well-posed, and objective. It represents a standard application of linear algebra, specifically the Perron-Frobenius theory for non-negative matrices, to the domain of theoretical ecology for modeling biological invasions. The problem is free of contradictions or ambiguities and provides all necessary data for a unique, computable solution.\n\nThe core of the problem lies in the analysis of the discrete-time linear dynamical system given by the matrix equation:\n$$\nx_{t+1} = B x_t\n$$\nwhere `$x_t \\in \\mathbb{R}^n$` is a vector representing the propagule pressure at each of the `$n$` nodes (ports) at time `$t$`, and `$B \\in \\mathbb{R}^{n \\times n}$` is a non-negative matrix that describes the expected dispersal and establishment of invaders between nodes in one time step.\n\nThe matrix `$B$` is constructed as `$B = \\beta A$`, where `$A$` is the weighted adjacency matrix of the transport network where `$A_{ij}$` represents the flow from port `$j$` to port `$i$`. The scalar `$\\beta \\ge 0$` encapsulates the biological parameters of per-ship propagule production and establishment probability.\n\nThe long-term behavior of this system is governed by the spectral radius `$\\rho(B)$` of the matrix `$B$`, which is its largest eigenvalue in magnitude. For a non-negative, irreducible matrix `$B$`, the Perron-Frobenius theorem guarantees that `$\\rho(B)$` is a simple, real, and positive eigenvalue. The system exhibits asymptotic growth if and only if `$\\rho(B) > 1$`. The control objective is to reduce the spectral radius to `$\\rho(B) \\le 1$`.\n\nThe solution requires two primary tasks for each test case.\n\nFirst, the computation of the invasion-centrality vector. This vector is defined as the dominant right eigenvector `$v$` of the initial matrix `$B$`, corresponding to the eigenvalue `$\\rho(B)$`. This eigenvector represents the stable distribution of relative propagule pressure across the network after many time steps, assuming the population is growing. The eigenvector `$v$` is normalized such that its components sum to `$1$` (`$\\sum_i v_i = 1$`). The components are then rounded to four decimal places as required. The computation is performed using standard numerical methods for finding eigenvalues and eigenvectors.\n\nSecond, the determination of an optimal inspection strategy. This is an iterative, greedy optimization procedure. An inspection at node `$i$` with effectiveness `$c \\in (0,1)$` is modeled by multiplying the `$i$`-th row of the current system matrix by a factor of `$(1-c)$`. In each step, we identify which of the currently uninspected nodes, if inspected, would cause the largest decrease in the spectral radius of the matrix. This \"best\" node is then added to our sequence of inspected nodes, and the system matrix is permanently updated. The process is repeated with the new, modified matrix. The procedure terminates when either the spectral radius is reduced to `$1$` or less, or when all nodes in the network have been inspected. If multiple nodes provide the same maximal reduction in `$\\rho(B)$`, the tie is broken by choosing the node with the smallest index.\n\nThe overall algorithm for each test case is as follows:\n1.  Construct the initial matrix `$B = \\beta A$`.\n2.  Compute the eigenvalues and eigenvectors of `$B$`. The spectral radius `$\\rho(B)$` is the maximum of the absolute values of the eigenvalues.\n3.  Find the right eigenvector `$v$` corresponding to `$\\rho(B)$`. Normalize it by dividing by the sum of its components. Round the components to four decimal places to obtain the invasion-centrality vector.\n4.  Initialize the current matrix `$B_{\\text{current}} = B$`, a list of inspected nodes as empty, and a list of all nodes as available for inspection.\n5.  Iterate while `$\\rho(B_{\\text{current}}) > 1$` and there are still uninspected nodes:\n    a. For each available node `$j$`, create a temporary matrix by scaling row `$j$` of `$B_{\\text{current}}$` by `$(1-c)$` and calculate its spectral radius `$\\rho_{\\text{temp}, j}$`.\n    b. Determine the node `$j^*$` that maximizes the reduction, `$\\rho(B_{\\text{current}}) - \\rho_{\\text{temp}, j}$`. Adhere to the tie-breaking rule by selecting the smallest index.\n    c. Add `$j^*$` to the list of inspected nodes. Remove it from the list of available nodes.\n    d. Update `$B_{\\text{current}}$` by applying the inspection for node `$j^*$` permanently. Re-calculate `$\\rho(B_{\\text{current}})$` for the next iteration.\n6.  The process concludes, and the final list of inspected nodes is recorded.\n7.  The final result for the test case is a list containing two elements: the invasion-centrality vector and the ordered list of inspected nodes.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n# from scipy import ...\n\ndef solve():\n    \"\"\"\n    Main function to orchestrate the solving of all test cases.\n    \"\"\"\n    # Define the test cases from the problem statement.\n    test_cases = [\n        {\n            \"n\": 4,\n            \"A\": np.array([\n                [0, 12, 1, 0],\n                [2, 0, 6, 1],\n                [1, 0, 0, 9],\n                [0, 4, 0, 0]\n            ]),\n            \"beta\": 0.12,\n            \"c\": 0.5\n        },\n        {\n            \"n\": 5,\n            \"A\": np.array([\n                [0, 2, 0, 0, 1],\n                [1, 0, 1, 0, 0],\n                [0, 1, 0, 2, 0],\n                [0, 0, 1, 0, 1],\n                [1, 0, 0, 1, 0]\n            ]),\n            \"beta\": 0.1,\n            \"c\": 0.4\n        },\n        {\n            \"n\": 4,\n            \"A\": np.array([\n                [0, 15, 3, 2],\n                [4, 0, 8, 1],\n                [2, 2, 0, 12],\n                [1, 6, 1, 0]\n            ]),\n            \"beta\": 0.2,\n            \"c\": 0.1\n        }\n    ]\n\n    results = []\n    for case in test_cases:\n        result = process_case(case[\"n\"], case[\"A\"], case[\"beta\"], case[\"c\"])\n        results.append(result)\n\n    # Final print statement in the exact required format.\n    print(results)\n\n\ndef process_case(n, A, beta, c):\n    \"\"\"\n    Solves a single test case for the ecological invasion problem.\n    \"\"\"\n    B = beta * A.astype(float)\n\n    # Task 1: Compute invasion-centrality\n    eigenvalues, eigenvectors = np.linalg.eig(B)\n    dom_idx = np.argmax(np.abs(eigenvalues))\n    \n    # The dominant eigenvector v (must be real for a non-negative matrix)\n    v = eigenvectors[:, dom_idx].real\n    \n    # Ensure all components are non-negative, as per Perron-Frobenius\n    if np.sum(v)  0:\n        v = -v\n        \n    # Normalize so that components sum to 1\n    v_normalized = v / np.sum(v)\n    centrality = np.round(v_normalized, 4).tolist()\n\n    # Task 2: Iteratively select nodes for inspection\n    inspected_nodes = []\n    available_nodes = list(range(n))\n    B_current = B.copy()\n\n    # Initial spectral radius\n    rho_current = np.max(np.abs(eigenvalues)).real\n\n    while rho_current > 1 and available_nodes:\n        best_node_to_inspect = -1\n        max_rho_reduction = -np.inf\n        \n        # Iterate through available nodes to find the one that gives the max reduction\n        for candidate_node in available_nodes:\n            B_temp = B_current.copy()\n            B_temp[candidate_node, :] *= (1 - c)\n            \n            rho_temp = np.max(np.abs(np.linalg.eigvals(B_temp))).real\n            reduction = rho_current - rho_temp\n            \n            # Tie-breaking: because we iterate through sorted available_nodes,\n            # we only need to update when a strictly greater reduction is found.\n            # The first node to achieve the max reduction will be the one with the\n            # smallest index among those that tie.\n            if reduction > max_rho_reduction:\n                max_rho_reduction = reduction\n                best_node_to_inspect = candidate_node\n\n        # This condition should not be met if rho_current > 1 and c > 0\n        if best_node_to_inspect == -1:\n            break\n            \n        # Apply the best inspection for this iteration\n        inspected_nodes.append(best_node_to_inspect)\n        available_nodes.remove(best_node_to_inspect)\n        \n        B_current[best_node_to_inspect, :] *= (1 - c)\n        \n        # It is more numerically stable to re-calculate rho from the new matrix\n        rho_current = np.max(np.abs(np.linalg.eigvals(B_current))).real\n\n    return [centrality, inspected_nodes]\n\nsolve()\n```", "id": "2473504"}, {"introduction": "Beyond understanding an invader's spread, a crucial task for ecologists is to predict its impact on ecosystem functions. Invasive species can fundamentally alter their new environment by changing nutrient cycling and carbon storage, with long-term consequences. This computational practice guides you through building and analyzing a model of soil biogeochemistry to quantify how an invader's unique traits can change these critical processes [@problem_id:2473478]. This exercise will equip you with the skills to translate field measurements into dynamic projections, forming a basis for assessing the broader ecological consequences of biological invasions.", "problem": "A plant invasion alters detrital inputs and quality. Consider paired invaded and uninvaded plots for which you have measured litter carbon-to-nitrogen ratio, decomposition rate, and litter carbon input. Assume the following fundamental base applies: (i) litter mass loss follows first-order kinetics, meaning the instantaneous carbon loss rate is proportional to the current litter carbon pool; (ii) net nitrogen mineralization at a given time equals the nitrogen released from decomposed litter carbon minus the nitrogen required to support microbial growth, with microbial growth governed by a constant Carbon Use Efficiency (CUE) and a constant microbial biomass carbon-to-nitrogen ratio; (iii) a constant fraction of microbial growth carbon becomes stabilized Soil Organic Carbon (SOC) that decays with first-order kinetics. Assume spatially homogeneous conditions and parameter stationarity over the projection horizon.\n\nDefinitions and symbols to be used by your program:\n- Litter carbon input rate $I_C$ in $\\mathrm{g\\ C\\ m^{-2}\\ yr^{-1}}$.\n- Litter carbon pool $C_L(t)$ in $\\mathrm{g\\ C\\ m^{-2}}$.\n- SOC pool $C_S(t)$ in $\\mathrm{g\\ C\\ m^{-2}}$.\n- Litter decomposition rate constant $k_L$ in $\\mathrm{yr^{-1}}$.\n- SOC decay rate constant $k_S$ in $\\mathrm{yr^{-1}}$.\n- Litter carbon-to-nitrogen ratio $\\mathrm{CN_L}$ in $\\mathrm{g\\ C\\ g^{-1}\\ N}$.\n- Microbial biomass carbon-to-nitrogen ratio $\\mathrm{CN_{mic}}$ in $\\mathrm{g\\ C\\ g^{-1}\\ N}$.\n- Carbon Use Efficiency (CUE) $e$ (dimensionless), the fraction of decomposed carbon incorporated into microbial biomass.\n- Stabilization fraction $s$ (dimensionless), the fraction of microbial growth carbon that becomes stabilized SOC.\n- Time horizon $T$ in $\\mathrm{yr}$.\n\nPrinciples to implement:\n- First-order litter carbon dynamics with constant input: the litter pool evolves from an initial condition $C_L(0)$ under constant $I_C$ and $k_L$.\n- Net nitrogen mineralization flux at time $t$ equals the difference between nitrogen released from decomposed litter and nitrogen demanded by microbial growth, given $e$ and $\\mathrm{CN_{mic}}$.\n- SOC accrues from a fraction $s$ of microbial growth carbon and decays with rate $k_S$.\n- Initial conditions represent a pre-invasion steady state of the uninvaded system at $t=0$: set $C_L(0) = I_C^{\\mathrm{uninv}}/k_L^{\\mathrm{uninv}}$ and $C_S(0) = s\\, e\\, I_C^{\\mathrm{uninv}}/k_S$.\n\nYour program must, for each test case, do the following:\n1. Using the above principles, compute the cumulative net nitrogen mineralization over $[0,T]$ in the invaded plot and in the uninvaded plot, then report the difference $\\Delta M_N = M_N^{\\mathrm{inv}} - M_N^{\\mathrm{uninv}}$ in $\\mathrm{g\\ N\\ m^{-2}}$ over the horizon $[0,T]$.\n2. Using the above principles, compute the SOC pool $C_S(T)$ for the invaded and the uninvaded plots, then report the difference $\\Delta C_S(T) = C_S^{\\mathrm{inv}}(T) - C_S^{\\mathrm{uninv}}(T)$ in $\\mathrm{g\\ C\\ m^{-2}}$.\n3. Express the outputs for each test case as a list with two floating-point numbers $[\\Delta M_N,\\ \\Delta C_S(T)]$. Aggregate all test case results into a single list.\n\nAngle units are not involved. Percentages must be expressed as decimals if needed.\n\nTest suite. Each test case provides the parameters for uninvaded and invaded plots, the microbial and stabilization parameters, and the time horizon $T$. Use the initial condition definition above. The parameter values are:\n- Test case $1$ (nitrogen-fixing invader; higher inputs and faster decay):\n  - Uninvaded: $I_C^{\\mathrm{uninv}} = 400$, $k_L^{\\mathrm{uninv}} = 0.6$, $\\mathrm{CN_L}^{\\mathrm{uninv}} = 60$.\n  - Invaded: $I_C^{\\mathrm{inv}} = 520$, $k_L^{\\mathrm{inv}} = 0.9$, $\\mathrm{CN_L}^{\\mathrm{inv}} = 25$.\n  - Shared: $e = 0.4$, $\\mathrm{CN_{mic}} = 8$, $s = 0.25$, $k_S = 0.03$, $T = 10$.\n- Test case $2$ (woody invader; slower decay and higher $\\mathrm{CN_L}$):\n  - Uninvaded: $I_C^{\\mathrm{uninv}} = 350$, $k_L^{\\mathrm{uninv}} = 0.5$, $\\mathrm{CN_L}^{\\mathrm{uninv}} = 50$.\n  - Invaded: $I_C^{\\mathrm{inv}} = 360$, $k_L^{\\mathrm{inv}} = 0.4$, $\\mathrm{CN_L}^{\\mathrm{inv}} = 120$.\n  - Shared: $e = 0.45$, $\\mathrm{CN_{mic}} = 9$, $s = 0.2$, $k_S = 0.02$, $T = 20$.\n- Test case $3$ (boundary where $k_L^{\\mathrm{inv}} = k_S$ to test degenerate forcing into SOC):\n  - Uninvaded: $I_C^{\\mathrm{uninv}} = 300$, $k_L^{\\mathrm{uninv}} = 0.3$, $\\mathrm{CN_L}^{\\mathrm{uninv}} = 55$.\n  - Invaded: $I_C^{\\mathrm{inv}} = 300$, $k_L^{\\mathrm{inv}} = 0.02$, $\\mathrm{CN_L}^{\\mathrm{inv}} = 40$.\n  - Shared: $e = 0.35$, $\\mathrm{CN_{mic}} = 7$, $s = 0.2$, $k_S = 0.02$, $T = 5$.\n- Test case $4$ (threshold $\\mathrm{CN_L}^{\\mathrm{inv}}$ satisfying zero net mineralization at any time when $e/\\mathrm{CN_{mic}} = 1/\\mathrm{CN_L}^{\\mathrm{inv}}$):\n  - Uninvaded: $I_C^{\\mathrm{uninv}} = 450$, $k_L^{\\mathrm{uninv}} = 0.7$, $\\mathrm{CN_L}^{\\mathrm{uninv}} = 30$.\n  - Invaded: $I_C^{\\mathrm{inv}} = 450$, $k_L^{\\mathrm{inv}} = 0.7$, $\\mathrm{CN_L}^{\\mathrm{inv}} = 20$.\n  - Shared: $e = 0.4$, $\\mathrm{CN_{mic}} = 8$, $s = 0.3$, $k_S = 0.04$, $T = 15$.\n\nFinal output format requirement:\n- Your program should produce a single line of output containing a list of per-test-case results, where each per-test-case result is a two-element list $[\\Delta M_N,\\ \\Delta C_S(T)]$. The numbers must be floats. The overall structure must be a single list printed on one line, for example, $[[x_1,y_1],[x_2,y_2],[x_3,y_3],[x_4,y_4]]$, with no additional text. Both $\\Delta M_N$ and $\\Delta C_S(T)$ must be in their specified units: $\\mathrm{g\\ N\\ m^{-2}}$ for $\\Delta M_N$ over $[0,T]$ and $\\mathrm{g\\ C\\ m^{-2}}$ for $\\Delta C_S(T)$ at time $T$.", "solution": "The problem is scientifically grounded, well-posed, and all necessary parameters and initial conditions are provided. It is therefore valid. The solution proceeds by analytical integration of the governing ordinary differential equations (ODEs).\n\nThe dynamics of the litter carbon pool, $C_L(t)$, and the soil organic carbon (SOC) pool, $C_S(t)$, are described by a system of first-order linear ODEs.\n\nThe ODE for the litter carbon pool is:\n$$\n\\frac{dC_L(t)}{dt} = I_C - k_L C_L(t)\n$$\nwhere $I_C$ is the constant litter carbon input rate and $k_L$ is the first-order decomposition rate constant. The initial condition for both uninvaded and invaded scenarios is the steady-state litter carbon pool of the uninvaded ecosystem, given by $\\frac{dC_L}{dt} = 0$:\n$$\nC_L(0) = \\frac{I_C^{\\mathrm{uninv}}}{k_L^{\\mathrm{uninv}}}\n$$\nThe general solution to this ODE is:\n$$\nC_L(t) = \\left( C_L(0) - \\frac{I_C}{k_L} \\right) e^{-k_L t} + \\frac{I_C}{k_L}\n$$\nFor the uninvaded plot, parameters are constant and the system remains at steady state, thus $C_L^{\\mathrm{uninv}}(t) = C_L(0)$. For the invaded plot, parameters switch to $I_C^{\\mathrm{inv}}$ and $k_L^{\\mathrm{inv}}$ at $t=0$, and $C_L^{\\mathrm{inv}}(t)$ follows the transient solution above with these new parameters and the specified initial condition.\n\nThe instantaneous net nitrogen mineralization rate, $m_N(t)$, is the difference between nitrogen released from decomposing litter and nitrogen assimilated by microbes:\n$$\nm_N(t) = \\frac{k_L C_L(t)}{\\mathrm{CN_L}} - \\frac{e \\cdot k_L C_L(t)}{\\mathrm{CN_{mic}}} = k_L C_L(t) \\left( \\frac{1}{\\mathrm{CN_L}} - \\frac{e}{\\mathrm{CN_{mic}}} \\right)\n$$\nThe cumulative net mineralization over the time horizon $[0, T]$ is $M_N = \\int_0^T m_N(t) dt$. For the uninvaded plot, since $C_L^{\\mathrm{uninv}}(t)$ is constant, this simplifies to:\n$$\nM_N^{\\mathrm{uninv}} = I_C^{\\mathrm{uninv}} \\left( \\frac{1}{\\mathrm{CN_L}^{\\mathrm{uninv}}} - \\frac{e}{\\mathrm{CN_{mic}}} \\right) T\n$$\nFor the invaded plot, we must integrate the full expression for $m_N^{\\mathrm{inv}}(t)$:\n$$\nM_N^{\\mathrm{inv}} = \\left( \\frac{1}{\\mathrm{CN_L}^{\\mathrm{inv}}} - \\frac{e}{\\mathrm{CN_{mic}}} \\right) k_L^{\\mathrm{inv}} \\int_0^T C_L^{\\mathrm{inv}}(t) dt\n$$\nSolving the integral yields:\n$$\nM_N^{\\mathrm{inv}} = \\left( \\frac{1}{\\mathrm{CN_L}^{\\mathrm{inv}}} - \\frac{e}{\\mathrm{CN_{mic}}} \\right) \\left[ \\left( \\frac{I_C^{\\mathrm{uninv}}}{k_L^{\\mathrm{uninv}}} - \\frac{I_C^{\\mathrm{inv}}}{k_L^{\\mathrm{inv}}} \\right) (1 - e^{-k_L^{\\mathrm{inv}} T}) + I_C^{\\mathrm{inv}} T \\right]\n$$\nThe required output is the difference $\\Delta M_N = M_N^{\\mathrm{inv}} - M_N^{\\mathrm{uninv}}$.\n\nThe ODE for the SOC pool is:\n$$\n\\frac{dC_S(t)}{dt} = s \\cdot e \\cdot k_L C_L(t) - k_S C_S(t)\n$$\nwhere $s$ is the stabilization fraction, $e$ is the Carbon Use Efficiency, and $k_S$ is the SOC decay rate constant. The initial condition is the steady-state SOC of the uninvaded system:\n$$\nC_S(0) = \\frac{s e I_C^{\\mathrm{uninv}}}{k_S}\n$$\nThis is a linear first-order ODE with a time-varying forcing term. The solution is found using an integrating factor, $e^{k_S t}$.\nFor the uninvaded plot, the system is at steady state, so $C_S^{\\mathrm{uninv}}(t) = C_S(0)$ for all $t$. Thus, $C_S^{\\mathrm{uninv}}(T) = C_S(0)$.\nFor the invaded plot, we must solve the transient equation. The solution depends on whether $k_L^{\\mathrm{inv}}$ equals $k_S$.\n\nCase 1: $k_L^{\\mathrm{inv}} \\neq k_S$ (non-resonant case). The solution for $C_S^{\\mathrm{inv}}(t)$ is:\n$$\nC_S^{\\mathrm{inv}}(t) = \\frac{s e k_L^{\\mathrm{inv}}}{k_S - k_L^{\\mathrm{inv}}} \\left( C_L(0) - \\frac{I_C^{\\mathrm{inv}}}{k_L^{\\mathrm{inv}}} \\right) (e^{-k_L^{\\mathrm{inv}} t} - e^{-k_S t}) + \\frac{s e I_C^{\\mathrm{inv}}}{k_S} (1 - e^{-k_S t}) + C_S(0) e^{-k_S t}\n$$\nCase 2: $k_L^{\\mathrm{inv}} = k_S$ (resonant case). The solution for $C_S^{\\mathrm{inv}}(t)$ is:\n$$\nC_S^{\\mathrm{inv}}(t) = s e k_L^{\\mathrm{inv}} \\left( C_L(0) - \\frac{I_C^{\\mathrm{inv}}}{k_L^{\\mathrm{inv}}} \\right) t e^{-k_L^{\\mathrm{inv}} t} + \\frac{s e I_C^{\\mathrm{inv}}}{k_S} (1 - e^{-k_S t}) + C_S(0) e^{-k_S t}\n$$\nIn both cases, we evaluate $C_S^{\\mathrm{inv}}(t)$ at $t=T$ and compute the difference $\\Delta C_S(T) = C_S^{\\mathrm{inv}}(T) - C_S^{\\mathrm{uninv}}(T)$.\n\nThe program will implement these derived analytical solutions to compute $[\\Delta M_N, \\Delta C_S(T)]$ for each test case.", "answer": "```python\nimport numpy as np\n\ndef calculate_dynamics_change(params_uninv, params_inv, params_shared):\n    \"\"\"\n    Calculates the change in cumulative N mineralization and final SOC pool\n    due to a plant invasion, based on an analytical model solution.\n\n    Args:\n        params_uninv (tuple): Parameters for the uninvaded plot (I_C, k_L, CN_L).\n        params_inv (tuple): Parameters for the invaded plot (I_C, k_L, CN_L).\n        params_shared (tuple): Shared parameters (e, CN_mic, s, k_S, T).\n\n    Returns:\n        list: A list containing two floats [delta_M_N, delta_C_S_T].\n    \"\"\"\n    I_C_uninv, k_L_uninv, CN_L_uninv = params_uninv\n    I_C_inv, k_L_inv, CN_L_inv = params_inv\n    e, CN_mic, s, k_S, T = params_shared\n\n    # --- Part 1: Calculate change in cumulative Net N Mineralization (Delta M_N) ---\n\n    # For the uninvaded plot, the system is at steady state.\n    # Instantaneous N mineralization rate is constant: m_N = I_C * (1/CN_L - e/CN_mic)\n    f_N_uninv = (1.0 / CN_L_uninv) - (e / CN_mic)\n    M_N_uninv = I_C_uninv * f_N_uninv * T\n\n    # For the invaded plot, the system is in a transient state.\n    # Initial litter C pool is from the uninvaded steady state.\n    C_L0 = I_C_uninv / k_L_uninv\n    f_N_inv = (1.0 / CN_L_inv) - (e / CN_mic)\n\n    # Cumulative N mineralization is F_N * integral(k_L * C_L(t) dt)\n    # The integral of k_L * C_L(t) is equivalent to total C input minus change in C pool\n    # The more direct formula derived in the solution is used here.\n    term_C_L_transient = (C_L0 - I_C_inv / k_L_inv) * (1.0 - np.exp(-k_L_inv * T))\n    M_N_inv = f_N_inv * (term_C_L_transient + I_C_inv * T)\n    \n    delta_M_N = M_N_inv - M_N_uninv\n\n    # --- Part 2: Calculate change in SOC pool at time T (Delta C_S(T)) ---\n\n    # Initial SOC pool is from the uninvaded steady state.\n    C_S0 = s * e * I_C_uninv / k_S\n    C_S_uninv_T = C_S0  # Uninvaded SOC pool remains at steady state.\n\n    # For the invaded plot, we solve the transient ODE for C_S(t)\n    # and evaluate at t = T.\n    if abs(k_L_inv - k_S)  1e-12:  # Resonant case: k_L_inv is equal to k_S\n        term1 = s * e * k_L_inv * (C_L0 - I_C_inv / k_L_inv) * T * np.exp(-k_L_inv * T)\n        term2 = (s * e * I_C_inv / k_S) * (1.0 - np.exp(-k_S * T))\n        term3 = C_S0 * np.exp(-k_S * T)\n        C_S_inv_T = term1 + term2 + term3\n    else:  # Non-resonant case\n        term1_coeff = (s * e * k_L_inv) / (k_S - k_L_inv)\n        term1_dC_L = C_L0 - (I_C_inv / k_L_inv)\n        term1_exp = np.exp(-k_L_inv * T) - np.exp(-k_S * T)\n        term1 = term1_coeff * term1_dC_L * term1_exp\n        \n        term2 = (s * e * I_C_inv / k_S) * (1.0 - np.exp(-k_S * T))\n        term3 = C_S0 * np.exp(-k_S * T)\n        C_S_inv_T = term1 + term2 + term3\n\n    delta_C_S_T = C_S_inv_T - C_S_uninv_T\n\n    return [delta_M_N, delta_C_S_T]\n\ndef solve():\n    \"\"\"\n    Main function to run the test suite and print the results.\n    \"\"\"\n    test_cases = [\n        # Test case 1\n        {\n            \"uninv\": (400, 0.6, 60),\n            \"inv\": (520, 0.9, 25),\n            \"shared\": (0.4, 8, 0.25, 0.03, 10),\n        },\n        # Test case 2\n        {\n            \"uninv\": (350, 0.5, 50),\n            \"inv\": (360, 0.4, 120),\n            \"shared\": (0.45, 9, 0.2, 0.02, 20),\n        },\n        # Test case 3\n        {\n            \"uninv\": (300, 0.3, 55),\n            \"inv\": (300, 0.02, 40),\n            \"shared\": (0.35, 7, 0.2, 0.02, 5),\n        },\n        # Test case 4\n        {\n            \"uninv\": (450, 0.7, 30),\n            \"inv\": (450, 0.7, 20),\n            \"shared\": (0.4, 8, 0.3, 0.04, 15),\n        },\n    ]\n\n    all_results_str = []\n    for case in test_cases:\n        result = calculate_dynamics_change(case[\"uninv\"], case[\"inv\"], case[\"shared\"])\n        # Format each number as a float string for the list\n        all_results_str.append(f\"[{result[0]},{result[1]}]\")\n\n    print(f\"[{','.join(all_results_str)}]\")\n\nsolve()\n```", "id": "2473478"}]}