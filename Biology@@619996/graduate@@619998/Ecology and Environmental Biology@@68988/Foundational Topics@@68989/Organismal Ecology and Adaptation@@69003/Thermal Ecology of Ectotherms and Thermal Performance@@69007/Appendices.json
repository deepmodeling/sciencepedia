{"hands_on_practices": [{"introduction": "At the heart of thermal ecology lies the question of how temperature governs the rates of life's essential biochemical processes. This first practice explores this fundamental relationship through the lens of the Arrhenius equation, a cornerstone of chemical kinetics applied to biology. By calculating the change in metabolic rate for a fish experiencing a temperature shift, you will gain a quantitative feel for the profound, exponential impact of temperature on organismal physiology. [@problem_id:2539104]", "problem": "A temperate freshwater fish exhibits whole-organism metabolic rates governed primarily by rate-limiting enzymatic reactions. Over a diurnal warming event, the water temperature increases from $15\\,^{\\circ}\\mathrm{C}$ to $25\\,^{\\circ}\\mathrm{C}$. Assume that over this narrow range the normalization of metabolic rate with respect to body mass and other factors remains effectively constant, and that the temperature dependence of the rate is controlled by an activation barrier characterized by an activation energy $E$ and the Boltzmann constant $k$, as expected for reaction-limited biochemical processes.\n\nStarting from the principle that reaction-limited biochemical rates in ectotherms follow an Arrhenius-type temperature dependence controlled by $E$ and $k$, derive an expression for the multiplicative factor change in whole-organism metabolic rate when temperature increases from $T_1$ to $T_2$. Then evaluate this factor for $T_1 = 15\\,^{\\circ}\\mathrm{C}$ and $T_2 = 25\\,^{\\circ}\\mathrm{C}$, using $E = 0.65\\ \\mathrm{eV}$ and $k = 8.617\\times 10^{-5}\\ \\mathrm{eV\\,K^{-1}}$. Use the thermodynamic temperature in Kelvin, with $T\\ (\\mathrm{K}) = T\\ (^{\\circ}\\mathrm{C}) + 273.15$.\n\nReport the final factor as a dimensionless number, and round your answer to four significant figures.", "solution": "The problem states that the temperature dependence of the whole-organism metabolic rate, denoted as $R$, follows an Arrhenius-type relationship. This is a fundamental principle in chemical kinetics, often applied to biological processes that are limited by the rate of enzymatic reactions. The Arrhenius equation relates the rate $R$ to the absolute temperature $T$ as follows:\n$$R(T) = A \\cdot \\exp\\left(-\\frac{E}{kT}\\right)$$\nHere, $A$ is a pre-exponential factor which encapsulates non-temperature-dependent factors such as body mass and is assumed constant over the specified temperature range. $E$ is the activation energy of the rate-limiting reaction, $k$ is the Boltzmann constant, and $T$ is the absolute temperature in Kelvin.\n\nWe are asked to find the multiplicative factor by which the metabolic rate changes as the temperature increases from an initial temperature $T_1$ to a final temperature $T_2$. This factor is the ratio of the final rate $R(T_2)$ to the initial rate $R(T_1)$.\n\nThe rate at the initial temperature $T_1$ is:\n$$R_1 = R(T_1) = A \\cdot \\exp\\left(-\\frac{E}{kT_1}\\right)$$\nThe rate at the final temperature $T_2$ is:\n$$R_2 = R(T_2) = A \\cdot \\exp\\left(-\\frac{E}{kT_2}\\right)$$\n\nThe multiplicative factor change, which we will call $F$, is the ratio $\\frac{R_2}{R_1}$:\n$$F = \\frac{R_2}{R_1} = \\frac{A \\cdot \\exp\\left(-\\frac{E}{kT_2}\\right)}{A \\cdot \\exp\\left(-\\frac{E}{kT_1}\\right)}$$\nThe pre-exponential factor $A$ cancels, as it is assumed to be constant:\n$$F = \\frac{\\exp\\left(-\\frac{E}{kT_2}\\right)}{\\exp\\left(-\\frac{E}{kT_1}\\right)}$$\nUsing the property of exponential functions $\\frac{\\exp(x)}{\\exp(y)} = \\exp(x-y)$, we obtain:\n$$F = \\exp\\left(-\\frac{E}{kT_2} - \\left(-\\frac{E}{kT_1}\\right)\\right) = \\exp\\left(\\frac{E}{kT_1} - \\frac{E}{kT_2}\\right)$$\nFactoring out the common term $\\frac{E}{k}$ yields the general expression for the multiplicative factor:\n$$F = \\exp\\left[\\frac{E}{k}\\left(\\frac{1}{T_1} - \\frac{1}{T_2}\\right)\\right]$$\nThis completes the derivation of the required expression.\n\nNow, we evaluate this factor using the provided numerical values. First, we must convert the temperatures from degrees Celsius to Kelvin using the given conversion formula $T\\ (\\mathrm{K}) = T\\ (^{\\circ}\\mathrm{C}) + 273.15$.\nThe initial temperature is $T_1 = 15\\,^{\\circ}\\mathrm{C}$, so:\n$$T_1 = 15 + 273.15 = 288.15\\ \\mathrm{K}$$\nThe final temperature is $T_2 = 25\\,^{\\circ}\\mathrm{C}$, so:\n$$T_2 = 25 + 273.15 = 298.15\\ \\mathrm{K}$$\nThe given physical constants are the activation energy $E = 0.65\\ \\mathrm{eV}$ and the Boltzmann constant $k = 8.617\\times 10^{-5}\\ \\mathrm{eV\\,K^{-1}}$.\n\nWe substitute these values into the derived expression for $F$:\n$$F = \\exp\\left[\\frac{0.65\\ \\mathrm{eV}}{8.617\\times 10^{-5}\\ \\mathrm{eV\\,K^{-1}}}\\left(\\frac{1}{288.15\\ \\mathrm{K}} - \\frac{1}{298.15\\ \\mathrm{K}}\\right)\\right]$$\nThe units within the expression are consistent and result in a dimensionless argument for the exponential function, as required. Let us compute the terms.\nThe ratio $\\frac{E}{k}$ is:\n$$\\frac{E}{k} \\approx 7543.23\\ \\mathrm{K}$$\nThe difference of the reciprocals of the temperatures is:\n$$\\frac{1}{T_1} - \\frac{1}{T_2} = \\frac{1}{288.15} - \\frac{1}{298.15} \\approx 0.00347041 - 0.00335402 = 0.00011639\\ \\mathrm{K}^{-1}$$\nThe argument of the exponential is the product of these two values:\n$$\\frac{E}{k}\\left(\\frac{1}{T_1} - \\frac{1}{T_2}\\right) \\approx 7543.23 \\times 0.00011639 \\approx 0.87789$$\nFinally, we calculate the factor $F$:\n$$F = \\exp(0.87789) \\approx 2.40590$$\nThe problem requires the answer to be rounded to four significant figures.\n$$F \\approx 2.406$$\nThus, the metabolic rate of the fish increases by a factor of approximately $2.406$ when the water temperature rises from $15\\,^{\\circ}\\mathrm{C}$ to $25\\,^{\\circ}\\mathrm{C}$.", "answer": "$$\\boxed{2.406}$$", "id": "2539104"}, {"introduction": "While theoretical models provide the framework, empirical data is where science meets reality. This exercise bridges that gap by tasking you with a common challenge in quantitative biology: estimating a key model parameter from experimental measurements. You will linearize the Arrhenius model to perform a linear regression on hypothetical metabolic data, allowing you to not only estimate the activation energy $E$ but also to construct a confidence interval, a crucial skill for interpreting real-world data. [@problem_id:2539098]", "problem": "You are given datasets of thermal performance measurements of ectotherm metabolic rates across an absolute temperature range corresponding to a biologically relevant span between $10\\,^{\\circ}\\mathrm{C}$ and $30\\,^{\\circ}\\mathrm{C}$. Assume the rates arise from enzyme-limited processes whose temperature dependence is well captured by Arrhenius-type kinetics, and that the logarithm of the rate plotted against inverse absolute temperature can be modeled as linear. Starting from first principles about the exponential temperature dependence of reaction rates and the definition of the Boltzmann constant, derive a principled estimator of activation energy and a two-sided confidence interval from an ordinary least squares model of the transformed variables.\n\nYour task is to implement a program that, for each test case, does the following:\n\n- Convert temperatures from degrees Celsius to Kelvin by adding $273.15$ to each value.\n- Construct the predictor as inverse absolute temperature in $\\mathrm{K}^{-1}$ and the response as the natural logarithm of the rate (dimensionless).\n- Fit an ordinary least squares linear regression of the logarithmic rate on the inverse absolute temperature.\n- From the estimated slope and its standard error, infer the activation energy using the Boltzmann constant and quantify a two-sided $95\\%$ confidence interval using the appropriate quantile of the Student’s $t$-distribution with $n-2$ degrees of freedom, where $n$ is the number of observations in the test case.\n- Report the activation energy and its confidence limits in electronvolts (write electronvolt as $\\mathrm{eV}$), rounded to six decimal places.\n\nUse the Boltzmann constant in electronvolts per Kelvin, $k_{\\mathrm{B}} = 8.617333262 \\times 10^{-5}\\,\\mathrm{eV}\\,\\mathrm{K}^{-1}$. All logarithms are natural logarithms. The answer for each test case must be a list of three floating-point numbers: the point estimate of activation energy, the lower bound of the $95\\%$ confidence interval, and the upper bound of the $95\\%$ confidence interval. Express all three in $\\mathrm{eV}$.\n\nTest suite (each test case provides a list of temperatures in degrees Celsius and a corresponding list of positive metabolic rates):\n\n- Test case $1$ (happy path, five points across the full range):\n  - Temperatures (in $^{\\circ}\\mathrm{C}$): [$10,15,20,25,30$]\n  - Rates (dimensionless): [$0.50,0.70,1.00,1.40,2.00$]\n\n- Test case $2$ (near-isothermal performance, small slope magnitude):\n  - Temperatures (in $^{\\circ}\\mathrm{C}$): [$10,15,20,25,30$]\n  - Rates (dimensionless): [$1.00,1.02,0.98,1.01,1.00$]\n\n- Test case $3$ (boundary on sample size for confidence intervals, three points):\n  - Temperatures (in $^{\\circ}\\mathrm{C}$): [$12,21,30$]\n  - Rates (dimensionless): [$0.40,1.10,3.10$]\n\nFinal output format: Your program should produce a single line of output containing the results for the three test cases as a JSON-style list of lists with no spaces, where each inner list is [$E,\\mathrm{CI}_{\\text{lower}},\\mathrm{CI}_{\\text{upper}}$] in $\\mathrm{eV}$. For example, the printed line must look like “[[$e_1,\\ell_1,u_1$],[$e_2,\\ell_2,u_2$],[$e_3,\\ell_3,u_3$]]” with all values rounded to six decimal places.", "solution": "The problem is valid as it is scientifically grounded, well-posed, and objective. It requires the application of established principles from chemical kinetics and statistical inference to data analysis, a standard procedure in quantitative biology. We will now derive the solution from first principles.\n\nThe temperature dependence of metabolic rates, $R$, which are governed by enzyme-catalyzed reactions, is described by the Arrhenius relation. This model posits that the rate is proportional to a Boltzmann factor, $e^{-E / (k_{\\mathrm{B}} T)}$, which represents the fraction of molecules possessing sufficient thermal energy to overcome an activation energy barrier, $E$. The relation is:\n$$ R(T) = R_0 e^{-\\frac{E}{k_{\\mathrm{B}} T}} $$\nHere, $T$ is the absolute temperature in Kelvin ($\\mathrm{K}$), $k_{\\mathrm{B}}$ is the Boltzmann constant in electronvolts per Kelvin ($\\mathrm{eV}\\,\\mathrm{K}^{-1}$), and $R_0$ is a pre-exponential factor.\n\nTo utilize linear regression, we must linearize this exponential model. This is achieved by taking the natural logarithm of both sides:\n$$ \\ln(R) = \\ln(R_0 e^{-\\frac{E}{k_{\\mathrm{B}} T}}) = \\ln(R_0) + \\ln(e^{-\\frac{E}{k_{\\mathrm{B}} T}}) $$\n$$ \\ln(R) = \\ln(R_0) - \\frac{E}{k_{\\mathrm{B}}} \\frac{1}{T} $$\nThis equation has the form of a simple linear model, $y = \\beta_0 + \\beta_1 x$, where we make the following identifications:\n- The response variable, $y$, is the natural logarithm of the rate: $y = \\ln(R)$.\n- The predictor variable, $x$, is the inverse absolute temperature: $x = 1/T$.\n- The intercept, $\\beta_0$, corresponds to the logarithm of the pre-exponential factor: $\\beta_0 = \\ln(R_0)$.\n- The slope, $\\beta_1$, is directly related to the activation energy: $\\beta_1 = -E/k_{\\mathrm{B}}$.\n\nOur primary goal is to estimate $E$. From the relationship for the slope, we can derive an estimator for the activation energy, $\\hat{E}$, based on the ordinary least squares (OLS) estimate of the slope, $\\hat{\\beta}_1$:\n$$ \\hat{\\beta}_1 = -\\frac{\\hat{E}}{k_{\\mathrm{B}}} \\implies \\hat{E} = -k_{\\mathrm{B}} \\hat{\\beta}_1 $$\nThe OLS estimator for the slope, $\\hat{\\beta}_1$, for a set of $n$ data points $(x_i, y_i)$, is given by the formula:\n$$ \\hat{\\beta}_1 = \\frac{\\sum_{i=1}^{n} (x_i - \\bar{x})(y_i - \\bar{y})}{\\sum_{i=1}^{n} (x_i - \\bar{x})^2} $$\nwhere $\\bar{x}$ and $\\bar{y}$ are the sample means of the predictor and response variables, respectively.\n\nTo quantify the uncertainty in our estimate $\\hat{E}$, we construct a two-sided $95\\%$ confidence interval. This begins with the confidence interval for the slope parameter $\\beta_1$. Assuming the errors of the linear model are normally distributed, the confidence interval for $\\beta_1$ is given by:\n$$ \\hat{\\beta}_1 \\pm t_{1-\\alpha/2, n-2} \\cdot \\text{SE}(\\hat{\\beta}_1) $$\nHere, $\\alpha=0.05$ for a $95\\%$ confidence level, $\\text{SE}(\\hat{\\beta}_1)$ is the standard error of the slope estimate, and $t_{1-\\alpha/2, n-2}$ is the critical value from the Student's $t$-distribution with $n-2$ degrees of freedom. The standard error is calculated as:\n$$ \\text{SE}(\\hat{\\beta}_1) = \\sqrt{\\frac{\\text{MSE}}{\\sum_{i=1}^{n} (x_i - \\bar{x})^2}} $$\nwhere $\\text{MSE} = \\frac{1}{n-2} \\sum_{i=1}^{n} (y_i - \\hat{y}_i)^2$ is the mean squared error, with $\\hat{y}_i = \\hat{\\beta}_0 + \\hat{\\beta}_1 x_i$.\n\nThe confidence interval for the activation energy $E$ is obtained by multiplying the bounds of the interval for $\\beta_1$ by $-k_{\\mathrm{B}}$. Multiplying by a negative constant reverses the interval's bounds:\n$$ \\text{CI}_{\\text{lower}}(E) = -k_{\\mathrm{B}} (\\hat{\\beta}_1 + t_{0.975, n-2} \\cdot \\text{SE}(\\hat{\\beta}_1)) = \\hat{E} - t_{0.975, n-2} \\cdot k_{\\mathrm{B}} \\cdot \\text{SE}(\\hat{\\beta}_1) $$\n$$ \\text{CI}_{\\text{upper}}(E) = -k_{\\mathrm{B}} (\\hat{\\beta}_1 - t_{0.975, n-2} \\cdot \\text{SE}(\\hat{\\beta}_1)) = \\hat{E} + t_{0.975, n-2} \\cdot k_{\\mathrm{B}} \\cdot \\text{SE}(\\hat{\\beta}_1) $$\nThe margin of error for the activation energy is thus $ME_E = t_{0.975, n-2} \\cdot k_{\\mathrm{B}} \\cdot \\text{SE}(\\hat{\\beta}_1)$.\n\nThe computational procedure is as follows:\n1. For each test case, convert the temperatures from degrees Celsius ($T_C$) to Kelvin ($T_K$) using $T_K = T_C + 273.15$.\n2. Construct the predictor vector $x = [1/T_{K,i}]$ and the response vector $y = [\\ln(R_i)]$.\n3. Use a standard statistical library function to perform OLS regression of $y$ on $x$, which provides the estimated slope $\\hat{\\beta}_1$ and its standard error $\\text{SE}(\\hat{\\beta}_1)$.\n4. Calculate the point estimate of activation energy $\\hat{E} = -k_{\\mathrm{B}} \\hat{\\beta}_1$, using the provided value $k_{\\mathrm{B}} = 8.617333262 \\times 10^{-5}\\,\\mathrm{eV}\\,\\mathrm{K}^{-1}$.\n5. Determine the degrees of freedom, $df = n-2$, and find the critical value $t_{0.975, df}$ from the Student's $t$-distribution.\n6. Calculate the lower and upper bounds of the $95\\%$ confidence interval for $E$.\n7. Report the point estimate $\\hat{E}$ and the confidence interval bounds, all in $\\mathrm{eV}$ and rounded to six decimal places.", "answer": "```python\nimport numpy as np\nfrom scipy.stats import linregress, t\n\ndef solve():\n    \"\"\"\n    Calculates activation energy and its 95% confidence interval from thermal\n    performance data using an Arrhenius model and OLS regression.\n    \"\"\"\n    # Boltzmann constant in eV/K.\n    KB_EV_K = 8.617333262e-5\n\n    # Test suite provided in the problem statement.\n    test_cases = [\n        # Test case 1\n        ([10, 15, 20, 25, 30], [0.50, 0.70, 1.00, 1.40, 2.00]),\n        # Test case 2\n        ([10, 15, 20, 25, 30], [1.00, 1.02, 0.98, 1.01, 1.00]),\n        # Test case 3\n        ([12, 21, 30], [0.40, 1.10, 3.10])\n    ]\n\n    all_results = []\n    \n    for temps_c, rates in test_cases:\n        temps_c_np = np.array(temps_c, dtype=float)\n        rates_np = np.array(rates, dtype=float)\n        n = len(temps_c_np)\n\n        # Step 1: Convert temperatures to Kelvin.\n        temps_k = temps_c_np + 273.15\n        \n        # Step 2: Construct predictor (x) and response (y) variables for linearization.\n        # x = 1/T\n        # y = ln(Rate)\n        x = 1.0 / temps_k\n        y = np.log(rates_np)\n\n        # Step 3: Fit an ordinary least squares linear regression.\n        # The scipy.stats.linregress function returns slope and its standard error.\n        regression_result = linregress(x, y)\n        beta_1_hat = regression_result.slope\n        se_beta_1_hat = regression_result.stderr\n        \n        # Step 4: Infer the activation energy (E) from the slope.\n        # The relationship is beta_1 = -E / k_B.\n        E_hat = -KB_EV_K * beta_1_hat\n        \n        # Step 5: Quantify the 95% two-sided confidence interval for E.\n        # Degrees of freedom for the t-distribution is n - 2.\n        df = n - 2\n        \n        if df > 0:\n            # Critical t-value for a 95% confidence interval (alpha = 0.05).\n            t_crit = t.ppf(1 - 0.05 / 2, df)\n            \n            # Margin of error for the activation energy estimate.\n            margin_of_error_E = t_crit * KB_EV_K * se_beta_1_hat\n            \n            # Confidence interval bounds.\n            ci_lower = E_hat - margin_of_error_E\n            ci_upper = E_hat + margin_of_error_E\n        else:\n            # If df = 0, CI is not well-defined.\n            ci_lower, ci_upper = np.nan, np.nan\n        \n        # Collect the results: point estimate, lower bound, upper bound.\n        case_results = [E_hat, ci_lower, ci_upper]\n        all_results.append(case_results)\n\n    # Format the final output string as a JSON-style list of lists with no spaces,\n    # with all numerical values rounded to six decimal places.\n    formatted_results = []\n    for res in all_results:\n        # Format numbers to 6 decimal places as strings.\n        formatted_nums = [f\"{x:.6f}\" for x in res]\n        # Create the inner list string \"[num1,num2,num3]\".\n        formatted_results.append(f\"[{','.join(formatted_nums)}]\")\n\n    # Join inner lists into the final string \"[[...],[...],[...]]\".\n    final_output = f\"[{','.join(formatted_results)}]\"\n    \n    print(final_output)\n\nsolve()\n```", "id": "2539098"}, {"introduction": "Building on the foundational concepts, we now advance to a comprehensive, dynamic simulation—the pinnacle of biophysical modeling. In this practice, you will construct a first-principles heat budget for an ectotherm, integrating shortwave and longwave radiation, convection, and conduction to predict its body temperature throughout a full 24-hour cycle. By numerically solving the governing differential equation, you will see how an organism's traits and a fluctuating environment interact to shape its thermal experience, a critical skill for predicting ecological responses to climate change. [@problem_id:2539109]", "problem": "A small ectotherm exchanges heat with its environment via shortwave solar absorption, longwave radiative exchange with sky and ground, convection with air, and conduction with the substrate. From first principles, use conservation of energy to model the body temperature trajectory over a diel cycle and compute summary performance metrics. The starting point is the conservation of energy for a well-mixed body: the rate of change of internal energy equals the net external heat flux, which yields the ordinary differential equation\n$$\nm c \\,\\frac{d T_b}{dt} = Q_{\\mathrm{sw}} + Q_{\\mathrm{lw}} + Q_{\\mathrm{conv}} + Q_{\\mathrm{cond}},\n$$\nwhere $m$ is mass, $c$ is specific heat capacity, $T_b$ is body temperature, $Q_{\\mathrm{sw}}$ is absorbed shortwave radiation, $Q_{\\mathrm{lw}}$ is net longwave radiative exchange with sky and ground, $Q_{\\mathrm{conv}}$ is convective heat exchange with air, and $Q_{\\mathrm{cond}}$ is conductive exchange with the substrate. Use the following well-tested physical laws and definitions as the fundamental base:\n- Shortwave absorption: $Q_{\\mathrm{sw}} = \\alpha_{\\mathrm{sw}} \\, S(t) \\, A_{\\mathrm{proj}}$, where $\\alpha_{\\mathrm{sw}}$ is shortwave absorptivity, $S(t)$ is global solar irradiance in $\\mathrm{W\\, m^{-2}}$, and $A_{\\mathrm{proj}}$ is the projected area normal to the sun. Model the body as a sphere of diameter $D$ with surface area $A_{\\mathrm{surf}} = 4 \\pi (D/2)^2$ and projected area $A_{\\mathrm{proj}} = \\pi (D/2)^2$.\n- Longwave radiation: Use the Stefan–Boltzmann law with emissivity $\\epsilon$ and Stefan–Boltzmann constant $\\sigma = 5.670374419 \\times 10^{-8}\\ \\mathrm{W\\, m^{-2}\\, K^{-4}}$. Let the view factors to sky and ground be $f_{\\mathrm{sky}} = 0.5$ and $f_{\\mathrm{gnd}} = 0.5$. Define an effective sky radiating temperature by $T_{\\mathrm{sky}}^4 = \\epsilon_{\\mathrm{sky}}\\, T_{\\mathrm{air}}^4$, where $\\epsilon_{\\mathrm{sky}}$ is an effective sky emissivity and $T_{\\mathrm{air}}$ is air temperature (both in $\\mathrm{K}$). Then\n$$\nQ_{\\mathrm{lw}} = \\epsilon \\sigma A_{\\mathrm{surf}} \\left[ f_{\\mathrm{sky}}\\left(T_{\\mathrm{sky}}^4 - T_b^4 \\right) + f_{\\mathrm{gnd}} \\left( T_{\\mathrm{g}}^4 - T_b^4 \\right) \\right],\n$$\nwhere $T_{\\mathrm{g}}$ is substrate temperature in $\\mathrm{K}$.\n- Convection: Use Newton’s law of cooling $Q_{\\mathrm{conv}} = h_c A_{\\mathrm{surf}} \\left( T_{\\mathrm{air}} - T_b \\right)$, with convective heat transfer coefficient $h_c = \\mathrm{Nu}\\, k_{\\mathrm{air}}/D$. Combine forced and free convection around a sphere using a Nusselt number combination\n$$\n\\mathrm{Nu} = \\left( \\mathrm{Nu}_{\\mathrm{forced}}^3 + \\mathrm{Nu}_{\\mathrm{nat}}^3 \\right)^{1/3},\n$$\nwhere $\\mathrm{Nu}_{\\mathrm{forced}} = 2 + 0.6 \\, \\mathrm{Re}^{1/2} \\, \\mathrm{Pr}^{1/3}$, $\\mathrm{Re} = U D / \\nu$, $U$ is wind speed, $\\nu$ is kinematic viscosity, $\\mathrm{Pr}$ is Prandtl number, and $k_{\\mathrm{air}}$ is air thermal conductivity. For natural convection, use the Churchill–Chu correlation for a sphere,\n$$\n\\mathrm{Nu}_{\\mathrm{nat}} = 2 + \\frac{0.589\\, \\mathrm{Ra}^{1/4}}{\\left[1 + \\left(0.469/\\mathrm{Pr}\\right)^{9/16}\\right]^{4/9}},\n\\quad\n\\mathrm{Ra} = \\frac{g \\beta |T_b - T_{\\mathrm{air}}| D^3}{\\nu \\alpha_{\\mathrm{air}}},\n$$\nwith gravitational acceleration $g = 9.81\\ \\mathrm{m\\, s^{-2}}$, volumetric thermal expansion coefficient $\\beta \\approx 1/T_{\\mathrm{film}}$ with $T_{\\mathrm{film}} = (T_b + T_{\\mathrm{air}})/2$, and thermal diffusivity $\\alpha_{\\mathrm{air}}$.\n- Conduction: Approximate contact conduction by $Q_{\\mathrm{cond}} = h_{\\mathrm{cond}} A_{\\mathrm{cond}} (T_{\\mathrm{g}} - T_b)$ with $h_{\\mathrm{cond}} = k_{\\mathrm{sub}}/d_{\\mathrm{cond}}$, where $k_{\\mathrm{sub}}$ is substrate thermal conductivity, $d_{\\mathrm{cond}}$ is an effective contact length scale, and $A_{\\mathrm{cond}} = \\eta_{\\mathrm{cond}} A_{\\mathrm{surf}}$ with contact fraction $\\eta_{\\mathrm{cond}}$.\n\nAssume air properties constants $k_{\\mathrm{air}} = 0.026\\ \\mathrm{W\\, m^{-1}\\, K^{-1}}$, $\\nu = 1.5 \\times 10^{-5}\\ \\mathrm{m^2\\, s^{-1}}$, $\\mathrm{Pr} = 0.71$, and $\\alpha_{\\mathrm{air}} = 2.1 \\times 10^{-5}\\ \\mathrm{m^2\\, s^{-1}}$. Use explicit Euler time stepping with time step $\\Delta t = 60\\ \\mathrm{s}$ over a $24$-hour period. Use initial condition $T_b(0) = T_{\\mathrm{air}}(0)$.\n\nForcing functions over the diel cycle use hours $t_h \\in [0, 24]$ and are defined as:\n- Solar irradiance $S(t_h) = S_{\\max} \\sin\\!\\left( \\pi \\frac{t_h - t_{\\mathrm{sunrise}}}{\\mathrm{daylength}} \\right)$ for $t_h \\in [t_{\\mathrm{sunrise}}, t_{\\mathrm{sunrise}} + \\mathrm{daylength}]$, and $S(t_h) = 0$ otherwise. $S$ is in $\\mathrm{W\\, m^{-2}}$.\n- Air temperature in degrees Celsius $T_{\\mathrm{air},^\\circ\\mathrm{C}}(t_h) = \\overline{T}_{\\mathrm{air}} + A_{\\mathrm{air}} \\sin\\!\\left( 2\\pi \\frac{t_h - \\phi_{\\mathrm{air}}}{24} \\right)$. Convert to Kelvin via $T_{\\mathrm{air}} = T_{\\mathrm{air},^\\circ\\mathrm{C}} + 273.15$.\n- Substrate temperature in degrees Celsius $T_{\\mathrm{g},^\\circ\\mathrm{C}}(t_h) = \\overline{T}_{\\mathrm{air}} + A_{\\mathrm{air}} (1 + \\gamma_{\\mathrm{g}}) \\sin\\!\\left( 2\\pi \\frac{t_h - \\phi_{\\mathrm{air}} - \\Delta \\phi_{\\mathrm{g}}}{24} \\right)$. Convert to Kelvin via $T_{\\mathrm{g}} = T_{\\mathrm{g},^\\circ\\mathrm{C}} + 273.15$.\n- Wind speed $U(t_h) = \\max\\!\\left( 0, \\overline{U} + A_U \\sin\\!\\left( 2\\pi \\frac{t_h - \\phi_U}{24} \\right) \\right)$ in $\\mathrm{m\\, s^{-1}}$.\n\nOutput requirements:\n- For each test case, compute two quantities: the maximum body temperature over the $24$-hour period expressed in degrees Celsius, and the total time with $T_b$ strictly above a thermal optimum $T_{\\mathrm{opt}}$ (defined in degrees Celsius) expressed in hours. Express the maximum body temperature in degrees Celsius rounded to three decimal places, and the total time above $T_{\\mathrm{opt}}$ as a decimal number of hours rounded to three decimal places.\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets (for example, $\\left[\\mathrm{result1},\\mathrm{result2},\\ldots\\right]$), concatenating the two numbers from each test case in order.\n\nUse the following four scientifically plausible test cases. Unless otherwise specified, use $\\phi_{\\mathrm{air}} = 15.0\\ \\mathrm{h}$ and $\\phi_U = 14.0\\ \\mathrm{h}$, $f_{\\mathrm{sky}} = 0.5$, $f_{\\mathrm{gnd}} = 0.5$.\n\n- Test case $1$ (clear, moderate wind, small ectotherm):\n    - Morphology and materials: $m = 0.05\\ \\mathrm{kg}$, $D = 0.05\\ \\mathrm{m}$, $c = 3500\\ \\mathrm{J\\, kg^{-1}\\, K^{-1}}$, $\\alpha_{\\mathrm{sw}} = 0.85$, $\\epsilon = 0.95$, $\\eta_{\\mathrm{cond}} = 0.10$, $d_{\\mathrm{cond}} = 0.01\\ \\mathrm{m}$, $k_{\\mathrm{sub}} = 1.0\\ \\mathrm{W\\, m^{-1}\\, K^{-1}}$, $T_{\\mathrm{opt}} = 35.0\\,^\\circ\\mathrm{C}$.\n    - Forcing: $S_{\\max} = 900\\ \\mathrm{W\\, m^{-2}}$, $\\epsilon_{\\mathrm{sky}} = 0.78$, $\\overline{T}_{\\mathrm{air}} = 25.0\\,^\\circ\\mathrm{C}$, $A_{\\mathrm{air}} = 10.0\\,^\\circ\\mathrm{C}$, $\\gamma_{\\mathrm{g}} = 0.5$, $\\Delta \\phi_{\\mathrm{g}} = -1.0\\ \\mathrm{h}$, $\\overline{U} = 1.0\\ \\mathrm{m\\, s^{-1}}$, $A_U = 1.0\\ \\mathrm{m\\, s^{-1}}$, $\\mathrm{daylength} = 12.0\\ \\mathrm{h}$, $t_{\\mathrm{sunrise}} = 6.0\\ \\mathrm{h}$.\n\n- Test case $2$ (cloudy, windier):\n    - Morphology and materials: identical to test case $1$ except $T_{\\mathrm{opt}} = 33.0\\,^\\circ\\mathrm{C}$.\n    - Forcing: $S_{\\max} = 400\\ \\mathrm{W\\, m^{-2}}$, $\\epsilon_{\\mathrm{sky}} = 0.90$, $\\overline{T}_{\\mathrm{air}} = 22.0\\,^\\circ\\mathrm{C}$, $A_{\\mathrm{air}} = 6.0\\,^\\circ\\mathrm{C}$, $\\gamma_{\\mathrm{g}} = 0.3$, $\\Delta \\phi_{\\mathrm{g}} = -1.0\\ \\mathrm{h}$, $\\overline{U} = 2.0\\ \\mathrm{m\\, s^{-1}}$, $A_U = 1.0\\ \\mathrm{m\\, s^{-1}}$, $\\mathrm{daylength} = 12.0\\ \\mathrm{h}$, $t_{\\mathrm{sunrise}} = 6.0\\ \\mathrm{h}$.\n\n- Test case $3$ (very windy, cool mean air temperature):\n    - Morphology and materials: identical to test case $1$ except $T_{\\mathrm{opt}} = 34.0\\,^\\circ\\mathrm{C}$.\n    - Forcing: $S_{\\max} = 900\\ \\mathrm{W\\, m^{-2}}$, $\\epsilon_{\\mathrm{sky}} = 0.80$, $\\overline{T}_{\\mathrm{air}} = 20.0\\,^\\circ\\mathrm{C}$, $A_{\\mathrm{air}} = 8.0\\,^\\circ\\mathrm{C}$, $\\gamma_{\\mathrm{g}} = 0.5$, $\\Delta \\phi_{\\mathrm{g}} = -1.0\\ \\mathrm{h}$, $\\overline{U} = 5.0\\ \\mathrm{m\\, s^{-1}}$, $A_U = 3.0\\ \\mathrm{m\\, s^{-1}}$, $\\mathrm{daylength} = 12.0\\ \\mathrm{h}$, $t_{\\mathrm{sunrise}} = 6.0\\ \\mathrm{h}$.\n\n- Test case $4$ (larger ectotherm, warmer mean conditions):\n    - Morphology and materials: $m = 0.30\\ \\mathrm{kg}$, $D = 0.09\\ \\mathrm{m}$, $c = 3500\\ \\mathrm{J\\, kg^{-1}\\, K^{-1}}$, $\\alpha_{\\mathrm{sw}} = 0.85$, $\\epsilon = 0.95$, $\\eta_{\\mathrm{cond}} = 0.10$, $d_{\\mathrm{cond}} = 0.01\\ \\mathrm{m}$, $k_{\\mathrm{sub}} = 1.0\\ \\mathrm{W\\, m^{-1}\\, K^{-1}}$, $T_{\\mathrm{opt}} = 38.0\\,^\\circ\\mathrm{C}$.\n    - Forcing: $S_{\\max} = 900\\ \\mathrm{W\\, m^{-2}}$, $\\epsilon_{\\mathrm{sky}} = 0.80$, $\\overline{T}_{\\mathrm{air}} = 28.0\\,^\\circ\\mathrm{C}$, $A_{\\mathrm{air}} = 12.0\\,^\\circ\\mathrm{C}$, $\\gamma_{\\mathrm{g}} = 0.7$, $\\Delta \\phi_{\\mathrm{g}} = -1.0\\ \\mathrm{h}$, $\\overline{U} = 1.0\\ \\mathrm{m\\, s^{-1}}$, $A_U = 1.0\\ \\mathrm{m\\, s^{-1}}$, $\\mathrm{daylength} = 12.0\\ \\mathrm{h}$, $t_{\\mathrm{sunrise}} = 6.0\\ \\mathrm{h}$.\n\nAngle units: use radians for all trigonometric functions. Physical units: ensure all inputs and internal computations use International System of Units (SI) where applicable. The final answers must be expressed in the specified units: degrees Celsius for maximum body temperature and hours for time above $T_{\\mathrm{opt}}$, each rounded to three decimal places. The program must output a single line with the concatenated results for the four test cases in the exact format $\\left[\\mathrm{r}_1,\\mathrm{r}_2,\\ldots,\\mathrm{r}_8\\right]$ as described above, where $\\mathrm{r}_{2k-1}$ is the maximum body temperature (degrees Celsius) and $\\mathrm{r}_{2k}$ is the time above $T_{\\mathrm{opt}}$ (hours) for test case $k$.", "solution": "The problem statement presents a scientifically valid initial value problem grounded in the principles of biophysical ecology and heat transfer physics. It describes the thermal dynamics of a well-mixed, spherical ectotherm using a first-order ordinary differential equation (ODE) derived from the conservation of energy. All physical parameters, constants, forcing functions, and initial conditions are provided, making the problem well-posed and self-contained. The specified parameter values are physically realistic. Therefore, a meaningful numerical solution can be computed.\n\nThe core of the problem is to solve the ODE for the body temperature $T_b$ over a $24$-hour diel cycle:\n$$\nm c \\,\\frac{d T_b}{dt} = Q_{\\mathrm{net}}(t, T_b) = Q_{\\mathrm{sw}} + Q_{\\mathrm{lw}} + Q_{\\mathrm{conv}} + Q_{\\mathrm{cond}}\n$$\nwhere $m$ is the mass, $c$ is the specific heat capacity, and the terms on the right-hand side represent the net heat fluxes from shortwave radiation, longwave radiation, convection, and conduction, respectively.\n\nAs specified, this ODE is solved numerically using the explicit Euler method. The temperature at the next time step, $T_b(t+\\Delta t)$, is determined from the temperature at the current time step, $T_b(t)$, by the following update rule:\n$$\nT_b(t+\\Delta t) = T_b(t) + \\frac{\\Delta t}{m c} Q_{\\mathrm{net}}(t, T_b(t))\n$$\nThe simulation is performed over a $24$-hour period with a fixed time step of $\\Delta t=60$ seconds. The initial condition is $T_b(0) = T_{\\mathrm{air}}(0)$. All calculations are performed in SI units, with temperatures in Kelvin ($K$).\n\nThe solution is implemented through the following steps for each test case:\n\n1.  **Initialization and Environmental Forcing**: All physical constants and morphological parameters are defined. The time-dependent environmental variables—solar irradiance $S(t)$, air temperature $T_{\\mathrm{air}}(t)$, substrate temperature $T_{\\mathrm{g}}(t)$, and wind speed $U(t)$—are pre-calculated as time series arrays for the entire $24$-hour period, a total of $N = (24 \\times 3600) / 60 = 1440$ time steps. Forcing temperatures, given in degrees Celsius, are converted to Kelvin using the relation $T_K = T_{^\\circ\\mathrm{C}} + 273.15$. The time variable $t_h$ in hours is converted to seconds for the simulation. The body temperature history array, $T_b$, is initialized with $T_b(0) = T_{\\mathrm{air}}(0)$.\n\n2.  **Time-Stepping Simulation**: A loop iterates from $t=0$ to $t = 24 \\times 3600 - \\Delta t$. In each iteration $i$, corresponding to time $t_i$:\n    *   The current body temperature $T_{b,i}$ and environmental conditions ($S_i, T_{\\mathrm{air},i}, T_{\\mathrm{g},i}, U_i$) are used to compute the four heat flux terms.\n    *   **Shortwave Radiation ($Q_{\\mathrm{sw}}$)**: $Q_{\\mathrm{sw}} = \\alpha_{\\mathrm{sw}} \\, S(t_i) \\, A_{\\mathrm{proj}}$, where the projected area of the sphere is $A_{\\mathrm{proj}} = \\pi (D/2)^2$.\n    *   **Longwave Radiation ($Q_{\\mathrm{lw}}$)**: $Q_{\\mathrm{lw}} = \\epsilon \\sigma A_{\\mathrm{surf}} [ f_{\\mathrm{sky}}(T_{\\mathrm{sky},i}^4 - T_{b,i}^4) + f_{\\mathrm{gnd}}(T_{\\mathrm{g},i}^4 - T_{b,i}^4) ]$. The effective sky temperature is $T_{\\mathrm{sky},i} = (\\epsilon_{\\mathrm{sky}} T_{\\mathrm{air},i}^4)^{1/4}$. The surface area is $A_{\\mathrm{surf}} = \\pi D^2$ and view factors are $f_{\\mathrm{sky}}=f_{\\mathrm{gnd}}=0.5$.\n    *   **Convection ($Q_{\\mathrm{conv}}$)**: $Q_{\\mathrm{conv}} = h_{c,i} A_{\\mathrm{surf}} (T_{\\mathrm{air},i} - T_{b,i})$. The heat transfer coefficient $h_{c,i}$ depends on the combined Nusselt number $\\mathrm{Nu}_i = (\\mathrm{Nu}_{\\mathrm{forced},i}^3 + \\mathrm{Nu}_{\\mathrm{nat},i}^3)^{1/3}$. This requires calculating the Reynolds number $\\mathrm{Re}_i = U_i D / \\nu$ for forced convection and the Rayleigh number $\\mathrm{Ra}_i = g \\beta_i |T_{b,i} - T_{\\mathrm{air},i}| D^3 / (\\nu \\alpha_{\\mathrm{air}})$ for natural convection. The volumetric expansion coefficient $\\beta_i$ is approximated as $1/T_{\\mathrm{film},i}$ where $T_{\\mathrm{film},i}=(T_{b,i}+T_{\\mathrm{air},i})/2$.\n    *   **Conduction ($Q_{\\mathrm{cond}}$)**: $Q_{\\mathrm{cond}} = h_{\\mathrm{cond}} A_{\\mathrm{cond}} (T_{\\mathrm{g},i} - T_{b,i})$, with $h_{\\mathrm{cond}} = k_{\\mathrm{sub}}/d_{\\mathrm{cond}}$ and $A_{\\mathrm{cond}} = \\eta_{\\mathrm{cond}} A_{\\mathrm{surf}}$.\n    *   The net heat flux $Q_{\\mathrm{net},i}$ is summed, and the body temperature for the next time step, $T_{b,i+1}$, is calculated using the Euler formula.\n\n3.  **Post-Processing and Output**: After the simulation loop completes:\n    *   The entire body temperature history, $T_b$, is converted from Kelvin to degrees Celsius.\n    *   The maximum body temperature is found by taking the maximum value of the $T_b$ history in Celsius.\n    *   The total time for which the body temperature is strictly greater than the thermal optimum, $T_b  T_{\\mathrm{opt}}$, is calculated. This is achieved by summing the number of time steps (after $t=0$) where the condition is met and multiplying by the duration of a single time step, $\\Delta t = 60$ s. The result is converted to hours.\n    *   The two calculated metrics (maximum temperature in Celsius and time above optimum in hours) are rounded to three decimal places.\n\nThis procedure is repeated for all four test cases, and the results are concatenated into a single comma-separated list as required.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the ectotherm thermal balance problem for the given test cases.\n    \"\"\"\n    # Physical and simulation constants\n    sigma = 5.670374419e-8  # Stefan-Boltzmann constant, W m^-2 K^-4\n    g = 9.81              # Gravitational acceleration, m s^-2\n    k_air = 0.026           # Thermal conductivity of air, W m^-1 K^-1\n    nu = 1.5e-5             # Kinematic viscosity of air, m^2 s^-1\n    Pr = 0.71               # Prandtl number for air\n    alpha_air = 2.1e-5      # Thermal diffusivity of air, m^2 s^-1\n    dt_s = 60.0             # Time step, s\n    sim_duration_h = 24.0\n    sim_duration_s = sim_duration_h * 3600.0\n    time_s = np.arange(0, sim_duration_s + dt_s, dt_s)\n    time_h = time_s / 3600.0\n    n_points = len(time_s)\n\n    # Test case parameters organized in a list of dictionaries\n    test_cases = [\n        {\n            \"m\": 0.05, \"D\": 0.05, \"c\": 3500, \"alpha_sw\": 0.85, \"epsilon\": 0.95,\n            \"eta_cond\": 0.10, \"d_cond\": 0.01, \"k_sub\": 1.0, \"T_opt_C\": 35.0,\n            \"S_max\": 900, \"epsilon_sky\": 0.78, \"T_air_mean_C\": 25.0, \"A_air_C\": 10.0,\n            \"gamma_g\": 0.5, \"Delta_phi_g\": -1.0, \"U_mean\": 1.0, \"A_U\": 1.0,\n            \"daylength\": 12.0, \"t_sunrise\": 6.0, \"phi_air\": 15.0, \"phi_U\": 14.0,\n            \"f_sky\": 0.5, \"f_gnd\": 0.5\n        },\n        {\n            \"m\": 0.05, \"D\": 0.05, \"c\": 3500, \"alpha_sw\": 0.85, \"epsilon\": 0.95,\n            \"eta_cond\": 0.10, \"d_cond\": 0.01, \"k_sub\": 1.0, \"T_opt_C\": 33.0,\n            \"S_max\": 400, \"epsilon_sky\": 0.90, \"T_air_mean_C\": 22.0, \"A_air_C\": 6.0,\n            \"gamma_g\": 0.3, \"Delta_phi_g\": -1.0, \"U_mean\": 2.0, \"A_U\": 1.0,\n            \"daylength\": 12.0, \"t_sunrise\": 6.0, \"phi_air\": 15.0, \"phi_U\": 14.0,\n            \"f_sky\": 0.5, \"f_gnd\": 0.5\n        },\n        {\n            \"m\": 0.05, \"D\": 0.05, \"c\": 3500, \"alpha_sw\": 0.85, \"epsilon\": 0.95,\n            \"eta_cond\": 0.10, \"d_cond\": 0.01, \"k_sub\": 1.0, \"T_opt_C\": 34.0,\n            \"S_max\": 900, \"epsilon_sky\": 0.80, \"T_air_mean_C\": 20.0, \"A_air_C\": 8.0,\n            \"gamma_g\": 0.5, \"Delta_phi_g\": -1.0, \"U_mean\": 5.0, \"A_U\": 3.0,\n            \"daylength\": 12.0, \"t_sunrise\": 6.0, \"phi_air\": 15.0, \"phi_U\": 14.0,\n            \"f_sky\": 0.5, \"f_gnd\": 0.5\n        },\n        {\n            \"m\": 0.30, \"D\": 0.09, \"c\": 3500, \"alpha_sw\": 0.85, \"epsilon\": 0.95,\n            \"eta_cond\": 0.10, \"d_cond\": 0.01, \"k_sub\": 1.0, \"T_opt_C\": 38.0,\n            \"S_max\": 900, \"epsilon_sky\": 0.80, \"T_air_mean_C\": 28.0, \"A_air_C\": 12.0,\n            \"gamma_g\": 0.7, \"Delta_phi_g\": -1.0, \"U_mean\": 1.0, \"A_U\": 1.0,\n            \"daylength\": 12.0, \"t_sunrise\": 6.0, \"phi_air\": 15.0, \"phi_U\": 14.0,\n            \"f_sky\": 0.5, \"f_gnd\": 0.5\n        }\n    ]\n\n    all_results = []\n\n    for params in test_cases:\n        # Pre-calculate time series for forcing functions\n        t_sun_phase = (time_h - params[\"t_sunrise\"]) / params[\"daylength\"]\n        S_t = np.zeros_like(time_h)\n        daylight_mask = (time_h >= params[\"t_sunrise\"])  (time_h  (params[\"t_sunrise\"] + params[\"daylength\"]))\n        S_t[daylight_mask] = params[\"S_max\"] * np.sin(np.pi * t_sun_phase[daylight_mask])\n\n        T_air_C_t = params[\"T_air_mean_C\"] + params[\"A_air_C\"] * np.sin(2 * np.pi * (time_h - params[\"phi_air\"]) / 24.0)\n        T_air_K_t = T_air_C_t + 273.15\n\n        T_g_C_t = params[\"T_air_mean_C\"] + params[\"A_air_C\"] * (1 + params[\"gamma_g\"]) * np.sin(2 * np.pi * (time_h - params[\"phi_air\"] - params[\"Delta_phi_g\"]) / 24.0)\n        T_g_K_t = T_g_C_t + 273.15\n\n        U_raw = params[\"U_mean\"] + params[\"A_U\"] * np.sin(2 * np.pi * (time_h - params[\"phi_U\"]) / 24.0)\n        U_t = np.maximum(0, U_raw)\n\n        # Body and heat transfer parameters\n        m, c, D = params[\"m\"], params[\"c\"], params[\"D\"]\n        A_surf = np.pi * D**2\n        A_proj = np.pi * (D / 2)**2\n        A_cond = params[\"eta_cond\"] * A_surf\n        h_cond = params[\"k_sub\"] / params[\"d_cond\"]\n        mc_inv = 1.0 / (m * c)\n        \n        # Initialize body temperature history\n        Tb_K_history = np.zeros(n_points)\n        Tb_K_history[0] = T_air_K_t[0]\n\n        # Time-stepping loop\n        for i in range(n_points - 1):\n            Tb_K = Tb_K_history[i]\n            T_air_K, T_g_K, U, S = T_air_K_t[i], T_g_K_t[i], U_t[i], S_t[i]\n            \n            # 1. Shortwave radiation\n            Q_sw = params[\"alpha_sw\"] * S * A_proj\n\n            # 2. Longwave radiation\n            T_sky_K_4 = params[\"epsilon_sky\"] * T_air_K**4\n            Q_lw = params[\"epsilon\"] * sigma * A_surf * (\n                params[\"f_sky\"] * (T_sky_K_4 - Tb_K**4) + params[\"f_gnd\"] * (T_g_K**4 - Tb_K**4)\n            )\n            \n            # 3. Convection\n            T_film_K = (Tb_K + T_air_K) / 2\n            beta = 1.0 / T_film_K\n            Re = U * D / nu\n            Ra = (g * beta * abs(Tb_K - T_air_K) * D**3) / (nu * alpha_air)\n            Nu_forced = 2.0 + 0.6 * Re**0.5 * Pr**(1/3)\n            _nat_denom = (1 + (0.469 / Pr)**(9/16))**(4/9)\n            Nu_nat = 2.0 + (0.589 * Ra**0.25) / _nat_denom\n            Nu = (Nu_forced**3 + Nu_nat**3)**(1/3)\n            h_c = Nu * k_air / D\n            Q_conv = h_c * A_surf * (T_air_K - Tb_K)\n\n            # 4. Conduction\n            Q_cond = h_cond * A_cond * (T_g_K - Tb_K)\n\n            # Total heat flux and temperature update\n            Q_net = Q_sw + Q_lw + Q_conv + Q_cond\n            dTb_dt = Q_net * mc_inv\n            Tb_K_history[i+1] = Tb_K + dTb_dt * dt_s\n\n        # Post-processing\n        Tb_C_history = Tb_K_history - 273.15\n        max_Tb_C = np.max(Tb_C_history)\n        \n        # Calculate time above T_opt, excluding t=0 point\n        time_above_opt_s = np.sum(Tb_C_history[1:] > params[\"T_opt_C\"]) * dt_s\n        time_above_opt_h = time_above_opt_s / 3600.0\n\n        all_results.append(round(max_Tb_C, 3))\n        all_results.append(round(time_above_opt_h, 3))\n\n    # Format and print the final output string\n    print(f\"[{','.join(map(str, all_results))}]\")\n\nsolve()\n```", "id": "2539109"}]}