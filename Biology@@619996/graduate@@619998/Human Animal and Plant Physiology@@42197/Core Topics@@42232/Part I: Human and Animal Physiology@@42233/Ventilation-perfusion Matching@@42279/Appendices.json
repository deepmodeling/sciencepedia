{"hands_on_practices": [{"introduction": "Understanding the spatial heterogeneity of ventilation-perfusion ($\\dot V_A/\\dot Q$) matching is fundamental to respiratory physiology. This first practice invites you to build a simple mathematical model based on the well-established principle that both ventilation and perfusion decrease from the base to the apex of the upright lung, but at different rates. By deriving the relationship for the local $\\dot V_A/\\dot Q$ ratio as a function of height [@problem_id:2621305], you will gain a quantitative appreciation for why the lung apex is typically over-ventilated relative to its perfusion, while the base is under-ventilated.", "problem": "In an upright mammalian lung at functional residual capacity, gravity creates vertical gradients in both regional alveolar ventilation and regional pulmonary blood flow. Consider a one-dimensional vertical coordinate $x$ (in $\\mathrm{m}$), measured upward from the lung base ($x=0$ at the base, increasing toward the apex). Assume that the local alveolar ventilation per unit lung volume, denoted $\\dot V_{A}(x)$, and the local pulmonary blood flow per unit lung volume, denoted $\\dot Q(x)$, each follow a simple exponential dependence on height due to hydrostatic and compliance effects:\n$$\\dot V_{A}(x)=\\dot V_{A}(0)\\,\\exp\\!\\left(-\\frac{x}{\\lambda_{V}}\\right),\\qquad \\dot Q(x)=\\dot Q(0)\\,\\exp\\!\\left(-\\frac{x}{\\lambda_{Q}}\\right),$$\nwhere $\\lambda_{V}>0$ and $\\lambda_{Q}>0$ are constant scale heights for ventilation and perfusion, respectively. Let the local ventilation-perfusion ratio be defined as $R(x)=\\dot V_{A}(x)/\\dot Q(x)$, and define the base ratio $R_{0}=\\dot V_{A}(0)/\\dot Q(0)$. \n\nStarting only from the provided assumptions, the definition of $R(x)$, and standard properties of the exponential function, derive a closed-form analytic expression for $R(x)$ in terms of $x$, $\\lambda_{V}$, $\\lambda_{Q}$, and $R_{0}$, simplified as much as possible. The ventilation-perfusion ratio is dimensionless; report your final expression without units. Your final answer must be a single analytic expression.", "solution": "We begin with the definitions of the local alveolar ventilation per unit lung volume $\\dot V_{A}(x)$ and the local pulmonary blood flow per unit lung volume $\\dot Q(x)$, each assumed to vary exponentially with height:\n$$\\dot V_{A}(x)=\\dot V_{A}(0)\\,\\exp\\!\\left(-\\frac{x}{\\lambda_{V}}\\right),\\qquad \\dot Q(x)=\\dot Q(0)\\,\\exp\\!\\left(-\\frac{x}{\\lambda_{Q}}\\right),$$\nwith $\\lambda_{V}>0$ and $\\lambda_{Q}>0$.\n\nThe ventilation-perfusion ratio at height $x$ is defined by\n$$R(x)=\\frac{\\dot V_{A}(x)}{\\dot Q(x)}.$$\n\nSubstituting the exponential forms into the definition gives\n$$R(x)=\\frac{\\dot V_{A}(0)\\,\\exp\\!\\left(-\\frac{x}{\\lambda_{V}}\\right)}{\\dot Q(0)\\,\\exp\\!\\left(-\\frac{x}{\\lambda_{Q}}\\right)}.$$\n\nUsing the property of exponentials that $\\exp(a)/\\exp(b)=\\exp(a-b)$, we can combine the exponentials:\n$$R(x)=\\frac{\\dot V_{A}(0)}{\\dot Q(0)}\\,\\exp\\!\\left(-\\frac{x}{\\lambda_{V}}+\\frac{x}{\\lambda_{Q}}\\right).$$\n\nRecognizing the base ratio $R_{0}=\\dot V_{A}(0)/\\dot Q(0)$, we write\n$$R(x)=R_{0}\\,\\exp\\!\\left(x\\left(\\frac{1}{\\lambda_{Q}}-\\frac{1}{\\lambda_{V}}\\right)\\right).$$\n\nThis is a closed-form expression giving the ventilation-perfusion ratio as a function of height $x$ in terms of the scale heights $\\lambda_{V}$ and $\\lambda_{Q}$ and the base ratio $R_{0}$. It is dimensionless, as required.", "answer": "$$\\boxed{R_{0}\\,\\exp\\!\\left(x\\left(\\frac{1}{\\lambda_{Q}}-\\frac{1}{\\lambda_{V}}\\right)\\right)}$$", "id": "2621305"}, {"introduction": "While spatial models are insightful, clinicians assess overall gas exchange efficiency using integrated parameters. This exercise [@problem_id:2621283] bridges theory and practice by having you derive the Bohr-Enghoff equation for physiological dead space ($V_D$) from the first principle of mass conservation for carbon dioxide. Calculating $V_D$ from clinical data demonstrates how a simple measurement can quantify the component of ventilation that is 'wasted' on high $\\dot V_A/\\dot Q$ regions, providing a powerful index of overall ventilation-perfusion mismatch.", "problem": "A resting adult human breathes room air under steady-state conditions. You measure the following during quiet breathing: tidal volume $V_T = 560\\,\\mathrm{mL}$, arterial partial pressure of carbon dioxide $P_{\\mathrm{a}CO_2} = 44\\,\\mathrm{mmHg}$ obtained from an arterial blood gas, and mixed expired partial pressure of carbon dioxide $\\bar{P}_{\\mathrm{E}CO_2} = 30\\,\\mathrm{mmHg}$ obtained from a Douglas bag collection of a single tidal exhalation fully mixed by a rapid-response capnometer.\n\nStarting only from (i) conservation of carbon dioxide over a single tidal breath, (ii) negligible inspired carbon dioxide on room air, and (iii) the steady-state equivalence of alveolar and arterial carbon dioxide partial pressures in the absence of significant diffusion limitation, derive the relationship needed to compute the physiological dead space volume $V_D$ from these measurements. Then compute $V_D$ for this subject.\n\nExpress your final numerical answer in $\\mathrm{mL}$, rounded to three significant figures.\n\nIn your reasoning, briefly interpret what the magnitude of the computed dead space fraction implies about ventilation-perfusion ($\\dot V_A/\\dot Q$) matching in this subject at rest, but do not include this interpretation in your final numerical answer.", "solution": "The problem as stated is valid, self-contained, and scientifically sound. It is a standard application of mass balance principles in respiratory physiology. We will proceed to the derivation and calculation.\n\nThe foundation of this problem is the principle of conservation of mass, applied to carbon dioxide ($CO_2$) over a single, steady-state tidal breath. The total amount of $CO_2$ exhaled in one tidal volume ($V_T$) must be equal to the sum of the amounts of $CO_2$ originating from the different components of that volume.\n\nA single tidal volume, $V_T$, is conceptually partitioned into two non-overlapping volumes:\n1.  The physiological dead space volume, $V_D$. This volume of gas occupies the conducting airways and any alveoli that are ventilated but not perfused. This volume does not participate in gas exchange with pulmonary capillary blood.\n2.  The alveolar ventilation volume, $V_A$. This is the volume of gas that reaches perfused alveoli and participates in gas exchange.\n\nBy definition, these volumes sum to the tidal volume:\n$$V_T = V_D + V_A$$\nTherefore, $V_A = V_T - V_D$.\n\nAccording to the law of conservation of mass, the total number of moles of $CO_2$ in the mixed expired gas must equal the number of moles of $CO_2$ derived from the alveolar volume plus the number of moles of $CO_2$ derived from the dead space volume. Assuming ideal gas behavior ($PV=nRT$), the number of moles ($n$) of a gas is proportional to the product of its partial pressure ($P$) and the volume ($V$) it occupies, provided temperature ($T$) is constant. We can thus write the mass balance equation in terms of partial pressure-volume products, as the constant term $1/(RT)$ will cancel from all terms.\n\nThe total amount of $CO_2$ exhaled is given by the product of the tidal volume, $V_T$, and the mean partial pressure of $CO_2$ in the mixed expired gas, $\\bar{P}_{\\mathrm{E}CO_2}$.\nThe amount of $CO_2$ originating from the dead space is the product of the dead space volume, $V_D$, and the partial pressure of $CO_2$ in the inspired air, $P_{\\mathrm{I}CO_2}$, since the dead space is filled with inspired air at the end of inspiration.\nThe amount of $CO_2$ originating from the alveolar gas is the product of the alveolar volume, $V_A$, and the partial pressure of $CO_2$ in the alveolar gas, $P_{\\mathrm{A}CO_2}$.\n\nThe conservation equation is therefore:\n$$V_T \\cdot \\bar{P}_{\\mathrm{E}CO_2} = V_D \\cdot P_{\\mathrm{I}CO_2} + V_A \\cdot P_{\\mathrm{A}CO_2}$$\n\nWe apply the conditions stipulated in the problem:\n(i) Conservation of $CO_2$ is the basis of our equation.\n(ii) Inspired air is room air, where the concentration of $CO_2$ is negligible. Thus, we take $P_{\\mathrm{I}CO_2} \\approx 0$.\n(iii) In the absence of significant diffusion limitation and with the system at steady state, the partial pressure of $CO_2$ in the alveolar gas is in equilibrium with the arterial blood. Hence, $P_{\\mathrm{A}CO_2} \\approx P_{\\mathrm{a}CO_2}$.\n\nSubstituting these conditions and the relation $V_A = V_T - V_D$ into the conservation equation:\n$$V_T \\cdot \\bar{P}_{\\mathrm{E}CO_2} = V_D \\cdot (0) + (V_T - V_D) \\cdot P_{\\mathrm{a}CO_2}$$\nThis simplifies to:\n$$V_T \\cdot \\bar{P}_{\\mathrm{E}CO_2} = V_T \\cdot P_{\\mathrm{a}CO_2} - V_D \\cdot P_{\\mathrm{a}CO_2}$$\nWe are required to find the physiological dead space, $V_D$. We rearrange the equation to solve for $V_D$:\n$$V_D \\cdot P_{\\mathrm{a}CO_2} = V_T \\cdot P_{\\mathrm{a}CO_2} - V_T \\cdot \\bar{P}_{\\mathrm{E}CO_2}$$\n$$V_D \\cdot P_{\\mathrm{a}CO_2} = V_T (P_{\\mathrm{a}CO_2} - \\bar{P}_{\\mathrm{E}CO_2})$$\nThis yields the desired relationship, which is the Bohr equation as modified by Enghoff for physiological dead space:\n$$V_D = V_T \\frac{P_{\\mathrm{a}CO_2} - \\bar{P}_{\\mathrm{E}CO_2}}{P_{\\mathrm{a}CO_2}}$$\nThis equation allows for the calculation of the physiological dead space from the given measurable quantities.\n\nNow, we compute the numerical value for $V_D$ using the provided data:\n$V_T = 560\\,\\mathrm{mL}$\n$P_{\\mathrm{a}CO_2} = 44\\,\\mathrm{mmHg}$\n$\\bar{P}_{\\mathrm{E}CO_2} = 30\\,\\mathrm{mmHg}$\n\nSubstituting these values into the derived formula:\n$$V_D = 560 \\left( \\frac{44 - 30}{44} \\right)$$\n$$V_D = 560 \\left( \\frac{14}{44} \\right) = 560 \\left( \\frac{7}{22} \\right)$$\n$$V_D \\approx 178.1818... \\,\\mathrm{mL}$$\nThe problem requires the answer to be rounded to three significant figures.\n$$V_D = 178\\,\\mathrm{mL}$$\n\nFor interpretation, we consider the dead space fraction, $V_D/V_T$.\n$$\\frac{V_D}{V_T} = \\frac{P_{\\mathrm{a}CO_2} - \\bar{P}_{\\mathrm{E}CO_2}}{P_{\\mathrm{a}CO_2}} = \\frac{44 - 30}{44} = \\frac{14}{44} \\approx 0.318$$\nThis fraction, approximately $32\\%$, represents the portion of each breath that does not participate in gas exchange. In a healthy young adult at rest, this value is typically between $20\\%$ and $35\\%$. The calculated value of $32\\%$ is within the upper bounds of this normal range. It indicates a non-optimal, but not severely abnormal, matching of ventilation to perfusion ($\\dot V_A/\\dot Q$). An increased physiological dead space suggests the presence of alveolar dead space, where some alveoli are ventilated but inadequately perfused (high $\\dot V_A/\\dot Q$ ratio). This modest elevation in dead space is consistent with the subject's slightly elevated arterial $P_{\\mathrm{a}CO_2}$ of $44\\,\\mathrm{mmHg}$ (typical normal is $40\\,\\mathrm{mmHg}$), as inefficient gas exchange requires compensatory increases in total ventilation or results in hypercapnia.", "answer": "$$\\boxed{178}$$", "id": "2621283"}, {"introduction": "Ventilation-perfusion matching is not a static state but a dynamic process governed by complex feedback loops, such as hypoxic pulmonary vasoconstriction (HPV) and central ventilatory control. In this final, advanced practice, you will step into the role of a computational physiologist to model these interactions [@problem_id:2621257]. By implementing and simulating a dynamical system, you will explore how the interplay between local and central control mechanisms can give rise to emergent, non-linear behaviors like oscillatory or bistable $\\dot V_A/\\dot Q$ patterns, providing a modern perspective on physiological regulation and pathology.", "problem": "You are asked to implement and analyze a minimal, dimensionless dynamical model of ventilation-perfusion matching in a single representative lung unit, focusing on how coupling between central ventilation control and hypoxic pulmonary vasoconstriction (HPV) can produce oscillatory or bistable ventilation-perfusion patterns under certain parameter regimes. Your program must simulate the model, classify the pattern for each parameter set, and aggregate the results into a single-line list as specified below.\n\nThe model should be constructed from fundamental mass balance and control principles as follows.\n\n1. Variables and meanings (all variables are dimensionless):\n- $x(t)$ is a normalized alveolar oxygen level representing a proxy for alveolar partial pressure of oxygen or oxygen fraction.\n- $c(t)$ is a normalized alveolar carbon dioxide level representing a proxy for alveolar partial pressure of carbon dioxide.\n- $v(t)$ is a normalized alveolar ventilation.\n- $q(t)$ is a normalized perfusion that depends on $x(t)$ through hypoxic pulmonary vasoconstriction.\n\n2. Fundamental base and assumptions:\n- Wash-in/wash-out mass balance for respiratory gases: the rate of change of a gas in the alveolar compartment equals inflow minus outflow plus production or consumption, consistent with Fick’s principle at the compartment level.\n- Inspired oxygen is modeled as a constant normalized input $x_{I}$.\n- Carbon dioxide inflow to the alveoli is carried by perfusion and is proportional to $q(t)$.\n- Central chemoreflex control drives ventilation toward a target that increases monotonically with delayed carbon dioxide, capturing known feedback and delay.\n- Hypoxic pulmonary vasoconstriction is a monotonic increase of $q(t)$ with $x(t)$ (lower $x$ causes lower $q$).\n\n3. Model equations:\n- Hypoxic pulmonary vasoconstriction (HPV):\n$$\nq(t) \\;=\\; \\frac{1}{1 + \\exp\\!\\left(-k_{h}\\,\\big(x(t) - x_{50}\\big)\\right)}.\n$$\n- Chemoreflex setpoint for ventilation using a static nonlinearity $f$ and a fixed delay $\\tau_{d}$:\n$$\nf(c) \\;=\\; \\frac{1}{1 + \\exp\\!\\left(-k_{c}\\,\\big(c - c_{50}\\big)\\right)},\\qquad v_{\\text{set}}(t)\\;=\\; v_{\\text{base}} + G\\,f\\big(c(t-\\tau_{d})\\big).\n$$\n- Ventilation dynamics (first-order tracking of the setpoint):\n$$\n\\frac{dv}{dt} \\;=\\; \\frac{v_{\\text{set}}(t) - v(t)}{\\tau_{v}}.\n$$\n- Oxygen balance (inflow by ventilation, removal proportional to perfusion):\n$$\n\\frac{dx}{dt} \\;=\\; \\frac{v(t)\\,\\big(x_{I} - x(t)\\big)\\;-\\;\\beta\\, q(t)}{\\tau_{o}}.\n$$\n- Carbon dioxide balance (delivery proportional to perfusion, removal by ventilation):\n$$\n\\frac{dc}{dt} \\;=\\; \\frac{\\sigma\\, q(t)\\;-\\; v(t)\\,c(t)}{\\tau_{c}}.\n$$\n\n4. Numerical integration and delay:\n- Simulate these equations using an explicit forward-Euler method with fixed time step $\\Delta t = 0.01$, over a total duration $T = 200.0$ (all times are dimensionless).\n- Implement the delay $\\tau_{d}$ by using a history buffer of $c(t)$; assume $\\tau_{d}$ will always be an integer multiple of $\\Delta t$ in the provided test suite. For $t < \\tau_{d}$, use the initial value $c(0)$ for the delayed argument.\n- At every step, compute $q(t)$ directly from the current $x(t)$ using the HPV function above.\n- Keep $v(t) \\ge 0$, $c(t) \\ge 0$, and constrain $x(t)$ to remain within a reasonable range such as $[0, 1.5]$ by clamping if needed to avoid numerical overflow during transients.\n\n5. Quantity of interest:\n- Compute the ventilation-perfusion ratio time series\n$$\nr(t) \\;=\\; \\frac{v(t)}{\\max\\!\\big(q(t),\\epsilon\\big)},\n$$\nwith a small floor $\\epsilon = 10^{-6}$ to avoid division by zero.\n\n6. Initial conditions:\n- Run the simulation twice for each parameter set, using two distinct initial conditions to probe for bistability:\n    - Initial condition A: $x(0)=0.10$, $c(0)=0.20$, $v(0)=0.10$.\n    - Initial condition B: $x(0)=0.90$, $c(0)=1.00$, $v(0)=1.50$.\n\n7. Classification rule for each parameter set:\n- Define the analysis window as the final $40\\%$ of the simulation, i.e., times $t \\in [0.6\\,T,\\, T]$. Within this window, let $A$ be the amplitude defined as the maximum minus minimum of $r(t)$.\n- Count the number of local maxima $N_{p}$ of $r(t)$ in the window using the discrete criterion $r_{i-1} < r_{i} > r_{i+1}$; ignore spurious maxima by requiring each counted peak to exceed neighboring values by at least $\\delta = 0.02$ in absolute terms.\n- For each initial condition, compute $A$ and $N_{p}$ separately. If for either initial condition we have $A \\ge 0.15$ and $N_{p} \\ge 5$, classify the parameter set as oscillatory and return the integer $1$.\n- Otherwise, compute the mean values of $r(t)$ over the last $20\\%$ of the simulation, i.e., $t \\in [0.8\\,T,\\,T]$, for each initial condition; denote these by $\\bar{r}_{A}$ and $\\bar{r}_{B}$. If $\\lvert \\bar{r}_{A} - \\bar{r}_{B} \\rvert \\ge 0.20$, classify as bistable and return the integer $2$.\n- If neither of the above conditions holds, classify as a single stable fixed-point regime and return the integer $0$.\n\n8. Test suite:\nFor each test case below, you must simulate with the specified parameters, apply the classification rule above, and aggregate the results in order. All parameters are dimensionless.\n\nCommon parameters for all cases: $x_{I}=1.00$, $\\Delta t = 0.01$, $T=200.0$, $\\epsilon=10^{-6}$.\n\n- Case 1 (intended stable fixed point):\n    - $v_{\\text{base}}=0.20$, $G=0.80$, $\\tau_{v}=0.30$, $\\tau_{d}=0.00$,\n    - $\\beta=0.30$, $\\sigma=0.30$,\n    - $k_{h}=6.00$, $x_{50}=0.50$,\n    - $k_{c}=6.00$, $c_{50}=0.50$,\n    - $\\tau_{o}=1.00$, $\\tau_{c}=1.00$.\n- Case 2 (intended oscillatory due to control delay and high gain):\n    - $v_{\\text{base}}=0.05$, $G=5.00$, $\\tau_{v}=1.20$, $\\tau_{d}=4.00$,\n    - $\\beta=0.60$, $\\sigma=0.80$,\n    - $k_{h}=6.00$, $x_{50}=0.50$,\n    - $k_{c}=6.00$, $c_{50}=0.50$,\n    - $\\tau_{o}=1.00$, $\\tau_{c}=1.00$.\n- Case 3 (intended bistable via steep HPV and strong flow-gas coupling, minimal delay):\n    - $v_{\\text{base}}=0.02$, $G=0.50$, $\\tau_{v}=0.20$, $\\tau_{d}=0.00$,\n    - $\\beta=0.90$, $\\sigma=1.20$,\n    - $k_{h}=40.00$, $x_{50}=0.60$,\n    - $k_{c}=6.00$, $c_{50}=0.50$,\n    - $\\tau_{o}=1.00$, $\\tau_{c}=1.00$.\n\n9. Required final output format:\n- Your program should produce a single line of output containing a list with three integers, one for each case in the order provided, with no spaces, using the format\n\"[result_case1,result_case2,result_case3]\".", "solution": "The problem presented is a valid exercise in computational systems physiology. It requires the numerical simulation of a system of coupled, nonlinear ordinary differential equations with a time delay, representing a simplified model of ventilation-perfusion matching in a lung unit. The model is scientifically grounded in established physiological principles such as mass balance, hypoxic pulmonary vasoconstriction (HPV), and central chemoreflex control. The problem is well-posed, providing all necessary equations, parameters, initial conditions, numerical methods, and explicit criteria for classifying the system's dynamical behavior. It is objective and formalizable. Therefore, a solution will be provided.\n\nThe core of the problem is to solve the following system of delay-differential equations and analyze the resulting time series. The state variables are the normalized alveolar oxygen level $x(t)$, carbon dioxide level $c(t)$, and ventilation $v(t)$.\n\n1.  **Model Equations**:\n    The system is described by three first-order ordinary differential equations for the state variables $v(t)$, $x(t)$, and $c(t)$, and an algebraic equation for the perfusion $q(t)$.\n\n    -   Ventilation dynamics:\n        $$\n        \\frac{dv}{dt} \\;=\\; \\frac{v_{\\text{set}}(t) - v(t)}{\\tau_{v}}\n        $$\n    -   Oxygen balance:\n        $$\n        \\frac{dx}{dt} \\;=\\; \\frac{v(t)\\,\\big(x_{I} - x(t)\\big) \\;-\\; \\beta\\, q(t)}{\\tau_{o}}\n        $$\n    -   Carbon dioxide balance:\n        $$\n        \\frac{dc}{dt} \\;=\\; \\frac{\\sigma\\, q(t) \\;-\\; v(t)\\,c(t)}{\\tau_{c}}\n        $$\n\n2.  **Auxiliary Algebraic and Delay Relations**:\n    The variables $q(t)$ and $v_{\\text{set}}(t)$ are functions of the state variables.\n\n    -   Hypoxic Pulmonary Vasoconstriction (HPV) determines perfusion $q(t)$ as a sigmoidal function of the current oxygen level $x(t)$:\n        $$\n        q(t) \\;=\\; \\frac{1}{1 + \\exp\\!\\left(-k_{h}\\,\\big(x(t) - x_{50}\\big)\\right)}\n        $$\n    -   Central chemoreflex ventilatory drive $v_{\\text{set}}(t)$ is determined by a delayed carbon dioxide level $c(t-\\tau_{d})$:\n        $$\n        v_{\\text{set}}(t)\\;=\\; v_{\\text{base}} + G\\,f\\big(c(t-\\tau_{d})\\big), \\quad \\text{where} \\quad f(c) \\;=\\; \\frac{1}{1 + \\exp\\!\\left(-k_{c}\\,\\big(c - c_{50}\\big)\\right)}\n        $$\n\n3.  **Numerical Discretization**:\n    We employ the explicit forward-Euler method with a fixed time step $\\Delta t$. Let the state at time $t_i = i \\cdot \\Delta t$ be $(v_i, x_i, c_i)$. The state at the next time step $t_{i+1}$ is computed as follows:\n\n    -   First, calculate the auxiliary variables at time $t_i$:\n        The perfusion $q_i$ is calculated using the current oxygen level $x_i$:\n        $$\n        q_i \\;=\\; \\frac{1}{1 + \\exp\\!\\left(-k_{h}\\,\\big(x_i - x_{50}\\big)\\right)}\n        $$\n        The delayed carbon dioxide value, $c_{\\text{delayed}}$, is taken from a history buffer. Let $d = \\tau_d / \\Delta t$ be the delay in discrete steps. For $i < d$, we use $c_{\\text{delayed}} = c_0$. For $i \\ge d$, we use $c_{\\text{delayed}} = c_{i-d}$. The ventilation setpoint $v_{\\text{set}, i}$ is then:\n        $$\n        v_{\\text{set}, i} \\;=\\; v_{\\text{base}} + G \\cdot \\frac{1}{1 + \\exp\\!\\left(-k_{c}\\,\\big(c_{\\text{delayed}} - c_{50}\\big)\\right)}\n        $$\n\n    -   Next, apply the forward-Euler update rule for each state variable:\n        $$\n        v_{i+1} \\;=\\; v_i + \\Delta t \\cdot \\frac{v_{\\text{set}, i} - v_i}{\\tau_{v}}\n        $$\n        $$\n        x_{i+1} \\;=\\; x_i + \\Delta t \\cdot \\frac{v_i(x_I - x_i) - \\beta q_i}{\\tau_{o}}\n        $$\n        $$\n        c_{i+1} \\;=\\; c_i + \\Delta t \\cdot \\frac{\\sigma q_i - v_i c_i}{\\tau_{c}}\n        $$\n\n    -   Finally, apply the specified constraints to ensure numerical stability and physical plausibility:\n        $$\n        v_{i+1} \\leftarrow \\max(0, v_{i+1})\n        $$\n        $$\n        c_{i+1} \\leftarrow \\max(0, c_{i+1})\n        $$\n        $$\n        x_{i+1} \\leftarrow \\text{clip}(x_{i+1}, 0, 1.5)\n        $$\n\n4.  **Simulation and Analysis Protocol**:\n    For each parameter set provided in the test suite, two separate simulations are performed, starting from initial conditions A ($x(0)=0.10, c(0)=0.20, v(0)=0.10$) and B ($x(0)=0.90, c(0)=1.00, v(0)=1.50$). The total simulation time is $T=200.0$ with a time step of $\\Delta t=0.01$.\n\n    After each simulation, the ventilation-perfusion ratio time series, $r(t)$, is computed:\n    $$\n    r(t) \\;=\\; \\frac{v(t)}{\\max\\!\\big(q(t),\\epsilon\\big)}\n    $$\n    where $\\epsilon = 10^{-6}$ is a small constant to prevent division by zero.\n\n5.  **Dynamical Regime Classification**:\n    The behavior of the system is classified based on the properties of the $r(t)$ time series from both simulations (A and B).\n\n    -   **Oscillatory (1)**: The system is classified as oscillatory if, for either initial condition A or B, the analysis of $r(t)$ over the time window $t \\in [0.6T, T]$ yields both an amplitude $A = \\max(r) - \\min(r) \\ge 0.15$ and a peak count $N_p \\ge 5$. A peak at index $j$ is counted only if it is a local maximum ($r_{j-1} < r_j > r_{j+1}$) and is significant, meaning it exceeds its immediate neighbors by at least $\\delta = 0.02$ (i.e., $r_j - r_{j-1} \\ge \\delta$ and $r_j - r_{j+1} \\ge \\delta$).\n\n    -   **Bistable (2)**: If the system is not classified as oscillatory, it is checked for bistability. The mean values of $r(t)$, denoted $\\bar{r}_A$ and $\\bar{r}_B$, are computed over the final $20\\%$ of the simulation time ($t \\in [0.8T, T]$) for each initial condition. If the absolute difference between these mean values is sufficiently large, $|\\bar{r}_A - \\bar{r}_B| \\ge 0.20$, the system is classified as bistable.\n\n    -   **Stable Fixed Point (0)**: If neither of the above conditions is met, the system is assumed to converge to a single stable fixed point, regardless of the initial condition, and is classified as such.\n\nThe implementation will follow this logic precisely to determine the classification for each of the three test cases.", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the ventilation-perfusion matching model problem.\n\n    This function simulates a dimensionless dynamical model for ventilation-perfusion\n    matching in a lung unit for three different parameter sets. Each parameter set\n    is simulated with two different initial conditions to test for bistability.\n    The resulting time series are analyzed to classify the system's behavior as\n    a stable fixed point (0), oscillatory (1), or bistable (2).\n    \"\"\"\n\n    # Common parameters for all test cases\n    common_params = {\n        'x_I': 1.00,\n        'dt': 0.01,\n        'T': 200.0,\n        'epsilon': 1e-6,\n    }\n\n    # Specific parameters for each test case\n    test_cases = [\n        # Case 1: Intended stable fixed point\n        {\n            'v_base': 0.20, 'G': 0.80, 'tau_v': 0.30, 'tau_d': 0.00, 'beta': 0.30,\n            'sigma': 0.30, 'k_h': 6.00, 'x_50': 0.50, 'k_c': 6.00, 'c_50': 0.50,\n            'tau_o': 1.00, 'tau_c': 1.00\n        },\n        # Case 2: Intended oscillatory\n        {\n            'v_base': 0.05, 'G': 5.00, 'tau_v': 1.20, 'tau_d': 4.00, 'beta': 0.60,\n            'sigma': 0.80, 'k_h': 6.00, 'x_50': 0.50, 'k_c': 6.00, 'c_50': 0.50,\n            'tau_o': 1.00, 'tau_c': 1.00\n        },\n        # Case 3: Intended bistable\n        {\n            'v_base': 0.02, 'G': 0.50, 'tau_v': 0.20, 'tau_d': 0.00, 'beta': 0.90,\n            'sigma': 1.20, 'k_h': 40.00, 'x_50': 0.60, 'k_c': 6.00, 'c_50': 0.50,\n            'tau_o': 1.00, 'tau_c': 1.00\n        }\n    ]\n\n    # Initial conditions\n    initial_conditions = {\n        'A': {'x0': 0.10, 'c0': 0.20, 'v0': 0.10},\n        'B': {'x0': 0.90, 'c0': 1.00, 'v0': 1.50}\n    }\n\n    results = []\n    \n    for case_params in test_cases:\n        params = {**common_params, **case_params}\n        r_series_A = run_simulation(params, initial_conditions['A'])\n        r_series_B = run_simulation(params, initial_conditions['B'])\n        \n        classification = classify_behavior(r_series_A, r_series_B, params)\n        results.append(classification)\n\n    print(f\"[{','.join(map(str, results))}]\")\n\ndef run_simulation(params, ic):\n    \"\"\"\n    Simulates the model using the forward-Euler method for a given set of\n    parameters and initial conditions.\n    \"\"\"\n    dt = params['dt']\n    T = params['T']\n    num_steps = int(T / dt)\n    \n    # Unpack parameters\n    x_I, epsilon = params['x_I'], params['epsilon']\n    v_base, G, tau_v, tau_d, beta, sigma = params['v_base'], params['G'], params['tau_v'], params['tau_d'], params['beta'], params['sigma']\n    k_h, x_50, k_c, c_50 = params['k_h'], params['x_50'], params['k_c'], params['c_50']\n    tau_o, tau_c = params['tau_o'], params['tau_c']\n\n    # Initialize state arrays\n    x = np.zeros(num_steps + 1)\n    c = np.zeros(num_steps + 1)\n    v = np.zeros(num_steps + 1)\n    q = np.zeros(num_steps + 1)\n    \n    x[0], c[0], v[0] = ic['x0'], ic['c0'], ic['v0']\n    \n    delay_steps = int(tau_d / dt)\n\n    # Simulation loop\n    for i in range(num_steps):\n        # Get delayed value of c\n        c_delayed = c[i - delay_steps] if i >= delay_steps else c[0]\n        \n        # Calculate auxiliary variables\n        f_c = 1.0 / (1.0 + np.exp(-k_c * (c_delayed - c_50)))\n        v_set = v_base + G * f_c\n        \n        q_i = 1.0 / (1.0 + np.exp(-k_h * (x[i] - x_50)))\n        q[i] = q_i\n\n        # Calculate derivatives\n        dv_dt = (v_set - v[i]) / tau_v\n        dx_dt = (v[i] * (x_I - x[i]) - beta * q_i) / tau_o\n        dc_dt = (sigma * q_i - v[i] * c[i]) / tau_c\n        \n        # Update states using forward-Euler\n        v_next = v[i] + dt * dv_dt\n        x_next = x[i] + dt * dx_dt\n        c_next = c[i] + dt * dc_dt\n        \n        # Apply constraints\n        v[i+1] = max(0.0, v_next)\n        x[i+1] = np.clip(x_next, 0.0, 1.5)\n        c[i+1] = max(0.0, c_next)\n\n    # Final q value\n    q[num_steps] = 1.0 / (1.0 + np.exp(-k_h * (x[num_steps] - x_50)))\n\n    # Calculate V/Q ratio\n    r_series = v / np.maximum(q, epsilon)\n    return r_series\n\ndef classify_behavior(r_A, r_B, params):\n    \"\"\"\n    Classifies the system behavior based on the V/Q ratio time series\n    from two simulations (initial conditions A and B).\n    \"\"\"\n    dt = params['dt']\n    T = params['T']\n    \n    is_oscillatory = False\n\n    # Classification rule parameters\n    osc_amp_thresh = 0.15\n    osc_peak_thresh = 5\n    peak_delta = 0.02\n    bistable_diff_thresh = 0.20\n\n    # Check for oscillations\n    oscillation_start_idx = int(0.6 * T / dt)\n    for r_series in [r_A, r_B]:\n        r_window = r_series[oscillation_start_idx:]\n        \n        amplitude = np.max(r_window) - np.min(r_window)\n        \n        num_peaks = 0\n        for i in range(1, len(r_window) - 1):\n            is_peak = (r_window[i] > r_window[i-1]) and (r_window[i] > r_window[i+1])\n            if is_peak:\n                is_significant = (r_window[i] - r_window[i-1] >= peak_delta) and \\\n                                 (r_window[i] - r_window[i+1] >= peak_delta)\n                if is_significant:\n                    num_peaks += 1\n        \n        if amplitude >= osc_amp_thresh and num_peaks >= osc_peak_thresh:\n            is_oscillatory = True\n            break\n            \n    if is_oscillatory:\n        return 1\n\n    # Check for bistability\n    bistable_start_idx = int(0.8 * T / dt)\n    mean_r_A = np.mean(r_A[bistable_start_idx:])\n    mean_r_B = np.mean(r_B[bistable_start_idx:])\n    \n    if abs(mean_r_A - mean_r_B) >= bistable_diff_thresh:\n        return 2\n\n    # Default to stable fixed point\n    return 0\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "2621257"}]}