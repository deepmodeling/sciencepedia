{"hands_on_practices": [{"introduction": "The initiation of most signal transduction pathways begins with the binding of a ligand to its receptor. While simplified models often assume the ligand is in vast excess, this is not always the case within crowded biological microenvironments. This practice builds your foundational skills by challenging you to move beyond this simplification and calculate the equilibrium state of a receptor-ligand system while accounting for ligand depletion, a subtle but critical form of resource competition that can constitute network crosstalk [@problem_id:2605662]. Mastering this calculation is essential for accurately predicting receptor occupancy and the initial strength of a signal under physiological conditions.", "problem": "A single plasma membrane receptor species mediates signal initiation in response to a soluble ligand in a well-mixed extracellular compartment. Assume monovalent binding with a single site per receptor, no receptor dimerization, no internalization, and no competing binding partners or off-target sinks (that is, no network crosstalk). The reaction is thermodynamically reversible and reaches equilibrium. The total receptor concentration is $R_T = 100\\,\\mathrm{nM}$, the total ligand concentration is $L_T = 50\\,\\mathrm{nM}$, and the equilibrium dissociation constant is $K_d = 10\\,\\mathrm{nM}$. Using only the law of mass action, the definition of the equilibrium dissociation constant, and conservation of mass, compute the equilibrium fraction of receptor that is ligand-bound while correctly accounting for ligand depletion. Express your final answer as a unitless decimal fraction rounded to $4$ significant figures.", "solution": "We consider a single reversible binding reaction between free receptor $R$ and free ligand $L$ forming a complex $C$:\n$$\nR + L \\rightleftharpoons C.\n$$\nBy the law of mass action at equilibrium, the equilibrium dissociation constant $K_d$ is defined as\n$$\nK_d = \\frac{[R][L]}{[C]}.\n$$\nMass conservation yields\n$$\nR_T = [R] + [C], \\quad L_T = [L] + [C],\n$$\nwhere $R_T$ and $L_T$ denote the total receptor and total ligand concentrations, respectively. Let $x = [C]$ be the equilibrium concentration of the complex. Then $[R] = R_T - x$ and $[L] = L_T - x$. Substituting into the definition of $K_d$ gives\n$$\nK_d = \\frac{(R_T - x)(L_T - x)}{x}.\n$$\nRearranging,\n$$\nK_d x = (R_T - x)(L_T - x) = R_T L_T - (R_T + L_T)x + x^2,\n$$\nwhich yields the quadratic equation in $x$:\n$$\nx^2 - (R_T + L_T + K_d)x + R_T L_T = 0.\n$$\nThe physically admissible root (the one that lies between $0$ and $\\min\\{R_T, L_T\\}$) is\n$$\nx = \\frac{(R_T + L_T + K_d) - \\sqrt{(R_T + L_T + K_d)^2 - 4 R_T L_T}}{2}.\n$$\nThe equilibrium fraction of receptor that is ligand-bound is\n$$\nf = \\frac{[C]}{R_T} = \\frac{x}{R_T}.\n$$\nWe now substitute the given values $R_T = 100\\,\\mathrm{nM}$, $L_T = 50\\,\\mathrm{nM}$, and $K_d = 10\\,\\mathrm{nM}$:\n$$\nR_T + L_T + K_d = 100 + 50 + 10 = 160\\,\\mathrm{nM},\n$$\n$$\n4 R_T L_T = 4 \\times 100 \\times 50 = 20000\\,\\mathrm{nM}^2,\n$$\n$$\n(R_T + L_T + K_d)^2 = 160^2 = 25600\\,\\mathrm{nM}^2,\n$$\nso the discriminant is\n$$\n\\Delta = 25600 - 20000 = 5600\\,\\mathrm{nM}^2,\n$$\nand\n$$\n\\sqrt{\\Delta} = \\sqrt{5600} \\approx 74.83314773547883\\,\\mathrm{nM}.\n$$\nThus\n$$\nx = \\frac{160 - 74.83314773547883}{2}\\,\\mathrm{nM} \\approx 42.58342613226058\\,\\mathrm{nM},\n$$\nand the fraction bound is\n$$\nf = \\frac{x}{R_T} \\approx \\frac{42.58342613226058}{100} = 0.4258342613226058.\n$$\nRounded to $4$ significant figures as a unitless decimal fraction,\n$$\nf \\approx 0.4258.\n$$", "answer": "$$\\boxed{0.4258}$$", "id": "2605662"}, {"introduction": "This practice elevates our understanding from steady-state analysis to the dynamic behavior of a complete signaling system. You will implement and simulate a model of the NF-$\\kappa$B pathway, a textbook example of how a delayed negative feedback loop, a concept explored in the previous exercise, can generate oscillations in a cell's response. This computational problem provides direct, hands-on experience in seeing how a cell can decode the duration of an input signal into a distinct temporal pattern of downstream activity, a sophisticated form of information processing that governs cell fate decisions in immunity and development [@problem_id:2605661].", "problem": "You are given a minimal dynamical model of Nuclear Factor kappa-light-chain-enhancer of activated B cells (NF-$\\kappa$B) signaling with inhibitor of kappa B ($I\\kappa B$) negative feedback and a pulsed inhibitor of kappa B kinase (IKK) input. The model is based on mass-action style kinetics and a Hill-type transcriptional regulation, which are standard in biochemical reaction network modeling. You will implement the model, simulate it for a set of IKK pulse durations, and compute the number of peaks in nuclear NF-$\\kappa$B translocation for each case. Finally, you will justify the observed dependence on pulse duration using a timescale argument.\n\nFundamental base and assumptions:\n- Use ordinary differential equations derived from mass balance and mass-action-like kinetics for species interconversion and degradation.\n- Use a Hill function to represent transcriptional activation of $I\\kappa B$ messenger ribonucleic acid (mRNA) by nuclear NF-$\\kappa$B, which is a standard coarse-grained representation of cooperative promoter activation.\n- Conserve total NF-$\\kappa$B abundance at a fixed value and represent sequestration of cytosolic NF-$\\kappa$B by $I\\kappa B$ as a reduction in the pool available for nuclear import.\n\nState variables:\n- $I_m(t)$: $I\\kappa B$ mRNA abundance (arbitrary units).\n- $I(t)$: $I\\kappa B$ protein abundance (arbitrary units).\n- $N_n(t)$: nuclear NF-$\\kappa$B abundance (arbitrary units).\n\nInput:\n- $u(t)$: IKK activity modeled as a rectangular pulse of amplitude $A$ and duration $D$ minutes, where $u(t) = A$ for $0 \\le t \\le D$ and $u(t) = 0$ otherwise.\n\nModel equations:\n- $$\\frac{d I_m}{dt} = k_{\\mathrm{tx}} \\cdot \\frac{N_n(t)^h}{K^h + N_n(t)^h} - k_{\\mathrm{mdeg}} \\cdot I_m(t)$$\n- $$\\frac{d I}{dt} = k_{\\mathrm{tl}} \\cdot I_m(t) - \\left(k_{\\mathrm{deg0}} + k_{\\mathrm{deg1}} \\cdot u(t)\\right) \\cdot I(t)$$\n- $$\\frac{d N_n}{dt} = k_{\\mathrm{in}} \\cdot N_{\\mathrm{free}}(t) - k_{\\mathrm{out}} \\cdot N_n(t)$$\nwith\n- $$N_{\\mathrm{free}}(t) = \\frac{N_{\\mathrm{tot}} - N_n(t)}{1 + \\alpha \\cdot I(t)}$$\nwhich phenomenologically captures cytosolic sequestration of NF-$\\kappa$B by $I\\kappa B$.\n\nParameters to use (time in minutes, all other quantities in consistent arbitrary units):\n- $N_{\\mathrm{tot}} = 1.0$\n- $k_{\\mathrm{in}} = 0.5$\n- $k_{\\mathrm{out}} = 0.05$\n- $\\alpha = 50.0$\n- $k_{\\mathrm{tx}} = 0.5$\n- $K = 0.2$\n- $h = 4$\n- $k_{\\mathrm{mdeg}} = 0.01$\n- $k_{\\mathrm{tl}} = 0.1$\n- $k_{\\mathrm{deg0}} = 0.002$\n- $k_{\\mathrm{deg1}} = 0.01$\n- $A = 1.0$\n\nSimulation protocol:\n- Pre-equilibrate the system under no stimulus by simulating with $u(t) \\equiv 0$ from $t = 0$ to $t = T_{\\mathrm{pre}}$, where $T_{\\mathrm{pre}} = 1000$ minutes. Use any reasonable nonnegative initial condition and take the end state as the steady-state initial condition at $t = 0$ for the pulse simulation.\n- For each pulse duration $D$, simulate the system from $t = 0$ to $t = T_{\\mathrm{sim}}(D)$ with the input $u(t)$ as defined above, where $T_{\\mathrm{sim}}(D) = D + T_{\\mathrm{post}}$ and $T_{\\mathrm{post}} = 360$ minutes. Time is in minutes.\n- Sample the nuclear NF-$\\kappa$B trajectory $N_n(t)$ at a uniform resolution fine enough to detect peaks; a step size of $\\Delta t = 0.5$ minutes is sufficient.\n\nPeak counting:\n- Define a nuclear translocation peak as a local maximum of $N_n(t)$ satisfying a minimum height condition $N_n \\ge N_{\\mathrm{th}}$ and a minimum prominence to avoid counting noise, with $N_{\\mathrm{th}} = 0.15$ and a minimum prominence of $0.05$ (in the same arbitrary units as $N_n$).\n- To avoid counting potential numerical artifacts at the very start of the time course, discard any peaks occurring before $t_{\\mathrm{min}} = 1.0$ minutes.\n- Impose a minimum time between peaks of $\\Delta t_{\\mathrm{min}} = 20$ minutes to reflect the biological refractory period associated with I$\\kappa$B resynthesis.\n\nRequired outputs:\n- For each pulse duration $D$, compute the integer number of peaks in $N_n(t)$ over the interval $t \\in [0, T_{\\mathrm{sim}}(D)]$ according to the criteria above.\n\nTest suite:\n- Use the following IKK pulse durations (in minutes): $[0.0, 5.0, 30.0, 120.0, 480.0]$.\n\nFinal output format:\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, for example, $\"[r_1,r_2,r_3,r_4,r_5]\"$, where each $r_i$ is the integer number of peaks for the corresponding test case in the order given.\n\nDeliverables:\n- A complete program that performs the pre-equilibration, runs the simulations for the specified pulse durations, counts peaks as specified, and prints the single-line output in the exact format above. Include, in comments or documentation, a brief timescale-based justification explaining why increasing the IKK pulse duration $D$ tends to increase the number of nuclear translocation peaks in this negative feedback system. All time quantities must be interpreted in minutes, and the outputs are unitless integers.", "solution": "The problem is subjected to validation.\n\n**Step 1: Extract Givens**\nThe provided information consists of a system of ordinary differential equations (ODEs), parameters, and a simulation protocol.\n- State Variables: $I_m(t)$ ($I\\kappa B$ mRNA), $I(t)$ ($I\\kappa B$ protein), $N_n(t)$ (nuclear NF-$\\kappa$B).\n- Input Signal: $u(t)$ representing IKK activity, where $u(t) = A$ for $0 \\le t \\le D$ and $u(t) = 0$ otherwise.\n- Model Equations:\n$$ \\frac{d I_m}{dt} = k_{\\mathrm{tx}} \\cdot \\frac{N_n(t)^h}{K^h + N_n(t)^h} - k_{\\mathrm{mdeg}} \\cdot I_m(t) $$\n$$ \\frac{d I}{dt} = k_{\\mathrm{tl}} \\cdot I_m(t) - \\left(k_{\\mathrm{deg0}} + k_{\\mathrm{deg1}} \\cdot u(t)\\right) \\cdot I(t) $$\n$$ \\frac{d N_n}{dt} = k_{\\mathrm{in}} \\cdot N_{\\mathrm{free}}(t) - k_{\\mathrm{out}} \\cdot N_n(t) $$\n- Auxiliary Equation:\n$$ N_{\\mathrm{free}}(t) = \\frac{N_{\\mathrm{tot}} - N_n(t)}{1 + \\alpha \\cdot I(t)} $$\n- Parameters: $N_{\\mathrm{tot}} = 1.0$, $k_{\\mathrm{in}} = 0.5 \\text{ min}^{-1}$, $k_{\\mathrm{out}} = 0.05 \\text{ min}^{-1}$, $\\alpha = 50.0$, $k_{\\mathrm{tx}} = 0.5 \\text{ min}^{-1}$, $K = 0.2$, $h = 4$, $k_{\\mathrm{mdeg}} = 0.01 \\text{ min}^{-1}$, $k_{\\mathrm{tl}} = 0.1 \\text{ min}^{-1}$, $k_{\\mathrm{deg0}} = 0.002 \\text{ min}^{-1}$, $k_{\\mathrm{deg1}} = 0.01 \\text{ min}^{-1}$, $A = 1.0$.\n- Simulation Protocol:\n  - Pre-equilibration: $T_{\\mathrm{pre}} = 1000$ min with $u(t)=0$.\n  - Simulation: For each duration $D$, integrate from $t=0$ to $T_{\\mathrm{sim}}(D) = D + 360$ min.\n  - Time step for sampling: $\\Delta t = 0.5$ min.\n- Peak Counting Criteria:\n  - Minimum height: $N_{\\mathrm{th}} = 0.15$.\n  - Minimum prominence: $0.05$.\n  - Minimum start time: $t_{\\mathrm{min}} = 1.0$ min.\n  - Minimum separation: $\\Delta t_{\\mathrm{min}} = 20$ min.\n- Test Cases for $D$: $[0.0, 5.0, 30.0, 120.0, 480.0]$ minutes.\n\n**Step 2: Validate Using Extracted Givens**\nThe problem is analyzed for validity.\n- **Scientific Grounding**: The model is a standard representation of the NF-$\\kappa$B signaling pathway, a canonical example of a biological oscillator driven by a negative feedback loop. The mathematical formulation using mass-action kinetics and a Hill function is a well-established and scientifically sound method in systems biology.\n- **Well-Posedness**: The problem defines a non-autonomous system of first-order ODEs with specified parameters and a procedure for determining initial conditions. The right-hand side of the ODE system is composed of elementary functions that are continuously differentiable (Lipschitz continuous) over the domain of biological interest (non-negative concentrations). This guarantees the existence and uniqueness of a solution for a given initial condition, making it a well-posed initial value problem.\n- **Completeness and Consistency**: The problem is self-contained. All necessary equations, constants, initial/boundary conditions, and analysis procedures are explicitly provided. There are no contradictions. The units are consistent (time in minutes, concentrations in arbitrary units).\n\n**Step 3: Verdict and Action**\nThe problem is **valid**. It is a well-defined, scientifically grounded problem in computational systems biology. I will proceed with the solution.\n\n**Solution Procedure**\n\nThe solution involves three main stages: system pre-equilibration, stimulus-response simulation, and trajectory analysis for peak counting.\n\n1.  **System Pre-equilibration**: To establish the basal, un-stimulated state of the system, we must first find the steady-state concentrations of all species in the absence of the IKK stimulus. This is achieved by solving the system of ODEs with the input $u(t)$ set to zero for all time.\n    The system to be solved is:\n    $$ \\frac{d I_m}{dt} = k_{\\mathrm{tx}} \\frac{N_n^h}{K^h + N_n^h} - k_{\\mathrm{mdeg}} I_m $$\n    $$ \\frac{d I}{dt} = k_{\\mathrm{tl}} I_m - k_{\\mathrm{deg0}} I $$\n    $$ \\frac{d N_n}{dt} = k_{\\mathrm{in}} \\frac{N_{\\mathrm{tot}} - N_n}{1 + \\alpha I} - k_{\\mathrm{out}} N_n $$\n    We integrate this system numerically from a non-negative initial condition (e.g., $[I_m, I, N_n] = [0, 0, 0]$) for a duration $T_{\\mathrm{pre}} = 1000$ minutes. This time is sufficiently long for the system to converge to its fixed point. The state vector at $t = T_{\\mathrm{pre}}$ is then used as the initial condition, $\\vec{y}_0 = [I_m(0), I(0), N_n(0)]$, for the subsequent simulations.\n\n2.  **Stimulus-Response Simulation**: For each pulse duration $D$ in the provided test suite, the full system, including the time-dependent input $u(t)$, is simulated. The ODE system is integrated from $t=0$ to $T_{\\mathrm{sim}}(D) = D + 360$ minutes, starting from the pre-equilibrated state $\\vec{y}_0$. The input $u(t)$ is implemented as a piecewise function:\n    $$ u(t) = \\begin{cases} A, & \\text{if } 0 \\le t \\le D \\\\ 0, & \\text{if } t > D \\end{cases} $$\n    The numerical integration is performed using a robust ODE solver, such as `scipy.integrate.solve_ivp`, with the solution evaluated at uniform time intervals of $\\Delta t = 0.5$ minutes to generate the time series for $N_n(t)$.\n\n3.  **Peak Detection and Counting**: The simulated trajectory of nuclear NF-$\\kappa$B, $N_n(t)$, is analyzed to quantify the number of translocation events. A peak is defined as a local maximum in the $N_n(t)$ signal. We use a standard peak detection algorithm, for example `scipy.signal.find_peaks`, to identify these maxima. The identified peaks are then filtered according to the following strict criteria:\n    - The peak height must be $N_n(t_{\\text{peak}}) \\ge N_{\\mathrm{th}} = 0.15$.\n    - The peak must have a prominence of at least $0.05$. Prominence measures how much a peak stands out from the surrounding signal.\n    - Peaks occurring before $t_{\\mathrm{min}} = 1.0$ minute are discarded to avoid numerical artifacts at the beginning of the simulation.\n    - A minimum temporal separation of $\\Delta t_{\\mathrm{min}} = 20$ minutes between consecutive peaks is enforced. This reflects a biological refractory period.\n    The final count of peaks passing all filters is the result for a given pulse duration $D$.\n\nThis entire procedure is repeated for each value of $D$ in the test suite to generate the final list of results. The justification for the resulting trend is provided in the documentation of the implementation code.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.integrate import solve_ivp\nfrom scipy.signal import find_peaks\n\ndef solve():\n    \"\"\"\n    This program solves a minimal dynamical model of NF-κB signaling to determine\n    the number of nuclear translocation peaks as a function of stimulus duration.\n\n    Timescale-based justification for observed behavior:\n    The NF-κB signaling system modeled here is a classic negative feedback oscillator.\n    1.  Stimulus Onset: The IKK stimulus `u(t)` enhances degradation of the inhibitor `I` (IκB).\n        This frees NF-κB from cytoplasmic sequestration.\n    2.  First Peak: Free NF-κB translocates to the nucleus, causing `N_n` to rise and form a peak.\n    3.  Negative Feedback: High `N_n` transcriptionally upregulates its own inhibitor `I` via an intermediate `I_m` (IκB mRNA).\n        This feedback has an inherent time delay due to the sequential processes of transcription and translation.\n    4.  Repression: As newly synthesized `I` protein accumulates, it sequesters NF-κB in the cytoplasm again,\n        and nuclear export further reduces `N_n`, causing the signal to fall.\n    5.  Sustained Oscillations: If the stimulus duration `D` is long enough to outlast the feedback delay,\n        the IKK activity will degrade the newly synthesized inhibitor, re-initiating the cycle and\n        leading to subsequent peaks. The system's intrinsic oscillatory period is determined by the\n        timescales of transcription, translation, and nuclear transport.\n    6.  Dependence on D: The number of peaks is therefore dependent on the ratio of the stimulus duration `D` to the\n        system's intrinsic feedback period `tau_fb`.\n        - If `D` is very short (shorter than the time to the first peak), no significant response occurs.\n        - If `D` is long enough for one response but shorter than `tau_fb`, one peak is observed.\n        - As `D` increases, it can encompass multiple cycles of `tau_fb`, allowing the system to oscillate\n          and produce a greater number of peaks before the stimulus is removed and the system damps\n          back to its steady state. Thus, the number of peaks is expected to be a non-decreasing\n          function of `D`.\n    \"\"\"\n\n    # Define model parameters\n    params = {\n        'N_tot': 1.0,\n        'k_in': 0.5,\n        'k_out': 0.05,\n        'alpha': 50.0,\n        'k_tx': 0.5,\n        'K': 0.2,\n        'h': 4.0,\n        'k_mdeg': 0.01,\n        'k_tl': 0.1,\n        'k_deg0': 0.002,\n        'k_deg1': 0.01,\n        'A': 1.0,  # Amplitude of u(t)\n    }\n\n    # Simulation and analysis parameters\n    T_pre = 1000.0  # min\n    T_post = 360.0  # min\n    dt = 0.5  # min\n\n    # Peak counting parameters\n    N_th = 0.15\n    prominence = 0.05\n    t_min_peak = 1.0  # min\n    delta_t_min_peak = 20.0  # min\n    \n    # Test suite for pulse durations D\n    test_cases = [0.0, 5.0, 30.0, 120.0, 480.0]\n\n    # --- Step 1: Pre-equilibration ---\n    def odes_pre(t, y, p):\n        I_m, I, N_n = y\n        # No stimulus, u(t) = 0\n        N_free = (p['N_tot'] - N_n) / (1.0 + p['alpha'] * I)\n        \n        dIm_dt = p['k_tx'] * (N_n**p['h']) / (p['K']**p['h'] + N_n**p['h']) - p['k_mdeg'] * I_m\n        dI_dt = p['k_tl'] * I_m - p['k_deg0'] * I\n        dNn_dt = p['k_in'] * N_free - p['k_out'] * N_n\n        \n        return [dIm_dt, dI_dt, dNn_dt]\n\n    y0_initial = [0.0, 0.0, 0.0]\n    sol_pre = solve_ivp(\n        odes_pre,\n        [0, T_pre],\n        y0_initial,\n        args=(params,),\n        dense_output=True\n    )\n    y0_ss = sol_pre.sol(T_pre)\n\n    # --- Step 2  3: Simulation and Peak Counting Loop ---\n    \n    def odes_pulse(t, y, p, D):\n        I_m, I, N_n = y\n        \n        u_t = p['A'] if 0 = t = D else 0.0\n        \n        N_free = (p['N_tot'] - N_n) / (1.0 + p['alpha'] * I)\n        \n        dIm_dt = p['k_tx'] * (N_n**p['h']) / (p['K']**p['h'] + N_n**p['h']) - p['k_mdeg'] * I_m\n        dI_dt = p['k_tl'] * I_m - (p['k_deg0'] + p['k_deg1'] * u_t) * I\n        dNn_dt = p['k_in'] * N_free - p['k_out'] * N_n\n        \n        return [dIm_dt, dI_dt, dNn_dt]\n\n    results = []\n    for D in test_cases:\n        T_sim = D + T_post\n        t_eval = np.arange(0, T_sim + dt, dt)\n        \n        sol = solve_ivp(\n            odes_pulse,\n            [0, T_sim],\n            y0_ss,\n            args=(params, D),\n            t_eval=t_eval,\n            method='RK45'\n        )\n        \n        t_traj = sol.t\n        Nn_traj = sol.y[2, :]\n\n        # Peak counting\n        distance_indices = int(delta_t_min_peak / dt)\n        \n        peaks, _ = find_peaks(\n            Nn_traj,\n            height=N_th,\n            prominence=prominence,\n            distance=distance_indices\n        )\n        \n        # Filter peaks by minimum time\n        final_peaks = [p for p in peaks if t_traj[p] >= t_min_peak]\n        \n        num_peaks = len(final_peaks)\n        results.append(num_peaks)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2605661"}]}