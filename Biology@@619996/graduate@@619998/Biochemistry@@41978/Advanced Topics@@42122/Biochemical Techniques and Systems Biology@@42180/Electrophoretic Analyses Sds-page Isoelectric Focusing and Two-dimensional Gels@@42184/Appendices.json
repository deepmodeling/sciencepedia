{"hands_on_practices": [{"introduction": "A foundational skill in proteomics is the ability to predict a protein's behavior based on its primary structure. The isoelectric point ($pI$) is a critical physicochemical property that dictates a protein's migration in isoelectric focusing (IEF), the first dimension of 2D-PAGE. This practice [@problem_id:2559109] challenges you to move beyond simple approximations and apply first principles of acid-base chemistry to calculate the precise $pI$ of a peptide. By constructing the net charge function from the $pK_a$ values of its ionizable groups, you will gain a deep, quantitative understanding of how a protein's charge profile varies with $pH$.", "problem": "In isoelectric focusing (IEF), the first dimension of a 2-dimensional gel system, a protein or peptide migrates to the position along the immobilized pH gradient where its net charge is zero, the isoelectric point ($pI$). Consider a peptide that contains exactly one lysine side chain, one histidine side chain, one aspartate side chain, a free $\\mathrm{N}$-terminus, and a free $\\mathrm{C}$-terminus. Assume these are the only ionizable groups, they titrate independently, and activity effects are negligible. The acid dissociation constants are given as follows: lysine side chain $pK_a=10.5$, histidine side chain $pK_a=6.0$, aspartate side chain $pK_a=3.9$, $\\mathrm{N}$-terminus $pK_a=8.0$, and $\\mathrm{C}$-terminus $pK_a=3.1$.\n\nStarting from the definitions of acid–base equilibria and the Henderson–Hasselbalch relation, express the fractional charges of each ionizable group as a function of $pH$, construct the net charge function $q(pH)$ as the sum of the fractional positive charges minus the sum of the fractional negative charges, and solve $q(pH)=0$ to obtain the peptide’s isoelectric point. Report the $pI$ as a pure number (no units), and round your answer to 4 significant figures.", "solution": "The problem requires the calculation of the isoelectric point ($pI$) of a peptide with five ionizable groups. The isoelectric point is the $pH$ at which the net electrical charge of the molecule is zero. The solution must be derived from fundamental principles of acid-base equilibria.\n\nAn ionizable group can be classified as either acidic or basic.\n\nFor a basic group, such as an amino group, the equilibrium is written as $BH^+ \\rightleftharpoons B + H^+$, where $BH^+$ is the protonated, positively charged form and $B$ is the deprotonated, neutral form. The acid dissociation constant is $K_a = \\frac{[B][H^+]}{[BH^+]}$. The charge on this group is $+1$ times the fraction of the molecules in the protonated state, $\\alpha_{BH^+}$.\n$$ \\alpha_{BH^+} = \\frac{[BH^+]}{[BH^+] + [B]} = \\frac{1}{1 + \\frac{[B]}{[BH^+]}} $$\nUsing the definition of $K_a$, we can write $\\frac{[B]}{[BH^+]} = \\frac{K_a}{[H^+]} = 10^{pH - pK_a}$.\nThe charge contribution from a single basic group, $q_{basic}$, is therefore:\n$$ q_{basic} = (+1) \\cdot \\alpha_{BH^+} = \\frac{1}{1 + 10^{pH - pK_a}} $$\nThe peptide contains three such groups: the $\\mathrm{N}$-terminus ($pK_a = 8.0$), the lysine side chain ($pK_a = 10.5$), and the histidine side chain ($pK_a = 6.0$).\n\nFor an acidic group, such as a carboxyl group, the equilibrium is $HA \\rightleftharpoons A^- + H^+$, where $HA$ is the protonated, neutral form and $A^-$ is the deprotonated, negatively charged form. The acid dissociation constant is $K_a = \\frac{[A^-][H^+]}{[HA]}$. The charge on this group is $-1$ times the fraction of the molecules in the deprotonated state, $\\alpha_{A^-}$.\n$$ \\alpha_{A^-} = \\frac{[A^-]}{[HA] + [A^-]} = \\frac{\\frac{[A^-]}{[HA]}}{1 + \\frac{[A^-]}{[HA]}} $$\nUsing the definition of $K_a$, we have $\\frac{[A^-]}{[HA]} = \\frac{K_a}{[H^+]} = 10^{pH - pK_a}$.\nThe charge contribution from a single acidic group, $q_{acidic}$, is therefore:\n$$ q_{acidic} = (-1) \\cdot \\alpha_{A^-} = -\\frac{10^{pH - pK_a}}{1 + 10^{pH - pK_a}} $$\nThis expression can be algebraically manipulated:\n$$ q_{acidic} = -\\frac{(1 + 10^{pH - pK_a}) - 1}{1 + 10^{pH - pK_a}} = -1 + \\frac{1}{1 + 10^{pH - pK_a}} $$\nThe peptide contains two such groups: the $\\mathrm{C}$-terminus ($pK_a = 3.1$) and the aspartate side chain ($pK_a = 3.9$).\n\nThe net charge of the peptide, $q(pH)$, is the sum of the charge contributions from all five ionizable groups.\n$$ q(pH) = \\sum_{i=1}^{3} q_{basic,i} + \\sum_{j=1}^{2} q_{acidic,j} $$\nSubstituting the derived expressions:\n$$ q(pH) = \\sum_{i=1}^{3} \\left( \\frac{1}{1 + 10^{pH - pK_{a,i}}} \\right) + \\sum_{j=1}^{2} \\left( \\frac{1}{1 + 10^{pH - pK_{a,j}}} - 1 \\right) $$\nThis can be rearranged as:\n$$ q(pH) = \\sum_{k=1}^{5} \\frac{1}{1 + 10^{pH - pK_{a,k}}} - N_{acidic} $$\nwhere the summation is over all five ionizable groups and $N_{acidic}$ is the total number of acidic groups, which is 2.\n\nThe isoelectric point, $pI$, is the $pH$ at which $q(pH) = 0$. Therefore, we must solve the following equation for $pH$:\n$$ \\sum_{k=1}^{5} \\frac{1}{1 + 10^{pI - pK_{a,k}}} = 2 $$\nSubstituting the given $pK_a$ values:\n$$ \\frac{1}{1 + 10^{pI - 10.5}} + \\frac{1}{1 + 10^{pI - 8.0}} + \\frac{1}{1 + 10^{pI - 6.0}} + \\frac{1}{1 + 10^{pI - 3.9}} + \\frac{1}{1 + 10^{pI - 3.1}} = 2 $$\nThis is a transcendental equation that must be solved numerically. An initial estimate for the $pI$ can be made by inspecting the charge states of the peptide in different $pH$ ranges. The net charge transitions from $+1$ to $0$ as the histidine group ($pK_a = 6.0$) deprotonates, and from $0$ to $-1$ as the $\\mathrm{N}$-terminus ($pK_a = 8.0$) deprotonates. The $pI$ must therefore lie between $6.0$ and $8.0$. A common rough approximation would be the average of these two $pK_a$ values, $pI \\approx (6.0 + 8.0)/2 = 7.0$.\n\nWe solve the rigorous equation numerically, using an iterative method such as the Newton-Raphson method or a computational solver, starting with the initial guess of $pH = 7.0$.\nLet $f(pH) = (\\sum_{k=1}^{5} \\frac{1}{1 + 10^{pH - pK_{a,k}}}) - 2$.\nAt $pH = 7.0$, $f(7.0) \\approx 0.0006044$, which is close to zero, validating our initial estimate. Since $f(pH)$ is a monotonically decreasing function, and $f(7.0) > 0$, the root must be slightly greater than $7.0$.\nNumerical solution of $f(pH)=0$ yields:\n$$ pI \\approx 7.00158448 $$\nThe problem requires the answer to be rounded to 4 significant figures. The first four significant figures are $7$, $0$, $0$, and $1$. The fifth digit is $5$, so we round the fourth digit up.\n$$ pI \\approx 7.002 $$", "answer": "$$ \\boxed{7.002} $$", "id": "2559109"}, {"introduction": "Effective experimental design is key to generating high-quality, interpretable data. In SDS-PAGE, a common challenge is achieving sufficient resolution to separate proteins of similar molecular mass. This exercise [@problem_id:2559187] places you in a practical scenario where you must decide which gel concentration will provide better separation for two closely migrating proteins. By using an established empirical model that relates molecular mass to electrophoretic mobility, you will learn to make quantitative predictions that can inform and optimize your experimental setup, ensuring your results are as clear as possible.", "problem": "A biochemist is comparing the separation of two denatured proteins using Sodium Dodecyl Sulfate–Polyacrylamide Gel Electrophoresis (SDS-PAGE). In SDS-PAGE, sodium dodecyl sulfate (SDS) imparts an approximately constant charge-to-mass ratio to unfolded proteins so that, under a fixed gel composition, the relative electrophoretic mobility is empirically observed to vary approximately linearly with the logarithm (base $10$) of the molecular mass. The normalized mobility $\\mu_{n}$ is defined as $\\mu_{n} = d/L_{\\text{dye}}$, where $d$ is the migration distance of the protein from the top of the resolving gel to the protein band, and $L_{\\text{dye}}$ is the migration distance of the tracking dye front in the same lane.\n\nIn a set of calibrations performed under otherwise identical running conditions, the following empirical relationships between $\\log_{10}(M/\\mathrm{kDa})$ and $\\mu_{n}$ were established for two gel acrylamide concentrations:\n- For a $10\\%$ resolving gel: $\\log_{10}\\!\\left(M/\\mathrm{kDa}\\right) = A_{10} - B_{10}\\,\\mu_{n}$ with $A_{10} = 2.20$ and $B_{10} = 1.60$.\n- For a $12\\%$ resolving gel: $\\log_{10}\\!\\left(M/\\mathrm{kDa}\\right) = A_{12} - B_{12}\\,\\mu_{n}$ with $A_{12} = 2.10$ and $B_{12} = 1.20$.\n\nTwo proteins of masses $45\\,\\mathrm{kDa}$ and $50\\,\\mathrm{kDa}$ are run on both gels to the same dye-front migration distance $L_{\\text{dye}} = 60\\,\\mathrm{mm}$. Assume band broadening is negligible so that the practical resolution is dominated by the difference in migration distances.\n\nUsing only the definitions and empirical relationships above, compute the migration-distance separation $\\Delta d$ between the $45\\,\\mathrm{kDa}$ and $50\\,\\mathrm{kDa}$ bands for each gel and identify which gel provides the larger $\\Delta d$. Report as your final answer the larger separation $\\Delta d$ in millimeters. Round your final answer to four significant figures and express it in millimeters.", "solution": "The problem requires a comparison of the resolving power of two polyacrylamide gels with different concentrations, $10\\%$ and $12\\%$, for two proteins of given molecular masses. The separation is quantified by the migration distance difference, $\\Delta d$.\n\nThe central relationship provided is linear between the logarithm of the molecular mass, $\\log_{10}(M/\\mathrm{kDa})$, and the normalized electrophoretic mobility, $\\mu_n$. This is described by the equation:\n$$\n\\log_{10}\\!\\left(\\frac{M}{\\mathrm{kDa}}\\right) = A - B\\,\\mu_{n}\n$$\nwhere $A$ and $B$ are empirical constants specific to the gel composition. The normalized mobility $\\mu_n$ is defined as:\n$$\n\\mu_{n} = \\frac{d}{L_{\\text{dye}}}\n$$\nwhere $d$ is the migration distance of the protein and $L_{\\text{dye}}$ is the migration distance of the tracking dye.\n\nTo find the migration distance $d$ for a given protein of mass $M$, we must first rearrange the empirical equation to solve for $\\mu_n$:\n$$\nB\\,\\mu_{n} = A - \\log_{10}\\!\\left(\\frac{M}{\\mathrm{kDa}}\\right)\n$$\n$$\n\\mu_{n} = \\frac{A - \\log_{10}\\!\\left(\\frac{M}{\\mathrm{kDa}}\\right)}{B}\n$$\nSubstituting the definition of $\\mu_n$ and solving for $d$:\n$$\n\\frac{d}{L_{\\text{dye}}} = \\frac{A - \\log_{10}\\!\\left(\\frac{M}{\\mathrm{kDa}}\\right)}{B}\n$$\n$$\nd = L_{\\text{dye}} \\left( \\frac{A - \\log_{10}\\!\\left(\\frac{M}{\\mathrm{kDa}}\\right)}{B} \\right)\n$$\nWe are interested in the separation distance, $\\Delta d$, between two proteins with masses $M_1 = 45\\,\\mathrm{kDa}$ and $M_2 = 50\\,\\mathrm{kDa}$. Let their respective migration distances be $d_1$ and $d_2$. Since electrophoretic mobility in SDS-PAGE is inversely related to molecular mass, the smaller protein ($M_1$) will migrate further, so $d_1 > d_2$. The separation is $\\Delta d = d_1 - d_2$.\n\nUsing the derived expression for $d$:\n$$\nd_1 = L_{\\text{dye}} \\left( \\frac{A - \\log_{10}\\!\\left(\\frac{M_1}{\\mathrm{kDa}}\\right)}{B} \\right)\n$$\n$$\nd_2 = L_{\\text{dye}} \\left( \\frac{A - \\log_{10}\\!\\left(\\frac{M_2}{\\mathrm{kDa}}\\right)}{B} \\right)\n$$\nThe separation, $\\Delta d$, is therefore:\n$$\n\\Delta d = d_1 - d_2 = L_{\\text{dye}} \\left[ \\left( \\frac{A - \\log_{10}\\!\\left(\\frac{M_1}{\\mathrm{kDa}}\\right)}{B} \\right) - \\left( \\frac{A - \\log_{10}\\!\\left(\\frac{M_2}{\\mathrm{kDa}}\\right)}{B} \\right) \\right]\n$$\nSimplifying this expression:\n$$\n\\Delta d = \\frac{L_{\\text{dye}}}{B} \\left[ \\left(A - \\log_{10}\\!\\left(\\frac{M_1}{\\mathrm{kDa}}\\right)\\right) - \\left(A - \\log_{10}\\!\\left(\\frac{M_2}{\\mathrm{kDa}}\\right)\\right) \\right]\n$$\n$$\n\\Delta d = \\frac{L_{\\text{dye}}}{B} \\left[ \\log_{10}\\!\\left(\\frac{M_2}{\\mathrm{kDa}}\\right) - \\log_{10}\\!\\left(\\frac{M_1}{\\mathrm{kDa}}\\right) \\right]\n$$\nUsing the property of logarithms, $\\log(x) - \\log(y) = \\log(x/y)$:\n$$\n\\Delta d = \\frac{L_{\\text{dye}}}{B} \\log_{10}\\!\\left(\\frac{M_2}{M_1}\\right)\n$$\nThis general formula elucidates that the separation distance $\\Delta d$ is inversely proportional to the parameter $B$. A smaller value of $B$ results in a larger separation for a given pair of proteins. We are given $L_{\\text{dye}} = 60\\,\\mathrm{mm}$, $M_1 = 45\\,\\mathrm{kDa}$, and $M_2 = 50\\,\\mathrm{kDa}$.\n\nFirst, we calculate the separation for the $10\\%$ gel ($\\Delta d_{10}$). The constants are $A_{10} = 2.20$ and $B_{10} = 1.60$.\n$$\n\\Delta d_{10} = \\frac{60\\,\\mathrm{mm}}{1.60} \\log_{10}\\!\\left(\\frac{50}{45}\\right) = \\frac{60}{1.60} \\log_{10}\\!\\left(\\frac{10}{9}\\right)\\,\\mathrm{mm}\n$$\n$$\n\\Delta d_{10} = 37.5 \\log_{10}\\!\\left(\\frac{10}{9}\\right)\\,\\mathrm{mm}\n$$\nThe value of $\\log_{10}(10/9)$ is approximately $0.045757$.\n$$\n\\Delta d_{10} \\approx 37.5 \\times 0.045757 \\,\\mathrm{mm} \\approx 1.71589 \\,\\mathrm{mm}\n$$\n\nNext, we calculate the separation for the $12\\%$ gel ($\\Delta d_{12}$). The constants are $A_{12} = 2.10$ and $B_{12} = 1.20$.\n$$\n\\Delta d_{12} = \\frac{60\\,\\mathrm{mm}}{1.20} \\log_{10}\\!\\left(\\frac{50}{45}\\right) = \\frac{60}{1.20} \\log_{10}\\!\\left(\\frac{10}{9}\\right)\\,\\mathrm{mm}\n$$\n$$\n\\Delta d_{12} = 50 \\log_{10}\\!\\left(\\frac{10}{9}\\right)\\,\\mathrm{mm}\n$$\nUsing the same value for the logarithm:\n$$\n\\Delta d_{12} \\approx 50 \\times 0.045757 \\,\\mathrm{mm} \\approx 2.28787 \\,\\mathrm{mm}\n$$\n\nComparing the two separations:\n$$\n\\Delta d_{10} \\approx 1.7159 \\,\\mathrm{mm}\n$$\n$$\n\\Delta d_{12} \\approx 2.2879 \\,\\mathrm{mm}\n$$\nClearly, $\\Delta d_{12} > \\Delta d_{10}$. The $12\\%$ gel provides a larger migration-distance separation for the proteins in this mass range, which is expected as higher percentage gels offer better resolution for smaller proteins.\n\nThe question asks for the larger separation value, $\\Delta d_{12}$, rounded to four significant figures.\n$$\n\\Delta d_{12} = 2.28787... \\,\\mathrm{mm}\n$$\nRounding to four significant figures gives $2.288\\,\\mathrm{mm}$.", "answer": "$$\n\\boxed{2.288}\n$$", "id": "2559187"}, {"introduction": "The journey from a wet-lab experiment to a biological conclusion increasingly involves sophisticated computational analysis. Two-dimensional gels are powerful but prone to run-to-run variations in geometry and staining intensity, which can obscure true biological differences. This advanced practice [@problem_id:2559160] delves into the crucial post-experimental step of image processing, guiding you to build an alignment algorithm from the ground up using linear algebra and least-squares principles. This exercise bridges the gap between the bench and the computer, demonstrating how to mathematically correct for experimental artifacts to enable robust, quantitative comparisons across different samples.", "problem": "You are analyzing protein spot patterns on two-dimensional gels produced by Sodium Dodecyl Sulfate–Polyacrylamide Gel Electrophoresis (SDS-PAGE) in the second dimension and Isoelectric Focusing (IEF) in the first dimension. Gel-to-gel variability across experimental runs leads to geometric distortions (translations, rotations, scalings, and shears) and overall intensity scaling differences due to variations in sample loading and staining. A common strategy to correct for these effects is to use a small set of corresponding landmark spots whose coordinates and intensities are reliably identified on both gels. Using only first principles of linear algebra and least squares, construct a method to align and normalize gels and quantify the remaining warping error.\n\nYour program must, for each given test case:\n- Estimate the best-fit affine transformation in the plane that maps source landmark coordinates to target landmark coordinates by minimizing the sum of squared Euclidean residuals over all landmarks. An affine map in the plane is uniquely determined by a linear map and a translation, and should be estimated from the supplied matched coordinates.\n- Estimate a single global intensity scaling factor that best maps source landmark intensities to target landmark intensities by minimizing the sum of squared errors between scaled source intensities and target intensities.\n- Compute the root-mean-square error (RMSE) of the positional residuals after alignment, expressed in pixels. RMSE must be computed as the square root of the mean of squared Euclidean distances between transformed source coordinates and the corresponding target coordinates.\n- Compute a numerical stability diagnostic equal to the condition number of the design matrix used to estimate the affine parameters, using the matrix $2$-norm.\n- Report, for each test case, a list containing: $[\\text{RMSE in pixels}, \\text{intensity scaling factor}, \\text{condition number}]$. The RMSE must be reported in pixels, and the intensity scaling factor and condition number are dimensionless. All three values must be rounded to six decimal places.\n\nFundamental base you may assume as known:\n- The definition of an affine transformation in the plane as a linear map composed with a translation.\n- The Euclidean norm and Euclidean distance in $\\mathbb{R}^2$.\n- The principle of least squares estimation as the minimizer of the sum of squared residuals for an overdetermined linear system.\n\nYou must not assume any pre-derived closed-form transformation formulas; instead, derive the estimation as a linear least squares problem built from the definitions above.\n\nTest suite. For each case, the source landmarks are given as coordinate-intensity triples $(x_i,y_i,I_i)$, and the target landmarks are $(u_i,v_i,J_i)$. All coordinates are in pixels and intensities are in arbitrary units. The affine map must be determined only from the coordinates; intensities are only for the intensity scaling factor.\n\n- Case A (happy path, multiple non-collinear landmarks, identity geometry and scaling):\n  - Source coordinates and intensities:\n    - $(x,y,I)$: $(0, 0, 100)$, $(10, 0, 200)$, $(0, 10, 150)$, $(10, 10, 180)$.\n  - Target coordinates and intensities:\n    - $(u,v,J)$: $(0, 0, 100)$, $(10, 0, 200)$, $(0, 10, 150)$, $(10, 10, 180)$.\n\n- Case B (rigid motion with translation, rotation by $90^\\circ$ about the origin, then translation, and a global intensity downscale):\n  - Source coordinates and intensities:\n    - $(x,y,I)$: $(0, 0, 50)$, $(2, 0, 120)$, $(0, 3, 80)$, $(2, 3, 200)$, $(5, 1, 60)$, $(1, 5, 90)$.\n  - Target coordinates and intensities produced by $(u,v) = (-y+10, x-5)$ and $J = 0.8 \\cdot I$:\n    - $(u,v,J)$: $(10, -5, 40)$, $(10, -3, 96)$, $(7, -5, 64)$, $(7, -3, 160)$, $(9, 0, 48)$, $(5, -4, 72)$.\n\n- Case C (boundary condition with exactly 3 non-collinear landmarks, anisotropic scaling and shear plus translation, and a global intensity upscale):\n  - Affine map: $(u,v) = (1.5\\,x + 0.2\\,y - 3,\\; 0.1\\,x + 1.2\\,y + 4)$.\n  - Source coordinates and intensities:\n    - $(x,y,I)$: $(1, 0, 100)$, $(0, 1, 200)$, $(1, 1, 300)$.\n  - Target coordinates and intensities:\n    - $(u,v,J)$: $(-1.5, 4.1, 125)$, $(-2.8, 5.2, 250)$, $(-1.3, 5.3, 375)$.\n\n- Case D (near-degenerate geometry: nearly collinear landmarks, small perturbation noise added to target coordinates to induce residual warping, and imperfect global intensity scaling):\n  - Affine map nominally $(u,v) = (0.9\\,x + 0.4\\,y + 0.5,\\; -0.2\\,x + 1.1\\,y - 0.3)$, then tiny coordinate perturbations are added to $(u,v)$ on some landmarks as specified below.\n  - Source coordinates and intensities:\n    - $(x,y,I)$: $(0, 0, 10)$, $(1, 1.001, 20)$, $(2, 2.000, 30)$, $(3, 3.002, 40)$.\n  - Target coordinates and intensities (with perturbations on coordinates):\n    - $(u,v,J)$: $(0.5, -0.3, 6.1)$, $(1.8007, 0.6006, 11.9)$, $(3.0996, 1.5002, 17.8)$, $(4.4009, 2.4019, 24.3)$.\n\nRequirements:\n- For each case, construct the linear system for the affine parameters from the coordinate pairs using the definition $(u_i, v_i)$ as the image of $(x_i, y_i)$ under a linear map plus translation, and estimate the parameters by least squares.\n- For intensity normalization, estimate a single scalar that minimizes the sum of squared differences between scaled source intensities and target intensities.\n- Compute the RMSE of coordinate residuals in pixels, and the condition number of the design matrix in the matrix $2$-norm.\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, where each test case contributes a sublist of three rounded floats in the order $[\\text{RMSE in pixels}, \\text{intensity scaling factor}, \\text{condition number}]$. For example: \"[[a,b,c],[d,e,f],[g,h,i],[j,k,l]]\", with each float rounded to six decimal places and no extra text.", "solution": "The problem posed is a standard application of linear least squares estimation to perform image registration, specifically for correcting geometric and intensity variations in two-dimensional gel electrophoresis data. The problem is well-defined, scientifically sound, and provides all necessary data for a complete solution. We shall proceed by deriving the required estimators from first principles.\n\nLet there be a set of $N$ corresponding landmark spots. The source landmarks are given by coordinates and intensities $\\{(x_i, y_i, I_i)\\}_{i=1}^N$, and the target landmarks are given by $\\{(u_i, v_i, J_i)\\}_{i=1}^N$.\n\n**1. Estimation of the Affine Transformation**\n\nAn affine transformation in the plane maps a point $\\mathbf{p} = \\begin{pmatrix} x \\\\ y \\end{pmatrix}$ to a point $\\mathbf{p'} = \\begin{pmatrix} u \\\\ v \\end{pmatrix}$ via a linear transformation represented by a matrix $\\mathbf{M}$ and a translation represented by a vector $\\mathbf{t}$.\n$$\n\\begin{pmatrix} u \\\\ v \\end{pmatrix} = \\begin{pmatrix} m_{11} & m_{12} \\\\ m_{21} & m_{22} \\end{pmatrix} \\begin{pmatrix} x \\\\ y \\end{pmatrix} + \\begin{pmatrix} t_x \\\\ t_y \\end{pmatrix}\n$$\nThis relationship can be decoupled into two independent linear equations for the coordinates $u$ and $v$:\n$$ u = m_{11}x + m_{12}y + t_x $$\n$$ v = m_{21}x + m_{22}y + t_y $$\nThere are a total of $6$ parameters to estimate: $\\{m_{11}, m_{12}, t_x, m_{21}, m_{22}, t_y\\}$.\n\nFor the set of $N$ landmarks, we can write a system of equations for each coordinate dimension. For the $u$-coordinates, we have an overdetermined system (if $N > 3$):\n$$\n\\begin{cases}\n    u_1 = m_{11}x_1 + m_{12}y_1 + t_x \\\\\n    u_2 = m_{11}x_2 + m_{12}y_2 + t_x \\\\\n    \\vdots \\\\\n    u_N = m_{11}x_N + m_{12}y_N + t_x\n\\end{cases}\n$$\nThis system can be expressed in matrix form as $\\mathbf{A}\\mathbf{k}_u \\approx \\mathbf{u}$, where:\n$$\n\\mathbf{A} = \\begin{pmatrix}\nx_1 & y_1 & 1 \\\\\nx_2 & y_2 & 1 \\\\\n\\vdots & \\vdots & \\vdots \\\\\nx_N & y_N & 1\n\\end{pmatrix},\n\\quad\n\\mathbf{k}_u = \\begin{pmatrix} m_{11} \\\\ m_{12} \\\\ t_x \\end{pmatrix},\n\\quad\n\\mathbf{u} = \\begin{pmatrix} u_1 \\\\ u_2 \\\\ \\vdots \\\\ u_N \\end{pmatrix}\n$$\nThe vector $\\mathbf{k}_u$ is found by minimizing the sum of squared residuals, $E_u = \\sum_{i=1}^N (u_i - (m_{11}x_i + m_{12}y_i + t_x))^2 = ||\\mathbf{u} - \\mathbf{A}\\mathbf{k}_u||_2^2$. This is the standard linear least squares problem, whose solution is given by solving the normal equations $(\\mathbf{A}^T\\mathbf{A})\\mathbf{k}_u = \\mathbf{A}^T\\mathbf{u}$.\n\nSimilarly, for the $v$-coordinates, we have the system $\\mathbf{A}\\mathbf{k}_v \\approx \\mathbf{v}$, where the design matrix $\\mathbf{A}$ is identical, and\n$$\n\\mathbf{k}_v = \\begin{pmatrix} m_{21} \\\\ m_{22} \\\\ t_y \\end{pmatrix},\n\\quad\n\\mathbf{v} = \\begin{pmatrix} v_1 \\\\ v_2 \\\\ \\vdots \\\\ v_N \\end{pmatrix}\n$$\nThe solution $\\mathbf{k}_v$ is found by minimizing $E_v = ||\\mathbf{v} - \\mathbf{A}\\mathbf{k}_v||_2^2$. These two systems are solved independently to find all $6$ affine parameters. A unique solution exists if and only if the columns of $\\mathbf{A}$ are linearly independent, which requires that the source landmark points $(x_i, y_i)$ are not all collinear (for $N \\ge 3$).\n\n**2. Estimation of the Intensity Scaling Factor**\n\nWe model the relationship between source intensities $I_i$ and target intensities $J_i$ with a single global scaling factor $s$: $J_i \\approx s \\cdot I_i$. To find the best-fit $s$, we minimize the sum of squared errors:\n$$ E_I = \\sum_{i=1}^N (J_i - s \\cdot I_i)^2 $$\nTo find the minimum, we compute the derivative of $E_I$ with respect to $s$ and set it to zero:\n$$ \\frac{dE_I}{ds} = \\sum_{i=1}^N -2I_i (J_i - s I_i) = -2 \\left( \\sum_{i=1}^N I_i J_i - s \\sum_{i=1}^N I_i^2 \\right) = 0 $$\nProvided that not all $I_i$ are zero, the solution for $s$ is:\n$$ s = \\frac{\\sum_{i=1}^N I_i J_i}{\\sum_{i=1}^N I_i^2} $$\nThis can be expressed using vector dot products as $s = \\frac{\\mathbf{I} \\cdot \\mathbf{J}}{\\mathbf{I} \\cdot \\mathbf{I}}$, where $\\mathbf{I}$ and $\\mathbf{J}$ are vectors of the intensities.\n\n**3. Root-Mean-Square Error (RMSE) of Positional Residuals**\n\nAfter estimating the affine parameters, we can calculate the predicted target coordinates $(\\hat{u}_i, \\hat{v}_i)$ for each source point $(x_i, y_i)$:\n$$ \\hat{u}_i = m_{11}x_i + m_{12}y_i + t_x $$\n$$ \\hat{v}_i = m_{21}x_i + m_{22}y_i + t_y $$\nThe squared Euclidean distance (residual) for the $i$-th landmark is $d_i^2 = (u_i - \\hat{u}_i)^2 + (v_i - \\hat{v}_i)^2$. The Root-Mean-Square Error is the square root of the average of these squared residuals:\n$$ \\text{RMSE} = \\sqrt{\\frac{1}{N} \\sum_{i=1}^N d_i^2} = \\sqrt{\\frac{1}{N} \\sum_{i=1}^N \\left( (u_i - \\hat{u}_i)^2 + (v_i - \\hat{v}_i)^2 \\right)} $$\n\n**4. Condition Number of the Design Matrix**\n\nThe stability of the least squares solution for the affine parameters depends on the properties of the design matrix $\\mathbf{A}$. A measure of this stability is the condition number, $\\kappa(\\mathbf{A})$. A large condition number indicates that small errors in the input coordinate data can lead to large errors in the estimated parameters. The problem specifies the use of the matrix $2$-norm, for which the condition number is defined as the ratio of the largest singular value ($\\sigma_{\\max}$) to the smallest singular value ($\\sigma_{\\min}$) of $\\mathbf{A}$:\n$$ \\kappa_2(\\mathbf{A}) = \\frac{\\sigma_{\\max}(\\mathbf{A})}{\\sigma_{\\min}(\\mathbf{A})} $$\nThis value becomes large when the columns of $\\mathbf{A}$ are nearly linearly dependent, which occurs, for example, when the source landmark points are nearly collinear.\n\nThe implementation will construct the matrix $\\mathbf{A}$ and vectors for each test case, solve the least squares problems for the affine parameters and the intensity scaling factor, and then compute the required diagnostics.", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the 2D gel alignment problem for all test cases.\n    \"\"\"\n    \n    test_cases = [\n        # Case A\n        {\n            \"source\": [(0, 0, 100), (10, 0, 200), (0, 10, 150), (10, 10, 180)],\n            \"target\": [(0, 0, 100), (10, 0, 200), (0, 10, 150), (10, 10, 180)],\n        },\n        # Case B\n        {\n            \"source\": [(0, 0, 50), (2, 0, 120), (0, 3, 80), (2, 3, 200), (5, 1, 60), (1, 5, 90)],\n            \"target\": [(10, -5, 40), (10, -3, 96), (7, -5, 64), (7, -3, 160), (9, 0, 48), (5, -4, 72)],\n        },\n        # Case C\n        {\n            \"source\": [(1, 0, 100), (0, 1, 200), (1, 1, 300)],\n            \"target\": [(-1.5, 4.1, 125), (-2.8, 5.2, 250), (-1.3, 5.3, 375)],\n        },\n        # Case D\n        {\n            \"source\": [(0, 0, 10), (1, 1.001, 20), (2, 2.000, 30), (3, 3.002, 40)],\n            \"target\": [(0.5, -0.3, 6.1), (1.8007, 0.6006, 11.9), (3.0996, 1.5002, 17.8), (4.4009, 2.4019, 24.3)],\n        },\n    ]\n\n    all_results = []\n    for case in test_cases:\n        source_landmarks = np.array(case[\"source\"])\n        target_landmarks = np.array(case[\"target\"])\n        \n        N = source_landmarks.shape[0]\n\n        # Prepare data matrices\n        src_coords = source_landmarks[:, :2]\n        src_I = source_landmarks[:, 2]\n        tgt_coords = target_landmarks[:, :2]\n        tgt_J = target_landmarks[:, 2]\n\n        # 1. Estimate Affine Transformation\n        # Design matrix A has columns [x, y, 1]\n        A_mat = np.hstack([src_coords, np.ones((N, 1))])\n        \n        # Target vectors for u and v coordinates\n        u_vec = tgt_coords[:, 0]\n        v_vec = tgt_coords[:, 1]\n\n        # Solve for affine parameters using least squares\n        # k_u = [m11, m12, tx]\n        k_u, _, _, _ = np.linalg.lstsq(A_mat, u_vec, rcond=None)\n        \n        # k_v = [m21, m22, ty]\n        k_v, _, _, _ = np.linalg.lstsq(A_mat, v_vec, rcond=None)\n\n        # 2. Estimate Intensity Scaling Factor\n        # s = (I . J) / (I . I)\n        # Using np.dot for dot product\n        intensity_scale = np.dot(src_I, tgt_J) / np.dot(src_I, src_I)\n\n        # 3. Compute RMSE of positional residuals\n        # Predicted target coordinates\n        pred_u = A_mat @ k_u\n        pred_v = A_mat @ k_v\n        \n        # Sum of squared Euclidean distances\n        sum_sq_dist = np.sum((u_vec - pred_u)**2 + (v_vec - pred_v)**2)\n        \n        # RMSE\n        rmse = np.sqrt(sum_sq_dist / N)\n        \n        # 4. Compute Condition Number\n        # Using the matrix 2-norm\n        cond_num = np.linalg.cond(A_mat, 2)\n\n        # Append results, rounded to 6 decimal places\n        all_results.append([\n            round(rmse, 6),\n            round(intensity_scale, 6),\n            round(cond_num, 6)\n        ])\n    \n    # Format the final output string\n    # e.g., [[a,b,c],[d,e,f],...]\n    result_str = \"[\" + \",\".join([f\"[{r[0]:.6f},{r[1]:.6f},{r[2]:.6f}]\" for r in all_results]) + \"]\"\n    print(result_str)\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "2559160"}]}