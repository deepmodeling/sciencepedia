{"hands_on_practices": [{"introduction": "Electrostatic interactions are key drivers of phase separation for many proteins, making a protein's net charge a critical predictive parameter. This exercise applies the Henderson-Hasselbalch equation to translate a protein's amino acid composition into its average net charge per residue ($NCPR$) at a given pH. Mastering this foundational skill [@problem_id:2779356] allows for a first-principles estimation of a protein's potential to drive phase separation through electrostatic interactions.", "problem": "A research group is characterizing an intrinsically disordered protein that contributes to biomolecular condensate formation via liquid–liquid phase separation. A commonly used coarse-grained descriptor for electrostatic contribution to phase separation is the net charge per residue. Starting only from the mass action law for acid–base equilibria, the definition of the acid dissociation constant $K_{a}$ and its logarithmic form $\\mathrm{p}K_{a}$, and the definitions of $\\mathrm{pH}$ and ionic charge states, derive appropriate expressions for the average charge carried by each class of ionizable group at a fixed $\\mathrm{pH}$ and use them to compute the net charge per residue.\n\nConsider a single polypeptide of length $N=240$ residues with one unblocked $\\alpha$-amino (N-terminus) and one unblocked $\\alpha-carboxyl$ (C-terminus). The amino acid composition (counts of ionizable side chains) is: lysine $K=36$, arginine $R=12$, histidine $H=18$, aspartate $D=40$, glutamate $E=34$, tyrosine $Y=8$, cysteine $C=4$. All other residues are non-ionizable in the stated $\\mathrm{pH}$ range. Assume each ionizable group behaves independently in solution and adopts only its standard two-state protonation equilibrium. Use the following side-chain $\\mathrm{p}K_{a}$ values and terminal $\\mathrm{p}K_{a}$ values: $\\mathrm{p}K_{a}(D)=4.0$, $\\mathrm{p}K_{a}(E)=4.4$, $\\mathrm{p}K_{a}(H)=6.0$, $\\mathrm{p}K_{a}(C)=8.3$, $\\mathrm{p}K_{a}(Y)=10.1$, $\\mathrm{p}K_{a}(K)=10.5$, $\\mathrm{p}K_{a}(R)=12.5$, $\\mathrm{p}K_{a}(\\text{N-terminus})=8.0$, $\\mathrm{p}K_{a}(\\text{C-terminus})=3.1$.\n\nAt $\\mathrm{pH}=7.40$, compute the average net charge $Q$ of the protein by summing the average charges of all ionizable groups, and then compute the net charge per residue $Q/N$. You may assume that when protonated the basic groups $K$, $R$, $H$, and the N-terminus carry charge $+1$, and when deprotonated they are neutral; when deprotonated the acidic groups $D$, $E$, $Y$, $C$, and the C-terminus carry charge $-1$, and when protonated they are neutral. Report only the final net charge per residue $Q/N$ as a pure number, rounded to four significant figures. Do not include any units in your answer.", "solution": "We begin from the mass action law for a monoprotic acid–base equilibrium. For an acidic group of the form $\\mathrm{HA} \\rightleftharpoons \\mathrm{H}^{+} + \\mathrm{A}^{-}$, the acid dissociation constant is $K_{a} = \\frac{[\\mathrm{H}^{+}][\\mathrm{A}^{-}]}{[\\mathrm{HA}]}$. By definition, $\\mathrm{p}K_{a}=-\\log_{10}K_{a}$ and $\\mathrm{pH}=-\\log_{10}[\\mathrm{H}^{+}]$. Rearranging gives\n$$\n\\frac{[\\mathrm{A}^{-}]}{[\\mathrm{HA}]}=\\frac{K_{a}}{[\\mathrm{H}^{+}]}=10^{\\mathrm{pH}-\\mathrm{p}K_{a}}.\n$$\nLet $f_{\\text{deprot}}$ be the fraction of the acidic group that is deprotonated and hence carries charge $-1$. Then $f_{\\text{deprot}}=\\frac{[\\mathrm{A}^{-}]}{[\\mathrm{A}^{-}]+[\\mathrm{HA}]}=\\frac{1}{1+\\frac{[\\mathrm{HA}]}{[\\mathrm{A}^{-}]}}=\\frac{1}{1+10^{\\mathrm{p}K_{a}-\\mathrm{pH}}}$.\n\nFor a basic group, it is convenient to write the conjugate acid equilibrium $\\mathrm{BH}^{+} \\rightleftharpoons \\mathrm{B} + \\mathrm{H}^{+}$, which has $K_{a}=\\frac{[\\mathrm{B}][\\mathrm{H}^{+}]}{[\\mathrm{BH}^{+}]}$. Rearranging gives $\\frac{[\\mathrm{B}]}{[\\mathrm{BH}^{+}]}=10^{\\mathrm{pH}-\\mathrm{p}K_{a}}$. Let $f_{\\text{prot}}$ be the fraction that is protonated and hence carries charge $+1$; then $f_{\\text{prot}}=\\frac{[\\mathrm{BH}^{+}]}{[\\mathrm{BH}^{+}]+[\\mathrm{B}]}=\\frac{1}{1+10^{\\mathrm{pH}-\\mathrm{p}K_{a}}}$.\n\nTherefore, at a fixed $\\mathrm{pH}$, the average charge contributed by each copy of a basic group is $+f_{\\text{prot}}$, and the average charge contributed by each copy of an acidic group is $-f_{\\text{deprot}}$. Under the assumption that ionizable sites act independently and that multi-state microprotonation and electrostatic coupling can be neglected, the protein’s average net charge $Q$ is the sum over all ionizable sites:\n$$\nQ = \\sum_{\\text{basic } i} n_{i}\\,\\frac{1}{1+10^{\\mathrm{pH}-\\mathrm{p}K_{a,i}}} - \\sum_{\\text{acidic } j} n_{j}\\,\\frac{1}{1+10^{\\mathrm{p}K_{a,j}-\\mathrm{pH}}},\n$$\nwhere $n_{i}$ and $n_{j}$ are the counts of each group.\n\nWe now evaluate these fractions at $\\mathrm{pH}=7.40$ using the given $\\mathrm{p}K_{a}$ values. First compute the needed powers of $10$:\n- For basic groups: $10^{\\mathrm{pH}-\\mathrm{p}K_{a}}$ values are\n$\\mathrm{K}$: $10^{7.40-10.5}=10^{-3.1}\\approx 0.0007943282347$,\n$\\mathrm{R}$: $10^{7.40-12.5}=10^{-5.1}\\approx 7.943282347\\times 10^{-6}$,\n$\\mathrm{H}$: $10^{7.40-6.0}=10^{1.4}\\approx 25.11886432$,\nN-terminus: $10^{7.40-8.0}=10^{-0.6}\\approx 0.2511886432$.\nThus the protonated fractions are\n$$\nf_{\\mathrm{K}}=\\frac{1}{1+0.0007943282347}\\approx 0.9992063,\\quad\nf_{\\mathrm{R}}=\\frac{1}{1+7.943282347\\times 10^{-6}}\\approx 0.999992057,\n$$\n$$\nf_{\\mathrm{H}}=\\frac{1}{1+25.11886432}\\approx 0.038287,\\quad\nf_{\\text{N-term}}=\\frac{1}{1+0.2511886432}\\approx 0.799305.\n$$\n- For acidic groups: $10^{\\mathrm{p}K_{a}-\\mathrm{pH}}$ values are\n$\\mathrm{D}$: $10^{4.0-7.4}=10^{-3.4}\\approx 0.0003981071706$,\n$\\mathrm{E}$: $10^{4.4-7.4}=10^{-3.0}=0.001$,\nC-terminus: $10^{3.1-7.4}=10^{-4.3}\\approx 5.011872336\\times 10^{-5}$,\n$\\mathrm{C}$: $10^{8.3-7.4}=10^{0.9}\\approx 7.943282347$,\n$\\mathrm{Y}$: $10^{10.1-7.4}=10^{2.7}\\approx 501.1872336$.\nThus the deprotonated fractions are\n$$\nf_{\\mathrm{D}}=\\frac{1}{1+0.0003981071706}\\approx 0.999602051,\\quad\nf_{\\mathrm{E}}=\\frac{1}{1+0.001}=0.999001,\n$$\n$$\nf_{\\text{C-term}}=\\frac{1}{1+5.011872336\\times 10^{-5}}\\approx 0.999949881,\\quad\nf_{\\mathrm{C}}=\\frac{1}{1+7.943282347}\\approx 0.111815,\\quad\nf_{\\mathrm{Y}}=\\frac{1}{1+501.1872336}\\approx 0.001992.\n$$\n\nMultiply by abundances to obtain average charge contributions:\n- Basic contributions (positive):\n$$\nQ_{\\mathrm{K}}=36\\,f_{\\mathrm{K}}\\approx 36\\times 0.9992063=35.9714268,\n$$\n$$\nQ_{\\mathrm{R}}=12\\,f_{\\mathrm{R}}\\approx 12\\times 0.999992057=11.9999046828,\n$$\n$$\nQ_{\\mathrm{H}}=18\\,f_{\\mathrm{H}}\\approx 18\\times 0.038287=0.689166,\n$$\n$$\nQ_{\\text{N-term}}=1\\times f_{\\text{N-term}}\\approx 0.799305.\n$$\nSumming gives\n$$\nQ_{+}=Q_{\\mathrm{K}}+Q_{\\mathrm{R}}+Q_{\\mathrm{H}}+Q_{\\text{N-term}}\\approx 49.459802483.\n$$\n- Acidic contributions (negative magnitudes):\n$$\n|Q_{\\mathrm{D}}|=40\\,f_{\\mathrm{D}}\\approx 39.98408204,\\quad\n|Q_{\\mathrm{E}}|=34\\,f_{\\mathrm{E}}\\approx 33.966034,\n$$\n$$\n|Q_{\\text{C-term}}|=1\\times f_{\\text{C-term}}\\approx 0.999949881,\n$$\n$$\n|Q_{\\mathrm{C}}|=4\\,f_{\\mathrm{C}}\\approx 0.44726,\\quad\n|Q_{\\mathrm{Y}}|=8\\,f_{\\mathrm{Y}}\\approx 0.015936.\n$$\nSumming gives\n$$\nQ_{-}=|Q_{\\mathrm{D}}|+|Q_{\\mathrm{E}}|+|Q_{\\text{C-term}}|+|Q_{\\mathrm{C}}|+|Q_{\\mathrm{Y}}|\\approx 75.413261921.\n$$\n\nThe protein’s average net charge is\n$$\nQ=Q_{+}-Q_{-}\\approx 49.459802483-75.413261921\\approx -25.953459438.\n$$\nFinally, the net charge per residue is\n$$\n\\frac{Q}{N}=\\frac{-25.953459438}{240}\\approx -0.1081394977.\n$$\nRounding to four significant figures and reporting as a pure number yields $-0.1081$.", "answer": "$$\\boxed{-0.1081}$$", "id": "2779356"}, {"introduction": "To predict whether molecular interactions are strong enough to overcome mixing entropy, we turn to the Flory-Huggins theory of polymer solutions. This practice explores the thermodynamic stability of a protein solution by analyzing its free energy of mixing, which is governed by the effective interaction parameter $\\chi$. By calculating the curvature of the free energy landscape [@problem_id:2779419], you will determine whether a homogeneous mixture is stable or will spontaneously phase separate into a dense and a dilute phase.", "problem": "A single-component protein solution can be modeled as a polymer solution on a lattice within Flory–Huggins theory. Consider a homopolymerized protein of degree of polymerization $N=300$ at fixed temperature, with interaction parameter $\\chi=0.6$. Let $\\phi$ denote the protein volume fraction. The Helmholtz free energy density of mixing per lattice site, scaled by thermal energy $k_{B}T$ (Boltzmann constant $k_{B}$ times absolute temperature $T$), is taken to be\n$$\nf(\\phi)=\\frac{\\phi}{N}\\ln \\phi+(1-\\phi)\\ln(1-\\phi)+\\chi\\,\\phi(1-\\phi).\n$$\nUsing the curvature (second derivative with respect to $\\phi$) to diagnose local thermodynamic stability and the common-tangent construction to diagnose global phase separation, proceed as follows for the state point $\\phi=0.1$:\n- Derive an analytic expression for $\\frac{\\partial^{2} f}{\\partial \\phi^{2}}$.\n- Evaluate $\\frac{\\partial^{2} f}{\\partial \\phi^{2}}$ at $\\phi=0.1$ for $N=300$ and $\\chi=0.6$, and determine from its sign whether the mixture is locally stable or unstable.\n- Argue whether a common tangent exists at this temperature and composition and state whether the system lies in the one-phase or two-phase region.\n\nYour final numerical answer must be the value of $\\frac{\\partial^{2} f}{\\partial \\phi^{2}}$ at $\\phi=0.1$ for the given parameters, expressed as a dimensionless number (since $f$ is scaled by $k_{B}T$), rounded to four significant figures.", "solution": "The Helmholtz free energy density of mixing per lattice site, scaled by the thermal energy $k_{B}T$, is given by the function:\n$$\nf(\\phi) = \\frac{\\phi}{N}\\ln \\phi + (1-\\phi)\\ln(1-\\phi) + \\chi\\phi(1-\\phi)\n$$\nwhere $\\phi$ is the protein volume fraction, $N$ is the degree of polymerization, and $\\chi$ is the Flory-Huggins interaction parameter.\n\nFirst, we must derive the analytical expression for the second derivative of the free energy density with respect to the volume fraction, $\\frac{\\partial^{2} f}{\\partial \\phi^{2}}$. This quantity determines the local stability of the mixture. A positive value indicates local stability or metastability, while a negative value indicates local instability, leading to spontaneous phase separation via spinodal decomposition.\n\nWe begin by computing the first derivative, $\\frac{\\partial f}{\\partial \\phi}$:\n$$\n\\frac{\\partial f}{\\partial \\phi} = \\frac{\\partial}{\\partial \\phi} \\left[ \\frac{\\phi}{N}\\ln \\phi + (1-\\phi)\\ln(1-\\phi) + \\chi\\phi(1-\\phi) \\right]\n$$\nUsing the product rule and standard derivatives:\n$$\n\\frac{\\partial}{\\partial \\phi} \\left(\\frac{\\phi}{N}\\ln \\phi\\right) = \\frac{1}{N}\\left(1 \\cdot \\ln\\phi + \\phi \\cdot \\frac{1}{\\phi}\\right) = \\frac{\\ln\\phi}{N} + \\frac{1}{N}\n$$\n$$\n\\frac{\\partial}{\\partial \\phi} \\left((1-\\phi)\\ln(1-\\phi)\\right) = (-1) \\cdot \\ln(1-\\phi) + (1-\\phi) \\cdot \\frac{-1}{1-\\phi} = -\\ln(1-\\phi) - 1\n$$\n$$\n\\frac{\\partial}{\\partial \\phi} \\left(\\chi\\phi(1-\\phi)\\right) = \\frac{\\partial}{\\partial \\phi} \\left(\\chi\\phi - \\chi\\phi^2\\right) = \\chi - 2\\chi\\phi\n$$\nCombining these terms, the first derivative is:\n$$\n\\frac{\\partial f}{\\partial \\phi} = \\frac{\\ln\\phi}{N} + \\frac{1}{N} - \\ln(1-\\phi) - 1 + \\chi(1-2\\phi)\n$$\nNext, we differentiate again with respect to $\\phi$ to find the second derivative, $\\frac{\\partial^{2} f}{\\partial \\phi^{2}}$:\n$$\n\\frac{\\partial^{2} f}{\\partial \\phi^{2}} = \\frac{\\partial}{\\partial \\phi} \\left[ \\frac{\\ln\\phi}{N} + \\frac{1}{N} - \\ln(1-\\phi) - 1 + \\chi - 2\\chi\\phi \\right]\n$$\nThe derivatives of the individual terms are:\n$$\n\\frac{\\partial}{\\partial \\phi} \\left(\\frac{\\ln\\phi}{N}\\right) = \\frac{1}{N\\phi}\n$$\n$$\n\\frac{\\partial}{\\partial \\phi} \\left(-\\ln(1-\\phi)\\right) = - \\left(\\frac{-1}{1-\\phi}\\right) = \\frac{1}{1-\\phi}\n$$\n$$\n\\frac{\\partial}{\\partial \\phi} \\left(-2\\chi\\phi\\right) = -2\\chi\n$$\nThe derivatives of the constant terms ($\\frac{1}{N}$, $-1$, and $\\chi$) are zero. Therefore, the analytical expression for the second derivative is:\n$$\n\\frac{\\partial^{2} f}{\\partial \\phi^{2}} = \\frac{1}{N\\phi} + \\frac{1}{1-\\phi} - 2\\chi\n$$\nNow, we evaluate this expression for the specified state point: $N=300$, $\\chi=0.6$, and $\\phi=0.1$.\n$$\n\\frac{\\partial^{2} f}{\\partial \\phi^{2}} \\bigg|_{\\phi=0.1} = \\frac{1}{(300)(0.1)} + \\frac{1}{1 - 0.1} - 2(0.6)\n$$\n$$\n\\frac{\\partial^{2} f}{\\partial \\phi^{2}} \\bigg|_{\\phi=0.1} = \\frac{1}{30} + \\frac{1}{0.9} - 1.2\n$$\nConverting to fractions for precision:\n$$\n\\frac{\\partial^{2} f}{\\partial \\phi^{2}} \\bigg|_{\\phi=0.1} = \\frac{1}{30} + \\frac{10}{9} - \\frac{12}{10} = \\frac{1}{30} + \\frac{10}{9} - \\frac{6}{5}\n$$\nThe least common multiple of the denominators ($30$, $9$, $5$) is $90$.\n$$\n\\frac{\\partial^{2} f}{\\partial \\phi^{2}} \\bigg|_{\\phi=0.1} = \\frac{1 \\cdot 3}{90} + \\frac{10 \\cdot 10}{90} - \\frac{6 \\cdot 18}{90} = \\frac{3 + 100 - 108}{90} = \\frac{-5}{90} = -\\frac{1}{18}\n$$\nAs a decimal, this is approximately $-0.05555...$.\nSince $\\frac{\\partial^{2} f}{\\partial \\phi^{2}} = -\\frac{1}{18}  0$, the free energy curve is concave downward at $\\phi=0.1$. This indicates that the homogeneous mixture is locally unstable with respect to small fluctuations in concentration. The system lies within the spinodal region of the phase diagram.\n\nFinally, we must comment on the existence of a common tangent and the phase behavior. The condition for global phase equilibrium between two phases of composition $\\phi_a$ and $\\phi_b$ is the equality of their chemical potentials and osmotic pressures, which is geometrically equivalent to the existence of a common tangent to the free energy curve $f(\\phi)$ at $\\phi_a$ and $\\phi_b$. The existence of a region where the free energy curve is concave ($f''(\\phi)  0$), which we have just demonstrated for $\\phi=0.1$, is a sufficient condition for the existence of such a common tangent.\nThe points where the common tangent touches the free energy curve define the binodal compositions. The region between the spinodal points (where $f''(\\phi)=0$) is always contained within the region between the binodal points. Since the state point $\\phi=0.1$ is in the spinodal region (locally unstable), it must also be in the two-phase coexistence region (globally unstable). Therefore, a common tangent construction is applicable, and the system at this composition and temperature will spontaneously phase-separate into two distinct phases. The system lies in the two-phase region.\n\nThe numerical value of the second derivative, rounded to four significant figures, is $-0.05556$.", "answer": "$$\n\\boxed{-0.05556}\n$$", "id": "2779419"}, {"introduction": "Biomolecular condensates are dynamic entities whose material properties directly influence their biological function. This computational practice challenges you to analyze Fluorescence Recovery After Photobleaching (FRAP) data, a key technique for probing the internal dynamics and viscosity of condensates. By fitting various physical models to recovery curves and applying statistical model selection [@problem_id:2779373], you will learn how to quantitatively distinguish between different material states, such as a simple liquid, a viscoelastic gel, or a complex multi-phase droplet.", "problem": "You are given a conceptual framework to analyze Fluorescence Recovery After Photobleaching (FRAP) recovery curves from protein-rich biomolecular condensates. FRAP measures the recovery of fluorescence intensity inside a bleached region over time, which reflects molecular mobility within membraneless organelles. Incomplete recovery can arise from distinct mechanisms: an immobile fraction, gelation-like viscoelasticity, or the coexistence of kinetically distinct phases within droplets. Your task is to implement principled model selection based on well-accepted biophysical models and quantitative information criteria to infer the most likely mechanism from noiseless test data generated from known ground-truth models.\n\nFundamental base:\n- FRAP recovery in simple cases is governed by transport and exchange that can be captured by phenomenological rate models compatible with Fickian diffusion and first-order exchange, yielding single-exponential recovery when a single dominant timescale controls dynamics.\n- Heterogeneous or viscoelastic media often exhibit stretched-exponential kinetics with stretching exponent between $0$ and $1$, consistent with a distribution of relaxation times.\n- Phase coexistence with kinetically distinct domains can manifest as bi-exponential recovery due to the superposition of two dominant timescales.\n- Model selection can be performed using the corrected Akaike Information Criterion (AICc), a well-tested statistical tool for balancing goodness-of-fit and model complexity.\n\nMathematical model family to be fit to each dataset:\n- Single-exponential with immobile fraction (two parameters):\n  $$F_{\\mathrm{SE}}(t; f_m, \\tau) = f_m\\left(1 - e^{-t/\\tau}\\right),$$\n  where $0 \\le f_m \\le 1$ is the mobile fraction and $\\tau  0$ is a characteristic timescale.\n- Stretched exponential (three parameters):\n  $$F_{\\mathrm{STR}}(t; f_m, \\tau, \\beta) = f_m\\left(1 - e^{-(t/\\tau)^{\\beta}}\\right),$$\n  where $0 \\le f_m \\le 1$, $\\tau  0$, and $0  \\beta \\le 1$ is the stretching exponent.\n- Bi-exponential (four parameters) with a convenient reparameterization to enforce $f_1 + f_2 = f_m$:\n  $$F_{\\mathrm{BIE}}(t; f_m, \\alpha, \\tau_1, \\tau_2) = f_m\\Big[\\alpha\\left(1 - e^{-t/\\tau_1}\\right) + (1-\\alpha)\\left(1 - e^{-t/\\tau_2}\\right)\\Big],$$\n  where $0 \\le f_m \\le 1$, $0 \\le \\alpha \\le 1$, and $\\tau_1, \\tau_2  0$.\n\nStatistical criterion:\n- For a dataset with $n$ points $\\{(t_i, y_i)\\}_{i=1}^n$, define the residual sum of squares for a model with parameter vector $\\theta$ as\n  $$\\mathrm{RSS} = \\sum_{i=1}^{n}\\left[y_i - F(t_i; \\theta)\\right]^2.$$\n- The Akaike Information Criterion is\n  $$\\mathrm{AIC} = n \\ln\\left(\\frac{\\mathrm{RSS}}{n}\\right) + 2k,$$\n  where $k$ is the number of free parameters.\n- The corrected AIC (AICc) is\n  $$\\mathrm{AICc} = \\mathrm{AIC} + \\frac{2k(k+1)}{n - k - 1},$$\n  valid when $n  k + 1$.\n\nMechanism classification rule for each dataset:\n- Fit all three models by nonlinear least squares subject to the parameter bounds stated above and compute $\\mathrm{AICc}$ for each.\n- Select the model with the smallest $\\mathrm{AICc}$, with the following mechanistic interpretation and safeguards:\n  - If the best model is the single-exponential, classify as immobile fraction (code $0$).\n  - If the best model is the stretched exponential and the fitted $\\hat{\\beta}  0.9$ and $\\Delta\\mathrm{AICc}$ relative to the single-exponential is at least $2.0$, classify as gelation (code $1$). Otherwise, fall back to immobile fraction (code $0$).\n  - If the best model is the bi-exponential and both component timescales are well separated, i.e., $\\max(\\hat{\\tau}_1,\\hat{\\tau}_2)/\\min(\\hat{\\tau}_1,\\hat{\\tau}_2) \\ge 3.0$, both components contribute non-negligibly, i.e., $0.1 \\le \\hat{\\alpha} \\le 0.9$, and $\\Delta\\mathrm{AICc}$ relative to the single-exponential is at least $2.0$, classify as phase coexistence (code $2$). Otherwise, fall back to immobile fraction (code $0$).\n\nUnits and normalization:\n- Time $t$ is in seconds, intensities $F(t)$ are dimensionless and normalized such that pre-bleach intensity corresponds to $1$ and $F(0)=0$ after instantaneous bleach in the synthetic datasets below.\n- The program output is dimensionless classification codes as specified above.\n\nTest suite (deterministic synthetic datasets):\n- Use the common time vector $t_i = 2i$ seconds for $i = 0,1,\\dots,30$ (that is, from $0$ to $60$ seconds in steps of $2$ seconds), so $n = 31$.\n- Generate noiseless recovery curves $y_i = F(t_i)$ for each case as follows:\n  1. Case A (immobile fraction dominant): single-exponential with $f_m = 0.7$ and $\\tau = 5.0$ seconds.\n  2. Case B (gelation-like recovery): stretched exponential with $f_m = 0.6$, $\\tau = 12.0$ seconds, and $\\beta = 0.6$.\n  3. Case C (phase coexistence): bi-exponential with $f_m = 0.8$, $\\alpha = 0.35$, $\\tau_1 = 2.0$ seconds, and $\\tau_2 = 30.0$ seconds.\n  4. Case D (boundary, near-complete mobile fraction): single-exponential with $f_m = 0.97$ and $\\tau = 4.0$ seconds.\n\nRequired final output:\n- Your program must fit the three models to each dataset, apply the classification rule above, and produce a single line of output containing a list of four integers in the order of Cases A, B, C, D, where each integer is the classification code: $0$ for immobile fraction, $1$ for gelation, and $2$ for phase coexistence.\n- The output must be a single line containing the list in Python literal format without spaces, for example, $[0,1,2,0]$.\n\nAngle units are not applicable. No percentages appear in the output. All numerical thresholds and constants stated above must be applied exactly as given. Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets (e.g., \"[result1,result2,result3]\").", "solution": "This problem requires implementing a deterministic classification algorithm for synthetic Fluorescence Recovery After Photobleaching (FRAP) data. The core of the task is to distinguish between three potential biophysical mechanisms by fitting corresponding mathematical models and using a statistical criterion for model selection.\n\nThe overall methodology is as follows:\n\nFirst, for each of the four synthetic datasets, we fit three distinct mathematical models using nonlinear least squares. This process finds the optimal set of parameters for each model that minimizes the Residual Sum of Squares ($\\mathrm{RSS}$):\n$$ \\mathrm{RSS} = \\sum_{i=1}^{n}\\left[y_i - F(t_i; \\theta)\\right]^2 $$\nwhere $n$ is the number of data points, and $F(t_i; \\theta)$ is the model's prediction for a given parameter set $\\theta$. The fitting is performed subject to the physical constraints specified for each parameter.\n\nThe candidate models are:\n1.  **Single-Exponential (SE) Model**: Describes simple recovery with an immobile fraction. It has $k=2$ parameters: mobile fraction $f_m$ and timescale $\\tau$.\n    $$ F_{\\mathrm{SE}}(t; f_m, \\tau) = f_m\\left(1 - e^{-t/\\tau}\\right) $$\n2.  **Stretched Exponential (STR) Model**: Represents recovery in complex or viscoelastic media. It has $k=3$ parameters: $f_m$, $\\tau$, and a stretching exponent $\\beta$.\n    $$ F_{\\mathrm{STR}}(t; f_m, \\tau, \\beta) = f_m\\left(1 - e^{-(t/\\tau)^{\\beta}}\\right) $$\n3.  **Bi-Exponential (BIE) Model**: Suggests two distinct recovery processes, such as coexisting phases. It has $k=4$ parameters: total mobile fraction $f_m$, component fraction $\\alpha$, and two timescales $\\tau_1$ and $\\tau_2$.\n    $$ F_{\\mathrm{BIE}}(t; f_m, \\alpha, \\tau_1, \\tau_2) = f_m\\Big[\\alpha\\left(1 - e^{-t/\\tau_1}\\right) + (1-\\alpha)\\left(1 - e^{-t/\\tau_2}\\right)\\Big] $$\n\nSecond, after fitting, we use the corrected Akaike Information Criterion ($\\mathrm{AICc}$) to select the best model. $\\mathrm{AICc}$ balances model fit (low $\\mathrm{RSS}$) with model complexity (low $k$), penalizing models with more parameters to prevent overfitting.\n$$ \\mathrm{AICc} = n \\ln\\left(\\frac{\\mathrm{RSS}}{n}\\right) + 2k + \\frac{2k(k+1)}{n - k - 1} $$\nSince the test data are noiseless, a model that is identical to or more complex than the true generating function will achieve an $\\mathrm{RSS}$ of zero. In this case, the $\\mathrm{AICc}$ criterion naturally selects the simplest model that perfectly fits the data, as it has the smallest penalty term.\n\nThird, a set of classification rules is applied to translate the statistical best-fit model into a mechanistic interpretation.\n- If the **SE model** has the lowest $\\mathrm{AICc}$, the mechanism is classified as **immobile fraction (code $0$)**.\n- If the **STR model** is selected, it is classified as **gelation (code $1$)** only if the fitted stretching exponent $\\hat{\\beta}  0.9$ and its $\\mathrm{AICc}$ is significantly lower than the SE model's ($\\mathrm{AICc}_{\\mathrm{SE}} - \\mathrm{AICc}_{\\mathrm{STR}} \\ge 2.0$). Otherwise, it defaults to **immobile fraction (code $0$)**.\n- If the **BIE model** is selected, it is classified as **phase coexistence (code $2$)** only if its timescales are well-separated ($\\max(\\hat{\\tau}_1, \\hat{\\tau}_2)/\\min(\\hat{\\tau}_1, \\hat{\\tau}_2) \\ge 3.0$), both components are significant ($0.1 \\le \\hat{\\alpha} \\le 0.9$), and its $\\mathrm{AICc}$ is significantly lower than the SE model's. Otherwise, it defaults to **immobile fraction (code $0$)**.\n\nThis procedure is implemented programmatically to analyze the four provided cases and produce the final list of classification codes.", "answer": "```python\nimport numpy as np\nfrom scipy.optimize import curve_fit\n\ndef solve():\n    \"\"\"\n    Main function to solve the FRAP curve classification problem.\n    It generates synthetic data for four cases, fits three models to each,\n    and classifies the underlying mechanism based on AICc and specific rules.\n    \"\"\"\n\n    # Define the mathematical models for FRAP recovery\n    def f_se(t, fm, tau):\n        \"\"\"Single-exponential model (k=2).\"\"\"\n        return fm * (1 - np.exp(-t / tau))\n\n    def f_str(t, fm, tau, beta):\n        \"\"\"Stretched-exponential model (k=3).\"\"\"\n        return fm * (1 - np.exp(-(t / tau)**beta))\n\n    def f_bie(t, fm, alpha, tau1, tau2):\n        \"\"\"Bi-exponential model (k=4).\"\"\"\n        return fm * (alpha * (1 - np.exp(-t / tau1)) + (1 - alpha) * (1 - np.exp(-t / tau2)))\n\n    def calculate_aicc(n, k, rss):\n        \"\"\"\n        Calculates the corrected Akaike Information Criterion (AICc).\n        Handles the case of RSS being zero for noiseless data.\n        \"\"\"\n        if n = k + 1:\n            return np.inf  # AICc is not defined\n\n        # Use a small tolerance for floating point comparison to zero\n        if rss  1e-20:\n            log_likelihood_term = -np.inf\n        else:\n            log_likelihood_term = n * np.log(rss / n)\n        \n        aic = log_likelihood_term + 2 * k\n        aicc = aic + (2 * k * (k + 1)) / (n - k - 1)\n        return aicc\n\n    def classify_curve(t_data, y_data):\n        \"\"\"\n        Fits all three models to the data, calculates AICc, and applies\n        classification rules.\n        \"\"\"\n        n = len(t_data)\n        results = {}\n\n        # --- Fit Single-Exponential (SE) model ---\n        k_se = 2\n        p0_se = [0.8, 10.0]\n        bounds_se = ([0, 1e-9], [1.0, np.inf])\n        try:\n            popt_se, _ = curve_fit(f_se, t_data, y_data, p0=p0_se, bounds=bounds_se)\n            y_pred_se = f_se(t_data, *popt_se)\n            rss_se = np.sum((y_data - y_pred_se)**2)\n            aicc_se = calculate_aicc(n, k_se, rss_se)\n            results['se'] = {'popt': popt_se, 'aicc': aicc_se}\n        except RuntimeError:\n            results['se'] = {'popt': None, 'aicc': np.inf}\n\n        # --- Fit Stretched-Exponential (STR) model ---\n        k_str = 3\n        p0_str = [0.8, 10.0, 0.8]\n        bounds_str = ([0, 1e-9, 1e-9], [1.0, np.inf, 1.0])\n        try:\n            popt_str, _ = curve_fit(f_str, t_data, y_data, p0=p0_str, bounds=bounds_str)\n            y_pred_str = f_str(t_data, *popt_str)\n            rss_str = np.sum((y_data - y_pred_str)**2)\n            aicc_str = calculate_aicc(n, k_str, rss_str)\n            results['str'] = {'popt': popt_str, 'aicc': aicc_str}\n        except RuntimeError:\n            results['str'] = {'popt': None, 'aicc': np.inf}\n\n        # --- Fit Bi-Exponential (BIE) model ---\n        k_bie = 4\n        p0_bie = [0.8, 0.5, 5.0, 20.0]\n        bounds_bie = ([0, 0, 1e-9, 1e-9], [1.0, 1.0, np.inf, np.inf])\n        try:\n            popt_bie, _ = curve_fit(f_bie, t_data, y_data, p0=p0_bie, bounds=bounds_bie)\n            y_pred_bie = f_bie(t_data, *popt_bie)\n            rss_bie = np.sum((y_data - y_pred_bie)**2)\n            aicc_bie = calculate_aicc(n, k_bie, rss_bie)\n            results['bie'] = {'popt': popt_bie, 'aicc': aicc_bie}\n        except RuntimeError:\n            results['bie'] = {'popt': None, 'aicc': np.inf}\n\n        # --- Model Selection and Classification ---\n        aicc_values = [results['se']['aicc'], results['str']['aicc'], results['bie']['aicc']]\n        best_model_idx = np.argmin(aicc_values)\n\n        # Default classification is immobile fraction (code 0)\n        classification_code = 0\n\n        if best_model_idx == 1:  # Stretched exponential is best\n            beta_hat = results['str']['popt'][2]\n            delta_aicc = results['se']['aicc'] - results['str']['aicc']\n            if beta_hat  0.9 and delta_aicc >= 2.0:\n                classification_code = 1\n        \n        elif best_model_idx == 2:  # Bi-exponential is best\n            alpha_hat = results['bie']['popt'][1]\n            tau1_hat = results['bie']['popt'][2]\n            tau2_hat = results['bie']['popt'][3]\n            \n            tau_ratio = max(tau1_hat, tau2_hat) / min(tau1_hat, tau2_hat)\n            delta_aicc = results['se']['aicc'] - results['bie']['aicc']\n\n            if (tau_ratio >= 3.0 and \n                0.1 = alpha_hat = 0.9 and \n                delta_aicc >= 2.0):\n                classification_code = 2\n\n        return classification_code\n\n    # Define common time vector for all test cases\n    t_vector = np.arange(0, 60.1, 2.0)  # t = 0, 2, ..., 60 seconds (n=31)\n\n    # Define the test cases from the problem statement\n    test_cases = [\n        {'name': 'A', 'func': f_se, 'params': {'fm': 0.7, 'tau': 5.0}},\n        {'name': 'B', 'func': f_str, 'params': {'fm': 0.6, 'tau': 12.0, 'beta': 0.6}},\n        {'name': 'C', 'func': f_bie, 'params': {'fm': 0.8, 'alpha': 0.35, 'tau1': 2.0, 'tau2': 30.0}},\n        {'name': 'D', 'func': f_se, 'params': {'fm': 0.97, 'tau': 4.0}},\n    ]\n\n    results = []\n    for case in test_cases:\n        # Generate noiseless synthetic data\n        y_vector = case['func'](t_vector, **case['params'])\n        # Classify the curve\n        code = classify_curve(t_vector, y_vector)\n        results.append(code)\n\n    # Print the final results in the required format\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2779373"}]}