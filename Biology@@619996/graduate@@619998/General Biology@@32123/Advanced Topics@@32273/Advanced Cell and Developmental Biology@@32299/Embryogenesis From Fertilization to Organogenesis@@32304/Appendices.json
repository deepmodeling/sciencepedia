{"hands_on_practices": [{"introduction": "Early embryogenesis involves dramatic changes in shape, such as the formation of the fluid-filled blastocoel. This process is governed by fundamental physical laws, where the form of the blastocyst represents a balance between the outward hydrostatic pressure and the inward pull from cortical tension in the epithelial cells. This exercise [@problem_id:2795119] guides you through a first-principles derivation of this force balance, revealing the elegant Young-Laplace relationship connecting pressure, tension, and curvature, and showing the embryo as a system in mechanical equilibrium.", "problem": "A mammalian blastocyst can be idealized as a thin, closed, epithelial shell enclosing a fluid-filled blastocoel. Assume the epithelial sheet is a mechanically uniform, isotropic, thin shell with constant cortical tension per unit length $T$ (integrated in-plane tension; bending rigidity negligible), enclosing an internal hydrostatic pressure that exceeds the external medium by $\\Delta P = P_{\\mathrm{in}} - P_{\\mathrm{out}}$. The shell is in static mechanical equilibrium. Using only local force balance and geometry, derive the relationship between $\\Delta P$, $T$, and tissue curvature during blastocoel expansion.\n\nSpecifically:\n- Treat a small patch of the shell bounded by orthogonal principal curvature directions, with principal radii of curvature $R_{1}$ and $R_{2}$ at the patch center, and perform a force balance normal to the surface on this patch under the thin-shell approximation.\n- Express your result first in terms of $R_{1}$ and $R_{2}$ and then in terms of the mean curvature $H$, defined as $H = \\frac{1}{2}\\left(\\frac{1}{R_{1}} + \\frac{1}{R_{2}}\\right)$.\n- Finally, specialize your expression to the case of a sphere of radius $R$ and verify consistency.\n\nProvide as your final answer a single closed-form analytic expression for $\\Delta P$ written only in terms of $T$ and $H$. No numerical evaluation is required, and no rounding is needed. Do not include units in the final expression.", "solution": "The problem statement has been subjected to rigorous validation and is found to be valid. It is scientifically grounded in the principles of continuum mechanics, specifically thin shell theory, and is a well-posed problem in biophysics. The givens are sufficient and consistent, and the terminology is precise. We may therefore proceed with the derivation.\n\nThe objective is to derive the relationship between the excess pressure $\\Delta P$ inside a closed epithelial shell and the shell's geometry and mechanical tension $T$. We are instructed to perform a force balance on a small, infinitesimally-sized patch of the shell.\n\nLet us consider a small, rectangular patch on the surface of the shell. We align our local coordinate system with the principal directions of curvature. The sides of the patch have lengths $ds_{1}$ and $ds_{2}$ along these two orthogonal directions. The corresponding principal radii of curvature are $R_{1}$ and $R_{2}$. The area of this patch is $dA = ds_{1} ds_{2}$.\n\nTwo types of forces act on this patch: the force due to the pressure difference $\\Delta P$ acting normal to the surface, and the forces due to the cortical tension $T$ acting tangentially at the edges of the patch. For the shell to be in static equilibrium, the sum of all force components normal to the patch must be zero.\n\n1.  Force due to Pressure:\n    The pressure difference $\\Delta P = P_{\\mathrm{in}} - P_{\\mathrm{out}}$ exerts a force $d\\vec{F}_{P}$ perpendicular to the surface element. The magnitude of this force is the pressure difference multiplied by the area of the patch. This force acts in the outward normal direction.\n    $$dF_{P} = \\Delta P \\, dA = \\Delta P \\, ds_{1} ds_{2}$$\n\n2.  Force due to Cortical Tension:\n    The cortical tension $T$ is a force per unit length, acting along the boundaries of the patch and tangent to the surface.\n    Consider the two edges of length $ds_{2}$, separated by the arc length $ds_{1}$. The tension forces acting on these edges have magnitude $T ds_{2}$. Because the surface is curved with radius $R_{1}$ in this direction, these two force vectors are not parallel. They are separated by a small angle $d\\theta_{1} = \\frac{ds_{1}}{R_{1}}$. The component of these forces normal to the patch surface can be found by considering the geometry. Each force vector makes an angle of $\\frac{d\\theta_{1}}{2}$ with the tangent plane at the center of the patch. The net force component normal to the surface, directed inward (towards the center of curvature), is given by:\n    $$dF_{T,1} = 2 \\left( T \\, ds_{2} \\right) \\sin\\left(\\frac{d\\theta_{1}}{2}\\right)$$\n    For an infinitesimal patch, the angle $d\\theta_{1}$ is very small, so we can use the small-angle approximation $\\sin(x) \\approx x$.\n    $$dF_{T,1} \\approx 2 \\left( T \\, ds_{2} \\right) \\left(\\frac{d\\theta_{1}}{2}\\right) = T \\, ds_{2} \\, d\\theta_{1}$$\n    Substituting $d\\theta_{1} = \\frac{ds_{1}}{R_{1}}$, we get:\n    $$dF_{T,1} = T \\, ds_{2} \\frac{ds_{1}}{R_{1}} = T \\frac{dA}{R_{1}}$$\n    By an identical argument for the other pair of edges of length $ds_{1}$, which are separated by an arc $ds_{2}$ along a curve with radius of curvature $R_{2}$, the net inward normal force is:\n    $$dF_{T,2} = T \\, ds_{1} \\frac{ds_{2}}{R_{2}} = T \\frac{dA}{R_{2}}$$\n    The total inward force from tension is the sum of these two components:\n    $$dF_{T} = dF_{T,1} + dF_{T,2} = T \\, dA \\left(\\frac{1}{R_{1}} + \\frac{1}{R_{2}}\\right)$$\n\n3.  Force Balance:\n    For the patch to be in static equilibrium, the outward pressure force must be balanced by the total inward tension force:\n    $$dF_{P} = dF_{T}$$\n    $$\\Delta P \\, dA = T \\, dA \\left(\\frac{1}{R_{1}} + \\frac{1}{R_{2}}\\right)$$\n    Dividing by the area element $dA$ (which is non-zero), we obtain the relationship in terms of the principal radii of curvature:\n    $$\\Delta P = T \\left(\\frac{1}{R_{1}} + \\frac{1}{R_{2}}\\right)$$\n    This is the Young-Laplace equation for a thin elastic membrane.\n\n4.  Expression in terms of Mean Curvature:\n    The problem defines the mean curvature $H$ as:\n    $$H = \\frac{1}{2}\\left(\\frac{1}{R_{1}} + \\frac{1}{R_{2}}\\right)$$\n    From this definition, it follows that the sum of the principal curvatures is $2H$:\n    $$\\frac{1}{R_{1}} + \\frac{1}{R_{2}} = 2H$$\n    Substituting this into our derived equation for $\\Delta P$:\n    $$\\Delta P = T(2H) = 2TH$$\n    This is the requested expression for $\\Delta P$ in terms of $T$ and $H$.\n\n5.  Verification for a Sphere:\n    Finally, we specialize this result to a sphere of radius $R$. For any point on a sphere, the surface is isotropic, and the two principal radii of curvature are equal to the radius of the sphere: $R_{1} = R_{2} = R$.\n    Using the first form of our result:\n    $$\\Delta P = T \\left(\\frac{1}{R} + \\frac{1}{R}\\right) = T \\left(\\frac{2}{R}\\right) = \\frac{2T}{R}$$\n    Now, let us calculate the mean curvature for a sphere:\n    $$H = \\frac{1}{2}\\left(\\frac{1}{R} + \\frac{1}{R}\\right) = \\frac{1}{2}\\left(\\frac{2}{R}\\right) = \\frac{1}{R}$$\n    Using the second form of our result with this value of $H$:\n    $$\\Delta P = 2TH = 2T\\left(\\frac{1}{R}\\right) = \\frac{2T}{R}$$\n    Both expressions yield the same correct and well-known result for a spherical shell, which confirms the consistency and correctness of our general derivation. The requested final answer is the expression for $\\Delta P$ in terms of $T$ and $H$.", "answer": "$$\n\\boxed{2TH}\n$$", "id": "2795119"}, {"introduction": "Once an embryo establishes its basic form, cells within tissues require positional information to differentiate correctly, often provided by gradients of signaling molecules called morphogens. The spatial extent of a morphogen gradient is determined by a dynamic competition between its diffusion through the tissue and its removal by degradation. By working through this problem [@problem_id:2795045], you will derive the fundamental reaction-diffusion equation governing these gradients and uncover the concept of an intrinsic length scale, $\\lambda = \\sqrt{D/k}$, a crucial parameter for understanding how developmental patterns are robustly established.", "problem": "In a developing vertebrate embryo, a secreted morphogen establishes a positional-information gradient across a planar epithelial sheet during early organogenesis. Consider a $1$-dimensional tissue domain $x \\in [0, L]$ with morphogen concentration $c(x,t)$. Assume the following fundamental biophysical principles hold: Fick’s law for diffusive flux $J(x,t)$, namely $J = -D\\,\\partial c/\\partial x$ with constant diffusion coefficient $D$, conservation of mass for $c(x,t)$ in the presence of a spatially uniform production source $S$ and first-order removal with rate constant $k$, and that the tissue is homogeneous and isotropic.\n\n(a) Starting from conservation of mass and Fick’s law, write down the governing partial differential equation (PDE) for $c(x,t)$.\n\n(b) At long times, the system reaches a steady state. Under steady state, solve for $c(x)$ on $[0,L]$ subject to a no-flux boundary at the proximal end $x=0$ (that is, $\\partial c/\\partial x \\big|_{x=0} = 0$) and a perfect-sink boundary at the distal end $x=L$ (that is, $c(L)=0$). Express your solution in terms of $D$, $k$, $S$, $L$, and $x$.\n\n(c) Using the structure of the steady-state solution and the homogeneous part of the governing ordinary differential equation, identify the intrinsic gradient length scale that controls the spatial range over which $c(x)$ decays and report it as a symbolic expression in terms of $D$ and $k$ only.\n\nReport only the expression requested in part (c) as your final answer. Do not include units. No numerical evaluation is required.", "solution": "The problem as presented is a standard exercise in mathematical biology, specifically concerning reaction-diffusion systems that model morphogen gradients. It is scientifically grounded, well-posed, and contains all necessary information to proceed with a rigorous solution. We will therefore validate the problem and derive the solution in three parts as requested.\n\nFirst, the validation of the problem statement.\nGivens are:\n1. A $1$-dimensional domain $x \\in [0, L]$.\n2. Morphogen concentration $c(x,t)$.\n3. Fick's law of diffusion: $J = -D\\,\\frac{\\partial c}{\\partial x}$, with $D$ constant.\n4. Conservation of mass for $c(x,t)$.\n5. A spatially uniform production source, $S$.\n6. A first-order removal process with rate constant $k$.\n7. A no-flux boundary condition at $x=0$: $\\frac{\\partial c}{\\partial x} \\big|_{x=0} = 0$.\n8. A perfect-sink boundary condition at $x=L$: $c(L) = 0$.\n9. The system is considered at steady state ($\\frac{\\partial c}{\\partial t} = 0$).\n\nThe problem is valid. It is a canonical representation of a physical process based on fundamental principles (conservation of mass, Fickian diffusion) and is therefore scientifically sound. It is well-posed, providing a second-order differential equation with two boundary conditions, ensuring a unique solution exists. All terms are defined, and no contradictions are present.\n\n(a) Derivation of the governing Partial Differential Equation (PDE).\n\nWe begin with the principle of conservation of mass. Consider an infinitesimal control volume of the tissue from position $x$ to $x + \\Delta x$. The total amount of morphogen in this volume is $\\int_{x}^{x+\\Delta x} c(\\xi, t) \\,d\\xi$. The rate of change of this amount over time is the sum of the net flux into the volume and the net effect of local production and removal.\n\nThe rate of change of the total amount of morphogen is:\n$$ \\frac{\\partial}{\\partial t} \\int_{x}^{x+\\Delta x} c(\\xi, t) \\,d\\xi $$\nThis change is balanced by the flux in at $x$, the flux out at $x+\\Delta x$, the production within the volume, and the removal within the volume:\n$$ \\frac{\\partial}{\\partial t} \\int_{x}^{x+\\Delta x} c(\\xi, t) \\,d\\xi = J(x,t) - J(x+\\Delta x, t) + \\int_{x}^{x+\\Delta x} (S - k c(\\xi,t)) \\,d\\xi $$\nFor an infinitesimally small volume $\\Delta x$, we can approximate the integrals: $\\int_{x}^{x+\\Delta x} c(\\xi, t) \\,d\\xi \\approx c(x,t)\\Delta x$. Applying this approximation and dividing the entire equation by $\\Delta x$, we obtain:\n$$ \\frac{\\partial c(x,t)}{\\partial t} \\approx -\\frac{J(x+\\Delta x, t) - J(x,t)}{\\Delta x} + S - k c(x,t) $$\nTaking the limit as $\\Delta x \\to 0$, the first term on the right becomes the negative partial derivative of the flux with respect to position:\n$$ \\frac{\\partial c}{\\partial t} = -\\frac{\\partial J}{\\partial x} + S - k c $$\nThis is the general continuity equation for this system. Now, we substitute Fick's law, $J = -D \\frac{\\partial c}{\\partial x}$, into this equation:\n$$ \\frac{\\partial c}{\\partial t} = -\\frac{\\partial}{\\partial x} \\left(-D \\frac{\\partial c}{\\partial x}\\right) + S - k c $$\nGiven that the diffusion coefficient $D$ is constant, it can be moved outside the spatial derivative. This yields the final governing PDE, which is a reaction-diffusion equation:\n$$ \\frac{\\partial c}{\\partial t} = D \\frac{\\partial^2 c}{\\partial x^2} - k c + S $$\n\n(b) Solution for the steady-state concentration profile $c(x)$.\n\nAt steady state, the concentration profile no longer changes with time, which means $\\frac{\\partial c}{\\partial t} = 0$. The PDE from part (a) reduces to a second-order ordinary differential equation (ODE):\n$$ D \\frac{d^2 c}{d x^2} - k c + S = 0 $$\nWe can rearrange this into a standard form for a linear non-homogeneous ODE:\n$$ \\frac{d^2 c}{d x^2} - \\frac{k}{D} c = -\\frac{S}{D} $$\nThe general solution $c(x)$ is the sum of the homogeneous solution $c_h(x)$ and a particular solution $c_p(x)$.\n\nThe particular solution, $c_p(x)$, can be found by inspection. Since the right-hand side is a constant, we propose a constant particular solution $c_p(x) = A$. Substituting into the ODE gives $0 - \\frac{k}{D} A = -\\frac{S}{D}$, which implies $A = \\frac{S}{k}$. Thus, $c_p(x) = \\frac{S}{k}$.\n\nThe homogeneous equation is $\\frac{d^2 c_h}{d x^2} - \\frac{k}{D} c_h = 0$. The characteristic equation is $r^2 - \\frac{k}{D} = 0$, which has roots $r = \\pm \\sqrt{\\frac{k}{D}}$. It is convenient to define a characteristic length scale $\\lambda = \\sqrt{\\frac{D}{k}}$. The roots are then $r = \\pm \\frac{1}{\\lambda}$. The general homogeneous solution can be written as $c_h(x) = C_1 e^{x/\\lambda} + C_2 e^{-x/\\lambda}$, or, more conveniently for the given boundary conditions, in terms of hyperbolic functions:\n$$ c_h(x) = B_1 \\cosh\\left(\\frac{x}{\\lambda}\\right) + B_2 \\sinh\\left(\\frac{x}{\\lambda}\\right) $$\nThe full general solution is therefore:\n$$ c(x) = B_1 \\cosh\\left(\\frac{x}{\\lambda}\\right) + B_2 \\sinh\\left(\\frac{x}{\\lambda}\\right) + \\frac{S}{k} $$\nWe now apply the boundary conditions to determine the constants $B_1$ and $B_2$. First, we need the derivative of $c(x)$:\n$$ \\frac{dc}{dx} = \\frac{B_1}{\\lambda} \\sinh\\left(\\frac{x}{\\lambda}\\right) + \\frac{B_2}{\\lambda} \\cosh\\left(\\frac{x}{\\lambda}\\right) $$\nThe no-flux condition at $x=0$ states $\\frac{dc}{dx}\\big|_{x=0} = 0$:\n$$ \\frac{B_1}{\\lambda} \\sinh(0) + \\frac{B_2}{\\lambda} \\cosh(0) = \\frac{B_1}{\\lambda}(0) + \\frac{B_2}{\\lambda}(1) = \\frac{B_2}{\\lambda} = 0 $$\nThis implies that $B_2 = 0$. The solution simplifies to:\n$$ c(x) = B_1 \\cosh\\left(\\frac{x}{\\lambda}\\right) + \\frac{S}{k} $$\nNext, we apply the perfect-sink condition at $x=L$, which is $c(L) = 0$:\n$$ B_1 \\cosh\\left(\\frac{L}{\\lambda}\\right) + \\frac{S}{k} = 0 $$\nSolving for $B_1$ gives:\n$$ B_1 = -\\frac{S/k}{\\cosh(L/\\lambda)} $$\nSubstituting $B_1$ back into the expression for $c(x)$, we obtain the final steady-state solution:\n$$ c(x) = \\frac{S}{k} - \\frac{S/k}{\\cosh(L/\\lambda)} \\cosh\\left(\\frac{x}{\\lambda}\\right) = \\frac{S}{k} \\left(1 - \\frac{\\cosh(x/\\lambda)}{\\cosh(L/\\lambda)}\\right) $$\nSubstituting $\\lambda = \\sqrt{D/k}$ gives the full expression:\n$$ c(x) = \\frac{S}{k} \\left( 1 - \\frac{\\cosh\\left(x\\sqrt{k/D}\\right)}{\\cosh\\left(L\\sqrt{k/D}\\right)} \\right) $$\n\n(c) Identification of the intrinsic gradient length scale.\n\nThe problem asks for the intrinsic length scale that controls the spatial range of the gradient. This scale is inherent to the biophysical process itself, independent of boundary conditions or domain size, although these factors shape the final profile. The scale is revealed by analyzing the homogeneous part of the governing ODE:\n$$ \\frac{d^2 c_h}{d x^2} - \\frac{k}{D} c_h = 0 $$\nTo make this equation dimensionally consistent, the term $\\frac{k}{D}$ must have units of inverse length squared. Let us define a parameter $\\lambda$ such that $\\frac{1}{\\lambda^2} = \\frac{k}{D}$. This equation can then be written as:\n$$ \\lambda^2 \\frac{d^2 c_h}{d x^2} - c_h = 0 $$\nHere, $\\lambda$ must have units of length. Its value is $\\lambda = \\sqrt{\\frac{D}{k}}$. The solutions to this homogeneous equation are exponential functions of the form $\\exp(\\pm x/\\lambda)$. This parameter $\\lambda$ is therefore the characteristic length over which the concentration profile decays or changes significantly. It represents the distance a typical morphogen molecule diffuses before it is removed by the first-order decay process. This is the intrinsic gradient length scale requested.", "answer": "$$ \\boxed{\\sqrt{\\frac{D}{k}}} $$", "id": "2795045"}, {"introduction": "To truly understand development, we must observe the dynamic transitions cells undergo as they commit to specific fates. Modern single-cell genomics provides a high-resolution snapshot of this process, but a key challenge is to infer the direction and speed of each cell's journey. This coding exercise [@problem_id:2795038] provides hands-on practice implementing the core RNA velocity algorithm, which uses the ratio of unspliced to spliced mRNA to predict a cell's future transcriptional state, thus bridging the gap between kinetic models and cutting-edge data analysis.", "problem": "You are given a principled framework to study transcriptional dynamics during embryogenesis from fertilization to organogenesis using Ribonucleic Acid (RNA) velocity. The goal is to connect fundamental gene expression kinetics to an algorithm that infers the instantaneous direction of change in spliced messenger RNA (mRNA) abundance from observed ratios of unspliced to spliced counts per gene per cell, and then use this velocity to assess lineage flow along a differentiation axis.\n\nFundamental base. Assume a single gene with unspliced transcript count denoted by $U(t)$ and spliced transcript count denoted by $S(t)$. Under first-order mass-action kinetics with constant rates over a short time horizon, transcription produces unspliced RNA at rate $\\alpha$, splicing converts unspliced to spliced at rate $\\beta$, and spliced RNA degrades at rate $\\gamma$. Then the well-tested model is\n$$\n\\frac{dU}{dt} = \\alpha - \\beta U,\\qquad \\frac{dS}{dt} = \\beta U - \\gamma S.\n$$\nAt steady state, $\\frac{dS}{dt} = 0$ implies $\\beta U = \\gamma S$, which defines the steady-state line in the $(U,S)$ phase portrait. Deviations from this line determine the sign and magnitude of $\\frac{dS}{dt}$: if $\\beta U - \\gamma S > 0$ the spliced abundance is increasing (up-regulation), and if $\\beta U - \\gamma S < 0$ it is decreasing (down-regulation). For $G$ independent genes with gene-specific rates $(\\beta_g,\\gamma_g)$ and measured counts $(U_g,S_g)$ in a given cell, the instantaneous velocity in spliced count space is the vector with components $\\frac{dS_g}{dt} = \\beta_g U_g - \\gamma_g S_g$.\n\nTask. Implement a program that, for each test case described below, computes:\n1. The gene-wise RNA velocity vector $\\mathbf{v}_i \\in \\mathbb{R}^G$ for each cell $i$, with components $v_{i,g} = \\beta_g U_{i,g} - \\gamma_g S_{i,g}$.\n2. A lineage axis vector $\\mathbf{a} \\in \\mathbb{R}^G$ defined as the difference between the mean spliced expression of a specified set of terminal cells and the mean spliced expression of a specified set of progenitor cells:\n$$\n\\mathbf{a} = \\frac{1}{N_{\\text{term}}} \\sum_{i \\in \\mathcal{T}} \\mathbf{S}_i - \\frac{1}{N_{\\text{prog}}} \\sum_{i \\in \\mathcal{P}} \\mathbf{S}_i,\n$$\nwhere $\\mathcal{T}$ and $\\mathcal{P}$ are index sets for terminal and progenitor cells, respectively. If $\\|\\mathbf{a}\\|_2 = 0$, take the unit axis $\\hat{\\mathbf{a}} = \\mathbf{0}$; otherwise, set $\\hat{\\mathbf{a}} = \\mathbf{a} / \\|\\mathbf{a}\\|_2$.\n3. The scalar projection $p_i$ of each cell’s velocity onto the lineage axis, $p_i = \\mathbf{v}_i \\cdot \\hat{\\mathbf{a}}$.\n4. The mean projection $\\bar{p} = \\frac{1}{N}\\sum_{i=1}^{N} p_i$ across all cells in the test case.\n\nYour program should compute $\\bar{p}$ for each test case and produce a single line of output containing the results as a comma-separated list enclosed in square brackets (e.g., $[\\bar{p}_1,\\bar{p}_2,\\bar{p}_3]$). Round each $\\bar{p}$ to three decimal places. No physical units are required. Do not use angles.\n\nTest suite. Each test case provides:\n- The number of genes $G$.\n- The gene-specific splicing and degradation rates $\\{\\beta_g\\}_{g=1}^G$ and $\\{\\gamma_g\\}_{g=1}^G$.\n- The number of cells $N$.\n- The unspliced and spliced count matrices $U \\in \\mathbb{R}^{N \\times G}$ and $S \\in \\mathbb{R}^{N \\times G}$.\n- The index sets of progenitor cells $\\mathcal{P}$ and terminal cells $\\mathcal{T}$, specified using $0$-based indices.\n\nProvide the outputs in the exact order of the test cases.\n\nTest case $1$ (increasing flow along differentiation):\n- $G = 2$.\n- $\\beta = [\\,0.8,\\,0.6\\,]$, $\\gamma = [\\,0.3,\\,0.4\\,]$.\n- $N = 4$.\n- $S = \\begin{bmatrix} 2.0 & 1.0 \\\\ 2.5 & 1.2 \\\\ 6.0 & 3.0 \\\\ 7.0 & 3.5 \\end{bmatrix}$, $U = \\begin{bmatrix} 1.5 & 1.5 \\\\ 1.8 & 1.0 \\\\ 2.0 & 2.5 \\\\ 2.1 & 2.4 \\end{bmatrix}$.\n- $\\mathcal{P} = \\{\\,0,\\,1\\,\\}$, $\\mathcal{T} = \\{\\,2,\\,3\\,\\}$.\n\nTest case $2$ (near steady-state; boundary behavior):\n- $G = 2$.\n- $\\beta = [\\,0.8,\\,0.6\\,]$, $\\gamma = [\\,0.3,\\,0.4\\,]$.\n- $N = 4$.\n- $S = \\begin{bmatrix} 4.0 & 3.0 \\\\ 5.0 & 2.0 \\\\ 3.0 & 3.0 \\\\ 6.0 & 3.0 \\end{bmatrix}$, $U = \\begin{bmatrix} 1.5 & 2.0 \\\\ 1.875 & 1.\\overline{3} \\\\ 1.125 & 2.0 \\\\ 2.25 & 2.0 \\end{bmatrix}$.\n- $\\mathcal{P} = \\{\\,0,\\,1\\,\\}$, $\\mathcal{T} = \\{\\,2,\\,3\\,\\}$.\n\nTest case $3$ (decreasing flow opposite to differentiation):\n- $G = 2$.\n- $\\beta = [\\,0.8,\\,0.6\\,]$, $\\gamma = [\\,0.3,\\,0.4\\,]$.\n- $N = 4$.\n- $S = \\begin{bmatrix} 2.0 & 2.0 \\\\ 2.2 & 2.5 \\\\ 5.0 & 5.5 \\\\ 6.0 & 6.0 \\end{bmatrix}$, $U = \\begin{bmatrix} 0.5 & 0.8 \\\\ 0.6 & 0.9 \\\\ 1.2 & 1.0 \\\\ 1.5 & 1.2 \\end{bmatrix}$.\n- $\\mathcal{P} = \\{\\,0,\\,1\\,\\}$, $\\mathcal{T} = \\{\\,2,\\,3\\,\\}$.\n\nImplementation requirements:\n- Use the model and definitions above without introducing any additional assumptions.\n- For each test case, compute the mean projection $\\bar{p}$ and round to three decimal places.\n- Your program should produce a single line of output containing the three rounded results as a comma-separated list enclosed in square brackets.", "solution": "The problem statement has been critically evaluated and is determined to be **valid**. It is scientifically grounded in the standard model of RNA velocity for single-cell transcriptomics, which is based on first-order mass-action kinetics. All definitions, equations, and data are provided, rendering the problem self-contained, well-posed, and free of contradictions or ambiguities. The objective is to implement a specified computational algorithm, which is a mathematically sound task.\n\nThe objective is to compute the mean projection, $\\bar{p}$, of cellular RNA velocity vectors onto a defined lineage axis for three distinct test cases. The procedure for each test case is as follows.\n\nFirst, we are given the number of genes, $G$, the number of cells, $N$, the gene-specific splicing rates, $\\boldsymbol{\\beta} \\in \\mathbb{R}^G$, and degradation rates, $\\boldsymbol{\\gamma} \\in \\mathbb{R}^G$. We are also provided with the unspliced count matrix, $U \\in \\mathbb{R}^{N \\times G}$, and the spliced count matrix, $S \\in \\mathbb{R}^{N \\times G}$. The rows of these matrices correspond to cells and the columns to genes.\n\nThe computational steps are enumerated below:\n\n1.  **Compute the RNA Velocity Matrix**: For each cell $i$, the RNA velocity vector $\\mathbf{v}_i \\in \\mathbb{R}^G$ is calculated. Its components are given by the formula for the rate of change of spliced mRNA, $v_{i,g} = \\frac{dS_{i,g}}{dt} = \\beta_g U_{i,g} - \\gamma_g S_{i,g}$. This calculation is performed for all $N$ cells and $G$ genes, yielding a velocity matrix $V \\in \\mathbb{R}^{N \\times G}$. Using array-based computation, this can be expressed as a broadcasted element-wise operation:\n    $$\n    V = U \\circ \\boldsymbol{\\beta}^T - S \\circ \\boldsymbol{\\gamma}^T\n    $$\n    where $\\circ$ denotes the Hadamard product, and $\\boldsymbol{\\beta}^T$ and $\\boldsymbol{\\gamma}^T$ are effectively broadcast across the rows of $U$ and $S$.\n\n2.  **Compute the Lineage Axis Vector**: The lineage axis, $\\mathbf{a} \\in \\mathbb{R}^G$, quantifies the primary direction of change in spliced gene expression from a progenitor state to a terminal state. It is defined as the difference between the mean spliced expression of terminal cells and progenitor cells. Given the index sets for progenitor cells, $\\mathcal{P}$, and terminal cells, $\\mathcal{T}$, with cardinalities $N_{\\text{prog}}$ and $N_{\\text{term}}$ respectively, we compute:\n    $$\n    \\bar{\\mathbf{S}}_{\\mathcal{P}} = \\frac{1}{N_{\\text{prog}}} \\sum_{i \\in \\mathcal{P}} \\mathbf{S}_i\n    \\qquad \\text{and} \\qquad\n    \\bar{\\mathbf{S}}_{\\mathcal{T}} = \\frac{1}{N_{\\text{term}}} \\sum_{i \\in \\mathcal{T}} \\mathbf{S}_i\n    $$\n    where $\\mathbf{S}_i$ is the $i$-th row of the matrix $S$. The axis vector is then:\n    $$\n    \\mathbf{a} = \\bar{\\mathbf{S}}_{\\mathcal{T}} - \\bar{\\mathbf{S}}_{\\mathcal{P}}\n    $$\n\n3.  **Normalize the Lineage Axis**: The axis vector $\\mathbf{a}$ is normalized to a unit vector $\\hat{\\mathbf{a}}$ to represent direction alone. This is achieved by dividing by its Euclidean norm, $\\|\\mathbf{a}\\|_2$:\n    $$\n    \\hat{\\mathbf{a}} = \\frac{\\mathbf{a}}{\\|\\mathbf{a}\\|_2}\n    $$\n    If $\\|\\mathbf{a}\\|_2 = 0$, which occurs if the mean progenitor and terminal profiles are identical, the normalized axis is defined as the zero vector, $\\hat{\\mathbf{a}} = \\mathbf{0}$.\n\n4.  **Project Velocities onto the Axis**: The scalar projection, $p_i$, of each cell's velocity vector $\\mathbf{v}_i$ onto the normalized lineage axis $\\hat{\\mathbf{a}}$ is computed using the dot product:\n    $$\n    p_i = \\mathbf{v}_i \\cdot \\hat{\\mathbf{a}}\n    $$\n    This value indicates the magnitude of the velocity component that aligns with the direction of differentiation. A positive $p_i$ implies the cell's transcriptional state is moving \"forward\" along the lineage, while a negative $p_i$ implies \"backward\" movement or dedifferentiation. These projections can be computed for all cells simultaneously via matrix-vector multiplication of the velocity matrix $V$ and the vector $\\hat{\\mathbf{a}}$.\n\n5.  **Compute the Mean Projection**: Finally, the average projection across all $N$ cells, $\\bar{p}$, is calculated to obtain a summary statistic of the overall lineage flow for the cell population:\n    $$\n    \\bar{p} = \\frac{1}{N} \\sum_{i=1}^{N} p_i\n    $$\n\nThis algorithm is applied to each of the three provided test cases. The resulting value of $\\bar{p}$ for each case is rounded to three decimal places.\n\n- **Test Case 1**: The data describe cells moving along the differentiation axis, resulting in a positive mean projection.\n- **Test Case 2**: The data are constructed such that all cells are at or near a steady state ($\\frac{dS}{dt} \\approx 0$). Consequently, all velocity vectors are zero, leading to zero projections and a mean projection of $0.000$.\n- **Test Case 3**: The data describe cells whose transcriptional dynamics oppose the direction of differentiation, resulting in a negative mean projection.\n\nThe final output will be a list of these three computed values.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes the mean projected RNA velocity for three test cases.\n    \"\"\"\n    test_cases = [\n        {\n            \"G\": 2,\n            \"beta\": np.array([0.8, 0.6]),\n            \"gamma\": np.array([0.3, 0.4]),\n            \"N\": 4,\n            \"S\": np.array([[2.0, 1.0], [2.5, 1.2], [6.0, 3.0], [7.0, 3.5]]),\n            \"U\": np.array([[1.5, 1.5], [1.8, 1.0], [2.0, 2.5], [2.1, 2.4]]),\n            \"P_indices\": [0, 1],\n            \"T_indices\": [2, 3],\n        },\n        {\n            \"G\": 2,\n            \"beta\": np.array([0.8, 0.6]),\n            \"gamma\": np.array([0.3, 0.4]),\n            \"N\": 4,\n            \"S\": np.array([[4.0, 3.0], [5.0, 2.0], [3.0, 3.0], [6.0, 3.0]]),\n            \"U\": np.array([[1.5, 2.0], [1.875, 4/3], [1.125, 2.0], [2.25, 2.0]]),\n            \"P_indices\": [0, 1],\n            \"T_indices\": [2, 3],\n        },\n        {\n            \"G\": 2,\n            \"beta\": np.array([0.8, 0.6]),\n            \"gamma\": np.array([0.3, 0.4]),\n            \"N\": 4,\n            \"S\": np.array([[2.0, 2.0], [2.2, 2.5], [5.0, 5.5], [6.0, 6.0]]),\n            \"U\": np.array([[0.5, 0.8], [0.6, 0.9], [1.2, 1.0], [1.5, 1.2]]),\n            \"P_indices\": [0, 1],\n            \"T_indices\": [2, 3],\n        },\n    ]\n\n    results = []\n    for case in test_cases:\n        # Unpack data for the current test case\n        U = case[\"U\"]\n        S = case[\"S\"]\n        beta = case[\"beta\"]\n        gamma = case[\"gamma\"]\n        N = case[\"N\"]\n        P_indices = case[\"P_indices\"]\n        T_indices = case[\"T_indices\"]\n\n        # 1. Compute the gene-wise RNA velocity vector v_i for each cell i\n        # V is an N x G matrix where each row is a velocity vector v_i\n        V = U * beta - S * gamma\n\n        # 2. Compute the lineage axis vector a\n        S_prog = S[P_indices, :]\n        S_term = S[T_indices, :]\n        \n        # Calculate mean expression for progenitor and terminal cells\n        mean_S_prog = np.mean(S_prog, axis=0)\n        mean_S_term = np.mean(S_term, axis=0)\n        \n        a = mean_S_term - mean_S_prog\n\n        # Normalize the lineage axis vector a\n        norm_a = np.linalg.norm(a)\n        if norm_a == 0:\n            a_hat = np.zeros_like(a)\n        else:\n            a_hat = a / norm_a\n\n        # 3. Compute the scalar projection p_i of each cell's velocity onto the lineage axis\n        # p is a vector of N projections\n        projections = V @ a_hat\n\n        # 4. Compute the mean projection p_bar\n        p_bar = np.mean(projections)\n        \n        results.append(p_bar)\n\n    # Format results to three decimal places for the final output\n    formatted_results = [f\"{res:.3f}\" for res in results]\n    \n    # Final print statement in the exact required format.\n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n```", "id": "2795038"}]}