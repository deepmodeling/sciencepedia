{"hands_on_practices": [{"introduction": "To understand the spread of antibiotic resistance, we must first answer a fundamental question: under what conditions can a resistance plasmid successfully invade and establish itself within a susceptible bacterial population? This practice guides you through the process of building a foundational model from first principles. By translating biological assumptions—such as bacterial growth, plasmid transfer via conjugation, and plasmid loss during cell division—into a system of ordinary differential equations, you will construct a classic compartmental model [@problem_id:2831708]. The central goal is to derive the basic reproduction number, $R_0$, a crucial threshold parameter that determines whether the plasmid will spread or die out. This exercise develops essential skills in mathematical modeling and stability analysis, providing a cornerstone for understanding the dynamics of infectious agents.", "problem": "In a well-mixed bacterial population, consider three compartments corresponding to plasmid epidemiology: donors $D$ (cells that carry a conjugative resistance plasmid and can transfer it), recipients $R$ (plasmid-free cells), and transconjugants $T$ (cells that have newly acquired the plasmid by conjugation and can themselves transfer it). Assume the following foundational biological principles hold:\n- Logistic population regulation: each cell type contributes to a total population $N$ with logistic limitation at carrying capacity $K$. Plasmid-free cells have per capita birth rate $b$, while plasmid-bearing cells (both $D$ and $T$) have a fitness cost $c$ so their per capita birth rate is $b(1-c)$, with $0 \\le c < 1$. All cells have an identical per capita natural death rate $m$.\n- Mass-action conjugation: donor–recipient and transconjugant–recipient encounters occur at mass-action rates with constants $\\beta_D$ and $\\beta_T$, respectively, each event converting one $R$ into one $T$.\n- Plasmid segregation loss: plasmid-bearing cells can lose the plasmid at per capita rates $\\sigma_D$ (for $D$) and $\\sigma_T$ (for $T$), converting to $R$.\n- No other transitions occur: $D$ and $T$ do not interconvert by conjugation; all conjugation converts $R$ to $T$.\n\nStarting only from the above principles and the definitions of mass-action kinetics and logistic growth, perform the following:\n1. Derive a minimal closed ordinary differential equation (ODE) system for the dynamics of $D(t)$, $R(t)$, and $T(t)$, clearly justifying each term based on the stated principles.\n2. Identify the plasmid-free equilibrium (commonly called the disease-free equilibrium (DFE)) in which $D=0$ and $T=0$, and determine $R^{\\ast}$ in terms of $b$, $m$, and $K$, including the condition for its biological feasibility.\n3. Using the next-generation matrix construction for compartmental infection models, define the vector of infected compartments, decompose the linearized system at the DFE into the form $\\dot{x} = Fx - Vx$ where $F$ contains terms corresponding to the appearance of new plasmid infections and $V$ contains all other transitions and losses among infected compartments, and derive the basic reproduction number $R_0$ (the basic reproduction number) as the spectral radius of $F V^{-1}$.\n4. Express your final answer for $R_0$ as a single closed-form expression in terms of $b$, $c$, $m$, $\\sigma_D$, $\\sigma_T$, $\\beta_D$, $\\beta_T$, and $K$ only. Do not substitute numerical values. Your final answer must be a single analytical expression. Do not include any units. Do not round.", "solution": "The problem statement is scientifically grounded, well-posed, objective, and self-contained. It describes a standard compartmental model in mathematical biology, and the tasks required are based on established analytical techniques. The problem is valid.\n\nThe solution is developed in four parts as requested.\n\nPart 1: Derivation of the Ordinary Differential Equation (ODE) System\n\nThe system models the population dynamics of three compartments: Donors ($D$), Recipients ($R$), and Transconjugants ($T$). The total population is $N(t) = D(t) + R(t) + T(t)$. The dynamics are governed by logistic growth, natural death, plasmid conjugation, and plasmid segregation. We construct the rate equation for each compartment by summing the rates of all processes that increase or decrease its population.\n\n1.  Rate of change of Donors, $\\frac{dD}{dt}$:\n    -   Birth: Plasmid-bearing cells, including Donors, have a per capita birth rate of $b(1-c)$, subject to logistic limitation with carrying capacity $K$. The growth term is $b(1-c) D \\left(1 - \\frac{N}{K}\\right)$.\n    -   Death: All cells have a per capita natural death rate of $m$. The loss term is $-m D$.\n    -   Plasmid Segregation: Donors lose plasmids at a per capita rate of $\\sigma_D$, becoming Recipients. The loss term is $-\\sigma_D D$.\n    -   Conjugation: According to the problem, Donors act to convert Recipients to Transconjugants. They are not created or lost in this process, and no new Donors are formed via conjugation.\n    Combining these terms, the ODE for $D$ is:\n    $$ \\frac{dD}{dt} = b(1-c) D \\left(1 - \\frac{D+R+T}{K}\\right) - m D - \\sigma_D D $$\n\n2.  Rate of change of Recipients, $\\frac{dR}{dt}$:\n    -   Birth: Plasmid-free Recipient cells have a per capita birth rate of $b$, with logistic limitation. The growth term is $b R \\left(1 - \\frac{N}{K}\\right)$.\n    -   Death: The loss term due to natural death is $-m R$.\n    -   Gain from Segregation: Recipients are formed when Donors and Transconjugants lose their plasmids, at rates $\\sigma_D D$ and $\\sigma_T T$ respectively. The gain term is $+\\sigma_D D + \\sigma_T T$.\n    -   Loss to Conjugation: Recipients are converted to Transconjugants upon contact with Donors or Transconjugants. These events occur at mass-action rates $\\beta_D D R$ and $\\beta_T T R$. The loss term is $-\\beta_D D R - \\beta_T T R$.\n    Combining these terms, the ODE for $R$ is:\n    $$ \\frac{dR}{dt} = b R \\left(1 - \\frac{D+R+T}{K}\\right) - m R + \\sigma_D D + \\sigma_T T - (\\beta_D D + \\beta_T T)R $$\n\n3.  Rate of change of Transconjugants, $\\frac{dT}{dt}$:\n    -   Birth: As plasmid-bearing cells, Transconjugants have a per capita birth rate of $b(1-c)$, with logistic limitation. The growth term is $b(1-c) T \\left(1 - \\frac{N}{K}\\right)$.\n    -   Death: The loss term due to natural death is $-m T$.\n    -   Plasmid Segregation: Transconjugants lose plasmids at a per capita rate of $\\sigma_T$, becoming Recipients. The loss term is $-\\sigma_T T$.\n    -   Gain from Conjugation: Transconjugants are created from Recipients through conjugation with both Donors and Transconjugants. The gain term is $+\\beta_D D R + \\beta_T T R$.\n    Combining these terms, the ODE for $T$ is:\n    $$ \\frac{dT}{dt} = b(1-c) T \\left(1 - \\frac{D+R+T}{K}\\right) - m T - \\sigma_T T + (\\beta_D D + \\beta_T T)R $$\n\nThe complete, closed ODE system is:\n$$ \\frac{dD}{dt} = D \\left[ b(1-c) \\left(1 - \\frac{D+R+T}{K}\\right) - m - \\sigma_D \\right] $$\n$$ \\frac{dR}{dt} = R \\left[ b \\left(1 - \\frac{D+R+T}{K}\\right) - m \\right] + \\sigma_D D + \\sigma_T T - (\\beta_D D + \\beta_T T)R $$\n$$ \\frac{dT}{dt} = T \\left[ b(1-c) \\left(1 - \\frac{D+R+T}{K}\\right) - m - \\sigma_T \\right] + (\\beta_D D + \\beta_T T)R $$\n\nPart 2: Plasmid-Free Equilibrium (DFE)\n\nThe plasmid-free equilibrium (PFE), or disease-free equilibrium (DFE), is a steady state where no plasmids are present in the population. We find this state by setting $D=0$, $T=0$, and $\\frac{dD}{dt} = \\frac{dR}{dt} = \\frac{dT}{dt} = 0$.\nWith $D=0$ and $T=0$, the equations for $D$ and $T$ are trivially satisfied. The equation for $R$ becomes:\n$$ \\frac{dR}{dt} = b R \\left(1 - \\frac{R}{K}\\right) - m R = 0 $$\nFactoring out $R$, we get:\n$$ R \\left[ b \\left(1 - \\frac{R}{K}\\right) - m \\right] = 0 $$\nThis equation has two solutions for $R$: the trivial solution $R=0$ (total population extinction) and the non-trivial solution found by setting the bracketed term to zero:\n$$ b \\left(1 - \\frac{R}{K}\\right) - m = 0 $$\n$$ 1 - \\frac{R}{K} = \\frac{m}{b} $$\n$$ \\frac{R}{K} = 1 - \\frac{m}{b} = \\frac{b-m}{b} $$\nSolving for $R$ gives the equilibrium recipient population size, denoted $R^{\\ast}$:\n$$ R^{\\ast} = K \\left(1 - \\frac{m}{b}\\right) = K \\frac{b-m}{b} $$\nFor this equilibrium to be biologically feasible, the population size must be positive, i.e., $R^{\\ast} > 0$. This requires $b-m > 0$, or $b > m$. The per capita birth rate must exceed the per capita death rate for the plasmid-free population to persist.\nThe DFE is thus given by the state $(D, R, T) = (0, R^{\\ast}, 0) = \\left(0, K\\frac{b-m}{b}, 0\\right)$.\n\nPart 3: Next-Generation Matrix Construction\n\nWe use the next-generation matrix (NGM) method to find the basic reproduction number, $R_0$. The infected compartments are those carrying the plasmid, so the state vector of infected compartments is $x = (D, T)^T$.\nThe dynamics of the infected compartments can be written as $\\dot{x} = \\mathcal{F}(x) - \\mathcal{V}(x)$, where $\\mathcal{F}$ is the rate of appearance of new infections and $\\mathcal{V}$ is the rate of all other transitions (growth, death, recovery).\n\nThe terms corresponding to the creation of new plasmid-carrying cells (new infections) are those from conjugation. Since all conjugation events produce Transconjugants, new infections only appear in the $T$ compartment.\n$$ \\mathcal{F} = \\begin{pmatrix} \\mathcal{F}_D \\\\ \\mathcal{F}_T \\end{pmatrix} = \\begin{pmatrix} 0 \\\\ (\\beta_D D + \\beta_T T)R \\end{pmatrix} $$\nThe remaining terms constitute the transitions part, $\\mathcal{V}$:\n$$ \\mathcal{V} = \\begin{pmatrix} \\mathcal{V}_D \\\\ \\mathcal{V}_T \\end{pmatrix} = \\begin{pmatrix} -D \\left[ b(1-c) \\left(1 - \\frac{D+R+T}{K}\\right) - m - \\sigma_D \\right] \\\\ -T \\left[ b(1-c) \\left(1 - \\frac{D+R+T}{K}\\right) - m - \\sigma_T \\right] \\end{pmatrix} $$\nThe matrices $F$ and $V$ are the Jacobians of $\\mathcal{F}$ and $\\mathcal{V}$ with respect to the infected variables $(D, T)$, evaluated at the DFE $(0, R^{\\ast}, 0)$.\n\nThe matrix $F$ is:\n$$ F = \\left. \\begin{pmatrix} \\frac{\\partial \\mathcal{F}_D}{\\partial D} & \\frac{\\partial \\mathcal{F}_D}{\\partial T} \\\\ \\frac{\\partial \\mathcal{F}_T}{\\partial D} & \\frac{\\partial \\mathcal{F}_T}{\\partial T} \\end{pmatrix} \\right|_{(0,R^{\\ast},0)} = \\left. \\begin{pmatrix} 0 & 0 \\\\ \\beta_D R & \\beta_T R \\end{pmatrix} \\right|_{(0,R^{\\ast},0)} = \\begin{pmatrix} 0 & 0 \\\\ \\beta_D R^{\\ast} & \\beta_T R^{\\ast} \\end{pmatrix} $$\nThe matrix $V$ is:\n$$ V = \\left. \\begin{pmatrix} \\frac{\\partial \\mathcal{V}_D}{\\partial D} & \\frac{\\partial \\mathcal{V}_D}{\\partial T} \\\\ \\frac{\\partial \\mathcal{V}_T}{\\partial D} & \\frac{\\partial \\mathcal{V}_T}{\\partial T} \\end{pmatrix} \\right|_{(0,R^{\\ast},0)} $$\nLet's compute the partial derivatives of $\\mathcal{V}$:\n$\\frac{\\partial \\mathcal{V}_D}{\\partial D} = -\\left[ b(1-c) \\left(1-\\frac{D+R+T}{K}\\right) - m - \\sigma_D \\right] - D \\left[ b(1-c)\\left(-\\frac{1}{K}\\right) \\right]$.\nAt the DFE: $\\frac{\\partial \\mathcal{V}_D}{\\partial D} = -\\left[ b(1-c) \\left(1-\\frac{R^{\\ast}}{K}\\right) - m - \\sigma_D \\right]$. Since $1-\\frac{R^{\\ast}}{K} = \\frac{m}{b}$, this simplifies to $-\\left[ b(1-c)\\frac{m}{b} - m - \\sigma_D \\right] = -[m(1-c) - m - \\sigma_D] = -[-mc - \\sigma_D] = \\sigma_D + mc$.\n$\\frac{\\partial \\mathcal{V}_D}{\\partial T} = -D \\left[ b(1-c)\\left(-\\frac{1}{K}\\right) \\right]$. At the DFE, $D=0$, so $\\frac{\\partial \\mathcal{V}_D}{\\partial T} = 0$.\nBy symmetry, the derivatives for $\\mathcal{V}_T$ are analogous:\n$\\frac{\\partial \\mathcal{V}_T}{\\partial T} = \\sigma_T + mc$.\n$\\frac{\\partial \\mathcal{V}_T}{\\partial D} = 0$.\nSo the matrix $V$ is:\n$$ V = \\begin{pmatrix} \\sigma_D + mc & 0 \\\\ 0 & \\sigma_T + mc \\end{pmatrix} $$\n\nPart 4: Derivation of the Basic Reproduction Number $R_0$\n\n$R_0$ is the spectral radius of the next-generation matrix $K_L = FV^{-1}$. First, we find the inverse of $V$:\n$$ V^{-1} = \\begin{pmatrix} \\frac{1}{\\sigma_D + mc} & 0 \\\\ 0 & \\frac{1}{\\sigma_T + mc} \\end{pmatrix} $$\nThis inverse is well-defined provided the diagonal entries of $V$ are non-zero. Since $m>0$ is required for a stable DFE, and $c, \\sigma_D, \\sigma_T \\ge 0$, the denominators are positive.\n\nNow, we compute $K_L$:\n$$ K_L = FV^{-1} = \\begin{pmatrix} 0 & 0 \\\\ \\beta_D R^{\\ast} & \\beta_T R^{\\ast} \\end{pmatrix} \\begin{pmatrix} \\frac{1}{\\sigma_D + mc} & 0 \\\\ 0 & \\frac{1}{\\sigma_T + mc} \\end{pmatrix} $$\n$$ K_L = \\begin{pmatrix} 0 & 0 \\\\ \\frac{\\beta_D R^{\\ast}}{\\sigma_D + mc} & \\frac{\\beta_T R^{\\ast}}{\\sigma_T + mc} \\end{pmatrix} $$\n$R_0$ is the largest absolute eigenvalue of $K_L$. The eigenvalues $\\lambda$ are the roots of the characteristic equation $\\det(K_L - \\lambda I)=0$:\n$$ \\det \\begin{pmatrix} -\\lambda & 0 \\\\ \\frac{\\beta_D R^{\\ast}}{\\sigma_D + mc} & \\frac{\\beta_T R^{\\ast}}{\\sigma_T + mc} - \\lambda \\end{pmatrix} = (-\\lambda)\\left(\\frac{\\beta_T R^{\\ast}}{\\sigma_T + mc} - \\lambda\\right) = 0 $$\nThe eigenvalues are $\\lambda_1=0$ and $\\lambda_2 = \\frac{\\beta_T R^{\\ast}}{\\sigma_T + mc}$. Since all parameters are non-negative, the spectral radius is $\\rho(K_L) = \\lambda_2$.\n$$ R_0 = \\frac{\\beta_T R^{\\ast}}{\\sigma_T + mc} $$\nThis result signifies that the capacity of the plasmid to invade is determined by the reproductive fitness of the transconjugants ($T$) alone, as they are the only self-replenishing infectious class.\n\nFinally, we substitute the expression for $R^{\\ast} = K\\frac{b-m}{b}$ to obtain the final form of $R_0$:\n$$ R_0 = \\frac{\\beta_T \\left(K\\frac{b-m}{b}\\right)}{\\sigma_T + mc} = \\frac{\\beta_T K (b-m)}{b(\\sigma_T + mc)} $$", "answer": "$$\\boxed{\\frac{\\beta_T K (b-m)}{b(\\sigma_T + mc)}}$$", "id": "2831708"}, {"introduction": "Building on the fundamentals of plasmid dynamics, we can address pressing real-world issues, such as how to design effective antibiotic stewardship programs. This practice transitions from analytical solutions to computational simulation, a powerful tool for exploring complex scenarios where simple formulas are insufficient. You will work with a more detailed eco-evolutionary model that explicitly includes the effects of antibiotics on both plasmid-free and plasmid-bearing bacteria [@problem_id:2831761]. By simulating different treatment strategies—such as continuous restriction, periodic cycling, and partial mixing of antibiotics—you will quantitatively compare their impacts on long-term plasmid prevalence. This hands-on computational exercise demonstrates how dynamic models can be used to evaluate and inform public health policies aimed at curbing the spread of antibiotic resistance.", "problem": "Model the effect of antibiotic stewardship policies on the prevalence of resistance (R) plasmids by explicitly coupling ecological growth with evolutionary processes of horizontal gene transfer and plasmid loss. Consider two bacterial subpopulations in a well-mixed environment: plasmid-free cells with density $s(t)$ and plasmid-bearing cells with density $r(t)$. Assume density-dependent growth with unit carrying capacity, baseline per-capita intrinsic growth factor $g$, a plasmid carriage cost $c \\in [0,1)$ that reduces the intrinsic growth of plasmid-bearing cells by a multiplicative factor $(1-c)$, mass-action conjugation at rate $\\beta$ converting plasmid-free cells into plasmid-bearing cells, and plasmid segregation loss at rate $\\sigma$ converting plasmid-bearing cells into plasmid-free cells. Let $A(t) \\in [0,1]$ denote antibiotic intensity as a function of time, with per-capita antibiotic-induced mortality coefficients $u$ for plasmid-free cells and $v$ for plasmid-bearing cells, where $u \\ge v \\ge 0$. The coupled ecological–evolutionary dynamics are defined by the following system:\n$$\n\\frac{ds}{dt} \\;=\\; s\\,\\big(g\\,(1 - (s+r))\\big)\\;-\\;u\\,A(t)\\,s\\;-\\;\\beta\\,s\\,r\\;+\\;\\sigma\\,r,\n$$\n$$\n\\frac{dr}{dt} \\;=\\; r\\,\\big(g\\,(1 - c)\\,(1 - (s+r))\\big)\\;-\\;v\\,A(t)\\,r\\;+\\;\\beta\\,s\\,r\\;-\\;\\sigma\\,r.\n$$\nDefine the instantaneous plasmid prevalence as the fraction\n$$\nx(t) \\;=\\; \\frac{r(t)}{s(t) + r(t)}.\n$$\nFor a given time horizon $T$ and a trailing window length $W$ with $0 &lt; W \\le T$, define the long-time average plasmid prevalence as\n$$\n\\bar{x} \\;=\\; \\frac{1}{W}\\int_{T-W}^{T} x(t)\\, dt.\n$$\nAntibiotic stewardship policies are encoded as specific $A(t)$:\n- Restriction: $A(t) = 0$ for all $t$.\n- Cycling: Let period $P &gt; 0$ and duty fraction $q \\in [0,1]$. Then\n$$\nA(t) \\;=\\; \\begin{cases}\n1, & \\text{if } t \\bmod P \\in [0, qP),\\\\\n0, & \\text{otherwise.}\n\\end{cases}\n$$\n- Mixing: A constant fraction $p \\in [0,1]$ of the environment is effectively under antibiotic at all times, so $A(t) = p$ for all $t$.\n\nYour task is to compute, for each test case, which policy minimizes the long-time average plasmid prevalence $\\bar{x}$ given the parameters. Break ties by selecting the smallest index according to the following mapping: restriction $\\to 0$, cycling $\\to 1$, mixing $\\to 2$. Specifically, if two or more policies have $\\bar{x}$ values within an absolute difference of $\\varepsilon = 10^{-6}$ of the minimum, return the smallest index among them.\n\nImplementation requirements:\n- Use the above differential equations with the provided parameter values.\n- Initialize the system at time $t=0$ with densities $s(0)$ and $r(0)$ as given.\n- Compute $\\bar{x}$ by numerical time integration over the interval $[T-W,\\,T]$. All quantities are dimensionless; no physical units are required.\n- The final output must be a single line containing a list of integers, one per test case, in the order given below, enclosed in square brackets and comma-separated, for example: $[0,1,2]$.\n\nTest suite (each case provides $(g, c, \\beta, \\sigma, u, v, p, P, q, s(0), r(0), T, W)$):\n- Case $1$: $(1.0,\\;0.04,\\;0.30,\\;0.05,\\;0.70,\\;0.10,\\;0.40,\\;40.0,\\;0.50,\\;0.99,\\;0.01,\\;400.0,\\;100.0)$.\n- Case $2$ (boundary: no conjugation): $(1.0,\\;0.02,\\;0.00,\\;0.10,\\;0.80,\\;0.05,\\;0.50,\\;20.0,\\;0.50,\\;0.99,\\;0.01,\\;400.0,\\;100.0)$.\n- Case $3$ (edge: high plasmid cost): $(1.0,\\;0.20,\\;0.25,\\;0.15,\\;0.60,\\;0.10,\\;0.30,\\;30.0,\\;0.50,\\;0.99,\\;0.01,\\;400.0,\\;100.0)$.\n- Case $4$ (edge: strong horizontal transfer): $(1.0,\\;0.05,\\;0.80,\\;0.02,\\;0.50,\\;0.05,\\;0.20,\\;50.0,\\;0.30,\\;0.99,\\;0.01,\\;400.0,\\;100.0)$.\n- Case $5$ (edge: fast cycling, same mean intensity as mixing): $(1.0,\\;0.03,\\;0.30,\\;0.05,\\;0.70,\\;0.10,\\;0.50,\\;5.0,\\;0.50,\\;0.99,\\;0.01,\\;400.0,\\;100.0)$.\n\nYour program should produce a single line of output containing the results as a comma-separated list of integers enclosed in square brackets (for example, $[0,1,2,0,1]$), where each integer is the selected policy index for the corresponding test case in the order specified above.", "solution": "The problem statement has been validated and is deemed a legitimate, well-posed problem in mathematical biology. It is scientifically grounded, internally consistent, and programmatically solvable.\n\nThe problem requires the analysis of a system of coupled, nonlinear ordinary differential equations (ODEs) that model the population dynamics of plasmid-free, antibiotic-sensitive bacteria, $s(t)$, and plasmid-bearing, antibiotic-resistant bacteria, $r(t)$. The model is a specific instance of a Lotka-Volterra competition framework, augmented to include key evolutionary processes relevant to antibiotic resistance: horizontal gene transfer via conjugation (rate $\\beta$), plasmid segregation loss (rate $\\sigma$), and fitness costs associated with plasmid carriage (cost $c$).\n\nThe governing equations are:\n$$\n\\frac{ds}{dt} \\;=\\; s\\,\\big(g\\,(1 - (s+r))\\big)\\;-\\;u\\,A(t)\\,s\\;-\\;\\beta\\,s\\,r\\;+\\;\\sigma\\,r,\n$$\n$$\n\\frac{dr}{dt} \\;=\\; r\\,\\big(g\\,(1 - c)\\,(1 - (s+r))\\big)\\;-\\;v\\,A(t)\\,r\\;+\\;\\beta\\,s\\,r\\;-\\;\\sigma\\,r.\n$$\nHere, the total population $N(t) = s(t) + r(t)$ experiences density-dependent growth limitation with a carrying capacity normalized to $1$. The term $A(t)$ represents the time-varying intensity of antibiotic treatment, which differentially affects the two subpopulations with mortality coefficients $u$ and $v$ ($u \\ge v$).\n\nThe objective is to determine which of three distinct antibiotic stewardship policies—Restriction ($A(t)=0$), Cycling (periodic application), or Mixing (constant application at partial intensity)—is most effective at minimizing the long-time average prevalence of the resistance plasmid, defined as:\n$$\n\\bar{x} \\;=\\; \\frac{1}{W}\\int_{T-W}^{T} x(t)\\, dt, \\quad \\text{where} \\quad x(t) = \\frac{r(t)}{s(t)+r(t)}.\n$$\nThe analytical solution of this nonlinear system is intractable, necessitating a numerical approach. The solution methodology is as follows:\n\n1.  **Numerical Integration**: For each test case and for each of the three ($3$) specified policies, the system of ODEs is solved numerically. The `solve_ivp` function from the SciPy library is an appropriate tool, providing a robust, adaptive-step-size Runge-Kutta method (e.g., `RK45`) for integrating initial value problems.\n\n2.  **Implementation of Policies**: The function $A(t)$ is implemented according to the definition of each policy:\n    -   **Restriction (index $0$)**: $A(t) = 0$ for all $t$.\n    -   **Cycling (index $1$)**: $A(t)$ is a periodic step function with period $P$ and duty fraction $q$. Specifically, $A(t)=1$ if $t \\pmod P \\in [0, qP)$ and $A(t)=0$ otherwise.\n    -   **Mixing (index $2$)**: $A(t) = p$, a constant value for all $t$.\n\n3.  **Calculation of Average Prevalence $\\bar{x}$**: The system is integrated from the initial state $(s(0), r(0))$ over the time horizon $[0, T]$. To accurately compute the integral for $\\bar{x}$, the `dense_output=True` option of `solve_ivp` is utilized. This provides a continuous representation of the solution, which can then be evaluated at a dense set of points (e.g., $2001$ points) spanning the averaging window $[T-W, T]$. At these time points, the instantaneous prevalence $x(t)$ is calculated. The integral $\\int_{T-W}^{T} x(t)\\, dt$ is then computed using a standard numerical quadrature rule, such as the trapezoidal rule, available as `scipy.integrate.trapezoid`. The resulting value is divided by the window length $W$ to obtain $\\bar{x}$. To prevent division by zero in the calculation of $x(t)$ in the unlikely event of population collapse, cell densities $s(t)$ and $r(t)$ are treated as non-negative, and the prevalence is defined to be $0$ if the total population is below a small numerical threshold.\n\n4.  **Optimal Policy Selection**: After computing $\\bar{x}$ for each of the three policies, the values are compared. The policy that yields the minimum $\\bar{x}$ is identified. In cases of a near-tie, where multiple policies produce $\\bar{x}$ values within an absolute tolerance $\\varepsilon = 10^{-6}$ of the minimum, the policy with the smallest index ($0$ for restriction, $1$ for cycling, $2$ for mixing) is chosen, as per the problem specification.\n\nThis procedure is systematically applied to each of the five ($5$) test cases provided, generating a definitive index for the optimal policy in each scenario. The final output is a list of these indices.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.integrate import solve_ivp, trapezoid\n\ndef solve():\n    \"\"\"\n    Solves the antibiotic stewardship optimization problem by simulating a system\n    of ODEs for different policies and identifying the one that minimizes\n    the long-time average plasmid prevalence.\n    \"\"\"\n    # Test suite from the problem statement.\n    # Each tuple contains: (g, c, beta, sigma, u, v, p, P, q, s0, r0, T, W)\n    test_cases = [\n        (1.0, 0.04, 0.30, 0.05, 0.70, 0.10, 0.40, 40.0, 0.50, 0.99, 0.01, 400.0, 100.0),\n        (1.0, 0.02, 0.00, 0.10, 0.80, 0.05, 0.50, 20.0, 0.50, 0.99, 0.01, 400.0, 100.0),\n        (1.0, 0.20, 0.25, 0.15, 0.60, 0.10, 0.30, 30.0, 0.50, 0.99, 0.01, 400.0, 100.0),\n        (1.0, 0.05, 0.80, 0.02, 0.50, 0.05, 0.20, 50.0, 0.30, 0.99, 0.01, 400.0, 100.0),\n        (1.0, 0.03, 0.30, 0.05, 0.70, 0.10, 0.50, 5.0, 0.50, 0.99, 0.01, 400.0, 100.0),\n    ]\n\n    final_results = []\n\n    # Define the right-hand side of the ODE system.\n    def system_dynamics(t, y, g, c, beta, sigma, u, v, policy_idx, policy_params):\n        s, r = y\n        \n        # Ensure populations are non-negative, a safeguard against numerical artifacts.\n        s = max(s, 0.0)\n        r = max(r, 0.0)\n\n        p, P, q = policy_params\n        \n        A_t = 0.0\n        if policy_idx == 1:  # Cycling policy\n            if (t % P) < (q * P):\n                A_t = 1.0\n        elif policy_idx == 2:  # Mixing policy\n            A_t = p\n        # For policy_idx 0 (Restriction), A_t remains 0.0.\n\n        total_pop = s + r\n        \n        # Density-dependent growth factor.\n        growth_factor = 1.0 - total_pop\n        \n        dsdt = s * (g * growth_factor) - u * A_t * s - beta * s * r + sigma * r\n        drdt = r * (g * (1.0 - c) * growth_factor) - v * A_t * r + beta * s * r - sigma * r\n        \n        return [dsdt, drdt]\n\n    for case in test_cases:\n        g, c, beta, sigma, u, v, p, P, q, s0, r0, T, W = case\n        y0 = [s0, r0]\n        t_span = [0.0, T]\n        \n        policy_results_x_bar = []\n        \n        # Iterate through policies: 0: Restriction, 1: Cycling, 2: Mixing\n        for policy_idx in range(3):\n            policy_params = (p, P, q)\n            \n            # Solve the ODE system with dense output to allow for fine-grained\n            # evaluation in the final window.\n            sol = solve_ivp(\n                system_dynamics,\n                t_span,\n                y0,\n                args=(g, c, beta, sigma, u, v, policy_idx, policy_params),\n                dense_output=True,\n                method='RK45',\n                rtol=1e-6, \n                atol=1e-9\n            )\n            \n            # Create a fine grid of time points over the averaging window.\n            t_window = np.linspace(T - W, T, 2001)\n            s_window, r_window = sol.sol(t_window)\n            \n            total_pop_window = s_window + r_window\n            \n            # Calculate instantaneous prevalence x(t).\n            # Use np.divide for safe division, yielding 0 if denominator is near zero.\n            x_window = np.divide(r_window, total_pop_window, \n                                 out=np.zeros_like(r_window), \n                                 where=total_pop_window > 1e-12)\n            \n            # Numerically integrate x(t) over the window using the trapezoidal rule.\n            integral_x = trapezoid(x_window, t_window)\n            x_bar = integral_x / W\n            \n            policy_results_x_bar.append(x_bar)\n            \n        # Determine the best policy according to the problem's criteria.\n        min_x_bar = min(policy_results_x_bar)\n        epsilon = 1e-6\n        \n        best_policy_idx = -1\n        # Find the first policy index (0, 1, or 2) that is within epsilon\n        # of the minimum value. This handles the tie-breaking rule.\n        for i, x_val in enumerate(policy_results_x_bar):\n            if abs(x_val - min_x_bar) <= epsilon:\n                best_policy_idx = i\n                break\n        \n        final_results.append(best_policy_idx)\n        \n    # Print the final result list in the specified format.\n    print(f\"[{','.join(map(str, final_results))}]\")\n\nsolve()\n```", "id": "2831761"}, {"introduction": "Bacterial populations, especially in clinical settings, are not perfectly mixed. The spread of resistance is profoundly shaped by the physical structure of the environment, such as the layout of hospital wards and the patterns of patient movement. This practice introduces the powerful framework of network epidemiology to account for this crucial spatial structure [@problem_id:2831788]. You will learn to represent a hospital system as a contact network, where nodes are locations and weighted edges represent the intensity of contact between them. By using tools from linear algebra, you will calculate key metrics like the network's spectral radius, which directly relates to the basic reproduction number, $R_0$, in a structured population. This exercise provides a more sophisticated understanding of infectious spread, equipping you with the skills to analyze how network topology can either amplify or contain an outbreak of resistance.", "problem": "You are to formalize the early-phase spread of Resistance plasmids (R plasmids) in a hospital system as a network-coupled process and compute network metrics that predict invasion and outbreak potential. The setting is a metapopulation across wards and hospitals in which patients move or are co-located, creating opportunities for conjugation-driven transfer of R plasmids. You must implement the following model and metrics from first principles and compute results on a provided test suite.\n\nAssumptions and foundational base. Conjugative plasmid transfer is a contact-driven process between bacterial hosts. At low prevalence, the early-phase dynamics of a Susceptible-Infected-Susceptible (SIS) type process with plasmid loss can be linearized around the plasmid-free state. Let $C$ be a nonnegative, symmetric, weighted contact matrix in which $C_{ij}$ represents the effective contact intensity between locations $i$ and $j$ after accounting for ward structure. Let $\\beta$ be the per-contact effective conjugation rate and $\\gamma$ be the per-capita effective loss rate of the plasmid lineage (for example, segregation loss or negative selection in the absence of antibiotics). Linearization yields early growth governed by the Jacobian $J = \\beta C - \\gamma I$, where $I$ is the identity matrix. The invasion threshold is determined by the sign of the dominant eigenvalue of $J$, which equivalently reduces to the basic reproduction number $R_0 = (\\beta/\\gamma)\\,\\lambda_{\\max}(C)$, where $\\lambda_{\\max}(C)$ is the spectral radius of $C$. If $R_0 \\leq 1$, invasion fails; if $R_0 > 1$, invasion is possible. Under a Poisson offspring approximation to a multitype branching process, a conservative and widely used approximation to the probability of a major outbreak from a single initial introduction is $P_{\\mathrm{major}} = \\max\\{0,\\, 1 - 1/R_0\\}$.\n\nWard-structured contacts. Let $A$ be a base, symmetric, nonnegative adjacency matrix describing potential contact or transfer opportunities, and let $w(i)$ map node $i$ to its ward label. Define two positive multipliers: $c_{\\mathrm{w}}$ for within-ward amplification of effective contact and $c_{\\mathrm{b}}$ for between-ward attenuation of effective contact. Construct the effective contact matrix $C$ by\n$$\nC_{ij} =\n\\begin{cases}\nc_{\\mathrm{w}}\\,A_{ij}, & \\text{if } w(i) = w(j),\\\\\nc_{\\mathrm{b}}\\,A_{ij}, & \\text{if } w(i) \\neq w(j).\n\\end{cases}\n$$\nAll diagonals satisfy $C_{ii} = 0$.\n\nNetwork metrics to compute. For each test case, compute:\n- The spectral radius $\\lambda_{\\max}(C)$.\n- The basic reproduction number $R_0 = (\\beta/\\gamma)\\,\\lambda_{\\max}(C)$.\n- The major outbreak probability $P_{\\mathrm{major}} = \\max\\{0,\\, 1 - 1/R_0\\}$ if $R_0 > 1$, else $0$.\n- The average node strength $\\bar{s} = \\frac{1}{n}\\sum_{i=1}^{n}\\sum_{j=1}^{n} C_{ij}$, where $n$ is the number of nodes.\n- The intra-ward weight fraction\n$$\nF_{\\mathrm{intra}} = \\frac{\\sum_{i\\neq j,\\; w(i)=w(j)} C_{ij}}{\\sum_{i\\neq j} C_{ij}},\n$$\nexpressed as a decimal (not a percentage).\n\nNumerical and output requirements. Your program must:\n- Implement the constructions and metrics above exactly as specified.\n- For the outbreak probability, use the convention $P_{\\mathrm{major}}=0$ whenever $R_0 \\leq 1$.\n- Round each reported floating-point result to exactly six digits after the decimal point.\n- Produce a single line of output containing the results as a comma-separated list enclosed in square brackets, where each test case yields a list in the order $[R_0, P_{\\mathrm{major}}, \\lambda_{\\max}, \\bar{s}, F_{\\mathrm{intra}}]$.\n\nTest suite. Use the following three test cases without alteration. All numbers are given as exact values.\n\nTest case $1$ (heterogeneous $2$-ward hospital with cross-ward bridges):\n- Base adjacency\n$$\nA = \\begin{bmatrix}\n0 & 1.0 & 0.5 & 0 & 0\\\\\n1.0 & 0 & 1.0 & 0.1 & 0\\\\\n0.5 & 1.0 & 0 & 0.2 & 0.1\\\\\n0 & 0.1 & 0.2 & 0 & 1.0\\\\\n0 & 0 & 0.1 & 1.0 & 0\n\\end{bmatrix}.\n$$\n- Ward labels $w = [0,\\,0,\\,0,\\,1,\\,1]$.\n- Parameters: $\\beta = 0.6$, $\\gamma = 0.3$, $c_{\\mathrm{w}} = 2.0$, $c_{\\mathrm{b}} = 0.5$.\n\nTest case $2$ (two wards, single inter-ward link at threshold):\n- Base adjacency\n$$\nA = \\begin{bmatrix}\n0 & 1\\\\\n1 & 0\n\\end{bmatrix}.\n$$\n- Ward labels $w = [0,\\,1]$.\n- Parameters: $\\beta = 0.2$, $\\gamma = 0.2$, $c_{\\mathrm{w}} = 1.0$, $c_{\\mathrm{b}} = 1.0$.\n\nTest case $3$ (strongly modular $2$-ward hospital, dense intra-ward, sparse inter-ward):\n- Base adjacency $A$ on $6$ nodes with two cliques of size $3$ and all cross-ward edges present:\nFor nodes $0,1,2$ in ward $0$ and nodes $3,4,5$ in ward $1$, set $A_{ij} = 1.0$ if $i \\neq j$ and both $i,j \\in \\{0,1,2\\}$ or both $i,j \\in \\{3,4,5\\}$; set $A_{ij} = 0.05$ if $i \\in \\{0,1,2\\}$ and $j \\in \\{3,4,5\\}$ or vice versa; set $A_{ii}=0$.\n- Ward labels $w = [0,\\,0,\\,0,\\,1,\\,1,\\,1]$.\n- Parameters: $\\beta = 0.08$, $\\gamma = 0.4$, $c_{\\mathrm{w}} = 2.0$, $c_{\\mathrm{b}} = 0.5$.\n\nFinal output format. Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, where each element corresponds to one test case in the order $1$, $2$, $3$, and each element is itself a list in the order $[R_0, P_{\\mathrm{major}}, \\lambda_{\\max}, \\bar{s}, F_{\\mathrm{intra}}]$, with each float rounded to exactly six digits after the decimal point. For example: $[[0.123456,0.000000,0.987654,0.543210,0.333333],[\\dots],[\\dots]]$.", "solution": "The problem presented is a well-defined exercise in mathematical biology, specifically modeling the epidemiological dynamics of antibiotic resistance spread. It is scientifically grounded, internally consistent, and computationally tractable. All required parameters, matrices, and functional forms for the metrics are provided unambiguously. Therefore, the problem is valid, and a solution will be derived.\n\nThe core of the problem is to construct a ward-structured effective contact matrix, $C$, and then compute several network and epidemiological metrics based on it. The process is deterministic once the initial parameters are specified. We will proceed step-by-step for each test case as demanded.\n\nThe anlaysis begins with the construction of the effective contact matrix $C$ from a given base adjacency matrix $A$, a vector of ward assignments $w$, and two parameters: $c_{\\mathrm{w}}$ for intra-ward contact amplification and $c_{\\mathrm{b}}$ for inter-ward contact attenuation. The formula is given as:\n$$\nC_{ij} =\n\\begin{cases}\nc_{\\mathrm{w}}\\,A_{ij}, & \\text{if } w(i) = w(j) \\text{ and } i \\neq j, \\\\\nc_{\\mathrm{b}}\\,A_{ij}, & \\text{if } w(i) \\neq w(j) \\text{ and } i \\neq j, \\\\\n0, & \\text{if } i = j.\n\\end{cases}\n$$\nThis matrix $C$ is symmetric and non-negative, as required.\n\nOnce $C$ is constructed, we compute the five specified metrics:\n1.  **Spectral Radius, $\\lambda_{\\max}(C)$**: As $C$ is a non-negative real symmetric matrix, its spectral radius is its largest eigenvalue. We compute the eigenvalues of $C$ and take the maximum. This metric quantifies the maximal rate of infectious transmission amplification by the contact network.\n\n2.  **Basic Reproduction Number, $R_0$**: This is defined as $R_0 = (\\beta/\\gamma)\\,\\lambda_{\\max}(C)$, where $\\beta$ is the effective conjugation rate and $\\gamma$ is the plasmid loss rate. $R_0 > 1$ is the condition for an invasion to be possible.\n\n3.  **Major Outbreak Probability, $P_{\\mathrm{major}}$**: Based on a branching process approximation, this is given by $P_{\\mathrm{major}} = \\max\\{0, 1 - 1/R_0\\}$. The problem specifies that if $R_0 \\le 1$, $P_{\\mathrm{major}}$ must be $0$.\n\n4.  **Average Node Strength, $\\bar{s}$**: This is the arithmetic mean of the total weighted contacts for each node, calculated as $\\bar{s} = \\frac{1}{n}\\sum_{i=1}^{n}\\sum_{j=1}^{n} C_{ij}$, where $n$ is the number of nodes.\n\n5.  **Intra-ward Weight Fraction, $F_{\\mathrm{intra}}$**: This quantifies the degree of modularity in the contact structure. It is the fraction of total contact weight that occurs between nodes within the same ward: $F_{\\mathrm{intra}} = \\frac{\\sum_{i\\neq j,\\; w(i)=w(j)} C_{ij}}{\\sum_{i\\neq j} C_{ij}}$. Since $C_{ii}=0$, the denominator is simply the sum of all elements in $C$.\n\nWe will now apply this procedure to each of the three test cases.\n\n**Test Case 1:**\n- Nodes: $n=5$. Parameters: $\\beta = 0.6$, $\\gamma = 0.3$, $c_{\\mathrm{w}} = 2.0$, $c_{\\mathrm{b}} = 0.5$.\n- Ward labels $w = [0, 0, 0, 1, 1]$.\n- Applying the multipliers to the base adjacency matrix $A$ yields the contact matrix $C$:\n$$\nC_1 = \\begin{bmatrix}\n0 & 2.0 & 1.0 & 0 & 0 \\\\\n2.0 & 0 & 2.0 & 0.05 & 0 \\\\\n1.0 & 2.0 & 0 & 0.1 & 0.05 \\\\\n0 & 0.05 & 0.1 & 0 & 2.0 \\\\\n0 & 0 & 0.05 & 2.0 & 0\n\\end{bmatrix}\n$$\n- Computation yields:\n    - $\\lambda_{\\max}(C_1) \\approx 3.013533$\n    - $R_0 = (0.6/0.3) \\times \\lambda_{\\max}(C_1) = 2 \\times 3.013533 \\approx 6.027067$\n    - $P_{\\mathrm{major}} = 1 - 1/R_0 \\approx 1 - 1/6.027067 \\approx 0.834080$\n    - $\\sum C_{1,ij} = 14.4$. $\\bar{s} = 14.4 / 5 = 2.88$\n    - $\\sum_{\\text{intra}} C_{1,ij} = 2.0 \\times (1.0+0.5+1.0+1.0) \\times 2 = 14.0$. $F_{\\mathrm{intra}} = 14.0 / 14.4 \\approx 0.972222$\n\n**Test Case 2:**\n- Nodes: $n=2$. Parameters: $\\beta = 0.2$, $\\gamma = 0.2$, $c_{\\mathrm{w}} = 1.0$, $c_{\\mathrm{b}} = 1.0$.\n- Ward labels $w = [0, 1]$. The single link is between wards.\n- The contact matrix is $C_2 = \\begin{bmatrix} 0 & 1 \\\\ 1 & 0 \\end{bmatrix}$.\n- Computation yields:\n    - $\\lambda_{\\max}(C_2) = 1.0$ (exact).\n    - $R_0 = (0.2/0.2) \\times 1.0 = 1.0$.\n    - $P_{\\mathrm{major}} = 0$, since $R_0 \\le 1$.\n    - $\\sum C_{2,ij} = 2.0$. $\\bar{s} = 2.0 / 2 = 1.0$.\n    - $\\sum_{\\text{intra}} C_{2,ij} = 0$. $F_{\\mathrm{intra}} = 0 / 2.0 = 0.0$.\n\n**Test Case 3:**\n- Nodes: $n=6$. Parameters: $\\beta = 0.08$, $\\gamma = 0.4$, $c_{\\mathrm{w}} = 2.0$, $c_{\\mathrm{b}} = 0.5$.\n- Ward labels $w = [0, 0, 0, 1, 1, 1]$.\n- The structure is two 3-cliques (within-ward) and all-to-all connections between them (between-ward).\n- The contact matrix $C_3$ consists of two diagonal blocks with off-diagonal entries of $c_{\\mathrm{w}} \\times 1.0 = 2.0$, and two off-diagonal blocks with all entries $c_{\\mathrm{b}} \\times 0.05 = 0.025$.\n- This matrix corresponds to a weighted regular graph where every node has the same strength: $s_i = 2 \\times 2.0 + 3 \\times 0.025 = 4.075$.\n- For a regular graph, the spectral radius is equal to the common node strength.\n- Computation yields:\n    - $\\lambda_{\\max}(C_3) = 4.075$ (exact).\n    - $R_0 = (0.08/0.4) \\times 4.075 = 0.2 \\times 4.075 = 0.815$.\n    - $P_{\\mathrm{major}} = 0$, since $R_0 \\le 1$.\n    - $\\bar{s} = (\\sum s_i)/n = (6 \\times 4.075) / 6 = 4.075$.\n    - $\\sum C_{3,ij} = 6 \\times 4.075 = 24.45$. $\\sum_{\\text{intra}} C_{3,ij} = 2 \\times (3 \\times 2 \\times 2.0) = 24.0$. $F_{\\mathrm{intra}} = 24.0 / 24.45 \\approx 0.981595$.\n\nThe following program implements this logic precisely and produces the required output.", "answer": "```python\nimport numpy as np\n# from scipy import ... # Scipy is permitted but not required for this problem.\n\ndef calculate_for_case(A, w, beta, gamma, c_w, c_b):\n    \"\"\"\n    Computes all required metrics for a single test case.\n\n    Args:\n        A (np.ndarray): The base adjacency matrix.\n        w (np.ndarray): A vector of ward labels for each node.\n        beta (float): The per-contact effective conjugation rate.\n        gamma (float): The per-capita effective plasmid loss rate.\n        c_w (float): The within-ward contact amplification multiplier.\n        c_b (float): The between-ward contact attenuation multiplier.\n\n    Returns:\n        list: A list of the five computed metrics, rounded to 6 decimal places.\n    \"\"\"\n    n = A.shape[0]\n    C = np.zeros((n, n), dtype=float)\n\n    # Construct the effective contact matrix C\n    for i in range(n):\n        for j in range(i + 1, n):\n            if w[i] == w[j]:\n                val = c_w * A[i, j]\n            else:\n                val = c_b * A[i, j]\n            C[i, j] = C[j, i] = val\n\n    # 1. Spectral radius lambda_max(C)\n    # Since C is real and symmetric, its eigenvalues are real.\n    # We use eigvalsh for efficiency and numerical stability.\n    eigenvalues = np.linalg.eigvalsh(C)\n    lambda_max = eigenvalues[-1]\n\n    # 2. Basic reproduction number R_0\n    if gamma == 0:\n        # Avoid division by zero, although not expected from problem statement.\n        R0 = np.inf if beta > 0 and lambda_max > 0 else 0\n    else:\n        R0 = (beta / gamma) * lambda_max\n\n    # 3. Major outbreak probability P_major\n    if R0 <= 1:\n        P_major = 0.0\n    else:\n        P_major = 1.0 - (1.0 / R0)\n\n    # 4. Average node strength s_bar\n    total_strength = np.sum(C)\n    s_bar = total_strength / n if n > 0 else 0.0\n\n    # 5. Intra-ward weight fraction F_intra\n    intra_ward_weight = 0.0\n    for i in range(n):\n        for j in range(n):\n            if i != j and w[i] == w[j]:\n                intra_ward_weight += C[i, j]\n\n    if total_strength == 0:\n        F_intra = 0.0 # Define as 0 if there are no contacts.\n    else:\n        # Denominator is sum over i!=j, which is total_strength as C_ii=0\n        F_intra = intra_ward_weight / total_strength\n        \n    return [R0, P_major, lambda_max, s_bar, F_intra]\n\ndef solve():\n    \"\"\"\n    Main function to define test cases, run calculations, and print results.\n    \"\"\"\n    test_cases = [\n        {\n            \"A\": np.array([\n                [0, 1.0, 0.5, 0, 0],\n                [1.0, 0, 1.0, 0.1, 0],\n                [0.5, 1.0, 0, 0.2, 0.1],\n                [0, 0.1, 0.2, 0, 1.0],\n                [0, 0, 0.1, 1.0, 0]\n            ]),\n            \"w\": np.array([0, 0, 0, 1, 1]),\n            \"params\": {\"beta\": 0.6, \"gamma\": 0.3, \"c_w\": 2.0, \"c_b\": 0.5}\n        },\n        {\n            \"A\": np.array([\n                [0, 1],\n                [1, 0]\n            ]),\n            \"w\": np.array([0, 1]),\n            \"params\": {\"beta\": 0.2, \"gamma\": 0.2, \"c_w\": 1.0, \"c_b\": 1.0}\n        },\n        {\n            \"A\": np.array([\n                [0.00, 1.00, 1.00, 0.05, 0.05, 0.05],\n                [1.00, 0.00, 1.00, 0.05, 0.05, 0.05],\n                [1.00, 1.00, 0.00, 0.05, 0.05, 0.05],\n                [0.05, 0.05, 0.05, 0.00, 1.00, 1.00],\n                [0.05, 0.05, 0.05, 1.00, 0.00, 1.00],\n                [0.05, 0.05, 0.05, 1.00, 1.00, 0.00]\n            ]),\n            \"w\": np.array([0, 0, 0, 1, 1, 1]),\n            \"params\": {\"beta\": 0.08, \"gamma\": 0.4, \"c_w\": 2.0, \"c_b\": 0.5}\n        }\n    ]\n\n    all_results_str = []\n    for case in test_cases:\n        results = calculate_for_case(case[\"A\"], case[\"w\"], **case[\"params\"])\n        # Format each result to exactly six decimal places\n        formatted_results = [f\"{val:.6f}\" for val in results]\n        all_results_str.append(f\"[{','.join(formatted_results)}]\")\n    \n    # Print the final output in the required single-line format\n    print(f\"[{','.join(all_results_str)}]\")\n\nsolve()\n```", "id": "2831788"}]}