{"hands_on_practices": [{"introduction": "The immense structural diversity of carbohydrates begins at the level of the monosaccharide. This first exercise [@problem_id:2781394] challenges you to apply first principles of stereochemistry to determine the total number of possible stereoisomers for an aldohexose. By systematically counting enantiomeric and diastereomeric pairs, you will build a quantitative appreciation for the isomeric complexity that arises from just a few chiral centers.", "problem": "An open-chain aldohexose is a monosaccharide with an aldehyde at carbon $C_1$ and a linear backbone of $6$ carbons ($C_1$ to $C_6$). In the open-chain form of an aldohexose, the stereogenic (chiral) centers are at $C_2$, $C_3$, $C_4$, and $C_5$. Assume standard valences and that no substituent rearrangements occur; focus exclusively on configurational stereochemistry of the open-chain form (ignore cyclization and anomer formation at the anomeric center).\n\nStarting from first principles in stereochemistry and symmetry (definition of a stereogenic center, enantiomers as nonsuperimposable mirror images requiring inversion at every stereogenic center, diastereomers as stereoisomers that are not enantiomers, and the criterion that an internal mirror plane can reduce the number of distinct stereoisomers by producing meso forms), derive the total number of distinct open-chain stereoisomers for an aldohexose. Justify whether any meso forms are possible by analyzing the symmetry constraints imposed by the functional group inequivalence at $C_1$ (aldehyde) and $C_6$ (primary alcohol) and the linear sequence of substituents.\n\nThen:\n- Partition the total set into enantiomeric pairs and determine the number of such pairs.\n- Compute the number of unordered diastereomeric pairs among all distinct open-chain stereoisomers (i.e., all unordered pairs of distinct stereoisomers that are not enantiomers).\n- For a fixed reference stereoisomer, count how many of its diastereomers differ at exactly $k$ of the $4$ stereogenic centers for $k \\in \\{1,2,3\\}$.\n\nReport your final answer as a single row matrix containing $6$ entries in the following order: the total number of stereoisomers, the number of enantiomeric pairs, the number of unordered diastereomeric pairs, and then (for the reference stereoisomer) the three counts for $k=1$, $k=2$, and $k=3$. No rounding is needed. The answer is unitless.", "solution": "The problem requires an analysis of the stereoisomerism of an open-chain aldohexose. The fundamental structure is a $6$-carbon chain with an aldehyde group at $C_1$ and a primary alcohol at $C_6$. The problem statement correctly identifies the carbons $C_2$, $C_3$, $C_4$, and $C_5$ as stereogenic (chiral) centers. The total number of stereogenic centers is therefore $n=4$.\n\nFirst, we must determine the total number of possible stereoisomers. According to the van 't Hoff rule, for a molecule with $n$ stereogenic centers, the maximum number of stereoisomers is $2^n$. This maximum is achieved when none of the stereoisomers are meso compounds. A meso compound is an achiral compound that has stereogenic centers. Its achirality is due to an internal element of symmetry, such as a plane of symmetry, that makes the molecule superimposable on its mirror image. For a linear molecule, a plane of symmetry typically requires that the two ends of the molecule are constitutionally identical. An open-chain aldohexose has the general structure $CHO-(CHOH)_4-CH_2OH$. The functional group at $C_1$ is an aldehyde ($-CHO$), while the group at the end of the chain is $C_6$ in a primary alcohol moiety ($-CH_2OH$). As these two terminal groups are different, the molecule is inherently asymmetric from end to end. No internal plane of symmetry can be drawn through the molecule, regardless of the configurations at the stereogenic centers. Therefore, no meso compounds are possible for open-chain aldohexoses. With $n=4$ stereogenic centers and no meso forms, the total number of distinct stereoisomers is exactly $N = 2^n = 2^4 = 16$.\n\nSecond, we determine the number of enantiomeric pairs. Since all $16$ stereoisomers are chiral (as no meso forms exist), each one must have a non-superimposable mirror image, which is its enantiomer. Therefore, the set of $16$ stereoisomers can be partitioned into pairs of enantiomers. The number of such pairs is the total number of stereoisomers divided by $2$.\nNumber of enantiomeric pairs $= \\frac{N}{2} = \\frac{16}{2} = 8$.\n\nThird, we compute the number of unordered diastereomeric pairs. A pair of stereoisomers can be either an enantiomeric pair or a diastereomeric pair. The total number of unordered pairs of distinct stereoisomers that can be formed from a set of $N$ items is given by the binomial coefficient $\\binom{N}{2}$.\nTotal number of pairs $= \\binom{16}{2} = \\frac{16!}{2!(16-2)!} = \\frac{16 \\times 15}{2} = 120$.\nThis total count of $120$ pairs includes both enantiomeric and diastereomeric pairs. We have already established that there are $8$ enantiomeric pairs. The remaining pairs must be diastereomeric.\nNumber of unordered diastereomeric pairs $= (\\text{Total pairs}) - (\\text{Number of enantiomeric pairs}) = 120 - 8 = 112$.\n\nFinally, we consider a single, fixed reference stereoisomer and count the number of its diastereomers that differ at exactly $k$ stereogenic centers, for $k \\in \\{1, 2, 3\\}$. A stereoisomer is defined by the specific configuration ($R$ or $S$) at each of the $n=4$ chiral centers. The enantiomer of the reference isomer is the one where the configuration is inverted at all $4$ centers. Diastereomers are stereoisomers that are not enantiomers, meaning their configurations are inverted at some, but not all, of the chiral centers.\nThe number of diastereomers that differ from the reference at exactly $k$ out of $n=4$ centers is a combinatorial problem of choosing which $k$ centers to invert. This is given by the binomial coefficient $\\binom{n}{k}$.\n\nFor $k=1$: The number of diastereomers differing at exactly one stereogenic center is given by the number of ways to choose $1$ center to invert out of $4$.\nNumber for $k=1 = \\binom{4}{1} = \\frac{4!}{1!(4-1)!} = 4$.\nThese are also known as epimers of the reference molecule.\n\nFor $k=2$: The number of diastereomers differing at exactly two stereogenic centers is given by the number of ways to choose $2$ centers to invert out of $4$.\nNumber for $k=2 = \\binom{4}{2} = \\frac{4!}{2!(4-2)!} = \\frac{4 \\times 3}{2} = 6$.\n\nFor $k=3$: The number of diastereomers differing at exactly three stereogenic centers is given by the number of ways to choose $3$ centers to invert out of $4$. This is equivalent to choosing $1$ center not to invert.\nNumber for $k=3 = \\binom{4}{3} = \\frac{4!}{3!(4-3)!} = 4$.\n\nAs a check, the total number of diastereomers for the reference is the sum over $k \\in \\{1, 2, 3\\}$, which is $4+6+4=14$. This is consistent with the total number of stereoisomers ($16$) minus the reference isomer itself ($1$) and its enantiomer ($1$), which is indeed $16-2=14$.\n\nThe final results are:\n- Total number of stereoisomers: $16$.\n- Number of enantiomeric pairs: $8$.\n- Number of unordered diastereomeric pairs: $112$.\n- Number of diastereomers differing at $k=1$ center: $4$.\n- Number of diastereomers differing at $k=2$ centers: $6$.\n- Number of diastereomers differing at $k=3$ centers: $4$.", "answer": "$$\\boxed{\\begin{pmatrix} 16 & 8 & 112 & 4 & 6 & 4 \\end{pmatrix}}$$", "id": "2781394"}, {"introduction": "Once we understand the diversity of the monomers, the next step is to explore how they connect via glycosidic bonds. This problem [@problem_id:2781416] provides a focused, hands-on opportunity to calculate the number of distinct disaccharides that can be formed from a single building block, D-glucose. This combinatorial exercise demonstrates how two simple variables—the anomeric configuration ($\\alpha$ or $\\beta$) and the linkage position—are fundamental drivers of polysaccharide structural diversity.", "problem": "A single monomer species, D-glucose, forms cyclic hemiacetals that establish a single stereogenic anomeric center at carbon $1$ with two possible configurations, $\\alpha$ and $\\beta$. A disaccharide is formed by an O-glycosidic bond in which the anomeric carbon $1$ of a donor residue is acetalized to an oxygen atom of an acceptor residue at one of its hydroxyl-bearing carbons. In aqueous solution D-glucose predominantly adopts a pyranose ring, and reducing disaccharides retain a free anomeric carbon on the reducing-end residue that can mutarotate; such mutarotation is not counted as conferring distinct compounds, since it does not change the covalent constitution.\n\nUsing only D-glucopyranose as both donor and acceptor residues, and counting distinct constitutional isomers (not conformers) determined by:\n- the linkage position on the acceptor residue (restricted to O-$2$, O-$3$, O-$4$, or O-$6$), and\n- the anomeric configuration $\\alpha$ or $\\beta$ at the donor’s anomeric carbon participating in the glycosidic bond,\n\ncompute the total number of distinct disaccharides obtainable when excluding any glycosidic linkage that connects the two anomeric carbons (that is, exclude $1\\leftrightarrow1$ linkages). Treat the two D-glucopyranose residues as indistinguishable monomers aside from their roles as donor versus acceptor in the glycosidic bond, and do not count as distinct any species that differ only by reversing which identical residue is written on the left or right. Ignore all differences arising solely from conformational rotamers about glycosidic bonds or chair flips, and ignore the transient $\\alpha/\\beta$ mutarotation at the free reducing end.\n\nProvide the final count as a single integer. No units are required. Do not round.", "solution": "The problem requires the computation of the number of distinct disaccharides that can be formed from two D-glucopyranose monomers, subject to a specific set of rules. We must first validate the premise and then proceed with a systematic enumeration. The problem is scientifically sound, well-posed, and contains sufficient information for a unique solution.\n\nLet us deconstruct the formation of such a disaccharide. The monomer unit is D-glucopyranose. The formation of a disaccharide involves two such units, one acting as a glycosyl donor and the other as a glycosyl acceptor.\n\n$1$. The **donor residue** provides its anomeric carbon, which is carbon-$1$ ($C_1$), to form the glycosidic bond. The problem specifies that the stereochemistry at this anomeric carbon is a defining feature of the resulting disaccharide. The two possible configurations for the glycosidic bond are $\\alpha$ and $\\beta$. Therefore, there are $N_{\\text{anomer}} = 2$ choices for the anomeric configuration of the linkage.\n\n$2$. The **acceptor residue** provides a hydroxyl group ($-\\text{OH}$) for the formation of the glycosidic bond. In a D-glucopyranose molecule, hydroxyl groups are available on carbons $C_1$, $C_2$, $C_3$, $C_4$, and $C_6$. The problem imposes two restrictions on the linkage position:\n    a) The acceptor hydroxyl group must be on one of the following carbons: $C_2$, $C_3$, $C_4$, or $C_6$. This gives four possible hydroxyl groups: O-$2$, O-$3$, O-$4$, or O-$6$.\n    b) Linkages between the two anomeric carbons (a $1 \\leftrightarrow 1$ linkage) are explicitly excluded. This is consistent with the first restriction, as the hydroxyl on $C_1$ of the acceptor is not in the allowed set.\n\nThus, there are $N_{\\text{linkage}} = 4$ possible positions on the acceptor residue for the glycosidic bond to form.\n\nThe problem asks to count \"distinct constitutional isomers\" but then immediately clarifies that this distinction is \"determined by: the linkage position on the acceptor residue... and the anomeric configuration...\". This is an operational definition. According to this definition, two disaccharides are considered distinct if they differ in either the anomeric configuration ($\\alpha$ vs. $\\beta$) of the glycosidic bond or the carbon atom of the acceptor residue to which the donor is linked ($C_2$, $C_3$, $C_4$, or $C_6$).\n\nFor example, $\\alpha$-D-glucopyranosyl-($1 \\to 4$)-D-glucopyranose (maltose) and $\\beta$-D-glucopyranosyl-($1 \\to 4$)-D-glucopyranose (cellobiose) differ in the anomeric configuration of the bond and are counted as distinct. Maltose and $\\alpha$-D-glucopyranosyl-($1 \\to 6$)-D-glucopyranose (isomaltose) differ in the linkage position and are also counted as distinct.\n\nThe total number of distinct disaccharides is the product of the number of independent choices for each defining feature. The choice of anomeric configuration is independent of the choice of linkage position.\n\nTotal number of distinct disaccharides = (Number of anomeric configurations) $\\times$ (Number of linkage positions)\nLet $N$ be the total number.\n$$N = N_{\\text{anomer}} \\times N_{\\text{linkage}}$$\nSubstituting the values we have determined:\n$$N = 2 \\times 4$$\n$$N = 8$$\n\nThe exclusion of $1 \\leftrightarrow 1$ linkages ensures that all resulting disaccharides are reducing sugars, as the anomeric carbon of the acceptor residue remains part of a hemiacetal group. This creates an inherent asymmetry in the molecule: one residue is a non-reducing glycosyl unit (an acetal), and the other is a reducing glucose unit (a hemiacetal). Consequently, the two residues are constitutionally non-equivalent, and there is no overcounting due to symmetry. The instruction \"do not count as distinct any species that differ only by reversing which identical residue is written on the left or right\" is a standard caveat against treating different drawings of the same molecule as distinct isomers and does not require any division of the result.\n\nThe eight distinct disaccharides are:\n-   $\\alpha(1 \\to 2)$ and $\\beta(1 \\to 2)$\n-   $\\alpha(1 \\to 3)$ and $\\beta(1 \\to 3)$\n-   $\\alpha(1 \\to 4)$ and $\\beta(1 \\to 4)$\n-   $\\alpha(1 \\to 6)$ and $\\beta(1 \\to 6)$\n\nEach pair represents a combination of the two anomeric configurations for a given linkage position. With four possible linkage positions, the total count is indeed $8$.", "answer": "$$\\boxed{8}$$", "id": "2781416"}, {"introduction": "A glycosidic bond is not a rigid connector; it is a flexible linkage with preferred rotational conformations that define a carbohydrate's three-dimensional architecture. In this practice [@problem_id:2781427], you will step into the role of a computational biochemist to model the energetics of this flexibility. By implementing a program to calculate a torsional energy surface for the key dihedral angles, $\\phi$ and $\\psi$, you will identify low-energy conformers and connect theoretical predictions to structural data.", "problem": "You are asked to implement, from first-principles definitions of dihedral torsions and a standard molecular mechanics representation of torsional energetics, a program that constructs a two-dimensional glycosidic torsion energy surface for a disaccharide linkage defined by two dihedral angles, identifies the distinct local minima on that surface, and evaluates whether those minima correspond to a provided set of experimentally observed rotamers within a specified angular tolerance. Your implementation must be general and rely only on periodic torsion terms and simple coupling terms, as detailed below. The ultimate output must be a single line aggregating the pass or fail status for each test case.\n\nFundamental base:\n- A glycosidic linkage between two carbohydrate monomers can be described by two dihedral angles, commonly denoted by $\\phi$ and $\\psi$. Each dihedral is a circular variable on $\\left[-180, 180\\right)$ degrees.\n- In a molecular mechanics (MM) representation, the conformational energy as a function of a dihedral angle is periodic and is well-approximated by a Fourier series of cosine terms, which is a widely accepted model used to represent intramolecular torsion energetics.\n- Conformational rotamers correspond to local minima on the potential energy surface; identifying minima is a principled proxy for the likely conformers.\n\nEnergy model to implement:\n- Let $\\theta$ be an angle in degrees. Convert all angles to radians for trigonometric evaluations.\n- For a single dihedral angle $\\theta$, a torsional term is given by\n$$\nE_{\\text{tors}}(\\theta) \\;=\\; \\sum_{n \\in \\mathcal{N}} V_n \\,\\bigl(1 - \\cos(n \\,\\theta - \\delta_n)\\bigr),\n$$\nwhere $n$ is a positive integer periodicity, $V_n$ is an amplitude in kilojoules per mole (kJ/mol), and $\\delta_n$ is a phase offset in radians. In the input, amplitudes $V_n$ are given in kJ/mol and phases $\\delta_n$ are given in degrees; your program must convert all degrees to radians before use. The expression $1 - \\cos(\\cdot)$ is dimensionless, so $E_{\\text{tors}}$ is in kJ/mol.\n- For two coupled dihedral angles $\\phi$ and $\\psi$, a simple coupling term is given by\n$$\nE_{\\text{coup}}(\\phi,\\psi) \\;=\\; \\sum_{m} V^{(c)}_m \\,\\bigl(1 - \\cos(a_m \\,\\phi + b_m \\,\\psi - \\delta^{(c)}_m)\\bigr),\n$$\nwhere $a_m$ and $b_m$ are integers, $V^{(c)}_m$ is in kJ/mol, and $\\delta^{(c)}_m$ is in radians (provided in degrees, to be converted). The total energy is\n$$\nE(\\phi,\\psi) \\;=\\; E_{\\phi}(\\phi) + E_{\\psi}(\\psi) + E_{\\text{coup}}(\\phi,\\psi).\n$$\n\nComputational requirements:\n- Sample the energy on a regular grid with $\\phi \\in \\{-180, -175, \\dots, 175\\}$ degrees and $\\psi \\in \\{-180, -175, \\dots, 175\\}$ degrees; that is, use a step size $\\Delta = 5$ degrees over the range $\\left[-180, 180\\right)$ in each dimension. Compute $E(\\phi,\\psi)$ in kJ/mol for each grid point.\n- Identify local minima on the two-dimensional torus (periodic boundary conditions). A grid point is a local minimum if its energy is strictly less than the energies of its $8$ immediate neighbors (with wraparound at boundaries).\n- Cluster nearby minima to avoid counting a single basin multiple times. Use a toroidal clustering rule: treat two minima at $(\\phi_1,\\psi_1)$ and $(\\phi_2,\\psi_2)$ as the same if the circular distances in both coordinates are $\\le \\tau_c$ degrees, where the circular distance for an angle difference $\\Delta$ is defined as $\\min\\{|\\Delta|, 360 - |\\Delta|\\}$. Use $\\tau_c = 15$ degrees.\n- From the set of clustered minima, select the lowest-energy $L$ distinct minima for comparison to a provided list of observed rotamers for each case.\n- A predicted minimum at $(\\phi^\\ast,\\psi^\\ast)$ is considered to match an observed rotamer at $(\\phi^{\\text{obs}},\\psi^{\\text{obs}})$ if both circular distances $d(\\phi^\\ast,\\phi^{\\text{obs}})$ and $d(\\psi^\\ast,\\psi^{\\text{obs}})$ are $\\le \\tau_m$ degrees. Use $\\tau_m = 20$ degrees.\n- For each case, return a boolean indicating whether all observed rotamers were matched by at least one of the top $L$ predicted minima.\n\nUnits and numerical specifications:\n- Angles must be in degrees in the final reporting and matching criteria; trigonometric evaluations must use radians internally.\n- Energies are in kilojoules per mole (kJ/mol).\n- The final boolean outputs are unitless.\n\nTest suite (four cases):\nFor each case, you are given a set of torsional parameters for $\\phi$, torsional parameters for $\\psi$, optional coupling terms, a value $L$ for the number of distinct lowest minima to consider, and a list of observed rotamers to be matched.\n\nNotation:\n- Each $\\phi$ torsional term is a triple $(n, V, \\delta)$ with $n$ an integer periodicity, amplitude $V$ in kJ/mol, and phase $\\delta$ in degrees.\n- Each $\\psi$ torsional term is likewise $(n, V, \\delta)$.\n- Each coupling term is a quadruple $(a, b, V, \\delta)$ with integers $a$ and $b$, amplitude $V$ in kJ/mol, and phase $\\delta$ in degrees.\n\nCase $1$:\n- $\\phi$ terms: $(3,\\, 2.0,\\, 180)$ and $(1,\\, 1.5,\\, 60)$.\n- $\\psi$ terms: $(3,\\, 1.5,\\, 270)$ and $(1,\\, 1.8,\\, 90)$.\n- Coupling terms: $(1,\\,-1,\\, 0.2,\\, 0)$.\n- $L = 1$.\n- Observed rotamers: $\\bigl[(60,\\, 90)\\bigr]$.\n\nCase $2$:\n- $\\phi$ terms: $(3,\\, 2.0,\\, 180)$ and $(1,\\, 1.5,\\, -60)$.\n- $\\psi$ terms: $(3,\\, 1.0,\\, 180)$ and $(1,\\, 2.0,\\, 180)$.\n- Coupling terms: $(1,\\,-1,\\, 0.1,\\, 0)$.\n- $L = 1$.\n- Observed rotamers: $\\bigl[(-60,\\, 180)\\bigr]$.\n\nCase $3$:\n- $\\phi$ terms: $(3,\\, 2.0,\\, 0)$ and $(1,\\, 1.0,\\, 0)$.\n- $\\psi$ terms: $(3,\\, 2.0,\\, 0)$ and $(1,\\, 1.0,\\, 0)$.\n- Coupling terms: $(1,\\,-1,\\, 0.3,\\, 0)$.\n- $L = 1$.\n- Observed rotamers: $\\bigl[(0,\\, 0)\\bigr]$.\n\nCase $4$:\n- $\\phi$ terms: $(3,\\, 2.0,\\, 180)$ and $(2,\\, 0.6,\\, 180)$.\n- $\\psi$ terms: $(3,\\, 2.0,\\, 180)$ and $(1,\\, 1.2,\\, -60)$.\n- Coupling terms: $(1,\\,-1,\\, 0.3,\\, 0)$.\n- $L = 2$.\n- Observed rotamers: $\\bigl[(-60,\\, -60),\\ (60,\\, -60)\\bigr]$.\n\nAlgorithmic constraints:\n- Use a grid step $\\Delta = 5$ degrees.\n- Use clustering threshold $\\tau_c = 15$ degrees.\n- Use matching tolerance $\\tau_m = 20$ degrees.\n- Use strict inequality to test local minima against their $8$ neighbors.\n- Resolve periodicity with wraparound in both dimensions.\n\nFinal output format:\n- Your program should produce a single line of output containing the results as a comma-separated list of Python booleans enclosed in square brackets (for example, \"[True,False,True,True]\"). The list must be in the order of the test cases $1$ through $4$.", "solution": "The core of the problem is to compute and analyze the conformational energy surface $E(\\phi, \\psi)$ of a glycosidic linkage, described by the two dihedral angles $\\phi$ and $\\psi$. The analysis involves identifying low-energy conformations (rotamers) and comparing them to a set of experimentally observed structures.\n\nThe total potential energy $E(\\phi, \\psi)$ is given as the sum of three components:\n$$\nE(\\phi,\\psi) \\;=\\; E_{\\phi}(\\phi) + E_{\\psi}(\\psi) + E_{\\text{coup}}(\\phi,\\psi)\n$$\nwhere $E_{\\phi}(\\phi)$ and $E_{\\psi}(\\psi)$ are the intrinsic torsional energies for the individual dihedral angles, and $E_{\\text{coup}}(\\phi,\\psi)$ is a term that describes the coupling between them.\n\nThe individual torsional energy for a generic angle $\\theta$ is modeled as a Fourier series:\n$$\nE_{\\text{tors}}(\\theta) \\;=\\; \\sum_{n \\in \\mathcal{N}} V_n \\,\\bigl(1 - \\cos(n \\,\\theta_r - \\delta_{n,r})\\bigr)\n$$\nHere, $\\theta_r$ is the angle in radians, and the parameters provided are the periodicity $n$, the amplitude $V_n$ in kJ/mol, and the phase offset $\\delta_n$ in degrees, which must be converted to radians ($\\delta_{n,r}$).\n\nThe coupling energy is similarly defined:\n$$\nE_{\\text{coup}}(\\phi,\\psi) \\;=\\; \\sum_{m} V^{(c)}_m \\,\\bigl(1 - \\cos(a_m \\,\\phi_r + b_m \\,\\psi_r - \\delta^{(c)}_{m,r})\\bigr)\n$$\nwhere $\\phi_r$ and $\\psi_r$ are the dihedral angles in radians, $a_m$ and $b_m$ are integer coefficients, $V^{(c)}_m$ is the amplitude in kJ/mol, and $\\delta^{(c)}_m$ is the phase offset in degrees, also to be converted to radians ($\\delta^{(c)}_{m,r}$).\n\nThe solution is executed through the following sequence of steps for each test case:\n\n1.  **Discretization of Conformational Space**: The continuous two-dimensional space of $(\\phi, \\psi)$ is discretized into a regular grid. The angles $\\phi$ and $\\psi$ are sampled over the circular domain $\\left[-180, 180\\right)$ degrees with a step size of $\\Delta = 5$ degrees. This results in a $72 \\times 72$ grid of conformational states, where the grid points are $(\\phi_i, \\psi_j)$ with $\\phi_i, \\psi_j \\in \\{-180, -175, \\dots, 175\\}$.\n\n2.  **Energy Surface Calculation**: For each point $(\\phi_i, \\psi_j)$ on the grid, the total potential energy $E(\\phi_i, \\psi_j)$ is computed using the provided energy model. All angle inputs to trigonometric functions are first converted from degrees to radians. This procedure generates a $72 \\times 72$ matrix representing the potential energy surface.\n\n3.  **Identification of Local Minima**: The energy surface is searched for local minima. A grid point $(i, j)$ is identified as a local minimum if its energy $E(\\phi_i, \\psi_j)$ is strictly less than the energy of all its eight immediate neighbors. The periodic nature of the dihedral angles requires that boundary conditions are handled with a wraparound (toroidal) topology. For a grid of size $N \\times N$, the neighbors of a point $(i, j)$ have indices $(i', j')$ where $i' \\in \\{(i-1)\\pmod N, i, (i+1)\\pmod N\\}$ and $j' \\in \\{(j-1)\\pmod N, j, (j+1)\\pmod N\\}$, excluding $(i, j)$ itself. The coordinates and energy of each identified minimum are stored.\n\n4.  **Clustering of Minima**: The set of local minima may contain multiple points belonging to the same broad energy basin. To identify distinct conformational states, these minima are clustered. The minima are first sorted by energy in ascending order. Then, a greedy clustering algorithm is applied. The lowest-energy unclustered minimum is selected as the representative for a new cluster. All other unclustered minima that are \"close\" to this representative are assigned to its cluster and removed from further consideration as representatives. Proximity is determined by the toroidal distance, defined for an angle difference $\\Delta\\theta$ as $d(\\theta_1, \\theta_2) = \\min\\{|\\Delta\\theta|, 360 - |\\Delta\\theta|\\}$. Two minima are considered part of the same cluster if their toroidal distances in both $\\phi$ and $\\psi$ coordinates are less than or equal to a clustering threshold, $\\tau_c = 15$ degrees. This process yields a list of unique, lowest-energy representatives for each conformational basin.\n\n5.  **Selection and Matching**: From the list of unique cluster representatives, the top $L$ minima with the lowest energies are selected as the predicted rotamers. Each of the provided observed rotamers is then compared against this set of $L$ predicted rotamers. An observed rotamer $(\\phi^{\\text{obs}}, \\psi^{\\text{obs}})$ is considered matched if there exists at least one predicted rotamer $(\\phi^\\ast, \\psi^\\ast)$ such that the toroidal distances in both dimensions are within a matching tolerance, $\\tau_m = 20$ degrees. That is, $d(\\phi^\\ast, \\phi^{\\text{obs}}) \\le \\tau_m$ and $d(\\psi^\\ast, \\psi^{\\text{obs}}) \\le \\tau_m$.\n\n6.  **Final Verdict**: For a given test case, the result is `True` if and only if every observed rotamer is successfully matched by at least one of the top $L$ predicted rotamers. Otherwise, the result is `False`. The boolean outcomes for all test cases are then aggregated into a single list.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Main solver function to process all test cases for glycosidic torsion energy surface analysis.\n    \"\"\"\n\n    # Test suite data as specified in the problem statement.\n    test_cases = [\n        # Case 1\n        {\n            \"phi_terms\": [(3, 2.0, 180), (1, 1.5, 60)],\n            \"psi_terms\": [(3, 1.5, 270), (1, 1.8, 90)],\n            \"coup_terms\": [(1, -1, 0.2, 0)],\n            \"L\": 1,\n            \"obs_rotamers\": [(60, 90)],\n        },\n        # Case 2\n        {\n            \"phi_terms\": [(3, 2.0, 180), (1, 1.5, -60)],\n            \"psi_terms\": [(3, 1.0, 180), (1, 2.0, 180)],\n            \"coup_terms\": [(1, -1, 0.1, 0)],\n            \"L\": 1,\n            \"obs_rotamers\": [(-60, 180)],\n        },\n        # Case 3\n        {\n            \"phi_terms\": [(3, 2.0, 0), (1, 1.0, 0)],\n            \"psi_terms\": [(3, 2.0, 0), (1, 1.0, 0)],\n            \"coup_terms\": [(1, -1, 0.3, 0)],\n            \"L\": 1,\n            \"obs_rotamers\": [(0, 0)],\n        },\n        # Case 4\n        {\n            \"phi_terms\": [(3, 2.0, 180), (2, 0.6, 180)],\n            \"psi_terms\": [(3, 2.0, 180), (1, 1.2, -60)],\n            \"coup_terms\": [(1, -1, 0.3, 0)],\n            \"L\": 2,\n            \"obs_rotamers\": [(-60, -60), (60, -60)],\n        },\n    ]\n\n    # Global parameters\n    GRID_STEP = 5\n    CLUSTER_TOL = 15\n    MATCH_TOL = 20\n\n    results = []\n\n    def calculate_energy(phi_deg, psi_deg, phi_terms, psi_terms, coup_terms):\n        \"\"\"Calculates the total potential energy for a given (phi, psi) pair.\"\"\"\n        phi_rad = np.deg2rad(phi_deg)\n        psi_rad = np.deg2rad(psi_deg)\n        \n        energy = 0.0\n        \n        # Phi torsional terms\n        for n, V, delta_deg in phi_terms:\n            delta_rad = np.deg2rad(delta_deg)\n            energy += V * (1.0 - np.cos(n * phi_rad - delta_rad))\n            \n        # Psi torsional terms\n        for n, V, delta_deg in psi_terms:\n            delta_rad = np.deg2rad(delta_deg)\n            energy += V * (1.0 - np.cos(n * psi_rad - delta_rad))\n            \n        # Coupling terms\n        for a, b, V, delta_deg in coup_terms:\n            delta_rad = np.deg2rad(delta_deg)\n            energy += V * (1.0 - np.cos(a * phi_rad + b * psi_rad - delta_rad))\n            \n        return energy\n\n    def circular_dist(a1_deg, a2_deg):\n        \"\"\"Calculates the circular distance between two angles in degrees.\"\"\"\n        diff = np.abs(a1_deg - a2_deg)\n        return min(diff, 360.0 - diff)\n\n    for case in test_cases:\n        # Define the grid\n        angles = np.arange(-180, 180, GRID_STEP)\n        grid_size = len(angles)\n        energy_surface = np.zeros((grid_size, grid_size))\n\n        # 1. Calculate energy surface\n        for i, phi in enumerate(angles):\n            for j, psi in enumerate(angles):\n                energy_surface[i, j] = calculate_energy(\n                    phi, psi, case[\"phi_terms\"], case[\"psi_terms\"], case[\"coup_terms\"]\n                )\n\n        # 2. Find local minima\n        local_minima = []\n        for i in range(grid_size):\n            for j in range(grid_size):\n                is_min = True\n                current_energy = energy_surface[i, j]\n                for di in [-1, 0, 1]:\n                    for dj in [-1, 0, 1]:\n                        if di == 0 and dj == 0:\n                            continue\n                        \n                        ni = (i + di + grid_size) % grid_size\n                        nj = (j + dj + grid_size) % grid_size\n                        \n                        if current_energy >= energy_surface[ni, nj]:\n                            is_min = False\n                            break\n                    if not is_min:\n                        break\n                \n                if is_min:\n                    local_minima.append(\n                        {\"phi\": angles[i], \"psi\": angles[j], \"energy\": current_energy}\n                    )\n\n        # 3. Cluster minima\n        local_minima.sort(key=lambda m: m[\"energy\"])\n        \n        clustered_minima = []\n        is_clustered = [False] * len(local_minima)\n\n        for i in range(len(local_minima)):\n            if is_clustered[i]:\n                continue\n            \n            rep = local_minima[i]\n            clustered_minima.append(rep)\n            is_clustered[i] = True\n            \n            for j in range(i + 1, len(local_minima)):\n                if is_clustered[j]:\n                    continue\n                \n                candidate = local_minima[j]\n                d_phi = circular_dist(rep[\"phi\"], candidate[\"phi\"])\n                d_psi = circular_dist(rep[\"psi\"], candidate[\"psi\"])\n                \n                if d_phi = CLUSTER_TOL and d_psi = CLUSTER_TOL:\n                    is_clustered[j] = True\n\n        # 4. Select top L minima\n        top_minima = clustered_minima[:case[\"L\"]]\n\n        # 5. Match with observed rotamers\n        num_obs = len(case[\"obs_rotamers\"])\n        if num_obs == 0:\n            results.append(True)\n            continue\n            \n        matched_flags = [False] * num_obs\n        \n        for i, obs in enumerate(case[\"obs_rotamers\"]):\n            obs_phi, obs_psi = obs\n            \n            for pred in top_minima:\n                d_phi = circular_dist(obs_phi, pred[\"phi\"])\n                d_psi = circular_dist(obs_psi, pred[\"psi\"])\n                \n                if d_phi = MATCH_TOL and d_psi = MATCH_TOL:\n                    matched_flags[i] = True\n                    break\n        \n        results.append(all(matched_flags))\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n\n```", "id": "2781427"}]}