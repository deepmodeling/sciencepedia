{"hands_on_practices": [{"introduction": "Understanding the function of any enzyme begins with quantifying its catalytic efficiency and substrate affinity. This exercise provides practical experience in analyzing raw kinetic data for an aminoacyl-tRNA synthetase (aaRS). By fitting initial rate data directly to the Michaelis-Menten equation using nonlinear least-squares regression, you will extract the fundamental parameters $k_{\\mathrm{cat}}$ and $K_M$, which are essential for describing and comparing enzyme performance [@problem_id:2863191].", "problem": "You are modeling the steady-state initial charging rate of Transfer RNA (tRNA) by an aminoacyl-Transfer RNA synthetase (aaRS). Under initial rate conditions and single-substrate kinetics, the rate of tRNA charging as a function of substrate tRNA concentration can be described by the Michaelis–Menten model, with the total enzyme concentration known and held fixed for each dataset. Your task is to fit initial rate data across varying tRNA concentrations to extract the catalytic turnover number and the Michaelis constant with uncertainty estimates from nonlinear least squares.\n\nFundamental base and assumptions to use:\n- The Central Dogma of Molecular Biology establishes that Transfer RNA (tRNA) is aminoacylated by aminoacyl-Transfer RNA synthetase (aaRS) as part of translation.\n- Under initial rate ($v_0$) conditions with substrate concentration $[S]$ much larger than enzyme concentration $[E]_0$, quasi–steady-state kinetics apply for a single-substrate mechanism.\n- The Michaelis–Menten rate law is valid: \n$$\nv([S]; V_{\\max}, K_M) = \\frac{V_{\\max}\\,[S]}{K_M + [S]},\n$$\nwhere $V_{\\max} = k_{\\mathrm{cat}} [E]_0$, $k_{\\mathrm{cat}}$ is the catalytic turnover number, and $K_M$ is the Michaelis constant.\n\nTask:\n- For each dataset, perform a direct nonlinear least-squares fit of the Michaelis–Menten model to the provided initial rate data to estimate $V_{\\max}$ and $K_M$.\n- Convert $V_{\\max}$ to $k_{\\mathrm{cat}}$ using the known total enzyme concentration $[E]_0$ in that dataset via $k_{\\mathrm{cat}} = V_{\\max}/[E]_0$.\n- Compute standard errors for $k_{\\mathrm{cat}}$ and $K_M$. Treat $[E]_0$ as known without uncertainty. Use the parameter covariance from the nonlinear least-squares fit; propagate uncertainty for $k_{\\mathrm{cat}}$ by linear error propagation,\n$$\n\\mathrm{SE}\\!\\left(k_{\\mathrm{cat}}\\right) = \\frac{\\mathrm{SE}\\!\\left(V_{\\max}\\right)}{[E]_0}.\n$$\n\nUnits:\n- All substrate concentrations $[S]$ and enzyme concentrations $[E]_0$ are given in micromolar ($\\mu\\mathrm{M}$).\n- All initial rates $v$ are given in micromolar per second ($\\mu\\mathrm{M}\\,\\mathrm{s}^{-1}$).\n- Report $k_{\\mathrm{cat}}$ in $\\mathrm{s}^{-1}$ and $K_M$ in $\\mu\\mathrm{M}$. Report standard errors in the same units as their respective parameters.\n\nImportant constraints and requirements:\n- Do not linearize the model (for example, do not use double-reciprocal transformations). Fit the nonlinear model directly.\n- Use only the data provided below. No external input is allowed.\n- For numerical output, round all reported values to $6$ decimal places.\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, where each dataset contributes a list of four floats in the order $[k_{\\mathrm{cat}}, K_M, \\mathrm{SE}(k_{\\mathrm{cat}}), \\mathrm{SE}(K_M)]$. For example, a valid output for two datasets would look like $[[1.234000,5.678000,0.010000,0.200000],[\\dots]]$.\n\nTest suite (datasets):\n- Dataset $1$:\n  - $[E]_0 = 0.02$ $\\mu\\mathrm{M}$\n  - $[S]$ (in $\\mu\\mathrm{M}$): $[1, 3, 5, 10, 20, 50, 100, 200]$\n  - $v$ (in $\\mu\\mathrm{M}\\,\\mathrm{s}^{-1}$): $[0.0102, 0.0271, 0.0391, 0.0655, 0.0899, 0.1220, 0.1405, 0.1472]$\n- Dataset $2$:\n  - $[E]_0 = 0.01$ $\\mu\\mathrm{M}$\n  - $[S]$ (in $\\mu\\mathrm{M}$): $[0.05, 0.1, 0.2, 0.5, 1, 2, 5]$\n  - $v$ (in $\\mu\\mathrm{M}\\,\\mathrm{s}^{-1}$): $[0.00080, 0.00136, 0.00285, 0.00610, 0.00970, 0.01530, 0.02110]$\n- Dataset $3$:\n  - $[E]_0 = 0.05$ $\\mu\\mathrm{M}$\n  - $[S]$ (in $\\mu\\mathrm{M}$): $[1, 5, 10, 20, 50, 100]$\n  - $v$ (in $\\mu\\mathrm{M}\\,\\mathrm{s}^{-1}$): $[0.00120, 0.00630, 0.01240, 0.02200, 0.0490, 0.0845]$\n\nOutput specification:\n- Your program must output a single line containing a list with three inner lists (one per dataset), each inner list containing four floats: $[k_{\\mathrm{cat}}, K_M, \\mathrm{SE}(k_{\\mathrm{cat}}), \\mathrm{SE}(K_M)]$, all rounded to $6$ decimal places, in the exact format:\n[[kcat1,KM1,SEkcat1,SEKM1],[kcat2,KM2,SEkcat2,SEKM2],[kcat3,KM3,SEkcat3,SEKM3]].", "solution": "The problem statement has been rigorously evaluated and is determined to be valid. It is a well-posed, scientifically grounded problem in the field of enzyme kinetics, a sub-discipline of biochemistry. The task is to perform a quantitative analysis of experimental data using a standard mathematical model, the Michaelis-Menten equation, via nonlinear least-squares regression. All data, constants, and relationships required for a unique solution are provided, and there are no internal contradictions or logical flaws.\n\nThe core of the problem is to fit the Michaelis-Menten model to provided datasets of initial reaction rates ($v$) versus substrate concentrations ($[S]$). The model is given by the function:\n$$\nv([S]) = \\frac{V_{\\max}\\,[S]}{K_M + [S]}\n$$\nHere, $V_{\\max}$ is the maximum reaction rate and $K_M$ is the Michaelis constant, which represents the substrate concentration at which the reaction rate is half of $V_{\\max}$. These two parameters, $V_{\\max}$ and $K_M$, are to be estimated for each dataset.\n\nThe method specified is direct nonlinear least-squares fitting, which avoids the systematic errors introduced by linearizing transformations such as the Lineweaver-Burk plot. This procedure minimizes the sum of the squared residuals, $SSR$, between the observed rates, $v_i$, and the rates predicted by the model, $\\hat{v}_i([S_i])$, for a given set of parameters:\n$$\nSSR(V_{\\max}, K_M) = \\sum_{i=1}^{n} \\left( v_i - \\hat{v}_i([S_i]; V_{\\max}, K_M) \\right)^2\n$$\nThe optimal parameters $(V_{\\max}^*, K_M^*)$ are those that minimize this function. This will be accomplished numerically using the `curve_fit` function from the `scipy.optimize` library, which implements the Levenberg-Marquardt algorithm. This function also provides the estimated covariance matrix, $\\mathbf{C}$, for the fitted parameters.\n\n$$\n\\mathbf{C} = \\begin{pmatrix} \\sigma^2_{V_{\\max}} & \\sigma_{V_{\\max}, K_M} \\\\ \\sigma_{K_M, V_{\\max}} & \\sigma^2_{K_M} \\end{pmatrix}\n$$\n\nThe diagonal elements of this matrix are the variances of the estimated parameters. The standard error ($SE$) for each parameter is the square root of its variance:\n$$\n\\mathrm{SE}(V_{\\max}) = \\sqrt{\\mathbf{C}_{11}} = \\sqrt{\\sigma^2_{V_{\\max}}}\n$$\n$$\n\\mathrm{SE}(K_M) = \\sqrt{\\mathbf{C}_{22}} = \\sqrt{\\sigma^2_{K_M}}\n$$\n\nOnce $V_{\\max}$ and its standard error are determined, the catalytic turnover number, $k_{\\mathrm{cat}}$, is calculated. The relationship between $V_{\\max}$ and $k_{\\mathrm{cat}}$ is linear:\n$$\nk_{\\mathrm{cat}} = \\frac{V_{\\max}}{[E]_0}\n$$\nwhere $[E]_0$ is the total enzyme concentration, which is provided as a known constant for each dataset.\n\nThe uncertainty in $k_{\\mathrm{cat}}$ is determined by propagating the uncertainty from $V_{\\max}$. Since $[E]_0$ is treated as a constant with no uncertainty, the standard error of $k_{\\mathrm{cat}}$ is given by a simple scaling of the standard error of $V_{\\max}$:\n$$\n\\mathrm{SE}(k_{\\mathrm{cat}}) = \\frac{\\mathrm{SE}(V_{\\max})}{[E]_0}\n$$\nAll units are consistent. The concentration $[S]$ is in $\\mu\\mathrm{M}$, $[E]_0$ is in $\\mu\\mathrm{M}$, and the rate $v$ is in $\\mu\\mathrm{M}\\,\\mathrm{s}^{-1}$. Consequently, the fitted parameter $K_M$ will have units of $\\mu\\mathrm{M}$, and $V_{\\max}$ will have units of $\\mu\\mathrm{M}\\,\\mathrm{s}^{-1}$. This leads to $k_{\\mathrm{cat}}$ having units of $(\\mu\\mathrm{M}\\,\\mathrm{s}^{-1}) / (\\mu\\mathrm{M}) = \\mathrm{s}^{-1}$, which is correct for a first-order rate constant.\n\nThe procedure will be applied independently to each of the three provided datasets. The final output for each dataset will consist of four values: the estimated $k_{\\mathrm{cat}}$, $K_M$, $\\mathrm{SE}(k_{\\mathrm{cat}})$, and $\\mathrm{SE}(K_M)$, all rounded to six decimal places as required. The results from all datasets will be aggregated into a single formatted list structure.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.optimize import curve_fit\n\ndef solve():\n    \"\"\"\n    Solves the enzyme kinetics problem by fitting Michaelis-Menten data for three datasets.\n    \"\"\"\n\n    # Define the Michaelis-Menten model function for curve fitting.\n    def michaelis_menten(S, V_max, K_M):\n        \"\"\"\n        Michaelis-Menten rate law.\n        S: Substrate concentration.\n        V_max: Maximum reaction rate.\n        K_M: Michaelis constant.\n        \"\"\"\n        return (V_max * S) / (K_M + S)\n\n    # Define the test cases from the problem statement.\n    test_cases = [\n        {\n            \"E0\": 0.02,\n            \"S\": np.array([1, 3, 5, 10, 20, 50, 100, 200], dtype=float),\n            \"v\": np.array([0.0102, 0.0271, 0.0391, 0.0655, 0.0899, 0.1220, 0.1405, 0.1472], dtype=float),\n        },\n        {\n            \"E0\": 0.01,\n            \"S\": np.array([0.05, 0.1, 0.2, 0.5, 1, 2, 5], dtype=float),\n            \"v\": np.array([0.00080, 0.00136, 0.00285, 0.00610, 0.00970, 0.01530, 0.02110], dtype=float),\n        },\n        {\n            \"E0\": 0.05,\n            \"S\": np.array([1, 5, 10, 20, 50, 100], dtype=float),\n            \"v\": np.array([0.00120, 0.00630, 0.01240, 0.02200, 0.0490, 0.0845], dtype=float),\n        },\n    ]\n\n    all_results = []\n    for case in test_cases:\n        E0 = case[\"E0\"]\n        S_data = case[\"S\"]\n        v_data = case[\"v\"]\n\n        # Perform nonlinear least-squares fit using curve_fit.\n        # It returns optimal parameters (popt) and the covariance matrix (pcov).\n        # We provide reasonable initial guesses [Vmax_guess, KM_guess].\n        initial_guesses = [np.max(v_data), np.median(S_data)]\n        popt, pcov = curve_fit(michaelis_menten, S_data, v_data, p0=initial_guesses, bounds=(0, np.inf))\n\n        # Extract fitted parameters\n        V_max, K_M = popt\n\n        # Calculate standard errors from the covariance matrix.\n        # SE is the square root of the variance (diagonal elements of pcov).\n        perr = np.sqrt(np.diag(pcov))\n        SE_V_max, SE_K_M = perr\n\n        # Calculate k_cat from V_max and E0.\n        k_cat = V_max / E0\n\n        # Propagate error for k_cat.\n        # Since E0 is a constant, SE(k_cat) = SE(V_max) / E0.\n        SE_k_cat = SE_V_max / E0\n        \n        # Store results for this dataset.\n        results_for_case = [k_cat, K_M, SE_k_cat, SE_K_M]\n        all_results.append(results_for_case)\n\n    # Format the final output string as specified.\n    # e.g., [[kcat1,KM1,SEkcat1,SEKM1],[kcat2,KM2,SEkcat2,SEKM2],...]\n    # Each value is rounded to 6 decimal places. No spaces.\n    outer_parts = []\n    for inner_list in all_results:\n        inner_str = f\"[{','.join([f'{x:.6f}' for x in inner_list])}]\"\n        outer_parts.append(inner_str)\n    \n    final_output_string = f\"[{','.join(outer_parts)}]\"\n\n    print(final_output_string)\n\nsolve()\n```", "id": "2863191"}, {"introduction": "The remarkable accuracy of protein synthesis depends on mechanisms that actively correct errors, a concept known as kinetic proofreading. This practice challenges you to model such a system for an isoleucyl-tRNA synthetase, which must distinguish isoleucine from the structurally similar valine. By analyzing the competition between aminoacyl transfer and a hydrolytic editing pathway, you will calculate the resulting error frequency and the associated energetic cost in ATP, providing a quantitative look at the 'price of accuracy' [@problem_id:2846576].", "problem": "Aminoacyl-tRNA synthetases (aaRS) catalyze a two-step reaction: activation of an amino acid with adenosine triphosphate (ATP) to form an aminoacyl-adenylate intermediate, followed by transfer of the aminoacyl group to the terminal adenosine of the cognate transfer RNA (tRNA). Discrimination between cognate and near-cognate amino acids arises from both ground-state binding/transition-state effects in the activation step and kinetic proofreading via dedicated editing pathways that hydrolyze misactivated aminoacyl-adenylates or misacylated tRNA. Consider isoleucyl-tRNA synthetase acting on isoleucine (Ile, cognate) and valine (Val, near-cognate). Assume equal amino acid concentrations such that the observed pseudo-first-order activation rate constants are $k_{act}^{\\mathrm{Ile}}=100\\,\\mathrm{s}^{-1}$ and $k_{act}^{\\mathrm{Val}}=10\\,\\mathrm{s}^{-1}$. After activation, the aminoacyl-adenylate either proceeds to aminoacyl transfer to tRNA with rate $k_{tr}=20\\,\\mathrm{s}^{-1}$ (for both substrates) or, if the substrate is valine, is hydrolyzed by a dedicated pre-transfer editing pathway with rate $k_{edit}^{\\mathrm{Val}}=50\\,\\mathrm{s}^{-1}$. Editing of Ile is negligible. Each activation event consumes exactly $1$ ATP; neither transfer nor editing consumes additional ATP molecules. Assume independent, memoryless (exponential) waiting times for each competing step, and that each catalytic cycle begins with an activation event of either Ile or Val, determined by the competition between activation processes.\n\nUsing only these assumptions and the definitions above:\n- Compute the steady-state error frequency among released charged tRNA products, defined as the fraction of total released products that are Val-tRNA rather than Ile-tRNA, expressed as a decimal fraction.\n- Compute the expected number of ATP molecules consumed per correctly charged Ile-tRNA product.\n\nRound your answers to $4$ significant figures. Express the error frequency as a unitless decimal fraction and the ATP consumption as the number of ATP molecules per correct Ile-tRNA product (unitless count). Do not use a percentage sign, and do not include units in your final numerical answers.", "solution": "The problem requires the calculation of two quantities related to the fidelity of an aminoacyl-tRNA synthetase: the steady-state error frequency and the energetic cost per correct product. The analysis proceeds by modeling the system as a set of competing kinetic pathways, consistent with the assumption of independent, exponential waiting times for each step.\n\nFirst, let us calculate the steady-state error frequency, which we shall denote as $\\eta$. This is defined as the fraction of total released charged tRNA products that are Val-tRNA, i.e., the ratio of the rate of incorrect product formation to the total rate of product formation.\n$$ \\eta = \\frac{\\text{Rate of Val-tRNA release}}{\\text{Rate of Ile-tRNA release} + \\text{Rate of Val-tRNA release}} $$\nLet the rates of formation of Ile-tRNA and Val-tRNA be $v_{\\mathrm{Ile-tRNA}}$ and $v_{\\mathrm{Val-tRNA}}$, respectively. Then,\n$$ \\eta = \\frac{v_{\\mathrm{Val-tRNA}}}{v_{\\mathrm{Ile-tRNA}} + v_{\\mathrm{Val-tRNA}}} $$\nThe overall rate of product formation is a two-stage process: activation followed by aminoacyl transfer.\n\nThe initial activation step involves competition between isoleucine (Ile) and valine (Val) for the synthetase. Since their concentrations are assumed to be equal, the relative rates of activation are directly proportional to their respective pseudo-first-order rate constants, $k_{act}^{\\mathrm{Ile}}$ and $k_{act}^{\\mathrm{Val}}$.\nThe rate of activation of Ile is proportional to $k_{act}^{\\mathrm{Ile}}$.\nThe rate of activation of Val is proportional to $k_{act}^{\\mathrm{Val}}$.\n\nFollowing activation, the Ile-adenylate intermediate (Ile-AMP) proceeds to the transfer step. The problem states that editing for Ile is negligible. Thus, every activated Ile molecule is transferred to its cognate tRNA. The probability of transfer for an activated Ile is $P_{\\mathrm{tr|Ile}} = 1$. The overall rate of correct product formation is therefore proportional to the activation rate:\n$$ v_{\\mathrm{Ile-tRNA}} \\propto k_{act}^{\\mathrm{Ile}} \\times P_{\\mathrm{tr|Ile}} = k_{act}^{\\mathrm{Ile}} \\times 1 = k_{act}^{\\mathrm{Ile}} $$\n\nFor the Val-adenylate intermediate (Val-AMP), there are two competing pathways: transfer to tRNA with rate constant $k_{tr}$, and hydrolysis via the editing pathway with rate constant $k_{edit}^{\\mathrm{Val}}$. The probability that an activated Val molecule will be transferred to tRNA, rather than being edited, is given by the branching ratio of these competing first-order rates:\n$$ P_{\\mathrm{tr|Val}} = \\frac{k_{tr}}{k_{tr} + k_{edit}^{\\mathrm{Val}}} $$\nThe overall rate of incorrect product (Val-tRNA) formation is proportional to the rate of Val activation multiplied by this probability of successful transfer:\n$$ v_{\\mathrm{Val-tRNA}} \\propto k_{act}^{\\mathrm{Val}} \\times P_{\\mathrm{tr|Val}} = k_{act}^{\\mathrm{Val}} \\frac{k_{tr}}{k_{tr} + k_{edit}^{\\mathrm{Val}}} $$\n\nSubstituting these rate expressions into the formula for error frequency $\\eta$, the proportionality constant cancels, yielding:\n$$ \\eta = \\frac{k_{act}^{\\mathrm{Val}} \\frac{k_{tr}}{k_{tr} + k_{edit}^{\\mathrm{Val}}}}{k_{act}^{\\mathrm{Ile}} + k_{act}^{\\mathrm{Val}} \\frac{k_{tr}}{k_{tr} + k_{edit}^{\\mathrm{Val}}}} $$\nWe are given the values: $k_{act}^{\\mathrm{Ile}} = 100\\,\\mathrm{s}^{-1}$, $k_{act}^{\\mathrm{Val}} = 10\\,\\mathrm{s}^{-1}$, $k_{tr} = 20\\,\\mathrm{s}^{-1}$, and $k_{edit}^{\\mathrm{Val}} = 50\\,\\mathrm{s}^{-1}$.\nFirst, we calculate the transfer probability for valine:\n$$ P_{\\mathrm{tr|Val}} = \\frac{20}{20 + 50} = \\frac{20}{70} = \\frac{2}{7} $$\nNow we substitute this and the activation rates into the expression for $\\eta$:\n$$ \\eta = \\frac{10 \\times \\frac{2}{7}}{100 + 10 \\times \\frac{2}{7}} = \\frac{\\frac{20}{7}}{100 + \\frac{20}{7}} = \\frac{\\frac{20}{7}}{\\frac{700}{7} + \\frac{20}{7}} = \\frac{20}{720} = \\frac{1}{36} $$\nAs a decimal fraction, $\\eta = 1/36 \\approx 0.027777...$. Rounded to $4$ significant figures, the error frequency is $0.02778$.\n\nNext, we compute the expected number of ATP molecules consumed per correctly charged Ile-tRNA product. Let us denote this quantity by $N_{ATP}$. This is the ratio of the total rate of ATP consumption to the rate of formation of the correct product, Ile-tRNA.\n$$ N_{ATP} = \\frac{\\text{Total Rate of ATP Consumption}}{\\text{Rate of Ile-tRNA Formation}} $$\nAccording to the problem, exactly one molecule of ATP is consumed for each activation event, regardless of whether the amino acid is Ile or Val. The subsequent transfer and editing steps do not consume additional ATP. Therefore, the total rate of ATP consumption is the sum of the rates of activation of both amino acids.\n$$ \\text{Total Rate of ATP Consumption} \\propto k_{act}^{\\mathrm{Ile}} + k_{act}^{\\mathrm{Val}} $$\nThe rate of Ile-tRNA formation, as established earlier, is proportional to the rate of Ile activation.\n$$ \\text{Rate of Ile-tRNA Formation} \\propto k_{act}^{\\mathrm{Ile}} $$\nThe ratio $N_{ATP}$ is therefore:\n$$ N_{ATP} = \\frac{k_{act}^{\\mathrm{Ile}} + k_{act}^{\\mathrm{Val}}}{k_{act}^{\\mathrm{Ile}}} = 1 + \\frac{k_{act}^{\\mathrm{Val}}}{k_{act}^{\\mathrm{Ile}}} $$\nThe rates of the post-activation steps ($k_{tr}$ and $k_{edit}^{\\mathrm{Val}}$) do not appear in this expression because they do not affect the total number of initial activation events, which is the sole source of ATP consumption, nor do they affect the number of correct products formed from initial Ile activations. Substituting the given values:\n$$ N_{ATP} = 1 + \\frac{10}{100} = 1 + 0.1 = 1.1 $$\nRounding to $4$ significant figures as requested, the value is $1.100$.", "answer": "$$ \\boxed{ \\begin{pmatrix} 0.02778 & 1.100 \\end{pmatrix} } $$", "id": "2846576"}, {"introduction": "Beyond analyzing natural enzymes, a central goal of modern biochemistry is to engineer them for new purposes, such as incorporating noncanonical amino acids into proteins. This practice places you in the role of a protein engineer designing a directed evolution experiment in yeast. You will devise a genetic selection scheme that couples cell survival to the desired activity of a novel aaRS and quantify the selection pressure needed to enrich for improved variants, connecting molecular principles of specificity directly to population-level outcomes [@problem_id:2846531].", "problem": "In budding yeast Saccharomyces cerevisiae, you will evolve an orthogonal aminoacyl-transfer RNA synthetase (aaRS) and its cognate suppressor transfer RNA (tRNA) that specifically charge a noncanonical amino acid (ncAA) onto a suppressor tRNA with anticodon CUA. Your scheme must exert positive selection when the aaRS correctly charges the ncAA and negative selection when the aaRS misacylates any natural amino acid. Base your reasoning on the Central Dogma (DNA to RNA to protein), the standard genetic code with amber stop codon UAG, and the assumption that amber suppression events at distinct codons occur independently.\n\nDesign constraints for the selection scheme:\n- Positive selection: Place $k$ in-frame amber codons into a histidine-biosynthesis survival gene (for example, HIS3) under a constitutive promoter. In medium lacking histidine and supplemented with the ncAA, only cells expressing a functional HIS3 protein survive. Functional expression requires readthrough of all amber codons, and the per-codon amber suppression probability equals the per-codon incorporation probability of the charged tRNA.\n- Negative selection: Place $m=1$ in-frame amber codon into a toxic gene (for example, URA3 with selection on $5$-fluoroorotic acid) such that full-length expression produces toxicity only when an amber codon is suppressed. Conduct this selection in medium lacking the ncAA so that any suppression arises from misacylation with natural amino acids. Let the probability that a cell is killed, given toxin expression, be $h$, assumed independent of other processes.\n\nAssume the following per-codon suppression probabilities:\n- For a desired aaRS variant, in the presence of the ncAA, the per-codon suppression probability is $0.20$.\n- For an undesired aaRS variant that misacylates a natural amino acid but does not charge the ncAA, in the presence of the ncAA, the per-codon suppression probability is $0.05$.\n- In the absence of the ncAA (negative selection), the desired aaRS has an off-target per-codon suppression probability $0.002$, whereas the undesired aaRS has an off-target per-codon suppression probability $0.05$.\n- The toxin kill efficacy is $h=0.95$, and the toxin gene contains $m=1$ amber codon.\n\nModel survival as follows:\n- Positive selection survival equals the probability that all amber codons in the survival gene are suppressed.\n- Negative selection survival equals one minus the probability that the toxin is expressed times the kill efficacy.\n\nThe per-round enrichment factor is defined as the ratio of the survival probability of the desired aaRS to that of the undesired aaRS after sequential positive selection (in ncAA, histidine dropout) followed by negative selection (no ncAA, toxin selection).\n\nQuestion. What is the minimal integer $k$ such that the per-round enrichment is at least $100$? Give the exact integer value for $k$ as your final answer. No rounding is needed.", "solution": "The problem is scientifically well-posed and contains sufficient information for a unique solution. We will proceed by modeling the survival probabilities for the desired and undesired aminoacyl-tRNA synthetase (aaRS) variants under sequential positive and negative selection, then calculate the enrichment factor and solve for the minimal integer number of amber codons, $k$, that satisfies the given condition.\n\nFirst, we define the survival probabilities. Let $S_{des}$ be the total survival probability for the desired aaRS variant and $S_{und}$ be the total survival probability for the undesired aaRS variant after one round of selection. The selection round consists of a positive selection step followed by a negative selection step. The total survival is the product of the survival probabilities from each step, assuming independence.\n\n$S_{des} = S_{pos, des} \\times S_{neg, des}$\n$S_{und} = S_{pos, und} \\times S_{neg, und}$\n\nThe per-round enrichment factor, $E$, is the ratio a of these two probabilities:\n$$E = \\frac{S_{des}}{S_{und}} = \\frac{S_{pos, des} \\times S_{neg, des}}{S_{pos, und} \\times S_{neg, und}}$$\n\nNow, we will model each term based on the problem statement.\n\nFor the positive selection step, survival requires the successful suppression of all $k$ in-frame amber codons in the `HIS3` gene. Given that suppression events at each codon are independent, the probability of survival is the per-codon suppression probability raised to the power of $k$.\nLet $p_{pos, des}$ be the per-codon suppression probability for the desired variant in the presence of the noncanonical amino acid (ncAA), and $p_{pos, und}$ be the corresponding probability for the undesired variant.\nThe survival probabilities under positive selection are:\n$S_{pos, des} = (p_{pos, des})^k$\n$S_{pos, und} = (p_{pos, und})^k$\n\nFor the negative selection step, survival requires *not* being killed by the toxin produced from the `URA3` gene. The `URA3` gene contains $m=1$ amber codon. A cell is killed if this codon is suppressed (leading to a functional toxic protein) and the toxin is effective. The probability of a cell being killed is the product of the toxin expression probability and the toxin kill efficacy, $h$. The toxin expression probability is the probability of suppressing all $m=1$ amber codons.\nLet $p_{neg, des}$ be the off-target per-codon suppression probability for the desired variant in the absence of the ncAA, and $p_{neg, und}$ be the corresponding probability for the undesired variant.\nThe probability of a cell expressing the toxin is $(p_{neg})^{m}$. Since $m=1$, this is simply $p_{neg}$.\nThe probability of being killed is $p_{neg} \\times h$.\nThe probability of survival, $S_{neg}$, is therefore $1 - (p_{neg} \\times h)$.\nThe survival probabilities under negative selection for the two variants are:\n$S_{neg, des} = 1 - (p_{neg, des} \\times h)$\n$S_{neg, und} = 1 - (p_{neg, und} \\times h)$\n\nNow, we substitute these expressions back into the formula for the enrichment factor $E$:\n$$E = \\frac{(p_{pos, des})^k \\times (1 - p_{neg, des} \\times h)}{(p_{pos, und})^k \\times (1 - p_{neg, und} \\times h)}$$\nThis expression can be rearranged to separate the terms dependent on $k$:\n$$E = \\left(\\frac{p_{pos, des}}{p_{pos, und}}\\right)^k \\times \\left(\\frac{1 - p_{neg, des} \\times h}{1 - p_{neg, und} \\times h}\\right)$$\n\nWe are given the following values:\n$p_{pos, des} = 0.20$\n$p_{pos, und} = 0.05$\n$p_{neg, des} = 0.002$\n$p_{neg, und} = 0.05$\n$h = 0.95$\n\nWe substitute these values into the expression for $E$:\n$$E = \\left(\\frac{0.20}{0.05}\\right)^k \\times \\left(\\frac{1 - 0.002 \\times 0.95}{1 - 0.05 \\times 0.95}\\right)$$\n$$E = (4)^k \\times \\left(\\frac{1 - 0.0019}{1 - 0.0475}\\right)$$\n$$E = 4^k \\times \\left(\\frac{0.9981}{0.9525}\\right)$$\n\nThe problem requires finding the minimal integer $k$ such that the enrichment $E$ is at least $100$.\n$$4^k \\times \\left(\\frac{0.9981}{0.9525}\\right) \\ge 100$$\nTo solve for $k$, we first isolate the term $4^k$:\n$$4^k \\ge 100 \\times \\left(\\frac{0.9525}{0.9981}\\right)$$\nNow we take the natural logarithm ($\\ln$) of both sides of the inequality:\n$$\\ln(4^k) \\ge \\ln\\left(100 \\times \\frac{0.9525}{0.9981}\\right)$$\n$$k \\ln(4) \\ge \\ln(100) + \\ln(0.9525) - \\ln(0.9981)$$\n$$k \\ge \\frac{\\ln(100) + \\ln(0.9525) - \\ln(0.9981)}{\\ln(4)}$$\nLet us calculate the numerical value of the right-hand side:\nThe denominator is $\\ln(4) \\approx 1.38629$.\nThe numerator is $\\ln(100) + \\ln(0.9525) - \\ln(0.9981) \\approx 4.60517 - 0.04868 - (-0.00190) \\approx 4.55839$.\n$$k \\ge \\frac{4.55839}{1.38629} \\approx 3.2882$$\nSince $k$ must be an integer, the minimal value for $k$ that satisfies this condition is the smallest integer greater than or equal to $3.2882$.\nTherefore, the minimal integer value for $k$ is $4$.\n\nTo verify:\nFor $k=3$, $E = 4^3 \\times (\\frac{0.9981}{0.9525}) = 64 \\times 1.04787... \\approx 67.06$, which is less than $100$.\nFor $k=4$, $E = 4^4 \\times (\\frac{0.9981}{0.9525}) = 256 \\times 1.04787... \\approx 268.25$, which is greater than $100$.\nThe calculation is correct.", "answer": "$$\\boxed{4}$$", "id": "2846531"}]}