{"hands_on_practices": [{"introduction": "A molecule's energetic potential is not a fixed number but is critically dependent on the concentrations of reactants and products. This exercise moves beyond the textbook standard free energy change, $\\Delta G^{\\circ'}$, to calculate the actual free energy change, $\\Delta G$, for ATP hydrolysis within a realistic cellular environment. By applying fundamental thermodynamic equations to hypothetical physiological data, you will determine the true driving force available from ATP to power cellular work, a cornerstone concept in bioenergetics. [@problem_id:2777736]", "problem": "A mammalian hepatocyte cytosol at temperature $T = 310 \\ \\mathrm{K}$ and pH fixed by buffer at $7.2$ maintains adenosine triphosphate (ATP), adenosine diphosphate (ADP), and inorganic phosphate ($\\mathrm{P_i}$) at measurable concentrations. Under biochemical transformed standard conditions (pH fixed, water at activity $1$, and a specified free magnesium concentration such that ATP and ADP are treated as their predominant magnesium-complexed forms), the transformed standard Gibbs free energy change for ATP hydrolysis at this temperature is $\\Delta G^{\\circ'}_{\\text{ATP hydrolysis}} = -30.0 \\ \\mathrm{kJ \\ mol^{-1}}$. The reaction is the transformed biochemical reaction in which hydrogen ion and water do not explicitly appear in the reaction quotient.\n\nYou measure intracellular concentrations $[\\mathrm{ATP}] = 3.0 \\ \\mathrm{mM}$, $[\\mathrm{ADP}] = 0.50 \\ \\mathrm{mM}$, and $[\\mathrm{P_i}] = 5.0 \\ \\mathrm{mM}$. At the cytosolic ionic strength, the activity coefficients for the relevant ionic species are $\\gamma_{\\mathrm{ATP}} = 0.10$, $\\gamma_{\\mathrm{ADP}} = 0.15$, and $\\gamma_{\\mathrm{P_i}} = 0.25$. Take the standard state concentration as $c^{\\circ} = 1 \\ \\mathrm{M}$. Assume activities are given by $a_i = \\gamma_i [i]/c^{\\circ}$, and treat water activity as $1$.\n\nStarting from the definition of chemical potential $\\,\\mu_i = \\mu_i^{\\circ'} + RT \\ln a_i\\,$ and the expression for the Gibbs free energy change of reaction at constant temperature and pressure $\\,\\Delta G = \\sum_i \\nu_i \\mu_i\\,$, derive an expression appropriate for the transformed ATP hydrolysis reaction under these conditions and compute the actual Gibbs free energy change $\\Delta G$ given the measurements above. Use the universal gas constant $R = 8.314 \\ \\mathrm{J \\ mol^{-1} \\ K^{-1}}$. Express your final numerical answer for $\\Delta G$ in $\\mathrm{kJ \\ mol^{-1}}$ and round to four significant figures.", "solution": "The problem is valid as it is scientifically grounded, well-posed, and objective. It provides a complete set of data and definitions from which a unique, meaningful solution can be derived using fundamental principles of biochemical thermodynamics.\n\nThe task is to compute the actual Gibbs free energy change, $\\Delta G$, for adenosine triphosphate ($\\mathrm{ATP}$) hydrolysis under specified non-standard conditions in a hepatocyte cytosol. We begin from the fundamental definitions provided.\n\nThe transformed biochemical reaction for ATP hydrolysis, where water and hydrogen ions are accounted for in the transformed standard state, can be written as:\n$$\n\\mathrm{ATP} \\rightleftharpoons \\mathrm{ADP} + \\mathrm{P_i}\n$$\nThe stoichiometric coefficients ($\\nu_i$) for the species in this reaction are $\\nu_{\\mathrm{ATP}} = -1$, $\\nu_{\\mathrm{ADP}} = +1$, and $\\nu_{\\mathrm{P_i}} = +1$.\n\nThe Gibbs free energy change for a reaction at constant temperature and pressure is given by the sum of the chemical potentials ($\\mu_i$) of the reactants and products, weighted by their stoichiometric coefficients:\n$$\n\\Delta G = \\sum_i \\nu_i \\mu_i = \\nu_{\\mathrm{ADP}}\\mu_{\\mathrm{ADP}} + \\nu_{\\mathrm{P_i}}\\mu_{\\mathrm{P_i}} + \\nu_{\\mathrm{ATP}}\\mu_{\\mathrm{ATP}}\n$$\nSubstituting the given expression for the chemical potential, $\\mu_i = \\mu_i^{\\circ'} + RT \\ln a_i$, where $\\mu_i^{\\circ'}$ is the transformed standard chemical potential and $a_i$ is the activity of species $i$:\n$$\n\\Delta G = \\sum_i \\nu_i (\\mu_i^{\\circ'} + RT \\ln a_i)\n$$\nThis expression can be separated into two terms:\n$$\n\\Delta G = \\sum_i \\nu_i \\mu_i^{\\circ'} + \\sum_i \\nu_i RT \\ln a_i\n$$\nThe first term, $\\sum_i \\nu_i \\mu_i^{\\circ'}$, is by definition the transformed standard Gibbs free energy change for the reaction, $\\Delta G^{\\circ'}$.\n$$\n\\Delta G = \\Delta G^{\\circ'} + RT \\sum_i \\nu_i \\ln a_i\n$$\nUsing the property of logarithms, $\\sum_i \\nu_i \\ln a_i = \\ln(\\prod_i a_i^{\\nu_i})$, we can rewrite the equation as:\n$$\n\\Delta G = \\Delta G^{\\circ'} + RT \\ln\\left(\\frac{a_{\\mathrm{ADP}}^{\\nu_{\\mathrm{ADP}}} a_{\\mathrm{P_i}}^{\\nu_{\\mathrm{P_i}}}}{a_{\\mathrm{ATP}}^{-\\nu_{\\mathrm{ATP}}}}\\right) = \\Delta G^{\\circ'} + RT \\ln\\left(\\frac{a_{\\mathrm{ADP}} a_{\\mathrm{P_i}}}{a_{\\mathrm{ATP}}}\\right)\n$$\nThe term inside the logarithm is the reaction quotient, $Q$.\n$$\nQ = \\frac{a_{\\mathrm{ADP}} a_{\\mathrm{P_i}}}{a_{\\mathrm{ATP}}}\n$$\nThus, the final derived expression is:\n$$\n\\Delta G = \\Delta G^{\\circ'} + RT \\ln Q\n$$\nNow, we must calculate the numerical value of $\\Delta G$. First, we compute the activities ($a_i$) of the species using the formula $a_i = \\gamma_i [i]/c^{\\circ}$. The concentrations must be in units of $\\mathrm{M}$ to be consistent with the standard state concentration $c^{\\circ} = 1 \\ \\mathrm{M}$.\nGiven concentrations:\n$[\\mathrm{ATP}] = 3.0 \\ \\mathrm{mM} = 3.0 \\times 10^{-3} \\ \\mathrm{M}$\n$[\\mathrm{ADP}] = 0.50 \\ \\mathrm{mM} = 0.50 \\times 10^{-3} \\ \\mathrm{M}$\n$[\\mathrm{P_i}] = 5.0 \\ \\mathrm{mM} = 5.0 \\times 10^{-3} \\ \\mathrm{M}$\n\nGiven activity coefficients:\n$\\gamma_{\\mathrm{ATP}} = 0.10$\n$\\gamma_{\\mathrm{ADP}} = 0.15$\n$\\gamma_{\\mathrm{P_i}} = 0.25$\n\nThe activities are:\n$a_{\\mathrm{ATP}} = (0.10) \\frac{3.0 \\times 10^{-3} \\ \\mathrm{M}}{1 \\ \\mathrm{M}} = 3.0 \\times 10^{-4}$\n$a_{\\mathrm{ADP}} = (0.15) \\frac{0.50 \\times 10^{-3} \\ \\mathrm{M}}{1 \\ \\mathrm{M}} = 7.5 \\times 10^{-5}$\n$a_{\\mathrm{P_i}} = (0.25) \\frac{5.0 \\times 10^{-3} \\ \\mathrm{M}}{1 \\ \\mathrm{M}} = 1.25 \\times 10^{-3}$\n\nNext, we calculate the reaction quotient $Q$:\n$$\nQ = \\frac{(7.5 \\times 10^{-5}) \\times (1.25 \\times 10^{-3})}{3.0 \\times 10^{-4}} = \\frac{9.375 \\times 10^{-8}}{3.0 \\times 10^{-4}} = 3.125 \\times 10^{-4}\n$$\nNow we can compute $\\Delta G$. We must ensure all units are consistent. We will perform the calculation in $\\mathrm{kJ \\ mol^{-1}}$.\n$\\Delta G^{\\circ'} = -30.0 \\ \\mathrm{kJ \\ mol^{-1}}$\n$R = 8.314 \\ \\mathrm{J \\ mol^{-1} \\ K^{-1}} = 8.314 \\times 10^{-3} \\ \\mathrm{kJ \\ mol^{-1} \\ K^{-1}}$\n$T = 310 \\ \\mathrm{K}$\n\nSubstituting these values into the equation for $\\Delta G$:\n$$\n\\Delta G = -30.0 \\ \\mathrm{kJ \\ mol^{-1}} + (8.314 \\times 10^{-3} \\ \\mathrm{kJ \\ mol^{-1} \\ K^{-1}}) \\times (310 \\ \\mathrm{K}) \\times \\ln(3.125 \\times 10^{-4})\n$$\nFirst, calculate the term $RT \\ln Q$:\n$$\nRT \\ln Q = (2.57734 \\ \\mathrm{kJ \\ mol^{-1}}) \\times \\ln(3.125 \\times 10^{-4})\n$$\n$$\nRT \\ln Q \\approx (2.57734 \\ \\mathrm{kJ \\ mol^{-1}}) \\times (-8.0700) \\approx -20.8033 \\ \\mathrm{kJ \\ mol^{-1}}\n$$\nFinally, calculate $\\Delta G$:\n$$\n\\Delta G = -30.0 \\ \\mathrm{kJ \\ mol^{-1}} - 20.8033 \\ \\mathrm{kJ \\ mol^{-1}} = -50.8033 \\ \\mathrm{kJ \\ mol^{-1}}\n$$\nRounding the result to four significant figures as required by the problem statement gives:\n$$\n\\Delta G = -50.80 \\ \\mathrm{kJ \\ mol^{-1}}\n$$\nThe negative sign indicates that under these specific intracellular conditions, the hydrolysis of ATP is a spontaneous process, and even more so than under standard conditions.", "answer": "$$\\boxed{-50.80}$$", "id": "2777736"}, {"introduction": "The synthesis of ATP via oxidative phosphorylation is a feat of elegant energy conversion, quantitatively described by the phosphate-to-oxygen (P/O) ratio. This practice problem models the chemiosmotic coupling mechanism to derive these ratios from first principles. Using a set of defined, hypothetical stoichiometries for proton pumping and consumption, you will see how the efficiency of ATP production is directly linked to the mechanics of the electron transport chain and ATP synthase. [@problem_id:2777792]", "problem": "In oxidative phosphorylation, the chemiosmotic theory asserts that the free energy released by electron transfer is conserved transiently as an electrochemical proton gradient across the inner membrane and then used to drive adenosine triphosphate (ATP) synthesis. Define the phosphate-to-oxygen ratio (P/O) as the number of ATP molecules formed per atom of oxygen (that is, per one half molecule of dioxygen) reduced when a pair of electrons from a respiratory substrate flows to oxygen via the electron transport chain.\n\nAssume a mitochondrion in which the following steady-state, integer stoichiometries hold for a full two-electron transfer from a single substrate molecule to an oxygen atom:\n- Reduced nicotinamide adenine dinucleotide (NADH) drives translocation of $10$ protons from the matrix to the intermembrane space by the respiratory chain before those electrons reduce an oxygen atom to water.\n- Reduced flavin adenine dinucleotide (FADH$_2$) drives translocation of $8$ protons by the respiratory chain before those electrons reduce an oxygen atom to water.\n- The net proton cost to synthesize one ATP in the matrix and make it available in the cytosol (including both the rotary catalysis of the $\\mathrm{F}_{1}\\mathrm{F}_{0}$-ATP synthase and the inorganic phosphate and adenine nucleotide transport steps) is $4$ protons per ATP.\n\nStarting from the chemiosmotic coupling principle and conservation of charge, derive a general expression for the P/O ratio of a given electron donor in terms of the number of protons translocated per two-electron transfer and the net proton cost per ATP made available, and then evaluate it for NADH and for FADH$_2$ using the assumed stoichiometries above.\n\nReport your final result as a two-entry row matrix $\\begin{pmatrix} x & y \\end{pmatrix}$, where the first entry is the P/O for NADH and the second entry is the P/O for FADH$_2$. Provide exact values; do not round. The P/O is dimensionless, so no units are required.", "solution": "The problem requires the derivation of the phosphate-to-oxygen ratio, denoted as the P/O ratio, based on the principle of chemiosmotic coupling, followed by its evaluation for two specific electron donors. The problem is well-posed and grounded in fundamental principles of bioenergetics. We proceed with a formal derivation.\n\nLet $n_{H^+}$ represent the number of protons translocated from the mitochondrial matrix to the intermembrane space per pair of electrons transferred from a substrate molecule. This two-electron transfer event results in the reduction of a single atom of oxygen, which is equivalent to one half of a dioxygen molecule ($\\frac{1}{2} O_2$).\n\nLet $c_{ATP}$ represent the net number of protons that must flow back into the matrix to drive the synthesis of one molecule of ATP and its subsequent transport into the cytosol. This is the total proton cost per ATP made available for cellular work.\n\nThe chemiosmotic theory, which is the foundation of this problem, posits that the free energy from electron transport is conserved in the form of an electrochemical proton gradient. This gradient, or proton-motive force, is then utilized by the $\\mathrm{F}_1\\mathrm{F}_\\mathrm{o}$-ATP synthase to produce ATP. In a steady-state system, the production of protons by the electron transport chain is perfectly coupled to their consumption by the ATP synthesis machinery.\n\nThe P/O ratio is defined as the number of ATP molecules synthesized per atom of oxygen reduced. Since the translocation of $n_{H^+}$ protons is coupled to the reduction of a single oxygen atom, the total number of ATP molecules that can be formed is determined by the ratio of the number of protons supplied by the electron transport event to the number of protons consumed per ATP molecule synthesized and transported.\n\nTherefore, the general expression for the P/O ratio is the quotient of the number of protons made available and the proton cost per ATP:\n$$\n\\frac{P}{O} = \\frac{\\text{Number of protons translocated per } \\frac{1}{2} O_2 \\text{ reduced}}{\\text{Number of protons consumed per ATP synthesized}}\n$$\nExpressing this in our defined symbols, the general formula is:\n$$\n\\frac{P}{O} = \\frac{n_{H^+}}{c_{ATP}}\n$$\nThis expression constitutes the first part of the required derivation.\n\nNext, we must evaluate this ratio for the specific substrates, reduced nicotinamide adenine dinucleotide (NADH) and reduced flavin adenine dinucleotide (FADH$_2$), using the stoichiometries provided in the problem statement.\n\nThe given values are:\nFor the oxidation of one molecule of NADH, the number of protons translocated is $n_{H^+, \\text{NADH}} = 10$.\nFor the oxidation of one molecule of FADH$_2$, the number of protons translocated is $n_{H^+, \\text{FADH}_2} = 8$.\nThe net proton cost for the synthesis and export of one molecule of ATP is $c_{ATP} = 4$.\n\nWe apply the general formula to calculate the P/O ratio for NADH, which we denote as $(\\frac{P}{O})_{\\text{NADH}}$:\n$$\n\\left(\\frac{P}{O}\\right)_{\\text{NADH}} = \\frac{n_{H^+, \\text{NADH}}}{c_{ATP}} = \\frac{10}{4}\n$$\nEvaluating this fraction gives:\n$$\n\\left(\\frac{P}{O}\\right)_{\\text{NADH}} = 2.5\n$$\nThen, we perform the same calculation for FADH$_2$, denoted as $(\\frac{P}{O})_{\\text{FADH}_2}$:\n$$\n\\left(\\frac{P}{O}\\right)_{\\text{FADH}_2} = \\frac{n_{H^+, \\text{FADH}_2}}{c_{ATP}} = \\frac{8}{4}\n$$\nEvaluating this fraction gives:\n$$\n\\left(\\frac{P}{O}\\right)_{\\text{FADH}_2} = 2\n$$\nThe problem requires the final answer to be presented as a two-entry row matrix, where the first element is the P/O ratio for NADH and the second is the P/O ratio for FADH$_2$.", "answer": "$$\n\\boxed{\\begin{pmatrix} 2.5 & 2 \\end{pmatrix}}\n$$", "id": "2777792"}, {"introduction": "Cellular bioenergetics is not a static process, but a dynamic system that must robustly maintain energy homeostasis against fluctuating demands. This advanced exercise introduces computational systems biology, tasking you with analyzing a minimal mathematical model of oxidative phosphorylation built from ordinary differential equations (ODEs). By finding the system's steady state and assessing its stability, you will gain insight into how the interplay between electron transport, proton leak, and ATP synthesis and consumption creates a stable, functional energy supply for the cell. [@problem_id:2777757]", "problem": "You are to implement, analyze, and compute steady states and local stability for a minimal ordinary differential equation model of oxidative phosphorylation that couples the electron transport chain, the proton-motive force, proton leak, and adenosine triphosphate synthase. The system must be constructed from first principles of chemiosmotic theory and charge and mass balance, with explicit, smooth flux laws. The state variables are the proton-motive force and the adenosine triphosphate fraction, and the dynamics must respect stoichiometric coupling between proton fluxes and adenosine triphosphate synthesis.\n\nDefine the variables and parameters as follows:\n- State variables:\n    - Proton-motive force (electrochemical gradient) $\\Delta p$ with units millivolts, denoted $p$ (so $p = \\Delta p$ in $\\mathrm{mV}$).\n    - Adenosine triphosphate fraction $a \\in [0,1]$, defined by $a = [\\mathrm{ATP}]/A_{\\mathrm{tot}}$ where $A_{\\mathrm{tot}} = [\\mathrm{ATP}]+[\\mathrm{ADP}]$ is a constant total adenine nucleotide pool.\n\n- Fluxes (all in consistent arbitrary proton or molecule per unit time, with parameters chosen such that units are internally consistent):\n    - Electron transport chain proton pumping flux $J_{\\mathrm{ETC}}(p)$, modeled as a decreasing linear function of $p$:\n      $$J_{\\mathrm{ETC}}(p) = V_{\\mathrm{ETC}} \\left(1 - \\frac{p}{p_{\\max}}\\right),$$\n      where $V_{\\mathrm{ETC}}$ is the maximum proton pumping rate at $p=0$ and $p_{\\max}$ is the value of $p$ that linearly suppresses the flux to zero. Assume $p \\ge 0$ and choose parameters so that the steady state satisfies $p  p_{\\max}$.\n    - Proton leak flux $J_{\\mathrm{leak}}(p)$, modeled as ohmic:\n      $$J_{\\mathrm{leak}}(p) = g_{\\mathrm{L}}\\, p,$$\n      where $g_{\\mathrm{L}}$ is the leak conductance in flux per millivolt.\n    - Adenosine triphosphate synthase proton-consuming flux $J_{\\mathrm{ATP}}(p,a)$, modeled as the product of a Michaelis–Menten dependence on $p$ and the availability of adenosine diphosphate:\n      $$J_{\\mathrm{ATP}}(p,a) = k_{\\mathrm{ATP}}\\, (1-a)\\, \\frac{p}{K_p + p},$$\n      where $k_{\\mathrm{ATP}}$ is a kinetic coefficient and $K_p$ is the half-saturation constant in millivolts.\n\n- Coupling and usage:\n    - Effective proton pumping stoichiometry $n_p$ (protons pumped per electron donor turnover) and proton requirement per adenosine triphosphate synthesized $n_{\\mathrm{ATP}}$ (protons per adenosine triphosphate).\n    - Adenosine triphosphate usage (demand) flux $v_{\\mathrm{use}}(a)$, modeled as a saturating function of $a$:\n      $$v_{\\mathrm{use}}(a) = k_{\\mathrm{use}}\\, \\frac{a}{K_{\\mathrm{use}} + a},$$\n      where $k_{\\mathrm{use}}$ is a maximal consumption rate and $K_{\\mathrm{use}}$ is a half-saturation constant.\n\n- Effective capacitance and pool size:\n    - Effective proton capacitance factor $C$ converting net proton flux imbalance into a rate of change of $p$:\n      $$\\frac{dp}{dt} = \\frac{1}{C}\\left(n_p\\, J_{\\mathrm{ETC}}(p) - n_{\\mathrm{ATP}}\\, J_{\\mathrm{ATP}}(p,a) - J_{\\mathrm{leak}}(p)\\right).$$\n    - Total adenine nucleotide pool $A_{\\mathrm{tot}}$ converting adenosine triphosphate synthesis and usage fluxes into a rate of change of $a$:\n      $$\\frac{da}{dt} = \\frac{1}{A_{\\mathrm{tot}}}\\left(J_{\\mathrm{ATP}}(p,a) - v_{\\mathrm{use}}(a)\\right).$$\n\nYour task:\n- Implement a program that, for each parameter set below, computes a steady state $(p^\\*,a^\\*)$ that satisfies the steady-state equations\n  $$f_1(p,a) = \\frac{1}{C}\\left(n_p\\, J_{\\mathrm{ETC}}(p) - n_{\\mathrm{ATP}}\\, J_{\\mathrm{ATP}}(p,a) - J_{\\mathrm{leak}}(p)\\right) = 0,$$\n  $$f_2(p,a) = \\frac{1}{A_{\\mathrm{tot}}}\\left(J_{\\mathrm{ATP}}(p,a) - v_{\\mathrm{use}}(a)\\right) = 0,$$\n  subject to bounds $p \\ge 0$ and $0 \\le a \\le 1$.\n- Evaluate the Jacobian matrix of the right-hand side at the steady state,\n  $$J = \\begin{bmatrix}\n  \\frac{\\partial f_1}{\\partial p}  \\frac{\\partial f_1}{\\partial a} \\\\\n  \\frac{\\partial f_2}{\\partial p}  \\frac{\\partial f_2}{\\partial a}\n  \\end{bmatrix},$$\n  using analytic derivatives of the fluxes where possible, and determine local asymptotic stability by checking whether all eigenvalues of $J$ have strictly negative real parts.\n\nAnalytic derivatives to be used in your implementation:\n- Write $J_{\\mathrm{ETC}}(p) = V_{\\mathrm{ETC}} \\left(1 - \\frac{p}{p_{\\max}}\\right)$; then\n  $$\\frac{\\partial J_{\\mathrm{ETC}}}{\\partial p} = -\\frac{V_{\\mathrm{ETC}}}{p_{\\max}}, \\quad \\frac{\\partial J_{\\mathrm{ETC}}}{\\partial a} = 0.$$\n- Write $J_{\\mathrm{leak}}(p) = g_{\\mathrm{L}}\\, p$; then\n  $$\\frac{\\partial J_{\\mathrm{leak}}}{\\partial p} = g_{\\mathrm{L}}, \\quad \\frac{\\partial J_{\\mathrm{leak}}}{\\partial a} = 0.$$\n- Write $J_{\\mathrm{ATP}}(p,a) = k_{\\mathrm{ATP}}\\, (1-a)\\, \\frac{p}{K_p + p}$; then\n  $$\\frac{\\partial J_{\\mathrm{ATP}}}{\\partial p} = k_{\\mathrm{ATP}}\\,(1-a)\\,\\frac{K_p}{(K_p + p)^2}, \\quad \\frac{\\partial J_{\\mathrm{ATP}}}{\\partial a} = -k_{\\mathrm{ATP}}\\,\\frac{p}{K_p + p}.$$\n- Write $v_{\\mathrm{use}}(a) = k_{\\mathrm{use}}\\, \\frac{a}{K_{\\mathrm{use}} + a}$; then\n  $$\\frac{\\partial v_{\\mathrm{use}}}{\\partial a} = k_{\\mathrm{use}}\\, \\frac{K_{\\mathrm{use}}}{(K_{\\mathrm{use}} + a)^2}.$$\n- From these, compute\n  $$\\frac{\\partial f_1}{\\partial p} = \\frac{1}{C}\\left(n_p\\, \\frac{\\partial J_{\\mathrm{ETC}}}{\\partial p} - n_{\\mathrm{ATP}}\\, \\frac{\\partial J_{\\mathrm{ATP}}}{\\partial p} - \\frac{\\partial J_{\\mathrm{leak}}}{\\partial p}\\right), \\quad \\frac{\\partial f_1}{\\partial a} = \\frac{1}{C}\\left(- n_{\\mathrm{ATP}}\\, \\frac{\\partial J_{\\mathrm{ATP}}}{\\partial a}\\right),$$\n  $$\\frac{\\partial f_2}{\\partial p} = \\frac{1}{A_{\\mathrm{tot}}}\\, \\frac{\\partial J_{\\mathrm{ATP}}}{\\partial p}, \\quad \\frac{\\partial f_2}{\\partial a} = \\frac{1}{A_{\\mathrm{tot}}}\\left(\\frac{\\partial J_{\\mathrm{ATP}}}{\\partial a} - \\frac{\\partial v_{\\mathrm{use}}}{\\partial a}\\right).$$\n\nNumerical requirements:\n- Compute a physically meaningful steady state for each case using a robust bounded nonlinear solver with bounds $p \\in [0,\\infty)$ and $a \\in [0,1]$; you must ensure your algorithm respects these bounds.\n- Report $p^\\*$ in millivolts and $a^\\*$ as a dimensionless fraction. Express $p^\\*$ and $a^\\*$ each rounded to three decimal places.\n- Determine stability as a boolean by checking whether the maximum real part of the eigenvalues of $J$ at $(p^\\*,a^\\*)$ is strictly less than $0$.\n\nTest suite (five parameter sets). For each case, parameters are given as the ordered tuple $\\left(V_{\\mathrm{ETC}}, p_{\\max}, n_p, g_{\\mathrm{L}}, k_{\\mathrm{ATP}}, K_p, n_{\\mathrm{ATP}}, k_{\\mathrm{use}}, K_{\\mathrm{use}}, A_{\\mathrm{tot}}, C\\right)$ with the following fixed units or dimensions: $V_{\\mathrm{ETC}}$ (flux units), $p_{\\max}$ ($\\mathrm{mV}$), $n_p$ (dimensionless), $g_{\\mathrm{L}}$ (flux per $\\mathrm{mV}$), $k_{\\mathrm{ATP}}$ (flux units), $K_p$ ($\\mathrm{mV}$), $n_{\\mathrm{ATP}}$ (dimensionless), $k_{\\mathrm{use}}$ (flux units), $K_{\\mathrm{use}}$ (dimensionless), $A_{\\mathrm{tot}}$ (concentration units, used only as a scaling factor), $C$ (capacitance-like scaling factor):\n- Case $1$ (baseline): $\\left(4.0, 200.0, 8.0, 0.05, 0.5, 20.0, 3.0, 0.15, 0.2, 1.0, 1.0\\right)$.\n- Case $2$ (high leak): $\\left(4.0, 200.0, 8.0, 0.20, 0.5, 20.0, 3.0, 0.15, 0.2, 1.0, 1.0\\right)$.\n- Case $3$ (zero demand): $\\left(4.0, 200.0, 8.0, 0.05, 0.5, 20.0, 3.0, 0.0, 0.2, 1.0, 1.0\\right)$.\n- Case $4$ (high demand): $\\left(4.0, 200.0, 8.0, 0.05, 0.5, 20.0, 3.0, 0.40, 0.2, 1.0, 1.0\\right)$.\n- Case $5$ (low electron transport capacity): $\\left(1.0, 200.0, 8.0, 0.05, 0.5, 20.0, 3.0, 0.15, 0.2, 1.0, 1.0\\right)$.\n\nFinal output format:\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, where each case contributes a sublist of three elements $[p^\\*, a^\\*, \\text{stable}]$ in this order. For example, the output must look like\n  $$\\left[\\left[p^\\*_1,a^\\*_1,\\mathrm{stable}_1\\right],\\left[p^\\*_2,a^\\*_2,\\mathrm{stable}_2\\right],\\ldots,\\left[p^\\*_5,a^\\*_5,\\mathrm{stable}_5\\right]\\right],$$\n  where each $p^\\*_i$ is in $\\mathrm{mV}$ rounded to three decimal places, each $a^\\*_i$ is a fraction rounded to three decimal places, and each $\\mathrm{stable}_i$ is a boolean. No additional text must be printed.", "solution": "The user has provided a problem in mathematical biology that requires the determination and stability analysis of steady states for a system of ordinary differential equations (ODEs) modeling mitochondrial oxidative phosphorylation. A critical validation of the problem statement is the mandatory first step.\n\n### Step 1: Extract Givens\n\nThe system is described by two state variables, $p$ (proton-motive force in $\\mathrm{mV}$) and $a$ (dimensionless ATP fraction, $a \\in [0,1]$). The dynamics are governed by the following system of ODEs:\n$$\n\\frac{dp}{dt} = f_1(p,a) = \\frac{1}{C}\\left(n_p\\, J_{\\mathrm{ETC}}(p) - n_{\\mathrm{ATP}}\\, J_{\\mathrm{ATP}}(p,a) - J_{\\mathrm{leak}}(p)\\right)\n$$\n$$\n\\frac{da}{dt} = f_2(p,a) = \\frac{1}{A_{\\mathrm{tot}}}\\left(J_{\\mathrm{ATP}}(p,a) - v_{\\mathrm{use}}(a)\\right)\n$$\nThe fluxes are defined as:\n- Electron transport chain flux: $J_{\\mathrm{ETC}}(p) = V_{\\mathrm{ETC}} \\left(1 - \\frac{p}{p_{\\max}}\\right)$\n- Proton leak flux: $J_{\\mathrm{leak}}(p) = g_{\\mathrm{L}}\\, p$\n- ATP synthase flux: $J_{\\mathrm{ATP}}(p,a) = k_{\\mathrm{ATP}}\\, (1-a)\\, \\frac{p}{K_p + p}$\n- ATP usage flux: $v_{\\mathrm{use}}(a) = k_{\\mathrm{use}}\\, \\frac{a}{K_{\\mathrm{use}} + a}$\n\nThe problem requires finding the steady state $(p^\\*,a^\\*)$ by solving the algebraic system $f_1(p,a) = 0$ and $f_2(p,a) = 0$, subject to the physical constraints $p \\ge 0$ and $0 \\le a \\le 1$.\n\nFurthermore, a local stability analysis must be performed by evaluating the Jacobian matrix $J$ at the steady state:\n$$\nJ = \\begin{bmatrix}\n\\frac{\\partial f_1}{\\partial p}  \\frac{\\partial f_1}{\\partial a} \\\\\n\\frac{\\partial f_2}{\\partial p}  \\frac{\\partial f_2}{\\partial a}\n\\end{bmatrix}_{(p^\\*,a^\\*)}\n$$\nAll partial derivatives required to construct this matrix are explicitly provided in the problem statement. Stability is determined by the condition that all eigenvalues of $J$ have strictly negative real parts.\n\nFive sets of parameters are provided for computation:\n- Case 1: $(4.0, 200.0, 8.0, 0.05, 0.5, 20.0, 3.0, 0.15, 0.2, 1.0, 1.0)$\n- Case 2: $(4.0, 200.0, 8.0, 0.20, 0.5, 20.0, 3.0, 0.15, 0.2, 1.0, 1.0)$\n- Case 3: $(4.0, 200.0, 8.0, 0.05, 0.5, 20.0, 3.0, 0.0, 0.2, 1.0, 1.0)$\n- Case 4: $(4.0, 200.0, 8.0, 0.05, 0.5, 20.0, 3.0, 0.40, 0.2, 1.0, 1.0)$\n- Case 5: $(1.0, 200.0, 8.0, 0.05, 0.5, 20.0, 3.0, 0.15, 0.2, 1.0, 1.0)$\n\n### Step 2: Validate Using Extracted Givens\n\nThe problem is subjected to rigorous validation.\n- **Scientifically Grounded:** The model is a simplified but standard representation of chemiosmotic theory, a cornerstone of bioenergetics. The flux expressions are based on established kinetic forms: linear-irreversible thermodynamics for the ETC and proton leak, and Michaelis-Menten-type kinetics for ATP synthesis and consumption. The formulation is scientifically sound.\n- **Well-Posed:** The problem is a standard exercise in dynamical systems theory: finding a fixed point of a system of ODEs and analyzing its local stability. The functions defining the vector field are smooth (infinitely differentiable) within the domain of interest, ensuring that the problem is well-posed. The existence of a solution is demonstrated in the subsequent analysis.\n- **Objective:** The problem is formulated with mathematical precision, using clearly defined variables, parameters, and equations. It is free from ambiguity, subjectivity, or non-scientific claims.\n- **Completeness and Consistency:** All necessary parameters, equations, boundary conditions (implicit in the definitions of $p$ and $a$), and analytical expressions for derivatives are provided. The setup is self-contained and internally consistent.\n\nThe problem statement respects all criteria for validity. It is a well-defined, non-trivial problem in applied mathematics and theoretical biology.\n\n### Step 3: Verdict and Action\n\nThe problem is deemed **valid**. A complete solution will now be developed.\n\n### Solution methodology\n\nThe task is to find a steady state $(p^\\*, a^\\*)$ and assess its stability. The steady state is the solution to the system of nonlinear algebraic equations:\n$$\n(1) \\quad n_p\\, J_{\\mathrm{ETC}}(p) - n_{\\mathrm{ATP}}\\, J_{\\mathrm{ATP}}(p,a) - J_{\\mathrm{leak}}(p) = 0\n$$\n$$\n(2) \\quad J_{\\mathrm{ATP}}(p,a) - v_{\\mathrm{use}}(a) = 0\n$$\n\nA direct approach to solving this system involves reducing it to a single equation in a single variable. From equation $(2)$, we can express the variable $a$ as a function of $p$. Substituting the flux definitions into $(2)$ gives:\n$$\nk_{\\mathrm{ATP}}\\, (1-a)\\, \\frac{p}{K_p + p} = k_{\\mathrm{use}}\\, \\frac{a}{K_{\\mathrm{use}} + a}\n$$\nRearranging this equation leads to a quadratic equation for $a$:\n$$\n\\left(k_{\\mathrm{ATP}}\\frac{p}{K_p+p}\\right)a^2 + \\left(k_{\\mathrm{use}} - k_{\\mathrm{ATP}}\\frac{p}{K_p+p}(1-K_{\\mathrm{use}})\\right)a - \\left(k_{\\mathrm{ATP}}\\frac{p}{K_p+p}\\right)K_{\\mathrm{use}} = 0\n$$\nThis is of the form $Aa^2 + Ba + C = 0$. For any given $p  0$ and with a positive ATP demand ($k_{\\mathrm{use}}  0$), we have $A  0$ and $C  0$. The product of the roots, $C/A = -K_{\\mathrm{use}}$, is negative, implying one positive and one negative real root. As $a$ must be non-negative, we select the positive root, which is guaranteed to lie within the physical interval $(0, 1)$. This defines a function $a = g(p)$. A special case arises if $k_{\\mathrm{use}}=0$, which implies $J_{\\mathrm{ATP}}(p,a)=0$. For $p0$, this forces $a=1$.\n\nBy substituting $a = g(p)$ into equation $(1)$, and using the relation from $(2)$ that $J_{\\mathrm{ATP}}(p,a) = v_{\\mathrm{use}}(a)$, we obtain a single equation for $p$:\n$$\nH(p) = n_p\\, J_{\\mathrm{ETC}}(p) - n_{\\mathrm{ATP}}\\, v_{\\mathrm{use}}(g(p)) - J_{\\mathrm{leak}}(p) = 0\n$$\nThis equation can be solved numerically for $p^\\*$ using a robust root-finding algorithm, such as the Brent-Dekker method. The search interval for $p$ is naturally bounded by $[0, p_{\\max}]$, as $H(0) = n_p V_{\\mathrm{ETC}}  0$ and $H(p_{\\max}) = -n_{\\mathrm{ATP}} v_{\\mathrm{use}}(g(p_{\\max})) - g_{\\mathrm{L}} p_{\\max} \\le 0$, ensuring a root exists within this interval. Once $p^\\*$ is found, the corresponding $a^\\*$ is computed as $a^\\* = g(p^\\*)$.\n\nFor stability analysis, the Jacobian matrix $J$ must be computed at $(p^\\*, a^\\*)$. The elements of the Jacobian, $J_{ij} = \\frac{\\partial f_i}{\\partial x_j}$ (where $x_1=p, x_2=a$), are given by:\n$$\nJ_{11} = \\frac{\\partial f_1}{\\partial p} = \\frac{1}{C}\\left(n_p\\, \\frac{\\partial J_{\\mathrm{ETC}}}{\\partial p} - n_{\\mathrm{ATP}}\\, \\frac{\\partial J_{\\mathrm{ATP}}}{\\partial p} - \\frac{\\partial J_{\\mathrm{leak}}}{\\partial p}\\right)\n$$\n$$\nJ_{12} = \\frac{\\partial f_1}{\\partial a} = \\frac{1}{C}\\left(- n_{\\mathrm{ATP}}\\, \\frac{\\partial J_{\\mathrm{ATP}}}{\\partial a}\\right)\n$$\n$$\nJ_{21} = \\frac{\\partial f_2}{\\partial p} = \\frac{1}{A_{\\mathrm{tot}}}\\left(\\frac{\\partial J_{\\mathrm{ATP}}}{\\partial p}\\right)\n$$\n$$\nJ_{22} = \\frac{\\partial f_2}{\\partial a} = \\frac{1}{A_{\\mathrm{tot}}}\\left(\\frac{\\partial J_{\\mathrm{ATP}}}{\\partial a} - \\frac{\\partial v_{\\mathrm{use}}}{\\partial a}\\right)\n$$\nThe partial derivatives of individual fluxes are provided in the problem statement. After populating the $2 \\times 2$ matrix $J$, its eigenvalues are computed numerically. The steady state is locally asymptotically stable if and only if the real parts of all eigenvalues are strictly negative.\n\nThis complete procedure will be implemented computationally for each of the five parameter sets. The results, consisting of the steady-state P-value $p^\\*$, the ATP fraction $a^\\*$, and the stability verdict, will be formatted as required.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.optimize import root_scalar\n\ndef solve():\n    \"\"\"\n    Computes steady states and their stability for a model of oxidative phosphorylation.\n    \"\"\"\n    # Define the test cases from the problem statement.\n    test_cases = [\n        # (V_ETC, p_max, n_p, g_L, k_ATP, K_p, n_ATP, k_use, K_use, A_tot, C)\n        (4.0, 200.0, 8.0, 0.05, 0.5, 20.0, 3.0, 0.15, 0.2, 1.0, 1.0),\n        (4.0, 200.0, 8.0, 0.20, 0.5, 20.0, 3.0, 0.15, 0.2, 1.0, 1.0),\n        (4.0, 200.0, 8.0, 0.05, 0.5, 20.0, 3.0, 0.0, 0.2, 1.0, 1.0),\n        (4.0, 200.0, 8.0, 0.05, 0.5, 20.0, 3.0, 0.40, 0.2, 1.0, 1.0),\n        (1.0, 200.0, 8.0, 0.05, 0.5, 20.0, 3.0, 0.15, 0.2, 1.0, 1.0),\n    ]\n\n    all_results = []\n    \n    for params in test_cases:\n        V_ETC, p_max, n_p, g_L, k_ATP, K_p, n_ATP, k_use, K_use, A_tot, C = params\n\n        # Find steady state (p*, a*)\n        if k_use == 0:\n            # Special case: zero ATP demand.\n            # J_ATP = 0 implies a=1 for p>0.\n            # Equation f1=0 becomes: n_p * J_ETC - J_leak = 0\n            # n_p * V_ETC * (1 - p/p_max) - g_L * p = 0\n            # n_p * V_ETC = p * (n_p * V_ETC / p_max + g_L)\n            a_star = 1.0\n            denominator = (n_p * V_ETC / p_max + g_L)\n            if denominator == 0:\n                # This physical scenario is unlikely given positive parameters\n                p_star = 0.0 if (n_p * V_ETC == 0) else np.inf\n            else:\n                p_star = (n_p * V_ETC) / denominator\n        else:\n            # General case: non-zero ATP demand\n            def get_a_from_p(p):\n                # Solves J_ATP(p,a) = v_use(a) for 'a' given 'p' by finding roots of a quadratic.\n                if p = 1e-12:  # Avoid division by zero and handle p=0 case\n                    return 0.0\n                \n                C1_p = k_ATP * p / (K_p + p)\n                \n                # Quadratic equation for 'a': A*a^2 + B*a + C_quad = 0\n                A_quad = C1_p\n                B_quad = k_use - C1_p * (1.0 - K_use)\n                C_quad = -C1_p * K_use\n                \n                discriminant = B_quad**2 - 4.0 * A_quad * C_quad\n                if discriminant  0:\n                    # Physically this should not occur.\n                    raise ValueError(\"Negative discriminant encountered.\")\n                \n                # The product of roots C/A is negative, so one is positive, one is negative.\n                # The physical solution for a must be positive.\n                a_sol = (-B_quad + np.sqrt(discriminant)) / (2.0 * A_quad)\n                return a_sol\n\n            def root_function_H(p):\n                # We want to find p such that H(p) = 0, where:\n                # H(p) = n_p*J_ETC(p) - n_ATP*v_use(g(p)) - J_leak(p)\n                # and a = g(p), i.e., a = get_a_from_p(p).\n                \n                if p = 0: # Behavior at the boundary\n                    return n_p * V_ETC\n                \n                a = get_a_from_p(p)\n                \n                J_ETC_val = V_ETC * (1.0 - p / p_max)\n                v_use_val = k_use * a / (K_use + a)\n                J_leak_val = g_L * p\n                \n                return n_p * J_ETC_val - n_ATP * v_use_val - J_leak_val\n\n            # Find p_star using a bounded root-finding algorithm.\n            # Bracket is [epsilon, p_max] to avoid p=0 issues and respect p  p_max.\n            sol = root_scalar(root_function_H, bracket=[1e-9, p_max], method='brentq')\n            p_star = sol.root\n\n            # Compute corresponding a_star\n            a_star = get_a_from_p(p_star)\n\n        # Local stability analysis\n        p, a = p_star, a_star\n\n        # Partial derivatives of fluxes at (p*, a*)\n        dJ_ETC_dp = -V_ETC / p_max\n        dJ_leak_dp = g_L\n        dJ_ATP_dp = k_ATP * (1.0 - a) * K_p / (K_p + p)**2\n        dJ_ATP_da = -k_ATP * p / (K_p + p)\n        dv_use_da = k_use * K_use / (K_use + a)**2 if k_use > 0 else 0\n\n        # Jacobian matrix components\n        J11 = (1.0 / C) * (n_p * dJ_ETC_dp - n_ATP * dJ_ATP_dp - dJ_leak_dp)\n        J12 = (1.0 / C) * (-n_ATP * dJ_ATP_da)\n        J21 = (1.0 / A_tot) * dJ_ATP_dp\n        J22 = (1.0 / A_tot) * (dJ_ATP_da - dv_use_da)\n        \n        jacobian = np.array([[J11, J12], [J21, J22]])\n        \n        # Calculate eigenvalues and check for stability\n        eigenvalues = np.linalg.eigvals(jacobian)\n        is_stable = np.all(np.real(eigenvalues)  0)\n\n        all_results.append([p_star, a_star, is_stable])\n\n    # Format output to match the required specification exactly.\n    # e.g., [[p1,a1,True],[p2,a2,False]] with no spaces.\n    formatted_strings = []\n    for p_val, a_val, stable_val in all_results:\n        p_str = f\"{p_val:.3f}\"\n        a_str = f\"{a_val:.3f}\"\n        stable_str = str(stable_val) # Capitalized True/False for Python bool\n        formatted_strings.append(f\"[{p_str},{a_str},{stable_str}]\")\n    \n    final_output_string = f\"[{','.join(formatted_strings)}]\"\n    \n    print(final_output_string)\n\nsolve()\n```", "id": "2777757"}]}