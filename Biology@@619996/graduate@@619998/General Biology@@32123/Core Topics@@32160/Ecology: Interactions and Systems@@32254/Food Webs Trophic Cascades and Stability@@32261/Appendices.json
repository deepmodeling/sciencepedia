{"hands_on_practices": [{"introduction": "To analyze the complex architecture of ecological communities, we must first learn to describe it quantitatively. Food webs can be represented as networks, where species are nodes and trophic interactions are links. This exercise provides foundational practice in translating a list of interactions into fundamental network metrics, such as degree and strength, which quantify the number and intensity of a species' connections [@problem_id:2799799]. Calculating these values is a crucial first step in identifying structurally important species—or \"hubs\"—that may play a disproportionate role in the food web's overall stability and function.", "problem": "A directed, weighted food web with $4$ species labeled $A$, $B$, $C$, and $D$ is represented by the link list $\\{B \\to C, B \\to D, A \\to B, D \\to A, C \\to A\\}$ with corresponding edge weights $\\{1, 2, 3, 1, 2\\}$. Each directed edge $X \\to Y$ indicates a trophic interaction from species $X$ to species $Y$, with a positive weight indicating interaction strength.\n\nUsing only fundamental definitions from network analysis of food webs:\n- The in-degree $k_{i}^{\\text{in}}$ of species $i$ is the number of distinct edges arriving at $i$.\n- The out-degree $k_{i}^{\\text{out}}$ of species $i$ is the number of distinct edges leaving $i$.\n- The in-strength $s_{i}^{\\text{in}}$ of species $i$ is the sum of the weights of all incoming edges to $i$.\n- The out-strength $s_{i}^{\\text{out}}$ of species $i$ is the sum of the weights of all outgoing edges from $i$.\n\nCompute $k_{i}^{\\text{in}}$, $k_{i}^{\\text{out}}$, $s_{i}^{\\text{in}}$, and $s_{i}^{\\text{out}}$ for each species $i \\in \\{A, B, C, D\\}$. Then, define the composite hubness index for each species by\n$$\nH_{i} \\equiv \\big(k_{i}^{\\text{in}} + k_{i}^{\\text{out}}\\big)\\big(s_{i}^{\\text{in}} + s_{i}^{\\text{out}}\\big).\n$$\nUse these quantities to interpret which species are most likely to act as hubs in this food web. For the final reported result, provide only the maximum hubness value\n$$\nH_{\\max} \\equiv \\max_{i \\in \\{A,B,C,D\\}} H_{i}.\n$$\nNo rounding is required. Provide only the value of $H_{\\max}$ as your final numeric answer.", "solution": "The problem statement is validated as scientifically grounded, well-posed, and objective. It presents a standard network analysis task applied to a simplified food web, with all necessary data and definitions provided unambiguously. We may therefore proceed directly to the solution.\n\nThe food web consists of $4$ species, which we label as nodes in a directed graph: $V = \\{A, B, C, D\\}$. The trophic interactions are given as a set of directed, weighted edges. The link list $\\{B \\to C, B \\to D, A \\to B, D \\to A, C \\to A\\}$ with corresponding weights $\\{1, 2, 3, 1, 2\\}$ defines the network structure. Let $w_{ij}$ be the weight of the edge from species $j$ to species $i$. The given weights are: $w_{CB}=1$, $w_{DB}=2$, $w_{BA}=3$, $w_{AD}=1$, and $w_{AC}=2$. Note the convention: an edge $X \\to Y$ implies that $Y$ preys on $X$, so the energy flows from $X$ to $Y$.\n\nWe will compute the in-degree ($k_{i}^{\\text{in}}$), out-degree ($k_{i}^{\\text{out}}$), in-strength ($s_{i}^{\\text{in}}$), and out-strength ($s_{i}^{\\text{out}}$) for each species $i \\in \\{A, B, C, D\\}$, following the provided definitions.\n\nFor species $A$:\nThe incoming edges are $D \\to A$ and $C \\to A$. Therefore, the in-degree is $k_{A}^{\\text{in}} = 2$.\nThe weights of these incoming edges are $w_{AD} = 1$ and $w_{AC} = 2$. The in-strength is the sum of these weights: $s_{A}^{\\text{in}} = 1 + 2 = 3$.\nThe only outgoing edge is $A \\to B$. Therefore, the out-degree is $k_{A}^{\\text{out}} = 1$.\nThe weight of this outgoing edge is $w_{BA} = 3$. The out-strength is $s_{A}^{\\text{out}} = 3$.\nThe composite hubness index for species $A$ is:\n$$H_{A} = (k_{A}^{\\text{in}} + k_{A}^{\\text{out}})(s_{A}^{\\text{in}} + s_{A}^{\\text{out}}) = (2 + 1)(3 + 3) = (3)(6) = 18$$\n\nFor species $B$:\nThe only incoming edge is $A \\to B$. Therefore, the in-degree is $k_{B}^{\\text{in}} = 1$.\nThe weight of this incoming edge is $w_{BA} = 3$. The in-strength is $s_{B}^{\\text{in}} = 3$.\nThe outgoing edges are $B \\to C$ and $B \\to D$. Therefore, the out-degree is $k_{B}^{\\text{out}} = 2$.\nThe weights of these outgoing edges are $w_{CB} = 1$ and $w_{DB} = 2$. The out-strength is the sum of these weights: $s_{B}^{\\text{out}} = 1 + 2 = 3$.\nThe composite hubness index for species $B$ is:\n$$H_{B} = (k_{B}^{\\text{in}} + k_{B}^{\\text{out}})(s_{B}^{\\text{in}} + s_{B}^{\\text{out}}) = (1 + 2)(3 + 3) = (3)(6) = 18$$\n\nFor species $C$:\nThe only incoming edge is $B \\to C$. Therefore, the in-degree is $k_{C}^{\\text{in}} = 1$.\nThe weight of this incoming edge is $w_{CB} = 1$. The in-strength is $s_{C}^{\\text{in}} = 1$.\nThe only outgoing edge is $C \\to A$. Therefore, the out-degree is $k_{C}^{\\text{out}} = 1$.\nThe weight of this outgoing edge is $w_{AC} = 2$. The out-strength is $s_{C}^{\\text{out}} = 2$.\nThe composite hubness index for species $C$ is:\n$$H_{C} = (k_{C}^{\\text{in}} + k_{C}^{\\text{out}})(s_{C}^{\\text{in}} + s_{C}^{\\text{out}}) = (1 + 1)(1 + 2) = (2)(3) = 6$$\n\nFor species $D$:\nThe only incoming edge is $B \\to D$. Therefore, the in-degree is $k_{D}^{\\text{in}} = 1$.\nThe weight of this incoming edge is $w_{DB} = 2$. The in-strength is $s_{D}^{\\text{in}} = 2$.\nThe only outgoing edge is $D \\to A$. Therefore, the out-degree is $k_{D}^{\\text{out}} = 1$.\nThe weight of this outgoing edge is $w_{AD} = 1$. The out-strength is $s_{D}^{\\text{out}} = 1$.\nThe composite hubness index for species $D$ is:\n$$H_{D} = (k_{D}^{\\text{in}} + k_{D}^{\\text{out}})(s_{D}^{\\text{in}} + s_{D}^{\\text{out}}) = (1 + 1)(2 + 1) = (2)(3) = 6$$\n\nThe calculated hubness indices are $H_{A} = 18$, $H_{B} = 18$, $H_{C} = 6$, and $H_{D} = 6$. The hubness index $H_i$ provides a measure of a species' overall importance in the network, combining its number of connections (total degree) and the magnitude of those connections (total strength). Species $A$ and $B$ have significantly higher hubness scores than $C$ and $D$, indicating they are the central hubs in this food web.\n\nThe final step is to find the maximum hubness value, $H_{\\max}$.\n$$H_{\\max} = \\max_{i \\in \\{A,B,C,D\\}} H_{i} = \\max\\{18, 18, 6, 6\\}$$\nThe maximum value is $18$.", "answer": "$$\\boxed{18}$$", "id": "2799799"}, {"introduction": "Building on a structural description of a food web, we can begin to model its dynamic response to perturbations, such as the removal of a species. This practice introduces an algorithmic approach to simulating secondary extinctions, a critical process underlying food web stability. You will implement a rule-based model where a consumer goes extinct if it loses all its food resources, allowing you to observe how an initial loss can trigger a cascade of further extinctions [@problem_id:2799841]. This computational exercise bridges the gap between the static network structure and its dynamic consequences, providing a clear demonstration of a trophic cascade.", "problem": "You are given a representation of a directed food web with $n$ species as a binary adjacency matrix $A \\in \\{0,1\\}^{n \\times n}$, where $A_{ij} = 1$ if and only if species $i$ consumes species $j$, and $A_{ij} = 0$ otherwise. A species is basal if and only if it has no prey in the original network, that is, if and only if $\\sum_{j=1}^{n} A_{ij} = 0$. A species is a top predator if and only if it is a consumer (has at least one prey) and has no predators, that is, if and only if $\\sum_{j=1}^{n} A_{ij} \\ge 1$ and $\\sum_{i=1}^{n} A_{ij} = 0$.\n\nImplement an algorithm for secondary extinctions under the following rule, based on minimal structural resource feasibility and primary production:\n- Any consumer that currently has no prey among the surviving species goes extinct.\n- Any basal species persists regardless of predator presence or absence, unless it is explicitly removed as part of the initial perturbation.\n\nThe algorithm must operate purely on the structure of the directed graph and proceed as follows. Given an initial set of removed species $R \\subseteq \\{1,2,\\dots,n\\}$, define the survivor set $S$ by starting with $S_0 = \\{1,2,\\dots,n\\} \\setminus R$. Then iteratively compute\n$$\nS_{t+1} \\;=\\; S_t \\setminus \\left\\{\\, i \\in S_t \\,\\middle|\\, \\sum_{j \\in S_t} A_{ij} = 0 \\text{ and } \\sum_{k=1}^{n} A_{ik} \\ge 1 \\,\\right\\} ,\n$$\nthat is, remove from $S_t$ any consumer that has lost all its prey in $S_t$, while never removing basal species due to lack of prey. Repeat until $S_{t+1} = S_t$ and output the final set $S^\\star$ in increasing order of species indices. Species are labeled by $1$ through $n$, and all outputs must use this $1$-based indexing.\n\nYour program must implement this algorithm and apply it to the following test suite. In every case below, $n = 5$ and the adjacency matrix $A$ is specified by its rows, each row being a list of $5$ entries $0$ or $1$. For each test, also an initial set $R$ of removed species is provided. Your program must compute the final survivor list for each test and produce a single line of output containing all survivor lists as a comma-separated list enclosed in square brackets, with no spaces. For example, if there are three tests with survivors $[1,2]$, $[3]$, and $[\\,]$, the single-line output must be exactly `[[1,2],[3],[]]`.\n\nTest suite:\n- Test $1$ (remove a top predator first in a five-species web):\n  $$A = \\begin{bmatrix}\n  0  0  0  0  0 \\\\\n  1  0  0  0  0 \\\\\n  1  1  0  0  0 \\\\\n  0  1  0  0  0 \\\\\n  0  0  1  1  0\n  \\end{bmatrix}$$\n  - $R = \\{5\\}$\n- Test $2$ (a length-$5$ chain, remove the top predator first):\n  $$A = \\begin{bmatrix}\n  0  0  0  0  0 \\\\\n  1  0  0  0  0 \\\\\n  0  1  0  0  0 \\\\\n  0  0  1  0  0 \\\\\n  0  0  0  1  0\n  \\end{bmatrix}$$\n  - $R = \\{5\\}$\n- Test $3$ (two basal species, bottom-up cascade after removing one basal species):\n  $$A = \\begin{bmatrix}\n  0  0  0  0  0 \\\\\n  0  0  0  0  0 \\\\\n  1  0  0  0  0 \\\\\n  0  1  0  0  0 \\\\\n  0  0  1  1  0\n  \\end{bmatrix}$$\n  - $R = \\{1\\}$\n- Test $4$ (all-basal network, remove one species):\n  $$A = \\begin{bmatrix}\n  0  0  0  0  0 \\\\\n  0  0  0  0  0 \\\\\n  0  0  0  0  0 \\\\\n  0  0  0  0  0 \\\\\n  0  0  0  0  0\n  \\end{bmatrix}$$\n  - $R = \\{3\\}$\n- Test $5$ (omnivory with complete collapse after removing the sole basal resource):\n  $$A = \\begin{bmatrix}\n  0  0  0  0  0 \\\\\n  1  0  0  0  0 \\\\\n  1  0  0  0  0 \\\\\n  0  1  1  0  0 \\\\\n  0  1  0  1  0\n  \\end{bmatrix}$$\n  - $R = \\{1\\}$\n\nAnswer specification:\n- For each test, the answer is the list of surviving species indices in increasing order, using $1$-based indexing.\n- Your program must output a single line containing these lists as a comma-separated list enclosed in a single pair of square brackets, with no spaces, in the exact order of the tests above, for example `[[\\cdots],[\\cdots],\\dots]`.", "solution": "The problem statement has been evaluated and is deemed valid. It presents a well-posed, scientifically grounded, and computationally tractable problem in the domain of theoretical ecology. The model for secondary extinctions, while a simplification of complex ecological dynamics, is a standard structural approach based on resource availability. The algorithm is unambiguously defined, and all necessary data for the test cases are provided. There are no contradictions, missing information, or logical flaws that would impede a unique solution.\n\nThe problem requires the implementation of an iterative algorithm to model secondary extinctions in a food web. The food web is represented by an adjacency matrix $A \\in \\{0,1\\}^{n \\times n}$, where $A_{ij} = 1$ signifies that species $i$ consumes species $j$. The number of species is $n$.\n\nFirst, we must distinguish between basal species and consumers. A species $i$ is basal if it has no prey, which is formally stated as $\\sum_{j=1}^{n} A_{ij} = 0$. Conversely, a species is a consumer if it has at least one prey, i.e., $\\sum_{j=1}^{n} A_{ij} \\ge 1$. This distinction is critical, as the extinction rule applies exclusively to consumers. Let us denote the set of all species as $N = \\{1, 2, \\dots, n\\}$ and the set of consumer species as $C = \\{i \\in N \\mid \\sum_{j=1}^{n} A_{ij} \\ge 1\\}$.\n\nThe simulation begins with an initial perturbation, where a set of species $R \\subseteq N$ is removed. The initial set of surviving species is $S_0 = N \\setminus R$. The system then evolves iteratively. At each step $t \\ge 0$, a new set of survivors $S_{t+1}$ is determined by removing species from $S_t$ that can no longer sustain themselves. A consumer species $i \\in S_t \\cap C$ undergoes secondary extinction if all of its prey have been removed from the ecosystem. The set of prey for species $i$ is $P_i = \\{j \\in N \\mid A_{ij} = 1\\}$. The condition for extinction of species $i$ at step $t$ is that it has no prey remaining in the current survivor set $S_t$, which can be stated as $P_i \\cap S_t = \\emptyset$.\n\nThe problem provides a compact mathematical formulation for this check: $\\sum_{j \\in S_t} A_{ij} = 0$. This sum is non-zero if and only if at least one prey $j$ of species $i$ (for which $A_{ij}=1$) is present in $S_t$.\n\nThe iterative update rule is therefore:\n$$\nS_{t+1} = S_t \\setminus D_t,\n$$\nwhere $D_t$ is the set of species that go extinct at step $t$:\n$$\nD_t = \\left\\{ i \\in S_t \\cap C \\,\\middle|\\, \\sum_{j \\in S_t} A_{ij} = 0 \\right\\}.\n$$\nThis process is repeated until no more species are removed in an iteration, i.e., when $D_t = \\emptyset$, which implies $S_{t+1} = S_t$. The final set of survivors is this stable set, $S^\\star$. Since the total number of species $n$ is finite and species are only removed, this process is guaranteed to terminate.\n\nLet us demonstrate this procedure with Test $3$:\n- Adjacency Matrix $A$:\n$$\nA = \\begin{bmatrix}\n0  0  0  0  0 \\\\\n0  0  0  0  0 \\\\\n1  0  0  0  0 \\\\\n0  1  0  0  0 \\\\\n0  0  1  1  0\n\\end{bmatrix}\n$$\n- Initial removal set $R = \\{1\\}$.\n- The set of all species is $N = \\{1, 2, 3, 4, 5\\}$.\n- The initial survivor set is $S_0 = N \\setminus R = \\{2, 3, 4, 5\\}$.\n- The set of consumers is $C = \\{3, 4, 5\\}$, as species $1$ and $2$ have row sums of $0$.\n\nIteration $t=0$:\n- We evaluate the survival of consumers in $S_0$, which are $\\{3, 4, 5\\}$.\n- For species $3 \\in C$: Prey set is $P_3 = \\{1\\}$. We check if any prey are in $S_0$. $P_3 \\cap S_0 = \\{1\\} \\cap \\{2, 3, 4, 5\\} = \\emptyset$. Equivalently, $\\sum_{j \\in S_0} A_{3j} = A_{32}+A_{33}+A_{34}+A_{35} = 0+0+0+0=0$. Species $3$ goes extinct.\n- For species $4 \\in C$: Prey set is $P_4 = \\{2\\}$. We check $P_4 \\cap S_0 = \\{2\\} \\cap \\{2, 3, 4, 5\\} = \\{2\\} \\ne \\emptyset$. Species $4$ survives.\n- For species $5 \\in C$: Prey set is $P_5 = \\{3, 4\\}$. We check $P_5 \\cap S_0 = \\{3, 4\\} \\cap \\{2, 3, 4, 5\\} = \\{3, 4\\} \\ne \\emptyset$. Species $5$ survives.\n- The set of extinctions is $D_0 = \\{3\\}$.\n- The new survivor set is $S_1 = S_0 \\setminus \\{3\\} = \\{2, 4, 5\\}$.\n\nIteration $t=1$:\n- We evaluate the survival of consumers in $S_1$, which are now $\\{4, 5\\}$.\n- For species $4 \\in C$: Prey is $P_4=\\{2\\}$. We check $P_4 \\cap S_1 = \\{2\\} \\cap \\{2, 4, 5\\} = \\{2\\} \\ne \\emptyset$. Species $4$ survives.\n- For species $5 \\in C$: Prey is $P_5=\\{3, 4\\}$. We check $P_5 \\cap S_1 = \\{3, 4\\} \\cap \\{2, 4, 5\\} = \\{4\\} \\ne \\emptyset$. Species $5$ survives.\n- The set of extinctions is $D_1 = \\emptyset$.\n\nSince no species went extinct in this iteration, the system has stabilized. The final survivor set is $S^\\star = S_1 = \\{2, 4, 5\\}$. The correctly formatted output for this test is `[2,4,5]`.\n\nApplying this same rigorous procedure to all test cases yields the following final survivor sets:\n- Test $1$ ($R=\\{5\\}$): $S^\\star = \\{1, 2, 3, 4\\}$\n- Test $2$ ($R=\\{5\\}$): $S^\\star = \\{1, 2, 3, 4\\}$\n- Test $3$ ($R=\\{1\\}$): $S^\\star = \\{2, 4, 5\\}$\n- Test $4$ ($R=\\{3\\}$): $S^\\star = \\{1, 2, 4, 5\\}$\n- Test $5$ ($R=\\{1\\}$): $S^\\star = \\emptyset$\n\nThe implementation will encode this logic, using numerical arrays for efficient computation. The species indices, provided as $1$-based, are handled by converting to $0$-based indices for array operations and converting back for the final output.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef run_extinction_simulation(A, R, n):\n    \"\"\"\n    Simulates secondary extinctions in a food web.\n\n    Args:\n        A (np.ndarray): The n x n adjacency matrix.\n        R (set): The initial set of removed species (1-based).\n        n (int): The number of species.\n\n    Returns:\n        list: A sorted list of surviving species indices (1-based).\n    \"\"\"\n    # 0-based indexing for arrays.\n    # is_consumer[i] is True if species i+1 is a consumer.\n    is_consumer = np.sum(A, axis=1) > 0\n    \n    # Start with a boolean mask representing all species as survivors.\n    survivors_mask = np.ones(n, dtype=bool)\n    \n    # Apply initial removal set R. Convert 1-based R to 0-based indices.\n    if R:\n        initial_removed_indices = [r - 1 for r in R]\n        survivors_mask[initial_removed_indices] = False\n    \n    while True:\n        extinctions_in_step = []\n        \n        # Identify currently surviving consumers to check for extinction.\n        # np.where returns a tuple of arrays; we need the first element.\n        species_to_check = np.where(survivors_mask  is_consumer)[0]\n        \n        if species_to_check.size == 0:\n            # No more consumers left, so no more secondary extinctions are possible.\n            break\n\n        for i in species_to_check:\n            # Check if species i has any prey among the current survivors.\n            # A[i, survivors_mask] selects an array of 0s and 1s corresponding to\n            # the prey of i that are still alive. If the sum is 0, all prey are gone.\n            if np.sum(A[i, survivors_mask]) == 0:\n                extinctions_in_step.append(i)\n        \n        if not extinctions_in_step:\n            # No species went extinct in this step, a stable state is reached.\n            break\n        else:\n            # Remove the extinct species for the next iteration.\n            survivors_mask[extinctions_in_step] = False\n            \n    # Get final survivors' 0-based indices\n    final_survivor_indices_0based = np.where(survivors_mask)[0]\n    \n    # Convert to 1-based indices and return as a sorted list for the final answer.\n    final_survivor_indices_1based = (final_survivor_indices_0based + 1).tolist()\n    \n    return final_survivor_indices_1based\n\ndef solve():\n    # Define the test cases from the problem statement.\n    test_cases = [\n        # Test 1\n        {\n            \"n\": 5,\n            \"A\": np.array([\n                [0, 0, 0, 0, 0],\n                [1, 0, 0, 0, 0],\n                [1, 1, 0, 0, 0],\n                [0, 1, 0, 0, 0],\n                [0, 0, 1, 1, 0]\n            ]),\n            \"R\": {5}\n        },\n        # Test 2\n        {\n            \"n\": 5,\n            \"A\": np.array([\n                [0, 0, 0, 0, 0],\n                [1, 0, 0, 0, 0],\n                [0, 1, 0, 0, 0],\n                [0, 0, 1, 0, 0],\n                [0, 0, 0, 1, 0]\n            ]),\n            \"R\": {5}\n        },\n        # Test 3\n        {\n            \"n\": 5,\n            \"A\": np.array([\n                [0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0],\n                [1, 0, 0, 0, 0],\n                [0, 1, 0, 0, 0],\n                [0, 0, 1, 1, 0]\n            ]),\n            \"R\": {1}\n        },\n        # Test 4\n        {\n            \"n\": 5,\n            \"A\": np.array([\n                [0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0]\n            ]),\n            \"R\": {3}\n        },\n        # Test 5\n        {\n            \"n\": 5,\n            \"A\": np.array([\n                [0, 0, 0, 0, 0],\n                [1, 0, 0, 0, 0],\n                [1, 0, 0, 0, 0],\n                [0, 1, 1, 0, 0],\n                [0, 1, 0, 1, 0]\n            ]),\n            \"R\": {1}\n        }\n    ]\n\n    results = []\n    for case in test_cases:\n        survivors = run_extinction_simulation(case[\"A\"], case[\"R\"], case[\"n\"])\n        results.append(survivors)\n    \n    # Final print statement in the exact required format.\n    # Convert list of lists to string and remove all whitespace.\n    final_output_string = str(results).replace(\" \", \"\")\n    print(final_output_string)\n\nsolve()\n```", "id": "2799841"}, {"introduction": "While structural models provide key insights, a deeper understanding of stability comes from process-based models that describe the mechanisms of population dynamics. The Rosenzweig-MacArthur model is a cornerstone of theoretical ecology, capturing the dynamics of a predator-prey interaction with a realistic, saturating functional response. By analyzing this model [@problem_id:2799822], you will engage with the core methods of dynamical systems analysis: finding equilibria, assessing local stability via the Jacobian matrix, and deriving the conditions for a Hopf bifurcation. This exercise directly connects the mathematical analysis of a model to the famous \"paradox of enrichment,\" a fundamental concept in the study of ecological stability.", "problem": "Consider a predator–prey system described by the Rosenzweig–MacArthur (RM) model with Holling type II functional response. Let prey density be $N$ and predator density be $P$. The governing ordinary differential equations (ODEs) are\n$$\n\\frac{dN}{dt} \\;=\\; r\\,N\\left(1-\\frac{N}{K}\\right) \\;-\\; \\frac{a\\,N}{1+a\\,h\\,N}\\,P,\n\\qquad\n\\frac{dP}{dt} \\;=\\; e\\,\\frac{a\\,N}{1+a\\,h\\,N}\\,P \\;-\\; m\\,P,\n$$\nwhere $r0$ is the prey intrinsic growth rate, $K0$ is the prey carrying capacity, $a0$ is the attack rate, $h0$ is the handling time, $e\\in(0,1]$ is the conversion efficiency, and $m0$ is the predator per-capita mortality rate. Assume parameter values are such that $em\\,h$ so that a strictly positive coexistence equilibrium exists. All parameters are nondimensional.\n\nStarting from these equations (and only well-established definitions and operations on dynamical systems), derive an explicit formula for the critical carrying capacity $K_c$ at which the interior equilibrium loses local stability via a Hopf bifurcation (the paradox of enrichment threshold). Your expression must be given in terms of $a$, $h$, $e$, $r$, and $m$ only.\n\nThen, using $r=1$, $a=0.8$, $h=0.4$, $e=0.6$, and $m=0.2$, compute the numerical value of $K_c$. Finally, determine whether $K=5$ is destabilizing (that is, whether it exceeds the Hopf threshold so that the interior equilibrium is unstable and small-amplitude cycles emerge).\n\nReport your final answer as a two-entry row matrix:\n- First entry: the numerical value of $K_c$ rounded to four significant figures.\n- Second entry: an indicator variable equal to $1$ if $K=5$ is destabilizing and $0$ otherwise.\n\nExpress the numerical entry as a pure number (no units).", "solution": "The problem presented is a standard exercise in the analysis of dynamical systems in mathematical ecology, specifically concerning the Rosenzweig-MacArthur model. The task is to derive the critical carrying capacity at which a Hopf bifurcation occurs, a phenomenon known as the \"paradox of enrichment\".\n\nFirst, let us validate the problem statement.\nThe given system of ordinary differential equations (ODEs) is:\n$$\n\\frac{dN}{dt} = r\\,N\\left(1-\\frac{N}{K}\\right) - \\frac{a\\,N}{1+a\\,h\\,N}\\,P\n$$\n$$\n\\frac{dP}{dt} = e\\,\\frac{a\\,N}{1+a\\,h\\,N}\\,P - m\\,P\n$$\nThe parameters are the prey intrinsic growth rate $r  0$, prey carrying capacity $K  0$, predator attack rate $a  0$, handling time $h  0$, conversion efficiency $e \\in (0, 1]$, and predator mortality rate $m  0$. The condition $e  m\\,h$ is given to ensure the existence of a strictly positive (coexistence) equilibrium. Specific numerical values are provided for a subsequent calculation: $r=1$, $a=0.8$, $h=0.4$, $e=0.6$, and $m=0.2$.\n\nThe problem is scientifically grounded as it concerns a canonical model in theoretical ecology. It is well-posed, with all necessary information provided to derive the requested formula and compute the numerical result. The language is objective and precise. Therefore, the problem is valid, and we may proceed with the solution.\n\nThe first step is to find the coexistence equilibrium point $(N^*, P^*)$ where $N^*  0$ and $P^*  0$. This requires setting both time derivatives to zero.\nFrom the predator equation $\\frac{dP}{dt} = 0$, for $P \\neq 0$, we have:\n$$\ne\\,\\frac{a\\,N^*}{1+a\\,h\\,N^*} - m = 0\n$$\nSolving for $N^*$:\n$$\ne\\,a\\,N^* = m(1+a\\,h\\,N^*) \\implies (e\\,a - m\\,a\\,h)N^* = m \\implies N^* = \\frac{m}{a(e - m\\,h)}\n$$\nThe condition $e  m\\,h$ ensures that $N^*  0$.\n\nNext, we use the prey equation $\\frac{dN}{dt} = 0$ with $N^*  0$:\n$$\nr\\left(1-\\frac{N^*}{K}\\right) - \\frac{a}{1+a\\,h\\,N^*}\\,P^* = 0\n$$\nSolving for $P^*$:\n$$\nP^* = \\frac{r(1+a\\,h\\,N^*)}{a}\\left(1-\\frac{N^*}{K}\\right)\n$$\nFor a coexistence equilibrium, we must have $P^*  0$, which implies $1 - \\frac{N^*}{K}  0$, or $K  N^*$. This means the carrying capacity must be large enough to support a prey population that can, in turn, sustain the predator population.\n\nTo analyze the local stability of this equilibrium, we compute the Jacobian matrix $J$ of the system, evaluated at $(N^*, P^*)$. Let $F(N,P) = \\frac{dN}{dt}$ and $G(N,P) = \\frac{dP}{dt}$. The Jacobian is:\n$$\nJ = \\begin{pmatrix} \\frac{\\partial F}{\\partial N}  \\frac{\\partial F}{\\partial P} \\\\ \\frac{\\partial G}{\\partial N}  \\frac{\\partial G}{\\partial P} \\end{pmatrix}\n$$\nThe partial derivatives are:\n$$\n\\frac{\\partial F}{\\partial N} = r - \\frac{2rN}{K} - \\frac{aP}{(1+ahN)^2}, \\qquad \\frac{\\partial F}{\\partial P} = -\\frac{aN}{1+ahN}\n$$\n$$\n\\frac{\\partial G}{\\partial N} = \\frac{eaP}{(1+ahN)^2}, \\qquad \\frac{\\partial G}{\\partial P} = \\frac{eaN}{1+ahN} - m\n$$\nEvaluating these at the equilibrium $(N^*, P^*)$, we denote the matrix elements as $J_{ij}^*$:\n$J_{22}^* = \\frac{eaN^*}{1+ahN^*} - m = 0$, by definition of $N^*$.\n$J_{12}^* = -\\frac{aN^*}{1+ahN^*} = -\\frac{m}{e}$, using the same equilibrium condition.\n$J_{21}^* = \\frac{eaP^*}{(1+ahN^*)^2}$. Since $e, a, P^*$ are positive, $J_{21}^*  0$.\n$J_{11}^* = r - \\frac{2rN^*}{K} - \\frac{aP^*}{(1+ahN^*)^2}$.\n\nThe characteristic equation for the eigenvalues $\\lambda$ is $\\det(J^* - \\lambda I) = 0$, which yields:\n$$\n\\lambda^2 - \\text{Tr}(J^*)\\lambda + \\det(J^*) = 0\n$$\nwhere $\\text{Tr}(J^*) = J_{11}^* + J_{22}^* = J_{11}^*$ and $\\det(J^*) = J_{11}^*J_{22}^* - J_{12}^*J_{21}^* = -J_{12}^*J_{21}^* = \\frac{m}{e}J_{21}^*$.\nSince $m$, $e$, and $J_{21}^*$ are all positive (for $KN^*$), we have $\\det(J^*)  0$. The equilibrium is therefore a node or a focus. Its stability is determined by the sign of the trace. The equilibrium is locally stable if $\\text{Tr}(J^*)  0$ and unstable if $\\text{Tr}(J^*)  0$.\n\nA Hopf bifurcation occurs when the real part of the complex conjugate eigenvalues crosses zero. For this system, this happens when $\\text{Tr}(J^*) = 0$. We must find the critical carrying capacity $K_c$ at which this condition is met.\nLet us simplify $J_{11}^*$. From the prey nullcline at equilibrium, $r(1 - N^*/K) = \\frac{aP^*}{1+ahN^*}$.\nWe can write $J_{11}^*$ as:\n$$\nJ_{11}^* = r\\left(1-\\frac{N^*}{K}\\right) - \\frac{rN^*}{K} - \\frac{aP^*}{(1+ahN^*)^2}\n$$\nSubstituting the term from the nullcline:\n$$\nJ_{11}^* = \\frac{aP^*}{1+ahN^*} - \\frac{rN^*}{K} - \\frac{aP^*}{(1+ahN^*)^2} = \\frac{aP^*(1+ahN^*) - aP^*}{(1+ahN^*)^2} - \\frac{rN^*}{K} = \\frac{a^2hN^*P^*}{(1+ahN^*)^2} - \\frac{rN^*}{K}\n$$\nFrom the expression for $J_{11}^*$, let's use an alternative simplification which is more direct.\n$J_{11}^* = r - \\frac{2rN^*}{K} - \\frac{1}{1+ahN^*} \\left(\\frac{aP^*}{1+ahN^*}\\right) = r - \\frac{2rN^*}{K} - \\frac{1}{1+ahN^*} \\left(r\\left(1-\\frac{N^*}{K}\\right)\\right)$.\nSetting $J_{11}^* = 0$ for $K=K_c$:\n$$\nr - \\frac{2rN^*}{K_c} - \\frac{r}{1+ahN^*}\\left(1-\\frac{N^*}{K_c}\\right) = 0\n$$\nDividing by $r$ (since $r  0$):\n$$\n\\left(1 - \\frac{1}{1+ahN^*}\\right) = \\frac{2N^*}{K_c} - \\frac{N^*}{K_c(1+ahN^*)}\n$$\n$$\n\\frac{ahN^*}{1+ahN^*} = \\frac{N^*}{K_c}\\left(2 - \\frac{1}{1+ahN^*}\\right) = \\frac{N^*}{K_c}\\left(\\frac{2+2ahN^*-1}{1+ahN^*}\\right)\n$$\nDividing by $\\frac{N^*}{1+ahN^*}$ (since $N^*  0$):\n$$\nah = \\frac{1}{K_c}(1+2ahN^*) \\implies K_c = \\frac{1+2ahN^*}{ah} = \\frac{1}{ah} + 2N^*\n$$\nSubstituting the expression for $N^* = \\frac{m}{a(e-mh)}$:\n$$\nK_c = \\frac{1}{ah} + 2\\frac{m}{a(e-mh)} = \\frac{e-mh + 2mh}{ah(e-mh)} = \\frac{e+mh}{ah(e-mh)}\n$$\nThis is the explicit formula for the critical carrying capacity $K_c$.\nThe paradox of enrichment states that for $KK_c$, the trace becomes positive and the equilibrium becomes unstable, leading to population cycles.\n\nNow, we compute the numerical value of $K_c$ using the given parameters: $r=1$, $a=0.8$, $h=0.4$, $e=0.6$, $m=0.2$.\n$$\nm\\,h = 0.2 \\times 0.4 = 0.08\n$$\n$$\na\\,h = 0.8 \\times 0.4 = 0.32\n$$\n$$\ne+m\\,h = 0.6 + 0.08 = 0.68\n$$\n$$\ne-m\\,h = 0.6 - 0.08 = 0.52\n$$\nSubstituting these into the formula for $K_c$:\n$$\nK_c = \\frac{e+m\\,h}{a\\,h\\,(e-m\\,h)} = \\frac{0.68}{0.32 \\times 0.52} = \\frac{0.68}{0.1664} \\approx 4.086538...\n$$\nRounding to four significant figures, $K_c = 4.087$.\n\nFinally, we determine if $K=5$ is destabilizing. This requires checking if $K  K_c$.\nWe compare $K=5$ with $K_c \\approx 4.087$.\nSince $5  4.087$, the carrying capacity $K=5$ exceeds the Hopf bifurcation threshold. Therefore, the interior equilibrium is unstable at this value, and the system is destabilized. The indicator variable is $1$.\n\nThe final answer is composed of two entries: the numerical value of $K_c$ and the indicator variable.\nFirst entry: $4.087$\nSecond entry: $1$", "answer": "$$\n\\boxed{\n\\begin{pmatrix}\n4.087  1\n\\end{pmatrix}\n}\n$$", "id": "2799822"}]}