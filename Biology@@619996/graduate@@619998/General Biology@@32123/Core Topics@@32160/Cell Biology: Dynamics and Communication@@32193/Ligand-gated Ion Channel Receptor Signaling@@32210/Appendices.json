{"hands_on_practices": [{"introduction": "The most direct way to probe the function of a ligand-gated ion channel is to measure the electrical current passing through a single open pore. This exercise guides you through the analysis of idealized single-channel patch-clamp data to establish the fundamental current-voltage ($I$-$V$) relationship. By applying a form of Ohm's law to the channel, you will learn how to extract two of its most critical biophysical parameters from experimental measurements: the single-channel conductance ($\\gamma$) and the reversal potential ($E_{\\text{rev}}$) [@problem_id:2812344].", "problem": "A single ligand-gated cation channel is recorded in an outside-out patch under symmetrical monovalent ionic conditions with negligible liquid junction potential (LJP). Saturating agonist is applied so that the channel rapidly and repeatedly transitions between closed and open states at several command voltages. For each command voltage $V$, a long stationary segment is acquired at high bandwidth, and an all-points amplitude histogram is constructed. Each histogram is well described by two Gaussian components: a closed-noise component with mean $\\mu_{\\mathrm{c}}(V)$ and standard deviation $\\sigma_{\\mathrm{c}}(V)$, and an open-noise component with mean $\\mu_{\\mathrm{o}}(V)$ and standard deviation $\\sigma_{\\mathrm{o}}(V)$. The single-channel open current amplitude at that voltage is operationally defined as the difference of Gaussian means, $i(V) \\equiv \\mu_{\\mathrm{o}}(V) - \\mu_{\\mathrm{c}}(V)$.\n\nStarting only from core definitions of electrical current, conductance, and electrochemical driving force, and the definition of reversal potential as the voltage at which net current is zero, derive the functional dependence that connects the single-channel current amplitude $i$, the single-channel conductance $\\gamma$, the command voltage $V$, and the reversal potential $E_{\\mathrm{rev}}$. State clearly the physical assumptions required for this relationship to hold over the tested voltage range.\n\nThen, consider the following representative histogram-fit results (means $\\pm$ standard deviations) measured at five voltages:\n- $V = -60\\,\\mathrm{mV}$: $\\mu_{\\mathrm{c}} = -0.02 \\pm 0.10\\,\\mathrm{pA}$, $\\mu_{\\mathrm{o}} = -3.05 \\pm 0.12\\,\\mathrm{pA}$.\n- $V = -40\\,\\mathrm{mV}$: $\\mu_{\\mathrm{c}} = +0.01 \\pm 0.09\\,\\mathrm{pA}$, $\\mu_{\\mathrm{o}} = -2.01 \\pm 0.12\\,\\mathrm{pA}$.\n- $V = -20\\,\\mathrm{mV}$: $\\mu_{\\mathrm{c}} = +0.00 \\pm 0.10\\,\\mathrm{pA}$, $\\mu_{\\mathrm{o}} = -1.01 \\pm 0.11\\,\\mathrm{pA}$.\n- $V = 0\\,\\mathrm{mV}$: $\\mu_{\\mathrm{c}} = +0.00 \\pm 0.10\\,\\mathrm{pA}$, $\\mu_{\\mathrm{o}} = +0.00 \\pm 0.10\\,\\mathrm{pA}$.\n- $V = +20\\,\\mathrm{mV}$: $\\mu_{\\mathrm{c}} = -0.01 \\pm 0.10\\,\\mathrm{pA}$, $\\mu_{\\mathrm{o}} = +0.99 \\pm 0.11\\,\\mathrm{pA}$.\n\nWhich option specifies a correct, assumption-consistent, and statistically appropriate analysis pipeline to estimate $\\gamma$ and $E_{\\mathrm{rev}}$ from such amplitude histograms across voltages, and (applied to the numbers above) reports estimates that are consistent with the data?\n\nA. For each $V$, compute $i(V) = \\mu_{\\mathrm{o}}(V) - \\mu_{\\mathrm{c}}(V)$ and its uncertainty from the Gaussian fits. Regress $i(V)$ against $V$ using weighted least squares (weights proportional to the inverse variance of $i$). Take the slope as $\\gamma$ and the $x$-intercept as $E_{\\mathrm{rev}}$, after confirming linearity and negligible series-resistance error. For the data given, this yields $\\gamma \\approx 0.050\\,\\mathrm{pA/mV} = 50\\,\\mathrm{pS}$ and $E_{\\mathrm{rev}} \\approx 0\\,\\mathrm{mV}$ within small uncertainty.\n\nB. At each $V$, compute the record-wide mean current $\\langle I \\rangle$ and divide by the open probability $\\hat{P}_{\\mathrm{o}}$ obtained from dwell-time idealization to estimate $i(V) = \\langle I \\rangle / \\hat{P}_{\\mathrm{o}}$. Fit $i(V)$ versus $V$ by ordinary least squares constrained to pass through the origin to obtain $\\gamma$; set $E_{\\mathrm{rev}} = 0\\,\\mathrm{mV}$ by construction. Applied here, this gives $\\gamma \\approx 45\\,\\mathrm{pS}$.\n\nC. For each $V$, use the absolute open-peak location $| \\mu_{\\mathrm{o}}(V) |$ as the amplitude. Regress $| i(V) |$ on $| V |$ to avoid negative values and report the slope as $\\gamma$; estimate $E_{\\mathrm{rev}}$ from the $y$-intercept of this fit. Applied here, this yields $\\gamma \\approx 50\\,\\mathrm{pS}$ and $E_{\\mathrm{rev}} \\approx -0.5\\,\\mathrm{mV}$.\n\nD. At each $V$, perform nonstationary noise analysis by binning ensemble responses to estimate the varianceâ€“mean parabola and extract $i(V)$ as the coefficient of the quadratic term. Average the resulting $i(V)$ across voltages and divide by the mean command voltage to obtain $\\gamma$; take $E_{\\mathrm{rev}}$ as the voltage where the variance is minimal. Applied here, this yields $\\gamma \\approx 55\\,\\mathrm{pS}$ and $E_{\\mathrm{rev}} \\approx 0\\,\\mathrm{mV}$.", "solution": "The problem statement will first be validated for scientific soundness and consistency before a solution is attempted.\n\n### Problem Validation\n\n**Step 1: Extract Givens**\n- **System:** A single ligand-gated cation channel.\n- **Experimental preparation:** Outside-out patch clamp.\n- **Ionic conditions:** Symmetrical monovalent ionic conditions.\n- **Potential:** Negligible liquid junction potential (LJP).\n- **Activation:** Saturating agonist concentration, causing rapid transitions.\n- **Measurement:** Long stationary segments at several command voltages $V$, recorded at high bandwidth.\n- **Analysis:** All-points amplitude histograms are constructed for each $V$.\n- **Histogram model:** Each histogram is described by two Gaussian components:\n    - Closed state: mean $\\mu_{\\mathrm{c}}(V)$, standard deviation $\\sigma_{\\mathrm{c}}(V)$.\n    - Open state: mean $\\mu_{\\mathrm{o}}(V)$, standard deviation $\\sigma_{\\mathrm{o}}(V)$.\n- **Operational definition:** Single-channel current amplitude is $i(V) \\equiv \\mu_{\\mathrm{o}}(V) - \\mu_{\\mathrm{c}}(V)$.\n- **Task 1:** Derive the functional relationship connecting single-channel current $i$, single-channel conductance $\\gamma$, command voltage $V$, and reversal potential $E_{\\mathrm{rev}}$, starting from core definitions.\n- **Task 2:** State the physical assumptions required for this relationship.\n- **Task 3:** Analyze provided data and evaluate options.\n- **Data:** Representative histogram-fit results (means $\\pm$ standard deviations of the Gaussian components):\n    - $V = -60\\,\\mathrm{mV}$: $\\mu_{\\mathrm{c}} = -0.02 \\pm 0.10\\,\\mathrm{pA}$, $\\mu_{\\mathrm{o}} = -3.05 \\pm 0.12\\,\\mathrm{pA}$.\n    - $V = -40\\,\\mathrm{mV}$: $\\mu_{\\mathrm{c}} = +0.01 \\pm 0.09\\,\\mathrm{pA}$, $\\mu_{\\mathrm{o}} = -2.01 \\pm 0.12\\,\\mathrm{pA}$.\n    - $V = -20\\,\\mathrm{mV}$: $\\mu_{\\mathrm{c}} = +0.00 \\pm 0.10\\,\\mathrm{pA}$, $\\mu_{\\mathrm{o}} = -1.01 \\pm 0.11\\,\\mathrm{pA}$.\n    - $V = 0\\,\\mathrm{mV}$: $\\mu_{\\mathrm{c}} = +0.00 \\pm 0.10\\,\\mathrm{pA}$, $\\mu_{\\mathrm{o}} = +0.00 \\pm 0.10\\,\\mathrm{pA}$.\n    - $V = +20\\,\\mathrm{mV}$: $\\mu_{\\mathrm{c}} = -0.01 \\pm 0.10\\,\\mathrm{pA}$, $\\mu_{\\mathrm{o}} = +0.99 \\pm 0.11\\,\\mathrm{pA}$.\n\n**Step 2: Validate Using Extracted Givens**\n- **Scientifically Grounded:** The problem describes a standard, well-established experimental protocol in biophysics (single-channel patch-clamp electrophysiology) and uses standard terminology and concepts. The setup is scientifically realistic.\n- **Well-Posed:** The problem provides sufficient information and a clear objective: derive a theoretical relationship and then apply it to analyze a given dataset to find physical parameters. The structure is logical and leads to a unique solution.\n- **Objective:** The language is technical, precise, and devoid of subjective or ambiguous statements.\n- **Consistency and Completeness:** The problem is self-contained. The provided data for symmetrical ionic conditions (which implies $E_{\\mathrm{rev}} \\approx 0\\,\\mathrm{mV}$) are consistent with the measurement at $V=0\\,\\mathrm{mV}$ where $i(V) \\approx 0\\,\\mathrm{pA}$. No contradictions or missing critical information are found.\n\n**Step 3: Verdict and Action**\nThe problem statement is valid. A solution will now be derived.\n\n### Derivation and Solution\n\n**Part 1: Derivation of the Current-Voltage Relationship**\n\nThe net flow of ions through a channel pore is driven by the electrochemical potential difference across the membrane. This net driving force is the difference between the electrical potential (membrane voltage, $V$) and the equilibrium potential for the ion species, also known as the reversal potential, $E_{\\mathrm{rev}}$.\n\nThe reversal potential, $E_{\\mathrm{rev}}$, is the voltage at which the net current through the channel is zero. By definition, at $V = E_{\\mathrm{rev}}$, the electrical and chemical potential gradients are exactly balanced, resulting in zero net flux.\n\nThe magnitude of the single-channel current, $i$, is proportional to the magnitude of the net electrochemical driving force. The constant of proportionality is the single-channel conductance, $\\gamma$. This constitutes a generalized form of Ohm's Law for an ion channel.\n\nMathematically, this is expressed as:\n$$i(V) = \\gamma (V - E_{\\mathrm{rev}})$$\nThis equation describes the current-voltage ($I-V$) relationship for a single channel. It is a linear function of $V$, where $\\gamma$ is the slope and $E_{\\mathrm{rev}}$ is the voltage-axis intercept (the voltage at which $i(V)=0$).\n\n**Part 2: Physical Assumptions**\n\nFor the relationship $i(V) = \\gamma (V - E_{\\mathrm{rev}})$ to be valid over a range of voltages, the following assumptions must hold:\n\n1.  **Ohmic Behavior:** The single-channel conductance, $\\gamma$, must be constant and independent of the membrane voltage $V$ and the direction of ion flow. If $\\gamma$ depends on $V$, the channel is said to rectify, and the $I-V$ relationship will be non-linear. The derived linear equation assumes no rectification.\n2.  **Constant Reversal Potential:** The reversal potential, $E_{\\mathrm{rev}}$, must be constant across the tested range of voltages. This requires that the ionic concentrations on both sides of the patch membrane remain stable throughout the experiment, which is a standard condition in patch-clamp recordings. The problem states \"symmetrical monovalent ionic conditions,\" which, according to the Nernst equation, implies $E_{\\mathrm{rev}} = \\frac{RT}{zF} \\ln\\frac{[C]_{\\mathrm{out}}}{[C]_{\\mathrm{in}}} = \\frac{RT}{zF} \\ln(1) = 0\\,\\mathrm{mV}$. Our analysis should therefore find an $E_{\\mathrm{rev}}$ close to this theoretical value.\n3.  **Accurate Voltage Clamp:** The command voltage $V$ must accurately represent the true transmembrane potential. This implies that the voltage drop across the series resistance of the pipette tip and electrode is negligible. Significant series resistance would cause the true membrane potential to deviate from the command potential, introducing a systematic error and potentially making the observed $I-V$ curve appear sub-linear at large currents.\n\n**Part 3: Data Analysis and Option Evaluation**\n\nFirst, we compute the single-channel current amplitude, $i(V)$, for each voltage using the operational definition $i(V) = \\mu_{\\mathrm{o}}(V) - \\mu_{\\mathrm{c}}(V)$. The uncertainty (standard deviation) of $i(V)$, denoted $\\sigma_{i}$, is found by propagating the uncertainties of the means, $\\sigma_{\\mu_o}$ and $\\sigma_{\\mu_c}$. Assuming these uncertainties from the fit are independent, their variances add: $\\sigma_{i}^2 = \\sigma_{\\mu_o}^2 + \\sigma_{\\mu_c}^2$. The values presented as '$\\pm$ standard deviations' are interpreted as the standard errors on the fitted means.\n\n-   $V = -60\\,\\mathrm{mV}$:\n    $i = (-3.05) - (-0.02) = -3.03\\,\\mathrm{pA}$\n    $\\sigma_{i}^2 = (0.12)^2 + (0.10)^2 = 0.0144 + 0.01 = 0.0244 \\implies \\sigma_i \\approx 0.156\\,\\mathrm{pA}$\n\n-   $V = -40\\,\\mathrm{mV}$:\n    $i = (-2.01) - (0.01) = -2.02\\,\\mathrm{pA}$\n    $\\sigma_{i}^2 = (0.12)^2 + (0.09)^2 = 0.0144 + 0.0081 = 0.0225 \\implies \\sigma_i = 0.150\\,\\mathrm{pA}$\n\n-   $V = -20\\,\\mathrm{mV}$:\n    $i = (-1.01) - (0.00) = -1.01\\,\\mathrm{pA}$\n    $\\sigma_{i}^2 = (0.11)^2 + (0.10)^2 = 0.0121 + 0.01 = 0.0221 \\implies \\sigma_i \\approx 0.149\\,\\mathrm{pA}$\n\n-   $V = 0\\,\\mathrm{mV}$:\n    $i = (0.00) - (0.00) = 0.00\\,\\mathrm{pA}$\n    $\\sigma_{i}^2 = (0.10)^2 + (0.10)^2 = 0.01 + 0.01 = 0.0200 \\implies \\sigma_i \\approx 0.141\\,\\mathrm{pA}$\n\n-   $V = +20\\,\\mathrm{mV}$:\n    $i = (0.99) - (-0.01) = 1.00\\,\\mathrm{pA}$\n    $\\sigma_{i}^2 = (0.11)^2 + (0.10)^2 = 0.0121 + 0.01 = 0.0221 \\implies \\sigma_i \\approx 0.149\\,\\mathrm{pA}$\n\nThe data points $(V, i)$ are: $(-60, -3.03)$, $(-40, -2.02)$, $(-20, -1.01)$, $(0, 0.00)$, $(20, 1.00)$. These points are exceptionally linear. A linear regression of $i$ versus $V$ will yield the slope $\\gamma$ and the intercept, from which $E_{\\mathrm{rev}}$ can be calculated. Given the non-uniform uncertainties, a weighted least squares (WLS) regression is the statistically correct method, with weights $w_k = 1/\\sigma_{i,k}^2$.\n\nA simple inspection shows the slope is approximately $\\frac{\\Delta i}{\\Delta V} = \\frac{1.00 - (-3.03)}{20 - (-60)} = \\frac{4.03}{80} = 0.050375\\,\\mathrm{pA/mV}$, which is $50.375\\,\\mathrm{pS}$. The data point $(0, 0.00)$ indicates that the line passes through the origin, so the voltage-axis intercept is $E_{\\mathrm{rev}} = 0\\,\\mathrm{mV}$.\n\nNow we evaluate each option:\n\n**A. For each $V$, compute $i(V) = \\mu_{\\mathrm{o}}(V) - \\mu_{\\mathrm{c}}(V)$ and its uncertainty from the Gaussian fits. Regress $i(V)$ against $V$ using weighted least squares (weights proportional to the inverse variance of $i$). Take the slope as $\\gamma$ and the $x$-intercept as $E_{\\mathrm{rev}}$, after confirming linearity and negligible series-resistance error. For the data given, this yields $\\gamma \\approx 0.050\\,\\mathrm{pA/mV} = 50\\,\\mathrm{pS}$ and $E_{\\mathrm{rev}} \\approx 0\\,\\mathrm{mV}$ within small uncertainty.**\n- **Analysis Pipeline:** This describes the precisely correct procedure. It uses the provided definition for $i(V)$, correctly identifies the regression model $i(V)$ vs. $V$, employs the statistically optimal method (WLS), and correctly interprets the slope as $\\gamma$ and the x-intercept as $E_{\\mathrm{rev}}$. It also correctly notes the need to check for linearity (which the data clearly satisfies) and potential artifacts like series resistance.\n- **Reported Values:** The estimated values $\\gamma \\approx 50\\,\\mathrm{pS}$ and $E_{\\mathrm{rev}} \\approx 0\\,\\mathrm{mV}$ are in excellent agreement with our independent calculation from the provided data.\n- **Verdict:** **Correct**.\n\n**B. At each $V$, compute the record-wide mean current $\\langle I \\rangle$ and divide by the open probability $\\hat{P}_{\\mathrm{o}}$ obtained from dwell-time idealization to estimate $i(V) = \\langle I \\rangle / \\hat{P}_{\\mathrm{o}}$. Fit $i(V)$ versus $V$ by ordinary least squares constrained to pass through the origin to obtain $\\gamma$; set $E_{\\mathrm{rev}} = 0\\,\\mathrm{mV}$ by construction. Applied here, this gives $\\gamma \\approx 45\\,\\mathrm{pS}$.**\n- **Analysis Pipeline:** This describes an alternative method of analysis that is inconsistent with the problem statement, which mandates using the results from amplitude histograms. Dwell-time idealization is a different technique. Furthermore, constraining the fit to pass through the origin assumes $E_{\\mathrm{rev}} = 0\\,\\mathrm{mV}$ apriori,preventing an independent estimate and verification. Using ordinary least squares is statistically suboptimal compared to weighted least squares.\n- **Reported Values:** The reported conductance $\\gamma \\approx 45\\,\\mathrm{pS}$ is inconsistent with the result from the provided histogram data ($ \\approx 50\\,\\mathrm{pS}$).\n- **Verdict:** **Incorrect**.\n\n**C. For each $V$, use the absolute open-peak location $| \\mu_{\\mathrm{o}}(V) |$ as the amplitude. Regress $| i(V) |$ on $| V |$ to avoid negative values and report the slope as $\\gamma$; estimate $E_{\\mathrm{rev}}$ from the $y$-intercept of this fit. Applied here, this yields $\\gamma \\approx 50\\,\\mathrm{pS}$ and $E_{\\mathrm{rev}} \\approx -0.5\\,\\mathrm{mV}$.**\n- **Analysis Pipeline:** This procedure is fundamentally flawed. The current amplitude is the *difference* between open and closed levels, $i(V) = \\mu_o(V) - \\mu_c(V)$, not $|\\mu_o(V)|$. Taking absolute values of current and voltage, $|i(V)|$ and $|V|$, discards essential information about the direction of current flow and artificially forces the data into the first quadrant, corrupting the linear relationship. The interpretation of fit parameters from such a distorted regression is not physically meaningful.\n- **Reported Values:** While the value for $\\gamma$ appears close by coincidence, the methodology is scientifically invalid.\n- **Verdict:** **Incorrect**.\n\n**D. At each $V$, perform nonstationary noise analysis by binning ensemble responses to estimate the varianceâ€“mean parabola and extract $i(V)$ as the coefficient of the quadratic term. Average the resulting $i(V)$ across voltages and divide by the mean command voltage to obtain $\\gamma$; take $E_{\\mathrm{rev}}$ as the voltage where the variance is minimal. Applied here, this yields $\\gamma \\approx 55\\,\\mathrm{pS}$ and $E_{\\mathrm{rev}} \\approx 0\\,\\mathrm{mV}$.**\n- **Analysis Pipeline:** This describes nonstationary fluctuation analysis, a technique for studying large ensembles of channels (e.g., whole-cell currents) with time-varying open probability. It is completely inappropriate for a stationary recording of a single channel, as described in the problem. The method for calculating $\\gamma$ by averaging currents and voltages is ad hoc and incorrect.\n- **Reported Values:** The methodology is wrong for this experimental context, and the resulting $\\gamma$ is inconsistent with the data.\n- **Verdict:** **Incorrect**.", "answer": "$$\\boxed{A}$$", "id": "2812344"}, {"introduction": "While single-channel recordings reveal the properties of the open pore, understanding how a ligand activates the channel requires studying the collective response of a channel population to varying agonist concentrations. This practice introduces the celebrated Monod-Wyman-Changeux (MWC) model, a cornerstone for describing allosteric regulation and cooperativity in multi-subunit receptors. You will implement a nonlinear regression analysis to fit the MWC model to dose-response data, extracting key parameters that quantify agonist efficacy and allosteric modulation [@problem_id:2812331].", "problem": "A ligand-gated ion channel is modeled as a two-state Monodâ€“Wymanâ€“Changeux (MWC) system with a closed (tense) state and an open (relaxed) state. The receptor has $n$ identical and independent binding sites for an agonist ligand with concentration $A$ (units: micromolar), and $q$ identical and independent binding sites for an allosteric modulator with concentration $M$ (units: micromolar). The closed-to-open conformational equilibrium constant in the absence of any ligand is $L_0$. The agonist binds the closed state with dissociation constant $K_C$ and the open state with dissociation constant $K_O$. Define $c$ as the affinity ratio $c = K_O / K_C$. The modulator binds the closed state with dissociation constant $K_{MC}$ and the open state with dissociation constant $K_{MO}$. Define the modulator coupling factor to the open state as $\\phi = K_{MO} / K_{MC}$. Open probability is a dimensionless quantity.\n\nFundamental base for derivation: In the MWC framework, the statistical weight of a macrostate is proportional to the product of its conformational weight and its binding polynomial for each ligand. The open probability equals the open-state weight divided by the total weight (sum of open and closed weights). The binding polynomial for $n$ identical independent sites with ligand concentration $x$ and dissociation constant $K$ is $\\left(1 + \\frac{x}{K}\\right)^n$. The conformational bias in the absence of ligand is set by $L_0$.\n\nTask:\n1) Starting from the binding polynomial principle and the definition of $L_0$, derive an explicit expression for the open probability as a function of $A$, $M$, $L_0$, $c$, $K_C$, $K_{MC}$, $n$, $q$, and $\\phi$. Then use this expression to perform nonlinear least squares regression to estimate $L_0$, $c$, and $\\phi$ from each dataset provided below.\n2) For each dataset, treat $K_C$, $K_{MC}$, $n$, $q$, and $M$ as known constants. Estimate $L_0$, $c$, and $\\phi$ by jointly fitting the open probability measured across agonist concentrations in two conditions: without modulator and with modulator at the specified $M$.\n3) All concentrations are in micromolar (ÂµM). Open probabilities are dimensionless and unitless. Your program must output the final estimated parameters for each dataset as real numbers rounded to five digits after the decimal point.\n4) Final output format: Your program should produce a single line of output containing the results as a comma-separated list of lists, where each inner list corresponds to one dataset in the order given and contains the three estimated parameters $[L_0, c, \\phi]$. For example: \"[[0.12345,0.23456,0.34567],[...],[...]]\".\n5) Angle units are not applicable. Do not output percentages; express all results as decimals.\n\nTest suite (three datasets). For each dataset, the tuple is: known constants, agonist concentrations, measured open probabilities without modulator, measured open probabilities with modulator.\n\nDataset 1 (happy path; moderate cooperativity, strong agonist, positive modulator):\n- Known constants: $n = 2$, $q = 1$, $K_C = 10$, $K_{MC} = 10$, $M = 10$.\n- Agonist concentrations (ÂµM): $[0, 10, 30, 40, 90]$.\n- Open probability without modulator: $\\left[\\frac{1}{301}, \\frac{1}{49}, \\frac{169}{4969}, \\frac{289}{7789}, \\frac{1369}{31369}\\right]$.\n- Open probability with modulator: $\\left[\\frac{1}{101}, \\frac{1}{17}, \\frac{169}{1769}, \\frac{289}{2789}, \\frac{1369}{11369}\\right]$.\n\nDataset 2 (boundary case; weak agonist, positive modulator):\n- Known constants: $n = 2$, $q = 1$, $K_C = 10$, $K_{MC} = 10$, $M = 10$.\n- Agonist concentrations (ÂµM): $[0, 10, 30, 90]$.\n- Open probability without modulator: $\\left[\\frac{1}{201}, \\frac{81}{12881}, \\frac{361}{51561}, \\frac{2401}{322401}\\right]$.\n- Open probability with modulator: $\\left[\\frac{11}{411}, \\frac{891}{26491}, \\frac{3971}{106371}, \\frac{26411}{666411}\\right]$.\n\nDataset 3 (edge case; high cooperativity, strong agonist, strong positive modulator):\n- Known constants: $n = 4$, $q = 1$, $K_C = 10$, $K_{MC} = 10$, $M = 5$.\n- Agonist concentrations (ÂµM): $[0, 1, 10]$.\n- Open probability without modulator: $\\left[\\frac{1}{31}, \\frac{160000}{599230}, \\frac{14641}{15121}\\right]$.\n- Open probability with modulator: $\\left[\\frac{11}{56}, \\frac{1760000}{2418845}, \\frac{161051}{161771}\\right]$.\n\nRequirements:\n- Derive the open probability expression from first principles as described.\n- Implement nonlinear regression to estimate $L_0$, $c$, and $\\phi$ for each dataset by minimizing the sum of squared residuals across both conditions simultaneously.\n- Use the constants as given per dataset; do not estimate them.\n- Output a single line: a list of three lists, each inner list containing $[L_0, c, \\phi]$ for one dataset, rounded to five digits after the decimal point, in the order Dataset $1$, Dataset $2$, Dataset $3$.", "solution": "The problem requires the derivation of the open probability for a two-state Monodâ€“Wymanâ€“Changeux (MWC) receptor model and the subsequent application of this model to estimate key parameters from provided datasets using nonlinear least squares regression. The problem has been validated and is determined to be scientifically sound, well-posed, and internally consistent.\n\n**1. Derivation of the Open Probability Expression**\n\nThe MWC model assumes a receptor can exist in two principal conformations: a closed (tense, $C$) state and an open (relaxed, $O$) state. The equilibrium between these states is influenced by the binding of ligands.\n\nThe system is defined by the following parameters:\n- $n$: The number of identical, independent binding sites for an agonist ligand.\n- $A$: The concentration of the agonist.\n- $K_C$ and $K_O$: The dissociation constants for the agonist binding to the closed and open states, respectively. The affinity ratio is defined as $c = K_O / K_C$.\n- $q$: The number of identical, independent binding sites for an allosteric modulator.\n- $M$: The concentration of the modulator.\n- $K_{MC}$ and $K_{MO}$: The dissociation constants for the modulator binding to the closed and open states, respectively. The coupling factor is defined as $\\phi = K_{MO} / K_{MC}$.\n- $L_0$: The allosteric constant, defined as the ratio of the total number of receptors in the closed state to the total number in the open state in the absence of any ligands. The problem statement gives this as $L_0 = \\frac{[\\text{Closed}]}{[\\text{Open}]}$. Let us designate the unliganded closed and open states as $R_C$ and $R_O$. Then $L_0 = [R_C]/[R_O]$.\n\nAccording to the MWC framework, the statistical weight of a macroscopic state is proportional to the product of its intrinsic conformational weight and its ligand-binding polynomials. We can assign a reference weight of $1$ to the unliganded open state, $R_O$. Consequently, the weight of the unliganded closed state, $R_C$, is $L_0$.\n\nThe binding polynomial for a ligand with concentration $x$ binding to $k$ identical and independent sites with dissociation constant $K$ is given by $\\left(1 + \\frac{x}{K}\\right)^k$.\n\nThe total statistical weight of the ensemble of all closed states, $W_C$, is the product of the intrinsic weight of the closed conformation ($L_0$) and the binding polynomials for both the agonist and the modulator.\n$$\nW_C = L_0 \\left(1 + \\frac{A}{K_C}\\right)^n \\left(1 + \\frac{M}{K_{MC}}\\right)^q\n$$\n\nSimilarly, the total statistical weight of the ensemble of all open states, $W_O$, is the product of the intrinsic weight of the open conformation ($1$) and its corresponding binding polynomials.\n$$\nW_O = 1 \\cdot \\left(1 + \\frac{A}{K_O}\\right)^n \\left(1 + \\frac{M}{K_{MO}}\\right)^q\n$$\n\nThe probability of the receptor being in an open state, $P_{open}$, is the ratio of the total weight of the open states to the sum of the total weights of both open and closed states.\n$$\nP_{open} = \\frac{W_O}{W_C + W_O} = \\frac{\\left(1 + \\frac{A}{K_O}\\right)^n \\left(1 + \\frac{M}{K_{MO}}\\right)^q}{L_0 \\left(1 + \\frac{A}{K_C}\\right)^n \\left(1 + \\frac{M}{K_{MC}}\\right)^q + \\left(1 + \\frac{A}{K_O}\\right)^n \\left(1 + \\frac{M}{K_{MO}}\\right)^q}\n$$\n\nSubstitute the defined ratios $c = K_O / K_C$ and $\\phi = K_{MO} / K_{MC}$. This means $K_O = c K_C$ and $K_{MO} = \\phi K_{MC}$. The expression for $P_{open}$ becomes a function of the parameters to be estimated ($L_0, c, \\phi$) and the known constants.\n$$\nP_{open}(A, M; L_0, c, \\phi) = \\frac{\\left(1 + \\frac{A}{c K_C}\\right)^n \\left(1 + \\frac{M}{\\phi K_{MC}}\\right)^q}{L_0 \\left(1 + \\frac{A}{K_C}\\right)^n \\left(1 + \\frac{M}{K_{MC}}\\right)^q + \\left(1 + \\frac{A}{c K_C}\\right)^n \\left(1 + \\frac{M}{\\phi K_{MC}}\\right)^q}\n$$\n\nA more convenient form for analysis is obtained by dividing the numerator and denominator by the $W_O$ term:\n$$\nP_{open} = \\frac{1}{1 + \\frac{W_C}{W_O}} = \\frac{1}{1 + L_0 \\frac{\\left(1 + A/K_C\\right)^n \\left(1 + M/K_{MC}\\right)^q}{\\left(1 + A/(c K_C)\\right)^n \\left(1 + M/(\\phi K_{MC})\\right)^q}}\n$$\nThis can be rewritten as:\n$$\nP_{open}(A, M; L_0, c, \\phi) = \\left[1 + L_0 \\left(\\frac{1 + A/K_C}{1 + A/(c K_C)}\\right)^n \\left(\\frac{1 + M/K_{MC}}{1 + M/(\\phi K_{MC})}\\right)^q\\right]^{-1}\n$$\nThis is the final expression used for the numerical fitting.\n\n**2. Parameter Estimation via Nonlinear Least Squares Regression**\n\nThe task is to estimate the parameters $\\theta = (L_0, c, \\phi)$ for each dataset. Each dataset provides measured open probabilities at several agonist concentrations $A_j$ under two conditions: without modulator ($M=0$) and with a fixed modulator concentration ($M0$). This requires a joint fit to both data series simultaneously.\n\nThe method of least squares is employed to find the parameter values that minimize the sum of squared residuals (SSR) between the model's predictions and the experimental data. The SSR is defined as:\n$$\n\\text{SSR}(\\theta) = \\sum_{j} \\left( P_{open}(A_j, 0; \\theta) - P_{open, j}^{\\text{data}, M=0} \\right)^2 + \\sum_{j} \\left( P_{open}(A_j, M_{const}; \\theta) - P_{open, j}^{\\text{data}, M0} \\right)^2\n$$\nwhere the sum is over all agonist concentration points $j$ in the dataset.\n\nThe optimization is performed using `scipy.optimize.least_squares` from the SciPy library. This function is designed to solve nonlinear least-squares problems and is well-suited for this task. It operates on a vector of residuals, not the SSR itself. The residual vector, $r(\\theta)$, is constructed by concatenating the residuals from both experimental conditions:\n$$\nr(\\theta) = \\begin{bmatrix}\nP_{open}(A_1, 0; \\theta) - P_{open, 1}^{\\text{data}, M=0} \\\\\n\\vdots \\\\\nP_{open}(A_N, 0; \\theta) - P_{open, N}^{\\text{data}, M=0} \\\\\nP_{open}(A_1, M_{const}; \\theta) - P_{open, 1}^{\\text{data}, M0} \\\\\n\\vdots \\\\\nP_{open}(A_N, M_{const}; \\theta) - P_{open, N}^{\\text{data}, M0}\n\\end{bmatrix}\n$$\nwhere $N$ is the number of agonist concentration points.\n\nThe `least_squares` function iteratively adjusts the parameters $\\theta$ to minimize the sum of the squares of the elements in this vector, $\\sum r_i^2$. For robustness, bounds are placed on the parameters to ensure they remain in a physically meaningful range (i.e., $L_0  0$, $c  0$, and $\\phi  0$). A lower bound of a small positive number (e.g., $10^{-9}$) is used to prevent division by zero and maintain physical relevance. An initial guess for the parameters is also required to start the iterative minimization process.\n\n**3. Implementation**\n\nThe solution is implemented in Python. A function `mwc_model` is defined to calculate $P_{open}$ based on the derived equation. A second function, `residuals`, computes the residual vector for a given set of parameters. This function is passed to `scipy.optimize.least_squares`. The main script iterates through the three provided datasets, performs the fit for each one, collects the estimated parameters, formats them to five decimal places, and prints the final result in the specified list-of-lists format. The exact fractional data provided is converted to floating-point numbers for numerical computation. Analysis of the provided data shows it is perfectly anaytic, which suggests the algorithm should converge to the exact parameters used to generate the data.", "answer": "```python\nimport numpy as np\nfrom scipy.optimize import least_squares\nfrom fractions import Fraction\n\ndef solve():\n    \"\"\"\n    Solves for MWC model parameters for three datasets using nonlinear least squares regression.\n    \"\"\"\n    \n    # Test suite with three datasets\n    # Structure: (known_constants, agonist_concentrations, P_open_no_mod, P_open_with_mod)\n    # known_constants: n, q, KC, KMC, M\n    test_cases = [\n        {\n            \"constants\": (2, 1, 10.0, 10.0, 10.0),\n            \"A_data\": np.array([0, 10, 30, 40, 90], dtype=float),\n            \"P_open_no_mod\": np.array([Fraction(1, 301), Fraction(1, 49), Fraction(169, 4969), Fraction(289, 7789), Fraction(1369, 31369)], dtype=float),\n            \"P_open_with_mod\": np.array([Fraction(1, 101), Fraction(1, 17), Fraction(169, 1769), Fraction(289, 2789), Fraction(1369, 11369)], dtype=float)\n        },\n        {\n            \"constants\": (2, 1, 10.0, 10.0, 10.0),\n            \"A_data\": np.array([0, 10, 30, 90], dtype=float),\n            \"P_open_no_mod\": np.array([Fraction(1, 201), Fraction(81, 12881), Fraction(361, 51561), Fraction(2401, 322401)], dtype=float),\n            \"P_open_with_mod\": np.array([Fraction(11, 411), Fraction(891, 26491), Fraction(3971, 106371), Fraction(26411, 666411)], dtype=float)\n        },\n        {\n            \"constants\": (4, 1, 10.0, 10.0, 5.0),\n            \"A_data\": np.array([0, 1, 10], dtype=float),\n            \"P_open_no_mod\": np.array([Fraction(1, 31), Fraction(160000, 599230), Fraction(14641, 15121)], dtype=float),\n            \"P_open_with_mod\": np.array([Fraction(11, 56), Fraction(1760000, 2418845), Fraction(161051, 161771)], dtype=float)\n        }\n    ]\n\n    def mwc_model(params, A, M, n, q, KC, KMC):\n        \"\"\"\n        Calculates the open probability based on the MWC model.\n        \n        Args:\n            params (tuple): A tuple or list of parameters (L0, c, phi) to be estimated.\n            A (float or np.ndarray): Agonist concentration(s).\n            M (float): Modulator concentration.\n            n (int): Number of agonist binding sites.\n            q (int): Number of modulator binding sites.\n            KC (float): Agonist dissociation constant for the closed state.\n            KMC (float): Modulator dissociation constant for the closed state.\n        \n        Returns:\n            float or np.ndarray: The calculated open probability(ies).\n        \"\"\"\n        L0, c, phi = params\n        \n        # To prevent division by zero or negative values for c and phi\n        c = max(c, 1e-12)\n        phi = max(phi, 1e-12)\n\n        # Numerator of the L_eff term\n        term_agonist_C = (1 + A / KC)**n\n        term_modulator_C = (1 + M / KMC)**q\n        \n        # Denominator of the L_eff term\n        term_agonist_O = (1 + A / (c * KC))**n\n        term_modulator_O = (1 + M / (phi * KMC))**q\n        \n        p_open = 1.0 / (1.0 + L0 * (term_agonist_C * term_modulator_C) / (term_agonist_O * term_modulator_O))\n        \n        return p_open\n\n    def residuals(params, A_data, P_open_no_mod, P_open_with_mod, constants):\n        \"\"\"\n        Calculates the residuals for the least-squares fit.\n        This function is passed to scipy.optimize.least_squares.\n        \"\"\"\n        n, q, KC, KMC, M = constants\n        \n        # Calculate model predictions for both conditions\n        pred_no_mod = mwc_model(params, A_data, 0, n, q, KC, KMC)\n        pred_with_mod = mwc_model(params, A_data, M, n, q, KC, KMC)\n        \n        # Calculate residuals for both conditions and concatenate them\n        res_no_mod = pred_no_mod - P_open_no_mod\n        res_with_mod = pred_with_mod - P_open_with_mod\n        \n        return np.concatenate((res_no_mod, res_with_mod))\n\n    results = []\n    for case in test_cases:\n        constants = case[\"constants\"]\n        A_data = case[\"A_data\"]\n        P_open_no_mod = case[\"P_open_no_mod\"]\n        P_open_with_mod = case[\"P_open_with_mod\"]\n\n        # Initial guess for parameters [L0, c, phi]\n        initial_guess = [100.0, 0.5, 0.5]\n        \n        # Bounds for parameters (must be positive)\n        bounds = ([1e-9, 1e-9, 1e-9], [np.inf, np.inf, np.inf])\n\n        # Perform the non-linear least squares regression\n        fit_result = least_squares(\n            residuals,\n            initial_guess,\n            bounds=bounds,\n            args=(A_data, P_open_no_mod, P_open_with_mod, constants)\n        )\n        \n        # Extract estimated parameters\n        L0_est, c_est, phi_est = fit_result.x\n        \n        # Store rounded results\n        results.append([round(L0_est, 5), round(c_est, 5), round(phi_est, 5)])\n\n    # Format output as a list of lists string\n    formatted_results = []\n    for r in results:\n        formatted_results.append(f\"[{r[0]:.5f},{r[1]:.5f},{r[2]:.5f}]\")\n    \n    final_output_string = f\"[{','.join(formatted_results)}]\"\n    print(final_output_string)\n\nsolve()\n```", "id": "2812331"}, {"introduction": "Ligand-gated ion channels are not static switches; they exhibit complex dynamics, including desensitization, where the channel enters a non-conductive state even in the continued presence of an agonist. This computational exercise delves into the kinetics of recovery from desensitization using a powerful state-based modeling approach. You will construct a continuous-time Markov model and use its mathematical properties to connect the microscopic rates of transition between desensitized states to the macroscopic, experimentally observable time course of recovery [@problem_id:2812334].", "problem": "You are tasked with building a principled computational model for recovery from desensitization in ligand-gated ion channels (LGIC) using a paired-pulse protocol. The fundamental base you must use is first-order mass-action kinetics for state occupancy probabilities under a continuous-time Markov process and the consequence that such linear systems evolve under a matrix exponential, yielding sums of exponentials governed by the eigenvalues of the transition-rate matrix. The biological interpretation to use is: after the first saturating pulse, channels predominantly occupy desensitized states; during the interpulse interval with no ligand, channels undergo first-order transitions that either keep them within the desensitized manifold or return them to the closed (available) manifold. The amplitude of the second pulse (for a saturating stimulus) is proportional to the fraction of channels that have returned to the available manifold by the end of the interpulse interval. Your program must translate this into a mathematically sound calculation to extract exponential components from the desensitized-manifold dynamics and map each time constant to an underlying transition mode.\n\nDefinitions and modeling assumptions to use:\n- Let $n$ denote the number of desensitized states. Let $\\mathbf{p}_D(t) \\in \\mathbb{R}^n$ be the vector of occupation probabilities of the desensitized states at time $t$ during the interpulse interval (no agonist present), with initial condition $\\mathbf{p}_D(0)$ determined by the first pulse, satisfying $\\sum_{i=1}^n p_{D,i}(0) = 1$ and no occupation outside the desensitized manifold at $t=0$ for simplicity.\n- Let $k_{iC} \\ge 0$ be the first-order exit rate constant from desensitized state $i$ to the closed (available) manifold. Let $k_{ij} \\ge 0$ ($i \\ne j$) be the interconversion rate constant from desensitized state $i$ to desensitized state $j$.\n- The desensitized-manifold dynamics between pulses follow $d\\mathbf{p}_D/dt = \\mathbf{M}\\,\\mathbf{p}_D$, where $\\mathbf{M}$ is the $n \\times n$ rate matrix with diagonal entries $M_{ii} = -\\left(k_{iC} + \\sum_{j \\ne i} k_{ij}\\right)$ and off-diagonal entries $M_{ij} = k_{ji}$ for $i \\ne j$.\n- The fraction that remains desensitized at time $t$ is $S(t) = \\mathbf{1}^\\top \\mathbf{p}_D(t)$, where $\\mathbf{1}$ is the $n$-vector of ones. The paired-pulse amplitude ratio at an interpulse interval $\\Delta t$ (second pulse over first pulse) under saturating pulses is $R(\\Delta t) = 1 - S(\\Delta t)$.\n\nTasks your program must perform for each provided test case:\n1. From the given rates and initial condition, construct $\\mathbf{M}$ and compute the exponential components of $S(t)$ as a sum of $m$ exponentials, $S(t) = \\sum_{i=1}^m B_i \\exp\\left(-t/\\tau_i\\right)$, where $m$ is the number of distinct negative eigenvalues of $\\mathbf{M}$, each time constant is $\\tau_i  0$, and $B_i$ are real weights such that $\\sum_i B_i = 1$. You must sort components so that $\\tau_i$ are in ascending order (fastest to slowest).\n2. Map each $\\tau_i$ to an underlying transition mode by computing a right eigenvector of $\\mathbf{M}$ for the associated eigenvalue and returning the $1$-based index $L_i \\in \\{1,\\dots,n\\}$ of the desensitized state whose absolute eigenvector component has the largest magnitude (that is, the state most represented in that eigenmode). In the case $n=1$, return $L_1 = 1$.\n3. For each specified set of interpulse intervals $\\{\\Delta t_k\\}$, compute $R(\\Delta t_k) = 1 - \\sum_{i=1}^m B_i \\exp\\left(-\\Delta t_k/\\tau_i\\right)$.\n4. Report all time constants $\\tau_i$ in milliseconds (ms) and round all floating-point outputs to $6$ decimal places. All integer outputs must be exact integers.\n\nTest suite to implement:\n- Case A (single desensitized state; happy path): $n = 1$, $k_{1C} = 0.1\\,\\text{ms}^{-1}$, initial occupancy $\\mathbf{p}_D(0) = [1.0]$, recovery intervals $\\{\\Delta t\\} = \\{1.0, 10.0, 100.0\\}\\,\\text{ms}$.\n- Case B (two independent desensitized states; separation of time scales): $n = 2$, $k_{1C} = 0.2\\,\\text{ms}^{-1}$, $k_{2C} = 0.02\\,\\text{ms}^{-1}$, $k_{12} = 0.0\\,\\text{ms}^{-1}$, $k_{21} = 0.0\\,\\text{ms}^{-1}$, initial occupancy $\\mathbf{p}_D(0) = [\\alpha, 1-\\alpha]$ with $\\alpha = 0.3$, recovery intervals $\\{\\Delta t\\} = \\{1.0, 5.0, 50.0\\}\\,\\text{ms}$.\n- Case C (two desensitized states with interconversion; coupled modes): $n = 2$, $k_{1C} = 0.05\\,\\text{ms}^{-1}$, $k_{2C} = 0.005\\,\\text{ms}^{-1}$, $k_{12} = 0.03\\,\\text{ms}^{-1}$, $k_{21} = 0.01\\,\\text{ms}^{-1}$, initial occupancy $\\mathbf{p}_D(0) = [\\alpha, 1-\\alpha]$ with $\\alpha = 0.8$, recovery intervals $\\{\\Delta t\\} = \\{1.0, 10.0, 100.0\\}\\,\\text{ms}$.\n\nRequired final output format:\n- Your program should produce a single line of output containing a top-level list with one sublist per test case, in the same order as above. For each test case, output a list structured as\n  [$m$, $\\tau_1$, $B_1$, $L_1$, $\\tau_2$, $B_2$, $L_2$, $\\dots$, followed by the sequence $R(\\Delta t_k)$ for the given $\\Delta t_k$ values in the order they are provided].\n- All $\\tau_i$ and $R(\\Delta t_k)$ values must be rounded to $6$ decimal places and expressed in milliseconds for time constants; the amplitude ratios $R(\\Delta t_k)$ are unitless real numbers. The labels $L_i$ and the component count $m$ must be integers.\n- Example of the overall structure (illustrative only; not the actual numbers): [[$m$, $\\tau_1$, $B_1$, $L_1$, ..., $R(\\Delta t_1)$, ...], [...], [...]].", "solution": "The user's problem statement has been critically validated and is deemed valid. It is scientifically grounded in the principles of chemical kinetics and biophysics, specifically the modeling of ion channel dynamics using continuous-time Markov models. The problem is well-posed, with all necessary parameters, initial conditions, and mathematical definitions provided to compute a unique solution. The language is objective and the tasks are computationally specific. There are no contradictions, ambiguities, or factual errors. I will, therefore, proceed with a complete solution.\n\nThe core of the problem is to solve the system of linear ordinary differential equations $\\frac{d\\mathbf{p}_D}{dt} = \\mathbf{M}\\,\\mathbf{p}_D(t)$ with a given initial condition $\\mathbf{p}_D(0)$, and from its solution, derive kinetic parameters. Here, $\\mathbf{p}_D(t)$ is the vector of occupation probabilities for $n$ desensitized states. The matrix $\\mathbf{M}$ is the rate matrix governing transitions within the desensitized manifold and exits to the closed (available) state.\n\nThe solution to this system is given by the matrix exponential:\n$$\n\\mathbf{p}_D(t) = e^{\\mathbf{M}t} \\mathbf{p}_D(0)\n$$\n\nTo analyze the solution in terms of exponential decays, we perform an eigendecomposition of the matrix $\\mathbf{M}$. Since $\\mathbf{M}$ describes a physical kinetic system, it is guaranteed to have real, non-positive eigenvalues. Let $\\lambda_i$ be the eigenvalues and $\\mathbf{v}_i$ be the corresponding right eigenvectors of $\\mathbf{M}$. The matrix of eigenvectors $\\mathbf{V} = [\\mathbf{v}_1, \\mathbf{v}_2, \\dots, \\mathbf{v}_n]$ forms a basis.\n\nWe can express the initial state vector $\\mathbf{p}_D(0)$ in this basis:\n$$\n\\mathbf{p}_D(0) = \\sum_{i=1}^n c_i \\mathbf{v}_i = \\mathbf{V}\\mathbf{c}\n$$\nThe coefficients $c_i$ are found by solving this linear system: $\\mathbf{c} = \\mathbf{V}^{-1}\\mathbf{p}_D(0)$.\n\nThe time evolution of the state vector is then:\n$$\n\\mathbf{p}_D(t) = e^{\\mathbf{M}t} \\sum_{i=1}^n c_i \\mathbf{v}_i = \\sum_{i=1}^n c_i e^{\\mathbf{M}t} \\mathbf{v}_i = \\sum_{i=1}^n c_i e^{\\lambda_i t} \\mathbf{v}_i\n$$\nThe quantity of interest is the total probability of remaining in any desensitized state, $S(t) = \\mathbf{1}^\\top \\mathbf{p}_D(t)$, where $\\mathbf{1}$ is a vector of ones.\n$$\nS(t) = \\mathbf{1}^\\top \\left( \\sum_{i=1}^n c_i e^{\\lambda_i t} \\mathbf{v}_i \\right) = \\sum_{i=1}^n (c_i \\cdot (\\mathbf{1}^\\top \\mathbf{v}_i)) e^{\\lambda_i t}\n$$\nThis is a sum of exponentials. We match this to the form given in the problem, $S(t) = \\sum_{i=1}^m B_i e^{-t/\\tau_i}$.\nBy comparison, we identify:\n1.  The time constants $\\tau_i = -1/\\lambda_i$ for each distinct negative eigenvalue $\\lambda_i$.\n2.  The amplitudes (weights) $B_i = c_i \\cdot (\\mathbf{1}^\\top \\mathbf{v}_i)$. The sum of these weights $\\sum_i B_i = S(0) = \\mathbf{1}^\\top \\mathbf{p}_D(0)$, which is specified to be $1$.\n\nThe algorithmic procedure for each test case is as follows:\n\n1.  **Construct the Rate Matrix $\\mathbf{M}$**: Based on the provided rate constants ($k_{iC}$, $k_{ij}$), the $n \\times n$ matrix $\\mathbf{M}$ is constructed according to its definition: $M_{ii} = -\\left(k_{iC} + \\sum_{j \\ne i} k_{ij}\\right)$ and $M_{ij} = k_{ji}$ for $i \\ne j$. Note the index transposition for off-diagonal elements.\n\n2.  **Perform Eigendecomposition**: Using numerical linear algebra, compute the eigenvalues $\\lambda_i$ and the corresponding right eigenvectors $\\mathbf{v}_i$ of $\\mathbf{M}$. For this physical system, eigenvalues are real and non-positive, so eigenvectors can also be taken as real.\n\n3.  **Calculate Modal Contributions**:\n    a.  Solve the linear system $\\mathbf{V}\\mathbf{c} = \\mathbf{p}_D(0)$ to find the coefficients $\\mathbf{c}$.\n    b.  For each eigenmode $i$ corresponding to a negative eigenvalue $\\lambda_i$:\n        i.  Calculate the time constant $\\tau_i = -1/\\lambda_i$.\n        ii. Calculate the amplitude $B_i = c_i \\cdot \\sum_{j=1}^n v_{j,i}$, where $v_{j,i}$ is the $j$-th component of eigenvector $\\mathbf{v}_i$.\n        iii. Identify the dominant state $L_i$ for this mode by finding the $1$-based index of the state corresponding to the largest absolute value in the eigenvector $\\mathbf{v}_i$. That is, $L_i = \\arg\\max_j |\\mathbf{v}_{j,i}| + 1$.\n\n4.  **Sort and Assemble Components**: The computed components $(\\tau_i, B_i, L_i)$ are sorted in ascending order of the time constants $\\tau_i$. The number of components, $m$, is the count of distinct negative eigenvalues.\n\n5.  **Calculate Recovery Ratios**: For each given interpulse interval $\\Delta t_k$, the recovery ratio $R(\\Delta t_k)$ is computed as $R(\\Delta t_k) = 1 - S(\\Delta t_k)$, where $S(\\Delta t_k) = \\sum_{i=1}^m B_i \\exp(-\\Delta t_k / \\tau_i)$.\n\n6.  **Format Output**: All calculated floating-point values are rounded to $6$ decimal places as required. The final results for each case are collected into a list, and these lists are aggregated into a top-level list for the final output.\n\nThis procedure will be implemented in Python using the `numpy` library for numerical computations.", "answer": "```python\nimport numpy as np\n\ndef solve_single_case(n, k_C, k_inter, p0, delta_ts):\n    \"\"\"\n    Solves a single test case for LGIC desensitization recovery.\n\n    Args:\n        n (int): Number of desensitized states.\n        k_C (list): List of first-order exit rates k_iC (0-indexed).\n        k_inter (dict): Dictionary of interconversion rates {(i, j): k_ij} (1-based keys).\n        p0 (list): Initial occupation probability vector.\n        delta_ts (list): List of interpulse intervals.\n\n    Returns:\n        list: A list containing the formatted results for the case.\n    \"\"\"\n    p0 = np.array(p0)\n    delta_ts = np.array(delta_ts)\n\n    # 1. Construct the rate matrix M (using 0-based indexing internally)\n    M = np.zeros((n, n))\n    for i in range(n):\n        sum_k_ij_out = 0.0\n        for j in range(n):\n            if i != j:\n                # Off-diagonal M_ij = k_ji (using 1-based logic from problem)\n                M[i, j] = k_inter.get((j + 1, i + 1), 0.0)\n                # Sum of outgoing rates from state i, for the diagonal\n                sum_k_ij_out += k_inter.get((i + 1, j + 1), 0.0)\n        # Diagonal M_ii = -(k_iC + sum_j k_ij)\n        M[i, i] = -(k_C[i] + sum_k_ij_out)\n    \n    # 2. Perform Eigendecomposition\n    # Eigenvalues of such rate matrices are real and non-positive.\n    # We use .real to discard numerical noise in the imaginary part.\n    eigenvalues, eigenvectors = np.linalg.eig(M)\n    eigenvalues = eigenvalues.real\n    eigenvectors = eigenvectors.real\n\n    # 3. Calculate modal contributions\n    # Find coefficients c for initial condition: V*c = p0\n    coeffs = np.linalg.solve(eigenvectors, p0).real\n    \n    components = []\n    \n    # Filter for indices corresponding to negative eigenvalues\n    valid_indices = np.where(eigenvalues  -1e-12)[0]\n    \n    for i in valid_indices:\n        lam = eigenvalues[i]\n        tau = -1.0 / lam\n        \n        v = eigenvectors[:, i]\n        c = coeffs[i]\n        \n        # Amplitude B_i = c_i * (1^T * v_i)\n        B = c * np.sum(v)\n        \n        # Dominant state L_i (1-based index)\n        if n == 1:\n            L = 1\n        else:\n            L = np.argmax(np.abs(v)) + 1\n            \n        components.append({'tau': tau, 'B': B, 'L': L})\n\n    # 4. Sort components by time constant\n    components.sort(key=lambda x: x['tau'])\n    \n    m = len(components)\n    \n    # Assemble the result list\n    result_list = [m]\n    for comp in components:\n        result_list.extend([\n            round(comp['tau'], 6),\n            round(comp['B'], 6),\n            int(comp['L'])\n        ])\n        \n    # 5. Calculate recovery ratios R(dt)\n    for dt in delta_ts:\n        S_dt = 0.0\n        for comp in components:\n            S_dt += comp['B'] * np.exp(-dt / comp['tau'])\n        \n        R_dt = 1.0 - S_dt\n        result_list.append(round(R_dt, 6))\n        \n    return result_list\n\ndef solve():\n    \"\"\"\n    Main function to define test cases and generate the final output.\n    \"\"\"\n    # Define the test suite from the problem statement.\n    test_cases = [\n        {\n            \"n\": 1,\n            \"k_C\": [0.1],\n            \"k_inter\": {},\n            \"p0\": [1.0],\n            \"delta_ts\": [1.0, 10.0, 100.0]\n        },\n        {\n            \"n\": 2,\n            \"k_C\": [0.2, 0.02],\n            \"k_inter\": {(1, 2): 0.0, (2, 1): 0.0},\n            \"p0\": [0.3, 0.7],\n            \"delta_ts\": [1.0, 5.0, 50.0]\n        },\n        {\n            \"n\": 2,\n            \"k_C\": [0.05, 0.005],\n            \"k_inter\": {(1, 2): 0.03, (2, 1): 0.01},\n            \"p0\": [0.8, 0.2],\n            \"delta_ts\": [1.0, 10.0, 100.0]\n        }\n    ]\n\n    results = []\n    for case in test_cases:\n        case_result = solve_single_case(\n            case['n'],\n            case['k_C'],\n            case['k_inter'],\n            case['p0'],\n            case['delta_ts']\n        )\n        results.append(case_result)\n\n    # Final print statement in the exact required format.\n    output_parts = []\n    for case_res in results:\n        case_parts = []\n        for item in case_res:\n            if isinstance(item, float):\n                case_parts.append(f\"{item:.6f}\")\n            else:\n                case_parts.append(str(item))\n        output_parts.append(\"[\" + \",\".join(case_parts) + \"]\")\n    final_output_string = \"[\" + \",\".join(output_parts) + \"]\"\n    print(final_output_string)\n\nsolve()\n```", "id": "2812334"}]}