{"hands_on_practices": [{"introduction": "A primary challenge for endotherms in cold environments is minimizing heat loss from poorly insulated appendages. This exercise [@problem_id:2607229] provides a foundational model for quantifying this process by applying the principles of steady-state heat transfer. By idealizing a limb as a composite cylinder, you will use Fourier’s law to derive the heat flux, thereby building a quantitative understanding of how layers of tissue and insulation contribute to overall thermal resistance.", "problem": "Regional heterothermy in endothermic animals reduces heat loss from extremities by maintaining cooler limb surfaces while preserving core temperature. Consider a cylindrical limb segment whose cross-section can be idealized as two concentric annuli: an inner perfused tissue layer of thermal conductivity $k_1$ surrounding a central artery held at core temperature, and an outer insulation layer (subcutaneous fat and integument) of thermal conductivity $k_2$. Assume steady-state radial heat conduction with no internal heat generation, negligible axial gradients, and that strong environmental coupling pins the outer surface temperature at ambient. Starting from Fourier’s law, derive the expression for the steady heat loss per unit length, $q'$ (in $\\mathrm{W\\,m^{-1}}$), from the core to the environment through the composite cylinder.\n\nUse the following geometry and material properties to evaluate $q'$ numerically:\n- Inner isothermal boundary (arterial core) at radius $r_i = 0.003\\,\\mathrm{m}$ with temperature $T_c = 36\\,^{\\circ}\\mathrm{C}$.\n- Interface between tissue and insulation at radius $r_m = 0.010\\,\\mathrm{m}$.\n- Outer isothermal boundary (skin pinned to ambient) at radius $r_o = 0.020\\,\\mathrm{m}$ with temperature $T_a = 0\\,^{\\circ}\\mathrm{C}$.\n- Thermal conductivities: $k_1 = 0.5\\,\\mathrm{W\\,m^{-1}\\,K^{-1}}$ (tissue) and $k_2 = 0.04\\,\\mathrm{W\\,m^{-1}\\,K^{-1}}$ (insulation).\n\nExpress your final result for $q'$ in $\\mathrm{W\\,m^{-1}}$ and round your answer to three significant figures.", "solution": "The problem presented is a standard exercise in steady-state heat conduction and is scientifically sound, well-posed, and objective. It is therefore deemed valid and a solution will be provided.\n\nThe problem requires the derivation of the heat loss per unit length, $q'$, from a composite cylindrical limb. This is a problem of one-dimensional, steady-state heat conduction in the radial direction. We begin with Fourier's law of heat conduction, which in cylindrical coordinates for radial heat flow is given by:\n$$q_r = -k A_r \\frac{dT}{dr}$$\nwhere $q_r$ is the radial heat transfer rate, $k$ is the thermal conductivity, $A_r$ is the area normal to the heat flow, and $\\frac{dT}{dr}$ is the temperature gradient. For a cylinder of length $L$, the area is $A_r = 2\\pi r L$.\n\nThe heat loss per unit length is defined as $q' = \\frac{q_r}{L}$. Substituting this into Fourier's law yields:\n$$q' L = -k (2\\pi r L) \\frac{dT}{dr}$$\n$$q' = -2\\pi r k \\frac{dT}{dr}$$\nThis equation is a first-order ordinary differential equation for temperature $T$ as a function of radius $r$. To find the temperature drop across a cylindrical shell, we separate variables and integrate.\n$$\\frac{q'}{2\\pi k} \\frac{dr}{r} = -dT$$\nFor a single layer of material with constant thermal conductivity $k$ between an inner radius $r_{in}$ and an outer radius $r_{out}$, with corresponding temperatures $T_{in}$ and $T_{out}$, the integration proceeds as follows:\n$$\\frac{q'}{2\\pi k} \\int_{r_{in}}^{r_{out}} \\frac{dr}{r} = -\\int_{T_{in}}^{T_{out}} dT$$\n$$\\frac{q'}{2\\pi k} [\\ln(r)]_{r_{in}}^{r_{out}} = -[T]_{T_{in}}^{T_{out}}$$\n$$\\frac{q'}{2\\pi k} (\\ln(r_{out}) - \\ln(r_{in})) = -(T_{out} - T_{in})$$\n$$q' \\frac{\\ln(r_{out}/r_{in})}{2\\pi k} = T_{in} - T_{out}$$\nThis can be expressed using the concept of thermal resistance per unit length, $R'$, where $q' = \\frac{\\Delta T}{R'}$. For a cylindrical shell, the thermal resistance per unit length is:\n$$R' = \\frac{\\ln(r_{out}/r_{in})}{2\\pi k}$$\nThe system described is a composite cylinder with two layers arranged in series. The heat must flow sequentially through the inner tissue layer and then the outer insulation layer. Therefore, the total thermal resistance per unit length, $R'_{total}$, is the sum of the individual resistances of each layer.\n\nLayer $1$ (tissue) spans from radius $r_i$ to $r_m$ with thermal conductivity $k_1$. Its resistance per unit length is:\n$$R'_1 = \\frac{\\ln(r_m/r_i)}{2\\pi k_1}$$\nLayer $2$ (insulation) spans from radius $r_m$ to $r_o$ with thermal conductivity $k_2$. Its resistance per unit length is:\n$$R'_2 = \\frac{\\ln(r_o/r_m)}{2\\pi k_2}$$\nThe total resistance is the sum:\n$$R'_{total} = R'_1 + R'_2 = \\frac{\\ln(r_m/r_i)}{2\\pi k_1} + \\frac{\\ln(r_o/r_m)}{2\\pi k_2}$$\nThe total heat loss per unit length, $q'$, is driven by the overall temperature difference between the core, $T_c$, and the ambient environment, $T_a$, across the total thermal resistance:\n$$q' = \\frac{T_c - T_a}{R'_{total}} = \\frac{T_c - T_a}{\\frac{\\ln(r_m/r_i)}{2\\pi k_1} + \\frac{\\ln(r_o/r_m)}{2\\pi k_2}}$$\nThis can be rearranged into the final analytical expression:\n$$q' = \\frac{2\\pi (T_c - T_a)}{\\frac{1}{k_1}\\ln\\left(\\frac{r_m}{r_i}\\right) + \\frac{1}{k_2}\\ln\\left(\\frac{r_o}{r_m}\\right)}$$\nThis is the required expression for the steady heat loss per unit length.\n\nNow, we evaluate this expression numerically using the provided data:\n- Inner radius $r_i = 0.003\\,\\mathrm{m}$\n- Interface radius $r_m = 0.010\\,\\mathrm{m}$\n- Outer radius $r_o = 0.020\\,\\mathrm{m}$\n- Core temperature $T_c = 36\\,^{\\circ}\\mathrm{C}$\n- Ambient temperature $T_a = 0\\,^{\\circ}\\mathrm{C}$\n- Tissue conductivity $k_1 = 0.5\\,\\mathrm{W\\,m^{-1}\\,K^{-1}}$\n- Insulation conductivity $k_2 = 0.04\\,\\mathrm{W\\,m^{-1}\\,K^{-1}}$\n\nThe temperature difference is $\\Delta T = T_c - T_a = 36\\,^{\\circ}\\mathrm{C} - 0\\,^{\\circ}\\mathrm{C} = 36\\,\\mathrm{K}$. Note that a temperature difference in Celsius is numerically identical to a temperature difference in Kelvin.\n\nWe substitute the values into the derived formula:\n$$q' = \\frac{2\\pi (36\\,\\mathrm{K})}{\\frac{1}{0.5\\,\\mathrm{W\\,m^{-1}\\,K^{-1}}}\\ln\\left(\\frac{0.010\\,\\mathrm{m}}{0.003\\,\\mathrm{m}}\\right) + \\frac{1}{0.04\\,\\mathrm{W\\,m^{-1}\\,K^{-1}}}\\ln\\left(\\frac{0.020\\,\\mathrm{m}}{0.010\\,\\mathrm{m}}\\right)}$$\nFirst, calculate the terms in the denominator:\n$$ \\frac{1}{k_1}\\ln\\left(\\frac{r_m}{r_i}\\right) = \\frac{1}{0.5}\\ln\\left(\\frac{10}{3}\\right) = 2 \\ln\\left(\\frac{10}{3}\\right) \\approx 2 \\times 1.20397 \\approx 2.40794\\,\\mathrm{m\\,K\\,W^{-1}} $$\n$$ \\frac{1}{k_2}\\ln\\left(\\frac{r_o}{r_m}\\right) = \\frac{1}{0.04}\\ln\\left(\\frac{2}{1}\\right) = 25 \\ln(2) \\approx 25 \\times 0.69315 \\approx 17.32875\\,\\mathrm{m\\,K\\,W^{-1}} $$\nThe sum of the denominator terms is:\n$$ 2.40794 + 17.32875 = 19.73669\\,\\mathrm{m\\,K\\,W^{-1}} $$\nNow, calculate the numerator:\n$$ 2\\pi (T_c - T_a) = 2\\pi (36) = 72\\pi \\approx 226.19467\\,\\mathrm{K} $$\nFinally, compute $q'$:\n$$ q' = \\frac{226.19467\\,\\mathrm{K}}{19.73669\\,\\mathrm{m\\,K\\,W^{-1}}} \\approx 11.46069\\,\\mathrm{W\\,m^{-1}} $$\nRounding the result to three significant figures, as requested, gives:\n$$ q' \\approx 11.5\\,\\mathrm{W\\,m^{-1}} $$\nThis value represents the rate of heat energy lost to the environment for every meter of the limb's length under the specified steady-state conditions.", "answer": "$$\\boxed{11.5}$$", "id": "2607229"}, {"introduction": "Having examined the physics of regional heat conservation, we now turn to temporal heterothermy. The energetic benefits of daily torpor are not universal and are strongly dependent on an animal's body mass, a concept explored in this exercise [@problem_id:2607232]. You will apply fundamental allometric scaling laws for heat loss and energy assimilation to construct a daily energy budget, allowing you to calculate the critical body mass at which the costs of rewarming and lost foraging time outweigh the energy saved during torpor.", "problem": "A small endothermic mammal exhibits temporal heterothermy via daily torpor. Assume the following fundamental biophysical bases and ecological scalings hold.\n\n1. Newton’s law of cooling: the steady heat loss power at rest is proportional to the temperature gradient times surface area. For an isometric body, surface area scales with mass to the two-thirds power, so the resting thermogenic power needed to maintain a body temperature $T_b$ in ambient temperature $T_a$ is\n$$\nP_{\\text{rest}}(M,T_b,T_a) \\;=\\; k_s \\, M^{2/3} \\, (T_b - T_a),\n$$\nwhere $M$ is body mass and $k_s$ is an effective whole-body heat loss conductance that already incorporates regional heterothermy effects (for example, vasoconstriction) and fur insulation.\n\n2. Heat capacity of tissues: the energy required to warm the body from temperature $T_1$ to $T_2$ is\n$$\nE_{\\text{warm}} \\;=\\; c_b \\, M \\, (T_2 - T_1),\n$$\nwhere $c_b$ is the effective specific heat capacity of the animal’s body.\n\n3. Net energy assimilation rate during activity scales with body mass as\n$$\nr(M) \\;=\\; r_0 \\, M^{3/4},\n$$\nreflecting time-limited foraging and handling constraints that scale sublinearly with $M$.\n\nConsider a $24$-hour day in a constant ambient environment with $T_a = 5\\,^{\\circ}\\mathrm{C}$. The normothermic body temperature is $T_N = 37\\,^{\\circ}\\mathrm{C}$, and torpor is shallow with $T_T = 15\\,^{\\circ}\\mathrm{C}$. The animal has a photophase of $10$ hours available for activity and a scotophase of $14$ hours of rest. Under the “no-torpor” strategy, the animal remains normothermic throughout the full $24$ hours. Under the “daily-torpor” strategy, the animal remains normothermic only during the $10$ active hours and is torpid throughout the $14$ resting hours. Rewarming from $T_T$ to $T_N$ before the activity window incurs a rewarming energy as above and delays the start of foraging by $t_{\\text{rw}} = 0.5$ hours, thereby reducing the time available for net energy assimilation. Assume entry into torpor is passive (no active cooling cost) and that during activity the net assimilation rate $r(M)$ is already net of activity-related metabolic costs including thermoregulation, so that only the lost active time due to rewarming reduces daily net intake.\n\nUse the following parameter values: $k_s = 0.040 \\,\\mathrm{W\\,K^{-1}\\,kg^{-2/3}}$, $c_b = 3470 \\,\\mathrm{J\\,kg^{-1}\\,K^{-1}}$, $r_0 = 1.2 \\times 10^4 \\,\\mathrm{J\\,h^{-1}\\,kg^{-3/4}}$, $T_a = 5\\,^{\\circ}\\mathrm{C}$, $T_T = 15\\,^{\\circ}\\mathrm{C}$, $T_N = 37\\,^{\\circ}\\mathrm{C}$, $t_{\\text{rest}} = 14 \\,\\mathrm{h}$, and $t_{\\text{rw}} = 0.5 \\,\\mathrm{h}$.\n\nDefine the daily energy advantage of torpor over no torpor as\n$$\n\\Delta E(M) \\;=\\; \\Big[P_{\\text{rest}}(M,T_N,T_a) - P_{\\text{rest}}(M,T_T,T_a)\\Big] \\, t_{\\text{rest}} \\;-\\; E_{\\text{warm}}(M,T_T,T_N) \\;-\\; r(M)\\, t_{\\text{rw}}.\n$$\nDaily torpor is beneficial when $\\Delta E(M) > 0$ and ceases to be beneficial when $\\Delta E(M) = 0$.\n\nCalculate the minimal body mass $M^{\\ast}$ at which daily torpor ceases to be beneficial, defined by the smallest positive solution to $\\Delta E(M) = 0$. Express your final mass in grams and round your answer to three significant figures.", "solution": "The problem is scientifically grounded, well-posed, and contains all necessary information for a unique solution. We proceed with the derivation.\n\nThe objective is to find the minimal body mass $M^{\\ast}$ at which the daily energy advantage of torpor, $\\Delta E(M)$, is zero. The condition is given by $\\Delta E(M^{\\ast}) = 0$.\n\nThe expression for $\\Delta E(M)$ is provided as:\n$$\n\\Delta E(M) \\;=\\; \\Big[P_{\\text{rest}}(M,T_N,T_a) - P_{\\text{rest}}(M,T_T,T_a)\\Big] \\, t_{\\text{rest}} \\;-\\; E_{\\text{warm}}(M,T_T,T_N) \\;-\\; r(M)\\, t_{\\text{rw}}\n$$\nWe are given the functional forms for the power, energy, and rate terms:\n$P_{\\text{rest}}(M,T_b,T_a) = k_s \\, M^{2/3} \\, (T_b - T_a)$\n$E_{\\text{warm}}(M,T_1,T_2) = c_b \\, M \\, (T_2 - T_1)$\n$r(M) = r_0 \\, M^{3/4}$\n\nSubstituting these into the expression for $\\Delta E(M)$:\n$$\n\\Delta E(M) = \\Big[k_s M^{2/3}(T_N - T_a) - k_s M^{2/3}(T_T - T_a)\\Big] t_{\\text{rest}} - c_b M(T_N - T_T) - r_0 M^{3/4} t_{\\text{rw}}\n$$\nThe first term can be simplified by factoring out $k_s M^{2/3}$:\n$$\n\\Delta E(M) = k_s M^{2/3} \\Big[(T_N - T_a) - (T_T - T_a)\\Big] t_{\\text{rest}} - c_b M(T_N - T_T) - r_0 M^{3/4} t_{\\text{rw}}\n$$\n$$\n\\Delta E(M) = k_s M^{2/3} (T_N - T_T) t_{\\text{rest}} - c_b M (T_N - T_T) - r_0 M^{3/4} t_{\\text{rw}}\n$$\nWe set $\\Delta E(M) = 0$ to find the critical mass $M^{\\ast}$:\n$$\nk_s (M^{\\ast})^{2/3} (T_N - T_T) t_{\\text{rest}} - c_b M^{\\ast} (T_N - T_T) - r_0 (M^{\\ast})^{3/4} t_{\\text{rw}} = 0\n$$\nTo solve this equation for $M^{\\ast}$, we note that $M^{\\ast}=0$ is a trivial solution. We search for the smallest positive solution. Assuming $M^{\\ast} > 0$, we can rearrange the equation. It is an algebraic equation with fractional exponents. Let us make the substitution $x = (M^{\\ast})^{1/12}$. This implies $(M^{\\ast})^{2/3} = x^8$, $(M^{\\ast})^{3/4} = x^9$, and $M^{\\ast} = x^{12}$. The equation becomes:\n$$\nk_s x^8 (T_N - T_T) t_{\\text{rest}} - c_b x^{12} (T_N - T_T) - r_0 x^9 t_{\\text{rw}} = 0\n$$\nDividing by $x^8$ (since $x>0$ for $M^{\\ast}>0$):\n$$\nk_s (T_N - T_T) t_{\\text{rest}} - c_b x^4 (T_N - T_T) - r_0 x \\, t_{\\text{rw}} = 0\n$$\nRearranging this into a standard polynomial form for $x$:\n$$\nc_b (T_N - T_T) x^4 + r_0 t_{\\text{rw}} x - k_s (T_N - T_T) t_{\\text{rest}} = 0\n$$\nThis is a quartic equation of the form $A x^4 + B x + C = 0$. To find the coefficients $A$, $B$, and $C$, we must first ensure all parameters are in consistent units. We will use base SI units: kilograms ($kg$), seconds ($s$), Joules ($J$), and Kelvin ($K$). Note that temperature differences in Celsius are identical to those in Kelvin.\n\nThe given parameters are:\n$k_s = 0.040 \\,\\mathrm{W\\,K^{-1}\\,kg^{-2/3}} = 0.040 \\,\\mathrm{J\\,s^{-1}\\,K^{-1}\\,kg^{-2/3}}$\n$c_b = 3470 \\,\\mathrm{J\\,kg^{-1}\\,K^{-1}}$\n$r_0 = 1.2 \\times 10^4 \\,\\mathrm{J\\,h^{-1}\\,kg^{-3/4}} = \\frac{1.2 \\times 10^4}{3600} \\,\\mathrm{J\\,s^{-1}\\,kg^{-3/4}} \\approx 3.333... \\,\\mathrm{J\\,s^{-1}\\,kg^{-3/4}}$\n$T_N - T_T = 37\\,^{\\circ}\\mathrm{C} - 15\\,^{\\circ}\\mathrm{C} = 22\\,\\mathrm{K}$\n$t_{\\text{rest}} = 14 \\,\\mathrm{h} = 14 \\times 3600 \\,\\mathrm{s} = 50400 \\,\\mathrm{s}$\n$t_{\\text{rw}} = 0.5 \\,\\mathrm{h} = 0.5 \\times 3600 \\,\\mathrm{s} = 1800 \\,\\mathrm{s}$\n\nNow, we calculate the coefficients:\n$A = c_b (T_N - T_T) = 3470 \\times 22 = 76340$\n$B = r_0 t_{\\text{rw}} = \\frac{1.2 \\times 10^4}{3600} \\times 1800 = 6000$\n$C = -k_s (T_N - T_T) t_{\\text{rest}} = -0.040 \\times 22 \\times 50400 = -44352$\n\nThe equation for $x$ becomes:\n$$\n76340 \\, x^4 + 6000 \\, x - 44352 = 0\n$$\nLet $f(x) = 76340 \\, x^4 + 6000 \\, x - 44352$. We need to find the positive real root of this equation.\nThe derivative is $f'(x) = 305360 \\, x^3 + 6000$. For $x > 0$, $f'(x) > 0$, which indicates that $f(x)$ is strictly increasing for positive $x$.\nSince $f(0) = -44352 < 0$ and $f(x) \\to \\infty$ as $x \\to \\infty$, there exists exactly one positive real root.\nThis root must be found numerically. Using a numerical solver (e.g., Newton-Raphson method or bisection), we find the root to be approximately:\n$x \\approx 0.84675$\n\nNow we can calculate the mass $M^{\\ast}$ from $x$:\n$M^{\\ast} = x^{12} = (0.84675)^{12}$\n$M^{\\ast} \\approx 0.135676 \\,\\mathrm{kg}$\n\nThe problem requires the answer in grams, rounded to three significant figures.\n$M^{\\ast} \\approx 135.676 \\,\\mathrm{g}$\nRounding to three significant figures, we obtain:\n$M^{\\ast} \\approx 136 \\,\\mathrm{g}$", "answer": "$$ \\boxed{136} $$", "id": "2607232"}, {"introduction": "This final practice elevates the analysis of torpor from a static energy balance to a dynamic, state-dependent decision-making problem [@problem_id:2607293]. Using the framework of dynamic programming, you will construct a computational model to determine an animal's optimal behavioral strategy (forage, rest, or enter torpor) over a finite time horizon. This exercise demonstrates how to formally quantify the survival advantage conferred by temporal heterothermy by integrating physiological costs with ecological risks like starvation and predation, reflecting a modern approach in physiological ecology.", "problem": "You are asked to construct and analyze a dynamic state-variable model for an endothermic animal that can use short-term torpor (a form of temporal heterothermy) during a cold snap. The model must integrate predation risk, foraging success, and energy reserves to compute an optimal survival strategy. Your task is to quantify the survival advantage of having torpor available, defined as the difference in maximal survival probability over the cold-snap horizon with torpor allowed versus torpor forbidden.\n\nModel foundation and assumptions to use:\n- State variable: Let $e \\in \\{0,1,2,\\dots,E_{\\max}\\}$ denote discrete energy reserves measured in arbitrary energy units (dimensionless index).\n- Time: Let $t \\in \\{0,1,2,\\dots,T\\}$ denote discrete time steps, with $T$ being the horizon (the end of the cold snap). The terminal condition is $V_T(e) = 1$ for all $e \\ge 0$, representing survival to the end if alive at time $T$.\n- Actions: At each time step $t \\in \\{0,1,\\dots,T-1\\}$, the animal may choose one of three actions: forage ($F$), rest at normal body temperature ($R$), or enter torpor ($\\Theta$). Foraging is the only action that can increase energy reserves.\n- Predation survival within a step: Survival from predation hazards during step $t$ is independent of energy dynamics and is multiplicative across steps. Let step survival probabilities be $s_F(t)$, $s_R(t)$, and $s_\\Theta(t)$ for actions $F$, $R$, and $\\Theta$, respectively, with $0 \\le s_\\cdot(t) \\le 1$.\n- Metabolic costs and foraging gain:\n  - Energy costs per step are $c_F(t)$, $c_R(t)$, and $c_\\Theta(t)$ for actions $F$, $R$, and $\\Theta$, respectively, with $c_\\cdot(t) \\ge 0$.\n  - Foraging success occurs with probability $p_g(t)$ and yields a deterministic gain of $g(t)$ energy units; otherwise, gain is $0$. No gain occurs under $R$ or $\\Theta$.\n  - Energy cannot be negative; if $e - c_a(t) < 0$ for action $a$, the animal dies immediately in that step and the step value is $0$.\n  - Energy is capped at $E_{\\max}$ by saturation after any gain.\n  \nDynamic programming objective:\n- Let $V_t(e)$ be the maximal probability of being alive at time $T$, given energy reserves $e$ at time $t$ and the allowed action set.\n- For $t = T$, set $V_T(e) = 1$ for all $e \\ge 0$.\n- For $t \\in \\{0,\\dots,T-1\\}$ and $e \\in \\{0,\\dots,E_{\\max}\\}$:\n  - Foraging value when feasible ($e \\ge c_F(t)$):\n    $$\n    Q_F(t,e) = s_F(t)\\left[p_g(t)\\,V_{t+1}\\!\\left(\\min\\{E_{\\max},\\,e - c_F(t) + g(t)\\}\\right) + (1-p_g(t))\\,V_{t+1}\\!\\left(e - c_F(t)\\right)\\right],\n    $$\n    and $Q_F(t,e) = 0$ if $e < c_F(t)$.\n  - Rest value when feasible ($e \\ge c_R(t)$):\n    $$\n    Q_R(t,e) = s_R(t)\\,V_{t+1}\\!\\left(e - c_R(t)\\right),\n    $$\n    and $Q_R(t,e) = 0$ if $e < c_R(t)$.\n  - Torpor value when feasible ($e \\ge c_\\Theta(t)$):\n    $$\n    Q_\\Theta(t,e) = s_\\Theta(t)\\,V_{t+1}\\!\\left(e - c_\\Theta(t)\\right),\n    $$\n    and $Q_\\Theta(t,e) = 0$ if $e < c_\\Theta(t)$.\n  - With torpor allowed: $V_t(e) = \\max\\{Q_F(t,e), Q_R(t,e), Q_\\Theta(t,e)\\}$.\n  - With torpor forbidden: $V_t(e) = \\max\\{Q_F(t,e), Q_R(t,e)\\}$.\n- The survival advantage of torpor for a given parameter set and initial energy $e_0$ is defined as\n  $$\n  \\Delta = V_0^{\\text{allow}}(e_0) - V_0^{\\text{forbid}}(e_0),\n  $$\n  where $V^{\\text{allow}}$ uses the action set $\\{F,R,\\Theta\\}$ and $V^{\\text{forbid}}$ uses the action set $\\{F,R\\}$.\n\nTasks:\n1. Implement the dynamic programming model exactly as specified above.\n2. For each parameter set in the test suite below, compute the survival advantage $\\Delta$ for the specified initial energy $e_0$.\n3. Round each reported $\\Delta$ to six decimal places.\n4. Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, for example $[x_1,x_2,\\dots]$.\n\nTest suite (each case uses time-constant parameters; apply them for all $t \\in \\{0,\\dots,T-1\\}$):\n- Case A (general, moderate cold snap):\n  - $T = 5$, $E_{\\max} = 20$, $e_0 = 10$,\n  - $c_F(t) = 4$, $c_R(t) = 3$, $c_\\Theta(t) = 1$,\n  - $s_F(t) = 0.96$, $s_R(t) = 0.995$, $s_\\Theta(t) = 0.999$,\n  - $p_g(t) = 0.4$, $g(t) = 5$.\n- Case B (single-day boundary; torpor barely affordable):\n  - $T = 1$, $E_{\\max} = 10$, $e_0 = 2$,\n  - $c_F(t) = 3$, $c_R(t) = 4$, $c_\\Theta(t) = 2$,\n  - $s_F(t) = 0.9$, $s_R(t) = 0.99$, $s_\\Theta(t) = 0.999$,\n  - $p_g(t) = 0.5$, $g(t) = 3$.\n- Case C (edge-of-starvation over short snap; torpor extends survival to horizon):\n  - $T = 2$, $E_{\\max} = 10$, $e_0 = 2$,\n  - $c_F(t) = 3$, $c_R(t) = 2$, $c_\\Theta(t) = 1$,\n  - $s_F(t) = 0.9$, $s_R(t) = 0.985$, $s_\\Theta(t) = 0.995$,\n  - $p_g(t) = 0.2$, $g(t) = 4$.\n- Case D (no torpor advantage by construction; torpor equals rest):\n  - $T = 3$, $E_{\\max} = 12$, $e_0 = 8$,\n  - $c_F(t) = 3$, $c_R(t) = 2$, $c_\\Theta(t) = 2$,\n  - $s_F(t) = 0.97$, $s_R(t) = 0.985$, $s_\\Theta(t) = 0.985$,\n  - $p_g(t) = 0.9$, $g(t) = 6$.\n\nAnswer specification:\n- For the four cases $(\\text{A},\\text{B},\\text{C},\\text{D})$, output the list $[\\Delta_{\\text{A}},\\Delta_{\\text{B}},\\Delta_{\\text{C}},\\Delta_{\\text{D}}]$, rounded to six decimal places, on a single line with no extra text.\n- The outputs are probabilities in decimal form (unitless). Do not use a percentage sign. Angles are not involved.", "solution": "The problem presented is a classic optimal control problem situated in the field of behavioral ecology, which can be solved using the method of dynamic programming. The objective is to determine the maximal survival probability over a finite time horizon, $T$, for an animal facing a tradeoff between energy gain, energy expenditure, and predation risk. The state of the system is defined by the animal's energy reserves, $e$, at a given time, $t$. The solution is found by backward induction, beginning from the terminal time and iterating backward to the initial time.\n\nLet $V_t(e)$ represent the maximum probability of surviving until the end of the horizon, $T$, given that the animal has energy reserves $e$ at time $t$. This is the value function. The problem is solved by computing a table of $V_t(e)$ for all relevant states $(t, e)$, where $t \\in \\{0, 1, \\dots, T\\}$ and $e \\in \\{0, 1, \\dots, E_{\\max}\\}$.\n\nThe principle of optimality, central to dynamic programming, dictates that an optimal policy has the property that whatever the initial state and initial decision are, the remaining decisions must constitute an optimal policy with regard to the state resulting from the first decision. This principle is realized through the Bellman equation, which relates the value of a state at time $t$ to the values of possible subsequent states at time $t+1$.\n\nThe algorithm proceeds as follows:\n\nStep 1: Initialization\nAt the terminal time $t=T$, the animal has successfully survived the cold snap if it is still alive. Therefore, the value function at this time is defined as a success state.\n$$\nV_T(e) = 1 \\quad \\text{for all } e \\in \\{0, 1, \\dots, E_{\\max}\\}\n$$\nThis forms the boundary condition for our backward induction.\n\nStep 2: Backward Iteration\nWe iterate backward in time from $t = T-1$ down to $t=0$. For each time step $t$ and for each possible energy level $e \\in \\{0, 1, \\dots, E_{\\max}\\}$, we calculate the value of taking each available action. These are the state-action values, or Q-values, denoted $Q_a(t,e)$ for action $a$.\n\nThe Q-value for an action is the product of the probability of surviving the immediate predation risk associated with that action, $s_a(t)$, and the expected value of the state at time $t+1$ resulting from that action.\n\n- Action: Forage ($F$)\nIf the animal has insufficient energy ($e < c_F(t)$), this action is fatal, so its value is $0$. Otherwise, the resulting state is stochastic. With probability $p_g(t)$, the animal finds food, and its energy becomes $\\min\\{E_{\\max}, e - c_F(t) + g(t)\\}$. With probability $1-p_g(t)$, it fails, and its energy becomes $e - c_F(t)$. The Q-value is:\n$$\nQ_F(t,e) = \\begin{cases} s_F(t)\\left[p_g(t)\\,V_{t+1}\\!\\left(\\min\\{E_{\\max},\\,e - c_F(t) + g(t)\\}\\right) + (1-p_g(t))\\,V_{t+1}\\!\\left(e - c_F(t)\\right)\\right] & \\text{if } e \\ge c_F(t) \\\\ 0 & \\text{if } e < c_F(t) \\end{cases}\n$$\n\n- Action: Rest ($R$)\nIf $e < c_R(t)$, the action is fatal. Otherwise, the transition is deterministic. The energy level at $t+1$ will be $e - c_R(t)$.\n$$\nQ_R(t,e) = \\begin{cases} s_R(t)\\,V_{t+1}\\!\\left(e - c_R(t)\\right) & \\text{if } e \\ge c_R(t) \\\\ 0 & \\text{if } e < c_R(t) \\end{cases}\n$$\n\n- Action: Torpor ($\\Theta$)\nSimilar to rest, this action is fatal if $e < c_\\Theta(t)$. Otherwise, the new energy level is $e - c_\\Theta(t)$.\n$$\nQ_\\Theta(t,e) = \\begin{cases} s_\\Theta(t)\\,V_{t+1}\\!\\left(e - c_\\Theta(t)\\right) & \\text{if } e \\ge c_\\Theta(t) \\\\ 0 & \\text{if } e < c_\\Theta(t) \\end{cases}\n$$\n\nStep 3: Update Value Function\nThe value function $V_t(e)$ is the maximum achievable survival probability from state $(t,e)$. It is therefore the maximum of the Q-values over the set of available actions. The set of available actions depends on whether torpor is allowed.\n\n- If torpor is allowed, the action set is $\\{F, R, \\Theta\\}$:\n$$\nV_t^{\\text{allow}}(e) = \\max\\{Q_F(t,e), Q_R(t,e), Q_\\Theta(t,e)\\}\n$$\n- If torpor is forbidden, the action set is $\\{F, R\\}$:\n$$\nV_t^{\\text{forbid}}(e) = \\max\\{Q_F(t,e), Q_R(t,e)\\}\n$$\n\nThis process is repeated for all $e$ from $0$ to $E_{\\max}$, and for all $t$ from $T-1$ down to $0$.\n\nStep 4: Compute Survival Advantage\nAfter the backward induction is complete, the value tables $V^{\\text{allow}}$ and $V^{\\text{forbid}}$ are fully populated. The maximum survival probability from the initial state $(t=0, e=e_0)$ is given by $V_0(e_0)$. The survival advantage of having torpor available, $\\Delta$, is the difference between these two maximal probabilities for the given initial energy $e_0$.\n$$\n\\Delta = V_0^{\\text{allow}}(e_0) - V_0^{\\text{forbid}}(e_0)\n$$\nThis procedure is executed for each set of parameters specified in the test suite. The parameters are time-constant within each case, simplifying the notation $c_a(t)$ to $c_a$, $s_a(t)$ to $s_a$, etc.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the dynamic programming problem for several test cases\n    to quantify the survival advantage of torpor.\n    \"\"\"\n\n    # Define the test cases from the problem statement.\n    test_cases = [\n        # Case A (general, moderate cold snap)\n        {\n            \"T\": 5, \"E_max\": 20, \"e_0\": 10,\n            \"costs\": {\"F\": 4, \"R\": 3, \"T\": 1},\n            \"survival_probs\": {\"F\": 0.96, \"R\": 0.995, \"T\": 0.999},\n            \"foraging\": {\"p_g\": 0.4, \"g\": 5}\n        },\n        # Case B (single-day boundary; torpor barely affordable)\n        {\n            \"T\": 1, \"E_max\": 10, \"e_0\": 2,\n            \"costs\": {\"F\": 3, \"R\": 4, \"T\": 2},\n            \"survival_probs\": {\"F\": 0.9, \"R\": 0.99, \"T\": 0.999},\n            \"foraging\": {\"p_g\": 0.5, \"g\": 3}\n        },\n        # Case C (edge-of-starvation over short snap)\n        {\n            \"T\": 2, \"E_max\": 10, \"e_0\": 2,\n            \"costs\": {\"F\": 3, \"R\": 2, \"T\": 1},\n            \"survival_probs\": {\"F\": 0.9, \"R\": 0.985, \"T\": 0.995},\n            \"foraging\": {\"p_g\": 0.2, \"g\": 4}\n        },\n        # Case D (no torpor advantage by construction)\n        {\n            \"T\": 3, \"E_max\": 12, \"e_0\": 8,\n            \"costs\": {\"F\": 3, \"R\": 2, \"T\": 2},\n            \"survival_probs\": {\"F\": 0.97, \"R\": 0.985, \"T\": 0.985},\n            \"foraging\": {\"p_g\": 0.9, \"g\": 6}\n        }\n    ]\n\n    results = []\n    for params in test_cases:\n        e0 = params[\"e_0\"]\n        # Calculate max survival probability with torpor allowed\n        v_allow = calculate_max_survival(params, torpor_allowed=True)\n        # Calculate max survival probability with torpor forbidden\n        v_forbid = calculate_max_survival(params, torpor_allowed=False)\n        \n        delta = v_allow[0, e0] - v_forbid[0, e0]\n        results.append(round(delta, 6))\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\ndef calculate_max_survival(params, torpor_allowed):\n    \"\"\"\n    Implements the backward induction dynamic programming algorithm.\n    \n    Args:\n        params (dict): A dictionary containing all model parameters.\n        torpor_allowed (bool): Flag to indicate if torpor is an available action.\n\n    Returns:\n        np.ndarray: The completed value table V(t, e).\n    \"\"\"\n    T = params[\"T\"]\n    E_max = params[\"E_max\"]\n    \n    c = params[\"costs\"]\n    s = params[\"survival_probs\"]\n    p_g = params[\"foraging\"][\"p_g\"]\n    g = params[\"foraging\"][\"g\"]\n\n    # Initialize the value table V(t, e)\n    # Dimensions are (T+1) x (E_max+1)\n    V = np.zeros((T + 1, E_max + 1))\n    \n    # Set terminal condition: V_T(e) = 1 for all e\n    V[T, :] = 1.0\n\n    # Iterate backwards from t = T-1 down to 0\n    for t in range(T - 1, -1, -1):\n        # Iterate over all energy states e from 0 to E_max\n        for e in range(E_max + 1):\n            # Calculate Q-values for each possible action\n            q_values = []\n            \n            # Q-value for Forage (F)\n            if e >= c[\"F\"]:\n                e_next_gain = min(E_max, e - c[\"F\"] + g)\n                e_next_no_gain = e - c[\"F\"]\n                q_f = s[\"F\"] * (\n                    p_g * V[t + 1, e_next_gain] + \n                    (1 - p_g) * V[t + 1, e_next_no_gain]\n                )\n                q_values.append(q_f)\n            else: # Starvation\n                q_values.append(0.0)\n\n            # Q-value for Rest (R)\n            if e >= c[\"R\"]:\n                e_next = e - c[\"R\"]\n                q_r = s[\"R\"] * V[t + 1, e_next]\n                q_values.append(q_r)\n            else: # Starvation\n                q_values.append(0.0)\n\n            # Q-value for Torpor (Theta, aliased to T)\n            if torpor_allowed:\n                if e >= c[\"T\"]:\n                    e_next = e - c[\"T\"]\n                    q_theta = s[\"T\"] * V[t + 1, e_next]\n                    q_values.append(q_theta)\n                else: # Starvation\n                    q_values.append(0.0)\n            \n            # V(t, e) is the max of the Q-values for available actions\n            V[t, e] = max(q_values)\n            \n    return V\n\n# Execute the main function\nsolve()\n```", "id": "2607293"}]}