{"hands_on_practices": [{"introduction": "The regulatory activity of MADS-box transcription factors is not determined by their monomeric concentration alone, but by their assembly into higher-order complexes. This practice delves into the biochemical foundation of this process, applying the law of mass action to a hypothetical MIKC protein system. By calculating the equilibrium distribution of monomers, dimers, and tetramers, you will develop a quantitative intuition for how protein concentration and binding affinities jointly control the formation of the 'floral quartets' that direct gene expression [@problem_id:2588110].", "problem": "In models of flower development, several MADS-box proteins of the MADS Intervening Keratin-like C-terminal (MIKC) type form DNA-binding dimers and higher-order tetramers that regulate target genes in the so-called floral quartet assemblies. Consider an in vitro oligomerization system at equilibrium for a single MIKC-type MADS protein that can exist as monomer, dimer, and tetramer. Let $M$ denote the monomer, $D$ the dimer formed by $M + M \\rightleftharpoons D$, and $T$ the tetramer formed by $D + D \\rightleftharpoons T$. The dissociation constants are defined by the law of mass action as $K_d^{\\mathrm{dimer}} = \\frac{[M]^2}{[D]}$ and $K_d^{\\mathrm{tetramer}} = \\frac{[D]^2}{[T]}$. The total protein concentration (counting monomer equivalents) is conserved as $[P]_{\\mathrm{tot}} = [M] + 2[D] + 4[T]$.\n\nUsing only the law of mass action and conservation of mass, and assuming ideal solution behavior and equilibrium, compute the fraction of total monomer equivalents present in tetramer, defined as $f_T = \\frac{4[T]}{[P]_{\\mathrm{tot}}}$, for $[P]_{\\mathrm{tot}} = 100\\,\\mathrm{nM}$, $K_d^{\\mathrm{dimer}} = 10\\,\\mathrm{nM}$, and $K_d^{\\mathrm{tetramer}} = 50\\,\\mathrm{nM}$. Express your answer as a decimal (no units) and round your answer to four significant figures.", "solution": "The problem as stated is scientifically grounded, well-posed, and objective. It is a standard equilibrium problem based on the law of mass action and conservation of mass, which are fundamental principles in chemistry and physics. The parameters are well-defined and the system of equations is solvable. Therefore, I will proceed with the solution.\n\nThe problem requires the calculation of the fraction of total monomer equivalents present in the tetrameric state, $f_T$. The system involves a monomer ($M$), a dimer ($D$), and a tetramer ($T$) in equilibrium.\n\nThe governing equations are provided:\nThe dissociation constant for dimer formation:\n$$K_d^{\\mathrm{dimer}} = \\frac{[M]^2}{[D]}$$\nThe dissociation constant for tetramer formation:\n$$K_d^{\\mathrm{tetramer}} = \\frac{[D]^2}{[T]}$$\nThe conservation of total protein, counted as monomer equivalents:\n$$[P]_{\\mathrm{tot}} = [M] + 2[D] + 4[T]$$\n\nWe are asked to compute $f_T = \\frac{4[T]}{[P]_{\\mathrm{tot}}}$ given the following values:\n$[P]_{\\mathrm{tot}} = 100\\,\\mathrm{nM}$\n$K_d^{\\mathrm{dimer}} = 10\\,\\mathrm{nM}$\n$K_d^{\\mathrm{tetramer}} = 50\\,\\mathrm{nM}$\n\nThe strategy is to express the concentrations of all species in terms of a single variable, which we choose to be the monomer concentration, $[M]$.\n\nFrom the definition of $K_d^{\\mathrm{dimer}}$, we express the dimer concentration $[D]$ in terms of $[M]$:\n$$[D] = \\frac{[M]^2}{K_d^{\\mathrm{dimer}}}$$\n\nFrom the definition of $K_d^{\\mathrm{tetramer}}$, we express the tetramer concentration $[T]$ in terms of $[D]$:\n$$[T] = \\frac{[D]^2}{K_d^{\\mathrm{tetramer}}}$$\n\nWe can substitute the expression for $[D]$ into the expression for $[T]$ to relate $[T]$ directly to $[M]$:\n$$[T] = \\frac{1}{K_d^{\\mathrm{tetramer}}} \\left( \\frac{[M]^2}{K_d^{\\mathrm{dimer}}} \\right)^2 = \\frac{[M]^4}{(K_d^{\\mathrm{dimer}})^2 K_d^{\\mathrm{tetramer}}}$$\n\nNow, we substitute the expressions for $[D]$ and $[T]$ into the mass conservation equation:\n$$[P]_{\\mathrm{tot}} = [M] + 2 \\left( \\frac{[M]^2}{K_d^{\\mathrm{dimer}}} \\right) + 4 \\left( \\frac{[M]^4}{(K_d^{\\mathrm{dimer}})^2 K_d^{\\mathrm{tetramer}}} \\right)$$\n\nThis equation is a quartic polynomial in the variable $[M]$. We can write it in standard form:\n$$\\left( \\frac{4}{(K_d^{\\mathrm{dimer}})^2 K_d^{\\mathrm{tetramer}}} \\right) [M]^4 + \\left( \\frac{2}{K_d^{\\mathrm{dimer}}} \\right) [M]^2 + [M] - [P]_{\\mathrm{tot}} = 0$$\n\nNow, we substitute the given numerical values into the coefficients. All concentration units are consistently in $nM$, so we can omit them for the calculation.\nWith $K_d^{\\mathrm{dimer}} = 10$, $K_d^{\\mathrm{tetramer}} = 50$, and $[P]_{\\mathrm{tot}} = 100$, the equation becomes:\n$$\\left( \\frac{4}{(10)^2 \\cdot 50} \\right) [M]^4 + \\left( \\frac{2}{10} \\right) [M]^2 + [M] - 100 = 0$$\n$$\\frac{4}{5000} [M]^4 + \\frac{2}{10} [M]^2 + [M] - 100 = 0$$\n$$0.0008 [M]^4 + 0.2 [M]^2 + [M] - 100 = 0$$\n\nThis polynomial equation for $[M]$ does not have a simple analytical solution and must be solved numerically. We seek a physically meaningful root, which must be real and positive. Solving this equation yields a single positive real root for $[M]$:\n$$[M] \\approx 14.971844\\,\\mathrm{nM}$$\n\nUsing this value for $[M]$, we can calculate the concentrations of the other species:\n$$[D] = \\frac{[M]^2}{K_d^{\\mathrm{dimer}}} \\approx \\frac{(14.971844)^2}{10} \\approx 22.41561\\,\\mathrm{nM}$$\n$$[T] = \\frac{[D]^2}{K_d^{\\mathrm{tetramer}}} \\approx \\frac{(22.41561)^2}{50} \\approx 10.04919\\,\\mathrm{nM}$$\n\nAs a verification of our calculations, we check if the law of mass conservation is satisfied:\n$$[M] + 2[D] + 4[T] \\approx 14.971844 + 2(22.41561) + 4(10.04919)$$\n$$\\approx 14.971844 + 44.83122 + 40.19676 = 99.999824\\,\\mathrm{nM}$$\nThis sum is acceptably close to the specified total concentration of $100\\,\\mathrm{nM}$, confirming the correctness of the calculated concentrations.\n\nThe final step is to compute the fraction $f_T$:\n$$f_T = \\frac{4[T]}{[P]_{\\mathrm{tot}}} \\approx \\frac{4 \\cdot 10.04919}{100} = \\frac{40.19676}{100} = 0.4019676$$\n\nThe problem requires the answer to be rounded to four significant figures. The fifth significant figure is $6$, so we round up the fourth digit.\n$$f_T \\approx 0.4020$$", "answer": "$$\n\\boxed{0.4020}\n$$", "id": "2588110"}, {"introduction": "Sharp boundaries between different fields of gene expression are a hallmark of developmental patterning, and the divisions between floral whorls are a classic example. This exercise models the interface between $A$-function and $C$-function domains, where a morphogen gradient of the transcription factor $AP1$ creates a boundary in the expression of $AG$. You will practice deriving an analytical solution for how genetic perturbations predictably shift the position of this developmental boundary, a foundational concept in understanding the robustness of body plans [@problem_id:2588067].", "problem": "In an angiosperm floral meristem, the spatial boundary between A-function and C-function domains is governed by mutual antagonism between MADS-box transcription factors. Consider the A-function gene APETALA1 (AP1) and the C-function gene AGAMOUS (AG), both members of the MADS-box family. Assume the following biologically grounded statements: (i) messenger ribonucleic acid (mRNA) and protein steady-state levels scale proportionally with promoter strength under non-saturating conditions (Central Dogma kinetics at steady state), (ii) AG is repressed by AP1 via a Hill-type repression with Hill coefficient $n=2$ and dissociation constant $K$, and (iii) AP1 forms a quasi-steady exponential gradient along a one-dimensional radial coordinate $x \\ge 0$ from the outer to the inner meristem: $A(x) = A_{0} \\exp(-x/\\lambda)$, where $A(x)$ is the local AP1 concentration, $A_{0}$ is the outer boundary concentration set by upstream cues, and $\\lambda$ is the characteristic decay length measured in cell diameters.\n\nLet the steady-state level of AG (normalized by its maximal level $G_{\\max}$ in the absence of repression) be given by the standard Hill repression form $G(x)/G_{\\max} = 1/\\bigl(1 + (A(x)/K)^{n}\\bigr)$. Define the C-function boundary position $x_{b}$ as the location where $G(x_{b})/G_{\\max} = \\theta$, for a fixed threshold $0 < \\theta < 1$ representing the minimal AG activity needed to specify C-identity.\n\nSuppose the AP1 promoter strength is reduced by a factor of $2$ (i.e., halved) uniformly across the tissue, and assume that this scales the AP1 concentration at every position by the same factor at steady state. Let $x_{b}'$ denote the new boundary position under this promoter halving.\n\nCompute the shift in the C-function boundary, $\\Delta x = x_{b}' - x_{b}$, as a closed-form analytic expression in terms of the decay length $\\lambda$ only. Report the final expression symbolically in terms of $\\lambda$; do not substitute any numerical values. Express the answer in the length unit of $x$ (cell diameters), but do not include units in the boxed answer.", "solution": "The problem as stated will first be subjected to rigorous validation before any attempt at a solution is made.\n\nStep 1: Extraction of Givens\nThe explicit information provided in the problem statement consists of the following:\n- Function A gene: `APETALA1 (AP1)`.\n- Function C gene: `AGAMOUS (AG)`.\n- Regulatory interaction: `AG` is repressed by `AP1`.\n- Repression model: Hill-type repression.\n- Hill coefficient: $n = 2$.\n- Dissociation constant: $K$.\n- AP1 concentration profile: $A(x) = A_0 \\exp(-x/\\lambda)$ for a one-dimensional radial coordinate $x \\ge 0$. $A_0$ is the concentration at $x=0$, and $\\lambda$ is the characteristic decay length.\n- Normalized AG level at steady state: $G(x)/G_{\\max} = 1/\\bigl(1 + (A(x)/K)^{n}\\bigr)$.\n- Definition of C-function boundary $x_b$: The position where $G(x_b)/G_{\\max} = \\theta$, for a constant threshold $0  \\theta  1$.\n- Perturbation: `AP1` promoter strength is reduced by a factor of $2$. This leads to a new `AP1` concentration profile, denoted $A'(x)$, which is $A(x)/2$ at every position $x$.\n- New boundary position: $x_b'$.\n- Objective: Compute the boundary shift, $\\Delta x = x_b' - x_b$, solely in terms of $\\lambda$.\n\nStep 2: Validation of Problem\n- **Scientific Grounding**: The problem is scientifically sound. It employs a standard mathematical framework to model a morphogen gradient (`AP1`) establishing a gene expression boundary (`AG`). The use of an exponential decay function for the morphogen and a Hill function for the transcriptional response is a cornerstone of quantitative developmental biology. The specific genes `AP1` and `AG` and their mutual antagonism are central to the ABC model of flower development, a well-established concept in botany.\n- **Well-Posedness**: The problem is well-posed. It provides all necessary equations, parameters, and conditions to derive a unique analytical solution for the requested quantity $\\Delta x$.\n- **Objectivity**: The problem is stated in precise, objective language, free of subjective or ambiguous terminology.\n\nStep 3: Verdict\nThe problem is valid. It is a well-defined theoretical biology problem grounded in established principles. A solution will now be derived.\n\nThe derivation proceeds as follows. First, we will establish an expression for the initial boundary position, $x_b$. Then, we will derive the expression for the new boundary position, $x_b'$, under the perturbed condition. Finally, we will compute their difference, $\\Delta x$.\n\nThe boundary position $x_b$ is defined by the condition:\n$$\n\\frac{G(x_{b})}{G_{\\max}} = \\theta\n$$\nSubstituting the given Hill function for the normalized `AG` level:\n$$\n\\frac{1}{1 + \\left(\\frac{A(x_{b})}{K}\\right)^{n}} = \\theta\n$$\nGiven the Hill coefficient is $n=2$:\n$$\n\\frac{1}{1 + \\left(\\frac{A(x_{b})}{K}\\right)^{2}} = \\theta\n$$\nWe must now solve this equation for the concentration of `AP1` at the boundary, $A(x_b)$.\n$$\n1 = \\theta \\left(1 + \\left(\\frac{A(x_{b})}{K}\\right)^{2}\\right)\n$$\n$$\n\\frac{1}{\\theta} - 1 = \\left(\\frac{A(x_{b})}{K}\\right)^{2}\n$$\n$$\n\\frac{1 - \\theta}{\\theta} = \\left(\\frac{A(x_{b})}{K}\\right)^{2}\n$$\nSince $A(x_b)$ and $K$ are concentrations, they are non-negative. We take the positive square root:\n$$\n\\frac{A(x_{b})}{K} = \\sqrt{\\frac{1 - \\theta}{\\theta}}\n$$\nThis gives the threshold concentration of `AP1` that sets the boundary:\n$$\nA(x_{b}) = K \\sqrt{\\frac{1 - \\theta}{\\theta}}\n$$\nThis threshold concentration is a constant determined by the intrinsic properties of `AG` repression ($K$) and the required activity level ($\\theta$).\n\nNext, we relate this concentration to the spatial position $x_b$ using the given `AP1` gradient profile, $A(x) = A_0 \\exp(-x/\\lambda)$.\n$$\nA_{0} \\exp(-x_{b}/\\lambda) = A(x_{b}) = K \\sqrt{\\frac{1 - \\theta}{\\theta}}\n$$\nTo solve for $x_b$, we take the natural logarithm of both sides:\n$$\n\\ln\\left(A_{0} \\exp(-x_{b}/\\lambda)\\right) = \\ln\\left(K \\sqrt{\\frac{1 - \\theta}{\\theta}}\\right)\n$$\n$$\n\\ln(A_{0}) - \\frac{x_{b}}{\\lambda} = \\ln\\left(K \\sqrt{\\frac{1 - \\theta}{\\theta}}\\right)\n$$\n$$\n\\frac{x_{b}}{\\lambda} = \\ln(A_{0}) - \\ln\\left(K \\sqrt{\\frac{1 - \\theta}{\\theta}}\\right)\n$$\nUsing the property of logarithms $\\ln(a) - \\ln(b) = \\ln(a/b)$:\n$$\nx_{b} = \\lambda \\ln\\left(\\frac{A_{0}}{K \\sqrt{\\frac{1 - \\theta}{\\theta}}}\\right) = \\lambda \\ln\\left(\\frac{A_{0}}{K} \\sqrt{\\frac{\\theta}{1 - \\theta}}\\right)\n$$\nThis is the expression for the initial boundary position.\n\nNow, we consider the perturbation. The `AP1` promoter strength is halved, which scales the steady-state concentration at all points by a factor of $1/2$. The new `AP1` concentration profile is:\n$$A'(x) = \\frac{1}{2} A(x) = \\frac{A_0}{2} \\exp(-x/\\lambda)$$\nThe cellular machinery that reads the `AP1` concentration is unchanged. Therefore, the new boundary $x_b'$ is located at the position where the new concentration $A'(x_b')$ equals the same threshold concentration found previously:\n$$\nA'(x_{b}') = K \\sqrt{\\frac{1 - \\theta}{\\theta}}\n$$\nSubstituting the expression for $A'(x)$:\n$$\n\\frac{A_{0}}{2} \\exp(-x_{b}'/\\lambda) = K \\sqrt{\\frac{1 - \\theta}{\\theta}}\n$$\nWe solve for $x_b'$ in the same manner as for $x_b$:\n$$\n\\exp(-x_{b}'/\\lambda) = \\frac{2K}{A_{0}} \\sqrt{\\frac{1 - \\theta}{\\theta}}\n$$\n$$\n-\\frac{x_{b}'}{\\lambda} = \\ln\\left(\\frac{2K}{A_{0}} \\sqrt{\\frac{1 - \\theta}{\\theta}}\\right)\n$$\n$$\nx_{b}' = -\\lambda \\ln\\left(\\frac{2K}{A_{0}} \\sqrt{\\frac{1 - \\theta}{\\theta}}\\right) = \\lambda \\ln\\left(\\left(\\frac{2K}{A_{0}} \\sqrt{\\frac{1 - \\theta}{\\theta}}\\right)^{-1}\\right)\n$$\n$$\nx_{b}' = \\lambda \\ln\\left(\\frac{A_{0}}{2K} \\sqrt{\\frac{\\theta}{1 - \\theta}}\\right)\n$$\nThis is the expression for the new boundary position.\n\nFinally, we compute the shift $\\Delta x = x_b' - x_b$.\n$$\n\\Delta x = \\lambda \\ln\\left(\\frac{A_{0}}{2K} \\sqrt{\\frac{\\theta}{1 - \\theta}}\\right) - \\lambda \\ln\\left(\\frac{A_{0}}{K} \\sqrt{\\frac{\\theta}{1 - \\theta}}\\right)\n$$\nFactoring out $\\lambda$ and again using the logarithm property $\\ln(a) - \\ln(b) = \\ln(a/b)$:\n$$\n\\Delta x = \\lambda \\left[ \\ln\\left(\\frac{A_{0}}{2K} \\sqrt{\\frac{\\theta}{1 - \\theta}}\\right) - \\ln\\left(\\frac{A_{0}}{K} \\sqrt{\\frac{\\theta}{1 - \\theta}}\\right) \\right]\n$$\n$$\n\\Delta x = \\lambda \\ln\\left( \\frac{\\frac{A_{0}}{2K} \\sqrt{\\frac{\\theta}{1 - \\theta}}}{\\frac{A_{0}}{K} \\sqrt{\\frac{\\theta}{1 - \\theta}}} \\right)\n$$\nAll terms within the logarithm cancel except for the factor of $1/2$:\n$$\n\\Delta x = \\lambda \\ln\\left(\\frac{1}{2}\\right)\n$$\nUsing the identity $\\ln(1/a) = -\\ln(a)$, we obtain the final expression:\n$$\n\\Delta x = -\\lambda \\ln(2)\n$$\nThis result is a closed-form expression for the boundary shift in terms of $\\lambda$ only, as required. The negative sign correctly indicates that the boundary shifts to a smaller value of $x$ (i.e., towards the outer edge of the meristem), which is logical, as a lower overall concentration of the repressor `AP1` means the critical threshold concentration is reached closer to the source at $x=0$.", "answer": "$$\n\\boxed{-\\lambda \\ln(2)}\n$$", "id": "2588067"}, {"introduction": "While continuous models are powerful for describing individual boundaries, the overall specification of floral organs relies on a discrete combinatorial logic known as the $ABC$ model. This hands-on coding problem challenges you to formalize this logic into a computational Boolean network, a fundamental technique in systems biology. By simulating the synchronous updates of the $A$-, $B$-, and $C$-class genes across the floral meristem, you will explore how the network dynamics determine the final pattern of organ identities [@problem_id:2588089].", "problem": "You are asked to formalize a minimal Boolean gene regulatory network for floral organ identity using the ABCE and D-class MADS-box gene framework and to simulate the effect of altered B-class activation timing on organ identity boundaries. The model must be stated and executed in purely logical and mathematical terms. The network consists of four concentric floral whorls indexed from the outermost to the innermost as $i \\in \\{1,2,3,4\\}$, evolving in discrete time steps $t = 0,1,2,\\dots$. The goal is to compute the organ identity across the whorls at a specified readout time $T$ under several timing perturbations of B-class activation.\n\nFundamental base and assumptions:\n- The Central Dogma of Molecular Biology (DNA to RNA to protein) supports using stable gene expression states as proxies for regulatory decisions. A minimal Boolean approximation to gene regulatory networks sets gene states to either active ($1$) or inactive ($0$) and uses synchronous updates, which is a well-tested abstraction in systems biology for qualitative dynamics of gene circuits.\n- MADS-box gene classes for floral identity are represented as Boolean variables per whorl: $A_i(t)$, $B_i(t)$, $C_i(t)$, $D_i(t)$, $E_i(t) \\in \\{0,1\\}$. The E-class (SEPALLATA) is treated as constitutive ($E_i(t)=1$ for all $i,t$). A-class and C-class mutually repress, consistent with canonical ABCE models. B-class specifies petal and stamen identity when co-expressed with A-class or C-class respectively. D-class specifies ovular identity inside carpels and depends on C-class in the innermost region. These assumptions encode well-tested facts from plant developmental genetics as the model’s base.\n\nSpatial prepatterns and initial conditions:\n- Prepattern functions fix domains susceptible to A-class and C-class activity: $A^{\\mathrm{pre}}_i = 1$ for $i \\in \\{1,2\\}$ and $0$ otherwise; $C^{\\mathrm{pre}}_i = 1$ for $i \\in \\{3,4\\}$ and $0$ otherwise. These represent outer versus inner fields.\n- Initial states at $t=0$ are $A_i(0)=B_i(0)=C_i(0)=D_i(0)=0$ for all $i$, and $E_i(t)=1$ for all $i,t$.\n\nUpdate rules (synchronous Boolean dynamics):\n- Mutual antagonism of A-class and C-class under their prepatterns:\n  $$A_i(t+1) = A^{\\mathrm{pre}}_i \\land \\neg C_i(t), \\quad C_i(t+1) = C^{\\mathrm{pre}}_i \\land \\neg A_i(t).$$\n- Define a “boundary” predicate that detects positions between A-class and C-class domains based on nearest neighbors. Let $\\mathrm{nbr}_L(i)=i-1$ and $\\mathrm{nbr}_R(i)=i+1$ if in range, otherwise nonexistent neighbors are treated as having $A=C=0$. The boundary condition at time $t$ is:\n  $$\\mathrm{BOUNDARY}_i(t) \\equiv \\big(A_{\\mathrm{nbr}_L(i)}(t) \\land C_{\\mathrm{nbr}_R(i)}(t)\\big) \\lor \\big(C_{\\mathrm{nbr}_L(i)}(t) \\land A_{\\mathrm{nbr}_R(i)}(t)\\big).$$\n- B-class activation has whorl-specific onset times $\\tau^{(B)}_2$ and $\\tau^{(B)}_3$, and only occurs at boundary positions:\n  $$B_i(t+1) = B_i(t) \\lor \\big( \\mathrm{BOUNDARY}_i(t) \\land [\\, t \\ge \\tau^{(B)}_i \\,] \\big), \\quad \\text{with } \\tau^{(B)}_1=\\tau^{(B)}_4=+\\infty.$$\n- D-class activation depends on C-class in the innermost whorl with a fixed onset $\\tau^{(D)}$:\n  $$D_i(t+1) = \\begin{cases}\n  1  \\text{if } i=4,\\ t \\ge \\tau^{(D)},\\ \\text{and } C_4(t)=1,\\\\\n  0  \\text{otherwise}.\n  \\end{cases}$$\n- E-class is constitutive: $E_i(t)=1$ for all $i,t$.\n\nOrgan identity readout at time $T$:\n- Map the gene combination at time $T$ to an integer organ identity code per whorl $i \\in \\{1,2,3,4\\}$ using:\n  - Sepal: $A_i(T)=1,\\ B_i(T)=0,\\ C_i(T)=0 \\Rightarrow 1$.\n  - Petal: $A_i(T)=1,\\ B_i(T)=1,\\ C_i(T)=0 \\Rightarrow 2$.\n  - Stamen: $A_i(T)=0,\\ B_i(T)=1,\\ C_i(T)=1 \\Rightarrow 3$.\n  - Carpel: $A_i(T)=0,\\ B_i(T)=0,\\ C_i(T)=1 \\Rightarrow 4$.\n  - Any other combination (including all zeros) is treated as indeterminate and coded as $0$.\n- The D-class does not change the whorl-level organ code here; it refines carpel tissue into ovular identity internally, consistent with D-class function, but the four-whorl discretization reports the enclosing organ as code $4$.\n\nPerturbations and timing parameters:\n- Use $\\tau^{(D)}=1$ for all simulations.\n- The test suite varies $(\\tau^{(B)}_2,\\tau^{(B)}_3,T)$ with the following four cases:\n  - Case A (baseline “happy path”): $(0,0,2)$.\n  - Case B (globally late B-class): $(3,3,2)$.\n  - Case C (asymmetric late B-class in the inner boundary): $(0,3,2)$.\n  - Case D (early readout before B-class boundary consolidation): $(0,0,1)$.\n\nTask:\n- Implement the above Boolean network with synchronous updates from $t=0$ up to and including the readout at time $T$.\n- For each test case, compute the list of four integers $[I_1,I_2,I_3,I_4]$ giving the organ identity codes at time $T$ from outermost ($i=1$) to innermost ($i=4$).\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, where each test case result is itself a list, for example: $[[a_1,a_2,a_3,a_4],[b_1,b_2,b_3,b_4],\\dots]$. The outputs are pure integers with no units.\n\nYour program must not require any input and must compute the results exactly for the four specified test cases in the order listed above.", "solution": "The problem presents a formal, deterministic model of floral organ specification based on the well-established ABCE model of plant developmental genetics. The task is to compute the developmental fate of four concentric floral whorls under different temporal conditions for gene activation. The problem is scientifically grounded, well-posed, and all parameters and rules are specified without ambiguity. It is therefore deemed a valid problem for which a unique solution can be found through direct simulation.\n\nThe model is a synchronous Boolean network defined over four spatial domains, or whorls, indexed by $i \\in \\{1, 2, 3, 4\\}$. The state of the system at any discrete time step $t$ is given by the collection of Boolean states of five gene classes: $\\{A_i(t), B_i(t), C_i(t), D_i(t), E_i(t)\\}_{i=1}^4$.\n\nThe dynamics are governed by a set of deterministic update rules, applied synchronously at each time step. We begin from a specified initial state at $t=0$ and iterate the system forward in time until a specified readout time $T$.\n\nThe key components of the model are as follows:\n\n1.  **State Variables and Initial Conditions**:\n    The state of each whorl $i$ at time $t$ is a vector of Boolean gene activities. The problem specifies that at $t=0$, all gene activities are null, i.e., $A_i(0)=B_i(0)=C_i(0)=D_i(0)=0$ for all $i \\in \\{1,2,3,4\\}$. The E-class gene is assumed to be constitutively active, so $E_i(t)=1$ for all $i$ and $t$.\n\n2.  **Spatial Prepatterns**:\n    The domains of potential A-class and C-class gene activity are established by fixed spatial prepatterns, which are independent of time.\n    $$A^{\\mathrm{pre}}_i = \\begin{cases} 1  \\text{if } i \\in \\{1,2\\} \\\\ 0  \\text{otherwise} \\end{cases}$$\n    $$C^{\\mathrm{pre}}_i = \\begin{cases} 1  \\text{if } i \\in \\{3,4\\} \\\\ 0  \\text{otherwise} \\end{cases}$$\n\n3.  **Synchronous Update Rules**:\n    The state of the system at time $t+1$ is computed based entirely on the state at time $t$.\n\n    -   **A-class and C-class Genes**: These genes are activated within their respective prepatterned domains and exhibit mutual repression.\n        $$A_i(t+1) = A^{\\mathrm{pre}}_i \\land \\neg C_i(t)$$\n        $$C_i(t+1) = C^{\\mathrm{pre}}_i \\land \\neg A_i(t)$$\n\n    -   **B-class Gene**: B-class activation is restricted to whorls that lie at the interface between A-class and C-class domains. This is formalized by a `BOUNDARY` predicate. Neighboring whorls are denoted by $\\mathrm{nbr}_L(i)=i-1$ and $\\mathrm{nbr}_R(i)=i+1$. Whorls outside the range $[1,4]$ are treated as having null gene activity ($A=0, C=0$).\n        $$\\mathrm{BOUNDARY}_i(t) \\equiv \\big(A_{\\mathrm{nbr}_L(i)}(t) \\land C_{\\mathrm{nbr}_R(i)}(t)\\big) \\lor \\big(C_{\\mathrm{nbr}_L(i)}(t) \\land A_{\\mathrm{nbr}_R(i)}(t)\\big)$$\n        The B-class gene, once activated, remains active (a latch mechanism). Activation depends on the satisfaction of the boundary condition and a whorl-specific temporal delay parameter, $\\tau^{(B)}_i$.\n        $$B_i(t+1) = B_i(t) \\lor \\big( \\mathrm{BOUNDARY}_i(t) \\land [\\, t \\ge \\tau^{(B)}_i \\,] \\big)$$\n        The problem specifies $\\tau^{(B)}_1=\\tau^{(B)}_4=+\\infty$, effectively preventing B-class activation in whorls $1$ and $4$.\n\n    -   **D-class Gene**: D-class activation is restricted to the innermost whorl ($i=4$) and is dependent on the presence of C-class activity and a time delay $\\tau^{(D)}$.\n        $$D_i(t+1) = \\begin{cases} 1  \\text{if } i=4,\\ t \\ge \\tau^{(D)},\\ \\text{and } C_4(t)=1 \\\\ 0  \\text{otherwise} \\end{cases}$$\n\n4.  **Algorithmic Simulation**:\n    For each test case, defined by a triplet $(\\tau^{(B)}_2, \\tau^{(B)}_3, T)$, the simulation proceeds as follows:\n    -   Initialize state vectors for $A, B, C, D$ for all four whorls to $0$ at $t=0$.\n    -   Iterate for $t$ from $0$ up to $T-1$. In each step:\n        a.  Store the current state of all genes $\\{A_i(t), B_i(t), C_i(t), D_i(t)\\}$.\n        b.  Calculate the values for the next state $\\{A_i(t+1), B_i(t+1), C_i(t+1), D_i(t+1)\\}$ for all $i$ using the update rules and the stored state from step (a).\n        c.  Replace the current state with the newly computed next state.\n    -   After the loop completes, the state vectors hold the values at time $T$.\n\n5.  **Organ Identity Readout**:\n    The final state vector at time $T$ is mapped to organ identity codes. For each whorl $i$, the combination of gene activities $(A_i(T), B_i(T), C_i(T))$ is converted to an integer code based on the canonical ABCE model:\n    -   $(A=1, B=0, C=0) \\rightarrow 1$ (Sepal)\n    -   $(A=1, B=1, C=0) \\rightarrow 2$ (Petal)\n    -   $(A=0, B=1, C=1) \\rightarrow 3$ (Stamen)\n    -   $(A=0, B=0, C=1) \\rightarrow 4$ (Carpel)\n    -   Any other combination results in code $0$ (Indeterminate).\n\nThis procedure is executed for each of the four specified test cases, and the resulting lists of organ identity codes are aggregated into a final output list. The D-class gene state does not influence the organ identity code, consistent with its biological role in ovule specification within the carpel. The fixed parameter $\\tau^{(D)}=1$ is used throughout.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the floral organ identity problem for all specified test cases.\n    \"\"\"\n    test_cases = [\n        # Case A: (tau_B_2, tau_B_3, T)\n        (0, 0, 2),\n        # Case B\n        (3, 3, 2),\n        # Case C\n        (0, 3, 2),\n        # Case D\n        (0, 0, 1),\n    ]\n\n    results = []\n    for case in test_cases:\n        tau_B_2, tau_B_3, T = case\n        organ_identities = simulate_flower_development(tau_B_2, tau_B_3, T)\n        results.append(organ_identities)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\ndef simulate_flower_development(tau_B_2, tau_B_3, T):\n    \"\"\"\n    Simulates the Boolean gene regulatory network for a single test case.\n\n    Args:\n        tau_B_2 (int): Activation time for B-class in whorl 2.\n        tau_B_3 (int): Activation time for B-class in whorl 3.\n        T (int): Readout time.\n\n    Returns:\n        list: A list of four integers representing organ identity codes.\n    \"\"\"\n    num_whorls = 4\n    \n    # Prepattern functions\n    A_pre = np.array([1, 1, 0, 0], dtype=np.int8)\n    C_pre = np.array([0, 0, 1, 1], dtype=np.int8)\n\n    # Timing parameters\n    tau_D = 1\n    tau_B = np.array([np.inf, tau_B_2, tau_B_3, np.inf])\n\n    # Initial state at t=0\n    A = np.zeros(num_whorls, dtype=np.int8)\n    B = np.zeros(num_whorls, dtype=np.int8)\n    C = np.zeros(num_whorls, dtype=np.int8)\n    \n    # Simulation loop from t=0 to T-1\n    for t in range(T):\n        # Store current state for synchronous update\n        A_current, B_current, C_current = A.copy(), B.copy(), C.copy()\n\n        # Update A and C genes based on mutual repression\n        A_next = A_pre  ~C_current\n        C_next = C_pre  ~A_current\n\n        # Calculate BOUNDARY predicate based on state at time t\n        boundary = np.zeros(num_whorls, dtype=np.int8)\n        # For whorl 2 (index 1), boundary is between whorls 1 and 3\n        boundary[1] = (A_current[0]  C_current[2]) | (C_current[0]  A_current[2])\n        # For whorl 3 (index 2), boundary is between whorls 2 and 4\n        boundary[2] = (A_current[1]  C_current[3]) | (C_current[1]  A_current[3])\n\n        # Update B gene (latching logic)\n        activation_signal = np.zeros(num_whorls, dtype=np.int8)\n        for i in range(num_whorls):\n            if t = tau_B[i]:\n                activation_signal[i] = boundary[i]\n        \n        B_next = B_current | activation_signal\n\n        # Update D gene (non-latching)\n        # Note: D is not used for readout, but computed for model completeness.\n        D_next = np.zeros(num_whorls, dtype=np.int8)\n        if t = tau_D and C_current[3] == 1:\n            D_next[3] = 1\n\n        # Atomically update all states for the next time step\n        A, B, C = A_next, B_next, C_next\n    \n    # Readout at time T, using the final state of A, B, C\n    organ_identities = []\n    for i in range(num_whorls):\n        state = (A[i], B[i], C[i])\n        if state == (1, 0, 0):\n            organ_identities.append(1)  # Sepal\n        elif state == (1, 1, 0):\n            organ_identities.append(2)  # Petal\n        elif state == (0, 1, 1):\n            organ_identities.append(3)  # Stamen\n        elif state == (0, 0, 1):\n            organ_identities.append(4)  # Carpel\n        else:\n            organ_identities.append(0)  # Indeterminate\n\n    return organ_identities\n\nsolve()\n```", "id": "2588089"}]}