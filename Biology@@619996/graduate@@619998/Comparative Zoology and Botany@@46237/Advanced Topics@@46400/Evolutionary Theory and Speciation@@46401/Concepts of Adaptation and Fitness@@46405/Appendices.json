{"hands_on_practices": [{"introduction": "The ability to quantify the strength of natural selection is a cornerstone of evolutionary biology. To do this, we must translate raw data on survival and reproduction—absolute fitness—into standardized metrics that allow for meaningful comparisons. This foundational exercise [@problem_id:2560837] guides you through the process of calculating relative fitnesses and selection coefficients, which are the essential currency for population genetic models and comparative studies. Mastering these conversions is the first step toward understanding the dynamics of adaptation.", "problem": "A comparative study of adaptation spanning a grass species and a ground beetle species uses a shared population-genetic framework to quantify fitness differences among diploid genotypes under a common environmental pressure. In each species, the measured absolute genotype fitnesses, defined as the expected number of viable adult offspring contributed per adult per generation, are $W_{AA}=1.2$, $W_{Aa}=1.1$, and $W_{aa}=0.9$. In a large, panmictic population where stochastic drift can be neglected, the mean fitness is observed to be $\\bar W=1.06$.\n\nUsing standard population-genetic definitions consistent across both plant and animal systems, first determine the relative fitness of each genotype when absolute fitness is scaled by the contemporaneous population mean. Next, identify the fittest genotype and determine the selection coefficients against each suboptimal genotype, where the selection coefficient against a genotype quantifies its proportional fitness deficit relative to the fittest genotype.\n\nGive exact values (fractions are acceptable) and report your final result as a single row vector in the order $\\left(\\tilde w_{AA}, \\tilde w_{Aa}, \\tilde w_{aa}, s_{Aa}, s_{aa}\\right)$. No units are required. Do not round.", "solution": "The goal is to translate absolute fitnesses into two comparative measures that are fundamental in population genetics and widely used across zoology and botany: mean-scaled relative fitnesses and selection coefficients relative to the fittest genotype.\n\nFoundational definitions:\n1. Absolute fitness $W_{i}$ is the expected reproductive output of genotype $i$ per generation.\n2. Mean fitness $\\bar W$ is the population-average of absolute fitness, and it sets the background scale for demographic growth or decline.\n3. A standard relative fitness, scaled by the population mean, is defined as $\\tilde w_{i} = W_{i}/\\bar W$. This normalization indicates whether a genotype contributes more ($\\tilde w_{i} > 1$) or less ($\\tilde w_{i} < 1$) than the population average.\n4. Selection coefficients against suboptimal genotypes are defined relative to the fittest genotype. If $W_{\\max}=\\max\\{W_{AA},W_{Aa},W_{aa}\\}$, then the relative fitness normalized to the maximum is $w_{i}^{(\\max)} = W_{i}/W_{\\max}$, and the selection coefficient against genotype $i$ is $s_{i} = 1 - w_{i}^{(\\max)}$. For the fittest genotype itself, the selection coefficient is $0$ by construction; here we are asked only for coefficients against the suboptimal genotypes.\n\nStep 1: Compute mean-scaled relative fitnesses.\nGiven $W_{AA}=1.2$, $W_{Aa}=1.1$, $W_{aa}=0.9$, and $\\bar W=1.06$, we compute\n\n$$\n\\tilde w_{AA}=\\frac{W_{AA}}{\\bar W}=\\frac{1.2}{1.06}=\\frac{\\frac{6}{5}}{\\frac{53}{50}}=\\frac{6}{5}\\cdot\\frac{50}{53}=\\frac{60}{53},\n$$\n\n\n$$\n\\tilde w_{Aa}=\\frac{W_{Aa}}{\\bar W}=\\frac{1.1}{1.06}=\\frac{\\frac{11}{10}}{\\frac{53}{50}}=\\frac{11}{10}\\cdot\\frac{50}{53}=\\frac{55}{53},\n$$\n\n\n$$\n\\tilde w_{aa}=\\frac{W_{aa}}{\\bar W}=\\frac{0.9}{1.06}=\\frac{\\frac{9}{10}}{\\frac{53}{50}}=\\frac{9}{10}\\cdot\\frac{50}{53}=\\frac{45}{53}.\n$$\n\n\nStep 2: Identify the fittest genotype and compute selection coefficients against suboptimal genotypes.\nThe maximum absolute fitness is\n\n$$\nW_{\\max}=\\max\\{1.2,1.1,0.9\\}=1.2.\n$$\n\nThus the fittest genotype is $AA$. The selection coefficients against suboptimal genotypes $Aa$ and $aa$ are\n\n$$\ns_{Aa}=1-\\frac{W_{Aa}}{W_{\\max}}=1-\\frac{1.1}{1.2}=1-\\frac{11}{12}=\\frac{1}{12},\n$$\n\n\n$$\ns_{aa}=1-\\frac{W_{aa}}{W_{\\max}}=1-\\frac{0.9}{1.2}=1-\\frac{3}{4}=\\frac{1}{4}.\n$$\n\n\nCollecting results in the requested order $\\left(\\tilde w_{AA}, \\tilde w_{Aa}, \\tilde w_{aa}, s_{Aa}, s_{aa}\\right)$, we obtain\n\n$$\n\\left(\\frac{60}{53},\\ \\frac{55}{53},\\ \\frac{45}{53},\\ \\frac{1}{12},\\ \\frac{1}{4}\\right).\n$$\n\n\nThese quantities succinctly express adaptation and fitness in a comparative framework: mean-scaled relative fitness compares each genotype to the population background, while selection coefficients quantify the intensity of selection acting against less-fit genotypes relative to the best-performing genotype, a concept applicable across both botanical and zoological systems.", "answer": "$$\\boxed{\\begin{pmatrix}\\frac{60}{53} & \\frac{55}{53} & \\frac{45}{53} & \\frac{1}{12} & \\frac{1}{4}\\end{pmatrix}}$$", "id": "2560837"}, {"introduction": "Fitness is not an intrinsic property of a genotype but emerges from its interaction with the environment. Reciprocal transplant experiments are a powerful tool used by ecologists and evolutionary biologists to disentangle this relationship and test for local adaptation. This exercise [@problem_id:2560804] places you in the role of an analyst, using fitness data from a hypothetical experiment to quantify the magnitude of local adaptation and its potential asymmetry. You will work with Malthusian fitness, $m = \\ln(W)$, to see how this logarithmic transformation simplifies the analysis of multiplicative growth processes.", "problem": "A classic way to quantify local adaptation in comparative zoology and botany is through reciprocal transplant experiments that measure absolute fitness of populations in their home and away environments. Consider two populations, labeled $A$ and $B$, each sampled from distinct environments, also labeled $A$ and $B$. A reciprocal transplant yields the following mean absolute fitnesses: $(W_{AA}^{\\mathrm{home}}, W_{AA}^{\\mathrm{away}}, W_{BB}^{\\mathrm{home}}, W_{BB}^{\\mathrm{away}}) = (1.2, 0.8, 1.1, 0.9)$, where $W_{AA}^{\\mathrm{home}}$ is the fitness of population $A$ in environment $A$, $W_{AA}^{\\mathrm{away}}$ is the fitness of population $A$ in environment $B$, $W_{BB}^{\\mathrm{home}}$ is the fitness of population $B$ in environment $B$, and $W_{BB}^{\\mathrm{away}}$ is the fitness of population $B$ in environment $A$. Absolute fitness is defined as the expected number of viable offspring per individual per generation. You may assume that fitness composes multiplicatively across generations and that the appropriate additive measure of selection is the Malthusian fitness $m=\\ln W$, where $\\ln$ denotes the natural logarithm.\n\nUsing only these foundational premises and the conceptual definition that local adaptation is the advantage of local (sympatric) performance over foreign (allopatric) performance, derive from first principles and then compute two quantities on the Malthusian scale:\n1) the system-wide net local adaptation, interpreted as the aggregate sympatric advantage across both populations, and\n2) the directional asymmetry of local adaptation, interpreted as the difference between the home-versus-away Malthusian advantage of population $A$ and that of population $B$.\n\nExpress your final result as a two-entry row vector $\\big[$net local adaptation, asymmetry$\\big]$ in exact analytic form with $\\ln(\\cdot)$, without any rounding and without units.", "solution": "To solve the problem, we first formalize the given information. Let $W_{ij}$ denote the absolute fitness of a population from origin $i$ (where $i \\in \\{A, B\\}$) when grown in environment $j$ (where $j \\in \\{A, B\\}$). Based on the problem statement, we have:\n- $W_{AA} = W_{AA}^{\\mathrm{home}} = 1.2$\n- $W_{AB} = W_{AA}^{\\mathrm{away}} = 0.8$\n- $W_{BB} = W_{BB}^{\\mathrm{home}} = 1.1$\n- $W_{BA} = W_{BB}^{\\mathrm{away}} = 0.9$\n\nThe corresponding Malthusian fitnesses, denoted $m_{ij} = \\ln(W_{ij})$, are:\n- $m_{AA} = \\ln(1.2)$\n- $m_{AB} = \\ln(0.8)$\n- $m_{BB} = \\ln(1.1)$\n- $m_{BA} = \\ln(0.9)$\n\nWe are tasked to derive and compute two quantities from these first principles.\n\n**1. System-wide net local adaptation ($LA_{\\text{net}}$)**\nThis quantity is the aggregate sympatric advantage across both populations. In any given environment, local adaptation is the performance advantage of the native (\"sympatric\") population relative to the non-native (\"allopatric\") population. Since Malthusian fitness is an additive measure, this advantage is computed as a difference.\n\nThe local adaptation effect in environment $A$ is the fitness of the local population ($A$) minus the fitness of the foreign population ($B$):\n$$LA_A = m_{AA} - m_{BA}$$\nThe local adaptation effect in environment $B$ is the fitness of the local population ($B$) minus the fitness of the foreign population ($A$):\n$$LA_B = m_{BB} - m_{AB}$$\nThe system-wide net local adaptation is the sum of these two effects:\n$$LA_{\\text{net}} = LA_A + LA_B = (m_{AA} - m_{BA}) + (m_{BB} - m_{AB})$$\nUsing the properties of logarithms, we can rewrite this as:\n$$LA_{\\text{net}} = \\ln(W_{AA}) - \\ln(W_{BA}) + \\ln(W_{BB}) - \\ln(W_{AB}) = \\ln\\left(\\frac{W_{AA} W_{BB}}{W_{BA} W_{AB}}\\right)$$\nSubstituting the given numerical values:\n$$LA_{\\text{net}} = \\ln\\left(\\frac{1.2 \\times 1.1}{0.9 \\times 0.8}\\right) = \\ln\\left(\\frac{1.32}{0.72}\\right)$$\nSimplifying the fraction $\\frac{132}{72}$ (dividing by 12) gives $\\frac{11}{6}$.\n$$LA_{\\text{net}} = \\ln\\left(\\frac{11}{6}\\right)$$\n\n**2. Directional asymmetry of local adaptation ($LA_{\\text{asymm}}$)**\nThis is defined as the difference between the \"home-versus-away\" Malthusian advantage of population $A$ and that of population $B$.\n\nThe home-versus-away Malthusian advantage for population $A$ is:\n$$\\Delta m_A = m_{AA} - m_{AB}$$\nSimilarly, the home-versus-away Malthusian advantage for population $B$ is:\n$$\\Delta m_B = m_{BB} - m_{BA}$$\nThe directional asymmetry is the difference between these two advantages:\n$$LA_{\\text{asymm}} = \\Delta m_A - \\Delta m_B = (m_{AA} - m_{AB}) - (m_{BB} - m_{BA})$$\nRearranging and using logarithm properties:\n$$LA_{\\text{asymm}} = \\ln(W_{AA}) - \\ln(W_{AB}) - \\ln(W_{BB}) + \\ln(W_{BA}) = \\ln\\left(\\frac{W_{AA} W_{BA}}{W_{AB} W_{BB}}\\right)$$\nSubstituting the numerical values:\n$$LA_{\\text{asymm}} = \\ln\\left(\\frac{1.2 \\times 0.9}{0.8 \\times 1.1}\\right) = \\ln\\left(\\frac{1.08}{0.88}\\right)$$\nSimplifying the fraction $\\frac{108}{88}$ (dividing by 4) gives $\\frac{27}{22}$.\n$$LA_{\\text{asymm}} = \\ln\\left(\\frac{27}{22}\\right)$$\n\nThe final result as a row vector is $\\begin{pmatrix} \\ln\\left(\\frac{11}{6}\\right) & \\ln\\left(\\frac{27}{22}\\right) \\end{pmatrix}$.", "answer": "$$\\boxed{\\begin{pmatrix} \\ln\\left(\\frac{11}{6}\\right) & \\ln\\left(\\frac{27}{22}\\right) \\end{pmatrix}}$$", "id": "2560804"}, {"introduction": "For organisms like perennial plants or vertebrates, where survival and fecundity change with age, a single-generation fitness value is insufficient. Life history theory provides a more holistic measure of fitness: the intrinsic rate of population increase, $r$. This advanced practice [@problem_id:2560845] challenges you to derive and numerically solve the foundational Euler-Lotka equation, which integrates age-specific survivorship ($\\ell_x$) and maternity ($m_x$) schedules into a single, powerful metric of long-term fitness. This approach is essential for comparing adaptive strategies across species with vastly different life cycles.", "problem": "Consider organisms with age-structured life histories in discrete time steps. Let $x \\in \\{0,1,2,\\dots,X\\}$ denote age classes. For a given species, let $N_x(t)$ denote the number of individuals of age $x$ at time $t$, $\\ell_x$ denote the survivorship to age $x$ relative to birth, and $m_x$ denote the per-capita offspring produced by an individual of age $x$ during one time step. Assume the following fundamental base: (i) populations under constant environmental conditions can approach a long-run exponential growth regime $N(t) = N(0)\\exp(rt)$ with a constant growth rate $r$ that is used in life-history theory as the measure of absolute fitness, (ii) births at time $t$ equal the sum over all ages of per-capita reproduction weighted by survivorship and the age distribution, and (iii) for a stable age distribution under exponential growth, the contribution of individuals at age $x$ to newborns at time $t$ is discounted by the factor derived from exponential growth and elapsed time. Starting only from these base assumptions and the definitions of $\\ell_x$ and $m_x$, derive the necessary condition that implicitly defines the intrinsic rate of increase $r$ for a given pair of sequences $(\\ell_x)_{x=0}^{X}$ and $(m_x)_{x=0}^{X}$, and then solve for $r$ numerically for each parameter set below.\n\nInterpretation and scientific realism: In comparative zoology and botany, the intrinsic rate of increase $r$ is a widely used measure of fitness for comparing adaptations among species with different survivorship and fecundity schedules. The sequences $(\\ell_x)$ and $(m_x)$ below are plausible and self-consistent: $\\ell_0 = 1$ and $(\\ell_x)$ is nonincreasing in $x$, and $m_x \\ge 0$. You may assume there exists at least one age $x \\ge 1$ with $m_x > 0$, ensuring the problem is identifiable and the implicit condition admits a unique real solution for $r$.\n\nYour task is to implement a program that, for each test case, computes the unique real solution $r$ implied by the derived condition, using a robust numerical method appropriate for a strictly monotone implicit equation. Express each $r$ in units of “per time step,” and output each result as a real number rounded to six decimal places.\n\nTest suite:\n- Case A (thumbnail-aligned, reproduction starts at age one): $(\\ell_x) = [\\,1.0,\\,0.5,\\,0.25\\,]$, $(m_x) = [\\,0.0,\\,2.0,\\,3.0\\,]$.\n- Case B (boundary case where the growth rate is exactly zero): $(\\ell_x) = [\\,1.0,\\,0.5\\,]$, $(m_x) = [\\,0.2,\\,1.6\\,]$.\n- Case C (declining life history with late, sparse reproduction leading to negative growth): $(\\ell_x) = [\\,1.0,\\,0.3,\\,0.2,\\,0.1\\,]$, $(m_x) = [\\,0.0,\\,0.4,\\,0.3,\\,0.2\\,]$.\n- Case D (high reproduction across multiple ages yielding fast positive growth): $(\\ell_x) = [\\,1.0,\\,0.9,\\,0.8,\\,0.7\\,]$, $(m_x) = [\\,0.0,\\,2.0,\\,2.0,\\,2.0\\,]$.\n\nAlgorithmic constraints and guarantees:\n- From the fundamental base, the defining equation for $r$ is strictly monotone in $r$ under the given conditions, which guarantees uniqueness.\n- Use a bracketing method that exploits monotonicity (for example, bisection) with a convergence tolerance sufficiently tight to ensure correct rounding to six decimals. You may assume a finite bracket exists.\n- For each test case, produce the numerical solution $r$ rounded to six decimal places.\n\nFinal output format:\nYour program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets (e.g., $[r_A,r_B,r_C,r_D]$), where each $r$ is rounded to six decimal places and appears in the same order as the test cases above. No other text should be printed.", "solution": "The solution has two parts: first, deriving the Euler-Lotka equation from the given first principles, and second, numerically solving it for each test case.\n\n**1. Derivation of the Euler-Lotka Equation**\n\nLet $N_x(t)$ be the number of individuals of age $x$ at time $t$, $\\ell_x$ be the survivorship to age $x$, and $m_x$ be the per-capita fecundity at age $x$. The number of individuals of age $x$ are the survivors from the cohort born at time $t-x$, denoted $N_0(t-x)$. Thus:\n$$ N_x(t) = N_0(t-x) \\ell_x $$\n\nThe total number of births at time $t$, $N_0(t)$, is the sum of offspring produced by individuals of all ages:\n$$ N_0(t) = \\sum_{x=0}^{X} N_x(t) m_x $$\n\nSubstituting the first equation into the second gives the renewal equation:\n$$ N_0(t) = \\sum_{x=0}^{X} N_0(t-x) \\ell_x m_x $$\n\nWe assume the population eventually reaches a stable age distribution and grows exponentially at a constant rate $r$, such that $N_0(t) = N_0(0) e^{rt}$. This implies that the number of births at a past time $t-x$ can be related to the present number of births:\n$$ N_0(t-x) = N_0(0) e^{r(t-x)} = (N_0(0) e^{rt}) e^{-rx} = N_0(t) e^{-rx} $$\n\nSubstituting this back into the renewal equation yields:\n$$ N_0(t) = \\sum_{x=0}^{X} \\left( N_0(t) e^{-rx} \\right) \\ell_x m_x $$\n\nFor a non-trivial population ($N_0(t) > 0$), we can divide by $N_0(t)$ to obtain the discrete-time Euler-Lotka equation. This is the characteristic equation that implicitly defines $r$:\n$$ 1 = \\sum_{x=0}^{X} e^{-rx} \\ell_x m_x $$\n\n**2. Numerical Solution**\n\nTo solve for $r$, we must find the root of the function:\n$$ f(r) = \\left( \\sum_{x=0}^{X} e^{-rx} \\ell_x m_x \\right) - 1 = 0 $$\nThe derivative of $f(r)$ is $f'(r) = \\sum_{x=0}^{X} (-x) e^{-rx} \\ell_x m_x$. Since at least one term with $x \\ge 1$ and $m_x > 0$ exists, $f'(r)$ is always negative, meaning $f(r)$ is a strictly decreasing function. This guarantees a unique real root for $r$.\n\nThis property makes a bracketing method like bisection ideal for finding the root. The provided code implements this method to find $r$ for each test case to the required precision.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef bisection(f, a, b, tol=1e-9, max_iter=100):\n    \"\"\"\n    Finds the root of a function f within the interval [a, b] using the bisection method.\n    Assumes f(a) and f(b) have opposite signs and f is continuous.\n    \"\"\"\n    fa = f(a)\n    fb = f(b)\n\n    if fa * fb >= 0:\n        if np.isclose(fa, 0): return a\n        if np.isclose(fb, 0): return b\n        # This case should not be reached given the problem constraints and chosen bracket.\n        raise ValueError(\"Root not bracketed or function has same sign at endpoints.\")\n\n    for _ in range(max_iter):\n        midpoint = (a + b) / 2.0\n        f_mid = f(midpoint)\n\n        # Check for convergence against tolerance.\n        if (b - a) / 2.0 < tol:\n            return midpoint\n\n        # If f_mid is very close to zero, we have found the root.\n        if np.isclose(f_mid, 0):\n            return midpoint\n\n        # Narrow the interval.\n        if fa * f_mid < 0:\n            b = midpoint\n        else:\n            a = midpoint\n            fa = f_mid # Update fa for the new interval [a, b].\n    \n    # Return the best estimate after max_iter.\n    return (a + b) / 2.0\n\ndef solve():\n    \"\"\"\n    Derives and solves the Euler-Lotka equation for r for given test cases.\n    \"\"\"\n    # Define the test cases from the problem statement.\n    test_cases = [\n        # Case A\n        {'l': np.array([1.0, 0.5, 0.25]), 'm': np.array([0.0, 2.0, 3.0])},\n        # Case B\n        {'l': np.array([1.0, 0.5]), 'm': np.array([0.2, 1.6])},\n        # Case C\n        {'l': np.array([1.0, 0.3, 0.2, 0.1]), 'm': np.array([0.0, 0.4, 0.3, 0.2])},\n        # Case D\n        {'l': np.array([1.0, 0.9, 0.8, 0.7]), 'm': np.array([0.0, 2.0, 2.0, 2.0])},\n    ]\n\n    results = []\n    for case in test_cases:\n        l_x = case['l']\n        m_x = case['m']\n        \n        # Define the characteristic equation f(r) = sum(l_x * m_x * exp(-r*x)) - 1\n        def characteristic_equation(r):\n            # Ages are represented by the indices of the arrays.\n            ages = np.arange(len(l_x))\n            return np.sum(l_x * m_x * np.exp(-r * ages)) - 1.0\n\n        # The net reproductive rate R0 = sum(l_x * m_x). If R0=1, then r=0.\n        R0 = np.sum(l_x * m_x)\n        if np.isclose(R0, 1.0):\n            r_sol = 0.0\n        else:\n            # Use a robust, wide bracket for the bisection method.\n            # The function is monotonic, so a wide bracket is safe.\n            # Ecological rates 'r' are rarely outside this range.\n            bracket_low = -10.0\n            bracket_high = 10.0\n            r_sol = bisection(characteristic_equation, bracket_low, bracket_high, tol=1e-9)\n        \n        # Format the result to six decimal places.\n        results.append(f\"{r_sol:.6f}\")\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2560845"}]}