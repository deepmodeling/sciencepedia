{"hands_on_practices": [{"introduction": "Before tackling a quantum chemistry problem on a quantum computer, one must first be able to solve it exactly using classical methods, at least for small systems. This provides a crucial benchmark. This first practice grounds us in this foundational concept by asking you to construct the full configuration interaction (FCI) Hamiltonian matrix from the fundamental one- and two-electron integrals [@problem_id:2797542]. Mastering this process solidifies your understanding of the second-quantized Hamiltonian and the structure of electronic interactions in the Slater determinant basis.", "problem": "Consider a nonrelativistic, clamped-nuclei two-electron problem in second quantization with four orthonormal spin-orbitals labeled by indices $p \\in \\{1,2,3,4\\}$ corresponding to $\\{1\\alpha, 1\\beta, 2\\alpha, 2\\beta\\}$, respectively. The electronic Hamiltonian is\n$$\n\\hat{H} \\;=\\; \\sum_{p,q} h_{pq}\\, \\hat{a}_{p}^{\\dagger}\\hat{a}_{q} \\;+\\; \\frac{1}{2}\\sum_{p,q,r,s} (pq|rs)\\, \\hat{a}_{p}^{\\dagger}\\hat{a}_{q}^{\\dagger}\\hat{a}_{s}\\hat{a}_{r},\n$$\nwhere $\\hat{a}_{p}^{\\dagger}$ and $\\hat{a}_{p}$ are fermionic creation and annihilation operators obeying canonical anticommutation relations, $h_{pq}$ are one-electron integrals, and $(pq|rs)$ are two-electron Coulomb integrals in chemistsâ€™ notation. All quantities are in Hartree atomic units.\n\nYou are given the following nonzero one-electron integrals $h_{pq}$ (Hermitian, so $h_{pq}=h_{qp}$):\n- $h_{11} = h_{22} = -1.000$, $h_{33} = h_{44} = -0.500$,\n- $h_{13} = h_{31} = -0.100$, $h_{24} = h_{42} = -0.100$,\n- all other $h_{pq} = 0$.\n\nThe two-electron spin-orbital integrals $(pq|rs)$ are constructed from the following nonzero spatial-orbital Coulomb-exchange data, with all permutational symmetries respected and all other spatial integrals zero:\n- $(11|11) = 0.700$, $(22|22) = 0.600$,\n- $(11|22) = (22|11) = 0.500$,\n- $(12|21) = (21|12) = 0.200$,\n- all other spatial $(\\mu\\nu|\\lambda\\kappa) = 0$.\nMap to spin-orbital integrals via spin selection rules: $(p q|r s)$ is nonzero only if the spin of $p$ equals the spin of $r$ and the spin of $q$ equals the spin of $s$, in which case $(p q|r s)$ equals the corresponding spatial $(\\mu\\nu|\\lambda\\kappa)$ where $p\\to\\mu$, $q\\to\\nu$, $r\\to\\lambda$, $s\\to\\kappa$ denote the associated spatial labels.\n\nWork in the Slater determinant basis of all two-electron determinants built from the four spin-orbitals, ordered by increasing spin-orbital indices to fix phases:\n- $\\lvert D_{1} \\rangle = \\lvert 1,2 \\rangle$, $\\lvert D_{2} \\rangle = \\lvert 1,3 \\rangle$, $\\lvert D_{3} \\rangle = \\lvert 1,4 \\rangle$,\n- $\\lvert D_{4} \\rangle = \\lvert 2,3 \\rangle$, $\\lvert D_{5} \\rangle = \\lvert 2,4 \\rangle$, $\\lvert D_{6} \\rangle = \\lvert 3,4 \\rangle$.\n\nTasks:\n1. Starting from the second-quantized Hamiltonian and fermionic anticommutation relations, construct the full $6\\times 6$ full configuration interaction (FCI) Hamiltonian matrix in the above determinant basis by evaluating all matrix elements $\\langle D_{I} \\lvert \\hat{H} \\rvert D_{J} \\rangle$ directly from the given $h_{pq}$ and $(pq|rs)$.\n2. Using your constructed matrix, explicitly confirm Hermiticity and consistency with antisymmetry (i.e., the structure implied by Slater-Condon rules derived from anticommutation and the symmetry properties of $(pq|rs)$).\n3. What is the trace of the FCI Hamiltonian matrix? Express the final answer in Hartree. No rounding is required; report the exact value.", "solution": "The solution requires constructing the $6 \\times 6$ Hamiltonian matrix $\\mathbf{H}$ in the given Slater determinant basis. The matrix elements $H_{IJ} = \\langle D_{I} | \\hat{H} | D_{J} \\rangle$ are evaluated using the Slater-Condon rules, which are a direct consequence of applying the second-quantized Hamiltonian to Slater determinants and using the fermionic anticommutation relations.\n\nThe basis determinants are:\n$\\lvert D_{1} \\rangle = \\lvert 1,2 \\rangle$ ($M_S=0$), $\\lvert D_{2} \\rangle = \\lvert 1,3 \\rangle$ ($M_S=1$), $\\lvert D_{3} \\rangle = \\lvert 1,4 \\rangle$ ($M_S=0$),\n$\\lvert D_{4} \\rangle = \\lvert 2,3 \\rangle$ ($M_S=0$), $\\lvert D_{5} \\rangle = \\lvert 2,4 \\rangle$ ($M_S=-1$), $\\lvert D_{6} \\rangle = \\lvert 3,4 \\rangle$ ($M_S=0$).\n\nThe Hamiltonian is non-relativistic and spin-independent, so it commutes with the total spin-projection operator $\\hat{S}_z$. This implies the Hamiltonian matrix is block-diagonal in the basis of determinants, with non-zero elements only between determinants having the same $M_S$ value. The basis separates into three blocks: $M_S=1$ ($\\{D_2\\}$), $M_S=-1$ ($\\{D_5\\}$), and $M_S=0$ ($\\{D_1, D_3, D_4, D_6\\}$).\n\nFirst, we derive the necessary non-zero spin-orbital integrals $(pq|rs)$ from the given spatial integrals $(\\mu\\nu|\\lambda\\kappa)$ and selection rules. The spin-orbital mapping is $1 \\to (1, \\alpha)$, $2 \\to (1, \\beta)$, $3 \\to (2, \\alpha)$, $4 \\to (2, \\beta)$. An integral $(pq|rs)$ is non-zero only if $\\sigma(p)=\\sigma(r)$ and $\\sigma(q)=\\sigma(s)$, and its value is given by the corresponding spatial integral. For example, $(12|12)$ is derived from the spatial integral $(\\mu(1)\\mu(2)|\\mu(1)\\mu(2)) = (11|11) = 0.700$, as the spins $(\\alpha, \\beta)$ match $(\\alpha, \\beta)$. The exchange integral $(12|21)$ is zero because the spins $(\\alpha, \\beta)$ do not match $(\\beta, \\alpha)$.\n\nNow we apply the Slater-Condon rules.\nFor diagonal elements $\\langle D | \\hat{H} | D \\rangle$ where $|D\\rangle = |i,j\\rangle$:\n$\\langle i,j | \\hat{H} | i,j \\rangle = h_{ii} + h_{jj} + (ij|ij) - (ij|ji)$.\n$H_{11} = h_{11}+h_{22}+(12|12)-(12|21) = -1.000-1.000+0.700-0 = -1.300$.\n$H_{22} = h_{11}+h_{33}+(13|13)-(13|31) = -1.000-0.500+0-0.200 = -1.700$.\n$H_{33} = h_{11}+h_{44}+(14|14)-(14|41) = -1.000-0.500+0-0 = -1.500$.\n$H_{44} = h_{22}+h_{33}+(23|23)-(23|32) = -1.000-0.500+0-0 = -1.500$.\n$H_{55} = h_{22}+h_{44}+(24|24)-(24|42) = -1.000-0.500+0-0.200 = -1.700$.\n$H_{66} = h_{33}+h_{44}+(34|34)-(34|43) = -0.500-0.500+0.600-0 = -0.400$.\n\nFor off-diagonal elements between determinants differing by one spin-orbital, e.g. $\\langle i,j|\\hat{H}|k,j\\rangle$ (excitation $i \\to k$ with common orbital $j$): $\\langle i,j|\\hat{H}|k,j\\rangle = \\pm (h_{ik} + \\sum_{l \\in \\{i,j\\}}[(il|kl)-(il|lk)])$. The sign depends on operator ordering.\n$H_{13}=\\langle 1,2|\\hat{H}|1,4\\rangle$: excitation $2 \\to 4$. Element is $h_{24} + (21|41) - (21|14) = -0.100+0-0 = -0.100$.\n$H_{14}=\\langle 1,2|\\hat{H}|2,3\\rangle$: excitation $1 \\to 3$. These determinants differ by a single excitation ($1\\to3$) and a reordering of indices. Using the single-excitation rule for $\\langle 1,2 | H | 3,2 \\rangle$ gives $h_{13} + (12|32) - (13|23) = -0.100$, since the two-electron integrals are zero. Because $|2,3\\rangle = -|3,2\\rangle$, the matrix element is $H_{14} = -\\langle 1,2 | H | 3,2 \\rangle = -(-0.100) = 0.100$.\n$H_{36}=\\langle 1,4|\\hat{H}|3,4\\rangle$: excitation $1 \\to 3$. Element is $h_{13} + (14|34) - (14|43) = -0.100+0-0 = -0.100$.\n$H_{46}=\\langle 2,3|\\hat{H}|3,4\\rangle$: excitation $2 \\to 4$. Similar to $H_{14}$, this requires a sign flip. The rule for $\\langle 2,3|H|4,3\\rangle$ gives $h_{24} = -0.100$. With the sign flip for $|3,4\\rangle = -|4,3\\rangle$, we get $H_{46}=-(-0.100)=0.100$.\n\nFor off-diagonal elements between determinants differing by two spin-orbitals, e.g. $\\langle i,j|\\hat{H}|k,l\\rangle$: the rule is $\\langle ij|V|kl\\rangle = (ik|jl) - (il|jk)$.\n$H_{16}=\\langle 1,2|\\hat{H}|3,4\\rangle$: double excitation $(1,2) \\to (3,4)$. Element is $(13|24) - (14|23)$. Both integrals are zero due to spin mismatch, so $H_{16}=0$.\n$H_{34}=\\langle 1,4|\\hat{H}|2,3\\rangle$: double excitation $(1,4) \\to (2,3)$. Element is $(12|43) - (13|42)$. Both integrals are zero due to spin mismatch, so $H_{34}=0$.\n\n**1. The Full CI Hamiltonian Matrix**\nAssembling these elements gives the $6 \\times 6$ FCI matrix $\\mathbf{H}$:\n$$\n\\mathbf{H} =\n\\begin{pmatrix}\n-1.300 & 0 & -0.100 & 0.100 & 0 & 0 \\\\\n0 & -1.700 & 0 & 0 & 0 & 0 \\\\\n-0.100 & 0 & -1.500 & 0 & 0 & -0.100 \\\\\n0.100 & 0 & 0 & -1.500 & 0 & 0.100 \\\\\n0 & 0 & 0 & 0 & -1.700 & 0 \\\\\n0 & 0 & -0.100 & 0.100 & 0 & -0.400\n\\end{pmatrix}\n$$\n\n**2. Hermiticity and Consistency**\nThe constructed matrix is explicitly Hermitian, as $H_{IJ} = H_{JI}$ for all $I,J$. The structure is fully consistent with the consequences of the Slater-Condon rules and fundamental symmetries. The block-diagonal nature with respect to $M_S$ is evident: the matrix elements $H_{IJ}$ are zero if $D_I$ and $D_J$ have different $M_S$ values. Specifically, the basis states $D_2$ ($M_S=1$) and $D_5$ ($M_S=-1$) are decoupled from all other states and each other. The remaining states $D_1, D_3, D_4, D_6$ form the $M_S=0$ block. This confirms the physical consistency of the calculation.\n\n**3. Trace of the FCI Hamiltonian Matrix**\nThe trace of a matrix is the sum of its diagonal elements.\n$$ \\text{Tr}(\\mathbf{H}) = \\sum_{I=1}^{6} H_{II} $$\n$$ \\text{Tr}(\\mathbf{H}) = (-1.300) + (-1.700) + (-1.500) + (-1.500) + (-1.700) + (-0.400) $$\n$$ \\text{Tr}(\\mathbf{H}) = -8.100 $$\nThe trace is $-8.100$ Hartree.\n\nAs a verification, the trace can also be computed from the trace formula for a two-electron system in a basis of $N=4$ spin-orbitals ($n=2$):\n$$ \\text{Tr}(\\mathbf{H}) = \\binom{N-1}{n-1}\\sum_{p=1}^N h_{pp} + \\binom{N-2}{n-2}\\sum_{p<q}^N \\left((pq|pq) - (pq|qp)\\right) $$\n$$ \\text{Tr}(\\mathbf{H}) = \\binom{3}{1}\\sum_{p=1}^4 h_{pp} + \\binom{2}{0}\\sum_{p<q}^4 \\left((pq|pq) - (pq|qp)\\right) $$\nThe one-electron part is $3 \\times (h_{11}+h_{22}+h_{33}+h_{44}) = 3(-1.000-1.000-0.500-0.500) = 3(-3.000) = -9.000$.\nThe two-electron part is $\\sum_{p<q} \\left((pq|pq) - (pq|qp)\\right) = (0.700) + (-0.200) + (0) + (0) + (-0.200) + (0.600) = 0.900$.\nThe total trace is $-9.000 + 0.900 = -8.100$.\nBoth methods yield the same result, confirming the calculation.", "answer": "$$\\boxed{-8.100}$$", "id": "2797542"}, {"introduction": "The language of quantum chemistry, based on fermionic operators, must be translated into the language of qubits. This practice focuses on this essential mapping process, specifically using the Jordan-Wigner transformation to convert fermionic excitation operators from the Unitary Coupled Cluster (UCC) ansatz into Pauli strings that can be implemented on a quantum computer [@problem_id:2797393]. By calculating the resulting CNOT gate count, you will also gain valuable, hands-on experience in estimating the quantum resources required to run such simulations, a critical skill in the era of noisy, intermediate-scale quantum (NISQ) devices.", "problem": "Consider the Unitary Coupled Cluster Singles and Doubles (UCCSD) ansatz term-by-term under the Jordanâ€“Wigner (JW) mapping from fermions to qubits. You will work with a register of $8$ spin-orbitals ordered linearly and indexed by $0,1,2,3,4,5,6,7$ in increasing order. Use the JW transform defined by\n$a_p = \\left(\\prod_{m=0}^{p-1} Z_m\\right)\\frac{X_p + i Y_p}{2}$ and $a_p^{\\dagger} = \\left(\\prod_{m=0}^{p-1} Z_m\\right)\\frac{X_p - i Y_p}{2}$, where $X_p$, $Y_p$, and $Z_p$ are Pauli operators on qubit $p$. The UCC generators are of the form $\\tau_{pq} = a_p^{\\dagger} a_q - a_q^{\\dagger} a_p$ for a single excitation and $\\tau_{abij} = a_a^{\\dagger} a_b^{\\dagger} a_j a_i - a_i^{\\dagger} a_j^{\\dagger} a_b a_a$ for a double excitation.\n\nAdopt the following compilation strategy:\n- Use first-order Trotterization with a single Trotter step, so $\\exp(-i \\theta (A+B+\\dots))$ is compiled as the ordered product of $\\exp(-i \\theta A)$, $\\exp(-i \\theta B)$, and so on.\n- Compile each Pauli-string exponential $\\exp\\!\\left(-i \\theta P\\right)$ using single-qubit basis changes to convert all non-$Z$ Paulis in $P$ to $Z$, followed by a linear parity network acting only on the qubits on which $P$ is non-identity, and then the inverse operations to uncompute. Count only controlled-NOT (CNOT) gates; ignore single-qubit gates.\n- Do not reuse or cancel entanglers across different exponentials. Treat each exponential independently.\n\nWork out, from first principles, the Jordanâ€“Wigner images of the generators and the structure of the resulting Pauli strings, then derive the number of CNOT gates required by the above compilation for:\n- One single excitation from $q=1$ to $p=5$.\n- One double excitation from occupied $i=0$, $j=2$ to virtual $b=5$, $a=7$ (so $i<j<b<a$).\n\nFinally, compute the total CNOT count needed to implement both unitaries once (one Trotter step each) under this strategy. Report a single integer as your final answer. No rounding is needed, and there are no physical units to report.", "solution": "The generators $\\tau$ are anti-Hermitian, so the corresponding unitaries are of the form $\\exp(\\theta \\tau) = \\exp(-i\\theta H)$, where $H = i\\tau$ is a Hermitian operator. We will determine the Pauli string decomposition of these Hermitian operators $H$ and calculate the associated CNOT costs.\n\nThe CNOT cost for implementing the exponential of a Pauli string $P = \\otimes_{k=1}^N O_k$ (where $O_k \\in \\{I, X, Y, Z\\}$) is determined by its weight, which is the number of non-identity operators. If the weight is $k$, the CNOT cost is $2(k-1)$.\n\nPart 1: Single Excitation from $q=1$ to $p=5$\n\nThe single excitation operator is $\\tau_{pq} = a_p^{\\dagger} a_q - a_q^{\\dagger} a_p$. For $p > q$, the corresponding Hermitian operator is $H_{pq} = i\\tau_{pq} = \\frac{1}{2} (Y_p Z_{p-1} \\dots Z_{q+1} X_q - X_p Z_{p-1} \\dots Z_{q+1} Y_q)$.\n\nFor the specific case $p=5, q=1$:\n$H_{51} = \\frac{1}{2} (Y_5 Z_4 Z_3 Z_2 X_1 - X_5 Z_4 Z_3 Z_2 Y_1)$.\nWe can reorder the commuting Pauli operators by index. This gives a sum of two Pauli strings:\n$H_{51} = \\frac{1}{2} (P_1 - P_2)$, where:\n$P_1 = X_1 Z_2 Z_3 Z_4 Y_5$\n$P_2 = Y_1 Z_2 Z_3 Z_4 X_5$\nThe unitary $\\exp(-i\\theta H_{51})$ is Trotterized to $\\exp(-i\\frac{\\theta}{2}P_1)\\exp(i\\frac{\\theta}{2}P_2)$. We must count the CNOTs for each term.\nBoth Pauli strings $P_1$ and $P_2$ act non-trivially on qubits $\\{1, 2, 3, 4, 5\\}$.\nThe weight of both strings is $k=5$.\nThe CNOT cost for one string is $2(k-1) = 2(5-1) = 8$.\nSince there are two Pauli strings, the total CNOT cost for the single excitation is $2 \\times 8 = 16$.\n\nPart 2: Double Excitation from $i=0, j=2$ to $b=5, a=7$\n\nThe generator is $\\tau_{abij} = a_a^{\\dagger} a_b^{\\dagger} a_j a_i - \\text{h.c.}$, with the ordering $i<j<b<a$. The corresponding Hermitian operator, $H_{abij} = i\\tau_{abij}$, expands into a sum of 8 unique Pauli strings. We need to determine the weight of these strings.\n\nUsing the Jordan-Wigner transformation rules, the term $a_a^{\\dagger} a_b^{\\dagger} a_j a_i$ is mapped to a product of Pauli operators. The Z-strings arise from the indices between the fermionic operators.\nThe term $a_j a_i$ (for $i=0, j=2$) generates a Z-string on the qubits between $i$ and $j$, i.e., on qubit 1.\nThe term $a_a^{\\dagger} a_b^{\\dagger}$ (for $b=5, a=7$) generates a Z-string on the qubits between $b$ and $a$, i.e., on qubit 6.\nThe four-body Pauli operators ($X$ or $Y$) act on qubits $\\{i,j,b,a\\}$, which are $\\{0, 2, 5, 7\\}$.\nThe total set of qubits involved (the support) for any of the 8 Pauli strings is the union of the indices from the Z-strings and the four-body operators: $\\{1\\} \\cup \\{6\\} \\cup \\{0,2,5,7\\} = \\{0,1,2,5,6,7\\}$.\nThe weight $k$ of each of the 8 Pauli strings is the size of this set, which is $k=6$.\nThe CNOT cost for each of the 8 Pauli exponentials is $2(k-1) = 2(6-1) = 10$.\nThe total CNOT cost for the double excitation is $8 \\times 10 = 80$.\n\nPart 3: Total CNOT Count\n\nThe total CNOT count is the sum of the costs for the single and double excitations.\nTotal CNOTs = CNOTs(single) + CNOTs(double)\nTotal CNOTs = $16 + 80 = 96$.\nThis is the final result.", "answer": "$$\\boxed{96}$$", "id": "2797393"}, {"introduction": "This final practice moves from static operator mapping to the implementation of a dynamic, advanced variational algorithm. You will implement a core iteration of the ADAPT-VQE method, an algorithm that intelligently builds the quantum circuit ansatz based on the physical properties of the molecule [@problem_id:2797401]. By calculating the energy gradients for a pool of quantum operators and selecting the one that will most effectively lower the energy, you are simulating the \"brains\" of a sophisticated quantum experiment, gaining insight into how these algorithms navigate the complex energy landscapes to find molecular ground states.", "problem": "Implement a single iteration of the Adaptive Derivative-Assembled Pseudo-Trotter (ADAPT) variational quantum eigensolver for a minimal active-space model of beryllium hydride by computing the energy gradients of a pool of anti-Hermitian excitation generators on a given state and selecting the operator with the largest magnitude gradient to append. The implementation must be a complete, runnable program that constructs the electronic Hamiltonian in second quantization, maps it to a qubit Hilbert space using the Jordanâ€“Wigner transformation, constructs the operator pool of particle-number-conserving single and double excitations as anti-Hermitian generators, evaluates the first-order energy derivatives for three specified test states, and reports a selection decision for each test case.\n\nStart from the following fundamental base:\n- The Bornâ€“Oppenheimer electronic Hamiltonian in second quantization for a spin-orbital basis is\n  $$\\hat{H} = \\sum_{p,q} h_{pq}\\,\\hat{a}^{\\dagger}_p \\hat{a}_q + \\frac{1}{2}\\sum_{p,q,r,s} g_{pqrs}\\,\\hat{a}^{\\dagger}_p \\hat{a}^{\\dagger}_q \\hat{a}_s \\hat{a}_r,$$\n  where $h_{pq}$ are one-electron integrals and $g_{pqrs}$ are two-electron Coulomb integrals in chemistâ€™s notation.\n- The Jordanâ€“Wigner mapping sends fermionic creation and annihilation operators to qubit operators acting on the computational basis of occupation bitstrings. In the computational basis $\\{\\lvert n\\rangle\\}$ indexed by bitstrings of length $N$ (with bit $j$ encoding the occupation number of spin-orbital $j$), the actions of $\\hat{a}_j$ and $\\hat{a}^{\\dagger}_j$ on basis states are defined by their algebra together with the sign rule arising from fermionic anticommutation. In algorithmic form, for a basis state $\\lvert n\\rangle$ with occupation bits $n_k \\in \\{0,1\\}$,\n  - If $n_j = 1$, then\n    $$\\hat{a}_j \\lvert n\\rangle = (-1)^{\\sum_{k<j} n_k}\\,\\lvert n_0,\\dots,n_j-1,\\dots,n_{N-1}\\rangle,$$\n    else $\\hat{a}_j \\lvert n\\rangle = 0$.\n  - If $n_j = 0$, then\n    $$\\hat{a}^{\\dagger}_j \\lvert n\\rangle = (-1)^{\\sum_{k<j} n_k}\\,\\lvert n_0,\\dots,n_j+1,\\dots,n_{N-1}\\rangle,$$\n    else $\\hat{a}^{\\dagger}_j \\lvert n\\rangle = 0$.\n- A unitary ansatz factor generated by an anti-Hermitian operator $\\hat{A}_k$ is $\\exp(\\theta_k \\hat{A}_k)$. For a given state $\\lvert \\psi\\rangle$, the energy functional is\n  $$E_k(\\theta_k) = \\langle \\psi \\rvert e^{-\\theta_k \\hat{A}_k} \\hat{H}\\, e^{\\theta_k \\hat{A}_k} \\lvert \\psi \\rangle,$$\n  and its first derivative at $\\theta_k = 0$ defines the gradient to be used for operator selection. Your program must compute this first derivative for each generator in the pool from first principles.\n\nSystem specification:\n- Use a minimal active space with $N=4$ spin-orbitals indexed by $j \\in \\{0,1,2,3\\}$ and fixed electron number of $2$ electrons for state preparation. Work in atomic units (Hartree). All angles must be treated in radians.\n- One-electron integrals $h_{pq}$ form a real symmetric matrix. Use the following values (units: Hartree), with indices $p,q \\in \\{0,1,2,3\\}$:\n  $$h = \\begin{bmatrix}\n  -1.256 & -0.050 & -0.020 & 0.000 \\\\\n  -0.050 & -1.000 & -0.060 & -0.010 \\\\\n  -0.020 & -0.060 & -0.200 & -0.030 \\\\\n  0.000 & -0.010 & -0.030 & 0.150\n  \\end{bmatrix}.$$\n- Two-electron integrals $g_{pqrs}$ (units: Hartree) obey the chemistâ€™s symmetries\n  $$(pq\\vert rs) = (qp\\vert rs) = (pq\\vert sr) = (rs\\vert pq),$$\n  and are otherwise zero except for the following nonredundant values, which must be symmetrically expanded to all permutations implied by the above symmetries:\n  - Coulomb-like terms:\n    $(0,0\\vert 0,0) = 0.700$, $(1,1\\vert 1,1) = 0.600$, $(2,2\\vert 2,2) = 0.500$, $(3,3\\vert 3,3) = 0.480$,\n    $(0,0\\vert 1,1) = 0.675$, $(0,0\\vert 2,2) = 0.450$, $(0,0\\vert 3,3) = 0.430$,\n    $(1,1\\vert 2,2) = 0.420$, $(1,1\\vert 3,3) = 0.410$, $(2,2\\vert 3,3) = 0.400$.\n  - Exchange-like terms:\n    $(0,1\\vert 1,0) = 0.100$, $(0,2\\vert 2,0) = 0.080$, $(1,2\\vert 2,1) = 0.070$,\n    $(0,3\\vert 3,0) = 0.060$, $(1,3\\vert 3,1) = 0.050$, $(2,3\\vert 3,2) = 0.040$.\n  All other $g_{pqrs}$ not implied by these by symmetry must be set to $0$.\n- Construct the operator pool of anti-Hermitian particle-number-conserving excitations relative to the closed-shell reference with occupied spin-orbitals $\\{0,1\\}$ and virtuals $\\{2,3\\}$:\n  - Single excitations for all $(p \\rightarrow r)$ with $p \\in \\{0,1\\}$ and $r \\in \\{2,3\\}$, as\n    $$\\hat{A}^{(1)}_{p\\rightarrow r} = \\hat{a}^{\\dagger}_r \\hat{a}_p - \\hat{a}^{\\dagger}_p \\hat{a}_r.$$\n  - One double excitation moving the pair $(0,1)$ to $(2,3)$,\n    $$\\hat{A}^{(2)}_{01\\rightarrow 23} = \\hat{a}^{\\dagger}_2 \\hat{a}^{\\dagger}_3 \\hat{a}_1 \\hat{a}_0 - \\hat{a}^{\\dagger}_0 \\hat{a}^{\\dagger}_1 \\hat{a}_3 \\hat{a}_2.$$\n  Use the operator ordering convention as written. The resulting pool contains $5$ generators in the order\n  $(0\\rightarrow 2)$, $(0\\rightarrow 3)$, $(1\\rightarrow 2)$, $(1\\rightarrow 3)$, $(01\\rightarrow 23)$, which must be indexed in this sequence as $0,1,2,3,4$.\n\nEnergy gradient definition to implement:\n- For each anti-Hermitian generator $\\hat{A}_k$, define $E_k(\\theta_k) = \\langle \\psi \\rvert e^{-\\theta_k \\hat{A}_k} \\hat{H}\\, e^{\\theta_k \\hat{A}_k} \\lvert \\psi \\rangle$. Your program must compute the first derivative $\\left.\\frac{dE_k}{d\\theta_k}\\right\\vert_{\\theta_k = 0}$ for each $k$ from the fundamental definitions above. Use the magnitude of this derivative as the selection criterion. If the maximum magnitude across the pool is below a tolerance of $\\tau = 10^{-8}$, report no selection using the integer $-1$.\n\nTest suite and states:\n- Use three test states $|\\psi^{(t)}\\rangle$, $t \\in \\{1,2,3\\}$, all normalized in the $N=4$ qubit Hilbert space ordered by binary counting with bit $j$ holding the occupation of orbital $j$:\n  1) $|\\psi^{(1)}\\rangle$ is the closed-shell reference determinant with orbitals $\\{0,1\\}$ occupied, i.e., the computational basis vector $|\\text{1100}\\rangle$.\n  2) $|\\psi^{(2)}\\rangle$ is obtained by applying a small unitary rotation generated by the single excitation $(0\\rightarrow 2)$ on $|\\psi^{(1)}\\rangle$,\n     $$|\\psi^{(2)}\\rangle = e^{\\epsilon \\hat{A}^{(1)}_{0\\rightarrow 2}} |\\psi^{(1)}\\rangle,$$\n     with $\\epsilon = 0.15$ in radians.\n  3) $|\\psi^{(3)}\\rangle$ is the exact ground state of $\\hat{H}$ restricted to the two-electron subspace (i.e., the subspace spanned by all bitstrings with Hamming weight $2$). This state must be obtained by diagonalizing $\\hat{H}$ projected onto that subspace and selecting the eigenvector corresponding to the lowest eigenvalue, then embedding it back into the full $2^N$-dimensional Hilbert space.\n\nProgram requirements:\n- Construct $\\hat{H}$ from the provided $h_{pq}$ and $g_{pqrs}$, the Jordanâ€“Wigner-defined matrices for $\\hat{a}_j$ and $\\hat{a}^{\\dagger}_j$, and the second-quantized expression. Use double-precision complex arithmetic.\n- For each test state, compute the list of gradient magnitudes for the $5$ generators evaluated at $\\theta_k = 0$ as defined above, select the index of the generator with the largest magnitude, and apply the tolerance rule for declaring no selection ($-1$).\n- Final output format: Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets (e.g., \"[result1,result2,result3]\"), where each result is the selected operator index (an integer in $\\{0,1,2,3,4\\}$) or $-1$ if no selection is made.\n\nAngle unit: All angles must be in radians. No other physical units are required in the output because the program reports integer indices only.\n\nYour program must be self-contained and must not require any input. It must compute and print the indices for the three specified test cases in the exact required format.", "solution": "The core of the ADAPT-VQE selection step is the computation of the energy gradient for each operator $\\hat{A}_k$ in the pool. The gradient for a state $\\lvert \\psi \\rangle$ is given by the first derivative of the energy functional $E_k(\\theta_k)$ at $\\theta_k=0$:\n$$ \\left.\\frac{dE_k}{d\\theta_k}\\right\\vert_{\\theta_k = 0} = \\left. \\frac{d}{d\\theta_k} \\langle \\psi \\rvert e^{-\\theta_k \\hat{A}_k} \\hat{H}\\, e^{\\theta_k \\hat{A}_k} \\lvert \\psi \\rangle \\right\\vert_{\\theta_k = 0} $$\nApplying the product rule and evaluating at $\\theta_k=0$ yields:\n$$ \\left.\\frac{dE_k}{d\\theta_k}\\right\\vert_{\\theta_k = 0} = \\langle \\psi \\rvert (-\\hat{A}_k \\hat{H} + \\hat{H} \\hat{A}_k) \\lvert \\psi \\rangle = \\langle \\psi \\rvert [\\hat{H}, \\hat{A}_k] \\lvert \\psi \\rangle $$\nSince $\\hat{H}$ is Hermitian and $\\hat{A}_k$ is anti-Hermitian, the commutator $[\\hat{H}, \\hat{A}_k]$ is a Hermitian operator, and its expectation value is real. The algorithm requires finding the index $k$ that maximizes the magnitude of this gradient, $|\\langle \\psi \\rvert [\\hat{H}, \\hat{A}_k] \\lvert \\psi \\rangle|$.\n\nThe solution is implemented by following these main steps:\n\n1.  **Matrix Representation of Fermionic Operators**: The Jordan-Wigner transformation is used to construct the $2^N \\times 2^N$ matrix representations of the fermionic annihilation ($\\hat{a}_j$) and creation ($\\hat{a}^{\\dagger}_j$) operators for each of the $N=4$ spin-orbitals.\n\n2.  **Hamiltonian Construction**: The full electronic Hamiltonian matrix $\\hat{H}$ is assembled using the matrix representations of the fermionic operators and the provided one- and two-electron integral tensors, following the standard conventions for second quantization.\n\n3.  **Operator Pool Construction**: The matrix representations for the five anti-Hermitian excitation generators $\\hat{A}_k$ are constructed from the fermionic operator matrices according to their definitions.\n\n4.  **Test State Preparation**: The three test states are prepared as $16$-dimensional column vectors. State 1 is the Hartree-Fock reference. State 2 is prepared by applying a matrix exponential to State 1. State 3 is prepared by finding the ground state of the Hamiltonian within the 2-electron subspace.\n\n5.  **Gradient Evaluation and Selection**: For each test state and each generator, the commutator matrix $[\\hat{H}, \\hat{A}_k]$ is computed, and its expectation value is calculated to find the gradient. The index corresponding to the largest gradient magnitude is selected, subject to the defined tolerance.\n\nThe entire procedure is encapsulated in the self-contained program below, which executes these steps and prints the final selection indices for the three test cases.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.linalg import expm\nfrom itertools import combinations\n\ndef solve():\n    \"\"\"\n    Implements a single iteration of the ADAPT-VQE algorithm for a BeH model.\n    \"\"\"\n    \n    # --- System and problem parameters ---\n    N_QUBITS = 4\n    N_ELECTRONS = 2\n    HILBERT_DIM = 2**N_QUBITS\n    TOLERANCE = 1e-8\n\n    # --- Step 1: Matrix Representation of Fermionic Operators (Jordan-Wigner) ---\n    def get_jw_operators(n_qubits):\n        \"\"\"Constructs Jordan-Wigner matrices for creation and annihilation operators.\"\"\"\n        dim = 2**n_qubits\n        a_ops = [np.zeros((dim, dim), dtype=np.complex128) for _ in range(n_qubits)]\n        adag_ops = [np.zeros((dim, dim), dtype=np.complex128) for _ in range(n_qubits)]\n\n        for i in range(dim):\n            for j in range(n_qubits):\n                parity_mask = (1  j) - 1\n                parity = bin(i  parity_mask).count('1')\n                sign = (-1)**parity\n\n                bit_mask = 1  j\n                is_occupied = (i  bit_mask) != 0\n\n                if is_occupied:\n                    # Annihilation operator a_j\n                    final_state_idx = i ^ bit_mask\n                    a_ops[j][final_state_idx, i] = sign\n                else:\n                    # Creation operator a_j^\\dagger\n                    final_state_idx = i | bit_mask\n                    adag_ops[j][final_state_idx, i] = sign\n        return a_ops, adag_ops\n\n    a_ops, adag_ops = get_jw_operators(N_QUBITS)\n\n    # --- Step 2: Construct the Hamiltonian Matrix ---\n    # One-electron integrals h_pq\n    h_pq = np.array([\n        [-1.256, -0.050, -0.020, 0.000],\n        [-0.050, -1.000, -0.060, -0.010],\n        [-0.020, -0.060, -0.200, -0.030],\n        [ 0.000, -0.010, -0.030, 0.150]\n    ])\n\n    # Two-electron integrals g_pqrs (chemist's notation)\n    g_raw = {\n        (0,0,0,0): 0.700, (1,1,1,1): 0.600, (2,2,2,2): 0.500, (3,3,3,3): 0.480,\n        (0,0,1,1): 0.675, (0,0,2,2): 0.450, (0,0,3,3): 0.430,\n        (1,1,2,2): 0.420, (1,1,3,3): 0.410, (2,2,3,3): 0.400,\n        (0,1,0,1): 0.100, (0,2,0,2): 0.080, (1,2,1,2): 0.070,\n        (0,3,0,3): 0.060, (1,3,1,3): 0.050, (2,3,2,3): 0.040,\n    }\n\n    g_chem = np.zeros((N_QUBITS, N_QUBITS, N_QUBITS, N_QUBITS))\n    for p in range(N_QUBITS):\n        for q in range(N_QUBITS):\n            for r in range(N_QUBITS):\n                for s in range(N_QUBITS):\n                    # Create canonical key for lookup\n                    key_pq = tuple(sorted((p, q)))\n                    key_rs = tuple(sorted((r, s)))\n                    key_tuple = tuple(sorted((key_pq, key_rs)))\n                    key = key_tuple[0] + key_tuple[1]\n                    # Handle exchange-like terms\n                    key_psqr = tuple(sorted((tuple(sorted((p, s))), tuple(sorted((q, r))))))\n                    key_psqr_flat = key_psqr[0] + key_psqr[1]\n\n                    if key in g_raw:\n                        g_chem[p, q, r, s] = g_raw.get(key, 0.0)\n                    elif key_psqr_flat in g_raw:\n                        g_chem[p,s,q,r] = g_raw.get(key_psqr_flat, 0.0)\n\n    # Re-symmetrize to be safe\n    for p in range(N_QUBITS):\n        for q in range(N_QUBITS):\n            for r in range(N_QUBITS):\n                for s in range(N_QUBITS):\n                    g_chem[p,q,r,s] = g_chem[q,p,r,s]\n                    g_chem[p,q,r,s] = g_chem[p,q,s,r]\n                    g_chem[p,q,r,s] = g_chem[r,s,p,q]\n\n    # Construct Hamiltonian matrix\n    H = np.zeros((HILBERT_DIM, HILBERT_DIM), dtype=np.complex128)\n    # One-electron part\n    for p in range(N_QUBITS):\n        for q in range(N_QUBITS):\n            H += h_pq[p, q] * (adag_ops[p] @ a_ops[q])\n            \n    # Two-electron part using physics convention g_pqrs=(pr|qs)\n    for p in range(N_QUBITS):\n        for q in range(N_QUBITS):\n            for r in range(N_QUBITS):\n                for s in range(N_QUBITS):\n                    g_phys_val = g_chem[p, r, q, s]\n                    op_term = adag_ops[p] @ adag_ops[q] @ a_ops[s] @ a_ops[r]\n                    H += 0.5 * g_phys_val * op_term\n\n    # --- Step 3: Construct the Operator Pool Matrices ---\n    pool = []\n    # Single excitations\n    singles_map = [(0, 2), (0, 3), (1, 2), (1, 3)]\n    for p, r in singles_map:\n        A_k = (adag_ops[r] @ a_ops[p]) - (adag_ops[p] @ a_ops[r])\n        pool.append(A_k)\n    # Double excitation\n    p, q, r, s = 0, 1, 2, 3\n    A_double = (adag_ops[r] @ adag_ops[s] @ a_ops[q] @ a_ops[p]) - \\\n               (adag_ops[p] @ adag_ops[q] @ a_ops[s] @ a_ops[r])\n    pool.append(A_double)\n\n    # --- Step 4: Prepare the Test States ---\n    test_states = []\n    \n    # State 1: |1100> ket is interpreted as occupied orbitals {0,1}, which is bitstring 0011_2 = 3\n    psi1 = np.zeros(HILBERT_DIM, dtype=np.complex128)\n    psi1[3] = 1.0\n    test_states.append(psi1)\n    \n    # State 2: Rotated state\n    epsilon = 0.15\n    A0 = pool[0] # A^(1)_{0->2}\n    U = expm(epsilon * A0)\n    psi2 = U @ psi1\n    test_states.append(psi2)\n    \n    # State 3: Exact ground state in 2-electron subspace\n    subspace_indices = []\n    bit_indices = [i for i in range(HILBERT_DIM) if bin(i).count('1') == N_ELECTRONS]\n    \n    H_subspace = H[np.ix_(bit_indices, bit_indices)]\n    eigvals, eigvecs = np.linalg.eigh(H_subspace)\n    \n    gs_subspace_vec = eigvecs[:, 0]\n    psi3 = np.zeros(HILBERT_DIM, dtype=np.complex128)\n    psi3[bit_indices] = gs_subspace_vec\n    test_states.append(psi3)\n\n    # --- Step 5: Gradient Evaluation and Selection ---\n    final_results = []\n    for psi in test_states:\n        gradients = []\n        for A_k in pool:\n            commutator = (H @ A_k) - (A_k @ H)\n            grad = np.vdot(psi, commutator @ psi)\n            gradients.append(grad.real)\n        \n        gradients = np.array(gradients)\n        abs_gradients = np.abs(gradients)\n        \n        max_grad_mag = np.max(abs_gradients)\n        \n        if max_grad_mag  TOLERANCE:\n            selected_index = -1\n        else:\n            selected_index = np.argmax(abs_gradients)\n            \n        final_results.append(selected_index)\n\n    # Format and print the final output\n    print(f\"[{','.join(map(str, final_results))}]\")\n\nsolve()\n```", "id": "2797401"}]}