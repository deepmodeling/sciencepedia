{"hands_on_practices": [{"introduction": "A cornerstone of molecular dynamics is the use of periodic boundary conditions (PBC) to simulate a small portion of matter as if it were part of a larger, bulk system, thereby minimizing finite-size effects. The successful implementation of PBC hinges on correctly calculating the shortest distance between particles, a concept known as the minimum image convention (MIC). This foundational exercise will guide you through implementing the MIC for an orthorhombic simulation box, a critical skill for developing or understanding any MD simulation code [@problem_id:2458300].", "problem": "You are to write a complete, runnable program that demonstrates the effect of the minimum image convention for periodic boundary conditions in molecular dynamics (MD) simulations. The program must compute the Euclidean distance between two particles in an orthorhombic periodic simulation box in two ways: (1) the naive Euclidean distance that ignores periodicity, and (2) the Euclidean distance after applying the minimum image convention. Distances must be expressed in nanometers (nm) and reported rounded to exactly six decimal places.\n\nBackground and fundamental base: In molecular dynamics (MD) simulations with periodic boundary conditions (PBC), an infinite tiling of the finite simulation box is used to mimic bulk behavior. The physical distance between two particles is interpreted as the minimum distance between one particle and any periodic image of the other. The underlying geometric rule is derived from the definition of Euclidean distance and the translation symmetry of the lattice. For an orthorhombic box with side lengths $L_x$, $L_y$, and $L_z$, the minimum distance is obtained by selecting an integer number of box-length translations along each axis that minimizes the Euclidean norm of the displacement vector. Your program must implement this rule.\n\nYour task:\n- Define a function that, given two $3$-dimensional positions $\\mathbf{r}_i$ and $\\mathbf{r}_j$ in nanometers and box lengths $(L_x,L_y,L_z)$ in nanometers, returns two values:\n  1) the naive Euclidean distance $d_{\\text{naive}} = \\lVert \\mathbf{r}_j - \\mathbf{r}_i \\rVert$ in nm,\n  2) the minimum image convention distance $d_{\\text{mic}}$ in nm, obtained by translating the displacement components by integer multiples of $(L_x,L_y,L_z)$ to minimize the norm.\n- Treat the box as orthorhombic and axis-aligned.\n- Positions may lie outside the primary box interval. Your implementation must still correctly compute $d_{\\text{mic}}$ using periodicity.\n- To make your implementation clear, also include within the program a multi-line pseudocode string (not printed) that outlines the minimum image convention logic you implemented.\n\nNumerical and unit requirements:\n- All distances must be in nanometers (nm).\n- Report distances rounded to exactly $6$ decimal places.\n\nTest suite:\nYour program must compute $[d_{\\text{naive}}, d_{\\text{mic}}]$ for each of the following $5$ test cases, in the stated order.\n\n1) Happy path, small separation well within the box:\n- Box: $(L_x,L_y,L_z) = (\\,3.0\\,\\text{nm},\\,3.0\\,\\text{nm},\\,3.0\\,\\text{nm}\\,)$\n- $\\mathbf{r}_i = (\\,0.5\\,\\text{nm},\\,1.0\\,\\text{nm},\\,1.5\\,\\text{nm}\\,)$\n- $\\mathbf{r}_j = (\\,0.7\\,\\text{nm},\\,1.2\\,\\text{nm},\\,1.6\\,\\text{nm}\\,)$\n\n2) Crossing a periodic boundary along one axis:\n- Box: $(L_x,L_y,L_z) = (\\,3.0\\,\\text{nm},\\,3.0\\,\\text{nm},\\,3.0\\,\\text{nm}\\,)$\n- $\\mathbf{r}_i = (\\,0.1\\,\\text{nm},\\,1.0\\,\\text{nm},\\,1.0\\,\\text{nm}\\,)$\n- $\\mathbf{r}_j = (\\,2.9\\,\\text{nm},\\,1.0\\,\\text{nm},\\,1.0\\,\\text{nm}\\,)$\n\n3) Anisotropic box and wrapping along multiple axes:\n- Box: $(L_x,L_y,L_z) = (\\,2.0\\,\\text{nm},\\,4.0\\,\\text{nm},\\,5.0\\,\\text{nm}\\,)$\n- $\\mathbf{r}_i = (\\,1.9\\,\\text{nm},\\,0.2\\,\\text{nm},\\,4.8\\,\\text{nm}\\,)$\n- $\\mathbf{r}_j = (\\,0.1\\,\\text{nm},\\,3.9\\,\\text{nm},\\,0.3\\,\\text{nm}\\,)$\n\n4) Exactly half-box separation along one axis (tie case):\n- Box: $(L_x,L_y,L_z) = (\\,4.0\\,\\text{nm},\\,4.0\\,\\text{nm},\\,4.0\\,\\text{nm}\\,)$\n- $\\mathbf{r}_i = (\\,0.0\\,\\text{nm},\\,0.0\\,\\text{nm},\\,0.0\\,\\text{nm}\\,)$\n- $\\mathbf{r}_j = (\\,2.0\\,\\text{nm},\\,0.0\\,\\text{nm},\\,0.0\\,\\text{nm}\\,)$\n\n5) Positions outside the primary box interval:\n- Box: $(L_x,L_y,L_z) = (\\,3.0\\,\\text{nm},\\,3.0\\,\\text{nm},\\,3.0\\,\\text{nm}\\,)$\n- $\\mathbf{r}_i = (\\,{-}0.1\\,\\text{nm},\\,{-}0.1\\,\\text{nm},\\,{-}0.1\\,\\text{nm}\\,)$\n- $\\mathbf{r}_j = (\\,3.1\\,\\text{nm},\\,3.1\\,\\text{nm},\\,3.1\\,\\text{nm}\\,)$\n\nFinal output format:\n- Your program should produce a single line of output containing the results as a comma-separated list of pairs enclosed in square brackets. Each pair corresponds to one test case in the specified order and must have the form $[d_{\\text{naive}},d_{\\text{mic}}]$, with both values rounded to exactly $6$ decimal places in nanometers. There must be no spaces in the output.\n- For example, the required overall format is like $[[a_1,b_1],[a_2,b_2],\\dots]$ where each $a_k$ and $b_k$ are floats in nanometers with exactly $6$ decimal places.", "solution": "The problem posed is a fundamental exercise in computational statistical mechanics, specifically concerning the implementation of periodic boundary conditions (PBC) in molecular dynamics (MD) simulations. The use of PBC is a standard and necessary technique to approximate the properties of a macroscopic system by simulating a small, finite number of particles. It mitigates the severe surface effects that would otherwise dominate the behavior of a small system. The core of this problem is the correct calculation of inter-particle distances, which is governed by the minimum image convention (MIC).\n\nThe problem is well-posed, scientifically grounded, and provides all necessary data for a unique and verifiable solution. We will proceed with a rigorous derivation and implementation.\n\nLet the orthorhombic simulation box be defined by a set of three orthogonal vectors corresponding to the side lengths, $\\mathbf{L} = (L_x, L_y, L_z)$. The position of two particles, $i$ and $j$, are given by vectors $\\mathbf{r}_i$ and $\\mathbf{r}_j$.\n\nFirst, we define the naive Euclidean distance, $d_{\\text{naive}}$. This is the standard distance in a non-periodic, three-dimensional Euclidean space. It is calculated from the norm of the displacement vector $\\Delta\\mathbf{r} = \\mathbf{r}_j - \\mathbf{r}_i$.\n$$\nd_{\\text{naive}} = \\lVert \\Delta\\mathbf{r} \\rVert = \\sqrt{(\\Delta x)^2 + (\\Delta y)^2 + (\\Delta z)^2}\n$$\nwhere $\\Delta\\mathbf{r} = (\\Delta x, \\Delta y, \\Delta z)$. This calculation ignores the periodic nature of the simulation box and treats the system as if it were isolated in a vacuum.\n\nSecond, we address the minimum image convention distance, $d_{\\text{mic}}$. In a periodic system, the simulation box is replicated infinitely in all directions. A particle at position $\\mathbf{r}$ has an infinite lattice of periodic images at positions $\\mathbf{r} + n_x L_x \\hat{\\mathbf{x}} + n_y L_y \\hat{\\mathbf{y}} + n_z L_z \\hat{\\mathbf{z}}$, where $n_x, n_y, n_z$ are any integers. The physical distance between particle $i$ and particle $j$ is the shortest distance between particle $i$ and *any* of the periodic images of particle $j$.\n\nMathematically, this is expressed as:\n$$\nd_{\\text{mic}} = \\min_{n_x, n_y, n_z \\in \\mathbb{Z}} \\left\\lVert (\\mathbf{r}_j - \\mathbf{r}_i) - (n_x L_x \\hat{\\mathbf{x}} + n_y L_y \\hat{\\mathbf{y}} + n_z L_z \\hat{\\mathbf{z}}) \\right\\rVert\n$$\nFor an orthorhombic box, the minimization of the norm can be performed independently for each Cartesian component. Let us consider the $x$-component of the displacement vector, $\\Delta x = x_j - x_i$. We must find an integer $n_x$ that minimizes $|\\Delta x - n_x L_x|$. This is achieved when $n_x$ is the integer nearest to the ratio $\\Delta x / L_x$. This is the \"nearest integer function,\" often denoted as $\\text{nint}(s)$ or implemented via `round(s)`.\n\nThe MIC-adjusted displacement component, $\\Delta x'$, is therefore:\n$$\n\\Delta x' = \\Delta x - L_x \\cdot \\text{round}\\left(\\frac{\\Delta x}{L_x}\\right)\n$$\nThis formula correctly \"wraps\" the displacement vector component into the interval $[-L_x/2, L_x/2]$. The same logic applies to the $y$ and $z$ components. The complete MIC-adjusted displacement vector, $\\Delta\\mathbf{r}'$, is then:\n$$\n\\Delta\\mathbf{r}' = \\left( \\Delta x - L_x \\cdot \\text{round}\\left(\\frac{\\Delta x}{L_x}\\right), \\Delta y - L_y \\cdot \\text{round}\\left(\\frac{\\Delta y}{L_y}\\right), \\Delta z - L_z \\cdot \\text{round}\\left(\\frac{\\Delta z}{L_z}\\right) \\right)\n$$\nThis vector operation is robust and correctly handles cases where particle coordinates may lie outside the primary simulation box, as only their relative displacement matters.\n\nThe minimum image distance, $d_{\\text{mic}}$, is the Euclidean norm of this adjusted displacement vector:\n$$\nd_{\\text{mic}} = \\lVert \\Delta\\mathbf{r}' \\rVert = \\sqrt{(\\Delta x')^2 + (\\Delta y')^2 + (\\Delta z')^2}\n$$\n\nThe provided test cases will be solved using this established methodology. The implementation will utilize the `numpy` library for efficient vector arithmetic. For each test case, we will compute $d_{\\text{naive}}$ and $d_{\\text{mic}}$ and report the results rounded to precisely $6$ decimal places as specified. The special case of a displacement of exactly half a box length, e.g., $\\Delta x = L_x/2$, is handled by the `round` function, which typically rounds to the nearest even integer (e.g., in `numpy`), but the resulting distance is uniquely $L_x/2$ regardless of the sign choice for the adjusted displacement. For $\\Delta x = L_x/2$, $\\Delta x' = L_x/2 - L_x \\cdot \\text{round}(0.5) = L_x/2 - L_x \\cdot 0 = L_x/2$. The magnitude is unambiguous.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the problem of calculating naive and minimum image convention (MIC)\n    distances for a set of test cases in a molecular dynamics context.\n    \"\"\"\n\n    # Per the problem specification, this multi-line string contains the\n    # pseudocode explaining the implemented MIC logic. It is not printed.\n    # noinspection PyUnusedLocal\n    MIC_PSEUDOCODE = \"\"\"\n    function calculate_minimum_image_distance(r_i, r_j, box_dims):\n        // r_i, r_j: 3D position vectors [x, y, z] of two particles in nm.\n        // box_dims: 3D vector of orthorhombic box lengths [L_x, L_y, L_z] in nm.\n\n        // 1. Calculate the raw displacement vector.\n        //    This is a simple vector subtraction.\n        delta_r = r_j - r_i\n\n        // 2. Apply the minimum image convention to each component of the displacement vector.\n        //    For an orthorhombic box, this can be done independently for each axis.\n        //    The principle is to find the closest periodic image by shifting the displacement\n        //    by an integer number of box lengths. This is mathematically equivalent to\n        //    finding the nearest integer multiple of the box length to subtract.\n        \n        //    Let dr_c be a component of delta_r (e.g., delta_x) and L_c be the\n        //    corresponding box length (e.g., L_x).\n        //    The scaled displacement is s = dr_c / L_c.\n        //    The nearest integer number of box lengths to shift by is n = round(s).\n        //    The MIC-adjusted displacement component is dr'_c = dr_c - n * L_c.\n\n        //    In vector notation, this is:\n        mic_delta_r = delta_r - box_dims * np.round(delta_r / box_dims)\n        \n        // 3. Calculate the Euclidean norm (length) of the MIC-adjusted displacement vector.\n        //    This is the final minimum image distance.\n        distance_mic = sqrt(mic_delta_r[0]^2 + mic_delta_r[1]^2 + mic_delta_r[2]^2)\n        \n        return distance_mic\n    \"\"\"\n\n    def compute_distances(r_i_tuple, r_j_tuple, box_dims_tuple):\n        \"\"\"\n        Calculates naive and MIC distances for a single pair of particles.\n        \n        Args:\n            r_i_tuple (tuple): Position of particle i.\n            r_j_tuple (tuple): Position of particle j.\n            box_dims_tuple (tuple): Orthorhombic box dimensions (Lx, Ly, Lz).\n        \n        Returns:\n            A list containing two floats: [d_naive, d_mic].\n        \"\"\"\n        r_i = np.array(r_i_tuple, dtype=float)\n        r_j = np.array(r_j_tuple, dtype=float)\n        box_dims = np.array(box_dims_tuple, dtype=float)\n\n        # 1. Naive Euclidean distance\n        delta_r_naive = r_j - r_i\n        d_naive = np.linalg.norm(delta_r_naive)\n\n        # 2. Minimum Image Convention (MIC) distance\n        # The logic delta_r - L * round(delta_r / L) correctly finds the\n        # shortest vector in a periodic lattice.\n        delta_r_mic = delta_r_naive - box_dims * np.round(delta_r_naive / box_dims)\n        d_mic = np.linalg.norm(delta_r_mic)\n        \n        return [d_naive, d_mic]\n\n    # Define the test cases from the problem statement.\n    test_cases = [\n        # 1) Happy path, small separation\n        {'r_i': (0.5, 1.0, 1.5), 'r_j': (0.7, 1.2, 1.6), 'box': (3.0, 3.0, 3.0)},\n        # 2) Crossing a periodic boundary\n        {'r_i': (0.1, 1.0, 1.0), 'r_j': (2.9, 1.0, 1.0), 'box': (3.0, 3.0, 3.0)},\n        # 3) Anisotropic box and multi-axis wrapping\n        {'r_i': (1.9, 0.2, 4.8), 'r_j': (0.1, 3.9, 0.3), 'box': (2.0, 4.0, 5.0)},\n        # 4) Exactly half-box separation\n        {'r_i': (0.0, 0.0, 0.0), 'r_j': (2.0, 0.0, 0.0), 'box': (4.0, 4.0, 4.0)},\n        # 5) Positions outside the primary box\n        {'r_i': (-0.1, -0.1, -0.1), 'r_j': (3.1, 3.1, 3.1), 'box': (3.0, 3.0, 3.0)},\n    ]\n\n    result_strings = []\n    for case in test_cases:\n        d_naive, d_mic = compute_distances(case['r_i'], case['r_j'], case['box'])\n        \n        # Format the numbers to exactly 6 decimal places and create the pair string.\n        # This ensures trailing zeros are included and meets the formatting requirement.\n        result_strings.append(f\"[{d_naive:.6f},{d_mic:.6f}]\")\n\n    # Final print statement in the exact required format: [[a1,b1],[a2,b2],...]\n    # without spaces between elements.\n    print(f\"[{','.join(result_strings)}]\")\n\nsolve()\n```", "id": "2458300"}, {"introduction": "Molecular dynamics simulations advance a system in time by numerically integrating Newton's equations of motion in discrete steps of size $\\Delta t$. While a larger time step allows for exploring longer timescales, it can also lead to numerical instabilities and unphysical trajectories, particularly for stiff molecular motions like bond vibrations. This practice provides a hands-on computational experiment to explore the stability limits of the Velocity-Verlet algorithm, allowing you to identify the critical time step at which a simulation \"explodes\" and learn how to diagnose such common issues [@problem_id:2458247].", "problem": "You are asked to implement a self-contained computational experiment, grounded in first principles, to study the time-step stability of a single one-dimensional harmonic mode that represents a stiff normal mode in a protein in Molecular Dynamics (MD). The system is a particle of mass $m$ confined to a harmonic potential with force constant $k$, evolving under Newton’s second law. Use reduced, dimensionless units throughout; do not attach physical units to any quantity.\n\nThe dynamics are defined by Newton’s second law, $m \\,\\ddot{x}(t) = - k \\, x(t)$, with initial conditions $x(0) = x_0$ and $\\dot{x}(0) = v_0$. The total energy is $E(t) = \\tfrac{1}{2} m \\,\\dot{x}(t)^2 + \\tfrac{1}{2} k \\, x(t)^2$. For a given discrete time step $dt$, simulate the motion for a total simulation time $T$ and monitor $E(t)$ during the trajectory.\n\nDefine an “explosion” for a chosen $dt$ to have occurred if any one of the following three events happens at any simulation step:\n- The computed total energy $E(t)$ becomes not finite (that is, not a real, finite number).\n- The relative energy error exceeds a specified tolerance, that is, $\\lvert E(t) - E(0) \\rvert / E(0) > \\varepsilon$ for any time $t$ up to the end of the simulation.\n- The magnitude of the position exceeds a prescribed bound derived from the initial energy, that is, $\\lvert x(t) \\rvert > B \\, A_0$ for any $t$, where $A_0 = \\sqrt{2 E(0)/k}$.\n\nFor each test case below, you are given the parameter set $(m, k, x_0, v_0, T, \\varepsilon, B)$ and an ordered list of time steps $[dt_1, dt_2, \\dots, dt_n]$. For each test case, simulate the system separately for each $dt_i$ in the given order and identify the smallest $dt_i$ in the list that leads to an explosion by the above definition. If none of the listed $dt_i$ leads to an explosion, return the sentinel value $-1.0$.\n\nUse the following four test cases. All symbols and numbers below are to be interpreted in reduced, dimensionless units.\n\nTest Case 1:\n- Parameters: $m = 1.0$, $k = 1.0$, $x_0 = 1.0$, $v_0 = 1.0$, $T = 100.0$, $\\varepsilon = 0.20$, $B = 100.0$.\n- Time steps to test (in ascending order): $[0.1, 0.5, 1.5, 1.9, 2.0, 2.1]$.\n\nTest Case 2:\n- Parameters: $m = 1.0$, $k = 16.0$, $x_0 = 1.0$, $v_0 = 1.0$, $T = 20.0$, $\\varepsilon = 0.10$, $B = 100.0$.\n- Time steps to test (in ascending order): $[0.05, 0.10, 0.30, 0.49, 0.50, 0.51]$.\n\nTest Case 3:\n- Parameters: $m = 2.0$, $k = 0.5$, $x_0 = 1.0$, $v_0 = 1.0$, $T = 50.0$, $\\varepsilon = 0.05$, $B = 1000.0$.\n- Time steps to test (in ascending order): $[0.50, 1.00, 2.00, 3.00, 3.50]$.\n\nTest Case 4:\n- Parameters: $m = 1.0$, $k = 100.0$, $x_0 = 1.0$, $v_0 = 1.0$, $T = 8.0$, $\\varepsilon = 0.15$, $B = 100.0$.\n- Time steps to test (in ascending order): $[0.02, 0.10, 0.19, 0.20, 0.25]$.\n\nYour program must produce a single line of output containing the results as a comma-separated list enclosed in square brackets. Each result must be a floating-point number rounded to six decimal places, in the same order as the test cases above. For example, if the results for the four test cases are $r_1$, $r_2$, $r_3$, and $r_4$, your program must print exactly\n\"[r1,r2,r3,r4]\"\nwith each $r_i$ formatted to six decimal places and no additional text.\n\nAngle quantities, if any arise internally, must be treated in radians. All values in this problem are dimensionless by construction, so no physical units are to be displayed in the output.", "solution": "The problem requires a computational experiment to determine the stability limit of a numerical integration scheme for a one-dimensional harmonic oscillator, which serves as a model for a stiff vibrational mode in a molecular dynamics (MD) simulation. The problem is well-posed and scientifically grounded. It constitutes a direct test of numerical integration stability, a fundamental concept in computational science.\n\nThe system is described by the equation of motion for a simple harmonic oscillator:\n$$\nm \\frac{d^2x}{dt^2} = -k x(t)\n$$\nwhere $m$ is the mass, $k$ is the force constant, and $x(t)$ is the position. The angular frequency of this oscillator is $\\omega = \\sqrt{k/m}$. The dynamics are to be propagated from initial conditions $x(0) = x_0$ and $\\dot{x}(0) = v_0$ using a discrete time step $dt$.\n\nThe problem statement does not specify the numerical integration algorithm. For MD simulations of Newtonian mechanics, the Velocity-Verlet algorithm is a standard, widely-used, and robust choice due to its time-reversibility and symplectic nature, which leads to good long-term energy conservation properties. Therefore, the Velocity-Verlet integrator is the appropriate algorithm to implement.\n\nThe Velocity-Verlet algorithm consists of the following steps to advance the system from time $t$ to $t+dt$:\n1.  Compute the half-step velocity:\n    $$\n    v(t + \\tfrac{1}{2}dt) = v(t) + \\tfrac{1}{2} a(t) dt\n    $$\n2.  Update the position to the full new time step:\n    $$\n    x(t + dt) = x(t) + v(t + \\tfrac{1}{2}dt) dt\n    $$\n3.  Compute the acceleration at the new position. The acceleration is derived from the force $F(x) = -kx$, so $a(x) = F(x)/m = -(k/m)x$:\n    $$\n    a(t + dt) = -\\frac{k}{m} x(t + dt)\n    $$\n4.  Compute the full-step velocity at the new time:\n    $$\n    v(t + dt) = v(t + \\tfrac{1}{2}dt) + \\tfrac{1}{2} a(t + dt) dt\n    $$\n\nFor each test case, we are given a set of parameters $(m, k, x_0, v_0, T, \\varepsilon, B)$ and an ordered list of time steps $[dt_1, dt_2, \\dots]$. The task is to find the smallest $dt_i$ from this list for which the simulation becomes unstable or \"explodes.\" The simulation for a given $dt$ runs for a total time $T$, which corresponds to $N_{steps} = \\lfloor T/dt \\rfloor$ integration steps.\n\nBefore the simulation loop begins, we must establish the baseline for the explosion criteria. The initial total energy $E(0)$ is calculated as:\n$$\nE(0) = \\frac{1}{2} m v_0^2 + \\frac{1}{2} k x_0^2\n$$\nThe problem states that for all test cases, $x_0$, $v_0$, $m$, and $k$ are positive, ensuring $E(0) > 0$. The characteristic amplitude $A_0$ is then defined as:\n$$\nA_0 = \\sqrt{\\frac{2 E(0)}{k}}\n$$\nThis $A_0$ represents the maximum displacement in the exact analytical solution.\n\nThe simulation proceeds by iterating the Velocity-Verlet algorithm for $N_{steps}$ times. After each step, we obtain the new state $(x(t+dt), v(t+dt))$ and check for the three explosion conditions:\n1.  **Finiteness of Energy**: The total energy at the new step, $E(t+dt) = \\frac{1}{2} m v(t+dt)^2 + \\frac{1}{2} k x(t+dt)^2$, must be a finite real number. Computationally, this is checked by verifying if the value is not `NaN` (Not a Number) or infinite. This condition detects catastrophic numerical overflow.\n2.  **Relative Energy Conservation**: The relative deviation of the current energy from the initial energy must not exceed a tolerance $\\varepsilon$.\n    $$\n    \\frac{\\lvert E(t+dt) - E(0) \\rvert}{E(0)} > \\varepsilon\n    $$\n    This condition detects when the numerical integration error leads to a significant, unphysical drift in the total energy, even if the trajectory has not yet diverged to infinity.\n3.  **Position Bound**: The magnitude of the position must not exceed a large multiple of the characteristic amplitude.\n    $$\n    \\lvert x(t+dt) \\rvert > B \\cdot A_0\n    $$\n    This is another practical check for trajectory divergence, where the particle escapes to unphysically large distances from the potential minimum.\n\nThe overall procedure for each test case is as follows:\nIterate through the provided list of time steps $dt_i$, which are sorted in ascending order. For each $dt_i$:\n- Run a full simulation for time $T$.\n- At every step of the simulation, check the three explosion conditions.\n- If any condition is met at any point during the simulation, the simulation for this $dt_i$ is deemed unstable. This $dt_i$ is the result for the test case, and we proceed to the next test case.\n- If the simulation completes for $T$ without any explosion, this $dt_i$ is considered stable. We then proceed to test the next $dt_i$ in the list.\n\nIf all time steps in the list for a given test case result in stable simulations, the result for that test case is the sentinel value $-1.0$.\n\nThe implementation will consist of a primary function that iterates through the test cases. This function will call a sub-function for each test case, which in turn iterates through the provided $dt$ values and calls a simulation function. The simulation function implements the Velocity-Verlet loop and the stability checks described above. The final output is a list of the smallest exploding $dt$ for each case, or $-1.0$ if none are found.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef run_simulation(m, k, x0, v0, T, epsilon, B, dt) -> bool:\n    \"\"\"\n    Runs a simulation of a 1D harmonic oscillator using the Velocity-Verlet algorithm.\n\n    Args:\n        m (float): Mass.\n        k (float): Force constant.\n        x0 (float): Initial position.\n        v0 (float): Initial velocity.\n        T (float): Total simulation time.\n        epsilon (float): Relative energy error tolerance.\n        B (float): Position bound factor.\n        dt (float): Time step.\n\n    Returns:\n        bool: True if an explosion occurs, False otherwise.\n    \"\"\"\n    if dt <= 0:\n        return False  # A time step of zero or less is not meaningful.\n\n    num_steps = int(T / dt)\n    \n    # Initial conditions\n    x = float(x0)\n    v = float(v0)\n    \n    # Calculate initial energy and derived bounds for explosion criteria\n    e0 = 0.5 * m * v**2 + 0.5 * k * x**2\n    \n    # The problem constraints ensure e0 > 0, so no division by zero.\n    a0 = np.sqrt(2 * e0 / k)\n    x_bound = B * a0\n\n    # Initial acceleration\n    a = -(k / m) * x\n    \n    # Main simulation loop\n    for _ in range(num_steps):\n        # Velocity-Verlet integrator\n        # v(t + dt/2)\n        v_half = v + 0.5 * a * dt\n        # x(t + dt)\n        x = x + v_half * dt\n        # a(t + dt)\n        a_new = -(k / m) * x\n        # v(t + dt)\n        v = v_half + 0.5 * a_new * dt\n        \n        # Update acceleration for the next step\n        a = a_new\n        \n        # Calculate current energy at the full step\n        e_current = 0.5 * m * v**2 + 0.5 * k * x**2\n        \n        # --- Check for explosion conditions ---\n        \n        # 1. Non-finite energy (numerical overflow)\n        if not np.isfinite(e_current):\n            return True  # Explosion\n            \n        # 2. Relative energy error exceeds tolerance\n        # In the case e0 is 0, any change would be an infinite relative error.\n        # But for the given test cases, e0 is always positive.\n        if abs(e_current - e0) / e0 > epsilon:\n            return True  # Explosion\n        \n        # 3. Position exceeds bound\n        if abs(x) > x_bound:\n            return True  # Explosion\n            \n    return False  # No explosion occurred\n\ndef solve():\n    \"\"\"\n    Main function to run all test cases and print results.\n    \"\"\"\n    test_cases = [\n        {\n            'params': (1.0, 1.0, 1.0, 1.0, 100.0, 0.20, 100.0),\n            'dts': [0.1, 0.5, 1.5, 1.9, 2.0, 2.1],\n        },\n        {\n            'params': (1.0, 16.0, 1.0, 1.0, 20.0, 0.10, 100.0),\n            'dts': [0.05, 0.10, 0.30, 0.49, 0.50, 0.51],\n        },\n        {\n            'params': (2.0, 0.5, 1.0, 1.0, 50.0, 0.05, 1000.0),\n            'dts': [0.50, 1.00, 2.00, 3.00, 3.50],\n        },\n        {\n            'params': (1.0, 100.0, 1.0, 1.0, 8.0, 0.15, 100.0),\n            'dts': [0.02, 0.10, 0.19, 0.20, 0.25],\n        }\n    ]\n\n    results = []\n    for case in test_cases:\n        m, k, x0, v0, T, epsilon, B = case['params']\n        dts = case['dts']\n        \n        explosion_dt = -1.0\n        # The 'dts' lists are sorted, so we find the smallest by breaking on the first hit.\n        for dt in dts:\n            if run_simulation(m, k, x0, v0, T, epsilon, B, dt):\n                explosion_dt = dt\n                break\n        \n        results.append(f\"{explosion_dt:.6f}\")\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2458247"}, {"introduction": "One of the most powerful aspects of molecular dynamics is its foundation in statistical mechanics, which connects microscopic fluctuations to macroscopic thermodynamic observables. A prime example is the relationship, derived from the canonical ensemble, between the fluctuations in the total energy $E$ and the constant-volume heat capacity $C_v$. In this exercise, you will apply the fluctuation-dissipation theorem to calculate $C_v$ directly from an energy trajectory obtained in an NVT simulation, providing a tangible link between simulation data and fundamental thermodynamic properties [@problem_id:2458251].", "problem": "A Molecular Dynamics (MD) simulation performed in the canonical ensemble, also known as constant Number-Volume-Temperature (NVT), produces a discrete time series of total energies for a single system at fixed volume and temperature. In the canonical ensemble, microstate probabilities follow the Boltzmann distribution with inverse temperature $\\beta = 1/(k_B T)$, where $k_B$ is the Boltzmann constant and $T$ is the absolute temperature. The canonical partition function is $Z(\\beta) = \\sum_i e^{-\\beta E_i}$, and thermodynamic averages are computed as ensemble expectations with respect to this distribution. The constant-volume heat capacity $C_v$ is defined as the temperature derivative of the mean energy at fixed volume, $C_v = \\left(\\frac{\\partial \\langle E \\rangle}{\\partial T}\\right)_V$. Starting from these canonical-ensemble definitions and basic calculus, derive an expression that connects $C_v$ to the fluctuations of the total energy in the canonical ensemble. Then, implement that expression numerically using a finite time series of total energies from an NVT trajectory.\n\nYour task is to write a complete, runnable program that, for each provided test case, computes $C_v$ from an energy trajectory using ensemble (population) estimates of the first and second moments, namely $\\langle E \\rangle$ and $\\langle E^2 \\rangle$, obtained as simple arithmetic means over the trajectory. Use the Boltzmann constant $k_B = 1.380\\,649 \\times 10^{-23}$ in SI units. Energies are given in Joules, temperatures in Kelvin, and the required output for each test case is the constant-volume heat capacity in Joules per Kelvin. Assume the provided energies correspond to a single system (not per mole); do not introduce Avogadro’s number.\n\nImplementation requirements:\n- For a trajectory of $N$ samples $E_1, E_2, \\ldots, E_N$ at temperature $T$, estimate $\\langle E \\rangle$ by the arithmetic mean $\\frac{1}{N}\\sum_{i=1}^N E_i$ and $\\langle E^2 \\rangle$ by $\\frac{1}{N}\\sum_{i=1}^N E_i^2$. Use these to evaluate your derived expression for $C_v$. If the energy trajectory has zero variance, the resulting $C_v$ must be $0$.\n- Express the final $C_v$ values in Joules per Kelvin ($\\mathrm{J/K}$).\n- Angles are not involved in this task.\n- The program must be self-contained: do not read input from the user or files.\n\nTest suite:\n- Case A (general, nontrivial fluctuations): energies $[1.0 \\times 10^{-20}, 2.0 \\times 10^{-20}, 3.0 \\times 10^{-20}, 4.0 \\times 10^{-20}]$ at temperature $T = 300$.\n- Case B (zero fluctuations boundary): energies $[5.0 \\times 10^{-21}, 5.0 \\times 10^{-21}, 5.0 \\times 10^{-21}, 5.0 \\times 10^{-21}, 5.0 \\times 10^{-21}]$ at temperature $T = 100$.\n- Case C (energies with sign changes and moderate temperature): energies $[-1.0 \\times 10^{-21}, 2.0 \\times 10^{-21}, 0.0, 4.0 \\times 10^{-21}, -2.0 \\times 10^{-21}]$ at temperature $T = 50$.\n- Case D (single-sample edge case): energies $[1.234 \\times 10^{-20}]$ at temperature $T = 300$.\n\nNumerical and formatting requirements:\n- Use $k_B = 1.380\\,649 \\times 10^{-23}$ in $\\mathrm{J/K}$.\n- Compute $C_v$ in $\\mathrm{J/K}$ for each case.\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets. Each number must be formatted in scientific notation with exactly six digits after the decimal point (for example, `[1.234000e-03,0.000000e+00]`). No other text should be printed.\n\nThe final result must be correct for each case and follow the exact output format described above.", "solution": "The problem statement is scientifically sound, well-posed, and contains all necessary information for a complete solution. Therefore, I will proceed with the derivation and implementation.\n\nThe objective is to derive an expression for the constant-volume heat capacity, $C_v$, in terms of the fluctuations of the total energy $E$ within the framework of the canonical (NVT) ensemble, and then to implement a program to compute it from a given energy time series.\n\nThe constant-volume heat capacity is defined by the partial derivative of the mean energy, $\\langle E \\rangle$, with respect to temperature, $T$:\n$$\nC_v = \\left(\\frac{\\partial \\langle E \\rangle}{\\partial T}\\right)_V\n$$\nIn the canonical ensemble, the probability of a microstate $i$ with energy $E_i$ is given by the Boltzmann distribution, $P_i = Z^{-1} e^{-\\beta E_i}$, where $\\beta = (k_B T)^{-1}$ is the inverse temperature and $Z = \\sum_i e^{-\\beta E_i}$ is the canonical partition function. The Boltzmann constant is denoted by $k_B$.\n\nThe mean energy $\\langle E \\rangle$ is the ensemble average of the energy:\n$$\n\\langle E \\rangle = \\sum_i E_i P_i = \\frac{\\sum_i E_i e^{-\\beta E_i}}{\\sum_i e^{-\\beta E_i}}\n$$\nA key insight from statistical mechanics is that the numerator can be expressed as a derivative of the partition function $Z$ with respect to $\\beta$:\n$$\n\\sum_i E_i e^{-\\beta E_i} = -\\frac{\\partial}{\\partial \\beta} \\left(\\sum_i e^{-\\beta E_i}\\right) = -\\frac{\\partial Z}{\\partial \\beta}\n$$\nThis allows us to write the mean energy in a more compact form:\n$$\n\\langle E \\rangle = -\\frac{1}{Z} \\frac{\\partial Z}{\\partial \\beta} = -\\frac{\\partial (\\ln Z)}{\\partial \\beta}\n$$\nTo evaluate $C_v$, we must differentiate $\\langle E \\rangle$ with respect to $T$. It is more convenient to first change the differentiation variable from $T$ to $\\beta$ using the chain rule:\n$$\n\\frac{\\partial}{\\partial T} = \\frac{d\\beta}{dT} \\frac{\\partial}{\\partial \\beta}\n$$\nFrom the definition $\\beta = (k_B T)^{-1}$, we find the derivative:\n$$\n\\frac{d\\beta}{dT} = -\\frac{1}{k_B T^2}\n$$\nSubstituting this into the definition of $C_v$:\n$$\nC_v = \\left(-\\frac{1}{k_B T^2}\\right) \\frac{\\partial \\langle E \\rangle}{\\partial \\beta}\n$$\nNow we must compute the derivative of $\\langle E \\rangle$ with respect to $\\beta$:\n$$\n\\frac{\\partial \\langle E \\rangle}{\\partial \\beta} = \\frac{\\partial}{\\partial \\beta} \\left(\\frac{\\sum_i E_i e^{-\\beta E_i}}{Z}\\right)\n$$\nApplying the quotient rule for differentiation gives:\n$$\n\\frac{\\partial \\langle E \\rangle}{\\partial \\beta} = \\frac{1}{Z^2} \\left[ Z \\left(\\frac{\\partial}{\\partial \\beta} \\sum_i E_i e^{-\\beta E_i}\\right) - \\left(\\sum_i E_i e^{-\\beta E_i}\\right) \\left(\\frac{\\partial Z}{\\partial \\beta}\\right) \\right]\n$$\nThe terms in the brackets are evaluated as follows:\n$$\n\\frac{\\partial}{\\partial \\beta} \\sum_i E_i e^{-\\beta E_i} = \\sum_i (-E_i^2) e^{-\\beta E_i} = - \\sum_i E_i^2 e^{-\\beta E_i}\n$$\n$$\n\\frac{\\partial Z}{\\partial \\beta} = -\\sum_i E_i e^{-\\beta E_i}\n$$\nSubstituting these back, we get:\n$$\n\\frac{\\partial \\langle E \\rangle}{\\partial \\beta} = \\frac{1}{Z^2} \\left[ Z \\left(-\\sum_i E_i^2 e^{-\\beta E_i}\\right) - \\left(\\sum_i E_i e^{-\\beta E_i}\\right) \\left(-\\sum_j E_j e^{-\\beta E_j}\\right) \\right]\n$$\nBy dividing by $Z$ inside the sums, we can express this in terms of ensemble averages $\\langle E \\rangle$ and $\\langle E^2 \\rangle$:\n$$\n\\frac{\\partial \\langle E \\rangle}{\\partial \\beta} = -\\frac{\\sum_i E_i^2 e^{-\\beta E_i}}{Z} + \\left(\\frac{\\sum_i E_i e^{-\\beta E_i}}{Z}\\right)^2 = -\\langle E^2 \\rangle + \\langle E \\rangle^2\n$$\nThis result is the negative of the variance of the energy, $\\sigma_E^2 = \\langle E^2 \\rangle - \\langle E \\rangle^2$.\n$$\n\\frac{\\partial \\langle E \\rangle}{\\partial \\beta} = -\\sigma_E^2\n$$\nFinally, we substitute this back into our expression for $C_v$:\n$$\nC_v = \\left(-\\frac{1}{k_B T^2}\\right) (-\\sigma_E^2) = \\frac{\\sigma_E^2}{k_B T^2}\n$$\nThis leads to the final, celebrated formula which connects a macroscopic thermodynamic response function ($C_v$) to microscopic fluctuations (energy variance $\\sigma_E^2$):\n$$\nC_v = \\frac{\\langle E^2 \\rangle - \\langle E \\rangle^2}{k_B T^2}\n$$\nFor the numerical implementation, a time series of $N$ energy values $\\{E_i\\}_{i=1}^N$ from an MD trajectory is used. The ensemble averages are estimated by their sample counterparts: the expectation of energy, $\\langle E \\rangle$, is estimated by the sample mean $\\bar{E} = \\frac{1}{N}\\sum_{i=1}^N E_i$, and the expectation of the squared energy, $\\langle E^2 \\rangle$, is estimated by the mean of the squares, $\\overline{E^2} = \\frac{1}{N}\\sum_{i=1}^N E_i^2$. The numerator, $\\langle E^2 \\rangle - \\langle E \\rangle^2$, is thus estimated by the population variance of the energy samples. If the energy samples have zero variance, this implies that $C_v$ is zero, which is a correct physical consequence for a system with no thermal fluctuations. For a single-sample trajectory, the variance is inherently zero, leading to $C_v = 0$.\n\nThe algorithm for each test case is as follows:\n$1$. Given an array of energies $E_{arr}$ and a temperature $T$.\n$2$. Compute the variance of the energies, $\\sigma_E^2 = \\mathrm{Var}(E_{arr})$.\n$3$. Compute the denominator term, $k_B T^2$, using the provided value of $k_B$.\n$4$. Calculate $C_v = \\sigma_E^2 / (k_B T^2)$.\nThis procedure will be applied to all provided test cases.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Calculates the constant-volume heat capacity (Cv) from energy trajectories\n    in the canonical (NVT) ensemble for a set of predefined test cases.\n    \"\"\"\n\n    # Define the Boltzmann constant in SI units (J/K).\n    KB = 1.380649e-23\n\n    # Define the test cases from the problem statement.\n    # Each case is a tuple: (list of energies in Joules, temperature in Kelvin).\n    test_cases = [\n        # Case A: general, nontrivial fluctuations\n        (np.array([1.0e-20, 2.0e-20, 3.0e-20, 4.0e-20]), 300.0),\n        # Case B: zero fluctuations boundary\n        (np.array([5.0e-21, 5.0e-21, 5.0e-21, 5.0e-21, 5.0e-21]), 100.0),\n        # Case C: energies with sign changes and moderate temperature\n        (np.array([-1.0e-21, 2.0e-21, 0.0, 4.0e-21, -2.0e-21]), 50.0),\n        # Case D: single-sample edge case\n        (np.array([1.234e-20]), 300.0),\n    ]\n\n    results = []\n    for energies, temperature in test_cases:\n        # The constant-volume heat capacity Cv is related to the variance of the\n        # total energy (sigma_E^2) by the formula:\n        # Cv = sigma_E^2 / (k_B * T^2)\n        # where sigma_E^2 = <E^2> - <E>^2.\n        # This is equivalent to the population variance of the energy samples.\n        # numpy.var calculates the population variance by default (ddof=0).\n        \n        # 1. Calculate the variance of the energy.\n        # For a single sample, the variance is 0.\n        # For a constant array, the variance is 0.\n        energy_variance = np.var(energies)\n\n        # 2. Denominator is k_B * T^2.\n        denominator = KB * temperature**2\n\n        # 3. Calculate Cv. If variance is zero, Cv is zero.\n        # This naturally handles cases B and D.\n        if energy_variance == 0.0:\n            cv = 0.0\n        else:\n            cv = energy_variance / denominator\n        \n        results.append(cv)\n\n    # Format the results into a single string as specified.\n    # Each number is formatted in scientific notation with 6 decimal places.\n    formatted_results = [f\"{res:.6e}\" for res in results]\n    \n    # Final print statement in the exact required format.\n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n```", "id": "2458251"}]}