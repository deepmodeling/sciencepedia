{"hands_on_practices": [{"introduction": "We begin by exploring one of the most fundamental scenarios in time-dependent quantum mechanics: the response of a system to an instantaneous change in its potential. This exercise [@problem_id:537849] requires you to apply the sudden approximation, where the wavefunction does not have time to change following a rapid perturbation. By calculating the probability of a harmonic oscillator remaining in its ground state after its spring constant is suddenly altered, you will gain hands-on experience with projecting an initial state onto the eigenbasis of the new Hamiltonian.", "problem": "A particle of mass $m$ is confined to a one-dimensional harmonic potential $V_0(x) = \\frac{1}{2}k_0 x^2$. For time $t < 0$, the particle is in the ground state of the system.\n\nAt time $t=0$, the spring constant is instantaneously quadrupled, so that the potential becomes $V_1(x) = \\frac{1}{2}k_1 x^2$ with $k_1 = 4k_0$ for all $t \\ge 0$.\n\nThe normalized ground-state wavefunction for a one-dimensional harmonic oscillator with potential $V(x) = \\frac{1}{2}kx^2$ is given by\n$$\n\\psi_0(x) = \\left(\\frac{\\sqrt{mk}}{\\pi\\hbar}\\right)^{1/4} \\exp\\left(-\\frac{\\sqrt{mk}}{2\\hbar}x^2\\right)\n$$\nwhere $\\hbar$ is the reduced Planck constant.\n\nCalculate the probability that an energy measurement performed on the particle for $t > 0$ will find it in the ground state of the *new* potential $V_1(x)$.", "solution": "1. Define \n$$\\alpha_0=\\frac{\\sqrt{m k_0}}{\\hbar},\\quad \\alpha_1=\\frac{\\sqrt{m k_1}}{\\hbar}=\\frac{\\sqrt{m\\,(4k_0)}}{\\hbar}=2\\alpha_0.$$\n2. The overlap coefficient is\n$$c_0=\\int_{-\\infty}^{\\infty}\\Bigl(\\frac{\\alpha_1}{\\pi}\\Bigr)^{1/4}e^{-\\frac{\\alpha_1x^2}{2}}\n\\Bigl(\\frac{\\alpha_0}{\\pi}\\Bigr)^{1/4}e^{-\\frac{\\alpha_0x^2}{2}}\\,dx\n=\\frac{(\\alpha_0\\alpha_1)^{1/4}}{\\sqrt{\\pi}}\n\\int_{-\\infty}^{\\infty}e^{-\\frac{\\alpha_0+\\alpha_1}{2}x^2}\\,dx.$$\n3. Use \n$$\\int_{-\\infty}^{\\infty}e^{-B x^2}dx=\\sqrt{\\frac{\\pi}{B}},\\quad B=\\frac{\\alpha_0+\\alpha_1}{2},$$\nso\n$$c_0=\\frac{(\\alpha_0\\alpha_1)^{1/4}}{\\sqrt{\\pi}}\\sqrt{\\frac{\\pi}{(\\alpha_0+\\alpha_1)/2}}\n=\\frac{(\\alpha_0\\alpha_1)^{1/4}}{\\sqrt{(\\alpha_0+\\alpha_1)/2}}\\,. $$\n4. The probability is\n$$P=|c_0|^2=\\frac{2\\sqrt{\\alpha_0\\alpha_1}}{\\alpha_0+\\alpha_1}\n=\\frac{2\\sqrt{\\alpha_0\\,(2\\alpha_0)}}{\\alpha_0+2\\alpha_0}\n=\\frac{2\\sqrt{2}\\,\\alpha_0}{3\\alpha_0}\n=\\frac{2\\sqrt{2}}{3}\\,. $$", "answer": "$$\\boxed{\\frac{2\\sqrt{2}}{3}}$$", "id": "537849"}, {"introduction": "Transitions between quantum states are central to chemical dynamics, yet most are difficult to describe analytically. This practice [@problem_id:537798] explores the celebrated Landau-Zener model, which provides a rare exact solution for the transition probability in a two-level system whose energy levels cross over time. By analyzing a spin-1/2 particle in a specific time-dependent magnetic field, you will learn to recognize the underlying structure of a Landau-Zener problem and apply its powerful formula to find the non-adiabatic transition probability.", "problem": "A spin-1/2 particle with gyromagnetic ratio $\\gamma$ is subjected to a time-dependent magnetic field $\\mathbf{B}(t)$. The Hamiltonian for this system is $H(t) = -\\frac{\\hbar\\gamma}{2} \\mathbf{B}(t) \\cdot \\mathbf{\\sigma}$, where $\\mathbf{\\sigma} = (\\sigma_x, \\sigma_y, \\sigma_z)$ is the vector of Pauli matrices.\n\nThe magnetic field is specified by its components in a fixed Cartesian frame:\n$$ \\mathbf{B}(t) = B_0 \\cos\\left(\\frac{\\kappa t^2}{2\\gamma}\\right) \\mathbf{\\hat{x}} + B_0 \\sin\\left(\\frac{\\kappa t^2}{2\\gamma}\\right) \\mathbf{\\hat{y}} - B_z \\mathbf{\\hat{z}} $$\nHere, $B_0$, $B_z$, and $\\kappa$ are positive real constants. The field in the $xy$-plane rotates with a time-dependent angular frequency, while the $z$-component is static.\n\nThe particle is prepared at time $t \\to -\\infty$ in the spin-up state with respect to the $z$-axis, which is represented by the spinor $|\\psi(-\\infty)\\rangle = |+\\rangle_z = \\begin{pmatrix} 1 \\\\ 0 \\end{pmatrix}$.\n\nYour task is to calculate the probability, $P_{\\downarrow}$, that the system will be found in the spin-down state, $|-\\rangle_z = \\begin{pmatrix} 0 \\\\ 1 \\end{pmatrix}$, at time $t \\to +\\infty$.", "solution": "1.  **Hamiltonian and Rotating-Frame Transformation.** In a reference frame rotating with the B-field's xy-component, via the transformation $U(t) = \\exp(-i\\phi(t)\\sigma_z/2)$ with $\\phi(t) = \\kappa t^2 / (2\\gamma)$, the Hamiltonian becomes:\n    $$ H_{rf}(t) = \\frac{\\hbar}{2} \\left[ (\\gamma B_z - \\dot{\\phi}(t)) \\sigma_z - (\\gamma B_0) \\sigma_x \\right] $$\n    where $\\dot{\\phi}(t) = \\kappa t / \\gamma$. This is a Landau-Zener Hamiltonian of the form $H_{rf}(t) = \\frac{\\hbar}{2} [ \\Delta(t) \\sigma_z - \\Omega_0 \\sigma_x ]$, with a linear sweep $\\Delta(t) = \\gamma B_z - \\kappa t/\\gamma$ and constant coupling $\\Omega_0 = \\gamma B_0$.\n\n2.  **Landau-Zener Probability.** The probability of a non-adiabatic transition is $P_{LZ} = \\exp(-2\\pi\\delta^2/(\\hbar|v|))$, where the coupling is $\\delta = \\hbar\\Omega_0/2$ and the sweep rate of the energy difference is $|v|=|\\hbar \\frac{d\\Delta}{dt}| = \\hbar\\kappa/\\gamma$.\n    $$ P_{LZ} = \\exp\\left(-\\frac{2\\pi(\\hbar\\Omega_0/2)^2}{\\hbar^2\\kappa/\\gamma}\\right) = \\exp\\left(-\\frac{\\pi\\Omega_0^2\\gamma}{2\\kappa}\\right) = \\exp\\left(-\\frac{\\pi\\gamma^3 B_0^2}{2\\kappa}\\right) $$\n\n3.  **Final Probability.** The system starts in the diabatic state $|+\\rangle_z$ at $t\\to-\\infty$ (the excited state) and we seek the probability to be in $|-\\rangle_z$ at $t\\to+\\infty$ (also the excited state). This corresponds to an adiabatic transition, which occurs with probability $P_{ad} = 1 - P_{LZ}$.\n    $$ P_{\\downarrow} = 1 - P_{LZ} = 1 - \\exp\\left(-\\frac{\\pi\\gamma^3 B_0^2}{2\\kappa}\\right) $$", "answer": "$$\\boxed{1-\\exp\\!\\Bigl(-\\frac{\\pi\\,\\gamma^{3}B_{0}^{2}}{2\\kappa}\\Bigr)}$$", "id": "537798"}, {"introduction": "While analytical models provide critical insight, most real-world quantum dynamics problems demand numerical solution. This advanced practice [@problem_id:2822573] guides you through the implementation of the split-operator Fourier method, a foundational algorithm for numerically solving the time-dependent Schrödinger equation. Through the process of writing code to propagate a wavepacket and verifying its accuracy and unitarity, you will bridge the gap between abstract quantum theory and practical scientific computation.", "problem": "Implement a one-dimensional numerical propagator for the time-dependent Schrödinger equation based on a symmetric split-operator factorization for Hamiltonians of the form $H(t)=T+V(t)$, where $T=\\hat{p}^{2}/2m$ and $V(t)=V(\\hat{x},t)$. Work entirely in dimensionless units such that $\\hbar=1$ and $m=1$. Angles in trigonometric functions must be in radians. The program must use a periodic spatial grid and the Discrete Fourier Transform to implement the kinetic energy operator in wavevector space. The spatial Fourier transform should be used in a normalization that makes it unitary on the discrete grid.\n\nStarting from the time-dependent Schrödinger equation $i\\,\\partial_{t}\\psi(t)=H(t)\\psi(t)$ and the definitions of $T$ and $V(t)$ above, implement a single-step propagator that uses midpoint sampling of the potential in time and a symmetric product of exponentials of $T$ and $V$ to approximate the time-ordered evolution from $t$ to $t+\\Delta t$. Then, analyze and verify the second-order accuracy in $\\Delta t$ of your implementation using a self-convergence study.\n\nThe numerical setting must be as follows.\n\n- Spatial grid and transforms:\n  - Use $N=1024$ equispaced grid points spanning an interval of length $L=200$ centered at $x=0$, that is, $x\\in[-L/2,L/2)$.\n  - Use the wavevector grid $k$ corresponding to the unitary discrete Fourier transform on this spatial grid.\n  - Use a unitary discrete Fourier transform so that the discrete $\\ell^{2}$ norm $\\|\\psi\\|_{h}^{2}=\\sum_{j=0}^{N-1}|\\psi_{j}|^{2}$ is preserved by the transform.\n\n- Initial state:\n  - Use a Gaussian wavepacket with center $x_{0}=-10$, width $\\sigma=1.0$, and mean wavevector $k_{0}=2.0$, namely\n    $$\\psi_{0}(x)=C\\exp\\!\\left(-\\frac{(x-x_{0})^{2}}{4\\sigma^{2}}+i\\,k_{0}(x-x_{0})\\right),$$\n    where $C$ is chosen to make the discrete norm equal to $1$.\n\n- Potentials:\n  - Driven harmonic trap (time-dependent): $$V_{\\mathrm{drv}}(x,t)=\\tfrac{1}{2}\\,\\omega^{2}x^{2}+E_{0}\\,x\\cos(\\Omega t),$$ with $\\omega=0.2$, $E_{0}=0.1$, and $\\Omega=1.0$.\n  - Free particle: $$V_{\\mathrm{free}}(x,t)=0.$$\n  - Static harmonic trap (time-independent): $$V_{\\mathrm{ho}}(x,t)=\\tfrac{1}{2}\\,\\omega^{2}x^{2},$$ with $\\omega=0.2$.\n\n- Time stepping and tests:\n  - All propagations must use a symmetric split-operator with midpoint sampling in time for the potential and the exact kinetic phase in $k$-space.\n  - Self-convergence order test for the driven trap:\n    - Final time $T=0.512$.\n    - Use three step sizes $\\Delta t_{1}=0.008$, $\\Delta t_{2}=0.004$, and $\\Delta t_{3}=0.002$ so that each divides $T$ exactly.\n    - Compute the final states $\\psi^{(1)}$, $\\psi^{(2)}$, and $\\psi^{(3)}$ using $\\Delta t_{1}$, $\\Delta t_{2}$, and $\\Delta t_{3}$, respectively.\n    - Estimate the observed order $p_{\\mathrm{drv}}$ by the refinement relation\n      $$p_{\\mathrm{drv}}=\\log_{2}\\left(\\frac{\\|\\psi^{(1)}-\\psi^{(2)}\\|_{h}}{\\|\\psi^{(2)}-\\psi^{(3)}\\|_{h}}\\right),$$\n      where $\\|\\cdot\\|_{h}$ is the discrete $\\ell^{2}$ norm defined above.\n  - Exactness check for the free particle:\n    - Final time $T=1.0$ and step $\\Delta t=0.01$.\n    - Evolve with the split-operator and compare to applying in a single step the exact kinetic phase $e^{-i\\,k^{2}T/2}$ in $k$-space.\n    - Return a boolean flag $b_{\\mathrm{free}}$ that is true if the discrete norm of the difference between the two final states is less than $5\\times 10^{-12}$.\n  - Self-convergence order test for the static harmonic trap:\n    - Final time $T=0.512$.\n    - Use the same three step sizes $\\Delta t_{1}=0.008$, $\\Delta t_{2}=0.004$, and $\\Delta t_{3}=0.002$.\n    - Compute the observed order $p_{\\mathrm{ho}}$ analogously to the driven case.\n  - Discrete unitarity preservation check:\n    - Use the driven harmonic trap $V_{\\mathrm{drv}}(x,t)$, final time $T=1.0$, and step $\\Delta t=0.05$.\n    - Record the discrete norm $\\|\\psi^{n}\\|_{h}^{2}$ after each step $n$.\n    - Return a boolean flag $b_{\\mathrm{uni}}$ that is true if the maximum absolute deviation of $\\|\\psi^{n}\\|_{h}^{2}$ from $1$ over all steps is less than $5\\times 10^{-12}$.\n\nYour program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, in the exact order $[p_{\\mathrm{drv}}, b_{\\mathrm{free}}, p_{\\mathrm{ho}}, b_{\\mathrm{uni}}]$. The two real numbers $p_{\\mathrm{drv}}$ and $p_{\\mathrm{ho}}$ must be rounded to three decimal places; the booleans must be printed as language-native boolean literals. No other text should be printed. The computation is dimensionless; no physical units are to be reported in the output. All trigonometric angles are in radians.", "solution": "The problem requires the implementation and verification of a numerical propagator for the one-dimensional time-dependent Schrödinger equation (TDSE):\n$$ i\\hbar \\frac{\\partial}{\\partial t} \\psi(x,t) = H(t) \\psi(x,t) $$\nThe problem is set in dimensionless units where $\\hbar=1$ and the particle mass $m=1$. The Hamiltonian $H(t)$ is given in the form $H(t) = T + V(t)$, where $T = \\frac{\\hat{p}^2}{2m} = \\frac{\\hat{p}^2}{2}$ is the kinetic energy operator and $V(t) = V(\\hat{x}, t)$ is a time-dependent potential energy operator.\n\nThe formal solution to the TDSE over a time interval from $t$ to $t+\\Delta t$ is given by\n$$ \\psi(t+\\Delta t) = U(t+\\Delta t, t) \\psi(t) $$\nwhere $U(t+\\Delta t, t)$ is the time-evolution operator, which is a time-ordered exponential:\n$$ U(t+\\Delta t, t) = \\mathcal{T} \\exp\\left(-i \\int_t^{t+\\Delta t} H(\\tau) \\,d\\tau\\right) $$\nIn general, the kinetic and potential energy operators do not commute, i.e., $[T, V] \\neq 0$. This non-commutativity prevents a simple decomposition of the exponential of the sum into a product of exponentials. Numerical methods are required to approximate the action of $U$.\n\nThe problem specifies the use of a symmetric split-operator factorization, a second-order Trotter-Suzuki decomposition. For a time-dependent potential, we approximate the integral of the potential over the time step $\\Delta t$ using the midpoint rule: $\\int_t^{t+\\Delta t} V(\\tau) d\\tau \\approx V(t+\\Delta t/2) \\Delta t$. The single-step propagator is then approximated as:\n$$ U_{\\text{step}}(t, \\Delta t) \\approx e^{-i T \\Delta t / 2} e^{-i V(t+\\Delta t/2) \\Delta t} e^{-i T \\Delta t / 2} $$\nThe error for a single step using this symmetric splitting is of order $\\mathcal{O}(\\Delta t^3)$, leading to a global error of order $\\mathcal{O}(\\Delta t^2)$ after propagating over a finite time interval, making the method second-order accurate in time.\n\nThe numerical implementation of this propagator is performed on a discrete spatial grid using the split-step Fourier method. This method leverages the fact that the kinetic energy operator $T$ is diagonal in the momentum (wavevector) representation, while the potential energy operator $V$ is diagonal in the position representation. The Fourier transform is used to switch between these two representations.\n1.  The spatial domain $x \\in [-L/2, L/2)$ is discretized into $N=1024$ points $x_j = -L/2 + j \\cdot \\Delta x$ for $j=0, \\dots, N-1$, where $\\Delta x = L/N$. Here, $L=200$.\n2.  The corresponding wavevector grid $k_n$ is obtained via the discrete Fourier transform relationship. For a grid spacing $\\Delta x$, the wavevectors are given by $k_n=2\\pi f_n$, where $f_n$ are the frequencies provided by standard FFT libraries.\n3.  The action of the potential operator $e^{-i V(x_j, t+\\Delta t/2) \\Delta t}$ is a simple element-wise multiplication on the wavefunction array $\\psi_j$ in position space.\n4.  The action of the kinetic operator $e^{-i T \\Delta t/2}$ is implemented in wavevector space. After a Fourier transform $\\psi(x) \\to \\tilde{\\psi}(k)$, the operator $\\hat{p}$ becomes multiplication by $k$, so $T = \\hat{p}^2/2$ becomes $k^2/2$. The action is an element-wise multiplication by $e^{-i (k_n^2/2) \\Delta t/2}$ on the transformed wavefunction array $\\tilde{\\psi}_n$.\n5.  To preserve the norm of the wavefunction (total probability), the discrete Fourier transform must be unitary. This is achieved by appropriate normalization of the forward and inverse transforms.\n\nThe algorithm for a single propagation step from time $t$ to $t+\\Delta t$ on a state $\\psi(x,t)$ is as follows:\na.  Calculate the kinetic phase factor for a half-step: $P_K = \\exp(-i (k^2/2) (\\Delta t/2))$.\nb.  Transform the state to wavevector space: $\\tilde{\\psi} = \\mathcal{F}[\\psi]$, where $\\mathcal{F}$ is the unitary discrete Fourier transform.\nc.  Apply the first kinetic half-step: $\\tilde{\\psi}' = P_K \\odot \\tilde{\\psi}$ (element-wise product).\nd.  Transform back to position space: $\\psi' = \\mathcal{F}^{-1}[\\tilde{\\psi}']$.\ne.  Calculate the potential at the midpoint time $t+\\Delta t/2$ on the spatial grid: $V_{mid} = V(x, t+\\Delta t/2)$.\nf.  Calculate the potential phase factor: $P_V = \\exp(-i V_{mid} \\Delta t)$.\ng.  Apply the full potential step: $\\psi'' = P_V \\odot \\psi'$.\nh.  Transform to wavevector space: $\\tilde{\\psi}'' = \\mathcal{F}[\\psi'']$.\ni.  Apply the second kinetic half-step: $\\tilde{\\psi}''' = P_K \\odot \\tilde{\\psi}''$.\nj.  Transform back to position space to obtain the final state: $\\psi(x, t+\\Delta t) = \\mathcal{F}^{-1}[\\tilde{\\psi}''']$.\n\nThis step-by-step procedure is used to implement a reusable function for a single time step. The full evolution from $t=0$ to $t=T$ is achieved by repeatedly applying this single-step propagator. The verification tests are then performed as specified:\n-   **Self-convergence tests ($p_{\\mathrm{drv}}$, $p_{\\mathrm{ho}}$)**: The order of convergence $p$ is estimated using three simulations with decreasing step sizes $\\Delta t_1$, $\\Delta t_2 = \\Delta t_1/2$, and $\\Delta t_3 = \\Delta t_2/2$. The error is estimated by comparing the resulting final states. The observed order is calculated as $p = \\log_2(\\|\\psi^{(1)}-\\psi^{(2)}\\|_h / \\|\\psi^{(2)}-\\psi^{(3)}\\|_h)$. For a second-order method, we expect $p \\approx 2$. This test confirms the temporal accuracy of the implementation.\n-   **Free particle exactness test ($b_{\\mathrm{free}}$)**: For a free particle ($V=0$), the split-operator propagator becomes exact: $U_{\\text{step}} = e^{-iT\\Delta t/2} e^0 e^{-iT\\Delta t/2} = e^{-iT\\Delta t}$. A sequence of steps results in $e^{-iT T_{final}}$. This result must be identical, up to machine precision, to applying the exact free-particle propagator for the total time $T_{final}$ in a single step. This test verifies the correct implementation of the kinetic propagation.\n-   **Unitarity preservation test ($b_{\\mathrm{uni}}$)**: The exact Schrödinger evolution is unitary, meaning it conserves the total probability, $\\|\\psi\\|_h^2$. The numerical propagator, being a product of unitary operators (when using unitary FFTs), must also be unitary. This test verifies that the norm of the wavefunction remains constant throughout the simulation, confirming that the numerical scheme does not artificially create or destroy probability.\n\nThe initial state is a normalized Gaussian wavepacket given by $\\psi_{0}(x)=C\\exp (-(x-x_{0})^{2}/(4\\sigma^{2})+i\\,k_{0}(x-x_{0}) )$. The constant $C$ is chosen such that the discrete $\\ell^2$ norm, $\\|\\psi_0\\|_h^2 = \\sum_{j=0}^{N-1}|\\psi_{0,j}|^2$, is equal to $1$. All calculations are performed according to the parameters specified in the problem statement.", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Implements and verifies a split-operator propagator for the 1D time-dependent Schrödinger equation.\n    \"\"\"\n\n    # --- 1. Define constants and grid parameters ---\n    N = 1024\n    L = 200.0\n    m = 1.0\n    hbar = 1.0 # Implicit in formulation, but useful for clarity\n\n    # Spatial grid\n    dx = L / N\n    x = np.arange(N) * dx - L / 2\n\n    # Wavevector grid (uses unitary FFT convention)\n    k = 2 * np.pi * np.fft.fftfreq(N, d=dx)\n\n    # Initial wavepacket parameters\n    x0 = -10.0\n    sigma = 1.0\n    k0 = 2.0\n\n    # Potential parameters\n    omega = 0.2\n    E0 = 0.1\n    Omega = 1.0\n\n    # --- 2. Define potentials and initial state ---\n    def V_drv(x_grid, t):\n        return 0.5 * (omega**2) * (x_grid**2) + E0 * x_grid * np.cos(Omega * t)\n\n    def V_free(x_grid, t):\n        return np.zeros_like(x_grid)\n\n    def V_ho(x_grid, t):\n        return 0.5 * (omega**2) * (x_grid**2)\n    \n    # Create and normalize initial state\n    psi0_unnormalized = np.exp(-(x - x0)**2 / (4 * sigma**2) + 1j * k0 * (x - x0))\n    norm_sq = np.sum(np.abs(psi0_unnormalized)**2)\n    psi0 = psi0_unnormalized / np.sqrt(norm_sq)\n\n    # --- 3. Define propagation functions ---\n    \n    def propagate_one_step(psi_in, t, dt, potential_func):\n        \"\"\"Propagates the wavefunction by one time step dt.\"\"\"\n        \n        # Kinetic propagator for a half step\n        kinetic_propagator_half = np.exp(-1j * (k**2 / (2 * m)) * dt / 2.0)\n        \n        # 1. First kinetic half-step\n        psi_k = np.fft.fft(psi_in, norm='ortho')\n        psi_k = kinetic_propagator_half * psi_k\n        psi_x = np.fft.ifft(psi_k, norm='ortho')\n        \n        # 2. Full potential step at midpoint time\n        t_mid = t + dt / 2.0\n        V_mid = potential_func(x, t_mid)\n        potential_propagator = np.exp(-1j * V_mid * dt)\n        psi_x = potential_propagator * psi_x\n        \n        # 3. Second kinetic half-step\n        psi_k = np.fft.fft(psi_x, norm='ortho')\n        psi_k = kinetic_propagator_half * psi_k\n        psi_out = np.fft.ifft(psi_k, norm='ortho')\n        \n        return psi_out\n\n    def full_propagation(psi_start, T_final, dt, potential_func):\n        \"\"\"Performs a full propagation from t=0 to T_final.\"\"\"\n        num_steps = int(round(T_final / dt))\n        psi_current = psi_start.copy()\n        t_current = 0.0\n        for _ in range(num_steps):\n            psi_current = propagate_one_step(psi_current, t_current, dt, potential_func)\n            t_current += dt\n        return psi_current\n\n    # --- 4. Perform verification tests ---\n\n    # Test 1: Self-convergence for driven trap\n    T_conv = 0.512\n    dt_vals_conv = [0.008, 0.004, 0.002]\n    psi_final_drv = [full_propagation(psi0, T_conv, dt, V_drv) for dt in dt_vals_conv]\n    \n    err_12_drv = np.linalg.norm(psi_final_drv[0] - psi_final_drv[1])\n    err_23_drv = np.linalg.norm(psi_final_drv[1] - psi_final_drv[2])\n    p_drv = np.log2(err_12_drv / err_23_drv) if err_23_drv > 0 else 0.0\n\n    # Test 2: Exactness for free particle\n    T_free = 1.0\n    dt_free = 0.01\n    psi_split_free = full_propagation(psi0, T_free, dt_free, V_free)\n    \n    # Exact single-step evolution\n    psi0_k = np.fft.fft(psi0, norm='ortho')\n    exact_kinetic_prop = np.exp(-1j * (k**2 / (2 * m)) * T_free)\n    psi_exact_free_k = exact_kinetic_prop * psi0_k\n    psi_exact_free = np.fft.ifft(psi_exact_free_k, norm='ortho')\n    \n    err_free = np.linalg.norm(psi_split_free - psi_exact_free)\n    b_free = err_free  5e-12\n\n    # Test 3: Self-convergence for static harmonic trap\n    psi_final_ho = [full_propagation(psi0, T_conv, dt, V_ho) for dt in dt_vals_conv]\n    \n    err_12_ho = np.linalg.norm(psi_final_ho[0] - psi_final_ho[1])\n    err_23_ho = np.linalg.norm(psi_final_ho[1] - psi_final_ho[2])\n    p_ho = np.log2(err_12_ho / err_23_ho) if err_23_ho > 0 else 0.0\n\n    # Test 4: Unitarity preservation check\n    T_uni = 1.0\n    dt_uni = 0.05\n    num_steps_uni = int(round(T_uni / dt_uni))\n    psi_current = psi0.copy()\n    t_current = 0.0\n    norms_sq = []\n    \n    for _ in range(num_steps_uni):\n        psi_current = propagate_one_step(psi_current, t_current, dt_uni, V_drv)\n        t_current += dt_uni\n        norms_sq.append(np.sum(np.abs(psi_current)**2))\n    \n    max_dev = np.max(np.abs(np.array(norms_sq) - 1.0))\n    b_uni = max_dev  5e-12\n\n    # --- 5. Format and print results ---\n    results_list = [\n        f\"{p_drv:.3f}\",\n        str(b_free),\n        f\"{p_ho:.3f}\",\n        str(b_uni)\n    ]\n    print(f\"[{','.join(results_list)}]\")\n\n# Execute the solution\nsolve()\n\n```", "id": "2822573"}]}