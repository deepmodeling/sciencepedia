{"hands_on_practices": [{"introduction": "In the high-temperature limit, where thermal energy $k_B T$ is much greater than the rotational energy spacing, the rotational partition function can be simplified from a discrete sum to a continuous integral. However, a crucial quantum mechanical detail persists: the effect of nuclear symmetry. This practice explores the role of the symmetry number, $\\sigma$, which accounts for the indistinguishability of identical nuclei in homonuclear molecules and halves the number of accessible rotational states compared to a similar heteronuclear molecule [@problem_id:1991137]. Mastering this distinction is essential for accurately calculating partition functions and related thermodynamic properties for different molecular species.", "problem": "Consider two diatomic gases, carbon monoxide (CO) and nitrogen ($^{14}$N$_2$), both at a high temperature $T$. At this temperature, the sum over discrete rotational energy levels can be well approximated by an integral.\n\nThe rotational constant for carbon monoxide is given as $B_{\\text{CO}} = 1.931 \\text{ cm}^{-1}$.\nThe rotational constant for the dinitrogen molecule composed of nitrogen-14 isotopes is given as $B_{^{14}\\text{N}_2} = 1.998 \\text{ cm}^{-1}$.\n\nCalculate the ratio of the rotational partition function of a single $^{14}$N$_2$ molecule to that of a single CO molecule, which is $\\frac{q_{\\text{rot}}(^{14}\\text{N}_2)}{q_{\\text{rot}}(\\text{CO})}$.\n\nProvide your answer as a dimensionless number, rounded to three significant figures.", "solution": "For a linear rigid rotor, the rotational energy levels are $E_{J} = h c B J(J+1)$ and the rotational partition function with symmetry number $\\sigma$ is\n$$\nq_{\\mathrm{rot}} = \\frac{1}{\\sigma} \\sum_{J=0}^{\\infty} (2J+1) \\exp\\!\\left(-\\frac{h c B}{k_{B} T} J(J+1)\\right).\n$$\nAt high temperature, replace the sum by an integral:\n$$\nq_{\\mathrm{rot}} \\approx \\frac{1}{\\sigma} \\int_{0}^{\\infty} (2J+1) \\exp\\!\\left(-x J(J+1)\\right) \\, dJ,\n$$\nwith $x = \\frac{h c B}{k_{B} T}$. Using the substitution $u = J(J+1)$ so that $du = (2J+1)\\, dJ$, the limits map from $u=0$ to $u\\to\\infty$, giving\n$$\nq_{\\mathrm{rot}} \\approx \\frac{1}{\\sigma} \\int_{0}^{\\infty} \\exp(-x u)\\, du = \\frac{1}{\\sigma} \\frac{1}{x} = \\frac{k_{B} T}{\\sigma h c B}.\n$$\nTherefore, the ratio is\n$$\n\\frac{q_{\\mathrm{rot}}(^{14}\\text{N}_{2})}{q_{\\mathrm{rot}}(\\text{CO})} = \\frac{\\frac{k_{B} T}{\\sigma_{^{14}\\text{N}_{2}} h c B_{^{14}\\text{N}_{2}}}}{\\frac{k_{B} T}{\\sigma_{\\text{CO}} h c B_{\\text{CO}}}} = \\frac{\\sigma_{\\text{CO}}}{\\sigma_{^{14}\\text{N}_{2}}} \\frac{B_{\\text{CO}}}{B_{^{14}\\text{N}_{2}}}.\n$$\nFor homonuclear $^{14}\\text{N}_{2}$, $\\sigma_{^{14}\\text{N}_{2}}=2$; for heteronuclear CO, $\\sigma_{\\text{CO}}=1$. Using the given $B$ values (in the same units so they cancel in the ratio),\n$$\n\\frac{q_{\\mathrm{rot}}(^{14}\\text{N}_{2})}{q_{\\mathrm{rot}}(\\text{CO})} = \\frac{1}{2} \\frac{1.931}{1.998} \\approx \\frac{1}{2} \\times 0.966467 \\approx 0.483.\n$$\nRounded to three significant figures, the ratio is $0.483$.", "answer": "$$\\boxed{0.483}$$", "id": "1991137"}, {"introduction": "The rigid rotor model provides a foundational, albeit idealized, picture of molecular rotation. In reality, as a molecule rotates with increasing angular momentum, centrifugal forces cause its bond to stretch, an effect known as centrifugal distortion. This exercise guides you through incorporating a first-order correction for this non-rigidity into the partition function [@problem_id:1991133]. By treating the distortion term as a small perturbation, you will develop a more accurate expression for the partition function, a powerful technique applicable to many problems in advanced statistical mechanics where idealized models must be refined.", "problem": "The rotational energy levels of a simple rigid diatomic molecule are often approximated by the expression $E_J^{\\text{rigid}} = hcB J(J+1)$, where $J$ is the rotational quantum number, $h$ is Planck's constant, $c$ is the speed of light, and $B$ is the rotational constant. However, real molecules are not perfectly rigid. As a molecule rotates faster (i.e., at higher $J$), the bond between the atoms stretches due to centrifugal force. This effect, known as centrifugal distortion, lowers the energy levels. A more accurate expression for the rotational energy levels, including the first-order correction for centrifugal distortion, is given by:\n$$E_J = hc[B J(J+1) - D J^2(J+1)^2]$$\nHere, $D$ is the centrifugal distortion constant, which is a small positive constant with $D \\ll B$.\n\nConsider a heteronuclear diatomic molecule at a high absolute temperature $T$, such that $k_B T \\gg hcB$, where $k_B$ is the Boltzmann constant. Derive an approximate expression for the molecular rotational partition function, $q_{\\mathrm{rot}}$, that incorporates this first-order centrifugal distortion correction. Your final expression should be in terms of $T$, $B$, $D$, and the fundamental constants $h$, $c$, and $k_B$.", "solution": "The rotational partition function for a heteronuclear diatomic rotor with centrifugal distortion is defined by\n$$\nq_{\\mathrm{rot}}=\\sum_{J=0}^{\\infty}(2J+1)\\exp\\!\\left[-\\frac{E_{J}}{k_{B}T}\\right],\n$$\nwith energy levels\n$$\nE_{J}=hc\\left[BJ(J+1)-DJ^{2}(J+1)^{2}\\right],\n$$\nwhere $D\\ll B$ and $T$ is high such that $k_{B}T\\gg hcB$. Define $\\beta=1/(k_{B}T)$ and set\n$$\na=\\beta hcB,\\qquad b=\\beta hcD.\n$$\nThen\n$$\nq_{\\mathrm{rot}}=\\sum_{J=0}^{\\infty}(2J+1)\\exp\\!\\left[-aJ(J+1)+bJ^{2}(J+1)^{2}\\right].\n$$\nFor $D\\ll B$, expand the Boltzmann factor to first order in $D$:\n$$\n\\exp\\!\\left[-aJ(J+1)+bJ^{2}(J+1)^{2}\\right]\\approx \\exp\\!\\left[-aJ(J+1)\\right]\\left[1+bJ^{2}(J+1)^{2}\\right].\n$$\nAt high temperature, many $J$ are populated, and the sum can be approximated by an integral:\n$$\nq_{\\mathrm{rot}}\\approx\\int_{0}^{\\infty}(2J+1)\\exp\\!\\left[-aJ(J+1)\\right]\\left[1+bJ^{2}(J+1)^{2}\\right]\\,dJ.\n$$\nLet $y=J(J+1)$ so that $dy=(2J+1)\\,dJ$. Then\n$$\nq_{\\mathrm{rot}}\\approx \\int_{0}^{\\infty}\\exp(-ay)\\,dy + b\\int_{0}^{\\infty}y^{2}\\exp(-ay)\\,dy.\n$$\nUsing the standard integral $\\int_{0}^{\\infty}y^{n}\\exp(-ay)\\,dy=\\frac{n!}{a^{n+1}}$ for $a>0$, we obtain\n$$\n\\int_{0}^{\\infty}\\exp(-ay)\\,dy=\\frac{1}{a},\\qquad \\int_{0}^{\\infty}y^{2}\\exp(-ay)\\,dy=\\frac{2}{a^{3}}.\n$$\nTherefore,\n$$\nq_{\\mathrm{rot}}\\approx \\frac{1}{a}+\\frac{2b}{a^{3}}.\n$$\nSubstituting back $a=\\frac{hcB}{k_{B}T}$ and $b=\\frac{hcD}{k_{B}T}$ gives\n$$\nq_{\\mathrm{rot}}\\approx \\frac{k_{B}T}{hcB}+\\frac{2D(k_{B}T)^{2}}{(hc)^{2}B^{3}}=\\frac{k_{B}T}{hcB}\\left[1+\\frac{2D}{B^{2}}\\frac{k_{B}T}{hc}\\right].\n$$\nThis result is valid in the joint limit $k_{B}T\\gg hcB$ and $\\frac{D}{B^{2}}\\frac{k_{B}T}{hc}\\ll 1$, ensuring that the first-order expansion in $D$ is adequate.", "answer": "$$\\boxed{\\frac{k_{B}T}{hcB}\\left(1+\\frac{2D}{B^{2}}\\frac{k_{B}T}{hc}\\right)}$$", "id": "1991133"}, {"introduction": "The relationship between the exact, discrete quantum mechanical sum for the partition function and its continuous classical integral approximation is a cornerstone of statistical mechanics. This computational exercise challenges you to bridge this theoretical gap by implementing a direct numerical summation and comparing its results to the leading-order classical approximation and its first-order correction derived from the Euler-Maclaurin formula [@problem_id:2821764]. By analyzing the convergence and relative errors across different temperature regimes, you will gain a practical and quantitative understanding of when these vital approximations are valid and how quantum effects manifest at low temperatures.", "problem": "You are asked to design a program that computes and analyzes the rotational partition function of a gas-phase linear rigid rotor using numerical summation and asymptotic approximations. Your implementation must rely only on fundamental statistical mechanics definitions and well-tested spectroscopic facts.\n\nThe fundamental base you must use is:\n- The canonical (configurational) partition function definition: for a set of discrete energy levels $\\{E_i\\}$ with degeneracies $\\{g_i\\}$, the single-molecule partition function is $q = \\sum_i g_i \\exp(-\\beta E_i)$, where $\\beta = 1/(k_{\\mathrm{B}} T)$, $T$ is the absolute temperature in kelvin, and $k_{\\mathrm{B}}$ is the Boltzmann constant.\n- For a linear rigid rotor with moment of inertia $I$, the quantum rotational energy levels are $E_J = \\dfrac{\\hbar^2}{2 I} J (J+1)$ for nonnegative integers $J$, with degeneracy $g_J = 2J+1$. Equivalently, using the spectroscopic rotational constant $\\tilde{B}$ in inverse centimeters, $E_J = h c \\tilde{B} J(J+1)$, where $h$ is Planck's constant and $c$ is the speed of light. Define the rotational temperature $\\theta_{\\mathrm{rot}} = \\dfrac{h c \\tilde{B}}{k_{\\mathrm{B}}}$ so that the Boltzmann factor is $\\exp\\!\\big(-\\theta_{\\mathrm{rot}} J(J+1)/T\\big)$.\n- For homonuclear linear rotors, include the symmetry number $\\sigma$ (an integer, e.g., $\\sigma = 2$ for a diatomic with indistinguishable ends) by dividing the rotational partition function by $\\sigma$.\n\nTask requirements:\n1) Implement an adaptive numerical summation for the single-molecule rotational partition function of a linear rigid rotor,\n$$\nq_{\\mathrm{rot}}(T,\\tilde{B},\\sigma) \\;=\\; \\frac{1}{\\sigma} \\sum_{J=0}^{\\infty} (2J+1)\\, \\exp\\!\\left(-\\frac{\\theta_{\\mathrm{rot}}}{T} J(J+1)\\right),\n$$\nby truncating the sum at a data-dependent maximum $J_{\\max}$ chosen to ensure convergence. Use the following stopping criterion: let $S_N$ be the current partial sum through $J=N$ and $t_{N+1}=(2(N+1)+1)\\exp\\!\\left[-(\\theta_{\\mathrm{rot}}/T)(N+1)(N+2)\\right]$ be the next term; stop when $t_{N+1}/S_N < \\varepsilon$, with tolerance $\\varepsilon = 10^{-12}$. To ensure robustness, enforce a hard cap $J_{\\max}^{\\mathrm{cap}} = 10^6$, and if this cap is reached without meeting the tolerance, stop and use the partial sum at the cap. The returned `q_{rot}` must be dimensionless, and you must also report the actual terminal `J_{max}` used (an integer).\n\n2) Derive and implement the leading classical high-temperature approximation by replacing the sum over $J$ with an integral over a continuous variable, thereby obtaining the leading-order expression $q_{\\mathrm{cl,lead}}(T,\\tilde{B},\\sigma)$. In addition, derive and implement the first correction term obtained from a systematic asymptotic improvement (for example, via the Euler–Maclaurin formula) to produce an improved approximation $q_{\\mathrm{cl,imp}}(T,\\tilde{B},\\sigma)$.\n\n3) For each test case, compute:\n- the converged numerical value `q_{rot}`,\n- the leading classical approximation `q_{cl,lead}`,\n- the relative error of the leading approximation, `relErr_{lead}`,\n- the relative error of the improved approximation, `relErr_{imp}`,\n- the terminal `J_{max}` used by your summation.\n\nPhysical and numerical units and constants:\n- Temperatures $T$ must be in kelvin (K).\n- The spectroscopic rotational constant $\\tilde{B}$ must be in inverse centimeters ($\\mathrm{cm}^{-1}$).\n- Use the exact physical constants $h$ (Planck constant), $c$ (speed of light), and $k_{\\mathrm{B}}$ (Boltzmann constant) from a reliable codata source. When computing $\\theta_{\\mathrm{rot}}=\\dfrac{h c \\tilde{B}}{k_{\\mathrm{B}}}$ with $\\tilde{B}$ in $\\mathrm{cm}^{-1}$, ensure correct unit conversion to obtain $\\theta_{\\mathrm{rot}}$ in kelvin.\n\nTest suite:\nCompute and report results for the following four parameter sets, all using tolerance $\\varepsilon = 10^{-12}$:\n- Case A (heteronuclear, very low temperature): $T = 0.5\\ \\mathrm{K}$, $\\tilde{B} = 2.0\\ \\mathrm{cm}^{-1}$, $\\sigma = 1$.\n- Case B (heteronuclear, moderate temperature): $T = 5.0\\ \\mathrm{K}$, $\\tilde{B} = 2.0\\ \\mathrm{cm}^{-1}$, $\\sigma = 1$.\n- Case C (homonuclear, high temperature): $T = 300.0\\ \\mathrm{K}$, $\\tilde{B} = 2.0\\ \\mathrm{cm}^{-1}$, $\\sigma = 2$.\n- Case D (heteronuclear, high temperature but larger rotational constant): $T = 300.0\\ \\mathrm{K}$, $\\tilde{B} = 10.0\\ \\mathrm{cm}^{-1}$, $\\sigma = 1$.\n\nFinal output format:\nYour program should produce a single line of output containing the results aggregated for the four test cases as a comma-separated list enclosed in square brackets. For each case, append in order the five values\n[`q_{rot}`, `q_{cl,lead}`, `relErr_{lead}`, `relErr_{imp}`, `J_{max}`],\nso the final line will contain $20$ entries total. All $q$ values and relative errors must be reported as dimensionless floating-point numbers, and `J_{max}` as an integer. For example, the output must look like\n`[x_1,x_2,x_3,x_4,x_5,x_6,...,x_{20}]`\nwith no additional text.", "solution": "The problem as stated is rigorously defined, scientifically sound, and self-contained. It is based on fundamental principles of statistical mechanics and quantum mechanics as applied to molecular spectroscopy. All parameters, constants, and objectives are clearly specified. The problem is therefore valid, and we proceed to its solution.\n\nThe solution is structured into two parts: first, the derivation of the necessary formulae, and second, the implementation of these formulae into a computational program.\n\nThe rotational partition function for a linear rigid rotor is given by\n$$\nq_{\\mathrm{rot}}(T, \\tilde{B}, \\sigma) = \\frac{1}{\\sigma} \\sum_{J=0}^{\\infty} g_J \\exp\\left(-\\frac{E_J}{k_{\\mathrm{B}} T}\\right)\n$$\nwhere $T$ is the absolute temperature, $\\sigma$ is the symmetry number, $k_{\\mathrm{B}}$ is the Boltzmann constant, and the energy levels $E_J$ and their degeneracies $g_J$ are given by quantum mechanics. For a linear rigid rotor, the rotational energy levels are $E_J = h c \\tilde{B} J(J+1)$ with degeneracies $g_J = 2J+1$, for rotational quantum numbers $J = 0, 1, 2, \\dots$. Here, $h$ is Planck's constant, $c$ is the speed of light, and $\\tilde{B}$ is the spectroscopic rotational constant.\n\nIt is convenient to define the characteristic rotational temperature, $\\theta_{\\mathrm{rot}} = \\frac{h c \\tilde{B}}{k_{\\mathrm{B}}}$. This parameter has units of temperature and represents the energy spacing between rotational levels. Using this, the partition function becomes:\n$$\nq_{\\mathrm{rot}}(T, \\tilde{B}, \\sigma) = \\frac{1}{\\sigma} \\sum_{J=0}^{\\infty} (2J+1) \\exp\\left(-\\frac{\\theta_{\\mathrm{rot}}}{T} J(J+1)\\right)\n$$\n\n### 1. Numerical Evaluation of the Partition Function\n\nThe infinite sum must be truncated for numerical computation. The summation will be terminated when the next term in the series is sufficiently small compared to the current partial sum. Let $S_N$ be the partial sum up to quantum number $J=N$, and $t_{N+1}$ be the term for $J=N+1$.\n$$\nS_N = \\sum_{J=0}^{N} (2J+1) \\exp\\left(-\\frac{\\theta_{\\mathrm{rot}}}{T} J(J+1)\\right)\n$$\n$$\nt_{N+1} = (2(N+1)+1) \\exp\\left(-\\frac{\\theta_{\\mathrm{rot}}}{T} (N+1)(N+2)\\right)\n$$\nThe summation is terminated at $J_{\\max} = N$ when the condition $t_{N+1}/S_N < \\varepsilon$ is met, for a given tolerance $\\varepsilon = 10^{-12}$. A hard upper limit of $J_{\\max}^{\\mathrm{cap}} = 10^6$ is imposed to prevent excessive computation. The final numerically evaluated partition function is then $q_{\\mathrm{rot}} = S_{J_{\\max}} / \\sigma$.\n\n### 2. High-Temperature Asymptotic Approximations\n\nIn the high-temperature limit, where $T \\gg \\theta_{\\mathrm{rot}}$, the discrete sum can be approximated by an integral.\n\n#### Leading-Order Classical Approximation\n\nThe leading-order term, $q_{\\mathrm{cl,lead}}$, is obtained by replacing the sum over $J$ with an integral from $J=0$ to $J=\\infty$:\n$$\nq_{\\mathrm{cl,lead}} = \\frac{1}{\\sigma} \\int_0^\\infty (2J+1) \\exp\\left(-\\frac{\\theta_{\\mathrm{rot}}}{T} J(J+1)\\right) dJ\n$$\nLet's perform a change of variables. Let $x = J(J+1)$. Then the differential is $dx = (2J+1)dJ$. The limits of integration for $x$ remain $0$ to $\\infty$. The integral simplifies to a standard form:\n$$\nq_{\\mathrm{cl,lead}} = \\frac{1}{\\sigma} \\int_0^\\infty \\exp\\left(-\\frac{\\theta_{\\mathrm{rot}}}{T} x\\right) dx = \\frac{1}{\\sigma} \\left[ -\\frac{T}{\\theta_{\\mathrm{rot}}} \\exp\\left(-\\frac{\\theta_{\\mathrm{rot}}}{T} x\\right) \\right]_0^\\infty\n$$\nEvaluating the integral at the limits gives:\n$$\nq_{\\mathrm{cl,lead}} = \\frac{1}{\\sigma} \\left( 0 - \\left(-\\frac{T}{\\theta_{\\mathrm{rot}}}\\right) \\right) = \\frac{T}{\\sigma \\theta_{\\mathrm{rot}}}\n$$\nThis is the well-known classical approximation for the rotational partition function.\n\n#### Improved Approximation with First-Order Correction\n\nA more accurate approximation, $q_{\\mathrm{cl,imp}}$, can be found by including correction terms from a semi-classical expansion, derivable via the Euler-Maclaurin formula. The formula relates a discrete sum to an integral and its derivatives:\n$$\n\\sum_{J=0}^{\\infty} f(J) \\approx \\int_{0}^{\\infty} f(x) dx + \\frac{1}{2}f(0) - \\frac{1}{12}f'(0) + \\dots\n$$\nLet $y = \\theta_{\\mathrm{rot}}/T$ and $f(J) = (2J+1)\\exp(-y J(J+1))$. We have already found the integral term:\n$$\n\\int_{0}^{\\infty} f(x) dx = \\frac{1}{y} = \\frac{T}{\\theta_{\\mathrm{rot}}}\n$$\nNext, we evaluate the function and its derivative at $J=0$:\n$$\nf(0) = (2(0)+1)\\exp(0) = 1\n$$\n$$\nf'(J) = \\frac{d}{dJ} \\left( (2J+1)e^{-y J(J+1)} \\right) = 2e^{-y J(J+1)} - y(2J+1)^2 e^{-y J(J+1)}\n$$\n$$\nf'(0) = 2e^0 - y(1)^2 e^0 = 2 - y\n$$\nSubstituting these into the Euler-Maclaurin formula gives the sum as:\n$$\n\\sum_{J=0}^{\\infty} f(J) \\approx \\frac{1}{y} + \\frac{1}{2}(1) - \\frac{1}{12}(2-y) = \\frac{1}{y} + \\frac{1}{2} - \\frac{1}{6} + \\frac{y}{12} = \\frac{1}{y} + \\frac{1}{3} + \\frac{y}{12}\n$$\nThe high-temperature limit corresponds to small $y$. The expansion of the sum in terms of $y$ is $\\frac{1}{y} + \\frac{1}{3} + O(y)$. The improved approximation, $q_{\\mathrm{cl,imp}}$, includes the first two terms of this expansion:\n$$\nq_{\\mathrm{cl,imp}} = \\frac{1}{\\sigma} \\left( \\frac{T}{\\theta_{\\mathrm{rot}}} + \\frac{1}{3} \\right) = q_{\\mathrm{cl,lead}} + \\frac{1}{3\\sigma}\n$$\nThis provides the first-order quantum correction to the classical result.\n\n### 3. Implementation and Constants\n\nFor the computation, we use the CODATA 2018 values for the physical constants obtained from the `scipy.constants` library:\n- Planck constant, $h \\approx 6.62607015 \\times 10^{-34}$ J s\n- Speed of light, $c \\approx 2.99792458 \\times 10^{8}$ m/s\n- Boltzmann constant, $k_{\\mathrm{B}} \\approx 1.380649 \\times 10^{-23}$ J/K\n\nThe rotational constant $\\tilde{B}$ is given in units of cm$^{-1}$. To calculate $\\theta_{\\mathrm{rot}}$ in Kelvin, $\\tilde{B}$ must be converted to m$^{-1}$ by multiplying by $100$.\n$$\n\\theta_{\\mathrm{rot}}[\\mathrm{K}] = \\frac{h[\\mathrm{J \\cdot s}] \\cdot c[\\mathrm{m/s}] \\cdot (\\tilde{B}[\\mathrm{cm^{-1}}] \\times 100 [\\mathrm{m/cm}])}{k_{\\mathrm{B}}[\\mathrm{J/K}]}\n$$\nThe relative errors are calculated as specified: $\\mathrm{relErr}_{\\mathrm{lead}} = |q_{\\mathrm{cl,lead}} - q_{\\mathrm{rot}}| / q_{\\mathrm{rot}}$ and $\\mathrm{relErr}_{\\mathrm{imp}} = |q_{\\mathrm{cl,imp}} - q_{\\mathrm{rot}}| / q_{\\mathrm{rot}}$.\nThe program will execute these calculations for each test case and format the output as requested.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.constants import h, c, k\n\ndef solve():\n    \"\"\"\n    Computes and analyzes the rotational partition function for a linear\n    rigid rotor for a defined set of test cases.\n    \"\"\"\n\n    test_cases = [\n        # (T [K], B_tilde [cm^-1], sigma), Case Label\n        (0.5, 2.0, 1),    # Case A\n        (5.0, 2.0, 1),    # Case B\n        (300.0, 2.0, 2),  # Case C\n        (300.0, 10.0, 1)  # Case D\n    ]\n\n    results = []\n    for case in test_cases:\n        T, B_tilde, sigma = case\n        res_tuple = calculate_rotational_properties(T, B_tilde, sigma)\n        results.extend(res_tuple)\n\n    # Final print statement in the exact required format.\n    # We format floats with a general precision specifier for clarity,\n    # and integers as standard integers.\n    print(f\"[{','.join(f'{val:.12g}' if isinstance(val, float) else str(val) for val in results)}]\")\n\ndef calculate_rotational_properties(T, B_tilde, sigma):\n    \"\"\"\n    Calculates q_rot, q_cl,lead, relative errors, and J_max for a single case.\n\n    Args:\n        T (float): Absolute temperature in Kelvin.\n        B_tilde (float): Rotational constant in cm^-1.\n        sigma (int): Symmetry number.\n\n    Returns:\n        tuple: A tuple containing (q_rot, q_cl_lead, relErr_lead, relErr_imp, J_max).\n    \"\"\"\n    epsilon = 1e-12\n    J_max_cap = 1000000\n\n    # Calculate the characteristic rotational temperature, theta_rot.\n    # B_tilde is in cm^-1, so it's converted to m^-1 by multiplying by 100.\n    theta_rot = (h * c * B_tilde * 100.0) / k\n    theta_rot_over_T = theta_rot / T\n\n    # 1. Numerical summation for q_rot\n    # The sum starts with the J=0 term.\n    current_sum = 1.0  # This is S_0\n    J = 0\n    J_max = 0\n\n    while J < J_max_cap:\n        J_next = J + 1\n        exponent_next = -theta_rot_over_T * (J_next * (J_next + 1))\n        \n        # Check for potential underflow to prevent exp() from returning 0\n        # prematurely, which might affect very low-temperature calculations.\n        # np.exp handles large negative exponents gracefully.\n        term_next = (2.0 * J_next + 1.0) * np.exp(exponent_next)\n\n        # Stopping criterion: t_{N+1} / S_N < epsilon\n        # We stop when the next term is negligible compared to the current sum.\n        if term_next == 0.0 or term_next / current_sum < epsilon:\n            J_max = J  # The sum is converged up to J.\n            break\n        \n        current_sum += term_next\n        J += 1\n    else:  # This 'else' belongs to the 'while' loop.\n        J_max = J_max_cap\n\n    q_rot = current_sum / sigma\n\n    # 2. High-temperature approximations\n    q_cl_lead = (T / theta_rot) / sigma\n    q_cl_imp = q_cl_lead + 1.0 / (3.0 * sigma)\n\n    # 3. Relative errors\n    relErr_lead = np.abs(q_cl_lead - q_rot) / q_rot if q_rot != 0 else 0.0\n    relErr_imp = np.abs(q_cl_imp - q_rot) / q_rot if q_rot != 0 else 0.0\n\n    return q_rot, q_cl_lead, relErr_lead, relErr_imp, J_max\n\nsolve()\n```", "id": "2821764"}]}