{"hands_on_practices": [{"introduction": "The translational partition function, $q_T$, provides a measure of the number of accessible translational states for a particle. While it depends on macroscopic variables like temperature and volume, it is also fundamentally linked to intrinsic particle properties like mass. This exercise explores this mass dependence by comparing hydrogen ($H_2$) with its heavier isotope, deuterium ($D_2$). By calculating the ratio of their partition functions, you will gain a concrete understanding of how a microscopic change in mass manifests as a thermodynamic isotope effect, a crucial concept in physical chemistry and kinetics. [@problem_id:2014973]", "problem": "Consider two separate, identical containers, each with a fixed volume $V$. Both containers are maintained at the same constant absolute temperature $T$. The first container is filled with a low-density gas of hydrogen molecules ($H_2$), which can be treated as an ideal gas. The second container is filled with a low-density gas of deuterium molecules ($D_2$), also treated as an ideal gas. Deuterium ($D$) is a stable isotope of hydrogen. For the purposes of this problem, you may assume that the mass of a single deuterium atom is exactly twice the mass of a single hydrogen atom.\n\nCalculate the ratio of the translational partition function for a single deuterium molecule, $Z_{D_2}$, to the translational partition function for a single hydrogen molecule, $Z_{H_2}$.\n\nExpress your answer as a single closed-form analytic expression.", "solution": "For a single particle of mass $m$ in a three-dimensional box at absolute temperature $T$, the classical translational partition function is given by\n$$\nZ_{\\text{trans}}(m)=\\frac{V}{\\lambda_{T}^{3}}, \\quad \\lambda_{T}=\\frac{h}{\\sqrt{2\\pi m k_{B}T}},\n$$\nwhich is equivalently\n$$\nZ_{\\text{trans}}(m)=\\frac{V\\left(2\\pi m k_{B}T\\right)^{3/2}}{h^{3}}.\n$$\nTherefore, for two species at the same $V$ and $T$, the ratio of their single-molecule translational partition functions depends only on the mass as\n$$\n\\frac{Z_{D_{2}}}{Z_{H_{2}}}=\\left(\\frac{m_{D_{2}}}{m_{H_{2}}}\\right)^{3/2}.\n$$\nLet $m_{H}$ be the mass of a hydrogen atom. Then $m_{H_{2}}=2m_{H}$. The problem states that a deuterium atom has mass $2m_{H}$, so a deuterium molecule has mass $m_{D_{2}}=2\\cdot(2m_{H})=4m_{H}$. Hence\n$$\n\\frac{m_{D_{2}}}{m_{H_{2}}}=\\frac{4m_{H}}{2m_{H}}=2,\n$$\nand thus\n$$\n\\frac{Z_{D_{2}}}{Z_{H_{2}}}=\\left(2\\right)^{3/2}.\n$$", "answer": "$$\\boxed{2^{3/2}}$$", "id": "2014973"}, {"introduction": "The standard formula for the translational partition function explicitly features the container's volume, $V$. A subtle but important question is whether the specific shape of the container matters, or if volume is the only relevant geometric parameter. This practice challenges you to address this question through a carefully constructed thought experiment. By comparing the partition function of a molecule in a cube versus a sphere of identical volume, you will clarify the assumptions underlying the classical approximation and appreciate that $q_T$ is a state function, independent of the container's specific geometry in this limit. [@problem_id:2014964]", "problem": "Consider a single nitrogen molecule, with mass $m$, which is treated as an ideal gas particle. The molecule is confined within a container at a constant temperature $T$. We compare two scenarios. In scenario A, the container is a cubic box with an internal volume of $V_0 = 1.00$ Liter. In scenario B, the container is a spherical flask, also with an internal volume of $V_0 = 1.00$ Liter. Let $q_{cube}$ be the translational partition function of the nitrogen molecule in the cubic box, and let $q_{sphere}$ be the translational partition function in the spherical flask. Assume the temperature is high enough that the translational motion can be treated classically. Planck's constant is $h$ and the Boltzmann constant is $k_B$.\n\nWhat is the value of the ratio $R = \\frac{q_{sphere}}{q_{cube}}$?\n\nA. $1$\n\nB. $\\frac{\\pi}{6}$\n\nC. $\\frac{6}{\\pi}$\n\nD. $(\\frac{4\\pi}{3})^{1/3}$\n\nE. $(\\frac{\\pi}{6})^{1/3}$", "solution": "For a single particle in the classical (high-temperature) limit, the translational partition function is obtained from the phase-space integral,\n$$\nq=\\frac{1}{h^{3}}\\int_{V}d^{3}r\\int d^{3}p\\,\\exp\\!\\left(-\\beta\\frac{p^{2}}{2m}\\right),\n$$\nwith $\\beta=1/(k_{B}T)$. The spatial integral yields the accessible volume $V$, which depends only on the volume and not on the container shape:\n$$\n\\int_{V}d^{3}r=V.\n$$\nThe momentum integral is Gaussian and evaluates to\n$$\n\\int d^{3}p\\,\\exp\\!\\left(-\\beta\\frac{p^{2}}{2m}\\right)=(2\\pi m k_{B}T)^{3/2}.\n$$\nTherefore,\n$$\nq=\\frac{V(2\\pi m k_{B}T)^{3/2}}{h^{3}}.\n$$\nSince both the cube and the sphere have the same volume $V_{0}$, their single-particle translational partition functions are equal:\n$$\nq_{cube}=q_{sphere}=\\frac{V_{0}(2\\pi m k_{B}T)^{3/2}}{h^{3}}.\n$$\nHence, the ratio is\n$$\nR=\\frac{q_{sphere}}{q_{cube}}=1.\n$$", "answer": "$$\\boxed{A}$$", "id": "2014964"}, {"introduction": "The widely used integral form of the translational partition function is a classical approximation, valid when the thermal energy is much larger than the spacing between quantum energy levels. The true partition function is a discrete sum over these quantized states. This advanced computational practice tasks you with bridging the gap between the quantum and classical worlds directly. By implementing an algorithm to compute the exact quantum sum and comparing it to the classical integral, you will develop a quantitative feel for the conditions under which the classical approximation holds and when quantum effects become dominant, a core skill in modern computational and theoretical chemistry. [@problem_id:2823215]", "problem": "Design and implement a program that, for a single nonrelativistic particle of mass $m$ in a three-dimensional cubic infinite potential well of side length $L$, computes the canonical translational partition function $q_{\\text{trans}}$ in two ways and compares them across several thermodynamic and geometric regimes.\n\nThe computation must be grounded in the canonical ensemble definition. Start from the Boltzmann sum definition $q_{\\text{trans}} = \\sum_{i} \\exp\\left(-\\beta E_{i}\\right)$, where $\\beta = 1/\\left(k_{\\mathrm{B}} T\\right)$ for temperature $T$ and Boltzmann constant $k_{\\mathrm{B}}$, and where the quantum energy levels for a particle in a three-dimensional cubic box of side $L$ are given by $E_{n_x n_y n_z} = \\frac{h^2}{8 m L^2}\\left(n_x^2 + n_y^2 + n_z^2\\right)$ with $n_x,n_y,n_z \\in \\mathbb{N}$. Your program must compute:\n\n- An explicit-state sum based on the separability of the Hamiltonian. Use that the three-dimensional sum factors into a product of three identical one-dimensional sums over $n \\in \\mathbb{N}$ of the form $S(c) = \\sum_{n=1}^{\\infty} \\exp\\left(-c n^2\\right)$, where $c = \\beta \\,\\frac{h^2}{8 m L^2}$. Denote $q_{\\text{sum}} = \\left[S(c)\\right]^3$.\n\n- An integral (continuum) approximation obtained by replacing the sum over quantum states by the appropriate phase-space integral with quantum cell volume $h^3$. Denote this approximation by $q_{\\text{int}}$. This $q_{\\text{int}}$ must be expressed in terms of $T$, $L$, $m$, $h$, and $k_{\\mathrm{B}}$ and must be dimensionless. The volume is $V = L^3$.\n\nFor numerical stability and efficiency across regimes, the one-dimensional series $S(c)$ must be evaluated by an adaptive, provably convergent strategy that uses only low-lying box states explicitly and treats the remainder analytically:\n\n- Define the dimensionless parameter $c = \\beta \\,\\frac{h^2}{8 m L^2}$.\n\n- If $c \\geq 0.5$, compute $S(c)$ by explicitly summing $s_N = \\sum_{n=1}^{N} \\exp\\left(-c n^2\\right)$ and approximating the tail by a Gaussian integral with a half-integer endpoint:\n  $$R_N(c) \\approx \\int_{N+\\frac{1}{2}}^{\\infty} \\exp\\left(-c n^2\\right)\\, dn = \\frac{1}{2}\\sqrt{\\frac{\\pi}{c}}\\,\\mathrm{erfc}\\!\\left(\\left(N+\\frac{1}{2}\\right)\\sqrt{c}\\right),$$\n  where $\\mathrm{erfc}$ is the complementary error function. Increase $N$ until the relative tail fraction $\\frac{R_N(c)}{s_N + R_N(c)}$ is strictly less than $10^{-12}$, then set $S(c) = s_N + R_N(c)$.\n\n- If $c  0.5$, use the Jacobi theta modular transform to avoid summing many high-lying states. With $q = \\exp\\left(-\\frac{\\pi^2}{c}\\right)$, use\n  $$S(c) = \\frac{1}{2}\\left(\\sqrt{\\frac{\\pi}{c}}\\left[1 + 2\\sum_{n=1}^{\\infty} q^{n^2}\\right] - 1\\right).$$\n  Truncate the transformed series at $M$ such that the next term $q^{(M+1)^2}$ is strictly less than $10^{-12}$ in absolute value, and set $S(c)$ accordingly.\n\nIn both branches, the construction guarantees that only low-lying box states are explicitly summed and that the remainder is controlled analytically.\n\nConstants and units to use:\n\n- Use $h = 6.62607015\\times 10^{-34}\\ \\text{J s}$, $k_{\\mathrm{B}} = 1.380649\\times 10^{-23}\\ \\text{J K}^{-1}$, and the atomic mass unit $u = 1.66053906660\\times 10^{-27}\\ \\text{kg}$.\n\n- Use a particle mass $m = 39.948\\,u$.\n\n- All temperatures $T$ are in Kelvin. All box lengths $L$ are in nanometers; you must convert $L$ to meters internally before any calculation.\n\nProgram output and what to compute:\n\n- For each test case $(T, L)$ in the test suite below, compute the relative deviation\n  $$\\Delta(T,L) = \\frac{q_{\\text{sum}}(T,L) - q_{\\text{int}}(T,L)}{q_{\\text{int}}(T,L)}.$$\n\n- Your program must print a single line containing a Python-style list of the values $\\Delta(T,L)$ for the test suite, in the exact order listed, formatted in scientific notation with eight significant digits for each entry.\n\n- No other output is permitted.\n\nTest suite to evaluate:\n\n- Case $1$: $T = 0.5\\ \\text{K}$, $L = 1.0\\ \\text{nm}$.\n\n- Case $2$: $T = 5.0\\ \\text{K}$, $L = 2.0\\ \\text{nm}$.\n\n- Case $3$: $T = 300.0\\ \\text{K}$, $L = 5.0\\ \\text{nm}$.\n\n- Case $4$: $T = 300.0\\ \\text{K}$, $L = 50.0\\ \\text{nm}$.\n\n- Case $5$: $T = 5000.0\\ \\text{K}$, $L = 1.0\\ \\text{nm}$.\n\nFinal output format:\n\n- Your program should produce exactly one line of output containing a single list literal of the form $[x_1,x_2,x_3,x_4,x_5]$, where each $x_i$ is the corresponding $\\Delta(T,L)$ in scientific notation with eight significant digits (e.g., `1.2345678e-05`). No spaces are allowed inside the list.", "solution": "The problem requires the computation and comparison of the canonical translational partition function, $q_{\\text{trans}}$, for a single nonrelativistic particle of mass $m$ confined to a three-dimensional cubic box of side length $L$. The calculation must be performed using two distinct methods: a direct summation over quantum states, $q_{\\text{sum}}$, and a classical continuum approximation derived from a phase-space integral, $q_{\\text{int}}$. The comparison is to be made via the relative deviation $\\Delta = (q_{\\text{sum}} - q_{\\text{int}}) / q_{\\text{int}}$.\n\nThe system is governed by the Schrödinger equation for a particle in an infinite potential well, which yields the quantized energy levels for a cubic box:\n$$E_{n_x n_y n_z} = \\frac{h^2}{8 m L^2}\\left(n_x^2 + n_y^2 + n_z^2\\right)$$\nwhere $h$ is Planck's constant, and the quantum numbers $n_x, n_y, n_z$ are positive integers, i.e., $n_x, n_y, n_z \\in \\{1, 2, 3, \\dots\\}$.\n\nIn the canonical ensemble, the partition function is the sum over all states $i$ of the Boltzmann factor $e^{-\\beta E_i}$, where $\\beta = 1/(k_{\\mathrm{B}} T)$, $k_{\\mathrm{B}}$ is the Boltzmann constant, and $T$ is the absolute temperature.\n\n**1. Integral Approximation ($q_{\\text{int}}$)**\n\nThe integral approximation, also known as the classical or high-temperature limit, is obtained by treating the energy as a continuous variable and replacing the sum over states with an integral over phase space. The canonical partition function for a single particle is given by:\n$$q_{\\text{int}} = \\frac{1}{h^3} \\iint e^{-\\beta H(\\mathbf{r}, \\mathbf{p})} \\, d^3\\mathbf{r} \\, d^3\\mathbf{p}$$\nThe Hamiltonian is $H = \\frac{|\\mathbf{p}|^2}{2m} + V(\\mathbf{r})$. Inside the box, the potential $V(\\mathbf{r}) = 0$, and the particle is confined to a volume $V=L^3$. The integral separates into spatial and momentum parts:\n$$q_{\\text{int}} = \\frac{1}{h^3} \\left( \\int_{\\text{box}} d^3\\mathbf{r} \\right) \\left( \\int e^{-\\beta (p_x^2 + p_y^2 + p_z^2)/(2m)} \\, d^3\\mathbf{p} \\right)$$\nThe spatial integral yields the volume $V = L^3$. The momentum integral is a product of three identical Gaussian integrals:\n$$\\int_{-\\infty}^{\\infty} e^{-\\beta p^2/(2m)} \\, dp = \\sqrt{\\frac{2m\\pi}{\\beta}} = \\sqrt{2\\pi m k_{\\mathrm{B}} T}$$\nCombining these results gives the three-dimensional momentum integral as $(2\\pi m k_{\\mathrm{B}} T)^{3/2}$. Therefore, the integral approximation for the partition function is:\n$$q_{\\text{int}} = \\frac{V}{h^3} (2\\pi m k_{\\mathrm{B}} T)^{3/2} = L^3 \\left( \\frac{2\\pi m k_{\\mathrm{B}} T}{h^2} \\right)^{3/2}$$\nThis expression is dimensionless, as required. It is often written as $q_{\\text{int}} = V / \\Lambda^3$, where $\\Lambda = h/\\sqrt{2\\pi m k_{\\mathrm{B}} T}$ is the thermal de Broglie wavelength.\n\n**2. State Summation Method ($q_{\\text{sum}}$)**\n\nThe quantum-mechanical partition function is a discrete sum over all possible energy states:\n$$q_{\\text{sum}} = \\sum_{n_x=1}^{\\infty} \\sum_{n_y=1}^{\\infty} \\sum_{n_z=1}^{\\infty} \\exp\\left(-\\beta E_{n_x n_y n_z}\\right)$$\nDue to the additive nature of the energy expression, the Hamiltonian is separable, and the partition function factors into a product of three identical one-dimensional partition functions:\n$$q_{\\text{sum}} = \\left[ \\sum_{n=1}^{\\infty} \\exp\\left(-\\beta \\frac{h^2 n^2}{8mL^2}\\right) \\right]^3$$\nWe define a dimensionless parameter $c$:\n$$c = \\beta \\frac{h^2}{8mL^2} = \\frac{h^2}{8mL^2k_{\\mathrm{B}}T}$$\nThis parameter $c$ represents the ratio of the one-dimensional ground state energy ($n=1$) to the thermal energy scale $k_{\\mathrm{B}}T$, up to a constant factor. It governs the system's behavior:\n-   $c \\gg 1$: Quantum regime (low $T$, small $L$). The energy level spacing is large compared to $k_{\\mathrm{B}}T$.\n-   $c \\ll 1$: Classical regime (high $T$, large $L$). The energy levels are closely spaced, approaching a continuum.\n\nUsing this parameter, the one-dimensional sum is $S(c) = \\sum_{n=1}^{\\infty} e^{-cn^2}$, and the total partition function is $q_{\\text{sum}} = [S(c)]^3$.\n\n**3. Numerical Evaluation of $S(c)$**\n\nThe convergence rate of the series $S(c)$ depends critically on $c$. A hybrid strategy is required for robust and efficient computation.\n\n**Case 1: Quantum Regime ($c \\geq 0.5$)**\nFor large $c$, the term $e^{-cn^2}$ decays rapidly with increasing $n$, so the series converges quickly. We compute the sum by explicitly summing a small number of terms $s_N = \\sum_{n=1}^{N} e^{-cn^2}$ and approximating the remaining tail $R_N = \\sum_{n=N+1}^{\\infty} e^{-cn^2}$ with an integral, which is a very accurate approximation for large $n$:\n$$R_N(c) \\approx \\int_{N+1/2}^{\\infty} e^{-cn^2} \\, dn$$\nThe lower limit $N+1/2$ is a standard choice for midpoint rule correction. This integral evaluates to:\n$$R_N(c) = \\frac{1}{2}\\sqrt{\\frac{\\pi}{c}} \\mathrm{erfc}\\left(\\left(N+\\frac{1}{2}\\right)\\sqrt{c}\\right)$$\nwhere $\\mathrm{erfc}$ is the complementary error function. The calculation proceeds by increasing $N$ until the relative contribution of the tail, $R_N / (s_N + R_N)$, falls below a specified tolerance of $10^{-12}$.\n\n**Case 2: Classical Regime ($c  0.5$)**\nFor small $c$, the term $e^{-cn^2}$ decays slowly, and direct summation becomes computationally prohibitive. In this regime, we use the Poisson summation formula, which for this series is equivalent to a modular transformation of the Jacobi theta function:\n$$ \\sum_{n=-\\infty}^{\\infty} e^{-cn^2} = \\sqrt{\\frac{\\pi}{c}} \\sum_{n=-\\infty}^{\\infty} e^{-\\pi^2 n^2 / c} $$\nOur sum is $S(c) = \\frac{1}{2} \\left( \\left(\\sum_{n=-\\infty}^{\\infty} e^{-cn^2}\\right) - 1 \\right)$. Applying the identity yields the expression provided in the problem:\n$$S(c) = \\frac{1}{2}\\left(\\sqrt{\\frac{\\pi}{c}}\\left[1 + 2\\sum_{n=1}^{\\infty} q^{n^2}\\right] - 1\\right)$$\nwhere $q = e^{-\\pi^2/c}$. When $c  0.5$, we have $\\pi^2/c  2\\pi^2 \\approx 19.7$, making $q$ an extremely small number. Consequently, the transformed series $\\sum q^{n^2}$ converges exceptionally fast. We can truncate this sum after a few terms, specifically at the term $M$ where the next term, $q^{(M+1)^2}$, drops below a tolerance of $10^{-12}$.\n\nThis hybrid approach ensures accurate and efficient computation of $q_{\\text{sum}}$ across all physical regimes specified. The final program implements these two methods to compute $q_{\\text{sum}}$ and $q_{\\text{int}}$, and then calculates their relative deviation $\\Delta(T,L)$ for the given test cases.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.special import erfc\n\ndef solve():\n    \"\"\"\n    Computes the translational partition function for a particle in a 3D cubic box\n    using two methods (summation and integral approximation) and finds their\n    relative deviation for several test cases.\n    \"\"\"\n    # Define physical constants\n    H = 6.62607015e-34      # Planck constant (J s)\n    K_B = 1.380649e-23      # Boltzmann constant (J K^-1)\n    U = 1.66053906660e-27   # Atomic mass unit (kg)\n    \n    # Particle mass for Argon-40\n    M_PARTICLE = 39.948 * U # kg\n\n    # Define the test cases from the problem statement.\n    test_cases = [\n        (0.5, 1.0),    # T (K), L (nm)\n        (5.0, 2.0),\n        (300.0, 5.0),\n        (300.0, 50.0),\n        (5000.0, 1.0),\n    ]\n\n    def calculate_S(c: float) - float:\n        \"\"\"\n        Calculates the 1D partition sum S(c) = sum_{n=1 to inf} exp(-c*n^2)\n        using an adaptive strategy based on the value of c.\n        \n        Args:\n            c: The dimensionless parameter h^2 / (8*m*L^2*k_B*T).\n\n        Returns:\n            The value of the sum S(c).\n        \"\"\"\n        if c = 0.5:\n            # Regime 1: c is large (quantum limit). Direct sum + integral tail.\n            N = 0\n            s_N = 0.0\n            while True:\n                N += 1\n                s_next = s_N + np.exp(-c * N**2)\n                \n                # Approximate the tail R_N using the integral of a Gaussian\n                sqrt_c = np.sqrt(c)\n                arg_erfc = (N + 0.5) * sqrt_c\n                R_N = 0.5 * np.sqrt(np.pi / c) * erfc(arg_erfc)\n                \n                # Check for convergence based on the relative size of the tail\n                if R_N == 0.0 or R_N / (s_next + R_N)  1.0e-12:\n                    return s_next + R_N\n                \n                s_N = s_next\n        else:\n            # Regime 2: c is small (classical limit). Use Jacobi theta transform.\n            pi_squared_over_c = np.pi**2 / c\n            \n            M = 1\n            series_sum = 0.0\n            while True:\n                # Term for n=M\n                term_M = np.exp(-pi_squared_over_c * (M**2))\n                series_sum += term_M\n                \n                # Check the next term for the truncation condition\n                # The exponent grows as (M+1)^2, so the term shrinks very fast\n                term_M_plus_1 = np.exp(-pi_squared_over_c * ((M + 1)**2))\n                if term_M_plus_1  1.0e-12:\n                    break\n                M += 1\n\n            S_val = 0.5 * (np.sqrt(np.pi / c) * (1.0 + 2.0 * series_sum) - 1.0)\n            return S_val\n\n    results = []\n    \n    # Pre-calculate the constant part of the parameter 'c'\n    c_prefactor = H**2 / (8 * M_PARTICLE * K_B)\n    \n    # Pre-calculate constant part of q_int\n    q_int_prefactor = (2 * np.pi * M_PARTICLE * K_B / H**2)**1.5\n\n    for T, L_nm in test_cases:\n        # Convert box length L from nanometers to meters\n        L_m = L_nm * 1e-9\n        \n        # Calculate the dimensionless parameter c\n        c = c_prefactor / (L_m**2 * T)\n        \n        # 1. Compute q_sum using the state summation method\n        S_c = calculate_S(c)\n        q_sum = S_c**3\n        \n        # 2. Compute q_int using the integral approximation\n        V = L_m**3\n        q_int = V * q_int_prefactor * T**1.5\n        \n        # 3. Calculate the relative deviation and store it\n        delta = (q_sum - q_int) / q_int\n        results.append(delta)\n\n    # Final print statement in the exact required format.\n    # The format specifier \"{:.7e}\" yields 8 significant digits (1 before decimal, 7 after).\n    formatted_results = [f\"{res:.7e}\" for res in results]\n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n```", "id": "2823215"}]}