{"hands_on_practices": [{"introduction": "A fundamental skill in chemical kinetics is the ability to translate a proposed reaction mechanism into a system of dynamical equations. This exercise [@problem_id:2657588] guides you through this process for the Brusselator, a canonical model for chemical oscillations. By deriving the governing ordinary differential equations from mass-action principles and performing a linear stability analysis, you will determine the precise conditions under which the system transitions from a stable steady state to sustained oscillatory behavior via a Hopf bifurcation.", "problem": "In a continuously stirred open reactor modeling oscillatory dynamics in the Belousov–Zhabotinsky (BZ) reaction, consider the idealized autocatalytic scheme with chemostatted feed species $A$ and $B$ (held at constant concentrations by continuous inflow) and inert outflow products $D$ and $E$:\n- $A \\to X$,\n- $2X + Y \\to 3X$,\n- $B + X \\to Y + D$,\n- $X \\to E$.\nAssume spatial homogeneity and apply the law of mass action to derive the time evolution of the concentrations $x(t)$ and $y(t)$ of species $X$ and $Y$ as ordinary differential equations (ODEs). You may choose units of time and concentration so that all rate constants are set to $1$ by nondimensionalization. Starting from fundamental mass-action kinetics and the stoichiometric net changes implied by the reactions, derive the dimensionless ODEs for $x(t)$ and $y(t)$, determine the unique homogeneous fixed point $(x^{*}, y^{*})$, and perform a linear stability analysis about $(x^{*}, y^{*})$ to obtain the Hopf bifurcation threshold in terms of the feed parameter $A$. Report only the critical value $B_{\\mathrm{H}}(A)$ at which the fixed point loses stability via a Hopf bifurcation. Express your final answer as a closed-form analytic expression in $A$ (no units). No rounding is required.", "solution": "The problem statement is evaluated and deemed valid. It is a scientifically grounded, well-posed, and objective problem from the field of chemical kinetics and nonlinear dynamics. It provides all necessary information to derive a unique solution without contradiction. We will now proceed with the full derivation.\n\nThe task is to analyze the stability of an idealized autocatalytic reaction scheme, known as the Brusselator model, and determine the critical parameter value for the onset of oscillatory behavior via a Hopf bifurcation.\n\nThe stipulated reaction mechanism consists of four elementary steps:\n1. $A \\to X$\n2. $2X + Y \\to 3X$\n3. $B + X \\to Y + D$\n4. $X \\to E$\n\nHere, the concentrations of feed species $A$ and $B$ are held constant and are treated as parameters. The concentrations of the intermediates $X$ and $Y$ are the dynamic variables, denoted by $x(t)$ and $y(t)$ respectively. The products $D$ and $E$ are considered inert and are removed from the system.\n\nWe apply the law of mass action to each step to determine the contribution to the rate of change of concentrations $x$ and $y$. All rate constants are set to $1$ due to nondimensionalization.\n\nThe rate of change for $x$, denoted $\\frac{dx}{dt}$, is given by the sum of production and consumption rates from each reaction involving species $X$:\n- Reaction $1$: Production of $X$. Rate is $k_1[A] = 1 \\cdot A = A$. Contribution is $+A$.\n- Reaction $2$: Net production of one molecule of $X$ ($3X - 2X = X$). Rate is $k_2[X]^2[Y] = 1 \\cdot x^2y = x^2y$. Contribution is $+x^2y$.\n- Reaction $3$: Consumption of $X$. Rate is $k_3[B][X] = 1 \\cdot Bx = Bx$. Contribution is $-Bx$.\n- Reaction $4$: Consumption of $X$. Rate is $k_4[X] = 1 \\cdot x = x$. Contribution is $-x$.\n\nSumming these contributions yields the first ordinary differential equation (ODE):\n$$ \\frac{dx}{dt} = A + x^2y - Bx - x $$\n\nSimilarly, the rate of change for $y$, denoted $\\frac{dy}{dt}$, is determined from reactions involving species $Y$:\n- Reaction $2$: Consumption of $Y$. Rate is $k_2[X]^2[Y] = x^2y$. Contribution is $-x^2y$.\n- Reaction $3$: Production of $Y$. Rate is $k_3[B][X] = Bx$. Contribution is $+Bx$.\n\nSumming these contributions yields the second ODE:\n$$ \\frac{dy}{dt} = Bx - x^2y $$\n\nWe have thus derived the system of dimensionless ODEs describing the time evolution of the concentrations:\n$$ \\frac{dx}{dt} = f(x, y) = A + x^2y - (B+1)x $$\n$$ \\frac{dy}{dt} = g(x, y) = Bx - x^2y $$\n\nNext, we find the homogeneous fixed point $(x^*, y^*)$ of this system by setting the time derivatives to zero:\n$$ \\frac{dx}{dt} = 0 \\implies A + (x^*)^2y^* - (B+1)x^* = 0 $$\n$$ \\frac{dy}{dt} = 0 \\implies Bx^* - (x^*)^2y^* = 0 $$\n\nFrom the second equation, assuming a non-trivial state where $x^* \\neq 0$ (which is required as $A>0$), we can divide by $x^*$:\n$$ B - x^*y^* = 0 \\implies x^*y^* = B $$\nThis also implies that $(x^*)^2y^* = Bx^*$.\n\nSubstituting this result, $(x^*)^2y^* = Bx^*$, into the first equation gives:\n$$ A + Bx^* - (B+1)x^* = 0 $$\n$$ A + Bx^* - Bx^* - x^* = 0 $$\n$$ A - x^* = 0 \\implies x^* = A $$\n\nUsing $x^*=A$ in the relation $x^*y^* = B$, we find the corresponding fixed-point concentration for $y$:\n$$ Ay^* = B \\implies y^* = \\frac{B}{A} $$\nTherefore, the unique homogeneous fixed point of the system is $(x^*, y^*) = (A, \\frac{B}{A})$.\n\nTo analyze the stability of this fixed point, we perform a linear stability analysis. We compute the Jacobian matrix $J$ of the system, which is defined as:\n$$ J = \\begin{pmatrix} \\frac{\\partial f}{\\partial x} & \\frac{\\partial f}{\\partial y} \\\\ \\frac{\\partial g}{\\partial x} & \\frac{\\partial g}{\\partial y} \\end{pmatrix} $$\nThe partial derivatives are:\n$$ \\frac{\\partial f}{\\partial x} = 2xy - (B+1) $$\n$$ \\frac{\\partial f}{\\partial y} = x^2 $$\n$$ \\frac{\\partial g}{\\partial x} = B - 2xy $$\n$$ \\frac{\\partial g}{\\partial y} = -x^2 $$\n\nNow, we evaluate the Jacobian matrix at the fixed point $(x^*, y^*) = (A, \\frac{B}{A})$.\n$$ \\left.\\frac{\\partial f}{\\partial x}\\right|_{(x^*,y^*)} = 2A\\left(\\frac{B}{A}\\right) - (B+1) = 2B - B - 1 = B - 1 $$\n$$ \\left.\\frac{\\partial f}{\\partial y}\\right|_{(x^*,y^*)} = A^2 $$\n$$ \\left.\\frac{\\partial g}{\\partial x}\\right|_{(x^*,y^*)} = B - 2A\\left(\\frac{B}{A}\\right) = B - 2B = -B $$\n$$ \\left.\\frac{\\partial g}{\\partial y}\\right|_{(x^*,y^*)} = -A^2 $$\n\nThe Jacobian matrix evaluated at the fixed point is:\n$$ J(x^*, y^*) = \\begin{pmatrix} B - 1 & A^2 \\\\ -B & -A^2 \\end{pmatrix} $$\n\nA Hopf bifurcation occurs when the fixed point loses stability as a pair of complex conjugate eigenvalues of the Jacobian matrix crosses the imaginary axis. For a 2D system, this corresponds to the conditions:\n$1$. $\\mathrm{Tr}(J) = 0$\n$2$. $\\mathrm{Det}(J) > 0$\n\nFirst, we calculate the trace of the Jacobian matrix:\n$$ \\mathrm{Tr}(J) = (B - 1) + (-A^2) = B - 1 - A^2 $$\nNext, we calculate the determinant:\n$$ \\mathrm{Det}(J) = (B - 1)(-A^2) - (A^2)(-B) = -A^2B + A^2 + A^2B = A^2 $$\n\nThe condition $\\mathrm{Det}(J) > 0$ becomes $A^2 > 0$. Since $A$ is the concentration of a feed species, it must be a positive parameter, $A > 0$. Thus, this condition is always satisfied.\n\nThe bifurcation occurs when the trace is zero. We set $\\mathrm{Tr}(J) = 0$ and solve for the critical value of $B$, which we denote as $B_{\\mathrm{H}}(A)$:\n$$ B_{\\mathrm{H}}(A) - 1 - A^2 = 0 $$\n$$ B_{\\mathrm{H}}(A) = 1 + A^2 $$\n\nThis is the critical value of the parameter $B$ at which the real part of the eigenvalues of the Jacobian changes sign, leading to a Hopf bifurcation. For $B < 1 + A^2$, $\\mathrm{Tr}(J) < 0$ and the fixed point is stable. For $B > 1 + A^2$, $\\mathrm{Tr}(J) > 0$ and the fixed point becomes unstable, giving rise to sustained oscillations (a limit cycle).\n\nThe Hopf bifurcation threshold is therefore given by the expression $B_{\\mathrm{H}}(A) = 1 + A^2$.", "answer": "$$\n\\boxed{1 + A^{2}}\n$$", "id": "2657588"}, {"introduction": "Realistic chemical models, like the Oregonator, often involve numerous parameters with different physical units, obscuring the underlying dynamics. The powerful technique of nondimensionalization, which you will apply in this practice [@problem_id:2657520], transforms the system into a cleaner form by identifying characteristic scales. This exercise demonstrates how a judicious choice of scaling reveals the crucial separation of timescales between fast activator-inhibitor dynamics and the slow evolution of another species, a hallmark of many relaxation oscillators in chemistry and biology.", "problem": "Consider the Oregonator model of the Belousov–Zhabotinsky reaction (BZ reaction), derived from the Field–Körös–Noyes mechanism under the assumption of constant feed concentrations. Let $X(t)$, $Y(t)$, and $Z(t)$ denote the dimensional concentrations of key intermediates, and let $A$ and $B$ denote constant feed concentrations of bromate and the organic substrate, respectively. The dimensional mass-action kinetics are\n$$\n\\frac{dX}{dt} \\;=\\; k_{1} A Y \\;-\\; k_{2} X Y \\;+\\; k_{3} A X \\;-\\; 2 k_{4} X^{2},\n$$\n$$\n\\frac{dY}{dt} \\;=\\; -\\,k_{1} A Y \\;-\\; k_{2} X Y \\;+\\; k_{5} B Z,\n$$\n$$\n\\frac{dZ}{dt} \\;=\\; k_{3} A X \\;-\\; k_{5} B Z,\n$$\nwhere $k_{1},\\dots,k_{5} > 0$ are rate constants, and $A>0$, $B>0$ are held fixed.\n\nStarting solely from these balance laws and the principle of mass-action kinetics, perform a nondimensionalization by introducing characteristic concentration scales $X_{*}$, $Y_{*}$, $Z_{*}$ and a characteristic time scale $t_{*}$, and defining dimensionless variables $x = X/X_{*}$, $y = Y/Y_{*}$, $z = Z/Z_{*}$, and $\\tau = t/t_{*}$. Choose the scales by balancing terms so that the $X$-equation contains order-one coefficients among its reaction terms and the $Z$-equation exhibits a natural slow time scale set by the consumption of $Z$. Show that the resulting dimensionless system features a small parameter $\\epsilon \\ll 1$ that explicitly encodes the ratio of the slow $Z$-dynamics to the fast $X$-$Y$ dynamics.\n\nReport, as your final answer, the closed-form analytic expression for this small parameter $\\epsilon$ in terms of the dimensional parameters $k_{i}$ and feed concentrations $A$ and $B$. Do not include units in the final reported expression. The solution you provide should identify the chosen $X_{*}$, $Y_{*}$, $Z_{*}$, and $t_{*}$, but your final reported answer must be only the analytical expression for $\\epsilon$.", "solution": "The problem statement is scientifically sound, self-contained, and well-posed. It presents a standard problem in chemical kinetics and nonlinear dynamics: the nondimensionalization of the Oregonator model to elucidate the separation of time scales. The model itself is a cornerstone in the study of oscillating chemical reactions. All necessary equations, variables, and constraints are provided. The instructions for the scaling procedure, while based on physical intuition (term balancing), are standard in dimensional analysis and guide toward a well-defined result. The problem is valid.\n\nThe objective is to derive an expression for the small parameter $\\epsilon$ which represents the ratio of the slow dynamics of species $Z$ to the fast dynamics of species $X$ and $Y$. We will achieve this through a systematic nondimensionalization of the given system of differential equations.\n\nThe dimensional equations are:\n$$\n\\frac{dX}{dt} \\;=\\; k_{1} A Y \\;-\\; k_{2} X Y \\;+\\; k_{3} A X \\;-\\; 2 k_{4} X^{2}\n$$\n$$\n\\frac{dY}{dt} \\;=\\; -\\,k_{1} A Y \\;-\\; k_{2} X Y \\;+\\; k_{5} B Z\n$$\n$$\n\\frac{dZ}{dt} \\;=\\; k_{3} A X \\;-\\; k_{5} B Z\n$$\n\nWe introduce dimensionless variables $x$, $y$, $z$, and $\\tau$ defined by the relations:\n$$\nX(t) = X_{*} x(\\tau), \\quad Y(t) = Y_{*} y(\\tau), \\quad Z(t) = Z_{*} z(\\tau), \\quad t = t_{*} \\tau\n$$\nThe derivatives transform according to the chain rule: $\\frac{d}{dt} = \\frac{d\\tau}{dt}\\frac{d}{d\\tau} = \\frac{1}{t_{*}}\\frac{d}{d\\tau}$.\n\nThe problem states that the $Z$-equation exhibits a slow time scale. We examine the $Z$-equation: $\\frac{dZ}{dt} = k_{3} A X - k_{5} B Z$. The term $-k_{5} B Z$ represents a first-order decay process for $Z$. The characteristic time for this process is $(k_{5} B)^{-1}$. This is the \"natural slow time scale\" mentioned in the problem. We thus choose the characteristic time $t_{*}$ to be this slow time scale:\n$$\nt_{*} = \\frac{1}{k_{5} B}\n$$\n\nWith this choice, the dimensionless time $\\tau$ corresponds to the slow evolution of the system. Now, we must select the concentration scales $X_{*}$, $Y_{*}$, and $Z_{*}$.\n\nLet us transform the $Z$-equation first. Substituting the dimensionless variables and the chosen $t_{*}$:\n$$\n\\frac{Z_{*}}{t_{*}} \\frac{dz}{d\\tau} = k_{3} A (X_{*} x) - k_{5} B (Z_{*} z)\n$$\n$$\nZ_{*} (k_{5} B) \\frac{dz}{d\\tau} = k_{3} A X_{*} x - k_{5} B Z_{*} z\n$$\nDividing by $Z_{*} k_{5} B$:\n$$\n\\frac{dz}{d\\tau} = \\left(\\frac{k_{3} A X_{*}}{k_{5} B Z_{*}}\\right) x - z\n$$\nTo simplify this equation and ensure its coefficients are of order one, we choose the scale $Z_{*}$ by balancing the terms. We set the coefficient of $x$ to $1$:\n$$\n\\frac{k_{3} A X_{*}}{k_{5} B Z_{*}} = 1 \\quad \\implies \\quad Z_{*} = \\frac{k_{3} A}{k_{5} B} X_{*}\n$$\nThis choice leaves the determination of $Z_{*}$ dependent on $X_{*}$.\n\nNext, we address the fast dynamics of $X$ and $Y$. The problem requires that the $X$-equation have order-one coefficients. Let's transform the $X$-equation:\n$$\n\\frac{X_{*}}{t_{*}} \\frac{dx}{d\\tau} = k_{1} A (Y_{*} y) - k_{2} (X_{*} x)(Y_{*} y) + k_{3} A (X_{*} x) - 2 k_{4} (X_{*} x)^{2}\n$$\nSubstitute $t_{*} = 1/(k_{5} B)$ and divide by $X_{*}$:\n$$\n(k_{5} B) \\frac{dx}{d\\tau} = k_{1} A Y_{*} \\frac{1}{X_{*}} y - k_{2} Y_{*} xy + k_{3} A x - 2 k_{4} X_{*} x^{2}\n$$\n$$\n\\frac{dx}{d\\tau} = \\frac{1}{k_{5} B} \\left[ (k_{1} A \\frac{Y_{*}}{X_{*}}) y - (k_{2} Y_{*}) xy + (k_{3} A) x - (2 k_{4} X_{*}) x^{2} \\right]\n$$\nTo make the coefficients of the terms in the square brackets of order one, we balance the most significant production and consumption terms for $X$. A standard choice in the analysis of the Oregonator is to balance the autocatalytic production $k_{3} A X$ against the quadratic consumption $2 k_{4} X^{2}$. This balance defines the scale for $X$:\n$$\nk_{3} A X_{*} \\sim 2 k_{4} X_{*}^{2} \\quad \\implies \\quad X_{*} = \\frac{k_{3} A}{2 k_{4}}\n$$\nNow we choose $Y_{*}$. With $X$ and $Y$ representing the fast variables, their interaction terms should be of comparable magnitude. Let's inspect the terms in the $X$-equation again. We set the coefficient of the $xy$ term to be on the same order as the $x$ and $x^2$ terms. That is, we desire $k_2 Y_* \\sim k_3 A$. This leads to the choice:\n$$\nY_{*} = \\frac{k_{3} A}{k_{2}}\n$$\nWith these scales, let's re-examine the dimensionless $X$-equation:\n$$\n\\frac{dx}{d\\tau} = \\frac{1}{k_{5} B} \\left[ \\left(k_{1} A \\frac{k_{3} A/k_{2}}{k_{3} A/2k_{4}}\\right) y - \\left(k_{2} \\frac{k_{3} A}{k_{2}}\\right) xy + (k_{3} A) x - \\left(2 k_{4} \\frac{k_{3} A}{2k_{4}}\\right) x^{2} \\right]\n$$\n$$\n\\frac{dx}{d\\tau} = \\frac{1}{k_{5} B} \\left[ \\left(\\frac{2 k_{1} k_{4} A}{k_{2}}\\right) y - (k_{3} A) xy + (k_{3} A) x - (k_{3} A) x^{2} \\right]\n$$\nFactoring out the term $k_{3} A$ from the bracket:\n$$\n\\frac{dx}{d\\tau} = \\frac{k_{3} A}{k_{5} B} \\left[ \\left(\\frac{2 k_{1} k_{4}}{k_{2} k_{3}}\\right) y - xy + x - x^{2} \\right]\n$$\nThe dynamics of $X$ are fast, meaning its time derivative on the slow time scale $\\tau$, $\\frac{dx}{d\\tau}$, must be large. This is consistent with the prefactor $\\frac{k_{3} A}{k_{5} B}$ being large for typical BZ reaction parameters, as the rate of the fast processes ($k_3 A$) is much greater than the rate of the slow process ($k_5 B$).\n\nThe problem asks for a small parameter $\\epsilon \\ll 1$ that separates the slow and fast dynamics. This parameter typically multiplies the time derivative of the fast variables in a system written on the slow time scale. We have the form:\n$$\n\\frac{dx}{d\\tau} = (\\text{Large Parameter}) \\times (\\text{Order-one terms})\n$$\nIf we define this Large Parameter as $1/\\epsilon$, we can write:\n$$\n\\epsilon \\frac{dx}{d\\tau} = \\left(\\frac{2 k_{1} k_{4}}{k_{2} k_{3}}\\right) y - xy + x - x^{2}\n$$\nFrom our derivation, the prefactor is $\\frac{k_{3} A}{k_{5} B}$. Thus, we identify:\n$$\n\\frac{1}{\\epsilon} = \\frac{k_{3} A}{k_{5} B}\n$$\nSolving for $\\epsilon$ gives:\n$$\n\\epsilon = \\frac{k_{5} B}{k_{3} A}\n$$\nThis result is physically meaningful. The characteristic time of the fast dynamics is determined by processes like the autocatalytic step, $t_{\\text{fast}} \\sim 1/(k_{3}A)$. The characteristic time of the slow dynamics is set by the consumption of $Z$, $t_{\\text{slow}} \\sim 1/(k_{5}B)$. The small parameter $\\epsilon$ is precisely the ratio of these two time scales:\n$$\n\\epsilon = \\frac{t_{\\text{fast}}}{t_{\\text{slow}}} = \\frac{1/(k_{3}A)}{1/(k_{5}B)} = \\frac{k_{5} B}{k_{3} A}\n$$\nThis confirms our derivation. The problem asks only for the expression for $\\epsilon$.", "answer": "$$\n\\boxed{\\frac{k_5 B}{k_3 A}}\n$$", "id": "2657520"}, {"introduction": "Beyond predicting the onset and period of oscillations, a deeper understanding requires mapping the geometry of the oscillator's phase space. This computational exercise [@problem_id:2657613] delves into the concept of isochrons—curves of constant asymptotic phase—which foliate the basin of attraction of a limit cycle. By numerically computing these structures from their fundamental definition, you will gain direct, quantitative insight into how the timing of an oscillator responds to perturbations, a critical concept for understanding phenomena like synchronization and phase control.", "problem": "Consider the two-variable dimensionless Brusselator model, a canonical mass-action kinetics oscillator used to model the Belousov–Zhabotinsky reaction (BZ reaction), given by the autonomous system of ordinary differential equations\n$$\n\\frac{dx}{dt} = A - (B+1)\\,x + x^2 y,\\qquad\n\\frac{dy}{dt} = B\\,x - x^2 y,\n$$\nwith parameters $A$ and $B$. For $B > 1 + A^2$, this system has a unique, stable limit cycle. The asymptotic phase of a point is defined as follows: pick a distinguished, once-per-cycle event along the limit cycle, namely the local maxima of $x(t)$. Let the limit cycle have period $T$. For any initial condition $(x_0,y_0)$ in the basin of attraction of the limit cycle, integrate the trajectory forward until it is sufficiently close to the limit cycle and record the time $\\tau$ from that moment to the next local maximum of $x(t)$. The normalized asymptotic phase is then\n$$\n\\phi(x_0,y_0) = \\left(1 - \\frac{\\tau}{T}\\right) \\bmod 1 \\in [0,1).\n$$\nAn isochron is a level set of $\\phi$, that is, a set of initial conditions that share the same asymptotic phase.\n\nYour task is to compute numerically, from first principles, approximations to isochrons via the asymptotic phase function $\\phi$ and to quantify their geometric relation to sensitivity to perturbations. Base your computation purely on the above dynamical definition of phase and the existence of a stable limit cycle for suitable $A$ and $B$, without using any pre-derived phase equations or adjoint formulas.\n\nUse the following scientifically standard parameter choices and conventions:\n- Use $A = 1$ and $B = 3$, which satisfies $B > 1 + A^2$ and thus yields a stable limit cycle.\n- Define the limit cycle period $T$ by long-time integration and detection of recurrent local maxima of $x(t)$, using the definition of period as the time between successive occurrences of the same event on the limit cycle.\n- Define the phase $\\phi(x_0,y_0)$ exactly as stated above, by integrating long enough to approach the limit cycle and then measuring the time-to-event relative to the period $T$.\n\nTo probe the geometric meaning of isochrons, consider that along an isochron the asymptotic phase is constant, so the gradient $\\nabla \\phi$ is normal to isochrons, while directions tangent to isochrons incur minimal phase change under small perturbations. For each test case specified below, numerically approximate $\\nabla \\phi$ at the given base point using central finite differences with a small displacement $h$ in $x$ and $y$, then form:\n- A unit normal direction $n$ proportional to $\\nabla \\phi$.\n- A unit tangent direction $t$ obtained by rotating $n$ by $90^\\circ$ in the plane.\n\nFor each test case, compute the ratio\n$$\nr = \\frac{\\Delta \\phi\\big((x_0,y_0), (x_0,y_0) + h\\,t\\big)}{\\Delta \\phi\\big((x_0,y_0), (x_0,y_0) + h\\,n\\big)},\n$$\nwhere $\\Delta \\phi((x_a,y_a),(x_b,y_b))$ denotes the wrapped phase difference on the unit circle, namely the smaller of $|\\phi(x_a,y_a) - \\phi(x_b,y_b)|$ and $1 - |\\phi(x_a,y_a) - \\phi(x_b,y_b)|$. The quantity $r$ is unitless. A small value of $r$ indicates that phase is insensitive to perturbations tangent to isochrons compared to perturbations normal to isochrons.\n\nImplement a program that performs the above computations for the following test suite of parameterized base points and displacement sizes:\n- Case $1$: $(A,B,x_0,y_0,h) = (1, 3, 1.1, 3.0, 0.01)$.\n- Case $2$: $(A,B,x_0,y_0,h) = (1, 3, 1.4, 2.8, 0.01)$.\n- Case $3$: $(A,B,x_0,y_0,h) = (1, 3, 0.9, 3.2, 0.02)$.\n\nAll computed quantities are dimensionless. Your program should:\n- Determine the limit cycle period $T$ for the specified $(A,B)$ by long-time integration and event detection.\n- For each case, compute $\\phi$ at the base point and at the displaced points required for the central differences and for the $t$ and $n$ displacements.\n- Use central differences to approximate $\\nabla \\phi$ at the base point with step $h$.\n- Construct $t$ and $n$ and compute the ratio $r$ as defined above.\n\nAngle-related operations internal to your algorithm may use radians, but the reported ratio $r$ is dimensionless. There are no physical units to report.\n\nYour program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, with each $r$ rounded to exactly $6$ decimal places, in the order of the cases above, for example, $[r_1,r_2,r_3]$.", "solution": "The problem statement has been critically validated and is deemed valid. It is scientifically sound, well-posed, and provides all necessary information for a unique numerical solution. The problem concerns the Brusselator model, a standard system in the study of chemical oscillators, and involves the numerical computation of well-defined quantities from dynamical systems theory, namely the asymptotic phase and isochrons. The parameters $A=1$ and $B=3$ correctly place the system in a regime with a stable limit cycle, as the condition $B > 1+A^2$ becomes $3 > 1+1^2$, which is true. The proposed numerical methodology is coherent and grounded in first principles.\n\nThe solution proceeds by implementing the computational steps as described. The core of the problem is to numerically evaluate the asymptotic phase function $\\phi(x,y)$ and its gradient $\\nabla\\phi$.\n\nThe Brusselator model is given by the system of autonomous ordinary differential equations (ODEs):\n$$\n\\frac{dx}{dt} = f_x(x,y) = A - (B+1)x + x^2 y\n$$\n$$\n\\frac{dy}{dt} = f_y(x,y) = Bx - x^2 y\n$$\nFor the given parameters $A=1$ and $B=3$, the system becomes:\n$$\n\\frac{dx}{dt} = 1 - 4x + x^2 y\n$$\n$$\n\\frac{dy}{dt} = 3x - x^2 y\n$$\nThe numerical solution is constructed in four primary steps.\n\nStep I: Determination of the Limit Cycle Period $T$\nThe period $T$ is the time between successive local maxima of the variable $x(t)$ for a trajectory on the stable limit cycle. To compute $T$, we first integrate the system from an initial condition, for instance, a point $(1.1, 3.0)$ near the unstable fixed point $(A, B/A) = (1, 3)$, for a sufficiently long time to allow the trajectory to converge to the limit cycle. A settling time of $t_{settle} = 300$ is used, which is orders of magnitude larger than the system's characteristic timescales, ensuring convergence.\n\nAfter settling, we continue the integration and detect events corresponding to local maxima of $x(t)$. A local maximum of $x(t)$ occurs when its derivative $\\frac{dx}{dt} = A - (B+1)x + x^2y$ crosses zero from positive to negative. We use a numerical ODE solver with event detection capabilities (`scipy.integrate.solve_ivp` in the implementation) to find the times of several consecutive maxima, $t_1, t_2, \\dots, t_k$. The period is then calculated as the average time difference between these events, $T = \\frac{1}{k-1} \\sum_{i=1}^{k-1} (t_{i+1} - t_i)$, to obtain a robust estimate.\n\nStep II: Computation of the Asymptotic Phase $\\phi(x_0, y_0)$\nThe asymptotic phase $\\phi$ of an initial point $(x_0, y_0)$ is defined by the timing of its trajectory relative to the limit cycle's reference event (the maximum of $x(t)$). To compute $\\phi(x_0, y_0)$, we perform a similar two-stage integration:\n1.  Integrate the trajectory starting from $(x_0, y_0)$ for a long settling time, again chosen as $t_{settle} = 300$, to let it approach the limit cycle. Let the state at the end of this integration be $(x_{settled}, y_{settled})$.\n2.  Starting from $(x_{settled}, y_{settled})$, integrate forward and detect the time of the very next local maximum of $x(t)$. Let this time be $\\tau$.\nThe normalized asymptotic phase is then calculated according to the given formula:\n$$\n\\phi(x_0, y_0) = \\left(1 - \\frac{\\tau}{T}\\right) \\bmod 1\n$$\nThis procedure is encapsulated in a function `get_phi(x, y)` which can be called for any point in the basin of attraction.\n\nStep III: Approximation of the Phase Gradient $\\nabla \\phi$\nThe gradient of the phase function, $\\nabla \\phi = \\left(\\frac{\\partial \\phi}{\\partial x}, \\frac{\\partial \\phi}{\\partial y}\\right)$, is required to determine the directions normal and tangent to the isochrons. We approximate the partial derivatives at a base point $(x_0, y_0)$ using a central finite difference scheme with a step size $h$:\n$$\n\\frac{\\partial \\phi}{\\partial x}\\bigg|_{(x_0, y_0)} \\approx \\frac{\\phi(x_0+h, y_0) - \\phi(x_0-h, y_0)}{2h}\n$$\n$$\n\\frac{\\partial \\phi}{\\partial y}\\bigg|_{(x_0, y_0)} \\approx \\frac{\\phi(x_0, y_0+h) - \\phi(x_0, y_0-h)}{2h}\n$$\nSince phase is a circular quantity in $[0, 1)$, the difference $\\phi_2 - \\phi_1$ must be computed as the shortest signed distance on the circle. A difference $d = \\phi_2 - \\phi_1$ is wrapped into the interval $[-0.5, 0.5]$ by adding or subtracting $1$ if it falls outside this range.\n\nStep IV: Calculation of the Sensitivity Ratio $r$\nWith the gradient vector $g = \\nabla\\phi(x_0, y_0)$, we define a unit normal vector $n = g / \\|g\\|$ and a unit tangent vector $t$ by rotating $n$ by $90^\\circ$, e.g., if $n=(n_x, n_y)$, then $t=(-n_y, n_x)$.\n\nThe core of the analysis is to compare the phase response to perturbations along these two orthogonal directions. We compute the phase at the original point, $\\phi_0 = \\phi(x_0, y_0)$, and at two perturbed points: $P_n = (x_0, y_0) + h\\,n$ and $P_t = (x_0, y_0) + h\\,t$. Let their phases be $\\phi_n = \\phi(P_n)$ and $\\phi_t = \\phi(P_t)$.\n\nThe ratio $r$ is defined using wrapped phase differences from the base point:\n$$\n\\Delta \\phi(\\phi_a, \\phi_b) = \\min(|\\phi_a - \\phi_b|, 1 - |\\phi_a - \\phi_b|)\n$$\n$$\nr = \\frac{\\Delta \\phi(\\phi_t, \\phi_0)}{\\Delta \\phi(\\phi_n, \\phi_0)}\n$$\nThis ratio quantifies the relative sensitivity of the asymptotic phase to perturbations tangent versus normal to the isochron at $(x_0, y_0)$. A small value of $r$ confirms the geometric property that isochrons represent directions of minimal phase response. The entire computation is performed for each test case specified in the problem statement.", "answer": "```python\nimport numpy as np\nfrom scipy.integrate import solve_ivp\n\ndef solve():\n    \"\"\"\n    Main function to solve the Brusselator isochron problem.\n    It computes the period of the limit cycle, defines a phase function,\n    and then calculates the sensitivity ratio 'r' for each test case.\n    \"\"\"\n\n    # --- Problem Parameters ---\n    A = 1.0\n    B = 3.0\n\n    # --- Numerical Integration Parameters ---\n    # High precision is needed for accurate phase differences.\n    rtol = 1e-9\n    atol = 1e-12\n    # Long time to ensure convergence to the limit cycle.\n    t_settle = 300.0\n\n    # --- ODE and Event Definitions ---\n    def brusselator_ode(t, z, A, B):\n        x, y = z\n        dxdt = A - (B + 1) * x + x**2 * y\n        dydt = B * x - x**2 * y\n        return [dxdt, dydt]\n\n    def dx_dt_event(t, z, A, B):\n        \"\"\"Event function for finding local maxima of x(t).\"\"\"\n        x, y = z\n        return A - (B + 1) * x + x**2 * y\n    \n    # Event triggers when dx/dt=0 and is decreasing (maxima of x).\n    dx_dt_event.direction = -1\n    dx_dt_event.terminal = False\n\n    # --- Step 1: Compute Limit Cycle Period T ---\n    def get_period(A, B):\n        # Initial condition near the unstable fixed point (A, B/A)\n        z0 = [1.1, 3.0]\n        t_span_period = [0, t_settle + 100.0]  # Integrate long enough for several cycles after settling\n        \n        sol = solve_ivp(\n            brusselator_ode,\n            t_span_period,\n            z0,\n            args=(A, B),\n            dense_output=True,\n            events=dx_dt_event,\n            rtol=rtol,\n            atol=atol,\n        )\n        \n        # Filter events that occur after settling\n        event_times = sol.t_events[0]\n        settled_event_times = event_times[event_times > t_settle]\n        \n        if len(settled_event_times) < 2:\n            raise RuntimeError(\"Could not detect enough cycles to determine period.\")\n\n        # Calculate period as the average of time differences between maxima\n        periods = np.diff(settled_event_times)\n        return np.mean(periods)\n\n    T = get_period(A, B)\n\n    # --- Step 2: Define Asymptotic Phase Function with Memoization ---\n    phase_cache = {}\n\n    def get_phi(x0, y0, A, B, T):\n        if (x0, y0) in phase_cache:\n            return phase_cache[(x0, y0)]\n\n        # 1. Integrate for a long time to settle onto the limit cycle\n        t_span_settle = [0, t_settle]\n        sol_settle = solve_ivp(\n            brusselator_ode,\n            t_span_settle,\n            [x0, y0],\n            args=(A, B),\n            rtol=rtol,\n            atol=atol,\n        )\n        z_settled = sol_settle.y[:, -1]\n\n        # 2. Integrate from settled point to find time-to-next-maximum (tau)\n        t_span_final = [0, T * 1.5]  # A span slightly larger than T\n        sol_final = solve_ivp(\n            brusselator_ode,\n            t_span_final,\n            z_settled,\n            args=(A, B),\n            events=dx_dt_event,\n            rtol=rtol,\n            atol=atol,\n        )\n        \n        if len(sol_final.t_events[0]) == 0:\n            # If no event found, trajectory may be on/very near the max.\n            # Rerun with longer integration time to be sure.\n            sol_final = solve_ivp(\n                brusselator_ode,\n                [0, T*2.5], z_settled, args=(A,B), events=dx_dt_event, rtol=rtol, atol=atol)\n            if len(sol_final.t_events[0]) == 0:\n                 # This can happen if the point is a maximum itself. tau = 0 or tau = T.\n                 # Let's check dx/dt at start. If close to 0, tau=0 or tau=T.\n                 dxdt0 = brusselator_ode(0, z_settled, A, B)[0]\n                 if abs(dxdt0) < 1e-6:\n                     # To distinguish tau=0 from tau=T, we look at the second derivative sign\n                     # d2x/dt2 = (- (B+1) + 2xy) * dx/dt + x^2 * dy/dt\n                     # At dx/dt=0, d2x/dt2 = x^2 * dy/dt\n                     x, y = z_settled\n                     dydt = B*x - x**2*y\n                     d2xdt2_val = x**2 * dydt\n                     if d2xdt2_val < 0: # It's a maximum\n                         tau = 0.0\n                     else: # It's a minimum, next max is ~T/2 away, let's just re-integrate\n                         raise RuntimeError(\"Event detection failed for phase calculation.\")\n                 else:\n                     raise RuntimeError(\"Event detection failed for phase calculation.\")\n            else:\n                tau = sol_final.t_events[0][0]\n        else:\n            tau = sol_final.t_events[0][0]\n\n        # 3. Calculate phase as per formula\n        phi = (1.0 - tau / T) % 1.0\n        phase_cache[(x0, y0)] = phi\n        return phi\n\n    # --- Helper functions for phase differences ---\n    def signed_phase_diff(phi2, phi1):\n        \"\"\"Shortest signed distance on a circle of circumference 1.\"\"\"\n        d = phi2 - phi1\n        if d > 0.5:\n            d -= 1.0\n        elif d < -0.5:\n            d += 1.0\n        return d\n\n    def wrapped_phase_diff(phi2, phi1):\n        \"\"\"Shortest absolute distance on a circle of circumference 1.\"\"\"\n        d = abs(phi2 - phi1)\n        return min(d, 1.0 - d)\n\n    # --- Test Cases ---\n    test_cases = [\n        (1, 3, 1.1, 3.0, 0.01),\n        (1, 3, 1.4, 2.8, 0.01),\n        (1, 3, 0.9, 3.2, 0.02),\n    ]\n\n    results = []\n    for case in test_cases:\n        A_case, B_case, x0, y0, h = case\n        \n        # Step 3: Compute phase gradient using central differences\n        phi_xp = get_phi(x0 + h, y0, A_case, B_case, T)\n        phi_xn = get_phi(x0 - h, y0, A_case, B_case, T)\n        grad_x = signed_phase_diff(phi_xp, phi_xn) / (2 * h)\n\n        phi_yp = get_phi(x0, y0 + h, A_case, B_case, T)\n        phi_yn = get_phi(x0, y0 - h, A_case, B_case, T)\n        grad_y = signed_phase_diff(phi_yp, phi_yn) / (2 * h)\n        \n        grad = np.array([grad_x, grad_y])\n        grad_norm = np.linalg.norm(grad)\n        \n        if grad_norm == 0:\n            # This indicates the point is a critical point of the phase function,\n            # like the phase singularity at the fixed point. Ratio is ill-defined.\n            r = np.nan\n            results.append(f\"{r:.6f}\")\n            continue\n\n        # Define normal and tangent unit vectors\n        n = grad / grad_norm\n        t = np.array([-n[1], n[0]])\n        \n        # Step 4: Calculate sensitivity ratio r\n        p_base = np.array([x0, y0])\n        p_n = p_base + h * n\n        p_t = p_base + h * t\n        \n        phi_0 = get_phi(x0, y0, A_case, B_case, T)\n        phi_n_pert = get_phi(p_n[0], p_n[1], A_case, B_case, T)\n        phi_t_pert = get_phi(p_t[0], p_t[1], A_case, B_case, T)\n\n        delta_phi_n = wrapped_phase_diff(phi_n_pert, phi_0)\n        delta_phi_t = wrapped_phase_diff(phi_t_pert, phi_0)\n\n        if delta_phi_n == 0:\n            # If denominator is zero, implies perturbation along gradient had no phase effect,\n            # which is counter-intuitive and likely a numerical artifact.\n            # Ratio would be infinite or undefined.\n            r = np.inf\n        else:\n            r = delta_phi_t / delta_phi_n\n        \n        results.append(f\"{r:.6f}\")\n\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2657613"}]}