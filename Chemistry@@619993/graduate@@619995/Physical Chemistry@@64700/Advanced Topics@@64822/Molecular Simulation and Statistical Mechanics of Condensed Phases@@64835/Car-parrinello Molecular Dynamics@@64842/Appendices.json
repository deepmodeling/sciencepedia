{"hands_on_practices": [{"introduction": "Car-Parrinello molecular dynamics (CPMD) employs a fictitious mass $\\mu$ and a time step $\\Delta t$ that are most naturally expressed in atomic units within the Lagrangian formalism. However, to connect theory with experiment and computational practice, it is crucial to convert these parameters into conventional units like femtoseconds. This exercise will guide you through the fundamental dimensional analysis required to perform these conversions, an essential skill for setting up simulations and interpreting literature results [@problem_id:2878271].", "problem": "In Car-Parrinello molecular dynamics (CPMD), the electronic degrees of freedom are assigned a fictitious mass parameter $\\mu$ and are propagated with a finite time step $\\Delta t$. Consider a CPMD simulation that uses $\\mu = 400$ in atomic units (a.u.) of mass and $\\Delta t = 5$ in atomic units of time. Starting from base definitions of atomic units, derive conversion formulas to express $\\Delta t$ in femtoseconds and $\\mu$ in unified atomic mass units. Then carry out the conversions numerically.\n\nUse only the following fundamental definitions and constants as the base:\n- The atomic unit of time is $t_{\\mathrm{au}} \\equiv \\hbar / E_{\\mathrm{h}}$.\n- The atomic unit of mass is $m_{\\mathrm{au}} \\equiv m_{e}$.\n- One femtosecond is $1\\,\\mathrm{fs} = 10^{-15}\\,\\mathrm{s}$.\n- One unified atomic mass unit is $1\\,\\mathrm{u} = 1.66053906660 \\times 10^{-27}\\,\\mathrm{kg}$.\n- Reduced Planck constant: $\\hbar = 1.054571817 \\times 10^{-34}\\,\\mathrm{J\\,s}$.\n- Hartree energy: $E_{\\mathrm{h}} = 4.3597447222071 \\times 10^{-18}\\,\\mathrm{J}$.\n- Electron mass: $m_{e} = 9.1093837015 \\times 10^{-31}\\,\\mathrm{kg}$.\n\nFor reference to assess reasonableness, many CPMD studies report that for $\\mu$ in the range $300$–$800$ a.u., stable time steps commonly fall in the range $0.08$–$0.20\\,\\mathrm{fs}$, provided adiabatic separation is maintained.\n\nTasks:\n1. Derive expressions to convert an arbitrary time step $\\Delta t_{\\mathrm{au}}$ (in atomic units) to femtoseconds and an arbitrary fictitious mass $\\mu_{\\mathrm{au}}$ (in atomic units) to unified atomic mass units.\n2. Apply your formulas to the given values $\\Delta t_{\\mathrm{au}} = 5$ and $\\mu_{\\mathrm{au}} = 400$.\n3. Briefly justify whether the converted $\\Delta t$ is consistent with the typical literature range stated above for the given $\\mu$.\n4. Report the converted $\\Delta t$ in femtoseconds, rounded to four significant figures. Express the final answer in $\\mathrm{fs}$.\n\nOnly the converted $\\Delta t$ is to be reported as your final numerical answer; all reasoning and unit checks should appear in your derivation.", "solution": "The goal is to convert the fictitious electronic mass parameter $\\mu$ from atomic units to unified atomic mass units and the time step $\\Delta t$ from atomic units to femtoseconds, starting from the base definitions of atomic units.\n\nBy definition, the atomic unit of time is\n$$\nt_{\\mathrm{au}} \\equiv \\frac{\\hbar}{E_{\\mathrm{h}}}.\n$$\nThus, any time step $\\Delta t_{\\mathrm{au}}$ expressed in atomic units corresponds to a physical time\n$$\n\\Delta t = \\Delta t_{\\mathrm{au}} \\, t_{\\mathrm{au}} = \\Delta t_{\\mathrm{au}} \\, \\frac{\\hbar}{E_{\\mathrm{h}}}.\n$$\nTo express $\\Delta t$ in femtoseconds, we use $1\\,\\mathrm{fs} = 10^{-15}\\,\\mathrm{s}$ and write\n$$\n\\Delta t_{\\mathrm{fs}} = \\Delta t_{\\mathrm{au}} \\, \\frac{\\hbar}{E_{\\mathrm{h}}} \\times \\frac{1}{10^{-15}}.\n$$\nInserting the given constants,\n$$\nt_{\\mathrm{au}} = \\frac{\\hbar}{E_{\\mathrm{h}}} = \\frac{1.054571817 \\times 10^{-34}\\,\\mathrm{J\\,s}}{4.3597447222071 \\times 10^{-18}\\,\\mathrm{J}} = 2.4188843265857 \\times 10^{-17}\\,\\mathrm{s}.\n$$\nTherefore,\n$$\nt_{\\mathrm{au}} = 2.4188843265857 \\times 10^{-17}\\,\\mathrm{s} = 0.024188843265857\\,\\mathrm{fs}.\n$$\nFor the given $\\Delta t_{\\mathrm{au}} = 5$,\n$$\n\\Delta t_{\\mathrm{fs}} = 5 \\times 0.024188843265857 = 0.120944216329285\\,\\mathrm{fs}.\n$$\n\nNext, for the fictitious mass parameter, the atomic unit of mass is defined as\n$$\nm_{\\mathrm{au}} \\equiv m_{e}.\n$$\nHence a fictitious mass $\\mu_{\\mathrm{au}}$ in atomic units corresponds to a physical mass\n$$\n\\mu = \\mu_{\\mathrm{au}} \\, m_{e}.\n$$\nTo express $\\mu$ in unified atomic mass units, use $1\\,\\mathrm{u} = 1.66053906660 \\times 10^{-27}\\,\\mathrm{kg}$. Thus,\n$$\n\\mu_{\\mathrm{u}} = \\frac{\\mu}{1\\,\\mathrm{u}} = \\mu_{\\mathrm{au}} \\, \\frac{m_{e}}{1\\,\\mathrm{u}}.\n$$\nWith $\\mu_{\\mathrm{au}} = 400$,\n$$\n\\mu = 400 \\times 9.1093837015 \\times 10^{-31}\\,\\mathrm{kg} = 3.6437534806 \\times 10^{-28}\\,\\mathrm{kg},\n$$\nand\n$$\n\\mu_{\\mathrm{u}} = \\frac{3.6437534806 \\times 10^{-28}\\,\\mathrm{kg}}{1.66053906660 \\times 10^{-27}\\,\\mathrm{kg}} = 0.219432\\,\\mathrm{u}.\n$$\nEquivalently, using the known ratio $m_{e} = 5.48579909065 \\times 10^{-4}\\,\\mathrm{u}$,\n$$\n\\mu_{\\mathrm{u}} = 400 \\times 5.48579909065 \\times 10^{-4}\\,\\mathrm{u} = 0.219431963626\\,\\mathrm{u},\n$$\nconsistent with the direct division above.\n\nConsistency check with literature: For $\\mu$ in the range $300$–$800$ a.u., reported stable time steps are commonly in the range $0.08$–$0.20\\,\\mathrm{fs}$. Our converted value $\\Delta t_{\\mathrm{fs}} \\approx 0.1209\\,\\mathrm{fs}$ lies well within this range, which is consistent with typical CPMD practice and the adiabatic separation requirement.\n\nFinally, rounding $\\Delta t_{\\mathrm{fs}}$ to four significant figures yields\n$$\n\\Delta t_{\\mathrm{fs}} = 0.1209\\,\\mathrm{fs}.\n$$", "answer": "$$\\boxed{0.1209}$$", "id": "2878271"}, {"introduction": "The numerical stability of a CPMD simulation is paramount and is limited by the fastest motion in the extended system: the fictitious dynamics of the electrons. This practice explores this limitation by modeling the highest-frequency electronic mode as a simple harmonic oscillator. By performing a stability analysis on the widely used velocity-Verlet integration algorithm, you will derive the critical relationship between the maximum stable time step, $\\Delta t_{\\max}$, and the fastest electronic frequency, $\\omega_{e}^{\\max}$ [@problem_id:2626844].", "problem": "In Car–Parrinello molecular dynamics (CPMD), the electronic degrees of freedom are assigned a fictitious inertia so that they evolve according to second-order equations of motion. Near the adiabatic ground-state subspace, the fastest electronic normal mode can be modeled as a scalar harmonic oscillator with angular frequency $\\,\\omega_{e}^{\\max}\\,$. Assume the equations of motion for this mode reduce to\n$$\n\\ddot{q}(t) + \\omega^{2} q(t) = 0,\n$$\nwith $\\,\\omega = \\omega_{e}^{\\max}\\,$. The positions are advanced in time with the standard velocity–Verlet (equivalently, central-difference) scheme using a constant time step $\\,\\Delta t\\,$.\n\nStarting from this harmonic oscillator model and a linear stability analysis of the discrete update implied by velocity–Verlet, determine the largest time step $\\,\\Delta t_{\\max}\\,$ that keeps the discrete trajectory bounded for the fastest electronic mode. Then, for a system whose estimated fastest electronic angular frequency is $\\,\\omega_{e}^{\\max} = 25\\,\\mathrm{rad\\,fs^{-1}}\\,$, evaluate the corresponding numerical value of $\\,\\Delta t_{\\max}\\,$.\n\nExpress your final numerical answer in femtoseconds and round your answer to three significant figures.", "solution": "The problem requires a linear stability analysis of the velocity-Verlet integration algorithm applied to a simple harmonic oscillator. This model represents the fastest electronic mode in a Car-Parrinello simulation. The governing equation for this mode is given as:\n$$\n\\ddot{q}(t) + \\omega^{2} q(t) = 0\n$$\nwhere $\\omega = \\omega_{e}^{\\max}$ is the angular frequency of the oscillator.\n\nThe velocity-Verlet algorithm, for the position coordinate, is mathematically equivalent to the second-order central-difference scheme. This provides the most direct method for the stability analysis. We discretize the time domain with a constant time step $\\Delta t$, denoting the position at time $t_n = n \\Delta t$ as $q_n = q(t_n)$. The second derivative $\\ddot{q}(t)$ at time $t_n$ is approximated by the central-difference formula:\n$$\n\\ddot{q}(t_n) \\approx \\frac{q(t_{n+1}) - 2q(t_n) + q(t_{n-1})}{(\\Delta t)^{2}} = \\frac{q_{n+1} - 2q_n + q_{n-1}}{(\\Delta t)^{2}}\n$$\nSubstituting this approximation into the continuous equation of motion, where $\\ddot{q}(t_n) = -\\omega^{2}q(t_n)$, we obtain the discrete recurrence relation:\n$$\n\\frac{q_{n+1} - 2q_n + q_{n-1}}{(\\Delta t)^{2}} = -\\omega^{2} q_n\n$$\nRearranging this equation gives a rule for propagating the position in time:\n$$\nq_{n+1} = 2q_n - q_{n-1} - (\\omega \\Delta t)^{2} q_n\n$$\n$$\nq_{n+1} = (2 - (\\omega \\Delta t)^{2}) q_n - q_{n-1}\n$$\nTo analyze the stability of the trajectory generated by this second-order recurrence relation, we recast it into a first-order matrix form. We define a state vector at step $n$ as $\\mathbf{x}_n = \\begin{pmatrix} q_n \\\\ q_{n-1} \\end{pmatrix}$. The state at the next step, $\\mathbf{x}_{n+1} = \\begin{pmatrix} q_{n+1} \\\\ q_n \\end{pmatrix}$, is then related to $\\mathbf{x}_n$ by a linear transformation defined by the transfer matrix $\\mathbf{T}$:\n$$\n\\mathbf{x}_{n+1} = \\begin{pmatrix} 2 - (\\omega \\Delta t)^{2} & -1 \\\\ 1 & 0 \\end{pmatrix} \\mathbf{x}_n = \\mathbf{T} \\mathbf{x}_n\n$$\nThe trajectory $\\{q_n\\}$ remains bounded for all initial conditions if and only if the magnitudes of the eigenvalues, $\\lambda$, of the transfer matrix $\\mathbf{T}$ do not exceed unity, i.e., $|\\lambda| \\le 1$. If any eigenvalue has a magnitude greater than $1$, the solution will grow exponentially, leading to an unstable, unbounded trajectory.\n\nThe eigenvalues of $\\mathbf{T}$ are found by solving the characteristic equation $\\det(\\mathbf{T} - \\lambda \\mathbf{I}) = 0$:\n$$\n\\det \\begin{pmatrix} 2 - (\\omega \\Delta t)^{2} - \\lambda & -1 \\\\ 1 & -\\lambda \\end{pmatrix} = 0\n$$\n$$\n(-\\lambda)(2 - (\\omega \\Delta t)^{2} - \\lambda) - (-1)(1) = 0\n$$\n$$\n\\lambda^{2} - (2 - (\\omega \\Delta t)^{2}) \\lambda + 1 = 0\n$$\nThe product of the roots of this quadratic equation is $1$. For the magnitude of both roots to be less than or equal to $1$, they must be complex conjugates lying on the unit circle in the complex plane (or both be $1$ or $-1$). This condition is met if and only if the discriminant of the quadratic equation is non-positive.\n$$\n\\text{Discriminant} = (2 - (\\omega \\Delta t)^{2})^{2} - 4 \\cdot 1 \\cdot 1 \\le 0\n$$\n$$\n(2 - (\\omega \\Delta t)^{2})^{2} \\le 4\n$$\nTaking the square root of both sides, we have:\n$$\n|2 - (\\omega \\Delta t)^{2}| \\le 2\n$$\nThis absolute value inequality is equivalent to the compound inequality:\n$$\n-2 \\le 2 - (\\omega \\Delta t)^{2} \\le 2\n$$\nWe analyze the two parts of this inequality separately.\n1. The right side: $2 - (\\omega \\Delta t)^{2} \\le 2 \\implies -(\\omega \\Delta t)^{2} \\le 0 \\implies (\\omega \\Delta t)^{2} \\ge 0$. This is always true for real $\\omega$ and $\\Delta t$.\n2. The left side: $-2 \\le 2 - (\\omega \\Delta t)^{2} \\implies (\\omega \\Delta t)^{2} \\le 4$.\n\nThis final condition, $(\\omega \\Delta t)^{2} \\le 4$, determines the stability of the algorithm. Since both $\\omega$ and $\\Delta t$ are positive, we can take the positive square root:\n$$\n\\omega \\Delta t \\le 2\n$$\nThis inequality must hold for the fastest mode in the system, which has angular frequency $\\omega = \\omega_{e}^{\\max}$, to ensure the overall stability of the electronic subsystem's numerical integration. Therefore, the time step $\\Delta t$ must satisfy:\n$$\n\\Delta t \\le \\frac{2}{\\omega_{e}^{\\max}}\n$$\nThe largest time step, $\\Delta t_{\\max}$, that guarantees a bounded trajectory is thus at the limit of this stability region:\n$$\n\\Delta t_{\\max} = \\frac{2}{\\omega_{e}^{\\max}}\n$$\nThe problem provides the numerical value $\\omega_{e}^{\\max} = 25\\,\\mathrm{rad\\,fs^{-1}}$. We can now evaluate $\\Delta t_{\\max}$:\n$$\n\\Delta t_{\\max} = \\frac{2}{25} \\, \\mathrm{fs} = 0.08 \\, \\mathrm{fs}\n$$\nThe problem requires the answer to be expressed in femtoseconds and rounded to three significant figures.\n$$\n\\Delta t_{\\max} = 0.0800 \\, \\mathrm{fs}\n$$\nThis result is the well-known stability limit for the velocity-Verlet algorithm when applied to an undamped harmonic oscillator.", "answer": "$$\n\\boxed{0.0800}\n$$", "id": "2626844"}, {"introduction": "The success of CPMD hinges on maintaining adiabatic separation, meaning the fictitious electronic subsystem stays close to its ground state without significant energy transfer to the ions. This delicate balance is controlled by the fictitious mass parameter, $\\mu$. This hands-on coding exercise challenges you to build a simple one-dimensional CPMD model and observe the consequences of choosing $\\mu$ poorly, which violates the adiabatic condition [@problem_id:2451945]. By simulating the dynamics with an excessively large $\\mu$, you will witness the breakdown of adiabaticity through unphysical heating of the ionic system, reinforcing a core concept in CPMD practice.", "problem": "Consider a one-dimensional toy model of Car-Parrinello molecular dynamics (CPMD) with a single ionic coordinate $R(t)$ of mass $M$ and a single electronic fictitious coordinate $c(t)$ with fictitious mass $\\mu$. The system is described by the Lagrangian\n$$\nL = \\frac{M}{2}\\,\\dot{R}^2 + \\frac{\\mu}{2}\\,\\dot{c}^2 - \\left[\\frac{k}{2}\\,(R - R_0)^2 + \\frac{k_e}{2}\\,(c - R)^2\\right].\n$$\nAssume atomic units (Hartree atomic units) throughout: positions in bohr, masses in electron masses, time in atomic time units, and energy in hartree. The parameter values are fixed to $M = 10$, $k = 1$, $k_e = 50$, and $R_0 = 0$. The initial conditions are $R(0) = 1$, $\\dot{R}(0) = 0$, $c(0) = 0$, and $\\dot{c}(0) = 0$.\n\nLet the ionic Born–Oppenheimer energy be defined by\n$$\nE_{\\mathrm{BO}}(t) = \\frac{M}{2}\\,\\dot{R}(t)^2 + \\frac{k}{2}\\,\\big(R(t) - R_0\\big)^2,\n$$\nand the electron–ion mismatch be $m(t) = c(t) - R(t)$.\n\nYour task is to implement a program that, for each specified parameter set $(\\mu, \\Delta t, T)$, simulates the dynamics governed by the Euler–Lagrange equations of the above Lagrangian over the time interval $[0, T]$ using a uniform time step $\\Delta t$, and computes the following three diagnostics:\n- The ionic Born–Oppenheimer energy drift $\\Delta E_{\\mathrm{BO}} = E_{\\mathrm{BO}}(T) - E_{\\mathrm{BO}}(0)$, reported in hartree.\n- The maximum absolute ionic displacement $D_{\\max} = \\max_{t \\in [0,T]} |R(t) - R_0|$, reported in bohr.\n- The mean-squared mismatch $M_2 = \\frac{1}{N}\\sum_{i=0}^{N-1} m(t_i)^2$, where $t_i$ are the uniformly spaced simulation times, reported in bohr$^2$.\n\nThe test suite consists of the following four cases, each given as $(\\mu, \\Delta t, T)$:\n- Case A: $(0.1, 0.01, 50.0)$\n- Case B: $(10.0, 0.01, 50.0)$\n- Case C: $(50.0, 0.01, 50.0)$\n- Case D: $(125.0, 0.01, 50.0)$\n\nAll quantities must be in atomic units. Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, where each test case contributes a sublist of three floating-point numbers in the order $[\\Delta E_{\\mathrm{BO}}, D_{\\max}, M_2]$. For example, the output format must be\n$$\n\\big[\\,[\\Delta E_{\\mathrm{BO}}^{(A)}, D_{\\max}^{(A)}, M_2^{(A)}], [\\Delta E_{\\mathrm{BO}}^{(B)}, D_{\\max}^{(B)}, M_2^{(B)}], [\\Delta E_{\\mathrm{BO}}^{(C)}, D_{\\max}^{(C)}, M_2^{(C)}], [\\Delta E_{\\mathrm{BO}}^{(D)}, D_{\\max}^{(D)}, M_2^{(D)}]\\,\\big].\n$$\nNo additional text should be printed. The numbers must be reported as standard decimal floats in atomic units.", "solution": "The core of the problem is to solve the equations of motion derived from the provided Lagrangian using numerical integration. The Lagrangian for the one-dimensional system with ionic coordinate $R(t)$ and fictitious electronic coordinate $c(t)$ is:\n$$\nL = \\frac{M}{2}\\,\\dot{R}^2 + \\frac{\\mu}{2}\\,\\dot{c}^2 - V(R, c)\n$$\nwhere the potential energy $V(R, c)$ is given by:\n$$\nV(R, c) = \\frac{k}{2}\\,(R - R_0)^2 + \\frac{k_e}{2}\\,(c - R)^2\n$$\nThe dynamics are governed by the Euler-Lagrange equations, $\\frac{d}{dt}\\left(\\frac{\\partial L}{\\partial \\dot{q}}\\right) - \\frac{\\partial L}{\\partial q} = 0$, for each coordinate $q \\in \\{R, c\\}$.\n\nFor the ionic coordinate $R(t)$:\nThe partial derivatives are:\n$$\n\\frac{\\partial L}{\\partial \\dot{R}} = M\\dot{R}\n$$\n$$\n\\frac{\\partial L}{\\partial R} = -\\frac{\\partial V}{\\partial R} = -\\left[ k(R - R_0) - k_e(c - R) \\right] = -k(R - R_0) + k_e(c - R)\n$$\nThis yields the first equation of motion:\n$$\nM\\ddot{R} = -k(R - R_0) + k_e(c - R)\n$$\n\nFor the electronic coordinate $c(t)$:\nThe partial derivatives are:\n$$\n\\frac{\\partial L}{\\partial \\dot{c}} = \\mu\\dot{c}\n$$\n$$\n\\frac{\\partial L}{\\partial c} = -\\frac{\\partial V}{\\partial c} = -\\left[ k_e(c - R) \\right] = -k_e(c - R)\n$$\nThis yields the second equation of motion:\n$$\n\\mu\\ddot{c} = -k_e(c - R)\n$$\n\nThese two coupled second-order ordinary differential equations can be solved numerically. We define the forces on each coordinate as $F_R = M\\ddot{R}$ and $F_c = \\mu\\ddot{c}$. The accelerations are then $a_R(t) = F_R/M$ and $a_c(t) = F_c/\\mu$:\n$$\na_R(t) = \\frac{1}{M}\\left[-k(R(t) - R_0) + k_e(c(t) - R(t))\\right]\n$$\n$$\na_c(t) = \\frac{1}{\\mu}\\left[-k_e(c(t) - R(t))\\right]\n$$\n\nTo integrate these equations of motion from the initial state $(R(0), \\dot{R}(0), c(0), \\dot{c}(0))$ over the time interval $[0, T]$ with a time step $\\Delta t$, we will employ the Velocity Verlet algorithm. This common symplectic integrator is well-suited for molecular dynamics due to its good energy conservation properties. For a generic coordinate $x(t)$, its velocity $v(t)$, and acceleration $a(t)$, one step of the algorithm is:\n1.  Update velocity to a half step: $v(t + \\Delta t/2) = v(t) + a(t) \\frac{\\Delta t}{2}$.\n2.  Update position to a full step: $x(t + \\Delta t) = x(t) + v(t + \\Delta t/2) \\Delta t$.\n3.  Compute the new acceleration $a(t + \\Delta t)$ using the new position $x(t + \\Delta t)$.\n4.  Update velocity to a full step: $v(t + \\Delta t) = v(t + \\Delta t/2) + a(t + \\Delta t) \\frac{\\Delta t}{2}$.\n\nThis algorithm is applied simultaneously to both coordinates $R$ and $c$ at each time step. The simulation starts by computing the initial accelerations $a_R(0)$ and $a_c(0)$ from the initial positions $R(0)$ and $c(0)$. The loop then proceeds for $N_{steps} = \\text{int}(T/\\Delta t)$ steps.\n\nDuring the simulation, we compute the three required diagnostics:\n1.  **Ionic Born–Oppenheimer energy drift, $\\Delta E_{\\mathrm{BO}}$**:\n    This is defined as $\\Delta E_{\\mathrm{BO}} = E_{\\mathrm{BO}}(T) - E_{\\mathrm{BO}}(0)$. The initial energy $E_{\\mathrm{BO}}(0)$ is calculated using the initial conditions:\n    $$\n    E_{\\mathrm{BO}}(0) = \\frac{M}{2}\\,\\dot{R}(0)^2 + \\frac{k}{2}\\,\\big(R(0) - R_0\\big)^2 = \\frac{10}{2}\\,(0)^2 + \\frac{1}{2}\\,(1 - 0)^2 = 0.5 \\text{ hartree}\n    $$\n    The final energy $E_{\\mathrm{BO}}(T) = \\frac{M}{2}\\,\\dot{R}(T)^2 + \\frac{k}{2}\\,\\big(R(T) - R_0\\big)^2$ is computed using the position $R(T)$ and velocity $\\dot{R}(T)$ at the end of the simulation.\n\n2.  **Maximum absolute ionic displacement, $D_{\\max}$**:\n    This is $D_{\\max} = \\max_{t \\in [0,T]} |R(t) - R_0|$. With $R_0 = 0$, this is $\\max_{t \\in [0,T]} |R(t)|$. We initialize a variable $D_{\\max} = |R(0)|$ and update it at each time step $t_i$ with $\\max(D_{\\max}, |R(t_i)|)$.\n\n3.  **Mean-squared mismatch, $M_2$**:\n    This is defined as $M_2 = \\frac{1}{N}\\sum_{i=0}^{N-1} m(t_i)^2$. We interpret this as the time average of the squared mismatch $m(t)^2 = (c(t) - R(t))^2$ over all discrete time points of the simulation trajectory, from $t_0=0$ to $t_{N_{steps}}=T$. The total number of points is $N_{points} = N_{steps} + 1$. The formula is thus:\n    $$\n    M_2 = \\frac{1}{N_{steps}+1}\\sum_{i=0}^{N_{steps}} \\left(c(t_i) - R(t_i)\\right)^2\n    $$\n    A running sum of $(c(t_i) - R(t_i))^2$ is maintained throughout the simulation and is divided by the total number of points at the end.\n\nThe fixed parameters are $M = 10$, $k = 1$, $k_e = 50$, and $R_0 = 0$. The initial conditions are $R(0) = 1$, $\\dot{R}(0) = 0$, $c(0) = 0$, and $\\dot{c}(0) = 0$. The simulation is run for each test case $(\\mu, \\Delta t, T)$ to obtain the corresponding diagnostics.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef simulate(mu, dt, T):\n    \"\"\"\n    Simulates the 1D Car-Parrinello toy model and computes diagnostics.\n\n    Args:\n        mu (float): The fictitious electronic mass.\n        dt (float): The time step for numerical integration.\n        T (float): The total simulation time.\n\n    Returns:\n        list: A list containing [delta_E_BO, D_max, M_2].\n    \"\"\"\n    # Fixed parameters in atomic units\n    M = 10.0\n    k = 1.0\n    ke = 50.0\n    R0_eq = 0.0\n\n    # Initial conditions in atomic units\n    R = 1.0\n    R_dot = 0.0\n    c = 0.0\n    c_dot = 0.0\n\n    # To ensure the number of steps is correct even with floating point inaccuracies\n    num_steps = int(round(T / dt))\n\n    # Calculate initial Born-Oppenheimer energy\n    E_BO_initial = 0.5 * M * R_dot**2 + 0.5 * k * (R - R0_eq)**2\n\n    # Initialize diagnostics\n    # D_max: Maximum absolute ionic displacement\n    max_displacement = abs(R - R0_eq)\n    # M_2: Mean-squared mismatch\n    sum_sq_mismatch = (c - R)**2\n    num_points = 1\n\n    # Initial accelerations\n    a_R = (-k * (R - R0_eq) + ke * (c - R)) / M\n    a_c = (-ke * (c - R)) / mu\n\n    # Main simulation loop using Velocity Verlet algorithm\n    for _ in range(num_steps):\n        # 1. Update velocities to half-step\n        R_dot_half = R_dot + 0.5 * a_R * dt\n        c_dot_half = c_dot + 0.5 * a_c * dt\n\n        # 2. Update positions to full-step\n        R = R + R_dot_half * dt\n        c = c + c_dot_half * dt\n\n        # 3. Compute new accelerations at the new positions\n        a_R = (-k * (R - R0_eq) + ke * (c - R)) / M\n        a_c = (-ke * (c - R)) / mu\n\n        # 4. Update velocities to full-step\n        R_dot = R_dot_half + 0.5 * a_R * dt\n        c_dot = c_dot_half + 0.5 * a_c * dt\n\n        # Update diagnostics at each step\n        max_displacement = max(max_displacement, abs(R - R0_eq))\n        sum_sq_mismatch += (c - R)**2\n        num_points += 1\n\n    # Calculate final Born-Oppenheimer energy\n    E_BO_final = 0.5 * M * R_dot**2 + 0.5 * k * (R - R0_eq)**2\n\n    # Finalize diagnostic calculations\n    delta_E_BO = E_BO_final - E_BO_initial\n    mean_sq_mismatch = sum_sq_mismatch / num_points\n\n    return [delta_E_BO, max_displacement, mean_sq_mismatch]\n\ndef solve():\n    # Define the test cases from the problem statement.\n    # Each case is a tuple: (mu, delta_t, T)\n    test_cases = [\n        (0.1, 0.01, 50.0),   # Case A\n        (10.0, 0.01, 50.0),  # Case B\n        (50.0, 0.01, 50.0),  # Case C\n        (125.0, 0.01, 50.0), # Case D\n    ]\n\n    results = []\n    for case in test_cases:\n        mu, delta_t, T_final = case\n        result = simulate(mu, delta_t, T_final)\n        results.append(result)\n\n    # Final print statement in the exact required format.\n    # The default str() representation of a list of lists matches the format\n    # `[[val1, val2, ...], [val1, val2, ...]]`\n    # including spaces after commas inside the sublists.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2451945"}]}