{"hands_on_practices": [{"introduction": "A crucial aspect of developing any machine learning model is understanding how its accuracy scales with the amount of training data. In scientific applications, where generating high-fidelity reference data from methods like Density Functional Theory (DFT) is computationally expensive, this analysis is paramount. This exercise [@problem_id:2648563] guides you through fitting an empirical learning curve model, allowing you to extrapolate the model's performance and predict the dataset size required to reach a desired accuracy threshold.", "problem": "A research group is training a Machine Learning Potential (MLP) to reproduce reference electronic structure energies for a crystalline solid. The model error is quantified as the expected Mean Absolute Error (MAE) per atom, denoted by $\\mathbb{E}[\\epsilon(N)]$, where $N$ is the number of unique, independently sampled training configurations. It is empirically well-supported in this setting that, over ranges of $N$ where model capacity is not the limiting factor and the data distribution is stationary, learning curves follow a bias-plus-variance power-law form,\n$$\n\\mathbb{E}[\\epsilon(N)] \\;=\\; a\\,N^{-b} \\;+\\; c,\n$$\nwhere $a > 0$ and $b > 0$ capture the variance-dominated decay of the reducible error, and $c \\ge 0$ is the irreducible error floor due to systematic mismatch, descriptor incompleteness, or label noise. Here $\\epsilon(N)$ is measured in milli-electron-volts per atom (meV atom$^{-1}$).\n\nYou are given the following empirically averaged validation MAE values (treat these as exact for the purpose of this exercise), obtained by training on $N_1=1000$, $N_2=4000$, and $N_3=16000$ configurations:\n- $\\mathbb{E}[\\epsilon(N_1)] = 20$ meV atom$^{-1}$,\n- $\\mathbb{E}[\\epsilon(N_2)] = 16$ meV atom$^{-1}$,\n- $\\mathbb{E}[\\epsilon(N_3)] = 14$ meV atom$^{-1}$.\n\nAssuming the learning-curve model above holds exactly across these $N$, and without using regression software, do the following:\n1. From first principles, use only algebraic manipulations and logarithms to determine the exponents and offsets $b$ and $c$ implied by the data.\n2. Using your inferred parameters and the same learning-curve model, determine the minimum dataset size $N^\\star$ required so that the expected MAE satisfies $\\mathbb{E}[\\epsilon(N^\\star)] \\le 12.5$ meV atom$^{-1}$.\n\nReport as your final answer only the single number $N^\\star$ (unitless). If you need to round, report the smallest integer $N$ that meets the criterion; otherwise, report the exact integer.", "solution": "We begin from the stated learning-curve model,\n$$\n\\mathbb{E}[\\epsilon(N)] \\;=\\; a\\,N^{-b} \\;+\\; c,\n$$\nwith $a > 0$, $b > 0$, and $c \\ge 0$, and interpret $\\epsilon(N)$ as a sample-mean MAE per atom over validation configurations. The constant $c$ represents the irreducible error floor, while $a\\,N^{-b}$ represents the reducible component that decays as a power law with training set size $N$ due to variance reduction.\n\nLet the three given data points be\n$$\n(N_1,\\epsilon_1) = (1000, 20), \\quad (N_2,\\epsilon_2) = (4000, 16), \\quad (N_3,\\epsilon_3) = (16000, 14),\n$$\nwhere all $\\epsilon_i$ are in meV atom$^{-1}$. Under the model, these satisfy\n$$\n\\epsilon_i \\;=\\; a\\,N_i^{-b} \\;+\\; c \\quad \\text{for } i\\in\\{1,2,3\\}.\n$$\nSubtracting $c$ and taking ratios eliminates $a$:\n$$\n\\frac{\\epsilon_1 - c}{\\epsilon_2 - c} \\;=\\; \\frac{a N_1^{-b}}{a N_2^{-b}} \\;=\\; \\left(\\frac{N_1}{N_2}\\right)^{-b} \\;=\\; \\left(\\frac{N_2}{N_1}\\right)^{b},\n$$\nand similarly\n$$\n\\frac{\\epsilon_2 - c}{\\epsilon_3 - c} \\;=\\; \\left(\\frac{N_3}{N_2}\\right)^{b}.\n$$\nTaking natural logarithms gives two expressions for $b$,\n$$\nb \\;=\\; \\frac{\\ln\\!\\big((\\epsilon_1 - c)/(\\epsilon_2 - c)\\big)}{\\ln(N_2/N_1)} \\;=\\; \\frac{\\ln\\!\\big((\\epsilon_2 - c)/(\\epsilon_3 - c)\\big)}{\\ln(N_3/N_2)}.\n$$\nEquating these two expressions provides an equation for $c$:\n$$\n\\frac{\\ln\\!\\big((\\epsilon_1 - c)/(\\epsilon_2 - c)\\big)}{\\ln(N_2/N_1)} \\;=\\; \\frac{\\ln\\!\\big((\\epsilon_2 - c)/(\\epsilon_3 - c)\\big)}{\\ln(N_3/N_2)}.\n$$\nIn our data, $N_2/N_1 = 4000/1000 = 4$ and $N_3/N_2 = 16000/4000 = 4$, so the denominators are equal; hence the logarithms in the numerators must be equal:\n$$\n\\ln\\!\\left(\\frac{\\epsilon_1 - c}{\\epsilon_2 - c}\\right) \\;=\\; \\ln\\!\\left(\\frac{\\epsilon_2 - c}{\\epsilon_3 - c}\\right).\n$$\nExponentiating both sides yields\n$$\n\\frac{\\epsilon_1 - c}{\\epsilon_2 - c} \\;=\\; \\frac{\\epsilon_2 - c}{\\epsilon_3 - c}.\n$$\nCross-multiplying and substituting the numerical values $\\epsilon_1=20$, $\\epsilon_2=16$, $\\epsilon_3=14$ gives\n$$\n(\\epsilon_1 - c)(\\epsilon_3 - c) \\;=\\; (\\epsilon_2 - c)^2 \\;\\;\\Longrightarrow\\;\\; (20 - c)(14 - c) \\;=\\; (16 - c)^2.\n$$\nExpanding both sides,\n$$\n(280 - 34c + c^2) \\;=\\; (256 - 32c + c^2) \\;\\;\\Longrightarrow\\;\\; 280 - 34c \\;=\\; 256 - 32c,\n$$\nwhich simplifies to\n$$\n24 \\;=\\; 2c \\;\\;\\Longrightarrow\\;\\; c \\;=\\; 12.\n$$\nWith $c$ determined, we can compute $b$ from either pair. Using $(N_1,N_2)$,\n$$\nb \\;=\\; \\frac{\\ln\\!\\big((\\epsilon_1 - c)/(\\epsilon_2 - c)\\big)}{\\ln(N_2/N_1)} \\;=\\; \\frac{\\ln\\!\\big((20 - 12)/(16 - 12)\\big)}{\\ln(4)} \\;=\\; \\frac{\\ln(8/4)}{\\ln(4)} \\;=\\; \\frac{\\ln(2)}{\\ln(4)} \\;=\\; \\frac{1}{2}.\n$$\nNext, solve for $a$ using any of the three points; for instance, with $(N_1,\\epsilon_1)$,\n$$\na \\;=\\; (\\epsilon_1 - c)\\,N_1^{\\,b} \\;=\\; (20 - 12)\\, (1000)^{1/2} \\;=\\; 8\\,\\sqrt{1000}.\n$$\nHaving identified $a$, $b$, and $c$, we now determine the minimum dataset size $N^\\star$ such that\n$$\n\\mathbb{E}[\\epsilon(N^\\star)] \\;\\le\\; 12.5 \\quad \\text{meV atom}^{-1}.\n$$\nUnder the model this is\n$$\na\\,(N^\\star)^{-b} + c \\;\\le\\; 12.5 \\;\\;\\Longleftrightarrow\\;\\; a\\,(N^\\star)^{-b} \\;\\le\\; 12.5 - c.\n$$\nSubstitute $c=12$ to get\n$$\na\\,(N^\\star)^{-b} \\;\\le\\; 0.5.\n$$\nBecause $a > 0$ and $b > 0$, this is equivalent to\n$$\n(N^\\star)^{b} \\;\\ge\\; \\frac{a}{0.5} \\;\\;\\Longleftrightarrow\\;\\; N^\\star \\;\\ge\\; \\left(\\frac{a}{0.5}\\right)^{\\!1/b}.\n$$\nWith $b=\\tfrac{1}{2}$ and $a=8\\sqrt{1000}$, we obtain\n$$\nN^\\star \\;\\ge\\; \\left(\\frac{8\\sqrt{1000}}{0.5}\\right)^{\\!2} \\;=\\; \\left(16\\sqrt{1000}\\right)^{\\!2} \\;=\\; 256 \\times 1000 \\;=\\; 256000.\n$$\nTherefore, the smallest integer dataset size meeting the target is\n$$\nN^\\star \\;=\\; 256000.\n$$\nThis value is exact, so no rounding is required.", "answer": "$$\\boxed{256000}$$", "id": "2648563"}, {"introduction": "A powerful feature of modern machine learning potentials is their ability to incorporate fundamental physical principles directly into their architecture. For molecular systems, the potential energy must be invariant to rotation, which in turn imposes a strict requirement on the derived forces: they must rotate along with the system, a property called equivariance. In this practice [@problem_id:2648608], you will explicitly verify this principle by applying a rotation to a simple triatomic system and confirming that the forces transform as expected.", "problem": "Consider a triatomic system with atomic positions $\\mathbf{r}_1$, $\\mathbf{r}_2$, and $\\mathbf{r}_3$ in a fixed laboratory frame. A rotation in three dimensions is represented by an element of the special orthogonal group $\\mathrm{SO}(3)$, and a rigid rotation acts on positions by $\\mathbf{r}_i \\mapsto \\mathbf{R}\\,\\mathbf{r}_i$ with $\\mathbf{R}^{\\top}\\mathbf{R} = \\mathbf{I}$ and $\\det \\mathbf{R} = 1$. In machine learning interatomic potentials that respect the symmetry of the Special Euclidean group $\\mathrm{SE}(3)$, scalar features are rotationally invariant while vector and higher-order tensor features transform equivariantly under $\\mathbf{R}$. Forces are obtained from the negative gradient of the scalar energy with respect to atomic positions and therefore must transform as vectors under rotations if the energy is rotationally invariant.\n\nLet the atomic positions (in consistent but arbitrary units) be\n$\\mathbf{r}_1 = (0,\\,0,\\,0)$, $\\mathbf{r}_2 = (1,\\,0,\\,0)$, and $\\mathbf{r}_3 = (0,\\,1,\\,0)$. Consider the rotation matrix\n$$\n\\mathbf{R} \\;=\\;\n\\begin{pmatrix}\n0 & -1 & 0 \\\\\n1 & \\;\\,0 & 0 \\\\\n0 & \\;\\,0 & 1\n\\end{pmatrix},\n$$\nwhich rotates vectors by $90$ degrees about the $z$-axis. Define the following pairwise features for each unordered pair $(i,j)$:\n- A scalar invariant feature $g^{(0)}_{ij} = \\|\\mathbf{r}_i - \\mathbf{r}_j\\|$.\n- A vector equivariant feature $\\mathbf{g}^{(1)}_{ij} = \\mathbf{r}_i - \\mathbf{r}_j$.\n\nAssume an energy model that depends only on scalar invariants built from these features, namely a sum of identical harmonic pair terms,\n$$\nE(\\mathbf{r}_1,\\mathbf{r}_2,\\mathbf{r}_3) \\;=\\; \\frac{k}{2}\\,\\sum_{1 \\le i < j \\le 3} \\Big(\\|\\mathbf{r}_i - \\mathbf{r}_j\\| - d_0\\Big)^2,\n$$\nwith stiffness $k > 0$ and rest length $d_0 = 1$. The force on atom $i$ is defined by $\\mathbf{F}_i = -\\nabla_{\\mathbf{r}_i} E$.\n\nTasks:\n1. Using only the definitions above and the properties of rotations, determine how $\\mathbf{g}^{(1)}_{ij}$ must transform under $\\mathbf{r}_i \\mapsto \\mathbf{R}\\mathbf{r}_i$ and compute the explicit transformed vector feature $\\mathbf{R}\\,\\mathbf{g}^{(1)}_{23}$ for the given configuration and $\\mathbf{R}$.\n2. Starting from the definition of $E$ and the chain rule, derive $\\mathbf{F}_i$ for a single pair and then compute the total forces $\\mathbf{F}_1$, $\\mathbf{F}_2$, and $\\mathbf{F}_3$ for the given configuration.\n3. Apply the rotation $\\mathbf{R}$ to the computed forces to obtain the rotated forces $\\mathbf{F}'_i = \\mathbf{R}\\,\\mathbf{F}_i$.\n4. Independently verify, by recomputing the forces from the rotated positions $\\mathbf{r}'_i = \\mathbf{R}\\,\\mathbf{r}_i$, that they coincide with $\\mathbf{F}'_i$ obtained in step $3$.\nProvide as your final answer the $9$-component row vector comprising the rotated forces in the order $\\big(F'_{1x}, F'_{1y}, F'_{1z}, F'_{2x}, F'_{2y}, F'_{2z}, F'_{3x}, F'_{3y}, F'_{3z}\\big)$. Do not include units in your final boxed answer. If you choose to simplify radicals, retain exact forms; no rounding is required.", "solution": "The problem statement has been validated and is found to be scientifically grounded, well-posed, objective, and complete. It is a standard exercise in vector calculus and linear algebra applied to the physical principles of molecular modeling. I will proceed with the solution.\n\nThe problem requires a systematic demonstration of the rotational equivariance of forces derived from a rotationally invariant potential energy function. The four tasks will be addressed in sequence.\n\nTask 1: Transformation of $\\mathbf{g}^{(1)}_{ij}$ and computation of $\\mathbf{R}\\,\\mathbf{g}^{(1)}_{23}$.\n\nThe vector feature is defined as $\\mathbf{g}^{(1)}_{ij} = \\mathbf{r}_i - \\mathbf{r}_j$. Under a rotation $\\mathbf{R} \\in \\mathrm{SO}(3)$, the atomic positions transform as $\\mathbf{r}_i \\mapsto \\mathbf{r}'_i = \\mathbf{R}\\mathbf{r}_i$. The transformed feature $\\mathbf{g'}^{(1)}_{ij}$ is thus:\n$$\n\\mathbf{g'}^{(1)}_{ij} = \\mathbf{r}'_i - \\mathbf{r}'_j = \\mathbf{R}\\mathbf{r}_i - \\mathbf{R}\\mathbf{r}_j = \\mathbf{R}(\\mathbf{r}_i - \\mathbf{r}_j) = \\mathbf{R}\\mathbf{g}^{(1)}_{ij}\n$$\nThis demonstrates that $\\mathbf{g}^{(1)}_{ij}$ transforms equivariantly as a vector under rotations.\n\nFor the given configuration, $\\mathbf{r}_2 = (1, 0, 0)^{\\top}$ and $\\mathbf{r}_3 = (0, 1, 0)^{\\top}$. The vector feature $\\mathbf{g}^{(1)}_{23}$ is:\n$$\n\\mathbf{g}^{(1)}_{23} = \\mathbf{r}_2 - \\mathbf{r}_3 = (1, 0, 0)^{\\top} - (0, 1, 0)^{\\top} = (1, -1, 0)^{\\top}\n$$\nThe transformed vector feature is $\\mathbf{R}\\mathbf{g}^{(1)}_{23}$. Using the provided rotation matrix $\\mathbf{R}$:\n$$\n\\mathbf{R}\\mathbf{g}^{(1)}_{23} = \\begin{pmatrix} 0 & -1 & 0 \\\\ 1 & 0 & 0 \\\\ 0 & 0 & 1 \\end{pmatrix} \\begin{pmatrix} 1 \\\\ -1 \\\\ 0 \\end{pmatrix} = \\begin{pmatrix} (0)(1) + (-1)(-1) + (0)(0) \\\\ (1)(1) + (0)(-1) + (0)(0) \\\\ (0)(1) + (0)(-1) + (1)(0) \\end{pmatrix} = \\begin{pmatrix} 1 \\\\ 1 \\\\ 0 \\end{pmatrix}\n$$\n\nTask 2: Derivation and computation of forces $\\mathbf{F}_1, \\mathbf{F}_2, \\mathbf{F}_3$.\n\nThe energy $E$ is given by $E = \\frac{k}{2} \\sum_{1 \\le i < j \\le 3} (\\|\\mathbf{r}_{ij}\\| - d_0)^2$, where $\\mathbf{r}_{ij} = \\mathbf{r}_i - \\mathbf{r}_j$. The force on atom $l$ is $\\mathbf{F}_l = -\\nabla_{\\mathbf{r}_l} E$.\n$$\n\\mathbf{F}_l = -\\nabla_{\\mathbf{r}_l} \\left[ \\frac{k}{2} \\sum_{i<j} (\\|\\mathbf{r}_{ij}\\| - d_0)^2 \\right] = -\\frac{k}{2} \\sum_{i<j} \\nabla_{\\mathbf{r}_l} (\\|\\mathbf{r}_{ij}\\| - d_0)^2\n$$\nThe gradient $\\nabla_{\\mathbf{r}_l}$ is non-zero only for terms involving $\\mathbf{r}_l$, i.e., pairs $(l,j)$ or $(i,l)$. This can be written as a sum over $j \\neq l$.\n$$\n\\mathbf{F}_l = -\\sum_{j \\neq l} \\nabla_{\\mathbf{r}_l} \\left[ \\frac{k}{2} (\\|\\mathbf{r}_{lj}\\| - d_0)^2 \\right]\n$$\nUsing the chain rule, $\\nabla_{\\mathbf{x}} f(\\|\\mathbf{x}\\|) = f'(\\|\\mathbf{x}\\|) \\frac{\\mathbf{x}}{\\|\\mathbf{x}\\|}$, and noting that $\\nabla_{\\mathbf{r}_l} \\|\\mathbf{r}_l - \\mathbf{r}_j\\| = \\frac{\\mathbf{r}_l - \\mathbf{r}_j}{\\|\\mathbf{r}_l - \\mathbf{r}_j\\|} = \\hat{\\mathbf{r}}_{lj}$, we get:\n$$\n\\nabla_{\\mathbf{r}_l} \\left[ \\frac{k}{2} (\\|\\mathbf{r}_{lj}\\| - d_0)^2 \\right] = \\frac{k}{2} \\cdot 2(\\|\\mathbf{r}_{lj}\\| - d_0) \\cdot \\hat{\\mathbf{r}}_{lj} = k (\\|\\mathbf{r}_{lj}\\| - d_0) \\hat{\\mathbf{r}}_{lj}\n$$\nThus, the total force on atom $l$ is:\n$$\n\\mathbf{F}_l = -\\sum_{j \\neq l} k (\\|\\mathbf{r}_{lj}\\| - d_0) \\frac{\\mathbf{r}_{lj}}{\\|\\mathbf{r}_{lj}\\|}\n$$\nThe given positions are $\\mathbf{r}_1 = (0,0,0)^{\\top}$, $\\mathbf{r}_2 = (1,0,0)^{\\top}$, $\\mathbf{r}_3 = (0,1,0)^{\\top}$ and $d_0 = 1$. The interatomic distances are:\n$$\nr_{12} = \\|\\mathbf{r}_1 - \\mathbf{r}_2\\| = \\|(-1, 0, 0)\\| = 1 \\\\\nr_{13} = \\|\\mathbf{r}_1 - \\mathbf{r}_3\\| = \\|(0, -1, 0)\\| = 1 \\\\\nr_{23} = \\|\\mathbf{r}_2 - \\mathbf{r}_3\\| = \\|(1, -1, 0)\\| = \\sqrt{1^2 + (-1)^2} = \\sqrt{2}\n$$\nNow we compute the forces:\nFor atom $1$:\n$$\n\\mathbf{F}_1 = -k(r_{12}-d_0)\\hat{\\mathbf{r}}_{12} -k(r_{13}-d_0)\\hat{\\mathbf{r}}_{13} = -k(1-1)\\hat{\\mathbf{r}}_{12} -k(1-1)\\hat{\\mathbf{r}}_{13} = \\mathbf{0}\n$$\nFor atom $2$:\n$$\n\\mathbf{F}_2 = -k(r_{21}-d_0)\\hat{\\mathbf{r}}_{21} -k(r_{23}-d_0)\\hat{\\mathbf{r}}_{23} = -k(1-1)\\hat{\\mathbf{r}}_{21} -k(\\sqrt{2}-1)\\frac{\\mathbf{r}_{23}}{r_{23}} = -k(\\sqrt{2}-1)\\frac{(1, -1, 0)^{\\top}}{\\sqrt{2}} = -k(1-\\frac{\\sqrt{2}}{2})(1, -1, 0)^{\\top}\n$$\nFor atom $3$:\n$$\n\\mathbf{F}_3 = -k(r_{31}-d_0)\\hat{\\mathbf{r}}_{31} -k(r_{32}-d_0)\\hat{\\mathbf{r}}_{32} = -k(1-1)\\hat{\\mathbf{r}}_{31} -k(\\sqrt{2}-1)\\frac{\\mathbf{r}_{32}}{r_{32}} = -k(\\sqrt{2}-1)\\frac{(-1, 1, 0)^{\\top}}{\\sqrt{2}} = k(1-\\frac{\\sqrt{2}}{2})(1, -1, 0)^{\\top}\n$$\nAs required for an isolated system, the total force $\\mathbf{F}_1 + \\mathbf{F}_2 + \\mathbf{F}_3 = \\mathbf{0}$.\n\nTask 3: Application of rotation $\\mathbf{R}$ to the forces.\n\nWe compute the rotated forces $\\mathbf{F}'_i = \\mathbf{R}\\mathbf{F}_i$. Let $C = k(1-\\frac{\\sqrt{2}}{2})$.\n$$\n\\mathbf{F}'_1 = \\mathbf{R}\\mathbf{F}_1 = \\mathbf{R}\\mathbf{0} = \\mathbf{0}\n$$\n$$\n\\mathbf{F}_2 = C(-1, 1, 0)^{\\top} \\implies \\mathbf{F}'_2 = \\mathbf{R}\\begin{pmatrix} -C \\\\ C \\\\ 0 \\end{pmatrix} = \\begin{pmatrix} 0 & -1 & 0 \\\\ 1 & 0 & 0 \\\\ 0 & 0 & 1 \\end{pmatrix} \\begin{pmatrix} -C \\\\ C \\\\ 0 \\end{pmatrix} = \\begin{pmatrix} -C \\\\ -C \\\\ 0 \\end{pmatrix} = C(-1, -1, 0)^{\\top}\n$$\n$$\n\\mathbf{F}_3 = C(1, -1, 0)^{\\top} \\implies \\mathbf{F}'_3 = \\mathbf{R}\\begin{pmatrix} C \\\\ -C \\\\ 0 \\end{pmatrix} = \\begin{pmatrix} 0 & -1 & 0 \\\\ 1 & 0 & 0 \\\\ 0 & 0 & 1 \\end{pmatrix} \\begin{pmatrix} C \\\\ -C \\\\ 0 \\end{pmatrix} = \\begin{pmatrix} C \\\\ C \\\\ 0 \\end{pmatrix} = C(1, 1, 0)^{\\top}\n$$\nSo, the rotated forces are $\\mathbf{F}'_1 = (0,0,0)^{\\top}$, $\\mathbf{F}'_2 = k(1-\\frac{\\sqrt{2}}{2})(-1, -1, 0)^{\\top}$, and $\\mathbf{F}'_3 = k(1-\\frac{\\sqrt{2}}{2})(1, 1, 0)^{\\top}$.\n\nTask 4: Verification by recomputing forces from rotated positions.\n\nFirst, we compute the rotated positions $\\mathbf{r}'_i = \\mathbf{R}\\mathbf{r}_i$:\n$$\n\\mathbf{r}'_1 = \\mathbf{R}\\mathbf{r}_1 = (0,0,0)^{\\top} \\\\\n\\mathbf{r}'_2 = \\mathbf{R}\\mathbf{r}_2 = \\mathbf{R}(1,0,0)^{\\top} = (0,1,0)^{\\top} \\\\\n\\mathbf{r}'_3 = \\mathbf{R}\\mathbf{r}_3 = \\mathbf{R}(0,1,0)^{\\top} = (-1,0,0)^{\\top}\n$$\nThe new distances $r'_{ij}$ are:\n$$\nr'_{12} = \\|\\mathbf{r}'_1 - \\mathbf{r}'_2\\| = \\|(0, -1, 0)\\| = 1 \\\\\nr'_{13} = \\|\\mathbf{r}'_1 - \\mathbf{r}'_3\\| = \\|(1, 0, 0)\\| = 1 \\\\\nr'_{23} = \\|\\mathbf{r}'_2 - \\mathbf{r}'_3\\| = \\|(1, 1, 0)\\| = \\sqrt{2}\n$$\nThe distances are invariant under rotation, as expected. We now compute the forces $\\mathbf{F}^{\\mathrm{new}}_i$ in this new configuration:\n$$\n\\mathbf{F}^{\\mathrm{new}}_1 = -k(r'_{12}-d_0)\\hat{\\mathbf{r}}'_{12} -k(r'_{13}-d_0)\\hat{\\mathbf{r}}'_{13} = \\mathbf{0}\n$$\nThis matches $\\mathbf{F}'_1$.\n$$\n\\mathbf{F}^{\\mathrm{new}}_2 = -k(r'_{21}-d_0)\\hat{\\mathbf{r}}'_{21} -k(r'_{23}-d_0)\\hat{\\mathbf{r}}'_{23} = -k(\\sqrt{2}-1)\\frac{\\mathbf{r}'_{23}}{r'_{23}} = -k(\\sqrt{2}-1)\\frac{(1, 1, 0)^{\\top}}{\\sqrt{2}} = -k(1-\\frac{\\sqrt{2}}{2})(1, 1, 0)^{\\top}\n$$\nUsing $C=k(1-\\frac{\\sqrt{2}}{2})$, we have $\\mathbf{F}^{\\mathrm{new}}_2 = -C(1,1,0)^{\\top} = C(-1,-1,0)^{\\top}$. This matches $\\mathbf{F}'_2$.\n$$\n\\mathbf{F}^{\\mathrm{new}}_3 = -k(r'_{31}-d_0)\\hat{\\mathbf{r}}'_{31} -k(r'_{32}-d_0)\\hat{\\mathbf{r}}'_{32} = -k(\\sqrt{2}-1)\\frac{\\mathbf{r}'_{32}}{r'_{32}} = -k(\\sqrt{2}-1)\\frac{(-1, -1, 0)^{\\top}}{\\sqrt{2}} = k(1-\\frac{\\sqrt{2}}{2})(1, 1, 0)^{\\top}\n$$\nThis is $C(1,1,0)^{\\top}$, which matches $\\mathbf{F}'_3$.\nThe verification is successful: computing forces from rotated coordinates yields the same result as rotating the forces computed from original coordinates. This confirms the rotational equivariance of the force vectors.\n\nThe final answer is the $9$-component row vector constructed from the components of the rotated forces $\\mathbf{F}'_1, \\mathbf{F}'_2, \\mathbf{F}'_3$.\nThe components are:\n$$\n\\mathbf{F}'_1 = (0, 0, 0) \\\\\n\\mathbf{F}'_2 = k \\left( \\frac{\\sqrt{2}}{2}-1, \\frac{\\sqrt{2}}{2}-1, 0 \\right) \\\\\n\\mathbf{F}'_3 = k \\left( 1-\\frac{\\sqrt{2}}{2}, 1-\\frac{\\sqrt{2}}{2}, 0 \\right)\n$$\nCombining these into a single row vector gives the final result.", "answer": "$$\n\\boxed{\\begin{pmatrix} 0 & 0 & 0 & k\\left(\\frac{\\sqrt{2}}{2}-1\\right) & k\\left(\\frac{\\sqrt{2}}{2}-1\\right) & 0 & k\\left(1-\\frac{\\sqrt{2}}{2}\\right) & k\\left(1-\\frac{\\sqrt{2}}{2}\\right) & 0 \\end{pmatrix}}\n$$", "id": "2648608"}, {"introduction": "The ultimate test of a machine learning potential is its performance in a molecular dynamics simulation. A key indicator of a stable and accurate potential is its ability to conserve total energy in a microcanonical (NVE) ensemble, where numerical drift is a direct measure of integration error. This hands-on exercise [@problem_id:2648626] tasks you with implementing a short NVE simulation to evaluate how energy conservation behaves as a function of the integration time step, $\\Delta t$, a critical procedure for determining stable simulation parameters.", "problem": "You are given a pairwise machine learning (ML) potential energy model intended for classical molecular dynamics in the microcanonical ensemble of constant number of particles, volume, and energy (NVE). Your task is to implement a program that determines a numerically stable integration time step by running short NVE trajectories and measuring the maximum fractional drift of the total energy. The system is defined in reduced (dimensionless) units so that mass, length, and energy are dimensionless and equal to unity scales; therefore, the drift metric is dimensionless and does not require physical units.\n\nFundamental base:\n- Newton's second law: for each particle index $i$, with mass $m_i$, position vector $\\mathbf{r}_i(t)$, velocity $\\mathbf{v}_i(t)$, and force $\\mathbf{F}_i(\\mathbf{r})$, the equations are $m_i \\, \\frac{d^2 \\mathbf{r}_i}{dt^2} = \\mathbf{F}_i(\\mathbf{r})$ and $\\mathbf{F}_i(\\mathbf{r}) = - \\nabla_{\\mathbf{r}_i} U(\\mathbf{r})$, where $U(\\mathbf{r})$ is the potential energy function.\n- Energy conservation in an ideal microcanonical trajectory: the exact total energy $E_{\\mathrm{tot}}(t) = K(t) + U(t)$ with kinetic energy $K(t) = \\sum_i \\frac{1}{2} m_i \\lVert \\mathbf{v}_i(t) \\rVert^2$ remains constant. Any nonzero drift in a numerical integration is a discretization error.\n\nML potential model:\n- Three particles indexed by $i \\in \\{1,2,3\\}$ with positions in three-dimensional space. The total potential energy is a sum over unique pairs,\n$$\nU(\\mathbf{r}) \\;=\\; \\sum_{1 \\le i < j \\le 3} \\; \\sum_{k=1}^{3} \\; w_k \\, \\phi_k(r_{ij}) \\, s(r_{ij}),\n$$\nwhere $r_{ij} = \\lVert \\mathbf{r}_i - \\mathbf{r}_j \\rVert$ and the pair features are Gaussian radial basis functions with a smooth cosine cutoff,\n$$\n\\phi_k(r) \\;=\\; \\exp\\!\\left(-\\beta_k \\, (r - \\mu_k)^2\\right), \\quad s(r) \\;=\\; \\begin{cases}\n\\dfrac{1}{2}\\left[\\cos\\!\\left(\\dfrac{\\pi r}{r_c}\\right) + 1\\right], & r < r_c,\\\\\n0, & r \\ge r_c.\n\\end{cases}\n$$\nThe parameters are:\n- Weights $w_1 = 0.8$, $w_2 = -0.3$, $w_3 = 0.2$.\n- Centers $\\mu_1 = 1.0$, $\\mu_2 = 2.0$, $\\mu_3 = 3.0$.\n- Width parameters $\\beta_1 = 4.0$, $\\beta_2 = 1.0$, $\\beta_3 = 0.5$.\n- Cutoff radius $r_c = 3.5$.\n\nForces:\n- For $r < r_c$, use $s'(r) = -\\dfrac{\\pi}{2 r_c} \\sin\\!\\left(\\dfrac{\\pi r}{r_c}\\right)$, and $s'(r) = 0$ for $r \\ge r_c$.\n- For each pair and basis index $k$, compute $\\dfrac{d \\phi_k}{dr} = -2 \\beta_k (r - \\mu_k)\\, \\phi_k(r)$. The pairwise radial derivative for the energy contribution is\n$$\n\\frac{dU_{ij}}{dr} \\;=\\; \\sum_{k=1}^{3} w_k \\left( \\frac{d\\phi_k}{dr}(r_{ij}) \\, s(r_{ij}) \\;+\\; \\phi_k(r_{ij}) \\, s'(r_{ij}) \\right).\n$$\nThe force on particle $i$ from pair $(i,j)$ is\n$$\n\\mathbf{F}_{i \\leftarrow j} \\;=\\; - \\frac{dU_{ij}}{dr} \\, \\frac{\\mathbf{r}_i - \\mathbf{r}_j}{r_{ij}},\n$$\nand $\\mathbf{F}_j$ receives the opposite force to conserve momentum. The total force on particle $i$ is the sum over all $j \\ne i$.\n\nIntegration scheme:\n- Use the velocity Verlet integrator derived from Newton's second law:\n  - Given current positions $\\mathbf{r}(t)$, velocities $\\mathbf{v}(t)$, and accelerations $\\mathbf{a}(t) = \\mathbf{F}(t)/m$, the update with time step $\\Delta t$ is\n  $$\n  \\mathbf{v}\\!\\left(t + \\frac{\\Delta t}{2}\\right) = \\mathbf{v}(t) + \\frac{\\Delta t}{2} \\, \\mathbf{a}(t),\n  $$\n  $$\n  \\mathbf{r}(t + \\Delta t) = \\mathbf{r}(t) + \\Delta t \\, \\mathbf{v}\\!\\left(t + \\frac{\\Delta t}{2}\\right),\n  $$\n  $$\n  \\mathbf{a}(t + \\Delta t) = \\frac{\\mathbf{F}(\\mathbf{r}(t + \\Delta t))}{m},\n  $$\n  $$\n  \\mathbf{v}(t + \\Delta t) = \\mathbf{v}\\!\\left(t + \\frac{\\Delta t}{2}\\right) + \\frac{\\Delta t}{2} \\, \\mathbf{a}(t + \\Delta t).\n  $$\n- All masses are $m_i = 1$.\n\nInitial conditions:\n- Number of particles $N = 3$ in three dimensions.\n- Initial positions:\n  - Particle $1$: $(0.0, 0.0, 0.0)$,\n  - Particle $2$: $(1.2, 0.0, 0.0)$,\n  - Particle $3$: $(0.6, 1.0, 0.0)$.\n- Initial velocities (zero net momentum):\n  - Particle $1$: $(0.0, 0.0, 0.0)$,\n  - Particle $2$: $(0.0, 0.05, 0.0)$,\n  - Particle $3$: $(0.0, -0.05, 0.0)$.\n\nEnergy drift metric and stability criterion:\n- For a given time step $\\Delta t$, run a trajectory of $T$ steps and record the total energy $E_{\\mathrm{tot}}(n)$ at step index $n \\in \\{0,1,\\dots,T\\}$.\n- Define $E_0 = E_{\\mathrm{tot}}(0)$ and the dimensionless maximum fractional drift over the trajectory\n$$\nD(\\Delta t) \\;=\\; \\max_{0 \\le n \\le T} \\frac{\\left| E_{\\mathrm{tot}}(n) - E_0 \\right|}{\\max\\left( \\left| E_0 \\right|, \\epsilon \\right)},\n$$\nwith a small positive $\\epsilon = 10^{-12}$ to avoid division by zero if $E_0 = 0$.\n- A time step is classified as stable if $D(\\Delta t) \\le \\tau$, where $\\tau = 10^{-3}$.\n\nInstructions:\n- Implement the ML potential and its forces exactly as defined above.\n- Implement the velocity Verlet integrator for the NVE trajectory in reduced units.\n- For each time step in the test suite below, compute $D(\\Delta t)$ and determine whether it is stable under the given tolerance.\n- If any non-finite value (not a real number) appears in positions, velocities, forces, or energies during a trajectory, terminate that trajectory and set $D(\\Delta t)$ to a large sentinel value $10^{6}$ and classify it as unstable.\n- Determine the largest time step in the test suite that is stable. If none are stable, return $-1$ for that element.\n\nTest suite:\n- Use $T = 1000$ steps.\n- Time step candidates $\\Delta t \\in \\{0.001, 0.005, 0.010, 0.020, 0.050, 0.100\\}$.\n\nFinal output format:\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets.\n- The list must contain the $6$ maximum fractional drifts $D(\\Delta t)$ in the same order as the test suite, followed by the largest stable time step value among them (or $-1$ if none are stable). For example, the printed string should have the form $[d_1,d_2,d_3,d_4,d_5,d_6,d_{\\mathrm{stable}}]$, where each $d_i$ is a floating-point number and $d_{\\mathrm{stable}}$ is a floating-point number for the chosen time step or $-1$.", "solution": "The problem statement has been evaluated and is found to be valid. It is a well-posed, scientifically grounded problem in computational physical chemistry that is free of contradictions, ambiguities, and factual errors. The task is to implement a molecular dynamics simulation to assess the numerical stability of different integration time steps for a custom machine learning potential. We will proceed with a rigorous, principle-based solution.\n\nThe solution requires the implementation of several key components: the potential energy and force calculation for the given machine learning model, the velocity Verlet integration algorithm to propagate the system in time, and an analysis of the total energy conservation to determine integration stability.\n\n**1. System and Potential Energy Model**\n\nThe system consists of $N=3$ particles in three-dimensional space, with all masses set to unity ($m_i = 1$) in a system of reduced units. The total potential energy $U(\\mathbf{r})$ is defined as a sum of pairwise interactions over all unique pairs of particles $(i, j)$:\n$$\nU(\\mathbf{r}) \\;=\\; \\sum_{1 \\le i < j \\le 3} U_{ij}(r_{ij})\n$$\nwhere $r_{ij} = \\lVert \\mathbf{r}_i - \\mathbf{r}_j \\rVert$ is the distance between particles $i$ and $j$. The interaction potential $U_{ij}$ for a single pair is described by a sum of weighted Gaussian functions modulated by a smooth cutoff function:\n$$\nU_{ij}(r_{ij}) \\;=\\; \\sum_{k=1}^{3} \\; w_k \\, \\phi_k(r_{ij}) \\, s(r_{ij})\n$$\nThe components are the Gaussian radial basis functions,\n$$\n\\phi_k(r) \\;=\\; \\exp\\!\\left(-\\beta_k \\, (r - \\mu_k)^2\\right)\n$$\nand the cosine cutoff function,\n$$\ns(r) \\;=\\; \\begin{cases}\n\\dfrac{1}{2}\\left[\\cos\\!\\left(\\dfrac{\\pi r}{r_c}\\right) + 1\\right], & r < r_c, \\\\\n0, & r \\ge r_c.\n\\end{cases}\n$$\nThe provided parameters are the weights $\\{w_k\\}$, centers $\\{\\mu_k\\}$, width parameters $\\{\\beta_k\\}$, and the cutoff radius $r_c$. These parameters fully define the potential energy landscape.\n\n**2. Force Calculation**\n\nThe force $\\mathbf{F}_i$ on particle $i$ is the negative gradient of the total potential energy with respect to its position vector $\\mathbf{r}_i$:\n$$\n\\mathbf{F}_i = -\\nabla_{\\mathbf{r}_i} U(\\mathbf{r}) = -\\nabla_{\\mathbf{r}_i} \\sum_{1 \\le k < l \\le 3} U_{kl}(r_{kl})\n$$\nThe gradient operator $\\nabla_{\\mathbf{r}_i}$ only affects terms in the sum that depend on $\\mathbf{r}_i$. These are the terms $U_{ij}$ for all $j \\ne i$. By applying the chain rule, the force on particle $i$ can be expressed as a sum of pairwise forces:\n$$\n\\mathbf{F}_i = \\sum_{j \\ne i} \\mathbf{F}_{i \\leftarrow j}\n$$\nwhere $\\mathbf{F}_{i \\leftarrow j}$ is the force on particle $i$ due to its interaction with particle $j$. This force is calculated as:\n$$\n\\mathbf{F}_{i \\leftarrow j} = -\\nabla_{\\mathbf{r}_i} U_{ij}(r_{ij}) = -\\frac{dU_{ij}}{dr_{ij}} \\nabla_{\\mathbf{r}_i} r_{ij}\n$$\nThe gradient of the scalar distance $r_{ij}$ is the unit vector pointing from $j$ to $i$:\n$$\n\\nabla_{\\mathbf{r}_i} r_{ij} = \\nabla_{\\mathbf{r}_i} \\sqrt{(\\mathbf{r}_i - \\mathbf{r}_j)\\cdot(\\mathbf{r}_i - \\mathbf{r}_j)} = \\frac{\\mathbf{r}_i - \\mathbf{r}_j}{r_{ij}}\n$$\nThis leads to the expression for the pairwise force provided in the problem statement:\n$$\n\\mathbf{F}_{i \\leftarrow j} = - \\frac{dU_{ij}}{dr_{ij}} \\frac{\\mathbf{r}_i - \\mathbf{r}_j}{r_{ij}}\n$$\nBy Newton's third law, the force on particle $j$ due to particle $i$ is $\\mathbf{F}_{j \\leftarrow i} = -\\mathbf{F}_{i \\leftarrow j}$. This property is crucial for conserving total momentum and is exploited in the implementation by calculating each pairwise force once and applying it with opposite signs to the two interacting particles.\n\nThe radial derivative of the pair potential, $\\frac{dU_{ij}}{dr}$, is found by applying the product rule to the definition of $U_{ij}(r)$:\n$$\n\\frac{dU_{ij}}{dr} = \\frac{d}{dr} \\left( s(r) \\sum_{k=1}^3 w_k \\phi_k(r) \\right) = s'(r) \\left( \\sum_{k=1}^3 w_k \\phi_k(r) \\right) + s(r) \\left( \\sum_{k=1}^3 w_k \\frac{d\\phi_k}{dr}(r) \\right)\n$$\nThis can be rearranged into the form given in the problem statement:\n$$\n\\frac{dU_{ij}}{dr} = \\sum_{k=1}^{3} w_k \\left( \\frac{d\\phi_k}{dr}(r_{ij}) \\, s(r_{ij}) + \\phi_k(r_{ij}) \\, s'(r_{ij}) \\right)\n$$\nThe required derivatives are:\n$$\n\\frac{d \\phi_k}{dr}(r) = -2 \\beta_k (r - \\mu_k)\\, \\phi_k(r) \\quad \\text{and} \\quad s'(r) = -\\frac{\\pi}{2 r_c} \\sin\\!\\left(\\frac{\\pi r}{r_c}\\right) \\quad \\text{for } r < r_c.\n$$\nBoth derivatives are zero for $r \\ge r_c$.\n\n**3. Numerical Integration Scheme**\n\nThe particles' equations of motion, $m_i \\ddot{\\mathbf{r}}_i = \\mathbf{F}_i$, are integrated numerically using the velocity Verlet algorithm. This is a time-reversible and symplectic integrator, which confers excellent long-term energy conservation properties for a fixed time step $\\Delta t$. Given the state of the system—positions $\\mathbf{r}(t)$, velocities $\\mathbf{v}(t)$, and accelerations $\\mathbf{a}(t) = \\mathbf{F}(\\mathbf{r}(t))/m$—at time $t$, the state at time $t+\\Delta t$ is computed in the following steps:\n1. Compute velocities at the half-step: $\\mathbf{v}(t + \\frac{\\Delta t}{2}) = \\mathbf{v}(t) + \\frac{\\Delta t}{2} \\mathbf{a}(t)$.\n2. Update positions to the full step: $\\mathbf{r}(t + \\Delta t) = \\mathbf{r}(t) + \\Delta t \\, \\mathbf{v}(t + \\frac{\\Delta t}{2})$.\n3. Compute forces $\\mathbf{F}(\\mathbf{r}(t + \\Delta t))$ using the new positions.\n4. Compute accelerations at the new step: $\\mathbf{a}(t + \\Delta t) = \\mathbf{F}(\\mathbf{r}(t + \\Delta t))/m$.\n5. Update velocities to the full step: $\\mathbf{v}(t + \\Delta t) = \\mathbf{v}(t + \\frac{\\Delta t}{2}) + \\frac{\\Delta t}{2} \\mathbf{a}(t + \\Delta t)$.\n\nThis procedure is repeated for $T=1000$ steps for each candidate time step $\\Delta t$.\n\n**4. Energy Conservation and Stability Analysis**\n\nIn a perfect microcanonical (NVE) ensemble simulation, the total energy $E_{\\mathrm{tot}} = K + U$ must be conserved. The kinetic energy $K$ is given by $K(t) = \\sum_i \\frac{1}{2} m_i \\lVert \\mathbf{v}_i(t) \\rVert^2$, and the potential energy $U$ is calculated from the model described above. Numerical integration introduces discretization errors, causing the computed total energy to drift over time. The magnitude of this drift is a direct measure of the integration accuracy and stability.\n\nWe quantify the stability using the maximum fractional energy drift, $D(\\Delta t)$, over a trajectory of $T$ steps:\n$$\nD(\\Delta t) = \\max_{0 \\le n \\le T} \\frac{\\left| E_{\\mathrm{tot}}(n) - E_0 \\right|}{\\max\\left( \\left| E_0 \\right|, \\epsilon \\right)}\n$$\nwhere $E_{\\mathrm{tot}}(n)$ is the total energy at step $n$, $E_0$ is the initial total energy, and $\\epsilon = 10^{-12}$ is a small constant to prevent division by zero. A time step $\\Delta t$ is deemed stable if its drift $D(\\Delta t)$ does not exceed a predefined tolerance $\\tau = 10^{-3}$.\n\nThe final task is to compute $D(\\Delta t)$ for each $\\Delta t$ in the test suite $\\{0.001, 0.005, 0.010, 0.020, 0.050, 0.100\\}$ and identify the largest value of $\\Delta t$ that satisfies the stability criterion. If a simulation becomes numerically unstable, indicated by the appearance of non-finite numbers (e.g., `NaN` or `inf`) in positions, velocities, or energies, the trajectory is terminated, and its drift is assigned a large sentinel value of $10^6$. If no tested time step is stable, the result for the largest stable step is $-1$.\n\nThe implementation will consist of a main loop that iterates through the candidate time steps. For each time step, a simulation is run from the specified initial conditions, tracking the total energy at each integration step. The maximum fractional drift is then computed and recorded. Finally, the collected drift values and the largest stable time step are reported.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the molecular dynamics stability problem.\n    \"\"\"\n    \n    # --- System Parameters ---\n    # ML potential parameters\n    W = np.array([0.8, -0.3, 0.2])\n    MU = np.array([1.0, 2.0, 3.0])\n    BETA = np.array([4.0, 1.0, 0.5])\n    R_CUT = 3.5\n    R_CUT_SQ = R_CUT ** 2\n\n    # Particle properties\n    N_PARTICLES = 3\n    MASSES = np.ones(N_PARTICLES)\n\n    # Initial conditions\n    R0 = np.array([\n        [0.0, 0.0, 0.0],\n        [1.2, 0.0, 0.0],\n        [0.6, 1.0, 0.0]\n    ])\n    V0 = np.array([\n        [0.0, 0.0, 0.0],\n        [0.0, 0.05, 0.0],\n        [0.0, -0.05, 0.0]\n    ])\n\n    # Simulation parameters\n    T_STEPS = 1000\n    DT_CANDIDATES = [0.001, 0.005, 0.010, 0.020, 0.050, 0.100]\n    \n    # Stability criterion\n    DRIFT_TOLERANCE_TAU = 1e-3\n    EPSILON = 1e-12\n    SENTINEL_DRIFT = 1e6\n\n    def calculate_potential_and_forces(positions):\n        \"\"\"\n        Calculates the total potential energy and forces for all particles.\n        \"\"\"\n        potential_energy = 0.0\n        forces = np.zeros_like(positions)\n\n        for i in range(N_PARTICLES):\n            for j in range(i + 1, N_PARTICLES):\n                r_vec = positions[i] - positions[j]\n                r_sq = np.dot(r_vec, r_vec)\n\n                if r_sq >= R_CUT_SQ:\n                    continue\n\n                r = np.sqrt(r_sq)\n                \n                # Calculate phi_k and their derivatives\n                r_minus_mu = r - MU\n                phi_k = np.exp(-BETA * r_minus_mu**2)\n                d_phi_k_dr = -2.0 * BETA * r_minus_mu * phi_k\n\n                # Calculate s(r) and its derivative\n                arg_cos = np.pi * r / R_CUT\n                s_r = 0.5 * (np.cos(arg_cos) + 1.0)\n                s_prime_r = -0.5 * (np.pi / R_CUT) * np.sin(arg_cos)\n\n                # Calculate pair potential U_ij and its derivative dU_ij/dr\n                sum_w_phi = np.dot(W, phi_k)\n                sum_w_dphi = np.dot(W, d_phi_k_dr)\n\n                U_ij = sum_w_phi * s_r\n                dU_ij_dr = sum_w_dphi * s_r + sum_w_phi * s_prime_r\n                \n                potential_energy += U_ij\n\n                # Calculate pairwise force F_i_from_j = - (dU/dr) * (r_vec / r)\n                force_magnitude = -dU_ij_dr / r\n                force_vec = force_magnitude * r_vec\n\n                forces[i] += force_vec\n                forces[j] -= force_vec\n        \n        return potential_energy, forces\n\n    def run_simulation(dt):\n        \"\"\"\n        Runs an NVE simulation for a given time step dt and computes the energy drift.\n        \"\"\"\n        r = R0.copy()\n        v = V0.copy()\n\n        # Initial energy and forces\n        U0, F0 = calculate_potential_and_forces(r)\n        if not np.all(np.isfinite(U0)) or not np.all(np.isfinite(F0)):\n            return SENTINEL_DRIFT\n\n        K0 = 0.5 * np.sum(MASSES[:, np.newaxis] * v**2)\n        E0 = K0 + U0\n\n        a = F0 / MASSES[:, np.newaxis]\n        \n        max_abs_drift = 0.0\n\n        for _ in range(T_STEPS):\n            # Velocity Verlet steps\n            v_half = v + 0.5 * dt * a\n            r += dt * v_half\n            \n            U, F = calculate_potential_and_forces(r)\n            \n            if not np.all(np.isfinite(U)) or not np.all(np.isfinite(F)):\n                return SENTINEL_DRIFT\n\n            a = F / MASSES[:, np.newaxis]\n            v = v_half + 0.5 * dt * a\n        \n            # Energy calculation for drift\n            K = 0.5 * np.sum(MASSES[:, np.newaxis] * v**2)\n            E_n = K + U\n            \n            current_drift = abs(E_n - E0)\n            if current_drift > max_abs_drift:\n                max_abs_drift = current_drift\n        \n        denominator = max(abs(E0), EPSILON)\n        max_fractional_drift = max_abs_drift / denominator\n\n        return max_fractional_drift\n\n    # Main logic\n    drifts = []\n    for dt in DT_CANDIDATES:\n        drift = run_simulation(dt)\n        drifts.append(drift)\n\n    largest_stable_dt = -1.0\n    for i in range(len(DT_CANDIDATES) - 1, -1, -1):\n        if drifts[i] = DRIFT_TOLERANCE_TAU:\n            largest_stable_dt = DT_CANDIDATES[i]\n            break\n\n    results = drifts + [largest_stable_dt]\n    \n    # Format and print the final output\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2648626"}]}