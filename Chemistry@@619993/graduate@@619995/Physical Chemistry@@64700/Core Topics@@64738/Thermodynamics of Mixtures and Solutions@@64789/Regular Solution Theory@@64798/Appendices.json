{"hands_on_practices": [{"introduction": "The Regular Solution Theory provides a simple yet powerful way to quantify deviations from ideal behavior in liquid mixtures. A key application is calculating activity coefficients, which describe the effective concentration of a component. This first exercise [@problem_id:2002474] provides hands-on practice in applying the model's central equation to determine the activity coefficient of a component at infinite dilution, a crucial parameter for understanding solute-solvent interactions.", "problem": "A chemical engineer is studying a binary liquid mixture of two non-polar organic compounds, henone (component A) and octol (component B). The thermodynamic behavior of this mixture is well-described by the regular solution model, which uses a single interaction parameter, $\\Omega$, to account for the deviation from ideality. For this particular mixture, the interaction parameter has been experimentally determined to be $\\Omega = +5.00 \\text{ kJ mol}^{-1}$ at a constant temperature of $298 \\text{ K}$. Calculate the activity coefficient of henone (component A) in the limit where its mole fraction approaches zero. Use the value of the universal gas constant $R = 8.314 \\text{ J K}^{-1} \\text{mol}^{-1}$. Round your final answer to three significant figures.", "solution": "For a binary regular solution with a single interaction parameter, the excess Gibbs energy is given by\n$$G^{E} = n x_{A} x_{B} \\Omega,$$\nwhere $n$ is the total number of moles, $x_{A}$ and $x_{B}$ are the mole fractions, and $\\Omega$ is the interaction parameter.\n\nThe activity coefficient follows from the excess chemical potential,\n$$\\mu_{i}^{E} = RT \\ln \\gamma_{i}, \\quad \\mu_{i}^{E} = \\left(\\frac{\\partial G^{E}}{\\partial n_{i}}\\right)_{T,P,n_{j\\neq i}}.$$\nWith $G^{E} = \\Omega \\frac{n_{A} n_{B}}{n_{A}+n_{B}}$, differentiate with respect to $n_{A}$ at fixed $n_{B}$:\n$$\\mu_{A}^{E} = \\Omega \\frac{n_{B}^{2}}{(n_{A}+n_{B})^{2}} = \\Omega x_{B}^{2}.$$\nHence,\n$$\\ln \\gamma_{A} = \\frac{\\mu_{A}^{E}}{RT} = \\frac{\\Omega}{RT} x_{B}^{2}.$$\nIn the infinite dilution limit of A in B, $x_{A} \\to 0$ and $x_{B} \\to 1$, so\n$$\\ln \\gamma_{A}^{\\infty} = \\frac{\\Omega}{RT}, \\quad \\gamma_{A}^{\\infty} = \\exp\\!\\left(\\frac{\\Omega}{RT}\\right).$$\n\nSubstitute the given values, converting $\\Omega$ to consistent units:\n$$\\Omega = 5.00 \\times 10^{3}\\ \\text{J mol}^{-1}, \\quad R = 8.314\\ \\text{J K}^{-1}\\ \\text{mol}^{-1}, \\quad T = 298\\ \\text{K},$$\n$$\\frac{\\Omega}{RT} = \\frac{5.00 \\times 10^{3}}{8.314 \\times 298} \\approx 2.018,$$\n$$\\gamma_{A}^{\\infty} = \\exp(2.018) \\approx 7.52.$$\nRounded to three significant figures, the activity coefficient is $7.52$.", "answer": "$$\\boxed{7.52}$$", "id": "2002474"}, {"introduction": "While the simplest regular solution model assumes a constant interaction parameter $\\Omega$, real systems often exhibit temperature dependence. This practice [@problem_id:2002536] challenges you to extend the basic model by considering a linear temperature dependence, $\\Omega = A + BT$. By applying fundamental thermodynamic relationships, you will derive the corresponding expressions for excess molar enthalpy, $H_m^E$, and excess molar entropy, $S_m^E$, gaining insight into how temperature-dependent interactions partition into enthalpic and entropic contributions to non-ideality.", "problem": "In the study of non-ideal mixtures, such as certain metallic alloys or polymer blends, the regular solution model provides a useful first approximation beyond ideal behavior. For a particular binary mixture of components 1 and 2, extensive experimental measurements reveal that the interaction energy parameter $\\Omega$ is not constant but shows a linear dependence on absolute temperature $T$. This behavior is captured by the empirical relation $\\Omega = A + BT$, where $A$ and $B$ are constants characteristic of the specific mixture. Let $x_1$ and $x_2$ be the mole fractions of components 1 and 2, respectively. The excess molar Gibbs energy for this system is given by the extended regular solution model as $G_m^E = \\Omega x_1 x_2$.\n\nUsing fundamental thermodynamic relations, derive the expressions for the excess molar enthalpy, $H_m^E$, and the excess molar entropy, $S_m^E$, for this system. Present your final answer as a pair of expressions, beginning with the expression for $H_m^E$ followed by the expression for $S_m^E$.", "solution": "We are given a binary mixture described by the extended regular solution model with excess molar Gibbs energy\n$$\nG_{m}^{E}=\\Omega x_{1}x_{2}, \\quad \\Omega=A+BT,\n$$\nwhere $A$ and $B$ are constants, and $x_{1},x_{2}$ are the mole fractions. We seek $H_{m}^{E}$ and $S_{m}^{E}$ using fundamental thermodynamics.\n\nFirst, use the identity for the excess molar entropy at fixed $P$ and composition:\n$$\nS_{m}^{E}=-\\left(\\frac{\\partial G_{m}^{E}}{\\partial T}\\right)_{P,x}.\n$$\nAt fixed composition, $x_{1}$ and $x_{2}$ are constants with respect to $T$, and $\\Omega$ depends only on $T$. Therefore,\n$$\n\\left(\\frac{\\partial G_{m}^{E}}{\\partial T}\\right)_{P,x}\n=\\left(\\frac{\\partial \\Omega}{\\partial T}\\right)_{P}x_{1}x_{2}.\n$$\nWith $\\Omega=A+BT$, we have $\\left(\\frac{\\partial \\Omega}{\\partial T}\\right)_{P}=B$, hence\n$$\nS_{m}^{E}=-Bx_{1}x_{2}.\n$$\n\nNext, relate excess enthalpy and Gibbs energy via $G=H-TS$, which implies $H=G+TS$. By linearity for excess quantities,\n$$\nH_{m}^{E}=G_{m}^{E}+TS_{m}^{E}.\n$$\nSubstituting $G_{m}^{E}=\\Omega x_{1}x_{2}$ and $S_{m}^{E}=-Bx_{1}x_{2}$ gives\n$$\nH_{m}^{E}=\\Omega x_{1}x_{2}+T\\left(-Bx_{1}x_{2}\\right)\n=\\left(\\Omega-T\\frac{\\partial \\Omega}{\\partial T}\\right)x_{1}x_{2}.\n$$\nWith $\\Omega=A+BT$ and $\\frac{\\partial \\Omega}{\\partial T}=B$, this becomes\n$$\nH_{m}^{E}=Ax_{1}x_{2}.\n$$\n\nThus, the required expressions are\n$$\nH_{m}^{E}=Ax_{1}x_{2}, \\quad S_{m}^{E}=-Bx_{1}x_{2}.\n$$", "answer": "$$\\boxed{\\begin{pmatrix}A x_{1} x_{2} & - B x_{1} x_{2}\\end{pmatrix}}$$", "id": "2002536"}, {"introduction": "Connecting theoretical models to experimental data is a cornerstone of modern physical chemistry. This advanced computational exercise [@problem_id:2665948] guides you through building a Bayesian inference framework to determine temperature-dependent solubility parameters from vapor-liquid equilibrium (VLE) data. You will engage with the entire modeling pipeline, from deriving activity coefficient expressions to implementing a maximum a posteriori (MAP) estimation, providing a practical introduction to the powerful techniques used to parameterize and validate thermodynamic models.", "problem": "You are asked to formalize and implement a principled Bayesian parameter inference for temperature-dependent solubility parameters within regular solution theory, using only first-principles relations as the modeling base. You will construct a synthetic, internally consistent vapor–liquid equilibrium data set and then perform maximum a posteriori estimation of the parameters that define the temperature dependence of the Hildebrand solubility parameters. Your program must return pass–fail booleans for a small test suite that exercises different identifiability regimes.\n\nModeling base and definitions, to be used as the only starting point:\n- Regular solution theory postulates an excess molar Gibbs energy per mole, $g^{E}$, determined by the cohesive energy density mismatch. In the Scatchard–Hildebrand picture, the excess free energy density is proportional to the square of the solubility parameter difference. Adopting the common linear mixing for the volume fraction, the excess free energy per unit volume reads $g^{E}/\\bar{V} = \\phi_{1}\\,\\phi_{2}\\,(\\delta_{1}-\\delta_{2})^{2}$, where $\\phi_{i}$ is the liquid volume fraction of component $i$, $\\bar{V}$ is the molar volume of the mixture, and $\\delta_{i}$ is the Hildebrand solubility parameter of component $i$. The activity coefficients $\\gamma_{i}$ follow from the definition of the excess chemical potentials via $\\ln \\gamma_{i} = \\mu_{i}^{E}/(R\\,T)$, with $\\mu_{i}^{E} = \\left(\\partial (n\\,g^{E})/\\partial n_{i}\\right)_{T,P,n_{j\\neq i}}$, and $R$ the universal gas constant.\n- Modified Raoult’s law at low to moderate pressures relates phase compositions at equilibrium: $y_{i}\\,P = x_{i}\\,\\gamma_{i}\\,P_{i}^{\\mathrm{sat}}(T)$, where $x_{i}$ and $y_{i}$ are the liquid and vapor mole fractions, $P$ is the system pressure and $P_{i}^{\\mathrm{sat}}(T)$ is the saturation pressure of component $i$ at temperature $T$. For a bubble-point calculation at given $T$ and liquid composition, the total pressure satisfies $P = \\sum_{i} x_{i}\\,\\gamma_{i}\\,P_{i}^{\\mathrm{sat}}(T)$, and the corresponding vapor composition is $y_{i} = x_{i}\\,\\gamma_{i}\\,P_{i}^{\\mathrm{sat}}(T)\\,\\big/ \\sum_{k} x_{k}\\,\\gamma_{k}\\,P_{k}^{\\mathrm{sat}}(T)$.\n- A simple and widely used temperature dependence for solubility parameters consistent with cohesive energy density arguments is to model the squared solubility parameter as an approximately linear function of $T$: $\\delta_{i}^{2}(T) = \\alpha_{i} - \\beta_{i}\\,T$, with $\\alpha_{i} > 0$ and $\\beta_{i} > 0$. This reflects that cohesive energy density decreases with increasing temperature due to thermal agitation.\n- Saturation pressures may be modeled by a two-parameter Clausius–Clapeyron–type relation $\\ln P_{i}^{\\mathrm{sat}}(T) = A_{i} - B_{i}/T$. The base of the logarithm is the natural logarithm.\n\nYour Bayesian framework:\n- Parameterization: infer $\\theta = (\\alpha_{1},\\beta_{1},\\alpha_{2},\\beta_{2})$ from measured vapor–liquid equilibrium compositions.\n- Likelihood: assume independently and identically distributed Gaussian observation noise on the measured vapor composition of component $1$, with known standard deviation $\\sigma_{y}$. Specifically, if the model predicts $y_{1}^{\\mathrm{model}}(T_{m};\\theta)$ at temperature $T_{m}$, then the measurement model is $y_{1}^{\\mathrm{obs}}(T_{m}) = y_{1}^{\\mathrm{model}}(T_{m};\\theta) + \\varepsilon_{m}$ with $\\varepsilon_{m} \\sim \\mathcal{N}(0,\\sigma_{y}^{2})$ and all $\\varepsilon_{m}$ independent across $m$.\n- Priors informed by vaporization energetics: the cohesive energy density satisfies approximately $\\delta_{i}^{2}(T)\\,V_{i} \\approx \\Delta E_{\\mathrm{coh},i}(T) \\approx \\Delta H_{\\mathrm{vap},i}(T) - R\\,T$, so that the slope of $\\delta_{i}^{2}(T)$ with respect to $T$ is on the order of $R/V_{i}$. Use independent Gaussian priors truncated to the physically meaningful domains $\\alpha_{i} > 0$ and $\\beta_{i} > 0$:\n  - $\\alpha_{i} \\sim \\mathcal{N}(\\mu_{\\alpha},\\sigma_{\\alpha}^{2})$ with $\\mu_{\\alpha}$ a typical magnitude for $\\delta^{2}$ at ambient conditions, and $\\sigma_{\\alpha}$ sufficiently wide to be weakly informative.\n  - $\\beta_{i} \\sim \\mathcal{N}(R/V_{i},\\sigma_{\\beta}^{2})$ with $\\sigma_{\\beta}$ reflecting uncertainty in the temperature derivative estimate. The truncations enforce positivity and thereby the physical monotonic decrease of $\\delta_{i}^{2}(T)$ with $T$.\n- Posterior: by Bayes’ theorem, $p(\\theta\\mid \\text{data}) \\propto p(\\text{data}\\mid \\theta)\\,p(\\theta)$. Compute the maximum a posteriori (MAP) estimate by minimizing the negative log-posterior. Use the bounds $\\alpha_{i} \\in [\\alpha_{\\min},\\alpha_{\\max}]$ and $\\beta_{i} \\in [\\beta_{\\min},\\beta_{\\max}]$ to enforce physical plausibility and numerical stability.\n\nScientific constants, units, and fixed modeling choices to be used:\n- Universal gas constant: $R = 8.314\\times 10^{-6}\\,\\mathrm{MPa\\,m^{3}\\,mol^{-1}\\,K^{-1}}$.\n- Saturation pressure model parameters (natural logarithm, pressure in $\\mathrm{bar}$): $A_{1} = 10.000$, $B_{1} = 3200.0$, $A_{2} = 9.200$, $B_{2} = 2800.0$. Thus $\\ln P_{i}^{\\mathrm{sat}}(T) = A_{i} - B_{i}/T$ with $T$ in $\\mathrm{K}$ and $P_{i}^{\\mathrm{sat}}$ in $\\mathrm{bar}$.\n- Activity coefficient model: derive $\\ln \\gamma_{i}$ from the excess free energy base given above and the definition $\\ln \\gamma_{i} = \\mu_{i}^{E}/(R\\,T)$. Use liquid volume fractions $\\phi_{i} = x_{i} V_{i} / (x_{1} V_{1} + x_{2} V_{2})$ with $V_{i}$ the pure-liquid molar volumes, in $\\mathrm{m^{3}\\,mol^{-1}}$.\n- Solubility parameter model: $\\delta_{i}(T) = \\sqrt{\\max(\\epsilon, \\alpha_{i} - \\beta_{i}\\,T)}$ with $\\epsilon = 10^{-9}\\,\\mathrm{MPa}$ for numerical safety. Report and infer $\\alpha_{i}$ and $\\beta_{i}$; all $\\delta_{i}$ values implied are in $\\mathrm{MPa^{1/2}}$ and $\\delta_{i}^{2}$ in $\\mathrm{MPa}$.\n- Priors: use $\\mu_{\\alpha} = 300.0\\,\\mathrm{MPa}$, $\\sigma_{\\alpha} = 100.0\\,\\mathrm{MPa}$, and $\\sigma_{\\beta} = 0.03\\,\\mathrm{MPa\\,K^{-1}}$. Truncate to $\\alpha_{i} > 0$ and $\\beta_{i} > 0$. Bounds for optimization: $\\alpha_{\\min} = 50.0\\,\\mathrm{MPa}$, $\\alpha_{\\max} = 600.0\\,\\mathrm{MPa}$, $\\beta_{\\min} = 0.01\\,\\mathrm{MPa\\,K^{-1}}$, $\\beta_{\\max} = 0.20\\,\\mathrm{MPa\\,K^{-1}}$.\n- Noise standard deviation in the likelihood: $\\sigma_{y}$ specified per test case below; vapor compositions are unitless mole fractions in $[0,1]$.\n\nSynthetic-data generation protocol to be implemented exactly:\n- Given a set $\\{T_{m}\\}_{m=1}^{M}$, liquid composition $x_{1}$ (with $x_{2} = 1 - x_{1}$), pure-liquid molar volumes $(V_{1},V_{2})$, and true solubility-parameter parameters $(\\alpha_{1}^{\\star},\\beta_{1}^{\\star},\\alpha_{2}^{\\star},\\beta_{2}^{\\star})$, compute:\n  - $\\delta_{i}(T_{m}) = \\sqrt{\\max(\\epsilon, \\alpha_{i}^{\\star} - \\beta_{i}^{\\star} T_{m})}$,\n  - liquid volume fractions $\\phi_{i}(T_{m}) = x_{i}\\,V_{i}/(x_{1} V_{1} + x_{2} V_{2})$,\n  - activity coefficients $\\gamma_{i}(T_{m})$ from the regular-solution expression derived from the base assumptions,\n  - saturation pressures $P_{i}^{\\mathrm{sat}}(T_{m}) = \\exp(A_{i} - B_{i}/T_{m})$ in $\\mathrm{bar}$,\n  - bubble pressure $P_{\\mathrm{bub}}(T_{m}) = \\sum_{i=1}^{2} x_{i}\\,\\gamma_{i}(T_{m})\\,P_{i}^{\\mathrm{sat}}(T_{m})$,\n  - vapor composition $y_{1}^{\\mathrm{model}}(T_{m}) = x_{1}\\,\\gamma_{1}(T_{m})\\,P_{1}^{\\mathrm{sat}}(T_{m})/P_{\\mathrm{bub}}(T_{m})$,\n  - observation $y_{1}^{\\mathrm{obs}}(T_{m}) = y_{1}^{\\mathrm{model}}(T_{m}) + \\varepsilon_{m}$ with $\\varepsilon_{m} \\sim \\mathcal{N}(0,\\sigma_{y}^{2})$ independently for each $m$.\n- Use a fixed random seed $s = 1729$ to draw the Gaussian noise for reproducibility.\n\nTest suite specification:\nProvide three cases with distinct identifiability characteristics. For each test case $k \\in \\{1,2,3\\}$, your program must generate the synthetic data exactly as above using the specified parameters and then perform MAP estimation of $\\theta = (\\alpha_{1},\\beta_{1},\\alpha_{2},\\beta_{2})$. Finally, compare the estimated parameters $\\hat{\\theta}$ to the true parameters $\\theta^{\\star}$ using a relative error criterion and return a boolean indicating success for that case.\n\n- Case $1$ (well-separated solubility parameters):\n  - Temperatures (in $\\mathrm{K}$): $[330.0, 340.0, 350.0, 360.0]$.\n  - Liquid composition: $x_{1} = 0.5$.\n  - Molar volumes (in $\\mathrm{m^{3}\\,mol^{-1}}$): $V_{1} = 1.0\\times 10^{-4}$, $V_{2} = 1.0\\times 10^{-4}$.\n  - True parameters (in $\\mathrm{MPa}$ and $\\mathrm{MPa\\,K^{-1}}$): $(\\alpha_{1}^{\\star},\\beta_{1}^{\\star},\\alpha_{2}^{\\star},\\beta_{2}^{\\star}) = (340.0, 0.080, 260.0, 0.060)$.\n  - Observation noise: $\\sigma_{y} = 0.005$.\n  - Pass criterion: all four relative errors $|\\hat{\\theta}_{j} - \\theta^{\\star}_{j}|/\\theta^{\\star}_{j}$ less than $0.20$.\n\n- Case $2$ (near-ideal solution, weakly informative data):\n  - Temperatures (in $\\mathrm{K}$): $[330.0, 340.0, 350.0, 360.0]$.\n  - Liquid composition: $x_{1} = 0.5$.\n  - Molar volumes (in $\\mathrm{m^{3}\\,mol^{-1}}$): $V_{1} = 1.0\\times 10^{-4}$, $V_{2} = 1.0\\times 10^{-4}$.\n  - True parameters (in $\\mathrm{MPa}$ and $\\mathrm{MPa\\,K^{-1}}$): $(\\alpha_{1}^{\\star},\\beta_{1}^{\\star},\\alpha_{2}^{\\star},\\beta_{2}^{\\star}) = (300.0, 0.080, 300.0, 0.080)$.\n  - Observation noise: $\\sigma_{y} = 0.002$.\n  - Pass criterion: all four relative errors less than $0.35$.\n\n- Case $3$ (asymmetric molar volumes and compositions):\n  - Temperatures (in $\\mathrm{K}$): $[330.0, 345.0, 360.0]$.\n  - Liquid composition: $x_{1} = 0.3$.\n  - Molar volumes (in $\\mathrm{m^{3}\\,mol^{-1}}$): $V_{1} = 1.2\\times 10^{-4}$, $V_{2} = 0.8\\times 10^{-4}$.\n  - True parameters (in $\\mathrm{MPa}$ and $\\mathrm{MPa\\,K^{-1}}$): $(\\alpha_{1}^{\\star},\\beta_{1}^{\\star},\\alpha_{2}^{\\star},\\beta_{2}^{\\star}) = (370.0, 0.090, 240.0, 0.050)$.\n  - Observation noise: $\\sigma_{y} = 0.005$.\n  - Pass criterion: all four relative errors less than $0.25$.\n\nAlgorithmic requirements:\n- Implement the log-likelihood under independent Gaussian noise and the log-prior under independent truncated Gaussians. Form the negative log-posterior as the sum of a weighted least-squares term and quadratic penalties from the priors.\n- Compute a MAP estimate via a bound-constrained numerical optimizer. Use multiple random restarts around the prior means to mitigate local minima, and return the best solution found.\n- All temperatures must be in $\\mathrm{K}$, pressures in $\\mathrm{bar}$, molar volumes in $\\mathrm{m^{3}\\,mol^{-1}}$, solubility parameters in $\\mathrm{MPa^{1/2}}$, and $\\delta_{i}^{2}$ in $\\mathrm{MPa}$. Ensure internal unit consistency.\n\nFinal output specification:\n- For each test case $k \\in \\{1,2,3\\}$, compute a boolean indicating whether the pass criterion is met.\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets (e.g., $[result_{1},result_{2},result_{3}]$). Each $result_{k}$ must be either the string `True` or `False`, corresponding to the boolean for test case $k$ in order $k = 1,2,3$.", "solution": "We construct the full framework by chaining fundamental thermodynamic definitions and a Bayesian estimation procedure, starting from the regular solution energetic base.\n\nFirst, the Scatchard–Hildebrand assumption for regular mixtures states that the excess free energy density is given by $g^{E}/\\bar{V} = \\phi_{1}\\,\\phi_{2}\\,(\\delta_{1}-\\delta_{2})^{2}$, where $\\phi_{i}$ denotes the liquid volume fraction of component $i$, and $\\bar{V}$ is the molar volume of the solution. For a binary mixture, $\\phi_{i} = x_{i}\\,V_{i} / (x_{1} V_{1} + x_{2} V_{2})$ with $x_{i}$ the liquid mole fractions and $V_{i}$ the pure-liquid molar volumes.\n\nThe activity coefficients follow from the definition of excess chemical potentials. The excess chemical potential of species $i$ is given by $\\mu_{i}^{E} = \\left(\\partial (n\\,g^{E}) / \\partial n_{i}\\right)_{T,P,n_{j\\neq i}}$, and the activity coefficient is defined via $\\ln \\gamma_{i} = \\mu_{i}^{E}/(R\\,T)$. To compute $\\mu_{i}^{E}$, one writes the total excess free energy $n\\,g^{E} = n\\,\\bar{V}\\,\\phi_{1}\\,\\phi_{2}\\,(\\delta_{1}-\\delta_{2})^{2}$ and differentiates with respect to $n_{i}$ at constant $T$, $P$ and $n_{j\\neq i}$. Using $\\phi_{i} = x_{i}\\,V_{i} / \\bar{V}$ and $\\bar{V} = x_{1} V_{1} + x_{2} V_{2}$, and keeping $V_{i}$ constant (incompressible-liquid approximation), one finds after straightforward algebra that the standard regular solution expressions obtain:\n$\\ln \\gamma_{1} = \\dfrac{V_{1}}{R\\,T}\\,\\phi_{2}^{2}\\,(\\delta_{1}-\\delta_{2})^{2}$ and $\\ln \\gamma_{2} = \\dfrac{V_{2}}{R\\,T}\\,\\phi_{1}^{2}\\,(\\delta_{1}-\\delta_{2})^{2}$. These are consistent with the fundamental base and preserve the symmetry in exchanging labels.\n\nNext, we relate the phase compositions. At low to moderate pressures with negligible Poynting correction, modified Raoult’s law applies: $y_{i}\\,P = x_{i}\\,\\gamma_{i}\\,P_{i}^{\\mathrm{sat}}(T)$. For a bubble-point calculation at given $T$ and $x_{i}$, the consistent total pressure satisfies $P = \\sum_{k=1}^{2} x_{k}\\,\\gamma_{k}(T)\\,P_{k}^{\\mathrm{sat}}(T)$, which yields the normalized vapor composition\n$y_{i}(T) = \\dfrac{x_{i}\\,\\gamma_{i}(T)\\,P_{i}^{\\mathrm{sat}}(T)}{\\sum_{k=1}^{2} x_{k}\\,\\gamma_{k}(T)\\,P_{k}^{\\mathrm{sat}}(T)}$.\nFor the saturation pressures, we use a Clausius–Clapeyron–type two-parameter relation $\\ln P_{i}^{\\mathrm{sat}}(T) = A_{i} - B_{i}/T$ with the natural logarithm and $P_{i}^{\\mathrm{sat}}$ in $\\mathrm{bar}$.\n\nWe now parameterize the temperature dependence of the solubility parameters through the linear-in-temperature form for the squared solubility parameters:\n$\\delta_{i}^{2}(T) = \\alpha_{i} - \\beta_{i}\\,T$ with $\\alpha_{i} > 0$ and $\\beta_{i} > 0$. This is consistent with the cohesive energy density interpretation $\\delta_{i}^{2}(T)\\,V_{i} \\approx \\Delta E_{\\mathrm{coh},i}(T) \\approx \\Delta H_{\\mathrm{vap},i}(T) - R\\,T$, which implies a negative slope with respect to temperature and motivates that the slope has magnitude of order $R/V_{i}$.\n\nWith these components, the forward model for a data point at temperature $T_{m}$ and liquid composition $x_{1}$ is:\n- Compute $\\delta_{i}(T_{m}) = \\sqrt{\\max(\\epsilon,\\alpha_{i} - \\beta_{i}\\,T_{m})}$ with $\\epsilon$ a small positive constant for numerical safety.\n- Compute $\\phi_{i}(T_{m}) = x_{i}\\,V_{i}/(x_{1} V_{1} + x_{2} V_{2})$.\n- Compute $\\ln \\gamma_{1} = \\dfrac{V_{1}}{R\\,T_{m}}\\,\\phi_{2}^{2}\\,(\\delta_{1}-\\delta_{2})^{2}$ and $\\ln \\gamma_{2} = \\dfrac{V_{2}}{R\\,T_{m}}\\,\\phi_{1}^{2}\\,(\\delta_{1}-\\delta_{2})^{2}$, then $\\gamma_{i} = \\exp(\\ln \\gamma_{i})$.\n- Compute $P_{i}^{\\mathrm{sat}}(T_{m}) = \\exp(A_{i} - B_{i}/T_{m})$ and $P_{\\mathrm{bub}}(T_{m}) = \\sum_{k} x_{k}\\,\\gamma_{k}(T_{m})\\,P_{k}^{\\mathrm{sat}}(T_{m})$.\n- Return $y_{1}^{\\mathrm{model}}(T_{m};\\theta) = x_{1}\\,\\gamma_{1}(T_{m})\\,P_{1}^{\\mathrm{sat}}(T_{m})/P_{\\mathrm{bub}}(T_{m})$.\n\nWe assume independent Gaussian measurement noise on $y_{1}$ with known standard deviation $\\sigma_{y}$. For a data set $\\{(T_{m},y_{1,m}^{\\mathrm{obs}})\\}_{m=1}^{M}$, the log-likelihood is\n$\\log p(\\{y_{1,m}^{\\mathrm{obs}}\\}\\mid \\theta) = -\\dfrac{1}{2}\\sum_{m=1}^{M}\\left[\\dfrac{\\left(y_{1,m}^{\\mathrm{obs}} - y_{1}^{\\mathrm{model}}(T_{m};\\theta)\\right)^{2}}{\\sigma_{y}^{2}} + \\ln(2\\pi\\sigma_{y}^{2})\\right]$.\n\nPriors are chosen to encode physically informed constraints from vaporization energetics:\n- For $\\alpha_{i}$ which has the same units as $\\delta_{i}^{2}$, we use $\\alpha_{i} \\sim \\mathcal{N}(\\mu_{\\alpha},\\sigma_{\\alpha}^{2})$ truncated to $\\alpha_{i} > 0$, reflecting a typical magnitude for $\\delta^{2}$ at moderate temperatures while remaining weakly informative.\n- For $\\beta_{i}$ which has units $\\mathrm{MPa\\,K^{-1}}$, we use $\\beta_{i} \\sim \\mathcal{N}(R/V_{i},\\sigma_{\\beta}^{2})$ truncated to $\\beta_{i} > 0$, motivated by the approximate slope $\\partial \\delta_{i}^{2}/\\partial T \\approx -R/V_{i}$ that follows from $\\delta_{i}^{2}\\,V_{i} \\approx \\Delta H_{\\mathrm{vap},i} - R\\,T$ under a slowly varying $\\Delta H_{\\mathrm{vap},i}$.\nWe adopt $\\mu_{\\alpha} = 300.0\\,\\mathrm{MPa}$, $\\sigma_{\\alpha} = 100.0\\,\\mathrm{MPa}$, and $\\sigma_{\\beta} = 0.03\\,\\mathrm{MPa\\,K^{-1}}$. The universal gas constant in compatible units is $R = 8.314\\times 10^{-6}\\,\\mathrm{MPa\\,m^{3}\\,mol^{-1}\\,K^{-1}}$ and the molar volumes are fixed per test case.\n\nThe log-prior is the sum of the Gaussian log-densities (ignoring the truncation normalizing constants, which are constant offsets irrelevant for MAP), and the log-posterior is the sum of the log-likelihood and log-prior. The MAP estimate is obtained by minimizing the negative log-posterior subject to bounds $\\alpha_{i} \\in [\\alpha_{\\min},\\alpha_{\\max}]$ and $\\beta_{i} \\in [\\beta_{\\min},\\beta_{\\max}]$, with $\\alpha_{\\min} = 50.0\\,\\mathrm{MPa}$, $\\alpha_{\\max} = 600.0\\,\\mathrm{MPa}$, $\\beta_{\\min} = 0.01\\,\\mathrm{MPa\\,K^{-1}}$, and $\\beta_{\\max} = 0.20\\,\\mathrm{MPa\\,K^{-1}}$. Multiple random restarts about the prior means help avoid local minima; we retain the best (lowest objective) solution.\n\nSynthetic data generation uses the same forward model but with the true parameters $(\\alpha_{i}^{\\star},\\beta_{i}^{\\star})$ to compute $y_{1}^{\\mathrm{model}}(T_{m};\\theta^{\\star})$, followed by the addition of independent Gaussian noise $\\varepsilon_{m} \\sim \\mathcal{N}(0,\\sigma_{y}^{2})$, with a fixed seed to ensure reproducibility. The Clausius–Clapeyron parameters are fixed to $A_{1} = 10.000$, $B_{1} = 3200.0$, $A_{2} = 9.200$, and $B_{2} = 2800.0$, with $\\ln$ the natural logarithm and $P_{i}^{\\mathrm{sat}}$ in $\\mathrm{bar}$. Although pressures do not enter the likelihood explicitly, they influence the composition prediction through the normalization in the bubble-point expression.\n\nFor each of the three test cases, the inference routine outputs an estimate $\\hat{\\theta}$, which we compare to the true $\\theta^{\\star}$ via component-wise relative errors $|\\hat{\\theta}_{j} - \\theta^{\\star}_{j}|/\\theta^{\\star}_{j}$. A case passes if all four relative errors are below the specified threshold for that case. The program aggregates the booleans in the prescribed single-line output format `[True,False,True]` style.\n\nThis framework integrates thermodynamic first principles (regular solution energetics, activity coefficients from excess chemical potentials, modified Raoult’s law) with Bayesian inference and energetically motivated priors (through the cohesive energy density connection to heats of vaporization), providing a robust and physically interpretable approach to temperature-dependent solubility-parameter inference from vapor–liquid equilibrium data.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.optimize import minimize\n\n# Fixed random seed for reproducibility of synthetic noise\nRNG = np.random.default_rng(1729)\n\n# Physical constants and model constants\nR = 8.314e-6  # MPa*m^3/(mol*K)\n# Clausius–Clapeyron parameters for ln P_sat (natural log), P in bar\nA1, B1 = 10.000, 3200.0\nA2, B2 = 9.200, 2800.0\n\n# Prior hyperparameters\nmu_alpha = 300.0  # MPa\nsigma_alpha = 100.0  # MPa\nsigma_beta = 0.03  # MPa/K\n\n# Bounds for parameters: alpha1, beta1, alpha2, beta2\nalpha_min, alpha_max = 50.0, 600.0\nbeta_min, beta_max = 0.01, 0.20\n\neps_delta2 = 1e-9  # MPa, safeguard for delta^2 positivity\n\n\ndef psat_ln(T, comp):\n    \"\"\"Natural log of saturation pressure in bar.\"\"\"\n    if comp == 1:\n        return A1 - B1 / T\n    else:\n        return A2 - B2 / T\n\n\ndef compute_activity_coeffs(T, x1, V1, V2, alpha1, beta1, alpha2, beta2):\n    \"\"\"\n    Compute gamma1, gamma2 using regular solution expressions:\n    ln γ1 = (V1/(R*T)) * φ2^2 * (δ1 - δ2)^2\n    ln γ2 = (V2/(R*T)) * φ1^2 * (δ1 - δ2)^2\n    \"\"\"\n    x2 = 1.0 - x1\n    # Volume fractions\n    Vm = x1 * V1 + x2 * V2\n    phi1 = (x1 * V1) / Vm\n    phi2 = (x2 * V2) / Vm\n\n    # Temperature-dependent solubility parameters\n    delta1_sq = max(eps_delta2, alpha1 - beta1 * T)\n    delta2_sq = max(eps_delta2, alpha2 - beta2 * T)\n    delta1 = np.sqrt(delta1_sq)\n    delta2 = np.sqrt(delta2_sq)\n    d12_sq = (delta1 - delta2) ** 2\n\n    ln_gamma1 = (V1 / (R * T)) * (phi2 ** 2) * d12_sq\n    ln_gamma2 = (V2 / (R * T)) * (phi1 ** 2) * d12_sq\n    return np.exp(ln_gamma1), np.exp(ln_gamma2)\n\n\ndef y1_model(Ts, x1, V1, V2, theta):\n    \"\"\"Compute y1 predictions for a sequence of temperatures.\"\"\"\n    alpha1, beta1, alpha2, beta2 = theta\n    y1s = []\n    for T in Ts:\n        gamma1, gamma2 = compute_activity_coeffs(T, x1, V1, V2, alpha1, beta1, alpha2, beta2)\n        P1_sat = np.exp(psat_ln(T, 1))\n        P2_sat = np.exp(psat_ln(T, 2))\n        x2 = 1.0 - x1\n        P_bub = x1 * gamma1 * P1_sat + x2 * gamma2 * P2_sat\n        y1 = (x1 * gamma1 * P1_sat) / P_bub\n        y1s.append(y1)\n    return np.array(y1s)\n\n\ndef neg_log_posterior(theta, Ts, y1_obs, x1, V1, V2, sigma_y):\n    \"\"\"Negative log-posterior: - (log-likelihood + log-prior).\"\"\"\n    alpha1, beta1, alpha2, beta2 = theta\n\n    # Enforce positivity via bounds; additional hard check\n    if (alpha1 = 0.0) or (alpha2 = 0.0) or (beta1 = 0.0) or (beta2 = 0.0):\n        return 1e300  # effectively infinite\n\n    y_pred = y1_model(Ts, x1, V1, V2, theta)\n    resid = (y1_obs - y_pred)\n    ll = -0.5 * np.sum((resid / sigma_y) ** 2) - 0.5 * len(Ts) * np.log(2.0 * np.pi * sigma_y ** 2)\n\n    # Priors: truncated Gaussians (omit normalization constants)\n    # alpha_i ~ N(mu_alpha, sigma_alpha^2), beta_i ~ N(R/V_i, sigma_beta^2)\n    beta1_mu = R / V1\n    beta2_mu = R / V2\n\n    lp_alpha = -0.5 * (((alpha1 - mu_alpha) / sigma_alpha) ** 2 + ((alpha2 - mu_alpha) / sigma_alpha) ** 2) \\\n               - 2.0 * np.log(sigma_alpha * np.sqrt(2.0 * np.pi))\n    lp_beta = -0.5 * (((beta1 - beta1_mu) / sigma_beta) ** 2 + ((beta2 - beta2_mu) / sigma_beta) ** 2) \\\n              - 2.0 * np.log(sigma_beta * np.sqrt(2.0 * np.pi))\n\n    lp = lp_alpha + lp_beta\n\n    return -(ll + lp)\n\n\ndef map_estimate(Ts, y1_obs, x1, V1, V2, sigma_y, n_restarts=8):\n    \"\"\"Compute MAP estimate with multiple random restarts.\"\"\"\n    bounds = [(alpha_min, alpha_max), (beta_min, beta_max),\n              (alpha_min, alpha_max), (beta_min, beta_max)]\n    best_val = np.inf\n    best_theta = None\n\n    # Prior means as central guesses\n    beta1_mu = R / V1\n    beta2_mu = R / V2\n    mean_guess = np.array([mu_alpha, beta1_mu, mu_alpha, beta2_mu], dtype=float)\n\n    for i in range(n_restarts):\n        # Randomize initial guess around prior means\n        init = mean_guess + RNG.normal(0.0, [30.0, 0.02, 30.0, 0.02])\n        # Project into bounds\n        init = np.array([\n            np.clip(init[0], alpha_min, alpha_max),\n            np.clip(init[1], beta_min, beta_max),\n            np.clip(init[2], alpha_min, alpha_max),\n            np.clip(init[3], beta_min, beta_max),\n        ])\n\n        res = minimize(\n            neg_log_posterior, init,\n            args=(Ts, y1_obs, x1, V1, V2, sigma_y),\n            method=\"L-BFGS-B\",\n            bounds=bounds,\n            options={\"maxiter\": 1000, \"ftol\": 1e-12}\n        )\n        if res.fun  best_val and res.success:\n            best_val = res.fun\n            best_theta = res.x\n\n    # As a fallback, if optimization didn't succeed in any restart, return the prior means projected\n    if best_theta is None:\n        best_theta = mean_guess\n        best_theta[0] = np.clip(best_theta[0], alpha_min, alpha_max)\n        best_theta[1] = np.clip(best_theta[1], beta_min, beta_max)\n        best_theta[2] = np.clip(best_theta[2], alpha_min, alpha_max)\n        best_theta[3] = np.clip(best_theta[3], beta_min, beta_max)\n\n    return best_theta\n\n\ndef generate_synthetic_data(Ts, x1, V1, V2, true_theta, sigma_y):\n    \"\"\"Generate noisy y1 observations using the forward model and fixed RNG.\"\"\"\n    y_clean = y1_model(Ts, x1, V1, V2, true_theta)\n    noise = RNG.normal(0.0, sigma_y, size=len(Ts))\n    return y_clean + noise\n\n\ndef relative_errors(est, true):\n    \"\"\"Component-wise relative absolute error.\"\"\"\n    return np.abs((est - true) / true)\n\n\ndef solve():\n    # Define the test cases from the problem statement.\n    # Each case: dict with Ts, x1, V1, V2, true_theta, sigma_y, rel_tol\n    test_cases = [\n        {\n            \"Ts\": np.array([330.0, 340.0, 350.0, 360.0]),\n            \"x1\": 0.5,\n            \"V1\": 1.0e-4,\n            \"V2\": 1.0e-4,\n            \"true_theta\": np.array([340.0, 0.080, 260.0, 0.060]),\n            \"sigma_y\": 0.005,\n            \"rel_tol\": 0.20,\n        },\n        {\n            \"Ts\": np.array([330.0, 340.0, 350.0, 360.0]),\n            \"x1\": 0.5,\n            \"V1\": 1.0e-4,\n            \"V2\": 1.0e-4,\n            \"true_theta\": np.array([300.0, 0.080, 300.0, 0.080]),\n            \"sigma_y\": 0.002,\n            \"rel_tol\": 0.35,\n        },\n        {\n            \"Ts\": np.array([330.0, 345.0, 360.0]),\n            \"x1\": 0.3,\n            \"V1\": 1.2e-4,\n            \"V2\": 0.8e-4,\n            \"true_theta\": np.array([370.0, 0.090, 240.0, 0.050]),\n            \"sigma_y\": 0.005,\n            \"rel_tol\": 0.25,\n        },\n    ]\n\n    results = []\n    for case in test_cases:\n        Ts = case[\"Ts\"]\n        x1 = case[\"x1\"]\n        V1 = case[\"V1\"]\n        V2 = case[\"V2\"]\n        true_theta = case[\"true_theta\"]\n        sigma_y = case[\"sigma_y\"]\n        rel_tol = case[\"rel_tol\"]\n\n        # Generate synthetic observations\n        y1_obs = generate_synthetic_data(Ts, x1, V1, V2, true_theta, sigma_y)\n\n        # MAP estimation\n        theta_hat = map_estimate(Ts, y1_obs, x1, V1, V2, sigma_y, n_restarts=10)\n\n        # Evaluate relative error pass criterion\n        rel_errs = relative_errors(theta_hat, true_theta)\n        passed = bool(np.all(rel_errs = rel_tol))\n        results.append(passed)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "2665948"}]}