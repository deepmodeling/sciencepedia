{"hands_on_practices": [{"introduction": "Understanding the relationship between microscopic collision events and macroscopic reaction rates is a cornerstone of chemical kinetics. This first exercise guides you through the fundamental derivation of the bimolecular rate coefficient, $k(T)$, by thermally averaging the cross section over the Maxwell-Boltzmann distribution of relative energies [@problem_id:2667867]. By considering the simplest possible case—an energy-independent, hard-sphere cross section $\\sigma(E) = \\sigma_0$—you will see precisely how the characteristic $\\sqrt{T}$ dependence of the rate coefficient arises from the statistical mechanics of thermal motion.", "problem": "A dilute binary gas mixture of species $A$ and $B$ at thermodynamic equilibrium and absolute temperature $T$ is considered. Let the masses be $m_A$ and $m_B$, and let the reduced mass be $\\mu = \\frac{m_A m_B}{m_A + m_B}$. Collisions are assumed to be hard-sphere-like with an energy-independent reactive cross section $\\sigma(E) = \\sigma_0$, where $\\sigma_0$ is a constant. The bimolecular rate coefficient $k(T)$ is defined as the thermal average of the product of cross section and relative speed over the Maxwell–Boltzmann (MB) distribution of relative speeds for particles with reduced mass $\\mu$:\n$$\nk(T) \\equiv \\int_{0}^{\\infty} \\sigma(v)\\, v\\, f_{\\mathrm{rel}}(v;T)\\, dv,\n$$\nwhere $v$ is the relative speed and $f_{\\mathrm{rel}}(v;T)$ is the MB distribution of relative speeds for the reduced-mass system,\n$$\nf_{\\mathrm{rel}}(v;T) = 4\\pi \\left(\\frac{\\mu}{2\\pi k_B T}\\right)^{3/2} v^{2} \\exp\\!\\left(-\\frac{\\mu v^{2}}{2 k_B T}\\right).\n$$\nStarting from these definitions only, evaluate the integral for the special case $\\sigma(v) = \\sigma_0$ and express the result in the form\n$$\nk(T) = C\\, \\sigma_0\\, \\sqrt{\\frac{k_B T}{\\mu}}.\n$$\nReport the dimensionless prefactor $C$ as a closed-form analytic expression. No numerical approximation is required. Your final reported quantity is dimensionless, so no units are to be reported.", "solution": "The problem as stated is scientifically sound, well-posed, and self-contained. It is a standard problem in the kinetic theory of gases, requiring the evaluation of a rate coefficient from basic principles. Therefore, we may proceed with the solution.\n\nThe bimolecular rate coefficient $k(T)$ is defined as the thermal average of the product of the reaction cross section $\\sigma(v)$ and the relative speed $v$. The definition provided is:\n$$\nk(T) = \\int_{0}^{\\infty} \\sigma(v)\\, v\\, f_{\\mathrm{rel}}(v;T)\\, dv\n$$\nThe problem specifies a hard-sphere model where the cross section is independent of energy, and thus independent of relative speed: $\\sigma(v) = \\sigma_0$, where $\\sigma_0$ is a constant. Substituting this into the definition of $k(T)$, we obtain:\n$$\nk(T) = \\int_{0}^{\\infty} \\sigma_0\\, v\\, f_{\\mathrm{rel}}(v;T)\\, dv\n$$\nSince $\\sigma_0$ is a constant, it can be factored out of the integral:\n$$\nk(T) = \\sigma_0 \\int_{0}^{\\infty} v\\, f_{\\mathrm{rel}}(v;T)\\, dv\n$$\nThe integral term, $\\int_{0}^{\\infty} v\\, f_{\\mathrm{rel}}(v;T)\\, dv$, is precisely the definition of the mean relative speed, denoted as $\\langle v \\rangle$. Thus, for a constant cross section, the rate coefficient is simply the product of the cross section and the mean relative speed:\n$$\nk(T) = \\sigma_0 \\langle v \\rangle\n$$\nOur task is to evaluate $\\langle v \\rangle$ using the provided Maxwell-Boltzmann distribution of relative speeds, $f_{\\mathrm{rel}}(v;T)$.\n$$\nf_{\\mathrm{rel}}(v;T) = 4\\pi \\left(\\frac{\\mu}{2\\pi k_B T}\\right)^{3/2} v^{2} \\exp\\!\\left(-\\frac{\\mu v^{2}}{2 k_B T}\\right)\n$$\nWe substitute this expression into the integral for $\\langle v \\rangle$:\n$$\n\\langle v \\rangle = \\int_{0}^{\\infty} v \\left[ 4\\pi \\left(\\frac{\\mu}{2\\pi k_B T}\\right)^{3/2} v^{2} \\exp\\!\\left(-\\frac{\\mu v^{2}}{2 k_B T}\\right) \\right] dv\n$$\nWe can group the constants and combine the powers of $v$:\n$$\n\\langle v \\rangle = 4\\pi \\left(\\frac{\\mu}{2\\pi k_B T}\\right)^{3/2} \\int_{0}^{\\infty} v^3 \\exp\\!\\left(-\\frac{\\mu v^{2}}{2 k_B T}\\right) dv\n$$\nTo evaluate the integral, let us introduce a substitution. Let $a = \\frac{\\mu}{2 k_B T}$. The integral becomes:\n$$\nI = \\int_{0}^{\\infty} v^3 \\exp(-av^2) dv\n$$\nThis is a standard form of a Gaussian integral. We can solve it by a change of variables. Let $x = av^2$. Then $v^2 = x/a$, and $v = \\sqrt{x/a}$. The differential is $dv = \\frac{1}{\\sqrt{a}} \\frac{1}{2\\sqrt{x}} dx = \\frac{1}{2\\sqrt{a}} x^{-1/2} dx$. The limits of integration remain $0$ to $\\infty$. Substituting these into the integral $I$:\n$$\nI = \\int_{0}^{\\infty} \\left(\\frac{x}{a}\\right)^{3/2} \\exp(-x) \\left(\\frac{1}{2\\sqrt{a}} x^{-1/2}\\right) dx\n$$\nSimplifying the terms involving $a$ and $x$:\n$$\nI = \\frac{1}{a^{3/2}} \\frac{1}{2a^{1/2}} \\int_{0}^{\\infty} x^{3/2} x^{-1/2} \\exp(-x) dx = \\frac{1}{2a^2} \\int_{0}^{\\infty} x^1 \\exp(-x) dx\n$$\nThe remaining integral is the definition of the Gamma function, $\\Gamma(z) = \\int_0^{\\infty} t^{z-1} e^{-t} dt$. For our case, $z-1=1$, which means $z=2$.\n$$\n\\int_{0}^{\\infty} x \\exp(-x) dx = \\Gamma(2) = 1! = 1\n$$\nTherefore, the integral $I$ evaluates to:\n$$\nI = \\frac{1}{2a^2}\n$$\nNow, substitute back the expression for $a = \\frac{\\mu}{2k_B T}$:\n$$\nI = \\frac{1}{2\\left(\\frac{\\mu}{2 k_B T}\\right)^2} = \\frac{(2k_B T)^2}{2\\mu^2} = \\frac{4(k_B T)^2}{2\\mu^2} = \\frac{2(k_B T)^2}{\\mu^2}\n$$\nNow we can complete the calculation for $\\langle v \\rangle$:\n$$\n\\langle v \\rangle = 4\\pi \\left(\\frac{\\mu}{2\\pi k_B T}\\right)^{3/2} I = 4\\pi \\frac{\\mu^{3/2}}{(2\\pi)^{3/2}(k_B T)^{3/2}} \\left( \\frac{2(k_B T)^2}{\\mu^2} \\right)\n$$\nLet us simplify the prefactors:\n$4\\pi \\times (2\\pi)^{-3/2} = 2^2 \\pi^1 \\times 2^{-3/2} \\pi^{-3/2} = 2^{2 - 3/2} \\pi^{1-3/2} = 2^{1/2} \\pi^{-1/2} = \\sqrt{\\frac{2}{\\pi}}$.\nThen\n$$\n\\langle v \\rangle = \\left( \\sqrt{\\frac{2}{\\pi}} \\frac{\\mu^{3/2}}{(k_B T)^{3/2}} \\right) \\left( \\frac{2(k_B T)^2}{\\mu^2} \\right)\n$$\n$$\n\\langle v \\rangle = 2\\sqrt{\\frac{2}{\\pi}} \\mu^{(3/2-2)} (k_B T)^{(2-3/2)} = \\frac{2\\sqrt{2}}{\\sqrt{\\pi}} \\mu^{-1/2} (k_B T)^{1/2}\n$$\nSo the mean relative speed is $\\langle v \\rangle = \\sqrt{\\frac{8k_B T}{\\pi \\mu}}$.\n\nNow, we construct the rate coefficient $k(T) = \\sigma_0 \\langle v \\rangle$:\n$$\nk(T) = \\sigma_0 \\left( \\frac{2\\sqrt{2}}{\\sqrt{\\pi}} \\sqrt{\\frac{k_B T}{\\mu}} \\right)\n$$\nThe problem requires this result to be in the form $k(T) = C\\, \\sigma_0\\, \\sqrt{\\frac{k_B T}{\\mu}}$.\nBy comparison, the dimensionless prefactor $C$ is:\n$$\nC = \\frac{2\\sqrt{2}}{\\sqrt{\\pi}}\n$$\nThis can be written more compactly as:\n$$\nC = \\sqrt{\\frac{8}{\\pi}}\n$$\nThis is the final analytical expression for the prefactor.", "answer": "$$\n\\boxed{\\sqrt{\\frac{8}{\\pi}}}\n$$", "id": "2667867"}, {"introduction": "Real-world reaction cross sections are rarely constant; they exhibit a strong dependence on collision energy. This practice delves into the quantum mechanical origins of this energy dependence using the partial-wave expansion, a central tool in scattering theory [@problem_id:2667873]. You will implement a numerical model to compute the total reaction cross section $\\sigma_{\\text{reac}}(E)$ by summing the contributions from individual angular momentum states, or partial waves, where each is governed by its own centrifugal barrier, providing a direct look at how quantum mechanics shapes reactivity.", "problem": "Consider a bimolecular scattering problem modeled by a central potential in three spatial dimensions, where reaction occurs with a partial-wave-dependent probability. For a given collision energy $E$ and orbital angular momentum quantum number $l$, the model reaction probability is $P_l(E)=\\exp\\!\\left[-\\left(\\dfrac{E_l}{E}\\right)^{\\alpha}\\right]$, with a centrifugal barrier energy modeled by $E_l=\\dfrac{\\hbar^2\\,(l+\\tfrac{1}{2})^2}{2\\,\\mu\\,r_c^2}$. Here, $\\mu$ is the reduced mass of the reactants, $r_c$ is a characteristic length scale at which the centrifugal barrier is evaluated, $\\hbar$ is the reduced Planck constant, and $\\alpha>0$ is a sharpness parameter controlling the onset of reactivity above the barrier. The total reaction cross section $\\sigma_{\\text{reac}}(E)$ is to be computed from first principles of partial-wave scattering. As a well-tested starting point, the total reaction cross section in three dimensions for a central potential is given by the partial-wave sum\n$$\n\\sigma_{\\text{reac}}(E)=\\frac{\\pi}{k(E)^2}\\sum_{l=0}^{\\infty}(2l+1)\\,P_l(E),\n$$\nwhere $k(E)=\\sqrt{2\\,\\mu\\,E}/\\hbar$ is the wave number of the relative motion. All quantities must be treated in the International System of Units (SI) internally. The input energy values in the test suite are tabulated in electronvolts (eV) and must be converted to joules using $1\\,\\text{eV}=1.602176634\\times 10^{-19}\\,\\text{J}$. The reduced mass inputs in the test suite are given in atomic mass units (amu) and must be converted to kilograms using $1\\,\\text{amu}=1.66053906660\\times 10^{-27}\\,\\text{kg}$. The length scale inputs $r_c$ in the test suite are given in angstroms and must be converted to meters using $1\\,\\AA=1.0\\times 10^{-10}\\,\\text{m}$. Use $\\hbar=1.054571817\\times 10^{-34}\\,\\text{J}\\cdot\\text{s}$ and $\\pi=3.141592653589793$.\n\nYour task is to write a complete program that:\n- Computes $\\sigma_{\\text{reac}}(E)$ numerically as a truncated sum by including partial waves $l=0,1,2,\\dots,l_{\\max}$ with a principled truncation based on the criterion that for a small probability threshold $P_{\\text{th}}$, the largest included $l$ satisfies approximately $\\left(\\dfrac{E_{l_{\\max}}}{E}\\right)^{\\alpha}\\lesssim -\\ln P_{\\text{th}}$. Implement this by first estimating\n$$\nl_{\\text{cut}}=\\max\\!\\left\\{0,\\ \\sqrt{\\frac{E}{E_c}}\\ \\left[-\\ln P_{\\text{th}}\\right]^{\\frac{1}{2\\alpha}}-\\frac{1}{2}\\right\\},\\quad E_c=\\frac{\\hbar^2}{2\\,\\mu\\,r_c^2},\n$$\nand then summing up to $l_{\\max}=\\min\\{\\lceil l_{\\text{cut}}+m\\rceil,L_{\\text{cap}}\\}$, where $m$ is a small safety margin and $L_{\\text{cap}}$ is a hard cap to ensure bounded computation time. Use $P_{\\text{th}}=10^{-12}$, $m=20$, and $L_{\\text{cap}}=2000$.\n- Analyzes the local energy dependence of $\\sigma_{\\text{reac}}(E)$ by computing the logarithmic derivative $s(E)=\\dfrac{d\\ln \\sigma_{\\text{reac}}}{d\\ln E}$ numerically using a symmetric multiplicative perturbation. Specifically, for a given small $\\delta$ define $\\rho=1+\\delta$, $E_{+}=\\rho\\,E$, and $E_{-}=E/\\rho$, and approximate\n$$\ns(E)\\approx\\frac{\\ln \\sigma_{\\text{reac}}(E_{+})-\\ln \\sigma_{\\text{reac}}(E_{-})}{\\ln E_{+}-\\ln E_{-}}.\n$$\nIn all evaluations, use the same truncation policy at $E_{+}$ and $E_{-}$.\n- Reports $\\sigma_{\\text{reac}}(E)$ in square meters ($\\text{m}^2$) and $s(E)$ as a dimensionless quantity.\n\nUse the following test suite of parameter sets. Each test case is a tuple $(E_{\\text{eV}},\\alpha,\\mu_{\\text{amu}},r_c^{(\\text{\\AA})},\\delta)$ with the values:\n- Case A (happy path, moderate energy): $(1.0\\times 10^{-2},\\ 1.0,\\ 20.0,\\ 5.0,\\ 0.05)$\n- Case B (higher energy): $(1.0\\times 10^{-1},\\ 1.0,\\ 20.0,\\ 5.0,\\ 0.05)$\n- Case C (sharper onset): $(1.0\\times 10^{-2},\\ 2.0,\\ 20.0,\\ 5.0,\\ 0.05)$\n- Case D (softer onset): $(1.0\\times 10^{-3},\\ 0.5,\\ 40.0,\\ 5.0,\\ 0.05)$\n- Case E (low energy edge): $(1.0\\times 10^{-6},\\ 1.0,\\ 20.0,\\ 5.0,\\ 0.05)$\n- Case F (mass sensitivity): $(1.0\\times 10^{-2},\\ 1.0,\\ 10.0,\\ 5.0,\\ 0.05)$\n\nYour program must:\n- For each case, compute $\\sigma_{\\text{reac}}(E)$ in $\\text{m}^2$ and $s(E)$ (dimensionless) using the specified truncation and numerical differentiation scheme.\n- Produce a single line of output containing the list of results for all cases as a comma-separated list enclosed in square brackets, where each case result is itself a two-element list $[\\sigma_{\\text{reac}}(E),s(E)]$. Both numbers must be printed in scientific notation with exactly six significant digits. For example, the output format must look like $[[x_1,y_1],[x_2,y_2],\\dots]$ with each $x_i$ and $y_i$ printed using the format code with six significant digits in scientific notation.\n\nAssumptions and constraints to ensure scientific realism and solvability:\n- Use only the above-stated physically standard relations for $k(E)$, $E_l$, and the partial-wave sum.\n- Assume $P_l(E)$ depends on $E_l$ only through the given model $P_l(E)=\\exp\\!\\left[-\\left(\\dfrac{E_l}{E}\\right)^{\\alpha}\\right]$ with $\\alpha&gt;0$.\n- Ensure numerical stability by guarding $\\ln \\sigma_{\\text{reac}}$ evaluations with a minimum positive floor when necessary to avoid taking the logarithm of zero due to underflow, but choose this floor small enough not to affect the six-significant-digit outputs within the given test suite.\n\nThe expected output is a single line of the form $[[\\sigma_1,s_1],[\\sigma_2,s_2],\\dots,[\\sigma_6,s_6]]$ with all $\\sigma_i$ in $\\text{m}^2$ and all $s_i$ dimensionless, each number given in scientific notation with exactly six significant digits. No other text should be printed.", "solution": "The problem statement has been subjected to rigorous validation and is found to be valid. It is scientifically grounded, well-posed, and objective. The problem is a standard exercise in computational quantum scattering theory, based on established first principles and providing a clear, self-contained set of instructions for the numerical calculation. There are no contradictions, ambiguities, or scientifically unsound premises. I will therefore proceed with a complete solution.\n\nThe task is to compute the total reaction cross section $\\sigma_{\\text{reac}}(E)$ and its logarithmic derivative with respect to energy, $s(E)$, for a bimolecular collision process. The methodology is rooted in the partial-wave expansion of the scattering cross section in quantum mechanics.\n\nThe total reaction cross section is given by the sum over all partial waves, indexed by the orbital angular momentum quantum number $l$:\n$$\n\\sigma_{\\text{reac}}(E) = \\frac{\\pi}{k(E)^2} \\sum_{l=0}^{\\infty} (2l+1) P_l(E)\n$$\nHere, $k(E) = \\frac{\\sqrt{2\\mu E}}{\\hbar}$ is the wave number corresponding to the relative kinetic energy $E$ and reduced mass $\\mu$. The term $(2l+1)$ accounts for the degeneracy of the magnetic quantum number $m_l$. The reaction probability for a given partial wave $l$ is described by the model function:\n$$\nP_l(E) = \\exp\\left[-\\left(\\frac{E_l}{E}\\right)^{\\alpha}\\right]\n$$\nThis probability depends on the ratio of the centrifugal barrier energy $E_l$ to the collision energy $E$. The parameter $\\alpha>0$ controls the sharpness of the reaction threshold. The centrifugal barrier energy $E_l$ is given by the standard quantum mechanical expression, evaluated at a characteristic radius $r_c$:\n$$\nE_l = \\frac{\\hbar^2 (l+\\frac{1}{2})^2}{2\\mu r_c^2}\n$$\nThe term $(l+\\frac{1}{2})^2$ is the Langer modification, a common semi-classical correction.\n\nThe implementation proceeds via the following structured, principle-based steps:\n\n$1$. **Unit Consistency**: A system of units must be consistently applied. All calculations are performed in the International System of Units (SI). Input parameters provided in non-SI units (electronvolts for energy, atomic mass units for mass, and angstroms for length) are converted to their SI counterparts (Joules, kilograms, and meters, respectively) at the outset, using the provided conversion factors. All physical constants, notably the reduced Planck constant $\\hbar$ and $\\pi$, are used in their SI values.\n\n$2$. **Cross Section Calculation**: A core function is designed to compute $\\sigma_{\\text{reac}}(E)$ for a given set of physical parameters $\\{E, \\alpha, \\mu, r_c\\}$ in SI units. The infinite sum over $l$ is computationally infeasible and must be truncated. The problem specifies a principled truncation scheme.\n    - The sum is terminated at an upper limit $l_{\\max}$. This limit is determined such that the contribution from higher partial waves is negligible, specifically where $P_l(E)$ drops below a threshold $P_{\\text{th}} = 10^{-12}$.\n    - This leads to an estimate for a cutoff angular momentum, $l_{\\text{cut}}$, derived from the condition $P_{l_{\\text{cut}}}(E) \\approx P_{\\text{th}}$:\n    $$\n    l_{\\text{cut}} = \\max\\left\\{0, \\sqrt{\\frac{E}{E_c}} \\left[-\\ln P_{\\text{th}}\\right]^{\\frac{1}{2\\alpha}} - \\frac{1}{2}\\right\\}\n    $$\n    where $E_c = \\frac{\\hbar^2}{2\\mu r_c^2}$ is a characteristic energy scale associated with the centrifugal barrier for $l=0$.\n    - A safety margin $m=20$ is added, and a hard cap $L_{\\text{cap}}=2000$ is imposed to yield the final summation limit: $l_{\\max} = \\min\\{\\lceil l_{\\text{cut}}+m \\rceil, L_{\\text{cap}}\\}$.\n    - The summation from $l=0$ to $l_{\\max}$ is implemented efficiently using vector operations provided by the `numpy` library. An array of $l$ values is generated, and the corresponding arrays for $E_l$, $P_l(E)$, and the summand $(2l+1)P_l(E)$ are computed element-wise, followed by a final sum reduction.\n    - The final cross section is then calculated as:\n    $$\n    \\sigma_{\\text{reac}}(E) = \\frac{\\pi \\hbar^2}{2\\mu E} \\sum_{l=0}^{l_{\\max}} (2l+1) \\exp\\left[-\\left(\\frac{E_c(l+\\frac{1}{2})^2}{E}\\right)^{\\alpha}\\right]\n    $$\n\n$3$. **Logarithmic Derivative Calculation**: The local energy dependence of the cross section is quantified by the dimensionless logarithmic derivative $s(E) = \\frac{d\\ln\\sigma_{\\text{reac}}}{d\\ln E}$. This is computed numerically using a symmetric finite difference scheme on a logarithmic energy scale, as specified.\n    - For a small parameter $\\delta$, perturbed energies are defined as $E_{+} = E(1+\\delta)$ and $E_{-} = E/(1+\\delta)$.\n    - The derivative is approximated by:\n    $$\n    s(E) \\approx \\frac{\\ln \\sigma_{\\text{reac}}(E_{+}) - \\ln \\sigma_{\\text{reac}}(E_{-})}{\\ln E_{+} - \\ln E_{-}} = \\frac{\\ln[\\sigma_{\\text{reac}}(E_{+}) / \\sigma_{\\text{reac}(E_{-})}]}{2 \\ln(1+\\delta)}\n    $$\n    - The cross sections $\\sigma_{\\text{reac}}(E_{+})$ and $\\sigma_{\\text{reac}}(E_{-})$ are evaluated by independent calls to the core cross section function. This correctly applies the energy-dependent truncation policy, re-calculating $l_{\\max}$ for each of the perturbed energies, which is crucial for an accurate derivative.\n    - To ensure numerical stability, a small positive floor is added to the cross section values before taking the logarithm, preventing errors should $\\sigma_{\\text{reac}}$ underflow to zero, although this is not expected for the given test cases with double-precision floating-point arithmetic.\n\n$4$. **Program Structure**: The final program encapsulates this logic. It defines the necessary physical and numerical constants, iterates through the provided test suite, performs the calculations for each case, and formats the results ($\\sigma_{\\text{reac}}(E)$ in $\\text{m}^2$ and dimensionless $s(E)$) into the precisely specified output string, with each number given in scientific notation to six significant digits.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes reaction cross sections and their logarithmic energy derivatives\n    for a set of test cases based on a partial-wave scattering model.\n    \"\"\"\n    # Physical and numerical constants in SI units\n    HBAR = 1.054571817e-34  # J*s\n    PI = 3.141592653589793\n\n    # Conversion factors\n    EV_TO_J = 1.602176634e-19\n    AMU_TO_KG = 1.66053906660e-27\n    ANGSTROM_TO_M = 1.0e-10\n\n    # Numerical parameters for truncation and differentiation\n    P_TH = 1.0e-12\n    M_SAFETY = 20\n    L_CAP = 2000\n\n    # Define the test cases from the problem statement.\n    # Each case is a tuple (E_eV, alpha, mu_amu, rc_A, delta)\n    test_cases = [\n        (1.0e-2, 1.0, 20.0, 5.0, 0.05),  # Case A\n        (1.0e-1, 1.0, 20.0, 5.0, 0.05),  # Case B\n        (1.0e-2, 2.0, 20.0, 5.0, 0.05),  # Case C\n        (1.0e-3, 0.5, 40.0, 5.0, 0.05),  # Case D\n        (1.0e-6, 1.0, 20.0, 5.0, 0.05),  # Case E\n        (1.0e-2, 1.0, 10.0, 5.0, 0.05),  # Case F\n    ]\n\n    def calculate_sigma(E, alpha, mu, rc):\n        \"\"\"\n        Calculates the total reaction cross section for a given energy\n        and model parameters, all in SI units.\n        \"\"\"\n        if E <= 0:\n            return 0.0\n\n        # Characteristic energy scale in SI units\n        Ec = HBAR**2 / (2 * mu * rc**2)\n\n        # Determine l_max for sum truncation based on the specified policy\n        log_P_th = np.log(P_TH)  # This is negative\n        \n        ratio = E / Ec\n        if ratio <= 0:  # Guard against negative ratio due to precision\n            l_cut = 0.0\n        else:\n            l_cut = np.sqrt(ratio) * (-log_P_th)**(1.0 / (2.0 * alpha)) - 0.5\n\n        l_cut = max(0.0, l_cut)\n        l_max = int(min(np.ceil(l_cut + M_SAFETY), L_CAP))\n\n        # Vectorized calculation of the partial wave sum\n        l_values = np.arange(l_max + 1, dtype=float)\n        \n        # Centrifugal barrier energies\n        El_values = Ec * (l_values + 0.5)**2\n        \n        # Reaction probabilities\n        exponent = (El_values / E)**alpha\n        Pl_values = np.exp(-exponent)\n        \n        # Summand terms\n        sum_terms = (2 * l_values + 1) * Pl_values\n        total_sum = np.sum(sum_terms)\n        \n        # Final cross section calculation\n        prefactor = (PI * HBAR**2) / (2 * mu * E)\n        sigma = prefactor * total_sum\n        \n        return sigma\n\n    results = []\n    for case in test_cases:\n        E_eV, alpha, mu_amu, rc_A, delta = case\n\n        # Convert input parameters to SI units\n        E_J = E_eV * EV_TO_J\n        mu_kg = mu_amu * AMU_TO_KG\n        rc_m = rc_A * ANGSTROM_TO_M\n\n        # Calculate sigma at the central energy E\n        sigma_E = calculate_sigma(E_J, alpha, mu_kg, rc_m)\n        \n        # Define perturbed energies for numerical differentiation\n        rho = 1.0 + delta\n        E_plus = E_J * rho\n        E_minus = E_J / rho\n        \n        # Calculate sigma at perturbed energies\n        sigma_plus = calculate_sigma(E_plus, alpha, mu_kg, rc_m)\n        sigma_minus = calculate_sigma(E_minus, alpha, mu_kg, rc_m)\n        \n        # Calculate logarithmic derivative s(E)\n        # Use a small floor to prevent log(0) from underflow\n        sigma_floor = 1e-99\n        log_sigma_plus = np.log(sigma_plus + sigma_floor)\n        log_sigma_minus = np.log(sigma_minus + sigma_floor)\n        \n        denominator = 2.0 * np.log(rho)\n        s_E = (log_sigma_plus - log_sigma_minus) / denominator\n        \n        results.append([sigma_E, s_E])\n\n    # Format the final output string as specified\n    formatted_pairs = [f\"[{s:.5e},{d:.5e}]\" for s, d in results]\n    final_output = f\"[{','.join(formatted_pairs)}]\"\n    \n    # Final print statement in the exact required format.\n    print(final_output)\n\nsolve()\n```", "id": "2667873"}, {"introduction": "The final step in our journey connects theory and computation to practical application: calculating a thermal rate coefficient from a set of tabulated cross section data. This common task in chemical physics requires robust numerical methods, as the underlying integral often resists simple analytic solution [@problem_id:2667912]. In this exercise, you will implement the highly efficient Gauss-Laguerre quadrature method, which is specifically designed to handle the Boltzmann weighting factor, and learn to navigate the practicalities of data interpolation and numerical error estimation to complete the workflow from a discrete $\\sigma(E)$ to a continuous $k(T)$.", "problem": "You are given the task of computing the thermal bimolecular rate coefficient $k(T)$ for a gas-phase reaction from a tabulated energy-dependent reaction cross section $\\sigma(E)$ provided on a nonuniform energy grid. Begin from the following foundational base:\n- The definition of the thermal bimolecular rate coefficient as the average of $\\sigma(v) v$ over the Maxwell–Boltzmann distribution of relative speeds for two colliding species with reduced mass $\\mu$.\n- The change of variables between relative speed $v$ and relative translational energy $E$, namely $E = \\tfrac{1}{2} \\mu v^2$.\n- The Boltzmann factor for the relative translational energy in thermal equilibrium at temperature $T$.\n\nBy combining these elements and performing an appropriate change of variables that maps the integral to one with the canonical Laguerre weight $\\exp(-x)$ in the dimensionless energy $x = E/(k_{\\mathrm{B}} T)$, derive a computational procedure that uses Gauss–Laguerre quadrature to approximate $k(T)$ directly from $\\sigma(E)$, where $k_{\\mathrm{B}}$ is the Boltzmann constant. In your algorithm, treat $\\sigma(E)$ as only known at a finite set of tabulated, nonuniform energy nodes $\\{E_i\\}_{i=0}^{N}$ with corresponding values $\\{\\sigma_i\\}_{i=0}^{N}$ and evaluate $\\sigma$ at off-grid points by piecewise-linear interpolation in $E$; outside the tabulated range, define $\\sigma(E)$ by nearest-neighbor extension to the closest tabulated endpoint.\n\nYou must also provide a numerical error estimate for the Gauss–Laguerre quadrature. Do so by computing the approximation with two different numbers of quadrature nodes and taking the absolute difference between the two approximations as an estimate of the total numerical error due to quadrature and interpolation. For the test suite cases below, also provide the true absolute error by comparing against an analytic reference derived from the same foundational base and the given $\\sigma(E)$ model.\n\nPhysical units and constants:\n- Use $k_{\\mathrm{B}} = 1.380649 \\times 10^{-23}$ J/K.\n- Energy $E$ must be in joules (J), cross section $\\sigma$ in square meters (m$^2$), reduced mass $\\mu$ in kilograms (kg), temperature $T$ in kelvins (K), and the rate coefficient $k(T)$ in cubic meters per second (m$^3$/s).\n- Express the final $k(T)$ values and error estimates in m$^3$/s. Round each reported float to six significant digits.\n\nGauss–Laguerre quadrature:\n- Use the standard Gauss–Laguerre rule for $\\int_{0}^{\\infty} f(x) \\mathrm{e}^{-x} \\,\\mathrm{d}x$ with $n$ nodes $\\{x_j, w_j\\}_{j=1}^{n}$, where $x_j$ are the nodes and $w_j$ the weights.\n- Adapt your integrand so that the Boltzmann weight in energy space is absorbed into the Laguerre weight $\\mathrm{e}^{-x}$.\n- Use two node counts $n \\in \\{32, 64\\}$; use the difference between the $n=64$ and $n=32$ results as the estimated numerical error.\n\nInterpolation of $\\sigma(E)$:\n- Use piecewise-linear interpolation on the tabulated nonuniform grid $\\{(E_i,\\sigma_i)\\}$ to evaluate $\\sigma$ at energies required by quadrature.\n- For $E$ smaller than the smallest tabulated $E_i$, use $\\sigma(E) = \\sigma_0$ (the first tabulated value). For $E$ larger than the largest tabulated $E_i$, use $\\sigma(E) = \\sigma_N$ (the last tabulated value).\n\nTest suite:\nImplement your algorithm for the following three cases. For each case, construct the tabulated nonuniform grid as specified, evaluate the model $\\sigma(E)$ at the grid nodes to form the tabulated data, and then compute $k(T)$ using Gauss–Laguerre quadrature with $n=32$ and $n=64$ nodes, using linear interpolation from the tabulated data. For each case, also compute the analytic reference $k_{\\mathrm{ref}}(T)$ implied by the model $\\sigma(E)$ and report the true absolute error as the absolute difference between the $n=64$ result and the analytic reference.\n\nConstants common to all cases:\n- Use $k_{\\mathrm{B}} = 1.380649 \\times 10^{-23}$ J/K.\n- Use the conversion $1\\,\\mathrm{eV} = 1.602176634 \\times 10^{-19}\\,\\mathrm{J}$.\n\nCase A (constant cross section):\n- Parameters: $\\mu = 1.0 \\times 10^{-26}$ kg, $T = 500$ K, $\\sigma_0 = 2.0 \\times 10^{-19}$ m$^2$.\n- Model: $\\sigma(E) = \\sigma_0$ for all $E \\ge 0$.\n- Tabulation grid: $N = 120$, $E_{\\max} = 60\\,k_{\\mathrm{B}} T$, $E_i = E_{\\max} \\left(\\frac{i}{N}\\right)^2$ for $i=0,1,\\dots,N$, $\\sigma_i = \\sigma_0$.\n- Analytic reference: derive $k_{\\mathrm{ref}}(T)$ for constant $\\sigma(E)$.\n\nCase B (threshold step cross section):\n- Parameters: $\\mu = 5.0 \\times 10^{-26}$ kg, $T = 1000$ K, $\\sigma_1 = 5.0 \\times 10^{-20}$ m$^2$, $E_0 = 0.1$ eV.\n- Model: $\\sigma(E) = 0$ for $0 \\le E < E_0$, and $\\sigma(E) = \\sigma_1$ for $E \\ge E_0$.\n- Tabulation grid: Let $E_{\\max} = 80\\,k_{\\mathrm{B}} T$. Build two nonuniform segments and merge:\n  1. Low-energy segment: $N_{\\mathrm{low}} = 160$, $E^{\\mathrm{low}}_i = 2 E_0 \\left(\\frac{i}{N_{\\mathrm{low}}}\\right)^2$, $i=0,1,\\dots,N_{\\mathrm{low}}$.\n  2. High-energy segment: $N_{\\mathrm{high}} = 160$, $E^{\\mathrm{high}}_j = 2 E_0 + (E_{\\max} - 2 E_0) \\left(\\frac{j}{N_{\\mathrm{high}}}\\right)^{1/2}$, $j=0,1,\\dots,N_{\\mathrm{high}}$.\n  Concatenate, sort ascending, and remove duplicates to form $\\{E_i\\}_{i=0}^{N}$. Then set $\\sigma_i$ from the model.\n- Analytic reference: derive $k_{\\mathrm{ref}}(T)$ for this step-function $\\sigma(E)$.\n\nCase C (power-law cross section referenced to an energy scale):\n- Parameters: $\\mu = 3.347 \\times 10^{-27}$ kg, $T = 300$ K, $\\sigma_{\\mathrm{ref}} = 1.0 \\times 10^{-20}$ m$^2$, $E_{\\mathrm{ref}} = 1.0$ eV, exponent $m = 0.5$.\n- Model: $\\sigma(E) = \\sigma_{\\mathrm{ref}} \\left(\\frac{E}{E_{\\mathrm{ref}}}\\right)^m$ for $E \\ge 0$.\n- Tabulation grid: $N = 150$, $E_{\\max} = 70\\,k_{\\mathrm{B}} T$, $E_i = E_{\\max} \\left(\\frac{i}{N}\\right)^3$ for $i=0,1,\\dots,N$, $\\sigma_i = \\sigma(E_i)$.\n- Analytic reference: derive $k_{\\mathrm{ref}}(T)$ for this power-law $\\sigma(E)$ with the appropriate Gamma function.\n\nProgram requirements:\n- Implement the Gauss–Laguerre quadrature in the dimensionless variable $x = E/(k_{\\mathrm{B}} T)$, using the standard nodes and weights for the weight $\\mathrm{e}^{-x}$.\n- For each case, compute and report three values as floats rounded to six significant digits:\n  1. The $n=64$ Gauss–Laguerre estimate of $k(T)$ in m$^3$/s.\n  2. The estimated numerical error in m$^3$/s obtained as the absolute difference between the $n=64$ and $n=32$ estimates.\n  3. The true absolute error in m$^3$/s obtained as the absolute difference between the $n=64$ estimate and the analytic reference $k_{\\mathrm{ref}}(T)$.\n- Your program should produce a single line of output containing the results for the three cases as a comma-separated list of three lists, each inner list containing the three floats described above, all enclosed in square brackets. For example: \"[[kA,errA,absErrA],[kB,errB,absErrB],[kC,errC,absErrC]]\".", "solution": "The problem posed is to compute the thermal bimolecular rate coefficient, $k(T)$, from a tabulated, energy-dependent reaction cross section, $\\sigma(E)$, using Gauss-Laguerre quadrature. The problem is chemically and mathematically well-defined, providing all necessary parameters and a clear computational objective. It is scientifically sound and internally consistent. Therefore, we proceed to the derivation and solution.\n\nThe thermal rate coefficient $k(T)$ for a bimolecular reaction between species in thermal equilibrium at temperature $T$ is defined as the product of the relative speed $v$ and the reaction cross section $\\sigma(v)$ averaged over the Maxwell-Boltzmann distribution of relative speeds. The normalized distribution of relative speeds $v$ for a system with reduced mass $\\mu$ is given by:\n$$ P(v)dv = \\left(\\frac{\\mu}{2 \\pi k_{\\mathrm{B}} T}\\right)^{3/2} e^{-\\frac{\\mu v^2}{2 k_{\\mathrm{B}} T}} 4 \\pi v^2 dv $$\nwhere $k_{\\mathrm{B}}$ is the Boltzmann constant. The rate coefficient is the expectation value $\\langle v \\sigma(v) \\rangle$:\n$$ k(T) = \\int_{0}^{\\infty} v \\sigma(v) P(v) dv = 4 \\pi \\left(\\frac{\\mu}{2 \\pi k_{\\mathrm{B}} T}\\right)^{3/2} \\int_{0}^{\\infty} \\sigma(v) v^3 e^{-\\frac{\\mu v^2}{2 k_{\\mathrm{B}} T}} dv $$\nTo transform this integral into the energy domain, we use the relation between relative kinetic energy $E$ and relative speed $v$: $E = \\frac{1}{2} \\mu v^2$. This gives $v = \\sqrt{2E/\\mu}$ and $dv = (1/\\sqrt{2\\mu E}) dE$. Performing the change of variables from $v$ to $E$ yields the standard formula for the rate coefficient in terms of energy-dependent cross section $\\sigma(E)$:\n$$ k(T) = \\sqrt{\\frac{8}{\\pi\\mu(k_{\\mathrm{B}}T)^3}} \\int_{0}^{\\infty} \\sigma(E) E e^{-E/k_{\\mathrm{B}}T} dE $$\nTo apply Gauss-Laguerre quadrature, which approximates integrals of the form $\\int_0^\\infty f(x) e^{-x} dx$, we introduce the dimensionless energy variable $x = E/(k_{\\mathrm{B}}T)$. Consequently, $E = x k_{\\mathrm{B}}T$ and $dE = k_{\\mathrm{B}}T dx$. Substituting these into the integral for $k(T)$:\n$$ k(T) = \\sqrt{\\frac{8}{\\pi\\mu(k_{\\mathrm{B}}T)^3}} \\int_{0}^{\\infty} \\sigma(x k_{\\mathrm{B}}T) (x k_{\\mathrm{B}}T) e^{-x} (k_{\\mathrm{B}}T dx) $$\nSimplifying the constants leads to a form where the Boltzmann weight is absorbed into the canonical Laguerre weight $e^{-x}$:\n$$ k(T) = \\sqrt{\\frac{8 k_{\\mathrm{B}}T}{\\pi\\mu}} \\int_{0}^{\\infty} x \\sigma(x k_{\\mathrm{B}}T) e^{-x} dx $$\nThe prefactor $\\sqrt{8 k_{\\mathrm{B}}T / (\\pi\\mu)}$ is the mean relative speed $\\bar{v}$. The integral is now in the required form for Gauss-Laguerre quadrature, $\\int_0^\\infty g(x) e^{-x} dx$, where the integrand function is $g(x) = x \\sigma(x k_{\\mathrm{B}}T)$.\nThe $n$-point Gauss-Laguerre quadrature approximation of the integral is:\n$$ \\int_{0}^{\\infty} g(x) e^{-x} dx \\approx \\sum_{j=1}^{n} w_j g(x_j) $$\nwhere $\\{x_j\\}$ are the roots of the Laguerre polynomial $L_n(x)$ and $\\{w_j\\}$ are the corresponding weights. The numerical approximation for the rate coefficient, $k_n(T)$, is thus:\n$$ k_n(T) = \\sqrt{\\frac{8 k_{\\mathrm{B}}T}{\\pi\\mu}} \\sum_{j=1}^{n} w_j x_j \\sigma(x_j k_{\\mathrm{B}}T) $$\nThe cross section $\\sigma(E)$ must be evaluated at the quadrature energy nodes $E_j = x_j k_{\\mathrm{B}}T$. Since $\\sigma(E)$ is provided as a table $(E_i, \\sigma_i)$, we use piecewise-linear interpolation for energies within the tabulated range and nearest-neighbor extrapolation for energies outside this range.\n\nThe numerical error is estimated by computing the difference between approximations using $n=64$ and $n=32$ nodes: $\\Delta k_{\\mathrm{est}} = |k_{64}(T) - k_{32}(T)|$. The true absolute error requires comparison with an analytical reference, $\\Delta k_{\\mathrm{true}} = |k_{64}(T) - k_{\\mathrm{ref}}(T)|$, derived for each model cross section.\n\nAnalytic reference solutions:\n\nCase A: Constant cross section, $\\sigma(E) = \\sigma_0$.\nThe integral becomes $\\int_0^\\infty x \\sigma_0 e^{-x} dx = \\sigma_0 \\int_0^\\infty x e^{-x} dx = \\sigma_0 \\Gamma(2) = \\sigma_0$.\n$$ k_{\\mathrm{ref,A}}(T) = \\sqrt{\\frac{8 k_{\\mathrm{B}}T}{\\pi\\mu}} \\sigma_0 $$\n\nCase B: Threshold step cross section, $\\sigma(E) = 0$ for $E < E_0$ and $\\sigma(E) = \\sigma_1$ for $E \\ge E_0$.\nThe condition $E \\ge E_0$ corresponds to $x \\ge E_0/(k_{\\mathrm{B}}T)$. Let $x_0 = E_0/(k_{\\mathrm{B}}T)$. The integral is $\\sigma_1 \\int_{x_0}^\\infty x e^{-x} dx$. This integral evaluates to $\\sigma_1 (x_0+1)e^{-x_0}$.\n$$ k_{\\mathrm{ref,B}}(T) = \\sqrt{\\frac{8 k_{\\mathrm{B}}T}{\\pi\\mu}} \\sigma_1 \\left(1 + \\frac{E_0}{k_{\\mathrm{B}}T}\\right) e^{-E_0/k_{\\mathrm{B}}T} $$\n\nCase C: Power-law cross section, $\\sigma(E) = \\sigma_{\\mathrm{ref}} (E/E_{\\mathrm{ref}})^m$.\nThe integrand function is $g(x) = x \\sigma_{\\mathrm{ref}} (x k_{\\mathrm{B}}T / E_{\\mathrm{ref}})^m = x^{1+m} \\sigma_{\\mathrm{ref}} (k_{\\mathrm{B}}T/E_{\\mathrm{ref}})^m$. The integral is $\\sigma_{\\mathrm{ref}} (k_{\\mathrm{B}}T / E_{\\mathrm{ref}})^m \\int_0^\\infty x^{1+m} e^{-x} dx = \\sigma_{\\mathrm{ref}} (k_{\\mathrm{B}}T / E_{\\mathrm{ref}})^m \\Gamma(2+m)$.\n$$ k_{\\mathrm{ref,C}}(T) = \\sqrt{\\frac{8 k_{\\mathrm{B}}T}{\\pi\\mu}} \\sigma_{\\mathrm{ref}} \\left(\\frac{k_{\\mathrm{B}}T}{E_{\\mathrm{ref}}}\\right)^m \\Gamma(2+m) $$\nFor $m=0.5$, we have $\\Gamma(2.5) = \\frac{3}{4}\\sqrt{\\pi}$.\n\nThe algorithm implemented proceeds as follows: for each case, the specified energy grid and corresponding cross section values are generated. A function utilizing `numpy.interp` is defined to evaluate $\\sigma(E)$ at arbitrary energies. The Gauss-Laguerre quadrature is performed for $n=32$ and $n=64$ nodes to compute $k_{32}(T)$ and $k_{64}(T)$. The analytic reference $k_{\\mathrm{ref}}(T)$ is calculated. Finally, the required quantities—$k_{64}(T)$, the estimated error $|k_{64}(T)-k_{32}(T)|$, and the true error $|k_{64}(T)-k_{\\mathrm{ref}}(T)|$—are computed and reported.", "answer": "```python\nimport numpy as np\nfrom scipy.special import roots_laguerre, gamma\n\n# Physical constants\nKB_J_K = 1.380649e-23\nEV_TO_J = 1.602176634e-19\n\ndef compute_k_quadrature(n_nodes, mu, T, E_grid, sigma_grid):\n    \"\"\"\n    Computes the rate coefficient k(T) using n-point Gauss-Laguerre quadrature.\n    \"\"\"\n    # Get Gauss-Laguerre nodes and weights for the weight function exp(-x)\n    nodes, weights = roots_laguerre(n_nodes)\n\n    # Energies at which to evaluate the cross section, E_j = x_j * k_B * T\n    quadrature_energies = nodes * KB_J_K * T\n\n    # Interpolate the cross section at the quadrature energies\n    # np.interp handles piecewise-linear interpolation and nearest-neighbor extrapolation\n    sigma_at_nodes = np.interp(\n        quadrature_energies, E_grid, sigma_grid, left=sigma_grid[0], right=sigma_grid[-1]\n    )\n\n    # Compute the sum part of the quadrature formula\n    # integral part = sum(w_j * x_j * sigma(x_j * k_B * T))\n    integral_sum = np.sum(weights * nodes * sigma_at_nodes)\n\n    # Pre-factor sqrt(8 * k_B * T / (pi * mu))\n    prefactor = np.sqrt(8 * KB_J_K * T / (np.pi * mu))\n\n    # Rate coefficient\n    k_T = prefactor * integral_sum\n    return k_T\n\ndef solve_case_A():\n    \"\"\"Handler for Case A: Constant cross section.\"\"\"\n    mu = 1.0e-26  # kg\n    T = 500.0  # K\n    sigma_0 = 2.0e-19  # m^2\n\n    # Tabulation grid generation\n    N = 120\n    E_max = 60 * KB_J_K * T\n    i = np.arange(N + 1)\n    E_grid = E_max * (i / N)**2\n    sigma_grid = np.full_like(E_grid, sigma_0)\n\n    # Numerical solutions\n    k_32 = compute_k_quadrature(32, mu, T, E_grid, sigma_grid)\n    k_64 = compute_k_quadrature(64, mu, T, E_grid, sigma_grid)\n\n    # Analytic reference\n    k_ref = np.sqrt(8 * KB_J_K * T / (np.pi * mu)) * sigma_0\n    \n    # Errors\n    est_err = np.abs(k_64 - k_32)\n    true_err = np.abs(k_64 - k_ref)\n    \n    return [k_64, est_err, true_err]\n\ndef solve_case_B():\n    \"\"\"Handler for Case B: Threshold step cross section.\"\"\"\n    mu = 5.0e-26  # kg\n    T = 1000.0  # K\n    sigma_1 = 5.0e-20  # m^2\n    E_0 = 0.1 * EV_TO_J  # J\n\n    # Tabulation grid generation\n    E_max = 80 * KB_J_K * T\n    N_low = 160\n    i_low = np.arange(N_low + 1)\n    E_grid_low = 2 * E_0 * (i_low / N_low)**2\n\n    N_high = 160\n    j_high = np.arange(N_high + 1)\n    E_grid_high = 2 * E_0 + (E_max - 2 * E_0) * (j_high / N_high)**0.5\n\n    E_grid = np.union1d(E_grid_low, E_grid_high)\n    sigma_grid = np.where(E_grid >= E_0, sigma_1, 0.0)\n\n    # Numerical solutions\n    k_32 = compute_k_quadrature(32, mu, T, E_grid, sigma_grid)\n    k_64 = compute_k_quadrature(64, mu, T, E_grid, sigma_grid)\n\n    # Analytic reference\n    prefactor = np.sqrt(8 * KB_J_K * T / (np.pi * mu))\n    x0 = E_0 / (KB_J_K * T)\n    k_ref = prefactor * sigma_1 * (1 + x0) * np.exp(-x0)\n    \n    # Errors\n    est_err = np.abs(k_64 - k_32)\n    true_err = np.abs(k_64 - k_ref)\n    \n    return [k_64, est_err, true_err]\n\ndef solve_case_C():\n    \"\"\"Handler for Case C: Power-law cross section.\"\"\"\n    mu = 3.347e-27  # kg\n    T = 300.0  # K\n    sigma_ref = 1.0e-20  # m^2\n    E_ref = 1.0 * EV_TO_J  # J\n    m = 0.5\n\n    # Tabulation grid generation\n    N = 150\n    E_max = 70 * KB_J_K * T\n    i = np.arange(N + 1)\n    E_grid = E_max * (i / N)**3\n    \n    # Avoid division by zero at E=0 for E/E_ref\n    sigma_grid = np.zeros_like(E_grid)\n    non_zero_E = E_grid > 0\n    sigma_grid[non_zero_E] = sigma_ref * (E_grid[non_zero_E] / E_ref)**m\n\n    # Numerical solutions\n    k_32 = compute_k_quadrature(32, mu, T, E_grid, sigma_grid)\n    k_64 = compute_k_quadrature(64, mu, T, E_grid, sigma_grid)\n\n    # Analytic reference\n    prefactor = np.sqrt(8 * KB_J_K * T / (np.pi * mu))\n    k_ref = prefactor * sigma_ref * (KB_J_K * T / E_ref)**m * gamma(2 + m)\n\n    # Errors\n    est_err = np.abs(k_64 - k_32)\n    true_err = np.abs(k_64 - k_ref)\n    \n    return [k_64, est_err, true_err]\n\ndef solve():\n    \"\"\"\n    Main solver function to run all test cases and print the results.\n    \"\"\"\n    # A list to hold the results for each case\n    all_results = [solve_case_A(), solve_case_B(), solve_case_C()]\n\n    # Format the output string as per requirements: [[...],[...],[...]]\n    # with no spaces and numbers formatted to 6 significant digits.\n    inner_strings = []\n    for case_results in all_results:\n        formatted_nums = [f'{num:.6g}' for num in case_results]\n        inner_strings.append(f\"[{','.join(formatted_nums)}]\")\n    \n    final_output = f\"[{','.join(inner_strings)}]\"\n    print(final_output)\n\nsolve()\n```", "id": "2667912"}]}