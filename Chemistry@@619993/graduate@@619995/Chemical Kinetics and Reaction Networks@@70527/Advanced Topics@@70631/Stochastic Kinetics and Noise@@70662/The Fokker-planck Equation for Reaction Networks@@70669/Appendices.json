{"hands_on_practices": [{"introduction": "Our journey into the Fokker-Planck equation begins with a foundational exercise: approximating a discrete stochastic process with a continuous one [@problem_id:2685719]. We will consider a simple, yet illustrative, birth-death process and apply the system-size expansion, which is a cornerstone of this field. This practice is essential for building intuition; you will see how the deterministic behavior emerges as a drift term, while stochastic fluctuations are captured by a diffusion term, directly linking the microscopic reaction events to the macroscopic continuous description.", "problem": "Consider a well-mixed monomolecular birth-death reaction network for a single species with molecule count $n \\in \\{0,1,2,\\dots\\}$ in a volume (system size) $\\Omega$, with reactions $X \\to X+1$ and $X \\to X-1$. The stochastic kinetics are governed by the Chemical Master Equation (CME) with propensities $a_b(n)=k_b \\Omega$ for birth and $a_d(n)=k_d n$ for death, where $k_b>0$ and $k_d>0$ are constant rate parameters. Define the concentration variable $x=n/\\Omega$ and the probability density $P(x,t)$ for $x$ in the large-system limit $\\Omega \\to \\infty$.\n\nStarting from the CME and a system-size expansion justified by the small jump size in $x$ of magnitude $1/\\Omega$, derive to leading order in $1/\\Omega$ the Fokker-Planck equation (FPE) for $P(x,t)$ in the Itô convention, of the canonical form\n$$\n\\frac{\\partial}{\\partial t}P(x,t) \\;=\\; -\\frac{\\partial}{\\partial x}\\!\\left[A(x)\\,P(x,t)\\right] \\;+\\; \\frac{1}{2}\\,\\frac{\\partial^2}{\\partial x^2}\\!\\left[B(x)\\,P(x,t)\\right].\n$$\nIdentify the drift coefficient $A(x)$ and the diffusion coefficient $B(x)$ as explicit functions of $x$, $k_b$, $k_d$, and $\\Omega$, keeping terms up to leading nontrivial order in $1/\\Omega$. Provide your final answer as a row matrix with entries $A(x)$ and $B(x)$.", "solution": "The problem statement is scientifically grounded, self-contained, and well-posed. It describes a standard birth-death process in stochastic chemical kinetics and requests the derivation of its corresponding Fokker-Planck equation (FPE) in the large-system-size limit, a standard and valid procedure. We shall proceed with the derivation.\n\nThe stochastic dynamics of the single-species reaction network are described by the Chemical Master Equation (CME) for the probability $P(n,t)$ of having $n$ molecules at time $t$. The reactions are birth, with state change $n \\to n+1$ and propensity $a_b(n) = k_b \\Omega$, and death, with state change $n \\to n-1$ and propensity $a_d(n) = k_d n$. The CME is a differential-difference equation that accounts for the gain and loss of probability in state $n$:\n$$\n\\frac{d P(n,t)}{dt} = \\left[ a_b(n-1)P(n-1,t) + a_d(n+1)P(n+1,t) \\right] - \\left[ a_b(n) + a_d(n) \\right] P(n,t).\n$$\nSubstituting the given propensities, we obtain:\n$$\n\\frac{d P(n,t)}{dt} = k_b \\Omega P(n-1,t) + k_d(n+1)P(n+1,t) - (k_b \\Omega + k_d n)P(n,t).\n$$\nIn the limit of large system size $\\Omega \\to \\infty$, the discrete molecule count $n$ can be approximated by a continuous variable. We define the concentration $x = n/\\Omega$. The probability distribution $P(n,t)$ is related to a probability density function $P(x,t)$ such that $P(n,t) \\approx P(x,t) \\Delta x = P(x,t)/\\Omega$. The discrete jumps in $n$ of size $\\pm 1$ correspond to small jumps in $x$ of magnitude $\\Delta x = \\pm 1/\\Omega$. This allows for a continuous approximation of the master equation, which is formally obtained through a Kramers-Moyal expansion. The result of truncating this expansion at second order is the Fokker-Planck equation.\n\nThe canonical form of the FPE given is:\n$$\n\\frac{\\partial}{\\partial t}P(x,t) \\;=\\; -\\frac{\\partial}{\\partial x}\\!\\left[A(x)\\,P(x,t)\\right] \\;+\\; \\frac{1}{2}\\,\\frac{\\partial^2}{\\partial x^2}\\!\\left[B(x)\\,P(x,t)\\right].\n$$\nThe drift coefficient $A(x)$ and the diffusion coefficient $B(x)$ are the first and second jump moments of the process, respectively. The $k$-th jump moment, $\\alpha_k(x)$, is defined as the average rate of change of $(\\Delta x)^k$:\n$$\n\\alpha_k(x) = \\sum_{\\text{reactions } j} (\\Delta x_j)^k \\times W_j(x),\n$$\nwhere $\\Delta x_j$ is the change in concentration from reaction $j$ and $W_j(x)$ is its rate (propensity) expressed as a function of $x$. The drift and diffusion coefficients are then $A(x) = \\alpha_1(x)$ and $B(x) = \\alpha_2(x)$. This formulation corresponds to the Itô convention.\n\nWe now calculate these moments for the given system.\nThe two reactions are:\n$1$. Birth: $X \\to X+1$. The change in $n$ is $+1$, so $\\Delta x = +1/\\Omega$. The rate is $W_b(x) = a_b(\\Omega x) = k_b \\Omega$.\n$2$. Death: $X \\to X-1$. The change in $n$ is $-1$, so $\\Delta x = -1/\\Omega$. The rate is $W_d(x) = a_d(\\Omega x) = k_d (\\Omega x)$.\n\nThe drift coefficient $A(x)$ is the first jump moment, $\\alpha_1(x)$:\n$$\nA(x) = \\alpha_1(x) = \\left(+\\frac{1}{\\Omega}\\right) W_b(x) + \\left(-\\frac{1}{\\Omega}\\right) W_d(x)\n$$\n$$\nA(x) = \\frac{1}{\\Omega} (k_b \\Omega) - \\frac{1}{\\Omega} (k_d \\Omega x) = k_b - k_d x.\n$$\nThis term determines the deterministic evolution of the concentration and is of order $\\Omega^0$. It is identical to the macroscopic rate equation $\\frac{dx}{dt} = k_b - k_d x$.\n\nThe diffusion coefficient $B(x)$ is the second jump moment, $\\alpha_2(x)$:\n$$\nB(x) = \\alpha_2(x) = \\left(+\\frac{1}{\\Omega}\\right)^2 W_b(x) + \\left(-\\frac{1}{\\Omega}\\right)^2 W_d(x)\n$$\n$$\nB(x) = \\frac{1}{\\Omega^2} (k_b \\Omega) + \\frac{1}{\\Omega^2} (k_d \\Omega x) = \\frac{k_b}{\\Omega} + \\frac{k_d x}{\\Omega} = \\frac{k_b + k_d x}{\\Omega}.\n$$\nThis term quantifies the magnitude of the stochastic fluctuations around the deterministic path and is of order $\\Omega^{-1}$.\n\nThe Kramers-Moyal expansion is an infinite series. The FPE is an approximation obtained by truncating this series. The $k$-th term involves the $k$-th jump moment $\\alpha_k(x)$. For this system, one can show that $\\alpha_k(x)$ is of order $\\Omega^{1-k}$. For $k > 2$, these moments are of order $\\Omega^{-2}$ or smaller. Thus, neglecting terms for $k > 2$ is a systematic approximation in powers of $1/\\Omega$. The resulting FPE, with the drift $A(x)$ and diffusion $B(x)$ calculated above, represents the leading-order continuous description of the stochastic process.\n\nThe identified coefficients are:\nDrift: $A(x) = k_b - k_d x$.\nDiffusion: $B(x) = \\frac{k_b + k_d x}{\\Omega}$.\nThese are the coefficients for the FPE in the specified Itô convention.", "answer": "$$\n\\boxed{\\begin{pmatrix} k_b - k_d x & \\frac{k_b + k_d x}{\\Omega} \\end{pmatrix}}\n$$", "id": "2685719"}, {"introduction": "Having established how to derive a Fokker-Planck equation, we now apply this framework to a more complex, multi-species system to make quantitative predictions [@problem_id:2685713]. This exercise introduces the powerful Linear Noise Approximation (LNA), which allows us to analyze fluctuations around a stable steady state. By solving the associated Lyapunov equation, you will calculate the stationary covariance matrix of concentration fluctuations, a key measure of intrinsic noise in biochemical networks and a direct link between stochastic theory and experimental observation.", "problem": "Consider the linear reaction network with two species $A$ and $B$ and the four elementary reactions\n- $R_1$: $\\varnothing \\to A$ with macroscopic rate constant $\\kappa_1$,\n- $R_2$: $A \\to \\varnothing$ with macroscopic rate constant $\\kappa_2$,\n- $R_3$: $A \\to B$ with macroscopic rate constant $\\kappa_3$,\n- $R_4$: $B \\to \\varnothing$ with macroscopic rate constant $\\kappa_4$,\ntaking place in a well-stirred volume with system-size parameter $\\Omega>0$. Let $\\phi=(\\phi_A,\\phi_B)^\\top$ denote the concentration vector, and let $S$ denote the stoichiometric matrix (with integer entries corresponding to molecular changes per reaction event). Assume mass-action kinetics so that the macroscopic propensity vector is $\\alpha(\\phi)=(\\kappa_1,\\kappa_2 \\phi_A,\\kappa_3 \\phi_A,\\kappa_4 \\phi_B)^\\top$. \n\nStarting from the Chemical Master Equation (CME) and using the van Kampen system-size expansion to leading nontrivial order (the Linear Noise Approximation (LNA)), derive the linear Fokker–Planck equation governing the fluctuations of concentrations around the deterministic fixed point $\\phi^\\star$, identify the drift Jacobian (generator) $K=\\partial f/\\partial \\phi|_{\\phi^\\star}$ for the deterministic drift $f(\\phi)=S\\,\\alpha(\\phi)$, and obtain the closed matrix equation satisfied by the stationary covariance matrix $\\Sigma$ of concentration fluctuations. Then, for the above network, compute the unique deterministic fixed point $\\phi^\\star$, evaluate the matrices entering the stationary covariance equation at $\\phi^\\star$, and solve this equation to obtain the stationary variance of the concentration of species $B$, namely the entry $\\sigma_{BB}$ of $\\Sigma$. \n\nProvide your final result for $\\sigma_{BB}$ as a single closed-form expression in terms of $\\kappa_1,\\kappa_2,\\kappa_3,\\kappa_4$, and $\\Omega$. Do not insert numerical values. Express your final answer without units.", "solution": "The problem is to derive the stationary variance of the concentration of species $B$ for a given linear reaction network using the Linear Noise Approximation (LNA).\n\nFirst, the problem statement is validated.\n**Givens:**\n- Species: $A$, $B$.\n- Reactions:\n  - $R_1$: $\\varnothing \\to A$, rate constant $\\kappa_1$.\n  - $R_2$: $A \\to \\varnothing$, rate constant $\\kappa_2$.\n  - $R_3$: $A \\to B$, rate constant $\\kappa_3$.\n  - $R_4$: $B \\to \\varnothing$, rate constant $\\kappa_4$.\n- System-size parameter: $\\Omega > 0$.\n- Concentration vector: $\\phi = (\\phi_A, \\phi_B)^\\top$.\n- Stoichiometric matrix: $S$.\n- Macroscopic propensity vector: $\\alpha(\\phi) = (\\kappa_1, \\kappa_2 \\phi_A, \\kappa_3 \\phi_A, \\kappa_4 \\phi_B)^\\top$.\n\n**Validation:**\nThe problem is scientifically grounded, rooted in the standard theory of stochastic chemical kinetics. It is well-posed, providing all necessary information and a clear objective. The language is precise and objective. The described system is a standard model in the field. Therefore, the problem is deemed valid and a solution will be constructed.\n\n**Derivation:**\nThe foundation of the analysis is the Chemical Master Equation (CME). The van Kampen system-size expansion provides a systematic approximation to the CME. For a system with molecule numbers $n(t)$, we posit the ansatz $n(t) = \\Omega\\phi(t) + \\sqrt{\\Omega}\\xi(t)$, where $\\phi(t)$ is the deterministic macroscopic concentration vector and $\\xi(t)$ are fluctuations. To leading order, this expansion yields the deterministic rate equation for $\\phi(t)$, and to the next order, a linear Fokker-Planck equation for the probability distribution of the fluctuations $\\xi(t)$.\n\nThe concentration vector is $X(t) = n(t)/\\Omega = \\phi(t) + \\Omega^{-1/2}\\xi(t)$. The fluctuations in concentration are $\\eta(t) = X(t) - \\phi(t) = \\Omega^{-1/2}\\xi(t)$. The stationary covariance matrix of concentration fluctuations, which we will denote by $\\Sigma = \\langle \\eta \\eta^\\top \\rangle$, satisfies the continuous-time algebraic Lyapunov equation:\n$$K \\Sigma + \\Sigma K^\\top + \\Omega^{-1}D = 0$$\nwhere:\n1.  $K$ is the Jacobian matrix of the deterministic drift, evaluated at the steady state: $K = \\left. \\frac{\\partial f}{\\partial \\phi} \\right|_{\\phi^\\star}$. The drift is $f(\\phi) = S\\alpha(\\phi)$.\n2.  $D$ is the diffusion matrix, given by $D = S \\text{diag}(\\alpha(\\phi^\\star)) S^\\top$.\n\nWe will now compute these matrices for the specified reaction network.\n\n**1. Deterministic System Dynamics and Fixed Point:**\nThe stoichiometric matrix $S$ maps the rates of the four reactions to changes in the concentrations of species $A$ and $B$. The columns of $S$ correspond to the reactions $R_1, R_2, R_3, R_4$, and the rows to species $A, B$:\n$$S = \\begin{pmatrix} 1 & -1 & -1 & 0 \\\\ 0 & 0 & 1 & -1 \\end{pmatrix}$$\nThe deterministic rate equation is $\\frac{d\\phi}{dt} = f(\\phi) = S\\alpha(\\phi)$:\n$$f(\\phi) = \\begin{pmatrix} 1 & -1 & -1 & 0 \\\\ 0 & 0 & 1 & -1 \\end{pmatrix} \\begin{pmatrix} \\kappa_1 \\\\ \\kappa_2 \\phi_A \\\\ \\kappa_3 \\phi_A \\\\ \\kappa_4 \\phi_B \\end{pmatrix} = \\begin{pmatrix} \\kappa_1 - (\\kappa_2 + \\kappa_3) \\phi_A \\\\ \\kappa_3 \\phi_A - \\kappa_4 \\phi_B \\end{pmatrix}$$\nThe unique deterministic fixed point $\\phi^\\star = (\\phi_A^\\star, \\phi_B^\\star)^\\top$ is found by setting $f(\\phi^\\star) = 0$:\n$$\\kappa_1 - (\\kappa_2 + \\kappa_3) \\phi_A^\\star = 0 \\implies \\phi_A^\\star = \\frac{\\kappa_1}{\\kappa_2 + \\kappa_3}$$\n$$\\kappa_3 \\phi_A^\\star - \\kappa_4 \\phi_B^\\star = 0 \\implies \\phi_B^\\star = \\frac{\\kappa_3}{\\kappa_4}\\phi_A^\\star = \\frac{\\kappa_1 \\kappa_3}{\\kappa_4 (\\kappa_2 + \\kappa_3)}$$\n\n**2. Drift Jacobian Matrix $K$:**\nThe Jacobian matrix $K$ is the matrix of partial derivatives of $f(\\phi)$, evaluated at $\\phi^\\star$.\n$$K = \\left. \\frac{\\partial f}{\\partial \\phi} \\right|_{\\phi^\\star} = \\begin{pmatrix} \\frac{\\partial f_A}{\\partial \\phi_A} & \\frac{\\partial f_A}{\\partial \\phi_B} \\\\ \\frac{\\partial f_B}{\\partial \\phi_A} & \\frac{\\partial f_B}{\\partial \\phi_B} \\end{pmatrix}_{\\phi=\\phi^\\star} = \\begin{pmatrix} -(\\kappa_2 + \\kappa_3) & 0 \\\\ \\kappa_3 & -\\kappa_4 \\end{pmatrix}$$\nSince the system is linear, the Jacobian is constant and does not depend on $\\phi$.\n\n**3. Diffusion Matrix $D$:**\nFirst, we evaluate the propensity vector $\\alpha(\\phi)$ at the fixed point $\\phi^\\star$:\n$$\\alpha(\\phi^\\star) = \\left( \\kappa_1, \\; \\kappa_2 \\frac{\\kappa_1}{\\kappa_2 + \\kappa_3}, \\; \\kappa_3 \\frac{\\kappa_1}{\\kappa_2 + \\kappa_3}, \\; \\kappa_4 \\frac{\\kappa_1 \\kappa_3}{\\kappa_4 (\\kappa_2 + \\kappa_3)} \\right)^\\top$$\n$$\\alpha(\\phi^\\star) = \\left( \\kappa_1, \\; \\frac{\\kappa_1 \\kappa_2}{\\kappa_2 + \\kappa_3}, \\; \\frac{\\kappa_1 \\kappa_3}{\\kappa_2 + \\kappa_3}, \\; \\frac{\\kappa_1 \\kappa_3}{\\kappa_2 + \\kappa_3} \\right)^\\top$$\nThe diffusion matrix $D= S \\text{diag}(\\alpha(\\phi^\\star)) S^\\top$ is then:\n$$D = S \\begin{pmatrix} \\alpha_1(\\phi^\\star) & 0 & 0 & 0 \\\\ 0 & \\alpha_2(\\phi^\\star) & 0 & 0 \\\\ 0 & 0 & \\alpha_3(\\phi^\\star) & 0 \\\\ 0 & 0 & 0 & \\alpha_4(\\phi^\\star) \\end{pmatrix} S^\\top = \\begin{pmatrix} \\alpha_1^\\star+\\alpha_2^\\star+\\alpha_3^\\star & -\\alpha_3^\\star \\\\ -\\alpha_3^\\star & \\alpha_3^\\star+\\alpha_4^\\star \\end{pmatrix}$$\nSubstituting the values:\n$$D_{AA} = \\kappa_1 + \\frac{\\kappa_1 \\kappa_2}{\\kappa_2 + \\kappa_3} + \\frac{\\kappa_1 \\kappa_3}{\\kappa_2 + \\kappa_3} = \\kappa_1 + \\frac{\\kappa_1(\\kappa_2+\\kappa_3)}{\\kappa_2+\\kappa_3} = 2\\kappa_1$$\n$$D_{BB} = \\frac{\\kappa_1 \\kappa_3}{\\kappa_2 + \\kappa_3} + \\frac{\\kappa_1 \\kappa_3}{\\kappa_2 + \\kappa_3} = \\frac{2\\kappa_1 \\kappa_3}{\\kappa_2 + \\kappa_3}$$\n$$D_{AB} = D_{BA} = -\\frac{\\kappa_1 \\kappa_3}{\\kappa_2 + \\kappa_3}$$\nSo the diffusion matrix is:\n$$D = \\begin{pmatrix} 2\\kappa_1 & - \\frac{\\kappa_1 \\kappa_3}{\\kappa_2 + \\kappa_3} \\\\ - \\frac{\\kappa_1 \\kappa_3}{\\kappa_2 + \\kappa_3} & \\frac{2\\kappa_1 \\kappa_3}{\\kappa_2 + \\kappa_3} \\end{pmatrix}$$\n\n**4. Solving the Lyapunov Equation:**\nLet the covariance matrix be $\\Sigma = \\begin{pmatrix} \\sigma_{AA} & \\sigma_{AB} \\\\ \\sigma_{AB} & \\sigma_{BB} \\end{pmatrix}$. The equation $K \\Sigma + \\Sigma K^\\top + \\Omega^{-1}D = 0$ yields a system of three independent linear algebraic equations for the three unknown entries of $\\Sigma$.\n$$ \\begin{pmatrix} -(\\kappa_2 + \\kappa_3) & 0 \\\\ \\kappa_3 & -\\kappa_4 \\end{pmatrix} \\begin{pmatrix} \\sigma_{AA} & \\sigma_{AB} \\\\ \\sigma_{AB} & \\sigma_{BB} \\end{pmatrix} + \\begin{pmatrix} \\sigma_{AA} & \\sigma_{AB} \\\\ \\sigma_{AB} & \\sigma_{BB} \\end{pmatrix} \\begin{pmatrix} -(\\kappa_2 + \\kappa_3) & \\kappa_3 \\\\ 0 & -\\kappa_4 \\end{pmatrix} = -\\Omega^{-1} D $$\nThe $(1,1)$ entry gives:\n$$-2(\\kappa_2+\\kappa_3)\\sigma_{AA} = -\\Omega^{-1} D_{AA} = -\\Omega^{-1}(2\\kappa_1) \\implies \\sigma_{AA} = \\frac{\\kappa_1}{\\Omega(\\kappa_2+\\kappa_3)}$$\nThe $(1,2)$ entry gives:\n$$\\kappa_3 \\sigma_{AA} - (\\kappa_2+\\kappa_3+\\kappa_4)\\sigma_{AB} = -\\Omega^{-1}D_{AB} = \\Omega^{-1}\\frac{\\kappa_1\\kappa_3}{\\kappa_2+\\kappa_3}$$\nSubstituting the result for $\\sigma_{AA}$:\n$$\\kappa_3 \\left( \\frac{\\kappa_1}{\\Omega(\\kappa_2+\\kappa_3)} \\right) - (\\kappa_2+\\kappa_3+\\kappa_4)\\sigma_{AB} = \\frac{\\kappa_1\\kappa_3}{\\Omega(\\kappa_2+\\kappa_3)}$$\nThis simplifies to $-(\\kappa_2+\\kappa_3+\\kappa_4)\\sigma_{AB} = 0$, which implies $\\sigma_{AB} = 0$, as all rate constants are positive.\n\nFinally, the $(2,2)$ entry gives:\n$$2(\\kappa_3\\sigma_{AB} - \\kappa_4\\sigma_{BB}) = -\\Omega^{-1}D_{BB} = -\\Omega^{-1}\\frac{2\\kappa_1\\kappa_3}{\\kappa_2+\\kappa_3}$$\nSubstituting $\\sigma_{AB}=0$:\n$$-2\\kappa_4\\sigma_{BB} = -\\frac{2\\kappa_1\\kappa_3}{\\Omega(\\kappa_2+\\kappa_3)}$$\nSolving for $\\sigma_{BB}$, the stationary variance of the concentration of species $B$:\n$$\\sigma_{BB} = \\frac{\\kappa_1\\kappa_3}{\\Omega\\kappa_4(\\kappa_2+\\kappa_3)}$$\nThis result is equivalent to $\\phi_B^\\star/\\Omega$, consistent with the fact that a linear reaction chain initiated by a zeroth-order reaction propagating through first-order steps results in Poisson-distributed molecule numbers for each species at steady state.", "answer": "$$\\boxed{\\frac{\\kappa_1 \\kappa_3}{\\Omega \\kappa_4 (\\kappa_2 + \\kappa_3)}}$$", "id": "2685713"}, {"introduction": "Theory and analysis are powerful, but the ultimate test of a model is simulation. This final practice moves from pen-and-paper analysis to a hands-on computational exploration of a classic nonlinear system: the bistable Schlögl model [@problem_id:2685607]. You will implement and compare the exact **Stochastic Simulation Algorithm (SSA)** with the Fokker-Planck approximation's numerical counterpart, the **Chemical Langevin Equation (CLE)**. This exercise provides crucial intuition about the FPE's domain of validity, particularly how well it captures complex dynamics like stochastic switching between stable states, a common feature in biological circuits.", "problem": "Consider the single-species Schlögl reaction network, a paradigmatic bistable chemical system, with the following reactions under mass-action kinetics in a well-stirred reactor of volume $\\Omega$:\n- Reaction $\\mathcal{R}_1$: $A + 2X \\rightarrow 3X$,\n- Reaction $\\mathcal{R}_2$: $3X \\rightarrow 2X + A$,\n- Reaction $\\mathcal{R}_3$: $B \\rightarrow X$,\n- Reaction $\\mathcal{R}_4$: $X \\rightarrow B$.\n\nThe species $A$ and $B$ are large external reservoirs maintained at constant concentrations $a_0$ and $b_0$, respectively. The dynamic species $X$ has molecule count $n(t) \\in \\mathbb{N}_0$. The macroscopic rate constants are $k_1$, $k_2$, $k_3$, $k_4$ (all positive). The stoichiometric increments for $n(t)$ are $\\nu_1 = +1$, $\\nu_2 = -1$, $\\nu_3 = +1$, $\\nu_4 = -1$. Under mass-action scaling from concentrations to molecules, the corresponding propensity functions for $n \\in \\mathbb{R}_{\\ge 0}$ are determined by the core definition of mass action in a well-stirred reactor:\n- $a_1(n) = k_1 a_0 \\, \\dfrac{n(n-1)}{\\Omega}$,\n- $a_2(n) = k_2 \\, \\dfrac{n(n-1)(n-2)}{\\Omega^2}$,\n- $a_3(n) = k_3 b_0 \\, \\Omega$,\n- $a_4(n) = k_4 \\, n$.\n\nAll propensity values are understood to be truncated to zero when their polynomial form yields a negative number for a given real $n \\ge 0$. The exact mesoscopic dynamics for $n(t)$ is given by the continuous-time, discrete-state Markov jump process governed by the Chemical Master Equation (CME). From the CME, one may obtain a diffusion approximation by the Kramers–Moyal expansion truncated at second order, yielding the Fokker–Planck equation and the equivalent Chemical Langevin Equation (CLE).\n\nYour tasks are the following.\n1) Starting from the CME and the Kramers–Moyal expansion, derive the one-dimensional Fokker–Planck equation for the probability density $p(n,t)$ of the molecule count $n(t)$, identifying explicitly the drift $\\mu(n)$ and diffusion coefficient $\\sigma^2(n)$ in terms of the propensities $a_j(n)$ and stoichiometric increments $\\nu_j$. From this, identify the corresponding CLE in Itô form for $n(t)$.\n2) Show that, in the large-volume limit, the concentration $x(t) = n(t)/\\Omega$ has a deterministic mean-field limit $\\dot{x} = f(x)$, and write $f(x)$ for this network using the parameters $k_1$, $k_2$, $k_3$, $k_4$, $a_0$, $b_0$. Explain why the resulting cubic polynomial $f(x)$ can exhibit three real roots for appropriate parameter choices, implying two stable fixed points separated by one unstable fixed point (bimodality).\n3) Implement three simulators for $n(t)$ over a finite horizon $[0,T]$:\n   - the exact **Stochastic Simulation Algorithm (SSA)**,\n   - the full diffusion approximation via the CLE integrated by Euler–Maruyama with fixed step size $\\Delta t$,\n   - a simple hybrid method that, at each fixed time step $\\tau$, treats reactions with large instantaneous propensity by a **Gaussian** increment (normal with mean $a_j(n)\\tau$ and variance $a_j(n)\\tau$) and reactions with small instantaneous propensity by a **Poisson** increment with mean $a_j(n)\\tau$, all combined **additively** according to the stoichiometry. Precisely define the partitioning rule in terms of a user-chosen threshold rate `r_thresh`, and enforce $n(t) \\ge 0$ by reflection after each update.\n4) Define the mode boundary as follows. Let $x^\\star_{\\mathrm{mid}}$ be the middle real root of the deterministic drift $f(x)$, and set $n_{\\mathrm{thr}} = \\lfloor \\Omega \\, x^\\star_{\\mathrm{mid}} \\rfloor$. For any trajectory $n(t)$, define the residence time in the **lower mode** as the total time spent with $n(t) < n_{\\mathrm{thr}}$, and the residence time in the **upper mode** as the total time spent with $n(t) \\ge n_{\\mathrm{thr}}$. For each simulator, compute the fraction of time spent in each mode over $[0,T]$. Use the SSA fractions as the reference, and quantify the absolute error for the CLE and the hybrid method in each mode.\n5) Using the specific, scientifically standard parameter set\n   - $k_1 = 5.0$,\n   - $k_2 = 1.0$,\n   - $k_3 = 1.0$,\n   - $k_4 = 5.99$,\n   - $a_0 = 1.0$,\n   - $b_0 = 1.0$,\n   and the initial molecule count $n(0) = \\lfloor 0.1 \\, \\Omega \\rfloor$, run your three simulators for the following test suite, each with its own $(\\Omega, T, \\Delta t, \\tau, r_{\\mathrm{thresh}})$:\n   - Test $1$: $\\Omega = 200$, $T = 10.0$, $\\Delta t = 10^{-3}$, $\\tau = 10^{-3}$, `r_thresh` = 50.0.\n   - Test $2$ (more discrete, stronger noise): $\\Omega = 50$, $T = 10.0$, $\\Delta t = 10^{-3}$, $\\tau = 10^{-3}$, `r_thresh` = 20.0.\n   - Test $3$ (larger volume, closer to diffusion limit): $\\Omega = 400$, $T = 10.0$, $\\Delta t = 10^{-3}$, $\\tau = 10^{-3}$, `r_thresh` = 80.0.\n6) For each test, report four numbers: the absolute error in the lower-mode residence fraction for the CLE, the absolute error in the upper-mode residence fraction for the CLE, the absolute error in the lower-mode residence fraction for the hybrid method, and the absolute error in the upper-mode residence fraction for the hybrid method. The reference is the SSA in each test case.\n\nFinal output format requirement:\n- Your program should produce a single line of output containing the results for all three tests concatenated, as a comma-separated list of floating-point numbers enclosed in square brackets, ordered as\n  $[\\mathrm{err}^{\\mathrm{CLE}}_{\\mathrm{low},1}, \\mathrm{err}^{\\mathrm{CLE}}_{\\mathrm{up},1}, \\mathrm{err}^{\\mathrm{HYB}}_{\\mathrm{low},1}, \\mathrm{err}^{\\mathrm{HYB}}_{\\mathrm{up},1}, \\mathrm{err}^{\\mathrm{CLE}}_{\\mathrm{low},2}, \\mathrm{err}^{\\mathrm{CLE}}_{\\mathrm{up},2}, \\mathrm{err}^{\\mathrm{HYB}}_{\\mathrm{low},2}, \\mathrm{err}^{\\mathrm{HYB}}_{\\mathrm{up},2}, \\mathrm{err}^{\\mathrm{CLE}}_{\\mathrm{low},3}, \\mathrm{err}^{\\mathrm{CLE}}_{\\mathrm{up},3}, \\mathrm{err}^{\\mathrm{HYB}}_{\\mathrm{low},3}, \\mathrm{err}^{\\mathrm{HYB}}_{\\mathrm{up},3}]$.\n- All numbers are dimensionless fractions in $[0,1]$, and they must be printed as decimal floating-point values.\n- No other text should be printed.", "solution": "The problem presented is a comprehensive and scientifically sound exercise in the field of stochastic chemical kinetics, specifically focusing on the modeling and simulation of the Schlögl reaction network, a canonical system for studying bistability. The problem statement is validated as complete, consistent, and well-posed. It requires both theoretical derivation and numerical implementation, which are standard procedures in this domain. I will now proceed with the solution.\n\n**Part 1: Derivation of the Fokker-Planck Equation and Chemical Langevin Equation**\n\nThe dynamics of the molecule count $n(t)$ of species $X$ are governed by the Chemical Master Equation (CME), a continuous-time discrete-state formulation:\n$$\n\\frac{\\partial P(n, t)}{\\partial t} = \\sum_{j=1}^{4} \\left[ a_j(n - \\nu_j) P(n - \\nu_j, t) - a_j(n) P(n, t) \\right]\n$$\nHere, $P(n, t)$ is the probability of observing $n$ molecules at time $t$, $a_j(n)$ are the reaction propensities, and $\\nu_j$ are the stoichiometric changes in the molecule count of $X$ for reaction $j$.\n\nThe Fokker-Planck equation (FPE) is a continuous approximation to the CME, derived via the Kramers-Moyal expansion truncated at the second order. The expansion for the probability density $p(n,t)$ is:\n$$\n\\frac{\\partial p(n, t)}{\\partial t} = \\sum_{k=1}^{\\infty} \\frac{(-1)^k}{k!} \\frac{\\partial^k}{\\partial n^k} \\left[ M_k(n) p(n, t) \\right]\n$$\nThe jump moments $M_k(n)$ are defined as $M_k(n) = \\sum_{j=1}^{4} \\nu_j^k a_j(n)$. Truncating the series at $k=2$ gives the FPE:\n$$\n\\frac{\\partial p(n, t)}{\\partial t} = -\\frac{\\partial}{\\partial n} \\left[ M_1(n) p(n, t) \\right] + \\frac{1}{2} \\frac{\\partial^2}{\\partial n^2} \\left[ M_2(n) p(n, t) \\right]\n$$\nThis equation describes the evolution of the probability density $p(n,t)$ in terms of a drift coefficient $\\mu(n) = M_1(n)$ and a diffusion coefficient $\\sigma^2(n) = M_2(n)$.\n\nFor the Schlögl network, the stoichiometric increments are $\\nu_1 = +1$, $\\nu_2 = -1$, $\\nu_3 = +1$, and $\\nu_4 = -1$.\nThe drift coefficient is the first jump moment:\n$$\n\\mu(n) = M_1(n) = \\sum_{j=1}^{4} \\nu_j a_j(n) = (+1)a_1(n) + (-1)a_2(n) + (+1)a_3(n) + (-1)a_4(n)\n$$\nSubstituting the given propensities:\n$$\n\\mu(n) = k_1 a_0 \\frac{n(n-1)}{\\Omega} - k_2 \\frac{n(n-1)(n-2)}{\\Omega^2} + k_3 b_0 \\Omega - k_4 n\n$$\nThe diffusion coefficient is the second jump moment:\n$$\n\\sigma^2(n) = M_2(n) = \\sum_{j=1}^{4} \\nu_j^2 a_j(n) = (+1)^2 a_1(n) + (-1)^2 a_2(n) + (+1)^2 a_3(n) + (-1)^2 a_4(n) = \\sum_{j=1}^{4} a_j(n)\n$$\nSubstituting the propensities:\n$$\n\\sigma^2(n) = k_1 a_0 \\frac{n(n-1)}{\\Omega} + k_2 \\frac{n(n-1)(n-2)}{\\Omega^2} + k_3 b_0 \\Omega + k_4 n\n$$\nThe stochastic differential equation (SDE) that is mathematically equivalent to this FPE is the Chemical Langevin Equation (CLE) in the Itô form:\n$$\ndn(t) = \\mu(n(t)) dt + \\sigma(n(t)) dW(t)\n$$\nwhere $dW(t)$ represents an increment of a standard Wiener process. This equation provides a continuous-state, continuous-time approximation for the trajectory $n(t)$.\n\n**Part 2: Deterministic Mean-Field Limit and Bistability**\n\nTo find the deterministic limit, we consider the concentration $x(t) = n(t)/\\Omega$ and examine the system's behavior in the large volume limit, $\\Omega \\to \\infty$. In this limit, the law of large numbers suggests that the stochastic process converges to a deterministic trajectory governed by an ordinary differential equation (ODE). The ODE is derived from the drift term of the CLE, scaled by the volume:\n$$\n\\dot{x}(t) = \\lim_{\\Omega \\to \\infty} \\frac{\\mu(\\Omega x)}{\\Omega}\n$$\nWe substitute $n = \\Omega x$ into the propensities and take the limit. For large $\\Omega$, $n(n-1) \\approx n^2 = (\\Omega x)^2$ and $n(n-1)(n-2) \\approx n^3 = (\\Omega x)^3$.\n$$\n\\dot{x} = \\lim_{\\Omega \\to \\infty} \\frac{1}{\\Omega} \\left[ k_1 a_0 \\frac{(\\Omega x)^2}{\\Omega} - k_2 \\frac{(\\Omega x)^3}{\\Omega^2} + k_3 b_0 \\Omega - k_4 (\\Omega x) \\right]\n$$\n$$\n\\dot{x} = k_1 a_0 x^2 - k_2 x^3 + k_3 b_0 - k_4 x\n$$\nRearranging this gives the macroscopic rate equation, $\\dot{x} = f(x)$:\n$$\nf(x) = -k_2 x^3 + k_1 a_0 x^2 - k_4 x + k_3 b_0\n$$\nThe fixed points of the system are the real, non-negative roots of the cubic polynomial $f(x)=0$. A cubic polynomial can have either one or three real roots. When parameter values are chosen such that there are three distinct real roots, say $x_1^* < x_2^* < x_3^*$, the system exhibits bistability.\nThe stability of these fixed points is determined by the sign of the derivative $f'(x^*)$. Since the leading coefficient $-k_2$ is negative, $f(x) \\to -\\infty$ as $x \\to \\infty$. Also, $f(0) = k_3 b_0 > 0$ as all parameters are positive. For three positive roots to exist, the function must have a local maximum above the x-axis and a local minimum below it. This implies a sign pattern for the derivative at the roots: $f'(x_1^*) < 0$ (stable), $f'(x_2^*) > 0$ (unstable), and $f'(x_3^*) < 0$ (stable). The system thus possesses two stable steady states separated by an unstable one, which is the defining characteristic of bistability.\n\n**Part 3-6: Simulator Implementation and Analysis**\n\nThe problem requires implementation of three simulation algorithms: the exact Stochastic Simulation Algorithm (SSA), the approximate Chemical Langevin Equation (CLE), and a specified hybrid method. The performance of the approximate methods is to be evaluated against the exact SSA based on the fraction of time the system spends in two defined modes. These modes are separated by a threshold $n_{\\mathrm{thr}} = \\lfloor \\Omega x^\\star_{\\mathrm{mid}} \\rfloor$, where $x^\\star_{\\mathrm{mid}}$ is the middle (unstable) root of the deterministic rate equation $f(x)=0$.\n\nFor the given parameters $k_1 = 5.0$, $k_2 = 1.0$, $k_3 = 1.0$, $k_4 = 5.99$, $a_0 = 1.0$, $b_0 = 1.0$, the rate equation is $f(x) = -x^3 + 5.0 x^2 - 5.99 x + 1.0 = 0$. The roots of this polynomial are found numerically to be approximately $0.1989$, $1.8082$, and $2.9929$. The middle root is $x^\\star_{\\mathrm{mid}} \\approx 1.8082$. This value is used to calculate $n_{\\mathrm{thr}}$ for each test case depending on the volume $\\Omega$.\n\nThe implementation will proceed as follows:\n- **Propensity Functions**: For SSA, propensities are calculated for integer $n$. For CLE and the hybrid method, $n$ is a real number, and the propensities are truncated to zero if their polynomial form becomes negative, e.g., $a_1(n) \\propto \\max(0, n(n-1))$.\n- **SSA**: Gillespie's direct method is used to generate an exact stochastic trajectory. It is an event-driven algorithm where the time step is a random variable.\n- **CLE**: The CLE is integrated using the Euler-Maruyama scheme with a fixed time step $\\Delta t$. A reflection boundary at $n=0$ is implemented as $n_{new} = |n_{old} + \\text{increment}|$.\n- **Hybrid Method**: At each fixed time step $\\tau$, the number of firings for each reaction is drawn from either a Poisson or a Normal distribution, depending on whether the reaction propensity is below or above a threshold $r_{\\mathrm{thresh}}$. The total change in $n$ is the stoichiometrically weighted sum of these firings. A reflection boundary is also applied.\n- **Analysis**: For each trajectory, residence time fractions in the lower mode ($n < n_{\\mathrm{thr}}$) and upper mode ($n \\ge n_{\\mathrm{thr}}$) are computed. Absolute errors for the CLE and hybrid methods are then calculated relative to the SSA fractions.\n\nThe final code will execute these steps for the three test cases specified and print the resulting twelve error metrics in the required format.", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Main function to solve the Schlögl network problem.\n    It runs three simulations (SSA, CLE, Hybrid) for three test cases,\n    calculates residence time fractions, and computes the errors\n    of the approximate methods against the exact SSA.\n    \"\"\"\n\n    # --- Problem Parameters ---\n    params = {\n        'k1': 5.0, 'k2': 1.0, 'k3': 1.0, 'k4': 5.99,\n        'a0': 1.0, 'b0': 1.0\n    }\n\n    # --- Deterministic Analysis: Find middle root for mode boundary ---\n    # f(x) = -k2*x^3 + k1*a0*x^2 - k4*x + k3*b0 = 0\n    coeffs = [-params['k2'], params['k1'] * params['a0'], -params['k4'], params['k3'] * params['b0']]\n    roots = np.roots(coeffs)\n    roots.sort()\n    x_mid_star = roots[1]\n\n    # --- Test Cases ---\n    test_cases = [\n        {'Omega': 200.0, 'T': 10.0, 'dt': 1e-3, 'tau': 1e-3, 'r_thresh': 50.0},\n        {'Omega': 50.0, 'T': 10.0, 'dt': 1e-3, 'tau': 1e-3, 'r_thresh': 20.0},\n        {'Omega': 400.0, 'T': 10.0, 'dt': 1e-3, 'tau': 1e-3, 'r_thresh': 80.0},\n    ]\n\n    # Use separate random number generators for reproducibility and independence\n    # Seeds are chosen arbitrarily but fixed.\n    rng_seeds = [(10, 11, 12), (20, 21, 22), (30, 31, 32)]\n\n    results = []\n\n    for i, case in enumerate(test_cases):\n        Omega = case['Omega']\n        T = case['T']\n        dt_cle = case['dt']\n        tau_hybrid = case['tau']\n        r_thresh = case['r_thresh']\n\n        n_thr = int(np.floor(Omega * x_mid_star))\n        n0 = int(np.floor(0.1 * Omega))\n\n        ssa_seed, cle_seed, hybrid_seed = rng_seeds[i]\n\n        # --- Propensity functions ---\n        stoichiometry = np.array([1, -1, 1, -1], dtype=np.float64)\n\n        def propensities_ssa(n, p, O):\n            if n  0: return np.zeros(4)\n            a = np.zeros(4)\n            a[0] = p['k1'] * p['a0'] * n * (n - 1) / O if n >= 2 else 0\n            a[1] = p['k2'] * n * (n - 1) * (n - 2) / (O**2) if n >= 3 else 0\n            a[2] = p['k3'] * p['b0'] * O\n            a[3] = p['k4'] * n if n >= 1 else 0\n            return a\n\n        def propensities_continuous(n, p, O):\n            n = max(n, 0.0)\n            a = np.zeros(4)\n            a[0] = p['k1'] * p['a0'] * n * max(0.0, n - 1.0) / O\n            a[1] = p['k2'] * n * max(0.0, n - 1.0) * max(0.0, n - 2.0) / (O**2)\n            a[2] = p['k3'] * p['b0'] * O\n            a[3] = p['k4'] * n\n            return a\n\n        # --- Simulators ---\n\n        def ssa_simulator(p, O, n_initial, T_final, seed):\n            rng = np.random.default_rng(seed)\n            t = 0.0\n            n = float(n_initial)\n            history = [(t, n)]\n            while t  T_final:\n                props = propensities_ssa(n, p, O)\n                a0_total = np.sum(props)\n                if a0_total = 1e-10:\n                    t = T_final\n                    history.append((t, n))\n                    break\n                \n                dt_reaction = rng.exponential(1.0 / a0_total)\n                \n                r2 = rng.random()\n                \n                reaction_idx = np.searchsorted(np.cumsum(props), r2 * a0_total)\n                \n                t += dt_reaction\n                if t > T_final:\n                    history.append((T_final, n))\n                    break\n\n                n += stoichiometry[reaction_idx]\n                history.append((t, n))\n            return history\n\n        def cle_simulator(p, O, n_initial, T_final, dt, seed):\n            rng = np.random.default_rng(seed)\n            t = 0.0\n            n = float(n_initial)\n            num_steps = int(T_final / dt)\n            history = [n] * (num_steps + 1)\n            \n            for i in range(num_steps):\n                props = propensities_continuous(n, p, O)\n                mu = np.dot(stoichiometry, props)\n                sigma2 = np.sum(props)\n                \n                if sigma2  0: sigma2 = 0\n\n                dW = rng.normal(0.0, np.sqrt(dt))\n                n_new = n + mu * dt + np.sqrt(sigma2) * dW\n                \n                n = abs(n_new) # Reflection boundary\n                history[i+1] = n\n            \n            times = np.linspace(0, T_final, num_steps + 1)\n            return list(zip(times, history))\n\n        def hybrid_simulator(p, O, n_initial, T_final, tau, r_thr, seed):\n            rng = np.random.default_rng(seed)\n            t = 0.0\n            n = float(n_initial)\n            num_steps = int(T_final / tau)\n            history = [n] * (num_steps + 1)\n            \n            for i in range(num_steps):\n                props = propensities_continuous(n, p, O)\n                delta_n = 0.0\n                \n                for j in range(4):\n                    a_j = props[j]\n                    if a_j >= r_thr:\n                        mean = a_j * tau\n                        # Gaussian approximation for number of events\n                        num_events = rng.normal(mean, np.sqrt(mean))\n                    else:\n                        # Poisson for number of events\n                        lam = a_j * tau\n                        if lam > 0:\n                            num_events = rng.poisson(lam)\n                        else:\n                            num_events = 0\n                    \n                    delta_n += stoichiometry[j] * num_events\n                    \n                n_new = n + delta_n\n                n = abs(n_new) # Reflection boundary\n                history[i+1] = n\n\n            times = np.linspace(0, T_final, num_steps + 1)\n            return list(zip(times, history))\n\n        # --- Residence Time Analysis ---\n        def calculate_residence_fractions(trajectory, T_final, n_threshold):\n            time_low = 0.0\n            time_up = 0.0\n            \n            for i in range(len(trajectory) - 1):\n                t_start, n_val = trajectory[i]\n                t_end = trajectory[i+1][0]\n                duration = t_end - t_start\n                \n                if n_val  n_threshold:\n                    time_low += duration\n                else:\n                    time_up += duration\n            \n            # The trajectory might not end exactly at T_final, but the total duration of intervals is T_final\n            total_time = time_low + time_up\n            if total_time == 0: return 0.0, 0.0\n            return time_low / total_time, time_up / total_time\n\n        # --- Run simulations and compute errors ---\n        traj_ssa = ssa_simulator(params, Omega, n0, T, ssa_seed)\n        traj_cle = cle_simulator(params, Omega, n0, T, dt_cle, cle_seed)\n        traj_hybrid = hybrid_simulator(params, Omega, n0, T, tau_hybrid, r_thresh, hybrid_seed)\n\n        frac_ssa = calculate_residence_fractions(traj_ssa, T, n_thr)\n        frac_cle = calculate_residence_fractions(traj_cle, T, n_thr)\n        frac_hybrid = calculate_residence_fractions(traj_hybrid, T, n_thr)\n\n        err_cle_low = abs(frac_cle[0] - frac_ssa[0])\n        err_cle_up = abs(frac_cle[1] - frac_ssa[1])\n        err_hyb_low = abs(frac_hybrid[0] - frac_ssa[0])\n        err_hyb_up = abs(frac_hybrid[1] - frac_ssa[1])\n\n        results.extend([err_cle_low, err_cle_up, err_hyb_low, err_hyb_up])\n\n    # --- Final Output ---\n    print(f\"[{','.join(f'{r:.6f}' for r in results)}]\")\n\nsolve()\n```", "id": "2685607"}]}