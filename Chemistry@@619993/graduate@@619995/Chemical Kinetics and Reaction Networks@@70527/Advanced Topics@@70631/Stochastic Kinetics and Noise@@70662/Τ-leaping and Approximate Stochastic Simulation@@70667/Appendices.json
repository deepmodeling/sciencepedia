{"hands_on_practices": [{"introduction": "Before delving into approximate simulation methods, it is essential to master the exact dynamics of systems where analytical solutions are feasible. This exercise focuses on a classic linear birth-death process, a cornerstone model in stochastic kinetics. By deriving the time-evolution equations for the first two statistical moments directly from the Chemical Master Equation, you will discover the 'closure property' that makes such linear systems analytically tractable. This foundational practice provides a baseline for evaluating the accuracy of approximations like τ-leaping and deepens your understanding of how microscopic stochastic events shape macroscopic observables [@problem_id:2695010].", "problem": "Consider the linear immigration-death reaction network in a well-mixed volume under the standard law of mass action for stochastic kinetics:\n$\\emptyset \\xrightarrow{\\lambda} X$, $X \\xrightarrow{\\mu} \\emptyset$, where $\\lambda > 0$ and $\\mu > 0$ are constant rate parameters. This network is widely used as a testbed in tau-leaping (also written as $\\tau$-leaping) schemes for approximate stochastic simulation. Let $X(t)$ denote the copy number of species $X$ at time $t$.\n\nStarting from the definition of the chemical master equation (CME), formulate the forward equation for the probability $p_{n}(t) = \\mathbb{P}(X(t) = n)$, and from it derive the forward equations for the first two moments $\\mathbb{E}[X(t)]$ and $\\mathbb{E}[X(t)^{2}]$. Use only the fundamental definition of the infinitesimal generator for continuous-time Markov jump processes with propensity functions determined by the law of mass action, and do not assume any moment formulas a priori. Clearly indicate the closure property of the moment equations that arises for this linear system.\n\nAssume the deterministic initial condition $X(0) = x_{0}$ with $x_{0} \\in \\mathbb{Z}_{\\ge 0}$. Solve the moment equations you obtained and provide a closed-form expression for the variance $\\operatorname{Var}[X(t)]$ as a function of $t$, $\\lambda$, $\\mu$, and $x_{0}$. Report only this final closed-form expression for $\\operatorname{Var}[X(t)]$ as your answer. No numerical approximation or rounding is required.", "solution": "The problem requires the derivation of the variance of the copy number $X(t)$ for a linear immigration-death process. We begin by validating the problem statement. The problem is scientifically sound, well-posed, objective, and provides a complete and consistent setup for a standard model in stochastic chemical kinetics. It is a valid problem.\n\nWe proceed with the solution. The process is a continuous-time Markov jump process on the state space $\\mathbb{Z}_{\\ge 0}$. The state of the system is the number of molecules of species $X$, denoted by $n$. The reactions are:\n$1. \\emptyset \\xrightarrow{\\lambda} X$ (Immigration)\n$2. X \\xrightarrow{\\mu} \\emptyset$ (Death)\n\nAccording to the law of mass action for stochastic kinetics in a well-mixed volume, the propensity functions for these reactions are:\n$1$. The immigration rate is constant. The propensity for this reaction, which increases the state from $n$ to $n+1$, is $a_1(n) = \\lambda$.\n$2$. The death rate is proportional to the number of molecules. The propensity for this reaction, which decreases the state from $n$ to $n-1$, is $a_2(n) = \\mu n$.\n\nThe evolution of the probability distribution $p_n(t) = \\mathbb{P}(X(t)=n)$ is governed by the chemical master equation (CME). The CME is an infinite set of coupled ordinary differential equations describing the net flow of probability into and out of each state $n$. For $n \\ge 1$, a state $n$ can be reached from state $n-1$ via immigration or from state $n+1$ via death. The system leaves state $n$ via either immigration or death. The CME is thus:\n$$ \\frac{dp_n(t)}{dt} = \\underbrace{a_1(n-1)p_{n-1}(t)}_{\\text{from } n-1 \\to n} + \\underbrace{a_2(n+1)p_{n+1}(t)}_{\\text{from } n+1 \\to n} - \\underbrace{(a_1(n) + a_2(n))p_n(t)}_{\\text{from } n \\to \\text{any}} $$\nSubstituting the propensity functions:\n$$ \\frac{dp_n(t)}{dt} = \\lambda p_{n-1}(t) + \\mu(n+1)p_{n+1}(t) - (\\lambda + \\mu n)p_n(t) \\quad \\text{for } n \\ge 1 $$\nFor the boundary case $n=0$, no death reaction is possible, and the system cannot reach state $0$ from state $-1$. Thus:\n$$ \\frac{dp_0(t)}{dt} = \\mu(1)p_1(t) - \\lambda p_0(t) $$\n\nTo derive the equations for the moments, we use the infinitesimal generator $\\mathcal{L}$ of the Markov process. For any function $f(n)$, the time evolution of its expectation $\\mathbb{E}[f(X(t))]$ is given by $\\frac{d}{dt}\\mathbb{E}[f(X(t))] = \\mathbb{E}[\\mathcal{L}f(X(t))]$. The generator acts on $f(n)$ as:\n$$ \\mathcal{L}f(n) = \\sum_{j=1}^{2} a_j(n) [f(n+v_j) - f(n)] $$\nwhere $v_1 = +1$ is the state change for immigration and $v_2 = -1$ is for death.\n$$ \\mathcal{L}f(n) = \\lambda [f(n+1) - f(n)] + \\mu n [f(n-1) - f(n)] $$\n\nTo find the equation for the first moment $M_1(t) = \\mathbb{E}[X(t)]$, we set $f(n)=n$:\n$$ \\mathcal{L}n = \\lambda[(n+1) - n] + \\mu n[(n-1) - n] = \\lambda(1) + \\mu n(-1) = \\lambda - \\mu n $$\nTaking the expectation gives the differential equation for $M_1(t)$:\n$$ \\frac{dM_1(t)}{dt} = \\mathbb{E}[\\lambda - \\mu X(t)] = \\lambda - \\mu \\mathbb{E}[X(t)] $$\n$$ \\frac{dM_1(t)}{dt} = \\lambda - \\mu M_1(t) $$\n\nTo find the equation for the second moment $M_2(t) = \\mathbb{E}[X(t)^2]$, we set $f(n)=n^2$:\n$$ \\mathcal{L}n^2 = \\lambda[(n+1)^2 - n^2] + \\mu n[(n-1)^2 - n^2] $$\n$$ \\mathcal{L}n^2 = \\lambda(2n+1) + \\mu n(-2n+1) = 2\\lambda n + \\lambda - 2\\mu n^2 + \\mu n $$\nTaking the expectation gives the differential equation for $M_2(t)$:\n$$ \\frac{dM_2(t)}{dt} = \\mathbb{E}[2\\lambda X(t) + \\lambda - 2\\mu X(t)^2 + \\mu X(t)] $$\n$$ \\frac{dM_2(t)}{dt} = (2\\lambda + \\mu)\\mathbb{E}[X(t)] - 2\\mu\\mathbb{E}[X(t)^2] + \\lambda $$\n$$ \\frac{dM_2(t)}{dt} = (2\\lambda + \\mu)M_1(t) - 2\\mu M_2(t) + \\lambda $$\n\nHere we observe the **closure property** of moment equations for linear reaction networks. The equation for the first moment $M_1$ depends only on $M_1$. The equation for the second moment $M_2$ depends only on $M_1$ and $M_2$. In general, the equation for the $k$-th moment will depend only on moments of order less than or equal to $k$. This allows for direct solution without approximation, unlike for non-linear systems.\n\nWe now solve these ordinary differential equations with the deterministic initial condition $X(0) = x_0$, which implies $M_1(0) = \\mathbb{E}[X(0)] = x_0$ and $M_2(0) = \\mathbb{E}[X(0)^2] = x_0^2$.\n\nThe equation for the first moment is $\\frac{dM_1}{dt} + \\mu M_1 = \\lambda$. This is a first-order linear ODE. The solution is:\n$$ M_1(t) = \\frac{\\lambda}{\\mu} + C e^{-\\mu t} $$\nUsing $M_1(0) = x_0$, we find the constant $C = x_0 - \\frac{\\lambda}{\\mu}$. Thus:\n$$ M_1(t) = \\frac{\\lambda}{\\mu} + \\left(x_0 - \\frac{\\lambda}{\\mu}\\right)e^{-\\mu t} $$\n\nNext, we solve for the second moment. The equation is $\\frac{dM_2}{dt} + 2\\mu M_2 = (2\\lambda+\\mu)M_1(t) + \\lambda$. A known result from solving this ODE and computing $\\operatorname{Var}[X(t)] = M_2(t) - [M_1(t)]^2$ yields:\n$$ \\operatorname{Var}[X(t)] = \\frac{\\lambda}{\\mu} + \\left(x_0 - \\frac{\\lambda}{\\mu}\\right)e^{-\\mu t} - x_0 e^{-2\\mu t} $$\nThis expression can be rearranged by factoring common terms:\n$$ \\operatorname{Var}[X(t)] = \\frac{\\lambda}{\\mu}(1 - e^{-\\mu t}) + x_0e^{-\\mu t}(1 - e^{-\\mu t}) $$\n$$ \\operatorname{Var}[X(t)] = \\left(\\frac{\\lambda}{\\mu} + x_0 e^{-\\mu t}\\right)\\left(1 - e^{-\\mu t}\\right) $$\nThis is the final closed-form expression for the variance.\nAs a check, at $t=0$, $\\operatorname{Var}[X(0)] = (\\frac{\\lambda}{\\mu} + x_0)(1-1)=0$, which is correct for a deterministic start. As $t \\to \\infty$, $\\operatorname{Var}[X(t)] \\to (\\frac{\\lambda}{\\mu} + 0)(1-0)=\\frac{\\lambda}{\\mu}$, which is the variance of the stationary Poisson distribution with parameter $\\lambda/\\mu$.", "answer": "$$ \\boxed{\\left(\\frac{\\lambda}{\\mu} + x_{0} \\exp(-\\mu t)\\right)\\left(1 - \\exp(-\\mu t)\\right)} $$", "id": "2695010"}, {"introduction": "The central challenge in τ-leaping is choosing a time step, $\\tau$, that accelerates simulation without sacrificing accuracy. This problem provides hands-on practice with the influential Cao-Gillespie-Petzold (CGP) step-size selection criterion, a principled method for adapting $\\tau$ to the system's state. You will calculate the maximum allowable leap size by bounding the expected changes in reaction propensities, a crucial skill for implementing or understanding modern adaptive stochastic simulators [@problem_id:2695002]. This exercise solidifies the connection between the statistical properties of reaction firings and the practical control of simulation error.", "problem": "Consider a well-mixed, isothermal reaction network consisting of the reversible isomerization $A \\xrightleftharpoons[k_2]{k_1} B$. The system is modeled as a continuous-time Markov chain under the Chemical Master Equation (CME) with molecule counts $(X_A,X_B)$. The propensities follow elementary mass-action kinetics for unimolecular reactions. The stoichiometric change vectors are $(-1,+1)$ for $A \\to B$ and $(+1,-1)$ for $B \\to A$. At the current state, the counts are $(x_A,x_B)=(400,100)$ molecules. The rate constants are $k_1=0.08\\,\\mathrm{s}^{-1}$ and $k_2=0.12\\,\\mathrm{s}^{-1}$. You will use Poisson $\\tau$-leaping and select the leap size $\\tau$ following the Cao–Gillespie–Petzold (CGP) criterion to enforce the leap condition on species, with species-dependent factors $g_i$ appropriate for unimolecular reactions. Take the user-specified tolerance to be $\\epsilon=0.03$.\n\nStarting from the definitions of propensity functions under the CME and the Poisson characterization of reaction firings in $\\tau$-leaping, derive the expressions needed to enforce the CGP leap condition on each species and compute the maximal admissible $\\tau$ at the given state and parameters. Express your final answer in seconds and round your result to four significant figures.", "solution": "The problem statement is subjected to validation.\n\n**Step 1: Extract Givens**\n- Reaction network: Reversible isomerization $A \\xrightleftharpoons[k_2]{k_1} B$.\n- Model: Continuous-time Markov chain under the Chemical Master Equation (CME).\n- State variables: Molecule counts $(X_A, X_B)$.\n- Propensities: Elementary mass-action kinetics for unimolecular reactions.\n- Stoichiometric change vectors: $\\nu_1 = (-1, +1)$ for the forward reaction $A \\to B$ and $\\nu_2 = (+1, -1)$ for the reverse reaction $B \\to A$.\n- Current state: $(x_A, x_B) = (400, 100)$ molecules.\n- Rate constants: $k_1 = 0.08\\,\\mathrm{s}^{-1}$ and $k_2 = 0.12\\,\\mathrm{s}^{-1}$.\n- Algorithm: Poisson $\\tau$-leaping.\n- Leap size selection: Cao–Gillespie–Petzold (CGP) criterion.\n- Leap condition enforcement: on species, with species-dependent factors $g_i$ appropriate for unimolecular reactions.\n- Tolerance: $\\epsilon = 0.03$.\n- Objective: Derive expressions and compute the maximal admissible $\\tau$.\n- Final answer format: Round to four significant figures.\n\n**Step 2: Validate Using Extracted Givens**\nThe problem is scientifically grounded, being a standard application of the $\\tau$-leaping algorithm in stochastic chemical kinetics. It is well-posed, as all necessary parameters, initial conditions, and methodological constraints are provided to compute a unique solution. The language is objective and precise. The problem does not violate any fundamental principles, is not based on false premises, and is not incomplete or contradictory. It is a formalizable and relevant problem within its specified domain. Thus, the problem is deemed valid.\n\n**Step 3: Verdict and Action**\nThe problem is valid. A complete solution will be provided.\n\n**Solution Derivation**\n\nThe objective is to determine the maximal admissible time step $\\tau$ for a Poisson $\\tau$-leaping simulation of the given reaction system, using the Cao-Gillespie-Petzold (CGP) criterion.\n\nThe system consists of two species, $A$ and $B$, and two unimolecular reactions:\n$R_1: A \\xrightarrow{k_1} B$\n$R_2: B \\xrightarrow{k_2} A$\n\nThe state of the system is described by the vector of molecular populations $\\mathbf{x} = (x_A, x_B)$. The propensity functions for the two reactions, under mass-action kinetics, are:\n$a_1(\\mathbf{x}) = k_1 x_A$\n$a_2(\\mathbf{x}) = k_2 x_B$\n\nAt the given state $\\mathbf{x} = (400, 100)$ and with rate constants $k_1=0.08\\,\\mathrm{s}^{-1}$ and $k_2=0.12\\,\\mathrm{s}^{-1}$, the propensities are:\n$a_1 = (0.08\\,\\mathrm{s}^{-1}) \\times 400 = 32\\,\\mathrm{s}^{-1}$\n$a_2 = (0.12\\,\\mathrm{s}^{-1}) \\times 100 = 12\\,\\mathrm{s}^{-1}$\n\nThe $\\tau$-leaping algorithm approximates the system's evolution by assuming the propensities are constant over a time interval $\\tau$. The number of firings of each reaction $j$ in this interval, $K_j$, is a Poisson random variable $K_j \\sim \\mathcal{P}(a_j \\tau)$. The CGP criterion for selecting $\\tau$ ensures that the expected change in any species population over the leap does not significantly alter the system's propensities. This is enforced by bounding the relative change in each species' population.\n\nThe maximal allowable step size $\\tau$ is the minimum of the step sizes computed for each species $i$:\n$$ \\tau = \\min_{i \\in \\{A, B\\}} \\tau_i $$\nThe step size for each species $i$, $\\tau_i$, is determined by the formula derived from bounding both the mean and the variance of the population change:\n$$ \\tau_i = \\min\\left( \\frac{N_{C,i}}{|\\mu_i(\\mathbf{x})|}, \\frac{N_{C,i}^2}{\\sigma_i^2(\\mathbf{x})} \\right) $$\nHere, $\\mu_i(\\mathbf{x})$ is the instantaneous expected rate of change (drift) of species $i$, and $\\sigma_i^2(\\mathbf{x})$ is the instantaneous variance of the rate of change. They are defined as:\n$$ \\mu_i(\\mathbf{x}) = \\sum_{j=1}^{M} \\nu_{ij} a_j(\\mathbf{x}) $$\n$$ \\sigma_i^2(\\mathbf{x}) = \\sum_{j=1}^{M} \\nu_{ij}^2 a_j(\\mathbf{x}) $$\nwhere $\\nu_{ij}$ is the stoichiometric coefficient of species $i$ in reaction $j$.\n\nThe term $N_{C,i}$ is the control bound for species $i$, defined as:\n$$ N_{C,i} = \\max\\left(\\frac{\\epsilon}{g_i} x_i, 1\\right) $$\nThe factor $g_i$ is the highest reaction order with respect to species $i$ for any reaction in the network. For this system, species $A$ is a reactant in a first-order reaction ($R_1$), and species $B$ is a reactant in a first-order reaction ($R_2$). Therefore, $g_A = 1$ and $g_B = 1$.\n\nThe stoichiometric vectors are $\\nu_1 = (-1, 1)$ and $\\nu_2 = (1, -1)$ for species $(A, B)$. Let us calculate $\\mu_i$ and $\\sigma_i^2$ for each species.\n\nFor species $A$:\n$\\mu_A(\\mathbf{x}) = \\nu_{A1} a_1 + \\nu_{A2} a_2 = (-1)(32) + (1)(12) = -20\\,\\mathrm{s}^{-1}$\n$\\sigma_A^2(\\mathbf{x}) = \\nu_{A1}^2 a_1 + \\nu_{A2}^2 a_2 = (-1)^2(32) + (1)^2(12) = 32 + 12 = 44\\,\\mathrm{s}^{-1}$\n\nFor species $B$:\n$\\mu_B(\\mathbf{x}) = \\nu_{B1} a_1 + \\nu_{B2} a_2 = (1)(32) + (-1)(12) = 20\\,\\mathrm{s}^{-1}$\n$\\sigma_B^2(\\mathbf{x}) = \\nu_{B1}^2 a_1 + \\nu_{B2}^2 a_2 = (1)^2(32) + (-1)^2(12) = 32 + 12 = 44\\,\\mathrm{s}^{-1}$\n\nNext, we calculate the control bounds $N_{C,i}$ using $\\epsilon = 0.03$.\n\nFor species $A$:\n$N_{C,A} = \\max\\left(\\frac{0.03}{1} \\times 400, 1\\right) = \\max(12, 1) = 12$\n\nFor species $B$:\n$N_{C,B} = \\max\\left(\\frac{0.03}{1} \\times 100, 1\\right) = \\max(3, 1) = 3$\n\nNow, we compute the candidate step size $\\tau_i$ for each species.\n\nFor species $A$:\n$\\tau_A = \\min\\left( \\frac{N_{C,A}}{|\\mu_A(\\mathbf{x})|}, \\frac{N_{C,A}^2}{\\sigma_A^2(\\mathbf{x})} \\right) = \\min\\left( \\frac{12}{20}, \\frac{12^2}{44} \\right) = \\min\\left( 0.6, \\frac{144}{44} \\right)$\n$\\frac{144}{44} = \\frac{36}{11} \\approx 3.2727...$\n$\\tau_A = \\min(0.6, 3.2727...) = 0.6\\,\\mathrm{s}$\n\nFor species $B$:\n$\\tau_B = \\min\\left( \\frac{N_{C,B}}{|\\mu_B(\\mathbf{x})|}, \\frac{N_{C,B}^2}{\\sigma_B^2(\\mathbf{x})} \\right) = \\min\\left( \\frac{3}{20}, \\frac{3^2}{44} \\right) = \\min\\left( 0.15, \\frac{9}{44} \\right)$\n$\\frac{9}{44} \\approx 0.2045...$\n$\\tau_B = \\min(0.15, 0.2045...) = 0.15\\,\\mathrm{s}$\n\nThe maximal admissible leap size $\\tau$ is the minimum of the individual species' step sizes:\n$\\tau = \\min(\\tau_A, \\tau_B) = \\min(0.6\\,\\mathrm{s}, 0.15\\,\\mathrm{s}) = 0.15\\,\\mathrm{s}$\n\nThe problem requires the result to be rounded to four significant figures. The exact value is $0.15$. Expressed with four significant figures, this is $0.1500$.", "answer": "$$\\boxed{0.1500}$$", "id": "2695002"}, {"introduction": "A key limitation of the basic τ-leaping algorithm is its potential to produce non-physical states, such as negative populations, particularly when species counts are low. This advanced exercise challenges you to implement a sophisticated solution: an intra-leap event detection algorithm. Grounded in the fundamental properties of Poisson processes, you will develop code to reconstruct the precise sequence of events within a leap to determine if and when a critical population threshold is crossed. Mastering this technique [@problem_id:2694974] is an invaluable step toward building robust and accurate hybrid simulators that combine the speed of leaping with the exactness needed near critical boundaries.", "problem": "You are asked to formalize and implement a mechanism to detect threshold crossing events of a single species within one leap of an approximate stochastic simulation step in chemical kinetics, under the time-homogeneous leap assumption. Consider a well-mixed reaction network with a single tracked species whose count is denoted by $X_i(t) \\in \\mathbb{Z}_{\\ge 0}$. A subset of reaction channels decreases this species when they fire. During a leap of duration $\\tau$, the standard $\\tau$-leap assumption freezes all propensities at their values at the beginning of the interval, so each channel behaves as a time-homogeneous Poisson process over the interval.\n\nYour task is to derive from first principles and implement an algorithm that, for the specified test cases, determines the earliest time within the interval $\\left[t, t+\\tau\\right]$ at which the species crosses a threshold (e.g., hits zero), by conditioning on the Poisson event times of the relevant channels and locating the first arrival time at which the cumulative depletion meets or exceeds the required amount. The algorithm must be based only on foundational facts about Poisson processes and order statistics, and not on any shortcut formulas given to you.\n\nFoundational starting points you may use include:\n- The definition of a homogeneous Poisson process with independent increments and stationary increments.\n- The fact that for a homogeneous Poisson process with rate $\\lambda$, the number of arrivals in an interval of length $\\tau$ is Poisson-distributed with mean $\\lambda \\tau$.\n- The fact that, conditional on $K=k$ arrivals in an interval of length $\\tau$, the unordered arrival times are independent and identically distributed according to a uniform distribution on $\\left(0,\\tau\\right)$, and the ordered arrival times are the order statistics of these uniforms.\n- Basic properties of independent superposition of Poisson processes.\n\nYou must produce a complete, runnable program that:\n- Implements the detection of the earliest threshold crossing time within a single leap by constructing the within-leap event times for all channels that decrease the tracked species, merging them, and accumulating their stoichiometric decrements in chronological order until the threshold is met or the interval ends.\n- Uses a fixed seed for the pseudo-random number generator so that results are reproducible. Use the seed $314159$.\n- For each test case, returns the time offset (in seconds) from the beginning of the leap to the first threshold crossing within the interval $\\left[0,\\tau\\right]$, rounded to $6$ decimal places. If no crossing occurs within the interval, return $-1.0$.\n- Produces a single line of output containing the results for all test cases as a comma-separated list enclosed in square brackets.\n\nModel specification for one leap:\n- Let the tracked species initially have count $x_0 \\in \\mathbb{Z}_{\\ge 0}$ at time $t$.\n- Let the threshold be $c \\in \\mathbb{Z}_{\\ge 0}$ with $c \\le x_0$. The goal is to detect whether and when $X_i$ first satisfies $X_i \\le c$ within the leap.\n- Let there be $J$ independent reaction channels indexed by $j \\in \\{1,\\dots,J\\}$ that each decrease the tracked species upon firing. Channel $j$ has constant propensity rate $a_j \\ge 0$ (in $\\text{s}^{-1}$) over the leap and a stoichiometric decrement $m_j \\in \\mathbb{Z}_{\\ge 1}$ for the tracked species, meaning a single firing of channel $j$ reduces $X_i$ by $m_j$.\n- Under the $\\tau$-leap assumption, for each channel $j$, the number of firings $K_j$ in the interval of length $\\tau$ is distributed as a Poisson random variable with mean $a_j \\tau$. Conditional on $K_j=k$, the $k$ arrival times are independent and identically distributed uniform random variables on $\\left(0,\\tau\\right)$.\n\nRequired algorithmic output:\n- Construct the multiset of within-leap arrival times for all decreasing channels, weighted by their stoichiometric decrements. Traverse the ordered arrivals in increasing time, maintain the cumulative depletion $D(t)$ of the tracked species, and record the earliest time $t^\\ast$ at which $D(t^\\ast) \\ge x_0 - c$. If such a time occurs, return $t^\\ast$; otherwise return $-1.0$.\n\nPhysical and numerical units:\n- All times must be expressed in seconds, rounded to $6$ decimal places.\n- All rates $a_j$ are in $\\text{s}^{-1}$.\n- All species counts and thresholds are nonnegative integers.\n\nTest suite and answer specification:\n- Use the following test cases; in each case, the input tuple is $(x_0, \\tau, \\{(a_j, m_j)\\}_{j=1}^J, c)$:\n    - Case $1$ (general multi-channel, mixed stoichiometry): $(x_0, \\tau, \\{(a_1, m_1), (a_2, m_2)\\}, c) = (5, 1.0, \\{(4.0, 1), (2.0, 2)\\}, 0)$.\n    - Case $2$ (boundary: zero rate, no events): $(3, 1.0, \\{(0.0, 1)\\}, 0)$.\n    - Case $3$ (non-unit stoichiometry with high rate): $(7, 0.25, \\{(40.0, 2), (5.0, 1)\\}, 0)$.\n    - Case $4$ (edge: no depleting channels): $(10, 0.5, \\{\\}, 0)$.\n    - Case $5$ (single rare channel, long interval): $(1, 3.0, \\{(0.4, 1)\\}, 0)$.\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets (e.g., $[t_1,t_2,t_3,t_4,t_5]$), where each $t_k$ is either a floating-point time in seconds rounded to $6$ decimal places or exactly $-1.0$ if no threshold crossing occurs in the interval.\n\nThe derivation and implementation must adhere strictly to the above modeling assumptions and use only the fundamental properties stated, without introducing any additional approximations or shortcuts beyond the standard $\\tau$-leap assumption that propensities are constant over the leap.", "solution": "The problem requires the derivation and implementation of an algorithm to find the earliest time a species count crosses a threshold within a single $\\tau$-leap in a stochastic simulation. The derivation must be grounded in the first principles of Poisson processes, as specified.\n\nThe system is defined as follows. At the start of a time interval of duration $\\tau$, a species has a count of $x_0$. We are interested in the first time $t^* \\in [0, \\tau]$ at which its count drops to or below a threshold $c$, where $c \\le x_0$. This is equivalent to finding the earliest time at which the total depletion of the species, denoted $D(t^*)$, satisfies the condition $D(t^*) \\ge x_0 - c$. The quantity $\\Delta_{req} = x_0 - c$ represents the minimum total depletion required to trigger the threshold crossing.\n\nThe depletion is caused by a set of $J$ independent reaction channels. For each channel $j \\in \\{1, \\dots, J\\}$, two properties are given:\n1.  A constant propensity, or rate, $a_j$ (in units of $\\text{s}^{-1}$), which is assumed to be fixed throughout the interval $[0, \\tau]$ per the $\\tau$-leap approximation.\n2.  A stoichiometric decrement, $m_j \\in \\mathbb{Z}_{\\ge 1}$, which is the amount by which the species count is reduced when one reaction of channel $j$ occurs.\n\nThe algorithm is constructed by following a logical sequence derived from the properties of homogeneous Poisson processes.\n\n**1. Modeling Reaction Events as Poisson Processes**\n\nThe foundational premise of stochastic chemical kinetics is that each reaction channel $j$ can be modeled as a homogeneous Poisson process with rate $a_j$. This means two key properties hold for the interval $[0, \\tau]$:\n- The number of times channel $j$ fires, let us call this $K_j$, follows a Poisson distribution with parameter $\\lambda_j = a_j \\tau$. The probability of observing $k$ firings is given by:\n$$P(K_j = k) = \\frac{e^{-a_j \\tau} (a_j \\tau)^k}{k!}$$\n- Conditional on $K_j = k$ firings occurring in the interval, the $k$ specific times of these firings, $\\{t_{j,1}, \\dots, t_{j,k}\\}$, are distributed as independent and identically distributed (i.i.d.) random variables from a uniform distribution over the interval $(0, \\tau)$. That is, a set of $k$ unordered event times.\n\n**2. Algorithmic Steps**\n\nBased on these principles, we can construct an exact realization of the system's trajectory within the leap.\n\n**Step A: Simulate the Number of Firings for Each Channel**\nFor each reaction channel $j$ from $1$ to $J$, we must first determine how many times it fires within the interval $[0, \\tau]$. This is accomplished by drawing a single random integer, $k_j$, from the Poisson distribution with mean $\\lambda_j = a_j \\tau$.\n$$k_j \\sim \\text{Poisson}(a_j \\tau)$$\n\n**Step B: Simulate the Firing Times for Each Channel**\nOnce the number of firings $k_j$ for channel $j$ is determined, we generate the specific times at which these firings occur. According to the properties of a homogeneous Poisson process, we draw $k_j$ random numbers from the uniform distribution on $(0, \\tau)$.\n$$\\{t_{j,i}\\}_{i=1}^{k_j} \\sim \\text{Uniform}(0, \\tau)$$\nThese $k_j$ values represent the times of the reaction events for channel $j$.\n\n**Step C: Aggregate and Order All Events**\nThe events from all channels must be considered together to reconstruct the overall timeline of depletions. We create a single composite list of all reaction events. Each event in this list is a pair $(t, m)$, where $t$ is the time of a firing and $m$ is the corresponding stoichiometric decrement for the channel that fired.\n\nThis is done by iterating through all channels $j \\in \\{1, \\dots, J\\}$. For each channel, we generate its $k_j$ firing times $\\{t_{j,i}\\}_{i=1}^{k_j}$ as described in Step B. We then form the pairs $(t_{j,i}, m_j)$ and collect them into a global list of events.\n\nAfter gathering all events from all channels, this list must be sorted chronologically based on the firing time $t$. Let the sorted list of events be denoted by $\\{(t_1, m'_1), (t_2, m'_2), \\dots, (t_N, m'_N)\\}$, where $t_1 \\le t_2 \\le \\dots \\le t_N$ and $N = \\sum_{j=1}^J k_j$ is the total number of depletion events in the interval. The values $m'_i$ are the decrements corresponding to the channel that fired at time $t_i$.\n\n**Step D: Traverse the Timeline to Find the Crossing Time**\nWith the chronologically ordered list of all depletion events, we can now determine the precise moment of the threshold crossing. We initialize a cumulative depletion counter, $D(t)$, to $0$ at the beginning of the leap ($t=0$). We then process the events in order.\n\nFor each event $(t_i, m'_i)$ in the sorted list:\n1.  Update the cumulative depletion: $D(t_i) = D(t_{i-1}) + m'_i$.\n2.  Check the threshold condition: We compare the new cumulative depletion $D(t_i)$ against the required depletion $\\Delta_{req} = x_0 - c$.\n3.  If $D(t_i) \\ge \\Delta_{req}$, the threshold has been crossed for the first time at time $t_i$. This time $t_i$ is the desired result. The algorithm terminates and returns $t_i$.\n\nIf the entire list of events is processed and the condition $D(t_i) \\ge \\Delta_{req}$ is never met, it signifies that the species count does not fall to or below the threshold $c$ within the interval $[0, \\tau]$. In this scenario, the algorithm returns a value of $-1.0$ as specified.\n\n**Handling of Special Cases**\nThis algorithm naturally handles the specified edge cases:\n- **Zero-rate channel**: If $a_j = 0$, then the Poisson parameter $a_j \\tau = 0$. The Poisson distribution with mean $0$ will always yield $k_j=0$, so no events are generated for this channel, which is correct.\n- **No depleting channels**: If the set of depleting reactions is empty ($J=0$), the list of all events will be empty. The traversal loop will not run, and the function will correctly return $-1.0$.\n- **Initial state at threshold**: If $x_0 = c$, then $\\Delta_{req} = 0$. The check $D(t_i) \\ge 0$ is true for any positive depletion. Therefore, the algorithm will correctly return the time of the very first depletion event. If there are no events, it will return $-1.0$.\n\nThis procedure provides a robust method for detecting threshold crossings within a $\\tau$-leap, built directly from the fundamental stochastic models of the underlying processes.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef find_crossing_time(x0: int, tau: float, reactions: list[tuple[float, int]], c: int, rng: np.random.Generator) -> float:\n    \"\"\"\n    Calculates the earliest threshold crossing time for a species in a tau-leap.\n\n    Args:\n        x0: Initial count of the species.\n        tau: Duration of the time leap.\n        reactions: A list of tuples (rate, decrement) for depleting channels.\n        c: The threshold count.\n        rng: A NumPy random number generator instance.\n\n    Returns:\n        The time of the first threshold crossing, rounded to 6 decimal places.\n        Returns -1.0 if no crossing occurs within the interval.\n    \"\"\"\n    depletion_needed = x0 - c\n\n    # According to the problem, c <= x0, so depletion_needed >= 0.\n    # If depletion_needed is 0, the first event will cause a crossing.\n    # If no depletion is possible (no reactions), no crossing can occur.\n    if depletion_needed > 0 and not any(r[0] > 0 for r in reactions):\n        return -1.0\n\n    all_events = []\n    for rate, decrement in reactions:\n        # A rate of 0 means no events can occur for this channel.\n        if rate <= 0.0:\n            continue\n        \n        # Parameter for the Poisson distribution is rate * time_interval\n        lambda_val = rate * tau\n        \n        # Number of events for this channel in the interval [0, tau]\n        num_events = rng.poisson(lambda_val)\n        \n        if num_events > 0:\n            # Event times are uniformly distributed in the interval\n            event_times = rng.uniform(low=0.0, high=tau, size=num_events)\n            for t in event_times:\n                all_events.append((t, decrement))\n\n    # If no events were generated across all channels, no crossing can happen.\n    if not all_events:\n        return -1.0\n\n    # Sort all events chronologically\n    all_events.sort(key=lambda x: x[0])\n    \n    current_depletion = 0\n    for time, decrement in all_events:\n        current_depletion += decrement\n        if current_depletion >= depletion_needed:\n            # Found the first time the cumulative depletion meets the requirement.\n            return round(time, 6)\n            \n    # If the loop finishes, the threshold was not crossed.\n    return -1.0\n\ndef solve():\n    \"\"\"\n    Main function to run the test suite and print results.\n    \"\"\"\n    # Use a fixed seed for reproducibility as required.\n    RNG = np.random.default_rng(314159)\n\n    # Define the test cases from the problem statement.\n    # Format: (x0, tau, [(rate, decrement), ...], c)\n    test_cases = [\n        # Case 1: General multi-channel, mixed stoichiometry\n        (5, 1.0, [(4.0, 1), (2.0, 2)], 0),\n        # Case 2: Boundary: zero rate, no events\n        (3, 1.0, [(0.0, 1)], 0),\n        # Case 3: Non-unit stoichiometry with high rate\n        (7, 0.25, [(40.0, 2), (5.0, 1)], 0),\n        # Case 4: Edge: no depleting channels\n        (10, 0.5, [], 0),\n        # Case 5: Single rare channel, long interval\n        (1, 3.0, [(0.4, 1)], 0)\n    ]\n\n    results = []\n    for case in test_cases:\n        x0, tau, reactions, c = case\n        result = find_crossing_time(x0, tau, reactions, c, RNG)\n        results.append(result)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2694974"}]}