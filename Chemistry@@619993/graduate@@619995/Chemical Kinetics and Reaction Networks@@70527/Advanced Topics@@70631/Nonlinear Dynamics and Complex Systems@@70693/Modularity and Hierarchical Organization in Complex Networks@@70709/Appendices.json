{"hands_on_practices": [{"introduction": "The concept of modularity, often quantified by the Newman-Girvan modularity score $Q$, is central to network science. This exercise provides fundamental practice in calculating $Q$ for a given network partition, allowing you to build intuition for how edge distribution affects the score. More importantly, this problem guides you through a thought experiment that reveals a critical weakness of the modularity metric: the resolution limit, where the algorithm may fail to resolve small, dense communities [@problem_id:2656674]. By working through this example, you will gain a deeper, more critical understanding of when and why modularity maximization can be misleading.", "problem": "Consider a reversible chemical reaction network represented as an undirected, unweighted graph in which vertices are chemical species and an undirected edge between two species indicates that they participate together in at least one reversible reaction step. The network is organized into $3$ hypothesized modules, denoted $\\mathcal{A}$, $\\mathcal{B}$, and $\\mathcal{C}$. Modules $\\mathcal{A}$ and $\\mathcal{B}$ are each dense and small; specifically, each is a complete subgraph on $5$ vertices, so that each has $10$ internal edges. Module $\\mathcal{C}$ is a larger dense subgraph with an unknown number of internal edges denoted $L_{\\mathcal{C}} \\in \\mathbb{N}$. Between modules, there is exactly $1$ edge between $\\mathcal{A}$ and $\\mathcal{B}$, exactly $1$ edge between $\\mathcal{A}$ and $\\mathcal{C}$, and exactly $1$ edge between $\\mathcal{B}$ and $\\mathcal{C}$; there are no other edges. You may assume the standard Newmanâ€“Girvan definition of modularity for undirected, unweighted networks, and you may treat the given $3$-module assignment as a candidate partition.\n\nCompute the modularity $Q$ for the partition with $3$ separate modules $\\{\\mathcal{A}\\}, \\{\\mathcal{B}\\}, \\{\\mathcal{C}\\}$ and for the partition in which the two small modules are merged $\\{\\mathcal{A}\\cup\\mathcal{B}\\}, \\{\\mathcal{C}\\}$. By comparing these two values, determine the smallest integer $L_{\\mathcal{C}}^{\\star}$ such that the merged partition strictly increases modularity over the $3$-module partition. Your final answer must be the single integer $L_{\\mathcal{C}}^{\\star}$, with no units and no rounding required.", "solution": "The problem requires the determination of a condition on the number of internal edges $L_{\\mathcal{C}}$ in a module $\\mathcal{C}$ of a network such that merging two other modules, $\\mathcal{A}$ and $\\mathcal{B}$, results in a strict increase in the network's modularity.\n\nFirst, we must define modularity. The Newman-Girvan modularity, $Q$, for an undirected, unweighted network partitioned into a set of communities (modules) is given by the formula:\n$$Q = \\sum_{s} \\left( e_s - a_s^2 \\right)$$\nwhere the sum is over all modules $s$ in the partition. The term $e_s = \\frac{L_s}{m}$ is the fraction of edges in the network that are internal to module $s$, where $L_s$ is the number of edges with both ends in module $s$ and $m$ is the total number of edges in the network. The term $a_s = \\frac{d_s}{2m}$ is the fraction of all edge \"stubs\" that are attached to vertices in module $s$, where $d_s$ is the sum of the degrees of all vertices in module $s$. This can be rewritten as:\n$$Q = \\sum_{s} \\left[ \\frac{L_s}{m} - \\left(\\frac{d_s}{2m}\\right)^2 \\right]$$\n\nTo proceed, we must compute the necessary parameters for the two given partitions.\nThe network consists of three modules: $\\mathcal{A}$, $\\mathcal{B}$, and $\\mathcal{C}$.\nModule $\\mathcal{A}$ is a complete graph on $n_{\\mathcal{A}} = 5$ vertices, so its number of internal edges is $L_{\\mathcal{A}} = \\binom{5}{2} = 10$.\nModule $\\mathcal{B}$ is a complete graph on $n_{\\mathcal{B}} = 5$ vertices, so its number of internal edges is $L_{\\mathcal{B}} = \\binom{5}{2} = 10$.\nModule $\\mathcal{C}$ has an unknown number of internal edges, $L_{\\mathcal{C}}$.\nThe inter-module connections are given: one edge between $\\mathcal{A}$ and $\\mathcal{B}$, one between $\\mathcal{A}$ and $\\mathcal{C}$, and one between $\\mathcal{B}$ and $\\mathcal{C}$. There are no other edges.\n\nThe total number of edges, $m$, in the network is the sum of all internal and inter-module edges:\n$$m = L_{\\mathcal{A}} + L_{\\mathcal{B}} + L_{\\mathcal{C}} + E_{\\mathcal{A}\\mathcal{B}} + E_{\\mathcal{A}\\mathcal{C}} + E_{\\mathcal{B}\\mathcal{C}} = 10 + 10 + L_{\\mathcal{C}} + 1 + 1 + 1 = 23 + L_{\\mathcal{C}}$$\n\nThe total degree of a module $s$, $d_s$, is the sum of the degrees of its nodes. This can be calculated as $d_s = 2L_s + (\\text{number of external edges connected to } s)$.\nFor module $\\mathcal{A}$: $d_{\\mathcal{A}} = 2L_{\\mathcal{A}} + E_{\\mathcal{A}\\mathcal{B}} + E_{\\mathcal{A}\\mathcal{C}} = 2(10) + 1 + 1 = 22$.\nFor module $\\mathcal{B}$: $d_{\\mathcal{B}} = 2L_{\\mathcal{B}} + E_{\\mathcal{A}\\mathcal{B}} + E_{\\mathcal{B}\\mathcal{C}} = 2(10) + 1 + 1 = 22$.\nFor module $\\mathcal{C}$: $d_{\\mathcal{C}} = 2L_{\\mathcal{C}} + E_{\\mathcal{A}\\mathcal{C}} + E_{\\mathcal{B}\\mathcal{C}} = 2L_{\\mathcal{C}} + 1 + 1 = 2L_{\\mathcal{C}} + 2$.\n\nNow, we compute the modularity $Q_1$ for the first partition, $P_1 = \\{\\mathcal{A}, \\mathcal{B}, \\mathcal{C}\\}$.\n$$Q_1 = \\left[\\frac{L_{\\mathcal{A}}}{m} - \\left(\\frac{d_{\\mathcal{A}}}{2m}\\right)^2\\right] + \\left[\\frac{L_{\\mathcal{B}}}{m} - \\left(\\frac{d_{\\mathcal{B}}}{2m}\\right)^2\\right] + \\left[\\frac{L_{\\mathcal{C}}}{m} - \\left(\\frac{d_{\\mathcal{C}}}{2m}\\right)^2\\right]$$\nSubstituting our values:\n$$Q_1 = \\left[\\frac{10}{m} - \\left(\\frac{22}{2m}\\right)^2\\right] + \\left[\\frac{10}{m} - \\left(\\frac{22}{2m}\\right)^2\\right] + \\left[\\frac{L_{\\mathcal{C}}}{m} - \\left(\\frac{2L_{\\mathcal{C}}+2}{2m}\\right)^2\\right]$$\n$$Q_1 = \\frac{20+L_{\\mathcal{C}}}{m} - \\frac{1}{m^2} \\left[ \\left(\\frac{22}{2}\\right)^2 + \\left(\\frac{22}{2}\\right)^2 + \\left(\\frac{2L_{\\mathcal{C}}+2}{2}\\right)^2 \\right]$$\n$$Q_1 = \\frac{20+L_{\\mathcal{C}}}{m} - \\frac{1}{m^2} \\left( 11^2 + 11^2 + (L_{\\mathcal{C}}+1)^2 \\right)$$\n$$Q_1 = \\frac{20+L_{\\mathcal{C}}}{m} - \\frac{121 + 121 + L_{\\mathcal{C}}^2 + 2L_{\\mathcal{C}} + 1}{m^2} = \\frac{20+L_{\\mathcal{C}}}{m} - \\frac{L_{\\mathcal{C}}^2 + 2L_{\\mathcal{C}} + 243}{m^2}$$\nTo combine these terms, we use $m = 23 + L_{\\mathcal{C}}$:\n$$Q_1 = \\frac{(20+L_{\\mathcal{C}})(23+L_{\\mathcal{C}}) - (L_{\\mathcal{C}}^2 + 2L_{\\mathcal{C}} + 243)}{(23+L_{\\mathcal{C}})^2}$$\n$$Q_1 = \\frac{(460 + 43L_{\\mathcal{C}} + L_{\\mathcal{C}}^2) - (L_{\\mathcal{C}}^2 + 2L_{\\mathcal{C}} + 243)}{(23+L_{\\mathcal{C}})^2} = \\frac{41L_{\\mathcal{C}} + 217}{(23+L_{\\mathcal{C}})^2}$$\n\nNext, we compute the modularity $Q_2$ for the second partition, $P_2 = \\{\\mathcal{M}, \\mathcal{C}\\}$, where $\\mathcal{M} = \\mathcal{A} \\cup \\mathcal{B}$.\nFor the merged module $\\mathcal{M}$, the number of internal edges is the sum of edges within $\\mathcal{A}$, within $\\mathcal{B}$, and between $\\mathcal{A}$ and $\\mathcal{B}$:\n$$L_{\\mathcal{M}} = L_{\\mathcal{A}} + L_{\\mathcal{B}} + E_{\\mathcal{A}\\mathcal{B}} = 10 + 10 + 1 = 21$$\nThe total degree of module $\\mathcal{M}$ is the sum of the degrees of its constituent modules:\n$$d_{\\mathcal{M}} = d_{\\mathcal{A}} + d_{\\mathcal{B}} = 22 + 22 = 44$$\nThe parameters for module $\\mathcal{C}$ ($L_{\\mathcal{C}}$, $d_{\\mathcal{C}}$) and the total number of edges $m$ are unchanged.\nThe modularity $Q_2$ is:\n$$Q_2 = \\left[\\frac{L_{\\mathcal{M}}}{m} - \\left(\\frac{d_{\\mathcal{M}}}{2m}\\right)^2\\right] + \\left[\\frac{L_{\\mathcal{C}}}{m} - \\left(\\frac{d_{\\mathcal{C}}}{2m}\\right)^2\\right]$$\nSubstituting the values for the merged partition:\n$$Q_2 = \\left[\\frac{21}{m} - \\left(\\frac{44}{2m}\\right)^2\\right] + \\left[\\frac{L_{\\mathcal{C}}}{m} - \\left(\\frac{2L_{\\mathcal{C}}+2}{2m}\\right)^2\\right]$$\n$$Q_2 = \\frac{21+L_{\\mathcal{C}}}{m} - \\frac{1}{m^2} \\left[ \\left(\\frac{44}{2}\\right)^2 + \\left(\\frac{2L_{\\mathcal{C}}+2}{2}\\right)^2 \\right]$$\n$$Q_2 = \\frac{21+L_{\\mathcal{C}}}{m} - \\frac{1}{m^2} \\left( 22^2 + (L_{\\mathcal{C}}+1)^2 \\right)$$\n$$Q_2 = \\frac{21+L_{\\mathcal{C}}}{m} - \\frac{484 + L_{\\mathcal{C}}^2 + 2L_{\\mathcal{C}} + 1}{m^2} = \\frac{21+L_{\\mathcal{C}}}{m} - \\frac{L_{\\mathcal{C}}^2 + 2L_{\\mathcal{C}} + 485}{m^2}$$\nCombining terms:\n$$Q_2 = \\frac{(21+L_{\\mathcal{C}})(23+L_{\\mathcal{C}}) - (L_{\\mathcal{C}}^2 + 2L_{\\mathcal{C}} + 485)}{(23+L_{\\mathcal{C}})^2}$$\n$$Q_2 = \\frac{(483 + 44L_{\\mathcal{C}} + L_{\\mathcal{C}}^2) - (L_{\\mathcal{C}}^2 + 2L_{\\mathcal{C}} + 485)}{(23+L_{\\mathcal{C}})^2} = \\frac{42L_{\\mathcal{C}} - 2}{(23+L_{\\mathcal{C}})^2}$$\n\nWe are tasked to find the smallest integer $L_{\\mathcal{C}}^{\\star}$ such that the merged partition strictly increases modularity. This corresponds to the condition $Q_2 > Q_1$.\n$$\\frac{42L_{\\mathcal{C}} - 2}{(23+L_{\\mathcal{C}})^2} > \\frac{41L_{\\mathcal{C}} + 217}{(23+L_{\\mathcal{C}})^2}$$\nSince $L_{\\mathcal{C}}$ represents a number of edges, $L_{\\mathcal{C}} \\in \\mathbb{N}$, thus $L_{\\mathcal{C}} \\ge 0$. The denominator $(23+L_{\\mathcal{C}})^2$ is strictly positive. We can therefore multiply both sides of the inequality by this term without affecting the direction of the inequality.\n$$42L_{\\mathcal{C}} - 2 > 41L_{\\mathcal{C}} + 217$$\nSubtracting $41L_{\\mathcal{C}}$ from both sides gives:\n$$L_{\\mathcal{C}} - 2 > 217$$\nAdding $2$ to both sides gives:\n$$L_{\\mathcal{C}} > 219$$\nThe problem requires the smallest integer value of $L_{\\mathcal{C}}$, denoted $L_{\\mathcal{C}}^{\\star}$, that satisfies this condition. The smallest integer strictly greater than $219$ is $220$.\nTherefore, $L_{\\mathcal{C}}^{\\star} = 220$.", "answer": "$$\\boxed{220}$$", "id": "2656674"}, {"introduction": "While topological measures like modularity are powerful, a modular organization in chemical networks often stems from underlying chemical principles. This exercise introduces an alternative, chemically-grounded approach to defining modules based on conservation laws [@problem_id:2656659]. You will first identify conserved moieties by analyzing the left null space of the stoichiometric matrix, $S$, finding linear combinations of species whose total amounts are conserved. These conserved groups form indivisible functional units, providing a rigorous, chemistry-first constraint for partitioning the network into meaningful modules.", "problem": "A closed, well-mixed reaction network has $6$ chemical species $\\{X_1,\\dots,X_6\\}$ and $6$ elementary reactions $\\{R_1,\\dots,R_6\\}$ under mass-action kinetics. The structural properties of the network are specified by the stoichiometric change vectors (columns) $v_r \\in \\mathbb{Z}^{6}$ collected into a stoichiometric matrix $S \\in \\mathbb{Z}^{6 \\times 6}$, where the $j$-th column is $v_j$. The reactions are:\n- $R_1: X_1 + X_4 \\rightarrow X_2 + X_5$ with $v_1 = (-1,\\,+1,\\,0,\\,-1,\\,+1,\\,0)^{\\top}$,\n- $R_2: X_2 + X_5 \\rightarrow X_3 + X_4$ with $v_2 = (0,\\,-1,\\,+1,\\,+1,\\,-1,\\,0)^{\\top}$,\n- $R_3: X_3 + X_4 \\rightarrow X_1 + X_5$ with $v_3 = (+1,\\,0,\\,-1,\\,-1,\\,+1,\\,0)^{\\top}$,\n- $R_4: X_4 \\rightarrow X_5$ with $v_4 = (0,\\,0,\\,0,\\,-1,\\,+1,\\,0)^{\\top}$,\n- $R_5: X_5 \\rightarrow X_4$ with $v_5 = (0,\\,0,\\,0,\\,+1,\\,-1,\\,0)^{\\top}$,\n- $R_6: X_6 + X_5 \\rightarrow X_6 + X_4$ with $v_6 = (0,\\,0,\\,0,\\,+1,\\,-1,\\,0)^{\\top}$.\n\nHence,\n$$\nS \\;=\\;\n\\begin{pmatrix}\n-1 & 0 & +1 & 0 & 0 & 0\\\\\n+1 & -1 & 0 & 0 & 0 & 0\\\\\n0 & +1 & -1 & 0 & 0 & 0\\\\\n-1 & +1 & -1 & -1 & +1 & +1\\\\\n+1 & -1 & +1 & +1 & -1 & -1\\\\\n0 & 0 & 0 & 0 & 0 & 0\n\\end{pmatrix}.\n$$\n\nA conserved moiety is any nonzero vector $l \\in \\mathbb{R}^{6}$ with $l^{\\top} S = 0^{\\top}$. The support of a conserved moiety vector $l$ is the set of indices $i$ with $l_i \\neq 0$. Consider a module partition of species into exactly two nonempty modules $\\mathcal{M}_1$ and $\\mathcal{M}_2$. A partition respects moiety integrity if, for each basis vector $l$ of a nonnegative conserved-moiety basis, the support of $l$ is contained entirely within either $\\mathcal{M}_1$ or $\\mathcal{M}_2$.\n\nDefine the inter-module interaction weight of a partition as follows: each reaction $R_r$ is assigned a positive dimensionless weight $w_r$, with\n$$\nw_1 = 2,\\;\\; w_2 = 1.5,\\;\\; w_3 = 1,\\;\\; w_4 = 0.2,\\;\\; w_5 = 0.2,\\;\\; w_6 = 0.8.\n$$\nFor a given partition, reaction $R_r$ contributes $w_r$ to the inter-module interaction weight if and only if the set of species that participate in $R_r$ (the union of its reactants and products) is not entirely contained within a single module.\n\nTasks:\n1. Starting only from the definition of the stoichiometric matrix, the definition of a conserved moiety as a vector $l$ satisfying $l^{\\top} S = 0^{\\top}$, and linear algebra over $\\mathbb{R}$, compute a nonnegative basis for the conserved moieties of this network, and identify the species in the support of each basis vector.\n2. Under the moiety integrity constraint defined above, among all partitions of the $6$ species into exactly two nonempty modules, determine a partition that minimizes the total inter-module interaction weight. Report the minimal attainable total inter-module interaction weight as a single real number with no units.\n\nYour final answer must be only the minimal total inter-module interaction weight. Do not include any other quantities in the final answer.", "solution": "The problem presents a chemical reaction network and asks for two distinct tasks. First, to determine the fundamental conservation laws of the system, and second, to use these laws to find an optimal modular partition of the species that minimizes inter-module chemical interactions. I shall address these tasks sequentially with the required rigor.\n\nFirst, we must validate the problem statement. The problem provides a set of $6$ species, $6$ reactions, a stoichiometric matrix $S \\in \\mathbb{Z}^{6 \\times 6}$, a definition for conserved moieties, a partitioning constraint, and a cost function to be minimized. All definitions and data are provided explicitly and are consistent with the standard formalism of chemical reaction network theory. The problem is scientifically grounded, well-posed, and contains no ambiguities or contradictions. Therefore, it is a valid problem, and I will proceed with the solution.\n\nPart 1: Computation of a Nonnegative Basis for Conserved Moieties\n\nA conserved moiety is defined as a non-zero vector $l \\in \\mathbb{R}^{6}$ such that $l^{\\top} S = 0^{\\top}$. This is a standard definition for a left null vector of the stoichiometric matrix $S$. The set of all such vectors forms a vector space, which is the left null space of $S$, denoted $\\text{ker}(S^{\\top})$. Our task is to find a basis for this space, with the additional constraint that the basis vectors must be nonnegative, meaning all their components must be greater than or equal to zero.\n\nThe system of linear equations to be solved is $S^{\\top} l = 0$, where $l = (l_1, l_2, l_3, l_4, l_5, l_6)^{\\top}$. The transpose of the given stoichiometric matrix $S$ is:\n$$\nS^{\\top} = \n\\begin{pmatrix}\n-1 & 1 & 0 & -1 & 1 & 0 \\\\\n0 & -1 & 1 & 1 & -1 & 0 \\\\\n1 & 0 & -1 & -1 & 1 & 0 \\\\\n0 & 0 & 0 & -1 & 1 & 0 \\\\\n0 & 0 & 0 & 1 & -1 & 0 \\\\\n0 & 0 & 0 & 1 & -1 & 0\n\\end{pmatrix}\n$$\nWe perform Gaussian elimination to find the null space of $S^{\\top}$.\nAdding the first row to the third row ($R_3 \\leftarrow R_3 + R_1$) gives:\n$$\n\\begin{pmatrix}\n-1 & 1 & 0 & -1 & 1 & 0 \\\\\n0 & -1 & 1 & 1 & -1 & 0 \\\\\n0 & 1 & -1 & -2 & 2 & 0 \\\\\n0 & 0 & 0 & -1 & 1 & 0 \\\\\n0 & 0 & 0 & 1 & -1 & 0 \\\\\n0 & 0 & 0 & 1 & -1 & 0\n\\end{pmatrix}\n$$\nAdding the second row to the third row ($R_3 \\leftarrow R_3 + R_2$) gives:\n$$\n\\begin{pmatrix}\n-1 & 1 & 0 & -1 & 1 & 0 \\\\\n0 & -1 & 1 & 1 & -1 & 0 \\\\\n0 & 0 & 0 & -1 & 1 & 0 \\\\\n0 & 0 & 0 & -1 & 1 & 0 \\\\\n0 & 0 & 0 & 1 & -1 & 0 \\\\\n0 & 0 & 0 & 1 & -1 & 0\n\\end{pmatrix}\n$$\nThe last four rows are linearly dependent. We can reduce them to a single unique row and zero rows, resulting in the row echelon form:\n$$\n\\begin{pmatrix}\n-1 & 1 & 0 & -1 & 1 & 0 \\\\\n0 & -1 & 1 & 1 & -1 & 0 \\\\\n0 & 0 & 0 & -1 & 1 & 0 \\\\\n0 & 0 & 0 & 0 & 0 & 0 \\\\\n0 & 0 & 0 & 0 & 0 & 0 \\\\\n0 & 0 & 0 & 0 & 0 & 0\n\\end{pmatrix}\n$$\nThe system of equations corresponding to this matrix is:\n1. $-l_1 + l_2 - l_4 + l_5 = 0$\n2. $-l_2 + l_3 + l_4 - l_5 = 0$\n3. $-l_4 + l_5 = 0$\n\nThe rank of the matrix is $3$, so the dimension of the null space is $6 - 3 = 3$. We can choose $l_3$, $l_5$, and $l_6$ as free variables.\nFrom equation (3), we have $l_4 = l_5$.\nSubstituting $l_4 = l_5$ into equation (2) gives $-l_2 + l_3 = 0$, which implies $l_2 = l_3$.\nSubstituting $l_2 = l_3$ and $l_4 = l_5$ into equation (1) gives $-l_1 + l_3 - l_5 + l_5 = 0$, which implies $l_1 = l_3$.\nThe general solution vector $l$ is therefore:\n$$\nl = \\begin{pmatrix} l_3 \\\\ l_3 \\\\ l_3 \\\\ l_5 \\\\ l_5 \\\\ l_6 \\end{pmatrix} = l_3 \\begin{pmatrix} 1 \\\\ 1 \\\\ 1 \\\\ 0 \\\\ 0 \\\\ 0 \\end{pmatrix} + l_5 \\begin{pmatrix} 0 \\\\ 0 \\\\ 0 \\\\ 1 \\\\ 1 \\\\ 0 \\end{pmatrix} + l_6 \\begin{pmatrix} 0 \\\\ 0 \\\\ 0 \\\\ 0 \\\\ 0 \\\\ 1 \\end{pmatrix}\n$$\nA basis for the space of conserved moieties is given by the three vectors corresponding to setting one free variable to $1$ and the others to $0$. These are:\n$l^{(1)} = (1, 1, 1, 0, 0, 0)^{\\top}$\n$l^{(2)} = (0, 0, 0, 1, 1, 0)^{\\top}$\n$l^{(3)} = (0, 0, 0, 0, 0, 1)^{\\top}$\nThese vectors consist entirely of nonnegative entries, so they form a valid nonnegative basis.\nThe supports of these basis vectors are:\n- $\\text{supp}(l^{(1)}) = \\{1, 2, 3\\}$, corresponding to species $\\{X_1, X_2, X_3\\}$.\n- $\\text{supp}(l^{(2)}) = \\{4, 5\\}$, corresponding to species $\\{X_4, X_5\\}$.\n- $\\text{supp}(l^{(3)}) = \\{6\\}$, corresponding to species $\\{X_6\\}$.\n\nPart 2: Optimal Partition under Moiety Integrity\n\nThe \"moiety integrity\" constraint requires that for any valid partition of the species into two modules $\\mathcal{M}_1$ and $\\mathcal{M}_2$, the support of each conserved moiety basis vector must lie entirely within one module. This fundamentally means that the species within each support set cannot be separated. The sets of species $\\{X_1, X_2, X_3\\}$, $\\{X_4, X_5\\}$, and $\\{X_6\\}$ must each be treated as an indivisible unit. Let us denote these units as $G_1 = \\{X_1, X_2, X_3\\}$, $G_2 = \\{X_4, X_5\\}$, and $G_3 = \\{X_6\\}$.\n\nThe problem is now reduced to partitioning the set of three units $\\{G_1, G_2, G_3\\}$ into two nonempty modules. There are exactly three such partitions:\n1.  $\\mathcal{M}_1 = G_1$, $\\mathcal{M}_2 = G_2 \\cup G_3$. In terms of species: $\\mathcal{M}_1 = \\{X_1, X_2, X_3\\}$, $\\mathcal{M}_2 = \\{X_4, X_5, X_6\\}$.\n2.  $\\mathcal{M}_1 = G_2$, $\\mathcal{M}_2 = G_1 \\cup G_3$. In terms of species: $\\mathcal{M}_1 = \\{X_4, X_5\\}$, $\\mathcal{M}_2 = \\{X_1, X_2, X_3, X_6\\}$.\n3.  $\\mathcal{M}_1 = G_3$, $\\mathcal{M}_2 = G_1 \\cup G_2$. In terms of species: $\\mathcal{M}_1 = \\{X_6\\}$, $\\mathcal{M}_2 = \\{X_1, X_2, X_3, X_4, X_5\\}$.\n\nWe must now calculate the total inter-module interaction weight for each partition. A reaction $R_r$ with weight $w_r$ contributes to this total if its participating species (reactants and products) are not all contained in a single module. Let's list the participating species sets, $P_r$, for each reaction:\n- $R_1$: $P_1 = \\{X_1, X_4, X_2, X_5\\} \\subset G_1 \\cup G_2$. Weight $w_1 = 2$.\n- $R_2$: $P_2 = \\{X_2, X_5, X_3, X_4\\} \\subset G_1 \\cup G_2$. Weight $w_2 = 1.5$.\n- $R_3$: $P_3 = \\{X_3, X_4, X_1, X_5\\} \\subset G_1 \\cup G_2$. Weight $w_3 = 1$.\n- $R_4$: $P_4 = \\{X_4, X_5\\} \\subset G_2$. Weight $w_4 = 0.2$.\n- $R_5$: $P_5 = \\{X_5, X_4\\} \\subset G_2$. Weight $w_5 = 0.2$.\n- $R_6$: $P_6 = \\{X_6, X_5, X_4\\} \\subset G_2 \\cup G_3$. Weight $w_6 = 0.8$.\n\nNow we evaluate the interaction weight for each partition:\n\nCase 1: $\\mathcal{M}_1 = G_1$, $\\mathcal{M}_2 = G_2 \\cup G_3$.\n- $R_1, R_2, R_3$ involve species from $G_1$ and $G_2$. Since $G_1 \\subset \\mathcal{M}_1$ and $G_2 \\subset \\mathcal{M}_2$, these reactions cross modules.\n- $R_4, R_5$ involve species only from $G_2$, which is entirely in $\\mathcal{M}_2$. These are intra-module.\n- $R_6$ involves species from $G_2$ and $G_3$, both of which are in $\\mathcal{M}_2$. This is intra-module.\nTotal weight $W_1 = w_1 + w_2 + w_3 = 2 + 1.5 + 1 = 4.5$.\n\nCase 2: $\\mathcal{M}_1 = G_2$, $\\mathcal{M}_2 = G_1 \\cup G_3$.\n- $R_1, R_2, R_3$ involve species from $G_1$ and $G_2$. Since $G_2 \\subset \\mathcal{M}_1$ and $G_1 \\subset \\mathcal{M}_2$, these reactions cross modules.\n- $R_4, R_5$ involve species only from $G_2$, which is entirely in $\\mathcal{M}_1$. These are intra-module.\n- $R_6$ involves species from $G_2$ and $G_3$. Since $G_2 \\subset \\mathcal{M}_1$ and $G_3 \\subset \\mathcal{M}_2$, this reaction crosses modules.\nTotal weight $W_2 = w_1 + w_2 + w_3 + w_6 = 2 + 1.5 + 1 + 0.8 = 5.3$.\n\nCase 3: $\\mathcal{M}_1 = G_3$, $\\mathcal{M}_2 = G_1 \\cup G_2$.\n- $R_1, R_2, R_3$ involve species from $G_1$ and $G_2$, both of which are in $\\mathcal{M}_2$. These are intra-module.\n- $R_4, R_5$ involve species only from $G_2$, which is entirely in $\\mathcal{M}_2$. These are intra-module.\n- $R_6$ involves species from $G_2$ and $G_3$. Since $G_3 \\subset \\mathcal{M}_1$ and $G_2 \\subset \\mathcal{M}_2$, this reaction crosses modules.\nTotal weight $W_3 = w_6 = 0.8$.\n\nComparing the total interaction weights: $W_1 = 4.5$, $W_2 = 5.3$, and $W_3 = 0.8$. The minimum value is $0.8$. This minimal weight corresponds to the partition where the catalyst species $X_6$ is in one module and all other species are in the other module. This result is chemically intuitive, as the catalyst acts to connect otherwise separate dynamics.\n\nThe minimal attainable total inter-module interaction weight is $0.8$.", "answer": "$$\n\\boxed{0.8}\n$$", "id": "2656659"}, {"introduction": "Bridging the gap from abstract network theory to practical analysis of kinetic models requires a systematic workflow. This hands-on programming exercise guides you through a complete spectral clustering pipeline, a powerful technique for identifying modules in complex systems [@problem_id:2656656]. Starting from a set of mass-action reactions, you will construct an interaction graph from the system's Jacobian, apply spectral methods to embed the species in a low-dimensional space, and use k-means clustering to recover the modular structure. This practice solidifies the connection between a system's local dynamics and its large-scale organization.", "problem": "Consider a small family of mass-action chemical reaction networks, each interpreted as a weighted, undirected speciesâ€“interaction graph derived from the Jacobian of the species dynamics linearized at a reference concentration. Starting from the fundamental base of mass-action kinetics and ordinary differential equations (ODEs), you are to compute a spectral embedding of the speciesâ€“interaction graph and then perform a clustering of species into putative modules using the k-means algorithm. Finally, you will verify the resulting partition by comparing the total internal strength to the cut size across clusters.\n\nThe fundamental base is as follows. For a set of species concentrations collected in a vector $\\mathbf{x} \\in \\mathbb{R}_{\\ge 0}^{n}$ and a set of reactions indexed by $j \\in \\{1,\\dots,m\\}$ with mass-action rates $v_j(\\mathbf{x})$, the species dynamics are\n$$\n\\frac{d \\mathbf{x}}{dt} \\;=\\; \\mathbf{S}\\, \\mathbf{v}(\\mathbf{x}),\n$$\nwhere $\\mathbf{S} \\in \\mathbb{R}^{n \\times m}$ is the stoichiometric matrix. For each reaction $j$, $v_j(\\mathbf{x})$ is a product of species concentrations raised to stoichiometric orders multiplied by a positive rate constant $k_j$. The Jacobian (the matrix of partial derivatives of the right-hand side with respect to $\\mathbf{x}$) evaluated at a reference concentration $\\mathbf{x}^{\\star}$ is\n$$\n\\mathbf{J} \\;\\equiv\\; \\left. \\frac{\\partial}{\\partial \\mathbf{x}} \\left(\\mathbf{S}\\, \\mathbf{v}(\\mathbf{x})\\right)\\right|_{\\mathbf{x} = \\mathbf{x}^{\\star}} \\;=\\; \\mathbf{S}\\, \\left. \\frac{\\partial \\mathbf{v}}{\\partial \\mathbf{x}} \\right|_{\\mathbf{x} = \\mathbf{x}^{\\star}}.\n$$\nDefine the symmetric, nonnegative weight matrix $\\mathbf{W}$ on species by\n$$\n\\mathbf{W} \\;=\\; \\frac{1}{2}\\left( |\\mathbf{J}| + |\\mathbf{J}|^{\\mathsf{T}} \\right),\n$$\nwith diagonal entries set to zero, where absolute value is taken elementwise. Let $\\mathbf{D}$ be the diagonal degree matrix with entries $D_{ii} = \\sum_{j} W_{ij}$, and consider the symmetric normalized graph Laplacian\n$$\n\\mathbf{L}_{\\mathrm{sym}} \\;=\\; \\mathbf{I} - \\mathbf{D}^{-1/2}\\, \\mathbf{W}\\, \\mathbf{D}^{-1/2}.\n$$\nA $k$-dimensional spectral embedding is obtained by stacking the $k$ eigenvectors of $\\mathbf{L}_{\\mathrm{sym}}$ associated with the $k$ smallest eigenvalues (counting multiplicities) as columns to form $\\mathbf{U} \\in \\mathbb{R}^{n \\times k}$ and then row-normalizing $\\mathbf{U}$ so that each row has unit Euclidean norm (rows of zero norm may be left as zero). A $k$-means clustering is then performed on the rows of this embedded matrix.\n\nVerification of a partition $\\mathcal{C} = \\{C_1,\\dots,C_k\\}$ is done by computing:\n- The internal strength\n$$\nS_{\\mathrm{intra}} \\;=\\; \\sum_{i<j} W_{ij}\\, \\mathbf{1}\\{\\, \\exists\\, \\ell \\text{ with } i \\in C_\\ell \\text{ and } j \\in C_\\ell \\,\\},\n$$\n- The cut size\n$$\nS_{\\mathrm{cut}} \\;=\\; \\sum_{i<j} W_{ij}\\, \\mathbf{1}\\{\\, \\text{for all } \\ell, \\; \\neg(i \\in C_\\ell \\wedge j \\in C_\\ell) \\,\\}.\n$$\nDefine the quality ratio\n$$\nR \\;=\\; \\frac{S_{\\mathrm{intra}}}{S_{\\mathrm{cut}} + \\varepsilon},\n$$\nwith $\\varepsilon = 10^{-12}$ to avoid division by zero in the case $S_{\\mathrm{cut}} = 0$.\n\nUse the following test suite of reaction networks. In each case, the species are indexed by $\\{1,\\dots,n\\}$, the reactions are unimolecular of the form $i \\to j$ with rate $k$ under mass-action kinetics $v(\\mathbf{x}) = k\\, x_i$, and the reference concentration is $\\mathbf{x}^{\\star} = (1,1,\\dots,1)^{\\mathsf{T}}$. For each network, construct $\\mathbf{W}$ via the Jacobian as above, compute the spectral embedding with the specified $k$, run $k$-means with $10$ random initializations and at most $100$ iterations per run, choose the run with the smallest within-cluster sum of squares, and then return the quality ratio $R$.\n\nTest case A (two weakly coupled modules, $n = 6$, $k = 2$):\n- Reactions $(i \\to j, k)$:\n  - $(1 \\to 2, 1.0)$, $(2 \\to 1, 1.0)$, $(2 \\to 3, 1.0)$, $(3 \\to 2, 1.0)$,\n  - $(4 \\to 5, 1.0)$, $(5 \\to 4, 1.0)$, $(5 \\to 6, 1.0)$, $(6 \\to 5, 1.0)$,\n  - $(3 \\to 4, 0.02)$, $(6 \\to 1, 0.02)$.\n\nTest case B (strongly mixed network, $n = 6$, $k = 2$):\n- Reactions $(i \\to j, k)$:\n  - $(1 \\to 4, 0.9)$, $(4 \\to 1, 0.9)$, $(2 \\to 5, 0.9)$, $(5 \\to 2, 0.9)$, $(3 \\to 6, 0.9)$, $(6 \\to 3, 0.9)$,\n  - $(1 \\to 2, 0.8)$, $(2 \\to 3, 0.8)$, $(3 \\to 1, 0.8)$, $(4 \\to 5, 0.8)$, $(5 \\to 6, 0.8)$, $(6 \\to 4, 0.8)$.\n\nTest case C (three weakly coupled modules, $n = 6$, $k = 3$):\n- Reactions $(i \\to j, k)$:\n  - $(1 \\to 2, 1.0)$, $(2 \\to 1, 1.0)$,\n  - $(3 \\to 4, 1.0)$, $(4 \\to 3, 1.0)$,\n  - $(5 \\to 6, 1.0)$, $(6 \\to 5, 1.0)$,\n  - $(2 \\to 3, 0.03)$, $(4 \\to 5, 0.03)$.\n\nTest case D (two disconnected modules, $n = 6$, $k = 2$):\n- Reactions $(i \\to j, k)$:\n  - $(1 \\to 2, 1.0)$, $(2 \\to 1, 1.0)$, $(2 \\to 3, 1.0)$, $(3 \\to 2, 1.0)$,\n  - $(4 \\to 5, 1.0)$, $(5 \\to 4, 1.0)$, $(5 \\to 6, 1.0)$, $(6 \\to 5, 1.0)$.\n- There are no cross-module reactions in this case.\n\nAlgorithmic requirements:\n- Construct $\\mathbf{J}$ for unimolecular reactions using that for $i \\to j$ with rate constant $k$, the only nonzero partial derivative of the reaction rate is $\\partial v/\\partial x_i = k$, which contributes columnwise to $\\mathbf{J}$ as $J_{i,i} \\leftarrow J_{i,i} - k$ and $J_{j,i} \\leftarrow J_{j,i} + k$.\n- Build $\\mathbf{W}$, $\\mathbf{L}_{\\mathrm{sym}}$, compute the $k$ eigenvectors with the smallest eigenvalues, row-normalize, then run $k$-means with $10$ random initializations and at most $100$ iterations each, selecting the run with the smallest within-cluster sum of squares.\n- Compute $R = S_{\\mathrm{intra}}/(S_{\\mathrm{cut}} + 10^{-12})$.\n\nFinal output format:\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets (e.g., $[r_1,r_2,r_3,r_4]$), where $r_i$ is the quality ratio $R$ for test case $i$ as a floating-point number. No additional text or whitespace is permitted.", "solution": "The problem statement is valid. It is scientifically sound, well-posed, and objective. It provides a complete and consistent set of instructions for analyzing the modularity of chemical reaction networks using a standard spectral clustering pipeline. The methodology is grounded in established principles from chemical kinetics, linear algebra, graph theory, and machine learning. No factual errors, contradictions, or ambiguities are present. I will proceed with a detailed solution.\n\nThe core of the problem is to identify modular structures within chemical reaction networks. A module is a group of species that interact strongly with each other but weakly with species outside the group. The provided methodology systematically translates the chemical network into a mathematical graph and then uses spectral methods to partition it.\n\n**1. From Reaction Dynamics to an Interaction Graph**\n\nThe dynamics of the species concentrations $\\mathbf{x} = (x_1, \\dots, x_n)^{\\mathsf{T}}$ are described by a system of ordinary differential equations (ODEs), $\\frac{d\\mathbf{x}}{dt} = \\mathbf{S} \\mathbf{v}(\\mathbf{x})$, where $\\mathbf{S}$ is the stoichiometric matrix and $\\mathbf{v}(\\mathbf{x})$ is the vector of reaction rates. To analyze the interactions between species, we linearize this system around a reference concentration $\\mathbf{x}^{\\star}$. The matrix of this linearization is the Jacobian, $\\mathbf{J}$. Each element $J_{ij} = \\frac{\\partial}{\\partial x_j} (\\frac{dx_i}{dt})$ represents the effect of a small change in the concentration of species $j$ on the rate of change of species $i$.\n\nThe problem specifies unimolecular reactions of the form $i \\to j$ with mass-action rate $v(\\mathbf{x}) = k x_i$. This reaction consumes species $i$ and produces species $j$. The rate is only dependent on $x_i$, so the only non-zero partial derivative of this rate is $\\frac{\\partial v}{\\partial x_i} = k$. The stoichiometric vector for this reaction has a $-1$ for species $i$ and a $+1$ for species $j$. The contribution to the Jacobian matrix $\\mathbf{J}$ is a change in the $i$-th column: the diagonal element $J_{ii}$ decreases by $k$ (due to consumption), and the off-diagonal element $J_{ji}$ increases by $k$ (due to production). We construct the full Jacobian by summing these contributions over all reactions.\n\nThe Jacobian matrix $\\mathbf{J}$ is generally not symmetric. To define a weighted undirected graph of species interactions, we need a symmetric weight matrix $\\mathbf{W}$. The problem defines this via symmetrizing the element-wise absolute value of the Jacobian: $\\mathbf{W} = \\frac{1}{2}(|\\mathbf{J}| + |\\mathbf{J}|^{\\mathsf{T}})$. Taking the absolute value ensures all weights are non-negative, representing the strength of an interaction regardless of whether it is activating or inhibitory. The diagonal entries are set to zero, as we are interested in interactions between distinct species.\n\n**2. Spectral Clustering for Module Detection**\n\nWith the weight matrix $\\mathbf{W}$, we have an undirected graph where species are nodes and $W_{ij}$ is the weight of the edge between species $i$ and $j$. To find clusters in this graph, we employ spectral clustering, a powerful technique based on the properties of the graph Laplacian matrix. The problem uses the symmetrically normalized Laplacian, defined as $\\mathbf{L}_{\\mathrm{sym}} = \\mathbf{I} - \\mathbf{D}^{-1/2}\\mathbf{W}\\mathbf{D}^{-1/2}$, where $\\mathbf{D}$ is the diagonal degree matrix with $D_{ii} = \\sum_j W_{ij}$.\n\nThe key insight of spectral clustering is that the eigenvectors corresponding to the smallest eigenvalues of the Laplacian capture the large-scale structure of the graph. For a graph with $c$ connected components, the Laplacian has $c$ eigenvalues equal to $0$. The corresponding eigenvectors are indicator vectors for these components. For a nearly-decomposable graph (i.e., one with strong modules), the eigenvectors associated with the smallest non-zero eigenvalues (often called Fiedler vectors) will be nearly constant within modules and will change values across the weak connections between them.\n\nWe compute the $k$ eigenvectors of $\\mathbf{L}_{\\mathrm{sym}}$ corresponding to the $k$ smallest eigenvalues. These eigenvectors form the columns of a matrix $\\mathbf{U} \\in \\mathbb{R}^{n \\times k}$. The rows of $\\mathbf{U}$ can be viewed as new coordinates for the $n$ species in a $k$-dimensional Euclidean space. This is the \"spectral embedding.\" In this space, species belonging to the same module are expected to be close to each other. To make the points more amenable to distance-based clustering, we row-normalize the matrix $\\mathbf{U}$, projecting the embeddings onto a unit sphere.\n\n**3. K-Means Clustering and Partition Evaluation**\n\nOnce the species are embedded in the new $k$-dimensional space, we use the k-means algorithm to group them into $k$ clusters. K-means aims to find a partition that minimizes the within-cluster sum of squares (WCSS). As k-means is sensitive to initialization, the problem specifies running the algorithm multiple times ($10$) with random initializations and selecting the partition that yields the minimum WCSS.\n\nFinally, the quality of the resulting partition $\\mathcal{C} = \\{C_1, \\dots, C_k\\}$ is quantified by comparing the total weight of edges within clusters ($S_{\\mathrm{intra}}$) to the total weight of edges between clusters ($S_{\\mathrm{cut}}$). The quality ratio $R = S_{\\mathrm{intra}} / (S_{\\mathrm{cut}} + \\varepsilon)$ serves as the final metric. A high value of $R$ signifies a successful partition of the network into distinct, internally dense modules. The small constant $\\varepsilon = 10^{-12}$ is added to the denominator for numerical stability in the case of perfectly disconnected modules ($S_{\\mathrm{cut}} = 0$).\n\nThe following Python code implements this entire procedure for the four given test cases.", "answer": "```python\nimport numpy as np\nfrom scipy.linalg import eigh\nimport random\n\ndef solve():\n    \"\"\"\n    Main function to solve the problem for all test cases.\n    \"\"\"\n\n    def custom_kmeans(X, k, n_init, max_iter, seed):\n        \"\"\"\n        Performs k-means clustering.\n\n        Args:\n            X (np.ndarray): The data to cluster, shape (n_samples, n_features).\n            k (int): The number of clusters.\n            n_init (int): The number of times to run k-means with different random seeds.\n            max_iter (int): The maximum number of iterations for a single run.\n            seed (int): A seed for the random number generator for reproducibility.\n\n        Returns:\n            np.ndarray: The final cluster labels for each sample.\n        \"\"\"\n        rng = np.random.default_rng(seed)\n        best_labels = None\n        best_wcss = float('inf')\n        n_samples = X.shape[0]\n\n        for _ in range(n_init):\n            # Initialize centroids by picking k unique random points from X\n            initial_indices = rng.choice(n_samples, size=k, replace=False)\n            centroids = X[initial_indices, :]\n            \n            for i in range(max_iter):\n                # Assignment step: assign each point to the nearest centroid\n                dists_sq = np.sum((X[:, np.newaxis, :] - centroids[np.newaxis, :, :])**2, axis=2)\n                labels = np.argmin(dists_sq, axis=1)\n\n                # Update step: recalculate centroids\n                new_centroids = np.copy(centroids)\n                for j in range(k):\n                    cluster_points = X[labels == j]\n                    if cluster_points.shape[0] > 0:\n                        new_centroids[j] = cluster_points.mean(axis=0)\n                \n                # Check for convergence\n                if np.allclose(new_centroids, centroids):\n                    break\n                centroids = new_centroids\n\n            # Calculate Within-Cluster Sum of Squares (WCSS) for this run\n            current_wcss = 0\n            for j in range(k):\n                cluster_points = X[labels == j]\n                if cluster_points.shape[0] > 0:\n                    current_wcss += np.sum((cluster_points - centroids[j])**2)\n            \n            # Keep track of the best result\n            if current_wcss  best_wcss:\n                best_wcss = current_wcss\n                best_labels = labels\n        \n        return best_labels\n\n    test_cases = [\n        {\n            \"name\": \"A\", \"n\": 6, \"k\": 2, \"reactions\": [\n                (1, 2, 1.0), (2, 1, 1.0), (2, 3, 1.0), (3, 2, 1.0),\n                (4, 5, 1.0), (5, 4, 1.0), (5, 6, 1.0), (6, 5, 1.0),\n                (3, 4, 0.02), (6, 1, 0.02)\n            ]\n        },\n        {\n            \"name\": \"B\", \"n\": 6, \"k\": 2, \"reactions\": [\n                (1, 4, 0.9), (4, 1, 0.9), (2, 5, 0.9), (5, 2, 0.9), (3, 6, 0.9), (6, 3, 0.9),\n                (1, 2, 0.8), (2, 3, 0.8), (3, 1, 0.8), (4, 5, 0.8), (5, 6, 0.8), (6, 4, 0.8)\n            ]\n        },\n        {\n            \"name\": \"C\", \"n\": 6, \"k\": 3, \"reactions\": [\n                (1, 2, 1.0), (2, 1, 1.0),\n                (3, 4, 1.0), (4, 3, 1.0),\n                (5, 6, 1.0), (6, 5, 1.0),\n                (2, 3, 0.03), (4, 5, 0.03)\n            ]\n        },\n        {\n            \"name\": \"D\", \"n\": 6, \"k\": 2, \"reactions\": [\n                (1, 2, 1.0), (2, 1, 1.0), (2, 3, 1.0), (3, 2, 1.0),\n                (4, 5, 1.0), (5, 4, 1.0), (5, 6, 1.0), (6, 5, 1.0)\n            ]\n        }\n    ]\n\n    results = []\n    epsilon = 1e-12\n\n    for case in test_cases:\n        n, k, reactions = case['n'], case['k'], case['reactions']\n\n        # 1. Construct the Jacobian matrix J\n        J = np.zeros((n, n))\n        for i, j, rate_const in reactions:\n            # Using 0-based indexing\n            J[i - 1, i - 1] -= rate_const\n            J[j - 1, i - 1] += rate_const\n\n        # 2. Construct the symmetric weight matrix W\n        abs_J = np.abs(J)\n        W = 0.5 * (abs_J + abs_J.T)\n        np.fill_diagonal(W, 0)\n\n        # 3. Construct the symmetric normalized Laplacian L_sym\n        D_diag = np.sum(W, axis=1)\n        D_inv_sqrt_diag = np.zeros_like(D_diag, dtype=float)\n        non_zero_mask = D_diag > 0\n        D_inv_sqrt_diag[non_zero_mask] = 1.0 / np.sqrt(D_diag[non_zero_mask])\n        D_inv_sqrt = np.diag(D_inv_sqrt_diag)\n        L_sym = np.identity(n) - D_inv_sqrt @ W @ D_inv_sqrt\n\n        # 4. Compute the spectral embedding\n        eigenvalues, eigenvectors = eigh(L_sym)\n        U = eigenvectors[:, :k]\n\n        # Row-normalize the embedding U\n        U_norm = np.copy(U)\n        row_norms = np.linalg.norm(U_norm, axis=1, keepdims=True)\n        # Avoid division by zero for rows with zero norm\n        non_zero_rows_mask = (row_norms > 1e-15).flatten()\n        U_norm[non_zero_rows_mask] /= row_norms[non_zero_rows_mask]\n\n        # 5. Perform k-means clustering on the embedded data\n        # Use a fixed seed for reproducibility as required for a deterministic check\n        labels = custom_kmeans(U_norm, k, n_init=10, max_iter=100, seed=42)\n\n        # 6. Compute the quality ratio R\n        S_intra = 0.0\n        S_cut = 0.0\n        for i in range(n):\n            for j in range(i + 1, n):\n                if W[i, j] > 0:\n                    if labels[i] == labels[j]:\n                        S_intra += W[i, j]\n                    else:\n                        S_cut += W[i, j]\n        \n        R = S_intra / (S_cut + epsilon)\n        results.append(R)\n    \n    # Format the results into the required string format\n    print(f\"[{','.join([f'{r:.10f}' for r in results])}]\")\n\nsolve()\n```", "id": "2656656"}]}