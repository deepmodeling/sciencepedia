{"hands_on_practices": [{"introduction": "The first step in analyzing oscillatory behavior is learning to pinpoint the exact conditions under which it can emerge. This exercise provides a foundational workout in this skill using the Brusselator, a canonical model for chemical oscillations. By finding the steady state, linearizing the system, and applying the Routh-Hurwitz stability test, you will derive the precise threshold for the Hopf bifurcation, a fundamental technique applicable to a wide range of planar dynamical systems [@problem_id:2647472].", "problem": "Consider a well-stirred open reactor with two intermediates $X$ and $Y$ interacting through the following mass-action reaction network with chemostatted feed species $A$ and $B$ maintained at constant concentrations:\n- $A \\to X$,\n- $2X + Y \\to 3X$,\n- $B + X \\to Y$,\n- $X \\to \\varnothing$.\n\nUnder standard nondimensionalization that absorbs the fixed concentrations of $A$ and $B$ and scales time by a characteristic outflow rate, the dynamics of the intermediate concentrations $x(t)$ and $y(t)$ are governed by the planar ordinary differential equations (ODEs):\n$$\n\\frac{dx}{dt} \\;=\\; a \\;-\\; (b + 1)\\,x \\;+\\; x^{2} y, \\qquad\n\\frac{dy}{dt} \\;=\\; b\\,x \\;-\\; x^{2} y,\n$$\nwhere $a0$ is a fixed parameter determined by the reservoir concentration of $A$, and $b0$ is a bifurcation parameter determined by the reservoir concentration of $B$.\n\nUsing only mass-action kinetics, linearization about equilibria, and the two-dimensional Routh–Hurwitz test for planar linear systems, determine the unique critical value $b^{\\ast} = b^{\\ast}(a)$ at which the unique positive steady state undergoes a Hopf crossing as $b$ varies with $a$ held fixed. You must verify the algebraic conditions implied by the two-dimensional Routh–Hurwitz test at the steady state and identify $b^{\\ast}(a)$ exactly.\n\nProvide your final answer as a single closed-form analytic expression in terms of $a$. The parameter $b$ is dimensionless, so no units are required. Do not round your answer.", "solution": "The first step is to determine the coordinates of the unique positive steady state, denoted by $(x_s, y_s)$, where the rates of change are zero.\n$$\n\\frac{dx}{dt} = a - (b + 1)x_s + x_s^2 y_s = 0\n$$\n$$\n\\frac{dy}{dt} = b x_s - x_s^2 y_s = 0\n$$\nFrom the second equation, since we are searching for a positive steady state ($x_s > 0$), we can establish the relation $x_s^2 y_s = b x_s$.\n\nWe substitute this result into the first steady-state equation:\n$$\na - (b + 1)x_s + (b x_s) = 0\n$$\nSimplifying the expression:\n$$\na - b x_s - x_s + b x_s = 0\n$$\n$$\na - x_s = 0 \\implies x_s = a\n$$\nNow, we find the corresponding steady-state concentration $y_s$. Using the relation $x_s^2 y_s = b x_s$ and our result $x_s = a$:\n$$\na^2 y_s = b a\n$$\nSince $a > 0$ is given, we can divide by $a$:\n$$\na y_s = b \\implies y_s = \\frac{b}{a}\n$$\nThe unique positive steady state is $(x_s, y_s) = (a, \\frac{b}{a})$. Since $a > 0$ and $b > 0$ are given, both $x_s$ and $y_s$ are positive, as required.\n\nNext, we linearize the system around this steady state by computing the Jacobian matrix $J$. Let the right-hand sides of the ODEs be $f(x, y)$ and $g(x, y)$:\n$$\nf(x, y) = a - (b + 1)x + x^2 y\n$$\n$$\ng(x, y) = b x - x^2 y\n$$\nThe Jacobian matrix is:\n$$\nJ = \\begin{pmatrix} \\frac{\\partial f}{\\partial x}  \\frac{\\partial f}{\\partial y} \\\\ \\frac{\\partial g}{\\partial x}  \\frac{\\partial g}{\\partial y} \\end{pmatrix} = \\begin{pmatrix} -(b + 1) + 2xy  x^2 \\\\ b - 2xy  -x^2 \\end{pmatrix}\n$$\nWe evaluate this matrix at the steady state $(x_s, y_s) = (a, \\frac{b}{a})$. Note that at the steady state, $x_s y_s = a \\cdot \\frac{b}{a} = b$.\n$$\nJ_s = J\\bigg|_{(a, b/a)} = \\begin{pmatrix} -(b + 1) + 2b  a^2 \\\\ b - 2b  -a^2 \\end{pmatrix} = \\begin{pmatrix} b - 1  a^2 \\\\ -b  -a^2 \\end{pmatrix}\n$$\nFor a two-dimensional linear system, a Hopf bifurcation occurs when the eigenvalues of the Jacobian are purely imaginary. The characteristic equation is $\\lambda^2 - T \\lambda + D = 0$, where $T = \\operatorname{Tr}(J_s)$ is the trace and $D = \\det(J_s)$ is the determinant of the Jacobian. The conditions for a Hopf bifurcation are $T = 0$ and $D > 0$.\n\nWe compute the trace and determinant of $J_s$:\n$$\nT = \\text{Tr}(J_s) = (b - 1) + (-a^2) = b - a^2 - 1\n$$\n$$\nD = \\det(J_s) = (b - 1)(-a^2) - (a^2)(-b) = -a^2 b + a^2 + a^2 b = a^2\n$$\nThe first condition for a Hopf bifurcation is $T = 0$. Let $b^{\\ast}$ be the critical value of $b$ at which this occurs:\n$$\nb^{\\ast} - a^2 - 1 = 0 \\implies b^{\\ast} = a^2 + 1\n$$\nThe second condition is $D > 0$. At $b = b^{\\ast}$, the determinant is $D = a^2$. Since it is given that $a > 0$, we have $a^2 > 0$, so this condition is satisfied.\n\nThus, the critical value of the bifurcation parameter $b$ at which the positive steady state undergoes a Hopf bifurcation is $b^{\\ast}(a) = a^2 + 1$. For $b  b^{\\ast}$, $T  0$ and the steady state is stable. For $b > b^{\\ast}$, $T > 0$ and the steady state is unstable, giving rise to a limit cycle. The crossing at $b = b^{\\ast}$ is a Hopf crossing.", "answer": "$$\n\\boxed{a^{2} + 1}\n$$", "id": "2647472"}, {"introduction": "While the stability of a steady state is determined by the Jacobian matrix, the dynamics of a reaction network are fundamentally constrained by its stoichiometry. This practice explores this deeper connection by introducing the concept of the stoichiometric subspace, $\\mathcal{S}$, which is the space of all possible changes in species concentrations. You will learn how this subspace governs the system's dynamics and how to properly analyze stability within this reduced space, providing a more rigorous understanding of why some systems can oscillate while others cannot [@problem_id:2647438].", "problem": "Consider a general mass-action reaction network with species concentration vector $x \\in \\mathbb{R}_{0}^{n}$, stoichiometric matrix $S \\in \\mathbb{R}^{n \\times r}$, and reaction-rate vector $v(x) \\in \\mathbb{R}^{r}$ whose $i$-th component is a mass-action monomial of the form $v_{i}(x) = k_{i} x^{\\alpha_{i}}$, where $k_{i} \\in \\mathbb{R}_{0}$ and $\\alpha_{i} \\in \\mathbb{Z}_{\\ge 0}^{n}$. The dynamics are $\\dot{x} = S v(x)$, and the stoichiometric subspace is $\\mathcal{S} = \\operatorname{im} S \\subseteq \\mathbb{R}^{n}$. Fix a positive equilibrium $x^{*} \\in \\mathbb{R}_{0}^{n}$.\n\nTask $1$ (general structural properties): Starting from the definition of mass-action kinetics and basic linear algebra, derive an explicit formula for the Jacobian matrix $J(x) = \\frac{\\partial}{\\partial x}\\big(S v(x)\\big)$, and show that $\\operatorname{im} J(x) \\subseteq \\mathcal{S}$ for every $x$. Explain why this implies that $J(x^{*})$ has at least $n - \\operatorname{rank}(S)$ zero eigenvalues, corresponding to directions off the stoichiometric subspace. Then, describe how to compute the Jacobian restricted to $\\mathcal{S}$ by choosing a basis matrix $Q \\in \\mathbb{R}^{n \\times r}$ whose columns form a basis for $\\mathcal{S}$, and expressing the reduced Jacobian in stoichiometric coordinates.\n\nTask $2$ (application to a chemostatted mass-action oscillator and Hopf threshold): Consider the chemostatted open reaction network (the classical Brusselator in mass-action form) with internal species $X$ and $Y$ and chemostatted species with fixed concentrations $A$ and $B$:\n- $A \\rightarrow X$ with rate $k_{1} A$,\n- $B + X \\rightarrow Y + D$ with rate $k_{3} B x$,\n- $2 X + Y \\rightarrow 3 X$ with rate $k_{2} x^{2} y$,\n- $X \\rightarrow E$ with rate $k_{4} x$,\nwhere $x$ and $y$ denote the concentrations of $X$ and $Y$, respectively, and $k_{1}, k_{2}, k_{3}, k_{4} \\in \\mathbb{R}_{0}$. Write the dynamics in the form $\\dot{z} = S v(z)$ for $z = (x,y)^{\\top}$, identify the stoichiometric subspace $\\mathcal{S}$ for this open system, and compute the positive equilibrium $(x^{*}, y^{*})$. Then, compute the Jacobian at $(x^{*}, y^{*})$, note its restriction to $\\mathcal{S}$, and determine the critical chemostat concentration $B_{\\mathrm{crit}}$ at which a Hopf bifurcation occurs at $(x^{*}, y^{*})$, characterized by $\\operatorname{tr} J(x^{*}) = 0$ and $\\det J(x^{*})  0$. Express your final answer as a single closed-form analytic expression for $B_{\\mathrm{crit}}$ in terms of $A$, $k_{1}$, $k_{2}$, $k_{3}$, and $k_{4}$. Do not round your result and do not include units in your final answer. Your final answer must be a single expression.", "solution": "The overall dynamics of the mass-action system are given by the ordinary differential equation $\\dot{x} = S v(x)$, where $x \\in \\mathbb{R}_{0}^{n}$ is the vector of species concentrations, $S \\in \\mathbb{R}^{n \\times r}$ is the stoichiometric matrix, and $v(x) \\in \\mathbb{R}^{r}$ is the reaction rate vector. The $k$-th rate is $v_k(x) = k_k \\prod_{j=1}^{n} x_j^{\\alpha_{kj}}$.\n\n**Part 1: General Structural Properties**\n\nFirst, we derive the formula for the Jacobian matrix, $J(x)$. The Jacobian is the matrix of partial derivatives of the system's dynamics, $J(x)_{ij} = \\frac{\\partial \\dot{x}_i}{\\partial x_j}$.\nThe $i$-th component of the dynamics is $\\dot{x}_i = \\sum_{k=1}^{r} S_{ik} v_k(x)$.\nDifferentiating with respect to $x_j$ gives:\n$$\nJ(x)_{ij} = \\frac{\\partial}{\\partial x_j} \\left( \\sum_{k=1}^{r} S_{ik} v_k(x) \\right) = \\sum_{k=1}^{r} S_{ik} \\frac{\\partial v_k(x)}{\\partial x_j}\n$$\nThe partial derivative of the mass-action rate $v_k(x) = k_k \\prod_{l=1}^{n} x_l^{\\alpha_{kl}}$ with respect to $x_j$ is:\n$$\n\\frac{\\partial v_k(x)}{\\partial x_j} = k_k \\alpha_{kj} x_j^{\\alpha_{kj}-1} \\prod_{l \\neq j} x_l^{\\alpha_{kl}} = \\frac{\\alpha_{kj}}{x_j} \\left( k_k \\prod_{l=1}^{n} x_l^{\\alpha_{kl}} \\right) = \\frac{\\alpha_{kj}}{x_j} v_k(x)\n$$\nSubstituting this back, we get the explicit formula for an element of the Jacobian:\n$$\nJ(x)_{ij} = \\sum_{k=1}^{r} S_{ik} \\frac{\\alpha_{kj}}{x_j} v_k(x)\n$$\nIn matrix form, we can write $J(x) = S K(x)$, where $K(x)$ is an $r \\times n$ matrix with entries $K(x)_{kj} = \\frac{\\partial v_k(x)}{\\partial x_j} = \\frac{\\alpha_{kj}}{x_j} v_k(x)$.\n\nNext, we must show that $\\operatorname{im} J(x) \\subseteq \\mathcal{S}$, where $\\mathcal{S} = \\operatorname{im} S$. Let $u \\in \\mathbb{R}^n$ be an arbitrary vector. We apply $J(x)$ to $u$:\n$$\nJ(x) u = (S K(x)) u = S (K(x) u)\n$$\nLet $w = K(x) u$. Since $K(x)$ is an $r \\times n$ matrix and $u$ is an $n \\times 1$ vector, $w$ is an $r \\times 1$ vector. The vector $J(x)u$ is therefore of the form $Sw$ for some $w \\in \\mathbb{R}^r$. By the definition of the image of a matrix, any such vector lies in the image of $S$. Thus, $\\operatorname{im} J(x) \\subseteq \\operatorname{im} S = \\mathcal{S}$.\n\nThis property implies that $J(x)$ has at least $n - \\operatorname{rank}(S)$ zero eigenvalues. The dimension of the stoichiometric subspace $\\mathcal{S}$ is $d = \\operatorname{rank}(S)$. Let $\\mathcal{S}^{\\perp}$ be its orthogonal complement, which has dimension $n-d$. The space $\\mathcal{S}^{\\perp}$ is precisely the left null space of $S$, i.e., $\\mathcal{S}^{\\perp} = \\ker(S^T)$. Let $c \\in \\mathcal{S}^{\\perp}$. Then, by definition, $c^T S = 0$.\nConsider the action of $J(x)^T$ on such a vector $c$:\n$$\nJ(x)^T c = (S K(x))^T c = K(x)^T S^T c = K(x)^T (S^T c) = K(x)^T 0 = 0\n$$\nThis shows that any vector $c$ in the left null space of $S$ is an eigenvector of $J(x)^T$ with eigenvalue $0$. Since the dimension of this space is $n - d$, $J(x)^T$ has at least $n-d$ zero eigenvalues. As a matrix and its transpose share the same eigenvalues, $J(x)$ also has at least $n-d$ zero eigenvalues. These eigenvalues correspond to conserved quantities of the network. The dynamics $\\dot{x} = Sv(x)$ are confined to affine subspaces parallel to $\\mathcal{S}$, called stoichiometric compatibility classes. Any perturbation orthogonal to $\\mathcal{S}$ is not affected by the dynamics, hence the corresponding eigenvalue is zero.\n\nTo compute the Jacobian restricted to $\\mathcal{S}$, we introduce coordinates for this subspace. Let $Q \\in \\mathbb{R}^{n \\times d}$ be a matrix whose columns form a basis for $\\mathcal{S}$, where $d = \\operatorname{rank}(S)$. Any perturbation $\\delta x$ from an equilibrium $x^*$ within the appropriate stoichiometric compatibility class must lie in $\\mathcal{S}$ and can thus be written as $\\delta x = Q \\delta \\eta$ for a coordinate vector $\\delta \\eta \\in \\mathbb{R}^d$. The linearized dynamics are $\\dot{\\delta x} = J(x^*) \\delta x$. Substituting the coordinate expression:\n$$\n\\frac{d}{dt}(Q \\delta \\eta) = J(x^*) (Q \\delta \\eta) \\implies Q \\dot{\\delta \\eta} = J(x^*) Q \\delta \\eta\n$$\nTo solve for $\\dot{\\delta \\eta}$, we project the equation onto the basis of $\\mathcal{S}$. Since the columns of $Q$ are linearly independent, the matrix $Q^T Q$ is invertible. We multiply from the left by the pseudoinverse of $Q$, which is $(Q^T Q)^{-1} Q^T$:\n$$\n(Q^T Q)^{-1} Q^T Q \\dot{\\delta \\eta} = (Q^T Q)^{-1} Q^T J(x^*) Q \\delta \\eta\n$$\n$$\n\\dot{\\delta \\eta} = \\left[ (Q^T Q)^{-1} Q^T J(x^*) Q \\right] \\delta \\eta\n$$\nThe reduced Jacobian, $J_{\\mathcal{S}}$, which governs the dynamics within the stoichiometric subspace, is therefore given by $J_{\\mathcal{S}} = (Q^T Q)^{-1} Q^T J(x^*) Q$. If an orthonormal basis is chosen for $\\mathcal{S}$, then $Q^T Q = I_d$ and the expression simplifies to $J_{\\mathcal{S}} = Q^T J(x^*) Q$.\n\n**Part 2: Application to Brusselator**\n\nThe reaction network is:\n1. $A \\rightarrow X$ with rate $v_1 = k_1 A$\n2. $2 X + Y \\rightarrow 3 X$ with rate $v_2 = k_2 x^2 y$\n3. $B + X \\rightarrow Y + D$ with rate $v_3 = k_3 B x$\n4. $X \\rightarrow E$ with rate $v_4 = k_4 x$\n\nThe dynamic variables are the concentrations of $X$ and $Y$, so we have $z = (x, y)^T$ and $n=2$. The rate vector is $v(z) = (k_1 A, k_2 x^2 y, k_3 B x, k_4 x)^T$. The stoichiometric matrix $S$ for the species $(X, Y)$ is constructed column by column from the net change in each reaction:\n$$\nS = \\begin{pmatrix} 1  (3-2)  -1  -1 \\\\ 0  -1  1  0 \\end{pmatrix} = \\begin{pmatrix} 1  1  -1  -1 \\\\ 0  -1  1  0 \\end{pmatrix}\n$$\nThe system of differential equations is $\\dot{z} = S v(z)$:\n$$\n\\dot{x} = v_1 + v_2 - v_3 - v_4 = k_1 A + k_2 x^2 y - k_3 B x - k_4 x\n$$\n$$\n\\dot{y} = -v_2 + v_3 = -k_2 x^2 y + k_3 B x\n$$\nThe stoichiometric subspace $\\mathcal{S} = \\operatorname{im} S$ is spanned by the columns of $S$. The vectors $(1, 0)^T$ and $(1, -1)^T$ are two columns of $S$ and are linearly independent. Since they are in $\\mathbb{R}^2$, they form a basis for $\\mathbb{R}^2$. Therefore, $\\operatorname{rank}(S) = 2$ and $\\mathcal{S} = \\mathbb{R}^2$. This means the system has no conserved quantities and the dynamics occupy the entire state space.\n\nTo find the positive equilibrium $(x^*, y^*)$, we set $\\dot{x}=0$ and $\\dot{y}=0$. From $\\dot{y}=0$:\n$$\nk_3 B x^* = k_2 (x^*)^2 y^*\n$$\nSince we seek a positive equilibrium ($x^*0$), we can divide by $x^*$. We can substitute the expression for $k_2 (x^*)^2 y^*$ into the $\\dot{x}=0$ equation:\n$$\nk_1 A + (k_3 B x^*) - k_3 B x^* - k_4 x^* = 0\n$$\n$$\nk_1 A - k_4 x^* = 0 \\implies x^* = \\frac{k_1 A}{k_4}\n$$\nNow, we find $y^*$ using the relation from the $\\dot{y}=0$ equation, $k_3 B x^* = k_2 (x^*)^2 y^*$, which simplifies to $k_3 B = k_2 x^* y^*$.\n$$\ny^* = \\frac{k_3 B}{k_2 x^*} = \\frac{k_3 B}{k_2 (\\frac{k_1 A}{k_4})} = \\frac{k_3 k_4 B}{k_1 k_2 A}\n$$\nThe unique positive equilibrium is $(x^*, y^*) = \\left(\\frac{k_1 A}{k_4}, \\frac{k_3 k_4 B}{k_1 k_2 A}\\right)$.\n\nNext, we compute the Jacobian matrix $J(x, y)$ and evaluate it at $(x^*, y^*)$. Let $f(x,y) = \\dot{x}$ and $g(x,y) = \\dot{y}$.\n$$\nJ = \\begin{pmatrix} \\frac{\\partial f}{\\partial x}  \\frac{\\partial f}{\\partial y} \\\\ \\frac{\\partial g}{\\partial x}  \\frac{\\partial g}{\\partial y} \\end{pmatrix} = \\begin{pmatrix} 2k_2xy - k_3B - k_4  k_2x^2 \\\\ k_3B - 2k_2xy  -k_2x^2 \\end{pmatrix}\n$$\nAt the equilibrium $(x^*, y^*)$, we use the relation $k_2 x^* y^* = k_3 B$:\n$$\nJ(x^*, y^*) = \\begin{pmatrix} 2(k_3B) - k_3B - k_4  k_2(x^*)^2 \\\\ k_3B - 2(k_3B)  -k_2(x^*)^2 \\end{pmatrix} = \\begin{pmatrix} k_3B - k_4  k_2(x^*)^2 \\\\ -k_3B  -k_2(x^*)^2 \\end{pmatrix}\n$$\nSubstituting $x^* = \\frac{k_1 A}{k_4}$:\n$$\nJ(x^*, y^*) = \\begin{pmatrix} k_3 B - k_4  k_2 \\left(\\frac{k_1 A}{k_4}\\right)^2 \\\\ -k_3 B  -k_2 \\left(\\frac{k_1 A}{k_4}\\right)^2 \\end{pmatrix}\n$$\nSince $\\mathcal{S} = \\mathbb{R}^2$, the full Jacobian is the relevant matrix for stability analysis. A Hopf bifurcation occurs when the real part of the eigenvalues becomes zero, while the imaginary part is non-zero. For a $2 \\times 2$ matrix, this corresponds to the conditions $\\operatorname{tr}(J) = 0$ and $\\det(J) > 0$.\n\nThe trace of the Jacobian at equilibrium is:\n$$\n\\operatorname{tr}(J(x^*, y^*)) = (k_3 B - k_4) - k_2 \\left(\\frac{k_1 A}{k_4}\\right)^2\n$$\nThe determinant is:\n$$\n\\det(J(x^*, y^*)) = (k_3 B - k_4) \\left(-k_2 \\left(\\frac{k_1 A}{k_4}\\right)^2\\right) - \\left(k_2 \\left(\\frac{k_1 A}{k_4}\\right)^2\\right) (-k_3 B)\n$$\n$$\n= -k_2 k_3 B \\left(\\frac{k_1 A}{k_4}\\right)^2 + k_2 k_4 \\left(\\frac{k_1 A}{k_4}\\right)^2 + k_2 k_3 B \\left(\\frac{k_1 A}{k_4}\\right)^2\n$$\n$$\n= k_2 k_4 \\left(\\frac{k_1 A}{k_4}\\right)^2 = \\frac{k_2 k_1^2 A^2}{k_4}\n$$\nSince all parameters $k_i, A$ are positive, $\\det(J(x^*, y^*)) > 0$ is always satisfied. The Hopf bifurcation occurs at the critical concentration $B_{\\mathrm{crit}}$ where the trace is zero:\n$$\n\\operatorname{tr}(J(x^*, y^*)) = 0 \\implies k_3 B_{\\mathrm{crit}} - k_4 - k_2 \\left(\\frac{k_1 A}{k_4}\\right)^2 = 0\n$$\nSolving for $B_{\\mathrm{crit}}$:\n$$\nk_3 B_{\\mathrm{crit}} = k_4 + k_2 \\frac{k_1^2 A^2}{k_4^2}\n$$\n$$\nB_{\\mathrm{crit}} = \\frac{k_4}{k_3} + \\frac{k_1^2 k_2 A^2}{k_3 k_4^2}\n$$\nThis is the final expression for the critical concentration of $B$.", "answer": "$$\\boxed{\\frac{k_4}{k_3} + \\frac{k_1^2 k_2 A^2}{k_3 k_4^2}}$$", "id": "2647438"}, {"introduction": "Analytical calculations can predict the birth of an oscillation at a Hopf bifurcation, but they cannot, on their own, confirm the properties of the resulting limit cycle. This practice bridges the gap between theory and computation by guiding you through the numerical validation of an emergent periodic orbit. You will implement a 'single shooting' algorithm to find the orbit and use Floquet theory to confirm its stability, mastering core techniques used in modern computational studies of dynamical systems [@problem_id:2647420].", "problem": "Consider the nondimensional Brusselator chemical reaction model, a two-species autocatalytic network widely used to study oscillations in chemical kinetics. The dynamical system for the concentrations is\n$$\n\\frac{dx}{dt} = f_1(x,y;A,B) = A - (B+1)\\,x + x^2 y,\\qquad\n\\frac{dy}{dt} = f_2(x,y;A,B) = B\\,x - x^2 y,\n$$\nwith parameters $A0$ and $B0$. The unique homogeneous steady state is\n$$\nx^\\ast = A,\\quad y^\\ast = \\frac{B}{A}.\n$$\nAt $B=1+A^2$ the linearization about $(x^\\ast,y^\\ast)$ has a pair of purely imaginary eigenvalues (a Hopf point), and for $B1+A^2$ the steady state is unstable and a stable periodic orbit emerges (supercritical Hopf). Your task is to validate numerically that a detected Hopf bifurcation indeed gives rise to a small-amplitude periodic orbit, by computing one such orbit near the bifurcation via single shooting and then checking its Floquet multipliers.\n\nYou must implement the following, starting from fundamental principles of dynamical systems and numerical analysis, without relying on any prepackaged continuation or collocation toolbox.\n\n- Use the ordinary differential equation (ODE) model given above as the governing equations, and the definition of a periodic orbit for a continuous-time autonomous system: a trajectory $(x(t),y(t))$ and a period $T0$ such that $(x(t+T),y(t+T))=(x(t),y(t))$ for all $t$.\n\n- Use single shooting to formulate a nonlinear system in the unknown initial point $(x_0,y_0)$ and period $T$ that enforces periodicity and removes the time-shift indeterminacy via a scalar phase condition. Use the phase condition\n$$\ng(x_0,y_0;A,\\rho)= (x_0 - x^\\ast) - \\rho = 0,\n$$\nwhere $\\rho0$ is a user-prescribed small amplitude target. The nonlinear system you must solve is\n$$\n\\Phi_T(x_0,y_0;A,B) - \\begin{bmatrix}x_0\\\\y_0\\end{bmatrix} = \\begin{bmatrix}0\\\\0\\end{bmatrix},\\qquad\ng(x_0,y_0;A,\\rho)=0,\n$$\nwhere $\\Phi_T$ denotes the time-$T$ flow map of the ODE. Solve this system with a standard Newton-type method for roots, evaluating $\\Phi_T$ via numerical time integration of the ODE.\n\n- After obtaining a candidate periodic orbit $(x^\\star(t),y^\\star(t))$ and $T^\\star$, compute the monodromy matrix by integrating the $2\\times 2$ variational equation along the periodic orbit,\n$$\n\\frac{d}{dt}Y(t) = J(x^\\star(t),y^\\star(t);A,B)\\,Y(t),\\qquad Y(0)=I_{2},\n$$\nwhere $J$ is the Jacobian of $(f_1,f_2)$ with respect to $(x,y)$ and $I_2$ is the $2\\times 2$ identity matrix. The eigenvalues of $Y(T^\\star)$ are the Floquet multipliers. For a stable limit cycle in a planar autonomous system, one Floquet multiplier must be $1$ (time-shift invariance) and the other must have magnitude less than $1$.\n\n- Implement a numerical validation rule that returns a boolean indicating whether the Hopf bifurcation is validated at the given parameters via a small-amplitude periodic orbit with the expected Floquet multipliers. Your rule must check all of the following:\n  - The shooting equations are solved to high accuracy, meaning the periodicity residual\n    $$\n    r_{\\text{per}} = \\left\\|\\Phi_{T^\\star}(x_0^\\star,y_0^\\star;A,B) - \\begin{bmatrix}x_0^\\star\\\\y_0^\\star\\end{bmatrix}\\right\\|_2\n    $$\n    is below a tolerance you choose, and $T^\\star0$ is reasonable relative to the linear oscillation timescale.\n  - The orbit has nontrivial, small amplitude consistent with a Hopf bifurcation. Quantify the amplitude as the maximum radial deviation over one period,\n    $$\n    \\max_{t\\in[0,T^\\star]} \\sqrt{(x^\\star(t)-x^\\ast)^2 + (y^\\star(t)-y^\\ast)^2},\n    $$\n    and require it to exceed a small threshold while remaining small compared to order-$1$ concentrations.\n  - The Floquet multipliers have one multiplier numerically close to $1$ and the other strictly inside the unit circle.\n\n- Use only the foundational definitions above, the ODE and its Jacobian, and standard numerical methods for integration and root finding; you must not use any specialized periodic orbit or continuation library.\n\nYour program must implement this for the following test suite of parameter sets $(A,B,\\rho)$, chosen to probe both sides of the Hopf threshold and two different distances from it:\n- Case 1 (supercritical side, close): $(A,B,\\rho) = (\\,1.0,\\,2.05,\\,0.05\\,)$.\n- Case 2 (subcritical side, close): $(A,B,\\rho) = (\\,1.0,\\,1.95,\\,0.05\\,)$.\n- Case 3 (at the linear Hopf point): $(A,B,\\rho) = (\\,1.0,\\,2.0,\\,0.05\\,)$.\n- Case 4 (supercritical side, farther): $(A,B,\\rho) = (\\,1.2,\\,2.64,\\,0.04\\,)$.\n\nFor each case, output a boolean that is true if and only if your numerical procedure validates a small-amplitude periodic orbit with one Floquet multiplier near $1$ and the other strictly inside the unit circle, according to your quantitative checks. Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets (e.g., \"[true_or_false_1,true_or_false_2,true_or_false_3,true_or_false_4]\"), where each entry is the literal Python boolean \"True\" or \"False\". All computations are nondimensional, and no physical units are required. Ensure your numerical tolerances and thresholds are stated in code, justified by your reasoning in terms of the definitions above, and applied consistently across cases. The final output must be exactly one line in the specified format.", "solution": "This problem requires the implementation of a numerical procedure to find a periodic orbit of the Brusselator system and analyze its stability. This involves solving a boundary value problem using a single shooting method with a Newton-Raphson solver, and then computing the Floquet multipliers of the found orbit to determine its stability.\n\nThe dynamical system is given by the set of autonomous ordinary differential equations (ODEs):\n$$\n\\frac{dx}{dt} = f_1(x,y;A,B) = A - (B+1)x + x^2y\n$$\n$$\n\\frac{dy}{dt} = f_2(x,y;A,B) = Bx - x^2y\n$$\nThe state vector is $X(t) = [x(t), y(t)]^T$, and the vector field is $F(X; A, B) = [f_1, f_2]^T$. The system has a unique homogeneous steady state at $X^\\ast = [x^\\ast, y^\\ast]^T = [A, B/A]^T$.\n\nA periodic orbit with period $T0$ starting at $X_0 = [x_0, y_0]^T$ must satisfy the periodicity condition $X(T) = X_0$. Using the flow map $\\Phi_T$, this becomes $\\Phi_T(X_0; A, B) - X_0 = 0$. This represents two equations for three unknowns ($x_0$, $y_0$, $T$). To obtain a well-posed system, we add a phase condition to eliminate the orbit's time-translation invariance. The problem specifies the phase condition:\n$$\ng(x_0, y_0; A, \\rho) = x_0 - x^\\ast - \\rho = 0\n$$\nWe combine these into a single system of three nonlinear equations for the unknown vector $U = [x_0, y_0, T]^T$:\n$$\n\\mathcal{F}(U; A, B, \\rho) = \\begin{bmatrix} \\Phi_{T,x}(x_0,y_0) - x_0 \\\\ \\Phi_{T,y}(x_0,y_0) - y_0 \\\\ x_0 - A - \\rho \\end{bmatrix} = 0\n$$\nThis system is solved using the Newton-Raphson method. The Jacobian of the shooting function $\\mathcal{F}$ requires the derivatives of the flow map, $\\partial \\Phi_T / \\partial X_0$ and $\\partial \\Phi_T / \\partial T$. The first is the monodromy matrix $Y(T)$, found by integrating the variational equation $\\frac{dY}{dt} = J(X(t)) Y(t)$ with $Y(0) = I_2$. The second is the vector field $F$ evaluated at the endpoint, $F(\\Phi_T(X_0))$.\n\nIn each Newton step, we numerically integrate an augmented system of 6 ODEs for the state $X(t)$ and the flattened sensitivity matrix $Y(t)$ from $t=0$ to $t=T$. A suitable initial guess is derived from linear stability analysis at the Hopf point $B_c = 1+A^2$, where the oscillation frequency is $\\omega_c = A$. This suggests an initial period guess $T^{(0)} = 2\\pi/A$.\n\nUpon convergence to a solution $U^\\star = [x_0^\\star, y_0^\\star, T^\\star]^T$, the stability of the candidate periodic orbit is determined by its Floquet multipliers, which are the eigenvalues of the monodromy matrix $Y(T^\\star)$. For a stable limit cycle in an autonomous planar system, one multiplier must be 1, and the other must have a magnitude less than 1.\n\nA validation function is implemented to check the following:\n1.  **Convergence:** The periodicity residual $\\|\\Phi_{T^\\star}(X_0^\\star) - X_0^\\star\\|_2$ is below a tolerance of $10^{-10}$.\n2.  **Period Sanity:** The period $T^\\star$ is positive and reasonably close to the linear estimate $2\\pi/A$.\n3.  **Amplitude:** The orbit's amplitude is non-trivial but small, consistent with the problem's setup.\n4.  **Floquet Multipliers:** One multiplier is numerically close to 1, and the other has a magnitude strictly less than 1.\n\nThis procedure is applied to each test case to validate the existence of a stable, small-amplitude periodic orbit.", "answer": "```python\nimport numpy as np\nfrom scipy.integrate import solve_ivp\nfrom scipy.linalg import solve as linsolve\nfrom scipy.linalg import eigvals\n\ndef solve():\n    \"\"\"\n    Main solver function to process all test cases for the Brusselator model.\n    \"\"\"\n    test_cases = [\n        # Case 1: (A, B, rho) -> supercritical side, close\n        (1.0, 2.05, 0.05),\n        # Case 2: (A, B, rho) -> subcritical side, close\n        (1.0, 1.95, 0.05),\n        # Case 3: (A, B, rho) -> at the linear Hopf point\n        (1.0, 2.0, 0.05),\n        # Case 4: (A, B, rho) -> supercritical side, farther\n        (1.2, 2.64, 0.04),\n    ]\n\n    results = []\n    for case in test_cases:\n        A, B, rho = case\n        is_valid = validate_hopf_bifurcation(A, B, rho)\n        results.append(is_valid)\n\n    print(f\"[{','.join(map(str, results))}]\")\n\ndef validate_hopf_bifurcation(A, B, rho):\n    \"\"\"\n    Performs single shooting and Floquet analysis to validate a Hopf bifurcation.\n\n    For a given parameter set (A, B, rho), this function attempts to find a\n    small-amplitude periodic orbit and checks its stability.\n\n    Returns:\n        bool: True if a stable, small-amplitude periodic orbit is found and\n              validated, False otherwise.\n    \"\"\"\n    # Define fixed point\n    x_star, y_star = A, B / A\n\n    # Tolerances and parameters for the numerical methods\n    newton_tol = 1e-10\n    newton_max_iter = 20\n    ode_rtol, ode_atol = 1e-12, 1e-12\n    \n    # Validation thresholds\n    period_relative_dev_tol = 0.5  # T* must be within 50% of linear estimate\n    amp_min_factor, amp_max_factor = 0.5, 5.0 # Amplitude must be in [0.5*rho, 5.0*rho]\n    floquet_one_tol = 1e-6 # Tolerance for one multiplier to be 1.0\n    floquet_stable_tol = 1e-6 # Tolerance for stability of the other multiplier\n\n    def brusselator_ode(t, Z, A_p, B_p):\n        \"\"\"Augmented ODE system for state (x,y) and sensitivity matrix Y.\"\"\"\n        x, y, Y11, Y12, Y21, Y22 = Z\n        \n        # Original ODE\n        dx_dt = A_p - (B_p + 1) * x + x**2 * y\n        dy_dt = B_p * x - x**2 * y\n        \n        # Jacobian matrix J(x,y)\n        J11 = 2 * x * y - (B_p + 1)\n        J12 = x**2\n        J21 = B_p - 2 * x * y\n        J22 = -x**2\n        \n        # Variational equation dY/dt = J*Y\n        dY11_dt = J11 * Y11 + J12 * Y21\n        dY12_dt = J11 * Y12 + J12 * Y22\n        dY21_dt = J21 * Y11 + J22 * Y21\n        dY22_dt = J21 * Y12 + J22 * Y22\n        \n        return [dx_dt, dy_dt, dY11_dt, dY12_dt, dY21_dt, dY22_dt]\n\n    # Initial guess for Newton's method\n    x0_guess = x_star + rho\n    y0_guess = y_star\n    T_guess = 2 * np.pi / A\n    U = np.array([x0_guess, y0_guess, T_guess])\n\n    # Newton-Raphson iteration\n    for _ in range(newton_max_iter):\n        x0_k, y0_k, T_k = U\n        \n        if T_k = 0: # Period must be positive\n            return False\n\n        # Integrate the augmented system\n        Z0 = [x0_k, y0_k, 1.0, 0.0, 0.0, 1.0]\n        sol = solve_ivp(brusselator_ode, [0, T_k], Z0, args=(A, B),\n                        dense_output=True, rtol=ode_rtol, atol=ode_atol)\n        \n        if sol.status != 0: # Integration failed\n            return False\n\n        x_T, y_T = sol.y[0, -1], sol.y[1, -1]\n        Y_T = sol.y[2:, -1].reshape((2, 2))\n\n        # Residual vector F(U)\n        F = np.array([\n            x_T - x0_k,\n            y_T - y0_k,\n            x0_k - x_star - rho\n        ])\n\n        # Check for convergence\n        if np.linalg.norm(F)  newton_tol:\n            break\n        \n        # Jacobian matrix DF(U)\n        f_T = brusselator_ode(T_k, sol.y[:, -1], A, B)[:2]\n        DF = np.zeros((3, 3))\n        DF[0:2, 0:2] = Y_T - np.eye(2)\n        DF[0:2, 2] = f_T\n        DF[2, 0] = 1.0\n        \n        # Solve linear system DF * dU = -F and update\n        try:\n            delta_U = linsolve(DF, -F)\n        except np.linalg.LinAlgError:\n            return False # Singular matrix\n        U += delta_U\n    else: # Newton's method did not converge\n        return False\n\n    # --- Validation Checks ---\n    # Solution from Newton method\n    x0_star, y0_star, T_star = U\n\n    # 1. Periodicity residual check (already passed by loop break condition)\n    # The L2-norm of the first two components of F is the periodicity residual.\n    r_per = np.linalg.norm(F[:2])\n    if r_per > newton_tol:\n        return False\n        \n    # 2. Period sanity check\n    T_linear = 2 * np.pi / A\n    if not (T_star > 0 and abs(T_star - T_linear) / T_linear  period_relative_dev_tol):\n        return False\n\n    # 3. Amplitude check\n    # Integrate again to get dense output for the converged orbit\n    Z0_star = [x0_star, y0_star]\n    sol_orbit = solve_ivp(lambda t, y: brusselator_ode(t, y, A, B)[:2], \n                            [0, T_star], Z0_star, dense_output=True, \n                            rtol=ode_rtol, atol=ode_atol)\n    \n    t_eval = np.linspace(0, T_star, 200)\n    orbit_points = sol_orbit.sol(t_eval)\n    deviations = np.linalg.norm(orbit_points - np.array([[x_star], [y_star]]), axis=0)\n    amplitude = np.max(deviations)\n\n    if not (amp_min_factor * rho  amplitude  amp_max_factor * rho):\n        return False\n        \n    # 4. Floquet multiplier check\n    # Y(T*) was computed in the last Newton step as Y_T\n    monodromy_matrix = Y_T\n    multipliers = eigvals(monodromy_matrix)\n    \n    # Sort multipliers by their distance to 1.0\n    multipliers = sorted(multipliers, key=lambda m: abs(m - 1.0))\n    mu1, mu2 = multipliers\n\n    # Check conditions\n    is_one_near_one = abs(mu1 - 1.0)  floquet_one_tol\n    is_other_stable = abs(mu2)  1.0 - floquet_stable_tol\n    \n    if is_one_near_one and is_other_stable:\n        return True\n    \n    return False\n\nif __name__ == '__main__':\n    solve()\n```", "id": "2647420"}]}