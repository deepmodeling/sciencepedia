{"hands_on_practices": [{"introduction": "The principle of microscopic reversibility provides powerful constraints on the mechanisms of chemical reactions. This exercise [@problem_id:1505506] presents a thought experiment involving a hypothetical catalytic cycle to challenge your understanding of these constraints. By analyzing a proposal where the forward and reverse reactions follow different pathways, you will explore why, at equilibrium, the path of a reaction must be the same in both directions.", "problem": "A team of chemical engineers is investigating a new solid-state catalyst designed to facilitate the reversible isomerization of a gas-phase molecule A into its isomer B. The overall reaction is A(g) $\\rightleftharpoons$ B(g). Through in-situ spectroscopic studies, they propose a mechanism involving two distinct types of active sites on the catalyst surface, leading to two different adsorbed intermediates, I and J.\n\nTheir proposed mechanism is as follows:\n- The forward reaction (A $\\to$ B) primarily occurs via intermediate I:\n    $$A(g) + S_1 \\rightleftharpoons I(ads)$$\n    $$I(ads) \\rightleftharpoons B(g) + S_1$$\n    where $S_1$ is a vacant active site of the first type.\n\n- The reverse reaction (B $\\to$ A) is claimed to proceed predominantly through a different intermediate, J, on a second type of active site:\n    $$B(g) + S_2 \\rightleftharpoons J(ads)$$\n    $$J(ads) \\rightleftharpoons A(g) + S_2$$\n    where $S_2$ is a vacant active site of the second type.\n\nEvaluate the physical validity of this proposed dual-pathway mechanism at chemical equilibrium.\n\nA. The mechanism is valid. The principle of microscopic reversibility only applies to individual elementary reactions, not to overall reaction pathways which can be different for the forward and reverse directions.\n\nB. The mechanism is invalid. It violates the principle of detailed balance, which dictates that at equilibrium, the forward rate of every elementary process must be equal to its reverse rate, necessitating that the forward and reverse transformations between any two species occur via the same pathway.\n\nC. The mechanism is valid. As long as the catalyst provides a path that lowers the activation energy, it is possible for different types of active sites to specialize in catalyzing the forward and reverse reactions independently.\n\nD. The mechanism is invalid because the presence of two different intermediates (I and J) for the same overall reaction would create an unstable thermodynamic loop, which is forbidden.\n\nE. The validity cannot be determined without the specific values of the rate constants for each elementary step. If the rate constants are appropriate, the mechanism could be valid.", "solution": "We label the two catalytic channels and write mass-action rates for each elementary step. For the S1/I channel:\n- Adsorption/conversion step: $A(g) + S_{1} \\rightleftharpoons I(\\text{ads})$ with $r_{1a,f} = k_{1a}^{+} p_{A} \\theta_{S1}$ and $r_{1a,r} = k_{1a}^{-} \\theta_{I}$.\n- Desorption/conversion step: $I(\\text{ads}) \\rightleftharpoons B(g) + S_{1}$ with $r_{1b,f} = k_{1b}^{+} \\theta_{I}$ and $r_{1b,r} = k_{1b}^{-} p_{B} \\theta_{S1}$.\n\nFor the S2/J channel:\n- Adsorption/conversion step: $B(g) + S_{2} \\rightleftharpoons J(\\text{ads})$ with $r_{2a,f} = k_{2a}^{+} p_{B} \\theta_{S2}$ and $r_{2a,r} = k_{2a}^{-} \\theta_{J}$.\n- Desorption/conversion step: $J(\\text{ads}) \\rightleftharpoons A(g) + S_{2}$ with $r_{2b,f} = k_{2b}^{+} \\theta_{J}$ and $r_{2b,r} = k_{2b}^{-} p_{A} \\theta_{S2}$.\n\nHere $p_{A}$ and $p_{B}$ are the gas-phase partial pressures, $\\theta_{S1}$ and $\\theta_{S2}$ are the surface fractions of vacant sites, and $\\theta_{I}$ and $\\theta_{J}$ are the coverages of intermediates $I$ and $J$.\n\nAt chemical equilibrium, the principle of detailed balance requires that for every elementary reversible step, the forward and reverse rates are equal:\n$$\nr_{1a,f} = r_{1a,r}, \\quad r_{1b,f} = r_{1b,r}, \\quad r_{2a,f} = r_{2a,r}, \\quad r_{2b,f} = r_{2b,r}.\n$$\nExplicitly,\n$$\nk_{1a}^{+} p_{A} \\theta_{S1} = k_{1a}^{-} \\theta_{I}, \\quad\nk_{1b}^{+} \\theta_{I} = k_{1b}^{-} p_{B} \\theta_{S1},\n$$\n$$\nk_{2a}^{+} p_{B} \\theta_{S2} = k_{2a}^{-} \\theta_{J}, \\quad\nk_{2b}^{+} \\theta_{J} = k_{2b}^{-} p_{A} \\theta_{S2}.\n$$\nCombining the equalities for each channel gives the Wegscheider consistency conditions for the overall equilibrium constant along each pathway. For S1/I,\n$$\n\\frac{k_{1a}^{+} k_{1b}^{+}}{k_{1a}^{-} k_{1b}^{-}} = \\frac{p_{B}}{p_{A}} \\equiv K_{\\text{eq}},\n$$\nand for S2/J,\n$$\n\\frac{k_{2a}^{+} k_{2b}^{+}}{k_{2a}^{-} k_{2b}^{-}} = \\frac{p_{B}}{p_{A}} = K_{\\text{eq}}.\n$$\nThus both channels, if present, must individually reflect the same thermodynamic equilibrium constant; a catalyst cannot change $K_{\\text{eq}}$.\n\nDefine the net fluxes through each channel under steady conditions:\n$$\nJ_{1} \\equiv r_{1a,f} - r_{1a,r} = r_{1b,f} - r_{1b,r}, \\quad\nJ_{2} \\equiv r_{2a,f} - r_{2a,r} = r_{2b,f} - r_{2b,r}.\n$$\nThe overall reaction rate is $J = J_{1} + J_{2}$. At chemical equilibrium, $J = 0$. Detailed balance strengthens this to $J_{1} = 0$ and $J_{2} = 0$ individually, because each elementary step must obey zero net flux:\n$$\nr_{i,f} = r_{i,r} \\implies J_{1} = 0, \\quad J_{2} = 0.\n$$\nTherefore, it is forbidden at equilibrium to have a nonzero net forward flux on one pathway and a nonzero net reverse flux on a different pathway that merely cancel in total (i.e., $J_{1} > 0$ and $J_{2} < 0$ with $J_{1} + J_{2} = 0$). Such a configuration would violate detailed balance by implying $r_{i,f} \\neq r_{i,r}$ for at least some elementary steps and would generate a nonzero cyclic probability current, which is incompatible with equilibrium.\n\nConsequently:\n- The existence of two reversible pathways with different intermediates and site types is not inherently forbidden; both pathways can coexist provided each elementary step is reversible and obeys detailed balance at equilibrium.\n- However, the specific claim that the forward reaction proceeds primarily via one pathway (I on S1) while the reverse reaction proceeds predominantly via a different pathway (J on S2) at equilibrium contradicts detailed balance, because at equilibrium there can be no preferential net direction along any elementary step or pathway.\n\nOption B correctly identifies this violation and invokes the principle of detailed balance. Options A and C incorrectly suggest that different exclusive forward and reverse pathways are permissible at equilibrium. Option D misattributes the issue to an inherently unstable loop caused by multiple intermediates, which is not generally correct. Option E is incorrect because the validity at equilibrium is constrained by detailed balance independently of the specific numerical values of rate constants; if the mechanism were as claimed (exclusive opposing pathways), no choice of rate constants could satisfy detailed balance at equilibrium.", "answer": "$$\\boxed{B}$$", "id": "1505506"}, {"introduction": "Beyond dictating reaction pathways, microscopic reversibility establishes a rigorous quantitative bridge between thermodynamics and kinetics for elementary reactions. This problem [@problem_id:2670651] provides a practical test of this connection, asking you to synthesize independently measured thermodynamic and kinetic data. You will calculate the equilibrium constant from fundamental thermodynamic properties and compare it to the ratio of rate constants to verify their consistency.", "problem": "A gas-phase, single-step elementary isomerization reaction $\\mathrm{A(g)} \\rightleftharpoons \\mathrm{B(g)}$ is studied under ideal-gas standard-state conventions at $1\\ \\mathrm{bar}$. A reference thermodynamic table at $T_0 = 298\\ \\mathrm{K}$ reports the standard reaction enthalpy $\\Delta_{r}H^\\circ(T_0) = -25.36\\ \\mathrm{kJ\\ mol^{-1}}$ and the standard reaction entropy $\\Delta_{r}S^\\circ(T_0) = -10.00\\ \\mathrm{J\\ mol^{-1}\\ K^{-1}}$. The tabulated standard reaction heat capacity at constant pressure is temperature-independent over the range of interest, with $\\Delta_{r}C_p^\\circ = +2.000\\ \\mathrm{J\\ mol^{-1}\\ K^{-1}}$. At temperature $T = 700\\ \\mathrm{K}$, direct kinetic measurements for this reversible elementary step give the forward and reverse first-order rate constants $k_{+}(T) = 2.500 \\times 10^{3}\\ \\mathrm{s^{-1}}$ and $k_{-}(T) = 1.000 \\times 10^{2}\\ \\mathrm{s^{-1}}$.\n\nUsing only fundamental thermodynamic relations and ideal-gas assumptions, compute the thermodynamic equilibrium constant $K(T)$ from the given $\\Delta_{r}H^\\circ(T_0)$, $\\Delta_{r}S^\\circ(T_0)$, and $\\Delta_{r}C_p^\\circ$ at $T = 700\\ \\mathrm{K}$, and then assess consistency with microscopic reversibility by comparing $K(T)$ to the kinetic ratio $k_{+}(T)/k_{-}(T)$. Report the dimensionless ratio\n$$\nR \\equiv \\frac{K(T)}{k_{+}(T)/k_{-}(T)}.\n$$\nUse the universal gas constant $R_u = 8.314462618\\ \\mathrm{J\\ mol^{-1}\\ K^{-1}}$. Round your final reported value of $R$ to four significant figures. Express your final answer as a pure number (dimensionless).", "solution": "The problem requires a critical assessment of the consistency between thermodynamic and kinetic data for the elementary gas-phase isomerization reaction $\\mathrm{A(g)} \\rightleftharpoons \\mathrm{B(g)}$. The principle of microscopic reversibility dictates that for an elementary step at equilibrium, the ratio of the forward rate constant to the reverse rate constant must be equal to the thermodynamic equilibrium constant. The task is to compute the ratio $R \\equiv \\frac{K(T)}{k_{+}(T)/k_{-}(T)}$, which must be equal to $1$ if the provided thermodynamic and kinetic data are mutually consistent.\n\nFirst, we compute the kinetic ratio from the given rate constants at the temperature $T = 700\\ \\mathrm{K}$:\n$$\n\\frac{k_{+}(T)}{k_{-}(T)} = \\frac{2.500 \\times 10^{3}\\ \\mathrm{s^{-1}}}{1.000 \\times 10^{2}\\ \\mathrm{s^{-1}}} = 25.00\n$$\nFor an elementary reaction $\\mathrm{A} \\rightleftharpoons \\mathrm{B}$, the rate laws are $r_{\\text{forward}} = k_{+}[A]$ and $r_{\\text{reverse}} = k_{-}[B]$. At equilibrium, the rates are equal, leading to $\\frac{[B]_{eq}}{[A]_{eq}} = \\frac{k_{+}}{k_{-}} = K_c$, where $K_c$ is the equilibrium constant in terms of concentrations.\n\nNext, we compute the thermodynamic equilibrium constant, $K(T)$, from the provided thermodynamic data. The standard Gibbs free energy of reaction, $\\Delta_{r}G^\\circ(T)$, determines the equilibrium constant via the relation $\\Delta_{r}G^\\circ(T) = -R_u T \\ln K(T)$. The given data are at a reference temperature $T_0 = 298\\ \\mathrm{K}$, so we must first determine the standard reaction enthalpy, $\\Delta_{r}H^\\circ(T)$, and entropy, $\\Delta_{r}S^\\circ(T)$, at the target temperature $T = 700\\ \\mathrm{K}$.\n\nThe temperature dependence of the standard reaction enthalpy is given by Kirchhoff's law:\n$$\n\\Delta_{r}H^\\circ(T) = \\Delta_{r}H^\\circ(T_0) + \\int_{T_0}^{T} \\Delta_{r}C_p^\\circ dT'\n$$\nSince $\\Delta_{r}C_p^\\circ$ is given as a constant, $\\Delta_{r}C_p^\\circ = +2.000\\ \\mathrm{J\\ mol^{-1}\\ K^{-1}}$, the integral simplifies. We are given $\\Delta_{r}H^\\circ(T_0) = -25.36\\ \\mathrm{kJ\\ mol^{-1}} = -25360\\ \\mathrm{J\\ mol^{-1}}$.\n$$\n\\Delta_{r}H^\\circ(700\\ \\mathrm{K}) = -25360\\ \\mathrm{J\\ mol^{-1}} + (2.000\\ \\mathrm{J\\ mol^{-1}\\ K^{-1}}) \\times (700\\ \\mathrm{K} - 298\\ \\mathrm{K})\n$$\n$$\n\\Delta_{r}H^\\circ(700\\ \\mathrm{K}) = -25360\\ \\mathrm{J\\ mol^{-1}} + (2.000\\ \\mathrm{J\\ mol^{-1}\\ K^{-1}}) \\times (402\\ \\mathrm{K}) = -25360 + 804.0 = -24556\\ \\mathrm{J\\ mol^{-1}}\n$$\n\nSimilarly, the temperature dependence of the standard reaction entropy is:\n$$\n\\Delta_{r}S^\\circ(T) = \\Delta_{r}S^\\circ(T_0) + \\int_{T_0}^{T} \\frac{\\Delta_{r}C_p^\\circ}{T'} dT'\n$$\nWith a constant $\\Delta_{r}C_p^\\circ$ and $\\Delta_{r}S^\\circ(T_0) = -10.00\\ \\mathrm{J\\ mol^{-1}\\ K^{-1}}$, this becomes:\n$$\n\\Delta_{r}S^\\circ(700\\ \\mathrm{K}) = -10.00\\ \\mathrm{J\\ mol^{-1}\\ K^{-1}} + (2.000\\ \\mathrm{J\\ mol^{-1}\\ K^{-1}}) \\times \\ln\\left(\\frac{700\\ \\mathrm{K}}{298\\ \\mathrm{K}}\\right)\n$$\n$$\n\\Delta_{r}S^\\circ(700\\ \\mathrm{K}) \\approx -10.00 + 2.000 \\times 0.8540455 = -10.00 + 1.708091 = -8.291909\\ \\mathrm{J\\ mol^{-1}\\ K^{-1}}\n$$\n\nNow we can calculate the standard Gibbs free energy of reaction at $T = 700\\ \\mathrm{K}$:\n$$\n\\Delta_{r}G^\\circ(T) = \\Delta_{r}H^\\circ(T) - T \\Delta_{r}S^\\circ(T)\n$$\n$$\n\\Delta_{r}G^\\circ(700\\ \\mathrm{K}) = -24556\\ \\mathrm{J\\ mol^{-1}} - (700\\ \\mathrm{K}) \\times (-8.291909\\ \\mathrm{J\\ mol^{-1}\\ K^{-1}})\n$$\n$$\n\\Delta_{r}G^\\circ(700\\ \\mathrm{K}) \\approx -24556 + 5804.3363 = -18751.6637\\ \\mathrm{J\\ mol^{-1}}\n$$\n\nThe thermodynamic equilibrium constant $K(T)$ is then found:\n$$\nK(T) = \\exp\\left(-\\frac{\\Delta_{r}G^\\circ(T)}{R_u T}\\right)\n$$\nUsing the given value $R_u = 8.314462618\\ \\mathrm{J\\ mol^{-1}\\ K^{-1}}$:\n$$\nK(700\\ \\mathrm{K}) = \\exp\\left(-\\frac{-18751.6637\\ \\mathrm{J\\ mol^{-1}}}{8.314462618\\ \\mathrm{J\\ mol^{-1}\\ K^{-1}} \\times 700\\ \\mathrm{K}}\\right)\n$$\n$$\nK(700\\ \\mathrm{K}) \\approx \\exp\\left(\\frac{18751.6637}{5820.1238}\\right) \\approx \\exp(3.221845) \\approx 25.0725\n$$\nThe thermodynamic equilibrium constant calculated from $\\Delta_rG^\\circ$ is the pressure-based constant, $K_p$. The relationship between $K_p$ and $K_c$ is $K_p = K_c(R_uT/p^\\circ)^{\\Delta \\nu_g}$, where $\\Delta \\nu_g$ is the change in the number of moles of gas. For the reaction $\\mathrm{A(g)} \\rightleftharpoons \\mathrm{B(g)}$, $\\Delta \\nu_g = 1 - 1 = 0$. Therefore, $K_p = K_c$. This confirms that the thermodynamically derived $K(T)$ can be directly compared to the kinetically derived ratio $k_{+}(T)/k_{-}(T)$.\n\nFinally, we compute the required ratio $R$:\n$$\nR = \\frac{K(T)}{k_{+}(T)/k_{-}(T)} = \\frac{25.0725}{25.00} \\approx 1.00290\n$$\nRounding this result to four significant figures, as requested, yields $R = 1.003$. This value indicates a high degree of consistency between the independent thermodynamic and kinetic measurements, with a deviation of only about $0.3\\%$.", "answer": "$$\n\\boxed{1.003}\n$$", "id": "2670651"}, {"introduction": "The principles of reversibility and detailed balance are not limited to deterministic, macroscopic rate equations; they are fundamental to the underlying stochastic dynamics of individual molecules. In this advanced practice [@problem_id:2670649], you will implement a Kinetic Monte Carlo simulation for a reaction-diffusion system from first principles. By tracking individual reaction events, you will computationally verify detailed balance at equilibrium by demonstrating that the average forward and reverse fluxes become equal, providing a direct view of this principle in action.", "problem": "Implement a continuous-time Kinetic Monte Carlo (KMC) simulator for a reversible reaction–diffusion system on a two-dimensional periodic square lattice that exhibits geminate recombination, and use it to verify detailed balance at equilibrium by demonstrating equality of forward and reverse reaction fluxes. The system consists of species $A$, $B$, and $C$ undergoing the reversible reaction $A + B \\rightleftharpoons C$, and diffusing on a lattice with single-occupancy exclusion. Your program must be a complete, runnable implementation that produces the required outputs with no user interaction.\n\nThe simulation model must be defined and implemented according to the following scientifically grounded principles and rules, starting from the master equation for a continuous-time Markov chain and the definition of detailed balance.\n\n- Fundamental base:\n  - The time evolution of the probability $P(\\sigma, t)$ of microstate $\\sigma$ is governed by the master equation\n    $$\n    \\frac{dP(\\sigma, t)}{dt} = \\sum_{\\sigma'} \\left[ W(\\sigma' \\to \\sigma) P(\\sigma', t) - W(\\sigma \\to \\sigma') P(\\sigma, t) \\right],\n    $$\n    where $W(\\sigma \\to \\sigma')$ is the transition rate from $\\sigma$ to $\\sigma'$.\n  - Detailed balance at equilibrium requires, for every pair of microstates $(\\sigma, \\sigma')$ connected by a single elementary transition,\n    $$\n    P_{\\mathrm{eq}}(\\sigma) W(\\sigma \\to \\sigma') = P_{\\mathrm{eq}}(\\sigma') W(\\sigma' \\to \\sigma).\n    $$\n\n- Lattice and states:\n  - Use a periodic square lattice of size $L \\times L$ with $L \\in \\mathbb{N}$.\n  - Each lattice site can be in exactly one of the following states: empty, occupied by $A$, occupied by $B$, or occupied by $C$. Single-occupancy exclusion must be enforced at all times.\n\n- Allowed elementary events and their rates:\n  - Diffusion: For species $X \\in \\{A, B, C\\}$, a particle at site $i$ can hop to a nearest-neighbor site $j$ if and only if site $j$ is empty. Each such oriented hop $(i \\to j)$ occurs with rate $D_X$, where $D_A, D_B, D_C \\in \\mathbb{R}_+$ are given.\n  - Forward reaction $A + B \\to C$ (bimolecular association with contact): If two nearest-neighbor sites $\\{i, j\\}$ are occupied by $A$ and $B$ in any order, then the unordered pair $\\{i, j\\}$ can undergo a reaction with rate $k_f \\in \\mathbb{R}_+$. Upon reaction, place the $C$ product at either $i$ or $j$ with equal probability, and set the other site to empty. This represents a contact reaction consuming two adjacent reactants to yield a single product occupying one of the original sites.\n  - Reverse reaction $C \\to A + B$ (unimolecular dissociation with geminate recombination): If a site $i$ is occupied by $C$ and a nearest-neighbor site $j$ is empty, then the oriented pair $(i, j)$ can undergo dissociation with rate $k_b \\in \\mathbb{R}_+$. Upon dissociation, place $A$ and $B$ on the two sites $(i, j)$ in a random order with equal probability. This rule enforces geminate recombination by ensuring that the dissociation products are created at contact.\n\n- Stochastic simulation algorithm:\n  - Implement an exact continuous-time KMC (Gillespie) scheme. At each step, enumerate all currently allowed events and their rates, compute the total rate $R = \\sum_e r_e$, sample the next reaction time increment $\\Delta t$ from an exponential distribution with mean $1/R$, and choose exactly one event with probability $r_e / R$. Update the lattice and time accordingly. Continue until the target simulated time is reached.\n  - To measure fluxes, define the forward reaction count $N_f$ as the total number of $A + B \\to C$ events, and the reverse reaction count $N_r$ as the total number of $C \\to A + B$ events. The forward flux is $J_f = N_f / T_{\\mathrm{meas}}$ and the reverse flux is $J_r = N_r / T_{\\mathrm{meas}}$, where $T_{\\mathrm{meas}}$ is the measurement window duration defined below.\n\n- Equilibration and measurement protocol:\n  - For each test case, start from a specified initial condition with given counts $N_A(0)$, $N_B(0)$, and $N_C(0)$ placed uniformly at random without overlap. Run the simulation for a burn-in time $T_{\\mathrm{burn}}$, then measure $N_f$ and $N_r$ during a subsequent measurement window of duration $T_{\\mathrm{meas}}$. Compute $J_f$ and $J_r$ using $T_{\\mathrm{meas}}$ as the denominator. If the simulation terminates before the end of the measurement window due to the absence of allowed events, use the actual elapsed time within the measurement window in place of $T_{\\mathrm{meas}}$.\n  - Verify detailed balance by checking whether $J_f$ and $J_r$ are equal within a specified relative tolerance $\\varepsilon$ using the symmetric relative difference\n    $$\n    \\delta = \\frac{|J_f - J_r|}{\\frac{1}{2}(J_f + J_r)}.\n    $$\n    Return a boolean result per test case indicating whether $\\delta &lt; \\varepsilon$.\n\n- Units and numerical representation:\n  - All parameters are dimensionless, and there are no physical units to report. All outputs must be numerical booleans.\n\n- Test suite:\n  Implement the simulator and run it on the following three parameter sets. Use the provided random seeds to ensure reproducibility. For each case, use relative tolerance $\\varepsilon = 0.08$.\n\n  - Case $1$ (moderate diffusion and association):\n    - $L = 10$, $N_A(0) = 30$, $N_B(0) = 30$, $N_C(0) = 0$.\n    - $D_A = 1.0$, $D_B = 1.0$, $D_C = 1.0$.\n    - $k_f = 2.0$, $k_b = 1.0$.\n    - $T_{\\mathrm{burn}} = 5.0$, $T_{\\mathrm{meas}} = 20.0$.\n    - Random seed $= 123$.\n\n  - Case $2$ (diffusion-limited association, slower hopping):\n    - $L = 10$, $N_A(0) = 40$, $N_B(0) = 40$, $N_C(0) = 0$.\n    - $D_A = 0.1$, $D_B = 0.1$, $D_C = 0.1$.\n    - $k_f = 5.0$, $k_b = 1.0$.\n    - $T_{\\mathrm{burn}} = 10.0$, $T_{\\mathrm{meas}} = 30.0$.\n    - Random seed $= 456$.\n\n  - Case $3$ (dissociation-favored kinetics with pre-existing products):\n    - $L = 10$, $N_A(0) = 20$, $N_B(0) = 20$, $N_C(0) = 30$.\n    - $D_A = 1.0$, $D_B = 1.0$, $D_C = 1.0$.\n    - $k_f = 1.0$, $k_b = 4.0$.\n    - $T_{\\mathrm{burn}} = 5.0$, $T_{\\mathrm{meas}} = 20.0$.\n    - Random seed $= 789$.\n\n- Required final output format:\n  Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, in the order of the test cases described above. Each entry must be a boolean indicating whether detailed balance was verified within tolerance for that case, for example, \"[True,True,False]\".\n\nYour implementation must be self-contained and must not read from input or write any files. It must implement the exact rules above and use only the specified runtime environment.", "solution": "The problem is valid as it presents a well-posed, scientifically grounded task in computational statistical mechanics. It requires the implementation of a continuous-time Kinetic Monte Carlo (KMC) simulator for a reversible reaction-diffusion system on a two-dimensional lattice. The system, its dynamics, and the simulation protocol are specified with sufficient precision to permit a unique and verifiable implementation. The core task is to verify that the simulation correctly reproduces the principle of detailed balance at equilibrium, which manifests as the equality of forward and reverse reaction fluxes. This is a standard validation procedure for such simulations. All parameters and conditions are provided, and the problem is computationally feasible.\n\nThe solution is implemented as a Python program adhering to the specified KMC algorithm and measurement protocol. The logical design is structured as follows.\n\n**1. System Representation**\nThe system state is defined by the configuration of particles on a two-dimensional periodic square lattice of size $L \\times L$. This is represented by a NumPy array of integers, where each integer corresponds to a specific state for a lattice site. The mapping is: $0$ for an empty site, $1$ for species $A$, $2$ for species $B$, and $3$ for species $C$. This representation naturally enforces the single-occupancy exclusion rule, as each site can hold only one integer value at a time. All spatial calculations, such as finding nearest neighbors, employ modulo arithmetic to correctly implement the periodic boundary conditions. For a site at coordinates $(i, j)$, its four nearest neighbors are located at $((i \\pm 1) \\pmod L, j)$ and $(i, (j \\pm 1) \\pmod L)$.\n\n**2. Initial State Generation**\nFor each test case, the simulation begins from an initial state with specified particle counts $N_A(0)$, $N_B(0)$, and $N_C(0)$. To generate this state, a list of all $L \\times L$ possible lattice sites is created. From this list, a number of sites equal to the total particle count ($N_A(0) + N_B(0) + N_C(0)$) is chosen uniformly at random without replacement. The specified numbers of $A$, $B$, and $C$ particles are then assigned to these chosen sites, populating the lattice array. This procedure ensures a random initial configuration that respects the single-occupancy constraint. A specific random seed is used for this process to ensure reproducibility.\n\n**3. Kinetic Monte Carlo Algorithm**\nThe time evolution of the system is simulated using the exact Gillespie algorithm, which is a stochastic realization of the process described by the system's master equation. The simulation proceeds in discrete steps, each corresponding to one elementary event.\n\n**3.1. Event and Rate Enumeration**\nAt the beginning of each KMC step, the algorithm catalogues all possible elementary events that can occur in the current state $\\sigma$ and their corresponding transition rates $W(\\sigma \\to \\sigma')$.\n- **Diffusion:** For each particle of species $X \\in \\{A, B, C\\}$ at site $i$, every adjacent empty site $j$ represents a possible hop. Each such oriented hop $(i \\to j)$ is an independent event with rate $D_X$. The implementation iterates through all lattice sites; if a site contains a particle, it checks its four neighbors. For each empty neighbor, a diffusion event is added to a list of possible events.\n- **Forward Reaction ($A+B \\to C$):** This bimolecular reaction occurs between an adjacent pair of $A$ and $B$ particles. The problem specifies that an unordered pair $\\{i, j\\}$ of adjacent sites occupied by $A$ and $B$ reacts with a single rate $k_f$. To enumerate these events without double-counting, the lattice is scanned, and for each site, only its 'right' and 'down' neighbors are checked. This ensures that every nearest-neighbor pair in the lattice is considered exactly once. If a pair of sites is found to contain one $A$ and one $B$, a forward reaction event with rate $k_f$ is registered.\n- **Reverse Reaction ($C \\to A+B$):** This unimolecular dissociation is defined for an oriented pair $(i, j)$, where site $i$ is occupied by a particle $C$ and site $j$ is an empty neighbor. The rate for this event is given as $k_b$. The implementation finds all $C$ particles on the lattice and, for each, inspects its four neighbors. Each empty neighbor gives rise to a distinct reverse reaction event with rate $k_b$.\n\n**3.2. Time Evolution and Event Selection**\nOnce all possible events and their rates $r_e$ are enumerated, the total rate $R = \\sum_e r_e$ is computed. The time until the next event, $\\Delta t$, is a random variable drawn from an exponential distribution with mean $1/R$, i.e., $\\Delta t = -\\ln(u_1) / R$, where $u_1$ is a uniform random number in $(0, 1]$. The simulation clock is then advanced by this increment: $t \\to t + \\Delta t$. Next, one event is chosen to occur from the list of all possible events. The probability of selecting a specific event $e$ is given by $r_e / R$. This is implemented by choosing a second uniform random number $u_2$ in $[0, R)$ and selecting the event corresponding to the partial sum of rates that first exceeds $u_2$.\n\n**3.3. State Update**\nThe lattice state is updated according to the chosen event:\n- If a diffusion event $(i \\to j)$ is selected, the particle at site $i$ is moved to site $j$.\n- If a forward reaction $A+B \\to C$ at sites $\\{i, j\\}$ is chosen, one of the sites is randomly selected to house the new $C$ particle, while the other becomes empty. This choice is made with equal probability ($1/2$).\n- If a reverse reaction $C \\to A+B$ from site $i$ to empty site $j$ is chosen, the $C$ particle at $i$ is removed, and particles $A$ and $B$ are placed at sites $i$ and $j$. The assignment of $A$ and $B$ to the two sites is random, with each of the two possible arrangements having equal probability ($1/2$).\n\nThe simulation terminates if either the total simulation time is reached or the system enters a \"frozen\" state where the total rate $R$ is $0$, meaning no events can occur.\n\n**4. Equilibration and Measurement**\nThe problem requires verifying detailed balance at equilibrium. To this end, each simulation run is divided into two phases. First, a \"burn-in\" phase of duration $T_{\\mathrm{burn}}$ allows the system to relax from its random initial state towards a statistical steady state (equilibrium). During this phase, no measurements are taken. Following the burn-in, a \"measurement\" phase begins and lasts for a duration of $T_{\\mathrm{meas}}$. During this second phase, the total number of forward reactions, $N_f$, and reverse reactions, $N_r$, are counted.\nThe forward and reverse fluxes, $J_f$ and $J_r$, are then calculated as $J_f = N_f / T_{\\mathrm{meas,eff}}$ and $J_r = N_r / T_{\\mathrm{meas,eff}}$, where $T_{\\mathrm{meas,eff}}$ is the effective measurement duration. Normally, $T_{\\mathrm{meas,eff}} = T_{\\mathrm{meas}}$. However, if the simulation stops in a frozen state before the full measurement window has elapsed, $T_{\\mathrm{meas,eff}}$ is the actual time the system was simulated within the measurement window.\n\n**5. Verification of Detailed Balance**\nAt equilibrium, the principle of detailed balance requires that the time-averaged rate of every elementary process be equal to the rate of its reverse process. For the reaction $A + B \\rightleftharpoons C$, this implies that the macroscopic forward flux $J_f$ must equal the reverse flux $J_r$. The simulation verifies this by computing the symmetric relative difference $\\delta$:\n$$\n\\delta = \\frac{|J_f - J_r|}{\\frac{1}{2}(J_f + J_r)}\n$$\nIf $J_f + J_r = 0$, the fluxes are perfectly equal (both are zero), and $\\delta$ is taken to be $0$. The condition for detailed balance being verified is $\\delta < \\varepsilon$, where $\\varepsilon$ is a given relative tolerance. The final output for each test case is a boolean value indicating whether this condition is met.", "answer": "```python\nimport numpy as np\n\ndef run_simulation(L, N_A0, N_B0, N_C0, D_A, D_B, D_C, k_f, k_b, T_burn, T_meas, seed, epsilon):\n    \"\"\"\n    Runs a single Kinetic Monte Carlo simulation for a reaction-diffusion system.\n    \"\"\"\n    # Species constants\n    EMPTY, A, B, C = 0, 1, 2, 3\n    species_map = {A: 'A', B: 'B', C: 'C'}\n    diffusion_rates = {A: D_A, B: D_B, C: D_C}\n\n    # Setup RNG\n    rng = np.random.default_rng(seed)\n\n    # --- 1. Initialize lattice ---\n    lattice = np.zeros((L, L), dtype=int)\n    total_particles = N_A0 + N_B0 + N_C0\n    \n    if total_particles > L * L:\n        raise ValueError(\"Total number of particles exceeds lattice size.\")\n\n    particle_types = ([A] * N_A0) + ([B] * N_B0) + ([C] * N_C0)\n    \n    all_sites_indices = np.arange(L * L)\n    chosen_sites_indices = rng.choice(all_sites_indices, size=total_particles, replace=False)\n    \n    for i, p_type in enumerate(particle_types):\n        r, c = np.unravel_index(chosen_sites_indices[i], (L, L))\n        lattice[r, c] = p_type\n\n    # --- 2. KMC Simulation Loop ---\n    t = 0.0\n    Nf_count = 0\n    Nr_count = 0\n    \n    t_total = T_burn + T_meas\n    is_in_measurement_phase = False\n\n    while t < t_total:\n        events = []  # List of tuples: (type, data)\n        rates = []\n\n        # --- 3. Enumerate all possible events and rates ---\n        # To avoid double counting A-B pairs, we iterate over unique pairs.\n        # A pair is defined by {pos1, pos2}. We check right and down neighbors.\n        # This covers all pairs exactly once on a periodic lattice.\n        for r in range(L):\n            for c in range(L):\n                p_type = lattice[r, c]\n                pos1 = (r, c)\n\n                if p_type == EMPTY:\n                    continue\n\n                # Check neighbors for diffusion and reverse reaction\n                neighbors = [((r - 1 + L) % L, c), ((r + 1) % L, c),\n                             (r, (c - 1 + L) % L), (r, (c + 1) % L)]\n                \n                for pos2 in neighbors:\n                    if lattice[pos2] == EMPTY:\n                        # Diffusion event\n                        events.append(('diff', (pos1, pos2)))\n                        rates.append(diffusion_rates[p_type])\n                        # Reverse reaction event\n                        if p_type == C:\n                            events.append(('react_r', (pos1, pos2)))\n                            rates.append(k_b)\n\n                # Forward reaction: check right and down neighbors to form unique pairs\n                pairs_to_check = [((r, c), (r, (c + 1) % L)), \n                                  ((r, c), ((r + 1) % L, c))]\n                \n                for pos1_check, pos2_check in pairs_to_check:\n                    p1_type = lattice[pos1_check]\n                    p2_type = lattice[pos2_check]\n                    if (p1_type == A and p2_type == B) or (p1_type == B and p2_type == A):\n                        events.append(('react_f', (pos1_check, pos2_check)))\n                        rates.append(k_f)\n        \n        # If no events are possible, system is frozen\n        if not events:\n            break\n\n        rates = np.array(rates)\n        R_total = np.sum(rates)\n        \n        # --- 4. Sample time step and select event ---\n        dt = rng.exponential(1.0 / R_total)\n        t_old = t\n        t = t + dt\n        \n        if not is_in_measurement_phase and t >= T_burn:\n            is_in_measurement_phase = True\n\n        # Select event with probability proportional to its rate\n        choice_idx = rng.choice(len(events), p=rates / R_total)\n        event_type, event_data = events[choice_idx]\n\n        # --- 5. Update state ---\n        if event_type == 'diff':\n            pos1, pos2 = event_data\n            lattice[pos2], lattice[pos1] = lattice[pos1], lattice[pos2]\n        \n        elif event_type == 'react_f':\n            pos1, pos2 = event_data\n            if rng.random() < 0.5:\n                lattice[pos1] = C\n                lattice[pos2] = EMPTY\n            else:\n                lattice[pos2] = C\n                lattice[pos1] = EMPTY\n            if is_in_measurement_phase and t > T_burn:\n                Nf_count += 1\n        \n        elif event_type == 'react_r':\n            posC, pos_empty = event_data\n            if rng.random() < 0.5:\n                lattice[posC] = A\n                lattice[pos_empty] = B\n            else:\n                lattice[posC] = B\n                lattice[pos_empty] = A\n            if is_in_measurement_phase and t > T_burn:\n                Nr_count += 1\n\n    # --- 6. Post-simulation analysis ---\n    t_end = t\n    T_meas_eff = max(0, t_end - T_burn)\n    \n    if T_meas_eff == 0:\n        return True # Jf and Jr are both 0, so delta = 0\n\n    Jf = Nf_count / T_meas_eff\n    Jr = Nr_count / T_meas_eff\n    \n    sum_flux = Jf + Jr\n    if sum_flux == 0:\n        delta = 0.0\n    else:\n        delta = abs(Jf - Jr) / (0.5 * sum_flux)\n        \n    return delta < epsilon\n\ndef solve():\n    \"\"\"\n    Defines test cases, runs simulations, and prints the final results.\n    \"\"\"\n    test_cases = [\n        # Case 1\n        {'L': 10, 'N_A0': 30, 'N_B0': 30, 'N_C0': 0, \n         'D_A': 1.0, 'D_B': 1.0, 'D_C': 1.0, 'k_f': 2.0, 'k_b': 1.0, \n         'T_burn': 5.0, 'T_meas': 20.0, 'seed': 123, 'epsilon': 0.08},\n        # Case 2\n        {'L': 10, 'N_A0': 40, 'N_B0': 40, 'N_C0': 0, \n         'D_A': 0.1, 'D_B': 0.1, 'D_C': 0.1, 'k_f': 5.0, 'k_b': 1.0, \n         'T_burn': 10.0, 'T_meas': 30.0, 'seed': 456, 'epsilon': 0.08},\n        # Case 3\n        {'L': 10, 'N_A0': 20, 'N_B0': 20, 'N_C0': 30, \n         'D_A': 1.0, 'D_B': 1.0, 'D_C': 1.0, 'k_f': 1.0, 'k_b': 4.0, \n         'T_burn': 5.0, 'T_meas': 20.0, 'seed': 789, 'epsilon': 0.08},\n    ]\n\n    results = []\n    for params in test_cases:\n        result = run_simulation(**params)\n        results.append(result)\n\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n\n```", "id": "2670649"}]}