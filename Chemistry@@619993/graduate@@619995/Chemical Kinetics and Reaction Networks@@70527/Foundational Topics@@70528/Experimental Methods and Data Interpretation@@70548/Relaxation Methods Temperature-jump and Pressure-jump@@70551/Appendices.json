{"hands_on_practices": [{"introduction": "Before we can analyze the kinetics of a fast reaction, we must first perturb it from equilibrium. This practice delves into the heart of a temperature-jump apparatus, applying the principle of Joule heating to understand the relationship between an electrical pulse and the resulting temperature change in a sample. By working through this exercise [@problem_id:2669948], you will gain a practical appreciation for the instrumental requirements of T-jump experiments and the physical principles that make them possible.", "problem": "A resistive temperature-jump (T-jump) apparatus is used to perturb the equilibrium of a fast reversible reaction in an aqueous microvolume so that its relaxation back to equilibrium can be monitored. The apparatus applies a rectangular current pulse through an immersed resistive path in the sample. Assume the following idealizations during the pulse: (i) the current $I$ and the resistance $R$ are constant; (ii) all electrical energy dissipated as heat is deposited uniformly in the sample; (iii) heat losses to the environment are negligible; (iv) the specific heat capacity $c_p$ and the density $\\rho$ of the solution are constant over the small temperature rise; and (v) there is no phase change or reaction enthalpy contribution during the pulse interval.\n\nThe sample volume is $V = 20.0 \\ \\mu\\mathrm{L}$ of aqueous solution with density $\\rho = 1.00 \\ \\mathrm{g \\ mL^{-1}}$ and specific heat capacity $c_p = 4.18 \\ \\mathrm{J \\ g^{-1} \\ K^{-1}}$ at the initial temperature. The effective resistance of the current path through the cell is $R = 5.00 \\ \\Omega$. A rectangular current pulse of duration $\\Delta t = 5.00 \\ \\mu\\mathrm{s}$ is applied. The target temperature jump is $\\Delta T_{\\mathrm{target}} = 10.0 \\ \\mathrm{K}$.\n\nStarting only from energy conservation and the definitions of Joule heating and macroscopic heat capacity, derive the relationship connecting the temperature rise $\\Delta T$ to $I$, $R$, $\\Delta t$, $m$, and $c_p$, and then determine the required current amplitude $I$ to achieve $\\Delta T_{\\mathrm{target}}$ under the given conditions. Round your final numerical result to three significant figures. Express the current in A.", "solution": "The problem as stated is determined to be valid. It is scientifically sound, resting on the fundamental principles of energy conservation, Joule heating, and calorimetry. It is well-posed, providing all necessary data and constraints to derive a unique, meaningful solution. It is objective and free of ambiguity. We shall therefore proceed with its solution.\n\nThe primary principle governing this process is the conservation of energy. The problem specifies that all electrical energy dissipated as heat is deposited uniformly in the sample and that heat losses to the environment are negligible. Thus, the electrical energy delivered by the current pulse, $E_{\\mathrm{elec}}$, must be equal to the heat absorbed by the sample, $Q$, which causes its temperature to rise.\n$$E_{\\mathrm{elec}} = Q$$\nThe electrical energy is the product of the electrical power, $P$, and the duration of the pulse, $\\Delta t$. According to the law of Joule heating, for a constant current $I$ flowing through a constant resistance $R$, the power dissipated is:\n$$P = I^{2}R$$\nThe total electrical energy dissipated over the time interval $\\Delta t$ is therefore:\n$$E_{\\mathrm{elec}} = P \\Delta t = I^{2}R \\Delta t$$\nThe heat absorbed by the sample is described by the principles of calorimetry. For a sample of mass $m$ with a specific heat capacity $c_p$ that is constant over the temperature interval, the heat required to produce a temperature change $\\Delta T$ is given by:\n$$Q = m c_p \\Delta T$$\nBy equating the electrical energy dissipated with the heat absorbed, we arrive at the relationship requested by the problem:\n$$I^{2}R \\Delta t = m c_p \\Delta T$$\nThis equation connects the temperature rise $\\Delta T$ to the current $I$, resistance $R$, pulse duration $\\Delta t$, sample mass $m$, and specific heat capacity $c_p$.\n\nTo solve for the required current amplitude $I$ to achieve the target temperature jump $\\Delta T_{\\mathrm{target}}$, we must rearrange this expression:\n$$I^{2} = \\frac{m c_p \\Delta T}{R \\Delta t}$$\n$$I = \\sqrt{\\frac{m c_p \\Delta T}{R \\Delta t}}$$\nThe mass $m$ of the solution is not given directly. It must be calculated from the given volume $V$ and density $\\rho$:\n$$m = \\rho V$$\nSubstituting this into the equation for the current $I$ yields the complete expression for calculation:\n$$I = \\sqrt{\\frac{\\rho V c_p \\Delta T}{R \\Delta t}}$$\nWe are given the following values:\n-   Sample volume $V = 20.0 \\ \\mu\\mathrm{L}$\n-   Density $\\rho = 1.00 \\ \\mathrm{g \\ mL^{-1}}$\n-   Specific heat capacity $c_p = 4.18 \\ \\mathrm{J \\ g^{-1} \\ K^{-1}}$\n-   Resistance $R = 5.00 \\ \\Omega$\n-   Pulse duration $\\Delta t = 5.00 \\ \\mu\\mathrm{s}$\n-   Target temperature jump $\\Delta T = \\Delta T_{\\mathrm{target}} = 10.0 \\ \\mathrm{K}$\n\nA consistent set of units must be used. We will perform calculations using grams ($\\mathrm{g}$) for mass, seconds ($\\mathrm{s}$) for time, Joules ($\\mathrm{J}$) for energy, Kelvin ($\\mathrm{K}$) for temperature, and Ohms ($\\Omega$) for resistance. The units are compatible, as $1 \\ \\mathrm{J} = 1 \\ \\mathrm{A}^{2} \\cdot \\Omega \\cdot \\mathrm{s}$.\n\nFirst, we calculate the mass $m$ of the aqueous solution. We must convert the volume from microliters ($\\mu\\mathrm{L}$) to milliliters ($\\mathrm{mL}$) to be consistent with the units of density.\n$$V = 20.0 \\ \\mu\\mathrm{L} = 20.0 \\times 10^{-3} \\ \\mathrm{mL} = 0.0200 \\ \\mathrm{mL}$$\n$$m = \\rho V = (1.00 \\ \\mathrm{g \\ mL^{-1}}) \\times (0.0200 \\ \\mathrm{mL}) = 0.0200 \\ \\mathrm{g}$$\nThe pulse duration must be converted from microseconds ($\\mu\\mathrm{s}$) to seconds ($\\mathrm{s}$):\n$$\\Delta t = 5.00 \\ \\mu\\mathrm{s} = 5.00 \\times 10^{-6} \\ \\mathrm{s}$$\nNow we substitute all numerical values into the expression for $I$:\n$$I = \\sqrt{\\frac{(0.0200 \\ \\mathrm{g}) \\times (4.18 \\ \\mathrm{J \\ g^{-1} \\ K^{-1}}) \\times (10.0 \\ \\mathrm{K})}{(5.00 \\ \\Omega) \\times (5.00 \\times 10^{-6} \\ \\mathrm{s})}}$$\nLet us evaluate the numerator (heat required) and the denominator separately.\nThe heat required is:\n$$Q = m c_p \\Delta T = (0.0200) \\times (4.18) \\times (10.0) \\ \\mathrm{J} = 0.836 \\ \\mathrm{J}$$\nThe term in the denominator is:\n$$R \\Delta t = (5.00 \\ \\Omega) \\times (5.00 \\times 10^{-6} \\ \\mathrm{s}) = 25.0 \\times 10^{-6} \\ \\Omega \\cdot \\mathrm{s} = 2.50 \\times 10^{-5} \\ \\Omega \\cdot \\mathrm{s}$$\nThe square of the current is then the ratio of these two quantities:\n$$I^{2} = \\frac{0.836 \\ \\mathrm{J}}{2.50 \\times 10^{-5} \\ \\Omega \\cdot \\mathrm{s}} = 33440 \\ \\mathrm{A}^{2}$$\nTaking the square root gives the amplitude of the current:\n$$I = \\sqrt{33440} \\ \\mathrm{A} \\approx 182.86606 \\ \\mathrm{A}$$\nThe problem requires the final numerical result to be rounded to three significant figures.\n$$I \\approx 183 \\ \\mathrm{A}$$\nThis is a substantial current, which is expected for producing a rapid temperature jump in a conductive medium.", "answer": "$$\\boxed{183}$$", "id": "2669948"}, {"introduction": "Once a system's temperature is suddenly increased, its equilibrium position shifts according to thermodynamic laws. This exercise [@problem_id:2669895] guides you through the fundamental derivation connecting the thermodynamic standard reaction enthalpy, $\\Delta H^\\circ$, to the experimentally observed relaxation amplitude. Mastering this connection is key to interpreting T-jump signals and extracting thermodynamic information from kinetic data.", "problem": "Consider a reversible, elementary isomerization $A \\rightleftharpoons B$ in an ideal solution at initial temperature $T_0$, with equilibrium constant $K(T) \\equiv \\frac{c_B^{\\mathrm{eq}}}{c_A^{\\mathrm{eq}}}$. The total analytical concentration is $c_T = c_A + c_B$, and the optical absorbance at a fixed probe wavelength obeys the Beer–Lambert law $A = \\ell\\left(\\varepsilon_A c_A + \\varepsilon_B c_B\\right)$, where $\\ell$ is the optical path length and $\\varepsilon_A,\\varepsilon_B$ are the molar absorptivities of $A$ and $B$, respectively. An instantaneous temperature-jump of magnitude $\\Delta T$ is applied at $t=0$, which is fast compared to the reaction relaxation so that the concentrations are unchanged at $t=0^+$, but the rate constants (and hence $K$) are changed to their values at $T_0+\\Delta T$. Assume activities equal concentrations, the standard reaction enthalpy $\\Delta H^\\circ$ is temperature-independent over the jump, and that the molar absorptivities are temperature-independent over the jump.\n\n1) Starting only from mass conservation, the definition of the equilibrium constant, the Beer–Lambert law, and the van 't Hoff relation $\\frac{d\\ln K}{dT}=\\frac{\\Delta H^\\circ}{R\\,T^2}$ (with $R$ the universal gas constant), derive an expression for the signed amplitude of the absorbance relaxation, defined as the difference between the new and the old equilibrium absorbances after the temperature-jump, in the form of a sensitivity factor with respect to the mole fraction of $A$ multiplied by the instantaneous equilibrium composition shift at $t=0^+$. Express the composition shift in terms of $K(T_0)$ and $K(T_0+\\Delta T)$, and express $K(T_0+\\Delta T)$ in terms of $K(T_0)$, $\\Delta H^\\circ$, $T_0$, and $\\Delta T$ without linearizing $\\ln K$.\n\n2) Evaluate the amplitude numerically for the following parameters: $T_0 = 298.0\\ \\mathrm{K}$, $\\Delta T = 5.00\\ \\mathrm{K}$, $K(T_0)=3.00$, $\\Delta H^\\circ = +45.0\\times 10^3\\ \\mathrm{J\\,mol^{-1}}$, $R=8.314462618\\ \\mathrm{J\\,mol^{-1}\\,K^{-1}}$, $c_T=1.50\\times 10^{-3}\\ \\mathrm{M}$, $\\ell=1.000\\ \\mathrm{cm}$, $\\varepsilon_A = 8.000\\times 10^3\\ \\mathrm{M^{-1}\\,cm^{-1}}$, and $\\varepsilon_B = 1.200\\times 10^4\\ \\mathrm{M^{-1}\\,cm^{-1}}$. Report the final numerical value of the absorbance amplitude in absorbance units (dimensionless). Round your answer to four significant figures.", "solution": "The problem is first validated for scientific soundness, consistency, and completeness. The problem statement describes a standard temperature-jump relaxation kinetics experiment. It is based on fundamental principles of chemical kinetics, thermodynamics (van 't Hoff equation), and spectroscopy (Beer–Lambert law). All necessary parameters are provided, and the assumptions (ideal solution, constancy of $\\Delta H^\\circ$ and molar absorptivities over a small temperature range) are physically reasonable and standard for this context. The problem is well-posed, objective, and scientifically grounded. Therefore, the problem is deemed valid and a solution will be constructed.\n\nPart 1: Derivation of the Absorbance Amplitude Expression\n\nThe total absorbance $A$ of the solution is given by the Beer–Lambert law:\n$$A = \\ell \\left( \\varepsilon_A c_A + \\varepsilon_B c_B \\right)$$\nwhere $\\ell$ is the path length, $\\varepsilon_i$ are the molar absorptivities, and $c_i$ are the concentrations of species $i \\in \\{A, B\\}$.\nMass conservation dictates that the total concentration $c_T = c_A + c_B$ is constant. We can express the individual concentrations in terms of the mole fraction of species $A$, $x_A = \\frac{c_A}{c_T}$, and the total concentration $c_T$.\n$$c_A = x_A c_T$$\n$$c_B = (1-x_A) c_T$$\nSubstituting these into the Beer–Lambert law yields an expression for absorbance as a function of $x_A$:\n$$A(x_A) = \\ell \\left( \\varepsilon_A (x_A c_T) + \\varepsilon_B ((1-x_A) c_T) \\right)$$\n$$A(x_A) = \\ell c_T \\left( \\varepsilon_A x_A + \\varepsilon_B - \\varepsilon_B x_A \\right)$$\n$$A(x_A) = \\ell c_T \\left( (\\varepsilon_A - \\varepsilon_B) x_A + \\varepsilon_B \\right)$$\nThe signed amplitude of the absorbance relaxation, $\\Delta A_{\\text{amp}}$, is defined as the difference between the final equilibrium absorbance (at temperature $T_f = T_0 + \\Delta T$) and the initial equilibrium absorbance (at temperature $T_0$). Let $x_{A,0}^{\\text{eq}}$ and $x_{A,f}^{\\text{eq}}$ be the equilibrium mole fractions of $A$ at $T_0$ and $T_f$, respectively.\n$$A_{\\text{old}}^{\\text{eq}} = A(x_{A,0}^{\\text{eq}}) = \\ell c_T \\left( (\\varepsilon_A - \\varepsilon_B) x_{A,0}^{\\text{eq}} + \\varepsilon_B \\right)$$\n$$A_{\\text{new}}^{\\text{eq}} = A(x_{A,f}^{\\text{eq}}) = \\ell c_T \\left( (\\varepsilon_A - \\varepsilon_B) x_{A,f}^{\\text{eq}} + \\varepsilon_B \\right)$$\nThe amplitude is their difference:\n$$\\Delta A_{\\text{amp}} = A_{\\text{new}}^{\\text{eq}} - A_{\\text{old}}^{\\text{eq}} = \\ell c_T (\\varepsilon_A - \\varepsilon_B) \\left( x_{A,f}^{\\text{eq}} - x_{A,0}^{\\text{eq}} \\right)$$\nThis expression is in the requested form. The \"sensitivity factor with respect to the mole fraction of $A$\" is the derivative of absorbance with respect to $x_A$, which is $\\frac{\\partial A}{\\partial x_A} = \\ell c_T (\\varepsilon_A - \\varepsilon_B)$. The \"composition shift\" is the change in the equilibrium mole fraction, $\\Delta x_A^{\\text{eq}} = x_{A,f}^{\\text{eq}} - x_{A,0}^{\\text{eq}}$.\n\nNext, we express the composition shift in terms of the equilibrium constants. The equilibrium constant is $K = \\frac{c_B^{\\text{eq}}}{c_A^{\\text{eq}}} = \\frac{x_B^{\\text{eq}}}{x_A^{\\text{eq}}} = \\frac{1-x_A^{\\text{eq}}}{x_A^{\\text{eq}}}$.\nSolving for $x_A^{\\text{eq}}$ gives $K x_A^{\\text{eq}} = 1 - x_A^{\\text{eq}}$, which rearranges to $(K+1)x_A^{\\text{eq}} = 1$, so $x_A^{\\text{eq}} = \\frac{1}{K+1}$.\nLet $K_0 = K(T_0)$ and $K_f = K(T_f) = K(T_0 + \\Delta T)$. The mole fractions are:\n$$x_{A,0}^{\\text{eq}} = \\frac{1}{K_0+1} \\quad \\text{and} \\quad x_{A,f}^{\\text{eq}} = \\frac{1}{K_f+1}$$\nThe composition shift is therefore:\n$$\\Delta x_A^{\\text{eq}} = \\frac{1}{K_f+1} - \\frac{1}{K_0+1}$$\n\nFinally, we must relate $K_f$ to $K_0$ using the van 't Hoff relation, $\\frac{d\\ln K}{dT}=\\frac{\\Delta H^\\circ}{R\\,T^2}$. Integrating this equation from $T_0$ to $T_f$, assuming $\\Delta H^\\circ$ is constant over this interval:\n$$\\int_{K_0}^{K_f} d\\ln K = \\int_{T_0}^{T_f} \\frac{\\Delta H^\\circ}{R\\,T^2} dT$$\n$$\\ln K_f - \\ln K_0 = \\frac{\\Delta H^\\circ}{R} \\left[ -\\frac{1}{T} \\right]_{T_0}^{T_f}$$\n$$\\ln\\left(\\frac{K_f}{K_0}\\right) = \\frac{\\Delta H^\\circ}{R} \\left( -\\frac{1}{T_f} + \\frac{1}{T_0} \\right) = \\frac{\\Delta H^\\circ}{R} \\left( \\frac{T_f - T_0}{T_0 T_f} \\right)$$\nSubstituting $T_f = T_0 + \\Delta T$ gives:\n$$\\ln\\left(\\frac{K_f}{K_0}\\right) = \\frac{\\Delta H^\\circ}{R} \\left( \\frac{\\Delta T}{T_0 (T_0 + \\Delta T)} \\right)$$\nExponentiating both sides yields the expression for $K_f$:\n$$K_f = K_0 \\exp\\left( \\frac{\\Delta H^\\circ}{R} \\frac{\\Delta T}{T_0 (T_0 + \\Delta T)} \\right)$$\nCombining these results, the final expression for the absorbance amplitude is:\n$$\\Delta A_{\\text{amp}} = \\ell c_T (\\varepsilon_A - \\varepsilon_B) \\left( \\frac{1}{K_f+1} - \\frac{1}{K_0+1} \\right)$$\nwith $K_f$ defined as above. This completes the derivation.\n\nPart 2: Numerical Evaluation\n\nWe are given the following parameters:\n$T_0 = 298.0\\ \\mathrm{K}$\n$\\Delta T = 5.00\\ \\mathrm{K}$\n$K_0 = K(T_0) = 3.00$\n$\\Delta H^\\circ = 45.0 \\times 10^3\\ \\mathrm{J\\,mol^{-1}}$\n$R = 8.314462618\\ \\mathrm{J\\,mol^{-1}\\,K^{-1}}$\n$c_T = 1.50 \\times 10^{-3}\\ \\mathrm{M}$\n$\\ell = 1.000\\ \\mathrm{cm}$\n$\\varepsilon_A = 8.000 \\times 10^3\\ \\mathrm{M^{-1}\\,cm^{-1}}$\n$\\varepsilon_B = 1.200 \\times 10^4\\ \\mathrm{M^{-1}\\,cm^{-1}}$\n\nFirst, calculate the new temperature $T_f$:\n$$T_f = T_0 + \\Delta T = 298.0\\ \\mathrm{K} + 5.00\\ \\mathrm{K} = 303.0\\ \\mathrm{K}$$\nNext, calculate the argument of the exponential for $K_f$:\n$$ \\frac{\\Delta H^\\circ}{R} \\frac{\\Delta T}{T_0 T_f} = \\frac{45.0 \\times 10^3\\ \\mathrm{J\\,mol^{-1}}}{8.314462618\\ \\mathrm{J\\,mol^{-1}\\,K^{-1}}} \\frac{5.00\\ \\mathrm{K}}{(298.0\\ \\mathrm{K})(303.0\\ \\mathrm{K})} \\approx 0.2996906 $$\nNow, calculate the new equilibrium constant $K_f$:\n$$K_f = (3.00) \\exp(0.2996906) \\approx (3.00)(1.34944) \\approx 4.04832$$\nNext, calculate the initial and final equilibrium mole fractions of $A$:\n$$x_{A,0}^{\\text{eq}} = \\frac{1}{K_0+1} = \\frac{1}{3.00+1} = \\frac{1}{4} = 0.25$$\n$$x_{A,f}^{\\text{eq}} = \\frac{1}{K_f+1} = \\frac{1}{4.04832+1} = \\frac{1}{5.04832} \\approx 0.198085$$\nThe composition shift is:\n$$\\Delta x_A^{\\text{eq}} = x_{A,f}^{\\text{eq}} - x_{A,0}^{\\text{eq}} \\approx 0.198085 - 0.25 = -0.051915$$\nNow, calculate the sensitivity factor:\n$$\\ell c_T (\\varepsilon_A - \\varepsilon_B) = (1.000\\ \\mathrm{cm})(1.50 \\times 10^{-3}\\ \\mathrm{M})(8.000 \\times 10^3 - 1.200 \\times 10^4)\\ \\mathrm{M^{-1}\\,cm^{-1}}$$\n$$ = (1.50 \\times 10^{-3})(-4.000 \\times 10^3) = -6.00$$\nFinally, calculate the absorbance amplitude:\n$$\\Delta A_{\\text{amp}} = (-6.00) \\times (-0.051915) \\approx 0.31149$$\nRounding the result to four significant figures gives $0.3115$. The positive sign indicates that the absorbance increases, which is consistent with an endothermic reaction ($\\Delta H^\\circ > 0$) shifting towards species $B$ (which has a higher molar absorptivity, $\\varepsilon_B > \\varepsilon_A$) upon a temperature increase.", "answer": "$$\n\\boxed{0.3115}\n$$", "id": "2669895"}, {"introduction": "The final, and often most challenging, part of any kinetics experiment is interpreting the noisy data to reveal the underlying physical model. This computational practice [@problem_id:2669947] addresses this challenge head-on, tasking you with implementing and comparing rigorous statistical methods—AIC, BIC, and cross-validation—to select the correct number of relaxation steps. This exercise provides an essential toolkit for robustly analyzing real-world experimental traces.", "problem": "You are given a modeling and model selection task grounded in chemical relaxation kinetics following a Temperature-jump (T-jump) perturbation. Under a small perturbation from equilibrium, linearization of a reaction network about its steady state implies that an observable relaxes as a sum of decoupled exponential modes. The dataset for such a relaxation at times $t$ can be modeled as\n$$\ny(t) = C + \\sum_{i=1}^{m} A_i \\exp\\!\\left(-\\frac{t}{\\tau_i}\\right) + \\varepsilon(t),\n$$\nwhere $m$ is the model order (the number of exponential modes), $A_i$ are real amplitudes, $\\tau_i \\gt 0$ are relaxation time constants in seconds, $C$ is a constant baseline, and $\\varepsilon(t)$ are independent and identically distributed Gaussian noises with zero mean and variance $\\sigma^2$.\n\nYour task is to implement principled model selection among one-, two-, and three-exponential models using maximum likelihood under Gaussian noise, the Akaike Information Criterion (AIC), the Bayesian Information Criterion (BIC), and $K$-fold cross-validation (CV). You must do so by explicitly fitting the nonlinear least-squares problem for each candidate order $m \\in \\{1,2,3\\}$ and computing the selection criteria from first principles.\n\nAssume the following throughout:\n- The noise $\\varepsilon(t)$ is Gaussian with zero mean and constant variance $\\sigma^2$ (unknown).\n- The maximum likelihood estimate under Gaussian noise coincides with minimizing the residual sum of squares\n$$\n\\mathrm{RSS}_m = \\sum_{j=1}^{n} \\left[y_j - \\left(C + \\sum_{i=1}^{m} A_i \\exp\\!\\left(-\\frac{t_j}{\\tau_i}\\right)\\right)\\right]^2,\n$$\nwhere $(t_j, y_j)$ are the $n$ measured points.\n- The number of fitted parameters for model order $m$ is $p_m = 2m + 1$ (the $m$ amplitudes, the $m$ time constants, and the offset $C$). For model comparison using information criteria, adopt the standard least-squares surrogate for the negative log-likelihood,\n$$\n-2 \\log \\hat{L}_m = n \\log\\!\\left(\\frac{\\mathrm{RSS}_m}{n}\\right) + \\text{constant},\n$$\nso that differences in criteria are unaffected by the additive constant.\n- Define the Akaike Information Criterion (AIC) and the Bayesian Information Criterion (BIC) for model $m$ as\n$$\n\\mathrm{AIC}_m = n \\log\\!\\left(\\frac{\\mathrm{RSS}_m}{n}\\right) + 2 p_m, \\qquad\n\\mathrm{BIC}_m = n \\log\\!\\left(\\frac{\\mathrm{RSS}_m}{n}\\right) + p_m \\log n.\n$$\n- For $K$-fold cross-validation, use $K = 5$ folds, a pseudorandom partition of the $n$ indices into $K$ folds using a fixed seed equal to $42$, and define the cross-validated mean squared prediction error as the mean over folds of the mean squared error on each held-out fold. In each fold, fit the model on the training subset only, and evaluate the mean squared prediction error on the validation subset.\n- Selection rule: for each criterion (AIC, BIC, CV), select the model order $m$ that minimizes the criterion. If two or more models are within a tolerance $\\epsilon = 10^{-9}$ of the minimum for that criterion, choose the smaller $m$.\n\nImplement the above for the following test suite of three synthetic T-jump datasets with known ground truth (time in seconds, signal in arbitrary consistent units). For each dataset, generate $n$ uniformly spaced time points from $t = 0$ to $t = T_{\\max}$ inclusive, simulate the noise-free signal using the given ground-truth parameters, and add independent Gaussian noise with the stated standard deviation $\\sigma$:\n- Dataset $1$ (single-exponential truth): $n = 200$, $T_{\\max} = 3.0$, $m^\\star = 1$, amplitudes $[1.2]$, time constants $[0.5]$, offset $C = 0.0$, noise standard deviation $\\sigma = 0.02$.\n- Dataset $2$ (two-exponential truth): $n = 300$, $T_{\\max} = 2.0$, $m^\\star = 2$, amplitudes $[0.6, 0.4]$, time constants $[0.1, 1.0]$, offset $C = 0.05$, noise standard deviation $\\sigma = 0.02$.\n- Dataset $3$ (three-exponential truth): $n = 400$, $T_{\\max} = 3.0$, $m^\\star = 3$, amplitudes $[0.5, 0.3, 0.2]$, time constants $[0.02, 0.2, 2.0]$, offset $C = -0.1$, noise standard deviation $\\sigma = 0.01$.\n\nAll simulated quantities that represent time must be in seconds. All logarithms are natural logarithms. Any angles, if they appear, must be in radians. No quantities in your output should be written as percentages; if any proportions appear, they must be represented as decimals or fractions.\n\nFinal output specification:\n- For each dataset in order $1,2,3$, compute the selected model orders according to AIC, BIC, and $5$-fold CV as defined above.\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets. The list must contain $9$ integers in the order\n$$\n[\\text{AIC}_1,\\ \\text{BIC}_1,\\ \\text{CV}_1,\\ \\text{AIC}_2,\\ \\text{BIC}_2,\\ \\text{CV}_2,\\ \\text{AIC}_3,\\ \\text{BIC}_3,\\ \\text{CV}_3],\n$$\nwhere, for example, $\\text{AIC}_2$ is the selected model order for Dataset $2$ according to AIC. Each entry must be the integer $1$, $2$, or $3$.", "solution": "The problem requires the implementation of a model selection procedure to determine the optimal number of exponential terms in a model for chemical relaxation kinetics. We are given three candidate models, corresponding to a sum of $m=1$, $m=2$, and $m=3$ exponential decays, plus a constant offset. The model for the observed signal $y(t)$ at time $t$ is\n$$\ny(t) = C + \\sum_{i=1}^{m} A_i \\exp\\left(-\\frac{t}{\\tau_i}\\right) + \\varepsilon(t),\n$$\nwhere $C$ is a baseline offset, $A_i$ are amplitudes, $\\tau_i$ are positive relaxation time constants, and $\\varepsilon(t)$ represents independent and identically distributed Gaussian noise with zero mean. The number of estimable parameters for a model of order $m$ is $p_m = 2m + 1$.\n\nThe primary task is to find the optimal set of parameters $\\{C, \\{A_i\\}_{i=1}^m, \\{\\tau_i\\}_{i=1}^m\\}$ for each model order $m \\in \\{1, 2, 3\\}$. The principle of maximum likelihood for Gaussian noise dictates that these parameters are found by minimizing the Residual Sum of Squares (RSS):\n$$\n\\mathrm{RSS}_m = \\sum_{j=1}^{n} \\left[y_j - \\hat{y}_m(t_j)\\right]^2,\n$$\nwhere $\\{y_j\\}$ are the $n$ observed data points at times $\\{t_j\\}$, and $\\hat{y}_m(t)$ is the model function for order $m$. This constitutes a non-linear least-squares optimization problem. We will employ the Levenberg-Marquardt algorithm via `scipy.optimize.curve_fit` to solve it. Success in non-linear fitting heavily depends on providing good initial parameter guesses and physically motivated constraints. We will enforce the constraint $\\tau_i > 0$ using bounds. Initial guesses will be derived from the data's macroscopic features: the baseline $C$ is estimated from the signal at long times, total amplitude from the initial signal change, and time constants $\\tau_i$ are distributed logarithmically over the measurement time window.\n\nWith the minimized $\\mathrm{RSS}_m$ for each model, we proceed to model selection using three distinct criteria.\n\nFirst, the Akaike Information Criterion (AIC) and the Bayesian Information Criterion (BIC). These are information-theoretic criteria that balance goodness-of-fit against model complexity. The provided formulas are:\n$$\n\\mathrm{AIC}_m = n \\log\\left(\\frac{\\mathrm{RSS}_m}{n}\\right) + 2 p_m\n$$\n$$\n\\mathrm{BIC}_m = n \\log\\left(\\frac{\\mathrm{RSS}_m}{n}\\right) + p_m \\log n\n$$\nThe BIC imposes a stronger penalty for additional parameters than AIC, as its penalty term scales with the logarithm of the number of data points, $\\log n$. For both criteria, the model order $m$ that minimizes the value is considered optimal.\n\nSecond, $K$-fold cross-validation (CV) with $K=5$. This method provides an estimate of the model's predictive performance on data not used during training. The dataset is partitioned into $K=5$ disjoint folds. For each fold, the model is trained on the other $K-1$ folds, and its mean squared error (MSE) is calculated on the held-out fold. The CV score for a model is the average of these MSEs over all $K$ folds:\n$$\n\\mathrm{CV-MSE}_m = \\frac{1}{K} \\sum_{k=1}^{K} \\left( \\frac{1}{|S_k|} \\sum_{j \\in S_k} \\left[y_j - \\hat{y}_{m, -k}(t_j)\\right]^2 \\right)\n$$\nwhere $S_k$ denotes the $k$-th fold and $\\hat{y}_{m, -k}(t_j)$ is the prediction from the model trained on all data except fold $k$. The model order $m$ that minimizes this average predictive error is chosen. A fixed random seed of $42$ is used for partitioning to ensure reproducibility.\n\nThe overall procedure for each of the three supplied datasets is as follows:\n1.  Generate the synthetic dataset: create the time vector, compute the true signal using the given parameters, and add Gaussian noise with the specified standard deviation $\\sigma$.\n2.  For each model order $m \\in \\{1, 2, 3\\}$:\n    a. Fit the model to the full dataset to find the best-fit parameters, then calculate $\\mathrm{RSS}_m$.\n    b. Use $\\mathrm{RSS}_m$ to compute $\\mathrm{AIC}_m$ and $\\mathrm{BIC}_m$.\n    c. Perform $5$-fold cross-validation to compute $\\mathrm{CV-MSE}_m$.\n3.  For each of the three criteria, select the model order $m$ that minimizes the respective score. If multiple models have scores within a tolerance of $\\epsilon = 10^{-9}$ of the minimum, the one with the smallest $m$ is chosen.\n4.  The final output is an aggregation of the nine selected model orders ($3$ criteria $\\times$ $3$ datasets).", "answer": "```python\nimport numpy as np\nfrom scipy.optimize import curve_fit\n\ndef solve():\n    \"\"\"\n    Implements model selection for exponential decay models using AIC, BIC,\n    and K-fold cross-validation.\n    \"\"\"\n    test_cases = [\n        {\n            \"n\": 200, \"T_max\": 3.0, \"m_true\": 1,\n            \"A_true\": [1.2], \"tau_true\": [0.5], \"C_true\": 0.0,\n            \"sigma\": 0.02, \"gen_seed\": 0\n        },\n        {\n            \"n\": 300, \"T_max\": 2.0, \"m_true\": 2,\n            \"A_true\": [0.6, 0.4], \"tau_true\": [0.1, 1.0], \"C_true\": 0.05,\n            \"sigma\": 0.02, \"gen_seed\": 1\n        },\n        {\n            \"n\": 400, \"T_max\": 3.0, \"m_true\": 3,\n            \"A_true\": [0.5, 0.3, 0.2], \"tau_true\": [0.02, 0.2, 2.0], \"C_true\": -0.1,\n            \"sigma\": 0.01, \"gen_seed\": 2\n        }\n    ]\n\n    def model_factory(m):\n        \"\"\"Creates a model function for a sum of m exponentials.\"\"\"\n        def model(t, *params):\n            C = params[0]\n            Amps = params[1:m+1]\n            Taus = params[m+1:2*m+1]\n            y = np.full_like(t, C, dtype=float)\n            for i in range(m):\n                y += Amps[i] * np.exp(-t / Taus[i])\n            return y\n        return model\n\n    def get_initial_params(m, t, y):\n        \"\"\"Generates initial parameter guesses for the optimizer.\"\"\"\n        C_guess = y[-1]\n        A_total_guess = y[0] - C_guess\n        A_guesses = [A_total_guess / m] * m\n        \n        t_max = t[-1]\n        t_step = t[1] - t[0] if len(t) > 1 else 0.01\n        if t_step = 0: t_step = 1e-4\n\n        if m == 1:\n            tau_guesses = [t_max / 3.0]\n        else:\n            # Distribute time constants logarithmically\n            tau_guesses = np.logspace(np.log10(t_step), np.log10(t_max), m).tolist()\n\n        return [C_guess] + A_guesses + tau_guesses\n\n    def get_bounds(m, t):\n        \"\"\"Generates parameter bounds for the optimizer.\"\"\"\n        t_max = t[-1]\n        lower_bounds = [-np.inf] + [-np.inf] * m + [1e-9] * m\n        upper_bounds = [np.inf] + [np.inf] * m + [t_max * 10] * m\n        return (lower_bounds, upper_bounds)\n\n    def select_best_model(scores, tolerance=1e-9):\n        \"\"\"Selects the best model order based on scores and a tie-breaking rule.\"\"\"\n        if not scores or all(s is None or np.isinf(s) for s in scores):\n            return -1  # Indicates failure for all models\n\n        valid_scores = [s for s in scores if s is not None and not np.isinf(s)]\n        if not valid_scores: return -1\n\n        min_score = min(valid_scores)\n        \n        candidate_ms = []\n        for i, score in enumerate(scores):\n            if score is not None and not np.isinf(score):\n                if score = min_score + tolerance:\n                    candidate_ms.append(i + 1)\n        \n        return min(candidate_ms) if candidate_ms else -1\n\n    all_results = []\n    \n    for case in test_cases:\n        n, T_max, m_true = case['n'], case['T_max'], case['m_true']\n        A_true, tau_true, C_true = case['A_true'], case['tau_true'], case['C_true']\n        sigma, gen_seed = case['sigma'], case['gen_seed']\n        \n        # --- Generate Data ---\n        t = np.linspace(0, T_max, n)\n        true_model_func = model_factory(m_true)\n        y_true = true_model_func(t, *([C_true] + A_true + tau_true))\n        rng_data = np.random.default_rng(gen_seed)\n        noise = rng_data.normal(loc=0.0, scale=sigma, size=n)\n        y_obs = y_true + noise\n\n        aic_scores, bic_scores, cv_scores = [], [], []\n\n        for m in [1, 2, 3]:\n            model_m = model_factory(m)\n            p0 = get_initial_params(m, t, y_obs)\n            bounds = get_bounds(m, t)\n            p_m = 2 * m + 1\n\n            # --- Full data fit for AIC/BIC ---\n            try:\n                popt, _ = curve_fit(model_m, t, y_obs, p0=p0, bounds=bounds, maxfev=10000)\n                y_pred = model_m(t, *popt)\n                rss_m = np.sum((y_obs - y_pred)**2)\n                \n                if rss_m = 1e-12: # Avoid log(0) or instability\n                    aic_m = bic_m = np.inf\n                else:\n                    log_likelihood_term = n * np.log(rss_m / n)\n                    aic_m = log_likelihood_term + 2 * p_m\n                    bic_m = log_likelihood_term + p_m * np.log(n)\n            except (RuntimeError, ValueError):\n                aic_m = bic_m = np.inf\n            aic_scores.append(aic_m)\n            bic_scores.append(bic_m)\n\n            # --- 5-fold Cross-Validation ---\n            K = 5\n            rs_cv = np.random.RandomState(42)\n            indices = np.arange(n)\n            rs_cv.shuffle(indices)\n            folds = np.array_split(indices, K)\n            \n            fold_mses = []\n            fit_failed_in_cv = False\n            for val_idx in folds:\n                train_idx = np.setdiff1d(indices, val_idx, assume_unique=True)\n                \n                t_train, y_train = t[train_idx], y_obs[train_idx]\n                t_val, y_val = t[val_idx], y_obs[val_idx]\n\n                p0_cv = get_initial_params(m, t_train, y_train)\n                bounds_cv = get_bounds(m, t_train)\n\n                try:\n                    popt_cv, _ = curve_fit(model_m, t_train, y_train, p0=p0_cv, bounds=bounds_cv, maxfev=10000)\n                    y_pred_val = model_m(t_val, *popt_cv)\n                    mse_k = np.mean((y_val - y_pred_val)**2)\n                    fold_mses.append(mse_k)\n                except (RuntimeError, ValueError):\n                    fit_failed_in_cv = True\n                    break\n            \n            cv_m = np.mean(fold_mses) if not fit_failed_in_cv else np.inf\n            cv_scores.append(cv_m)\n\n        # --- Select best model for this dataset ---\n        aic_choice = select_best_model(aic_scores)\n        bic_choice = select_best_model(bic_scores)\n        cv_choice = select_best_model(cv_scores)\n\n        all_results.extend([aic_choice, bic_choice, cv_choice])\n\n    print(f\"[{','.join(map(str, all_results))}]\")\n\nsolve()\n```", "id": "2669947"}]}