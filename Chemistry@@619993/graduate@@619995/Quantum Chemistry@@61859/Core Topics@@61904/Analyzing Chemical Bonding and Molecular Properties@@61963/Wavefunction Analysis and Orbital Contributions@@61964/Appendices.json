{"hands_on_practices": [{"introduction": "Before we can analyze a wavefunction, we must first construct it correctly. This exercise returns to the first principles of the Linear Combination of Atomic Orbitals (LCAO) method, focusing on the crucial step of normalization. By deriving the normalization constant for a simple bonding orbital, you will reinforce your understanding of how the non-orthogonality of atomic orbitals, quantified by the overlap integral $S$, is handled within the quantum mechanical formalism [@problem_id:2936210].", "problem": "Consider a homonuclear diatomic molecule described in a minimal Linear Combination of Atomic Orbitals (LCAO) approach to construct a Molecular Orbital (MO). Let $\\chi_{A}$ and $\\chi_{B}$ be two real atomic basis functions centered on nuclei $A$ and $B$, respectively. Assume that each basis function is individually normalized, so that $\\langle \\chi_{A} | \\chi_{A} \\rangle = 1$ and $\\langle \\chi_{B} | \\chi_{B} \\rangle = 1$, and define the overlap integral $S = \\langle \\chi_{A} | \\chi_{B} \\rangle$, which is real due to the assumed reality of the basis functions. The gerade (bonding) molecular orbital is postulated as a symmetric combination $\\phi_{g} = N \\big( \\chi_{A} + \\chi_{B} \\big)$ with a real, positive normalization constant $N$.\n\nUsing only the axioms of the Hilbert space of square-integrable functions, including linearity and conjugate symmetry of the inner product, and the definition of normalization for a state vector, derive an explicit closed-form expression for $N$ in terms of $S$. Express your final answer as a simplified analytic expression for $N$.", "solution": "The problem statement presented is scientifically sound, self-contained, and well-posed. It requests the derivation of the normalization constant for a simple molecular orbital within the LCAO framework, which represents a fundamental calculation in quantum chemistry. All necessary information is provided, and the terminology is precise. We will proceed with the derivation.\n\nThe starting point is the normalization condition for any quantum mechanical state vector, which dictates that its inner product with itself must equal $1$. For the given molecular orbital $\\phi_g$, this condition is expressed as:\n$$\n\\langle \\phi_g | \\phi_g \\rangle = 1\n$$\nThe problem defines the molecular orbital as $\\phi_g = N (\\chi_A + \\chi_B)$, where $N$ is the real, positive normalization constant, and $\\chi_A$ and $\\chi_B$ are real atomic basis functions. Substituting this definition into the normalization condition yields:\n$$\n\\langle N (\\chi_A + \\chi_B) | N (\\chi_A + \\chi_B) \\rangle = 1\n$$\nThe inner product is linear with respect to the ket vector (the right side) and conjugate-linear with respect to the bra vector (the left side). Since $N$ is a real constant, its complex conjugate $N^*$ is equal to $N$. We can therefore factor $N$ from the ket and $N^*$ from the bra:\n$$\nN^* N \\langle (\\chi_A + \\chi_B) | (\\chi_A + \\chi_B) \\rangle = 1\n$$\n$$\nN^2 \\langle (\\chi_A + \\chi_B) | (\\chi_A + \\chi_B) \\rangle = 1\n$$\nNext, we expand the inner product using the property of linearity:\n$$\n\\langle (\\chi_A + \\chi_B) | (\\chi_A + \\chi_B) \\rangle = \\langle \\chi_A | (\\chi_A + \\chi_B) \\rangle + \\langle \\chi_B | (\\chi_A + \\chi_B) \\rangle\n$$\n$$\n= \\langle \\chi_A | \\chi_A \\rangle + \\langle \\chi_A | \\chi_B \\rangle + \\langle \\chi_B | \\chi_A \\rangle + \\langle \\chi_B | \\chi_B \\rangle\n$$\nThe problem provides the following definitions from the givens:\n$1$. The basis functions are normalized: $\\langle \\chi_A | \\chi_A \\rangle = 1$ and $\\langle \\chi_B | \\chi_B \\rangle = 1$.\n$2$. The overlap integral is $S = \\langle \\chi_A | \\chi_B \\rangle$.\nFrom the conjugate symmetry property of the inner product, we have $\\langle \\chi_B | \\chi_A \\rangle = \\langle \\chi_A | \\chi_B \\rangle^*$. Because the basis functions $\\chi_A$ and $\\chi_B$ are stipulated to be real, the overlap integral $S$ is also real. Therefore, $S^* = S$, which implies $\\langle \\chi_B | \\chi_A \\rangle = S$.\n\nSubstituting these components back into the expanded inner product gives:\n$$\n\\langle (\\chi_A + \\chi_B) | (\\chi_A + \\chi_B) \\rangle = 1 + S + S + 1 = 2 + 2S = 2(1+S)\n$$\nNow, we substitute this result back into the normalization equation:\n$$\nN^2 [2(1+S)] = 1\n$$\nSolving for $N^2$, we obtain:\n$$\nN^2 = \\frac{1}{2(1+S)}\n$$\nFinally, we solve for $N$ by taking the square root. The problem specifies that $N$ must be a positive constant, so we select the positive root:\n$$\nN = \\sqrt{\\frac{1}{2(1+S)}} = \\frac{1}{\\sqrt{2(1+S)}}\n$$\nThis is the explicit closed-form expression for the normalization constant $N$ in terms of the overlap integral $S$.", "answer": "$$\n\\boxed{\\frac{1}{\\sqrt{2(1+S)}}}\n$$", "id": "2936210"}, {"introduction": "Once a molecular wavefunction is computed, a key step in its interpretation is assigning the total electron density to individual atoms, which yields atomic charges. This practice explores two of the most historically important methods for this task: Mulliken and Löwdin population analysis. By applying both schemes to the same hypothetical molecular system, you will gain direct experience with their computational mechanics and see firsthand how their different underlying assumptions for handling overlap density lead to quantitatively different chemical pictures [@problem_id:2936252].", "problem": "Consider a linear triatomic chain with atoms labeled $A$–$B$–$C$ and one real, normalized atomic orbital per atom, collected in a non-orthogonal atomic orbital basis. You are given the overlap matrix $S$ and the one-particle density matrix $P$ (closed shell) in this atomic orbital basis:\n$$\nS \\;=\\; \\begin{pmatrix}\n1 & 0.2 & 0 \\\\\n0.2 & 1 & 0.2 \\\\\n0 & 0.2 & 1\n\\end{pmatrix}, \n\\qquad\nP \\;=\\; \\begin{pmatrix}\n1.6 & 0.4 & 0 \\\\\n0.4 & 0.48 & 0.4 \\\\\n0 & 0.4 & 1.6\n\\end{pmatrix}.\n$$\nAssume the Born–Oppenheimer approximation and a single-determinant description. Start from the fundamental definitions that in a non-orthogonal basis the total number of electrons is $N=\\mathrm{Tr}(P S)$, that Mulliken’s gross orbital populations arise from equally partitioning overlap populations between atoms, and that Löwdin’s populations arise from symmetric orthogonalization of the basis. Using only these bases, do the following:\n\n1. Verify the electron count by computing $N=\\mathrm{Tr}(P S)$.\n2. Derive, from first principles, the Mulliken and Löwdin constructions of gross orbital populations, and apply them to compute the gross electron population on atom $B$ (the central atom) in each scheme.\n3. Let $\\Delta$ denote the difference between the Mulliken and Löwdin gross populations on atom $B$, defined by\n$$\n\\Delta \\;=\\; N_{B}^{\\mathrm{Mulliken}} \\;-\\; N_{B}^{\\mathrm{L\\ddot{o}wdin}}.\n$$\nProvide $\\Delta$ as your final answer.\n\nYour final answer must be a single closed-form analytic expression. Do not include units. If you choose to approximate numerically at intermediate steps, ensure that the closed form you report is exact in radicals (no decimal truncation in the final expression). In your reasoning, explain qualitatively how and why the Mulliken and Löwdin schemes can give different atomic populations for this system, given the provided $S$ and $P$.", "solution": "The problem statement will first be subjected to rigorous validation.\n\n**Step 1: Extract Givens**\nThe givens are:\n- A linear triatomic chain $A$–$B$–$C$.\n- A non-orthogonal basis of one real, normalized atomic orbital per atom.\n- The overlap matrix $S$:\n$$\nS \\;=\\; \\begin{pmatrix}\n1 & 0.2 & 0 \\\\\n0.2 & 1 & 0.2 \\\\\n0 & 0.2 & 1\n\\end{pmatrix}\n$$\n- The one-particle density matrix $P$ for a closed-shell system:\n$$\nP \\;=\\; \\begin{pmatrix}\n1.6 & 0.4 & 0 \\\\\n0.4 & 0.48 & 0.4 \\\\\n0 & 0.4 & 1.6\n\\end{pmatrix}\n$$\n- The definition for the total number of electrons: $N=\\mathrm{Tr}(P S)$.\n- The definitions for Mulliken and Löwdin gross orbital populations.\n- The quantity to be calculated: $\\Delta = N_{B}^{\\mathrm{Mulliken}} - N_{B}^{\\mathrm{L\\ddot{o}wdin}}$.\n\n**Step 2: Validate Using Extracted Givens**\nThe problem is scientifically grounded, dealing with standard concepts from quantum chemistry (population analysis in non-orthogonal bases). The language is objective and precise. To check for self-consistency, we compute the product matrix $PS$:\n$$\nPS = \\begin{pmatrix}\n1.6 & 0.4 & 0 \\\\\n0.4 & 0.48 & 0.4 \\\\\n0 & 0.4 & 1.6\n\\end{pmatrix}\n\\begin{pmatrix}\n1 & 0.2 & 0 \\\\\n0.2 & 1 & 0.2 \\\\\n0 & 0.2 & 1\n\\end{pmatrix}\n= \\begin{pmatrix}\n1.6 \\times 1 + 0.4 \\times 0.2 & 1.6 \\times 0.2 + 0.4 \\times 1 & 0.4 \\times 0.2 \\\\\n0.4 \\times 1 + 0.48 \\times 0.2 & 0.4 \\times 0.2 + 0.48 \\times 1 + 0.4 \\times 0.2 & 0.48 \\times 0.2 + 0.4 \\times 1 \\\\\n0.4 \\times 0.2 & 0.4 \\times 1 + 1.6 \\times 0.2 & 0.4 \\times 0.2 + 1.6 \\times 1\n\\end{pmatrix}\n$$\n$$\nPS = \\begin{pmatrix}\n1.68 & 0.72 & 0.08 \\\\\n0.496 & 0.64 & 0.496 \\\\\n0.08 & 0.72 & 1.68\n\\end{pmatrix}\n$$\nThe trace is $\\mathrm{Tr}(PS) = 1.68 + 0.64 + 1.68 = 4.00$. The total number of electrons is $N=4$, an integer, which is physically sensible for a closed-shell system. The problem is well-posed and internally consistent.\n\n**Step 3: Verdict and Action**\nThe problem is valid. We proceed to the solution.\n\nThe solution requires three calculations: $N$, $N_{B}^{\\mathrm{Mulliken}}$, and $N_{B}^{\\mathrm{L\\ddot{o}wdin}}$.\n\n1.  **Verification of the Electron Count**\n    As calculated during validation, the total number of electrons $N$ is:\n    $$\n    N = \\mathrm{Tr}(PS) = \\mathrm{Tr} \\begin{pmatrix}\n    1.68 & 0.72 & 0.08 \\\\\n    0.496 & 0.64 & 0.496 \\\\\n    0.08 & 0.72 & 1.68\n    \\end{pmatrix} = 1.68 + 0.64 + 1.68 = 4\n    $$\n    The system contains $4$ electrons.\n\n2.  **Derivation and Calculation of Atomic Populations**\n\n    **Mulliken Population Analysis**\n    The Mulliken scheme partitions the total electron count, $N = \\sum_{\\mu, \\nu} P_{\\nu\\mu} S_{\\mu\\nu}$, by assigning electron density to individual atomic orbitals. The gross population on an atomic orbital $\\mu$ is defined as the sum of all terms in the trace expression involving that orbital:\n    $$\n    N_{\\mu}^{\\mathrm{Mulliken}} = \\sum_{\\nu} P_{\\mu\\nu} S_{\\nu\\mu} = (PS)_{\\mu\\mu}\n    $$\n    This corresponds to taking the diagonal elements of the matrix product $PS$. For atom $B$, which corresponds to orbital $2$, the gross population is:\n    $$\n    N_{B}^{\\mathrm{Mulliken}} = (PS)_{22}\n    $$\n    From our previous calculation of $PS$:\n    $$\n    N_{B}^{\\mathrm{Mulliken}} = (PS)_{22} = 0.4 \\times 0.2 + 0.48 \\times 1 + 0.4 \\times 0.2 = 0.08 + 0.48 + 0.08 = 0.64\n    $$\n    In exact fraction form, $N_{B}^{\\mathrm{Mulliken}} = \\frac{64}{100} = \\frac{16}{25}$.\n\n    **Löwdin Population Analysis**\n    The Löwdin scheme first transforms the non-orthogonal atomic orbital basis $\\{|\\chi_{\\mu}\\rangle\\}$ into an orthonormal basis $\\{|\\phi_{\\mu}\\rangle\\}$ via symmetric orthogonalization: $|\\phi\\rangle = |\\chi\\rangle S^{-1/2}$. In this new basis, the overlap matrix is the identity, so the electron population on an orbital $\\mu$ is simply the corresponding diagonal element of the transformed density matrix, $P'$. The transformation rule for the density matrix is $P' = S^{1/2} P S^{1/2}$. The invariance of the trace, $N = \\mathrm{Tr}(P') = \\mathrm{Tr}(S^{1/2} P S^{1/2}) = \\mathrm{Tr}(PS)$, is satisfied.\n    The Löwdin population on atom $B$ is thus:\n    $$\n    N_{B}^{\\mathrm{L\\ddot{o}wdin}} = (P')_{22} = (S^{1/2} P S^{1/2})_{22} = \\sum_{k=1}^{3} \\sum_{l=1}^{3} (S^{1/2})_{2k} P_{kl} (S^{1/2})_{l2}\n    $$\n    To compute this, we must find $S^{1/2}$. This is achieved by diagonalizing $S$. $S = UDU^T$, where $D$ is the diagonal matrix of eigenvalues and $U$ is the orthogonal matrix of eigenvectors. Then $S^{1/2} = UD^{1/2}U^T$.\n    The characteristic equation for $S$ is $\\det(S - \\lambda I) = 0$:\n    $$\n    (1-\\lambda)((1-\\lambda)^2 - (0.2)^2) - 0.2(0.2(1-\\lambda)) = (1-\\lambda)((1-\\lambda)^2 - 0.04 - 0.04) = (1-\\lambda)((1-\\lambda)^2 - 0.08) = 0\n    $$\n    The eigenvalues are $\\lambda_2 = 1$ and $1-\\lambda = \\pm\\sqrt{0.08} = \\pm \\frac{2\\sqrt{2}}{10} = \\pm \\frac{\\sqrt{2}}{5}$. Thus, the eigenvalues are $\\lambda_1 = 1 - \\frac{\\sqrt{2}}{5}$, $\\lambda_2 = 1$, and $\\lambda_3 = 1 + \\frac{\\sqrt{2}}{5}$.\n    The corresponding normalized eigenvectors are:\n    $$\n    v_1 = \\begin{pmatrix} \\frac{1}{2} \\\\ -\\frac{\\sqrt{2}}{2} \\\\ \\frac{1}{2} \\end{pmatrix}, \\quad v_2 = \\begin{pmatrix} \\frac{1}{\\sqrt{2}} \\\\ 0 \\\\ -\\frac{1}{\\sqrt{2}} \\end{pmatrix}, \\quad v_3 = \\begin{pmatrix} \\frac{1}{2} \\\\ \\frac{\\sqrt{2}}{2} \\\\ \\frac{1}{2} \\end{pmatrix}\n    $$\n    The matrix of eigenvectors is $U = (v_1, v_2, v_3)$. The matrix $S^{1/2}$ is calculated, but to find $(P')_{22}$, we can expand the summation. Due to the symmetry of the system, $S^{1/2}$ has the form $\\begin{pmatrix} x & y & z \\\\ y & w & y \\\\ z & y & x \\end{pmatrix}$.\n    The term we need is $(P')_{22} = (S^{1/2} P S^{1/2})_{22} = \\sum_{k,l} (S^{1/2})_{2k} P_{kl} (S^{1/2})_{l2}$.\n    $$\n    (P')_{22} = (S^{1/2})_{21} \\sum_l P_{1l}(S^{1/2})_{l2} + (S^{1/2})_{22} \\sum_l P_{2l}(S^{1/2})_{l2} + (S^{1/2})_{23} \\sum_l P_{3l}(S^{1/2})_{l2}\n    $$\n    Using $(S^{1/2})_{21}=y, (S^{1/2})_{22}=w, (S^{1/2})_{23}=y$ and the structure of $P$:\n    $$\n    (P')_{22} = y[P_{11}(S^{1/2})_{12} + P_{12}(S^{1/2})_{22}] + w[P_{21}(S^{1/2})_{12} + P_{22}(S^{1/2})_{22} + P_{23}(S^{1/2})_{32}] + y[P_{32}(S^{1/2})_{22} + P_{33}(S^{1/2})_{32}]\n    $$\n    Since $(S^{1/2})_{12}=(S^{1/2})_{32}=y$ and $(S^{1/2})_{22}=w$, and $P_{11}=P_{33}$, $P_{12}=P_{21}=P_{23}=P_{32}$:\n    $$\n    (P')_{22} = y[P_{11}y + P_{12}w] + w[P_{12}y + P_{22}w + P_{12}y] + y[P_{12}w + P_{11}y]\n    $$\n    $$\n    (P')_{22} = 2P_{11}y^2 + 4P_{12}yw + P_{22}w^2\n    $$\n    We need to calculate $y^2$, $w^2$, and $yw$. Let $S_h = S^{1/2}$. $w = (S_h)_{22} = \\sum_i (v_i)_2^2 \\sqrt{\\lambda_i} = (-\\frac{\\sqrt{2}}{2})^2 \\sqrt{\\lambda_1} + (0)^2\\sqrt{\\lambda_2} + (\\frac{\\sqrt{2}}{2})^2\\sqrt{\\lambda_3} = \\frac{1}{2}(\\sqrt{\\lambda_1} + \\sqrt{\\lambda_3})$.\n    $y = (S_h)_{12} = \\sum_i (v_i)_1 (v_i)_2 \\sqrt{\\lambda_i} = (\\frac{1}{2})(-\\frac{\\sqrt{2}}{2})\\sqrt{\\lambda_1} + 0 + (\\frac{1}{2})(\\frac{\\sqrt{2}}{2})\\sqrt{\\lambda_3} = \\frac{\\sqrt{2}}{4}(-\\sqrt{\\lambda_1} + \\sqrt{\\lambda_3})$.\n    Let $a = \\sqrt{\\lambda_1} = \\sqrt{1 - \\frac{\\sqrt{2}}{5}}$ and $b = \\sqrt{\\lambda_3} = \\sqrt{1 + \\frac{\\sqrt{2}}{5}}$.\n    $w = \\frac{a+b}{2}$ and $y = \\frac{\\sqrt{2}}{4}(b-a)$.\n    $w^2 = \\frac{1}{4}(a^2+b^2+2ab) = \\frac{1}{4}(1-\\frac{\\sqrt{2}}{5} + 1+\\frac{\\sqrt{2}}{5} + 2\\sqrt{1-\\frac{2}{25}}) = \\frac{1}{4}(2 + \\frac{2\\sqrt{23}}{5}) = \\frac{1}{2} + \\frac{\\sqrt{23}}{10}$.\n    $y^2 = \\frac{2}{16}(b-a)^2 = \\frac{1}{8}(a^2+b^2-2ab) = \\frac{1}{8}(2 - \\frac{2\\sqrt{23}}{5}) = \\frac{1}{4} - \\frac{\\sqrt{23}}{20}$.\n    $yw = \\frac{\\sqrt{2}}{8}(b-a)(b+a) = \\frac{\\sqrt{2}}{8}(b^2-a^2) = \\frac{\\sqrt{2}}{8}( (1+\\frac{\\sqrt{2}}{5}) - (1-\\frac{\\sqrt{2}}{5})) = \\frac{\\sqrt{2}}{8}(\\frac{2\\sqrt{2}}{5}) = \\frac{4}{40} = \\frac{1}{10}$.\n    The populations are $P_{11}=1.6 = \\frac{8}{5}$, $P_{12}=0.4=\\frac{2}{5}$, $P_{22}=0.48=\\frac{12}{25}$.\n    $$\n    N_{B}^{\\mathrm{L\\ddot{o}wdin}} = 2\\left(\\frac{8}{5}\\right)\\left(\\frac{1}{4} - \\frac{\\sqrt{23}}{20}\\right) + 4\\left(\\frac{2}{5}\\right)\\left(\\frac{1}{10}\\right) + \\left(\\frac{12}{25}\\right)\\left(\\frac{1}{2} + \\frac{\\sqrt{23}}{10}\\right)\n    $$\n    $$\n    = \\left(\\frac{16}{20} - \\frac{16\\sqrt{23}}{100}\\right) + \\frac{8}{50} + \\left(\\frac{12}{50} + \\frac{12\\sqrt{23}}{250}\\right)\n    $$\n    $$\n    = \\left(\\frac{4}{5} - \\frac{4\\sqrt{23}}{25}\\right) + \\frac{4}{25} + \\left(\\frac{6}{25} + \\frac{6\\sqrt{23}}{125}\\right)\n    $$\n    $$\n    = \\frac{4}{5} + \\frac{10}{25} + \\sqrt{23}\\left(-\\frac{4}{25} + \\frac{6}{125}\\right) = \\frac{20+10}{25} + \\sqrt{23}\\left(\\frac{-20+6}{125}\\right) = \\frac{30}{25} - \\frac{14\\sqrt{23}}{125}\n    $$\n    $$\n    N_{B}^{\\mathrm{L\\ddot{o}wdin}} = \\frac{6}{5} - \\frac{14\\sqrt{23}}{125}\n    $$\n\n3.  **Calculation of the Difference $\\Delta$ and Qualitative Discussion**\n    The difference $\\Delta$ is defined as $N_{B}^{\\mathrm{Mulliken}} - N_{B}^{\\mathrm{L\\ddot{o}wdin}}$.\n    $$\n    \\Delta = \\frac{16}{25} - \\left(\\frac{6}{5} - \\frac{14\\sqrt{23}}{125}\\right) = \\frac{16}{25} - \\frac{30}{25} + \\frac{14\\sqrt{23}}{125} = -\\frac{14}{25} + \\frac{14\\sqrt{23}}{125}\n    $$\n    Factoring out $\\frac{14}{125}$:\n    $$\n    \\Delta = \\frac{14}{125}(-5 + \\sqrt{23}) = \\frac{14(\\sqrt{23}-5)}{125}\n    $$\n    The difference between Mulliken and Löwdin analysis arises from their fundamentally different approaches to partitioning electron density in the presence of orbital overlap. The total electron density can be written in terms of the density matrix and basis functions. The total number of electrons is $N = \\sum_{\\mu\\nu} P_{\\mu\\nu} S_{\\nu\\mu}$.\n    The Mulliken scheme is a local, ad-hoc partitioning method. It allocates the on-site density $P_{\\mu\\mu}$ to atom $\\mu$, and splits the overlap density, represented by terms like $2P_{\\mu\\nu}S_{\\nu\\mu}$ for $\\mu\\neq\\nu$, equally between atoms $\\mu$ and $\\nu$. This is simply achieved by taking the diagonal elements of the product matrix $PS$, as shown. This method is simple but can be unreliable, especially for diffuse basis functions, and can even yield unphysical negative populations.\n    The Löwdin scheme is a more rigorous, global method. It transforms the entire basis set to an orthonormal one using the matrix $S^{-1/2}$. This transformation mixes all original atomic orbitals. An orthogonalized orbital $\\phi_\\mu$ is a linear combination of all original orbitals $\\chi_\\nu$. Consequently, the electron density is re-distributed over the new basis in a non-local way determined by the structure of $S^{-1/2}$. Since the basis is now orthogonal, the populations are simply the diagonal elements of the new density matrix $P'$. This procedure ensures populations are always positive and is generally considered more robust.\n    In this problem, although atom $A$ and atom $C$ do not directly overlap ($S_{13}=0$), the Löwdin orthogonalization process introduces an effective coupling between them because $(S^{-1/2})_{13} \\neq 0$. The population on atom $B$ is thus influenced by the entire molecular environment in a more sophisticated manner than in the Mulliken scheme, which only considers direct overlaps of atom $B$ with its neighbors. This global versus local treatment of overlap density is the origin of the discrepancy $\\Delta$.", "answer": "$$\n\\boxed{\\frac{14(\\sqrt{23}-5)}{125}}\n$$", "id": "2936252"}, {"introduction": "This advanced exercise synthesizes the concepts of orbital construction and population analysis into a practical, computational workflow for analyzing intermolecular interactions. You will implement a fragment analysis of a donor-acceptor complex, a common task in modern computational chemistry research. This practice involves identifying the contributions of each molecular fragment to the frontier molecular orbitals (HOMO and LUMO) and quantifying the net charge transfer, providing a tangible basis for understanding chemical bonding and reactivity [@problem_id:2936176].", "problem": "Consider a closed-shell donor–acceptor complex described in the Linear Combination of Atomic Orbitals (LCAO) framework. Let the Atomic Orbital (AO) basis be non-orthonormal with overlap matrix $\\mathbf{S} \\in \\mathbb{R}^{n \\times n}$ that is real symmetric positive definite. Let Molecular Orbitals (MOs) be represented by a coefficient matrix $\\mathbf{C} \\in \\mathbb{R}^{n \\times n}$ whose columns are MOs in the AO basis, and let the diagonal occupation matrix be $\\mathbf{F} = \\mathrm{diag}(f_1,\\dots,f_n)$ with $f_i \\in \\{0,2\\}$ because of spin pairing and the closed-shell assumption. Assume orbitals are energy-ordered so that the highest occupied molecular orbital (HOMO) index is $i_{\\text{H}} = N_{\\text{e}}/2 - 1$ and the lowest unoccupied molecular orbital (LUMO) index is $i_{\\text{L}} = i_{\\text{H}} + 1$, where $N_{\\text{e}}$ is the total number of electrons. The AO basis is partitioned into two disjoint fragments: a donor fragment $\\mathcal{D}$ and an acceptor fragment $\\mathcal{A}$, with sizes $n_\\mathcal{D}$ and $n_\\mathcal{A}$, respectively, such that $n_\\mathcal{D} + n_\\mathcal{A} = n$. All angles in the problem are measured in radians.\n\nFrom first principles, use the following base:\n- The orthonormality condition in a non-orthonormal AO basis: $\\mathbf{C}^\\mathsf{T} \\mathbf{S} \\mathbf{C} = \\mathbf{I}$ for orthonormal MOs.\n- Löwdin symmetric orthogonalization: if $\\mathbf{S} = \\mathbf{U}\\,\\mathrm{diag}(s_1,\\dots,s_n)\\,\\mathbf{U}^\\mathsf{T}$ with $s_i > 0$, then $\\mathbf{S}^{1/2} = \\mathbf{U}\\,\\mathrm{diag}(\\sqrt{s_1},\\dots,\\sqrt{s_n})\\,\\mathbf{U}^\\mathsf{T}$ and $\\mathbf{S}^{-1/2} = \\mathbf{U}\\,\\mathrm{diag}(1/\\sqrt{s_1},\\dots,1/\\sqrt{s_n})\\,\\mathbf{U}^\\mathsf{T}$.\n- Mulliken population analysis for a closed-shell system: the spin-summed density in the AO basis is $\\mathbf{P} = \\mathbf{C}\\mathbf{F}\\mathbf{C}^\\mathsf{T}$, and the electron population on a set of AOs indexed by $\\mathcal{X}$ is $N(\\mathcal{X}) = \\sum_{\\mu \\in \\mathcal{X}} (\\mathbf{P}\\mathbf{S})_{\\mu\\mu}$.\n- In an orthonormal AO basis (Löwdin basis), the contribution of fragment $\\mathcal{X}$ to the normalized MO $i$ is the squared norm of the subvector of the $i$-th MO within that fragment: if $\\mathbf{C}^{(\\mathrm{L})} = \\mathbf{S}^{1/2}\\mathbf{C}$, then $w_\\mathcal{X}(i) = \\sum_{\\mu \\in \\mathcal{X}} \\left(C^{(\\mathrm{L})}_{\\mu i}\\right)^2$ with $0 \\le w_\\mathcal{X}(i) \\le 1$ and $w_\\mathcal{D}(i) + w_\\mathcal{A}(i) = 1$.\n\nYour task is to write a complete program that, given well-posed test cases, does the following for each test case:\n1. Constructs an orthogonal matrix $\\mathbf{Q}$ of size $n \\times n$ from a specified product of Givens rotations $G(i,j,\\theta)$ acting in coordinate planes $(i,j)$ by angle $\\theta$ (angles in radians). Each $G(i,j,\\theta)$ equals the identity except on rows and columns $i$ and $j$, where it is\n   $$\n   \\begin{pmatrix}\n   \\cos\\theta & -\\sin\\theta \\\\\n   \\sin\\theta & \\cos\\theta\n   \\end{pmatrix}.\n   $$\n   Rotations are $0$-based in their indices and are applied in the given order. The product yields $\\mathbf{Q}$.\n2. Forms MO coefficients by $\\mathbf{C} = \\mathbf{S}^{-1/2}\\mathbf{Q}$, ensuring $\\mathbf{C}^\\mathsf{T}\\mathbf{S}\\mathbf{C} = \\mathbf{I}$.\n3. Identifies the HOMO index $i_{\\text{H}}$ and LUMO index $i_{\\text{L}}$ from the given total electron number $N_{\\text{e}}$.\n4. Computes the fragment contributions to the HOMO and LUMO in the Löwdin basis as $w_\\mathcal{D}(i)$ and $w_\\mathcal{A}(i)$ for $i \\in \\{i_{\\text{H}}, i_{\\text{L}}\\}$.\n5. Uses Mulliken population analysis to compute the acceptor electron population in the complex, $N_\\mathcal{A}^\\mathrm{(complex)} = \\sum_{\\mu \\in \\mathcal{A}} (\\mathbf{P}\\mathbf{S})_{\\mu\\mu}$, with $\\mathbf{P} = \\mathbf{C}\\mathbf{F}\\mathbf{C}^\\mathsf{T}$ where $\\mathbf{F} = \\mathrm{diag}(f_1,\\dots,f_n)$ has $f_i = 2$ for $i \\le i_{\\text{H}}$ and $f_i = 0$ otherwise.\n6. Quantifies charge transfer to the acceptor upon complexation as $\\Delta Q_\\mathcal{A} = N_\\mathcal{A}^\\mathrm{(complex)} - N_{\\mathcal{A}}^{(0)}$, where the reference isolated-fragment electron counts are given as input $(N_\\mathcal{D}^{(0)}, N_\\mathcal{A}^{(0)})$ with $N_\\mathcal{D}^{(0)} + N_\\mathcal{A}^{(0)} = N_{\\text{e}}$.\n\nYour program must produce, for each test case, a list of five floating-point numbers:\n- The donor contribution to the HOMO, $w_\\mathcal{D}(i_{\\text{H}})$.\n- The acceptor contribution to the HOMO, $w_\\mathcal{A}(i_{\\text{H}})$.\n- The donor contribution to the LUMO, $w_\\mathcal{D}(i_{\\text{L}})$.\n- The acceptor contribution to the LUMO, $w_\\mathcal{A}(i_{\\text{L}})$.\n- The charge transferred to the acceptor upon complexation, $\\Delta Q_\\mathcal{A}$.\n\nAll outputs must be expressed as decimals (no percentage signs). Angles in the input are in radians. The final output must be printed as a single line containing a list of lists, with each inner list corresponding to one test case, and each number formatted to six digits after the decimal point, for example:\n$[\\,[0.123456,0.876544,0.222222,0.777778,0.100000],\\dots\\,]$.\n\nTest suite (use exactly these parameters; indices are $0$-based):\n- Test Case 1:\n  - Fragment sizes: donor $n_\\mathcal{D} = 2$, acceptor $n_\\mathcal{A} = 2$.\n  - Total electrons: $N_{\\text{e}} = 4$.\n  - Isolated fragment electrons: $(N_\\mathcal{D}^{(0)}, N_\\mathcal{A}^{(0)}) = (2, 2)$.\n  - Overlap matrix $\\mathbf{S}$ (size $4 \\times 4$):\n    $$\n    \\begin{bmatrix}\n    1.0 & 0.10 & 0.05 & 0.02 \\\\\n    0.10 & 1.0 & 0.03 & 0.04 \\\\\n    0.05 & 0.03 & 1.0 & 0.08 \\\\\n    0.02 & 0.04 & 0.08 & 1.0\n    \\end{bmatrix}.\n    $$\n  - Givens rotations as $(i,j,\\theta)$ with $\\theta$ in radians: $(0,1,0.5)$, $(1,2,0.3)$, $(2,3,0.4)$.\n  - MO energies (ascending): $[-0.8,-0.5,-0.1,0.2]$.\n- Test Case 2:\n  - Fragment sizes: donor $n_\\mathcal{D} = 3$, acceptor $n_\\mathcal{A} = 3$.\n  - Total electrons: $N_{\\text{e}} = 6$.\n  - Isolated fragment electrons: $(N_\\mathcal{D}^{(0)}, N_\\mathcal{A}^{(0)}) = (4, 2)$.\n  - Overlap matrix $\\mathbf{S}$ (size $6 \\times 6$):\n    $$\n    \\begin{bmatrix}\n    1.0 & 0.12 & 0.06 & 0.03 & 0.02 & 0.01 \\\\\n    0.12 & 1.0 & 0.04 & 0.01 & 0.03 & 0.02 \\\\\n    0.06 & 0.04 & 1.0 & 0.05 & 0.04 & 0.03 \\\\\n    0.03 & 0.01 & 0.05 & 1.0 & 0.12 & 0.06 \\\\\n    0.02 & 0.03 & 0.04 & 0.12 & 1.0 & 0.04 \\\\\n    0.01 & 0.02 & 0.03 & 0.06 & 0.04 & 1.0\n    \\end{bmatrix}.\n    $$\n  - Givens rotations: $(0,1,0.6)$, $(1,2,0.3)$, $(2,3,0.35)$, $(1,4,0.25)$, $(3,4,0.5)$, $(4,5,0.2)$.\n  - MO energies (ascending): $[-1.2,-0.9,-0.7,-0.05,0.1,0.3]$.\n- Test Case 3:\n  - Fragment sizes: donor $n_\\mathcal{D} = 2$, acceptor $n_\\mathcal{A} = 2$.\n  - Total electrons: $N_{\\text{e}} = 4$.\n  - Isolated fragment electrons: $(N_\\mathcal{D}^{(0)}, N_\\mathcal{A}^{(0)}) = (2, 2)$.\n  - Overlap matrix $\\mathbf{S}$ (size $4 \\times 4$):\n    $$\n    \\begin{bmatrix}\n    1.0 & 0.15 & 0.0 & 0.0 \\\\\n    0.15 & 1.0 & 0.0 & 0.0 \\\\\n    0.0 & 0.0 & 1.0 & 0.10 \\\\\n    0.0 & 0.0 & 0.10 & 1.0\n    \\end{bmatrix}.\n    $$\n  - Givens rotations: $(0,1,0.45)$, $(2,3,0.3)$.\n  - MO energies (ascending): $[-0.9,-0.6,0.1,0.4]$.\n\nFinal output format:\n- Your program should produce a single line of output containing a list of results, one per test case, where each result is a list of five floating-point numbers in the order specified above. The line must be exactly of the form\n$[\\,[r_{1,1},r_{1,2},r_{1,3},r_{1,4},r_{1,5}],[r_{2,1},r_{2,2},r_{2,3},r_{2,4},r_{2,5}],[r_{3,1},r_{3,2},r_{3,3},r_{3,4},r_{3,5}]\\,]$\nwith every $r_{k,\\ell}$ formatted to six digits after the decimal point.", "solution": "We model a donor–acceptor complex in a non-orthonormal Atomic Orbital (AO) basis $\\{\\chi_\\mu\\}_{\\mu=1}^n$ with overlap matrix $\\mathbf{S}$, where $S_{\\mu\\nu} = \\langle \\chi_\\mu | \\chi_\\nu \\rangle$. Molecular Orbitals (MOs) are represented as $|\\psi_i\\rangle = \\sum_{\\mu} C_{\\mu i} |\\chi_\\mu\\rangle$, and the matrix of coefficients is $\\mathbf{C}$. For a well-posed generalized eigenproblem, MOs satisfy the orthonormality condition in the $\\mathbf{S}$ metric,\n$$\n\\mathbf{C}^\\mathsf{T} \\mathbf{S} \\mathbf{C} = \\mathbf{I},\n$$\nwhich is our orthonormality base.\n\nTo analyze orbital contributions by fragment and to quantify charge transfer, we proceed by transforming to a Löwdin orthonormal AO basis. If $\\mathbf{S}$ has eigen-decomposition $\\mathbf{S} = \\mathbf{U}\\,\\mathrm{diag}(s_1,\\dots,s_n)\\,\\mathbf{U}^\\mathsf{T}$ with $s_i > 0$, define\n$$\n\\mathbf{S}^{1/2} = \\mathbf{U}\\,\\mathrm{diag}(\\sqrt{s_1},\\dots,\\sqrt{s_n})\\,\\mathbf{U}^\\mathsf{T},\\quad\n\\mathbf{S}^{-1/2} = \\mathbf{U}\\,\\mathrm{diag}(1/\\sqrt{s_1},\\dots,1/\\sqrt{s_n})\\,\\mathbf{U}^\\mathsf{T}.\n$$\nIn the Löwdin basis $\\{|\\phi_\\mu\\rangle\\}$ related by $|\\phi_\\mu\\rangle = \\sum_\\nu S^{1/2}_{\\nu\\mu} |\\chi_\\nu\\rangle$, the AO overlap is identity. Molecular Orbital coefficients transform as\n$$\n\\mathbf{C}^{(\\mathrm{L})} = \\mathbf{S}^{1/2} \\mathbf{C}.\n$$\nBecause $\\mathbf{C}^\\mathsf{T} \\mathbf{S} \\mathbf{C} = \\mathbf{I}$, the columns of $\\mathbf{C}^{(\\mathrm{L})}$ have unit Euclidean norm.\n\nFragment orbital contributions are naturally defined in the orthonormal AO basis: for a fragment $\\mathcal{X} \\subset \\{1,\\dots,n\\}$, the weight of fragment $\\mathcal{X}$ in MO $i$ is\n$$\nw_\\mathcal{X}(i) = \\sum_{\\mu \\in \\mathcal{X}} \\left( C^{(\\mathrm{L})}_{\\mu i} \\right)^2.\n$$\nThis follows from the partition of the MO norm over disjoint subspaces when the basis is orthonormal. The sum over complementary fragments equals one:\n$$\nw_\\mathcal{D}(i) + w_\\mathcal{A}(i) = \\sum_{\\mu=1}^n \\left( C^{(\\mathrm{L})}_{\\mu i} \\right)^2 = 1.\n$$\n\nTo quantify charge transfer upon complexation, we use Mulliken population analysis. In a closed-shell system, the spin-summed AO density matrix is\n$$\n\\mathbf{P} = \\mathbf{C}\\,\\mathbf{F}\\,\\mathbf{C}^\\mathsf{T},\\quad \\mathbf{F}=\\mathrm{diag}(f_1,\\dots,f_n),\\quad f_i \\in \\{0,2\\}.\n$$\nThe total number of electrons is $N_\\mathrm{e} = \\mathrm{Tr}(\\mathbf{P}\\mathbf{S})$. The Mulliken population on a subset $\\mathcal{X}$ of AO indices is\n$$\nN(\\mathcal{X}) = \\sum_{\\mu \\in \\mathcal{X}} (\\mathbf{P}\\mathbf{S})_{\\mu\\mu}.\n$$\nThis is consistent with the Mulliken partition of the overlapping density, yielding additive populations across disjoint fragments. The charge transferred to the acceptor upon complexation is\n$$\n\\Delta Q_\\mathcal{A} = N_\\mathcal{A}^{(\\mathrm{complex})} - N_\\mathcal{A}^{(0)},\n$$\nwhere $N_\\mathcal{A}^{(0)}$ is the electron count assigned to the acceptor in the isolated-fragment reference. This reference represents the non-interacting fragments before complexation and uses the provided electron counts, avoiding the ambiguity of different overlap metrics between isolated and complexed systems.\n\nAlgorithmic construction of $\\mathbf{C}$ for testing is accomplished by selecting an orthogonal matrix $\\mathbf{Q}$ and setting\n$$\n\\mathbf{C} = \\mathbf{S}^{-1/2}\\mathbf{Q}.\n$$\nThen\n$$\n\\mathbf{C}^\\mathsf{T} \\mathbf{S} \\mathbf{C} = \\mathbf{Q}^\\mathsf{T} \\mathbf{S}^{-1/2}\\mathbf{S}\\mathbf{S}^{-1/2}\\mathbf{Q} = \\mathbf{Q}^\\mathsf{T} \\mathbf{Q} = \\mathbf{I},\n$$\nensuring orthonormal MOs in the $\\mathbf{S}$ metric. We build $\\mathbf{Q}$ from ordered Givens rotations $G(i,j,\\theta)$, each an identity matrix modified in the $(i,j)$ plane by\n$$\nG(i,j,\\theta)\\big|_{\\{i,j\\}\\times\\{i,j\\}} =\n\\begin{pmatrix}\n\\cos\\theta & -\\sin\\theta \\\\\n\\sin\\theta & \\cos\\theta\n\\end{pmatrix},\n$$\nwhich preserves orthogonality. The product of such rotations is orthogonal.\n\nComputational steps per test case:\n1. Read $n_\\mathcal{D}$, $n_\\mathcal{A}$ defining fragment index sets $\\mathcal{D} = \\{0,\\dots,n_\\mathcal{D}-1\\}$ and $\\mathcal{A} = \\{n_\\mathcal{D},\\dots,n-1\\}$ with $n = n_\\mathcal{D}+n_\\mathcal{A}$.\n2. Read $\\mathbf{S}$, verify it is symmetric and positive definite by checking all eigenvalues are greater than 0. Compute $\\mathbf{S}^{1/2}$ and $\\mathbf{S}^{-1/2}$ via eigen-decomposition.\n3. Initialize $\\mathbf{Q} = \\mathbf{I}_n$. For each specified rotation $(i,j,\\theta)$, left-multiply $\\mathbf{Q} \\leftarrow G(i,j,\\theta)\\,\\mathbf{Q}$ to accumulate rotations in the given order.\n4. Form $\\mathbf{C} = \\mathbf{S}^{-1/2}\\mathbf{Q}$ and check numerically that $\\mathbf{C}^\\mathsf{T} \\mathbf{S} \\mathbf{C} \\approx \\mathbf{I}$.\n5. Determine $i_{\\text{H}} = N_{\\text{e}}/2 - 1$ and $i_{\\text{L}} = i_{\\text{H}}+1$. Construct $\\mathbf{F} = \\mathrm{diag}(f_1,\\dots,f_n)$ with $f_i=2$ for $i \\le i_{\\text{H}}$ and $f_i=0$ otherwise.\n6. Compute $\\mathbf{C}^{(\\mathrm{L})} = \\mathbf{S}^{1/2}\\mathbf{C}$ and evaluate $w_\\mathcal{D}(i),w_\\mathcal{A}(i)$ for $i \\in \\{i_{\\text{H}},i_{\\text{L}}\\}$ by summing squared entries of the relevant column over the corresponding fragment index sets.\n7. Compute $\\mathbf{P} = \\mathbf{C}\\mathbf{F}\\mathbf{C}^\\mathsf{T}$, then $N_\\mathcal{A}^{(\\mathrm{complex})} = \\sum_{\\mu \\in \\mathcal{A}} (\\mathbf{P}\\mathbf{S})_{\\mu\\mu}$. Use the provided $N_\\mathcal{A}^{(0)}$ to get $\\Delta Q_\\mathcal{A} = N_\\mathcal{A}^{(\\mathrm{complex})} - N_\\mathcal{A}^{(0)}$.\n8. Report $[w_\\mathcal{D}(i_{\\text{H}}), w_\\mathcal{A}(i_{\\text{H}}), w_\\mathcal{D}(i_{\\text{L}}), w_\\mathcal{A}(i_{\\text{L}}), \\Delta Q_\\mathcal{A}]$, formatting to six decimals.\n\nEdge considerations:\n- The use of $\\mathbf{S}^{\\pm 1/2}$ ensures numerical stability for positive definite $\\mathbf{S}$. The given $\\mathbf{S}$ matrices are strictly diagonally dominant, guaranteeing positive definiteness.\n- The construction $\\mathbf{C} = \\mathbf{S}^{-1/2}\\mathbf{Q}$ guarantees MO orthonormality with respect to $\\mathbf{S}$ regardless of the chosen rotations.\n- The HOMO/LUMO indices use energy ordering implicitly via the provided energies, but since occupations are directly assigned by $N_\\mathrm{e}$ and the MOs are ordered to match the given energies, we do not solve a generalized eigenproblem; we analyze the supplied MOs.\n\nThe final program implements this pipeline for the supplied test suite and prints the required aggregate results in one line as specified.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef givens_rotation(n, i, j, theta):\n    \"\"\"\n    Construct an n x n Givens rotation matrix acting in the (i, j) plane\n    by angle theta (radians), with 0-based indices i < j.\n    \"\"\"\n    G = np.eye(n)\n    c = np.cos(theta)\n    s = np.sin(theta)\n    G[i, i] = c\n    G[j, j] = c\n    G[i, j] = -s\n    G[j, i] = s\n    return G\n\ndef lowdin_sqrt_and_invsqrt(S):\n    \"\"\"\n    Compute the symmetric square root S^{1/2} and inverse square root S^{-1/2}\n    of a symmetric positive-definite matrix S via eigen-decomposition.\n    \"\"\"\n    # Symmetrize S for numerical stability\n    S = 0.5 * (S + S.T)\n    vals, vecs = np.linalg.eigh(S)\n    if np.any(vals <= 0):\n        raise ValueError(\"Overlap matrix S is not positive definite.\")\n    sqrt_vals = np.sqrt(vals)\n    invsqrt_vals = 1.0 / sqrt_vals\n    S_sqrt = (vecs * sqrt_vals) @ vecs.T\n    S_invsqrt = (vecs * invsqrt_vals) @ vecs.T\n    return S_sqrt, S_invsqrt\n\ndef fragment_contributions(C, S, frag_sizes, homo_index, lumo_index):\n    \"\"\"\n    Compute fragment contributions to HOMO and LUMO using Löwdin-orthogonalized coefficients.\n    Returns a tuple of four floats:\n      (w_D_HOMO, w_A_HOMO, w_D_LUMO, w_A_LUMO)\n    \"\"\"\n    nD, nA = frag_sizes\n    n = nD + nA\n    S_sqrt, _ = lowdin_sqrt_and_invsqrt(S)\n    C_lowdin = S_sqrt @ C  # Orthonormal AO basis coefficients\n\n    # Helper to compute contributions for a given MO index\n    def contribs(i):\n        col = C_lowdin[:, i]\n        # Normalize column in case of tiny numerical drift\n        norm = np.linalg.norm(col)\n        if norm == 0:\n            raise ValueError(\"Zero-norm MO column encountered after orthogonalization.\")\n        col = col / norm\n        wD = float(np.sum(col[:nD] ** 2))\n        wA = float(np.sum(col[nD:] ** 2))\n        return wD, wA\n\n    wD_H, wA_H = contribs(homo_index)\n    wD_L, wA_L = contribs(lumo_index)\n    return wD_H, wA_H, wD_L, wA_L\n\ndef mulliken_acceptor_population(C, S, occ, acceptor_indices):\n    \"\"\"\n    Compute Mulliken electron population on acceptor AOs given by acceptor_indices.\n    occ is a 1D array of MO occupations (spin-summed), typically 2 for occupied, 0 for virtuals.\n    \"\"\"\n    # Density matrix P = C F C^T where F is diagonal of occupations\n    F = np.diag(occ)\n    P = C @ F @ C.T\n    PS = P @ S\n    diag_PS = np.diag(PS)\n    N_acc = float(np.sum(diag_PS[acceptor_indices]))\n    return N_acc\n\ndef build_C_from_rotations(S, rotations):\n    \"\"\"\n    Given S and a list of rotations specified as (i, j, theta),\n    build an orthogonal Q from their ordered product, then return C = S^{-1/2} Q.\n    \"\"\"\n    n = S.shape[0]\n    # Build Q as product of Givens rotations applied in the given order\n    Q = np.eye(n)\n    for (i, j, theta) in rotations:\n        G = givens_rotation(n, i, j, theta)\n        Q = G @ Q\n    # Compute S^{-1/2}\n    _, S_invsqrt = lowdin_sqrt_and_invsqrt(S)\n    C = S_invsqrt @ Q\n    return C\n\ndef solve():\n    # Define the test cases from the problem statement.\n    # Each test case is a dict with keys:\n    # 'S', 'frag_sizes', 'Ne', 'N0_frag', 'rotations', 'energies'\n    test_cases = []\n\n    # Test Case 1\n    S1 = np.array([\n        [1.0, 0.10, 0.05, 0.02],\n        [0.10, 1.0, 0.03, 0.04],\n        [0.05, 0.03, 1.0, 0.08],\n        [0.02, 0.04, 0.08, 1.0],\n    ], dtype=float)\n    rotations1 = [(0, 1, 0.5), (1, 2, 0.3), (2, 3, 0.4)]\n    energies1 = np.array([-0.8, -0.5, -0.1, 0.2], dtype=float)\n    test_cases.append({\n        \"S\": S1,\n        \"frag_sizes\": (2, 2),\n        \"Ne\": 4,\n        \"N0_frag\": (2, 2),\n        \"rotations\": rotations1,\n        \"energies\": energies1,\n    })\n\n    # Test Case 2\n    S2 = np.array([\n        [1.0, 0.12, 0.06, 0.03, 0.02, 0.01],\n        [0.12, 1.0, 0.04, 0.01, 0.03, 0.02],\n        [0.06, 0.04, 1.0, 0.05, 0.04, 0.03],\n        [0.03, 0.01, 0.05, 1.0, 0.12, 0.06],\n        [0.02, 0.03, 0.04, 0.12, 1.0, 0.04],\n        [0.01, 0.02, 0.03, 0.06, 0.04, 1.0],\n    ], dtype=float)\n    rotations2 = [(0, 1, 0.6), (1, 2, 0.3), (2, 3, 0.35), (1, 4, 0.25), (3, 4, 0.5), (4, 5, 0.2)]\n    energies2 = np.array([-1.2, -0.9, -0.7, -0.05, 0.1, 0.3], dtype=float)\n    test_cases.append({\n        \"S\": S2,\n        \"frag_sizes\": (3, 3),\n        \"Ne\": 6,\n        \"N0_frag\": (4, 2),\n        \"rotations\": rotations2,\n        \"energies\": energies2,\n    })\n\n    # Test Case 3\n    S3 = np.array([\n        [1.0, 0.15, 0.0, 0.0],\n        [0.15, 1.0, 0.0, 0.0],\n        [0.0, 0.0, 1.0, 0.10],\n        [0.0, 0.0, 0.10, 1.0],\n    ], dtype=float)\n    rotations3 = [(0, 1, 0.45), (2, 3, 0.3)]\n    energies3 = np.array([-0.9, -0.6, 0.1, 0.4], dtype=float)\n    test_cases.append({\n        \"S\": S3,\n        \"frag_sizes\": (2, 2),\n        \"Ne\": 4,\n        \"N0_frag\": (2, 2),\n        \"rotations\": rotations3,\n        \"energies\": energies3,\n    })\n\n    results = []\n\n    for case in test_cases:\n        S = case[\"S\"]\n        nD, nA = case[\"frag_sizes\"]\n        n = nD + nA\n        Ne = case[\"Ne\"]\n        N0_D, N0_A = case[\"N0_frag\"]\n        rotations = case[\"rotations\"]\n\n        # Build MO coefficient matrix C from rotations and S\n        C = build_C_from_rotations(S, rotations)\n\n        # HOMO/LUMO indices from electron count\n        homo_index = Ne // 2 - 1\n        lumo_index = homo_index + 1\n\n        # Occupation numbers: 2 for occupied up to HOMO, else 0\n        occ = np.zeros(n, dtype=float)\n        occ[:homo_index + 1] = 2.0\n\n        # Fragment contributions in Löwdin basis\n        wD_H, wA_H, wD_L, wA_L = fragment_contributions(C, S, (nD, nA), homo_index, lumo_index)\n\n        # Mulliken acceptor population\n        acc_indices = np.arange(nD, nD + nA)\n        N_acc_complex = mulliken_acceptor_population(C, S, occ, acc_indices)\n\n        # Charge transfer to acceptor\n        delta_Q_acc = N_acc_complex - float(N0_A)\n\n        # Collect results with six-decimal formatting later\n        results.append([wD_H, wA_H, wD_L, wA_L, delta_Q_acc])\n\n    # Format the output as a single line: list of lists, each number with 6 decimals\n    def format_number(x):\n        # Ensure -0.000000 does not appear; convert very small values to +0.0 for consistency\n        if abs(x) < 5e-16:\n            x = 0.0\n        return f\"{x:.6f}\"\n\n    formatted_cases = []\n    for res in results:\n        formatted = \"[\" + \",\".join(format_number(x) for x in res) + \"]\"\n        formatted_cases.append(formatted)\n    output = \"[\" + \",\".join(formatted_cases) + \"]\"\n    print(output)\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "2936176"}]}