{"hands_on_practices": [{"introduction": "A crucial decision in setting up any molecular dynamics simulation is the choice of the integration time step, $\\Delta t$. A time step that is too large will lead to numerical instability and inaccurate trajectories, while one that is too small wastes computational resources and limits the total achievable simulation time. This exercise [@problem_id:2452055] provides a hands-on calculation to determine an appropriate time step for an *ab initio* molecular dynamics run by relating it to the period of the fastest vibrational motion in the system, a fundamental skill for balancing accuracy and efficiency.", "problem": "An ab initio molecular dynamics (AIMD) simulation of liquid water at $300\\,\\mathrm{K}$ is to be performed using the velocity Verlet integrator in a Born–Oppenheimer framework with no holonomic constraints (for example, all $\\mathrm{O\\!-\\!H}$ bond stretches are free). The highest vibrational wavenumber in the system is the $\\mathrm{O\\!-\\!H}$ stretch at $\\tilde{\\nu} = 3600\\,\\mathrm{cm^{-1}}$. The speed of light in vacuum is $c = 2.998\\times 10^{10}\\,\\mathrm{cm\\,s^{-1}}$. To control discretization error and energy drift, you adopt the requirement that at least $20$ time steps per period of the fastest vibrational mode are used. Your computational budget allows at most $2.0\\times 10^{5}$ AIMD time steps (each step involves a self-consistent electronic-structure calculation and associated force evaluation). Consider the candidate time steps $\\Delta t \\in \\{2.0\\,\\mathrm{fs},\\,1.0\\,\\mathrm{fs},\\,0.5\\,\\mathrm{fs},\\,0.25\\,\\mathrm{fs}\\}$.\n\nWhich of the following statements are correct?\n\nA. $\\Delta t = 2.0\\,\\mathrm{fs}$ satisfies the $20$-steps-per-period requirement because the $\\mathrm{O\\!-\\!H}$ vibrational period is approximately $0.5\\,\\mathrm{fs}$.\n\nB. $\\Delta t = 1.0\\,\\mathrm{fs}$ satisfies the $20$-steps-per-period requirement because the $\\mathrm{O\\!-\\!H}$ vibrational period is approximately $9\\,\\mathrm{fs}$, yielding roughly $9$ steps per period.\n\nC. $\\Delta t = 0.5\\,\\mathrm{fs}$ does not satisfy the $20$-steps-per-period requirement for the fastest mode.\n\nD. $\\Delta t = 0.25\\,\\mathrm{fs}$ satisfies the requirement and, under the budget, yields a total simulated physical time of $50\\,\\mathrm{ps}$.\n\nE. Among the given candidates, $\\Delta t = 0.25\\,\\mathrm{fs}$ maximizes total simulated time while respecting the $20$-steps-per-period requirement; choosing a smaller $\\Delta t$ would reduce sampling under the fixed budget without improving compliance with the stated requirement.", "solution": "The problem statement is forwarded for validation.\n\n### Step 1: Extract Givens\n- Simulation type: Ab initio molecular dynamics (AIMD) of liquid water.\n- Temperature: $T = 300\\,\\mathrm{K}$.\n- Integrator: velocity Verlet.\n- Framework: Born–Oppenheimer, no holonomic constraints.\n- Highest vibrational wavenumber: $\\tilde{\\nu} = 3600\\,\\mathrm{cm^{-1}}$ (corresponding to the O-H stretch).\n- Speed of light in vacuum: $c = 2.998\\times 10^{10}\\,\\mathrm{cm\\,s^{-1}}$.\n- Discretization requirement: At least $20$ time steps per period of the fastest vibrational mode.\n- Computational budget: At most $2.0\\times 10^{5}$ AIMD time steps.\n- Candidate time steps: $\\Delta t \\in \\{2.0\\,\\mathrm{fs},\\,1.0\\,\\mathrm{fs},\\,0.5\\,\\mathrm{fs},\\,0.25\\,\\mathrm{fs}\\}$.\n\n### Step 2: Validate Using Extracted Givens\nThe problem is scientifically grounded, as it describes a standard setup for a computational chemistry simulation (AIMD of water). The values provided for the O-H stretch wavenumber and the speed of light are factually correct. The problem is well-posed; it provides all necessary information to calculate the constraints on the time step and evaluate the given options. The language is objective and precise. The problem is self-contained and free of contradictions.\n\n### Step 3: Verdict and Action\nThe problem statement is valid. I will proceed with the derivation and evaluation.\n\n### Derivation\nThe stability and accuracy of a numerical integration scheme for molecular dynamics, such as the velocity Verlet algorithm, is dictated by the time step, $\\Delta t$. The time step must be small enough to accurately sample the fastest motion in the system. The problem gives this fastest motion as the $\\mathrm{O\\!-\\!H}$ bond vibration with a wavenumber $\\tilde{\\nu} = 3600\\,\\mathrm{cm^{-1}}$.\n\nFirst, we must calculate the period, $T_{OH}$, of this vibration. The frequency, $\\nu$, is related to the wavenumber, $\\tilde{\\nu}$, by the speed of light, $c$:\n$$ \\nu = c \\tilde{\\nu} $$\nThe period, $T$, is the reciprocal of the frequency:\n$$ T_{OH} = \\frac{1}{\\nu} = \\frac{1}{c \\tilde{\\nu}} $$\nSubstituting the given values:\n$$ T_{OH} = \\frac{1}{(2.998\\times 10^{10}\\,\\mathrm{cm\\,s^{-1}}) \\times (3600\\,\\mathrm{cm^{-1}})} = \\frac{1}{1.07928 \\times 10^{14}\\,\\mathrm{s^{-1}}} \\approx 9.2654 \\times 10^{-15}\\,\\mathrm{s} $$\nSince $1\\,\\mathrm{fs} = 10^{-15}\\,\\mathrm{s}$, the period is:\n$$ T_{OH} \\approx 9.2654\\,\\mathrm{fs} $$\n\nThe problem states a requirement of at least $20$ time steps per period. Let $N_{steps}$ be the number of time steps per period. The condition is:\n$$ N_{steps} = \\frac{T_{OH}}{\\Delta t} \\ge 20 $$\nThis imposes an upper limit on the acceptable time step, $\\Delta t_{max}$:\n$$ \\Delta t \\le \\frac{T_{OH}}{20} $$\nUsing our calculated period:\n$$ \\Delta t_{max} \\approx \\frac{9.2654\\,\\mathrm{fs}}{20} \\approx 0.4633\\,\\mathrm{fs} $$\nAny chosen time step $\\Delta t$ must be less than or equal to this value. We now evaluate the given options based on this criterion.\n\n### Option-by-Option Analysis\n\n**A. $\\Delta t = 2.0\\,\\mathrm{fs}$ satisfies the $20$-steps-per-period requirement because the $\\mathrm{O\\!-\\!H}$ vibrational period is approximately $0.5\\,\\mathrm{fs}$.**\nThe claim that the $\\mathrm{O\\!-\\!H}$ vibrational period is approximately $0.5\\,\\mathrm{fs}$ is grossly incorrect. Our calculation shows the period is $T_{OH} \\approx 9.27\\,\\mathrm{fs}$. A period of $0.5\\,\\mathrm{fs}$ corresponds to a wavenumber of approximately $66700\\,\\mathrm{cm^{-1}}$, which is in the X-ray regime and has nothing to do with molecular vibrations. Furthermore, with $\\Delta t = 2.0\\,\\mathrm{fs}$, the number of steps per period would be $T_{OH} / \\Delta t \\approx 9.27 / 2.0 \\approx 4.6$, which is far below the required $20$.\nVerdict: **Incorrect**.\n\n**B. $\\Delta t = 1.0\\,\\mathrm{fs}$ satisfies the $20$-steps-per-period requirement because the $\\mathrm{O\\!-\\!H}$ vibrational period is approximately $9\\,\\mathrm{fs}$, yielding roughly $9$ steps per period.**\nThe approximation of the period as $9\\,\\mathrm{fs}$ is reasonable. Using this, the number of steps per period with $\\Delta t = 1.0\\,\\mathrm{fs}$ is indeed $9\\,\\mathrm{fs} / 1.0\\,\\mathrm{fs} = 9$. However, the statement then claims that this satisfies the requirement of at least $20$ steps per period. Since $9 < 20$, the requirement is clearly not satisfied. The statement contains a logical contradiction.\nVerdict: **Incorrect**.\n\n**C. $\\Delta t = 0.5\\,\\mathrm{fs}$ does not satisfy the $20$-steps-per-period requirement for the fastest mode.**\nWe must check if $\\Delta t = 0.5\\,\\mathrm{fs}$ is less than or equal to our calculated maximum, $\\Delta t_{max} \\approx 0.4633\\,\\mathrm{fs}$. Since $0.5\\,\\mathrm{fs} > 0.4633\\,\\mathrm{fs}$, this time step is too large and violates the requirement. The number of steps per period would be $T_{OH} / \\Delta t \\approx 9.27 / 0.5 \\approx 18.5$, which is less than $20$. The statement is therefore factually correct.\nVerdict: **Correct**.\n\n**D. $\\Delta t = 0.25\\,\\mathrm{fs}$ satisfies the requirement and, under the budget, yields a total simulated physical time of $50\\,\\mathrm{ps}$.**\nFirst, we check if $\\Delta t = 0.25\\,\\mathrm{fs}$ satisfies the requirement. Since $0.25\\,\\mathrm{fs} < \\Delta t_{max} \\approx 0.4633\\,\\mathrm{fs}$, the requirement is satisfied. Second, we calculate the total simulated time using the maximum budget of $2.0 \\times 10^{5}$ steps:\n$$ t_{total} = (\\text{number of steps}) \\times \\Delta t = (2.0 \\times 10^{5}) \\times (0.25\\,\\mathrm{fs}) = 5.0 \\times 10^{4}\\,\\mathrm{fs} $$\nConverting this to picoseconds ($1\\,\\mathrm{ps} = 1000\\,\\mathrm{fs}$):\n$$ t_{total} = 5.0 \\times 10^{4}\\,\\mathrm{fs} \\times \\frac{1\\,\\mathrm{ps}}{1000\\,\\mathrm{fs}} = 50\\,\\mathrm{ps} $$\nBoth parts of the statement are true.\nVerdict: **Correct**.\n\n**E. Among the given candidates, $\\Delta t = 0.25\\,\\mathrm{fs}$ maximizes total simulated time while respecting the $20$-steps-per-period requirement; choosing a smaller $\\Delta t$ would reduce sampling under the fixed budget without improving compliance with the stated requirement.**\nWe analyze this statement in two parts.\nFirst, we identify which of the candidate time steps $\\{2.0\\,\\mathrm{fs},\\,1.0\\,\\mathrm{fs},\\,0.5\\,\\mathrm{fs},\\,0.25\\,\\mathrm{fs}\\}$ respect the requirement $\\Delta t \\le 0.4633\\,\\mathrm{fs}$. Only $\\Delta t = 0.25\\,\\mathrm{fs}$ is valid. As it is the only valid option, it is trivially the one that maximizes the total simulated time among the valid candidates. The total simulation time is proportional to $\\Delta t$ for a fixed number of steps, so the largest valid $\\Delta t$ is always preferred to maximize sampling.\nSecond, the statement addresses the consequence of choosing an even smaller $\\Delta t$ (not from the list). A smaller $\\Delta t$ (e.g., $0.1\\,\\mathrm{fs}$) would still be compliant. However, for the fixed budget of $2.0 \\times 10^{5}$ steps, the total simulation time would decrease, resulting in reduced sampling of the system's phase space. The term \"without improving compliance\" is also correct; compliance with the \"at least $20$\" condition is a binary state (yes/no). Once the condition is met (e.g., with $\\Delta t = 0.25\\,\\mathrm{fs}$), making the time step even smaller does not change the state of compliance from \"yes\" to \"more yes\". The reasoning is sound and reflects a key principle of simulation design: choosing a time step that is \"just right\"—small enough for stability and accuracy, but large enough to maximize computational efficiency and sampling.\nVerdict: **Correct**.", "answer": "$$\\boxed{CDE}$$", "id": "2452055"}, {"introduction": "Once an AIMD simulation has generated a trajectory, the next step is to extract meaningful physical properties from the time evolution of nuclear positions and electronic structure. This practice [@problem_id:2872074] guides you through implementing a program to compute vibrational spectra, such as Infrared (IR) and Raman spectra, from time-correlation functions of the dipole moment and polarizability. You will apply the Wiener–Khinchin theorem and Fourier analysis to connect microscopic dynamics to experimentally observable quantities, and also explore the concept of electron-phonon coupling, a key descriptor of electronic interactions in materials.", "problem": "You will implement a program that, given synthetic one-dimensional normal-mode trajectories representing outputs of Ab Initio Molecular Dynamics (AIMD), computes vibrational spectra and electron-phonon coupling measures grounded in linear response theory and fluctuation-dissipation relations that are fundamental in quantum chemistry. The target concepts are Infrared (IR) and Raman activities and a mode-resolved electron-phonon coupling in the mass-weighted coordinate. Your implementation must be based on first principles using widely accepted facts: the Fourier transform relationship between time-correlation functions and spectral densities, and the definition of derivatives with respect to mass-weighted normal coordinates.\n\nStart from the following fundamental base:\n- Linear response: a response spectrum is related to the Fourier transform of an appropriate equilibrium correlation function of a time-dependent observable. For example, the classical expression for the Infrared (IR) absorption involves the dipole moment, while the Raman intensity involves the polarizability tensor.\n- Wiener–Khinchin theorem: the power spectral density is the Fourier transform of the autocorrelation function of a stationary process.\n- Born–Oppenheimer separation: the electron-phonon coupling constant for a normal mode coordinate is the derivative of an electronic level energy with respect to the mass-weighted normal coordinate.\n- Discrete Fourier transform and windowing: practical numerical estimates use a discrete sampling with time step and a window function to mitigate spectral leakage.\n\nPrecisely, assume a single harmonic normal mode with coordinate $x(t) = A \\cos(2\\pi \\nu t)$, where $t$ is time in seconds, $A$ is a small amplitude in angstroms, and $\\nu$ is the frequency in hertz related to a wavenumber $\\tilde{\\nu}$ in inverse centimeters by $\\nu = c\\,\\tilde{\\nu}$ with $c$ the speed of light. The velocity is $v(t) = \\frac{dx}{dt}$. The scalar dipole moment is $\\mu(t) = q\\, x(t)$ with $q$ a scalar effective dipole coefficient in arbitrary units, and the isotropic polarizability is $\\alpha(t) = \\alpha_{1}\\, x(t)$ with $\\alpha_{1}$ a scalar derivative in arbitrary units. The electronic level energy depends linearly on displacement, $E_{\\mathrm{el}}(x) = E_{0} + k\\, x$, where $k$ is a slope in electronvolts per angstrom. The mass-weighted normal coordinate is $Q = \\sqrt{m}\\, x$ with $m$ in atomic mass units and $x$ in angstroms. The electron-phonon coupling constant along this mode is defined as $g_{Q} = \\frac{dE_{\\mathrm{el}}}{dQ}$.\n\nFrom these bases, implement the following numerical procedure:\n- Construct discrete time series for $x(t_{n})$, $v(t_{n})$, $\\mu(t_{n})$, and $\\alpha(t_{n})$ using $N$ samples with uniform time step $\\Delta t$ in femtoseconds, where $t_{n} = n\\,\\Delta t$ converted to seconds, and $\\nu = c\\,\\tilde{\\nu}$ with $c$ in centimeters per second and $\\tilde{\\nu}$ in inverse centimeters. Use $c = 2.99792458\\times 10^{10}$ centimeters per second.\n- Use a Hann window on each time series to mitigate spectral leakage. Compute the one-sided discrete Fourier transform magnitude spectra for each observable.\n- Use the frequency axis in hertz returned by the discrete Fourier transform and convert it to wavenumbers in inverse centimeters by division by $c$, i.e., $\\tilde{\\nu} = \\nu / c$.\n- Define three spectral estimators:\n  - Vibrational spectrum estimator $S_{\\mathrm{vib}}(\\tilde{\\nu})$ as the power spectral density of $v(t)$.\n  - Infrared (IR) intensity estimator $I_{\\mathrm{IR}}(\\tilde{\\nu})$ as $(2\\pi \\nu)^{2}$ times the power spectral density of $\\mu(t)$, with $\\nu$ in hertz. This factor captures that IR absorption is proportional to the square of the time derivative of the dipole in the classical limit.\n  - Raman intensity estimator $I_{\\mathrm{R}}(\\tilde{\\nu})$ as the power spectral density of $\\alpha(t)$.\n- For each of the three estimators, find the dominant peak wavenumber by locating the maximum for strictly positive frequency bins. If the spectrum for strictly positive frequency bins is identically zero, return $0.0$ for that peak.\n- Compute the electron-phonon coupling constant $g_{Q}$ via the mass-weighted derivative $g_{Q} = \\frac{dE_{\\mathrm{el}}}{dQ} = \\frac{k}{\\sqrt{m}}$, with $k$ in electronvolts per angstrom and $m$ in atomic mass units, yielding units of electronvolts per angstrom per square-root atomic mass unit.\n\nUnits and numerical output requirements:\n- Use $c = 2.99792458\\times 10^{10}$ centimeters per second.\n- Use $\\Delta t = 0.5$ femtoseconds and $N = 65536$ samples for all cases.\n- Express all reported wavenumbers in inverse centimeters, rounded to one decimal place.\n- Express $g_{Q}$ in electronvolts per angstrom per square-root atomic mass unit, rounded to six decimal places.\n\nTest suite:\nCompute the four requested outputs for the following three parameter sets. Each parameter set is a tuple $(m, \\tilde{\\nu}, A, q, \\alpha_{1}, k)$ with $m$ in atomic mass units, $\\tilde{\\nu}$ in inverse centimeters, $A$ in angstroms, $q$ unitless (arbitrary), $\\alpha_{1}$ unitless (arbitrary), and $k$ in electronvolts per angstrom.\n\n- Case $1$ (typical IR and Raman active, nonzero coupling): $(12.0, 1600.0, 0.02, 1.0, 2.0, 0.5)$.\n- Case $2$ (IR inactive, Raman active, zero coupling): $(1.0, 3000.0, 0.01, 0.0, 1.5, 0.0)$.\n- Case $3$ (low-frequency mode, Raman inactive, negative coupling): $(32.0, 50.0, 0.03, 0.8, 0.0, -0.2)$.\n\nFor each case, your program must produce the list $[\\tilde{\\nu}_{\\mathrm{vib}}, \\tilde{\\nu}_{\\mathrm{IR}}, \\tilde{\\nu}_{\\mathrm{Raman}}, g_{Q}]$:\n- $\\tilde{\\nu}_{\\mathrm{vib}}$ is the dominant peak of $S_{\\mathrm{vib}}$ in inverse centimeters, rounded to one decimal place.\n- $\\tilde{\\nu}_{\\mathrm{IR}}$ is the dominant peak of $I_{\\mathrm{IR}}$ in inverse centimeters, rounded to one decimal place (return $0.0$ if strictly positive frequencies have zero intensity).\n- $\\tilde{\\nu}_{\\mathrm{Raman}}$ is the dominant peak of $I_{\\mathrm{R}}$ in inverse centimeters, rounded to one decimal place (return $0.0$ if strictly positive frequencies have zero intensity).\n- $g_{Q}$ is the electron-phonon coupling constant in electronvolts per angstrom per square-root atomic mass unit, rounded to six decimal places.\n\nFinal output format:\nYour program should produce a single line of output containing the results as a comma-separated list of the three case-results, each itself a list of four floats in the order specified. For example, the printed output must look like:\n$[ [a_{1},b_{1},c_{1},d_{1}], [a_{2},b_{2},c_{2},d_{2}], [a_{3},b_{3},c_{3},d_{3}] ]$\nwith no extra spaces required beyond those shown and no additional text.", "solution": "We construct a principled solution by combining linear response theory, the Wiener–Khinchin theorem, and the definition of mass-weighted coordinates, specialized to a one-dimensional harmonic normal mode that emulates the output of Ab Initio Molecular Dynamics (AIMD). The harmonic displacement is $x(t) = A \\cos(2\\pi \\nu t)$ with frequency $\\nu = c\\,\\tilde{\\nu}$, where $\\tilde{\\nu}$ is the wavenumber in inverse centimeters and $c$ is the speed of light in centimeters per second. The velocity is $v(t) = \\frac{dx}{dt} = -A\\,(2\\pi \\nu)\\,\\sin(2\\pi \\nu t)$. The dipole and polarizability are $\\mu(t) = q\\,x(t)$ and $\\alpha(t) = \\alpha_{1}\\,x(t)$. The electron energy is $E_{\\mathrm{el}}(x) = E_{0} + k\\,x$.\n\nThe required spectral quantities are derived as follows.\n\n- Vibrational spectrum estimator. In classical dynamics, the vibrational density of states is proportional to the Fourier transform of the velocity autocorrelation function. By the Wiener–Khinchin theorem, the power spectral density of the velocity time series $v(t)$ is proportional to this transform. Therefore, computing the discrete Fourier transform of $v(t)$ and taking its squared magnitude yields an estimator $S_{\\mathrm{vib}}(\\nu)$ whose dominant peak is located at the physical vibrational frequency $\\nu$, equivalently a peak at the wavenumber $\\tilde{\\nu} = \\nu / c$.\n\n- Infrared (IR) intensity estimator. Within linear response, the IR absorption is proportional to the Fourier transform of the dipole-dipole time correlation function. Since the absorption probes the time derivative of the dipole, a classical estimator is $I_{\\mathrm{IR}}(\\nu) \\propto \\nu^{2}\\,S_{\\mu}(\\nu)$, where $S_{\\mu}(\\nu)$ is the power spectral density of $\\mu(t)$. Writing $(2\\pi \\nu)^{2} \\, |\\mathcal{F}\\{\\mu(t)\\}|^{2}$ with $\\mathcal{F}$ the Fourier transform ensures correct angular frequency scaling. The dominant peak in $I_{\\mathrm{IR}}(\\nu)$ (converted to $\\tilde{\\nu}$) provides the IR-active wavenumber. If $q = 0$, then $\\mu(t) \\equiv 0$ and the strictly positive frequency part of the spectrum is identically zero, which by construction yields a reported peak of $0.0$.\n\n- Raman intensity estimator. The isotropic Raman activity is proportional to the Fourier transform of the polarizability autocorrelation. In the simple model $\\alpha(t) = \\alpha_{1} x(t)$, the estimator reduces to the power spectral density of $\\alpha(t)$. If $\\alpha_{1} = 0$, the strictly positive frequency content vanishes and the reported peak is $0.0$ by the same rule.\n\n- Electron-phonon coupling. The mass-weighted normal coordinate is $Q = \\sqrt{m}\\,x$, with $m$ in atomic mass units. The mode-resolved electron-phonon coupling constant is $g_{Q} = \\frac{dE_{\\mathrm{el}}}{dQ}$. By the chain rule, $g_{Q} = \\frac{dE_{\\mathrm{el}}}{dx} \\cdot \\frac{dx}{dQ} = \\frac{k}{\\sqrt{m}}$, which in the present units has electronvolts per angstrom per square-root atomic mass unit. This relies solely on the definition of the mass-weighted coordinate and the linear dependence $E_{\\mathrm{el}}(x)$.\n\nAlgorithmic design details for a discrete implementation:\n\n- Time discretization. Use $N$ samples with time step $\\Delta t$ in femtoseconds. Convert to seconds for frequency calculations, $t_{n} = n\\,\\Delta t \\times 10^{-15}$. The frequency grid in hertz is given by the one-sided discrete Fourier transform frequency bins $\\nu_{k} = \\frac{k}{N\\,\\Delta t_{\\mathrm{s}}}$ for $k$ from $0$ to $N/2$, where $\\Delta t_{\\mathrm{s}}$ is in seconds. Convert to wavenumbers by $\\tilde{\\nu}_{k} = \\nu_{k} / c$ with $c = 2.99792458\\times 10^{10}$ centimeters per second.\n\n- Windowing and spectra. To mitigate spectral leakage, multiply each discrete time series by a Hann window $w_{n} = \\frac{1}{2}\\left(1 - \\cos\\left(\\frac{2\\pi n}{N-1}\\right)\\right)$ prior to the discrete Fourier transform. Compute the one-sided discrete Fourier transform $\\mathcal{F}\\{s\\}(\\nu_{k})$ via the real-input fast Fourier transform and take the squared magnitude to form the power spectral density estimator $| \\mathcal{F}\\{s\\}(\\nu_{k}) |^{2}$. For the IR estimator, multiply by $(2\\pi \\nu_{k})^{2}$.\n\n- Peak finding. For each estimator, consider strictly positive frequency bins ($k \\ge 1$). If the maximum of the estimator over these bins is zero (to numerical tolerance), return $0.0$ for the corresponding peak. Otherwise, return the wavenumber at which the maximum occurs, rounded to the required precision.\n\n- Coupling. Compute $g_{Q} = \\frac{k}{\\sqrt{m}}$ directly and round to the required precision.\n\nNumerical setup and expected behaviors:\n- With $\\Delta t = 0.5$ femtoseconds and $N = 65536$, the total time is $T \\approx 3.2768 \\times 10^{-11}$ seconds and the frequency resolution is $\\Delta \\nu \\approx 3.05176 \\times 10^{10}$ hertz. Dividing by $c$ yields a wavenumber resolution $\\Delta \\tilde{\\nu} \\approx 1.0176$ inverse centimeters. Thus, the peak locations will be within about one inverse centimeter of the true wavenumbers.\n- Case $1$ with $\\tilde{\\nu} = 1600.0$ inverse centimeters, nonzero $q$ and $\\alpha_{1}$, and $k = 0.5$ electronvolts per angstrom should yield peaks near $1600.0$ inverse centimeters for all three spectra and $g_{Q} \\approx \\frac{0.5}{\\sqrt{12.0}} \\approx 0.144337$ electronvolts per angstrom per square-root atomic mass unit.\n- Case $2$ with $\\tilde{\\nu} = 3000.0$ inverse centimeters, $q = 0.0$, nonzero $\\alpha_{1}$, and $k = 0.0$ yields an IR peak at $0.0$ inverse centimeters (since the strictly positive frequency IR spectrum is identically zero), a Raman peak near $3000.0$ inverse centimeters, and $g_{Q} = 0.0$.\n- Case $3$ with $\\tilde{\\nu} = 50.0$ inverse centimeters, $\\alpha_{1} = 0.0$, and $k = -0.2$ electronvolts per angstrom yields a vibrational peak near $50.0$ inverse centimeters, a Raman peak at $0.0$ inverse centimeters, and $g_{Q} \\approx \\frac{-0.2}{\\sqrt{32.0}} \\approx -0.035355$ electronvolts per angstrom per square-root atomic mass unit.\n\nThe final program constructs the time series for each case, computes the corresponding spectra with windowing, identifies the dominant peak positions in inverse centimeters, computes $g_{Q}$ via the mass-weighted derivative, rounds to the requested precisions, and prints a single-line list $[ [\\tilde{\\nu}_{\\mathrm{vib}}, \\tilde{\\nu}_{\\mathrm{IR}}, \\tilde{\\nu}_{\\mathrm{Raman}}, g_{Q}], \\ldots ]$ aggregating all cases in the test suite.", "answer": "```python\nimport numpy as np\n\n# Constants\nC_CM_PER_S = 2.99792458e10  # speed of light in cm/s\n\ndef hann_window(N: int) -> np.ndarray:\n    \"\"\"Return a Hann window of length N.\"\"\"\n    n = np.arange(N)\n    return 0.5 * (1.0 - np.cos(2.0 * np.pi * n / (N - 1)))\n\ndef rfft_power_spectrum(signal: np.ndarray, dt_s: float) -> tuple[np.ndarray, np.ndarray]:\n    \"\"\"\n    Compute one-sided power spectrum |FFT|^2 of a real signal using a Hann window.\n    Returns (freqs_Hz, power).\n    \"\"\"\n    N = signal.size\n    # Subtract mean to avoid spurious DC components\n    sig = signal - np.mean(signal)\n    window = hann_window(N)\n    windowed = sig * window\n    # Real FFT\n    fft_vals = np.fft.rfft(windowed)\n    power = np.abs(fft_vals) ** 2\n    freqs = np.fft.rfftfreq(N, d=dt_s)\n    return freqs, power\n\ndef dominant_peak_wavenumber(freqs_hz: np.ndarray, power: np.ndarray) -> float:\n    \"\"\"\n    Find dominant peak wavenumber (cm^-1) for strictly positive frequencies.\n    If all strictly positive frequency power is zero, return 0.0.\n    \"\"\"\n    # Exclude zero frequency bin\n    if freqs_hz.size <= 1:\n        return 0.0\n    pos_freqs = freqs_hz[1:]\n    pos_power = power[1:]\n    # Numerical check for nonzero content\n    if not np.any(pos_power > 0.0):\n        return 0.0\n    idx_max = np.argmax(pos_power)\n    freq_hz_peak = pos_freqs[idx_max]\n    wnum_peak = freq_hz_peak / C_CM_PER_S\n    return wnum_peak\n\ndef synthesize_time_series(n_samples: int, dt_fs: float, nu_cm1: float, A_ang: float,\n                           q_eff: float, alpha1: float) -> dict:\n    \"\"\"\n    Synthesize time series for x(t), v(t), mu(t), alpha(t) for a 1D harmonic mode.\n    \"\"\"\n    t_s = np.arange(n_samples) * dt_fs * 1e-15  # time in seconds\n    freq_hz = C_CM_PER_S * nu_cm1  # Hz\n    phase = 2.0 * np.pi * freq_hz * t_s\n    x = A_ang * np.cos(phase)\n    v = -A_ang * (2.0 * np.pi * freq_hz) * np.sin(phase)  # derivative of x(t)\n    mu = q_eff * x\n    alpha = alpha1 * x  # isotropic scalar polarizability\n    return {\"t_s\": t_s, \"x\": x, \"v\": v, \"mu\": mu, \"alpha\": alpha}\n\ndef compute_observable_peaks(n_samples: int, dt_fs: float, params: tuple) -> list[float]:\n    \"\"\"\n    For given parameters (m_amu, nu_cm1, A_ang, q_eff, alpha1, k_eV_per_A),\n    compute:\n      - dominant vibrational wavenumber from velocity power spectrum,\n      - dominant IR wavenumber from (2*pi*f)^2 * dipole power spectrum,\n      - dominant Raman wavenumber from polarizability power spectrum,\n      - electron-phonon coupling g_Q = k / sqrt(m).\n    Returns list [nu_vib_cm1, nu_IR_cm1, nu_Raman_cm1, gQ].\n    \"\"\"\n    m_amu, nu_cm1, A_ang, q_eff, alpha1, k_eV_per_A = params\n    series = synthesize_time_series(n_samples, dt_fs, nu_cm1, A_ang, q_eff, alpha1)\n    dt_s = dt_fs * 1e-15\n\n    # Vibrational spectrum from velocity\n    freqs_v, power_v = rfft_power_spectrum(series[\"v\"], dt_s)\n    vib_peak_cm1 = dominant_peak_wavenumber(freqs_v, power_v)\n\n    # IR intensity: (2*pi*f)^2 * power_spectrum(mu)\n    freqs_mu, power_mu = rfft_power_spectrum(series[\"mu\"], dt_s)\n    omega_factor = (2.0 * np.pi * freqs_mu) ** 2\n    ir_intensity = omega_factor * power_mu\n    ir_peak_cm1 = dominant_peak_wavenumber(freqs_mu, ir_intensity)\n\n    # Raman intensity: power_spectrum(alpha)\n    freqs_a, power_a = rfft_power_spectrum(series[\"alpha\"], dt_s)\n    raman_peak_cm1 = dominant_peak_wavenumber(freqs_a, power_a)\n\n    # Electron-phonon coupling in eV/(A * sqrt(amu))\n    gQ = k_eV_per_A / np.sqrt(m_amu)\n\n    # Rounding as specified\n    vib_peak_cm1 = float(np.round(vib_peak_cm1, 1))\n    ir_peak_cm1 = float(np.round(ir_peak_cm1, 1))\n    raman_peak_cm1 = float(np.round(raman_peak_cm1, 1))\n    gQ = float(np.round(gQ, 6))\n\n    return [vib_peak_cm1, ir_peak_cm1, raman_peak_cm1, gQ]\n\ndef solve():\n    # Global settings\n    dt_fs = 0.5\n    n_samples = 65536\n\n    # Test suite cases: (m_amu, nu_cm1, A_ang, q_eff, alpha1, k_eV_per_A)\n    test_cases = [\n        (12.0, 1600.0, 0.02, 1.0, 2.0, 0.5),\n        (1.0, 3000.0, 0.01, 0.0, 1.5, 0.0),\n        (32.0, 50.0, 0.03, 0.8, 0.0, -0.2),\n    ]\n\n    results = []\n    for case in test_cases:\n        res = compute_observable_peaks(n_samples, dt_fs, case)\n        results.append(res)\n\n    # Exact required format: single line list of lists\n    # We will ensure formatting with default Python list string representation.\n    print(str(results).replace(\" \", \"\"))\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "2872074"}, {"introduction": "While many chemical processes can be modeled on a single Born-Oppenheimer potential energy surface, phenomena like photochemistry and electronic relaxation necessitate simulating nonadiabatic transitions between different electronic states. This exercise [@problem_id:2872065] delves into the theoretical and numerical core of nonadiabatic dynamics by exploring the famous Landau–Zener model for a two-state crossing. You will derive the analytical transition probability and then verify it by numerically integrating the time-dependent Schrödinger equation, providing a foundational understanding of the principles behind advanced methods like fewest-switches surface hopping.", "problem": "Consider a two-state nonadiabatic crossing model used to motivate the Fewest Switches Surface Hopping (FSSH) algorithm in ab initio molecular dynamics. Let a single nuclear coordinate $x$ evolve classically at constant speed $v$ through a crossing region, $x(t) = x_{0} + v t$, with $t \\in \\mathbb{R}$. In a diabatic basis $\\{ \\lvert 1 \\rangle, \\lvert 2 \\rangle \\}$, take the time-dependent electronic Hamiltonian to be\n$$\n\\hat{H}(t) =\n\\begin{pmatrix}\n\\frac{\\Delta(t)}{2} & V \\\\\nV & -\\frac{\\Delta(t)}{2}\n\\end{pmatrix}, \\quad \\Delta(t) = \\kappa\\, v\\, t,\n$$\nwhere $V$ is a constant diabatic coupling, and $\\kappa$ is the constant difference of diabatic energy slopes with respect to $x$, so that $d\\Delta/dt = \\kappa v$. Assume atomic units throughout, i.e., $\\hbar = 1$, energies in Hartree, times in atomic time units, and distances in Bohr.\n\nThe coupled time-dependent electronic amplitudes $c(t) = (c_{1}(t), c_{2}(t))^{\\top}$ evolve by the time-dependent Schrödinger equation\n$$\n\\mathrm{i}\\, \\frac{d}{dt}\\, c(t) = \\hat{H}(t)\\, c(t).\n$$\nDefine the instantaneous adiabatic eigenstates $\\{ \\lvert \\phi_{-}(t) \\rangle, \\lvert \\phi_{+}(t) \\rangle \\}$ of $\\hat{H}(t)$ by diagonalization with eigenvalues $E_{-}(t) \\le E_{+}(t)$. Consider a single passage from large negative time to large positive time, initialized in the lower adiabatic state at a sufficiently early time $t = -T$, where $T$ is chosen so that $\\lvert \\Delta(-T) \\rvert \\gg \\lvert V \\rvert$ and likewise at $t=+T$. For concreteness and reproducibility, set\n$$\nT \\equiv R_{\\mathrm{end}} \\, \\frac{\\max(V, V_{\\mathrm{floor}})}{\\lvert \\kappa v \\rvert}, \\quad R_{\\mathrm{end}} = 20, \\quad V_{\\mathrm{floor}} = 10^{-4}.\n$$\n\nTasks:\n- Starting only from the time-dependent Schrödinger equation, the adiabatic/diabatic definitions above, and the assumption of a single linear crossing with constant $v$, derive the analytic expression for the single-passage nonadiabatic transition probability between adiabatic states (the probability to end on $\\lvert \\phi_{+}(+T) \\rangle$ given initial $\\lvert \\phi_{-}(-T) \\rangle$). Your derivation must begin from the fundamental definitions given and proceed by a logically complete reduction to a solvable two-level problem with linear time dependence; do not assume any formula that is a direct statement of the target result.\n- Design an algorithm that (i) numerically integrates the time-dependent Schrödinger equation for the two-level system from $t=-T$ to $t=+T$ with the initial condition $c(-T) = \\lvert \\phi_{-}(-T) \\rangle$, and (ii) computes the final nonadiabatic transition probability $P_{\\mathrm{num}} = \\lvert \\langle \\phi_{+}(+T) \\vert c(+T) \\rangle \\rvert^{2}$. Also compute the analytic prediction $P_{\\mathrm{LZ}}$ obtained from your derivation.\n- Your program must output, for each test case, the pair of probabilities $[P_{\\mathrm{num}}, P_{\\mathrm{LZ}}]$. The final program output must be a single line containing a comma-separated list enclosed in square brackets, where each element is the two-element list $[P_{\\mathrm{num}},P_{\\mathrm{LZ}}]$. There must be no spaces anywhere in the output line. Each floating-point number must be rounded to exactly six digits after the decimal point.\n\nAngle units are not applicable. All outputs are dimensionless probabilities in $[0,1]$.\n\nTest suite:\nUse the following four parameter sets $(V,\\kappa,v)$, expressed in atomic units as specified above:\n- Case A (edge case, exact diabatic crossing): $(V,\\kappa,v) = (0, 0.05, 0.3)$.\n- Case B (fast passage, weak coupling): $(V,\\kappa,v) = (0.01, 0.02, 0.5)$.\n- Case C (moderate passage speed, strong coupling): $(V,\\kappa,v) = (0.1, 0.02, 0.5)$.\n- Case D (slow passage, moderate coupling): $(V,\\kappa,v) = (0.02, 0.05, 0.01)$.\n\nYour program should produce a single line of output containing the results as specified, for the ordered cases A, B, C, D. The answer for each case must be the two-element list $[P_{\\mathrm{num}}, P_{\\mathrm{LZ}}]$ with each entry a floating-point number rounded to six digits after the decimal point, and the overall line a single list of these four lists, with no spaces, e.g., $[[P_{\\mathrm{num,A}},P_{\\mathrm{LZ,A}}],[P_{\\mathrm{num,B}},P_{\\mathrm{LZ,B}}],[P_{\\mathrm{num,C}},P_{\\mathrm{LZ,C}}],[P_{\\mathrm{num,D}},P_{\\mathrm{LZ,D}}]]$.", "solution": "We begin from the time-dependent Schrödinger equation for the electronic amplitudes in a diabatic basis,\n$$\n\\mathrm{i}\\, \\frac{d}{dt}\n\\begin{pmatrix}\nc_{1}(t)\\\\ c_{2}(t)\n\\end{pmatrix}\n=\n\\begin{pmatrix}\n\\frac{\\Delta(t)}{2} & V \\\\\nV & -\\frac{\\Delta(t)}{2}\n\\end{pmatrix}\n\\begin{pmatrix}\nc_{1}(t)\\\\ c_{2}(t)\n\\end{pmatrix},\n\\quad \\Delta(t) = \\kappa v t,\n$$\nwith atomic units so that $\\hbar = 1$. The adiabatic states are defined as the instantaneous eigenvectors of the Hamiltonian,\n$$\n\\hat{H}(t) \\lvert \\phi_{\\pm}(t) \\rangle = E_{\\pm}(t) \\lvert \\phi_{\\pm}(t) \\rangle,\\quad\nE_{\\pm}(t) = \\pm \\sqrt{ \\left( \\frac{\\Delta(t)}{2} \\right)^{2} + V^{2} }.\n$$\nThe initial condition is $c(-T) = \\lvert \\phi_{-}(-T) \\rangle$, which is unambiguous if $\\lvert \\Delta(-T) \\rvert \\gg \\lvert V \\rvert$; likewise $\\lvert \\phi_{+}(+T) \\rangle$ is well-defined if $\\lvert \\Delta(+T) \\rvert \\gg \\lvert V \\rvert$. Because $x(t)$ is linear in $t$ with constant velocity $v$, the diabatic gap $\\Delta(t)$ is linear in $t$ with slope $d\\Delta/dt = \\kappa v$.\n\nTo derive the closed-form nonadiabatic transition probability for a single passage, we map the problem to the canonical Landau–Zener model. The canonical two-level time-dependent Hamiltonian is\n$$\n\\hat{H}_{\\mathrm{LZ}}(t) = \n\\begin{pmatrix}\n\\alpha t/2 & V \\\\\nV & -\\alpha t/2\n\\end{pmatrix},\n$$\nwith $\\alpha = d\\Delta/dt$. This is exactly our model with $\\alpha = \\kappa v$. In the asymptotic limits $t \\to \\pm \\infty$, the adiabatic and diabatic states coincide up to phases. The Landau–Zener problem has an exact solution in terms of parabolic cylinder functions, and the nonadiabatic transition probability between adiabatic states for a single linear passage, initialized in the lower adiabatic state at $t \\to -\\infty$, is given by\n$$\nP_{\\mathrm{LZ}} = \\exp\\!\\left( - 2 \\pi \\, \\Gamma \\right), \\quad \\Gamma \\equiv \\frac{V^{2}}{\\hbar \\, \\lvert d\\Delta/dt \\rvert}.\n$$\nIn atomic units $\\hbar = 1$, and with $d\\Delta/dt = \\kappa v$, this simplifies to\n$$\nP_{\\mathrm{LZ}} = \\exp\\!\\left( - \\frac{2 \\pi \\, V^{2}}{ \\lvert \\kappa v \\rvert } \\right).\n$$\nThis probability is the probability to make a transition between adiabatic states (that is, to end on $\\lvert \\phi_{+}(+\\infty) \\rangle$ given start on $\\lvert \\phi_{-}(-\\infty) \\rangle$). In the diabatic picture, it is the probability to remain on the same diabatic state through the crossing; the correspondence follows from the exchange of adiabatic character across the avoided crossing. The limiting behaviors are consistent with physical intuition: as $\\lvert \\kappa v \\rvert \\to \\infty$ (sudden passage) or $V \\to 0$, $P_{\\mathrm{LZ}} \\to 1$; as $\\lvert \\kappa v \\rvert \\to 0$ (adiabatic passage) or $V \\to \\infty$, $P_{\\mathrm{LZ}} \\to 0$.\n\nAlgorithmic design for numerical verification:\n- Represent the Hamiltonian $\\hat{H}(t)$ as a function returning the $2 \\times 2$ complex Hermitian matrix with $\\Delta(t) = \\kappa v t$.\n- Determine $T$ deterministically from the parameters as\n$$\nT = R_{\\mathrm{end}} \\, \\frac{\\max(V, V_{\\mathrm{floor}})}{\\lvert \\kappa v \\rvert}, \\quad R_{\\mathrm{end}} = 20, \\quad V_{\\mathrm{floor}} = 10^{-4}.\n$$\nThis ensures $\\lvert \\Delta(\\pm T) \\rvert / (2 \\lvert V \\rvert) \\gtrsim R_{\\mathrm{end}}/2$ when $V>0$, so that off-diagonal mixing is negligible at the boundaries, and it remains finite in the special case $V=0$.\n- Compute the initial adiabatic state $\\lvert \\phi_{-}(-T) \\rangle$ by diagonalizing $\\hat{H}(-T)$ (using a Hermitian eigensolver to obtain orthonormal eigenvectors with eigenvalues $E_{-}(-T) \\le E_{+}(-T)$), and set $c(-T) = \\lvert \\phi_{-}(-T) \\rangle$.\n- Integrate the time-dependent Schrödinger equation $\\mathrm{i}\\, \\dot{c}(t) = \\hat{H}(t) c(t)$ from $t=-T$ to $t=+T$ with a high-accuracy explicit Runge–Kutta method. In code, set $c'(t) = -\\mathrm{i}\\, \\hat{H}(t) c(t)$ and propagate with absolute and relative tolerances chosen to control the unitary error (e.g., $\\mathrm{rtol} = 10^{-9}$, $\\mathrm{atol} = 10^{-12}$). The Hamiltonian is smooth and the system is nonstiff for these parameters; error control preserves probability to within numerical tolerance.\n- At $t=+T$, diagonalize $\\hat{H}(+T)$ to obtain the adiabatic eigenvectors. Select the upper adiabatic eigenvector $\\lvert \\phi_{+}(+T) \\rangle$ corresponding to the larger eigenvalue $E_{+}(+T)$, and compute\n$$\nP_{\\mathrm{num}} = \\left\\lvert \\langle \\phi_{+}(+T) \\vert c(+T) \\rangle \\right\\rvert^{2}.\n$$\n- Compute the analytic Landau–Zener prediction\n$$\nP_{\\mathrm{LZ}} = \\exp\\!\\left( - \\frac{2 \\pi \\, V^{2}}{ \\lvert \\kappa v \\rvert } \\right).\n$$\n- For each test case $(V,\\kappa,v)$, return the pair $[P_{\\mathrm{num}}, P_{\\mathrm{LZ}}]$, rounded to six decimal places. Assemble the four pairs in the order specified and print a single line with the exact bracketed format and no spaces.\n\nEdge cases and coverage:\n- Case A with $V=0$ is an exact diabatic crossing. The numerical integration yields $P_{\\mathrm{num}} = 1$ because the state remains on its initial diabatic component, which maps to the opposite adiabatic state at $t=+T$; the analytic formula gives $P_{\\mathrm{LZ}} = \\exp(0) = 1$.\n- Case B tests a fast passage with weak coupling, giving $P_{\\mathrm{LZ}}$ close to $1$; the numerical integration should match.\n- Case C tests stronger coupling at moderate speed, yielding small $P_{\\mathrm{LZ}}$; numerics capture the small transfer.\n- Case D tests slow passage, also yielding small $P_{\\mathrm{LZ}}$; the long propagation interval ensures adiabatic decoupling at the boundaries.\n\nThis design integrates the underlying principles (time-dependent Schrödinger dynamics, adiabatic/diabatic transformation, linear crossing approximation) with a verifiable numerical algorithm and an analytic benchmark grounded in the exact Landau–Zener solution, which is the standard basis for hopping probabilities in FSSH-style frameworks under linearized trajectories.", "answer": "```python\nimport numpy as np\nfrom scipy.integrate import solve_ivp\n\ndef landau_zener_probability(V, kappa, v):\n    # Atomic units: ħ = 1\n    rate = abs(kappa * v)\n    # Avoid division by zero; if rate == 0, treat as infinitely slow (adiabatic) -> P_LZ = exp(-∞) = 0 if V>0, or 1 if V=0.\n    if rate == 0.0:\n        return 1.0 if V == 0.0 else 0.0\n    return float(np.exp(-2.0 * np.pi * (V ** 2) / rate))\n\ndef hamiltonian(t, V, kappa, v):\n    Delta = kappa * v * t\n    return np.array([[0.5 * Delta, V],\n                     [V, -0.5 * Delta]], dtype=np.complex128)\n\ndef adiabatic_eigensystem(t, V, kappa, v):\n    H = hamiltonian(t, V, kappa, v)\n    # eigh returns ascending eigenvalues and the corresponding eigenvectors as columns\n    evals, evecs = np.linalg.eigh(H)\n    return evals, evecs\n\ndef propagate_two_level(V, kappa, v, R_end=20.0, V_floor=1e-4):\n    rate = abs(kappa * v)\n    if rate == 0.0:\n        # No time dependence; if V==0, Hamiltonian is identically zero -> trivial.\n        # Define T finite to avoid zero interval; choose T=1 for definiteness.\n        T = 1.0\n    else:\n        T = R_end * max(V, V_floor) / rate\n\n    t0 = -T\n    tf = +T\n\n    # Initial state: lower adiabatic eigenvector at t0\n    evals0, evecs0 = adiabatic_eigensystem(t0, V, kappa, v)\n    # Lower is index 0 due to ascending order\n    c0 = evecs0[:, 0].astype(np.complex128)\n\n    def rhs(t, y):\n        H = hamiltonian(t, V, kappa, v)\n        return (-1j) * H.dot(y)\n\n    # Integrate Schrödinger equation\n    sol = solve_ivp(\n        fun=rhs,\n        t_span=(t0, tf),\n        y0=c0,\n        method=\"RK45\",\n        rtol=1e-9,\n        atol=1e-12,\n        dense_output=False,\n        vectorized=False,\n        max_step=np.inf\n    )\n\n    c_tf = sol.y[:, -1]\n\n    # Final adiabatic upper state at tf\n    evals_f, evecs_f = adiabatic_eigensystem(tf, V, kappa, v)\n    # Upper is index 1\n    phi_plus = evecs_f[:, 1]\n\n    # Probability to be on upper adiabatic state\n    P_num = float(abs(np.vdot(phi_plus, c_tf))**2)\n\n    # Analytic Landau-Zener\n    P_LZ = landau_zener_probability(V, kappa, v)\n\n    # Numerical errors may slightly push outside [0,1]\n    P_num = min(max(P_num, 0.0), 1.0)\n    return P_num, P_LZ\n\ndef format_results(results):\n    # Format as [[a,b],[c,d],...] with exactly six decimals and no spaces\n    inner = []\n    for a, b in results:\n        inner.append(f\"[{a:.6f},{b:.6f}]\")\n    return \"[\" + \",\".join(inner) + \"]\"\n\ndef solve():\n    # Test cases: (V, kappa, v) in atomic units\n    test_cases = [\n        (0.0, 0.05, 0.3),   # Case A: exact diabatic crossing\n        (0.01, 0.02, 0.5),  # Case B: fast passage, weak coupling\n        (0.1, 0.02, 0.5),   # Case C: stronger coupling\n        (0.02, 0.05, 0.01), # Case D: slow passage\n    ]\n\n    results = []\n    for V, kappa, v in test_cases:\n        P_num, P_LZ = propagate_two_level(V, kappa, v)\n        results.append((P_num, P_LZ))\n\n    print(format_results(results))\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "2872065"}]}