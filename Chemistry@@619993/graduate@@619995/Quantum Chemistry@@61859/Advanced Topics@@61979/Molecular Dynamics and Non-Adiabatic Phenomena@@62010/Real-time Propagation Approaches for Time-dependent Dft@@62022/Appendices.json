{"hands_on_practices": [{"introduction": "Before writing code to simulate quantum dynamics, it is crucial to understand the mathematical stability of the chosen time-stepping algorithm. This analytical exercise [@problem_id:2919790] guides you through a von Neumann stability analysis for propagating the time-dependent Schrödinger equation on a spatial grid. By deriving the stability conditions for the explicit Euler and the Crank-Nicolson methods, you will uncover the fundamental reason why the latter is a robust choice for quantum simulations, whereas the former is inherently unsuitable.", "problem": "In real-time Time-Dependent Density Functional Theory (TDDFT), a common task is the numerical propagation of a Kohn–Sham orbital that, in the free-particle limit, satisfies the time-dependent Schrödinger equation in atomic units, $i \\frac{\\partial \\psi(x,t)}{\\partial t} = -\\frac{1}{2} \\frac{\\partial^2 \\psi(x,t)}{\\partial x^2}$. Consider a spatially uniform, one-dimensional real-space grid with spacing $h$ and periodic boundary conditions. Approximate the Laplacian by the standard second-order central finite difference operator, $\\frac{\\partial^2 \\psi}{\\partial x^2}(x_j) \\approx \\frac{\\psi_{j+1}-2\\psi_{j}+\\psi_{j-1}}{h^2}$, where $\\psi_{j}(t) \\equiv \\psi(x_{j},t)$ and $x_{j}=j h$. Define the discrete Hamiltonian $H$ by its action $(H\\psi)_{j} = -\\frac{1}{2h^2}(\\psi_{j+1}-2\\psi_{j}+\\psi_{j-1})$.\n\nTwo time-propagation schemes are considered for advancing from $t^{n}$ to $t^{n+1}=t^{n}+\\Delta t$:\n- Explicit forward Euler: $\\psi^{n+1} = \\psi^{n} - i\\,\\Delta t\\, H \\psi^{n}$.\n- Crank–Nicolson (CN): $\\left(I + i\\,\\frac{\\Delta t}{2}\\,H\\right)\\psi^{n+1} = \\left(I - i\\,\\frac{\\Delta t}{2}\\,H\\right)\\psi^{n}$, where $I$ is the identity operator.\n\nPerform a von Neumann stability analysis by considering a Fourier mode $\\psi^{n}_{j} = G^{n}\\,\\exp(i \\kappa j h)$ with wavenumber $\\kappa$ in the first Brillouin zone. For each scheme:\n- Derive the amplification factor $G(\\kappa)$ as a function of $\\kappa$, $\\Delta t$, and $h$.\n- Determine the supremum over all $\\kappa$ of the modulus of the amplification factor, and express it as a function of the Courant-like ratio $r \\equiv \\frac{\\Delta t}{h^2}$.\n- Using the condition for stability that the spectral radius does not exceed unity for all $\\kappa$, deduce the largest admissible $r$ (that is, the supremum of all $r \\ge 0$ that satisfies the stability condition) for each scheme.\n\nProvide your final answer as a single row matrix containing these two largest admissible values of $r$ (first entry for explicit Euler, second entry for Crank–Nicolson). No derivations should appear in the final answer. The final answer must be an exact symbolic expression.", "solution": "The problem statement presents a well-posed task in the field of computational quantum mechanics, specifically the von Neumann stability analysis of numerical schemes for the time-dependent Schrödinger equation. The premises are scientifically grounded, and the objectives are defined with sufficient rigor. The problem is therefore deemed valid and a solution can be constructed.\n\nThe analysis begins with the action of the discrete Hamiltonian operator, $H$, on a general Fourier mode, $\\psi_j = \\exp(i \\kappa j h)$, where $\\psi_j \\equiv \\psi(x_j)$ and $x_j = j h$. The operator is defined by its action on the grid points $\\psi_j$ as $(H\\psi)_{j} = -\\frac{1}{2h^{2}}(\\psi_{j+1}-2\\psi_{j}+\\psi_{j-1})$. Applying this to the Fourier mode yields:\n$$ (H \\exp(i \\kappa j h))_j = -\\frac{1}{2h^{2}} \\left( \\exp(i \\kappa (j+1) h) - 2\\exp(i \\kappa j h) + \\exp(i \\kappa (j-1) h) \\right) $$\nFactoring out the term $\\exp(i \\kappa j h)$:\n$$ (H \\exp(i \\kappa j h))_j = -\\frac{\\exp(i \\kappa j h)}{2h^{2}} \\left( \\exp(i \\kappa h) - 2 + \\exp(-i \\kappa h) \\right) $$\nUsing the identity $2\\cos(\\theta) = \\exp(i\\theta) + \\exp(-i\\theta)$, the expression in the parenthesis becomes $2\\cos(\\kappa h) - 2$.\n$$ (H \\exp(i \\kappa j h))_j = -\\frac{\\exp(i \\kappa j h)}{2h^{2}} \\left( 2\\cos(\\kappa h) - 2 \\right) = \\frac{1 - \\cos(\\kappa h)}{h^{2}} \\exp(i \\kappa j h) $$\nEmploying the half-angle identity $1 - \\cos(\\theta) = 2\\sin^2(\\theta/2)$, we find that the Fourier mode is an eigenfunction of the discrete Hamiltonian operator $H$ with a real-valued eigenvalue $\\lambda(\\kappa)$:\n$$ \\lambda(\\kappa) = \\frac{2}{h^2} \\sin^2\\left(\\frac{\\kappa h}{2}\\right) $$\nThis result is the foundation for analyzing both propagation schemes.\n\nThe von Neumann stability analysis proceeds by substituting the ansatz $\\psi^{n}_{j} = G^{n}\\,\\exp(i \\kappa j h)$ into the finite-difference time-stepping scheme. The condition for stability is that the amplification factor $G(\\kappa)$ must satisfy $|G(\\kappa)| \\le 1$ for all wavenumbers $\\kappa$ within the first Brillouin zone.\n\nAnalysis of the Explicit Forward Euler scheme:\nThe scheme is given by $\\psi^{n+1} = \\psi^{n} - i\\,\\Delta t\\, H \\psi^{n} = (I - i\\,\\Delta t\\,H)\\psi^n$.\nSubstituting the ansatz gives:\n$$ G^{n+1}\\exp(i \\kappa j h) = (I - i\\,\\Delta t\\,H) G^{n}\\exp(i \\kappa j h) $$\nSince $\\exp(i \\kappa j h)$ is an eigenfunction of $H$, we can replace the operator $H$ with its eigenvalue $\\lambda(\\kappa)$:\n$$ G^{n+1} = (1 - i\\,\\Delta t\\,\\lambda(\\kappa))G^{n} $$\nThe amplification factor is therefore $G(\\kappa) = 1 - i\\,\\Delta t\\,\\lambda(\\kappa)$. Substituting the expression for $\\lambda(\\kappa)$ and the definition $r = \\frac{\\Delta t}{h^2}$:\n$$ G(\\kappa) = 1 - i\\,\\Delta t\\, \\frac{2}{h^2} \\sin^2\\left(\\frac{\\kappa h}{2}\\right) = 1 - 2 i r \\sin^2\\left(\\frac{\\kappa h}{2}\\right) $$\nThe modulus of the amplification factor is:\n$$ |G(\\kappa)| = \\left| 1 - 2 i r \\sin^2\\left(\\frac{\\kappa h}{2}\\right) \\right| = \\sqrt{1^2 + \\left(-2r \\sin^2\\left(\\frac{\\kappa h}{2}\\right)\\right)^2} = \\sqrt{1 + 4r^2 \\sin^4\\left(\\frac{\\kappa h}{2}\\right)} $$\nTo determine the stability, we need the supremum of $|G(\\kappa)|$. The term $\\sin^4(\\kappa h/2)$ is maximized when $|\\sin(\\kappa h/2)|$ is maximized. Within the first Brillouin zone, $\\kappa \\in [-\\pi/h, \\pi/h]$, so the argument $\\kappa h/2$ is in $[-\\pi/2, \\pi/2]$. The maximum value of $|\\sin(\\kappa h/2)|$ is $1$. Thus, the supremum of the modulus is:\n$$ \\sup_{\\kappa} |G(\\kappa)| = \\sqrt{1 + 4r^2} $$\nThe stability condition requires $\\sup_{\\kappa} |G(\\kappa)| \\le 1$, which implies:\n$$ \\sqrt{1 + 4r^2} \\le 1 $$\n$$ 1 + 4r^2 \\le 1 $$\n$$ 4r^2 \\le 0 $$\nSince $r = \\frac{\\Delta t}{h^2}$ must be non-negative ($r \\ge 0$), the only value of $r$ that satisfies this inequality is $r=0$. The set of admissible $r$ is $\\{0\\}$, and its supremum is $0$. This means the explicit forward Euler scheme is unconditionally unstable for the Schrödinger equation for any non-zero time step. The largest admissible value of $r$ is $0$.\n\nAnalysis of the Crank–Nicolson (CN) scheme:\nThe scheme is defined by $\\left(I + i\\,\\frac{\\Delta t}{2}\\,H\\right)\\psi^{n+1} = \\left(I - i\\,\\frac{\\Delta t}{2}\\,H\\right)\\psi^{n}$.\nSubstituting the ansatz $\\psi_j^n = G^n \\exp(i \\kappa j h)$ and replacing $H$ by its eigenvalue $\\lambda(\\kappa)$:\n$$ \\left(1 + i\\,\\frac{\\Delta t}{2}\\,\\lambda(\\kappa)\\right)G^{n+1} = \\left(1 - i\\,\\frac{\\Delta t}{2}\\,\\lambda(\\kappa)\\right)G^{n} $$\nThe amplification factor is:\n$$ G(\\kappa) = \\frac{1 - i\\,\\frac{\\Delta t}{2}\\,\\lambda(\\kappa)}{1 + i\\,\\frac{\\Delta t}{2}\\,\\lambda(\\kappa)} $$\nLet the real, non-negative quantity $A$ be defined as $A = \\frac{\\Delta t}{2}\\lambda(\\kappa) = \\frac{\\Delta t}{2} \\frac{2}{h^2} \\sin^2(\\frac{\\kappa h}{2}) = r \\sin^2(\\frac{\\kappa h}{2})$.\nThe amplification factor can be written as $G(\\kappa) = (1 - iA) / (1 + iA)$. The modulus is:\n$$ |G(\\kappa)| = \\frac{|1 - iA|}{|1 + iA|} = \\frac{\\sqrt{1^2 + (-A)^2}}{\\sqrt{1^2 + A^2}} = \\frac{\\sqrt{1+A^2}}{\\sqrt{1+A^2}} = 1 $$\nThe modulus of the amplification factor is exactly $1$ for all values of $\\kappa$, $\\Delta t$, and $h$. Thus, the supremum of the modulus is:\n$$ \\sup_{\\kappa} |G(\\kappa)| = 1 $$\nThe stability condition $\\sup_{\\kappa} |G(\\kappa)| \\le 1$ is satisfied for any choice of $r \\ge 0$. The scheme is unconditionally stable. The set of all admissible $r$ values is $[0, \\infty)$. The problem asks for the supremum of this set, which is $\\infty$.\n\nThe final result consists of the largest admissible values of $r$ for the explicit Euler and Crank-Nicolson schemes, respectively.\nFor explicit Euler, the largest admissible $r$ is $0$.\nFor Crank-Nicolson, the largest admissible $r$ is $\\infty$.", "answer": "$$\\boxed{\\begin{pmatrix} 0 & \\infty \\end{pmatrix}}$$", "id": "2919790"}, {"introduction": "Theoretical analysis reveals the limitations of certain numerical methods, but seeing them fail in practice provides a powerful lesson. This hands-on coding challenge [@problem_id:2461360] tasks you with simulating a simple two-level system using the inherently unstable explicit Euler propagator. By tracking the wavefunction norm, which should be conserved, you will directly observe the signature of numerical instability and investigate how it depends on the time step $\\Delta t$, making the abstract concepts of stability tangible.", "problem": "You are to construct a minimal, self-contained real-time propagation model for a two-level Time-Dependent Density Functional Theory (TD-DFT) Kohn–Sham system that reveals numerical instability and allows attribution of its source. Consider a two-level model with a time-dependent Hamiltonian defined, in atomic units (a.u.), by\n$$\nH(t) \\;=\\;\n\\begin{pmatrix}\n0 & -\\mu\\,E(t)\\\\\n-\\mu\\,E(t) & \\Delta\n\\end{pmatrix},\n\\qquad\nE(t) \\;=\\; E_0 \\sin(\\omega t),\n$$\nwhere the ground state energy is set to zero, the excited state energy is $\\,\\Delta\\,$, the transition dipole is $\\,\\mu\\,$, and $\\,E(t)\\,$ is a classical monochromatic electric field of amplitude $\\,E_0\\,$ and angular frequency $\\,\\omega\\,$. The state vector $\\,\\psi(t)\\,$ obeys the time-dependent Schrödinger equation\n$$\ni\\,\\frac{d\\psi(t)}{dt} \\;=\\; H(t)\\,\\psi(t),\n$$\nwith initial condition\n$$\n\\psi(0) \\;=\\; \\begin{pmatrix}1\\\\ 0\\end{pmatrix}.\n$$\nAll quantities and parameters are to be treated in atomic units (a.u.). The wavefunction norm should be computed as\n$$\n\\|\\psi(t)\\| \\;=\\; \\sqrt{\\psi(t)^\\dagger\\psi(t)}.\n$$\n\nYour program must, for each test case defined below, simulate the evolution over a total time $\\,T\\,$ using uniform time step $\\,\\Delta t\\,$ and decide whether the propagation is numerically stable according to the following criterion:\n- Define the maximal relative norm deviation as\n$$\n\\delta_{\\max} \\;=\\; \\max_{0 \\le n \\le N}\\,\\big|\\,\\|\\psi(t_n)\\| - 1\\,\\big|,\\quad t_n = n\\,\\Delta t,\\quad N = T/\\Delta t.\n$$\nPropagation is classified as stable if $\\,\\delta_{\\max} \\le \\varepsilon\\,$ and unstable if $\\,\\delta_{\\max} > \\varepsilon\\,$, where $\\,\\varepsilon = 0.05\\,$.\n\nIn addition, for each test case you must determine whether instability, if present, can be attributed to a time step that is too large relative to the applied field frequency (temporal undersampling). For a monochromatic field $\\,E(t) = E_0 \\sin(\\omega t)\\,$, temporal undersampling (aliasing) is flagged if\n$$\n\\Delta t \\;>\\; \\frac{\\pi}{\\omega},\n$$\nwith the convention that no aliasing is possible when $\\,\\omega = 0\\,$.\n\nUse the following fixed physical parameters for all cases: $\\,\\Delta = 0.5\\,$, $\\,\\mu = 0.2\\,$, and $\\,E_0 = 0.05\\,$ (all in a.u.). The simulation parameters form the test suite below, where $\\,\\omega\\,$ is the field angular frequency, $\\,\\Delta t\\,$ is the time step, and $\\,T\\,$ is the total simulation time. All times are in a.u., and each is chosen so that $\\,T/\\Delta t\\,$ is an integer:\n- Test case A (happy path): $\\,\\omega = 0.2\\,$, $\\,\\Delta t = 0.05\\,$, $\\,T = 5.0\\,$.\n- Test case B (aliasing-driven stress): $\\,\\omega = 4.0\\,$, $\\,\\Delta t = 1.0\\,$, $\\,T = 5.0\\,$.\n- Test case C (non-aliasing large-step stress): $\\,\\omega = 0.2\\,$, $\\,\\Delta t = 0.5\\,$, $\\,T = 20.0\\,$.\n- Test case D (near Nyquist boundary, short run): $\\,\\omega = 10.0\\,$, $\\,\\Delta t = 0.3\\,$, $\\,T = 1.2\\,$.\n\nFor each test case, your program must output an integer code according to the following rule:\n- Output $\\,0\\,$ if the propagation is stable.\n- Output $\\,1\\,$ if the propagation is unstable and the aliasing condition $\\,\\Delta t > \\pi/\\omega\\,$ holds.\n- Output $\\,2\\,$ if the propagation is unstable and the aliasing condition does not hold.\n\nYour program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, in the order of test cases A, B, C, D. For example, the output format must be exactly like\n$$\n[\\text{result\\_A},\\text{result\\_B},\\text{result\\_C},\\text{result\\_D}],\n$$\nwith each entry an integer as defined above, and no extra spaces or text. All quantities must be treated in atomic units (a.u.), and angles are in radians via $\\,\\sin(\\omega t)\\,$ as specified.", "solution": "The problem statement is critically validated and found to be valid. It is scientifically grounded, well-posed, and objective. The problem describes the time evolution of a two-level quantum system under a classical external field, governed by the time-dependent Schrödinger equation, which is a standard and fundamental model in quantum mechanics and computational chemistry. All parameters and conditions are clearly defined. The task is to construct a minimal simulation that reveals numerical instability, which is a key concept in numerical analysis. This implies the freedom to select a suitable, simple numerical integrator. To fulfill the problem's goal of demonstrating instability, we choose the Explicit Forward Euler method, a first-order integrator known for its simplicity and its non-unitary nature when applied to the Schrödinger equation, which will manifest as non-conservation of the wavefunction norm.\n\nThe problem is to simulate the time evolution of a state vector $\\psi(t)$ in a two-level system, which obeys the time-dependent Schrödinger equation (TDSE):\n$$\ni\\,\\frac{d\\psi(t)}{dt} \\;=\\; H(t)\\,\\psi(t)\n$$\nHere, $i$ is the imaginary unit, and we use atomic units where the reduced Planck constant $\\hbar$ is $1$. The state vector is a two-component column vector $\\psi(t) = \\begin{pmatrix} c_1(t) \\\\ c_2(t) \\end{pmatrix}$, and the Hamiltonian $H(t)$ is a $2 \\times 2$ matrix. The initial state is given as $\\psi(0) = \\begin{pmatrix} 1 \\\\ 0 \\end{pmatrix}$.\n\nTo solve this differential equation numerically, we discretize time into uniform steps of size $\\Delta t$. Let $t_n = n\\,\\Delta t$ for integer $n \\ge 0$. The state at time $t_{n+1}$ is determined from the state at time $t_n$. Rewriting the TDSE as $\\frac{d\\psi(t)}{dt} = -i H(t)\\psi(t)$, we apply the Explicit Forward Euler method, which approximates the derivative as a finite difference:\n$$\n\\frac{\\psi(t_{n+1}) - \\psi(t_n)}{\\Delta t} \\approx -i H(t_n)\\psi(t_n)\n$$\nRearranging this gives the propagation rule for the state vector from one time step to the next:\n$$\n\\psi(t_{n+1}) = \\psi(t_n) - i \\Delta t H(t_n) \\psi(t_n) = (I - i \\Delta t H(t_n)) \\psi(t_n)\n$$\nwhere $I$ is the $2 \\times 2$ identity matrix. The operator $U(t_n, \\Delta t) = I - i \\Delta t H(t_n)$ is the Forward Euler propagator. For a Hermitian Hamiltonian $H(t_n)$, this propagator is not unitary, meaning it does not conserve the norm of the state vector. The norm squared at the next step is $\\|\\psi(t_{n+1})\\|^2 = \\psi(t_n)^\\dagger (I + i \\Delta t H(t_n))(I - i \\Delta t H(t_n)) \\psi(t_n) = \\|\\psi(t_n)\\|^2 + (\\Delta t)^2 \\psi(t_n)^\\dagger H(t_n)^2 \\psi(t_n)$. Since $H(t_n)^2$ is positive semi-definite, the norm is guaranteed to be non-decreasing, $\\|\\psi(t_{n+1})\\| \\ge \\|\\psi(t_n)\\|$. The initial norm is $\\|\\psi(0)\\| = \\sqrt{1^2 + 0^2} = 1$. Any deviation of the norm from $1$ during the simulation is a direct result of the numerical integration error, which signals numerical instability. The growth of this error is expected to be more pronounced for larger time steps $\\Delta t$.\n\nThe simulation procedure for each test case is as follows:\n1. Initialize the system with the given parameters: $\\Delta = 0.5$, $\\mu = 0.2$, $E_0 = 0.05$, and the case-specific values for $\\omega$, $\\Delta t$, and $T$. The stability threshold is $\\varepsilon = 0.05$.\n2. Set the initial state vector to $\\psi = \\begin{pmatrix} 1+0i \\\\ 0+0i \\end{pmatrix}$.\n3. Initialize the maximal relative norm deviation, $\\delta_{\\max}$, to $0$.\n4. Determine the total number of time steps, $N = T/\\Delta t$.\n5. Iterate for $n$ from $0$ to $N$. In each iteration, corresponding to time $t_n = n \\Delta t$:\n    a. Compute the norm of the current state vector, $\\|\\psi(t_n)\\| = \\sqrt{\\psi(t_n)^\\dagger \\psi(t_n)}$.\n    b. Calculate the absolute deviation from unity, $|\\,\\|\\psi(t_n)\\| - 1\\,|$.\n    c. Update $\\delta_{\\max}$ to be the maximum of its current value and this new deviation.\n    d. If $n < N$, construct the Hamiltonian matrix $H(t_n)$ using $E(t_n) = E_0 \\sin(\\omega t_n)$:\n    $$\n    H(t_n) = \\begin{pmatrix} 0 & -\\mu E_0 \\sin(\\omega t_n) \\\\ -\\mu E_0 \\sin(\\omega t_n) & \\Delta \\end{pmatrix}\n    $$\n    e. Propagate the state vector to the next time step using the Forward Euler rule: $\\psi(t_{n+1}) = (I - i \\Delta t H(t_n)) \\psi(t_n)$.\n6. After the loop completes, classify the simulation's stability: it is 'stable' if $\\delta_{\\max} \\le \\varepsilon$ and 'unstable' otherwise.\n7. Check the condition for temporal undersampling (aliasing): this occurs if $\\omega > 0$ and $\\Delta t > \\pi/\\omega$.\n8. Assign an integer code based on the results:\n    - $0$ if the propagation is stable.\n    - $1$ if the propagation is unstable and the aliasing condition is met.\n    - $2$ if the propagation is unstable and the aliasing condition is not met.\n\nThis procedure is applied to each of the four test cases provided, and the resulting integer codes are collected.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Main function to run the TD-DFT simulations for all test cases\n    and print the results in the specified format.\n    \"\"\"\n\n    def run_simulation(omega, dt, T, delta, mu, E0, epsilon):\n        \"\"\"\n        Runs a single simulation for a given set of parameters.\n\n        Args:\n            omega: Field angular frequency (a.u.).\n            dt: Time step (a.u.).\n            T: Total simulation time (a.u.).\n            delta: Excited state energy (a.u.).\n            mu: Transition dipole (a.u.).\n            E0: Electric field amplitude (a.u.).\n            epsilon: Stability threshold for norm deviation.\n\n        Returns:\n            An integer code (0, 1, or 2) representing the outcome.\n        \"\"\"\n        # Ensure the number of steps is an integer\n        num_steps = round(T / dt)\n\n        # Initial state vector psi(0) = [1, 0]\n        psi = np.array([1.0 + 0j, 0.0 + 0j])\n\n        # 2x2 Identity matrix\n        I = np.identity(2, dtype=complex)\n\n        max_norm_deviation = 0.0\n\n        # Loop over time steps from t=0 to t=T\n        for n in range(num_steps + 1):\n            t = n * dt\n\n            # 1. Compute norm and update max deviation\n            # np.vdot is the conjugate dot product: psi_dagger * psi\n            norm = np.sqrt(np.vdot(psi, psi)).real\n            norm_deviation = abs(norm - 1.0)\n            if norm_deviation > max_norm_deviation:\n                max_norm_deviation = norm_deviation\n\n            # Break loop after the last state's norm is checked at t=T\n            if n == num_steps:\n                break\n\n            # 2. Construct the time-dependent Hamiltonian H(t)\n            E_t = E0 * np.sin(omega * t)\n            H_t = np.array([\n                [0.0, -mu * E_t],\n                [-mu * E_t, delta]\n            ], dtype=complex)\n\n            # 3. Propagate using the Explicit Forward Euler method\n            # psi(t + dt) = (I - i*dt*H(t)) * psi(t)\n            propagator = I - 1j * dt * H_t\n            psi = propagator @ psi\n\n        # 4. Classify the result\n        is_stable = (max_norm_deviation = epsilon)\n        \n        # Aliasing occurs if the time step is larger than half the field period\n        # Convention: no aliasing for omega = 0\n        is_aliasing = (omega > 0 and dt > np.pi / omega)\n\n        if is_stable:\n            return 0  # Stable\n        else:\n            if is_aliasing:\n                return 1  # Unstable and aliasing\n            else:\n                return 2  # Unstable, no aliasing\n\n    # Fixed physical parameters in atomic units\n    delta_param = 0.5\n    mu_param = 0.2\n    E0_param = 0.05\n    epsilon_param = 0.05\n\n    # Define the test cases from the problem statement.\n    # Each tuple is (omega, delta_t, T)\n    test_cases = [\n        (0.2, 0.05, 5.0),   # Case A\n        (4.0, 1.0, 5.0),   # Case B\n        (0.2, 0.5, 20.0),  # Case C\n        (10.0, 0.3, 1.2),  # Case D\n    ]\n\n    results = []\n    for case in test_cases:\n        omega_val, dt_val, T_val = case\n        result = run_simulation(omega_val, dt_val, T_val, delta_param, mu_param, E0_param, epsilon_param)\n        results.append(result)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2461360"}, {"introduction": "Armed with an understanding of stable propagation methods, we can now employ them to verify fundamental physical principles. This advanced exercise [@problem_id:2919764] challenges you to implement a robust, unitary split-operator propagator to demonstrate gauge invariance in the light-matter interaction. By performing parallel simulations in the length and velocity gauges and comparing key physical observables, you will numerically confirm that the predictions of quantum theory are independent of this mathematical choice, providing a rigorous test of your implementation.", "problem": "In this task you will implement a one-dimensional real-time propagation of a single Kohn–Sham orbital in Time-Dependent Density Functional Theory (TDDFT) under the dipole approximation, in both the length gauge and the velocity gauge, and use it to quantitatively demonstrate gauge consistency for observables. You must start from the Time-Dependent Schrödinger Equation (TDSE) for the single-electron Kohn–Sham orbital in atomic units. The system is a bound electron in a one-dimensional harmonic well. You must implement a numerically unitary propagation scheme in both gauges, compute observables, and compare the results to numerical precision.\n\nUse the following physical and mathematical base:\n- Atomic units: set $\\hbar = 1$, $m_e = 1$, and the electron charge $q = -1$.\n- Field-free Hamiltonian: $H_0 = \\frac{\\hat{p}^2}{2} + \\frac{1}{2}\\,\\omega_0^2\\,x^2$.\n- Length gauge Hamiltonian: $H_L(t) = \\frac{\\hat{p}^2}{2} + \\frac{1}{2}\\,\\omega_0^2\\,x^2 + x\\,E(t)$.\n- Velocity gauge Hamiltonian: $H_V(t) = \\frac{(\\hat{p} + A(t))^2}{2} + \\frac{1}{2}\\,\\omega_0^2\\,x^2$.\n- The electric field and vector potential are related by $E(t) = -\\frac{dA(t)}{dt}$.\n- The initial state is the harmonic oscillator ground state (normalized on the grid you choose): $\\psi(x,0) \\propto \\exp\\!\\left(-\\frac{\\omega_0 x^2}{2}\\right)$.\n\nImplement a split-operator propagation that ensures second-order accuracy in time and numerical unitarity, using a Fourier spectral representation for kinetic energy. You must use a midpoint evaluation in time for the explicitly time-dependent part of the Hamiltonian to ensure second-order accuracy for time-dependent fields. The spatial grid should be uniform, and Fast Fourier Transforms should be used to move between position and momentum representations.\n\nDefine the vector potential pulse on the finite time interval $t \\in [0, T]$ as\n$$\nA(t) = A_0 \\,\\sin^2\\!\\left(\\frac{\\pi t}{T}\\right)\\,\\sin(\\omega\\, t + \\phi),\n$$\nand set $E(t) = -\\frac{dA(t)}{dt}$ exactly by analytic differentiation. Outside the interval $[0,T]$ the field is zero. You must compute the following observables during propagation:\n- The time-dependent dipole $d(t) = \\langle x \\rangle_t$.\n- The field-free energy $E_0(t) = \\langle \\psi(t) | H_0 | \\psi(t) \\rangle$.\n- The absorbed energy with respect to the field-free Hamiltonian, $\\Delta E = E_0(T) - E_0(0)$.\n\nNumerically demonstrate gauge consistency by performing two propagations for each case: one with $H_L(t)$ using $E(t)$ and one with $H_V(t)$ using $A(t)$, starting from the same initial state. For each case, compute:\n- The maximum absolute deviation between the two dipole traces, $\\max_t |d_L(t) - d_V(t)|$.\n- The absolute difference in absorbed energy, $|\\Delta E_L - \\Delta E_V|$.\n\nAll quantities are in atomic units. No angles in degrees appear in the required output; if you internally use angles, take them in radians. Your program must implement the following test suite and produce a single-line output that aggregates all results. For each test case, you must use the indicated parameters and compute the two floats described above. The time step should be used as specified, but you must ensure that the total duration $T$ is a multiple of the time step by adjusting the effective step size to $T/N_t$ where $N_t$ is the nearest integer number of steps.\n\nSpatial discretization and common parameters for all cases:\n- Number of grid points $N_x = 1024$.\n- Box length $L = 40.0$ (so grid spacing is $dx = L/N_x$).\n- Harmonic frequency $\\omega_0 = 0.5$.\n\nFor each case, define $T = N_{\\text{cycles}} \\times \\frac{2\\pi}{\\omega}$ and propagate from $t = 0$ to $t = T$ with the given nominal time step $dt$ (adjusted as noted above).\n\nTest suite:\n- Case $1$ (happy path):\n  - Carrier frequency $\\omega = 0.7$.\n  - Number of cycles $N_{\\text{cycles}} = 6$.\n  - Vector potential amplitude $A_0 = 0.07142857142857142$.\n  - Carrier–envelope phase $\\phi = 0.0$.\n  - Nominal time step $dt = 0.02$.\n- Case $2$ (zero field edge case):\n  - Carrier frequency $\\omega = 0.7$.\n  - Number of cycles $N_{\\text{cycles}} = 6$.\n  - Vector potential amplitude $A_0 = 0.0$.\n  - Carrier–envelope phase $\\phi = 0.0$.\n  - Nominal time step $dt = 0.02$.\n- Case $3$ (stronger field and different phase):\n  - Carrier frequency $\\omega = 0.5$.\n  - Number of cycles $N_{\\text{cycles}} = 6$.\n  - Vector potential amplitude $A_0 = 0.3$.\n  - Carrier–envelope phase $\\phi = 1.0471975511965976$.\n  - Nominal time step $dt = 0.01$.\n\nRequired final output format:\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets. The list must contain, in order, for Case $1$ the maximum dipole deviation and the absorbed-energy difference, followed by the same two quantities for Case $2$, and then for Case $3$. For example, the output must look like\n\"[r1,r2,r3,r4,r5,r6]\"\nwith each $r_j$ a float. No other output is permitted.\n\nAll numerical values must be computed in atomic units, and the returned floats should be the raw numerical values (not rounded to a fixed number of decimals).", "solution": "The user has provided a problem that is scientifically grounded, well-posed, and complete. All necessary physical constants, mathematical equations, parameters, and numerical procedures are specified without ambiguity or contradiction. The problem requests the implementation of a standard numerical method (the Fourier split-operator method) to solve the time-dependent Schrödinger equation (TDSE) for a single particle in a harmonic potential under the influence of an external laser pulse. This is a canonical problem in the field of computational quantum dynamics.\n\nThe core of the problem lies in demonstrating the principle of gauge invariance for physical observables. Two separate simulations are required: one in the length gauge and one in the velocity gauge. The Hamiltonians provided for these two gauges, $H_L(t)$ and $H_V(t)$, are the standard, correct forms in atomic units. The relationship between the electric field $E(t)$ and the vector potential $A(t)$, $E(t) = -dA(t)/dt$, is fundamental. The problem also correctly specifies that a gauge transformation connects the wavefunctions in the two gauges, $\\psi_L(x,t) = \\exp(-ixA(t))\\psi_V(x,t)$, given that the charge $q=-1$.\n\nPhysical observables are only meaningful if they are gauge-invariant. The dipole moment, $d(t) = \\langle \\psi(t) | \\hat{x} | \\psi(t) \\rangle$, is an expectation value of a position-dependent operator, which is gauge-invariant. The absorbed energy, $\\Delta E = E_0(T) - E_0(0)$, is also gauge-invariant provided the vector potential $A(t)$ vanishes at the start ($t=0$) and end ($t=T$) of the pulse, which is true for the given pulse shape $A(t) = A_0 \\sin^2(\\pi t/T) \\sin(\\omega t + \\phi)$. Since $A(0)=A(T)=0$, the gauge transformation factor is unity at these times, meaning $\\psi_L(0) = \\psi_V(0)$ and $\\psi_L(T) = \\psi_V(T)$. Consequently, the expectation value of the field-free Hamiltonian $H_0$, which defines $E_0(t)$, must be the same in both gauges at $t=0$ and $t=T$. Therefore, $\\Delta E_L$ and $\\Delta E_V$ must be identical in an exact calculation.\n\nThe problem is to numerically verify these theoretical equivalences. Any computed difference will be a measure of the numerical error introduced by the time-stepping algorithm and spatial discretization. The specified split-operator method is an appropriate choice as it is unitary and second-order accurate in the time step $dt$.\n\nThe solution involves the following steps:\n1.  **Discretization**: A uniform spatial grid for the position coordinate $x$ and a corresponding momentum grid $k$ are established. The momentum grid is determined via the Fast Fourier Transform (FFT) relations.\n2.  **Initial State**: The initial wavefunction $\\psi(x,t=0)$ is the normalized ground state of the one-dimensional quantum harmonic oscillator.\n3.  **Hamiltonian Operators**: The kinetic energy operator $\\hat{T} = \\hat{p}^2/2$ is represented as a diagonal operator $k^2/2$ in momentum space. The potential energy operators are diagonal in position space.\n4.  **Time Propagation**: A symmetric second-order split-operator (Strang splitting) scheme is implemented. The scheme for a Hamiltonian $H = \\hat{T} + \\hat{V}(t)$ is:\n    $$\n    \\psi(t+dt) \\approx e^{-i \\hat{V}(t+dt/2) dt/2} \\, e^{-i \\hat{T} dt} \\, e^{-i \\hat{V}(t+dt/2) dt/2} \\psi(t)\n    $$\n    The operators $e^{-i\\hat{V}dt/2}$ are applied in position space, and $e^{-i\\hat{T}dt}$ is applied in momentum space, with FFTs used to switch between representations. The time-dependent potential is evaluated at the midpoint of the time interval, $t+dt/2$, to maintain second-order accuracy.\n    *   **Length Gauge**: The potential operator is $V_L(x,t) = \\frac{1}{2}\\omega_0^2 x^2 + x E(t)$.\n    *   **Velocity Gauge**: The splitting is between the position-dependent potential $V_0(x) = \\frac{1}{2}\\omega_0^2 x^2$ and the time-dependent kinetic operator $T_V(k,t) = \\frac{(k+A(t))^2}{2}$. The propagator is:\n        $$\n        \\psi(t+dt) \\approx e^{-i \\hat{V}_0 dt/2} \\, e^{-i \\hat{T}_V(t+dt/2) dt} \\, e^{-i \\hat{V}_0 dt/2} \\psi(t)\n        $$\n5.  **Observables**: At each time step, the dipole moment $d(t) = \\int \\psi^*(x,t) x \\psi(x,t) dx$ and the field-free energy $E_0(t) = \\langle \\psi(t) | H_0 | \\psi(t) \\rangle$ are computed. The kinetic energy term in $E_0(t)$ is calculated in momentum space using Parseval's theorem.\n6.  **Comparison**: After completing the propagations from $t=0$ to $t=T$ for both gauges, the maximum absolute deviation between the dipole moment traces, $\\max_t |d_L(t) - d_V(t)|$, and the absolute difference in the total absorbed energy, $|\\Delta E_L - \\Delta E_V|$, are calculated for each test case.\n\nThe implementation will proceed by defining a function that takes the parameters for one test case, performs both gauge propagations, and returns the two required metrics. This function will be called for each of the three specified test cases to generate the final output.", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Main function to run the test suite and print results.\n    \"\"\"\n\n    def run_simulation(case_params):\n        \"\"\"\n        Performs the TDDFT propagation in both length and velocity gauges for a single test case.\n        \"\"\"\n        # Unpack parameters\n        omega, N_cycles, A0, phi, dt_nominal = case_params\n        \n        # Fixed physical and grid parameters\n        Nx = 1024\n        L = 40.0\n        omega0 = 0.5\n\n        # 1. Setup Grid and Time\n        dx = L / Nx\n        x = np.linspace(-L/2, L/2, Nx, endpoint=False)\n        k = 2 * np.pi * np.fft.fftfreq(Nx, d=dx)\n        \n        if omega == 0.0:\n            T = 0.0\n        else:\n            T = N_cycles * 2 * np.pi / omega\n        \n        if T == 0.0 or dt_nominal == 0.0:\n            Nt = 0\n            dt = 0.0\n        else:\n            Nt = int(round(T / dt_nominal))\n            if Nt == 0 and T > 0: Nt = 1\n            dt = T / Nt\n        \n        time_points = np.linspace(0, T, Nt + 1)\n        \n        # 2. Define External Fields\n        def A_field(t):\n            if 0  t  T:\n                return A0 * (np.sin(np.pi * t / T)**2) * np.sin(omega * t + phi)\n            return 0.0\n\n        def E_field(t):\n            if 0  t  T:\n                s_pi_t_T = np.sin(np.pi * t / T)\n                s_om_t_p = np.sin(omega * t + phi)\n                c_om_t_p = np.cos(omega * t + phi)\n                s_2pi_t_T = np.sin(2 * np.pi * t / T)\n                \n                term1 = (np.pi / T) * s_2pi_t_T * s_om_t_p\n                term2 = omega * (s_pi_t_T**2) * c_om_t_p\n                return -A0 * (term1 + term2)\n            return 0.0\n            \n        # 3. Initial State\n        psi0 = (omega0 / np.pi)**0.25 * np.exp(-0.5 * omega0 * x**2)\n        psi0 /= np.sqrt(np.sum(np.abs(psi0)**2) * dx)\n        psi0 = psi0.astype(np.complex128)\n        \n        # 4. Operators and Helper Functions\n        V0_op = 0.5 * omega0**2 * x**2\n        T_op_k_space = 0.5 * k**2\n        \n        def calculate_E0(psi):\n            psi_k = np.fft.fft(psi)\n            kin_energy = (dx**2 / L) * np.sum(T_op_k_space * np.abs(psi_k)**2)\n            pot_energy = np.sum(V0_op * np.abs(psi)**2) * dx\n            return np.real(kin_energy + pot_energy)\n\n        if Nt == 0:\n            return 0.0, 0.0\n\n        # ==========================\n        # LENGTH GAUGE PROPAGATION\n        # ==========================\n        psi_L = np.copy(psi0)\n        dipole_L = np.zeros(Nt + 1)\n        energy_L = np.zeros(Nt + 1)\n        \n        dipole_L[0] = np.sum(x * np.abs(psi_L)**2) * dx\n        energy_L[0] = calculate_E0(psi_L)\n\n        exp_T_prop = np.exp(-1j * T_op_k_space * dt)\n\n        for i in range(Nt):\n            t_mid = time_points[i] + dt / 2.0\n            \n            E_mid = E_field(t_mid)\n            V_L_mid = V0_op + x * E_mid\n            exp_V_prop_half = np.exp(-1j * V_L_mid * dt / 2.0)\n            \n            psi_L *= exp_V_prop_half\n            psi_L = np.fft.ifft(np.fft.fft(psi_L) * exp_T_prop)\n            psi_L *= exp_V_prop_half\n            \n            dipole_L[i+1] = np.sum(x * np.abs(psi_L)**2) * dx\n            energy_L[i+1] = calculate_E0(psi_L)\n\n        # ==========================\n        # VELOCITY GAUGE PROPAGATION\n        # ==========================\n        psi_V = np.copy(psi0)\n        dipole_V = np.zeros(Nt + 1)\n        energy_V = np.zeros(Nt + 1)\n\n        dipole_V[0] = np.sum(x * np.abs(psi_V)**2) * dx\n        energy_V[0] = calculate_E0(psi_V)\n        \n        exp_V0_prop_half = np.exp(-1j * V0_op * dt / 2.0)\n\n        for i in range(Nt):\n            t_mid = time_points[i] + dt / 2.0\n            \n            A_mid = A_field(t_mid)\n            T_V_op = 0.5 * (k + A_mid)**2\n            exp_T_V_prop = np.exp(-1j * T_V_op * dt)\n\n            psi_V *= exp_V0_prop_half\n            psi_V = np.fft.ifft(np.fft.fft(psi_V) * exp_T_V_prop)\n            psi_V *= exp_V0_prop_half\n            \n            dipole_V[i+1] = np.sum(x * np.abs(psi_V)**2) * dx\n            energy_V[i+1] = calculate_E0(psi_V)\n        \n        # 5. Final Metrics Calculation\n        delta_E_L = energy_L[-1] - energy_L[0]\n        delta_E_V = energy_V[-1] - energy_V[0]\n        \n        max_dipole_deviation = np.max(np.abs(dipole_L - dipole_V))\n        abs_energy_difference = np.abs(delta_E_L - delta_E_V)\n        \n        return max_dipole_deviation, abs_energy_difference\n\n    # Define the test cases from the problem statement.\n    test_cases = [\n        # Case 1 (happy path)\n        (0.7, 6, 0.07142857142857142, 0.0, 0.02),\n        # Case 2 (zero field edge case)\n        (0.7, 6, 0.0, 0.0, 0.02),\n        # Case 3 (stronger field and different phase)\n        (0.5, 6, 0.3, 1.0471975511965976, 0.01),\n    ]\n\n    results = []\n    for case in test_cases:\n        res1, res2 = run_simulation(case)\n        results.append(res1)\n        results.append(res2)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2919764"}]}