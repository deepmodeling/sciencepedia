{"hands_on_practices": [{"introduction": "This practice focuses on the kinetic energy cutoff, $E_{\\text{cut}}$, which determines the size of the plane-wave basis set. Achieving convergence with respect to $E_{\\text{cut}}$ is a foundational step in any reliable calculation. This exercise will guide you through analyzing the systematic error introduced by a finite basis set and using Richardson extrapolation to estimate the converged, complete basis set limit, a powerful technique that relies on the predictable asymptotic behavior of the total energy [@problem_id:2915094].", "problem": "A plane-wave Density Functional Theory (DFT) calculation with norm-conserving pseudopotentials is performed for two closely related configurations, denoted $A$ and $B$, in the same fixed cell and at the same $k$-point sampling. Let $E_{\\text{cut}}$ denote the kinetic energy cutoff. Assume the total energy for each configuration admits an asymptotic expansion in the high-cutoff regime of the form\n$$\nE_X(E_{\\text{cut}}) \\;=\\; E_X^{(\\infty)} \\;+\\; A_X\\,E_{\\text{cut}}^{-p} \\;+\\; B_X\\,E_{\\text{cut}}^{-(p+1)} \\;+\\; \\dots,\n$$\nwith $X \\in \\{A,B\\}$, $p>0$, and coefficients $A_X, B_X$ independent of $E_{\\text{cut}}$.\n\nYou are given three calculations at geometrically spaced cutoffs $E_1$, $E_2$, $E_3$ with a common ratio $r \\equiv E_2/E_1 = E_3/E_2$, namely $E_1 = 20$ Rydberg (Ry), $E_2 = 30$ Ry, $E_3 = 45$ Ry, for both configurations. The reported total energies (in electronvolts, eV) are:\n- Configuration $A$: $E_A(20) = -154.196$, $E_A(30) = -154.26544444444445$, $E_A(45) = -154.2963086419753$.\n- Configuration $B$: $E_B(20) = -154.1125$, $E_B(30) = -154.17777777777778$, $E_B(45) = -154.2067901234568$.\n\nStarting from the asymptotic model above and the variational character of plane-wave expansions, do the following:\n1. Using only the leading term $A_X E_{\\text{cut}}^{-p}$, derive a two-cutoff Richardson extrapolation formula that eliminates $A_X$ to estimate $E_X^{(\\infty)}$ from $E_X(E)$ and $E_X(rE)$ for a known exponent $p$. Then, using three geometrically spaced cutoffs, derive an estimator for $p$ in terms of ratios of successive energy differences.\n2. For the energy difference $\\Delta E(E_{\\text{cut}}) \\equiv E_B(E_{\\text{cut}}) - E_A(E_{\\text{cut}})$, derive the leading-order truncation error and show explicitly the condition under which the leading error cancels. State the resulting residual leading-order error when the exponents for $A$ and $B$ are equal, $p_A = p_B = p$, but the amplitudes differ, $A_B \\neq A_A$.\n3. Using the dataset above, estimate $p$ and the difference $\\Delta A \\equiv A_B - A_A$ from the three-cutoff data. Then, evaluate the magnitude of the leading-order truncation error in $\\Delta E$ at $E_{\\text{cut}} = 45$ Ry, expressed in millielectronvolts (meV). Round your final answer to four significant figures. Provide only a single number as your final answer.", "solution": "We begin by a strict validation of the problem statement.\n\n**Step 1: Extract Givens**\nThe problem provides the following information:\n- An asymptotic expansion for the total energy $E_X$ of configuration $X \\in \\{A, B\\}$ as a function of the kinetic energy cutoff $E_{\\text{cut}}$:\n$$E_X(E_{\\text{cut}}) = E_X^{(\\infty)} + A_X E_{\\text{cut}}^{-p} + B_X E_{\\text{cut}}^{-(p+1)} + \\dots$$\n- The exponent $p$ is positive, $p>0$.\n- The coefficients $A_X, B_X$ are independent of $E_{\\text{cut}}$.\n- Three calculations are performed at geometrically spaced cutoffs: $E_1 = 20$ Rydberg (Ry), $E_2 = 30$ Ry, and $E_3 = 45$ Ry.\n- The common ratio of the cutoffs is $r = E_2/E_1 = E_3/E_2 = 1.5$.\n- The total energies in electronvolts (eV) are:\n  - Configuration $A$: $E_A(20) = -154.196$, $E_A(30) = -154.26544444444445$, $E_A(45) = -154.2963086419753$.\n  - Configuration $B$: $E_B(20) = -154.1125$, $E_B(30) = -154.17777777777778$, $E_B(45) = -154.2067901234568$.\n\n**Step 2: Validate Using Extracted Givens**\n- **Scientifically Grounded:** The problem describes the convergence of total energy in a plane-wave basis set calculation, a fundamental topic in computational quantum chemistry and materials science. The asymptotic form provided is a standard model for the convergence of energy with respect to the kinetic energy cutoff, particularly for norm-conserving pseudopotentials. The variational nature of plane-wave calculations implies that the energy should decrease as the cutoff increases, which is consistent with the provided data for both configurations $A$ and $B$. The problem is scientifically sound and based on established principles.\n- **Well-Posed:** The problem provides a clear model, all necessary numerical data, and a sequence of well-defined tasks. It is self-contained and structured to lead to a unique solution.\n- **Objective:** The problem is stated in precise, quantitative terms, free from ambiguity or subjective content.\n\n**Step 3: Verdict and Action**\nThe problem is scientifically valid, self-consistent, and well-posed. We shall proceed to the solution.\n\n**Part 1: Derivation of Extrapolation Formulas**\n\nWe consider the truncated asymptotic model, keeping only the leading error term:\n$$E(E_{\\text{cut}}) \\approx E^{(\\infty)} + A E_{\\text{cut}}^{-p}$$\nFor two cutoffs, $E$ and $rE$, we have a system of two equations:\n$$\n\\begin{cases}\nE(E) &\\approx E^{(\\infty)} + A E^{-p} \\\\\nE(rE) &\\approx E^{(\\infty)} + A (rE)^{-p} = E^{(\\infty)} + A r^{-p} E^{-p}\n\\end{cases}\n$$\nTo eliminate the term containing $A$, we multiply the second equation by $r^p$ and subtract the first equation:\n$$r^p E(rE) - E(E) \\approx r^p E^{(\\infty)} - E^{(\\infty)} = (r^p-1)E^{(\\infty)}$$\nSolving for $E^{(\\infty)}$ yields the two-cutoff Richardson extrapolation formula:\n$$E^{(\\infty)} \\approx \\frac{r^p E(rE) - E(E)}{r^p - 1}$$\nNext, to find an estimator for the exponent $p$, we use three geometrically spaced cutoffs: $E_1$, $E_2=rE_1$, and $E_3=rE_2=r^2E_1$. We define the successive energy differences:\n$$\\delta_1 \\equiv E(E_2) - E(E_1) \\approx (E^{(\\infty)} + A E_2^{-p}) - (E^{(\\infty)} + A E_1^{-p}) = A(E_2^{-p} - E_1^{-p}) = A E_1^{-p} (r^{-p}-1)$$\n$$\\delta_2 \\equiv E(E_3) - E(E_2) \\approx (E^{(\\infty)} + A E_3^{-p}) - (E^{(\\infty)} + A E_2^{-p}) = A(E_3^{-p} - E_2^{-p}) = A E_2^{-p} (r^{-p}-1) = A (rE_1)^{-p} (r^{-p}-1)$$\nThe ratio of these differences eliminates the unknown amplitude $A$:\n$$\\frac{\\delta_2}{\\delta_1} \\approx \\frac{A (rE_1)^{-p} (r^{-p}-1)}{A E_1^{-p} (r^{-p}-1)} = r^{-p}$$\nSolving for $p$ gives the estimator:\n$$-p \\ln(r) = \\ln\\left(\\frac{\\delta_2}{\\delta_1}\\right) \\implies p = -\\frac{\\ln(\\delta_2/\\delta_1)}{\\ln(r)} = \\frac{\\ln(\\delta_1/\\delta_2)}{\\ln(r)}$$\nThus, the estimator is $p \\approx \\frac{\\ln\\left( \\frac{E(E_2)-E(E_1)}{E(E_3)-E(E_2)} \\right)}{\\ln(r)}$.\n\n**Part 2: Analysis of Truncation Error in Energy Difference**\n\nThe energy difference is defined as $\\Delta E(E_{\\text{cut}}) \\equiv E_B(E_{\\text{cut}}) - E_A(E_{\\text{cut}})$. Using the provided expansion:\n$$ \\Delta E(E_{\\text{cut}}) = (E_B^{(\\infty)} - E_A^{(\\infty)}) + (A_B E_{\\text{cut}}^{-p_B} - A_A E_{\\text{cut}}^{-p_A}) + (B_B E_{\\text{cut}}^{-(p_B+1)} - B_A E_{\\text{cut}}^{-(p_A+1)}) + \\dots $$\nThe truncation error is the difference between the calculated value $\\Delta E(E_{\\text{cut}})$ and the converged value $\\Delta E^{(\\infty)} = E_B^{(\\infty)} - E_A^{(\\infty)}$:\n$$ \\text{Error}(\\Delta E) = \\Delta E(E_{\\text{cut}}) - \\Delta E^{(\\infty)} = (A_B E_{\\text{cut}}^{-p_B} - A_A E_{\\text{cut}}^{-p_A}) + \\dots $$\nThe leading-order truncation error is the term that decays most slowly as $E_{\\text{cut}} \\to \\infty$. Assuming without loss of generality that $p_A \\le p_B$, the leading term is $-A_A E_{\\text{cut}}^{-p_A}$ if $p_A < p_B$, and $(A_B-A_A)E_{\\text{cut}}^{-p}$ if $p_A = p_B = p$.\n\nThe leading error term $(A_B E_{\\text{cut}}^{-p_B} - A_A E_{\\text{cut}}^{-p_A})$ is cancelled if and only if the exponents are identical ($p_A = p_B = p$) and the amplitudes are identical ($A_A = A_B$). Under these conditions, the error in the energy difference converges faster than the error in the individual energies.\n\nThe problem asks for the residual leading-order error when $p_A = p_B = p$ and $A_B \\neq A_A$. In this case, the first-order error term does not cancel, and the leading-order truncation error is explicitly:\n$$ \\text{Error}_{\\text{LO}}(\\Delta E) = (A_B - A_A) E_{\\text{cut}}^{-p} $$\n\n**Part 3: Numerical Estimation**\n\nWe first estimate the exponent $p$ using the data for the energy difference $\\Delta E(E_{\\text{cut}})$. Let's denote $E_1=20$ Ry, $E_2=30$ Ry, $E_3=45$ Ry.\n$$ \\Delta E(E_1) = E_B(20) - E_A(20) = -154.1125 - (-154.196) = 0.0835 \\text{ eV} $$\n$$ \\Delta E(E_2) = E_B(30) - E_A(30) = -154.177777... - (-154.265444...) = 0.087666... \\text{ eV} $$\n$$ \\Delta E(E_3) = E_B(45) - E_A(45) = -154.206790... - (-154.296308...) = 0.089518... \\text{ eV} $$\nWe compute the successive differences for $\\Delta E$:\n$$ \\delta_1(\\Delta E) = \\Delta E(E_2) - \\Delta E(E_1) = 0.087666... - 0.0835 = 0.0041666... = \\frac{1}{240} \\text{ eV} $$\n$$ \\delta_2(\\Delta E) = \\Delta E(E_3) - \\Delta E(E_2) = 0.089518... - 0.087666... = 0.0018518... = \\frac{1}{540} \\text{ eV} $$\nThe ratio of these differences is:\n$$ \\frac{\\delta_2(\\Delta E)}{\\delta_1(\\Delta E)} = \\frac{1/540}{1/240} = \\frac{240}{540} = \\frac{4}{9} $$\nThe common ratio of the cutoffs is $r = 1.5 = 3/2$. Using the estimator for $p$:\n$$ p = \\frac{\\ln(\\delta_1/\\delta_2)}{\\ln(r)} = \\frac{\\ln(9/4)}{\\ln(3/2)} = \\frac{\\ln((3/2)^2)}{\\ln(3/2)} = \\frac{2 \\ln(3/2)}{\\ln(3/2)} = 2 $$\nThe exponent for the convergence is $p=2$.\n\nNext, we estimate the difference in amplitudes, $\\Delta A \\equiv A_B - A_A$. From Part 1, we have $\\delta_1(\\Delta E) = \\Delta A \\cdot E_1^{-p} (r^{-p}-1)$. We solve for $\\Delta A$:\n$$ \\Delta A = \\frac{\\delta_1(\\Delta E)}{E_1^{-p} (r^{-p}-1)} $$\nSubstituting the known values: $\\delta_1(\\Delta E) = 1/240$ eV, $E_1 = 20$ Ry, $p=2$, and $r=1.5$.\n$$ \\Delta A = \\frac{1/240 \\text{ eV}}{(20 \\text{ Ry})^{-2} ((1.5)^{-2}-1)} = \\frac{1/240}{(1/400)} \\frac{1}{((2/3)^2-1)} \\text{ eV} \\cdot \\text{Ry}^2 $$\n$$ \\Delta A = \\frac{400}{240} \\frac{1}{(4/9-1)} = \\frac{5}{3} \\frac{1}{(-5/9)} = \\frac{5}{3} \\left(-\\frac{9}{5}\\right) = -3 \\text{ eV} \\cdot \\text{Ry}^2 $$\n\nFinally, we evaluate the magnitude of the leading-order truncation error in $\\Delta E$ at $E_{\\text{cut}} = 45$ Ry.\n$$ \\text{Error}_{\\text{LO}}(\\Delta E) = \\Delta A \\cdot E_{\\text{cut}}^{-p} $$\nAt $E_{\\text{cut}} = 45$ Ry:\n$$ \\text{Error}_{\\text{LO}}(\\Delta E, 45 \\text{ Ry}) = (-3 \\text{ eV} \\cdot \\text{Ry}^2) \\cdot (45 \\text{ Ry})^{-2} = \\frac{-3}{45^2} \\text{ eV} = \\frac{-3}{2025} \\text{ eV} = -\\frac{1}{675} \\text{ eV} $$\nThe magnitude of this error is $|-1/675| = 1/675$ eV. The problem requires the answer in millielectronvolts (meV).\n$$ |\\text{Error}| = \\frac{1}{675} \\text{ eV} \\times \\frac{1000 \\text{ meV}}{1 \\text{ eV}} = \\frac{1000}{675} \\text{ meV} = \\frac{40}{27} \\text{ meV} $$\nNumerically, this value is approximately $1.481481...$ meV. Rounding to four significant figures gives $1.481$ meV.", "answer": "$$\n\\boxed{1.481}\n$$", "id": "2915094"}, {"introduction": "After the basis set, the second critical numerical parameter is the sampling of the Brillouin zone, controlled by the density of the $k$-point mesh. For metallic systems, this is complicated by the sharp discontinuity at the Fermi surface, which is handled numerically by introducing an electronic \"smearing\". This hands-on coding exercise lets you explore the interplay between $k$-point density and smearing width by building a simple free-electron model from scratch, providing direct insight into the trade-offs required for accurate and efficient calculations [@problem_id:2915098].", "problem": "You will write a complete, runnable program that models a three-dimensional free-electron metal within the plane-wave formalism and periodic boundary conditions, using an \"empty\" pseudopotential (zero potential) so that only the kinetic energy contributes. The objective is to study how the total energy per electron converges with respect to the density of $k$-point sampling for different electronic smearing widths, and then to identify an optimal balance between smearing and $k$-point sampling to achieve a specified target accuracy at minimal cost.\n\nBegin from first principles, using the following physically and numerically well-defined base:\n- The Kohn–Sham (KS) single-particle Hamiltonian for a free electron (empty pseudopotential) in atomic units (Hartree atomic units: $\\hbar = 1$, $m_e = 1$, $e = 1$) gives single-particle energies $\\varepsilon(\\mathbf{k}) = \\lvert \\mathbf{k} \\rvert^2 / 2$.\n- The periodic cell is a cube of edge length $a$ and volume $V = a^3$, with a simple cubic reciprocal lattice and first Brillouin zone (BZ) given by $\\mathbf{k} \\in [-\\pi/a, \\pi/a)^3$.\n- The Brillouin-zone integrals are approximated by a uniform $\\Gamma$-centered Monkhorst–Pack (MP) grid (Monkhorst–Pack (MP)) with $g$ points along each reciprocal axis, for a total of $N_k = g^3$ points with equal weights $w_{\\mathbf{k}} = 1/N_k$. Use a half-shifted, uniform grid that avoids placing points exactly at the zone boundary: for each Cartesian component, use points $k_i = -\\pi/a + (i + 1/2)\\Delta k$ with $\\Delta k = 2\\pi/(ag)$ and $i = 0, 1, \\dots, g-1$.\n- Spin degeneracy is $g_s = 2$, so the occupancy is $f(\\varepsilon, \\mu, \\sigma) = 1 / \\left( 1 + \\exp\\left( (\\varepsilon - \\mu)/\\sigma \\right) \\right)$, which is the Fermi–Dirac distribution at an electronic smearing width $\\sigma$ measured in Hartree (the role analogous to $k_B T$). The chemical potential $\\mu$ is determined by enforcing the total number of electrons per cell $N_e$ through the normalization constraint $g_s \\sum_{\\mathbf{k}} w_{\\mathbf{k}} f(\\varepsilon_{\\mathbf{k}}, \\mu, \\sigma) = N_e$.\n- The internal total energy per electron in this model equals the kinetic energy per electron, given by $E_{\\mathrm{num}} = \\dfrac{g_s \\sum_{\\mathbf{k}} w_{\\mathbf{k}} f(\\varepsilon_{\\mathbf{k}}, \\mu, \\sigma)\\, \\varepsilon_{\\mathbf{k}}}{N_e}$.\n- For the test parameters specified below, ensure that the Fermi sphere lies within the first Brillouin zone so that only the lowest free-electron branch $\\varepsilon(\\mathbf{k}) = \\lvert \\mathbf{k} \\rvert^2 / 2$ contributes. This is guaranteed by the chosen $N_e$ and $a$.\n- The exact zero-temperature reference energy per electron for a three-dimensional homogeneous free-electron gas is $E_{\\mathrm{exact}} = \\dfrac{3}{5} E_F$, where $E_F = k_F^2/2$ and $k_F = (3 \\pi^2 n)^{1/3}$ with electron number density $n = N_e / V$.\n\nYour program must:\n1) Implement the $k$-point summation as a Riemann sum over the MP grid and determine $\\mu$ by solving the electron-number constraint for given $g$ and $\\sigma$ using a robust root-finding procedure.\n2) Compute the internal total energy per electron $E_{\\mathrm{num}}$ and the absolute error $\\lvert E_{\\mathrm{num}} - E_{\\mathrm{exact}} \\rvert$ in Hartree for each test case.\n3) Search over a prescribed discrete set of $(g, \\sigma)$ pairs to find the combination that achieves an absolute error below a specified tolerance with the smallest number of $k$-points $N_k = g^3$. If no pair meets the tolerance, select the pair with the smallest attained absolute error and report that.\n\nUse the following fixed physical parameters (in Hartree atomic units) for all computations:\n- Cubic cell edge length $a = 20$ bohr (so $V = a^3$).\n- Total electrons per cell $N_e = 1$.\n- Spin degeneracy $g_s = 2$.\n\nCompute the exact reference energy using the formulas above from $n = N_e/V$ and $k_F = (3 \\pi^2 n)^{1/3}$.\n\nNumerical details and requirements:\n- Use the half-shifted uniform MP grid described above for each tested $g$.\n- Use Fermi–Dirac smearing with width $\\sigma$ (in Hartree). Do not use a zero smearing width.\n- Determine the chemical potential $\\mu$ for each $(g,\\sigma)$ by solving the electron-number equation $g_s \\sum_{\\mathbf{k}} w_{\\mathbf{k}} f(\\varepsilon_{\\mathbf{k}}, \\mu, \\sigma) = N_e$ via a bracketing method such as bisection to guarantee convergence for all $\\sigma > 0$.\n- Compute $E_{\\mathrm{num}}$ and the absolute error $\\lvert E_{\\mathrm{num}} - E_{\\mathrm{exact}} \\rvert$ for each test case.\n- All energies must be reported in Hartree. Angles do not arise. No percentages are used.\n\nTest suite:\n- For convergence illustrations, evaluate the absolute error for the following $8$ test cases $(g, \\sigma)$ (with $\\sigma$ in Hartree): $(4, 0.002)$, $(6, 0.002)$, $(8, 0.002)$, $(12, 0.002)$, $(4, 0.01)$, $(6, 0.01)$, $(8, 0.01)$, $(12, 0.01)$.\n- For the optimal balance search, use the candidate sets $g \\in \\{4, 6, 8, 10, 12, 16\\}$ and $\\sigma \\in \\{0.002, 0.01, 0.05\\}$ with the tolerance $\\tau = 10^{-3}$ Hartree. The optimal pair is the one that first meets the condition $\\lvert E_{\\mathrm{num}} - E_{\\mathrm{exact}} \\rvert \\le \\tau$ when scanning in order of increasing $N_k = g^3$; if none meet the tolerance, select the pair with the smallest error.\n\nFinal output format:\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, with no spaces.\n- The first $8$ entries must be the absolute errors (in Hartree) for the $8$ test cases listed above, reported as floating-point numbers.\n- The final $4$ entries must report, in this order: the optimal $g$ as an integer, the optimal $\\sigma$ (in Hartree) as a floating-point number, the corresponding $N_k = g^3$ as an integer, and the achieved absolute error (in Hartree) as a floating-point number. Thus the total length of the output list is $12$ entries.\n- Example of the required output format shape (not actual numbers): $[e_1,e_2,\\dots,e_8,g_{\\mathrm{opt}},\\sigma_{\\mathrm{opt}},N_{k,\\mathrm{opt}},e_{\\mathrm{opt}}]$.\n\nScientific plausibility and derivation expectations:\n- Justify that, with $a$ and $N_e$ as given, the Fermi sphere lies strictly within the first Brillouin zone, so that $\\varepsilon(\\mathbf{k}) = \\lvert \\mathbf{k} \\rvert^2/2$ suffices without considering higher reciprocal-lattice translations. Explain why the internal energy per electron equals the kinetic energy per electron in this empty-pseudopotential limit.\n- Argue, using the Fermi–Dirac distribution and Mermin’s finite-temperature formalism (at the level of definitions), why a finite $\\sigma$ introduces a controllable bias in $E_{\\mathrm{num}}$ but reduces quadrature error in the $k$-point sum, leading to a trade-off that the optimal-balance search must resolve.\n\nAll mathematical symbols, variables, functions, operators, and numbers in this problem statement are to be written in LaTeX, using inline math delimiters, and all energies must be expressed in Hartree as required above. Your implementation must adhere to the execution environment and library constraints defined later and must not read external input.", "solution": "We model a three-dimensional free-electron metal within the plane-wave framework in atomic units, adopting an empty pseudopotential so the Kohn–Sham (KS) Hamiltonian reduces to the kinetic operator. The Bloch-wave single-particle dispersion is $\\varepsilon(\\mathbf{k}) = \\lvert \\mathbf{k} \\rvert^2/2$. The cubic cell has edge $a$ and volume $V = a^3$. The first Brillouin zone (BZ) for a simple cubic lattice is a cube $\\mathbf{k} \\in [-\\pi/a,\\pi/a)^3$.\n\nFoundational derivation:\n1) Plane-wave basis and empty pseudopotential. In Hartree atomic units, the KS Hamiltonian for a free electron is $\\hat{H} = -\\nabla^2/2$. The eigenfunctions are plane waves $\\exp(i \\mathbf{k} \\cdot \\mathbf{r})$ with eigenvalues $\\varepsilon(\\mathbf{k}) = \\lvert \\mathbf{k} \\rvert^2/2$. With a periodic supercell, $\\mathbf{k}$ is restricted to the first BZ and integrals over the BZ give observables per cell.\n\n2) Occupations at finite smearing. At an electronic smearing width $\\sigma$ (Fermi–Dirac, occupying the role of $k_B T$), the occupation is $f(\\varepsilon,\\mu,\\sigma) = \\big(1 + \\exp((\\varepsilon - \\mu)/\\sigma)\\big)^{-1}$, where $\\mu$ is set by the electron-number constraint. For spin-degenerate electrons with degeneracy $g_s = 2$, the number per cell is\n$$\nN_e = g_s \\int_{\\mathrm{BZ}} \\frac{d^3 k}{\\Omega_{\\mathrm{BZ}}}\\, f\\big(\\varepsilon(\\mathbf{k}),\\mu,\\sigma\\big),\n$$\nwhere $\\Omega_{\\mathrm{BZ}}$ is the BZ volume. Numerically, we replace the integral by a uniform $\\Gamma$-centered Monkhorst–Pack (MP) grid with $g$ points per axis, $N_k = g^3$ total points and equal weights $w_{\\mathbf{k}} = 1/N_k$. We adopt a half-shift so that points do not sit on the zone boundary:\n$$\nk_i = -\\frac{\\pi}{a} + \\left(i + \\frac{1}{2}\\right)\\Delta k,\\quad \\Delta k = \\frac{2\\pi}{a g},\\quad i = 0,1,\\dots,g-1.\n$$\nThe discrete electron-number constraint becomes\n$$\nN_e = g_s \\sum_{\\mathbf{k}} w_{\\mathbf{k}} f\\big(\\varepsilon(\\mathbf{k}),\\mu,\\sigma\\big) = g_s \\frac{1}{N_k} \\sum_{\\mathbf{k}} f\\big(\\varepsilon(\\mathbf{k}),\\mu,\\sigma\\big).\n$$\nThis monotone equation in $\\mu$ is solved robustly by bisection, because as $\\mu \\to -\\infty$, $f\\to 0$ and the sum vanishes, while as $\\mu \\to +\\infty$, $f\\to 1$ and the sum approaches $g_s$; hence a solution exists for any $N_e \\in (0,g_s)$.\n\n3) Internal total energy per electron. In the empty-pseudopotential limit, the internal total energy equals the kinetic energy. The discrete estimator is\n$$\nE_{\\mathrm{num}} = \\frac{g_s \\sum_{\\mathbf{k}} w_{\\mathbf{k}} f\\big(\\varepsilon(\\mathbf{k}),\\mu,\\sigma\\big)\\, \\varepsilon(\\mathbf{k})}{N_e}.\n$$\nWe report this in Hartree.\n\n4) Exact reference energy and Fermi-sphere condition. The number density is $n = N_e/V$. The Fermi wavevector at zero temperature is $k_F = (3\\pi^2 n)^{1/3}$, the Fermi energy is $E_F = k_F^2/2$, and the exact zero-temperature internal energy per electron is\n$$\nE_{\\mathrm{exact}} = \\frac{3}{5} E_F = \\frac{3}{5}\\frac{k_F^2}{2}.\n$$\nWe must also ensure that the Fermi sphere lies within the first Brillouin zone so that only the lowest free-electron paraboloid matters and no zone folding is needed. The BZ edge magnitude is $\\pi/a$. With the given parameters $a = 20$ bohr and $N_e = 1$, the cell volume is $V = a^3 = 20^3 = 8000$, the density is $n = N_e/V = 1/8000 = 0.000125$, which yields\n$$\nk_F = \\big(3\\pi^2 n\\big)^{1/3} = \\big(3\\pi^2 \\times 0.000125\\big)^{1/3},\n$$\nand\n$$\n\\frac{\\pi}{a} = \\frac{\\pi}{20}.\n$$\nNumerically, $k_F \\approx 0.154$ and $\\pi/a \\approx 0.157$, so $k_F < \\pi/a$, ensuring that the Fermi sphere sits strictly inside the first BZ. Consequently, $\\varepsilon(\\mathbf{k}) = \\lvert \\mathbf{k} \\rvert^2/2$ within the BZ suffices to describe all occupied states for this setup.\n\n5) Smearing–$k$-point trade-off. Finite smearing smooths the discontinuity at the Fermi surface and reduces quadrature error in the discrete $k$-sum (especially with coarse $k$-point meshes), but it introduces a bias in $E_{\\mathrm{num}}$ relative to the zero-temperature value. For Fermi–Dirac statistics, the Sommerfeld expansion implies that, for small $\\sigma$, the leading bias in internal energy scales as $\\mathcal{O}(\\sigma^2)$, while the quadrature error from finite $k$-point sampling generally decreases as the grid is refined. Therefore, there exists an optimal balance between $\\sigma$ and grid density that minimizes computational cost (here, measured by $N_k = g^3$) under an accuracy constraint.\n\nAlgorithmic design:\n- For each test case $(g,\\sigma)$, build the uniform half-shifted MP grid and compute $\\varepsilon(\\mathbf{k})$.\n- Solve for $\\mu$ by bisection on the equation $g_s \\frac{1}{N_k}\\sum_{\\mathbf{k}} f(\\varepsilon(\\mathbf{k}),\\mu,\\sigma) - N_e = 0$. Use broad, safe brackets around the extremal energies adjusted by a multiple of $\\sigma$ to ensure that the left-hand side changes sign over the bracket. The map $\\mu \\mapsto \\sum f$ is strictly increasing, guaranteeing convergence of bisection.\n- Compute $E_{\\mathrm{num}} = \\dfrac{g_s}{N_e} \\frac{1}{N_k}\\sum_{\\mathbf{k}} f(\\varepsilon(\\mathbf{k}),\\mu,\\sigma)\\, \\varepsilon(\\mathbf{k})$ and the absolute error $\\lvert E_{\\mathrm{num}} - E_{\\mathrm{exact}} \\rvert$ in Hartree.\n- For the optimal-balance search, enumerate the candidate sets $g \\in \\{4,6,8,10,12,16\\}$ and $\\sigma \\in \\{0.002,0.01,0.05\\}$, compute the error for each pair, and select the first pair meeting the tolerance $\\tau = 10^{-3}$ Hartree when ordered by increasing $N_k = g^3$. If none meet the tolerance, select the pair with minimal error.\n\nTest suite and output:\n- Compute the absolute errors for the $8$ test cases $(g,\\sigma)$ in the order: $(4, 0.002)$, $(6, 0.002)$, $(8, 0.002)$, $(12, 0.002)$, $(4, 0.01)$, $(6, 0.01)$, $(8, 0.01)$, $(12, 0.01)$.\n- Perform the optimal-balance selection over the specified candidate sets and tolerance.\n- Output a single line in the exact format $[e_1,e_2,\\dots,e_8,g_{\\mathrm{opt}},\\sigma_{\\mathrm{opt}},N_{k,\\mathrm{opt}},e_{\\mathrm{opt}}]$ with no spaces, where $e_i$ and $e_{\\mathrm{opt}}$ are absolute errors in Hartree, $g_{\\mathrm{opt}}$ and $N_{k,\\mathrm{opt}}$ are integers, and $\\sigma_{\\mathrm{opt}}$ is in Hartree.\n\nThis approach cleanly connects the plane-wave and pseudopotential framework (empty pseudopotential), finite-temperature (smearing) occupations in Mermin’s formalism, and Brillouin-zone quadrature via uniform $k$-point sampling, enabling a quantitative study of convergence and an explicit algorithm to identify an optimal balance between smearing and $k$-point density under a rigorous, verifiable accuracy criterion.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\n# Execution environment: Python 3.12, numpy 1.23.5, scipy 1.11.4 (not used)\n# Self-contained: no input, no external files.\n\ndef build_k_grid_and_energies(a_bohr: float, g: int):\n    \"\"\"\n    Construct half-shifted, uniform Monkhorst–Pack-like k-grid for a simple cubic BZ:\n      k_i = -pi/a + (i + 0.5) * (2pi/(a*g)), for i = 0..g-1\n    Returns flattened energies eps = |k|^2 / 2 in Hartree (atomic units).\n    \"\"\"\n    dk = 2.0 * np.pi / (a_bohr * g)\n    kmin = -np.pi / a_bohr\n    # Half-shifted grid avoids boundary points\n    k1d = kmin + (np.arange(g) + 0.5) * dk\n    # Build 3D grid and compute energies\n    kx, ky, kz = np.meshgrid(k1d, k1d, k1d, indexing='ij')\n    k2 = kx*kx + ky*ky + kz*kz\n    eps = 0.5 * k2  # Hartree (since atomic units)\n    return eps.reshape(-1)\n\ndef fermi_dirac_occ(eps: np.ndarray, mu: float, sigma: float):\n    \"\"\"\n    Stable Fermi-Dirac occupation f = 1 / (1 + exp((eps-mu)/sigma)).\n    sigma > 0 (Hartree). Returns vector of same shape as eps.\n    \"\"\"\n    x = (eps - mu) / sigma\n    # Use stable logistic evaluation\n    # For x >= 0: f = exp(-x) / (1 + exp(-x))\n    # For x < 0:  f = 1 / (1 + exp(x))\n    occ = np.empty_like(x)\n    mask = x >= 0\n    # Avoid overflow by clipping exponentials\n    xm = x[mask]\n    xp = x[~mask]\n    occ[mask] = np.exp(-np.clip(xm, -700, 700))\n    occ[mask] = occ[mask] / (1.0 + occ[mask])\n    exp_xp = np.exp(np.clip(xp, -700, 700))\n    occ[~mask] = 1.0 / (1.0 + exp_xp)\n    return occ\n\ndef solve_mu_for_number(eps: np.ndarray, sigma: float, Ne: float, gs: float):\n    \"\"\"\n    Solve for chemical potential mu such that:\n      gs * mean(f(eps, mu, sigma)) = Ne\n    using bisection on a safe bracket.\n    \"\"\"\n    # Safe bracket around min/max energies extended by multiples of sigma and a buffer\n    e_min = float(np.min(eps))\n    e_max = float(np.max(eps))\n    # Ensure sigma contributes to bracket extent; add additive buffer in case sigma is tiny\n    buffer = max(1.0, 10.0 * sigma)\n    mu_lo = e_min - 10.0 * buffer\n    mu_hi = e_max + 10.0 * buffer\n\n    def electrons(mu):\n        f = fermi_dirac_occ(eps, mu, sigma)\n        return gs * float(np.mean(f))\n\n    # Expand bracket if necessary to ensure monotonic bracket captures root\n    N_lo = electrons(mu_lo)\n    N_hi = electrons(mu_hi)\n    # If for numerical reasons the bracket is not wide enough, expand geometrically\n    expand_count = 0\n    while N_lo <= Ne and expand_count < 50:\n        mu_lo -= 2.0 * buffer\n        N_lo = electrons(mu_lo)\n        expand_count += 1\n    expand_count = 0\n    while N_hi >= Ne and expand_count < 50:\n        mu_hi += 2.0 * buffer\n        N_hi = electrons(mu_hi)\n        expand_count += 1\n\n    # Bisection\n    for _ in range(100):\n        mu_mid = 0.5 * (mu_lo + mu_hi)\n        N_mid = electrons(mu_mid)\n        if N_mid > Ne:\n            mu_hi = mu_mid\n        else:\n            mu_lo = mu_mid\n        if abs(mu_hi - mu_lo) < 1e-12:\n            break\n    return 0.5 * (mu_lo + mu_hi)\n\ndef compute_internal_energy_per_electron(a: float, g: int, sigma: float,\n                                         Ne: float, gs: float, E_exact: float,\n                                         cache):\n    \"\"\"\n    Compute E_num (Hartree per electron) and absolute error vs E_exact for given (g, sigma).\n    Uses a cache to avoid recomputation.\n    \"\"\"\n    key = (g, float(sigma))\n    if key in cache:\n        return cache[key]\n    eps = build_k_grid_and_energies(a, g)\n    mu = solve_mu_for_number(eps, sigma, Ne, gs)\n    f = fermi_dirac_occ(eps, mu, sigma)\n    # Internal energy per electron\n    E_num = (gs * float(np.mean(f * eps))) / Ne\n    err = abs(E_num - E_exact)\n    cache[key] = (E_num, err)\n    return cache[key]\n\ndef solve():\n    # Physical parameters (atomic units)\n    a = 20.0  # bohr\n    V = a**3  # bohr^3\n    Ne = 1.0\n    gs = 2.0\n\n    # Exact zero-temperature energy per electron for 3D free electron gas\n    n = Ne / V\n    kF = (3.0 * (np.pi**2) * n)**(1.0/3.0)\n    EF = 0.5 * (kF**2)\n    E_exact = (3.0/5.0) * EF  # Hartree per electron\n\n    # Test suite: 8 cases\n    test_cases = [\n        (4, 0.002),\n        (6, 0.002),\n        (8, 0.002),\n        (12, 0.002),\n        (4, 0.01),\n        (6, 0.01),\n        (8, 0.01),\n        (12, 0.01),\n    ]\n\n    # Compute errors for test cases\n    cache = {}\n    errors = []\n    for g, sigma in test_cases:\n        _, err = compute_internal_energy_per_electron(a, g, sigma, Ne, gs, E_exact, cache)\n        errors.append(round(err, 8))  # round for stable printing\n\n    # Optimal balance search\n    tau = 1e-3  # Hartree\n    g_candidates = [4, 6, 8, 10, 12, 16]\n    sigma_candidates = [0.002, 0.01, 0.05]\n\n    # Enumerate pairs ordered by increasing Nk = g^3\n    pairs = []\n    for g in g_candidates:\n        Nk = g**3\n        for sigma in sigma_candidates:\n            pairs.append((Nk, g, sigma))\n    pairs.sort(key=lambda x: x[0])  # sort by Nk\n\n    g_opt = None\n    sigma_opt = None\n    Nk_opt = None\n    err_opt = None\n\n    # Scan for first pair meeting tolerance\n    best_err = None\n    best_tuple = None\n    for Nk, g, sigma in pairs:\n        _, err = compute_internal_energy_per_electron(a, g, sigma, Ne, gs, E_exact, cache)\n        if (best_err is None) or (err < best_err):\n            best_err = err\n            best_tuple = (g, sigma, Nk, err)\n        if err <= tau and g_opt is None:\n            g_opt, sigma_opt, Nk_opt, err_opt = g, sigma, Nk, err\n            break\n\n    # If none met tolerance, pick best-attained error\n    if g_opt is None:\n        g_opt, sigma_opt, Nk_opt, err_opt = best_tuple\n\n    # Prepare flat results list: 8 errors + g_opt + sigma_opt + Nk_opt + err_opt\n    results = []\n    for e in errors:\n        # ensure consistent numeric format\n        results.append(e if isinstance(e, float) else float(e))\n    results.append(int(g_opt))\n    results.append(float(sigma_opt))\n    results.append(int(Nk_opt))\n    results.append(round(float(err_opt), 8))\n\n    # Print as a single line, comma-separated, no spaces, enclosed in square brackets\n    def format_number(x):\n        # Ensure minimal yet readable representation, no spaces\n        if isinstance(x, int):\n            return str(x)\n        # For floats, ensure standard Python str formatting, but avoid scientific notation for small numbers if possible\n        return str(x)\n\n    print(\"[\" + \",\".join(format_number(x) for x in results) + \"]\")\n\nsolve()\n```", "id": "2915098"}, {"introduction": "With numerical convergence parameters understood, we can investigate the core physical approximation: the pseudopotential itself. While modern pseudopotentials are highly accurate, they can sometimes suffer from pathological behavior, such as unphysical \"ghost\" states. This advanced exercise challenges you to implement a one-dimensional model to demonstrate how a poorly constructed pseudopotential can produce a ghost state and, more importantly, how a careful choice of the local potential and projectors can eliminate this artifact while preserving transferability [@problem_id:2915027].", "problem": "You will implement a one-dimensional plane-wave simulation that models the essential features of a Kleinman–Bylander separable nonlocal pseudopotential and demonstrates how the choice of local channel or projector construction can eliminate a ghost state while retaining transferability. Work in Hartree atomic units where the electron mass is unity, energies are in Hartree (Ha), lengths in Bohr (bohr), and Planck’s constant divided by $2\\pi$ equals $1$. The system is a one-dimensional large supercell of length $L$ with periodic boundary conditions and a plane-wave basis truncated by a kinetic energy cutoff.\n\nFundamental base and model specification:\n- Consider a one-dimensional periodic supercell of length $L$ and the plane-wave basis $\\{\\lvert G \\rangle\\}$ with wavevectors $G = 2\\pi n/L$ for integer $n$. The plane waves are orthonormal as $\\langle x \\lvert G \\rangle = L^{-1/2}\\exp(i G x)$.\n- The kinetic operator is $T = -\\frac{1}{2} \\frac{d^2}{dx^2}$, which in the plane-wave basis yields diagonal elements $T_{G,G'} = \\frac{G^2}{2} \\delta_{G,G'}$.\n- The local potential is a Gaussian well $V_{\\mathrm{loc}}(x) = V_0 \\exp\\!\\left[-(x/a)^2\\right]$, where $V_0 < 0$ and $a>0$. The matrix elements are $V^{\\mathrm{loc}}_{G,G'} = \\frac{1}{L}\\int_{-L/2}^{L/2} V_{\\mathrm{loc}}(x) e^{-i(G-G')x}\\,dx$. For $L \\gg a$, the integral is well approximated by the whole-line Fourier transform $V^{\\mathrm{loc}}_{G,G'} \\approx \\frac{1}{L} \\int_{-\\infty}^{\\infty} V_{\\mathrm{loc}}(x) e^{-i(G-G')x}\\,dx$.\n- The nonlocal pseudopotential is specified in a Kleinman–Bylander separable form $V_{\\mathrm{nl}} = \\sum_{i=1}^{N_p} D_i \\lvert \\beta_i \\rangle \\langle \\beta_i \\rvert$, where $D_i$ are real coupling coefficients and $\\beta_i(x)$ are localized projector functions. In the plane-wave basis, the nonlocal matrix is $\\left(V_{\\mathrm{nl}}\\right)_{G,G'} = \\sum_i D_i\\, \\langle G \\vert \\beta_i \\rangle \\langle \\beta_i \\vert G' \\rangle$ with $\\langle G \\vert \\beta_i \\rangle = L^{-1/2}\\int \\beta_i(x) e^{-i G x}\\,dx$.\n- Two types of projectors are used to emulate different angular-momentum channels via parity in one dimension: “even” (s-like) and “odd” (p-like). Use the following model projectors:\n  - Even projector: $\\beta^{(\\mathrm{even})}_b(x) = \\exp\\!\\left[-(x/b)^2\\right]$ with width parameter $b>0$.\n  - Odd projector: $\\beta^{(\\mathrm{odd})}_b(x) = x \\exp\\!\\left[-(x/b)^2\\right]$ with width parameter $b>0$.\n  Their plane-wave components are to be obtained from the defining integrals $\\langle G \\vert \\beta \\rangle = L^{-1/2} \\int_{-\\infty}^{\\infty} \\beta(x) e^{-i G x}\\,dx$. For a Gaussian, the Fourier transforms are standard and yield closed forms that you should implement exactly.\n\nHamiltonians to be constructed and diagonalized:\n- The truncated plane-wave basis is defined by an energy cutoff $E_{\\mathrm{cut}}$: include all $G$ such that $\\frac{G^2}{2} \\le E_{\\mathrm{cut}}$. In this basis, build three Hermitian matrices:\n  1. $H_{\\mathrm{loc}} = T + V_{\\mathrm{loc}}$ (no nonlocal projectors).\n  2. $H_{A} = T + V_{\\mathrm{loc}} + V_{\\mathrm{nl}}^{(A)}$ for “Construction A,” which uses an attractive even-projector set that is known to be prone to ghosts.\n  3. $H_{B} = T + V_{\\mathrm{loc}} + V_{\\mathrm{nl}}^{(B)}$ for “Construction B,” which models a change of local channel and projector construction: keep the even channel local and place nonlocal weight in odd (repulsive) projectors, minimizing coupling to the even ground state and thereby eliminating ghosts while preserving transferability for the even (valence) channel.\n\nGhost detection and transferability metrics:\n- Define the count of bound states in the finite supercell/basis as the number of eigenvalues of a Hamiltonian that are strictly below $0$. Let $N_{-}(H)$ denote this count.\n- A “ghost” is operationally detected when $N_{-}(H_{A}) > N_{-}(H_{\\mathrm{loc}})$, i.e., the separable nonlocal construction creates at least one additional negative-energy state not present in the local reference.\n- Elimination is achieved if $N_{-}(H_{B}) = N_{-}(H_{\\mathrm{loc}})$.\n- To quantify “retaining transferability,” compare the lowest bound-state energy (most negative eigenvalue) for $H_{B}$ and $H_{\\mathrm{loc}}$. Let $E_0(H)$ be the smallest eigenvalue of $H$. Transferability is considered retained if $\\lvert E_0(H_{B}) - E_0(H_{\\mathrm{loc}}) \\rvert \\le \\varepsilon$, with a tolerance $\\varepsilon = 10^{-4}$ in Hartree. If $N_{-}(H_{\\mathrm{loc}}) = 0$, skip this transferability check and treat it as satisfied by default for the purpose of the logical test below.\n\nFinal result to compute for each test case:\n- For each test case, return a boolean defined as\n  $$\\mathrm{Result} = \\big(N_{-}(H_{A}) > N_{-}(H_{\\mathrm{loc}})\\big)\\ \\wedge\\ \\big(N_{-}(H_{B}) = N_{-}(H_{\\mathrm{loc}})\\big)\\ \\wedge\\ \\Big(N_{-}(H_{\\mathrm{loc}})=0 \\ \\vee\\ \\lvert E_0(H_{B}) - E_0(H_{\\mathrm{loc}}) \\rvert \\le \\varepsilon\\Big).$$\n\nTest suite (all energies in Hartree and lengths in bohr):\n- Case 1 (happy path; clear ghost in A; elimination in B; transferability retained):\n  - $L = 40.0$, $E_{\\mathrm{cut}} = 0.8$, $V_0 = -0.20$, $a = 1.0$,\n  - Construction A (even projectors): $N_p=2$, widths $b = [0.6, 0.3]$, couplings $D = [-100.0, -50.0]$,\n  - Construction B (odd projectors): $N_p=2$, widths $b = [0.6, 0.3]$, couplings $D = [20.0, 10.0]$.\n- Case 2 (basis-limited edge; still shows ghost in A, eliminated in B):\n  - $L = 40.0$, $E_{\\mathrm{cut}} = 0.3$, $V_0 = -0.20$, $a = 1.0$,\n  - Construction A (even): $b = [0.6, 0.3]$, $D = [-80.0, -40.0]$,\n  - Construction B (odd): $b = [0.6, 0.3]$, $D = [15.0, 7.0]$.\n- Case 3 (no problematic nonlocal attraction; no ghost to eliminate):\n  - $L = 40.0$, $E_{\\mathrm{cut}} = 0.8$, $V_0 = -0.05$, $a = 1.0$,\n  - Construction A (even): $b = [0.6, 0.3]$, $D = [0.0, 0.0]$,\n  - Construction B (odd): $b = [0.6, 0.3]$, $D = [2.0, 1.0]$.\n\nImplementation requirements:\n- Compute matrix elements directly from the definitions above. For the Gaussian local potential and the Gaussian(-times-$x$) projectors, use the exact whole-line Fourier integrals:\n  - $\\int_{-\\infty}^{\\infty} e^{-(x/a)^2} e^{-i q x}\\, dx = \\sqrt{\\pi}\\, a \\, e^{-(q a/2)^2}$,\n  - $\\int_{-\\infty}^{\\infty} e^{-(x/b)^2} e^{-i G x}\\, dx = \\sqrt{\\pi}\\, b \\, e^{-(G b/2)^2}$,\n  - $\\int_{-\\infty}^{\\infty} x\\, e^{-(x/b)^2} e^{-i G x}\\, dx = i \\sqrt{\\pi}\\, b \\left(- \\frac{G b^2}{2}\\right) e^{-(G b/2)^2}$.\n  Apply the plane-wave normalization factor $L^{-1/2}$ for each $\\langle G \\vert \\beta \\rangle$ and $L^{-1}$ for $V^{\\mathrm{loc}}_{G,G'}$ consistently.\n- Diagonalize the three Hermitian matrices $H_{\\mathrm{loc}}$, $H_A$, and $H_B$ for each test case.\n- Count the negative eigenvalues for each Hamiltonian and evaluate the boolean result as defined.\n- All computations must be carried out in Hartree and bohr.\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, for example, $[\\mathrm{result}_1,\\mathrm{result}_2,\\mathrm{result}_3]$, where each $\\mathrm{result}_i$ is either True or False (as a boolean literal).\n\nYour program must be complete and runnable as specified without any external inputs.", "solution": "The problem requires the implementation of a one-dimensional plane-wave simulation to investigate the phenomenon of ghost states in pseudopotentials and their elimination. This is a valid and well-posed problem grounded in the principles of computational quantum mechanics. The solution proceeds by constructing the Hamiltonian for a periodic system in a plane-wave basis, diagonalizing it to find its energy spectrum, and analyzing the results according to specified criteria.\n\nThe process is broken down into four main stages:\n$1$. Construction of the plane-wave basis set.\n$2$. Formulation of the matrix elements for the kinetic, local potential, and nonlocal potential operators.\n$3$. Assembly and diagonalization of the three specified Hamiltonians: $H_{\\mathrm{loc}}$, $H_{A}$, and $H_{B}$.\n$4$. Evaluation of the results based on the count of bound states and energy transferability.\n\n**$1$. Basis Set Construction**\n\nThe quantum system is confined to a one-dimensional supercell of length $L$ with periodic boundary conditions. The single-particle wavefunctions are expanded in a basis of plane waves, which are eigenfunctions of the momentum operator. A plane wave $\\lvert G \\rangle$ has the real-space representation $\\langle x \\lvert G \\rangle = L^{-1/2} \\exp(i G x)$, where the wavevector $G$ must be compatible with the periodicity of the supercell, i.e., $G = 2\\pi n / L$ for an integer $n$.\n\nThe infinite set of plane waves is truncated using a kinetic energy cutoff, $E_{\\mathrm{cut}}$. Only plane waves with kinetic energy $\\frac{G^2}{2}$ less than or equal to this cutoff are retained in the basis. This condition is expressed as:\n$$\n\\frac{1}{2} \\left( \\frac{2\\pi n}{L} \\right)^2 \\le E_{\\mathrm{cut}} \\implies |n| \\le \\frac{L \\sqrt{2 E_{\\mathrm{cut}}}}{2\\pi}\n$$\nThe set of integers defining the basis is thus $n \\in \\{-n_{\\mathrm{max}}, \\dots, n_{\\mathrm{max}}\\}$, where $n_{\\mathrm{max}} = \\lfloor L\\sqrt{2E_{\\mathrm{cut}}} / (2\\pi) \\rfloor$. The total number of basis functions is $N_G = 2n_{\\mathrm{max}} + 1$.\n\n**$2$. Hamiltonian Matrix Elements**\n\nThe total Hamiltonian is $H = T + V_{\\mathrm{loc}} + V_{\\mathrm{nl}}$. Its matrix representation is constructed in the truncated plane-wave basis $\\{\\lvert G_k \\rangle\\}_{k=1}^{N_G}$.\n\n**Kinetic Energy Operator ($T$):**\nThe kinetic energy operator, $T = -\\frac{1}{2}\\frac{d^2}{dx^2}$, is diagonal in the plane-wave basis because plane waves are its eigenfunctions: $T \\lvert G \\rangle = \\frac{G^2}{2} \\lvert G \\rangle$. The matrix elements are therefore:\n$$\nT_{G,G'} = \\langle G \\vert T \\vert G' \\rangle = \\frac{{G'}^2}{2} \\langle G \\vert G' \\rangle = \\frac{G^2}{2} \\delta_{G,G'}\n$$\n\n**Local Potential Operator ($V_{\\mathrm{loc}}$):**\nThe local potential is a Gaussian function, $V_{\\mathrm{loc}}(x) = V_0 \\exp[-(x/a)^2]$. Its matrix elements are given by the Fourier components of the potential. For a large supercell ($L \\gg a$), this is well-approximated by the continuous Fourier transform over an infinite domain:\n$$\nV^{\\mathrm{loc}}_{G,G'} = \\frac{1}{L} \\int_{-L/2}^{L/2} V_{\\mathrm{loc}}(x) e^{-i(G-G')x} dx \\approx \\frac{1}{L} \\int_{-\\infty}^{\\infty} V_{\\mathrm{loc}}(x) e^{-iqx} dx\n$$\nwhere $q = G-G'$. Using the provided integral for a Gaussian, $\\int_{-\\infty}^{\\infty} e^{-(x/a)^2} e^{-iqx} dx = \\sqrt{\\pi}\\, a \\, e^{-(qa/2)^2}$, we obtain:\n$$\nV^{\\mathrm{loc}}_{G,G'} = \\frac{V_0 \\sqrt{\\pi} a}{L} \\exp\\left[-\\left(\\frac{(G-G')a}{2}\\right)^2\\right]\n$$\nThis matrix is a real, symmetric Toeplitz matrix.\n\n**Nonlocal Pseudopotential Operator ($V_{\\mathrm{nl}}$):**\nThe nonlocal part is given in the separable Kleinman-Bylander form, $V_{\\mathrm{nl}} = \\sum_{i=1}^{N_p} D_i \\lvert \\beta_i \\rangle \\langle \\beta_i \\rvert$. The matrix elements are:\n$$\n\\left(V_{\\mathrm{nl}}\\right)_{G,G'} = \\langle G \\vert V_{\\mathrm{nl}} \\vert G' \\rangle = \\sum_{i=1}^{N_p} D_i \\langle G \\vert \\beta_i \\rangle \\langle \\beta_i \\vert G' \\rangle\n$$\nThe terms $\\langle G \\vert \\beta_i \\rangle$ are the plane-wave components of the projector function $\\beta_i(x)$, calculated as $\\langle G \\vert \\beta_i \\rangle = L^{-1/2} \\int_{-\\infty}^{\\infty} \\beta_i(x) e^{-iGx} dx$.\n\nFor the **even projector**, $\\beta^{(\\mathrm{even})}_b(x) = \\exp[-(x/b)^2]$, the components are real:\n$$\n\\langle G \\vert \\beta^{(\\mathrm{even})}_b \\rangle = \\frac{1}{\\sqrt{L}} \\int_{-\\infty}^{\\infty} e^{-(x/b)^2} e^{-iGx} dx = \\frac{\\sqrt{\\pi} b}{\\sqrt{L}} \\exp\\left[-\\left(\\frac{Gb}{2}\\right)^2\\right]\n$$\nFor the **odd projector**, $\\beta^{(\\mathrm{odd})}_b(x) = x \\exp[-(x/b)^2]$, the components are purely imaginary:\n$$\n\\langle G \\vert \\beta^{(\\mathrm{odd})}_b \\rangle = \\frac{1}{\\sqrt{L}} \\int_{-\\infty}^{\\infty} x e^{-(x/b)^2} e^{-iGx} dx = \\frac{i}{\\sqrt{L}} \\left( \\sqrt{\\pi} b \\left( -\\frac{Gb^2}{2} \\right) \\exp\\left[-\\left(\\frac{Gb}{2}\\right)^2\\right] \\right)\n$$\nLet's denote $\\langle G \\vert \\beta_i \\rangle = \\tilde{\\beta}_i(G)$. The nonlocal matrix for the odd projector is $(V_{\\mathrm{nl}})_{G,G'} = D_i \\tilde{\\beta}_i(G) \\tilde{\\beta}_i(G')^*$. Since $\\tilde{\\beta}_i$ is imaginary, $\\tilde{\\beta}_i^* = - \\tilde{\\beta}_i$, and the product $\\tilde{\\beta}_i(G) \\tilde{\\beta}_i(G')^*$ becomes real. In all cases, the resulting Hamiltonian matrix is real and symmetric.\n\n**$3$. Hamiltonian Assembly and Diagonalization**\n\nThree distinct Hamiltonians are constructed and diagonalized:\n$1$. $H_{\\mathrm{loc}} = T + V_{\\mathrm{loc}}$: The reference Hamiltonian containing only the local potential.\n$2$. $H_{A} = H_{\\mathrm{loc}} + V_{\\mathrm{nl}}^{(A)}$: Construction A, with attractive ($D_i < 0$) even projectors. This configuration is known to be susceptible to producing unphysical, deeply bound \"ghost\" states.\n$3$. $H_{B} = H_{\\mathrm{loc}} + V_{\\mathrm{nl}}^{(B)}$: Construction B, using repulsive ($D_i > 0$) odd projectors. This design avoids strong coupling to the even-parity ground state, thereby preventing ghost states while aiming to preserve the physics of the valence states (transferability).\n\nThese $N_G \\times N_G$ Hermitian matrices are diagonalized using a standard numerical eigensolver to obtain their eigenvalues, which correspond to the energy levels of the system.\n\n**$4$. Analysis and Final Evaluation**\n\nThe analysis follows the rules specified in the problem statement.\nFirst, we count the number of negative eigenvalues, $N_{-}(H)$, for each Hamiltonian. These represent the bound states of the system.\n- A **ghost state** is detected if Construction A introduces new bound states compared to the local reference: $N_{-}(H_A) > N_{-}(H_{\\mathrm{loc}})$.\n- The ghost is **eliminated** if Construction B produces the same number of bound states as the reference: $N_{-}(H_B) = N_{-}(H_{\\mathrm{loc}})$.\n- **Transferability** is a measure of how well the essential physics (e.g., the ground state energy) is preserved. It is considered retained if the ground state energy is unchanged within a tolerance $\\varepsilon = 10^{-4}$ Ha: $|E_0(H_B) - E_0(H_{\\mathrm{loc}})| \\le \\varepsilon$. Here, $E_0(H)$ is the lowest eigenvalue of the Hamiltonian $H$. This check is bypassed if the reference Hamiltonian $H_{\\mathrm{loc}}$ has no bound states (i.e., $N_{-}(H_{\\mathrm{loc}})=0$).\n\nFor each test case, a final boolean result is computed as the logical AND of these three conditions:\n$$\n\\mathrm{Result} = \\big(N_{-}(H_{A}) > N_{-}(H_{\\mathrm{loc}})\\big)\\ \\wedge\\ \\big(N_{-}(H_{B}) = N_{-}(H_{\\mathrm{loc}})\\big)\\ \\wedge\\ \\Big(N_{-}(H_{\\mathrm{loc}})=0 \\ \\vee\\ \\lvert E_0(H_{B}) - E_0(H_{\\mathrm{loc}}) \\rvert \\le \\varepsilon\\Big)\n$$\nThis protocol systematically verifies if Construction A exhibits a ghost state pathology, and if Construction B successfully remedies it while maintaining physical accuracy.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.linalg import eigh\n\ndef solve():\n    \"\"\"\n    Main function to run the simulation for all test cases and print the results.\n    \"\"\"\n\n    # Define the test cases from the problem statement.\n    test_cases = [\n        {\n            \"L\": 40.0, \"E_cut\": 0.8, \"V0\": -0.20, \"a\": 1.0,\n            \"A\": {\"type\": \"even\", \"b\": [0.6, 0.3], \"D\": [-100.0, -50.0]},\n            \"B\": {\"type\": \"odd\", \"b\": [0.6, 0.3], \"D\": [20.0, 10.0]},\n        },\n        {\n            \"L\": 40.0, \"E_cut\": 0.3, \"V0\": -0.20, \"a\": 1.0,\n            \"A\": {\"type\": \"even\", \"b\": [0.6, 0.3], \"D\": [-80.0, -40.0]},\n            \"B\": {\"type\": \"odd\", \"b\": [0.6, 0.3], \"D\": [15.0, 7.0]},\n        },\n        {\n            \"L\": 40.0, \"E_cut\": 0.8, \"V0\": -0.05, \"a\": 1.0,\n            \"A\": {\"type\": \"even\", \"b\": [0.6, 0.3], \"D\": [0.0, 0.0]},\n            \"B\": {\"type\": \"odd\", \"b\": [0.6, 0.3], \"D\": [2.0, 1.0]},\n        },\n    ]\n\n    epsilon = 1e-4\n    results = []\n\n    for case in test_cases:\n        result = evaluate_case(\n            case[\"L\"], case[\"E_cut\"], case[\"V0\"], case[\"a\"],\n            case[\"A\"], case[\"B\"], epsilon\n        )\n        results.append(result)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\ndef evaluate_case(L, E_cut, V0, a, proj_A_params, proj_B_params, epsilon):\n    \"\"\"\n    Performs the plane-wave simulation for a single test case.\n    \"\"\"\n    # 1. Basis Set Construction\n    # Determine the maximum integer n for the G-vectors based on E_cut\n    n_max = int(np.floor(L * np.sqrt(2 * E_cut) / (2 * np.pi)))\n    G_vec = (2 * np.pi / L) * np.arange(-n_max, n_max + 1)\n    N_G = len(G_vec)\n\n    # 2. Kinetic Energy Matrix (T)\n    T_mat = 0.5 * np.diag(G_vec**2)\n\n    # 3. Local Potential Matrix (V_loc)\n    # G-G' matrix\n    q_mat = G_vec[:, None] - G_vec[None, :]\n    V_loc_mat = (V0 / L) * np.sqrt(np.pi) * a * np.exp(-((q_mat * a / 2.0)**2))\n\n    # 4. Nonlocal Potential Matrices (V_nl)\n    # Construction A\n    V_nl_A = np.zeros((N_G, N_G), dtype=float)\n    b_vals_A, D_vals_A = proj_A_params[\"b\"], proj_A_params[\"D\"]\n    for b, D in zip(b_vals_A, D_vals_A):\n        # Even projector: beta_G = L^{-1/2} * sqrt(pi)*b * exp(-(Gb/2)^2)\n        beta_G_vec_even = (np.sqrt(np.pi) * b / np.sqrt(L)) * \\\n                          np.exp(-((G_vec * b / 2.0)**2))\n        V_nl_A += D * np.outer(beta_G_vec_even, beta_G_vec_even)\n    \n    # Construction B\n    V_nl_B = np.zeros((N_G, N_G), dtype=float)\n    b_vals_B, D_vals_B = proj_B_params[\"b\"], proj_B_params[\"D\"]\n    for b, D in zip(b_vals_B, D_vals_B):\n        # Odd projector: beta_G = i * f(G), where f(G) is real.\n        # The matrix becomes D * f(G_i) * f(G_j)\n        f_G_vec_odd = (np.sqrt(np.pi) * b / np.sqrt(L)) * \\\n                      (-G_vec * b**2 / 2.0) * \\\n                      np.exp(-((G_vec * b / 2.0)**2))\n        V_nl_B += D * np.outer(f_G_vec_odd, f_G_vec_odd)\n\n    # 5. Assemble Hamiltonians\n    H_loc = T_mat + V_loc_mat\n    H_A = H_loc + V_nl_A\n    H_B = H_loc + V_nl_B\n\n    # 6. Diagonalize Matrices to find eigenvalues\n    eigvals_loc = eigh(H_loc, eigvals_only=True)\n    eigvals_A = eigh(H_A, eigvals_only=True)\n    eigvals_B = eigh(H_B, eigvals_only=True)\n\n    # 7. Analyze eigenvalues and compute final boolean result\n    # Count negative eigenvalues (bound states)\n    N_neg_loc = np.sum(eigvals_loc < 0)\n    N_neg_A = np.sum(eigvals_A < 0)\n    N_neg_B = np.sum(eigvals_B < 0)\n\n    # Condition 1: Ghost state detected in Construction A\n    cond1_ghost_detected = N_neg_A > N_neg_loc\n\n    # Condition 2: Ghost state eliminated in Construction B\n    cond2_ghost_eliminated = N_neg_B == N_neg_loc\n\n    # Condition 3: Transferability is retained\n    cond3_transferability = False\n    if N_neg_loc == 0:\n        cond3_transferability = True\n    else:\n        # Check energy difference only if there are bound states in reference\n        E0_loc = np.min(eigvals_loc)\n        E0_B = np.min(eigvals_B)\n        if abs(E0_B - E0_loc) <= epsilon:\n            cond3_transferability = True\n            \n    final_result = cond1_ghost_detected and cond2_ghost_eliminated and cond3_transferability\n    return final_result\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "2915027"}]}