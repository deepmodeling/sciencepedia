{"hands_on_practices": [{"introduction": "This first practice is a cornerstone of quantum chemistry, guiding you through the original Heitler-London treatment of the hydrogen molecule, $\\text{H}_2$. By applying the Pauli exclusion principle to construct valid singlet and triplet wavefunctions from atomic orbitals, you will derive the famous energy expressions that first explained the nature of the covalent bond. This exercise is fundamental for understanding how the purely quantum mechanical exchange interaction, captured by the exchange integral $K$, is responsible for the stability of the chemical bond in this model [@problem_id:2686410].", "problem": "Consider the hydrogen molecule, $\\mathrm{H}_{2}$, within the Born–Oppenheimer approximation at a fixed internuclear separation $R$. Let $\\phi_{A}(\\mathbf{r})$ and $\\phi_{B}(\\mathbf{r})$ denote normalized $1s$ atomic orbitals localized on nuclei $A$ and $B$, respectively, with nonzero overlap $S \\equiv \\langle \\phi_{A} | \\phi_{B} \\rangle$. The electronic Hamiltonian $\\hat{H}$ is spin-independent and contains the electronic kinetic energies, the electron–nuclear attractions to both nuclei, the electron–electron repulsion, and the nuclear–nuclear repulsion (the latter is a constant at fixed $R$). Using the valence bond (Heitler–London) construction based on the Pauli principle and the requirement of antisymmetry under electron exchange, build the properly antisymmetrized two-electron spatial wavefunctions from the localized products $\\phi_{A}(1)\\phi_{B}(2)$ and $\\phi_{B}(1)\\phi_{A}(2)$, combine them with the appropriate spin functions to form the singlet and triplet total states, and determine the normalization constants of the spatial parts in terms of $S$.\n\nDefine the direct (Coulomb) matrix element\n$$\nJ \\equiv \\langle \\phi_{A}(1)\\phi_{B}(2) | \\hat{H} | \\phi_{A}(1)\\phi_{B}(2) \\rangle\n$$\nand the exchange matrix element\n$$\nK \\equiv \\langle \\phi_{A}(1)\\phi_{B}(2) | \\hat{H} | \\phi_{B}(1)\\phi_{A}(2) \\rangle,\n$$\nas well as the one-electron overlap $S \\equiv \\langle \\phi_{A} | \\phi_{B} \\rangle$. Starting from these definitions and the fundamental requirements above (no additional pre-packaged results), derive analytic expressions for the Born–Oppenheimer electronic energies of the Heitler–London singlet and triplet states of $\\mathrm{H}_{2}$ in terms of $J$, $K$, and $S$.\n\nProvide your final answer as the ordered pair $(E_{\\mathrm{S}}, E_{\\mathrm{T}})$, where $E_{\\mathrm{S}}$ is the singlet energy and $E_{\\mathrm{T}}$ is the triplet energy, each expressed in closed form in terms of $J$, $K$, and $S$. No numerical evaluation is required, and no units should be reported in the final answer.", "solution": "According to the Pauli Exclusion Principle, the total electronic wavefunction for a multi-electron system must be antisymmetric with respect to the permutation of any two electrons. For the two-electron system of $\\mathrm{H}_{2}$, the total wavefunction $\\Psi(1, 2)$ can be written as a product of a spatial part $\\psi(\\mathbf{r}_1, \\mathbf{r}_2)$ and a spin part $\\sigma(s_1, s_2)$. Electron exchange, denoted by the permutation operator $\\hat{P}_{12}$, must yield:\n$$ \\hat{P}_{12} \\Psi(1, 2) = \\Psi(2, 1) = -\\Psi(1, 2) $$\nThis antisymmetry can be achieved in two ways:\n1.  A spatially symmetric function combined with a spin antisymmetric function. This configuration corresponds to a singlet state.\n2.  A spatially antisymmetric function combined with a spin symmetric function. This configuration corresponds to a triplet state.\n\nFirst, we construct the spin functions. For two electrons, each with spin quantum number $s = \\frac{1}{2}$, we have four basis spin states. Linear combinations of these yield one antisymmetric spin function (the singlet state, with total spin $S_{tot}=0$) and three symmetric spin functions (the triplet state, with total spin $S_{tot}=1$).\nThe antisymmetric singlet spin function is:\n$$ \\sigma_{\\mathrm{S}} = \\frac{1}{\\sqrt{2}}[\\alpha(1)\\beta(2) - \\beta(1)\\alpha(2)] $$\nThe three symmetric triplet spin functions are:\n$$ \\sigma_{\\mathrm{T}} = \\begin{cases} \\alpha(1)\\alpha(2) \\\\ \\frac{1}{\\sqrt{2}}[\\alpha(1)\\beta(2) + \\beta(1)\\alpha(2)] \\\\ \\beta(1)\\beta(2) \\end{cases} $$\nNext, we construct the spatial wavefunctions using the valence bond (Heitler-London) approach. The basis functions are products of the atomic orbitals $\\phi_{A}$ and $\\phi_{B}$, representing covalent structures where each electron is associated with a different nucleus. The two possible arrangements are $\\phi_{A}(1)\\phi_{B}(2)$ and $\\phi_{B}(1)\\phi_{A}(2)$. We form symmetric and antisymmetric linear combinations.\n\nThe spatially symmetric wavefunction, which we will denote $\\psi_{+}$, is:\n$$ \\psi_{+} = N_{+} [\\phi_{A}(1)\\phi_{B}(2) + \\phi_{B}(1)\\phi_{A}(2)] $$\nThe spatially antisymmetric wavefunction, which we will denote $\\psi_{-}$, is:\n$$ \\psi_{-} = N_{-} [\\phi_{A}(1)\\phi_{B}(2) - \\phi_{B}(1)\\phi_{A}(2)] $$\nHere, $N_{+}$ and $N_{-}$ are normalization constants. To find them, we enforce the normalization condition $\\langle \\psi | \\psi \\rangle = 1$.\n\nFor $\\psi_{+}$, the normalization integral is:\n$$ \\langle \\psi_{+} | \\psi_{+} \\rangle = N_{+}^2 \\langle \\phi_{A}(1)\\phi_{B}(2) + \\phi_{B}(1)\\phi_{A}(2) | \\phi_{A}(1)\\phi_{B}(2) + \\phi_{B}(1)\\phi_{A}(2) \\rangle = 1 $$\nExpanding the integral gives four terms:\n$$ N_{+}^{-2} = \\langle \\phi_{A}(1)\\phi_{B}(2) | \\phi_{A}(1)\\phi_{B}(2) \\rangle + \\langle \\phi_{A}(1)\\phi_{B}(2) | \\phi_{B}(1)\\phi_{A}(2) \\rangle + \\langle \\phi_{B}(1)\\phi_{A}(2) | \\phi_{A}(1)\\phi_{B}(2) \\rangle + \\langle \\phi_{B}(1)\\phi_{A}(2) | \\phi_{B}(1)\\phi_{A}(2) \\rangle $$\nThe integrals separate for each electron. Since $\\phi_{A}$ and $\\phi_{B}$ are normalized, $\\langle \\phi_{A} | \\phi_{A} \\rangle = 1$ and $\\langle \\phi_{B} | \\phi_{B} \\rangle = 1$. The overlap is $S = \\langle \\phi_{A} | \\phi_{B} \\rangle$.\n$$ \\langle \\phi_{A}(1)\\phi_{B}(2) | \\phi_{A}(1)\\phi_{B}(2) \\rangle = \\langle \\phi_{A}(1)|\\phi_{A}(1) \\rangle \\langle \\phi_{B}(2)|\\phi_{B}(2) \\rangle = 1 \\cdot 1 = 1 $$\n$$ \\langle \\phi_{A}(1)\\phi_{B}(2) | \\phi_{B}(1)\\phi_{A}(2) \\rangle = \\langle \\phi_{A}(1)|\\phi_{B}(1) \\rangle \\langle \\phi_{B}(2)|\\phi_{A}(2) \\rangle = S \\cdot S = S^2 $$\nThe other two terms are identical by symmetry.\n$$ N_{+}^{-2} = 1 + S^2 + S^2 + 1 = 2 + 2S^2 = 2(1 + S^2) $$\nThus, the normalization constant is $N_{+} = \\frac{1}{\\sqrt{2(1 + S^2)}}$.\n\nFor $\\psi_{-}$, the normalization integral is:\n$$ \\langle \\psi_{-} | \\psi_{-} \\rangle = N_{-}^2 \\langle \\phi_{A}(1)\\phi_{B}(2) - \\phi_{B}(1)\\phi_{A}(2) | \\phi_{A}(1)\\phi_{B}(2) - \\phi_{B}(1)\\phi_{A}(2) \\rangle = 1 $$\nExpanding this expression gives:\n$$ N_{-}^{-2} = \\langle \\phi_{A}(1)\\phi_{B}(2) | \\phi_{A}(1)\\phi_{B}(2) \\rangle - \\langle \\phi_{A}(1)\\phi_{B}(2) | \\phi_{B}(1)\\phi_{A}(2) \\rangle - \\langle \\phi_{B}(1)\\phi_{A}(2) | \\phi_{A}(1)\\phi_{B}(2) \\rangle + \\langle \\phi_{B}(1)\\phi_{A}(2) | \\phi_{B}(1)\\phi_{A}(2) \\rangle $$\n$$ N_{-}^{-2} = 1 - S^2 - S^2 + 1 = 2 - 2S^2 = 2(1 - S^2) $$\nThus, the normalization constant is $N_{-} = \\frac{1}{\\sqrt{2(1 - S^2)}}$.\n\nThe total wavefunctions for the singlet and triplet states are:\nSinglet: $\\Psi_{\\mathrm{S}} = \\psi_{+} \\sigma_{\\mathrm{S}}$\nTriplet: $\\Psi_{\\mathrm{T}} = \\psi_{-} \\sigma_{\\mathrm{T}}$\n\nThe electronic energy is the expectation value of the Hamiltonian, $E = \\langle \\Psi | \\hat{H} | \\Psi \\rangle$. Since the Hamiltonian $\\hat{H}$ is spin-independent, the spin functions can be integrated out, yielding unity because they are normalized. The energy calculation reduces to the spatial part: $E = \\langle \\psi_{\\text{spatial}} | \\hat{H} | \\psi_{\\text{spatial}} \\rangle$.\n\nThe energy of the singlet state, $E_{\\mathrm{S}}$, is calculated using $\\psi_{+}$.\n$$ E_{\\mathrm{S}} = \\langle \\psi_{+} | \\hat{H} | \\psi_{+} \\rangle = N_{+}^2 \\langle \\phi_{A}(1)\\phi_{B}(2) + \\phi_{B}(1)\\phi_{A}(2) | \\hat{H} | \\phi_{A}(1)\\phi_{B}(2) + \\phi_{B}(1)\\phi_{A}(2) \\rangle $$\nThe integral in the numerator expands to:\n$$ \\langle \\phi_{A}(1)\\phi_{B}(2)|\\hat{H}|\\phi_{A}(1)\\phi_{B}(2) \\rangle + \\langle \\phi_{A}(1)\\phi_{B}(2)|\\hat{H}|\\phi_{B}(1)\\phi_{A}(2) \\rangle + \\langle \\phi_{B}(1)\\phi_{A}(2)|\\hat{H}|\\phi_{A}(1)\\phi_{B}(2) \\rangle + \\langle \\phi_{B}(1)\\phi_{A}(2)|\\hat{H}|\\phi_{B}(1)\\phi_{A}(2) \\rangle $$\nUsing the provided definitions, $J \\equiv \\langle \\phi_{A}(1)\\phi_{B}(2) | \\hat{H} | \\phi_{A}(1)\\phi_{B}(2) \\rangle$ and $K \\equiv \\langle \\phi_{A}(1)\\phi_{B}(2) | \\hat{H} | \\phi_{B}(1)\\phi_{A}(2) \\rangle$. Due to the symmetry of $\\hat{H}$ with respect to electron labels and the fact that the orbitals are real, we have $\\langle \\phi_{B}(1)\\phi_{A}(2)|\\hat{H}|\\phi_{A}(1)\\phi_{B}(2) \\rangle = K$ and $\\langle \\phi_{B}(1)\\phi_{A}(2)|\\hat{H}|\\phi_{B}(1)\\phi_{A}(2) \\rangle = J$.\nThe numerator is therefore $J + K + K + J = 2J + 2K$.\nSubstituting this and the normalization constant $N_{+}$:\n$$ E_{\\mathrm{S}} = \\frac{1}{2(1 + S^2)} (2J + 2K) = \\frac{J + K}{1 + S^2} $$\nThe energy of the triplet state, $E_{\\mathrm{T}}$, is calculated using $\\psi_{-}$.\n$$ E_{\\mathrm{T}} = \\langle \\psi_{-} | \\hat{H} | \\psi_{-} \\rangle = N_{-}^2 \\langle \\phi_{A}(1)\\phi_{B}(2) - \\phi_{B}(1)\\phi_{A}(2) | \\hat{H} | \\phi_{A}(1)\\phi_{B}(2) - \\phi_{B}(1)\\phi_{A}(2) \\rangle $$\nThe integral in the numerator expands to:\n$$ \\langle \\phi_{A}(1)\\phi_{B}(2)|\\hat{H}|\\phi_{A}(1)\\phi_{B}(2) \\rangle - \\langle \\phi_{A}(1)\\phi_{B}(2)|\\hat{H}|\\phi_{B}(1)\\phi_{A}(2) \\rangle - \\langle \\phi_{B}(1)\\phi_{A}(2)|\\hat{H}|\\phi_{A}(1)\\phi_{B}(2) \\rangle + \\langle \\phi_{B}(1)\\phi_{A}(2)|\\hat{H}|\\phi_{B}(1)\\phi_{A}(2) \\rangle $$\nThis simplifies to $J - K - K + J = 2J - 2K$.\nSubstituting this and the normalization constant $N_{-}$:\n$$ E_{\\mathrm{T}} = \\frac{1}{2(1 - S^2)} (2J - 2K) = \\frac{J - K}{1 - S^2} $$\nThe derived expressions for the singlet and triplet state energies completely satisfy the problem statement.", "answer": "$$\n\\boxed{\\begin{pmatrix} \\frac{J + K}{1 + S^2} & \\frac{J - K}{1 - S^2} \\end{pmatrix}}\n$$", "id": "2686410"}, {"introduction": "While the Heitler-London model for $\\text{H}_2$ provides deep insight, describing the specific geometries of polyatomic molecules requires an extension of the theory. This problem explores the concept of orbital hybridization, a powerful mathematical construct in valence bond theory used to form directed chemical bonds. You will derive a general relationship between the geometry of a molecule, encoded by the angle between bonds, and the necessary $s$-$p$ mixing required to form an orthonormal set of hybrid orbitals that maximizes overlap along these bond axes [@problem_id:2935119].", "problem": "Consider a central atom that provides a single valence $s$ orbital and the three Cartesian $p$ orbitals $p_x$, $p_y$, and $p_z$. In the spirit of valence bond theory and the Heitler–London model, assume that the most stabilizing hybrids on the central atom are those that maximize overlap along a prescribed set of bond directions. Let these bond directions be represented by unit vectors $\\{\\mathbf{u}_i\\}_{i=1}^{N}$ in real space, and suppose they form a symmetric set in the sense that for $i \\neq j$ one has $\\mathbf{u}_i \\cdot \\mathbf{u}_j = \\gamma$, where $\\gamma$ is a geometry-dependent constant with $\\gamma < 0$. Consider the following ansatz for $N$ equivalent, orthonormal hybrid orbitals localized on the central atom:\n$$\n|h_i\\rangle \\;=\\; a\\,|s\\rangle \\;+\\; b\\,(\\mathbf{u}_i \\cdot \\mathbf{p}) \\quad\\text{with}\\quad \\mathbf{p} \\equiv (|p_x\\rangle, |p_y\\rangle, |p_z\\rangle).\n$$\nAssume the standard orthonormality relations for the atomic basis,\n$$\n\\langle s|s\\rangle = 1,\\quad \\langle p_{\\alpha}|p_{\\beta}\\rangle = \\delta_{\\alpha\\beta},\\quad \\langle s|p_{\\alpha}\\rangle = 0,\n$$\nand impose the orthonormality constraints on the hybrids $\\langle h_i|h_j\\rangle = \\delta_{ij}$. Consistent with the Heitler–London viewpoint that bonding stabilization increases with overlap amplitude along the bond axis, determine the hybridization index\n$$\nn \\;\\equiv\\; \\frac{b^2}{a^2}\n$$\nthat optimizes overlap along the directions $\\{\\mathbf{u}_i\\}$ subject to the orthonormality constraints, expressed in closed form as a function of $\\gamma$. Provide your final answer as a single analytic expression for $n$ in terms of $\\gamma$. No numerical evaluation or rounding is required, and no units are to be reported in the final answer.", "solution": "The goal is to determine the hybridization index $n = b^2/a^2$ by enforcing the orthonormality condition $\\langle h_i|h_j\\rangle = \\delta_{ij}$ on the provided hybrid orbital ansatz.\n\nThe hybrid orbitals are given by:\n$$|h_i\\rangle = a|s\\rangle + b(\\mathbf{u}_i \\cdot \\mathbf{p})$$\nwhere the coefficients $a$ and $b$ are real constants, and $\\mathbf{u}_i \\cdot \\mathbf{p}$ is a shorthand for the linear combination of $p$ orbitals:\n$$\\mathbf{u}_i \\cdot \\mathbf{p} = u_{ix}|p_x\\rangle + u_{iy}|p_y\\rangle + u_{iz}|p_z\\rangle$$\nwhere $\\mathbf{u}_i = (u_{ix}, u_{iy}, u_{iz})$ is the $i$-th unit vector.\n\nThe inner product of two hybrid orbitals, $\\langle h_i|h_j\\rangle$, is calculated as follows:\n$$\\langle h_i|h_j\\rangle = \\left\\langle a\\langle s| + b\\langle \\mathbf{u}_i \\cdot \\mathbf{p}| \\right) \\left( a|s\\rangle + b|\\mathbf{u}_j \\cdot \\mathbf{p}\\rangle \\right)$$\nExpanding this expression gives four terms:\n$$\\langle h_i|h_j\\rangle = a^2\\langle s|s\\rangle + ab\\langle s|\\mathbf{u}_j \\cdot \\mathbf{p}\\rangle + ab\\langle \\mathbf{u}_i \\cdot \\mathbf{p}|s\\rangle + b^2\\langle \\mathbf{u}_i \\cdot \\mathbf{p}|\\mathbf{u}_j \\cdot \\mathbf{p}\\rangle$$\n\nWe evaluate each term using the given orthonormality relations of the atomic orbitals:\n1.  $\\langle s|s\\rangle = 1$.\n2.  $\\langle s|\\mathbf{u}_j \\cdot \\mathbf{p}\\rangle = \\langle s| (u_{jx}|p_x\\rangle + u_{jy}|p_y\\rangle + u_{jz}|p_z\\rangle) = u_{jx}\\langle s|p_x\\rangle + u_{jy}\\langle s|p_y\\rangle + u_{jz}\\langle s|p_z\\rangle = 0$, since $\\langle s|p_{\\alpha}\\rangle = 0$.\n3.  Similarly, $\\langle \\mathbf{u}_i \\cdot \\mathbf{p}|s\\rangle = 0$.\n4.  The final term involves the inner product of two linear combinations of $p$ orbitals:\n    $$\\langle \\mathbf{u}_i \\cdot \\mathbf{p}|\\mathbf{u}_j \\cdot \\mathbf{p}\\rangle = \\langle u_{ix}\\langle p_x| + u_{iy}\\langle p_y| + u_{iz}\\langle p_z| \\Big| u_{jx}|p_x\\rangle + u_{jy}|p_y\\rangle + u_{jz}|p_z\\rangle \\rangle$$\n    Using the orthogonality $\\langle p_{\\alpha}|p_{\\beta}\\rangle = \\delta_{\\alpha\\beta}$, this simplifies to:\n    $$u_{ix}u_{jx}\\langle p_x|p_x\\rangle + u_{iy}u_{jy}\\langle p_y|p_y\\rangle + u_{iz}u_{jz}\\langle p_z|p_z\\rangle = u_{ix}u_{jx} + u_{iy}u_{jy} + u_{iz}u_{jz} = \\mathbf{u}_i \\cdot \\mathbf{u}_j$$\n\nSubstituting these results back into the expression for $\\langle h_i|h_j\\rangle$:\n$$\\langle h_i|h_j\\rangle = a^2(1) + ab(0) + ab(0) + b^2(\\mathbf{u}_i \\cdot \\mathbf{u}_j) = a^2 + b^2(\\mathbf{u}_i \\cdot \\mathbf{u}_j)$$\n\nNow, we apply the orthonormality condition for the hybrid orbitals, $\\langle h_i|h_j\\rangle = \\delta_{ij}$. This leads to two separate cases.\n\nCase 1: Normalization ($i=j$)\nFor $i=j$, we have $\\delta_{ii} = 1$. The dot product $\\mathbf{u}_i \\cdot \\mathbf{u}_i = |\\mathbf{u}_i|^2 = 1$ since $\\mathbf{u}_i$ is a unit vector.\nThe condition becomes:\n$$\\langle h_i|h_i\\rangle = a^2 + b^2(1) = 1 \\implies a^2 + b^2 = 1$$\nThis is the normalization condition for each hybrid orbital. It states that the sum of the s-character ($a^2$) and p-character ($b^2$) must be unity.\n\nCase 2: Orthogonality ($i \\neq j$)\nFor $i \\neq j$, we have $\\delta_{ij} = 0$. The problem states that for distinct vectors, $\\mathbf{u}_i \\cdot \\mathbf{u}_j = \\gamma$.\nThe condition becomes:\n$$\\langle h_i|h_j\\rangle = a^2 + b^2\\gamma = 0$$\nThis is the orthogonality condition between any two distinct equivalent hybrid orbitals.\n\nWe now have a system of two linear equations for $a^2$ and $b^2$:\n1.  $a^2 + b^2 = 1$\n2.  $a^2 + b^2\\gamma = 0$\n\nThe problem asks for the hybridization index $n = b^2/a^2$. From the second equation, we can express $a^2$ in terms of $b^2$:\n$$a^2 = -b^2\\gamma$$\nSince $a$ and $b$ are real coefficients for non-trivial hybrids, $a^2 > 0$ and $b^2 > 0$. This implies that $\\gamma$ must be negative, which is consistent with the problem statement ($\\gamma < 0$).\n\nWe can now find the ratio $n$:\n$$n = \\frac{b^2}{a^2} = \\frac{b^2}{-b^2\\gamma}$$\nAssuming $b^2 \\neq 0$ (otherwise the hybrids would be pure s-orbitals, which cannot be mutually orthogonal unless N=1), we can cancel $b^2$:\n$$n = -\\frac{1}{\\gamma}$$\n\nThis result provides the hybridization index purely in terms of the geometric parameter $\\gamma$. The phrase \"optimizes overlap\" in the problem statement is satisfied by the very structure of the ansatz, which aligns the p-orbital component of the hybrid along the bond direction $\\mathbf{u}_i$. The calculation then finds the specific mixing coefficients required to satisfy the fundamental quantum mechanical requirement of orthonormality for these optimally-directed orbitals.", "answer": "$$\n\\boxed{-\\frac{1}{\\gamma}}\n$$", "id": "2935119"}, {"introduction": "Moving from foundational theory to modern computational practice, this exercise bridges the gap between analytical models and numerical optimization. In modern Valence Bond calculations, the energy is minimized with respect to variational parameters like orbital exponents and the mixing coefficients of different VB structures. This problem challenges you to derive and implement an algorithm to compute the analytical gradients of the VB energy, a crucial step for any efficient gradient-based optimization method used in computational chemistry research [@problem_id:2935027].", "problem": "Consider a simplified two-structure Valence Bond (VB) Heitler–London model for a diatomic molecule in which the VB wave function is parameterized by a vector of real structure coefficients $\\mathbf{c} \\in \\mathbb{R}^2$ and an orbital exponent $\\zeta \\in \\mathbb{R}_{>0}$ controlling Slater-type $1s$ orbitals used to build the VB structures. The total electronic energy in the Rayleigh–Ritz variational form is\n$$\nE(\\mathbf{c},\\zeta) \\;=\\; \\frac{\\mathbf{c}^{\\mathsf{T}}\\,\\mathbf{H}(\\zeta)\\,\\mathbf{c}}{\\mathbf{c}^{\\mathsf{T}}\\,\\mathbf{S}(\\zeta)\\,\\mathbf{c}} \\,,\n$$\nwhere $\\mathbf{H}(\\zeta)$ is the $2\\times 2$ Hamiltonian matrix and $\\mathbf{S}(\\zeta)$ is the $2\\times 2$ overlap matrix of the two non-orthogonal VB structures. For algorithm design and testing, assume the following smooth and symmetric parametrizations for the matrix elements:\n- Hamiltonian:\n$$\nH_{11}(\\zeta) \\;=\\; h_0 \\;+\\; h_1\\,e^{-\\alpha\\,\\zeta}, \\qquad\nH_{22}(\\zeta) \\;=\\; h_0 \\;+\\; \\Delta \\;+\\; h_2\\,e^{-\\alpha\\,\\zeta}, \\qquad\nH_{12}(\\zeta) \\;=\\; H_{21}(\\zeta) \\;=\\; k\\,e^{-\\beta\\,\\zeta}.\n$$\n- Overlap:\n$$\nS_{11}(\\zeta) \\;=\\; 1, \\qquad\nS_{22}(\\zeta) \\;=\\; 1, \\qquad\nS_{12}(\\zeta) \\;=\\; S_{21}(\\zeta) \\;=\\; s_0\\,e^{-\\gamma\\,\\zeta}.\n$$\n\nAll energies must be expressed in Hartree (atomic units), and the orbital exponent $\\zeta$ is in inverse bohr. Therefore, the gradient with respect to the structure coefficients has units of Hartree, and the gradient with respect to $\\zeta$ has units of Hartree·bohr.\n\nTask:\n1) Starting only from the Rayleigh–Ritz energy definition and the given functional forms of $\\mathbf{H}(\\zeta)$ and $\\mathbf{S}(\\zeta)$, derive a mathematically rigorous algorithm to compute:\n- The energy $E(\\mathbf{c},\\zeta)$.\n- The gradient with respect to the structure coefficients $\\nabla_{\\mathbf{c}} E(\\mathbf{c},\\zeta)$, treating $\\mathbf{c}$ as an unconstrained real vector.\n- The partial derivative with respect to the orbital exponent $\\partial E(\\mathbf{c},\\zeta)/\\partial \\zeta$, holding $\\mathbf{c}$ fixed.\n\nThe derivation must start from fundamental principles: the variational definition of the energy as a Rayleigh quotient, basic rules of differential calculus (quotient rule and chain rule), and symmetry of $\\mathbf{H}(\\zeta)$ and $\\mathbf{S}(\\zeta)$.\n\n2) Implement the derived algorithm as a program that, for each test case below, computes:\n- The scalar energy $E(\\mathbf{c},\\zeta)$ in Hartree.\n- The two components of the gradient vector $\\nabla_{\\mathbf{c}} E(\\mathbf{c},\\zeta)$ in Hartree.\n- The scalar derivative $\\partial E(\\mathbf{c},\\zeta)/\\partial \\zeta$ in Hartree·bohr.\n\nThe program must produce these four quantities as a list of four floating-point numbers for each test case in the order $[E, \\, (\\nabla_{\\mathbf{c}} E)_1, \\, (\\nabla_{\\mathbf{c}} E)_2, \\, \\partial E/\\partial \\zeta]$.\n\nUse the following test suite, where each case specifies the parameters $(h_0,\\Delta,h_1,h_2,\\alpha,k,\\beta,s_0,\\gamma)$, the orbital exponent $\\zeta$, and the coefficient vector $\\mathbf{c}$:\n- Case A:\n  - Parameters $(h_0,\\Delta,h_1,h_2,\\alpha,k,\\beta,s_0,\\gamma) = (-1.0, \\, 0.25, \\, -0.3, \\, -0.12, \\, 1.2, \\, -0.07, \\, 0.9, \\, 0.5, \\, 1.1)$\n  - $\\zeta = 1.3$\n  - $\\mathbf{c} = [0.8, \\, 0.6]$\n- Case B:\n  - Parameters $(h_0,\\Delta,h_1,h_2,\\alpha,k,\\beta,s_0,\\gamma) = (-0.9, \\, 0.15, \\, -0.25, \\, -0.05, \\, 1.0, \\, -0.04, \\, 0.7, \\, 0.6, \\, 0.9)$\n  - $\\zeta = 0.7$\n  - $\\mathbf{c} = [-0.3, \\, 1.1]$\n- Case C:\n  - Parameters $(h_0,\\Delta,h_1,h_2,\\alpha,k,\\beta,s_0,\\gamma) = (-1.1, \\, 0.3, \\, -0.2, \\, -0.08, \\, 1.5, \\, -0.06, \\, 1.2, \\, 0.4, \\, 1.3)$\n  - $\\zeta = 2.1$\n  - $\\mathbf{c} = [1.0, \\, -0.4]$\n\nNumerical and output requirements:\n- Your program must compute and return floating-point values for each requested quantity.\n- The final output must be a single line containing a list of the three case results, where each case result is a list in the order specified above. For example, the output format must be\n  $[[E_A, g_{A,1}, g_{A,2}, dE_A/d\\zeta], [E_B, g_{B,1}, g_{B,2}, dE_B/d\\zeta], [E_C, g_{C,1}, g_{C,2}, dE_C/d\\zeta]]$,\n  with no extra characters or whitespace requirements beyond standard list formatting.\n- All energies must be in Hartree, and the derivative with respect to $\\zeta$ must be in Hartree·bohr.", "solution": "The total electronic energy is given by the Rayleigh quotient:\n$$\nE(\\mathbf{c},\\zeta) \\;=\\; \\frac{\\mathbf{c}^{\\mathsf{T}}\\,\\mathbf{H}(\\zeta)\\,\\mathbf{c}}{\\mathbf{c}^{\\mathsf{T}}\\,\\mathbf{S}(\\zeta)\\,\\mathbf{c}}\n$$\nLet us denote the numerator as $N(\\mathbf{c}, \\zeta) = \\mathbf{c}^{\\mathsf{T}}\\mathbf{H}(\\zeta)\\mathbf{c}$ and the denominator as $D(\\mathbf{c}, \\zeta) = \\mathbf{c}^{\\mathsf{T}}\\mathbf{S}(\\zeta)\\mathbf{c}$. The vector of coefficients is $\\mathbf{c} = [c_1, c_2]^{\\mathsf{T}}$. The matrices $\\mathbf{H}(\\zeta)$ and $\\mathbf{S}(\\zeta)$ are symmetric.\n\nThe explicit forms for $N$ and $D$ are:\n$$\nN(\\mathbf{c},\\zeta) = c_1^2 H_{11}(\\zeta) + c_2^2 H_{22}(\\zeta) + 2c_1 c_2 H_{12}(\\zeta)\n$$\n$$\nD(\\mathbf{c},\\zeta) = c_1^2 S_{11}(\\zeta) + c_2^2 S_{22}(\\zeta) + 2c_1 c_2 S_{12}(\\zeta) = c_1^2 + c_2^2 + 2c_1 c_2 S_{12}(\\zeta)\n$$\nwhere we have substituted the given values $S_{11}(\\zeta) = 1$ and $S_{22}(\\zeta) = 1$.\n\n**1. Algorithm for Energy $E(\\mathbf{c},\\zeta)$**\n\nThe energy is computed directly by evaluating the expression for $E = N/D$ using the given parameters, $\\mathbf{c}$, and $\\zeta$. This involves first computing the matrix elements $H_{ij}(\\zeta)$ and $S_{12}(\\zeta)$, then the quadratic forms $N$ and $D$, and finally their ratio.\n\n**2. Algorithm for the Gradient $\\nabla_{\\mathbf{c}} E(\\mathbf{c},\\zeta)$**\n\nThe gradient of the energy with respect to the coefficients $\\mathbf{c}$ is a vector with components $\\frac{\\partial E}{\\partial c_1}$ and $\\frac{\\partial E}{\\partial c_2}$. We apply the quotient rule for differentiation. For a generic component $c_i$:\n$$\n\\frac{\\partial E}{\\partial c_i} = \\frac{\\frac{\\partial N}{\\partial c_i} D - N \\frac{\\partial D}{\\partial c_i}}{D^2} = \\frac{1}{D} \\left( \\frac{\\partial N}{\\partial c_i} - \\frac{N}{D} \\frac{\\partial D}{\\partial c_i} \\right) = \\frac{1}{D} \\left( \\frac{\\partial N}{\\partial c_i} - E \\frac{\\partial D}{\\partial c_i} \\right)\n$$\nThe derivatives of the quadratic forms $N$ and $D$ with respect to the vector $\\mathbf{c}$ are:\n$$\n\\nabla_{\\mathbf{c}} N = \\nabla_{\\mathbf{c}} (\\mathbf{c}^{\\mathsf{T}}\\mathbf{H}\\mathbf{c}) = 2\\mathbf{H}\\mathbf{c}\n$$\n$$\n\\nabla_{\\mathbf{c}} D = \\nabla_{\\mathbf{c}} (\\mathbf{c}^{\\mathsf{T}}\\mathbf{S}\\mathbf{c}) = 2\\mathbf{S}\\mathbf{c}\n$$\nThe symmetry of $\\mathbf{H}$ and $\\mathbf{S}$ is used here. Substituting these into the expression for the gradient $\\nabla_{\\mathbf{c}} E$:\n$$\n\\nabla_{\\mathbf{c}} E(\\mathbf{c},\\zeta) = \\frac{1}{D} (2\\mathbf{H}\\mathbf{c} - E \\cdot 2\\mathbf{S}\\mathbf{c}) = \\frac{2}{\\mathbf{c}^{\\mathsf{T}}\\mathbf{S}(\\zeta)\\mathbf{c}} \\left( \\mathbf{H}(\\zeta) - E(\\mathbf{c},\\zeta) \\mathbf{S}(\\zeta) \\right) \\mathbf{c}\n$$\nThis is the final expression for the gradient with respect to the coefficients. To compute it, one must first compute the energy $E$.\n\n**3. Algorithm for the Derivative $\\partial E(\\mathbf{c},\\zeta) / \\partial \\zeta$**\n\nTo find the partial derivative with respect to the orbital exponent $\\zeta$, we again apply the quotient rule, treating $\\mathbf{c}$ as constant.\n$$\n\\frac{\\partial E}{\\partial \\zeta} = \\frac{1}{D} \\left( \\frac{\\partial N}{\\partial \\zeta} - E \\frac{\\partial D}{\\partial \\zeta} \\right)\n$$\nThe necessary derivatives are found using the chain rule. Let $\\mathbf{H}'(\\zeta) = d\\mathbf{H}(\\zeta)/d\\zeta$ and $\\mathbf{S}'(\\zeta) = d\\mathbf{S}(\\zeta)/d\\zeta$.\n$$\n\\frac{\\partial N}{\\partial \\zeta} = \\frac{\\partial}{\\partial \\zeta} (\\mathbf{c}^{\\mathsf{T}}\\mathbf{H}(\\zeta)\\mathbf{c}) = \\mathbf{c}^{\\mathsf{T}} \\mathbf{H}'(\\zeta) \\mathbf{c}\n$$\n$$\n\\frac{\\partial D}{\\partial \\zeta} = \\frac{\\partial}{\\partial \\zeta} (\\mathbf{c}^{\\mathsf{T}}\\mathbf{S}(\\zeta)\\mathbf{c}) = \\mathbf{c}^{\\mathsf{T}} \\mathbf{S}'(\\zeta) \\mathbf{c}\n$$\nThis gives the so-called analytic derivative expression, related to the Hellmann-Feynman theorem:\n$$\n\\frac{\\partial E(\\mathbf{c},\\zeta)}{\\partial \\zeta} = \\frac{\\mathbf{c}^{\\mathsf{T}}\\mathbf{H}'(\\zeta)\\mathbf{c} - E(\\mathbf{c},\\zeta) \\mathbf{c}^{\\mathsf{T}}\\mathbf{S}'(\\zeta)\\mathbf{c}}{\\mathbf{c}^{\\mathsf{T}}\\mathbf{S}(\\zeta)\\mathbf{c}}\n$$\nWe need the derivatives of the matrix elements with respect to $\\zeta$:\n- Hamiltonian derivatives:\n$$\n\\frac{d H_{11}}{d\\zeta} = \\frac{d}{d\\zeta}(h_0 + h_1 e^{-\\alpha\\zeta}) = -\\alpha h_1 e^{-\\alpha\\zeta}\n$$\n$$\n\\frac{d H_{22}}{d\\zeta} = \\frac{d}{d\\zeta}(h_0 + \\Delta + h_2 e^{-\\alpha\\zeta}) = -\\alpha h_2 e^{-\\alpha\\zeta}\n$$\n$$\n\\frac{d H_{12}}{d\\zeta} = \\frac{d H_{21}}{d\\zeta} = \\frac{d}{d\\zeta}(k e^{-\\beta\\zeta}) = -\\beta k e^{-\\beta\\zeta}\n$$\n- Overlap derivatives:\n$$\n\\frac{d S_{11}}{d\\zeta} = 0, \\qquad \\frac{d S_{22}}{d\\zeta} = 0\n$$\n$$\n\\frac{d S_{12}}{d\\zeta} = \\frac{d S_{21}}{d\\zeta} = \\frac{d}{d\\zeta}(s_0 e^{-\\gamma\\zeta}) = -\\gamma s_0 e^{-\\gamma\\zeta}\n$$\nThese components are assembled into the matrices $\\mathbf{H}'(\\zeta)$ and $\\mathbf{S}'(\\zeta)$ to compute the derivative $\\partial E/\\partial\\zeta$.\n\n**Summary of the Algorithm**\n\nFor a given set of parameters $(h_0, \\Delta, \\dots, \\gamma)$, a coefficient vector $\\mathbf{c}$, and an exponent $\\zeta$:\n1.  Compute the matrix elements $H_{11}, H_{22}, H_{12}, S_{12}$ using their defining exponential functions of $\\zeta$. Construct the matrices $\\mathbf{H}(\\zeta)$ and $\\mathbf{S}(\\zeta)$.\n2.  Compute the numerical value of the numerator $N = \\mathbf{c}^{\\mathsf{T}}\\mathbf{H}\\mathbf{c}$ and the denominator $D = \\mathbf{c}^{\\mathsf{T}}\\mathbf{S}\\mathbf{c}$.\n3.  Calculate the energy $E = N/D$.\n4.  Compute the gradient vector $\\nabla_{\\mathbf{c}} E = \\frac{2}{D} (\\mathbf{H} - E\\mathbf{S})\\mathbf{c}$. This yields the two components $(\\nabla_{\\mathbf{c}} E)_1$ and $(\\nabla_{\\mathbf{c}} E)_2$.\n5.  Compute the elements of the derivative matrices $\\mathbf{H}'(\\zeta)$ and $\\mathbf{S}'(\\zeta)$ using the derived expressions.\n6.  Calculate the quadratic forms involving these derivative matrices: $\\mathbf{c}^{\\mathsf{T}}\\mathbf{H}'\\mathbf{c}$ and $\\mathbf{c}^{\\mathsf{T}}\\mathbf{S}'\\mathbf{c}$.\n7.  Calculate the derivative with respect to the exponent: $\\frac{\\partial E}{\\partial\\zeta} = \\frac{1}{D} (\\mathbf{c}^{\\mathsf{T}}\\mathbf{H}'\\mathbf{c} - E \\cdot \\mathbf{c}^{\\mathsf{T}}\\mathbf{S}'\\mathbf{c})$.\n8.  Return the four computed floating-point numbers: $[E, (\\nabla_{\\mathbf{c}} E)_1, (\\nabla_{\\mathbf{c}} E)_2, \\partial E/\\partial \\zeta]$.\n\nThis procedure is deterministic and provides the exact analytical derivatives required by the problem statement.", "answer": "```python\nimport numpy as np\n\ndef calculate_energy_and_gradients(params, zeta, c_vec):\n    \"\"\"\n    Calculates the energy and its derivatives for the VB model.\n\n    Args:\n        params (tuple): Model parameters (h0, Delta, h1, h2, alpha, k, beta, s0, gamma).\n        zeta (float): The orbital exponent.\n        c_vec (list or np.ndarray): The vector of structure coefficients [c1, c2].\n\n    Returns:\n        list: A list containing [E, (grad_c E)_1, (grad_c E)_2, dE/dzeta].\n    \"\"\"\n    h0, Delta, h1, h2, alpha, k, beta, s0, gamma = params\n    c = np.array(c_vec)\n\n    # Calculate exponential factors\n    exp_alpha_zeta = np.exp(-alpha * zeta)\n    exp_beta_zeta = np.exp(-beta * zeta)\n    exp_gamma_zeta = np.exp(-gamma * zeta)\n\n    # --- Step 1: Construct H and S matrices ---\n    H = np.zeros((2, 2))\n    H[0, 0] = h0 + h1 * exp_alpha_zeta\n    H[1, 1] = h0 + Delta + h2 * exp_alpha_zeta\n    H[0, 1] = H[1, 0] = k * exp_beta_zeta\n\n    S = np.zeros((2, 2))\n    S[0, 0] = 1.0\n    S[1, 1] = 1.0\n    S[0, 1] = S[1, 0] = s0 * exp_gamma_zeta\n\n    # --- Step 2 & 3: Calculate N, D, and Energy E ---\n    N = c.T @ H @ c\n    D = c.T @ S @ c\n    \n    if np.isclose(D, 0.0):\n        # This case is physically problematic and mathematically undefined.\n        # For the given test cases, D is positive definite and c is non-zero.\n        # This branch should not be reached.\n        return [np.nan, np.nan, np.nan, np.nan]\n        \n    E = N / D\n\n    # --- Step 4: Calculate gradient with respect to c ---\n    grad_c_E = (2.0 / D) * (H - E * S) @ c\n    \n    # --- Step 5, 6, 7: Calculate derivative with respect to zeta ---\n    # Construct derivative matrices H' and S'\n    H_prime = np.zeros((2, 2))\n    H_prime[0, 0] = -alpha * h1 * exp_alpha_zeta\n    H_prime[1, 1] = -alpha * h2 * exp_alpha_zeta\n    H_prime[0, 1] = H_prime[1, 0] = -beta * k * exp_beta_zeta\n\n    S_prime = np.zeros((2, 2))\n    S_prime[0, 1] = S_prime[1, 0] = -gamma * s0 * exp_gamma_zeta\n\n    # Calculate quadratic forms for derivative\n    num_deriv_N = c.T @ H_prime @ c\n    num_deriv_D = c.T @ S_prime @ c\n\n    dE_dzeta = (num_deriv_N - E * num_deriv_D) / D\n\n    # --- Step 8: Return results ---\n    return [E, grad_c_E[0], grad_c_E[1], dE_dzeta]\n\ndef solve():\n    \"\"\"\n    Main function to run the test suite and print results.\n    \"\"\"\n    # Define the test cases from the problem statement.\n    test_cases = [\n        # Case A\n        {\n            \"params\": (-1.0, 0.25, -0.3, -0.12, 1.2, -0.07, 0.9, 0.5, 1.1),\n            \"zeta\": 1.3,\n            \"c\": [0.8, 0.6]\n        },\n        # Case B\n        {\n            \"params\": (-0.9, 0.15, -0.25, -0.05, 1.0, -0.04, 0.7, 0.6, 0.9),\n            \"zeta\": 0.7,\n            \"c\": [-0.3, 1.1]\n        },\n        # Case C\n        {\n            \"params\": (-1.1, 0.3, -0.2, -0.08, 1.5, -0.06, 1.2, 0.4, 1.3),\n            \"zeta\": 2.1,\n            \"c\": [1.0, -0.4]\n        }\n    ]\n\n    results = []\n    for case in test_cases:\n        result = calculate_energy_and_gradients(case[\"params\"], case[\"zeta\"], case[\"c\"])\n        results.append(result)\n\n    # Final print statement in the exact required format.\n    # The string representation of a list of lists matches the required output format.\n    # Joining string representations of inner lists produces the correct final string.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2935027"}]}