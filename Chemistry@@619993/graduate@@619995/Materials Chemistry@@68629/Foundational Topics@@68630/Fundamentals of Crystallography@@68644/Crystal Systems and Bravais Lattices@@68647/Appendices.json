{"hands_on_practices": [{"introduction": "The classification of crystals into 14 Bravais lattices is foundational, but it raises a key question: why are certain seemingly valid lattices, like face-centered tetragonal, excluded? This exercise delves into the core principles of conventional unit cells by demonstrating that such a lattice is redundant [@problem_id:2295783]. By finding a smaller, more fundamental body-centered tetragonal cell within the face-centered structure, you will gain a deeper understanding of how symmetry and convention are used to define the canonical Bravais lattices.", "problem": "In solid-state chemistry, crystal lattices are classified into 14 unique Bravais lattices, which represent all possible ways to arrange points in space with translational symmetry. A crystallographer studying a new metallic alloy finds that its atomic positions can be described by a unit cell that has orthogonal axes of lengths $a, a, c$ and lattice points at both the corners and the centers of all six faces. This is known as a face-centered tetragonal (FCT) lattice. However, the FCT lattice is not one of the 14 conventional Bravais lattices because it can be represented by a smaller, more fundamental unit cell. The conventional representation of this same lattice of points is a body-centered tetragonal (BCT) unit cell, which has its own set of orthogonal axes with lengths $a'$ and $c'$.\n\nYour task is to determine the lattice parameters $a'$ and $c'$ for the conventional BCT cell in terms of the parameters $a$ and $c$ of the non-conventional FCT cell. Present your final answer as an ordered pair of expressions $(a', c')$.", "solution": "Let the conventional face-centered tetragonal (FCT) cell have orthogonal basis vectors $\\mathbf{A}_{1}=(a,0,0)$, $\\mathbf{A}_{2}=(0,a,0)$, and $\\mathbf{A}_{3}=(0,0,c)$. The F-centering translations are $\\mathbf{f}_{1}=\\left(0,\\frac{a}{2},\\frac{c}{2}\\right)$, $\\mathbf{f}_{2}=\\left(\\frac{a}{2},0,\\frac{c}{2}\\right)$, and $\\mathbf{f}_{3}=\\left(\\frac{a}{2},\\frac{a}{2},0\\right)$, so the Bravais lattice is generated by $\\mathbf{A}_{1},\\mathbf{A}_{2},\\mathbf{A}_{3}$ together with these centering vectors.\n\nDefine a new set of orthogonal basis vectors by\n$$\n\\mathbf{b}_{1}=\\frac{1}{2}\\left(\\mathbf{A}_{1}+\\mathbf{A}_{2}\\right)=\\left(\\frac{a}{2},\\frac{a}{2},0\\right),\\quad\n\\mathbf{b}_{2}=\\frac{1}{2}\\left(-\\mathbf{A}_{1}+\\mathbf{A}_{2}\\right)=\\left(-\\frac{a}{2},\\frac{a}{2},0\\right),\\quad\n\\mathbf{b}_{3}=\\mathbf{A}_{3}=(0,0,c).\n$$\nThese satisfy $\\mathbf{b}_{1}\\cdot\\mathbf{b}_{2}=0$, $\\mathbf{b}_{1}\\cdot\\mathbf{b}_{3}=0$, and $\\mathbf{b}_{2}\\cdot\\mathbf{b}_{3}=0$, hence they form an orthogonal tetragonal basis. Their lengths are\n$$\n|\\mathbf{b}_{1}|=\\sqrt{\\left(\\frac{a}{2}\\right)^{2}+\\left(\\frac{a}{2}\\right)^{2}}=\\frac{a}{\\sqrt{2}},\\quad\n|\\mathbf{b}_{2}|=\\frac{a}{\\sqrt{2}},\\quad\n|\\mathbf{b}_{3}|=c,\n$$\nso the corresponding tetragonal parameters are $a'=\\frac{a}{\\sqrt{2}}$ and $c'=c$.\n\nTo confirm the body-centering, note that the body-centering vector of this cell is\n$$\n\\frac{\\mathbf{b}_{1}+\\mathbf{b}_{2}+\\mathbf{b}_{3}}{2}=\\left(0,\\frac{a}{2},\\frac{c}{2}\\right)=\\mathbf{f}_{1},\n$$\nwhich is a lattice translation present in the original FCT lattice; thus the conventional cell defined by $\\mathbf{b}_{i}$ is body-centered tetragonal.\n\nA volume check is consistent: the FCT conventional cell volume is $V_{\\mathrm{FCT}}=a^{2}c$ with four lattice points, so the primitive volume is $\\frac{a^{2}c}{4}$. The body-centered tetragonal conventional cell has two lattice points and volume\n$$\nV_{\\mathrm{BCT}}=a'^{2}c'=\\left(\\frac{a}{\\sqrt{2}}\\right)^{2}c=\\frac{a^{2}c}{2}=2\\times\\frac{a^{2}c}{4},\n$$\nas required.\n\nTherefore, the FCT lattice with parameters $(a,a,c)$ is equivalently described by a BCT conventional cell with parameters $(a',c')=\\left(\\frac{a}{\\sqrt{2}},\\,c\\right)$.", "answer": "$$\\boxed{\\left(\\frac{a}{\\sqrt{2}}, c\\right)}$$", "id": "2295783"}, {"introduction": "A single crystal lattice can often be described by different unit cells, with the choice of convention typically made to highlight the underlying symmetry most clearly. This practice provides a rigorous, first-principles workout in transforming between two descriptions of the same lattice: the primitive rhombohedral and the conventional hexagonal setting [@problem_id:2477806]. Mastering this type of vector-based coordinate transformation is an essential skill for navigating crystallographic databases and understanding the relationships between different crystal families.", "problem": "A three-dimensional Bravais lattice in the trigonal crystal family is described in the primitive rhombohedral setting by three primitive vectors $\\mathbf{a}_{1}$, $\\mathbf{a}_{2}$, $\\mathbf{a}_{3}$ of equal length $|\\mathbf{a}_{i}|=a$ with equal interaxial angles $\\angle(\\mathbf{a}_{i},\\mathbf{a}_{j})=\\alpha$ for $i\\neq j$. Consider the specific case where the interaxial angle is $\\alpha=60^\\circ$.\n\nUsing only the core definitions of a Bravais lattice and the Euclidean dot product in $\\mathbb{R}^{3}$, construct a conventional hexagonal cell (rhombohedral centering in a hexagonal conventional cell) for the same lattice by defining new basis vectors as linear combinations of the primitive rhombohedral vectors:\n$$\n\\mathbf{A}_{1}=\\mathbf{a}_{2}-\\mathbf{a}_{3},\\quad\n\\mathbf{A}_{2}=\\mathbf{a}_{3}-\\mathbf{a}_{1},\\quad\n\\mathbf{A}_{3}=\\mathbf{a}_{1}+\\mathbf{a}_{2}+\\mathbf{a}_{3}.\n$$\nFrom first principles, derive closed-form expressions for the basal-plane lattice parameter $a_{h}=|\\mathbf{A}_{1}|=|\\mathbf{A}_{2}|$ and the $c$-axis parameter $c_{h}=|\\mathbf{A}_{3}|$ in terms of $a$ and $\\alpha$, and then evaluate these explicitly at $\\alpha=60^\\circ$ to obtain $a_{h}$ and $c_{h}$ as functions of $a$.\n\nReport your final result as analytic expressions. No numerical rounding is required. Do not include units in your final answer.", "solution": "The foundation of this derivation is the definition of the Euclidean dot product. The magnitude squared of any vector $\\mathbf{v}$ is given by $|\\mathbf{v}|^2 = \\mathbf{v} \\cdot \\mathbf{v}$. The dot product between any two primitive vectors $\\mathbf{a}_{i}$ and $\\mathbf{a}_{j}$ can be expressed in terms of the given parameters $a$ and $\\alpha$.\nFor $i = j$:\n$$\n\\mathbf{a}_{i} \\cdot \\mathbf{a}_{i} = |\\mathbf{a}_{i}|^2 = a^2\n$$\nFor $i \\neq j$:\n$$\n\\mathbf{a}_{i} \\cdot \\mathbf{a}_{j} = |\\mathbf{a}_{i}| |\\mathbf{a}_{j}| \\cos(\\angle(\\mathbf{a}_{i}, \\mathbf{a}_{j})) = a \\cdot a \\cos(\\alpha) = a^2 \\cos(\\alpha)\n$$\n\nFirst, we derive the expression for the basal-plane lattice parameter $a_h = |\\mathbf{A}_1|$. We compute its square, $a_h^2$:\n$$\na_h^2 = |\\mathbf{A}_{1}|^2 = \\mathbf{A}_{1} \\cdot \\mathbf{A}_{1} = (\\mathbf{a}_{2} - \\mathbf{a}_{3}) \\cdot (\\mathbf{a}_{2} - \\mathbf{a}_{3})\n$$\nExpanding the dot product using its distributive property:\n$$\na_h^2 = \\mathbf{a}_{2} \\cdot \\mathbf{a}_{2} - \\mathbf{a}_{2} \\cdot \\mathbf{a}_{3} - \\mathbf{a}_{3} \\cdot \\mathbf{a}_{2} + \\mathbf{a}_{3} \\cdot \\mathbf{a}_{3}\n$$\nSince the dot product is commutative ($\\mathbf{a}_{2} \\cdot \\mathbf{a}_{3} = \\mathbf{a}_{3} \\cdot \\mathbf{a}_{2}$), this simplifies to:\n$$\na_h^2 = |\\mathbf{a}_{2}|^2 - 2(\\mathbf{a}_{2} \\cdot \\mathbf{a}_{3}) + |\\mathbf{a}_{3}|^2\n$$\nSubstituting the dot product relations previously established:\n$$\na_h^2 = a^2 - 2(a^2 \\cos(\\alpha)) + a^2 = 2a^2 - 2a^2 \\cos(\\alpha) = 2a^2(1 - \\cos(\\alpha))\n$$\nUsing the half-angle trigonometric identity $1 - \\cos(\\alpha) = 2 \\sin^2(\\frac{\\alpha}{2})$:\n$$\na_h^2 = 2a^2 \\left( 2 \\sin^2\\left(\\frac{\\alpha}{2}\\right) \\right) = 4a^2 \\sin^2\\left(\\frac{\\alpha}{2}\\right)\n$$\nTaking the square root, we obtain the general expression for $a_h$ in terms of $a$ and $\\alpha$. Since for a rhombohedral lattice $0  \\alpha  120^\\circ$, the term $\\sin(\\alpha/2)$ is always positive.\n$$\na_h = \\sqrt{4a^2 \\sin^2\\left(\\frac{\\alpha}{2}\\right)} = 2a \\sin\\left(\\frac{\\alpha}{2}\\right)\n$$\n\nNext, we derive the expression for the $c$-axis parameter $c_h = |\\mathbf{A}_3|$. We compute its square, $c_h^2$:\n$$\nc_h^2 = |\\mathbf{A}_{3}|^2 = \\mathbf{A}_{3} \\cdot \\mathbf{A}_{3} = (\\mathbf{a}_{1} + \\mathbf{a}_{2} + \\mathbf{a}_{3}) \\cdot (\\mathbf{a}_{1} + \\mathbf{a}_{2} + \\mathbf{a}_{3})\n$$\nExpanding the dot product:\n$$\nc_h^2 = (\\mathbf{a}_{1} \\cdot \\mathbf{a}_{1} + \\mathbf{a}_{2} \\cdot \\mathbf{a}_{2} + \\mathbf{a}_{3} \\cdot \\mathbf{a}_{3}) + 2(\\mathbf{a}_{1} \\cdot \\mathbf{a}_{2} + \\mathbf{a}_{1} \\cdot \\mathbf{a}_{3} + \\mathbf{a}_{2} \\cdot \\mathbf{a}_{3})\n$$\nSubstituting the dot product relations:\n$$\nc_h^2 = (a^2 + a^2 + a^2) + 2(a^2 \\cos(\\alpha) + a^2 \\cos(\\alpha) + a^2 \\cos(\\alpha))\n$$\nSimplifying the expression:\n$$\nc_h^2 = 3a^2 + 6a^2 \\cos(\\alpha) = 3a^2(1 + 2\\cos(\\alpha))\n$$\nTaking the square root, we obtain the general expression for $c_h$ in terms of $a$ and $\\alpha$. The term under the square root must be non-negative, which constrains $\\cos(\\alpha) \\ge -1/2$, or $\\alpha \\le 120^\\circ$.\n$$\nc_h = \\sqrt{3a^2(1 + 2\\cos(\\alpha))} = a\\sqrt{3(1 + 2\\cos(\\alpha))}\n$$\n\nNow, we evaluate these general expressions for the specific case given, $\\alpha = 60^\\circ$.\nWe have $\\cos(60^\\circ) = \\frac{1}{2}$ and $\\sin(\\frac{60^\\circ}{2}) = \\sin(30^\\circ) = \\frac{1}{2}$.\n\nFor the basal-plane parameter $a_h$:\n$$\na_h = 2a \\sin(30^\\circ) = 2a \\left(\\frac{1}{2}\\right) = a\n$$\n\nFor the $c$-axis parameter $c_h$:\n$$\nc_h = a\\sqrt{3(1 + 2\\cos(60^\\circ))} = a\\sqrt{3\\left(1 + 2\\left(\\frac{1}{2}\\right)\\right)} = a\\sqrt{3(1+1)} = a\\sqrt{3(2)} = a\\sqrt{6}\n$$\n\nThe final expressions for the hexagonal lattice parameters $a_h$ and $c_h$ for a rhombohedral lattice with $a$ and $\\alpha = 60^\\circ$ are $a_h = a$ and $c_h = a\\sqrt{6}$.", "answer": "$$\n\\boxed{\n\\left(a, a\\sqrt{6}\\right)\n}\n$$", "id": "2477806"}, {"introduction": "This practice bridges the gap between abstract crystallographic theory and tangible experimental data, a crucial step in materials characterization. Starting with a set of indexed diffraction peaks, you will derive the linear relationship between interplanar spacing and Miller indices for a tetragonal system, and then use weighted linear regression to determine the lattice parameters $a$ and $c$ from the data [@problem_id:2477827]. This exercise not only reinforces your understanding of reciprocal space but also introduces the statistical methods required to refine a structural model and rigorously quantify its uncertainty.", "problem": "You are given indexed reflections from a suspected tetragonal phase in a crystalline solid. Starting from the reciprocal lattice metric tensor for a general Bravais lattice and the tetragonal constraint $a=b\\neq c$, derive a linear model connecting the measurable interplanar spacings to the Miller indices, and use this model to estimate the lattice parameters $a$ and $c$ along with their standard uncertainties by weighted linear regression. Base your derivation on the following foundational facts: (i) the interplanar spacing $d_{hkl}$ is determined by the reciprocal metric tensor of the lattice, (ii) for the tetragonal system, the direct-space metric tensor has two equal in-plane parameters $a$ and one distinct out-of-plane parameter $c$, and (iii) linear error propagation applies to transformations of parameters when uncertainties are sufficiently small. Do not assume any specialized formulas beyond these bases; derive the necessary relations.\n\nYour program must implement the following steps for each test case:\n- Derive a linear model for the observable $y=\\,$a function of $d_{hkl}$ in terms of predictors that are quadratic in $h$, $k$, and $l$, whose coefficients are functions of $a$ and $c$ under the tetragonal constraint.\n- Using the provided reflections $\\{(h,k,l,d,\\sigma_d)\\}$, construct a weighted linear regression where the weights are the inverse variances of $y$, obtained by propagating the measurement uncertainty in $d$ to the uncertainty in $y$ via first-order (linear) uncertainty propagation.\n- From the fitted linear coefficients, analytically transform to obtain $a$ and $c$, and propagate the parameter covariance to obtain the standard uncertainties of $a$ and $c$ by the delta method.\n- Output the results as numerical values for $a$ and $c$ in ångström (symbol Å), along with their one-standard-deviation uncertainties, all rounded to $6$ decimal places.\n\nTest suite:\n- Case $1$ (general tetragonal-like geometry, distinct $a$ and $c$): use the following reflections, with $d$ in ångström and $\\sigma_d$ in ångström. The reflections are eight entries, each as $(h,k,l,d,\\sigma_d)$:\n    - $(1,0,0,\\,4.00000000,\\,0.0020)$\n    - $(0,0,1,\\,5.00000000,\\,0.0015)$\n    - $(1,1,0,\\,2.82842712,\\,0.0025)$\n    - $(1,1,1,\\,2.46182982,\\,0.0018)$\n    - $(2,0,0,\\,2.00000000,\\,0.0022)$\n    - $(0,0,2,\\,2.50000000,\\,0.0016)$\n    - $(2,1,0,\\,1.78885438,\\,0.0021)$\n    - $(1,0,3,\\,1.53846154,\\,0.0019)$\n- Case $2$ (boundary condition near cubic symmetry where $a$ and $c$ coincide): reflections\n    - $(1,0,0,\\,5.00000000,\\,0.0021)$\n    - $(0,0,1,\\,5.00000000,\\,0.0020)$\n    - $(1,1,0,\\,3.53553391,\\,0.0024)$\n    - $(1,1,1,\\,2.88675135,\\,0.0017)$\n    - $(2,0,0,\\,2.50000000,\\,0.0022)$\n    - $(0,0,2,\\,2.50000000,\\,0.0016)$\n    - $(2,1,0,\\,2.23606798,\\,0.0023)$\n    - $(2,2,0,\\,1.76776695,\\,0.0018)$\n- Case $3$ (high anisotropy with strong difference between $a$ and $c$): reflections\n    - $(1,0,0,\\,4.00000000,\\,0.0019)$\n    - $(0,0,1,\\,8.00000000,\\,0.0014)$\n    - $(1,1,0,\\,2.82842712,\\,0.0026)$\n    - $(1,1,1,\\,2.66666667,\\,0.0017)$\n    - $(2,0,0,\\,2.00000000,\\,0.0020)$\n    - $(0,0,2,\\,4.00000000,\\,0.0015)$\n    - $(2,1,0,\\,1.78885438,\\,0.0022)$\n    - $(1,0,3,\\,2.21880078,\\,0.0018)$\n\nAlgorithmic and numerical requirements:\n- For each reflection, define the response $y$ and its standard uncertainty $\\sigma_y$ by analytically propagating the uncertainty from $d$ to $y$. Use the resulting weights $w = 1/\\sigma_y^2$ in a weighted least squares regression to estimate the two linear coefficients and their covariance matrix. Then transform these coefficients to obtain $a$ and $c$ and propagate covariance to obtain the standard uncertainties in $a$ and $c$.\n- Express $a$ and $c$ in ångström, rounded to $6$ decimal places.\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, in the order\n$[a_1,c_1,u(a_1),u(c_1),a_2,c_2,u(a_2),u(c_2),a_3,c_3,u(a_3),u(c_3)]$,\nwhere $a_i$ and $c_i$ are the estimated lattice parameters in ångström for test case $i$, and $u(a_i)$ and $u(c_i)$ are their one-standard-deviation uncertainties in ångström, all to $6$ decimal places.\n\nAngle units are not applicable. No other physical units are required beyond ångström for lengths. The final output format must be exactly one line with the list as specified above (for example, $[a_1,c_1,u(a_1),u(c_1),a_2,c_2,u(a_2),u(c_2),a_3,c_3,u(a_3),u(c_3)]$).", "solution": "The solution is developed in three stages: first, the derivation of the linear model relating lattice parameters to diffraction data; second, the formulation of the weighted linear regression procedure; and third, the method for transforming the regression results and their uncertainties into the final lattice parameters.\n\n**1. Derivation of the Linear Model**\n\nThe relationship between real and reciprocal space is fundamental. For a set of direct lattice basis vectors $\\{\\vec{a}_1, \\vec{a}_2, \\vec{a}_3\\}$, the direct space metric tensor is defined by $G_{ij} = \\vec{a}_i \\cdot \\vec{a}_j$. For a tetragonal lattice, the conventional basis vectors are orthogonal, and their lengths are constrained such that $|\\vec{a}_1| = |\\vec{a}_2| = a$ and $|\\vec{a}_3| = c$. We can align these with a Cartesian coordinate system without loss of generality: $\\vec{a}_1 = (a, 0, 0)$, $\\vec{a}_2 = (0, a, 0)$, and $\\vec{a}_3 = (0, 0, c)$. The direct metric tensor $G$ is therefore diagonal:\n$$\nG = \n\\begin{pmatrix}\na^2  0  0 \\\\\n0  a^2  0 \\\\\n0  0  c^2\n\\end{pmatrix}\n$$\nThe reciprocal lattice basis vectors $\\{\\vec{a}^*_1, \\vec{a}^*_2, \\vec{a}^*_3\\}$ are related to the direct basis by $\\vec{a}_i \\cdot \\vec{a}^*_j = \\delta_{ij}$. The reciprocal metric tensor, $G^*$, with elements $G^*_{ij} = \\vec{a}^*_i \\cdot \\vec{a}^*_j$, is the inverse of the direct metric tensor, $G^* = G^{-1}$.\n$$\nG^* = \n\\begin{pmatrix}\n1/a^2  0  0 \\\\\n0  1/a^2  0 \\\\\n0  0  1/c^2\n\\end{pmatrix}\n$$\nA reciprocal lattice vector for a given reflection $(hkl)$ is $\\vec{g}_{hkl} = h\\vec{a}^*_1 + k\\vec{a}^*_2 + l\\vec{a}^*_3$. The magnitude of this vector is related to the interplanar spacing $d_{hkl}$ by $|\\vec{g}_{hkl}| = 1/d_{hkl}$. The squared magnitude is computed using the quadratic form with the reciprocal metric tensor:\n$$\n|\\vec{g}_{hkl}|^2 = \\left(\\frac{1}{d_{hkl}}\\right)^2 = \\begin{pmatrix} h  k  l \\end{pmatrix} G^* \\begin{pmatrix} h \\\\ k \\\\ l \\end{pmatrix}\n$$\nSubstituting the components of $G^*$ for the tetragonal system yields the central equation:\n$$\n\\frac{1}{d_{hkl}^2} = h^2\\left(\\frac{1}{a^2}\\right) + k^2\\left(\\frac{1}{a^2}\\right) + l^2\\left(\\frac{1}{c^2}\\right)\n$$\nThis equation can be rearranged into a linear form suitable for regression:\n$$\n\\frac{1}{d_{hkl}^2} = \\left(h^2 + k^2\\right)\\frac{1}{a^2} + l^2\\frac{1}{c^2}\n$$\nThis establishes the required linear model. We define the response variable $y$, predictors $x_1$ and $x_2$, and coefficients $\\beta_1$ and $\\beta_2$:\n- Response: $y = 1/d_{hkl}^2$\n- Predictors: $x_1 = h^2 + k^2$, $x_2 = l^2$\n- Coefficients: $\\beta_1 = 1/a^2$, $\\beta_2 = 1/c^2$\n\nThe linear model is $y = \\beta_1 x_1 + \\beta_2 x_2$.\n\n**2. Weighted Linear Regression**\n\nGiven a set of $N$ observations $\\{(h_i, k_i, l_i, d_i, \\sigma_{d_i})\\}_{i=1}^N$, we can write the system of equations in matrix form as $\\mathbf{y} = \\mathbf{X}\\boldsymbol{\\beta} + \\boldsymbol{\\epsilon}$, where $\\mathbf{y}$ is the $N \\times 1$ vector of response values, $\\mathbf{X}$ is the $N \\times 2$ design matrix, $\\boldsymbol{\\beta}$ is the $2 \\times 1$ vector of coefficients, and $\\boldsymbol{\\epsilon}$ is the vector of errors.\n$$\n\\mathbf{y} = \\begin{pmatrix} 1/d_1^2 \\\\ \\vdots \\\\ 1/d_N^2 \\end{pmatrix}, \\quad\n\\mathbf{X} = \\begin{pmatrix} h_1^2+k_1^2  l_1^2 \\\\ \\vdots  \\vdots \\\\ h_N^2+k_N^2  l_N^2 \\end{pmatrix}, \\quad\n\\boldsymbol{\\beta} = \\begin{pmatrix} \\beta_1 \\\\ \\beta_2 \\end{pmatrix}\n$$\nThe measurements of $d_i$ have associated uncertainties $\\sigma_{d_i}$, which propagate to the response variable $y_i = d_i^{-2}$. Using first-order uncertainty propagation:\n$$\n\\sigma_{y_i}^2 \\approx \\left(\\frac{\\partial y_i}{\\partial d_i}\\right)^2 \\sigma_{d_i}^2 = \\left(-2d_i^{-3}\\right)^2 \\sigma_{d_i}^2 = \\frac{4\\sigma_{d_i}^2}{d_i^6}\n$$\nThe observations $y_i$ thus have non-uniform variances. To obtain an efficient and unbiased estimate of $\\boldsymbol{\\beta}$, we must use weighted least squares (WLS). The weight for each observation is the inverse of its variance, $w_i = 1/\\sigma_{y_i}^2$. We construct a diagonal weight matrix $\\mathbf{W}$ where $W_{ii} = w_i$. The WLS estimate for $\\boldsymbol{\\beta}$ is given by the normal equations:\n$$\n\\hat{\\boldsymbol{\\beta}} = (\\mathbf{X}^T \\mathbf{W} \\mathbf{X})^{-1} \\mathbf{X}^T \\mathbf{W} \\mathbf{y}\n$$\nThe covariance matrix of the estimated coefficients, $\\mathbf{C}_{\\beta} = \\text{Cov}(\\hat{\\boldsymbol{\\beta}})$, is:\n$$\n\\mathbf{C}_{\\beta} = (\\mathbf{X}^T \\mathbf{W} \\mathbf{X})^{-1} = \\begin{pmatrix} \\sigma_{\\beta_1}^2  \\text{cov}(\\beta_1, \\beta_2) \\\\ \\text{cov}(\\beta_1, \\beta_2)  \\sigma_{\\beta_2}^2 \\end{pmatrix}\n$$\n\n**3. Parameter Transformation and Uncertainty Propagation**\n\nThe estimated coefficients $\\hat{\\boldsymbol{\\beta}} = [\\hat{\\beta}_1, \\hat{\\beta}_2]^T$ are related to the lattice parameters $a$ and $c$ as follows:\n$$\na = 1/\\sqrt{\\hat{\\beta}_1} = \\hat{\\beta}_1^{-1/2}\n$$\n$$\nc = 1/\\sqrt{\\hat{\\beta}_2} = \\hat{\\beta}_2^{-1/2}\n$$\nThe uncertainties in $a$ and $c$ are determined by propagating the uncertainties from $\\hat{\\boldsymbol{\\beta}}$ using the delta method. The covariance matrix of the transformed parameters, $\\mathbf{C}_p$ where $\\mathbf{p} = [a, c]^T$, is given by $\\mathbf{C}_p \\approx \\mathbf{J} \\mathbf{C}_{\\beta} \\mathbf{J}^T$, where $\\mathbf{J}$ is the Jacobian matrix of the transformation:\n$$\n\\mathbf{J} = \\begin{pmatrix} \\frac{\\partial a}{\\partial \\beta_1}  \\frac{\\partial a}{\\partial \\beta_2} \\\\ \\frac{\\partial c}{\\partial \\beta_1}  \\frac{\\partial c}{\\partial \\beta_2} \\end{pmatrix} = \\begin{pmatrix} -\\frac{1}{2}\\beta_1^{-3/2}  0 \\\\ 0  -\\frac{1}{2}\\beta_2^{-3/2} \\end{pmatrix}\n$$\nThe variances of $a$ and $c$, which are the diagonal elements of $\\mathbf{C}_p$, are thus:\n$$\n\\sigma_a^2 = \\left(-\\frac{1}{2}\\hat{\\beta}_1^{-3/2}\\right)^2 \\sigma_{\\beta_1}^2 = \\frac{1}{4}\\hat{\\beta}_1^{-3} \\sigma_{\\beta_1}^2\n$$\n$$\n\\sigma_c^2 = \\left(-\\frac{1}{2}\\hat{\\beta}_2^{-3/2}\\right)^2 \\sigma_{\\beta_2}^2 = \\frac{1}{4}\\hat{\\beta}_2^{-3} \\sigma_{\\beta_2}^2\n$$\nThe standard uncertainties, $u(a)$ and $u(c)$, are the square roots of these variances:\n$$\nu(a) = \\sigma_a = \\frac{1}{2}\\hat{\\beta}_1^{-3/2} \\sigma_{\\beta_1}\n$$\n$$\nu(c) = \\sigma_c = \\frac{1}{2}\\hat{\\beta}_2^{-3/2} \\sigma_{\\beta_2}\n$$\nThis completes the theoretical framework. The implementation will follow these derived formulas.\n\n**Algorithmic Procedure:**\nFor each test case:\n1.  For each reflection $(h_i, k_i, l_i, d_i, \\sigma_{d_i})$, compute $y_i = d_i^{-2}$, $x_{i1} = h_i^2+k_i^2$, $x_{i2} = l_i^2$, and $w_i = d_i^6 / (4\\sigma_{d_i}^2)$.\n2.  Construct the matrices $\\mathbf{y}$, $\\mathbf{X}$, and $\\mathbf{W}$.\n3.  Compute $\\hat{\\boldsymbol{\\beta}} = (\\mathbf{X}^T \\mathbf{W} \\mathbf{X})^{-1} \\mathbf{X}^T \\mathbf{W} \\mathbf{y}$.\n4.  Compute the covariance matrix $\\mathbf{C}_{\\beta} = (\\mathbf{X}^T \\mathbf{W} \\mathbf{X})^{-1}$.\n5.  Extract $\\hat{\\beta}_1, \\hat{\\beta}_2$ and their variances $\\sigma_{\\beta_1}^2, \\sigma_{\\beta_2}^2$ from $\\hat{\\boldsymbol{\\beta}}$ and $\\mathbf{C}_{\\beta}$.\n6.  Calculate the parameters $a = 1/\\sqrt{\\hat{\\beta}_1}$ and $c = 1/\\sqrt{\\hat{\\beta}_2}$.\n7.  Calculate the standard uncertainties $u(a) = \\frac{1}{2}\\hat{\\beta}_1^{-3/2}\\sqrt{\\sigma_{\\beta_1}^2}$ and $u(c) = \\frac{1}{2}\\hat{\\beta}_2^{-3/2}\\sqrt{\\sigma_{\\beta_2}^2}$.\n8.  Format the results as required.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves for tetragonal lattice parameters a and c and their uncertainties\n    using weighted linear regression, based on diffraction data.\n    \"\"\"\n    # Define the test cases from the problem statement.\n    test_cases = [\n        # Case 1: General tetragonal-like geometry\n        [\n            (1, 0, 0, 4.00000000, 0.0020),\n            (0, 0, 1, 5.00000000, 0.0015),\n            (1, 1, 0, 2.82842712, 0.0025),\n            (1, 1, 1, 2.46182982, 0.0018),\n            (2, 0, 0, 2.00000000, 0.0022),\n            (0, 0, 2, 2.50000000, 0.0016),\n            (2, 1, 0, 1.78885438, 0.0021),\n            (1, 0, 3, 1.53846154, 0.0019),\n        ],\n        # Case 2: Near cubic symmetry\n        [\n            (1, 0, 0, 5.00000000, 0.0021),\n            (0, 0, 1, 5.00000000, 0.0020),\n            (1, 1, 0, 3.53553391, 0.0024),\n            (1, 1, 1, 2.88675135, 0.0017),\n            (2, 0, 0, 2.50000000, 0.0022),\n            (0, 0, 2, 2.50000000, 0.0016),\n            (2, 1, 0, 2.23606798, 0.0023),\n            (2, 2, 0, 1.76776695, 0.0018),\n        ],\n        # Case 3: High anisotropy\n        [\n            (1, 0, 0, 4.00000000, 0.0019),\n            (0, 0, 1, 8.00000000, 0.0014),\n            (1, 1, 0, 2.82842712, 0.0026),\n            (1, 1, 1, 2.66666667, 0.0017),\n            (2, 0, 0, 2.00000000, 0.0020),\n            (0, 0, 2, 4.00000000, 0.0015),\n            (2, 1, 0, 1.78885438, 0.0022),\n            (1, 0, 3, 2.21880078, 0.0018),\n        ],\n    ]\n\n    results = []\n    \n    for case_data in test_cases:\n        # 1. Construct matrices for linear regression\n        y_list = []\n        X_list = []\n        w_list = []\n\n        for h, k, l, d, sigma_d in case_data:\n            # Response variable y = 1/d^2\n            y_i = 1.0 / (d * d)\n            y_list.append(y_i)\n            \n            # Predictor variables x1 = h^2 + k^2, x2 = l^2\n            x1_i = float(h**2 + k**2)\n            x2_i = float(l**2)\n            X_list.append([x1_i, x2_i])\n            \n            # Uncertainty in y, sigma_y^2 = (4 * sigma_d^2) / d^6\n            sigma_y_sq = (4.0 * sigma_d**2) / (d**6)\n            \n            # Weight w = 1 / sigma_y^2\n            w_i = 1.0 / sigma_y_sq\n            w_list.append(w_i)\n\n        y = np.array(y_list)\n        X = np.array(X_list)\n        W = np.diag(w_list)\n\n        # 2. Perform weighted least squares\n        # beta_hat = (X.T @ W @ X)^-1 @ X.T @ W @ y\n        XT_W_X = X.T @ W @ X\n        C_beta = np.linalg.inv(XT_W_X)\n        XT_W_y = X.T @ W @ y\n        beta_hat = C_beta @ XT_W_y\n\n        beta1_hat = beta_hat[0]\n        beta2_hat = beta_hat[1]\n\n        # 3. Extract variances of beta coefficients\n        var_beta1 = C_beta[0, 0]\n        var_beta2 = C_beta[1, 1]\n\n        # 4. Transform coefficients to lattice parameters\n        # a = 1 / sqrt(beta1), c = 1 / sqrt(beta2)\n        a = 1.0 / np.sqrt(beta1_hat)\n        c = 1.0 / np.sqrt(beta2_hat)\n        \n        # 5. Propagate uncertainties using the delta method\n        # u(a) = 0.5 * beta1^(-3/2) * u(beta1)\n        # u(c) = 0.5 * beta2^(-3/2) * u(beta2)\n        u_a = 0.5 * np.power(beta1_hat, -1.5) * np.sqrt(var_beta1)\n        u_c = 0.5 * np.power(beta2_hat, -1.5) * np.sqrt(var_beta2)\n\n        # 6. Append results, rounded to 6 decimal places\n        results.extend([\n            round(a, 6),\n            round(c, 6),\n            round(u_a, 6),\n            round(u_c, 6)\n        ])\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2477827"}]}