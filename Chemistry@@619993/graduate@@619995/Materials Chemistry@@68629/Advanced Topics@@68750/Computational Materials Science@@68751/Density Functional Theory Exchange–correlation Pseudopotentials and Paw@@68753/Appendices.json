{"hands_on_practices": [{"introduction": "Every plane-wave Density Functional Theory (DFT) calculation begins with a critical choice: the kinetic energy cutoff, $E_{\\text{cut}}$. This parameter determines the completeness of the basis set and directly governs the balance between computational cost and accuracy. This exercise provides a hands-on opportunity to derive and apply the mathematical relationship between $E_{\\text{cut}}$ and total energy error, building a quantitative understanding of this fundamental convergence process. By examining a hypothetical model comparing a true Coulomb potential to a smoothed pseudopotential, you will see precisely why pseudopotentials are a cornerstone of modern computational materials science [@problem_id:2480412].", "problem": "Consider a plane-wave discretization of Kohn–Sham orbitals within Density Functional Theory (DFT) in atomic units, where the kinetic-energy cutoff $E_{\\mathrm{cut}}$ defines a sphere in reciprocal space of radius $k_c$ with $k_c = \\sqrt{2 E_{\\mathrm{cut}}}$. Truncating the plane-wave basis at $k_c$ removes high-frequency components of the orbitals and causes a variational increase in the total energy. Assume that the dominant truncation error comes from the kinetic-energy contribution of the omitted high-$k$ tail, and that the exchange–correlation and electrostatic contributions are sufficiently smooth such that their omitted tails either decay faster or are negligible compared to the kinetic contribution in the asymptotic regime.\n\nAs a fundamental base, use the following well-tested facts: \n(1) In atomic units, the kinetic-energy contribution of a plane-wave $\\mathbf{k}$ component is proportional to $k^2$. \n(2) The omission error from truncating reciprocal space at $k_c$ can be modeled, for sufficiently large $k_c$, by integrating the high-$k$ tail of the squared plane-wave amplitudes $|c_{\\mathbf{k}}|^2$, which for many physically relevant cases asymptotically behaves as a power law $|c_{\\mathbf{k}}|^2 \\sim A k^{-p}$ with $p>3$ and $A>0$. \n(3) For all-electron orbitals near a Coulomb singularity, the Kato cusp condition implies a non-analyticity that produces a relatively slow high-$k$ decay (a representative case is $p=4$), whereas for a norm-conserving pseudopotential with a sufficiently smooth pseudo-wavefunction inside a chosen core radius $r_c$, the removal of the nuclear cusp and the enforced smoothness yield a faster high-$k$ decay (e.g., a representative case is $p=6$ when the pseudo-wavefunction is at least twice continuously differentiable at $r_c$).\n\nFrom these bases, derive, in terms of $p$ and $k_c$, the asymptotic leading-order scaling of the total-energy error $\\Delta E(E_{\\mathrm{cut}})$ due to the truncation at $k_c$ by modeling the error as an integral over the omitted reciprocal-space region. Treat all geometric and normalization constants as absorbed into a single positive prefactor $K$ that depends on details of the material and the pseudopotential construction (including the choice of $r_c$), so that your derivation yields an explicit power-law dependence on $k_c$ and hence on $E_{\\mathrm{cut}}$.\n\nThen, using your derived expression, implement an algorithm that, for given $(K,p,\\varepsilon)$ with $p>3$, computes the smallest $E_{\\mathrm{cut}}$ (in Hartree) such that the asymptotic error bound satisfies $\\Delta E(E_{\\mathrm{cut}}) \\le \\varepsilon$. Angles do not appear; all energies must be expressed in Hartree. Return numerical answers rounded to six decimal places.\n\nFor magnesium oxide (MgO), consider the following test suite that captures the comparison between an all-electron reference and two norm-conserving pseudopotential (NCPP) constructions differing only in the choice of core radius $r_c$. Larger $r_c$ corresponds to a “softer” pseudopotential with a smaller prefactor $K$; smaller $r_c$ corresponds to a “harder” pseudopotential with a larger prefactor $K$. Use the representative exponents $p$ as given.\n\nTest suite (all energies in Hartree):\n- Case $1$ (MgO, all-electron reference): $p=4$, $K=0.01$, target tolerance $\\varepsilon=1\\times 10^{-3}$.\n- Case $2$ (MgO, NCPP with smaller $r_c$ [harder]): $p=6$, $K=0.02$, target tolerance $\\varepsilon=1\\times 10^{-3}$.\n- Case $3$ (MgO, NCPP with larger $r_c$ [softer]): $p=6$, $K=0.005$, target tolerance $\\varepsilon=1\\times 10^{-3}$.\n- Case $4$ (MgO, all-electron reference, tighter tolerance): $p=4$, $K=0.01$, target tolerance $\\varepsilon=1\\times 10^{-6}$.\n- Case $5$ (Hypothetical limiting smoothness near the boundary for robustness testing): $p=3.2$, $K=0.001$, target tolerance $\\varepsilon=1\\times 10^{-3}$.\n\nYour program must:\n- Compute the minimal $E_{\\mathrm{cut}}$ (in Hartree) meeting the tolerance for Cases $1$–$5$ using your derived formula.\n- Additionally compute, for $\\varepsilon=1\\times 10^{-3}$, the ratios $E_{\\mathrm{cut}}^{\\mathrm{NCPP\\;small}\\;r_c} / E_{\\mathrm{cut}}^{\\mathrm{AE}}$ and $E_{\\mathrm{cut}}^{\\mathrm{NCPP\\;large}\\;r_c} / E_{\\mathrm{cut}}^{\\mathrm{AE}}$ using the results from Cases $1$–$3$.\n\nFinal output format:\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets in the following order:\n  $[E_{\\mathrm{cut}}^{(1)},E_{\\mathrm{cut}}^{(2)},E_{\\mathrm{cut}}^{(3)},R_{\\mathrm{small}/\\mathrm{AE}},R_{\\mathrm{large}/\\mathrm{AE}},E_{\\mathrm{cut}}^{(4)},E_{\\mathrm{cut}}^{(5)}]$,\n  where each entry is rounded to six decimal places, $E_{\\mathrm{cut}}^{(i)}$ are the minimal cutoffs for Cases $i=1,\\dots,5$, and $R_{\\mathrm{small}/\\mathrm{AE}}$ and $R_{\\mathrm{large}/\\mathrm{AE}}$ are the two ratios defined above.\n\nScientific realism and interpretation requirements:\n- Derive the scaling of the error from first principles outlined above, showing how the exponent in the power law depends on $p$ and how $r_c$ affects $K$ qualitatively.\n- Ensure that your algorithm covers the mathematical boundary condition $p>3$ explicitly; the provided test suite respects this.\n- Express all energies in Hartree and provide the final numeric outputs rounded to six decimals.", "solution": "The primary objective is to derive the scaling relationship between the total energy truncation error, $\\Delta E$, and the plane-wave kinetic energy cutoff, $E_{\\mathrm{cut}}$, and then to apply this relationship to compute the required cutoff for a given error tolerance $\\varepsilon$.\n\nThe problem states that the Kohn-Sham orbitals are expanded in a plane-wave basis truncated at a kinetic energy cutoff $E_{\\mathrm{cut}}$. This defines a sphere in reciprocal space of radius $k_c$ such that $\\frac{1}{2}k_c^2 = E_{\\mathrm{cut}}$ (in atomic units), which yields $k_c = \\sqrt{2E_{\\mathrm{cut}}}$.\n\nThe truncation error, $\\Delta E$, is modeled by integrating the contribution of the omitted high-frequency components. The problem states that the error is proportional to the total weight of the truncated coefficients, and gives the asymptotic behavior of the squared amplitudes as $|c_{\\mathbf{k}}|^2 \\sim A k^{-p}$. Since the integrand is spherically symmetric in reciprocal space, we can integrate over the radial coordinate $k$ using a volume element $d^3k = 4\\pi k^2 dk$:\n$$\n\\Delta E(k_c) \\propto \\int_{k_c}^{\\infty} |c_{\\mathbf{k}}|^2 (4\\pi k^2 dk) \\propto \\int_{k_c}^{\\infty} A k^{-p} k^2 dk = A \\int_{k_c}^{\\infty} k^{2-p} dk\n$$\nFor this integral to converge, the exponent of the integrand must be less than $-1$, i.e., $2-p  -1$, which implies $p > 3$. This condition is consistent with the problem statement. The integral evaluates to:\n$$\n\\int_{k_c}^{\\infty} k^{2-p} dk = \\left[ \\frac{k^{3-p}}{3-p} \\right]_{k_c}^{\\infty} = 0 - \\frac{k_c^{3-p}}{3-p} = \\frac{k_c^{3-p}}{p-3}\n$$\nThe problem provides a composite prefactor $K$ such that the error is modeled as:\n$$\n\\Delta E(k_c) = \\frac{K}{p-3} k_c^{3-p}\n$$\nNow, we substitute $k_c = \\sqrt{2 E_{\\mathrm{cut}}}$:\n$$\n\\Delta E(E_{\\mathrm{cut}}) = \\frac{K}{p-3} \\left(\\sqrt{2 E_{\\mathrm{cut}}}\\right)^{3-p} = \\frac{K}{p-3} (2 E_{\\mathrm{cut}})^{\\frac{3-p}{2}}\n$$\nThis is the derived scaling law. To find the minimum cutoff $E_{\\mathrm{cut}}$ for a target tolerance $\\varepsilon$, we set $\\Delta E(E_{\\mathrm{cut}}) = \\varepsilon$ and solve for $E_{\\mathrm{cut}}$:\n$$\n\\varepsilon = \\frac{K}{p-3} (2 E_{\\mathrm{cut}})^{\\frac{3-p}{2}}\n$$\nRearranging the terms to isolate $E_{\\mathrm{cut}}$:\n$$\n(2 E_{\\mathrm{cut}})^{\\frac{3-p}{2}} = \\frac{\\varepsilon (p-3)}{K}\n$$\nRaise both sides to the power of $\\frac{2}{3-p}$, which is equal to $-\\frac{2}{p-3}$:\n$$\n2 E_{\\mathrm{cut}} = \\left( \\frac{\\varepsilon (p-3)}{K} \\right)^{\\frac{2}{3-p}} = \\left( \\frac{K}{\\varepsilon(p-3)} \\right)^{\\frac{2}{p-3}}\n$$\nFinally, we obtain the expression for the required kinetic energy cutoff:\n$$\nE_{\\mathrm{cut}} = \\frac{1}{2} \\left(\\frac{K}{\\varepsilon(p-3)}\\right)^{\\frac{2}{p-3}}\n$$\nThis formula is well-defined for the given condition $p>3$ and will be used to solve the numerical part of the problem.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes the minimum kinetic energy cutoff E_cut for given DFT convergence\n    parameters and calculates ratios between different potential types.\n    \"\"\"\n\n    # The formula for E_cut is derived from the asymptotic error model:\n    # Delta_E = (K / (p-3)) * (2 * E_cut)^((3-p)/2)\n    # Solving for E_cut for a given error tolerance epsilon gives:\n    # E_cut = (1/2) * (K / (epsilon * (p-3)))^(2 / (p-3))\n    def calculate_ecut(p, K, epsilon):\n        \"\"\"\n        Calculates the minimum kinetic energy cutoff in Hartree.\n\n        Args:\n            p (float): Power-law exponent for the decay of Fourier coefficients.\n            K (float): Prefactor related to the material and potential.\n            epsilon (float): Target energy tolerance in Hartree.\n\n        Returns:\n            float: The calculated E_cut in Hartree.\n        \"\"\"\n        if p = 3:\n            # This case should not be reached with the given valid problem statement.\n            return float('inf')\n        \n        p_minus_3 = p - 3.0\n        exponent = 2.0 / p_minus_3\n        base = K / (epsilon * p_minus_3)\n        \n        e_cut = 0.5 * (base ** exponent)\n        return e_cut\n\n    # Test suite from the problem statement: (p, K, epsilon)\n    test_cases = [\n        # Case 1: MgO, all-electron reference\n        (4.0, 0.01, 1e-3),\n        # Case 2: MgO, NCPP with smaller r_c (harder)\n        (6.0, 0.02, 1e-3),\n        # Case 3: MgO, NCPP with larger r_c (softer)\n        (6.0, 0.005, 1e-3),\n        # Case 4: MgO, all-electron reference, tighter tolerance\n        (4.0, 0.01, 1e-6),\n        # Case 5: Hypothetical limiting smoothness\n        (3.2, 0.001, 1e-3)\n    ]\n\n    # Calculate E_cut for all cases\n    e_cut_results = [calculate_ecut(p, K, eps) for p, K, eps in test_cases]\n\n    e_cut_1, e_cut_2, e_cut_3, e_cut_4, e_cut_5 = e_cut_results\n    \n    # Calculate required ratios using results from Cases 1-3\n    # Ratio of NCPP (small r_c, harder) to All-Electron cutoff\n    ratio_small_ae = e_cut_2 / e_cut_1\n    \n    # Ratio of NCPP (large r_c, softer) to All-Electron cutoff\n    ratio_large_ae = e_cut_3 / e_cut_1\n\n    # Assemble the final list of results in the specified order\n    final_results = [\n        e_cut_1,\n        e_cut_2,\n        e_cut_3,\n        ratio_small_ae,\n        ratio_large_ae,\n        e_cut_4,\n        e_cut_5\n    ]\n\n    # Format the results to six decimal places for the output string\n    formatted_results = [f'{val:.6f}' for val in final_results]\n    \n    # Print the final output in the exact required format\n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n```", "id": "2480412"}, {"introduction": "While total energy convergence is essential, many key applications of DFT, such as geometry optimization and molecular dynamics, depend on accurately calculated atomic forces. These forces can be more sensitive to computational parameters than the total energy, necessitating a careful and distinct convergence strategy. In this practice, you will construct a quantitative model for force errors that arise from finite cutoffs for both the wavefunctions ($E_{\\text{cut}}$) and the charge density ($E_{\\rho}$). This exercise will illuminate the practical considerations and performance differences between Ultrasoft Pseudopotentials (USPP) and the Projector Augmented-Wave (PAW) method, equipping you to perform reliable structural studies [@problem_id:2480438].", "problem": "You are asked to formalize, from first principles, a quantitative model for basis-set incompleteness errors in forces computed within Kohn–Sham Density Functional Theory (DFT) when using plane waves, and to use it to (i) quantify the magnitude of force errors for specified parameter sets and (ii) design a convergence test that selects minimal cutoffs ensuring a target force accuracy. The two pseudopotential families are Ultrasoft Pseudopotentials (USPP) and Projector Augmented-Wave (PAW). Your program must implement the model you derive and produce numerical outputs for a defined test suite.\n\nStart from the following fundamental bases and core definitions:\n\n- In Kohn–Sham Density Functional Theory (DFT), the total energy is a functional of the electron density, and the force on a nucleus at position $\\mathbf{R}$ is given by the negative derivative of the total energy with respect to $\\mathbf{R}$, i.e., $ \\mathbf{F} = - \\partial E / \\partial \\mathbf{R} $. In a complete basis, the Hellmann–Feynman theorem yields the exact force; in a finite basis, residual \"Pulay\" terms arise.\n- In a plane-wave basis truncated at a kinetic energy cutoff $E_{\\mathrm{cut}}$, the largest included reciprocal vector magnitude is $k_{\\max}$, related to $E_{\\mathrm{cut}}$ by the free-electron dispersion. In atomic units (Hartree units), $E = k^{2} / 2$, with $E$ in Hartree and $k$ in inverse Bohr. Use $1 \\ \\mathrm{Ha} = 27.211386245988 \\ \\mathrm{eV}$ and $1/a_{0} = 1.88972612456506 \\ \\mathrm{\\AA}^{-1}$ with $a_{0} = 0.529177210903 \\ \\mathrm{\\AA}$.\n- The electron density and augmentation charges are represented on a grid characterized by a density cutoff $E_{\\rho}$ with maximum reciprocal vector $G_{\\max}$ analogous to $k_{\\max}$.\n- For smooth functions with finite differentiability, the truncation of Fourier components beyond a maximum wavevector leads to a systematic error that decays as a power of the maximum wavevector. More precisely, if the $m$-th derivative is the first non-integrable (or insufficiently decaying) derivative controlling the Fourier tail, then the truncation error in representing derivatives (and thus forces) decays like $k_{\\max}^{-(m-1)}$ times an amplitude set by the characteristic high-frequency content of the target function.\n\nModeling assumptions you must adopt and use:\n\n- The magnitude of the force error due to the wavefunction basis truncation is controlled by an effective smoothness index $m_{w}$ and a characteristic reciprocal scale $k_{\\mathrm{ref}}$, with $k_{\\mathrm{ref}} \\equiv \\pi / r_{c}$, where $r_{c}$ is an effective core radius. Similarly, the density/augmentation contribution is controlled by $m_{\\rho}$ and $G_{\\mathrm{ref}} \\equiv \\pi / r_{c,\\rho}$. Adopt the following values:\n  - USPP: $m_{w} = 4$, $m_{\\rho} = 2$, $r_{c} = 1.2 \\ \\mathrm{\\AA}$, $r_{c,\\rho} = 0.8 \\ \\mathrm{\\AA}$.\n  - PAW: $m_{w} = 5$, $m_{\\rho} = 3$, $r_{c} = 0.9 \\ \\mathrm{\\AA}$, $r_{c,\\rho} = 0.7 \\ \\mathrm{\\AA}$.\n- Denote by $F_{\\mathrm{true}}$ the magnitude of the fully converged force (in $\\mathrm{eV}/\\mathrm{\\AA}$) for the adsorption geometry of interest. The total force error magnitude $\\Delta F$ is modeled as the sum of a wavefunction-truncation contribution and a density-grid contribution. Introduce method-dependent, dimensionless calibration factors $\\alpha_{w}$ and $\\alpha_{\\rho}$ capturing the combined effect of exchange–correlation operator smoothness, nonlocal projector structure, and Pulay residuals at finite cutoff. Use:\n  - USPP: $\\alpha_{w} = 0.12$, $\\alpha_{\\rho} = 0.04$.\n  - PAW: $\\alpha_{w} = 0.08$, $\\alpha_{\\rho} = 0.025$.\n- Your derivation must show that the decay exponents entering the error model are $p_{w} = m_{w} - 1$ for the wavefunction part and $p_{\\rho} = m_{\\rho} - 1$ for the density part, and that the error can be written using dimensionless ratios built from $k_{\\mathrm{ref}}/k_{\\max}$ and $G_{\\mathrm{ref}}/G_{\\max}$. You must convert $E_{\\mathrm{cut}}$ and $E_{\\rho}$ (in $\\mathrm{eV}$) to $k_{\\max}$ and $G_{\\max}$ (in $\\mathrm{\\AA}^{-1}$) using the atomic-unit relation $E \\ (\\mathrm{Ha}) = k^{2}/2$.\n\nImplementation requirements:\n\n- Units:\n  - Plane-wave cutoff $E_{\\mathrm{cut}}$ and density cutoff $E_{\\rho}$ are specified in $\\mathrm{eV}$.\n  - Forces and force errors must be computed and reported in $\\mathrm{eV}/\\mathrm{\\AA}$.\n- Angles do not appear; no angle unit is needed.\n- Your program must compute the following:\n  1) For each test case in the test suite below, the predicted force error magnitude $\\Delta F$ in $\\mathrm{eV}/\\mathrm{\\AA}$.\n  2) A convergence test that, for each method (USPP and PAW) separately, scans a candidate list of plane-wave cutoffs and chooses the smallest $E_{\\mathrm{cut}}$ whose predicted $\\Delta F$ for a representative force magnitude $F_{\\mathrm{true,ref}}$ falls below a target tolerance $\\tau$. For this convergence scan, use a fixed density-cutoff ratio $E_{\\rho} / E_{\\mathrm{cut}}$ that is method dependent. If no candidate satisfies the tolerance, return $-1$.\n- Convergence-test parameters:\n  - Candidate list $E_{\\mathrm{cut}}^{\\mathrm{cand}} = [25, 30, 35, 40, 50, 60] \\ \\mathrm{eV}$.\n  - Representative force magnitude $F_{\\mathrm{true,ref}} = 0.80 \\ \\mathrm{eV}/\\mathrm{\\AA}$.\n  - Tolerance $\\tau = 0.05 \\ \\mathrm{eV}/\\mathrm{\\AA}$.\n  - Ratios: USPP uses $E_{\\rho} / E_{\\mathrm{cut}} = 12$, PAW uses $E_{\\rho} / E_{\\mathrm{cut}} = 8$.\n\nTest suite of parameter values:\n\n- Case $1$: method $=$ USPP, $E_{\\mathrm{cut}} = 30 \\ \\mathrm{eV}$, $E_{\\rho} = 180 \\ \\mathrm{eV}$, $F_{\\mathrm{true}} = 0.80 \\ \\mathrm{eV}/\\mathrm{\\AA}$.\n- Case $2$: method $=$ USPP, $E_{\\mathrm{cut}} = 45 \\ \\mathrm{eV}$, $E_{\\rho} = 200 \\ \\mathrm{eV}$, $F_{\\mathrm{true}} = 0.25 \\ \\mathrm{eV}/\\mathrm{\\AA}$.\n- Case $3$: method $=$ PAW, $E_{\\mathrm{cut}} = 35 \\ \\mathrm{eV}$, $E_{\\rho} = 280 \\ \\mathrm{eV}$, $F_{\\mathrm{true}} = 1.50 \\ \\mathrm{eV}/\\mathrm{\\AA}$.\n- Case $4$: method $=$ PAW, $E_{\\mathrm{cut}} = 60 \\ \\mathrm{eV}$, $E_{\\rho} = 360 \\ \\mathrm{eV}$, $F_{\\mathrm{true}} = 0.60 \\ \\mathrm{eV}/\\mathrm{\\AA}$.\n\nOutput specification:\n\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets:\n  - The first four entries are the predicted $\\Delta F$ for Cases $1$–$4$, each rounded to $6$ decimal places.\n  - The fifth entry is the selected minimal $E_{\\mathrm{cut}}$ (in $\\mathrm{eV}$) that satisfies the tolerance for USPP from the candidate list (or $-1$ if none).\n  - The sixth entry is the selected minimal $E_{\\mathrm{cut}}$ (in $\\mathrm{eV}$) that satisfies the tolerance for PAW from the candidate list (or $-1$ if none).\n- Example format (not the actual answer): $[0.123456,0.234567,0.345678,0.456789,40,50]$.\n\nScientific realism and constraints:\n\n- Ensure that your derivation connects the Fourier-space truncation to power-law convergence controlled by smoothness indices $m_{w}$ and $m_{\\rho}$, and that you correctly convert energy cutoffs to reciprocal magnitudes.\n- Do not introduce any additional empirical formulas beyond the power-law model derived from the provided bases. All constants not explicitly provided must come from the fundamental constants and definitions specified above.", "solution": "The objective is to formalize a quantitative model for the basis-set incompleteness error in forces computed using plane-wave Density Functional Theory (DFT). The total force error magnitude, $\\Delta F$, is postulated to be the sum of two independent contributions: one from the truncation of the wavefunction basis set, $\\Delta F_w$, and one from the truncation of the real-space grid used for the electron density and augmentation charges, $\\Delta F_\\rho$.\n$$\n\\Delta F = \\Delta F_w + \\Delta F_\\rho\n$$\nBoth contributions arise from the truncation of Fourier series representations at a finite kinetic energy cutoff. The problem states that for a function whose $m$-th derivative is the first one with a slowly decaying Fourier transform, the error in representing derivatives of that function due to a Fourier cutoff at wavevector $k_{\\max}$ scales as $k_{\\max}^{-(m-1)}$. Forces are derivatives of the total energy with respect to atomic positions, and their accurate calculation depends on the quality of the representation of wavefunctions and densities. The error in the force, $\\Delta F$, will therefore inherit this power-law dependence on the cutoff.\n\nThe model is to be constructed using dimensionless ratios and must be proportional to the magnitude of the fully converged force, $F_{\\mathrm{true}}$, and a method-dependent calibration factor, $\\alpha$. This leads to an error model of the form:\n$$\n\\text{Error Term} = F_{\\mathrm{true}} \\cdot \\alpha \\cdot \\left(\\frac{k_{\\text{characteristic}}}{k_{\\text{cutoff}}}\\right)^{p}\n$$\nwhere $p$ is the decay exponent.\n\n**1. Wavefunction Contribution ($\\Delta F_w$)**\n\nThe error contribution from the plane-wave basis set for the wavefunctions is controlled by a smoothness index $m_w$. The corresponding decay exponent is given as $p_w = m_w - 1$. The cutoff is the maximum wavevector magnitude, $k_{\\max}$, determined by the kinetic energy cutoff $E_{\\mathrm{cut}}$. The characteristic length scale is the effective core radius $r_c$, which defines a characteristic reciprocal scale $k_{\\mathrm{ref}} = \\pi / r_c$. Using the dimensionless calibration factor $\\alpha_w$, the wavefunction error contribution is:\n$$\n\\Delta F_w = F_{\\mathrm{true}} \\cdot \\alpha_w \\cdot \\left(\\frac{k_{\\mathrm{ref}}}{k_{\\max}}\\right)^{p_w} = F_{\\mathrm{true}} \\cdot \\alpha_w \\cdot \\left(\\frac{\\pi / r_c}{k_{\\max}}\\right)^{m_w - 1}\n$$\n\n**2. Density and Augmentation Charge Contribution ($\\Delta F_\\rho$)**\n\nSimilarly, the error contribution from the density grid is controlled by a smoothness index $m_\\rho$ with an exponent $p_\\rho = m_\\rho - 1$. The cutoff is the maximum reciprocal vector magnitude for the grid, $G_{\\max}$, determined by the density cutoff $E_\\rho$. The characteristic length scale is $r_{c,\\rho}$ with a reciprocal scale $G_{\\mathrm{ref}} = \\pi / r_{c,\\rho}$. With the calibration factor $\\alpha_\\rho$, this error contribution is:\n$$\n\\Delta F_\\rho = F_{\\mathrm{true}} \\cdot \\alpha_\\rho \\cdot \\left(\\frac{G_{\\mathrm{ref}}}{G_{\\max}}\\right)^{p_\\rho} = F_{\\mathrm{true}} \\cdot \\alpha_\\rho \\cdot \\left(\\frac{\\pi / r_{c,\\rho}}{G_{\\max}}\\right)^{m_\\rho - 1}\n$$\n\n**3. Complete Model and Unit Conversion**\n\nThe complete model for the total force error magnitude is:\n$$\n\\Delta F = F_{\\mathrm{true}} \\left[ \\alpha_w \\left(\\frac{\\pi / r_c}{k_{\\max}}\\right)^{m_w - 1} + \\alpha_\\rho \\left(\\frac{\\pi / r_{c,\\rho}}{G_{\\max}}\\right)^{m_\\rho - 1} \\right]\n$$\nTo implement this model, all quantities must be in a consistent set of units. We will use Angstroms ($\\mathrm{\\AA}$) for length and inverse Angstroms ($\\mathrm{\\AA}^{-1}$) for reciprocal vectors. The energy cutoffs $E_{\\mathrm{cut}}$ and $E_\\rho$ are given in electron-volts ($\\mathrm{eV}$). They must be converted to the corresponding wavevectors $k_{\\max}$ and $G_{\\max}$ in $\\mathrm{\\AA}^{-1}$.\n\nThe conversion is based on the free-electron dispersion relation in atomic units, $E [\\mathrm{Ha}] = k^2 / 2$, where $k$ is in inverse Bohr ($a_0^{-1}$).\nThe conversion constants provided are:\n- $C_E = 27.211386245988 \\ \\mathrm{eV}/\\mathrm{Ha}$\n- $C_k = 1.88972612456506 \\ \\mathrm{\\AA}^{-1}/(a_0^{-1})$\n\nGiven an energy cutoff $E_{\\mathrm{cut}}$ in $\\mathrm{eV}$, we first convert it to Hartree:\n$$\nE_{\\mathrm{cut}} [\\mathrm{Ha}] = \\frac{E_{\\mathrm{cut}} [\\mathrm{eV}]}{C_E}\n$$\nNext, we calculate the corresponding wavevector magnitude in atomic units:\n$$\nk_{\\max} [a_0^{-1}] = \\sqrt{2 \\cdot E_{\\mathrm{cut}} [\\mathrm{Ha}]}\n$$\nFinally, we convert this to $\\mathrm{\\AA}^{-1}$:\n$$\nk_{\\max} [\\mathrm{\\AA}^{-1}] = k_{\\max} [a_0^{-1}] \\cdot C_k = \\sqrt{\\frac{2 \\cdot E_{\\mathrm{cut}} [\\mathrm{eV}]}{C_E}} \\cdot C_k\n$$\nThe same formula is used to convert $E_\\rho$ to $G_{\\max}$. The characteristic scales $k_{\\mathrm{ref}}=\\pi/r_c$ and $G_{\\mathrm{ref}}=\\pi/r_{c,\\rho}$ are already in $\\mathrm{\\AA}^{-1}$ since $r_c$ and $r_{c,\\rho}$ are given in $\\mathrm{\\AA}$.\n\nThe parameters for the two pseudopotential families are:\n- **USPP**: $m_w = 4$, $m_\\rho = 2$, $r_c = 1.2 \\ \\mathrm{\\AA}$, $r_{c,\\rho} = 0.8 \\ \\mathrm{\\AA}$, $\\alpha_w = 0.12$, $\\alpha_\\rho = 0.04$.\n- **PAW**: $m_w = 5$, $m_\\rho = 3$, $r_c = 0.9 \\ \\mathrm{\\AA}$, $r_{c,\\rho} = 0.7 \\ \\mathrm{\\AA}$, $\\alpha_w = 0.08$, $\\alpha_\\rho = 0.025$.\n\n**4. Computational Tasks**\n\nThe tasks are:\n1.  Calculate $\\Delta F$ for four specific test cases using the derived model.\n2.  Perform a convergence test for both USPP and PAW methods. For a given list of candidate cutoffs $E_{\\mathrm{cut}}^{\\mathrm{cand}}$, we find the minimum $E_{\\mathrm{cut}}$ that yields a predicted force error $\\Delta F \\le \\tau$, where $\\tau = 0.05 \\ \\mathrm{eV}/\\mathrm{\\AA}$. This test uses a representative force $F_{\\mathrm{true,ref}} = 0.80 \\ \\mathrm{eV}/\\mathrm{\\AA}$ and method-dependent ratios for the density cutoff ($E_\\rho/E_{\\mathrm{cut}} = 12$ for USPP; $E_\\rho/E_{\\mathrm{cut}} = 8$ for PAW). If no candidate cutoff meets the criterion, the result is $-1$.", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Main function to solve the problem: calculate force errors for test cases\n    and perform convergence tests for USPP and PAW methods.\n    \"\"\"\n\n    # --- Physical Constants ---\n    EV_PER_HA = 27.211386245988\n    INV_A_PER_INV_BOHR = 1.88972612456506\n\n    # --- Method-Specific Parameters ---\n    # Keys: m_w, m_rho, r_c, r_c_rho, alpha_w, alpha_rho\n    params = {\n        'USPP': {\n            'm_w': 4, 'm_rho': 2,\n            'r_c': 1.2, 'r_c_rho': 0.8, # in Angstrom\n            'alpha_w': 0.12, 'alpha_rho': 0.04\n        },\n        'PAW': {\n            'm_w': 5, 'm_rho': 3,\n            'r_c': 0.9, 'r_c_rho': 0.7, # in Angstrom\n            'alpha_w': 0.08, 'alpha_rho': 0.025\n        }\n    }\n\n    def convert_energy_to_wavevector(energy_ev):\n        \"\"\"Converts energy cutoff in eV to wavevector in 1/Angstrom.\"\"\"\n        if energy_ev = 0:\n            return float('inf')\n        energy_ha = energy_ev / EV_PER_HA\n        k_inv_bohr = np.sqrt(2 * energy_ha)\n        k_inv_a = k_inv_bohr * INV_A_PER_INV_BOHR\n        return k_inv_a\n\n    def calculate_force_error(method, E_cut, E_rho, F_true):\n        \"\"\"\n        Calculates the predicted force error magnitude based on the derived model.\n\n        Args:\n            method (str): 'USPP' or 'PAW'.\n            E_cut (float): Wavefunction energy cutoff in eV.\n            E_rho (float): Density energy cutoff in eV.\n            F_true (float): Magnitude of the fully converged force in eV/Angstrom.\n\n        Returns:\n            float: The predicted force error magnitude Delta_F in eV/Angstrom.\n        \"\"\"\n        p = params[method]\n\n        # Wavefunction contribution\n        m_w = p['m_w']\n        p_w = m_w - 1\n        r_c = p['r_c']\n        alpha_w = p['alpha_w']\n        k_ref = np.pi / r_c\n        k_max = convert_energy_to_wavevector(E_cut)\n        \n        delta_F_w = F_true * alpha_w * (k_ref / k_max)**p_w\n\n        # Density/augmentation contribution\n        m_rho = p['m_rho']\n        p_rho = m_rho - 1\n        r_c_rho = p['r_c_rho']\n        alpha_rho = p['alpha_rho']\n        G_ref = np.pi / r_c_rho\n        G_max = convert_energy_to_wavevector(E_rho)\n        \n        delta_F_rho = F_true * alpha_rho * (G_ref / G_max)**p_rho\n        \n        return delta_F_w + delta_F_rho\n\n    # --- Task 1: Calculate force errors for test suite ---\n    test_cases = [\n        {'method': 'USPP', 'E_cut': 30, 'E_rho': 180, 'F_true': 0.80},\n        {'method': 'USPP', 'E_cut': 45, 'E_rho': 200, 'F_true': 0.25},\n        {'method': 'PAW', 'E_cut': 35, 'E_rho': 280, 'F_true': 1.50},\n        {'method': 'PAW', 'E_cut': 60, 'E_rho': 360, 'F_true': 0.60},\n    ]\n\n    force_error_results = []\n    for case in test_cases:\n        error = calculate_force_error(case['method'], case['E_cut'], case['E_rho'], case['F_true'])\n        force_error_results.append(error)\n\n    # --- Task 2: Perform convergence tests ---\n    conv_params = {\n        'E_cut_cand': [25, 30, 35, 40, 50, 60], # in eV\n        'F_true_ref': 0.80, # in eV/Angstrom\n        'tau': 0.05, # in eV/Angstrom\n        'ratios': {\n            'USPP': 12.0,\n            'PAW': 8.0\n        }\n    }\n    \n    convergence_results = []\n    for method in ['USPP', 'PAW']:\n        E_cut_candidates = conv_params['E_cut_cand']\n        ratio = conv_params['ratios'][method]\n        F_true_ref = conv_params['F_true_ref']\n        tau = conv_params['tau']\n\n        optimal_E_cut = -1\n        for E_cut in sorted(E_cut_candidates):\n            E_rho = E_cut * ratio\n            delta_F = calculate_force_error(method, E_cut, E_rho, F_true_ref)\n            if delta_F = tau:\n                optimal_E_cut = E_cut\n                break\n        convergence_results.append(optimal_E_cut)\n\n    # --- Final Output Formatting ---\n    all_results = [f\"{x:.6f}\" for x in force_error_results] + [str(x) for x in convergence_results]\n    print(f\"[{','.join(all_results)}]\")\n\nsolve()\n```", "id": "2480438"}, {"introduction": "Pseudopotentials are powerful tools, but they can occasionally introduce unphysical artifacts known as \"ghost states\" into the electronic band structure, which can severely compromise the scientific validity of a calculation. Identifying these spurious states is a crucial troubleshooting skill for any serious practitioner of DFT. This advanced diagnostic exercise guides you through the implementation of a robust, two-part algorithm for detecting ghost states [@problem_id:2480463]. By combining evidence from the projected density of states (PDOS) and a check of wavefunction norm-conservation, you will learn to distinguish real electronic features from computational artifacts, ensuring the integrity of your results.", "problem": "Implement a program that diagnoses the presence of ghost states in a plane-wave Kohn–Sham (KS) calculation using two independent numerical signatures derived from the theory of pseudopotentials and the Projector Augmented-Wave (PAW) method: a band-by-band norm test and the projected density of states (PDOS) analysis. The diagnostic must be framed in purely mathematical terms and must not assume any particular electronic-structure package. All energies must be expressed in electronvolts (eV).\n\nYou are given the following fundamental base and definitions to construct your diagnostic.\n\n1. Fundamental base.\n   - In the KS formalism, the single-particle states are solutions of a Hermitian eigenproblem with well-defined band energies $E_{n\\mathbf{k}}$ indexed by band $n$ and crystal momentum $\\mathbf{k}$ in the Brillouin Zone (BZ).\n   - In norm-conserving pseudopotentials and in the Projector Augmented-Wave (PAW) approach, atomic-like projectors $\\{ \\hat{p}_{\\ell m} \\}$ resolve angular-momentum channels labeled by $\\ell \\in \\{0,1,2\\}$ (interpreted as $s,p,d$). For a KS state $\\lvert \\psi_{n\\mathbf{k}} \\rangle$, the band-by-band projector norm in channel $\\ell$ is defined as\n     $$W_{n\\mathbf{k},\\ell} \\equiv \\sum_{m} \\left| \\langle \\hat{p}_{\\ell m} \\mid \\psi_{n\\mathbf{k}} \\rangle \\right|^2.$$\n     In an idealized norm-conserving scenario, the target norm per channel is $T_\\ell$, and the deviation per state is\n     $$d_{n\\mathbf{k},\\ell} \\equiv \\left| W_{n\\mathbf{k},\\ell} - T_\\ell \\right|.$$\n   - The projected density of states (PDOS) in channel $\\ell$ is a nonnegative function $g_\\ell(E)$ of energy $E$ that is integrable on any finite interval. A ghost state may manifest as a narrow, high-amplitude, isolated peak in $g_\\ell(E)$ at some energy $E^\\star$.\n\n2. Diagnostic conditions to be implemented.\n   - Peak detection in PDOS: A candidate ghost peak at energy $E^\\star$ in channel $\\ell$ is identified if $E^\\star$ is a strict local maximum of $g_\\ell(E)$ and its full width at half maximum (FWHM), denoted $W_{\\ell}(E^\\star)$, satisfies\n     $$W_{\\ell}(E^\\star)  w_{\\max}, \\quad g_\\ell(E^\\star)  g_{\\min}.$$\n     The FWHM is defined as the distance in energy between the two points where $g_\\ell(E)$ equals $g_\\ell(E^\\star)/2$ on either side of $E^\\star$.\n   - Band-by-band norm anomaly near the peak: Define the set of nearby states\n     $$\\mathcal{S}_{\\Delta E}(E^\\star) \\equiv \\left\\{ (n,\\mathbf{k}) \\ \\big| \\ \\left| E_{n\\mathbf{k}} - E^\\star \\right| \\le \\Delta E \\right\\}.$$\n     Let the norm deviation in channel $\\ell$ at these states be $d_{n\\mathbf{k},\\ell}$. A norm anomaly is present near $E^\\star$ if\n     $$\\max_{(n,\\mathbf{k}) \\in \\mathcal{S}_{\\Delta E}(E^\\star)} d_{n\\mathbf{k},\\ell}  \\tau_N,$$\n     and the fraction of elements of $\\mathcal{S}_{\\Delta E}(E^\\star)$ that satisfy $d_{n\\mathbf{k},\\ell}  \\tau_N$ is at least $f_{\\min}$.\n   - Ghost-state decision: The diagnostic must return true if and only if there exists a channel $\\ell$ and a candidate peak energy $E^\\star$ such that both the PDOS peak condition and the norm anomaly condition are simultaneously satisfied.\n\n3. Thresholds to use in all datasets.\n   - Use\n     $$w_{\\max} = 0.10 \\ \\text{eV}, \\quad g_{\\min} = 1.0, \\quad \\Delta E = 0.10 \\ \\text{eV}, \\quad \\tau_N = 0.15, \\quad f_{\\min} = 0.25.$$\n   - Use target norms\n     $$T_0 = 1.0, \\quad T_1 = 1.0, \\quad T_2 = 1.0.$$\n\n4. Input model and test suite. Your program must internally generate three synthetic datasets A, B, and C, each comprising:\n   - An energy grid $E$ from $-5.0$ to $15.0$ eV with step $0.1$ eV.\n   - Three PDOS channel functions $g_0(E)$, $g_1(E)$, $g_2(E)$ constructed as finite sums of unnormalized Gaussians,\n     $$G(E ; \\mu, \\sigma, A) \\equiv A \\exp\\!\\left(-\\frac{(E-\\mu)^2}{2\\sigma^2}\\right).$$\n   - A rectangular array of band energies $E_{n\\mathbf{k}}$ with $n \\in \\{0,\\dots,N_b-1\\}$, $\\mathbf{k} \\in \\{0,\\dots,N_k-1\\}$.\n   - A tensor of band-by-band projector norms $W_{n\\mathbf{k},\\ell}$ for $\\ell \\in \\{0,1,2\\}$.\n   - All random perturbations must be generated deterministically by seeding the pseudo-random number generator with the integer seed $12345$.\n\n   Construct the three datasets as follows.\n\n   - Dataset A (clean reference, no ghost expected):\n     - Let $N_b = 20$ and $N_k = 8$.\n     - Energy grid $E$ as above.\n     - Define PDOS channels by\n       $$g_0(E) = 1.5 \\, G(E; -2.0, 0.8, 1) + 1.0 \\, G(E; 6.0, 0.9, 1),$$\n       $$g_1(E) = 2.0 \\, G(E; 0.5, 1.2, 1) + 1.0 \\, G(E; 8.0, 1.0, 1),$$\n       $$g_2(E) = 1.0 \\, G(E; 3.0, 1.5, 1).$$\n     - Define band energies using a band index offset and weak dispersion,\n       $$E_{n\\mathbf{k}} = (-4.0 + 1.0 \\, n) + 0.15 \\cos\\!\\left(\\frac{2\\pi \\mathbf{k}}{N_k}\\right) + \\delta_{n\\mathbf{k}},$$\n       where each $\\delta_{n\\mathbf{k}}$ is drawn uniformly from $[-0.02, 0.02]$ with the fixed seed.\n     - Define norms per channel\n       $$W_{n\\mathbf{k},\\ell} = T_\\ell + \\epsilon_{n\\mathbf{k},\\ell}, \\quad \\epsilon_{n\\mathbf{k},\\ell} \\sim \\text{Uniform}([-0.02, 0.02]).$$\n\n   - Dataset B (ghost present in $s$-channel at $E^\\star \\approx 7.0$ eV):\n     - Same $N_b$, $N_k$, energy grid $E$, and $g_1(E)$, $g_2(E)$ as in Dataset A.\n     - Let\n       $$g_0(E) = \\left[1.5 \\, G(E; -2.0, 0.8, 1) + 1.0 \\, G(E; 6.0, 0.9, 1)\\right] + 5.0 \\, G(E; 7.0, 0.03, 1).$$\n     - Use the same $E_{n\\mathbf{k}}$ construction as Dataset A (with the same random seed).\n     - For norms, set the background as in Dataset A, except enforce an $s$-channel anomaly for states near $7.0$ eV:\n       $$W_{n\\mathbf{k},0} =\n         \\begin{cases}\n           0.60,  \\text{if } \\left|E_{n\\mathbf{k}} - 7.0\\right| \\le 0.08, \\\\\n           T_0 + \\epsilon_{n\\mathbf{k},0},  \\text{otherwise},\n         \\end{cases}\n       $$\n       with $\\epsilon_{n\\mathbf{k},0} \\sim \\text{Uniform}([-0.02, 0.02])$ as above. For $\\ell \\in \\{1,2\\}$, use $W_{n\\mathbf{k},\\ell} = T_\\ell + \\epsilon_{n\\mathbf{k},\\ell}$ with $\\epsilon_{n\\mathbf{k},\\ell} \\sim \\text{Uniform}([-0.02, 0.02])$.\n\n   - Dataset C (edge case: narrow-looking resonance but above width threshold; no ghost expected):\n     - Same $N_b$, $N_k$, energy grid $E$, and band energies as in Dataset A.\n     - Let\n       $$g_0(E) = \\left[1.5 \\, G(E; -2.0, 0.8, 1) + 1.0 \\, G(E; 6.0, 0.9, 1)\\right] + 1.5 \\, G(E; 3.0, 0.12, 1),$$\n       $$g_1(E), g_2(E) \\text{ as in Dataset A.}$$\n     - Norms as in Dataset A for all channels, with $W_{n\\mathbf{k},\\ell} = T_\\ell + \\epsilon_{n\\mathbf{k},\\ell}$ and $\\epsilon_{n\\mathbf{k},\\ell} \\sim \\text{Uniform}([-0.02, 0.02])$.\n\n5. Required output. Your program must:\n   - Implement the PDOS peak detection using the FWHM definition and the thresholds $w_{\\max}$ and $g_{\\min}$.\n   - Implement the band-by-band norm anomaly detection with the thresholds $\\Delta E$, $\\tau_N$, and $f_{\\min}$.\n   - Return a boolean for each dataset: true if a ghost is detected according to the combined condition stated above, false otherwise.\n   - Produce a single line of output containing the three boolean results, in order for datasets A, B, and C, as a comma-separated list of lowercase literals enclosed in square brackets, for example, $[{\\rm true},{\\rm false},{\\rm true}]$.\n\nYour program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets (e.g., \"[true,false,true]\").", "solution": "The solution requires implementing a numerical algorithm to diagnose ghost states in a Kohn–Sham density functional theory calculation. The algorithm is based on the specifications provided and is applied to three synthetically generated datasets. The process involves translating the mathematical definitions and diagnostic conditions into a computational procedure.\n\nFirst, common components for all three datasets are generated. A single pseudo-random number generator is initialized with the specified seed, $12345$, to ensure deterministic results. The energy grid $E$ spans from $-5.0 \\ \\text{eV}$ to $15.0 \\ \\text{eV}$ with a step of $0.1 \\ \\text{eV}$. The band energies $E_{n\\mathbf{k}}$ for $N_b=20$ bands and $N_k=8$ $\\mathbf{k}$-points are calculated according to the formula provided, which includes a deterministic random perturbation. This matrix of band energies is identical for all three datasets.\n\nFor each dataset (A, B, and C), the specific PDOS functions $g_\\ell(E)$ are constructed as sums of Gaussian functions with the given parameters. The projector norms $W_{n\\mathbf{k},\\ell}$ are also generated as specified for each dataset, with small random perturbations around the target norms $T_\\ell=1.0$. For Dataset B, a specific norm anomaly is engineered for the s-channel.\n\nThe ghost state detection algorithm then proceeds for each dataset by iterating through each angular momentum channel $\\ell \\in \\{0, 1, 2\\}$:\n\n**Step 1: PDOS Peak Analysis**\nThe PDOS function $g_\\ell(E)$ for the current channel is analyzed to find candidate ghost peaks.\n1.  A search is conducted for all strict local maxima in $g_\\ell(E)$ where the value is greater than its immediate neighbors.\n2.  Each identified peak at energy $E^\\star$ must satisfy the amplitude condition $g_\\ell(E^\\star) > g_{\\min}$.\n3.  For peaks satisfying the amplitude condition, the full width at half maximum (FWHM), $W_\\ell(E^\\star)$, is calculated.\n4.  A candidate ghost peak is confirmed if its FWHM satisfies $W_\\ell(E^\\star)  w_{\\max}$.\n\n**Step 2: Band-by-Band Norm Anomaly Analysis**\nIf a candidate ghost peak is found at energy $E^\\star$ in channel $\\ell$, a corresponding norm anomaly is sought.\n1.  The set of \"nearby states\" $\\mathcal{S}_{\\Delta E}(E^\\star)$ is identified, consisting of all Kohn–Sham states $(n, \\mathbf{k})$ whose energy $E_{n\\mathbf{k}}$ falls within a window $|E_{n\\mathbf{k}} - E^\\star| \\le \\Delta E$.\n2.  If this set is not empty, the norm deviation $d_{n\\mathbf{k},\\ell} = |W_{n\\mathbf{k},\\ell} - T_\\ell|$ is calculated for each state in the set.\n3.  A norm anomaly is confirmed if two conditions are met simultaneously:\n    a. The maximum deviation in the set exceeds the threshold: $\\max d_{n\\mathbf{k},\\ell} > \\tau_N$.\n    b. The fraction of states in the set with a deviation greater than $\\tau_N$ is at least $f_{\\min}$.\n\n**Step 3: Final Decision**\nA ghost state is declared present in the dataset (returning `true`) if, for any channel $\\ell$, there exists at least one energy $E^\\star$ where both the PDOS candidate peak conditions and the norm anomaly conditions are met. If no such correspondence is found after checking all channels, the dataset is considered free of ghost states (returning `false`).\n\nThis procedure is applied to each of the three datasets, and the boolean results are collected and printed in the required format.", "answer": "```python\nimport numpy as np\nfrom scipy.signal import find_peaks, peak_widths\n\n# Define global constants based on the problem statement\nW_MAX = 0.10  # eV\nG_MIN = 1.0\nDELTA_E = 0.10  # eV\nTAU_N = 0.15\nF_MIN = 0.25\nTARGET_NORMS = np.array([1.0, 1.0, 1.0])\nRNG_SEED = 12345\n\ndef gaussian(E, mu, sigma, A):\n    \"\"\"Computes an unnormalized Gaussian function.\"\"\"\n    return A * np.exp(-((E - mu)**2) / (2 * sigma**2))\n\ndef generate_datasets(rng):\n    \"\"\"Generates the three datasets A, B, and C.\"\"\"\n    \n    # Common parameters for all datasets\n    Nb, Nk = 20, 8\n    # Use linspace to ensure the endpoint 15.0 is included\n    E_grid = np.linspace(-5.0, 15.0, 201) \n\n    # Generate common band energies E_nk for all datasets to ensure consistency\n    E_n0 = -4.0 + 1.0 * np.arange(Nb)\n    k_vals = np.arange(Nk)\n    cos_term = 0.15 * np.cos(2 * np.pi * k_vals / Nk)\n    delta_nk = rng.uniform(-0.02, 0.02, size=(Nb, Nk))\n    band_energies = E_n0[:, np.newaxis] + cos_term[np.newaxis, :] + delta_nk\n\n    # --- Dataset A ---\n    pdos_A = np.zeros((3, len(E_grid)))\n    pdos_A[0, :] = 1.5 * gaussian(E_grid, -2.0, 0.8, 1) + 1.0 * gaussian(E_grid, 6.0, 0.9, 1)\n    pdos_A[1, :] = 2.0 * gaussian(E_grid, 0.5, 1.2, 1) + 1.0 * gaussian(E_grid, 8.0, 1.0, 1)\n    pdos_A[2, :] = 1.0 * gaussian(E_grid, 3.0, 1.5, 1)\n    \n    eps_A = rng.uniform(-0.02, 0.02, size=(Nb, Nk, 3))\n    norms_A = TARGET_NORMS[np.newaxis, np.newaxis, :] + eps_A\n    dataset_A = (E_grid, pdos_A, band_energies, norms_A)\n\n    # --- Dataset B ---\n    pdos_B = np.copy(pdos_A)\n    # Add the sharp ghost peak to channel 0 (s-channel)\n    pdos_B[0, :] += 5.0 * gaussian(E_grid, 7.0, 0.03, 1)\n    \n    eps_B = rng.uniform(-0.02, 0.02, size=(Nb, Nk, 3))\n    norms_B = TARGET_NORMS[np.newaxis, np.newaxis, :] + eps_B\n    # Introduce norm anomaly for states near 7.0 eV in channel 0\n    anomaly_mask = np.abs(band_energies - 7.0) = 0.08\n    norms_B[anomaly_mask, 0] = 0.60\n    dataset_B = (E_grid, pdos_B, band_energies, norms_B)\n\n    # --- Dataset C ---\n    pdos_C = np.copy(pdos_A)\n    # Add a narrow-looking but wider-than-threshold peak\n    pdos_C[0, :] += 1.5 * gaussian(E_grid, 3.0, 0.12, 1)\n    \n    eps_C = rng.uniform(-0.02, 0.02, size=(Nb, Nk, 3))\n    norms_C = TARGET_NORMS[np.newaxis, np.newaxis, :] + eps_C\n    dataset_C = (E_grid, pdos_C, band_energies, norms_C)\n    \n    return [dataset_A, dataset_B, dataset_C]\n\ndef check_for_ghost(dataset):\n    \"\"\"Applies the diagnostic to a single dataset.\"\"\"\n    E_grid, pdos_channels, band_energies, projector_norms = dataset\n    energy_step = E_grid[1] - E_grid[0]\n\n    for l_idx in range(3):  # Iterate over channels l=0, 1, 2\n        pdos = pdos_channels[l_idx]\n        \n        # 1. PDOS Peak Analysis\n        # Find peaks with height greater than G_MIN\n        all_peaks, _ = find_peaks(pdos, height=G_MIN)\n        \n        # Filter for strict local maxima\n        strict_peaks = [\n            p for p in all_peaks \n            if 0  p  len(pdos) - 1 and pdos[p]  pdos[p-1] and pdos[p]  pdos[p+1]\n        ]\n\n        if not strict_peaks:\n            continue\n            \n        # Calculate FWHM for strict peaks\n        widths_info = peak_widths(pdos, strict_peaks, rel_height=0.5)\n        fwhms_indices = widths_info[0]\n        fwhms_ev = fwhms_indices * energy_step\n        \n        for i, peak_idx in enumerate(strict_peaks):\n            if fwhms_ev[i]  W_MAX:\n                # Found a candidate ghost peak, now check for norm anomaly\n                peak_energy = E_grid[peak_idx]\n                \n                # 2. Norm Anomaly Analysis\n                nearby_states_mask = np.abs(band_energies - peak_energy) = DELTA_E\n                \n                num_nearby_states = np.sum(nearby_states_mask)\n                if num_nearby_states == 0:\n                    continue\n\n                norms_nearby = projector_norms[nearby_states_mask, l_idx]\n                deviations = np.abs(norms_nearby - TARGET_NORMS[l_idx])\n                \n                # Check the two norm anomaly conditions\n                max_dev_cond = np.max(deviations)  TAU_N\n                \n                anomalous_fraction = np.sum(deviations  TAU_N) / num_nearby_states\n                fraction_cond = anomalous_fraction = F_MIN\n                \n                if max_dev_cond and fraction_cond:\n                    # Both PDOS and norm conditions met: ghost detected\n                    return True\n    \n    # No ghost state found across all channels\n    return False\n\ndef solve():\n    \"\"\"\n    Main function to run the ghost state diagnostic on the three datasets.\n    \"\"\"\n    rng = np.random.default_rng(RNG_SEED)\n    datasets = generate_datasets(rng)\n    \n    results = []\n    for dataset in datasets:\n        is_ghost = check_for_ghost(dataset)\n        results.append(str(is_ghost).lower())\n    \n    # Print final output in the required format\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2480463"}]}