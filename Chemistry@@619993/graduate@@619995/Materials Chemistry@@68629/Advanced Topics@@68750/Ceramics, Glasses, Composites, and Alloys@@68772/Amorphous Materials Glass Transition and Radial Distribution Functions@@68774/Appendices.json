{"hands_on_practices": [{"introduction": "Understanding the structure of amorphous materials begins with quantifying the arrangement of atoms in space. This exercise provides a hands-on approach to modeling an amorphous solid as a dense random packing of hard spheres, a foundational concept in materials science. By applying a series of physically motivated approximations, you will derive a relationship between the packing fraction $\\phi$ and the average coordination number $z$, practicing the crucial skill of translating a simplified physical picture into a quantitative structural description using the radial distribution function $g(r)$ [@problem_id:2468325].", "problem": "A monodisperse amorphous solid is modeled as a dense random packing of hard spheres (HS) of diameter $d$. The structure is characterized by the radial distribution function $g(r)$, where $r$ is the center-to-center separation between particles. The packing fraction is $\\phi = \\rho \\, v_{\\text{sphere}}$, with number density $\\rho$ and single-sphere volume $v_{\\text{sphere}} = \\pi d^{3}/6$. The average coordination number $z$ is defined as the expected number of neighbors in the first coordination shell and is given by the integral definition\n$$\nz \\;=\\; 4\\pi \\rho \\int_{0}^{r_{\\min}} g(r)\\, r^{2}\\, dr,\n$$\nwhere $r_{\\min}$ denotes the position of the first minimum of $g(r)$. \n\nUsing only dense random packing arguments and core definitions, proceed as follows:\n- Calibrate the nearest-neighbor distance to the packing fraction by assuming that the position $r_{0}$ of the first peak of $g(r)$ scales as the mean interparticle spacing $\\rho^{-1/3}$ and that at random close packing (RCP) with packing fraction $\\phi_{\\mathrm{rcp}}$ the contact condition $r_{0}=d$ holds. From this, relate $r_{0}$ to $\\phi$ and $\\phi_{\\mathrm{rcp}}$.\n- Assume, as a geometric estimate appropriate to densely packed disordered spheres, that the first minimum occurs at $r_{\\min} = \\sqrt{2}\\, r_{0}$.\n- Approximate the first-shell structure by taking $g(r)\\approx 0$ for $r<d$ due to excluded volume and $g(r)\\approx 1$ for $d \\le r \\le r_{\\min}$, neglecting finer oscillations within the first shell.\n\nUsing these assumptions, derive $z$ in terms of $\\phi$ and $\\phi_{\\mathrm{rcp}}$ and then evaluate $z$ for $\\phi = 0.58$ and $\\phi_{\\mathrm{rcp}}=0.64$. You may use $d = 0.30\\,\\text{nm}$ if needed for intermediate reasoning. Report the final coordination number as a dimensionless number rounded to three significant figures.", "solution": "The problem as stated is scientifically grounded, well-posed, and self-contained. It presents a simplified but standard physical model for amorphous solids and requires a logical derivation based on the provided assumptions. The problem is valid. We proceed with the solution.\n\nThe average coordination number, $z$, is defined by the integral\n$$\nz = 4\\pi \\rho \\int_{0}^{r_{\\min}} g(r)\\, r^{2}\\, dr\n$$\nwhere $\\rho$ is the number density and $r_{\\min}$ is the position of the first minimum in the radial distribution function $g(r)$.\n\nThe problem provides a set of simplifying assumptions to model the structure of the amorphous solid. First, the radial distribution function $g(r)$ is approximated by a step function based on the hard-sphere excluded volume principle. For separations $r$ less than the sphere diameter $d$, particles cannot overlap, so $g(r)$ is zero. For separations between $d$ and the first minimum $r_{\\min}$, we neglect short-range order correlations and assume $g(r) \\approx 1$.\n$$\ng(r) \\approx\n\\begin{cases}\n0 & \\text{for } r < d \\\\\n1 & \\text{for } d \\le r \\le r_{\\min}\n\\end{cases}\n$$\nSubstituting this approximation into the definition of $z$, the lower limit of integration becomes $d$, and the integrand simplifies.\n$$\nz \\approx 4\\pi \\rho \\int_{d}^{r_{\\min}} (1) \\, r^{2}\\, dr\n$$\nThe integral is elementary:\n$$\n\\int_{d}^{r_{\\min}} r^{2}\\, dr = \\left[ \\frac{r^{3}}{3} \\right]_{d}^{r_{\\min}} = \\frac{r_{\\min}^{3} - d^{3}}{3}\n$$\nThus, the coordination number becomes:\n$$\nz = \\frac{4\\pi \\rho}{3} (r_{\\min}^{3} - d^{3})\n$$\nNext, we must relate the quantities $r_{\\min}$ and $\\rho$ to the given packing fractions $\\phi$ and $\\phi_{\\mathrm{rcp}}$. The packing fraction $\\phi$ is given by $\\phi = \\rho \\, v_{\\text{sphere}} = \\rho (\\frac{\\pi d^{3}}{6})$. From this, we can express the product $\\rho d^{3}$ in terms of $\\phi$:\n$$\n\\rho d^{3} = \\frac{6\\phi}{\\pi}\n$$\nThe problem states that the first peak position of $g(r)$, denoted $r_{0}$, scales as the mean interparticle spacing, $\\rho^{-1/3}$. Therefore, we can write $r_{0} = C \\rho^{-1/3}$, where $C$ is a constant of proportionality. We can express $\\rho$ as $\\rho = \\frac{6\\phi}{\\pi d^{3}}$, which yields:\n$$\nr_{0} = C \\left( \\frac{6\\phi}{\\pi d^{3}} \\right)^{-1/3} = C \\left( \\frac{\\pi}{6} \\right)^{1/3} d \\, \\phi^{-1/3}\n$$\nThis relationship is calibrated using the condition at random close packing (RCP), where $\\phi = \\phi_{\\mathrm{rcp}}$ and the particles are in contact, so $r_{0} = d$. Substituting these values:\n$$\nd = C \\left( \\frac{\\pi}{6} \\right)^{1/3} d \\, \\phi_{\\mathrm{rcp}}^{-1/3}\n$$\nSolving for the constant term $C (\\frac{\\pi}{6})^{1/3}$:\n$$\nC \\left( \\frac{\\pi}{6} \\right)^{1/3} = \\phi_{\\mathrm{rcp}}^{1/3}\n$$\nSubstituting this back into the general expression for $r_{0}$ gives the calibrated relationship:\n$$\nr_{0} = (\\phi_{\\mathrm{rcp}}^{1/3}) d \\, \\phi^{-1/3} = d \\left( \\frac{\\phi_{\\mathrm{rcp}}}{\\phi} \\right)^{1/3}\n$$\nThe position of the first minimum, $r_{\\min}$, is geometrically estimated as $r_{\\min} = \\sqrt{2} \\, r_{0}$. Therefore:\n$$\nr_{\\min} = \\sqrt{2} \\, d \\left( \\frac{\\phi_{\\mathrm{rcp}}}{\\phi} \\right)^{1/3}\n$$\nNow we substitute this expression for $r_{\\min}$ into our equation for $z$:\n$$\nz = \\frac{4\\pi \\rho}{3} \\left( \\left[ \\sqrt{2} \\, d \\left( \\frac{\\phi_{\\mathrm{rcp}}}{\\phi} \\right)^{1/3} \\right]^{3} - d^{3} \\right)\n$$\nSimplifying the term in the parentheses:\n$$\nz = \\frac{4\\pi \\rho}{3} \\left( (\\sqrt{2})^{3} d^{3} \\frac{\\phi_{\\mathrm{rcp}}}{\\phi} - d^{3} \\right) = \\frac{4\\pi \\rho d^{3}}{3} \\left( 2\\sqrt{2} \\frac{\\phi_{\\mathrm{rcp}}}{\\phi} - 1 \\right)\n$$\nTo eliminate $\\rho$ and $d$, we use the relation $\\rho d^{3} = 6\\phi/\\pi$:\n$$\nz = \\frac{4\\pi}{3} \\left( \\frac{6\\phi}{\\pi} \\right) \\left( 2\\sqrt{2} \\frac{\\phi_{\\mathrm{rcp}}}{\\phi} - 1 \\right)\n$$\nThe term $\\pi$ cancels, and $\\frac{4 \\times 6}{3} = 8$.\n$$\nz = 8\\phi \\left( 2\\sqrt{2} \\frac{\\phi_{\\mathrm{rcp}}}{\\phi} - 1 \\right)\n$$\nDistributing the term $8\\phi$ gives the final analytical expression for $z$ in terms of $\\phi$ and $\\phi_{\\mathrm{rcp}}$:\n$$\nz = 16\\sqrt{2} \\, \\phi_{\\mathrm{rcp}} - 8\\phi\n$$\nThis completes the derivation. Now we evaluate $z$ for the specified values: $\\phi = 0.58$ and $\\phi_{\\mathrm{rcp}} = 0.64$.\n$$\nz = 16\\sqrt{2} \\, (0.64) - 8(0.58)\n$$\n$$\nz = 10.24\\sqrt{2} - 4.64\n$$\nUsing the value of $\\sqrt{2} \\approx 1.41421356$:\n$$\nz \\approx 10.24 \\times 1.41421356 - 4.64\n$$\n$$\nz \\approx 14.481546 - 4.64 = 9.841546\n$$\nThe problem requires the result to be rounded to three significant figures.\n$$\nz \\approx 9.84\n$$\nThis value represents the average number of nearest neighbors for a sphere in the specified amorphous packing, derived under the given set of simplifying assumptions.", "answer": "$$\n\\boxed{9.84}\n$$", "id": "2468325"}, {"introduction": "The glass transition is fundamentally a kinetic phenomenon, meaning the measured glass transition temperature, $T_g$, depends on the experimental timescale. This practice problem delves into this crucial concept by comparing two common operational definitions of $T_g$: one based on a fixed viscosity value and another based on a characteristic relaxation time relevant to calorimetry [@problem_id:2468368]. By applying the Vogel–Fulcher–Tammann (VFT) law and the Maxwell relation, you will quantify this difference and gain a deeper appreciation for the non-equilibrium nature of glasses.", "problem": "A molecular glass-forming liquid exhibits an equilibrium shear viscosity that follows the Vogel–Fulcher–Tammann (VFT) law expressed in base-10 logarithms. Independent rheology characterizes the VFT parameters as follows: the prefactor viscosity is $\\eta_{0} = 10^{-3}\\,\\mathrm{Pa\\,s}$, the kinetic fragility parameter is $B = 3000\\,\\mathrm{K}$, and the Vogel temperature is $T_{0} = 250\\,\\mathrm{K}$. Near the glass transition, the high-frequency (instantaneous) shear modulus is approximately temperature-independent over a narrow window and is measured to be $G_{\\infty} = 5.0 \\times 10^{9}\\,\\mathrm{Pa}$.\n\nA calorimetric scan using Differential Scanning Calorimetry (DSC) at a constant cooling rate $q = 10\\,\\mathrm{K\\,min^{-1}}$ is performed on the same liquid. For this experimental protocol, the calorimetric glass transition temperature $T_{g}^{\\mathrm{cal}}$ (midpoint definition) is operationally defined by the condition that the structural (alpha) relaxation time equals a characteristic value $\\tau^{\\ast} = 30\\,\\mathrm{s}$ at $T_{g}^{\\mathrm{cal}}$. Assume the Maxwell relation between viscosity and relaxation time holds close to the glass transition.\n\nUsing these characterizations, determine:\n1) the temperature $T_{\\eta}$ at which the viscosity reaches $10^{12}\\,\\mathrm{Pa\\,s}$, and\n2) the calorimetric glass transition temperature $T_{g}^{\\mathrm{cal}}$ for the given scan rate.\n\nThen compute the difference $\\Delta T \\equiv T_{\\eta} - T_{g}^{\\mathrm{cal}}$ and report it in $\\mathrm{K}$. Round your final numerical result for $\\Delta T$ to four significant figures.", "solution": "The problem requires the calculation of two temperatures, $T_{\\eta}$ and $T_{g}^{\\mathrm{cal}}$, related to the glass transition of a liquid, and then their difference, $\\Delta T$. The validation of the problem statement confirms that it is scientifically grounded, well-posed, and contains sufficient information for a unique solution.\n\nThe foundation of this problem is the Vogel–Fulcher–Tammann (VFT) law for shear viscosity, $\\eta$, as function of temperature, $T$. The problem specifies the law is expressed in base-$10$ logarithms and provides the relevant parameters. The form is thus:\n$$ \\log_{10}(\\eta(T)) = \\log_{10}(\\eta_{0}) + \\frac{B}{T - T_{0}} $$\nwhere the given parameters are:\n- Prefactor viscosity, $\\eta_{0} = 10^{-3}\\,\\mathrm{Pa\\,s}$.\n- VFT parameter (kinetic fragility), $B = 3000\\,\\mathrm{K}$.\n- Vogel temperature, $T_{0} = 250\\,\\mathrm{K}$.\n\nIt is standard practice in such equations to consider the arguments of logarithms as dimensionless quantities, implying division by standard units. Thus, $\\log_{10}(\\eta(T))$ implicitly means $\\log_{10}(\\eta(T) / 1\\,\\mathrm{Pa\\,s})$, and similarly for $\\eta_0$.\n\nWe can rearrange the VFT equation to solve for temperature $T$ as a function of viscosity $\\eta$:\n$$ \\log_{10}(\\eta(T)) - \\log_{10}(\\eta_{0}) = \\frac{B}{T - T_{0}} $$\n$$ \\log_{10}\\left(\\frac{\\eta(T)}{\\eta_{0}}\\right) = \\frac{B}{T - T_{0}} $$\n$$ T - T_{0} = \\frac{B}{\\log_{10}\\left(\\frac{\\eta(T)}{\\eta_{0}}\\right)} $$\n$$ T(\\eta) = T_{0} + \\frac{B}{\\log_{10}\\left(\\frac{\\eta}{\\eta_{0}}\\right)} $$\nThis general expression will be used to calculate both required temperatures.\n\nFirst, we determine the temperature $T_{\\eta}$ at which the viscosity reaches $\\eta = 10^{12}\\,\\mathrm{Pa\\,s}$. Using the derived formula:\n$$ T_{\\eta} = T_{0} + \\frac{B}{\\log_{10}\\left(\\frac{10^{12}}{10^{-3}}\\right)} $$\nThe argument of the logarithm is:\n$$ \\frac{10^{12}\\,\\mathrm{Pa\\,s}}{10^{-3}\\,\\mathrm{Pa\\,s}} = 10^{15} $$\nSo the logarithm is:\n$$ \\log_{10}(10^{15}) = 15 $$\nSubstituting this and the given parameters:\n$$ T_{\\eta} = 250\\,\\mathrm{K} + \\frac{3000\\,\\mathrm{K}}{15} = 250\\,\\mathrm{K} + 200\\,\\mathrm{K} = 450\\,\\mathrm{K} $$\n\nSecond, we determine the calorimetric glass transition temperature, $T_{g}^{\\mathrm{cal}}$. This is defined by the condition that the structural relaxation time $\\tau$ equals $\\tau^{\\ast} = 30\\,\\mathrm{s}$. We are instructed to use the Maxwell relation, which connects viscosity, relaxation time, and the high-frequency shear modulus, $G_{\\infty}$:\n$$ \\eta(T) = \\tau(T) G_{\\infty} $$\nThe high-frequency shear modulus is given as $G_{\\infty} = 5.0 \\times 10^{9}\\,\\mathrm{Pa}$.\nAt $T = T_{g}^{\\mathrm{cal}}$, the viscosity, which we denote $\\eta_{g}$, is:\n$$ \\eta_{g} = \\eta(T_{g}^{\\mathrm{cal}}) = \\tau^{\\ast} G_{\\infty} = (30\\,\\mathrm{s})(5.0 \\times 10^{9}\\,\\mathrm{Pa}) = 1.5 \\times 10^{11}\\,\\mathrm{Pa\\,s} $$\nNow we use our general expression for $T$ to find $T_{g}^{\\mathrm{cal}}$ corresponding to the viscosity $\\eta_{g}$:\n$$ T_{g}^{\\mathrm{cal}} = T_{0} + \\frac{B}{\\log_{10}\\left(\\frac{\\eta_{g}}{\\eta_{0}}\\right)} $$\nThe argument of the logarithm is:\n$$ \\frac{\\eta_{g}}{\\eta_{0}} = \\frac{1.5 \\times 10^{11}\\,\\mathrm{Pa\\,s}}{10^{-3}\\,\\mathrm{Pa\\,s}} = 1.5 \\times 10^{14} $$\nThe logarithm is:\n$$ \\log_{10}(1.5 \\times 10^{14}) = \\log_{10}(1.5) + \\log_{10}(10^{14}) = 14 + \\log_{10}(1.5) $$\nSubstituting this into the expression for $T_{g}^{\\mathrm{cal}}$:\n$$ T_{g}^{\\mathrm{cal}} = 250\\,\\mathrm{K} + \\frac{3000\\,\\mathrm{K}}{14 + \\log_{10}(1.5)} $$\n\nFinally, we compute the difference $\\Delta T = T_{\\eta} - T_{g}^{\\mathrm{cal}}$:\n$$ \\Delta T = 450\\,\\mathrm{K} - \\left( 250\\,\\mathrm{K} + \\frac{3000\\,\\mathrm{K}}{14 + \\log_{10}(1.5)} \\right) $$\n$$ \\Delta T = 200\\,\\mathrm{K} - \\frac{3000\\,\\mathrm{K}}{14 + \\log_{10}(1.5)} $$\nTo obtain a numerical value, we use $\\log_{10}(1.5) \\approx 0.176091259$:\n$$ \\Delta T \\approx 200\\,\\mathrm{K} - \\frac{3000\\,\\mathrm{K}}{14 + 0.176091259} $$\n$$ \\Delta T \\approx 200\\,\\mathrm{K} - \\frac{3000\\,\\mathrm{K}}{14.176091259} $$\n$$ \\Delta T \\approx 200\\,\\mathrm{K} - 211.62453\\,\\mathrm{K} $$\n$$ \\Delta T \\approx -11.62453\\,\\mathrm{K} $$\nThe negative sign is physically correct, as a higher viscosity ($10^{12}\\,\\mathrm{Pa\\,s}$) is achieved at a lower temperature compared to a lower viscosity ($1.5 \\times 10^{11}\\,\\mathrm{Pa\\,s}$).\nThe problem requires rounding the final result to four significant figures. The four significant figures of $-11.62453$ are $1$, $1$, $6$, $2$. The subsequent digit is $4$, so we round down.\n$$ \\Delta T \\approx -11.62\\,\\mathrm{K} $$", "answer": "$$\n\\boxed{-11.62}\n$$", "id": "2468368"}, {"introduction": "While the radial distribution function $g(r)$ describes average pair separations, the properties of many network glasses are governed by intermediate-range order, such as the connectivity of atomic rings. This advanced computational problem challenges you to connect this specific structural topology to an experimental observable, the static structure factor $S(q)$ [@problem_id:2468330]. By implementing an algorithm to compute ring statistics and the resulting $S(q)$, you will directly explore the structural origin of the First Sharp Diffraction Peak (FSDP), a hallmark of intermediate-range order in amorphous systems.", "problem": "You are given a finite set of atom positions in a cubic, three-dimensional periodic box for several small network-like configurations that mimic network glasses. Your task is to implement, from first principles, an algorithm to compute ring statistics and relate characteristic ring sizes to the Radial Distribution Function (RDF) and the Static Structure Factor, including the First Sharp Diffraction Peak (FSDP). You must implement an algorithmic solution that proceeds only from core definitions and widely accepted formulas.\n\nStart from the following fundamental bases:\n- Interpret the set of atoms as vertices of an undirected graph when a distance-based bonding criterion is satisfied. For a cubic periodic cell, use the minimum-image convention for distances. Formally, for any pair of atoms at positions $\\mathbf{r}_i$ and $\\mathbf{r}_j$ in a box of edge length $L$, the minimum-image displacement is $\\Delta \\mathbf{r}_{ij} = \\mathbf{r}_j - \\mathbf{r}_i - L \\,\\mathrm{round}((\\mathbf{r}_j - \\mathbf{r}_i)/L)$ applied componentwise, and the minimum-image distance is $r_{ij} = \\lVert \\Delta \\mathbf{r}_{ij} \\rVert$.\n- Define an undirected edge between vertices $i$ and $j$ if $r_{ij} \\le r_\\mathrm{c}$, where $r_\\mathrm{c}$ is a given bond cutoff. The resulting undirected simple graph $G$ has vertex set $V$ and edge set $E$.\n- The ring statistics are defined on the cycle space of $G$ over the finite field of two elements, which is the set of all edge-incidence vectors that correspond to cycles under addition modulo $2$. A standard way to characterize primitive rings is to compute a minimum cycle basis (minimal total weight, with weight defined as the number of edges per cycle). You may construct a candidate set of simple cycles by considering, for each edge $e = (u,v) \\in E$, the shortest path (by edge count) between $u$ and $v$ in the graph $G \\setminus \\{e\\}$, and forming the cycle from this path plus the edge $e$. From these candidates, select a basis of independent cycles with minimum total weight via Gaussian elimination over $\\mathbb{F}_2$ on their edge-incidence vectors. The length $k$ of a cycle is the number of edges (equivalently, vertices) in that cycle.\n- Define the Radial Distribution Function (RDF) $g(r)$ for a three-dimensional system via the ensemble average definition $g(r) = \\frac{1}{4\\pi r^2 \\rho N} \\left\\langle \\sum_{i \\ne j} \\delta(r - r_{ij}) \\right\\rangle$, where $\\rho = N/V$ is the number density, $N$ is the number of atoms, and $V = L^3$ is the volume. In a discrete finite data set, estimate $g(r)$ by histogramming unique pairs $i  j$ into radial bins of width $\\Delta r$ at centers $r_\\ell$, with normalization chosen consistently so that $g(r) \\to 1$ at large $r$ in a homogeneous system. A consistent estimator from the definition is\n$$\ng(r_\\ell) \\approx \\frac{2 \\, C_\\ell}{N \\, \\rho \\, 4\\pi \\, r_\\ell^2 \\, \\Delta r},\n$$\nwhere $C_\\ell$ is the count of unique pairs with separation in the bin centered at $r_\\ell$.\n- Define the total correlation function $h(r) = g(r) - 1$. The Static Structure Factor $S(q)$ for a three-dimensional isotropic system is related to $h(r)$ by the Fourier transform relation\n$$\nS(q) = 1 + 4\\pi \\rho \\int_0^{\\infty} r^2 h(r) \\frac{\\sin(q r)}{q r} \\, \\mathrm{d}r.\n$$\nIn computation, approximate this integral by a Riemann sum over the histogram bins.\n- The First Sharp Diffraction Peak (FSDP) is the first pronounced local maximum of $S(q)$ at low wavevector $q > 0$, often attributed to intermediate-range order. A characteristic intermediate-range length scale $D$ can be associated with a dominant ring size $k$ and an average bond length $a$ by modeling rings as regular polygons, for which the circumradius is $R_k = \\frac{a}{2 \\sin(\\pi/k)}$ and the diameter is $D_k = 2 R_k = \\frac{a}{\\sin(\\pi/k)}$. A crude prediction for the FSDP location is then $q_\\mathrm{pred} \\approx \\frac{2\\pi}{\\bar{D}}$, where $\\bar{D}$ is the average of $D_k$ weighted by the observed ring-count distribution.\n\nImplement the following algorithmic steps for each test case:\n1. Compute all pairwise minimum-image distances $r_{ij}$ in the cubic periodic box of edge length $L$ (in $\\mathrm{\\AA}$).\n2. Build the adjacency of $G$ by placing an edge for any pair with $r_{ij} \\le r_\\mathrm{c}$, where $r_\\mathrm{c}$ is given (in $\\mathrm{\\AA}$).\n3. Construct a set of candidate cycles by, for each edge $e = (u,v)$, finding a shortest path between $u$ and $v$ in $G \\setminus \\{e\\}$ (if any), and forming the cycle $C_e = \\text{path} \\cup \\{e\\}$. Represent each cycle as a binary incidence vector over $|E|$ edges.\n4. From the candidate cycles, compute a minimum cycle basis by selecting a maximal set of linearly independent cycle vectors with minimum total weight (cycle length), using Gaussian elimination over $\\mathbb{F}_2$. Extract the ring sizes $k$ from the basis cycles.\n5. Form a ring-size histogram for sizes $k \\in \\{3,4,5,6,7,8\\}$, in that order. Ignore rings outside this range for the purpose of the histogram.\n6. Estimate the RDF $g(r)$ by histogramming unique pair distances into bins of width $\\Delta r$ (in $\\mathrm{\\AA}$), from $r = 0$ up to $r_{\\max} = L/2$. Use the normalization consistent with the definition above. Compute the number density $\\rho = N/L^3$ in $\\mathrm{\\AA}^{-3}$.\n7. Compute $S(q)$ from $g(r)$ using the discretized version of the integral above on a grid $q = q_{\\min}, q_{\\min} + \\Delta q, \\dots, q_{\\max}$ (in $\\mathrm{\\AA}^{-1}$). Identify the FSDP wavevector $q_\\mathrm{FSDP}$ as the first local maximum of $S(q)$ for $q \\ge q_{\\min}$, using a simple discrete peak-finding rule: a local maximum at $q_i$ satisfies $S(q_i) > S(q_{i-1})$ and $S(q_i) > S(q_{i+1})$. If no such local maximum is found over the grid, return the $q$ in the specified range at which $S(q)$ attains its global maximum (ties broken by the smallest $q$).\n8. Compute the average bond length $a$ as the arithmetic mean of $r_{ij}$ over all bonded pairs $(i,j)$ with $r_{ij} \\le r_\\mathrm{c}$. Using the ring-size histogram counts $n_k$ and the formula $D_k = \\frac{a}{\\sin(\\pi/k)}$ for each $k$ that appears, compute a weighted average $\\bar{D} = \\frac{\\sum_k n_k D_k}{\\sum_k n_k}$. If $\\sum_k n_k = 0$ (no rings found), define $\\bar{D}$ to be undefined and in this case set $q_\\mathrm{pred} = 0$ by convention. Otherwise, compute $q_\\mathrm{pred} = \\frac{2\\pi}{\\bar{D}}$.\n9. For each test case, produce the result as a list consisting of the ring-size histogram and the two wavevectors $q_\\mathrm{FSDP}$ and $q_\\mathrm{pred}$, both rounded to three decimal places. Specifically, for ring sizes $k \\in \\{3,4,5,6,7,8\\}$, the ring histogram should be a list $[n_3,n_4,n_5,n_6,n_7,n_8]$, where each $n_k$ is an integer. The two wavevectors must be reported in $\\mathrm{\\AA}^{-1}$.\n\nInput data (test suite):\n- Test case A (single hexagonal ring):\n  - Box edge $L = 25.0 \\,\\mathrm{\\AA}$, bond cutoff $r_\\mathrm{c} = 1.9 \\,\\mathrm{\\AA}$.\n  - Positions $\\mathbf{r}_i$ (in $\\mathrm{\\AA}$):\n    - $\\big(14.100000,\\, 12.500000,\\, 12.500000\\big)$\n    - $\\big(13.300000,\\, 13.885641,\\, 12.500000\\big)$\n    - $\\big(11.700000,\\, 13.885641,\\, 12.500000\\big)$\n    - $\\big(10.900000,\\, 12.500000,\\, 12.500000\\big)$\n    - $\\big(11.700000,\\, 11.114359,\\, 12.500000\\big)$\n    - $\\big(13.300000,\\, 11.114359,\\, 12.500000\\big)$\n  - RDF parameters: $\\Delta r = 0.05 \\,\\mathrm{\\AA}$.\n  - $S(q)$ grid: $q_{\\min} = 0.10 \\,\\mathrm{\\AA}^{-1}$, $q_{\\max} = 12.00 \\,\\mathrm{\\AA}^{-1}$, $\\Delta q = 0.05 \\,\\mathrm{\\AA}^{-1}$.\n- Test case B (one pentagon and one heptagon, separated):\n  - Box edge $L = 30.0 \\,\\mathrm{\\AA}$, bond cutoff $r_\\mathrm{c} = 1.9 \\,\\mathrm{\\AA}$.\n  - Positions $\\mathbf{r}_i$ (in $\\mathrm{\\AA}$), pentagon centered near $\\big(10.000000,\\, 10.000000,\\, 10.000000\\big)$ with edge length approximately $a = 1.600000 \\,\\mathrm{\\AA}$:\n    - $\\big(11.361803,\\, 10.000000,\\, 10.000000\\big)$\n    - $\\big(10.420451,\\, 11.294095,\\, 10.000000\\big)$\n    - $\\big(8.839549,\\, 10.800000,\\, 10.000000\\big)$\n    - $\\big(8.839549,\\, 9.200000,\\, 10.000000\\big)$\n    - $\\big(10.420451,\\, 8.705905,\\, 10.000000\\big)$\n  - Positions $\\mathbf{r}_i$ (in $\\mathrm{\\AA}$), heptagon centered near $\\big(18.000000,\\, 18.000000,\\, 18.000000\\big)$ with edge length approximately $a = 1.600000 \\,\\mathrm{\\AA}$:\n    - $\\big(19.844384,\\, 18.000000,\\, 18.000000\\big)$\n    - $\\big(19.418058,\\, 18.769421,\\, 18.000000\\big)$\n    - $\\big(18.592011,\\, 19.205192,\\, 18.000000\\big)$\n    - $\\big(17.635945,\\, 19.137771,\\, 18.000000\\big)$\n    - $\\big(16.958666,\\, 18.592011,\\, 18.000000\\big)$\n    - $\\big(16.803499,\\, 17.707430,\\, 18.000000\\big)$\n    - $\\big(17.315437,\\, 17.007175,\\, 18.000000\\big)$\n  - RDF parameters: $\\Delta r = 0.05 \\,\\mathrm{\\AA}$.\n  - $S(q)$ grid: $q_{\\min} = 0.10 \\,\\mathrm{\\AA}^{-1}$, $q_{\\max} = 12.00 \\,\\mathrm{\\AA}^{-1}$, $\\Delta q = 0.05 \\,\\mathrm{\\AA}^{-1}$.\n- Test case C (no rings: linear chain of eight atoms):\n  - Box edge $L = 25.0 \\,\\mathrm{\\AA}$, bond cutoff $r_\\mathrm{c} = 1.9 \\,\\mathrm{\\AA}$.\n  - Positions $\\mathbf{r}_i$ (in $\\mathrm{\\AA}$):\n    - $\\big(6.000000,\\, 6.000000,\\, 6.000000\\big)$\n    - $\\big(7.600000,\\, 6.000000,\\, 6.000000\\big)$\n    - $\\big(9.200000,\\, 6.000000,\\, 6.000000\\big)$\n    - $\\big(10.800000,\\, 6.000000,\\, 6.000000\\big)$\n    - $\\big(12.400000,\\, 6.000000,\\, 6.000000\\big)$\n    - $\\big(14.000000,\\, 6.000000,\\, 6.000000\\big)$\n    - $\\big(15.600000,\\, 6.000000,\\, 6.000000\\big)$\n    - $\\big(17.200000,\\, 6.000000,\\, 6.000000\\big)$\n  - RDF parameters: $\\Delta r = 0.05 \\,\\mathrm{\\AA}$.\n  - $S(q)$ grid: $q_{\\min} = 0.10 \\,\\mathrm{\\AA}^{-1}$, $q_{\\max} = 12.00 \\,\\mathrm{\\AA}^{-1}$, $\\Delta q = 0.05 \\,\\mathrm{\\AA}^{-1}$.\n\nAnswer specification:\n- For each test case, compute:\n  - The ring-size histogram $[n_3,n_4,n_5,n_6,n_7,n_8]$ as a list of $6$ integers.\n  - The FSDP location $q_\\mathrm{FSDP}$ in $\\mathrm{\\AA}^{-1}$, rounded to three decimal places.\n  - The predicted FSDP location $q_\\mathrm{pred}$ in $\\mathrm{\\AA}^{-1}$, rounded to three decimal places, using the weighted-average $\\bar{D}$ as described. If no rings are found, set $q_\\mathrm{pred} = 0$.\n- Final Output Format: Your program should produce a single line of output containing the results for the three cases as a comma-separated list enclosed in square brackets, with no spaces. Each case should be represented as $[\\,[n_3,n_4,n_5,n_6,n_7,n_8],\\,q_\\mathrm{FSDP},\\,q_\\mathrm{pred}\\,]$. For example, a valid output would look like:\n  - $[[[0,0,1,1,0,0],2.345,2.512],[[0,0,1,0,1,0],2.100,2.200],[[0,0,0,0,0,0],1.850,0.000]]$\n\nImportant notes:\n- All distances must be treated in $\\mathrm{\\AA}$, and all wavevectors in $\\mathrm{\\AA}^{-1}$.\n- Angles used internally for constructing polygons in the explanation are in radians, but all input positions are given directly; no angle conversion is required for the input.\n- Percentages, if any, must be expressed as decimal fractions, but this problem does not require percentages.\n\nYour program must implement the above steps and produce the specified output line when run, with no user input.", "solution": "The user-provided problem is a well-defined computational task in materials chemistry, specifically concerning the analysis of amorphous structures. I will proceed with a detailed, step-by-step solution based on the provided specifications.\n\n### Step 1: Problem Validation\n\nFirst, a critical validation of the problem statement is required.\n\n**Givens Extraction:**\n- **System:** A finite set of atomic coordinates $\\mathbf{r}_i$ in a three-dimensional cubic periodic box of edge length $L$.\n- **Distance Metric:** Minimum-image convention, $\\Delta \\mathbf{r}_{ij} = \\mathbf{r}_j - \\mathbf{r}_i - L \\,\\mathrm{round}((\\mathbf{r}_j - \\mathbf{r}_i)/L)$ and $r_{ij} = \\lVert \\Delta \\mathbf{r}_{ij} \\rVert$.\n- **Graph Model:** An undirected graph $G=(V,E)$ where atoms are vertices $V$, and an edge $(i, j) \\in E$ exists if $r_{ij} \\le r_\\mathrm{c}$.\n- **Ring Statistics:** Defined via a minimum cycle basis, found by generating candidate cycles and using Gaussian elimination over $\\mathbb{F}_2$ to select a basis of minimum total weight.\n- **Radial Distribution Function ($g(r)$):** Estimated by histogramming pair distances: $g(r_\\ell) \\approx \\frac{2 \\, C_\\ell}{N \\, \\rho \\, 4\\pi \\, r_\\ell^2 \\, \\Delta r}$.\n- **Static Structure Factor ($S(q)$):** Computed via the Fourier transform of the total correlation function $h(r) = g(r) - 1$: $S(q) = 1 + 4\\pi \\rho \\int_0^{\\infty} r^2 h(r) \\frac{\\sin(q r)}{q r} \\, \\mathrm{d}r$.\n- **First Sharp Diffraction Peak (FSDP):** The first local maximum of $S(q)$ for $q \\ge q_{\\min}$.\n- **FSDP Prediction ($q_\\mathrm{pred}$):** Based on a weighted average ring diameter $\\bar{D}$, with $q_\\mathrm{pred} = 2\\pi / \\bar{D}$.\n- **Input Data:** Three test cases with specific atomic positions, box sizes ($L$), bond cutoffs ($r_\\mathrm{c}$), RDF parameters ($\\Delta r$), and $S(q)$ grid parameters ($q_{\\min}, q_{\\max}, \\Delta q$).\n- **Output Format:** For each case, $[[n_3, ..., n_8], q_\\mathrm{FSDP}, q_\\mathrm{pred}]$. Final output is a list of these results.\n\n**Validation Verdict:**\n- **Scientific Grounding:** The problem is firmly rooted in the standard theoretical and computational methods of condensed matter physics and materials science for analyzing amorphous systems. All definitions and formulas ($g(r)$, $S(q)$, minimum image convention) are standard. The concept of ring statistics and its relation to the FSDP is a cornerstone of the field.\n- **Well-Posedness:** The problem provides all necessary data and algorithmic definitions for a unique solution to be computed. The steps are described in a clear, sequential manner.\n- **Objectivity:** The problem is stated in precise, quantitative, and unbiased language.\n\nThe problem does not violate any of the invalidity criteria. It is a complex but self-contained and scientifically sound computational task. Therefore, the problem is **valid**.\n\n### Step 2: Solution Design\n\nThe solution will be implemented as a Python script adhering to the specified environment. A main function will orchestrate the processing of each test case. A dedicated function, `process_case`, will execute the required algorithmic steps for a single atomic configuration.\n\n**Algorithmic Steps:**\n\n1.  **Graph Construction:**\n    - For each pair of atoms $(i, j)$, calculate the minimum image distance $r_{ij}$.\n    - If $r_{ij} \\le r_c$, an edge is created. This process populates an adjacency list for the graph, a list of edges, and a mapping from each edge to a unique index. The distances of bonded pairs are collected to compute the average bond length $a$.\n\n2.  **Candidate Cycle Generation:**\n    - For each edge $e=(u, v)$ in the graph, we find the shortest path between $u$ and $v$ in the graph $G \\setminus \\{e\\}$. This is accomplished using a Breadth-First Search (BFS) starting from $u$, which systematically explores the graph layer by layer to find the shortest path to $v$ without using the edge $e$.\n    - If a path is found, it is combined with the edge $e$ to form a cycle. An edge-incidence vector (a binary vector of length $|E|$) is created for each such cycle.\n\n3.  **Minimum Cycle Basis Calculation:**\n    - The set of candidate cycles generally forms a generating set for the cycle space, but not necessarily a basis, and certainly not one of minimal weight. To find a minimal weight basis, a greedy algorithm is employed.\n    - The candidate cycles are sorted by their length (weight) in ascending order.\n    - We iterate through the sorted cycles. For each cycle, we test if its incidence vector is linearly independent of the basis vectors found so far. This check is performed by reducing the vector against the current basis using XOR operations.\n    - If the cycle is independent, its length is added to our list of basis cycle lengths, and a representation of this new independent dimension is added to our test basis, which is maintained in a row-echelon form to ensure efficient subsequent independence checks.\n\n4.  **Ring-Size Histogram:**\n    - The lengths of the cycles in the computed basis are tabulated into a histogram for sizes $k=3, 4, ..., 8$.\n\n5.  **Radial Distribution Function ($g(r)$):**\n    - All unique pairwise distances $r_{ij}$ are histogrammed into bins of width $\\Delta r$.\n    - The count in each bin $C_\\ell$ is normalized according to the provided formula $g(r_\\ell) \\approx \\frac{2 \\, C_\\ell}{N \\, \\rho \\, 4\\pi \\, r_\\ell^2 \\, \\Delta r}$, where $\\rho = N/L^3$ is the number density and $r_\\ell$ is the center of the bin.\n\n6.  **Static Structure Factor ($S(q)$):**\n    - First, the total correlation function is computed: $h(r) = g(r) - 1$.\n    - The integral for $S(q)$ is discretized as a Riemann sum over the RDF bins. For each wavevector $q$ on the specified grid, we compute $S(q) = 1 + 4\\pi \\rho \\sum_\\ell r_\\ell^2 h(r_\\ell) \\frac{\\sin(q r_\\ell)}{q r_\\ell} \\Delta r$. The term $\\frac{\\sin(x)}{x}$ is handled carefully using `numpy.sinc` to avoid numerical issues near $x=0$.\n\n7.  **FSDP Identification:**\n    - The calculated $S(q)$ curve is scanned for the first local maximum (a point $q_i$ where $S(q_i) > S(q_{i-1})$ and $S(q_i) > S(q_{i+1})$).\n    - If no such peak is found, the position of the global maximum of $S(q)$ within the given range is taken as the FSDP location.\n\n8.  **FSDP Prediction:**\n    - The average bond length $a$ is computed.\n    - Using the ring histogram, a weighted average ring diameter $\\bar{D} = \\frac{\\sum_k n_k D_k}{\\sum_k n_k}$ is calculated, where $D_k = a / \\sin(\\pi/k)$.\n    - The predicted FSDP position is then $q_\\mathrm{pred} = 2\\pi / \\bar{D}$. If no rings are found, $q_\\mathrm{pred}$ is set to $0$ by convention.\n\n9.  **Output Formatting:**\n    - The final results for each test case—the ring histogram, $q_\\mathrm{FSDP}$, and $q_\\mathrm{pred}$—are assembled into the specified list format. The floating-point values are rounded to three decimal places. The final output string is constructed without any spaces to match the required format precisely.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom collections import deque\n\ndef solve():\n    \"\"\"\n    Main function to define test cases, run the analysis, and print the final result.\n    \"\"\"\n    test_cases = [\n        # Test case A (single hexagonal ring)\n        {\n            \"L\": 25.0,\n            \"rc\": 1.9,\n            \"positions\": np.array([\n                [14.100000, 12.500000, 12.500000], [13.300000, 13.885641, 12.500000],\n                [11.700000, 13.885641, 12.500000], [10.900000, 12.500000, 12.500000],\n                [11.700000, 11.114359, 12.500000], [13.300000, 11.114359, 12.500000],\n            ]),\n            \"rdf_dr\": 0.05, \"q_min\": 0.10, \"q_max\": 12.00, \"q_dq\": 0.05,\n        },\n        # Test case B (one pentagon and one heptagon, separated)\n        {\n            \"L\": 30.0,\n            \"rc\": 1.9,\n            \"positions\": np.array([\n                [11.361803, 10.000000, 10.000000], [10.420451, 11.294095, 10.000000],\n                [8.839549, 10.800000, 10.000000], [8.839549, 9.200000, 10.000000],\n                [10.420451, 8.705905, 10.000000],\n                [19.844384, 18.000000, 18.000000], [19.418058, 18.769421, 18.000000],\n                [18.592011, 19.205192, 18.000000], [17.635945, 19.137771, 18.000000],\n                [16.958666, 18.592011, 18.000000], [16.803499, 17.707430, 18.000000],\n                [17.315437, 17.007175, 18.000000],\n            ]),\n            \"rdf_dr\": 0.05, \"q_min\": 0.10, \"q_max\": 12.00, \"q_dq\": 0.05,\n        },\n        # Test case C (no rings: linear chain of eight atoms)\n        {\n            \"L\": 25.0,\n            \"rc\": 1.9,\n            \"positions\": np.array([\n                [6.0, 6.0, 6.0], [7.6, 6.0, 6.0], [9.2, 6.0, 6.0], [10.8, 6.0, 6.0],\n                [12.4, 6.0, 6.0], [14.0, 6.0, 6.0], [15.6, 6.0, 6.0], [17.2, 6.0, 6.0],\n            ]),\n            \"rdf_dr\": 0.05, \"q_min\": 0.10, \"q_max\": 12.00, \"q_dq\": 0.05,\n        }\n    ]\n\n    all_results = [process_case(case) for case in test_cases]\n\n    # Format the final output string according to the problem specification.\n    result_strs = []\n    for res in all_results:\n        hist_str = str(res[0]).replace(\" \", \"\")\n        q_fsdp_str = f\"{res[1]:.3f}\"\n        q_pred_str = f\"{res[2]:.3f}\"\n        result_strs.append(f\"[{hist_str},{q_fsdp_str},{q_pred_str}]\")\n    \n    print(f\"[{','.join(result_strs)}]\")\n\ndef process_case(case_data):\n    \"\"\"\n    Processes a single test case to compute ring statistics and diffraction properties.\n    \"\"\"\n    # Unpack data\n    positions, L, r_c = case_data[\"positions\"], case_data[\"L\"], case_data[\"rc\"]\n    dr, q_min, q_max, dq = case_data[\"rdf_dr\"], case_data[\"q_min\"], case_data[\"q_max\"], case_data[\"q_dq\"]\n    N = len(positions)\n    rho = N / (L**3)\n\n    # Steps 1 and 2: Compute distances, build graph, and find average bond length\n    adj = {i: [] for i in range(N)}\n    edges = []\n    edge_to_idx = {}\n    pair_distances = []\n    bond_distances = []\n\n    for i in range(N):\n        for j in range(i + 1, N):\n            delta_r = positions[j] - positions[i]\n            delta_r_pbc = delta_r - L * np.round(delta_r / L)\n            r_ij = np.linalg.norm(delta_r_pbc)\n            pair_distances.append(r_ij)\n            if r_ij = r_c:\n                adj[i].append(j)\n                adj[j].append(i)\n                bond_distances.append(r_ij)\n                u, v = sorted((i, j))\n                if (u, v) not in edge_to_idx:\n                    edge_idx = len(edges)\n                    edges.append((u, v))\n                    edge_to_idx[(u, v)] = edge_idx\n\n    num_edges = len(edges)\n\n    # Step 3: Construct candidate cycles\n    candidate_cycles = []\n    for u, v in edges:\n        queue = deque([(u, [u])])\n        visited = {u}\n        path_found = None\n        while queue:\n            curr_node, path = queue.popleft()\n            if curr_node == v:\n                path_found = path\n                break\n            for neighbor in adj[curr_node]:\n                if (curr_node == u and neighbor == v) or (curr_node == v and neighbor == u):\n                    continue\n                if neighbor not in visited:\n                    visited.add(neighbor)\n                    queue.append((neighbor, path + [neighbor]))\n        \n        if path_found:\n            cycle_nodes = path_found\n            cycle_vec = np.zeros(num_edges, dtype=np.int8)\n            for i in range(len(cycle_nodes) - 1):\n                n1, n2 = sorted((cycle_nodes[i], cycle_nodes[i+1]))\n                cycle_vec[edge_to_idx[(n1, n2)]] = 1\n            n1, n2 = sorted((cycle_nodes[-1], cycle_nodes[0])) # Closing edge\n            cycle_vec[edge_to_idx[(n1, n2)]] = 1\n            candidate_cycles.append({'vector': cycle_vec, 'length': int(np.sum(cycle_vec))})\n\n    # Step 4: Compute minimum cycle basis using a greedy algorithm\n    candidate_cycles.sort(key=lambda x: x['length'])\n    basis_vectors = []  # Echelon form basis for checks\n    basis_lengths = []\n    for item in candidate_cycles:\n        v, l = item['vector'], item['length']\n        v_reduced = v.copy()\n        for b in basis_vectors:\n            pivot = np.nonzero(b)[0][0]\n            if v_reduced[pivot]:\n                v_reduced ^= b\n        if np.any(v_reduced):\n            basis_lengths.append(l)\n            pivot_new = np.nonzero(v_reduced)[0][0]\n            for i in range(len(basis_vectors)):\n                if basis_vectors[i][pivot_new]:\n                    basis_vectors[i] ^= v_reduced\n            basis_vectors.append(v_reduced)\n            basis_vectors.sort(key=lambda x: np.nonzero(x)[0][0])\n\n    # Step 5: Ring-size histogram\n    ring_hist = [0] * 6\n    for length in basis_lengths:\n        if 3 = length = 8:\n            ring_hist[length - 3] += 1\n            \n    # Step 6: RDF calculation\n    r_max = L / 2.0\n    num_bins = int(r_max / dr)\n    rdf_counts = np.zeros(num_bins)\n    for r in pair_distances:\n        if 0  r  r_max:\n            rdf_counts[int(r / dr)] += 1\n    r_bins = (np.arange(num_bins) + 0.5) * dr\n    g_r = np.zeros(num_bins)\n    non_zero_r = r_bins > 1e-9\n    norm_factor = N * rho * 4 * np.pi * dr\n    g_r[non_zero_r] = (2 * rdf_counts[non_zero_r]) / (norm_factor * r_bins[non_zero_r]**2)\n    h_r = g_r - 1.0\n    \n    # Step 7: S(q) and FSDP\n    q_grid = np.arange(q_min, q_max + dq/2, dq)\n    integral_matrix = r_bins**2 * h_r * dr\n    qr = np.outer(q_grid, r_bins)\n    sinc_matrix = np.sinc(qr / np.pi)\n    integral = np.sum(integral_matrix * sinc_matrix, axis=1)\n    s_q = 1.0 + 4 * np.pi * rho * integral\n    \n    q_fsdp = 0.0\n    found_peak = False\n    for i in range(1, len(s_q) - 1):\n        if s_q[i] > s_q[i-1] and s_q[i] > s_q[i+1]:\n            q_fsdp = q_grid[i]\n            found_peak = True\n            break\n    if not found_peak and len(s_q) > 0:\n        q_fsdp = q_grid[np.argmax(s_q)]\n\n    # Step 8: Predicted FSDP\n    a = np.mean(bond_distances) if bond_distances else 0.0\n    q_pred = 0.0\n    total_rings = sum(ring_hist)\n    if total_rings > 0 and a > 1e-9:\n        weighted_D_sum = 0\n        for k_idx, n_k in enumerate(ring_hist):\n            if n_k > 0:\n                weighted_D_sum += n_k * (a / np.sin(np.pi / (k_idx + 3)))\n        avg_D = weighted_D_sum / total_rings\n        if avg_D > 1e-9:\n            q_pred = 2 * np.pi / avg_D\n\n    return [ring_hist, round(q_fsdp, 3), round(q_pred, 3)]\n\nif __name__ == '__main__':\n    solve()\n```", "id": "2468330"}]}