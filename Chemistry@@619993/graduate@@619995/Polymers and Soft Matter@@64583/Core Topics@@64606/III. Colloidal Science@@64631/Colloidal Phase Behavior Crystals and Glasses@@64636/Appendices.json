{"hands_on_practices": [{"introduction": "The organization of particles in space is a cornerstone of colloidal phase behavior, with packing efficiency often determining whether a system forms a liquid, crystal, or glass. For the simplest model of hard spheres, where interactions are purely excluded-volume, entropy alone can drive crystallization into a close-packed structure. This foundational exercise [@problem_id:2909316] will guide you through the geometric derivation of the maximum possible packing fraction, $\\phi_{\\text{cp}}$, and challenge you to use structural order parameters to quantitatively distinguish this perfect crystalline order from the disordered arrangement of a randomly packed glass.", "problem": "A monodisperse suspension of hard, non-attracting colloidal spheres exhibits crystalline face-centered cubic (fcc) or hexagonal close-packed (hcp) order at maximum packing, and forms a mechanically stable disordered jammed state known as random close packing (RCP). Consider the following:\n\n1. The packing fraction is defined as $\\phi = V_{\\text{spheres}}/V_{\\text{cell}}$. For an fcc crystal of hard spheres of radius $R$, the cubic unit cell of edge length $a$ contains $4$ spheres in total, with geometrical contact along the face diagonal at close packing.\n\n2. The random close packing fraction for monodisperse hard spheres is taken as $\\phi_{\\text{RCP}} = 0.64$.\n\n3. To quantify structural order, use the Steinhardt bond-orientational order parameter of degree six, $Q_{6}$, defined globally by\n$$\nQ_{6} = \\left(\\frac{4\\pi}{13}\\sum_{m=-6}^{6} \\left| \\left\\langle Y_{6m}(\\theta,\\varphi) \\right\\rangle \\right|^{2}\\right)^{1/2},\n$$\nwhere $\\left\\langle \\cdot \\right\\rangle$ denotes an average over bonds defined by the $12$ nearest neighbors of each particle and then an average over all particles, and $Y_{6m}$ are degree-$6$ spherical harmonics. For perfect crystals with $12$ neighbors, take $Q_{6}^{\\text{fcc}} = 0.5745$, $Q_{6}^{\\text{hcp}} = 0.4848$. For disordered random close packing, take $Q_{6}^{\\text{RCP}} = 0.2700$.\n\n4. Define a dimensionless contrast index that combines packing and bond-orientational order, for a structure $s \\in \\{\\text{fcc},\\text{hcp}\\}$, by\n$$\nC_{s} = \\left[ \\left( \\frac{\\phi_{s} - \\phi_{\\text{RCP}}}{\\phi_{\\text{cp}}} \\right)^{2} + \\left( \\frac{Q_{6}^{s} - Q_{6}^{\\text{RCP}}}{Q_{6}^{\\text{fcc}} - Q_{6}^{\\text{RCP}}} \\right)^{2} \\right]^{1/2},\n$$\nwhere $\\phi_{\\text{cp}}$ is the maximum close-packed fraction for fcc/hcp and $\\phi_{s} = \\phi_{\\text{cp}}$ for both fcc and hcp.\n\nTasks:\na) Starting from the geometric constraints of hard-sphere contact in the fcc lattice, derive $\\phi_{\\text{cp}}$ in closed form.\nb) Using the provided $Q_{6}$ values, compute the ratio\n$$\n\\mathcal{R} = \\frac{C_{\\text{fcc}}}{C_{\\text{hcp}}}.\n$$\nExpress your final answer for $\\mathcal{R}$ as a single dimensionless number, rounded to four significant figures. No units are required for the final answer.", "solution": "The problem presented is validated as scientifically sound, well-posed, and complete. We shall proceed with its solution in two parts as requested.\n\nPart a) requires the derivation of the packing fraction for a close-packed structure, $\\phi_{\\text{cp}}$, specifically for a face-centered cubic (fcc) lattice. The packing fraction, $\\phi$, is defined as the ratio of the total volume of the spheres within a unit cell to the volume of the unit cell itself:\n$$\n\\phi = \\frac{V_{\\text{spheres}}}{V_{\\text{cell}}}\n$$\nFor a single sphere of radius $R$, the volume is $V_{\\text{sphere}} = \\frac{4}{3}\\pi R^{3}$.\nThe problem states that the fcc unit cell contains a total of $N=4$ spheres. This is a known result from crystallography, corresponding to $8$ corner spheres (each contributing $1/8$ to the cell) and $6$ face-centered spheres (each contributing $1/2$ to the cell), giving a total of $8 \\times \\frac{1}{8} + 6 \\times \\frac{1}{2} = 1 + 3 = 4$ spheres.\nThe total volume occupied by spheres within the unit cell is therefore:\n$$\nV_{\\text{spheres}} = N \\times V_{\\text{sphere}} = 4 \\times \\frac{4}{3}\\pi R^{3} = \\frac{16}{3}\\pi R^{3}\n$$\nThe volume of the cubic unit cell is $V_{\\text{cell}} = a^{3}$, where $a$ is the lattice constant or edge length of the cube. To determine $\\phi$, we must relate $a$ to $R$. The problem specifies that for a close-packed arrangement of hard spheres, contact occurs along the face diagonal of the cubic cell.\n\nThe length of the face diagonal, $d$, of a cube with edge length $a$ is given by the Pythagorean theorem: $d^{2} = a^{2} + a^{2} = 2a^{2}$, which gives $d = a\\sqrt{2}$.\nAlong this diagonal, a sphere at one corner, a sphere at the center of the face, and a sphere at the opposite corner are in contact. The distance from the corner to the face center covers one radius of the corner sphere and one radius of the face-centered sphere. The full diagonal length, therefore, spans the radius of the first corner sphere, the full diameter of the face-centered sphere, and the radius of the second corner sphere.\nThus, the length of the face diagonal in terms of the sphere radius $R$ is:\n$$\nd = R + 2R + R = 4R\n$$\nBy equating the two expressions for the diagonal length, we establish the relationship between $a$ and $R$:\n$$\na\\sqrt{2} = 4R\n$$\nSolving for $a$, we find:\n$$\na = \\frac{4R}{\\sqrt{2}} = 2\\sqrt{2}R\n$$\nNow, we can compute the volume of the unit cell:\n$$\nV_{\\text{cell}} = a^{3} = (2\\sqrt{2}R)^{3} = 2^{3}(\\sqrt{2})^{3}R^{3} = 8(2\\sqrt{2})R^{3} = 16\\sqrt{2}R^{3}\n$$\nFinally, we substitute the expressions for $V_{\\text{spheres}}$ and $V_{\\text{cell}}$ into the definition of the packing fraction to find the close-packing fraction, $\\phi_{\\text{cp}}$:\n$$\n\\phi_{\\text{cp}} = \\frac{V_{\\text{spheres}}}{V_{\\text{cell}}} = \\frac{\\frac{16}{3}\\pi R^{3}}{16\\sqrt{2}R^{3}}\n$$\nThe terms $16$ and $R^{3}$ cancel, yielding the exact, closed-form result:\n$$\n\\phi_{\\text{cp}} = \\frac{\\pi}{3\\sqrt{2}}\n$$\nThis is the maximum possible packing fraction for monodisperse spheres, achieved by both fcc and hcp structures.\n\nPart b) requires the computation of the ratio $\\mathcal{R} = C_{\\text{fcc}}/C_{\\text{hcp}}$. The contrast index $C_{s}$ is defined as:\n$$\nC_{s} = \\left[ \\left( \\frac{\\phi_{s} - \\phi_{\\text{RCP}}}{\\phi_{\\text{cp}}} \\right)^{2} + \\left( \\frac{Q_{6}^{s} - Q_{6}^{\\text{RCP}}}{Q_{6}^{\\text{fcc}} - Q_{6}^{\\text{RCP}}} \\right)^{2} \\right]^{1/2}\n$$\nThe problem specifies that for both crystalline structures, $\\phi_{s} = \\phi_{\\text{cp}}$. Let us first evaluate $C_{\\text{fcc}}$. For $s = \\text{fcc}$, we have $\\phi_{s} = \\phi_{\\text{fcc}} = \\phi_{\\text{cp}}$ and $Q_{6}^{s} = Q_{6}^{\\text{fcc}}$.\n$$\nC_{\\text{fcc}} = \\left[ \\left( \\frac{\\phi_{\\text{cp}} - \\phi_{\\text{RCP}}}{\\phi_{\\text{cp}}} \\right)^{2} + \\left( \\frac{Q_{6}^{\\text{fcc}} - Q_{6}^{\\text{RCP}}}{Q_{6}^{\\text{fcc}} - Q_{6}^{\\text{RCP}}} \\right)^{2} \\right]^{1/2}\n$$\nThe second term in the brackets simplifies to $1^{2}=1$. Thus:\n$$\nC_{\\text{fcc}} = \\left[ \\left( 1 - \\frac{\\phi_{\\text{RCP}}}{\\phi_{\\text{cp}}} \\right)^{2} + 1 \\right]^{1/2}\n$$\nNext, we evaluate $C_{\\text{hcp}}$. For $s = \\text{hcp}$, we have $\\phi_{s} = \\phi_{\\text{hcp}} = \\phi_{\\text{cp}}$ and $Q_{6}^{s} = Q_{6}^{\\text{hcp}}$.\n$$\nC_{\\text{hcp}} = \\left[ \\left( \\frac{\\phi_{\\text{cp}} - \\phi_{\\text{RCP}}}{\\phi_{\\text{cp}}} \\right)^{2} + \\left( \\frac{Q_{6}^{\\text{hcp}} - Q_{6}^{\\text{RCP}}}{Q_{6}^{\\text{fcc}} - Q_{6}^{\\text{RCP}}} \\right)^{2} \\right]^{1/2}\n$$\nThe first term is identical to that in $C_{\\text{fcc}}$. Let us define the following dimensionless quantities for clarity:\n$$\nX = 1 - \\frac{\\phi_{\\text{RCP}}}{\\phi_{\\text{cp}}}\n$$\n$$\nY = \\frac{Q_{6}^{\\text{hcp}} - Q_{6}^{\\text{RCP}}}{Q_{6}^{\\text{fcc}} - Q_{6}^{\\text{RCP}}}\n$$\nWith these definitions, the expressions become:\n$$\nC_{\\text{fcc}} = \\left( X^{2} + 1 \\right)^{1/2}\n$$\n$$\nC_{\\text{hcp}} = \\left( X^{2} + Y^{2} \\right)^{1/2}\n$$\nThe required ratio is then:\n$$\n\\mathcal{R} = \\frac{C_{\\text{fcc}}}{C_{\\text{hcp}}} = \\frac{\\left( X^{2} + 1 \\right)^{1/2}}{\\left( X^{2} + Y^{2} \\right)^{1/2}} = \\left( \\frac{X^{2} + 1}{X^{2} + Y^{2}} \\right)^{1/2}\n$$\nWe now substitute the numerical values provided and derived:\n$\\phi_{\\text{cp}} = \\frac{\\pi}{3\\sqrt{2}} \\approx 0.740480$\n$\\phi_{\\text{RCP}} = 0.64$\n$Q_{6}^{\\text{fcc}} = 0.5745$\n$Q_{6}^{\\text{hcp}} = 0.4848$\n$Q_{6}^{\\text{RCP}} = 0.2700$\n\nFirst, compute $X$:\n$$\nX = 1 - \\frac{0.64}{\\pi/(3\\sqrt{2})} = 1 - \\frac{0.64 \\times 3\\sqrt{2}}{\\pi} \\approx 1 - \\frac{1.92 \\times 1.414214}{3.141593} \\approx 1 - 0.864303 \\approx 0.135697\n$$\nSo, $X^{2} \\approx (0.135697)^{2} \\approx 0.0184136$.\n\nNext, compute $Y$:\n$$\nY = \\frac{0.4848 - 0.2700}{0.5745 - 0.2700} = \\frac{0.2148}{0.3045} \\approx 0.7054187\n$$\nSo, $Y^{2} \\approx (0.7054187)^{2} \\approx 0.497616$.\n\nNow we compute the ratio $\\mathcal{R}$:\n$$\n\\mathcal{R} = \\left( \\frac{0.0184136 + 1}{0.0184136 + 0.497616} \\right)^{1/2} = \\left( \\frac{1.0184136}{0.5160296} \\right)^{1/2} \\approx (1.97355)^{1/2} \\approx 1.404831\n$$\nRounding the result to four significant figures as instructed, we obtain $1.405$.", "answer": "$$\n\\boxed{1.405}\n$$", "id": "2909316"}, {"introduction": "While the pair correlation function $g(r)$ provides an intuitive real-space picture of local structure, experimental techniques like light or X-ray scattering probe the system in reciprocal space. The link between these two descriptions is the static structure factor, $S(q)$, which is fundamentally related to $g(r)$ through a Fourier transform. This computational practice [@problem_id:2909330] offers hands-on experience in this crucial transformation, equipping you with the skills to process simulation or experimental data while navigating the practical challenges of finite-size effects and numerical artifacts.", "problem": "You are given the task of computing the static structure factor $S(q)$ of a three-dimensional, isotropic colloidal fluid from a radially sampled pair correlation function $g(r)$, using only fundamental definitions and numerical integration. Your objective is to implement a program that, for a set of prescribed truncation radii and windowing functions, computes the height of the first principal peak of $S(q)$ and reports how it changes with the truncation and windowing choices. You must ensure numerical stability and scientific plausibility of the chosen discretizations and approximations.\n\nStart from the following fundamental base:\n\n- The static structure factor $S(q)$ is defined from microscopic density fluctuations as $S(q) = \\frac{1}{N} \\left\\langle \\sum_{j=1}^{N} \\sum_{k=1}^{N} e^{-i \\mathbf{q}\\cdot(\\mathbf{r}_j - \\mathbf{r}_k)} \\right\\rangle$, for wavevector magnitude $q = \\lvert \\mathbf{q} \\rvert$.\n- The pair correlation function $g(r)$ is defined so that the average number of particles in a spherical shell of radius $r$ and thickness $\\mathrm{d} r$ around a reference particle is $4\\pi \\rho r^2 g(r) \\mathrm{d} r$, where $\\rho$ is the number density and $r=\\lvert \\mathbf{r} \\rvert$.\n- Use the decomposition $h(r) = g(r) - 1$ and the isotropy of the fluid to relate $S(q)$ to $h(r)$ by integrating over all space. Do not assume any pre-derived one-dimensional transform; derive the required isotropic integral from the three-dimensional definition and isotropy.\n\nYou must then implement a numerical algorithm based on these principles that:\n- Constructs a synthetic but physically plausible $g(r)$ dataset sampled on a uniform grid $r \\in [0, R_{\\max}]$ with spacing $\\Delta r$ in reduced units where the particle diameter is set to $\\sigma = 1$.\n- Applies an optional window function $w(r)$ to $h(r)$ prior to the transform to mitigate finite-size truncation artifacts.\n- Computes $S(q)$ for a uniform grid of $q$ values $q \\in [q_{\\min}, q_{\\max}]$ and identifies the first principal peak of $S(q)$ in a specific interval by scanning for the global maximum over that interval.\n- Reports the peak height for each case in a clearly specified order.\n\nAll quantities must be dimensionless with length in units of $\\sigma$ (hence density in units of $\\sigma^{-3}$ and wavevector in units of $\\sigma^{-1}$). The static structure factor $S(q)$ is dimensionless. You must use the trapezoidal rule for numerical integration and ensure that the special case of $x \\to 0$ in $\\sin(x)/x$ is handled consistently.\n\nUse the following fixed definitions and parameters for generating $g(r)$:\n- Particle diameter is $\\sigma = 1$.\n- Number density is $\\rho = 0.85$ in units of $\\sigma^{-3}$.\n- Pair correlation function $g(r)$ is defined by:\n  - $g(r) = 0$ for $0 \\le r < \\sigma$,\n  - $g(r) = 1 + A \\exp\\!\\left(-\\frac{r-\\sigma}{\\xi}\\right) \\cos\\!\\left(k_0 (r - \\sigma)\\right)$ for $r \\ge \\sigma$,\n  with parameters $A = 0.85$, $\\xi = 2.0$, and $k_0 = 7.0$.\n- Radial grid spacing is $\\Delta r = 0.005$ in units of $\\sigma$.\n- Window functions $w(r)$ to be applied multiplicatively to $h(r)$ over $[0, R_{\\max}]$:\n  - Rectangular: $w(r) = 1$,\n  - Hann: $w(r) = \\tfrac{1}{2}\\left(1 - \\cos\\left(\\frac{2\\pi r}{R_{\\max}}\\right)\\right)$.\n- Wavevector grid: use $N_q = 5000$ points uniformly over $q \\in [q_{\\min}, q_{\\max}]$ with $q_{\\min} = 0.1$ and $q_{\\max} = 20.0$.\n- First principal peak search interval: restrict to $q \\in [q_{\\mathrm{low}}, q_{\\mathrm{high}}]$ with $q_{\\mathrm{low}} = 2.0$ and $q_{\\mathrm{high}} = 12.0$.\n- In all computations where $\\frac{\\sin(x)}{x}$ appears, you must handle $x = 0$ by taking the continuous limit value $1$.\n\nDesign your program to produce a single measure per test case: the height of the first principal peak of $S(q)$ over the specified search interval.\n\nTest suite:\n- Case $1$: $R_{\\max} = 30.0$, window type $=$ rectangular.\n- Case $2$: $R_{\\max} = 10.0$, window type $=$ rectangular.\n- Case $3$: $R_{\\max} = 10.0$, window type $=$ Hann.\n- Case $4$: $R_{\\max} = 30.0$, window type $=$ Hann.\n- Case $5$: $R_{\\max} = 6.0$, window type $=$ rectangular.\n\nYour program must produce a single line of output containing the peak heights as a comma-separated list enclosed in square brackets in the exact order of the test cases, with each value rounded to exactly six decimal places. For example, your output must look like \"[x1,x2,x3,x4,x5]\" where each $x_i$ is a float with six digits after the decimal point.", "solution": "We begin from the microscopic definition of the static structure factor $S(q)$ for an isotropic, homogeneous system of $N$ particles at number density $\\rho$:\n$$\nS(q) = \\frac{1}{N} \\left\\langle \\sum_{j=1}^{N} \\sum_{k=1}^{N} e^{-i \\mathbf{q} \\cdot (\\mathbf{r}_j - \\mathbf{r}_k)} \\right\\rangle,\n$$\nwhere $q = \\lvert \\mathbf{q} \\rvert$. By separating self and distinct terms, one obtains a constant contribution $1$ and a two-particle contribution involving the total correlation function $h(\\mathbf{r}) = g(\\mathbf{r}) - 1$:\n$$\nS(q) = 1 + \\rho \\int h(\\mathbf{r}) e^{-i \\mathbf{q} \\cdot \\mathbf{r}} \\, \\mathrm{d}^3 \\mathbf{r}.\n$$\nIsotropy implies $h(\\mathbf{r}) = h(r)$ with $r = \\lvert \\mathbf{r} \\rvert$. The angular integration in three dimensions can be performed by choosing $\\mathbf{q}$ along the $z$-axis without loss of generality, so that $\\mathbf{q} \\cdot \\mathbf{r} = q r \\cos\\theta$. Integrating over solid angle yields:\n$$\n\\int e^{-i \\mathbf{q} \\cdot \\mathbf{r}} \\, \\mathrm{d}\\Omega = 2\\pi \\int_{0}^{\\pi} e^{-i q r \\cos\\theta} \\sin\\theta \\, \\mathrm{d}\\theta = 4\\pi \\frac{\\sin(q r)}{q r}.\n$$\nTherefore, the isotropic formula for the static structure factor reduces to the one-dimensional spherical transform:\n$$\nS(q) = 1 + 4 \\pi \\rho \\int_{0}^{\\infty} r^2 h(r) \\frac{\\sin(q r)}{q r} \\, \\mathrm{d} r.\n$$\nHere $h(r) = g(r) - 1$. This exact relation motivates a numerical evaluation by truncating the radial integral at a finite $R_{\\max}$ and approximating the integral with a quadrature rule. The truncation introduces finite-size (windowing) effects that can be mitigated by multiplying $h(r)$ by a window function $w(r)$ that smoothly tapers to zero at $r = R_{\\max}$, thereby reducing spurious oscillations in $S(q)$ due to a sharp cutoff.\n\nWe adopt a radial grid $r_n = n \\Delta r$ for $n = 0, 1, \\dots, N_r$ with $\\Delta r$ fixed and $R_{\\max} = N_r \\Delta r$. The numerical approximation of $S(q)$ for a given $q$ is:\n$$\nS(q) \\approx 1 + 4 \\pi \\rho \\sum_{n=0}^{N_r} \\left[ r_n^2 \\, h(r_n) \\, w(r_n) \\, \\frac{\\sin(q r_n)}{q r_n} \\right] \\Delta r,\n$$\nwith the trapezoidal rule implemented by weighting the endpoints appropriately or by using a standard routine such as the composite trapezoidal rule. The factor $\\frac{\\sin(q r)}{q r}$ is continuous in the limit $q r \\to 0$ with value $1$, which must be imposed numerically to avoid indeterminate forms.\n\nWe construct a physically plausible $g(r)$ in reduced units with particle diameter $\\sigma = 1$:\n- For $0 \\le r < \\sigma$, we set $g(r) = 0$, modeling the excluded-volume region.\n- For $r \\ge \\sigma$, we use a damped oscillatory form:\n$$\ng(r) = 1 + A \\exp\\!\\left(-\\frac{r - \\sigma}{\\xi}\\right) \\cos\\!\\left(k_0 (r - \\sigma)\\right),\n$$\nwith $A = 0.85$, $\\xi = 2.0$, and $k_0 = 7.0$. This form captures short-range order typical of dense colloidal fluids and produces a principal peak in $S(q)$ near $q \\approx k_0$.\n\nWe define window functions $w(r)$ on $[0, R_{\\max}]$:\n- Rectangular window: $w(r) = 1$ for $0 \\le r \\le R_{\\max}$.\n- Hann window: $w(r) = \\tfrac{1}{2}\\left(1 - \\cos\\left(\\tfrac{2\\pi r}{R_{\\max}}\\right)\\right)$.\n\nGiven a set of wavevectors $q_m$ uniformly spanning $[q_{\\min}, q_{\\max}]$, we compute $S(q_m)$ for each $m$ using the trapezoidal rule. The first principal peak height is identified as:\n$$\nS_{\\text{peak}} = \\max_{q \\in [q_{\\mathrm{low}}, q_{\\mathrm{high}}]} S(q),\n$$\nwhere $[q_{\\mathrm{low}}, q_{\\mathrm{high}}]$ isolates the primary peak, avoiding the small-$q$ region influenced by compressibility and the high-$q$ region where oscillations are weaker.\n\nAlgorithmic steps:\n1. Set parameters: $\\rho = 0.85$, $\\sigma = 1$, $A = 0.85$, $\\xi = 2.0$, $k_0 = 7.0$, $\\Delta r = 0.005$, $q_{\\min} = 0.1$, $q_{\\max} = 20.0$, $N_q = 5000$, $q_{\\mathrm{low}} = 2.0$, $q_{\\mathrm{high}} = 12.0$.\n2. For each test case $(R_{\\max}, \\text{window type})$:\n   - Build radial grid $r$ from $0$ to $R_{\\max}$ with step $\\Delta r$.\n   - Evaluate $g(r)$ piecewise and compute $h(r) = g(r) - 1$.\n   - Construct $w(r)$ based on the window type.\n   - Build the $q$ grid uniformly from $q_{\\min}$ to $q_{\\max}$ with $N_q$ points.\n   - Compute the matrix $X_{mn} = q_m r_n$ and the spherical kernel $\\mathrm{sinc}(X_{mn}) = \\frac{\\sin(X_{mn})}{X_{mn}}$ with the continuous limit $\\mathrm{sinc}(0) = 1$.\n   - Form the integrand $I_{mn} = r_n^2 \\, h(r_n) \\, w(r_n) \\, \\mathrm{sinc}(X_{mn})$ and perform the trapezoidal integration over $r$ for each $q_m$:\n     $$\n     S(q_m) \\approx 1 + 4 \\pi \\rho \\int_{0}^{R_{\\max}} r^2 h(r) w(r) \\frac{\\sin(q_m r)}{q_m r} \\, \\mathrm{d} r.\n     $$\n   - Restrict to the search interval $[q_{\\mathrm{low}}, q_{\\mathrm{high}}]$ and identify the maximum value of $S(q)$ therein as $S_{\\text{peak}}$.\n3. Round each $S_{\\text{peak}}$ to exactly six decimals and print them in the required order and format.\n\nScientific considerations:\n- Truncating the integral at $R_{\\max}$ introduces oscillatory artifacts (Gibbs phenomena) in $S(q)$ due to a sharp cutoff in real space. A large $R_{\\max}$ reduces this effect, while a Hann window further damps oscillations by smoothly tapering to zero at $R_{\\max}$, at the cost of broadening spectral features and slightly reducing peak heights.\n- A smaller $R_{\\max}$ omits contributions from longer-range correlations, biasing the peak height and possibly shifting the peak position; windowing partially compensates by reducing spurious oscillations but cannot recover missing information.\n\nImplementation details:\n- The trapezoidal rule is used to approximate the integral with uniform spacing $\\Delta r$, ensuring that the endpoint contributions are properly accounted for internally by a standard implementation.\n- The function $\\mathrm{sinc}(x) = \\sin(x)/x$ is evaluated robustly by replacing values at $x = 0$ with $1$, consistent with the limit $\\lim_{x\\to 0} \\sin(x)/x = 1$.\n- The first principal peak is the global maximum within $[q_{\\mathrm{low}}, q_{\\mathrm{high}}]$, which for the chosen model and parameters contains the main peak near $q \\approx k_0$.\n\nThe program applies this procedure to the five specified test cases:\n- Case $1$: $R_{\\max} = 30.0$, rectangular window.\n- Case $2$: $R_{\\max} = 10.0$, rectangular window.\n- Case $3$: $R_{\\max} = 10.0$, Hann window.\n- Case $4$: $R_{\\max} = 30.0$, Hann window.\n- Case $5$: $R_{\\max} = 6.0$, rectangular window.\n\nFinally, the program prints a single line of the form \"[x1,x2,x3,x4,x5]\" where each $x_i$ is the first peak height for the corresponding case, expressed as a float with exactly six digits after the decimal point. This format provides quantifiable answers suitable for automated testing and comparison across different truncation and windowing settings.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef g_of_r(r, sigma=1.0, A=0.85, xi=2.0, k0=7.0):\n    \"\"\"\n    Synthetic radial distribution function g(r):\n    g(r) = 0 for r < sigma\n    g(r) = 1 + A * exp(-(r - sigma)/xi) * cos(k0 * (r - sigma)) for r >= sigma\n    \"\"\"\n    g = np.ones_like(r)\n    mask_core = r < sigma\n    mask_tail = ~mask_core\n    g[mask_core] = 0.0\n    # For r >= sigma\n    rt = r[mask_tail]\n    g[mask_tail] = 1.0 + A * np.exp(-(rt - sigma) / xi) * np.cos(k0 * (rt - sigma))\n    return g\n\ndef window_function(r, Rmax, kind=\"rect\"):\n    \"\"\"\n    Window function w(r) on [0, Rmax]\n    - rect: 1\n    - hann: 0.5*(1 - cos(2*pi*r/Rmax))\n    \"\"\"\n    if kind == \"rect\":\n        return np.ones_like(r)\n    elif kind == \"hann\":\n        return 0.5 * (1.0 - np.cos(2.0 * np.pi * r / Rmax))\n    else:\n        raise ValueError(f\"Unknown window type: {kind}\")\n\ndef spherical_sinc(x):\n    \"\"\"\n    Compute sin(x)/x with handling x=0 -> 1\n    \"\"\"\n    out = np.ones_like(x)\n    # Avoid overflow/precision issues for very small |x|\n    small = np.abs(x) < 1e-12\n    not_small = ~small\n    out[not_small] = np.sin(x[not_small]) / x[not_small]\n    return out\n\ndef compute_Sq_from_gr(r, h, rho, q_values):\n    \"\"\"\n    Compute S(q) = 1 + 4*pi*rho * ∫ r^2 h(r) sinc(q r) dr using trapezoidal rule.\n    r: 1D array of radii\n    h: 1D array h(r) = g(r) - 1 (already windowed if needed)\n    rho: number density\n    q_values: 1D array of q magnitudes\n    Returns S(q) as 1D array of same length as q_values.\n    \"\"\"\n    # Precompute radial factor\n    r2h = (r**2) * h  # shape (Nr,)\n    # Build matrix of q*r\n    qr = np.outer(q_values, r)  # shape (Nq, Nr)\n    sinc_qr = spherical_sinc(qr)  # shape (Nq, Nr)\n    integrand = sinc_qr * r2h  # broadcast over q\n    # Integrate over r for each q using trapezoidal rule\n    # Note: np.trapz integrates along the last axis by default.\n    Sq = 1.0 + 4.0 * np.pi * rho * np.trapz(integrand, r, axis=1)\n    return Sq\n\ndef first_peak_height(q, Sq, q_low, q_high):\n    \"\"\"\n    Find the height of the first principal peak as the maximum of S(q)\n    within the interval [q_low, q_high].\n    \"\"\"\n    mask = (q >= q_low) & (q <= q_high)\n    if not np.any(mask):\n        raise ValueError(\"No q values in the specified peak search interval.\")\n    Sq_segment = Sq[mask]\n    # Maximum height\n    peak_height = float(np.max(Sq_segment))\n    return peak_height\n\ndef solve():\n    # Fixed parameters per problem statement\n    sigma = 1.0\n    rho = 0.85\n    A = 0.85\n    xi = 2.0\n    k0 = 7.0\n    dr = 0.005\n    q_min, q_max, Nq = 0.1, 20.0, 5000\n    q_low, q_high = 2.0, 12.0\n\n    # Define the test cases from the problem statement.\n    # Each case: (Rmax, window_type)\n    test_cases = [\n        (30.0, \"rect\"),  # Case 1\n        (10.0, \"rect\"),  # Case 2\n        (10.0, \"hann\"),  # Case 3\n        (30.0, \"hann\"),  # Case 4\n        (6.0,  \"rect\"),  # Case 5 (more severe truncation)\n    ]\n\n    # Prepare q grid\n    q_values = np.linspace(q_min, q_max, Nq)\n\n    results = []\n    for Rmax, wtype in test_cases:\n        # Radial grid\n        Nr = int(np.round(Rmax / dr))\n        r = np.linspace(0.0, Rmax, Nr + 1)\n\n        # g(r) and h(r)\n        g = g_of_r(r, sigma=sigma, A=A, xi=xi, k0=k0)\n        h = g - 1.0\n\n        # Apply window\n        w = window_function(r, Rmax, kind=wtype)\n        hw = h * w\n\n        # Compute S(q)\n        Sq = compute_Sq_from_gr(r, hw, rho, q_values)\n\n        # First peak height\n        peak = first_peak_height(q_values, Sq, q_low=q_low, q_high=q_high)\n        results.append(peak)\n\n    # Round to 6 decimals and format output\n    results_str = [f\"{x:.6f}\" for x in results]\n    print(f\"[{','.join(results_str)}]\")\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "2909330"}, {"introduction": "A remarkable feature of dense liquids is that their static structure holds the key to predicting their future dynamical behavior, including the dramatic slowdown characteristic of the glass transition. Mode-Coupling Theory (MCT) provides a powerful, first-principles framework that uses the static structure factor $S(q)$ as its sole input to predict the onset of dynamical arrest. In this advanced exercise [@problem_id:2909294], you will implement the self-consistent equations at the heart of MCT to identify the critical packing fraction $\\phi_c$ where a liquid becomes a nonergodic solid, providing deep insight into the microscopic origins of glassy behavior.", "problem": "Consider an overdamped colloidal suspension of identical hard spheres of diameter $\\sigma$ at number density $\\rho$ and packing fraction $\\phi = \\pi \\rho \\sigma^{3} / 6$. Within the ideal Mode-Coupling Theory (MCT) for Brownian dynamics, the nonergodicity parameters $f_{q}$ are defined as the long-time limits of the normalized intermediate scattering function at wavenumber $q$. The ideal MCT predicts a self-consistent equation for $f_{q}$ of the form\n$$\n\\frac{f_{q}}{1 - f_{q}} \\;=\\; m_{q},\n$$\nwhere the long-time memory kernel $m_{q}$ is given, for an isotropic fluid, by\n$$\nm_{q} \\;=\\; \\frac{\\rho\\, S(q)}{8 \\pi^{2} q^{2}} \\int_{0}^{\\infty} \\mathrm{d}k \\; k^{2} \\int_{-1}^{1} \\mathrm{d}\\mu \\; S(k)\\, S(p)\\; \\left[k\\,\\mu\\, c(k) + \\big(q - k \\mu\\big)\\, c(p)\\right]^{2} \\; f_{k} \\, f_{p},\n$$\nwith $p = \\sqrt{q^{2} + k^{2} - 2 q k \\mu}$, and the direct correlation function $c(q)$ defined by the Ornstein–Zernike relation in Fourier space,\n$$\nc(q) \\;=\\; \\frac{1 - 1/S(q)}{\\rho}.\n$$\nAll quantities are dimensionless after setting $\\sigma = 1$ and thermal energy $k_{\\mathrm{B}} T = 1$. The trivial solution $f_{q} = 0$ exists at all $\\phi$. The ideal glass transition occurs at a critical packing fraction $\\phi_{c}$ where a nontrivial solution $f_{q} \\neq 0$ first emerges.\n\nIn this problem, you will numerically determine the ideal glass transition packing fraction $\\phi_{c}$ by solving the above self-consistent equations for $f_{q}$ using a discretized $q$-grid, Gaussian quadrature for the angular integration, and a fixed-point iteration with mixing. To make the task fully specified and computationally tractable while remaining physically plausible, use the following analytic surrogate for the static structure factor of hard spheres, $S(q;\\phi)$, which captures the growth and sharpening of the principal peak with increasing $\\phi$ and the reduction of compressibility at small $q$:\n$$\nS(q;\\phi) \\;=\\; S_{0}(\\phi) \\;+\\; A(\\phi)\\,\\exp\\!\\left(-\\frac{(q - q_{0})^{2}}{2\\, w^{2}}\\right) \\;+\\; B(\\phi)\\, \\frac{\\sin(q)}{q}\\, \\exp\\!\\left(-\\left(\\frac{q}{q_{d}}\\right)^{2}\\right),\n$$\nwith\n$$\nS_{0}(\\phi) \\;=\\; \\frac{1}{1 + \\kappa \\phi}, \\qquad A(\\phi) \\;=\\; \\frac{a\\, \\phi}{1 - \\phi/\\phi_{\\star}}, \\qquad B(\\phi) \\;=\\; b\\, \\phi,\n$$\nand fixed constants\n$$\nq_{0} = 7.0,\\quad w = 0.65 \\times s_{w},\\quad \\kappa = 20,\\quad a = 0.8,\\quad \\phi_{\\star} = 0.59,\\quad b = 0.1,\\quad q_{d} = 10.\n$$\nHere $s_{w}$ is a tunable dimensionless width-scaling parameter provided per test case. For numerical robustness, enforce $S(q;\\phi) \\ge S_{\\min}$ with $S_{\\min} = 0.05$ at all $q$.\n\nYour program must:\n- Discretize the wavenumber domain using a uniform grid $q_{i}\\in[q_{\\min}, q_{\\max}]$ with $N_{q}$ points, where $q_{\\min} > 0$ to avoid singularities in the prefactor $1/q^{2}$ of the memory kernel. Use $q_{\\min} = 10^{-3}$.\n- Evaluate the angular integral $\\int_{-1}^{1} \\mathrm{d}\\mu\\,(\\cdots)$ using $N_{\\mu}$-point Gauss–Legendre quadrature.\n- For a given $\\phi$, iterate the fixed-point map\n$$\nf_{q}^{\\mathrm{new}} \\;=\\; \\frac{m_{q}[f]}{1 + m_{q}[f]}\n$$\nwith linear mixing,\n$$\nf_{q} \\leftarrow (1 - \\gamma)\\, f_{q} \\;+\\; \\gamma\\, f_{q}^{\\mathrm{new}},\n$$\nstarting from a uniform small positive initialization $f_{q}^{(0)} = \\varepsilon$ with $\\varepsilon = 10^{-6}$. Use a mixing parameter $\\gamma = 0.5$. Declare convergence when $\\max_{q} \\lvert f_{q}^{\\mathrm{new}} - f_{q}\\rvert  \\tau$ with $\\tau = 10^{-6}$ or after $N_{\\mathrm{iter},\\max} = 200$ iterations. Classify the state as glass if $\\overline{f} = \\frac{1}{N_{q}}\\sum_{i=1}^{N_{q}} f_{q_{i}} > f_{\\mathrm{th}}$ with $f_{\\mathrm{th}} = 10^{-3}$, otherwise as fluid.\n- For each test case, determine $\\phi_{c}$ by bisection on $\\phi$ over a bracketing interval $[\\phi_{\\mathrm{lo}}, \\phi_{\\mathrm{hi}}]$ where the system is fluid at $\\phi_{\\mathrm{lo}}$ and glass at $\\phi_{\\mathrm{hi}}$. Perform $N_{\\mathrm{bisect}} = 12$ bisection steps and report the midpoint as the estimate of $\\phi_{c}$. The number density is $\\rho = 6 \\phi / \\pi$ in units of $\\sigma = 1$.\n\nImplementation requirements and numerical details:\n- Use linear interpolation for off-grid evaluations of $f_{p}$ and $S(p)$; for arguments $p$ outside the tabulated range, use $S(p) = 1$, $c(p) = 0$, and $f(p) = 0$.\n- Use the trapezoidal rule for the radial integral $\\int_{0}^{\\infty} \\mathrm{d}k$ truncated at $q_{\\max}$.\n- Ensure that $0 \\le f_{q} \\le 1$ at each iteration by clipping if needed.\n\nTest suite:\nProvide results for the following three test cases, each specified by the tuple $(N_{q}, q_{\\max}, N_{\\mu}, \\phi_{\\mathrm{lo}}, \\phi_{\\mathrm{hi}}, s_{w})$:\n- Case 1: $(36, 40.0, 12, 0.45, 0.585, 1.0)$.\n- Case 2: $(28, 30.0, 8, 0.45, 0.585, 1.0)$.\n- Case 3: $(36, 40.0, 12, 0.45, 0.585, 1.2)$.\n\nAnswer specification:\n- For each case, output the estimated $\\phi_{c}$ as a dimensionless floating-point number rounded to three decimals.\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, namely $\\big[\\phi_{c}^{(1)}, \\phi_{c}^{(2)}, \\phi_{c}^{(3)}\\big]$ with each entry rounded to three decimals (for example, $[0.534,0.529,0.558]$).", "solution": "The problem statement is scientifically sound, internally consistent, and provides an unambiguous specification for a numerical procedure. It is therefore deemed valid. The task is to determine the critical packing fraction $\\phi_{c}$ for the ideal glass transition as predicted by Mode-Coupling Theory (MCT) for a model colloidal system of hard spheres.\n\nThe overall strategy to locate $\\phi_{c}$ is a bisection search over the packing fraction $\\phi$. The problem provides a bracketing interval $[\\phi_{\\mathrm{lo}}, \\phi_{\\mathrm{hi}}]$ for each test case, where the colloidal system is known to be in a fluid state at $\\phi_{\\mathrm{lo}}$ and a glass state at $\\phi_{\\mathrm{hi}}$. The bisection method iteratively halves this interval $N_{\\mathrm{bisect}}$ times. At each step, the state of the system is determined at the midpoint $\\phi_{\\mathrm{mid}} = (\\phi_{\\mathrm{lo}} + \\phi_{\\mathrm{hi}})/2$. If the system at $\\phi_{\\mathrm{mid}}$ is a glass, the upper bound of the search interval is updated, $\\phi_{\\mathrm{hi}} \\leftarrow \\phi_{\\mathrm{mid}}$; if it is a fluid, the lower bound is updated, $\\phi_{\\mathrm{lo}} \\leftarrow \\phi_{\\mathrm{mid}}$. The final estimate for $\\phi_{c}$ is the midpoint of the resulting narrow interval.\n\nThe core of the algorithm is a function that determines whether the system at a given $\\phi$ is a fluid or a glass. This is achieved by numerically solving the self-consistent MCT equation for the nonergodicity parameter $f_{q}$:\n$$\n\\frac{f_{q}}{1 - f_{q}} \\;=\\; m_{q}[f]\n$$\nThis equation can be rearranged into a fixed-point iteration form:\n$$\nf_{q}^{\\mathrm{new}} \\;=\\; \\frac{m_{q}[f]}{1 + m_{q}[f]}\n$$\nStarting from a small initial guess $f_{q}^{(0)} = \\varepsilon$ (representing a fluid state with thermal fluctuations), this mapping is iterated until convergence. To stabilize the iteration, which can be numerically sensitive near the transition, a linear mixing scheme is employed:\n$$\nf_{q} \\leftarrow (1 - \\gamma)\\, f_{q} \\;+\\; \\gamma\\, f_{q}^{\\mathrm{new}}\n$$\nwhere $\\gamma$ is the mixing parameter. An iteration is considered converged if the maximum absolute change in $f_{q}$ across the entire wavenumber grid falls below a tolerance $\\tau$, i.e., $\\max_{q} \\lvert f_{q}^{\\mathrm{new}} - f_{q}\\rvert  \\tau$. If the iteration converges to a state where the average nonergodicity parameter $\\overline{f} = \\frac{1}{N_{q}}\\sum_{i=1}^{N_{q}} f_{q_{i}}$ is significantly different from zero (specifically, $\\overline{f}  f_{\\mathrm{th}}$), the state is classified as a glass. Otherwise, it is classified as a fluid, which corresponds to the trivial solution $f_{q} = 0$.\n\nThe most computationally intensive part is the evaluation of the memory kernel, $m_{q}$. The provided formula for an isotropic fluid is:\n$$\nm_{q} \\;=\\; \\frac{\\rho\\, S(q)}{8 \\pi^{2} q^{2}} \\int_{0}^{\\infty} \\mathrm{d}k \\; k^{2} \\int_{-1}^{1} \\mathrm{d}\\mu \\; S(k)\\, S(p)\\; \\left[k\\,\\mu\\, c(k) + \\big(q - k \\mu\\big)\\, c(p)\\right]^{2} \\; f_{k} \\, f_{p}\n$$\nwith $p = \\sqrt{q^{2} + k^{2} - 2 q k \\mu}$. For a numerical solution, all functions are discretized on a uniform wavenumber grid $q_{i}\\in[q_{\\min}, q_{\\max}]$ with $N_{q}$ points. The double integral in $m_{q}$ is computed as follows:\n$1$. **Angular Integration ($\\mu$):** The integral over $\\mu$ from $-1$ to $1$ is evaluated using $N_{\\mu}$-point Gauss-Legendre quadrature, which replaces the integral with a weighted sum: $\\int_{-1}^{1} g(\\mu) \\mathrm{d}\\mu \\approx \\sum_{l=1}^{N_{\\mu}} w_{l} g(\\mu_{l})$, where $\\mu_{l}$ and $w_{l}$ are the quadrature nodes and weights, respectively.\n$2$. **Radial Integration ($k$):** The integral over $k$ from $0$ to $\\infty$ is approximated by applying the trapezoidal rule over the discretized grid, from $q_{\\min}$ to $q_{\\max}$. This transforms the integral into a weighted sum over the grid points $k_{j} = q_{j}$.\n\nFor each external wavevector $q_{i}$ on the grid, and for each pair of integration variables $(k_{j}, \\mu_{l})$, the wavevector $p$ must be calculated. As $p$ will generally not fall on a grid point, the values $S(p)$, $c(p)$, and $f_{p}$ are obtained via linear interpolation from their tabulated values on the $q$-grid. The problem specifies boundary conditions for this interpolation: for $p$ outside the grid range $[q_{\\min}, q_{\\max}]$, we use $S(p) = 1$, $c(p) = 0$, and $f_{p} = 0$. These correspond to the non-interacting limit of an ideal gas.\n\nThe static structure factor $S(q)$ and direct correlation function $c(q)$ are first calculated for the given $\\phi$ using the provided analytic surrogate model and the Ornstein-Zernike relation, $c(q) = (\\rho)^{-1} (1 - 1/S(q))$. The entire procedure is encapsulated in a Python program that executes the bisection search for each test case and reports the final estimated $\\phi_{c}$, rounded as specified.", "answer": "```python\nimport numpy as np\nfrom scipy.special import roots_legendre\n\ndef solve():\n    \"\"\"\n    Main function to solve the problem for the given test cases.\n    \"\"\"\n\n    # --- Problem Constants ---\n    Q_MIN = 1e-3\n    EPSILON = 1e-6\n    GAMMA = 0.5\n    TAU = 1e-6\n    N_ITER_MAX = 200\n    F_TH = 1e-3\n    N_BISECT = 12\n    S_MIN = 0.05\n\n    # --- S(q) Model Constants ---\n    Q0 = 7.0\n    KAPPA = 20.0\n    A_PARAM = 0.8\n    PHI_STAR = 0.59\n    B_PARAM = 0.1\n    Q_D = 10.0\n\n    def calculate_S_and_c(q_vec, phi, s_w):\n        \"\"\"\n        Calculates the surrogate static structure factor S(q) and direct\n        correlation function c(q) on a given q-grid.\n        \"\"\"\n        rho = 6.0 * phi / np.pi\n        \n        # Calculate phi-dependent parameters for S(q)\n        S0_phi = 1.0 / (1.0 + KAPPA * phi)\n        if phi = PHI_STAR:\n            # Prevent division by zero or negative number\n            # This should not be reached with the given bisection intervals\n            A_phi = 1e6 \n        else:\n            A_phi = (A_PARAM * phi) / (1.0 - phi / PHI_STAR)\n\n        B_phi = B_PARAM * phi\n        w = 0.65 * s_w\n\n        # Calculate S(q)\n        # term_low_q uses np.sin(q)/q which is safe since q_min  0\n        term_peak = A_phi * np.exp(-((q_vec - Q0)**2) / (2 * w**2))\n        term_low_q = B_phi * (np.sin(q_vec) / q_vec) * np.exp(-(q_vec / Q_D)**2)\n\n        S_vec = S0_phi + term_peak + term_low_q\n        S_vec = np.maximum(S_vec, S_MIN) # Enforce minimum value\n\n        # Calculate c(q) via Ornstein-Zernike relation\n        c_vec = (1.0 - 1.0 / S_vec) / rho\n        \n        return S_vec, c_vec, rho\n\n    def check_state(phi, N_q, q_max, N_mu, s_w):\n        \"\"\"\n        Solves the MCT equations for a given phi to determine if the state\n        is a fluid or a glass.\n        Returns: True if glass, False if fluid.\n        \"\"\"\n        # 1. Setup grids\n        q_vec = np.linspace(Q_MIN, q_max, N_q)\n        mu_pts, mu_w = roots_legendre(N_mu)\n\n        # 2. Calculate static properties S(q) and c(q)\n        S_vec, c_vec, rho = calculate_S_and_c(q_vec, phi, s_w)\n\n        # 3. Fixed-point iteration for f_q\n        f_vec = np.full(N_q, EPSILON, dtype=np.float64)\n\n        for _ in range(N_ITER_MAX):\n            m_vec = np.zeros(N_q, dtype=np.float64)\n            \n            # Loop over external wavevector q_i\n            for i, q in enumerate(q_vec):\n                k_vec = q_vec\n                \n                # p_matrix has shape (N_q, N_mu)\n                p_matrix = np.sqrt(q**2 + k_vec[:, np.newaxis]**2 - 2 * q * k_vec[:, np.newaxis] * mu_pts[np.newaxis, :])\n                \n                p_flat = p_matrix.flatten()\n                \n                # Interpolate S, c, f at p values with specified boundary behavior\n                S_p_flat = np.interp(p_flat, q_vec, S_vec, left=1.0, right=1.0)\n                c_p_flat = np.interp(p_flat, q_vec, c_vec, left=0.0, right=0.0)\n                f_p_flat = np.interp(p_flat, q_vec, f_vec, left=0.0, right=0.0)\n                \n                S_p_matrix = S_p_flat.reshape(N_q, N_mu)\n                c_p_matrix = c_p_flat.reshape(N_q, N_mu)\n                f_p_matrix = f_p_flat.reshape(N_q, N_mu)\n\n                # Vertex term: [k*mu*c(k) + (q-k*mu)*c(p)]^2\n                term1 = k_vec[:, np.newaxis] * mu_pts[np.newaxis, :] * c_vec[:, np.newaxis]\n                term2 = (q - k_vec[:, np.newaxis] * mu_pts[np.newaxis, :]) * c_p_matrix\n                vertex_sq = (term1 + term2)**2\n                \n                # Full integrand for the memory kernel\n                integrand_matrix = S_vec[:, np.newaxis] * S_p_matrix * vertex_sq * f_vec[:, np.newaxis] * f_p_matrix\n\n                # Angular integral (Gaussian quadrature over mu)\n                angular_integral = np.sum(integrand_matrix * mu_w[np.newaxis, :], axis=1)\n                \n                # Radial integral (Trapezoidal rule over k)\n                radial_integrand = k_vec**2 * angular_integral\n                radial_integral = np.trapz(radial_integrand, q_vec)\n                \n                # Assemble m_q\n                prefactor = (rho * S_vec[i]) / (8 * np.pi**2 * q**2)\n                m_vec[i] = prefactor * radial_integral\n            \n            f_vec_new = m_vec / (1.0 + m_vec)\n            \n            max_diff = np.max(np.abs(f_vec_new - f_vec))\n            \n            # Apply mixing and clip to [0, 1] range\n            f_vec_next = (1.0 - GAMMA) * f_vec + GAMMA * f_vec_new\n            f_vec = np.clip(f_vec_next, 0.0, 1.0)\n\n            if max_diff  TAU:\n                break\n        \n        # 4. Classify state as fluid or glass\n        f_mean = np.mean(f_vec)\n        return f_mean  F_TH\n\n    def find_phi_c(case):\n        \"\"\"\n        Performs a bisection search to find the critical packing fraction phi_c.\n        \"\"\"\n        N_q, q_max, N_mu, phi_lo, phi_hi, s_w = case\n        \n        phi_lo_current, phi_hi_current = phi_lo, phi_hi\n        \n        for _ in range(N_BISECT):\n            phi_mid = (phi_lo_current + phi_hi_current) / 2.0\n            if check_state(phi_mid, N_q, q_max, N_mu, s_w):\n                # State is glass, so transition is at or below phi_mid\n                phi_hi_current = phi_mid\n            else:\n                # State is fluid, so transition is above phi_mid\n                phi_lo_current = phi_mid\n                \n        # The estimate is the midpoint of the final interval\n        phi_c_est = (phi_lo_current + phi_hi_current) / 2.0\n        return phi_c_est\n\n    # --- Test Suite ---\n    test_cases = [\n        # (N_q, q_max, N_mu, phi_lo, phi_hi, s_w)\n        (36, 40.0, 12, 0.45, 0.585, 1.0),\n        (28, 30.0, 8, 0.45, 0.585, 1.0),\n        (36, 40.0, 12, 0.45, 0.585, 1.2),\n    ]\n\n    results = []\n    for case in test_cases:\n        phi_c = find_phi_c(case)\n        results.append(phi_c)\n\n    # --- Final Output ---\n    print(f\"[{','.join(f'{r:.3f}' for r in results)}]\")\n\nsolve()\n```", "id": "2909294"}]}