{"hands_on_practices": [{"introduction": "The tube model for entangled polymers provides a powerful bridge between macroscopic rheological measurements and microscopic chain parameters. This first practice grounds the theory in experimental reality by showing how to determine the fundamental entanglement length, $N_e$, from a measured plateau modulus, $G_N^0$. By applying principles of rubber elasticity to the transient network of entanglements, you will develop a core skill for characterizing polymer melts and setting the stage for more complex dynamic models [@problem_id:2926125].", "problem": "A monodisperse polymer melt is characterized by a well-developed rubbery plateau in small-amplitude oscillatory shear. In the tube model picture, the plateau modulus is controlled by the density of entanglement strands that store elastic energy. Starting from Gaussian network elasticity, where the shear modulus of a network of elastically active strands is proportional to the number density of strands and temperature, and identifying entanglement strands as the elastically active entities in the melt, derive an expression that connects the plateau modulus to the entanglement molecular weight and, hence, to the entanglement length in monomer units. In refined reptation theory, constraint release (CR) and contour length fluctuations (CLF) redistribute stress pathways and attenuate the measured plateau modulus relative to the idealized entanglement-network prediction by a multiplicative factor. Model this attenuation by a scalar factor $0<\\gamma<1$ such that the measured plateau modulus $G_N^{\\mathrm{meas}}$ satisfies $G_N^{\\mathrm{meas}}=\\gamma\\,G_N^{\\mathrm{ideal}}$.\n\nGiven the following data for a styrene-based melt at temperature $T$:\n- Melt density: $\\rho=1.05\\times 10^{3}\\,\\mathrm{kg\\,m^{-3}}$,\n- Temperature: $T=463\\,\\mathrm{K}$,\n- Measured plateau modulus: $G_N^{\\mathrm{meas}}=2.10\\times 10^{5}\\,\\mathrm{Pa}$,\n- Monomer molar mass (styrene): $m_0=0.104\\,\\mathrm{kg\\,mol^{-1}}$,\n- Attenuation factor due to constraint release and contour length fluctuations: $\\gamma=0.90$,\n- Universal gas constant: $R=8.314\\,\\mathrm{J\\,mol^{-1}\\,K^{-1}}$,\n\ncompute the entanglement length in monomer units $N_e$.\n\nInstructions:\n- Express your final answer for $N_e$ as a pure number (no units).\n- Round your final answer to three significant figures.", "solution": "The problem requires the computation of the entanglement length in monomer units, $N_e$, for a polymer melt, based on its measured rheological properties and thermodynamic state. The solution proceeds from the fundamental principles of rubber elasticity as applied to entangled polymer systems within the framework of the tube model.\n\nFirst, we begin with the theory of Gaussian network elasticity. The elastic shear modulus, $G$, of a network of flexible strands is proportional to the number density of elastically active strands, $\\nu$, and the absolute temperature, $T$. This relationship is expressed as:\n$$G = c \\nu k_B T$$\nwhere $k_B$ is the Boltzmann constant and $c$ is a numerical prefactor of order unity. For the purpose of this derivation, as is standard in many treatments, we take $c=1$.\n\nIn the context of the tube model for an entangled polymer melt, the elastically active strands are the segments of a polymer chain between two consecutive entanglement points. The plateau modulus, $G_N^0$, corresponds to the elastic response of this transient network of entanglement strands. Therefore, the ideal plateau modulus, $G_N^{\\mathrm{ideal}}$, is given by:\n$$G_N^{\\mathrm{ideal}} = \\nu_e k_B T$$\nwhere $\\nu_e$ is the number density of entanglement strands per unit volume.\n\nThe number density $\\nu_e$ can be expressed in terms of macroscopic material properties. If the melt has a mass density $\\rho$ and the average molar mass of a single entanglement strand is $M_e$, then the number of moles of entanglement strands per unit volume is $\\frac{\\rho}{M_e}$. The number of strands per unit volume is this molar density multiplied by Avogadro's constant, $N_A$:\n$$\\nu_e = \\frac{\\rho N_A}{M_e}$$\nSubstituting this expression for $\\nu_e$ into the equation for the ideal plateau modulus yields:\n$$G_N^{\\mathrm{ideal}} = \\left(\\frac{\\rho N_A}{M_e}\\right) k_B T = \\frac{\\rho (N_A k_B) T}{M_e}$$\nRecognizing that the product of Avogadro's constant and the Boltzmann constant is the universal gas constant, $R = N_A k_B$, we arrive at the central equation relating the ideal plateau modulus to the entanglement molar mass:\n$$G_N^{\\mathrm{ideal}} = \\frac{\\rho R T}{M_e}$$\n\nThe problem states that dynamic processes such as constraint release (CR) and contour length fluctuations (CLF) cause the experimentally measured plateau modulus, $G_N^{\\mathrm{meas}}$, to be lower than the ideal value. This attenuation is modeled by a multiplicative factor $\\gamma$:\n$$G_N^{\\mathrm{meas}} = \\gamma G_N^{\\mathrm{ideal}} = \\gamma \\frac{\\rho R T}{M_e}$$\n\nOur objective is to find the entanglement length in monomer units, $N_e$. This quantity is defined as the ratio of the entanglement molar mass, $M_e$, to the molar mass of a single monomer unit, $m_0$:\n$$N_e = \\frac{M_e}{m_0}$$\nTo find $N_e$, we first solve the equation for $G_N^{\\mathrm{meas}}$ for the entanglement molar mass, $M_e$:\n$$M_e = \\gamma \\frac{\\rho R T}{G_N^{\\mathrm{meas}}}$$\nThen, we substitute this expression into the definition of $N_e$:\n$$N_e = \\frac{1}{m_0} \\left( \\gamma \\frac{\\rho R T}{G_N^{\\mathrm{meas}}} \\right) = \\frac{\\gamma \\rho R T}{m_0 G_N^{\\mathrm{meas}}}$$\nThis is the final symbolic expression for the entanglement length in monomer units.\n\nNow, we substitute the given numerical values into this expression. The data provided are:\n- $\\gamma = 0.90$\n- $\\rho = 1.05 \\times 10^{3}\\,\\mathrm{kg\\,m^{-3}}$\n- $R = 8.314\\,\\mathrm{J\\,mol^{-1}\\,K^{-1}}$\n- $T = 463\\,\\mathrm{K}$\n- $m_0 = 0.104\\,\\mathrm{kg\\,mol^{-1}}$\n- $G_N^{\\mathrm{meas}} = 2.10 \\times 10^{5}\\,\\mathrm{Pa}$\n\nIt is critical to ensure consistency of units. The Pascal unit is $\\mathrm{Pa} = \\mathrm{N\\,m^{-2}} = \\mathrm{J\\,m^{-3}}$. With all quantities in SI base units or derived units, the calculation is as follows:\n$$N_e = \\frac{(0.90) \\times (1.05 \\times 10^{3}\\,\\mathrm{kg\\,m^{-3}}) \\times (8.314\\,\\mathrm{J\\,mol^{-1}\\,K^{-1}}) \\times (463\\,\\mathrm{K})}{(0.104\\,\\mathrm{kg\\,mol^{-1}}) \\times (2.10 \\times 10^{5}\\,\\mathrm{J\\,m^{-3}})}$$\nThe units cancel out, as expected for the dimensionless quantity $N_e$:\n$$\\frac{(\\mathrm{kg\\,m^{-3}}) \\times (\\mathrm{J\\,mol^{-1}\\,K^{-1}}) \\times (\\mathrm{K})}{(\\mathrm{kg\\,mol^{-1}}) \\times (\\mathrm{J\\,m^{-3}})} = 1$$\nWe proceed with the numerical computation:\n$$N_e = \\frac{0.90 \\times 1.05 \\times 10^{3} \\times 8.314 \\times 463}{0.104 \\times 2.10 \\times 10^{5}}$$\n$$N_e = \\frac{3637672.77}{21840}$$\n$$N_e \\approx 166.5601$$\nThe problem requires the final answer to be rounded to three significant figures.\n$$N_e \\approx 167$$\nThis result signifies that, on average, a chain segment consisting of approximately $167$ monomer units behaves as a single elastic strand between entanglement points in this polymer melt under the specified conditions.", "answer": "$$\\boxed{167}$$", "id": "2926125"}, {"introduction": "A central challenge in polymer physics has been to explain why the terminal relaxation time $\\tau_d$ experimentally scales with molecular weight $M$ as $\\tau_d \\propto M^{3.4}$, deviating from the $\\tau_d \\propto M^3$ prediction of classical reptation theory. This exercise delves into the theoretical refinements that resolve this discrepancy, focusing on how Contour Length Fluctuations (CLF) modify the chain's effective escape path. By deriving the new scaling law and working backward from experimental data, you will see how theoretical models are constrained and validated against physical evidence [@problem_id:2926082].", "problem": "A linear, flexible polymer melt in the well-entangled regime is modeled by tube theory with two refinements: contour length fluctuations (CLF) and dynamic dilution (DD). Let the number of entanglements per chain be $Z = M/M_{e}$, where $M$ is the molecular mass and $M_{e}$ is the entanglement molecular mass. The classical reptation prediction for the terminal disengagement time is $\\tau_{\\mathrm{rep}} \\propto \\tau_e Z^3$, where $\\tau_e$ is the entanglement time.\n\nAssume the following foundational modeling elements, which are widely used as the starting point for refined tube models:\n\n- CLF introduces an additional $Z$-dependence in the dimensionless time that controls tube survival. Specifically, the tube survival function $S(t)$ depends on the rescaled time $u$ of the form $u = t/(\\tau_{e} Z^{3+c})$, where $c \\ge 0$ is a CLF exponent that quantifies how end-fluctuation-controlled relaxation introduces a power-law correction to the $Z$-dependence of time.\n- Dynamic dilution is represented at the level of stress relaxation by a double-survival weighting. In a monodisperse melt, the stress relaxation kernel is proportional to $R(t) = S(t)\\,[S(t)]^{\\alpha} = [S(t)]^{1+\\alpha}$, where $\\alpha \\ge 0$ is the dynamic dilution exponent that encodes how the relaxation of surrounding constraints scales with the unrelaxed fraction of the primitive chain.\n\nDefine the terminal disengagement time $\\tau_{d}$ as the time at which the stress relaxation kernel has decayed to $R(\\tau_{d}) = \\exp(-1)$. Starting from the above base assumptions and the definition of $Z$, derive the asymptotic large-$Z$ scaling of $\\tau_{d}$ with $M$ and determine the single exponent $x$ such that $\\tau_{d} \\propto M^{x}$. Then, using experimental evidence that $\\tau_{d} \\propto M^{3.4}$ in this regime, infer the required value of the CLF exponent $c$ that reconciles the observed scaling with tube theory under these assumptions. Express your final result for $c$ as an exact fraction. No rounding is required. The answer is dimensionless and should be given as an exact rational number.", "solution": "The problem statement is scientifically grounded, well-posed, and objective. It represents a standard exercise in theoretical polymer physics concerning reptation theory and its refinements. We shall proceed with the derivation.\n\nThe problem provides the following relationships for a polymer melt in the entangled regime:\n1. The number of entanglements per chain is $Z = M/M_{e}$, where $M$ is the molecular mass and $M_{e}$ is the entanglement molecular mass.\n2. The stress relaxation kernel is given by $R(t) = [S(t)]^{1+\\alpha}$, where $S(t)$ is the tube survival function and $\\alpha \\ge 0$ is the dynamic dilution exponent.\n3. The tube survival function $S(t)$ is a function of a dimensionless rescaled time, $u$. The structure of this rescaled time incorporates the effect of Contour Length Fluctuations (CLF) as $u = t/(\\tau_{e} Z^{3+c})$, where $\\tau_{e}$ is the entanglement time and $c \\ge 0$ is the CLF exponent. Thus, we can write $S(t) = f(t/(\\tau_{e} Z^{3+c}))$ for some universal decaying function $f$.\n4. The terminal disengagement time, $\\tau_{d}$, is defined by the condition $R(\\tau_{d}) = \\exp(-1)$.\n\nOur first objective is to determine the scaling of $\\tau_{d}$ with the molecular mass $M$. We begin by applying the definition of $\\tau_{d}$ to the expression for the stress relaxation kernel $R(t)$:\n$$R(\\tau_{d}) = [S(\\tau_{d})]^{1+\\alpha} = \\exp(-1)$$\nSolving for $S(\\tau_{d})$, we find:\n$$S(\\tau_{d}) = \\left( \\exp(-1) \\right)^{\\frac{1}{1+\\alpha}} = \\exp\\left(-\\frac{1}{1+\\alpha}\\right)$$\nSince $\\alpha$ is a constant exponent, the value $\\exp(-1/(1+\\alpha))$ is a constant. Let us denote this constant by $C$.\n$$S(\\tau_{d}) = C$$\nNow, we substitute the functional form of $S(t)$:\n$$f\\left(\\frac{\\tau_{d}}{\\tau_{e} Z^{3+c}}\\right) = C$$\nThe function $f$ is a universal function for the given polymer chemistry, so its inverse, $f^{-1}$, is also a well-defined function. Applying the inverse function to both sides, we get:\n$$\\frac{\\tau_{d}}{\\tau_{e} Z^{3+c}} = f^{-1}(C)$$\nThe right-hand side, $f^{-1}(C)$, is a constant number, as it depends only on the choice of the function $f$ and the constant exponent $\\alpha$, but not on the molecular mass $M$ or the number of entanglements $Z$. Let us denote this dimensionless constant by $k$.\n$$\\frac{\\tau_{d}}{\\tau_{e} Z^{3+c}} = k$$\nFrom this, we can express the terminal time $\\tau_{d}$ as:\n$$\\tau_{d} = k \\tau_{e} Z^{3+c}$$\nThis equation gives the dependence of $\\tau_{d}$ on $Z$. For a scaling analysis, we are concerned with proportionality, not the exact prefactor. Therefore, we can write the scaling relationship:\n$$\\tau_{d} \\propto Z^{3+c}$$\nHere, we have assumed that $\\tau_{e}$ is a characteristic time of an entanglement segment and does not depend on the total chain length $M$.\n\nThe problem asks for the scaling of $\\tau_{d}$ with the molecular mass $M$. We use the given definition $Z = M/M_{e}$. Substituting this into the scaling relation gives:\n$$\\tau_{d} \\propto \\left(\\frac{M}{M_{e}}\\right)^{3+c}$$\nSince $M_{e}$ is a constant for a given polymer type, it does not affect the scaling with $M$. Thus, we find the scaling law:\n$$\\tau_{d} \\propto M^{3+c}$$\nThe problem defines the scaling exponent as $x$ in the relation $\\tau_{d} \\propto M^{x}$. By comparison, we identify:\n$$x = 3+c$$\nThis completes the first part of the derivation. It is important to note that the dynamic dilution exponent $\\alpha$ affects the prefactor of the scaling law but not the exponent itself.\n\nThe second objective is to determine the value of the CLF exponent $c$ by using the experimentally observed scaling law $\\tau_{d} \\propto M^{3.4}$.\nEquating the theoretical exponent $x$ with the experimental exponent $3.4$, we have:\n$$3+c = 3.4$$\nSolving for $c$ is a trivial algebraic step:\n$$c = 3.4 - 3 = 0.4$$\nThe problem requires the answer to be an exact fraction. We convert the decimal to a fraction:\n$$c = 0.4 = \\frac{4}{10} = \\frac{2}{5}$$\nThis value for $c$ is consistent with theoretical treatments of contour length fluctuations, which typically predict exponents of this order of magnitude. The derivation is self-consistent and directly follows from the provided assumptions.", "answer": "$$\\boxed{\\frac{2}{5}}$$", "id": "2926082"}, {"introduction": "Building on the dynamics of single chains, this final practice explores the more complex and technologically relevant case of polymer blends, where interactions between different chain lengths are crucial. Here, the concept of constraint release is elegantly captured by the 'double reptation' mixing rule, which you will validate through a hands-on computational exercise. This practice will solidify your understanding of how cooperative relaxation phenomena are modeled and demonstrate the theoretical equivalence of different but powerful conceptual frameworks in polymer physics [@problem_id:2926117].", "problem": "Calibrate a coarse-grained slip-spring model to reproduce the plateau shear modulus and validate a constraint release implementation against a double reptation prediction in binary blends of entangled linear polymers. Work from first-principles statistical mechanics and established results of polymer tube theory, without introducing any new phenomenology beyond the definitions and approximations spelled out below.\n\nYou will implement the following, strictly in the order given.\n\n1) Slip-spring calibration to the plateau modulus:\n- Use the following base facts.\n  - The Boltzmann constant is $k_B = 1.380649 \\times 10^{-23}\\ \\mathrm{J/K}$ and the Avogadro constant is $N_A = 6.02214076 \\times 10^{23}\\ \\mathrm{mol^{-1}}$.\n  - The number density of entanglements is $n_e = \\rho N_A / M_e$, where $\\rho$ is the polymer mass density in $\\mathrm{kg/m^3}$ and $M_e$ is the entanglement molecular weight in $\\mathrm{kg/mol}$.\n  - The plateau shear modulus from tube theory is $G_N^0 \\approx c_{\\text{true}} n_e k_B T$ with geometry factor $c_{\\text{true}} = 4/5$, where $T$ is the absolute temperature in $\\mathrm{K}$ and $G_N^0$ is in $\\mathrm{Pa}$.\n  - A slip-spring network with model geometry factor $c_{\\text{model}}$ and a dimensionless slip-spring strength parameter $s$ yields $G_N^0 \\approx c_{\\text{model}} s n_e k_B T$ in the small-strain linear limit.\n- Calibration task: Given $\\rho$, $T$, $M_e$, and $c_{\\text{model}}$, determine $s$ so that $c_{\\text{model}} s n_e k_B T = c_{\\text{true}} n_e k_B T$. Express $s$ as a dimensionless float.\n\n2) Single-chain tube survival with contour length fluctuations:\n- Use the following base facts.\n  - The reptation time scales as $\\tau_{\\mathrm{rep},i} = \\tau_e Z_i^3$, where $\\tau_e$ is the entanglement time in $\\mathrm{s}$ and $Z_i$ is the number of entanglements on a chain of species $i$.\n  - A widely used approximation including contour length fluctuations is to model the single-chain tube survival (without constraint release) by\n    $$m_i(t) = \\exp\\!\\left(-\\frac{t}{\\tau_{\\mathrm{rep},i}} - \\gamma \\sqrt{\\frac{t}{\\tau_e Z_i}}\\right),$$\n    where $\\gamma$ is a dimensionless amplitude and $t$ is time in $\\mathrm{s}$.\n\n3) Analytic double reptation prediction for a binary blend:\n- Consider a binary blend with volume fractions $\\phi_A$ and $\\phi_B = 1 - \\phi_A$ of species $A$ and $B$.\n- Under the independence of constraint survival at both ends of an entanglement, the stress relaxation modulus is\n  $$G_{\\mathrm{DR}}(t) = G_N^0 \\left[\\phi_A m_A(t) + \\phi_B m_B(t)\\right]^2.$$\n- You must implement this expression, where $G_N^0$ is the calibrated plateau modulus from step 1.\n\n4) Constraint release implementation to be validated:\n- Model constraint release by superposing hazard rates for the chain and its environment. Let the single-chain hazard be $h_i^0(t) = -\\frac{d}{dt}\\ln m_i(t)$. Define the environmental survival as\n  $$m_{\\mathrm{env}}(t) = \\phi_A m_A(t) + \\phi_B m_B(t),$$\n  with environmental hazard $h_{\\mathrm{env}}^0(t) = -\\frac{d}{dt}\\ln m_{\\mathrm{env}}(t)$.\n- The implemented survival including constraint release is\n  $$\\mu_i(t) = \\exp\\!\\left(-\\int_0^t \\left[h_i^0(t') + h_{\\mathrm{env}}^0(t')\\right] dt'\\right).$$\n- Show, by explicit construction, that this implementation yields $\\mu_i(t) = m_i(t)\\, m_{\\mathrm{env}}(t)$ when $h_i^0$ and $h_{\\mathrm{env}}^0$ are derived from $m_i$ and $m_{\\mathrm{env}}$ as defined above.\n- The simulated viscoelastic response is then\n  $$G_{\\mathrm{sim}}(t) = G_N^0 \\left[\\phi_A \\mu_A(t) + \\phi_B \\mu_B(t)\\right].$$\n\n5) Validation metric:\n- On a uniform time grid $t_k$ with $k=0,\\dots,N-1$ over $[0, t_{\\max}]$, compute the root-mean-square relative error between $G_{\\mathrm{sim}}(t)$ and $G_{\\mathrm{DR}}(t)$ as\n  $$\\varepsilon = \\sqrt{\\frac{\\sum_{k=0}^{N-1} \\left(G_{\\mathrm{sim}}(t_k) - G_{\\mathrm{DR}}(t_k)\\right)^2}{\\sum_{k=0}^{N-1} \\left(G_{\\mathrm{DR}}(t_k)\\right)^2}}.$$\n- Use $N=1024$ and $t_{\\max} = 2 \\max(\\tau_{\\mathrm{rep},A}, \\tau_{\\mathrm{rep},B})$. All times are in $\\mathrm{s}$, and moduli in $\\mathrm{Pa}$.\n\nTest suite and numerical specifications:\nImplement your program to process the following three test cases, each yielding one pair of outputs: the calibrated slip-spring strength $s$ (dimensionless) and the error metric $\\varepsilon$ (dimensionless).\n- Case 1:\n  - Slip-spring calibration inputs: $\\rho = 900\\ \\mathrm{kg/m^3}$, $T = 450\\ \\mathrm{K}$, $M_e = 0.005\\ \\mathrm{kg/mol}$, $c_{\\text{model}} = 0.7$.\n  - Blend: $\\phi_A = 0.5$, $Z_A = 20$, $Z_B = 40$, $\\tau_e = 1.0 \\times 10^{-4}\\ \\mathrm{s}$, $\\gamma = 1.2$.\n- Case 2 (boundary, single-component):\n  - Slip-spring calibration inputs: $\\rho = 950\\ \\mathrm{kg/m^3}$, $T = 500\\ \\mathrm{K}$, $M_e = 0.0035\\ \\mathrm{kg/mol}$, $c_{\\text{model}} = 0.8$.\n  - Blend: $\\phi_A = 1.0$, $Z_A = 50$, $Z_B = 1$ (unused because $\\phi_B = 0$), $\\tau_e = 5.0 \\times 10^{-5}\\ \\mathrm{s}$, $\\gamma = 1.0$.\n- Case 3 (highly asymmetric and highly polydisperse):\n  - Slip-spring calibration inputs: $\\rho = 920\\ \\mathrm{kg/m^3}$, $T = 430\\ \\mathrm{K}$, $M_e = 0.006\\ \\mathrm{kg/mol}$, $c_{\\text{model}} = 0.9$.\n  - Blend: $\\phi_A = 0.1$, $Z_A = 10$, $Z_B = 100$, $\\tau_e = 2.0 \\times 10^{-5}\\ \\mathrm{s}$, $\\gamma = 1.4$.\n\nRequired outputs and formatting:\n- For each case, compute $s$ and $\\varepsilon$ as defined above.\n- Your program should produce a single line of output containing a comma-separated list of three items, one per test case, each item being a two-element list in the order $[s,\\varepsilon]$. For example: [[s_case1,err_case1],[s_case2,err_case2],[s_case3,err_case3]].\n- All moduli must be internally handled in $\\mathrm{Pa}$, all times in $\\mathrm{s}$; the output is dimensionless, so report $s$ and $\\varepsilon$ as floats with full precision of the computation.", "solution": "The problem as stated is a valid exercise in theoretical and computational polymer physics. It is well-posed, scientifically grounded in established reptation theory, and all terms are defined with sufficient precision to permit a unique solution. The core of the problem is to demonstrate and numerically verify a specific equivalence between the double reptation mixing rule and a constraint release model based on the superposition of hazard rates.\n\nThe solution proceeds by following the five specified tasks in order.\n\n**1. Slip-spring Calibration**\n\nThe problem requires calibrating a dimensionless slip-spring strength parameter, $s$, such that the plateau shear modulus, $G_N^0$, from a coarse-grained model matches the prediction from tube theory.\n\nThe tube theory gives the plateau modulus as:\n$$G_N^0 = c_{\\text{true}} n_e k_B T$$\nwhere $c_{\\text{true}} = 4/5$ is a geometric prefactor, $n_e$ is the number density of entanglements, $k_B$ is the Boltzmann constant, and $T$ is the absolute temperature.\n\nThe slip-spring model gives the modulus as:\n$$G_N^0 = c_{\\text{model}} s n_e k_B T$$\nwhere $c_{\\text{model}}$ is the model's geometric factor and $s$ is the strength parameter to be determined.\n\nTo calibrate the model, one must equate these two expressions:\n$$c_{\\text{model}} s n_e k_B T = c_{\\text{true}} n_e k_B T$$\nThe terms $n_e k_B T$ are non-zero and cancel, leaving a simple relation for $s$:\n$$c_{\\text{model}} s = c_{\\text{true}}$$\n$$s = \\frac{c_{\\text{true}}}{c_{\\text{model}}}$$\nSubstituting the given value $c_{\\text{true}} = 4/5 = 0.8$, we obtain the calibration formula:\n$$s = \\frac{0.8}{c_{\\text{model}}}$$\nThis formula will be used to compute $s$ for each test case.\n\nThe full expression for the plateau modulus is $G_N^0 = (4/5) n_e k_B T = (4/5) \\frac{\\rho N_A}{M_e} k_B T$, which will be computed for use in subsequent steps.\n\n**2-4. Equivalence of Double Reptation and the Specified Constraint Release Model**\n\nThe central task is to validate a specific implementation of constraint release against the analytical double reptation model. This validation is not merely numerical but can be demonstrated analytically.\n\nFirst, let us state the definitions.\nThe single-chain tube survival probability for chain species $i \\in \\{A, B\\}$, neglecting constraint release, is given by:\n$$m_i(t) = \\exp\\!\\left(-\\frac{t}{\\tau_{\\mathrm{rep},i}} - \\gamma \\sqrt{\\frac{t}{\\tau_e Z_i}}\\right)$$\nThe double reptation (DR) model for the stress relaxation modulus of a binary blend is:\n$$G_{\\mathrm{DR}}(t) = G_N^0 \\left[\\phi_A m_A(t) + \\phi_B m_B(t)\\right]^2$$\n\nThe proposed constraint release (CR) model to be validated is constructed as follows. The total hazard rate for a chain of species $i$ is the sum of its intrinsic hazard rate, $h_i^0(t)$, and an environmental hazard rate, $h_{\\mathrm{env}}^0(t)$.\nThe intrinsic hazard rate is defined from the single-chain survival function:\n$$h_i^0(t) = -\\frac{d}{dt}\\ln m_i(t)$$\nThe environmental survival is defined as the volume-averaged survival of all chains in the blend:\n$$m_{\\mathrm{env}}(t) = \\phi_A m_A(t) + \\phi_B m_B(t)$$\nThe environmental hazard rate is derived from this:\n$$h_{\\mathrm{env}}^0(t) = -\\frac{d}{dt}\\ln m_{\\mathrm{env}}(t)$$\nThe final survival probability for chain $i$ including CR, $\\mu_i(t)$, is then given by the superposition of these independent hazards:\n$$\\mu_i(t) = \\exp\\!\\left(-\\int_0^t \\left[h_i^0(t') + h_{\\mathrm{env}}^0(t')\\right] dt'\\right)$$\nThe problem requires proving that this formulation leads to $\\mu_i(t) = m_i(t) m_{\\mathrm{env}}(t)$. Let us perform this derivation.\n\nThe integral in the exponent can be separated:\n$$\\int_0^t \\left[h_i^0(t') + h_{\\mathrm{env}}^0(t')\\right] dt' = \\int_0^t h_i^0(t') dt' + \\int_0^t h_{\\mathrm{env}}^0(t') dt'$$\nUsing the fundamental theorem of calculus and the definitions of the hazard rates:\n$$\\int_0^t h_i^0(t') dt' = \\int_0^t \\left(-\\frac{d}{dt'}\\ln m_i(t')\\right) dt' = -[\\ln m_i(t')]_0^t = -(\\ln m_i(t) - \\ln m_i(0))$$\nSince $m_i(0)=1$, we have $\\ln m_i(0)=0$. Thus, the integral evaluates to $-\\ln m_i(t)$.\nBy identical logic:\n$$\\int_0^t h_{\\mathrm{env}}^0(t') dt' = - \\ln m_{\\mathrm{env}}(t)$$\nSubstituting these back into the expression for $\\mu_i(t)$:\n$$\\mu_i(t) = \\exp\\!\\left(-\\left[-\\ln m_i(t) - \\ln m_{\\mathrm{env}}(t)\\right]\\right) = \\exp\\!\\left(\\ln m_i(t) + \\ln m_{\\mathrm{env}}(t)\\right)$$\nUsing the property $\\ln x + \\ln y = \\ln(xy)$:\n$$\\mu_i(t) = \\exp(\\ln(m_i(t) m_{\\mathrm{env}}(t))) = m_i(t) m_{\\mathrm{env}}(t)$$\nThis completes the required demonstration.\n\nNow, we evaluate the simulated modulus, $G_{\\mathrm{sim}}(t)$, which is defined as:\n$$G_{\\mathrm{sim}}(t) = G_N^0 \\left[\\phi_A \\mu_A(t) + \\phi_B \\mu_B(t)\\right]$$\nSubstituting the derived expression for $\\mu_i(t)$:\n$$G_{\\mathrm{sim}}(t) = G_N^0 \\left[\\phi_A (m_A(t) m_{\\mathrm{env}}(t)) + \\phi_B (m_B(t) m_{\\mathrm{env}}(t))\\right]$$\nFactoring out the common term $m_{\\mathrm{env}}(t)$:\n$$G_{\\mathrm{sim}}(t) = G_N^0 \\left[ (\\phi_A m_A(t) + \\phi_B m_B(t)) \\cdot m_{\\mathrm{env}}(t) \\right]$$\nBy its definition, the term in parentheses is precisely $m_{\\mathrm{env}}(t)$. Therefore:\n$$G_{\\mathrm{sim}}(t) = G_N^0 \\left[ m_{\\mathrm{env}}(t) \\cdot m_{\\mathrm{env}}(t) \\right] = G_N^0 (m_{\\mathrm{env}}(t))^2$$\nFinally, substituting the definition of $m_{\\mathrm{env}}(t)$ back into this equation:\n$$G_{\\mathrm{sim}}(t) = G_N^0 \\left[\\phi_A m_A(t) + \\phi_B m_B(t)\\right]^2$$\nThis expression is identical to the expression for $G_{\\mathrm{DR}}(t)$.\n$$G_{\\mathrm{sim}}(t) \\equiv G_{\\mathrm{DR}}(t)$$\nThe analytical proof is complete. The two models are mathematically equivalent under the given set of definitions.\n\n**5. Validation Metric**\n\nThe validation metric $\\varepsilon$ is the root-mean-square relative error between $G_{\\mathrm{sim}}(t)$ and $G_{\\mathrm{DR}}(t)$:\n$$\\varepsilon = \\sqrt{\\frac{\\sum_{k=0}^{N-1} \\left(G_{\\mathrm{sim}}(t_k) - G_{\\mathrm{DR}}(t_k)\\right)^2}{\\sum_{k=0}^{N-1} \\left(G_{\\mathrm{DR}}(t_k)\\right)^2}}$$\nSince we have proven that $G_{\\mathrm{sim}}(t) \\equiv G_{\\mathrm{DR}}(t)$, the numerator of this expression, which is the sum of squared differences, must be identically zero for all $t_k$. Consequently, the theoretical value of the error is $\\varepsilon = 0$.\n\nThe numerical calculation serves as a verification of the correctness of the code implementation. Any non-zero result for $\\varepsilon$ will be attributable solely to floating-point precision errors in the computation.\n\nThe numerical procedure will be implemented as follows:\n- For each test case, the parameter $s$ is calculated using $s = 0.8/c_{\\text{model}}$.\n- The necessary physical parameters ($\\tau_{\\mathrm{rep},A}$, $\\tau_{\\mathrm{rep},B}$, $t_{\\max}$, $G_N^0$) are computed.\n- A uniform time grid of $N=1024$ points is generated from $t=0$ to $t=t_{\\max}$.\n- The functions $m_A(t)$ and $m_B(t)$ are computed over this grid.\n- $G_{\\mathrm{DR}}(t)$ is computed using its definition.\n- $G_{\\mathrm{sim}}(t)$ is computed by first calculating $m_{\\mathrm{env}}(t)$, then $\\mu_A(t)$ and $\\mu_B(t)$, and finally combining them according to the given linear mixing rule. This explicit construction validates the implementation itself.\n- The error metric $\\varepsilon$ is computed using the provided formula, which is equivalent to the ratio of the Euclidean norms of the difference vector and the reference vector: $\\varepsilon = ||G_{\\mathrm{sim}} - G_{\\mathrm{DR}}||_2 / ||G_{\\mathrm{DR}}||_2$. The result is expected to be on the order of machine epsilon.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the polymer reptation theory problem for three test cases.\n\n    This function implements the models and calculations described in the problem statement\n    to find the slip-spring strength 's' and the validation error 'epsilon' for each case.\n    \"\"\"\n    # Define physical constants from the problem statement\n    K_B = 1.380649e-23  # J/K\n    N_A = 6.02214076e23 # 1/mol\n\n    # Define test cases as per the problem statement\n    test_cases = [\n        {\n            \"cal_inputs\": {\"rho\": 900.0, \"T\": 450.0, \"Me\": 0.005, \"c_model\": 0.7},\n            \"blend_inputs\": {\"phi_A\": 0.5, \"Z_A\": 20.0, \"Z_B\": 40.0, \"tau_e\": 1.0e-4, \"gamma\": 1.2},\n        },\n        {\n            \"cal_inputs\": {\"rho\": 950.0, \"T\": 500.0, \"Me\": 0.0035, \"c_model\": 0.8},\n            \"blend_inputs\": {\"phi_A\": 1.0, \"Z_A\": 50.0, \"Z_B\": 1.0, \"tau_e\": 5.0e-5, \"gamma\": 1.0},\n        },\n        {\n            \"cal_inputs\": {\"rho\": 920.0, \"T\": 430.0, \"Me\": 0.006, \"c_model\": 0.9},\n            \"blend_inputs\": {\"phi_A\": 0.1, \"Z_A\": 10.0, \"Z_B\": 100.0, \"tau_e\": 2.0e-5, \"gamma\": 1.4},\n        }\n    ]\n\n    results = []\n\n    for case in test_cases:\n        cal_inputs = case[\"cal_inputs\"]\n        blend_inputs = case[\"blend_inputs\"]\n\n        # 1) Slip-spring calibration to the plateau modulus\n        c_true = 4.0 / 5.0\n        s = c_true / cal_inputs[\"c_model\"]\n\n        # Calculate plateau modulus G_N^0 for use in dynamic calculations\n        n_e = cal_inputs[\"rho\"] * N_A / cal_inputs[\"Me\"]\n        G_N0 = c_true * n_e * K_B * cal_inputs[\"T\"]\n\n        # Extract blend parameters\n        phi_A = blend_inputs[\"phi_A\"]\n        phi_B = 1.0 - phi_A\n        Z_A = blend_inputs[\"Z_A\"]\n        Z_B = blend_inputs[\"Z_B\"]\n        tau_e = blend_inputs[\"tau_e\"]\n        gamma = blend_inputs[\"gamma\"]\n\n        # Calculate reptation times\n        tau_rep_A = tau_e * Z_A**3\n        tau_rep_B = tau_e * Z_B**3\n\n        # 5) Setup for validation metric\n        N = 1024\n        t_max = 2.0 * max(tau_rep_A, tau_rep_B)\n        t = np.linspace(0, t_max, N)\n        \n        # Handle t=0 case for sqrt(t) to avoid division by zero if not handled by numpy\n        # In this form, exp(-inf) is 0, which is correct for t=0. Let's compute.\n        # m_i(0) = exp(0 - 0) = 1, so the formula is safe at t=0.\n\n        # 2) Single-chain tube survival with contour length fluctuations\n        # Use np.sqrt(t, out=...) to avoid issues with t=0, although modern numpy handles it.\n        sqrt_t = np.sqrt(t)\n        m_A_t = np.exp(-t / tau_rep_A - gamma * sqrt_t / np.sqrt(tau_e * Z_A))\n        m_B_t = np.exp(-t / tau_rep_B - gamma * sqrt_t / np.sqrt(tau_e * Z_B))\n\n        # 3) Analytic double reptation prediction\n        G_DR_t = G_N0 * (phi_A * m_A_t + phi_B * m_B_t)**2\n\n        # 4) Constraint release implementation to be validated\n        # This part explicitly follows the construction steps to test the implementation.\n        m_env_t = phi_A * m_A_t + phi_B * m_B_t\n        mu_A_t = m_A_t * m_env_t\n        mu_B_t = m_B_t * m_env_t\n        G_sim_t = G_N0 * (phi_A * mu_A_t + phi_B * mu_B_t)\n\n        # 5) Validation metric calculation\n        # Use np.linalg.norm for a robust calculation of the sum of squares.\n        # The denominator can be zero only if all G_DR(t_k) are zero,\n        # which is not the case here as G_DR(0) = G_N0 != 0\n        numerator = np.linalg.norm(G_sim_t - G_DR_t)\n        denominator = np.linalg.norm(G_DR_t)\n        \n        if denominator == 0:\n            epsilon = 0.0 if numerator == 0.0 else np.inf\n        else:\n            epsilon = numerator / denominator\n\n        results.append([s, epsilon])\n\n    # Final print statement in the exact required format.\n    # The default str() for a list includes spaces, e.g., '[1.0, 2.0]'.\n    # This matches the behavior implied by the provided print format string.\n    formatted_results = \",\".join(map(str, results))\n    print(f\"[{formatted_results}]\")\n\nsolve()\n```", "id": "2926117"}]}