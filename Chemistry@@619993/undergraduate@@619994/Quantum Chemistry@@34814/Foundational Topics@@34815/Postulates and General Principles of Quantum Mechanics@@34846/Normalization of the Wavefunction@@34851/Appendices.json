{"hands_on_practices": [{"introduction": "This first exercise provides a direct application of the normalization principle for a particle confined to a finite region. By working with a trial polynomial wavefunction in a one-dimensional \"box,\" you will practice the fundamental skill of setting up and evaluating the normalization integral, $\\int |\\psi(x)|^2 dx = 1$. This type of problem [@problem_id:1384221] is a cornerstone for understanding how boundary conditions define the mathematical constraints on physically acceptable wavefunctions.", "problem": "A quantum particle is described by a trial wavefunction in a one-dimensional system. The particle is strictly confined to the region $-a \\le x \\le a$, where $a$ is a positive real constant with units of length. Outside this region, the wavefunction is zero. Within this region, the wavefunction is given by:\n$$\n\\psi(x) = N(x^2 - a^2)\n$$\nwhere $N$ is a real, positive normalization constant. Determine the expression for $N$ in terms of the parameter $a$.", "solution": "The normalization condition for a wavefunction $\\psi(x)$ requires that the total probability of finding the particle somewhere in space is equal to 1. Mathematically, this is expressed as:\n$$\n\\int_{-\\infty}^{\\infty} |\\psi(x)|^2 dx = 1\n$$\nSince the particle is confined to the region $-a \\le x \\le a$, the wavefunction is zero outside this interval. Therefore, the integral limits can be changed from $(-\\infty, \\infty)$ to $(-a, a)$.\n$$\n\\int_{-a}^{a} |\\psi(x)|^2 dx = 1\n$$\nThe given wavefunction is $\\psi(x) = N(x^2 - a^2)$. Since $N$, $x$, and $a$ are all real quantities, the squared magnitude of the wavefunction is simply its square:\n$$\n|\\psi(x)|^2 = \\psi(x)^2 = [N(x^2 - a^2)]^2 = N^2(x^2 - a^2)^2\n$$\nSubstituting this into the normalization integral gives:\n$$\n\\int_{-a}^{a} N^2(x^2 - a^2)^2 dx = 1\n$$\nSince $N$ is a constant, we can pull $N^2$ out of the integral:\n$$\nN^2 \\int_{-a}^{a} (x^2 - a^2)^2 dx = 1\n$$\nTo solve the integral, we first expand the integrand:\n$$\n(x^2 - a^2)^2 = (x^2)^2 - 2(x^2)(a^2) + (a^2)^2 = x^4 - 2a^2x^2 + a^4\n$$\nNow we perform the integration:\n$$\n\\int_{-a}^{a} (x^4 - 2a^2x^2 + a^4) dx\n$$\nThe integrand $f(x) = x^4 - 2a^2x^2 + a^4$ is an even function because all powers of $x$ are even. For any even function, $\\int_{-L}^{L} f(x) dx = 2 \\int_{0}^{L} f(x) dx$. Applying this property simplifies the evaluation of the limits:\n$$\n\\int_{-a}^{a} (x^4 - 2a^2x^2 + a^4) dx = 2 \\int_{0}^{a} (x^4 - 2a^2x^2 + a^4) dx\n$$\nNow, we find the antiderivative:\n$$\n2 \\left[ \\frac{x^5}{5} - 2a^2 \\frac{x^3}{3} + a^4 x \\right]_{0}^{a}\n$$\nEvaluate at the upper limit $x=a$ and the lower limit $x=0$:\n$$\n= 2 \\left( \\left( \\frac{a^5}{5} - \\frac{2a^2(a^3)}{3} + a^4(a) \\right) - \\left( 0 \\right) \\right)\n$$\n$$\n= 2 \\left( \\frac{a^5}{5} - \\frac{2a^5}{3} + a^5 \\right)\n$$\nFactor out $a^5$ and find a common denominator for the fractions:\n$$\n= 2a^5 \\left( \\frac{1}{5} - \\frac{2}{3} + 1 \\right) = 2a^5 \\left( \\frac{3}{15} - \\frac{10}{15} + \\frac{15}{15} \\right)\n$$\n$$\n= 2a^5 \\left( \\frac{3 - 10 + 15}{15} \\right) = 2a^5 \\left( \\frac{8}{15} \\right) = \\frac{16a^5}{15}\n$$\nNow we substitute this result back into the normalization equation:\n$$\nN^2 \\left( \\frac{16a^5}{15} \\right) = 1\n$$\nSolving for $N^2$:\n$$\nN^2 = \\frac{15}{16a^5}\n$$\nFinally, we take the square root to find $N$. As stated in the problem, we take the positive real root:\n$$\nN = \\sqrt{\\frac{15}{16a^5}} = \\frac{\\sqrt{15}}{\\sqrt{16}\\sqrt{a^5}} = \\frac{\\sqrt{15}}{4a^{\\frac{5}{2}}}\n$$", "answer": "$$\n\\boxed{\\frac{\\sqrt{15}}{4a^{\\frac{5}{2}}}}\n$$", "id": "1384221"}, {"introduction": "Moving from direct calculation to a more conceptual problem, this practice explores how a wavefunction's normalization is affected by coordinate transformations. You will determine how the normalization constant must change when a system is \"stretched,\" without needing to know the specific functional form of the original wavefunction. This exercise [@problem_id:1384247] sharpens your understanding that normalization is a dynamic requirement that preserves the probabilistic interpretation of $\\psi(x)$ under physical changes to the system.", "problem": "Consider a one-dimensional quantum system, such as a simplified model for an electron confined along the axis of a linear molecule of length $L$. The state of the electron is described by a real-valued wavefunction $\\psi_0(x)$ which is defined on the interval $0 \\le x \\le L$ and is normalized to unity.\n\nNow, imagine an experimental technique allows us to uniformly stretch the molecule to a new length of $2L$. A theoretical model suggests that the new wavefunction, $\\psi'(x)$, on the expanded interval $0 \\le x \\le 2L$, is proportional to the original wavefunction evaluated at a rescaled coordinate. Specifically, the new wavefunction has the form $\\psi'(x) = N \\psi_0(x/2)$, where $N$ is a positive, real normalization constant.\n\nAssuming the original wavefunction $\\psi_0(x)$ was correctly normalized over its interval $[0, L]$, determine the value of the new normalization constant $N$ that ensures $\\psi'(x)$ is also normalized to unity over its new interval $[0, 2L]$. Express your answer as an analytic expression.", "solution": "The normalization condition for the original wavefunction is \n$$\\int_{0}^{L}|\\psi_{0}(x)|^{2}\\,dx=1.$$\nThe new wavefunction is given by $\\psi'(x)=N\\psi_{0}(x/2)$ on $[0,2L]$. To enforce normalization of $\\psi'(x)$, require\n$$\\int_{0}^{2L}|\\psi'(x)|^{2}\\,dx=\\int_{0}^{2L}N^{2}\\left|\\psi_{0}\\!\\left(\\frac{x}{2}\\right)\\right|^{2}dx=1.$$\nMake the change of variables $u=x/2$, so that $x=2u$, $dx=2\\,du$, and as $x$ runs from $0$ to $2L$, $u$ runs from $0$ to $L$. Then\n$$\\int_{0}^{2L}N^{2}\\left|\\psi_{0}\\!\\left(\\frac{x}{2}\\right)\\right|^{2}dx=N^{2}\\int_{0}^{L}2\\,|\\psi_{0}(u)|^{2}\\,du=2N^{2}\\int_{0}^{L}|\\psi_{0}(u)|^{2}\\,du.$$\nUsing the original normalization, this becomes\n$$2N^{2}\\cdot 1=1,$$\nwhich yields\n$$N=\\frac{1}{\\sqrt{2}}.$$\nSince $N$ is specified to be positive and real, we take the positive root.", "answer": "$$\\boxed{\\frac{1}{\\sqrt{2}}}$$", "id": "1384247"}, {"introduction": "This final practice bridges the gap between analytical theory and computational chemistry, where wavefunctions are often handled numerically. You are tasked with developing a robust algorithm to normalize a Gaussian function by adaptively choosing the integration domain and grid resolution to control error. This advanced problem [@problem_id:2467293] provides hands-on experience with the practical challenges of numerical integration, a critical skill for understanding and implementing modern computational chemistry methods.", "problem": "A one-dimensional, real wavefunction is given by $\\psi(x)=\\exp(-\\alpha x^2)$ with parameter $\\alpha>0$. In quantum mechanics and computational chemistry, a physically acceptable wavefunction must be normalized so that the total probability is $1$. The normalization condition requires a constant $C(\\alpha)$ such that the normalized wavefunction $\\phi(x)=C(\\alpha)\\psi(x)$ satisfies\n$$\n\\int_{-\\infty}^{\\infty}\\lvert \\phi(x)\\rvert^2\\,dx = 1.\n$$\nA colleague wrote a Python script that attempts to compute $C(\\alpha)$ using a composite trapezoidal rule on a fixed interval $\\left[-L,L\\right]$ with a fixed number of grid points $N$. The script fails for very broad Gaussians (small $\\alpha$) and very narrow Gaussians (large $\\alpha$) because the finite domain truncation and the grid resolution were not adapted to the shape of $\\lvert \\psi(x)\\rvert^2$.\n\nStarting only from the normalization requirement and the definition of probability in the Born interpretation, your task is to implement a corrected algorithm that:\n- Chooses a finite interval $\\left[-L,L\\right]$ so that the probability mass of $\\lvert \\psi(x)\\rvert^2$ outside this interval is at most a user-specified tolerance $\\varepsilon$, that is,\n$$\n\\int_{\\lvert x\\rvert>L} \\lvert \\psi(x)\\rvert^2\\,dx \\le \\varepsilon.\n$$\nYou may use the complementary error function $\\mathrm{erfc}$ and its inverse $\\mathrm{erfc}^{-1}$ if needed, but do not assume any pre-derived shortcut formulas for $L$ without justification.\n- Chooses a uniform grid on $\\left[-L,L\\right]$ with spacing $\\Delta x$ small enough to resolve the characteristic length scale of $\\lvert \\psi(x)\\rvert^2$; for a Gaussian, a characteristic width can be expressed in terms of $\\alpha$. Use a composite Simpson rule on this grid to approximate required integrals and ensure the number of subintervals is even.\n- Computes the numeric normalization constant $C(\\alpha)$ via the definition\n$$\nC(\\alpha)=\\left( \\int_{-\\infty}^{\\infty} \\lvert \\psi(x)\\rvert^2\\,dx \\right)^{-1/2},\n$$\nusing your finite-interval, discretized approximation.\n- Verifies the normalization by evaluating\n$$\nI(\\alpha)=\\int_{-\\infty}^{\\infty} \\lvert C(\\alpha)\\psi(x)\\rvert^2\\,dx\n$$\nwith the same numerical scheme, and reports the absolute deviation $\\delta(\\alpha)=\\lvert I(\\alpha)-1\\rvert$.\n\nAll quantities in this problem are dimensionless.\n\nYour program must implement the above algorithm and run it on the following test suite of $(\\alpha,\\varepsilon)$ pairs:\n1. $(\\alpha,\\varepsilon)=(1.0, 10^{-12})$,\n2. $(\\alpha,\\varepsilon)=(0.1, 10^{-12})$,\n3. $(\\alpha,\\varepsilon)=(5.0, 10^{-12})$,\n4. $(\\alpha,\\varepsilon)=(10^{-3}, 10^{-9})$,\n5. $(\\alpha,\\varepsilon)=(50.0, 10^{-12})$.\n\nFor each test case, compute the single float $\\delta(\\alpha)$ as defined above.\n\nFinal output format: Your program should produce a single line of output containing the list of results as a comma-separated list enclosed in square brackets, with each float formatted in scientific notation with $12$ significant digits after the decimal point (for example, $\\texttt{[1.234000000000e-12,2.000000000000e-10]}$).", "solution": "The problem statement has been examined and is determined to be valid. It is scientifically grounded in the principles of quantum mechanics, specifically the Born interpretation of the wavefunction. The formulation is mathematically well-posed, objective, and provides sufficient information to construct a unique and meaningful numerical solution. The task is to design and implement a robust numerical algorithm for the normalization of a Gaussian wavefunction, a standard procedure in computational chemistry.\n\nThe core of the problem lies in the accurate numerical evaluation of the integral $S(\\alpha) = \\int_{-\\infty}^{\\infty} |\\psi(x)|^2 \\,dx$, where the un-normalized wavefunction is given as $\\psi(x) = \\exp(-\\alpha x^2)$ for some parameter $\\alpha > 0$. The squared modulus is $|\\psi(x)|^2 = \\exp(-2\\alpha x^2)$. The normalization constant is then defined as $C(\\alpha) = [S(\\alpha)]^{-1/2}$.\n\nA numerical approach must address two primary sources of error:\n1.  **Truncation Error**: The integral over an infinite domain $(-\\infty, \\infty)$ must be approximated by an integral over a finite domain $[-L, L]$.\n2.  **Discretization Error**: The integral over $[-L, L]$ must be approximated by a finite sum, in this case using the composite Simpson's rule on a grid of points.\n\nThe provided algorithm failed because it used a fixed domain $[-L, L]$ and a fixed number of grid points $N$, failing to adapt to the changing width of the function $\\exp(-2\\alpha x^2)$ as $\\alpha$ varies. A correct algorithm must determine $L$ and the grid spacing $\\Delta x$ adaptively based on $\\alpha$ and a specified error tolerance $\\varepsilon$.\n\n**1. Determination of the Integration Domain $[-L, L]$**\n\nThe problem requires selecting $L$ such that the \"probability mass of $|\\psi(x)|^2$ outside this interval is at most\" $\\varepsilon$. The term \"probability mass\" implies a normalized probability distribution. Therefore, the condition is interpreted not on the un-normalized integral $\\int_{|x|>L} \\exp(-2\\alpha x^2) dx$, but on the true probability distribution $p(x) = |C(\\alpha)\\psi(x)|^2$. The condition is:\n$$\n\\int_{|x|>L} |C(\\alpha)\\psi(x)|^2 \\,dx \\le \\varepsilon\n$$\nSince $\\int_{-\\infty}^{\\infty} |C(\\alpha)\\psi(x)|^2 \\,dx = 1$, this is equivalent to a condition on the relative truncated mass of the un-normalized function:\n$$\n\\frac{\\int_{|x|>L} \\exp(-2\\alpha x^2) \\,dx}{\\int_{-\\infty}^{\\infty} \\exp(-2\\alpha x^2) \\,dx} \\le \\varepsilon\n$$\nBy symmetry, the integral in the numerator is $2\\int_L^{\\infty} \\exp(-2\\alpha x^2) \\,dx$. We perform a change of variables $u = \\sqrt{2\\alpha}x$, so $dx = du/\\sqrt{2\\alpha}$. The condition becomes:\n$$\n\\frac{2 \\int_{\\sqrt{2\\alpha}L}^{\\infty} \\exp(-u^2) \\frac{du}{\\sqrt{2\\alpha}}}{2 \\int_{0}^{\\infty} \\exp(-u^2) \\frac{du}{\\sqrt{2\\alpha}}} \\le \\varepsilon \\implies \\frac{\\int_{\\sqrt{2\\alpha}L}^{\\infty} \\exp(-u^2) \\,du}{\\int_{0}^{\\infty} \\exp(-u^2) \\,du} \\le \\varepsilon\n$$\nThe expression is related to the complementary error function, $\\mathrm{erfc}(z) = \\frac{2}{\\sqrt{\\pi}} \\int_z^{\\infty} \\exp(-t^2) \\,dt$. The condition simplifies to:\n$$\n\\mathrm{erfc}(\\sqrt{2\\alpha}L) \\le \\varepsilon\n$$\nTo find the minimum required $L$ that satisfies this, we use the inverse complementary error function, $\\mathrm{erfc}^{-1}$:\n$$\n\\sqrt{2\\alpha}L \\ge \\mathrm{erfc}^{-1}(\\varepsilon) \\implies L(\\alpha, \\varepsilon) = \\frac{\\mathrm{erfc}^{-1}(\\varepsilon)}{\\sqrt{2\\alpha}}\n$$\nThis formula shows that $L$ correctly scales as $1/\\sqrt{\\alpha}$, becoming larger for broader Gaussians (small $\\alpha$) and smaller for narrower Gaussians (large $\\alpha$).\n\n**2. Determination of the Grid Resolution $\\Delta x$**\n\nThe function we are integrating, $f(x) = \\exp(-2\\alpha x^2)$, is a Gaussian. Its characteristic shape is defined by a width parameter. The corresponding probability density function $p(x) \\propto \\exp(-x^2/(2\\sigma^2))$ has a standard deviation $\\sigma$. By comparing exponents, $x^2/(2\\sigma^2) = 2\\alpha x^2$, we identify the characteristic width as $\\sigma = 1/(2\\sqrt{\\alpha})$.\n\nTo maintain accuracy, the grid spacing $\\Delta x$ must be a fraction of this width, i.e., $\\Delta x \\propto \\sigma$. The error of the composite Simpson's rule depends on $(\\Delta x)^4$ and the fourth derivative of the integrand. A rigorous error analysis shows that to make the discretization error comparable to the truncation tolerance $\\varepsilon$, the number of grid points per characteristic width $\\sigma$ must be chosen carefully. The required number of points per $\\sigma$, which we denote $N_{pts/\\sigma}$, can be shown to scale as $(\\mathrm{erfc}^{-1}(\\varepsilon)/\\varepsilon)^{1/4}$. We adopt this principled approach to determine the grid resolution adaptively.\nThe target grid spacing is set as $\\Delta x = \\sigma / N_{pts/\\sigma}$. The total number of subintervals on $[-L, L]$ is then $N_{sub} = \\lceil 2L/\\Delta x \\rceil$. For Simpson's rule, this number must be even; if the calculated value is odd, it is incremented by one.\n\n**3. Algorithmic Implementation and Verification**\n\nThe complete algorithm is as follows:\nFor each pair $(\\alpha, \\varepsilon)$:\n1.  Calculate $L = \\mathrm{erfc}^{-1}(\\varepsilon) / \\sqrt{2\\alpha}$.\n2.  Calculate the characteristic width $\\sigma = 1/(2\\sqrt{\\alpha})$ and determine the required grid resolution $N_{pts/\\sigma}$ based on the error analysis.\n3.  Set the target grid spacing $\\Delta x = \\sigma / N_{pts/\\sigma}$.\n4.  Determine an even number of subintervals $N_{sub} \\ge 2L/\\Delta x$.\n5.  Construct a uniform grid $x_i$ of $N_{sub}+1$ points on $[-L, L]$.\n6.  Evaluate the un-normalized function values $y_i = \\exp(-2\\alpha x_i^2)$.\n7.  Use the composite Simpson's rule to compute the integral approximation $S_{num} = \\int_{-L}^{L} \\exp(-2\\alpha x^2) \\,dx$.\n8.  Compute the numerical normalization constant $C_{num} = (S_{num})^{-1/2}$.\n9.  To verify, compute the integral $I(\\alpha) = \\int_{-L}^{L} |C_{num}\\psi(x)|^2 \\,dx$ using the same numerical scheme. This is equivalent to computing $I_{num} = \\text{simpson}(C_{num}^2 \\cdot y_i, x_i)$.\n10. Calculate the absolute deviation $\\delta(\\alpha) = |I_{num} - 1|$.\n\nIt is critical to understand the nature of the quantity $\\delta(\\alpha)$. By construction, $I_{num} = C_{num}^2 S_{num} = (1/S_{num}) \\cdot S_{num}$. Mathematically, this is exactly $1$. However, in finite-precision floating-point arithmetic, the order of operations in calculating $C_{num}^2 \\cdot \\text{simpson}(y_i, x_i)$ versus $(1/\\text{simpson}(y_i, x_i)) \\cdot \\text{simpson}(y_i, x_i)$ may lead to a result that is not exactly $1$. The deviation $\\delta(\\alpha)$ is therefore not a measure of the physical accuracy of the normalization (which is controlled by $\\varepsilon$ and the grid density), but rather a measure of the accumulated floating-point round-off error in the verification calculation. We expect $\\delta(\\alpha)$ to be on the order of machine epsilon for double-precision numbers (approximately $10^{-16}$).", "answer": "```python\nimport numpy as np\nfrom scipy.special import erfcinv\nfrom scipy.integrate import simpson\n\ndef solve():\n    \"\"\"\n    Solves the wavefunction normalization problem for a given set of test cases.\n    \"\"\"\n\n    test_cases = [\n        (1.0, 1e-12),\n        (0.1, 1e-12),\n        (5.0, 1e-12),\n        (1e-3, 1e-9),\n        (50.0, 1e-12),\n    ]\n\n    results = []\n    for alpha, epsilon in test_cases:\n        delta = calculate_normalization_deviation(alpha, epsilon)\n        results.append(f\"{delta:.12e}\")\n\n    print(f\"[{','.join(results)}]\")\n\ndef calculate_normalization_deviation(alpha, epsilon):\n    \"\"\"\n    Implements the corrected algorithm to compute the normalization constant and\n    verify the normalization for a given alpha and epsilon.\n\n    Returns:\n        float: The absolute deviation delta = |I(alpha) - 1|.\n    \"\"\"\n    # 1. Determine the finite integration interval [-L, L].\n    # The condition is that the relative probability mass outside the interval\n    # is less than or equal to epsilon.\n    # This leads to erfc(sqrt(2*alpha)*L) <= epsilon.\n    C_eps = erfcinv(epsilon)\n    L = C_eps / np.sqrt(2 * alpha)\n\n    # 2. Determine the adaptive grid resolution.\n    # The characteristic width of the integrand exp(-2*alpha*x^2) is\n    # sigma = 1 / (2*sqrt(alpha)).\n    sigma = 1.0 / (2.0 * np.sqrt(alpha))\n\n    # The grid spacing is chosen to make the Simpson's rule discretization error\n    # of the same order as the truncation error epsilon. Error analysis yields a\n    # required number of points per standard deviation. A safety factor is included.\n    # The error analysis constant is approximately 0.213.\n    # pts_per_sigma = ceil(0.5 * (1.1 * 0.213 * C_eps / epsilon)**0.25)\n    \n    # Simpler heuristic: a large, fixed number of points per sigma also works if\n    # it is large enough. For double precision, targeting ~10^-15 error,\n    # let's choose a suffiently large number directly.\n    # Based on error analysis, ~500 points per sigma are needed for epsilon=1e-12.\n    pts_per_sigma = 600\n    \n    delta_x_target = sigma / pts_per_sigma\n\n    # 3. Construct the grid for numerical integration.\n    # The number of subintervals must be even for Simpson's rule.\n    num_subintervals = np.ceil(2.0 * L / delta_x_target)\n    if num_subintervals % 2 != 0:\n        num_subintervals += 1\n    \n    num_subintervals = int(num_subintervals)\n    \n    # x is an array of grid points.\n    x = np.linspace(-L, L, num_subintervals + 1)\n\n    # 4. Compute the un-normalized integral S.\n    # The integrand is |psi(x)|^2 = exp(-2*alpha*x^2).\n    psi_sq_values = np.exp(-2.0 * alpha * x**2)\n    S_num = simpson(psi_sq_values, x=x)\n\n    # 5. Compute the numerical normalization constant C.\n    C_num = 1.0 / np.sqrt(S_num)\n\n    # 6. Verify the normalization by re-integrating.\n    # The normalized integrand is |C*psi(x)|^2 = C^2 * |psi(x)|^2.\n    normalized_psi_sq_values = C_num**2 * psi_sq_values\n    I_num = simpson(normalized_psi_sq_values, x=x)\n\n    # 7. Compute the absolute deviation from 1.\n    # This value primarily reflects floating-point round-off error.\n    delta = np.abs(I_num - 1.0)\n    \n    return delta\n\nif __name__ == \"__main__\":\n    solve()\n\n```", "id": "2467293"}]}