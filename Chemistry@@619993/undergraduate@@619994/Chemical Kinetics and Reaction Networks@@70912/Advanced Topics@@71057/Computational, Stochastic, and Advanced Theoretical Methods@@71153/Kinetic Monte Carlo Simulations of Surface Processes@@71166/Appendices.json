{"hands_on_practices": [{"introduction": "Before diving into the complex mathematics of Kinetic Monte Carlo (KMC) simulations, it is essential to build a strong physical intuition for the processes involved. This first practice focuses on the fundamental competition between kinetic events—namely, the deposition of atoms onto a surface and their subsequent diffusion across it. By exploring how the ratio of the diffusion rate to the deposition rate ($k_D/F$) shapes the final surface morphology, you will develop a qualitative understanding that motivates the need for quantitative simulation methods like KMC. [@problem_id:1493191]", "problem": "In a simplified model of thin-film growth, atoms are deposited from a vapor phase onto a perfectly flat, crystalline substrate at a constant rate. The deposition flux, $F$, is defined as the number of atoms arriving per unit area per unit time. Once on the surface, these adatoms can move via a thermally activated hopping process, characterized by a diffusion rate, $k_D$. The dimensionless ratio $R = k_D/F$ is a critical parameter that governs the resulting morphology of the growing film.\n\nConsider two separate experiments, both aimed at depositing a total amount of material equivalent to one complete Monolayer (ML).\n- Experiment A is conducted under conditions where the ratio $R_A$ is very small ($R_A \\ll 1$).\n- Experiment B is conducted under conditions where the ratio $R_B$ is very large ($R_B \\gg 1$).\n\nBased on the principles of surface kinetic processes, which of the following statements best describes the expected final surface morphology in these two experiments?\n\nA. Experiment A will result in a large number of small, irregularly shaped islands, while Experiment B will result in a small number of large, compact islands.\n\nB. Experiment A will result in a small number of large, compact islands, while Experiment B will result in a large number of small, irregularly shaped islands.\n\nC. Both experiments will result in the formation of a single, continuous, and perfectly flat monolayer, as the total deposited amount is exactly 1 ML.\n\nD. Both experiments will result in a rough surface characterized by a high density of single-atom defects and vacancies, regardless of the ratio $R$.\n\nE. Experiment A will result in the immediate formation of a second layer before the first is complete, while Experiment B will exhibit perfect layer-by-layer growth.", "solution": "The governing competition in thin-film growth is between the deposition flux $F$ and adatom surface diffusion characterized by a hopping rate $k_{D}$. The dimensionless ratio $R = k_{D}/F$ controls the adatom diffusion length and, consequently, the nucleation and growth morphology.\n\nRelate the diffusion length to $R$ as follows. Let $D$ denote the surface diffusion constant. In lattice models, $D$ is proportional to $k_{D}$, i.e., $D \\propto k_{D}$, so that $D/F \\propto R$. The characteristic adatom diffusion length $\\ell$ before capture satisfies\n$$\n\\ell \\sim \\sqrt{\\frac{D}{F}} \\propto \\sqrt{R}.\n$$\nThus, when $R \\ll 1$, $\\ell$ is small and adatoms are captured near where they land; when $R \\gg 1$, $\\ell$ is large and adatoms sample large areas before being captured.\n\nIsland nucleation theory on surfaces with critical nucleus size $i$ yields the steady-state island density $N$ scaling as\n$$\nN \\propto \\left(\\frac{F}{D}\\right)^{\\chi}, \\quad \\chi = \\frac{i}{i+2},\n$$\nup to multiplicative prefactors, implying $N$ decreases as $D/F$ increases. Using $D/F \\propto R$,\n$$\nN \\propto R^{-\\chi}, \\quad 0<\\chi<1.\n$$\nTherefore, small $R$ produces a large island density (many islands), and large $R$ produces a small island density (few islands). For a fixed total coverage of $1$ ML, mass conservation implies that the average island size scales inversely with $N$, so small $R$ yields many small islands, while large $R$ yields fewer larger islands.\n\nThe island shape compactness is governed by the ability of adatoms at island perimeters to relax by edge diffusion and by the overall diffusion-mediated smoothing. When diffusion is limited ($R \\ll 1$), growth is dominated by attachment near the landing site and limited rearrangement, favoring dendritic or irregular, diffusion-limited aggregation-like morphologies. When diffusion is efficient ($R \\gg 1$), adatoms can find energetically favorable sites, enhancing edge smoothing and compact, more equilibrium-like island shapes.\n\nAssessing the options:\n- Option A matches the established scaling: small $R$ leads to many small, irregular islands; large $R$ leads to few large, compact islands.\n- Option B inverts this dependence and is inconsistent with $N \\propto R^{-\\chi}$.\n- Option C is incorrect because depositing $1$ ML does not guarantee a perfectly flat monolayer; morphology depends on kinetics, and incomplete coalescence and roughness can persist at $1$ ML.\n- Option D is incorrect because surface roughness and defect densities are strongly $R$-dependent.\n- Option E makes absolute claims that require additional conditions (e.g., negligible Ehrlich–Schwoebel barriers and specific $i$) for perfect layer-by-layer growth at large $R$, and “immediate” second-layer nucleation at small $R$ is not guaranteed solely by $R$ and depends on additional kinetic barriers and capture processes.\n\nTherefore, the correct statement is Option A.", "answer": "$$\\boxed{A}$$", "id": "1493191"}, {"introduction": "Having established the conceptual foundation, we now turn to the mechanics of the KMC algorithm itself. This exercise demystifies the core simulation procedure by walking you through two complete steps of the process by hand. You will calculate the rates of all possible events, advance the simulation clock using the proper statistical method, and select which event occurs next, giving you a concrete, step-by-step feel for the engine that drives a KMC simulation. [@problem_id:1493167]", "problem": "A catalytic surface reaction is modeled on a two-dimensional 3x3 square lattice with periodic boundary conditions. The sites on the lattice are indexed by coordinates (i, j) where i, j can be 0, 1, or 2. Two elementary processes can occur on this surface:\n\n1.  **Reaction**: An adsorbed molecule of species A, denoted A(ad), at a site $s$ reacts with an adsorbed molecule of species B, denoted B(ad), at a nearest-neighbor site $s'$. This reaction forms an adsorbed molecule of species C, C(ad), at site $s$, and leaves site $s'$ empty. The rate of this reaction for any specific A(ad)-B(ad) pair is a constant, $k_R$.\n2.  **Desorption**: An adsorbed molecule C(ad) at a site $s$ desorbs into the gas phase, leaving site $s$ empty. The rate of this process depends on the local environment and is given by $k_C(n) = k_C^0 \\exp(-\\alpha n)$, where $n$ is the number of nearest-neighbor sites to site $s$ that are occupied by any species (A, B, or C).\n\nThe simulation of this system proceeds via a stochastic algorithm. At each step:\na.  The total rate, $R_{tot}$, is calculated by summing the rates of all possible events in the current configuration of the system.\nb.  The simulation time is advanced by an increment $\\Delta t = -\\frac{\\ln(u_1)}{R_{tot}}$, where $u_1$ is a random number drawn from a uniform distribution on the interval (0, 1].\nc.  A single event $i$, which has an individual rate $r_i$, is chosen to occur. The event is selected with probability $P_i = r_i / R_{tot}$, which is implemented by finding the event index $i$ that satisfies $\\sum_{j=1}^{i-1} r_j < u_2 R_{tot} \\leq \\sum_{j=1}^{i} r_j$, where $u_2$ is a second random number drawn from a uniform distribution on (0, 1].\n\nInitially, at time $t=0$, the lattice is configured as follows:\n-   One molecule of A(ad) is at site (1,1).\n-   One molecule of B(ad) is at site (1,2).\n-   One molecule of B(ad) is at site (2,1).\n-   All other 6 sites are empty.\n\nThe parameters for the simulation are:\n-   $k_R = 0.50 \\text{ s}^{-1}$\n-   $k_C^0 = 1.2 \\text{ s}^{-1}$\n-   $\\alpha = 0.25$\n\nYou are given the following sequence of random numbers to drive the simulation:\n-   For the first step: a pair of random numbers $(u_{1,1}, u_{2,1}) = (0.60, 0.40)$.\n-   For the second step: a pair of random numbers $(u_{1,2}, u_{2,2}) = (0.80, 0.70)$.\n\nCalculate the total elapsed time at which the first molecule of C desorbs from the surface. Express your answer in seconds, rounded to three significant figures.", "solution": "The lattice is a $3 \\times 3$ square with periodic boundaries and nearest neighbors in the four cardinal directions. Initially, A(ad) is at $(1,1)$ and B(ad) are at $(1,2)$ and $(2,1)$. The A at $(1,1)$ has four neighbors: $(0,1)$, $(2,1)$, $(1,0)$, and $(1,2)$. Among these, $(1,2)$ and $(2,1)$ are occupied by B, so there are two distinct A-B nearest-neighbor pairs. Each such pair is a possible reaction event with rate $k_{R}$.\n\nTherefore, at step 1 the total rate is\n$$\nR_{\\text{tot},1}=\\sum r_{i}=2 k_{R}=2 \\times 0.50=1.00 \\text{ s}^{-1}.\n$$\nThe time increment is given by the Gillespie formula\n$$\n\\Delta t_{1}=-\\frac{\\ln(u_{1,1})}{R_{\\text{tot},1}}=-\\frac{\\ln(0.60)}{1.00}= -\\ln(0.60) \\approx 0.5108256238 \\text{ s}.\n$$\nEvent selection uses $u_{2,1}$. With the two reaction events having rates $r_{1}=0.50$ and $r_{2}=0.50$, compute $u_{2,1} R_{\\text{tot},1}=0.40$. The selection condition\n$$\n\\sum_{j=1}^{i-1} r_{j}<u_{2,1} R_{\\text{tot},1} \\leq \\sum_{j=1}^{i} r_{j}\n$$\nis satisfied for $i=1$ since $0<0.40 \\leq 0.50$. Thus the reaction between A at $(1,1)$ and B at $(1,2)$ occurs, producing C at $(1,1)$ and emptying $(1,2)$. After this event, the surface has C at $(1,1)$ and B at $(2,1)$; no A remains, so only C desorption is possible.\n\nFor step 2, desorption of C at $s=(1,1)$ has a rate $k_{C}(n)=k_{C}^{0} \\exp(-\\alpha n)$, where $n$ is the number of occupied nearest neighbors of $s$. The neighbors of $(1,1)$ are $(0,1)$, $(2,1)$, $(1,0)$, and $(1,2)$. Of these, only $(2,1)$ is occupied (by B), so $n=1$. Hence\n$$\nR_{\\text{tot},2}=k_{C}(1)=k_{C}^{0} \\exp(-\\alpha)=1.2 \\exp(-0.25).\n$$\nThe time increment for step 2 is\n$$\n\\Delta t_{2}=-\\frac{\\ln(u_{1,2})}{R_{\\text{tot},2}}=-\\frac{\\ln(0.80)}{1.2 \\exp(-0.25)}=\\frac{-\\ln(0.80)\\,\\exp(0.25)}{1.2} \\approx \\frac{0.2231435513 \\times 1.2840254167}{1.2} \\approx 0.2387683258 \\text{ s}.\n$$\nThere is only one possible event (C desorption), so it is selected regardless of $u_{2,2}$.\n\nThe first desorption thus occurs at the total elapsed time\n$$\nt_{\\text{desorb}}=\\Delta t_{1}+\\Delta t_{2}\\approx 0.5108256238+0.2387683258=0.7495939496 \\text{ s}.\n$$\nRounded to three significant figures, this is $0.750$ s.", "answer": "$$\\boxed{0.750}$$", "id": "1493167"}, {"introduction": "With a solid grasp of the underlying physical concepts and the step-by-step mechanics of the algorithm, you are now equipped to build a complete KMC simulation from the ground up. This final \"hands-on\" practice challenges you to write a program that simulates a full catalytic reaction scheme, including adsorption, desorption, and bimolecular reaction steps. Successfully translating this chemical mechanism into a working computer model will cement your understanding and demonstrate your ability to apply KMC to solve practical problems in surface science. [@problem_id:2458845]", "problem": "A reactive surface is modeled as a finite collection of indistinguishable adsorption sites. The surface interacts with two gas-phase species and can produce a gas-phase product through a bimolecular surface reaction. The state of the system at time $t$ is defined by the integer counts $\\left(n_{AS}(t), n_{BS}(t), n_{S}(t), n_{C}(t)\\right)$ where $n_{AS}$ is the number of sites occupied by adsorbed species $A$, $n_{BS}$ is the number of sites occupied by adsorbed species $B$, $n_{S}$ is the number of empty sites, and $n_{C}$ is the cumulative number of gas-phase product molecules formed, with the invariant $n_{AS}(t) + n_{BS}(t) + n_{S}(t) = N_S$. The system is initialized at $t = 0$ with $n_{AS}(0) = 0$, $n_{BS}(0) = 0$, $n_{S}(0) = N_S$, and $n_{C}(0) = 0$. Time is measured in seconds. All rates below are in inverse seconds with the following detailed meanings.\n\nThe elementary events and their propensities are defined as follows under a well-mixed site approximation:\n- Adsorption of $A$: $A + S \\rightarrow AS$ with propensity $a_1(t) = k_{\\text{ads},A}\\,n_{S}(t)$ where $k_{\\text{ads},A}$ has units of $\\text{s}^{-1}$ per empty site.\n- Desorption of $A$: $AS \\rightarrow A + S$ with propensity $a_2(t) = k_{\\text{des},A}\\,n_{AS}(t)$ where $k_{\\text{des},A}$ has units of $\\text{s}^{-1}$ per adsorbed $A$.\n- Adsorption of $B$: $B + S \\rightarrow BS$ with propensity $a_3(t) = k_{\\text{ads},B}\\,n_{S}(t)$ where $k_{\\text{ads},B}$ has units of $\\text{s}^{-1}$ per empty site.\n- Desorption of $B$: $BS \\rightarrow B + S$ with propensity $a_4(t) = k_{\\text{des},B}\\,n_{BS}(t)$ where $k_{\\text{des},B}$ has units of $\\text{s}^{-1}$ per adsorbed $B$.\n- Surface reaction: $AS + BS \\rightarrow C + 2S$ with propensity $a_5(t) = k_{\\text{rxn}}\\,n_{AS}(t)\\,n_{BS}(t)$ where $k_{\\text{rxn}}$ has units of $\\text{s}^{-1}$ per ordered pair $\\left(AS,BS\\right)$. The reaction updates the counts as $n_{AS} \\mapsto n_{AS} - 1$, $n_{BS} \\mapsto n_{BS} - 1$, $n_{S} \\mapsto n_{S} + 2$, $n_{C} \\mapsto n_{C} + 1$.\n\nTreat the dynamics as a continuous-time, discrete-state Markov process governed by the above propensities. For each specified parameter set, generate a single stochastic trajectory of the process starting from the initial state, evolving until the end time $T_{\\text{end}}$ (in seconds) or until no further events are possible, whichever occurs first. Use a pseudorandom number generator seeded as specified for each case to make the result reproducible. For each case, report the final value $n_{C}(T_{\\text{end}})$ as a non-negative integer.\n\nAll simulations must adhere to the following conditions:\n- The surface site count is $N_S$ (an integer).\n- The end time is $T_{\\text{end}}$ (in seconds).\n- The rates $k_{\\text{ads},A}$, $k_{\\text{des},A}$, $k_{\\text{ads},B}$, $k_{\\text{des},B}$, and $k_{\\text{rxn}}$ are non-negative real numbers with the units indicated above.\n- The random number generator must be initialized with the given integer seed before simulating each case.\n\nTest Suite of parameter sets $\\left(N_S, T_{\\text{end}}, k_{\\text{ads},A}, k_{\\text{des},A}, k_{\\text{ads},B}, k_{\\text{des},B}, k_{\\text{rxn}}, \\text{seed}\\right)$:\n- Case $1$: $\\left(50, 2.0, 4.0, 1.0, 5.0, 1.5, 0.10, 12345\\right)$.\n- Case $2$: $\\left(100, 1.0, 0.0, 1.0, 3.0, 1.0, 1.00, 67890\\right)$.\n- Case $3$: $\\left(60, 3.0, 3.0, 0.5, 3.0, 0.5, 0.00, 13579\\right)$.\n- Case $4$: $\\left(0, 10.0, 2.0, 0.2, 2.0, 0.2, 0.50, 24680\\right)$.\n- Case $5$: $\\left(40, 5.0, 2.0, 0.2, 2.5, 0.2, 0.50, 424242\\right)$.\n\nYour program must compute the final integer results $n_{C}(T_{\\text{end}})$ for the five cases above and produce a single line of output containing the results as a comma-separated list enclosed in square brackets with no spaces, in the order of cases $1$ through $5$, for example, $\\left[\\;x_1,x_2,x_3,x_4,x_5\\;\\right]$, where each $x_i$ is the corresponding integer $n_C(T_{\\text{end}})$.", "solution": "The problem as stated is subjected to rigorous validation and is found to be valid. It is a well-defined problem in the domain of computational chemistry, specifically requiring the simulation of a stochastic chemical reaction network on a surface. The model is based on established principles of chemical kinetics and statistical mechanics, and all parameters and conditions required for a unique, reproducible solution are provided. The model is an example of a continuous-time, discrete-state Markov process, for which the standard and correct solution method is the Gillespie Stochastic Simulation Algorithm (SSA).\n\nWe will now proceed with the formal derivation and algorithmic specification.\n\nThe state of the system at any time $t$ is described by the vector of integer population numbers $\\vec{n}(t) = (n_{AS}(t), n_{BS}(t), n_{S}(t), n_{C}(t))$. The components represent the number of sites occupied by species $A$, number of sites occupied by species $B$, number of vacant sites, and the cumulative count of product molecules $C$, respectively. The total number of sites, $N_S$, is constant, leading to the invariant $n_{AS}(t) + n_{BS}(t) + n_{S}(t) = N_S$.\n\nThe system evolves through five possible elementary reaction channels, $\\mu \\in \\{1, 2, 3, 4, 5\\}$:\n1.  Adsorption of $A$: $A + S \\xrightarrow{k_{\\text{ads},A}} AS$\n2.  Desorption of $A$: $AS \\xrightarrow{k_{\\text{des},A}} A + S$\n3.  Adsorption of $B$: $B + S \\xrightarrow{k_{\\text{ads},B}} BS$\n4.  Desorption of $B$: $BS \\xrightarrow{k_{\\text{des},B}} B + S$\n5.  Surface reaction: $AS + BS \\xrightarrow{k_{\\text{rxn}}} C + 2S$\n\nFor each reaction channel $\\mu$, there is a corresponding state-change vector, $\\vec{\\nu}_\\mu$, which defines the change in the state vector $\\vec{n}$ when that reaction occurs. These vectors are:\n-   $\\vec{\\nu}_1 = (+1, 0, -1, 0)$ for $A$ adsorption\n-   $\\vec{\\nu}_2 = (-1, 0, +1, 0)$ for $A$ desorption\n-   $\\vec{\\nu}_3 = (0, +1, -1, 0)$ for $B$ adsorption\n-   $\\vec{\\nu}_4 = (0, -1, +1, 0)$ for $B$ desorption\n-   $\\vec{\\nu}_5 = (-1, -1, +2, +1)$ for the surface reaction\n\nThe dynamics are governed by the propensity function $a_\\mu(\\vec{n})$ for each reaction channel. The propensity $a_\\mu(\\vec{n}) dt$ represents the probability that reaction $\\mu$ will occur in the infinitesimal time interval $[t, t+dt)$. The given propensities are:\n-   $a_1(\\vec{n}) = k_{\\text{ads},A}\\,n_{S}(t)$\n-   $a_2(\\vec{n}) = k_{\\text{des},A}\\,n_{AS}(t)$\n-   $a_3(\\vec{n}) = k_{\\text{ads},B}\\,n_{S}(t)$\n-   $a_4(\\vec{n}) = k_{\\text{des},B}\\,n_{BS}(t)$\n-   $a_5(\\vec{n}) = k_{\\text{rxn}}\\,n_{AS}(t)\\,n_{BS}(t)$\n\nThe total propensity, $a_{\\text{total}}(\\vec{n})$, is the sum of all individual propensities:\n$$a_{\\text{total}}(\\vec{n}) = \\sum_{\\mu=1}^{5} a_\\mu(\\vec{n})$$\n\nThe Gillespie SSA provides an exact procedure for simulating the trajectory of such a system. The algorithm is based on the fact that for a Markov process, the waiting time until the next event is exponentially distributed, and the probability of a specific event occurring is proportional to its propensity. The algorithm proceeds as follows:\n\n**Gillespie Algorithm**\n\n1.  **Initialization**:\n    -   Set simulation time $t = 0$.\n    -   Initialize the state vector according to the problem statement: $n_{AS} = 0$, $n_{BS} = 0$, $n_S = N_S$, $n_C = 0$.\n    -   Initialize a pseudorandom number generator (RNG) with the specified seed for reproducibility.\n\n2.  **Iteration Loop**: The simulation proceeds in discrete steps, jumping from one reaction event to the next, until the simulation time $t$ reaches or exceeds the final time $T_{\\text{end}}$.\n    a.  **Calculate Propensities**: Given the current state $\\vec{n}$, compute all five propensities $a_1, ..., a_5$ and their sum $a_{\\text{total}}$.\n    b.  **Check for Termination**: If $a_{\\text{total}} = 0$, no further reactions can occur. The system is in an absorbing state. The simulation must terminate. This condition is explicitly handled as part of the simulation logic.\n    c.  **Generate Random Variates**: Generate two independent random numbers, $r_1$ and $r_2$, from the uniform distribution on the interval $(0, 1)$.\n    d.  **Determine Time Step**: The time until the next event, $\\tau$, is a random variable drawn from an exponential distribution with parameter $a_{\\text{total}}$. It is calculated as:\n        $$\\tau = -\\frac{\\ln(r_1)}{a_{\\text{total}}}$$\n    e.  **Advance Time**: Update the simulation time: $t \\leftarrow t + \\tau$.\n    f.  **Check End Time**: If the new time $t$ is greater than $T_{\\text{end}}$, the simulation for the current trajectory is over. The loop must be terminated, and the state of the system remains as it was *before* this time step. The final reported value is $n_C$ at the last valid time step before exceeding $T_{\\text{end}}$.\n    g.  **Select Reaction**: The next reaction to occur, $\\mu = j$, is chosen with probability $a_j / a_{\\text{total}}$. This is accomplished by finding the index $j$ that satisfies the condition:\n        $$\\sum_{i=1}^{j-1} a_i < r_2 \\cdot a_{\\text{total}} \\le \\sum_{i=1}^{j} a_i$$\n    h.  **Update State**: Update the state vector by adding the corresponding state-change vector: $\\vec{n} \\leftarrow \\vec{n} + \\vec{\\nu}_j$.\n    i.  Return to step 2a.\n\n3.  **Output**: Upon termination of the loop (either by reaching $T_{\\text{end}}$ or $a_{\\text{total}} = 0$), the final integer value of $n_C$ is the result for the given parameter set.\n\nThis algorithm will be implemented for each test case specified in the problem. The use of the specified seeds ensures that the stochastic trajectories, while random in nature, are perfectly reproducible. Edge cases, such as Case 4 where $N_S = 0$, are handled naturally by the algorithm. If $N_S = 0$, then $n_{AS}(0) = n_{BS}(0) = n_{S}(0)=0$, which implies all propensities are zero at $t=0$. Thus, $a_{\\text{total}} = 0$, the simulation terminates immediately, and the result is correctly reported as $n_C(0) = 0$. Similarly, if any rate constant like $k_{\\text{rxn}}$ is zero (Case 3), the corresponding propensity $a_5$ will always be zero, and product $C$ can never be formed.\n\nThe final implementation will be a Python script that encapsulates this logic in a function, iterates through the provided test cases, and prints the results in the required format.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef run_simulation(N_S, T_end, k_ads_A, k_des_A, k_ads_B, k_des_B, k_rxn, seed):\n    \"\"\"\n    Executes a single stochastic simulation trajectory using the Gillespie algorithm.\n    \n    Args:\n        N_S (int): Total number of surface sites.\n        T_end (float): End time of the simulation in seconds.\n        k_ads_A (float): Rate constant for adsorption of A.\n        k_des_A (float): Rate constant for desorption of A.\n        k_ads_B (float): Rate constant for adsorption of B.\n        k_des_B (float): Rate constant for desorption of B.\n        k_rxn (float): Rate constant for the surface reaction.\n        seed (int): Seed for the pseudorandom number generator.\n\n    Returns:\n        int: The final count of product molecules C.\n    \"\"\"\n    # Initialize the pseudorandom number generator\n    rng = np.random.default_rng(seed)\n\n    # State vector: [n_AS, n_BS, n_S, n_C]\n    # Initialize state at t=0\n    n_AS = 0\n    n_BS = 0\n    n_S = N_S\n    n_C = 0\n    t = 0.0\n\n    # State change vectors for each reaction\n    # 1: A(g) + S -> AS\n    # 2: AS -> A(g) + S\n    # 3: B(g) + S -> BS\n    # 4: BS -> B(g) + S\n    # 5: AS + BS -> C(g) + 2S\n    nu = np.array([\n        [1, 0, -1, 0],   # Reaction 1\n        [-1, 0, 1, 0],   # Reaction 2\n        [0, 1, -1, 0],   # Reaction 3\n        [0, -1, 1, 0],   # Reaction 4\n        [-1, -1, 2, 1]   # Reaction 5\n    ], dtype=np.int32)\n    \n    while t < T_end:\n        # Calculate propensities for all 5 reactions\n        a = np.array([\n            k_ads_A * n_S,\n            k_des_A * n_AS,\n            k_ads_B * n_S,\n            k_des_B * n_BS,\n            k_rxn * n_AS * n_BS\n        ])\n\n        a_total = np.sum(a)\n\n        # If a_total is 0, no more reactions can occur. Terminate.\n        if a_total == 0:\n            break\n\n        # Generate two random numbers\n        r1, r2 = rng.random(size=2)\n        \n        # Calculate time step tau\n        tau = -np.log(r1) / a_total\n\n        # If next event is after T_end, stop simulation\n        if t + tau > T_end:\n            break\n        \n        # Update time\n        t += tau\n\n        # Select which reaction occurs\n        # Find the index j such that sum(a[:j]) < r2 * a_total <= sum(a[:j+1])\n        target = r2 * a_total\n        cumsum_a = np.cumsum(a)\n        reaction_idx = np.searchsorted(cumsum_a, target, side='right')\n\n        # Update state based on the chosen reaction\n        n_AS += nu[reaction_idx, 0]\n        n_BS += nu[reaction_idx, 1]\n        n_S += nu[reaction_idx, 2]\n        n_C += nu[reaction_idx, 3]\n\n    return n_C\n\ndef solve():\n    \"\"\"\n    Runs the simulations for all test cases and prints the results.\n    \"\"\"\n    # Test Suite: (N_S, T_end, k_ads_A, k_des_A, k_ads_B, k_des_B, k_rxn, seed)\n    test_cases = [\n        (50, 2.0, 4.0, 1.0, 5.0, 1.5, 0.10, 12345),\n        (100, 1.0, 0.0, 1.0, 3.0, 1.0, 1.00, 67890),\n        (60, 3.0, 3.0, 0.5, 3.0, 0.5, 0.00, 13579),\n        (0, 10.0, 2.0, 0.2, 2.0, 0.2, 0.50, 24680),\n        (40, 5.0, 2.0, 0.2, 2.5, 0.2, 0.50, 424242),\n    ]\n\n    results = []\n    for case in test_cases:\n        result = run_simulation(*case)\n        results.append(result)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2458845"}]}