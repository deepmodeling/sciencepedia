{"hands_on_practices": [{"introduction": "A well-designed computational grid is the foundation of any accurate fluid dynamics simulation, and a uniform mesh is rarely the most effective approach. This practice challenges you to think like a CFD analyst by tailoring the grid to the flow's physics. By considering the classic case of flow over a backward-facing step, you will apply the crucial principle of concentrating grid points in regions with large velocity and pressure gradients to efficiently capture complex phenomena like flow separation and reattachment [@problem_id:1761175].", "problem": "In the field of Computational Fluid Dynamics (CFD), the accuracy of a numerical simulation heavily depends on the quality of the computational mesh, or grid, used to discretize the domain. Consider the classic problem of two-dimensional, incompressible, laminar flow through a channel that undergoes a sudden expansion, commonly known as a backward-facing step. The channel has a height $H$ upstream of the step and a height $H_2 > H$ downstream. The flow enters from the left with a uniform velocity profile and develops as it moves to the right.\n\nFor a successful simulation, the grid must be designed to capture the important flow features accurately. The \"grid density\" refers to the concentration of grid points or cells in a particular region. A higher density is required in areas where flow variables (like velocity or pressure) change rapidly. A \"structured grid\" consists of a regular, repeating pattern of cells (e.g., quadrilaterals in 2D) where each grid point can be identified by integer indices (i, j).\n\nWhich of the following descriptions represents the most appropriate and efficient grid design strategy for simulating the flow over this backward-facing step?\n\nA. A structured grid with high, uniform density across the entire domain to ensure maximum a priori accuracy everywhere.\nB. An unstructured grid composed of triangles, with the highest grid density located in the core of the flow, far away from any solid walls, to best capture the bulk fluid motion.\nC. A structured grid partitioned into several blocks (a multi-block grid). Grid lines are clustered with high density near all solid walls, with a particular concentration of cells in the region immediately downstream of the step corner.\nD. A structured grid with a high density only near the inlet and outlet boundaries of the channel, and a very coarse grid in the middle section, to save computational cost.\nE. A uniform structured grid where the cell size is determined by the smallest geometric feature, which is the sharp corner of the step itself.", "solution": "For a two-dimensional incompressible laminar backward-facing step, the dominant flow features dictating grid requirements are as follows: (i) no-slip boundary layers along all solid walls, both upstream and downstream, which impose steep wall-normal gradients and require near-wall clustering for accuracy and stability; (ii) a sudden expansion at the step that creates an adverse pressure gradient and leads to flow separation at the step corner, generating a recirculation bubble immediately downstream; (iii) a free shear layer that emanates from the step corner, grows downstream, and reattaches to the wall at a finite distance, after which the boundary layer redevelops. The largest spatial gradients in velocity and pressure occur at the walls, within the separated shear layer, and in the vicinity immediately downstream of the step where the recirculation and reattachment occur. Efficient grids allocate high density to these regions and allow coarsening in the low-gradient core flow.\n\nA structured grid aligned with the walls provides good control of orthogonality and stretching, which reduces numerical diffusion along streamwise directions and allows effective clustering normal to walls to meet near-wall resolution targets (e.g., for laminar resolution, small first-cell height consistent with the required $y^{+}$). The geometric discontinuity at the step is naturally accommodated by a multi-block structured topology, enabling local refinement and smooth grid-spacing transitions around the corner, along the separated shear layer, and across the recirculation region, while keeping the far-field core flow relatively coarse. This achieves accuracy where needed and computational efficiency elsewhere.\n\nAssessing the options:\n- A uses a high, uniform density everywhere. While accurate, it is inefficient because it wastes cells in regions with weak gradients and violates the principle of targeted refinement.\n- B places the highest density in the core away from walls. This misallocates resolution; the core has relatively mild gradients compared to walls and the shear layer, so critical near-wall and post-step regions would be under-resolved.\n- C employs a multi-block structured grid with clustering near all walls and particularly downstream of the step. This aligns with the physics: it resolves boundary layers, the separated shear layer, the recirculation bubble, and the reattachment region efficiently while allowing coarser spacing in the core.\n- D refines only near inlet and outlet and coarsens the middle, which fails to resolve the key post-step separation and shear-layer dynamics.\n- E enforces a uniform grid sized by the smallest feature (the corner), which is inefficient globally and does not provide the anisotropic near-wall clustering and localized post-step refinement required.\n\nTherefore, the most appropriate and efficient strategy is the multi-block structured grid with clustering near walls and focused refinement immediately downstream of the step, corresponding to option C.", "answer": "$$\\boxed{C}$$", "id": "1761175"}, {"introduction": "Many engineering geometries are too complex to be meshed with a single type of grid. This exercise introduces the practical and powerful technique of hybrid meshing, which combines the order of structured grids in simple regions with the flexibility of unstructured grids in complex ones [@problem_id:1761200]. You will explore the specific role of pyramidal elements, which act as essential topological bridges, and develop your 3D spatial reasoning by determining how these different cell shapes connect to form a single, continuous mesh.", "problem": "In the field of Computational Fluid Dynamics (CFD), creating a high-quality computational mesh is a critical step. Consider a hybrid meshing strategy for a complex domain. The domain is divided into two regions. Region 1 is a simple rectangular prism defined by $0 \\le x \\le L_x$, $0 \\le y \\le L_y$, and $0 \\le z \\le L_z$. This region is filled with a structured grid of identical hexahedral elements (cells with 6 quadrilateral faces). The grid has $N_x=50$ divisions along the x-axis, $N_y=30$ divisions along the y-axis, and $N_z=20$ divisions along the z-axis.\n\nRegion 2, which occupies the space $x > L_x$, has a complex geometry and is to be filled with an unstructured grid of tetrahedral elements (cells with 4 triangular faces). To ensure a conforming mesh, a transition layer of pyramidal elements must be placed at the interface plane at $x=L_x$. A pyramidal element is a cell with 5 faces: one quadrilateral base and four triangular side faces. The quadrilateral base of each pyramidal element in the transition layer perfectly matches one of the quadrilateral faces of a hexahedral element from the structured grid at the interface. The collection of triangular side faces of these pyramidal elements then forms a new surface, which serves as the boundary for meshing Region 2 with tetrahedra.\n\nWhat is the total number of triangular faces that make up this new boundary surface between the transition layer and the unstructured tetrahedral region?\n\nA. 600\nB. 1200\nC. 2400\nD. 3000\nE. 4800", "solution": "The problem asks for the total number of triangular faces on the surface of a transition layer used to connect a structured hexahedral mesh to an unstructured tetrahedral mesh.\n\nFirst, we need to determine the number of hexahedral element faces that lie on the interface plane between Region 1 and Region 2. The interface is located at the plane $x=L_x$. The structured grid in Region 1 has $N_y=30$ divisions along the y-axis and $N_z=20$ divisions along the z-axis. The number of quadrilateral faces on any plane of constant $x$ is the product of the number of divisions in the other two directions.\n\nNumber of quadrilateral faces at the interface = $N_y \\times N_z$\nSubstituting the given values:\nNumber of quadrilateral faces = $30 \\times 20 = 600$\n\nAccording to the problem description, a transition layer of pyramidal elements is used to connect the two regions. Each pyramidal element has a quadrilateral base that must match a quadrilateral face from the hexahedral mesh at the interface. Therefore, the number of pyramidal elements required in the transition layer is equal to the number of quadrilateral faces on the interface.\n\nNumber of pyramidal elements = Number of quadrilateral faces = 600\n\nThe problem asks for the total number of triangular faces that form the new boundary for the unstructured tetrahedral region. These triangular faces are the side faces of the pyramidal elements. Each pyramidal element is defined as having one quadrilateral base and four triangular side faces.\n\nNumber of triangular faces per pyramidal element = 4\n\nThe total number of triangular faces forming the new surface is the product of the number of pyramidal elements and the number of triangular faces per element.\n\nTotal triangular faces = (Number of pyramidal elements) $\\times$ (Triangular faces per pyramidal element)\nTotal triangular faces = $600 \\times 4 = 2400$\n\nThus, the new surface, which will serve as the boundary for the tetrahedral meshing of Region 2, is composed of 2400 triangular faces. This corresponds to option C.\n\nLet's review the other options as potential mistakes:\nA. 600: This is the number of quadrilateral faces at the interface, not the number of triangular faces after the transition.\nB. 1200: This might result from incorrectly assuming that each quadrilateral face is split into two triangles to form the new surface, which would be the case for a different type of transition (e.g., using prisms or wedges if split in a structured way).\nD. 3000: This would be $600 \\times 5$, which is the total number of faces (1 quad + 4 tri) of all pyramids, not just the triangular ones.\nE. 4800: This would be $600 \\times 8$, possibly confusing faces with vertices of the original hexahedra.", "answer": "$$\\boxed{C}$$", "id": "1761200"}, {"introduction": "A grid's design has consequences that extend far beyond geometric representation; a grid's topology directly defines the structure of the underlying mathematical problem and, therefore, the computational cost of the simulation. This practice uncovers the critical link between how a grid's nodes are arranged and ordered and the efficiency of the numerical solvers used to find a solution [@problem_id:1761189]. Through a quantitative analysis, you will discover how a seemingly minor decision, such as the aspect ratio of a grid, can have a dramatic impact on total computation time.", "problem": "In computational fluid dynamics, the discretization of a partial differential equation over a physical domain often results in a large system of linear algebraic equations of the form $A\\mathbf{x} = \\mathbf{b}$. The structure of the matrix $A$ is determined by the grid topology and the node ordering scheme, which in turn significantly impacts the computational cost of solving the system.\n\nConsider a two-dimensional, rectangular structured grid with $N_x$ nodes in the x-direction and $N_y$ nodes in the y-direction. The total number of nodes is $N = N_x N_y$. A five-point finite difference stencil is used for the discretization, meaning each interior node $(i,j)$ is coupled only to its four immediate neighbors: $(i-1, j)$, $(i+1, j)$, $(i, j-1)$, and $(i, j+1)$.\n\nTo construct the matrix $A$, the two-dimensional grid of nodes is mapped to a one-dimensional vector of unknowns, $\\mathbf{x}$. A natural row-wise ordering scheme is employed, where the 2D grid point at coordinate $(i,j)$ (with $1 \\le i \\le N_x$ and $1 \\le j \\le N_y$) is mapped to the 1D vector index $k$ using the formula $k = (j-1)N_x + i$.\n\nThe computational cost (measured in floating-point operations) for solving this system using a direct solver that exploits the matrix's band structure, such as banded LU decomposition, is approximately proportional to $N B^2$, where $B$ is the semi-bandwidth of the matrix $A$. The semi-bandwidth is defined as the maximum absolute difference $|r-c|$ for which the matrix element $A_{rc}$ can be non-zero, for $r \\ne c$.\n\nAn engineer is tasked with simulating flow over a rectangular plate and needs to generate a grid with exactly $10,000$ nodes. They are considering two different structured grid configurations:\n- **Case 1:** A grid with high aspect ratio, where $N_x = 2000$ and $N_y = 5$.\n- **Case 2:** A grid with unit aspect ratio, where $N_x = 100$ and $N_y = 100$.\n\nAssuming the same row-wise ordering scheme and direct solver are used for both cases, calculate the ratio of the computational cost for Case 1 to the computational cost for Case 2.", "solution": "We are given a structured grid with mapping from 2D indices $(i,j)$ to 1D index $k$ defined by $k=(j-1)N_{x}+i$. Using a five-point stencil, each interior node couples to its neighbors at $(i-1,j)$, $(i+1,j)$, $(i,j-1)$, $(i,j+1)$.\n\nUnder the mapping:\n- $(i-1,j)$ and $(i+1,j)$ map to indices $k-1$ and $k+1$, respectively, giving $|r-c|=1$.\n- $(i,j-1)$ and $(i,j+1)$ map to indices $k-N_{x}$ and $k+N_{x}$, respectively, giving $|r-c|=N_x$.\n\nBy the given definition, the semi-bandwidth $B$ is the maximum $|r-c|$ for which $A_{rc}\\neq 0$ with $r\\ne c$. Therefore,\n$$\nB=N_{x}.\n$$\nThe direct banded solver cost is proportional to $N B^{2}$. For both cases, $N=N_{x}N_{y}=10000$, so the ratio of costs between Case 1 and Case 2 is\n$$\n\\frac{N B_{1}^{2}}{N B_{2}^{2}}=\\frac{B_{1}^{2}}{B_{2}^{2}}=\\frac{N_{x,1}^{2}}{N_{x,2}^{2}}=\\frac{2000^{2}}{100^{2}}=400.\n$$\nThus, Case 1 is more expensive by a factor of $400$ compared to Case 2.", "answer": "$$\\boxed{400}$$", "id": "1761189"}]}