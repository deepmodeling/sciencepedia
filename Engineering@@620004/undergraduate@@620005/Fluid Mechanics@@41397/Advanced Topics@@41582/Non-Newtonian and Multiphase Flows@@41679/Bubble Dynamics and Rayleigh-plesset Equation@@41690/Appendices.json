{"hands_on_practices": [{"introduction": "The Rayleigh-Plesset equation is the cornerstone of bubble dynamics, describing the radial motion of a bubble in a liquid. This first exercise provides a direct entry into applying this powerful equation. By considering a bubble initially in equilibrium that experiences a sudden drop in external pressure, you will determine its immediate reaction, specifically its initial acceleration. This practice is crucial for understanding how pressure imbalances drive bubble motion and for learning how to use initial conditions to analyze a dynamic system right from its start [@problem_id:1739170].", "problem": "A single spherical gas bubble is held stationary in a large volume of an incompressible, ideal (non-viscous) liquid. The liquid has a constant density $\\rho_L$ and a surface tension $\\sigma$ at the gas-liquid interface.\n\nInitially, for time $t < 0$, the bubble has a constant radius $R_0$ and is in mechanical equilibrium with the surrounding liquid, which is at a uniform, constant pressure $P_{ext}$.\n\nThe radial motion of the bubble wall, $R(t)$, is governed by the following simplified version of the Rayleigh-Plesset equation:\n$$ R(t)\\ddot{R}(t) + \\frac{3}{2}\\dot{R}(t)^2 = \\frac{1}{\\rho_L} \\left( P_g(t) - P_\\infty(t) - \\frac{2\\sigma}{R(t)} \\right) $$\nHere, $P_g(t)$ is the pressure of the gas inside the bubble, $P_\\infty(t)$ is the pressure in the liquid far from the bubble, and $\\dot{R}$ and $\\ddot{R}$ denote the radial velocity and acceleration of the bubble wall, respectively. The internal gas pressure follows the polytropic law $P_g(t) = P_{g0}(R_0/R(t))^{3\\gamma}$, where $P_{g0}$ is the gas pressure at $t<0$ and $\\gamma$ is the polytropic index.\n\nAt time $t=0$, the external pressure is instantaneously reduced to zero, i.e., $P_\\infty(t) = 0$ for all $t \\ge 0$.\n\nDetermine an expression for the initial radial acceleration of the bubble wall, $\\ddot{R}(0)$.", "solution": "We start from the given simplified Rayleigh-Plesset equation\n$$\nR(t)\\ddot{R}(t) + \\frac{3}{2}\\dot{R}(t)^{2} = \\frac{1}{\\rho_{L}}\\left(P_{g}(t) - P_{\\infty}(t) - \\frac{2\\sigma}{R(t)}\\right).\n$$\nFor $t<0$, the bubble is stationary with constant radius $R_{0}$ and the far-field pressure is $P_{\\infty}=P_{ext}$. Mechanical equilibrium then implies $\\dot{R}=0$ and $\\ddot{R}=0$, so substituting $R=R_{0}$, $\\dot{R}=0$, $\\ddot{R}=0$, and $P_{\\infty}=P_{ext}$ yields\n$$\n0 = \\frac{1}{\\rho_{L}}\\left(P_{g0} - P_{ext} - \\frac{2\\sigma}{R_{0}}\\right),\n$$\nhence\n$$\nP_{g0} = P_{ext} + \\frac{2\\sigma}{R_{0}}.\n$$\nAt $t=0^{+}$, the far-field pressure is instantaneously set to $P_{\\infty}(t)=0$. Because the change is instantaneous, the interface position and velocity are continuous at $t=0$, so\n$$\nR(0)=R_{0}, \\quad \\dot{R}(0)=0.\n$$\nThe gas pressure follows the polytropic law $P_{g}(t)=P_{g0}\\left(\\frac{R_{0}}{R(t)}\\right)^{3\\gamma}$, so at $t=0$,\n$$\nP_{g}(0) = P_{g0}\\left(\\frac{R_{0}}{R_{0}}\\right)^{3\\gamma} = P_{g0} = P_{ext} + \\frac{2\\sigma}{R_{0}}.\n$$\nEvaluate the Rayleigh-Plesset equation at $t=0$ with $R(0)=R_{0}$, $\\dot{R}(0)=0$, and $P_{\\infty}(0)=0$:\n$$\nR_{0}\\ddot{R}(0) + \\frac{3}{2}\\cdot 0^{2} = \\frac{1}{\\rho_{L}}\\left(P_{g}(0) - 0 - \\frac{2\\sigma}{R_{0}}\\right).\n$$\nThis simplifies to\n$$\n\\ddot{R}(0) = \\frac{1}{\\rho_{L}R_{0}}\\left(P_{g}(0) - \\frac{2\\sigma}{R_{0}}\\right).\n$$\nSubstituting $P_{g}(0)=P_{ext} + \\frac{2\\sigma}{R_{0}}$ gives\n$$\n\\ddot{R}(0) = \\frac{1}{\\rho_{L}R_{0}}\\left(P_{ext} + \\frac{2\\sigma}{R_{0}} - \\frac{2\\sigma}{R_{0}}\\right) = \\frac{P_{ext}}{\\rho_{L}R_{0}}.\n$$\nTherefore, the initial radial acceleration is\n$$\n\\ddot{R}(0) = \\frac{P_{ext}}{\\rho_{L}R_{0}}.\n$$", "answer": "$$\\boxed{\\frac{P_{ext}}{\\rho_{L}R_{0}}}$$", "id": "1739170"}, {"introduction": "While analyzing dynamics at a single instant is useful, understanding how different physical forces compete during a process like bubble collapse offers deeper insight. This problem introduces the powerful technique of scaling analysis to assess the relative importance of inertial forces versus surface tension during the final, violent moments of collapse. Mastering this approach allows you to make justified simplifications in complex models and develop a strong physical intuition for which effects dominate in different regimes [@problem_id:1739111].", "problem": "The dynamics of a spherical gas bubble in an infinite, incompressible, and inviscid liquid are described by the simplified Rayleigh-Plesset equation:\n$$ p_{B}(t) - p_{\\infty} = \\rho \\left( R(t)\\frac{d^2R(t)}{dt^2} + \\frac{3}{2}\\left(\\frac{dR(t)}{dt}\\right)^2 \\right) + \\frac{2\\sigma}{R(t)} $$\nHere, $R(t)$ is the instantaneous radius of the bubble, $p_{B}(t)$ is the pressure of the gas inside the bubble, $p_{\\infty}$ is the constant ambient pressure of the liquid far from the bubble, $\\rho$ is the constant density of the liquid, and $\\sigma$ is the constant surface tension at the gas-liquid interface.\n\nThe term $\\rho \\left( R \\ddot{R} + \\frac{3}{2} \\dot{R}^2 \\right)$, where dots denote time derivatives, represents the inertial effects of the accelerating liquid surrounding the bubble. The term $\\frac{2\\sigma}{R}$ represents the pressure contribution from surface tension.\n\nConsider a scenario where the bubble undergoes a violent collapse. A more detailed analysis (which you can assume to be correct) shows that during the final moments of this collapse, as the radius $R$ becomes very small, the square of the bubble wall's velocity follows the scaling law $\\left(\\frac{dR}{dt}\\right)^2 \\propto R^{-3}$.\n\nLet $\\mathcal{R}_{ratio}$ be the ratio of the magnitude of the surface tension pressure term to the magnitude of the dominant inertial term(s) in the Rayleigh-Plesset equation. Based on an analysis of the provided scaling law, determine how this ratio behaves as $R \\to 0$ during the collapse. Then, decide in which of the following two phases it is more physically justifiable to neglect the surface tension term: (I) the very beginning of a slow expansion from a very small initial radius, or (II) the final moments of a violent collapse.\n\nWhich of the following statements is correct?\n\nA. The ratio $\\mathcal{R}_{ratio}$ approaches zero as $R \\to 0$. Therefore, neglecting surface tension is more justifiable during the final violent collapse.\n\nB. The ratio $\\mathcal{R}_{ratio}$ approaches infinity as $R \\to 0$. Therefore, neglecting surface tension is more justifiable during the initial slow expansion.\n\nC. The ratio $\\mathcal{R}_{ratio}$ remains constant as $R \\to 0$. Therefore, the relative importance of surface tension is the same in both phases.\n\nD. The ratio $\\mathcal{R}_{ratio}$ approaches zero as $R \\to 0$. Therefore, neglecting surface tension is more justifiable during the initial slow expansion.\n\nE. The ratio $\\mathcal{R}_{ratio}$ approaches infinity as $R \\to 0$. Therefore, neglecting surface tension is more justifiable during the final violent collapse.", "solution": "We start from the simplified Rayleigh-Plesset equation:\n$$\np_{B}(t) - p_{\\infty} = \\rho \\left( R \\ddot{R} + \\frac{3}{2}\\dot{R}^{2} \\right) + \\frac{2\\sigma}{R}.\n$$\nDefine the ratio of interest as the magnitude of the surface tension pressure term divided by the magnitude of the dominant inertial term(s):\n$$\n\\mathcal{R}_{ratio} \\equiv \\frac{\\left|\\frac{2\\sigma}{R}\\right|}{\\left|\\rho\\left(R\\ddot{R} + \\frac{3}{2}\\dot{R}^{2}\\right)\\right|}.\n$$\nDuring the final moments of a violent collapse, we are given the scaling law\n$$\n\\dot{R}^{2} \\propto R^{-3}.\n$$\nIntroduce $V(t) \\equiv \\dot{R}(t)$. Then $V^{2} \\propto R^{-3}$ implies $|V| \\propto R^{-3/2}$. Using the chain rule,\n$$\n\\ddot{R} = \\frac{dV}{dt} = \\frac{dV}{dR}\\frac{dR}{dt} = \\frac{dV}{dR}\\,V.\n$$\nSince $V \\propto R^{-3/2}$, we have\n$$\n\\frac{dV}{dR} \\propto R^{-5/2} \\quad \\Longrightarrow \\quad \\ddot{R} \\propto R^{-5/2}\\cdot R^{-3/2} = R^{-4}.\n$$\nTherefore,\n$$\nR\\ddot{R} \\propto R \\cdot R^{-4} = R^{-3}, \\qquad \\dot{R}^{2} \\propto R^{-3}.\n$$\nHence both inertial terms scale as $R^{-3}$, and so does their sum:\n$$\n\\left| \\rho\\left(R\\ddot{R} + \\frac{3}{2}\\dot{R}^{2}\\right) \\right| \\propto \\rho\\,R^{-3}.\n$$\nThe surface tension term scales as\n$$\n\\left| \\frac{2\\sigma}{R} \\right| \\propto \\sigma\\,R^{-1}.\n$$\nThus the ratio scales as\n$$\n\\mathcal{R}_{ratio} \\propto \\frac{\\sigma R^{-1}}{\\rho R^{-3}} = \\frac{\\sigma}{\\rho}\\,R^{2}.\n$$\nAs $R \\to 0$, we have $\\mathcal{R}_{ratio} \\to 0$. Therefore, during the final violent collapse, the inertial terms dominate and neglecting surface tension is more justifiable.\n\nBy contrast, during the very beginning of a slow expansion from a very small radius, the interface speed and acceleration are small, making the inertial terms small, while the surface tension term $\\propto R^{-1}$ is large at small $R$. Hence neglecting surface tension is not as justifiable there.\n\nConsequently, the correct statement is that the ratio approaches zero as $R \\to 0$, and neglecting surface tension is more justifiable during the final violent collapse.", "answer": "$$\\boxed{A}$$", "id": "1739111"}, {"introduction": "Having explored the Rayleigh-Plesset equation analytically, we now turn to a comprehensive computational approach to capture its full complexity. In this capstone exercise, you will implement a numerical simulation to solve the complete equation, incorporating viscosity and an external acoustic driving force. This practice bridges theory and computation, enabling you to model the rich, nonlinear pulsations of a bubble and predict its behavior in realistic applications, from medical ultrasound to sonochemistry [@problem_id:2395994].", "problem": "You are tasked with writing a complete, runnable program that uses the classic fourth-order Rungeâ€“Kutta method to simulate the nonlinear radial pulsation of a spherical gas bubble in an incompressible viscous liquid governed by the Rayleighâ€“Plesset equation. The model is based on Newtonâ€™s second law applied to a spherical control volume and the polytropic compression of the gas. The governing ordinary differential equation is the Rayleighâ€“Plesset equation given by\n$$\n\\rho\\left(R\\,\\ddot{R}+\\frac{3}{2}\\dot{R}^{2}\\right)=P_{g}(R,t)-P_{\\infty}(t)-\\frac{2\\sigma}{R}-\\frac{4\\mu\\dot{R}}{R},\n$$\nwhere $R$ is the bubble radius, $\\dot{R}$ is its time derivative, $\\ddot{R}$ is its second time derivative, $\\rho$ is the liquid density, $\\sigma$ is the surface tension, and $\\mu$ is the dynamic viscosity of the liquid. The surrounding pressure field is\n$$\nP_{\\infty}(t)=P_{0}+P_{A}\\sin(2\\pi f t),\n$$\nwhere $P_{0}$ is the ambient pressure, $P_{A}$ is the acoustic driving amplitude, and $f$ is the driving frequency in hertz (with the sinusoid argument in radians). The gas inside the bubble is modeled as a polytropic process,\n$$\nP_{g}(R,t)=P_{g0}\\left(\\frac{R_{0}}{R}\\right)^{3\\gamma},\n$$\nwith $P_{g0}=P_{0}+\\frac{2\\sigma}{R_{0}}$, $R_{0}$ the equilibrium radius, and $\\gamma$ the polytropic exponent.\n\nInitial conditions are\n$$\nR(0)=R_{0},\\quad \\dot{R}(0)=0.\n$$\n\nConvert the second-order equation into a first-order system by defining $x_{1}=R$ and $x_{2}=\\dot{R}$, and integrate forward in time using the classic fourth-order Rungeâ€“Kutta method with a fixed time step. You must compute the maximum radius attained over the simulation window for each specified test case.\n\nUse the following physical constants for water unless otherwise stated in a test case:\n- Liquid density: $\\rho=1000\\,\\mathrm{kg/m^{3}}$.\n- Dynamic viscosity: $\\mu=1.0\\times 10^{-3}\\,\\mathrm{Pa\\cdot s}$.\n- Surface tension: $\\sigma=0.072\\,\\mathrm{N/m}$.\n- Ambient pressure: $P_{0}=101325\\,\\mathrm{Pa}$.\n- Gas polytropic exponent: $\\gamma=1.4$.\n\nTime discretization:\n- For a driving frequency $f$, use $S$ time steps per cycle with $S=4000$.\n- The time step is $\\Delta t=\\frac{1}{f S}$.\n- For $C$ cycles, the total number of steps is $N=C S$, and the final time is $T=\\frac{C}{f}$.\n\nFor each test case below, simulate from $t=0$ to $t=T$ and record the maximum radius $\\max_{t\\in[0,T]}R(t)$. Express the final answers in micrometers, rounded to exactly $6$ decimal places.\n\nTest suite:\n- Case A (happy path, moderate drive): $R_{0}=5.0\\times 10^{-6}\\,\\mathrm{m}$, $f=25000\\,\\mathrm{Hz}$, $P_{A}=50000\\,\\mathrm{Pa}$, $C=8$, default $\\mu$.\n- Case B (boundary, no drive): $R_{0}=5.0\\times 10^{-6}\\,\\mathrm{m}$, $f=25000\\,\\mathrm{Hz}$, $P_{A}=0\\,\\mathrm{Pa}$, $C=8$, default $\\mu$.\n- Case C (smaller bubble, higher frequency): $R_{0}=3.0\\times 10^{-6}\\,\\mathrm{m}$, $f=100000\\,\\mathrm{Hz}$, $P_{A}=20000\\,\\mathrm{Pa}$, $C=12$, default $\\mu$.\n- Case D (increased viscosity): $R_{0}=5.0\\times 10^{-6}\\,\\mathrm{m}$, $f=25000\\,\\mathrm{Hz}$, $P_{A}=50000\\,\\mathrm{Pa}$, $C=8$, $\\mu=5.0\\times 10^{-3}\\,\\mathrm{Pa\\cdot s}$.\n\nNumerical requirements:\n- Implement the classic fourth-order Rungeâ€“Kutta time integrator for the first-order system with fixed $\\Delta t$ as specified.\n- Ensure the function evaluation uses the Rayleighâ€“Plesset equation as given, with $P_{g0}=P_{0}+\\frac{2\\sigma}{R_{0}}$ and $P_{g}(R,t)=P_{g0}\\left(\\frac{R_{0}}{R}\\right)^{3\\gamma}$.\n- Work in the International System of Units (SI) throughout the simulation. Convert the reported maximum radius to micrometers at the end for output.\n\nFinal output format:\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, with each entry the maximum radius in micrometers for Cases A, B, C, and D, respectively, each rounded to exactly $6$ decimal places, for example $[a,b,c,d]$ where $a$, $b$, $c$, and $d$ are decimal numbers in micrometers.", "solution": "The problem is subjected to validation and is deemed valid. It constitutes a well-posed initial value problem based on established principles of fluid dynamics and is formulated with scientific and mathematical rigor. All necessary parameters, initial conditions, and constants are provided, ensuring a solvable and unambiguous computational task.\n\nThe solution involves numerically integrating the Rayleigh-Plesset equation, a second-order ordinary differential equation (ODE), using the classic fourth-order Runge-Kutta (RK4) method. The first step is to transform the single second-order ODE into a system of two first-order ODEs. Let the state vector be $\\mathbf{x}(t) = [x_1(t), x_2(t)]^T$, where $x_1 = R$ is the bubble radius and $x_2 = \\dot{R}$ is the radial velocity. The derivatives are then:\n$$\n\\frac{dx_1}{dt} = \\dot{R} = x_2\n$$\n$$\n\\frac{dx_2}{dt} = \\ddot{R}\n$$\nThe expression for the radial acceleration, $\\ddot{R}$, is obtained by rearranging the given Rayleigh-Plesset equation:\n$$\n\\rho\\left(R\\,\\ddot{R}+\\frac{3}{2}\\dot{R}^{2}\\right)=P_{g}(R,t)-P_{\\infty}(t)-\\frac{2\\sigma}{R}-\\frac{4\\mu\\dot{R}}{R}\n$$\nIsolating $\\ddot{R}$ yields:\n$$\n\\ddot{R} = \\frac{1}{R} \\left[ \\frac{1}{\\rho} \\left( P_{g}(R,t)-P_{\\infty}(t)-\\frac{2\\sigma}{R}-\\frac{4\\mu\\dot{R}}{R} \\right) - \\frac{3}{2}\\dot{R}^{2} \\right]\n$$\nSubstituting $x_1$ for $R$ and $x_2$ for $\\dot{R}$, and incorporating the given expressions for the internal gas pressure $P_g(R,t)$ and the external acoustic field $P_\\infty(t)$, we define the system of ODEs as $\\dot{\\mathbf{x}} = \\mathbf{F}(t, \\mathbf{x})$:\n$$\n\\mathbf{F}(t, \\mathbf{x}) = \n\\begin{pmatrix} f_1(t, \\mathbf{x}) \\\\ f_2(t, \\mathbf{x}) \\end{pmatrix} = \n\\begin{pmatrix}\nx_2 \\\\\n\\frac{1}{x_1} \\left[ \\frac{1}{\\rho} \\left( \\left(P_0 + \\frac{2\\sigma}{R_0}\\right) \\left(\\frac{R_0}{x_1}\\right)^{3\\gamma} - \\left(P_0 + P_A\\sin(2\\pi f t)\\right) - \\frac{2\\sigma}{x_1} - \\frac{4\\mu x_2}{x_1} \\right) - \\frac{3}{2}x_2^{2} \\right]\n\\end{pmatrix}\n$$\nThe initial conditions are given as $R(0)=R_0$ and $\\dot{R}(0)=0$, which translates to the initial state vector $\\mathbf{x}(0) = [R_0, 0]^T$.\n\nThis initial value problem is solved using the classic fourth-order Runge-Kutta method. For a time step $\\Delta t$, the state at time $t_{n+1} = t_n + \\Delta t$ is computed from the state at $t_n$ using the following formula:\n$$\n\\mathbf{x}_{n+1} = \\mathbf{x}_n + \\frac{\\Delta t}{6} (\\mathbf{k}_1 + 2\\mathbf{k}_2 + 2\\mathbf{k}_3 + \\mathbf{k}_4)\n$$\nwhere the intermediate increments are calculated as:\n$$\n\\begin{aligned}\n\\mathbf{k}_1 &= \\mathbf{F}(t_n, \\mathbf{x}_n) \\\\\n\\mathbf{k}_2 &= \\mathbf{F}(t_n + \\frac{\\Delta t}{2}, \\mathbf{x}_n + \\frac{\\Delta t}{2}\\mathbf{k}_1) \\\\\n\\mathbf{k}_3 &= \\mathbf{F}(t_n + \\frac{\\Delta t}{2}, \\mathbf{x}_n + \\frac{\\Delta t}{2}\\mathbf{k}_2) \\\\\n\\mathbf{k}_4 &= \\mathbf{F}(t_n + \\Delta t, \\mathbf{x}_n + \\Delta t\\,\\mathbf{k}_3)\n\\end{aligned}\n$$\nThis method provides a balance of accuracy and computational efficiency suitable for this type of problem.\n\nThe simulation is performed over a time window from $t=0$ to $t=T$, where $T = C/f$. The time step is fixed at $\\Delta t = 1/(fS)$ with $S=4000$ steps per acoustic cycle, resulting in a total of $N=CS$ steps. The algorithm proceeds as follows:\n1. For each test case, the specific parameters ($R_0, f, P_A, C, \\mu$) and the fixed physical constants ($\\rho, \\sigma, P_0, \\gamma$) are defined. The equilibrium gas pressure $P_{g0} = P_0 + 2\\sigma/R_0$ is pre-calculated.\n2. The initial state $\\mathbf{x}_0 = [R_0, 0]^T$ and time $t_0=0$ are set. A variable `max_radius` is initialized to $R_0$.\n3. A loop iterates from $n=0$ to $N-1$, performing one RK4 step at each iteration to compute $\\mathbf{x}_{n+1}$ from $\\mathbf{x}_n$.\n4. Inside the loop, after each update, the first component of the new state vector, $x_{1,n+1}$, is compared with `max_radius`, and `max_radius` is updated if a new maximum is found.\n5. After the loop completes, the final `max_radius` value, which is in SI units (meters), is converted to micrometers by multiplying by $10^6$.\n6. This result is then rounded to $6$ decimal places as required. The entire procedure is repeated for each of the four specified test cases. The results are collected and formatted into a single string.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the Rayleigh-Plesset equation for bubble pulsation using the RK4 method\n    for a series of test cases and reports the maximum bubble radius.\n    \"\"\"\n    \n    # Define globally fixed physical constants\n    RHO = 1000.0  # Liquid density [kg/m^3]\n    SIGMA = 0.072  # Surface tension [N/m]\n    P0 = 101325.0  # Ambient pressure [Pa]\n    GAMMA = 1.4    # Polytropic exponent\n\n    def F(t, x, params):\n        \"\"\"\n        Computes the derivative vector d(x)/dt for the Rayleigh-Plesset system.\n        x is the state vector [R, R_dot].\n        params is a dictionary containing all physical and simulation parameters.\n        \"\"\"\n        R, R_dot = x\n        \n        # Unpack parameters for clarity\n        rho = params['rho']\n        mu = params['mu']\n        sigma = params['sigma']\n        P0 = params['P0']\n        gamma = params['gamma']\n        R0 = params['R0']\n        f = params['f']\n        P_A = params['P_A']\n        P_g0 = params['P_g0']\n        \n        # Avoid division by zero if R collapses, though not expected in these cases.\n        if R <= 1e-12:\n            return np.array([0.0, 0.0])\n\n        # Gas pressure inside the bubble (polytropic process)\n        P_g = P_g0 * (R0 / R)**(3 * gamma)\n        \n        # External pressure field\n        P_inf = P0 + P_A * np.sin(2 * np.pi * f * t)\n        \n        # Expression for R_ddot (rearranged Rayleigh-Plesset equation)\n        term_in_parenthesis = P_g - P_inf - (2 * sigma / R) - (4 * mu * R_dot / R)\n        R_ddot = (1 / R) * ((1 / rho) * term_in_parenthesis - 1.5 * R_dot**2)\n        \n        return np.array([R_dot, R_ddot])\n\n    def run_simulation(case_config):\n        \"\"\"\n        Runs a single simulation for a given configuration using the RK4 method.\n        \"\"\"\n        # Unpack case-specific parameters\n        R0 = case_config['R0']\n        f = case_config['f']\n        P_A = case_config['P_A']\n        C = case_config['C']\n        mu = case_config['mu']\n        \n        # Calculate derived parameters\n        P_g0 = P0 + (2 * SIGMA / R0)\n        \n        params = {\n            'rho': RHO, 'mu': mu, 'sigma': SIGMA, 'P0': P0, 'gamma': GAMMA,\n            'R0': R0, 'f': f, 'P_A': P_A, 'P_g0': P_g0\n        }\n        \n        # Time discretization settings\n        S = 4000  # Steps per cycle\n        dt = 1.0 / (f * S)\n        num_steps = int(C * S)\n        \n        # Initial conditions\n        t = 0.0\n        # State vector x = [R, R_dot]\n        x = np.array([R0, 0.0])\n        \n        max_radius = R0\n        \n        # RK4 integration loop\n        for _ in range(num_steps):\n            k1 = F(t, x, params)\n            k2 = F(t + 0.5 * dt, x + 0.5 * dt * k1, params)\n            k3 = F(t + 0.5 * dt, x + 0.5 * dt * k2, params)\n            k4 = F(t + dt, x + dt * k3, params)\n            \n            x = x + (dt / 6.0) * (k1 + 2 * k2 + 2 * k3 + k4)\n            t = t + dt\n            \n            # Update the maximum radius observed\n            if x[0] > max_radius:\n                max_radius = x[0]\n                \n        # Convert result from meters to micrometers\n        max_radius_micrometers = max_radius * 1e6\n        return max_radius_micrometers\n\n    # Define the test cases from the problem statement.\n    test_cases = [\n        # Case A: happy path, moderate drive\n        {'R0': 5.0e-6, 'f': 25000, 'P_A': 50000, 'C': 8, 'mu': 1.0e-3},\n        # Case B: boundary, no drive\n        {'R0': 5.0e-6, 'f': 25000, 'P_A': 0, 'C': 8, 'mu': 1.0e-3},\n        # Case C: smaller bubble, higher frequency\n        {'R0': 3.0e-6, 'f': 100000, 'P_A': 20000, 'C': 12, 'mu': 1.0e-3},\n        # Case D: increased viscosity\n        {'R0': 5.0e-6, 'f': 25000, 'P_A': 50000, 'C': 8, 'mu': 5.0e-3},\n    ]\n\n    results = []\n    for case in test_cases:\n        # Run simulation and get the max radius in micrometers\n        max_r_um = run_simulation(case)\n        # Format the result to exactly 6 decimal places\n        results.append(f\"{max_r_um:.6f}\")\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2395994"}]}