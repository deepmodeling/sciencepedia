{"hands_on_practices": [{"introduction": "Understanding synchronous reset begins at the most fundamental level: the flip-flop. This first exercise challenges you to trace the output of a T-flip-flop that includes a synchronous reset input. By stepping through several clock cycles, you will solidify your grasp of the two key principles of synchronous reset: its dependence on the clock edge and its priority over the flip-flop's normal toggle behavior [@problem_id:1965961].", "problem": "A digital system includes a single positive edge-triggered T-type flip-flop. The flip-flop has a clock input (`CLK`), a toggle input (`T`), an active-high synchronous reset input (`RST`), and a single output (`Q`).\n\nThe behavior of the flip-flop is as follows:\n- All state changes occur only on the rising edge of the `CLK` signal.\n- If the `RST` input is high (logic 1) at the rising clock edge, the output `Q` is forced to a low state (logic 0), regardless of the value of the `T` input.\n- If the `RST` input is low (logic 0) at the rising clock edge, the flip-flop operates in its normal mode: the output `Q` holds its previous state if `T` is low (0), and it toggles its state if `T` is high (1).\n\nInitially, before the first clock cycle, the output `Q` is at a low state (0). The values for the `T` and `RST` inputs are held stable just before the rising edge of each of the first six clock cycles, as described in the table below.\n\n| Clock Cycle | `T` Input | `RST` Input |\n| :--- | :---: | :---: |\n| 1 | 1 | 0 |\n| 2 | 1 | 0 |\n| 3 | 1 | 1 |\n| 4 | 0 | 0 |\n| 5 | 1 | 0 |\n| 6 | 0 | 1 |\n\nWhat is the sequence of values for the output `Q` immediately following the rising edge of clock cycles 1 through 6, respectively?\n\nA. 1, 0, 0, 0, 1, 0\n\nB. 1, 0, 1, 1, 0, 0\n\nC. 1, 1, 0, 0, 1, 0\n\nD. 0, 1, 0, 0, 1, 0", "solution": "Let the state immediately after the rising edge of clock cycle $k$ be denoted by $Q[k]$, with the initial condition $Q[0]=0$ given before the first clock. The synchronous active-high reset dominates at the rising edge, so the update rule at each rising edge is:\n- If $RST=1$, then $Q[k]=0$ regardless of $T$.\n- If $RST=0$, then the T flip-flop operates normally, so $Q[k]=Q[k-1}$ if $T=0$ and $Q[k]=\\overline{Q[k-1]}$ if $T=1$.\n\nNow apply this rule cycle by cycle using the table values.\n\nCycle 1: $T=1$, $RST=0$ gives toggle. From $Q[0]=0$, we get $Q[1]=1$.\n\nCycle 2: $T=1$, $RST=0$ gives toggle. From $Q[1]=1$, we get $Q[2]=0$.\n\nCycle 3: $T=1$, $RST=1$ gives synchronous reset. Therefore, $Q[3]=0$.\n\nCycle 4: $T=0$, $RST=0$ gives hold. From $Q[3]=0$, we get $Q[4]=0$.\n\nCycle 5: $T=1$, $RST=0$ gives toggle. From $Q[4]=0$, we get $Q[5]=1$.\n\nCycle 6: $T=0$, $RST=1$ gives synchronous reset. Therefore, $Q[6]=0$.\n\nThus the sequence of outputs immediately after the rising edges of cycles $1$ through $6$ is $1, 0, 0, 0, 1, 0$, which corresponds to option A.", "answer": "$$\\boxed{A}$$", "id": "1965961"}, {"introduction": "Moving from observing behavior to defining it is a critical skill in digital design. This practice requires you to create the logic for a flip-flop that incorporates both a synchronous reset and a clock enable, a common combination in real-world registers. Your task is to translate the specified priority—where reset overrides all other actions—into a precise Boolean characteristic equation that defines the register's next state [@problem_id:1965997].", "problem": "An engineer is designing a custom register for a data processing pipeline. The register, which is a key component of the pipeline's control unit, must behave according to a strict set of rules. The register has one data input `D`, a clock input `CLK`, an active-high synchronous reset input `RST`, and an active-high clock enable input `EN`. The current state of the register is denoted by `Q`, and the state after the next active clock edge is denoted by `Q_next`.\n\nThe required behavior is specified as follows:\n1.  The register's state `Q` can only change on the rising edge of the `CLK` signal.\n2.  When the `RST` input is asserted (logic 1), the register's state must be forced to logic 0 on the immediately following rising clock edge. This reset action has the highest priority and must occur regardless of the state of the `D` or `EN` inputs.\n3.  If the `RST` input is not asserted (logic 0), the register's behavior is then determined by the `EN` input.\n4.  If `EN` is not asserted (logic 0) while `RST` is also 0, the register must hold its current state `Q`.\n5.  If `EN` is asserted (logic 1) while `RST` is 0, the register must load the value from the `D` input.\n\nWhich of the following Boolean expressions correctly represents the characteristic equation for the register, defining the next state `Q_next` in terms of the current state `Q` and the inputs `D`, `RST`, and `EN`? In the options below, the notation `\\overline{X}` represents the logical NOT of `X`, `\\cdot` represents logical AND, and `+` represents logical OR.\n\nA. $Q_{next} = \\overline{RST} \\cdot (\\overline{EN} \\cdot Q + EN \\cdot D)$\n\nB. $Q_{next} = \\overline{EN} \\cdot Q + EN \\cdot (\\overline{RST} \\cdot D)$\n\nC. $Q_{next} = \\overline{RST} \\cdot D + EN \\cdot Q$\n\nD. $Q_{next} = \\overline{RST} \\cdot (Q + EN \\cdot D)$", "solution": "The register changes state only on the rising edge, so its behavior is fully captured by a characteristic equation for $Q_{next}$ as a combinational function of $RST$, $EN$, $D$, and the current $Q$.\n\nThe reset has highest priority and is synchronous, meaning:\n- If $RST=1$, then $Q_{next}=0$ regardless of $EN$, $D$, or $Q$.\n- If $RST=0$, then the $EN$ input governs:\n  - If $EN=0$, hold the current state: $Q_{next}=Q$.\n  - If $EN=1$, load the input: $Q_{next}=D$.\n\nTo enforce the highest-priority reset, factor $\\overline{RST}$ so that $Q_{next}=0$ whenever $RST=1$:\n$$\nQ_{next}=\\overline{RST}\\cdot F(EN,D,Q).\n$$\nNow define $F$ to realize the enable-controlled behavior when $RST=0$:\n- For $EN=0$, we need $F=Q$.\n- For $EN=1$, we need $F=D$.\nThis is exactly a 2-to-1 multiplexer controlled by $EN$, yielding\n$$\nF=\\overline{EN}\\cdot Q+EN\\cdot D.\n$$\nTherefore,\n$$\nQ_{next}=\\overline{RST}\\cdot\\bigl(\\overline{EN}\\cdot Q+EN\\cdot D\\bigr),\n$$\nwhich matches option A.\n\nFor completeness, brief checks of the other options:\n- Option B: For $RST=1$, it gives $Q_{next}=\\overline{EN}\\cdot Q$, which violates the requirement that $Q_{next}=0$ regardless of $EN$.\n- Option C: For $RST=1$, it gives $Q_{next}=EN\\cdot Q$, again violating the reset priority.\n- Option D: For $RST=0$ and $EN=1$, it gives $Q_{next}=Q+D$ instead of $D$, violating the load behavior.\n\nHence the correct expression is option A.", "answer": "$$\\boxed{A}$$", "id": "1965997"}, {"introduction": "Ideal logic circuits operate instantly, but physical hardware does not. This final exercise bridges the gap between abstract logic and physical reality by focusing on timing analysis. You will calculate the required setup time for a synchronous reset signal that must travel through a combinational logic path before reaching the flip-flop, a crucial calculation for ensuring reliable system operation at speed [@problem_id:1965945].", "problem": "In the design of a synchronous digital system, a specific D Flip-Flop (DFF) must be reset to a '0' state using an active-high external signal named `RST`. The reset is implemented synchronously, meaning the reset action is controlled by the system clock. The `RST` signal is not connected directly to the DFF's asynchronous reset pin, but is instead incorporated into the combinational logic that feeds the DFF's data input, `D`.\n\nThe logic path from the external `RST` signal to the `D` input is as follows: The `RST` signal is connected to one input of a 2-input NAND gate. The other input of this NAND gate is permanently tied to a logic '1' (high voltage). The output of the NAND gate is then passed through an inverter, and the inverter's output is connected directly to the `D` input of the DFF.\n\nThe timing parameters for the components are given as:\n- Propagation delay of the 2-input NAND gate, $t_{pd,\\text{NAND}} = 1.2$ ns.\n- Propagation delay of the inverter, $t_{pd,\\text{INV}} = 0.8$ ns.\n- The required setup time for the DFF's data input (`D` pin), $t_{su,\\text{DFF}} = 2.5$ ns.\n\nCalculate the minimum setup time requirement for the external `RST` signal with respect to the active clock edge, which we will denote as $t_{su,\\text{RST}}$. Express your final answer in nanoseconds (ns) and round it to two significant figures.", "solution": "We are given a synchronous reset implemented by feeding the external signal $RST$ through combinational logic to the D input of a D flip-flop. The path is $RST \\rightarrow \\text{2-input NAND (other input tied to }1)} \\rightarrow \\text{inverter} \\rightarrow D$. Functionally, since $\\text{NAND}(RST,1)=\\overline{RST}$ and the inverter outputs $\\overline{\\overline{RST}}=RST$, the overall logic is a buffer, so the polarity does not affect the timing analysis. The total propagation delay from $RST$ to $D$ is the sum of the individual gate propagation delays.\n\nDefine the path delay:\n$$\nt_{pd,\\text{path}}=t_{pd,\\text{NAND}}+t_{pd,\\text{INV}}.\n$$\n\nFor a synchronous input to meet the flip-flop setup time, the signal at $D$ must be stable at least $t_{su,\\text{DFF}}$ before the active clock edge. If $RST$ is the controlling external signal and changes at time $-t_{su,\\text{RST}}$ relative to the active clock edge, its effect appears at $D$ after the path delay. Therefore, to ensure $D$ is valid by $-t_{su,\\text{DFF}}$, we require\n$$\n-t_{su,\\text{RST}}+t_{pd,\\text{path}}\\leq -t_{su,\\text{DFF}},\n$$\nwhich rearranges to\n$$\nt_{su,\\text{RST}}=t_{su,\\text{DFF}}+t_{pd,\\text{path}}.\n$$\n\nSubstituting the given values,\n$$\nt_{pd,\\text{path}}=1.2\\ \\text{ns}+0.8\\ \\text{ns}=2.0\\ \\text{ns},\n$$\nand hence\n$$\nt_{su,\\text{RST}}=2.5\\ \\text{ns}+2.0\\ \\text{ns}=4.5\\ \\text{ns}.\n$$\n\nRounded to two significant figures, the required minimum setup time for $RST$ relative to the active clock edge is $4.5$ ns.", "answer": "$$\\boxed{4.5}$$", "id": "1965945"}]}