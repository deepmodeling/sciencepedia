{"hands_on_practices": [{"introduction": "To truly grasp how an SR latch functions as a memory element, it's essential to trace its behavior over time. This first practice exercise simulates the step-by-step response of a NOR-based SR latch to a specific sequence of inputs [@problem_id:1971752]. By tracking the outputs $Q$ and $\\bar{Q}$ as the Set and Reset signals change, you will gain an intuitive understanding of the latch's fundamental operations: set, reset, and hold.", "problem": "A fundamental memory element in digital circuits, the Set-Reset (SR) latch, can be constructed from two cross-coupled 2-input NOR gates. In this configuration, the first NOR gate receives input R and the output of the second NOR gate; the output of this first gate is Q. The second NOR gate receives input S and the output of the first gate (Q); the output of this second gate is $\\bar{Q}$. The behavior of a 2-input NOR gate is defined such that its output is 1 if and only if both of its inputs are 0; for any other combination of inputs, its output is 0.\n\nConsider such an SR latch. Initially, at time $t_0$, the inputs are S=0 and R=0, and the latch is in an unknown, but stable, state. A sequence of input changes then occurs. Assume that after each change, the outputs Q and $\\bar{Q}$ are allowed sufficient time to stabilize before the next input change.\n\nThe sequence of events is as follows:\n1. At time $t_1$, input R changes from 0 to 1, while S remains 0.\n2. At time $t_2$, input S changes from 0 to 1, while R remains 1.\n3. At time $t_3$, input R changes from 1 to 0, while S remains 1.\n4. At time $t_4$, input S changes from 1 to 0, while R remains 0.\n\nDetermine the final binary values of the outputs Q and $\\bar{Q}$ after the system has stabilized following the last input change at time $t_4$. Express your answer as a row matrix of the form $\\begin{pmatrix} Q & \\bar{Q} \\end{pmatrix}$.", "solution": "Let the NOR-based SR latch be described by the Boolean equations\n$$Q=\\overline{R+\\bar{Q}},\\qquad \\bar{Q}=\\overline{S+Q}.$$\nAt $t_{0}$, $S=0$ and $R=0$, so the latch holds its state. The stable possibilities are $Q=0$, $\\bar{Q}=1$ or $Q=1$, $\\bar{Q}=0$.\n\nAt $t_{1}$, $R$ changes to $1$ while $S=0$. Then $Q=\\overline{1+\\bar{Q}}=0$, and with $Q=0$ and $S=0$, $\\bar{Q}=\\overline{0+0}=1$. Thus the latch stabilizes to $Q=0$, $\\bar{Q}=1$ (reset).\n\nAt $t_{2}$, $S$ changes to $1$ while $R=1$. Then $\\bar{Q}=\\overline{1+Q}=0$ and $Q=\\overline{1+\\bar{Q}}=0$. The latch stabilizes to $Q=0$, $\\bar{Q}=0$ under the forbidden input condition $S=R=1$.\n\nAt $t_{3}$, $R$ changes to $0$ while $S=1$. Then $\\bar{Q}=\\overline{1+Q}=0$, which with $R=0$ gives $Q=\\overline{0+0}=1$. The latch stabilizes to $Q=1$, $\\bar{Q}=0$ (set).\n\nAt $t_{4}$, $S$ changes to $0$ while $R=0$. With $S=R=0$, the latch holds its previous state. Checking consistency: $\\bar{Q}=\\overline{0+Q}=\\overline{0+1}=0$ and $Q=\\overline{0+\\bar{Q}}=\\overline{0+0}=1$. Therefore the final state is $Q=1$, $\\bar{Q}=0$.\n\nHence, after stabilization following $t_{4}$, the outputs are $\\begin{pmatrix}1 & 0\\end{pmatrix}$.", "answer": "$$\\boxed{\\begin{pmatrix} 1 & 0 \\end{pmatrix}}$$", "id": "1971752"}, {"introduction": "While tracing signals is insightful, a more powerful tool for a circuit designer is a concise mathematical description of a component's behavior. This exercise challenges you to derive the characteristic equation for the SR latch, which defines its next state ($Q_{\\text{next}}$) as a function of its current state and inputs [@problem_id:1971748]. Using a Karnaugh map, a standard technique for logic simplification, you will transform the latch's operational rules into its most efficient sum-of-products expression.", "problem": "A Set-Reset (SR) latch is a fundamental bistable multivibrator used as a basic memory element in sequential digital circuits. Consider an SR latch constructed from two cross-coupled NOR gates. This latch has two inputs, Set (S) and Reset (R), and one of its outputs represents the current state, Q. The behavior of the latch is such that its next state, denoted as $Q_{\\text{next}}$, is determined by the inputs S and R, and the current state Q. The operational rules are as follows:\n\n1.  **Hold State**: When S=0 and R=0, the latch maintains its current state, so $Q_{\\text{next}} = Q$.\n2.  **Set State**: When S=1 and R=0, the latch is set, forcing its state to 1, so $Q_{\\text{next}} = 1$.\n3.  **Reset State**: When S=0 and R=1, the latch is reset, forcing its state to 0, so $Q_{\\text{next}} = 0$.\n4.  **Forbidden State**: The input combination S=1 and R=1 is considered forbidden because it leads to an logically inconsistent state where both outputs of the NOR-gate implementation are driven to 0. For the purpose of logical function simplification, the value of $Q_{\\text{next}}$ under this condition is treated as a \"don't care\".\n\nYour task is to derive the minimal sum-of-products (SOP) expression for the next state, $Q_{\\text{next}}$, as a function of the variables S, R, and Q. A sum-of-products expression is a Boolean expression written as a logical sum (OR) of one or more product (AND) terms. The minimal expression is defined as the one containing the fewest number of literals.", "solution": "Let the Boolean function be $Q_{\\text{next}}(S,R,Q)$. From the operational rules:\n\n- For $S=1, R=0$, $Q_{\\text{next}}=1$ for both $Q=0$ and $Q=1$. The corresponding minterms are $S\\,\\overline{R}\\,\\overline{Q}$ and $S\\,\\overline{R}\\,Q$, which combine to $S\\,\\overline{R}(\\overline{Q}+Q)=S\\,\\overline{R}$ by complementarity $\\overline{Q}+Q=1$.\n- For $S=0, R=0$, $Q_{\\text{next}}=Q$. This contributes the minterm $\\overline{S}\\,\\overline{R}\\,Q$ (since only $Q=1$ yields $Q_{\\text{next}}=1$ here).\n- For $S=0, R=1$, $Q_{\\text{next}}=0$, which adds no minterms.\n- For $S=1, R=1$, the output is a don't-care, allowing simplification freedom.\n\nThus, the initial sum-of-products from the specified 1-cases is\n$$\nQ_{\\text{next}}=S\\,\\overline{R}+\\overline{S}\\,\\overline{R}\\,Q=\\overline{R}\\,(S+\\overline{S}\\,Q).\n$$\nUse the don't-care set at $S=1, R=1$ to absorb $S\\,\\overline{R}$ into $S$ via $S=S\\,\\overline{R}+S\\,R$, where the $S\\,R$ portion lies entirely in the don't-care condition and does not affect specified behavior. Hence,\n$$\nQ_{\\text{next}}=S+\\overline{S}\\,\\overline{R}\\,Q.\n$$\nApply the Boolean identity $X+\\overline{X}\\,Y=X+Y$ with $X=S$ and $Y=\\overline{R}\\,Q$ to obtain the minimal sum-of-products:\n$$\nQ_{\\text{next}}=S+\\overline{R}\\,Q.\n$$\nVerification against the specified cases:\n- $S=0, R=0$: $Q_{\\text{next}}=0+\\overline{0}\\,Q=Q$.\n- $S=1, R=0$: $Q_{\\text{next}}=1+\\overline{0}\\,Q=1$.\n- $S=0, R=1$: $Q_{\\text{next}}=0+\\overline{1}\\,Q=0$.\n- $S=1, R=1$: $Q_{\\text{next}}=1+\\overline{1}\\,Q=1$, which is acceptable due to the don't-care condition.\n\nThis expression has three literals, which is minimal under the given constraints.", "answer": "$$\\boxed{S+\\overline{R}Q}$$", "id": "1971748"}, {"introduction": "A deep understanding of a circuit comes from being able to predict its behavior even when things go wrong. This practice problem presents a common real-world scenario: a manufacturing fault where a component is incorrectly substituted [@problem_id:1971721]. By analyzing a latch built with one NOR gate and one NAND gate, you will apply your analytical skills to diagnose how this error fundamentally alters the circuit's ability to set and reset, demonstrating a key aspect of digital systems troubleshooting.", "problem": "A standard Set-Reset (SR) latch is a fundamental bistable multivibrator used for storing a single bit of information. A common implementation uses two cross-coupled NOR gates. The inputs are Set (S) and Reset (R), and the outputs are Q and its complement $\\bar{Q}$. The logical connections for a standard NOR-based SR latch are defined by the equations $Q = \\text{NOR}(R, \\bar{Q})$ and $\\bar{Q} = \\text{NOR}(S, Q)$.\n\nImagine a scenario where a technician assembles an SR latch, but makes a manufacturing error. The NOR gate that produces the Q output is mistakenly replaced with a NAND gate. The second gate, which produces the $\\bar{Q}$ output, remains a NOR gate as intended. The inputs S and R are connected to this faulty circuit in the conventional manner.\n\nGiven this faulty circuit, which of the following statements correctly describes its long-term operational behavior after it has been powered on and subjected to various inputs?\n\nA. The circuit can no longer store a bit; its outputs Q and $\\bar{Q}$ behave as purely combinational functions of the inputs S and R.\n\nB. The circuit gets stuck in a state where the output Q=0 and can never be set to Q=1.\n\nC. The circuit functions as a normal SR latch, but with inverted logic, meaning S=1 acts as a reset and R=1 acts as a set.\n\nD. The circuit gets permanently stuck in a state where the output Q=1 after the first time it is set, and can never be reset to Q=0.\n\nE. The circuit becomes unstable and oscillates for the input combination S=1, R=1.", "solution": "The problem asks us to analyze a faulty Set-Reset (SR) latch where one of the NOR gates has been replaced by a NAND gate. Let's define the logical equations that govern this modified circuit.\n\nThe standard connections are:\n- The gate producing Q has inputs R and $\\bar{Q}$.\n- The gate producing $\\bar{Q}$ has inputs S and Q.\n\nAccording to the fault description, the gate producing Q is a NAND gate, and the gate producing $\\bar{Q}$ is a NOR gate. Therefore, the behavior of the circuit is described by the following Boolean expressions, where the outputs at the next time step ($Q_{\\text{next}}$, $\\bar{Q}_{\\text{next}}$) are functions of the current inputs (S, R) and current outputs (Q, $\\bar{Q}$):\n\n1.  $Q_{\\text{next}} = \\text{NAND}(R, \\bar{Q}) = \\overline{R \\cdot \\bar{Q}}$\n2.  $\\bar{Q}_{\\text{next}} = \\text{NOR}(S, Q) = \\overline{S + Q}$\n\nTo determine the overall behavior, we must analyze how the circuit transitions between states. A key aspect of a latch is its ability to be \"set\" (Q=1) and \"reset\" (Q=0). Let's first establish if the \"set\" operation works. A set operation corresponds to the input S=1, R=0.\n\nLet's apply S=1 and R=0 to the equations, regardless of the initial state of Q and $\\bar{Q}$:\n$\\bar{Q}_{\\text{next}} = \\overline{S + Q} = \\overline{1 + Q} = \\overline{1} = 0$.\nThe output $\\bar{Q}$ is definitively driven to 0. Now, let's substitute this result into the equation for Q. Since $\\bar{Q}$ will become 0, this new value will feed into the NAND gate.\n$Q_{\\text{next}} = \\overline{R \\cdot \\bar{Q}_{\\text{next}}} = \\overline{0 \\cdot 0} = \\overline{0} = 1$.\nThus, the input combination S=1, R=0 forces the circuit into the stable state $(Q, \\bar{Q}) = (1, 0)$. This means the \"set\" functionality works correctly. Any time S=1 and R=0 are applied, the output Q will become 1.\n\nNow, the crucial question is whether the circuit can ever be \"reset\" from this state. A reset operation would mean causing Q to become 0. To test this, let's assume the circuit is in the set state, i.e., $(Q, \\bar{Q}) = (1, 0)$, and analyze the effect of all possible input combinations.\n\n**Case 1: Apply Hold inputs (S=0, R=0)**\nThe circuit is in state $(Q, \\bar{Q}) = (1, 0)$.\n$Q_{\\text{next}} = \\overline{R \\cdot \\bar{Q}} = \\overline{0 \\cdot 0} = \\overline{0} = 1$.\n$\\bar{Q}_{\\text{next}} = \\overline{S + Q} = \\overline{0 + 1} = \\overline{1} = 0$.\nThe resulting state is $(1, 0)$. The circuit remains unchanged, with Q=1. The reset is not achieved.\n\n**Case 2: Apply Reset inputs (S=0, R=1)**\nThe circuit is in state $(Q, \\bar{Q}) = (1, 0)$. This is the primary test for the reset functionality.\n$Q_{\\text{next}} = \\overline{R \\cdot \\bar{Q}} = \\overline{1 \\cdot 0} = \\overline{0} = 1$.\n$\\bar{Q}_{\\text{next}} = \\overline{S + Q} = \\overline{0 + 1} = \\overline{1} = 0$.\nThe resulting state is $(1, 0)$. The circuit again remains unchanged. The \"reset\" input fails to reset Q to 0.\n\n**Case 3: Apply Set inputs (S=1, R=0)**\nThe circuit is in state $(Q, \\bar{Q}) = (1, 0)$.\n$Q_{\\text{next}} = \\overline{R \\cdot \\bar{Q}} = \\overline{0 \\cdot 0} = \\overline{0} = 1$.\n$\\bar{Q}_{\\text{next}} = \\overline{S + Q} = \\overline{1 + 1} = \\overline{1} = 0$.\nThe resulting state is $(1, 0)$. The circuit remains set, as expected.\n\n**Case 4: Apply Forbidden inputs (S=1, R=1)**\nThe circuit is in state $(Q, \\bar{Q}) = (1, 0)$.\n$Q_{\\text{next}} = \\overline{R \\cdot \\bar{Q}} = \\overline{1 \\cdot 0} = \\overline{0} = 1$.\n$\\bar{Q}_{\\text{next}} = \\overline{S + Q} = \\overline{1 + 1} = \\overline{1} = 0$.\nThe resulting state is $(1, 0)$. The circuit does not oscillate; it remains stable with Q=1.\n\nFrom this analysis, we can conclude that once the circuit enters the state where Q=1 (which can be forced by the \"set\" input S=1, R=0), no combination of inputs can ever force Q back to 0. The reset functionality is permanently broken. Therefore, the circuit becomes stuck with Q=1.\n\nLet's evaluate the given options:\nA. The circuit is not purely combinational because its next state depends on the current state, as is evident from the feedback loop. This is false.\nB. The circuit can be set to Q=1, so it does not get stuck at Q=0. This is false.\nC. The behavior is not that of a normal latch with inverted logic. For instance, a true reset (Q=0) is impossible. This is false.\nD. As our analysis shows, once the circuit is set (Q becomes 1), it can never be reset. This statement is true.\nE. The circuit does not oscillate for S=1, R=1; it settles into the stable state Q=1, $\\bar{Q}$=0. This is false.\n\nThe correct description of the circuit's behavior is that it can be set, but never reset.", "answer": "$$\\boxed{D}$$", "id": "1971721"}]}