{"hands_on_practices": [{"introduction": "Understanding a digital circuit's state table is one thing; proving it works in practice is another. This first exercise places you in the role of a test engineer tasked with verifying the functionality of a NAND-based SR latch. Your goal is to devise a minimal sequence of inputs to confirm that the latch can correctly set, reset, and hold its state, a crucial step in ensuring any digital system's reliability [@problem_id:1971365].", "problem": "An SR latch is a fundamental bistable multivibrator circuit used for storing a single bit of information. Consider an SR latch constructed using two cross-coupled NAND gates. This latch has two inputs, designated as $\\bar{S}$ and $\\bar{R}$, and two outputs, $Q$ and its logical complement $\\bar{Q}$. The inputs are active-low, which means the following input-to-state transitions occur based on the input pair $(\\bar{S}, \\bar{R})$:\n-   Applying the input combination $(\\bar{S}, \\bar{R}) = (0, 1)$ forces the latch into the 'Set' state, where the output becomes $Q=1$.\n-   Applying the input combination $(\\bar{S}, \\bar{R}) = (1, 0)$ forces the latch into the 'Reset' state, where the output becomes $Q=0$.\n-   Applying the input combination $(\\bar{S}, \\bar{R}) = (1, 1)$ is the 'Hold' or 'Memory' command, which causes the latch to maintain its current state ($Q$ remains unchanged).\n-   The input combination $(\\bar{S}, \\bar{R}) = (0, 0)$ is considered invalid as it leads to an undesirable state where both outputs become $Q=1$ and $\\bar{Q}=1$. This combination must not be used in the test sequence.\n\nYour task is to devise a testing procedure for this latch. Starting from an unknown initial power-on state (i.e., you do not know if $Q$ is initially 0 or 1), you need to find the shortest sequence of input combinations $(\\bar{S}, \\bar{R})$ that comprehensively verifies the latch's functionality. A comprehensive verification must demonstrate all three valid operations: Set, Reset, and Hold. Specifically, the test must show that the latch can be set, that it holds the set state, that it can be reset, and that it holds the reset state.\n\nWhich of the following sequences represents a shortest valid testing sequence?\n\nA. $(0, 1) \\rightarrow (1, 1) \\rightarrow (1, 0)$\n\nB. $(1, 1) \\rightarrow (0, 1) \\rightarrow (1, 1) \\rightarrow (1, 0)$\n\nC. $(0, 1) \\rightarrow (1, 0) \\rightarrow (1, 1)$\n\nD. $(1, 0) \\rightarrow (1, 1) \\rightarrow (0, 1) \\rightarrow (1, 1)$\n\nE. $(0, 1) \\rightarrow (1, 1) \\rightarrow (0, 1) \\rightarrow (1, 1)$", "solution": "We model the SR latch (active-low inputs) by the given state-transition rules:\n1) If $(\\bar{S},\\bar{R})=(0,1)$, then the state is forced to $Q'=1$ (Set).\n2) If $(\\bar{S},\\bar{R})=(1,0)$, then the state is forced to $Q'=0$ (Reset).\n3) If $(\\bar{S},\\bar{R})=(1,1)$, then the state holds: $Q'=Q$ (Hold).\n4) $(\\bar{S},\\bar{R})=(0,0)$ is invalid and must not be used.\n\nLet the unknown initial state be $Q_{0}\\in\\{0,1\\}$. A comprehensive verification must demonstrate, in order, the ability to Set, then Hold the set state, then Reset, and then Hold the reset state. Therefore, any valid sequence must include both a Set and a Reset operation, and must include a Hold after each of those operations. This requires at least four input applications, because each Hold must occur after the corresponding Set or Reset to verify that the achieved state is maintained. Hence, no 3-step sequence can be comprehensive.\n\nWe check the options:\n\nA. $(0,1)\\rightarrow(1,1)\\rightarrow(1,0)$:\n- $Q_{1}=1$ (Set), $Q_{2}=1$ (Hold after Set), $Q_{3}=0$ (Reset). Missing Hold after Reset, so not comprehensive.\n\nB. $(1,1)\\rightarrow(0,1)\\rightarrow(1,1)\\rightarrow(1,0)$:\n- $Q_{1}=Q_{0}$ (initial Hold), $Q_{2}=1$ (Set), $Q_{3}=1$ (Hold after Set), $Q_{4}=0$ (Reset). Missing Hold after Reset, so not comprehensive.\n\nC. $(0,1)\\rightarrow(1,0)\\rightarrow(1,1)$:\n- $Q_{1}=1$ (Set), $Q_{2}=0$ (Reset), $Q_{3}=0$ (Hold after Reset). Missing Hold after Set, so not comprehensive.\n\nD. $(1,0)\\rightarrow(1,1)\\rightarrow(0,1)\\rightarrow(1,1)$:\n- $Q_{1}=0$ (Reset), $Q_{2}=0$ (Hold after Reset), $Q_{3}=1$ (Set), $Q_{4}=1$ (Hold after Set). This demonstrates Reset, Hold (reset state), Set, and Hold (set state). It avoids the invalid $(0,0)$ input and works from any $Q_{0}$.\n\nE. $(0,1)\\rightarrow(1,1)\\rightarrow(0,1)\\rightarrow(1,1)$:\n- Alternates Set and Hold; never demonstrates Reset. Not comprehensive.\n\nThus, the shortest comprehensive sequence is option D, which has the minimal required length of four steps and verifies all required behaviors from an unknown initial state.", "answer": "$$\\boxed{D}$$", "id": "1971365"}, {"introduction": "Verification tests sometimes fail, revealing underlying hardware faults. In this practice, we move from testing a functional circuit to diagnosing a broken one, a critical skill in electronics troubleshooting. You will analyze an SR latch with a 'stuck-at-0' fault—a common failure model—to predict how its behavior deviates from the ideal, teaching you to reason from first principles about how gate-level defects impact overall circuit function [@problem_id:1971360].", "problem": "An active-low Set-Reset (SR) latch is constructed using two cross-coupled 2-input NAND gates. The inputs to the latch are designated $\\bar{S}$ (Set) and $\\bar{R}$ (Reset). The outputs are $Q$ and $\\bar{Q}$. In the standard configuration, the output $Q$ is produced by the NAND gate that takes $\\bar{S}$ and $\\bar{Q}$ as inputs, while the output $\\bar{Q}$ is produced by the NAND gate that takes $\\bar{R}$ and $Q$ as inputs. The behavior of a 2-input NAND gate is such that its output is logic '0' if and only if both of its inputs are logic '1'; otherwise, its output is logic '1'.\n\nThe intended functions of the latch are as follows:\n- **Set:** Applying inputs $\\bar{S}=0$ and $\\bar{R}=1$ forces the output $Q$ to 1.\n- **Reset:** Applying inputs $\\bar{S}=1$ and $\\bar{R}=0$ forces the output $Q$ to 0.\n- **Hold:** Applying inputs $\\bar{S}=1$ and $\\bar{R}=1$ causes the latch to maintain its current state ($Q$ remains unchanged).\n\nA manufacturing defect has introduced a 'stuck-at-0' fault within the latch. This fault causes the input line corresponding to $\\bar{S}$ to be permanently held at logic '0' at the input of its NAND gate, irrespective of the signal applied to the external $\\bar{S}$ pin.\n\nGiven this fault, determine which of the latch's intended functions (Set, Reset, Hold) will still operate correctly.\n\nA. Set only\n\nB. Reset only\n\nC. Hold only\n\nD. Set and Reset only\n\nE. None of the functions operate correctly.", "solution": "The behavior of the active-low SR latch is described by the following boolean expressions for its outputs $Q$ and $\\bar{Q}$, based on its cross-coupled NAND gate structure:\n$$Q = \\text{NAND}(\\bar{S}, \\bar{Q})$$\n$$\\bar{Q} = \\text{NAND}(\\bar{R}, Q)$$\n\nThe problem states that there is a 'stuck-at-0' fault on the $\\bar{S}$ input line. This means that the input to the first NAND gate corresponding to $\\bar{S}$ is always 0, regardless of the external signal. Let's denote this faulty effective input as $\\bar{S}_{\\text{eff}} = 0$.\n\nThe equation for $Q$ is therefore modified by this fault:\n$$Q = \\text{NAND}(\\bar{S}_{\\text{eff}}, \\bar{Q}) = \\text{NAND}(0, \\bar{Q})$$\n\nA fundamental property of a NAND gate is that if any of its inputs are 0, its output is 1. Therefore, the output $Q$ will be permanently forced to a logic '1' state, regardless of the value of $\\bar{Q}$.\n$$Q = 1$$\n\nNow we substitute this fixed value of $Q$ into the equation for the other output, $\\bar{Q}$:\n$$\\bar{Q} = \\text{NAND}(\\bar{R}, Q) = \\text{NAND}(\\bar{R}, 1)$$\n\nThe behavior of a NAND gate with one input held at 1 is that it acts as an inverter for the other input. This is because $\\text{NAND}(A, 1) = \\overline{A \\cdot 1} = \\bar{A}$. In our case, this means:\n$$\\bar{Q} = \\overline{\\bar{R}}$$\nSo, the faulty latch circuit has a permanently high output $Q=1$, and the $\\bar{Q}$ output simply inverts the $\\bar{R}$ input. The $\\bar{S}$ input has no effect on either output. We now test each of the intended functions based on this derived behavior.\n\n**1. Test the 'Set' Function:**\n- Intended inputs: $\\bar{S}=0$, $\\bar{R}=1$.\n- Expected output: $Q$ should be forced to 1 ($Q \\to 1$).\n- Actual output of the faulty circuit: The circuit's behavior is $Q = 1$.\n- The actual output is $Q=1$, which matches the expected output. So the 'Set' function appears to work. However, this is because the output is stuck at 1.\n\n**2. Test the 'Reset' Function:**\n- Intended inputs: $\\bar{S}=1$, $\\bar{R}=0$.\n- Expected output: $Q$ should be forced to 0 ($Q \\to 0$).\n- Actual output of the faulty circuit: The output is always $Q=1$.\n- The actual output is $Q=1$, which is not the expected $Q=0$. Therefore, the **Reset function fails**.\n\n**3. Test the 'Hold' Function:**\n- Intended inputs: $\\bar{S}=1$, $\\bar{R}=1$.\n- Expected output: $Q$ should remain in its previous state (memory).\n- Actual output of the faulty circuit: The output is always $Q=1$.\n- The circuit forces the output $Q$ to be 1, regardless of its previous state. For example, if the latch was somehow in a state with $Q=0$ (which is impossible with this fault), applying the 'Hold' inputs would change the state to $Q=1$. It does not hold an arbitrary previous state. Therefore, the **Hold function fails**.\n\nSince the latch cannot be reset and cannot hold a '0' state, its fundamental memory function is broken. None of the functions operate correctly in a way that provides a functional memory element.", "answer": "$$\\boxed{E}$$", "id": "1971360"}, {"introduction": "Good engineering often involves improving existing designs to make them more robust. The standard SR latch has a significant weakness: the forbidden input state where $\\bar{S}=0$ and $\\bar{R}=0$ leads to ambiguous behavior. This final exercise challenges you to move from analysis to synthesis by designing a simple logic circuit that eliminates this ambiguity, creating a 'reset-dominant' latch where the reset operation takes precedence and ensures predictable behavior under all conditions [@problem_id:1971414].", "problem": "A standard active-low Set-Reset (SR) latch is constructed from two cross-coupled 2-input NAND gates. The inputs are $\\bar{S}$ (active-low Set) and $\\bar{R}$ (active-low Reset), and the outputs are $Q$ and $\\bar{Q}$, where $\\bar{Q}$ is intended to be the complement of $Q$. In this standard configuration, the input combination $\\bar{S}=0$ and $\\bar{R}=0$ is considered invalid or forbidden because it forces both $Q$ and $\\bar{Q}$ to a logic high state (1), violating the complementary nature of the outputs.\n\nYour task is to design a modified latch that resolves this ambiguity by establishing a \"reset-dominant\" behavior. In this new design, when both $\\bar{S}$ and $\\bar{R}$ are asserted (i.e., $\\bar{S}=0$ and $\\bar{R}=0$), the latch must be forced into the reset state ($Q=0$, $\\bar{Q}=1$). All other input combinations should behave as they do in a standard SR latch.\n\nThis modification is achieved by placing a combinational logic circuit in front of the core two-gate NAND latch. The external inputs are $\\bar{S}$ and $\\bar{R}$, and the outputs of the combinational circuit, denoted as $S_{internal}$ and $R_{internal}$, serve as the inputs to the core latch.\n\nDetermine the minimal sum-of-products Boolean expressions for $S_{internal}$ and $R_{internal}$ as functions of the external inputs $\\bar{S}$ and $\\bar{R}$. Let the expression $\\overline{X}$ represent the logical NOT of $X$.\n\nWhich of the following pairs of equations correctly represents the required logic?\n\nA. $S_{internal} = \\bar{S} + \\overline{\\bar{R}}$; $R_{internal} = \\bar{R}$\n\nB. $S_{internal} = \\bar{S}$; $R_{internal} = \\bar{S} + \\bar{R}$\n\nC. $S_{internal} = \\bar{S}$; $R_{internal} = \\bar{R}$\n\nD. $S_{internal} = \\bar{S} \\cdot \\bar{R}$; $R_{internal} = \\bar{S} + \\bar{R}$\n\nE. $S_{internal} = \\overline{\\bar{S}} + \\bar{R}$; $R_{internal} = \\bar{S}$", "solution": "The goal is to design a combinational logic front-end for a standard active-low Set-Reset (SR) NAND latch to make it reset-dominant. The core latch, built from two cross-coupled NAND gates, has active-low inputs. Let's call these internal inputs $\\bar{S}_{internal}$ and $\\bar{R}_{internal}$. Their behavior is as follows:\n- **Reset:** If $\\bar{S}_{internal}=1$ and $\\bar{R}_{internal}=0$, the output becomes $Q=0$.\n- **Set:** If $\\bar{S}_{internal}=0$ and $\\bar{R}_{internal}=1$, the output becomes $Q=1$.\n- **Hold:** If $\\bar{S}_{internal}=1$ and $\\bar{R}_{internal}=1$, the output retains its previous state.\n- **Forbidden:** The combination $\\bar{S}_{internal}=0$ and $\\bar{R}_{internal}=0$ is what we aim to avoid.\n\nOur front-end circuit takes external inputs $\\bar{S}$ and $\\bar{R}$ and produces the internal inputs. We need to map the external inputs to the internal inputs to achieve the desired overall behavior.\n\nThe desired behavior of the modified latch is:\n1.  **Hold State (External $\\bar{S}=1, \\bar{R}=1$):** The latch should hold its state. This requires the internal inputs to be in their hold state: $\\bar{S}_{internal}=1, \\bar{R}_{internal}=1$.\n2.  **Set State (External $\\bar{S}=0, \\bar{R}=1$):** The latch should set ($Q=1$). This requires the internal inputs to be in their set state: $\\bar{S}_{internal}=0, \\bar{R}_{internal}=1$.\n3.  **Reset State (External $\\bar{S}=1, \\bar{R}=0$):** The latch should reset ($Q=0$). This requires the internal inputs to be in their reset state: $\\bar{S}_{internal}=1, \\bar{R}_{internal}=0$.\n4.  **Reset-Dominant State (External $\\bar{S}=0, \\bar{R}=0$):** This is the key modification. The latch must reset ($Q=0$). This also requires the internal inputs to be in their reset state: $\\bar{S}_{internal}=1, \\bar{R}_{internal}=0$.\n\nWe can summarize this mapping in a truth table. The problem uses the names $S_{internal}$ and $R_{internal}$ for the output expressions, so we will adopt this naming convention, where they represent the logic for $\\bar{S}_{internal}$ and $\\bar{R}_{internal}$ respectively.\n\n| External Inputs | Desired Action | Required Internal Inputs |\n| :-------------: | :-------------: | :-----------------------: |\n| $\\bar{S}$ | $\\bar{R}$ | | $S_{internal}$ ($\\bar{S}_{internal}$) | $R_{internal}$ ($\\bar{R}_{internal}$) |\n| 0 | 0 | Reset | 1 | 0 |\n| 0 | 1 | Set | 0 | 1 |\n| 1 | 0 | Reset | 1 | 0 |\n| 1 | 1 | Hold | 1 | 1 |\n\nNow, we derive the Boolean expressions for $S_{internal}$ and $R_{internal}$ as functions of $\\bar{S}$ and $\\bar{R}$ from this table.\n\n**Derivation for $R_{internal}$:**\nThe column for $R_{internal}$ shows that its value is always identical to the value of the external input $\\bar{R}$.\n$R_{internal} = \\bar{R}$\n\n**Derivation for $S_{internal}$:**\nWe create a truth table for $S_{internal}$ based on the external inputs:\n| $\\bar{S}$ | $\\bar{R}$ | $S_{internal}$ |\n| :-------: | :-------: | :------------: |\n| 0 | 0 | 1 |\n| 0 | 1 | 0 |\n| 1 | 0 | 1 |\n| 1 | 1 | 1 |\n\nTo find the minimal sum-of-products expression, we can use Boolean algebra. The sum of minterms (where $S_{internal}=1$) is:\n$S_{internal} = (\\overline{\\bar{S}} \\cdot \\overline{\\bar{R}}) + (\\bar{S} \\cdot \\overline{\\bar{R}}) + (\\bar{S} \\cdot \\bar{R})$\nWe can simplify this by grouping terms. Grouping the second and third terms:\n$S_{internal} = (\\overline{\\bar{S}} \\cdot \\overline{\\bar{R}}) + \\bar{S}(\\overline{\\bar{R}} + \\bar{R})$\nSince $\\overline{\\bar{R}} + \\bar{R} = 1$:\n$S_{internal} = (\\overline{\\bar{S}} \\cdot \\overline{\\bar{R}}) + \\bar{S}(1) = \\overline{\\bar{S}} \\cdot \\overline{\\bar{R}} + \\bar{S}$\nUsing the absorption law ($Y + X \\cdot Y' = Y + X$):\n$S_{internal} = \\bar{S} + \\overline{\\bar{R}}$\n\nSo, the required pair of Boolean expressions is:\n$S_{internal} = \\bar{S} + \\overline{\\bar{R}}$\n$R_{internal} = \\bar{R}$\n\nThis matches option A.", "answer": "$$\\boxed{A}$$", "id": "1971414"}]}