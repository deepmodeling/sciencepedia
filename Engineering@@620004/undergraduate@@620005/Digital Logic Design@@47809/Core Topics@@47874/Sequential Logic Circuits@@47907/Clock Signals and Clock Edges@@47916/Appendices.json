{"hands_on_practices": [{"introduction": "To master synchronous digital design, we must first understand the pacemaker of the system: the clock signal. This initial practice focuses on its most fundamental properties, frequency and duty cycle, which define the rhythm and duration of operations. By calculating the precise time a signal spends in its 'high' state, you will build a foundational understanding of the basic timing parameters that govern every digital circuit [@problem_id:1920932].", "problem": "A microcontroller unit (MCU) operates based on a periodic clock signal that dictates the timing of its internal operations. This signal alternates between a logic 'high' state and a logic 'low' state. The frequency of this clock signal is specified as 40 MHz. The duty cycle of the signal, defined as the fraction of the total period for which the signal is at the logic 'high' state, is 30%.\n\nCalculate the total time duration the clock signal remains at the logic 'high' state during a single clock period.\n\nExpress your final answer in nanoseconds (ns), rounded to two significant figures.", "solution": "The clock period $T$ is the reciprocal of the frequency $f$:\n$$\nT=\\frac{1}{f}.\n$$\nGiven $f=40 \\times 10^{6} \\text{ s}^{-1}$, the period is\n$$\nT=\\frac{1}{40 \\times 10^{6}} \\text{ s}.\n$$\nThe duty cycle $D$ is the fraction of the period at logic high. With $D=0.30$, the high-time duration $t_{\\text{high}}$ per period is\n$$\nt_{\\text{high}}=D\\,T=0.30 \\cdot \\frac{1}{40 \\times 10^{6}} \\text{ s}.\n$$\nCompute the factor:\n$$\n\\frac{0.30}{40}=0.0075=7.5 \\times 10^{-3},\n$$\nso\n$$\nt_{\\text{high}}=7.5 \\times 10^{-3} \\times 10^{-6} \\text{ s}=7.5 \\times 10^{-9} \\text{ s}.\n$$\nConvert seconds to nanoseconds using $1 \\text{ ns}=10^{-9} \\text{ s}$:\n$$\nt_{\\text{high}}=7.5 \\text{ ns}.\n$$\nRounded to two significant figures, this remains $7.5$ in nanoseconds.", "answer": "$$\\boxed{7.5}$$", "id": "1920932"}, {"introduction": "In the real world, digital components are not instantaneous. This exercise moves from the ideal clock signal to its interaction with a physical flip-flop, introducing the critical timing constraints of setup time ($t_{su}$) and hold time ($t_h$). Learning to identify when these rules are violated is a crucial skill for debugging digital systems and ensuring data is captured reliably on each clock edge [@problem_id:1920888].", "problem": "A digital system uses a positive-edge-triggered D-flip-flop to sample a data signal, D. For the flip-flop to correctly capture the data, the data input must remain stable for a minimum duration before the rising clock edge (setup time, $t_{su}$) and for a minimum duration after the rising clock edge (hold time, $t_h$).\n\nThe specific D-flip-flop used in the circuit has the following timing parameters:\n- Setup time, $t_{su} = 2.0$ ns\n- Hold time, $t_h = 1.0$ ns\n\nThe clock signal, CLK, is a periodic square wave. Its rising edges occur precisely at times $t = 10 \\text{ ns}, 20 \\text{ ns}, 30 \\text{ ns}, 40 \\text{ ns}, \\dots$.\n\nThe data signal, D, is initially at a logic low (0) state. It undergoes a series of instantaneous transitions as listed below:\n- The signal transitions from low to high at $t = 7.5$ ns.\n- The signal transitions from high to low at $t = 20.6$ ns.\n- The signal transitions from low to high at $t = 27.5$ ns.\n- The signal transitions from high to low at $t = 32.5$ ns.\n\nA timing violation occurs if the data signal changes at a time that fails to meet either the setup or the hold time requirement with respect to a rising clock edge. Which of the following data transitions causes a timing violation?\n\nA. The transition at $t = 7.5$ ns\n\nB. The transition at $t = 20.6$ ns\n\nC. The transition at $t = 27.5$ ns\n\nD. The transition at $t = 32.5$ ns\n\nE. No timing violations occur.", "solution": "For a positive-edge-triggered D flip-flop with setup time $t_{su}$ and hold time $t_{h}$, a data transition at time $t$ causes a setup violation with respect to a rising edge at time $T$ if $0 < T - t < t_{su}$, and a hold violation if $0 < t - T < t_{h}$. Equivalently, defining the setup window $W^{su}(T) = (T - t_{su}, T)$ and the hold window $W^{h}(T) = (T, T + t_{h})$, a violation occurs if the transition time lies in $W^{su}(T) \\cup W^{h}(T)$ for some rising edge time $T$.\n\nGiven $t_{su} = 2.0 \\text{ ns}$ and $t_{h} = 1.0 \\text{ ns}$, and rising edges at $T_{k} = 10k \\text{ ns}$ for $k \\in \\{1,2,3,\\dots\\}$, evaluate each transition:\n\nA. $t = 7.5 \\text{ ns}$. Relative to $T_{1} = 10 \\text{ ns}$, the setup window is $(10 - 2, 10) = (8, 10) \\text{ ns}$. Since $7.5 \\text{ ns} < 8 \\text{ ns}$, $t \\notin (8,10)$, so no setup violation. The hold window after $10 \\text{ ns}$ is $(10,11) \\text{ ns}$, and $t < 10 \\text{ ns}$, so no hold violation. Therefore, no violation.\n\nB. $t = 20.6 \\text{ ns}$. Relative to $T_{2} = 20 \\text{ ns}$, the setup window is $(18,20) \\text{ ns}$, but $t > 20 \\text{ ns}$, so no setup violation. The hold window is $(20,21) \\text{ ns}$, and since $20 < 20.6 < 21$, $t \\in (20,21)$, giving a hold violation.\n\nC. $t = 27.5 \\text{ ns}$. Relative to $T_{3} = 30 \\text{ ns}$, the setup window is $(28,30) \\text{ ns}$; since $27.5 < 28$, $t \\notin (28,30)$, so no setup violation. Relative to $T_{2} = 20 \\text{ ns}$, the hold window is $(20,21) \\text{ ns}$; since $27.5 > 21$, $t \\notin (20,21)$, so no hold violation. Therefore, no violation.\n\nD. $t = 32.5 \\text{ ns}$. Relative to $T_{3} = 30 \\text{ ns}$, the hold window is $(30,31) \\text{ ns}$; since $32.5 > 31$, $t \\notin (30,31)$, so no hold violation. Relative to $T_{4} = 40 \\text{ ns}$, the setup window is $(38,40) \\text{ ns}$; since $32.5 < 38$, $t \\notin (38,40)$, so no setup violation. Therefore, no violation.\n\nOnly the transition at $t = 20.6 \\text{ ns}$ lies within a hold window and thus causes a timing violation.", "answer": "$$\\boxed{B}$$", "id": "1920888"}, {"introduction": "This final practice challenges you to think like a chip designer, moving from analyzing a specific failure to deriving a general rule to prevent it. You will synthesize concepts like clock-to-Q delay ($t_{cq}$), hold time ($t_{h}$), and logic delay to determine the maximum permissible clock skew ($t_{skew}$) in a data path. This type of analytical derivation is fundamental to creating robust, high-performance integrated circuits that can function correctly despite physical imperfections [@problem_id:1920900].", "problem": "In the design of a custom Application-Specific Integrated Circuit (ASIC) for a machine learning accelerator, a critical data pipeline consists of two sequential, positive-edge-triggered D-type flip-flops, which we will call FF_A (the source flip-flop) and FF_B (the destination flip-flop). The data output (Q) of FF_A is connected to the data input (D) of FF_B through a block of combinational logic.\n\nThe timing characteristics of these components are given by the following symbolic parameters:\n- The clock-to-Q delay of FF_A is $t_{cq}$. This is the time it takes for a change at the D input to appear at the Q output after a triggering clock edge.\n- The hold time of FF_B is $t_{h}$. This is the minimum amount of time the data at the D input must be held stable *after* the triggering clock edge for it to be latched correctly.\n- The minimum contamination delay (i.e., the shortest possible propagation time) through the combinational logic block is denoted by $t_{logic,min}$.\n\nThe clock signal is distributed across the chip and does not arrive at both flip-flops simultaneously. The clock edge arrives at the clock pin of FF_A at time $t_A$ and at the clock pin of FF_B at time $t_B$. The clock skew is defined as $t_{skew} = t_B - t_A$. A positive skew means the clock signal reaches the destination flip-flop FF_B later than the source flip-flop FF_A.\n\nTo ensure functionally correct operation by preventing a hold time violation at FF_B, the clock skew $t_{skew}$ must not exceed a certain maximum value. Derive a closed-form analytic expression for this maximum allowable clock skew, denoted $t_{skew,max}$, in terms of the given parameters $t_{cq}$, $t_{h}$, and $t_{logic,min}$.", "solution": "We analyze the hold-time requirement for a path from the launching flip-flop FF_A to the capturing flip-flop FF_B, both triggered by the positive clock edge.\n\nBy definition, the earliest possible time the data launched by FF_A can appear at the D input of FF_B is determined by the sum of the minimum delays along the path from the launch edge at FF_A:\n- The launch edge reaches FF_A at time $t_{A}$.\n- The earliest change at FF_A’s Q occurs after the clock-to-Q contamination delay, here denoted $t_{cq}$.\n- The earliest propagation through the combinational logic is the minimum contamination delay $t_{logic,min}$.\n\nTherefore, the earliest arrival time of new data at FF_B’s D input is\n$$\nt_{\\text{arrive, early}}=t_{A}+t_{cq}+t_{logic,min}.\n$$\n\nFor correct operation without a hold violation, FF_B’s D input must remain stable for at least its hold time $t_{h}$ after the capturing clock edge arrives at FF_B at time $t_{B}$. Thus, the earliest time at which a change may safely occur at FF_B’s D is\n$$\nt_{\\text{safe}}=t_{B}+t_{h}.\n$$\n\nTo avoid a hold violation, we require\n$$\nt_{A}+t_{cq}+t_{logic,min}\\geq t_{B}+t_{h}.\n$$\nUsing the definition of clock skew $t_{skew}=t_{B}-t_{A}$, rewrite $t_{B}=t_{A}+t_{skew}$ and substitute:\n$$\nt_{A}+t_{cq}+t_{logic,min}\\geq t_{A}+t_{skew}+t_{h}.\n$$\nCancel $t_{A}$ from both sides to obtain\n$$\nt_{cq}+t_{logic,min}\\geq t_{skew}+t_{h}.\n$$\nSolving for the maximum allowable skew yields\n$$\nt_{skew,max}=t_{cq}+t_{logic,min}-t_{h}.\n$$\n\nThis expression states that positive skew must not exceed the sum of the minimum delays to the destination minus the hold time.", "answer": "$$\\boxed{t_{cq}+t_{logic,min}-t_{h}}$$", "id": "1920900"}]}