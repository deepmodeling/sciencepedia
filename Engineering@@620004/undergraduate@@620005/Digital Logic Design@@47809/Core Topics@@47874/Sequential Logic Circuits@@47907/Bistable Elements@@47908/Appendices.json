{"hands_on_practices": [{"introduction": "The journey into sequential circuits begins with mastering the fundamental memory element: the latch. This exercise provides a step-by-step analysis of a gated Set-Reset (SR) latch, a cornerstone of digital memory. By tracing the output through a specific sequence of inputs [@problem_id:1915634], you will develop a concrete understanding of how data is stored and how an enable signal controls the latch's behavior, a foundational skill for analyzing more complex state machines.", "problem": "A gated Set-Reset (SR) latch is a fundamental digital logic circuit used for one-bit data storage. Its state is determined by three inputs: Set ($S$), Reset ($R$), and an enable clock signal ($C$). The latch has one primary output, $Q$. The behavior of this specific latch is defined as follows:\n\n1.  When the enable input $C$ is low ($C=0$), the latch is in a \"latched\" or \"memory\" mode. In this mode, the output $Q$ maintains its last value, irrespective of the $S$ and $R$ inputs.\n2.  When the enable input $C$ is high ($C=1$), the latch is \"transparent\". Its behavior is dictated by the $S$ and $R$ inputs:\n    - If $S=0$ and $R=0$, the latch continues to hold its last value (memory mode).\n    - If $S=1$ and $R=0$, the output $Q$ is \"set\" to 1.\n    - If $S=0$ and $R=1$, the output $Q$ is \"reset\" to 0.\n    - The input combination $S=1$ and $R=1$ is considered invalid and is guaranteed not to occur.\n\nConsider such a gated SR latch whose output $Q$ is initially 0. The inputs $S$, $R$, and $C$ undergo a sequence of changes at discrete time points $t_1, t_2, t_3, t_4$.\n\n-   **Initial State (before $t_1$):** $S=0, R=0, C=0,$ and $Q=0$.\n-   **At time $t_1$:** The inputs change to $S=1, R=0, C=0$.\n-   **At time $t_2$:** The inputs change to $S=1, R=0, C=1$.\n-   **At time $t_3$:** The inputs change to $S=0, R=1, C=1$.\n-   **At time $t_4$:** The inputs change to $S=0, R=0, C=0$.\n\nLet $Q(t_i)$ be the value of the output $Q$ immediately after the input change at time $t_i$. Determine the sequence of output values $(Q(t_1), Q(t_2), Q(t_3), Q(t_4))$.\n\nSelect the correct sequence from the options below.\n\nA. (0, 1, 0, 0)\n\nB. (1, 1, 0, 0)\n\nC. (0, 1, 1, 0)\n\nD. (0, 0, 1, 0)\n\nE. (1, 0, 1, 0)", "solution": "We use the characteristic behavior of a gated SR latch:\n- When $C=0$, the latch is latched: the next output equals the current output, so $Q^{+}=Q$, irrespective of $S$ and $R$.\n- When $C=1$, the latch is transparent and follows:\n  - $(S,R)=(0,0) \\Rightarrow Q^{+}=Q$ (hold),\n  - $(S,R)=(1,0) \\Rightarrow Q^{+}=1$ (set),\n  - $(S,R)=(0,1) \\Rightarrow Q^{+}=0$ (reset),\n  - $(S,R)=(1,1)$ is invalid and not used.\n\nInitially (before $t_{1}$), $S=0$, $R=0$, $C=0$, and $Q=0$.\n\nAt $t_{1}$: Inputs become $S=1$, $R=0$, $C=0$. Since $C=0$, the latch holds its previous value. Therefore, $Q(t_{1})=Q=0$.\n\nAt $t_{2}$: Inputs become $S=1$, $R=0$, $C=1$. With $C=1$ and $(S,R)=(1,0)$, the latch sets. Therefore, $Q(t_{2})=1$.\n\nAt $t_{3}$: Inputs become $S=0$, $R=1$, $C=1$. With $C=1$ and $(S,R)=(0,1)$, the latch resets. Therefore, $Q(t_{3})=0$.\n\nAt $t_{4}$: Inputs become $S=0$, $R=0$, $C=0$. With $C=0$, the latch holds its last value. Therefore, $Q(t_{4})=0$.\n\nThus, the sequence is $(0,1,0,0)$, which corresponds to option A.", "answer": "$$\\boxed{A}$$", "id": "1915634"}, {"introduction": "Beyond understanding the ideal operation of a bistable element, a skilled designer must also anticipate its behavior under non-ideal or forbidden conditions. This thought experiment [@problem_id:1915637] delves into the consequences of applying the \"forbidden\" input combination ($S=1, R=1$) to a basic SR latch. Exploring this scenario reveals the critical real-world concept of race conditions and metastability, highlighting why this theoretically simple state leads to an unpredictable outcome in practice.", "problem": "In digital logic design, a basic bistable memory element can be constructed from two cross-coupled NOR gates. This circuit is known as a Set-Reset (SR) latch. Let the two inputs be $S$ (Set) and $R$ (Reset), and the two outputs be $Q$ and $\\overline{Q}$. The top NOR gate receives inputs $R$ and $\\overline{Q}$ and produces the output $Q$. The bottom NOR gate receives inputs $S$ and $Q$ and produces the output $\\overline{Q}$. The logical behavior of a two-input NOR gate is such that its output is 1 if and only if both of its inputs are 0; otherwise, its output is 0.\n\nConsider an SR latch that is initially stable in the RESET state, where $S=0$ and $R=1$. Following this, the inputs are changed to the normally forbidden state where $S=1$ and $R=1$ for a brief period. Finally, both inputs are simultaneously de-asserted, returning to the quiescent state of $S=0$ and $R=0$.\n\nWhich of the following statements best describes the final, stable state of the outputs $Q$ and $\\overline{Q}$ after this sequence of operations?\n\nA. The latch will reliably return to its initial RESET state ($Q=0, \\overline{Q}=1$).\n\nB. The latch will reliably transition to the SET state ($Q=1, \\overline{Q}=0$).\n\nC. The latch enters a state where both outputs $Q$ and $\\overline{Q}$ are permanently held at 1.\n\nD. The outputs $Q$ and $\\overline{Q}$ will oscillate indefinitely between 0 and 1, never reaching a stable state.\n\nE. The final state is indeterminate; the latch will settle into either the SET or RESET state based on minute, unpredictable differences in gate propagation delays.", "solution": "Let the two cross-coupled NOR equations be\n$$Q=\\overline{R+\\overline{Q}},\\qquad \\overline{Q}=\\overline{S+Q},$$\nwhere $+$ denotes logical OR and the overline denotes logical NOT.\n\nInitial condition: $S=0$, $R=1$. Then\n$$Q=\\overline{1+\\overline{Q}}=0,$$\nand with $Q=0$,\n$$\\overline{Q}=\\overline{0+0}=1.$$\nThus the latch is in RESET with $(Q,\\overline{Q})=(0,1)$.\n\nForbidden input condition: $S=1$, $R=1$. Then\n$$Q=\\overline{1+\\overline{Q}}=0,\\qquad \\overline{Q}=\\overline{1+Q}=0.$$\nBoth outputs are forced to $0$, erasing the previously stored state.\n\nRelease to quiescent condition: $S=0$, $R=0$ simultaneously. The equilibrium equations become\n$$Q=\\overline{0+\\overline{Q}}=\\overline{\\overline{Q}},\\qquad \\overline{Q}=\\overline{0+Q}=\\overline{Q}.$$\nChecking possible steady states:\n- If $Q=1$, then $\\overline{Q}=\\overline{0+1}=0$ and $Q=\\overline{0+0}=1$ are consistent, giving the SET state.\n- If $Q=0$, then $\\overline{Q}=\\overline{0+0}=1$ and $Q=\\overline{0+1}=0$ are consistent, giving the RESET state.\n- The states $(Q,\\overline{Q})=(0,0)$ and $(1,1)$ are inconsistent with the equations for $S=R=0$.\n\nImmediately after $S$ and $R$ fall to $0$, both NOR gates momentarily see both their inputs at $0$ (since both outputs were $0$), so each gate tends to drive its output to $1$. Due to the cross-coupling, both outputs cannot remain $1$; an infinitesimal asymmetry in propagation delays or noise causes one output to reach $1$ first, which then forces the other to $0$. Because the prior state was erased during $S=R=1$, there is no deterministic bias. Therefore, the latch settles into either SET or RESET unpredictably, determined by minute, uncontrollable timing differences.\n\nThus, the final stable state is indeterminate and depends on propagation-delay skews, matching option E.", "answer": "$$\\boxed{E}$$", "id": "1915637"}, {"introduction": "A key skill in digital design is the ability to construct complex components from simpler, available building blocks. This practice [@problem_id:1915639] challenges you to implement a JK flip-flop using a more basic D flip-flop and combinational logic. To succeed, you must translate the descriptive behavior of a JK flip-flop, captured by its characteristic equation $Q_{next} = J\\overline{Q} + \\overline{K}Q$, into a concrete logic circuit that drives the D input, reinforcing the universal principles that connect different types of memory elements.", "problem": "In digital logic design, it is often necessary to implement one type of bistable element (a flip-flop) using another type that is more readily available. Consider a scenario where you have a positive-edge-triggered D flip-flop and a collection of basic logic gates (AND, OR, NOT), but you need the functionality of a positive-edge-triggered JK flip-flop.\n\nA D flip-flop has a single data input, $D$, and its behavior is defined by the characteristic equation $Q_{next} = D$, where $Q_{next}$ is the state of the flip-flop after the next clock edge.\n\nA JK flip-flop has two inputs, $J$ (set) and $K$ (reset), and its behavior is defined by the characteristic equation $Q_{next} = J\\overline{Q} + \\overline{K}Q$, where $Q$ is the current state of the flip-flop.\n\nTo make the D flip-flop behave identically to a JK flip-flop, you must provide a combinational logic circuit that takes the inputs $J$, $K$, and the current state $Q$ of the flip-flop, and generates the correct signal for the $D$ input. Which of the following Boolean expressions correctly defines the input $D$ in terms of $J$, $K$, and $Q$?\n\nA. $D = J\\overline{Q} + \\overline{K}Q$\n\nB. $D = \\overline{J}Q + K\\overline{Q}$\n\nC. $D = JK + \\overline{K}Q$\n\nD. $D = (J+Q)(\\overline{K}+Q)$\n\nE. $D = JQ + \\overline{K}\\overline{Q}$", "solution": "A positive-edge-triggered D flip-flop obeys the characteristic equation $Q_{next}=D$. A positive-edge-triggered JK flip-flop obeys $Q_{next}=J\\overline{Q}+\\overline{K}Q$. To make a D flip-flop emulate a JK flip-flop, the combinational logic driving $D$ must produce exactly the JK next state for every combination of $J$, $K$, and current $Q$. Therefore we require\n$$\nD=Q_{next}^{(\\mathrm{JK})}=J\\overline{Q}+\\overline{K}Q.\n$$\nThis can also be seen by case analysis on $Q$: when $Q=0$, $Q_{next}=J$, giving $D=J\\cdot 1+\\overline{K}\\cdot 0=J$; when $Q=1$, $Q_{next}=\\overline{K}$, giving $D=J\\cdot 0+\\overline{K}\\cdot 1=\\overline{K}$. Thus $D$ must be the 2-to-1 multiplexer expression $D=J\\overline{Q}+\\overline{K}Q$, which matches option A.", "answer": "$$\\boxed{A}$$", "id": "1915639"}]}