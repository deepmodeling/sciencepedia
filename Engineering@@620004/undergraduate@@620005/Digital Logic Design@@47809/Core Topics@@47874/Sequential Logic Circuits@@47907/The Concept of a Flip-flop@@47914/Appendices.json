{"hands_on_practices": [{"introduction": "Understanding the theoretical behavior of a flip-flop is one thing, but tracing its state in response to dynamic signals is a core skill for any digital designer. This first practice challenges you to do just that by analyzing a timing diagram for a T flip-flop, which is designed to toggle its state. By methodically tracking the input at each active clock edge, you will learn to predict the output sequence, reinforcing your grasp of edge-triggering and stateful logic. [@problem_id:1967185]", "problem": "A negative edge-triggered T flip-flop is a digital logic circuit with a clock input (CLK), a toggle input (T), and an output (Q). The state of the output Q changes only on the falling (negative) edge of the clock signal. The behavior is as follows: if the T input is HIGH (logic 1) at the moment of the negative clock edge, the output Q toggles its state (from 0 to 1, or 1 to 0). If the T input is LOW (logic 0) at the moment of the negative clock edge, the output Q holds its current state.\n\nConsider such a flip-flop whose output Q is initially LOW (0) at time $t=0$. It is driven by a periodic clock signal and a time-varying T input, described as follows. Let $\\tau$ be a fundamental time unit.\n\nThe clock (CLK) signal is a periodic square wave with a period of $10\\tau$. For any non-negative integer $n$, the clock signal transitions from LOW to HIGH at $t = 10n\\tau$ and from HIGH to LOW at $t = (10n+5)\\tau$.\n\nThe toggle (T) input signal is described by the following sequence of events:\n- T is initially LOW.\n- At $t=3\\tau$, T transitions to HIGH.\n- At $t=12\\tau$, T transitions to LOW.\n- At $t=22\\tau$, T transitions to HIGH.\n- At $t=31\\tau$, T transitions to LOW.\n- At $t=44\\tau$, T transitions to HIGH, and remains HIGH thereafter.\n\nDetermine the sequence of the five values of the output Q immediately following each of the first five negative clock edges. Which of the following sequences is correct?\n\nA. 1, 0, 1, 0, 1\n\nB. 1, 1, 1, 1, 0\n\nC. 0, 0, 1, 1, 0\n\nD. 0, 1, 1, 0, 0\n\nE. 1, 1, 0, 0, 1", "solution": "A negative edge-triggered T flip-flop updates only at falling clock edges, with the state-update rule at an active edge given by $Q^{+} = T \\oplus Q$, and otherwise $Q$ holds its value. The falling (negative) edges of the given clock occur at times $t_{n}^{-} = (10n+5)\\tau$ for $n = 0,1,2,\\ldots$. The first five such instants are $5\\tau, 15\\tau, 25\\tau, 35\\tau, 45\\tau$. The T input is piecewise constant according to the described transitions: $T=0$ for $t \\in [0,3\\tau)$, $T=1$ for $t \\in [3\\tau,12\\tau)$, $T=0$ for $t \\in [12\\tau,22\\tau)$, $T=1$ for $t \\in [22\\tau,31\\tau)$, $T=0$ for $t \\in [31\\tau,44\\tau)$, and $T=1$ for $t \\in [44\\tau,\\infty)$. With $Q(0)=0$:\n1) At $t=5\\tau$, $T=1$ (since $3\\tau \\leq 5\\tau < 12\\tau$). Thus $Q$ toggles: $Q: 0 \\mapsto 1$.\n2) At $t=15\\tau$, $T=0$ (since $12\\tau \\leq 15\\tau < 22\\tau$). Thus $Q$ holds: $Q: 1 \\mapsto 1$.\n3) At $t=25\\tau$, $T=1$ (since $22\\tau \\leq 25\\tau < 31\\tau$). Thus $Q$ toggles: $Q: 1 \\mapsto 0$.\n4) At $t=35\\tau$, $T=0$ (since $31\\tau \\leq 35\\tau < 44\\tau$). Thus $Q$ holds: $Q: 0 \\mapsto 0$.\n5) At $t=45\\tau$, $T=1$ (since $44\\tau \\leq 45\\tau$). Thus $Q$ toggles: $Q: 0 \\mapsto 1$.\nTherefore, the sequence of $Q$ values immediately after the first five negative edges is $1, 1, 0, 0, 1$, which corresponds to option E.", "answer": "$$\\boxed{E}$$", "id": "1967185"}, {"introduction": "While many types of flip-flops exist, they are all fundamentally related, and a powerful way to understand these relationships is by converting one type into another. This is a common and practical task in digital design, especially when working with a limited inventory of components. This exercise asks you to transform a versatile J-K flip-flop into a D flip-flop, a staple for data latching, by deriving the necessary input logic from their characteristic equations. [@problem_id:1967151]", "problem": "In a digital logic lab, you are tasked with designing a data latching circuit. However, the only sequential logic elements available are J-K flip-flops. A J-K flip-flop has two data inputs, J and K, a clock input, and an output Q. Its behavior is defined by the characteristic equation $Q(t+1) = J\\overline{Q(t)} + \\overline{K}Q(t)$, where $Q(t)$ represents the current state and $Q(t+1)$ represents the state after the next clock pulse.\n\nYour goal is to make this J-K flip-flop behave identically to a D flip-flop. A D flip-flop has a single data input, D, and its behavior is defined by the characteristic equation $Q(t+1) = D$. To achieve this, you must connect the J and K inputs of the J-K flip-flop to logic circuits that take the external data line D as their input.\n\nWhich of the following sets of logic expressions for J and K, in terms of the input D, will correctly convert the J-K flip-flop into a D flip-flop for all possible states and inputs?\n\nA. $J = D$, $K = \\overline{D}$\n\nB. $J = \\overline{D}$, $K = D$\n\nC. $J = D$, $K = D$\n\nD. $J = 1$, $K = D$\n\nE. $J = D$, $K = 0$", "solution": "We start from the given J-K flip-flop characteristic equation:\n$$\nQ(t+1) = J\\,\\overline{Q(t)} + \\overline{K}\\,Q(t).\n$$\nOur goal is to make the device behave as a D flip-flop, which requires\n$$\nQ(t+1) = D\n$$\nfor all possible current states $Q(t)$ and inputs $D$. Let $Q(t)=Q$ for brevity. The expression $J\\,\\overline{Q} + \\overline{K}\\,Q$ must equal $D$ independently of $Q$, so we equate it for the two possible values of $Q$.\n\nFor $Q=0$:\n$$\nQ(t+1) = J\\cdot 1 + \\overline{K}\\cdot 0 = J,\n$$\nand to match $Q(t+1)=D$ we require\n$$\nJ = D.\n$$\n\nFor $Q=1$:\n$$\nQ(t+1) = J\\cdot 0 + \\overline{K}\\cdot 1 = \\overline{K},\n$$\nand to match $Q(t+1)=D$ we require\n$$\n\\overline{K} = D \\quad \\Rightarrow \\quad K = \\overline{D}.\n$$\n\nTherefore, the required connections are $J=D$ and $K=\\overline{D}$, which corresponds to option A.", "answer": "$$\\boxed{A}$$", "id": "1967151"}, {"introduction": "The true power of digital components is realized when they are combined to create more complex, functional units, moving from simple analysis to creative design. In this final practice, you will build a universal synchronous logic cell, a key step toward designing sophisticated state machines. By pairing a basic D flip-flop with a multiplexer, you will engineer a versatile circuit capable of holding, setting, resetting, or toggling its state on command, demonstrating how sequential and combinational logic work together. [@problem_id:1967141]", "problem": "A universal synchronous logic cell is to be designed using a single positive-edge-triggered D-type flip-flop and one 4-to-1 multiplexer. The output of the multiplexer is connected directly to the D input of the flip-flop. Let the current state of the flip-flop be denoted by $Q$.\n\nThe multiplexer has two selection lines, $S_1$ and $S_0$, and four data inputs, labeled $I_0, I_1, I_2,$ and $I_3$. The selection bits $S_1, S_0$ determine which data input is routed to the multiplexer's output. Specifically, when the selection bits have the value corresponding to integer $k$ (where $S_1$ is the most significant bit), the input $I_k$ is selected.\n\nThe cell must perform one of four operations on each clock cycle, determined by the values on the selection lines $S_1$ and $S_0$, as follows:\n- If $S_1S_0 = 00$, the cell must perform a **Hold** operation, meaning the next state of the flip-flop will be the same as its current state.\n- If $S_1S_0 = 01$, the cell must perform a **Synchronous Reset** operation, forcing the next state of the flip-flop to 0.\n- If $S_1S_0 = 10$, the cell must perform a **Synchronous Set** operation, forcing the next state of the flip-flop to 1.\n- If $S_1S_0 = 11$, the cell must perform a **Toggle** operation, meaning the next state of the flip-flop will be the logical inverse of its current state.\n\nThe multiplexer inputs $I_0, I_1, I_2$, and $I_3$ can be connected to the flip-flop's output $Q$, its complement $\\overline{Q}$, the logic constant '0' (logic low), or the logic constant '1' (logic high).\n\nDetermine the correct Boolean expressions for the four multiplexer inputs $I_0, I_1, I_2$, and $I_3$ that implement the specified functionality. Your answer should be a set of four expressions for $I_0, I_1, I_2$, and $I_3$ in that specific order.", "solution": "The goal is to determine the logic expressions for the inputs $I_0, I_1, I_2, I_3$ of a 4-to-1 multiplexer (MUX) that feeds a D-type flip-flop. The overall circuit must implement four different synchronous operations based on two selection lines, $S_1$ and $S_0$.\n\nLet $Q$ be the current state of the D-type flip-flop and $Q_{next}$ be its state after the next clock edge. The characteristic equation of a D-type flip-flop is given by:\n$$Q_{next} = D$$\nwhere $D$ is the input to the flip-flop.\n\nIn this design, the output of the 4-to-1 MUX is connected to the D input of the flip-flop. The general logic function for the output of a 4-to-1 MUX is:\n$$Y_{MUX} = \\overline{S_1}\\overline{S_0}I_0 + \\overline{S_1}S_0I_1 + S_1\\overline{S_0}I_2 + S_1S_0I_3$$\n\nSince $D = Y_{MUX}$, we have:\n$$Q_{next} = \\overline{S_1}\\overline{S_0}I_0 + \\overline{S_1}S_0I_1 + S_1\\overline{S_0}I_2 + S_1S_0I_3$$\n\nWe now analyze the required behavior for each of the four possible combinations of the selection lines $S_1$ and $S_0$.\n\n**Case 1: Hold Operation ($S_1S_0 = 00$)**\nThe problem specifies that for this case, the cell must hold its state. This means the next state must be equal to the current state.\n$$Q_{next} = Q$$\nWhen $S_1=0$ and $S_0=0$, the general equation for $Q_{next}$ simplifies to:\n$$Q_{next} = (1 \\cdot 1 \\cdot I_0) + (1 \\cdot 0 \\cdot I_1) + (0 \\cdot 1 \\cdot I_2) + (0 \\cdot 0 \\cdot I_3) = I_0$$\nTo satisfy the Hold condition, we must equate the required next state with the expression derived from the MUX.\n$$I_0 = Q$$\n\n**Case 2: Synchronous Reset Operation ($S_1S_0 = 01$)**\nFor this case, the next state must be 0, regardless of the current state $Q$.\n$$Q_{next} = 0$$\nWhen $S_1=0$ and $S_0=1$, the general equation for $Q_{next}$ simplifies to:\n$$Q_{next} = (\\overline{0}\\cdot\\overline{1}\\cdot I_0) + (\\overline{0}\\cdot 1 \\cdot I_1) + (0\\cdot\\overline{1}\\cdot I_2) + (0\\cdot 1 \\cdot I_3) = I_1$$\nTo satisfy the Reset condition, we must have:\n$$I_1 = 0$$\n\n**Case 3: Synchronous Set Operation ($S_1S_0 = 10$)**\nFor this case, the next state must be 1, regardless of the current state $Q$.\n$$Q_{next} = 1$$\nWhen $S_1=1$ and $S_0=0$, the general equation for $Q_{next}$ simplifies to:\n$$Q_{next} = (\\overline{1}\\cdot\\overline{0}\\cdot I_0) + (\\overline{1}\\cdot 0 \\cdot I_1) + (1\\cdot\\overline{0}\\cdot I_2) + (1\\cdot 0 \\cdot I_3) = I_2$$\nTo satisfy the Set condition, we must have:\n$$I_2 = 1$$\n\n**Case 4: Toggle Operation ($S_1S_0 = 11$)**\nFor this case, the next state must be the logical inverse of the current state.\n$$Q_{next} = \\overline{Q}$$\nWhen $S_1=1$ and $S_0=1$, the general equation for $Q_{next}$ simplifies to:\n$$Q_{next} = (\\overline{1}\\cdot\\overline{1}\\cdot I_0) + (\\overline{1}\\cdot 1 \\cdot I_1) + (1\\cdot\\overline{1}\\cdot I_2) + (1\\cdot 1 \\cdot I_3) = I_3$$\nTo satisfy the Toggle condition, we must have:\n$$I_3 = \\overline{Q}$$\n\nSummarizing the results, the required Boolean expressions for the multiplexer inputs are:\n$I_0 = Q$\n$I_1 = 0$\n$I_2 = 1$\n$I_3 = \\overline{Q}$", "answer": "$$\\boxed{\\begin{pmatrix} Q & 0 & 1 & \\overline{Q} \\end{pmatrix}}$$", "id": "1967141"}]}