{"hands_on_practices": [{"introduction": "The speed of any digital circuit is fundamentally limited by how quickly signals can propagate through its logical paths and be reliably captured. This first practice explores the cornerstone of timing analysis: calculating the minimum clock period ($T_{min}$). By summing the clock-to-Q delay, the worst-case logic delay, and the setup time, we determine the absolute shortest time a clock cycle can be, which in turn defines the maximum operating frequency of the circuit [@problem_id:1937219].", "problem": "A digital systems engineer is designing a critical data pipeline within a custom processor. This pipeline stage consists of two edge-triggered registers, REG1 and REG2, which are driven by a common system clock. Between the output of REG1 and the input of REG2, there is a block of combinational logic. For the circuit to function correctly, the data signal launched from REG1 must propagate through the logic and be stable at the input of REG2 before the next clock pulse arrives, satisfying the setup time requirement.\n\nThe timing characteristics of the components are as follows:\n- The propagation delay from the clock input to the data output for both registers is $t_{c-q} = 45.2 \\text{ ps}$.\n- The setup time requirement for the data input of both registers is $t_{su} = 35.8 \\text{ ps}$.\n- The maximum propagation delay through any path in the combinational logic block is $t_{logic} = 211.5 \\text{ ps}$.\n\nClock skew and jitter can be ignored for this analysis.\n\nCalculate the minimum clock period, $T_{min}$, required for this circuit to operate correctly. Express your answer in picoseconds (ps), rounded to three significant figures.", "solution": "For a single-cycle path from a launching register (REG1) to a capturing register (REG2), the setup time constraint requires that the next clock period be at least the sum of the launching register clock-to-output delay, the maximum combinational logic delay, and the setup time of the capturing register. With clock skew and jitter ignored, the setup constraint is\n$$\nT_{\\min} \\geq t_{c\\text{-}q} + t_{\\text{logic}} + t_{su}.\n$$\nSubstituting the given values,\n$$\nT_{\\min} \\geq 45.2 \\text{ ps} + 211.5 \\text{ ps} + 35.8 \\text{ ps}.\n$$\nEvaluating the sum,\n$$\nT_{\\min} \\geq 292.5 \\text{ ps}.\n$$\nRounding to three significant figures yields\n$$\nT_{\\min} = 293 \\text{ ps}.\n$$\nSince the problem requests the final answer in picoseconds and specifies to provide only the numerical value in that unit, the final numeric result is 293.", "answer": "$$\\boxed{293}$$", "id": "1937219"}, {"introduction": "While setup time analysis tells us how fast a circuit can run, hold time analysis ensures it runs reliably. A hold time violation occurs if a signal changes too quickly after the clock edge, corrupting the data being latched. This exercise introduces the concept of \"hold slack\" by analyzing the fastest possible signal path, a crucial check to guarantee data stability in any synchronous design [@problem_id:1937246].", "problem": "An engineering team is designing a critical data logging system for a deep-space probe. The system contains a data path between a source register and a destination register, separated by a block of combinational logic. Both registers are controlled by the same master clock. For the system to function correctly, it must satisfy specific timing constraints, including hold time requirements, especially under worst-case temperature conditions that cause the fastest signal propagation.\n\nThe timing parameters for the components in this path have been characterized as follows:\n- The minimum clock-to-Q propagation delay of the source register ($t_{cq,min}$) is 150 ps.\n- The hold time requirement for the destination register ($t_h$) is 200 ps.\n- The minimum propagation delay of the combinational logic block between the registers ($t_{comb,min}$) is 500 ps.\n\nHold slack is defined as the amount of time by which the hold requirement is exceeded. It is calculated as the difference between the earliest time data arrives at the destination register's input and the time until which the data must be held stable after the clock edge. A positive value indicates a safe design, while a negative value signifies a hold time violation.\n\nCalculate the hold slack for this data path. Express your answer in picoseconds (ps).", "solution": "The problem asks for the calculation of the hold slack in a synchronous digital circuit. The hold time constraint ensures that the data at the input of a flip-flop remains stable for a certain duration, the hold time ($t_h$), after the active clock edge arrives. A hold time violation occurs if new data from the previous stage arrives too quickly and overwrites the current data before the destination flip-flop has had enough time to reliably latch it.\n\nLet's analyze the timing for the hold condition. We need to consider the fastest possible path for a signal to travel from the output of the source register to the input of the destination register. This \"fast path\" determines the earliest possible arrival time of the *next* data value at the destination register's input.\n\nThe total time it takes for a signal to propagate from the source register's clock input to the destination register's data input is the sum of the minimum clock-to-Q delay of the source register and the minimum propagation delay of the combinational logic. This is the earliest data arrival time, $t_{arrival,min}$.\n\n$$t_{arrival,min} = t_{cq,min} + t_{comb,min}$$\n\nThe hold time constraint requires that this earliest arrival time must be greater than or equal to the hold time requirement of the destination flip-flop. The old data must be held stable at the destination flip-flop's input for a duration of $t_h$ after the clock edge. The new data, arriving at $t_{arrival,min}$, must not arrive before this hold window closes. Therefore, the condition for meeting the hold time is:\n\n$$t_{arrival,min} \\ge t_h$$\n\nHold slack ($Slack_{hold}$) is the margin by which this condition is met. It is the difference between the actual earliest data arrival time and the required hold time.\n\n$$Slack_{hold} = t_{arrival,min} - t_h$$\n\nSubstituting the expression for $t_{arrival,min}$, we get the formula for hold slack:\n\n$$Slack_{hold} = (t_{cq,min} + t_{comb,min}) - t_h$$\n\nNow, we can substitute the given numerical values into this equation:\n- $t_{cq,min} = 150 \\text{ ps}$\n- $t_{comb,min} = 500 \\text{ ps}$\n- $t_h = 200 \\text{ ps}$\n\n$$Slack_{hold} = (150 \\text{ ps} + 500 \\text{ ps}) - 200 \\text{ ps}$$\n$$Slack_{hold} = 650 \\text{ ps} - 200 \\text{ ps}$$\n$$Slack_{hold} = 450 \\text{ ps}$$\n\nThe calculated hold slack is 450 ps. Since the value is positive, the design meets the hold time requirement with a comfortable margin.", "answer": "$$\\boxed{450}$$", "id": "1937246"}, {"introduction": "In an ideal world, the clock signal arrives at every flip-flop at the exact same instant, but in reality, physical distances and path variations create \"clock skew.\" This practice moves beyond ideal models to incorporate this real-world imperfection into our timing analysis. We will calculate the \"setup slack\" in a circuit with known clock skew, learning how this timing difference can impact the overall performance and robustness of the design [@problem_id:1937241].", "problem": "A synchronous digital circuit is designed with a data path between two positive edge-triggered D-type flip-flops, named FF1 (the source) and FF2 (the destination). The output of FF1 connects to a block of combinational logic, and the output of this logic block feeds into the data input of FF2. A single clock signal drives both flip-flops. However, due to variations in the physical layout, the clock signal arrives at FF2 at a time $t_{skew}$ after it arrives at FF1.\n\nThe timing parameters for the circuit are specified as follows:\n- Clock period: $T_{clk} = 8.0 \\text{ ns}$\n- Clock-to-Q delay for FF1: $t_{c-q} = 0.6 \\text{ ns}$\n- Propagation delay through the combinational logic: $t_{comb} = 5.5 \\text{ ns}$\n- Setup time requirement for FF2: $t_{su} = 1.2 \\text{ ns}$\n- Clock skew between the flip-flops: $t_{skew} = 0.2 \\text{ ns}$\n\nThe timing margin for meeting the setup requirement is known as the setup slack. A positive setup slack indicates the condition is met, whereas a negative value indicates a violation. Calculate the setup slack for the data signal arriving at the input of FF2.\n\nExpress your answer in nanoseconds (ns). Round your final answer to two significant figures.", "solution": "For setup timing between two positive edge-triggered flip-flops with clock skew where the capture clock at FF2 arrives $t_{skew}$ after the launch clock at FF1, the setup constraint is\n$$\nt_{c\\text{-}q} + t_{comb} \\leq T_{clk} - t_{su} + t_{skew}\n$$.\nDefine the data arrival time at FF2 input as\n$$\nt_{\\text{arrival}} = t_{c\\text{-}q} + t_{comb}.\n$$\nDefine the required latest arrival time to meet setup as\n$$\nt_{\\text{required}} = T_{clk} - t_{su} + t_{skew}.\n$$\nThe setup slack is the difference\n$$\n\\text{slack} = t_{\\text{required}} - t_{\\text{arrival}} = \\left(T_{clk} - t_{su} + t_{skew}\\right) - \\left(t_{c\\text{-}q} + t_{comb}\\right).\n$$\nSubstitute the given values:\n$$\nt_{\\text{arrival}} = 0.6 + 5.5 = 6.1 \\text{ ns},\n$$\n$$\nt_{\\text{required}} = 8.0 - 1.2 + 0.2 = 7.0 \\text{ ns},\n$$\n$$\n\\text{slack} = 7.0 - 6.1 = 0.9 \\text{ ns}.\n$$\nRounding to two significant figures gives $0.90 \\text{ ns}$.", "answer": "$$\\boxed{0.90}$$", "id": "1937241"}]}