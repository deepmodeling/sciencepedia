{"hands_on_practices": [{"introduction": "The primary goal of state assignment is not just to give each state a unique binary code, but to do so in a way that simplifies the final circuit. This practice introduces the most fundamental optimization strategy: the adjacency principle. By evaluating two potential assignments for a critical state transition, you will gain hands-on experience in how choosing codes with a Hamming distance of one can lead to more efficient hardware [@problem_id:1961721].", "problem": "A digital design engineer is developing a controller for a specialized robotic arm. The controller's behavior is modeled as a Finite State Machine (FSM) with three distinct operational states: `IDLE`, `GRASP`, and `MOVE`. Based on operational analysis, the transition from the `GRASP` state to the `MOVE` state occurs with the highest frequency and is therefore a critical path for logic optimization.\n\nTo implement the FSM, two state variables, $Q_1$ and $Q_0$, are used. The engineer is evaluating two different binary state assignments to determine which one is more optimal. An optimal assignment, in this context, is one that satisfies the adjacency principle for the most frequent transition (`GRASP` to `MOVE`), as this generally leads to simpler combinational logic for the next-state decoder.\n\nThe two proposed state assignments are as follows:\n\n**Assignment A:**\n- `IDLE`:  $Q_1Q_0 = 00$\n- `GRASP`: $Q_1Q_0 = 10$\n- `MOVE`:  $Q_1Q_0 = 11$\n\n**Assignment B:**\n- `IDLE`:  $Q_1Q_0 = 00$\n- `GRASP`: $Q_1Q_0 = 01$\n- `MOVE`:  $Q_1Q_0 = 10$\n\nGiven the goal of optimizing the `GRASP` to `MOVE` transition, which of the following statements correctly evaluates the two assignments based on the adjacency principle?\n\nA. Assignment B satisfies the adjacency principle for the `GRASP` to `MOVE` transition, while Assignment A does not.\n\nB. Both Assignment A and Assignment B satisfy the adjacency principle for the `GRASP` to `MOVE` transition.\n\nC. The adjacency principle cannot be applied here because the number of states (three) is not an integer power of two.\n\nD. Assignment A satisfies the adjacency principle for the `GRASP` to `MOVE` transition, while Assignment B does not.\n\nE. Neither Assignment A nor Assignment B satisfies the adjacency principle for the `GRASP` to `MOVE` transition.", "solution": "The adjacency principle for state assignment in an FSM states that, to simplify the next-state logic (e.g., via Karnaugh maps), the most frequent transition should occur between states whose binary encodings differ in exactly one bit. This corresponds to a Hamming distance of one between the assigned binary codes.\n\nLet $d_{H}$ denote the Hamming distance on $\\{0,1\\}^{2}$, defined as the number of bit positions in which two binary vectors differ. The transition of interest is from GRASP to MOVE.\n\nFor Assignment A: GRASP has $Q_{1}Q_{0}=10$ and MOVE has $Q_{1}Q_{0}=11$. Writing these as vectors, GRASP is $(1,0)$ and MOVE is $(1,1)$. The two codes differ only in $Q_{0}$, hence\n$$\nd_{H}\\big((1,0),(1,1)\\big)=1,\n$$\nso the adjacency principle is satisfied.\n\nFor Assignment B: GRASP has $Q_{1}Q_{0}=01$ and MOVE has $Q_{1}Q_{0}=10$. As vectors, GRASP is $(0,1)$ and MOVE is $(1,0)$. The two codes differ in both $Q_{1}$ and $Q_{0}$, hence\n$$\nd_{H}\\big((0,1),(1,0)\\big)=2,\n$$\nso the adjacency principle is not satisfied.\n\nTherefore, only Assignment A satisfies the adjacency principle for the GRASP to MOVE transition.", "answer": "$$\\boxed{D}$$", "id": "1961721"}, {"introduction": "Now that you understand the benefit of adjacent assignments, how do you decide which state transitions to prioritize? This exercise guides you through analyzing a state transition table to identify opportunities for optimization. You will apply a common heuristic: assigning adjacent codes to states that transition to the same next state, a technique that directly helps simplify terms in the next-state logic equations [@problem_id:1961746].", "problem": "A synchronous Finite State Machine (FSM) is defined by the following state transition table. The machine has four states (`S0`, `S1`, `S2`, `S3`) and a single binary input $x$. The table specifies the next state for each combination of the present state and the input.\n\n| Present State | Next State (if $x=0$) | Next State (if $x=1$) |\n|:-------------:|:---------------------:|:---------------------:|\n| `S0`          | `S1`                  | `S3`                  |\n| `S1`          | `S2`                  | `S0`                  |\n| `S2`          | `S1`                  | `S3`                  |\n| `S3`          | `S0`                  | `S2`                  |\n\nWhen performing state assignment for an FSM, one heuristic for simplifying the resulting logic circuitry is to assign adjacent binary codes (e.g., codes that differ by only one bit) to present states that transition to the same next state under a given input condition.\n\nBased on the state table provided, identify the pair of distinct present states that transition to the identical next state when the input $x$ is equal to 1.\n\nA. (`S0`, `S1`)\n\nB. (`S1`, `S2`)\n\nC. (`S0`, `S2`)\n\nD. (`S2`, `S3`)\n\nE. (`S1`, `S3`)", "solution": "We apply the stated heuristic by examining transitions under the fixed input condition $x=1$. From the state table:\n- For $x=1$, the transitions are: $S0 \\to S3$, $S1 \\to S0$, $S2 \\to S3$, $S3 \\to S2$.\nWe identify pairs of distinct present states that map to the same next state:\n- $S0$ and $S2$ both transition to $S3$ when $x=1$.\n- The other transitions are unique: $S1 \\to S0$ and $S3 \\to S2$.\nTherefore, the required pair is $(S0, S2)$, which corresponds to option C.", "answer": "$$\\boxed{C}$$", "id": "1961746"}, {"introduction": "To truly master the connection between a state assignment and the resulting logic, it's insightful to work backward. This reverse-engineering challenge provides the final, simplified next-state equations and asks you to deduce the original state assignment that must have produced them. This practice solidifies your understanding by forcing you to see how the choice of binary codes directly manifests in the structure of the combinational logic for the flip-flops [@problem_id:1961707].", "problem": "An engineer is tasked with reverse-engineering a legacy control unit. The unit is known to be a 4-state Mealy Finite State Machine (FSM) with its states historically labeled A, B, C, and D, and it receives a single input $X$. The original documentation contains the state transition table, but the specific binary state assignment and the output logic design have been lost.\n\nThe implementation uses two D-type flip-flops, and their state variables are denoted as $Q_1$ and $Q_0$. Through circuit analysis, the engineer has successfully derived the simplified next-state logic equations, which are given as:\n$$Q_{1,next} = Q_0$$\n$$Q_{0,next} = \\overline{Q_1} + X$$\nwhere $\\overline{Q_1}$ represents the logical NOT of $Q_1$, and $+$ represents the logical OR operation.\n\nThe documented state transition table is as follows:\n\n| Present State | Next State (if $X=0$) | Next State (if $X=1$) |\n|:-------------:|:---------------------:|:---------------------:|\n|       A       |           B           |           B           |\n|       B       |           D           |           D           |\n|       C       |           A           |           B           |\n|       D       |           C           |           D           |\n\nBased on this information, determine the binary state assignment code ($Q_1Q_0$) that must have been used for each of the symbolic states. Choose the correct set of assignments from the options below.\n\nA. A = `00`, B = `01`, C = `10`, D = `11`\n\nB. A = `00`, B = `01`, C = `11`, D = `10`\n\nC. A = `11`, B = `10`, C = `01`, D = `00`\n\nD. A = `10`, B = `00`, C = `01`, D = `11`\n\nE. A = `01`, B = `11`, C = `00`, D = `10`", "solution": "We are given a 4-state Mealy FSM realized with two D-type flip-flops having state variables $Q_1$ and $Q_0$, with next-state equations\n$$\nQ_{1,\\text{next}}=Q_0,\\qquad Q_{0,\\text{next}}=\\overline{Q_1}+X,\n$$\nwhere $+$ denotes logical OR. The binary state is $Q_1Q_0\\in\\{00,01,10,11\\}$. We derive the state transitions for each present state and input $X$.\n\n1) For $Q_1Q_0=00$: $Q_{1,\\text{next}}=Q_0=0$ and $Q_{0,\\text{next}}=\\overline{Q_1}+X=1+X=1$ for both $X=0$ and $X=1$. Therefore,\n$$\n00 \\to 01 \\text{ for } X\\in\\{0,1\\}.\n$$\n\n2) For $Q_1Q_0=01$: $Q_{1,\\text{next}}=Q_0=1$ and $Q_{0,\\text{next}}=\\overline{Q_1}+X=1+X=1$ for both $X=0$ and $X=1$. Therefore,\n$$\n01 \\to 11 \\text{ for } X\\in\\{0,1\\}.\n$$\n\n3) For $Q_1Q_0=10$: $Q_{1,\\text{next}}=Q_0=0$ and $Q_{0,\\text{next}}=\\overline{Q_1}+X=0+X=X$. Therefore,\n$$\n10 \\to 00 \\text{ if } X=0,\\qquad 10 \\to 01 \\text{ if } X=1.\n$$\n\n4) For $Q_1Q_0=11$: $Q_{1,\\text{next}}=Q_0=1$ and $Q_{0,\\text{next}}=\\overline{Q_1}+X=0+X=X$. Therefore,\n$$\n11 \\to 10 \\text{ if } X=0,\\qquad 11 \\to 11 \\text{ if } X=1.\n$$\n\nNow match these with the documented symbolic transitions:\n- A: next is B for both $X=0$ and $X=1$.\n- B: next is D for both $X=0$ and $X=1$.\n- C: next is A if $X=0$, and B if $X=1$.\n- D: next is C if $X=0$, and D if $X=1$.\n\nFrom the derived binary transitions, the only states whose next state is independent of $X$ are $00$ and $01$. Therefore A and B must be $00$ and $01$ in some order.\n\nIf we set $A=00$, then from $00$ the next state is $01$ for both inputs, so $B=01$. From $01$, the next state is $11$ for both inputs, so $D=11$. From $11$, the next state is $10$ if $X=0$ and $11$ if $X=1$, which matches D going to C on $X=0$ and to D on $X=1$, hence $C=10$. Finally, check $C=10$: it goes to $00$ if $X=0$ and to $01$ if $X=1$, matching $C \\to A$ on $X=0$ and $C \\to B$ on $X=1$. Thus the consistent assignment is\n$$\nA=00,\\quad B=01,\\quad C=10,\\quad D=11,\n$$\nwhich corresponds to option A.\n\nNo other assignment can satisfy the requirements because if $A=01$ then its $X$-independent successor would be $11$, but $11$ does not have $X$-independent transitions, contradicting the requirement that $B$ has $X$-independent transitions. Hence the mapping is unique.", "answer": "$$\\boxed{A}$$", "id": "1961707"}]}