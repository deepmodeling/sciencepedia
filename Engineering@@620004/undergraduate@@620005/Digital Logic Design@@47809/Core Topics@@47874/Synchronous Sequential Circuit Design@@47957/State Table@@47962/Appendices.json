{"hands_on_practices": [{"introduction": "The state table is the blueprint for a sequential circuit's behavior. The most fundamental skill is to read this blueprint and predict how the circuit will operate over time. This exercise allows you to practice this core skill by tracing the path of a finite-state machine through its states in response to a given input sequence, effectively bringing the abstract table to life. [@problem_id:1962855]", "problem": "A synchronous sequential circuit acts as the core controller for a simple material sorting system. The behavior of this controller is described by a finite-state machine. The machine has four distinct states, denoted `A`, `B`, `C`, and `D`. The transitions between these states are governed by a single-bit input `X`, which comes from a sensor that distinguishes between two types of materials.\n\nThe state transition table for the machine is provided below. The table shows the next state (NS) for each current present state (PS) and for each possible value of the input `X`.\n\n| Present State (PS) | Next State (NS) for X=0 | Next State (NS) for X=1 |\n|:------------------:|:-----------------------:|:-----------------------:|\n|         A          |            B            |            C            |\n|         B          |            A            |            D            |\n|         C          |            D            |            B            |\n|         D          |            C            |            A            |\n\nThe machine is initialized to state `A` before operation begins. An input sequence `X = 1011` is then fed to the machine, with one bit of the sequence being processed per clock cycle. The first bit of the sequence (`1`) is the input during the first clock cycle, the second bit (`0`) is the input during the second clock cycle, and so on.\n\nDetermine the sequence of states that the machine occupies at the end of the first, second, third, and fourth clock cycles, respectively.\n\nSelect the correct sequence from the options below.\n\nA. A, C, D, A\n\nB. B, D, A, B\n\nC. C, B, A, C\n\nD. C, D, A, B\n\nE. C, D, A, C", "solution": "A synchronous finite-state machine updates its state at each clock edge according to a next-state function $f(\\text{PS},X)$ defined by the transition table. From the table, the next-state function is:\n$$\nf(\\text{A},0)=\\text{B},\\quad f(\\text{A},1)=\\text{C},\\quad\nf(\\text{B},0)=\\text{A},\\quad f(\\text{B},1)=\\text{D},\\quad\nf(\\text{C},0)=\\text{D},\\quad f(\\text{C},1)=\\text{B},\\quad\nf(\\text{D},0)=\\text{C},\\quad f(\\text{D},1)=\\text{A}.\n$$\nThe machine starts in state $\\text{A}$ before the first clock, so let $S_{0}=\\text{A}$. The input sequence per cycle is $X_{1}=1$, $X_{2}=0$, $X_{3}=1$, $X_{4}=1$. The state at the end of cycle $k$ is $S_{k}=f(S_{k-1},X_{k})$.\n\nStep-by-step:\n- End of first cycle: $S_{1}=f(\\text{A},1)=\\text{C}$.\n- End of second cycle: $S_{2}=f(\\text{C},0)=\\text{D}$.\n- End of third cycle: $S_{3}=f(\\text{D},1)=\\text{A}$.\n- End of fourth cycle: $S_{4}=f(\\text{A},1)=\\text{C}$.\n\nTherefore, the sequence is $\\text{C}, \\text{D}, \\text{A}, \\text{C}$, which corresponds to option E.", "answer": "$$\\boxed{E}$$", "id": "1962855"}, {"introduction": "Beyond simply analyzing a finished state table, designers must often synthesize one from a set of functional requirements. This practice moves you from passive analysis to active design thinking. By working backward from the intended function of a modulo-3 counter, you will use logical deduction to complete a partial state table, reinforcing the crucial link between a circuit's abstract specification and its concrete purpose. [@problem_id:1962874]", "problem": "A synchronous sequential circuit is designed to function as a modulo-3 counter. The circuit has two state variables, $Q_1$ and $Q_0$, which define the present state of the counter. It has a single control input, $EN$. The behavior of the circuit is as follows: if $EN=0$, the counter remains in its current state; if $EN=1$, the counter transitions to the next state in its designated counting sequence.\n\nThe three states used for the modulo-3 count are represented by the binary values $Q_1Q_0$. The mapping of the count values to these binary states is not necessarily in standard binary order. A partial state table describing the circuit's behavior is provided below, but one of the next-state entries is missing and is denoted by `??`.\n\n**Partial State Table:**\n\n| Present State ($Q_1Q_0$) | Input ($EN$) | Next State ($Q_1'Q_0'$) |\n| :---: | :---: | :---: |\n| 00 | 0 | 00 |\n| 00 | 1 | 11 |\n| 01 | 0 | 01 |\n| 01 | 1 | 00 |\n| 11 | 0 | 11 |\n| 11 | 1 | ?? |\n\nWhat is the correct two-bit binary value for the missing next-state entry `??`?\n\nA. 00\n\nB. 01\n\nC. 10\n\nD. 11", "solution": "A modulo-3 counter uses exactly three distinct states and, when enabled with $EN=1$, must advance through these states in a single 3-cycle permutation. From the table, the three valid states are $00$, $01$, and $11$, so the state set is $S=\\{00,01,11\\}$. With $EN=0$, the next state equals the present state, which is already satisfied by the given rows.\n\nFor $EN=1$, the next-state mapping must be a bijection on $S$ forming a single 3-cycle. The given entries specify\n$$\nf(00)=11, \\quad f(01)=00,\n$$\nwhere $f$ is the next-state function under $EN=1$. Starting from $01$ and applying $f$ successively gives\n$$\n01 \\xrightarrow{f} 00 \\xrightarrow{f} 11 \\xrightarrow{f} \\, ?.\n$$\nTo complete a 3-cycle over $S$ without repeating images or leaving $S$, the only consistent choice is\n$$\nf(11)=01.\n$$\nThis yields the cycle $01 \\to 00 \\to 11 \\to 01$, which is a valid modulo-3 counting sequence over the three specified states. Any other choice would either map outside $S$ (e.g., $10$), create a fixed point under $EN=1$ (e.g., $11$), or violate bijectivity by duplicating an image (e.g., mapping to $00$ which is already $f(01)$).\n\nTherefore, the missing next state is $01$, corresponding to option B.", "answer": "$$\\boxed{B}$$", "id": "1962874"}, {"introduction": "A critical principle for implementing digital logic circuits is determinism: for any given present state and input, there must be exactly one, unambiguously defined next state. A specification that violates this rule contains a fundamental flaw and cannot be built as a standard deterministic machine. This exercise trains you to act as a design reviewer, helping you develop a keen eye for spotting logical ambiguities and ensuring a state table is valid and implementable. [@problem_id:1962885]", "problem": "A junior engineer has been tasked with designing a synchronous sequential circuit. The circuit has a single binary input, $x$, a single binary output, $z$, and four states, labeled $S_0, S_1, S_2,$ and $S_3$. The engineer has produced a state transition and output specification, presented as a list of rules for a Mealy machine. However, the senior designer suspects there is a single, critical logical flaw in the specification that makes it unimplementable as a standard deterministic circuit.\n\nThe proposed specification is as follows:\n- If Present State is $S_0$ and Input $x=0$, then Next State is $S_1$ and Output $z=0$.\n- If Present State is $S_0$ and Input $x=1$, then Next State is $S_2$ and Output $z=0$.\n- If Present State is $S_1$ and Input $x=0$, then Next State is $S_3$ and Output $z=0$.\n- If Present State is $S_1$ and Input $x=1$, then Next State is $S_0$ and Output $z=1$.\n- If Present State is $S_2$ and Input $x=0$, then Next State is $S_2$ and Output $z=1$.\n- If Present State is $S_2$ and Input $x=1$, then Next State is $S_3$ and Output $z=0$.\n- If Present State is $S_3$ and Input $x=0$, then Next State is $S_0$ and Output $z=1$.\n- If Present State is $S_3$ and Input $x=1$, then Next State is $S_1$ and Output $z=0$.\n- If Present State is $S_2$ and Input $x=1$, then Next State is $S_0$ and Output $z=1$.\n\nYour task is to review the specification and identify the one combination of Present State and Input for which the behavior is ambiguously defined. Which of the following options represents this combination?\n\nA. Present State: $S_1$, Input: $x=1$\n\nB. Present State: $S_2$, Input: $x=0$\n\nC. Present State: $S_3$, Input: $x=0$\n\nD. Present State: $S_2$, Input: $x=1$\n\nE. Present State: $S_0$, Input: $x=0$", "solution": "A synchronous deterministic Mealy machine defines a function\n$$\nf:\\{\\text{states}\\}\\times\\{0,1\\}\\to \\{\\text{states}\\}\\times\\{0,1\\},\n$$\nso that for each pair $(S_{i},x)$ there is exactly one image $(\\text{NextState},z)$. With four states and a binary input, there must be exactly $4\\times 2=8$ distinct rules. The provided list has $9$ rules, so at least one $(\\text{Present State},x)$ pair is duplicated with conflicting outcomes.\n\nList each specified mapping:\n- $(S_{0},0)\\mapsto (S_{1},0)$\n- $(S_{0},1)\\mapsto (S_{2},0)$\n- $(S_{1},0)\\mapsto (S_{3},0)$\n- $(S_{1},1)\\mapsto (S_{0},1)$\n- $(S_{2},0)\\mapsto (S_{2},1)$\n- $(S_{2},1)\\mapsto (S_{3},0)$\n- $(S_{3},0)\\mapsto (S_{0},1)$\n- $(S_{3},1)\\mapsto (S_{1},0)$\n- $(S_{2},1)\\mapsto (S_{0},1)$\n\nThe pair $(S_{2},1)$ appears twice with two different images:\n$$\n(S_{2},1)\\mapsto (S_{3},0)\\quad\\text{and}\\quad (S_{2},1)\\mapsto (S_{0},1),\n$$\nwhich violates the single-valued requirement and creates ambiguity. Checking the options:\n- A: $(S_{1},1)$ appears once.\n- B: $(S_{2},0)$ appears once.\n- C: $(S_{3},0)$ appears once.\n- D: $(S_{2},1)$ appears twice with conflicting behavior.\n- E: $(S_{0},0)$ appears once.\n\nTherefore, the ambiguous combination is Present State $S_{2}$ with Input $x=1$.", "answer": "$$\\boxed{D}$$", "id": "1962885"}]}