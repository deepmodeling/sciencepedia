{"hands_on_practices": [{"introduction": "To begin our hands-on journey, let's design an \"edge detector,\" a fundamental circuit that signals a change in an input stream. This practice serves as an excellent starting point because it uses a single D flip-flop to implement a one-bit memory, allowing the machine to \"remember\" the input from the previous clock cycle. You will see how combining this memory with simple logic—in this case, the elegant Exclusive OR ($\\oplus$) operation—produces a powerful dynamic behavior, forming the basis for many synchronization and data processing tasks. [@problem_id:1938276]", "problem": "A digital circuit is required to monitor a single-bit serial data line, denoted by the input variable $X$. The circuit must generate a high output, $Z=1$, for exactly one clock cycle whenever the input bit $X$ changes its value compared to the previous clock cycle. If the input bit $X$ remains the same as its value in the preceding cycle, the output $Z$ must be low, $Z=0$. This behavior is characteristic of an \"edge detector\".\n\nYou are tasked with designing a Mealy-type Finite State Machine (FSM) to implement this logic. The FSM will be built using a single D-type flip-flop. The state of the FSM, represented by the state variable $S$, is the output of this D flip-flop. The input to the flip-flop is denoted by $D$.\n\nDetermine the minimal Boolean logic expressions for the flip-flop input $D$ and the machine output $Z$ as functions of the machine's present state $S$ and input $X$. Your answer should be selected from the options below.\n\nLet the state $S=0$ correspond to the previous input being 0, and $S=1$ correspond to the previous input being 1. Use the symbol $\\oplus$ to denote the Exclusive OR (XOR) operation.\n\nA. $D = X$; $Z = S \\oplus X$\n\nB. $D = S$; $Z = S \\oplus X$\n\nC. $D = X$; $Z = (S \\oplus X)'$\n\nD. $D = S \\oplus X$; $Z = X$\n\nE. $D = X'$; $Z = S$", "solution": "We model the FSM with a single D flip-flop whose state is $S$. By the problem’s definition, $S$ encodes the previous input value: if the last input bit was $0$, then $S=0$; if it was $1$, then $S=1$. Thus, at each clock, the next state must update to the current input so that on the next cycle it still represents the previous input. For a D flip-flop, $S^{+}=D$. Hence the requirement that the next state equals the current input is\n$$\nS^{+}=X \\quad \\Rightarrow \\quad D=X.\n$$\nThe output $Z$ must be high exactly when the current input differs from the previous input, and low otherwise. Since $S$ is the previous input, this condition is\n$$\nZ=1 \\;\\text{iff}\\; X \\neq S.\n$$\nThis is precisely the exclusive-OR relation, so\n$$\nZ=S \\oplus X.\n$$\n\nTo verify via explicit state-input cases, for each pair $(S,X)$ we require:\n$$\n(S,X)=(0,0)\\;\\Rightarrow\\; Z=0,\\; S^{+}=0; \\quad\n(S,X)=(0,1)\\;\\Rightarrow\\; Z=1,\\; S^{+}=1;\\\\\n(S,X)=(1,0)\\;\\Rightarrow\\; Z=1,\\; S^{+}=0; \\quad\n(S,X)=(1,1)\\;\\Rightarrow\\; Z=0,\\; S^{+}=1.\n$$\nThese map to\n$$\nZ=S'X+SX'=S \\oplus X, \\quad S^{+}=X \\Rightarrow D=X.\n$$\nTherefore, the minimal Boolean expressions are $D=X$ and $Z=S \\oplus X$, which correspond to option A.", "answer": "$$\\boxed{A}$$", "id": "1938276"}, {"introduction": "Now, we advance to one of the most classic applications of Finite State Machines: sequence detection. This practice involves designing a Mealy machine that can identify a specific pattern, '11', within a continuous stream of data. Unlike the previous exercise, the state here doesn't just store a previous input; it represents a more abstract concept—our progress in finding the sequence. This problem challenges you to define states and transitions carefully, paying special attention to how the FSM should handle overlapping sequences, a crucial detail in practical data parsing. [@problem_id:1938249]", "problem": "A simple digital circuit is required to monitor a serial data line for a specific error pattern. The circuit has a single synchronous serial input, denoted as $X$, and a single output, $Z$.\n\nThe circuit must be designed as a Mealy-type Finite State Machine (FSM). Its function is to produce an output $Z=1$ for exactly one clock cycle whenever the input sequence '11' is detected. The detection must account for overlapping sequences. For all other input conditions, the output $Z$ must be $0$. For instance, if the input stream $X$ is `0101110`, the corresponding output stream $Z$ should be `0000110`.\n\nYou are tasked with synthesizing this FSM using a single D-type flip-flop. The state of the flip-flop is represented by the variable $Q$. Use the state assignment where $Q=0$ corresponds to the initial state (the state where no part of the target sequence has been detected yet), and $Q=1$ corresponds to the state after a single '1' has been detected.\n\nDetermine the minimized Sum-of-Products (SOP) Boolean expressions for the D-input of the flip-flop, denoted as $D$, and for the machine's output, $Z$. Both expressions should be in terms of the input $X$ and the state variable $Q$.\n\nPresent your two final expressions for $D$ and $Z$ as a row matrix. The first element of the matrix should be the expression for the D-input ($D$), and the second element should be the expression for the output ($Z$).", "solution": "We design a Mealy FSM with a single state bit $Q$ and input $X$ to detect the pattern \"11\" with overlap. The state assignment is:\n- $Q=0$: no relevant history (no preceding $1$),\n- $Q=1$: exactly one preceding $1$ has been seen (the last input was $1$).\n\nFor a Mealy machine, the output $Z$ depends on the present state $Q$ and the current input $X$, and the next state $Q^{+}$ is given by the D-input: $D=Q^{+}=f(Q,X)$.\n\nDetermine state transitions and outputs from the detection requirement:\n- From $Q=0$:\n  - If $X=0$: remain at $Q^{+}=0$; no detection, so $Z=0$.\n  - If $X=1$: move to $Q^{+}=1$ (we have seen one $1$); no detection yet, so $Z=0$.\n- From $Q=1$:\n  - If $X=0$: break the run of ones, so go to $Q^{+}=0$; $Z=0$.\n  - If $X=1$: detect \"11\" now; output $Z=1$ for exactly this cycle, and for overlap we should remain able to detect the next \"11\", so keep $Q^{+}=1$ (the last input is still $1$).\n\nCollecting next-state values gives the truth table for $D=Q^{+}$:\n- $(Q,X)=(0,0)\\Rightarrow D=0$,\n- $(Q,X)=(0,1)\\Rightarrow D=1$,\n- $(Q,X)=(1,0)\\Rightarrow D=0$,\n- $(Q,X)=(1,1)\\Rightarrow D=1$.\n\nThus $D=1$ exactly when $X=1$, independent of $Q$. In SOP form, the minterms are $\\overline{Q}X$ and $QX$, so\n$$D=\\overline{Q}X+QX=X.$$\n\nFor the Mealy output, $Z=1$ only when $(Q,X)=(1,1)$; otherwise $Z=0$. Hence the minimized SOP is\n$$Z=QX$$\n\nThese expressions satisfy the example $X=0101110\\mapsto Z=0000110$, since $Z=QX$ yields ones on the second and third consecutive ones.", "answer": "$$\\boxed{\\begin{pmatrix} X & QX \\end{pmatrix}}$$", "id": "1938249"}, {"introduction": "In this final practice, we shift from pattern matching to computation by designing a synchronous counter. This exercise introduces the Moore FSM model, where the machine's output is a function of its state alone, contrasting with the Mealy model you've used so far. You'll use two D flip-flops, meaning you must manage a multi-bit state. The key insight here is using the state variables, $Q_1$ and $Q_0$, to directly represent the binary value of the count, a common and efficient design pattern for FSMs that perform arithmetic operations. [@problem_id:1938252]", "problem": "A digital system is designed to monitor a serial data stream. A component of this system acts as a counter that must continuously count the total number of '1's that have appeared on a single input line, $X$, since the system was last reset. The count is performed modulo 4. The system is to be implemented as a synchronous Moore-type Finite State Machine (FSM).\n\nThe state of the FSM is stored in two D-type flip-flops, with present state outputs $Q_1$ and $Q_0$. The state assignment is chosen to directly represent the count, where the state $(Q_1, Q_0)$ corresponds to the binary representation of the count. For example, a count of 3 is represented by state $(Q_1, Q_0) = (1, 1)$. The machine has a two-bit output, which is not the focus of this problem.\n\nYour task is to determine the minimal sum-of-products (SOP) Boolean expression for the input to the most significant flip-flop, $D_1$. The expression should be in terms of the machine's external input $X$ and its present state variables $Q_1$ and $Q_0$. In your expression, use an overbar to represent negation (e.g., $\\overline{A}$).", "solution": "The machine counts the number of ones modulo 4, with state encoding $(Q_{1},Q_{0}) \\in \\{00,01,10,11\\}$ representing counts $0,1,2,3$, respectively. On each clock:\n- If $X=0$, the count holds: $(Q_{1}^{+},Q_{0}^{+})=(Q_{1},Q_{0})$.\n- If $X=1$, the count increments modulo $4$: $(Q_{1}^{+},Q_{0}^{+})=(Q_{1},Q_{0})+1 \\pmod{4}$.\n\nSince the flip-flops are D-type, $D_{1}=Q_{1}^{+}$. Enumerating $Q_{1}^{+}$ for all present states and inputs:\n- From $00$: $X=0 \\Rightarrow 00$ so $Q_{1}^{+}=0$; $X=1 \\Rightarrow 01$ so $Q_{1}^{+}=0$.\n- From $01$: $X=0 \\Rightarrow 01$ so $Q_{1}^{+}=0$; $X=1 \\Rightarrow 10$ so $Q_{1}^{+}=1$.\n- From $10$: $X=0 \\Rightarrow 10$ so $Q_{1}^{+}=1$; $X=1 \\Rightarrow 11$ so $Q_{1}^{+}=1$.\n- From $11$: $X=0 \\Rightarrow 11$ so $Q_{1}^{+}=1$; $X=1 \\Rightarrow 00$ so $Q_{1}^{+}=0$.\n\nThus the minterms where $Q_{1}^{+}=1$ are $(Q_{1},Q_{0},X)=(0,1,1),(1,0,0),(1,0,1),(1,1,0)$, giving the SOP\n$$\nD_{1}=Q_{1}^{+}\n=\\overline{Q_{1}}\\,Q_{0}\\,X+Q_{1}\\,\\overline{Q_{0}}\\,\\overline{X}+Q_{1}\\,\\overline{Q_{0}}\\,X+Q_{1}\\,Q_{0}\\,\\overline{X}.\n$$\nCombine the two terms $Q_{1}\\,\\overline{Q_{0}}\\,\\overline{X}$ and $Q_{1}\\,\\overline{Q_{0}}\\,X$ to get $Q_{1}\\,\\overline{Q_{0}}$, yielding\n$$\nD_{1}=\\overline{Q_{1}}\\,Q_{0}\\,X+Q_{1}\\,\\overline{Q_{0}}+Q_{1}\\,Q_{0}\\,\\overline{X}.\n$$\nEquivalently,\n$$\nD_{1}=Q_{1}\\left(\\overline{Q_{0}}+\\overline{X}\\right)+\\overline{Q_{1}}\\,Q_{0}\\,X,\n$$\nbut the minimal SOP form (sum of products) is\n$$\nD_{1}=Q_{1}\\,\\overline{Q_{0}}+Q_{1}\\,\\overline{X}+\\overline{Q_{1}}\\,Q_{0}\\,X,\n$$\nwhere the term $\\overline{Q_{1}}\\,Q_{0}\\,X$ is essential because the minterm $(0,1,1)$ is isolated in the Karnaugh map and cannot be combined further.", "answer": "$$\\boxed{Q_{1}\\,\\overline{Q_{0}}+Q_{1}\\,\\overline{X}+\\overline{Q_{1}}\\,Q_{0}\\,X}$$", "id": "1938252"}]}