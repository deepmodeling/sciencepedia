{"hands_on_practices": [{"introduction": "We begin our hands-on practice by exploring the fundamentals of the Moore FSM model. This first exercise tasks you with designing a machine that keeps a running count, demonstrating one of the most powerful capabilities of FSMs: maintaining a memory of past inputs. By defining states that correspond to the remainder of a count, this problem [@problem_id:1935256] illustrates how an abstract property can be systematically tracked and used to determine the machine's output, which, in a Moore machine, depends solely on the current state.", "problem": "A digital system is being designed to monitor a serial binary data stream. The core of this system is a Moore-type Finite State Machine (FSM). The FSM has a single binary input, denoted as $x$, and a single binary output, $z$.\n\nThe FSM is required to perform a specific function: its output $z$ must be '1' if and only if the cumulative number of '1's received on the input $x$ since the machine was last reset is a non-negative integer multiple of three (i.e., 0, 3, 6, 9,...). For all other counts of '1's, the output $z$ must be '0'.\n\nThe machine's states are defined based on the remainder of the cumulative count of '1's when divided by three. Let the states be $S_0$, $S_1$, and $S_2$, corresponding to remainders of 0, 1, and 2, respectively. The machine starts in the reset state, which is $S_0$.\n\nA state table describes the behavior of the FSM by listing the present state, the next state for each possible input, and the output associated with the present state. Which of the following state tables correctly represents this Moore machine?\n\nA.\n| Present State | Next State ($x=0$) | Next State ($x=1$) | Output ($z$) |\n|:-------------:|:------------------:|:------------------:|:------------:|\n|     $S_0$     |       $S_0$        |       $S_1$        |      1       |\n|     $S_1$     |       $S_1$        |       $S_2$        |      0       |\n|     $S_2$     |       $S_2$        |       $S_0$        |      0       |\n\nB.\n| Present State | Next State ($x=0$) | Next State ($x=1$) | Output ($z$) |\n|:-------------:|:------------------:|:------------------:|:------------:|\n|     $S_0$     |       $S_0$        |       $S_1$        |      0       |\n|     $S_1$     |       $S_1$        |       $S_2$        |      0       |\n|     $S_2$     |       $S_2$        |       $S_0$        |      1       |\n\nC.\n| Present State | Next State ($x=0$) | Next State ($x=1$) | Output ($z$) |\n|:-------------:|:------------------:|:------------------:|:------------:|\n|     $S_0$     |       $S_1$        |       $S_0$        |      1       |\n|     $S_1$     |       $S_2$        |       $S_1$        |      0       |\n|     $S_2$     |       $S_0$        |       $S_2$        |      0       |\n\nD.\n| Present State | Next State ($x=0$) | Next State ($x=1$) | Output ($z$) |\n|:-------------:|:------------------:|:------------------:|:------------:|\n|     $S_0$     |       $S_0$        |       $S_1$        |      1       |\n|     $S_1$     |       $S_1$        |       $S_0$        |      0       |\n|     $S_2$     |       $S_2$        |       $S_1$        |      0       |\n\nE.\n| Present State | Next State ($x=0$) | Next State ($x=1$) | Output ($z$) |\n|:-------------:|:------------------:|:------------------:|:------------:|\n|     $S_0$     |       $S_0$        |       $S_1$        |      1       |\n|     $S_1$     |       $S_1$        |       $S_2$        |      0       |\n|     $S_2$     |       $S_0$        |       $S_2$        |      0       |", "solution": "Define the Moore FSM states by the remainder of the cumulative count of input ones modulo three: $S_{0}$ for remainder $0$, $S_{1}$ for remainder $1$, and $S_{2}$ for remainder $2$. The reset state is $S_{0}$.\n\nBecause it is a Moore machine, the output depends only on the present state. The requirement is that $z=1$ if and only if the number of ones seen so far is a multiple of three. Therefore, $z=1$ only in state $S_{0}$, and $z=0$ in states $S_{1}$ and $S_{2}$.\n\nLet the present-state remainder be $r \\in \\{0,1,2\\}$. Upon receiving input $x \\in \\{0,1\\}$, the cumulative number of ones increases by $x$, so the next-state remainder is given by\n$$\nr^{+} = (r + x) \\bmod 3.\n$$\nThis implies the transition structure:\n- For $x=0$, the remainder is unchanged, so $S_{0} \\to S_{0}$, $S_{1} \\to S_{1}$, $S_{2} \\to S_{2}$.\n- For $x=1$, the remainder increments by one modulo three, so $S_{0} \\to S_{1}$, $S_{1} \\to S_{2}$, $S_{2} \\to S_{0}$.\n\nCombining transitions and outputs, the correct state table must have:\n- Next state on $x=0$: self-loop in each state.\n- Next state on $x=1$: $S_{0} \\to S_{1}$, $S_{1} \\to S_{2}$, $S_{2} \\to S_{0}$.\n- Output $z$: $1$ in $S_{0}$, $0$ in $S_{1}$ and $S_{2}$.\n\nComparing with the options, only option A matches these transitions and outputs.", "answer": "$$\\boxed{A}$$", "id": "1935256"}, {"introduction": "Moving from Moore to Mealy models, this next practice introduces a key distinction: the output of a Mealy machine depends on both the current state and the present input. This feature allows for different design possibilities, often leading to more compact or responsive circuits. This problem [@problem_id:1935273] presents a classic application in digital signal processing and arithmetic—designing a serial 2's complementer—which elegantly reveals the power and efficiency of the Mealy model for bit-by-bit computational tasks.", "problem": "A digital system is being designed to compute the 2's complement of a binary number that is fed into it serially, one bit at a time. The system is implemented as a Mealy-type Finite State Machine (FSM).\n\nThe input to the FSM is a single bit $x$, representing the current bit of the number being processed. The input bitstream starts from the Least Significant Bit (LSB) and proceeds towards the Most Significant Bit (MSB). The output is a single bit $y$, representing the corresponding bit of the 2's complemented number.\n\nThe FSM has two states:\n- `S_wait`: The initial state, where the machine is waiting to encounter the first '1' in the input stream.\n- `S_invert`: The state entered after the first '1' has been processed. The machine remains in this state for all subsequent bits.\n\nYour task is to determine the correct state transition table for this Mealy machine. The table describes the next state and the output $y$ for each combination of the current state and input $x$.\n\nWhich of the following tables correctly represents the behavior of the serial 2's complementer?\n\n**A.**\n| Current State | Input $x$ | Next State | Output $y$ |\n|:-------------:|:---------:|:----------:|:----------:|\n| `S_wait`      | 0         | `S_wait`   | 0          |\n| `S_wait`      | 1         | `S_invert` | 1          |\n| `S_invert`    | 0         | `S_invert` | 1          |\n| `S_invert`    | 1         | `S_invert` | 0          |\n\n**B.**\n| Current State | Input $x$ | Next State | Output $y$ |\n|:-------------:|:---------:|:----------:|:----------:|\n| `S_wait`      | 0         | `S_wait`   | 1          |\n| `S_wait`      | 1         | `S_wait`   | 0          |\n| `S_invert`    | 0         | `S_invert` | 1          |\n| `S_invert`    | 1         | `S_invert` | 0          |\n\n**C.**\n| Current State | Input $x$ | Next State | Output $y$ |\n|:-------------:|:---------:|:----------:|:----------:|\n| `S_wait`      | 0         | `S_wait`   | 0          |\n| `S_wait`      | 1         | `S_invert` | 0          |\n| `S_invert`    | 0         | `S_invert` | 1          |\n| `S_invert`    | 1         | `S_invert` | 0          |\n\n**D.**\n| Current State | Input $x$ | Next State | Output $y$ |\n|:-------------:|:---------:|:----------:|:----------:|\n| `S_wait`      | 0         | `S_wait`   | 0          |\n| `S_wait`      | 1         | `S_wait`   | 1          |\n| `S_invert`    | 0         | `S_invert` | 0          |\n| `S_invert`    | 1         | `S_invert` | 1          |", "solution": "The two's complement of a binary number can be defined as the bitwise inversion plus one. When processing from the least significant bit (LSB) to the most significant bit (MSB), a serial algorithm equivalent to this definition is:\n- Copy all bits until and including the first occurrence of a $1$ from the LSB side.\n- Invert all subsequent bits.\n\nTo implement this with a Mealy FSM, define two states:\n- $S_{\\text{wait}}$: no $1$ has been seen yet; we are waiting for the first $1$.\n- $S_{\\text{invert}}$: the first $1$ has been processed; from now on, invert all incoming bits.\n\nLet the input bit be $x \\in \\{0,1\\}$ and the output be $y \\in \\{0,1\\}$. The behavior for each state and input is derived as follows:\n\n1. In $S_{\\text{wait}}$:\n   - If $x=0$, no $1$ has been encountered yet, and per the algorithm we copy the bit. Hence $y=0$ and remain in $S_{\\text{wait}}$.\n   - If $x=1$, this is the first $1$; we must copy it and then begin inverting subsequent bits. Hence $y=1$ and transition to $S_{\\text{invert}}$.\n\n2. In $S_{\\text{invert}}$:\n   - For all subsequent bits, we output the inversion. Hence for any $x$, $y=\\overline{x}$ and remain in $S_{\\text{invert}}$. Concretely:\n     - If $x=0$, then $y=1$ and stay in $S_{\\text{invert}}$.\n     - If $x=1$, then $y=0$ and stay in $S_{\\text{invert}}$.\n\nCollecting these, the state/output relations are:\n- $S_{\\text{wait}}, x=0 \\rightarrow$ next state $S_{\\text{wait}}$, output $y=0$.\n- $S_{\\text{wait}}, x=1 \\rightarrow$ next state $S_{\\text{invert}}$, output $y=1$.\n- $S_{\\text{invert}}, x=0 \\rightarrow$ next state $S_{\\text{invert}}$, output $y=1$.\n- $S_{\\text{invert}}, x=1 \\rightarrow$ next state $S_{\\text{invert}}$, output $y=0$.\n\nThis matches option A.", "answer": "$$\\boxed{A}$$", "id": "1935273"}, {"introduction": "Our final practice challenge consolidates your skills by tackling one of the most common and important applications of FSMs: sequence detection. Designing a machine to recognize a specific pattern within a stream of data is a fundamental task in digital logic, communications, and even bioinformatics. This exercise [@problem_id:1935239] requires you to construct a minimal Mealy FSM for a given sequence, forcing a systematic approach to state definition and transition logic to ensure both correctness and efficiency, especially when handling overlapping patterns.", "problem": "A digital security system for a vault is being designed. The system accepts a serial stream of binary inputs, one bit per clock cycle. The vault door is designed to unlock for one clock cycle if and only if the last four bits received form the specific sequence '10' followed by '01'. The system must be able to recognize overlapping occurrences of the target sequence. For instance, if the input stream is `...000010011001...`, the system should produce an unlock signal on the eighth bit and again on the twelfth bit.\n\nYou are tasked with designing this system using a Mealy-type Finite State Machine (FSM). A Mealy FSM is a type of state machine where the output depends on both the current state and the current inputs. For this system, the FSM should have a single output, $Z$, which is `1` (unlock) for the single clock cycle when the final bit of a valid sequence `1001` is received, and `0` otherwise.\n\nWhat is the minimum number of states required to implement this FSM?\n\nA. 3\nB. 4\nC. 5\nD. 6\nE. 8", "solution": "We seek a Mealy FSM that asserts output $Z=1$ exactly when the last four input bits are $1001$, allowing overlaps. In a Mealy machine, outputs are associated with transitions, and the usual optimal construction maintains the length of the longest prefix of the target pattern that is also a suffix of the bits seen so far.\n\nDefine the target pattern as $P=1001$ of length $4$. The standard construction maintains one state for each possible matched prefix length $k\\in\\{0,1,2,3\\}$, where $k$ denotes that the last $k$ input bits equal $P[1..k]$. Let the states be:\n- $S_{0}$: matched length $0$ (no nonempty prefix matched),\n- $S_{1}$: matched length $1$ (suffix $1$),\n- $S_{2}$: matched length $2$ (suffix $10$),\n- $S_{3}$: matched length $3$ (suffix $100$).\n\nWe now derive the transition and output behavior by computing, for each state and next input $b\\in\\{0,1\\}$, the new matched length as the length of the longest prefix of $P$ that is a suffix of the current suffix extended by $b$. The Mealy output $Z$ is $1$ exactly on the transition that completes the pattern, i.e., from $S_{3}$ on input $1$.\n\nTransitions and outputs:\n1. From $S_{0}$:\n   - On $1$: the new suffix is $1$, which matches prefix length $1$, so go to $S_{1}$, with $Z=0$.\n   - On $0$: no nonempty prefix matches, so stay in $S_{0}$, with $Z=0$.\n2. From $S_{1}$ (suffix $1$):\n   - On $0$: the new suffix is $10$, which matches prefix length $2$, so go to $S_{2}$, with $Z=0$.\n   - On $1$: the new suffix is $11$, whose longest matching prefix is $1$, so stay in $S_{1}$, with $Z=0$.\n3. From $S_{2}$ (suffix $10$):\n   - On $0$: the new suffix is $100$, which matches prefix length $3$, so go to $S_{3}$, with $Z=0$.\n   - On $1$: the new suffix is $101$, whose longest matching prefix is $1$, so go to $S_{1}$, with $Z=0$.\n4. From $S_{3}$ (suffix $100$):\n   - On $1$: the new suffix is $1001$, which completes the pattern; output $Z=1$ on this transition, and the longest matching prefix of the resulting suffixes is $1$, so go to $S_{1}$.\n   - On $0$: the new suffix is $1000$, which has no nonempty matching prefix, so go to $S_{0}$, with $Z=0$.\n\nThis FSM detects overlaps because after producing $Z=1$ on $S_{3}\\xrightarrow{1}$, it transitions to $S_{1}$, preserving the trailing $1$ that can start a new $1001$ match.\n\nMinimality argument: We show at least $4$ states are necessary by demonstrating that the four contexts (matched lengths $0,1,2,3$) are pairwise distinguishable by future inputs, in terms of the output stream they produce.\n- $S_{3}$ versus $S_{2}$: input $1$ yields $Z=1$ from $S_{3}$ and $Z=0$ from $S_{2}$ immediately, so they are distinguishable.\n- $S_{2}$ versus $S_{1}$: input $01$ causes $S_{2}$ to produce $Z=1$ on the second bit, while $S_{1}$ produces $Z=0$ on both, hence distinguishable.\n- $S_{1}$ versus $S_{0}$: input $001$ causes $S_{1}$ to produce $Z=1$ on the third bit, while $S_{0}$ outputs $Z=0$ throughout, hence distinguishable.\n\nTherefore no two of these four contexts can be merged, so at least $4$ states are required. Since the above construction achieves the specification with exactly $4$ states, the minimum number of states for a Mealy FSM is $4$.\n\nAmong the provided options, this corresponds to option B.", "answer": "$$\\boxed{B}$$", "id": "1935239"}]}