{"hands_on_practices": [{"introduction": "The foundation of state minimization lies in the partitioning method, a systematic process for grouping equivalent states. This first exercise focuses on the critical initial step of this algorithm. By starting with a preliminary grouping of states based on their outputs, you will learn to test this grouping for true equivalence by examining where each state transitions for a given input, a core skill in identifying distinguishable states [@problem_id:1962486].", "problem": "A Moore-type Finite State Machine (FSM) is used to control a simple industrial process. The machine has a single binary input `x` and a single binary output `z`. The behavior of the FSM is described by the following state table, where `S0`, `S1`, and `S2` are the states of the machine.\n\n| Present State | Next State (`x=0`) | Next State (`x=1`) | Output (`z`) |\n|:-------------:|:------------------:|:------------------:|:------------:|\n|      `S0`     |        `S1`        |        `S2`        |      0       |\n|      `S1`     |        `S2`        |        `S1`        |      1       |\n|      `S2`     |        `S0`        |        `S1`        |      0       |\n\nThe process of state minimization using the partitioning method begins with an initial partition, `P0`, where states are grouped based on their outputs. This partition is then refined into a new partition, `P1`, by checking the next-state transitions for each group in `P0`. Two states in a group are considered equivalent and remain in the same block in `P1` only if for every possible input, their next states fall into the same block of `P0`.\n\nWhat is the partition `P1` for the FSM described above?\n\nA. `{{S0, S2}, {S1}}`\n\nB. `{{S0}, {S1}, {S2}}`\n\nC. `{{S0, S1, S2}}`\n\nD. `{{S0, S1}, {S2}}`", "solution": "The goal is to determine the state partition `P1` which is the first refinement of the initial, output-based partition `P0`. This is a two-step process.\n\nFirst, we determine the initial partition `P0`. The state partitioning algorithm begins by grouping all states that have identical outputs.\nFrom the state table:\n- The output for state `S0` is `z=0`.\n- The output for state `S1` is `z=1`.\n- The output for state `S2` is `z=0`.\n\nStates `S0` and `S2` have the same output (`z=0`), so they are grouped together. State `S1` has a unique output (`z=1`), so it is in its own group.\nTherefore, the initial partition is:\n$P_0 = \\{\\{S_0, S_2\\}, \\{S_1\\}\\}$\n\nSecond, we refine `P0` to create `P1`. We must check the equivalence of states within each block of `P0`.\nThe block `\\{S1\\}` contains only a single state, so it cannot be refined. It remains as is.\nNow, consider the block `\\{S0, S2\\}`. We must check if states `S0` and `S2` are equivalent. For them to be equivalent, their next states for every input must map to the same block in `P0`.\n\nLet's check the transitions for `S0` and `S2`:\n\nFor input `x=0`:\n- The next state of `S0` is `S1`. State `S1` belongs to the block `\\{S1\\}` in `P0`.\n- The next state of `S2` is `S0`. State `S0` belongs to the block `\\{S0, S2\\}` in `P0`.\n\nThe next states, `S1` and `S0`, belong to different blocks of $P_0$. Since we have found an input (`x=0`) for which the next states of `S0` and `S2` are in different blocks of the current partition `P0`, the states `S0` and `S2` are distinguishable.\n\nBecause `S0` and `S2` are distinguishable, the block `\\{S0, S2\\}` from `P0` must be split into two separate blocks: `\\{S0\\}` and `\\{S2\\}`.\n\nCombining the refined blocks, the new partition `P1` is formed by taking the block `\\{S1\\}` and the newly split blocks `\\{S0\\}` and `\\{S2\\}`.\n$P_1 = \\{\\{S_0\\}, \\{S_1\\}, \\{S_2\\}\\}$\n\nAt this point, every state is in its own block, so no further refinement is possible. This means the FSM is already in its minimal form. The question asks for the partition `P1`, which corresponds to option B.", "answer": "$$\\boxed{B}$$", "id": "1962486"}, {"introduction": "Building on the concept of partitioning, this next practice guides you through a complete state reduction process from start to finish. You will first apply the straightforward 'row-matching' technique to identify and merge any obviously identical states, a quick optimization step. Subsequently, you will apply the full partitioning algorithm to the simplified machine, ensuring a completely minimized result and demonstrating a comprehensive and efficient workflow [@problem_id:1962514].", "problem": "A synchronous sequential circuit with a single input `x` and a single output `z` is described by the following state table. The machine has five states, labeled A, B, C, D, and E. The table specifies the next state and the output for each combination of the present state and the input.\n\n| Present State | Next State, Output (for input x=0) | Next State, Output (for input x=1) |\n|:-------------:|:------------------------------------:|:------------------------------------:|\n| A             | (B, 0)                               | (D, 1)                               |\n| B             | (C, 0)                               | (E, 0)                               |\n| C             | (A, 1)                               | (B, 0)                               |\n| D             | (A, 1)                               | (B, 0)                               |\n| E             | (C, 0)                               | (E, 0)                               |\n\nYour task is to determine the minimum number of states required to implement an equivalent sequential circuit. You must first apply the row-matching technique to find and merge any directly equivalent states. After this initial reduction, you should apply a more general state minimization algorithm (such as the partitioning method or an implication chart) to the resulting state table to find any further equivalences.\n\nWhat is the total number of states in the final, fully minimized state machine? The final answer should be a single integer.", "solution": "The goal is to find the minimum number of states for a machine equivalent to the one described by the given state table. This is a two-step process as specified.\n\n**Step 1: State Reduction by Row Matching**\n\nThe row-matching technique identifies states that are equivalent because their corresponding rows in the state table are identical. Two states are equivalent if, for every possible input, they produce the same output and transition to the same next state.\n\nLet's examine the given 5-state table:\n\n| Present State | Next State, Output (x=0) | Next State, Output (x=1) |\n|:-------------:|:------------------------:|:------------------------:|\n| A             | (B, 0)                   | (D, 1)                   |\n| B             | (C, 0)                   | (E, 0)                   |\n| C             | (A, 1)                   | (B, 0)                   |\n| D             | (A, 1)                   | (B, 0)                   |\n| E             | (C, 0)                   | (E, 0)                   |\n\nBy comparing the rows, we find that the rows for states C and D are identical:\n- For C: Input x=0 gives (A, 1); Input x=1 gives (B, 0).\n- For D: Input x=0 gives (A, 1); Input x=1 gives (B, 0).\nTherefore, states C and D are equivalent. We can merge them into a single state, which we will call (CD).\n\nNow, we construct the reduced 4-state table by replacing state D with C (and renaming the class to (CD)) and updating all next-state entries.\n\nThe new set of states is {A, B, (CD), E}.\n\n| Present State | Next State, Output (x=0) | Next State, Output (x=1) |\n|:-------------:|:------------------------:|:------------------------:|\n| A             | (B, 0)                   | ((CD), 1)                |\n| B             | ((CD), 0)                | (E, 0)                   |\n| (CD)          | (A, 1)                   | (B, 0)                   |\n| E             | ((CD), 0)                | (E, 0)                   |\n\nNote that in state A, the next state for x=1 was D, which is now replaced by (CD).\n\n**Step 2: State Reduction by Partitioning**\n\nNow we apply the partitioning method to the 4-state table to find any further equivalences. Two states are equivalent if they are in the same block of the final partition.\n\nThe initial partition, $P_0$, groups states that have identical outputs for all inputs.\n- State A has outputs (0, 1).\n- State B has outputs (0, 0).\n- State (CD) has outputs (1, 0).\n- State E has outputs (0, 0).\n\nGrouping states with identical outputs:\n- Group 1 (outputs 0,1): {A}\n- Group 2 (outputs 0,0): {B, E}\n- Group 3 (outputs 1,0): {(CD)}\n\nSo, the initial partition is $P_0 = \\{ \\{A\\}, \\{B, E\\}, \\{(CD)\\} \\}$.\n\nNext, we form partition $P_1$ by checking the states within each group of $P_0$. For two states to remain in the same group in $P_1$, their next states for each input must be in the same group of $P_0$.\nThe groups $\\{A\\}$ and $\\{(CD)\\}$ are singletons, so they cannot be split further. We only need to check the group $\\{B, E\\}$.\n\nLet's test the pair (B, E):\n- For input x=0:\n  - State B goes to state (CD). State (CD) is in the block $\\{(CD)\\}$ of $P_0$.\n  - State E goes to state (CD). State (CD) is in the block $\\{(CD)\\}$ of $P_0$.\n  The next states for x=0 are in the same block of $P_0$.\n\n- For input x=1:\n  - State B goes to state E. State E is in the block $\\{B, E\\}$ of $P_0$.\n  - State E goes to state E. State E is in the block $\\{B, E\\}$ of $P_0$.\n  The next states for x=1 are in the same block of $P_0$.\n\nSince for both inputs, the next states of B and E lie in the same blocks of $P_0$, the states B and E are equivalent. Thus, the group $\\{B, E\\}$ is not split.\n\nThis means our new partition is $P_1 = \\{ \\{A\\}, \\{B, E\\}, \\{(CD)\\} \\}$.\n\nSince $P_1 = P_0$, the algorithm has terminated. The final partitions represent the equivalence classes of the states of the original machine.\n\nThe equivalence classes are:\n- {A}\n- {B, E}\n- {C, D} (from the initial row matching)\n\nThe original 5 states {A, B, C, D, E} can be reduced to 3 states. The minimal machine will have one state corresponding to {A}, one state for {B, E}, and one state for {C, D}.\n\nTherefore, the minimum number of states required is 3.", "answer": "$$\\boxed{3}$$", "id": "1962514"}, {"introduction": "The goal of state minimization is not just to identify equivalent states, but to create a new, more efficient machine based on them. This final practice focuses on that crucial last step. Given the final set of equivalence classes—the result of the partitioning algorithm—your task is to construct the reduced state table, translating the abstract groupings into a concrete, optimized state machine description [@problem_id:1962511].", "problem": "A synchronous sequential circuit is described by the Mealy state table shown below. The circuit has five states ($S_0, S_1, S_2, S_3, S_4$), one binary input $x$, and one binary output $z$.\n\n| Present State | Next State ($x=0$) | Next State ($x=1$) | Output ($x=0$) | Output ($x=1$) |\n|:-------------:|:------------------:|:------------------:|:--------------:|:--------------:|\n|     $S_0$     |       $S_1$        |       $S_2$        |        0       |        0       |\n|     $S_1$     |       $S_0$        |       $S_1$        |        1       |        0       |\n|     $S_2$     |       $S_0$        |       $S_3$        |        0       |        1       |\n|     $S_3$     |       $S_4$        |       $S_2$        |        0       |        0       |\n|     $S_4$     |       $S_3$        |       $S_4$        |        1       |        0       |\n\nAfter applying the state reduction algorithm, the final partition of equivalent states is found to be $P_{final} = \\{(S_0, S_3), (S_1, S_4), (S_2)\\}$.\n\nYour task is to construct the reduced state table for the minimized machine. The new states in the reduced table should be represented by the state with the smallest subscript from each equivalence class in the partition.\n\nWhich of the following tables represents the correctly minimized machine?\n\n**A.**\n| New State | Next State ($x=0$) | Next State ($x=1$) | Output ($x=0$) | Output ($x=1$) |\n|:---------:|:------------------:|:------------------:|:--------------:|:--------------:|\n|   $S_0$   |       $S_1$        |       $S_2$        |        0       |        0       |\n|   $S_1$   |       $S_0$        |       $S_1$        |        1       |        0       |\n|   $S_2$   |       $S_0$        |       $S_0$        |        0       |        1       |\n\n**B.**\n| New State | Next State ($x=0$) | Next State ($x=1$) | Output ($x=0$) | Output ($x=1$) |\n|:---------:|:------------------:|:------------------:|:--------------:|:--------------:|\n|   $S_0$   |       $S_1$        |       $S_2$        |        0       |        1       |\n|   $S_1$   |       $S_0$        |       $S_1$        |        1       |        0       |\n|   $S_2$   |       $S_0$        |       $S_3$        |        0       |        0       |\n\n**C.**\n| New State | Next State ($x=0$) | Next State ($x=1$) | Output ($x=0$) | Output ($x=1$) |\n|:---------:|:------------------:|:------------------:|:--------------:|:--------------:|\n|   $S_0$   |       $S_1$        |       $S_2$        |        0       |        0       |\n|   $S_1$   |       $S_0$        |       $S_1$        |        1       |        0       |\n|   $S_2$   |       $S_0$        |       $S_2$        |        0       |        1       |\n\n**D.**\n| New State | Next State ($x=0$) | Next State ($x=1$) | Output ($x=0$) | Output ($x=1$) |\n|:---------:|:------------------:|:------------------:|:--------------:|:--------------:|\n|   $S_0$   |       $S_4$        |       $S_2$        |        0       |        0       |\n|   $S_1$   |       $S_3$        |       $S_4$        |        1       |        0       |\n|   $S_2$   |       $S_0$        |       $S_3$        |        0       |        1       |", "solution": "We are given a Mealy machine with states $S_0,S_1,S_2,S_3,S_4$ and input $x \\in \\{0,1\\}$. The given final partition of equivalent states is $P_{final}=\\{(S_0,S_3),(S_1,S_4),(S_2)\\}$. For a reduced Mealy machine, two states in the same equivalence class must, for each input value, produce the same output and transition into equivalent next states. The minimized machine uses the smallest-index representative from each equivalence class, so the reduced states are $S_0$ for $\\{S_0,S_3\\}$, $S_1$ for $\\{S_1,S_4\\}$, and $S_2$ for $\\{S_2\\}$.\n\nConstruct the reduced transitions and outputs by checking both members of each class (when applicable) for each input:\n\n- **Class $\\{S_0,S_3\\} \\to$ representative $S_0$**:\nFor $x=0$: From the original table, $S_0 \\to S_1$ with $z=0$, and $S_3 \\to S_4$ with $z=0$. Since $S_1,S_4$ are in the class $\\{S_1,S_4\\}$, the next reduced state is $S_1$, and the output is $0$.\nFor $x=1$: $S_0 \\to S_2$ with $z=0$, and $S_3 \\to S_2$ with $z=0$. Since $S_2$ is its own class, the next reduced state is $S_2$, and the output is $0$.\nThus, reduced $S_0$: $x=0 \\Rightarrow$ next $S_1$, $z=0$; $x=1 \\Rightarrow$ next $S_2$, $z=0$.\n\n- **Class $\\{S_1,S_4\\} \\to$ representative $S_1$**:\nFor $x=0$: $S_1 \\to S_0$ with $z=1$, and $S_4 \\to S_3$ with $z=1$. Since $S_0,S_3$ are in the class $\\{S_0,S_3\\}$, the next reduced state is $S_0$, and the output is $1$.\nFor $x=1$: $S_1 \\to S_1$ with $z=0$, and $S_4 \\to S_4$ with $z=0$. Since $S_1,S_4$ are in the same class $\\{S_1,S_4\\}$, the next reduced state is $S_1$, and the output is $0$.\nThus, reduced $S_1$: $x=0 \\Rightarrow$ next $S_0$, $z=1$; $x=1 \\Rightarrow$ next $S_1$, $z=0$.\n\n- **Class $\\{S_2\\} \\to$ representative $S_2$**:\nFor $x=0$: $S_2 \\to S_0$ with $z=0$. Since $S_0$ is in class $\\{S_0,S_3\\}$, the next reduced state is $S_0$, and the output is $0$.\nFor $x=1$: $S_2 \\to S_3$ with $z=1$. Since $S_3$ is in class $\\{S_0,S_3\\}$, the next reduced state is $S_0$, and the output is $1$.\nThus, reduced $S_2$: $x=0 \\Rightarrow$ next $S_0$, $z=0$; $x=1 \\Rightarrow$ next $S_0$, $z=1$.\n\nTherefore, the reduced state table is:\n- Row $S_0$: next states $S_1$ (for $x=0$), $S_2$ (for $x=1$); outputs $0$ (for $x=0$), $0$ (for $x=1$).\n- Row $S_1$: next states $S_0$ (for $x=0$), $S_1$ (for $x=1$); outputs $1$ (for $x=0$), $0$ (for $x=1$).\n- Row $S_2$: next states $S_0$ (for $x=0$), $S_0$ (for $x=1$); outputs $0$ (for $x=0$), $1$ (for $x=1$).\n\nComparing with the options, this matches option A exactly; options B, C, and D disagree with one or more entries.", "answer": "$$\\boxed{A}$$", "id": "1962511"}]}