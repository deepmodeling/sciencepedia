{"hands_on_practices": [{"introduction": "To begin our practical journey, we will apply the implication chart method to a straightforward Moore-type finite state machine. This exercise [@problem_id:1942672] is foundational; it allows us to practice the initial setup of the chart and the first crucial step: identifying states that are immediately distinguishable by their outputs. By working through this example, you will build a solid base for tackling more complex minimization problems.", "problem": "A Moore type sequential circuit is described by a state table that defines its behavior. The machine has four states denoted by $S_0, S_1, S_2, S_3$. It takes a single binary input, $x \\in \\{0, 1\\}$, and produces a single binary output, $z$. The output $z$ for each state is given as: $z(S_0) = 0$, $z(S_1) = 1$, $z(S_2) = 0$, and $z(S_3) = 1$. The state transitions are defined as follows:\n\n- When the present state is $S_0$: if the input $x=0$, the next state is $S_1$; if $x=1$, the next state is $S_0$.\n- When the present state is $S_1$: if the input $x=0$, the next state is $S_0$; if $x=1$, the next state is $S_1$.\n- When the present state is $S_2$: if the input $x=0$, the next state is $S_3$; if $x=1$, the next state is $S_2$.\n- When the present state is $S_3$: if the input $x=0$, the next state is $S_2$; if $x=1$, the next state is $S_3$.\n\nUsing the implication chart method, determine all pairs of equivalent states. From the options below, select all that represent a pair of equivalent states.\n\nA. The pair $(S_0, S_1)$\n\nB. The pair $(S_0, S_2)$\n\nC. The pair $(S_0, S_3)$\n\nD. The pair $(S_1, S_2)$\n\nE. The pair $(S_1, S_3)$\n\nF. The pair $(S_2, S_3)$\n\nG. No pairs of states are equivalent.", "solution": "We use the Moore state equivalence definition: states $p$ and $q$ are equivalent if and only if $z(p)=z(q)$ and for every input symbol $a$ their successors $\\delta(p,a)$ and $\\delta(q,a)$ are equivalent, and this condition holds recursively for all input strings.\n\nConstruct the implication chart over all unordered pairs:\n$$(S_{0},S_{1}),\\ (S_{0},S_{2}),\\ (S_{0},S_{3}),\\ (S_{1},S_{2}),\\ (S_{1},S_{3}),\\ (S_{2},S_{3}).$$\nInitial marking by output mismatch (Moore machines require equal outputs for equivalence):\n$$z(S_{0})=0,\\ z(S_{2})=0,\\quad z(S_{1})=1,\\ z(S_{3})=1.$$\nHence pairs with different outputs are immediately distinguishable and marked:\n$$(S_{0},S_{1}),\\ (S_{0},S_{3}),\\ (S_{1},S_{2}),\\ (S_{2},S_{3}).$$\nUnmarked candidates remain:\n$$(S_{0},S_{2})\\quad\\text{and}\\quad (S_{1},S_{3}).$$\n\nAdd implications from transitions:\n- For $(S_{0},S_{2})$: with $x=0$, $\\delta(S_{0},0)=S_{1}$ and $\\delta(S_{2},0)=S_{3}$, so $(S_{0},S_{2})$ implies $(S_{1},S_{3})$; with $x=1$, $\\delta(S_{0},1)=S_{0}$ and $\\delta(S_{2},1)=S_{2}$, so it implies itself $(S_{0},S_{2})$.\n- For $(S_{1},S_{3})$: with $x=0$, $\\delta(S_{1},0)=S_{0}$ and $\\delta(S_{3},0)=S_{2}$, so $(S_{1},S_{3})$ implies $(S_{0},S_{2})$; with $x=1$, $\\delta(S_{1},1)=S_{1}$ and $\\delta(S_{3},1)=S_{3}$, so it implies itself $(S_{1},S_{3})$.\n\nSince neither implied pair is marked, no further markings occur, and the process stabilizes. Therefore, the equivalent pairs are $(S_{0},S_{2})$ and $(S_{1},S_{3})$. From the options, these correspond to B and E.", "answer": "$$\\boxed{BE}$$", "id": "1942672"}, {"introduction": "State minimization can sometimes present intriguing logical puzzles, such as cyclic dependencies where the equivalence of one state pair depends on another, which in turn depends on the first. This hypothetical Mealy machine [@problem_id:1942718] is specifically designed to explore this scenario. This practice will demonstrate how the partition-refinement algorithm elegantly resolves such loops, confirming equivalence when no direct incompatibility is ever introduced.", "problem": "A sequential circuit is designed as a Mealy-type finite-state machine with a single binary input $x$ and a single binary output $z$. The machine has four states, denoted $S_0, S_1, S_2, S_3$. Its behavior is completely described by the following state table, where 'Next State' and 'Output' are columns grouped by the input value $x$:\n\n| Present State | Next State ($x=0$) | Next State ($x=1$) | Output ($x=0$) | Output ($x=1$) |\n|:-------------:|:------------------:|:------------------:|:--------------:|:--------------:|\n| $S_0$         | $S_2$              | $S_0$              | 0              | 1              |\n| $S_1$         | $S_3$              | $S_1$              | 0              | 1              |\n| $S_2$         | $S_2$              | $S_0$              | 1              | 0              |\n| $S_3$         | $S_3$              | $S_1$              | 1              | 0              |\n\nApply a standard state minimization algorithm to this machine. Based on your analysis, which of the following statements accurately describes the relationship between the state pairs $(S_0, S_1)$ and $(S_2, S_3)$ leading to the minimized machine?\n\nA. The pair $(S_0, S_1)$ is found to be equivalent, and the pair $(S_2, S_3)$ is also found to be equivalent. The machine can be reduced to two states.\n\nB. Neither the pair $(S_0, S_1)$ nor the pair $(S_2, S_3)$ are equivalent. The machine is already minimal and cannot be reduced.\n\nC. The pair $(S_0, S_1)$ is equivalent, but the pair $(S_2, S_3)$ is not equivalent. The machine can be reduced to three states.\n\nD. The pair $(S_2, S_3)$ is equivalent, but the pair $(S_0, S_1)$ is not equivalent. The machine can be reduced to three states.\n\nE. All four states $(S_0, S_1, S_2, S_3)$ are found to be equivalent to each other. The machine can be reduced to a single state.", "solution": "We use standard partition-refinement for Mealy machines. Two states are equivalent if, for every input string, they produce identical output strings. Algorithmically, we begin by grouping states that produce the same outputs for each input symbol, then iteratively refine using next-state consistency.\n\nDefine for each state $S$ its output signature under the one-step inputs:\n$$\no(S) \\equiv \\big(z(S, x=0),\\, z(S, x=1)\\big).\n$$\nFrom the table:\n- $o(S_{0})=(0,1)$,\n- $o(S_{1})=(0,1)$,\n- $o(S_{2})=(1,0)$,\n- $o(S_{3})=(1,0)$.\n\nThus the initial partition is\n$$\nP_{0}=\\big\\{\\{S_{0},S_{1}\\},\\,\\{S_{2},S_{3}\\}\\big\\}.\n$$\n\nRefine by checking, for any two states in the same block, whether their next states under each input fall in the same blocks of the current partition. Let $B(\\cdot)$ map a state to its block in $P_{0}$, and define the next-state block pair\n$$\nn(S)\\equiv \\big(B(\\text{Next}(S,0)),\\,B(\\text{Next}(S,1))\\big).\n$$\n\nCheck the block $\\{S_{0},S_{1}\\}$:\n- For $S_{0}$: $\\text{Next}(S_{0},0)=S_{2}\\in\\{S_{2},S_{3}\\}$ and $\\text{Next}(S_{0},1)=S_{0}\\in\\{S_{0},S_{1}\\}$, so\n$$\nn(S_{0})=\\big(\\{S_{2},S_{3}\\},\\,\\{S_{0},S_{1}\\}\\big).\n$$\n- For $S_{1}$: $\\text{Next}(S_{1},0)=S_{3}\\in\\{S_{2},S_{3}\\}$ and $\\text{Next}(S_{1},1)=S_{1}\\in\\{S_{0},S_{1}\\}$, so\n$$\nn(S_{1})=\\big(\\{S_{2},S_{3}\\},\\,\\{S_{0},S_{1}\\}\\big).\n$$\nHence $n(S_{0})=n(S_{1})$, so $\\{S_{0},S_{1}\\}$ remains a single block.\n\nCheck the block $\\{S_{2},S_{3}\\}$:\n- For $S_{2}$: $\\text{Next}(S_{2},0)=S_{2}\\in\\{S_{2},S_{3}\\}$ and $\\text{Next}(S_{2},1)=S_{0}\\in\\{S_{0},S_{1}\\}$, so\n$$\nn(S_{2})=\\big(\\{S_{2},S_{3}\\},\\,\\{S_{0},S_{1}\\}\\big).\n$$\n- For $S_{3}$: $\\text{Next}(S_{3},0)=S_{3}\\in\\{S_{2},S_{3}\\}$ and $\\text{Next}(S_{3},1)=S_{1}\\in\\{S_{0},S_{1}\\}$, so\n$$\nn(S_{3})=\\big(\\{S_{2},S_{3}\\},\\,\\{S_{0},S_{1}\\}\\big).\n$$\nHence $n(S_{2})=n(S_{3})$, so $\\{S_{2},S_{3}\\}$ remains a single block.\n\nThe partition is stable and no further refinement occurs. Therefore $(S_{0},S_{1})$ are equivalent and $(S_{2},S_{3})$ are equivalent, yielding a minimized machine with two states. This corresponds to option A.", "answer": "$$\\boxed{A}$$", "id": "1942718"}, {"introduction": "The power of the implication chart method lies in its iterative process, which can uncover non-obvious incompatibilities through a domino-like effect. This challenge [@problem_id:1942703] features a Mealy FSM specifically constructed to showcase this propagation phenomenon. By tracing how a single, directly identifiable incompatible pair triggers a cascade of discoveries across multiple passes, you will gain a deeper appreciation for the algorithm's thorough and systematic nature.", "problem": "A digital systems engineer is analyzing a Mealy-type Finite State Machine (FSM) specified by the state table below. The machine has five states $\\{S_0, S_1, S_2, S_3, S_4\\}$, a single binary input $X$, and a single binary output $Z$. The engineer suspects that the specific structure of this state table is designed to stress-test state minimization algorithms.\n\nThe state table is as follows:\n\n| Present State | Next State, $X=0$ | Next State, $X=1$ | Output $Z$, $X=0$ | Output $Z$, $X=1$ |\n|:-------------:|:-----------------:|:-----------------:|:-------------------:|:-------------------:|\n|     $S_0$     |       $S_0$       |       $S_1$       |          0          |          0          |\n|     $S_1$     |       $S_0$       |       $S_2$       |          0          |          0          |\n|     $S_2$     |       $S_0$       |       $S_3$       |          0          |          0          |\n|     $S_3$     |       $S_0$       |       $S_4$       |          0          |          0          |\n|     $S_4$     |       $S_0$       |       $S_0$       |          1          |          0          |\n\nYour task is to analyze this FSM using the implication chart method for state minimization. States are considered incompatible if they are 1-distinguishable (have different outputs for the same input) or if they imply a pair of states that is already known to be incompatible. The process of finding all incompatible pairs involves an initial pass to identify 1-distinguishable pairs, followed by subsequent passes that propagate incompatibilities through the chart until no new incompatible pairs can be found in a full pass.\n\nDetermine the number of propagation passes required for the implication chart to stabilize *after* the initial pass that identifies all 1-distinguishable pairs.", "solution": "We analyze the Mealy FSM with states $\\{S_{0},S_{1},S_{2},S_{3},S_{4}\\}$, one input $X \\in \\{0,1\\}$, and one output $Z \\in \\{0,1\\}$. The transition and output behavior is:\n- For $X=0$: $\\delta(S_{i},0)=S_{0}$ for all $i$, and $Z=0$ for $S_{0},S_{1},S_{2},S_{3}$ while $Z=1$ for $S_{4}$.\n- For $X=1$: $\\delta(S_{0},1)=S_{1}$, $\\delta(S_{1},1)=S_{2}$, $\\delta(S_{2},1)=S_{3}$, $\\delta(S_{3},1)=S_{4}$, $\\delta(S_{4},1)=S_{0}$, and $Z=0$ for all states.\n\nStep 1 (initial pass for 1-distinguishability):\n- On $X=1$, outputs are all $0$, so no pair is 1-distinguishable on $X=1$.\n- On $X=0$, $Z=1$ only in $S_{4}$ and $Z=0$ in $S_{0},S_{1},S_{2},S_{3}$. Hence every pair $(S_{4},S_{i})$ with $i \\in \\{0,1,2,3\\}$ is immediately incompatible. No other pairs are 1-distinguishable.\n\nThus, after the initial pass, the marked incompatible pairs are $(S_{4},S_{0})$, $(S_{4},S_{1})$, $(S_{4},S_{2})$, $(S_{4},S_{3})$.\n\nPropagation setup for the remaining pairs:\nThe remaining unmarked pairs among $\\{S_{0},S_{1},S_{2},S_{3}\\}$ are\n$$(S_{1},S_{0}),\\ (S_{2},S_{0}),\\ (S_{2},S_{1}),\\ (S_{3},S_{0}),\\ (S_{3},S_{1}),\\ (S_{3},S_{2}).$$\nFor these pairs:\n- For $X=0$, the next-state pair is always $(S_{0},S_{0})$, which imposes no constraint (trivially compatible).\n- For $X=1$, we get the following implications:\n$$(S_{1},S_{0}) \\Rightarrow (S_{2},S_{1}),$$\n$$(S_{2},S_{0}) \\Rightarrow (S_{3},S_{1}),$$\n$$(S_{2},S_{1}) \\Rightarrow (S_{3},S_{2}),$$\n$$(S_{3},S_{0}) \\Rightarrow (S_{4},S_{1}),$$\n$$(S_{3},S_{1}) \\Rightarrow (S_{4},S_{2}),$$\n$$(S_{3},S_{2}) \\Rightarrow (S_{4},S_{3}).$$\nHere, $(S_{4},S_{1})$, $(S_{4},S_{2})$, and $(S_{4},S_{3})$ are already incompatible from the initial pass.\n\nPropagation passes after the initial pass:\n- Pass 1: Any pair that directly implies an already-marked pair becomes incompatible. Therefore, $(S_{3},S_{0})$, $(S_{3},S_{1})$, and $(S_{3},S_{2})$ become incompatible due to implications to $(S_{4},S_{1})$, $(S_{4},S_{2})$, and $(S_{4},S_{3})$, respectively.\n- Pass 2: Using the newly marked pairs from Pass 1, $(S_{2},S_{1}) \\Rightarrow (S_{3},S_{2})$ and $(S_{2},S_{0}) \\Rightarrow (S_{3},S_{1})$ now imply incompatible pairs, so $(S_{2},S_{1})$ and $(S_{2},S_{0})$ become incompatible.\n- Pass 3: Finally, $(S_{1},S_{0}) \\Rightarrow (S_{2},S_{1})$, and since $(S_{2},S_{1})$ was marked incompatible in Pass 2, $(S_{1},S_{0})$ becomes incompatible in Pass 3.\n\nAfter Pass 3, all pairs are marked incompatible, and no further changes can occur. Hence, the implication chart stabilizes after $3$ propagation passes beyond the initial 1-distinguishability pass.", "answer": "$$\\boxed{3}$$", "id": "1942703"}]}