{"hands_on_practices": [{"introduction": "We begin with a classic application of finite state machines: a synchronous counter. This exercise involves designing a 2-bit up/down counter, where a control input $X$ determines whether the count increments or decrements. This practice is fundamental for understanding how to map a regular, well-defined state sequence onto the input logic of JK flip-flops, a core skill in digital design [@problem_id:1938557].", "problem": "Design a synchronous 2-bit binary counter using two JK flip-flops. The counter has a single control input, denoted as $X$. The two output bits of the counter are $Q_1$ (most significant bit, MSB) and $Q_0$ (least significant bit, LSB).\n\nThe behavior of the counter is determined by the input $X$ as follows:\n- If $X=0$, the counter counts up through the sequence: 00, 01, 10, 11, and then wraps around to 00.\n- If $X=1$, the counter counts down through the sequence: 00, 11, 10, 01, and then wraps around to 00.\n\nThe state of the counter is represented by the flip-flop outputs $Q_1Q_0$. The JK inputs for the MSB flip-flop are $J_1$ and $K_1$, and for the LSB flip-flop are $J_0$ and $K_0$. Your task is to determine the simplified Boolean expressions for these four inputs as functions of $Q_1$, $Q_0$, and $X$.\n\nWhich of the following sets of equations correctly implements the specified counter?\n\nA. $J_1 = Q_0\\bar{X} + \\bar{Q_0}X$, $K_1 = Q_0\\bar{X} + \\bar{Q_0}X$, $J_0 = 1$, $K_0 = 1$\n\nB. $J_1 = 1$, $K_1 = 1$, $J_0 = Q_1\\bar{X} + \\bar{Q_1}X$, $K_0 = Q_1\\bar{X} + \\bar{Q_1}X$\n\nC. $J_1 = \\bar{Q_0}\\bar{X} + Q_0X$, $K_1 = \\bar{Q_0}\\bar{X} + Q_0X$, $J_0 = 1$, $K_0 = 1$\n\nD. $J_1 = Q_0$, $K_1 = Q_0$, $J_0 = X$, $K_0 = X$\n\nE. $J_1 = Q_0 \\oplus X$, $K_1 = Q_0$, $J_0 = 1$, $K_0 = 1$", "solution": "We design a synchronous 2-bit up/down counter with control input $X$ using two JK flip-flops with outputs $Q_{1}$ (MSB) and $Q_{0}$ (LSB). We will design the counter by first determining the next-state logic for each flip-flop, $Q^+$ as a function of the present state $Q$ and inputs. Then, we will derive the required JK inputs. For a JK flip-flop, an efficient method is to find the toggle condition $T = Q \\oplus Q^+$, which allows us to set both $J$ and $K$ inputs equal to $T$.\n\nFirst determine the next-state functions.\n\n1) For the LSB $Q_{0}$:\nFrom both sequences (up and down), $Q_{0}$ toggles every clock. Therefore,\n$$\nQ_{0}^{+} = \\overline{Q_{0}}.\n$$\nTo implement unconditional toggling with a JK flip-flop, choose\n$$\nJ_{0} = 1, \\quad K_{0} = 1.\n$$\n\n2) For the MSB $Q_{1}$:\nCompute $Q_{1}^{+}$ as a function of $Q_{1}$, $Q_{0}$, and $X$.\n\n- If $X=0$ (up): the sequence is $00 \\to 01 \\to 10 \\to 11 \\to 00$, which yields\n$$\nQ_{1}^{+} = Q_{1} \\oplus Q_{0}.\n$$\n- If $X=1$ (down): the sequence is $00 \\to 11 \\to 10 \\to 01 \\to 00$, which yields\n$$\nQ_{1}^{+} = \\overline{Q_{1} \\oplus Q_{0}}.\n$$\nCombining these by multiplexing with $X$,\n$$\nQ_{1}^{+} = (Q_{1} \\oplus Q_{0}) \\oplus X.\n$$\n\nTo drive a JK flip-flop via a toggle signal, use the fact that the toggle condition is $T_{1} = Q_{1} \\oplus Q_{1}^{+}$. Thus,\n$$\nT_{1} = Q_{1} \\oplus \\big((Q_{1} \\oplus Q_{0}) \\oplus X\\big) = Q_{0} \\oplus X,\n$$\nusing associativity and cancellation of $\\oplus$. Therefore set\n$$\nJ_{1} = K_{1} = T_{1} = Q_{0} \\oplus X.\n$$\nIn sum:\n$$\nJ_{1} = K_{1} = Q_{0} \\oplus X = Q_{0}\\,\\overline{X} + \\overline{Q_{0}}\\,X, \\quad J_{0} = 1, \\quad K_{0} = 1.\n$$\nComparing with the options, this matches option A.", "answer": "$$\\boxed{A}$$", "id": "1938557"}, {"introduction": "Next, we move to a common problem in data processing and communications: sequence detection. This task requires you to build a Mealy FSM that recognizes a specific bit pattern ('011') within a serial data stream. This exercise will sharpen your skills in defining states based on partial sequence recognition and implementing input-dependent transitions and outputs, which are hallmarks of Mealy machine design [@problem_id:1938558].", "problem": "A digital system is required to monitor a serial binary input stream, represented by the variable $x$. The system must generate an output $z=1$ for one clock cycle upon the detection of the specific non-overlapping sequence '011'. For any other input, the output $z$ must be $0$. The detection process must be implemented as a Mealy-type Finite State Machine (FSM). If the sequence is broken at any point, the machine should reset to a state that allows for the detection of a new sequence starting with '0'. For example, if the input is '010', the final '0' is considered the beginning of a new potential sequence.\n\nThe FSM is to be synthesized using two JK flip-flops, with their outputs denoted as $Q_1$ and $Q_0$. The states are assigned as follows:\n- `S0` (Initial state): $Q_1Q_0 = 00$\n- `S1` (First '0' detected): $Q_1Q_0 = 01$\n- `S2` ('01' detected): $Q_1Q_0 = 11$\n\nThe state $Q_1Q_0 = 10$ is unused. Determine the correct set of simplified Boolean expressions for the flip-flop inputs ($J_1, K_1, J_0, K_0$) and the machine output ($z$). The complement of a variable $A$ is denoted as $\\overline{A}$.\n\nWhich of the following options represents the correct set of logic equations?\n\nA. $J_1 = Q_0 x$, $K_1 = 1$, $J_0 = \\bar{x}$, $K_0 = x$, $z = Q_1 x$\n\nB. $J_1 = Q_0 x$, $K_1 = Q_1$, $J_0 = \\bar{Q_1}\\bar{x}$, $K_0 = Q_1 x$, $z = Q_1 Q_0$\n\nC. $J_1 = Q_0 x$, $K_1 = Q_1$, $J_0 = \\bar{Q_1}\\bar{x}$, $K_0 = Q_1 x$, $z = Q_1 Q_0 x$\n\nD. $J_1 = Q_1$, $K_1 = Q_0 x$, $J_0 = \\bar{Q_1}\\bar{x}$, $K_0 = Q_1 x$, $z = Q_1 Q_0 x$\n\nE. $J_1 = \\bar{Q_0} x$, $K_1 = Q_1$, $J_0 = \\bar{x}$, $K_0 = \\bar{Q_1} x$, $z = Q_0 x$", "solution": "We design a Mealy FSM to detect the non-overlapping pattern 011, with state encoding $Q_{1}Q_{0}$ as $S0=00$, $S1=01$, $S2=11$ and $10$ unused. The required state transitions consistent with non-overlap and the given example are:\n- From $S0$ $(00)$: if $x=0$ then go to $S1$ $(01)$; if $x=1$ then stay at $S0$ $(00)$.\n- From $S1$ $(01)$: if $x=1$ then go to $S2$ $(11)$; if $x=0$ then stay at $S1$ $(01)$ (the new $0$ can be the start).\n- From $S2$ $(11)$: if $x=1$ then the sequence 011 is detected, produce $z=1$ for this clock and go to $S0$ $(00)$ (non-overlap); if $x=0$ then go to $S1$ $(01)$ (the trailing $0$ is a new start, as in the example 010).\n\nThus, the next-state/output table over used states is:\n- $(Q_{1},Q_{0},x)=(0,0,0)\\rightarrow (Q_{1}^{+},Q_{0}^{+})=(0,1),\\ z=0$.\n- $(0,0,1)\\rightarrow (0,0),\\ z=0$.\n- $(0,1,0)\\rightarrow (0,1),\\ z=0$.\n- $(0,1,1)\\rightarrow (1,1),\\ z=0$.\n- $(1,1,0)\\rightarrow (0,1),\\ z=0$.\n- $(1,1,1)\\rightarrow (0,0),\\ z=1$.\n\nUsing the JK flip-flop excitation conditions:\n- For $Q=0\\to Q^{+}=0$: $J=0$ (with $K$ don’t care).\n- For $Q=0\\to Q^{+}=1$: $J=1$ (with $K$ don’t care).\n- For $Q=1\\to Q^{+}=0$: $K=1$ (with $J$ don’t care).\n- For $Q=1\\to Q^{+}=1$: $K=0$ (with $J$ don’t care).\n\nDerive $J_{1},K_{1}$ from the rows for $Q_{1}$:\n- When $Q_{1}=0$ and $(Q_{1}^{+}=1)$ occurs only at $(Q_{1},Q_{0},x)=(0,1,1)$, so $J_{1}=1$ only there. A minimal form using used/don’t-care rows is\n$$\nJ_{1}=\\bar{Q}_{1}Q_{0}x \\ \\text{which simplifies (using don’t cares when }Q_{1}=1\\text{) to}\\ J_{1}=Q_{0}x.\n$$\n- When $Q_{1}=1$ we always require $Q_{1}^{+}=0$ (both inputs in $S2$ go to $Q_{1}^{+}=0$), hence $K_{1}=1$ for $Q_{1}=1$. A minimal expression is\n$$\nK_{1}=Q_{1}.\n$$\n\nDerive $J_{0},K_{0}$ from the rows for $Q_{0}$:\n- When $Q_{0}=0$, $(Q_{0}^{+}=1)$ at $(0,0,0)$ and $(Q_{0}^{+}=0)$ at $(0,0,1)$, hence\n$$\nJ_{0}=\\bar{Q}_{0}\\bar{x}.\n$$\nUsing don’t cares in unused states, this is equivalently written as\n$$\nJ_{0}=\\bar{Q}_{1}\\bar{x}.\n$$\n- When $Q_{0}=1$, we require $Q_{0}^{+}=0$ only at $(1,1,1)$, hence\n$$\nK_{0}=Q_{1}x.\n$$\n\nMealy output is asserted only when in $S2$ and $x=1$, therefore\n$$\nz=Q_{1}Q_{0}x.\n$$\n\nCollecting the simplified Boolean expressions that respect used-state behavior and allow simplification with unused/don’t-care state, we have\n$$\nJ_{1}=Q_{0}x,\\quad K_{1}=Q_{1},\\quad J_{0}=\\bar{Q}_{1}\\bar{x},\\quad K_{0}=Q_{1}x,\\quad z=Q_{1}Q_{0}x,\n$$\nwhich matches option C.", "answer": "$$\\boxed{C}$$", "id": "1938558"}, {"introduction": "Our final practice tackles a more complex, real-world scenario by designing a resource arbiter. Arbiters are essential for managing access to shared components in digital systems, preventing conflicts and ensuring orderly operation. This problem involves implementing a round-robin priority scheme for two request lines, challenging you to synthesize an FSM that handles multiple inputs and implements a fair, stateful decision-making process [@problem_id:1938551].", "problem": "A synchronous digital system is required to function as a resource arbiter for two requesting devices. The system, a Finite State Machine (FSM), has two request inputs, $R_1$ and $R_2$, and two grant outputs, $G_1$ and $G_2$. The behavior of the arbiter is governed by the following rules:\n\n1.  At most, one grant output can be active at any given time.\n2.  A grant $G_i$ is asserted (logic high) if and only if its corresponding request $R_i$ is asserted and access is granted by the FSM.\n3.  If no requests are active ($R_1=0, R_2=0$), the system remains in an idle state with no active grants.\n4.  If a single request $R_i$ is active, it is granted, and $G_i$ is asserted.\n5.  If both $R_1$ and $R_2$ are asserted simultaneously, a round-robin priority scheme is employed. The requester that was *not* the most recent one to be granted access receives priority.\n6.  Once a requester $R_i$ is granted access, it holds the grant ($G_i$ remains high) as long as it keeps its request $R_i$ asserted. When $R_i$ is de-asserted, the grant $G_i$ is also de-asserted.\n7.  Upon the de-assertion of a grant for requester $R_i$, the arbiter transitions to an idle state where the *other* requester, $R_j$ (where $j \\neq i$), now has priority for the next arbitration cycle.\n8.  The system is initialized to an idle state where requester $R_1$ has priority.\n\nYou are to synthesize this arbiter as a Mealy FSM using two JK flip-flops, with state variables denoted as $Q_A$ and $Q_B$. The states are defined and assigned as follows:\n- State `S0` (Idle, Priority for $R_1$): $Q_A Q_B = 00$\n- State `S1` (Granting to $R_1$): $Q_A Q_B = 01$\n- State `S2` (Idle, Priority for $R_2$): $Q_A Q_B = 10$\n- State `S3` (Granting to $R_2$): $Q_A Q_B = 11$\n\nDerive the simplified sum-of-products (SOP) Boolean expression for the flip-flop input $J_A$. The expression should be in terms of the inputs $R_1$, $R_2$ and the state variables $Q_A$, $Q_B$. Use an overbar to denote negation (e.g., $\\overline{X}$).", "solution": "We model the arbiter as a Mealy FSM with four states encoded by the JK flip-flops as follows: $S0: Q_A Q_B=00$ (idle, $R_1$ priority), $S1: Q_A Q_B=01$ (grant $R_1$), $S2: Q_A Q_B=10$ (idle, $R_2$ priority), $S3: Q_A Q_B=11$ (grant $R_2$). From the rules:\n- In idle states $S0$ and $S2$, if a single request is active it is granted; if both are active, the priority of that idle state decides which grant is issued.\n- In granting states $S1$ and $S3$, the grant is held as long as the corresponding request remains asserted; when the request de-asserts, the FSM transitions to the idle state with the other requester having priority.\n\nThus, the next-state transitions are:\n- From $S0$ ($00$): $(R_1,R_2)=(0,0)\\to S0$, $(1,0)\\to S1$, $(0,1)\\to S3$, $(1,1)\\to S1$.\n- From $S1$ ($01$): if $R_1=1$ (regardless of $R_2$) stay in $S1$; if $R_1=0$ transition to $S2$.\n- From $S2$ ($10$): $(0,0)\\to S2$, $(1,0)\\to S1$, $(0,1)\\to S3$, $(1,1)\\to S3$.\n- From $S3$ ($11$): if $R_2=1$ (regardless of $R_1$) stay in $S3$; if $R_2=0$ transition to $S0$.\n\nExtract the next value of $Q_A$, denoted $Q_A^{+}$, from these transitions:\n- For $S0$ ($Q_A=0,Q_B=0$): $Q_A^{+}=1$ only when $(R_1,R_2)=(0,1)$, i.e., $Q_A^{+}= \\overline{R_1} R_2$.\n- For $S1$ ($Q_A=0,Q_B=1$): $Q_A^{+}=1$ only when $R_1=0$ (independent of $R_2$), i.e., $Q_A^{+}= \\overline{R_1}$.\n- For $S2$ ($Q_A=1,Q_B=0$): $Q_A^{+}=1$ for $(R_1,R_2)\\in\\{(0,0),(0,1),(1,1)\\}$, i.e., $Q_A^{+}= \\overline{R_1} + R_2$.\n- For $S3$ ($Q_A=1,Q_B=1$): $Q_A^{+}=1$ if and only if $R_2=1$, i.e., $Q_A^{+}= R_2$.\n\nThe JK excitation relation for flip-flop $A$ is that when $Q_A=0$, $J_A=Q_A^{+}$ (and $K_A$ is a don't care); when $Q_A=1$, $J_A$ is a don't care. Therefore,\n$$\nJ_A = \\overline{Q_A}\\,Q_A^{+}.\n$$\nRestricting $Q_A^{+}$ to the rows with $Q_A=0$ and inserting the row-wise expressions above gives\n$$\nJ_A = \\overline{Q_A}\\big( \\overline{Q_B}\\,\\overline{R_1}R_2 + Q_B\\,\\overline{R_1} \\big)\n= \\overline{Q_A}\\,\\overline{R_1}\\big( Q_B + \\overline{Q_B} R_2 \\big).\n$$\nUsing the absorption identity $X + \\overline{X}Y = X + Y$ with $X=Q_B$, $Y=R_2$, we simplify to\n$$\nJ_A = \\overline{Q_A}\\,\\overline{R_1}\\,(Q_B + R_2).\n$$\nExpressed as a sum of products, this is\n$$\nJ_A = \\overline{Q_A}\\,\\overline{R_1}\\,Q_B + \\overline{Q_A}\\,\\overline{R_1}\\,R_2.\n$$\nThis is the simplified SOP Boolean expression for $J_A$ in terms of $R_1$, $R_2$, $Q_A$, and $Q_B$.", "answer": "$$\\boxed{\\overline{Q_{A}}\\,\\overline{R_{1}}\\,Q_{B}+\\overline{Q_{A}}\\,\\overline{R_{1}}\\,R_{2}}$$", "id": "1938551"}]}