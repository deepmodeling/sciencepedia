{"hands_on_practices": [{"introduction": "Mastering the Mealy machine begins with understanding its step-by-step operation. This first exercise provides a direct way to practice this fundamental skill by tracing an input sequence through a given machine [@problem_id:1968925]. By carefully applying the transition and output rules at each step, you will solidify your understanding of how a Mealy machine's output is determined by the combination of its current state and the immediate input it receives.", "problem": "A Mealy machine is a type of finite-state machine whose output value is determined by both its current state and the current input. Consider a specific Mealy machine with two states, $S_0$ and $S_1$, an input alphabet of $\\{0, 1\\}$, and an output alphabet of $\\{0, 1\\}$. The behavior of this machine is defined by the following rules:\n\n**Transition Rules:**\n1.  If the input is '0', the machine remains in its current state.\n2.  If the input is '1', the machine transitions to the other state (from $S_0$ to $S_1$, or from $S_1$ to $S_0$).\n\n**Output Rules:**\n1.  If the input is '0', the machine's output is always '1', regardless of the current state.\n2.  If the input is '1', the machine's output is '0' when transitioning out of state $S_0$.\n3.  If the input is '1', the machine's output is '1' when transitioning out of state $S_1$.\n\nGiven that the machine starts in state $S_0$, determine the output sequence generated for the input sequence '10011'.\n\nA. 10101\n\nB. 01100\n\nC. 11101\n\nD. 01110\n\nE. 10011", "solution": "We are asked to find the output sequence of a Mealy machine for a given input sequence. The machine starts in state $S_0$ and processes the input sequence `10011` bit by bit. We will trace the state and output for each input symbol.\n\nThe initial state is $S_{current} = S_0$.\n\n**Step 1: Process the first input '1'.**\n- Current State: $S_0$\n- Input: '1'\n- According to the transition rule for input '1', the machine transitions to the other state. So, the next state is $S_1$.\n- According to the output rule for input '1' from state $S_0$, the output is '0'.\n- Output so far: `0`\n- New State: $S_1$\n\n**Step 2: Process the second input '0'.**\n- Current State: $S_1$\n- Input: '0'\n- According to the transition rule for input '0', the machine remains in its current state. So, the next state is $S_1$.\n- According to the output rule for input '0', the output is '1'.\n- Output so far: `01`\n- New State: $S_1$\n\n**Step 3: Process the third input '0'.**\n- Current State: $S_1$\n- Input: '0'\n- According to the transition rule for input '0', the machine remains in its current state. So, the next state is $S_1$.\n- According to the output rule for input '0', the output is '1'.\n- Output so far: `011`\n- New State: $S_1$\n\n**Step 4: Process the fourth input '1'.**\n- Current State: $S_1$\n- Input: '1'\n- According to the transition rule for input '1', the machine transitions to the other state. So, the next state is $S_0$.\n- According to the output rule for input '1' from state $S_1$, the output is '1'.\n- Output so far: `0111`\n- New State: $S_0$\n\n**Step 5: Process the fifth input '1'.**\n- Current State: $S_0$\n- Input: '1'\n- According to the transition rule for input '1', the machine transitions to the other state. So, the next state is $S_1$.\n- According to the output rule for input '1' from state $S_0$, the output is '0'.\n- Final output sequence: `01110`\n- Final State: $S_1$\n\nThe complete output sequence generated by the machine for the input `10011` is `01110`. This corresponds to option D.", "answer": "$$\\boxed{D}$$", "id": "1968925"}, {"introduction": "Mealy machines are exceptionally well-suited for tasks like sequence detection in digital streams. This practice moves beyond simple tracing to design-oriented thinking, focusing on a critical moment in the operation of a sequence detector [@problem_id:1968914]. Here, you will analyze the specific transition and output required to correctly identify a target sequence and reset the machine, a core concept in designing robust and non-overlapping pattern recognizers.", "problem": "A digital controller is being designed to monitor a serial binary data stream. The controller must be implemented as a Mealy finite-state machine. A Mealy machine is a type of finite-state machine where the output is a function of both the present state and the current input.\n\nThe machine has a single binary input, `X`, and a single binary output, `Z`. The machine's function is to detect a specific sequence of inputs. The output `Z` must be '1' for exactly one clock cycle, occurring at the same time as the final input of the target sequence. The target sequence is three consecutive '1's (`111`).\n\nA crucial design constraint is that a detected sequence cannot overlap with the beginning of a new one. For example, if the input stream is `111111`, the machine should detect the first `111` sequence and output a `1`, and then detect the second `111` sequence and output another `1`. The output sequence for this input would be `001001`. After a `111` sequence is detected and the output `Z` is asserted to `1`, the machine must fully reset its count and begin searching for a new, entirely separate sequence of three `1`s.\n\nThe states of the minimal Mealy machine required for this task can be defined based on the history of consecutive '1's received:\n- `S_0`: The initial or 'reset' state. No consecutive '1's have been seen, or the sequence was just broken by an input of '0'.\n- `S_1`: The state indicating that the last input was the first '1' in a potential sequence (i.e., the input history ends in `...01`).\n- `S_2`: The state indicating that the last two inputs were consecutive '1's (i.e., the input history ends in `...011`).\n\nGiven that the machine is currently in state `S_2`, determine the next state and the corresponding output `Z` if the next input `X` is '1'.\n\nA) Next State: `S_0`, Output: `0`\n\nB) Next State: `S_1`, Output: `1`\n\nC) Next State: `S_2`, Output: `1`\n\nD) Next State: `S_0`, Output: `1`\n\nE) Next State: `S_2`, Output: `0`", "solution": "A Mealy machine is defined by a next-state function $\\delta(\\text{state},X)$ and an output function $\\lambda(\\text{state},X)$, both depending on the present state and current input $X \\in \\{0,1\\}$.\n\nBy definition of the states:\n- $S_{2}$ means the last two inputs were consecutive ones. If the next input is $X=1$, then the last three inputs are $111$.\n- The specification requires that upon detecting $111$, the output $Z$ must be $1$ exactly on the clock cycle of the third $1$. In a Mealy machine, this means $\\lambda(S_{2},1)=1$.\n- The non-overlap constraint requires a full reset after detection, so the next state must be $S_{0}$, i.e., $\\delta(S_{2},1)=S_{0}$.\n\nTherefore, for input $X=1$ when in state $S_{2}$, the transition is to $S_{0}$ with output $Z=1$, which matches option D.\n\nThis also reproduces the example trace for input $111111$: starting at $S_{0}$, the third $1$ causes $(S_{2},1)\\to(S_{0},Z=1)$, then the next three $1$s repeat the same, yielding output $001001$ as specified.", "answer": "$$\\boxed{D}$$", "id": "1968914"}, {"introduction": "This final practice presents a more advanced analytical challenge, essentially asking you to work backward. Given a specific output sequence from a known Mealy machine, your task is to deduce the input sequence(s) that could have produced it [@problem_id:1968882]. This exercise hones your logical deduction and systematic troubleshooting skills, revealing that while a machine's behavior is deterministic, the path taken is not always uniquely identifiable from the output alone.", "problem": "A sequential logic circuit, which controls a simple sorting mechanism, is modeled as a Mealy finite state machine. The machine has four possible states, labeled S0, S1, S2, and S3. It accepts a single binary input (0 or 1) and produces a single binary-style output (X or Y) for each transition. The behavior of the machine is fully described by the following state transition and output table, where \"Current State\" and \"Input\" determine the \"Next State\" and the corresponding \"Output\".\n\n| Current State | Input | Next State | Output |\n|:--------------|:------|:-----------|:-------|\n| S0            | 0     | S1         | Y      |\n| S0            | 1     | S2         | X      |\n| S1            | 0     | S2         | X      |\n| S1            | 1     | S3         | Y      |\n| S2            | 0     | S0         | X      |\n| S2            | 1     | S3         | X      |\n| S3            | 0     | S1         | Y      |\n| S3            | 1     | S0         | Y      |\n\nThe machine is known to start in state S0. After receiving a sequence of 4 input bits, the observed output sequence was `YXXY`. Determine the set of all possible 4-bit input sequences that could have generated this specific output sequence.\n\nA. {0000}\n\nB. {0010, 0011}\n\nC. {0000, 0010, 0011}\n\nD. {0001, 0010, 0011}\n\nE. {0000, 0001, 0010}\n\nF. There are no possible input sequences.", "solution": "We model the machine as a deterministic Mealy finite state machine. Let the inputs be $b_{1}, b_{2}, b_{3}, b_{4}$ and the observed outputs be Y, X, X, Y in that order. The machine starts in state S0.\n\nFrom the table for S0: input 0 yields output Y and goes to S1; input 1 yields output X and goes to S2. To produce the first output Y, we must have $b_{1}=0$, and the next state is S1.\n\nFrom the table for S1: input 0 yields output X and goes to S2; input 1 yields output Y and goes to S3. To produce the second output X, we must have $b_{2}=0$, and the next state is S2.\n\nFrom the table for S2: input 0 yields output X and goes to S0; input 1 yields output X and goes to S3. To produce the third output X, both inputs are valid. Thus:\n- If $b_{3}=0$, the next state is S0.\n- If $b_{3}=1$, the next state is S3.\n\nFor the fourth output Y:\n- In the S0 branch (from $b_{3}=0$), from S0 only input 0 yields output Y. Hence $b_{4}=0$.\n- In the S3 branch (from $b_{3}=1$), from S3 both inputs 0 and 1 yield output Y. Hence $b_{4}\\in\\{0,1\\}$.\n\nCollecting all valid input sequences, with $b_{1}=0$ and $b_{2}=0$ fixed:\n- For $b_{3}=0$: $b_{4}=0$ gives 0000.\n- For $b_{3}=1$: $b_{4}=0$ or $1$ gives 0010 and 0011.\n\nTherefore, the set of all possible input sequences is {0000, 0010, 0011}, which corresponds to option C.", "answer": "$$\\boxed{C}$$", "id": "1968882"}]}