{"hands_on_practices": [{"introduction": "Understanding how to detect specific patterns in a stream of data is a fundamental application of finite state machines (FSMs). This first practice problem challenges you to model a Mealy machine, where the output depends on both the current state and the input, to recognize an overlapping sequence of bits. By working through this classic '111' detector, you will develop a concrete understanding of how to define states and transitions to correctly track progress and handle continuous data streams without missing valid patterns. [@problem_id:1962078]", "problem": "A digital system includes a \"burst signal trigger\" designed to monitor a single-bit serial data stream. The trigger has one input, $x$, and one output, $z$. The system operates synchronously with a clock. The trigger's function is to set its output $z$ to a high logic level ('1') if and only if the current input bit is '1' and the two immediately preceding input bits were also '1's. This functionality must account for overlapping sequences; for instance, an input stream of '...011110...' should produce an output stream of '...000110...'. At all other times, the output $z$ must be at a low logic level ('0').\n\nThis behavior can be described by a finite state machine. Assuming the system is designed as a Mealy machine with the minimum number of states, which of the following state transition tables correctly represents its behavior? The states are defined as:\n- $S_0$: The initial or reset state. The required sequence of '1's has been broken.\n- $S_1$: The most recent input bit was a '1'.\n- $S_2$: The two most recent input bits were '11'.\n\nThe tables are presented in the format (Present State, Input $x$, Next State, Output $z$).\n\nA)\n(S0, 0, S0, 0)\n(S0, 1, S1, 0)\n(S1, 0, S0, 0)\n(S1, 1, S2, 0)\n(S2, 0, S0, 0)\n(S2, 1, S2, 1)\n\nB)\n(S0, 0, S0, 0)\n(S0, 1, S1, 0)\n(S1, 0, S0, 0)\n(S1, 1, S2, 0)\n(S2, 0, S0, 0)\n(S2, 1, S0, 1)\n\nC)\n(S0, 0, S0, 0)\n(S0, 1, S1, 0)\n(S1, 0, S1, 0)\n(S1, 1, S2, 0)\n(S2, 0, S0, 0)\n(S2, 1, S2, 1)\n\nD)\n(S0, 0, S0, 0)\n(S0, 1, S1, 0)\n(S1, 0, S0, 0)\n(S1, 1, S2, 0)\n(S2, 0, S0, 0)\n(S2, 1, S1, 1)\n\nE)\n(S0, 0, S0, 0)\n(S0, 1, S1, 1)\n(S1, 0, S0, 0)\n(S1, 1, S2, 1)\n(S2, 0, S0, 0)\n(S2, 1, S2, 1)", "solution": "The problem requires us to design a Mealy-type finite state machine that detects the sequence '111' in a serial bitstream, including overlapping occurrences. A Mealy machine's output is a function of its current state and the current input. We need to determine the state transitions and the corresponding outputs.\n\nThe states are defined based on the progress towards detecting the '111' sequence:\n- $S_0$: The reset state. No prefix of the target sequence has been detected. This is the state after receiving a '0' or at startup.\n- $S_1$: The last input was a '1'. This represents having seen the prefix '1'.\n- $S_2$: The last two inputs were '11'. This represents having seen the prefix '11'.\n\nLet's analyze the transitions for each state based on the input $x \\in \\{0, 1\\}$.\n\n**Analysis of State $S_0$ (Reset State):**\n- If the current input is $x=0$: The machine has not seen a '1' that could start the sequence. The system remains in the reset state $S_0$. The output $z$ must be 0.\n  - Transition: (Present State: $S_0$, Input: 0) $\\rightarrow$ (Next State: $S_0$, Output: 0).\n- If the current input is $x=1$: This is the first '1' of a potential sequence. The machine transitions to state $S_1$ to remember that it has seen one '1'. The full sequence is not yet detected, so the output $z$ is 0.\n  - Transition: (Present State: $S_0$, Input: 1) $\\rightarrow$ (Next State: $S_1$, Output: 0).\n\n**Analysis of State $S_1$ (Seen a single '1'):**\n- If the current input is $x=0$: The sequence is broken because a '0' has been received. The machine must return to the reset state $S_0$. The output $z$ is 0.\n  - Transition: (Present State: $S_1$, Input: 0) $\\rightarrow$ (Next State: $S_0$, Output: 0).\n- If the current input is $x=1$: The machine was in state $S_1$ (meaning the previous input was '1') and now receives another '1'. The sequence now ends in '11'. The machine transitions to state $S_2$. The full '111' sequence is not yet complete, so the output $z$ is 0.\n  - Transition: (Present State: $S_1$, Input: 1) $\\rightarrow$ (Next State: $S_2$, Output: 0).\n\n**Analysis of State $S_2$ (Seen '11'):**\n- If the current input is $x=0$: The sequence is broken. The machine must return to the reset state $S_0$. The output $z$ is 0.\n  - Transition: (Present State: $S_2$, Input: 0) $\\rightarrow$ (Next State: $S_0$, Output: 0).\n- If the current input is $x=1$: The machine was in state $S_2$ (previous two inputs were '11') and now receives a '1'. This completes the '111' sequence. Therefore, the output $z$ must be 1. The problem specifies that the detector must handle overlapping sequences. Consider the input '1111'. The first '111' should produce an output of 1. At this point, the last two inputs received are '11'. This is precisely the condition for being in state $S_2$. Therefore, to detect the next '111' sequence (which consists of the last two '1's of the first sequence and the new '1'), the machine must transition back to state $S_2$.\n  - Transition: (Present State: $S_2$, Input: 1) $\\rightarrow$ (Next State: $S_2$, Output: 1).\n\n**Compiling the State Table:**\nBy combining all the transitions derived above, we can construct the complete state transition table:\n\n| Present State | Input $x$ | Next State | Output $z$ |\n|---------------|-----------|------------|------------|\n| $S_0$         | 0         | $S_0$      | 0          |\n| $S_0$         | 1         | $S_1$      | 0          |\n| $S_1$         | 0         | $S_0$      | 0          |\n| $S_1$         | 1         | $S_2$      | 0          |\n| $S_2$         | 0         | $S_0$      | 0          |\n| $S_2$         | 1         | $S_2$      | 1          |\n\nThis table exactly matches the one provided in option A. Let's analyze the other options to confirm they are incorrect.\n- Option B is a non-overlapping detector because on (S2, 1), it transitions to S0, resetting the sequence.\n- Option C is incorrect because the transition (S1, 0, S1, 0) is wrong; receiving a '0' must break the sequence and reset to S0.\n- Option D incorrectly transitions from S2 to S1 on input '1'. This would fail to detect overlapping sequences like '1111' correctly. It would detect '111' and then transition to a state 'saw one 1', failing to recognize that the last two inputs were '11'.\n- Option E incorrectly sets the output to 1 for transitions (S0, 1) and (S1, 1), which is not what the problem specifies. The output should only be 1 when the full '111' sequence is complete.\n\nTherefore, option A is the only correct representation of the specified burst signal trigger.", "answer": "$$\\boxed{A}$$", "id": "1962078"}, {"introduction": "Building on the concept of sequence detection, we now explore the Moore machine, a different but equally important type of FSM. In this exercise, you will design a Moore machine where the output is determined solely by the machine's state, a key distinction from the Mealy model. Tasked with creating a system to flag an error after five or more consecutive '1's, you will gain insight into how the choice of FSM type impacts output timing and state definition in synchronous digital systems. [@problem_id:1962047]", "problem": "A digital system for monitoring data integrity includes a bitstream anomaly checker. This checker is implemented as a synchronous Finite State Machine (FSM). The FSM processes a serial binary input stream, denoted by `X`, one bit per clock cycle. It produces a single binary output, `E`, which serves as an error flag.\n\nThe system is designed as a Moore machine, where the output is determined solely by the machine's current state. The error flag `E` must be asserted (set to `1`) if and only if the machine is in a state corresponding to having just received a sequence of five or more consecutive `1`s on the input `X`. In all other states, `E` must be `0`.\n\nThe FSM begins operation in a designated initial state, `S_reset`, which represents the condition where no consecutive `1`s have been detected yet (e.g., after power-on or after receiving a `0`).\n\nConsider the system at discrete time steps `t=1, 2, 3, ...`. The state of the machine at time `t` is denoted `S(t)`, and the input bit received at that time is `X(t)`. The machine's output at time `t`, denoted `E(t)`, is a function of the current state `S(t)`. The state for the next cycle, `S(t+1)`, is determined by the current state `S(t)` and the current input `X(t)`. The initial state is `S(1) = S_reset`.\n\nGiven the 14-bit input sequence `X` for `t=1` to `t=14` as `11110111110111`, determine the corresponding 14-bit output sequence `E`. Express your answer as a single binary string of length 14, representing the sequence `E(1)E(2)...E(14)`.", "solution": "Model the Moore FSM with states that encode the current run length of consecutive ones: define $c(t)\\in\\{0,1,2,3,4,5^{+}\\}$ to be the count represented by the current state $S(t)$, where $c(t)=0$ denotes $S_{\\text{reset}}$ and $c(t)=5^{+}$ denotes five or more. The Moore output is\n$$E(t)=\\begin{cases}\n1,& c(t)=5^{+},\\\\\n0,& \\text{otherwise}.\n\\end{cases}$$\nThe next-state update rule, consistent with the specification that $S(t+1)$ depends on $S(t)$ and $X(t)$, is:\n- If $X(t)=0$, then $c(t+1)=0$.\n- If $X(t)=1$ and $c(t)\\in\\{0,1,2,3\\}$, then $c(t+1)=c(t)+1$.\n- If $X(t)=1$ and $c(t)=4$, then $c(t+1)=5^{+}$.\n- If $X(t)=1$ and $c(t)=5^{+}$, then $c(t+1)=5^{+}$.\n\nInitial condition: $S(1)=S_{\\text{reset}}$, so $c(1)=0$.\n\nProcess the given input $X(1\\ldots 14)=11110111110111$ step by step, using $E(t)$ from $c(t)$ and then updating $c(t+1)$ from $c(t)$ and $X(t)$:\n\n- $t=1$: $c(1)=0$, so $E(1)=0$. $X(1)=1\\Rightarrow c(2)=1$.\n- $t=2$: $c(2)=1$, so $E(2)=0$. $X(2)=1\\Rightarrow c(3)=2$.\n- $t=3$: $c(3)=2$, so $E(3)=0$. $X(3)=1\\Rightarrow c(4)=3$.\n- $t=4$: $c(4)=3$, so $E(4)=0$. $X(4)=1\\Rightarrow c(5)=4$.\n- $t=5$: $c(5)=4$, so $E(5)=0$. $X(5)=0\\Rightarrow c(6)=0$.\n- $t=6$: $c(6)=0$, so $E(6)=0$. $X(6)=1\\Rightarrow c(7)=1$.\n- $t=7$: $c(7)=1$, so $E(7)=0$. $X(7)=1\\Rightarrow c(8)=2$.\n- $t=8$: $c(8)=2$, so $E(8)=0$. $X(8)=1\\Rightarrow c(9)=3$.\n- $t=9$: $c(9)=3$, so $E(9)=0$. $X(9)=1\\Rightarrow c(10)=4$.\n- $t=10$: $c(10)=4$, so $E(10)=0$. $X(10)=1\\Rightarrow c(11)=5^{+}$.\n- $t=11$: $c(11)=5^{+}$, so $E(11)=1$. $X(11)=0\\Rightarrow c(12)=0$.\n- $t=12$: $c(12)=0$, so $E(12)=0$. $X(12)=1\\Rightarrow c(13)=1$.\n- $t=13$: $c(13)=1$, so $E(13)=0$. $X(13)=1\\Rightarrow c(14)=2$.\n- $t=14$: $c(14)=2$, so $E(14)=0$. $X(14)=1\\Rightarrow c(15)=3$.\n\nTherefore, the output sequence $E(1\\ldots 14)$ is $00000000001000$.", "answer": "$$\\boxed{00000000001000}$$", "id": "1962047"}, {"introduction": "Finite state machines are not only for detecting patterns but are also essential for generating them. This practice problem shifts our focus to the design of a Moore machine that functions as an autonomous sequence generator, a common building block in digital controllers and processors. This exercise will reveal the fundamental relationship between the minimal number of states required for the machine and the period of the sequence it must produce, providing a core principle for efficient state machine synthesis. [@problem_id:1962064]", "problem": "A synchronous finite-state machine is designed to function as a sequence generator for a special-purpose processor's control path. The machine has no external data inputs and cycles through a sequence of states driven by a clock. The machine has two output lines, which, when interpreted as a 2-bit unsigned integer, must continuously produce the repeating sequence: 0, 1, 1, 3, 2, 2, 0, 1, 1, ... The machine is designed such that its output is a function of only its current state. What is the minimum number of states required to implement this state machine?", "solution": "Let $y[t]$ denote the $2$-bit output at clock time $t \\in \\mathbb{Z}_{\\geq 0}$. The required infinite sequence is\n$$\ny[0],y[1],y[2],y[3],y[4],y[5],y[6],\\dots=(0,1,1,3,2,2,0,1,1,\\dots).\n$$\nFirst, determine the minimal period $L$ of this sequence. By inspection, the sequence repeats the block $(0,1,1,3,2,2)$, so it is periodic with $L=6$. We must verify that no smaller period exists. A period $L$ satisfies $y[t+L]=y[t]$ for all $t \\geq 0$. Check all $L$ with $1 \\leq L < 6$:\n- For $L=1$, $y[0]=y[1]$ would be required, but $0 \\neq 1$.\n- For $L=2$, $y[0]=y[2]$ would be required, but $0 \\neq 1$.\n- For $L=3$, $y[0]=y[3]$ would be required, but $0 \\neq 3$.\n- For $L=4$, $y[0]=y[4]$ would be required, but $0 \\neq 2$.\n- For $L=5$, $y[0]=y[5]$ would be required, but $0 \\neq 2$.\nThus the minimal period is\n$$\nL=6.\n$$\n\nBecause the machine is a Moore machine with no external inputs, each state determines a unique right-infinite future output sequence. If two distinct time indices $i \\neq j$ corresponded to the same state, then their future outputs would have to be identical:\n$$\n\\forall k \\geq 0:\\quad y[i+k]=y[j+k].\n$$\nThis implies that the infinite sequence is invariant under a shift by $|i-j|$, i.e., it would have a period that divides $|i-j|$. Since the minimal period is $L=6$, no two distinct offsets modulo $6$ can yield identical right-infinite tails. Therefore, the number of states must satisfy\n$$\nN_{\\min} \\geq L = 6.\n$$\n\nConversely, $6$ states suffice: construct a $6$-state ring $S_{0} \\to S_{1} \\to \\dots \\to S_{5} \\to S_{0}$, and assign outputs\n$$\nS_{0}\\!:\\,0,\\quad S_{1}\\!:\\,1,\\quad S_{2}\\!:\\,1,\\quad S_{3}\\!:\\,3,\\quad S_{4}\\!:\\,2,\\quad S_{5}\\!:\\,2,\n$$\nwhich produces exactly the periodic sequence $(0,1,1,3,2,2)$.\n\nHence the minimum number of states required is $6$.", "answer": "$$\\boxed{6}$$", "id": "1962064"}]}