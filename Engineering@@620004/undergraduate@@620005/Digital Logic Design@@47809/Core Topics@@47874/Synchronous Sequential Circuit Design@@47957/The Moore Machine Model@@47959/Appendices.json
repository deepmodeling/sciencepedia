{"hands_on_practices": [{"introduction": "The most fundamental application of a finite state machine is recognizing patterns in sequential data. This exercise challenges you to design a Moore machine that acts as a sequence detector. Mastering this skill is crucial because it forms the basis for designing complex digital systems, from communication protocol parsers to instruction decoders in a CPU. By working through this problem, you will practice translating a design specification into a formal state table, solidifying your understanding of how a Moore machine's state represents its \"memory\" of past inputs [@problem_id:1969113].", "problem": "You are tasked with designing a digital circuit that monitors a serial stream of input bits, `x`. The circuit must produce an output `z` that goes to '1' for exactly one clock cycle immediately following the detection of the specific three-bit sequence '101'. A critical constraint is that the detected sequences must be non-overlapping. This means that once a full '101' sequence is identified, the bits that formed this sequence cannot be reused as part of another potential sequence. The detection process must reset and start anew.\n\nYou are to model this behavior using a Moore Finite State Machine (FSM). The machine uses four states to track the progress of the sequence detection:\n- `S0`: The initial or reset state, where no prefix of the target sequence has been detected.\n- `S1`: The state indicating the most recently received bit was a '1' that could be the start of the sequence.\n- `S2`: The state indicating the last two bits received were '10'.\n- `S3`: The state indicating the last three bits received were '101', which is the detection state.\n\nGiven these state definitions, select the state table from the options below that correctly implements the specified Moore machine. The \"Current State\" column indicates the state before the arrival of the next input bit, \"Next State\" indicates the state after the input bit is processed, and \"Output (z)\" is the output associated with the current state.\n\nA.\n| Current State | Next State (Input=0) | Next State (Input=1) | Output (z) |\n| :---: | :---: | :---: | :---: |\n| S0    | S0    | S1    | 0     |\n| S1    | S2    | S1    | 0     |\n| S2    | S0    | S3    | 0     |\n| S3    | S0    | S1    | 1     |\n\nB.\n| Current State | Next State (Input=0) | Next State (Input=1) | Output (z) |\n| :---: | :---: | :---: | :---: |\n| S0    | S0    | S1    | 0     |\n| S1    | S2    | S1    | 0     |\n| S2    | S0    | S3    | 0     |\n| S3    | S2    | S1    | 1     |\n\nC.\n| Current State | Next State (Input=0) | Next State (Input=1) | Output (z) |\n| :---: | :---: | :---: | :---: |\n| S0    | S0    | S1    | 0     |\n| S1    | S2    | S1    | 0     |\n| S2    | S0    | S3    | 1     |\n| S3    | S0    | S1    | 0     |\n\nD.\n| Current State | Next State (Input=0) | Next State (Input=1) | Output (z) |\n| :---: | :---: | :---: | :---: |\n| S0    | S1    | S0    | 0     |\n| S1    | S2    | S1    | 0     |\n| S2    | S0    | S3    | 0     |\n| S3    | S0    | S1    | 1     |", "solution": "We design a Moore FSM for detecting the non-overlapping sequence '101' with output $z=1$ for exactly one clock cycle immediately after detection. In a Moore machine, $z$ depends only on the current state, so the detection state must be the only state with $z=1$.\n\nBy the given state meanings:\n- $S0$: no useful prefix; the next state must depend only on the current input bit.\n- $S1$: the last bit was $1$; on input $0$ we advance to the prefix $10$, and on input $1$ we remain with the longest proper suffix matching the patternâ€™s prefix, which is still $1$.\n- $S2$: the last two bits were $10$; on input $1$ we complete $101$ and enter the detection state, and on input $0$ there is no matching suffix so we reset to $S0$.\n- $S3$: the last three bits were $101$; because the detection must be non-overlapping, after asserting $z=1$ for exactly one cycle we must restart the search without reusing any bits from the detected sequence. Therefore, from $S3$ the transition logic must be identical to starting fresh at $S0$: on input $0$ go to $S0$, and on input $1$ go to $S1$.\n\nNow determine the correct transitions and outputs:\n\n1) From $S0$:\n- Input $0$: still no prefix, so $S0 \\to S0$.\n- Input $1$: start of a potential match, so $S0 \\to S1$.\n\n2) From $S1$:\n- Input $0$: we have $10$, so $S1 \\to S2$.\n- Input $1$: we still have a trailing $1$ as the longest prefix, so $S1 \\to S1$.\n\n3) From $S2$:\n- Input $0$: the sequence becomes $100$ whose longest suffix matching the prefix of $101$ is empty, so $S2 \\to S0$.\n- Input $1$: we complete $101$, so $S2 \\to S3$.\n\n4) From $S3$ (non-overlapping restart):\n- Input $0$: restart with $0$, so $S3 \\to S0$.\n- Input $1$: restart with $1$, so $S3 \\to S1$.\n\nOutput assignment for a Moore machine:\n- $z=1$ only in $S3$ (the detection state), and $z=0$ in $S0$, $S1$, and $S2$.\n\nComparing with the options:\n- Option A matches all transitions above and has $z=1$ only in $S3$.\n- Option B uses $S3 \\to S2$ on input $0$, which reuses suffix information from the detected sequence (overlapping), violating the non-overlapping requirement.\n- Option C assigns $z=1$ in $S2$ and $z=0$ in $S3$, which contradicts the Moore detection definition.\n- Option D has incorrect transitions from $S0$ (it swaps the responses to inputs $0$ and $1$), which is invalid.\n\nTherefore, the correct state table is Option A.", "answer": "$$\\boxed{A}$$", "id": "1969113"}, {"introduction": "Moving beyond abstract data, this practice applies the Moore model to a tangible engineering problem: controlling a physical device. You will design the logic for an automated security gate, where states correspond to physical conditions like 'Open' or 'Closing'. This problem demonstrates how Moore machines serve as powerful controllers in real-world systems. It also introduces the concept of unconditional transitions, where a machine moves to the next state regardless of the input, a common technique for modeling fixed-duration processes [@problem_id:1969131].", "problem": "You are tasked with designing the controller for a motorized security gate using a Moore-type Finite State Machine (FSM). The gate's operation can be described by four distinct states: 'Closed', 'Opening', 'Open', and 'Closing'.\n\nThe system receives a single command input, denoted by the variable `C`. The input `C=1` corresponds to an 'open' command, and `C=0` corresponds to a 'close' command.\n\nThe behavior of the gate is defined as follows:\n-   When 'Closed', an 'open' command (`C=1`) initiates the opening sequence, moving the state to 'Opening'. If a 'close' command (`C=0`) is received, it remains 'Closed'.\n-   The 'Opening' state represents the fixed duration of the gate moving to the fully open position. Once in this state, the gate will always transition to the 'Open' state in the next clock cycle, regardless of any new commands received during this time.\n-   When 'Open', a 'close' command (`C=0`) initiates the closing sequence, moving the state to 'Closing'. If an 'open' command (`C=1`) is received, it remains 'Open'.\n-   The 'Closing' state represents the fixed duration of the gate moving to the fully closed position. Once in this state, the gate will always transition to the 'Closed' state in the next clock cycle, regardless of any new commands received.\n\nThe four states are encoded using two state variables, $Q_1$ and $Q_0$. The next state is represented by $Q_1'$ and $Q_0'$. The state assignments are:\n-   'Closed': $Q_1Q_0 = 00$\n-   'Opening': $Q_1Q_0 = 01$\n-   'Open': $Q_1Q_0 = 10$\n-   'Closing': $Q_1Q_0 = 11$\n\nYour task is to determine the correct state transition table for this Moore FSM. Which of the following tables, representing the present state ($Q_1Q_0$), input ($C$), and next state ($Q_1'Q_0'$), correctly describes the machine's behavior?\n\nA.\n| $Q_1 Q_0$ | $C$ | $Q_1' Q_0'$ |\n|---|---|---|\n| 00 | 0 | 00 |\n| 00 | 1 | 01 |\n| 01 | 0 | 10 |\n| 01 | 1 | 10 |\n| 10 | 0 | 11 |\n| 10 | 1 | 10 |\n| 11 | 0 | 00 |\n| 11 | 1 | 00 |\n\nB.\n| $Q_1 Q_0$ | $C$ | $Q_1' Q_0'$ |\n|---|---|---|\n| 00 | 0 | 00 |\n| 00 | 1 | 01 |\n| 01 | 0 | 00 |\n| 01 | 1 | 10 |\n| 10 | 0 | 11 |\n| 10 | 1 | 10 |\n| 11 | 0 | 00 |\n| 11 | 1 | 10 |\n\nC.\n| $Q_1 Q_0$ | $C$ | $Q_1' Q_0'$ |\n|---|---|---|\n| 00 | 0 | 00 |\n| 00 | 1 | 10 |\n| 01 | 0 | 10 |\n| 01 | 1 | 10 |\n| 10 | 0 | 01 |\n| 10 | 1 | 10 |\n| 11 | 0 | 00 |\n| 11 | 1 | 00 |\n\nD.\n| $Q_1 Q_0$ | $C$ | $Q_1' Q_0'$ |\n|---|---|---|\n| 00 | 0 | 00 |\n| 00 | 1 | 01 |\n| 01 | 0 | 01 |\n| 01 | 1 | 01 |\n| 10 | 0 | 11 |\n| 10 | 1 | 10 |\n| 11 | 0 | 11 |\n| 11 | 1 | 11 |", "solution": "We use the given state encoding: Closed is $Q_1Q_0=00$, Opening is $Q_1Q_0=01$, Open is $Q_1Q_0=10$, and Closing is $Q_1Q_0=11$. The input is $C \\in \\{0,1\\}$.\n\nFrom the specification:\n- When Closed, an open command $C=1$ moves to Opening; a close command $C=0$ stays Closed. Therefore:\n  - If $Q_1Q_0=00$ and $C=0$, then $Q_1'Q_0'=00$.\n  - If $Q_1Q_0=00$ and $C=1$, then $Q_1'Q_0'=01$.\n- When Opening, the next state is always Open regardless of $C$. Therefore:\n  - If $Q_1Q_0=01$ and $C=0$, then $Q_1'Q_0'=10$.\n  - If $Q_1Q_0=01$ and $C=1$, then $Q_1'Q_0'=10$.\n- When Open, a close command $C=0$ moves to Closing; an open command $C=1$ stays Open. Therefore:\n  - If $Q_1Q_0=10$ and $C=0$, then $Q_1'Q_0'=11$.\n  - If $Q_1Q_0=10$ and $C=1$, then $Q_1'Q_0'=10$.\n- When Closing, the next state is always Closed regardless of $C$. Therefore:\n  - If $Q_1Q_0=11$ and $C=0$, then $Q_1'Q_0'=00$.\n  - If $Q_1Q_0=11$ and $C=1$, then $Q_1'Q_0'=00$.\n\nComparing these eight transition cases with the provided options, only option A matches all entries exactly.", "answer": "$$\\boxed{A}$$", "id": "1969131"}, {"introduction": "To truly understand the Moore model, it is essential to contrast it with its counterpart, the Mealy machine. This exercise focuses on the formal process of converting a Moore machine into a behaviorally equivalent Mealy machine. The core principle lies in re-mapping the outputs from the states (Moore) to the transitions (Mealy). By calculating the equivalent Mealy outputs, you will gain a deeper insight into the fundamental architectural difference between the two machine types and appreciate how the timing of the output generation distinguishes them [@problem_id:1969141].", "problem": "A specific Moore finite state machine is defined by the following components:\n- A set of four states: $Q = \\{S_A, S_B, S_C, S_D\\}$.\n- An input alphabet: $\\Sigma = \\{0, 1\\}$.\n- An output alphabet consisting of two-bit binary strings: $\\Delta = \\{\\text{'00'}, \\text{'01'}, \\text{'10'}, \\text{'11'}\\}$.\n- An output function, $\\lambda$, which maps each state to an output:\n  - $\\lambda(S_A) = \\text{'00'}$\n  - $\\lambda(S_B) = \\text{'01'}$\n  - $\\lambda(S_C) = \\text{'10'}$\n  - $\\lambda(S_D) = \\text{'11'}$\n- A state transition function, $\\delta$, which maps a (State, Input) pair to a next state:\n  - For any state $S \\in Q$, the transition on input '0' is to the same state $S$. So, $\\delta(S, 0) = S$.\n  - On input '1', the states transition in a cycle: $\\delta(S_A, 1) = S_B$, $\\delta(S_B, 1) = S_C$, $\\delta(S_C, 1) = S_D$, and $\\delta(S_D, 1) = S_A$.\n\nWhich of the following options correctly describes the output function of a Mealy machine that is behaviorally equivalent to the Moore machine described above? A Mealy machine's output is determined by both the current state and the current input. The equivalent Mealy machine has the same set of states and the same state transition function $\\delta$.\n\nA.\n- The output for any transition on input '0' is determined by the current state: '00' for $S_A$, '01' for $S_B$, '10' for $S_C$, and '11' for $S_D$.\n- The output for any transition on input '1' is also determined by the current state: '00' for $S_A$, '01' for $S_B$, '10' for $S_C$, and '11' for $S_D$.\n\nB.\n- The output for any transition on input '0' is determined by the current state: '00' for $S_A$, '01' for $S_B$, '10' for $S_C$, and '11' for $S_D$.\n- The output for any transition on input '1' is as follows: '01' for state $S_A$, '10' for state $S_B$, '11' for state $S_C$, and '00' for state $S_D$.\n\nC.\n- The output for any transition on input '0' is as follows: '01' for state $S_A$, '10' for state $S_B$, '11' for state $S_C$, and '00' for state $S_D$.\n- The output for any transition on input '1' is as follows: '00' for state $S_A$, '01' for state $S_B$, '10' for state $S_C$, and '11' for state $S_D$.\n\nD.\n- The output for any transition on input '0' is '00' regardless of the state.\n- The output for any transition on input '1' is '11' regardless of the state.\n\nE.\n- The output for any transition on input '0' is determined by the current state: '00' for $S_A$, '01' for $S_B$, '10' for $S_C$, and '11' for $S_D$.\n- The output for any transition on input '1' is as follows: '01' for state $S_A$, '10' for state $S_B$, '11' for state $S_C$, and '11' for state $S_D$.", "solution": "A Mealy machine that is behaviorally equivalent to a given Moore machine (with the same state set and the same transition function) must produce, on each input symbol, the output that the Moore machine would present in the state reached after that input. Therefore, the Mealy output function must be defined by\n$$\n\\lambda_{\\text{Mealy}}(S, a) = \\lambda\\big(\\delta(S, a)\\big).\n$$\nGiven the Moore machine:\n- $\\lambda(S_A) = \\text{'00'}$, $\\lambda(S_B) = \\text{'01'}$, $\\lambda(S_C) = \\text{'10'}$, $\\lambda(S_D) = \\text{'11'}$,\n- $\\delta(S, 0) = S$ for all $S \\in Q$,\n- $\\delta(S_A, 1) = S_B$, $\\delta(S_B, 1) = S_C$, $\\delta(S_C, 1) = S_D$, $\\delta(S_D, 1) = S_A$,\n\ncompute the Mealy outputs.\n\nFor input $0$:\n$$\n\\lambda_{\\text{Mealy}}(S, 0) = \\lambda(\\delta(S, 0)) = \\lambda(S),\n$$\nso the outputs are: '00' for $S_A$, '01' for $S_B$, '10' for $S_C$, '11' for $S_D$.\n\nFor input $1$:\n$$\n\\lambda_{\\text{Mealy}}(S_A, 1) = \\lambda(\\delta(S_A, 1)) = \\lambda(S_B) = \\text{'01'},\n$$\n$$\n\\lambda_{\\text{Mealy}}(S_B, 1) = \\lambda(\\delta(S_B, 1)) = \\lambda(S_C) = \\text{'10'},\n$$\n$$\n\\lambda_{\\text{Mealy}}(S_C, 1) = \\lambda(\\delta(S_C, 1)) = \\lambda(S_D) = \\text{'11'},\n$$\n$$\n\\lambda_{\\text{Mealy}}(S_D, 1) = \\lambda(\\delta(S_D, 1)) = \\lambda(S_A) = \\text{'00'}.\n$$\nComparing with the options:\n- Option A uses the current state's Moore output for both inputs, which is incorrect for input '1'.\n- Option B matches exactly the mappings derived above.\n- Option C is incorrect for input '0'.\n- Option D is incorrect for input '0' and '1' except coincidentally in special cases.\n- Option E is incorrect for state $S_D$ on input '1'.\n\nHence, the correct choice is B.", "answer": "$$\\boxed{B}$$", "id": "1969141"}]}