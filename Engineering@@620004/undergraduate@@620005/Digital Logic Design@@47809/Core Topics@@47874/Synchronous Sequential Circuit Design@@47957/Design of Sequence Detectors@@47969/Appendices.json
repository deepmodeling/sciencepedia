{"hands_on_practices": [{"introduction": "This first practice problem serves as a foundational exercise in designing a Mealy-type finite state machine. You will design a detector for a simple communication protocol's framing sequence, which includes a \"wildcard\" bit [@problem_id:1928694]. This task reinforces the core process of defining states based on prefixes of a target sequence and is an excellent opportunity to practice creating a minimal machine by identifying and merging equivalent states.", "problem": "A simplified serial communication protocol is designed to detect specific three-bit framing sequences from a single-bit input stream, `X`. The protocol identifies a valid frame when it detects a 'start bit' of `0`, followed by any single 'wildcard' bit (`0` or `1`), and an 'end bit' of `1`. This corresponds to detecting the binary sequences `001` or `011`.\n\nYou are tasked with designing a Mealy-type Finite State Machine (FSM) that takes the serial bit stream `X` as its input and produces a single-bit output `Z`. The output `Z` must be `1` if and only if the most recently received bit completes one of the valid framing sequences (`001` or `011`). Otherwise, the output `Z` must be `0`. The detection is non-overlapping; upon detecting a valid sequence, the machine should reset itself to a state where it can begin searching for the next new sequence. For example, in the input stream `0011011`, the output should be `0010001`.\n\nWhich of the following textual descriptions correctly represents the minimal Mealy FSM for this task? The format for each transition is: `On input <X>, transitions to <Next State> with output <Z>`.\n\nA.\nState S0 (Initial): On input 0, transitions to S1 with output 0. On input 1, transitions to S0 with output 0.\nState S1 (Got prefix '0'): On input 0, transitions to S2 with output 0. On input 1, transitions to S2 with output 0.\nState S2 (Got prefix '00' or '01'): On input 0, transitions to S1 with output 0. On input 1, transitions to S0 with output 1.\n\nB.\nState S0 (Initial): On input 0, transitions to S1 with output 0. On input 1, transitions to S0 with output 0.\nState S1 (Got prefix '0'): On input 0, transitions to S2 with output 0. On input 1, transitions to S2 with output 0.\nState S2 (Got prefix '00' or '01'): On input 0, transitions to S0 with output 0. On input 1, transitions to S0 with output 1.\n\nC.\nState S0 (Initial): On input 0, transitions to S1 with output 0. On input 1, transitions to S0 with output 0.\nState S1 (Got prefix '0'): On input 0, transitions to S2 with output 0. On input 1, transitions to S3 with output 0.\nState S2 (Got prefix '00'): On input 0, transitions to S1 with output 0. On input 1, transitions to S0 with output 1.\nState S3 (Got prefix '01'): On input 0, transitions to S1 with output 0. On input 1, transitions to S0 with output 1.\n\nD.\nState S0 (Initial): On input 0, transitions to S1 with output 0. On input 1, transitions to S0 with output 1.\nState S1 (Got prefix '0'): On input 0, transitions to S2 with output 1. On input 1, transitions to S2 with output 1.\nState S2 (Got prefix '00' or '01'): On input 0, transitions to S1 with output 0. On input 1, transitions to S0 with output 0.", "solution": "We must detect exactly the three-bit frames starting with a start bit $0$, followed by one wildcard bit, and ending with $1$, i.e., $001$ or $011$. The output $Z$ must be $1$ only when the most recent bit completes one of these frames; otherwise $Z=0$. The detection is non-overlapping in the protocol sense: once a start bit $0$ is seen, the machine commits to the next two bits to decide validity; if the third bit is $0$ (invalid frame), that third $0$ is immediately treated as the start bit of a new candidate frame.\n\nTo design a minimal Mealy FSM under this non-overlapping framing, proceed step by step:\n\n1) Define states by the protocol’s progress through a candidate frame:\n- $S_{0}$: idle, no start bit currently latched.\n- $S_{1}$: just saw the start bit $0$ (have prefix $0$).\n- $S_{2}$: just saw $0$ and then one wildcard bit (have prefix $00$ or $01$); the next input decides detection.\n\n2) Derive all transitions and outputs from the protocol rules:\n- From $S_{0}$:\n  - On input $0$: latch the start bit; go to $S_{1}$; no detection yet, so $Z=0$.\n  - On input $1$: still idle because no start bit; stay in $S_{0}$; $Z=0$.\n\n- From $S_{1}$ (have prefix $0$):\n  - On input $0$: we now have prefix $00$; advance to $S_{2}$; $Z=0$.\n  - On input $1$: we now have prefix $01$; advance to $S_{2}$; $Z=0$.\n\n- From $S_{2}$ (have prefix $00$ or $01$; next bit is the end bit test):\n  - On input $1$: the frame completes as either $001$ or $011$; output $Z=1$, and reset non-overlapping to idle $S_{0}$ to look for the next new frame.\n  - On input $0$: the frame fails (we just consumed the third bit as $0$). By the protocol’s non-overlapping framing, this very $0$ is the start bit of a new candidate frame, so go to $S_{1}$; $Z=0$.\n\nThese transitions are minimal because $S_{2}$ can legitimately represent either $00$ or $01$: under the non-overlapping framing rules, from both prefixes the third-bit transitions are identical (on $1$ detect and reset; on $0$ treat as a new start, i.e., go to $S_{1}$). Hence three states suffice.\n\n3) Verify against the given example input $0011011 \\to$ desired output $0010001$:\n$$S_{0}\\xrightarrow{0/0}S_{1}\\xrightarrow{0/0}S_{2}\\xrightarrow{1/1}S_{0}\\xrightarrow{1/0}S_{0}\\xrightarrow{0/0}S_{1}\\xrightarrow{1/0}S_{2}\\xrightarrow{1/1}S_{0}$$\nwhich yields outputs $0,0,1,0,0,0,1$, matching $0010001$.\n\n4) Match with the given options and rule out incorrect ones:\n- Option A exactly encodes the transitions derived above: $S_{0}$: $0\\to S_{1}/0$, $1\\to S_{0}/0$; $S_{1}$: $0\\to S_{2}/0$, $1\\to S_{2}/0$; $S_{2}$: $0\\to S_{1}/0$, $1\\to S_{0}/1$. This is minimal and correct under the protocol’s non-overlapping framing.\n- Option B incorrectly sends $S_{2}$ on input $0$ to $S_{0}$, discarding a valid immediate restart on that $0$. It fails on streams like $01011$: positions $3$–$5$ form a valid frame $011$, but B would not detect it because it idles at the third bit instead of treating it as a new start.\n- Option C introduces unnecessary duplication of the $00$ and $01$ prefixes (non-minimal) and also incorrectly sends $00$ on input $0$ to $S_{1}$ instead of maintaining the committed three-bit framing progression; under the protocol’s non-overlapping framing, the single three-state structure suffices and is already captured by A.\n- Option D is incorrect because it outputs $1$ on transitions that do not correspond to completing $001$ or $011$ (e.g., from $S_{0}$ on input $1$).\n\nTherefore, the minimal correct Mealy FSM is described by option A.", "answer": "$$\\boxed{A}$$", "id": "1928694"}, {"introduction": "Moving beyond fixed patterns, this exercise challenges you to design a detector for a relational condition between input bits [@problem_id:1928719]. The core task is to identify the minimum necessary history that the machine must remember to make a decision, which directly translates to defining the states of your FSM. This problem sharpens your understanding of a state's fundamental role as the memory of the sequential circuit.", "problem": "In the design of a simple network packet sniffer, a custom, lightweight protocol is used for identifying special control frames. This protocol embeds a validation marker within the serial data stream. A 3-bit sequence is considered a valid marker if its first and last bits are different. You are tasked to design a digital circuit that continuously monitors the overlapping 3-bit windows of an incoming data stream, one bit at a time. The circuit should produce an output of '1' for one clock cycle upon the arrival of the third bit of a valid marker sequence, and an output of '0' otherwise.\n\nWhat is the minimum number of states required to implement this sequence detector as a Mealy-type Finite State Machine (FSM)? For the purpose of this problem, you may assume the output is '0' for the first two bits of the stream as a full 3-bit sequence has not yet been received.\n\nA. 2\nB. 3\nC. 4\nD. 5\nE. 8", "solution": "Let the input stream be $\\{x_{k}\\}$, where one bit $x_{k} \\in \\{0,1\\}$ arrives each clock, and let the Mealy output on the $k$-th arrival be $y_{k}$. The specification requires that, for $k \\geq 3$,\n$$\ny_{k} =\n\\begin{cases}\n1, & \\text{if } x_{k} \\neq x_{k-2},\\\\\n0, & \\text{if } x_{k} = x_{k-2},\n\\end{cases}\n$$\nand it is given that $y_{1}=0$ and $y_{2}=0$ (no full 3-bit window yet).\n\nTo realize $y_{k}$ upon the arrival of $x_{k}$ (Mealy output), the machine must have stored sufficient information from the past. Since $y_{k}$ depends only on $x_{k}$ and $x_{k-2}$, the current output requires knowledge of $x_{k-2}$. Moreover, to be able to produce $y_{k+1}$ on the next clock, the machine must be able to update the remembered “two-steps-ago” bit to become $x_{k-1}$. Therefore, after reading $x_{k}$, the state must encode both $x_{k-1}$ and $x_{k-2}$ so that on the next input $x_{k+1}$ it can:\n- compute $y_{k+1}$ by comparing $x_{k+1}$ with $x_{k-1}$, and\n- update the stored pair to $(x_{k}, x_{k-1})$.\n\nThus a sufficient state descriptor is the ordered pair $(x_{k-1}, x_{k-2})$, which takes $4$ possible values: $(0,0)$, $(0,1)$, $(1,0)$, $(1,1)$. From any such state $(a,b)$, on input $c$, the Mealy output is\n$$\ny = \\begin{cases}\n1, & \\text{if } c \\neq b,\\\\\n0, & \\text{if } c = b,\n\\end{cases}\n$$\nand the next state is $(c,a)$.\n\nTo show necessity (minimality), consider distinguishability. Take two distinct states among the four, for example $(0,0)$ and $(0,1)$. On the same input $c=0$, their outputs differ because $y=1$ iff the second component $b$ differs from $c$; namely, $b=0$ yields $y=0$ while $b=1$ yields $y=1$. Hence these two states cannot be merged. By symmetry, every pair of distinct $(x_{k-1}, x_{k-2})$ states is distinguishable by some input, so no further reduction is possible, and at least $4$ states are required for the steady-state behavior.\n\nThe problem allows assuming $y_{1}=0$ and $y_{2}=0$ without requiring additional transient states to enforce these outputs. Therefore, the minimum number of states for a Mealy FSM implementing the specified detector is $4$.\n\nHence, the correct choice is C.", "answer": "$$\\boxed{C}$$", "id": "1928719"}, {"introduction": "This problem introduces the critical concept of overlapping sequence detection, a common requirement in data stream analysis. You will design a Mealy machine that can identify a target sequence even when its end forms the beginning of a new potential match [@problem_id:1928671]. This requires a more rigorous approach to defining state transitions to handle overlaps, ensuring no valid sequences are missed.", "problem": "You are tasked with designing a Mealy-type synchronous sequential circuit. The circuit has a single serial binary input, $X$, and a single binary output, $Z$. The circuit is an overlapping sequence detector. It must produce an output $Z=1$ whenever the specific input pattern 'ABA' is detected, and $Z=0$ otherwise. The subsequence 'A' is defined as the binary pattern '10', and the subsequence 'B' is defined as the binary pattern '11'. Therefore, the full target sequence is '101110'. Determine the minimum number of states required to implement this sequence detector as a Mealy state machine.", "solution": "Let the target pattern be $P=101110$ of length $m=6$. For an overlapping Mealy sequence detector, define states $S_{k}$ for $k \\in \\{0,1,2,3,4,5\\}$, where $S_{k}$ means the longest suffix of the input seen so far that matches a prefix of $P$ has length $k$. A transition on the next input bit attempts to extend the current match; if extension fails, we fall back to the longest proper border via a failure function until a match can continue. The output $Z$ is generated on the transition that completes the full pattern.\n\nCompute the failure function $F(k)$, defined as the length of the longest proper prefix of $P[1..k]$ that is also a suffix of $P[1..k]$. Evaluate for $k=1$ to $6$:\n- For $k=1$: $P[1]=1$ has no nonempty proper border, so $F(1)=0$.\n- For $k=2$: $P[1..2]=10$ has no nonempty proper border, so $F(2)=0$.\n- For $k=3$: $P[1..3]=101$ has border of length $1$ (the string $1$), so $F(3)=1$.\n- For $k=4$: $P[1..4]=1011$ has border of length $1$, so $F(4)=1$.\n- For $k=5$: $P[1..5]=10111$ has border of length $1$, so $F(5)=1$.\n- For $k=6$: $P[1..6]=101110$ has border of length $2$ (the string $10$), so $F(6)=2$.\n\nLet $p_{i}$ denote the $i$-th bit of $P$, so $(p_{1},p_{2},p_{3},p_{4},p_{5},p_{6})=(1,0,1,1,1,0)$. The transition rule from $S_{k}$ on input $b \\in \\{0,1\\}$ is:\n- If $k<6$ and $b=p_{k+1}$, then go to $S_{k+1}$ and, if $k+1=6$, produce $Z=1$ on that transition.\n- If $b \\neq p_{k+1}$, repeatedly replace $k$ by $F(k)$ until either $k=0$ or $b=p_{k+1}$; if $b=p_{k+1}$ then go to $S_{k+1}$, else go to $S_{0}$.\n- After producing $Z=1$ when completing the pattern on $(S_{5},b=0)$, the next state is $S_{F(6)}=S_{2}$ to preserve overlap.\n\nApplying this yields the explicit transition/output behavior for $k \\in \\{0,1,2,3,4,5\\}$:\n- From $S_{0}$: input $0 \\rightarrow S_{0}$ with $Z=0$; input $1 \\rightarrow S_{1}$ with $Z=0$.\n- From $S_{1}$: input $0 \\rightarrow S_{2}$ with $Z=0$; input $1 \\rightarrow S_{1}$ with $Z=0$.\n- From $S_{2}$: input $0 \\rightarrow S_{0}$ with $Z=0$; input $1 \\rightarrow S_{3}$ with $Z=0$.\n- From $S_{3}$: input $0 \\rightarrow S_{2}$ with $Z=0$; input $1 \\rightarrow S_{4}$ with $Z=0$.\n- From $S_{4}$: input $0 \\rightarrow S_{2}$ with $Z=0$; input $1 \\rightarrow S_{5}$ with $Z=0$.\n- From $S_{5}$: input $0 \\rightarrow S_{2}$ with $Z=1$ (since this completes $P$); input $1 \\rightarrow S_{1}$ with $Z=0$.\n\nTo minimize the Mealy machine, two states are equivalent only if, for every possible future input sequence, they generate identical output sequences and transition to equivalent states. In the above transitions:\n- $S_{5}$ is unique because it is the only state that can produce $Z=1$ (on input $0$), so it cannot be merged with any other state.\n- $S_{4}$ is unique because on input $1$ it transitions to $S_{5}$, which no other state does; hence it cannot be equivalent to any other state.\n- Proceeding similarly, $S_{3}$ transitions to $S_{4}$ on input $1$, which distinguishes it from states that do not lead to $S_{4}$ on that input.\n- $S_{2}$ differs from $S_{0}$ because on input $1$ it goes to $S_{3}$ rather than $S_{1}$, and $S_{3}$ is not equivalent to $S_{1}$.\n- $S_{1}$ has distinct behavior from $S_{0}$ and from the others as shown above.\n\nTherefore, no two of the six states $S_{0},S_{1},S_{2},S_{3},S_{4},S_{5}$ are equivalent. The minimal Mealy implementation thus requires exactly $m=6$ states for the pattern of length $6$.\n\nHence, the minimum number of states required is $6$.", "answer": "$$\\boxed{6}$$", "id": "1928671"}]}