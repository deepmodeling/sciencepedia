{"hands_on_practices": [{"introduction": "Understanding a Serial-In, Parallel-Out (SIPO) shift register begins with tracking the movement of data. This first practice provides a fundamental exercise where you will simulate the state of a register over several clock cycles. By manually tracing how bits shift to the right and how new data enters, you will build a concrete mental model of the register's core operation [@problem_id:1959457].", "problem": "A 5-bit, right-shifting Serial-In, Parallel-Out (SIPO) shift register is used in a digital system. The bits of the register are denoted as $Q_4, Q_3, Q_2, Q_1, Q_0$, where $Q_4$ is the Most Significant Bit (MSB) and $Q_0$ is the Least Significant Bit (LSB). At each active clock edge, the value at the serial data input is loaded into the MSB ($Q_4$), and the existing bits are shifted one position to the right, such that the old value of $Q_i$ moves to $Q_{i-1}$ for $i=4, 3, 2, 1$. The old value of $Q_0$ is discarded.\n\nInitially, the parallel output of the register, read from MSB to LSB ($Q_4Q_3Q_2Q_1Q_0$), is '10110'. The serial data input is then held at a constant logic '0' for two consecutive clock pulses.\n\nDetermine the new 5-bit parallel output of the register ($Q_4Q_3Q_2Q_1Q_0$) after these two clock pulses have occurred. Present your answer as a 5-digit binary string.", "solution": "Let the initial state be read MSB to LSB as $Q_{4}Q_{3}Q_{2}Q_{1}Q_{0}=10110$, so $(Q_{4}^{(0)},Q_{3}^{(0)},Q_{2}^{(0)},Q_{1}^{(0)},Q_{0}^{(0)})=(1,0,1,1,0)$. For a right-shifting SIPO register with serial input $S$, the update at each clock is given by\n$$Q_{4}^{+}=S,\\quad Q_{3}^{+}=Q_{4},\\quad Q_{2}^{+}=Q_{3},\\quad Q_{1}^{+}=Q_{2},\\quad Q_{0}^{+}=Q_{1}.$$\nWith $S=0$ held constant, after the first clock pulse:\n$$Q_{4}^{(1)}=0,\\quad Q_{3}^{(1)}=Q_{4}^{(0)}=1,\\quad Q_{2}^{(1)}=Q_{3}^{(0)}=0,\\quad Q_{1}^{(1)}=Q_{2}^{(0)}=1,\\quad Q_{0}^{(1)}=Q_{1}^{(0)}=1,$$\nso $(Q_{4}^{(1)},Q_{3}^{(1)},Q_{2}^{(1)},Q_{1}^{(1)},Q_{0}^{(1)})=(0,1,0,1,1)$, i.e., $01011$.\n\nApplying the second clock pulse with $S=0$:\n$$Q_{4}^{(2)}=0,\\quad Q_{3}^{(2)}=Q_{4}^{(1)}=0,\\quad Q_{2}^{(2)}=Q_{3}^{(1)}=1,\\quad Q_{1}^{(2)}=Q_{2}^{(1)}=0,\\quad Q_{0}^{(2)}=Q_{1}^{(1)}=1,$$\nso $(Q_{4}^{(2)},Q_{3}^{(2)},Q_{2}^{(2)},Q_{1}^{(2)},Q_{0}^{(2)})=(0,0,1,0,1)$, which read MSB to LSB is $00101$.", "answer": "$$\\boxed{00101}$$", "id": "1959457"}, {"introduction": "One of the most common applications of a SIPO register is to convert a serial data stream into a parallel word, a crucial task in digital communication and system configuration. This problem challenges you to work in reverse: given a desired parallel output, you must determine the precise serial input sequence needed to load that value into the register. This exercise highlights the practical utility of SIPO registers in data handling tasks [@problem_id:1959433].", "problem": "An 8-bit Serial-In, Parallel-Out (SIPO) shift register is used to configure an initial state for a peripheral device. The register is composed of 8 D-type flip-flops, labeled to store bits $Q_7, Q_6, \\dots, Q_0$, where $Q_7$ is the most significant bit (MSB) and $Q_0$ is the least significant bit (LSB) of the parallel output. The register is a right-shift register: the serial data input, $D_{in}$, is connected to the input of the flip-flop for $Q_7$. On the rising edge of each clock pulse, the value at $D_{in}$ is loaded into the $Q_7$ position, and the value previously at $Q_i$ is shifted to the $Q_{i-1}$ position for all $i$ from 7 down to 1. The initial state of all flip-flops in the register is 0.\n\nAfter 8 clock pulses, the parallel output $Q_7Q_6\\dots Q_0$ must represent the hexadecimal value $A9_{16}$. Which of the following represents the correct 8-bit serial input sequence that must be applied to $D_{in}$ to achieve this state? The first bit in the sequence is the first bit clocked into the register.\n\nA. 10101001\n\nB. 10010101\n\nC. 01010110\n\nD. 01101010\n\nE. 11001010", "solution": "Let the serial input bits applied to $D_{in}$ on successive rising clock edges be $b_{1}, b_{2}, \\dots, b_{8}$, where $b_{1}$ is the first bit clocked in.\n\nGiven the right-shift behavior with serial input loaded into the $Q_{7}$ stage at each rising edge, the state update on the $k$-th clock satisfies\n$$\nQ_{7}(k) = b_{k}, \\quad Q_{i}(k) = Q_{i+1}(k-1) \\text{ for } i=0,1,\\dots,6,\n$$\nwith the initial condition $Q_{i}(0)=0$ for all $i$.\n\nBy induction, after $k$ clocks,\n$$\nQ_{7-j}(k) = b_{k-j} \\quad \\text{for } 0 \\leq j \\leq k-1,\n$$\nand the remaining lower stages are $0$ if $k<8$. In particular, after $8$ clocks,\n$$\nQ_{7}=b_{8},\\quad Q_{6}=b_{7},\\quad Q_{5}=b_{6},\\quad Q_{4}=b_{5},\\quad Q_{3}=b_{4},\\quad Q_{2}=b_{3},\\quad Q_{1}=b_{2},\\quad Q_{0}=b_{1}.\n$$\n\nThe desired final parallel output is the hexadecimal $A9_{16}$, which in binary is\n$$\nA9_{16} = 10101001_{2},\n$$\nso\n$$\n(Q_{7},Q_{6},Q_{5},Q_{4},Q_{3},Q_{2},Q_{1},Q_{0})=(1,0,1,0,1,0,0,1).\n$$\nEquating with the mapping above yields\n$$\nb_{8}=1,\\quad b_{7}=0,\\quad b_{6}=1,\\quad b_{5}=0,\\quad b_{4}=1,\\quad b_{3}=0,\\quad b_{2}=0,\\quad b_{1}=1.\n$$\nTherefore, the required serial input sequence in order $b_{1}b_{2}\\dots b_{8}$ is\n$$\n10010101,\n$$\nwhich corresponds to option B.", "answer": "$$\\boxed{B}$$", "id": "1959433"}, {"introduction": "A deep understanding of any digital component involves knowing not only what it can do, but also what its operational constraints are. This conceptual problem presents a seemingly simple state transition and asks you to explain why it is physically impossible for a standard SIPO register. Analyzing this impossibility will reinforce your grasp of the fundamental rules governing data flow within the register [@problem_id:1959462].", "problem": "Consider a standard 4-bit, right-shifting, synchronous Serial-In, Parallel-Out (SIPO) shift register. The register's state is represented by the parallel outputs $Q_3Q_2Q_1Q_0$, where $Q_3$ is the Most Significant Bit (MSB) and $Q_0$ is the Least Significant Bit (LSB). The register is constructed from four D-type flip-flops, where the output $Q_i$ of flip-flop $i$ is connected to the data input $D_{i-1}$ of the next flip-flop $(i-1)$ for $i \\in \\{3, 2, 1\\}$. The input to the MSB flip-flop is the serial data line, $D_{in}$.\n\nAn engineer monitoring the system observes that the register's state transitions from an initial state of $1111$ to a new state of $1110$ after a single active clock edge. This observed transition is physically impossible for a standard SIPO register operating correctly.\n\nWhich of the following statements provides the most accurate and fundamental reason for this impossibility?\n\nA. The total number of '1's in the register cannot decrease by exactly one when the initial state is $1111$.\n\nB. A SIPO register can only shift bits from left to right; it cannot change a '1' to a '0' within the register.\n\nC. To achieve the final state $1110$, the value of $Q_1$ in the initial state must have been '0', which contradicts the given initial state of $1111$.\n\nD. The serial data input $D_{in}$ can only affect the MSB ($Q_3$) and does not have a direct connection to alter the LSB ($Q_0$).\n\nE. The state of the bit $Q_2$ in the new state should have been determined by the previous state of $Q_1$, which did not occur.", "solution": "A standard 4-bit right-shifting synchronous SIPO register is built from D flip-flops clocked simultaneously. On each active clock edge, the next-state outputs are determined by the wiring:\n- For the MSB: $Q_{3}^{+} = D_{in}$.\n- For the internal stages: $Q_{2}^{+} = Q_{3}$, $Q_{1}^{+} = Q_{2}$, $Q_{0}^{+} = Q_{1}$.\n\nCompactly,\n$$\n\\begin{pmatrix}\nQ_{3}^{+} \\\\\nQ_{2}^{+} \\\\\nQ_{1}^{+} \\\\\nQ_{0}^{+}\n\\end{pmatrix}\n=\n\\begin{pmatrix}\nD_{in} \\\\\nQ_{3} \\\\\nQ_{2} \\\\\nQ_{1}\n\\end{pmatrix}.\n$$\n\nGiven the initial state $Q_{3}Q_{2}Q_{1}Q_{0} = 1111$, the next state must be\n$$\n\\begin{pmatrix}\nQ_{3}^{+} \\\\\nQ_{2}^{+} \\\\\nQ_{1}^{+} \\\\\nQ_{0}^{+}\n\\end{pmatrix}\n=\n\\begin{pmatrix}\nD_{in} \\\\\n1 \\\\\n1 \\\\\n1\n\\end{pmatrix},\n$$\nso the only possible next states are $1111$ (if $D_{in}=1$) or $0111$ (if $D_{in}=0$). In particular, the LSB update is constrained by\n$$\nQ_{0}^{+} = Q_{1}.\n$$\nWith the initial $Q_{1} = 1$, it follows that $Q_{0}^{+} = 1$. Therefore, the observed next state $1110$ is impossible because it requires $Q_{0}^{+} = 0$, which contradicts $Q_{0}^{+} = Q_{1} = 1$. Equivalently, to obtain $Q_{0}^{+} = 0$, one would need $Q_{1} = 0$ in the initial state, which contradicts the given initial state $1111$.\n\nAmong the options, this reasoning is stated most precisely by option C: to achieve $1110$, the initial $Q_{1}$ would have to be $0$, contradicting the initial state $1111$.\n\nOption A is false because a decrease by exactly one in the number of ones is possible (e.g., from $1111$ to $0111$ when $D_{in}=0$). Option B is overly broad and incorrect in general, since bits can change depending on their left neighbor. Option D, while true about direct connectivity, does not pinpoint the fundamental constraint that $Q_{0}^{+}=Q_{1}$. Option E is incorrect about the dependency, since $Q_{2}^{+}$ depends on $Q_{3}$, not $Q_{1}$.\n\nTherefore, the most accurate and fundamental reason is given by option C.", "answer": "$$\\boxed{C}$$", "id": "1959462"}]}