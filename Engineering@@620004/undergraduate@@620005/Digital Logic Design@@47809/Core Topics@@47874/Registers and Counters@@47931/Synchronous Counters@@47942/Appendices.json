{"hands_on_practices": [{"introduction": "Synchronous counters are fundamental in digital systems, but their use extends beyond simple numerical progression. They are often employed to generate specific, custom sequences of states that control complex operations. This first exercise [@problem_id:1928964] provides practice in the core design process of a synchronous counter using D-type flip-flops. By determining the combinational logic required to drive the counter through a non-contiguous sequence, you will solidify your understanding of the relationship between a counter's present state and its desired next state.", "problem": "A specialized digital sequencer is required for an industrial control application. The sequencer must be designed as a 3-bit synchronous counter that cycles through a specific sequence of states representing different operational modes. The state of the counter is given by the outputs of three D-type flip-flops, denoted as $Q_2 Q_1 Q_0$, where $Q_2$ is the most significant bit.\n\nThe counter must endlessly repeat the following sequence of states, represented by their decimal equivalents: $0 \\rightarrow 2 \\rightarrow 4 \\rightarrow 6 \\rightarrow 0 \\ldots$. The clock input is connected to all flip-flops simultaneously. The inputs to the flip-flops are denoted as $D_2, D_1, D_0$. Any state not present in the specified sequence is considered an unused state, and its next state can be treated as a \"don't care\" condition to simplify the design.\n\nYour task is to determine the correct set of simplified Boolean logic expressions for the flip-flop inputs ($D_2, D_1, D_0$) as functions of the present state outputs ($Q_2, Q_1, Q_0$). In the expressions below, the prime symbol (e.g., $Q'$) denotes the NOT operation, `+` denotes the OR operation, concatenation denotes the AND operation (e.g., $AB$ means $A$ AND $B$), and $\\oplus$ denotes the XOR operation.\n\nWhich of the following options represents the correct set of simplified logic expressions for the D flip-flop inputs?\n\nA. $D_2 = Q_2 \\oplus Q_1$; $D_1 = Q_1'$; $D_0 = 0$\n\nB. $D_2 = Q_1$; $D_1 = Q_2'$; $D_0 = 0$\n\nC. $D_2 = Q_2'Q_1 + Q_1'Q_0$; $D_1 = Q_1'$; $D_0 = Q_0'$\n\nD. $D_2 = Q_2 \\oplus Q_1$; $D_1 = Q_1'Q_0'$; $D_0 = 0$\n\nE. $D_2 = Q_2'$; $D_1 = Q_1$; $D_0 = Q_0'$", "solution": "We denote the present state as $(Q_{2},Q_{1},Q_{0})$ and the next state as $(Q_{2}^{+},Q_{1}^{+},Q_{0}^{+})$. For D-type flip-flops, the next-state bits equal the corresponding D inputs, so\n$$\nQ_{i}^{+} = D_{i}, \\quad i \\in \\{0,1,2\\}.\n$$\nThe required sequence is $000 \\rightarrow 010 \\rightarrow 100 \\rightarrow 110 \\rightarrow 000 \\rightarrow \\cdots$. Thus, for the used present states, the next-state bits (and hence $D_{i}$) are:\n- At $000$: next is $010$, so $(D_{2},D_{1},D_{0}) = (0,1,0)$.\n- At $010$: next is $100$, so $(D_{2},D_{1},D_{0}) = (1,0,0)$.\n- At $100$: next is $110$, so $(D_{2},D_{1},D_{0}) = (1,1,0)$.\n- At $110$: next is $000$, so $(D_{2},D_{1},D_{0}) = (0,0,0)$.\n\nUnused states are $001,011,101,111$ and are treated as don't cares to simplify the logic.\n\nDerivation for $D_{0}$:\nFrom all used states, $D_{0}=0$. Choosing the constant function\n$$\nD_{0} = 0\n$$\nsatisfies all used states and is maximally simplified.\n\nDerivation for $D_{1}$:\nFrom the used states, the values are: at $000$ $\\rightarrow D_{1}=1$, at $010$ $\\rightarrow D_{1}=0$, at $100$ $\\rightarrow D_{1}=1$, at $110$ $\\rightarrow D_{1}=0$. This exactly matches the complement of $Q_{1}$ for all used states. Hence the simplified choice is\n$$\nD_{1} = Q_{1}'.\n$$\n\nDerivation for $D_{2}$:\nFrom the used states, the values are: at $000$ $\\rightarrow D_{2}=0$, at $010$ $\\rightarrow D_{2}=1$, at $100$ $\\rightarrow D_{2}=1$, at $110$ $\\rightarrow D_{2}=0$. This is the parity of $Q_{2}$ and $Q_{1}$, i.e.,\n$$\nD_{2} = Q_{2} \\oplus Q_{1} = Q_{2}'Q_{1} + Q_{2}Q_{1}'.\n$$\nThis expression is independent of $Q_{0}$ and matches all required transitions.\n\nCollecting the simplified expressions:\n$$\nD_{2} = Q_{2} \\oplus Q_{1}, \\quad D_{1} = Q_{1}', \\quad D_{0} = 0.\n$$\nThis corresponds exactly to option A, while other options either fail on required transitions or are not as simplified (for example, $D_{1}=Q_{1}'Q_{0}'$ is unnecessarily complex compared to $Q_{1}'$).", "answer": "$$\\boxed{A}$$", "id": "1928964"}, {"introduction": "Building on the fundamentals, this practice [@problem_id:1965648] introduces T-type flip-flops and the concept of \"don't care\" conditions. Designing with T-FFs requires using an excitation table to determine when a flip-flop needs to toggle, adding a layer to the design process. Furthermore, you will leverage unused states as \"don't cares\"—a powerful optimization technique in digital logic design that allows for significantly simpler and more efficient logic circuits.", "problem": "A control system for an industrial process requires a specialized synchronous counter. This counter must be a MOD-5 down-counter that cycles through the decimal sequence 4, 3, 2, 1, 0, and then repeats. The counter's state is represented by three bits: $Q_C$, $Q_B$, and $Q_A$, where $Q_C$ is the most significant bit (MSB) and $Q_A$ is the least significant bit (LSB). The decimal value of the counter's state can be expressed as $4Q_C + 2Q_B + Q_A$.\n\nThe counter is to be implemented using T-type flip-flops. The inputs to these flip-flops are denoted as $T_C$, $T_B$, and $T_A$ respectively. The binary states corresponding to decimal values 5, 6, and 7 are unused in the counting sequence and should be treated as \"don't care\" conditions to simplify the logic.\n\nWhich of the following sets of simplified Boolean expressions correctly describes the required inputs for the T flip-flops?\n\n\nA.\n$T_C = Q_C \\bar{Q}_B + Q_B Q_A$\n$T_B = \\bar{Q}_C Q_A$\n$T_A = \\bar{Q}_C + Q_B + Q_A$\n\nB.\n$T_C = \\bar{Q}_B\\bar{Q}_A$\n$T_B = Q_C$\n$T_A = Q_C + Q_B\\bar{Q}_A$\n\nC.\n$T_C = Q_C + Q_A$\n$T_B = \\bar{Q}_C + Q_B$\n$T_A = \\bar{Q}_A$\n\nD.\n$T_C = \\bar{Q}_B\\bar{Q}_A$\n$T_B = Q_C + Q_B\\bar{Q}_A$\n$T_A = Q_C + Q_B + Q_A$", "solution": "To design the MOD-5 synchronous down-counter using T flip-flops, we follow a standard procedure involving creating a state transition table, then an excitation table, and finally using Karnaugh maps (K-maps) to derive the simplified Boolean expressions for the flip-flop inputs.\n\n**Step 1: State Transition Table**\nThe counter needs to represent decimal values from 0 to 4, which requires a minimum of 3 bits. Let the state of the counter be represented by $(Q_C, Q_B, Q_A)$. The counting sequence is 4 → 3 → 2 → 1 → 0 → 4. We can construct the state transition table, showing the present state $(Q_C(t), Q_B(t), Q_A(t))$ and the corresponding next state $(Q_C(t+1), Q_B(t+1), Q_A(t+1))$. The states for decimal 5, 6, and 7 are unused, so their next states are \"don't cares\" (X).\n\n| Decimal (Present) | Present State ($Q_C Q_B Q_A$) | Next State ($Q_C(t+1) Q_B(t+1) Q_A(t+1)$) | Decimal (Next) |\n| :---: | :---: | :---: | :---: |\n| 4 | 1 0 0 | 0 1 1 | 3 |\n| 3 | 0 1 1 | 0 1 0 | 2 |\n| 2 | 0 1 0 | 0 0 1 | 1 |\n| 1 | 0 0 1 | 0 0 0 | 0 |\n| 0 | 0 0 0 | 1 0 0 | 4 |\n| 5 | 1 0 1 | X X X | X |\n| 6 | 1 1 0 | X X X | X |\n| 7 | 1 1 1 | X X X | X |\n\n**Step 2: T Flip-Flop Excitation Table**\nThe characteristic equation for a T flip-flop is $Q(t+1) = Q(t) \\oplus T$. From this, we derive the excitation input $T$ required for a given state transition: $T = Q(t) \\oplus Q(t+1)$. This means $T=1$ if the state toggles ($0 \\to 1$ or $1 \\to 0$), and $T=0$ if the state holds ($0 \\to 0$ or $1 \\to 1$).\n\nWe apply this to our state transitions to find the required inputs $T_C$, $T_B$, and $T_A$.\n\n| $Q_C Q_B Q_A$ | $Q_C(t+1) Q_B(t+1) Q_A(t+1)$ | $T_C$ | $T_B$ | $T_A$ |\n| :---: | :---: | :---: | :---: | :---: |\n| 0 0 0 | 1 0 0 | 1 | 0 | 0 |\n| 0 0 1 | 0 0 0 | 0 | 0 | 1 |\n| 0 1 0 | 0 0 1 | 0 | 1 | 1 |\n| 0 1 1 | 0 1 0 | 0 | 0 | 1 |\n| 1 0 0 | 0 1 1 | 1 | 1 | 1 |\n| 1 0 1 | X X X | X | X | X |\n| 1 1 0 | X X X | X | X | X |\n| 1 1 1 | X X X | X | X | X |\n\n**Step 3: K-Map Simplification**\nNow we create K-maps for $T_C$, $T_B$, and $T_A$ as functions of $Q_C$, $Q_B$, and $Q_A$.\n\n**For $T_C$:**\nThe minterms for which $T_C=1$ are $m_0$ (000) and $m_4$ (100). The \"don't care\" minterms are $d(5, 6, 7)$.\n$T_C(Q_C, Q_B, Q_A) = \\sum m(0, 4) + d(5, 6, 7)$\n\nK-map for $T_C$:\n```\n      Q_B Q_A\n       00  01  11  10\nQ_C 0 | 1 | 0 | 0 | 0 |\n    1 | 1 | X | X | X |\n```\nWe can cover both '1's at $m_0$ and $m_4$ with a single group of two, which are adjacent in the first column. This group corresponds to the term where $Q_B=0$ and $Q_A=0$.\nThis gives the simplified expression: $T_C = \\bar{Q}_B\\bar{Q}_A$.\n\n**For $T_B$:**\nThe minterms for which $T_B=1$ are $m_2$ (010) and $m_4$ (100). The \"don't care\" minterms are $d(5, 6, 7)$.\n$T_B(Q_C, Q_B, Q_A) = \\sum m(2, 4) + d(5, 6, 7)$\n\nK-map for $T_B$:\n```\n      Q_B Q_A\n       00  01  11  10\nQ_C 0 | 0 | 0 | 0 | 1 |\n    1 | 1 | X | X | X |\n```\nTo cover the '1' at $m_2$ (010), we can group it with the don't care at $m_6$ (110). This yields the term $Q_B\\bar{Q}_A$. This is an essential prime implicant as no other group covers $m_2$.\nTo cover the '1' at $m_4$ (100), we can form a group of four with the don't cares at $m_5, m_6, m_7$. This group covers the entire bottom row and yields the term $Q_C$. This is also an essential prime implicant as no other group covers $m_4$.\nCombining the essential prime implicants gives the minimal sum-of-products expression: $T_B = Q_C + Q_B\\bar{Q}_A$.\n\n**For $T_A$:**\nThe minterms for which $T_A=1$ are $m_1, m_2, m_3, m_4$. The \"don't care\" minterms are $d(5, 6, 7)$.\n$T_A(Q_C, Q_B, Q_A) = \\sum m(1, 2, 3, 4) + d(5, 6, 7)$\n\nK-map for $T_A$:\n```\n      Q_B Q_A\n       00  01  11  10\nQ_C 0 | 0 | 1 | 1 | 1 |\n    1 | 1 | X | X | X |\n```\nThis map has a '1' or 'X' in every cell except for $m_0$ (000), which is '0'. It is simpler to find the expression for the '0's (product-of-sums) and then invert it. The only '0' is at $m_0 = \\bar{Q}_C\\bar{Q}_B\\bar{Q}_A$. This represents the function $\\bar{T}_A$.\nSo, $\\bar{T}_A = \\bar{Q}_C\\bar{Q}_B\\bar{Q}_A$.\nUsing De Morgan's theorem to find $T_A$:\n$T_A = \\overline{\\bar{Q}_C\\bar{Q}_B\\bar{Q}_A} = \\overline{\\bar{Q}_C} + \\overline{\\bar{Q}_B} + \\overline{\\bar{Q}_A} = Q_C + Q_B + Q_A$.\n\n**Step 4: Conclusion**\nThe derived simplified Boolean expressions are:\n$T_C = \\bar{Q}_B\\bar{Q}_A$\n$T_B = Q_C + Q_B\\bar{Q}_A$\n$T_A = Q_C + Q_B + Q_A$\n\nComparing these results with the given options, we find that they match option D.", "answer": "$$\\boxed{D}$$", "id": "1965648"}, {"introduction": "A crucial skill for any digital designer is not just creating circuits, but also analyzing and debugging them. This final practice [@problem_id:1965692] shifts the focus from design to analysis, simulating a common real-world scenario: a hardware fault. By predicting the behavior of a standard up-counter with a \"stuck-at-1\" fault, you will reinforce your understanding of how the internal logic dictates the counter's sequence, even when it behaves unexpectedly.", "problem": "A 3-bit synchronous binary up-counter is designed using three T-type flip-flops. The state of the counter is represented by the binary number $Q_2Q_1Q_0$, where $Q_2$ is the most significant bit (MSB) and $Q_0$ is the least significant bit (LSB). In its intended operation, the inputs to the flip-flops are designed as follows: the input to the LSB flip-flop is $T_0=1$; the input to the second flip-flop is $T_1=Q_0$; and the input to the MSB flip-flop is $T_2=Q_1 \\cdot Q_0$. All flip-flops are triggered by the same clock signal.\n\nA manufacturing defect causes the output of the LSB flip-flop, $Q_0$, to be permanently stuck-at-1. Assume the counter is initialized such that all flip-flop outputs would be zero, but the fault is present from the very beginning, forcing $Q_0$ to be 1 even before the first clock pulse arrives. Which of the following sequences represents the decimal equivalent of the counter's state ($Q_2Q_1Q_0$) over subsequent clock pulses?\n\nA. $0 \\rightarrow 1 \\rightarrow 2 \\rightarrow 3 \\rightarrow 4 \\rightarrow 5 \\rightarrow 6 \\rightarrow 7 \\rightarrow 0 \\dots$\n\nB. $1 \\rightarrow 2 \\rightarrow 4 \\rightarrow 6 \\rightarrow 1 \\dots$\n\nC. $1 \\rightarrow 3 \\rightarrow 5 \\rightarrow 7 \\rightarrow 1 \\dots$\n\nD. $1 \\rightarrow 3 \\rightarrow 1 \\rightarrow 3 \\rightarrow 1 \\dots$\n\nE. $0 \\rightarrow 2 \\rightarrow 4 \\rightarrow 6 \\rightarrow 0 \\dots$", "solution": "For a T-type flip-flop, the characteristic equation is\n$$Q^{+} = Q \\oplus T,$$\nso the flip-flop toggles if $T=1$ and holds if $T=0$.\n\nGiven the synchronous 3-bit counter with inputs $T_{0}=1$, $T_{1}=Q_{0}$, $T_{2}=Q_{1}\\cdot Q_{0}$, and a stuck-at-1 fault on $Q_{0}$, we have\n$$Q_{0}=1 \\text{ at all times} \\;\\Rightarrow\\; Q_{0}^{+}=1.$$\nTherefore, the effective T-inputs become\n$$T_{1}=Q_{0}=1,$$\n$$T_{2}=Q_{1}\\cdot Q_{0}=Q_{1}.$$\nThus, the next-state equations are\n$$Q_{1}^{+} = Q_{1} \\oplus T_{1} = Q_{1} \\oplus 1 = \\bar{Q}_{1},$$\n$$Q_{2}^{+} = Q_{2} \\oplus T_{2} = Q_{2} \\oplus Q_{1}.$$\n\nThe initial condition under the fault is $Q_{2}Q_{1}Q_{0} = 0\\,0\\,1$ (decimal $1$). Evolving the state synchronously:\n- From $(Q_{2},Q_{1},Q_{0})=(0,0,1)$:\n$$Q_{1}^{+}=\\overline{0}=1,\\quad Q_{2}^{+}=0\\oplus 0=0,\\quad Q_{0}^{+}=1,$$\nso the next state is $(0,1,1)$ (decimal $3$).\n- From $(0,1,1)$:\n$$Q_{1}^{+}=\\overline{1}=0,\\quad Q_{2}^{+}=0\\oplus 1=1,\\quad Q_{0}^{+}=1,$$\nso the next state is $(1,0,1)$ (decimal $5$).\n- From $(1,0,1)$:\n$$Q_{1}^{+}=\\overline{0}=1,\\quad Q_{2}^{+}=1\\oplus 0=1,\\quad Q_{0}^{+}=1,$$\nso the next state is $(1,1,1)$ (decimal $7$).\n- From $(1,1,1)$:\n$$Q_{1}^{+}=\\overline{1}=0,\\quad Q_{2}^{+}=1\\oplus 1=0,\\quad Q_{0}^{+}=1,$$\nso the next state is $(0,0,1)$ (decimal $1$), returning to the start.\n\nTherefore, the sequence is $1 \\rightarrow 3 \\rightarrow 5 \\rightarrow 7 \\rightarrow 1 \\dots$, which corresponds to option C.", "answer": "$$\\boxed{C}$$", "id": "1965692"}]}