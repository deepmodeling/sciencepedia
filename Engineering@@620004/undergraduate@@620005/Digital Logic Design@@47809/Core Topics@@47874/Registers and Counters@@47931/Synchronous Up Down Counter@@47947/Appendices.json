{"hands_on_practices": [{"introduction": "This first practice serves as an excellent entry point into designing state-dependent logic. We will explore how a synchronous counter's behavior can be dynamically controlled based on its current value. This exercise demonstrates that a seemingly complex operational rule—counting up for even numbers and down for odd numbers—can be implemented with surprisingly simple combinational logic, introducing the foundational concept of using state feedback to create intelligent digital systems.", "problem": "A digital systems engineer is designing a specialized 4-bit synchronous binary counter for a non-standard processor architecture. The counter's state is represented by the four bits $Q_3 Q_2 Q_1 Q_0$, where $Q_3$ is the Most Significant Bit (MSB) and $Q_0$ is the Least Significant Bit (LSB).\n\nThe counter has a single control input, denoted as $U/D'$, which dictates its operation on each clock cycle. When $U/D' = 1$, the counter increments its value (counts up). When $U/D' = 0$, the counter decrements its value (counts down).\n\nThe novel requirement for this counter is that its direction of counting depends on whether its current stored number is even or odd. Specifically, the control logic must be designed to satisfy the following rules:\n- If the current number stored in the counter is even, the counter must count UP on the next clock pulse.\n- If the current number stored in the counter is odd, the counter must count DOWN on the next clock pulse.\n\nYour task is to determine the simplified Boolean expression for the control signal $U/D'$ in terms of the counter's state bits ($Q_3, Q_2, Q_1, Q_0$). Express the logical NOT operation on a variable $A$ as $\\overline{A}$.", "solution": "Let the current 4-bit state be $Q_{3}Q_{2}Q_{1}Q_{0}$, representing the unsigned integer\n$$\nN = Q_{3}2^{3} + Q_{2}2^{2} + Q_{1}2^{1} + Q_{0}2^{0}.\n$$\nParity (even or odd) of $N$ is determined solely by its least significant bit. Since $2^{k}$ is divisible by $2$ for $k \\geq 1$, we have\n$$\nN \\bmod 2 = Q_{0}.\n$$\nTherefore, $N$ is even if and only if $Q_{0} = 0$, and $N$ is odd if and only if $Q_{0} = 1$.\n\nThe control input $U/D'$ must be $1$ when $N$ is even (count up) and $0$ when $N$ is odd (count down). Hence the required Boolean function is\n$$\nU/D' = 1 \\text{ when } Q_{0}=0,\\quad U/D' = 0 \\text{ when } Q_{0}=1,\n$$\nwhich simplifies directly to\n$$\nU/D' = \\overline{Q_{0}}.\n$$\nThis expression is independent of $Q_{3}, Q_{2}, Q_{1}$, as parity depends only on the least significant bit.", "answer": "$$\\boxed{\\overline{Q_{0}}}$$", "id": "1966227"}, {"introduction": "Building on the basics of state control, this practice moves to the complete design of a counter with a non-standard sequence. You will design a synchronous up/down counter that follows a 3-bit Gray code sequence, which is essential in applications like rotary encoders to prevent transitional errors. This problem provides hands-on experience with the entire design flow: creating a state transition table for a custom sequence and deriving the next-state logic equations for D-type flip-flops.", "problem": "A digital control system for a rotary shaft encoder requires a synchronous 3-bit counter that can track the shaft's position. The counter's state is represented by three bits, $Q_2, Q_1, Q_0$. The system must cycle through the standard 3-bit Gray code sequence. A direction control input, `DIR`, determines the counting direction: the counter cycles forward (up) when `DIR`=0 and backward (down) when `DIR`=1. All state transitions are synchronized to the rising edge of a clock signal.\n\nThe standard 3-bit Gray code sequence is: 000, 001, 011, 010, 110, 111, 101, 100.\n\nThe counter is to be implemented using three D-type flip-flops (D-FFs), with inputs $D_2, D_1, D_0$ corresponding to the state bits $Q_2, Q_1, Q_0$. Your task is to determine the correct set of combinational logic equations for the inputs $D_2, D_1,$ and $D_0$ as functions of the present state ($Q_2, Q_1, Q_0$) and the direction input `DIR`.\n\nIn the options below, a prime (e.g., $A'$) denotes the NOT operation, juxtaposition (e.g., $AB$) denotes the AND operation, a plus sign ($+$) denotes the OR operation, $\\oplus$ denotes the Exclusive-OR (XOR) operation, and XNOR denotes the Exclusive-NOR operation.\n\nWhich of the following sets of equations correctly describes the logic for the D-FF inputs?\n\nA.\n$D_2 = Q_2 Q_0 + DIR' Q_1 Q_0' + DIR Q_1' Q_0'$\n$D_1 = Q_1 Q_0' + (DIR \\text{ XNOR } Q_2) Q_0$\n$D_0 = (DIR \\oplus Q_2) \\text{ XNOR } Q_1$\n\nB.\n$D_2 = Q_2 Q_0 + DIR Q_1 Q_0' + DIR' Q_1' Q_0'$\n$D_1 = Q_1 Q_0' + (DIR \\text{ XNOR } Q_2) Q_0$\n$D_0 = (DIR \\oplus Q_2) \\text{ XNOR } Q_1$\n\nC.\n$D_2 = Q_2 Q_0 + DIR' Q_1 Q_0' + DIR Q_1' Q_0'$\n$D_1 = Q_1 Q_0' + (DIR \\oplus Q_2) Q_0$\n$D_0 = (DIR \\oplus Q_2) \\oplus Q_1$\n\nD.\n$D_2 = Q_2 Q_0 + DIR' Q_1 Q_0' + DIR Q_1' Q_0'$\n$D_1 = Q_1 + Q_0$\n$D_0 = (DIR \\oplus Q_2) \\text{ XNOR } Q_1$\n\nE.\n$D_2 = Q_2 \\oplus Q_1$\n$D_1 = Q_1 \\oplus Q_0$\n$D_0 = Q_0' + DIR$", "solution": "We require a synchronous 3-bit up/down Gray counter over the sequence 000, 001, 011, 010, 110, 111, 101, 100, using three D-FFs with inputs $D_{2},D_{1},D_{0}$. The direction input $DIR$ selects the next state: for $DIR=0$ advance forward (up), and for $DIR=1$ go backward (down). All transitions must be Gray-adjacent (one bit change).\n\nFirst, write the next-state mapping from each present state $(Q_{2},Q_{1},Q_{0})$.\n- For $DIR=0$ (up): \n$(000)\\to(001)$, $(001)\\to(011)$, $(011)\\to(010)$, $(010)\\to(110)$, $(110)\\to(111)$, $(111)\\to(101)$, $(101)\\to(100)$, $(100)\\to(000)$.\n- For $DIR=1$ (down): \n$(000)\\to(100)$, $(001)\\to(000)$, $(011)\\to(001)$, $(010)\\to(011)$, $(110)\\to(010)$, $(111)\\to(110)$, $(101)\\to(111)$, $(100)\\to(101)$.\n\nFrom these, derive each next-state bit.\n\n1) Derivation of $D_{0}$.\nCollecting the next $Q_{0}^{+}$ for each $(Q_{2},Q_{1})$ combination shows $Q_{0}^{+}$ is independent of $Q_{0}$ and satisfies the parity relation\n$$\nQ_{0}^{+}=\\overline{DIR \\oplus Q_{2} \\oplus Q_{1}}=(DIR \\oplus Q_{2})\\ \\text{XNOR}\\ Q_{1}.\n$$\nThus,\n$$\nD_{0}=(DIR \\oplus Q_{2})\\ \\text{XNOR}\\ Q_{1}.\n$$\n\n2) Derivation of $D_{1}$.\nInspecting the transitions:\n- When $Q_{0}=0$, $Q_{1}^{+}=Q_{1}$ for both directions (since only $Q_{0}$ or $Q_{2}$ may toggle).\n- When $Q_{0}=1$, $Q_{1}^{+}$ depends on $DIR$ and $Q_{2}$ with $Q_{1}^{+}=(DIR\\ \\text{XNOR}\\ Q_{2})$ (verified against all four cases with $Q_{0}=1$ in the mapping above).\nCombine by multiplexing on $Q_{0}$:\n$$\nD_{1}=Q_{1}Q_{0}'+(DIR\\ \\text{XNOR}\\ Q_{2})\\,Q_{0}.\n$$\n\n3) Derivation of $D_{2}$.\nInspecting the transitions:\n- When $Q_{0}=1$, $Q_{2}^{+}=Q_{2}$ for both directions (only $Q_{0}$ or $Q_{1}$ toggles).\n- When $Q_{0}=0$, $Q_{2}^{+}$ depends on $DIR$ and $Q_{1}$ with $Q_{2}^{+}=Q_{1}\\oplus DIR$ (checked for all four $Q_{0}=0$ cases).\nCombine by multiplexing on $Q_{0}$:\n$$\nD_{2}=Q_{2}Q_{0}+(Q_{1}\\oplus DIR)\\,Q_{0}'=Q_{2}Q_{0}+DIR'Q_{1}Q_{0}'+DIR\\,Q_{1}'Q_{0}'.\n$$\n\nComparing with the options:\n- $D_{2}=Q_{2}Q_{0}+DIR'Q_{1}Q_{0}'+DIR\\,Q_{1}'Q_{0}'$,\n- $D_{1}=Q_{1}Q_{0}'+(DIR\\ \\text{XNOR}\\ Q_{2})\\,Q_{0}$,\n- $D_{0}=(DIR \\oplus Q_{2})\\ \\text{XNOR}\\ Q_{1}$,\nwhich exactly matches option A.\n\nTherefore, the correct choice is A.", "answer": "$$\\boxed{A}$$", "id": "1966203"}, {"introduction": "This final practice integrates multiple real-world design constraints into a single, complex counter. You are tasked with designing a BCD up/down counter that includes a special \"hold\" condition at a specific state, a common requirement in specialized controllers and timing circuits. This advanced exercise will challenge you to manage a restricted state space (0-9), bi-directional control, and state machine modification, solidifying your skills in creating sophisticated, application-specific synchronous counters using JK-flip-flops.", "problem": "A specialized digital controller requires a 4-bit synchronous counter with a peculiar counting sequence. The counter is to be designed using JK-flip-flops. The four output bits of the counter are denoted as $Q_3, Q_2, Q_1, Q_0$, where $Q_3$ is the most significant bit (MSB). The counter functions as a Binary Coded Decimal (BCD) counter, sequencing from 0 (0000) to 9 (1001).\n\nThe counter's direction is controlled by a single input line, $M$. When $M=1$, the counter increments (counts up), and when $M=0$, it decrements (counts down). The counting sequence wraps around in both directions (i.e., from 9 to 0 when counting up, and from 0 to 9 when counting down).\n\nThe special behavior is as follows: upon reaching the count of five (0101), regardless of the counting direction, the counter must hold this state (0101) for one additional clock cycle before proceeding to the next state in its sequence. For all other counts, it transitions normally on each clock pulse. Any BCD-invalid states (1010 through 1111) can be treated as don't-care conditions in the design.\n\nThe JK-flip-flop is defined by its characteristic equation $Q_{next} = J \\cdot Q' + K' \\cdot Q$.\n\nYour task is to determine the simplified sum-of-products (SOP) Boolean expression for the $J_3$ input of the JK-flip-flop corresponding to the MSB, $Q_3$. The final expression should be a function of the control input $M$ and the counter's state outputs $Q_3, Q_2, Q_1, Q_0$.", "solution": "We use JK-flip-flops with characteristic equation $Q_{\\text{next}}=JQ'+K'Q$. From this, the JK excitation conditions for a single bit $Q$ are:\n- For $0 \\to 0$: $J=0$ (and $K$ is a don't-care).\n- For $0 \\to 1$: $J=1$ (and $K$ is a don't-care).\n- For $1 \\to 0$: $K=1$ (and $J$ is a don't-care).\n- For $1 \\to 1$: $K=0$ (and $J$ is a don't-care).\n\nTherefore, for the MSB $Q_{3}$, the input $J_{3}$ must be $1$ exactly for those present-state/input combinations that produce a $0 \\to 1$ transition of $Q_{3}$.\n\nThe valid BCD states are $0000$ through $1001$. The counter counts up when $M=1$ and down when $M=0$, with wrap-around, and it holds at $0101$ for one extra clock regardless of direction. The next-state mapping for valid states is thus:\n- For $M=1$ (up): $0 \\to 1$, $1 \\to 2$, $2 \\to 3$, $3 \\to 4$, $4 \\to 5$, $5 \\to 5$ (hold), $6 \\to 7$, $7 \\to 8$, $8 \\to 9$, $9 \\to 0$.\n- For $M=0$ (down): $0 \\to 9$, $1 \\to 0$, $2 \\to 1$, $3 \\to 2$, $4 \\to 3$, $5 \\to 5$ (hold), $6 \\to 5$, $7 \\to 6$, $8 \\to 7$, $9 \\to 8$.\n\nThe bit $Q_{3}$ equals $0$ for states $0000$ through $0111$ and equals $1$ for states $1000$ and $1001$. Hence, $Q_{3}$ performs a $0 \\to 1$ transition only in the following present-state/input cases:\n- For $M=1$: from state $0111$ to $1000$, i.e., $M=1$ and $(Q_{3},Q_{2},Q_{1},Q_{0})=(0,1,1,1)$.\n- For $M=0$: from state $0000$ to $1001$ (wrap-down), i.e., $M=0$ and $(Q_{3},Q_{2},Q_{1},Q_{0})=(0,0,0,0)$.\n\nAll other valid present-state/input combinations yield either $0 \\to 0$, $1 \\to 0$, or $1 \\to 1$ for $Q_{3}$, for which $J_{3}$ is either $0$ (in the $0 \\to 0$ case) or a don't-care (when $Q_{3}=1$). BCD-invalid states $1010$ through $1111$ are specified as don't-cares and, in any case, have $Q_{3}=1$, so $J_{3}$ is also a don't-care there.\n\nTherefore, the minimal sum-of-products expression for $J_{3}$ is the sum of the two minterms corresponding to these two $0 \\to 1$ transitions:\n$$\nJ_{3} \\;=\\; M\\,Q_{3}'\\,Q_{2}\\,Q_{1}\\,Q_{0}\\;+\\;M'\\,Q_{3}'\\,Q_{2}'\\,Q_{1}'\\,Q_{0}'.\n$$\nThis is already simplified and conforms to the SOP form.", "answer": "$$\\boxed{M\\,Q_{3}'\\,Q_{2}\\,Q_{1}\\,Q_{0}\\;+\\;M'\\,Q_{3}'\\,Q_{2}'\\,Q_{1}'\\,Q_{0}'}$$", "id": "1966209"}]}