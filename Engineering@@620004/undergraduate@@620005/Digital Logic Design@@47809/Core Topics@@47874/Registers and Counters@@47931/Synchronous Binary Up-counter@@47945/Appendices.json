{"hands_on_practices": [{"introduction": "To truly understand how a synchronous counter works, we begin with the fundamental task of tracing its state. This exercise [@problem_id:1965445] challenges you to predict the final state of a 5-bit counter that starts from a non-zero value and is controlled by an `ENABLE` signal. By linking the counting action to an external condition—in this hypothetical scenario, whether the clock pulse number is prime—you'll practice the core skill of tracking state transitions cycle by cycle.", "problem": "A digital control circuit incorporates a 5-bit synchronous binary up-counter. The counter's outputs are denoted as $Q_4Q_3Q_2Q_1Q_0$, where $Q_4$ is the Most Significant Bit (MSB) and $Q_0$ is the Least Significant Bit (LSB). The counter is designed with a synchronous, active-high input signal named `COUNT_ENABLE`. The counter's state increments by one on the rising edge of a clock pulse only if the `COUNT_ENABLE` signal is at a high logic level during that clock cycle. If `COUNT_ENABLE` is low, the counter's state remains unchanged on the next clock pulse.\n\nThe counter is first initialized to a state representing the decimal value 9. Subsequently, the circuit is subjected to a sequence of 19 clock pulses, numbered 1 through 19. The logic level of the `COUNT_ENABLE` signal is determined by a specific rule: for any given clock pulse number $n$ (where $n$ is an integer from 1 to 19), the `COUNT_ENABLE` signal is high if and only if $n$ is a prime number.\n\nDetermine the binary state of the counter, represented as the 5-bit number $Q_4Q_3Q_2Q_1Q_0$, after the 19th clock pulse has occurred.\n\nA. 10001\n\nB. 11100\n\nC. 10011\n\nD. 10000\n\nE. 01001", "solution": "Let the 5-bit counter state after the $n$-th clock pulse be $C_{n}$, interpreted as an integer in $\\{0,1,\\dots,31\\}$, and let $C_{0}=9$ be the initial state. For a synchronous up-counter with an active-high enable, the state update on the $n$-th pulse is\n$$\nC_{n}=\\left(C_{n-1}+E(n)\\right)\\bmod 2^{5},\n$$\nwhere $E(n)=1$ if the input `COUNT_ENABLE` is high on pulse $n$ and $E(n)=0$ otherwise.\n\nBy the problem statement, `COUNT_ENABLE` is high if and only if $n$ is prime. Define the indicator function\n$$\nE(n)=\\begin{cases}\n1, & \\text{$n$ is prime},\\\\\n0, & \\text{$n$ is not prime},\n\\end{cases}\n$$\nfor $n\\in\\{1,2,\\dots,19\\}$. Therefore,\n$$\nC_{19}=\\left(C_{0}+\\sum_{n=1}^{19}E(n)\\right)\\bmod 2^{5}.\n$$\nThe primes in $\\{1,2,\\dots,19\\}$ are $2,3,5,7,11,13,17,19$ (note that $1$ is not prime by definition), so\n$$\n\\sum_{n=1}^{19}E(n)=8.\n$$\nThus,\n$$\nC_{19}=(9+8)\\bmod 32=17.\n$$\nExpressing $17$ in 5-bit binary gives $17=1\\cdot 16+0\\cdot 8+0\\cdot 4+0\\cdot 2+1\\cdot 1$, hence\n$$\nQ_{4}Q_{3}Q_{2}Q_{1}Q_{0}=10001,\n$$\nwhich corresponds to option A.", "answer": "$$\\boxed{A}$$", "id": "1965445"}, {"introduction": "Beyond its logical behavior, a counter's real-world performance is governed by physical timing constraints. This practice [@problem_id:1965452] shifts our focus from *what* the counter does to *how fast* it can do it. You will calculate the maximum operating frequency by analyzing the propagation delays through the flip-flops and the associated logic gates, a critical skill for designing high-speed digital systems.", "problem": "A digital systems engineer is tasked with designing a high-precision event timer module for a physics experiment. The core of this module is a 5-bit synchronous binary up-counter. The counter is implemented using T-type flip-flops and standard 2-input AND gates. All flip-flops share a common clock signal.\n\nIn this design, the toggle input ($T_n$) for the $n$-th flip-flop (where $n=0$ corresponds to the least significant bit) is driven by the logical AND of the outputs ($Q_i$) of all preceding flip-flops. That is, $T_n = Q_{n-1} \\cdot Q_{n-2} \\cdot \\ldots \\cdot Q_0$ for $n>0$. For the first flip-flop, the input is $T_0 = 1$ (logic high). Any required multi-input AND operation is constructed by cascading 2-input AND gates in series. For example, the operation $A \\cdot B \\cdot C$ is realized as $(A \\cdot B) \\cdot C$.\n\nThe components used have the following timing characteristics:\n- The propagation delay from the clock edge to a stable output for any flip-flop is $t_{p-ff} = 12$ ns.\n- The setup time, during which the data input to a flip-flop must be stable before the triggering clock edge, is $t_{su} = 3$ ns.\n- The propagation delay for any 2-input AND gate is $t_{p-and} = 5$ ns.\n\nCalculate the maximum possible operating frequency for this 5-bit counter. Express your answer in megahertz (MHz), rounded to three significant figures.", "solution": "We use the synchronous timing (setup) constraint between two registers:\n$$\nT_{\\text{clk}} \\ge t_{p\\text{-ff}} + t_{p\\text{-logic}} + t_{su}.\n$$\nHere, $t_{p\\text{-logic}}$ is the worst-case propagation delay through the combinational logic that drives the destination flip-flop input.\n\nIn this 5-bit counter, the toggle input of bit $n$ is $T_{n} = Q_{n-1} \\cdot Q_{n-2} \\cdots Q_{0}$ for $n>0$, realized by cascading 2-input AND gates. An $m$-input AND built from 2-input ANDs requires $(m-1)$ stages. Therefore, for bit $n$, the number of 2-input AND stages is $(n-1)$ because $T_{n}$ has $n$ inputs.\n\nEnumerating:\n- $T_{1} = Q_{0}$: $0$ AND gates,\n- $T_{2} = Q_{1}\\cdot Q_{0}$: $1$ AND gate,\n- $T_{3} = Q_{2}\\cdot Q_{1}\\cdot Q_{0}$: $2$ AND gates,\n- $T_{4} = Q_{3}\\cdot Q_{2}\\cdot Q_{1}\\cdot Q_{0}$: $3$ AND gates.\n\nThus, the critical path is to $T_{4}$ with $3$ cascaded AND gates. The worst-case data-path delay is\n$$\nt_{p\\text{-path}} = t_{p\\text{-ff}} + 3\\,t_{p\\text{-and}}.\n$$\nApplying the setup constraint for the maximum clock frequency:\n$$\nT_{\\min} = t_{p\\text{-ff}} + 3\\,t_{p\\text{-and}} + t_{su}.\n$$\nSubstituting the given values,\n$$\nT_{\\min} = 12\\ \\text{ns} + 3 \\times 5\\ \\text{ns} + 3\\ \\text{ns} = 30\\ \\text{ns}.\n$$\nTherefore,\n$$\nf_{\\max} = \\frac{1}{T_{\\min}} = \\frac{1}{30\\times 10^{-9}\\ \\text{s}} = \\frac{10^{9}}{30}\\ \\text{Hz} = \\frac{10^{3}}{30}\\ \\text{MHz} \\approx 33.3\\ \\text{MHz},\n$$\nrounded to three significant figures.", "answer": "$$\\boxed{33.3}$$", "id": "1965452"}, {"introduction": "A robust design anticipates not only correct operation but also potential failures. This final practice [@problem_id:1965398] immerses you in a fault analysis scenario, where a key logic gate within the counter is 'stuck' at a fixed value. By determining the resulting counting sequence, you will develop diagnostic skills and deepen your understanding of how the internal logic directly dictates the counter's state transitions.", "problem": "A 4-bit synchronous binary up-counter is constructed using four T-type flip-flops. The outputs of the flip-flops are denoted as $Q_3, Q_2, Q_1, Q_0$, where $Q_3$ is the Most Significant Bit (MSB) and $Q_0$ is the Least Significant Bit (LSB). The counter is designed to increment on the rising edge of a clock signal. The toggle inputs ($T$) for the flip-flops are driven by the following logic, where `·` represents the logical AND operation:\n\n$T_0 = 1$\n$T_1 = Q_0$\n$T_2 = Q_1 \\cdot Q_0$\n$T_3 = Q_2 \\cdot Q_1 \\cdot Q_0$\n\nA fault occurs in the circuit: the three-input AND gate that generates the signal for the $T_3$ input malfunctions. Its output becomes permanently stuck at a logic $0$ level. Assume the counter is initialized to the state $0000$ and a continuous clock signal is then applied.\n\nWhich of the following options correctly describes the repeating sequence of decimal values that the counter will now exhibit?\n\nA. 0, 1, 2, 3, 4, 5, 6, 7\n\nB. 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15\n\nC. 0, 1, 2, 3\n\nD. 8, 9, 10, 11, 12, 13, 14, 15\n\nE. The counter gets permanently stuck at the state 7 (binary 0111).", "solution": "A T-type flip-flop follows the next-state relation\n$$\nQ^{+} = T \\oplus Q,\n$$\nwhere $\\oplus$ denotes exclusive OR. For the given synchronous counter, the intended toggle inputs are\n$$\nT_{0} = 1,\\quad T_{1} = Q_{0},\\quad T_{2} = Q_{1}\\,Q_{0},\\quad T_{3} = Q_{2}\\,Q_{1}\\,Q_{0}.\n$$\nWith the fault, the three-input AND that drives $T_{3}$ is stuck at logic $0$, so the actual inputs are\n$$\nT_{0} = 1,\\quad T_{1} = Q_{0},\\quad T_{2} = Q_{1}\\,Q_{0},\\quad T_{3} = 0.\n$$\nTherefore, the bit-wise next-state equations are\n$$\nQ_{0}^{+} = 1 \\oplus Q_{0} = \\bar{Q}_{0},\\quad\nQ_{1}^{+} = Q_{0} \\oplus Q_{1},\\quad\nQ_{2}^{+} = (Q_{1}\\,Q_{0}) \\oplus Q_{2},\\quad\nQ_{3}^{+} = 0 \\oplus Q_{3} = Q_{3}.\n$$\nHence $Q_{3}$ never changes. Since the counter is initialized to $Q_{3}Q_{2}Q_{1}Q_{0} = 0000$, it follows that $Q_{3}=0$ for all subsequent times. The lower three bits implement a standard 3-bit synchronous up-counter because $T_{0}=1$, $T_{1}=Q_{0}$, and $T_{2}=Q_{1}Q_{0}$.\n\nStarting from $Q_{3}Q_{2}Q_{1}Q_{0} = 0000$ and applying the update equations on each rising edge:\n- From $0000$: $Q_{0}$ toggles to $1$, $Q_{1}$ and $Q_{2}$ hold, $Q_{3}$ holds $\\Rightarrow 0001$.\n- From $0001$: $Q_{0}$ toggles to $0$; $Q_{1}$ toggles because $Q_{0}=1$; $Q_{2}$ holds because $Q_{1}Q_{0}=0$; $Q_{3}$ holds $\\Rightarrow 0010$.\n- From $0010$: $Q_{0}$ toggles to $1$; $Q_{1}$ holds because $Q_{0}=0$; $Q_{2}$ holds because $Q_{1}Q_{0}=0$; $Q_{3}$ holds $\\Rightarrow 0011$.\n- From $0011$: $Q_{0}$ toggles to $0$; $Q_{1}$ toggles because $Q_{0}=1$; $Q_{2}$ toggles because $Q_{1}Q_{0}=1$; $Q_{3}$ holds $\\Rightarrow 0100$.\n\nContinuing in this manner, the lower three bits count upward through $0101$, $0110$, $0111$, and then wrap to $0000$ on the next edge (since $Q_{0}$, $Q_{1}$, and $Q_{2}$ all toggle when at $0111$), while $Q_{3}$ remains $0$ throughout. Thus the 4-bit state cycles through $0000, 0001, \\dots, 0111$ repeatedly, corresponding to decimal values\n$$\n0, 1, 2, 3, 4, 5, 6, 7 \\text{ (repeating)}.\n$$\nThis matches option A.", "answer": "$$\\boxed{A}$$", "id": "1965398"}]}