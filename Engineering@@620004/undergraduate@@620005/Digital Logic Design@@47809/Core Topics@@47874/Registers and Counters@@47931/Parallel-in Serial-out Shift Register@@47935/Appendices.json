{"hands_on_practices": [{"introduction": "To truly understand how a Parallel-In, Serial-Out (PISO) register works, we must first look at its most fundamental component: a single bit-slice. This exercise challenges you to design the essential control logic for one stage from scratch, using only basic gates. By deriving the Boolean expression that governs whether a flip-flop loads new parallel data or shifts data from its neighbor, you will uncover the simple yet elegant principle at the heart of the PISO register's functionality.", "problem": "Consider a single bit-slice, stage $i$, of a generic Parallel-In, Serial-Out (PISO) shift register. This stage is built around a D-type flip-flop and its associated input logic. The behavior of this stage is governed by a single mode control signal, $M$.\n\nThe functionality is defined as follows:\n- When $M=1$, the register is in 'load' mode. On the next active clock edge, the flip-flop should capture the value from a parallel data input line, $P_i$.\n- When $M=0$, the register is in 'shift' mode. On the next active clock edge, the flip-flop should capture the value from a serial data input line, $S_i$. The serial input $S_i$ is connected to the output of the previous stage's flip-flop.\n\nYour task is to design the combinational logic circuit that provides the correct input signal, $D_i$, to the D-type flip-flop for stage $i$. This logic must be designed from first principles, using only elementary AND, OR, and NOT gates. The use of any pre-packaged logic components like multiplexers (MUX) or decoders is explicitly forbidden.\n\nDetermine the Boolean expression for the flip-flop input $D_i$ in terms of the inputs $P_i$, $S_i$, and $M$. In your final expression, you may use standard Boolean algebra notation where multiplication (e.g., $A \\cdot B$) represents AND, addition (e.g., $A+B$) represents OR, and an overbar (e.g., $\\overline{A}$) represents NOT.", "solution": "We require a Boolean function $D_i(M, P_i, S_i)$ such that:\n- If $M=1$ (load mode), then $D_i=P_i$.\n- If $M=0$ (shift mode), then $D_i=S_i$.\n\nUsing Boolean conditioning (Shannon expansion) on $M$, any function $F(M,\\dots)$ can be written as $F=\\overline{M}\\cdot F|_{M=0}+M\\cdot F|_{M=1}$. Applying this to $D_i$ with $D_i|_{M=0}=S_i$ and $D_i|_{M=1}=P_i$ gives\n$$\nD_{i}=\\overline{M}\\cdot S_{i}+M\\cdot P_{i}.\n$$\nThis expression uses only elementary gates: one NOT to generate $\\overline{M}$, two AND gates to form $M\\cdot P_{i}$ and $\\overline{M}\\cdot S_{i}$, and one OR gate to sum them.\n\nVerification:\n- For $M=1$: $D_i=1\\cdot P_i+0\\cdot S_i=P_i$.\n- For $M=0$: $D_i=0\\cdot P_i+1\\cdot S_i=S_i$.\n\nHence the required combinational logic is\n$$\nD_{i}=(M\\cdot P_{i})+(\\overline{M}\\cdot S_{i}).\n$$", "answer": "$$\\boxed{(M\\cdot P_{i})+(\\overline{M}\\cdot S_{i})}$$", "id": "1950675"}, {"introduction": "With an understanding of how a single stage operates, we can now scale up to a complete multi-bit register and observe its primary function: converting parallel data into a serial stream. This practice problem asks you to trace the state of an 8-bit PISO register as it is first loaded with a specific data word and then subsequently shifts that data out. This simulation is a crucial skill for verifying the behavior of digital systems and predicting their output.", "problem": "A simple data serialization circuit utilizes an 8-bit Parallel-In, Serial-Out (PISO) shift register. This register consists of eight D-type flip-flops, labeled from $Q_7$ for the Most Significant Bit (MSB) to $Q_0$ for the Least Significant Bit (LSB).\n\nThe operation proceeds in two phases. First, in the 'load' phase, the 8-bit hexadecimal data word `$B4` is loaded in parallel into the register. This means the MSB of the data word is stored in $Q_7$, the next bit in $Q_6$, and so on, down to the LSB which is stored in $Q_0$.\n\nSecond, the register's mode is switched to 'shift'. On the rising edge of each subsequent clock pulse, all bits in the register are shifted one position to the right (i.e., the value from $Q_n$ moves to $Q_{n-1}$). The serial data input feeding $Q_7$ is held at logic 0 during this entire shift phase. The serial output of the circuit is taken from the $Q_0$ pin.\n\nDetermine the sequence of the first 8 bits that appear at the serial output during the shift phase, starting with the output generated by the first clock pulse.\n\nWhich of the following represents the correct 8-bit serial output sequence?\n\nA. `00101101`\n\nB. `10110100`\n\nC. `01001011`\n\nD. `11010010`\n\nE. `01000011`", "solution": "Interpret the hexadecimal word $B4$ as an 8-bit binary word with the Most Significant Bit (MSB) at $Q_{7}$ and the Least Significant Bit (LSB) at $Q_{0}$. Since $B=1011$ and $4=0100$, the initial contents after the load phase are:\n$$\n[Q_{7},Q_{6},Q_{5},Q_{4},Q_{3},Q_{2},Q_{1},Q_{0}] = [1,0,1,1,0,1,0,0].\n$$\nDuring the shift phase, on each rising clock edge, the register shifts right with zero serial-in:\n$$\nQ_{n-1}^{+} = Q_{n}, \\quad Q_{7}^{+} = 0,\n$$\nwhere the superscript $+$ denotes the value just after the clock edge.\n\nThe serial output is taken from $Q_{0}$. The bit “generated by” a given clock pulse is the bit shifted out at that edge, i.e., the content of $Q_{0}$ just before the shift. Therefore, the first $8$ output bits are exactly the initially loaded bits from LSB to MSB:\n$$\nb_{k} = Q_{k-1}^{(0)} \\quad \\text{for } k=1,2,\\dots,8,\n$$\nwhere $Q^{(0)}$ denotes the values immediately after the load phase.\n\nUsing the initial state $[1,0,1,1,0,1,0,0]$, we obtain:\n$$\n[b_{1},b_{2},b_{3},b_{4},b_{5},b_{6},b_{7},b_{8}] = [Q_{0},Q_{1},Q_{2},Q_{3},Q_{4},Q_{5},Q_{6},Q_{7}] = [0,0,1,0,1,1,0,1].\n$$\nThus, the 8-bit serial output sequence is $00101101$, which corresponds to option A.", "answer": "$$\\boxed{A}$$", "id": "1950743"}, {"introduction": "A key skill for any digital designer is the ability to troubleshoot and diagnose problems when a circuit does not behave as expected. This problem presents a realistic scenario where an 8-bit PISO register produces an incorrect serial output. By reasoning backward from the erroneous output, you will apply your knowledge of the register's internal data paths to pinpoint the exact location of a \"stuck-at\" fault, a common failure mode in digital electronics.", "problem": "An 8-bit Parallel-In, Serial-Out (PISO) shift register is constructed using eight D-type flip-flops, labeled $DFF_7$ through $DFF_0$ from left to right. The serial output, $S_{out}$, is taken from the output of the rightmost flip-flop, $Q_0$.\n\nFor each flip-flop $DFF_i$ (where $i$ ranges from 0 to 7), its D-input, $D_i$, is connected to the output of a 2-to-1 multiplexer. This multiplexer selects between two sources based on a single control line, `SHIFT/LOAD'`:\n- When `SHIFT/LOAD'`$= 0$ (Parallel Load mode), the multiplexer selects the parallel data input bit $P_i$.\n- When `SHIFT/LOAD'`$= 1$ (Shift mode), the multiplexer selects the output of the adjacent flip-flop to the left, $Q_{i+1}$. For the leftmost flip-flop, $DFF_7$, this shift-in input is permanently grounded (logic 0).\n\nThe register is intended for the following operation:\n1. The `SHIFT/LOAD'` signal is set to 0. The parallel data word $P = (P_7, P_6, P_5, P_4, P_3, P_2, P_1, P_0) = (1, 1, 1, 1, 1, 1, 1, 1)$ is applied to the inputs. A single clock pulse is applied to load this data.\n2. The `SHIFT/LOAD'` signal is set to 1. A sequence of eight clock pulses is then applied to shift the data out serially. The serial output stream is read from $S_{out}$ after each clock pulse.\n\nAfter performing this operation, the observed 8-bit serial output stream, from first bit out to last, is `11110111`. A single stuck-at-0 fault is known to exist somewhere in the circuit. Based on this observation, which of the following is the most plausible fault?\n\nA. The D-input of flip-flop $DFF_3$ ($D_3$) is stuck-at-0.\n\nB. The output of flip-flop $DFF_4$ ($Q_4$) is stuck-at-0.\n\nC. The parallel data input pin for flip-flop $DFF_4$ ($P_4$) is stuck-at-0.\n\nD. The master `SHIFT/LOAD'` control line is stuck-at-0.\n\nE. The output of flip-flop $DFF_3$ ($Q_3$) is stuck-at-0.", "solution": "Let the register be right-shifting with $Q_{i}$ feeding $Q_{i-1}$ in shift mode and the serial output taken at $S_{out}=Q_{0}$. After a parallel load with $P=(P_{7},\\dots,P_{0})$, the content is $Q_{i}(0)=P_{i}$.\n\nWhen clocking in shift mode and observing the bit that shifts out on each clock (the standard PISO timing), the $k$-th observed serial bit equals the content that was in $Q_{k-1}$ immediately after the parallel load. Thus, for an ideal, fault-free register,\n$$\nb_{k}=P_{k-1}\\quad\\text{for }k=1,2,\\dots,8.\n$$\nWith $P_{i}=1$ for all $i$, a good register would yield $b_{1}\\dots b_{8}=11111111$.\n\nThe observed stream is $11110111$, which means $b_{1}=P_{0}=1$, $b_{2}=P_{1}=1$, $b_{3}=P_{2}=1$, $b_{4}=P_{3}=1$, $b_{5}=P_{4}=0$, $b_{6}=P_{5}=1$, $b_{7}=P_{6}=1$, $b_{8}=P_{7}=1$. Therefore, the load produced $Q_{4}(0)=P_{4}=0$ while all other loaded bits were $1$.\n\nNow test each single stuck-at-0 fault against this observation:\n\n1) Master control stuck-at-0 (option D): the device would remain in load mode; every clock would reload $P$, so $Q_{0}$ would stay $1$ at every read, yielding $11111111$, contradicting observation.\n\n2) $D_{3}$ stuck-at-0 (option A): during load, $Q_{3}(0)=0$, so the fourth bit in the stream would be $0$ (i.e., $1110\\ldots$), not the fifth. Moreover, during shifting, zeros would further propagate right, introducing additional zeros, inconsistent with $11110111$.\n\n3) $Q_{3}$ stuck-at-0 (option E): forces $Q_{3}(0)=0$ and, in shift mode, continually injects zeros to the right, so an early zero and additional trailing zeros would appear, not the single zero at the fifth position observed.\n\n4) $Q_{4}$ stuck-at-0 (option B): although this makes $Q_{4}(0)=0$ so the fifth bit would be $0$, the stuck output at $Q_{4}$ also breaks the shift path to the right; explicitly, in shift mode $Q_{3}$ receives $Q_{4}=0$ on every clock, so bits corresponding to $P_{5},P_{6},P_{7}$ cannot propagate to $Q_{0}$. A stepwise simulation shows the output becomes $1,1,1,0,0,0,0,0$, so bits $6,7,8$ would be $0$, contradicting the observed $1,1,1$.\n\n5) $P_{4}$ stuck-at-0 (option C): during parallel load this alone makes $Q_{4}(0)=0$ with all other $Q_{i}(0)=1$. The shift path remains intact, so the serial stream equals the loaded word from $Q_{0}$ to $Q_{7}$:\n$$\nb_{1}\\dots b_{8}=(Q_{0}(0),Q_{1}(0),Q_{2}(0),Q_{3}(0),Q_{4}(0),Q_{5}(0),Q_{6}(0),Q_{7}(0))=11110111,\n$$\nwhich matches exactly.\n\nTherefore, the only single stuck-at-0 fault consistent with the observation is the parallel input $P_{4}$ stuck-at-0.", "answer": "$$\\boxed{C}$$", "id": "1950684"}]}