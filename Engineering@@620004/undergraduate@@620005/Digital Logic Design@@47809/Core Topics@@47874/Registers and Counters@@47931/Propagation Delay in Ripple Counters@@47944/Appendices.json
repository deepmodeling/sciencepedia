{"hands_on_practices": [{"introduction": "The defining characteristic of an asynchronous ripple counter is its structural simplicity, but this design choice introduces a critical performance limitation. This first practice explores the fundamental trade-off: the accumulation of propagation delay across the stages of the counter. By calculating the total time required for the counter to settle into a stable state, you will master the essential skill of determining the maximum reliable operating speed for any cascaded digital logic circuit [@problem_id:1955756]. This forms the bedrock of timing analysis in asynchronous systems.", "problem": "A digital control system relies on a 12-bit asynchronous binary counter, commonly known as a ripple counter, for event sequencing. The counter is constructed by cascading toggle flip-flops, where the output of one flip-flop serves as the clock input for the subsequent one. The manufacturer specifies that each individual flip-flop has a clock-to-output propagation delay of 15 nanoseconds (ns). To ensure the integrity of the system's operations, it is crucial to determine the maximum time the counter takes to settle to a stable value after a clock pulse is applied to its first stage. This duration is known as the total worst-case propagation delay.\n\nCalculate the total worst-case propagation delay for this 12-bit ripple counter. Express your answer in nanoseconds (ns).", "solution": "A ripple (asynchronous) counter is formed by cascading toggle flip-flops so that the output of each stage serves as the clock input to the next stage. If each flip-flop has a clock-to-output propagation delay $t_{pd}$, then a change at the first stage must propagate through each subsequent stage sequentially. The worst-case settling time occurs when the change ripples through all $N$ stages (e.g., a transition that causes every flip-flop to toggle).\n\nTherefore, the total worst-case propagation delay is the sum of the per-stage delays:\n$$\nT_{\\text{wc}} = N \\cdot t_{pd}.\n$$\nFor a $12$-bit ripple counter, $N = 12$, and with each flip-flop having $t_{pd} = 15 \\text{ ns}$,\n$$\nT_{\\text{wc}} = 12 \\times 15 \\text{ ns} = 180 \\text{ ns}.\n$$\nHence, the maximum time for the counter to settle after a clock pulse to the first stage is $180 \\text{ ns}$.", "answer": "$$\\boxed{180}$$", "id": "1955756"}, {"introduction": "In real-world scenarios, components are rarely perfectly identical, which presents interesting design choices. This thought experiment [@problem_id:1955743] challenges a common intuition about optimizing a circuit built from non-uniform parts: if you have flip-flops of varying speeds, does their placement in the ripple chain matter? Answering this question solidifies your understanding of worst-case timing analysis, proving that the maximum clock frequency is constrained by the sum of delays along the entire ripple path, a value independent of the order of the components.", "problem": "An apprentice digital systems designer is tasked with building a 4-bit asynchronous binary up-counter, commonly known as a ripple counter. They have a set of four individual T-type flip-flops available for the project. Upon testing, these flip-flops are found to have different clock-to-output propagation delays ($t_{pd}$). The measured delays are 8 nanoseconds (ns), 10 ns, 12 ns, and 15 ns. For the purpose of this problem, you may assume that the setup and hold times for all flip-flops are negligible.\n\nThe counter is to be constructed in the standard ripple configuration: the main system clock signal is connected only to the clock input of the first flip-flop, which represents the Least Significant Bit (LSB). The output of each subsequent flip-flop is then used as the clock input for the next flip-flop in the chain, with the final flip-flop in the chain representing the Most Significant Bit (MSB).\n\nThe apprentice is considering two different arrangements for the flip-flops:\n- **Configuration X:** The flip-flops are arranged in order of increasing propagation delay, with the 8 ns flip-flop at the LSB stage and the 15 ns flip-flop at the MSB stage.\n- **Configuration Y:** The flip-flops are arranged in order of decreasing propagation delay, with the 15 ns flip-flop at the LSB stage and the 8 ns flip-flop at the MSB stage.\n\nTo ensure the counter operates correctly under all conditions, the period of the input clock must be long enough to allow a state change to propagate through the entire counter. Determine the maximum possible frequency of the input clock for which the 4-bit counter will operate reliably. Express your answer in megahertz (MHz), rounded to three significant figures.", "solution": "Let the four T-type flip-flops along the ripple chain have clock-to-output propagation delays labeled, in stage order from LSB to MSB, as $t_{1}, t_{2}, t_{3}, t_{4}$. In a ripple (asynchronous) up-counter with $T=1$ for all stages and negligible setup/hold times, the worst-case state change occurs when all stages must toggle, which happens when the present count has all lower-order bits equal to $1$.\n\nOn a system clock active edge:\n- The LSB output toggles after a delay $t_{1}$.\n- That transition serves as the clock edge for the second stage, whose output then toggles after an additional delay $t_{2}$, i.e., at $t_{1}+t_{2}$ relative to the system clock edge.\n- Similarly, the third stage toggles at $t_{1}+t_{2}+t_{3}$.\n- The MSB (fourth stage) toggles at $t_{1}+t_{2}+t_{3}+t_{4}$.\n\nTo guarantee correct operation for all input states, the system clock period $T_{\\text{clk}}$ must satisfy\n$$\nT_{\\text{clk}} \\geq t_{1}+t_{2}+t_{3}+t_{4}.\n$$\nBecause this constraint depends only on the sum of the stage delays, any permutation of the four given delays yields the same bound. Therefore, both Configuration X (increasing delays) and Configuration Y (decreasing delays) have the same required minimum clock period\n$$\nT_{\\min} = 8\\ \\text{ns} + 10\\ \\text{ns} + 12\\ \\text{ns} + 15\\ \\text{ns} = 45\\ \\text{ns}.\n$$\nThe maximum reliable input clock frequency is\n$$\nf_{\\max} = \\frac{1}{T_{\\min}} = \\frac{1}{45 \\times 10^{-9}}\\ \\text{Hz} = \\frac{10^{3}}{45}\\ \\text{MHz} \\approx 22.2\\ \\text{MHz},\n$$\nrounded to three significant figures.", "answer": "$$\\boxed{22.2}$$", "id": "1955743"}, {"introduction": "Understanding propagation delay is not just about calculating a maximum frequency; it is about predicting and preventing system-level failures. This final practice [@problem_id:1909973] bridges theory and application by tackling the hazardous \"glitches\" that ripple delays can cause in decoding logic. You will first analyze why these transient, erroneous signals appear during state transitions and then engineer a robust, \"glitch-free\" decoder using a classic design technique known as strobing, learning a vital method for building reliable digital systems.", "problem": "An asynchronous (ripple) 4-bit binary up-counter is constructed using four negative-edge-triggered T-type flip-flops. The outputs of the flip-flops are denoted as $Q_3, Q_2, Q_1, Q_0$, where $Q_3$ is the most significant bit (MSB) and $Q_0$ is the least significant bit (LSB). The external clock signal is connected only to the clock input of the flip-flop corresponding to $Q_0$. For all other flip-flops, the clock input is driven by the output of the preceding, less significant flip-flop (e.g., the output $Q_i$ clocks the flip-flop for $Q_{i+1}$).\n\nYou are tasked with designing a purely combinational logic circuit that takes the four counter outputs as inputs and produces a single output, $Y$. The circuit's output $Y$ must be high (logic 1) if and only if the decimal value of the counter state $N$ (represented by $Q_3Q_2Q_1Q_0$) is in the range $5 \\le N \\le 11$, inclusive.\n\nA critical design constraint is that the decoding circuit must be \"glitch-free.\" Spurious short pulses, or glitches, can occur at the output of a standard decoder due to the propagation delays inherent in the ripple counter, especially during transitions that involve multiple bits changing state. To satisfy this constraint, your design must employ a strobing technique. Specifically, you must use one of the counter's own outputs ($Q_3, Q_2, Q_1,$ or $Q_0$) as a strobing or selecting signal to ensure the output $Y$ is stable and correct during all state transitions.\n\nProvide the final, simplified Boolean expression for the output $Y$ in a sum-of-products form.", "solution": "The goal is to design a glitch-free combinational logic circuit with output $Y$ that is high for counter states from 5 to 11, inclusive. The counter is a 4-bit asynchronous up-counter with outputs $Q_3Q_2Q_1Q_0$.\n\nFirst, let's determine the required logic function for $Y$ by identifying the minterms for which the output should be 1. The decimal values 5 through 11 correspond to the following binary states:\n- 5: 0101\n- 6: 0110\n- 7: 0111\n- 8: 1000\n- 9: 1001\n- 10: 1010\n- 11: 1011\n\nWe can represent this function using a Karnaugh map (K-map) for $Y(Q_3, Q_2, Q_1, Q_0)$:\n\n```\n     Q1Q0\nQ3Q2  00  01  11  10\n  00   0   0   0   0\n  01   0   1   1   1\n  11   0   0   0   0\n  10   1   1   1   1\n```\n\nA standard minimization of this K-map leads to the following sum-of-products expression:\nThe group of four '1's in the row $Q_3Q_2=10$ is covered by the term $Q_3\\overline{Q_2}$.\nThe group of two '1's at $Q_3Q_2Q_1Q_0 = 0111$ and $0110$ is covered by $\\overline{Q_3}Q_2Q_1$.\nThe group of two '1's at $Q_3Q_2Q_1Q_0 = 0101$ and $0111$ is covered by $\\overline{Q_3}Q_2Q_0$.\n\nCombining these, the minimal sum-of-products expression is:\n$Y_{raw} = Q_3\\overline{Q_2} + \\overline{Q_3}Q_2Q_1 + \\overline{Q_3}Q_2Q_0$\nThis can also be written as $Y_{raw} = Q_3\\overline{Q_2} + \\overline{Q_3}Q_2(Q_1+Q_0)$.\n\nNow, we must analyze this expression for glitches in the context of a ripple counter. The most significant glitches in ripple counters occur during transitions that cause a \"ripple\" through many stages. A prime example is the transition from 7 (0111) to 8 (1000).\n\nIn a negative-edge-triggered ripple counter, the sequence of events is as follows (assuming a propagation delay $t_{pd}$ for each flip-flop):\n1.  Initial state: 7 (0111). $Y_{raw}$ evaluates to 1.\n2.  The external clock has a falling edge. $Q_0$ toggles from 1 to 0. The counter state becomes 0110 after $t_{pd}$.\n    - Transient state 0110: $Y_{raw}$ evaluates to 1.\n3.  The falling edge of $Q_0$ causes $Q_1$ to toggle from 1 to 0. The counter state becomes 0100 after $2t_{pd}$.\n    - Transient state 0100: $Y_{raw}$ evaluates to 0. **This is a glitch.** The output should not have changed.\n4.  The falling edge of $Q_1$ causes $Q_2$ to toggle from 1 to 0. The counter state becomes 0000 after $3t_{pd}$.\n    - Transient state 0000: $Y_{raw}$ evaluates to 0. The glitch continues.\n5.  The falling edge of $Q_2$ causes $Q_3$ to toggle from 0 to 1. The counter state becomes 1000 after $4t_{pd}$.\n    - Final state 8 (1000): $Y_{raw}$ evaluates to 1.\n\nThe output sequence is $1 \\to 1 \\to 0 \\to 0 \\to 1$, which includes a spurious low pulse (a glitch). This is a function hazard and cannot be fixed simply by adding redundant terms to the K-map.\n\nThe problem requires using a counter output as a strobe to eliminate such glitches. The principle of strobing in this context is to partition the logic based on the state of the highest-order bit that changes during a problematic transition. The range [5, 11] crosses the boundary between 7 and 8. The bit that defines this boundary is the MSB, $Q_3$. Therefore, $Q_3$ is the correct choice for the strobing/selecting signal.\n\nWe design the logic by considering two separate cases based on the value of $Q_3$:\n\nCase 1: $Q_3 = 0$. The counter value is in the range [0, 7]. We want the decoder to be active for states [5, 6, 7]. The logic for this sub-problem, looking only at $Q_2, Q_1, Q_0$, is required for states 101, 110, and 111. All these states have $Q_2=1$. The logic simplified for $Q_1, Q_0$ is $Q_1+Q_0$. So, for the $\\overline{Q_3}$ part of the domain, the logic is $\\overline{Q_3}Q_2(Q_1+Q_0)$. This sub-decoder is glitch-free for transitions within its active range (e.g., 5-6, 6-7).\n\nCase 2: $Q_3 = 1$. The counter value is in the range [8, 15]. We want the decoder to be active for states [8, 9, 10, 11]. For all these states, the bit pattern starts with $10\\dots$. That is, $Q_3=1$ and $Q_2=0$. The lower bits $Q_1, Q_0$ take on all four possible values (00, 01, 10, 11), so they don't constrain the logic. The condition is simply $Q_3\\overline{Q_2}$. This sub-decoder is also glitch-free for transitions within its active range.\n\nThe final logic is the OR of the logic from these two cases:\n$Y = \\overline{Q_3}Q_2(Q_1+Q_0) + Q_3\\overline{Q_2}$\n\nThis design structure is the standard method for creating a glitch-free decoder for a range that crosses a major power-of-two boundary in a ripple counter. The logic is partitioned by the selecting bit ($Q_3$), which is the last bit to settle during the critical 7-to-8 transition. By ensuring that the two main terms of the expression are controlled by $\\overline{Q_3}$ and $Q_3$ respectively, we are effectively using $Q_3$ as a signal to select which part of the decoder logic is active, thus preventing the race conditions between changing bits in different terms of the expression from causing a glitch.\n\nExpanding the expression to the full sum-of-products form:\n$Y = \\overline{Q_3}Q_2Q_1 + \\overline{Q_3}Q_2Q_0 + Q_3\\overline{Q_2}$\nThis is the final expression for the glitch-free decoding circuit.", "answer": "$$\\boxed{Q_3\\overline{Q_2} + \\overline{Q_3}Q_2Q_1 + \\overline{Q_3}Q_2Q_0}$$", "id": "1909973"}]}