{"hands_on_practices": [{"introduction": "To truly grasp how a BCD ripple counter operates, it is essential to trace its state changes pulse by pulse. This first exercise challenges you to do just that, starting from a non-zero initial state. By manually tracking how the output of one flip-flop triggers the next, you will gain a concrete understanding of the asynchronous 'ripple' effect that defines this type of counter. [@problem_id:1912256]", "problem": "A 4-bit asynchronous Binary Coded Decimal (BCD) ripple counter is constructed using negative edge-triggered J-K flip-flops, where the J and K inputs of all flip-flops are permanently connected to a high logic level. The output of the counter is represented by the state of the flip-flops $Q_3Q_2Q_1Q_0$, where $Q_3$ is the most significant bit (MSB) and $Q_0$ is the least significant bit (LSB). The counter is designed to count from 0000 (decimal 0) to 1001 (decimal 9) and then reset to 0000 on the next clock pulse.\n\nInitially, the counter is asynchronously preset to the binary state corresponding to the decimal number 4. A sequence of clock pulses is then applied to the clock input of the LSB flip-flop (the one corresponding to output $Q_0$).\n\nWhat is the binary state $Q_3Q_2Q_1Q_0$ of the counter after exactly 3 subsequent clock pulses have occurred?\n\nA. 0111\n\nB. 0110\n\nC. 1000\n\nD. 0011\n\nE. 0101", "solution": "The problem asks for the state of a BCD ripple counter after 3 clock pulses, starting from a preset state of 4.\n\nFirst, let's establish the initial state of the counter. The counter is preset to the decimal number 4. In a 4-bit binary representation ($Q_3Q_2Q_1Q_0$), this corresponds to:\nInitial State: $Q_3Q_2Q_1Q_0 = 0100$.\n\nThe counter is an asynchronous (ripple) counter built with negative edge-triggered J-K flip-flops. Since the J and K inputs are tied high ($J=1, K=1$), each flip-flop is configured to toggle its state upon receiving a negative edge at its clock input.\n\nIn a ripple counter, the external clock is applied only to the first flip-flop (FF0, corresponding to the LSB $Q_0$). The clock input for each subsequent flip-flop (FFi) is driven by the output of the preceding flip-flop ($Q_{i-1}$). This means FF1 is clocked by $Q_0$, FF2 is clocked by $Q_1$, and FF3 is clocked by $Q_2$. Since the flip-flops are negative edge-triggered, a flip-flop toggles only when its clock input transitions from a high state (1) to a low state (0).\n\nLet's trace the state of the counter for each of the 3 clock pulses.\n\n**Initial State:** $Q_3=0, Q_2=1, Q_1=0, Q_0=0$.\n\n**After the 1st clock pulse:**\n1.  The external clock applies a negative edge to FF0.\n2.  $Q_0$ toggles from its current state of 0 to 1.\n3.  The output $Q_0$ transitions from 0 to 1. This is a rising edge, not a falling (negative) edge. Therefore, it does not trigger FF1.\n4.  Since FF1 does not toggle, $Q_1$ remains 0. Consequently, FF2 is not triggered, and $Q_2$ remains 1. Similarly, FF3 is not triggered, and $Q_3$ remains 0.\n5.  The new state of the counter is $Q_3Q_2Q_1Q_0 = 0101$. This corresponds to decimal 5.\n\n**After the 2nd clock pulse:**\n1.  The external clock applies another negative edge to FF0.\n2.  $Q_0$ toggles from its current state of 1 to 0.\n3.  The output $Q_0$ transitions from 1 to 0. This is a falling (negative) edge, which serves as the clock signal for FF1.\n4.  FF1 receives a negative edge from $Q_0$ and toggles. $Q_1$ changes from 0 to 1.\n5.  The output $Q_1$ transitions from 0 to 1. This is a rising edge, so it does not trigger FF2. $Q_2$ remains 1.\n6.  Since $Q_2$ did not change, FF3 is not triggered. $Q_3$ remains 0.\n7.  The new state of the counter is $Q_3Q_2Q_1Q_0 = 0110$. This corresponds to decimal 6.\n\n**After the 3rd clock pulse:**\n1.  The external clock applies a third negative edge to FF0.\n2.  $Q_0$ toggles from its current state of 0 to 1.\n3.  The output $Q_0$ transitions from 0 to 1. This is a rising edge, so it does not trigger FF1.\n4.  Since FF1 does not toggle, $Q_1$ remains 1. Consequently, FF2 is not triggered, and $Q_2$ remains 1. Similarly, FF3 is not triggered, and $Q_3$ remains 0.\n5.  The new state of the counter is $Q_3Q_2Q_1Q_0 = 0111$. This corresponds to decimal 7.\n\nThe counting sequence is 4 -> 5 -> 6 -> 7. The BCD property, which involves resetting from a count greater than 9, is not activated in this range. The counter simply behaves as a standard binary up-counter.\n\nThe final state after 3 clock pulses is 0111. This corresponds to option A.", "answer": "$$\\boxed{A}$$", "id": "1912256"}, {"introduction": "While tracing individual pulses is crucial, understanding the counter's overall behavior over many cycles is equally important for practical applications. This problem abstracts away the low-level ripple action to focus on the BCD counter's primary function: modulo-10 counting. You will determine the final state after a large number of pulses, reinforcing the concept that a BCD counter effectively calculates the remainder when the number of pulses is divided by 10. [@problem_id:1912261]", "problem": "A digital circuit designed for a single-digit counting display utilizes a 4-bit asynchronous counter. This counter is specifically configured to function as a Binary-Coded Decimal (BCD) counter, which means it sequences through the binary states representing decimal digits 0 through 9. Upon receiving the clock pulse that would advance its count from 9, the counter logic forces it to reset to 0.\n\nThe outputs of the four flip-flops that constitute the counter are denoted as $Q_D$, $Q_C$, $Q_B$, and $Q_A$, where $Q_A$ represents the least significant bit (LSB). The counter is initialized to a cleared state, where all outputs ($Q_D, Q_C, Q_B, Q_A$) are at logic 0.\n\nIf the counter's clock input receives a sequence of exactly 23 pulses, what is the final binary state of the counter, represented as the 4-bit string $Q_D Q_C Q_B Q_A$?\n\nA. 0011\n\nB. 0111\n\nC. 0010\n\nD. 1001\n\nE. 0101", "solution": "A BCD counter cycles through the decimal digits from 0 to 9 and then resets to 0 on the next clock pulse. Thus, starting from the cleared state representing 0, the counter implements modulo-10 counting. Therefore, after $N$ pulses, the decimal value displayed is the residue of $N$ modulo $10$:\n$$\nN \\equiv r \\pmod{10}.\n$$\nWith $N=23$, compute the residue via Euclidean division:\n$$\n23 = 2 \\times 10 + 3 \\quad \\Rightarrow \\quad 23 \\bmod 10 = 3.\n$$\nHence, after $23$ pulses the counter shows decimal $3$. In BCD, the four outputs satisfy\n$$\nd = 8Q_{D} + 4Q_{C} + 2Q_{B} + Q_{A}, \\quad Q_{D},Q_{C},Q_{B},Q_{A} \\in \\{0,1\\}.\n$$\nSetting $d=3$ gives\n$$\n3 = 8Q_{D} + 4Q_{C} + 2Q_{B} + Q_{A} \\;\\Rightarrow\\; Q_{D}=0,\\; Q_{C}=0,\\; Q_{B}=1,\\; Q_{A}=1,\n$$\nso the 4-bit state is $0011$, which corresponds to option A.", "answer": "$$\\boxed{A}$$", "id": "1912261"}, {"introduction": "A deep understanding of a circuit includes the ability to predict its behavior under fault conditions. This advanced exercise presents a hypothetical scenario where the reset logic of a BCD counter is compromised due to a 'stuck-at-1' fault. By analyzing how this fault alters the reset condition, you will practice critical troubleshooting skills and see firsthand how reset circuitry directly defines a counter's modulus. [@problem_id:1909933]", "problem": "An asynchronous 4-bit binary ripple up-counter is constructed using four negative-edge-triggered J-K flip-flops. All J and K inputs are permanently tied to a logic '1' to configure them as toggle (T-type) flip-flops. The outputs of the flip-flops are denoted as $Q_D, Q_C, Q_B, Q_A$, where $Q_A$ represents the Least Significant Bit (LSB) and $Q_D$ represents the Most Significant Bit (MSB).\n\nTo function as a Binary-Coded Decimal (BCD) counter, which has a modulus of 10, the counter must be reset when it reaches the count of ten ($1010_2$). This is accomplished using a single 2-input NAND gate. The output of this NAND gate is connected to the asynchronous, active-low CLEAR inputs of all four flip-flops. In a correctly functioning BCD counter, the two inputs of the NAND gate are connected to the specific flip-flop outputs that are at logic '1' during the state $1010_2$.\n\nNow, consider a scenario where a fault occurs in the circuit. The NAND gate input that is supposed to be connected to the output $Q_B$ is permanently stuck-at-1, meaning it is held at a constant high logic level regardless of the state of $Q_B$. The other NAND gate input, which is connected to $Q_D$, remains fully functional.\n\nDetermine the new counting modulus of this faulty counter. The modulus of a counter is defined as the number of unique stable states it cycles through.", "solution": "All four J-K flip-flops have $J=K=1$, so each behaves as a T flip-flop and toggles on every negative clock edge:\n$$Q^{+}=\\overline{Q} \\quad \\text{on each negative clock edge at its clock input.}$$\nIn a ripple up-counter, $Q_{A}$ is clocked by the external clock, $Q_{B}$ by $Q_{A}$, $Q_{C}$ by $Q_{B}$, and $Q_{D}$ by $Q_{C}$, all on negative edges.\n\nIn the intended BCD design, a 2-input NAND detects the state $1010_{2}$ by wiring its inputs to $Q_{D}$ and $Q_{B}$, so it asserts the asynchronous active-low clear when $Q_{D}=Q_{B}=1$.\n\nWith the fault, the NAND input that should be connected to $Q_{B}$ is stuck at logic $1$. Let the NAND inputs be $X$ and $Q_{D}$, with $X=1$. The NAND output is then\n$$Y=\\overline{X \\cdot Q_{D}}=\\overline{1 \\cdot Q_{D}}=\\overline{Q_{D}}.$$\nThis output $Y$ drives the active-low CLEAR of all flip-flops, so the asynchronous clear is asserted exactly when $Q_{D}=1$.\n\nTherefore, any time $Q_{D}$ attempts to become $1$, the clear is immediately asserted and forces all outputs to $0$. Consequently, no stable state with $Q_{D}=1$ can persist. The counter can only exhibit stable states with $Q_{D}=0$, i.e., exactly the binary states from $0000_{2}$ through $0111_{2}$.\n\nStarting from $0000_{2}$, the normal ripple progression is\n$$0000 \\to 0001 \\to 0010 \\to 0011 \\to 0100 \\to 0101 \\to 0110 \\to 0111.$$\nThe next normal state would be $1000$, which requires $Q_{D}$ to toggle to $1$ as $Q_{C}$ makes a $1 \\to 0$ transition. At that moment, because $Y=\\overline{Q_{D}}$, the asynchronous clear is asserted and forces\n$$Q_{D}Q_{C}Q_{B}Q_{A}=0000,$$\nrestarting the sequence. Thus, the counter cycles through exactly $8$ unique stable states.\n\nTherefore, the new counting modulus is $8$.", "answer": "$$\\boxed{8}$$", "id": "1909933"}]}