{"hands_on_practices": [{"introduction": "The first step in many digital design projects is to determine the scale of the required components based on the application's specifications. This exercise provides a practical scenario where you must calculate the necessary size of a cascaded counter system. By working through this problem, you will translate high-level requirements, such as a time interval and clock frequency, into a concrete number of hardware components, reinforcing the fundamental relationship between a counter's bit-width and its maximum counting capacity [@problem_id:1919479].", "problem": "In a digital electronics laboratory, a student is tasked with designing a precision event timer. The design uses a stable Quartz Crystal Oscillator (QCO) with a frequency of $f_{\\text{osc}}$ as its time base, and several identical 4-bit synchronous binary counter Integrated Circuits (ICs) are cascaded together to count the clock pulses. The timer is designed to measure time intervals up to a maximum duration of $T_{\\text{max}}$ without overflowing. An overflow occurs if the total number of clock pulses counted exceeds the maximum value that the cascaded counter system can store.\n\nGiven the QCO frequency is $f_{\\text{osc}} = 10.0 \\text{ MHz}$ and the maximum time interval to be measured is $T_{\\text{max}} = 1.00 \\text{ ms}$, calculate the minimum integer number of 4-bit counter ICs that must be cascaded to construct a timer that meets this requirement.", "solution": "The number of clock pulses counted during the maximum interval is given by the time-base relation $N = f_{\\text{osc}} T_{\\text{max}}$. An $n$-bit binary counter can represent counts from $0$ to $2^{n}-1$, so to avoid overflow when counting $N$ pulses starting from zero, the required capacity condition is $2^{n} \\geq N$. With $k$ cascaded 4-bit counters, the total number of bits is $n = 4k$, hence the no-overflow condition becomes $2^{4k} \\geq N$.\n\nSubstituting the given values, $f_{\\text{osc}} = 10.0 \\times 10^{6} \\text{ Hz}$ and $T_{\\text{max}} = 1.00 \\times 10^{-3} \\text{ s}$, the pulse count is\n$$\nN = f_{\\text{osc}} T_{\\text{max}} = \\left(10.0 \\times 10^{6}\\right)\\left(1.00 \\times 10^{-3}\\right) = 10.0 \\times 10^{3} = 1.00 \\times 10^{4}.\n$$\nWe require $2^{4k} \\geq 1.00 \\times 10^{4}$. Noting that\n$$\n2^{13} = 8192 < 1.00 \\times 10^{4} \\leq 16384 = 2^{14},\n$$\nit follows that $4k \\geq 14$, so\n$$\nk \\geq \\frac{14}{4} = 3.5.\n$$\nTherefore, the minimum integer $k$ is $4$. This provides $n = 16$ bits of capacity, i.e., $2^{16} = 65536 \\geq 1.00 \\times 10^{4}$, ensuring no overflow.", "answer": "$$\\boxed{4}$$", "id": "1919479"}, {"introduction": "Beyond ideal design, a crucial skill for any digital engineer is the ability to debug and analyze systems with unexpected behavior, often caused by simple wiring errors. This problem presents a synchronous counter where a critical connection has been made incorrectly, linking a terminal count output to an asynchronous clear input. Investigating the resulting counting cycle will deepen your understanding of the interplay between synchronous clocking and dominant asynchronous signals, revealing how such a mistake leads to a non-obvious, repeating state sequence [@problem_id:1919542].", "problem": "In a digital design lab, a student intends to create an 8-bit synchronous binary counter by cascading two identical 4-bit synchronous binary up-counters, named C1 and C2. C1 is intended to count the four lower-order bits and C2 the four higher-order bits.\n\nEach 4-bit counter has the following characteristics:\n- A clock input, `CLK`. The counter increments its value on each rising edge of the `CLK` signal.\n- An active-high asynchronous clear input, `CLR`. When `CLR` is high (logic 1), the counter's 4-bit output is immediately and asynchronously forced to `0000`. When `CLR` is low (logic 0), the counter operates normally.\n- A 4-bit output, `Q[3:0]`, representing the current count from 0 (`0000`) to 15 (`1111`).\n- An active-high Terminal Count output, `TC`. The `TC` output is high (logic 1) if and only if the counter's state `Q[3:0]` is `1111`. Otherwise, `TC` is low (logic 0).\n\nThe student makes a wiring mistake. The system is assembled as follows:\n- A single, common clock signal is connected to the `CLK` inputs of both C1 and C2.\n- The `CLR` input of the lower-order counter, C1, is permanently tied to ground (logic 0).\n- The `TC` output of C1 is incorrectly connected to the `CLR` input of the higher-order counter, C2.\n- At time $t=0$, both counters are initialized to the state `0000`.\n\nAfter an initial startup sequence of states, the combined 8-bit system enters a stable, repeating cycle of states. What is the length (i.e., the number of unique states) of this stable cycle?\n\nA. 15\n\nB. 16\n\nC. 31\n\nD. 240\n\nE. 256", "solution": "Let the combined 8-bit state just after the $n$-th rising clock edge (after all propagation and asynchronous clear effects have settled) be denoted by $(H_{n}, L_{n})$, where $L_{n} \\in \\{0,\\dots,15\\}$ is the lower 4-bit counter C1, and $H_{n} \\in \\{0,\\dots,15\\}$ is the higher 4-bit counter C2.\n\nBy specification of C1, which has its clear held low, C1 increments on every rising edge:\n$$\nL_{n+1} \\equiv L_{n} + 1 \\pmod{16}.\n$$\n\nFor C2, the active-high asynchronous clear is driven by $\\text{TC}_{1}$, which is high if and only if $L=15$. Because the clear is asynchronous and dominant:\n- If $L_{n}=15$ (i.e., just before the edge C1 is at $1111$), then C2 is being held cleared through that edge, so\n$$\nH_{n+1} = 0.\n$$\n- If $L_{n} \\neq 15$ but $L_{n+1}=15$ (i.e., C1 goes $14 \\to 15$ on this edge), then $\\text{TC}_{1}$ asserts as C1 reaches $15$, and C2 is asynchronously forced to $0$ after the edge settles, so\n$$\nH_{n+1} = 0.\n$$\n- Otherwise (no clear active before or after the edge), C2 increments normally:\n$$\nH_{n+1} \\equiv H_{n} + 1 \\pmod{16}.\n$$\n\nCombining these cases,\n$$\nH_{n+1} =\n\\begin{cases}\n0, & \\text{if } L_{n} = 15 \\text{ or } L_{n+1} = 15, \\\\\nH_{n} + 1 \\pmod{16}, & \\text{otherwise.}\n\\end{cases}\n$$\n\nSince $L_{n}$ runs deterministically through $0,1,\\dots,14,15,0,\\dots$ with period $16$, exactly two consecutive steps each $16$-step cycle satisfy the clear condition: the step $14 \\to 15$ (where $L_{n+1}=15$) and the step $15 \\to 0$ (where $L_{n}=15$). On those two steps, $H$ is forced to $0$ and remains $0$. On the other $14$ steps, $H$ increments by $1$.\n\nAfter any initial transients, once the system has passed a step where $L=15$ or $L$ becomes $15$, $H$ is set to $0$ and the subsequent behavior is fixed. Over one $16$-step cycle of $L$, the settled sequence of states after edges is\n$$\n(H,L) = (1,1), (2,2), \\dots, (14,14), (0,15), (0,0),\n$$\nthen it repeats with $(1,1)$ again. These are $14+1+1=16$ distinct states in the repeating cycle. Hence the length of the stable cycle is $16$, which corresponds to option B.", "answer": "$$\\boxed{B}$$", "id": "1919542"}, {"introduction": "This final practice moves from analysis to synthesis, challenging you to think like a design engineer faced with resource constraints. Given a limited inventory of counter modules, your task is to devise a configuration that maximizes the overall counting range of the system. This problem requires you to apply your knowledge of synchronous cascading and enabling logic to create an optimal design, demonstrating that the largest modulus is achieved by ensuring the system cycles through every possible combination of states of its constituent counters [@problem_id:1919487].", "problem": "A digital systems engineer is tasked with creating a frequency divider with the largest possible integer division ratio, $M$, that is strictly less than 200. The available components are a fixed set of synchronous counter integrated circuits: two identical MOD-5 counters and one MOD-7 counter. A synchronous MOD-N counter is a device that counts from 0 to $N-1$ and has inputs for a clock signal and a count enable, as well as outputs indicating its current count. You are allowed to use any configuration of these counters in a cascade, parallel, or mixed topology, interconnected with any required combinational logic gates (e.g., AND, OR, NOT) to control their clock or enable inputs. The final design must function as a single, continuous counter, meaning its overall state must cycle through a unique sequence of $M$ distinct states before repeating the sequence. What is the largest possible value of $M$ that can be achieved?", "solution": "Let the two MOD-5 counters have states $x \\in \\{0,1,2,3,4\\}$ and $y \\in \\{0,1,2,3,4\\}$, and let the MOD-7 counter have state $z \\in \\{0,1,2,3,4,5,6\\}$. The combined systemâ€™s state is the triple $(x,y,z)$. Since the only memory elements are these three counters, the total number of distinct combined states is at most the product of the individual moduli. Therefore,\n$$\nM \\leq 5 \\cdot 5 \\cdot 7 = 175.\n$$\nHence $M \\leq 175$ is a hard upper bound.\n\nIt remains to show that $M=175$ is achievable with appropriate synchronous interconnection, so that the overall system forms a single cycle of length $175$.\n\nConstruct a mixed-radix cascade as follows. Let the least significant counter $x$ be enabled every clock (so it counts modulo $5$ on each input clock). Enable the counter $y$ if and only if $x=4$ at that clock, and enable the counter $z$ if and only if $x=4$ and $y=4$ at that clock. These enables are realizable by equality-detection combinational logic. All counters are synchronous, so their next states are computed from the current $(x,y,z)$ concurrently on each clock edge.\n\nDefine the state index\n$$\ns \\triangleq x + 5y + 25z,\n$$\nwhich takes values in $\\{0,1,\\ldots,174\\}$. We show that on each clock tick, $s$ advances by $1$ modulo $175$. Consider cases:\n\n1) If $x4$, then $x^{+}=x+1$, $y^{+}=y$, $z^{+}=z$, hence $s^{+}=(x+1)+5y+25z=s+1$.\n\n2) If $x=4$ and $y4$, then $x^{+}=0$, $y^{+}=y+1$, $z^{+}=z$, hence $s^{+}=0+5(y+1)+25z=(x+5y+25z)+1=s+1$.\n\n3) If $x=4$, $y=4$, and $z6$, then $x^{+}=0$, $y^{+}=0$, $z^{+}=z+1$, hence $s^{+}=0+0+25(z+1)=(x+5y+25z)+1=s+1$.\n\n4) If $x=4$, $y=4$, $z=6$, then $x^{+}=0$, $y^{+}=0$, $z^{+}=0$, hence $s^{+}=0=(174+1) \\bmod 175=(s+1) \\bmod 175$.\n\nThus in all cases,\n$$\ns^{+} \\equiv s+1 \\pmod{175},\n$$\nso the sequence of states is a single cycle covering all $175$ distinct values before repeating. This achieves $M=175$, which meets the upper bound and is therefore maximal under the given constraints. Since $175200$, the largest possible $M$ is $175$.", "answer": "$$\\boxed{175}$$", "id": "1919487"}]}