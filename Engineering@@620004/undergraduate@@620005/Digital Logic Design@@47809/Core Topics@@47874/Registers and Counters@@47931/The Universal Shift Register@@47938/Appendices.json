{"hands_on_practices": [{"introduction": "To begin, let's solidify our understanding of the most fundamental function of a shift register: serially moving data. This first exercise focuses exclusively on the shift-right operation, requiring you to trace the register's state over multiple clock cycles. Mastering this core mechanic is the essential first step toward unlocking the full potential of the universal shift register. [@problem_id:1972002]", "problem": "Consider a 4-bit universal shift register with its bits labeled $Q_3, Q_2, Q_1, Q_0$, where $Q_3$ is the Most Significant Bit (MSB) and $Q_0$ is the Least Significant Bit (LSB). The register is configured to operate in 'shift-right' mode. In this mode, on each rising edge of the clock signal, the value at the serial input is loaded into the MSB ($Q_3$), the value of $Q_i$ is transferred to $Q_{i-1}$ for $i=3, 2, 1$, and the value of $Q_0$ is shifted out.\n\nThe register is initially loaded with the state $Q_3Q_2Q_1Q_0 = 1011$. A constant serial input of '0' is applied to the register.\n\nDetermine the binary state of the register, represented as the string $Q_3Q_2Q_1Q_0$, after exactly two clock pulses have been applied.", "solution": "A 4-bit shift-right register in the specified mode updates on each rising clock edge according to:\n$$Q_{3}^{+} = SI,\\quad Q_{2}^{+} = Q_{3},\\quad Q_{1}^{+} = Q_{2},\\quad Q_{0}^{+} = Q_{1},$$\nwhere $SI$ is the serial input and the superscript $+$ denotes the next-state value.\n\nGiven the initial state $Q_{3}Q_{2}Q_{1}Q_{0} = 1011$ and a constant serial input $SI = 0$:\n\nAfter the first clock pulse:\n- $Q_{3}^{+} = 0$,\n- $Q_{2}^{+} = 1$ (old $Q_{3}$),\n- $Q_{1}^{+} = 0$ (old $Q_{2}$),\n- $Q_{0}^{+} = 1$ (old $Q_{1}$).\nThus the state becomes $0101$.\n\nAfter the second clock pulse (using the state $0101$ as the current state):\n- $Q_{3}^{+} = 0$,\n- $Q_{2}^{+} = 0$ (old $Q_{3}$),\n- $Q_{1}^{+} = 1$ (old $Q_{2}$),\n- $Q_{0}^{+} = 0$ (old $Q_{1}$).\nThus the state becomes $0010$.", "answer": "$$\\boxed{0010}$$", "id": "1972002"}, {"introduction": "A universal shift register's true power lies in its versatility. By manipulating its mode control inputs, we can switch between different operations like holding data, shifting, and parallel loading. This practice moves beyond a single function, challenging you to track the register's state through a sequence of distinct operations, which is a key skill in analyzing sequential circuits. [@problem_id:1972006]", "problem": "Consider a 4-bit synchronous universal shift register whose state is represented by the outputs $Q_3Q_2Q_1Q_0$, with $Q_3$ being the most significant bit. The register's function is dictated by two mode control inputs, $S_1$ and $S_0$. The operational modes are defined as follows:\n\n- $S_1S_0 = 00$: Hold State (no change)\n- $S_1S_0 = 01$: Shift Right (serial input $SI_R$ enters at $Q_3$)\n- $S_1S_0 = 10$: Shift Left (serial input $SI_L$ enters at $Q_0$)\n- $S_1S_0 = 11$: Parallel Load (from inputs $I_3I_2I_1I_0$)\n\nInitially, the state of the register is $Q_3Q_2Q_1Q_0 = 1100$. The register is then subjected to two consecutive clock pulses with the following control settings:\n\n1.  **First Clock Pulse:** The mode is set to Parallel Load ($S_1S_0=11$) with parallel inputs $I_3I_2I_1I_0 = 0110$.\n2.  **Second Clock Pulse:** The mode is set to Shift Right ($S_1S_0=01$) with the serial input $SI_R = 1$.\n\nDetermine the final binary state of the register, represented as the 4-bit string $Q_3Q_2Q_1Q_0$, after the second clock pulse.", "solution": "We will determine the state of the 4-bit register, $Q_3Q_2Q_1Q_0$, by tracing its contents through each of the two clock pulses, starting from the given initial state.\n\n**Initial State:**\nBefore the first clock pulse, the register holds the value $Q_3Q_2Q_1Q_0 = 1100$.\n\n**After the First Clock Pulse:**\nThe mode control inputs for the first pulse are $S_1S_0 = 11$. According to the problem description, this setting activates the 'Parallel Load' operation.\nThe parallel inputs are specified as $I_3I_2I_1I_0 = 0110$.\nIn a parallel load operation, the register's state is updated to match the values on the parallel inputs, meaning the old state is completely overwritten.\nSo, the new state of the register becomes:\n- $Q_3 \\leftarrow I_3 = 0$\n- $Q_2 \\leftarrow I_2 = 1$\n- $Q_1 \\leftarrow I_1 = 1$\n- $Q_0 \\leftarrow I_0 = 0$\nAfter the first clock pulse, the state of the register is $Q_3Q_2Q_1Q_0 = 0110$.\n\n**After the Second Clock Pulse:**\nThe state of the register before this pulse is the result from the previous step: $0110$.\nThe mode control inputs for the second pulse are $S_1S_0 = 01$. This setting activates the 'Shift Right' operation.\nThe serial input for the right shift is given as $SI_R = 1$.\nIn a 'Shift Right' operation, the value of the serial input $SI_R$ is loaded into the most significant bit ($Q_3$). The value of each bit is shifted one position to the right. That is, the old value of $Q_3$ moves to $Q_2$, the old value of $Q_2$ moves to $Q_1$, and the old value of $Q_1$ moves to $Q_0$. The old value of the least significant bit ($Q_0$) is discarded.\nThe calculation for the new state is as follows, based on the state $0110$:\n- New $Q_3 \\leftarrow SI_R = 1$\n- New $Q_2 \\leftarrow \\text{Old } Q_3 = 0$\n- New $Q_1 \\leftarrow \\text{Old } Q_2 = 1$\n- New $Q_0 \\leftarrow \\text{Old } Q_1 = 1$\nTherefore, after the second clock pulse, the state of the register becomes $Q_3Q_2Q_1Q_0 = 1011$.\n\n**Final State:**\nThe final state of the register after the sequence of two clock pulses is $1011$.", "answer": "$$\\boxed{1011}$$", "id": "1972006"}, {"introduction": "Having mastered the operations of a single register, we now scale up to a system-level challenge. This problem requires you to think like a digital designer, using two interconnected registers to perform a common data-swapping task. Your goal is to devise an efficient sequence of operations, illustrating how shift registers serve as fundamental building blocks for data transfer and manipulation in larger digital systems. [@problem_id:1971998]", "problem": "Two identical 4-bit universal shift registers, A and B, are used in a digital circuit. The bits of each register are indexed from `Q[3]` (most significant bit) to `Q[0]` (least significant bit). Each register operates based on a two-bit mode control input, `(S1, S0)`, according to the following function table:\n\n| S1 | S0 | Operation      | Description                                                                                                   |\n|----|----|----------------|---------------------------------------------------------------------------------------------------------------|\n| 0  | 0  | Hold           | The register's content remains unchanged: `Q_next = Q`.                                                       |\n| 0  | 1  | Shift Right    | The bits shift one position to the right. The new MSB is loaded from the serial-right input (`SRI`): `Q_next[3] = SRI`, `Q_next[i] = Q[i+1]` for `i` in `{0, 1, 2}`. The bit `Q[0]` is shifted out. |\n| 1  | 0  | Shift Left     | The bits shift one position to the left. The new LSB is loaded from the serial-left input (`SLI`): `Q_next[0] = SLI`, `Q_next[i] = Q[i-1]` for `i` in `{1, 2, 3}`. The bit `Q[3]` is shifted out.  |\n| 1  | 1  | Parallel Load  | The register is loaded with data from the parallel inputs `I[3:0]`: `Q_next = I`.                               |\n\nThe two registers are interconnected and synchronized to a common clock. The wiring is configured as follows:\n- The serial output corresponding to a right shift from register A (i.e., the value of bit `A[0]`) is connected to the serial-right input (`SRI`) of register B.\n- The serial output corresponding to a right shift from register B (i.e., the value of bit `B[0]`) is connected to the serial-right input (`SRI`) of register A.\n- All other data inputs to the registers, specifically the parallel inputs (`I_A`, `I_B`) and the serial-left inputs (`SLI_A`, `SLI_B`), are not connected to any data source and can be assumed to provide a constant logic `0` value.\n\nInitially, register A holds the 4-bit value `D_A`, and register B holds the 4-bit value `D_B`. Your task is to determine the minimum number of clock cycles required to swap the contents of the two registers, such that register A holds `D_B` and register B holds `D_A`.", "solution": "Let $A^{(t)}[i]$ and $B^{(t)}[i]$ denote the contents of bit $i \\in \\{0,1,2,3\\}$ of registers $A$ and $B$ at clock time $t$, with $t=0$ the initial state. The universal shift register function table specifies that with mode $(S_1,S_0)=(0,1)$ (Shift Right), for any register $Q$ the next state satisfies\n$$\nQ^{(t+1)}[3]=\\mathrm{SRI}_{Q}^{(t)},\\quad Q^{(t+1)}[i]=Q^{(t)}[i+1]\\ \\text{for}\\ i\\in\\{0,1,2\\}.\n$$\nGiven the wiring, the serial-right inputs are cross-connected:\n$$\n\\mathrm{SRI}_{A}^{(t)}=B^{(t)}[0],\\qquad \\mathrm{SRI}_{B}^{(t)}=A^{(t)}[0].\n$$\nAll other inputs are tied to logic $0$, so Parallel Load would force zeros and Shift Left would insert zeros at $[0]$ while discarding $[3]$, both destructively losing data and not aiding a faster swap.\n\nChoose to apply Shift Right to both registers on each clock. Then the simultaneous update equations are\n$$\nA^{(t+1)}[3]=B^{(t)}[0],\\quad A^{(t+1)}[i]=A^{(t)}[i+1]\\ \\text{for}\\ i\\in\\{0,1,2\\},\n$$\n$$\nB^{(t+1)}[3]=A^{(t)}[0],\\quad B^{(t+1)}[i]=B^{(t)}[i+1]\\ \\text{for}\\ i\\in\\{0,1,2\\}.\n$$\nLet the initial contents be $A^{(0)}=[A_{3}\\ A_{2}\\ A_{1}\\ A_{0}]$ and $B^{(0)}=[B_{3}\\ B_{2}\\ B_{1}\\ B_{0}]$. Iterating for four clocks:\n\nAfter $t=1$:\n$$\nA^{(1)}=[B_{0}\\ A_{3}\\ A_{2}\\ A_{1}],\\qquad B^{(1)}=[A_{0}\\ B_{3}\\ B_{2}\\ B_{1}].\n$$\nAfter $t=2$:\n$$\nA^{(2)}=[B_{1}\\ B_{0}\\ A_{3}\\ A_{2}],\\qquad B^{(2)}=[A_{1}\\ A_{0}\\ B_{3}\\ B_{2}].\n$$\nAfter $t=3$:\n$$\nA^{(3)}=[B_{2}\\ B_{1}\\ B_{0}\\ A_{3}],\\qquad B^{(3)}=[A_{2}\\ A_{1}\\ A_{0}\\ B_{3}].\n$$\nAfter $t=4$:\n$$\nA^{(4)}=[B_{3}\\ B_{2}\\ B_{1}\\ B_{0}],\\qquad B^{(4)}=[A_{3}\\ A_{2}\\ A_{1}\\ A_{0}],\n$$\nwhich exactly achieves the swap $A \\leftarrow D_{B}$ and $B \\leftarrow D_{A}$.\n\nTo argue minimality, observe that the only path to transfer information between the registers is via the serial-right inputs during a right shift. Per clock edge, at most one bit from $A$ can enter $B$ and at most one bit from $B$ can enter $A$. Swapping requires transferring $4$ bits in each direction, so at least $4$ clock cycles are necessary. Since the above schedule achieves the swap in $4$ cycles, the minimum is $4$.", "answer": "$$\\boxed{4}$$", "id": "1971998"}]}