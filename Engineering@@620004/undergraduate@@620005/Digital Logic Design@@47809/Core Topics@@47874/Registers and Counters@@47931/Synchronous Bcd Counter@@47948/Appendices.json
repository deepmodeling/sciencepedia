{"hands_on_practices": [{"introduction": "Mastering the design of a synchronous BCD counter is a cornerstone of digital logic. This first practice exercise guides you through the complete process of deriving the control logic for a standard decade counter that sequences from 0 to 9. By determining the excitation equations for each JK flip-flop, you will translate a behavioral specification into a concrete circuit implementation, a fundamental skill for any digital designer [@problem_id:1927093].", "problem": "A digital systems engineer is tasked with designing a core component for a specialized event timer. The component must be a synchronous decade counter that sequences through the states representing decimal digits 0 through 9. This counter will be implemented using four JK flip-flops.\n\nThe counter's state is represented by a four-bit output, $Q_D Q_C Q_B Q_A$, where $Q_D$ is the Most Significant Bit (MSB) and $Q_A$ is the Least Significant Bit (LSB). The counter follows a Binary-Coded Decimal (BCD) sequence, starting from 0000 (decimal 0), incrementing with each clock pulse up to 1001 (decimal 9), and then resetting to 0000 on the next clock pulse. The states corresponding to decimal values 10 through 15 are unused and can be treated as \"don't care\" conditions.\n\nYour task is to determine the complete set of simplified Boolean expressions for the eight inputs ($J_A, K_A, J_B, K_B, J_C, K_C, J_D, K_D$) required to correctly implement this synchronous BCD decade counter. From the options below, select the set of equations that accurately represents the minimized logic for the JK inputs.\n\nA.\n$J_A = 1$\n$K_A = 1$\n$J_B = Q_A \\overline{Q_D}$\n$K_B = Q_A$\n$J_C = Q_A Q_B$\n$K_C = Q_A Q_B$\n$J_D = Q_A Q_B Q_C$\n$K_D = Q_A$\n\nB.\n$J_A = 1$\n$K_A = 1$\n$J_B = Q_A$\n$K_B = Q_A$\n$J_C = Q_A Q_B$\n$K_C = Q_A Q_B$\n$J_D = Q_A Q_B Q_C$\n$K_D = Q_A Q_B Q_C$\n\nC.\n$J_A = 1$\n$K_A = 1$\n$J_B = Q_A$\n$K_B = Q_A \\overline{Q_D}$\n$J_C = Q_A Q_B$\n$K_C = Q_A Q_B$\n$J_D = Q_A Q_B Q_C$\n$K_D = Q_A$\n\nD.\n$J_A = 1$\n$K_A = Q_D$\n$J_B = Q_A$\n$K_B = Q_A$\n$J_C = Q_A Q_B$\n$K_C = Q_A Q_B$\n$J_D = Q_A Q_C$\n$K_D = Q_A$", "solution": "Let the present state be $(Q_{D},Q_{C},Q_{B},Q_{A})$ and the next state be $(Q_{D}^{+},Q_{C}^{+},Q_{B}^{+},Q_{A}^{+})$. The BCD sequence uses states $0000$ through $1001$ and treats $1010$ through $1111$ as don't cares.\n\nA JK flip-flop obeys the characteristic equation $Q^{+} = J\\overline{Q} + \\overline{K}Q$, and its excitation requirements are:\n- $0 \\rightarrow 0$: $J=0$, $K=\\text{X}$,\n- $0 \\rightarrow 1$: $J=1$, $K=\\text{X}$,\n- $1 \\rightarrow 0$: $J=\\text{X}$, $K=1$,\n- $1 \\rightarrow 1$: $J=\\text{X}$, $K=0$,\nwith $\\text{X}$ denoting don't care. We use these with don't cares for unused states to minimize each input.\n\nFor $Q_{A}$: In BCD counting, the LSB toggles at every clock, so $Q_{A}^{+}=\\overline{Q_{A}}$. Therefore the JK inputs must force a toggle always, giving\n$$J_{A}=1,\\quad K_{A}=1.$$\n\nFor $Q_{B}$: From the sequence $0000\\rightarrow0001\\rightarrow0010\\rightarrow0011\\rightarrow0100\\rightarrow0101\\rightarrow0110\\rightarrow0111\\rightarrow1000\\rightarrow1001\\rightarrow0000$, the transitions of $Q_{B}$ over the used states are:\n- Toggle when $(Q_{A},Q_{D})=(1,0)$ and $Q_{B}$ is either $0$ or $1$ (states $0001,0011,0101,0111$),\n- No toggle at $1001$ (since the counter resets to $0000$).\nThus a convenient minimal choice using don't cares is\n$$J_{B}=Q_{A}\\overline{Q_{D}},\\quad K_{B}=Q_{A}.$$\nTo verify, compute the next state for $Q_B$: $Q_{B}^{+} = J_B\\overline{Q_B} + \\overline{K_B}Q_B = (Q_A\\overline{Q_D})\\overline{Q_B} + \\overline{Q_A}Q_B$. This equation matches all required next values over the used states (explicitly checked at $0000,0001,0010,0011,0100,0101,0110,0111,1000,1001$).\n\nFor $Q_{C}$: From the sequence, $Q_{C}$ toggles only in states $0011$ and $0111$, i.e., when $Q_{A}Q_{B}=1$ (and $Q_{D}=0$ in the used states). Because $J$ and $K$ are don't care when $Q_{C}$ is not the toggling bit, a minimal implementation is\n$$J_{C}=Q_{A}Q_{B},\\quad K_{C}=Q_{A}Q_{B}.$$\n\nFor $Q_{D}$: Over used states, $Q_{D}$ makes $0\\rightarrow1$ only at $0111$ and $1\\rightarrow0$ only at $1001$. Thus we can choose\n$$J_{D}=Q_{A}Q_{B}Q_{C},\\quad K_{D}=Q_{A}.$$\nVerification with $Q_{D}^{+} = J_D\\overline{Q_D} + \\overline{K_D}Q_D$:\n- At $0111$: $J_{D}=1$, $Q_{D}=0$ gives $Q_{D}^{+}=1$,\n- At $1001$: $K_{D}=1$, $Q_{D}=1$ gives $Q_{D}^{+}=0$,\n- At $1000$: $J_{D}=0$, $K_{D}=0$, $Q_{D}=1$ gives $Q_{D}^{+}=1$,\n- All other used states have $Q_{D}=0$ and $J_{D}=0$, so $Q_{D}^{+}=0$.\nThese satisfy the BCD sequence.\n\nCollecting, the minimized set is\n$$J_{A}=1,\\;K_{A}=1,\\;J_{B}=Q_{A}\\overline{Q_{D}},\\;K_{B}=Q_{A},\\;J_{C}=Q_{A}Q_{B},\\;K_{C}=Q_{A}Q_{B},\\;J_{D}=Q_{A}Q_{B}Q_{C},\\;K_{D}=Q_{A},$$\nwhich corresponds to option A.", "answer": "$$\\boxed{A}$$", "id": "1927093"}, {"introduction": "A well-designed digital system must be robust and predictable, even when faced with unexpected glitches. Building on the BCD counter concept, this exercise challenges you to design a vital safety feature: an invalid state detector [@problem_id:1964838]. Your task is to create a minimal combinational logic circuit that signals an error whenever the counter enters a state outside the valid 0-9 BCD range, a crucial skill for ensuring system reliability.", "problem": "A digital control system uses a 4-bit synchronous counter to cycle through states representing decimal digits for a user interface. The counter's state is represented by four output signals, $Q_3, Q_2, Q_1, Q_0$, where $Q_3$ is the most significant bit (MSB). The system is designed to use Binary Coded Decimal (BCD), where the counter should only ever be in one of the states from $0000_2$ (decimal 0) to $1001_2$ (decimal 9).\n\nDue to potential transient glitches or unforeseen startup conditions, the counter might enter an invalid state. The invalid states are any binary combination from $1010_2$ (decimal 10) to $1111_2$ (decimal 15), inclusive. To ensure system reliability, a combinational logic circuit is required to detect these invalid states. This 'error detector' circuit takes the four counter outputs ($Q_3, Q_2, Q_1, Q_0$) as its inputs and produces a single high-logic output, $E$, if and only if the counter is in an invalid state.\n\nDetermine the minimal sum-of-products (SOP) Boolean expression for the error output $E$ in terms of the counter outputs $Q_3, Q_2, Q_1,$ and $Q_0$. Your expression should use the minimum number of literals and terms.", "solution": "Let the counter outputs be $Q_{3}$ (MSB), $Q_{2}$, $Q_{1}$, $Q_{0}$. The invalid BCD states are exactly the binary codes from $1010_{2}$ (decimal $10$) to $1111_{2}$ (decimal $15$), i.e., the six minterms where $Q_{3}=1$ and the pair $(Q_{2},Q_{1},Q_{0})$ is any of $010,011,100,101,110,111$.\n\nObserve:\n- All invalid states have $Q_{3}=1$.\n- The only valid states with $Q_{3}=1$ are $1000_{2}$ (decimal $8$) and $1001_{2}$ (decimal $9$), which satisfy $Q_{2}=0$ and $Q_{1}=0$.\nTherefore, the error condition is that $Q_{3}=1$ and at least one of $Q_{2}$ or $Q_{1}$ equals $1$. This yields the Boolean expression\n$$\nE = Q_{3}(Q_{2}+Q_{1}).\n$$\nTo express $E$ as a sum of products (SOP), expand the distributive form:\n$$\nE = Q_{3}Q_{2} + Q_{3}Q_{1}.\n$$\nThis SOP uses two product terms, each with two literals, for a total of four literals. It is minimal because:\n- A single product term with two literals covers four minterms, and with three literals covers two minterms; no single product can cover exactly the six required minterms without including a zero from the valid set.\n- The grouping implied by $Q_{3}Q_{2}$ covers the four minterms $1100$–$1111$ (decimals $12$–$15$), and $Q_{3}Q_{1}$ covers $1010$–$1011$ (decimals $10$–$11$), with overlap on $1110$–$1111$, thus covering exactly all invalid states.\n\nHence, the minimal SOP is $E = Q_{3}Q_{2} + Q_{3}Q_{1}$.", "answer": "$$\\boxed{Q_{3}Q_{2}+Q_{3}Q_{1}}$$", "id": "1964838"}, {"introduction": "While standard counters are widely used, many applications require custom counting sequences that skip or re-order states. This practice problem tests your ability to adapt the fundamental design process to a non-standard specification [@problem_id:1964822]. You will design a synchronous counter that follows a unique sequence, reinforcing how to manipulate state transitions and leverage 'don't care' conditions to achieve a specific behavior efficiently.", "problem": "A specialized digital system requires a synchronous counter that cycles through a non-standard sequence. You are tasked with designing this counter using four JK flip-flops. The state of the counter is represented by the flip-flop outputs $Q_3, Q_2, Q_1, Q_0$, where $Q_3$ is the Most Significant Bit (MSB) and $Q_0$ is the Least Significant Bit (LSB).\n\nThe counter must follow the decimal sequence 0-1-2-3-4-8-9 and then repeat. This means the state transitions are $0 \\to 1 \\to 2 \\to 3 \\to 4 \\to 8 \\to 9 \\to 0$. The binary representations for the decimal numbers 5, 6, 7, 10, 11, 12, 13, 14, and 15 correspond to unused states. For the purpose of logic simplification, these unused states can be treated as \"don't care\" conditions.\n\nDetermine the complete set of simplified sum-of-products (SOP) Boolean expressions for the J and K inputs of each flip-flop ($J_3, K_3, J_2, K_2, J_1, K_1, J_0, K_0$) that will produce the specified counting sequence. Select the correct set of expressions from the options below. Note that in the expressions, a bar over a variable indicates negation (e.g., $\\overline{Q_0}$).\n\nA.\n$J_0 = \\overline{Q_1}$, $K_0 = Q_0$, $J_1 = \\overline{Q_3}\\overline{Q_2}Q_0$, $K_1 = Q_1 Q_0$, $J_2 = Q_1 Q_0$, $K_2 = Q_2$, $J_3 = Q_2$, $K_3 = Q_3 \\overline{Q_2} Q_0$\n\nB.\n$J_0 = \\overline{Q_2} \\overline{Q_0}$, $K_0 = Q_0$, $J_1 = \\overline{Q_3}\\overline{Q_2}\\overline{Q_1}Q_0$, $K_1 = Q_1 Q_0$, $J_2 = \\overline{Q_3} Q_1 Q_0$, $K_2 = Q_2$, $J_3 = \\overline{Q_3} Q_2$, $K_3 = Q_3 \\overline{Q_2} Q_0$\n\nC.\n$J_0 = \\overline{Q_2} \\overline{Q_0}$, $K_0 = Q_0$, $J_1 = \\overline{Q_3}\\overline{Q_2}Q_0$, $K_1 = Q_1 Q_0$, $J_2 = \\overline{Q_3} Q_1 Q_0$, $K_2 = Q_2$, $J_3 = Q_2$, $K_3 = Q_3 \\overline{Q_2} Q_0$\n\nD.\n$J_0 = 1$, $K_0 = 1$, $J_1 = \\overline{Q_3}\\overline{Q_2}Q_0$, $K_1 = Q_1 Q_0$, $J_2 = \\overline{Q_3} Q_1 Q_0$, $K_2 = \\overline{Q_3}Q_2$, $J_3 = Q_2$, $K_3 = \\overline{Q_1}Q_0$\n\nE.\n$J_0 = \\overline{Q_2} \\overline{Q_0}$, $K_0 = Q_0$, $J_1 = \\overline{Q_3}\\overline{Q_2}Q_0$, $K_1 = Q_0$, $J_2 = Q_1 Q_0$, $K_2 = \\overline{Q_3}Q_2$, $J_3 = \\overline{Q_3}Q_2$, $K_3 = Q_3 \\overline{Q_2} Q_0$", "solution": "We design a synchronous JK counter for the sequence of valid states\n$$0000 \\to 0001 \\to 0010 \\to 0011 \\to 0100 \\to 1000 \\to 1001 \\to 0000,$$\nwith $Q_{3}$ as MSB and $Q_{0}$ as LSB. Unused states $\\{0101,0110,0111,1010,1011,1100,1101,1110,1111\\}$ are treated as don't cares. For JK flip-flops, the excitation conditions are:\n- For $Q=0 \\to 0$: $J=0$ (and $K$ is don't care).\n- For $Q=0 \\to 1$: $J=1$ (and $K$ is don't care).\n- For $Q=1 \\to 0$: $K=1$ (and $J$ is don't care).\n- For $Q=1 \\to 1$: $K=0$ (and $J$ is don't care).\n\nWe construct the on/off sets for each $J_{i}$ and $K_{i}$ from the required bit transitions and then minimize using the don't-cares (both unused states and excitation don't-cares).\n\n1) Bit $Q_{0}$:\n- Required transitions across valid states: $0\\to 1$ at $0000,0010,1000$; $0\\to 0$ at $0100$; $1\\to 0$ at $0001,0011,1001$.\n- For $J_{0}$: on-set at present states with $Q_{0}=0$ and $Q_{0}^{+}=1$, namely $0000,0010,1000$; off-set at $0100$; all others are don't care. Minimization yields\n$$J_{0}=\\overline{Q_{2}}\\,\\overline{Q_{0}}.$$\n- For $K_{0}$: on-set at present states with $Q_{0}=1$ and $Q_{0}^{+}=0$, namely $0001,0011,1001$. With don't-cares this simplifies to\n$$K_{0}=Q_{0}.$$\n\n2) Bit $Q_{1}$:\n- Required transitions: $0\\to 0$ at $0000,0100,1000,1001$; $0\\to 1$ at $0001$; $1\\to 1$ at $0010$; $1\\to 0$ at $0011$.\n- For $J_{1}$: on-set only at $0001$; off-set at the states where $Q_{1}=0$ and holds $0$ (i.e., $0000,0100,1000,1001$). Minimization consistent with excluding $1001$ gives\n$$J_{1}=\\overline{Q_{3}}\\,\\overline{Q_{2}}\\,Q_{0}.$$\n- For $K_{1}$: on-set only at $0011$. A valid simplified choice that enforces $K_{1}=1$ when $Q_{1}=1$ and $Q_{0}=1$ is\n$$K_{1}=Q_{1}\\,Q_{0}.$$\n\n3) Bit $Q_{2}$:\n- Required transitions: $0\\to 1$ at $0011$; $1\\to 0$ at $0100$; otherwise $0\\to 0$ in the other valid states.\n- For $J_{2}$: on-set only at $0011$; with don't-cares a consistent minimized form is\n$$J_{2}=\\overline{Q_{3}}\\,Q_{1}\\,Q_{0}.$$\n- For $K_{2}$: on-set only at $0100$; with don't-cares the minimal form is\n$$K_{2}=Q_{2}.$$\n\n4) Bit $Q_{3}$:\n- Required transitions: $0\\to 1$ at $0100$; $1\\to 1$ at $1000$; $1\\to 0$ at $1001$; other valid cases are $0\\to 0$.\n- For $J_{3}$: on-set only at $0100$; using don't-cares we can cover all cases with\n$$J_{3}=Q_{2}.$$\n- For $K_{3}$: on-set only at $1001$; minimization yields\n$$K_{3}=Q_{3}\\,\\overline{Q_{2}}\\,Q_{0}.$$\n\nCollecting the simplified SOP expressions:\n- $J_{0}=\\overline{Q_{2}}\\,\\overline{Q_{0}},\\quad K_{0}=Q_{0}$,\n- $J_{1}=\\overline{Q_{3}}\\,\\overline{Q_{2}}\\,Q_{0},\\quad K_{1}=Q_{1}\\,Q_{0}$,\n- $J_{2}=\\overline{Q_{3}}\\,Q_{1}\\,Q_{0},\\quad K_{2}=Q_{2}$,\n- $J_{3}=Q_{2},\\quad K_{3}=Q_{3}\\,\\overline{Q_{2}}\\,Q_{0}$.\n\nThis matches option C exactly; it satisfies all required transitions on the valid states and leverages the unused states as don't cares for simplification.", "answer": "$$\\boxed{C}$$", "id": "1964822"}]}