{"hands_on_practices": [{"introduction": "Before delving into complex processor arithmetic, we must master the fundamentals. This first practice focuses on the most basic operation: adding two unsigned binary numbers. By working through this example [@problem_id:1913349], you will solidify your understanding of bit-by-bit addition and how carry bits propagate from one column to the next, a process at the heart of all digital adders.", "problem": "In a digital system, two 4-bit unsigned binary numbers, $A = 1011_2$ and $B = 0110_2$, are to be added. The operation is performed by a binary adder circuit that produces a result which may require more than 4 bits to be fully represented.\n\nDetermine the 5-bit unsigned binary number that represents the complete sum of $A$ and $B$.", "solution": "The problem asks for the sum of two 4-bit unsigned binary numbers, $A = 1011_2$ and $B = 0110_2$. We need to find the 5-bit result of this addition. Let's denote the bits of $A$ as $A_3A_2A_1A_0$ and the bits of $B$ as $B_3B_2B_1B_0$, where the subscript indicates the bit position (0 being the least significant bit). The sum will be a 5-bit number, which we can denote as $S_4S_3S_2S_1S_0$.\n\nWe perform the addition column by column, from right to left, keeping track of the carry bit at each stage. Let $C_i$ be the carry-in to column $i$.\n\n**Step 1: Column 0 (Least Significant Bit)**\nWe add the rightmost bits, $A_0$ and $B_0$. There is no initial carry-in, so $C_0 = 0$.\n$S_0 = A_0 + B_0 + C_0 = 1 + 0 + 0 = 1$.\nThe carry-out to the next column, $C_1$, is 0, since the sum is less than 2.\n- Sum bit: $S_0 = 1$\n- Carry-out: $C_1 = 0$\n\n**Step 2: Column 1**\nWe add the bits $A_1$ and $B_1$, along with the carry-in $C_1$ from the previous step.\n$S_1 = A_1 + B_1 + C_1 = 1 + 1 + 0 = 2$.\nIn binary, $2_{10}$ is represented as $10_2$. The sum bit is the LSB of this result, and the carry-out is the MSB.\n- Sum bit: $S_1 = 0$\n- Carry-out: $C_2 = 1$\n\n**Step 3: Column 2**\nWe add the bits $A_2$ and $B_2$, along with the carry-in $C_2$.\n$S_2 = A_2 + B_2 + C_2 = 0 + 1 + 1 = 2$.\nAgain, $2_{10} = 10_2$.\n- Sum bit: $S_2 = 0$\n- Carry-out: $C_3 = 1$\n\n**Step 4: Column 3 (Most Significant Bit of the inputs)**\nWe add the bits $A_3$ and $B_3$, along with the carry-in $C_3$.\n$S_3 = A_3 + B_3 + C_3 = 1 + 0 + 1 = 2$.\nOnce more, $2_{10} = 10_2$.\n- Sum bit: $S_3 = 0$\n- Carry-out: $C_4 = 1$\n\n**Step 5: Column 4 (Final Carry)**\nThe final sum requires a 5th bit, which is simply the carry-out from the last column, $C_4$.\n- Sum bit: $S_4 = C_4 = 1$\n\n**Step 6: Assemble the final result**\nWe combine the sum bits $S_4S_3S_2S_1S_0$ to form the 5-bit result.\nThe result is $10001_2$.\n\nWe can visualize the addition as follows:\n```\n  111   (Carries)\n  1011  (A)\n+ 0110  (B)\n-------\n 10001  (Sum)\n```\nThus, the 5-bit unsigned binary number representing the sum of $A=1011_2$ and $B=0110_2$ is $10001_2$.", "answer": "$$\\boxed{10001}$$", "id": "1913349"}, {"introduction": "Modern computers represent both positive and negative numbers using the two's complement system, which allows subtraction to be performed using addition circuitry. This practice [@problem_id:1913336] moves beyond unsigned numbers to explore how processors handle signed arithmetic. You will not only compute the sum of two signed integers but also learn to detect a critical error condition known as 'overflow,' which occurs when the result is outside the representable range for the given number of bits.", "problem": "A simple 8-bit microprocessor processes integers using the two's complement representation. The processor's status register contains an overflow flag, denoted by `V`, which is set to 1 if the result of an arithmetic operation exceeds the representable range of an 8-bit signed integer, and is set to 0 otherwise.\n\nConsider two 8-bit registers, `R1` and `R2`, loaded with the following binary values:\n`R1` = $01011100_2$\n`R2` = $00110010_2$\n\nAn `ADD R3, R1, R2` instruction is executed, which computes the sum of the values in `R1` and `R2` and stores the 8-bit result in a third register, `R3`.\n\nDetermine the final binary value stored in `R3` and the final state of the overflow flag `V`.\n\nSelect the correct option from the choices below.\n\nA. Result = $10001110_2$, V = 1\n\nB. Result = $10001110_2$, V = 0\n\nC. Result = $01111110_2$, V = 0\n\nD. Result = $10011110_2$, V = 1\n\nE. Result = $10011110_2$, V = 0", "solution": "We consider 8-bit two's complement arithmetic. The representable range is from $-2^{7}$ to $2^{7}-1$, i.e., $-128$ to $127$. An overflow occurs in addition if the operands have the same sign and the result has a different sign, equivalently if the carry into the most significant bit differs from the carry out of that bit.\n\nGiven $R1=01011100_{2}$ and $R2=00110010_{2}$, both have most significant bit $0$, so both are positive.\n\nCompute the 8-bit sum with carries bit by bit from least significant bit $b_{0}$ to most significant bit $b_{7}$:\n\n- $b_{0}$: $0+0=0$, carry to $b_{1}$ is $0$.\n- $b_{1}$: $0+1+0=1$, carry to $b_{2}$ is $0$.\n- $b_{2}$: $1+0+0=1$, carry to $b_{3}$ is $0$.\n- $b_{3}$: $1+0+0=1$, carry to $b_{4}$ is $0$.\n- $b_{4}$: $1+1+0=0$, carry to $b_{5}$ is $1$.\n- $b_{5}$: $0+1+1=0$, carry to $b_{6}$ is $1$.\n- $b_{6}$: $1+0+1=0$, carry to $b_{7}$ is $1$.\n- $b_{7}$: $0+0+1=1$, carry out is $0$.\n\nThus the 8-bit result is $10001110_{2}$.\n\nFor the overflow flag $V$, using the carry method: the carry into $b_{7}$ equals $1$ and the carry out of $b_{7}$ equals $0$, so $V=1$. Equivalently, both inputs are positive (sign bits $0$) and the result is negative (sign bit $1$), so overflow is set.\n\nTherefore, the correct choice is Result $=10001110_{2}$ with $V=1$, which corresponds to option A.", "answer": "$$\\boxed{A}$$", "id": "1913336"}, {"introduction": "In high-performance domains like signal processing and machine learning, perfect precision is not always required. This advanced exercise [@problem_id:1913331] introduces the engineering concept of approximate computing, where accuracy is intentionally traded for gains in speed or power efficiency. By analyzing an approximate adder, you will learn to quantify the resulting error, providing a practical look into the design trade-offs that shape modern hardware.", "problem": "In the field of approximate computing, digital circuits are intentionally simplified to trade a small amount of computational accuracy for significant gains in speed and power efficiency. Consider the design of a specialized 8-bit approximate unsigned adder. This adder takes two 8-bit unsigned inputs, `A = A_7A_6A_5A_4A_3A_2A_1A_0` and `B = B_7B_6B_5B_4B_3B_2B_1B_0`, and produces an 8-bit sum `S = S_7S_6S_5S_4S_3S_2S_1S_0`.\n\nThe adder's operation is split based on the significance of the bits:\n\n1.  **Lower Part (Least Significant Bits):** For the lower 4 bits (bits 0 to 3), the adder performs a standard, fully accurate binary addition. It computes the 4-bit sum `S_3S_2S_1S_0` and a carry-out signal, let's call it `C_4`, which would be the carry-in to the 5th bit position in a standard adder.\n\n2.  **Upper Part (Most Significant Bits):** For the upper 4 bits (bits 4 to 7), the design is aggressively simplified to break the carry chain for performance reasons. The carry-out `C_4` from the lower part is discarded and is not used in the calculation of the upper bits. Furthermore, the sum bits for the upper part are computed with a simple bitwise logic: for each bit `i` from 4 to 7, the corresponding sum bit `S_i` is calculated as $S_i = A_i \\oplus B_i$, where `\\oplus` denotes the Exclusive OR (XOR) operation.\n\nYour task is to analyze the error profile of this approximate adder. Specifically, you must determine two key metrics:\n\n-   **Worst-Case Error:** The maximum possible absolute difference between the true arithmetic sum `(A + B)` and the sum computed by the approximate adder.\n-   **Average Error:** The expected value of the error `(True Sum - Approximate Sum)`, assuming that the inputs `A` and `B` are chosen independently and uniformly at random from the set of all possible 8-bit unsigned integers.\n\nProvide these two numerical values. Express your answers as exact numerical values (e.g., integers or fractions).", "solution": "Let $A=16H_{A}+L_{A}$ and $B=16H_{B}+L_{B}$, where $H_{A},H_{B}\\in\\{0,\\dots,15\\}$ are the upper 4-bit integers and $L_{A},L_{B}\\in\\{0,\\dots,15\\}$ are the lower 4-bit integers. Let $L_{S}=(L_{A}+L_{B})\\bmod 16$ and $C_{4}=\\left\\lfloor (L_{A}+L_{B})/16\\right\\rfloor\\in\\{0,1\\}$. The exact sum is\n$$\nT=A+B=16(H_{A}+H_{B}+C_{4})+L_{S}.\n$$\nThe approximate adder outputs\n$$\nS_{\\mathrm{apx}}=16U+L_{S},\\quad U=H_{A}\\oplus H_{B}.\n$$\nTherefore the (signed) error is\n$$\nE=T-S_{\\mathrm{apx}}=16\\big(H_{A}+H_{B}+C_{4}-U\\big).\n$$\nUse the bitwise identity valid for all nonnegative integers $x,y$:\n$$\nx+y=(x\\oplus y)+2\\,(x\\,\\mathrm{AND}\\,y).\n$$\nWith $x=H_{A}$ and $y=H_{B}$, we get\n$$\nH_{A}+H_{B}-U=2\\,(H_{A}\\,\\mathrm{AND}\\,H_{B}),\n$$\nhence\n$$\nE=16\\big(2\\,(H_{A}\\,\\mathrm{AND}\\,H_{B})+C_{4}\\big).\n$$\n\nWorst-case error. Since $C_{4}$ can be forced to either $0$ or $1$ by suitable choices of $L_{A},L_{B}$, the worst case maximizes $2\\,(H_{A}\\,\\mathrm{AND}\\,H_{B})+C_{4}$. The maximum of $(H_{A}\\,\\mathrm{AND}\\,H_{B})$ over $H_{A},H_{B}\\in\\{0,\\dots,15\\}$ is $15$, achieved for $H_{A}=H_{B}=15$, and taking $C_{4}=1$ gives\n$$\n\\max|E|=16\\big(2\\cdot 15+1\\big)=16\\cdot 31=496.\n$$\n\nAverage error. With independent, uniform $H_{A},H_{B}$ and $L_{A},L_{B}$, we have\n$$\n\\mathbb{E}[E]=16\\big(2\\,\\mathbb{E}[H_{A}\\,\\mathrm{AND}\\,H_{B}]+\\mathbb{E}[C_{4}]\\big),\n$$\nand independence implies $\\mathbb{E}[H_{A}\\,\\mathrm{AND}\\,H_{B}]$ is independent of $\\mathbb{E}[C_{4}]$.\n\nFor $H_{A},H_{B}$ uniform on $\\{0,\\dots,15\\}$, decompose the AND by bits. For bit $k\\in\\{0,1,2,3\\}$, the contribution $2^{k}$ appears when both bits are $1$, which occurs with probability $(1/2)\\cdot(1/2)=1/4$. Thus\n$$\n\\mathbb{E}[H_{A}\\,\\mathrm{AND}\\,H_{B}]=\\sum_{k=0}^{3}2^{k}\\cdot\\frac{1}{4}=\\frac{1}{4}(1+2+4+8)=\\frac{15}{4}.\n$$\nFor $C_{4}$, with $L_{A},L_{B}$ uniform on $\\{0,\\dots,15\\}$, $C_{4}=1$ iff $L_{A}+L_{B}\\geq 16$. The number of pairs with sum $s$ is $s+1$ for $0\\leq s\\leq 15$ and $31-s$ for $16\\leq s\\leq 30$. Hence\n$$\n\\mathbb{P}(C_{4}=1)=\\frac{1}{256}\\sum_{s=16}^{30}(31-s)=\\frac{1}{256}\\sum_{t=1}^{15}t=\\frac{120}{256}=\\frac{15}{32},\n$$\nso $\\mathbb{E}[C_{4}]=\\frac{15}{32}$. Therefore\n$$\n\\mathbb{E}[E]=16\\left(2\\cdot\\frac{15}{4}+\\frac{15}{32}\\right)=16\\left(\\frac{30}{4}+\\frac{15}{32}\\right)=16\\cdot\\frac{255}{32}=\\frac{255}{2}.\n$$\n\nThus the worst-case absolute error is $496$, and the average signed error $\\mathbb{E}[T-S_{\\mathrm{apx}}]$ is $\\frac{255}{2}$.", "answer": "$$\\boxed{\\begin{pmatrix}496 & \\frac{255}{2}\\end{pmatrix}}$$", "id": "1913331"}]}