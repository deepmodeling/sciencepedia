{"hands_on_practices": [{"introduction": "Code conversion is a fundamental task in digital design, often required to interface between systems that use different data representations. This first exercise tackles a classic problem: converting from Excess-3 code, used in some early computers for its arithmetic properties, to the more common Binary-Coded Decimal (BCD) format. This practice is an excellent opportunity to master the use of 'don't-care' conditions, a key technique for simplifying logic circuits by ignoring invalid input combinations. [@problem_id:1922585]", "problem": "In a legacy digital arithmetic unit, numbers are represented using a 4-bit Excess-3 code. To interface with a modern display, a combinational logic circuit is required to convert each valid 4-bit Excess-3 digit back to its standard 4-bit Binary-Coded Decimal (BCD) representation.\n\nA BCD code represents the decimal digits 0 through 9 with their 4-bit unsigned binary equivalents (0000 through 1001). An Excess-3 code is formed by adding 3 (binary 0011) to the BCD representation of a decimal digit. For example, decimal 5 is 0101 in BCD, so its Excess-3 representation is $0101 + 0011 = 1000$.\n\nYour task is to determine the simplified Boolean logic for this converter. The converter takes a 4-bit Excess-3 input, denoted by $E_3E_2E_1E_0$ where $E_3$ is the most significant bit (MSB), and produces a 4-bit BCD output, denoted by $B_3B_2B_1B_0$ where $B_3$ is the MSB. The input combinations that do not correspond to any valid decimal digit (0-9) in Excess-3 code can be treated as don't-care conditions to simplify the logic.\n\nSelect the option that provides the correct set of four simplified Boolean expressions for the BCD output bits. In the expressions below, a prime (e.g., $E'$) denotes the NOT operation, concatenation denotes the AND operation (e.g., $X Y$ is $X \\text{ AND } Y$), and a plus sign ($+$) denotes the OR operation. The symbol $\\oplus$ denotes the XOR operation.\n\nA.\n$B_3 = E_3 E_2 + E_3 E_1 E_0$\n$B_2 = E_2' E_1' + E_2' E_0' + E_2 E_1 E_0$\n$B_1 = E_1 \\oplus E_0$\n$B_0 = E_0'$\n\nB.\n$B_3 = E_3 E_2$\n$B_2 = E_2' E_1' + E_2' E_0'$\n$B_1 = E_1 \\oplus E_0$\n$B_0 = E_0'$\n\nC.\n$B_3 = E_3 E_2' + E_3 E_1' E_0'$\n$B_2 = E_2'(E_1+E_0) + E_2 E_1' E_0'$\n$B_1 = E_1 \\oplus E_0$\n$B_0 = E_0'$\n\nD.\n$B_3 = E_3 E_2 + E_3 E_1 E_0$\n$B_2 = E_2' E_1' + E_2' E_0' + E_2 E_1 E_0$\n$B_1 = (E_1 \\oplus E_0)'$\n$B_0 = E_0$\n\nE.\n$B_3 = E_3+E_2+E_1+E_0$\n$B_2 = E_2(E_1+E_0)$\n$B_1 = E_1 E_0$\n$B_0 = E_0'$", "solution": "An Excess-3 digit is $E = \\text{BCD} + 3$. For decimal digits $d=0$ through $9$, the valid 4-bit Excess-3 inputs $E_{3}E_{2}E_{1}E_{0}$ and their corresponding BCD outputs $B_{3}B_{2}B_{1}B_{0}$ are:\n$$\n\\begin{aligned}\n0011 &\\to 0000,\\\\\n0100 &\\to 0001,\\\\\n0101 &\\to 0010,\\\\\n0110 &\\to 0011,\\\\\n0111 &\\to 0100,\\\\\n1000 &\\to 0101,\\\\\n1001 &\\to 0110,\\\\\n1010 &\\to 0111,\\\\\n1011 &\\to 1000,\\\\\n1100 &\\to 1001.\n\\end{aligned}\n$$\nAll other 4-bit inputs are don't cares: $\\{0000, 0001, 0010, 1101, 1110, 1111\\}$.\n\nDerivation of $B_{0}$: From the table, for all valid inputs $B_{0}=0$ when $E_{0}=1$ and $B_{0}=1$ when $E_{0}=0$, hence\n$$\nB_{0} = E_{0}'.\n$$\n\nDerivation of $B_{1}$: From the table, $B_{1}=1$ exactly when $E_{1}\\neq E_{0}$ across all valid inputs, hence\n$$\nB_{1} = E_{1}\\oplus E_{0}.\n$$\n\nDerivation of $B_{2}$: The minterms where $B_{2}=1$ are $E \\in \\{0111, 1000, 1001, 1010\\}$, i.e.,\n$$\nB_{2} = E_{3}' E_{2} E_{1} E_{0} + E_{3} E_{2}' E_{1}' E_{0}' + E_{3} E_{2}' E_{1}' E_{0} + E_{3} E_{2}' E_{1} E_{0}'.\n$$\nUse don't cares to expand implicants:\n- Combine $E_{3}' E_{2} E_{1} E_{0}$ with the don't care at $1111$ to get $E_{2} E_{1} E_{0}$.\n- Combine $E_{3} E_{2}' E_{1}' E_{0}'$ and $E_{3} E_{2}' E_{1}' E_{0}$, and expand over the don't cares at $0000, 0001$ to get $E_{2}' E_{1}'$.\n- Combine $E_{3} E_{2}' E_{1}' E_{0}'$ and $E_{3} E_{2}' E_{1} E_{0}'$, and expand over the don't cares at $0000, 0010$ to get $E_{2}' E_{0}'$.\nThus\n$$\nB_{2} = E_{2}' E_{1}' + E_{2}' E_{0}' + E_{2} E_{1} E_{0}.\n$$\n\nDerivation of $B_{3}$: The minterms where $B_{3}=1$ are $E \\in \\{1011, 1100\\}$, i.e.,\n$$\nB_{3} = E_{3} E_{2}' E_{1} E_{0} + E_{3} E_{2} E_{1}' E_{0}'.\n$$\nUse don't cares to expand:\n- Expand $E_{3} E_{2} E_{1}' E_{0}'$ over don't cares at $1101, 1110, 1111$ to $E_{3} E_{2}$.\n- Expand $E_{3} E_{2}' E_{1} E_{0}$ over the don't care at $1111$ to $E_{3} E_{1} E_{0}$.\nThus\n$$\nB_{3} = E_{3} E_{2} + E_{3} E_{1} E_{0}.\n$$\n\nCollecting results:\n$$\nB_{3} = E_{3} E_{2} + E_{3} E_{1} E_{0},\\quad\nB_{2} = E_{2}' E_{1}' + E_{2}' E_{0}' + E_{2} E_{1} E_{0},\\quad\nB_{1} = E_{1}\\oplus E_{0},\\quad\nB_{0} = E_{0}'.\n$$\nThis matches option A.", "answer": "$$\\boxed{A}$$", "id": "1922585"}, {"introduction": "Moving beyond simple translation, this next practice introduces the concept of integrated validation within a code converter. You will design a circuit that not only converts a 4-bit Gray code to its binary equivalent but also determines if the number falls within a valid decimal range (0-9), outputting a validity signal $V$. This task requires you to manage multiple outputs and demonstrates how to design circuits that can both process and check data integrity, a crucial function in reliable digital systems. [@problem_id:1922579]", "problem": "A digital system requires a specialized 4-bit code converter. The converter accepts a 4-bit Gray code input, denoted as $G_3G_2G_1G_0$ where $G_3$ is the most significant bit. It produces two outputs: a 4-bit standard binary representation $B_3B_2B_1B_0$ (with $B_3$ as the most significant bit) corresponding to the input, and a single-bit validity signal, $V$.\n\nThe validity signal $V$ must be logic '1' (high) if and only if the input Gray code represents a decimal value from 0 to 9, inclusive. For all other valid 4-bit Gray code inputs, the validity signal $V$ must be logic '0' (low).\n\nYour task is to determine the Boolean logic for this converter. Assuming the inputs are represented by variables $G_3, G_2, G_1,$ and $G_0$, identify the correct pair of simplified Sum-of-Products (SOP) expressions for the binary output bit $B_2$ and the validity signal $V$. Use a prime symbol ($'$) to denote logical NOT (e.g., $A'$).\n\nSelect the correct option from the choices below.\n\nA. $B_2 = G_3' G_2 + G_3 G_2'$; $V = G_3' + G_3 G_2 G_1'$\nB. $B_2 = G_3' + G_2 G_1'$; $V = G_3' G_2 + G_3 G_2'$\nC. $B_2 = G_3 G_2 + G_3' G_2'$; $V = G_3' G_1 + G_3 G_2$\nD. $B_2 = G_3' G_2 + G_3 G_2'$; $V = G_3' + G_3 G_2 G_0'$\nE. $B_2 = G_3' G_2' + G_3 G_1' G_0$; $V = G_3' G_2 + G_2 G_1'$", "solution": "The standard Gray-to-binary relations are\n$$\nB_{3} = G_{3},\\quad B_{2} = B_{3}\\oplus G_{2},\\quad B_{1} = B_{2}\\oplus G_{1},\\quad B_{0} = B_{1}\\oplus G_{0}.\n$$\nUsing $B_{3} = G_{3}$, the second equation gives\n$$\nB_{2} = G_{3}\\oplus G_{2} = G_{3}' G_{2} + G_{3} G_{2}'.\n$$\n\nThe validity signal must be $V=1$ if and only if the binary value $B_{3}B_{2}B_{1}B_{0}$ is in $\\{0,1,\\dots,9\\}$. The invalid set is $\\{10,11,12,13,14,15\\}$, whose condition in terms of $B$ bits is\n$$\n\\text{invalid}: I = B_{3}(B_{2}+B_{1}).\n$$\nHence, the validity condition is the complement of the invalid condition:\n$$\nV = I' = (B_{3}(B_{2}+B_{1}))' = B_{3}' + (B_{2}+B_{1})' = B_{3}' + B_{2}' B_{1}'.\n$$\nNow we convert $V$ to be in terms of the $G$ variables. Since $B_{3} = G_{3}$, we have\n$$\nV = G_{3}' + B_{2}' B_{1}'.\n$$\nIf $G_{3}=1$, the first term $G_3'$ is 0, so we only need to evaluate the term $B_{2}' B_{1}'$. For $G_3=1$:\n- $B_{2} = G_{3}\\oplus G_{2} = 1 \\oplus G_{2} = G_{2}'$. So, $B_{2}' = G_{2}$.\n- $B_{1} = B_{2}\\oplus G_{1} = G_{2}'\\oplus G_{1}$.\n- $B_{1}' = (G_{2}'\\oplus G_{1})'$. An identity of Boolean algebra shows $(A' \\oplus B)' = A \\oplus B$. Thus, $B_1' = G_2 \\oplus G_1 = G_2' G_1 + G_2 G_1'$.\nTherefore, the product term becomes:\n$$\nB_{2}' B_{1}' = G_{2} (G_{2}' G_{1} + G_{2} G_{1}') = (G_{2} G_{2}' G_{1}) + (G_{2} G_{2} G_{1}') = 0 + G_{2} G_{1}' = G_{2} G_{1}'.\n$$\nIf $G_{3}=0$, the term $G_{3}'$ forces $V=1$, which is correct for all decimal values 0-7. Combining both cases ($G_3=0$ and $G_3=1$) yields the complete expression for $V$:\n$$\nV = G_{3}' + G_{3} G_{2} G_{1}'.\n$$\nThus, the correct expressions are:\n$$\nB_{2} = G_{3}' G_{2} + G_{3} G_{2}',\\qquad V = G_{3}' + G_{3} G_{2} G_{1}',\n$$\nwhich corresponds to option A.", "answer": "$$\\boxed{A}$$", "id": "1922579"}, {"introduction": "This final exercise challenges you to design a reconfigurable code converter, a concept central to modern programmable logic and adaptable hardware. You will create a single circuit that can switch between two different functions—binary-to-one-hot and binary-to-thermometer—based on a mode-select input $M$. This problem illustrates a powerful design pattern for building flexible and efficient systems, where hardware resources are adapted to perform different tasks on demand. [@problem_id:1922558]", "problem": "A specialized Arithmetic Logic Unit (ALU) requires a reconfigurable code converter. This digital circuit accepts a 3-bit unsigned binary number, represented by the inputs $B_2B_1B_0$, where $B_2$ is the most significant bit. The decimal value of the input is given by $k = 4B_2 + 2B_1 + B_0$. The circuit also has a single mode-select input, $M$. The converter produces an 8-bit output, $Y_7Y_6...Y_0$.\n\nThe circuit operates in two distinct modes depending on the value of $M$:\n\n1.  **One-Hot Mode ($M=0$):** In this mode, the circuit performs a binary-to-one-hot conversion. For a given decimal input value $k$, the corresponding output bit $Y_k$ is set to logical 1, while all other output bits are set to logical 0.\n\n2.  **Thermometer Mode ($M=1$):** In this mode, the circuit performs a binary-to-thermometer code conversion. For a given decimal input value $k$, all output bits $Y_j$ where the index $j$ is less than or equal to $k$ (i.e., $j \\le k$) are set to logical 1. All other output bits (where $j > k$) are set to logical 0.\n\nYour task is to determine the simplified logic for a single output bit. Find the minimal Sum-of-Products (SOP) Boolean expression for the output bit $Y_5$ in terms of the four input variables: $M, B_2, B_1,$ and $B_0$. Use standard Boolean algebra notation where addition ($+$) represents the OR operation, multiplication (juxtaposition) represents the AND operation, and a prime symbol ($'$) denotes negation (NOT).", "solution": "The problem asks for the minimal Sum-of-Products (SOP) Boolean expression for the output bit $Y_5$. The behavior of $Y_5$ depends on the mode-select input $M$ and the 3-bit binary input $B_2B_1B_0$. We can express the logic for any output bit $Y_k$ using a multiplexer-like structure based on the mode select $M$:\n$$Y_k = M' \\cdot (\\text{Expression for } Y_k \\text{ in One-Hot Mode}) + M \\cdot (\\text{Expression for } Y_k \\text{ in Thermometer Mode})$$\nLet's denote the one-hot logic for bit $k$ as $H_k$ and the thermometer logic for bit $k$ as $T_k$. Then the expression for $Y_5$ is:\n$$Y_5 = M' \\cdot H_5 + M \\cdot T_5$$\n\nFirst, we determine the Boolean expression for $H_5$.\nIn one-hot mode, the output bit $Y_k$ is 1 only when the decimal value of the input is exactly $k$. For $Y_5$, this means it is 1 only when the input binary number is the representation of 5, which is $B_2B_1B_0 = 101$. This corresponds to the minterm where $B_2=1$, $B_1=0$, and $B_0=1$.\nThus, the expression for $H_5$ is:\n$$H_5 = B_2 B_1' B_0$$\n\nSecond, we determine the Boolean expression for $T_5$.\nIn thermometer mode, the output bit $Y_j$ is 1 if the input decimal value $k$ is greater than or equal to $j$ ($k \\ge j$). For our specific output bit $Y_5$, this means $T_5$ is 1 whenever the input value $k$ is 5, 6, or 7.\nWe need to find a simplified Boolean expression for the condition $k \\ge 5$. The input values that satisfy this are:\n- $k=5 \\implies B_2B_1B_0 = 101$\n- $k=6 \\implies B_2B_1B_0 = 110$\n- $k=7 \\implies B_2B_1B_0 = 111$\n\nThe sum of the minterms for these cases is:\n$$T_5 = B_2 B_1' B_0 + B_2 B_1 B_0' + B_2 B_1 B_0$$\nWe can simplify this expression using Boolean algebra:\n$$T_5 = B_2 B_1' B_0 + B_2 B_1 (B_0' + B_0)$$\nSince $B_0' + B_0 = 1$:\n$$T_5 = B_2 B_1' B_0 + B_2 B_1$$\nFactoring out $B_2$:\n$$T_5 = B_2 (B_1' B_0 + B_1)$$\nUsing the absorption law $X+X'Y = X+Y$:\n$$T_5 = B_2 (B_1 + B_0)$$\nSo, the simplified expression for the thermometer logic component is $T_5 = B_2(B_1 + B_0)$, which expands to $B_2 B_1 + B_2 B_0$.\n\nNow, we substitute the expressions for $H_5$ and $T_5$ back into the main equation for $Y_5$:\n$$Y_5 = M' (B_2 B_1' B_0) + M (B_2 B_1 + B_2 B_0)$$\n$$Y_5 = M' B_2 B_1' B_0 + M B_2 B_1 + M B_2 B_0$$\nThis is a valid SOP expression, but it may not be minimal. To find the minimal SOP, we can use a 4-variable Karnaugh map (K-map) for the function $Y_5(M, B_2, B_1, B_0)$. The minterms for which $Y_5=1$ are:\n- From $M' B_2 B_1' B_0$: $MB_2B_1B_0 = 0101$ (minterm 5)\n- From $M B_2 B_1$: $MB_2B_1B_0 = 1110$ (minterm 14) and $1111$ (minterm 15)\n- From $M B_2 B_0$: $MB_2B_1B_0 = 1101$ (minterm 13) and $1111$ (minterm 15)\n\nThe K-map is as follows, with rows for $MB_2$ and columns for $B_1B_0$:\n$$\n\\begin{array}{c|cccc}\nY_5 & B_1B_0=00 & 01 & 11 & 10 \\\\\n\\hline\nMB_2=00 & 0 & 0 & 0 & 0 \\\\\nMB_2=01 & 0 & 1 & 0 & 0 \\\\\nMB_2=11 & 0 & 1 & 1 & 1 \\\\\nMB_2=10 & 0 & 0 & 0 & 0 \\\\\n\\end{array}\n$$\nThe 1s are at positions $(M,B_2,B_1,B_0) = (0,1,0,1)$, $(1,1,0,1)$, $(1,1,1,1)$, and $(1,1,1,0)$.\n\nWe group the 1s to find the prime implicants:\n- The `1` at minterm 5 ($0101$) can be grouped with the `1` at minterm 13 ($1101$). This group is independent of $M$, and corresponds to the term $B_2 B_1' B_0$. This is an essential prime implicant because minterm 5 is covered only by this group.\n- The `1` at minterm 14 ($1110$) can be grouped with the `1` at minterm 15 ($1111$). This group corresponds to the term $M B_2 B_1$. This is an essential prime implicant because minterm 14 is covered only by this group.\n\nThese two essential prime implicants cover all the 1s on the map:\n- The first group ($B_2 B_1' B_0$) covers minterms 5 and 13.\n- The second group ($M B_2 B_1$) covers minterms 14 and 15.\nTogether, they cover all required minterms (5, 13, 14, 15).\n\nThus, the minimal Sum-of-Products expression for $Y_5$ is the sum of these two essential prime implicants:\n$$Y_5 = B_2 B_1' B_0 + M B_2 B_1$$", "answer": "$$\\boxed{B_2 B_1' B_0 + M B_2 B_1}$$", "id": "1922558"}]}