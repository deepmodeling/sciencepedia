{"hands_on_practices": [{"introduction": "The cornerstone of digital logic design is translating functional requirements into a precise mathematical expression. This first practice embodies that process, tasking you with creating the control logic for a single display segment based on a clear set of rules [@problem_id:1912499]. By deriving the Boolean function for segment 'g', you will gain hands-on experience with the fundamental steps of interpreting a truth table, handling specific constraints for invalid inputs, and performing logic minimization to arrive at an efficient Sum-of-Products expression.", "problem": "You are a junior digital logic designer tasked with creating the control logic for a standard seven-segment display. The display is of the common-cathode type, meaning a logic HIGH (1) signal turns a segment ON, and a logic LOW (0) turns it OFF. The system receives a 4-bit Binary Coded Decimal (BCD) input, represented by the variables $D, C, B, A$, where $D$ is the Most Significant Bit (MSB).\n\nYour specific task is to design the circuit for segment 'g'. The behavior of the display is defined as follows:\n- For valid BCD inputs (representing decimal digits 0 through 9), the display must show the corresponding digit. The segments that are active for each digit are listed in the table below.\n- For any invalid BCD input (corresponding to decimal values 10 through 15), the display must be completely blank, meaning all seven segments (including 'g') must be turned OFF.\n\n| Decimal Digit | Active Segments |\n|:-------------:|:---------------:|\n| 0             | a, b, c, d, e, f|\n| 1             | b, c            |\n| 2             | a, b, d, e, g   |\n| 3             | a, b, c, d, g   |\n| 4             | b, c, f, g      |\n| 5             | a, c, d, f, g   |\n| 6             | a, c, d, e, f, g|\n| 7             | a, b, c         |\n| 8             | a, b, c, d, e, f, g|\n| 9             | a, b, c, d, f, g|\n\nDerive the minimal Sum-of-Products (SOP) expression for the output function $g(D, C, B, A)$ that controls segment 'g'. In your final expression, use an overline to denote the NOT operation (e.g., $\\overline{D}$).", "solution": "The segment is ON for decimal digits whose Active Segments include 'g' and OFF otherwise. From the table, $g=1$ for digits $2, 3, 4, 5, 6, 8, 9$ and $g=0$ for digits $0, 1, 7$ and for all invalid BCD inputs $10$ through $15$ (explicitly required to be OFF, so they are zeros, not don’t-cares).\n\nMap decimal digits to BCD minterms using $D$ (8), $C$ (4), $B$ (2), $A$ (1). Thus the on-set is\n$$\ng(D,C,B,A)=\\sum m(2,3,4,5,6,8,9),\n$$\nwith minterms\n$$\n\\begin{aligned}\n2&: 0010,\\quad 3: 0011,\\quad 4: 0100,\\quad 5: 0101,\\\\\n6&: 0110,\\quad 8: 1000,\\quad 9: 1001.\n\\end{aligned}\n$$\n\nPerforming Karnaugh-map (or equivalent Boolean) minimization without using invalid inputs as don’t-cares:\n\n- Pair $m2$ and $m3$: these differ only in $A$, yielding $\\overline{D}\\,\\overline{C}\\,B$.\n- Pair $m4$ and $m5$: these differ only in $A$, yielding $\\overline{D}\\,C\\,\\overline{B}$.\n- Pair $m8$ and $m9$: these differ only in $A$, yielding $D\\,\\overline{C}\\,\\overline{B}$.\n- Cover $m6$ by pairing with $m2$ (differ only in $C$) since $m7$ and $m14$ are $0$: this yields $\\overline{D}\\,B\\,\\overline{A}$.\n\nNo larger implicants are possible because the adjacent cells needed for expansion correspond to invalid BCD inputs that are constrained to $0$. Therefore, a minimal Sum-of-Products is\n$$\ng=\\overline{D}\\,\\overline{C}\\,B+\\overline{D}\\,C\\,\\overline{B}+\\overline{D}\\,B\\,\\overline{A}+D\\,\\overline{C}\\,\\overline{B}.\n$$\n\nVerification: this expression evaluates to $1$ exactly for $2,3,4,5,6,8,9$ and to $0$ for $0,1,7$ and all $10$–$15$, satisfying the requirement that invalid inputs blank the display.", "answer": "$$\\boxed{\\overline{D}\\,\\overline{C}\\,B + \\overline{D}\\,C\\,\\overline{B} + D\\,\\overline{C}\\,\\overline{B} + \\overline{D}\\,B\\,\\overline{A}}$$", "id": "1912499"}, {"introduction": "Once a functional design is established, an engineer's next goal is often optimization: creating a circuit that is simpler, faster, and cheaper. This exercise introduces the powerful concept of \"don't care\" conditions, which allows for significantly more streamlined logic when certain input combinations will never occur [@problem_id:1912526]. You will then take this optimized logic a step further by implementing it using only two-input NAND gates, a universal gate type commonly used in manufacturing, providing a crucial bridge from abstract theory to practical circuit construction.", "problem": "An engineer is tasked with designing a custom logic driver for a vintage numerical display. The display is a common-cathode seven-segment type, which means a segment lights up when its corresponding control line is at a logic HIGH (1) state. The input to the driver is a 4-bit Binary-Coded Decimal (BCD) signal, represented by the variables $D, C, B, A$, where $D$ is the Most Significant Bit (MSB). The BCD input represents decimal digits from 0 to 9. The binary combinations corresponding to decimal values 10 through 15 are invalid inputs and can be treated as \"don't care\" conditions.\n\nYour task is to determine the logic for the control line of segment 'a'. In this particular display, segment 'a' is illuminated for the decimal digits 0, 2, 3, 5, 6, 7, 8, and 9.\n\nYou must implement the resulting logic function using only two-input NAND gates. Assuming that only the primary input variables ($D, C, B, A$) are available (not their complements), what is the minimum number of two-input NAND gates required to build this circuit?", "solution": "Let the BCD inputs be $D$ (MSB), $C$, $B$, $A$. Segment 'a' is ON for decimal digits $0, 2, 3, 5, 6, 7, 8, 9$. This corresponds to minterms $m_{0},m_{2},m_{3},m_{5},m_{6},m_{7},m_{8},m_{9}$. The binary combinations for $10-15$ are don't-care conditions. The OFF minterms are $m_{1}$ and $m_{4}$.\n\nUsing a 4-variable Karnaugh map with inputs $D, C, B, A$ and including don't cares for simplification, we can find a minimal Sum-of-Products (SOP) expression.\nA correct minimal SOP for segment 'a' is:\n$$ f = D + B + \\overline{(C \\oplus A)} $$\nThis can be rewritten as:\n$$ f = D + B + (C \\text{ XNOR } A) $$\nTo implement this with NAND gates, we use De Morgan's laws to get a NAND-NAND structure.\n$$ f = \\overline{\\overline{f}} = \\overline{\\overline{D + B + (C \\text{ XNOR } A)}} = \\overline{\\overline{D} \\cdot \\overline{B} \\cdot \\overline{(C \\text{ XNOR } A)}} = \\overline{\\overline{D} \\cdot \\overline{B} \\cdot (C \\oplus A)} $$\nThis expression can be implemented as a three-input NAND of $\\overline{D}$, $\\overline{B}$, and $(C \\oplus A)$. With only two-input NAND gates, this becomes:\n$$ f = \\text{NAND}(\\text{NAND}(\\overline{D}, \\overline{B}), (C \\oplus A)) $$\nNow, we count the gates needed to build this structure from the primary inputs $D, C, B, A$:\n\n1.  Generate $\\overline{D}$: $1$ gate ($\\text{NAND}(D, D)$).\n2.  Generate $\\overline{B}$: $1$ gate ($\\text{NAND}(B, B)$).\n3.  Generate $(C \\oplus A)$: This requires the standard 4-gate implementation using two-input NANDs.\n    - $g_1 = \\text{NAND}(C, A)$\n    - $g_2 = \\text{NAND}(C, g_1)$\n    - $g_3 = \\text{NAND}(A, g_1)$\n    - $C \\oplus A = \\text{NAND}(g_2, g_3)$\n    This sub-circuit costs $4$ gates.\n4.  Combine $\\overline{D}$ and $\\overline{B}$: $g_4 = \\text{NAND}(\\overline{D}, \\overline{B})$. This costs $1$ gate.\n5.  Perform the final combination: $f = \\text{NAND}(g_4, (C \\oplus A))$. This costs $1$ gate.\n\nTotal gate count is the sum of these parts: $1 (\\text{for }\\overline{D}) + 1 (\\text{for }\\overline{B}) + 4 (\\text{for } C \\oplus A) + 1 (\\text{for } g_4) + 1 (\\text{for } f) = 8$ gates.\n\nTherefore, a minimum of 8 two-input NAND gates are required.", "answer": "$$\\boxed{8}$$", "id": "1912526"}, {"introduction": "An essential skill for any electronics engineer or technician is the ability to troubleshoot and diagnose faults. This practice moves you from the role of designer to that of a detective [@problem_id:1912565]. Presented with a malfunctioning seven-segment display, your challenge is to use the observed symptoms to deduce the exact nature and location of the underlying hardware failure. This exercise sharpens your analytical reasoning and reinforces your understanding of how logic gates, display types, and physical faults interact in a real-world system.", "problem": "An electronics technician is troubleshooting a custom-built digital instrument that uses a Binary-Coded Decimal (BCD) to seven-segment decoder driver. The decoder is designed to drive a common-anode display, where an output of logic `0` turns a segment ON and logic `1` turns it OFF. The BCD input is a 4-bit word represented by $D, C, B, A$, where $D$ is the most significant bit. The seven segments of the display, labeled $a$ through $g$, are arranged in the standard configuration shown below:\n\n```\n  a\n ---\nf| g |b\n ---\ne|   |c\n ---\n  d\n```\n\nThe decoder is designed to produce the following standard display patterns:\n- 0: {a, b, c, d, e, f}\n- 1: {b, c}\n- 2: {a, b, d, e, g}\n- 3: {a, b, c, d, g}\n- 4: {b, c, f, g}\n- 5: {a, c, d, f, g}\n- 6: {a, c, d, e, f, g}\n- 7: {a, b, c}\n- 8: {a, b, c, d, e, f, g}\n- 9: {a, b, c, d, f, g}\n\nThe technician observes two specific malfunctions:\n1. When the BCD input is for the digit `9` ($1001$), the display incorrectly shows the digit `8`.\n2. When the BCD input is for the digit `5` ($0101$), the display incorrectly shows the digit `6`.\n\nAssuming there is a single, persistent fault where one of the seven segment output lines ($a$ through $g$) is stuck at a constant logic level (either `0` or `1`), identify the faulty line and its stuck-at state.\n\nA. Segment $a$ is stuck-at-0\n\nB. Segment $a$ is stuck-at-1\n\nC. Segment $b$ is stuck-at-0\n\nD. Segment $b$ is stuck-at-1\n\nE. Segment $c$ is stuck-at-0\n\nF. Segment $c$ is stuck-at-1\n\nG. Segment $d$ is stuck-at-0\n\nH. Segment $d$ is stuck-at-1\n\nI. Segment $e$ is stuck-at-0\n\nJ. Segment $e$ is stuck-at-1\n\nK. Segment $f$ is stuck-at-0\n\nL. Segment $f$ is stuck-at-1\n\nM. Segment $g$ is stuck-at-0\n\nN. Segment $g$ is stuck-at-1", "solution": "In a common-anode seven-segment display, a logic $0$ at a segment output turns that segment ON, while a logic $1$ turns it OFF. A stuck-at-$0$ fault forces a segment always ON; a stuck-at-$1$ fault forces it always OFF.\n\nLet $S(n)$ denote the set of segments that should be ON for digit $n$. From the standard patterns:\n$$S(9)=\\{a,b,c,d,f,g\\},\\quad S(8)=\\{a,b,c,d,e,f,g\\},\\quad S(5)=\\{a,c,d,f,g\\},\\quad S(6)=\\{a,c,d,e,f,g\\}.$$\n\nFirst malfunction: for input $9$, the display shows $8$. The only difference between the segments that are ON for an `8` and the segments that are ON for a `9` is segment $e$:\n$$S(8)\\setminus S(9)=\\{e\\}.$$\nFor the input `9`, segment $e$ is supposed to be OFF (logic `1` output). The observation that it is ON means it has been incorrectly activated. In a common-anode system, forcing a segment ON corresponds to its control line being forced to logic `0`. This leads to the hypothesis that segment $e$'s output line is stuck-at-$0$.\n\nSecond malfunction: for input $5$, the display shows $6$. Let's test our hypothesis. If segment $e$ is stuck-at-0 (always ON), the actual set of lit segments for input `5` would be the intended set, $S(5)$, plus the faulty segment $e$:\n$$S(5)\\cup\\{e\\}=\\{a,c,d,f,g\\}\\cup\\{e\\}=\\{a,c,d,e,f,g\\}$$\nThis resulting set of segments, $\\{a,c,d,e,f,g\\}$, is precisely the pattern for the digit `6`. This matches the observed error and confirms the diagnosis.\n\nA stuck-at-$1$ fault would force a segment to be always OFF, which contradicts both observations where an extra segment incorrectly appears. The only single-line fault consistent with both malfunctions is segment $e$ stuck-at-$0$.\n\nTherefore, the correct choice is I.", "answer": "$$\\boxed{I}$$", "id": "1912565"}]}