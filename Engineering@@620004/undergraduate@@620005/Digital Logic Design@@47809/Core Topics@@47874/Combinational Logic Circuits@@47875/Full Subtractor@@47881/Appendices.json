{"hands_on_practices": [{"introduction": "The art of digital design often involves creativity within constraints, such as implementing a desired logic function using a limited set of standard components. This exercise challenges you to implement the borrow-out logic of a full subtractor using only a 4-to-1 multiplexer. This common practice develops your ability to see how versatile building blocks like multiplexers can be used to realize arbitrary Boolean functions, a key skill for efficient and practical circuit design [@problem_id:1939069].", "problem": "In a digital logic design lab, you are tasked with realizing a specific Boolean function using a limited set of components. Your goal is to implement the borrow-out ($B_{out}$) logic of a full subtractor. A full subtractor computes the operation $A - B - B_{in}$, where $A$ is the minuend bit, $B$ is the subtrahend bit, and $B_{in}$ is the borrow-in bit from a previous, less significant stage. The outputs of the full subtractor are the difference bit $D$ and the borrow-out bit $B_{out}$.\n\nYour available hardware is restricted to a single 4-to-1 multiplexer and no other logic gates (such as AND, OR, or NOT gates). The multiplexer has four data inputs ($I_0, I_1, I_2, I_3$), two select lines ($S_1, S_0$), and one output $Y$.\n\nFor this implementation, the primary inputs $A$ and $B$ are connected to the select lines $S_1$ and $S_0$, respectively. Your task is to determine the correct signals to connect to the data inputs $I_0, I_1, I_2,$ and $I_3$ to correctly generate the $B_{out}$ function at the multiplexer's output $Y$. The only available signals for these data inputs are the logic level '0' (LOW/Ground), the logic level '1' (HIGH/Vcc), and the primary input signal $B_{in}$.\n\nWhich of the following ordered tuples $(I_0, I_1, I_2, I_3)$ represents the correct connections for the data inputs of the 4-to-1 multiplexer?\n\nA. $(B_{in}, B_{in}, 0, 1)$\nB. $(0, B_{in}, B_{in}, 1)$\nC. $(B_{in}, 1, 0, B_{in})$\nD. $(1, 0, B_{in}, B_{in})$\nE. $(0, 1, 1, B_{in})$", "solution": "We seek the borrow-out function $B_{out}$ of a full subtractor in terms of $A$, $B$, and $B_{in}$ using only a 4-to-1 multiplexer with select lines $S_{1}=A$ and $S_{0}=B$. The standard Boolean expression for the full subtractor borrow is\n$$\nB_{out}=\\overline{A}(B+B_{in})+BB_{in}=\\overline{A}B+\\overline{A}B_{in}+BB_{in}.\n$$\nA 4-to-1 multiplexer outputs $I_{0}, I_{1}, I_{2}, I_{3}$ when $(S_{1},S_{0})=(0,0),(0,1),(1,0),(1,1)$, respectively. With $S_{1}=A$ and $S_{0}=B$, we evaluate $B_{out}$ for each fixed pair $(A,B)$ to determine the required data input signal as a function of $B_{in}$:\n$$\n\\begin{aligned}\nA=0,\\ B=0:&\\quad B_{out}=\\overline{0}(0+B_{in})+0\\cdot B_{in}=1\\cdot B_{in}+0=B_{in}\\ \\Rightarrow\\ I_{0}=B_{in},\\\\\nA=0,\\ B=1:&\\quad B_{out}=\\overline{0}(1+B_{in})+1\\cdot B_{in}=1+ B_{in}=1\\ \\Rightarrow\\ I_{1}=1,\\\\\nA=1,\\ B=0:&\\quad B_{out}=\\overline{1}(0+B_{in})+0\\cdot B_{in}=0+0=0\\ \\Rightarrow\\ I_{2}=0,\\\\\nA=1,\\ B=1:&\\quad B_{out}=\\overline{1}(1+B_{in})+1\\cdot B_{in}=0+B_{in}=B_{in}\\ \\Rightarrow\\ I_{3}=B_{in}.\n\\end{aligned}\n$$\nTherefore, the correct ordered tuple is $(I_{0},I_{1},I_{2},I_{3})=(B_{in},1,0,B_{in})$, which corresponds to option C.", "answer": "$$\\boxed{C}$$", "id": "1939069"}, {"introduction": "While a single full subtractor cell is a fundamental unit, its true power is unlocked when multiple cells are cascaded to perform multi-bit subtraction. This exercise explores the performance limitations of such a \"ripple-borrow\" subtractor by asking you to identify the input conditions that cause the maximum possible delay. Understanding this worst-case scenario is critical for timing analysis and reveals the core concepts of borrow \"propagation\" and \"generation,\" which are fundamental to designing faster arithmetic circuits [@problem_id:1939084].", "problem": "In digital logic design, an $n$-bit ripple-borrow subtractor is constructed by cascading $n$ full subtractor stages. A single full subtractor stage, indexed by $i$, takes three inputs: the minuend bit $A_i$, the subtrahend bit $B_i$, and the borrow-in bit from the previous stage, $B_{in,i}$. It produces two outputs: the difference bit $D_i$ and the borrow-out bit $B_{out,i}$, which serves as the borrow-in for the next stage, i.e., $B_{in,i+1} = B_{out,i}$. For the entire $n$-bit operation, the minuend is $A = A_{n-1}A_{n-2}...A_0$, the subtrahend is $B = B_{n-1}B_{n-2}...B_0$, and the initial borrow-in to the least significant stage (stage 0), $B_{in,0}$, is held at 0.\n\nThe overall speed of this subtractor is limited by the propagation of the borrow signal through the cascade. The worst-case delay scenario for computing the final borrow-out, $B_{out,n-1}$, occurs when the borrow signal must propagate sequentially through the maximum number of stages. This maximum propagation path is established when the borrow-out of each stage $i$ (for $i=0$ to $n-1$) is directly dependent on its borrow-in, $B_{in,i}$.\n\nWhich of the following relationships between the $n$-bit minuend $A$ and the $n$-bit subtrahend $B$ ensures this worst-case propagation condition is met for all $n$ stages?\n\nA. The bits of $A$ and $B$ are identical, i.e., $A_i = B_i$ for all $i \\in \\{0, ..., n-1\\}$.\nB. The bits of $A$ are the logical inverse of the bits of $B$, i.e., $A_i = \\overline{B_i}$ for all $i \\in \\{0, ..., n-1\\}$.\nC. The minuend $A$ is zero ($A_i=0$ for all $i$) and the subtrahend $B$ is the maximum unsigned value ($B_i=1$ for all $i$).\nD. The minuend $A$ is the two's complement of the subtrahend $B$.", "solution": "To solve this problem, we need to find the input conditions that cause a borrow signal to propagate through a full subtractor stage without being stopped or generated within that stage. This creates the longest delay path in a ripple-borrow subtractor.\n\nThe logic for the borrow-out signal, $B_{out,i}$, of a full subtractor can be expressed in a standard \"generate-propagate\" form:\n$$B_{out,i} = g_i + p_i \\cdot B_{in,i}$$\nHere:\n*   $g_i$ is the \"borrow generate\" term. A borrow is generated within the stage if $g_i=1$, regardless of the input borrow $B_{in,i}$. This happens when $A_i=0$ and $B_i=1$, so the logical expression is $g_i = \\overline{A_i}B_i$.\n*   $p_i$ is the \"borrow propagate\" term. If $p_i=1$ and $g_i=0$, the input borrow is propagated to the output, i.e., $B_{out,i} = B_{in,i}$. This propagation occurs when the local subtraction $A_i - B_i$ results in 0, which happens if and only if $A_i = B_i$. The logical expression for this condition is $p_i = \\overline{A_i \\oplus B_i}$ (or equivalently, $A_i \\odot B_i$).\n\nThe worst-case delay for the ripple chain occurs when each stage *propagates* the borrow from the previous stage. For a stage to be in propagate mode, two conditions must be met:\n1.  The stage must not generate a borrow on its own: $g_i = \\overline{A_i}B_i = 0$.\n2.  The stage must be set to propagate: $p_i = \\overline{A_i \\oplus B_i} = 1$.\n\nLet's analyze the second condition. $p_i = 1$ implies that $\\overline{A_i \\oplus B_i} = 1$, which means $A_i \\oplus B_i = 0$. This is true only when $A_i = B_i$.\n\nNow let's check if this condition ($A_i = B_i$) also satisfies the first requirement ($g_i=0$). If $A_i = B_i$, then the generate term $g_i = \\overline{A_i}B_i$ becomes $\\overline{A_i}A_i = 0$. The condition is satisfied.\n\nTherefore, when $A_i = B_i$, the borrow-out equation simplifies to:\n$$B_{out,i} = 0 + 1 \\cdot B_{in,i} = B_{in,i}$$\nThis means the borrow signal passes directly through the stage. To create the maximum delay path across an $n$-bit subtractor, this propagation condition must hold for every stage from $i=0$ to $n-1$.\n\nThus, the required relationship is $A_i = B_i$ for all $i \\in \\{0, ..., n-1\\}$, which means the $n$-bit minuend $A$ must be identical to the $n$-bit subtrahend $B$. This corresponds to option A.", "answer": "$$\\boxed{A}$$", "id": "1939084"}, {"introduction": "A circuit that is correct in theory can behave unexpectedly in the real world due to manufacturing flaws. This practice problem transitions from ideal design to practical analysis by examining a full subtractor with a \"stuck-at-1\" fault on one of its inputs. By determining which input combinations cause the faulty circuit to produce an incorrect result, you will develop skills in fault analysis and diagnosis, which are essential for testing digital systems and ensuring their reliability [@problem_id:1939103].", "problem": "A digital full subtractor is a combinational logic circuit that performs the binary subtraction of three input bits: the minuend $A$, the subtrahend $B$, and the borrow-in from a previous stage, $B_{in}$. The circuit produces two outputs: the difference bit $D$ and the borrow-out bit $B_{out}$, which represents the borrow for the next more significant stage.\n\nConsider a particular full subtractor integrated circuit that has a manufacturing defect. This defect causes the input line for the subtrahend $B$ to be \"stuck-at-1\". This means that the internal circuitry connected to this input always operates as if the input $B$ is a logic '1', regardless of the actual logic level applied to the external pin for $B$. The inputs $A$ and $B_{in}$ function correctly.\n\nIdentify the complete set of all possible input combinations of $(A, B, B_{in})$ for which this faulty subtractor will produce an incorrect value for the `Difference` output, $D$.\n\nA. (0,0,0), (0,0,1), (1,0,0), (1,0,1)\nB. (0,1,0), (0,1,1), (1,1,0), (1,1,1)\nC. (0,0,1), (0,1,0), (1,0,0), (1,1,1)\nD. (0,0,0), (0,1,1), (1,0,1), (1,1,0)\nE. (0,0,0), (0,1,0), (1,0,0), (1,1,0)", "solution": "A full subtractor’s difference output is given by the XOR of its three inputs:\n$$D_{\\text{ideal}}=A \\oplus B \\oplus B_{in}.$$\nWith the defect “$B$ stuck-at-1,” the internal circuitry always sees $B=1$, so the faulty difference is\n$$D_{\\text{faulty}}=A \\oplus 1 \\oplus B_{in}.$$\nTo find when the output is incorrect, compute the XOR of the faulty and ideal outputs:\n$$E = D_{\\text{faulty}} \\oplus D_{\\text{ideal}} = (A \\oplus 1 \\oplus B_{in}) \\oplus (A \\oplus B \\oplus B_{in}).$$\nUsing associativity, commutativity, and the cancellation property $X \\oplus X = 0$, we get\n$$E = (A \\oplus A) \\oplus (B_{in} \\oplus B_{in}) \\oplus 1 \\oplus B = 0 \\oplus 0 \\oplus 1 \\oplus B = 1 \\oplus B.$$\nAn incorrect output occurs when $E=1$, which is when $B=0$. Therefore, all input combinations with $B=0$ yield an incorrect difference:\n$$(A,B,B_{in}) \\in \\{(0,0,0),(0,0,1),(1,0,0),(1,0,1)\\}.$$\nThis corresponds to option A.", "answer": "$$\\boxed{A}$$", "id": "1939103"}]}