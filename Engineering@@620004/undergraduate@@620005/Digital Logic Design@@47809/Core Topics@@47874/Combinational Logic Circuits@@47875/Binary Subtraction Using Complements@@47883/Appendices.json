{"hands_on_practices": [{"introduction": "To begin, let's practice the fundamental mechanism of 2's complement subtraction, which is central to how modern processors handle arithmetic. This exercise simulates how a processor's Arithmetic Logic Unit (ALU) efficiently performs subtraction by converting it into an addition, a foundational concept in digital logic design. By working through this problem [@problem_id:1915006], you will solidify your understanding of finding the 2's complement of a number and using a binary adder to compute a difference.", "problem": "A processor's Arithmetic Logic Unit (ALU) is designed to operate on 4-bit signed integers that are represented in the two's complement format. To perform a subtraction operation, such as $Y - X$, the ALU hardware is optimized to compute the two's complement of the subtrahend ($X$) and then add the result to the minuend ($Y$). The entire operation is handled by a 4-bit adder circuit. Any carry-out bit generated from the addition of the most significant bits is discarded.\n\nSuppose two 4-bit registers supply the following operands to the ALU:\nRegister X contains the binary value $1100_2$.\nRegister Y contains the binary value $0110_2$.\n\nThe ALU is instructed to compute the operation $Y - X$. Determine the final 4-bit binary string that results from this computation as it would appear at the output of the 4-bit adder.", "solution": "The ALU computes $Y - X$ by forming the two's complement of $X$ and adding it to $Y$, using only $4$ bits and discarding any carry-out beyond the most significant bit. The two's complement of a $4$-bit word $X$ is $\\overline{X} + 1$, where $\\overline{X}$ denotes the bitwise complement, and all intermediate and final results are reduced modulo $2^{4}$.\n\nGiven $X = 1100_{2}$ and $Y = 0110_{2}$, compute the two's complement of $X$:\n$$\n\\overline{X} = 0011_{2}, \\quad \\overline{X} + 1 = 0011_{2} + 0001_{2} = 0100_{2}.\n$$\nThus $-X$ in $4$-bit two's complement is $0100_{2}$.\n\nNow add this to $Y$ using a $4$-bit adder:\n$$\n0110_{2} + 0100_{2} = 1010_{2}.\n$$\nPerforming the addition bitwise with carries confirms no carry-out beyond the most significant bit, so the $4$-bit adder output is the lower $4$ bits:\n$$\n1010_{2}.\n$$\nThis is the final $4$-bit binary string produced by the adder for the operation $Y - X$.", "answer": "$$\\boxed{1010_{2}}$$", "id": "1915006"}, {"introduction": "Now that we've seen how subtraction is performed, we must address a critical issue: arithmetic overflow. This error occurs when the true result of a calculation is too large or too small to be represented within the system's fixed bit-width, leading to incorrect results. This practice [@problem_id:1914994] challenges you to not only compute a result but also to apply the rules for detecting overflow, a crucial skill for ensuring the integrity of digital computations.", "problem": "A hypothetical 8-bit microprocessor has a simplified Arithmetic Logic Unit (ALU) that performs arithmetic on 6-bit signed integers. The numbers are represented in the 2's complement format. The ALU is tasked with executing the subtraction operation `R1 - R2`, where the decimal value in register R1 is 16 and the decimal value in register R2 is -20. The operation is carried out by computing the sum of R1 and the 2's complement of R2.\n\nYour task is to determine the 6-bit binary result of this operation as it would be stored in the destination register and to identify whether an arithmetic overflow occurs. An overflow is said to occur if the true result of the arithmetic operation cannot be represented within the 6-bit 2's complement range.\n\nWhich of the following options correctly states the final 6-bit binary result and the overflow status?\n\nA. Result: $100100_2$, Overflow: Yes\nB. Result: $100100_2$, Overflow: No\nC. Result: $111100_2$, Overflow: No\nD. Result: $100011_2$, Overflow: Yes\nE. Result: $010000_2$, Overflow: No", "solution": "In 6-bit two's complement, the representable range is from $-2^{5}$ to $2^{5}-1$, i.e., from $-32$ to $31$. Subtraction is implemented as addition with two's complement: $R1 - R2 = R1 + (\\text{two's complement of }R2)$.\n\nFirst encode the operands:\n- $R1=16$ has 6-bit form $010000_{2}$.\n- To encode $R2=-20$, start from $+20=010100_{2}$, invert to get $101011_{2}$, then add $1$ to obtain $101100_{2}$. Thus $R2=-20$ is $101100_{2}$.\n\nCompute the two's complement of $R2$'s bit pattern to form $-R2=+20$:\n$$\\text{two's complement}(101100_{2})=010100_{2}.$$\n\nNow perform the addition:\n$$010000_{2}+010100_{2}=100100_{2}.$$\n\nInterpretation and overflow:\n- The true arithmetic result is $16-(-20)=36$, which lies outside the 6-bit two's complement range $[-32,31]$, so overflow occurs.\n- Alternatively, adding two positive operands ($010000_{2}$ and $010100_{2}$) produced a result with sign bit $1$ ($100100_{2}$), which is the two's complement overflow condition for addition.\n\nTherefore, the stored 6-bit result is $100100_{2}$ and an overflow is flagged. This matches option A.", "answer": "$$\\boxed{A}$$", "id": "1914994"}, {"introduction": "Moving from analysis to design, our final practice addresses a key engineering decision: determining the minimum resources required for a reliable computation. Instead of performing a calculation within a given bit-width, your task is to determine the smallest bit-width, $n$, needed to perform a specific subtraction without causing an overflow. This exercise [@problem_id:1914964] reflects the practical challenges faced by digital systems engineers when designing processors that are both efficient and arithmetically correct.", "problem": "A digital systems engineer is designing a specialized processor with a fixed-width architecture. A key operation this processor must perform is signed integer subtraction. The engineer is analyzing a specific test case: subtracting the decimal value $B=80$ from the decimal value $A=50$. The subtraction is implemented using the 2's complement method, where the operation $A-B$ is computed as $A + (\\text{2's complement of } B)$. To ensure correct operation, the chosen bit width, $n$, must be large enough to represent the initial operands ($A$ and $B$) as well as the final result of the subtraction, without any loss of data or overflow during the computation. What is the minimum integer value of $n$ required for this specific operation?", "solution": "We require a bit width $n$ such that all values involved in the two's complement subtraction $A-B$ are representable without overflow. The operation is implemented as $A + (\\text{2's complement of } B)$, so the values that must be representable in $n$-bit two's complement are $A=50$, $B=80$, the two's complement of $B$ which is $-80$, and the result $A-B=50-80=-30$.\n\nIn $n$-bit two's complement, the representable range is\n$$\n-2^{n-1} \\le x \\le 2^{n-1}-1.\n$$\nThus, the constraints are:\n- For $A=50$: $50 \\le 2^{n-1}-1$.\n- For $B=80$: $80 \\le 2^{n-1}-1$.\n- For $-80$: $-80 \\ge -2^{n-1}$, which is equivalent to $2^{n-1} \\ge 80$.\n- For the result $-30$: $-30 \\ge -2^{n-1}$ and $-30 \\le 2^{n-1}-1$ (automatically satisfied if the above stronger bounds hold).\n\nCombining the strictest positive-side requirement with the negative-side requirement gives\n$$\n2^{n-1} \\ge 81.\n$$\nTo find the minimal integer $n$ satisfying this, note that $2^{6}=64<81$ and $2^{7}=128 \\ge 81$, hence the minimal $n-1$ is $7$, so\n$$\nn=8.\n$$\nWith $n=8$, the range is $-128$ to $127$, which includes $50$, $80$, $-80$, and $-30$, ensuring no overflow in the computation $50 + (-80)$.", "answer": "$$\\boxed{8}$$", "id": "1914964"}]}