{"hands_on_practices": [{"introduction": "Before we can build complex circuits with multiplexers, we must first master their fundamental operation. This exercise provides a direct way to practice this by translating a specific MUX configuration into its equivalent Boolean logic expression. By working through this problem, you will solidify your understanding of how select lines gate the data inputs to produce the final output, a core skill for analyzing any MUX-based circuit. [@problem_id:1948542]", "problem": "A 4-to-1 Multiplexer (MUX) is a digital logic circuit that selects one of four data input lines and forwards it to a single output line. The selection is controlled by a 2-bit binary address.\n\nConsider a 4-to-1 MUX with two select lines, $B$ and $A$, and four data inputs, $D_0, D_1, D_2, D_3$. The select input $B$ is the most significant bit (MSB), and $A$ is the least significant bit (LSB). When the select lines $BA$ form the binary equivalent of an integer $i$, the data input $D_i$ is selected. The data inputs are connected to a third variable, $C$, and constant logic levels as follows: $D_0 = C$, $D_1 = \\bar{C}$, $D_2 = 1$ (logic high), and $D_3 = 0$ (logic low). The overbar notation (e.g., $\\bar{C}$) represents the logical NOT operation.\n\nDetermine the simplified Boolean expression for the output $F$ in terms of the inputs $A, B,$ and $C$.", "solution": "A 4-to-1 MUX output can be written as a sum of the data inputs gated by the select-line minterms. With select lines $B$ (MSB) and $A$ (LSB), the output is\n$$\nF=\\bar{B}\\bar{A}D_{0}+\\bar{B}AD_{1}+B\\bar{A}D_{2}+BAD_{3}.\n$$\nSubstitute the given data inputs $D_{0}=C$, $D_{1}=\\bar{C}$, $D_{2}=1$, and $D_{3}=0$:\n$$\nF=\\bar{B}\\bar{A}C+\\bar{B}A\\bar{C}+B\\bar{A}\\cdot 1+BA\\cdot 0.\n$$\nUse the identities $X\\cdot 1=X$ and $X\\cdot 0=0$ to simplify:\n$$\nF=\\bar{B}\\bar{A}C+\\bar{B}A\\bar{C}+B\\bar{A}.\n$$\nOptionally, factor the first and third terms to show an equivalent compact form. Grouping gives\n$$\nF=\\bar{A}(B+\\bar{B}C)+\\bar{B}A\\bar{C}.\n$$\nApply $X+X'Y=X+Y$ with $X=B$ and $Y=C$ to obtain\n$$\nF=\\bar{A}(B+C)+\\bar{B}A\\bar{C}.\n$$\nEither expression is a valid simplified Boolean form; the minimal sum-of-products is\n$$\nF=B\\bar{A}+\\bar{B}A\\bar{C}+\\bar{B}\\bar{A}C.\n$$", "answer": "$$\\boxed{B\\bar{A}+\\bar{B}A\\bar{C}+\\bar{B}\\bar{A}C}$$", "id": "1948542"}, {"introduction": "The true power of a multiplexer lies in its versatility as a universal logic element. This next practice moves from simple analysis to creative synthesis, challenging you to implement a specific 3-variable Boolean function using a 4-to-1 MUX. Mastering this technique allows you to realize any logic function of $N+1$ variables with a $2^{N}$-to-1 MUX, a fundamental concept in programmable logic and efficient circuit design. [@problem_id:1923463]", "problem": "A digital circuit is to be designed to implement a 3-variable Boolean function $F(A,B,C)$ which is specified by the sum of its minterms as $F(A,B,C) = \\sum m(1, 2, 5, 6, 7)$. This function needs to be implemented using a 4-to-1 multiplexer (MUX). The variables $A$ and $B$ are connected to the MUX select lines $S_1$ and $S_0$ respectively, where $S_1$ is the most significant bit. The data inputs of the MUX, denoted as $D_0, D_1, D_2,$ and $D_3$, can be connected to either a logic high (1), a logic low (0), the variable $C$, or its complement $C'$.\n\nWhich of the following represents the correct set of data inputs required to implement the function $F(A,B,C)$?\n\nA. $D_0=C, D_1=C', D_2=C, D_3=1$\n\nB. $D_0=C', D_1=C, D_2=C', D_3=1$\n\nC. $D_0=C, D_1=C', D_2=1, D_3=C$\n\nD. $D_0=C, D_1=C', D_2=C, D_3=0$\n\nE. $D_0=C, D_1=1, D_2=C', D_3=C$", "solution": "Given $F(A,B,C)=\\sum m(1,2,5,6,7)$, the minterm index uses the binary number $ABC$ with $A$ as the most significant bit and $C$ as the least significant bit:\n$$\n\\begin{aligned}\nm_{0}&:000,\\quad m_{1}:001,\\quad m_{2}:010,\\quad m_{3}:011,\\\\\nm_{4}&:100,\\quad m_{5}:101,\\quad m_{6}:110,\\quad m_{7}:111.\n\\end{aligned}\n$$\nThus $F=1$ for $m_{1},m_{2},m_{5},m_{6},m_{7}$ and $F=0$ for $m_{0},m_{3},m_{4}$.\n\nA $4$-to-$1$ MUX with select lines $S_{1}=A$ and $S_{0}=B$ selects $D_{0},D_{1},D_{2},D_{3}$ for $AB=00,01,10,11$ respectively. For each fixed $(A,B)$, the output $F$ as a function of $C$ must equal the chosen data input.\n\nEvaluate $F$ by cases on $AB$:\n- For $AB=00$: $C=0\\Rightarrow m_{0}\\Rightarrow F=0$, $C=1\\Rightarrow m_{1}\\Rightarrow F=1$. Hence $F=C$, so $D_{0}=C$.\n- For $AB=01$: $C=0\\Rightarrow m_{2}\\Rightarrow F=1$, $C=1\\Rightarrow m_{3}\\Rightarrow F=0$. Hence $F=C'$, so $D_{1}=C'$.\n- For $AB=10$: $C=0\\Rightarrow m_{4}\\Rightarrow F=0$, $C=1\\Rightarrow m_{5}\\Rightarrow F=1$. Hence $F=C$, so $D_{2}=C$.\n- For $AB=11$: $C=0\\Rightarrow m_{6}\\Rightarrow F=1$, $C=1\\Rightarrow m_{7}\\Rightarrow F=1$. Hence $F=1$, so $D_{3}=1$.\n\nTherefore the required data inputs are $D_{0}=C,\\;D_{1}=C',\\;D_{2}=C,\\;D_{3}=1$, which corresponds to option A.", "answer": "$$\\boxed{A}$$", "id": "1923463"}, {"introduction": "Building on the previous concepts, this final practice explores how multiplexers can be interconnected to create larger, more sophisticated digital systems. Here, you are tasked with designing an 8-input odd parity generator by structuring 2-to-1 MUXes into a tree topology. This problem not only demonstrates the scalability of digital design but also reveals a clever method for implementing the XOR function, showcasing how MUXes can be configured for more than just data selection. [@problem_id:1948545]", "problem": "A digital system requires an 8-input odd parity generator for a data bus with inputs labeled $I_7, I_6, \\dots, I_0$. The generator's output, $P$, must be logic '1' if the number of '1's among the inputs is odd, and logic '0' otherwise. The design is constrained to use only a tree structure composed of seven 2-to-1 Multiplexers (MUX). It is assumed that both the primary inputs ($I_k$) and their complements ($\\neg I_k$) are available.\n\nThe MUX tree is arranged in three layers:\n- Layer 1 consists of four MUXes: $M_{1,0}, M_{1,1}, M_{1,2}, M_{1,3}$.\n- Layer 2 consists of two MUXes: $M_{2,0}, M_{2,1}$.\n- Layer 3 consists of one MUX: $M_{3,0}$, whose output is the final parity bit $P$.\n\nThe select lines ($S$) and data flow are wired as follows:\n- The select lines of the Layer 1 MUXes are connected to the odd-indexed inputs: $S_{1,0} = I_1$, $S_{1,1} = I_3$, $S_{1,2} = I_5$, and $S_{1,3} = I_7$.\n- The output of MUX $M_{1,k}$ is denoted as $Y_{1,k}$. The select line of $M_{2,0}$ is $S_{2,0} = Y_{1,1}$, and its data inputs are derived from $Y_{1,0}$. The select line of $M_{2,1}$ is $S_{2,1} = Y_{1,3}$, and its data inputs are derived from $Y_{1,2}$.\n- The output of MUX $M_{2,k}$ is denoted as $Y_{2,k}$. The select line of the final MUX, $M_{3,0}$, is $S_{3,0} = Y_{2,1}$, and its data inputs are derived from $Y_{2,0}$.\n\nThe data inputs for any MUX $M_{L,k}$ are denoted $D_{L,k}^{(0)}$ (for data line 0) and $D_{L,k}^{(1)}$ (for data line 1). To ensure the entire circuit correctly functions as an 8-input odd parity generator, what must be the specific connections to the data inputs of the multiplexer $M_{1,0}$?\n\nA. $D_{1,0}^{(0)} = I_0$, $D_{1,0}^{(1)} = \\neg I_0$\n\nB. $D_{1,0}^{(0)} = \\neg I_0$, $D_{1,0}^{(1)} = I_0$\n\nC. $D_{1,0}^{(0)} = I_0$, $D_{1,0}^{(1)} = I_0$\n\nD. $D_{1,0}^{(0)} = 0$, $D_{1,0}^{(1)} = I_0$\n\nE. $D_{1,0}^{(0)} = I_0$, $D_{1,0}^{(1)} = 1$\n\nF. $D_{1,0}^{(0)} = I_1$, $D_{1,0}^{(1)} = \\neg I_1$", "solution": "We require an odd parity generator that outputs $P=1$ precisely when the number of $1$ inputs among $\\{I_{7},\\dots,I_{0}\\}$ is odd. Equivalently, the parity bit is the XOR of all inputs:\n$$\nP \\;=\\; I_{7}\\oplus I_{6}\\oplus I_{5}\\oplus I_{4}\\oplus I_{3}\\oplus I_{2}\\oplus I_{1}\\oplus I_{0}.\n$$\nA $2$-to-$1$ MUX with select $S$ and data inputs $D^{(0)}$ and $D^{(1)}$ realizes\n$$\nY \\;=\\; (\\neg S \\land D^{(0)}) \\lor (S \\land D^{(1)}).\n$$\nTo implement $Y = X \\oplus S$ using a MUX with select $S$, we set $D^{(0)}=X$ and $D^{(1)}=\\neg X$, because\n$$\n(\\neg S \\land X) \\lor (S \\land \\neg X) \\;=\\; X \\oplus S.\n$$\nIn Layer 1, $M_{1,0}$ has select $S_{1,0}=I_{1}$ and must produce the pairwise parity $Y_{1,0}=I_{1}\\oplus I_{0}$ so that upper layers can continue XOR combining. Therefore, for $M_{1,0}$ we choose $X=I_{0}$, giving\n$$\nD_{1,0}^{(0)} = I_{0}, \\qquad D_{1,0}^{(1)} = \\neg I_{0},\n$$\nso that\n$$\nY_{1,0} \\;=\\; (\\neg I_{1} \\land I_{0}) \\lor (I_{1} \\land \\neg I_{0}) \\;=\\; I_{1}\\oplus I_{0}.\n$$\nWith the same pattern at higher layers (each MUXâ€™s select equal to the right-side XOR and data equal to the left-side XOR and its complement), Layer 2 yields $Y_{2,0}=(I_{1}\\oplus I_{0})\\oplus(I_{3}\\oplus I_{2})$ and $Y_{2,1}=(I_{5}\\oplus I_{4})\\oplus(I_{7}\\oplus I_{6})$, and Layer 3 yields\n$$\nP \\;=\\; Y_{2,0} \\oplus Y_{2,1} \\;=\\; I_{0}\\oplus I_{1}\\oplus I_{2}\\oplus I_{3}\\oplus I_{4}\\oplus I_{5}\\oplus I_{6}\\oplus I_{7},\n$$\nas required. Hence the correct data connections for $M_{1,0}$ are $D_{1,0}^{(0)}=I_{0}$ and $D_{1,0}^{(1)}=\\neg I_{0}$, which corresponds to option A.", "answer": "$$\\boxed{A}$$", "id": "1948545"}]}