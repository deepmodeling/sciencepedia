{"hands_on_practices": [{"introduction": "Mastering combinational logic design begins with translating a clear requirement into a Boolean expression. This first practice exercise provides a foundational example, where a simple numerical condition must be converted into a digital logic circuit. By working through this problem, you will practice the core skills of identifying minterms from a specification and applying basic Boolean algebra to achieve an elegant and efficient final design. [@problem_id:1922858]", "problem": "A control system for a small-scale chemical reactor uses a 3-bit binary input to select one of eight distinct operating modes, numbered 0 through 7. The input is represented by the variables $C_2, C_1, C_0$, where $C_2$ is the most significant bit (MSB) and $C_0$ is the least significant bit (LSB). For safety reasons, an emergency shutdown procedure must be initiated if the reactor is set to an operating mode with a numerical value strictly greater than 5.\n\nYou are tasked with designing the combinational logic circuit that triggers this safety feature. The circuit produces a single output signal, $S$, which should be high (logic 1) to initiate the shutdown procedure and low (logic 0) otherwise.\n\nDetermine the simplified Boolean expression for the output $S$ in terms of the inputs $C_2, C_1,$ and $C_0$. Your final answer should be presented in sum-of-products (SOP) form, where a product term may consist of a single variable. For representing the logical NOT operation, use a prime symbol (e.g., $X'$).", "solution": "The 3-bit input $(C_{2},C_{1},C_{0})$ encodes the operating mode as a binary number with $C_{2}$ as MSB and $C_{0}$ as LSB. The shutdown output $S$ must be high only when the mode is strictly greater than $5$, i.e., for modes $6$ and $7$.\n\nThe minterms corresponding to these modes are:\n- Mode $6$ corresponds to binary $110$, i.e., $C_{2}=1$, $C_{1}=1$, $C_{0}=0$, giving the product term $C_{2}C_{1}C_{0}'$.\n- Mode $7$ corresponds to binary $111$, i.e., $C_{2}=1$, $C_{1}=1$, $C_{0}=1$, giving the product term $C_{2}C_{1}C_{0}$.\n\nThus the sum-of-products expression is\n$$\nS = C_{2}C_{1}C_{0}' + C_{2}C_{1}C_{0}.\n$$\nFactor out the common term $C_{2}C_{1}$:\n$$\nS = C_{2}C_{1}\\left(C_{0}' + C_{0}\\right).\n$$\nBy the complementarity law $X' + X = 1$, we have $C_{0}' + C_{0} = 1$, hence\n$$\nS = C_{2}C_{1}\\cdot 1 = C_{2}C_{1}.\n$$\nThis is already in sum-of-products form as a single product term.", "answer": "$$\\boxed{C_{2}C_{1}}$$", "id": "1922858"}, {"introduction": "Building upon the basics, this next exercise introduces a slightly more complex scenario with four input variables. You will design a \"majority\" or \"threshold\" function, a common building block in digital systems used for decision-making and error detection. This problem will challenge you to systematically handle a larger set of input conditions and demonstrate the power of simplification techniques, such as Karnaugh maps, to reduce a complex expression into a manageable one. [@problem_id:1922786]", "problem": "A modern elevator is equipped with a safety system to prevent overloading. The system uses four independent weight sensors, distributed across the elevator floor. Let the state of these sensors be represented by four binary variables: $W_3, W_2, W_1$, and $W_0$. Each variable is $1$ if the corresponding sensor detects a significant load and $0$ otherwise.\n\nAn alarm, represented by the output variable $A$, must be activated if the number of active sensors is three or more. Your task is to design the combinational logic circuit for this alarm system.\n\nDetermine the simplified Boolean expression for the alarm output $A$ in terms of the inputs $W_3, W_2, W_1$, and $W_0$. The expression must be in the minimal Sum-of-Products (SOP) form. In your expression, use a plus sign `+` for the OR operation, juxtaposition for the AND operation (e.g., $XY$ for $X \\text{ AND } Y$), and a prime symbol `'` for the NOT operation (e.g., $X'$ for NOT $X$).", "solution": "The alarm must be asserted when at least three of the four inputs are 1. In canonical sum-of-products form, list the minterms with exactly three 1s and the minterm with four 1s. Using the variable order $(W_3,W_2,W_1,W_0)$, these minterms are $1110$, $1101$, $1011$, $0111$, and $1111$, leading to\n$$\nA = W_3 W_2 W_1 W_0' + W_3 W_2 W_1' W_0 + W_3 W_2' W_1 W_0 + W_3' W_2 W_1 W_0 + W_3 W_2 W_1 W_0.\n$$\nApply the Boolean combining identity $XY + XY' = X$ by pairing each three-ones minterm with the all-ones minterm:\n$$\nW_3 W_2 W_1 W_0' + W_3 W_2 W_1 W_0 = W_3 W_2 W_1,\n$$\n$$\nW_3 W_2 W_1' W_0 + W_3 W_2 W_1 W_0 = W_3 W_2 W_0,\n$$\n$$\nW_3 W_2' W_1 W_0 + W_3 W_2 W_1 W_0 = W_3 W_1 W_0,\n$$\n$$\nW_3' W_2 W_1 W_0 + W_3 W_2 W_1 W_0 = W_2 W_1 W_0.\n$$\nTherefore the simplified minimal SOP is\n$$\nA = W_3 W_2 W_1 + W_3 W_2 W_0 + W_3 W_1 W_0 + W_2 W_1 W_0.\n$$\nThis expression covers all cases with three or four active sensors and excludes all cases with fewer than three.", "answer": "$$\\boxed{W_{3}W_{2}W_{1}+W_{3}W_{2}W_{0}+W_{3}W_{1}W_{0}+W_{2}W_{1}W_{0}}$$", "id": "1922786"}, {"introduction": "This final practice problem delves into designing a circuit for a specific arithmetic property, a frequent task in the design of processors and specialized hardware. It offers a valuable lesson: not all logic functions can be substantially simplified, and the \"minimal\" form may be more complex than expected. Furthermore, this exercise encourages you to think beyond the abstract Boolean expression by considering the practical implementation cost, in this case, the number of logic gates required. [@problem_id:1922807]", "problem": "A digital circuit is being designed as part of a specialized arithmetic unit. Its function is to determine if a 4-bit unsigned binary number, represented by the input bits $B_3B_2B_1B_0$ (where $B_3$ is the most significant bit), is divisible by 3. The circuit's single output, $Y$, should be logic '1' if the number is divisible by 3, and logic '0' otherwise.\n\nThe design must be implemented as a two-level logic circuit in a minimal Sum-of-Products (SOP) form. A Sum-of-Products (SOP) expression is a logical disjunction (OR) of one or more logical conjunctions (AND terms). The minimal form is to be obtained through standard Karnaugh map simplification.\n\nAssuming that the implementation of the AND terms is restricted to using only 2-input AND gates, what is the total number of 2-input AND gates required to realize all the product terms of this minimal SOP expression?", "solution": "Let the 4-bit unsigned input be $B_{3}B_{2}B_{1}B_{0}$ with $B_{3}$ most significant. The output $Y$ is $1$ when the number is divisible by $3$, i.e., for decimal values in $\\{0,3,6,9,12,15\\}$. These correspond to minterms:\n$$\nm_{0}=0000,\\quad m_{3}=0011,\\quad m_{6}=0110,\\quad m_{9}=1001,\\quad m_{12}=1100,\\quad m_{15}=1111.\n$$\nPlacing these six $1$-cells on a 4-variable Karnaugh map with Gray ordering on both rows $(B_{3}B_{2})\\in\\{00,01,11,10\\}$ and columns $(B_{1}B_{0})\\in\\{00,01,11,10\\}$ shows that each $1$ is isolated: for every listed minterm, all four edge-adjacent neighbors (differing in exactly one variable, including wrap-around) are $0$. Therefore, no grouping of size $2$ or larger is possible. Hence, the minimal SOP is simply the sum of the six canonical minterms:\n$$\nY=B_{3}'B_{2}'B_{1}'B_{0}' + B_{3}'B_{2}'B_{1}B_{0} + B_{3}'B_{2}B_{1}B_{0}' + B_{3}B_{2}'B_{1}'B_{0} + B_{3}B_{2}B_{1}'B_{0}' + B_{3}B_{2}B_{1}B_{0}\n$$\nTo implement each product term using only 2-input AND gates, a product of $k$ literals requires $k-1$ such gates (by cascading in a binary tree). Here, each product term has $k=4$ literals, so each needs $4-1=3$ two-input AND gates. There are $6$ product terms, so the total number of 2-input AND gates to realize all product terms is\n$$\n6\\times 3=18.\n$$\nInverters required for complemented literals and the final OR gate are not included, as the question asks only for the 2-input AND gates realizing the product terms.", "answer": "$$\\boxed{18}$$", "id": "1922807"}]}