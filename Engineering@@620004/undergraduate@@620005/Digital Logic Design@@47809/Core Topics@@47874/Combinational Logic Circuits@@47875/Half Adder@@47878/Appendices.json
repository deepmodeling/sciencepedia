{"hands_on_practices": [{"introduction": "Before we delve into building circuits, let's start with a classic engineering thought experiment: black-box analysis. This practice challenges you to think about a circuit purely in terms of its inputs and outputs. By understanding the unique truth table of a half adder, you can devise a simple yet powerful test to identify its function without needing to know its internal wiring, a fundamental skill in reverse-engineering and system verification. [@problem_id:1940512]", "problem": "An unknown integrated circuit with two input pins, labeled A and B, and two output pins, labeled O1 and O2, is known to be a half adder. A half adder is a digital logic circuit that computes the binary sum of two single-bit inputs. The result is represented by two output bits: a Sum bit (S) and a Carry-out bit (C). Your task is to determine which output pin (O1 or O2) corresponds to the Sum bit and which corresponds to the Carry-out bit by applying a *single*, fixed pair of binary values to the inputs A and B and observing the outputs.\n\nWhich of the following input configurations, if any, allows for this unambiguous determination?\n\nA. A=0, B=0\n\nB. A=1, B=1\n\nC. A=0, B=1\n\nD. Both the configuration (A=1, B=1) and the configuration (A=0, B=1) would work.\n\nE. It is impossible to make the determination with a single, fixed input pair.", "solution": "A half adder has outputs given by the logic equations\n$$S = A \\oplus B,$$\n$$C = A \\cdot B,$$\nwhere $S$ is the Sum and $C$ is the Carry-out. To determine which output pin corresponds to $S$ and which to $C$ using a single input pair, we need an input for which $S$ and $C$ take different values; then the observed output that equals the known value of $S$ (respectively $C$) identifies the Sum (respectively Carry) pin.\n\nEvaluate the listed input configurations:\n\n- For $A=0$, $B=0$:\n$$S = 0 \\oplus 0 = 0,\\quad C = 0 \\cdot 0 = 0.$$\nBoth outputs are $0$, so observing $(O1,O2)=(0,0)$ provides no way to distinguish which is $S$ and which is $C$. This does not work.\n\n- For $A=1$, $B=1$:\n$$S = 1 \\oplus 1 = 0,\\quad C = 1 \\cdot 1 = 1.$$\nThe outputs are different: one pin must read $0$ (the Sum) and the other $1$ (the Carry). Observing which pin is $0$ and which is $1$ unambiguously labels the pins. This works.\n\n- For $A=0$, $B=1$:\n$$S = 0 \\oplus 1 = 1,\\quad C = 0 \\cdot 1 = 0.$$\nAgain the outputs are different: one pin reads $1$ (the Sum) and the other $0$ (the Carry). Observing which pin is $1$ and which is $0$ unambiguously labels the pins. This works.\n\nTherefore, both configurations $A=1,B=1$ and $A=0,B=1$ allow unambiguous determination with a single, fixed input pair.\n\nHence the correct choice is D.", "answer": "$$\\boxed{D}$$", "id": "1940512"}, {"introduction": "Moving from function to form, this exercise tackles a core challenge in digital logic synthesis: implementation using universal gates. While a half adder is easily described with AND and XOR gates, practical integrated circuits are often built with a single gate type, like NAND, for manufacturing efficiency. This practice will sharpen your Boolean algebra skills as you translate a familiar circuit into a minimal NAND-only design. [@problem_id:1940533]", "problem": "In digital logic design, a half adder is a fundamental combinational circuit that performs the arithmetic addition of two single binary digits. The circuit takes two inputs, let's call them $A$ and $B$, and produces two outputs: a Sum bit, $S$, and a Carry bit, $C$. The logical operations for these outputs are defined by the Boolean expressions:\n\n$S = A \\oplus B$ (which is the exclusive OR of $A$ and $B$)\n$C = A \\cdot B$ (which is the logical AND of $A$ and $B$)\n\nA logic designer is tasked with building this half adder circuit under a strict design constraint: the implementation must exclusively use 2-input NAND gates. The NAND operation on two inputs $X$ and $Y$ is given by the expression $(X \\cdot Y)'$.\n\nDetermine the absolute minimum number of 2-input NAND gates required to construct a complete half adder that correctly generates both the Sum ($S$) and Carry ($C$) outputs from the inputs $A$ and $B$.", "solution": "We must realize a half adder with only 2-input NAND gates. The outputs are defined by $S = A \\oplus B$ and $C = A \\cdot B$, while a 2-input NAND is $(X \\cdot Y)'$.\n\nConstruct $S$ using the standard 4-NAND realization of XOR and arrange it so that we can reuse an internal node to obtain $C$ with one more NAND:\n1) Compute the shared intermediate\n$$\nN_{1} = \\text{NAND}(A,B) = (A \\cdot B)'.\n$$\n2) Form the next two intermediates\n$$\nN_{2} = \\text{NAND}(A,N_{1}) = (A \\cdot N_{1})' = A' + N_{1}' = A' + A B,\n$$\n$$\nN_{3} = \\text{NAND}(B,N_{1}) = (B \\cdot N_{1})' = B' + N_{1}' = B' + A B,\n$$\nwhere in each case we used De Morganâ€™s law $(X \\cdot Y)' = X' + Y'$ and $N_{1}' = ((A \\cdot B)')' = A \\cdot B$.\n3) Produce the sum\n$$\nS = \\text{NAND}(N_{2},N_{3}) = (N_{2} \\cdot N_{3})'.\n$$\nVerify that this equals $A \\oplus B$:\n$$\nN_{2} \\cdot N_{3} = (A' + A B)(B' + A B)\n= A'B' + A'AB + ABB' + ABAB\n= A'B' + 0 + 0 + AB\n= A'B' + AB,\n$$\nso\n$$\nS = (A'B' + AB)' = (A'B')' \\cdot (AB)' = (A + B) \\cdot (A' + B') = A'B + AB',\n$$\nwhich is indeed $A \\oplus B$. This uses $4$ NAND gates.\n\nObtain the carry by reusing $N_{1} = (A \\cdot B)'$ and inverting it with one additional NAND (wired as an inverter):\n$$\nC = \\text{NAND}(N_{1},N_{1}) = (N_{1} \\cdot N_{1})' = N_{1}' = ((A \\cdot B)')' = A \\cdot B.\n$$\nThis adds $1$ NAND gate, for a total of $5$ NAND gates.\n\nTo argue minimality:\n- It is a standard result that realizing a 2-input XOR with only 2-input NAND gates requires at least $4$ NAND gates. Therefore, any correct half-adder must use at least $4$ NAND gates to realize $S = A \\oplus B$.\n- The carry $C = A \\cdot B$ is not directly available from those $4$ gates in correct polarity; however, $(A \\cdot B)'$ appears naturally as $N_{1}$. Producing $C$ from $(A \\cdot B)'$ requires at least one additional inversion, which in a NAND-only implementation is exactly one more 2-input NAND gate (wired with identical inputs). Hence at least $4 + 1 = 5$ NAND gates are necessary.\n- The explicit construction above achieves $5$, so $5$ is the absolute minimum.\n\nTherefore, the minimum number of 2-input NAND gates required to implement a half adder is $5$.", "answer": "$$\\boxed{5}$$", "id": "1940533"}, {"introduction": "A correctly designed circuit is only useful if it can be manufactured reliably. This final practice introduces you to the crucial field of digital testing by using the 'stuck-at' fault model, a standard for detecting manufacturing defects. Your task is to develop a minimal set of test inputs that can guarantee a half adder is free from common faults, demonstrating how logic design and quality assurance are deeply intertwined. [@problem_id:1940500]", "problem": "In the quality assurance department for a new microprocessor, you are tasked with developing a testing procedure for a fundamental logic block: the half adder. A standard half adder is a digital circuit with two single-bit inputs, A and B, and two single-bit outputs, Sum (S) and Carry (C). The logic is implemented using the standard gate-level design: `S = A XOR B` and `C = A AND B`.\n\nTo validate the manufactured circuits, you will use the single stuck-at fault model. This model assumes that a manufacturing defect can cause a single line in the circuit to be permanently \"stuck\" at a logical 0 (stuck-at-0) or a logical 1 (stuck-at-1). Your tests must be able to detect any such fault on the two inputs (A, B) and the two outputs (S, C).\n\nA test vector is a specific input combination `(A, B)`. A set of test vectors is considered 'complete' if, for every possible single stuck-at fault, there is at least one vector in the set that produces an output different from the fault-free circuit. A set is 'minimal' if it is complete and no smaller complete set exists.\n\nWhich of the following sets of test vectors represent a minimal and complete set for testing all single stuck-at-0 and stuck-at-1 faults on the inputs and outputs of the half adder? Select all that apply.\n\nA. `{(0,0), (1,1)}`\n\nB. `{(0,1), (1,0), (1,1)}`\n\nC. `{(0,0), (0,1), (1,0), (1,1)}`\n\nD. `{(0,0), (1,0), (1,1)}`\n\nE. `{(0,0), (0,1), (1,0)}`\n\nF. `{(0,0), (0,1), (1,1)}`", "solution": "We are given a half-adder with two inputs $A,B$ and two outputs $S$ and $C$ defined by\n$$\nS = A \\oplus B, \\qquad C = A \\land B.\n$$\nThe truth table values implied by these equations are:\n- $(A,B)=(0,0)\\Rightarrow (S,C)=(0,0)$,\n- $(A,B)=(0,1)\\Rightarrow (S,C)=(1,0)$,\n- $(A,B)=(1,0)\\Rightarrow (S,C)=(1,0)$,\n- $(A,B)=(1,1)\\Rightarrow (S,C)=(0,1)$.\n\nUnder the single stuck-at fault model on lines $A,B,S,C$, a fault is detectable by a test vector $(A,B)$ if the outputs $(S,C)$ computed by the fault-free circuit differ from the outputs that would result when the faulty line is forced to the stuck value.\n\nFirst, derive necessary and sufficient detection conditions for each fault type.\n\n1) Input stuck-at faults:\n- For $A$ stuck-at-$0$ (denoted $A\\text{ s-a-}0$): A test must attempt to set $A=1$ and propagate the effect. Compare outputs for $(1,B)$ (good) vs $(0,B)$ (faulty):\n  - If $B=0$: $(1,0)\\Rightarrow (1,0)$ vs $(0,0)\\Rightarrow (0,0)$, hence $S$ differs; detected.\n  - If $B=1$: $(1,1)\\Rightarrow (0,1)$ vs $(0,1)\\Rightarrow (1,0)$, both $S$ and $C$ differ; detected.\n  Therefore, any vector with $A=1$ detects $A\\text{ s-a-}0$.\n- For $A$ stuck-at-$1$ ($A\\text{ s-a-}1$): A test must attempt to set $A=0$ and propagate the effect. Compare outputs for $(0,B)$ vs $(1,B)$:\n  - If $B=0$: $(0,0)\\Rightarrow (0,0)$ vs $(1,0)\\Rightarrow (1,0)$, $S$ differs; detected.\n  - If $B=1$: $(0,1)\\Rightarrow (1,0)$ vs $(1,1)\\Rightarrow (0,1)$, both differ; detected.\n  Therefore, any vector with $A=0$ detects $A\\text{ s-a-}1$.\n- By symmetry, for $B$:\n  - $B\\text{ s-a-}0$ is detected by any vector with $B=1$.\n  - $B\\text{ s-a-}1$ is detected by any vector with $B=0$.\n\nThus, to detect all input stuck-at faults, the test set must include at least one vector with $A=0$ and one with $A=1$, and at least one with $B=0$ and one with $B=1$.\n\n2) Output stuck-at faults:\n- For $S\\text{ s-a-}0$: need a vector where the fault-free $S=1$ (i.e., $(0,1)$ or $(1,0)$).\n- For $S\\text{ s-a-}1$: need a vector where the fault-free $S=0$ (i.e., $(0,0)$ or $(1,1)$).\n- For $C\\text{ s-a-}0$: need a vector where the fault-free $C=1$. This occurs only at $(1,1)$.\n- For $C\\text{ s-a-}1$: need a vector where the fault-free $C=0$ (i.e., any of $(0,0)$, $(0,1)$, $(1,0)$).\n\nTherefore, any complete set must include $(1,1)$ to detect $C\\text{ s-a-}0$. It must also include at least one vector with $S=1$ (either $(0,1)$ or $(1,0)$) to detect $S\\text{ s-a-}0$. The presence of $(1,1)$ already provides a case with $S=0$ and $C=1$. Together with the input-fault requirements, the necessary conditions reduce to:\n- include $(1,1)$,\n- include at least one vector with $A=0$,\n- include at least one vector with $B=0$,\n- include at least one vector with $S=1$ (i.e., at least one of $(1,0)$ or $(0,1)$).\n\nSince $(1,1)$ fixes $A=1$ and $B=1$, and a single additional vector cannot simultaneously guarantee $A=0$, $B=0$, and $S=1$, at least three vectors are required. Hence any minimal complete set must have cardinality $3$.\n\nNow evaluate each option:\n\nA. $\\{(0,0),(1,1)\\}$:\n- No vector with $S=1$, so cannot detect $S\\text{ s-a-}0$. Not complete.\n\nB. $\\{(0,1),(1,0),(1,1)\\}$:\n- Contains $(1,1)$, has $A=0$ (from $(0,1)$) and $A=1$ (others), has $B=0$ (from $(1,0)$) and $B=1$ (others), and has $S=1$ (from $(0,1)$ or $(1,0)$). Therefore complete.\n- Minimality: removing $(0,1)$ loses $A=0$ (cannot detect $A\\text{ s-a-}1$); removing $(1,0)$ loses $B=0$ (cannot detect $B\\text{ s-a-}1$); removing $(1,1)$ loses $C=1$ (cannot detect $C\\text{ s-a-}0$). Hence minimal.\n\nC. $\\{(0,0),(0,1),(1,0),(1,1)\\}$:\n- Complete but not minimal (a smaller complete set exists, e.g., option B).\n\nD. $\\{(0,0),(1,0),(1,1)\\}$:\n- Contains $(1,1)$, has $A=0$ (from $(0,0)$) and $A=1$ (others), has $B=0$ (from $(0,0)$ or $(1,0)$) and $B=1$ (from $(1,1)$), and has $S=1$ (from $(1,0)$). Therefore complete.\n- Minimality: removing $(0,0)$ loses $A=0$ (cannot detect $A\\text{ s-a-}1$); removing $(1,0)$ loses $S=1$ (cannot detect $S\\text{ s-a-}0$); removing $(1,1)$ loses $C=1$ (cannot detect $C\\text{ s-a-}0$). Hence minimal.\n\nE. $\\{(0,0),(0,1),(1,0)\\}$:\n- Lacks $(1,1)$, so cannot detect $C\\text{ s-a-}0$. Not complete.\n\nF. $\\{(0,0),(0,1),(1,1)\\}$:\n- Contains $(1,1)$, has $A=0$ (from $(0,0)$ or $(0,1)$) and $A=1$ (from $(1,1)$), has $B=0$ (from $(0,0)$) and $B=1$ (from $(0,1)$ or $(1,1)$), and has $S=1$ (from $(0,1)$). Therefore complete.\n- Minimality: removing $(0,0)$ loses $B=0$ (cannot detect $B\\text{ s-a-}1$); removing $(0,1)$ loses $S=1$ (cannot detect $S\\text{ s-a-}0$); removing $(1,1)$ loses $C=1$ (cannot detect $C\\text{ s-a-}0$). Hence minimal.\n\nTherefore, the sets that are both minimal and complete are B, D, and F.", "answer": "$$\\boxed{BDF}$$", "id": "1940500"}]}