{"hands_on_practices": [{"introduction": "Understanding the BCD adder begins with mastering its fundamental operation. This first practice exercise [@problem_id:1911970] guides you through a complete, step-by-step calculation of a single-digit BCD sum. By working through the initial binary addition and the subsequent correction stage, you will solidify your grasp of the core algorithm that makes decimal arithmetic possible in a binary system.", "problem": "A single-digit Binary-Coded Decimal (BCD) adder is a digital circuit designed for decimal arithmetic. It accepts two 4-bit inputs, A and B, each representing a decimal digit from 0 to 9, and a 1-bit carry-in, $C_{in}$. The circuit produces a 4-bit BCD sum output, S, and a 1-bit carry-out, $C_{out}$.\n\nThe operation of the adder proceeds in two stages. In the first stage, a standard 4-bit binary addition is performed on the inputs A, B, and $C_{in}$. This yields a 4-bit preliminary sum, $S'$, and a 1-bit preliminary carry, $C'_{out}$. In the second stage, a correction is applied if the result is invalid in BCD. The condition for correction is met if the preliminary sum $S'$ is greater than 9 (i.e., $> 1001_2$), or if the preliminary carry $C'_{out}$ is 1. If this condition is met, the binary value for 6 (i.e., $0110_2$) is added to the preliminary sum $S'$. The 4-bit result of this second addition becomes the final sum S, and the carry generated from this addition becomes the final carry-out $C_{out}$. If no correction is needed, the final sum S is simply $S'$ and the final carry-out $C_{out}$ is 0.\n\nConsider an instance where the BCD input A represents the decimal digit 8, the BCD input B represents the decimal digit 5, and the incoming carry-in, $C_{in}$, is 1. Determine the final 5-bit output of the adder, which is formed by concatenating the final 1-bit carry-out ($C_{out}$) as the Most Significant Bit (MSB) with the 4-bit BCD sum (S). Present this 5-bit result as a binary string.", "solution": "The inputs are $A=8 \\Rightarrow A=1000_{2}$, $B=5 \\Rightarrow B=0101_{2}$, and $C_{in}=1 \\Rightarrow 1_{2}$. The first stage performs a 4-bit binary addition:\n$$\nS' = A + B + C_{in} = 1000_{2} + 0101_{2} + 1_{2}.\n$$\nCompute the intermediate sum:\n$$\n1000_{2} + 0101_{2} = 1101_{2},\n$$\nand then add the carry-in:\n$$\nS' = 1101_{2} + 1_{2} = 1110_{2}, \\quad C'_{out} = 0,\n$$\nsince $1110_{2} < 2^{4}$, so no preliminary overflow occurs.\n\nThe BCD correction condition requires a correction if $C'_{out}=1$ or $S' > 1001_{2}$. Here $S' = 1110_{2} > 1001_{2}$, so a correction is needed. Add $0110_{2}$ to $S'$:\n$$\nS' + 0110_{2} = 1110_{2} + 0110_{2} = 1\\,0100_{2}.\n$$\nThus, the final carry-out and sum are\n$$\nC_{out} = 1, \\quad S = 0100_{2}.\n$$\nConcatenating $C_{out}$ as the most significant bit with the 4-bit sum $S$ gives the 5-bit output $1\\,0100_{2}$, i.e., the binary string $10100$.", "answer": "$$\\boxed{10100}$$", "id": "1911970"}, {"introduction": "To truly understand a circuit's design, it's often helpful to explore what happens when it malfunctions. This problem [@problem_id:1911921] presents a hypothetical scenario involving a faulty BCD adder where the correction step is applied incorrectly. By analyzing the erroneous output, you'll gain a deeper appreciation for why the addition of the correction factor $0110_2$ is conditional and critical for achieving the correct decimal result.", "problem": "A single-digit Binary-Coded Decimal (BCD) adder is a digital circuit designed to perform arithmetic on decimal digits represented in a 4-bit binary format. The BCD representation for decimal digits 0 through 9 uses the binary equivalents $0000_2$ through $1001_2$. A standard BCD adder operates in two stages. First, it uses a 4-bit binary adder to compute an initial sum of the two BCD inputs. Second, a correction stage checks if this initial sum is an invalid BCD code (i.e., a value greater than 9, $1001_2$) or if a carry was generated from the most significant bit of the binary adder. If either condition is true, the correction factor of 6 (binary $0110_2$) is added to the initial sum to produce the correct BCD result.\n\nConsider a faulty BCD adder where the correction logic is triggered incorrectly. When adding the decimal digit 4 to the decimal digit 4, the adder correctly computes the initial binary sum. However, due to the fault, the circuit then proceeds to add the correction factor $0110_2$ to this sum, a step which would not normally be performed for this specific operation.\n\nAssuming any carry-out from this final erroneous addition is disregarded, what is the decimal value corresponding to the final 4-bit binary word produced at the output of this faulty adder?", "solution": "A decimal digit $4$ in BCD is $0100$. Adding $4$ and $4$ with the 4-bit binary adder gives the initial sum\n$$S_{0}=0100+0100=1000,$$\nwhich equals decimal $8$.\n\nDue to the fault, the correction factor $K=0110$ is added even though it should not be. The faulty final sum is\n$$S=S_{0}+K=1000+0110=1110.$$\n\nAny carry-out from this addition is to be disregarded; in this case, there is no carry-out beyond the most significant bit, so the final 4-bit word is $1110$.\n\nInterpreting this 4-bit word as an unsigned binary number gives\n$$V=1\\cdot 2^{3}+1\\cdot 2^{2}+1\\cdot 2^{1}+0\\cdot 2^{0}=8+4+2+0=14.$$\nThus, the decimal value corresponding to the final 4-bit binary word is $14$.", "answer": "$$\\boxed{14}$$", "id": "1911921"}, {"introduction": "Moving from analysis to design is a crucial step in digital logic engineering. This final practice challenges you to synthesize the 'brain' of the BCD adder: the custom combinational logic that decides when a correction is necessary [@problem_id:1911900]. By deriving the minimal Boolean expressions for this logic, you will translate the abstract rules of BCD arithmetic into a concrete hardware blueprint, a fundamental skill for any digital systems designer.", "problem": "A digital systems engineer is tasked with designing a 1-digit Binary-Coded Decimal (BCD) adder. A standard BCD digit is a 4-bit binary number representing a decimal digit from 0 to 9. The adder must take two 4-bit BCD inputs, $A = A_3A_2A_1A_0$ and $B = B_3B_2B_1B_0$, and produce a 5-bit BCD output representing their sum, denoted by a 1-bit carry-out $C_{out}$ and a 4-bit sum $S = S_3S_2S_1S_0$.\n\nThe proposed architecture consists of three stages:\n1.  A 4-bit binary adder takes inputs $A$ and $B$, producing a 4-bit binary sum $Z = Z_3Z_2Z_1Z_0$ and a carry-out $K$.\n2.  A custom combinational logic circuit, which you must design, takes the 4-bit sum $Z$ and the carry-out $K$ as its inputs. It generates a 4-bit \"modification vector\" $M = M_3M_2M_1M_0$. The purpose of this vector is to facilitate the conversion of the binary sum into the correct BCD format.\n3.  A second 4-bit binary adder adds the intermediate sum $Z$ and the modification vector $M$. The 4-bit result of this second addition is the final BCD sum $S$, and its carry-out is the final carry $C_{out}$.\n\nYour task is to determine the minimal Sum-of-Products (SOP) Boolean expressions for the four bits of the modification vector, $M_3, M_2, M_1,$ and $M_0$. The expressions should be in terms of the intermediate sum bits $Z_3, Z_2, Z_1, Z_0$ and the intermediate carry $K$. For your final answer, provide the four resulting expressions for $M_3, M_2, M_1,$ and $M_0$, in that order, as a single composite answer.", "solution": "Let the first 4-bit adder produce the intermediate 4-bit binary sum $Z = Z_{3}Z_{2}Z_{1}Z_{0}$ and carry-out $K$. Interpreting the numerical values, the raw binary sum is\n$$\nN = \\operatorname{val}(A) + \\operatorname{val}(B) = 16K + \\operatorname{val}(Z).\n$$\nTo obtain a valid BCD result, a correction of $+6$ (i.e., adding $0110$) must be applied exactly when the raw binary sum exceeds $9$ or when there is an overflow from the first adder. Therefore, define the correction condition $C$ by\n$$\nC=1 \\quad \\text{iff} \\quad K=1 \\ \\text{or} \\ \\operatorname{val}(Z) > 9.\n$$\nThe condition $\\operatorname{val}(Z) > 9$ holds for $Z \\in \\{1010,1011,1100,1101,1110,1111\\}$, which is compactly detected by\n$$\n\\operatorname{val}(Z)>9 \\iff Z_{3}=1 \\ \\text{and} \\ (Z_{2}=1 \\ \\text{or} \\ Z_{1}=1),\n$$\ni.e.,\n$$\n\\operatorname{val}(Z)>9 \\iff Z_{3}(Z_{2}+Z_{1})=Z_{3}Z_{2}+Z_{3}Z_{1}.\n$$\nHence a minimal sum-of-products expression for the correction condition is\n$$\nC = K + Z_{3}Z_{2} + Z_{3}Z_{1}.\n$$\nWhen $C=1$, we must add $0110$; when $C=0$, we add $0000$. Therefore, the modification vector bits are\n$$\nM_{3}=0,\\quad M_{2}=C,\\quad M_{1}=C,\\quad M_{0}=0,\n$$\nwhich, substituting $C$, yield the minimal SOP forms\n$$\nM_{3}=0,\\qquad M_{2}=K+Z_{3}Z_{2}+Z_{3}Z_{1},\\qquad M_{1}=K+Z_{3}Z_{2}+Z_{3}Z_{1},\\qquad M_{0}=0.\n$$\nThese are minimal because $Z_{3}(Z_{2}+Z_{1})$ is the minimal detector for $\\operatorname{val}(Z)>9$, and the inclusion of the single-literal term $K$ is necessary and sufficient to cover all overflow cases from the first adder.", "answer": "$$\\boxed{\\begin{pmatrix}0 & K+Z_{3}Z_{2}+Z_{3}Z_{1} & K+Z_{3}Z_{2}+Z_{3}Z_{1} & 0\\end{pmatrix}}$$", "id": "1911900"}]}