{"hands_on_practices": [{"introduction": "Understanding how to build larger systems from smaller, modular blocks is a cornerstone of digital design. This exercise focuses on the fundamental principle of a cascaded comparator: the propagation of comparison results from one stage to the next. By tracing the logic states of the cascade lines for a specific pair of inputs, you will gain a concrete understanding of how the 'equals' condition ripples through the chain until a definitive 'greater than' ($A \\gt B$) or 'less than' ($A \\lt B$) decision is made [@problem_id:1919799].", "problem": "A 12-bit digital magnitude comparator is constructed by cascading three identical 4-bit magnitude comparator integrated circuits. The stages are labeled from most significant to least significant as Stage 2, Stage 1, and Stage 0. The 12-bit input numbers are $A = A_{11}A_{10}...A_0$ and $B = B_{11}B_{10}...B_0$. Stage 2 compares the most significant nibbles ($A_{11-8}$ and $B_{11-8}$), Stage 1 compares the middle nibbles ($A_{7-4}$ and $B_{7-4}$), and Stage 0 compares the least significant nibbles ($A_{3-0}$ and $B_{3-0}$).\n\nEach 4-bit comparator has three cascading inputs, $(I_{A>B}, I_{A<B}, I_{A=B})$, and three corresponding outputs, $(O_{A>B}, O_{A<B}, O_{A=B})$. The outputs of Stage $i$ serve as the cascade inputs for Stage $i-1$. The logic for each stage is as follows:\n- If the local 4-bit input $A$ is greater than the local 4-bit input $B$, the outputs are $(1, 0, 0)$, regardless of the cascade inputs.\n- If the local 4-bit input $A$ is less than the local 4-bit input $B$, the outputs are $(0, 1, 0)$, regardless of the cascade inputs.\n- If the local 4-bit inputs are equal, the outputs are a direct copy of the cascade inputs: $(O_{A>B}, O_{A<B}, O_{A=B}) = (I_{A>B}, I_{A<B}, I_{A=B})$.\n\nFor the Most Significant Bit (MSB) stage (Stage 2), the cascade inputs are wired to detect equality from a hypothetical \"more significant\" stage, so they are fixed at $(I_{A>B}, I_{A<B}, I_{A=B}) = (0, 0, 1)$. The final 12-bit comparison result is given by the outputs of the Least Significant Bit (LSB) stage (Stage 0).\n\nTwo 12-bit numbers, $A = \\text{0xABC}$ and $B = \\text{0xABD}$, are applied to the inputs of this comparator. Determine the logic states of the cascade lines between the stages.\n\nLet the triplet of cascade outputs from Stage 2 to Stage 1 be denoted as $Y_2 = (O_{A>B}^{(2)}, O_{A<B}^{(2)}, O_{A=B}^{(2)})$.\nLet the triplet of cascade outputs from Stage 1 to Stage 0 be denoted as $Y_1 = (O_{A>B}^{(1)}, O_{A<B}^{(1)}, O_{A=B}^{(1)})$.\n\nWhich of the following represents the combined state $(Y_2, Y_1)$?\n\nA. $Y_2 = (0, 0, 1)$, $Y_1 = (0, 1, 0)$\n\nB. $Y_2 = (1, 0, 0)$, $Y_1 = (0, 0, 1)$\n\nC. $Y_2 = (0, 0, 1)$, $Y_1 = (0, 0, 1)$\n\nD. $Y_2 = (0, 1, 0)$, $Y_1 = (0, 1, 0)$\n\nE. $Y_2 = (0, 0, 0)$, $Y_1 = (0, 0, 1)$", "solution": "Interpret the hexadecimal inputs nibble-wise. Write $A=\\text{0xABC}$ and $B=\\text{0xABD}$ as three 4-bit nibbles each:\n- Most significant nibble: $(A_{11-8}, B_{11-8})=(\\text{A}, \\text{A})$.\n- Middle nibble: $(A_{7-4}, B_{7-4})=(\\text{B}, \\text{B})$.\n- Least significant nibble: $(A_{3-0}, B_{3-0})=(\\text{C}, \\text{D})$.\n\nBy the given comparator rules for each 4-bit stage:\n- If local $A>B$, outputs are $(1,0,0)$.\n- If local $A<B$, outputs are $(0,1,0)$.\n- If local $A=B$, outputs copy the cascade inputs.\n\nThe MSB stage (Stage 2) has fixed cascade inputs $(I_{A>B}, I_{A<B}, I_{A=B})=(0,0,1)$.\n\nEvaluate Stage 2 (most significant nibble): since $\\text{A}=\\text{A}$, the local inputs are equal, so the outputs copy the inputs. Therefore,\n$$Y_2=(O_{A>B}^{(2)}, O_{A<B}^{(2)}, O_{A=B}^{(2)})=(0,0,1).$$\n\nEvaluate Stage 1 (middle nibble): since $\\text{B}=\\text{B}$, the local inputs are equal, so the outputs copy the cascade inputs arriving from Stage 2. Hence,\n$$Y_1=(O_{A>B}^{(1)}, O_{A<B}^{(1)}, O_{A=B}^{(1)})=Y_2=(0,0,1).$$\n\nAs a consistency check, Stage 0 (least significant nibble) compares $\\text{C}$ and $\\text{D}$ with $\\text{C}<\\text{D}$, so it would output $(0,1,0)$, which is independent of the cascade inputs; however, the question only asks for $Y_2$ and $Y_1$.\n\nThus, $(Y_2, Y_1)=\\big((0,0,1), (0,0,1)\\big)$, which corresponds to option C.", "answer": "$$\\boxed{C}$$", "id": "1919799"}, {"introduction": "A robust digital circuit must not only work correctly under ideal conditions but also have predictable behavior when faults occur. This practice problem delves into the practical topic of fault analysis, a critical aspect of digital system testing and reliability. By analyzing the effect of a 'stuck-at-1' fault on a cascade line, you will explore how such an error can lead to incorrect comparisons and reinforce your understanding of the logic that governs the overall equality output [@problem_id:1919756].", "problem": "An 8-bit unsigned magnitude comparator is constructed by cascading two 4-bit magnitude comparators, labeled Stage 1 and Stage 0. The 8-bit input numbers are denoted as $A = A_7A_6A_5A_4A_3A_2A_1A_0$ and $B = B_7B_6B_5B_4B_3B_2B_1B_0$.\n\nStage 1 compares the most significant nibbles (MSNs), which are $A_{MSN} = A_7A_6A_5A_4$ and $B_{MSN} = B_7B_6B_5B_4$. Stage 0 compares the least significant nibbles (LSNs), which are $A_{LSN} = A_3A_2A_1A_0$ and $B_{LSN} = B_3B_2B_1B_0$.\n\nThe three outputs of Stage 1, $(A>B)_{S1}$, $(A<B)_{S1}$, and $(A=B)_{S1}$, serve as the cascade inputs for Stage 0, denoted as $I_{A>B}$, $I_{A<B}$, and $I_{A=B}$, respectively. The overall comparison results for the 8-bit numbers are the final outputs from Stage 0. The logic for the final equality output, $(A=B)_{OUT}$, is given by the standard cascading formula:\n$$ (A=B)_{OUT} = (A_{LSN} = B_{LSN}) \\land I_{A=B} $$\nwhere $(A_{LSN} = B_{LSN})$ is the local equality comparison result from Stage 0, and $\\land$ represents the logical AND operation.\n\nDue to a manufacturing defect, the cascade input line $I_{A=B}$ is permanently connected to a logic '1' voltage, a condition known as a \"stuck-at-1\" fault.\n\nWhich of the following pairs of distinct 8-bit numbers, $A$ and $B$, would be incorrectly evaluated as equal by this faulty comparator?\n\nA. $A = 11110000_2$, $B = 11110000_2$\n\nB. $A = 01101001_2$, $B = 01101101_2$\n\nC. $A = 01011100_2$, $B = 10101100_2$\n\nD. $A = 10000001_2$, $B = 01111110_2$", "solution": "We use the standard cascaded equality formula for the 8-bit comparator:\n$$ (A=B)_{OUT} = (A_{LSN} = B_{LSN}) \\land I_{A=B}, $$\nwhere, in a fault-free design, $I_{A=B} = (A_{MSN} = B_{MSN})$.\n\nGiven the stuck-at-1 fault on the cascade input, we have\n$$ I_{A=B} = 1. $$\nTherefore the faulty equality output simplifies to\n$$ (A=B)_{OUT}^{faulty} = (A_{LSN} = B_{LSN}) \\land 1 = (A_{LSN} = B_{LSN}). $$\n\nHence, the comparator will incorrectly assert equality exactly when the least significant nibbles match but the most significant nibbles differ, i.e.,\n$$ (A_{LSN} = B_{LSN}) \\land (A_{MSN} \\ne B_{MSN}). $$\n\nEvaluate each option by splitting into MSNs and LSNs:\n\nA. $A$ and $B$ are identical, so $A_{MSN} = B_{MSN}$ and $A_{LSN} = B_{LSN}$. The pair is not distinct and would be correctly evaluated as equal; thus it is not an incorrect equality.\n\nB. $A=0110\\,1001_2$, $B=0110\\,1101_2$. MSNs are both $0110_2$, so $A_{MSN} = B_{MSN}$. LSNs are $1001_2$ versus $1101_2$, so $A_{LSN} \\ne B_{LSN}$. Then $(A=B)_{OUT}^{faulty} = 0$, so no incorrect equality.\n\nC. $A=0101\\,1100_2$, $B=1010\\,1100_2$. LSNs are both $1100_2$, so $A_{LSN} = B_{LSN}$. MSNs are $0101_2$ versus $1010_2$, so $A_{MSN} \\ne B_{MSN}$. This satisfies $(A_{LSN} = B_{LSN}) \\land (A_{MSN} \\ne B_{MSN})$, so the faulty comparator will incorrectly output equality.\n\nD. $A=1000\\,0001_2$, $B=0111\\,1110_2$. LSNs are $0001_2$ versus $1110_2$, so $A_{LSN} \\ne B_{LSN}$. Then $(A=B)_{OUT}^{faulty} = 0$, so no incorrect equality.\n\nTherefore, the only pair incorrectly evaluated as equal is option C.", "answer": "$$\\boxed{C}$$", "id": "1919756"}, {"introduction": "While logical correctness is paramount, the speed of a digital circuit is often a defining factor in its performance and applicability. This exercise transitions from pure logic to the physical reality of circuit timing by examining propagation delay in a serially cascaded comparator. Calculating the worst-case delay will help you understand the primary trade-off of this architecture and appreciate why the ripple effect along the cascade path is a critical performance bottleneck in high-speed systems [@problem_id:1919818].", "problem": "A Digital Feedback and Control System (DFCS) for a high-precision manufacturing process requires a 12-bit digital magnitude comparator to compare a sensor reading with a target setpoint. To implement this, engineers decide to use a serial cascading architecture, connecting three identical 4-bit magnitude comparator Integrated Circuits (ICs) in series. The least significant 4-bit comparator (Stage 0) handles bits 0-3, the second comparator (Stage 1) handles bits 4-7, and the most significant 4-bit comparator (Stage 2) handles bits 8-11.\n\nThe datasheet for the 4-bit comparator IC specifies two key propagation delays:\n1.  The local comparison delay, $t_{p,local}$, is the time from a change in the 4-bit data inputs ($A[3:0]$, $B[3:0]$) to the generation of the stage's outputs, assuming the cascade inputs are held in a state that makes the stage autonomous (i.e., not dependent on a previous stage). This delay is given as $t_{p,local} = 11.5$ ns.\n2.  The cascade propagation delay, $t_{p,cascade}$, is the time from a change on one of the cascade inputs (coming from a less significant stage) to the corresponding change on the final outputs of the current stage. This delay is measured under the condition that the local 4-bit data inputs for the current stage are equal (A=B). This delay is given as $t_{p,cascade} = 4.8$ ns.\n\nAssuming this serial cascade configuration, calculate the worst-case propagation delay for the entire 12-bit comparator. Express your final answer in nanoseconds (ns), rounded to three significant figures.", "solution": "In a serial cascade of three identical 4-bit magnitude comparators used to implement a 12-bit comparator, the worst-case propagation occurs when the most significant decision is determined by the least significant stage (Stage 0). In that case, the signal must experience:\n- One local comparison delay at Stage 0 due to a change on its data inputs, quantified by $t_{p,local}$.\n- A cascade propagation through each higher stage (Stage 1 and Stage 2), each contributing a delay of $t_{p,cascade}$, because those stages are in the $A=B$ condition and await the ripple decision from the less significant stage.\n\nBy linear superposition of delays along the critical path, the worst-case total propagation delay is therefore\n$$\nt_{p,\\mathrm{worst}}=t_{p,local}+2\\,t_{p,cascade}.\n$$\nSubstituting the given values,\n$$\nt_{p,\\mathrm{worst}}=11.5\\ \\mathrm{ns}+2\\times 4.8\\ \\mathrm{ns}=11.5\\ \\mathrm{ns}+9.6\\ \\mathrm{ns}=21.1\\ \\mathrm{ns}.\n$$\nRounded to three significant figures, the result remains $21.1$.", "answer": "$$\\boxed{21.1}$$", "id": "1919818"}]}