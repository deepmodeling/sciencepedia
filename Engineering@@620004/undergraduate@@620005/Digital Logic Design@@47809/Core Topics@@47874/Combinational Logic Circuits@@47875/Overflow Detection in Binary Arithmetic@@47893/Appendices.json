{"hands_on_practices": [{"introduction": "Understanding arithmetic overflow begins with a simple but crucial principle: any number system with a fixed number of bits has a limited representable range. This first exercise provides a direct, hands-on opportunity to explore this boundary. By testing several simple addition operations, you will practice identifying when a result exceeds the maximum value allowed by a 5-bit two's complement system, solidifying your grasp of the fundamental definition of overflow.", "problem": "A simple processor core is designed to handle sensor data. It operates exclusively with 5-bit signed integers using two's complement representation. The range of representable numbers in this system is from $-16$ to $+15$. The core's Arithmetic Logic Unit (ALU) performs addition on two 5-bit operands, $A$ and $B$. An overflow occurs if the true result of the addition falls outside the representable range.\n\nYou are provided with several pairs of operands $(A, B)$, specified in their decimal values. Your task is to identify which of the following addition operations, $A + B$, will cause an overflow in this 5-bit two's complement system.\n\nA) $A = 12, B = -5$\n\nB) $A = -8, B = -7$\n\nC) $A = 9, B = 6$\n\nD) $A = 10, B = 6$\n\nE) $A = -15, B = 15$", "solution": "In a two's complement system with word size $n$, the representable range is from $-2^{n-1}$ to $2^{n-1}-1$. For $n=5$, the range is\n$$\n[-2^{4},\\,2^{4}-1]=[-16,\\,15].\n$$\nAn overflow in addition occurs if the true integer sum $r=A+B$ lies outside this interval. Equivalently, overflow can occur only when adding two operands of the same sign produces a result whose magnitude exceeds the representable bound, which manifests as the result's sign differing from the operands' sign.\n\nEvaluate each option by computing the true sum and comparing to the interval:\n- A) $12+(-5)=7$, with opposite signs and $7\\in[-16,15]$; no overflow.\n- B) $-8+(-7)=-15$, both negative and $-15\\in[-16,15]$; no overflow.\n- C) $9+6=15$, both positive and $15\\in[-16,15]$; no overflow.\n- D) $10+6=16$, both positive and $16\\notin[-16,15]$; overflow occurs.\n- E) $-15+15=0$, opposite signs and $0\\in[-16,15]$; no overflow.\n\nTherefore, only option D causes an overflow.", "answer": "$$\\boxed{D}$$", "id": "1950184"}, {"introduction": "Building on the basic definition of overflow, this problem challenges you to think in reverse and consider subtraction. Since subtraction, like $X - B$, is performed as addition ($X + (-B)$) in digital systems, you will determine the range of input values $X$ that cause the result to fall below the minimum representable value. This practice sharpens your problem-solving skills by forcing you to work with inequalities within the constraints of a 4-bit two's complement system.", "problem": "In a computer's Arithmetic Logic Unit (ALU), signed integers are represented using a 4-bit two's complement system. The ALU is tasked with performing the subtraction operation $S = X - B$, where $X$ is a variable integer and $B$ is a constant with a decimal value of 5. Your goal is to identify all possible decimal integer values of $X$ that are representable in this 4-bit system for which the computation of $S$ results in an arithmetic overflow.\n\nWhich of the following sets represents the complete collection of all such values for $X$?\n\nA. $\\{-8, -7, -6, -5, -4\\}$\n\nB. $\\{4, 5, 6, 7\\}$\n\nC. $\\{-3, -2, -1, 0\\}$\n\nD. $\\{-8, -7, -6\\}$\n\nE. The set is empty as overflow is impossible for this operation.\n\nF. $\\{5, 6, 7\\}$", "solution": "In a 4-bit two's complement system, the representable integers are exactly those in the range\n$$[-2^{3},\\,2^{3}-1] = [-8,\\,7].$$\nThe ALU computes\n$$S = X - 5 = X + (-5).$$\nUsing two's complement addition, overflow for addition occurs if and only if the two addends have the same sign and the result has the opposite sign. Here, the addends are $X$ and $-5$, and since $-5<0$, overflow can occur only when $X<0$ and the computed result $S$ is nonnegative. This corresponds precisely to the case when the exact mathematical result falls below the lower bound $-8$ and wraps into the nonnegative range.\n\nEquivalently, overflow occurs exactly when the true result $X - 5$ is outside the representable range:\n$$X - 5 < -8 \\quad \\text{or} \\quad X - 5 > 7.$$\nThe second inequality gives $X > 12$, which is impossible since $X \\leq 7$. The first inequality gives\n$$X < -3.$$\nIntersecting with the representable $X \\in \\{-8,-7,-6,-5,-4,-3,-2,-1,0,1,2,3,4,5,6,7\\}$ yields\n$$X \\in \\{-8,-7,-6,-5,-4\\}.$$\n\nThis set matches option A.", "answer": "$$\\boxed{A}$$", "id": "1950193"}, {"introduction": "Now we move from conceptual arithmetic to a practical simulation of a processor's Arithmetic Logic Unit (ALU). This exercise [@problem_id:1950214] requires you to track the state of an 8-bit accumulator through sequential additions, using the binary representations directly. You will apply the key diagnostic rule for two's complement overflow—checking if adding two numbers of the same sign produces a result with the opposite sign—a skill essential for low-level programming and digital circuit design.", "problem": "An 8-bit microprocessor, which uses two's complement representation for signed integers, has an accumulator register denoted as `ACC`. Initially, the `ACC` holds the binary value $A = 01101101_2$. A small program is executed, which consists of the following two sequential instructions:\n\n1.  Add the value $B = 01010110_2$ to the `ACC`. The result is stored back in the `ACC`.\n2.  Add the value $C = 10011011_2$ to the `ACC`. The result is again stored back in the `ACC`.\n\nBased on this sequence of operations, which of the following statements correctly describes the final binary value in the `ACC` register and specifies in which of the two addition steps (if any) an arithmetic overflow occurred?\n\nA. Final ACC: $01011110_2$, Overflow: First addition only.\n\nB. Final ACC: $11000011_2$, Overflow: Neither addition.\n\nC. Final ACC: $01011110_2$, Overflow: Both additions.\n\nD. Final ACC: $10100001_2$, Overflow: Second addition only.\n\nE. Final ACC: $11000011_2$, Overflow: First addition only.\n\nF. Final ACC: $01011110_2$, Overflow: Second addition only.\n\nG. Final ACC: $01011110_2$, Overflow: Neither addition.", "solution": "We use 8-bit two's complement arithmetic, where values are modulo $2^{8}$ and the signed range is from $-128$ to $127$. An overflow in two's complement addition occurs if and only if the addends have the same sign bit and the result has the opposite sign bit (equivalently, the carry into the most significant bit differs from the carry out).\n\nInitial accumulator: $A=01101101_{2}$. First addition adds $B=01010110_{2}$:\n$$\n01101101_{2}+01010110_{2}=11000011_{2}\\quad(\\text{mod }2^{8}).\n$$\nInterpreting signs: $A$ and $B$ have sign bit $0$ (both positive), while the result $11000011_{2}$ has sign bit $1$ (negative). Therefore, the first addition causes signed overflow. The accumulator after step 1 is $11000011_{2}$.\n\nSecond addition adds $C=10011011_{2}$ to the current accumulator:\n$$\n11000011_{2}+10011011_{2}=1\\,01011110_{2}\\;\\Rightarrow\\;\\text{ACC}=01011110_{2}\\quad(\\text{discarding carry out}).\n$$\nHere both addends $11000011_{2}$ and $10011011_{2}$ have sign bit $1$ (both negative), while the result $01011110_{2}$ has sign bit $0$ (positive). Therefore, the second addition also causes signed overflow.\n\nHence, the final accumulator value is $01011110_{2}$, and overflow occurred in both additions, which corresponds to option C.", "answer": "$$\\boxed{C}$$", "id": "1950214"}]}