{"hands_on_practices": [{"introduction": "Understanding a new digital architecture begins with mapping its fundamental components. The Carry-Select Adder's speed comes from a clever use of parallelism, which has a direct impact on its hardware cost. This first practice invites you to deconstruct a CSLA into its constituent Ripple-Carry Adder blocks to quantify the resources required for its speculative computation [@problem_id:1919002].", "problem": "In the design of a custom processor, a 12-bit carry-select adder is implemented to optimize for speed. The adder is constructed from several smaller 4-bit Ripple-Carry Adder (RCA) blocks. The architecture is as follows: The 12-bit inputs are divided into three contiguous 4-bit segments. The first block, which handles the least significant 4 bits (bits 0-3), computes its sum and carry-out directly, assuming an initial carry-in of 0. For each of the two subsequent 4-bit blocks (for bits 4-7 and 8-11), two separate 4-bit RCAs are used to compute the sum and carry-out in parallel: one assuming a carry-in of 0 from the previous stage, and the other assuming a carry-in of 1. A multiplexer then selects the correct result for each of these blocks based on the actual carry propagated from the preceding stage. To determine the total hardware resources required, a designer needs to count the number of fundamental building blocks. How many distinct 4-bit RCA operations are performed in total to compute a single 12-bit result with this architecture?", "solution": "The 12-bit carry-select adder is partitioned into three 4-bit segments. The first 4-bit block (bits 0–3) uses a single 4-bit RCA with an initial carry-in of 0, contributing one 4-bit RCA operation. Each of the next two 4-bit blocks (bits 4–7 and 8–11) uses two 4-bit RCAs in parallel, one assuming carry-in 0 and the other assuming carry-in 1; both computations are performed and a multiplexer selects the appropriate result, so each of these blocks contributes two 4-bit RCA operations. Therefore, the total number of 4-bit RCA operations performed is\n$$N_{\\text{RCA}}=1+2+2=5.$$", "answer": "$$\\boxed{5}$$", "id": "1919002"}, {"introduction": "The primary motivation for using a Carry-Select Adder is to reduce propagation delay compared to a simple Ripple-Carry Adder. To appreciate this performance gain, we must analyze the critical path—the longest delay path through the circuit—which determines its maximum operating speed. This exercise challenges you to calculate the total delay of a CSLA, making the theoretical advantage of parallel computation a concrete, quantifiable value [@problem_id:1919043].", "problem": "A digital systems engineer is designing a custom 9-bit arithmetic logic unit and needs to evaluate the performance of a proposed adder design. The design is a 9-bit carry-select adder intended to compute the sum $S = A + B$, where $A = A[8:0]$ and $B = B[8:0]$ are 9-bit binary numbers.\n\nThe adder's architecture is partitioned into three stages, each handling 3 bits:\n- **Stage 0 (bits 2:0):** This stage is implemented using a single 3-bit ripple-carry adder (RCA). The carry-in to this stage is hardwired to logic '0'.\n- **Stage 1 (bits 5:3):** This stage employs two parallel 3-bit RCAs. The first RCA calculates the sum and carry-out assuming its block-level carry-in is '0'. The second RCA simultaneously calculates the sum and carry-out assuming its block-level carry-in is '1'. A set of 2-to-1 multiplexers (MUXs) then selects the correct 3-bit sum and the correct 1-bit carry-out based on the actual carry-out signal generated by Stage 0.\n- **Stage 2 (bits 8:6):** This stage is structurally identical to Stage 1. Its selection MUXs are controlled by the final carry-out signal produced by Stage 1.\n\nThe fundamental components used to build the adder have the following delay characteristics:\n- Each 3-bit RCA is constructed from three 1-bit full adders (FAs).\n- For a 1-bit full adder, the propagation delay from any of its inputs (A, B, Cin) to its Sum output is $t_{\\text{FA,sum}} = 2.4$ ns.\n- The propagation delay from any of its inputs (A, B, Cin) to its Carry-out output is $t_{\\text{FA,carry}} = 1.8$ ns.\n- The propagation delay of a 2-to-1 multiplexer, measured from its select input to its single-bit output, is $t_{\\text{MUX}} = 0.9$ ns. The delay from the data inputs of the MUX is assumed to be less than this and not on the critical path.\n\nAll initial inputs to the adder, specifically the bits of $A$ and $B$, are available at time $t=0$. Calculate the total time required for the adder to produce a stable value for the final, most significant carry-out bit (the carry-out from Stage 2). Express your answer in nanoseconds (ns) and round it to two significant figures.", "solution": "We identify the critical path to the final most significant carry-out as the chain of block-level carry decisions that control the carry-select multiplexers, because the MUX select-to-output delay dominates over the MUX data-input delay by assumption.\n\nGiven:\n- Each 3-bit ripple-carry adder (RCA) is three 1-bit full adders in series.\n- The delay from any FA input to carry-out is $t_{\\mathrm{FA,carry}}=1.8$ ns.\n- The delay from MUX select to output is $t_{\\mathrm{MUX}}=0.9$ ns.\n- MUX data-input delays are assumed smaller than $t_{\\mathrm{MUX}}$ and not on the critical path.\n\nStage 0 (bits $[2:0]$) is a 3-bit RCA with carry-in fixed to $0$. The worst-case carry-out delay from $A[2:0],B[2:0]$ to the block carry-out is the sum of three FA carry-propagations:\n$$\nt_{C0}=3\\,t_{\\mathrm{FA,carry}}.\n$$\nStage 1 (bits $[5:3]$) precomputes both possibilities for block carry-in and uses a MUX selected by $C0$. Since the data inputs to the MUX are ready by time $3\\,t_{\\mathrm{FA,carry}}$ and the select arrives at $t_{C0}$, the Stage 1 carry-out appears after the select-to-output MUX delay:\n$$\nt_{C1}=t_{C0}+t_{\\mathrm{MUX}}=3\\,t_{\\mathrm{FA,carry}}+t_{\\mathrm{MUX}}.\n$$\nStage 2 (bits $[8:6]$) is identical, with its MUX selected by $C1$. Its two precomputed carry candidates are ready by $3\\,t_{\\mathrm{FA,carry}}$, which is earlier than or equal to the select arrival time. Thus the final carry-out appears after one more MUX select delay:\n$$\nt_{\\mathrm{final}}=t_{C1}+t_{\\mathrm{MUX}}=3\\,t_{\\mathrm{FA,carry}}+2\\,t_{\\mathrm{MUX}}.\n$$\nSubstituting the given numerical values and simplifying:\n$$\nt_{\\mathrm{final}}=3\\cdot 1.8+2\\cdot 0.9=5.4+1.8=7.2\\ \\text{ns}.\n$$\nRounded to two significant figures, the result remains $7.2$.", "answer": "$$\\boxed{7.2}$$", "id": "1919043"}, {"introduction": "Effective engineering is about managing trade-offs. For a Carry-Select Adder, there is an inherent tension between the delay within a block and the delay of the carry signal propagating between blocks, both of which are functions of the block size $k$. This final, more advanced practice moves from analysis to optimal design, tasking you with deriving the ideal block size that minimizes total delay, a key skill in high-performance digital design [@problem_id:1919060].", "problem": "You are an engineer designing a custom Arithmetic Logic Unit (ALU) and are tasked with optimizing an $N$-bit carry-select adder. The adder is constructed by dividing the $N$ bits into $M$ blocks of equal size, $k$ bits each, such that $N$ is a multiple of $k$.\n\nThe architecture is as follows:\n- The first block (handling bits 0 to $k-1$) is a standard $k$-bit Ripple-Carry Adder (RCA).\n- Each subsequent block (from block 2 to block $M$) consists of two parallel $k$-bit RCAs. One RCA calculates the sum and carry-out assuming a carry-in of 0, and the other does the same assuming a carry-in of 1. A bank of 2-to-1 multiplexers then selects the correct $k$ sum bits and the single carry-out bit for that block, based on the actual carry-in from the preceding block.\n\nAssume the following uniform propagation delays:\n- The worst-case propagation delay of a single full-adder (from any input to any output) is $t_{\\text{FA}}$.\n- The propagation delay of any 2-to-1 multiplexer used in the design is $t_{\\text{MUX}}$.\n- The time for all primary inputs ($A_i$, $B_i$, and the initial carry $C_0$) to be available is $t=0$.\n\nYour goal is to find the optimal block size $k$ that minimizes the worst-case propagation delay for the entire $N$-bit adder. For the purpose of this derivation, you should treat $k$ as a continuous real variable. Derive a closed-form expression for the optimal block size $k$ in terms of $N$, $t_{\\text{FA}}$, and $t_{\\text{MUX}}$.", "solution": "Let the $N$-bit adder be partitioned into $M$ equal blocks of size $k$ bits, so $M = N/k$ (with $N$ a multiple of $k$). All primary inputs are available at $t=0$.\n\nFirst, characterize delays within one block:\n- A $k$-bit ripple-carry adder (RCA) has worst-case delay $k\\,t_{\\text{FA}}$ from its inputs to its carry-out and to its most significant sum bit, since the carry must ripple through $k$ full adders.\n\nNow trace the worst-case path through the carry-select structure:\n- Block $1$ is a single $k$-bit RCA. Its carry-out (and its most significant sum) are ready at time\n$$\nT_{1} = k\\,t_{\\text{FA}}.\n$$\n- For each subsequent block $j \\geq 2$, two $k$-bit RCAs precompute results assuming carry-in $0$ and $1$. Their outputs (both sums and carry-out candidates) are ready by time $k\\,t_{\\text{FA}}$. The actual outputs of block $j$ are selected by a bank of $2$-to-$1$ multiplexers controlled by the actual carry-in from block $j-1$. Therefore, the outputs of block $j$ are ready at\n$$\nT_{j} = \\max\\!\\big(k\\,t_{\\text{FA}},\\,T_{j-1}\\big) + t_{\\text{MUX}}.\n$$\nSince $T_{1} = k\\,t_{\\text{FA}}$, it follows by induction that\n$$\nT_{j} = k\\,t_{\\text{FA}} + (j-1)\\,t_{\\text{MUX}}, \\quad j = 1,2,\\dots,M.\n$$\nHence, the total worst-case delay of the $N$-bit adder (i.e., for the last block $M$) is\n$$\nT_{\\text{total}}(k) = T_{M} = k\\,t_{\\text{FA}} + (M-1)\\,t_{\\text{MUX}}.\n$$\nSubstituting $M = N/k$ gives\n$$\nT_{\\text{total}}(k) = k\\,t_{\\text{FA}} + \\left(\\frac{N}{k} - 1\\right)t_{\\text{MUX}}.\n$$\n\nOptimize over $k>0$ (treated as a continuous variable). Define\n$$\ng(k) = k\\,t_{\\text{FA}} + \\frac{N\\,t_{\\text{MUX}}}{k},\n$$\nwhich differs from $T_{\\text{total}}(k)$ only by a constant offset $-t_{\\text{MUX}}$ irrelevant for optimization. Differentiate and set to zero:\n$$\n\\frac{dg}{dk} = t_{\\text{FA}} - \\frac{N\\,t_{\\text{MUX}}}{k^{2}} = 0\n\\quad\\Longrightarrow\\quad\nk^{2} = \\frac{N\\,t_{\\text{MUX}}}{t_{\\text{FA}}}.\n$$\nThus the stationary point is\n$$\nk^{*} = \\left(\\frac{N\\,t_{\\text{MUX}}}{t_{\\text{FA}}}\\right)^{\\frac{1}{2}}.\n$$\nThe second derivative\n$$\n\\frac{d^{2}g}{dk^{2}} = \\frac{2N\\,t_{\\text{MUX}}}{k^{3}} > 0\n$$\nconfirms this is a minimum. Therefore, the optimal block size (in the continuous relaxation) is\n$$\nk_{\\text{opt}} = \\left(\\frac{N\\,t_{\\text{MUX}}}{t_{\\text{FA}}}\\right)^{\\frac{1}{2}}.\n$$", "answer": "$$\\boxed{\\left(\\frac{N\\,t_{\\text{MUX}}}{t_{\\text{FA}}}\\right)^{\\frac{1}{2}}}$$", "id": "1919060"}]}