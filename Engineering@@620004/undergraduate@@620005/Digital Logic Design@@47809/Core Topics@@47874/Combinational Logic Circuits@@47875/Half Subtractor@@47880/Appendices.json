{"hands_on_practices": [{"introduction": "Before a digital circuit is used in a larger system, its correctness must be rigorously verified. For a combinational circuit like the half subtractor, this means ensuring it produces the correct output for every possible input. This practice [@problem_id:1940814] challenges you to determine the minimal set of inputs required for complete verification, directly reinforcing the fundamental link between a circuit's truth table and the practical task of testing.", "problem": "In digital logic design, a half subtractor is a fundamental combinational circuit that performs the subtraction of two single binary bits. The circuit has two inputs, a minuend bit $A$ and a subtrahend bit $B$, and produces two outputs: the Difference bit $D$ and the Borrow bit $B_{out}$. To ensure the correct logical operation of a newly fabricated half subtractor integrated circuit, a test engineer needs to apply a set of input test vectors. A test vector is a pair of binary values $(A, B)$ applied to the inputs. The goal is to find a set of test vectors that is both *complete* (i.e., it tests every possible input combination) and *minimal* (i.e., it contains no redundant vectors).\n\nWhich of the following options represents the minimal set of input test vectors, denoted as pairs $(A, B)$, required to fully verify the functionality of a half subtractor?\n\nA. `{(0, 0), (1, 1)}`\n\nB. `{(0, 1), (1, 0)}`\n\nC. `{(0, 0), (0, 1), (1, 0), (1, 1)}`\n\nD. `{(0, 0), (0, 1), (1, 0)}`\n\nE. `{(0, 0), (0, 1), (1, 0), (1, 1), (0, 1)}`", "solution": "A half subtractor takes binary inputs $A,B \\in \\{0,1\\}$ and produces the outputs Difference $D$ and Borrow $B_{\\text{out}}$ given by the standard logical relations\n$$D = A \\oplus B,$$\n$$B_{\\text{out}} = \\overline{A} \\cdot B.$$\nA test set is complete if it applies every possible input pair. Since the input space is $\\{0,1\\}^{2}$, the number of distinct input combinations is\n$$|\\{0,1\\}^{2}| = 2^{2} = 4,$$\nnamely $(0,0)$, $(0,1)$, $(1,0)$, and $(1,1)$. Therefore, to be complete (as defined: it tests every possible input combination), a test set must contain all four of these pairs. Any set with fewer than four distinct pairs is not complete. Any set with all four distinct pairs and no duplicates is minimal under the completeness requirement, because removing any one pair would violate completeness.\n\nEvaluating the options:\n- A and B each contain only two pairs, so they are not complete.\n- D contains only three distinct pairs, so it is not complete.\n- E contains all four pairs but includes a duplicate, so it is not minimal.\n- C contains exactly the four distinct input pairs, hence it is complete and minimal.\n\nThus the minimal complete set is option C.", "answer": "$$\\boxed{C}$$", "id": "1940814"}, {"introduction": "Understanding a component often involves not just knowing what it is, but also what it is not. This thought experiment [@problem_id:1940823] places you in the role of a test engineer with a \"black box\" that is either a half adder or a half subtractor. By analyzing their respective logic functions, you will discover the specific input condition that reveals the subtle yet critical difference between addition and subtraction at the bit level.", "problem": "You are tasked with analyzing two fundamental 2-input, 2-output digital logic circuits: a half adder and a half subtractor.\n\n- The half adder takes two binary inputs, $A$ and $B$, and produces a Sum output $S$ and a Carry-out $C_{out}$. The logic functions are $S = A \\oplus B$ and $C_{out} = A \\cdot B$.\n- The half subtractor takes two binary inputs, a minuend $A$ and a subtrahend $B$, and produces a Difference output $D$ and a Borrow-out $B_{out}$. The logic functions are $D = A \\oplus B$ and $B_{out} = \\overline{A} \\cdot B$.\n\nAn engineer is given a \"black box\" device that is guaranteed to be either a half adder or a half subtractor. To determine the identity of the device, the engineer can apply a single input vector $(A, B)$ and observe the resulting 2-bit output vector. The goal is to find an input vector for which the 2-bit output of the half adder is different from the 2-bit output of the half subtractor.\n\nWhich of the following input vectors $(A, B)$ will produce a different 2-bit output vector depending on whether the device is a half adder or a half subtractor, thus allowing the engineer to distinguish between the two?\n\nA. $(A=0, B=0)$\n\nB. $(A=1, B=1)$\n\nC. $(A=1, B=0)$\n\nD. Both $(A=0, B=0)$ and $(A=1, B=0)$ are correct.\n\nE. All input vectors produce distinct outputs for the two circuits.", "solution": "We are given two possible 2-input, 2-output devices:\n\nHalf adder: outputs $(S, C_{out})$ with\n$S=A\\oplus B, \\quad C_{out}=A \\cdot B.$\n\nHalf subtractor: outputs $(D, B_{out})$ with\n$D=A\\oplus B, \\quad B_{out}=\\overline{A} \\cdot B.$\n\nFor a given input $(A,B)$, the first output bit is identical for both devices since $S=D=A\\oplus B$. Therefore, the only possible difference is in the second output bit, where the half adder produces $A \\cdot B$ and the half subtractor produces $\\overline{A} \\cdot B$. Thus, the outputs differ exactly when\n$$A \\cdot B \\neq \\overline{A} \\cdot B.$$\n\nAnalyze by cases on $B$:\n\n1) If $B=0$, then\n$A \\cdot B=0, \\quad \\overline{A} \\cdot B=0,$\nso the second bits are equal, and the total 2-bit outputs are identical:\n$(A\\oplus 0, 0)=(A, 0).$\nThus, $(A,B)=(0,0)$ and $(1,0)$ do not distinguish the devices.\n\n2) If $B=1$, then\n$A \\cdot B=A, \\quad \\overline{A} \\cdot B=\\overline{A},$\nand since $A \\neq \\overline{A}$ for any Boolean $A$, the second bits differ. Concretely:\n- For $(A,B)=(0,1)$: half adder gives $(1,0)$, half subtractor gives $(1,1)$.\n- For $(A,B)=(1,1)$: half adder gives $(0,1)$, half subtractor gives $(0,0)$.\nThus, any input with $B=1$ distinguishes the devices.\n\nAmong the provided options, $(A,B)=(1,1)$ is included and does distinguish, while $(0,0)$ and $(1,0)$ do not. Therefore, the correct choice is B.", "answer": "$$\\boxed{B}$$", "id": "1940823"}, {"introduction": "A core principle of digital design is that abstract logic functions can be implemented using standard, versatile components. This exercise [@problem_id:1940773] challenges you to move from theory to practice by implementing a complete, reconfigurable half subtractor using only a single 4-to-1 multiplexer. Mastering this technique demonstrates how to synthesize custom logic from general-purpose building blocks, a fundamental skill for efficient circuit design.", "problem": "An engineer is designing a reconfigurable logic circuit using a single 4-to-1 multiplexer (MUX) and no other logic gates. The circuit has two primary data inputs, a minuend bit $A$ and a subtrahend bit $B$, and a control input $C$.\n\nThe MUX's select lines $S_1$ and $S_0$ are connected to $A$ and $B$ respectively (i.e., $S_1 = A$ and $S_0 = B$). The four data inputs of the MUX, denoted as the vector $(I_0, I_1, I_2, I_3)$, can be connected to a logic '0', a logic '1', or the control input $C$.\n\nThe circuit is required to function as a half subtractor whose output is selected by the control input $C$. Specifically:\n- When the control input $C=0$, the MUX output $Y$ must be the Borrow-out bit ($B_{out}$) of the half subtraction $A-B$.\n- When the control input $C=1$, the MUX output $Y$ must be the Difference bit ($D$) of the half subtraction $A-B$.\n\nFor reference, the logical expressions for the half subtractor outputs are $D = A \\oplus B$ and $B_{out} = \\overline{A} \\cdot B$.\n\nWhich of the following choices correctly specifies the required data input vector $(I_0, I_1, I_2, I_3)$ for the MUX to achieve this functionality?\n\nA. $(0, 1, C, C)$\n\nB. $(0, 1, C, 0)$\n\nC. $(B, C, 1, 0)$\n\nD. $(0, C, 1, C)$\n\nE. $(C, 1, 1, 0)$", "solution": "A 4-to-1 MUX with select lines $S_1=A$ and $S_0=B$ selects its output as follows:\n$$\n(A,B) = 00 \\Rightarrow Y=I_0,\\quad (A,B)=01 \\Rightarrow Y=I_1,\\quad (A,B)=10 \\Rightarrow Y=I_2,\\quad (A,B)=11 \\Rightarrow Y=I_3.\n$$\nThe required functionality is:\n- For $C=0$: $Y=B_{\\text{out}}=\\overline{A} \\cdot B$.\n- For $C=1$: $Y=D=A \\oplus B$.\n\nEvaluate the required output for each $(A,B)$ pair:\n- For $(A,B)=(0,0)$: $B_{\\text{out}}=0$ and $D=0$, so $Y=0$ for both $C=0$ and $C=1$. Hence $I_0=0$.\n- For $(A,B)=(0,1)$: $B_{\\text{out}}=1$ and $D=1$, so $Y=1$ for both $C=0$ and $C=1$. Hence $I_1=1$.\n- For $(A,B)=(1,0)$: $B_{\\text{out}}=0$ and $D=1$, so $Y=0$ when $C=0$ and $Y=1$ when $C=1$. This is achieved by $Y=C$. Hence $I_2=C$.\n- For $(A,B)=(1,1)$: $B_{\\text{out}}=0$ and $D=0$, so $Y=0$ for both $C=0$ and $C=1$. Hence $I_3=0$.\n\nThus, the required data input vector is $(I_0,I_1,I_2,I_3)=(0,1,C,0)$, which corresponds to option B.", "answer": "$$\\boxed{B}$$", "id": "1940773"}]}