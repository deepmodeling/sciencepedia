{"hands_on_practices": [{"introduction": "In practical digital design, we often need to build circuits that are larger or more complex than what a single standard component can provide. This exercise [@problem_id:1927585] demonstrates a fundamental technique in digital engineering: hierarchical design. You will learn how to cascade smaller decoders to construct a larger one by intelligently using their enable inputs to manage different parts of the address space.", "problem": "You are tasked with designing a memory address decoder for a small computer system. The system uses a 4-bit address bus, denoted by $A_3A_2A_1A_0$, where $A_3$ is the most significant bit (MSB). To implement the full 4-to-16 decoding, you have access to two smaller 3-to-8 decoders, which we will call $D_1$ and $D_2$.\n\nEach of these 3-to-8 decoders has the following characteristics:\n- Three address input lines: $I_2, I_1, I_0$.\n- Eight active-high output lines: $Y_7, Y_6, ..., Y_0$. An output $Y_k$ is high (logic 1) if the binary value of the input $I_2I_1I_0$ is equal to $k$, and the decoder is enabled. Otherwise, the output is low (logic 0).\n- One active-high enable input: $E$. The decoder is active only when $E=1$. If $E=0$, all outputs are forced to 0 regardless of the address inputs.\n\nIn your design, the lower three bits of the main address bus, $A_2, A_1, A_0$, are connected in parallel to the address inputs of both decoders $D_1$ and $D_2$. Decoder $D_1$ is intended to generate the outputs for the lower half of the address space (addresses 0 through 7), and decoder $D_2$ is intended to generate the outputs for the upper half (addresses 8 through 15).\n\nDetermine the Boolean logic expressions for the enable inputs, $E_1$ (for decoder $D_1$) and $E_2$ (for decoder $D_2$), as functions of the main address bus bits. Use a prime symbol (') to denote the NOT operation on a variable (e.g., $X'$). Present your final answer as a two-element row matrix, where the first element is the expression for $E_1$ and the second element is the expression for $E_2$.", "solution": "The 4-bit address bus is $A_3A_2A_1A_0$ with $A_3$ as the MSB. Both decoders $D_1$ and $D_2$ receive the same lower three address bits in parallel: $I_2I_1I_0 = A_2A_1A_0$. Each 3-to-8 decoder has an active-high enable $E$ such that its outputs respond to $I_2I_1I_0$ only when $E=1$, and are all $0$ when $E=0$.\n\nTo realize a full 4-to-16 decoder, the address range $0$ through $7$ (i.e., binary $A_3=0$ with $A_2A_1A_0$ spanning $000$ to $111$) must be produced by $D_1$, and the address range $8$ through $15$ (i.e., binary $A_3=1$ with $A_2A_1A_0$ spanning $000$ to $111$) must be produced by $D_2$. Therefore, the selection between $D_1$ and $D_2$ is entirely determined by $A_3$.\n\nBecause the enables are active-high, we require:\n- When $A_3=0$ (lower half), $D_1$ is enabled and $D_2$ is disabled. This implies $E_1=1$ and $E_2=0$, which is achieved by $E_1=A_3'$ and $E_2=A_3$.\n- When $A_3=1$ (upper half), $D_2$ is enabled and $D_1$ is disabled. This implies $E_1=0$ and $E_2=1$, which is again achieved by $E_1=A_3'$ and $E_2=A_3$.\n\nThus, the Boolean expressions for the enables are:\n$$E_1 = A_3', \\quad E_2 = A_3.$$\nPresented as a two-element row matrix, the result is $\\begin{pmatrix}A_3' & A_3\\end{pmatrix}$.", "answer": "$$\\boxed{\\begin{pmatrix}A_3' & A_3\\end{pmatrix}}$$", "id": "1927585"}, {"introduction": "Beyond their primary role in address selection, decoders are powerful tools for implementing any arbitrary logic function. Because a decoder's outputs correspond directly to the minterms of its inputs, we can generate any Boolean expression by simply combining the correct output lines. This practice [@problem_id:1927328] illustrates this versatility by tasking you with building a 1-bit full adder, a cornerstone of computer arithmetic, using a decoder as the core logic element.", "problem": "In the design of a simple Arithmetic Logic Unit (ALU), a fundamental component is the 1-bit full adder. This circuit adds three 1-bit inputs and produces a 2-bit output.\n\nYou are tasked with implementing a 1-bit full adder using a specific set of logic components: a single 3-to-8 decoder and no more than two additional logic gates. The full adder has three inputs: two bits to be added, $A$ and $B$, and a carry-in bit, $C_{in}$. It produces two outputs: a sum bit, $S$, and a carry-out bit, $C_{out}$.\n\nThe 3-to-8 decoder has three data input lines, $I_2, I_1, I_0$, and eight active-high output lines, $D_0, D_1, \\dots, D_7$. An output line $D_k$ is logic high (1) if and only if the binary value represented by the input $[I_2 I_1 I_0]$ is equal to the integer $k$; otherwise, it is logic low (0). The full adder's inputs are connected to the decoder's inputs as follows: $A$ is connected to $I_2$, $B$ is connected to $I_1$, and $C_{in}$ is connected to $I_0$.\n\nThe outputs $S$ and $C_{out}$ are to be implemented by combining the decoder's output lines using the two additional logic gates. Determine the standard sum-of-products Boolean expressions for $S$ and $C_{out}$ in terms of the decoder's output lines ($D_0, D_1, \\dots, D_7$).\n\nPresent your answer as a $1 \\times 2$ row matrix, where the first element is the expression for $S$ and the second is the expression for $C_{out}$. Use the `+` symbol for the logical OR operation.", "solution": "A 3-to-8 decoder produces active-high, one-hot outputs corresponding to the minterms of its three inputs. With $A \\to I_{2}$, $B \\to I_{1}$, and $C_{in} \\to I_{0}$, the output $D_{k}$ is high if and only if the input vector $[A\\,B\\,C_{in}]$ equals the binary representation of $k$, with $A$ as the most significant bit and $C_{in}$ as the least significant bit.\n\nFor a 1-bit full adder, the sum output is $S=A \\oplus B \\oplus C_{in}$ (true when the number of ones among $A,B,C_{in}$ is odd), and the carry output is $C_{out}$ (true when at least two of $A,B,C_{in}$ are one).\n\nEnumerating all input combinations and mapping to decoder outputs:\n- $A=0,B=0,C_{in}=0 \\Rightarrow k=0 \\Rightarrow D_{0}=1$: $S=0$, $C_{out}=0$.\n- $A=0,B=0,C_{in}=1 \\Rightarrow k=1 \\Rightarrow D_{1}=1$: $S=1$, $C_{out}=0$.\n- $A=0,B=1,C_{in}=0 \\Rightarrow k=2 \\Rightarrow D_{2}=1$: $S=1$, $C_{out}=0$.\n- $A=0,B=1,C_{in}=1 \\Rightarrow k=3 \\Rightarrow D_{3}=1$: $S=0$, $C_{out}=1$.\n- $A=1,B=0,C_{in}=0 \\Rightarrow k=4 \\Rightarrow D_{4}=1$: $S=1$, $C_{out}=0$.\n- $A=1,B=0,C_{in}=1 \\Rightarrow k=5 \\Rightarrow D_{5}=1$: $S=0$, $C_{out}=1$.\n- $A=1,B=1,C_{in}=0 \\Rightarrow k=6 \\Rightarrow D_{6}=1$: $S=0$, $C_{out}=1$.\n- $A=1,B=1,C_{in}=1 \\Rightarrow k=7 \\Rightarrow D_{7}=1$: $S=1$, $C_{out}=1$.\n\nTherefore, the standard sum-of-products forms in terms of decoder outputs are\n$$S=D_{1}+D_{2}+D_{4}+D_{7},$$\n$$C_{out}=D_{3}+D_{5}+D_{6}+D_{7}.$$\nEach of these can be realized with a single OR gate combining the corresponding decoder lines, satisfying the constraint of using no more than two additional logic gates.", "answer": "$$\\boxed{\\begin{pmatrix} D_{1}+D_{2}+D_{4}+D_{7} & D_{3}+D_{5}+D_{6}+D_{7} \\end{pmatrix}}$$", "id": "1927328"}, {"introduction": "A crucial skill for any digital systems designer or technician is the ability to troubleshoot faulty hardware by logically deducing the source of an error from its symptoms. This problem [@problem_id:1912565] places you in a realistic diagnostic scenario involving a common application: a BCD to seven-segment display driver. By comparing the expected output with the faulty display, you will practice the analytical reasoning required to pinpoint a single \"stuck-at\" fault within the circuit.", "problem": "An electronics technician is troubleshooting a custom-built digital instrument that uses a Binary-Coded Decimal (BCD) to seven-segment decoder driver. The decoder is designed to drive a common-anode display, where an output of logic `0` turns a segment ON and logic `1` turns it OFF. The BCD input is a 4-bit word represented by `DCBA`, where `D` is the most significant bit. The seven segments of the display, labeled `a` through `g`, are arranged in the standard configuration shown below:\n\n```\n  a\n ---\nf| g |b\n ---\ne|   |c\n ---\n  d\n```\n\nThe decoder is designed to produce the following standard display patterns:\n- 0: {a, b, c, d, e, f}\n- 1: {b, c}\n- 2: {a, b, d, e, g}\n- 3: {a, b, c, d, g}\n- 4: {b, c, f, g}\n- 5: {a, c, d, f, g}\n- 6: {a, c, d, e, f, g}\n- 7: {a, b, c}\n- 8: {a, b, c, d, e, f, g}\n- 9: {a, b, c, d, f, g}\n\nThe technician observes two specific malfunctions:\n1. When the BCD input is for the digit `9` (`1001`), the display incorrectly shows the digit `8`.\n2. When the BCD input is for the digit `5` (`0101`), the display incorrectly shows the digit `6`.\n\nAssuming there is a single, persistent fault where one of the seven segment output lines (`a` through `g`) is stuck at a constant logic level (either `0` or `1`), identify the faulty line and its stuck-at state.\n\nA. Segment `a` is stuck-at-0\n\nB. Segment `a` is stuck-at-1\n\nC. Segment `b` is stuck-at-0\n\nD. Segment `b` is stuck-at-1\n\nE. Segment `c` is stuck-at-0\n\nF. Segment `c` is stuck-at-1\n\nG. Segment `d` is stuck-at-0\n\nH. Segment `d` is stuck-at-1\n\nI. Segment `e` is stuck-at-0\n\nJ. Segment `e` is stuck-at-1\n\nK. Segment `f` is stuck-at-0\n\nL. Segment `f` is stuck-at-1\n\nM. Segment `g` is stuck-at-0\n\nN. Segment `g` is stuck-at-1", "solution": "In a common-anode seven-segment display, a logic $0$ at a segment output turns that segment ON, while a logic $1$ turns it OFF. A stuck-at-$0$ fault forces a segment always ON; a stuck-at-$1$ fault forces it always OFF.\n\nLet $S(n)$ denote the set of segments that should be ON for digit $n$. From the standard patterns:\n$$S(9)=\\{a,b,c,d,f,g\\},\\quad S(8)=\\{a,b,c,d,e,f,g\\},\\quad S(5)=\\{a,c,d,f,g\\},\\quad S(6)=\\{a,c,d,e,f,g\\}.$$\n\nFirst malfunction: for input $9$, the display shows $8$. The only difference between $S(8)$ and $S(9)$ is segment $e$:\n$$S(8)\\setminus S(9)=\\{e\\}.$$\nThus, for the $9$ input, $e$ is ON when it should be OFF, which requires that $e$ be forced ON. In a common-anode system, being forced ON corresponds to stuck-at-$0$ on line $e$.\n\nSecond malfunction: for input $5$, the display shows $6$. With $e$ stuck ON, the actual lit set for input $5$ becomes\n$$S(5)\\cup\\{e\\}=\\{a,c,d,e,f,g\\}=S(6),$$\nwhich matches the observed error. This confirms the diagnosis.\n\nA stuck-at-$1$ fault would remove a segment (turn it OFF) rather than add one, contradicting both observations where an extra segment appears. The only single-line fault consistent with both malfunctions is segment $e$ stuck-at-$0$.\n\nTherefore, the correct choice is I.", "answer": "$$\\boxed{I}$$", "id": "1912565"}]}