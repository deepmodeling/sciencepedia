{"hands_on_practices": [{"introduction": "Understanding a decoder's role as a fundamental building block is key to mastering combinational logic. This first exercise provides a concrete application by tasking you to design a prime number detector. By implementing the logic that identifies prime digits in BCD, you will see how a decoder directly translates a function's minterms into an easily constructible circuit, reinforcing the link between Boolean expressions and hardware. [@problem_id:1923095]", "problem": "A digital system is designed to validate identification codes. A key component of this system must check if a single decimal digit, encoded in Binary-Coded Decimal (BCD), is a prime number.\n\nYour task is to design the logic for this prime number detector. The circuit receives a 4-bit BCD input, denoted by $D_3D_2D_1D_0$, where $D_3$ is the most significant bit (MSB). The circuit produces a single bit output, $P$, which is HIGH (logic 1) if the decimal value of the BCD input is a prime number (2, 3, 5, or 7), and LOW (logic 0) otherwise.\n\nThis logic circuit must be implemented using only two components: a single 4-to-16 line decoder and a single external logic gate. The decoder has four input lines, $A_3, A_2, A_1, A_0$, which are connected to $D_3, D_2, D_1, D_0$ respectively. It has sixteen active-HIGH outputs, $Y_0, Y_1, \\dots, Y_{15}$. For an input combination on $A_3A_2A_1A_0$ corresponding to the binary value of an integer $m$, the output line $Y_m$ is HIGH, and all other output lines are LOW.\n\nDetermine the Boolean expression for the output $P$ in terms of the decoder's output lines, $Y_i$.", "solution": "The 4-to-16 decoder asserts exactly one active-HIGH output line $Y_{m}$ corresponding to the binary value $m$ applied at inputs $A_{3}A_{2}A_{1}A_{0}=D_{3}D_{2}D_{1}D_{0}$. A BCD digit is prime if its decimal value is in the set $\\{2,3,5,7\\}$. Therefore:\n- For input $2$ (0010), $Y_{2}=1$ and all other $Y_{i}=0$.\n- For input $3$ (0011), $Y_{3}=1$ and all other $Y_{i}=0$.\n- For input $5$ (0101), $Y_{5}=1$ and all other $Y_{i}=0$.\n- For input $7$ (0111), $Y_{7}=1$ and all other $Y_{i}=0$.\n\nTo produce output $P=1$ exactly for these inputs using one external gate, OR the corresponding decoder outputs. Hence the Boolean expression is\n$$\nP=Y_{2}+Y_{3}+Y_{5}+Y_{7}.\n$$\nFor invalid BCD inputs ($10$ through $15$), the decoder asserts one of $Y_{10}$ through $Y_{15}$, none of which are included in the OR, so $P=0$ as required. This uses a single 4-input OR gate as the only external logic gate in addition to the decoder.", "answer": "$$\\boxed{Y_{2}+Y_{3}+Y_{5}+Y_{7}}$$", "id": "1923095"}, {"introduction": "Digital logic design often involves translating abstract properties into concrete circuits. This practice moves beyond a simple list of minterms and challenges you to design a circuit that detects a specific structural property: a Hamming weight of exactly two in a 4-bit word. This exercise hones your ability to first analyze a functional requirement to determine the relevant minterms before using a decoder to implement the final logic function. [@problem_id:1923121]", "problem": "A digital system needs to monitor a 4-bit binary data stream, represented by the bits $I_3I_2I_1I_0$, where $I_3$ is the most significant bit. A combinational logic circuit is required to produce a high output (logic '1') if and only if the 4-bit input word has a Hamming weight of exactly two (i.e., it contains exactly two '1's).\n\nYou are tasked with implementing this function using only two components: a single 4-to-16 decoder and a single multi-input OR gate. The decoder has four input lines ($A, B, C, D$) corresponding to $I_3, I_2, I_1, I_0$ respectively, and sixteen active-high output lines, labeled $Y_0, Y_1, \\dots, Y_{15}$. The decoder is always enabled. When the binary value of the input $ABCD$ is equal to the integer $k$, the output line $Y_k$ is asserted high, while all other output lines remain low.\n\nTo construct the required function, some of the decoder's output lines are connected as inputs to the multi-input OR gate. The output of this OR gate is the final output of the entire circuit. To minimize hardware, the OR gate used must have the minimum number of inputs necessary. What is this minimum number of inputs required for the OR gate?", "solution": "Let the input word be $I_{3}I_{2}I_{1}I_{0}$, with a required condition that exactly two bits are $1$. The number of distinct 4-bit words with Hamming weight exactly two is the number of ways to choose $2$ positions out of $4$ for the ones:\n$$\n\\binom{4}{2}=6.\n$$\nA 4-to-16 active-high decoder asserts exactly one output line $Y_{k}$ for each input word, where $k$ is the integer value of $ABCD=I_{3}I_{2}I_{1}I_{0}$. Therefore, the desired function must be the logical OR of exactly those $Y_{k}$ whose input words have Hamming weight two.\n\nEnumerating the 4-bit inputs with exactly two ones gives the codes $0011, 0101, 0110, 1001, 1010, 1100$, which correspond to $k \\in \\{3,5,6,9,10,12\\}$. Hence the required output is\n$$\nF=Y_{3} + Y_{5} + Y_{6} + Y_{9} + Y_{10} + Y_{12}.\n$$\nSince each $Y_{k}$ is asserted for exactly one input word and the outputs are mutually exclusive, no single decoder output can cover more than one desired case. Therefore, an OR gate must have at least one input per required minterm. The minimum number of OR inputs is thus equal to the number of desired minterms, which is $\\binom{4}{2}=6$.", "answer": "$$\\boxed{6}$$", "id": "1923121"}, {"introduction": "In practical engineering scenarios, we are often constrained by the components available and must optimize for performance metrics like speed. This advanced problem simulates such a challenge, asking you to implement a 4-variable function using a smaller 3-to-8 decoder while minimizing the circuit's overall delay. Solving this requires a synthesis of skills—logic simplification, clever input partitioning, and timing analysis—that are crucial for designing efficient and high-performance digital systems. [@problem_id:1923072]", "problem": "An electrical engineer is tasked with implementing a specific 4-variable Boolean function, $F(A, B, C, D)$, using a limited set of components. The function is defined by the sum of minterms:\n$$F(A, B, C, D) = \\sum m(0, 2, 5, 7, 8, 10, 13, 15)$$\nThe available components and their associated propagation delays are as follows:\n- One 3-to-8 line decoder: The propagation delay from any of its three address inputs to any of its eight outputs is $t_{dec} = 4.0 \\text{ ns}$.\n- A supply of standard logic gates:\n    - Inverters (NOT gates) with a delay of $t_{NOT} = 1.0 \\text{ ns}$.\n    - 2-input AND gates with a delay of $t_{AND2} = 1.5 \\text{ ns}$.\n    - 2-input OR gates with a delay of $t_{OR2} = 1.5 \\text{ ns}$.\n\nThe implementation strategy requires connecting three of the four input variables ($A, B, C, D$) to the decoder's address inputs. The eight outputs of the decoder, along with the fourth remaining input variable (referred to as the \"external variable\"), must then be used as inputs to a network of the supplied external logic gates to compute the function $F$. Any logic gate with $k  2$ inputs must be constructed from a balanced tree of 2-input gates of the same type. For example, a k-input OR gate would be built from a tree of 2-input OR gates, and its delay is $\\lceil \\log_2(k) \\rceil \\cdot t_{OR2}$.\n\nYour task is to determine the optimal partitioning of the four input variables that minimizes the worst-case propagation delay for the entire circuit. The worst-case delay is defined as the longest time it takes for a signal change at any of the four inputs ($A, B, C, D$) to propagate to the final output, $F$.\n\nCalculate this minimum possible worst-case propagation delay. Express your answer in nanoseconds (ns), rounded to three significant figures.", "solution": "Start from the minterm specification\n$$F(A,B,C,D)=\\sum m(0,2,5,7,8,10,13,15).$$\nIndexing with $A$ as the most significant bit and $D$ as the least significant bit, separate by the value of $B$:\n- For $B=0$: the included minterms are $m(0,2,8,10)$, which correspond to $D=0$ for all $A,C$. Hence $F|_{B=0}=\\bar{D}$.\n- For $B=1$: the included minterms are $m(5,7,13,15)$, which correspond to $D=1$ for all $A,C$. Hence $F|_{B=1}=D$.\nTherefore,\n$$F=\\bar{B}\\bar{D}+BD,$$\ni.e., $F$ is the XNOR of $B$ and $D$, independent of $A$ and $C$.\n\nTo minimize the worst-case propagation delay using the given decoder, choose the three decoder address inputs to include both variables on which $F$ depends. Thus take the decoder inputs as $\\{B,C,D\\}$ (or equivalently $\\{A,B,D\\}$), and take the remaining variable ($A$ or $C$ respectively) as the external input. Since $F$ is independent of the external variable, the external input does not need to be used in the logic.\n\nWith decoder inputs $\\{B,C,D\\}$, exactly one of the eight outputs is asserted for each $(B,C,D)$. Because $F=1$ iff $B=D$, we realize $F$ as the OR of the four decoder outputs corresponding to $(B,D)=(0,0)$ and $(B,D)=(1,1)$, for both values of $C$. That is, $F$ is a 4-input OR of the corresponding decoder lines (for inputs $(B,C,D)$):\n$$F = Y_0 + Y_2 + Y_5 + Y_7$$\nBy the given rule, a 4-input OR is implemented as a balanced tree of 2-input OR gates with delay $\\lceil \\log_{2}(4)\\rceil \\cdot t_{OR2}=2 \\cdot t_{OR2}$.\n\nPropagation delay analysis:\n- For changes on $B$ or $D$ (both are decoder inputs and $F$ depends on them), the path delay is\n$$t_{\\text{path}}=t_{dec}+2 \\cdot t_{OR2}.$$\n- For changes on $C$ (also a decoder input), $F$ is independent of $C$; the steady-state output does not change, so this does not increase the worst-case delay.\n- For changes on the external input ($A$ if $\\{B,C,D\\}$ were used, or $C$ if $\\{A,B,D\\}$ were used), $F$ is independent of that variable; again no increase in the worst-case delay.\n\nHence the worst-case propagation delay is\n$$t_{\\max}=t_{dec}+2 \\cdot t_{OR2}.$$\nSubstitute the given values $t_{dec}=4.0\\ \\text{ns}$ and $t_{OR2}=1.5\\ \\text{ns}$:\n$$t_{\\max}=4.0+2\\cdot 1.5=7.0\\ \\text{ns}.$$\n\nFor completeness, any partition that leaves $B$ or $D$ as the external variable requires forming two 4-input ORs to collect the relevant decoder outputs, then an AND with the external variable (or its inversion), and a final OR, yielding\n$$t_{\\max}=t_{dec}+2 \\cdot t_{OR2}+t_{AND2}+t_{OR2}=t_{dec}+3 \\cdot t_{OR2}+t_{AND2},$$\nwhich with the given numbers is $4.0+3\\cdot 1.5+1.5=10.0\\ \\text{ns}$, strictly worse than $7.0\\ \\text{ns}$.\n\nTherefore, the optimal partition connects $B$ and $D$ (and either $A$ or $C$) to the decoder, and implements $F$ as a 4-input OR of the appropriate decoder outputs, giving a minimum worst-case propagation delay of $7.00\\ \\text{ns}$.", "answer": "$$\\boxed{7.00}$$", "id": "1923072"}]}