{"hands_on_practices": [{"introduction": "To truly master the full adder, we must first look inside the black box and understand its inner workings at the gate level. This initial practice problem provides a direct way to do just that. By manually tracing the logic values for a specific set of inputs, you will solidify your understanding of how basic XOR, AND, and OR gates combine to perform binary addition [@problem_id:1938814]. This foundational skill is crucial for predicting circuit behavior and for diagnosing issues in more complex designs.", "problem": "A digital full adder is a fundamental combinational logic circuit that performs the arithmetic sum of three single-bit inputs. Consider a standard gate-level implementation of a full adder circuit that takes three inputs, $A$, $B$, and a carry-in bit $C_{in}$, and produces two outputs: a sum bit $S$ and a carry-out bit $C_{out}$.\n\nThe circuit is constructed using the following logic expressions, where $\\oplus$ denotes the Exclusive OR (XOR) operation, $\\cdot$ denotes the AND operation, and $+$ denotes the OR operation.\n\n1.  An intermediate signal $P$ is generated by the expression: $P = A \\oplus B$.\n2.  The sum bit $S$ is then calculated using $P$ and $C_{in}$: $S = P \\oplus C_{in}$.\n3.  Another intermediate signal $Q$ is generated by: $Q = A \\cdot B$.\n4.  A third intermediate signal $R$ is generated by: $R = P \\cdot C_{in}$.\n5.  Finally, the carry-out bit $C_{out}$ is calculated from $Q$ and $R$: $C_{out} = Q + R$.\n\nGiven the specific input values $A=1$, $B=0$, and $C_{in}=1$, determine the resulting binary logic values for the intermediate signals $P$, $R$ and the final outputs $S$, $C_{out}$. Present your answer as an ordered set of four binary digits corresponding to $(P, R, S, C_{out})$.", "solution": "We are given a gate-level full adder with the logic definitions: $P = A \\oplus B$, $S = P \\oplus C_{in}$, $Q = A \\cdot B$, $R = P \\cdot C_{in}$, and $C_{out} = Q + R$. Here $\\oplus$ is Exclusive OR (outputs $1$ if and only if the two inputs differ), $\\cdot$ is AND (outputs $1$ if and only if both inputs are $1$), and $+$ is OR (outputs $1$ if and only if at least one input is $1$). The inputs are $A=1$, $B=0$, and $C_{in}=1$.\n\nCompute the intermediate and output values step by step:\nUsing the XOR property with unequal inputs, \n$$P = A \\oplus B = 1 \\oplus 0 = 1.$$\nUsing XOR with equal inputs,\n$$S = P \\oplus C_{in} = 1 \\oplus 1 = 0.$$\nUsing AND with one input zero,\n$$Q = A \\cdot B = 1 \\cdot 0 = 0.$$\nUsing AND with both inputs one,\n$$R = P \\cdot C_{in} = 1 \\cdot 1 = 1.$$\nUsing OR with one input one,\n$$C_{out} = Q + R = 0 + 1 = 1.$$\n\nTherefore, the ordered set $(P, R, S, C_{out})$ is $(1, 1, 0, 1)$.", "answer": "$$\\boxed{\\begin{pmatrix}1 & 1 & 0 & 1\\end{pmatrix}}$$", "id": "1938814"}, {"introduction": "Digital systems are rarely composed of a single component; they are complex assemblies of building blocks like the full adder. This exercise elevates our perspective from a single component to a small system—a 4-bit adder—and introduces a realistic challenge: a wiring fault. By analyzing the effects of misconnected carry signals, you will learn to think like a debugging engineer, tracing information flow through a faulty system to predict its incorrect but logical outcome [@problem_id:1938834]. This practice underscores the critical importance of the carry-propagation path in arithmetic circuits.", "problem": "A digital circuit is designed to perform a 4-bit binary addition. The circuit is constructed from four independent full adder (FA) modules, which are indexed from 0 to 3 (FA_0, FA_1, FA_2, FA_3). Each FA module accepts three 1-bit inputs, $A_i$, $B_i$, and a carry-in $C_{in\\_i}$, and produces two 1-bit outputs, a sum $S_i$ and a carry-out $C_{out\\_i}$. The logical behavior of any FA module is governed by the standard Boolean equations:\n$$S_i = A_i \\oplus B_i \\oplus C_{in\\_i}$$\n$$C_{out\\_i} = (A_i \\cdot B_i) + (C_{in\\_i} \\cdot (A_i \\oplus B_i))$$\nwhere $\\oplus$ denotes the XOR operation and $\\cdot$ denotes the AND operation.\n\nThe circuit is meant to add two 4-bit numbers, $A = A_3A_2A_1A_0$ and $B = B_3B_2B_1B_0$, along with an initial carry-in bit, $C_{in}$. The bit $A_i$ from number $A$ and bit $B_i$ from number $B$ are fed into the corresponding inputs of FA_i. The final sum is represented by the 4-bit number $S = S_3S_2S_1S_0$.\n\nHowever, due to a wiring fault during manufacturing, the carry propagation path is altered. The specific connections for the carry signals are as follows:\n- The circuit's main carry-in, $C_{in}$, is connected to the carry-in of FA_0 (i.e., $C_{in\\_0} = C_{in}$).\n- The carry-out of FA_0 ($C_{out\\_0}$) is correctly connected to the carry-in of FA_1 ($C_{in\\_1}$).\n- The carry-out of FA_1 ($C_{out\\_1}$) is incorrectly routed to the carry-in of FA_3 ($C_{in\\_3}$).\n- The carry-in of FA_2 ($C_{in\\_2}$) is permanently tied to a logic low level (ground), meaning $C_{in\\_2} = 0$.\n- The carry-out signals $C_{out\\_2}$ and $C_{out\\_3}$ are not connected to any other part of the circuit.\n\nGiven the input values $A = 1011_2$, $B = 0110_2$, and an initial carry-in of $C_{in} = 1$, calculate the resulting 4-bit binary output $S = S_3S_2S_1S_0$. Present your answer as a 4-digit binary string.", "solution": "We identify the bit assignments from the given binaries:\n$$A=1011_{2}\\ \\Rightarrow\\ A_{3}=1,\\ A_{2}=0,\\ A_{1}=1,\\ A_{0}=1,$$\n$$B=0110_{2}\\ \\Rightarrow\\ B_{3}=0,\\ B_{2}=1,\\ B_{1}=1,\\ B_{0}=0,$$\nand the initial carry-in is\n$$C_{in}=1.$$\n\nThe faulty carry wiring is:\n$$C_{in\\_0}=C_{in}=1,\\quad C_{in\\_1}=C_{out\\_0},\\quad C_{in\\_2}=0,\\quad C_{in\\_3}=C_{out\\_1}.$$\n\nWe use the full adder equations for each stage $i$:\n$$S_{i}=A_{i}\\oplus B_{i}\\oplus C_{in\\_i},\\qquad C_{out\\_i}=(A_{i}\\cdot B_{i})+(C_{in\\_i}\\cdot(A_{i}\\oplus B_{i})).$$\n\nStage FA$_{0}$ with $A_{0}=1$, $B_{0}=0$, $C_{in\\_0}=1$:\n$$S_{0}=1\\oplus 0\\oplus 1=(1\\oplus 0)\\oplus 1=1\\oplus 1=0,$$\n$$C_{out\\_0}=(1\\cdot 0)+(1\\cdot(1\\oplus 0))=0+(1\\cdot 1)=1.$$\n\nStage FA$_{1}$ with $A_{1}=1$, $B_{1}=1$, $C_{in\\_1}=C_{out\\_0}=1$:\n$$S_{1}=1\\oplus 1\\oplus 1=(1\\oplus 1)\\oplus 1=0\\oplus 1=1,$$\n$$C_{out\\_1}=(1\\cdot 1)+(1\\cdot(1\\oplus 1))=1+(1\\cdot 0)=1.$$\n\nStage FA$_{2}$ with $A_{2}=0$, $B_{2}=1$, $C_{in\\_2}=0$:\n$$S_{2}=0\\oplus 1\\oplus 0=(0\\oplus 1)\\oplus 0=1\\oplus 0=1,$$\n$$C_{out\\_2}=(0\\cdot 1)+(0\\cdot(0\\oplus 1))=0+0=0\\quad\\text{(unused)}.$$\n\nStage FA$_{3}$ with $A_{3}=1$, $B_{3}=0$, $C_{in\\_3}=C_{out\\_1}=1$:\n$$S_{3}=1\\oplus 0\\oplus 1=(1\\oplus 0)\\oplus 1=1\\oplus 1=0,$$\n$$C_{out\\_3}=(1\\cdot 0)+(1\\cdot(1\\oplus 0))=0+(1\\cdot 1)=1\\quad\\text{(unused)}.$$\n\nThus the resulting sum bits are\n$$S_{3}S_{2}S_{1}S_{0}=0\\,1\\,1\\,0.$$", "answer": "$$\\boxed{0110}$$", "id": "1938834"}, {"introduction": "Beyond analyzing existing circuits, a key skill for a digital designer is synthesis—building complex functions from a limited set of simpler components. This final practice challenges you to implement a full adder using only 2-to-1 multiplexers and inverters, a common scenario in modern integrated circuit design. This task requires a deeper application of Boolean algebra and demonstrates the versatility of multiplexers as universal logic elements, pushing your problem-solving skills from simple analysis to creative design [@problem_id:1938831].", "problem": "A digital systems engineer is tasked with designing a 1-bit full adder computational core for a specialized processor. The fabrication process is constrained, offering a standard cell library that contains only two types of components: 2-to-1 multiplexers and standard inverters. The 2-to-1 multiplexer has data inputs $I_0$ and $I_1$, a select input $S$, and an output $Y$ defined by the Boolean function $Y = \\bar{S} \\cdot I_0 + S \\cdot I_1$.\n\nThe full adder must be implemented with three inputs, $A$, $B$, and $C_{in}$ (carry-in), and produce two outputs: Sum ($S$) and Carry-out ($C_{out}$). The defining logical expressions are:\n$$S = A \\oplus B \\oplus C_{in}$$\n$$C_{out} = AB + BC_{in} + AC_{in}$$\n\nThe engineer must create a single integrated circuit that generates both $S$ and $C_{out}$ from the inputs $A$, $B$, and $C_{in}$. The design should be optimized for the minimum total component count by sharing logic between the $S$ and $C_{out}$ computations where possible. The primary inputs $A, B, C_{in}$, as well as the logic constants 0 and 1, are available to be connected to any multiplexer input or select line. Any required complemented signals (e.g., $\\bar{A}, \\bar{B}, \\bar{C}_{in}$) are not available by default and must be generated using an inverter.\n\nWhat is the minimum number of 2-to-1 multiplexers and inverters, respectively, required to construct the complete full adder circuit?\n\nA. (3 MUXes, 2 Inverters)\n\nB. (4 MUXes, 2 Inverters)\n\nC. (5 MUXes, 2 Inverters)\n\nD. (3 MUXes, 3 Inverters)\n\nE. (4 MUXes, 3 Inverters)", "solution": "We are restricted to 2-to-1 multiplexers (with output $Y=\\bar{S}\\,I_{0}+S\\,I_{1}$) and inverters, with inputs $A,B,C_{in}$ and constants $0,1$ available. The required outputs are\n$$S=A\\oplus B\\oplus C_{in},\\qquad C_{out}=AB+AC_{in}+BC_{in}.$$\n\nIntroduce the shared propagate signal\n$$P=A\\oplus B.$$\nRealize $P$ with one multiplexer and one inverter using\n$$P=\\bar{A}B+A\\bar{B},$$\ni.e., a 2-to-1 MUX with select $A$, $I_{0}=B$, $I_{1}=\\bar{B}$ (one inverter generates $\\bar{B}$).\n\nSum can be expressed as\n$$S=P\\oplus C_{in}=\\bar{P}\\,C_{in}+P\\,\\bar{C}_{in}.$$\nThis is exactly a 2-to-1 MUX with select $P$, $I_{0}=C_{in}$, $I_{1}=\\bar{C}_{in}$, requiring one inverter to generate $\\bar{C}_{in}$.\n\nFor carry, use Shannon decomposition with respect to $P=A\\oplus B$. If $P=0$ then $A=B$, and\n$$C_{out}=AB+AC_{in}+BC_{in}=\\begin{cases}\n0,&A=B=0,\\\\\n1,&A=B=1,\n\\end{cases}$$\nso $C_{out}=A$. If $P=1$ then $A\\neq B$, whence $AB=0$ and $A+B=1$, giving\n$$C_{out}=AB+AC_{in}+BC_{in}=C_{in}.$$\nThus\n$$C_{out}=\\bar{P}\\,A+P\\,C_{in},$$\nwhich is a 2-to-1 MUX with select $P$, $I_{0}=A$, $I_{1}=C_{in}$, and needs no inverter.\n\nComponent count:\n- One MUX + one inverter to generate $P$.\n- One MUX + one inverter to generate $S$ from $P$ and $C_{in}$.\n- One MUX (no inverter) to generate $C_{out}$ from $P$, $A$, $C_{in}$.\n\nTotal: $3$ multiplexers and $2$ inverters.\n\nMinimality argument: Each of $S$ and $C_{out}$ requires a MUX under the given gate set (since $S$ is an XOR and $C_{out}$ is a conditional combination $\\bar{P}A+PC_{in}$), and producing the shared $P=A\\oplus B$ needs at least one additional MUX. Moreover, implementing the two XORs ($P$ and $S=P\\oplus C_{in}$) with a single MUX each requires one complemented literal in their data, forcing at least two inversions unless extra MUXes are used to synthesize complements. Therefore $3$ MUXes and $2$ inverters is minimal.\n\nHence the correct choice is A.", "answer": "$$\\boxed{A}$$", "id": "1938831"}]}