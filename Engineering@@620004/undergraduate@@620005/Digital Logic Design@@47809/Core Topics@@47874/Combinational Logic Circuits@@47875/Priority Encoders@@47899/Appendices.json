{"hands_on_practices": [{"introduction": "The first step in mastering any digital component is to understand its fundamental input-to-output behavior. This exercise focuses on the core function of a standard 4-to-2 priority encoder, challenging you to determine the output for a given set of active inputs. By working through this foundational problem [@problem_id:1954014], you will solidify your understanding of how the encoder identifies the highest-priority active signal while ignoring all others, a critical concept for managing multiple simultaneous requests in any digital system.", "problem": "A 4-to-2 priority encoder is a combinational logic circuit that accepts four inputs and produces a two-bit binary output. The encoder is designed to identify the highest-priority active input among its four data inputs, denoted as $I_3$, $I_2$, $I_1$, and $I_0$. For this specific device, the input $I_3$ has the highest priority, followed by $I_2$, then $I_1$, and finally $I_0$ with the lowest priority.\n\nThe encoder has two binary outputs, $Y_1$ and $Y_0$, which represent the binary index of the highest-priority active input (where 'active' means the input is at logic '1'). For example, if $I_2$ were the highest-priority active input, the output $Y_1Y_0$ would be the binary representation of 2, which is '10'. In addition to the encoded output, there is a 'Valid' bit, $V$. The Valid bit $V$ is set to '1' if one or more of the inputs are active, and it is '0' only when all inputs are inactive (logic '0').\n\nGiven an input data vector where $I_3I_2I_1I_0 = 1011$, determine the resulting state of the outputs $V, Y_1,$ and $Y_0$. Select the correct option from the choices below.\n\nA. $V=1, Y_1=0, Y_0=1$\n\nB. $V=1, Y_1=1, Y_0=0$\n\nC. $V=1, Y_1=1, Y_0=1$\n\nD. $V=0, Y_1=1, Y_0=1$\n\nE. $V=1, Y_1=0, Y_0=0$", "solution": "A 4-to-2 priority encoder selects the highest-priority asserted input and outputs its index in binary on $(Y_{1},Y_{0})$, with $V$ indicating whether any input is asserted. Using standard Boolean algebra (with $+$ as OR, concatenation or $\\cdot$ as AND, and overline as NOT), the canonical expressions for a 4-to-2 priority encoder with priority $I_{3} \\succ I_{2} \\succ I_{1} \\succ I_{0}$ are:\n$$V = I_{3} + I_{2} + I_{1} + I_{0}$$\n$$Y_{1} = I_{3} + I_{2}$$\n$$Y_{0} = I_{3} + \\overline{I_{2}}\\,I_{1}$$\nJustification:\n- $V$ is $1$ if any input is active, hence the OR of all inputs.\n- $Y_{1}$ is $1$ exactly when the selected index is $2$ or $3$, which occurs if $I_{3}=1$ or (if $I_{3}=0$ and) $I_{2}=1$, yielding $I_{3} + I_{2}$.\n- $Y_{0}$ is $1$ when the selected index is odd (either $1$ or $3$). Index $3$ occurs if $I_{3}=1$, and index $1$ occurs only when $I_{3}=0$, $I_{2}=0$, and $I_{1}=1$, giving $I_{3} + \\overline{I_{2}}\\,I_{1}$.\n\nGiven $I_{3}I_{2}I_{1}I_{0} = 1011$, we have $I_{3}=1$, $I_{2}=0$, $I_{1}=1$, $I_{0}=1$. Substituting:\n$$V = 1 + 0 + 1 + 1 = 1$$\n$$Y_{1} = 1 + 0 = 1$$\n$$Y_{0} = 1 + \\overline{0}\\cdot 1 = 1 + 1\\cdot 1 = 1$$\nThus the outputs are $V=1$, $Y_{1}=1$, $Y_{0}=1$, which corresponds to option C.", "answer": "$$\\boxed{C}$$", "id": "1954014"}, {"introduction": "A deeper level of understanding often comes from reversing the problem. Instead of predicting an output from a known input, this practice challenges you to work backward, deducing all possible input scenarios that could produce a specific, observed output on a 4-to-2 priority encoder. This reverse-engineering task [@problem_id:1954056] is crucial for developing debugging and diagnostic skills, as it forces you to consider the \"don't-care\" conditions inherent in priority logic and demonstrates the many-to-one mapping that defines an encoder.", "problem": "Consider a digital logic component known as a 4-to-2 priority encoder. It has four data inputs, $I_3, I_2, I_1, I_0$, and two binary encoded outputs, $Y_1, Y_0$. The inputs are prioritized such that $I_3$ has the highest priority and $I_0$ has the lowest. The encoder's function is to output the binary representation of the index of the highest-priority input that is currently active (logic '1'). For this problem, we assume at least one input is always active.\n\nAn engineer is monitoring the outputs of such a device and observes a stable output code of $Y_1Y_0 = 01$.\n\nWhich of the following sets contains *all* possible 4-bit input vectors, represented as $I_3I_2I_1I_0$, that could have produced this specific output?\n\nA. `{0010}`\n\nB. `{0010, 0011}`\n\nC. `{0001, 1001, 0101, 1101}`\n\nD. `{0100, 0101, 0110, 0111}`\n\nE. `{0011}`", "solution": "A 4-to-2 priority encoder outputs the binary index of the highest-priority asserted input, with $I_{3}$ highest and $I_{0}$ lowest. A standard Boolean description (with at least one input asserted) is:\n$$\nY_{1} = I_{3} + I_{2}, \\quad Y_{0} = I_{3} + \\overline{I_{2}} I_{1}\n$$\nGiven the observed output $Y_{1}Y_{0} = 01$, we have $Y_{1} = 0$ and $Y_{0} = 1$.\n\n1) From $Y_{1} = 0$ and $Y_{1} = I_{3} + I_{2}$, it follows that\n$$\nI_{3} = 0 \\quad \\text{and} \\quad I_{2} = 0.\n$$\n\n2) Substitute $I_{3} = 0$ and $I_{2} = 0$ into $Y_{0} = I_{3} + \\overline{I_{2}} I_{1}$. Since $Y_{0} = 1$, we get $1 = 0 + (\\overline{0} \\cdot I_1)$, which simplifies to $I_1 = 1$.\n\n3) The input $I_{0}$ is of lower priority than $I_{1}$, so it does not affect the output when $I_{1} = 1$. Therefore $I_{0}$ can be $0$ or $1$.\n\nThus, all and only the input vectors that produce $Y_{1}Y_{0} = 01$ are\n$$\nI_{3}I_{2}I_{1}I_{0} \\in \\{0010,\\,0011\\}.\n$$\nAmong the given options, this corresponds exactly to option B.\n\nTo confirm exclusivity:\n- A and E each list only one of the two valid vectors, so they are incomplete.\n- C and D include vectors where a higher-priority input is $1$ (e.g., $I_{2}=1$ or $I_{3}=1$), which would not yield $01$.\n\nTherefore, the correct choice is B.", "answer": "$$\\boxed{B}$$", "id": "1954056"}, {"introduction": "Moving beyond analysis, this final practice challenges you to engage in circuit synthesis and design. You are tasked with creating a custom priority encoder for a microprocessor's interrupt controller, which not only identifies the highest-priority request but also includes a specialized \"collision detection\" output to flag when multiple requests occur simultaneously. This design problem [@problem_id:1954043] requires you to translate functional requirements into precise Boolean logic expressions, bridging the gap between theoretical knowledge and practical engineering application.", "problem": "You are tasked with designing a specialized logic circuit for a simple microprocessor's interrupt controller. The system has three Interrupt Request (IRQ) lines, denoted as $I_2, I_1,$ and $I_0$. The priority of the interrupts is fixed, with $I_2$ having the highest priority, followed by $I_1$, and finally $I_0$ with the lowest priority.\n\nThe circuit must produce two distinct outputs:\n1.  A 2-bit binary number, represented by the outputs $Y_1Y_0$, that indicates the index of the highest-priority active interrupt. The index corresponds to the subscript of the input line. For example, if $I_1$ is the highest-priority active line, the output $Y_1Y_0$ should be $01_2$. If no interrupts are active, the output should be $00_2$.\n2.  A single bit \"collision\" output, $C$, which must be high (1) if and only if two or more interrupt lines are active at the same time. Otherwise, $C$ must be low (0).\n\nYour task is to determine the correct set of simplified Boolean logic expressions for the outputs $Y_1$, $Y_0$, and $C$ in terms of the inputs $I_2, I_1,$ and $I_0$. In the following options, juxtaposition implies the AND operation (e.g., $AB$ is $A \\text{ AND } B$), `+` implies the OR operation, and an overbar (e.g., $\\overline{A}$) implies the NOT operation.\n\nWhich of the following options correctly represents the logic for $Y_1, Y_0,$ and $C$?\n\nA. $Y_1 = I_2$; $Y_0 = \\overline{I_2} I_1$; $C = I_1 I_0 + I_2 I_0 + I_2 I_1$\n\nB. $Y_1 = I_2$; $Y_0 = I_1$; $C = I_1 I_0 + I_2 I_0 + I_2 I_1$\n\nC. $Y_1 = I_2 + I_1$; $Y_0 = I_0$; $C = I_2 + I_1 + I_0$\n\nD. $Y_1 = I_2$; $Y_0 = \\overline{I_2} I_1$; $C = I_2 \\oplus I_1 \\oplus I_0$\n\nE. $Y_1 = I_2 + \\overline{I_2}I_1$; $Y_0 = \\overline{I_2}\\overline{I_1}I_0$; $C = I_2 I_1 + I_0$", "solution": "We require a 3-to-2 priority encoder with inputs $I_{2}$ (highest priority), $I_{1}$, and $I_{0}$ (lowest priority), producing a 2-bit code $Y_{1}Y_{0}$ that equals the index of the highest-priority active input, and a collision output $C$ that is $1$ if and only if at least two inputs are simultaneously $1$.\n\nFirst, derive $Y_{1}$. By the priority rule, whenever $I_{2}=1$ (regardless of $I_{1}$ and $I_{0}$), the highest active index is $2$, so the most significant bit must be $1$. Conversely, if $I_{2}=0$, the highest index cannot be $2$, so $Y_{1}=0$. Therefore,\n$$\nY_{1}=I_{2}.\n$$\n\nNext, derive $Y_{0}$. The least significant bit is $1$ exactly when the highest active index is $1$, which happens if and only if $I_{2}=0$ and $I_{1}=1$. In all other cases (including $I_{2}=1$ or $I_{1}=0$), $Y_{0}=0$. Hence,\n$$\nY_{0}=\\overline{I_{2}}\\,I_{1}.\n$$\nCheck against cases:\n- If $I_{2}=1$ (any $I_{1},I_{0}$), then $Y_{1}Y_{0}=10$, encoding index $2$.\n- If $I_{2}=0$ and $I_{1}=1$ (any $I_{0}$), then $Y_{1}Y_{0}=01$, encoding index $1$.\n- If $I_{2}=0$ and $I_{1}=0$ (any $I_{0}$), then $Y_{1}Y_{0}=00$, which corresponds either to index $0$ when $I_{0}=1$ or to no active interrupts when $I_{0}=0$, as specified.\n\nFinally, derive $C$. The collision output must be $1$ if and only if at least two of $I_{2},I_{1},I_{0}$ are $1$. The standard sum-of-products for the “at least two” function of three variables is the sum of all pairwise products:\n$$\nC=I_{2}I_{1}+I_{2}I_{0}+I_{1}I_{0}.\n$$\nThis is $1$ when exactly two inputs are $1$ (one corresponding product is $1$) and also when all three inputs are $1$ (all products are $1$, but their OR remains $1$), and it is $0$ when zero or one input is $1$ (all products are $0$).\n\nComparing with the provided options, the set\n$$\nY_{1}=I_{2},\\quad Y_{0}=\\overline{I_{2}}\\,I_{1},\\quad C=I_{1}I_{0}+I_{2}I_{0}+I_{2}I_{1}\n$$\nmatches option A exactly, while the other options fail to meet the priority or collision requirements.", "answer": "$$\\boxed{A}$$", "id": "1954043"}]}