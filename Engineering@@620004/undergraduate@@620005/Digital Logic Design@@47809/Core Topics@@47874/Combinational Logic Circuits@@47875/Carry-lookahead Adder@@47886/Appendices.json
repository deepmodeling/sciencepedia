{"hands_on_practices": [{"introduction": "To master the theory behind Carry-Lookahead Adders (CLAs), we must first get comfortable with their fundamental building blocks. This exercise focuses on a direct application of the 'propagate' ($P_i$) and 'generate' ($G_i$) signal definitions. By calculating these signals and the resulting final carry-out for a set of specific inputs, you will solidify your understanding of how these components work together to rapidly determine the carry bits in parallel.[@problem_id:1918213]", "problem": "A digital systems engineer is designing a custom 4-bit Arithmetic Logic Unit (ALU). A key component of this ALU is a 4-bit Carry-Lookahead Adder (CLA) that computes the sum of two 4-bit binary numbers, $A = A_3A_2A_1A_0$ and $B = B_3B_2B_1B_0$.\n\nThe speed of the CLA is achieved by pre-calculating two signals for each bit position $i$: a \"generate\" signal ($G_i$) and a \"propagate\" signal ($P_i$). These signals are defined as follows, where $\\cdot$ represents the logical AND operation and $\\oplus$ represents the logical exclusive OR (XOR) operation:\n- Generate: $G_i = A_i \\cdot B_i$\n- Propagate: $P_i = A_i \\oplus B_i$\n\nThese signals are then used to compute the carry-out for each bit position. The carry-out for bit $i$ is denoted as $C_{i+1}$. For a 4-bit adder with an initial carry-in of $C_0$, the final carry-out signal, $C_4$, is determined by the following Boolean expression:\n$$C_4 = G_3 + P_3 G_2 + P_3 P_2 G_1 + P_3 P_2 P_1 G_0 + P_3 P_2 P_1 P_0 C_0$$\nwhere $+$ represents the logical OR operation.\n\nConsider the addition of the operands $A = 1011_2$ and $B = 0110_2$. Assuming the initial carry-in to the adder is $C_0 = 0$, determine the boolean values for the most significant propagate signal ($P_3$), the most significant generate signal ($G_3$), and the final carry-out from the adder ($C_4$).", "solution": "We are given $A=1011_{2}$ and $B=0110_{2}$, so the bit assignments from most significant to least significant are:\n$$A_{3}=1,\\ A_{2}=0,\\ A_{1}=1,\\ A_{0}=1;\\quad B_{3}=0,\\ B_{2}=1,\\ B_{1}=1,\\ B_{0}=0.$$\n\nBy definition, for each bit $i$,\n$$P_{i}=A_{i}\\oplus B_{i},\\qquad G_{i}=A_{i}B_{i}.$$\n\nCompute the most significant propagate and generate:\n$$P_{3}=A_{3}\\oplus B_{3}=1\\oplus 0=1,$$\n$$G_{3}=A_{3}B_{3}=1\\cdot 0=0.$$\n\nTo compute $C_{4}$, we use\n$$C_{4}=G_{3}+P_{3}G_{2}+P_{3}P_{2}G_{1}+P_{3}P_{2}P_{1}G_{0}+P_{3}P_{2}P_{1}P_{0}C_{0},$$\nwith $C_{0}=0$. We therefore need $P_{2},G_{2},P_{1},G_{1},P_{0},G_{0}$:\n$$P_{2}=A_{2}\\oplus B_{2}=0\\oplus 1=1,\\quad G_{2}=A_{2}B_{2}=0\\cdot 1=0,$$\n$$P_{1}=A_{1}\\oplus B_{1}=1\\oplus 1=0,\\quad G_{1}=A_{1}B_{1}=1\\cdot 1=1,$$\n$$P_{0}=A_{0}\\oplus B_{0}=1\\oplus 0=1,\\quad G_{0}=A_{0}B_{0}=1\\cdot 0=0.$$\n\nSubstitute into the carry expression:\n$$C_{4}=0+1\\cdot 0+1\\cdot 1\\cdot 1+1\\cdot 1\\cdot 0\\cdot 0+1\\cdot 1\\cdot 0\\cdot 1\\cdot 0=0+0+1+0+0=1.$$\n\nThus, $P_{3}=1$, $G_{3}=0$, and $C_{4}=1$.", "answer": "$$\\boxed{\\begin{pmatrix}1 & 0 & 1\\end{pmatrix}}$$", "id": "1918213"}, {"introduction": "Moving from abstract logic to physical implementation is a crucial step in digital design. This practice explores the hardware cost associated with the carry-lookahead logic itself. By calculating the number of basic 2-input logic gates required, you will gain an appreciation for the circuit complexity involved and the trade-offs engineers face between speed and hardware resources.[@problem_id:1918181]", "problem": "In the design of a 4-bit Carry-Lookahead Adder (CLA), a central component is the carry-lookahead logic unit. This unit is responsible for rapidly calculating the carry bits ($C_1, C_2, C_3, C_4$) based on an initial carry-in ($C_0$) and the propagate ($P_i$) and generate ($G_i$) signals from each bit position ($i=0, 1, 2, 3$).\n\nFor a 4-bit CLA, the fully expanded, two-level logic equations for the carry outputs are given as:\n$$C_1 = G_0 + P_0 C_0$$\n$$C_2 = G_1 + P_1 G_0 + P_1 P_0 C_0$$\n$$C_3 = G_2 + P_2 G_1 + P_2 P_1 G_0 + P_2 P_1 P_0 C_0$$\n$$C_4 = G_3 + P_3 G_2 + P_3 P_2 G_1 + P_3 P_2 P_1 G_0 + P_3 P_2 P_1 P_0 C_0$$\n\nYour task is to determine the total number of fundamental logic gates required to implement only this carry-lookahead logic unit. You must adhere to the following constraints:\n1.  The only gates available are 2-input AND gates and 2-input OR gates.\n2.  Each carry output ($C_1, C_2, C_3, C_4$) must be implemented independently based on the equations above. No logic gates or intermediate product terms are shared between the circuits for different carry outputs. For example, the term $P_1 G_0$ computed for $C_2$ cannot be reused in the computation of $C_3$.\n3.  Your count should NOT include the logic required to generate the initial $P_i$ and $G_i$ signals. You may assume $P_0, P_1, P_2, P_3$, $G_0, G_1, G_2, G_3$, and $C_0$ are all available as inputs.\n\nCalculate the total combined number of 2-input AND gates and 2-input OR gates required.", "solution": "We must implement the given fully expanded sum-of-products expressions for $C_{1}, C_{2}, C_{3}, C_{4}$ using only 2-input AND and 2-input OR gates, without sharing any intermediate results between different carry outputs. In a two-level SOP implementation:\n- A product term that ANDs $r$ inputs uses $r-1$ two-input AND gates. A single literal (e.g., $G_{i}$) uses $0$ AND gates.\n- ORing $n$ product terms uses $n-1$ two-input OR gates.\n\nApply this to each carry equation.\n\nFor $C_{1} = G_{0} + P_{0}C_{0}$, the term lengths are $1$ and $2$.\n- AND gates: $(1-1) + (2-1) = 0 + 1 = 1$.\n- OR gates: $2 - 1 = 1$.\n- Total for $C_{1}$: $1 + 1 = 2$.\n\nFor $C_{2} = G_{1} + P_{1}G_{0} + P_{1}P_{0}C_{0}$, the term lengths are $1, 2, 3$.\n- AND gates: $(1-1) + (2-1) + (3-1) = 0 + 1 + 2 = 3$.\n- OR gates: $3 - 1 = 2$.\n- Total for $C_{2}$: $3 + 2 = 5$.\n\nFor $C_{3} = G_{2} + P_{2}G_{1} + P_{2}P_{1}G_{0} + P_{2}P_{1}P_{0}C_{0}$, the term lengths are $1, 2, 3, 4$.\n- AND gates: $(1-1) + (2-1) + (3-1) + (4-1) = 0 + 1 + 2 + 3 = 6$.\n- OR gates: $4 - 1 = 3$.\n- Total for $C_{3}$: $6 + 3 = 9$.\n\nFor $C_{4} = G_{3} + P_{3}G_{2} + P_{3}P_{2}G_{1} + P_{3}P_{2}P_{1}G_{0} + P_{3}P_{2}P_{1}P_{0}C_{0}$, the term lengths are $1, 2, 3, 4, 5$.\n- AND gates: $(1-1) + (2-1) + (3-1) + (4-1) + (5-1) = 0 + 1 + 2 + 3 + 4 = 10$.\n- OR gates: $5 - 1 = 4$.\n- Total for $C_{4}$: $10 + 4 = 14$.\n\nSumming over all four carry outputs gives the total number of 2-input gates:\n$$2 + 5 + 9 + 14 = 30.$$\n\nEquivalently, for $C_{k}$ with $k \\in \\{1,2,3,4\\}$, there are $k+1$ product terms with lengths $1,2,\\dots,k+1$. Thus AND gates per $C_{k}$ are $\\sum_{r=1}^{k+1} (r-1) = \\sum_{t=0}^{k} t = \\frac{k(k+1)}{2}$, and OR gates per $C_{k}$ are $(k+1)-1 = k$. Hence total per $C_{k}$ is $\\frac{k(k+3)}{2}$, and\n$$\\sum_{k=1}^{4} \\frac{k(k+3)}{2} = \\frac{1 \\cdot 4}{2} + \\frac{2 \\cdot 5}{2} + \\frac{3 \\cdot 6}{2} + \\frac{4 \\cdot 7}{2} = 2 + 5 + 9 + 14 = 30.$$", "answer": "$$\\boxed{30}$$", "id": "1918181"}, {"introduction": "A deep understanding of a circuit includes the ability to diagnose it when things go wrong. This final exercise challenges you to analyze a CLA with a common manufacturing defect known as a \"stuck-at-0\" fault. Your task is to determine which specific input values will expose the error, a process that sharpens diagnostic skills and reinforces the importance of each signal within the carry-lookahead logic equations.[@problem_id:1918212]", "problem": "A 4-bit Carry-Lookahead Adder (CLA) is a digital circuit that computes the sum of two 4-bit binary numbers, $A = A_3A_2A_1A_0$ and $B = B_3B_2B_1B_0$. A key component of the CLA is the carry-lookahead logic, which generates the carry-out signals for each bit position in parallel.\n\nFor each bit position $i$ (from 0 to 3), the circuit computes a generate signal $G_i$ and a propagate signal $P_i$ based on the inputs $A_i$ and $B_i$:\n- $G_i = A_i \\cdot B_i$ (logical AND)\n- $P_i = A_i \\oplus B_i$ (logical XOR)\n\nThe carry-out for the final bit, $C_4$, is calculated directly from these signals and the initial carry-in, $C_0$, using the following standard logic expression:\n$$C_4 = G_3 + P_3 G_2 + P_3 P_2 G_1 + P_3 P_2 P_1 G_0 + P_3 P_2 P_1 P_0 C_0$$\n\nConsider a scenario where the CLA has a manufacturing defect. Specifically, the wire that carries the propagate signal $P_2$ is faulty and is permanently \"stuck-at-0\". This means the logic for calculating $C_4$ behaves as if $P_2$ is always 0, regardless of the actual values of $A_2$ and $B_2$. The rest of the circuit, including the generation of all other $P_i$ and $G_i$ signals, functions correctly.\n\nGiven that the initial carry-in is set to $C_0 = 0$, identify which of the following pairs of 4-bit inputs $(A, B)$ will cause this faulty CLA to produce an incorrect value for the final carry-out, $C_4$.\n\nA. $A = 1111_2$, $B = 0001_2$\n\nB. $A = 0001_2$, $B = 0001_2$\n\nC. $A = 0100_2$, $B = 0100_2$\n\nD. $A = 1000_2$, $B = 1000_2$\n\nE. $A = 0011_2$, $B = 0011_2$", "solution": "The correct carry-out for a 4-bit CLA with initial carry-in $C_{0}=0$ is\n$$C_{4}=G_{3}+P_{3}G_{2}+P_{3}P_{2}G_{1}+P_{3}P_{2}P_{1}G_{0},$$\nsince the term $P_{3}P_{2}P_{1}P_{0}C_{0}$ vanishes when $C_{0}=0$. With the defect $P_{2}$ stuck at $0$, the implemented carry-out is\n$$C_{4}^{\\text{faulty}}=G_{3}+P_{3}G_{2},$$\nbecause all terms containing $P_{2}$ become $0$. Therefore, the faulty output differs from the correct one exactly when\n$$G_{3}=0,\\quad P_{3}G_{2}=0,\\quad \\text{and} \\quad P_{3}P_{2}G_{1}+P_{3}P_{2}P_{1}G_{0}=1.$$\n\nEvaluate each option by computing $G_{i}=A_{i}B_{i}$ and $P_{i}=A_{i}\\oplus B_{i}$:\n\nOption A: $A=1111_{2},\\ B=0001_{2}$. Bits give\n$$(P_{3},G_{3})=(1,0),\\ (P_{2},G_{2})=(1,0),\\ (P_{1},G_{1})=(1,0),\\ (P_{0},G_{0})=(0,1).$$\nThen $G_{3}=0$, $P_{3}G_{2}=1\\cdot 0=0$, and\n$$P_{3}P_{2}G_{1}+P_{3}P_{2}P_{1}G_{0}=1\\cdot 1\\cdot 0+1\\cdot 1\\cdot 1\\cdot 1=1.$$\nHence $C_{4}=1$ while $C_{4}^{\\text{faulty}}=0$, so this input causes an incorrect $C_{4}$.\n\nOption B: $A=0001_{2},\\ B=0001_{2}$. Here $(P_{3},G_{3})=(0,0)$ and $(P_{2},G_{2})=(0,0)$, so $P_{3}=0$ implies $P_{3}P_{2}G_{1}+P_{3}P_{2}P_{1}G_{0}=0$ and $C_{4}=C_{4}^{\\text{faulty}}=0$. No error.\n\nOption C: $A=0100_{2},\\ B=0100_{2}$. Here $(P_{3},G_{3})=(0,0)$, $(P_{2},G_{2})=(0,1)$, $(P_{1},G_{1})=(0,0)$, $(P_{0},G_{0})=(0,0)$. Then $C_{4}=C_{4}^{\\text{faulty}}=0$. No error.\n\nOption D: $A=1000_{2},\\ B=1000_{2}$. Here $(P_{3},G_{3})=(0,1)$, so $C_{4}=1$ and $C_{4}^{\\text{faulty}}=1$. No error.\n\nOption E: $A=0011_{2},\\ B=0011_{2}$. Here $(P_{3},G_{3})=(0,0)$, $(P_{2},G_{2})=(0,0)$, so again $C_{4}=C_{4}^{\\text{faulty}}=0$. No error.\n\nTherefore, only option A causes an incorrect final carry-out.", "answer": "$$\\boxed{A}$$", "id": "1918212"}]}