{"hands_on_practices": [{"introduction": "Before we can build a multi-bit parallel adder, we must first master its fundamental building block: the one-bit full adder. This first exercise [@problem_id:1914712] challenges you to think like a logic designer facing component constraints. You will implement the complete logic for a full adder's sum ($S$) and carry-out ($C_{out}$) using only multiplexers and a single inverter, demonstrating the power and flexibility of these common digital components.", "problem": "A student in a digital logic design lab is tasked with building a single-bit full adder circuit. However, due to a component shortage, their kit is very limited, containing only two 4-to-1 multiplexers and a single inverter. The goal is to implement the full adder using only these available components.\n\nA full adder is a combinational circuit that performs the arithmetic sum of three input bits. It has three inputs: $A$, $B$, and a carry-in bit, $C_{in}$. It produces two outputs: a sum bit, $S$, and a carry-out bit, $C_{out}$.\n\nA 4-to-1 multiplexer (MUX) has two select lines, $S_1$ and $S_0$, four data inputs, $D_0, D_1, D_2, D_3$, and one output, $Y$. The output $Y$ is connected to the data input selected by the binary value of $S_1S_0$. Specifically, if $S_1S_0=00$, $Y=D_0$; if $S_1S_0=01$, $Y=D_1$; if $S_1S_0=10$, $Y=D_2$; and if $S_1S_0=11$, $Y=D_3$.\n\nThe student must use one MUX to generate the sum output $S$ and the other MUX to generate the carry-out output $C_{out}$. The same pair of input variables must be connected to the select lines of both MUXes. The data inputs of the MUXes can be connected to the third input variable, its complement (generated by the single available inverter), logic '0' (ground), or logic '1' (Vcc).\n\nIdentify all of the following proposed configurations that correctly implement a full adder cell. For each option, the configuration is specified by the common select line connections $(S_1, S_0)$, the ordered data inputs for the Sum MUX, $D_S = [D_{S,0}, D_{S,1}, D_{S,2}, D_{S,3}]$, and the ordered data inputs for the Carry-out MUX, $D_C = [D_{C,0}, D_{C,1}, D_{C,2}, D_{C,3}]$.\n\nA. Select Lines $(S_1, S_0) = (A, B)$; $D_S = [C_{in}, \\overline{C_{in}}, \\overline{C_{in}}, C_{in}]$; $D_C = [0, C_{in}, C_{in}, 1]$\n\nB. Select Lines $(S_1, S_0) = (A, C_{in})$; $D_S = [B, \\overline{B}, \\overline{B}, B]$; $D_C = [0, B, B, 1]$\n\nC. Select Lines $(S_1, S_0) = (B, C_{in})$; $D_S = [A, \\overline{A}, \\overline{A}, A]$; $D_C = [0, A, A, 1]$\n\nD. Select Lines $(S_1, S_0) = (A, B)$; $D_S = [C_{in}, \\overline{C_{in}}, C_{in}, \\overline{C_{in}}]$; $D_C = [0, C_{in}, C_{in}, 1]$\n\nE. Select Lines $(S_1, S_0) = (A, C_{in})$; $D_S = [0, B, B, 1]$; $D_C = [B, \\overline{B}, \\overline{B}, B]$", "solution": "A full adder with inputs $A$, $B$, $C_{in}$ has\n$$S=A \\oplus B \\oplus C_{in}, \\qquad C_{out}=AB+AC_{in}+BC_{in}.$$\nA $4$-to-$1$ MUX with select lines $(X,Y)$ and data inputs $[D_{0},D_{1},D_{2},D_{3}]$ realizes\n$$Y=\\overline{X}\\,\\overline{Y}\\,D_{0}+\\overline{X}Y\\,D_{1}+X\\overline{Y}\\,D_{2}+XY\\,D_{3}.$$\nTwo useful patterns (with $Z$ as the third input) are:\n- If $[D_{0},D_{1},D_{2},D_{3}]=[Z,\\overline{Z},\\overline{Z},Z]$, then\n$$Y=\\overline{X}\\,\\overline{Y}\\,Z+\\overline{X}Y\\,\\overline{Z}+X\\overline{Y}\\,\\overline{Z}+XY\\,Z=Z\\oplus(X\\oplus Y).$$\n- If $[D_{0},D_{1},D_{2},D_{3}]=[0,Z,Z,1]$, then\n$$Y=\\overline{X}Y\\,Z+X\\overline{Y}\\,Z+XY=\\big(\\overline{X}Y+X\\overline{Y}\\big)Z+XY=(X\\oplus Y)Z+XY=XY+XZ+YZ,$$\nwhich is the majority of $(X,Y,Z)$.\n\nNow test each option.\n\nA. $(S_{1},S_{0})=(A,B)$. Sum MUX has $[C_{in},\\overline{C_{in}},\\overline{C_{in}},C_{in}]$, hence\n$$S=C_{in}\\oplus(A\\oplus B)=A\\oplus B\\oplus C_{in}.$$\nCarry MUX has $[0,C_{in},C_{in},1]$, hence\n$$C_{out}=AB+AC_{in}+BC_{in}.$$\nThis matches the full adder. Only one inverter is used for $C_{in}$.\n\nB. $(S_{1},S_{0})=(A,C_{in})$. Sum MUX has $[B,\\overline{B},\\overline{B},B]$, hence\n$$S=B\\oplus(A\\oplus C_{in})=A\\oplus B\\oplus C_{in}.$$\nCarry MUX has $[0,B,B,1]$, hence\n$$C_{out}=AC_{in}+AB+BC_{in}.$$\nThis matches the full adder. Only one inverter is used for $B$.\n\nC. $(S_{1},S_{0})=(B,C_{in})$. Sum MUX has $[A,\\overline{A},\\overline{A},A]$, hence\n$$S=A\\oplus(B\\oplus C_{in})=A\\oplus B\\oplus C_{in}.$$\nCarry MUX has $[0,A,A,1]$, hence\n$$C_{out}=BC_{in}+AB+AC_{in}.$$\nThis matches the full adder. Only one inverter is used for $A$.\n\nD. $(S_{1},S_{0})=(A,B)$. Sum MUX has $[C_{in},\\overline{C_{in}},C_{in},\\overline{C_{in}}]$, so\n$$S=\\overline{A}\\,\\overline{B}\\,C_{in}+\\overline{A}B\\,\\overline{C_{in}}+A\\overline{B}\\,C_{in}+AB\\,\\overline{C_{in}}=C_{in}\\,\\overline{B}+\\overline{C_{in}}\\,B=B\\oplus C_{in},$$\nwhich is not $A\\oplus B\\oplus C_{in}$. Hence incorrect (even though the carry MUX $[0,C_{in},C_{in},1]$ would be correct).\n\nE. $(S_{1},S_{0})=(A,C_{in})$. Sum MUX has $[0,B,B,1]$, which yields $C_{out}$, not $S$. Carry MUX has $[B,\\overline{B},\\overline{B},B]$, which yields $S$, not $C_{out}$. The outputs are swapped, so the specified assignment is incorrect.\n\nTherefore, the correct configurations are A, B, and C.", "answer": "$$\\boxed{ABC}$$", "id": "1914712"}, {"introduction": "With the full adder cell understood, we can now connect them in a series to create a multi-bit ripple-carry adder. This practice [@problem_id:1914727] requires you to perform a pen-and-paper simulation of a 4-bit adder, tracing the binary values as they are processed. By following the path of the carry bit as it \"ripples\" from the least significant stage to the most significant, you will gain a concrete understanding of the adder's sequential operation and the origin of its name.", "problem": "A 4-bit ripple-carry adder is constructed by cascading four individual full-adder circuits. Each full-adder (indexed by $i$, from 0 to 3) computes a sum bit $S_i$ and a carry-out bit $C_{i+1}$ based on two input bits $A_i$, $B_i$ and a carry-in bit $C_i$. The carry-out from stage $i$, $C_{i+1}$, serves as the carry-in for the next stage, $i+1$.\n\nConsider two 4-bit unsigned binary numbers provided as inputs to this adder: $A = A_3A_2A_1A_0$ and $B = B_3B_2B_1B_0$. The initial carry-in to the least significant stage (stage 0), denoted as $C_0$, is set to 0.\n\nIf both inputs are set to their maximum possible 4-bit unsigned value, such that $A = 1111_2$ and $B = 1111_2$, determine the final 5-bit binary result. This result is formed by concatenating the final carry-out from the most significant stage, $C_4$, with the 4-bit sum word $S = S_3S_2S_1S_0$.\n\nYour answer should be a single 5-bit binary number of the form $C_4S_3S_2S_1S_0$.", "solution": "A full-adder at stage $i$ computes\n$$S_{i} = A_{i} \\oplus B_{i} \\oplus C_{i}, \\quad C_{i+1} = A_{i}B_{i} + (A_{i} \\oplus B_{i})C_{i},$$\nwhere $+$ is the Boolean OR, juxtaposition denotes Boolean AND, and $\\oplus$ is XOR.\n\nGiven $A = 1111_{2}$ and $B = 1111_{2}$, for each stage $i \\in \\{0,1,2,3\\}$ we have $A_{i} = 1$ and $B_{i} = 1$. Thus\n$$A_{i} \\oplus B_{i} = 1 \\oplus 1 = 0,\\quad A_{i}B_{i} = 1 \\cdot 1 = 1.$$\nSubstituting into the full-adder equations gives\n$$S_{i} = 0 \\oplus C_{i} = C_{i},$$\n$$C_{i+1} = 1 + 0 \\cdot C_{i} = 1.$$\nStarting with the given initial carry $C_{0} = 0$, we obtain stage by stage:\n- Stage $0$: $S_{0} = C_{0} = 0$, $C_{1} = 1$.\n- Stage $1$: $S_{1} = C_{1} = 1$, $C_{2} = 1$.\n- Stage $2$: $S_{2} = C_{2} = 1$, $C_{3} = 1$.\n- Stage $3$: $S_{3} = C_{3} = 1$, $C_{4} = 1$.\n\nTherefore, the sum word is $S_{3}S_{2}S_{1}S_{0} = 1110$, the final carry-out is $C_{4} = 1$, and the required 5-bit result $C_{4}S_{3}S_{2}S_{1}S_{0}$ is $11110$.", "answer": "$$\\boxed{11110}$$", "id": "1914727"}, {"introduction": "The simplicity of the ripple-carry adder comes at a cost: speed. The carry signal must propagate through each stage in sequence, creating a delay that grows with the number of bits. This final practice [@problem_id:1914736] moves from functional logic to performance analysis, asking you to calculate the worst-case propagation delay in a modular adder design. Understanding how to identify and quantify this critical path delay is essential for evaluating circuit performance and appreciating the motivation behind more advanced, high-speed adder architectures.", "problem": "In the design of a digital signal processor, a 16-bit ripple-carry adder is constructed by cascading four identical 4-bit adder modules. Each 4-bit module is characterized by two specific propagation delays:\n\n1.  The carry propagation delay, $t_{pg}$: This is the time required for the module's 1-bit carry-out signal to become stable, measured from the moment that all of its data inputs (two 4-bit numbers) and its 1-bit carry-in signal are stable.\n2.  The sum generation delay, $t_{sum}$: This is the time required for the module's 4-bit sum output to become stable, measured from the moment its 1-bit carry-in signal becomes stable. Assume this delay is independent of which of the four sum bits is being considered.\n\nFor the 16-bit adder, assume that all 32 data input bits (for the two 16-bit operands) and the initial 1-bit carry-in to the least significant 4-bit module are all available and stable at time $t=0$.\n\nDetermine the worst-case time at which all 16 sum output bits of the entire 16-bit adder are guaranteed to be stable. Express your answer as a symbolic expression in terms of $t_{pg}$ and $t_{sum}$.", "solution": "Let the four cascaded 4-bit modules be indexed as modules $0,1,2,3$ from least significant to most significant. At $t=0$, all data inputs to every module and the initial carry-in to module $0$ are stable.\n\nBy the definition of the carry propagation delay $t_{pg}$, if the carry-in to module $i$ becomes stable at time $t_{ci}$ and its data inputs are already stable, then its carry-out (which is the carry-in to module $i+1$) becomes stable at time $t_{ci} + t_{pg}$. With $t_{c0}=0$ given, we obtain iteratively:\n$$\nt_{c1} = t_{c0} + t_{pg} = t_{pg},\\quad\nt_{c2} = t_{c1} + t_{pg} = 2t_{pg},\\quad\nt_{c3} = t_{c2} + t_{pg} = 3t_{pg}.\n$$\n\nBy the definition of the sum generation delay $t_{sum}$, the 4-bit sum of module $i$ becomes stable at time $t_{ci} + t_{sum}$. Therefore, the stabilization times for the sum outputs of the four modules are:\n$$\nt_{S0} = t_{c0} + t_{sum} = t_{sum},\\quad\nt_{S1} = t_{c1} + t_{sum} = t_{pg} + t_{sum},\\quad\nt_{S2} = t_{c2} + t_{sum} = 2t_{pg} + t_{sum},\\quad\nt_{S3} = t_{c3} + t_{sum} = 3t_{pg} + t_{sum}.\n$$\n\nThe worst-case time at which all 16 sum bits are guaranteed stable is the maximum of these four times, which is\n$$\n3t_{pg} + t_{sum}.\n$$", "answer": "$$\\boxed{3t_{pg}+t_{sum}}$$", "id": "1914736"}]}