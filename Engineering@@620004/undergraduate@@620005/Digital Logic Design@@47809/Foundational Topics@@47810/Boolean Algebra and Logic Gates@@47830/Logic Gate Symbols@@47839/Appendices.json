{"hands_on_practices": [{"introduction": "Mastering digital logic begins with understanding its visual language. This first practice focuses on the foundational skill of identifying the correct logic gate symbol that corresponds to a given Boolean expression. By translating the function $F = \\overline{A \\cdot B \\cdot C}$ into its \"distinctive-shape\" graphical representation, you will reinforce your knowledge of basic gate identities and the symbols used in circuit diagrams worldwide [@problem_id:1944596].", "problem": "A digital safety system is designed to monitor a piece of industrial machinery. An alarm signal, represented by the Boolean variable $F$, is designed to be HIGH (logic 1), indicating a safe state. The alarm goes LOW (logic 0) if and only if all three independent safety sensors, represented by Boolean variables $A$, $B$, and $C$, simultaneously detect a fault condition (i.e., when $A=1$, $B=1$, and $C=1$). This behavior is described by the Boolean expression $F = \\overline{A \\cdot B \\cdot C}$.\n\nYour task is to identify the single logic gate that directly implements this function using the traditional \"distinctive-shape\" symbols, also known as American National Standards Institute (ANSI) symbols, as opposed to the rectangular symbols defined by the International Electrotechnical Commission (IEC). Which of the following descriptions accurately represents this gate?\n\nA. An AND gate with a straight back and a curved front, followed by a small circle at the output.\n\nB. An OR gate with a curved back and a pointed front, followed by a small circle at the output.\n\nC. A buffer with a triangular shape, followed by a small circle at the output.\n\nD. An XOR gate consisting of an OR gate shape with an additional curved line on the input side.\n\nE. An AND gate with a straight back and a curved front, with no modification at the output.", "solution": "We are given the Boolean function $F=\\overline{A \\cdot B \\cdot C}$. By Boolean logic definitions, $A \\cdot B \\cdot C$ is a three-input AND operation. Placing a logical negation on the output of an AND defines the NAND function. Therefore, the single gate that directly implements $F$ is a three-input NAND gate.\n\nIn ANSI (distinctive-shape) symbols, an AND gate is depicted as having a straight (flat) input side and a curved output side. A small circle (bubble) placed at the output of this shape denotes logical inversion at the output. Thus, an AND gate followed by a bubble at the output is precisely a NAND gate.\n\nNow match each option to its function:\n- Option A: AND shape (straight back, curved front) with an output bubble represents NAND, which computes $F=\\overline{A \\cdot B \\cdot C}$; this matches the given function.\n- Option B: OR shape with an output bubble represents NOR, which computes $F=\\overline{A + B + C}$; this does not match $\\overline{A \\cdot B \\cdot C}$.\n- Option C: A triangular buffer with an output bubble is an inverter (NOT gate), computing $F=\\overline{X}$ for a single input; it does not directly implement a three-input NAND.\n- Option D: The XOR shape (OR with an extra curved input line) represents XOR; with an output bubble it would be XNOR. Neither equals $\\overline{A \\cdot B \\cdot C}$.\n- Option E: An AND gate without an output bubble computes $A \\cdot B \\cdot C$, not its complement.\n\nTherefore, the correct ANSI gate description for $F=\\overline{A \\cdot B \\cdot C}$ is Option A.", "answer": "$$\\boxed{A}$$", "id": "1944596"}, {"introduction": "Logic gates are the building blocks of larger circuits, and understanding how they interact is a critical skill. This exercise challenges you to analyze a small network of gates and simplify it into a single, functionally equivalent gate. By applying principles like De Morgan's laws, you will see how different circuit arrangements can produce identical results, a core concept in logic optimization and efficient design [@problem_id:1944544].", "problem": "In a digital logic circuit, two independent binary signals, represented by the variables $A$ and $B$, are processed through a series of gates. First, signal $A$ is passed through a NOT gate (inverter), and simultaneously, signal $B$ is passed through a separate NOT gate. The outputs of these two NOT gates are then used as the two inputs for a standard NOR gate. The entire arrangement of these three gates can be replaced by a single, standard two-input logic gate without changing the overall logic function.\n\nWhich of the following standard logic gates is functionally equivalent to this circuit configuration?\n\nA. AND\n\nB. OR\n\nC. NAND\n\nD. NOR\n\nE. XOR\n\nF. XNOR", "solution": "Let the original inputs be $A$ and $B$. After the NOT gates, the signals become $\\lnot A$ and $\\lnot B$. A two-input NOR gate with inputs $X$ and $Y$ outputs $\\lnot(X \\lor Y)$. Therefore, with $X=\\lnot A$ and $Y=\\lnot B$, the overall output is\n$$\nY=\\lnot\\big((\\lnot A)\\lor(\\lnot B)\\big).\n$$\nApply De Morganâ€™s law, $\\lnot(P\\lor Q)\\equiv(\\lnot P)\\land(\\lnot Q)$, with $P=\\lnot A$ and $Q=\\lnot B$:\n$$\nY=(\\lnot\\lnot A)\\land(\\lnot\\lnot B)=A\\land B.\n$$\nThus, the equivalent single standard gate is an AND gate, corresponding to option A.", "answer": "$$\\boxed{A}$$", "id": "1944544"}, {"introduction": "Moving from pure theory to practical application, circuit designers must often adapt standard components for specific needs. This practice addresses the essential real-world task of correctly terminating unused inputs on a multi-input logic gate. Failing to do this properly can lead to unpredictable behavior or even damage the circuit, making this a crucial piece of knowledge for any aspiring engineer or technician working with digital hardware [@problem_id:1944570].", "problem": "In digital circuit design, it is common to have integrated circuits (ICs) with more inputs than required for a specific application. To ensure predictable and reliable operation, these unused inputs must be terminated correctly. Consider a scenario where a designer has access to 4-input NAND gates and 4-input NOR gates but needs to implement a 3-input NAND function and a 3-input NOR function using them.\n\nLet the three active inputs be $A$, $B$, and $C$. To convert a 4-input gate into a 3-input gate, the single unused input must be connected in a way that does not alter the intended 3-input logic function. For the purposes of this problem, \"Logic High\" refers to connecting the input to the positive supply voltage ($V_{CC}$), representing a binary '1'. \"Logic Low\" refers to connecting the input to ground (GND), representing a binary '0'.\n\nBelow is a list of proposed procedures for handling the unused input on a 4-input gate to realize a 3-input function of the same type (e.g., 4-input NAND becomes 3-input NAND).\n\nA. For the 4-input NAND gate, connect the unused input to Logic High.\n\nB. For the 4-input NAND gate, connect the unused input to Logic Low.\n\nC. For the 4-input NOR gate, connect the unused input to Logic High.\n\nD. For the 4-input NOR gate, connect the unused input to Logic Low.\n\nE. For either the NAND or NOR gate, connect the unused input to one of the active inputs (e.g., tie it to input $A$).\n\nF. For either the NAND or NOR gate, leave the unused input disconnected (floating).\n\nIdentify all the procedures from the list that correctly and reliably implement the desired 3-input logic function. Your answer should be a string containing the uppercase letters of all valid options in alphabetical order.", "solution": "To determine which procedures are valid, we must analyze the Boolean expressions for each case and see if the 4-input gate behaves as a 3-input gate of the same type. Let the three active inputs be $A$, $B$, and $C$, and the unused input be $D$.\n\nFirst, let's analyze the 4-input NAND gate. The Boolean expression for a 4-input NAND gate is $Y = \\overline{A \\cdot B \\cdot C \\cdot D}$. The desired function is a 3-input NAND, which has the expression $Y = \\overline{A \\cdot B \\cdot C}$. For the 4-input gate to behave as a 3-input gate, we need the effect of input $D$ to be neutral. This means we must find a value for $D$ such that $\\overline{A \\cdot B \\cdot C \\cdot D}$ simplifies to $\\overline{A \\cdot B \\cdot C}$. This requires the expression inside the inversion, $A \\cdot B \\cdot C \\cdot D$, to be equivalent to $A \\cdot B \\cdot C$. The identity element for the AND ($\\cdot$) operation is 1. If we set $D=1$ (Logic High), the expression becomes $Y = \\overline{A \\cdot B \\cdot C \\cdot 1} = \\overline{A \\cdot B \\cdot C}$. This is the correct 3-input NAND function. Therefore, procedure **A** is valid. If we set $D=0$ (Logic Low), the expression becomes $Y = \\overline{A \\cdot B \\cdot C \\cdot 0} = \\overline{0} = 1$. The output is permanently fixed at Logic High, which is not the desired 3-input NAND function. Therefore, procedure **B** is invalid.\n\nNext, let's analyze the 4-input NOR gate. The Boolean expression for a 4-input NOR gate is $Y = \\overline{A + B + C + D}$. The desired function is a 3-input NOR, which has the expression $Y = \\overline{A + B + C}$. For the 4-input gate to behave as a 3-input gate, we need the expression inside the inversion, $A + B + C + D$, to be equivalent to $A + B + C$. The identity element for the OR ($+$) operation is 0. If we set $D=0$ (Logic Low), the expression becomes $Y = \\overline{A + B + C + 0} = \\overline{A + B + C}$. This is the correct 3-input NOR function. Therefore, procedure **D** is valid. If we set $D=1$ (Logic High), the expression becomes $Y = \\overline{A + B + C + 1} = \\overline{1} = 0$. The output is permanently fixed at Logic Low, which is not the desired 3-input NOR function. Therefore, procedure **C** is invalid.\n\nNow, let's analyze the procedure of connecting the unused input to one of the active inputs. Let's tie input $D$ to input $A$, so $D = A$.\nFor the NAND gate, the expression becomes $Y = \\overline{A \\cdot B \\cdot C \\cdot A}$. According to the idempotent law of Boolean algebra ($X \\cdot X = X$), we have $A \\cdot A = A$. So, the expression simplifies to $Y = \\overline{A \\cdot B \\cdot C}$. This correctly implements a 3-input NAND function.\nFor the NOR gate, the expression becomes $Y = \\overline{A + B + C + A}$. According to the idempotent law ($X + X = X$), we have $A + A = A$. So, the expression simplifies to $Y = \\overline{A + B + C}$. This correctly implements a 3-input NOR function.\nSince this method works for both types of gates, procedure **E** is valid.\n\nFinally, let's analyze the case of leaving the input floating. In practical digital electronics, especially with Complementary Metal-Oxide-Semiconductor (CMOS) and Transistor-Transistor Logic (TTL) families, a floating input does not have a defined logic level. It can be susceptible to noise and may cause the gate to oscillate or draw excessive current, leading to unpredictable behavior and potential damage to the IC. It is a fundamentally unreliable design practice. Therefore, procedure **F** is invalid.\n\nIn summary, the valid procedures are A (NAND input to Logic High), D (NOR input to Logic Low), and E (tying the unused input to an active input for either gate).", "answer": "$$\\boxed{ADE}$$", "id": "1944570"}]}