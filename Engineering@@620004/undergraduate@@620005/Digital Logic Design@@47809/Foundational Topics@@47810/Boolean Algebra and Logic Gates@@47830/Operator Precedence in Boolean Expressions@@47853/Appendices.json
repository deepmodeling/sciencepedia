{"hands_on_practices": [{"introduction": "Mastering Boolean algebra involves not just knowing the rules, but also recognizing common mistakes. This exercise challenges you to diagnose a flawed simplification process where operator precedence was ignored, leading to a dangerously incorrect conclusion. By identifying the exact point of error in a step-by-step analysis, you will solidify your understanding of how the AND ($\\cdot$) and OR ($+$) operations interact and why precedence is non-negotiable for correct logic design [@problem_id:1949923].", "problem": "A junior digital systems designer is tasked with creating the logic for a safety-critical pump controller. The pump, represented by the output $P$, should turn on ($P=1$) under the following condition: the system's primary sensor indicates low water level ($L=0$), OR the primary sensor indicates a normal water level ($L=1$) AND a manual override command ($M=1$) is issued by an operator. The designer uses $L'$ to represent the case where the water level is low.\n\nThe designer documents the following four-step simplification process for the control logic:\n1.  **Initial Expression Formulation**: Based on the verbal description, the logic is captured as $P = L' + L \\cdot M$.\n2.  **Term Grouping**: The designer regroups the terms to prioritize the operation on the $L$ and $L'$ variables, rewriting the expression as $P = (L' + L) \\cdot M$.\n3.  **Complement Law Application**: The designer simplifies the grouped term $(L' + L)$ to $1$, leading to the expression $P = 1 \\cdot M$.\n4.  **Identity Law Application**: The designer performs the final simplification, concluding that $P = M$.\n\nThe final simplified logic, $P = M$, implies that the pump's operation is solely dependent on the manual override command, which contradicts the initial requirement that the pump should also turn on when the water level is low. Which step in the designer's simplification process contains the fundamental logical error that leads to this incorrect conclusion?\n\nA. Step 1: The initial expression $P = L' + L \\cdot M$ does not correctly model the verbal description of the system's requirements.\n\nB. Step 2: The regrouping of $L' + L \\cdot M$ into $(L' + L) \\cdot M$ is based on an incorrect application of algebraic laws.\n\nC. Step 3: The simplification of the term $(L' + L)$ to $1$ is an invalid operation in Boolean algebra.\n\nD. Step 4: The simplification of the term $1 \\cdot M$ to $M$ is an invalid operation in Boolean algebra.", "solution": "Translate the requirement into Boolean algebra. The pump output is on when the level is low or when the level is normal and there is a manual override. Using $L'$ to denote low level (the complement of $L$), the natural expression is\n$$\nP=L'+L\\cdot M.\n$$\nThis matches the specification: if $L=0$ then $L'=1$ so the first term forces $P=1$; if $L=1$ then $L'=0$ and the expression reduces to $P=M$, so the pump turns on only when $M=1$.\n\nEvaluate each simplification step:\n- Step 1 is correct, as just shown.\n- Step 2 rewrites $L' + L\\cdot M$ as $(L' + L)\\cdot M$. This is not a valid Boolean algebra transformation. The correct distributive identity is\n$$\nX + YZ = (X+Y)(X+Z),\n$$\nnot $(X+Y)Z$. Applying the correct identity with $X=L'$, $Y=L$, $Z=M$ gives\n$$\nL' + L\\cdot M = (L'+L)(L'+M) = 1\\cdot(L'+M) = L'+M,\n$$\nwhich is not equal to $(L'+L)\\cdot M = 1\\cdot M = M$ in general. Therefore Step 2 is the fundamental logical error: it misapplies the distributive law.\n- Step 3 uses the complement law $L'+L=1$, which is valid.\n- Step 4 uses the identity law $1\\cdot M=M$, which is also valid.\n\nThus, the incorrect conclusion arises from the invalid regrouping in Step 2. The correct simplification of the original expression is $P=L'+M$, consistent with the requirements, but the path taken in Step 2 is invalid.", "answer": "$$\\boxed{B}$$", "id": "1949923"}, {"introduction": "A Boolean expression on paper is only useful if it can be correctly built as a circuit. This practice bridges the gap between abstract algebra and physical implementation, showing how the wiring of gates dictates the order of operations. You will analyze a circuit that fails to respect standard operator precedence, learning to spot how a simple wiring mistake can create a function that is completely different from the intended design [@problem_id:1949937].", "problem": "A junior engineer is tasked with building a digital logic circuit that implements the Boolean function $F_{target} = X + Y \\cdot Z$. In Boolean algebra, the AND operation ($\\cdot$) has higher precedence than the OR operation (+), meaning it should be evaluated first.\n\nThe engineer constructs the circuit using one 2-input OR gate and one 2-input AND gate. The circuit is wired as follows:\n- The primary inputs $X$ and $Y$ are connected to the two inputs of the OR gate.\n- The output of this OR gate is connected to one of the inputs of the AND gate.\n- The primary input $Z$ is connected to the other input of the AND gate.\n- The final output of the entire circuit is the output of the AND gate.\n\nDetermine the actual Boolean function, $F_{actual}$, that is implemented by the engineer's circuit.\n\nA) $X + Y \\cdot Z$\n\nB) $X \\cdot Y + Z$\n\nC) $(X + Z) \\cdot Y$\n\nD) $X \\cdot (Y + Z)$\n\nE) $(X + Y) \\cdot Z$", "solution": "We interpret the gates using Boolean algebra conventions: a 2-input OR gate outputs the Boolean sum of its inputs, and a 2-input AND gate outputs the Boolean product of its inputs. The AND operation has higher precedence than OR, but the wiring determines the grouping explicitly.\n\nLet the OR gate output be denoted by $O$. With inputs $X$ and $Y$ connected to the OR gate, the OR gate output is:\n$$\nO = X + Y.\n$$\nThis output $O$ is then connected to one input of the AND gate, with the other input being $Z$. Therefore, the final output of the circuit is:\n$$\nF_{\\text{actual}} = O \\cdot Z = (X + Y) \\cdot Z.\n$$\nUsing the distributive law for Boolean algebra, one may also write:\n$$\n(X + Y) \\cdot Z = X \\cdot Z + Y \\cdot Z,\n$$\nwhich is not generally equivalent to $X + Y \\cdot Z$. Hence the realized function corresponds to option E.", "answer": "$$\\boxed{E}$$", "id": "1949937"}, {"introduction": "In professional digital design, it's not enough to know an error exists; you must be able to prove it. This advanced problem introduces the crucial engineering task of verification by asking you to find all possible input conditions that reveal a bug caused by incorrect operator precedence. By generating a complete set of distinguishing test vectors, you'll practice a systematic method for guaranteeing that a circuit's behavior, like the difference between $A + B \\cdot C$ and $(A + B) \\cdot C$, matches its specification under all circumstances [@problem_id:1949905].", "problem": "In hardware design verification, a crucial task is to ensure that a synthesized circuit matches its specification. Consider a scenario where a logic function was specified as $F_{spec} = A + B \\cdot C$. However, due to a bug in the synthesis tool's handling of operator precedence, the fabricated circuit incorrectly implements the function $F_{impl} = (A + B) \\cdot C$.\n\nYour task is to identify the complete and minimal set of input test vectors that can detect this implementation error. An input vector $(A, B, C)$ is considered a distinguishing test vector if the output of the specified function, $F_{spec}$, is different from the output of the implemented function, $F_{impl}$, for that input.\n\nDetermine the set of all such distinguishing input vectors. Represent each vector by its corresponding minterm decimal value, assuming an input order of $(A, B, C)$ where $A$ is the Most Significant Bit (MSB). Provide these decimal values in increasing order.", "solution": "Let the specified and implemented Boolean functions be $F_{\\text{spec}}=A+B\\cdot C$ and $F_{\\text{impl}}=(A+B)\\cdot C$, with $A,B,C\\in\\{0,1\\}$. We seek all input vectors $(A,B,C)$ such that $F_{\\text{spec}}\\neq F_{\\text{impl}}$.\n\nUse standard Boolean identities: $X\\cdot 0=0$, $X\\cdot 1=X$, $X+0=X$, and $X+1=1$.\n\nConsider two exhaustive cases based on the value of $C$.\n\nFor $C=0$, compute each function:\n$$F_{\\text{spec}}=A+B\\cdot 0=A,$$\n$$F_{\\text{impl}}=(A+B)\\cdot 0=0.$$\nThus, when $C=0$, the outputs differ exactly when $A=1$, independent of $B$. The corresponding input vectors are $(1,0,0)$ and $(1,1,0)$.\n\nFor $C=1$, compute each function:\n$$F_{\\text{spec}}=A+B\\cdot 1=A+B,$$\n$$F_{\\text{impl}}=(A+B)\\cdot 1=A+B.$$\nThus, when $C=1$, the outputs are equal for all $(A,B)$, and there are no distinguishing vectors.\n\nTherefore, the complete set of distinguishing vectors consists of $(1,0,0)$ and $(1,1,0)$. Using the minterm index with input order $(A,B, C)$ and $A$ as the most significant bit, the decimal minterm for $(A,B,C)$ is $m=4A+2B+C$. Hence:\n$$(1,0,0)\\mapsto 4\\cdot 1+2\\cdot 0+0=4,\\quad (1,1,0)\\mapsto 4\\cdot 1+2\\cdot 1+0=6.$$\nThese are all and only the distinguishing input vectors, listed in increasing order.", "answer": "$$\\boxed{\\begin{pmatrix} 4 & 6 \\end{pmatrix}}$$", "id": "1949905"}]}