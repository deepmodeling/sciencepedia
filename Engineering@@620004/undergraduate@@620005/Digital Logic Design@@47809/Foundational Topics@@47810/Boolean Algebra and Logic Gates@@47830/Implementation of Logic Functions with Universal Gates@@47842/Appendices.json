{"hands_on_practices": [{"introduction": "This first practice tackles a fundamental skill in digital design: translating a standard logic expression into a circuit built from a single type of gate. Starting with a sum-of-products (SOP) function derived from a practical safety-monitoring scenario, you will convert it into an equivalent circuit using only 2-input NAND gates [@problem_id:1942452]. This exercise demonstrates the power of De Morgan's laws and serves as a crucial first step in mastering the use of universal gates.", "problem": "A safety monitoring system for a chemical reactor uses three binary sensors, labeled A, B, and C. A value of 1 indicates the sensor is 'ON' (detecting a condition), and a value of 0 indicates it is 'OFF'. An alarm, represented by the output F, is triggered (F=1) under specific conditions. The system logic dictates that the alarm must be activated if sensor C is ON. Alternatively, the alarm is also activated if sensor A is OFF while sensor B is ON. Otherwise, the alarm remains OFF (F=0).\n\nYour task is to design a logic circuit that implements this safety protocol. The design must exclusively use 2-input NAND gates. What is the minimum number of 2-input NAND gates required to realize this function F(A, B, C)?", "solution": "The alarm logic reads: trigger if $C=1$, or if $A=0$ and $B=1$. In Boolean form this is\n$$\nF(A,B,C)=C+BA'.\n$$\nUse De Morgan’s laws to obtain a NAND-friendly factorization. First complement:\n$$\nF'=(C+BA')'=C'(BA')'.\n$$\nApply De Morgan again to the second factor:\n$$\n(BA')'=B'+A,\n$$\nhence\n$$\nF' = C'(B'+A)\\quad\\Rightarrow\\quad F=\\big[C'(B'+A)\\big]'.\n$$\nA 2-input NAND gate computes $[XY]'$ from inputs $X$ and $Y$. Therefore, $F$ is the NAND of $X=C'$ and $Y=B'+A$. Now realize $Y$ using NANDs as well. Using De Morgan on the sum,\n$$\nB'+A=(BA')',\n$$\nso $Y$ is the output of a NAND fed by $B$ and $A'$.\n\nThus a NAND-only implementation is:\n- Invert $A$ to get $A'$ using a NAND inverter: $\\operatorname{NAND}(A,A)=A'$.\n- Form $Y=(BA')'$ with a NAND: $\\operatorname{NAND}(B,A')$.\n- Invert $C$ to get $C'$ using a NAND inverter: $\\operatorname{NAND}(C,C)=C'$.\n- Produce $F$ as the NAND of $C'$ and $Y$: $F=\\operatorname{NAND}(C', (BA')')=\\big[C'(B'+A)\\big]'=C+BA'$.\n\nGate count: two inverters (for $A'$ and $C'$) plus two NANDs for combining, totaling $4$ two-input NAND gates.\n\nTo see minimality, note that $F$ is negative-unate in $A$ and positive-unate in $B$ and $C$. In a NAND-only network each gate contributes one inversion along a signal’s path. Achieving negative unateness for $A$ requires an odd inversion count on $A$’s path, which necessitates at least one explicit inversion of $A$ before the two-level NAND structure. Simultaneously, preserving positive unateness for $C$ requires an even inversion count on $C$’s path; feeding $C$ only into the final NAND would yield a single inversion (odd), so $C$ must be inverted once before the final NAND (or pass through an additional NAND level), which adds another gate. Together with the final combination and the $BA'$ term formation, this forces at least $4$ two-input NAND gates. Hence $4$ is both sufficient and necessary.", "answer": "$$\\boxed{4}$$", "id": "1942452"}, {"introduction": "Building on the principles of universality, this exercise explores the complementary technique of NOR gate implementation. You will be given a logic function in a product-of-sums (POS) form and tasked with creating a minimal circuit using only 2-input NOR gates [@problem_id:1942455]. This practice solidifies your understanding of Boolean manipulation and highlights the elegant symmetry between NAND/SOP and NOR/POS design methodologies.", "problem": "A safety monitoring system for a chemical reactor is being designed using only 2-input NOR gates. The system must trigger a final alarm, represented by the logic function $F$, under a specific set of conditions. The alarm $F$ should be active (logic $1$) if and only if a coolant flow error is detected (logic $1$) and, simultaneously, either the reactor temperature is too high (logic $1$) or the internal pressure is too high (logic $1$).\n\nLet the logic variables be defined as follows:\n- $A = 1$ if the temperature is too high, $A = 0$ otherwise.\n- $B = 1$ if the pressure is too high, $B = 0$ otherwise.\n- $C = 1$ if a coolant flow error is detected, $C = 0$ otherwise.\n\nThe inputs $A$, $B$, and $C$ are available, but their complements ($A'$, $B'$, $C'$) are not. You must design a circuit to implement the alarm function $F$ using the minimum possible number of 2-input NOR gates.\n\nWhat is the minimum number of 2-input NOR gates required to implement the function $F$?", "solution": "We want to implement the alarm function using only 2-input NOR gates. The required logic is\n$$F = C(A + B).$$\nUsing De Morgan’s law in the form $X Y = (X' + Y')'$, with $X = C$ and $Y = A + B$, we rewrite\n$$F = \\big(C' + (A + B)'\\big)'.$$\nA 2-input NOR gate realizes $X \\downarrow Y = (X + Y)'$. From this we obtain the necessary subexpressions:\n- Complement (inversion) with one 2-input NOR by tying inputs together: $X' = X \\downarrow X$.\n- The term $(A + B)'$ directly with one NOR: $(A + B)' = A \\downarrow B$.\n- The term $C'$ directly with one NOR: $C' = C \\downarrow C$.\nFinally, the outer complement of the sum is another NOR of these two results:\n$$F = \\big((A + B)' + C'\\big)' = (A \\downarrow B) \\downarrow (C \\downarrow C).$$\nThis construction uses exactly three 2-input NOR gates: one for $(A + B)'$, one for $C'$, and one final NOR to produce $F$.\n\nTo prove minimality, observe that any two-gate realization using only 2-input NORs that depends on all three inputs must have the first gate form $(X + Y)'$ from two inputs and the second gate NOR this with the third input $Z$, yielding\n$$\\big((X + Y)' + Z\\big)' = (X + Y)Z'.$$\nThis is of the form “sum of two inputs AND the complement of the third input,” which cannot equal $C(A + B)$ for any assignment of $X$, $Y$, $Z$ to $A$, $B$, $C$ when complements of inputs are not directly available at the inputs. Therefore, two gates are insufficient, and three gates are necessary and sufficient.\n\nHence, the minimum number of 2-input NOR gates required is three.", "answer": "$$\\boxed{3}$$", "id": "1942455"}, {"introduction": "This final practice moves beyond direct conversion to the important engineering challenge of optimization. Your task is to design a single, efficient circuit that simultaneously produces two related outputs, the Exclusive OR ($A \\oplus B$) and Exclusive NOR ($A \\odot B$), using the minimum number of NAND gates [@problem_id:1942398]. This problem encourages you to think critically about sharing intermediate logic signals, a key strategy for reducing hardware complexity and cost in real-world digital systems.", "problem": "A digital circuit is to be designed to simultaneously compute two functions of two inputs, $A$ and $B$. The first function is the Exclusive OR (XOR) operation, defined as $F_1 = A \\oplus B = A'B + AB'$, where the prime denotes the logical NOT operation. The second function is the Exclusive NOR (XNOR) operation, defined as $F_2 = A \\odot B = A'B' + AB$. Your task is to create a single logic system that produces both outputs, $F_1$ and $F_2$, using exclusively 2-input NAND gates. By maximizing the reuse of intermediate logic signals, determine the absolute minimum number of 2-input NAND gates required to implement this entire system.", "solution": "We are restricted to 2-input NAND gates only. Denote a 2-input NAND as $\\operatorname{NAND}(X,Y)=(XY)'$, with complement denoted by a prime.\n\nConstruct shared intermediates:\n1) $P=\\operatorname{NAND}(A,B)=(AB)'$.\nUsing De Morgan, $(AB)'=A'+B'$.\n\n2) $Y=\\operatorname{NAND}(A,P)=(AP)'=(A(A'+B'))'= (AA'+AB')'= (0+AB')'=(AB')'$.\n\n3) $Z=\\operatorname{NAND}(B,P)=(BP)'=(B(A'+B'))'= (BA'+BB')'= (A'B+0)'=(A'B)'$.\n\nCompute $F_{1}$ (XOR) reusing $Y$ and $Z$:\n4) $F_{1}=\\operatorname{NAND}(Y,Z)=(YZ)'=\\big((AB')'(A'B)'\\big)'$.\nApply De Morgan to the product in the inner expression by first simplifying the product of sums:\n$(AB')'=A'+B$, $(A'B)'=A+B'$, hence\n$YZ=(A'+B)(A+B')=A'B'+AB$,\nso\n$F_{1}=(YZ)'=(A'B'+AB)'=AB'+A'B$,\nwhich is exactly $A \\oplus B$.\n\nNow compute $F_{2}$ (XNOR) with one additional NAND while maximizing reuse. Note that\n$$P F_{1}=(A'+B')(AB'+A'B)=(A'+B')AB'+(A'+B')A'B.$$\nExpanding and using $AA'=0$, $BB'=0$, $X+X=X$:\n$(A'+B')AB'=A'AB'+B'AB'=0+AB'$,\n$(A'+B')A'B=A'A'B+B'A'B=A'B+0$,\nhence\n$$P F_{1}=AB'+A'B,$$\nso\n5) $F_{2}=\\operatorname{NAND}(P,F_{1})=(P F_{1})'=(AB'+A'B)'=A'B'+AB,$\nwhich is exactly $A \\odot B$.\n\nGate count and minimality:\n- The construction uses five 2-input NAND gates: one each to form $P$, $Y$, $Z$, and then one for $F_{1}$ and one for $F_{2}$.\n- A single-output 2-input NAND implementation of $A \\oplus B$ requires at least four NAND gates (standard minimal result; the canonical 4-NAND realization above is essentially unique up to symmetry). In that minimal 4-NAND structure, the only internal gate outputs are $P=(AB)'$, $Y=(AB')'$, and $Z=(A'B)'$, none of which equals $A'B'+AB$ (XNOR). Therefore, producing both $F_{1}$ and its complement $F_{2}$ as gate outputs requires at least one additional NAND. Hence, the absolute minimum number of 2-input NAND gates to realize both $F_{1}$ and $F_{2}$ simultaneously is five.\n\nThus, five 2-input NAND gates are necessary and sufficient, with maximal reuse of $P$, $Y$, and $Z$ as shown.", "answer": "$$\\boxed{5}$$", "id": "1942398"}]}