{"hands_on_practices": [{"introduction": "De Morgan's theorems are not just abstract rules; they are powerful tools for transforming and simplifying logical expressions. This first exercise demonstrates a fundamental application: finding the complement of a Sum-of-Products (SOP) expression. By applying De Morgan's laws, you will see how an expression built on an OR of several AND terms can be elegantly converted into a Product-of-Sums (POS) form, a skill essential for implementing logic with different types of gates. [@problem_id:1926500]", "problem": "In the design of a digital logic circuit, you are given four binary input signals, denoted as $A$, $B$, $C$, and $D$. The logical operations are represented by standard notation: the `·` symbol denotes the AND operation, the `+` symbol denotes the OR operation, and an overbar (e.g., $\\overline{X}$) signifies the NOT (inversion) operation.\n\nAn intermediate function, $F$, is defined by the Boolean expression:\n$$F = A \\cdot B + C \\cdot \\overline{D}$$\n\nFor the next stage of the circuit, the inverted function, $\\overline{F}$, is required. Determine the simplified expression for $\\overline{F}$. Your final answer must be cast into a minimal Product-of-Sums (POS) form. A POS form consists of one or more sum terms (literals combined with OR) that are then combined by AND operations, for example, $(X+\\overline{Y}) \\cdot (W+Z)$.", "solution": "We start from the given function $F = A \\cdot B + C \\cdot \\overline{D}$ and seek its complement $\\overline{F}$ in minimal Product-of-Sums form.\n\nApply De Morgan’s law for the complement of a sum: $\\overline{X + Y} = \\overline{X} \\cdot \\overline{Y}$. With $X = A \\cdot B$ and $Y = C \\cdot \\overline{D}$, we get\n$$\n\\overline{F} = \\overline{A \\cdot B + C \\cdot \\overline{D}} = \\overline{(A \\cdot B)} \\cdot \\overline{(C \\cdot \\overline{D})}.\n$$\n\nApply De Morgan’s law for the complement of a product: $\\overline{XY} = \\overline{X} + \\overline{Y}$, to each factor:\n$$\n\\overline{A \\cdot B} = \\overline{A} + \\overline{B}, \\quad \\overline{C \\cdot \\overline{D}} = \\overline{C} + \\overline{\\overline{D}}.\n$$\n\nUse the involution law $\\overline{\\overline{D}} = D$ to simplify:\n$$\n\\overline{F} = (\\overline{A} + \\overline{B}) \\cdot (\\overline{C} + D).\n$$\n\nThis is already a Product-of-Sums form with two sum terms, each containing two literals, and no absorption or reduction is possible between the terms, so it is minimal.", "answer": "$$\\boxed{(\\overline{A}+\\overline{B})\\cdot(\\overline{C}+D)}$$", "id": "1926500"}, {"introduction": "Having learned to transform an SOP expression, we now tackle the dual operation by taking the complement of a Product-of-Sums (POS) function. This practice is crucial for understanding the symmetry of De Morgan's theorems and their role in determining the conditions under which a system is inactive. By working through this problem, you will convert a POS function into its equivalent SOP form, completing your practical toolkit for logical negation. [@problem_id:1926540]", "problem": "In a control system for an automated greenhouse, three binary sensors monitor key environmental parameters: soil moisture (A), ambient temperature (B), and light intensity (C). A '1' from a sensor indicates a condition is above its desired threshold, while a '0' indicates it is at or below the threshold.\n\nA master irrigation and ventilation system is governed by a logic function $F$. The system activates (i.e., $F=1$) if the following conditions are met: (the soil moisture is high OR the temperature is normal) AND (the temperature is high OR the light intensity is high).\n\nThis logic is implemented by the Boolean function:\n$$F = (A + \\overline{B})(B + C)$$\nwhere an overbar (e.g., $\\overline{B}$) represents the logical NOT operation.\n\nFor diagnostic purposes, an engineer needs to determine the conditions under which the system is *inactive* (i.e., $F=0$). This corresponds to finding the logical complement of the function, $\\overline{F}$.\n\nFind the simplified Boolean expression for $\\overline{F}$. The final expression must be in the Sum-of-Products (SOP) form.", "solution": "We are given the Boolean function $F=(A+\\overline{B})(B+C)$ and asked to find its complement $\\overline{F}$ in simplified Sum-of-Products form.\n\nStart by applying De Morgan's law to the complement of a product:\n$$\n\\overline{F}=\\overline{(A+\\overline{B})(B+C)}=\\overline{(A+\\overline{B})}+\\overline{(B+C)}.\n$$\nApply De Morgan's law to each complemented sum:\n$$\n\\overline{(A+\\overline{B})}=\\overline{A} \\cdot \\overline{\\overline{B}}, \\quad \\overline{(B+C)}=\\overline{B} \\cdot \\overline{C}.\n$$\nUse the involution law $\\overline{\\overline{X}}=X$ to simplify $\\overline{\\overline{B}}=B$, which gives\n$$\n\\overline{(A+\\overline{B})}=\\overline{A}B, \\quad \\overline{(B+C)}=\\overline{B}\\overline{C}.\n$$\nTherefore,\n$$\n\\overline{F}=\\overline{A}B+\\overline{B}\\overline{C}.\n$$\nThis is already a Sum-of-Products expression and cannot be reduced further using standard Boolean simplification rules.", "answer": "$$\\boxed{\\overline{A}B+\\overline{B}\\overline{C}}$$", "id": "1926540"}, {"introduction": "Algebraic simplification is fast and efficient, but how do we confirm our final expression is truly equivalent to the original? This final exercise bridges the gap between abstract manipulation and concrete circuit behavior. You will first simplify a given function using De Morgan's theorem and then verify your result by constructing a truth table, proving that the simplified logic behaves identically for all possible inputs. [@problem_id:1926569]", "problem": "An engineer is designing a simple safety interlock circuit for an industrial machine. The machine's operation is controlled by a single logic output, $F$. The machine runs if and only if $F=1$. The behavior of $F$ depends on two sensor inputs: $X$ and $Y$.\n\n- The input $X$ is `1` if the safety guard is open, and `0` if it is closed.\n- The input $Y$ is `1` if a manual override switch is active, and `0` if it is inactive.\n\nThe engineer's initial unsimplified circuit design implements the following logic function:\n$$F = \\overline{(\\overline{X} + Y)}$$\n\nYour task is to determine the complete operational behavior of this circuit. Which of the following options correctly represents the truth table for the function $F$, with the columns shown in the order $(X, Y, F)$?\n\nA.\n| X | Y | F |\n|---|---|---|\n| 0 | 0 | 0 |\n| 0 | 1 | 0 |\n| 1 | 0 | 1 |\n| 1 | 1 | 0 |\n\nB.\n| X | Y | F |\n|---|---|---|\n| 0 | 0 | 1 |\n| 0 | 1 | 0 |\n| 1 | 0 | 1 |\n| 1 | 1 | 1 |\n\nC.\n| X | Y | F |\n|---|---|---|\n| 0 | 0 | 1 |\n| 0 | 1 | 1 |\n| 1 | 0 | 0 |\n| 1 | 1 | 1 |\n\nD.\n| X | Y | F |\n|---|---|---|\n| 0 | 0 | 1 |\n| 0 | 1 | 0 |\n| 1 | 0 | 0 |\n| 1 | 1 | 0 |", "solution": "We start from the given logic function:\n$$F=\\overline{\\left(\\overline{X}+Y\\right)}.$$\nUsing De Morgan's law, $\\overline{A+B}=\\overline{A}\\cdot \\overline{B}$, with $A=\\overline{X}$ and $B=Y$, we obtain:\n$$F=\\overline{\\overline{X}}\\cdot \\overline{Y}=X\\cdot \\overline{Y}.$$\n\nNow evaluate $F$ for all input combinations:\n- For $(X,Y)=(0,0)$: $\\overline{Y}=1$, so $F=0\\cdot 1=0$.\n- For $(X,Y)=(0,1)$: $\\overline{Y}=0$, so $F=0\\cdot 0=0$.\n- For $(X,Y)=(1,0)$: $\\overline{Y}=1$, so $F=1\\cdot 1=1$.\n- For $(X,Y)=(1,1)$: $\\overline{Y}=0$, so $F=1\\cdot 0=0$.\n\nThus the truth table in the order $(X,Y,F)$ is:\n$(0,0,0)$, $(0,1,0)$, $(1,0,1)$, $(1,1,0)$, which matches option A.\n\nOperationally, since $F=X\\cdot \\overline{Y}$, the machine runs if and only if the guard is open ($X=1$) and the manual override is inactive ($Y=0$).", "answer": "$$\\boxed{A}$$", "id": "1926569"}]}