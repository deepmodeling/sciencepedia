{"hands_on_practices": [{"introduction": "The true power of the NOR gate lies in its status as a \"universal gate,\" meaning any digital logic function can be constructed using only NOR gates. This practice is a fundamental exercise in digital logic synthesis, challenging you to transform a standard AND-OR expression into a circuit built exclusively from NOR gates. Mastering this conversion, primarily through the application of De Morgan's laws, is a cornerstone of efficient and minimalist circuit design [@problem_id:1969642].", "problem": "In a digital logic design lab, a student is tasked with implementing a specific Boolean function using only a limited type of logic gate. The target function, which depends on four input variables $A$, $B$, $C$, and $D$, is given by the expression $F(A, B, C, D) = (A+B)(C+D)$. In this expression, the plus sign ($+$) denotes the logical OR operation, and the adjacent parentheses denote the logical AND operation.\n\nThe only components available to the student are 2-input NOR gates. A 2-input NOR gate with inputs $X$ and $Y$ produces an output equivalent to $\\overline{X+Y}$.\n\nCalculate the minimum number of 2-input NOR gates required to correctly implement the function $F(A, B, C, D)$.", "solution": "We need to implement the Boolean function $F(A,B,C,D) = (A+B)(C+D)$ using only 2-input NOR gates, each realizing $\\overline{X+Y}$ for inputs $X$ and $Y$.\n\nApply De Morgan's law to express $F$ directly in terms of NOR operations:\n$$\nF = (A+B)(C+D)\n= \\overline{\\overline{(A+B)(C+D)}}\n= \\overline{\\overline{A+B} + \\overline{C+D}}.\n$$\nThis expression shows that $F$ can be obtained as the NOR of the two intermediate signals $\\overline{A+B}$ and $\\overline{C+D}$.\n\nImplementation using 2-input NOR gates:\n1) Compute $N_{1} = \\overline{A+B}$ with one NOR gate taking inputs $A$ and $B$.\n2) Compute $N_{2} = \\overline{C+D}$ with one NOR gate taking inputs $C$ and $D$.\n3) Compute $F = \\overline{N_{1} + N_{2}}$ with one NOR gate taking inputs $N_{1}$ and $N_{2}$.\n\nThus, $F$ is realized with exactly $3$ NOR gates.\n\nTo show minimality, consider any circuit with at most two 2-input NOR gates. Let the first gate’s output depend on at most two of $\\{A,B,C,D\\}$. The second (final) NOR gate can take as inputs either:\n- the first gate’s output and one primary input, so the final output depends on at most three distinct primary inputs; or\n- two primary inputs, in which case the first gate is unused; or\n- two gate outputs, which is impossible with only one prior gate.\n\nTherefore, with only two NOR gates, the output can depend on at most three variables. However, $F$ depends on all four variables: for example, fixing $(B,C,D)=(0,1,0)$ yields $F=A$; fixing $(A,C,D)=(0,1,0)$ yields $F=B$; fixing $(A,B,D)=(1,0,0)$ yields $F=C$; fixing $(A,B,C)=(1,0,0)$ yields $F=D$. Hence at least three NOR gates are necessary, and since three suffice, the minimum is $3$.", "answer": "$$\\boxed{3}$$", "id": "1969642"}, {"introduction": "Moving from abstract theory to practical implementation, modern digital circuits are designed using Hardware Description Languages (HDLs) like VHDL. This exercise bridges that gap by placing the NOR gate in a realistic context—a safety interlock system. Your task is to express the required logic using a single line of VHDL code, demonstrating how a fundamental logic operation can be concisely described in a dataflow modeling style [@problem_id:1969652].", "problem": "In the field of digital systems design, Very High-Speed Integrated Circuit Hardware Description Language (VHDL) is used to model the behavior of electronic circuits. Consider a safety interlock system for a high-power industrial laser. The system has two input signals, `CHECK_A` and `CHECK_B`, and one output signal, `FIRE_ENABLE`. These signals are of type `std_logic`.\n\nThe safety protocol dictates that the laser can only be enabled (i.e., `FIRE_ENABLE` is set to logic '1') if and only if both safety checks are in a \"clear\" state (i.e., `CHECK_A` is '0' and `CHECK_B` is '0'). If either `CHECK_A` or `CHECK_B` (or both) are in an \"alarm\" state (logic '1'), the `FIRE_ENABLE` signal must be '0' to prevent firing.\n\nAssuming you are writing code within the architecture body of a VHDL entity, you need to implement this logic using a single concurrent signal assignment statement, a characteristic of dataflow modeling.\n\nWhich one of the following lines of VHDL code correctly describes the behavior of the `FIRE_ENABLE` signal?\n\nA. `FIRE_ENABLE = CHECK_A nor CHECK_B;`\n\nB. `FIRE_ENABLE = CHECK_A xor CHECK_B;`\n\nC. `FIRE_ENABLE := CHECK_A or CHECK_B;`\n\nD. `FIRE_ENABLE = CHECK_A or CHECK_B;`\n\nE. `FIRE_ENABLE = CHECK_A and CHECK_B;`", "solution": "Let the input signals be $A = \\text{CHECK\\_A}$ and $B = \\text{CHECK\\_B}$, and the output be $F = \\text{FIRE\\_ENABLE}$. The requirement is:\n- The laser can fire only when both checks are clear, i.e., $A = 0$ and $B = 0$.\n- Therefore, $F = 1$ if and only if $A = 0$ and $B = 0$.\n\nIn Boolean form this is:\n$$F = 1 \\iff (A = 0) \\land (B = 0).$$\nThis can be written as:\n$$F = \\neg A \\land \\neg B.$$\nBy De Morgan’s law:\n$$\\neg A \\land \\neg B = \\neg (A \\lor B).$$\nThe Boolean operator that implements $F = \\neg (A \\lor B)$ is the NOR operation, denoted $A \\downarrow B$:\n$$F = A \\downarrow B.$$\n\nIn VHDL with std_logic operands, the concurrent assignment uses the signal assignment operator “=”, and the “nor” operator implements NOR. Thus the correct single concurrent signal assignment is:\nFIRE_ENABLE = CHECK_A nor CHECK_B;\n\nEvaluate the options:\n- A. Uses “=” and “nor”: correct, implements $F = \\neg (A \\lor B)$.\n- B. “xor”: incorrect logic.\n- C. “:=” is variable assignment (sequential, not concurrent) and logic is “or”: incorrect syntax and logic.\n- D. “=” is comparison, not assignment: incorrect.\n- E. “and” would enable when both are $1$: incorrect logic.\n\nHence, the correct choice is A.", "answer": "$$\\boxed{A}$$", "id": "1969652"}, {"introduction": "Digital logic extends beyond simple combinational circuits to sequential circuits that have memory, like the SR latch built from cross-coupled NOR gates. However, these circuits are subject to the physical limitations of their components, where timing is critical. This advanced problem delves into the real-world phenomenon of metastability, an unpredictable state that can occur due to timing violations, and challenges you to calculate how long a system must wait to ensure a reliable output, linking logical design to physical-layer reliability [@problem_id:1969702].", "problem": "A critical control circuit uses a fundamental Set-Reset (SR) latch to arbitrate between two asynchronous request signals, S and R. The latch is implemented using two identical cross-coupled 2-input NOR gates. The output of the first NOR gate is designated Q, and its inputs are the R signal and the output of the second NOR gate. The output of the second NOR gate is conventionally the complement of Q, and its inputs are the S signal and the output Q.\n\nThe key timing characteristics of the circuit are as follows:\n- The propagation delay of each NOR gate, $t_{pd}$, is $0.50$ ns.\n- The hold time requirement for the latch, $t_h$, is defined as the minimum time interval by which the de-assertion of the two inputs must be separated to guarantee a predictable, stable output. For this particular latch design, it is established that $t_h = t_{pd}$. A failure to meet this hold time results in the latch entering a metastable state.\n- The metastability time constant of the latch, $\\tau$, is $0.20$ ns.\n\nInitially, both inputs S and R are at a logic low (0), and the latch is in a stable state. Due to a fault condition in the upstream circuitry, both S and R are simultaneously asserted to logic high (1). Shortly after, the signals are de-asserted (returned to logic low). The S signal transitions from high to low at time $t_S = 10.00$ ns. The R signal transitions from high to low at time $t_R = 10.35$ ns.\n\nWhen the latch enters a metastable state, the probability $P$ that it remains in this indeterminate state after a waiting time $t_{wait}$ is described by the exponential decay model $P(t_{wait}) = \\exp(-t_{wait}/\\tau)$. To ensure system integrity, a downstream component must not sample the latch's output until the probability of it still being metastable is less than $1.0 \\times 10^{-12}$.\n\nCalculate the minimum required waiting time, $t_{wait}$, that must elapse after the second input signal (R) is de-asserted, before the output Q can be reliably sampled. Express your answer in nanoseconds (ns) and round it to three significant figures.", "solution": "The de-assertion separation is $\\Delta t = t_{R} - t_{S} = 10.35\\,\\text{ns} - 10.00\\,\\text{ns} = 0.35\\,\\text{ns}$. The hold time is $t_{h} = t_{pd} = 0.50\\,\\text{ns}$. Since $\\Delta t  t_{h}$, the hold requirement is violated and the latch can enter a metastable state when the second input (R) de-asserts at $t_{R}$.\n\nThe probability that the latch remains metastable after a waiting time $t_{wait}$ (measured from $t_{R}$) is\n$$\nP(t_{wait})=\\exp\\!\\left(-\\frac{t_{wait}}{\\tau}\\right).\n$$\nTo ensure $P(t_{wait})1.0 \\times 10^{-12}$, solve\n$$\n\\exp\\!\\left(-\\frac{t_{wait}}{\\tau}\\right)  1.0 \\times 10^{-12}.\n$$\nTaking the natural logarithm,\n$$\n-\\frac{t_{wait}}{\\tau}  \\ln\\!\\left(1.0 \\times 10^{-12}\\right)=\\ln\\!\\left(10^{-12}\\right)=-12\\ln 10,\n$$\nso\n$$\nt_{wait}  \\tau \\cdot 12 \\ln 10.\n$$\nWith $\\tau = 0.20\\,\\text{ns}$,\n$$\nt_{wait}  0.20 \\times 12 \\ln 10\\,\\text{ns} = 2.4 \\ln 10\\,\\text{ns}.\n$$\nUsing $\\ln 10 \\approx 2.302585093$,\n$$\nt_{wait} \\approx 2.4 \\times 2.302585093\\,\\text{ns} \\approx 5.526204223\\,\\text{ns}.\n$$\nRounded to three significant figures, the minimum required waiting time is $5.53\\,\\text{ns}$.", "answer": "$$\\boxed{5.53}$$", "id": "1969702"}]}