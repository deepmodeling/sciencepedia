{"hands_on_practices": [{"introduction": "The Exclusive-OR (XOR) gate is more than just a simple logic operator; its unique algebraic properties make it a surprisingly powerful tool. This exercise demonstrates a classic and elegant algorithm that uses a sequence of XOR operations to swap the values of two variables without needing any temporary storage. By working through this problem [@problem_id:1967657], you will gain a deeper appreciation for the XOR properties of self-inversion ($A \\oplus A = 0$) and associativity, and see how they can be applied in a procedural context to achieve a non-obvious result.", "problem": "A specialized data scrambling unit in a digital signal processor operates on two 1-bit data lines, labeled $A$ and $B$. The initial logical values on these lines are denoted by $A_0$ and $B_0$, respectively. The unit executes a fixed sequence of three operations using 2-input exclusive-OR (XOR) gates. After each operation, the specified data line is updated with the new value before the next operation commences. The sequence of operations is as follows:\n\n1.  The value on line $A$ is replaced by the result of applying an XOR operation to the current values of $A$ and $B$.\n2.  The value on line $B$ is replaced by the result of applying an XOR operation to the current values of $A$ and $B$.\n3.  The value on line $A$ is replaced by the result of applying an XOR operation to the current values of $A$ and $B$.\n\nLet the final logical values on lines $A$ and $B$ after this three-step sequence be $A_f$ and $B_f$. Determine the expressions for $A_f$ and $B_f$ in terms of the initial values $A_0$ and $B_0$. Your answer should be presented as a row of two expressions, representing the final values of $A$ and $B$ in that order.", "solution": "Let the logical operation of exclusive-OR be denoted by the symbol $\\oplus$. We will trace the state of the data lines $A$ and $B$ through the three-step sequence. The key properties of the XOR operation that we will use are:\n- Commutativity: $X \\oplus Y = Y \\oplus X$\n- Associativity: $(X \\oplus Y) \\oplus Z = X \\oplus (Y \\oplus Z)$\n- Identity element: $X \\oplus 0 = X$\n- Self-inverse: $X \\oplus X = 0$\n\nLet the state of the system be represented by the pair of values $(A, B)$.\n\n**Initial State:**\nThe initial values on the lines are $(A_0, B_0)$.\n\n**Step 1:**\nThe operation is to replace the value on line $A$ with $A \\oplus B$.\nThe current values are $A = A_0$ and $B = B_0$.\nThe new value for line $A$ is $A_1 = A_0 \\oplus B_0$.\nThe value on line $B$ remains unchanged in this step.\nSo, the state after step 1 is $(A_1, B_1) = (A_0 \\oplus B_0, B_0)$.\n\n**Step 2:**\nThe operation is to replace the value on line $B$ with $A \\oplus B$.\nThe current values are the ones from the end of step 1: $A = A_1 = A_0 \\oplus B_0$ and $B = B_1 = B_0$.\nThe new value for line $B$ is $B_2 = A_1 \\oplus B_1$.\nSubstituting the expressions for $A_1$ and $B_1$:\n$$B_2 = (A_0 \\oplus B_0) \\oplus B_0$$\nUsing the associative property of XOR:\n$$B_2 = A_0 \\oplus (B_0 \\oplus B_0)$$\nUsing the self-inverse property, $B_0 \\oplus B_0 = 0$:\n$$B_2 = A_0 \\oplus 0$$\nUsing the identity property, $A_0 \\oplus 0 = A_0$:\n$$B_2 = A_0$$\nThe value on line $A$ remains unchanged in this step, so $A_2 = A_1 = A_0 \\oplus B_0$.\nThe state after step 2 is $(A_2, B_2) = (A_0 \\oplus B_0, A_0)$.\n\n**Step 3:**\nThe operation is to replace the value on line $A$ with $A \\oplus B$.\nThe current values are the ones from the end of step 2: $A = A_2 = A_0 \\oplus B_0$ and $B = B_2 = A_0$.\nThe new value for line $A$ is the final value $A_f = A_2 \\oplus B_2$.\nSubstituting the expressions for $A_2$ and $B_2$:\n$$A_f = (A_0 \\oplus B_0) \\oplus A_0$$\nUsing the commutative property of XOR:\n$$A_f = (B_0 \\oplus A_0) \\oplus A_0$$\nUsing the associative property of XOR:\n$$A_f = B_0 \\oplus (A_0 \\oplus A_0)$$\nUsing the self-inverse property, $A_0 \\oplus A_0 = 0$:\n$$A_f = B_0 \\oplus 0$$\nUsing the identity property, $B_0 \\oplus 0 = B_0$:\n$$A_f = B_0$$\nThe value on line $B$ remains unchanged in this step, so the final value is $B_f = B_2 = A_0$.\n\n**Final State:**\nThe final values on the lines are $(A_f, B_f) = (B_0, A_0)$. This shows that the described sequence of operations successfully swaps the initial values of the two data lines without using any temporary storage element. The problem asks for the expressions for the final values of $A$ and $B$ in that order.\n\nFinal value of $A$: $A_f = B_0$\nFinal value of $B$: $B_f = A_0$", "answer": "$$\\boxed{\\begin{pmatrix} B_0 & A_0 \\end{pmatrix}}$$", "id": "1967657"}, {"introduction": "Beyond its algebraic elegance, the XOR gate is the heart of digital arithmetic. It forms the core of adders and other arithmetic logic unit (ALU) components because of its ability to act as a conditional inverter. This practice problem [@problem_id:1967645] challenges you to apply this understanding to construct another vital arithmetic circuit: a 2's complement generator. By working within strict component constraints, you will learn to think like a circuit designer, combining XOR gates with other primitive gates to build efficient and functional hardware.", "problem": "An electrical engineering student is designing a compact arithmetic logic unit (ALU) with limited resources. The task is to create a circuit that computes the 2's complement of a 3-bit binary number, represented as $B = b_2b_1b_0$, where $b_2$ is the most significant bit.\n\nDue to strict constraints imposed by the component library, the design must be implemented using a specific set of gates: exactly two 2-input exclusive-OR (XOR) gates and exactly one other 2-input primitive logic gate. The outputs of the circuit are the bits of the 2's complement result, $S = s_2s_1s_0$.\n\nWhich of the following primitive logic gates must be the single additional gate used in the design?\n\nA. AND\n\nB. OR\n\nC. NAND\n\nD. NOR\n\nE. XNOR", "solution": "Let the 3-bit input be $B=b_{2}b_{1}b_{0}$ and the two’s complement output be $S=s_{2}s_{1}s_{0}$. Two’s complement is defined by\n$$\nS=\\overline{B}+1.\n$$\nImplement it bitwise as a ripple addition of $1$ to $\\overline{B}$.\n\nFor bit $0$: let $x_{0}=\\overline{b_{0}}$ and $c_{0}=1$. Then\n$$\ns_{0}=x_{0}\\oplus c_{0}=\\overline{b_{0}}\\oplus 1=b_{0},\\quad c_{1}=x_{0}\\land c_{0}=\\overline{b_{0}}.\n$$\n\nFor bit $1$: let $x_{1}=\\overline{b_{1}}$. Then\n$$\ns_{1}=x_{1}\\oplus c_{1}=\\overline{b_{1}}\\oplus\\overline{b_{0}}=b_{1}\\oplus b_{0},\n$$\nusing the identity $\\overline{u}\\oplus\\overline{v}=u\\oplus v$. The carry is\n$$\nc_{2}=x_{1}\\land c_{1}=\\overline{b_{1}}\\land\\overline{b_{0}}.\n$$\n\nFor bit $2$: let $x_{2}=\\overline{b_{2}}$. Then\n$$\ns_{2}=x_{2}\\oplus c_{2}=\\overline{b_{2}}\\oplus\\left(\\overline{b_{1}}\\land\\overline{b_{0}}\\right).\n$$\nDefine $t=b_{1}\\lor b_{0}$. By De Morgan, $\\overline{b_{1}}\\land\\overline{b_{0}}=\\overline{t}$. Using $\\overline{u}\\oplus\\overline{v}=u\\oplus v$ again,\n$$\ns_{2}=\\overline{b_{2}}\\oplus\\overline{t}=b_{2}\\oplus t=b_{2}\\oplus(b_{1}\\lor b_{0}).\n$$\n\nThus the required outputs are\n$$\ns_{0}=b_{0},\\quad s_{1}=b_{1}\\oplus b_{0},\\quad s_{2}=b_{2}\\oplus(b_{1}\\lor b_{0}).\n$$\nA circuit realizing these with exactly two 2-input XORs and one other 2-input primitive gate is:\n- Use one XOR gate for $s_{1}=b_{1}\\oplus b_{0}$.\n- Use one OR gate to form $t=b_{1}\\lor b_{0}$.\n- Use the second XOR gate for $s_{2}=b_{2}\\oplus t$.\n- Wire $s_{0}=b_{0}$.\n\nAmong the candidates, only an OR gate directly provides $b_{1}\\lor b_{0}$ needed for $s_{2}$ without requiring extra inversions or additional XOR gates. AND, NAND, and NOR would require inversion or extra XORs to obtain $b_{1}\\lor b_{0}$, and XNOR would be useful only if a NOR of $b_1, b_0$ were also available, which it is not under the given constraint.\n\nTherefore, the single additional gate must be OR.", "answer": "$$\\boxed{B}$$", "id": "1967645"}, {"introduction": "In the real world, logic gates are not instantaneous. This final practice moves us from the ideal realm of Boolean algebra to the physical reality of circuit timing, where propagation delays are a critical factor. The circuit in this problem [@problem_id:1967650] uses an XOR gate as a simple change detector, but due to the delay of an associated inverter, it produces unintended, short-lived pulses known as \"glitches.\" Analyzing the characteristics of these glitches will provide you with a foundational understanding of timing hazards, a crucial topic in the design of reliable, high-speed digital systems.", "problem": "Consider a digital circuit designed to detect changes in an input signal. The circuit consists of a two-input exclusive-OR (XOR) gate and a single NOT gate (inverter). An input signal, denoted as $A$, is connected directly to the first input of the XOR gate. This same signal $A$ is also fed into the input of the NOT gate. The output of the NOT gate is then connected to the second input of the XOR gate. The final output of the circuit, $Y$, is taken from the output of the XOR gate.\n\nThe logic gates are non-ideal. The NOT gate has a characteristic propagation delay of $t_{pd,INV}$, meaning its output transitions $t_{pd,INV}$ seconds after a transition occurs at its input. Similarly, the XOR gate has a propagation delay of $t_{pd,XOR}$. For simplicity, assume the propagation delay is the same for both low-to-high and high-to-low transitions for each gate.\n\nThe input signal $A$ is a periodic square wave with a frequency $f$ and a 50% duty cycle. You may assume that the period of the square wave is significantly larger than the propagation delays of the gates (i.e., $1/f \\gg t_{pd,INV}$ and $1/f \\gg t_{pd,XOR}$), so that transient effects from one transition completely resolve before the next transition begins.\n\nDetermine the duty cycle of the output signal $Y$. The duty cycle is defined as the fraction of time the signal is at a logic HIGH level within one full period. Express your answer as a single closed-form analytic expression in terms of the given parameters.", "solution": "The problem asks for the duty cycle of the output signal $Y$ of a specific circuit configuration. The circuit output $Y$ is the result of $A \\oplus \\text{NOT}(A)$, where both the NOT gate and the XOR gate have propagation delays.\n\nLet's analyze the behavior of the circuit by tracing the signals over time. We can analyze the response to a single rising edge and a single falling edge of the input signal $A$. Let the period of the input signal $A$ be $T = 1/f$. Since the duty cycle is 50%, the signal is HIGH for $T/2$ and LOW for $T/2$.\n\n**1. Analysis of a rising edge of $A$:**\n\nLet's assume the input signal $A$ transitions from logic 0 (LOW) to logic 1 (HIGH) at time $t=0$.\nLet the two inputs to the XOR gate be $X_1$ and $X_2$.\n- $X_1$ is connected directly to $A$. So, $X_1$ transitions from 0 to 1 at $t=0$.\n- $X_2$ is the output of the NOT gate, whose input is $A$. Before $t=0$, $A$ was 0, so the NOT gate's output $X_2$ was 1. When $A$ transitions from 0 to 1 at $t=0$, the NOT gate's output will transition from 1 to 0 after its propagation delay $t_{pd,INV}$. So, $X_2$ transitions from 1 to 0 at $t = t_{pd,INV}$.\n\nNow, let's observe the pair of inputs $(X_1, X_2)$ to the XOR gate over time:\n- For $t  0$: $(X_1, X_2) = (0, 1)$. The XOR operation $0 \\oplus 1$ yields 1.\n- For $0 \\le t  t_{pd,INV}$: $X_1$ has become 1, but $X_2$ has not yet changed. The inputs are $(X_1, X_2) = (1, 1)$. The XOR operation $1 \\oplus 1$ yields 0.\n- For $t \\ge t_{pd,INV}$: $X_2$ has now transitioned to 0. The inputs are $(X_1, X_2) = (1, 0)$. The XOR operation $1 \\oplus 0$ yields 1.\n\nThe output of the XOR gate, $Y$, will reflect these changes after its own propagation delay, $t_{pd,XOR}$.\n- For $t  t_{pd,XOR}$: The output $Y$ remains at its initial state, which corresponds to the inputs $(0, 1)$, so $Y=1$.\n- At $t = t_{pd,XOR}$: The change at the XOR inputs at $t=0$ (from $(0,1)$ to $(1,1)`) propagates to the output. The output $Y$ transitions from 1 to 0.\n- At $t = t_{pd,INV} + t_{pd,XOR}$: The change at the XOR inputs at $t=t_{pd,INV}$ (from $(1,1)$ to $(1,0)`) propagates to the output. The output $Y$ transitions from 0 back to 1.\n\nThis analysis shows that for every rising edge of $A$, the output $Y$ produces a temporary LOW pulse, often called a glitch. The duration of this LOW pulse is the time difference between the $Y$ falling and rising transitions: \n$$\\Delta t_{low,1} = (t_{pd,INV} + t_{pd,XOR}) - t_{pd,XOR} = t_{pd,INV}$$\n\n**2. Analysis of a falling edge of $A$:**\n\nThe input square wave has a 50% duty cycle, so $A$ transitions from 1 to 0 at $t = T/2$.\n- $X_1 = A$ transitions from 1 to 0 at $t = T/2$.\n- The input to the NOT gate transitions from 1 to 0. Its output, $X_2$, will transition from 0 to 1 after the delay $t_{pd,INV}$. So, $X_2$ transitions from 0 to 1 at $t = T/2 + t_{pd,INV}$.\n\nLet's observe the pair of inputs $(X_1, X_2)$ around this transition:\n- For $t_{pd,INV} \\le t  T/2$: The inputs are stable at $(1, 0)$ from the previous rising edge analysis. The XOR operation $1 \\oplus 0$ yields 1.\n- For $T/2 \\le t  T/2 + t_{pd,INV}$: $X_1$ has become 0, but $X_2$ is still 0. The inputs are $(X_1, X_2) = (0, 0)$. The XOR operation $0 \\oplus 0$ yields 0.\n- For $t \\ge T/2 + t_{pd,INV}$: $X_2$ has now transitioned to 1. The inputs are $(X_1, X_2) = (0, 1)$. The XOR operation $0 \\oplus 1$ yields 1.\n\nAgain, the output $Y$ reflects these changes after a delay of $t_{pd,XOR}$.\n- At $t = T/2 + t_{pd,XOR}$: The change at the XOR inputs at $t=T/2$ propagates, and $Y$ transitions from 1 to 0.\n- At $t = T/2 + t_{pd,INV} + t_{pd,XOR}$: The change at $t=T/2 + t_{pd,INV}$ propagates, and $Y$ transitions from 0 back to 1.\n\nThus, for every falling edge of $A$, another LOW pulse is generated at the output $Y$. The duration of this second pulse is \n$$\\Delta t_{low,2} = (T/2 + t_{pd,INV} + t_{pd,XOR}) - (T/2 + t_{pd,XOR}) = t_{pd,INV}$$\n\n**3. Calculation of Duty Cycle:**\n\nIn one full period $T$ of the input signal $A$, there is one rising edge and one falling edge. Each edge produces a LOW pulse of duration $t_{pd,INV}$ at the output $Y$. Therefore, the total time that the output $Y$ is LOW during one period is:\n$$t_{low,total} = \\Delta t_{low,1} + \\Delta t_{low,2} = t_{pd,INV} + t_{pd,INV} = 2 t_{pd,INV}$$\n\nThe total period of the output signal $Y$ is the same as the input signal, $T$. The time for which the output $Y$ is HIGH during one period is:\n$$t_{high} = T - t_{low,total} = T - 2 t_{pd,INV}$$\n\nThe duty cycle is defined as the fraction of time the signal is HIGH:\n$$\\text{Duty Cycle} = \\frac{t_{high}}{T} = \\frac{T - 2 t_{pd,INV}}{T} = 1 - \\frac{2 t_{pd,INV}}{T}$$\n\nThe problem gives the frequency $f$ of the input signal, and we know that $T = 1/f$. Substituting this into the expression for the duty cycle:\n$$\\text{Duty Cycle} = 1 - \\frac{2 t_{pd,INV}}{1/f} = 1 - 2 f t_{pd,INV}$$\n\nNote that the propagation delay of the XOR gate, $t_{pd,XOR}$, affects when the pulses occur (it shifts the entire output waveform in time), but it does not affect the duration of the pulses or, consequently, the duty cycle of the output signal.\n\nThe final expression for the duty cycle of signal $Y$ is `1 - 2 f t_{pd,INV}`.", "answer": "$$\\boxed{1 - 2 f t_{pd,INV}}$$", "id": "1967650"}]}