{"hands_on_practices": [{"introduction": "In digital electronics, minimizing the variety of components can drastically simplify manufacturing and design processes. This exercise challenges you to implement a function using only NOR gates, a classic \"universal gate\" [@problem_id:1974633]. Mastering this conversion is a foundational skill, demonstrating how any logical operation can be constructed from a single building block through the clever application of Boolean algebra, particularly De Morgan's laws.", "problem": "A digital logic circuit is required to implement the Boolean function $F(A, B, C) = A \\cdot (B + C)$, where $A$, $B$, and $C$ are the input variables. You are restricted to using only two-input NOR gates for the implementation. The direct inputs available are $A$, $B$, and $C$; you must generate any required complements using the NOR gates as well. What is the minimum number of two-input NOR gates needed to build this circuit?", "solution": "We are restricted to two-input NOR gates. Recall fundamental identities for NOR:\n- The NOR of two signals is $X \\downarrow Y = \\overline{(X+Y)}$.\n- Inversion can be generated by tying the inputs: $\\overline{X} = X \\downarrow X$.\n- AND can be generated as $XY = \\overline{(\\overline{X} + \\overline{Y})} = (\\overline{X} \\downarrow \\overline{Y})$.\n- OR can be generated by NOR followed by inversion: $X+Y = \\overline{(X \\downarrow Y)}$.\n\nThe target function is $F(A,B,C) = A(B+C)$. Using De Morgan and the AND-by-NOR identity, write\n$$\nF = A(B+C) = \\overline{(\\overline{A} + \\overline{(B+C)})} = (\\overline{A} \\downarrow \\overline{(B+C)}).\n$$\nThus we need $\\overline{A}$ and $\\overline{(B+C)}$, each obtainable by a single NOR:\n- Generate $\\overline{A}$ with one NOR: $\\overline{A} = A \\downarrow A$.\n- Generate $\\overline{(B+C)}$ with one NOR: $\\overline{(B+C)} = B \\downarrow C$.\n- Feed these to a third NOR to obtain $F$: $F = (\\overline{A} \\downarrow \\overline{(B+C)})$.\n\nThis achieves the implementation with $3$ two-input NOR gates.\n\nTo show minimality, suppose only $2$ NOR gates are available. Any such network must have one gate produce $G_{1} = Q \\downarrow R = \\overline{(Q+R)}$ from two primary inputs $Q,R \\in \\{A,B,C\\}$, and the final output as\n$$\nG_{2} = P \\downarrow G_{1} = \\overline{(P + \\overline{(Q+R)})} = \\overline{P}(Q+R),\n$$\nfor some primary input $P \\in \\{A,B,C\\}$. Therefore any two-gate NOR network realizes a function of the form $\\overline{P}(Q+R)$. Our target is $A(B+C)$. To match $\\overline{P}(Q+R)$ to $A(B+C)$, we would require $\\overline{P} = A$ and $\\{Q,R\\} = \\{B,C\\}$, which implies $P = \\overline{A}$, not available as a primary input without an extra gate. Hence two gates cannot realize $A(B+C)$ from the given direct inputs. Therefore, the minimum number of two-input NOR gates required is $3$.", "answer": "$$\\boxed{3}$$", "id": "1974633"}, {"introduction": "Beyond simply building circuits, a crucial skill for any engineer is the ability to analyze and debug them. This exercise places you in a practical troubleshooting scenario involving a circuit built entirely from NAND gates [@problem_id:1974638]. By determining the circuit's output under a \"stuck-at-fault\" condition, you'll sharpen your logic-tracing abilities and gain insight into the reliability of digital systems.", "problem": "A digital logic circuit is constructed exclusively from four 2-input NAND gates, which are designated G1, G2, G3, and G4. The circuit has three input terminals, labeled A, B, and C, and one output terminal, F. The gates are interconnected as follows:\n\n-   The inputs to gate G1 are both connected to the input terminal C.\n-   The inputs to gate G2 are the output of G1 and the input terminal A.\n-   The inputs to gate G3 are the input terminals C and B.\n-   The inputs to gate G4 are the outputs of G2 and G3. The output of this final gate, G4, is the circuit's output F.\n\nNow, consider a 'stuck-at-0' fault condition where the input terminal B is permanently held at a logical '0'. Determine the simplified Boolean expression for the output F in terms of the remaining active inputs, A and C. The simplified expression should be presented in a sum-of-products form.", "solution": "Let a 2-input NAND operation be defined by $\\operatorname{NAND}(X,Y)=\\overline{XY}$, where juxtaposition denotes logical AND, $+$ denotes logical OR, and the overline denotes logical NOT.\n\nGate-by-gate derivation under the stuck-at-0 fault $B=0$:\n- Gate G1 has both inputs tied to $C$, so its output is $G1=\\overline{C \\cdot C}=\\overline{C}$.\n- Gate G2 takes inputs $G1$ and $A$, hence $G2=\\overline{(\\overline{C}) \\cdot A}=\\overline{A \\overline{C}}$.\n- Gate G3 takes inputs $C$ and $B$, but $B=0$, so $G3=\\overline{C \\cdot 0}=\\overline{0}=1$.\n- Gate G4 takes inputs $G2$ and $G3$, thus the output $F$ is\n$$\nF=\\overline{G2 \\cdot G3}=\\overline{\\left(\\overline{A \\overline{C}}\\right)\\cdot 1}=\\overline{\\overline{A \\overline{C}}}=A \\overline{C},\n$$\nusing the involution law $\\overline{\\overline{X}}=X$.\n\nTherefore, the simplified output in sum-of-products form (a single product term) is $A\\overline{C}$.", "answer": "$$\\boxed{A\\overline{C}}$$", "id": "1974638"}, {"introduction": "Modern digital design is often a balancing act between logical correctness and performance. This problem elevates the challenge beyond basic implementation to include a critical performance constraint: propagation delay [@problem_id:1974622]. Your task is to synthesize a complex Boolean function using only NAND gates within a strict three-gate-level delay, requiring a systematic approach to circuit structuring and optimization.", "problem": "A digital logic circuit is to be designed to implement a specific 4-input boolean function $F(A,B,C,D)$. The function is defined by the expression $F(A,B,C,D) = \\overline{(A \\oplus B)} + (C \\oplus D)$, where $\\oplus$ denotes the Exclusive OR (XOR) operation and the overline symbol denotes the NOT operation.\n\nYour task is to design an implementation of this function that adheres to two strict constraints:\n1. The circuit must be constructed using **only** 2-input NAND gates.\n2. The maximum propagation delay from any input to the final output must not exceed **three gate levels**.\n\nFor the purpose of this design, you may assume that all four primary inputs ($A, B, C, D$) and their complements ($\\overline{A}, \\overline{B}, \\overline{C}, \\overline{D}$) are available simultaneously at time zero.\n\nDetermine the minimum number of 2-input NAND gates required to build this circuit while satisfying all the given constraints.", "solution": "The problem asks for the minimum number of 2-input NAND gates required to implement the function $F(A,B,C,D) = \\overline{(A \\oplus B)} + (C \\oplus D)$ with a maximum propagation delay of three gate levels, assuming inputs and their complements are available.\n\n**Step 1: Analyze and simplify the Boolean function.**\n\nLet $X = A \\oplus B$ and $Y = C \\oplus D$. The function can be written as $F = \\overline{X} + Y$.\nUsing the property $\\overline{P} + Q = \\overline{(P \\cdot \\overline{Q})}$, we can express $F$ in a form that is amenable to a NAND gate implementation.\n$F = \\overline{(X \\cdot \\overline{Y})}$\nThis is equivalent to $F = \\text{NAND}(X, \\overline{Y})$.\n\nLet's substitute the original expressions back into $X$ and $\\overline{Y}$.\n$X = A \\oplus B$\n$\\overline{Y} = \\overline{(C \\oplus D)} = C \\leftrightarrow D$ (the XNOR operation)\n\nSo, the function to be implemented is $F = \\text{NAND}(A \\oplus B, C \\leftrightarrow D)$.\n\n**Step 2: Plan the circuit structure based on the propagation delay constraint.**\n\nThe function $F$ is the output of a single NAND gate. For the total circuit to have a maximum delay of three gate levels, the inputs to this final NAND gate must be available at the output of gate level 2.\nLet the final gate be a level 3 gate. Its inputs are the signals $A \\oplus B$ and $C \\leftrightarrow D$.\nTherefore, we must be able to generate both $A \\oplus B$ and $C \\leftrightarrow D$ using a maximum of two gate levels.\n\n**Step 3: Design a 2-level NAND-gate circuit for $A \\oplus B$.**\n\nThe expression for XOR is $A \\oplus B = \\overline{A}B + A\\overline{B}$. This is a sum-of-products (SOP) expression. A 2-level NAND-NAND structure can implement any SOP function.\n$A \\oplus B = \\overline{(\\overline{(\\overline{A}B)} \\cdot \\overline{(A\\overline{B})})} = \\text{NAND}(\\text{NAND}(\\overline{A}, B), \\text{NAND}(A, \\overline{B}))$.\n\nLet's analyze the levels and gate count for this sub-circuit. We are given that inputs and their complements ($\\overline{A}, \\overline{B}$) are available at time zero.\n- Level 1: We construct the NAND gates for the product terms.\n  - $G_1 = \\text{NAND}(\\overline{A}, B)$\n  - $G_2 = \\text{NAND}(A, \\overline{B})$\n  Since the inputs to these gates are available at time zero, their outputs are available after one gate delay (Level 1).\n- Level 2: We combine the outputs of the level 1 gates.\n  - $X_{out} = A \\oplus B = \\text{NAND}(G_1, G_2)$\n  The inputs to this gate are available after one gate delay, so its output is available after two gate delays (Level 2).\n\nThis implementation of $A \\oplus B$ uses 3 NAND gates and has a delay of 2 levels.\n\n**Step 4: Design a 2-level NAND-gate circuit for $C \\leftrightarrow D$.**\n\nThe expression for XNOR is $C \\leftrightarrow D = CD + \\overline{C}\\overline{D}$. This is also a sum-of-products expression. We can use the same 2-level NAND-NAND structure.\n$C \\leftrightarrow D = \\overline{(\\overline{(CD)} \\cdot \\overline{(\\overline{C}\\overline{D})})} = \\text{NAND}(\\text{NAND}(C, D), \\text{NAND}(\\overline{C}, \\overline{D}))$.\n\nLet's analyze the levels and gate count for this sub-circuit. Inputs $C, \\overline{C}, D, \\overline{D}$ are available at time zero.\n- Level 1: We construct the NAND gates for the product terms.\n  - $G_3 = \\text{NAND}(C, D)$\n  - $G_4 = \\text{NAND}(\\overline{C}, \\overline{D})$\n  Their outputs are available after one gate delay (Level 1).\n- Level 2: We combine the outputs of the level 1 gates.\n  - $Y_{out} = C \\leftrightarrow D = \\text{NAND}(G_3, G_4)$\n  The output is available after two gate delays (Level 2).\n\nThis implementation of $C \\leftrightarrow D$ uses 3 NAND gates and has a delay of 2 levels.\n\n**Step 5: Combine the sub-circuits and calculate the total gate count.**\n\nThe final circuit is $F = \\text{NAND}(X_{out}, Y_{out})$.\n- The inputs $X_{out}$ (from Step 3) and $Y_{out}$ (from Step 4) are both available after two gate delays.\n- The final gate, $G_{final} = \\text{NAND}(X_{out}, Y_{out})$, takes these inputs. Its output, $F$, is therefore available after three gate delays.\n\nThis structure satisfies the 3-level propagation delay constraint. Now, we count the total number of gates.\n- Gates for $A \\oplus B$: 3 gates ($G_1, G_2, X_{out}$).\n- Gates for $C \\leftrightarrow D$: 3 gates ($G_3, G_4, Y_{out}$).\n- Final combining gate: 1 gate ($G_{final}$).\n\nTotal number of gates = 3 + 3 + 1 = 7.\n\nThe circuit can be expressed as:\n$F = \\text{NAND}(\\text{NAND}(\\text{NAND}(\\overline{A}, B), \\text{NAND}(A, \\overline{B})), \\text{NAND}(\\text{NAND}(C, D), \\text{NAND}(\\overline{C}, \\overline{D})))$.\nThis is the most efficient implementation meeting all constraints.", "answer": "$$\\boxed{7}$$", "id": "1974622"}]}