{"hands_on_practices": [{"introduction": "The bedrock of manipulating Boolean expressions is a set of fundamental laws, including the associative law. Before we apply these laws to complex problems, it's essential to prove they hold true. This exercise [@problem_id:1909660] guides you through a verification of the associative law for the OR operation, using a truth table to demonstrate that the grouping of variables, whether $(X + Y) + Z$ or $X + (Y + Z)$, does not affect the final outcome.", "problem": "In digital logic design, Boolean expressions are used to represent the logic of digital circuits. The variables in these expressions, such as $X$, $Y$, and $Z$, can only take on the values of 0 (representing a 'low' voltage level or 'false') or 1 (representing a 'high' voltage level or 'true'). The '+' symbol denotes the logical OR operation, and the '$\\cdot$' symbol denotes the logical AND operation. An expression is considered logically equivalent to another if they produce the identical output value for all possible combinations of input variable values.\n\nConsider the Boolean expression $F = (X + Y) + Z$. Determine which of the following expressions is logically equivalent to $F$.\n\nA. $X + (Y + Z)$\n\nB. $(X \\cdot Y) + Z$\n\nC. $X \\cdot (Y + Z)$\n\nD. $X + (Y \\cdot Z)$", "solution": "To determine which expression is logically equivalent to $F = (X + Y) + Z$, we must check if any of the given options yield the same output as $F$ for all possible input combinations of the variables $X$, $Y$, and $Z$. A systematic way to do this is by constructing a truth table that evaluates each expression for all 8 possible combinations of inputs (from $X=0, Y=0, Z=0$ to $X=1, Y=1, Z=1$).\n\nThe truth table will have columns for the inputs $X, Y, Z$, the original expression $F$, and each of the expressions from the options A, B, C, and D.\n\nLet's define the expressions for each option:\n- Expression A: $G_A = X + (Y + Z)$\n- Expression B: $G_B = (X \\cdot Y) + Z$\n- Expression C: $G_C = X \\cdot (Y + Z)$\n- Expression D: $G_D = X + (Y \\cdot Z)$\n\nWe will first compute the intermediate parts of the expressions. For $F=(X+Y)+Z$, the intermediate part is $(X+Y)$. For the options, the intermediate parts are $(Y+Z)$, $(X \\cdot Y)$, and $(Y \\cdot Z)$.\n\nThe logical OR (+) operation results in 1 if at least one of its operands is 1. The logical AND ($\\cdot$) operation results in 1 only if both of its operands are 1.\n\nLet's construct the truth table step-by-step.\n\n| X | Y | Z | $X+Y$ | $F=(X+Y)+Z$ | $Y+Z$ | $G_A=X+(Y+Z)$ | $X \\cdot Y$ | $G_B=(X \\cdot Y)+Z$ | $Y \\cdot Z$ | $G_D=X+(Y \\cdot Z)$ | $G_C=X \\cdot (Y+Z)$ |\n|---|---|---|---|---|---|---|---|---|---|---|---|\n| 0 | 0 | 0 |   0   |      0      |   0   |       0       |    0      |         0         |    0      |         0         |         0         |\n| 0 | 0 | 1 |   0   |      1      |   1   |       1       |    0      |         1         |    0      |         0         |         0         |\n| 0 | 1 | 0 |   1   |      1      |   1   |       1       |    0      |         0         |    0      |         0         |         0         |\n| 0 | 1 | 1 |   1   |      1      |   1   |       1       |    0      |         1         |    1      |         1         |         0         |\n| 1 | 0 | 0 |   1   |      1      |   0   |       1       |    0      |         0         |    0      |         1         |         0         |\n| 1 | 0 | 1 |   1   |      1      |   1   |       1       |    0      |         1         |    0      |         1         |         1         |\n| 1 | 1 | 0 |   1   |      1      |   1   |       1       |    1      |         1         |    0      |         1         |         1         |\n| 1 | 1 | 1 |   1   |      1      |   1   |       1       |    1      |         1         |    1      |         1         |         1         |\n\nLet's analyze the columns:\n- The column for our original function is $F=(X+Y)+Z$. Its output values are $(0, 1, 1, 1, 1, 1, 1, 1)$.\n- The column for option A is $G_A=X+(Y+Z)$. Its output values are $(0, 1, 1, 1, 1, 1, 1, 1)$.\n- The column for option B is $G_B=(X \\cdot Y)+Z$. Its output values are $(0, 1, 0, 1, 0, 1, 1, 1)$.\n- The column for option C is $G_C=X \\cdot (Y+Z)$. Its output values are $(0, 0, 0, 0, 0, 1, 1, 1)$.\n- The column for option D is $G_D=X+(Y \\cdot Z)$. Its output values are $(0, 0, 0, 1, 1, 1, 1, 1)$.\n\nBy comparing the output column of $F$ with the output columns for each option ($G_A, G_B, G_C, G_D$), we can see that only the column for $G_A$ is identical to the column for $F$.\n- $F \\neq G_B$ (e.g., at $X=0, Y=1, Z=0$, $F=1$ but $G_B=0$)\n- $F \\neq G_C$ (e.g., at $X=0, Y=0, Z=1$, $F=1$ but $G_C=0$)\n- $F \\neq G_D$ (e.g., at $X=0, Y=0, Z=1$, $F=1$ but $G_D=0$)\n\nSince the outputs of $F=(X+Y)+Z$ and $G_A=X+(Y+Z)$ are identical for all possible input combinations, they are logically equivalent. This demonstrates the associative law for the OR operation.\n\nTherefore, the correct option is A.", "answer": "$$\\boxed{A}$$", "id": "1909660"}, {"introduction": "The associative law is more than just a tool for algebraic rearrangement; it has profound implications for physical circuit design, particularly for performance. In high-speed digital systems, the way gates are connected directly impacts the circuit's overall propagation delay. This practice problem [@problem_id:1909702] challenges you to think like a circuit designer, using the associative law to reconfigure a logic expression to achieve the minimum possible delay and create a faster circuit.", "problem": "In the design of a high-speed arithmetic logic unit (ALU), a critical path involves the logical combination of four single-bit status flags: `W`, `X`, `Y`, and `Z`. The required function is the logical OR of these four flags. The initial blueprint of the circuit, derived from a sequential requirement analysis, specifies the logic using the Boolean expression $F = W + (X + (Y + Z))$, where `+` denotes the OR operation.\n\nFor implementation, only 2-input OR gates are available. Each of these gates has an identical and non-zero propagation delay, denoted as $t_p$. The performance of the ALU is critically dependent on minimizing the total propagation delay of this logic block. The associative law of Boolean algebra, which states that $A + (B + C) = (A + B) + C$, allows for the terms in the expression to be regrouped without altering the final output.\n\nWhich of the following Boolean expressions represents a regrouping of the original expression $F$ that results in the minimum possible total propagation delay for the circuit, given the constraints?\n\nA. $F = W + (X + (Y + Z))$\n\nB. $F = (W + X) + (Y + Z)$\n\nC. $F = ((W + X) + Y) + Z$\n\nD. $F = W + (X + Y + Z)$", "solution": "We are given the function $F = W + (X + (Y + Z))$, where $+$ denotes the OR operation. Only 2-input OR gates are available, each with identical propagation delay $t_{p}$. The propagation delay from an input to the output along any path equals the number of cascaded gates on that path multiplied by $t_{p}$, since all gates have equal, non-zero delay and interconnect delays are not specified.\n\nTo realize the OR of four inputs using only 2-input gates, the total number of gates required is $4 - 1 = 3$, because each 2-input OR gate reduces the number of distinct signals by one. However, the critical performance metric is the logic depth (number of gate levels) on the longest input-to-output path. With fan-in limited to $2$, the minimum number of levels $L$ needed to combine $n$ inputs satisfies $2^{L} \\geq n$, hence\n$$\nL \\geq \\lceil \\log_{2}(n) \\rceil.\n$$\nFor $n = 4$, this gives\n$$\nL \\geq \\lceil \\log_{2}(4) \\rceil = 2.\n$$\nTherefore, the minimum possible propagation delay is $2 t_{p}$.\n\nWe now evaluate each option in terms of logic depth and propagation delay:\n\nOption A: $F = W + (X + (Y + Z))$. This corresponds to a serial chain: first compute $(Y + Z)$ (one gate), then $(X + (Y + Z))$ (second gate), then $W + \\text{previous}$ (third gate). The depth from $Y$ or $Z$ to $F$ is $3$, so the propagation delay is\n$$\n3 t_{p}.\n$$\n\nOption B: $F = (W + X) + (Y + Z)$. This can be implemented with two first-level gates computing $(W + X)$ and $(Y + Z)$ in parallel, followed by one second-level gate OR-ing their outputs. Any input traverses exactly two gates, so the propagation delay is\n$$\n2 t_{p}.\n$$\nThis achieves the lower bound and is thus optimal.\n\nOption C: $F = ((W + X) + Y) + Z$. This is a left-associated chain of three gates. The longest path has depth $3$, yielding\n$$\n3 t_{p}.\n$$\n\nOption D: $F = W + (X + Y + Z)$. Under the constraint of only 2-input gates, the subexpression $(X + Y + Z)$ must be realized using two 2-input gates at minimum depth, for example as $(X+Y)+Z$, which requires two levels; an additional OR with $W$ adds one more level. Thus the longest path depth is $3$, giving\n$$\n3 t_{p}.\n$$\n\nSince the minimum possible depth is $2$ and only Option B achieves $2 t_{p}$, the regrouping that minimizes total propagation delay is Option B.", "answer": "$$\\boxed{B}$$", "id": "1909702"}, {"introduction": "While the OR and AND operations are associative, it's a critical mistake to assume this property applies to all logic gates. This exercise [@problem_id:1909680] explores the behavior of the common NOR gate, revealing that it is not associative. By analyzing two different ways to cascade 2-input NOR gates to create a 3-input function, you will see firsthand how the grouping of inputs leads to fundamentally different logical outputs, a crucial lesson for practical circuit implementation.", "problem": "A junior digital logic designer is tasked with creating a circuit for a simple safety system. The system has three sensor inputs, labeled $A$, $B$, and $C$. An alarm output, $F$, should be active (logic 1) if and only if all three sensors are inactive (logic 0). This desired behavior is described by the Boolean function $F(A, B, C) = \\overline{A+B+C}$.\n\nDue to a supply shortage, the designer only has access to a large number of 2-input NOR gates. The designer decides to construct the 3-input function by cascading two of these 2-input NOR gates. They consider two distinct wiring configurations:\n\n1.  **Configuration 1:** Inputs $A$ and $B$ are connected to the first 2-input NOR gate. The output of this gate and the primary input $C$ are then connected to the inputs of a second 2-input NOR gate. The final output of this configuration is denoted $F_1$.\n\n2.  **Configuration 2:** Inputs $B$ and $C$ are connected to the first 2-input NOR gate. The output of this gate and the primary input $A$ are then connected to the inputs of a second 2-input NOR gate. The final output of this configuration is denoted $F_2$.\n\nYour task is to determine the simplified Boolean expressions for the outputs $F_1$ and $F_2$ that result from these two configurations. Select the option that correctly represents the pair of expressions $(F_1, F_2)$.\n\nA. $F_1 = \\overline{A}\\overline{B}\\overline{C}$; $F_2 = \\overline{A}\\overline{B}\\overline{C}$\n\nB. $F_1 = (A+B)\\overline{C}$; $F_2 = \\overline{A}(B+C)$\n\nC. $F_1 = \\overline{A}(B+C)$; $F_2 = (A+B)\\overline{C}$\n\nD. $F_1 = (A\\cdot B) + \\overline{C}$; $F_2 = \\overline{A} + (B\\cdot C)$\n\nE. $F_1 = \\overline{(A+B)} + C$; $F_2 = A + \\overline{(B+C)}$", "solution": "A 2-input NOR gate with inputs $X$ and $Y$ outputs $\\overline{X+Y}$. We use this to derive each configuration.\n\nFor Configuration 1, the first NOR takes $A$ and $B$, producing\n$$\nG_{1}=\\overline{A+B}.\n$$\nThe second NOR takes $G_{1}$ and $C$, giving\n$$\nF_{1}=\\overline{G_{1}+C}=\\overline{\\overline{A+B}+C}.\n$$\nApplying De Morgan’s law $\\overline{X+Y}=\\overline{X}\\cdot\\overline{Y}$ with $X=\\overline{A+B}$ and $Y=C$,\n$$\nF_{1}=\\overline{\\overline{A+B}}\\cdot\\overline{C}=(A+B)\\overline{C}.\n$$\n\nFor Configuration 2, the first NOR takes $B$ and $C$, producing\n$$\nH_{1}=\\overline{B+C}.\n$$\nThe second NOR takes $H_{1}$ and $A$, giving\n$$\nF_{2}=\\overline{H_{1}+A}=\\overline{\\overline{B+C}+A}.\n$$\nApplying De Morgan’s law as before with $X=\\overline{B+C}$ and $Y=A$,\n$$\nF_{2}=\\overline{\\overline{B+C}}\\cdot\\overline{A}=(B+C)\\overline{A}=\\overline{A}(B+C).\n$$\n\nThus the pair is $F_{1}=(A+B)\\overline{C}$ and $F_{2}=\\overline{A}(B+C)$, which corresponds to option B.", "answer": "$$\\boxed{B}$$", "id": "1909680"}]}