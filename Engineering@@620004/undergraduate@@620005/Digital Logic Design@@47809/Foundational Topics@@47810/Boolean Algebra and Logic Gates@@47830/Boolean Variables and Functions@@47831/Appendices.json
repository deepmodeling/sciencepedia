{"hands_on_practices": [{"introduction": "The first step in any digital logic design process is translating a set of operational requirements into a formal Boolean expression. This exercise focuses on this crucial translation skill, using the precise language of minterms to define when a function should be active. You will also learn to identify and utilize 'don't care' conditions—inputs that are impossible or irrelevant—which provide critical flexibility for logic optimization later in the design process [@problem_id:1916466].", "problem": "A safety monitoring system for an industrial pump is being designed. The system uses three binary sensors to determine whether to trigger an emergency shutdown. The sensors are for Pressure (`P`), Temperature (`T`), and Vibration (`V`). Each sensor outputs a `0` for a normal reading and a `1` for a high/abnormal reading. The shutdown signal, `S`, is `1` if an emergency shutdown is required and `0` otherwise.\n\nThe three sensor outputs are treated as a 3-bit binary number `PTV`, where `P` is the Most Significant Bit (MSB) and `V` is the Least Significant Bit (LSB). The system's behavior is dictated by the following critical design specifications:\n\n1.  A known faulty state, corresponding to the input `(P=0, T=0, V=1)`, must always trigger a shutdown.\n2.  A normal startup transient, corresponding to the input `(P=1, T=0, V=0)`, must never trigger a shutdown.\n3.  The input combination `(P=1, T=1, V=1)` is considered physically impossible due to mechanical constraints in the pump. The system's response to this input is therefore irrelevant, and it can be treated as a \"don't care\" condition.\n4.  For all other possible input combinations not explicitly mentioned above, the system is considered to be operating in a safe state, and the shutdown signal must be `0`.\n\nYour task is to express the shutdown logic function `S(P, T, V)` in the canonical sum-of-minterms notation. The expression should explicitly list the decimal indices of the minterms for which the function `S` must be true and the decimal indices of the \"don't care\" minterms. The required format is `Σm(...) + d(...)`, where the first list contains the true minterms and the second list contains the don't care minterms.", "solution": "We treat the three sensor outputs as a 3-bit binary number $PTV$ with $P$ as the most significant bit (weight $4$), $T$ as the middle bit (weight $2$), and $V$ as the least significant bit (weight $1$). Therefore, the decimal index $i$ of each input combination $(P,T,V)$ is given by\n$$\ni = 4P + 2T + V.\n$$\nBy the design specifications:\n- The faulty state $(P,T,V)=(0,0,1)$ must trigger a shutdown, so $S=1$ at this input. Its index is $i=4\\cdot 0 + 2\\cdot 0 + 1 = 1$, so minterm $m_{1}$ is included in the sum of minterms.\n- The normal startup transient $(P,T,V)=(1,0,0)$ must never trigger a shutdown, so $S=0$ at this input. Its index is $i=4\\cdot 1 + 2\\cdot 0 + 1\\cdot 0 = 4$, so it is not included in the true minterms and is not a don't care.\n- The input $(P,T,V)=(1,1,1)$ is physically impossible, so it is a don't care. Its index is $i=4\\cdot 1 + 2\\cdot 1 + 1 = 7$, so minterm $m_{7}$ is included in the don't care set.\n- All other input combinations not mentioned are safe and must yield $S=0$, so no other minterms are included in the sum or the don't care set.\n\nEnumerating all $8$ combinations confirms that only index $1$ is a true minterm, and only index $7$ is a don't care. Therefore, the canonical sum-of-minterms form is\n$$\n\\Sigma m(1) + d(7).\n$$", "answer": "$$\\boxed{\\Sigma m(1)+d(7)}$$", "id": "1916466"}, {"introduction": "Once a Boolean function is specified, the next goal is to implement it efficiently, minimizing the cost and complexity of the physical circuit. This practice demonstrates how to systematically simplify a function from its initial sum-of-products form using the fundamental laws of Boolean algebra. Mastering this algebraic manipulation is essential for reducing the number of literals, which directly translates to a more streamlined and cost-effective hardware implementation [@problem_id:1916447].", "problem": "A safety monitoring system for a small-scale autonomous drone's Central Processing Unit (CPU) uses three binary sensors to determine if a \"Return to Home\" (RTH) command is required. The sensors are:\n- Sensor $A$: Detects altitude. $A=1$ if altitude is too high, $A=0$ otherwise.\n- Sensor $B$: Detects battery level. $B=1$ if the battery is critically low, $B=0$ otherwise.\n- Sensor $C$: Detects proximity to an obstacle. $C=1$ if an obstacle is too close, $C=0$ otherwise.\n\nThe RTH command, represented by a a Boolean function $F$, is activated ($F=1$) if and only if any one of the following four specific combinations of sensor readings occurs:\n1. Altitude is not too high, battery is not critically low, and an obstacle is too close.\n2. Altitude is not too high, battery is critically low, and an obstacle is too close.\n3. Altitude is too high, battery is not critically low, and no obstacle is too close.\n4. Altitude is too high, battery is not critically low, and an obstacle is too close.\n\nTo implement the logic for the RTH command efficiently, engineers must derive the corresponding Boolean expression for $F$ in terms of $A$, $B$, and $C$ that has the absolute minimum number of literals. A literal is defined as a variable or its complement (e.g., $A$ or $\\overline{A}$). Assume the simplified expression is required to be in a sum-of-products form. Determine this minimum number of literals.", "solution": "Define $F(A,B,C)$ to be $1$ exactly for the four specified combinations:\n1) $A=0$, $B=0$, $C=1$ gives the minterm $\\overline{A}\\,\\overline{B}\\,C$.\n2) $A=0$, $B=1$, $C=1$ gives the minterm $\\overline{A}\\,B\\,C$.\n3) $A=1$, $B=0$, $C=0$ gives the minterm $A\\,\\overline{B}\\,\\overline{C}$.\n4) $A=1$, $B=0$, $C=1$ gives the minterm $A\\,\\overline{B}\\,C$.\n\nThus the canonical sum-of-products form is\n$$\nF=\\overline{A}\\,\\overline{B}\\,C+\\overline{A}\\,B\\,C+A\\,\\overline{B}\\,\\overline{C}+A\\,\\overline{B}\\,C.\n$$\n\nApply Boolean algebra to simplify. First factor the first two terms:\n$$\n\\overline{A}\\,\\overline{B}\\,C+\\overline{A}\\,B\\,C=\\overline{A}\\,C\\,(\\overline{B}+B)=\\overline{A}\\,C,\n$$\nusing the complementarity law $\\overline{B}+B=1$ and identity $X\\cdot 1=X$.\n\nNext factor the last two terms:\n$$\nA\\,\\overline{B}\\,\\overline{C}+A\\,\\overline{B}\\,C=A\\,\\overline{B}\\,(\\overline{C}+C)=A\\,\\overline{B},\n$$\nagain by complementarity $\\overline{C}+C=1$.\n\nTherefore\n$$\nF=\\overline{A}\\,C+A\\,\\overline{B}.\n$$\n\nThis is a sum-of-products with two product terms, each containing two literals. Hence the total number of literals is $2+2=4$.\n\nTo argue minimality: any single product term with one literal would cover four minterms and cannot match the specified on-set; any single product term with two literals would cover two minterms and thus cannot cover all four required minterms; and any single product term with three literals would cover only one minterm. Therefore at least two product terms are required. The expression $F=\\overline{A}\\,C+A\\,\\overline{B}$ achieves this with two literals per term, so the absolute minimum number of literals in an SOP realization is $4$.", "answer": "$$\\boxed{4}$$", "id": "1916447"}, {"introduction": "While the sum-of-products ($SOP$) form is common, digital circuits can also be efficiently realized using a product-of-sums ($POS$) structure. This exercise challenges you to transform a given expression into its minimal $POS$ form through algebraic factoring, highlighting the powerful distributive property of Boolean algebra. This skill is vital for design flexibility, as it allows engineers to choose the most suitable logic structure based on available hardware or performance constraints [@problem_id:1916434].", "problem": "In designing a fault detection system for a data center, the logic for a critical alert flag `F` is determined by four sensor inputs: `w`, `x`, `y`, and `z`. These inputs are Boolean variables, where a value of 1 signifies an anomalous condition and 0 signifies normal operation. The initial design specifies that the alert `F` should be triggered (i.e., `F=1`) according to the following logic function, which is expressed in a sum-of-products (SOP) form:\n\n$$F(w, x, y, z) = wx + wy + zx + zy$$\n\nFor implementation purposes, it is more efficient to realize this function in a minimal product-of-sums (POS) form. Using only the laws of Boolean algebra, determine the equivalent minimal POS expression for the function `F`.", "solution": "We start from the given sum-of-products form:\n$$F(w,x,y,z)=wx+wy+zx+zy.$$\nApply the distributive law $AB+AC=A(B+C)$ to factor $w$ from the first two terms and $z$ from the last two terms:\n$$wx+wy=w(x+y),\\quad zx+zy=z(x+y).$$\nThus,\n$$F=w(x+y)+z(x+y).$$\nAgain use the distributive law in the form $A B + A C = A(B+C)$, this time with the common factor $(x+y)$:\n$$(x+y)w+(x+y)z=(x+y)(w+z).$$\nBy commutativity of multiplication,\n$$F=(w+z)(x+y).$$\nThis is a product-of-sums form with two clauses, each containing two literals. No absorption of literals is possible because the two sum terms share no common literal, so no further reduction by the absorption identity $(A+B)(A+C)=A+BC$ can apply. Therefore, $(w+z)(x+y)$ is the minimal POS realization.", "answer": "$$\\boxed{(w+z)(x+y)}$$", "id": "1916434"}]}