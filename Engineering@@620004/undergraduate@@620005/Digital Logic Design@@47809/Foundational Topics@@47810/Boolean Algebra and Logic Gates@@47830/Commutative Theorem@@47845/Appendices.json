{"hands_on_practices": [{"introduction": "The commutative theorem is a foundational principle in Boolean algebra, stating that the order of operands does not affect the outcome for AND and OR operations, just as $3+5 = 5+3$. This first exercise provides a direct opportunity to apply this theorem to prove the logical equivalence of two expressions. Mastering this skill is essential for simplifying and verifying digital logic designs, ensuring that different-looking circuits can produce identical results [@problem_id:1923754].", "problem": "In a digital systems design course, students are tasked with analyzing two different logic expressions proposed for a safety monitoring system. The system has three binary inputs: $A$, $B$, and $C$. Two proposed functions, $F_1$ and $F_2$, are meant to generate the final output signal. The expressions for these functions are as follows:\n\n-   $F_1 = (A + B) \\cdot C$\n-   $F_2 = C \\cdot (B + A)$\n\nHere, the `+` symbol represents the logical OR operation, and the `·` symbol represents the logical AND operation. Your task is to determine the logical relationship between the functions $F_1$ and $F_2$ by applying the fundamental axioms of Boolean algebra.\n\nWhich of the following statements correctly describes the relationship between $F_1$ and $F_2$?\n\nA. $F_1$ and $F_2$ are not logically equivalent.\n\nB. $F_1$ and $F_2$ are logical inverses of each other.\n\nC. The logical relationship between $F_1$ and $F_2$ cannot be determined without a truth table.\n\nD. $F_1$ and $F_2$ are logically equivalent.", "solution": "We use the fundamental axioms of Boolean algebra, specifically the commutative law of OR and the commutative law of AND.\n\nStart with $F_{1}$:\n$$F_{1}=(A+B)\\cdot C.$$\nBy the commutative law of OR, $A+B=B+A$, hence\n$$F_{1}=(B+A)\\cdot C.$$\nBy the commutative law of AND, $X\\cdot Y=Y\\cdot X$ for any $X,Y$, so with $X=(B+A)$ and $Y=C$,\n$$(B+A)\\cdot C=C\\cdot (B+A).$$\nBut $C\\cdot (B+A)$ is exactly $F_{2}$. Therefore,\n$$F_{1}=F_{2},$$\nso the two expressions are logically equivalent. The correct choice is D.", "answer": "$$\\boxed{D}$$", "id": "1923754"}, {"introduction": "Building on the algebraic foundations, we now explore how commutativity applies to the physical building blocks of digital systems: logic gates. This practice challenges you to analyze a multi-level circuit composed of various gates, some standard and some custom-defined. Your task is to identify which gates function commutatively, meaning their inputs can be swapped without changing the output, thereby connecting the abstract algebraic property to its concrete implementation in hardware [@problem_id:1923766].", "problem": "In the design of a digital signal processing unit, a combinational logic circuit is specified by the following description. The circuit has four primary inputs, labeled A, B, C, and D, and produces a single final output, F. The circuit is constructed from four interconnected 2-input logic gates, labeled G1, G2, G3, and G4.\n\nThe interconnections are as follows:\n-   **Gate G1** is a standard AND gate. Its two inputs are connected to the primary inputs A and B.\n-   **Gate G2** is a standard Exclusive-OR (XOR) gate. Its two inputs are connected to the primary inputs C and D.\n-   **Gate G3** is a custom-defined \"asymmetric implication\" gate. Its inputs are designated as a 'primary' input P and a 'secondary' input S. The gate's output is defined by the Boolean expression $P' + S$, where $P'$ denotes the logical NOT of P. The primary input P of G3 is connected to the output of G1, and the secondary input S of G3 is connected to the output of G2.\n-   **Gate G4** is a standard OR gate. Its two inputs are connected to the output of G3 and the primary input D.\n\nThe final output of the entire circuit, F, is the output of gate G4.\n\nThe task is to identify for which of the gates (G1, G2, G3, G4), swapping its two direct input connections would have no effect on the final output function F of the circuit. Consider each gate individually for this analysis.\n\nSelect the option that correctly lists all such gates.\n\nA. G1 only\n\nB. G3 and G4 only\n\nC. G1 and G2 only\n\nD. G1, G2, and G4\n\nE. All gates (G1, G2, G3, and G4)", "solution": "Define the intermediate signals gate by gate using standard Boolean algebra:\n- Gate G1 (AND): $X_{1} = AB$.\n- Gate G2 (XOR): $X_{2} = C \\oplus D$.\n- Gate G3 (asymmetric implication): with primary $P = X_{1}$ and secondary $S = X_{2}$, output $Y = P' + S = (AB)' + (C \\oplus D)$.\n- Gate G4 (OR): $F = Y + D = (AB)' + (C \\oplus D) + D$.\n\nSimplify $F$ using Boolean identities. Use De Morgan’s law $(AB)' = A' + B'$ and the absorption of XOR into OR: $(X \\oplus Y) + Y = X + Y$. Then\n$$\nF = (AB)' + (C \\oplus D) + D = (A' + B') + (C \\oplus D) + D = A' + B' + C + D.\n$$\n\nNow analyze input swapping gate by gate, each considered individually, and determine whether $F$ changes.\n\n1) Gate G1: AND is commutative, so swapping $A$ and $B$ leaves $X_{1} = AB$ unchanged, hence $Y$ and $F$ remain unchanged. Therefore, swapping G1 has no effect.\n\n2) Gate G2: XOR is commutative, so swapping $C$ and $D$ leaves $X_{2} = C \\oplus D$ unchanged, and thus $Y$ and $F$ remain unchanged. Therefore, swapping G2 has no effect.\n\n3) Gate G3: This gate is not symmetric in its inputs because $Y = P' + S$. Swapping its inputs makes $P = X_{2}$ and $S = X_{1}$, so its output becomes\n$$\nY_{\\text{swap}} = (X_{2})' + X_{1} = (C \\oplus D)' + AB.\n$$\nThen the final output would be\n$$\nF_{\\text{swap}} = Y_{\\text{swap}} + D = (C \\oplus D)' + AB + D.\n$$\nSimplify using $(X \\oplus Y)' = XY + X'Y'$ and absorption:\n$$\nF_{\\text{swap}} = (CD + C'D') + AB + D = D + C'D' + AB = C' + D + AB.\n$$\nCompare this with the original $F = A' + B' + C + D$. These are not identically equal; for example, with $A = 1$, $B = 1$, $C = 0$, $D = 0$, the original $F = 0$ while $F_{\\text{swap}} = 1$. Therefore, swapping G3 changes the function.\n\n4) Gate G4: OR is commutative, so swapping its two inputs $Y$ and $D$ does not change $F = Y + D$. Therefore, swapping G4 has no effect.\n\nCollecting the results, swapping inputs has no effect for G1, G2, and G4 only. This corresponds to option D.", "answer": "$$\\boxed{D}$$", "id": "1923766"}, {"introduction": "To truly master a concept, one must also understand its limitations and counterexamples. This final practice moves beyond simple gates to a system-level component—a \"Resource Arbiter\"—whose function is deliberately non-commutative. By analyzing this priority-based system, you will discover why input order can be a critical design feature in digital logic and how non-commutativity is essential for creating hierarchical systems like priority encoders [@problem_id:1923741].", "problem": "In a simplified model of a multi-core processor, a \"Resource Arbiter\" is a digital logic circuit designed to manage access to a single shared memory bus. The arbiter has four input lines, denoted $R_3, R_2, R_1, R_0$, where an input $R_i$ being at logic '1' signifies a request for the memory bus from its corresponding processor core $C_i$.\n\nThe arbiter's operational logic is fixed and unambiguous: if one or more requests are active, it grants access to the requesting core that has the highest index $i$. The arbiter's primary output is a 2-bit binary number, $Y_1Y_0$, which represents the index of the core that has been granted access. For instance, if cores $C_2$ and $C_1$ both make a request (i.e., $R_2=1$ and $R_1=1$, while $R_3=0$ and $R_0=0$), the arbiter will grant access to $C_2$ because $2 > 1$, and its output will be $Y_1Y_0 = 10$. If no cores make a request, the arbiter's output is $00$.\n\nTo formally analyze the arbiter's logic, we can define a conceptual binary relation called \"precedence,\" denoted by the symbol $\\succ$. We say that \"request $R_i$ has precedence over request $R_j$,\" written as $R_i \\succ R_j$, if and only if, for a scenario where solely inputs $R_i$ and $R_j$ are active, the arbiter grants access to core $C_i$.\n\nBased on this definition and the specified behavior of the Resource Arbiter, which of the following statements provides the most accurate characterization of the arbiter's fundamental operational principle?\n\nA. The precedence relation $\\succ$ is commutative (i.e., for any $i \\neq j$, if $R_i \\succ R_j$ is true, then $R_j \\succ R_i$ must also be true), indicating that the arbiter's logic treats all its inputs symmetrically.\n\nB. The precedence relation $\\succ$ is non-commutative (i.e., for any $i \\neq j$, $R_i \\succ R_j$ does not imply $R_j \\succ R_i$), which is the defining characteristic of a fixed-priority system where inputs are ordered hierarchically.\n\nC. The arbiter's operation is commutative because the final output depends only on the set of active inputs, not on the temporal order in which the requests were made.\n\nD. The precedence relation $\\succ$ is associative. For instance, $(R_3 \\succ R_2) \\succ R_1$ is equivalent to $R_3 \\succ (R_2 \\succ R_1)$, meaning the arbiter can consistently handle conflicts among three or more inputs.\n\nE. The concept of a binary precedence relation $\\succ$ is not applicable to this arbiter, as the circuit is designed to handle up to four simultaneous inputs, not just pairs.", "solution": "The arbiter implements a fixed-priority selection: among all active requests, it grants access to the one with the largest index. Formally, for any distinct indices $i$ and $j$, under the scenario where only $R_{i}$ and $R_{j}$ are active, the arbiter grants to $C_{i}$ if and only if $i>j$. By the definition of the precedence relation,\n$$\nR_{i} \\succ R_{j} \\;\\;\\Longleftrightarrow\\;\\; i>j.\n$$\nFrom this characterization, we analyze the properties:\n\n1. Non-commutativity: For $i \\neq j$, if $i>j$ then $R_{i} \\succ R_{j}$ is true while $R_{j} \\succ R_{i}$ is false. Therefore,\n$$\nR_{i} \\succ R_{j} \\;\\not\\Rightarrow\\; R_{j} \\succ R_{i},\n$$\nso the relation is not commutative. This is precisely the hallmark of a fixed-priority system with a hierarchical order on inputs.\n\n2. Option A is false because commutativity would require $R_{i} \\succ R_{j}$ to imply $R_{j} \\succ R_{i}$ for $i \\neq j$, which contradicts $i>j$ implying $j>i$.\n\n3. Option C confuses independence from temporal order with commutativity of a binary relation. While the output depends only on the set of active inputs (a property of the combinational logic), this does not make the precedence relation commutative.\n\n4. Option D is invalid as written because $\\succ$ is a binary relation yielding a truth value, not a binary operation on requests that returns another request. Expressions like $(R_{3} \\succ R_{2}) \\succ R_{1}$ are ill-typed and not meaningful in this context. The correct structural property here is that $\\succ$ corresponds to a strict total order (irreflexive, transitive, and trichotomous), not associativity.\n\n5. Option E is false because a binary precedence relation is perfectly applicable: the arbiter’s behavior over multiple simultaneous inputs is determined by the total order induced by indices, and pairwise precedence $i>j$ extends naturally to selecting the maximum index over any finite active set.\n\nTherefore, the most accurate characterization is that the precedence relation is non-commutative, capturing the fixed-priority hierarchy.", "answer": "$$\\boxed{B}$$", "id": "1923741"}]}