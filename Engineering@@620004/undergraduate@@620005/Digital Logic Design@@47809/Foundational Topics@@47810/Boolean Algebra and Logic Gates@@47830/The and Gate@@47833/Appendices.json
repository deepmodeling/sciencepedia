{"hands_on_practices": [{"introduction": "Digital systems are rarely built from a single gate; they are complex structures composed of many smaller, standardized components. This first practice challenges you to think like a circuit designer, constructing a 4-input AND function using only 2-input AND gates [@problem_id:1966756]. More importantly, it introduces the critical concept of propagation delay ($\\tau$), forcing you to consider not just *if* the circuit works, but *how fast* it works, highlighting how different structural arrangements can lead to significant differences in performance.", "problem": "A digital systems engineer is designing a small control unit for an embedded system. A specific part of the logic requires a 4-input AND function, which computes the expression $Y = A \\cdot B \\cdot C \\cdot D$, where the variables represent the four input signals and the $\\cdot$ symbol denotes the logical AND operation.\n\nDue to manufacturing constraints, the engineer's component library is limited to standard 2-input AND gates. Each of these 2-input gates has an identical, non-zero propagation delay, denoted by $\\tau$. The propagation delay is the time it takes for a change in an input signal to result in a stable and correct change at the gate's output. The time delay of the wires connecting the gates is negligible.\n\nThe engineer must design the 4-input AND function by interconnecting these 2-input gates. The design must be optimal in two respects: it must use the absolute minimum number of 2-input gates, and among all configurations that use this minimum number of gates, it must be arranged to have the lowest possible worst-case propagation delay. The worst-case propagation delay is the longest time it takes for a signal change at any of the primary inputs ($A, B, C,$ or $D$) to propagate to the final output $Y$.\n\nWhich of the following options correctly states the minimum number of 2-input gates required and the minimum achievable worst-case propagation delay for the circuit?\n\nA. 3 gates, $2\\tau$\n\nB. 3 gates, $3\\tau$\n\nC. 4 gates, $2\\tau$\n\nD. 4 gates, $4\\tau$\n\nE. 2 gates, $2\\tau$", "solution": "We must implement the 4-input AND $Y = A \\cdot B \\cdot C \\cdot D$ using only 2-input AND gates, each with identical propagation delay $\\tau$, and wire delays are negligible. The design must minimize the number of gates, and among those, minimize the worst-case propagation delay.\n\nFirst, we derive the minimum number of 2-input gates required. A 2-input AND gate combines two signals into one. Starting from the four independent inputs $\\{A,B,C,D\\}$, each gate can reduce the count of separate signals by at most one. If $g$ gates are used, the minimum possible number of remaining signals is $4 - g$. To obtain a single output, we require\n$$\n4 - g = 1 \\quad \\Rightarrow \\quad g = 3.\n$$\nEquivalently, implementing an $n$-input AND with only 2-input gates realizes a binary tree with $n$ leaves, which requires $n - 1$ internal nodes (gates). For $n=4$, this gives $4 - 1 = 3$ gates. Hence, $3$ gates is a tight lower bound and is achievable.\n\nNext, we minimize the worst-case propagation delay. With per-gate delay $\\tau$ and negligible wire delay, the total delay along a path equals the number of gate stages on that path times $\\tau$. A lower bound on the number of stages from any input to the output is given by the minimum depth of a binary tree with $4$ leaves, which is\n$$\n\\left\\lceil \\log_{2}(4) \\right\\rceil = 2.\n$$\nThus, the minimum possible worst-case depth is $2$ stages, implying a lower bound of $2\\tau$ on the worst-case propagation delay.\n\nThis lower bound is achievable with a balanced structure:\n- First stage: compute $X_{1} = A \\cdot B$ and $X_{2} = C \\cdot D$ using two 2-input AND gates.\n- Second stage: compute $Y = X_{1} \\cdot X_{2}$ with a third 2-input AND gate.\n\nEach primary input passes through exactly two gate stages, so the worst-case propagation delay is\n$$\n2\\tau.\n$$\nAny unbalanced configuration using the same $3$ gates (for example, $(((A \\cdot B) \\cdot C) \\cdot D)$) would have a longest path of $3$ stages and hence a worse delay of $3\\tau$, so the balanced configuration is optimal among all 3-gate designs.\n\nTherefore, the correct option is $3$ gates and $2\\tau$.", "answer": "$$\\boxed{A}$$", "id": "1966756"}, {"introduction": "Moving from abstract logic to physical implementation, we explore a crucial real-world constraint: power consumption. This exercise models the power usage of an AND gate by separating it into static ($P_{static}$) and dynamic ($P_{dyn}$) components, linking the gate's switching activity to the energy it dissipates [@problem_id:1966743]. Developing such a model is a fundamental skill for engineers designing everything from low-power mobile devices to high-performance computing systems, as it provides a way to estimate and manage a circuitâ€™s energy footprint.", "problem": "A single 3-input AND gate, fabricated using Complementary Metal-Oxide-Semiconductor (CMOS) technology, is a component in a larger digital system. The gate's three inputs, denoted A, B, and C, are driven by independent random binary signals that are synchronized to a master clock operating at a frequency $f_{clk}$. In any given clock cycle, the probabilities of these inputs being at a logic '1' state are $P(A=1) = p_A$, $P(B=1) = p_B$, and $P(C=1) = p_C$, respectively. The state of each input in a particular clock cycle is statistically independent of its state in any other cycle and also independent of the other two inputs.\n\nThe power consumption of the gate is characterized by the following model:\n1.  A constant static power, $P_{low}$, is consumed when the gate's output is at logic '0'.\n2.  A different constant static power, $P_{high}$, is consumed when the gate's output is at logic '1'.\n3.  An additional, discrete amount of dynamic energy, $E_{dyn}$, is consumed each time the gate's output transitions, either from '0' to '1' or from '1' to '0'.\n\nDerive a symbolic expression for the total average power consumption, $P_{avg}$, of this 3-input AND gate. Your final expression should be in terms of $p_A, p_B, p_C, P_{low}, P_{high}, E_{dyn}$, and $f_{clk}$.", "solution": "Let the gate output be $Y=A \\land B \\land C$. Because inputs are independent within each cycle, the probability that the output is logic '1' in any cycle is\n$$\np_{Y} = P(Y=1) = P(A=1)P(B=1)P(C=1) = p_{A} p_{B} p_{C}.\n$$\nThe average static power over time equals the static power conditioned on the output state, averaged with the state probabilities:\n$$\nP_{\\text{static,avg}} = P_{low}\\,P(Y=0) + P_{high}\\,P(Y=1) = P_{low}(1-p_{Y}) + P_{high}p_{Y} = P_{low} + (P_{high}-P_{low})\\,p_{Y}.\n$$\nDynamic energy $E_{dyn}$ is expended per output transition. Let $Y_{n}$ denote the output in cycle $n$. Since inputs are independent across cycles, $\\{Y_{n}\\}$ is an i.i.d. Bernoulli process with parameter $p_{Y}$, so $Y_{n}$ and $Y_{n-1}$ are independent and\n$$\nP_{\\text{tr}} = P(Y_{n} \\neq Y_{n-1}) = P(Y_{n}=1)P(Y_{n-1}=0) + P(Y_{n}=0)P(Y_{n-1}=1) = 2\\,p_{Y}(1-p_{Y}).\n$$\nThe expected number of transitions per second is $f_{clk}\\,P_{\\text{tr}}$, hence the average dynamic power is\n$$\nP_{\\text{dyn,avg}} = E_{dyn}\\,f_{clk}\\,P_{\\text{tr}} = 2\\,E_{dyn}\\,f_{clk}\\,p_{Y}(1-p_{Y}).\n$$\nSumming static and dynamic contributions and substituting $p_{Y} = p_{A} p_{B} p_{C}$ gives\n$$\nP_{avg} = P_{low} + (P_{high}-P_{low})\\,p_{A}p_{B}p_{C} + 2\\,E_{dyn}\\,f_{clk}\\,p_{A}p_{B}p_{C}\\left(1 - p_{A}p_{B}p_{C}\\right).\n$$", "answer": "$$\\boxed{P_{low} + \\left(P_{high}-P_{low}\\right)\\,p_{A}p_{B}p_{C} + 2\\,E_{dyn}\\,f_{clk}\\,p_{A}p_{B}p_{C}\\left(1 - p_{A}p_{B}p_{C}\\right)}$$", "id": "1966743"}, {"introduction": "A flawless design on paper is meaningless if the manufactured chip has defects. This final practice delves into the essential domain of digital circuit testing, where the goal is to ensure physical correctness [@problem_id:1966706]. You will apply the widely used \"stuck-at\" fault model to devise a minimal set of test inputs, or vectors, that can comprehensively verify the functionality of a 3-input AND gate, developing a systematic approach to detecting potential manufacturing errors.", "problem": "In the quality assurance department of an integrated circuit (IC) manufacturing facility, you are tasked with creating an efficient testing procedure for a batch of 3-input AND gates. The gate has three inputs, denoted as A, B, and C, and a single output, F. The testing must conform to the single stuck-at fault model. This model assumes that a fault in the circuit will manifest as a single line (either an input or an output terminal) being permanently \"stuck\" at a logic 0 (stuck-at-0, or SA0) or a logic 1 (stuck-at-1, or SA1).\n\nA test vector is a specific combination of logic values applied to the inputs (A, B, C). A fault is considered \"detected\" by a test vector if the output F of the faulty gate is different from the output of a fault-free gate for that same test vector. Your goal is to find the minimal test set, which is the smallest possible collection of unique test vectors required to detect every possible single SA0 and SA1 fault on all four terminals (A, B, C, and F).\n\nWhich of the following represents the minimal test set `V` required for this task? The input vectors are represented as ordered tuples `(A, B, C)`.\n\nA. `V = {(0,1,1), (1,0,1), (1,1,0), (1,1,1)}`\n\nB. `V = {(0,0,0), (1,1,1)}`\n\nC. `V = {(0,0,1), (0,1,0), (1,0,0), (1,1,1)}`\n\nD. `V = {(0,0,0), (0,0,1), (0,1,0), (0,1,1), (1,0,0), (1,0,1), (1,1,0), (1,1,1)}`\n\nE. `V = {(0,0,0), (0,1,1), (1,0,1), (1,1,0)}`", "solution": "Let the 3-input AND gate implement $F = A B C$.\n\nUnder the single stuck-at fault model, to detect a fault we must both excite it (set the faulted line to the opposite of its stuck value) and propagate its effect to the output (ensure the gate is sensitized so that the output depends on that line).\n\n- Input SA0 faults:\n  For an input, say $A$ stuck-at-0, excitation requires $A=1$. For propagation through an AND gate, the other inputs must be at the non-controlling value $1$ so the output depends on $A$. Hence the required vector is $(1,1,1)$. By symmetry, $(1,1,1)$ detects $A$ SA0, $B$ SA0, and $C$ SA0 simultaneously. For the output fault $F$ SA0, detection requires the good output to be $1$ so that the faulty output $0$ differs; the only such input is again $(1,1,1)$. Therefore $(1,1,1)$ covers all SA0 faults on $A$, $B$, $C$, and $F$.\n\n- Input SA1 faults:\n  For $A$ SA1, excitation requires $A=0$ while propagation requires the other inputs be $1$, yielding $(0,1,1)$. Similarly, $B$ SA1 is detected by $(1,0,1)$ and $C$ SA1 by $(1,1,0)$. No single vector can detect more than one input SA1 fault, because to detect (for example) $A$ SA1 the other inputs must be $1$ while $A=0$, whereas to detect $B$ SA1 in the same vector would simultaneously require $B=0$ with the others $1$, which is impossible. Hence at least three distinct vectors are required to cover the three input SA1 faults.\n\n- Output SA1 fault:\n  For $F$ SA1, the faulty output is always $1$, so any input that yields a good output $0$ will detect it. Each of $(0,1,1)$, $(1,0,1)$, and $(1,1,0)$ produces $F=0$ in the good circuit and therefore detects $F$ SA1. Thus no additional vector beyond these is needed for $F$ SA1.\n\nCombining the above, a minimal test set must contain at least the three vectors $(0,1,1)$, $(1,0,1)$, $(1,1,0)$ for the input SA1 faults and the vector $(1,1,1)$ for all SA0 faults. This yields the set $V = \\{(0,1,1), (1,0,1), (1,1,0), (1,1,1)\\}$.\n\nAmong the options, this is exactly option A. Other options either fail to detect some input SA1 faults (e.g., B, C, E) or are non-minimal (D).", "answer": "$$\\boxed{A}$$", "id": "1966706"}]}