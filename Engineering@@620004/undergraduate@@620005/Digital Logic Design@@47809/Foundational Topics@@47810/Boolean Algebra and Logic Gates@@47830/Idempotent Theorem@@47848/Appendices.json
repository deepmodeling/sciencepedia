{"hands_on_practices": [{"introduction": "This first practice grounds the Idempotent Theorem in a tangible engineering context: a safety interlock system with redundant checks. Your task is to translate these system requirements into a Boolean expression. This exercise focuses on applying the Product-of-Sums form of the idempotent law, $X \\cdot X = X$, to eliminate a duplicated logical check and arrive at the most efficient circuit design. [@problem_id:1942100]", "problem": "A safety interlock system for an industrial press is governed by three logic inputs: $A$, $B$, and $C$. The press, represented by the output function $F$, will operate (output is logic 1) only if a specific sequence of conditions is satisfied. The design specification dictates that for the press to operate, input $C$ must be active (logic 1), AND a primary safety check must pass. This primary safety check is defined as: 'input $A$ is active (logic 1) OR input $B$ is inactive (logic 0)'. Due to a design redundancy requirement, this primary safety check is performed by two independent, identical circuits, and both must pass. Formulate the Boolean expression for the output function $F$ based on this description. Then, simplify this expression to its most minimal Product-of-Sums (POS) form.", "solution": "Let logical OR be denoted by $+$, logical AND by $\\cdot$, and logical NOT by an overbar.\n\nThe primary safety check described as “$A$ is active OR $B$ is inactive” is the Boolean sum\n$$S = A + \\overline{B}.$$\nBecause of redundancy, this check is implemented by two identical, independent circuits and both must pass, which corresponds to the logical product $S \\cdot S$. The press also requires $C$ to be active, so the overall output function is\n$$F = C \\cdot S \\cdot S = C \\cdot (A + \\overline{B}) \\cdot (A + \\overline{B}).$$\nApply the idempotent law of Boolean algebra, $X \\cdot X = X$, to simplify:\n$$F = C \\cdot (A + \\overline{B}).$$\nTo express this in Product-of-Sums (POS) form, write it as an AND of sum terms. The expression already is a product of sums, with sum terms $(C)$ and $(A + \\overline{B})$, so the minimal POS form is\n$$(C)\\cdot(A+\\overline{B}).$$\nThis is minimal because removing either factor changes the function’s behavior.", "answer": "$$\\boxed{(C)\\cdot(A+\\overline{B})}$$", "id": "1942100"}, {"introduction": "Building on the previous concept, this problem explores the dual form of the Idempotent Theorem within a Sum-of-Products expression. You are presented with a hypothetical control system where multiple conditions for an action overlap, leading to redundancy. This practice will sharpen your skills in first expanding an expression and then using the law $X + X = X$ to simplify it, a common sequence in logic optimization. [@problem_id:1942114]", "problem": "A control system for an automated greenhouse manages an irrigation valve based on inputs from four sensors. The output signal, denoted by the Boolean function $F$, is 1 (ON) when the valve should open and 0 (OFF) when it should remain closed. The valve is designed to open if any of the following distinct logical conditions are met:\n\n1.  Sensor A (monitoring soil moisture) is LOW (logic 0), AND Sensor B (monitoring light level) is HIGH (logic 1).\n2.  Sensor A is LOW (logic 0), AND (Sensor B is HIGH (logic 1) OR Sensor C, a humidity sensor, is HIGH (logic 1)).\n3.  Sensor D, a manual override switch, is ON (logic 1).\n\nThe Boolean variables A, B, C, and D represent the state of the sensors. A variable is 1 if the corresponding condition (e.g., light level HIGH, switch ON) is true, and 0 otherwise. Note that for sensor A, the condition for irrigation is that it is LOW, so you will need to use its complement, $\\overline{A}$, in your expression.\n\nWhich of the following represents the most simplified Boolean expression for the control signal $F$?\n\nA. $\\overline{A} \\cdot B + \\overline{A} \\cdot C$\n\nB. $\\overline{A} \\cdot B + \\overline{A} \\cdot C + D$\n\nC. $\\overline{A} \\cdot B + \\overline{A} \\cdot B + \\overline{A} \\cdot C + D$\n\nD. $2(\\overline{A} \\cdot B) + \\overline{A} \\cdot C + D$\n\nE. $\\overline{A} \\cdot B + C + D$", "solution": "Define Boolean variables $A$, $B$, $C$, and $D$ representing the sensor states, with $\\overline{A}$ denoting that sensor $A$ is LOW. The control signal turns on if any of the listed conditions is true, so the function $F$ is the logical OR (sum) of the corresponding terms.\n\nTranslate each condition into a Boolean term using AND as $\\cdot$ and OR as $+$:\n- Condition 1: $A$ LOW and $B$ HIGH gives $\\overline{A} \\cdot B$.\n- Condition 2: $A$ LOW and $(B$ HIGH or $C$ HIGH$)$ gives $\\overline{A} \\cdot (B + C)$.\n- Condition 3: $D$ ON gives $D$.\n\nThus,\n$$\nF \\;=\\; \\overline{A} \\cdot B \\;+\\; \\overline{A} \\cdot (B + C) \\;+\\; D.\n$$\n\nUse the distributive law to expand $\\overline{A} \\cdot (B + C)$:\n$$\n\\overline{A} \\cdot (B + C) \\;=\\; \\overline{A} \\cdot B \\;+\\; \\overline{A} \\cdot C.\n$$\nSubstitute into $F$:\n$$\nF \\;=\\; \\overline{A} \\cdot B \\;+\\; \\left(\\overline{A} \\cdot B \\;+\\; \\overline{A} \\cdot C\\right) \\;+\\; D.\n$$\n\nApply associativity and the idempotent law $X + X = X$ with $X = \\overline{A} \\cdot B$:\n$$\nF \\;=\\; \\overline{A} \\cdot B \\;+\\; \\overline{A} \\cdot C \\;+\\; D.\n$$\n\nThis is already in simplified sum-of-products form. Comparing with the options, this matches option B. Options A and C either omit $D$ or include a redundant duplicate term; option D is invalid due to the coefficient $2$ in Boolean algebra; option E incorrectly makes $C$ alone sufficient irrespective of $A$.", "answer": "$$\\boxed{B}$$", "id": "1942114"}, {"introduction": "Having practiced simplification, it is time to see why it matters in the real world. This final exercise connects abstract Boolean algebra directly to physical hardware implementation by quantifying the benefits of optimization. By simplifying an expression using the idempotent law and then calculating the reduction in total gate inputs, you will gain a concrete understanding of how simplification leads to smaller, faster, and more cost-effective digital circuits. [@problem_id:1942131]", "problem": "A digital systems engineer is tasked with optimizing a legacy logic circuit. The circuit was originally designed to implement the Boolean function $F(A, B, C, D)$ based on a direct, un-simplified hardware-level description. This initial implementation constructs a separate, independent sub-circuit for every operation as written in the expression, without reusing any intermediate signals. All gates used in both the original and optimized circuits are standard 2-input AND gates and 2-input OR gates.\n\nThe function is given by the expression:\n$$F = ((A \\cdot B) + C) + D + ((A \\cdot B) + C)$$\n\nYour task is to simplify this Boolean expression using the laws of Boolean algebra and then calculate the reduction in the total number of gate inputs required for the circuit. The \"total number of gate inputs\" is defined as the sum of inputs over all gates in the circuit. For example, a circuit with one 2-input AND gate and one 2-input OR gate has a total of 4 gate inputs.\n\nCalculate the difference between the total number of gate inputs in the original, un-simplified implementation and the total number of gate inputs in the final, fully simplified implementation.", "solution": "We start with the Boolean expression\n$$F = ((A \\cdot B) + C) + D + ((A \\cdot B) + C).$$\nLet $X = (A \\cdot B) + C$. Then\n$$F = X + D + X.$$\nUsing commutativity and associativity of $+$, we write\n$$F = (X + X) + D.$$\nBy the idempotent law $X + X = X$, we obtain\n$$F = X + D.$$\nSubstituting back $X = (A \\cdot B) + C$ and using associativity of $+$,\n$$F = (A \\cdot B) + C + D.$$\n\nNext, we count the total number of gate inputs.\n\nOriginal, un-simplified implementation as written:\n- Two independent $(A \\cdot B)$ operations: $2$ AND gates, contributing $2 + 2 = 4$ inputs.\n- Two independent $((A \\cdot B) + C)$ operations: $2$ OR gates, contributing $2 + 2 = 4$ inputs.\n- Top-level combination of three terms via two 2-input OR operations: $2$ OR gates, contributing $2 + 2 = 4$ inputs.\nThus, the original implementation uses $2$ AND gates and $4$ OR gates, i.e., $6$ gates total, giving\n$$\\text{original total inputs} = 2 \\times 6 = 12.$$\n\nFully simplified implementation $F = (A \\cdot B) + C + D$:\n- One $(A \\cdot B)$ operation: $1$ AND gate, contributing $2$ inputs.\n- OR of three signals $(A \\cdot B)$, $C$, and $D$ via two 2-input OR gates: contributing $2 + 2 = 4$ inputs.\nThus, the simplified circuit uses $1$ AND gate and $2$ OR gates, i.e., $3$ gates total, giving\n$$\\text{simplified total inputs} = 2 \\times 3 = 6.$$\n\nTherefore, the reduction in total gate inputs is\n$$12 - 6 = 6.$$", "answer": "$$\\boxed{6}$$", "id": "1942131"}]}