{"hands_on_practices": [{"introduction": "Understanding a logic gate's behavior goes beyond its static truth table; we must also analyze its response to time-varying signals. This practice challenges you to apply the fundamental NAND logic rule—that the output is LOW only when all inputs are HIGH—to dynamic input waveforms. Mastering this skill is crucial for predicting and debugging the behavior of real-world digital systems where signals are constantly changing. [@problem_id:1969388]", "problem": "In a digital monitoring system, a 2-input NAND gate is used to generate an alert signal, F, based on the states of two sensor inputs, A and B. The logic levels of these inputs (0 for low, 1 for high) change over time. The behavior of the inputs over the time interval from $t=0$ nanoseconds (ns) to $t=100$ ns is described as follows:\n\n- Signal A is initially at logic 0. It transitions to logic 1 at $t=20$ ns and transitions back to logic 0 at $t=80$ ns.\n- Signal B is initially at logic 0. It transitions to logic 1 at $t=40$ ns and transitions back to logic 0 at $t=60$ ns.\n\nAssuming the gate is ideal and has no propagation delay, which of the following statements correctly describes the output signal F over the interval from $t=0$ ns to $t=100$ ns?\n\nA. The signal F is initially at logic 0. It transitions to logic 1 at $t=40$ ns and transitions back to logic 0 at $t=60$ ns.\n\nB. The signal F is initially at logic 0. It transitions to logic 1 at $t=20$ ns and transitions back to logic 0 at $t=80$ ns.\n\nC. The signal F is initially at logic 0. It transitions to logic 1 at $t=20$ ns, to logic 0 at $t=40$ ns, to logic 1 at $t=60$ ns, and back to logic 0 at $t=80$ ns.\n\nD. The signal F is initially at logic 1. It transitions to logic 0 at $t=40$ ns and transitions back to logic 1 at $t=60$ ns.\n\nE. The signal F is initially at logic 1. It transitions to logic 0 at $t=20$ ns and transitions back to logic 1 at $t=80$ ns.", "solution": "A 2-input NAND gate outputs the logical negation of the AND of its inputs. Therefore, for time-dependent signals $A(t)$ and $B(t)$, the output is\n$$\nF(t)=\\overline{A(t)\\cdot B(t)}.\n$$\nFrom the description:\n- $A(t)=0$ for $0\\leq t<20$, $A(t)=1$ for $20\\leq t<80$, and $A(t)=0$ for $80\\leq t\\leq 100$.\n- $B(t)=0$ for $0\\leq t<40$, $B(t)=1$ for $40\\leq t<60$, and $B(t)=0$ for $60\\leq t\\leq 100$.\nThe product $A(t)\\cdot B(t)$ equals $1$ precisely when both inputs are $1$, which occurs on the overlap of the intervals where $A=1$ and $B=1$. The overlap is from $t=40$ to $t=60$. Hence,\n- $A(t)\\cdot B(t)=1$ for $40\\leq t<60$,\n- $A(t)\\cdot B(t)=0$ otherwise.\nBy the NAND relation, this yields\n$$\nF(t)=0\\ \\text{for }40\\leq t<60,\\quad F(t)=1\\ \\text{otherwise}.\n$$\nEvaluating key transition instants:\n- At $t=0$, $A=0$, $B=0$, so $F=1$.\n- At $t=20$, $A$ rises to $1$ but $B=0$, so $F$ remains $1$.\n- At $t=40$, $B$ rises to $1$ while $A=1$, so $F$ transitions to $0$.\n- At $t=60$, $B$ falls to $0$ (with $A=1$ until $t=80$), so $F$ transitions back to $1$.\n- At $t=80$, $A$ falls to $0$, but $B=0$, so $F$ remains $1$.\nThus the correct description is that $F$ is initially at logic $1$, transitions to logic $0$ at $t=40$, and back to logic $1$ at $t=60$, which matches option D.", "answer": "$$\\boxed{D}$$", "id": "1969388"}, {"introduction": "The NAND gate's true power lies in its 'universality'—the ability to construct any other logic function. This exercise demonstrates this principle by asking you to build a common sum-of-products function, $F = WX + YZ$, using only 2-input NAND gates. This type of synthesis is a cornerstone of efficient digital design, allowing complex circuits to be built from a single, standardized component. [@problem_id:1969370]", "problem": "A digital controller for an industrial process receives four binary input signals: $W$, $X$, $Y$, and $Z$. The controller must output a high signal, $F$, to trigger a specific action if either of the following two conditions is met: (1) signals $W$ and $X$ are both high, or (2) signals $Y$ and $Z$ are both high. Due to design constraints, the entire logic circuit for $F$ must be constructed exclusively using 2-input NAND gates. You are tasked with designing the most gate-efficient implementation. Determine the minimum total number of 2-input NAND gates required to realize the function $F$.", "solution": "We require $F$ to be high exactly when either $(W \\land X)$ is high or $(Y \\land Z)$ is high. In Boolean algebra this is\n$$\nF = WX + YZ.\n$$\nWe must realize $F$ using only 2-input NAND gates. Use De Morgan’s law for the OR of two terms:\n$$\nA + B = \\overline{\\overline{A} \\cdot \\overline{B}}.\n$$\nApplying the law of double negation, $\\overline{\\overline{X}} = X$, we can express $F$ as\n$$\nF = \\overline{\\overline{WX+YZ}} = \\overline{(\\overline{WX}) \\cdot (\\overline{YZ})}.\n$$\nThis final expression corresponds to a two-level NAND gate circuit:\n- One NAND gate computes $\\overline{WX}$ from inputs $W$ and $X$.\n- A second NAND gate computes $\\overline{YZ}$ from inputs $Y$ and $Z$.\n- A third NAND gate takes the outputs of the first two gates as its inputs, computing $\\overline{(\\overline{WX}) \\cdot (\\overline{YZ})}$, which is equivalent to the desired function $F$.\n\nThis construction uses exactly three 2-input NAND gates.\n\nTo see that three is minimal, observe that each conjunction $WX$ and $YZ$ requires at least one gate whose inputs jointly depend on the two respective variables to enforce the “both high” condition. With only two 2-input NAND gates total, at most one such pairwise dependence can be formed directly from the primaries, and the remaining gate cannot simultaneously depend on both of the other two primaries while also combining with the first gate’s output to realize the required OR behavior. Hence at least three 2-input NAND gates are necessary, and the construction above achieves this bound.\n\nTherefore, the minimum total number of 2-input NAND gates required is $3$.", "answer": "$$\\boxed{3}$$", "id": "1969370"}, {"introduction": "Digital circuits are not immune to manufacturing defects or failures. This thought experiment explores the practical topic of fault analysis by examining a 3-input NAND gate with one input permanently 'stuck' at a high logic level. By simplifying the Boolean expression under this fault condition, you will determine how the failure alters the gate's function, a key skill in diagnostics and system reliability engineering. [@problem_id:1969405]", "problem": "In digital electronics, fault analysis is crucial for ensuring system reliability. Consider a standard 3-input NAND gate with inputs designated as $A$, $B$, and $C$, and a single output $F$. The Boolean expression for this gate is normally $F = \\overline{A \\cdot B \\cdot C}$.\n\nA manufacturing defect has caused the internal connection for input $A$ to be permanently shorted to the high logic level, a condition known as a \"stuck-at-1\" fault. Inputs $B$ and $C$ continue to function correctly. As a result of this fault, the 3-input gate now behaves as a simpler, standard 2-input logic gate operating on inputs $B$ and $C$.\n\nWhich of the following standard 2-input logic gates is functionally equivalent to this faulty 3-input NAND gate?\n\nA. 2-input AND\n\nB. 2-input OR\n\nC. 2-input NAND\n\nD. 2-input NOR\n\nE. 2-input XOR\n\nF. 2-input XNOR", "solution": "The ideal 3-input NAND gate outputs the Boolean function $F=\\overline{A \\cdot B \\cdot C}$.\n\nA stuck-at-1 fault on input $A$ is modeled by forcing $A=1$ for all input combinations. Substituting this into the ideal expression gives\n$$\nF_{\\text{fault}}=\\overline{(1) \\cdot B \\cdot C}.\n$$\nUsing the Boolean identity $1 \\cdot X = X$, we simplify:\n$$\nF_{\\text{fault}}=\\overline{B \\cdot C}.\n$$\nBy definition, a standard 2-input NAND gate on inputs $B$ and $C$ implements the function $\\overline{B \\cdot C}$. Therefore, the faulty 3-input NAND gate is functionally equivalent to a 2-input NAND gate operating on $B$ and $C$, which corresponds to option C.", "answer": "$$\\boxed{C}$$", "id": "1969405"}]}