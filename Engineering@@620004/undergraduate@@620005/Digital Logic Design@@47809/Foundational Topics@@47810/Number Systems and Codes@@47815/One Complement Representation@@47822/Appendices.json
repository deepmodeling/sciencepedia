{"hands_on_practices": [{"introduction": "To perform any calculation, we first need to speak the computer's language. This initial practice focuses on the fundamental skill of translation: converting a human-readable decimal number into the one's complement binary format used by some early computing systems. Mastering this conversion [@problem_id:1949361], which involves representing positive numbers in standard binary and negative numbers by inverting all the bits of their positive counterparts, is the essential first step toward understanding signed arithmetic in digital logic.", "problem": "A vintage computing enthusiast is restoring an 8-bit microprocessor from the early 1970s. This processor, unlike modern ones that typically use two's complement, represents signed integers using the one's complement system. In this system, a positive number is represented by its standard binary equivalent with the most significant bit (MSB) as 0. A negative number is found by taking the bitwise NOT (inverting all the bits) of its positive counterpart.\n\nThe enthusiast is testing the arithmetic logic unit (ALU) and needs to input the decimal value $-21$ into a register. What is the correct 8-bit one's complement binary representation of the decimal number $-21$?\n\nSelect the correct binary string from the options below.\n\nA. `11101010`\n\nB. `11101011`\n\nC. `10010101`\n\nD. `01101010`\n\nE. `00010101`", "solution": "In 8-bit one's complement, a negative number is obtained by taking the bitwise NOT of the positive number's 8-bit representation. Let the 8-bit representation of a positive integer be $b_{7}b_{6}b_{5}b_{4}b_{3}b_{2}b_{1}b_{0}$ with $b_{7}$ the MSB. For a positive number, $b_{7}=0$. The one's complement negation is defined bitwise by\n$$\nb_{i}'=1-b_{i}\\quad\\text{for all }i\\in\\{0,1,\\dots,7\\}.\n$$\nFirst, write $+21$ in 8-bit binary. Using the positional expansion,\n$$\n21=16+4+1=2^{4}+2^{2}+2^{0},\n$$\nso the lower 7 bits are $b_{4}=1$, $b_{2}=1$, $b_{0}=1$, and all others zero, with the MSB $b_{7}=0$ for a positive value. Thus\n$$\n+21=(00010101)_{2}.\n$$\nApplying one's complement (bitwise NOT),\n$$\n-21:\\quad (00010101)_{2}\\ \\longrightarrow\\ (11101010)_{2}.\n$$\nComparing with the options, this matches option A.", "answer": "$$\\boxed{A}$$", "id": "1949361"}, {"introduction": "Once numbers are correctly represented, we can explore how arithmetic operations are performed. One's complement addition has a unique and clever rule known as the \"end-around carry\" to handle calculations that cross from negative to positive values. This exercise [@problem_id:1949343] provides hands-on practice with this crucial mechanism, demonstrating step-by-step how a carry-out from the most significant bit is added back to the result to maintain mathematical correctness.", "problem": "A legacy 4-bit microprocessor is under analysis. This processor uses one's complement representation for signed integers. In this system, negative numbers are formed by taking the bitwise complement (inverting all bits) of their positive counterparts. Addition is performed using standard binary arithmetic, with the critical rule that if an addition operation results in a carry-out from the most significant bit, this carry bit must be added to the least significant bit of the result. This procedure is known as an end-around carry.\n\nA specific register in this processor is initialized with the value corresponding to the decimal number $-2$. Subsequently, the processor executes an \"increment\" instruction three times in succession. Each \"increment\" instruction performs a binary addition of the value $+1$ (represented as `0001` in 4-bit binary) to the current value stored in the register.\n\nLet $R_0$ be the initial 4-bit binary value in the register representing $-2$. Let $R_1$, $R_2$, and $R_3$ be the 4-bit binary values in the register after the first, second, and third increment operations, respectively. Which of the following options correctly lists the sequence of binary values $(R_1, R_2, R_3)$?\n\nA. `(1110, 1111, 0001)`\n\nB. `(1110, 1111, 0000)`\n\nC. `(1111, 0000, 0001)`\n\nD. `(1011, 1100, 1101)`\n\nE. `(1111, 0001, 0010)`", "solution": "In a 4-bit one's complement system, a negative number is formed by bitwise complementing the positive magnitude. The positive value $+2$ is $0010_{2}$, so the initial register value representing $-2$ is\n$$\nR_{0} = \\overline{0010} = 1101_{2}.\n$$\nEach increment adds $+1$, represented as $0001_{2}$, using binary addition with an end-around carry: if there is a carry-out from the most significant bit, that carry is added to the least significant bit of the sum.\n\nFirst increment:\n$$\nR_{1} = R_{0} + 0001_{2} = 1101_{2} + 0001_{2} = 1110_{2},\n$$\nwith no carry-out, so $R_{1} = 1110$.\n\nSecond increment:\n$$\nR_{2} = R_{1} + 0001_{2} = 1110_{2} + 0001_{2} = 1111_{2},\n$$\nwith no carry-out, so $R_{2} = 1111$.\n\nThird increment:\n$$\nR_{3} = R_{2} + 0001_{2} = 1111_{2} + 0001_{2} = 0000_{2} \\text{ with carry-out } 1.\n$$\nApply end-around carry:\n$$\n0000_{2} + 0001_{2} = 0001_{2},\n$$\nso $R_{3} = 0001$.\n\nTherefore, the sequence is $(R_{1}, R_{2}, R_{3}) = (1110, 1111, 0001)$, which corresponds to option A.", "answer": "$$\\boxed{A}$$", "id": "1949343"}, {"introduction": "Every number system with a fixed number of bits has its limits. This final practice explores what happens when we exceed the representational range of the system, a condition known as overflow. By adding two numbers whose sum is too large to be stored, you will learn to identify overflow by observing a tell-tale sign: the sum of two positive numbers resulting in a negative one [@problem_id:1949378]. Recognizing overflow is a critical skill in digital design, as it prevents silent, and often catastrophic, calculation errors.", "problem": "An engineer is tasked with verifying the behavior of a legacy 8-bit microprocessor, which is known to use one's complement representation for signed integers. In this system, positive numbers have a sign bit of 0, while negative numbers have a sign bit of 1 and are represented by the bitwise NOT of their positive counterparts.\n\nThe engineer performs a test operation by instructing the processor's Arithmetic Logic Unit (ALU) to add the decimal values $+70$ and $+80$. The ALU performs the addition and stores the output in an 8-bit register. An overflow flag is set if the addition of two numbers with the same sign results in a number with the opposite sign.\n\nBased on the rules of 8-bit one's complement arithmetic, determine the decimal value corresponding to the binary pattern in the result register and whether an overflow occurred.\n\nA: The result is -105, and an overflow has occurred.\n\nB: The result is -106, and an overflow has occurred.\n\nC: The result is -105, and no overflow has occurred.\n\nD: The result is +150, and an overflow has occurred.\n\nE: The result is -106, and no overflow has occurred.", "solution": "In 8-bit one's complement, positive values have sign bit $0$ and are represented in standard binary; negative values have sign bit $1$ and are represented as the bitwise NOT of the corresponding positive magnitude. The representable range is from $-127$ to $+127$.\n\nEncode the operands:\n$+70$ in 8-bit binary is $0100\\,0110_{2}$, and $+80$ is $0101\\,0000_{2}$.\n\nPerform the 8-bit binary addition (with possible end-around carry if there is a carry out of the most significant bit):\n$$0100\\,0110_{2} + 0101\\,0000_{2} = 1001\\,0110_{2}.$$\nThere is no carry out of the most significant bit, so no end-around carry is added.\n\nInterpret the result $1001\\,0110_{2}$ in one's complement. Since the sign bit is $1$, it is negative. Its magnitude is obtained by bitwise NOT:\n$$\\text{NOT}(1001\\,0110_{2}) = 0110\\,1001_{2}.$$\nCompute the magnitude:\n$$0110\\,1001_{2} = 64 + 32 + 8 + 1 = 105.$$\nHence, the stored result corresponds to $-105$.\n\nDetermine overflow. The given rule states that an overflow flag is set if adding two numbers with the same sign yields a result with the opposite sign. Both inputs are positive (sign bit $0$), and the result has sign bit $1$, so overflow occurred. Equivalently, the carry into the sign bit is $1$ while the carry out is $0$, which also indicates overflow in one's complement addition.\n\nTherefore, the correct choice is that the result is $-105$ and an overflow has occurred.", "answer": "$$\\boxed{A}$$", "id": "1949378"}]}