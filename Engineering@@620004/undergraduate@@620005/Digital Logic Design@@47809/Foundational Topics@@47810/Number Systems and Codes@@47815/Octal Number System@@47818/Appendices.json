{"hands_on_practices": [{"introduction": "Understanding the octal system is not just an academic exercise; it is a practical skill for interpreting and working with digital systems. This first practice problem focuses on the most fundamental application of octal numbers: their role as a compact and human-readable shorthand for binary code. By converting an octal value to its binary equivalent, you will practice the direct mapping between each octal digit and its unique 3-bit binary representation ($8 = 2^3$), a key technique in digital logic and computer architecture [@problem_id:1949113].", "problem": "In many computer systems, particularly those with architectures influenced by legacy hardware like the PDP-8, the octal number system is used as a compact representation of binary data. An engineer is analyzing a data packet from such a system. The packet's checksum value is recorded as the octal number $(705)_8$. To perform a validation check, the engineer needs to convert this checksum into its equivalent 9-bit binary representation.\n\nWhich of the following options represents the correct 9-bit binary equivalent of the octal number $(705)_8$?\n\nA. $110000101$\n\nB. $111000110$\n\nC. $101000111$\n\nD. $111000101$\n\nE. $011100010$", "solution": "An octal digit maps to exactly three binary bits because $8=2^{3}$. To convert $(705)_{8}$ to binary, convert each octal digit to its three-bit binary equivalent:\n- $7=2^{2}+2^{1}+2^{0}\\Rightarrow 111$\n- $0\\Rightarrow 000$\n- $5=2^{2}+2^{0}\\Rightarrow 101$\n\nConcatenating these groups yields the 9-bit binary number $111000101$.\n\nVerification by decimal conversion:\n$$(705)_{8}=7\\cdot 8^{2}+0\\cdot 8^{1}+5\\cdot 8^{0}=7\\cdot 64+5=448+5=453,$$\nand\n$$453=2^{8}+2^{7}+2^{6}+2^{2}+2^{0}\\Rightarrow 111000101,$$\nwhich matches the result above.\n\nTherefore, the correct option is D.", "answer": "$$\\boxed{D}$$", "id": "1949113"}, {"introduction": "Once we can represent numbers in octal, the next step is to perform arithmetic with them directly. This exercise challenges you to perform subtraction in base-8, a skill essential for tasks like calculating memory address offsets in certain computer systems. Mastering the concept of \"borrowing\" in a non-decimal base like octal solidifies your understanding of how positional number systems work in general, moving beyond rote memorization to true conceptual fluency [@problem_id:1949103].", "problem": "In a legacy computing system, memory addresses are represented using the octal (base-8) number system. A programmer needs to calculate the displacement between two memory locations. The destination address is represented by the octal number $(76)_8$ and the origin address is represented by the octal number $(47)_8$.\n\nTo find the displacement, the programmer must perform the subtraction $(76)_8 - (47)_8$. What is the resulting displacement? Express your answer as a number in the octal system. The final answer should be the sequence of octal digits only, without any base indicators or parentheses.", "solution": "We subtract in base 8 by performing digit-wise subtraction with borrowing in base 8.\n\nCompute the units (rightmost) digit: $6 - 7$ cannot be done without a borrow. Borrow $1$ from the eights place; in base $8$, this adds $8$ to the units digit. Thus the units computation becomes $6 + 8 - 7 = 7$, and the eights digit $7$ reduces to $6$.\n\nNow compute the eights digit: $6 - 4 = 2$.\n\nTherefore, $(76)_{8} - (47)_{8} = (27)_{8}$, so the displacement in octal is $27$.", "answer": "$$\\boxed{27}$$", "id": "1949103"}, {"introduction": "This final problem represents a leap from basic arithmetic to advanced digital design, showing how number system properties can be exploited to create efficient hardware. You will devise a method to check for divisibility for a serially processed octal number, a task that combines number theory with the principles of sequential logic design. This hypothetical scenario [@problem_id:1949114] illustrates how a clever mathematical insight can lead to a simple and elegant finite state machine, a cornerstone of modern computing.", "problem": "A digital signal processing system is designed to analyze a continuous stream of data packets. Each packet contains a large integer represented in the octal (base-8) number system. For a real-time integrity check, the number is fed into a sequential logic circuit one digit at a time, beginning with the most significant digit and ending with the least significant digit.\n\nYou are tasked with determining a key design parameter for a specialized checker circuit. This circuit must monitor the incoming octal digits serially. It possesses a single binary output, $Z$. The output $Z$ must be asserted high (logic '1') at the end of a clock cycle if and only if the octal number formed by the entire sequence of digits received up to and including that cycle is perfectly divisible by the decimal number 9. Otherwise, the output $Z$ must be low (logic '0'). For this purpose, the circuit must be designed as a minimal Mealy machine.\n\nBefore any digits are processed, the circuit is in a reset state, which can be considered as representing the numerical value zero.\n\nWhat is the minimum number of states required for this Mealy machine?", "solution": "Let the incoming octal digits be $d_{1},d_{2},\\ldots$, with each $d_{i}\\in\\{0,1,2,3,4,5,6,7\\}$, read most significant to least significant. After $k$ digits, the numeric value represented is\n$$\nX_{k}=\\sum_{i=1}^{k} d_{i}\\,8^{k-i}.\n$$\nTo detect divisibility by $9$, it suffices to track the residue modulo $9$. Define $r_{k}\\equiv X_{k}\\pmod{9}$ with initial $r_{0}=0$. When a new digit $d$ arrives, the update is\n$$\nr_{k+1}\\equiv 8\\,r_{k}+d \\pmod{9}.\n$$\nUsing $8\\equiv -1 \\pmod{9}$, this simplifies to\n$$\nr_{k+1}\\equiv -r_{k}+d \\pmod{9}.\n$$\nThe output requirement is: at the end of a cycle (after processing $d$), assert $Z=1$ if and only if the entire number so far is divisible by $9$, i.e., if and only if $r_{k+1}\\equiv 0 \\pmod{9}$. In a Mealy machine, this means on input $d$ from a state representing $r$, the transition goes to the state representing $r' \\equiv -r + d \\pmod{9}$ and outputs $Z=1$ if and only if $r'=0$, equivalently $d\\equiv r \\pmod{9}$.\n\nReachability from reset: from $r_{0}=0$, after one digit $d\\in\\{0,\\ldots,7\\}$ we have $r_{1}\\equiv d$, so residues $0,1,\\ldots,7$ are reachable. Residue $8$ is reachable after two digits: choose any $t\\in\\{1,\\ldots,7\\}$ as the first digit so $r_{1}=t$, then choose the second digit $d=t-1$, yielding $r_{2}\\equiv -t+(t-1)\\equiv 8 \\pmod{9}$.\n\nMinimality via distinguishability: two states (residues) $r\\neq s$ are Mealy-equivalent only if for every input string they produce identical output sequences. Take a single-digit input $d$.\n- If $r\\in\\{0,\\ldots,7\\}$, choose $d=r$. Then from state $r$, $r'\\equiv -r + d \\equiv 0$ and the output is $Z=1$. From any distinct state $s\\neq r$, $r'\\equiv -s + r \\not\\equiv 0$, so the output is $Z=0$. Hence $r$ and $s$ are distinguishable in one step.\n- If $r=8$ and $s\\in\\{0,\\ldots,7\\}$, choose $d=s$. From $s$ the output is $Z=1$ (since $-s + s \\equiv 0$), while from $r=8$ we get $r'\\equiv -8 + s \\equiv s+1 \\not\\equiv 0$ for any $s\\in\\{0,\\ldots,7\\}$, so the output is $Z=0$. Thus $8$ is distinguishable from every $s\\in\\{0,\\ldots,7\\}$ in one step.\n\nTherefore, all $9$ reachable residue states are pairwise distinguishable, so no merging is possible. The minimal Mealy machine thus requires $9$ states.", "answer": "$$\\boxed{9}$$", "id": "1949114"}]}