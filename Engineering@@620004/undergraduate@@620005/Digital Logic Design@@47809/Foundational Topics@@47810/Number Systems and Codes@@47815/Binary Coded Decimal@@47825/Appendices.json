{"hands_on_practices": [{"introduction": "This first practice is about the fundamental skill of translating human-readable decimal numbers into the Binary Coded Decimal (BCD) format used by many digital systems. Mastering this direct encoding is the essential first step before exploring BCD arithmetic or logic design. This exercise [@problem_id:1948829] will help you solidify your understanding of how individual decimal digits are represented and structured within a larger digital word.", "problem": "A custom digital stopwatch is being designed to display time in a minutes and seconds format (MM:SS). The internal logic of the stopwatch represents each individual decimal digit of the minutes and seconds using the standard 8421 Binary Coded Decimal (BCD) representation. In the BCD scheme, each decimal digit from 0 through 9 is encoded into its corresponding 4-bit unsigned binary equivalent. For data transmission within the device, the 4-bit BCD codes for the four digits of the time (the first minute digit M1, the second minute digit M2, the first second digit S1, and the second second digit S2) are concatenated into a single 16-bit binary string.\n\nGiven the time `25:08` on the stopwatch, determine the complete 16-bit binary string that represents this time according to the specified concatenation order (M1, then M2, then S1, then S2).\n\nSelect the correct binary string from the options below.\n\nA. `0010010100001000`\nB. `0001100100001000`\nC. `0101001000001000`\nD. `0010010110000000`\nE. `0010010100001001`", "solution": "In 8421 BCD, each decimal digit $d \\in \\{0,\\dots,9\\}$ is represented by a 4-bit binary code with weights $8,4,2,1$. For the time $25{:}08$, the digits in the specified order are $M1=2$, $M2=5$, $S1=0$, $S2=8$.\n\nUsing 8421 BCD:\n$$\\text{BCD}(2)=0010,\\quad \\text{BCD}(5)=0101,\\quad \\text{BCD}(0)=0000,\\quad \\text{BCD}(8)=1000.$$\n\nConcatenating in the order $M1,M2,S1,S2$ gives:\n$$\\text{BCD}(2)\\,\\text{BCD}(5)\\,\\text{BCD}(0)\\,\\text{BCD}(8)=0010010100001000.$$\n\nComparing with the options, this matches option A.", "answer": "$$\\boxed{A}$$", "id": "1948829"}, {"introduction": "Simple binary addition of BCD values can produce results that are not valid BCD codes, necessitating a \"correction\" step, typically by adding $6$. This thought experiment [@problem_id:1911927] challenges you to analyze the conditions under which this correction is required by considering a special case with limited inputs. By determining if correction logic is needed in this constrained scenario, you will gain a deeper intuition for the core principles and operational boundaries of a BCD adder.", "problem": "A standard BCD (Binary-Coded Decimal) adder is a digital circuit that adds two 4-bit values, where each value represents a decimal digit from 0 to 9. The circuit is typically built using a 4-bit binary adder and a \"correction logic\" unit. The correction is required because a simple binary addition can result in a non-BCD value. The correction logic activates—by adding a value of 6 ($0110_2$) to the result—if and only if the sum from the 4-bit binary adder is greater than 9 ($1001_2$) or if the 4-bit adder generates a carry-out.\n\nConsider a specialized digital system where a BCD adder is used, but the two 4-bit BCD inputs, let's call them A and B, are guaranteed to only represent decimal digits in the range of 0 to 4, inclusive.\n\nGiven this specific input constraint, which of the following statements provides the most accurate analysis regarding the necessity of the correction logic circuit?\n\nA. The correction logic is unnecessary. The maximum possible decimal sum is $4+4=8$, which corresponds to a binary value of $1000_2$. This value is not greater than 9, and the addition of any two valid inputs will not produce a carry-out from the 4-bit adder. Therefore, the conditions for correction are never met.\n\nB. The correction logic is unnecessary. A 4-bit binary adder can represent numbers up to 15. Since the maximum sum of the inputs is 8, which is well within this range, the adder functions correctly without any BCD-specific modification.\n\nC. The correction logic is still necessary. For instance, adding the BCD representation for 4 ($0100_2$) and 4 ($0100_2$) results in the binary value $1000_2$. Since the most significant bit of this 4-bit sum is 1, it represents an invalid intermediate state that requires correction to produce the proper BCD output for 8.\n\nD. The correction logic is still necessary. While the decimal sum may not exceed 9, it is possible for the 4-bit binary adder to generate a carry-out for certain input combinations within the restricted range, which would trigger the correction circuit.", "solution": "Let the 4-bit BCD inputs be $A$ and $B$, each constrained to represent decimal digits in $\\{0,1,2,3,4\\}$. As 4-bit binary values, this implies\n$$\n0 \\leq A \\leq 0100_{2}, \\quad 0 \\leq B \\leq 0100_{2}.\n$$\nA 4-bit binary adder produces a 4-bit sum $S$ and a carry-out $C_{4}$ such that, by definition of binary addition,\n$$\nA + B = 16\\,C_{4} + S, \\quad \\text{with } 0 \\leq S \\leq 15 \\text{ and } C_{4} \\in \\{0,1\\}.\n$$\nUnder the given constraint,\n$$\n0 \\leq A+B \\leq 4+4 = 8.\n$$\nTherefore,\n$$\nC_{4} = \\left\\lfloor \\frac{A+B}{16} \\right\\rfloor = 0, \\quad S = A+B \\leq 8 = 1000_{2}.\n$$\nIn a standard BCD adder, the correction logic adds $0110_{2}$ if and only if\n$$\n\\left(C_{4} = 1\\right) \\quad \\text{or} \\quad \\left(S > 9 = 1001_{2}\\right).\n$$\nGiven $C_{4} = 0$ and $S \\leq 8 < 9$, neither condition is ever satisfied, so the correction logic is never activated, and the uncorrected 4-bit sum $S$ is already a valid BCD digit (specifically one of $0000_{2}$ through $1000_{2}$).\n\nAssessing the options:\n- Option A correctly states that the maximum sum is $8 = 1000_{2}$, no carry-out occurs, and the correction conditions are never met. This directly and accurately uses the BCD correction criteria.\n- Option B concludes the correction is unnecessary but justifies it by the 4-bit adder’s range up to $15$, which is not the relevant criterion for BCD correction; thus it is not the most accurate analysis.\n- Option C incorrectly claims $1000_{2}$ is an invalid intermediate state; in fact, it is the valid BCD encoding of $8$.\n- Option D is false because $C_{4} = 0$ for all allowed inputs.\n\nTherefore, the most accurate analysis is given by Option A.", "answer": "$$\\boxed{A}$$", "id": "1911927"}, {"introduction": "Moving from theory to implementation, this practice focuses on designing the heart of a BCD adder: the correction detection circuit. Your task is to translate the rule for when a BCD correction is needed—that is, when a sum exceeds the decimal value $9$—into a concrete Boolean logic expression. This exercise [@problem_id:1913589] bridges the gap between the abstract arithmetic concept and its physical realization, a key skill in digital logic design.", "problem": "In the design of an arithmetic logic unit (ALU), a common task is to create a circuit that can add numbers represented in Binary Coded Decimal (BCD). In BCD, each decimal digit from 0 to 9 is represented by its own 4-bit binary equivalent.\n\nConsider a 1-digit BCD adder that takes two 4-bit BCD inputs, $A = A_3A_2A_1A_0$ and $B = B_3B_2B_1B_0$. The first stage of this adder is a standard 4-bit binary adder that computes the sum $S = S_3S_2S_1S_0$ and a carry-out bit $C_{out}$. The 5-bit result $C_{out}S_3S_2S_1S_0$ represents the binary sum of the two input numbers.\n\nThis binary sum is not always a valid BCD representation. A correction is needed if the sum is greater than 9. This correction consists of adding the binary value for 6 ($0110_2$) to the sum $S$. To implement this, a combinational logic circuit is required to produce a \"correction needed\" signal, $K$, which is high ($K=1$) when the correction must be applied.\n\nThe condition for the correction to be necessary is that the decimal value of the sum is greater than 9. This occurs if either the 4-bit sum $S$ is a binary number from 10 to 15, or if the initial binary addition generated a carry-out ($C_{out}=1$), which corresponds to sums from 16 to 18.\n\nDerive the minimal Sum-of-Products (SOP) Boolean expression for the correction signal $K$ in terms of the sum bits ($S_3, S_2, S_1$) and the carry-out ($C_{out}$). You may find that not all sum bits are necessary for the minimal expression.", "solution": "We define the correction signal $K$ to be $1$ exactly when the 5-bit binary sum represents a decimal value greater than $9$. This happens in two disjoint cases:\n1) The 4-bit binary adder produces a carry-out, i.e., $C_{out}=1$. Then the sum is at least $16$, and a BCD correction is required.\n2) There is no carry-out, i.e., $C_{out}=0$, but the 4-bit sum $S_{3}S_{2}S_{1}S_{0}$ is $1010$ to $1111$, i.e., $10$ to $15$ in binary.\n\nCharacterizing the second case, the invalid BCD sums $1010$ to $1111$ are exactly those where $S_{3}=1$ and at least one of $S_{2}$ or $S_{1}$ is $1$. The least significant bit $S_{0}$ is irrelevant to this condition. Hence, using Boolean algebra (with $+$ denoting OR and adjacency denoting AND),\n$$\nK = C_{out} + \\big(S_{3}(S_{2} + S_{1})\\big).\n$$\nTo write this in Sum-of-Products form, distribute:\n$$\nK = C_{out} + S_{3}S_{2} + S_{3}S_{1}.\n$$\nThis is minimal, since the product terms $S_{3}S_{2}$ and $S_{3}S_{1}$ are prime implicants covering all invalid sums from $10$ to $15$ without using $S_{0}$, and $C_{out}$ covers the case of sums $16$ to $18$.", "answer": "$$\\boxed{C_{out}+S_{3}S_{2}+S_{3}S_{1}}$$", "id": "1913589"}]}