{"hands_on_practices": [{"introduction": "Digital processors operate with a fixed number of bits, which imposes fundamental limits on the range of numbers they can represent. This practice explores the critical concept of arithmetic overflow in the two's complement system. By examining the addition of two positive numbers in a constrained 4-bit environment, you will see firsthand how a result can exceed the representable range, leading to a seemingly nonsensical negative value, a common pitfall in digital system design [@problem_id:1914561].", "problem": "A prototype for a low-power environmental sensor uses a specialized 4-bit processor to perform initial data filtering. This processor represents signed integers using the 4-bit two's complement number system. In a test run, the processor is tasked with adding two sensor readings, which are represented by the binary values $X = 0110_2$ and $Y = 0100_2$. The sum is stored in a 4-bit register. Which of the following statements accurately describes the outcome of this addition?\n\nA. The addition results in the correct decimal value of +10, and no overflow occurs.\n\nB. The addition results in an overflow, and the stored 4-bit binary value represents the decimal value -6.\n\nC. The addition results in an overflow, and the stored 4-bit binary value represents the decimal value +2.\n\nD. The addition does not result in an overflow, and the stored 4-bit binary value is $0000_2$.\n\nE. The addition results in an overflow, and the stored 4-bit binary value is identical to the representation of the largest possible negative number in this system.", "solution": "In a 4-bit two's complement system, the representable range is given by $[-2^{n-1},\\,2^{n-1}-1]$ with $n=4$, hence $[-8,\\,7]$. The given operands are $X=0110_{2}$ and $Y=0100_{2}$, both with most significant bit $0$, so both are nonnegative. Converting to decimal, $0110_{2}=+6$ and $0100_{2}=+4$, so the true mathematical sum is $+10$, which lies outside the representable range, indicating overflow is expected.\n\nPerform the 4-bit addition:\n- Bit $0$: $0+0=0$, carry $0$.\n- Bit $1$: $1+0=1$, carry $0$.\n- Bit $2$: $1+1=0$ with carry $1$.\n- Bit $3$ (MSB): $0+0+\\text{carry }1=1$ with carry out $0$.\n\nThus the 4-bit stored result is\n$$0110_{2}+0100_{2}=1010_{2}.$$\nOverflow detection in two's complement can be checked by either rule: adding two operands with the same sign yields a result with the opposite sign, or the carry into the MSB differs from the carry out of the MSB. Here, both operands have sign bit $0$ and the result has sign bit $1$, so overflow occurs. Equivalently, the carry into the MSB is $1$ while the carry out is $0$, so overflow occurs.\n\nInterpret the stored 4-bit value $1010_{2}$ in two's complement: since the MSB is $1$, it is negative. Its magnitude is obtained by two's complementing:\n$$\\text{invert}(1010_{2})=0101_{2},\\quad 0101_{2}+0001_{2}=0110_{2},$$\nso $1010_{2}$ represents $-6$ in decimal.\n\nTherefore, the addition results in an overflow, and the stored 4-bit binary value represents the decimal value $-6$, matching option B.", "answer": "$$\\boxed{B}$$", "id": "1914561"}, {"introduction": "In real-world digital systems, operations frequently involve operands of different bit-widths, such as a 4-bit sensor output being processed by an 8-bit Arithmetic Logic Unit (ALU). Simply padding with zeros is not always correct. This exercise illuminates the crucial distinction between zero-extension and sign-extension, demonstrating how each method preserves a number's value under different interpretations (unsigned vs. signed) and the significant calculation errors that can arise from choosing the wrong one [@problem_id:1914502].", "problem": "A digital system's 8-bit Arithmetic Logic Unit (ALU) operates on signed integers using the 2's complement representation. The ALU is designed to perform the addition of two 8-bit operands, $X$ and $Y$.\n\nFor a particular operation, the first operand is fixed as $X = 01011010_2$.\n\nThe second operand, $Y$, is derived from a 4-bit input value $B = 1100_2$. Before the addition can occur, $B$ must be extended to 8 bits. Two different extension methods are being evaluated:\n\n1.  **Zero-Extension**: The 4-bit value $B$ is extended to an 8-bit operand, $Y_{zero}$, by padding it with four leading zeros.\n2.  **Sign-Extension**: The 4-bit value $B$ is interpreted as a 4-bit 2's complement number and extended to an 8-bit operand, $Y_{sign}$, using the standard sign-extension procedure.\n\nThe ALU calculates two separate results: $R_{zero} = X + Y_{zero}$ and $R_{sign} = X + Y_{sign}$. The results $R_{zero}$ and $R_{sign}$ are both stored as 8-bit signed 2's complement numbers.\n\nCalculate the difference between the decimal integer values of the two results, defined as $Value(R_{zero}) - Value(R_{sign})$. Provide the final answer as a single decimal integer.", "solution": "The 8-bit signed two's complement range is $[-2^{7},\\,2^{7}-1]=[-128,\\,127]$. The 4-bit signed two's complement range is $[-2^{3},\\,2^{3}-1]=[-8,\\,7]$.\n\nThe fixed operand is $X=01011010_{2}$. Since the most significant bit is $0$, $X$ is nonnegative. Its value is computed by place values:\n$$\nX=0\\cdot 2^{7}+1\\cdot 2^{6}+0\\cdot 2^{5}+1\\cdot 2^{4}+1\\cdot 2^{3}+0\\cdot 2^{2}+1\\cdot 2^{1}+0\\cdot 2^{0}=64+16+8+2=90.\n$$\n\nThe 4-bit input is $B=1100_{2}$.\n- Zero-extension pads four leading zeros: $Y_{\\text{zero}}=00001100_{2}$. Interpreted as an 8-bit signed integer with most significant bit $0$, its value is\n$$\nY_{\\text{zero}}=0\\cdot 2^{7}+0\\cdot 2^{6}+0\\cdot 2^{5}+0\\cdot 2^{4}+1\\cdot 2^{3}+1\\cdot 2^{2}+0\\cdot 2^{1}+0\\cdot 2^{0}=8+4=12.\n$$\n- Sign-extension first interprets $B$ as a 4-bit two's complement number. Since the most significant bit of $B$ is $1$, it is negative. Using the signed-weight expansion,\n$$\nB=1\\cdot(-2^{3})+1\\cdot 2^{2}+0\\cdot 2^{1}+0\\cdot 2^{0}=-8+4=-4.\n$$\nSign-extending to 8 bits by replicating the sign bit yields $Y_{\\text{sign}}=11111100_{2}$, whose 8-bit two's complement value is also $-4$ (consistent with sign-extension preserving value).\n\nThe ALU results are\n$$\nR_{\\text{zero}}=X+Y_{\\text{zero}}=90+12=102,\\qquad R_{\\text{sign}}=X+Y_{\\text{sign}}=90+(-4)=86,\n$$\nboth of which lie within $[-128,127]$, so no overflow occurs.\n\nTherefore, the requested difference is\n$$\n\\text{Value}(R_{\\text{zero}})-\\text{Value}(R_{\\text{sign}})=102-86=16.\n$$\nEquivalently, by linearity,\n$$\n\\text{Value}(R_{\\text{zero}})-\\text{Value}(R_{\\text{sign}})=(X+Y_{\\text{zero}})-(X+Y_{\\text{sign}})=Y_{\\text{zero}}-Y_{\\text{sign}}=12-(-4)=16.\n$$", "answer": "$$\\boxed{16}$$", "id": "1914502"}, {"introduction": "This final practice ties together several key concepts by simulating a practical task within a hypothetical digital controller. You will perform signed arithmetic on negative numbers and then use an arithmetic right shift—a fast and efficient hardware operation—to perform division. This problem highlights how a sequence of binary operations accurately implements a mathematical goal like averaging, and it reinforces the specific rules, such as rounding behavior, that govern signed arithmetic in hardware [@problem_id:1914545].", "problem": "A custom-built digital controller for a cryogenic experiment uses an 8-bit Arithmetic Logic Unit (ALU) to process temperature data. Temperatures are represented as 8-bit two's complement signed integers, measured in degrees Celsius. The controller's firmware is designed to compute the average of two sequential temperature readings.\n\nThe process involves two steps:\n1.  The controller receives two readings, $R_1 = -21$ and $R_2 = -44$. The ALU first computes their sum, $S = R_1 + R_2$, and stores the result in an 8-bit register.\n2.  To find the average, the controller then performs a single arithmetic right shift on the 8-bit sum $S$. The result of this shift operation is the final value stored in the averaging register.\n\nDetermine the final decimal integer value represented by the 8-bit binary number in the averaging register after the arithmetic right shift operation.", "solution": "Temperatures are stored as 8-bit two's complement signed integers. The range is from $-128$ to $127$. The readings are $R_{1}=-21$ and $R_{2}=-44$, so their sum is\n$$\nS=R_{1}+R_{2}=-21+(-44)=-65,\n$$\nwhich lies within the representable range, so no overflow occurs.\n\nIn 8-bit two's complement, $-21$ is obtained by inverting $00010101$ and adding $1$, yielding $11101011$, and $-44$ is obtained by inverting $00101100$ and adding $1$, yielding $11010100$. Adding in 8 bits,\n$$\n11101011+11010100=10111111 \\quad (\\text{discarding the carry out}),\n$$\nwhich represents $-65$ as expected.\n\nTo compute the average, the controller performs a single arithmetic right shift on $S$. An arithmetic right shift on a two's complement integer is equivalent to signed division by $2$ with rounding toward negative infinity, i.e.,\n$$\n\\operatorname{ASR}_{1}(S)=\\left\\lfloor \\frac{S}{2} \\right\\rfloor \\quad \\text{for } S0.\n$$\nThus,\n$$\n\\operatorname{ASR}_{1}(-65)=\\left\\lfloor \\frac{-65}{2} \\right\\rfloor=\\left\\lfloor -32.5 \\right\\rfloor=-33.\n$$\nEquivalently, shifting the binary $10111111$ arithmetically right by one bit (replicating the sign bit) gives $11011111$, which is two's complement for $-33$.\n\nTherefore, the final decimal integer value in the averaging register is $-33$.", "answer": "$$\\boxed{-33}$$", "id": "1914545"}]}