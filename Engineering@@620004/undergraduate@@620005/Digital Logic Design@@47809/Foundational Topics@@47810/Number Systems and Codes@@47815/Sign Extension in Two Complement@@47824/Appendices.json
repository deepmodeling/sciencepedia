{"hands_on_practices": [{"introduction": "Performing arithmetic between numbers of different bit widths is a fundamental task in computer architecture. To ensure the mathematical correctness of such operations with signed numbers, we must first convert them to a compatible format. This exercise provides an essential hands-on practice in applying the rules of sign extension in the context of a simple addition, ensuring you master the mechanics of converting a smaller two's complement number to a larger bit width before computation [@problem_id:1913334].", "problem": "A simplified Central Processing Unit (CPU) contains an 8-bit adder designed to work with integers in two's complement representation. The CPU needs to compute the sum of two numbers, $X$ and $Y$. The number $X$ is stored in a 4-bit register and has the value $1010_2$. The number $Y$ is stored in an 8-bit register and has the value $00010110_2$.\n\nTo perform the operation, the 4-bit number $X$ must first be converted to an equivalent 8-bit two's complement representation before being sent to the adder. The adder then computes the sum $S = X + Y$.\n\nWhat is the resulting 8-bit two's complement binary value of the sum $S$?\n\nA. $00010000_2$\n\nB. $00100000_2$\n\nC. $11110000_2$\n\nD. $11001000_2$\n\nE. $00000000_2$", "solution": "We work in two's complement arithmetic.\n\n1) Interpret the 4-bit number $X=1010_{2}$ in two's complement. For an $n$-bit two's complement number with bits $b_{n-1}\\dots b_{0}$, the value is\n$$\nv=-b_{n-1}2^{n-1}+\\sum_{k=0}^{n-2} b_{k}2^{k}.\n$$\nFor $X=1010_{2}$ with $n=4$, we have $b_{3}=1$, $b_{1}=1$, and $b_{2}=b_{0}=0$, hence\n$$\nX=-1\\cdot 2^{3}+1\\cdot 2^{1}=-8+2=-6.\n$$\n\n2) Sign-extend $X$ from 4 bits to 8 bits. In two's complement, sign extension replicates the most significant bit. Since the sign bit of $X$ is $1$, the 8-bit representation is\n$$\nX_{(8\\text{-bit})}=11111010_{2}.\n$$\n\n3) Interpret $Y=00010110_{2}$ as an 8-bit two's complement number. Its sign bit is $0$, so it is nonnegative:\n$$\nY=2^{4}+2^{2}+2^{1}=16+4+2=22.\n$$\n\n4) Compute the sum $S=X+Y$:\n$$\nS=-6+22=16.\n$$\nIn 8-bit two's complement, $16$ is\n$$\nS=00010000_{2}.\n$$\nEquivalently, direct binary addition confirms this:\n$$\n11111010_{2}+00010110_{2}=00010000_{2},\n$$\nwith a carry out that is ignored in fixed-width two's complement addition; no overflow occurs because the addends have opposite signs.\n\nThus, the correct option is A.", "answer": "$$\\boxed{A}$$", "id": "1913334"}, {"introduction": "Understanding how to perform sign extension is one thing; understanding *why* it works is another. This problem moves beyond simple application and challenges you to analyze the consequences of an incorrect implementation. By investigating a hypothetical scenario where an engineer uses a fixed bit for extension instead of the sign bit, you will derive an expression for the resulting numerical error, providing a rigorous, mathematical justification for the sign extension rule [@problem_id:1960202].", "problem": "In the design of a specialized digital signal processor, a core component is a bus-expander module. This module's function is to convert an $M$-bit data word into an $N$-bit data word, where $N > M$. Both the input and output words are used to represent signed integers using the two's complement representation.\n\nLet the input be an $M$-bit word, represented by the bit vector $A = (a_{M-1}, a_{M-2}, \\dots, a_0)$, where $a_{M-1}$ is the most significant bit (the sign bit). The numerical value of an arbitrary $X$-bit two's complement word $W = (w_{X-1}, \\dots, w_0)$ is defined as $V(W) = -w_{X-1} 2^{X-1} + \\sum_{i=0}^{X-2} w_i 2^i$.\n\nA design flaw has been discovered in the bus-expander logic. Instead of performing a standard sign extension, the circuit constructs the $N$-bit output word $B = (b_{N-1}, b_{N-2}, \\dots, b_0)$ from the input word $A$ according to the following rules:\n1. The lower $M$ bits of the output word $B$ are a direct copy of the bits of the input word $A$. That is, $b_i = a_i$ for all integers $i$ such that $0 \\leq i \\leq M-1$.\n2. The upper $N-M$ bits of the output word $B$, which are the \"extension bits,\" are all set to a fixed, constant bit value $k$, where $k \\in \\{0, 1\\}$. That is, $b_i = k$ for all integers $i$ such that $M \\leq i \\leq N-1$.\n\nLet $V_A$ be the numerical value represented by the input word $A$, and $V_B$ be the numerical value represented by the output word $B$. Your task is to derive a closed-form analytic expression for the error introduced by this faulty logic, which is defined as the difference $\\Delta V = V_B - V_A$. Your final expression should be in terms of the input sign bit $a_{M-1}$, the fixed padding bit $k$, and the input bit-width $M$.", "solution": "By the given two’s complement definition, for any $X$-bit word $W=(w_{X-1},\\dots,w_{0})$,\n$$\nV(W)=-w_{X-1}2^{X-1}+\\sum_{i=0}^{X-2}w_{i}2^{i}.\n$$\nFor the $M$-bit input $A=(a_{M-1},\\dots,a_{0})$,\n$$\nV_{A}=-a_{M-1}2^{M-1}+\\sum_{i=0}^{M-2}a_{i}2^{i}.\n$$\nFor the $N$-bit output $B=(b_{N-1},\\dots,b_{0})$ with $b_{i}=a_{i}$ for $0\\leq i\\leq M-1$ and $b_{i}=k$ for $M\\leq i\\leq N-1$,\n$$\nV_{B}=-k\\,2^{N-1}+\\sum_{i=0}^{M-1}a_{i}2^{i}+k\\sum_{i=M}^{N-2}2^{i}.\n$$\nUsing the geometric series identity $\\sum_{i=p}^{q}2^{i}=2^{p}\\left(2^{q-p+1}-1\\right)$ with $p=M$ and $q=N-2$, we get\n$\\sum_{i=M}^{N-2}2^{i}=2^{M}\\left(2^{N-1-M}-1\\right)$.\nHence\n$$\nV_{B}=-k\\,2^{N-1}+\\sum_{i=0}^{M-1}a_{i}2^{i}+k\\left[2^{M}\\left(2^{N-1-M}-1\\right)\\right]\n= -k\\,2^{N-1}+\\sum_{i=0}^{M-1}a_{i}2^{i}+k\\,2^{N-1}-k\\,2^{M}.\n$$\nThe terms $\\pm k\\,2^{N-1}$ cancel, yielding\n$$\nV_{B}=\\sum_{i=0}^{M-1}a_{i}2^{i}-k\\,2^{M}.\n$$\nTherefore, the error is\n$$\n\\Delta V=V_{B}-V_{A}=\\left(\\sum_{i=0}^{M-1}a_{i}2^{i}\\right)-k\\,2^{M}-\\left(-a_{M-1}2^{M-1}+\\sum_{i=0}^{M-2}a_{i}2^{i}\\right).\n$$\nSimplifying the sums,\n$$\n\\Delta V=\\left(\\sum_{i=0}^{M-2}a_{i}2^{i}+a_{M-1}2^{M-1}\\right)-k\\,2^{M}+\\;a_{M-1}2^{M-1}-\\sum_{i=0}^{M-2}a_{i}2^{i}\n=2\\,a_{M-1}2^{M-1}-k\\,2^{M}.\n$$\nThus,\n$$\n\\Delta V=2^{M}\\left(a_{M-1}-k\\right).\n$$\nThis expression depends only on $a_{M-1}$, $k$, and $M$, and is independent of $N$ for all $N>M$.", "answer": "$$\\boxed{2^{M}\\left(a_{M-1}-k\\right)}$$", "id": "1960202"}, {"introduction": "In modern processors, efficiency is key, and hardware components are often designed to be multi-functional. This problem places you in the role of a digital designer creating a versatile unit for an Arithmetic Logic Unit (ALU). Your task is to synthesize the control logic for a component that performs sign extension, zero extension, and various shifts based on external control signals, providing insight into how these fundamental operations are integrated into complex, practical circuits [@problem_id:1960203].", "problem": "In the design of a custom processor's Arithmetic Logic Unit (ALU), a versatile shifter and extender unit is required. This combinational logic unit takes an $N$-bit two's complement integer $X$, represented by the bits $x_{N-1}x_{N-2}...x_0$ where $x_{N-1}$ is the Most Significant Bit (MSB) and sign bit. The unit produces a $2N$-bit two's complement integer output $Y$, represented by the bits $y_{2N-1}y_{2N-2}...y_0$.\n\nThe specific operation performed by the unit is determined by two control signals, $C_1$ and $C_0$, according to the following function table:\n\n| $C_1$ | $C_0$ | Operation on Input $X$ to Produce Output $Y$ |\n|:---:|:---:|:---|\n| 0 | 0 | **Zero-extension**: The $N$-bit input $X$ is extended to a $2N$-bit output by prepending $N$ zeros. |\n| 0 | 1 | **Sign-extension**: The $N$-bit input $X$ is extended to a $2N$-bit output by prepending $N$ copies of its sign bit, $x_{N-1}$. |\n| 1 | 0 | **Arithmetic Right Shift and Extend**: The $N$-bit input $X$ is first arithmetically shifted right by one bit to produce an intermediate $N$-bit number. This intermediate result is then sign-extended to produce the $2N$-bit output $Y$. |\n| 1 | 1 | **Logical Left Shift and Extend**: The $N$-bit input $X$ is first logically shifted left by one bit (with a 0 shifted into the least significant bit position) to produce an intermediate $N$-bit number. This intermediate result is then sign-extended to produce the $2N$-bit output $Y$. |\n\nYour task is to determine the logic for a specific bit of the output. Derive the simplified Boolean logic expression for the output bit $y_{N-1}$ in terms of the control signals $C_1, C_0$, and the input bits of $X$.\n\nUse the notation where a prime (e.g., $A'$) denotes the NOT operation, juxtaposition (e.g., $AB$) denotes the AND operation, and the plus symbol ($+$) denotes the OR operation. The final expression must be in a minimal sum-of-products form.", "solution": "Let $X$ be $x_{N-1}x_{N-2}\\ldots x_{0}$ with $x_{N-1}$ the sign bit, and let $Y$ be $y_{2N-1}\\ldots y_{0}$. We determine $y_{N-1}$ for each control setting:\n\n- For $C_{1}C_{0}=00$ (zero-extension), the upper $N$ bits are zeros and the lower $N$ bits equal $X$, so $y_{N-1}=x_{N-1}$.\n- For $C_{1}C_{0}=01$ (sign-extension), the upper $N$ bits are $x_{N-1}$ and the lower $N$ bits equal $X$, so $y_{N-1}=x_{N-1}$.\n- For $C_{1}C_{0}=10$ (arithmetic right shift then sign-extend), the intermediate $N$-bit result is $z$ with $z_{N-1}=x_{N-1}$ and $z_{k}=x_{k+1}$ for $0\\le k\\le N-2$. After sign-extension, the lower $N$ bits are $z$, hence $y_{N-1}=z_{N-1}=x_{N-1}$.\n- For $C_{1}C_{0}=11$ (logical left shift then sign-extend), the intermediate $N$-bit result is $z$ with $z_{0}=0$ and $z_{k}=x_{k-1}$ for $1\\le k\\le N-1$, so $z_{N-1}=x_{N-2}$. After sign-extension, the lower $N$ bits are $z$, hence $y_{N-1}=z_{N-1}=x_{N-2}$.\n\nTherefore,\n$$\ny_{N-1}=\\begin{cases}\nx_{N-1}, & \\text{if } (C_{1},C_{0})\\neq(1,1),\\\\\nx_{N-2}, & \\text{if } (C_{1},C_{0})=(1,1).\n\\end{cases}\n$$\nDefine the select $S=C_{1}C_{0}$. Then $y_{N-1}=S\\,x_{N-2}+S' \\, x_{N-1}$.\nUsing De Morgan’s law, $S'=(C_{1}C_{0})'=C_{1}'+C_{0}'$, so $y_{N-1}=x_{N-2}C_{1}C_{0}+x_{N-1}(C_{1}'+C_{0}')=x_{N-1}C_{1}'+x_{N-1}C_{0}'+x_{N-2}C_{1}C_{0}$.\nThis is a sum of products. No product term absorbs another, so it is minimal in SOP form.", "answer": "$$\\boxed{x_{N-1}C_{1}'+x_{N-1}C_{0}'+x_{N-2}C_{1}C_{0}}$$", "id": "1960203"}]}