{"hands_on_practices": [{"introduction": "Before we can perform calculations, we must first learn the language of sign-magnitude. This initial exercise focuses on the fundamental skill of decoding: converting a binary pattern back into the decimal value it represents. By separating the sign bit from the magnitude bits, you will practice the core principle of interpreting numbers in this format, a crucial first step for any digital logic designer [@problem_id:1960350].", "problem": "A digital system uses a 10-bit register to store signed integers using the sign-magnitude representation. In this format, the most significant bit (the leftmost bit) is designated as the sign bit, where a `0` indicates a positive number and a `1` indicates a negative number. The remaining 9 bits represent the magnitude of the number in standard binary format. If the binary pattern stored in the register is `1001101001`, determine its corresponding decimal integer value.", "solution": "In sign-magnitude representation with a 10-bit register, the leftmost bit is the sign bit and the remaining 9 bits give the magnitude in binary. Let the bit pattern be written as $s\\,b_{8}b_{7}b_{6}b_{5}b_{4}b_{3}b_{2}b_{1}b_{0}$, where $s$ is the sign bit and $b_{k}$ are the magnitude bits with weights $2^{k}$.\n\nGiven the pattern $1001101001$, we have:\n- Sign bit: $s=1$ (indicating a negative number).\n- Magnitude bits: $b_{8}b_{7}b_{6}b_{5}b_{4}b_{3}b_{2}b_{1}b_{0}=001101001$.\n\nCompute the magnitude:\n$$\nM=b_{8}2^{8}+b_{7}2^{7}+b_{6}2^{6}+b_{5}2^{5}+b_{4}2^{4}+b_{3}2^{3}+b_{2}2^{2}+b_{1}2^{1}+b_{0}2^{0}.\n$$\nFrom the digits $0,0,1,1,0,1,0,0,1$, we get:\n$$\nM=0\\cdot 2^{8}+0\\cdot 2^{7}+1\\cdot 2^{6}+1\\cdot 2^{5}+0\\cdot 2^{4}+1\\cdot 2^{3}+0\\cdot 2^{2}+0\\cdot 2^{1}+1\\cdot 2^{0}=64+32+8+1=105.\n$$\n\nSince $s=1$, the value is negative:\n$$\nV=-M=-105.\n$$", "answer": "$$\\boxed{-105}$$", "id": "1960350"}, {"introduction": "Moving beyond simple interpretation, we now explore the complexities of arithmetic within the sign-magnitude system. This practice highlights a significant challenge: performing addition and subtraction, which are not as straightforward as in other binary systems. By analyzing the process of incrementing a negative number, you will uncover why sign-magnitude arithmetic requires special logic to handle the sign and magnitude independently, a key insight into its historical and practical limitations [@problem_id:1960346].", "problem": "In a vintage 8-bit computing system, integer values are stored in registers using 8-bit sign-magnitude representation. In this format, the most significant bit (MSB) serves as the sign bit (where 0 indicates a positive number and 1 indicates a negative number), and the remaining 7 bits represent the magnitude of the number.\n\nA register in the system's Arithmetic Logic Unit (ALU) currently holds the binary value $10000110_2$. An instruction is executed that increments the decimal value stored in this register by one.\n\nWhat is the new 8-bit sign-magnitude binary number stored in the register after this operation is completed?\n\nA. $10000101_2$\n\nB. $10000111_2$\n\nC. $00000101_2$\n\nD. $11111011_2$\n\nE. $00000110_2$", "solution": "In 8-bit sign-magnitude format, let $s$ be the most significant bit and $m$ be the 7-bit magnitude. The represented value is\n$$\nx=\\begin{cases}\nm, & s=0,\\\\\n-m, & s=1.\n\\end{cases}\n$$\nThe given register content is $10000110_{2}$, so $s=1$ and $m=(0000110)_{2}=6$. Therefore,\n$$\nx=-6.\n$$\nIncrementing by one gives\n$$\nx' = x + 1 = -6 + 1 = -5.\n$$\nTo store $-5$ in sign-magnitude, set $s'=1$ and $m'=5=(0000101)_{2}$. Hence the new 8-bit sign-magnitude binary is\n$$\n1\\,0000101_{2}=10000101_{2}.\n$$\nThis corresponds to option A.", "answer": "$$\\boxed{A}$$", "id": "1960346"}, {"introduction": "In contrast to the complexities of addition, multiplication in sign-magnitude is surprisingly intuitive. This exercise demonstrates how to perform multiplication by handling the signs and magnitudes as separate problems: the sign of the product is determined by a simple XOR operation on the operand signs, while the magnitudes are multiplied directly. This practice illuminates the trade-offs inherent in different number representations and shows why sign-magnitude was once a viable option for certain applications [@problem_id:1960340].", "problem": "In a digital system, numbers are often represented in sign-magnitude format. In this representation, the most significant bit (MSB) acts as the sign bit, where a '0' indicates a positive number and a '1' indicates a negative number. The remaining bits represent the absolute magnitude of the number.\n\nConsider two 4-bit numbers, $N_1$ and $N_2$, both represented in this sign-magnitude format. Let $N_1$ correspond to the decimal value $-3$ and $N_2$ correspond to the decimal value $+2$.\n\nYour task is to calculate the product of these two numbers, $P = N_1 \\times N_2$. You must express the final product $P$ as an 8-bit binary number, also in sign-magnitude format.", "solution": "In 4-bit sign-magnitude representation, each number has one sign bit and three magnitude bits. For $N_{1}=-3$, the sign bit is $s_{1}=1$ and the magnitude is $\\lvert -3\\rvert=3=(011)_{2}$, so $N_{1}=(1\\ 011)_{2}=(1011)_{2}$. For $N_{2}=+2$, the sign bit is $s_{2}=0$ and the magnitude is $\\lvert +2\\rvert=2=(010)_{2}$, so $N_{2}=(0\\ 010)_{2}=(0010)_{2}$.\n\nFor multiplication in sign-magnitude format, the product sign is the XOR of the operand signs and the product magnitude is the product of the operand magnitudes:\n$$\ns = s_{1} \\oplus s_{2} = 1 \\oplus 0 = 1,\n$$\n$$\nm = \\lvert N_{1}\\rvert \\cdot \\lvert N_{2}\\rvert = 3 \\cdot 2 = 6.\n$$\n\nThus the product is $P=-6$. In 8-bit sign-magnitude format (one sign bit and seven magnitude bits), the magnitude $6$ is written as\n$$\n6=(110)_{2}=(0000110)_{2}\\ \\text{(padded to 7 bits)},\n$$\nso the 8-bit result is\n$$\nP=(1\\ 0000110)_{2}=(10000110)_{2}.\n$$", "answer": "$$\\boxed{10000110}$$", "id": "1960340"}]}