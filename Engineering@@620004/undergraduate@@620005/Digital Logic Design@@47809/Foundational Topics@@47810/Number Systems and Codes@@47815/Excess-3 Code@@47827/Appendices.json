{"hands_on_practices": [{"introduction": "A key advantage of the Excess-3 code lies in its self-complementing property, which simplifies the design of circuits for subtraction. This exercise provides a hands-on proof of a related characteristic: adding the Excess-3 representation of any decimal digit $D$ to the Excess-3 representation of its 9's complement, $9-D$, yields a constant result. Understanding this principle is fundamental to appreciating why Excess-3 was a valuable choice in early digital arithmetic units. [@problem_id:1934286]", "problem": "In digital electronics, Excess-3 is a non-weighted Binary-Coded Decimal (BCD) code used to represent decimal digits. The code for a decimal digit is its 4-bit binary value plus $0011_2$ (or 3 in decimal). Let $D$ be a decimal digit in the range $0 \\le D \\le 9$. The Excess-3 code for $D$, denoted as $E_3(D)$, is the 4-bit binary representation of the number $D+3$.\n\nThe 9's complement of the digit $D$ is defined as $D' = 9-D$. A key property of the Excess-3 code is that it is self-complementing. A related property involves the arithmetic sum of the Excess-3 code for a digit and the Excess-3 code for its 9's complement.\n\nLet $S$ be the result of the 4-bit binary addition $S = E_3(D) + E_3(D')$. This sum results in a constant binary value for any valid decimal digit $D$. Which of the following statements provides the correct mathematical reason for this constant sum and its value?\n\nA. The sum of the underlying decimal values is $(D+3) + ((9-D)+3) = 15$, which is $1111_2$ in binary.\n\nB. The sum of the underlying decimal values is $D + (9-D) = 9$, which is $1001_2$ in binary.\n\nC. The sum of the underlying decimal values is $(D-3) + ((9-D)-3) = 3$, which is $0011_2$ in binary.\n\nD. The sum of the underlying decimal values is $(D+3) + (9-D) = 12$, which is $1100_2$ in binary.\n\nE. The result is always $1001_2$ because that is the binary representation of the decimal base for the complement (9).", "solution": "The problem asks for the mathematical reason behind the constant sum obtained by adding the Excess-3 codes of a decimal digit and its 9's complement. Let's analyze the process step-by-step.\n\n1.  **Define the Excess-3 code for a digit D:**\n    By definition, the Excess-3 code for a decimal digit $D$, denoted $E_3(D)$, is the 4-bit binary representation of the decimal value $D+3$.\n\n2.  **Define the 9's complement and its Excess-3 code:**\n    The 9's complement of a decimal digit $D$ is $D' = 9-D$.\n    The Excess-3 code for this complement, $E_3(D')$, is therefore the 4-bit binary representation of the decimal value $D'+3$. Substituting the expression for $D'$, we get the decimal value $(9-D)+3$.\n\n3.  **Formulate the sum:**\n    The problem considers the 4-bit binary addition $S = E_3(D) + E_3(D')$. The result of this binary addition will be the binary representation of the sum of the decimal values that these codes represent.\n    So, the decimal value corresponding to the sum $S$ is the sum of the decimal values of the two codes:\n    $$ \\text{Decimal Value of S} = (D+3) + ((9-D)+3) $$\n\n4.  **Simplify the expression:**\n    Let's simplify the expression for the decimal value of the sum.\n    $$ \\text{Decimal Value of S} = D + 3 + 9 - D + 3 $$\n    The terms involving $D$ cancel each other out:\n    $$ \\text{Decimal Value of S} = (D - D) + (3 + 9 + 3) $$\n    $$ \\text{Decimal Value of S} = 0 + 15 = 15 $$\n    The result is the decimal value 15, which is independent of the chosen digit $D$.\n\n5.  **Convert the result to binary:**\n    The final step is to convert the decimal sum 15 into its 4-bit binary representation.\n    $$ 15_{10} = 8 + 4 + 2 + 1 = 1 \\cdot 2^3 + 1 \\cdot 2^2 + 1 \\cdot 2^1 + 1 \\cdot 2^0 = 1111_2 $$\n    Thus, the sum $S$ is always $1111_2$.\n\n6.  **Compare with the given options:**\n    -   Option A states: \"The sum of the underlying decimal values is $(D+3) + ((9-D)+3) = 15$, which is $1111_2$ in binary.\" This exactly matches our derivation.\n    -   Option B incorrectly calculates the sum as $D + (9-D) = 9$. This ignores the \"Excess-3\" part of the codes.\n    -   Option C incorrectly uses $(D-3)$ instead of $(D+3)$ for the code definition.\n    -   Option D incorrectly calculates the sum as $(D+3) + (9-D) = 12$. This error corresponds to adding the Excess-3 code of $D$ to the 9's complement digit $D'$ itself, not its code.\n    -   Option E provides an incorrect value and a flawed reason.\n\nTherefore, the correct explanation is given in option A.", "answer": "$$\\boxed{A}$$", "id": "1934286"}, {"introduction": "Performing arithmetic directly with coded decimal digits is a cornerstone of BCD-based systems. This practice explores the mechanics of adding two numbers in Excess-3 representation, focusing on the essential correction steps. Specifically, we will examine the case where the sum of two digits generates a decimal carry, revealing the logic required to ensure the final result is a valid Excess-3 code. [@problem_id:1934281]", "problem": "In digital systems, Excess-3 code is a self-complementing Binary-Coded Decimal (BCD) representation. The Excess-3 code for a decimal digit is its 4-bit binary equivalent plus 3. For example, the Excess-3 code for decimal 2 is the binary for $(2+3=5)$, which is `0101`.\n\nConsider the process of adding two decimal digits, $D_1 = 8$ and $D_2 = 9$, using their Excess-3 representations. The procedure involves first finding the 4-bit Excess-3 codes for each digit, and then adding these two binary codes using a standard 4-bit binary adder. The resulting 4-bit sum may require a correction step to yield the valid Excess-3 code for the corresponding decimal digit of the final answer.\n\nAfter performing the binary addition of the Excess-3 codes for $D_1=8$ and $D_2=9$, a 4-bit sum and a potential carry-out are produced. Which of the following operations describes the necessary correction that must be applied to this 4-bit sum to obtain the valid Excess-3 representation for the least significant digit of the final decimal sum?\n\nA. The sum is already a valid Excess-3 code, so no correction is needed.\n\nB. Add the binary value `0011` to the sum.\n\nC. Subtract the binary value `0011` from the sum.\n\nD. Add the binary value `0110` to the sum.", "solution": "Excess-3 encodes a decimal digit $d$ as the 4-bit binary of $d+3$. Denote this by $E(d)$. For any two digits $x$ and $y$,\n$$\nE(x)+E(y)=(x+3)+(y+3)=x+y+6.\n$$\nA 4-bit adder produces the lower 4 bits $s$ and a carry-out $c=\\left\\lfloor \\frac{x+y+6}{16}\\right\\rfloor$. The desired least significant digit (LSD) of the decimal sum is $(x+y)\\bmod 10$, so its Excess-3 code must be\n$$\nT=((x+y)\\bmod 10)+3.\n$$\nWe compare $T$ to the raw 4-bit sum result in two cases.\n\n1) If $x+y \\le 9$, then $c=0$ and $s=x+y+6$. The target is $T=x+y+3$, hence\n$$\nT-s=(x+y+3)-(x+y+6)=-3,\n$$\nso we must subtract $(0011)_2$ from the 4-bit sum.\n\n2) If $x+y \\ge 10$, then $x+y+6\\geq 16$, so $c=1$ and $s=(x+y+6)-16$. The target is $T=(x+y-10)+3 = x+y-7$, hence\n$$\nT-s=(x+y-7)-\\big((x+y+6)-16\\big)=3,\n$$\nso we must add $(0011)_2$ to the 4-bit sum.\n\nFor the given digits $D_1=8$ and $D_2=9$, we have $x+y=17 \\ge 10$, so the required correction is to add $(0011)_2$. Concretely, $E(8)=(1011)_2$ and $E(9)=(1100)_2$, and\n$$\n(1011)_2+(1100)_2=(1\\,0111)_2\\ \\Rightarrow\\ s=(0111)_2,\\ c=1,\n$$\nthen\n$$\n(0111)_2+(0011)_2=(1010)_2,\n$$\nwhich is the Excess-3 code of $7$ (since $7+3=10$), consistent with $8+9=17$.\n\nTherefore, the necessary correction for this case is to add $(0011)_2$ to the 4-bit sum.", "answer": "$$\\boxed{B}$$", "id": "1934281"}, {"introduction": "Bridging the gap from theory to application, this hands-on design problem challenges you to build a practical digital circuit. You will design a 4-bit BCD to Excess-3 code converter, a fundamental building block in systems that interface between standard BCD and Excess-3 arithmetic logic. By using multiplexers, a common logic component, you will gain practical experience in implementing code conversion logic efficiently. [@problem_id:1934275]", "problem": "In digital systems, Binary Coded Decimal (BCD) is a common way to represent decimal digits 0 through 9, where each digit is encoded with a 4-bit binary number. Another related encoding is the Excess-3 code, where the representation for a decimal digit is its 4-bit binary value plus 3 (0011).\n\nConsider the design of a 4-bit BCD to Excess-3 code converter. The converter takes a 4-bit BCD input, denoted by the bits $A, B, C, D$ where $A$ is the Most Significant Bit (MSB), and produces a 4-bit Excess-3 output, denoted by the bits $W, X, Y, Z$ where $W$ is the MSB.\n\nThe converter is to be constructed using four 4-to-1 multiplexers, with one multiplexer dedicated to generating each of the four output bits. For all four multiplexers, the BCD input bits $B$ and $C$ are used as the select lines, with $S_1 = B$ and $S_0 = C$. The data inputs for the multiplexers, labeled $I_0, I_1, I_2, I_3$, must be connected to a signal from the set {0, 1, $A$, $\\bar{A}$, $D$, $\\bar{D}$}. Note that the BCD inputs corresponding to decimal values 10 through 15 are invalid and can be treated as don't care conditions when simplifying logic.\n\nDetermine the correct ordered tuple of data inputs $(I_0, I_1, I_2, I_3)$ for the multiplexer that generates the output bit $Y$.\n\nA. ($D$, 1, $\\bar{D}$, 0)\n\nB. ($A$, 0, $D$, 1)\n\nC. ($\\bar{D}$, $D$, $\\bar{D}$, $D$)\n\nD. ($\\bar{D}$, $\\bar{D}$, $\\bar{D}$, $\\bar{D}$)\n\nE. ($D$, $\\bar{D}$, $D$, $\\bar{D}$)", "solution": "The Excess-3 code is defined as the binary representation of the decimal digit plus 3. For a BCD input digit with bits $A$ (MSB), $B$, $C$, $D$, the Excess-3 output $WXYZ$ is the 4-bit binary of the decimal value $N+3$, where $N$ is the decimal represented by $ABCD$. The bit $Y$ is the $2$'s place of $WXYZ$.\n\nCompute $Y$ for valid BCD digits $0$ through $9$:\n- $0000 \\to 0011$: $Y=1$\n- $0001 \\to 0100$: $Y=0$\n- $0010 \\to 0101$: $Y=0$\n- $0011 \\to 0110$: $Y=1$\n- $0100 \\to 0111$: $Y=1$\n- $0101 \\to 1000$: $Y=0$\n- $0110 \\to 1001$: $Y=0$\n- $0111 \\to 1010$: $Y=1$\n- $1000 \\to 1011$: $Y=1$\n- $1001 \\to 1100$: $Y=0$\n\nThe 4-to-1 MUX for $Y$ uses $S_1=B$ and $S_0=C$, so\n$$\nY=\\begin{cases}\nI_0, & B=0,\\,C=0\\\\\nI_1, & B=0,\\,C=1\\\\\nI_2, & B=1,\\,C=0\\\\\nI_3, & B=1,\\,C=1\n\\end{cases}\n$$\nWe determine each $I_k$ using only signals from $\\{0,1,A,\\bar{A},D,\\bar{D}\\}$ and using invalid BCD inputs as don't cares.\n\n1) For $(B,C)=(0,0)$: valid inputs are $ABCD=0000,0001,1000,1001$, giving $(A,D)$ and $Y$ as $(0,0)\\mapsto 1$, $(0,1)\\mapsto 0$, $(1,0)\\mapsto 1$, $(1,1)\\mapsto 0$. Hence $Y=\\bar{D}$ independent of $A$. Thus $I_0=\\bar{D}$.\n\n2) For $(B,C)=(0,1)$: valid inputs are $0010,0011$ with $(A,D)=(0,0)\\mapsto 0$, $(0,1)\\mapsto 1$. Hence $Y=D$ for valid cases (values when $A=1$ are don't care). Thus $I_1=D$.\n\n3) For $(B,C)=(1,0)$: valid inputs are $0100,0101$ with $(A,D)=(0,0)\\mapsto 1$, $(0,1)\\mapsto 0$. Hence $Y=\\bar{D}$. Thus $I_2=\\bar{D}$.\n\n4) For $(B,C)=(1,1)$: valid inputs are $0110,0111$ with $(A,D)=(0,0)\\mapsto 0$, $(0,1)\\mapsto 1$. Hence $Y=D$. Thus $I_3=D$.\n\nTherefore, the required ordered tuple is $(I_0, I_1, I_2, I_3)=(\\bar{D},D,\\bar{D},D)$, which corresponds to option C.", "answer": "$$\\boxed{C}$$", "id": "1934275"}]}