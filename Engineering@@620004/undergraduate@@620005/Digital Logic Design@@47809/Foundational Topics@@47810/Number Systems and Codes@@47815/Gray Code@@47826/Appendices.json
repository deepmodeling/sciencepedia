{"hands_on_practices": [{"introduction": "Mastering Gray codes begins with the fundamental skill of converting from the standard binary system. This first exercise provides a direct application of the conversion algorithm, a crucial first step for interfacing with systems that rely on Gray codes for error mitigation. By working through this conversion, you will solidify your understanding of the bitwise operations that define the relationship between binary and Gray codes [@problem_id:1948805].", "id": "1948805", "problem": "In digital systems, particularly in applications like absolute rotary encoders that measure angular position, Gray codes are often preferred over standard binary codes. The key advantage of a Gray code is that consecutive values differ by only a single bit. This property mitigates the risk of erroneous readings during transitions between adjacent positions, where multiple bits changing simultaneously in a standard binary system could be read incorrectly by sensors.\n\nConsider a simple 4-bit absolute rotary encoder that currently outputs its position reading as the standard binary number $1010_2$. To improve system reliability, a conversion to Gray code is required. What is the 4-bit Gray code representation corresponding to the binary value $1010_2$?\n\nSelect the correct Gray code from the options below.\n\nA. 1011\nB. 0101\nC. 1111\nD. 0110\nE. 1001\n\n", "solution": "A 4-bit Gray code $g_{3}g_{2}g_{1}g_{0}$ is obtained from a 4-bit binary code $b_{3}b_{2}b_{1}b_{0}$ by keeping the most significant bit the same and XORing adjacent bits for the rest:\n$$\n\\begin{aligned}\ng_{3} &= b_{3},\\\\\ng_{2} &= b_{3} \\oplus b_{2},\\\\\ng_{1} &= b_{2} \\oplus b_{1},\\\\\ng_{0} &= b_{1} \\oplus b_{0}.\n\\end{aligned}\n$$\nFor $b_{3}b_{2}b_{1}b_{0}=1010$, we have $b_{3}=1$, $b_{2}=0$, $b_{1}=1$, $b_{0}=0$. Compute each Gray bit:\n$$\n\\begin{aligned}\ng_{3} &= 1,\\\\\ng_{2} &= 1 \\oplus 0 = 1,\\\\\ng_{1} &= 0 \\oplus 1 = 1,\\\\\ng_{0} &= 1 \\oplus 0 = 1.\n\\end{aligned}\n$$\nThus the Gray code is $1111$, which corresponds to option C.", "answer": "$$\\boxed{C}$$"}, {"introduction": "Equally as important as encoding is the ability to decode. Many sensors and position encoders output data in Gray code format to ensure reliability, but this data must be converted back to standard binary for processing by conventional arithmetic logic units. This practice problem focuses on the reverse conversion—from Gray code to binary—which completes the essential toolkit for working with these number systems in a practical setting [@problem_id:1948802].", "id": "1948802", "problem": "In many digital systems, such as rotary encoders used for measuring angular position, Gray codes are preferred over standard binary counting. This is because a Gray code sequence only changes one bit at a time between successive values, which prevents errors that can occur during transitions in a standard binary system where multiple bits might change simultaneously.\n\nConsider a 4-bit absolute position encoder that outputs its reading as a Gray code. At a particular instant, the encoder provides the output value `1101`. To use this information in a standard digital processing unit, it must be converted back to its conventional binary representation.\n\nWhat is the 4-bit standard binary value that corresponds to the Gray code `1101`?\n\nA. 1011\nB. 1100\nC. 1001\nD. 0010\nE. 1111\n\n", "solution": "Let the 4-bit Gray code be denoted by bits $(g_{3},g_{2},g_{1},g_{0})$ from most significant to least significant, and the corresponding binary by $(b_{3},b_{2},b_{1},b_{0})$. The standard conversion rule from Gray to binary is:\n$$\nb_{3}=g_{3},\\quad b_{2}=b_{3}\\oplus g_{2},\\quad b_{1}=b_{2}\\oplus g_{1},\\quad b_{0}=b_{1}\\oplus g_{0},\n$$\nwhere $\\oplus$ denotes bitwise exclusive OR.\n\nGiven the Gray code $g_{3}g_{2}g_{1}g_{0}=1101$, we compute:\n$$\nb_{3}=g_{3}=1,\n$$\n$$\nb_{2}=b_{3}\\oplus g_{2}=1\\oplus 1=0,\n$$\n$$\nb_{1}=b_{2}\\oplus g_{1}=0\\oplus 0=0,\n$$\n$$\nb_{0}=b_{1}\\oplus g_{0}=0\\oplus 1=1.\n$$\nTherefore, the binary value is $(b_{3},b_{2},b_{1},b_{0})=(1,0,0,1)$, i.e., $1001$, which corresponds to option C.", "answer": "$$\\boxed{C}$$"}, {"introduction": "This final practice problem challenges you to synthesize your skills in a realistic system-level scenario. It demonstrates a complete \"decode-process-encode\" cycle, where Gray-coded inputs are converted to binary for computation, and the result is converted back to Gray code for output. This exercise illustrates how Gray code conversions function as critical interface logic within a larger digital system, connecting error-resistant data representation with standard binary arithmetic [@problem_id:1958687].", "id": "1958687", "problem": "A specialized digital signal processing system is designed to compute the sum of two 4-bit numbers, designated as $A$ and $B$. These numbers are provided as inputs to the system in Gray code format. Let the input Gray codes be represented as $A_G = A_{G3}A_{G2}A_{G1}A_{G0}$ and $B_G = B_{G3}B_{G2}B_{G1}B_{G0}$.\n\nThe central processing unit of this system consists of a standard 4-bit ripple-carry adder. This adder operates exclusively on numbers in standard binary representation. It takes two 4-bit binary inputs and a carry-in (which is to be grounded, i.e., set to 0 for this operation), and it produces a 4-bit sum and a single carry-out bit.\n\nThe system's full operational sequence is as follows:\n1.  Convert the two 4-bit Gray code inputs ($A_G$ and $B_G$) into their respective 4-bit standard binary equivalents ($A_B$ and $B_B$).\n2.  Add the two binary numbers using the 4-bit ripple-carry adder.\n3.  Combine the resulting 4-bit sum and the 1-bit carry-out to form a single 5-bit binary result.\n4.  Convert this 5-bit binary result into the corresponding 5-bit Gray code, which is the final output of the system.\n\nFor your reference, the conversion from an $(n+1)$-bit binary number $B = B_n B_{n-1} \\dots B_0$ to its corresponding Gray code representation $G = G_n G_{n-1} \\dots G_0$ is defined as follows: the most significant bit is unchanged ($G_n = B_n$), and for all other bits, $G_i = B_{i+1} \\oplus B_i$ for $i \\in \\{0, 1, \\dots, n-1\\}$. The symbol $\\oplus$ denotes the Exclusive OR (XOR) operation.\n\nSuppose the system receives the inputs $A_G = 1101$ and $B_G = 0110$. Which of the following represents the correct 5-bit Gray code output from the system?\n\nA. 01011\nB. 01101\nC. 11010\nD. 01000\nE. 10011\n\n", "solution": "We use standard Gray-to-binary and binary-to-Gray conversions.\n\nGray to binary conversion rule (inverse of the provided rule): for a 4-bit Gray code $G=G_{3}G_{2}G_{1}G_{0}$, the corresponding binary $B=B_{3}B_{2}B_{1}B_{0}$ is given by\n$$\nB_{3}=G_{3},\\quad B_{i}=B_{i+1}\\oplus G_{i}\\ \\text{for}\\ i\\in\\{2,1,0\\}.\n$$\nApply this to $A_{G}=1101$:\n- $A_{B3}=A_{G3}=1$,\n- $A_{B2}=A_{B3}\\oplus A_{G2}=1\\oplus 1=0$,\n- $A_{B1}=A_{B2}\\oplus A_{G1}=0\\oplus 0=0$,\n- $A_{B0}=A_{B1}\\oplus A_{G0}=0\\oplus 1=1$.\nThus $A_{B}=1001$.\n\nApply to $B_{G}=0110$:\n- $B_{B3}=B_{G3}=0$,\n- $B_{B2}=B_{B3}\\oplus B_{G2}=0\\oplus 1=1$,\n- $B_{B1}=B_{B2}\\oplus B_{G1}=1\\oplus 1=0$,\n- $B_{B0}=B_{B1}\\oplus B_{G0}=0\\oplus 0=0$.\nThus $B_{B}=0100$.\n\nAdd the two 4-bit binaries with carry-in grounded ($0$) using the ripple-carry adder:\n$$\n1001+0100=1101,\\quad C_{\\text{out}}=0.\n$$\nCombine carry-out and sum to form the 5-bit binary result $B=B_{4}B_{3}B_{2}B_{1}B_{0}$ with $B_{4}=C_{\\text{out}}$ and $B_{3}B_{2}B_{1}B_{0}$ the 4-bit sum:\n$$\nB=0\\,1101.\n$$\n\nConvert this 5-bit binary to Gray using the given rule for $n=4$:\n$$\nG_{4}=B_{4}=0,\\quad G_{3}=B_{4}\\oplus B_{3}=0\\oplus 1=1,\n$$\n$$\nG_{2}=B_{3}\\oplus B_{2}=1\\oplus 1=0,\\quad G_{1}=B_{2}\\oplus B_{1}=1\\oplus 0=1,\n$$\n$$\nG_{0}=B_{1}\\oplus B_{0}=0\\oplus 1=1.\n$$\nHence the 5-bit Gray output is $01011$, which corresponds to option A.", "answer": "$$\\boxed{A}$$"}]}