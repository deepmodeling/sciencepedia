{"hands_on_practices": [{"introduction": "Before we can design circuits to process text, we must first understand how characters are represented and stored in a computer's memory. This exercise provides a foundational look at the American Standard Code for Information Interchange (ASCII), guiding you through the process of converting familiar characters into their hexadecimal equivalents. By working through this problem, you will also grapple with the concept of byte ordering, or endianness, a crucial detail in digital system architecture. [@problem_id:1909396]", "problem": "In a legacy control system, a 16-bit memory register is used to store a two-character status code. The system follows a big-endian format, where the first character is stored in the high byte (bits 15 through 8) and the second character is in the low byte (bits 7 through 0). The characters are encoded using the standard 7-bit American Standard Code for Information Interchange (ASCII) scheme, where the most significant bit of each 8-bit byte is set to 0.\n\nFor diagnostic purposes, you need to read the content of this register. If the register stores the status code \"OK\", determine its value as a single 4-digit hexadecimal number.\n\nFor your reference, the decimal ASCII values for the characters are:\n- 'O': 79\n- 'K': 75\n\nProvide the resulting 4-digit hexadecimal string.", "solution": "The system uses big-endian storage with 8-bit bytes carrying 7-bit ASCII characters and the most significant bit set to zero. The ASCII values provided are: for 'O', $79$; for 'K', $75$. Converting each decimal code to hexadecimal:\n- For 'O': $79 = 4 \\times 16 + 15 \\implies \\text{byte} = \\text{0x4F}$.\n- For 'K': $75 = 4 \\times 16 + 11 \\implies \\text{byte} = \\text{0x4B}$.\n\nIn big-endian format, the first character occupies the high byte and the second the low byte. The 16-bit register value $R$ can be found by shifting the first byte 8 bits to the left and adding the second byte:\n$$R = (\\text{0x4F} \\times 2^8) + \\text{0x4B} = \\text{0x4F00} + \\text{0x4B} = \\text{0x4F4B}.$$\n\nEquivalently, in decimal form,\n$$R = 79 \\times 2^{8} + 75,$$\nwhich corresponds to the same hexadecimal value $\\text{0x4F4B}$.\n\nThus, the required 4-digit hexadecimal string is $4F4B$.", "answer": "$$\\boxed{4F4B}$$", "id": "1909396"}, {"introduction": "Digital data is not infallible; during transmission or storage, it can be corrupted by noise or hardware faults. This practice problem simulates such a scenario, where a single bit in an ASCII character is flipped, altering its meaning entirely. By tracing the effect of this error from the binary level back to the resulting character, you will develop a deeper appreciation for data integrity and the critical role each bit plays in a character's representation. [@problem_id:1909443]", "problem": "A digital communication system is designed to transmit text data using the 7-bit American Standard Code for Information Interchange (ASCII). A specific communication channel within this system has a persistent hardware fault. This fault causes the value of bit 2 to be inverted (flipped from 0 to 1, or 1 to 0) for every 7-bit character that passes through it. The bits are indexed from 0 to 6, with bit 0 representing the Least Significant Bit (LSB).\n\nYou are given that the 7-bit ASCII code for the numeral character '0' is equivalent to the decimal value 48. The codes for the subsequent numerals '1', '2', ..., '9' follow in sequential decimal order.\n\nIf the character '6' is transmitted from the source, which of the following characters is ultimately received at the destination?\n\nA. '2'\n\nB. '4'\n\nC. '&'\n\nD. ':'\n\nE. '6'", "solution": "The 7-bit ASCII code for the character '0' is given as the decimal value $48$. Since the codes for '1', '2', ..., '9' follow sequentially, the ASCII code for '6' is\n$$48 + 6 = 54.$$\nExpress $54$ in powers of $2$ to identify its bit pattern with bit $0$ as the least significant bit:\n$$54 = 32 + 16 + 4 + 2 = 2^{5} + 2^{4} + 2^{2} + 2^{1}.$$\nThus, in the 7-bit representation, bit $2$ is initially $1$.\n\nThe channel flips bit $2$ for every character. Flipping bit $2$ toggles the $2^{2}$ place. Since it is initially $1$, flipping it to $0$ decreases the value by $2^{2}$:\n$$54 - 2^{2} = 54 - 4 = 50.$$\nNow, $50$ corresponds to the ASCII code $48 + 2$, which is the character '2'.\n\nTherefore, the received character is '2', which matches option A.", "answer": "$$\\boxed{A}$$", "id": "1909443"}, {"introduction": "The true power of digital logic lies in its ability to make 'decisions' based on binary inputs. This hands-on design challenge tasks you with creating a combinational logic circuit that can identify lowercase vowels from their 7-bit ASCII codes. This exercise bridges the gap between the abstract concept of character encoding and the practical implementation of hardware, requiring you to apply Boolean algebra and minimization techniques to build an intelligent character-processing system. [@problem_id:1909416]", "problem": "A digital control system is tasked with parsing a stream of characters encoded using the 7-bit American Standard Code for Information Interchange (ASCII). A crucial function of this system is to implement a combinational logic circuit that can detect whether an incoming character is a lowercase vowel ('a', 'e', 'i', 'o', 'u').\n\nThe circuit accepts a 7-bit input, represented by the variables $A_6, A_5, A_4, A_3, A_2, A_1, A_0$, where $A_6$ is the most significant bit (MSB). The circuit must produce a single bit output, $V$, which evaluates to logic '1' if the input character is one of the five lowercase vowels, and to logic '0' otherwise.\n\nThe 7-bit ASCII codes (in binary, with bit $A_6$ on the left) for the lowercase vowels are provided below:\n- 'a': `1100001`\n- 'e': `1100101`\n- 'i': `1101001`\n- 'o': `1101111`\n- 'u': `1110101`\n\nYour task is to derive the minimal sum-of-products (SOP) Boolean expression for the output logic function $V$ in terms of the input bits. In your final expression, denote the logical NOT operation with an apostrophe (e.g., $A_0'$), the logical AND operation by juxtaposition (e.g., $A_1 A_0$), and the logical OR operation with a `+` symbol.", "solution": "We are given a 7-bit ASCII input $(A_{6},A_{5},A_{4},A_{3},A_{2},A_{1},A_{0})$ and must output $V=1$ only for the lowercase vowels:\n- a: $1100001$\n- e: $1100101$\n- i: $1101001$\n- o: $1101111$\n- u: $1110101$\n\nFrom these codes, observe that $A_{6}=1$, $A_{5}=1$, and $A_{0}=1$ for all five vowels. By the Boolean algebra factoring rule (common literal extraction), the function can be written as\n$$\nV \\;=\\; A_{6}A_{5}A_{0}\\,f(A_{4},A_{3},A_{2},A_{1}),\n$$\nwhere $f$ is $1$ at the four-bit combinations corresponding to the listed vowels:\n- a: $(A_{4},A_{3},A_{2},A_{1})=0000$\n- e: $0010$\n- i: $0100$\n- o: $0111$\n- u: $1010$\n\nWe now minimize $f$ as a sum of products by grouping adjacent minterms (Karnaugh-map or adjacency reasoning):\n- Pair a $(0000)$ with i $(0100)$: they differ only in $A_{3}$. The implicant is $A_{4}'A_{2}'A_{1}'$ (since $A_{4}=0$, $A_{2}=0$, $A_{1}=0$ are fixed and $A_{3}$ is free). This covers a and i.\n- Pair e $(0010)$ with u $(1010)$: they differ only in $A_{4}$. The implicant is $A_{3}'A_{2}A_{1}'$ (since $A_{3}=0$, $A_{2}=1$, $A_{1}=0$ are fixed and $A_{4}$ is free). This covers e and u.\n- The minterm o $(0111)$ has no adjacent $1$ among the given five, so it forms an essential singleton implicant $A_{4}'A_{3}A_{2}A_{1}$.\n\nThus the minimal sum of products for $f$ is\n$$\nf \\;=\\; A_{4}'A_{2}'A_{1}' \\;+\\; A_{3}'A_{2}A_{1}' \\;+\\; A_{4}'A_{3}A_{2}A_{1}.\n$$\nReintroducing the common factor $A_{6}A_{5}A_{0}$ and writing the overall function in SOP form gives\n$$\nV \\;=\\; A_{6}A_{5}A_{0}A_{4}'A_{2}'A_{1}' \\;+\\; A_{6}A_{5}A_{0}A_{3}'A_{2}A_{1}' \\;+\\; A_{6}A_{5}A_{0}A_{4}'A_{3}A_{2}A_{1}.\n$$\nEach product term corresponds to a prime implicant derived from valid adjacencies, with the singleton for o being necessary. No further reduction is possible because o has no adjacent vowel minterm, and removing any of the three terms would leave at least one vowel uncovered.", "answer": "$$\\boxed{A_{6}A_{5}A_{0}A_{4}'A_{2}'A_{1}' + A_{6}A_{5}A_{0}A_{3}'A_{2}A_{1}' + A_{6}A_{5}A_{0}A_{4}'A_{3}A_{2}A_{1}}$$", "id": "1909416"}]}