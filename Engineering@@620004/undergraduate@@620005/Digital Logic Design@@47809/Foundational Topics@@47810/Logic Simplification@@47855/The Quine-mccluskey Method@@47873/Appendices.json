{"hands_on_practices": [{"introduction": "The Quine-McCluskey method is powerful because of its systematic, step-by-step nature, but this also means a small error in an early step can cascade. This first practice focuses on the foundational skill of combining minterms, a common point of error. By analyzing a pre-computed list and identifying the mistake [@problem_id:1970791], you will sharpen your understanding of the core combination rule: terms can only be merged if their binary representations differ by exactly one bit.", "problem": "A student is using the Quine-McCluskey (QM) tabular method to find the prime implicants of a 4-variable Boolean function, $F(A,B,C,D)$. The function is defined by the sum of minterms $F(A,B,C,D) = \\sum m(0, 1, 2, 5, 6, 7, 8, 9, 10, 14)$.\n\nIn the first step of the QM method, the student groups the minterms by the number of '1's in their binary representation and then combines terms from adjacent groups. A combination is represented by a 4-character string using '0', '1', and '_' for the don't-care position, corresponding to variables A, B, C, and D, respectively.\n\nThe student generates the following list of combined terms (first-level implicants):\n`000_`, `00_0`, `_000`, `0_01`, `_001`, `0_10`, `_010`, `100_`, `10_0`, `01_1`, `011_`, `11_0`, `1_10`\n\nOne of these terms is the result of an error in the combination process. Identify the incorrect term and the correct term that should have been generated from the same pair of original minterms.\n\nWhich of the following options correctly identifies the incorrect term from the student's list and the correct term that should replace it?\n\nA. Incorrect: `_001`, Correct: `00_1`\n\nB. Incorrect: `11_0`, Correct: `_110`\n\nC. Incorrect: `01_1`, Correct: `_1_1`\n\nD. Incorrect: `10_0`, Correct: `_0_0`\n\nE. Incorrect: `0_10`, Correct: `_010`", "solution": "We are given the minterms of a 4-variable function in terms of indices: $\\{0,1,2,5,6,7,8,9,10,14\\}$, with variables ordered as $A$ (MSB), $B$, $C$, $D$ (LSB). Write each minterm in binary as $ABCD$:\n$0:\\ \\text{0000}$, $1:\\ \\text{0001}$, $2:\\ \\text{0010}$, $5:\\ \\text{0101}$, $6:\\ \\text{0110}$, $7:\\ \\text{0111}$, $8:\\ \\text{1000}$, $9:\\ \\text{1001}$, $10:\\ \\text{1010}$, $14:\\ \\text{1110}$.\n\nGroup by Hamming weight (number of ones):\n$G_{0}=\\{0\\}$, $G_{1}=\\{1,2,8\\}$, $G_{2}=\\{5,6,9,10\\}$, $G_{3}=\\{7,14\\}$, $G_{4}=\\varnothing$.\n\nCombine adjacent groups when pairs differ in exactly one bit, producing first-level implicants as 4-character strings over $\\{0,1,\\_\\}$ corresponding to $A,B,C,D$.\n\nFrom $G_{0}$ with $G_{1}$:\n- $0\\ (\\,\\text{0000}\\,)$ with $1\\ (\\,\\text{0001}\\,)\\ \\rightarrow\\ \\text{000\\_}$.\n- $0$ with $2\\ (\\,\\text{0010}\\,)\\ \\rightarrow\\ \\text{00\\_0}$.\n- $0$ with $8\\ (\\,\\text{1000}\\,)\\ \\rightarrow\\ \\text{\\_000}$.\n\nFrom $G_{1}$ with $G_{2}$:\n- $1\\ (\\,\\text{0001}\\,)$ with $5\\ (\\,\\text{0101}\\,)\\ \\rightarrow\\ \\text{0\\_01}$.\n- $1$ with $6$ invalid (differs in three bits).\n- $1$ with $9\\ (\\,\\text{1001}\\,)\\ \\rightarrow\\ \\text{\\_001}$.\n- $1$ with $10$ invalid.\n- $2\\ (\\,\\text{0010}\\,)$ with $5$ invalid.\n- $2$ with $6\\ (\\,\\text{0110}\\,)\\ \\rightarrow\\ \\text{0\\_10}$.\n- $2$ with $9$ invalid.\n- $2$ with $10\\ (\\,\\text{1010}\\,)\\ \\rightarrow\\ \\text{\\_010}$.\n- $8\\ (\\,\\text{1000}\\,)$ with $5$ invalid.\n- $8$ with $6$ invalid.\n- $8$ with $9\\ (\\,\\text{1001}\\,)\\ \\rightarrow\\ \\text{100\\_}$.\n- $8$ with $10\\ (\\,\\text{1010}\\,)\\ \\rightarrow\\ \\text{10\\_0}$.\n\nFrom $G_{2}$ with $G_{3}$:\n- $5\\ (\\,\\text{0101}\\,)$ with $7\\ (\\,\\text{0111}\\,)\\ \\rightarrow\\ \\text{01\\_1}$.\n- $5$ with $14$ invalid.\n- $6\\ (\\,\\text{0110}\\,)$ with $7\\ (\\,\\text{0111}\\,)\\ \\rightarrow\\ \\text{011\\_}$.\n- $6\\ (\\,\\text{0110}\\,)$ with $14\\ (\\,\\text{1110}\\,)\\ \\rightarrow\\ \\text{\\_110}$ (they differ only in $A$).\n- $9$ with $7$ invalid.\n- $9$ with $14$ invalid.\n- $10$ with $7$ invalid.\n- $10\\ (\\,\\text{1010}\\,)$ with $14\\ (\\,\\text{1110}\\,)\\ \\rightarrow\\ \\text{1\\_10}$.\n\nCollecting all valid first-level implicants: $\\text{000\\_}, \\text{00\\_0}, \\text{\\_000}, \\text{0\\_01}, \\text{\\_001}, \\text{0\\_10}, \\text{\\_010}, \\text{100\\_}, \\text{10\\_0}, \\text{01\\_1}, \\text{011\\_}, \\text{\\_110}, \\text{1\\_10}$.\n\nComparing with the student's list: $\\text{000\\_}, \\text{00\\_0}, \\text{\\_000}, \\text{0\\_01}, \\text{\\_001}, \\text{0\\_10}, \\text{\\_010}, \\text{100\\_}, \\text{10\\_0}, \\text{01\\_1}, \\text{011\\_}, \\text{11\\_0}, \\text{1\\_10}$, the discrepancy is that $\\text{\\_110}$ is missing and in its place the student has $\\text{11\\_0}$.\n\nThe term $\\text{11\\_0}$ would arise from minterms $\\text{1100}$ and $\\text{1110}$, i.e., $12$ and $14$, but $12$ is not in the given minterm set, so $\\text{11\\_0}$ is invalid. The correct term from the valid pair $6\\ (\\,\\text{0110}\\,)$ and $14\\ (\\,\\text{1110}\\,)$ is $\\text{\\_110}$. Therefore, the correct option is B.", "answer": "$$\\boxed{B}$$", "id": "1970791"}, {"introduction": "Now let's apply the entire Quine-McCluskey process to a practical design scenario that includes \"don't care\" conditions, which often arise in real-world digital systems. This exercise will guide you through the full workflow: grouping minterms and don't cares, systematically finding all prime implicants, and using a prime implicant chart to identify essential terms. This practice [@problem_id:1970764] demonstrates how to use don't cares to an advantage, leading to a more simplified and efficient final logic expression.", "problem": "A fail-safe mechanism for an automated manufacturing arm is controlled by four binary sensors, represented by the variables $A$, $B$, $C$, and $D$. The arm is designed to halt ($F=1$) for certain critical sensor combinations to prevent accidents or damage. The system's logic is described by the Boolean function $F(A,B,C,D)$, where $A$ is the most significant bit.\n\nThe halt signal $F$ must be active for the input combinations corresponding to the minterms $m_4, m_5, m_6, m_8, m_9, m_{10},$ and $m_{13}$. Due to the physical arrangement of the sensors, the input combinations for minterms $m_0, m_7,$ and $m_{15}$ will never occur. These can be treated as don't care conditions to simplify the control logic.\n\nYour task is to derive the simplified logic function with the minimum number of literals that implements this behavior. Use the Quine-McCluskey (tabular) method to find the minimal Sum-of-Products (SOP) expression for the function $F(A,B,C,D)$. In your final expression, use overbars for negation (e.g., $\\bar{A}$).", "solution": "We are given the on-set and don't-care sets for a four-variable Boolean function with $A$ as the most significant bit:\n$$F(A,B,C,D)=\\sum m(4,5,6,8,9,10,13),\\quad d(A,B,C,D)=\\sum m(0,7,15).$$\n\n**Step 1: Group Minterms and Don't Cares**\nList all minterms (including don't cares) in binary, grouped by the number of '1's.\n- Group 0 (0 ones): $m_0$ (0000)\n- Group 1 (1 one): $m_4$ (0100), $m_8$ (1000)\n- Group 2 (2 ones): $m_5$ (0101), $m_6$ (0110), $m_9$ (1001), $m_{10}$ (1010)\n- Group 3 (3 ones): $m_7$ (0111), $m_{13}$ (1101)\n- Group 4 (4 ones): $m_{15}$ (1111)\n\n**Step 2: Generate Prime Implicants**\nFirst, combine terms from adjacent groups that differ by exactly one bit. A checkmark (✓) indicates a term has been combined.\n*Column 1*\n- Group 0: 0(0000) ✓\n- Group 1: 4(0100) ✓, 8(1000) ✓\n- Group 2: 5(0101) ✓, 6(0110) ✓, 9(1001) ✓, 10(1010) ✓\n- Group 3: 7(0111) ✓, 13(1101) ✓\n- Group 4: 15(1111) ✓\n\n*Column 2 (1-dash implicants)*\n- (0,4) 0-00 ✓ -> `A'C'D'`\n- (0,8) -000 ✓ -> `B'C'D'`\n- (4,5) 010- -> `A'BC'` (not used in further combination)\n- (4,6) 01-0 ✓ -> `A'BD'`\n- (8,9) 100- ✓ -> `AB'C`\n- (8,10) 10-0 ✓ -> `AB'D'`\n- (5,7) 01-1 ✓ -> `A'BD`\n- (6,7) 011- ✓ -> `A'BC`\n- (9,13) 1-01 ✓ -> `AC'D`\n- (7,15) -111 ✓ -> `BCD`\n- (13,15) 11-1 ✓ -> `ABD`\n\nSecond, combine terms from Column 2. Terms must have dashes in the same position and differ by one bit.\n*Column 3 (2-dash implicants)*\n- (0,4,8,12) -> No $m_{12}$.\n- (4,6,5,7) from (4,6) `01-0` and (5,7) `01-1` -> `01--` (`A'B`)\n- (8,9,10,11) -> No $m_{11}$.\n- (5,7,13,15) from (5,7) `01-1` and (13,15) `11-1` -> `-1-1` (`BD`)\n\nThe Prime Implicants (PIs) are all terms that were not combined further (not checkmarked).\n- From Column 2: `010-` (`A'BC'`), `100-` (`AB'C`), `10-0` (`AB'D'`), `1-01` (`AC'D`). Let's check for absorption.\n  - `010-` (4,5) is covered by `01--` (4,5,6,7). So `A'BC'` is not a PI.\n- Let's list the PIs from scratch by taking all unchecked terms from all combination steps:\n  - PI 1: `A'B` (from `01--`)\n  - PI 2: `BD` (from `-1-1`)\n  - And all terms from Column 2 that were not used to form Column 3. Let's re-verify the list of PIs: `A'B`, `AC'D`, `AB'D'`, `B'C'D'`, `A'C'D'`. The combination (0,4) `0-00` and (8,9) `100-` do not combine. So my list of checked items was too fast.\nLet's restart the PI finding carefully. The PIs are: `A'B`, `BD`, `A'C'D'`, `B'C'D'`, `AB'C`, `AB'D'`, `AC'D`.\n\n**Step 3: Construct the Prime Implicant Chart**\nWe build a chart with required minterms $\\{4,5,6,8,9,10,13\\}$ as columns and our PIs as rows.\n- PI A: `A'B` (covers 4, 5, 6, 7)\n- PI B: `BD` (covers 5, 7, 13, 15)\n- PI C: `A'C'D'` (covers 0, 4)\n- PI D: `B'C'D'` (covers 0, 8)\n- PI E: `AB'C` (covers 8, 9)\n- PI F: `AB'D'` (covers 8, 10)\n- PI G: `AC'D` (covers 9, 13)\n\n| PI | Term | Covers | $m_4$ | $m_5$ | $m_6$ | $m_8$ | $m_9$ | $m_{10}$ | $m_{13}$ |\n|:---|:---|:---|:---:|:---:|:---:|:---:|:---:|:---:|:---:|\n| A | $\\bar{A}B$ | 4,5,6 | X | X | X | | | | |\n| B | $BD$ | 5,13 | | X | | | | | X |\n| C | $\\bar{A}\\bar{C}\\bar{D}$ | 4 | X | | | | | | |\n| D | $\\bar{B}\\bar{C}\\bar{D}$ | 8 | | | | X | | | |\n| E | $A\\bar{B}\\bar{C}$ | 8,9 | | | | X | X | | |\n| F | $A\\bar{B}\\bar{D}$ | 8,10 | | | | X | | X | |\n| G | $A\\bar{C}D$ | 9,13 | | | | | X | | X |\n\n**Step 4: Find Minimal Cover**\n- **Essential PIs**: Look for columns with a single 'X'.\n  - $m_6$ is covered only by PI A ($\\bar{A}B$). So, **$\\bar{A}B$ is an Essential PI.** It covers minterms $m_4, m_5, m_6$.\n  - $m_{10}$ is covered only by PI F ($A\\bar{B}\\bar{D}$). So, **$A\\bar{B}\\bar{D}$ is an Essential PI.** It covers minterms $m_8, m_{10}$.\n- **Remaining Minterms**: After selecting the essential PIs, the covered minterms are $\\{4, 5, 6, 8, 10\\}$. The remaining minterms to cover are $\\{9, 13\\}$.\n- **Secondary Cover**: We need to cover $m_9$ and $m_{13}$.\n  - To cover $m_9$, we can use PI E or PI G.\n  - To cover $m_{13}$, we can use PI B or PI G.\n  - PI G ($A\\bar{C}D$) covers both $m_9$ and $m_{13}$. It is the most efficient choice.\n\nThe minimal SOP expression is the sum of the selected PIs: $\\bar{A}B + A\\bar{B}\\bar{D} + A\\bar{C}D$.", "answer": "$$\\boxed{\\bar{A}B + A\\bar{B}\\bar{D} + A\\bar{C}D}$$", "id": "1970764"}, {"introduction": "In some cases, the prime implicant chart does not immediately reveal a single, minimal solution, a situation known as a cyclic covering problem. This advanced exercise explores such a scenario, where multiple, equally minimal Sum-of-Products (SOP) expressions exist. By working through this problem [@problem_id:1970777], you will learn how to identify and resolve these cycles, often requiring a method like Petrick's, to ensure all possible minimal solutions are found.", "problem": "A 4-variable Boolean function $F(W, X, Y, Z)$ is defined by the set of its minterms. The function evaluates to 1 for the minterms corresponding to the decimal values in the set $\\{0, 1, 2, 5, 6, 7, 13\\}$. Using the Quine-McCluskey (tabular) method of logic minimization, determine the total number of distinct minimal Sum-of-Products (SOP) expressions for the function $F(W, X, Y, Z)$.", "solution": "The problem asks for the number of distinct minimal Sum-of-Products (SOP) expressions for the Boolean function:\n$$F(W, X, Y, Z) = \\sum m(0, 1, 2, 5, 6, 7, 13)$$\nWe will use the Quine-McCluskey tabular method.\n\n**Step 1: Group Minterms by Number of 1s**\n\nFirst, we list the minterms in their 4-bit binary representation and group them by the number of '1's.\n\n-   Group 0 (0 ones): $m_0 = 0000$\n-   Group 1 (1 one): $m_1 = 0001$, $m_2 = 0010$\n-   Group 2 (2 ones): $m_5 = 0101$, $m_6 = 0110$\n-   Group 3 (3 ones): $m_7 = 0111$, $m_{13} = 1101$\n\n**Step 2: Generate Prime Implicants**\n\nNext, we combine minterms from adjacent groups that differ by only one bit. No further combinations are possible after this step, so all resulting terms are Prime Implicants (PIs).\n\n-   $m(0,1) \\rightarrow 000- \\rightarrow W'X'Y'$ (PI_1)\n-   $m(0,2) \\rightarrow 00-0 \\rightarrow W'X'Z'$ (PI_2)\n-   $m(1,5) \\rightarrow 0-01 \\rightarrow W'Y'Z$ (PI_3)\n-   $m(2,6) \\rightarrow 0-10 \\rightarrow W'YZ'$ (PI_4)\n-   $m(5,7) \\rightarrow 01-1 \\rightarrow W'XZ$ (PI_5)\n-   $m(5,13) \\rightarrow -101 \\rightarrow XY'Z$ (PI_6)\n-   $m(6,7) \\rightarrow 011- \\rightarrow W'XY$ (PI_7)\n\n**Step 3: Construct the Prime Implicant Chart**\n\nWe create a chart with minterms as columns and PIs as rows.\n\n| PI (covers) | $m_0$ | $m_1$ | $m_2$ | $m_5$ | $m_6$ | $m_7$ | $m_{13}$ |\n| :--- | :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| $PI_1$ (0,1) | X | X | | | | | |\n| $PI_2$ (0,2) | X | | X | | | | |\n| $PI_3$ (1,5) | | X | | X | | | |\n| $PI_4$ (2,6) | | | X | | X | | |\n| $PI_5$ (5,7) | | | | X | | X | |\n| $PI_6$ (5,13)| | | | X | | | X |\n| $PI_7$ (6,7) | | | | | X | X | |\n\n**Step 4: Identify Essential Prime Implicants (EPIs)**\n\nAn EPI covers a minterm no other PI covers. We look for columns with only a single 'X'.\n-   The column for minterm $m_{13}$ has only one 'X', corresponding to $PI_6$.\n-   Therefore, **$PI_6 (XY'Z)$ is an Essential Prime Implicant.**\n\n$PI_6$ covers minterms $m_5$ and $m_{13}$. We add $PI_6$ to our minimal expression and remove these minterms from the list to be covered. The remaining minterms are $\\{0, 1, 2, 6, 7\\}$.\n\n**Step 5: Analyze the Reduced Prime Implicant Chart (Cyclic Cover)**\n\nWe now create a new chart for the remaining minterms and PIs. In this reduced chart, there are no columns with a single 'X', indicating a cyclic covering problem.\n\n| PI (covers) | $m_0$ | $m_1$ | $m_2$ | $m_6$ | $m_7$ |\n| :--- | :---: | :---: | :---: | :---: | :---: |\n| $PI_1$ (0,1) | X | X | | | |\n| $PI_2$ (0,2) | X | | X | | |\n| $PI_3$ (1,5) | | X | | | |\n| $PI_4$ (2,6) | | | X | X | |\n| $PI_5$ (5,7) | | | | | X |\n| $PI_7$ (6,7) | | | | X | X |\n\n**Step 6: Solve the Cyclic Covering Problem (Petrick's Method)**\n\nWe write a Boolean expression $P$ which is true when all remaining minterms are covered. Each clause corresponds to a minterm, and the variables in the clause are the PIs that cover it.\n$$P = (PI_1+PI_2)(PI_1+PI_3)(PI_2+PI_4)(PI_4+PI_7)(PI_5+PI_7)$$\n\nWe expand this expression into a sum-of-products form using Boolean algebra rules like $(A+B)(A+C)=A+BC$ and $A+AB=A$.\n$P = (PI_1 + PI_2 PI_3) (PI_2 + PI_4) (PI_7 + PI_4 PI_5)$\n$P = (PI_1 PI_2 + PI_1 PI_4 + PI_2 PI_3) (PI_7 + PI_4 PI_5)$\n$P = PI_1 PI_2 PI_7 + PI_1 PI_4 PI_7 + PI_2 PI_3 PI_7 + PI_1 PI_2 PI_4 PI_5 + PI_1 PI_4 PI_5 + PI_2 PI_3 PI_4 PI_5$\n\nUsing absorption ($A + AB = A$), the term $PI_1 PI_4 PI_5$ absorbs $PI_1 PI_2 PI_4 PI_5$.\nThe simplified expression is:\n$P = PI_1 PI_2 PI_7 + PI_1 PI_4 PI_7 + PI_2 PI_3 PI_7 + PI_1 PI_4 PI_5 + PI_2 PI_3 PI_4 PI_5$\n\nEach product term in $P$ represents a valid set of PIs to cover the remaining minterms. We seek the terms with the minimum number of PIs.\n-   $PI_1 PI_2 PI_7$ (3 PIs)\n-   $PI_1 PI_4 PI_7$ (3 PIs)\n-   $PI_2 PI_3 PI_7$ (3 PIs)\n-   $PI_1 PI_4 PI_5$ (3 PIs)\n-   $PI_2 PI_3 PI_4 PI_5$ (4 PIs)\n\nThe minimal solutions for the reduced problem are the four sets with 3 PIs each.\n\n**Step 7: Final Count of Minimal Expressions**\n\nEach of these four sets, when combined with the essential prime implicant $PI_6$, forms a distinct minimal SOP expression for the original function $F$. Since all PIs are 3-literal terms, all four expressions have the same minimal literal count of $4 \\times 3 = 12$. The four minimal solutions are:\n1.  $F = PI_6 + PI_1 + PI_2 + PI_7 \\rightarrow F = XY'Z + W'X'Y' + W'X'Z' + W'XY$\n2.  $F = PI_6 + PI_1 + PI_4 + PI_7 \\rightarrow F = XY'Z + W'X'Y' + W'YZ' + W'XY$\n3.  $F = PI_6 + PI_2 + PI_3 + PI_7 \\rightarrow F = XY'Z + W'X'Z' + W'Y'Z + W'XY$\n4.  $F = PI_6 + PI_1 + PI_4 + PI_5 \\rightarrow F = XY'Z + W'X'Y' + W'YZ' + W'XZ$\n\nTherefore, there are 4 distinct minimal SOP expressions for the function.", "answer": "$$\\boxed{4}$$", "id": "1970777"}]}