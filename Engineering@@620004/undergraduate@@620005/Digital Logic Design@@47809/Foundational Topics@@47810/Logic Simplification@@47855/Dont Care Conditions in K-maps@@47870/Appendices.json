{"hands_on_practices": [{"introduction": "This first practice exercise demonstrates the immense power of don't-care conditions in a tangible way. We explore a safety-critical system where the logic must enable an action for a single, specific input ($ABCD = 1101$) and disable it for another single, critical input ($ABCD = 1111$). This scenario, where all other 14 input states are irrelevant, creates a vast space of don't-cares, showing how maximum flexibility can lead to dramatic and unexpected simplification. [@problem_id:1930513]", "problem": "A safety interlock system for an experimental plasma thruster is being designed. The state of the thruster's pre-ignition chamber is monitored by a 4-bit digital word, represented by the variables $A, B, C, D$, where $A$ is the Most Significant Bit (MSB) and $D$ is the Least Significant Bit (LSB).\n\nThe thruster is designed to be fired only when the chamber is in one specific, stable state. A logic circuit outputs a \"Safe-to-Fire\" signal, $F$, which must be HIGH (logic 1) if and only if the state is $ABCD = 1101$.\n\nFurthermore, engineering analysis has identified a critically unstable state, $ABCD = 1111$. To guarantee safety, the \"Safe-to-Fire\" signal $F$ must be LOW (logic 0) for this specific state.\n\nFor all other 14 possible 4-bit states, the system is in a transient phase where firing is not initiated. As the \"Safe-to-Fire\" signal's value is irrelevant during these transient states, they can be treated as don't-care conditions in the logic design.\n\nDetermine the minimal Sum-of-Products (SOP) expression for the \"Safe-to-Fire\" signal $F$ in terms of the input variables $A, B, C, and D$.", "solution": "The problem asks for the minimal Sum-of-Products (SOP) expression for a 4-input logic function $F(A, B, C, D)$. We can solve this using a Karnaugh map (K-map).\n\nFirst, let's summarize the function's output based on the problem description. The inputs are $A, B, C, D$, where $A$ is the MSB. We can represent the 4-bit input as a decimal minterm number.\n\n1.  The output $F$ is 1 for the input state $ABCD = 1101_2$. This corresponds to the decimal value $1 \\cdot 2^3 + 1 \\cdot 2^2 + 0 \\cdot 2^1 + 1 \\cdot 2^0 = 8 + 4 + 0 + 1 = 13$. So, $F=1$ for minterm $m_{13}$.\n\n2.  The output $F$ is 0 for the input state $ABCD = 1111_2$. This corresponds to the decimal value $1 \\cdot 2^3 + 1 \\cdot 2^2 + 1 \\cdot 2^1 + 1 \\cdot 2^0 = 8 + 4 + 2 + 1 = 15$. So, $F=0$ for minterm $m_{15}$.\n\n3.  For all other 14 states, the output is a don't-care, denoted by $X$.\n\nNow, we can construct a 4-variable K-map. We'll use $AB$ to label the rows and $CD$ to label the columns, following Gray code ordering (00, 01, 11, 10).\n\nThe K-map is populated as follows:\n-   Place a '1' in the cell corresponding to minterm $m_{13}$ (row $AB=11$, column $CD=01$).\n-   Place a '0' in the cell corresponding to minterm $m_{15}$ (row $AB=11$, column $CD=11$).\n-   Place 'X's in all other 14 cells.\n\nThe resulting K-map is:\n$$\n\\begin{array}{c|c|c|c|c|}\n\\multicolumn{1}{c}{} & \\multicolumn{4}{c}{CD} \\\\\n\\cline{3-5}\n\\multicolumn{1}{c}{AB} & 00 & 01 & 11 & 10 \\\\\n\\cline{2-5}\n00 & X & X & X & X \\\\\n\\cline{2-5}\n01 & X & X & X & X \\\\\n\\cline{2-5}\n11 & X & 1 & 0 & X \\\\\n\\cline{2-5}\n10 & X & X & X & X \\\\\n\\cline{2-5}\n\\end{array}\n$$\n\nOur goal is to find the largest possible group (or groups) of adjacent cells that cover all the '1's on the map. We can use the 'X's to make the group larger, but we must not include any '0's. In this case, we only need to cover the single '1' at cell $m_{13}$.\n\nLet's examine possible groupings for the '1' at $m_{13}$:\n-   **Group of 16:** Not possible as it would have to include the '0' at $m_{15}$.\n-   **Groups of 8:** We can form a group of 8 if eight adjacent cells contain the '1' and seven 'X's, and no '0's.\n    -   Consider the block of 8 cells where the variable $C$ is 0. These are the two columns corresponding to $CD=00$ and $CD=01$. This group consists of minterms $\\{m_0, m_1, m_4, m_5, m_8, m_9, m_{12}, m_{13}\\}$. This group contains our '1' (at $m_{13}$) and seven 'X's. It does not contain the '0' at $m_{15}$. Therefore, this is a valid group. The variable that is constant in this group is $C=0$, so the term for this group is $\\bar{C}$.\n    -   Consider the block where $A=1$ (rows $AB=10, 11$). This contains $\\{m_8, m_9, m_{11}, m_{10}, m_{12}, m_{13}, m_{15}, m_{14}\\}$. This group is invalid because it includes the '0' at $m_{15}$.\n    -   Other possible groups of 8 (for $B=1$ or $D=1$) will also include the cell $m_{15}$ and are thus invalid.\n\n-   **Groups of 4 or 2:** We could form smaller groups, for example, a group of 4 covering $\\{m_1, m_5, m_9, m_{13}\\}$, which gives the term $\\bar{C}D$. However, the goal is to find the minimal SOP expression, which requires finding the largest possible prime implicants. The group of 8 we found (giving $\\bar{C}$) is larger than any possible group of 4 or 2.\n\nSince the single '1' on the map is covered by the prime implicant $\\bar{C}$, and this is the largest possible grouping, it is the essential prime implicant that forms the minimal SOP expression.\n\nThus, the minimal SOP expression for the \"Safe-to-Fire\" signal is $F(A, B, C, D) = \\bar{C}$.", "answer": "$$\\boxed{\\overline{C}}$$", "id": "1930513"}, {"introduction": "Moving from undefined states to impossible inputs, this problem focuses on don't-cares that arise from known system constraints. Here, we are tasked with designing a validation circuit for a 4-bit status word where the two most significant bits, $A$ and $B$, are guaranteed to never be identical. This exercise [@problem_id:1930491] challenges you to use this structural constraint to simplify a function based on the number of active signals, reinforcing how understanding a system's operational boundaries is key to efficient logic design.", "problem": "A digital controller for an experimental quantum computing array receives a 4-bit status word, denoted by $A, B, C, D$, where $A$ is the most significant bit. A key component of the system's communication protocol ensures that the two most significant bits, $A$ and $B$, are never identical; any status word where $A$ and $B$ are the same is guaranteed not to occur.\n\nThe controller must implement a validation logic function, $F(A, B, C, D)$, which outputs a '1' (HIGH) if and only if the number of set bits (i.e., the number of '1's) in the 4-bit status word is a prime number, specifically 2 or 3. For all other possible status words, the function should output '0' (LOW).\n\nGiven these conditions, determine the minimal sum-of-products (SOP) expression for the validation function $F(A, B, C, D)$. Use standard Boolean notation where addition (+) represents the OR operation, concatenation represents the AND operation, and a prime (') denotes the NOT operation (e.g., $A'B+CD'$).", "solution": "We are given a 4-bit word $(A,B,C,D)$ with the guarantee that $A$ and $B$ are never equal. Thus only the cases $AB=01$ and $AB=10$ can occur; cases $AB=00$ and $AB=11$ are impossible and may be treated as don't-cares for minimization.\n\nThe function $F(A,B,C,D)$ outputs $1$ if and only if the total number of $1$ bits is $2$ or $3$. For the allowed inputs:\n- If $AB=01$, then the current count from $A$ and $B$ is $1$, so $F=1$ exactly when $C$ and $D$ contribute at least one $1$, i.e., when $CD \\in \\{01,10,11\\}$, equivalently when $C + D = 1$ or $C D = 1$, which simplifies to $C + D$.\n- If $AB=10$, the same reasoning applies, yielding $F=1$ exactly when $C + D=1$ or $C D=1$, again simplifying to $C + D$.\n\nTherefore, over the allowed input space (where $A$ and $B$ differ), $F=C+D$. Since the disallowed inputs are don't-cares, we can realize $F$ globally as $C + D$.\n\nAlternatively, in SOP form using K-map or explicit minterms for the allowed ones,\n$$F = A' B C' D + A' B C D' + A' B C D + A B' C' D + A B' C D' + A B' C D.$$\nUsing the don't-cares at $AB=00$ and $AB=11$, we group across the $AB$ dimension to form three $4$-cell implicants:\n$$C' D,\\quad C D',\\quad C D.$$\nHence\n$$F = C' D + C D' + C D = D(C'+C) + C D' = D + C D' = C + D,$$\nwhere we used $C'+C=1$ and the identity $Y + XY' = Y+X$.\n\nThus, the minimal sum-of-products expression is $C + D$, which is already in SOP and minimal.", "answer": "$$\\boxed{C+D}$$", "id": "1930491"}, {"introduction": "Our final practice problem scales up the complexity to five variables, a scenario where mechanically drawing a Karnaugh map can become cumbersome. However, this exercise is designed to reward logical deduction over brute-force methods. By carefully analyzing the function's requirements based on number properties—odd, even, and multiples of four—you can discover the elegant, minimal solution without a complex map. This problem [@problem_id:1930486] emphasizes that a deep understanding of the problem specification at the bit-level is often the most powerful tool for simplification.", "problem": "A 5-bit input bus carries signals $(A, B, C, D, E)$, which together represent a 5-bit unsigned integer $N$. Signal $A$ is the Most Significant Bit (MSB) and $E$ is the Least Significant Bit (LSB). A digital logic circuit is to be designed with an output function $F(A, B, C, D, E)$ governed by the following specifications based on the integer value of $N$:\n\n1.  If $N$ is an odd number, the output $F$ must be a logic '1'.\n2.  If $N$ is an even number but not a multiple of 4, the output $F$ must be a logic '0'.\n3.  Due to upstream constraints, an input where $N$ is a multiple of 4 is guaranteed never to occur. These input conditions can be treated as 'don't cares'.\n\nDetermine the minimal Sum-of-Products (SOP) expression for the function $F$.", "solution": "Let the 5-bit unsigned integer be expressed in terms of its bits as\n$$\nN=16A+8B+4C+2D+E,\n$$\nwhere $A$ is the MSB and $E$ is the LSB.\n\nFrom the specifications:\n1. $N$ is odd if and only if its LSB is $1$, i.e., $E=1$. Therefore, for all inputs with $E=1$, the output must satisfy $F=1$.\n2. $N$ is even but not a multiple of $4$ if and only if the last two bits are $10$, i.e., $E=0$ and $D=1$. Therefore, for all inputs with $E=0$ and $D=1$, the output must satisfy $F=0$.\n3. Inputs where $N$ is a multiple of $4$ have the last two bits equal to $00$, i.e., $E=0$ and $D=0$. These are guaranteed not to occur and can be treated as don't cares.\n\nConsider the candidate function\n$$\nF=E.\n$$\nVerification against the required cases:\n- If $E=1$ (odd $N$), then $F=1$, which satisfies requirement 1.\n- If $E=0$ and $D=1$ (even but not a multiple of $4$), then $F=0$, which satisfies requirement 2.\n- If $E=0$ and $D=0$ (multiples of $4$), then $F=0$ under $F=E$. Since these inputs are don't cares, assigning $F=0$ for them is permissible and does not violate any requirement.\n\nMinimality: The SOP expression $F=E$ is a single product term with one literal, which is already minimal. A constant function cannot satisfy both required outputs ($F=1$ when $E=1$ and $F=0$ when $E=0$, $D=1$), so no further reduction is possible. Hence, the minimal Sum-of-Products form is $F=E$.", "answer": "$$\\boxed{E}$$", "id": "1930486"}]}