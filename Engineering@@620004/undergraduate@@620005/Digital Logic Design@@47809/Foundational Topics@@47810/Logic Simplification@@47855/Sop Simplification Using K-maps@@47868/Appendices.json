{"hands_on_practices": [{"introduction": "Mastering Karnaugh maps begins with understanding the fundamental rules of grouping. This first exercise addresses a common mistake made by beginners: creating groups of sizes that are not powers of two. By analyzing an incorrect simplification, you will solidify your understanding of why valid groups must contain $2^k$ cells (e.g., 1, 2, 4, 8) and how this rule directly relates to the goal of variable elimination. [@problem_id:1972253]", "problem": "A digital logic student, Alex, is tasked with finding the minimal Sum-of-Products (SOP) expression for a 3-variable Boolean function given by the sum of minterms $F(A, B, C) = \\sum m(0, 1, 3, 7)$. In this notation, $A$ is the most significant bit. After constructing the Karnaugh map (K-map), Alex identifies what appears to be a group of three adjacent '1's corresponding to minterms $m_0$, $m_1$, and $m_3$. Alex believes this group of three is a valid simplification.\n\nYour task is to analyze Alex's approach. From the options below, select the one that both correctly explains why a group of three is an invalid move in K-map simplification and provides the correct minimal SOP expression for the function $F(A, B, C)$.\n\nA. **Explanation:** Groupings in a K-map must contain a number of cells that is a power of two (e.g., 1, 2, 4, 8). This is because each valid group corresponds to a single product term where variables have been eliminated. A group of three cannot be represented by a single simplified product term. **Minimal SOP:** $F(A, B, C) = A'B' + BC$\n\nB. **Explanation:** The primary rule of K-maps is to make groups as large as possible. A group of three is smaller than a potential group of four, and thus it is invalid. The focus should be on creating the largest groups, even if they are not powers of two. **Minimal SOP:** $F(A, B, C) = A'B' + A'C$\n\nC. **Explanation:** Groupings in a K-map must contain a number of cells that is a power of two. This rule ensures that the resulting circuit has the minimum number of logic gates. **Minimal SOP:** $F(A, B, C) = A'B' + A'C + BC$\n\nD. **Explanation:** A group of three is a valid grouping, but it is not a prime implicant. The student simply chose the wrong groups. The correct approach is to group all adjacent 1s, regardless of group size. **Minimal SOP:** $F(A, B, C) = A'B' + A'C + ABC$\n\nE. **Explanation:** Groups of odd-numbered cells (like 3) are forbidden because they lead to logical hazards in the physical circuit. The simplification must only use groups of even-numbered cells (2, 4, 6, etc.). **Minimal SOP:** $F(A, B, C) = A'B + BC$", "solution": "We are given the three-variable Boolean function as a sum of minterms:\n$$F(A,B,C)=\\sum m(0,1,3,7).$$\nInterpreting minterms with $A$ as the most significant bit, the canonical SOP is\n$$F = A'B'C' + A'B'C + A'BC + ABC.$$\nUsing Boolean algebra to minimize:\n- Combine the first two terms by factoring $A'B'$ and using complementarity:\n$$A'B'C' + A'B'C = A'B'(C' + C) = A'B' \\cdot 1 = A'B'.$$\n- Combine the last two terms by factoring $BC$ and using complementarity:\n$$A'BC + ABC = BC(A' + A) = BC \\cdot 1 = BC.$$\nTherefore,\n$$F = A'B' + BC.$$\n\nFrom the Karnaugh map perspective, valid groupings must contain $2^{k}$ cells for some integer $k \\geq 0$ (that is, 1, 2, 4, 8, ...). This requirement arises because each valid group eliminates $k$ variables, yielding a single simplified product term. A group of three cannot eliminate an integer number of variables and thus cannot be represented by a single product term, so it is invalid. The correct groupings here are the pair covering $m_{3}$ and $m_{7}$ (giving $BC$) and the pair covering $m_{0}$ and $m_{1}$ (giving $A'B'$), leading to the minimal SOP found above.\n\nThus, the correct choice is the option that states the power-of-two grouping rule and gives the minimal SOP $A'B' + BC$, which is option A.", "answer": "$$\\boxed{A}$$", "id": "1972253"}, {"introduction": "Once you've mastered the basic rules, the next step is to ensure your simplifications are truly minimal. It is possible to create perfectly valid groups that still lead to a non-optimal expression. This practice problem challenges you to critique a proposed simplification and identify why it falls short, demonstrating how smaller groups can sometimes be combined into a single larger, more efficient one. [@problem_id:1379411] This exercise hones your ability to identify all prime implicants and select the essential ones that lead to the minimal Sum-of-Products form.", "problem": "A junior digital logic designer, Alex, is tasked with simplifying a 4-variable Boolean function $F(A, B, C, D)$ to its minimal Sum-of-Products (SOP) form. The function is defined by the minterms for which its output is true: $F(A, B, C, D) = \\sum m(0, 2, 5, 7, 8, 10, 13, 15)$.\n\nAlex uses a Karnaugh map (K-map) where the rows correspond to the values of variables AB in the Gray code order (00, 01, 11, 10) and the columns correspond to the values of variables CD, also in Gray code order (00, 01, 11, 10). After grouping the 1s, Alex produces an SOP expression derived from the following three product terms:\n- $P_1 = BD$\n- $P_2 = A'B'D'$\n- $P_3 = AB'D'$\n\nThe proposed simplified function is $F_{Alex} = BD + A'B'D' + AB'D'$. Upon review, you notice that this expression is not the minimal SOP form. Which of the following statements provides the best explanation for why Alex's result is not minimal?\n\nA. The term $BD$ is invalid because K-map groups must not contain more than two 1s unless they cover an entire row or column.\nB. The groups corresponding to the terms $A'B'D'$ and $AB'D'$ should have been combined into a single, larger group.\nC. It is impossible to cover all the specified minterms with only three groups; at least four groups are required.\nD. The group that generates the term $BD$ is redundant because all of its minterms are already covered by other essential prime implicants.\nE. A Product-of-Sums (POS) simplification should have been used, as the number of 0s is equal to the number of 1s.", "solution": "We are given the function $F(A,B,C,D)=\\sum m(0,2,5,7,8,10,13,15)$ and Alex’s proposal $F_{Alex}=BD+A'B'D'+AB'D'$ derived from K-map groupings.\n\nFirst, verify the coverage of Alex’s terms in minterms:\n- $BD$ corresponds to $B=1$ and $D=1$, with $A$ and $C$ free. This covers minterms $m5\\,(0101)$, $m7\\,(0111)$, $m13\\,(1101)$, and $m15\\,(1111)$, all of which are in the given set.\n- $A'B'D'$ corresponds to $A=0$, $B=0$, $D=0$, with $C$ free, covering $m0\\,(0000)$ and $m2\\,(0010)$.\n- $AB'D'$ corresponds to $A=1$, $B=0$, $D=0$, with $C$ free, covering $m8\\,(1000)$ and $m10\\,(1010)$.\n\nThus $F_{Alex}$ indeed covers exactly the specified minterms. However, this expression is not minimal. Use Boolean algebra to combine terms that differ only in $A$:\n$$\nA'B'D' + AB'D' = (A' + A)B'D' = 1\\cdot B'D' = B'D'.\n$$\nTherefore,\n$$\nF_{Alex} = BD + A'B'D' + AB'D' = BD + B'D'.\n$$\nIn K-map terms, the two groups corresponding to $A'B'D'$ and $AB'D'$ should be combined into a single larger group of four cells yielding $B'D'$. The remaining group $BD$ is already a maximal group of four. The minimal SOP is hence $F=BD+B'D'$, which uses fewer product terms and fewer literals than Alex’s expression.\n\nConsequently, the best explanation is that the groups for $A'B'D'$ and $AB'D'$ should have been merged into one, giving $B'D'$.", "answer": "$$\\boxed{B}$$", "id": "1379411"}, {"introduction": "To achieve true mastery of K-maps, it is insightful to work the problem in reverse. Given a final, minimal expression, can you deduce the original function specification, including the \"don't-care\" conditions that enabled such an optimal simplification? This advanced exercise requires you to reconstruct a K-map by strategically placing the minimum number of '1's to establish essential prime implicants and then filling in the remaining cells with 'don't-cares' ($X$). [@problem_id:1961170] It provides a deeper appreciation for the interplay between required outputs and irrelevant conditions in practical digital design.", "problem": "In digital system design, a common task is to reverse-engineer a circuit's behavior from a simplified implementation to understand the original system specifications, which may have included conditions where the output was irrelevant.\n\nImagine you are given a final, optimized logic circuit for a 4-variable function $F(A,B,C,D)$. The variables are ordered such that A is the Most Significant Bit (MSB) and D is the Least Significant Bit (LSB) when determining minterm indices (e.g., $A'BC'D$ corresponds to binary `0101` or minterm 5). The minimal Sum-of-Products (SOP) expression for this circuit was derived from a Karnaugh map and is given as:\n$$F(A,B,C,D) = A'C + AB' + ACD'$$\nYour goal is to reconstruct the specific Karnaugh map configuration that led to this exact minimal expression. To ensure a unique reconstruction, you must adhere to the following principles:\n1.  The K-map must use the absolute minimum number of '1's required to form the given expression.\n2.  Each term in the given minimal SOP corresponds to an essential prime implicant. To form these essential prime implicants, a '1' must be placed on a minterm that is uniquely covered by that implicant (relative to the other implicants in the expression). If there are multiple choices for such a minterm, you must select the one with the smallest numerical index.\n3.  All other cells necessary to form the prime implicant groups are to be filled with don't-cares ('X').\n\nBased on this uniquely reconstructed K-map, calculate two values: $S_{ON}$, the sum of all minterm indices in the ON-set (the '1's), and $S_{D}$, the sum of all minterm indices in the Don't-care set (the 'X's).\n\nPresent your answer as a pair of integers $(S_{ON}, S_{D})$.", "solution": "The problem asks us to reverse-engineer a 4-variable Karnaugh map from its minimal Sum-of-Products (SOP) expression, $F(A,B,C,D) = A'C + AB' + ACD'$, and then calculate the sum of minterm indices for the '1's (ON-set) and the 'don't-cares' (Don't-care set) under specific minimality constraints.\n\n**Step 1: Deconstruct the minimal SOP into prime implicants and their covered minterms.**\n\nThe variables are ordered with A as the Most Significant Bit (MSB) and D as the Least Significant Bit (LSB). The three terms in the expression are the prime implicants ($P_1, P_2, P_3$).\n\n-   **Prime Implicant 1 ($P_1$):** $A'C$. This corresponds to cells where $A=0$ and $C=1$. In binary `ABCD`, this is `0-1-`. The minterms are:\n    -   `0010` = 2\n    -   `0011` = 3\n    -   `0110` = 6\n    -   `0111` = 7\n    So, $P_1$ covers the minterm set $\\{2, 3, 6, 7\\}$.\n\n-   **Prime Implicant 2 ($P_2$):** $AB'$. This corresponds to cells where $A=1$ and $B=0$. In binary `ABCD`, this is `10--`. The minterms are:\n    -   `1000` = 8\n    -   `1001` = 9\n    -   `1010` = 10\n    -   `1011` = 11\n    So, $P_2$ covers the minterm set $\\{8, 9, 10, 11\\}$.\n\n-   **Prime Implicant 3 ($P_3$):** $ACD'$. This corresponds to cells where $A=1$, $C=1$, and $D=0$. In binary `ABCD`, this is `1-10`. The minterms are:\n    -   `1010` = 10\n    -   `1110` = 14\n    So, $P_3$ covers the minterm set $\\{10, 14\\}$.\n\n**Step 2: Identify the essential minterms to define the ON-set.**\n\nThe problem states that the expression is minimal and each term is an essential prime implicant. An essential prime implicant must cover at least one minterm ('1') that no other prime implicant in the final expression covers. We adhere to the two principles given: using the minimum number of '1's and choosing the smallest index if multiple options exist.\n\n-   **For $P_1 = A'C$:** The minterms it covers are $\\{2, 3, 6, 7\\}$. We check if any of these are covered by $P_2$ or $P_3$. Neither $P_2$ (covers $\\{8,9,10,11\\}$) nor $P_3$ (covers $\\{10,14\\}$) overlap with $P_1$'s set. Therefore, the set of minterms uniquely covered by $P_1$ (relative to $P_2$ and $P_3$) is $\\{2, 3, 6, 7\\}$. To satisfy the minimality constraints, we must place one '1' in this set and select the one with the smallest index. The smallest index is 2. Thus, minterm 2 must be a '1'.\n\n-   **For $P_2 = AB'$:** The minterms it covers are $\\{8, 9, 10, 11\\}$. We check for overlaps. $P_1$ does not overlap. $P_3$ covers minterm 10. Therefore, the set of minterms uniquely covered by $P_2$ is $\\{8, 9, 11\\}$. To satisfy the constraints, we must place a '1' on the minterm with the smallest index in this set. The smallest index is 8. Thus, minterm 8 must be a '1'.\n\n-   **For $P_3 = ACD'$:** The minterms it covers are $\\{10, 14\\}$. We check for overlaps. $P_1$ does not overlap. $P_2$ covers minterm 10. Therefore, the only minterm uniquely covered by $P_3$ is $\\{14\\}$. We have no choice but to place a '1' here. Thus, minterm 14 must be a '1'.\n\nCombining these gives the complete ON-set, which is the set of all '1's in the K-map.\nON-set = $\\{2, 8, 14\\}$.\nThis is the minimal set of '1's (three in total) required to make all three prime implicants essential.\n\n**Step 3: Calculate the sum of ON-set indices, $S_{ON}$.**\n\n$S_{ON} = 2 + 8 + 14 = 24$.\n\n**Step 4: Determine the Don't-care set.**\n\nThe don't-cares are the minterms that are not in the ON-set but are needed to form the prime implicant groupings.\n\n-   To form the group for $P_1 = A'C$ (covering $\\{2, 3, 6, 7\\}$), we have $m_2=1$. The remaining minterms in this group must be don't-cares: $\\{3, 6, 7\\}$.\n-   To form the group for $P_2 = AB'$ (covering $\\{8, 9, 10, 11\\}$), we have $m_8=1$. The remaining minterms in this group must be don't-cares: $\\{9, 10, 11\\}$.\n-   To form the group for $P_3 = ACD'$ (covering $\\{10, 14\\}$), we have $m_{14}=1$. The other minterm, 10, must be a don't-care. This is consistent with the requirement from $P_2$.\n\nCombining all the necessary don't-cares gives the Don't-care set.\nDon't-care set = $\\{3, 6, 7\\} \\cup \\{9, 10, 11\\} = \\{3, 6, 7, 9, 10, 11\\}$.\n\n**Step 5: Calculate the sum of Don't-care set indices, $S_{D}$.**\n\n$S_{D} = 3 + 6 + 7 + 9 + 10 + 11 = 46$.\n\nThe final answer is the pair $(S_{ON}, S_{D})$.\n\n$S_{ON} = 24$\n$S_{D} = 46$", "answer": "$$\\boxed{\\begin{pmatrix} 24 & 46 \\end{pmatrix}}$$", "id": "1961170"}]}