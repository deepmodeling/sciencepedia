{"hands_on_practices": [{"introduction": "This first exercise provides a direct workout for the core skill of converting between canonical forms. We will explore a function defined by a clear logical property—the parity of its inputs—to practice identifying the set of maxterms and then deriving the complementary set of minterms. This practice solidifies the fundamental principle that the Sum of Minterms and Product of Maxterms for any function are mathematical complements [@problem_id:1924812].", "problem": "A four-variable Boolean function, denoted as $F(A, B, C, D)$, is defined by the set of input combinations for which its output is 0. These combinations correspond to a set of maxterm indices, where the input variables $(A, B, C, D)$ are weighted as $(2^3, 2^2, 2^1, 2^0)$ respectively to form a decimal index. The function is known to satisfy the following three conditions:\n\n1.  The total number of maxterms for the function is exactly 8.\n2.  The set of maxterm indices includes the subset $\\{0, 5, 10, 15\\}$.\n3.  An integer $k \\in \\{0, 1, ..., 15\\}$ is a maxterm index if and only if the number of '1's in its 4-bit unsigned binary representation (also known as its Hamming weight) is an even number.\n\nWhich of the following expressions represents the canonical Sum of Minterms for the function $F$?\n\nA. $\\sum m(1, 2, 4, 7, 8, 11, 13, 14)$\n\nB. $\\sum m(0, 3, 5, 6, 9, 10, 12, 15)$\n\nC. $\\sum m(0, 1, 2, 3, 4, 5, 6, 7)$\n\nD. $\\sum m(1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14)$\n\nE. $\\sum m(1, 4, 6, 7, 9, 10, 13, 14)$", "solution": "We are given a four-variable Boolean function $F(A,B,C,D)$ where the variables $(A,B,C,D)$ are weighted $(2^{3},2^{2},2^{1},2^{0})$ to form a decimal index $k \\in \\{0,1,\\dots,15\\}$. A maxterm index is an index $k$ such that $F=0$ for the corresponding input. The problem states:\n- The number of maxterms is $8$.\n- The set of maxterm indices contains $\\{0,5,10,15\\}$.\n- An integer $k$ is a maxterm index if and only if the Hamming weight (number of $1$'s) in the $4$-bit binary representation of $k$ is even.\n\nBy the third condition, the maxterm set is exactly the set of indices with even Hamming weight among $4$-bit strings. For $4$ bits, the number of even-parity strings is\n$$\n\\binom{4}{0}+\\binom{4}{2}+\\binom{4}{4}=1+6+1=8,\n$$\nwhich satisfies the first condition. The subset $\\{0,5,10,15\\}$ verifies even Hamming weight since $0=0000$ has weight $0$, $5=0101$ has weight $2$, $10=1010$ has weight $2$, and $15=1111$ has weight $4$, thus satisfying the second condition.\n\nTherefore, the maxterm indices are precisely those with even Hamming weight, and the minterm indices (where $F=1$) are the complement, i.e., those with odd Hamming weight. We list the $4$-bit numbers and their weights:\n- $0=0000$ (even), $1=0001$ (odd), $2=0010$ (odd), $3=0011$ (even),\n- $4=0100$ (odd), $5=0101$ (even), $6=0110$ (even), $7=0111$ (odd),\n- $8=1000$ (odd), $9=1001$ (even), $10=1010$ (even), $11=1011$ (odd),\n- $12=1100$ (even), $13=1101$ (odd), $14=1110$ (odd), $15=1111$ (even).\n\nThus the minterm indices (odd Hamming weight) are\n$$\n\\{1,2,4,7,8,11,13,14\\}.\n$$\nThe canonical Sum of Minterms for $F$ is therefore\n$$\n\\sum m(1,2,4,7,8,11,13,14),\n$$\nwhich matches option A.", "answer": "$$\\boxed{A}$$", "id": "1924812"}, {"introduction": "Let's apply our understanding of canonical forms to a critical problem in computer arithmetic: detecting overflow in a two's complement adder. This exercise requires you to first translate the conditions for an overflow into a Boolean expression and then convert it into the canonical Product of Maxterms form. This task highlights how canonical forms are used to formally specify and implement essential logic functions in digital systems [@problem_id:1924820].", "problem": "In digital systems, two's complement representation is the most common method for representing signed integers. When adding two such numbers, an overflow error can occur, leading to a result that is arithmetically incorrect. Consider a 3-bit adder circuit that performs the addition of two 3-bit signed integers, $A$ and $B$.\n\nThe overflow detection logic for this operation can be modeled as a Boolean function, $V$. This function takes three inputs:\n1.  $A_2$: the most significant bit (MSB) of the first operand, $A$.\n2.  $B_2$: the most significant bit (MSB) of the second operand, $B$.\n3.  $C_2$: the carry-in to the MSB stage of the adder.\n\nThe logic dictates that an overflow occurs if and only if the two operands have the same sign, and the sign of the sum is different from the sign of the operands. The MSB of an operand indicates its sign (0 for positive, 1 for negative). The MSB of the sum, $S_2$, is determined by the standard full-adder logic: $S_2 = A_2 \\oplus B_2 \\oplus C_2$.\n\nYour task is to determine the canonical Product of Maxterms (PoM) representation for this overflow function $V(A_2, B_2, C_2)$.", "solution": "Let $A_2, B_2, C_2$ denote the MSBs of the operands and the carry-in to the MSB, and let $S_2$ be the MSB of the sum. By full-adder logic, $S_2 = A_2 \\oplus B_2 \\oplus C_2$. In two’s complement, overflow occurs if and only if the operands have the same sign while the sum’s sign differs from that sign, i.e.,\n$$\nV=1 \\iff (A_2=B_2) \\land (S_2 \\neq A_2).\n$$\nUsing $S_2 \\oplus A_2 = (A_2 \\oplus B_2 \\oplus C_2) \\oplus A_2 = B_2 \\oplus C_2$, we obtain the logical form\n$$\nV = \\overline{(A_2 \\oplus B_2)} \\cdot (B_2 \\oplus C_2).\n$$\nTo write the canonical Product of Maxterms (PoM), enumerate all $8$ input combinations and mark where $V=1$:\n- $(A_2,B_2,C_2)=000$: $A_2=B_2$ and $B_2 \\oplus C_2=0 \\Rightarrow V=0$.\n- $001$: $A_2=B_2$ and $B_2 \\oplus C_2=1 \\Rightarrow V=1$.\n- $010$: $A_2 \\neq B_2 \\Rightarrow V=0$.\n- $011$: $A_2 \\neq B_2 \\Rightarrow V=0$.\n- $100$: $A_2 \\neq B_2 \\Rightarrow V=0$.\n- $101$: $A_2 \\neq B_2 \\Rightarrow V=0$.\n- $110$: $A_2=B_2$ and $B_2 \\oplus C_2=1 \\Rightarrow V=1$.\n- $111$: $A_2=B_2$ and $B_2 \\oplus C_2=0 \\Rightarrow V=0$.\n\nThus $V=1$ for indices $1$ and $6$, and $V=0$ for indices $0,2,3,4,5,7$ (with indexing by $(A_2,B_2,C_2)$ as a binary number where $A_2$ is the most significant bit). The canonical PoM is the product of the maxterms corresponding to the zero rows:\n$$\nV(A_2,B_2,C_2)=(A_2+B_2+C_2)(A_2+\\overline{B_2}+C_2)(A_2+\\overline{B_2}+\\overline{C_2})(\\overline{A_2}+B_2+C_2)(\\overline{A_2}+B_2+\\overline{C_2})(\\overline{A_2}+\\overline{B_2}+\\overline{C_2}).\n$$\nEquivalently, in index notation,\n$$\nV=\\prod M(0,2,3,4,5,7).\n$$", "answer": "$$\\boxed{(A_2+B_2+C_2)(A_2+\\overline{B_2}+C_2)(A_2+\\overline{B_2}+\\overline{C_2})(\\overline{A_2}+B_2+C_2)(\\overline{A_2}+B_2+\\overline{C_2})(\\overline{A_2}+\\overline{B_2}+\\overline{C_2})}$$", "id": "1924820"}, {"introduction": "This final practice challenges you to see Boolean algebra as a powerful modeling tool that extends far beyond simple circuits. We will represent the connections in a graph using Boolean variables and define a function that detects a specific feature—a 3-cycle or \"triangle.\" By determining the number of maxterms, you will effectively count the number of graphs that do not have this feature, showcasing a sophisticated application of canonical forms in solving combinatorial problems [@problem_id:1924828].", "problem": "Consider a simple, undirected graph with a set of four vertices, labeled $V = \\{v_1, v_2, v_3, v_4\\}$. The presence or absence of each of the six possible edges in this graph is controlled by a set of six corresponding Boolean variables, $X = \\{x_5, x_4, x_3, x_2, x_1, x_0\\}$, where a variable's value of '1' signifies the presence of an edge and '0' signifies its absence. The mapping from variables to edges is defined as follows: $x_0 \\leftrightarrow (v_1, v_2)$, $x_1 \\leftrightarrow (v_1, v_3)$, $x_2 \\leftrightarrow (v_1, v_4)$, $x_3 \\leftrightarrow (v_2, v_3)$, $x_4 \\leftrightarrow (v_2, v_4)$, and $x_5 \\leftrightarrow (v_3, v_4)$.\n\nA 6-variable Boolean function, $F(x_5, x_4, x_3, x_2, x_1, x_0)$, is designed to detect the formation of a 3-cycle (a triangle) within the graph. The function outputs $F=1$ if the graph represented by the input variables contains at least one set of three vertices $\\{v_i, v_j, v_k\\}$ that are all mutually connected by edges. Otherwise, the function outputs $F=0$.\n\nYour task is to analyze this function $F$. Determine the total number of maxterms present in the canonical product-of-sums representation of $F$.", "solution": "We have six Boolean variables $x_{5},x_{4},x_{3},x_{2},x_{1},x_{0}$ encoding the six edges of the simple undirected graph on four labeled vertices. The Boolean function $F$ outputs $1$ if and only if at least one $3$-cycle (triangle) is present. In the canonical product-of-sums representation, the number of maxterms equals the number of input assignments for which $F=0$, i.e., the number of triangle-free labeled graphs on four vertices.\n\nLet the universe be all labeled graphs on four vertices, so the total number of graphs is\n$$\n2^{6}=64.\n$$\nFor each $3$-subset $T$ of the vertices (there are $\\binom{4}{3}=4$ such subsets), define the event $A_{T}$ that the triangle on $T$ is present. For a fixed $T$, the $3$ edges among $T$ must be present, and the remaining $3$ edges are free, so\n$$\n|A_{T}|=2^{3}.\n$$\nFor two distinct triples $T,T'$, the intersection $A_{T}\\cap A_{T'}$ forces the union of the two triangles. On four vertices this union fixes $5$ edges, leaving $1$ free edge, so\n$$\n|A_{T}\\cap A_{T'}|=2^{1},\n$$\nand there are $\\binom{4}{2}=6$ such pairs. For any three triples, $A_{T}\\cap A_{T'}\\cap A_{T''}$ forces all $6$ edges (the complete graph), so\n$$\n|A_{T}\\cap A_{T'}\\cap A_{T''}|=1,\n$$\nwith $\\binom{4}{3}=4$ such triples. The intersection of all four events also has size $1$.\n\nBy inclusion–exclusion, the number of graphs with at least one triangle is\n$$\n\\left|\\bigcup A_{T}\\right|\n=\\binom{4}{1}2^{3}-\\binom{4}{2}2^{1}+\\binom{4}{3}1-\\binom{4}{4}1\n=32-12+4-1=23.\n$$\nHence the number of triangle-free graphs (where $F=0$) is\n$$\n2^{6}-23=64-23=41.\n$$\nTherefore, the canonical product-of-sums of $F$ has $41$ maxterms.\n\nAs a check by edge counts: triangle-free graphs by number of edges are $1$ (with $0$ edges), $6$ (with $1$ edge), $15$ (with $2$ edges), $20-4=16$ (with $3$ edges, subtracting the $4$ triangles), and $15-12=3$ (with $4$ edges, subtracting the $12$ graphs consisting of a triangle plus one extra edge), totaling $1+6+15+16+3=41$; none exist with $5$ or $6$ edges.", "answer": "$$\\boxed{41}$$", "id": "1924828"}]}