{"hands_on_practices": [{"introduction": "Understanding the relationship between Product of Sums (POS) and Sum of Products (SOP) is fundamental to digital logic. This exercise focuses on the algebraic conversion from a POS expression to its SOP equivalent. Mastering this process not only enhances your flexibility in manipulating Boolean expressions but also deepens your understanding of core algebraic laws like distribution and absorption [@problem_id:1954293].", "problem": "A logic function $F$ is defined for three input variables $A$, $B$, and $C$. The function is initially specified in a Product of Sums (POS) form as follows:\n\n$$F(A, B, C) = (A + B' + C)(A' + B + C)(A + B)$$\n\nUsing the rules of Boolean algebra, derive the equivalent simplified Sum of Products (SOP) expression for the function $F$. In the expression, a prime (e.g., $B'$) denotes the logical NOT operation. Your final answer should be an expression in terms of $A$, $B$, and $C$.", "solution": "We start with the given Product of Sums:\n$$F=(A+B'+C)(A'+B+C)(A+B).$$\nBy associativity and commutativity of the Boolean product, first simplify the product $(A+B)(A+B'+C)$. Using the distributive identity $(X+Y)(X+Z)=X+YZ$ with $X=A$, $Y=B$, and $Z=B'+C$, we get\n$$(A+B)(A+B'+C)=A+B(B'+C)=A+(BB'+BC)=A+0+BC=A+BC,$$\nusing the complementarity $BB'=0$ and the identity $X+0=X$. Therefore,\n$$F=(A'+B+C)(A+BC).$$\nNow distribute:\n$$(A+BC)(A'+B+C)=A(A'+B+C)+BC(A'+B+C).$$\nCompute each term using distributivity, complementarity, and idempotence:\n$$A(A'+B+C)=AA'+AB+AC=0+AB+AC=AB+AC,$$\n$$BC(A'+B+C)=A'BC+BCB+BCC=A'BC+BC+BC=A'BC+BC,$$\nsince $BB=B$, $CC=C$, and $X+X=X$. Hence,\n$$F=AB+AC+A'BC+BC.$$\nApply absorption $X+XY=X$ with $X=BC$ and $Y=A'$ to eliminate the redundant term:\n$$BC+A'BC=BC,$$\nso the simplified Sum of Products is\n$$F=AB+AC+BC.$$", "answer": "$$\\boxed{AB+AC+BC}$$", "id": "1954293"}, {"introduction": "While algebraic manipulation is powerful, for functions with multiple variables, Karnaugh maps (K-maps) provide a more systematic and visual approach to simplification. This practice introduces the K-map method for POS minimization, where we group the '0's of a function to find the simplest sum terms. By working through this problem, you'll gain hands-on experience in a standard industry technique for optimizing digital circuits [@problem_id:1954299].", "problem": "A digital data validation system is designed to check 4-bit data packets. Each packet is represented by the bits $W, X, Y, Z$, where $W$ is the most significant bit. A logic function, $F(W, X, Y, Z)$, is used to flag packets: it outputs $F=0$ for an erroneous packet and $F=1$ for a valid packet. After extensive testing, the design engineer has determined that the packets corresponding to the decimal integer values of 1, 5, 9, 13, and 15 are erroneous. All other packets are considered valid.\n\nYour task is to derive the simplified Boolean expression for the logic function $F(W, X, Y, Z)$ in its minimal product-of-sums (POS) form. In your answer, use the prime notation (e.g., $W'$) to denote the complement of a variable.", "solution": "Let $F(W,X,Y,Z)$ output $0$ at minterms $m(1,5,9,13,15)$ and $1$ otherwise. In Boolean design, a product-of-sums (POS) form is obtained by forming sum terms that evaluate to $0$ on groups of $0$-outputs and then multiplying them.\n\nFirst, observe that $m(1,5,9,13)$ all have $Y=0$ and $Z=1$, independent of $W,X$. A sum term that is $0$ exactly when $Y=0$ and $Z=1$ is $(Y+Z')$, since $Y=0$ and $Z=1$ implies $Y+Z'=0+0=0$, and for any other $(Y,Z)$ it is $1$. Therefore, $F$ must contain the factor $(Y+Z')$, i.e.,\n$$\nF=(Y+Z')\\cdot G(W,X,Y,Z),\n$$\nfor some $G$.\n\nNext, $F$ must also be $0$ at $m(15)$, i.e., at $W=1,X=1,Y=1,Z=1$. To achieve this without introducing any new undesired zeros, choose $G$ to be a sum term that is $0$ when $W=1,X=1,Z=1$ (with $Y$ free). The minimal such sum is $(W'+X'+Z')$, because it is $0$ exactly when $W=1$, $X=1$, and $Z=1$. This makes $G=0$ at $(W,X,Z)=(1,1,1)$ for both $Y=0$ and $Y=1$. The case with $Y=0$ is $m(13)$, already covered by $(Y+Z')=0$, and the case with $Y=1$ is $m(15)$, which we need to include.\n\nThus,\n$$\nF=(Y+Z')(W'+X'+Z').\n$$\nVerification: $(Y+Z')=0$ only for $(Y,Z)=(0,1)$, producing zeros at $m(1,5,9,13)$. $(W'+X'+Z')=0$ only for $(W,X,Z)=(1,1,1)$, producing zeros at $m(13,15)$; $m(13)$ is already a zero from the first factor, and $m(15)$ is the required additional zero. For all other inputs, both sums evaluate to $1$, so $F=1$. Hence this is the minimal POS.", "answer": "$$\\boxed{(Y+Z')(W'+X'+Z')}$$", "id": "1954299"}, {"introduction": "This final practice bridges the gap between a high-level functional requirement and its optimized logic implementation. You will start with a word problem describing a parity-checking circuit—a common component in data transmission systems—and derive its minimal POS expression. This exercise not only tests your ability to translate a specification into a Boolean function but also provides a key insight into the nature of simplification and how some inherently complex functions cannot be reduced [@problem_id:1954278].", "problem": "A digital logic circuit is designed with four input variables, denoted as $A, B, C,$ and $D$. The circuit produces a single output $F$. The behavior of the circuit is defined by a specific rule: the output $F$ is 0 if and only if the 4-bit binary number represented by the inputs $(A, B, C, D)$ contains an even number of '1's. Note that an input with zero '1's is considered to have an even number of '1's.\n\nYour task is to derive the minimal Product of Sums (POS) expression for the function $F(A, B, C, D)$. In your final expression, use a primed variable (e.g., $A'$) to denote the logical NOT operation.", "solution": "We are told that $F=0$ if and only if the 4-bit input $(A,B,C,D)$ has an even number of $1$’s (including zero $1$’s). Therefore $F=1$ exactly for inputs with an odd number of $1$’s. Equivalently, $F$ is the odd-parity function, i.e., $F=A\\oplus B\\oplus C\\oplus D$.\n\nTo derive a Product of Sums (POS), we form the product over maxterms corresponding to the input combinations where $F=0$. A canonical maxterm for an input $(a,b,c,d)$ is the sum\n$$(X_{A} + X_{B} + X_{C} + X_{D}),$$\nwhere $X_{A}=A$ if $a=0$ and $X_{A}=A'$ if $a=1$ (and similarly for $B,C,D$). This maxterm evaluates to $0$ only at $(a,b,c,d)$ and to $1$ at all other inputs.\n\nThe inputs with even parity (hence $F=0$) are those with Hamming weight $0,2,$ or $4$:\n- Weight $0$: $0000$ gives the maxterm $(A+B+C+D)$.\n- Weight $2$: $0011,0101,0110,1001,1010,1100$ give the maxterms\n$(A+B+C'+D')$, $(A+B'+C+D')$, $(A+B'+C'+D)$, $(A'+B+C+D')$, $(A'+B+C'+D)$, $(A'+B'+C+D)$, respectively.\n- Weight $4$: $1111$ gives the maxterm $(A'+B'+C'+D')$.\n\nThus the canonical POS is\n$$(A+B+C+D)(A+B+C'+D')(A+B'+C+D')(A+B'+C'+D)(A'+B+C+D')(A'+B+C'+D)(A'+B'+C+D)(A'+B'+C'+D').$$\n\nBecause changing any single input bit flips the parity, each $0$ in the K-map (even parity) is isolated from other $0$’s; therefore no grouping of zeros is possible, and the canonical POS is already minimal.\n\nHence the minimal POS expression for $F$ is\n$$(A+B+C+D)(A+B+C'+D')(A+B'+C+D')(A+B'+C'+D)(A'+B+C+D')(A'+B+C'+D)(A'+B'+C+D)(A'+B'+C'+D').$$", "answer": "$$\\boxed{(A+B+C+D)(A+B+C'+D')(A+B'+C+D')(A+B'+C'+D)(A'+B+C+D')(A'+B+C'+D)(A'+B'+C+D)(A'+B'+C'+D')}$$", "id": "1954278"}]}