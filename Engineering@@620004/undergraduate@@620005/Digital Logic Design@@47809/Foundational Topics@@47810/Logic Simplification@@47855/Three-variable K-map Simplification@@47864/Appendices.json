{"hands_on_practices": [{"introduction": "Translating a real-world requirement into an efficient digital circuit is a fundamental skill in logic design. This first exercise provides a practical scenario involving an alarm system and asks you to derive its control logic. The goal is to see how a simple verbal rule can be represented on a Karnaugh map and how visual grouping can reveal a surprisingly simple minimal expression, demonstrating the power of K-maps to cut through redundancy [@problem_id:1972223].", "problem": "A monitoring system for a chemical process uses three binary sensors: `X` (pressure), `Y` (temperature), and `Z` (concentration). The sensors output a logic $1$ for a high reading and a logic $0$ for a low reading. The system is designed to trigger an alarm `F` (where $F=1$ signifies an alarm) if and only if the temperature is high. The state of the other two sensors, pressure and concentration, does not affect the alarm's status when the temperature is high. If the temperature is low, the alarm is never triggered, regardless of the other sensor readings.\n\nThe logic function for the alarm is `F(X, Y, Z)`, where `X` corresponds to the most significant bit (MSB) and `Z` to the least significant bit (LSB) when representing the sensor states as a 3-bit binary number.\n\nUsing a Karnaugh map, determine the minimal sum-of-products (SOP) expression for the alarm function `F(X, Y, Z)`.", "solution": "Let $X$ (pressure), $Y$ (temperature), and $Z$ (concentration) be binary inputs. The alarm $F$ is specified to be $1$ if and only if the temperature is high, i.e., $Y=1$. The other inputs do not matter when $Y=1$, and when $Y=0$ the alarm is never triggered. Therefore the function is\n$$\nF(X,Y,Z)=\\begin{cases}\n1, & Y=1,\\\\\n0, & Y=0.\n\\end{cases}\n$$\nWith $X$ as MSB and $Z$ as LSB, the minterms for which $F=1$ are precisely those with $Y=1$, namely $(X,Y,Z)\\in\\{(0,1,0),(0,1,1),(1,1,0),(1,1,1)\\}$, which correspond to indices $2,3,6,7$. Hence\n$$\nF(X,Y,Z)=\\sum m(2,3,6,7).\n$$\nOn the $3$-variable Karnaugh map, these four $1$s lie in the entire row $Y=1$ and can be grouped together as a single group of four, which eliminates dependence on $X$ and $Z$ and yields the implicant $Y$. Therefore the minimal sum-of-products expression is\n$$\nF(X,Y,Z)=Y.\n$$", "answer": "$$\\boxed{Y}$$", "id": "1972223"}, {"introduction": "Often, an initial logic design is not in the standard Sum-of-Products (SOP) form needed for K-map plotting. This problem presents a function that includes an Exclusive OR (XOR) gate, requiring you to first perform some algebraic manipulation to express the function as a sum of minterms. This practice bridges the gap between Boolean algebra and K-map simplification, a common task in circuit optimization [@problem_id:1972238].", "problem": "A digital control system for an automated chemical reactor relies on three binary sensor inputs, denoted by the variables $A$, $B$, and $C$. The system's main safety valve is activated when the output function $F$ is a logic $1$. The initial design specifies the control logic by the Boolean expression $F = A(B \\oplus C) + BC$, where $\\oplus$ represents the Exclusive OR (XOR) operation.\n\nTo reduce the number of logic gates and simplify the physical circuit implementation, your task is to find the most simplified equivalent expression for $F$.\n\nDetermine the minimal Sum of Products (SOP) expression for the function $F$. In your final answer, use the variable names $A$, $B$, and $C$. Represent logical AND by juxtaposition (e.g., $XY$) and logical OR by the `+` symbol. The use of complemented variables should be denoted with an overbar, for instance, $\\bar{X}$.", "solution": "We start from the given Boolean expression and use standard Boolean algebra identities. The XOR identity is $B \\oplus C = B\\bar{C} + \\bar{B}C$. Substituting this into $F$ and distributing $A$ gives\n$$\nF = A(B\\bar{C} + \\bar{B}C) + BC = AB\\bar{C} + A\\bar{B}C + BC.\n$$\nIntroduce $A + \\bar{A} = 1$ into $BC$ to split it by $A$:\n$$\nBC = BC(A + \\bar{A}) = ABC + \\bar{A}BC,\n$$\nso\n$$\nF = AB\\bar{C} + A\\bar{B}C + ABC + \\bar{A}BC.\n$$\nCombine $A\\bar{B}C$ with $ABC$ using $\\bar{B} + B = 1$:\n$$\nA\\bar{B}C + ABC = AC(\\bar{B} + B) = AC.\n$$\nThus,\n$$\nF = AB\\bar{C} + AC + \\bar{A}BC.\n$$\nNow combine $AB\\bar{C}$ with $AC$ by factoring $A$:\n$$\nAB\\bar{C} + AC = A(B\\bar{C} + C) = A(B + C) = AB + AC.\n$$\nTherefore,\n$$\nF = AB + AC + \\bar{A}BC.\n$$\nFinally, simplify $AB + \\bar{A}BC$ by factoring $B$ and using $A + \\bar{A}C = A + C$ (from $X + \\bar{X}Y = X + Y$):\n$$\nAB + \\bar{A}BC = B(A + \\bar{A}C) = B(A + C) = AB + BC.\n$$\nHence,\n$$\nF = AB + AC + BC,\n$$\nwhich is the minimal Sum of Products form.", "answer": "$$\\boxed{AB+AC+BC}$$", "id": "1972238"}, {"introduction": "This final practice introduces two advanced and powerful concepts: \"don't care\" conditions and Product-of-Sums (POS) simplification. In many systems, some input combinations are impossible; these \"don't cares\" can be strategically used to create larger groups and achieve better simplification. Furthermore, by learning to simplify for a minimal POS expression, you add a versatile alternative to the standard SOP form, which can sometimes yield a more efficient circuit implementation [@problem_id:1972192].", "problem": "A digital control system for an experimental manufacturing robot uses a 3-bit input word, represented by Boolean variables $A$, $B$, and $C$, to determine a specific operational mode, represented by the output function $F$. The logic is specified such that the function $F(A,B,C)$ evaluates to $1$ for the minterms corresponding to decimal values 2, 5, and 6. Due to the design of the robot's sensor array, the input combinations corresponding to decimal values 0 and 3 will never occur under normal operation. These \"don't care\" conditions can be utilized to simplify the logic circuit.\n\nYour task is to determine the minimal product-of-sums (POS) expression for the function $F(A,B,C)$. A product-of-sums expression consists of several sum terms (variables joined by OR operators) that are multiplied together (joined by AND operators). For example, $(X+Y)(\\bar{X}+Z)$ is a POS expression. In your final answer, represent the complement (NOT) of a variable $X$ as $\\bar{X}$.", "solution": "We map minterm indices to binary assignments with $A$ as the most significant bit, $B$ next, and $C$ least significant: $0:000$, $1:001$, $2:010$, $3:011$, $4:100$, $5:101$, $6:110$, $7:111$. The function is $F=1$ at minterms $2,5,6$; the \"don't care\" set is $\\{0,3\\}$; therefore $F=0$ at minterms $1,4,7$.\n\nTo obtain a minimal product-of-sums (POS), we minimize the complement $\\bar{F}$ as a sum-of-products (SOP), using the don't cares as $1$s for $\\bar{F}$. Thus $\\bar{F}$ has $1$s at indices $1,4,7$ and can include $0,3$ to form larger groups.\n\nUsing Karnaugh-map or direct grouping of $\\bar{F}$:\n- A vertical pair over $B=0,C=0$ (covering $A=0$ and $A=1$ with cells $m0$ as don't care and $m4$ as $1$) yields the product term $\\bar{B}\\bar{C}$.\n- A vertical pair over $B=1,C=1$ (covering $A=0$ and $A=1$ with cells $m3$ as don't care and $m7$ as $1$) yields the product term $BC$.\n- A horizontal pair at $A=0,B=0$ (cells $m0$ as don't care and $m1$ as $1$) yields the product term $\\bar{A}\\bar{B}$.\n\nThus a minimal SOP for $\\bar{F}$ is\n$$\n\\bar{F} = \\bar{B}\\bar{C} + BC + \\bar{A}\\bar{B}.\n$$\nBy De Morganâ€™s law,\n$$\nF = (\\bar{F})' = (\\bar{B}\\bar{C})'(BC)'(\\bar{A}\\bar{B})' = (B + C)(\\bar{B} + \\bar{C})(A + B).\n$$\nThis is a minimal POS expression. (An equally minimal alternative obtained by a different last pairing is $(B + C)(\\bar{B} + \\bar{C})(A + \\bar{C})$, which is equivalent on all inputs.)", "answer": "$$\\boxed{(B+C)(\\bar{B}+\\bar{C})(A+B)}$$", "id": "1972192"}]}