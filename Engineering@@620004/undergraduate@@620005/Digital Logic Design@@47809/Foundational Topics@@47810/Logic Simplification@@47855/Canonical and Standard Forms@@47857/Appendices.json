{"hands_on_practices": [{"introduction": "Understanding digital logic often begins with mastering the two canonical forms: Sum of Products (SOP) and Product of Sums (POS). This exercise provides practice in the fundamental skill of converting a function from its maxterm representation (canonical POS), which specifies when the output is '0', to its minterm representation (canonical SOP), which specifies when it is '1'. This conversion is a cornerstone of digital design, highlighting the complementary nature of these two forms [@problem_id:1917593].", "problem": "In the design of a digital safety system for a manufacturing line, an alarm signal, represented by the logic function $F(A, B, C)$, is controlled by three sensors. The sensor outputs are represented by the binary variables $A$, $B$, and $C$. It is conventional to define the binary value of an input combination by treating $(A,B,C)$ as a 3-bit binary number, where $A$ is the most significant bit (MSB) and $C$ is the least significant bit (LSB).\n\nThe system's logic was initially specified in a canonical Product of Sums (POS) form, also known as a maxterm expansion. This form describes the conditions under which the alarm is OFF ($F=0$). The function is given by the maxterm list:\n$$F(A, B, C) = \\Pi(0, 1, 2, 3)$$\nwhere $\\Pi$ denotes the product of maxterms corresponding to the decimal indices in the list.\n\nFor implementation using standard logic gates, the engineering team needs the expression that describes when the alarm is ON ($F=1$). This requires converting the function into its canonical Sum of Products (SOP) form, which is a sum of minterms.\n\nWhich of the following expressions represents the correct canonical Sum of Products (SOP) form for the function $F(A, B, C)$? In the options below, an overbar (e.g., $\\bar{A}$) denotes the NOT operation.\n\nA. $(A+B+C)(A+B+\\bar{C})(A+\\bar{B}+C)(A+\\bar{B}+\\bar{C})$\n\nB. $\\bar{A}$\n\nC. $A\\bar{B}\\bar{C} + A\\bar{B}C + AB\\bar{C} + ABC$\n\nD. $A$\n\nE. $\\bar{A}\\bar{B}\\bar{C} + \\bar{A}\\bar{B}C + \\bar{A}B\\bar{C} + \\bar{A}BC$", "solution": "By definition of the canonical Product of Sums (maxterm) form, $F(A,B,C)=\\Pi(0,1,2,3)$ means that $F=0$ for the input combinations whose binary indices are $0,1,2,3$, using $(A,B,C)$ as a 3-bit number with $A$ as MSB and $C$ as LSB.\n\nThe binary-to-index mapping with $A$ as MSB and $C$ as LSB is:\n$$0 \\leftrightarrow (A,B,C)=(0,0,0),\\quad 1 \\leftrightarrow (0,0,1),\\quad 2 \\leftrightarrow (0,1,0),\\quad 3 \\leftrightarrow (0,1,1),$$\n$$4 \\leftrightarrow (1,0,0),\\quad 5 \\leftrightarrow (1,0,1),\\quad 6 \\leftrightarrow (1,1,0),\\quad 7 \\leftrightarrow (1,1,1).$$\nThus $F=0$ for indices $0,1,2,3$, and therefore $F=1$ for indices $4,5,6,7$.\n\nThe canonical Sum of Products (sum of minterms) representation includes exactly the minterms where $F=1$. For each index $i$ with binary $(A,B,C)$ values, the corresponding minterm is the product of literals where a $1$ contributes the uncomplemented variable and a $0$ contributes the complemented variable:\n- For index $4$ $(1,0,0)$: the minterm is $A\\bar{B}\\bar{C}$.\n- For index $5$ $(1,0,1)$: the minterm is $A\\bar{B}C$.\n- For index $6$ $(1,1,0)$: the minterm is $AB\\bar{C}$.\n- For index $7$ $(1,1,1)$: the minterm is $ABC$.\n\nTherefore, the canonical SOP form is\n$$F(A,B,C)=A\\bar{B}\\bar{C} + A\\bar{B}C + AB\\bar{C} + ABC.$$\nThis matches option C. Although this expression simplifies algebraically to $F=A$, which is option D, the question explicitly asks for the canonical SOP (sum of minterms), so the correct choice is C.", "answer": "$$\\boxed{C}$$", "id": "1917593"}, {"introduction": "While canonical forms provide a universal and unambiguous representation, initial logic expressions are often derived in a more compact, non-canonical standard form. This practice challenges you to first simplify a standard expression using Boolean algebra laws, and then convert the result into the canonical Product-of-Sums (POS) form. This two-step process is a common task in digital design, bridging the gap between a raw logical statement and a formal canonical specification [@problem_id:1917601].", "problem": "In designing the control logic for an automated greenhouse, a system is needed to manage the activation of a water sprinkler. The decision to activate the sprinkler, represented by the output function $A$, depends on three sensor inputs:\n- $S$: A light sensor, where $S=1$ indicates sufficient sunlight and $S=0$ indicates low light.\n- $H$: A humidity sensor, where $H=1$ indicates high humidity and $H=0$ indicates low humidity.\n- $F$: A fan status sensor, where $F=1$ indicates the ventilation fans are active and $F=0$ indicates they are inactive.\n\nThe sprinkler is activated ($A=1$) according to the Boolean logic expression:\n$A(S, H, F) = (SH' + F)'(S+F)$\n\nFor implementation in a specific type of programmable logic device, this expression must be converted into its canonical Product-of-Sums (POS) form. A canonical POS expression is a product of maxterms, where each maxterm is a sum that includes every variable in the function, either in its true or complemented form.\n\nDerive the canonical POS expression for the sprinkler activation function $A(S, H, F)$. In your final expression, use an apostrophe to denote the complement of a variable (e.g., $S'$).", "solution": "We start from the given Boolean function:\n$$A(S,H,F)=(SH'+F)'(S+F)$$\nApply De Morganâ€™s law to the complemented sum:\n$$(SH'+F)'=(SH')'F'=(S'+H)F'$$\nSubstitute into the expression for $A$:\n$$A=(S'+H)F'(S+F)$$\nDistribute $F'$ over $(S+F)$:\n$$F'(S+F)=SF'+FF'=SF'+0=SF'$$\nThus,\n$$A=(S'+H)(SF')=SF'(S'+H)=F'(SS'+SH)=F'(0+SH)=SHF'$$\nTherefore, $A=1$ only for $(S,H,F)=(1,1,0)$, which is the minterm with index $6$ when the variable order is $(S,H,F)$.\n\nTo write the canonical POS (product of maxterms), we take the product of all maxterms corresponding to input combinations where $A=0$, i.e., all indices except $6$: $\\{0,1,2,3,4,5,7\\}$. The maxterm for an assignment uses each variable uncomplemented if its value is $0$ and complemented if its value is $1$. Hence, the canonical POS is\n$$(S+H+F)(S+H+F')(S+H'+F)(S+H'+F')(S'+H+F)(S'+H+F')(S'+H'+F')$$", "answer": "$$\\boxed{(S+H+F)(S+H+F')(S+H'+F)(S+H'+F')(S'+H+F)(S'+H+F')(S'+H'+F')}$$", "id": "1917601"}, {"introduction": "In real-world applications, some input combinations for a logic circuit may be impossible or their output effect is irrelevant. These are known as 'don't care' conditions, and they offer valuable flexibility in circuit design and optimization. This problem requires you to work with a function that includes don't cares, making a specific design choice to determine the final canonical Product-of-Sums (POS) expression, a common practice in conservative or fail-safe system design [@problem_id:1917629].", "problem": "A digital control system for a high-security vault uses four binary sensor inputs to determine whether to trigger an alarm. The state of the system is represented by a 4-variable Boolean function $G(W, X, Y, Z)$, where the variables correspond to different sensors:\n- $W$: Biometric scanner status (1 = authenticated, 0 = not authenticated)\n- $X$: Time-lock status (1 = within authorized hours, 0 = outside authorized hours)\n- $Y$: Primary keypad entry (1 = correct, 0 = incorrect)\n- $Z$: Secondary physical key (1 = inserted, 0 = not inserted)\n\nThe alarm function $G$ is designed to be 1 (alarm ON) for the specific set of input combinations represented by the minterm list $\\Sigma_m(1, 5, 9, 13)$, with the variables ordered as $(W, X, Y, Z)$.\n\nFurthermore, the system's specification identifies a set of input combinations as transitional or undefined states. These are the \"don't care\" conditions, corresponding to the minterm list $d = \\Sigma_m(0, 7, 10)$. A conservative design decision has been made to treat all these don't care conditions as non-alarming states, meaning the function output $G$ must be 0 for these inputs.\n\nYour task is to determine the canonical Product-of-Sums (POS) expression for the alarm function $G(W, X, Y, Z)$ that results from this specific design implementation.", "solution": "We are given a Boolean function $G(W,X,Y,Z)$ with $G=1$ at minterms $\\Sigma_{m}(1,5,9,13)$ and, by design, $G=0$ at the specified transitional inputs $\\Sigma_{m}(0,7,10)$ as well. For a canonical Product-of-Sums (POS) expression, we must form the product of maxterms corresponding to every input where $G=0$.\n\nFor four variables, the complete index set is $\\{0,1,2,\\ldots,15\\}$. The $1$-set is $\\{1,5,9,13\\}$. Therefore, the $0$-set is the complement:\n$$\\{0,2,3,4,6,7,8,10,11,12,14,15\\}$$\n\nIn canonical POS form, $G$ is the product of maxterms $M_{i}$ for each index $i$ in the $0$-set. The maxterm $M_{i}$ for index $i$ with binary pattern $(W,X,Y,Z)$ uses the rule: for each variable, use it uncomplemented if its bit is $0$ and complemented if its bit is $1$, combined by $+$ (logical OR) inside the clause. Thus, for each index in the $0$-set:\n\n- $i=0$ $(0000)$: $M_{0}=W+X+Y+Z$.\n- $i=2$ $(0010)$: $M_{2}=W+X+\\overline{Y}+Z$.\n- $i=3$ $(0011)$: $M_{3}=W+X+\\overline{Y}+\\overline{Z}$.\n- $i=4$ $(0100)$: $M_{4}=W+\\overline{X}+Y+Z$.\n- $i=6$ $(0110)$: $M_{6}=W+\\overline{X}+\\overline{Y}+Z$.\n- $i=7$ $(0111)$: $M_{7}=W+\\overline{X}+\\overline{Y}+\\overline{Z}$.\n- $i=8$ $(1000)$: $M_{8}=\\overline{W}+X+Y+Z$.\n- $i=10$ $(1010)$: $M_{10}=\\overline{W}+X+\\overline{Y}+Z$.\n- $i=11$ $(1011)$: $M_{11}=\\overline{W}+X+\\overline{Y}+\\overline{Z}$.\n- $i=12$ $(1100)$: $M_{12}=\\overline{W}+\\overline{X}+Y+Z$.\n- $i=14$ $(1110)$: $M_{14}=\\overline{W}+\\overline{X}+\\overline{Y}+Z$.\n- $i=15$ $(1111)$: $M_{15}=\\overline{W}+\\overline{X}+\\overline{Y}+\\overline{Z}$.\n\nTherefore, the canonical POS expression for $G(W,X,Y,Z)$ is the product of these maxterms:\n$$G=(W+X+Y+Z)(W+X+\\overline{Y}+Z)(W+X+\\overline{Y}+\\overline{Z})(W+\\overline{X}+Y+Z)(W+\\overline{X}+\\overline{Y}+Z)(W+\\overline{X}+\\overline{Y}+\\overline{Z})(\\overline{W}+X+Y+Z)(\\overline{W}+X+\\overline{Y}+Z)(\\overline{W}+X+\\overline{Y}+\\overline{Z})(\\overline{W}+\\overline{X}+Y+Z)(\\overline{W}+\\overline{X}+\\overline{Y}+Z)(\\overline{W}+\\overline{X}+\\overline{Y}+\\overline{Z})$$", "answer": "$$\\boxed{(W+X+Y+Z)(W+X+\\overline{Y}+Z)(W+X+\\overline{Y}+\\overline{Z})(W+\\overline{X}+Y+Z)(W+\\overline{X}+\\overline{Y}+Z)(W+\\overline{X}+\\overline{Y}+\\overline{Z})(\\overline{W}+X+Y+Z)(\\overline{W}+X+\\overline{Y}+Z)(\\overline{W}+X+\\overline{Y}+\\overline{Z})(\\overline{W}+\\overline{X}+Y+Z)(\\overline{W}+\\overline{X}+\\overline{Y}+Z)(\\overline{W}+\\overline{X}+\\overline{Y}+\\overline{Z})}$$", "id": "1917629"}]}