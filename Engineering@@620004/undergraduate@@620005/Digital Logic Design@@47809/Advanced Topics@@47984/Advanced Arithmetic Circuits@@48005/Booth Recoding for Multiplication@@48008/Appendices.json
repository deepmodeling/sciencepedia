{"hands_on_practices": [{"introduction": "To begin our hands-on exploration of Booth's algorithm, we'll start with the fundamental process of Radix-2 recoding. This technique forms the basis for more advanced methods and is key to understanding how modern processors can perform multiplication efficiently. By practicing the conversion of a standard two's complement number into its Booth representation, you will gain direct experience with the core rule that transforms bit patterns into a new set of digits, revealing the algorithm's underlying simplicity and power. [@problem_id:1916755]", "problem": "In digital systems, Booth's algorithm is a multiplication algorithm that multiplies two signed binary numbers in two's complement notation. A key step in the Radix-2 version of this algorithm is to recode the multiplier into a new representation using the digit set $\\{-1, 0, +1\\}$. This recoding significantly speeds up multiplication by reducing the number of partial products that need to be added.\n\nConsider the 4-bit two's complement representation of the decimal number $-5$. Your task is to determine its Radix-2 Booth recoded representation. The recoded representation should be a sequence of four digits, $b_3b_2b_1b_0$, where $b_i$ corresponds to the original bit position $i$, with $i=3$ being the most significant bit. Express your answer as an ordered sequence of four numbers from the set $\\{-1, 0, 1\\}$, listed from most significant ($b_3$) to least significant ($b_0$).", "solution": "We first write the 4-bit two's complement representation of the decimal number $-5$. The positive value $+5$ in 4-bit unsigned binary is $0101$. Taking two's complement to obtain $-5$ gives\n$$\n0101 \\xrightarrow{\\text{invert}} 1010 \\xrightarrow{+1} 1011,\n$$\nso the multiplier bits are $y_{3}y_{2}y_{1}y_{0}=1011$ with $y_{3}=1$, $y_{2}=0$, $y_{1}=1$, $y_{0}=1$.\n\nFor Radix-2 Booth recoding, we append a fictitious bit $y_{-1}=0$ and define the recoded digit at position $i$ by\n$$\nb_{i}=y_{i-1}-y_{i}, \\quad i=0,1,2,3,\n$$\nwhich yields digits in $\\{-1,0,1\\}$ and corresponds to the standard decision table: $(y_{i},y_{i-1})=(0,0)$ or $(1,1)\\Rightarrow b_{i}=0$, $(0,1)\\Rightarrow b_{i}=+1$, $(1,0)\\Rightarrow b_{i}=-1$.\n\nCompute each $b_{i}$:\n$$\nb_{0}=y_{-1}-y_{0}=0-1=-1, \\quad b_{1}=y_{0}-y_{1}=1-1=0,\n$$\n$$\nb_{2}=y_{1}-y_{2}=1-0=1, \\quad b_{3}=y_{2}-y_{3}=0-1=-1.\n$$\n\nListed from most significant to least significant, the Radix-2 Booth recoded digits are $b_{3}b_{2}b_{1}b_{0}=(-1,\\,1,\\,0,\\,-1)$.\n\nAs a check, the weighted sum reproduces the original value:\n$$\nb_{3}2^{3}+b_{2}2^{2}+b_{1}2^{1}+b_{0}2^{0}=(-1)\\cdot 8+(1)\\cdot 4+0\\cdot 2+(-1)\\cdot 1=-5,\n$$\nconsistent with the target number.", "answer": "$$\\boxed{\\begin{pmatrix}-1 & 1 & 0 & -1\\end{pmatrix}}$$", "id": "1916755"}, {"introduction": "Now that you have practiced the basic mechanics, let's connect the recoding process to its ultimate purpose: performance. Booth's algorithm is not just a mathematical curiosity; it is a practical tool designed to speed up multiplication by reducing the number of required operations. This exercise challenges you to analyze an important edge case—the most negative number—to evaluate the algorithm's efficiency and develop a more nuanced understanding of when it truly provides a performance benefit. [@problem_id:1916702]", "problem": "In digital computer arithmetic, Booth's algorithm is a multiplication algorithm that multiplies two signed binary numbers in two's complement notation. Its main advantage is the potential to reduce the number of addition/subtraction operations required compared to a more straightforward shift-and-add algorithm, particularly when the multiplier contains long strings of 1s.\n\nConsider a system that performs multiplication on 8-bit signed integers using the two's complement representation. You are tasked with analyzing the performance of the Radix-2 Booth's algorithm for a specific case.\n\nFirst, determine the 8-digit Radix-2 Booth's recoded string for the most negative 8-bit number. The recoded digits must belong to the set $\\{-1, 0, +1\\}$. Then, based on the number of non-zero digits in the resulting recoded string, evaluate its performance implications.\n\nWhich of the following statements correctly provides the recoded string (read from most significant digit to least significant digit) and the corresponding performance analysis?\n\nA. The recoded string is $(0, -1, -1, -1, -1, -1, -1, -1)$. This represents a worst-case scenario for Booth's algorithm, requiring eight separate arithmetic operations.\n\nB. The recoded string is $(+1, -1, +1, -1, +1, -1, +1, -1)$. This represents a worst-case scenario, as it requires more operations than a standard multiplier.\n\nC. The recoded string is $(-1, 0, 0, 0, 0, 0, 0, 0)$. This represents a best-case scenario, as it significantly reduces the number of operations compared to a standard multiplication algorithm.\n\nD. The recoded string is $(-1, 0, 0, 0, 0, 0, 0, 0)$. This offers no performance improvement over a standard two's complement multiplication algorithm for this specific number, as both require only a single arithmetic operation.\n\nE. The recoded string is $(+1, 0, 0, 0, 0, 0, 0, 0)$. The algorithm incorrectly computes the value, showing a failure for this edge case.", "solution": "In 8-bit two's complement, the most negative number is represented by the multiplier bit string $q_{7}q_{6}\\dots q_{0}=10000000$, where $q_{7}=1$ and $q_{i}=0$ for $i\\in\\{0,1,\\dots,6\\}$. Radix-2 Booth recoding uses an appended bit $q_{-1}=0$ and defines the recoded digit at position $i$ as\n$$\nr_{i}=q_{i-1}-q_{i},\\quad r_{i}\\in\\{-1,0,+1\\},\\quad i=0,1,\\dots,7,\n$$\nwhich implements the rules: pair $01\\mapsto+1$, $10\\mapsto-1$, and $00$ or $11\\mapsto 0$.\n\nCompute each $r_{i}$:\n$$\n\\begin{aligned}\nr_{0}&=q_{-1}-q_{0}=0-0=0,\\\\\nr_{1}&=q_{0}-q_{1}=0-0=0,\\\\\nr_{2}&=q_{1}-q_{2}=0-0=0,\\\\\nr_{3}&=q_{2}-q_{3}=0-0=0,\\\\\nr_{4}&=q_{3}-q_{4}=0-0=0,\\\\\nr_{5}&=q_{4}-q_{5}=0-0=0,\\\\\nr_{6}&=q_{5}-q_{6}=0-0=0,\\\\\nr_{7}&=q_{6}-q_{7}=0-1=-1.\n\\end{aligned}\n$$\nReading from most significant digit to least significant digit, the 8-digit recoded string is $(-1,0,0,0,0,0,0,0)$.\n\nThe number of non-zero recoded digits is $1$, so Booth’s algorithm will perform exactly one non-trivial arithmetic operation (one add/subtract of the multiplicand). A standard shift-and-add multiplier for two's complement would also perform a single addition here because the multiplier $10000000$ has exactly one $1$ bit. Therefore, there is no performance improvement in this specific case.\n\nThe correct option is D.", "answer": "$$\\boxed{D}$$", "id": "1916702"}, {"introduction": "Building on the principles of Radix-2 recoding, we now advance to a more powerful and widely used variant: the Radix-4 Booth's algorithm. By examining bits in overlapping groups of three, this method processes two multiplier bits at a time, effectively halving the number of partial products and accelerating the multiplication process. This practice will solidify your understanding of bit-grouping strategies and prepare you to analyze the kind of high-speed multiplier designs found in modern computer processors. [@problem_id:1916743]", "problem": "A digital systems engineer is designing a high-speed hardware multiplier for a new microprocessor's Arithmetic Logic Unit (ALU). To optimize performance, the design employs the Radix-4 Booth's algorithm, which reduces the number of partial products required for multiplication. Your task is to determine the correct Radix-4 Booth recoding for a specific 8-bit multiplier.\n\nGiven the multiplier $Y$, represented as an 8-bit two's complement number $Y = 01011011_2$, determine the sequence of recoded digits $(d_3, d_2, d_1, d_0)$ that represents this number. The sequence should be ordered from the most significant digit ($d_3$) to the least significant digit ($d_0$).\n\nWhich of the following represents the correct sequence?\n\nA. 1, 2, -1, -1\n\nB. 1, 1, 2, -1\n\nC. -1, -1, 2, 1\n\nD. 0, 1, 2, -1, -1\n\nE. 1, -2, 1, 1", "solution": "We are given the 8-bit two's complement multiplier $Y=01011011_{2}$ with bits labeled as $y_{7}\\dots y_{0}$, so\n$$\ny_{7}=0,\\; y_{6}=1,\\; y_{5}=0,\\; y_{4}=1,\\; y_{3}=1,\\; y_{2}=0,\\; y_{1}=1,\\; y_{0}=1,\n$$\nand we append $y_{-1}=0$ for Radix-4 Booth recoding.\n\nIn Radix-4 Booth recoding, we form overlapping triplets $(y_{2i+1},y_{2i},y_{2i-1})$ for $i=0,1,2,3$, mapping each triplet to a digit $d_{i}\\in\\{-2,-1,0,1,2\\}$ using the standard rule:\n- $000\\to 0$, $001\\to 1$, $010\\to 1$, $011\\to 2$,\n- $100\\to -2$, $101\\to -1$, $110\\to -1$, $111\\to 0$.\n\nCompute each group:\n- For $i=0$: $(y_{1},y_{0},y_{-1})=(1,1,0)$ which is $110\\to d_{0}=-1$.\n- For $i=1$: $(y_{3},y_{2},y_{1})=(1,0,1)$ which is $101\\to d_{1}=-1$.\n- For $i=2$: $(y_{5},y_{4},y_{3})=(0,1,1)$ which is $011\\to d_{2}=2$.\n- For $i=3$: $(y_{7},y_{6},y_{5})=(0,1,0)$ which is $010\\to d_{3}=1$.\n\nThus the sequence from most significant to least significant is $(d_{3},d_{2},d_{1},d_{0})=(1,2,-1,-1)$.\n\nAs a consistency check, reconstructing $Y$ from the digits gives $Y = d_0\\cdot4^0 + d_1\\cdot4^1 + d_2\\cdot4^2 + d_3\\cdot4^3 = (-1)\\cdot1 + (-1)\\cdot4 + 2\\cdot16 + 1\\cdot64 = -1 - 4 + 32 + 64 = 91$. This matches the decimal value of $Y = 01011011_2$, which is 91. Therefore the correct option is A.", "answer": "$$\\boxed{A}$$", "id": "1916743"}]}