{"hands_on_practices": [{"introduction": "An Arithmetic Logic Unit (ALU) does more than just compute; it also provides vital information about the results of its operations. A fundamental example is the \"zero flag,\" a status signal used to indicate whether a calculation resulted in zero. This practice challenges you to design a zero-detector circuit, an essential component for implementing conditional instructions in a processor, using the elegant simplicity of a single logic gate. [@problem_id:1909094]", "problem": "In digital logic design, a \"zero flag\" is a common status bit in an Arithmetic Logic Unit (ALU) that indicates whether the result of an operation is zero. Consider the design of a circuit to generate such a flag for a 4-bit binary number, represented by the bits $A_3A_2A_1A_0$, where $A_3$ is the most significant bit. The circuit has a single output, $Z$, which should be high (logic 1) if and only if the 4-bit input number is zero (i.e., 0000). Otherwise, $Z$ should be low (logic 0). Your task is to implement this \"zero-detector\" functionality using only a single 4-input NOR gate. Determine the Boolean expression for the output $Z$ in terms of the inputs $A_3, A_2, A_1$, and $A_0$ that this single gate would implement.", "solution": "The zero flag must be high if and only if all input bits are zero: $A_{3}=0$, $A_{2}=0$, $A_{1}=0$, and $A_{0}=0$. In Boolean algebra, this condition can be written as the logical AND of the complemented inputs:\n$$\nZ = \\overline{A_{3}} \\cdot \\overline{A_{2}} \\cdot \\overline{A_{1}} \\cdot \\overline{A_{0}}.\n$$\nBy De Morgan's law, the product of complements equals the complement of the sum:\n$$\n\\overline{A_{3}} \\cdot \\overline{A_{2}} \\cdot \\overline{A_{1}} \\cdot \\overline{A_{0}} = \\overline{A_{3} + A_{2} + A_{1} + A_{0}}.\n$$\nA single 4-input NOR gate implements exactly the function that outputs the complement of the OR of its inputs. Therefore, using a single 4-input NOR gate, the zero-detector output is:\n$$\nZ = \\overline{A_{3} + A_{2} + A_{1} + A_{0}}.\n$$\nThis expression is high only when all inputs are zero, satisfying the zero-detector requirement.", "answer": "$$\\boxed{\\overline{A_{3}+A_{2}+A_{1}+A_{0}}}$$", "id": "1909094"}, {"introduction": "To create an efficient ALU, designers often combine addition and subtraction into a single functional block. This is achieved by converting subtraction into addition using the two's complement representation, where $A - B$ becomes $A + (\\text{two's complement of } B)$. This exercise guides you through the design of a crucial sub-circuit: a conditional two's complementer. You will build a combinational circuit that, based on a control signal, either passes an input through unchanged or outputs its two's complement, demonstrating a core principle of reconfigurable arithmetic logic. [@problem_id:1909155]", "problem": "An essential component of an Arithmetic Logic Unit (ALU) is a circuit that can conditionally negate a number. You are tasked with designing a 4-bit combinational circuit that performs this function for two's complement numbers.\n\nThe circuit has a 4-bit binary input $B = B_3B_2B_1B_0$, where $B_3$ is the most significant bit, and a single control input $S$. The circuit produces a 4-bit binary output $Y = Y_3Y_2Y_1Y_0$.\n\nThe behavior of the circuit is defined as follows:\n- If $S=0$, the output is the same as the input: $Y = B$.\n- If $S=1$, the output is the two's complement of the input: $Y = \\text{Two's Complement}(B)$.\n\nIn your expressions, use $\\cdot$ for AND, $+$ for OR, $\\oplus$ for XOR, and an overbar for NOT (e.g., $\\bar{A}$).\n\nWhich of the following sets of simplified Boolean expressions correctly describes the outputs $Y_3, Y_2, Y_1, Y_0$?\n\nA.\n$Y_0 = B_0$\n$Y_1 = (B_1 \\oplus S) \\oplus (\\bar{B_0} \\cdot S)$\n$Y_2 = (B_2 \\oplus S) \\oplus (\\bar{B_1} \\cdot \\bar{B_0} \\cdot S)$\n$Y_3 = (B_3 \\oplus S) \\oplus (\\bar{B_2} \\cdot \\bar{B_1} \\cdot \\bar{B_0} \\cdot S)$\n\nB.\n$Y_0 = B_0 \\oplus S$\n$Y_1 = B_1 \\oplus S$\n$Y_2 = B_2 \\oplus S$\n$Y_3 = B_3 \\oplus S$\n\nC.\n$Y_0 = B_0 \\oplus S$\n$Y_1 = B_1 \\oplus (B_0 \\cdot S)$\n$Y_2 = B_2 \\oplus (B_1 \\cdot B_0 \\cdot S)$\n$Y_3 = B_3 \\oplus (B_2 \\cdot B_1 \\cdot B_0 \\cdot S)$\n\nD.\n$Y_0 = B_0$\n$Y_1 = (B_1 \\oplus S) \\oplus (B_0 \\cdot S)$\n$Y_2 = (B_2 \\oplus S) \\oplus (B_1 \\cdot B_0 \\cdot S)$\n$Y_3 = (B_3 \\oplus S) \\oplus (B_2 \\cdot B_1 \\cdot B_0 \\cdot S)$", "solution": "We require a 4-bit circuit that outputs $Y=B$ when $S=0$ and $Y=\\text{Two's Complement}(B)$ when $S=1$. The two's complement of $B$ is $\\overline{B}+1$. A standard way to realize this conditionally is:\n- Conditionally invert each bit with $X_{i}=B_{i}\\oplus S$ (so $X=B$ if $S=0$ and $X=\\overline{B}$ if $S=1$).\n- Add $S$ as the carry-in to the least significant bit, i.e., compute $Y=X+S$.\n\nLet $C_{0}=S$ and for each bit $i$ (from $0$ to $3$) use the half-adder relations for adding $X_{i}$ and $C_{i}$:\n$$\nY_{i}=X_{i}\\oplus C_{i},\\qquad C_{i+1}=X_{i}\\cdot C_{i}.\n$$\nUse $X_{i}=B_{i}\\oplus S$ and the identity $A\\oplus B=A\\cdot\\bar{B}+\\bar{A}\\cdot B$ along with $S\\cdot\\bar{S}=0$.\n\nBit $0$:\n$$\nX_{0}=B_{0}\\oplus S,\\quad Y_{0}=(B_{0}\\oplus S)\\oplus S=B_{0},\\quad C_{1}=(B_{0}\\oplus S)\\cdot S=\\bar{B_{0}}\\cdot S.\n$$\n\nBit $1$:\n$$\nX_{1}=B_{1}\\oplus S,\\quad Y_{1}=(B_{1}\\oplus S)\\oplus C_{1}=(B_{1}\\oplus S)\\oplus(\\bar{B_{0}}\\cdot S),\n$$\n$$\nC_{2}=X_{1}\\cdot C_{1}=(B_{1}\\oplus S)\\cdot(\\bar{B_{0}}\\cdot S)=(B_{1}\\bar{S}+\\bar{B_{1}}S)\\cdot\\bar{B_{0}}S=\\bar{B_{1}}\\bar{B_{0}}S.\n$$\n\nBit $2$:\n$$\nX_{2}=B_{2}\\oplus S,\\quad Y_{2}=(B_{2}\\oplus S)\\oplus C_{2}=(B_{2}\\oplus S)\\oplus(\\bar{B_{1}}\\cdot\\bar{B_{0}}\\cdot S),\n$$\n$$\nC_{3}=X_{2}\\cdot C_{2}=(B_{2}\\oplus S)\\cdot(\\bar{B_{1}}\\bar{B_{0}}S)=(B_{2}\\bar{S}+\\bar{B_{2}}S)\\cdot\\bar{B_{1}}\\bar{B_{0}}S=\\bar{B_{2}}\\bar{B_{1}}\\bar{B_{0}}S.\n$$\n\nBit $3$:\n$$\nX_{3}=B_{3}\\oplus S,\\quad Y_{3}=(B_{3}\\oplus S)\\oplus C_{3}=(B_{3}\\oplus S)\\oplus(\\bar{B_{2}}\\cdot\\bar{B_{1}}\\cdot\\bar{B_{0}}\\cdot S).\n$$\n\nThus the simplified expressions are:\n$$\nY_{0}=B_{0},\\quad Y_{1}=(B_{1}\\oplus S)\\oplus(\\bar{B_{0}}\\cdot S),\\quad Y_{2}=(B_{2}\\oplus S)\\oplus(\\bar{B_{1}}\\cdot\\bar{B_{0}}\\cdot S),\\quad Y_{3}=(B_{3}\\oplus S)\\oplus(\\bar{B_{2}}\\cdot\\bar{B_{1}}\\cdot\\bar{B_{0}}\\cdot S),\n$$\nwhich exactly match option A. Options B, C, and D have incorrect carry terms (B produces one’s complement when $S=1$; C and D use $B$-product carries instead of the required $\\bar{B}$-product carries).", "answer": "$$\\boxed{A}$$", "id": "1909155"}, {"introduction": "When performing arithmetic with fixed-size binary numbers, we must account for the possibility of \"overflow,\" an error that occurs when a result exceeds the representational range. Detecting this condition is critical for ensuring the correctness of computations. This practice explores a classic and highly efficient method for identifying overflow in two's complement addition. You will discover how this complex error can be detected by examining only two signals: the carry-in and carry-out of the most significant bit's full adder, revealing a powerful shortcut in digital design. [@problem_id:1914733]", "problem": "In the design of an Arithmetic Logic Unit (ALU), a critical component is a binary parallel adder capable of handling signed numbers. Consider an $n$-bit parallel adder designed to compute the sum $S = A + B$, where $A$ and $B$ are $n$-bit signed integers represented in two's complement format. The adder is built from a cascade of full-adder circuits.\n\nLet the bits of the operands be $A = a_{n-1}a_{n-2}...a_0$ and $B = b_{n-1}b_{n-2}...b_0$, where $a_{n-1}$ and $b_{n-1}$ are the sign bits, representing the Most Significant Bit (MSB). Let $C_{n-1}$ denote the carry-in signal to the full adder at the MSB position (stage $n-1$), and let $C_n$ denote the carry-out signal generated from this same MSB stage.\n\nYou are tasked with designing a minimal logic circuit that produces a single-bit overflow signal, $V$. This signal must be logic '1' if the sum $S$ has exceeded the representation range of an $n$-bit two's complement number, and logic '0' otherwise. The circuit should use only $C_{n-1}$ and $C_n$ as its inputs.\n\nWhich of the following Boolean expressions correctly represents the overflow signal $V$?\n\nA. $V = C_n$\n\nB. $V = C_{n-1} \\cdot C_n$\n\nC. $V = C_{n-1} + C_n$\n\nD. $V = C_{n-1} \\oplus C_n$\n\nE. $V = \\overline{C_{n-1} \\oplus C_n}$", "solution": "In two's complement addition of $n$-bit signed integers, overflow occurs if and only if the sign bits of the addends are equal but the sign bit of the sum differs. Equivalently, overflow can be detected using only the carry into the MSB and the carry out of the MSB: overflow occurs exactly when these two carries differ.\n\nLet $a \\equiv a_{n-1}$, $b \\equiv b_{n-1}$, $C \\equiv C_{n-1}$, $C_{\\text{out}} \\equiv C_{n}$, and $s \\equiv s_{n-1}$ be the MSB sum bit. For the MSB full adder,\n$$\ns = a \\oplus b \\oplus C,\\qquad C_{\\text{out}} = a b + a C + b C.\n$$\nThe overflow condition in terms of operand signs and the result sign is\n$$\nV = a b\\,\\overline{s} + \\overline{a}\\,\\overline{b}\\,s.\n$$\nWe will show that this equals $C \\oplus C_{\\text{out}}$.\n\nFirst, compute\n$$\nC \\oplus C_{\\text{out}} = C\\,\\overline{C_{\\text{out}}} + \\overline{C}\\,C_{\\text{out}}.\n$$\nUsing $C_{\\text{out}} = a b + a C + b C$ and De Morgan’s law,\n$$\n\\overline{C_{\\text{out}}} = \\overline{a b}\\,\\overline{a C}\\,\\overline{b C} = (\\overline{a}+\\overline{b})(\\overline{a}+\\overline{C})(\\overline{b}+\\overline{C}).\n$$\nTherefore,\n$$\nC\\,\\overline{C_{\\text{out}}} = C(\\overline{a}+\\overline{b})(\\overline{a}+\\overline{C})(\\overline{b}+\\overline{C})\n= C\\,\\overline{a}\\,(\\overline{a}+\\overline{b})(\\overline{b}+\\overline{C})\n= C\\,\\overline{a}\\,(\\overline{b}+\\overline{C})\n= C\\,\\overline{a}\\,\\overline{b}.\n$$\nAlso,\n$$\n\\overline{C}\\,C_{\\text{out}} = \\overline{C}(a b + a C + b C) = \\overline{C}\\,a b.\n$$\nHence,\n$$\nC \\oplus C_{\\text{out}} = C\\,\\overline{a}\\,\\overline{b} + \\overline{C}\\,a b.\n$$\nNow evaluate the overflow definition by cases on $(a,b)$:\n- If $a=b=1$, then $s = 1 \\oplus 1 \\oplus C = C$, so $V = a b\\,\\overline{s} = \\overline{C} = \\overline{C}\\,a b$.\n- If $a=b=0$, then $s = 0 \\oplus 0 \\oplus C = C$, so $V = \\overline{a}\\,\\overline{b}\\,s = C = C\\,\\overline{a}\\,\\overline{b}$.\n- If $a \\neq b$, then $a b = \\overline{a}\\,\\overline{b} = 0$, so $V=0$.\n\nThus in all cases,\n$$\nV = C\\,\\overline{a}\\,\\overline{b} + \\overline{C}\\,a b = C \\oplus C_{\\text{out}}.\n$$\nTherefore the minimal logic using only $C_{n-1}$ and $C_{n}$ is\n$$\nV = C_{n-1} \\oplus C_{n},\n$$\nwhich corresponds to option D.", "answer": "$$\\boxed{D}$$", "id": "1914733"}]}