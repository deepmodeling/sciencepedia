{"hands_on_practices": [{"introduction": "Understanding binary division begins with mastering the restoring algorithm, which serves as a direct hardware implementation of the familiar long-division method. This exercise provides a foundational practice by requiring a full trace of the algorithm with simple, manageable numbers. By meticulously following the state of the Accumulator ($A$) and Quotient ($Q$) registers through each cycle, you will build a robust, step-by-step model of how digital systems perform this essential arithmetic task [@problem_id:1913872].", "problem": "A digital circuit is designed to perform unsigned binary division using the restoring division algorithm. The circuit uses an Accumulator register (A), a Quotient register (Q), and a Divisor register (M). The number of bits in the dividend (and thus the Q register) is $n=4$. The A and M registers are sized to be $n+1=5$ bits to accommodate the sign bit and prevent overflow during intermediate calculations.\n\nThe circuit is tasked with dividing the dividend $1001_2$ by the divisor $11_2$. Initially, the A register is cleared to $00000_2$, the Q register holds the dividend $1001_2$, and the M register holds the divisor, padded to 5 bits as $00011_2$.\n\nThe division process proceeds for $n=4$ cycles. Each cycle consists of the following steps:\n1. The concatenated register pair $AQ$ is shifted one bit to the left. The bit shifted out of Q's most significant bit (MSB) position moves into A's least significant bit (LSB) position.\n2. The value in M is subtracted from A ($A \\leftarrow A - M$). All arithmetic is performed using two's complement representation.\n3. The MSB of A is checked.\n    - If the MSB of A is 1 (indicating a negative result), the LSB of Q is set to 0, and the value of A is restored by adding M back to it ($A \\leftarrow A + M$).\n    - If the MSB of A is 0 (indicating a positive or zero result), the LSB of Q is set to 1, and the value of A is not changed.\n\nWhich of the following options correctly lists the sequence of 5-bit binary values held in the accumulator (A) register at the conclusion of each of the four cycles, from cycle 1 to cycle 4?\n\nA. $00001_2, 00010_2, 00001_2, 00000_2$\n\nB. $11110_2, 11111_2, 00001_2, 00000_2$\n\nC. $00001_2, 00010_2, 00010_2, 00001_2$\n\nD. $00001_2, 00001_2, 00010_2, 00000_2$", "solution": "We use the restoring division algorithm with registers: $A$ (5 bits), $Q$ (4 bits), and $M$ (5 bits). Initialize $A=00000_{2}$, $Q=1001_{2}$, $M=00011_{2}$. Each cycle performs: left shift of the concatenated $AQ$, then $A \\leftarrow A - M$ using two’s complement arithmetic in 5 bits, then if $A$ is negative (MSB $=1$) set $Q$ LSB to $0$ and restore $A \\leftarrow A+M$; otherwise set $Q$ LSB to $1$ and keep $A$.\n\nCycle 1: Shift left $AQ$. The MSB of $Q$ is $1$, so after the shift $A=00001_{2}$ and $Q=0010_{2}$. Subtract $M$: compute two’s complement of $M=00011_{2}$ in 5 bits as $11101_{2}$, hence\n$$\nA \\leftarrow 00001_{2} + 11101_{2} = 11110_{2}.\n$$\nMSB is $1$ (negative), so set LSB of $Q$ to $0$ and restore\n$$\nA \\leftarrow 11110_{2} + 00011_{2} = 00001_{2}.\n$$\nEnd of cycle 1: $A=00001_{2}$.\n\nCycle 2: Shift left $AQ$. The MSB of $Q$ is $0$, so $A=00010_{2}$ and $Q=0100_{2}$. Subtract $M$:\n$$\nA \\leftarrow 00010_{2} + 11101_{2} = 11111_{2}.\n$$\nNegative, so set LSB of $Q$ to $0$ and restore\n$$\nA \\leftarrow 11111_{2} + 00011_{2} = 00010_{2}.\n$$\nEnd of cycle 2: $A=00010_{2}$.\n\nCycle 3: Shift left $AQ$. The MSB of $Q$ is $0$, so $A=00100_{2}$ and $Q=1000_{2}$. Subtract $M$:\n$$\nA \\leftarrow 00100_{2} + 11101_{2} = 00001_{2}.\n$$\nNonnegative, so set LSB of $Q$ to $1$ and keep $A$. End of cycle 3: $A=00001_{2}$.\n\nCycle 4: Shift left $AQ$. The MSB of $Q$ is $1$, so $A=00011_{2}$ and $Q=0010_{2}$. Subtract $M$:\n$$\nA \\leftarrow 00011_{2} - 00011_{2} = 00000_{2}.\n$$\nNonnegative, so set LSB of $Q$ to $1$ and keep $A$. End of cycle 4: $A=00000_{2}$.\n\nTherefore, the accumulator $A$ at the conclusion of cycles 1 through 4 is $00001_{2}, 00010_{2}, 00001_{2}, 00000_{2}$, which corresponds to option A.", "answer": "$$\\boxed{A}$$", "id": "1913872"}, {"introduction": "Building on the restoring method, we now explore the more performance-oriented non-restoring division algorithm. This technique enhances efficiency by eliminating the time-consuming \"restore\" operation, instead relying on a balanced sequence of additions and subtractions based on intermediate results. This practice challenges you to trace this optimized process, focusing on its unique rules for setting quotient bits and understanding the state of the final remainder in the accumulator before any correction is applied [@problem_id:1913819].", "problem": "Consider the division of the 4-bit unsigned binary number $D = 1011_2$ (the dividend) by the unsigned binary number $V = 11_2$ (the divisor). This division is to be performed using the non-restoring division algorithm.\n\nThe hardware setup consists of an accumulator register $A$, a quotient register $Q$, and a divisor register $M$. For this operation, the accumulator A and the divisor M are represented using 5 bits. The dividend D is initially loaded into the 4-bit register Q. The accumulator A is initialized to all zeros.\n\nThe algorithm proceeds for a number of cycles equal to the number of bits in the dividend. The standard non-restoring algorithm for unsigned integers is used, which involves a conditional addition or subtraction based on the sign of the accumulator, followed by setting the new quotient bit.\n\nDetermine the final binary value contained in the 5-bit accumulator register A immediately after the last of the four cycles is completed. Note that this is the value *before* any potential final correction step is performed on the remainder. Provide your answer as a 5-bit binary string.", "solution": "We use the standard non-restoring division algorithm with two's-complement arithmetic in the 5-bit accumulator $A$ and 5-bit divisor $M$. Initialize $A=00000$, $Q=1011$, and $M=00011$. For each of the $4$ cycles, perform:\n1) Left shift the concatenated $(A,Q)$ by one bit.\n2) If $A \\ge 0$, do $A \\leftarrow A - M$; if $A  0$, do $A \\leftarrow A + M$ (all in 5-bit two's-complement).\n3) Set the new quotient bit $Q_{0}$ to $1$ if $A \\ge 0$, else $0$.\n\nCycle 1:\n- Shift: $(A,Q): 00000\\,1011 \\to 00001\\,0110$, so $A=00001$, $Q=0110$.\n- Since $A \\ge 0$, compute $A \\leftarrow A - M = 00001 - 00011 = 00001 + 11101 = 11110$.\n- Since $A  0$, set $Q_{0}=0$, so $Q=0110$.\n\nCycle 2:\n- Shift: $(A,Q): 11110\\,0110 \\to 11100\\,1100$, so $A=11100$, $Q=1100$.\n- Since $A  0$, compute $A \\leftarrow A + M = 11100 + 00011 = 11111$.\n- Since $A  0$, set $Q_{0}=0$, so $Q=1100$.\n\nCycle 3:\n- Shift: $(A,Q): 11111\\,1100 \\to 11111\\,1000$, so $A=11111$, $Q=1000$.\n- Since $A  0$, compute $A \\leftarrow A + M = 11111 + 00011 = 00010$ (discarding the carry).\n- Since $A \\ge 0$, set $Q_{0}=1$, so $Q=1001$.\n\nCycle 4:\n- Shift: $(A,Q): 00010\\,1001 \\to 00101\\,0010$, so $A=00101$, $Q=0010$.\n- Since $A \\ge 0$, compute $A \\leftarrow A - M = 00101 - 00011 = 00010$.\n- Since $A \\ge 0$, set $Q_{0}=1$, so $Q=0011$.\n\nImmediately after the fourth cycle (and before any final correction), the accumulator is $A=00010$.", "answer": "$$\\boxed{00010}$$", "id": "1913819"}, {"introduction": "Beyond memorizing algorithmic steps, true mastery of division lies in a solid conceptual understanding of its mathematical properties. This final practice shifts focus from specific hardware procedures to the fundamental definition of integer division. By tackling cases that include the important edge case of dividing a smaller number by a larger one, you will reinforce the core principles that govern all division operations, ensuring your knowledge is both flexible and deeply rooted [@problem_id:1913865].", "problem": "An Arithmetic Logic Unit (ALU) within a custom-designed processor is programmed to execute a specific sequence of operations. All numbers are treated as unsigned binary integers. The ALU performs two independent division operations.\n\nFirst, it divides the dividend $X = 1001_2$ by the divisor $Y = 1110_2$. Let the resulting integer quotient be $Q_1$ and the remainder be $R_1$.\n\nSecond, it divides the dividend $P = 110110_2$ by the divisor $Q = 101_2$. Let the resulting integer quotient be $Q_2$ and the remainder be $R_2$.\n\nThe processor then constructs a final binary number by concatenating the bit string of the first remainder, $R_1$, with the bit string of the second quotient, $Q_2$. The bits of $R_1$ form the most significant portion of the output, and the bits of $Q_2$ form the least significant portion.\n\nWhat is the final binary number? Your answer should be presented as a single binary string with no subscript.", "solution": "We use the definition of unsigned integer division: for dividend $A$ and positive divisor $B$, there exist unique integers $Q$ and $R$ such that $A=BQ+R$ with $0 \\le R  B$.\n\nFirst division: let $X=1001_{2}$ and $Y=1110_{2}$. Compare $X$ and $Y$: since $1001_{2}  1110_{2}$, we must have $Q_{1}=0$ and $R_{1}=X=1001_{2}$.\n\nSecond division: let $P=110110_{2}$ and $Q=101_{2}$. Perform binary long division to find $Q_{2}$ and $R_{2}$ such that $P=Q \\cdot Q_{2}+R_{2}$ and $0 \\le R_{2}  Q$.\n- Compare $Q$ with the first three bits of $P$: $110_2 \\ge 101_2$. Subtract: $110_2 - 101_2 = 1_2$. The first quotient bit is $1$. The remainder is $1_2$.\n- Bring down the next bit ($1$), making the new partial dividend $11_2$. Since $11_2  101_2$, the next quotient bit is $0$. The remainder is $11_2$.\n- Bring down the next bit ($1$), making the new partial dividend $111_2$. Since $111_2 \\ge 101_2$, we subtract: $111_2 - 101_2 = 10_2$. The next quotient bit is $1$. The remainder is $10_2$.\n- Bring down the last bit ($0$), making the new partial dividend $100_2$. Since $100_2  101_2$, the last quotient bit is $0$. The remainder is $100_2$.\n\nThe final quotient is $Q_{2}=1010_{2}$ and the final remainder is $R_{2}=100_{2}$. The processor outputs the concatenation of the bit string of $R_{1}$ with that of $Q_{2}$, so the final binary number is $1001$ followed by $1010$, namely $10011010$.", "answer": "$$\\boxed{10011010}$$", "id": "1913865"}]}