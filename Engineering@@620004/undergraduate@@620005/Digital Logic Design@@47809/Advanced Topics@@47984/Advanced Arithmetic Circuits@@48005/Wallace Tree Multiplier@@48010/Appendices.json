{"hands_on_practices": [{"introduction": "Before we can speed up multiplication with a Wallace tree, we must first understand the fundamental problem it is designed to solve: summing a large number of partial products. This first exercise asks you to map out this initial landscapeâ€”the partial product matrix. By determining its key dimensions for a non-square multiplication, you develop a concrete understanding of the computational challenge ahead, setting the stage for why an efficient reduction strategy is so crucial for high-speed arithmetic.", "problem": "In digital arithmetic, multiplying two unsigned binary numbers is a fundamental operation. Consider the multiplication of a 4-bit unsigned number, the multiplicand, by a 6-bit unsigned number, the multiplier. The product is formed by first generating an array of partial products and then summing them.\n\nLet the 4-bit multiplicand be denoted by $A$, with bits $A_3A_2A_1A_0$, and the 6-bit multiplier be denoted by $B$, with bits $B_5B_4B_3B_2B_1B_0$. A partial product term is formed by the logical AND of a multiplicand bit $A_i$ and a multiplier bit $B_j$. The weight of this term in the final sum is $2^{i+j}$.\n\nBefore any addition or reduction is performed (e.g., using a Wallace Tree or a Carry-Save Adder array), these individual partial product bits are conceptually arranged into columns based on their binary weight. All terms with the same weight $2^k$ (i.e., same value of $i+j$) belong to the same column, say column $k$. The \"height\" of a column is the number of partial product bits it contains.\n\nDetermine the following two quantities for this $4 \\times 6$ multiplication:\n1. The total number of a partial product bits generated.\n2. The height of the tallest column in the initial partial product matrix.\n\nProvide the two integer answers as a row matrix, with the total number of bits as the first element and the tallest column height as the second.", "solution": "The problem asks for two properties of the initial partial product matrix for a $4 \\times 6$ unsigned binary multiplication. The multiplicand $A$ is 4 bits wide, so its bits are indexed $i \\in \\{0, 1, 2, 3\\}$. The multiplier $B$ is 6 bits wide, so its bits are indexed $j \\in \\{0, 1, 2, 3, 4, 5\\}$.\n\n**Part 1: Total number of partial product bits**\n\nA partial product bit is formed by the logical AND of one bit from the multiplicand, $A_i$, and one bit from the multiplier, $B_j$. Since there are 4 bits in the multiplicand and 6 bits in the multiplier, every combination of one bit from each operand forms a unique partial product.\n\nThe total number of partial product bits is therefore the product of the number of bits in the multiplicand and the number of bits in the multiplier.\n\nTotal number of partial product bits = (width of $A$) $\\times$ (width of $B$)\n$$ \\text{Total bits} = 4 \\times 6 = 24 $$\nThis is the first part of our answer.\n\n**Part 2: Height of the tallest column**\n\nThe partial product bits are arranged in columns based on their weight, $2^k$, where the column index $k$ is given by the sum of the bit indices, $k = i + j$. The height of a column $k$ is the number of pairs $(i, j)$ such that $i+j=k$, with the constraints $0 \\le i \\le 3$ and $0 \\le j \\le 5$.\n\nWe can systematically determine the height of each column by enumerating the valid $(i,j)$ pairs for each $k$:\n\n- **Column $k=0$**: $i+j=0$. The only valid pair is $(i,j)=(0,0)$. Height = 1.\n- **Column $k=1$**: $i+j=1$. Valid pairs are $(0,1)$ and $(1,0)$. Height = 2.\n- **Column $k=2$**: $i+j=2$. Valid pairs are $(0,2)$, $(1,1)$, and $(2,0)$. Height = 3.\n- **Column $k=3$**: $i+j=3$. Valid pairs are $(0,3)$, $(1,2)$, $(2,1)$, and $(3,0)$. Height = 4.\n- **Column $k=4$**: $i+j=4$. Valid pairs are $(0,4)$, $(1,3)$, $(2,2)$, and $(3,1)$. Height = 4.\n- **Column $k=5$**: $i+j=5$. Valid pairs are $(0,5)$, $(1,4)$, $(2,3)$, and $(3,2)$. Height = 4.\n- **Column $k=6$**: $i+j=6$. Valid pairs are $(1,5)$, $(2,4)$, and $(3,3)$. The pair $(0,6)$ is invalid since $j_{max}=5$. Height = 3.\n- **Column $k=7$**: $i+j=7$. Valid pairs are $(2,5)$ and $(3,4)$. Height = 2.\n- **Column $k=8$**: $i+j=8$. The only valid pair is $(3,5)$. Height = 1.\n- **Column $k=9$**: $i+j=9$. No valid pairs exist. For example, $(3,6)$ has $j>5$. Height = 0.\n\nThe sequence of column heights is (1, 2, 3, 4, 4, 4, 3, 2, 1). We can verify this by summing the heights: $1+2+3+4+4+4+3+2+1 = 24$, which matches the total number of partial product bits calculated in the first part.\n\nBy inspecting the sequence of heights, the maximum value is 4. This occurs for columns $k=3, 4, 5$.\n\nThus, the height of the tallest column is 4. This is the second part of our answer.\n\nBoth requested values have been determined. The total number of partial product bits is 24, and the height of the tallest column is 4.", "answer": "$$\\boxed{\\begin{pmatrix} 24 & 4 \\end{pmatrix}}$$", "id": "1977426"}, {"introduction": "With the partial product matrix established, we can now unleash the Wallace tree's powerful reduction engine. This process uses parallel layers of full adders and half adders to systematically \"compress\" the matrix down to just two rows. This practice guides you through the entire multi-stage reduction for a $5 \\times 5$ multiplier, meticulously tracking the changes in column heights and the components used at each step. Completing this exercise will solidify your procedural understanding of how the Wallace algorithm achieves its remarkable speed.", "problem": "In the design of a high-speed arithmetic logic unit, an engineer is implementing an unsigned hardware multiplier for two 5-bit binary numbers using a Wallace tree architecture. The multiplier first generates a matrix of partial products. This matrix is then reduced to a two-row matrix by a series of reduction stages. The final two rows are then added using a conventional carry-propagate adder.\n\nThe reduction process proceeds in stages. In each stage, the bits within each column of the matrix are reduced using Full Adders (FAs) and Half Adders (HAs) according to a greedy strategy:\n- A Full Adder takes three bits from a single column as input and produces a one-bit sum output for the same column and a one-bit carry output for the next higher-order (more significant) column.\n- A Half Adder takes two bits from a single column as input and produces a one-bit sum output for the same column and a one-bit carry output for the next higher-order column.\n\nWithin each column, as many FAs as possible are used. If two bits remain after forming groups of three, one HA is used. If one bit remains, it is passed directly to the next stage in the same column. The sum bits from the adders and any passed-through bits form the rows for that column in the next stage, along with the carry bits from the adjacent, lower-order column. This process is repeated until no column in the matrix has more than two bits.\n\nCalculate the total number of Full Adders and Half Adders required for the entire reduction phase of this $5 \\times 5$ Wallace tree multiplier. Present your answer as a pair of integers `(Total FAs, Total HAs)`.", "solution": "Let the two 5-bit unsigned numbers be $A = a_4a_3a_2a_1a_0$ and $B = b_4b_3b_2b_1b_0$. The multiplication $A \\times B$ generates 25 partial product bits, $p_{ij} = a_i \\cdot b_j$. These bits are arranged in a matrix, shifted according to their bit weight. The product can have up to $5+5=10$ bits, so the columns are indexed from C0 (least significant) to C9 (most significant).\n\nFirst, we determine the number of bits (the height) in each column of the initial partial product matrix.\n- C0: 1 bit ($p_{00}$)\n- C1: 2 bits ($p_{01}, p_{10}$)\n- C2: 3 bits ($p_{02}, p_{11}, p_{20}$)\n- C3: 4 bits ($p_{03}, p_{12}, p_{21}, p_{30}$)\n- C4: 5 bits ($p_{04}, p_{13}, p_{22}, p_{31}, p_{40}$)\n- C5: 4 bits ($p_{14}, p_{23}, p_{32}, p_{41}$)\n- C6: 3 bits ($p_{24}, p_{33}, p_{42}$)\n- C7: 2 bits ($p_{34}, p_{43}$)\n- C8: 1 bit ($p_{44}$)\n- C9: 0 bits\n\nThe initial vector of column heights, `N0` (from C9 down to C0), is `[0, 1, 2, 3, 4, 5, 4, 3, 2, 1]`. The maximum height is 5, so reduction is needed.\n\n**Reduction Stage 1:**\nWe apply adders to each column of `N0`. For a column of height $k$, we use $\\lfloor k/3 \\rfloor$ FAs and $\\lfloor (k \\pmod 3) / 2 \\rfloor$ HAs. Each FA produces one sum bit and one carry bit. Each HA produces one sum bit and one carry bit.\n- C0 (k=1): No adders. 1 bit passes through. (s=1, c=0)\n- C1 (k=2): 1 HA. (s=1, c=1).\n- C2 (k=3): 1 FA. (s=1, c=1).\n- C3 (k=4): 1 FA, 1 bit remains. (s=2, c=1).\n- C4 (k=5): 1 FA, 2 bits remain -> 1 HA. (s=2, c=2).\n- C5 (k=4): 1 FA, 1 bit remains. (s=2, c=1).\n- C6 (k=3): 1 FA. (s=1, c=1).\n- C7 (k=2): 1 HA. (s=1, c=1).\n- C8 (k=1): No adders. 1 bit passes through. (s=1, c=0)\n- C9 (k=0): No bits. (s=0, c=0)\n\nAdders used in Stage 1: **5 FAs, 3 HAs**.\n\nNow, we compute the column heights for the next stage, `N1`. The height of column `i` is the sum of sum bits from column `i` in the current stage and carry bits from column `i-1`.\nThe vector of column heights `N1` is `[0, 2, 2, 2, 4, 3, 3, 2, 1, 1]`. The maximum height is 4.\n\n**Reduction Stage 2:**\nWe repeat the process for `N1`.\n- C0 (k=1), C1 (k=1): Pass through. (s=1, c=0)\n- C2 (k=2): 1 HA. (s=1, c=1).\n- C3 (k=3): 1 FA. (s=1, c=1).\n- C4 (k=3): 1 FA. (s=1, c=1).\n- C5 (k=4): 1 FA, 1 bit remains. (s=2, c=1).\n- C6 (k=2): 1 HA. (s=1, c=1).\n- C7 (k=2): 1 HA. (s=1, c=1).\n- C8 (k=2): 1 HA. (s=1, c=1).\n- C9 (k=0): No bits.\n\nAdders used in Stage 2: **3 FAs, 4 HAs**.\n\nThe vector of column heights `N2` is `[1, 2, 2, 2, 3, 2, 2, 1, 1, 1]`. The maximum height is 3.\n\n**Reduction Stage 3:**\nWe repeat the process for `N2`.\n- C0,C1,C2 (k=1): Pass through. (s=1, c=0)\n- C3 (k=2): 1 HA. (s=1, c=1).\n- C4 (k=2): 1 HA. (s=1, c=1).\n- C5 (k=3): 1 FA. (s=1, c=1).\n- C6 (k=2): 1 HA. (s=1, c=1).\n- C7 (k=2): 1 HA. (s=1, c=1).\n- C8 (k=2): 1 HA. (s=1, c=1).\n- C9 (k=1): Pass through. (s=1, c=0)\n\nAdders used in Stage 3: **1 FA, 5 HAs**.\n\nThe vector of column heights `N3` is `[2, 2, 2, 2, 2, 2, 1, 1, 1, 1]`. The maximum height is 2, so the reduction phase is complete.\n\n**Total Adders:**\nTo find the total number of adders, we sum the counts from each stage.\n- Total FAs = (FAs from Stage 1) + (FAs from Stage 2) + (FAs from Stage 3) = $5 + 3 + 1 = 9$.\n- Total HAs = (HAs from Stage 1) + (HAs from Stage 2) + (HAs from Stage 3) = $3 + 4 + 5 = 12$.\n\nThe entire reduction phase requires 9 Full Adders and 12 Half Adders.", "answer": "$$\\boxed{\\begin{pmatrix} 9 & 12 \\end{pmatrix}}$$", "id": "1977482"}, {"introduction": "A digital circuit design is only as good as its physical implementation, and understanding how circuits behave under fault conditions is a critical engineering skill. This final practice moves from ideal theory to practical reality by introducing a common hardware defect: a \"stuck-at-0\" fault on a single wire. To solve this, you must first precisely locate the faulty component within the Wallace tree structure and then analyze its impact on a specific multiplication operation. This exercise bridges the gap between abstract design and concrete hardware debugging, demonstrating how a single, localized error can affect the final numerical outcome.", "problem": "An engineer is designing a 5-bit unsigned binary multiplier that uses a Wallace tree architecture. The multiplier is intended to compute the product of a 5-bit multiplicand, $A = a_4a_3a_2a_1a_0$, and a 5-bit multiplier, $B = b_4b_3b_2b_1b_0$. The bits of the operands are indexed such that bit 0 is the Least Significant Bit (LSB) and bit 4 is the Most Significant Bit (MSB). In this architecture, the initial step is to generate an array of partial products. The bit resulting from the logical AND operation $a_j \\land b_i$ is positioned in a column corresponding to a bit weight of $2^{j+i}$.\n\nThe Wallace tree then reduces this array of partial products using multiple stages of parallel adders. The first reduction stage takes the initial array and applies Full Adders (FAs) and Half Adders (HAs) to reduce the number of rows. A Full Adder is a digital logic circuit that takes three input bits from a single column and produces a sum bit, which remains in the same column for the subsequent stage, and a carry-out bit, which is passed to the next more significant column (i.e., column $k+1$) for the subsequent stage.\n\nDuring post-fabrication testing, a defect is discovered. The carry-out wire of the Full Adder that processes the bits in the most significant column requiring a Full Adder in the first reduction stage is permanently stuck-at-0.\n\nFor a specific test case where the multiplicand is $A = 28$ and the multiplier is $B = 28$, calculate the numerical difference between the product computed by the faulty multiplier and the correct product. That is, find the value of $P_{\\text{faulty}} - P_{\\text{correct}}$.", "solution": "The problem asks for the error in the final product of a 5x5 Wallace tree multiplier due to a specific stuck-at-0 fault. The inputs are $A=28$ and $B=28$.\n\nFirst, we represent the multiplicand $A$ and the multiplier $B$ as 5-bit unsigned binary numbers.\n$A = 28_{10} = 16 + 8 + 4 = 1 \\cdot 2^4 + 1 \\cdot 2^3 + 1 \\cdot 2^2 + 0 \\cdot 2^1 + 0 \\cdot 2^0 = 11100_2$.\nSo, $a_4=1, a_3=1, a_2=1, a_1=0, a_0=0$.\n$B = 28_{10} = 11100_2$.\nSo, $b_4=1, b_3=1, b_2=1, b_1=0, b_0=0$.\n\nNext, we need to determine the structure of the initial partial product array for a general 5x5 multiplication. The bit $a_j \\land b_i$ is placed in column $j+i$. The columns are indexed from 0 to 8. We determine the height of each column (number of bits) in the initial array.\n\n- Column 0: $a_0b_0$ (Height: 1)\n- Column 1: $a_1b_0, a_0b_1$ (Height: 2)\n- Column 2: $a_2b_0, a_1b_1, a_0b_2$ (Height: 3)\n- Column 3: $a_3b_0, a_2b_1, a_1b_2, a_0b_3$ (Height: 4)\n- Column 4: $a_4b_0, a_3b_1, a_2b_2, a_1b_3, a_0b_4$ (Height: 5)\n- Column 5: $a_4b_1, a_3b_2, a_2b_3, a_1b_4$ (Height: 4)\n- Column 6: $a_4b_2, a_3b_3, a_2b_4$ (Height: 3)\n- Column 7: $a_4b_3, a_3b_4$ (Height: 2)\n- Column 8: $a_4b_4$ (Height: 1)\n\nA Full Adder (FA) is required to reduce any column with a height of 3 or more. The columns that require FAs in the first reduction stage are columns 2, 3, 4, 5, and 6.\n\nThe problem states that the fault occurs in the \"most significant column requiring a Full Adder\". Based on our analysis, this is column 6.\n\nThe FA in column 6 takes the three bits in that column as its inputs. These inputs are:\n1.  $I_1 = a_4b_2$\n2.  $I_2 = a_3b_3$\n3.  $I_3 = a_2b_4$\n\nNow, we evaluate these inputs for the given values of $A=11100_2$ and $B=11100_2$.\n- $a_4=1, a_3=1, a_2=1$\n- $b_4=1, b_3=1, b_2=1$\n\n- $I_1 = a_4 \\land b_2 = 1 \\land 1 = 1$\n- $I_2 = a_3 \\land b_3 = 1 \\land 1 = 1$\n- $I_3 = a_2 \\land b_4 = 1 \\land 1 = 1$\n\nThe inputs to the FA in column 6 are $(1, 1, 1)$.\n\nA Full Adder with inputs $(x, y, z)$ generates a sum $S = x \\oplus y \\oplus z$ and a carry-out $C_{out} = (x \\land y) \\lor (y \\land z) \\lor (z \\land x)$.\nFor the inputs $(1, 1, 1)$:\n- The sum bit is $S = 1 \\oplus 1 \\oplus 1 = 1$. This bit remains in column 6 for the next stage.\n- The correct carry-out bit is $C_{out} = (1 \\land 1) \\lor (1 \\land 1) \\lor (1 \\land 1) = 1$. This bit should be passed to column 7 for the next stage.\n\nThe fault is a stuck-at-0 on this carry-out wire. This means that regardless of the inputs, the carry-out is always 0.\n- Correct carry-out: $C_{correct} = 1$\n- Faulty carry-out: $C_{faulty} = 0$\n\nThis carry-out bit from column 6 contributes to column 7. The positional weight of a bit in column 7 is $2^7$. The error introduced in the final sum is the difference in the carry bit's value multiplied by its positional weight.\n\nError = $(C_{faulty} - C_{correct}) \\times (\\text{weight of column 7})$\nError = $(0 - 1) \\times 2^7$\nError = $-1 \\times 128$\nError = $-128$\n\nThis error directly translates to the difference between the faulty product and the correct product, because the Wallace tree is a summation circuit and the fault simply removes one term from the sum.\nTherefore, $P_{\\text{faulty}} - P_{\\text{correct}} = -128$.\n\nTo verify, the correct product is $28 \\times 28 = 784$. The faulty multiplier calculates a sum that is 128 less than the correct sum. So, $P_{\\text{faulty}} = 784 - 128 = 656$. The difference is $656 - 784 = -128$.", "answer": "$$\\boxed{-128}$$", "id": "1977496"}]}