{"hands_on_practices": [{"introduction": "The journey of synthesizing an asynchronous circuit often begins with a primitive flow table, which captures every possible state sequence. To create an efficient and practical circuit, our first task is to simplify this table by merging equivalent states. This practice [@problem_id:1911361] will guide you through identifying and grouping compatible states, a fundamental step that directly reduces the number of state variables and simplifies the final hardware implementation.", "problem": "An asynchronous sequential circuit is designed to control a specialized two-stage authentication token. The circuit has a single input, $x$, from a capacitive sensor ($x=0$ for no touch, $x=1$ for touch) and a single output, $Z$, which activates different stages of an internal process. The behavior of the circuit is described by the following primitive flow table, which was derived based on the requirement that the system operates in fundamental mode (only one input changes at a time, and the circuit must stabilize before the next input change). The table lists the next state for each present state and input condition, along with the Moore-type output $Z$ associated with each present state.\n\n**Primitive Flow Table:**\n| Present State | Next State (Input $x$) | Output |\n|---|---|---|\n| | $x=0$ | $x=1$ | $Z$ |\n| A | (A) | B | 0 |\n| B | C | (B) | 0 |\n| C | A | D | 0 |\n| D | E | (D) | 1 |\n| E | A | F | 0 |\n| F | C | (F) | 1 |\n\n*Note: Stable states are indicated by parentheses, e.g., (A).*\n\nTo implement this logic efficiently, it is necessary to reduce the number of state variables by merging compatible states. Your task is to identify all the maximal compatible sets of states for the given primitive flow table. A maximal compatible is a set of compatible states that is not a proper subset of any other set of compatible states.\n\nWhich of the following options correctly lists all the maximal compatible sets?\n\nA. {A, C}, {B, E}\n\nB. {C, E}, {D, F}\n\nC. {A, B}, {D, F}, {E}\n\nD. {A, B, C}, {E, F}\n\nE. No states can be merged.", "solution": "We use the standard definition of compatibility for Moore-type asynchronous primitive flow tables: two states are compatible if (i) their outputs are equal, and (ii) for each input value, the corresponding next states are either equal or themselves compatible. Parenthesized entries indicate stability and simply give a definite next state equal to the present state.\n\nFrom the table, outputs are: $A:0$, $B:0$, $C:0$, $D:1$, $E:0$, $F:1$. Therefore, only states with equal outputs can be compatible. This partitions the candidates into $\\{A,B,C,E\\}$ and $\\{D,F\\}$.\n\nCheck candidate pairs in $\\{D,F\\}$:\n- Pair $\\{D,F\\}$: For $x=0$, $D \\to E$ and $F \\to C$, so this requires $\\{E,C\\}$ be compatible. For $x=1$, $D \\to D$ and $F \\to F$, which requires $\\{D,F\\}$ itself. Thus $\\{D,F\\}$ is compatible if and only if $\\{C,E\\}$ is compatible.\n\nCheck candidate pairs in $\\{A,B,C,E\\}$:\n- Pair $\\{C,E\\}$: For $x=0$, $C \\to A$ and $E \\to A$ (equal, so OK). For $x=1$, $C \\to D$ and $E \\to F$, which requires $\\{D,F\\}$ be compatible. Hence $\\{C,E\\}$ is compatible if and only if $\\{D,F\\}$ is compatible.\n\nThese two conditions form a consistent mutual dependency with no contradictions, so both $\\{C,E\\}$ and $\\{D,F\\}$ can be declared compatible.\n\nNow verify that no other pairs in $\\{A,B,C,E\\}$ are compatible:\n- Pair $\\{A,C\\}$: For $x=1$, $A \\to B$ and $C \\to D$; since $B$ has output $0$ and $D$ has output $1$, $\\{B,D\\}$ is incompatible, hence $\\{A,C\\}$ is incompatible.\n- Pair $\\{A,B\\}$: For $x=0$, $A \\to A$ and $B \\to C$, requiring $\\{A,C\\}$ which is incompatible; hence $\\{A,B\\}$ is incompatible.\n- Pair $\\{A,E\\}$: For $x=1$, $A \\to B$ and $E \\to F$, requiring $\\{B,F\\}$ which is incompatible due to output mismatch; hence $\\{A,E\\}$ is incompatible.\n- Pair $\\{B,C\\}$: For $x=0$, $B \\to C$ and $C \\to A$, requiring $\\{C,A\\}$ which is incompatible; hence $\\{B,C\\}$ is incompatible.\n- Pair $\\{B,E\\}$: For $x=0$, $B \\to C$ and $E \\to A$, requiring $\\{C,A\\}$ which is incompatible; hence $\\{B,E\\}$ is incompatible.\n\nThus the only compatible nontrivial pairs are $\\{C,E\\}$ and $\\{D,F\\}$. They cannot be enlarged: $\\{C,E\\}$ cannot include $A$ or $B$ (both incompatible), and $\\{D,F\\}$ cannot include any output-$0$ state due to output conflict. Therefore, the maximal compatible sets are exactly $\\{C,E\\}$ and $\\{D,F\\}$, which corresponds to option B.", "answer": "$$\\boxed{B}$$", "id": "1911361"}, {"introduction": "Unlike synchronous circuits, the timing of state changes in asynchronous circuits is not governed by a clock, creating the risk of 'race conditions'. This exercise [@problem_id:1911369] puts you at the heart of this challenge, asking you to find a state assignment that prevents these critical races. By ensuring that any required state transition corresponds to a change in only one state variable, you will learn the key principle for building robust and predictable asynchronous machines.", "problem": "An asynchronous sequential circuit has two binary inputs, $x_1$ and $x_2$, and three internal states, A, B, and C. Its behavior is described by the following merged flow table, where entries represent the next state, and a state enclosed in parentheses is a stable state. A dash `-` indicates a \"don't care\" condition.\n\n```\n    Inputs (x1x2)\nState |  00  |  01  |  11  |  10\n-------------------------------------\n  A   | (A)  |  B   | (A)  |  -\n  B   |  A   | (B)  |  C   | (B)\n  C   |  -   |  B   | (C)  |  -\n```\n\nA designer proposes a naive state assignment using two state variables, $y_2$ and $y_1$, as follows: A = `01`, B = `11`, C = `00`. This assignment is found to contain a critical race. To resolve this issue, a new race-free assignment using three state variables ($y_3, y_2, y_1$) is required.\n\nWhich of the following proposed three-variable assignments for states (A, B, C) ensures that all transitions specified in the flow table are free of races?\n\nA. A=000, B=001, C=010\n\nB. A=001, B=011, C=111\n\nC. A=100, B=010, C=001\n\nD. A=010, B=111, C=101", "solution": "We work in fundamental mode: only one input changes at a time, and changes occur only when the circuit is in a stable state. A race-free assignment requires that the binary codes of any two states between which a single-input change can cause a transition differ in exactly one bit, that is, they have Hamming distance equal to $1$.\n\nFrom the merged flow table, the stable cells are:\n- State $A$ is stable for inputs $00$ and $11$.\n- State $B$ is stable for inputs $01$ and $10$.\n- State $C$ is stable for input $11$.\n\nEnumerate all single-input transitions between stable states by changing one input bit from a stable cell:\n- From $A$ at input $00$: $00 \\to 01$ yields next state $B$, so $A \\to B$.\n- From $A$ at input $11$: $11 \\to 01$ yields next state $B$, so $A \\to B$.\n- From $B$ at input $01$: $01 \\to 00$ yields next state $A$, so $B \\to A$; and $01 \\to 11$ yields next state $C$, so $B \\to C$.\n- From $B$ at input $10$: $10 \\to 00$ yields next state $A$, so $B \\to A$; and $10 \\to 11$ yields next state $C$, so $B \\to C$.\n- From $C$ at input $11$: $11 \\to 01$ yields next state $B$, so $C \\to B$.\n\nTherefore, the set of required adjacent state pairs is $\\{(A,B),(B,C)\\}$ (and their reverses). To avoid critical races, any valid assignment must satisfy\n$$\nd_{H}(A,B)=1 \\quad \\text{and} \\quad d_{H}(B,C)=1,\n$$\nwhere $d_{H}$ denotes Hamming distance. There is no requirement on $d_{H}(A,C)$ because there is no direct transition between $A$ and $C$ under a single-input change.\n\nEvaluate each proposed three-variable assignment:\n\n- Option A: $A=000$, $B=001$, $C=010$.\n  $d_{H}(A,B)=1$; $d_{H}(B,C)=2$. Fails, since $B \\leftrightarrow C$ must be adjacent.\n\n- Option B: $A=001$, $B=011$, $C=111$.\n  $d_{H}(A,B)=1$; $d_{H}(B,C)=1$. Satisfies both adjacency requirements. $d_{H}(A,C)=2$ is acceptable.\n\n- Option C: $A=100$, $B=010$, $C=001$.\n  $d_{H}(A,B)=2$. Fails, since $A \\leftrightarrow B$ must be adjacent.\n\n- Option D: $A=010$, $B=111$, $C=101$.\n  $d_{H}(A,B)=2$. Fails, since $A \\leftrightarrow B$ must be adjacent.\n\nThus, only Option B ensures that all specified transitions are race-free.", "answer": "$$\\boxed{B}$$", "id": "1911369"}, {"introduction": "Once we have a minimized and race-free state table, the final step is to translate this abstract model into concrete logic. In this practice [@problem_id:1911359], you will derive the next-state logic equations directly from a merged flow table with a given state assignment. This process bridges the gap between state transition theory and a physical circuit implementation, giving you the tools to specify the exact combination of gates needed to bring your design to life.", "problem": "An asynchronous sequential circuit is designed to function as a simple memory bus arbiter. The arbiter manages access to a shared memory resource for two processors, P1 and P2. The circuit has two inputs, $R_1$ and $R_2$, which are request lines from P1 and P2, respectively ($R_i = 1$ for a request, $R_i = 0$ for no request). The circuit operates in fundamental mode, meaning only one input signal can change at a time.\n\nThe circuit has three distinct internal states, described in the following merged flow table. State A is the idle state where no processor has been granted access. State B grants access to P1, and State C grants access to P2. A grant, once given, is held until the corresponding processor relinquishes its request. Stable states are indicated by parentheses.\n\n| Present State | Next State for Input ($R_1R_2$) |\n| :---: | :---: | :---: | :---: | :---: |\n| | **00** | **01** | **10** | **11** |\n| **A** | (A) | C | B | - |\n| **B** | A | - | (B) | (B) |\n| **C** | A | (C) | - | (C) |\n\nFor the synthesis of this circuit, a one-hot state assignment is used with three state variables, $y_1, y_2, y_3$. The assignment is as follows:\n- State A: ($y_1y_2y_3$) = `100`\n- State B: ($y_1y_2y_3$) = `010`\n- State C: ($y_1y_2y_3$) = `001`\n\nLet $Y_1, Y_2, Y_3$ be the next-state functions for the state variables $y_1, y_2, y_3$ respectively. Determine the simplified Sum-of-Products (SOP) expressions for $Y_1, Y_2,$ and $Y_3$ required to implement this logic. In the expressions, use a prime (') to denote the NOT operation (e.g., $R_1'$).\n\nA. $Y_{1} = R_{1}'R_{2}' + y_{1}R_{1}R_{2}$; $Y_{2} = y_{1}R_{1}R_{2}' + y_{2}(R_{1} + R_{2})$; $Y_{3} = y_{1}R_{1}'R_{2} + y_{3}(R_{1} + R_{2})$\n\nB. $Y_{1} = R_{1}'R_{2}' + y_{1}R_{1}R_{2}$; $Y_{2} = y_{1}R_{1}'R_{2} + y_{2}(R_{1} + R_{2})$; $Y_{3} = y_{1}R_{1}R_{2}' + y_{3}(R_{1} + R_{2})$\n\nC. $Y_{1} = R_{1}'R_{2}'$; $Y_{2} = y_{1}R_{1}R_{2}'$; $Y_{3} = y_{1}R_{1}'R_{2}$\n\nD. $Y_{1} = y_{1} + R_{1}'R_{2}'$; $Y_{2} = y_{2} + y_{1}R_{1}R_{2}'$; $Y_{3} = y_{3} + y_{1}R_{1}'R_{2}$\n\nE. $Y_{1} = R_{1}'R_{2}' + y_{1}R_{1}R_{2}$; $Y_{2} = y_{1}R_{1}R_{2}' + y_{2}R_{1}'R_{2}'$; $Y_{3} = y_{1}R_{1}'R_{2} + y_{3}R_{1}'R_{2}'$", "solution": "We use the one-hot state assignment: state A corresponds to $y_1=1$ (and $y_2=y_3=0$), state B corresponds to $y_2=1$, and state C corresponds to $y_3=1$. The next-state function $Y_i$ is $1$ exactly for those combinations of present state and inputs for which the flow table specifies that the next state is the state encoded by $y_i=1$. Dashes in the merged flow table are treated as don’t-cares and may be exploited for hazard-free covers in asynchronous synthesis.\n\nDerivation of $Y_1$ (next A):\nFrom the flow table, the next state is A for:\n- Row A, input $00$: $(A,00)\\to(A)$\n- Row B, input $00$: $(B,00)\\to A$\n- Row C, input $00$: $(C,00)\\to A$\nThus,\n$$\nY_{1}=y_{1}R_{1}'R_{2}'+y_{2}R_{1}'R_{2}'+y_{3}R_{1}'R_{2}'=R_{1}'R_{2}'(y_{1}+y_{2}+y_{3}).\n$$\nUnder the one-hot constraint (only one of $y_1,y_2,y_3$ is $1$ in valid operation), this reduces to\n$$\nY_{1}=R_{1}'R_{2}'.\n$$\nTo improve hazard immunity using don’t-cares (the entry $(A,11)$ is a dash), we may include the redundant self-loop term in A under $11$, adding $y_1R_1R_2$ without changing correct operation. Hence a valid simplified SOP is\n$$\nY_{1}=R_{1}'R_{2}'+y_{1}R_{1}R_{2}.\n$$\n\nDerivation of $Y_2$ (next B):\nFrom the flow table, the next state is B for:\n- Row A, input $10$: $(A,10)\\to B$\n- Row B, input $10$: $(B,10)\\to(B)$\n- Row B, input $11$: $(B,11)\\to(B)$\nThus,\n$$\nY_{2}=y_{1}R_{1}R_{2}'+y_{2}R_{1}R_{2}'+y_{2}R_{1}R_{2}\n= y_{1}R_{1}R_{2}'+y_{2}R_{1}(R_{2}'+R_{2})\n= y_{1}R_{1}R_{2}'+y_{2}R_{1}.\n$$\nFor asynchronous hazard-free realization, we may expand using don’t-cares (e.g., $(B,01)$ is a dash) so that $Y_2$ remains asserted during single-input changes between $10$, $11$, and $01$. Replacing $y_2R_1$ by the larger implicant $y_2(R_1+R_2)$ ensures $Y_2$ stays $1$ across these transitions:\n$$\nY_{2}=y_{1}R_{1}R_{2}'+y_{2}(R_{1}+R_{2}).\n$$\n\nDerivation of $Y_3$ (next C):\nBy symmetry, from the flow table the next state is C for:\n- Row A, input $01$: $(A,01)\\to C$\n- Row C, input $01$: $(C,01)\\to(C)$\n- Row C, input $11$: $(C,11)\\to(C)$\nThus,\n$$\nY_{3}=y_{1}R_{1}'R_{2}+y_{3}R_{1}'R_{2}+y_{3}R_{1}R_{2}\n= y_{1}R_{1}'R_{2}+y_{3}R_{2}.\n$$\nAgain, for hazard-free operation we expand using don’t-cares (e.g., $(C,10)$ is a dash) so that $Y_3$ remains asserted during single-input changes between $01$, $11$, and $10$, yielding\n$$\nY_{3}=y_{1}R_{1}'R_{2}+y_{3}(R_{1}+R_{2}).\n$$\n\nCollecting the results, the simplified SOP expressions consistent with the merged flow table and hazard-free asynchronous implementation are:\n$$\nY_{1}=R_{1}'R_{2}'+y_{1}R_{1}R_{2},\\quad\nY_{2}=y_{1}R_{1}R_{2}'+y_{2}(R_{1}+R_{2}),\\quad\nY_{3}=y_{1}R_{1}'R_{2}+y_{3}(R_{1}+R_{2}).\n$$\nThese match option A.", "answer": "$$\\boxed{A}$$", "id": "1911359"}]}