{"hands_on_practices": [{"introduction": "A common pitfall in digital design is over-optimization, where simplifying a circuit can unintentionally introduce timing errors. This practice explores a classic example of a static-1 hazard, which occurs in Sum-of-Products (SOP) logic when an output that should remain HIGH momentarily glitches LOW. By analyzing a circuit before and after a seemingly redundant term is removed, you will learn to pinpoint the exact input transition that exposes the hazard, reinforcing the crucial role of consensus terms in ensuring stable circuit operation [@problem_id:1941645].", "problem": "A digital logic circuit is designed to implement the Boolean function $F(A, B, C) = AB + A'C + BC$. This circuit is initially free from static hazards. A novice designer, attempting to simplify the circuit, removes the product term $BC$, believing it to be redundant. The resulting optimized function is $F_{opt}(A, B, C) = AB + A'C$. This optimization inadvertently introduces a static-1 hazard into the circuit, meaning for a specific input change, the output, which should remain logically HIGH (1), will momentarily glitch to LOW (0).\n\nIdentify the single-variable input transition that will cause this static-1 hazard in the optimized circuit.\n\nA. Variable $B$ changes state while $A=0$ and $C=1$.\n\nB. Variable $C$ changes state while $A=1$ and $B=1$.\n\nC. Variable $A$ changes state while $B=1$ and $C=1$.\n\nD. Variable $A$ changes state while $B=0$ and $C=0$.\n\nE. Variable $B$ changes state while $A=1$ and $C=0$.", "solution": "We begin with the original function $F(A,B,C) = AB + A'C + BC$, which contains the consensus term $BC$ for the pair of implicants $AB$ and $A'C$. By the consensus theorem, for variables $X,Y,Z$ one has $XY + X'Z = XY + X'Z + YZ$, where $YZ$ is the consensus term. Mapping $X \\mapsto A$, $Y \\mapsto B$, and $Z \\mapsto C$, the consensus term of $AB$ and $A'C$ is $BC$.\n\nThe novice designer removes $BC$ and obtains $F_{opt}(A,B,C) = AB + A'C$. This creates the classic static-1 hazard condition: a single-variable input change that moves between two adjacent minterms covered by different implicants ($AB$ and $A'C$) while the consensus term ($BC$) that would hold the output HIGH is missing.\n\nTo expose the hazardous transition explicitly, consider changing $A$ while holding $B=1$ and $C=1$. Evaluate $F_{opt}$ on the two end states:\n- At $(A,B,C) = (1,1,1)$: $AB = 1 \\cdot 1 = 1$, $A'C = 0 \\cdot 1 = 0$, hence $F_{opt} = 1$.\n- At $(A,B,C) = (0,1,1)$: $AB = 0 \\cdot 1 = 0$, $A'C = 1 \\cdot 1 = 1$, hence $F_{opt} = 1$.\n\nThus, logically the output should remain $1$ across the single-variable transition $A:1 \\to 0$ with $B=1$, $C=1$. However, due to unequal propagation delays, when $A$ changes, the product $AB$ may drop to $0$ before $A'$ rises so that $A'C$ becomes $1$, producing a moment when both $AB=0$ and $A'C=0$ and causing a static-1 glitch. The removed consensus term $BC$ would have provided $BC=1$ for $B=1$, $C=1$, preventing this glitch.\n\nCheck the options:\n- A: $B$ changes with $A=0$, $C=1$. Here $A'C=1$ and $AB=0$ regardless of $B$, so the output is held by a single product term; no static-1 hazard.\n- B: $C$ changes with $A=1$, $B=1$. Here $AB=1$ independent of $C$, so no static-1 hazard.\n- C: $A$ changes with $B=1$, $C=1$. As shown, this is the hazardous transition.\n- D: $A$ changes with $B=0$, $C=0$. The output stays $0$, so not a static-1 hazard.\n- E: $B$ changes with $A=1$, $C=0$. The output changes logically, so not a static-1 hazard.\n\nTherefore, the single-variable input transition that causes the static-1 hazard is when $A$ changes while $B=1$ and $C=1$.", "answer": "$$\\boxed{C}$$", "id": "1941645"}, {"introduction": "Hazards are not limited to one form of logic; the dual of the static-1 hazard is the static-0 hazard, commonly found in Product-of-Sums (POS) implementations. This exercise challenges you to apply the dual form of the consensus theorem to identify and eliminate such a hazard, where an output meant to stay LOW instead produces an unwanted HIGH pulse. Successfully solving this problem demonstrates how to safeguard POS circuits by adding a specific redundant sum term, a fundamental technique for robust and reliable design [@problem_id:1941606].", "problem": "In the design of a safety-critical monitoring system, a digital logic circuit is implemented to process signals from three sensors, represented by Boolean variables $A$, $B$, and $C$. The output of the circuit, $F$, is described by the following Product-of-Sums (POS) expression:\n\n$$F(A, B, C) = (A + \\bar{B})(\\bar{A} + C)$$\n\nA detailed timing analysis has revealed that a static-0 hazard can occur in this circuit. A static-0 hazard is a transient, unwanted logic 1 pulse on an output that is supposed to remain at a steady logic 0 during an input change. This particular hazard manifests when inputs $B$ and $C$ are held at specific constant values while input $A$ transitions from one logic level to the other. To ensure system reliability, this hazard must be eliminated by adding a single redundant sum term (a maxterm) to the expression for $F$.\n\nWhich of the following sum terms, when ANDed with the original POS expression, will eliminate the static-0 hazard?\n\nA. $(B + C)$\n\nB. $(\\bar{B} + C)$\n\nC. $(A + B)$\n\nD. $(\\bar{A} + \\bar{B})$\n\nE. $(A + C)$", "solution": "Let the given function be written as a product of sums:\n$$F(A,B,C)=(A+\\bar{B})(\\bar{A}+C).$$\nDefine the two sum terms as $S_{1}=A+\\bar{B}$ and $S_{2}=\\bar{A}+C$. A static-0 hazard in a POS implementation arises when for fixed values of some inputs the output is $0$ both before and after a change in one input, but due to unequal path delays there can be a brief interval when all sum terms evaluate to $1$, causing a spurious $1$ at the output.\n\nWe seek fixed $B$ and $C$ such that $F=0$ for both $A=0$ and $A=1$. In a POS, $F=0$ if at least one sum term equals $0$. For $S_{1}=0$ we require $A=0$ and $\\bar{B}=0$, i.e., $A=0$ and $B=1$. For $S_{2}=0$ we require $\\bar{A}=0$ and $C=0$, i.e., $A=1$ and $C=0$. Thus the same fixed inputs $B=1$ and $C=0$ make $F=0$ for both $A=0$ and $A=1$:\n- If $B=1$ and $C=0$ with $A=0$, then $S_{1}=(0+\\bar{1})=0$ and $S_{2}=(\\bar{0}+0)=1$, so $F=0$.\n- If $B=1$ and $C=0$ with $A=1$, then $S_{1}=(1+0)=1$ and $S_{2}=(\\bar{1}+0)=0$, so $F=0$.\n\nTherefore, a static-0 hazard can occur when $B=1$, $C=0$, and $A$ toggles, because during the transition unequal delays can make $S_{1}=1$ and $S_{2}=1$ momentarily, producing an unwanted $F=1$ pulse.\n\nTo eliminate a static-0 hazard in a POS, add a redundant sum term that is $0$ throughout the hazardous input condition, independent of the switching variable, so that the product always has at least one $0$ factor. We need a sum term $S_{3}$ such that $S_{3}=0$ when $B=1$ and $C=0$, regardless of $A$. The term\n$$S_{3}=\\bar{B}+C$$\nsatisfies this, since for $B=1$ and $C=0$ we have $S_{3}=(0+0)=0$, independent of $A$.\n\nAdding this term does not change the steady-state function, by the dual of the consensus theorem. For Boolean variables $X,Y,Z$,\n$$(X+Y)(\\bar{X}+Z)=(X+Y)(\\bar{X}+Z)(Y+Z).$$\nWith $X=A$, $Y=\\bar{B}$, and $Z=C$, we obtain\n$$(A+\\bar{B})(\\bar{A}+C)=(A+\\bar{B})(\\bar{A}+C)(\\bar{B}+C).$$\nA direct logical justification: whenever $(A+\\bar{B})=1$ and $(\\bar{A}+C)=1$, then $(\\bar{B}+C)=1$; indeed, if $(\\bar{B}+C)=0$ then $B=1$ and $C=0$, which would force $(A+\\bar{B})=A$ and $(\\bar{A}+C)=\\bar{A}$, making it impossible for both sums to be $1$ simultaneously. Hence multiplying by $(\\bar{B}+C)$ leaves $F$ unchanged but removes the static-0 hazard by ensuring a persistent zero factor during the hazardous transition.\n\nAmong the options, the required redundant sum term is $(\\bar{B}+C)$, which is option B.", "answer": "$$\\boxed{B}$$", "id": "1941606"}, {"introduction": "While identifying hazards on a Karnaugh map or in a Boolean expression is a critical first step, understanding their real-world impact requires analyzing the circuit's physical timing. This practice bridges the gap between logical theory and physical reality by using specified gate propagation delaysâ€”the ultimate cause of combinational hazards. By calculating the precise duration of an output glitch, you will gain a quantitative understanding of how differences in signal path delays create transient errors and why timing analysis is indispensable in high-performance digital systems [@problem_id:1941602].", "problem": "A digital control circuit for a cryogenic sample handler is governed by the Boolean logic function $F(A, B, C, D) = (A \\land B) \\lor (A' \\land C \\land D)$, where $A'$ represents the negation of $A$. The output signal $F$ must be at logic '1' to permit a specific mechanical operation. The circuit is constructed using a 2-input AND gate for the term $(A \\land B)$, a NOT gate for $A'$, a 3-input AND gate for the term $(A' \\land C \\land D)$, and a final 2-input OR gate to combine the terms.\n\nThe propagation delays for the logic gates are as follows:\n- NOT gate: $t_{p,\\text{NOT}} = 3.2$ ns\n- 2-input AND gate: $t_{p,\\text{AND2}} = 4.1$ ns\n- 3-input AND gate: $t_{p,\\text{AND3}} = 5.3$ ns\n- 2-input OR gate: $t_{p,\\text{OR2}} = 3.8$ ns\n\nConsider an initial state where the inputs $B, C,$ and $D$ are all held constant at logic '1'. At time $t=0$, the input $A$ undergoes a single transition from logic '1' to logic '0'. Due to the differing propagation delays in the circuit paths, the output $F$ experiences a transient, unwanted drop to logic '0' before returning to logic '1'. This phenomenon is known as a static hazard.\n\nCalculate the exact duration of this glitch at the output $F$. Express the duration in nanoseconds (ns).", "solution": "The logic is $F=(A\\land B)\\lor(A'\\land C\\land D)$ with $B=C=D=1$ held constant. Functionally, $F=A\\lor A'=1$, but unequal path delays create a static hazard when $A$ transitions from $1$ to $0$ at $t=0$.\n\nLet the two OR inputs be:\n- $X(t)$: output of the 2-input AND implementing $(A\\land B)$,\n- $Y(t)$: output of the 3-input AND implementing $(A'\\land C\\land D)$.\n\nWith $B=C=D=1$:\n- Initially, $X=1$ and $Y=0$.\n- When $A$ falls at $t=0$, $X$ falls after the 2-input AND propagation delay:\n$$\nt_{X,\\text{fall}}=t_{p,\\text{AND2}}=4.1\\ \\text{ns}.\n$$\n- The signal $Y$ rises only after $A$ is inverted and then passes through the 3-input AND. The total delay from $A$ to $Y$ rising is\n$$\nt_{Y,\\text{rise}}=t_{p,\\text{NOT}}+t_{p,\\text{AND3}}=3.2+5.3=8.5\\ \\text{ns}.\n$$\n\nThus, both OR inputs are $0$ during the interval when $X=0$ (after $4.1$ ns) and $Y=0$ (until $8.5$ ns). The width of this window at the OR inputs is\n$$\nt_{\\text{window}}=t_{Y,\\text{rise}}-t_{X,\\text{fall}}=(3.2+5.3)-4.1=4.4\\ \\text{ns}.\n$$\n\nAccounting for the OR gate, the falling and rising edges at the output $F$ are each delayed by $t_{p,\\text{OR2}}$, so the glitch at $F$ has the same duration as the input window:\n$$\nt_{\\text{glitch}}=(t_{Y,\\text{rise}}+t_{p,\\text{OR2}})-(t_{X,\\text{fall}}+t_{p,\\text{OR2}})=t_{Y,\\text{rise}}-t_{X,\\text{fall}}=4.4\\ \\text{ns}.\n$$\nSince $4.4>t_{p,\\text{OR2}}=3.8$ ns, the OR gate does not filter it, and the glitch appears at the output with duration $4.4$ ns.", "answer": "$$\\boxed{4.4}$$", "id": "1941602"}]}