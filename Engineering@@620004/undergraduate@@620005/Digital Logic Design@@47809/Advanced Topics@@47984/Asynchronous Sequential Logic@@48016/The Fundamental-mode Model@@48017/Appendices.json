{"hands_on_practices": [{"introduction": "The cornerstone of the fundamental-mode model is the concept of a stable state, a condition where a circuit's internal state no longer changes for a given set of inputs. This practice will ground you in this core idea by having you determine all stable states of an asynchronous circuit directly from its excitation equations [@problem_id:1967907]. Mastering this allows you to predict where the circuit will settle and forms the essential basis for analyzing its complete dynamic behavior.", "problem": "An asynchronous sequential circuit is designed with two external inputs, $x_1$ and $x_2$, and two internal state variables, $y_1$ and $y_2$. The circuit operates under the fundamental-mode assumption, where inputs change one at a time and the circuit must reach a stable state before the next input change. The excitation equations, which determine the next state $(Y_1, Y_2)$ based on the current inputs $(x_1, x_2)$ and present state $(y_1, y_2)$, are given as:\n\n$Y_1 = x_1 y_2 + x_2' y_1$\n$Y_2 = x_1' y_1 + x_2 y_2$\n\nIn this context, a prime (e.g., $x_2'$) denotes the logical NOT operation. A total state of the circuit is defined by the combination of its inputs and its present internal state. The circuit is said to be in a stable state if, for a given fixed input combination, the next internal state $(Y_1, Y_2)$ is identical to the present internal state $(y_1, y_2)$.\n\nDetermine the total number of stable states this circuit possesses across all possible combinations of inputs and present internal states.", "solution": "Under the fundamental-mode assumption, a total state $(x_{1},x_{2},y_{1},y_{2})$ is stable if, for the fixed inputs $(x_{1},x_{2})$, the next-state equations satisfy $Y_{1}=y_{1}$ and $Y_{2}=y_{2}$. With\n$$\nY_{1}=x_{1}y_{2}+x_{2}'y_{1},\\qquad Y_{2}=x_{1}'y_{1}+x_{2}y_{2},\n$$\nthe stability conditions become\n$$\ny_{1}=x_{1}y_{2}+x_{2}'y_{1},\\qquad y_{2}=x_{1}'y_{1}+x_{2}y_{2}.\n$$\nAnalyze each input pair:\n\n1) For $x_{1}=0$, $x_{2}=0$:\n$$\ny_{1}=0\\cdot y_{2}+1\\cdot y_{1}=y_{1}\\quad\\text{(always true)},\\qquad y_{2}=1\\cdot y_{1}+0\\cdot y_{2}=y_{1}.\n$$\nThus $y_{2}=y_{1}$, giving $(y_{1},y_{2})\\in\\{(0,0),(1,1)\\}$, i.e., $2$ stable total states.\n\n2) For $x_{1}=0$, $x_{2}=1$:\n$$\ny_{1}=0\\cdot y_{2}+0\\cdot y_{1}=0\\quad\\Rightarrow\\quad y_{1}=0,\\qquad y_{2}=1\\cdot y_{1}+1\\cdot y_{2}=y_{1}+y_{2}.\n$$\nWith $y_{1}=0$, the second equation reduces to $y_{2}=y_{2}$ (always true). Hence $(y_{1},y_{2})\\in\\{(0,0),(0,1)\\}$, i.e., $2$ stable total states.\n\n3) For $x_{1}=1$, $x_{2}=0$:\n$$\ny_{1}=1\\cdot y_{2}+1\\cdot y_{1}=y_{2}+y_{1},\\qquad y_{2}=0\\cdot y_{1}+0\\cdot y_{2}=0\\quad\\Rightarrow\\quad y_{2}=0.\n$$\nSubstituting $y_{2}=0$ into the first equation gives $y_{1}=y_{1}$ (always true). Hence $(y_{1},y_{2})\\in\\{(0,0),(1,0)\\}$, i.e., $2$ stable total states.\n\n4) For $x_{1}=1$, $x_{2}=1$:\n$$\ny_{1}=1\\cdot y_{2}+0\\cdot y_{1}=y_{2}\\quad\\Rightarrow\\quad y_{1}=y_{2},\\qquad y_{2}=0\\cdot y_{1}+1\\cdot y_{2}=y_{2}\\quad\\text{(always true)}.\n$$\nThus $(y_{1},y_{2})\\in\\{(0,0),(1,1)\\}$, i.e., $2$ stable total states.\n\nSumming across all four input combinations yields a total of $2+2+2+2=8$ stable total states.", "answer": "$$\\boxed{8}$$", "id": "1967907"}, {"introduction": "While stable states define where a circuit rests, its true complexity is revealed during transitions between them. This exercise explores the critical issue of race conditions, where non-uniform propagation delays can cause the circuit to enter unintended intermediate states [@problem_id:1967903]. By analyzing a hypothetical multi-variable transition, you will learn to trace potential race paths and identify if a critical race exists, a key skill for diagnosing and designing robust asynchronous systems.", "problem": "An asynchronous sequential circuit, operating in fundamental mode, is designed with three state variables $(y_1, y_2, y_3)$ and a single binary input $x$. The circuit is currently in a stable state with internal state assignment $(y_1, y_2, y_3) = (0, 0, 0)$ when the input $x=0$.\n\nThe input $x$ then changes from $0$ to $1$. According to the design specification, this input change should cause the circuit to transition to a new stable state with the assignment $(y_1, y_2, y_3) = (1, 1, 1)$. This requires all three state variables to change. Due to non-uniform propagation delays in the logic, the variables may change at different times, creating a race condition.\n\nThe state transitions for the input column $x=1$ are defined by the following transition table, where the \"Present State\" is the current assignment of $(y_1, y_2, y_3)$ and the \"Next State\" is the target assignment $(Y_1, Y_2, Y_3)$ that the excitation logic computes. A state is stable if its Present State equals its Next State.\n\n| Present State $(y_1, y_2, y_3)$ | Next State $(Y_1, Y_2, Y_3)$ for $x=1$ |\n| :------------------------------: | :---------------------------------------: |\n|             (0, 0, 0)            |                  (1, 1, 1)                  |\n|             (0, 0, 1)            |                  (0, 1, 1)                  |\n|             (0, 1, 0)            |                  (0, 1, 1)                  |\n|             (0, 1, 1)            |                  (1, 1, 1)                  |\n|             (1, 0, 0)            |                  (1, 0, 1)                  |\n|             (1, 0, 1)            |                  (1, 0, 1)                  |\n|             (1, 1, 0)            |                  (1, 1, 1)                  |\n|             (1, 1, 1)            |                  (1, 1, 1)                  |\n\nA critical race occurs if at least one of the possible race paths leads to an incorrect final stable state. An incorrect stable state is any stable state other than the intended destination of $(1, 1, 1)$.\n\nAssuming any number of state variables can change in any order, which of the following choices lists all the intermediate states that, if entered first after leaving $(0, 0, 0)$, can initiate a sequence of transitions resulting in the circuit reaching an incorrect final stable state?\n\nA. (0, 1, 0) and (0, 0, 1)\n\nB. (1, 1, 0) and (0, 1, 1)\n\nC. (1, 0, 0) and (1, 0, 1)\n\nD. (1, 0, 0) and (1, 1, 0)\n\nE. The race is non-critical; all paths lead to the correct final state.", "solution": "The problem asks us to identify if a critical race exists for the transition from state $(0, 0, 0)$ to $(1, 1, 1)$ when the input $x$ changes to $1$. A critical race occurs if any possible sequence of state variable changes, dictated by differing gate delays, leads to a final stable state different from the intended target of $(1, 1, 1)$.\n\nThe initial state is $(0, 0, 0)$. The target state is $(1, 1, 1)$. This transition requires all three state variables, $y_1$, $y_2$, and $y_3$, to change from $0$ to $1$. A race condition occurs because these changes will not be simultaneous. The circuit will pass through one or more intermediate states before, hopefully, settling at $(1, 1, 1)$. The first intermediate state entered depends on which variable or variables change first. We must analyze all possible initial changes from $(0, 0, 0)$.\n\nThere are $2^3 - 2 = 6$ intermediate states between $(0, 0, 0)$ and $(1, 1, 1)$. We can analyze the paths starting from each possible first transition out of the initial state $(0, 0, 0)$.\n\n1.  **Only $y_1$ changes first:** The circuit transitions from $(0, 0, 0)$ to $(1, 0, 0)$.\n    - We look at the row for Present State $(1, 0, 0)$ in the provided table. The Next State is $(1, 0, 1)$.\n    - The circuit is now in state $(1, 0, 0)$ but trying to go to $(1, 0, 1)$. The circuit is unstable. It will next transition to state $(1, 0, 1)$.\n    - Now, we look at the row for Present State $(1, 0, 1)$. The Next State is also $(1, 0, 1)$. This means that $(1, 0, 1)$ is a stable state.\n    - The circuit has stabilized at $(1, 0, 1)$, which is not the intended final state of $(1, 1, 1)$. Therefore, this path represents a critical race. The intermediate state $(1, 0, 0)$ initiates an incorrect path.\n\n2.  **Only $y_2$ changes first:** The circuit transitions from $(0, 0, 0)$ to $(0, 1, 0)$.\n    - From the table, for Present State $(0, 1, 0)$, the Next State is $(0, 1, 1)$. The circuit transitions to $(0, 1, 1)$.\n    - For Present State $(0, 1, 1)$, the Next State is $(1, 1, 1)$. The circuit transitions to $(1, 1, 1)$.\n    - For Present State $(1, 1, 1)$, the Next State is $(1, 1, 1)$. This is the intended stable state.\n    - The path $(0, 0, 0) \\to (0, 1, 0) \\to (0, 1, 1) \\to (1, 1, 1)$ successfully reaches the target. This path is safe.\n\n3.  **Only $y_3$ changes first:** The circuit transitions from $(0, 0, 0)$ to $(0, 0, 1)$.\n    - For Present State $(0, 0, 1)$, the Next State is $(0, 1, 1)$. The circuit transitions to $(0, 1, 1)$.\n    - As seen in the previous case, from $(0, 1, 1)$, the circuit correctly proceeds to $(1, 1, 1)$.\n    - The path $(0, 0, 0) \\to (0, 0, 1) \\to (0, 1, 1) \\to (1, 1, 1)$ is also safe.\n\n4.  **$y_1$ and $y_2$ change first:** The circuit transitions from $(0, 0, 0)$ to $(1, 1, 0)$.\n    - For Present State $(1, 1, 0)$, the Next State is $(1, 1, 1)$.\n    - The circuit transitions to $(1, 1, 1)$, which is the correct stable state. This path is safe.\n\n5.  **$y_1$ and $y_3$ change first:** The circuit transitions from $(0, 0, 0)$ to $(1, 0, 1)$.\n    - We look at the row for Present State $(1, 0, 1)$. The Next State is $(1, 0, 1)$.\n    - This means that upon entering $(1, 0, 1)$, the circuit is immediately in a stable state.\n    - Since this stable state $(1, 0, 1)$ is not the intended destination $(1, 1, 1)$, this path also represents a critical race. The intermediate state $(1, 0, 1)$ initiates an incorrect path.\n\n6.  **$y_2$ and $y_3$ change first:** The circuit transitions from $(0, 0, 0)$ to $(0, 1, 1)$.\n    - For Present State $(0, 1, 1)$, the Next State is $(1, 1, 1)$.\n    - The circuit transitions to $(1, 1, 1)$, the correct stable state. This path is safe.\n\nIn summary, two scenarios lead to an incorrect final state:\n- If the first transition is to state $(1, 0, 0)$, the circuit ends up at stable state $(1, 0, 1)$.\n- If the first transition is to state $(1, 0, 1)$, the circuit ends up at stable state $(1, 0, 1)$.\n\nThus, the intermediate states that can be the first state in a sequence leading to an incorrect final state are $(1, 0, 0)$ and $(1, 0, 1)$. This corresponds to option C.", "answer": "$$\\boxed{C}$$", "id": "1967903"}, {"introduction": "After learning to identify race conditions, the next logical step is to prevent them through careful design. This practice focuses on state assignment, a crucial step where binary codes are assigned to symbolic states to ensure race-free transitions [@problem_id:1967919]. You will compare the hardware requirements of two common implementation strategies, revealing the important engineering trade-offs between design complexity and resource efficiency in building reliable asynchronous circuits.", "problem": "Consider the design of an asynchronous sequential circuit specified by the 5-row merged flow table below. The circuit has five internal states (`a`, `b`, `c`, `d`, `e`) and a two-bit input (`x1x2`). The stable states are indicated by parentheses. The outputs are not shown as they are not relevant to the state assignment problem.\n\n| Present State | Input `x1x2`=00 | Input `x1x2`=01 | Input `x1x2`=11 | Input `x1x2`=10 |\n|:-------------:|:---------------:|:---------------:|:---------------:|:---------------:|\n|       a       |       (a)       |        b        |       (a)       |        c        |\n|       b       |        d        |       (b)       |        e        |       (b)       |\n|       c       |        a        |        e        |       (c)       |       (c)       |\n|       d       |       (d)       |       (d)       |        a        |        b        |\n|       e       |        c        |       (e)       |       (e)       |       (e)       |\n\nTo ensure correct operation, the circuit must be implemented with a race-free state assignment. You are to compare the state variable requirements for two different implementation strategies.\n\nFirst, determine the minimum number of state variables, $N_1$, required to implement this flow table using a one-hot state assignment.\n\nSecond, it has been determined that any assignment for this table using the theoretical minimum number of state variables ($\\lceil\\log_2(5)\\rceil=3$) will result in a critical race. To resolve this, an 'added-state assignment' method is used. This method involves augmenting the flow table by adding one or more intermediate states to create valid, single-step transitions for all state changes. Determine the minimum number of state variables, $N_2$, required to implement a race-free assignment for the augmented system that resolves all critical races.\n\nPresent your final answer as a row matrix containing the integer pair $[N_1, N_2]$.", "solution": "For a one-hot state assignment, each internal state is represented by its own state variable taking the value 1 in that state and 0 otherwise. Therefore, with five internal states, the minimum number of state variables required is equal to the number of states:\n$$\nN_{1}=5.\n$$\n\nFor the added-state assignment, we seek the smallest number of binary state variables, say $k$, such that the augmented flow table can be implemented race-free. A necessary lower bound is given by the number of distinct states that must be encoded. Since there are five original states, $k$ must satisfy\n$$\n2^{k}\\geq 5,\n$$\nhence $k\\geq 3$ and $2^{2}<5\\leq 2^{3}$, so $k=3$ is the smallest possible.\n\nIt is given that any direct assignment of the five original states into $k=3$ variables (without augmentation) yields at least one critical race. The added-state method allows insertion of intermediate states to break multi-bit state transitions into single-bit steps. We show that with $k=3$ there exists a race-free augmented assignment using at most the $2^{3}-5=3$ available extra codes.\n\nConstruct the directed transition set from the flow table by listing the immediate next-state transitions that can be triggered by a single input change from a stable state. From the given table, these directed transitions among original states are:\n$$\na\\to b,\\quad a\\to c,\\quad b\\to d,\\quad b\\to e,\\quad c\\to a,\\quad c\\to e,\\quad d\\to a,\\quad d\\to b,\\quad e\\to c.\n$$\nAssign 3-bit codes to the five original states as follows:\n$$\na=000,\\quad b=001,\\quad c=010,\\quad e=011,\\quad d=101.\n$$\nCompute Hamming distances for each required transition:\n- $a\\to b$: $000\\to 001$ has distance $1$.\n- $a\\to c$: $000\\to 010$ has distance $1$.\n- $b\\to d$: $001\\to 101$ has distance $1$.\n- $b\\to e$: $001\\to 011$ has distance $1$.\n- $c\\to a$: $010\\to 000$ has distance $1$.\n- $c\\to e$: $010\\to 011$ has distance $1$.\n- $d\\to b$: $101\\to 001$ has distance $1$.\n- $e\\to c$: $011\\to 010$ has distance $1$.\n- $d\\to a$: $101\\to 000$ has distance $2$.\n\nThus, exactly one required transition, $d\\to a$, has Hamming distance greater than $1$. This can be resolved by inserting a single intermediate state with code $100$, which yields the single-bit path\n$$\nd:101\\ \\to\\ 100\\ \\to\\ a:000,\n$$\nand $100$ is one of the three unused codes available with $k=3$. All other required transitions already change only one state variable. Therefore, an augmented, race-free implementation exists with $k=3$ state variables, and no smaller $k$ can work because $2^{2}<5$.\n\nHence, the minimum number of state variables for the augmented, race-free assignment is\n$$\nN_{2}=3.\n$$\n\nCombining both parts gives the requested pair $[N_{1},N_{2}]=[5,3]$.", "answer": "$$\\boxed{\\begin{bmatrix}5 & 3\\end{bmatrix}}$$", "id": "1967919"}]}