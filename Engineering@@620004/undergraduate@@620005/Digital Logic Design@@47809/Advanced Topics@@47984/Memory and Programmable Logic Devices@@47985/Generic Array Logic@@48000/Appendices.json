{"hands_on_practices": [{"introduction": "To begin our hands-on exploration of Generic Array Logic (GAL), we start with the most fundamental concept: translating a device's programmed connections into a mathematical expression. This exercise models the core architecture of a GAL, which consists of a programmable AND array followed by a fixed OR array. Mastering this translation is the first step toward understanding how any sum-of-products (SOP) logic function can be realized in hardware. [@problem_id:1939685]", "problem": "A simple programmable logic device is configured with four inputs, designated as $A, B, C,$ and $D$. The internal architecture features an input stage that provides both the true and complemented form of each input signal. These signals feed a programmable AND array, which consists of several \"product term lines.\" The connections to these lines from the input signals are programmed as follows:\n\n*   Product term line $P_1$ is connected to the true form of input $B$ and the complemented form of input $C$.\n*   Product term line $P_2$ is connected to the complemented form of input $A$ and the true forms of inputs $C$ and $D$.\n*   Product term line $P_3$ is connected to the true forms of inputs $A$ and $B$.\n*   Product term line $P_4$ is connected to the true forms of inputs $B$ and $D$, and the complemented form of input $A$.\n\nThe outputs of these product term lines are then connected to a fixed OR gate to produce the final output function, $F$. The OR gate for function $F$ is connected to the outputs of product term lines $P_1$, $P_2$, and $P_4$.\n\nDetermine the Boolean expression for the output function $F$ in terms of the inputs $A, B, C,$ and $D$.", "solution": "The input stage provides both true and complemented signals for $A, B, C,$ and $D$. Each product term line implements a logical AND of the selected literals, and the fixed OR gate sums selected product terms to form $F$.\n\nBy the given programming:\n- Product term $P_{1}$ connects to the true $B$ and complemented $C$, so the AND output is\n$$P_{1} = B\\overline{C}.$$\n- Product term $P_{2}$ connects to complemented $A$ and true $C$ and $D$, so\n$$P_{2} = \\overline{A}CD.$$\n- Product term $P_{3}$ connects to true $A$ and $B$, so\n$$P_{3} = AB.$$\n- Product term $P_{4}$ connects to true $B$ and $D$ and complemented $A$, so\n$$P_{4} = \\overline{A}BD.$$\n\nThe OR gate for $F$ is connected to $P_{1}, P_{2},$ and $P_{4}$, hence\n$$F = P_{1} + P_{2} + P_{4} = B\\overline{C} + \\overline{A}CD + \\overline{A}BD.$$\n\nOptionally, using distributivity on the last two terms,\n$$\\overline{A}CD + \\overline{A}BD = \\overline{A}D(C + B),$$\nso an equivalent factored form is\n$$F = B\\overline{C} + \\overline{A}D(B + C).$$\n\nEither form is a correct Boolean expression for $F$ derived from the programmed connections.", "answer": "$$\\boxed{B\\overline{C}+\\overline{A}CD+\\overline{A}BD}$$", "id": "1939685"}, {"introduction": "Beyond simply implementing a correct logic function, a robust digital design must also be reliable. This practice addresses the real-world issue of static hazards—brief, unwanted glitches in a circuit's output that can cause system errors. By analyzing a minimal SOP expression, you will learn to identify potential hazards and add a logically redundant \"consensus term\" to ensure the output remains stable during critical input transitions, a vital skill for designing dependable systems. [@problem_id:1939695]", "problem": "A digital control system for a high-precision robotic arm uses a combinatorial logic circuit to enable a critical locking mechanism. This circuit is implemented on a Generic Array Logic (GAL) device. The output of the circuit, denoted by the function $F(A, B, C, D)$, must remain stable during certain input transitions to prevent mechanical jitter. A logic designer has implemented the function using the minimal sum-of-products (SOP) expression derived from its Karnaugh map. The implemented function is given by the sum of two product terms:\n$$F(A, B, C, D) = \\overline{A}D + ABC$$\nIt is suspected that this minimal implementation is susceptible to a static-1 hazard, which could cause a momentary false-zero (a glitch) on the output $F$ when it is supposed to remain at a steady logic 1. Such a glitch could compromise the stability of the locking mechanism.\n\nYour task is to analyze this function and identify the single redundant product term that must be added to the SOP expression to eliminate all potential static-1 hazards. Present this term as your final answer.", "solution": "We are given the sum-of-products implementation\n$$F(A,B,C,D)=\\overline{A}D+ABC.$$\nA static-1 hazard can occur when two product terms that differ only in the polarity of a single variable both cover adjacent minterms, and that variable toggles while the output should remain at logic 1. The standard hazard-elimination rule for SOP forms is to add the consensus term of any such pair. The consensus theorem states that for terms of the form $XY$ and $\\overline{X}Z$, the consensus is $YZ$, and adding $YZ$ removes the static-1 hazard without changing the logic function:\n$$XY + \\overline{X}Z = XY + \\overline{X}Z + YZ.$$\n\nWe map the given terms to this pattern by identifying the complemented/uncomplemented pair:\n- One term is $\\overline{A}D$, which has literal $\\overline{A}$ and the remaining factor $Z=D$.\n- The other term is $ABC$, which has literal $A$ and the remaining factor $Y=BC$.\n\nThus, take $X=A$, $Y=BC$, and $Z=D$. The consensus term is then\n$$YZ = (BC)(D) = BCD.$$\n\nThis term covers the adjacency where $B=1$, $C=1$, $D=1$ and $A$ toggles, preventing a static-1 hazard caused by unequal delays between the paths through $\\overline{A}D$ and $ABC$. By the consensus theorem, adding $BCD$ is logically redundant but eliminates the hazard:\n$$F_{\\text{hazard-free}} = \\overline{A}D + ABC + BCD.$$\n\nTherefore, the single redundant product term that must be added is $BCD$.", "answer": "$$\\boxed{BCD}$$", "id": "1939695"}, {"introduction": "This final practice moves from combinational logic to the powerful sequential capabilities of GAL devices. Many GALs, like the GAL16V8, include registered outputs, making them ideal for implementing state machines. This exercise challenges you to work backward from a JEDEC fuse map—the low-level file used to program the device—to reverse-engineer the next-state equations of a synchronous state machine. By deciphering the fuse map, you will gain a deep, concrete understanding of how abstract state transition logic is physically encoded onto the silicon. [@problem_id:1939702]", "problem": "A digital systems engineer is tasked with reverse-engineering a legacy system that uses a Generic Array Logic (GAL) 16V8 device. The device is known to implement a synchronous state machine. The state is stored in two Output Logic Macrocells (OLMCs), configured in registered mode, located at pins 18 and 19. Let the registered output of pin 18 be the state variable $Q_1$ and the output of pin 19 be the state variable $Q_0$. The state machine is driven by a system clock connected to pin 1. All other input pins are unused and considered logic low.\n\nThe programming of the GAL is defined by a Joint Electron Device Engineering Council (JEDEC) fuse map file. In this file, a line starting with `L` followed by an address indicates the state of 32 fuses for a single product term. A `0` represents an intact fuse (a connection exists), and a `1` represents a blown fuse (no connection). The logic function is implemented in a sum-of-products form.\n\nThe GAL16V8 has 32 inputs to its AND array, whose connections are determined by the fuse map. For this state machine, only the feedback paths from the registered outputs are used. The input connections to the AND array are mapped as follows:\n-   AND array columns 28 and 29: True ($Q_1$) and complemented ($\\overline{Q_1}$) feedback from OLMC at pin 18.\n-   AND array columns 30 and 31: True ($Q_0$) and complemented ($\\overline{Q_0}$) feedback from OLMC at pin 19.\n\nThe next-state logic for the D flip-flops, $D_1$ and $D_0$, is determined by the OR of several product terms:\n-   $D_1$ (for state variable $Q_1$) is the logical sum of product terms 48 through 54.\n-   $D_0$ (for state variable $Q_0$) is the logical sum of product terms 56 through 62.\n\nThe engineer has recovered the following lines from the JEDEC file. All other product terms connected to these OLMCs have all their fuses blown (i.e., their lines in the fuse map consist of all `1`s).\n\n`L1536 11111111111111111111111111111001`\n`L1568 11111111111111111111111111110110`\n`L1792 11111111111111111111111111111011`\n\n*Note*: The address `Lxxxx` denotes the starting fuse number for a product term. Product term `k` begins at fuse address `k * 32`.\n\nBased on this information, which of the following options correctly identifies both the simplified next-state logic equations and the function performed by the state machine, where the state is represented by the tuple $(Q_1, Q_0)$?\n\nA. Equations: $D_1 = Q_1$, $D_0 = \\overline{Q_0}$; Function: A divide-by-2 counter where state $(Q_1, Q_0)$ toggles between (0,1) and (0,0).\n\nB. Equations: $D_1 = Q_0$, $D_0 = Q_1$; Function: A state machine that swaps the state bits on each clock cycle.\n\nC. Equations: $D_1 = Q_1 \\oplus Q_0$, $D_0 = \\overline{Q_1}$; Function: A modulo-3 counter that cycles through states 00, 01, and 11.\n\nD. Equations: $D_1 = Q_1 \\oplus Q_0$, $D_0 = \\overline{Q_1}$; Function: A 2-bit Gray code counter with the sequence 00 -> 01 -> 11 -> 10 -> 00.\n\nE. Equations: $D_1 = \\overline{Q_1}Q_0$, $D_0 = Q_1\\overline{Q_0}$; Function: A state machine that moves to state (1,0) from any other state.", "solution": "The GAL16V8 AND array has 32 columns; for this design only columns 28 through 31 are relevant, mapped as follows:\n- Column 28: $Q_{1}$ (true)\n- Column 29: $\\overline{Q_{1}}$ (complement)\n- Column 30: $Q_{0}$ (true)\n- Column 31: $\\overline{Q_{0}}$ (complement)\n\nIn the JEDEC fuse map for each product term, a fuse value of $0$ indicates a connection (literal included), and $1$ indicates no connection. The string on each `L` line lists the 32 fuses for one product term in ascending column order, so the last four bits correspond to columns $28$–$31$ in that order.\n\nProduct terms used for $D_{1}$ are numbers $48$ through $54$, and for $D_{0}$ are numbers $56$ through $62$. The provided lines correspond to product terms:\n- `L1536` $\\Rightarrow$ product term $48$ since $48 \\times 32 = 1536$,\n- `L1568` $\\Rightarrow$ product term $49$ since $49 \\times 32 = 1568$,\n- `L1792` $\\Rightarrow$ product term $56$ since $56 \\times 32 = 1792$.\nAll other product terms for these OR gates have all fuses blown (no literals connected) and thus contribute nothing.\n\nDecode each provided product term by the last four bits:\n1) `L1536 ... 11111001` has last four bits $1\\,0\\,0\\,1$, i.e., column $28=1$, $29=0$, $30=0$, $31=1$. This includes $\\overline{Q_{1}}$ and $Q_{0}$. Hence\n$$\n\\text{PT}_{48} \\;=\\; \\overline{Q_{1}}\\,Q_{0}.\n$$\n2) `L1568 ... 11110110` has last four bits $0\\,1\\,1\\,0$, i.e., column $28=0$, $29=1$, $30=1$, $31=0$. This includes $Q_{1}$ and $\\overline{Q_{0}}$. Hence\n$$\n\\text{PT}_{49} \\;=\\; Q_{1}\\,\\overline{Q_{0}}.\n$$\n3) `L1792 ... 11111011` has last four bits $1\\,0\\,1\\,1$, i.e., column $28=1$, $29=0$, $30=1$, $31=1$. This includes only $\\overline{Q_{1}}$. Hence\n$$\n\\text{PT}_{56} \\;=\\; \\overline{Q_{1}}.\n$$\n\nTherefore, using the specified OR groupings:\n- For $D_{1}$ (sum of product terms $48$ through $54$), only $\\text{PT}_{48}$ and $\\text{PT}_{49}$ are active:\n$$\nD_{1} \\;=\\; \\text{PT}_{48} \\,+\\, \\text{PT}_{49}\n\\;=\\; \\overline{Q_{1}}\\,Q_{0} \\;+\\; Q_{1}\\,\\overline{Q_{0}}\n\\;=\\; Q_{1} \\oplus Q_{0}.\n$$\n- For $D_{0}$ (sum of product terms $56$ through $62$), only $\\text{PT}_{56}$ is active:\n$$\nD_{0} \\;=\\; \\text{PT}_{56} \\;=\\; \\overline{Q_{1}}.\n$$\n\nDetermine the state transition function for $(Q_{1},Q_{0}) \\mapsto (D_{1},D_{0})$:\n- If $(Q_{1},Q_{0})=(0,0)$, then $(D_{1},D_{0})=(0\\oplus 0,\\overline{0})=(0,1)$.\n- If $(Q_{1},Q_{0})=(0,1)$, then $(D_{1},D_{0})=(0\\oplus 1,\\overline{0})=(1,1)$.\n- If $(Q_{1},Q_{0})=(1,1)$, then $(D_{1},D_{0})=(1\\oplus 1,\\overline{1})=(0,0)$.\n- If $(Q_{1},Q_{0})=(1,0)$, then $(D_{1},D_{0})=(1\\oplus 0,\\overline{1})=(1,0)$.\n\nThus the machine cycles through $00 \\rightarrow 01 \\rightarrow 11 \\rightarrow 00$, with state $10$ being a self-loop. This is a modulo-$3$ counter over the states $\\{00,01,11\\}$. The simplified equations and behavior match option C.", "answer": "$$\\boxed{C}$$", "id": "1939702"}]}