{"hands_on_practices": [{"introduction": "Building a large, wide memory system from smaller, narrower chips is a fundamental task in digital design. This exercise challenges you to devise a complete plan for such a system, covering all aspects from the total component count to the precise wiring of the address bus. Mastering this process is crucial as it combines the two core concepts of memory expansion: increasing word size (width expansion) and increasing the number of addressable locations (depth expansion) [@problem_id:1947017].", "problem": "A digital systems engineer is tasked with designing a memory module for a custom-built microcontroller. The target memory system must have a capacity of $128\\text{K}$ words, with each word being 16 bits wide (a $128\\text{K} \\times 16$ organization). The engineer only has access to a large supply of $32\\text{K} \\times 8$ Random Access Memory (RAM) chips.\n\nThe system's address bus is denoted by $A_{N-1}, \\dots, A_0$, where $N$ is the total number of address lines required for the full $128\\text{K} \\times 16$ memory system. To implement the design, an address decoder is required to generate the chip select signals for the memory array.\n\nWhich of the following options correctly specifies the total number of RAM chips needed, the size of the required decoder (in the form $m \\times n$, where $m$ is the number of input lines and $n$ is the number of output lines), and the partitioning of the system address lines used for decoder inputs versus the lines used for the individual chip address inputs?\n\nA. Total chips: 8; Decoder: $2 \\times 4$; Decoder inputs: $A_{1}, A_{0}$; Chip address inputs: $A_{16}, \\dots, A_{2}$\n\nB. Total chips: 4; Decoder: $2 \\times 4$; Decoder inputs: $A_{16}, A_{15}$; Chip address inputs: $A_{14}, \\dots, A_{0}$\n\nC. Total chips: 8; Decoder: $2 \\times 4$; Decoder inputs: $A_{16}, A_{15}$; Chip address inputs: $A_{14}, \\dots, A_{0}$\n\nD. Total chips: 8; Decoder: $3 \\times 8$; Decoder inputs: $A_{16}, A_{15}, A_{14}$; Chip address inputs: $A_{13}, \\dots, A_{0}$\n\nE. Total chips: 16; Decoder: $4 \\times 16$; Decoder inputs: $A_{16}, \\dots, A_{13}$; Chip address inputs: $A_{12}, \\dots, A_{0}$", "solution": "We first determine the total number of address lines for the target memory. An organization of 128K words means the addressable locations are\n$$128 \\times 1024 = 2^{17},$$\nso the total number of address lines is $N=17$, i.e., the system bus is $A_{16},\\dots,A_{0}$.\n\nEach available RAM chip is $32\\text{K} \\times 8$, i.e.,\n$$32 \\times 1024 = 2^{15} \\text{ locations},$$\nso each chip requires $15$ address inputs.\n\nTo achieve a word width of $16$ bits from $8$-bit-wide chips, we place two $8$-bit chips in parallel per addressed block so that their data outputs together form a $16$-bit word. Thus, per addressed block, the number of chips needed for width is\n$$\\frac{16}{8}=2.$$\n\nTo reach the required depth of $128\\text{K}$ words from chips that each provide $32\\text{K}$ words, we need\n$$\\frac{128\\text{K}}{32\\text{K}}=4$$\nblocks (banks) in depth. Therefore, the total number of chips is\n$$\\text{chips} = 2 \\times 4 = 8.$$\n\nSelecting among the $4$ banks requires a decoder with $4$ outputs, i.e., a $2 \\times 4$ decoder. The two most significant address lines select the bank, so the decoder inputs are $A_{16}$ and $A_{15}$. The remaining $15$ address lines feed the address inputs of every chip:\n$$\\text{Chip address inputs}: A_{14},\\dots,A_{0}.$$\nEach decoder output enables one bank, and within a bank the two chips (forming the $16$-bit width) share the same chip-select.\n\nComparing with the options:\n- The total chips $=8$, decoder $2 \\times 4$, decoder inputs $A_{16},A_{15}$, and chip address inputs $A_{14},\\dots,A_{0}$ matches exactly option C. The other options either use the wrong number of chips, the wrong decoder size, or assign the wrong address lines to the decoder versus chip inputs.\n\nTherefore, the correct choice is C.", "answer": "$$\\boxed{C}$$", "id": "1947017"}, {"introduction": "Once a memory system is designed, it's essential to understand its address map—the specific range of addresses each component responds to. This exercise provides a practical scenario for calculating the precise start and end addresses for a single RAM chip within a larger, contiguously mapped memory module [@problem_id:1946953]. This skill is critical for debugging, writing firmware, and ensuring that different hardware components don't accidentally occupy the same address space.", "problem": "An embedded systems engineer is designing a memory system by combining four individual Random Access Memory (RAM) chips. Each chip has a capacity of $4\\text{K} \\times 8$ bits. In this context, 'K' represents a multiplier of $2^{10}$. Therefore, each chip provides $4 \\times 2^{10}$ addressable memory locations, with each location storing 8 bits of data.\n\nThe four chips are mapped into a single, contiguous address space to form a larger memory module. The memory begins at the hexadecimal address $0000\\text{H}$. The chips are ordered sequentially, so the address space of Chip 1 is followed immediately by Chip 2, then Chip 3, and finally Chip 4.\n\nDetermine the starting and ending hexadecimal addresses for the address range occupied by the second chip (Chip 2). Present your answer as a pair of four-digit hexadecimal numbers for the starting and ending addresses, respectively. Do not include any base indicators (such as 'H' or '0x') in your final answer.", "solution": "Each RAM chip has $4\\text{K} \\times 8$ bits, where $\\text{K} = 2^{10}$. Thus, the number of addressable locations per chip is\n$$\n4 \\times 2^{10} = 2^{2} \\times 2^{10} = 2^{12}.\n$$\nThe data width (8 bits) does not change the count of addressable locations.\n\nWith the memory mapped contiguously starting at base address $0000$ (hexadecimal), Chip 1 occupies addresses from $0$ up to $2^{12} - 1$ inclusive. In general, for chip index $i \\in \\{1,2,3,4\\}$, the starting and ending addresses are\n$$\nA_{\\text{start}}(i) = (i-1)\\cdot 2^{12}, \\quad A_{\\text{end}}(i) = i \\cdot 2^{12} - 1.\n$$\nFor Chip 2, $i=2$, so\n$$\nA_{\\text{start}}(2) = 1 \\cdot 2^{12} = 2^{12}, \\quad A_{\\text{end}}(2) = 2 \\cdot 2^{12} - 1 = 2^{13} - 1.\n$$\nSince $2^{12} = 16^{3}$, its hexadecimal representation is $1000$. Also, $2^{13} = 2 \\cdot 16^{3} = 2000$ (hex), hence $2^{13} - 1$ is $1\\text{FFF}$ (hex). Therefore, Chip 2 spans from $1000$ to $1\\text{FFF}$ in hexadecimal.", "answer": "$$\\boxed{\\begin{pmatrix}1000 & 1FFF\\end{pmatrix}}$$", "id": "1946953"}, {"introduction": "In the real world, digital designs don't always work as planned, and troubleshooting is a critical skill for any engineer. This problem presents a memory system with a common but subtle wiring error in its address decoding logic [@problem_id:1946957]. By analyzing this faulty configuration, you will learn to identify serious issues like memory aliasing—where multiple addresses map to the same physical location—and unmapped memory regions, deepening your understanding of how crucial correct address decoding is.", "problem": "A digital systems engineer is tasked with expanding the memory of a microprocessor that has a 16-bit address bus ($A_{15}$ down to $A_0$) and an 8-bit data bus. The goal is to create a total of $48\\text{K} \\times 8$ of memory capacity using three available $16\\text{K} \\times 8$ Random Access Memory (RAM) chips. The engineer uses a standard $2$-to-$4$ line decoder to generate the chip select signals. The decoder has two select inputs, $S_1$ and $S_0$, and four active-low outputs, $\\bar{Y}_0, \\bar{Y}_1, \\bar{Y}_2, \\bar{Y}_3$.\n\nThe following connections are made:\n- The microprocessor's address lines $A_{15}$ and $A_{14}$ are connected to the decoder's select inputs $S_1$ and $S_0$, respectively.\n- The microprocessor's address lines $A_{13}$ down to $A_0$ are connected in parallel to the address inputs of all three RAM chips.\n- The 8-bit data bus is connected in parallel to the data I/O pins of all three RAM chips.\n- Due to a wiring error, the decoder's output $\\bar{Y}_0$ is connected to the active-low chip select ($\\overline{CS}$) pins of both RAM Chip 1 and RAM Chip 3.\n- The decoder's output $\\bar{Y}_1$ is connected to the $\\overline{CS}$ pin of RAM Chip 2.\n- The decoder's outputs $\\bar{Y}_2$ and $\\bar{Y}_3$ are left unconnected.\n\nGiven this faulty configuration, analyze the resulting memory map for the entire 16-bit address space (from $0000_{16}$ to $FFFF_{16}$). Which of the following statements accurately describes the outcome?\n\nA. The three chips are mapped contiguously without overlap, with Chip 1 at $0000_{16}-3FFF_{16}$, Chip 2 at $4000_{16}-7FFF_{16}$, and Chip 3 at $8000_{16}-BFFF_{16}$.\n\nB. Chip 1 maps to $0000_{16}-3FFF_{16}$, and Chip 2 maps to $4000_{16}-7FFF_{16}$. Chip 3 is inaccessible, and the address space from $8000_{16}$ to $FFFF_{16}$ is unmapped.\n\nC. Chip 1 and Chip 3 are aliased over the address range $0000_{16}-3FFF_{16}$. Chip 2 is mapped to the range $4000_{16}-7FFF_{16}$. The address space from $8000_{16}$ to $FFFF_{16}$ is unmapped.\n\nD. The system has three distinct $16\\text{K}$ memory blocks. Chip 1 is at $0000_{16}-3FFF_{16}$, Chip 2 is at $4000_{16}-7FFF_{16}$, and Chip 3 is at $C000_{16}-FFFF_{16}$.\n\nE. All three RAM chips are aliased and respond to the same address range of $0000_{16}-3FFF_{16}$. The address space from $4000_{16}$ to $FFFF_{16}$ is unmapped.", "solution": "A 16-bit address bus provides $2^{16}$ distinct byte addresses. Each $16\\text{K} \\times 8$ RAM has $2^{14}$ addresses, so selecting one of the three chips requires decoding the two most significant address bits $A_{15}$ and $A_{14}$ while the lower bits $A_{13}$ down to $A_{0}$ provide the $2^{14}$ offsets within a chip.\n\nA standard $2$-to-$4$ decoder with active-low outputs obeys the following selection: for $(S_{1},S_{0})=(0,0)$, $\\bar{Y}_{0}=0$ and $\\bar{Y}_{1}=\\bar{Y}_{2}=\\bar{Y}_{3}=1$; for $(0,1)$, $\\bar{Y}_{1}=0$ and the others $1$; for $(1,0)$, $\\bar{Y}_{2}=0$ and the others $1$; for $(1,1)$, $\\bar{Y}_{3}=0$ and the others $1$. With $S_{1}=A_{15}$ and $S_{0}=A_{14}$, the four combinations of $(A_{15},A_{14})$ partition the address space into four contiguous $2^{14}$-byte blocks, each of which corresponds to a unique combination of $A_{13}\\dots A_{0}$.\n\nGiven the connections:\n- $\\bar{Y}_{0}$ is tied to the active-low chip select of Chip 1 and Chip 3.\n- $\\bar{Y}_{1}$ is tied to the active-low chip select of Chip 2.\n- $\\bar{Y}_{2}$ and $\\bar{Y}_{3}$ are unused.\n\nAnalyze each high-order address selection:\n1) For $(A_{15},A_{14})=(0,0)$, $\\bar{Y}_{0}=0$ and $\\bar{Y}_{1}=\\bar{Y}_{2}=\\bar{Y}_{3}=1$. Therefore Chip 1 and Chip 3 are both selected simultaneously because both receive the same active-low $\\bar{Y}_{0}$. The accessed offsets within each chip are given by the identical $A_{13}\\dots A_{0}$ presented in parallel. Thus both chips respond to the same address subrange $A_{13}\\dots A_{0}\\in[0,2^{14}-1]$, which corresponds to the address range $0000_{16}$ to $3FFF_{16}$. This creates an alias between Chip 1 and Chip 3 over this entire range.\n\n2) For $(A_{15},A_{14})=(0,1)$, $\\bar{Y}_{1}=0$ and the others are $1$. Therefore only Chip 2 is selected. The lower $14$ address lines again span $A_{13}\\dots A_{0}\\in[0,2^{14}-1]$, mapping this selection to the range $4000_{16}$ to $7FFF_{16}$.\n\n3) For $(A_{15},A_{14})=(1,0)$, $\\bar{Y}_{2}=0$ but $\\bar{Y}_{2}$ is unconnected, so no RAM chip is selected. The entire block $8000_{16}$ to $BFFF_{16}$ is unmapped.\n\n4) For $(A_{15},A_{14})=(1,1)$, $\\bar{Y}_{3}=0$ but $\\bar{Y}_{3}$ is unconnected, so no RAM chip is selected. The entire block $C000_{16}$ to $FFFF_{16}$ is unmapped.\n\nTherefore, Chip 1 and Chip 3 are aliased over $0000_{16}$ to $3FFF_{16}$, Chip 2 is correctly mapped to $4000_{16}$ to $7FFF_{16}$, and the ranges $8000_{16}$ to $FFFF_{16}$ are unmapped. This corresponds exactly to option C.", "answer": "$$\\boxed{C}$$", "id": "1946957"}]}