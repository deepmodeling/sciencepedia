{"hands_on_practices": [{"introduction": "Understanding the fundamental building blocks of a CPLD is the first step toward mastering its use. This practice challenges you to configure a standard macrocell, which contains a D-type flip-flop and programmable logic, to emulate a different type of sequential elementâ€”a T-type flip-flop. By determining the correct logic function for the D-input, you will gain hands-on insight into how CPLDs achieve their functional versatility. [@problem_id:1924346]", "problem": "A digital systems engineer is tasked with implementing a specific logic function on a Complex Programmable Logic Device (CPLD). The fundamental building block of this CPLD is a macrocell. Each macrocell contains exactly one synchronous, positive-edge-triggered D-type flip-flop and a programmable logic array. This logic array can generate any sum-of-products (SOP) Boolean function of the macrocell's inputs and the flip-flop's own output; the result is then fed into the D-input of the flip-flop.\n\nThe engineer's goal is to configure a single macrocell to behave as a synchronous, positive-edge-triggered T-type flip-flop. Let the external toggle input to the macrocell be denoted by $T$, and let the current state (output) of the flip-flop be denoted by $Q$. The D-input of the internal flip-flop is denoted by $D$.\n\nDetermine the Boolean expression for the D-input, as a function of $T$ and $Q$, that correctly implements the T-type flip-flop behavior. The expression must be provided in its minimal Sum-of-Products form. Use an overbar to denote logical NOT (e.g., $\\overline{A}$), juxtaposition for logical AND (e.g., $AB$), and the `+` symbol for logical OR.", "solution": "A positive-edge-triggered D-type flip-flop updates its output according to $Q^{+} = D$ at each active clock edge. To make this macrocell behave as a synchronous T-type flip-flop, we require the next-state behavior:\n- When $T=0$, there is no toggle, so $Q^{+} = Q$.\n- When $T=1$, the state toggles, so $Q^{+} = \\overline{Q}$.\n\nSince $Q^{+} = D$, the required $D(T,Q)$ must satisfy:\n- For $T=0$, $D=Q$.\n- For $T=1$, $D=\\overline{Q}$.\n\nConstructing the truth table for $D$ in terms of $T$ and $Q$ and selecting minterms where $D=1$, we get the two cases: $(T,Q)=(0,1)$ and $(1,0)$. The minimal sum-of-products implementing these minterms is\n$$\nD(T,Q) = \\overline{T}Q + T\\overline{Q},\n$$\nwhich is the exclusive-OR of $T$ and $Q$, and is minimal in SOP form.", "answer": "$$\\boxed{\\overline{T}Q+T\\overline{Q}}$$", "id": "1924346"}, {"introduction": "As logic functions grow in complexity, they often exceed the capacity of a single macrocell, forcing engineers to make critical design trade-offs. This problem presents a practical scenario where you must compare two distinct implementation strategies: using built-in product-term expansion versus refactoring the logic across multiple macrocells. Analyzing the impact of each choice on both propagation delay and resource usage will sharpen your ability to optimize designs for real-world constraints. [@problem_id:1924354]", "problem": "An engineer is tasked with implementing a complex Boolean function on a hypothetical Complex Programmable Logic Device (CPLD). The CPLD architecture has the following characteristics:\n- Each macrocell contains a programmable AND-array that can support up to 5 product terms (p-terms).\n- The total pin-to-pin propagation delay for a single pass through a macrocell (from an Input/Output (I/O) pin to an I/O pin) is determined by the sum of its constituent delays.\n- **$t_{LA} = 2.5 \\text{ ns}$**: Logic Array Delay, the time for a signal to propagate from an input pin or internal feedback line, through the Programmable Interconnect Array (PIA), to the macrocell's AND gates.\n- **$t_{P-OR} = 1.5 \\text{ ns}$**: Product-Term Logic Delay, the time from the AND gates through the macrocell's main OR gate.\n- **$t_{OUT} = 2.0 \\text{ ns}$**: Output Path Delay, the time from the OR gate output to the external I/O pin.\n- **$t_{EXP} = 1.0 \\text{ ns}$**: Expansion Delay. When a macrocell uses product-term expansion to borrow terms from an adjacent macrocell, this fixed delay is added to its total propagation path.\n- **$t_{FB} = 1.5 \\text{ ns}$**: Feedback Path Delay, the time for a macrocell's output to be routed back into the PIA to serve as an input for other macrocells.\n\nThe target Boolean function, $F$, requires 8 product terms in its minimal Sum-of-Products form, which exceeds the capacity of a single macrocell. The engineer considers two implementation strategies:\n\n**Strategy 1: Product-Term Expansion**\nThe function $F$ is implemented in a single primary macrocell. To accommodate all 8 p-terms, it borrows the necessary p-terms from one adjacent macrocell. This process consumes the entire adjacent macrocell, rendering it unusable for any other logic.\n\n**Strategy 2: Logic Refactoring**\nThe function is manually factored into a two-level logic structure. The first four product terms are grouped into an intermediate function, $G_1$, and the remaining four product terms are grouped into a second intermediate function, $G_2$. $G_1$ and $G_2$ are implemented in two separate macrocells. Their outputs are then fed back into the PIA. A third macrocell is used to implement the final function $F = G_1 + G_2$.\n\nCalculate the total number of macrocells consumed ($N_1$, $N_2$) and the total pin-to-pin propagation delay in nanoseconds ($t_{PD,1}$, $t_{PD,2}$) for both Strategy 1 and Strategy 2, respectively. Present your final answer as four numerical values ($N_1$, $N_2$, $t_{PD,1}$, $t_{PD,2}$), with all values rounded to two significant figures. The delay values must be expressed in nanoseconds.", "solution": "The CPLD macrocell supports up to 5 product terms. The given delays are $t_{LA} = 2.5$ ns, $t_{P-OR} = 1.5$ ns, $t_{OUT} = 2.0$ ns, $t_{EXP} = 1.0$ ns, and $t_{FB} = 1.5$ ns. The total pin-to-pin delay along any path is the sum of the relevant segment delays on that path.\n\nStrategy 1 uses product-term expansion to implement all 8 product terms in a single primary macrocell, borrowing from one adjacent macrocell. This consumes two macrocells, so $N_{1} = 2$. The pin-to-pin path includes the logic array, the macrocell OR, the output path, and the expansion overhead. Therefore,\n$$\nt_{PD,1} = t_{LA} + t_{P-OR} + t_{OUT} + t_{EXP}.\n$$\nSubstituting the given values,\n$$\nt_{PD,1} = 2.5 + 1.5 + 2.0 + 1.0 = 7.0 \\text{ ns}.\n$$\nRounded to two significant figures, $t_{PD,1} = 7.0$.\n\nStrategy 2 factors $F$ into $G_{1}$ and $G_{2}$ with 4 product terms each, implemented in two macrocells, and a third macrocell computes $F = G_{1} + G_{2}$. This consumes three macrocells, so $N_{2} = 3$. The worst-case pin-to-pin path goes through one first-level macrocell and then the final macrocell. The delay is the sum of first-stage logic and feedback, plus second-stage logic and output:\n$$\nt_{PD,2} = \\underbrace{(t_{LA} + t_{P-OR} + t_{FB})}_{\\text{first stage}} + \\underbrace{(t_{LA} + t_{P-OR} + t_{OUT})}_{\\text{second stage}} = 2 t_{LA} + 2 t_{P-OR} + t_{FB} + t_{OUT}.\n$$\nSubstituting the given values,\n$$\nt_{PD,2} = 2(2.5) + 2(1.5) + 1.5 + 2.0 = 5.0 + 3.0 + 1.5 + 2.0 = 11.5 \\text{ ns}.\n$$\nRounded to two significant figures, $t_{PD,2} = 12$.\n\nThus, the results are $N_{1} = 2.0$, $N_{2} = 3.0$, $t_{PD,1} = 7.0$ ns, and $t_{PD,2} = 12$ ns.", "answer": "$$\\boxed{\\begin{pmatrix}2.0 & 3.0 & 7.0 & 12\\end{pmatrix}}$$", "id": "1924354"}, {"introduction": "A key goal in digital design is to create circuits that run as fast as possible while remaining reliable. This practice focuses on the fundamental challenge of synchronous timing analysis to determine a system's maximum operating frequency. You will calculate this limit by applying the setup time constraint to a critical path, accounting for register clock-to-output time ($t_{CO}$), logic propagation delay ($t_{PD}$), and register setup time ($t_{SU}$). [@problem_id:1924348]", "problem": "A digital systems engineer is designing a synchronous state machine within a single Complex Programmable Logic Device (CPLD). The critical timing path for the design is determined by the signal propagation from the output of a source register, through a block of combinatorial logic and internal routing, to the data input of a destination register. Both registers are driven by the same global clock.\n\nThe CPLD manufacturer's datasheet provides the following timing parameters for the device family being used:\n- The clock-to-output time ($t_{CO}$) for any register is 4.2 nanoseconds.\n- The setup time requirement ($t_{SU}$) for any register's data input is 2.7 nanoseconds.\n\nBased on the synthesis and place-and-route report for the specific design, the total propagation delay ($t_{PD}$) through the combinatorial logic and routing fabric on this critical path is 7.1 nanoseconds.\n\nTo ensure reliable operation and avoid metastability, the design must satisfy the setup time constraint on the destination register. Calculate the maximum safe operating clock frequency for this design.\n\nExpress your answer in megahertz (MHz), rounded to three significant figures.", "solution": "For a synchronous path between two registers driven by the same clock with negligible skew, the setup-time constraint is\n$$\nT_{\\text{clk}} \\geq t_{CO} + t_{PD} + t_{SU}.\n$$\nGiven $t_{CO} = 4.2 \\times 10^{-9} \\text{ s}$, $t_{PD} = 7.1 \\times 10^{-9} \\text{ s}$, and $t_{SU} = 2.7 \\times 10^{-9} \\text{ s}$, the minimum allowable clock period is\n$$\nT_{\\text{clk,min}} = \\left(4.2 + 7.1 + 2.7\\right) \\times 10^{-9} \\text{ s} = 14.0 \\times 10^{-9} \\text{ s}.\n$$\nThe maximum clock frequency is the reciprocal of the minimum period:\n$$\nf_{\\text{max}} = \\frac{1}{T_{\\text{clk,min}}} = \\frac{1}{14.0 \\times 10^{-9} \\text{ s}} = \\frac{1}{14.0} \\times 10^{9} \\text{ Hz} = 71.4286 \\times 10^{6} \\text{ Hz}.\n$$\nExpressed in megahertz and rounded to three significant figures, this is $71.4$ MHz.", "answer": "$$\\boxed{71.4}$$", "id": "1924348"}]}