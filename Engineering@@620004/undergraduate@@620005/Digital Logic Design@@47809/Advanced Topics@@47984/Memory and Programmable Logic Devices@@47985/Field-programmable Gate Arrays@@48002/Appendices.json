{"hands_on_practices": [{"introduction": "At the heart of every Field-Programmable Gate Array (FPGA) is the Look-Up Table (LUT), a small, reconfigurable memory that can implement any Boolean function of its inputs. To truly master FPGA design, it is essential to understand how a logical function is translated into the physical configuration of an LUT. This first exercise provides fundamental practice in this process, challenging you to determine the raw memory bits needed to program a 4-input LUT for a specific logic function. [@problem_id:1934992]", "problem": "In a Field-Programmable Gate Array (FPGA), a fundamental logic element is the Look-Up Table (LUT). A $k$-input LUT can be configured to implement any arbitrary Boolean function of $k$ variables. This is achieved by programming its $2^k$ internal static memory cells, which store the function's truth table.\n\nConsider a 4-input LUT with inputs labeled $I_3, I_2, I_1, I_0$ and a single output $O$. The 16 configuration memory bits correspond to the LUT's output for each possible input combination, ordered from address $(I_3, I_2, I_1, I_0) = (0,0,0,0)$ to $(1,1,1,1)$.\n\nYou are tasked with configuring this LUT to implement the following 4-variable Boolean function:\n$$F(A, B, C, D) = (A \\oplus B) \\cdot (C \\odot D)$$\nwhere $\\oplus$ denotes the Exclusive OR (XOR) operation, and $\\odot$ denotes the Exclusive NOR (XNOR) operation.\n\nThe function variables $A, B, C, D$ are connected to the LUT inputs according to the following physical mapping:\n- $A$ is connected to $I_1$.\n- $B$ is connected to $I_0$.\n- $C$ is connected to $I_3$.\n- $D$ is connected to $I_2$.\n\nDetermine the 16-bit configuration string that must be loaded into the LUT's memory. Present your answer as a single binary string of 16 digits, with the first digit corresponding to the memory cell for address $(0,0,0,0)$ and the last digit for address $(1,1,1,1)$.", "solution": "A $k$-input LUT stores the output for each input address $(I_{3}, I_{2}, I_{1}, I_{0})$ in a $2^{k}$-entry table. Here, with $k=4$, the required function is\n$$F(A,B,C,D)=(A \\oplus B)\\cdot(C \\odot D),$$\nwith the physical mapping $A \\to I_{1}$, $B \\to I_{0}$, $C \\to I_{3}$, $D \\to I_{2}$. Therefore, for an address $(i_{3}, i_{2}, i_{1}, i_{0})$, the LUT output is\n$$O=(i_{1} \\oplus i_{0}) \\cdot (i_{3} \\odot i_{2}).$$\nBy definition, $x \\oplus y=1$ if and only if $x \\neq y$, and $x \\odot y=1$ if and only if $x=y$. Hence,\n- If $i_{3}=i_{2}$, then $(i_{3} \\odot i_{2})=1$ and $O=i_{1} \\oplus i_{0}$.\n- If $i_{3} \\neq i_{2}$, then $(i_{3} \\odot i_{2})=0$ and $O=0$.\n\nEnumerate addresses in order from $(0,0,0,0)$ to $(1,1,1,1)$:\n\n1) For $(i_{3},i_{2})=(0,0)$, addresses $(0,0,i_{1},i_{0})$ yield\n$$(i_{1},i_{0})=(0,0)\\to 0,\\quad (0,1)\\to 1,\\quad (1,0)\\to 1,\\quad (1,1)\\to 0,$$\nso bits: $0,1,1,0$.\n\n2) For $(i_{3},i_{2})=(0,1)$, $(i_{3} \\odot i_{2})=0$, so bits: $0,0,0,0$.\n\n3) For $(i_{3},i_{2})=(1,0)$, $(i_{3} \\odot i_{2})=0$, so bits: $0,0,0,0$.\n\n4) For $(i_{3},i_{2})=(1,1)$, addresses $(1,1,i_{1},i_{0})$ yield the same XOR pattern:\n$$(i_{1},i_{0})=(0,0)\\to 0,\\quad (0,1)\\to 1,\\quad (1,0)\\to 1,\\quad (1,1)\\to 0,$$\nso bits: $0,1,1,0$.\n\nConcatenating in address order $(0000$ to $1111)$ gives the 16-bit configuration:\n$$0110000000000110.$$", "answer": "$$\\boxed{0110000000000110}$$", "id": "1934992"}, {"introduction": "While individual LUTs are versatile, they have a limited number of inputs, meaning most real-world logic functions are too complex to fit within a single one. Therefore, a crucial skill in FPGA design is understanding how larger circuits are decomposed and mapped across multiple LUTs. This practice builds on the previous concept by asking you to implement a common digital component, an 8-to-1 multiplexer, and determine the minimum number of 4-input LUTs requiredâ€”a classic problem in resource optimization. [@problem_id:1935006]", "problem": "In the design of modern digital systems, Field-Programmable Gate Arrays (FPGAs) are widely used for their flexibility. The fundamental building block of an FPGA is a configurable logic element, which often contains a small Look-Up Table (LUT). For this problem, consider a simplified FPGA architecture where the basic logic element is a 4-input LUT. This element has four inputs and one output and can be programmed to implement any arbitrary Boolean logic function of its four inputs.\n\nYour task is to design a specific data routing component, an 8-to-1 selector circuit (also known as an 8-to-1 multiplexer). This circuit has eight data inputs, labeled $D_0, D_1, \\dots, D_7$, and three selection inputs, labeled $S_2, S_1, S_0$. It has a single output, $Y$. The 3-bit binary number represented by the selection lines $\\{S_2, S_1, S_0\\}$ determines which of the eight data inputs is passed to the output. For example, if the selection lines have the value $\\{S_2, S_1, S_0\\} = \\{1, 0, 1\\}$, which corresponds to the decimal number 5, the output $Y$ will be equal to the data input $D_5$.\n\nWhat is the minimum number of 4-input LUTs required to construct this entire 8-to-1 selector circuit?\n\nA. 2\nB. 3\nC. 4\nD. 7\nE. 8", "solution": "We model a 4-input LUT as a device that can realize any Boolean function of up to 4 independent inputs. An 8-to-1 multiplexer with data inputs $\\{D_{0},\\dots,D_{7}\\}$ and select inputs $\\{S_{2},S_{1},S_{0}\\}$ computes\n$$\nY = D_{k} \\quad \\text{where } k \\text{ is the integer encoded by } (S_{2},S_{1},S_{0}).\n$$\nA 2-to-1 multiplexer with data inputs $A,B$ and select $S$ has the Boolean form\n$$\nM(A,B,S) = \\overline{S}\\,A + S\\,B,\n$$\nwhich depends on 3 independent inputs and therefore fits in a single 4-input LUT. A 4-to-1 multiplexer depends on 6 independent inputs (four data and two selects), namely $\\{D_{0},D_{1},D_{2},D_{3},S_{1},S_{0}\\}$, so it cannot be implemented by a single 4-input LUT.\n\nUse Shannon decomposition on $S_{2}$:\n$$\nY = \\overline{S_{2}}\\,Y_{0}(S_{1},S_{0},D_{0},D_{1},D_{2},D_{3}) + S_{2}\\,Y_{1}(S_{1},S_{0},D_{4},D_{5},D_{6},D_{7}),\n$$\nwhere $Y_{0}$ and $Y_{1}$ are 4-to-1 multiplexers over their respective data groups, selected by $(S_{1},S_{0})$.\n\nEach 4-to-1 multiplexer is constructed from three 2-to-1 multiplexers:\n- First stage (select $S_{0}$):\n$$\nM_{0} = \\overline{S_{0}}\\,D_{0} + S_{0}\\,D_{1}, \\quad M_{1} = \\overline{S_{0}}\\,D_{2} + S_{0}\\,D_{3}, \\quad\nM_{2} = \\overline{S_{0}}\\,D_{4} + S_{0}\\,D_{5}, \\quad M_{3} = \\overline{S_{0}}\\,D_{6} + S_{0}\\,D_{7}.\n$$\n- Second stage (select $S_{1}$):\n$$\nY_{0} = \\overline{S_{1}}\\,M_{0} + S_{1}\\,M_{1}, \\quad Y_{1} = \\overline{S_{1}}\\,M_{2} + S_{1}\\,M_{3}.\n$$\n- Final stage (select $S_{2}$):\n$$\nY = \\overline{S_{2}}\\,Y_{0} + S_{2}\\,Y_{1}.\n$$\n\nMapping each 2-to-1 multiplexer to a single 4-input LUT gives the count:\n- Four LUTs for $M_{0},M_{1},M_{2},M_{3}$,\n- Two LUTs for $Y_{0},Y_{1}$,\n- One LUT for the final selection by $S_{2}$.\n\nTherefore the total is $4+2+1=7$ LUTs.\n\nMinimality: A 4-input LUT cannot realize a 4-to-1 multiplexer (requires 6 independent inputs), so larger multiplexers must be composed from 2-to-1 multiplexers. An 8-to-1 multiplexer requires exactly $7$ 2-to-1 selections arranged as a binary tree to reduce 8 candidate data lines to 1, hence at least $7$ LUTs are necessary. The above construction attains this bound, so $7$ is minimal.", "answer": "$$\\boxed{D}$$", "id": "1935006"}, {"introduction": "Creating a functionally correct design that fits within the available resources is a great start, but in many applications, performance is paramount. The way a design is partitioned across LUTs directly impacts its maximum speed, which is determined by the signal delay through the longest path. This final exercise introduces timing analysis, requiring you to calculate the total propagation delay for a simple function that spans multiple LUTs, considering both the logic delay ($T_{LUT}$) and the interconnect delay ($T_{NET}$) between them. [@problem_id:1935002]", "problem": "A digital design engineer is tasked with implementing a 7-input logical AND gate on a modern Field-Programmable Gate Array (FPGA). The target FPGA's logic fabric is constructed from 6-input Look-Up Tables (LUTs). A single 6-input LUT can be configured to implement any arbitrary Boolean function of up to 6 variables.\n\nThe timing characteristics of this FPGA architecture are as follows:\n- The propagation delay from any input to the output of a single LUT is $T_{LUT} = 80$ ps.\n- The signal propagation delay on the interconnect network between the output of one LUT and the input of a subsequent LUT is $T_{NET} = 110$ ps.\n\nFor this analysis, assume that all 7 primary inputs to the AND gate are stable and simultaneously available at the inputs of the first level of LUTs at time $t=0$. Your task is to determine the parameters of the most resource-efficient implementation, where efficiency is defined as using the minimum number of LUTs.\n\nCalculate the minimum number of LUTs ($L$) required to implement the 7-input AND gate, and the total worst-case propagation delay ($D$) for this implementation. The delay is measured from $t=0$ until the final output is stable.\n\nReport your answer as a 2-element row matrix $[L, D]$, where $L$ is the dimensionless count of LUTs, and $D$ is the total delay expressed in picoseconds.", "solution": "A single 6-input LUT can realize any Boolean function of up to 6 independent variables. A 7-input AND depends on 7 independent variables, so it cannot be implemented with a single 6-input LUT. Therefore, at least 2 LUTs are required.\n\nA resource-minimal construction uses 2 LUTs:\n- LUT1 computes the partial product $y_{1} = x_{1} \\land x_{2} \\land x_{3} \\land x_{4} \\land x_{5} \\land x_{6}$.\n- LUT2 computes the final output $y = y_{1} \\land x_{7}$.\n\nThus the minimum number of LUTs is $L=2$.\n\nFor timing, the worst-case propagation delay is the sum of delays along the longest series path from a primary input to the final output. The path passing through both LUTs comprises:\n- The first LUT delay $T_{\\text{LUT}}$ to produce $y_{1}$,\n- One inter-LUT net delay $T_{\\text{NET}}$ from LUT1 output to LUT2 input,\n- The second LUT delay $T_{\\text{LUT}}$ to produce $y$.\n\nTherefore, the total delay is\n$$\nD = T_{\\text{LUT}} + T_{\\text{NET}} + T_{\\text{LUT}} = 2T_{\\text{LUT}} + T_{\\text{NET}}.\n$$\nSubstituting the given values $T_{\\text{LUT}} = 80$ ps and $T_{\\text{NET}} = 110$ ps yields\n$$\nD = 2 \\times 80 + 110 = 270.\n$$\nThus, $L=2$ and $D=270$ (in picoseconds).", "answer": "$$\\boxed{\\begin{pmatrix} 2 & 270 \\end{pmatrix}}$$", "id": "1935002"}]}