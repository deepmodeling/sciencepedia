{"hands_on_practices": [{"introduction": "To begin our practical exploration, we'll start with the fundamentals of Programmable Array Logic (PAL) devices. PALs are a cornerstone of early digital design, offering a straightforward way to implement sum-of-products logic. This exercise [@problem_id:1955175] challenges you to map Boolean functions onto a PAL's architecture, which consists of a programmable AND array and a fixed OR array. By determining the correct 'fuse map,' you'll gain a concrete understanding of how abstract logic equations are translated into a physical hardware configuration.", "problem": "A simple Programmable Logic Device (PLD), specifically a Programmable Array Logic (PAL) device, is being configured to implement a set of Boolean functions. The PAL has 3 inputs, denoted as $A, B, C$, and 2 outputs, denoted as $F_1, F_2$.\n\nThe internal architecture of this PAL is as follows:\n-   The inputs to the programmable AND array are provided by six input lines, $L_1, L_2, L_3, L_4, L_5, L_6$, which correspond to $A', A, B', B, C', C$, respectively.\n-   The programmable AND array consists of four AND gates, which generate four product terms: $P_1, P_2, P_3, P_4$. Each AND gate can be connected to any of the six input lines via fuses. A fuse is either `intact` (connection exists) or `blown` (connection is broken). To form a product term, only the fuses corresponding to the variables in that term remain intact. If a product term consists of a single variable, only the fuse for that variable's input line is left intact for the corresponding AND gate.\n-   The OR array is fixed. The outputs are defined by hardwired connections to the product terms as follows:\n    -   $F_1 = P_1 + P_2$\n    -   $F_2 = P_3 + P_4$\n\nThe desired functionality is given by the following Boolean expressions:\n-   $F_1(A, B, C) = A'B + C$\n-   $F_2(A, B, C) = AB' + BC$\n\nYou are tasked with determining the correct configuration of fuses that must remain intact to realize these functions. All other fuses are assumed to be blown. A set of intact fuses for a single product term is denoted by a set of pairs `(Product Term, Input Line)`. For example, `{(P1, L2), (P1, L4)}` means that for the product term $P_1$, the fuses connecting to input lines $L_2$ (for $A$) and $L_4$ (for $B$) are intact.\n\nWhich of the following options correctly specifies the complete set of intact fuses for the device?\n\nA.\nIntact fuses for $P_1$: $\\{(P_1, L_2), (P_1, L_3)\\}$\nIntact fuses for $P_2$: $\\{(P_2, L_5)\\}$\nIntact fuses for $P_3$: $\\{(P_3, L_1), (P_3, L_4)\\}$\nIntact fuses for $P_4$: $\\{(P_4, L_3), (P_4, L_6)\\}$\n\nB.\nIntact fuses for $P_1$: $\\{(P_1, L_1), (P_1, L_4)\\}$\nIntact fuses for $P_2$: $\\{(P_2, L_6)\\}$\nIntact fuses for $P_3$: $\\{(P_3, L_2), (P_3, L_3)\\}$\nIntact fuses for $P_4$: $\\{(P_4, L_4), (P_4, L_6)\\}$\n\nC.\nIntact fuses for $P_1$: $\\{(P_1, L_2), (P_1, L_4)\\}$\nIntact fuses for $P_2$: $\\{(P_2, L_6)\\}$\nIntact fuses for $P_3$: $\\{(P_3, L_2), (P_3, L_4)\\}$\nIntact fuses for $P_4$: $\\{(P_4, L_3), (P_4, L_5)\\}$\n\nD.\nIntact fuses for $P_1$: $\\{(P_1, L_1), (P_1, L_4)\\}$\nIntact fuses for $P_2$: $\\{(P_2, L_5)\\}$\nIntact fuses for $P_3$: $\\{(P_3, L_2), (P_3, L_3)\\}$\nIntact fuses for $P_4$: $\\{(P_4, L_3), (P_4, L_6)\\}$\n\nE.\nIntact fuses for $P_1$: $\\{(P_1, L_1), (P_1, L_4), (P_1, L_6)\\}$\nIntact fuses for $P_2$: $\\{(P_2, L_2), (P_2, L_3), (P_2, L_4)\\}$\nIntact fuses for $P_3$: $\\{(P_3, L_4), (P_3, L_6)\\}$\nIntact fuses for $P_4$: $\\{(P_4, L_1), (P_4, L_2)\\}$", "solution": "The PAL has six input lines mapped to literals as $L_{1}=A'$, $L_{2}=A$, $L_{3}=B'$, $L_{4}=B$, $L_{5}=C'$, $L_{6}=C$. The fixed OR array enforces $F_{1}=P_{1}+P_{2}$ and $F_{2}=P_{3}+P_{4}$. Therefore, to realize the target functions\n$$\nF_{1}=A'B+C,\\qquad F_{2}=AB'+BC,\n$$\nthe product terms must satisfy $P_{1},P_{2}\\in\\{A'B,\\ C\\}$ and $P_{3},P_{4}\\in\\{AB',\\ BC\\}$.\n\nEvaluate each option by translating intact fuses into product terms:\n\nOption A:\n- $P_{1}=\\{L_{2},L_{3}\\}=A\\cdot B'$, $P_{2}=\\{L_{5}\\}=C'$, so $F_{1}=AB'+C'\\neq A'B+C$.\n- $P_{3}=\\{L_{1},L_{4}\\}=A'\\cdot B$, $P_{4}=\\{L_{3},L_{6}\\}=B'\\cdot C$, so $F_{2}=A'B+B'C\\neq AB'+BC$. Reject.\n\nOption B:\n- $P_{1}=\\{L_{1},L_{4}\\}=A'\\cdot B$, $P_{2}=\\{L_{6}\\}=C$, hence $F_{1}=A'B+C$ as required.\n- $P_{3}=\\{L_{2},L_{3}\\}=A\\cdot B'$, $P_{4}=\\{L_{4},L_{6}\\}=B\\cdot C$, hence $F_{2}=AB'+BC$ as required. Accept.\n\nOption C:\n- $P_{1}=\\{L_{2},L_{4}\\}=A\\cdot B$, so $F_{1}=AB+ C$ (with $P_{2}=\\{L_{6}\\}=C$), which is not $A'B+C$. Reject.\n\nOption D:\n- $P_{1}=\\{L_{1},L_{4}\\}=A'\\cdot B$ (good), but $P_{2}=\\{L_{5}\\}=C'$, so $F_{1}=A'B+C'\\neq A'B+C$. Reject.\n\nOption E:\n- $P_{1}=\\{L_{1},L_{4},L_{6}\\}=A'\\cdot B\\cdot C$, $P_{2}=\\{L_{2},L_{3},L_{4}\\}=A\\cdot B'\\cdot B=0$, so $F_{1}=A'BC+0\\neq A'B+C$. Also $P_{3}=\\{L_{4},L_{6}\\}=B\\cdot C$, $P_{4}=\\{L_{1},L_{2}\\}=A'\\cdot A=0$, so $F_{2}=BC+0\\neq AB'+BC$. Reject.\n\nOnly Option B yields $F_{1}=A'B+C$ and $F_{2}=AB'+BC$ with the fixed OR connections.", "answer": "$$\\boxed{B}$$", "id": "1955175"}, {"introduction": "Building upon the PAL concept, we now turn to the more flexible Programmable Logic Array (PLA). Unlike a PAL, a PLA features both a programmable AND plane and a programmable OR plane, allowing for greater efficiency in implementing complex logic. This practice problem [@problem_id:1955190] requires you to optimize a design by identifying shared product terms across multiple output functions. This exercise highlights a key advantage of PLAs and introduces the practical consideration of minimizing device resources, which directly relates to cost and complexity.", "problem": "A digital systems engineer is tasked with implementing a set of logic functions using a Programmable Logic Array (PLA). A PLA is a type of programmable logic device that consists of a programmable AND plane connected to a programmable OR plane. The AND plane is used to generate a set of product terms from the device inputs. The OR plane then combines these product terms to produce the final outputs. The complexity and manufacturing cost of a PLA are directly proportional to the total number of programmable fuses it contains.\n\nThe internal structure of the PLA is defined as follows:\n- The AND plane receives inputs from $n$ external lines. For each external input, both the input itself and its complement are available, creating $2n$ internal input lines for the AND plane. The AND plane is configured to generate $p$ distinct product terms. To allow any product term to be formed from any combination of the internal inputs, each of the $p$ product term generators (AND gates) is connected to all $2n$ internal input lines via programmable fuses.\n- The OR plane takes the $p$ product terms generated by the AND plane as its inputs and produces $m$ final outputs. To allow any output function to be a sum of any combination of the product terms, each of the $m$ output generators (OR gates) is connected to all $p$ product term lines via programmable fuses.\n\nThe engineer needs to implement the following three Boolean functions, which depend on four input variables $A, B, C,$ and $D$:\n$F_1(A,B,C,D) = A'B' + ACD$\n$F_2(A,B,C,D) = A'B' + B'C'D'$\n$F_3(A,B,C,D) = ACD + BCD + B'C'D'$\n\nTo create the most cost-effective solution, the PLA will be configured to generate only the minimum number of unique product terms required to realize all three functions. Based on this design, calculate the total number of programmable fuses required for the entire PLA. Your final answer should be a single integer.", "solution": "The PLA has an AND plane fed by $n$ external inputs and their complements, giving $2n$ internal input lines. If the AND plane generates $p$ distinct product terms and each AND gate can select any of the $2n$ internal inputs via programmable fuses, then the number of programmable fuses in the AND plane is\n$$\np \\cdot (2n).\n$$\nThe OR plane combines the $p$ product terms into $m$ outputs, with each of the $m$ OR gates able to select any of the $p$ product terms via programmable fuses, giving\n$$\nm \\cdot p\n$$\nfuses in the OR plane. Therefore, the total number of programmable fuses in the PLA is\n$$\np(2n) + mp = p(2n + m).\n$$\n\nThe three required Boolean functions are\n$$\nF_{1}(A,B,C,D) = \\overline{A}\\,\\overline{B} + A C D, \\quad\nF_{2}(A,B,C,D) = \\overline{A}\\,\\overline{B} + \\overline{B}\\,\\overline{C}\\,\\overline{D}, \\quad\nF_{3}(A,B,C,D) = A C D + B C D + \\overline{B}\\,\\overline{C}\\,\\overline{D}.\n$$\nList the product terms appearing in these sum-of-products forms and identify unique ones across all outputs:\n- $\\overline{A}\\,\\overline{B}$ appears in $F_{1}$ and $F_{2}$.\n- $A C D$ appears in $F_{1}$ and $F_{3}$.\n- $\\overline{B}\\,\\overline{C}\\,\\overline{D}$ appears in $F_{2}$ and $F_{3}$.\n- $B C D$ appears in $F_{3}$ only.\n\nNo two of these can be merged into a single valid product term without altering the functions, because any such merge (for example, replacing $A C D + B C D$ by $C D$) would introduce extra minterms not present in the original functions. Thus, the minimal shared set of product terms is exactly\n$$\n\\{\\overline{A}\\,\\overline{B},\\; A C D,\\; \\overline{B}\\,\\overline{C}\\,\\overline{D},\\; B C D\\},\n$$\nso the minimal number of product terms is $p=4$.\n\nWith $n=4$ inputs and $m=3$ outputs, the total fuse count is\n$$\np(2n + m) = 4\\,(2\\cdot 4 + 3) = 4\\,(8 + 3) = 4\\cdot 11 = 44.\n$$", "answer": "$$\\boxed{44}$$", "id": "1955190"}, {"introduction": "Our final exercise shifts focus to the architecture of modern Field-Programmable Gate Arrays (FPGAs), which represent a significant evolution from simple PLDs. Instead of monolithic AND-OR planes, FPGAs are built from a vast array of small, versatile logic elements, most commonly Look-Up Tables (LUTs). This problem [@problem_id:1955163] asks you to determine how a fundamental arithmetic circuit, the full adder, is constructed using these basic LUTs. This exercise will give you insight into the granular, building-block nature of FPGA logic implementation.", "problem": "In the design of a custom, simplified Field-Programmable Gate Array (FPGA), the primary logic element is a 4-input, 1-output Look-Up Table (LUT). A 4-input LUT is a digital component that can be programmed to implement any arbitrary Boolean function of up to four variables.\n\nYour task is to determine the resources required to implement a fundamental arithmetic circuit: a 1-bit full adder. A full adder is a combinational circuit that computes the sum of three 1-bit inputs: `A`, `B`, and `Cin` (carry-in). It produces two 1-bit outputs: `S` (sum) and `Cout` (carry-out).\n\nAssuming that no specialized hardware resources, such as dedicated carry-chain logic, are available, and you must use only the 4-input LUTs for all logic operations, what is the minimum number of 4-input LUTs required to implement a complete 1-bit full adder cell?\n\nA. 1\n\nB. 2\n\nC. 3\n\nD. 4\n\nE. 5", "solution": "Let the inputs be $A$, $B$, and $C_{in}$, and the outputs be $S$ and $C_{out}$. A 4-input, 1-output LUT implements an arbitrary Boolean function $f(X_{1},X_{2},X_{3},X_{4}) \\rightarrow \\{0,1\\}$. Any Boolean function of up to four variables can therefore be realized by a single such LUT; in particular, any function of three variables can be implemented with one LUT by leaving one input unused or tied to a constant.\n\nThe 1-bit full adder outputs are the two Boolean functions of the three inputs:\n$$\nS = A \\oplus B \\oplus C_{in},\n$$\n$$\nC_{out} = AB + A C_{in} + B C_{in}.\n$$\nBoth $S$ and $C_{out}$ are functions of $(A,B,C_{in})$ only, hence each can be realized by a single 4-input LUT. This proves an upper bound of two LUTs: one LUT implements $S$ and another LUT implements $C_{out}$.\n\nTo show a lower bound, note that each 4-input LUT has only one output. Since $S$ and $C_{out}$ are two independent Boolean functions (they cannot, in general, be the same function or one a deterministic function of the other without access to additional inputs beyond $(A,B,C_{in})$), a single 1-output LUT cannot produce both outputs simultaneously. Therefore, at least two LUTs are required.\n\nCombining the lower bound (at least two) and the constructive upper bound (two suffice), the minimum number of 4-input, 1-output LUTs required to implement a 1-bit full adder is two.", "answer": "$$\\boxed{B}$$", "id": "1955163"}]}