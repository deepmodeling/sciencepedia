{"hands_on_practices": [{"introduction": "The first step in mastering Programmable Logic Arrays (PLAs) is to understand their internal structure. This exercise will guide you through the process of translating a PLA's programmed connections into a standard Boolean expression. By interpreting the configuration of the AND and OR planes, you will practice the fundamental skill of converting a hardware implementation back into its abstract logical form [@problem_id:1954886].", "problem": "A digital systems engineer is configuring a Programmable Logic Array (PLA) to implement a specific logic function. A PLA consists of a programmable AND plane followed by a programmable OR plane.\n\nThe device has three inputs, labeled $X$, $Y$, and $Z$. The AND plane is programmed to generate three distinct product terms, $P_1$, $P_2$, and $P_3$. The connections for each product term are defined as follows, where '1' indicates a connection to the true form of the input, '0' indicates a connection to the complemented (NOT) form, and '-' indicates no connection (a \"don't care\" condition):\n\n- Product term $P_1$: Connections are $X=1$, $Y=-$, $Z=1$.\n- Product term $P_2$: Connections are $X=1$, $Y=1$, $Z=0$.\n- Product term $P_3$: Connections are $X=-$, $Y=0$, $Z=0$.\n\nThe OR plane is then programmed to produce a single output function, $F$, which is the logical OR of all three product terms ($F = P_1 + P_2 + P_3$).\n\nDetermine the final Boolean expression for the output function $F$ in its minimal sum-of-products form. Use a prime symbol (e.g., $X'$) to denote the NOT operation.", "solution": "Interpret each programmed connection in the PLA AND plane:\n- A '1' connection to an input includes the true literal; a '0' connection includes the complemented literal; a '-' (don't care) excludes that variable from the product term (i.e., it is not present in the AND).\nThus,\n- For $P_{1}$ with $X=1$, $Y=-$, $Z=1$, the product is $P_{1} = XZ$.\n- For $P_{2}$ with $X=1$, $Y=1$, $Z=0$, the product is $P_{2} = XYZ'$.\n- For $P_{3}$ with $X=-$, $Y=0$, $Z=0$, the product is $P_{3} = Y'Z'$.\n\nThe OR plane forms $F$ as the sum (OR) of these products:\n$$\nF = P_{1} + P_{2} + P_{3} = XZ + XYZ' + Y'Z'.\n$$\n\nSimplify step by step using Boolean algebra:\n1) Factor $Z'$ from the last two terms:\n$$\nF = XZ + Z'(XY + Y').\n$$\n\n2) Simplify the bracket using $a + bc = (a + b)(a + c)$ with $a=Y'$, $b=X$, $c=Y$, and complementarity $Y + Y' = 1$:\n$$\nXY + Y' = (Y' + X)(Y' + Y) = (Y' + X)\\cdot 1 = X + Y'.\n$$\n\n3) Substitute back:\n$$\nF = XZ + Z'(X + Y') = XZ + XZ' + Y'Z',\n$$\nusing distributivity $a(b+c) = ab + ac$.\n\n4) Combine $XZ + XZ'$ using $Z + Z' = 1$:\n$$\nXZ + XZ' = X(Z + Z') = X \\cdot 1 = X.\n$$\n\nHence,\n$$\nF = X + Y'Z'.\n$$\n\nThis is minimal in sum-of-products form because neither term absorbs the other (the absorption law $a + a'b = a + b$ does not apply to $X + Y'Z'$), and no further combination reduces the number of product terms or literals without changing the function.", "answer": "$$\\boxed{X + Y'Z'}$$", "id": "1954886"}, {"introduction": "Efficiency is a key goal in digital design, and PLAs are no exception. This practice bridges the gap between abstract logic minimization and physical implementation by showing how a Karnaugh map (K-map) can guide the efficient programming of a PLA [@problem_id:1954864]. You will learn how to translate a minimized logical expression, found by grouping terms on a K-map, into the compact \"personality table\" format that defines the PLA's function, saving valuable on-chip resources.", "problem": "A digital logic designer is tasked with implementing a simple 3-variable Boolean function, $F(A, B, C)$, using a Programmable Logic Array (PLA). The variables are ordered such that A is the most significant bit and C is the least significant bit. The function $F$ is defined to be true (evaluates to 1) for the minterms $m_0, m_2, m_4,$ and $m_6$.\n\nThe personality table for this PLA consists of rows defining product terms. Each row is represented as a string of characters for the inputs $A, B, C$ followed by the output $F$. In the input section of the row:\n- A '1' indicates the variable is used in its true form (e.g., $A$).\n- A '0' indicates the variable is used in its complemented form (e.g., $A'$).\n- A '-' (dash) indicates the variable is not part of the product term (it is a don't-care).\n\nIn the output section, a '1' indicates that the product term defined by that row is included in the sum-of-products expression for the function $F$.\n\nWhich of the following single rows correctly represents the complete and minimized implementation of the function $F$ in the PLA personality table?\n\nA. `0-01`\n\nB. `--11`\n\nC. `--01`\n\nD. `-001`\n\nE. `0001`", "solution": "The variables are ordered with $A$ as the most significant bit and $C$ as the least significant bit, so minterm indices correspond to binary assignments $(A,B,C)$:\n$$\nm_{0}:(0,0,0),\\quad m_{2}:(0,1,0),\\quad m_{4}:(1,0,0),\\quad m_{6}:(1,1,0).\n$$\nThus the function is $F=1$ exactly when $C=0$, independent of $A$ and $B$. Writing the sum of minterms and factoring confirms this:\n$$\nF=A'B'C'+A'BC'+AB'C'+ABC' = C'(A'B'+A'B+AB'+AB).\n$$\nUse the distributive identities $(X+X')=1$ twice:\n$$\nA'B'+A'B+AB'+AB=(A'+A)(B'+B)=1\\cdot 1=1,\n$$\nso\n$$\nF=C'.\n$$\nIn a PLA personality table row, a dash indicates a don't-care input, a $0$ indicates a complemented variable, and a $1$ in the output position indicates inclusion of the product term in $F$. Since $F=C'$ uses only $C$ in complemented form and does not depend on $A$ or $B$, the single minimized product term is encoded with don't-cares for A and B, a 0 for C, and a 1 for the output F. This corresponds to the personality table row: `--01`.\nThis matches option C.", "answer": "$$\\boxed{C}$$", "id": "1954864"}, {"introduction": "A logically correct circuit is not always a reliable one. This advanced practice explores the dynamic behavior of PLA-based circuits, introducing the concept of a static-1 hazardâ€”a momentary, unwanted glitch in the output [@problem_id:1954919]. You will analyze an implementation to identify a potential hazard and then learn how to eliminate it by adding a carefully chosen redundant product term, a crucial technique for robust digital design.", "problem": "A Programmable Logic Array (PLA) is a digital component used to implement combinational logic functions. It consists of a programmable AND plane followed by a programmable OR plane. Consider a PLA with three inputs, $A$, $B$, and $C$, and one output, $F$. The device is programmed to implement the Boolean function $F(A,B,C)$ as a sum of two product terms, $P_1$ and $P_2$. The AND plane is configured to generate $P_1 = A'C$ and $P_2 = BC'$, where the prime (') denotes the logical NOT operation. The OR plane is configured to combine these terms, resulting in the output function $F = P_1 + P_2$.\n\nThis implementation is known to be susceptible to a static-1 hazard for a specific input transition between two adjacent input states. To ensure reliable operation, a third product term, $P_3$, must be added to the function, such that the new function $F_{new} = P_1 + P_2 + P_3$ is free of static hazards. Determine the simplest Boolean expression for the product term $P_3$ that must be generated by the AND plane and included in the sum at the OR plane to resolve the hazard.", "solution": "We are given a PLA implementing the Boolean function\n$$F(A,B,C)=P_{1}+P_{2}=A'C+BC'.$$\nA static-1 hazard can occur when two adjacent on-cells in the Karnaugh map are covered by different product terms, and the input transition is a single-variable change. Here, the adjacent states with a single-variable change are $(A,B,C)=(0,1,1)$ and $(0,1,0)$, which differ only in $C$. At $(0,1,1)$ the term $A'C$ is true, and at $(0,1,0)$ the term $BC'$ is true. If the two AND terms have unequal delays, a momentary drop to $0$ can occur during the transition $C:1\\to 0$ with $A'=1$ and $B=1$, creating a static-1 hazard.\n\nTo eliminate a static-1 hazard between two terms that differ only in a complemented/uncomplemented instance of one variable, we add the consensus term. Using the consensus theorem,\n$$XY+X'Z=XY+X'Z+YZ,$$\nand mapping $X=C$, $Y=A'$, $Z=B$, we have\n$$P_{1}=A'C=YX,\\quad P_{2}=BC'=ZX'.$$\nThus the required consensus term is\n$$P_{3}=YZ=A'B.$$\n\nThis term is redundant logically (it does not change the function) because\n$$A'B=A'B(C+C')=A'BC+A'BC'\\leq A'C+BC',$$\nso $F_{new}=A'C+BC'+A'B$ equals the original function for all inputs while covering the hazardous adjacency with a single implicant that remains true across the $C$ transition. Therefore, the simplest product term to add is\n$$P_{3}=A'B.$$", "answer": "$$\\boxed{A'B}$$", "id": "1954919"}]}