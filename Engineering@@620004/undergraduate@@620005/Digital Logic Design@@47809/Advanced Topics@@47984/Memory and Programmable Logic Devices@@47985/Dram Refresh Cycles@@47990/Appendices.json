{"hands_on_practices": [{"introduction": "To ensure data integrity, every row in a Dynamic Random-Access Memory (DRAM) chip must be periodically refreshed. This practice explores the timing of a distributed refresh scheme, a common method where refresh commands are spread out evenly over time. By calculating the total refresh interval, $t_{REFI}$, you will build a foundational understanding of the basic timing parameters that govern DRAM operation and maintenance [@problem_id:1930727].", "problem": "A computer engineering student is designing a memory controller for a specialized embedded system that uses a particular type of Dynamic Random-Access Memory (DRAM). The data sheet for the DRAM chip specifies that it has a total of 8192 rows, and all rows must be refreshed to prevent data loss. The student's controller design implements a distributed refresh mechanism, where a single row refresh command is issued at a constant time interval. The time interval between the start of one row refresh operation and the start of the next is specified as $7.8$ microseconds.\n\nCalculate the total refresh interval, $t_{REFI}$, which represents the maximum time allowed to elapse before any given row must be refreshed. This corresponds to the total time it takes for the controller to refresh every row in the DRAM chip exactly once. Express your answer in units of milliseconds (ms), rounded to three significant figures.", "solution": "The DRAM has $N_{\\text{rows}}=8192$ rows and the controller issues a single-row refresh command at a constant start-to-start interval of $t_{\\text{row}}=7.8$ microseconds. With distributed refresh, the time to refresh all rows once (the total refresh interval) is the number of rows multiplied by the interval per row:\n$$\nt_{\\text{REFI}}=N_{\\text{rows}} \\cdot t_{\\text{row}}=8192 \\times 7.8 \\text{ microseconds}.\n$$\nCompute the product explicitly:\n$$\n8192 \\times 7.8=\\frac{78}{10} \\times 8192=\\frac{78 \\cdot 8192}{10}=\\frac{638976}{10}=63897.6 \\text{ microseconds}.\n$$\nConvert microseconds to milliseconds using $1 \\text{ millisecond}=1000 \\text{ microseconds}$:\n$$\nt_{\\text{REFI}}=\\frac{63897.6}{1000}=63.8976 \\text{ milliseconds}.\n$$\nRounded to three significant figures:\n$$\nt_{\\text{REFI}}=63.9 \\text{ milliseconds}.\n$$", "answer": "$$\\boxed{63.9}$$", "id": "1930727"}, {"introduction": "While essential, the refresh process comes at a cost: it makes the DRAM unavailable for normal operations, creating a \"refresh overhead.\" This exercise guides you through calculating this critical performance metric and explores how external factors, such as temperature, can impact system performance by altering refresh requirements. This practice highlights the trade-offs between data integrity and memory availability that system designers constantly navigate [@problem_id:1930741].", "problem": "An industrial control system utilizes a Dynamic Random-Access Memory (DRAM) module to store operational data. The memory cells in a DRAM must be periodically refreshed to prevent data loss. This refresh process makes the memory temporarily unavailable for read or write operations, creating an overhead. The refresh overhead is defined as the fraction of the total time that the memory is busy performing refresh operations.\n\nThe specifications for the DRAM module under standard operating conditions are as follows:\n- Total number of rows to be refreshed: 8192 rows\n- Time required for a single row refresh cycle ($t_{RFC}$): 350 ns\n- Standard maximum interval between refreshes for any given row, also known as the refresh interval ($t_{REFI}$): 64 ms\n\nDue to a change in the operational environment, the ambient temperature around the control system has increased significantly. This elevated temperature increases the leakage rate of the DRAM capacitors, forcing the refresh interval ($t_{REFI}$) to be halved to ensure data integrity. All other timing parameters of the DRAM, such as $t_{RFC}$, remain unchanged.\n\nCalculate the new refresh overhead for the DRAM module operating in the high-temperature environment. Express your answer as a decimal value, rounded to three significant figures.", "solution": "The refresh overhead is the fraction of time the DRAM is unavailable due to refresh. If $N$ rows must be refreshed within a total refresh window $T$, and each refresh operation makes the DRAM unavailable for $t_{RFC}$, then the overhead is\n$$\nO=\\frac{N\\,t_{RFC}}{T}.\n$$\nUnder standard conditions, $N=8192$ and $T=64 \\times 10^{-3} \\text{ s}$. When the refresh interval $t_{REFI}$ is halved, the time window to refresh all rows is also halved, so the new window is $T'=\\frac{T}{2}=32 \\times 10^{-3} \\text{ s}$. With $t_{RFC}$ unchanged, the new overhead is\n$$\nO'=\\frac{N\\,t_{RFC}}{T'}=\\frac{8192 \\cdot \\left(350 \\times 10^{-9} \\text{ s}\\right)}{32 \\times 10^{-3} \\text{ s}}.\n$$\nCompute step by step:\n$$\n8192 \\cdot 350=2{,}867{,}200,\\quad 2{,}867{,}200 \\times 10^{-9} \\text{ s}=2.8672 \\times 10^{-3} \\text{ s},\n$$\nso\n$$\nO'=\\frac{2.8672 \\times 10^{-3}}{32 \\times 10^{-3}}=\\frac{2.8672}{32}=0.0896.\n$$\nRounded to three significant figures, this is $0.0896$.", "answer": "$$\\boxed{0.0896}$$", "id": "1930741"}, {"introduction": "To minimize the performance impact of refresh overhead, modern DRAM systems are often organized into multiple independent banks, which allows for intelligent scheduling of refresh operations. By staggering refresh commands across the banks, it is possible to ensure that some portion of the memory remains available for access at all times. This advanced practice challenges you to devise an optimal refresh schedule for a multi-bank system, a common task in high-performance memory controller design that balances maintenance needs with system responsiveness [@problem_id:1930761].", "problem": "A high-performance computing system utilizes a specialized Dynamic Random Access Memory (DRAM) module. This module contains $N_B$ independent banks. To maintain data integrity, the memory controller must periodically refresh each bank. A single refresh command issued to a bank makes it unavailable for any other operation for a duration of $t_{RFC}$.\n\nThe memory controller employs a \"fixed-stagger\" refresh policy. It issues refresh commands sequentially to the banks (Bank 0, Bank 1, ..., Bank $N_B-1$) with a fixed time separation of $t_{sep}$ between consecutive commands.\n\nTo ensure system responsiveness, the design imposes a critical constraint: at any given moment, the number of banks that are simultaneously unavailable due to an active refresh command must not exceed $k_{max}$, where $k_{max}$ is an integer satisfying $1 \\le k_{max} < N_B$.\n\nThe controller is configured to use the smallest possible value for $t_{sep}$ that still satisfies this constraint, in order to complete the refresh sequence for all banks as quickly as possible.\n\nAssuming the first refresh command (for Bank 0) is issued at time $t=0$, determine the total time elapsed until the last bank (Bank $N_B-1$) completes its refresh cycle. This total duration represents the minimum time required to refresh all banks under the specified policy.\n\nUse the following values for your calculation:\n- Total number of banks, $N_B = 16$.\n- Single bank refresh cycle time, $t_{RFC} = 350 \\text{ ns}$.\n- Maximum concurrently refreshing banks, $k_{max} = 4$.\n\nExpress your answer in nanoseconds (ns), rounded to three significant figures.", "solution": "Each refresh occupies a bank for a continuous interval of duration $t_{RFC}$. With a fixed-stagger schedule issuing commands every $t_{sep}$, the number of overlapping active refreshes at any time equals the number of intervals of length $t_{RFC}$ whose start times, spaced by $t_{sep}$, cover that time. For a periodic stream, the maximum number of overlaps is\n$$\n\\left\\lceil \\frac{t_{RFC}}{t_{sep}} \\right\\rceil.\n$$\nThe constraint requires that this maximum not exceed $k_{max}$, hence\n$$\n\\left\\lceil \\frac{t_{RFC}}{t_{sep}} \\right\\rceil \\le k_{max}.\n$$\nTo minimize the total time, the controller chooses the smallest $t_{sep}$ that satisfies the constraint. The minimal separation that maintains the ceiling at $k_{max}$ is\n$$\nt_{sep,\\min} = \\frac{t_{RFC}}{k_{max}}.\n$$\nWith $N_{B}$ banks, the last command (for Bank $N_{B}-1$) is issued at time $(N_{B}-1)t_{sep,\\min}$ and completes after an additional $t_{RFC}$. Therefore, the total time to complete all refreshes is\n$$\nT_{\\text{total}} = (N_{B}-1)\\,t_{sep,\\min} + t_{RFC} = (N_{B}-1)\\frac{t_{RFC}}{k_{max}} + t_{RFC}.\n$$\nSubstituting the given values $N_{B}=16$, $t_{RFC}=350\\ \\text{ns}$, and $k_{max}=4$ gives\n$$\nt_{sep,\\min} = \\frac{350\\ \\text{ns}}{4} = 87.5\\ \\text{ns},\n$$\n$$\nT_{\\text{total}} = 15 \\times 87.5\\ \\text{ns} + 350\\ \\text{ns} = 1662.5\\ \\text{ns}.\n$$\nRounded to three significant figures, this is $1.66 \\times 10^{3}\\ \\text{ns}$, so the numerical value to report in nanoseconds is $1.66 \\times 10^{3}$.", "answer": "$$\\boxed{1.66 \\times 10^{3}}$$", "id": "1930761"}]}