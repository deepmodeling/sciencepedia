{"hands_on_practices": [{"introduction": "Understanding memory decoding begins with the system-level view of a memory map. This exercise [@problem_id:1946665] challenges you to act as a reverse-engineer, taking the given chip-select logic for two distinct memory devices and reconstructing the complete memory map for a 64 KB system. By determining the address range each chip occupies, you will not only visualize how a microprocessor's address space is partitioned but also learn to identify unused or 'empty' regions, a fundamental skill in system architecture and resource management.", "problem": "An engineer is tasked with reverse-engineering the memory architecture of a legacy 8-bit embedded system. The system's microprocessor has a 16-bit address bus, allowing it to address a total space of 64 Kilobytes (KB), where $1 \\text{ KB} = 2^{10}$ bytes. The address lines are labeled $A_{15}$ (most significant) down to $A_0$ (least significant).\n\nThe system contains two memory chips:\n1.  A 16 KB Random Access Memory (RAM) chip.\n2.  An 8 KB Read-Only Memory (ROM) chip.\n\nThe lower address lines from the microprocessor ($A_0, A_1, ...$) are connected directly to the address inputs of the memory chips to select a byte within the chip. The higher address lines are used for chip selection via a decoder. Both Chip Select (CS) inputs are active-high, meaning a chip is enabled when its CS pin receives a logic '1'.\n\nThe decoding logic is determined to be:\n-   For the 16 KB RAM chip: $CS_{RAM} = \\overline{A_{15}} \\cdot \\overline{A_{14}}$\n-   For the 8 KB ROM chip: $CS_{ROM} = A_{15} \\cdot A_{14} \\cdot A_{13}$\n\nCalculate the total amount of unused (unaddressable) memory space within the system's 64 KB address range. Express your answer in Kilobytes (KB).", "solution": "The microprocessor has a 16-bit address bus, so the total addressable space is\n$$2^{16}\\ \\text{bytes} = 64\\ \\text{KB},$$\nusing $1 \\text{ KB} = 2^{10} \\text{ bytes}$.\n\nThe RAM chip is enabled when $A_{15}=0$ and $A_{14}=0$, as given by\n$$CS_{RAM}=\\overline{A_{15}}\\cdot \\overline{A_{14}}.$$\nFixing these two high-order bits selects a contiguous block whose size equals the number of combinations of the remaining lower bits. The remaining $16-2=14$ address lines $A_{13}\\ldots A_{0}$ vary freely, yielding\n$$2^{14}\\ \\text{bytes} = 16\\ \\text{KB}.$$\n\nThe ROM chip is enabled when $A_{15}=1$, $A_{14}=1$, and $A_{13}=1$, as given by\n$$CS_{ROM}=A_{15}\\cdot A_{14}\\cdot A_{13}.$$\nFixing these three high-order bits leaves $16-3=13$ lower address lines $A_{12}\\ldots A_{0}$ varying, yielding\n$$2^{13}\\ \\text{bytes} = 8\\ \\text{KB}.$$\n\nThese two regions are disjoint because the RAM requires $A_{15}=0$ while the ROM requires $A_{15}=1$. Therefore, the total used space is\n$$16\\ \\text{KB} + 8\\ \\text{KB} = 24\\ \\text{KB}.$$\n\nThe unused (unaddressed) space is the remainder of the $64\\ \\text{KB}$ range:\n$$64\\ \\text{KB} - 24\\ \\text{KB} = 40\\ \\text{KB}.$$\nEquivalently, in bytes and then converted to KB:\n$$\\frac{2^{16} - \\left(2^{14} + 2^{13}\\right)}{2^{10}} = 2^{6} - 2^{4} - 2^{3} = 64 - 16 - 8 = 40\\ \\text{KB}.$$", "answer": "$$\\boxed{40}$$", "id": "1946665"}, {"introduction": "While full address decoding ensures every memory location has a unique address, designers sometimes use simplified or 'incomplete' decoding to save logic gates. This practice [@problem_id:1946720] explores the direct consequence of such a design choice: address aliasing. You will analyze a scenario where not all higher-order address lines are used in the chip-select logic, causing a single memory chip to appear at multiple addresses and creating 'phantom' copies in the memory map.", "problem": "A digital systems engineer is interfacing a memory chip with a microprocessor. The microprocessor has a total address space of 16 KB (kilobytes), where 1 KB is defined as $2^{10} \\text{ bytes}$. The memory chip is a Random Access Memory (RAM) device with a capacity of 1 KB.\n\nTo select the memory chip, a decoding circuit is used. However, due to a design oversight, the chip select logic is incomplete. The chip is selected if and only if the two most significant address lines from the microprocessor, $A_{13}$ and $A_{12}$, are 1 and 0, respectively. All other higher-order address lines that are not used for addressing *within* the chip are left disconnected from the chip select logic, effectively making them \"don't care\" bits for the purpose of chip selection.\n\nThis incomplete decoding scheme causes the memory chip to respond to multiple distinct address ranges in the microprocessor's address space, a phenomenon known as address aliasing. A \"base address\" is defined as the starting address of a memory block. Your task is to determine the full set of aliased base addresses for this 1 KB memory chip.\n\nProvide your answer as a set of hexadecimal values, listed in ascending numerical order. Do not include any prefix (like `0x`) or suffix (like `h`) in your answers.", "solution": "The microprocessor address space is 16 KB, which equals $2^{14} \\text{ bytes}$, so the address bus has $14$ lines labeled $A_{13}$ (most significant) through $A_{0}$ (least significant). The RAM capacity is 1 KB, which equals $2^{10} \\text{ bytes}$, so $10$ address lines are required for addressing within the chip; these are $A_{9}$ through $A_{0}$.\n\nTo select a particular 1 KB block in the $2^{14}$-byte space, the higher-order lines $A_{13}$ through $A_{10}$ must determine which block is addressed. In the given incomplete decoding, the chip is selected if and only if $A_{13}=1$ and $A_{12}=0$, while $A_{11}$ and $A_{10}$ are left as don't-care bits. Therefore, the chip responds to all addresses for which\n$$A_{13}=1,\\quad A_{12}=0,\\quad A_{11}\\in\\{0,1\\},\\quad A_{10}\\in\\{0,1\\}.$$\nA base address is the start of a 1 KB block, which requires $A_{9}=\\cdots=A_{0}=0$. Hence, the aliased base addresses are exactly those with the bit pattern above and $A_{9}=\\cdots=A_{0}=0$.\n\nWriting the base address value in terms of powers of two,\n$$\\text{Base} = A_{13}2^{13} + A_{12}2^{12} + A_{11}2^{11} + A_{10}2^{10},$$\nwith $A_{13}=1$, $A_{12}=0$, and $A_{11},A_{10}\\in\\{0,1\\}$. Enumerating the four combinations:\n- $A_{11}=0$, $A_{10}=0$: $\\text{Base}=2^{13}=0x2000$.\n- $A_{11}=0$, $A_{10}=1$: $\\text{Base}=2^{13}+2^{10}=0x2000+0x0400=0x2400$.\n- $A_{11}=1$, $A_{10}=0$: $\\text{Base}=2^{13}+2^{11}=0x2000+0x0800=0x2800$.\n- $A_{11}=1$, $A_{10}=1$: $\\text{Base}=2^{13}+2^{11}+2^{10}=0x2000+0x0800+0x0400=0x2C00$.\n\nListed in ascending order, the aliased base addresses are $2000$, $2400$, $2800$, and $2C00$ (hexadecimal, with no prefixes or suffixes).", "answer": "$$\\boxed{\\begin{pmatrix}2000 & 2400 & 2800 & 2C00\\end{pmatrix}}$$", "id": "1946720"}, {"introduction": "Moving beyond design principles to real-world troubleshooting, this final exercise [@problem_id:1946715] simulates a common but critical hardware fault. Your task is to diagnose the behavior of a memory system where a decoder's enable input has been mistakenly wired to a control signal instead of an address line. This problem requires you to synthesize your knowledge of address decoding, decoder operation, and CPU control signals like $R/\\overline{W}$ to predict the complex and non-obvious symptoms, honing the diagnostic skills essential for any digital systems engineer.", "problem": "A digital system designer is interfacing eight 1-kilobyte (KB) static RAM chips with a microprocessor that has a 16-bit address bus ($A_{15}$ down to $A_0$) and a Read/Write control line ($R/\\overline{W}$). The $R/\\overline{W}$ line is at logic HIGH for a read operation and logic LOW for a write operation.\n\nThe design goal is to map the eight RAM chips into a single contiguous 8 KB block of memory starting at address 0x8000. To achieve this, a single 74LS138 3-to-8 decoder is used for chip selection. The 74LS138 has one active-high enable input ($G_1$) and two active-low enable inputs ($G_{2A}$ and $G_{2B}$). For the decoder to be active, the enable inputs must be $G_1=1$, $G_{2A}=0$, and $G_{2B}=0$.\n\nThe intended connections for the decoder are:\n-   **Enable Inputs:** $G_1$ is connected to $A_{15}$, $G_{2A}$ is connected to $A_{14}$, and $G_{2B}$ is connected to $A_{13}$.\n-   **Select Inputs:** The select lines $C$, $B$, and $A$ are connected to $A_{12}$, $A_{11}$, and $A_{10}$ respectively.\n-   **Outputs:** The active-low outputs $\\overline{Y_0}$ through $\\overline{Y_7}$ are connected to the active-low Chip Select ($\\overline{CS}$) inputs of RAM chips 0 through 7, respectively.\n\nAfter manufacturing, a fault is discovered: the wire for the $G_1$ enable input was mistakenly connected to the CPU's $R/\\overline{W}$ line instead of the $A_{15}$ address line. The $A_{15}$ line is no longer connected to the decoder.\n\nWhich of the following statements most accurately describes the operational behavior of the RAM with this wiring fault?\n\nA. The RAM can be written to, but cannot be read from. The active address range remains 0x8000-0x9FFF.\n\nB. The RAM is fully functional (readable and writable), but it now appears at two address ranges: 0x0000-0x1FFF and 0x8000-0x9FFF.\n\nC. The RAM can be read from, but cannot be written to. The active address range for reads is now duplicated, appearing at both 0x0000-0x1FFF and 0x8000-0x9FFF.\n\nD. The system operates exactly as intended, because the $R/\\overline{W}$ line is HIGH (logic 1) during a read cycle, which satisfies the $G_1$ enable input just as $A_{15}=1$ would have.", "solution": "To determine the behavior of the system with the fault, we must analyze how the mis-wiring affects the decoder's enable logic, and consequently, the memory system's response to read/write operations and its address map.\n\n**Step 1: Analyze the Intended (Correct) Decoding Logic**\n\nIn the original design, the 74LS138 decoder is enabled when its enable inputs satisfy the condition $G_1=1$, $G_{2A}=0$, and $G_{2B}=0$. The connections are:\n-   $G_1 \\leftarrow A_{15}$\n-   $G_{2A} \\leftarrow A_{14}$\n-   $G_{2B} \\leftarrow A_{13}$\n\nSo, the decoder is enabled if and only if $A_{15}=1$, $A_{14}=0$, and $A_{13}=0$. In binary, this corresponds to an address prefix of `100...`.\nThe memory addresses with this prefix span from `1000 0000 0000 0000` (0x8000) to `1001 1111 1111 1111` (0x9FFF). This is an 8 KB address block. The select lines $A_{12}, A_{11}, A_{10}$ are used to select one of the eight 1 KB chips within this block. This configuration correctly maps the 8 KB of RAM to the intended address range.\n\n**Step 2: Analyze the Faulty Decoding Logic**\n\nIn the faulty configuration, the $G_1$ input is connected to the $R/\\overline{W}$ line instead of $A_{15}$. The enable logic for the decoder now becomes:\n-   $G_1 = (R/\\overline{W})$\n-   $G_{2A} = A_{14}$\n-   $G_{2B} = A_{13}$\n\nThe condition for the decoder to be enabled is now: $(R/\\overline{W})=1$ AND $A_{14}=0$ AND $A_{13}=0$.\n\n**Step 3: Analyze the Impact on Read and Write Operations**\n\nWe examine the new enable condition for CPU read and write cycles.\n\n-   **Write Cycle:** During a write operation, the CPU sets the $R/\\overline{W}$ line to LOW (logic 0). The enable condition for the decoder is $(0)=1$ AND $A_{14}=0$ AND $A_{13}=0$. The first part of this logical AND, `(0)=1`, is always false. Therefore, the decoder cannot be enabled during any write cycle, regardless of the address on the bus. Since the decoder is never enabled, its outputs $\\overline{Y_0}-\\overline{Y_7}$ will never be asserted (go low). This means no RAM chip will ever be selected (since their $\\overline{CS}$ inputs remain high). Consequently, **it is impossible to write data to any of the RAM chips.**\n\n-   **Read Cycle:** During a read operation, the CPU sets the $R/\\overline{W}$ line to HIGH (logic 1). The enable condition for the decoder becomes $(1)=1$ AND $A_{14}=0$ AND $A_{13}=0$. This simplifies to the condition: $A_{14}=0$ AND $A_{13}=0$. If this address condition is met, the decoder will be enabled, and one of its outputs will select a RAM chip. Therefore, **it is possible to read data from the RAM chips.**\n\nCombining these findings, we conclude that the RAM can be read from, but not written to.\n\n**Step 4: Analyze the Impact on the Address Map (Address Aliasing)**\n\nThe faulty enable logic, active only during reads, depends on $A_{14}=0$ and $A_{13}=0$. Crucially, it is now independent of the $A_{15}$ address line. This means the decoder will respond during a read operation whenever the address prefix is `X00...` (where X represents the \"don't care\" state of $A_{15}$).\n\nLet's find the address ranges that satisfy this condition:\n-   **Case 1: $A_{15}=0$.** The address prefix is `000...`. This corresponds to addresses where $A_{15}=0, A_{14}=0, A_{13}=0$. The 8 KB block of RAM (selected by $A_{12}, A_{11}, A_{10}$) will appear in the address range from `0000 0000 0000 0000` to `0001 1111 1111 1111`, which is **0x0000 to 0x1FFF**.\n-   **Case 2: $A_{15}=1$.** The address prefix is `100...`. This corresponds to addresses where $A_{15}=1, A_{14}=0, A_{13}=0$. The 8 KB block of RAM will also appear in the address range from `1000 0000 0000 0000` to `1001 1111 1111 1111`, which is **0x8000 to 0x9FFF**. This is the originally intended range.\n\nBecause the RAM responds to read requests in both of these ranges, the memory is said to be \"aliased\" or \"mirrored\". A read from address 0x0100 will access the exact same memory cell as a read from address 0x8100.\n\n**Step 5: Evaluate the Options**\n\n-   A. \"The RAM can be written to, but cannot be read from...\" - Incorrect. Our analysis shows the opposite is true.\n-   B. \"The RAM is fully functional (readable and writable)...\" - Incorrect. Write operations fail.\n-   C. \"The RAM can be read from, but cannot be written to. The active address range for reads is now duplicated, appearing at both 0x0000-0x1FFF and 0x8000-0x9FFF.\" - **Correct.** This statement accurately summarizes our findings: writes fail, reads work, and the active address range is aliased to appear at both 0x0000-0x1FFF and 0x8000-0x9FFF.\n-   D. \"The system operates exactly as intended...\" - Incorrect. This ignores two major problems: the failure of all write operations and the creation of an address alias, which can cause significant system instability.", "answer": "$$\\boxed{C}$$", "id": "1946715"}]}