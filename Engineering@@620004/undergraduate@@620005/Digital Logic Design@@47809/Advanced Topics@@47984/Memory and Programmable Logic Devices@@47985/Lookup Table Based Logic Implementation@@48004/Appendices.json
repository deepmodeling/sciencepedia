{"hands_on_practices": [{"introduction": "At its core, a Look-Up Table (LUT) is a small memory that directly stores the truth table of a Boolean function. This exercise provides foundational practice in the essential task of translating a given logical expression into the physical bit-string that would be programmed into an LUT's memory. Mastering this \"forward\" process helps bridge the conceptual gap between abstract logic and its concrete hardware implementation. [@problem_id:1944846]", "problem": "In modern digital systems, many logic functions are implemented using programmable hardware elements. One such fundamental element is a Look-Up Table (LUT). A $k$-input LUT is a small memory that can implement any Boolean function of $k$ variables. It has $k$ address lines (the inputs to the function) and one data output. The memory stores $2^k$ bits, and for any given combination of inputs, the corresponding memory address is accessed and the bit stored at that location is presented at the output.\n\nConsider a 4-input LUT used to implement a specific Boolean function $f(A, B, C, D)$. The four inputs $A, B, C, D$ are used to form a 4-bit memory address, where $D$ is the Most Significant Bit (MSB) and $A$ is the Least Significant Bit (LSB). Thus, the address corresponds to the integer value of the binary number $DCBA$. The function to be implemented is given by the following expression:\n\n$$f(A, B, C, D) = (A \\oplus B) \\cdot (C + D)$$\n\nHere, $\\oplus$ denotes the logical XOR operation, $\\cdot$ denotes the logical AND operation, and $+$ denotes the logical OR operation.\n\nDetermine the 16-bit binary string that must be stored in the LUT's memory to realize this function. The string should be ordered corresponding to the contents of memory addresses 0 through 15.", "solution": "A $4$-input LUT uses inputs $A,B,C,D$ to form the address with $D$ as MSB and $A$ as LSB, so the address is the integer value of $DCBA$, equivalently $n=8D+4C+2B+A$. The implemented function is\n$$\nf(A,B,C,D)=(A\\oplus B)\\cdot(C+D).\n$$\nWe evaluate $f$ for addresses $0$ through $15$.\n\n- When $C=D=0$ (addresses with `DCBA` = `0000`, `0001`, `0010`, `0011`, i.e., $n=0,1,2,3$), we have $C+D=0$, hence $f=(A\\oplus B)\\cdot 0=0$. Thus bits at addresses $0,1,2,3$ are $0,0,0,0$.\n\n- For $C+D=1$ (all remaining addresses where $(C,D)\\neq(0,0)$), we have $f=A\\oplus B$. For each fixed pair $(D,C)$, as the address increments, $(A,B)$ cycles through $(0,0),(1,0),(0,1),(1,1)$, yielding $A\\oplus B=0,1,1,0$.\n\nApplying this to each block:\n1) $D=0,C=1$ (addresses $4,5,6,7$): outputs $0,1,1,0$.\n2) $D=1,C=0$ (addresses $8,9,10,11$): outputs $0,1,1,0$.\n3) $D=1,C=1$ (addresses $12,13,14,15$): outputs $0,1,1,0$.\n\nCollecting in order from address $0$ to $15$ gives the $16$-bit string:\n$$\n0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0.\n$$\nRemoving commas, the required LUT contents are\n$$\n0000011001100110.\n$$", "answer": "$$\\boxed{0000011001100110}$$", "id": "1944846"}, {"introduction": "Just as we program LUTs from functions, we often need to analyze existing configurations. This practice reverses the process, challenging you to work backward from the hardware's memory content to the abstract logical function it represents. This exercise sharpens crucial reverse-engineering skills, as you interpret the raw hexadecimal data of an LUT to reconstruct its truth table and derive a simplified Boolean expression, a common task in circuit verification and debugging. [@problem_id:1944844]", "problem": "A 4-input lookup table (LUT) is a fundamental component in modern Field-Programmable Gate Arrays (FPGAs). It can be programmed to implement any Boolean function of four variables. The function is defined by a 16-bit configuration value, which stores the output for each of the 16 possible input combinations.\n\nConsider a 4-input LUT with inputs designated as $A, B, C,$ and $D$, where $A$ is the most significant bit (MSB) and $D$ is the least significant bit (LSB). The input combination $(ABCD)_2$ forms a 4-bit unsigned integer $i$ that addresses the LUT. The output of the LUT for this input is determined by the $i$-th bit of the 16-bit configuration value, where the 0-th bit is the LSB of the configuration value.\n\nThe configuration value for a particular LUT is given by the hexadecimal number `0x6996`.\n\nDetermine the minimized sum-of-products (SOP) expression for the Boolean function, $F(A, B, C, D)$, implemented by this LUT. Your expression should use an overbar (e.g., $\\overline{A}$) to denote negation.", "solution": "A 4-input LUT indexed by $i$ uses $i=8A+4B+2C+D$, where $A$ is the MSB and $D$ is the LSB. The configuration value is $0x6996$. Writing this as a 16-bit binary word from bit $15$ (MSB) to bit $0$ (LSB),\n$$0x6996 = 0110\\ 1001\\ 1001\\ 0110,$$\nso the bits $b_{15}\\ldots b_{0}$ are $0,1,1,0,1,0,0,1,1,0,0,1,0,1,1,0$. Therefore the bits from LSB to MSB are\n$b_{0}=0, b_{1}=1, b_{2}=1, b_{3}=0, b_{4}=1, b_{5}=0, b_{6}=0, b_{7}=1, b_{8}=1, b_{9}=0, b_{10}=0, b_{11}=1, b_{12}=0, b_{13}=1, b_{14}=1, b_{15}=0.$\nHence the output $F(A,B,C,D)=1$ for indices\n$i\\in\\{1,2,4,7,8,11,13,14\\}.$\nMapping each index $i$ back to $(A,B,C,D)$ using $i=8A+4B+2C+D$ gives the minterms:\n- $i=1:(0,0,0,1)\\Rightarrow \\overline{A}\\,\\overline{B}\\,\\overline{C}\\,D$,\n- $i=2:(0,0,1,0)\\Rightarrow \\overline{A}\\,\\overline{B}\\,C\\,\\overline{D}$,\n- $i=4:(0,1,0,0)\\Rightarrow \\overline{A}\\,B\\,\\overline{C}\\,\\overline{D}$,\n- $i=7:(0,1,1,1)\\Rightarrow \\overline{A}\\,B\\,C\\,D$,\n- $i=8:(1,0,0,0)\\Rightarrow A\\,\\overline{B}\\,\\overline{C}\\,\\overline{D}$,\n- $i=11:(1,0,1,1)\\Rightarrow A\\,\\overline{B}\\,C\\,D$,\n- $i=13:(1,1,0,1)\\Rightarrow A\\,B\\,\\overline{C}\\,D$,\n- $i=14:(1,1,1,0)\\Rightarrow A\\,B\\,C\\,\\overline{D}$.\n\nOn a $4$-variable Karnaugh map, these ones are all isolated (no adjacent ones), so no grouping is possible and the canonical sum of minterms is already the minimized SOP. Equivalently, this truth table corresponds to the odd-parity function $A\\oplus B\\oplus C\\oplus D$, whose minimized two-level SOP indeed contains all eight minterms above.\n\nTherefore, the minimized SOP is\n$F(A,B,C,D)=\\overline{A}\\,\\overline{B}\\,\\overline{C}\\,D+\\overline{A}\\,\\overline{B}\\,C\\,\\overline{D}+\\overline{A}\\,B\\,\\overline{C}\\,\\overline{D}+\\overline{A}\\,B\\,C\\,D+A\\,\\overline{B}\\,\\overline{C}\\,\\overline{D}+A\\,\\overline{B}\\,C\\,D+A\\,B\\,\\overline{C}\\,D+A\\,B\\,C\\,\\overline{D}.$", "answer": "$$\\boxed{\\overline{A}\\,\\overline{B}\\,\\overline{C}\\,D+\\overline{A}\\,\\overline{B}\\,C\\,\\overline{D}+\\overline{A}\\,B\\,\\overline{C}\\,\\overline{D}+\\overline{A}\\,B\\,C\\,D+A\\,\\overline{B}\\,\\overline{C}\\,\\overline{D}+A\\,\\overline{B}\\,C\\,D+A\\,B\\,\\overline{C}\\,D+A\\,B\\,C\\,\\overline{D}}$$", "id": "1944844"}, {"introduction": "Real-world functions are often too complex for a single, small LUT. The true power of modern programmable logic devices like FPGAs comes from intelligently networking thousands of smaller LUTs to form larger circuits. This problem introduces the fundamental concept of logic decomposition, guiding you to build a function that is larger than the available building block. By determining how a 3-input function can be synthesized from 2-input LUTs, you will gain practical insight into a core challenge of digital design automation. [@problem_id:1944817]", "problem": "In modern digital systems like Field-Programmable Gate Arrays (FPGAs), complex logic circuits are often constructed using a mesh of small, programmable logic elements. The fundamental building block of these elements is often a $k$-input Look-Up Table (LUT), which is a small memory that can be programmed to implement any arbitrary Boolean function of its $k$ inputs.\n\nConsider an FPGA architecture where the logic is exclusively built using 2-input LUTs. Your task is to compare the resource requirements for implementing two common 3-input logic functions. Specifically, determine the minimum number of 2-input LUTs required to implement:\n1. A 3-input AND gate, defined by the Boolean function $F_{AND}(A, B, C) = A \\cdot B \\cdot C$.\n2. A 3-input Exclusive-OR (XOR) gate, defined by the Boolean function $F_{XOR}(A, B, C) = A \\oplus B \\oplus C$.\n\nLet $N_{AND}$ be the minimum number of 2-input LUTs required for the 3-input AND gate, and $N_{XOR}$ be the minimum number for the 3-input XOR gate. Find the integer values for $N_{AND}$ and $N_{XOR}$.\n\nPresent your final answer as a row matrix containing the two integer values in the order $(N_{AND}, N_{XOR})$.", "solution": "A 2-input LUT can implement an arbitrary Boolean function of at most two input variables. Therefore, the output of any single 2-input LUT can depend on at most two primary inputs. If a target Boolean function depends essentially on three variables, then at least two 2-input LUTs are required: the first LUT can combine at most two of the inputs, and a second LUT is needed to incorporate the third input. We formalize this lower bound using essential variables.\n\nFor the 3-input AND, $F_{AND}(A,B,C)=A \\cdot B \\cdot C$. Each variable is essential because, for example, fixing $B=1$ and $C=1$ gives $F_{AND}=A$, which changes when $A$ changes; analogous arguments hold for $B$ and $C$. Hence any realization with 2-input LUTs must use at least two LUTs:\n$$\nN_{AND} \\geq 2.\n$$\nAn explicit construction achieving this bound is to compute $D=A \\cdot B$ with one 2-input LUT and then compute $F_{AND}=D \\cdot C$ with a second 2-input LUT. Therefore,\n$$\nN_{AND}=2.\n$$\n\nFor the 3-input XOR, $F_{XOR}(A,B,C)=A \\oplus B \\oplus C$. Each variable is essential because fixing the other two, flipping any one input flips the output; for instance, with $B=0$ and $C=0$, $F_{XOR}=A$. Thus any single 2-input LUT cannot realize $F_{XOR}$, giving the lower bound\n$$\nN_{XOR} \\geq 2.\n$$\nAn explicit construction achieving this bound is to use one 2-input LUT to compute $T=A \\oplus B$ and a second 2-input LUT to compute $F_{XOR}=T \\oplus C$. Therefore,\n$$\nN_{XOR}=2.\n$$\n\nCombining these, the minimal numbers are $(N_{AND},N_{XOR})=(2,2)$, which we present as a row matrix.", "answer": "$$\\boxed{\\begin{pmatrix}2 & 2\\end{pmatrix}}$$", "id": "1944817"}]}