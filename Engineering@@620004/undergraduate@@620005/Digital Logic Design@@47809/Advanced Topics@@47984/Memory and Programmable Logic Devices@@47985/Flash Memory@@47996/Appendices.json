{"hands_on_practices": [{"introduction": "At the heart of flash memory is the ability to store a binary digit as a physical state. This exercise provides a hands-on look at this core principle by modeling memory cells as simple switches with different resistances. By analyzing a simplified NOR flash memory circuit, you will calculate the resulting bit-line voltage, directly connecting the abstract idea of a stored '0' or '1' to a measurable analog quantity. This practice is essential for understanding how sense amplifiers can read the data stored in a cell. [@problem_id:1936150]", "problem": "In a simplified model of a NOR-structured flash memory array, the state of a memory cell is represented by its electrical resistance. An erased cell acts as a closed switch with a low \"on-resistance\" of $R_{on}$, while a programmed cell acts as an open switch with a high \"off-resistance\" of $R_{off}$.\n\nConsider a single bit line (BL) in such an array. The bit line is connected to a supply voltage $V_{dd}$ through a single pull-up resistor, $R_{pullup}$. Two memory cells, Cell 1 and Cell 2, are connected in parallel between this bit line and ground ($V_{ss} = 0 \\text{ V}$). To read the cells, their respective control lines are asserted, connecting them to the bit line.\n\nSuppose Cell 1 is erased and Cell 2 is programmed. Given the following parameters:\n- Supply Voltage, $V_{dd} = 2.5 \\text{ V}$\n- Pull-up Resistance, $R_{pullup} = 50 \\text{ k}\\Omega$\n- Cell On-Resistance, $R_{on} = 10 \\text{ k}\\Omega$\n- Cell Off-Resistance, $R_{off} = 5.0 \\text{ M}\\Omega$\n\nCalculate the steady-state voltage on the bit line, $V_{BL}$. Express your answer in Volts, rounded to three significant figures.", "solution": "The bit line is driven through a pull-up resistor with two cells to ground; with Cell 1 erased and Cell 2 programmed, the equivalent resistance to ground is the parallel combination of $R_{\\text{on}}$ and $R_{\\text{off}}$:\n$$\nR_{\\text{eq}}=\\left(\\frac{1}{R_{\\text{on}}}+\\frac{1}{R_{\\text{off}}}\\right)^{-1}=\\frac{R_{\\text{on}}R_{\\text{off}}}{R_{\\text{on}}+R_{\\text{off}}}.\n$$\nUsing the given values,\n$$\nR_{\\text{eq}}=\\frac{(10\\times 10^{3})(5.0\\times 10^{6})}{10\\times 10^{3}+5.0\\times 10^{6}}=\\frac{5.0\\times 10^{10}}{5.01\\times 10^{6}}=\\left(\\frac{5.0}{5.01}\\right)\\times 10^{4}\\approx 9.98004\\times 10^{3}.\n$$\nThe bit-line voltage is set by the voltage divider:\n$$\nV_{\\text{BL}}=V_{dd}\\frac{R_{\\text{eq}}}{R_{\\text{pullup}}+R_{\\text{eq}}}.\n$$\nSubstituting,\n$$\nV_{\\text{BL}}=2.5\\times \\frac{9.98004\\times 10^{3}}{5.0\\times 10^{4}+9.98004\\times 10^{3}}=2.5\\times \\frac{1}{6.01}\\approx 0.415973,\n$$\nwhich rounds to three significant figures as $0.416$.", "answer": "$$\\boxed{0.416}$$", "id": "1936150"}, {"introduction": "While NOR flash connects cells in parallel, the NAND architecture connects them in series, enabling higher storage density. This thought experiment uses a 'stuck-at-0' fault scenario to probe the unique behavior of a NAND string. Your task is to deduce the outcome of a read operation under this fault condition, which powerfully demonstrates why the entire series of cells must be conductive for a current to flow. This exercise highlights the fundamental operational difference between NAND and NOR flash architectures. [@problem_id:1936188]", "problem": "A Not-AND (NAND) flash memory array is constructed from strings of series-connected Floating-Gate Metal-Oxide-Semiconductor Field-Effect Transistors (MOSFETs), where each transistor serves as a memory cell. The state of a cell is determined by its threshold voltage, $V_{th}$. An erased cell, representing a logical '1', has a low threshold voltage $V_{th1}$. A programmed cell, representing a logical '0', has a high threshold voltage $V_{th0}$.\n\nA read operation on a specific cell within a string involves the following voltage applications:\n1.  The selected cell's control gate, connected to its word-line, receives a read voltage $V_{read}$.\n2.  All other unselected cells in the same string have their word-lines driven to a high pass voltage $V_{pass}$.\n3.  The bit-line connected to one end of the string is pre-charged to a positive voltage, and the source-line at the other end is held at 0V.\n\nThe logical value is determined by sensing the bit-line's voltage after a set time. If the string conducts current, the bit-line discharges, which is sensed as a logical '1'. If the string does not conduct, the bit-line remains charged, which is sensed as a logical '0'. The voltages are set such that $V_{th1} < 0 < V_{read} < V_{th0} < V_{pass}$.\n\nConsider a single NAND string composed of 16 cells, C0 through C15, connected to word-lines WL0 through WL15, respectively. A read operation is initiated for cell C9 (on WL9). However, a fault exists in the word-line driver circuitry for WL5, causing it to be \"stuck-at-0\", meaning the voltage on WL5 is permanently held at 0V. All other unselected word-lines (WL0-WL4, WL6-WL8, WL10-WL15) correctly receive the pass voltage $V_{pass}$, and the selected word-line WL9 correctly receives the read voltage $V_{read}$.\n\nGiven that the target cell C9 is in the erased state (logical '1') and the cell on the faulty word-line, C5, is in the programmed state (logical '0'), what is the logical value read by the sense amplifier?\n\nA. Logical '1', because the target cell C9 is erased and thus conductive.\n\nB. Logical '1', because all other cells in the string except C5 are conductive, creating a partial discharge that is interpreted as '1'.\n\nC. Logical '0', because the fault on WL5 prevents the target cell C9 from being properly biased, causing it to default to a '0' state reading.\n\nD. Logical '0', because the programmed cell C5 on the stuck-at-0 word-line is non-conductive, breaking the current path for the entire string.\n\nE. The result is indeterminate, as the stuck-at-0 fault creates a race condition in the sense amplifier.", "solution": "In a NAND string, the read current flows only if every series NMOS cell is turned on. For an NMOS cell, the conduction condition is approximately\n$$\nV_{gs} \\ge V_{th}.\n$$\nDuring a read:\n- The selected cell receives $V_{g} = V_{read}$ with $V_{th1} < 0 < V_{read} < V_{th0}$.\n- All unselected cells nominally receive $V_{g} = V_{pass}$ with $V_{pass} > V_{th0}$.\n- The bit-line is precharged to a positive voltage and the source-line is held at $0$.\n\nTherefore:\n1. For the selected cell C9 in the erased state, its threshold is $V_{th} = V_{th1}$. Since $V_{read} > V_{th1}$ by $V_{th1} < 0 < V_{read}$, the selected cell turns on.\n2. For each correctly biased unselected cell $i \\ne 5,9$, $V_{g} = V_{pass}$ and $V_{pass} > V_{th0} \\ge V_{th,i}$, so each such cell is on regardless of its data state.\n3. For the faulty word-line WL5, $V_{g} = 0$ permanently. The cell C5 is programmed, so $V_{th} = V_{th0}$. Thus its gate-source overdrive satisfies\n$$\nV_{gs} \\le 0 - V_{s} \\le 0 < V_{th0},\n$$\nhence C5 is off. Because the NAND string is a series path, a single off transistor blocks current through the entire string.\n\nSince the series current path is broken at C5, the bit-line cannot discharge and remains at its precharged level. By the read convention, an undischarged bit-line is sensed as a logical '0'. The correct reason is that the programmed cell C5 on the stuck-at-0 word-line is non-conductive and breaks the path, not that the selected cell is improperly biased.\n\nTherefore, the correct choice is D.", "answer": "$$\\boxed{D}$$", "id": "1936188"}, {"introduction": "Understanding the internal structure of a memory array is only half the story; we must also consider how it communicates with the outside world. This practice problem shifts focus to the dynamic interface between a flash memory chip and a microprocessor, governed by a strict set of timing rules. You will calculate the minimum time for a complete read cycle by navigating critical timing parameters like access times, setup requirements, and hold times. Solving this will give you a practical appreciation for what determines the real-world performance of a memory system. [@problem_id:1936145]", "problem": "A microprocessor is interfaced with a parallel NOR flash memory chip. To read a byte of data, the microprocessor's read machine cycle follows a specific sequence. A cycle begins at time $t=0$ when the microprocessor outputs a stable memory address. At a time $T_{assertion}$ after the address is stable, the microprocessor asserts both the Chip Enable ($\\overline{CE}$) and Output Enable ($\\overline{OE}$) signals of the memory chip by driving them low. The microprocessor latches the data at a later time $t_{latch}$. For a successful read, the data from the memory must be stable at the microprocessor's input pins for a setup time $T_{setup}$ before $t_{latch}$ and must remain stable for a hold time $T_{hold}$ after $t_{latch}$. The next read machine cycle can only begin after the memory chip has released the data bus, putting it into a high-impedance state.\n\nHere are the relevant timing parameters for the system:\n\n**Microprocessor and Interface Timing:**\n*   Delay for control signal assertion, $T_{assertion} = 15 \\text{ ns}$\n*   Data setup time requirement, $T_{setup} = 5 \\text{ ns}$\n*   Data hold time requirement, $T_{hold} = 2 \\text{ ns}$\n\n**Flash Memory Specifications:**\n*   Address Access Time, $t_{AA} = 70 \\text{ ns}$: Maximum time from a stable address until valid data output.\n*   Chip Enable Access Time, $t_{CE} = 70 \\text{ ns}$: Maximum time from $\\overline{CE}$ assertion until valid data output.\n*   Output Enable Access Time, $t_{OE} = 35 \\text{ ns}$: Maximum time from $\\overline{OE}$ assertion until valid data output.\n*   Output Disable Time, $t_{DF} = 25 \\text{ ns}$: Maximum time for the data output to become high-impedance after $\\overline{OE}$ is de-asserted.\n\nAssume the microprocessor de-asserts $\\overline{CE}$ and $\\overline{OE}$ simultaneously at the earliest possible moment that satisfies its own data hold time requirement. Calculate the minimum possible duration for one full read machine cycle, which is the time from one address becoming stable to the next.\n\nExpress your answer in nanoseconds (ns).", "solution": "Define the following absolute times within one read cycle:\n- Address becomes stable at $t=0$.\n- $\\overline{CE}$ and $\\overline{OE}$ are asserted at $t_{a}=T_{assertion}$.\n- Valid data appears at $t_{v}$, determined by memory access limits.\n- The processor latches data at $t_{l}$ and must meet its setup and hold requirements.\n- $\\overline{CE}$ and $\\overline{OE}$ are de-asserted at the earliest instant that still meets hold time.\n- The data bus is released (high-impedance) at $t_{Z}$, after the output disable time $t_{DF}$.\n- The next cycle can begin only when the bus is high-impedance, so the minimum cycle time is $T_{cycle}^{min}=t_{Z}$.\n\nData becomes valid no later than the maximum of the three access paths, each referenced to its own event:\n$$\nt_{v}=\\max\\left\\{t_{AA},\\; t_{a}+t_{CE},\\; t_{a}+t_{OE}\\right\\}.\n$$\nWith $t_{a}=T_{assertion}$, the earliest latch time that satisfies setup is\n$$\nt_{l}^{min}=t_{v}+T_{setup}.\n$$\nTo satisfy the hold requirement, the earliest de-assertion is\n$$\nt_{d}^{min}=t_{l}^{min}+T_{hold}.\n$$\nAfter de-assertion, the memory releases the bus within $t_{DF}$, so\n$$\nt_{Z}=t_{d}^{min}+t_{DF}.\n$$\nTherefore, the minimum read cycle time is\n$$\nT_{cycle}^{min}=t_{Z}.\n$$\n\nSubstitute the given numbers:\n- $t_{a}=T_{assertion}=15\\ \\text{ns}$.\n- $t_{v}=\\max\\{70,\\; 15+70,\\; 15+35\\}\\ \\text{ns}=\\max\\{70,\\; 85,\\; 50\\}\\ \\text{ns}=85\\ \\text{ns}$.\n- $t_{l}^{min}=85+5=90\\ \\text{ns}$.\n- $t_{d}^{min}=90+2=92\\ \\text{ns}$.\n- $t_{Z}=92+25=117\\ \\text{ns}$.\n\nHence,\n$$\nT_{cycle}^{min}=117\\ \\text{ns}.\n$$", "answer": "$$\\boxed{117}$$", "id": "1936145"}]}