{"hands_on_practices": [{"introduction": "Before integrating any memory component into a digital system, it is essential to understand its basic specifications. The total storage capacity, a direct function of its address and data lines, is the most fundamental of these parameters. This first exercise [@problem_id:1932928] provides a straightforward but crucial calculation that connects the chip's physical pinout to its ability to store information, a skill necessary for reading datasheets and selecting appropriate components for any design.", "problem": "A student in a digital systems course is undertaking a project to build a simple controller for a custom peripheral. For the project's firmware storage, the student selects a classic Erasable Programmable Read-Only Memory (EPROM) chip. According to the manufacturer's datasheet, the EPROM chip is organized with 14 address lines and 8 data lines. The student needs to determine the maximum amount of data the chip can hold to ensure it is sufficient for the controller's program.\n\nCalculate the total storage capacity of this EPROM chip. In digital systems and memory specifications, one kilobit (kb) is defined as 1024 bits. Express your final answer in units of kilobits.", "solution": "An EPROM with $n$ address lines can select $2^{n}$ unique addresses. With $n=14$, the number of addressable locations is\n$$\nN_{\\text{addr}}=2^{14}.\n$$\nWith $d$ data lines, each address outputs $d$ bits per location. Here $d=8$, so the total capacity in bits is\n$$\nB=N_{\\text{addr}}\\times d=2^{14}\\times 8 \\text{ bits}.\n$$\nUsing the definition $1$ kilobit $=1024$ bits and $1024=2^{10}$, the capacity in kilobits is\n$$\nK=\\frac{B}{1024}=\\frac{2^{14}\\times 8}{2^{10}}=2^{4}\\times 8=16\\times 8=128 \\text{ kilobits}.\n$$\nTherefore, the EPROM stores $128$ kilobits.", "answer": "$$\\boxed{128}$$", "id": "1932928"}, {"introduction": "Moving beyond the external specifications, our next practice delves into the unique physical nature of EPROM technology. Unlike modern memory, classic EPROMs are erased to a default state of all logical '1's with UV light, and programming is the process of selectively converting bits to '0's. Based on a hypothetical scenario, this exercise [@problem_id:1932883] challenges you to think about the crucial difference between the logical data you wish to store and the actual data you must supply to the programmer, reinforcing the importance of understanding the underlying physical mechanism.", "problem": "A digital systems engineer is tasked with patching the firmware of a legacy device that uses an 8-bit Erasable Programmable Read-Only Memory (EPROM) chip. The EPROM stores data in memory cells, where each cell is a special Metal-Oxide-Semiconductor Field-Effect Transistor (MOSFET) with a floating gate.\n\nBefore programming, the entire memory chip is exposed to ultraviolet light, which erases it. This erasing process removes any trapped electrical charge from the floating gates, setting every memory cell in the chip to a default state of logic '1'. To store data, a programming device is used. A cell is programmed by applying a high voltage, which injects and traps electrons in its floating gate. This trapped charge changes the cell's state from logic '1' to logic '0'.\n\nThe engineer needs to program a single 8-bit memory location to store the American Standard Code for Information Interchange (ASCII) representation of the character 'K'. The 8-bit ASCII code for 'K' is `0x4B`.\n\nHowever, the available EPROM programmer has a peculiar, non-standard interface logic. For each of the 8 data input lines (D7 down to D0), the programmer's internal circuit generates a high-voltage programming pulse if and only if the corresponding data input line is set to logic '1'. If a data input line is at logic '0', no pulse is generated for that bit, and the corresponding memory cell remains in its erased state.\n\nDetermine the 8-bit value that must be supplied to the programmer's data input lines (D7-D0) to correctly store the character 'K' in the EPROM. Provide your answer as a two-digit hexadecimal number (e.g., `F1`).", "solution": "Erasure sets every cell to logic $1$. The programmer generates a programming pulse iff the input bit is $1$, and a programming pulse changes the cell to logic $0$. Therefore, for each bit position $i$, the stored bit $S_{i}$ is related to the programmer input bit $I_{i}$ by\n$$\nS_{i}=\\neg I_{i}.\n$$\nTo store the character 'K', the desired stored byte is $S=0x4B$, whose 8-bit binary form is\n$$S = 0100\\,1011_2$$\nThus the required programmer input is the bitwise complement over 8 bits:\n$$I = \\neg S = 1011\\,0100_2 = \\text{0xB4}$$\nTherefore, the 8-bit value to supply on D7â€“D0 is $B4$.", "answer": "$$\\boxed{B4}$$", "id": "1932883"}, {"introduction": "EPROMs are not just for storing sequential programs or data; their structure makes them powerful tools for implementing complex combinational logic. By treating a logic function's inputs as an address and its output as the stored data, an EPROM can function as a universal \"lookup table\" (LUT), a concept fundamental to modern digital circuits like FPGAs. This final practice [@problem_id:1932927] challenges you to design a barrel shifter, a common digital building block, using this powerful paradigm, illustrating how memory can be configured to perform computation.", "problem": "An engineer is tasked with designing a 4-bit logical right barrel shifter using an Erasable Programmable Read-Only Memory (EPROM) chip. The shifter circuit takes two inputs: a 4-bit data word, denoted as $D = D_3D_2D_1D_0$ where $D_3$ is the most significant bit, and a 2-bit shift amount, denoted as $S = S_1S_0$. The circuit produces a single 4-bit output word, $Q = Q_3Q_2Q_1Q_0$.\n\nThe functionality is defined as a logical right shift of the input data $D$ by an amount specified by the integer value of $S$. For a logical right shift, any vacated bit positions on the most significant side are filled with zeros. For example, if the input data is $D = 1101_2$ and the shift amount is $S = 10_2$ (decimal 2), the output should be $Q = 0011_2$.\n\nTo implement this combinational logic function, the EPROM will be programmed such that its address inputs are connected to the circuit's inputs ($D$ and $S$), and its data outputs correspond to the circuit's output ($Q$). Determine the total number of address lines required for the EPROM and its total storage capacity.\n\nPresent your answer as a pair of integers in a row matrix: the first integer representing the total number of address lines, and the second representing the total storage capacity in bits.", "solution": "The EPROM is used as a combinational lookup table implementing the mapping from inputs $(D,S)$ to outputs $Q$. In a ROM-based realization:\n- Each distinct input combination corresponds to one addressable location.\n- The number of address lines equals the total number of input bits.\n- The total storage capacity in bits equals the number of addressable locations multiplied by the output word width in bits.\n\nThe input consists of the 4-bit data word $D=D_{3}D_{2}D_{1}D_{0}$ and the 2-bit shift amount $S=S_{1}S_{0}$, so the total number of input bits is $A = 4 + 2 = 6$.\nThus, the EPROM requires $6$ address lines.\n\nThe output word is $Q=Q_{3}Q_{2}Q_{1}Q_{0}$, which has width $W = 4 \\text{ bits}$.\nThe number of addressable locations is $2^{A} = 2^{6} = 64$.\nTherefore, the total storage capacity in bits is\n$$C = 2^{A} \\times W = 2^{6} \\times 4 = 64 \\times 4 = 256 \\text{ bits}.$$\nHence, the required EPROM has $6$ address lines and $256$ bits of total storage capacity.", "answer": "$$\\boxed{\\begin{pmatrix}6 & 256\\end{pmatrix}}$$", "id": "1932927"}]}