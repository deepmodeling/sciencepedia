{"hands_on_practices": [{"introduction": "This first practice problem demonstrates the most fundamental application of a Programmable Read-Only Memory (PROM): implementing a custom combinational logic function. By treating the PROM as a physical look-up table, you can directly map input conditions (addresses) to desired outputs (data). This exercise [@problem_id:1955523] will guide you through programming a PROM to function as a specific logic detector, a task that would otherwise require a network of individual logic gates.", "problem": "A digital system is being designed using a small Programmable Read-Only Memory (PROM). This PROM has a 3-bit address input, denoted as $A_2A_1A_0$ where $A_2$ is the most significant bit, and a single 1-bit data output, $D$. The PROM must be programmed to implement a specific logic function: the output $D$ must be logic '1' if and only if the 3-bit binary number representing the address contains exactly one '1'. For all other address inputs, the output $D$ must be logic '0'.\n\nThe entire contents of this 8x1 PROM can be represented by an 8-bit binary string, where the first bit corresponds to the data stored at address 0 (binary 000), the second bit to address 1 (binary 001), and so on, up to the last bit for address 7 (binary 111).\n\nWhich of the following options correctly represents the 8-bit data string that should be programmed into the PROM?\n\nA. 01111111\n\nB. 01101000\n\nC. 01101001\n\nD. 00010110\n\nE. 00110101", "solution": "The requirement is that the PROM output $D$ be logic $1$ if and only if the address bits contain exactly one $1$. Let the inputs be binary variables $A_{2},A_{1},A_{0} \\in \\{0,1\\}$. Define the sum $S = A_{2} + A_{1} + A_{0}$. Then the logic condition is:\n$$\nD = 1 \\;\\;\\text{iff}\\;\\; S = 1,\n$$\nand $D=0$ otherwise. Equivalently, in sum-of-products form,\n$$\nD = \\overline{A_{2}}\\,\\overline{A_{1}}\\,A_{0} \\;+\\; \\overline{A_{2}}\\,A_{1}\\,\\overline{A_{0}} \\;+\\; A_{2}\\,\\overline{A_{1}}\\,\\overline{A_{0}}.\n$$\n\nThe PROM stores one bit per address. The problem states the 8-bit string lists data in ascending address order from $000$ (address $0$) to $111$ (address $7$). Evaluate $S$ and thus $D$ for each address:\n\n- Address $0$ ($000$): $S=0 \\Rightarrow D=0$.\n- Address $1$ ($001$): $S=1 \\Rightarrow D=1$.\n- Address $2$ ($010$): $S=1 \\Rightarrow D=1$.\n- Address $3$ ($011$): $S=2 \\Rightarrow D=0$.\n- Address $4$ ($100$): $S=1 \\Rightarrow D=1$.\n- Address $5$ ($101$): $S=2 \\Rightarrow D=0$.\n- Address $6$ ($110$): $S=2 \\Rightarrow D=0$.\n- Address $7$ ($111$): $S=3 \\Rightarrow D=0$.\n\nThus the data bits from address $0$ through $7$ are $0,1,1,0,1,0,0,0$, which forms the 8-bit string $01101000$. Comparing with the options, this corresponds to option B.", "answer": "$$\\boxed{B}$$", "id": "1955523"}, {"introduction": "Building on the concept of a PROM as a look-up table, this exercise explores its use for performing arithmetic calculations, specifically modular arithmetic. You will determine not only the data to be stored but also the minimum required size of the PROM, a crucial skill in efficient digital design. This practice [@problem_id:1955500] reinforces the idea that any function with a finite, discrete domain can be implemented using memory.", "problem": "A digital system requires a combinational logic circuit that computes the value of a 3-bit unsigned binary number, $N$, modulo 3. This functionality is to be implemented using a single Programmable Read-Only Memory (PROM). The three bits of the input number, denoted as $B_2B_1B_0$ where $B_2$ is the most significant bit, are connected directly to the PROM's address lines. The data stored at each address location must be the unsigned binary representation of the result, $R = N \\pmod 3$.\n\nThe overall size of the PROM is described as $2^A \\times W$, where $A$ is the number of address lines and $W$ is the width of the data output word in bits. Both $A$ and $W$ should be chosen to be the minimum values required for this application.\n\nWhich of the following options correctly specifies the sequence of data words that must be stored in the PROM for addresses 0 through 7, respectively?\n\nA. `00, 01, 00, 01, 00, 01, 00, 01`\n\nB. `00, 01, 10, 11, 00, 01, 10, 11`\n\nC. `00, 01, 10, 00, 01, 10, 00, 01`\n\nD. `01, 10, 00, 01, 10, 00, 01, 00`\n\nE. `00, 01, 00, 10, 00, 01, 10, 01`", "solution": "Let the 3-bit unsigned input be $N = B_{2}2^{2} + B_{1}2^{1} + B_{0}$ with $B_{i} \\in \\{0,1\\}$ and $B_{2}$ the most significant bit. The PROM address lines are driven directly by $B_{2}B_{1}B_{0}$, so the address is $a=N$. Thus the number of addresses required is $2^{A}=2^{3}$, hence $A=3$.\n\nThe required output is $R=N \\bmod 3$. Since $R \\in \\{0,1,2\\}$, the minimum data width $W$ must satisfy $2^{W} \\geq 3$, so $W=2$. We store the 2-bit unsigned representation of $R$ at address $a=N$.\n\nCompute $R$ for $N=0$ through $N=7$:\n- $N=0 \\Rightarrow R=0 \\Rightarrow 00$\n- $N=1 \\Rightarrow R=1 \\Rightarrow 01$\n- $N=2 \\Rightarrow R=2 \\Rightarrow 10$\n- $N=3 \\Rightarrow R=0 \\Rightarrow 00$\n- $N=4 \\Rightarrow R=1 \\Rightarrow 01$\n- $N=5 \\Rightarrow R=2 \\Rightarrow 10$\n- $N=6 \\Rightarrow R=0 \\Rightarrow 00$\n- $N=7 \\Rightarrow R=1 \\Rightarrow 01$\n\nTherefore, the sequence for addresses $0$ through $7$ is $00, 01, 10, 00, 01, 10, 00, 01$, which corresponds to option C.", "answer": "$$\\boxed{C}$$", "id": "1955500"}, {"introduction": "This final problem addresses a practical reality of digital hardware: finite data representation. You will program a PROM to compute an arithmetic function where some results may exceed the capacity of the output bits, a situation known as overflow. This exercise [@problem_id:1955541] provides hands-on experience with how truncation is implicitly handled when using a fixed-width look-up table, and how this is mathematically equivalent to modular arithmetic.", "problem": "A digital system requires a component that can compute the square of a 3-bit unsigned integer. This is to be implemented using a Programmable Read-Only Memory (PROM) with 8 memory locations and a 4-bit data word size (an $8 \\times 4$ PROM). The 3-bit input number serves as the address for the PROM, and the 4-bit output data word is intended to be the result.\nThe value to be programmed at each memory address is the square of the address's decimal equivalent. If the calculated square requires more than 4 bits to represent (i.e., the value is 16 or greater), the stored value must be the result of truncating the full binary representation to its 4 least significant bits.\nTreating each of the eight 4-bit words stored in the PROM as an unsigned integer, what is the sum of these eight integer values?", "solution": "The 3-bit address $a$ ranges over the set $\\{0,1,2,3,4,5,6,7\\}$. At each address, the PROM stores the square of the address, truncated to the 4 least significant bits. Extracting the 4 least significant bits of an integer $x$ is equivalent to reducing $x$ modulo $16$, so the stored value at address $a$ is\n$$\nv(a)=a^{2}\\bmod 16.\n$$\nCompute $v(a)$ for each address:\n$$\n\\begin{aligned}\na=0:&\\quad 0^{2}=0\\;\\Rightarrow\\;v(0)=0,\\\\\na=1:&\\quad 1^{2}=1\\;\\Rightarrow\\;v(1)=1,\\\\\na=2:&\\quad 2^{2}=4\\;\\Rightarrow\\;v(2)=4,\\\\\na=3:&\\quad 3^{2}=9\\;\\Rightarrow\\;v(3)=9,\\\\\na=4:&\\quad 4^{2}=16\\equiv 0\\;(\\bmod 16)\\;\\Rightarrow\\;v(4)=0,\\\\\na=5:&\\quad 5^{2}=25\\equiv 9\\;(\\bmod 16)\\;\\Rightarrow\\;v(5)=9,\\\\\na=6:&\\quad 6^{2}=36\\equiv 4\\;(\\bmod 16)\\;\\Rightarrow\\;v(6)=4,\\\\\na=7:&\\quad 7^{2}=49\\equiv 1\\;(\\bmod 16)\\;\\Rightarrow\\;v(7)=1.\n\\end{aligned}\n$$\nTreating each 4-bit word as an unsigned integer, the required sum is\n$$\nS=\\sum_{a=0}^{7}v(a)=0+1+4+9+0+9+4+1=(0+0)+(1+1)+(4+4)+(9+9)=0+2+8+18=28.\n$$", "answer": "$$\\boxed{28}$$", "id": "1955541"}]}