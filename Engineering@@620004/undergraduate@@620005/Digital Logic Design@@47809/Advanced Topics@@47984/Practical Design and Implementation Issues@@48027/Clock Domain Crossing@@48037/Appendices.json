{"hands_on_practices": [{"introduction": "Before we can solve a problem, we must first understand its consequences. This exercise grounds the abstract concept of Clock Domain Crossing (CDC) in a tangible issue: data loss. By calculating the minimum number of data values lost when a fast source feeds a slow destination, you will gain a clear, quantitative appreciation for why simple, direct connections between asynchronous domains are inherently unreliable [@problem_id:1920375].", "problem": "In digital systems, interfacing components that operate on different clock signals requires careful analysis, a problem known as Clock Domain Crossing (CDC).\n\nConsider a scenario involving a high-speed digital sensor connected to a slower microcontroller (MCU). The sensor produces a new, unique data value on every rising edge of its clock, `clk_sensor`. The MCU samples this data on every rising edge of its own clock, `clk_mcu`.\n\nThe frequency of `clk_sensor` is exactly three times the frequency of `clk_mcu`. The phase relationship between `clk_sensor` and `clk_mcu` is arbitrary and may not be constant. Assume that the sampling process is ideal and instantaneous, occurring precisely at the clock edge. A data value is defined as \"lost\" if it is produced by the sensor but is never the value captured at a rising edge of `clk_mcu`.\n\nDetermine the minimum number of data values that are lost between any two consecutive sampling events by the MCU.", "solution": "Let the MCU clock period be $T_{\\text{m}}$ and the sensor clock period be $T_{\\text{s}}$. Given $f_{\\text{sensor}}=3 f_{\\text{mcu}}$, we have\n$$T_{\\text{m}}=3T_{\\text{s}}.$$\nConsider two consecutive MCU sampling instants at $t=0$ and $t=T_{\\text{m}}$. Let the sensor rising edges (data updates) occur at times\n$$t=t_{0}+kT_{\\text{s}}, \\quad k \\in \\mathbb{Z},$$\nfor some phase offset $t_{0} \\in [0, T_{\\text{s}})$.\n\nCount the number of sensor updates strictly in the open interval $(0, T_{\\text{m}})$:\n- If $t_{0}=0$ (sensor and MCU edges coincide at $t=0$), then sensor edges in $[0, T_{\\text{m}}]$ are at $0, T_{\\text{s}}, 2T_{\\text{s}}, 3T_{\\text{s}}$, so the open interval $(0, T_{\\text{m}})$ contains exactly $2$ updates (at $T_{\\text{s}}$ and $2T_{\\text{s}}$).\n- If $t_{0} \\in (0, T_{\\text{s}})$ (no coincidence at the endpoints), then the updates in $(0, T_{\\text{m}})$ are at $t_{0}, t_{0}+T_{\\text{s}}, t_{0}+2T_{\\text{s}}$, hence exactly $3$ updates.\n\nAt $t=T_{\\text{m}}$, the MCU captures the sensor value present at that instant, which is the value generated at\n$$t^{\\ast}=\\max\\{t \\leq T_{\\text{m}}: t=t_{0}+kT_{\\text{s}}\\}.$$\n- If there is no sensor edge at $t=T_{\\text{m}}$ (non-coincidence), then $t^{\\ast} \\in (0, T_{\\text{m}})$, so exactly one of the interior updates is captured and the remaining interior updates are lost. With $3$ interior updates, the number lost is $3-1=2$.\n- If there is a sensor edge at $t=T_{\\text{m}}$ (coincidence), then $t^{\\ast}=T_{\\text{m}}$, which is not in $(0, T_{\\text{m}})$. Thus none of the interior updates is captured; with $2$ interior updates, the number lost is $2$.\n\nTherefore, between any two consecutive MCU sampling events, the number of sensor data values that are lost is always $2$, and hence the minimum is $2$.", "answer": "$$\\boxed{2}$$", "id": "1920375"}, {"introduction": "A common and tempting mistake in digital design is to pass the output of combinational logic directly across a clock domain boundary because it seems efficient. This practice, however, introduces the risk of \"glitches\"—short, unintended pulses caused by unequal path delays within the logic gates. This exercise uses a seemingly simple logic function to demonstrate how such glitches are generated and why they pose a serious threat to the integrity of data being captured by a synchronizer in another clock domain [@problem_id:1920408].", "problem": "In a digital system, a component operating in a clock domain driven by `CLK_A` communicates with another component in an asynchronous clock domain driven by `CLK_B`. A single-bit signal `S`, which is the output of a register clocked by `CLK_A`, is used to generate a control signal `Y`. This signal `Y` is then passed to the `CLK_B` domain, where it serves as the input to a synchronizing D-type Flip-Flop (DFF).\n\nThe combinational logic that generates `Y` from `S` is defined by the Boolean expression `Y = S AND (NOT S)`. Physically, this is implemented with one standard NOT gate and one standard 2-input AND gate. The propagation delay of the NOT gate is `t_NOT = 2.0 ns`, and the propagation delay of the AND gate is `t_AND = 3.5 ns`. For this analysis, assume that wire delays and the DFF's clock-to-Q delay are negligible.\n\nInitially, the signal `S` is stable at logic `0`. At time `t = 0`, a rising edge of `CLK_A` causes the signal `S` to transition from `0` to `1`. The logically expected steady-state value of `Y` is always `0`. However, the differing propagation delays in the physical gates can create transient behavior.\n\nGiven this scenario, what is the primary and most direct risk associated with this design choice of feeding the combinational output `Y` across the clock domain boundary?\n\nA. The circuit will consume excessive static power because the output `Y` will be stuck at a logic `1` state.\n\nB. A short-lived glitch pulse on `Y` may be sampled by the `CLK_B` domain's synchronizer, causing an erroneous value to be captured.\n\nC. The logic `S AND (NOT S)` is logically redundant, and a synthesis tool would optimize it to a constant `0`, preventing the circuit from being physically realized.\n\nD. The output `Y` will oscillate continuously between `0` and `1` after the transition of `S`, making synchronization impossible.\n\nE. The transition of signal `S` will create a temporary electrical short-circuit within the AND gate, potentially damaging the device.", "solution": "Define the combinational function as $Y=S \\land \\neg S$. In Boolean algebra, this simplifies to $Y \\equiv 0$ for all stable $S$.\n\nHowever, with physical gates and unequal propagation delays, the time-domain behavior must be examined. Let the inverter have propagation delay $t_{\\text{NOT}}$ and the AND gate have propagation delay $t_{\\text{AND}}$. Assume wire delays and clock-to-$Q$ delay are negligible, and $S$ transitions from $0$ to $1$ at $t=0$.\n\n1) For $t<0$, $S=0$ and $\\neg S=1$. The inputs to the AND gate are $(0,1)$, so (after any settled delays) $Y=0$.\n\n2) At $t=0^{+}$, $S$ changes to $1$ immediately at the AND input, while the inverter output remains at $1$ until $t=t_{\\text{NOT}}$. Therefore, for the interval $0 \\le t < t_{\\text{NOT}}$, the AND inputs are $(1,1)$.\n\n3) Considering the AND gate propagation delay $t_{\\text{AND}}$, the AND output will reflect the $(1,1)$ input combination after a delay. Thus, under a transport-delay view, a potential high pulse at $Y$ would occur from $t=t_{\\text{AND}}$ (rise) to $t=t_{\\text{NOT}}+t_{\\text{AND}}$ (fall), yielding a pulse width of $t_{\\text{NOT}}$:\n$$\n\\Delta t_{\\text{glitch}} = t_{\\text{NOT}}.\n$$\nUnder an inertial-delay model, a pulse narrower than $t_{\\text{AND}}$ could be filtered, but process-voltage-temperature variation and differing paths can still produce a nonzero pulse at $Y$ in practice. Hence, a short-lived glitch on $Y$ is a realistic hazard.\n\n4) Because $Y$ is being transferred into an asynchronous clock domain driven by $\\mathrm{CLK}_{B}$ and enters a synchronizing DFF, any such short glitch may coincide with a sampling edge of $\\mathrm{CLK}_{B}$, causing the synchronizer to capture an erroneous logic $1$ (despite the intended steady-state of $Y \\equiv 0$). This is the primary and most direct risk of sending combinational logic across a clock domain boundary.\n\nTherefore, the correct choice is that a short-lived glitch on $Y$ may be sampled by the $\\mathrm{CLK}_{B}$ domain's synchronizer, causing an erroneous captured value.", "answer": "$$\\boxed{B}$$", "id": "1920408"}, {"introduction": "A CDC synchronizer might work correctly for most timing alignments but fail under a specific, rare phase relationship between the clocks. Merely running a single simulation is therefore insufficient to guarantee your design's reliability. This final problem shifts our focus from design to verification, challenging you to devise a strategy that systematically and exhaustively tests all possible timing alignments, which is the key to building confidence in any CDC solution [@problem_id:1920396].", "problem": "A digital design engineer is building a testbench to verify a pulse synchronizer. The synchronizer's purpose is to reliably transfer a single-cycle pulse from a source clock domain (`clk_src`) to a destination clock domain (`clk_dst`). The source clock is known to be faster than the destination clock. The input to the synchronizer is `pulse_in`, which is asserted high for exactly one cycle of `clk_src`. The expected output is `pulse_out`, which should be asserted high for exactly one cycle of `clk_dst` for each `pulse_in`.\n\nThe main verification challenge is to ensure that the synchronizer does not miss the pulse and does not generate multiple output pulses for a single input pulse, regardless of the timing relationship between the input pulse and the destination clock. The engineer is considering several simulation strategies to test the synchronizer's logical correctness.\n\nWhich of the following simulation strategies is most effective for systematically and exhaustively testing all possible timing alignments between the `pulse_in` and the sampling edge of `clk_dst` to uncover potential logical flaws in the synchronizer design?\n\nA. Run a simulation where `clk_src` and `clk_dst` are generated with the exact same phase, meaning their rising edges always coincide.\n\nB. Run a simulation using a harmonic clock relationship, such as setting the period of `clk_dst` to be exactly four times the period of `clk_src` (`T_dst = 4 \\times T_{src}`), with a fixed phase offset.\n\nC. Run a simulation where the clock periods are coprime integers (e.g., `T_{src} = 10` ns and `T_{dst} = 23` ns). This causes the relative phase between the clocks to \"walk\" through all possible alignments over a long simulation.\n\nD. Run a single, very long simulation with any two different clock frequencies. The randomness of modern simulators will ensure all cases are covered.\n\nE. Focus on hardware testing instead of simulation, as simulation cannot accurately model the metastable behavior that is the primary failure mode of synchronizers.", "solution": "Let the simulator time resolution be a fundamental unit $\\Delta$. Express the clock periods as integer multiples of $\\Delta$: $T_{src} = a \\Delta$ and $T_{dst} = b \\Delta$, where $a,b \\in \\mathbb{Z}_{>0}$.\n\nConsider the relative phase of the rising edge of $clk_{src}$ with respect to $clk_{dst}$ after $n$ source cycles. Denote this phase offset modulo $T_{dst}$ by\n$$\n\\phi_{n} \\equiv (n T_{src}) \\bmod T_{dst} = (n a \\Delta) \\bmod (b \\Delta) = \\left((n a) \\bmod b\\right)\\Delta.\n$$\nTherefore, the set of distinct phase alignments attainable in simulation is\n$$\n\\mathcal{S} = \\left\\{ \\left((n a) \\bmod b\\right)\\Delta : n \\in \\mathbb{Z}_{\\ge 0} \\right\\}.\n$$\nBy number theory, the cardinality of $\\mathcal{S}$ equals $b / \\gcd(a,b)$. In particular:\n- If $\\gcd(a,b)=1$ (i.e., $a$ and $b$ are coprime), then $|\\mathcal{S}| = b$, so the sequence $\\{\\phi_{n}\\}$ cycles through all $b$ discrete phase slots with resolution $\\Delta$; this exhaustively sweeps all possible alignments representable at the simulator’s time precision.\n- If $b = k a$ (harmonic relationship with fixed phase), then $\\gcd(a,b)=a$ and $|\\mathcal{S}|=b/\\gcd(a,b)=k$, so only $k$ distinct phase alignments are exercised, not exhaustive unless $k$ is specially chosen to match all possible discrete offsets (which it does not in general).\n- If the clocks are phase-aligned (same phase), then $\\phi_{n}=0$ for all $n$, so only one alignment is tested.\n- Choosing arbitrary different frequencies without ensuring $\\gcd(a,b)=1$ does not guarantee coverage of all discrete phase offsets; there is no randomness in the deterministic event scheduling of a digital simulator to fill the gaps.\n- While metastability is an analog phenomenon and not directly modeled in standard digital simulation, the question targets logical correctness (no missed or multiple pulses). Systematic phase coverage via coprime periods is precisely the objective, and simulation is appropriate for this.\n\nHence, selecting coprime integer periods relative to the simulation time resolution ensures that the relative phase “walks” through all possible alignments with period $b$, providing a systematic and exhaustive test of timing alignments. This corresponds to option C.", "answer": "$$\\boxed{C}$$", "id": "1920396"}]}