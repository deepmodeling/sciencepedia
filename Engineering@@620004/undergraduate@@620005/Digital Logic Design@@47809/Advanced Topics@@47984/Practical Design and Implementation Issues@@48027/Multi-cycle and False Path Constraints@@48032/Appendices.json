{"hands_on_practices": [{"introduction": "In static timing analysis, we learn that not all paths that exist in the physical structure of a circuit are relevant to its actual performance. This exercise introduces the critical concept of a \"logically false path,\" a path that can never be activated under any valid input combination. By analyzing the circuit's Boolean logic, you will learn to distinguish between structural paths and logically sensitizable paths to determine the true critical path delay of the circuit [@problem_id:1947998].", "problem": "A digital circuit is designed to implement a logic function with three inputs, A, B, and C, and a single output, Y. The circuit's structure is described by the following interconnected logic gates:\n\n- A 2-input AND gate, labeled G1, takes the primary inputs A and B.\n- A NOT gate, labeled G2, takes the primary input A.\n- A 3-input AND gate, labeled G3, takes the primary input C, the primary input A, and the output of gate G2 as its inputs.\n- A 2-input OR gate, labeled G4, takes the outputs of gates G1 and G3. The output of gate G4 serves as the final circuit output, Y.\n\nThe propagation delay for each type of gate has been characterized as follows:\n- NOT gate: 55 ps\n- 2-input AND gate: 82 ps\n- 3-input AND gate: 115 ps\n- 2-input OR gate: 93 ps\n\nThe 'critical path delay' of a circuit is defined as the maximum time required for a signal change at any input to propagate to the output along a logically sensitizable path. A path is logically sensitizable if conditions can exist that allow a signal transition to travel from the input to the output along that path. Assuming all primary inputs (A, B, and C) are available simultaneously at time $t=0$, calculate the true critical path delay of this circuit.\n\nExpress your final answer in picoseconds (ps). Round your final answer to three significant figures.", "solution": "The circuit comprises gates G1: a 2-input AND with inputs $A$ and $B$, G2: a NOT with input $A$, G3: a 3-input AND with inputs $C$, $A$, and $\\overline{A}$ (the output of G2), and G4: a 2-input OR that combines the outputs of G1 and G3 to produce $Y$.\n\nFirst, write the Boolean function implemented:\n$$\nY = (A \\cdot B) + \\big(C \\cdot A \\cdot \\overline{A}\\big).\n$$\nUsing the complementarity identity $A \\cdot \\overline{A} = 0$, the expression simplifies functionally to\n$$\nY = A \\cdot B.\n$$\nHowever, for timing, the physical gates G1 and G4 still form the data path from inputs to the output, and G3’s output is always $0$, which is the non-controlling value for the OR gate. Therefore, the path through G4 from G1 to $Y$ is logically sensitizable, while any path through G3 is not.\n\nTo determine sensitizable paths:\n- Path via G3 from $C$: For a 3-input AND to be sensitized to $C$, the other inputs must be $1$. That would require $A=1$ and $\\overline{A}=1$ simultaneously, which is impossible. Hence the $C \\rightarrow \\text{G3} \\rightarrow \\text{G4}$ path is not logically sensitizable.\n- Path via G3 from $A$ (either directly or through G2): For sensitization to $A$, the other inputs to G3 must be held at $1$, including $\\overline{A}=1$, which again conflicts with $A$ changing. Therefore, $A \\rightarrow \\text{G3} \\rightarrow \\text{G4}$ is not sensitizable. Any apparent transient due to unequal delays cannot produce a valid sensitizable path since $A$ and $\\overline{A}$ cannot both be $1$ under any static assignment, and with inertial delays a sub-gate-delay pulse will not propagate.\n- Thus, the only sensitizable paths to $Y$ are through G1 and G4:\n  - $A \\rightarrow \\text{G1} \\rightarrow \\text{G4} \\rightarrow Y$,\n  - $B \\rightarrow \\text{G1} \\rightarrow \\text{G4} \\rightarrow Y$.\n\nGate delays are given as: NOT $55$ ps, 2-input AND $82$ ps, 3-input AND $115$ ps, 2-input OR $93$ ps.\n\nCompute the delays of the sensitizable paths:\n- From $A$ (or $B$) through G1 and G4:\n$$\nt_{\\text{path}} = t_{\\text{AND2}} + t_{\\text{OR2}} = 82\\ \\text{ps} + 93\\ \\text{ps} = 175\\ \\text{ps}.\n$$\n\nSince paths through G3 are not logically sensitizable, they do not contribute to the critical path. Therefore, the true critical path delay is the maximum of the sensitizable path delays, which is $175$ ps. Rounded to three significant figures, this remains $175$.", "answer": "$$\\boxed{175}$$", "id": "1947998"}, {"introduction": "While long combinational delays can signal a timing violation, they are sometimes an intentional part of a design, especially for complex operations like those in a DSP. This practice explores \"multi-cycle paths\" (MCPs), where a path is architecturally given more than one clock cycle to compute its result. Your task is to apply this concept by selecting the correct SDC (Synopsys Design Constraints) command, bridging the gap between design intent and the instructions given to timing analysis tools [@problem_id:1948033].", "problem": "In the design of a custom Digital Signal Processor (DSP), a critical datapath section involves a large 64-bit combinational barrel shifter. This shifter is instantiated in the design with the hierarchical name `U_BARREL_SHIFTER`. The shifter takes its input from a bank of flip-flops named `data_src_reg[*]` and its output is captured by another bank of flip-flops named `data_dest_reg[*]`. Both register banks are clocked by the same system clock, `sys_clk`.\n\nThe target clock period for `sys_clk` is 2.5 nanoseconds. Synthesis and place-and-route results indicate that the maximum propagation delay for the combinational logic path through `U_BARREL_SHIFTER` (i.e., from the clock-to-Q delay of `data_src_reg[*]` to the D-pin of `data_dest_reg[*]`) is 3.5 nanoseconds.\n\nTo accommodate this long delay without reducing the clock frequency, the control logic of the DSP is specifically designed to handle this path as a two-cycle operation. When a shift operation is initiated, the enable signal for the destination register `data_dest_reg` is asserted two clock cycles after the data is launched from `data_src_reg`.\n\nA designer must now provide a timing exception to the Static Timing Analysis (STA) tool to reflect this architectural intent. Which of the following Synopsys Design Constraints (SDC) commands correctly instructs the STA tool to relax the *setup timing check* for this specific path from the default single-cycle requirement to the intended two-cycle requirement?\n\nA. `set_multicycle_path 2 -setup -from [get_cells data_src_reg[*]] -to [get_cells data_dest_reg[*]]`\n\nB. `set_multicycle_path 1 -hold -from [get_cells data_src_reg[*]] -to [get_cells data_dest_reg[*]]`\n\nC. `set_false_path -from [get_cells data_src_reg[*]] -to [get_cells data_dest_reg[*]]`\n\nD. `set_multicycle_path 1 -setup -from [get_cells data_src_reg[*]] -to [get_cells data_dest_reg[*]]`\n\nE. `set_max_delay 5.0 -from [get_cells data_src_reg[*]] -to [get_cells data_dest_reg[*]]`", "solution": "The path is synchronous, from `data_src_reg[*]` (launch) to `data_dest_reg[*]` (capture), both clocked by `sys_clk` with period $T=2.5$ ns. In default single-cycle STA, the setup requirement is that data launched at one active edge must arrive and be stable by the next active edge, i.e., the required time is $T$. The given maximum data path delay (including clock-to-Q through the combinational barrel shifter to the destination D-pin) is $3.5$ ns. Under single-cycle timing, this violates setup because $3.5 > T = 2.5$.\n\nArchitecturally, the operation is designed to be two cycles: the destination register enable is asserted two cycles after launch. For a two-cycle path, the setup check required time shifts to $2T$, which here is $2 \\times 2.5 = 5.0$ ns, so a $3.5$ ns data path meets timing. To inform STA that the setup check should be evaluated over two cycles for this specific path, the correct constraint is a multicycle path on setup with factor $2$ between the specified startpoints and endpoints:\n$$\n\\text{set\\_multicycle\\_path } 2 \\; \\text{-setup -from [get\\_cells data\\_src\\_reg[*]] -to [get\\_cells data\\_dest\\_reg[*]]}.\n$$\nThis directly relaxes the setup timing check from one cycle to two cycles for the specified path, matching the architectural intent.\n\nAssessment of options:\n- A applies the correct multicycle setup of $2$ cycles for the path; this is the intended way to relax the setup requirement.\n- B changes only hold to $1$, which is the default and does not relax setup; it does not address the setup requirement.\n- C declares the path false, removing both setup and hold checks, which is incorrect because the path is functionally required, just multicycle.\n- D sets setup multicycle to $1$, which is the default single-cycle and does not relax anything.\n- E sets a numeric max delay of $5.0$ ns. While $5.0=2T$ here, this is not the canonical way to model synchronous multicycle behavior and does not capture the clock-edge relationship or associated hold adjustment; thus it is not the correct answer to “relax the setup timing check to two cycles.”\n\nTherefore, the correct choice is A. (Note: in practice, one would also pair this with a hold multicycle of $N-1=1$ using a separate command to maintain proper hold checking, but the question asks specifically about relaxing the setup check.)", "answer": "$$\\boxed{A}$$", "id": "1948033"}, {"introduction": "Advanced digital systems often feature datapaths with variable latency, where the computation time changes based on the input data or operation mode. Constraining these paths requires a robust strategy that ensures timing is met for the longest possible latency without creating artificial violations on shorter paths. This problem challenges you to devise the correct and complete set of constraints for a variable-latency datapath, mastering the crucial interplay between setup and hold exceptions in a multi-cycle environment [@problem_id:1948011].", "problem": "A digital signal processing core contains a specific datapath designed to perform a variable-latency computation. The datapath starts at a bank of registers, `D_reg[*]`, and ends at a results register bank, `Z_reg[*]`. Both register banks are clocked by the same system clock, `clk`, which has a period of 10 ns. A control Finite State Machine (FSM), also clocked by `clk`, initiates the computation and enables the `Z_reg` registers to capture the result at the correct clock cycle.\n\nBased on an input mode bit, the combinational logic between `D_reg` and `Z_reg` has two distinct behaviors:\n1.  **Short Path**: If the mode bit is 0, the computation takes 2 clock cycles. The combinational logic delay for this path is 15 ns. The FSM enables `Z_reg` to capture the result at the end of the 2nd cycle.\n2.  **Long Path**: If the mode bit is 1, the computation is more complex and takes 4 clock cycles. The combinational logic delay for this path is 35 ns. The FSM enables `Z_reg` to capture the result at the end of the 4th cycle.\n\nThe design must be constrained for Static Timing Analysis (STA) using Synopsys Design Constraints (SDC). The goal is to create a single, robust set of constraints for the path from `D_reg[*]` to `Z_reg[*]` that correctly reflects the circuit's multi-cycle nature, covers the worst-case latency, and avoids inducing incorrect hold time violations, which can occur with improper multi-cycle path definitions.\n\nGiven this scenario, which of the following sets of SDC commands correctly and robustly constrains the datapath from `D_reg[*]` to `Z_reg[*]`?\n\nA.\n```sdc\nset_multicycle_path 4 -setup -from [get_cells D_reg[*]] -to [get_cells Z_reg[*]]\n```\n\nB.\n```sdc\nset_multicycle_path 4 -setup -from [get_cells D_reg[*]] -to [get_cells Z_reg[*]]\nset_multicycle_path 4 -hold -from [get_cells D_reg[*]] -to [get_cells Z_reg[*]]\n```\n\nC.\n```sdc\nset_multicycle_path 4 -setup -from [get_cells D_reg[*]] -to [get_cells Z_reg[*]]\nset_multicycle_path 3 -hold -from [get_cells D_reg[*]] -to [get_cells Z_reg[*]]\n```\n\nD.\n```sdc\nset_false_path -from [get_cells D_reg[*]] -to [get_cells Z_reg[*]]\n```\n\nE.\n```sdc\nset_multicycle_path 2 -setup -from [get_cells D_reg[*]] -to [get_cells Z_reg[*]]\nset_multicycle_path 1 -hold -from [get_cells D_reg[*]] -to [get_cells Z_reg[*]]\n```", "solution": "Let the system clock period be $T$, the maximum number of clock cycles permitted by the controller for the datapath be $N_{\\max}=4$, and the datapath delays in the two modes be $D_{\\text{short}}$ (2-cycle mode) and $D_{\\text{long}}$ (4-cycle mode). The STA setup check for a multi-cycle path constrained to $N$ cycles is of the form\n$$\nt_{\\text{clk\\_q}} + D \\leq N T - t_{\\text{setup}},\n$$\nso to cover the worst-case latency robustly with a single constraint, the setup multicycle must use $N=N_{\\max}=4$. This ensures $D_{\\text{long}} \\leq 4T - (t_{\\text{setup}}+t_{\\text{clk\\_q}})$ can be met when the FSM enables capture on the fourth edge, and it also trivially covers the 2-cycle mode because enabling capture earlier is controlled functionally by the FSM rather than by STA.\n\nHowever, applying only a `-setup 4` multicycle shifts the capture edge for setup to $N T$ and, by default, shifts the hold check to the edge immediately preceding that capture edge, i.e., to $(N-1)T$. This default behavior produces an overly stringent and often incorrect hold requirement on fast paths, because it effectively requires the launched data not to arrive before $(N-1)T$ after launch. To avoid creating artificial hold violations and to restore the hold check to the original same-edge relationship, one must also specify a hold multicycle of $N-1$. In SDC form, the correct pair for an $N$-cycle path is:\n- `-setup N` to move the setup check to the $N$-th edge.\n- `-hold (N-1)` to keep the hold check aligned with the original same-edge hold requirement.\n\nEvaluate the options:\n- A uses only `-setup 4` and omits the corresponding `-hold` exception; this induces incorrect hold checks.\n- B uses `-hold 4`, which misaligns the hold check and can mask true hold problems or create incorrect constraints.\n- C uses `-setup 4` and `-hold 3`, which is the standard, correct pairing for a 4-cycle multicycle path.\n- D declares the path false, which disables both setup and hold checks and is incorrect for a real, timed datapath.\n- E constrains the path to 2 cycles; this does not cover the 4-cycle mode and is therefore incorrect.\n\nTherefore, the correct and robust SDC is the pair with `-setup 4` and `-hold 3`, which corresponds to option C.", "answer": "$$\\boxed{C}$$", "id": "1948011"}]}