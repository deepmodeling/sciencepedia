{"hands_on_practices": [{"introduction": "Before we can analyze the complexities of pipeline hazards and performance trade-offs, we must first build a solid mental model of how instructions flow through a pipeline. This foundational exercise asks you to trace instructions through a simple, ideal pipeline, cycle by cycle. By determining which instruction occupies a specific stage at a given time, you will develop the crucial ability to visualize the parallel execution of instructions, a skill essential for diagnosing more complex issues [@problem_id:1952279].", "problem": "A certain processor implements a four-stage instruction pipeline to enhance performance. The stages are, in sequential order: 1. Instruction Fetch (IF), 2. Instruction Decode (ID), 3. Execute (EX), and 4. Write-Back (WB). Each stage requires exactly one clock cycle to complete its operation. A program consisting of a sequence of 7 instructions, indexed as I1, I2, I3, I4, I5, I6, and I7, is to be run on this processor. The pipeline is initially empty, and a new instruction enters the pipeline at the beginning of each clock cycle. Assuming there are no pipeline stalls, flushes, or data hazards of any kind, determine the index $n$ of the instruction $I_n$ that is occupying the Execute (EX) stage during the 5th clock cycle.", "solution": "A four-stage pipeline with stages IF, ID, EX, WB, each taking one clock cycle, advances each instruction by one stage per cycle under ideal conditions. If the pipeline is initially empty and instruction $I_{1}$ enters at the beginning of clock cycle $t=1$, then instruction $I_{n}$ is in:\n- IF at clock $t = n$,\n- ID at clock $t = n + 1$,\n- EX at clock $t = n + 2$,\n- WB at clock $t = n + 3$.\n\nTherefore, the instruction occupying the EX stage at clock $t$ satisfies:\n$$\nt = n + 2 \\quad \\Rightarrow \\quad n = t - 2.\n$$\nFor the $5$th clock cycle, set $t=5$ to obtain:\n$$\nn = 5 - 2 = 3.\n$$\nThus, $I_{3}$ is in the EX stage during the $5$th clock cycle.", "answer": "$$\\boxed{3}$$", "id": "1952279"}, {"introduction": "In an ideal world, a pipelined processor achieves a throughput of one instruction per clock cycle, corresponding to a Cycles Per Instruction ($\\text{CPI}$) of 1. However, real-world programs contain dependencies that force the pipeline to stall, degrading performance. This practice moves from simple visualization to quantitative analysis by asking you to calculate the effective $\\text{CPI}$ in the presence of uniform stalls, introducing a key metric for evaluating processor performance [@problem_id:1952280].", "problem": "A hypothetical simple processor, named \"Comet-1,\" features a 4-stage instruction pipeline (Instruction Fetch, Decode, Execute, Write-back) and operates with a clock frequency of 1.0 GHz. Under ideal conditions, where the pipeline is always full and there are no hazards, the processor can complete one instruction every clock cycle.\n\nDuring the execution of a specific benchmark program, it is observed that data dependencies cause frequent pipeline stalls. A detailed analysis reveals that for every group of four instructions that enter the pipeline, a data hazard consistently occurs that forces the pipeline to stall for exactly one clock cycle.\n\nAssuming this pattern of stalls is uniform throughout the entire execution of the benchmark, calculate the new effective Cycles Per Instruction (CPI) for the Comet-1 processor. Express your answer as a single real number rounded to three significant figures.", "solution": "The ideal steady-state throughput of a fully pipelined 4-stage processor with no hazards is one instruction per clock cycle, so the ideal cycles per instruction is\n$$\\text{CPI}_{\\text{ideal}} = 1.$$\nGiven the observed pattern, for every group of four instructions, exactly one pipeline stall of one clock cycle occurs. Therefore, over any block of four instructions, the total cycles are\n$$N_{\\text{cycles}} = 4 + 1 = 5.$$\nBy definition,\n$$\\text{CPI} = \\frac{N_{\\text{cycles}}}{N_{\\text{instructions}}}.$$\nApplying this to the 4-instruction block,\n$$\\text{CPI}_{\\text{effective}} = \\frac{5}{4} = 1 + \\frac{1}{4} = 1.25.$$\nThe clock frequency is not required for computing CPI. Rounded to three significant figures, the effective CPI is $1.25$.", "answer": "$$\\boxed{1.25}$$", "id": "1952280"}, {"introduction": "Designing a high-performance processor involves navigating complex engineering trade-offs. Deeper pipelining can increase clock frequency but often magnifies the performance penalty of hazards like branch mispredictions. This culminating exercise places you in the role of a CPU designer, tasked with quantitatively comparing two different pipeline architectures to determine which offers better overall performance for a given workload, illustrating the real-world balancing act between clock speed and pipeline efficiency [@problem_id:1952292].", "problem": "A CPU design team is evaluating two different pipelined architectures for a new embedded processor. The goal is to determine which design offers better performance for a specific target workload.\n\nThe first option, Architecture-5 (A5), is a classic 5-stage pipeline. The second option, Architecture-6 (A6), is a more deeply pipelined 6-stage design. The increased number of stages in A6 allows for a simpler logic design in each stage, which enables a higher clock frequency. Specifically, the clock period of the A6 architecture is 10.0% shorter than that of the A5 architecture.\n\nThe performance cost of a deeper pipeline is an increased penalty for control hazards. In the A5 design, a branch misprediction is detected and handled, incurring a penalty of 2 stall cycles. In the A6 design, due to the additional pipeline stage, the same misprediction incurs a penalty of 3 stall cycles.\n\nAnalysis of a representative benchmark program reveals that 20.0% of the instructions executed are branch instructions. The dynamic branch predictor used in both architectures has an average misprediction rate of 15.0% for this benchmark. Assume that stalls from branch mispredictions are the only source of performance loss and that the ideal pipeline has a throughput of one instruction per cycle.\n\nCalculate the ratio of the total execution time of the 6-stage pipeline (A6) to the total execution time of the 5-stage pipeline (A5) when running this benchmark. Provide your answer as a numerical value rounded to three significant figures.", "solution": "Let the number of dynamic instructions be $N$. The ideal base CPI is $1$ (one instruction per cycle). Branch mispredictions are the only stalls.\n\nLet $f_{b}$ be the fraction of branch instructions and $p_{m}$ the misprediction rate. Then the fraction of instructions that are mispredicted branches is $f_{b}p_{m}$. Each misprediction adds a penalty of $P$ stall cycles, so the CPI becomes\n$$\n\\text{CPI} = 1 + f_{b}p_{m}P.\n$$\nFor A5, $P_{5}=2$, and for A6, $P_{6}=3$. Given $f_{b}=0.2$ and $p_{m}=0.15$, we have $f_{b}p_{m}=0.03$. Thus,\n$$\n\\text{CPI}_{5}=1+0.03\\cdot 2=1.06,\\qquad \\text{CPI}_{6}=1+0.03\\cdot 3=1.09.\n$$\nLet the A5 clock period be $T_{5}$. The A6 clock period is $T_{6}=0.9\\,T_{5}$. The total execution time is $T = N \\cdot \\text{CPI} \\cdot T_{\\text{clk}}$, so the ratio of execution times is\n$$\nR=\\frac{T_{6}}{T_{5}}=\\frac{N\\cdot \\text{CPI}_{6}\\cdot T_{6}}{N\\cdot \\text{CPI}_{5}\\cdot T_{5}}=0.9\\cdot \\frac{1.09}{1.06}=\\frac{9}{10}\\cdot \\frac{109}{106}=\\frac{981}{1060}\\approx 0.925471698.\n$$\nRounded to three significant figures, the ratio is $0.925$.", "answer": "$$\\boxed{0.925}$$", "id": "1952292"}]}