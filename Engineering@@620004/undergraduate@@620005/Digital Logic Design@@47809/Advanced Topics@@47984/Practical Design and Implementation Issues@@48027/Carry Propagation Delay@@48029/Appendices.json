{"hands_on_practices": [{"introduction": "To truly grasp carry propagation delay, we must start from the fundamental building blocks: the logic gates themselves. This exercise invites you to perform a detailed timing analysis of a ripple-carry adder at the gate level [@problem_id:1917929]. By calculating the propagation delay path by path, you will see firsthand how the sequential dependency of the carry signal is a direct consequence of the physical delays of individual AND, OR, and XOR gates, building a solid foundation for understanding more complex adder architectures.", "problem": "A specialized 8-bit digital circuit is designed to perform a specific operation: it takes an 8-bit binary number $A = A_7A_6...A_0$ as input and calculates the sum of $A$ and its own two's complement. The circuit is implemented using an 8-bit ripple-carry adder, which is constructed from 8 identical full-adder (FA) modules, one for each bit position.\n\nThe two's complement operation on $A$ is achieved by bitwise inverting $A$ to get $\\sim A$, and then adding 1. In the ripple-carry adder, this is implemented by feeding the bits of $A$ to the first set of inputs, the bits of $\\sim A$ to the second set of inputs, and setting the initial carry-in to the least significant bit (LSB) stage to 1.\n\nEach FA module is built from elementary logic gates. The logic for the sum bit $S_i$ and the carry-out bit $C_{out,i}$ at stage $i$ is given by the standard expressions:\n$$S_i = A_i \\oplus B_i \\oplus C_{in,i}$$\n$$C_{out,i} = (A_i \\cdot B_i) + (C_{in,i} \\cdot (A_i \\oplus B_i))$$\nwhere $A_i$ and $B_i$ are the data inputs and $C_{in,i}$ is the carry-in to stage $i$.\n\nThe propagation delays for the fundamental logic gates used are given as:\n- NOT gate: `t_NOT = 0.50` ns\n- 2-input AND gate: `t_AND = 1.00` ns\n- 2-input OR gate: `t_OR = 1.10` ns\n- 2-input XOR gate: `t_XOR = 1.50` ns\n\nAt time $t = 0$, the 8-bit input $A$ becomes stable. Assume the initial carry-in signal required for the operation is also available and stable at $t = 0$.\n\nCalculate the total time required for the entire operation to complete, which is the time until all 9 output signals (the 8 sum bits $S_7$ through $S_0$, and the final carry-out from the most significant bit stage) are stable. Express your answer in nanoseconds, rounded to three significant figures.", "solution": "The circuit computes $A+\\left(\\sim A\\right)+1$, where $\\sim A$ is the bitwise inversion of $A$. For each bit $i$, take $B_{i}=\\overline{A_{i}}$, so the full-adder inputs are $(A_{i},B_{i},C_{\\text{in},i})$ with $C_{\\text{in},0}=1$. The full-adder logic is\n$$\nS_{i}=A_{i}\\oplus B_{i}\\oplus C_{\\text{in},i},\\qquad\nC_{\\text{out},i}=(A_{i}\\cdot B_{i})+\\left(C_{\\text{in},i}\\cdot (A_{i}\\oplus B_{i})\\right).\n$$\nSince $B_{i}=\\overline{A_{i}}$, we have the identities $A_{i}\\oplus B_{i}=1$ and $A_{i}\\cdot B_{i}=0$. Therefore functionally $S_{i}=1\\oplus C_{\\text{in},i}=\\overline{C_{\\text{in},i}}$ and $C_{\\text{out},i}=C_{\\text{in},i}$. However, the implemented gates still incur delays, so we compute the propagation times explicitly.\n\nLet the gate delays be $t_{\\text{NOT}}=0.50$ ns, $t_{\\text{AND}}=1.00$ ns, $t_{\\text{OR}}=1.10$ ns, $t_{\\text{XOR}}=1.50$ ns. Inputs $A_{i}$ and $C_{\\text{in},0}$ are stable at $t=0$.\n\nDefine the intermediate signals:\n- $B_{i}=\\overline{A_{i}}$ is ready at\n$$\nt_{B}=t_{\\text{NOT}}.\n$$\n- $X_{i}=A_{i}\\oplus B_{i}$ is ready at\n$$\nt_{X}=\\max(0,t_{B})+t_{\\text{XOR}}=t_{\\text{NOT}}+t_{\\text{XOR}}.\n$$\n- $G_{i}=A_{i}\\cdot B_{i}$ is ready at\n$$\nt_{G}=\\max(0,t_{B})+t_{\\text{AND}}=t_{\\text{NOT}}+t_{\\text{AND}}.\n$$\nFor the carry path at stage $i$:\n- $T_{i}=C_{\\text{in},i}\\cdot X_{i}$ is ready at\n$$\nt_{T,i}=\\max(t_{C\\text{in},i},t_{X})+t_{\\text{AND}}.\n$$\n- $C_{\\text{out},i}=G_{i}+T_{i}$ is ready at\n$$\nt_{C\\text{out},i}=\\max(t_{G},t_{T,i})+t_{\\text{OR}}.\n$$\n\nAt $i=0$, $t_{C\\text{in},0}=0$, so\n$$\nt_{X}=t_{\\text{NOT}}+t_{\\text{XOR}},\\quad\nt_{T,0}=\\max(0,t_{X})+t_{\\text{AND}}=t_{X}+t_{\\text{AND}},\\quad\nt_{C\\text{out},0}=\\max(t_{G},t_{T,0})+t_{\\text{OR}}=t_{T,0}+t_{\\text{OR}}.\n$$\nThus\n$$\nt_{C\\text{out},0}=(t_{\\text{NOT}}+t_{\\text{XOR}})+t_{\\text{AND}}+t_{\\text{OR}}.\n$$\nFor $i\\geq 1$, $t_{C\\text{in},i}=t_{C\\text{out},i-1}$. Since $t_{C\\text{out},0}>t_{X}$, we have $\\max(t_{C\\text{in},i},t_{X})=t_{C\\text{in},i}$, hence\n$$\nt_{T,i}=t_{C\\text{in},i}+t_{\\text{AND}},\\qquad\nt_{C\\text{out},i}=t_{T,i}+t_{\\text{OR}}=t_{C\\text{in},i}+(t_{\\text{AND}}+t_{\\text{OR}}),\n$$\nwhich gives the recurrence\n$$\nt_{C\\text{out},i}=t_{C\\text{out},i-1}+(t_{\\text{AND}}+t_{\\text{OR}}),\\quad i\\geq 1.\n$$\n\nFor the sum path at stage $i$:\n$$\nt_{S,i}=\\max(t_{X},t_{C\\text{in},i})+t_{\\text{XOR}}.\n$$\nThus $t_{S,0}=t_{X}+t_{\\text{XOR}}$, and for $i\\geq 1$, since $t_{C\\text{in},i}>t_{X}$,\n$$\nt_{S,i}=t_{C\\text{in},i}+t_{\\text{XOR}}=t_{C\\text{out},i-1}+t_{\\text{XOR}}.\n$$\n\nNow substitute numerical values:\n$$\nt_{X}=0.50+1.50=2.00\\ \\text{ns},\\quad\nt_{G}=0.50+1.00=1.50\\ \\text{ns},\\quad\nt_{\\text{AND}}+t_{\\text{OR}}=1.00+1.10=2.10\\ \\text{ns}.\n$$\nTherefore\n$$\nt_{C\\text{out},0}=(0.50+1.50)+1.00+1.10=4.10\\ \\text{ns},\n$$\nand for $i\\geq 1$,\n$$\nt_{C\\text{out},i}=t_{C\\text{out},i-1}+2.10\\ \\text{ns}.\n$$\nThus, after 7 further stages,\n$$\nt_{C\\text{out},7}=t_{C\\text{out},0}+7\\times 2.10=4.10+14.70=18.80\\ \\text{ns}.\n$$\nFor the sums,\n$$\nt_{S,0}=t_{X}+t_{\\text{XOR}}=2.00+1.50=3.50\\ \\text{ns},\n$$\nand for $i\\geq 1$,\n$$\nt_{S,i}=t_{C\\text{out},i-1}+t_{\\text{XOR}}.\n$$\nIn particular,\n$$\nt_{S,7}=t_{C\\text{out},6}+1.50=(4.10+6\\times 2.10)+1.50=16.70+1.50=18.20\\ \\text{ns}.\n$$\n\nThe latest of the nine outputs is the final carry-out from the most significant stage at $18.80$ ns. Therefore, the total time until all outputs are stable is $18.8$ ns to three significant figures.", "answer": "$$\\boxed{18.8}$$", "id": "1917929"}, {"introduction": "Once we understand how delay accumulates, a critical skill for any digital designer is to identify the conditions that trigger the worst-case performance. This practice challenges you to think conceptually about the carry propagation mechanism in a combined adder-subtractor unit [@problem_id:1917943]. Rather than just calculating a delay value, you will determine the specific input operands that force a carry signal to ripple through every single stage, thereby revealing the circuit's maximum operational delay.", "problem": "A 12-bit digital arithmetic unit is designed to perform both addition and subtraction on two unsigned 12-bit operands, $A$ and $B$. The core of the unit is a 12-bit Ripple-Carry Adder (RCA). The operation is governed by a single control signal, `SUB`.\n\nThe circuit is implemented as follows:\n- When `SUB = 0`, the unit performs addition, computing $S = A + B$.\n- When `SUB = 1`, the unit performs subtraction, computing $S = A - B$ using the 2's complement method.\n\nTo achieve this dual functionality, a layer of logic gates modifies the inputs to the RCA. The two 12-bit inputs to the RCA are $X$ and $Y$, and the initial carry-in is $C_{in}$. These are determined by $A$, $B$, and `SUB` as follows:\n- For each bit $i$ from 0 to 11, the RCA input bit $Y_i$ is given by $Y_i = B_i \\oplus \\text{SUB}$.\n- The other RCA input is simply $X=A$.\n- The initial carry-in to the RCA is $C_{in} = \\text{SUB}$.\n\nThe total propagation delay of the circuit is determined by the longest signal path. In an RCA, the worst-case delay occurs when a carry signal must propagate through every full-adder stage.\n\nWhich of the following combinations of the control signal `SUB` and 12-bit operands $A$ and $B$ (given in hexadecimal) will cause the circuit to exhibit its maximum possible propagation delay? Select all valid options.\n\nA. `SUB = 0`, `A = 0x000`, `B = 0xFFF`\n\nB. `SUB = 1`, `A = 0x555`, `B = 0xAAA`\n\nC. `SUB = 1`, `A = 0xFFF`, `B = 0xFFF`\n\nD. `SUB = 1`, `A = 0x000`, `B = 0x001`\n\nE. `SUB = 1`, `A = 0x000`, `B = 0x000`", "solution": "The 12-bit unit implements $S = A + B$ when $\\text{SUB} = 0$ and $S = A + \\overline{B} + 1$ when $\\text{SUB} = 1$, by feeding the ripple-carry adder (RCA) with $X = A$, $Y_{i} = B_{i} \\oplus \\text{SUB}$, and $C_{in} = \\text{SUB}$.\n\nFor each full-adder stage $i$, define the propagate and generate signals:\n$$P_{i} = X_{i} \\oplus Y_{i}, \\quad G_{i} = X_{i} Y_{i}.$$\nThe carry recursion is:\n$$C_{i+1} = G_{i} \\lor \\left(P_{i} C_{i}\\right).$$\nThe maximum propagation delay of an RCA occurs when a carry must ripple through every stage. This happens when there is an initial carry into the first stage ($C_0=1$) and every subsequent stage is set to propagate the carry ($P_i=1$ for all $i$). An initial carry can also be created by the first stage if $G_0=1$. For a full ripple, we require a carry source at the start and $P_i=1$ for all relevant stages.\n\nCompute $P_{i}$ in terms of $A$, $B$, and $\\text{SUB}$:\n$$P_{i} = X_{i} \\oplus Y_{i} = A_{i} \\oplus (B_{i} \\oplus \\text{SUB}) = (A_{i} \\oplus B_{i}) \\oplus \\text{SUB}.$$\n\n**Case `SUB = 1`:**\nThe initial carry-in to the RCA is $C_{in} = \\text{SUB} = 1$. This provides the necessary initial carry.\nFor the carry to propagate through all stages, we need $P_{i} = 1$ for all $i \\in \\{0, \\dots, 11\\}$.\n$$P_{i} = (A_{i} \\oplus B_{i}) \\oplus 1 = 1$$\nThis condition is met if $A_{i} \\oplus B_{i} = 0$, which means $A_{i} = B_{i}$ for all $i$.\nTherefore, if `SUB = 1` and $A=B$, a carry will be introduced at the beginning and will propagate through every stage, causing the maximum delay.\n\nLet's evaluate the options for `SUB = 1`:\n- Option B: `A = 0x555`, `B = 0xAAA`. Here, $A \\neq B$. This will not cause a full ripple.\n- Option C: `A = 0xFFF`, `B = 0xFFF`. Here, $A = B$. This is a worst-case scenario.\n- Option D: `A = 0x000`, `B = 0x001`. Here, $A \\neq B$. This will not cause a full ripple.\n- Option E: `A = 0x000`, `B = 0x000`. Here, $A = B$. This is a worst-case scenario.\n\n**Case `SUB = 0`:**\nThe initial carry-in to the RCA is $C_{in} = \\text{SUB} = 0$.\nFor a carry to propagate, we first need to generate one. This would require $G_0 = X_0 Y_0 = A_0 B_0 = 1$.\nThen, for the carry to propagate through stages $i=1$ to $11$, we need $P_{i} = 1$ for $i \\in \\{1, \\dots, 11\\}$.\n$$P_{i} = (A_{i} \\oplus B_{i}) \\oplus 0 = A_{i} \\oplus B_{i} = 1$$\nThis means $A_i \\neq B_i$ for $i \\in \\{1, \\dots, 11\\}$.\n\nLet's evaluate the option for `SUB = 0`:\n- Option A: `A = 0x000`, `B = 0xFFF`. Here, $A_0=0$ and $B_0=1$, so $G_0 = 0 \\cdot 1 = 0$. No carry is generated at the start. Since $C_{in}=0$ and $G_0=0$, no carry ripple can begin. This is not a worst-case scenario.\n\nTherefore, only options with `SUB = 1` and $A = B$ achieve the maximum delay. Among the provided choices, these are Options C and E.", "answer": "$$\\boxed{CE}$$", "id": "1917943"}, {"introduction": "The ripple-carry adder, while simple, suffers from a linear increase in delay with bit width. To overcome this limitation, engineers have developed faster adder architectures. This exercise provides a hands-on comparison between the classic ripple-carry adder and an improved design, the carry-select adder [@problem_id:1917908]. By analyzing and quantifying the speedup achieved, you will explore a fundamental principle in digital design: trading increased hardware complexity for a significant performance gain through parallelism.", "problem": "In digital logic design, the speed of an arithmetic circuit is often limited by carry propagation. Consider a single-bit full adder (FA) as a fundamental building block. For this particular technology, the propagation delay for a FA to produce a stable sum output and a stable carry-out output are identical, and we will denote this delay as $t_{FA}$. The delay is measured from the moment the last of its three inputs ($A_i$, $B_i$, $C_{in}$) becomes stable.\n\nAn 8-bit ripple-carry adder (RCA) is constructed by cascading 8 of these FAs. The worst-case propagation delay for this 8-bit RCA, measured from the moment all input bits ($A_{0..7}, B_{0..7}$) and the initial carry-in ($C_0$) are stable to the moment the most significant sum bit ($S_7$) becomes stable, is measured to be 16.0 ns.\n\nTo improve performance, this 8-bit adder is re-architected into a carry-select adder. The 8 bits are split into two 4-bit blocks: a lower block (bits 0-3) and an upper block (bits 4-7). The lower block is implemented with a 4-bit RCA. The upper block is implemented using two parallel 4-bit RCAs—one calculating the result assuming a carry-in of 0 from the lower block, and the other assuming a carry-in of 1. A set of 2-to-1 multiplexers (MUX) then selects the correct results for the upper block's sum bits ($S_{4..7}$) and the final carry-out ($C_8$). The selection signal for all these multiplexers is the actual carry-out from the lower block ($C_4$).\n\nThe propagation delay of a 2-to-1 MUX, measured from its select input to its output, is half of the FA delay, i.e., $t_{MUX} = 0.5 \\times t_{FA}$. The delay from the data inputs of the MUX to its output is considered negligible in comparison.\n\nCalculate the new worst-case propagation delay for this 8-bit carry-select adder. Express your answer in nanoseconds, rounded to three significant figures.", "solution": "The identical propagation delays for sum and carry of a full adder are denoted by $t_{FA}$. In an $n$-bit ripple-carry adder (RCA), the worst-case time for the most significant sum bit $S_{n-1}$ is the time for the carry to ripple through all $n$ FA stages.\n$$\nt_{\\text{RCA}\\rightarrow S_{n-1}} = n \\cdot t_{FA}\n$$\nFor the given 8-bit RCA, the measured worst-case delay to $S_{7}$ is $16.0$ ns, hence:\n$$\n8 \\cdot t_{FA} = 16.0\\ \\text{ns} \\quad \\Rightarrow \\quad t_{FA} = 2.0\\ \\text{ns}\n$$\nGiven the multiplexer (MUX) delay is $t_{MUX} = 0.5 \\times t_{FA} = 1.0$ ns.\n\nFor the carry-select adder split into two 4-bit blocks, the total delay is determined by the critical path.\nThe final outputs ($S_{4..7}$, $C_8$) depend on the MUXes in the upper block. The MUX outputs are stable after the select signal, $C_4$, is stable and has propagated through the MUX.\n1.  **Delay to generate the select signal ($C_4$):** The lower block is a 4-bit RCA. The time to produce the carry-out $C_4$ is the time to ripple a carry through all 4 stages.\n    $$ t_{C_4} = 4 \\cdot t_{FA} = 4 \\times 2.0\\ \\text{ns} = 8.0\\ \\text{ns} $$\n2.  **Parallel calculation in the upper block:** Concurrently, the two 4-bit RCAs in the upper block are calculating the results for $C_4=0$ and $C_4=1$. The time for these results (e.g., $S_7$) to be ready at the MUX data inputs is also $4 \\cdot t_{FA} = 8.0$ ns.\n3.  **Final MUX propagation:** The select signal $C_4$ arrives at the MUX at $t = 8.0$ ns. The data is also ready at this time. The final result for $S_7$ is stable after $C_4$ propagates through the MUX.\n    $$ T_{\\text{total}} = t_{C_4} + t_{MUX} = (4 \\cdot t_{FA}) + (0.5 \\cdot t_{FA}) = 4.5 \\cdot t_{FA} $$\nSubstituting the value of $t_{FA}$:\n$$\nT_{\\text{total}} = 4.5 \\times 2.0\\ \\text{ns} = 9.0\\ \\text{ns}\n$$\nThe worst-case delay for the carry-select adder is 9.00 ns.", "answer": "$$\\boxed{9.00}$$", "id": "1917908"}]}