{"hands_on_practices": [{"introduction": "Before diving into circuit implementation, it's crucial to grasp the fundamental mathematical properties of parity. This exercise focuses on how parity behaves when data is combined, treating it as an abstract property rather than a specific set of bits. By analyzing the parity of concatenated binary words, you will discover a simple but powerful algebraic rule that governs these systems, allowing you to predict outcomes without needing to inspect every single bit [@problem_id:1951665].", "problem": "In a simplified model of a data communication system, information is transmitted in binary words. A commonly used method for error detection is parity checking. A binary word is said to have *odd parity* if it contains an odd number of '1's. Conversely, it has *even parity* if it contains an even number of '1's.\n\nConsider two independent binary words, $W_1$ and $W_2$. The word $W_1$ is 3 bits long and is known to have odd parity. The word $W_2$ is 5 bits long and also has odd parity. A new 8-bit word, $W_c$, is formed by concatenating these two words, with $W_1$ forming the most significant bits and $W_2$ forming the least significant bits.\n\nWhat is the parity of the concatenated word $W_c$?\n\nA. Odd Parity\n\nB. Even Parity\n\nC. The parity cannot be determined without knowing the specific bit patterns of $W_1$ and $W_2$.\n\nD. The concept of parity is not applicable to the concatenated word.", "solution": "Define the parity function of a binary word $W$ as $p(W) \\in \\{0,1\\}$, where $p(W)=0$ denotes even parity and $p(W)=1$ denotes odd parity. Let $n(W)$ denote the number of $1$'s in $W$. By definition, $p(W) \\equiv n(W) \\pmod{2}$.\n\nLet $W_1$ be a 3-bit word with odd parity and $W_2$ be a 5-bit word with odd parity. Then their counts of $1$'s satisfy\n$$\nn(W_1) \\equiv 1 \\pmod{2}, \\quad n(W_2) \\equiv 1 \\pmod{2}.\n$$\n\nThe concatenated word $W_c$ contains exactly all bits of $W_1$ followed by all bits of $W_2$, so the total number of $1$'s in $W_c$ is\n$$\nn(W_c) = n(W_1) + n(W_2).\n$$\nTaking parity (i.e., reducing modulo $2$),\n$$\np(W_c) \\equiv n(W_c) \\equiv n(W_1) + n(W_2) \\equiv 1 + 1 \\equiv 0 \\pmod{2}.\n$$\nThus $W_c$ has even parity. Equivalently, parity under concatenation adds modulo $2$, so $p(W_c) = p(W_1) \\oplus p(W_2)$; with both odd ($1$), the result is even ($0$). The particular bit patterns and independence are irrelevant to this conclusion.", "answer": "$$\\boxed{B}$$", "id": "1951665"}, {"introduction": "Moving from static concepts to dynamic behavior is a key step in digital design. This practice challenges you to apply your knowledge of parity generation to a time-varying input signal, a common scenario in real-world digital systems. By determining the output waveform of an even parity generator based on a given timing diagram, you will strengthen your ability to analyze and predict the real-time response of combinational logic circuits [@problem_id:1951721].", "problem": "A digital circuit is designed to function as an even parity generator for a 3-bit data word. The three data input lines are denoted as $D_2$, $D_1$, and $D_0$, and the single output line is the parity bit, $P$. The circuit is combinational, meaning its output at any instant depends only on the inputs at that same instant. The state of the input lines (where '1' represents a high voltage level and '0' represents a low voltage level) is observed over a total duration of $8T$, where $T$ is a fixed time interval. The input values are constant within each interval of length $T$. The sequence of input states is as follows:\n- For the time interval $t \\in [0, T)$: $D_2=0, D_1=0, D_0=0$\n- For the time interval $t \\in [T, 2T)$: $D_2=0, D_1=0, D_0=1$\n- For the time interval $t \\in [2T, 3T)$: $D_2=0, D_1=1, D_0=1$\n- For the time interval $t \\in [3T, 4T)$: $D_2=1, D_1=1, D_0=0$\n- For the time interval $t \\in [4T, 5T)$: $D_2=1, D_1=1, D_0=1$\n- For the time interval $t \\in [5T, 6T)$: $D_2=1, D_1=0, D_0=1$\n- For the time interval $t \\in [6T, 7T)$: $D_2=0, D_1=1, D_0=0$\n- For the time interval $t \\in [7T, 8T)$: $D_2=1, D_1=0, D_0=0$\n\nWhich of the following binary sequences represents the output $P$ over the total time interval from $t=0$ to $t=8T$? The first bit in each sequence corresponds to the output in the interval $[0, T)$, the second bit to the interval $[T, 2T)$, and so on.\n\nA. `10110100`\n\nB. `00100111`\n\nC. `01010110`\n\nD. `01001011`\n\nE. `11001010`", "solution": "An even parity generator produces an output bit $P$ such that the total number of '1's in the data bits plus the parity bit is even. This can be stated more directly: the parity bit $P$ is '1' if the number of '1's in the input data bits ($D_2, D_1, D_0$) is odd, and $P$ is '0' if the number of '1's in the input is even.\n\nThe logical function for a 3-bit even parity generator is the Exclusive OR (XOR) of the input bits:\n$$ P = D_2 \\oplus D_1 \\oplus D_0 $$\nWe will now evaluate the output $P$ for each time interval based on the given input values.\n\n**Interval 1: $t \\in [0, T)$**\nInputs: $D_2=0, D_1=0, D_0=0$.\nThe number of '1's in the input is 0, which is an even number.\nTherefore, the parity bit $P=0$.\nUsing the XOR function: $P = 0 \\oplus 0 \\oplus 0 = 0$.\n\n**Interval 2: $t \\in [T, 2T)$**\nInputs: $D_2=0, D_1=0, D_0=1$.\nThe number of '1's in the input is 1, which is an odd number.\nTherefore, the parity bit $P=1$.\nUsing the XOR function: $P = 0 \\oplus 0 \\oplus 1 = 1$.\n\n**Interval 3: $t \\in [2T, 3T)$**\nInputs: $D_2=0, D_1=1, D_0=1$.\nThe number of '1's in the input is 2, which is an even number.\nTherefore, the parity bit $P=0$.\nUsing the XOR function: $P = 0 \\oplus 1 \\oplus 1 = 0$.\n\n**Interval 4: $t \\in [3T, 4T)$**\nInputs: $D_2=1, D_1=1, D_0=0$.\nThe number of '1's in the input is 2, which is an even number.\nTherefore, the parity bit $P=0$.\nUsing the XOR function: $P = 1 \\oplus 1 \\oplus 0 = 0$.\n\n**Interval 5: $t \\in [4T, 5T)$**\nInputs: $D_2=1, D_1=1, D_0=1$.\nThe number of '1's in the input is 3, which is an odd number.\nTherefore, the parity bit $P=1$.\nUsing the XOR function: $P = 1 \\oplus 1 \\oplus 1 = 1$.\n\n**Interval 6: $t \\in [5T, 6T)$**\nInputs: $D_2=1, D_1=0, D_0=1$.\nThe number of '1's in the input is 2, which is an even number.\nTherefore, the parity bit $P=0$.\nUsing the XOR function: $P = 1 \\oplus 0 \\oplus 1 = 0$.\n\n**Interval 7: $t \\in [6T, 7T)$**\nInputs: $D_2=0, D_1=1, D_0=0$.\nThe number of '1's in the input is 1, which is an odd number.\nTherefore, the parity bit $P=1$.\nUsing the XOR function: $P = 0 \\oplus 1 \\oplus 0 = 1$.\n\n**Interval 8: $t \\in [7T, 8T)$**\nInputs: $D_2=1, D_1=0, D_0=0$.\nThe number of '1's in the input is 1, which is an odd number.\nTherefore, the parity bit $P=1$.\nUsing the XOR function: $P = 1 \\oplus 0 \\oplus 0 = 1$.\n\nCombining the output bits for each interval in order, we get the sequence: `01001011`.\nComparing this result with the given options:\nA. `10110100` (This is the odd parity output)\nB. `00100111`\nC. `01010110`\nD. `01001011` (This matches our calculated sequence)\nE. `11001010`\n\nThe correct option is D.", "answer": "$$\\boxed{D}$$", "id": "1951721"}, {"introduction": "The final step in understanding a digital concept is often to build it from the ground up. This problem transitions from the 'what' to the 'how' by asking you to construct a 3-bit parity generator using only fundamental 2-input NOR gates. This classic synthesis task highlights the importance of the Exclusive-OR ($XOR$) function in parity logic and provides hands-on experience in implementing higher-level functions with universal gates, a core skill in practical circuit design [@problem_id:1951690].", "problem": "A digital circuit is being designed to serve as a 3-bit even parity generator. The circuit takes three inputs, $A$, $B$, and $C$, and produces a single output $P$. The output $P$ must be logic '1' if an odd number of inputs are '1', and logic '0' otherwise. The design specification requires a modular, cascaded architecture: a first module computes an intermediate result $Z = A \\oplus B$ (where $\\oplus$ denotes the Exclusive-OR operation), and a second module computes the final output $P = Z \\oplus C$. Each of these two modules must be implemented using an optimal, minimal number of 2-input NOR gates. Determine the total number of 2-input NOR gates required to build the complete 3-bit parity generator according to this design.", "solution": "We must implement two cascaded modules using only 2-input NOR gates, each module computing a 2-input Exclusive-OR (XOR): first $Z=A \\oplus B$, then $P=Z \\oplus C$. The total number of NOR gates equals the sum of the minimal NOR counts for the two XOR modules, so it suffices to determine the minimal number of 2-input NOR gates needed to realize a 2-input XOR.\n\nLet the 2-input NOR operation be denoted by $X \\downarrow Y = (X+Y)'$, where $+$ is OR, juxtaposition is AND, and $'$ is NOT. A NOT can be produced by tying a NOR gateâ€™s inputs: $X' = X \\downarrow X$.\n\nA standard minimal NOR-only realization of XNOR with four 2-input NOR gates is:\n$$\nD = A \\downarrow B = (A+B)' \\,,\n$$\n$$\nE = A \\downarrow D = (A + D)' = (A + (A+B)')' = A' \\cdot (A+B) = A'B \\,,\n$$\n$$\nF = B \\downarrow D = (B + D)' = (B + (A+B)')' = B' \\cdot (A+B) = AB' \\,,\n$$\n$$\nG = E \\downarrow F = (E + F)' = (A'B + AB')' \\,.\n$$\nSince $G = (A'B + AB')'$, $G$ is $A \\odot B$ (XNOR). Therefore, to obtain $A \\oplus B$, we invert $G$ with one more 2-input NOR gate:\n$$\nA \\oplus B = G' = G \\downarrow G \\,.\n$$\nThus, a 2-input XOR requires exactly five 2-input NOR gates: four to form XNOR and one final inverter. This is optimal, because with four 2-input NOR gates the best we can realize in this structure is XNOR; producing XOR requires one additional inversion, which necessarily adds at least one more NOR gate.\n\nApplying this to the specified modular architecture:\n- First module computes $Z = A \\oplus B$ using $5$ NOR gates.\n- Second module computes $P = Z \\oplus C$ using $5$ NOR gates.\n\nSince the modules are cascaded and modular (no sharing of internal nodes across modules), the total number of 2-input NOR gates is $5 + 5 = 10$.", "answer": "$$\\boxed{10}$$", "id": "1951690"}]}