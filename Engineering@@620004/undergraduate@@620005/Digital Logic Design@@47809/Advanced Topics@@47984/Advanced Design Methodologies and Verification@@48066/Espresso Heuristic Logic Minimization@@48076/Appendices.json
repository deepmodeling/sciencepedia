{"hands_on_practices": [{"introduction": "The `EXPAND` operation is a cornerstone of the Espresso algorithm, transforming an initial set of product terms into prime implicants. This exercise provides focused practice on this fundamental step by asking you to expand a single implicant for a given function [@problem_id:1933417]. By methodically testing which literals can be removed without illegally covering OFF-set minterms, you will develop a concrete understanding of how Espresso builds a more efficient logic representation.", "problem": "In the context of heuristic logic minimization for a digital circuit, consider a Boolean function $F$ of three variables $A$, $B$, and $C$. The function is defined by its ON-set, $F_{ON} = \\sum m(1, 5, 7)$, and its Don't-Care set, $F_{DC} = \\sum m(4)$. The notation $A^{\\prime}$ represents the logical complement of $A$.\n\nAn initial, non-minimized cover for this function is given as $C_{initial} = \\{ A^{\\prime}B^{\\prime}C, AB^{\\prime}C, ABC \\}$. The Espresso heuristic logic minimization algorithm is applied to this cover. During the EXPAND phase of the algorithm, the implicant $p = A^{\\prime}B^{\\prime}C$ is selected for expansion. The EXPAND procedure attempts to create a larger implicant (a prime implicant) by removing as many literals as possible from $p$, one at a time, while ensuring the resulting product term remains a valid implicant of the function. A product term is a valid implicant if and only if the set of minterms it covers is a subset of the union of the ON-set and the Don't-Care set ($F_{ON} \\cup F_{DC}$).\n\nDetermine the prime implicant that results from applying the EXPAND procedure to the implicant $p = A^{\\prime}B^{\\prime}C$.", "solution": "We are given a Boolean function on variables $A,B,C$ with ON-set $F_{ON}=\\sum m(1,5,7)$ and Don't-Care set $F_{DC}=\\sum m(4)$. Thus the set of allowed minterms for an implicant is $F_{ON}\\cup F_{DC}=\\{1,4,5,7\\}$. We apply the EXPAND phase to $p=A^{\\prime}B^{\\prime}C$.\n\nFirst, determine the minterms covered by $p$: since $A=0$, $B=0$, $C=1$, we have that $p$ covers exactly minterm $1$. To expand, remove literals one at a time, checking that the resulting product covers only minterms in $F_{ON}\\cup F_{DC}$.\n\n- Remove $A^{\\prime}$: obtain $B^{\\prime}C$. This covers minterms with $B=0$, $C=1$, i.e., $\\{1,5\\}$. Since $\\{1,5\\}\\subseteq\\{1,4,5,7\\}$, this is a valid implicant.\n\n- Remove $B^{\\prime}$: obtain $A^{\\prime}C$. This covers minterms with $A=0$, $C=1$, i.e., $\\{1,3\\}$. Since $3\\notin\\{1,4,5,7\\}$, this is invalid.\n\n- Remove $C$: obtain $A^{\\prime}B^{\\prime}$. This covers minterms with $A=0$, $B=0$, i.e., $\\{0,1\\}$. Since $0\\notin\\{1,4,5,7\\}$, this is invalid.\n\nThus the only valid expansion from $p$ is $B^{\\prime}C$. Now test whether $B^{\\prime}C$ can be expanded further:\n\n- Remove $B^{\\prime}$: obtain $C$, which covers $\\{1,3,5,7\\}$. Since $3\\notin\\{1,4,5,7\\}$, invalid.\n\n- Remove $C$: obtain $B^{\\prime}$, which covers $\\{0,1,4,5\\}$. Since $0\\notin\\{1,4,5,7\\}$, invalid.\n\nTherefore, no literal of $B^{\\prime}C$ can be removed without covering an OFF minterm, so $B^{\\prime}C$ is a prime implicant. Hence, the EXPAND procedure yields the prime implicant $B^{\\prime}C$ from $p=A^{\\prime}B^{\\prime}C$.", "answer": "$$\\boxed{B^{\\prime}C}$$", "id": "1933417"}, {"introduction": "A true test of an algorithm's power is to see how it performs on challenging inputs. This problem uses the 4-variable odd parity function, a classic 'hard case' for two-level logic minimizers, to demonstrate a key limitation of the Espresso heuristic [@problem_id:1933425]. By analyzing why the `EXPAND` phase fails to simplify the initial cover, you will gain deeper insight into the relationship between a function's structure and the algorithm's effectiveness.", "problem": "The Espresso heuristic is a widely used algorithm for minimizing two-level logic functions. It iteratively improves a logic cover through a sequence of operations, most notably `EXPAND`, `IRREDUNDANT_COVER`, and `REDUCE`.\n\nConsider a 4-variable Boolean function $F(w, x, y, z)$ defined as the **odd parity function**. This function evaluates to 1 if and only if an odd number of its input variables are 1. The initial cover for the Espresso algorithm is given as the canonical Sum-of-Products (SOP) form, which is the set of all the function's ON-set minterms.\n\nYour task is to analyze the behavior of the Espresso algorithm on this specific initial cover. Determine the number of product terms (implicants) in the final cover produced by the algorithm and identify the fundamental reason for the outcome of the initial `EXPAND` phase.\n\nWhich of the following statements correctly describes the result?\n\nA. Number of terms: 1. Reason: The Espresso algorithm effectively performs an XOR synthesis and represents the function with a single parity term.\n\nB. Number of terms: 4. Reason: The `EXPAND` phase successfully combines the eight minterms into four 2-cubes, but these cannot be expanded further.\n\nC. Number of terms: 8. Reason: The `EXPAND` phase fails because every ON-set minterm is adjacent only to OFF-set minterms, meaning any expansion would illegally cover part of the OFF-set.\n\nD. Number of terms: 8. Reason: The initial minterms are already prime implicants, but they are not essential. The `IRREDUNDANT_COVER` phase is unable to select a smaller subset, leading to a suboptimal result.\n\nE. Number of terms: 16. Reason: The `EXPAND` phase grows each minterm to its maximum possible size, resulting in a cover that includes all 16 possible minterms.", "solution": "The odd-parity function on four variables has its ON-set equal to all minterms with an odd Hamming weight. The number of such minterms is\n$$\n\\binom{4}{1}+\\binom{4}{3}=4+4=8,\n$$\nso the canonical SOP cover consists of these eight minterms as single-literal 4-cubes (i.e., product terms with four literals).\n\nIn Espresso, the EXPAND operation attempts to grow each cube into a larger cube while avoiding coverage of any OFF-set minterms. Two minterms are adjacent if they differ in exactly one variable. For parity, flipping any single variable toggles the parity. Therefore, for any ON-set minterm (odd parity), all of its Hamming-distance-1 neighbors lie in the OFF-set (even parity). Consequently, any attempt to expand a minterm by dropping one literal would necessarily include its adjacent OFF-set minterm, which is not allowed. Hence no minterm can be expanded; each initial minterm is already a prime implicant.\n\nIn IRREDUNDANT_COVER, an implicant is essential if it is the only implicant covering some ON minterm. Here, each ON minterm is covered only by its identical cube in the initial SOP; no other cube covers it, so each cube is essential and cannot be removed without leaving that minterm uncovered. Therefore, the cover cannot be reduced below eight terms. The REDUCE operation does not alter the cover because there is no overlap to exploit.\n\nThus, the final cover contains 8 product terms, and the fundamental reason EXPAND does not change the cover is that every ON-set minterm is adjacent only to OFF-set minterms, so any expansion would illegally cover the OFF-set. This corresponds to option C.", "answer": "$$\\boxed{C}$$", "id": "1933425"}, {"introduction": "After generating prime implicants, Espresso's `IRREDUNDANT_COVER` phase must select a minimal subset that covers the function, a task that is computationally difficult. This advanced problem explores a 'cyclic core' scenario, where a simple greedy selection strategy is guaranteed to produce a non-minimal result [@problem_id:1933398]. Finding the true minimal cover will highlight why Espresso is a heuristic and deepen your appreciation for the complexities inherent in solving the underlying set cover problem.", "problem": "In the context of heuristic logic minimization, such as the Espresso algorithm, the `IRREDUNDANT_COVER` step seeks to find a minimal subset of prime implicants (PIs) that covers the entire ON-set of a Boolean function. A common greedy heuristic for this step is to iteratively select the prime implicant that covers the largest number of not-yet-covered ON-set minterms.\n\nConsider a 4-variable Boolean function, $F(w,x,y,z)$, for which the complete prime implicant chart has been determined. The ON-set consists of six minterms, denoted symbolically as $M = \\{m_1, m_2, m_3, m_4, m_5, m_6\\}$. The function has a total of seven prime implicants, denoted as $P = \\{P_A, P_B, P_C, P_D, P_E, P_F, P_G\\}$.\n\nThe covering relationships are as follows:\n- $P_A$ covers the minterm set $\\{m_1, m_2\\}$.\n- $P_B$ covers the minterm set $\\{m_2, m_3\\}$.\n- $P_C$ covers the minterm set $\\{m_3, m_4\\}$.\n- $P_D$ covers the minterm set $\\{m_4, m_5\\}$.\n- $P_E$ covers the minterm set $\\{m_5, m_6\\}$.\n- $P_F$ covers the minterm set $\\{m_6, m_1\\}$.\n- $P_G$ covers the minterm set $\\{m_2, m_4, m_6\\}$.\n\nYour task is to determine the size, in terms of the number of prime implicants, of a truly minimal sum-of-products expression for the function $F$.", "solution": "We formalize the irredundant cover step as a set cover problem. The universe to cover is the ON-set $M=\\{m_{1},m_{2},m_{3},m_{4},m_{5},m_{6}\\}$. The available subsets are the prime implicants:\n$$\nP_{A}=\\{m_{1},m_{2}\\},\\quad\nP_{B}=\\{m_{2},m_{3}\\},\\quad\nP_{C}=\\{m_{3},m_{4}\\},\\quad\nP_{D}=\\{m_{4},m_{5}\\},\\quad\nP_{E}=\\{m_{5},m_{6}\\},\\quad\nP_{F}=\\{m_{6},m_{1}\\},\\quad\nP_{G}=\\{m_{2},m_{4},m_{6}\\}.\n$$\n\nFirst, establish a cardinality lower bound. Each chosen prime implicant covers at most three minterms, and there is only one such size-three implicant, namely $P_{G}$. With two implicants, the maximum total coverage is at most\n$$\n|P_{G}\\cup P_{X}|\\leq |P_{G}|+|P_{X}|\\leq 3+2=5<6,\n$$\nfor any second implicant $P_{X}\\in\\{P_{A},P_{B},P_{C},P_{D},P_{E},P_{F}\\}$. If neither implicant is $P_{G}$, then both have size two and the union covers at most four elements. Hence, no two implicants can cover all six minterms, and any valid cover must use at least three prime implicants.\n\nNext, show achievability with three implicants by explicit construction. Select every other size-two implicant, for example\n$$\nP_{A}\\cup P_{C}\\cup P_{E}=\\{m_{1},m_{2}\\}\\cup\\{m_{3},m_{4}\\}\\cup\\{m_{5},m_{6}\\}=M.\n$$\nThus three prime implicants suffice. Moreover, any cover of size three that uses $P_{G}$ would still require covering the odd-indexed minterms $\\{m_{1},m_{3},m_{5}\\}$ with size-two implicants, and no size-two implicant covers two of these simultaneously. Therefore $P_{G}$ forces at least three additional size-two implicants, giving at least four implicants total; it cannot improve upon the three-implicant solution already exhibited.\n\nCombining the lower bound with the explicit three-implicant cover, the minimal number of prime implicants in a sum-of-products realization is exactly three.", "answer": "$$\\boxed{3}$$", "id": "1933398"}]}