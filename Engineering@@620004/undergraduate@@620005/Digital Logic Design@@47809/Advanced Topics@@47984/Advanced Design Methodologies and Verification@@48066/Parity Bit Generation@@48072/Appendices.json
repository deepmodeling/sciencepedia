{"hands_on_practices": [{"introduction": "The foundation of parity generation lies in the XOR operation, which naturally counts whether there is an odd or even number of '1's. This first practice challenges you to build a 4-bit even parity generator using only 2-input XNOR gates, which are the logical complement of XOR gates. By working through this problem [@problem_id:1951262], you will strengthen your understanding of how to implement multi-input logic functions by cascading simpler gates and master the essential Boolean identities that connect different gate types.", "problem": "In digital communication systems, a parity bit is often appended to a binary data word to detect errors that may occur during transmission. An **even parity** scheme requires that the total number of '1's in the transmitted word (the original data plus the parity bit) be an even number.\n\nYou are tasked with designing an even parity generator for a 4-bit data word, denoted as $D_3D_2D_1D_0$. Your design must be implemented using only 2-input XNOR gates. You may assume that the logic constants '0' (LOW) and '1' (HIGH) are available to be used as inputs to these gates.\n\nLet the 2-input XNOR operation be represented by the symbol $\\odot$. For example, the expression for `A XNOR B` is written as $A \\odot B$.\n\nWhich of the following Boolean expressions correctly represents the even parity bit, $P$, for the 4-bit data word $D_3D_2D_1D_0$?\n\nA. $P = (((D_0 \\odot D_1) \\odot D_2) \\odot D_3) \\odot 0$\n\nB. $P = ((D_0 \\odot D_1) \\odot D_2) \\odot D_3$\n\nC. $P = (D_0 \\odot D_1) \\odot (D_2 \\odot D_3)$\n\nD. $P = (((D_0 \\odot D_1) \\odot D_2) \\odot D_3) \\odot 1$\n\nE. $P = (D_0 \\odot 0) \\odot (D_1 \\odot 0) \\odot (D_2 \\odot 0) \\odot (D_3 \\odot 0)$", "solution": "The even parity bit, $P$, for a 4-bit data word $D_3D_2D_1D_0$ is defined by the XOR sum of the bits:\n$$P = D_3 \\oplus D_2 \\oplus D_1 \\oplus D_0$$\nWe need to implement this function using only 2-input XNOR gates. The XNOR operation, denoted by $\\odot$, is the complement of the XOR operation: $A \\odot B = \\overline{A \\oplus B}$.\n\nLet's analyze the structure of a cascade of 2-input XNOR gates.\n- For 2 inputs, $D_1 \\odot D_0 = \\overline{D_1 \\oplus D_0}$.\n- For 3 inputs, $(D_2 \\odot D_1) \\odot D_0 = \\overline{(D_2 \\odot D_1) \\oplus D_0} = \\overline{(\\overline{D_2 \\oplus D_1}) \\oplus D_0}$. Using the identity $\\overline{A} \\oplus B = \\overline{A \\oplus B}$, this becomes $\\overline{\\overline{D_2 \\oplus D_1 \\oplus D_0}} = D_2 \\oplus D_1 \\oplus D_0$.\n- For 4 inputs, a cascade like $((D_3 \\odot D_2) \\odot D_1) \\odot D_0$ becomes $(D_3 \\oplus D_2 \\oplus D_1) \\odot D_0 = \\overline{(D_3 \\oplus D_2 \\oplus D_1) \\oplus D_0} = \\overline{P}$.\n\nThis shows that a 4-input XNOR cascade computes the odd parity bit ($\\overline{P}$), not the even parity bit ($P$).\n\nNow let's evaluate the given options based on this finding:\n\n*   **B. $P = ((D_0 \\odot D_1) \\odot D_2) \\odot D_3$**: As derived above (the order of inputs doesn't change the final function for a cascade), this expression calculates $\\overline{D_3 \\oplus D_2 \\oplus D_1 \\oplus D_0} = \\overline{P}$. This is incorrect.\n\n*   **A. $P = (((D_0 \\odot D_1) \\odot D_2) \\odot D_3) \\odot 0$**: This takes the result from option B and XNORs it with 0. Let $X = ((D_0 \\odot D_1) \\odot D_2) \\odot D_3 = \\overline{P}$. The expression becomes $X \\odot 0 = \\overline{X \\oplus 0} = \\overline{X} = \\overline{\\overline{P}} = P$. This is the correct even parity bit.\n\n*   **C. $P = (D_0 \\odot D_1) \\odot (D_2 \\odot D_3)$**: Let $X = D_0 \\odot D_1 = \\overline{D_0 \\oplus D_1}$ and $Y = D_2 \\odot D_3 = \\overline{D_2 \\oplus D_3}$. The expression is $X \\odot Y = \\overline{X \\oplus Y} = \\overline{(\\overline{D_0 \\oplus D_1}) \\oplus (\\overline{D_2 \\oplus D_3})}$. Using the identity $\\overline{A} \\oplus \\overline{B} = A \\oplus B$, this simplifies to $\\overline{(D_0 \\oplus D_1) \\oplus (D_2 \\oplus D_3)} = \\overline{P}$. This is incorrect.\n\n*   **D. $P = (((D_0 \\odot D_1) \\odot D_2) \\odot D_3) \\odot 1$**: This takes the result from option B, which is $\\overline{P}$, and XNORs it with 1. Using the identity $X \\odot 1 = \\overline{X \\oplus 1} = \\overline{\\overline{X}} = X$, this expression simplifies to the result of option B, which is $\\overline{P}$. This is incorrect.\n\n*   **E. $P = (D_0 \\odot 0) \\odot (D_1 \\odot 0) \\odot (D_2 \\odot 0) \\odot (D_3 \\odot 0)$**: First, $D_i \\odot 0 = \\overline{D_i}$. The expression becomes a 4-input XNOR cascade on the inverted inputs: $\\overline{\\overline{D_3} \\oplus \\overline{D_2} \\oplus \\overline{D_1} \\oplus \\overline{D_0}}$. Since an even number of inputs are inverted in an XOR sum, the inversions cancel out: $\\overline{D_3 \\oplus D_2 \\oplus D_1 \\oplus D_0} = \\overline{P}$. This is incorrect.\n\nTherefore, only option A correctly implements the even parity bit.", "answer": "$$\\boxed{A}$$", "id": "1951262"}, {"introduction": "Parity bits are not just for data transmission; they are also crucial for verifying the integrity of arithmetic calculations within a processor. This exercise [@problem_id:1951224] moves beyond simple data words and asks you to generate the parity bit for the product of two binary numbers. This practical scenario encourages you to find an elegant simplification by exploring the fundamental properties of the XOR operation in the context of binary arithmetic, rather than constructing a full truth table.", "problem": "A specialized error-checking module within a custom digital signal processor is being designed. This module's function is to take two 2-bit unsigned binary numbers, multiply them, and then generate a single odd parity bit for the resulting product.\n\nLet the two input numbers be $A$ and $B$. The number $A$ is represented by the bits $A_1A_0$, where $A_1$ is the Most Significant Bit (MSB). Similarly, the number $B$ is represented by the bits $B_1B_0$, where $B_1$ is the MSB. The multiplication of these two numbers results in a 4-bit product, $P$, represented by the bits $P_3P_2P_1P_0$.\n\nThe module must then generate an odd parity bit, $P_{odd}$, for this 4-bit product $P$. An odd parity system requires that the total number of '1's in the data bits combined with the parity bit is odd. This means that if the 4-bit product $P$ contains an even number of '1's, the odd parity bit $P_{odd}$ must be 1. If $P$ contains an odd number of '1's, $P_{odd}$ must be 0.\n\nYour task is to determine the minimal sum-of-products (SOP) Boolean expression for the odd parity bit, $P_{odd}$, as a function of the four input bits: $A_1, A_0, B_1, B_0$. A sum-of-products expression is a disjunction (OR) of conjunctions (AND). For your final answer, represent logical AND by juxtaposition and logical OR by `+`.", "solution": "Let $A=A_{1}A_{0}$ and $B=B_{1}B_{0}$ be two unsigned $2$-bit numbers. Their product yields $P=P_{3}P_{2}P_{1}P_{0}$. The odd parity bit must satisfy $P_{\\text{odd}}=1$ when the number of ones in $P$ is even, and $P_{\\text{odd}}=0$ when it is odd. Let $s=P_{3}\\oplus P_{2}\\oplus P_{1}\\oplus P_{0}$ denote the parity (XOR) of the product bits. Then the required parity bit is the complement:\n$$\nP_{\\text{odd}}=\\overline{s}.\n$$\n\nA key property of binary addition is that the XOR sum of the bits of a sum is equal to the XOR sum of the bits of the operands: $\\bigoplus \\text{bits}(x+y)=\\bigoplus \\text{bits}(x)\\oplus\\bigoplus \\text{bits}(y)$. The product $A \\times B$ is the sum of shifted partial products. The partial products are $A \\times B_0$ and $(A \\times B_1) \\ll 1$.\n\nThe bits of $A \\times B_0$ are $(A_1 B_0)$ and $(A_0 B_0)$. Their XOR sum is $A_1 B_0 \\oplus A_0 B_0 = (A_1 \\oplus A_0)B_0$.\nThe bits of $(A \\times B_1) \\ll 1$ are $(A_1 B_1)$ and $(A_0 B_1)$ (at higher bit positions). Their XOR sum is $A_1 B_1 \\oplus A_0 B_1 = (A_1 \\oplus A_0)B_1$.\n\nTherefore, the XOR sum of all bits in the final product is the XOR sum of the XOR sums of these partial products:\n$$\ns = ((A_{1} \\oplus A_{0})B_0) \\oplus ((A_{1} \\oplus A_{0})B_1)\n= (A_{1} \\oplus A_{0})(B_0 \\oplus B_{1}),\n$$\nusing the distributive property $XZ \\oplus YZ=(X\\oplus Y)Z$.\n\nThus, the odd parity bit is:\n$$\nP_{\\text{odd}}=\\overline{(A_{1}\\oplus A_{0})(B_{1}\\oplus B_{0})}\n$$\nThe term $(A_1 \\oplus A_0)(B_1 \\oplus B_0)$ is 1 only when both $(A_1 \\oplus A_0)=1$ and $(B_1 \\oplus B_0)=1$. $P_{odd}$ is the negation, so it is 1 if either $(A_1 \\oplus A_0)=0$ or $(B_1 \\oplus B_0)=0$.\nBy De Morgan’s law, this is:\n$$\nP_{\\text{odd}}=\\overline{(A_{1}\\oplus A_{0})} + \\overline{(B_{1}\\oplus B_{0})}\n$$\nUsing the identity for the complement of XOR, $\\overline{X\\oplus Y}=XY+\\overline{X}\\,\\overline{Y}$, we get:\n$$\n\\overline{(A_{1}\\oplus A_{0})}=A_{1}A_{0}+\\overline{A_{1}}\\,\\overline{A_{0}}\n$$\n$$\n\\overline{(B_{1}\\oplus B_{0})}=B_{1}B_{0}+\\overline{B_{1}}\\,\\overline{B_{0}}\n$$\nHence the minimal sum-of-products form is\n$$\nP_{\\text{odd}}=A_{1}A_{0}+\\overline{A_{1}}\\,\\overline{A_{0}}+B_{1}B_{0}+\\overline{B_{1}}\\,\\overline{B_{0}}.\n$$\nThis is a minimal SOP form because the function's Karnaugh map consists of four groups of four minterms that are covered by these four 2-literal prime implicants, which form an essential prime implicant cover.", "answer": "$$\\boxed{A_{1}A_{0}+\\overline{A_{1}}\\,\\overline{A_{0}}+B_{1}B_{0}+\\overline{B_{1}}\\,\\overline{B_{0}}}$$", "id": "1951224"}, {"introduction": "True mastery of a concept often comes from understanding its fundamental, unchanging properties. This final practice [@problem_id:1951242] presents a scenario involving a variable rotation of a data word before parity calculation, which on the surface appears to add significant complexity. The exercise is designed to test your insight into the core nature of the parity function, revealing that the total number of '1's—and thus the parity—is invariant under any permutation of the bits, such as rotation.", "problem": "A specialized digital signal processing unit is designed to perform a conditional rotation and parity calculation on a 4-bit data word. The unit takes two inputs: a 4-bit data word $D$ with bits represented as $D_3D_2D_1D_0$, where $D_3$ is the most significant bit (MSB), and a 2-bit control signal $S$ with bits $S_1S_0$, where $S_1$ is the MSB.\n\nThe operation proceeds in two stages. First, the data word $D$ is logically rotated to the left by a number of positions determined by the binary value of the control signal $S$. For example, if $S = 01_2 = 1_{10}$, the word $D_3D_2D_1D_0$ becomes $D_2D_1D_0D_3$. In a logical rotation, bits shifted out from the MSB are inserted into the least significant bit (LSB) position.\n\nSecond, the unit generates a single odd parity bit, $P$, for the resulting 4-bit rotated word. An odd parity system is one where the parity bit is set to 1 if the number of ones in the data word is even, and to 0 if the number of ones is odd, such that the total count of ones in the data word combined with the parity bit is always odd.\n\nYour task is to derive the simplified Boolean expression for the odd parity bit $P$ as a function of the six input bits: $D_3, D_2, D_1, D_0, S_1,$ and $S_0$.", "solution": "Let $D$ be the 4-bit word with bits $D_{3}D_{2}D_{1}D_{0}$ and let $S$ be the 2-bit control with bits $S_{1}S_{0}$. Let $k$ denote the integer encoded by $S$, so that the unit rotates $D$ left by $k$ positions. Let the rotated word be $R$, with bits $R_{3}R_{2}R_{1}R_{0}$.\n\nAn odd parity bit $P$ is set such that the total number of ones in $R$ together with $P$ is odd. This means $P$ must be the complement of the XOR sum (even parity) of the bits of $R$. Let the XOR sum of the rotated bits be\n$$\n\\Pi = R_{3} \\oplus R_{2} \\oplus R_{1} \\oplus R_{0}.\n$$\nBy definition of odd parity, $P=1$ if the number of ones in $R$ is even (i.e., $\\Pi=0$) and $P=0$ if it is odd (i.e., $\\Pi=1$). Therefore,\n$$\nP = \\overline{\\Pi} = \\overline{R_{3} \\oplus R_{2} \\oplus R_{1} \\oplus R_{0}}.\n$$\nA crucial property of the XOR operation is that it is both commutative and associative. This means the XOR sum of a set of bits is independent of their order. A rotation is simply a permutation of the bits—it rearranges them but does not change which bits are present. Therefore, the XOR sum of the rotated bits is identical to the XOR sum of the original bits, regardless of the rotation amount $k$.\n$$\n\\Pi = R_{3} \\oplus R_{2} \\oplus R_{1} \\oplus R_{0} = D_{3} \\oplus D_{2} \\oplus D_{1} \\oplus D_{0}.\n$$\nConsequently, the odd parity bit $P$ depends only on the original data bits and is completely independent of the control signals $S_{1}$ and $S_{0}$:\n$$\nP = \\overline{D_{3} \\oplus D_{2} \\oplus D_{1} \\oplus D_{0}}.\n$$\nThis is the simplified Boolean expression. It shows that the rotation operation, while appearing complex, has no effect on the final parity calculation.", "answer": "$$\\boxed{\\overline{D_{3}\\oplus D_{2}\\oplus D_{1}\\oplus D_{0}}}$$", "id": "1951242"}]}