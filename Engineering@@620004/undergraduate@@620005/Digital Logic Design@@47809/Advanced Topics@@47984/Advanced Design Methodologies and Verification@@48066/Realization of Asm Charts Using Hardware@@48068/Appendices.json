{"hands_on_practices": [{"introduction": "The first step in transforming an abstract Algorithmic State Machine (ASM) chart into a physical circuit is to determine the logic that drives its memory elements. This foundational practice focuses on that critical translation. Here, you will work with a simple two-state machine and derive the necessary *excitation equation* for a T-flip-flop, which dictates when the state should toggle based on the current state and inputs [@problem_id:1957163]. Mastering this core skill is essential for implementing any sequential logic circuit.", "problem": "A simple sequential circuit is designed to control an automated valve. The behavior of the controller is described by a two-state Algorithmic State Machine (ASM) chart. The two states are `CLOSED` and `OPEN`. The state of the machine is stored in a single T-flip-flop, where the flip-flop's output, denoted by $Q$, represents the state. The state assignment is as follows: `CLOSED` corresponds to $Q=0$, and `OPEN` corresponds to $Q=1$.\n\nThe controller has a single binary input, $S$ (for 'Start'), and a single binary output, $V$ (for 'Valve'). The sequential behavior is defined as:\n\n1.  When in the `CLOSED` state ($Q=0$), the controller monitors the input $S$. If $S=0$, it remains in the `CLOSED` state. If $S=1$, it transitions to the `OPEN` state on the next clock edge.\n2.  When in the `OPEN` state ($Q=1$), the controller again monitors the input $S$. If $S=1$, it remains in the `OPEN` state. If $S=0$, it transitions back to the `CLOSED` state on the next clock edge.\n\nThe output $V$ is a Moore-type output which is asserted high ($V=1$) if and only if the controller is in the `OPEN` state. Otherwise, $V=0$.\n\nYour task is to determine the correct logical expressions for the T-flip-flop's input ($T$) and the system's output ($V$). The expressions should be in terms of the state variable $Q$ and the input $S$.\n\nSelect the option that correctly provides the excitation equation for $T$ and the output equation for $V$. In the options below, the notation $A'$ represents NOT A, $A+B$ represents A OR B, juxtaposition $AB$ represents A AND B, and $A \\oplus B$ represents A XOR B.\n\nA. $T = S$, $V = Q$\n\nB. $T = Q'S$, $V = Q$\n\nC. $T = Q + S$, $V = S$\n\nD. $T = Q \\oplus S$, $V = Q$\n\nE. $T = QS$, $V = Q \\oplus S$", "solution": "From the ASM description, the next state depends only on the input $S$:\n- If $S=0$, the next state is $\\text{CLOSED}$, i.e., $Q^{+}=0$.\n- If $S=1$, the next state is $\\text{OPEN}$, i.e., $Q^{+}=1$.\nThese conditions hold regardless of the present state $Q$, so the next-state function is\n$$Q^{+}=S.$$\n\nFor a T-flip-flop, the characteristic equation is\n$$Q^{+}=T \\oplus Q.$$\nSolving for $T$ gives the excitation equation:\n$$T=Q \\oplus Q^{+}.$$\nSubstituting $Q^{+}=S$ yields\n$$T=Q \\oplus S.$$\n\nThe output $V$ is a Moore output asserted only in the $\\text{OPEN}$ state, which corresponds to $Q=1$, hence\n$$V=Q.$$\n\nComparing with the given options, this corresponds to option D: $T=Q \\oplus S$, $V=Q$.", "answer": "$$\\boxed{D}$$", "id": "1957163"}, {"introduction": "With the fundamentals of excitation logic established, we now move to a complete design problem. This exercise tasks you with creating a Moore-type sequence detector, a common and practical application of Finite State Machines (FSMs) used in digital communications and data processing. You will follow the full design flow: interpreting the specifications, defining states for a Moore machine, and deriving the input logic for D-type flip-flopsâ€”the industry standard for state registers [@problem_id:1957134]. This practice will solidify your ability to turn a behavioral description into a complete hardware blueprint.", "problem": "You are tasked with designing a synchronous digital circuit that acts as a sequence detector. The circuit takes a serial bit-stream, denoted by the input $X$, and has a single output $Z$. The circuit's function is to detect the specific 3-bit overlapping sequence `010`. The output $Z$ must be logic high ($1$) for exactly one clock cycle when the final '0' of the `010` sequence is received. Otherwise, $Z$ remains at logic low ($0$). For instance, for an input $X$ stream of `0101011`, the output $Z$ stream should be `0010100`.\n\nYour final implementation must be a Moore-type Finite State Machine (FSM), a machine where the output depends only on the current state. The state registers must be implemented using D-type flip-flops, with their inputs denoted as $D_1$ and $D_0$ corresponding to state variables $Q_1$ and $Q_0$.\n\nTo ensure a unique solution, you must use the following binary state encoding for your Moore FSM:\n- State A (Initial state, no part of the sequence seen): $Q_1Q_0 = 00$\n- State B (The sequence '0' has been seen): $Q_1Q_0 = 01$\n- State C (The sequence '01' has been seen): $Q_1Q_0 = 10$\n- State D (The detection state, where $Z=1$): $Q_1Q_0 = 11$\n\nWhich of the following options provides the correct set of simplified Sum-of-Products (SOP) logic equations for the D-flip-flop inputs ($D_1$, $D_0$) and the output ($Z$) for this Moore machine?\n\nA. $D_1 = X Q_0 + X' Q_1 Q_0'$, $D_0 = X'$, $Z = Q_1 Q_0$\n\nB. $D_1 = X Q_0$, $D_0 = X'$, $Z = Q_1 Q_0$\n\nC. $D_1 = X' Q_1 + X Q_0$, $D_0 = X'$, $Z = Q_1 Q_0'$\n\nD. $D_1 = X Q_0 + Q_1 Q_0'$, $D_0 = X'$, $Z = Q_1 Q_0$\n\nE. $D_1 = X Q_0$, $D_0 = X'$, $Z = Q_1' Q_0$", "solution": "We design a Moore FSM to detect the overlapping sequence 010. By the Moore property, the output depends only on the current state, and with the given encoding, $Z=1$ only in state $D$ with $Q_{1}Q_{0}=11$. Using D-type flip-flops, the next-state bits satisfy $Q_{1}^{+}=D_{1}$ and $Q_{0}^{+}=D_{0}$.\n\nStates and meanings with the given encoding:\n- $A\\,(00)$: no part matched.\n- $B\\,(01)$: matched the prefix $0$.\n- $C\\,(10)$: matched the prefix $01$.\n- $D\\,(11)$: detection state for $010$ (so $Z=1$ here).\n\nConstruct the state transitions by matching the longest suffix that is also a prefix of the target pattern:\n- From $A$:\n  - If $X=0$: go to $B$ (we have seen $0$).\n  - If $X=1$: stay in $A$.\n- From $B$:\n  - If $X=0$: stay in $B$ (the last symbol is $0$, still matches prefix $0$).\n  - If $X=1$: go to $C$ (we have $01$).\n- From $C$:\n  - If $X=0$: go to $D$ (we have $010$ detected).\n  - If $X=1$: go to $A$ (no nonempty suffix matches a prefix).\n- From $D$:\n  - If $X=0$: go to $B$ (sequence ends in $0$, which is a prefix).\n  - If $X=1$: go to $C$ (sequence ends in $01$, which is a prefix).\n\nWriting next-state bits $(Q_{1}^{+},Q_{0}^{+})$ for each $(Q_{1},Q_{0},X)$:\n- $(00,0)\\to(01)$ gives $D_{1}=0$, $D_{0}=1$.\n- $(00,1)\\to(00)$ gives $D_{1}=0$, $D_{0}=0$.\n- $(01,0)\\to(01)$ gives $D_{1}=0$, $D_{0}=1$.\n- $(01,1)\\to(10)$ gives $D_{1}=1$, $D_{0}=0$.\n- $(10,0)\\to(11)$ gives $D_{1}=1$, $D_{0}=1$.\n- $(10,1)\\to(00)$ gives $D_{1}=0$, $D_{0}=0$.\n- $(11,0)\\to(01)$ gives $D_{1}=0$, $D_{0}=1$.\n- $(11,1)\\to(10)$ gives $D_{1}=1$, $D_{0}=0$.\n\nDerive $D_{0}$: it is $1$ exactly when $X=0$ in all four current states, and $0$ when $X=1$. Hence\n$$\nD_{0}=X'.\n$$\n\nDerive $D_{1}$: collect minterms where $D_{1}=1$:\n- $(01,1)\\to D_{1}=1$ gives $X Q_{1}' Q_{0}$,\n- $(10,0)\\to D_{1}=1$ gives $X' Q_{1} Q_{0}'$,\n- $(11,1)\\to D_{1}=1$ gives $X Q_{1} Q_{0}$.\nThus\n$$\nD_{1}=X Q_{1}' Q_{0}+X' Q_{1} Q_{0}'+X Q_{1} Q_{0}=X Q_{0}+X' Q_{1} Q_{0}'.\n$$\n\nOutput $Z$ is $1$ only in state $D$ with $Q_{1}Q_{0}=11$, hence\n$$\nZ=Q_{1}Q_{0}.\n$$\n\nThese simplified SOP expressions match option A:\n$$\nD_{1}=X Q_{0}+X' Q_{1} Q_{0}',\\quad D_{0}=X',\\quad Z=Q_{1}Q_{0}.\n$$\n\nA quick check on the example input `0101011` yields the state/output sequence $A\\to B\\to C\\to D\\to C\\to D\\to C\\to A$ with the output $Z$ sequence being `0010100`, as required.", "answer": "$$\\boxed{A}$$", "id": "1957134"}, {"introduction": "A successful engineer must not only design circuits but also debug them when they fail. This final practice hones your analytical and problem-solving skills by challenging you to diagnose a fault in a pre-existing Mealy machine implementation. By systematically deriving the correct logic from the ASM chart specification and comparing it to the faulty circuit's equations, you will pinpoint the exact error [@problem_id:1957138]. This exercise simulates a real-world scenario and highlights the importance of rigorous verification in digital design.", "problem": "An engineer is designing a sequential circuit to detect the specific overlapping input sequence `101` using an Algorithmic State Machine (ASM) chart. The circuit is a Mealy machine with a single binary input $X$ and a single binary output $Z$. The output $Z$ should be $1$ only during the clock cycle when the final $1$ of the `101` sequence is detected. The state of the machine is stored in two D-type flip-flops, $Q_1$ and $Q_0$.\n\nThe ASM chart is defined as follows:\n-   **State S0 (binary $Q_1Q_0=00$):** The initial or reset state. If input $X=0$, the machine remains in state S0. If $X=1$, it transitions to state S1. The output $Z$ is always $0$ in this state.\n-   **State S1 (binary $Q_1Q_0=01$):** This state indicates that the last input was $1$. If input $X=0$, the machine transitions to state S2. If $X=1$, it remains in S1 (as the sequence becomes `...11`). The output $Z$ is always $0$ in this state.\n-   **State S2 (binary $Q_1Q_0=10$):** This state indicates that the sequence `10` has been received. If input $X=0$, the sequence is broken, and the machine resets to S0. If $X=1$, the target sequence `101` is complete; the machine transitions to state S1 (as this final $1$ can be the start of a new sequence) and the output $Z$ is asserted to $1$ for this transition.\n-   The state $Q_1Q_0=11$ is unused and can be treated as a don't-care condition.\n\nA junior engineer has proposed an implementation using the flip-flops and standard logic gates. The proposed logic equations for the flip-flop inputs ($D_1$, $D_0$) and the output ($Z$) are given below. However, there is a single error in the implementation, corresponding to one incorrect logic gate.\n\nProposed Equations:\n1.  $D_1 = Q_1' Q_0 X$\n2.  $D_0 = X$\n3.  $Z = Q_1 Q_0' X$\n\nBy deriving the correct logic equations from the ASM chart specification, identify the single incorrect component in the proposed implementation from the options below.\n\nA. The 3-input AND gate used to generate the output $Z$.\nB. The inverter that generates $Q_1'$ for the $D_1$ gate.\nC. The 3-input AND gate used to generate the next-state input $D_1$.\nD. The inverter that generates $Q_0'$ for the $Z$ gate.\nE. The direct wire connection from the input $X$ to the next-state input $D_0$.", "solution": "We translate the ASM specification into next-state and output equations using the assigned encoding $S0 \\equiv Q_{1}Q_{0}=00$, $S1 \\equiv 01$, $S2 \\equiv 10$, with $11$ unused.\n\nFrom the ASM chart:\n- From $S0$ ($Q_{1}Q_{0}=00$): If $X=0$, next state is $00$; if $X=1$, next state is $01$.\n- From $S1$ ($Q_{1}Q_{0}=01$): If $X=0$, next state is $10$; if $X=1$, next state is $01$.\n- From $S2$ ($Q_{1}Q_{0}=10$): If $X=0$, next state is $00$; if $X=1$, next state is $01$.\n\nThe Mealy output is asserted only on the transition that completes $101$, i.e., when in $S2$ and $X=1$, so $Z=1$ if and only if $(Q_{1},Q_{0},X)=(1,0,1)$.\n\nDerive $D_{1}$ (the next value of $Q_{1}$). $D_{1}=1$ exactly when the next state is $S2$ ($10$). From the chart, this occurs only from present $S1$ with $X=0$, i.e., when $Q_{1}=0$, $Q_{0}=1$, $X=0$. Therefore,\n$$D_{1} = Q_{1}'Q_{0}X'.$$\n\nDerive $D_{0}$ (the next value of $Q_{0}$). $D_{0}=1$ exactly when the next state is $S1$ ($01$). From the chart, the next state is $S1$ for any present state in $\\{S0,S1,S2\\}$ whenever $X=1$. Thus,\n$$D_{0} = X.$$\n\nDerive the output $Z$. By the Mealy definition above, $Z=1$ only when in $S2$ ($Q_{1}=1$, $Q_{0}=0$) and $X=1$, hence\n$$Z = Q_{1}Q_{0}'X.$$\n\nCompare with the proposed equations:\n1. Proposed $D_{1} = Q_{1}'Q_{0}X$ versus correct $D_{1} = Q_{1}'Q_{0}X'$. The proposed expression has $X$ where $X'$ is required, so it is incorrect.\n2. Proposed $D_{0} = X$ matches the correct result, so it is correct.\n3. Proposed $Z = Q_{1}Q_{0}'X$ matches the correct result, so it is correct.\n\nHence, the single incorrect component is the 3-input AND gate used to generate $D_{1}$, which should take $Q_{1}'$, $Q_{0}$, and $X'$ as inputs but was implemented with $X$ instead of $X'$.\n\nTherefore, the correct choice is C.", "answer": "$$\\boxed{C}$$", "id": "1957138"}]}