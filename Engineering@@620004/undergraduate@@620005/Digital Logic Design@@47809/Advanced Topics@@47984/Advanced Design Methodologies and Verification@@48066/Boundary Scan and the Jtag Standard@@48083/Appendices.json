{"hands_on_practices": [{"introduction": "The foundation of JTAG testing lies in the Boundary Scan Register (BSR), a serial shift register that connects to the input/output pins of an integrated circuit. Understanding how this register is constructed is the first step toward leveraging boundary scan for testing. This exercise [@problem_id:1917086] guides you through calculating the total length of a BSR based on an IC's pinout, illustrating how different pin types like inputs, outputs, and bidirectional pins contribute to the overall scan chain length.", "problem": "An engineering team is designing a custom Integrated Circuit (IC) for a specialized signal processing application. To ensure the IC is testable after manufacturing, it will incorporate boundary scan logic compliant with the Joint Test Action Group (JTAG) standard, IEEE 1149.1. The IC's pinout is defined as follows:\n\n*   32 dedicated digital input pins.\n*   16 dedicated digital output pins.\n*   8 bidirectional digital I/O pins.\n*   4 tristate digital output pins.\n*   4 dedicated pins for the Test Access Port (TAP): TDI, TDO, TCK, and TMS.\n*   2 dedicated power and ground pins (VCC, GND).\n\nThe Boundary Scan Register (BSR) is constructed by associating boundary scan cells with the functional pins of the IC. The rules for this specific implementation are:\n1.  Each dedicated digital input pin is associated with a single boundary scan cell.\n2.  Each dedicated digital output pin is associated with a single boundary scan cell.\n3.  Each bidirectional I/O pin requires two cells: one data cell for the input/output value and one control cell to determine the pin's direction (input or output).\n4.  Each tristate output pin requires two cells: one data cell for the output value and one control cell to enable or disable the output driver (i.e., to put the pin in a high-impedance state).\n5.  Pins dedicated to the TAP controller and power/ground are not part of the Boundary Scan Register chain.\n\nBased on this specification, what is the total length, in bits, of the Boundary Scan Register?\n\nA. 60\n\nB. 64\n\nC. 72\n\nD. 76\n\nE. 78", "solution": "The Boundary Scan Register (BSR) length equals the total number of boundary scan cells assigned to functional pins, as each cell contributes one bit to the BSR. According to the given implementation rules:\n\n- Each dedicated digital input pin contributes one cell:\n$$32 \\times 1 = 32 \\text{ cells}.$$\n\n- Each dedicated digital output pin contributes one cell:\n$$16 \\times 1 = 16 \\text{ cells}.$$\n\n- Each bidirectional I/O pin contributes two cells (one data and one direction control):\n$$8 \\times 2 = 16 \\text{ cells}.$$\n\n- Each tristate digital output pin contributes two cells (one data and one enable control):\n$$4 \\times 2 = 8 \\text{ cells}.$$\n\n- TAP pins (TDI, TDO, TCK, TMS) and power/ground pins (VCC, GND) are excluded and contribute:\n$$0 \\text{ cells}.$$\n\nSumming all contributions gives the BSR length in bits:\n$$32 + 16 + 16 + 8 = 72.$$\n\nTherefore, the correct option is C.", "answer": "$$\\boxed{C}$$", "id": "1917086"}, {"introduction": "With the JTAG data registers defined, the next step is to control their operation. This control is managed by the Test Access Port (TAP) controller, a small state machine within every JTAG-compliant device. This exercise [@problem_id:1917058] challenges you to determine the precise sequence on the Test Mode Select (`TMS`) line required to navigate the TAP controller to a specific state, a fundamental skill for initiating any JTAG test or debug operation.", "problem": "A digital design engineer is tasked with debugging a newly manufactured Printed Circuit Board (PCB). The engineer plans to use the Joint Test Action Group (JTAG) standard, specifically the IEEE 1149.1 boundary-scan test, to verify the integrity of connections between components. The JTAG interface is controlled by a state machine within the Test Access Port (TAP) controller. This controller's state transitions are dictated by the value of the Test Mode Select (TMS) signal on each rising edge of the Test Clock (TCK).\n\nTo load a test vector into the boundary-scan data register, the TAP controller must be navigated to the `Shift-DR` state. The state transitions relevant to this task are described as follows:\n\n- The TAP controller is guaranteed to enter the `Test-Logic-Reset` state after power-up or by holding TMS high for at least five TCK cycles.\n- From `Test-Logic-Reset`, a TMS value of `0` transitions the controller to the `Run-Test/Idle` state. A TMS value of `1` keeps it in `Test-Logic-Reset`.\n- From `Run-Test/Idle`, a TMS value of `1` transitions to `Select-DR-Scan`. A TMS value of `0` keeps it in `Run-Test/Idle`.\n- From `Select-DR-Scan`, a TMS value of `0` transitions to `Capture-DR`. A TMS value of `1` transitions to `Select-IR-Scan` (the path for the instruction register).\n- From `Capture-DR`, a TMS value of `0` transitions to `Shift-DR`. A TMS value of `1` transitions to `Exit1-DR`.\n- Once in the `Shift-DR` state, a TMS value of `0` will keep the controller in the `Shift-DR` state, allowing for serial data shifting.\n\nAssuming the TAP controller starts in the `Test-Logic-Reset` state, which of the following sequences of TMS values, sampled on four consecutive rising edges of TCK, will correctly navigate the controller to the `Shift-DR` state?\n\nA. 0100\n\nB. 1100\n\nC. 0110\n\nD. 0101\n\nE. 0010", "solution": "We model the TAP controller as a deterministic finite state machine whose state updates occur on each rising edge of TCK and are determined solely by the current state and the sampled TMS value. The controller starts in the `Test-Logic-Reset` state. To reach `Shift-DR` via the data register path, the minimal transition path is:\n`Test-Logic-Reset` --(TMS=0)--> `Run-Test/Idle` --(TMS=1)--> `Select-DR-Scan` --(TMS=0)--> `Capture-DR` --(TMS=0)--> `Shift-DR`.\nThis corresponds to the TMS sequence 0,1,0,0.\n\nWe now verify each option by simulating four consecutive rising edges of TCK with the given TMS sequence:\n\nOption A: `0,1,0,0`\n- Start at `Test-Logic-Reset`; TMS=0 leads to `Run-Test/Idle`.\n- From `Run-Test/Idle`; TMS=1 leads to `Select-DR-Scan`.\n- From `Select-DR-Scan`; TMS=0 leads to `Capture-DR`.\n- From `Capture-DR`; TMS=0 leads to `Shift-DR`.\nResult: `Shift-DR`. This is correct.\n\nOption B: `1,1,0,0`\n- Start at `Test-Logic-Reset`; TMS=1 remains in `Test-Logic-Reset`.\n- From `Test-Logic-Reset`; TMS=1 remains in `Test-Logic-Reset`.\n- From `Test-Logic-Reset`; TMS=0 leads to `Run-Test/Idle`.\n- From `Run-Test/Idle`; TMS=0 remains in `Run-Test/Idle`.\nResult: `Run-Test/Idle`. Not `Shift-DR`.\n\nOption C: `0,1,1,0`\n- Start at `Test-Logic-Reset`; TMS=0 leads to `Run-Test/Idle`.\n- From `Run-Test/Idle`; TMS=1 leads to `Select-DR-Scan`.\n- From `Select-DR-Scan`; TMS=1 leads to `Select-IR-Scan`.\n- From `Select-IR-Scan`; TMS=0 leads to `Capture-IR`.\nResult: `Capture-IR`. Not `Shift-DR`.\n\nOption D: `0,1,0,1`\n- Start at `Test-Logic-Reset`; TMS=0 leads to `Run-Test/Idle`.\n- From `Run-Test/Idle`; TMS=1 leads to `Select-DR-Scan`.\n- From `Select-DR-Scan`; TMS=0 leads to `Capture-DR`.\n- From `Capture-DR`; TMS=1 leads to `Exit1-DR`.\nResult: `Exit1-DR`. Not `Shift-DR`.\n\nOption E: `0,0,1,0`\n- Start at `Test-Logic-Reset`; TMS=0 leads to `Run-Test/Idle`.\n- From `Run-Test/Idle`; TMS=0 remains in `Run-Test/Idle`.\n- From `Run-Test/Idle`; TMS=1 leads to `Select-DR-Scan`.\n- From `Select-DR-Scan`; TMS=0 leads to `Capture-DR`.\nResult: `Capture-DR`. Not `Shift-DR`.\n\nTherefore, only option A reaches `Shift-DR` in four TCK edges from the specified start state.", "answer": "$$\\boxed{A}$$", "id": "1917058"}, {"introduction": "JTAG's power extends beyond single-chip testing to entire printed circuit boards by linking multiple devices into a single scan chain. This exercise [@problem_id:1917044] delves into a board-level scenario, focusing on the Instruction Register (IR) scan. You will analyze how a specific, mandatory feature of the IEEE 1149.1 standard—the `'01'` capture pattern in the IR—can be used to detect and diagnose a faulty device within a JTAG chain, demonstrating a powerful, real-world application.", "problem": "A digital circuit board is being tested using the Joint Test Action Group (JTAG) IEEE 1149.1 standard. The board contains a JTAG chain of two integrated circuits, U1 and U2, connected in series. The chain is configured such that the Test Data Out (TDO) of U2 is connected to the Test Data In (TDI) of U1, and the TDO of U1 serves as the primary TDO of the entire chain. The primary TDI of the chain is connected to the TDI of U2.\n\nThe Instruction Register (IR) of device U1 has a length of 4 bits.\nThe Instruction Register (IR) of device U2 has a length of 5 bits.\n\nDevice U2 is fully compliant with the IEEE 1149.1 standard. According to the standard, when the Test Access Port (TAP) controller enters the `Capture-IR` state, the device's IR must parallel load a pattern with its two least-significant bits (LSBs) being `01`.\nDevice U1 has a manufacturing fault. Its IR behaves like a compliant device in all respects, except that upon entering the `Capture-IR` state, it parallel loads a pattern with its two LSBs being `10`.\nFor both devices, you can assume that all bits of the IR, other than the two specified LSBs, capture a value of `0` in the `Capture-IR` state.\n\nAn external tester drives the Test Mode Select (TMS) and Test Clock (TCK) lines to move the TAP controllers of both devices synchronously into the `Shift-IR` state. During the entire time the TAP controllers are in the `Shift-IR` state, the primary TDI line is held at a constant logic `0`.\n\nWhat is the 9-bit binary sequence observed at the primary TDO pin for the first nine TCK cycles after the TAP controllers have entered the `Shift-IR` state? The first bit in the sequence corresponds to the output at the first TCK cycle in `Shift-IR`, and the last bit corresponds to the output at the ninth TCK cycle.\n\nA. `100001000`\n\nB. `000010010`\n\nC. `100100001`\n\nD. `010010000`\n\nE. `001000010`", "solution": "To determine the bit sequence at the primary Test Data Out (TDO), we must simulate the JTAG Instruction Register scan operation. This involves two main steps: first, determining the value captured in each device's Instruction Register (IR) during the `Capture-IR` state, and second, simulating the serial shifting of these concatenated values out through the TDO pin during the `Shift-IR` state.\n\nStep 1: Determine the state of each Instruction Register after the `Capture-IR` state.\nThe TAP controller transitions to the `Capture-IR` state, where the IRs parallel load their capture values.\n\n- Device U2 (compliant): The IR is 5 bits long. The two least-significant bits (LSBs) must be `01`. All other bits are specified to capture `0`. So, the 5-bit pattern captured by U2's IR is `00001`.\n- Device U1 (faulty): The IR is 4 bits long. The fault causes its two LSBs to be loaded with `10`. All other bits capture `0`. So, the 4-bit pattern captured by U1's IR is `0010`.\n\nStep 2: Understand the structure of the serial scan chain.\nThe problem states the chain configuration is `Primary TDI -> TDI U2 -> TDO U2 -> TDI U1 -> TDO U1 -> Primary TDO`.\nWhen in the `Shift-IR` state, the IRs are connected in series. The total shift register is formed by concatenating the IR of U2 followed by the IR of U1.\nTotal Chain: `[U2_IR] [U1_IR]`\nThe total length of the chain is 5 bits (U2) + 4 bits (U1) = 9 bits.\n\nStep 3: Determine the initial content of the concatenated shift register.\nAt the beginning of the `Shift-IR` state, the 9-bit shift register contains the concatenated captured values:\nContent = `[Value in U2_IR] [Value in U1_IR]`\nContent = `[00001] [0010]`\nThe full 9-bit state of the chain (MSB to LSB) is `000010010`.\n\nStep 4: Simulate the shifting process.\nIn the `Shift-IR` state, on each rising edge of TCK, the entire chain shifts one position towards the primary TDO. The LSB of the last device (U1) is shifted out. A new bit from the primary TDI (held at `0`) is shifted into the MSB of the first device (U2).\n\nThe TDO will observe the bits of the initial state, `000010010`, being read out from right to left (LSB first).\n\n- TCK Cycle 1: The LSB of `000010010` is `0`. TDO output: `0`.\n- TCK Cycle 2: The next bit is `1`. TDO output: `1`.\n- TCK Cycle 3: The next bit is `0`. TDO output: `0`.\n- TCK Cycle 4: The next bit is `0`. TDO output: `0`.\n- TCK Cycle 5: The next bit is `1`. TDO output: `1`.\n- TCK Cycle 6: The next bit is `0`. TDO output: `0`.\n- TCK Cycle 7: The next bit is `0`. TDO output: `0`.\n- TCK Cycle 8: The next bit is `0`. TDO output: `0`.\n- TCK Cycle 9: The next bit is `0`. TDO output: `0`.\n\nThe sequence of bits observed at TDO over the first 9 clock cycles is therefore `010010000`.\n\nStep 5: Match the result with the given options.\nThe calculated sequence is `010010000`. This corresponds to option D.", "answer": "$$\\boxed{D}$$", "id": "1917044"}]}