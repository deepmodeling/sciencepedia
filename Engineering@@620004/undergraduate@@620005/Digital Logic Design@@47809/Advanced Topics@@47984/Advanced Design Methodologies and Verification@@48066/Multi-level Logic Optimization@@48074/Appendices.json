{"hands_on_practices": [{"introduction": "The first step in understanding multi-level logic optimization is to recognize that how we structure a Boolean expression directly impacts its cost. This exercise demonstrates that different, yet algebraically equivalent, factored forms of the same function can result in different literal counts. By exploring alternative factorization paths, you will gain a foundational insight into why optimization is not just about simplification, but about making strategic choices to achieve the most efficient circuit [@problem_id:1948290].", "problem": "In digital circuit design, multi-level logic optimization is a technique used to reduce the complexity and cost of a circuit. A common metric for cost is the literal count. A literal is a single occurrence of a variable or its complement in a Boolean expression. The literal count of an expression is the sum of all literals. For example, the expression $F = a'b + c$ has 3 literals ($a'$, $b$, and $c$).\n\nConsider the Boolean function of four variables given in sum-of-products form:\n$$F(w, x, y, z) = wx + wy + wz + xyz$$\nYour task is to explore two different factorization paths to create two distinct multi-level forms of this function and compare their literal counts.\n\nPath 1: Starting with the original function $F$, create a new expression, $F_1$, by factoring out the variable $w$ from all terms where it is present.\n\nPath 2: Starting again with the original function $F$, create a new expression, $F_2$, by factoring out the variable $x$ from all terms where it is present.\n\nDetermine the literal count for the resulting expression $F_1$ and the literal count for the resulting expression $F_2$. Your final answer should be a pair of integers representing the literal counts for $F_1$ and $F_2$, in that specific order.", "solution": "We are given the Boolean function in sum-of-products form:\n$$F(w,x,y,z)=wx+wy+wz+xyz.$$\nA literal is any occurrence of a variable or its complement in the expression. The literal count of a multi-level expression is the total number of literal occurrences across the entire factored form.\n\nPath 1: Factor out $w$ from all terms where it appears. Using distributivity $ab+ac=a(b+c)$,\n$$wx+wy+wz = w(x+y+z).$$\nTherefore,\n$$F_{1}=w(x+y+z)+xyz.$$\nLiteral count for $F_{1}$:\n- In $w(x+y+z)$ there are $1$ occurrence of $w$ and $x,y,z$ each once inside the parentheses, contributing $1+3=4$ literals.\n- In $xyz$ there are $3$ literals.\nTotal for $F_{1}$: $4+3=7$.\n\nPath 2: Factor out $x$ from all terms where it appears. In the original $F$, $x$ appears in $wx$ and $xyz$. Using $ab+ac=a(b+c)$,\n$$wx+xyz = x(w+yz).$$\nTherefore,\n$$F_{2}=wy+wz+x(w+yz).$$\nLiteral count for $F_{2}$:\n- $wy$ contributes $2$ literals.\n- $wz$ contributes $2$ literals.\n- In $x(w+yz)$, there is $1$ occurrence of $x$ and inside the parentheses $w$ contributes $1$ literal while $yz$ contributes $2$ literals, for a subtotal of $1+1+2=4$ literals.\nTotal for $F_{2}$: $2+2+4=8$.\n\nThus, the literal counts are $7$ for $F_{1}$ and $8$ for $F_{2}$, in that order.", "answer": "$$\\boxed{\\begin{pmatrix} 7 & 8 \\end{pmatrix}}$$", "id": "1948290"}, {"introduction": "Moving beyond simple literal counts, real-world logic optimization involves minimizing cost under specific hardware constraints. This problem challenges you to evaluate different optimization strategies by identifying and extracting common sub-expressions, a key technique for maximizing logic sharing. You will learn to calculate a more practical cost metric, the total gate-input count, based on a given technology library, which is a crucial skill for designing efficient circuits on platforms like FPGAs [@problem_id:1948263].", "problem": "You are a logic design engineer tasked with optimizing a digital circuit for a specific Field-Programmable Gate Array (FPGA) architecture. The circuit implements the Boolean function $F$ of eight variables, A, B, C, D, E, G, H, and I, given in its initial sum-of-products form:\n\n$$F(A, B, C, D, E, G, H, I) = ABC'D + ABGHI + EGHI + EC'D$$\n\nYour technology library is constrained, providing only 2-input and 3-input AND gates, and 2-input and 3-input OR gates. The primary input variables are available in both their true (e.g., A) and complemented (e.g., A') forms; therefore, the cost of inverters (NOT gates) should not be included in your analysis.\n\nThe primary optimization goal is to minimize the total gate-input count of the circuit. The total gate-input count is defined as the sum of the number of inputs for every gate used in the implementation. For any logic operation requiring more than 3 inputs (e.g., a 4-input AND), it must be decomposed into a cascade of the available 2-input and 3-input gates. This decomposition must be done in a way that minimizes the number of gates required for that specific operation, which is achieved by prioritizing the use of 3-input gates.\n\nConsider the following three optimization strategies based on algebraic factorization:\n- **Strategy I**: Factor out the common sub-expression $X = C'D$.\n- **Strategy II**: Factor out the common sub-expression $Y = GHI$.\n- **Strategy III**: Factor out both $X = C'D$ and $Y = GHI$, and then perform a second level of factorization on the resulting expression.\n\nWhich strategy results in the most optimal circuit (i.e., the lowest total gate-input count), and what is that count?\n\nA. Strategy I, with a total gate-input count of 23.\n\nB. Strategy II, with a total gate-input count of 20.\n\nC. The un-optimized two-level circuit is already optimal, with a total gate-input count of 25.\n\nD. Strategy III, with a total gate-input count of 15.\n\nE. Strategy III, with a total gate-input count of 13.", "solution": "Given $F(A,B,C,D,E,G,H,I)=ABC'D+ABGHI+EGHI+EC'D$, only $2$-input and $3$-input AND/OR gates are allowed, and inverters are free. For any $k$-input AND/OR with $k>3$, we decompose using as many $3$-input gates as possible to minimize gates, which yields the following minimal gate-input counts:\n- $2$-input AND/OR: $2$\n- $3$-input AND/OR: $3$\n- $4$-input AND/OR: $3+2=5$\n- $5$-input AND/OR: $3+2+2=7$\n\nBaseline (unoptimized two-level SOP):\n- $ABC'D$: $4$-input AND $\\rightarrow 5$\n- $ABGHI$: $5$-input AND $\\rightarrow 7$\n- $EGHI$: $4$-input AND $\\rightarrow 5$\n- $EC'D$: $3$-input AND $\\rightarrow 3$\n- OR the four products: $4$-input OR $\\rightarrow 5$\nTotal: $5+7+5+3+5=25$.\n\nStrategy I (factor $X=C'D$):\nAlgebraic factorization: \n$$F=X(AB+E)+ABGHI+EGHI.$$\nImplement:\n- $X=C'D$: $2$-input AND $\\rightarrow 2$\n- $AB$: $2$-input AND $\\rightarrow 2$\n- $(AB)+E$: $2$-input OR $\\rightarrow 2$\n- $X(AB+E)$: $2$-input AND $\\rightarrow 2$\n- $ABGHI$: $5$-input AND $\\rightarrow 7$\n- $EGHI$: $4$-input AND $\\rightarrow 5$\n- OR the three terms: $3$-input OR $\\rightarrow 3$\nTotal: $2+2+2+2+7+5+3=23$.\n\nStrategy II (factor $Y=GHI$):\nAlgebraic factorization:\n$$F=ABY+EY+ABC'D+EC'D=Y(AB+E)+ABC'D+EC'D.$$\nImplement:\n- $Y=GHI$: $3$-input AND $\\rightarrow 3$\n- $AB$: $2$-input AND $\\rightarrow 2$\n- $(AB)+E$: $2$-input OR $\\rightarrow 2$\n- $Y(AB+E)$: $2$-input AND $\\rightarrow 2$\n- $ABC'D$: $4$-input AND $\\rightarrow 5$\n- $EC'D$: $3$-input AND $\\rightarrow 3$\n- OR the three terms: $3$-input OR $\\rightarrow 3$\nTotal: $3+2+2+2+5+3+3=20$.\n\nStrategy III (factor both $X=C'D$ and $Y=GHI$, then second-level factorization):\nFirst factor:\n$$F=X(AB+E)+Y(AB+E)=(AB+E)(X+Y).$$\nImplement:\n- $AB$: $2$-input AND $\\rightarrow 2$\n- $(AB)+E$: $2$-input OR $\\rightarrow 2$\n- $X=C'D$: $2$-input AND $\\rightarrow 2$\n- $Y=GHI$: $3$-input AND $\\rightarrow 3$\n- $X+Y$: $2$-input OR $\\rightarrow 2$\n- $(AB+E)(X+Y)$: $2$-input AND $\\rightarrow 2$\nTotal: $2+2+2+3+2+2=13$.\n\nComparing totals: baseline $25$, Strategy I $23$, Strategy II $20$, Strategy III $13$. The most optimal is Strategy III with a total gate-input count of $13$.", "answer": "$$\\boxed{E}$$", "id": "1948263"}, {"introduction": "A central theme in digital design is the trade-off between circuit area and speed. While factoring an expression can effectively reduce its literal count and thus the circuit's area, it may introduce additional logic levels that increase propagation delay. This practice illuminates this fundamental area-delay trade-off, guiding you to first optimize an expression for minimal area and then restructure the resulting critical path to meet a strict performance target, a common task for high-performance system designers [@problem_id:1948269].", "problem": "In digital logic synthesis, a key trade-off exists between circuit area (related to the number of gates and inputs) and circuit speed (propagation delay). Multi-level logic optimization often involves factoring Boolean expressions to reduce area, but this can sometimes increase the delay of the critical path.\n\nConsider a Boolean function $F$ of five variables $a, b, c, d, x$, initially defined in Sum-of-Products (SOP) form as:\n$F(a, b, c, d, x) = a'b'c + a'b'd + cx$\n\nFor all calculations, use the following conventions and a simplified delay model:\n- Boolean operations are denoted as sum `+` for OR, juxtaposition (e.g., $xy$) for AND, and a prime `'` for NOT.\n- Any elementary logic gate (AND, OR, NOT) with any number of inputs has a uniform propagation delay of one unit, $\\tau$.\n- All primary input variables and their complements (e.g., $a$ and $a'$) are considered to be available at time $t=0$.\n\nYour task is to re-synthesize this function for high performance by following two steps:\n1. First, apply algebraic factoring to the initial SOP expression for $F$ to create an equivalent expression, $F_{\\text{factored}}$, that minimizes the total number of literal occurrences.\n2. The factoring process in step 1 creates a new critical path that increases the overall circuit delay. Starting from your expression for $F_{\\text{factored}}$, restructure the logic network to create a final expression, $F_{\\text{optimized}}$, such that the maximum signal propagation delay from any primary input to the output $F$ is no more than $2\\tau$. Note that your restructuring should only modify the logic that lies on the critical delay path of the $F_{\\text{factored}}$ network.\n\nProvide the final expression for $F_{\\text{optimized}}$.", "solution": "We start from the given SOP:\n$$F(a,b,c,d,x)=a'b'c+a'b'd+cx.$$\n\nStep 1 (algebraic factoring to minimize literal occurrences):\nApply distributivity $AB C+AB D=AB(C+D)$ to the first two terms:\n$$F=a'b'(c+d)+cx.$$\nLiteral count comparison:\n- Original SOP: $a'b'c$ has $3$ literals, $a'b'd$ has $3$ literals, and $cx$ has $2$ literals, totaling $8$.\n- Factored form: $a'b'(c+d)$ contributes $a',b',c,d$ for $4$ literals, and $cx$ contributes $2$, totaling $6$.\nThus $F_{\\text{factored}}=a'b'(c+d)+cx$ minimizes the total number of literal occurrences.\n\nDelay analysis of $F_{\\text{factored}}$ under the given model (each AND/OR/NOT of any fan-in has delay $\\tau$, all inputs and their complements available at $t=0$):\n- Compute $a'b'$ with one AND gate: ready at $t=\\tau$.\n- Compute $(c+d)$ with one OR gate: ready at $t=\\tau$.\n- AND these to form $a'b'(c+d)$: ready at $t=2\\tau$.\n- Compute $cx$ with one AND gate: ready at $t=\\tau$.\n- Final OR combining $a'b'(c+d)$ and $cx$: ready at $t=3\\tau$ on the $a,b,c,d$ paths and $t=2\\tau$ on the $x$ path.\nTherefore the critical path delay is $3\\tau$ through the $a,b,c,d$ inputs via $a'b'(c+d)$.\n\nStep 2 (restructure only logic on the critical path to achieve maximum delay no more than $2\\tau$):\nThe critical subnetwork is the factored term $a'b'(c+d)$ feeding the final OR. To reduce depth, expand this term back into two product terms so that all product terms feed a single final OR (a two-level SOP), while leaving the noncritical branch $cx$ unchanged:\n$$a'b'(c+d)=a'b'c+a'b'd.$$\nThus\n$$F_{\\text{optimized}}=a'b'c+a'b'd+cx.$$\nDelay analysis of $F_{\\text{optimized}}$:\n- Each product term ($a'b'c$, $a'b'd$, $cx$) is computed by a single AND gate from primary inputs available at $t=0$, so each product is ready at $t=\\tau$.\n- A single final OR gate (of three inputs) produces $F$ at $t=2\\tau$.\nHence the maximum propagation delay from any primary input to $F$ is $2\\tau$, as required. Only the logic on the original critical path ($a'b'(c+d)$ and the final OR) was modified; the $cx$ branch remained unchanged.", "answer": "$$\\boxed{a'b'c+a'b'd+cx}$$", "id": "1948269"}]}