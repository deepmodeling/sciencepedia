{"hands_on_practices": [{"introduction": "Mastering Reduced Ordered Binary Decision Diagrams (ROBDDs) begins with the fundamental skill of constructing them from a given Boolean function. This exercise walks you through creating the ROBDD for a 2-to-1 multiplexer, a ubiquitous component in digital systems. By applying the Shannon decomposition with a fixed variable order, you will practice the core principles of building and reducing a BDD into its unique, canonical form [@problem_id:1957453].", "problem": "A 2-to-1 multiplexer (MUX) is a digital logic circuit that selects one of two data inputs, $I_0$ or $I_1$, and routes it to a single output, $F$. The selection is controlled by a select line, $S$. The Boolean function for the multiplexer is given by:\n$$F(S, I_0, I_1) = (\\neg S \\land I_0) \\lor (S \\land I_1)$$\n\nYour task is to determine the structure of the Reduced Ordered Binary Decision Diagram (ROBDD) for this function. The construction must follow the strict variable ordering $S < I_0 < I_1$, meaning nodes for $S$ must appear above nodes for $I_0$, which must appear above nodes for $I_1$ on any path from the root to a terminal.\n\nThe structure of each candidate ROBDD is described below using a set of non-terminal nodes and two terminal nodes (`0` for logical false, `1` for logical true). Each non-terminal node is described by its label, the variable it tests, and its low and high children, in the format `(label: Variable, Low-child, High-child)`. The low-child corresponds to the variable being 0, and the high-child corresponds to the variable being 1. The root of the diagram for the function $F$ is always the node labeled `n1`.\n\nWhich of the following descriptions correctly represents the ROBDD for the 2-to-1 multiplexer with the given variable ordering?\n\nA. The diagram consists of 3 non-terminal nodes (`n1`, `n2`, `n3`) and 2 terminal nodes (`0`, `1`).\n- `n1`: (Variable: $S$, Low-child: `n2`, High-child: `n3`)\n- `n2`: (Variable: $I_0$, Low-child: `0`, High-child: `1`)\n- `n3`: (Variable: $I_1$, Low-child: `0`, High-child: `1`)\n\nB. The diagram consists of 4 non-terminal nodes (`n1`, `n2`, `n3`, `n4`) and 2 terminal nodes (`0`, `1`).\n- `n1`: (Variable: $S$, Low-child: `n2`, High-child: `n3`)\n- `n2`: (Variable: $I_0$, Low-child: `0`, High-child: `1`)\n- `n3`: (Variable: $I_0$, Low-child: `n4`, High-child: `n4`)\n- `n4`: (Variable: $I_1$, Low-child: `0`, High-child: `1`)\n\nC. The diagram consists of 4 non-terminal nodes (`n1`, `n2`, `n3`, `n4`) and 2 terminal nodes (`0`, `1`).\n- `n1`: (Variable: $I_0$, Low-child: `n2`, High-child: `n3`)\n- `n2`: (Variable: $S$, Low-child: `0`, High-child: `n4`)\n- `n3`: (Variable: $S$, Low-child: `1`, High-child: `n4`)\n- `n4`: (Variable: $I_1$, Low-child: `0`, High-child: `1`)\n\nD. The diagram consists of 3 non-terminal nodes (`n1`, `n2`, `n3`) and 2 terminal nodes (`0`, `1`).\n- `n1`: (Variable: $S$, Low-child: `n2`, High-child: `n3`)\n- `n2`: (Variable: $I_0$, Low-child: `0`, High-child: `1`)\n- `n3`: (Variable: $I_0$, Low-child: `1`, High-child: `0`)", "solution": "We are given the Boolean function for a 2-to-1 multiplexer:\n$$\nF(S, I_0, I_1) = (\\neg S \\land I_0) \\lor (S \\land I_1),\n$$\nwith the required variable ordering $S < I_0 < I_1$, meaning along any path from the root to a terminal, the variables must appear in nondecreasing order according to $S$, then $I_0$, then $I_1$. In a reduced ordered binary decision diagram (ROBDD), we use the Shannon decomposition with respect to the root variable and apply reduction rules: merging isomorphic subgraphs and eliminating nodes whose low and high children are identical.\n\nFirst, decompose $F$ with respect to $S$:\n- For $S=0$:\n$$\nF|_{S=0} = (\\neg 0 \\land I_0) \\lor (0 \\land I_1) = (1 \\land I_0) \\lor 0 = I_0.\n$$\nThus, the low child of the root (for $S=0$) must represent $I_0$. With the ordering $S < I_0 < I_1$, the canonical node for $I_0$ that encodes $I_0$ is a non-terminal testing $I_0$ with low-child $0$ and high-child $1$.\n\n- For $S=1$:\n$$\nF|_{S=1} = (\\neg 1 \\land I_0) \\lor (1 \\land I_1) = (0 \\land I_0) \\lor I_1 = I_1.\n$$\nThus, the high child of the root (for $S=1$) must represent $I_1$. With the same ordering, we may skip $I_0$ on this branch since the function does not depend on $I_0$ here; the canonical node for $I_1$ that encodes $I_1$ is a non-terminal testing $I_1$ with low-child $0$ and high-child $1$.\n\nTherefore, the ROBDD structure is:\n- Root node testing $S$, with low-child a node testing $I_0$ with children $(0,1)$, and high-child a node testing $I_1$ with children $(0,1)$.\n\nNow evaluate the options:\n\n- Option A matches exactly this structure:\n  - `n1`: $S$ with low-child `n2` and high-child `n3`.\n  - `n2`: $I_0$ with children $(0,1)$, representing $I_0$.\n  - `n3`: $I_1$ with children $(0,1)$, representing $I_1$.\n  This respects the ordering and is reduced.\n\n- Option B includes an extra node `n3` testing $I_0$ whose low and high children are both `n4`. This violates reduction since a node with identical low and high children must be eliminated in an ROBDD. Hence B is not reduced.\n\n- Option C has the root testing $I_0$, which violates the required ordering $S < I_0 < I_1$. Hence C is invalid.\n\n- Option D has the high branch for $S=1$ leading to a node testing $I_0$ with children $(1,0)$, which encodes $\\neg I_0$ rather than $I_1$. Hence it does not represent the given function.\n\nTherefore, the correct ROBDD under the specified ordering is given by Option A.", "answer": "$$\\boxed{A}$$", "id": "1957453"}, {"introduction": "Once you can construct an ROBDD, the next step is to use it for analysis. One of the most powerful applications of ROBDDs is in logic simplification, as their canonical form makes certain properties of a function immediately obvious. This practice challenges you to use the structure of an ROBDD to determine if any input variables in a given function are redundant, a crucial task in optimizing digital circuits [@problem_id:1957460].", "problem": "In digital logic design, a Boolean function can be graphically represented by a Reduced Ordered Binary Decision Diagram (ROBDD), which is a canonical representation that is often more compact than a truth table or a standard Boolean expression. The process of creating an ROBDD involves building an Ordered BDD (OBDD) and then applying reduction rules.\n\nAn Ordered BDD is a directed acyclic graph where non-terminal nodes are labeled with input variables and have two children (low for variable=0, high for variable=1), and variables appear in a fixed order on any path. A ROBDD is an OBDD where the following two rules have been applied exhaustively:\n1.  **Merge Rule:** Any two nodes that have the same variable label, same low-child, and same high-child are merged into a single node.\n2.  **Elimination Rule:** Any node whose low-child and high-child point to the same node is eliminated, and its incoming edges are redirected to its child.\n\nA variable is considered redundant in a function if the functionâ€™s output value does not depend on that variable. This redundancy is manifested in the final ROBDD structure by the complete absence of any node labeled with that variable.\n\nConsider the Boolean function $f(A,B,C)$ used to trigger a safety alarm in an industrial system:\n$$f(A,B,C) = AB + A\\overline{B}C + \\overline{A}B$$\n\nYour task is to analyze this function. First, conceptually construct the ROBDD for the function $f$ using the variable ordering $A < B < C$ (meaning $A$ is closest to the root). Then, based on the structure of the final ROBDD, determine which input variable, if any, is redundant.\n\nWhich of the following statements is correct?\n\nA. Variable A is redundant.\nB. Variable B is redundant.\nC. Variable C is redundant.\nD. No variables are redundant.", "solution": "Let juxtaposition denote logical conjunction, $+$ denote logical disjunction, and $\\overline{(\\cdot)}$ denote logical negation. The given function is\n$$\nf(A,B,C)=AB+A\\overline{B}C+\\overline{A}B.\n$$\nFirst, we simplify the function to its minimal sum-of-products form. Using a Karnaugh map or Boolean algebra, the function can be shown to reduce to:\n$$\nf = B + AC.\n$$\nThis simplified form clearly depends on all three variables, so no variable is redundant. To confirm this via the ROBDD structure, we construct the diagram with the variable order $A<B<C$.\n\nUse Shannon decomposition with respect to $A$:\n$$\nf = A\\,f_{A=1} + \\overline{A}\\,f_{A=0},\n$$\nwhere\n$$\nf_{A=1} = f(1,B,C) = B + C,\n$$\nand\n$$\nf_{A=0} = f(0,B,C) = B.\n$$\nTherefore, the OBDD rooted at $A$ has:\n- Low child (for $A=0$) computing the function $B$.\n- High child (for $A=1$) computing the function $B+C$.\n\nBuild the subgraphs under the fixed order $B<C$:\n1. For $f_{A=0}=B$: a node labeled $B$ with low edge to terminal $0$ and high edge to terminal $1$.\n2. For $f_{A=1}=B+C$: a node labeled $B$ whose low edge (for $B=0$) leads to the function $C$ (realized by a node labeled $C$ with children $(0,1)$), and whose high edge (for $B=1$) leads to terminal $1$.\n\nApply ROBDD reductions:\n- Elimination rule: No nonterminal node has identical low and high children, so no node is eliminated.\n- Merge rule: The two $B$ nodes are not merged because their child pairs differ: one has children $(0,1)$, while the other has children (a node for $C$, 1). The $A$ node remains because its low and high children represent distinct subgraphs ($B$ versus $B+C$).\n\nIn the resulting ROBDD, there is a node labeled $A$ at the root, at least one node labeled $B$ (in fact, two distinct ones), and a node labeled $C$ (in the $A=1$, $B=0$ subgraph). Since all three variables appear as node labels in the final ROBDD, no variable is redundant.\n\nEquivalently, from the simplified form $f=B+AC$:\n- If $(A,C)=(0,0)$, then $f=B$, so $f$ depends on $B$.\n- If $(B,C)=(0,1)$, then $f=A$, so $f$ depends on $A$.\n- If $(A,B)=(1,0)$, then $f=C$, so $f$ depends on $C$.\n\nTherefore, no variables are redundant.", "answer": "$$\\boxed{D}$$", "id": "1957460"}, {"introduction": "Beyond simplifying logic, ROBDDs are instrumental in the field of formal verification for performing quantitative analysis on complex systems. This problem shifts the focus from building a diagram to interpreting one, tasking you with counting the number of solutions that satisfy a specific condition. By learning to traverse a given ROBDD, you will see how this compact data structure can be used to efficiently answer complex questions about a Boolean function's behavior [@problem_id:1957479].", "problem": "A Reduced Ordered Binary Decision Diagram (ROBDD) is a data structure used to represent a Boolean function over a set of variables. It is a directed acyclic graph with two terminal nodes, a `0-terminal` and a `1-terminal`. All other nodes are non-terminal. Each non-terminal node $U$ is uniquely identified and associated with a Boolean variable $\\operatorname{var}(U)$. It has two outgoing edges leading to its children: a `low` child, $\\operatorname{low}(U)$, corresponding to the assignment $\\operatorname{var}(U) = 0$, and a `high` child, $\\operatorname{high}(U)$, corresponding to the assignment $\\operatorname{var}(U) = 1$. In an ROBDD, there is a strict total ordering of the variables, and for any non-terminal node $U$, if its children are also non-terminal, the variable of $U$ must come before the variables of its children in the ordering.\n\nConsider a Boolean function $f(x_1, x_2, x_3, x_4)$ represented by an ROBDD with the variable ordering $x_1 < x_2 < x_3 < x_4$. The structure of the ROBDD is defined as follows:\n\n-   **Terminals**: A `0-terminal` (T0) and a `1-terminal` (T1).\n-   **Node N4**: $\\operatorname{var}(N4) = x_4$, $\\operatorname{low}(N4) = T0$, $\\operatorname{high}(N4) = T1$.\n-   **Node N3**: $\\operatorname{var}(N3) = x_3$, $\\operatorname{low}(N3) = T0$, $\\operatorname{high}(N3) = N4$.\n-   **Node N2**: $\\operatorname{var}(N2) = x_2$, $\\operatorname{low}(N2) = N3$, $\\operatorname{high}(N2) = T1$.\n-   **Node N1 (Root)**: $\\operatorname{var}(N1) = x_1$, $\\operatorname{low}(N1) = N3$, $\\operatorname{high}(N1) = N2$.\n\nAn assignment of Boolean values to the variables $(x_1, x_2, x_3, x_4)$ satisfies the function if the path traced from the root node N1, following the `low` or `high` branches according to the variable assignments, terminates at the `1-terminal`.\n\nCalculate the total number of satisfying assignments for the function $f$ where exactly three of the four variables ($x_1, x_2, x_3, x_4$) are assigned the value 1.", "solution": "We interpret the ROBDD node-by-node as Boolean expressions, using the variable ordering constraint $x_{1}<x_{2}<x_{3}<x_{4}$ to ensure correctness of child relations.\n\nFirst, identify the function realized by each internal node from its structure:\n- Node $N4$ has $\\operatorname{var}(N4)=x_{4}$, $\\operatorname{low}(N4)=T0$, $\\operatorname{high}(N4)=T1$, so $N4$ computes $x_{4}$.\n- Node $N3$ has $\\operatorname{var}(N3)=x_{3}$, $\\operatorname{low}(N3)=T0$, $\\operatorname{high}(N3)=N4$, hence $N3$ computes $x_{3}\\land x_{4}$.\n- Node $N2$ has $\\operatorname{var}(N2)=x_{2}$, $\\operatorname{low}(N2)=N3$, $\\operatorname{high}(N2)=T1$, hence $N2$ computes $x_{2}\\lor(x_{3}\\land x_{4})$.\n- The root $N1$ has $\\operatorname{var}(N1)=x_{1}$, $\\operatorname{low}(N1)=N3$, $\\operatorname{high}(N1)=N2$. Therefore, the function $f$ realized by the ROBDD is\n$$\nf=(x_{1}\\land (x_{2}\\lor(x_{3}\\land x_{4})))\\lor(\\lnot x_{1}\\land (x_{3}\\land x_{4})).\n$$\n\nWe are to count assignments with exactly three ones among $(x_{1},x_{2},x_{3},x_{4})$ that satisfy $f=1$. There are $\\binom{4}{3}=4$ such assignments in total; we verify which satisfy $f$ by case analysis on $x_{1}$.\n\nCase $x_{1}=0$: To have exactly three ones overall, we must have $(x_{2},x_{3},x_{4})=(1,1,1)$. For $x_{1}=0$, the function reduces to $f=x_{3}\\land x_{4}$, which equals $1$ when $x_{3}=1$ and $x_{4}=1$. Thus this unique assignment satisfies $f$. This contributes $1$ satisfying assignment.\n\nCase $x_{1}=1$: To have exactly three ones overall, $(x_{2},x_{3},x_{4})$ must have exactly two ones. The possibilities are $(1,1,0)$, $(1,0,1)$, and $(0,1,1)$. For $x_{1}=1$, the function reduces to $f=x_{2}\\lor(x_{3}\\land x_{4})$. Evaluating:\n- $(x_{2},x_{3},x_{4})=(1,1,0)$ gives $f=1\\lor(1\\land 0)=1$.\n- $(1,0,1)$ gives $f=1\\lor(0\\land 1)=1$.\n- $(0,1,1)$ gives $f=0\\lor(1\\land 1)=1$.\nAll three assignments satisfy $f$. This contributes $3$ satisfying assignments.\n\nSumming both cases, the total number of satisfying assignments with exactly three ones is $1+3=4$.", "answer": "$$\\boxed{4}$$", "id": "1957479"}]}