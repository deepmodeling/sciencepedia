{"hands_on_practices": [{"introduction": "A primary goal in digital circuit testing is to create a set of test patterns that is both efficient and effective. To measure effectiveness, we use the metric of fault coverage, which quantifies what percentage of potential manufacturing defects our tests can find. This exercise provides a foundational, hands-on opportunity to calculate this crucial metric by simulating the behavior of a circuit in the presence of various \"stuck-at\" faults, a standard model for defects in digital logic [@problem_id:1928143].", "problem": "A digital circuit is designed to implement a specific logic function for an aerospace control system. The circuit has four inputs, designated A, B, C, and D, and a single output, F. The logical function is described by the Boolean expression:\nF(A, B, C, D) = (A AND (NOT B)) OR (C AND D).\n\nTo ensure reliability, a test procedure is developed based on the single stuck-at fault model. In this model, a fault is a single line in the circuit being permanently stuck at a logical 0 (stuck-at-0) or a logical 1 (stuck-at-1). For your analysis, consider the complete set of possible stuck-at faults on the four primary inputs (A, B, C, D) and the single primary output (F). Additionally, consider the faults at the outputs of the two intermediate AND gates. Let G1 be the output of (A AND (NOT B)) and G2 be the output of (C AND D), so the function is F = G1 OR G2. The fault list must also include stuck-at-0 and stuck-at-1 faults for G1 and G2.\n\nThe following set of three test patterns is applied to the circuit's inputs:\n1.  (A, B, C, D) = (1, 0, 0, 0)\n2.  (A, B, C, D) = (0, 0, 1, 1)\n3.  (A, B, C, D) = (1, 1, 0, 1)\n\nCalculate the fault coverage achieved by this set of test patterns. Fault coverage is defined as the ratio of the number of unique faults detected by the test set to the total number of possible faults considered. Express your answer as a decimal value, rounded to three significant figures.", "solution": "Let the circuit be defined by the Boolean function $F=(A \\land \\lnot B)\\lor(C \\land D)$ with internal nodes $G1=A \\land \\lnot B$ and $G2=C \\land D$, so $F=G1 \\lor G2$. Under the single stuck-at fault model, the considered fault sites are the four primary inputs $A,B,C,D$, the primary output $F$, and the two internal nodes $G1,G2$, each with stuck-at-0 and stuck-at-1. Thus the total number of faults is $7 \\times 2=14$.\n\nEvaluate the fault-free responses for the three test patterns:\n1) $(A,B,C,D)=(1,0,0,0)$ gives $G1=1 \\land 1=1$, $G2=0 \\land 0=0$, hence $F=1 \\lor 0=1$.\n2) $(0,0,1,1)$ gives $G1=0 \\land 1=0$, $G2=1 \\land 1=1$, hence $F=0 \\lor 1=1$.\n3) $(1,1,0,1)$ gives $G1=1 \\land 0=0$, $G2=0 \\land 1=0$, hence $F=0 \\lor 0=0$.\n\nFaults at the primary output:\n- $F$ sa0: detected by any pattern with good $F=1$ (patterns 1 and 2), hence detected.\n- $F$ sa1: detected by any pattern with good $F=0$ (pattern 3), hence detected.\n\nFaults at internal nodes:\n- $G1$ sa0 forces $F=G2$; detection requires $G1=1$ and $G2=0$. Only pattern 1 satisfies this, so detected.\n- $G1$ sa1 forces $F=1$; detection requires good $F=0$, which occurs in pattern 3, so detected.\n- $G2$ sa0 forces $F=G1$; detection requires $G2=1$ and $G1=0$. Pattern 2 satisfies this, so detected.\n- $G2$ sa1 forces $F=1$; detection requires good $F=0$, which occurs in pattern 3, so detected.\n\nFaults at primary inputs, analyzed per pattern by exciting the fault (applied value opposite to stuck value) and recomputing $F$:\n\nPattern 1 $(1,0,0,0)$ with good $F=1$:\n- $A$ sa0: becomes $(0,0,0,0)$, $F=(0 \\land 1)\\lor(0 \\land 0)=0$, change $1 \\to 0$, detected.\n- $B$ sa1: becomes $(1,1,0,0)$, $F=(1 \\land 0)\\lor(0 \\land 0)=0$, change $1 \\to 0$, detected.\n- $C$ sa1: becomes $(1,0,1,0)$, $F=(1 \\land 1)\\lor(1 \\land 0)=1$, no change, not detected.\n- $D$ sa1: becomes $(1,0,0,1)$, $F=(1 \\land 1)\\lor(0 \\land 1)=1$, no change, not detected.\nOther stuck values equal applied values, hence no excitation.\n\nPattern 2 $(0,0,1,1)$ with good $F=1$:\n- $C$ sa0: becomes $(0,0,0,1)$, $F=(0 \\land 1)\\lor(0 \\land 1)=0$, change $1 \\to 0$, detected.\n- $D$ sa0: becomes $(0,0,1,0)$, $F=(0 \\land 1)\\lor(1 \\land 0)=0$, change $1 \\to 0$, detected.\nChanges $A$ sa1 or $B$ sa1 do not alter $F$ from $1$, so not detected. Other stuck values equal applied values.\n\nPattern 3 $(1,1,0,1)$ with good $F=0$:\n- $B$ sa0: becomes $(1,0,0,1)$, $F=(1 \\land 1)\\lor(0 \\land 1)=1$, change $0 \\to 1$, detected.\n- $C$ sa1: becomes $(1,1,1,1)$, $F=(1 \\land 0)\\lor(1 \\land 1)=1$, change $0 \\to 1$, detected.\nOther changes do not alter $F$ from $0$.\n\nCollecting unique detected primary input faults: $A$ sa0, $B$ sa0, $B$ sa1, $C$ sa0, $C$ sa1, $D$ sa0 (six total). Together with $F$ sa0, $F$ sa1 (two) and $G1$ sa0, $G1$ sa1, $G2$ sa0, $G2$ sa1 (four), the total detected faults are $6+2+4=12$.\n\nFault coverage is the ratio of detected to total faults:\n$$\n\\text{coverage}=\\frac{12}{14}=\\frac{6}{7}\\approx 0.857142857\\ldots\n$$\nRounded to three significant figures, this is $0.857$.", "answer": "$$\\boxed{0.857}$$", "id": "1928143"}, {"introduction": "While detecting that a circuit has failed is the first step, for debugging and process improvement it is often necessary to pinpoint the exact location and nature of the fault. This process is known as fault diagnosis. This problem moves beyond simple fault detection, challenging you to devise a minimal set of test inputs that not only reveals a failure but also produces a unique output signature to distinguish between two different potential faults in the circuit [@problem_id:1928177].", "problem": "A digital logic circuit is designed to implement the Boolean function $F(A, B, C) = (A \\cdot B) + (\\overline{B} \\cdot C)$. The circuit is constructed from standard logic gates. During manufacturing, two specific faults are suspected to occur, based on the single stuck-at fault model:\n\n-   **Fault $f_1$**: The output of the AND gate that computes the term $(A \\cdot B)$ is stuck-at-0.\n-   **Fault $f_2$**: The input line `B` to the AND gate that computes the term $(A \\cdot B)$ is stuck-at-1.\n\nYour task is to find a minimal set of test vectors that can both detect the presence of a fault (if one exists) and diagnose which of the two specific faults ($f_1$ or $f_2$) has occurred. A test vector is a 3-bit binary string corresponding to the inputs `ABC`.\n\nWhich of the following options represents a minimal set of test vectors that satisfies these requirements?\n\nA. `{100}`\n\nB. `{110}`\n\nC. `{100, 110}`\n\nD. `{001, 100, 110}`\n\nE. `{110, 111}`", "solution": "The fault-free Boolean function is\n$$F(A,B,C)=A B+\\overline{B}C.$$\nUnder fault $f_{1}$, the output of the $AB$ AND gate is stuck-at-0, so the circuit output becomes\n$$F_{f_{1}}(A,B,C)=0+\\overline{B}C=\\overline{B}C.$$\nUnder fault $f_{2}$, only the $B$ input feeding the $AB$ AND gate is stuck-at-1, so that AND gate outputs $A\\cdot 1=A$, while the $B$ feeding the other branch remains normal. Thus the circuit output becomes\n$$F_{f_{2}}(A,B,C)=A+\\overline{B}C.$$\nA test vector detects a given fault if it makes the faulty output differ from the fault-free output. To diagnose between $f_{1}$ and $f_{2}$, the set of vectors must produce distinct response patterns for the two faults.\n\nEvaluate candidate vectors:\n\n1) For $A B C=100$:\n$$F=0,\\quad F_{f_{1}}=0,\\quad F_{f_{2}}=1.$$\nThis detects $f_{2}$ but not $f_{1}$.\n\n2) For $A B C=110$:\n$$F=1,\\quad F_{f_{1}}=0,\\quad F_{f_{2}}=1.$$\nThis detects $f_{1}$ but not $f_{2}$.\n\n3) For $A B C=001$:\n$$F=1,\\quad F_{f_{1}}=1,\\quad F_{f_{2}}=1.$$\nThis detects neither fault.\n\n4) For $A B C=111$:\n$$F=1,\\quad F_{f_{1}}=0,\\quad F_{f_{2}}=1.$$\nThis is equivalent to $110$ in effect: detects $f_{1}$ but not $f_{2}$.\n\nTherefore, no single vector can detect both $f_{1}$ and $f_{2}$. The pair $\\{100,110\\}$ yields the following signatures: for the good circuit $(0,1)$, for $f_{1}$ $(0,0)$, and for $f_{2}$ $(1,1)$, thus both detecting a fault if present and diagnosing which one. This set has minimal cardinality among the options, since any single vector fails to detect both faults.\n\nHence the minimal set among the choices is $\\{100,110\\}$.", "answer": "$$\\boxed{C}$$", "id": "1928177"}, {"introduction": "Testing modern sequential circuits, which contain memory elements like flip-flops, presents a significant challenge. The industry-standard solution is to incorporate Design for Testability (DFT) structures, most notably the scan chain, which links all flip-flops into a large shift register during test mode. This practice problem explores the practical implications of this powerful technique by asking you to analyze its primary trade-off: the time required to perform the test, which is a direct function of the scan chain length $M$ and the number of test vectors $N$ [@problem_id:1928180].", "problem": "LogicWorks Inc. is developing a new System-on-Chip (SoC) that includes a large sequential logic block. To ensure the manufactured chips are free of defects, the engineers have implemented a standard Design for Testability (DFT) technique known as a full scan chain. This technique connects all $M$ flip-flops in the sequential block into a single, long shift register during test mode.\n\nThe testing procedure using this scan chain is as follows:\n1.  The circuit is switched into test mode, routing a dedicated test clock to the scan chain.\n2.  The first test vector (a pattern of $M$ bits) is serially shifted into the scan chain.\n3.  A single \"capture\" pulse is applied. This operation allows the combinational logic to compute a result based on the state of the flip-flops, and this result (the \"response\") is then captured back into the flip-flops, overwriting their previous state.\n4.  The captured response is serially shifted out of the scan chain for observation. To improve efficiency, as the response is shifted out, the next test vector is simultaneously shifted in.\n5.  Steps 3 and 4 are repeated until all test vectors have been applied. The entire test sequence is considered complete only after the last bit of the final response has been fully shifted out of the scan chain.\n\nGiven a complete test set consisting of $N$ distinct test vectors, derive a general, closed-form analytic expression for the total number of test clock cycles required to complete the entire test procedure. Express your answer in terms of $M$ and $N$.", "solution": "Let $M$ be the number of flip-flops in the scan chain and $N$ the number of test vectors. We count test clock cycles as the sum of all scan shift cycles and all capture pulses.\n\nFirst, the initial load of the first test vector requires $M$ shift cycles.\n\nNext, for each of the $N$ test vectors, exactly one capture pulse is applied, contributing $N$ capture cycles in total.\n\nAfter each capture, the response must be shifted out. There are $N$ responses in total, and each response requires $M$ shift cycles to be fully observed. During these $M$ cycles for each response, the next test vector (if any) is simultaneously shifted in, so no additional shift cycles are needed beyond these $M$ per response. Therefore, the total number of shift cycles for all responses is $NM$.\n\nSumming all contributions gives\n$$\nT(M,N) = \\underbrace{M}_{\\text{initial load}} + \\underbrace{N}_{\\text{captures}} + \\underbrace{NM}_{\\text{shift out all responses}} = (N+1)M + N.\n$$\n\nThis expression already accounts for the final requirement that the test completes only after the last bit of the final response is fully shifted out.", "answer": "$$\\boxed{(N+1)M+N}$$", "id": "1928180"}]}