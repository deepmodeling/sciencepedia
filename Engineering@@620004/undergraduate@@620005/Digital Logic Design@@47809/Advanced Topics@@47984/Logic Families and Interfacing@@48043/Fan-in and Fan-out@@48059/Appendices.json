{"hands_on_practices": [{"introduction": "Understanding fan-out begins with the fundamental electrical limits of a logic gate. When a gate's output is LOW, it must act as a current sink for all the inputs it drives. This introductory practice focuses on this single, crucial scenario, allowing you to perform a foundational calculation of fan-out based on the gate's maximum current-sinking capability ($I_{OL_{max}}$) and the current required by each connected input ($I_{IL}$) [@problem_id:1934516]. Mastering this helps build a solid base for more complex circuit analysis.", "problem": "In digital logic design, the \"fan-out\" of a logic gate specifies the maximum number of standard inputs of gates in the same logic family that its output can reliably drive. This limitation is determined by the current sourcing and sinking capabilities of the gate's output stage.\n\nAn engineer is characterizing a new custom logic family. When a gate's output is in the logic LOW state, it acts as a current sink for any inputs it is driving. The engineer has determined the following specifications for this family:\n\n1.  The maximum current a single gate output can sink while maintaining a valid logic LOW voltage is defined as the maximum output low-level current, $I_{OL_{max}} = 16.0$ milliamperes (mA).\n2.  The current required by a single standard gate input to register a logic LOW signal is defined as the input low-level current, $I_{IL} = 0.80$ mA.\n\nCalculate the maximum number of standard gate inputs from this logic family that a single gate output can drive while guaranteeing a valid logic LOW state for all driven inputs. This integer value is the low-state fan-out ($N_{L}$).", "solution": "When the output is at logic LOW, it must sink the sum of the input low-level currents of all driven inputs. Let $N_{L}$ be the number of driven inputs. The required condition for maintaining a valid LOW is that the total sink current does not exceed the maximum output low-level current:\n$$\nN_{L} I_{IL} \\leq I_{OL_{max}}.\n$$\nSolving for $N_{L}$ gives\n$$\nN_{L} \\leq \\frac{I_{OL_{max}}}{I_{IL}}.\n$$\nSubstituting the given values yields\n$$\n\\frac{I_{OL_{max}}}{I_{IL}} = \\frac{16.0\\ \\text{mA}}{0.80\\ \\text{mA}} = 20.\n$$\nSince fan-out must be an integer and must not exceed the ratio, the maximum guaranteed low-state fan-out is\n$$\nN_{L} = \\left\\lfloor 20 \\right\\rfloor = 20.\n$$", "answer": "$$\\boxed{20}$$", "id": "1934516"}, {"introduction": "A digital circuit must operate reliably regardless of whether its signals are HIGH or LOW. Therefore, calculating fan-out requires considering two distinct scenarios: the output sourcing current in the HIGH state and sinking current in the LOW state. This exercise expands on the previous concept by requiring you to analyze both conditions, calculating the high-level fan-out ($N_H$) and low-level fan-out ($N_L$) to find the true operational limit [@problem_id:1934483]. This teaches a critical design principle: a system is only as strong as its weakest link, and the overall fan-out is determined by the more restrictive of the two states.", "problem": "An engineer is designing a custom logic circuit for a data acquisition system. A central control gate's output, labeled `ENABLE`, is used to simultaneously activate several identical processing modules. For the system to function correctly, the `ENABLE` gate must be able to drive all connected modules without its output voltage dropping out of the valid logic level specifications. The electrical characteristics of the gates are provided below.\n\nThe `ENABLE` gate's output specifications are:\n- Maximum current it can source while maintaining a valid HIGH level, $I_{OH,max} = 1.8 \\text{ mA}$.\n- Maximum current it can sink while maintaining a valid LOW level, $I_{OL,max} = 30 \\text{ mA}$.\n\nThe input specifications for each processing module are:\n- Current drawn by the input when driven HIGH, $I_{IH} = 60 \\text{ µA}$.\n- Current flowing out of the input when driven LOW, $I_{IL} = -2.5 \\text{ mA}$. (The negative sign indicates current flows out of the input pin and must be sunk by the driving gate).\n\nCalculate the maximum number of processing modules that can be reliably driven by a single `ENABLE` gate. The answer must be an integer.", "solution": "Let $N$ be the number of identical processing modules driven by the single ENABLE gate. For reliable operation, the ENABLE output must meet both sourcing (HIGH) and sinking (LOW) current limits.\n\nWhen ENABLE is HIGH, the driver sources current to all inputs. The total sourced current is $N I_{IH}$ and must not exceed $I_{OH,max}$:\n$$\nN I_{IH} \\leq I_{OH,max} \\quad \\Rightarrow \\quad N \\leq \\frac{I_{OH,max}}{I_{IH}}.\n$$\nSubstituting the given values $I_{OH,max} = 1.8 \\times 10^{-3}\\ \\text{A}$ and $I_{IH} = 60 \\times 10^{-6}\\ \\text{A}$,\n$$\nN \\leq \\frac{1.8 \\times 10^{-3}}{60 \\times 10^{-6}} = \\frac{1.8}{60} \\times 10^{3} = 0.03 \\times 10^{3} = 30.\n$$\nThus, the HIGH-level fan-out limit is $N_{H} = 30$.\n\nWhen ENABLE is LOW, each input sources current out of the input pin that must be sunk by the driver. The magnitude per input is $|I_{IL}|$. The total sink current is $N |I_{IL}|$ and must not exceed $I_{OL,max}$:\n$$\nN |I_{IL}| \\leq I_{OL,max} \\quad \\Rightarrow \\quad N \\leq \\frac{I_{OL,max}}{|I_{IL}|}.\n$$\nSubstituting the given values $I_{OL,max} = 30 \\times 10^{-3}\\ \\text{A}$ and $|I_{IL}| = 2.5 \\times 10^{-3}\\ \\text{A}$,\n$$\nN \\leq \\frac{30 \\times 10^{-3}}{2.5 \\times 10^{-3}} = \\frac{30}{2.5} = 12.\n$$\nThus, the LOW-level fan-out limit is $N_{L} = 12$.\n\nTo satisfy both logic levels, the maximum number of modules is the minimum of these two limits:\n$$\nN_{\\max} = \\min\\{N_{H}, N_{L}\\} = \\min\\{30, 12\\} = 12.\n$$\nSince $N$ must be an integer, the result is $N_{\\max} = 12$.", "answer": "$$\\boxed{12}$$", "id": "1934483"}, {"introduction": "While fan-out concerns the output of a gate, fan-in—the number of inputs a gate accepts—presents its own set of practical design challenges. In real-world applications, you may need to use a gate with more inputs than your logic function requires. This practice shifts our focus to the input side, exploring the correct methods for handling unused inputs on a CMOS gate to achieve the desired functionality safely and reliably [@problem_id:1934508]. It demonstrates how these choices affect not only the gate's logic but also the fan-out demands placed on the preceding stages, bridging the concepts of fan-in and fan-out.", "problem": "A digital circuit designer is tasked with implementing a two-input NAND function, defined as $F(A, B) = \\overline{A \\cdot B}$, for a new control system. Upon checking their component inventory, they find they only have integrated circuits containing triple 3-input NAND gates based on Complementary Metal-Oxide-Semiconductor (CMOS) technology. The inputs for one such gate are $X_1, X_2, X_3$ and its output is $Y$. The designer decides to use inputs $A$ and $B$ for $X_1$ and $X_2$ respectively, leaving $X_3$ as an unused input.\n\nConsider the following statements about strategies for handling the unused input $X_3$ to achieve the desired two-input NAND functionality. Which of these statements are both logically correct and represent standard, reliable design practices?\n\nA. Connecting input $X_3$ to the logic HIGH supply voltage (Vcc) correctly implements the desired function. The effective fan-in of the gate in this configuration is 2.\n\nB. Connecting input $X_3$ to Ground (GND) correctly implements the desired function. The effective fan-in of the gate in this configuration is 2.\n\nC. Tying input $X_3$ to another used input, for example by connecting it directly to $X_1$, correctly implements the desired function. This is the preferred method as it minimizes the capacitive load on the driving signal A.\n\nD. Leaving input $X_3$ floating (unconnected) is a valid and simple way to implement the function, as a floating CMOS input typically behaves as a logic HIGH. The effective fan-in in this case is 2.\n\nE. Tying input $X_3$ to another used input, for example by connecting it directly to $X_1$, correctly implements the desired function. This configuration increases the fan-out requirement for the logic stage that drives input A.", "solution": "Let the 3-input CMOS NAND gate implement\n$Y = \\overline{X_1 \\cdot X_2 \\cdot X_3}.$\nAssign $X_{1}=A$ and $X_{2}=B$; the target function is\n$$F(A,B)=\\overline{A\\cdot B}.$$\nTo realize $F$ using the 3-input NAND, we require $X_{3}$ such that for all $A,B$,\n$$\\overline{A \\cdot B \\cdot X_3} = \\overline{A \\cdot B}.$$\nUsing the identities $A\\cdot 1=A$ and $A\\cdot 0=0$,\n- If $X_{3}=1$, then $\\overline{A \\cdot B \\cdot 1} = \\overline{A \\cdot B}$, which is correct.\n- If $X_{3}=0$, then $\\overline{A \\cdot B \\cdot 0} = \\overline{0} = 1$, which is incorrect.\n\nEvaluate each statement:\n\nA. With $X_{3}=\\text{Vcc}$, $Y=\\overline{A \\cdot B \\cdot 1}=\\overline{A \\cdot B}$, so the logic function is correct. Tying unused NAND inputs high is a standard CMOS practice. While the physical gate still contains three series devices (so delay resembles a 3-input NAND), the number of independent input variables is two; describing the logical effective fan-in as $2$ is acceptable in this context. This is a standard, reliable method.\n\nB. With $X_{3}=\\text{GND}$, $Y=\\overline{A \\cdot B \\cdot 0}=\\overline{0}=1$, which does not implement $\\overline{A \\cdot B}$. Not correct.\n\nC. If $X_{3}$ is tied to $X_{1}$, then $Y=\\overline{A \\cdot B \\cdot A}=\\overline{A \\cdot B}$ (since $A\\cdot A=A$), so the logic is correct. However, this does not minimize the capacitive load on $A$; it increases it by presenting two gate inputs to the driver of $A$. Therefore this is not the preferred method for loading reasons; the statement’s rationale is incorrect.\n\nD. Leaving $X_{3}$ floating is not a reliable practice. CMOS inputs must not be left unconnected because floating gates can assume unpredictable voltages, pick up noise, and cause excess static current. The claim that a floating CMOS input “typically behaves as a logic HIGH” is not guaranteed and is not a standard, reliable method.\n\nE. Tying $X_{3}$ to another used input such as $X_{1}$ yields $Y=\\overline{A \\cdot B \\cdot A}=\\overline{A \\cdot B}$, which is logically correct. This configuration does increase the fan-out requirement for the stage driving $A$ due to the added input capacitance. This is an accepted, reliable practice provided the driving stage can support the increased load.\n\nTherefore, the statements that are both logically correct and represent standard, reliable design practices are A and E.", "answer": "$$\\boxed{AE}$$", "id": "1934508"}]}