{"hands_on_practices": [{"introduction": "Before analyzing complex behaviors, it's essential to understand the basic composition of a CMOS gate. This practice focuses on the fundamental construction rule for N-input gates, which pairs a pull-up network of PMOS transistors with a pull-down network of NMOS transistors. By calculating the total transistor count for both a NAND and a NOR gate, you will reinforce your understanding of this core structural principle in CMOS design. [@problem_id:1922013]", "problem": "A digital circuit designer is tasked with implementing two separate logic gates for a new chip using standard static Complementary Metal-Oxide-Semiconductor (CMOS) technology. The first gate required is a 3-input NAND gate, and the second is a 3-input NOR gate. In this fabrication process, any N-input logic gate is constructed with a pull-up network (PUN) made of p-channel Metal-Oxide-Semiconductor Field-Effect Transistors (pMOS) and a pull-down network (PDN) made of n-channel Metal-Oxide-Semiconductor Field-Effect Transistors (nMOS). What is the total number of transistors (counting both pMOS and nMOS types) required to construct both the 3-input NAND gate and the 3-input NOR gate?", "solution": "In static CMOS logic, each input controls one nMOS in the pull-down network (PDN) and one pMOS in the pull-up network (PUN). The PUN is the dual of the PDN: series connections in the PDN correspond to parallel connections in the PUN and vice versa. Therefore, an $N$-input static CMOS gate uses $N$ nMOS transistors in the PDN and $N$ pMOS transistors in the PUN, for a total of $2N$ transistors per gate.\n\nFor a 3-input NAND gate, the PDN uses 3 nMOS transistors in series and the PUN uses 3 pMOS transistors in parallel. Hence, the transistor count is\n$$\n2N = 2 \\cdot 3 = 6.\n$$\nFor a 3-input NOR gate, the PDN uses 3 nMOS transistors in parallel and the PUN uses 3 pMOS transistors in series. Hence, the transistor count is\n$$\n2N = 2 \\cdot 3 = 6.\n$$\nThe total number of transistors required to construct both gates is the sum:\n$$\n6 + 6 = 12,\n$$\nequivalently,\n$$\n4N = 4 \\cdot 3 = 12.\n$$", "answer": "$$\\boxed{12}$$", "id": "1922013"}, {"introduction": "Real-world engineering often involves adapting existing components for new purposes. This exercise presents a common scenario: configuring a 3-input NAND gate to function as a 2-input one by correctly handling the unused input. This practice moves beyond simple Boolean logic to explore the critical hardware considerations that ensure reliable and low-power operation in CMOS circuits. [@problem_id:1921961]", "problem": "A digital systems engineer is tasked with implementing a 2-input NAND logic function using a pre-existing 3-input NAND gate fabricated with Complementary Metal-Oxide-Semiconductor (CMOS) technology. The inputs to the 3-input gate are denoted A, B, and C, and its output is Y. The goal is to use inputs A and B for the 2-input function, which means the unused input, C, must be terminated appropriately to ensure the circuit's output is $Y = \\overline{A \\cdot B}$.\n\nBelow are five proposed methods for handling the unused input C. In this context, $V_{DD}$ represents the positive supply voltage corresponding to logic HIGH ('1'), and $V_{SS}$ represents the ground reference corresponding to logic LOW ('0').\n\nWhich of the following methods are valid for correctly and reliably configuring the 3-input NAND gate to function as a 2-input NAND gate?\n\nA. Leave input C disconnected (floating).\n\nB. Connect input C to $V_{SS}$.\n\nC. Connect input C to $V_{DD}$.\n\nD. Connect input C to input A.\n\nE. Connect input C to the output Y.\n\nSelect all correct options.", "solution": "A 3-input NAND gate implements the Boolean function\n$$\nY=\\overline{A B C}.\n$$\nWe wish to configure it to behave as a 2-input NAND using inputs $A$ and $B$, i.e., to realize\n$$\nY=\\overline{A B}.\n$$\nWe analyze each proposed handling of the unused input $C$ using Boolean algebra and CMOS considerations.\n\nFirst, recall standard Boolean identities that will be used explicitly:\n- Identity with one: $X \\cdot 1 = X$.\n- Annihilator with zero: $X \\cdot 0 = 0$.\n- Idempotent law: $X \\cdot X = X$.\n\nOption A: Leave input $C$ floating.\nIn CMOS, an unconnected gate input has effectively very high impedance and presents a capacitive node susceptible to leakage and noise pickup. Its logic level becomes indeterminate, which makes $Y=\\overline{A B C}$ unpredictable and unreliable. Additionally, a floating input can cause increased static current and spurious switching. Therefore, leaving $C$ floating does not correctly or reliably realize $Y=\\overline{A B}$.\n\nOption B: Connect input $C$ to $V_{SS}$ (logic $0$).\nSubstituting $C=0$ into $Y=\\overline{A B C}$ gives\n$Y=\\overline{A B \\cdot 0}=\\overline{0}=1$,\nwhich is a constant $1$ independent of $A$ and $B$, not equal to $\\overline{A B}$ in general. Hence, this does not implement a 2-input NAND.\n\nOption C: Connect input $C$ to $V_{DD}$ (logic $1$).\nSubstituting $C=1$ into $Y=\\overline{A B C}$ gives\n$Y=\\overline{A B \\cdot 1}=\\overline{A B}$,\nwhich matches the desired 2-input NAND function. At the transistor level in CMOS, tying $C$ high turns the $C$-input NMOS on (thus not preventing pull-down when $A=B=1$) and turns the $C$-input PMOS off (leaving the $A$ and $B$ PMOS in parallel to provide pull-up when at least one of $A$ or $B$ is $0$), consistent with correct NAND behavior. This is valid and reliable.\n\nOption D: Connect input $C$ to input $A$.\nSubstituting $C=A$ into $Y=\\overline{A B C}$ gives\n$Y=\\overline{A B A}=\\overline{(A A) B}=\\overline{A B}$,\nusing the idempotent law $A A = A$. Thus this also exactly realizes a 2-input NAND. This is valid and reliable.\n\nOption E: Connect input $C$ to the output $Y$.\nThis imposes the functional equation\n$Y=\\overline{A B Y}$.\nConsider the two cases for $A B$:\n- If $A B=0$, then $Y=\\overline{0 \\cdot Y}=\\overline{0}=1$, which is consistent with $\\overline{A B}=1$.\n- If $A B=1$, then $Y=\\overline{1 \\cdot Y}=\\overline{Y}$, which has no Boolean fixed point because it requires $Y=\\overline{Y}$. In a real CMOS circuit, this forms an inverter with unity feedback, which does not have a stable static operating point; it can oscillate or become metastable. Therefore, this configuration is not correct or reliable.\n\nFrom the above, the valid methods are Option C and Option D.", "answer": "$$\\boxed{CD}$$", "id": "1921961"}, {"introduction": "While we often assume logic gates work perfectly, understanding the impact of physical faults is crucial for designing and testing robust digital systems. This problem asks you to analyze a 2-input NOR gate at the transistor level, where one transistor is defective and \"stuck-open\". By determining the gate's output for all input combinations, you will gain a deeper insight into the complementary action of the pull-up and pull-down networks and discover the meaning of the high-impedance state, $Z$. [@problem_id:1921991]", "problem": "In digital electronics, fault analysis is crucial for designing robust circuits. Consider a standard 2-input Complementary Metal-Oxide-Semiconductor (CMOS) NOR gate. This gate is constructed with a pull-up network (PUN) and a pull-down network (PDN). The PUN consists of two P-type MOSFETs (PMOS) connected in series between the power supply ($V_{DD}$, representing logic '1') and the output Y. The PDN consists of two N-type MOSFETs (NMOS) connected in parallel between the output Y and ground ($V_{SS}$, representing logic '0'). The two inputs to the gate are labeled A and B. Each input controls one PMOS transistor in the PUN and one NMOS transistor in the PDN.\n\n- A PMOS transistor is ON (conducts) when its gate input is logic '0', and OFF (does not conduct) when its gate input is logic '1'.\n- An NMOS transistor is ON (conducts) when its gate input is logic '1', and OFF (does not conduct) when its gate input is logic '0'.\n\nNow, imagine a manufacturing defect has occurred. The series PMOS transistor whose gate is connected to input B is permanently 'stuck-open'. This means it behaves as an open switch and cannot conduct electricity, regardless of the logic level at input B. The other three transistors (the PMOS connected to A, and both NMOS transistors) function correctly.\n\nDetermine the resulting logic state of the output Y for all four possible binary combinations of inputs A and B. An output that is not connected to either $V_{DD}$ or $V_{SS}$ is said to be in a high-impedance state, which we denote by the symbol 'Z'.\n\nWhich of the following options correctly represents the sequence of outputs Y for the input sequence (A=0, B=0), (A=0, B=1), (A=1, B=0), and (A=1, B=1)?\n\nA. (1, 0, 0, 0)\nB. (Z, 0, 0, 0)\nC. (1, Z, 0, 0)\nD. (Z, 0, Z, 0)\nE. (1, 1, 1, 0)", "solution": "The problem asks for the output behavior of a faulty 2-input CMOS NOR gate. The standard structure of a 2-input NOR gate consists of a pull-up network (PUN) with two PMOS transistors (let's call them $P_A$ and $P_B$) in series, and a pull-down network (PDN) with two NMOS transistors ($N_A$ and $N_B$) in parallel. The output Y is taken from the node between the PUN and PDN. The fault is that the PMOS transistor $P_B$ (controlled by input B) is 'stuck-open', meaning it is always non-conducting.\n\nWe will analyze the state of the PUN and PDN for each of the four possible input combinations (A, B).\n\n**Case 1: A = 0, B = 0**\n*   **Pull-Up Network (PUN):** The PUN consists of $P_A$ and $P_B$ in series.\n    *   Input A is '0', which turns $P_A$ ON.\n    *   Input B is '0'. Normally this would turn $P_B$ ON. However, $P_B$ is stuck-open.\n    *   Since $P_A$ and $P_B$ are in series, a complete path from $V_{DD}$ to the output Y requires both to be conducting. Because $P_B$ is stuck-open, the path is broken. Therefore, the PUN is OFF and does not connect the output to $V_{DD}$ (logic '1').\n*   **Pull-Down Network (PDN):** The PDN consists of $N_A$ and $N_B$ in parallel.\n    *   Input A is '0', which turns $N_A$ OFF.\n    *   Input B is '0', which turns $N_B$ OFF.\n    *   Since both parallel paths to $V_{SS}$ (ground) are open, the PDN is OFF and does not connect the output to $V_{SS}$ (logic '0').\n*   **Output Y:** Since both the PUN and PDN are OFF, the output Y is not connected to either $V_{DD}$ or $V_{SS}$. It is in a floating or high-impedance state.\n    *   Thus, for (A=0, B=0), $Y = Z$.\n\n**Case 2: A = 0, B = 1**\n*   **Pull-Up Network (PUN):**\n    *   Input A is '0', which turns $P_A$ ON.\n    *   Input B is '1', which would normally turn $P_B$ OFF. The transistor is also stuck-open, so it remains non-conducting.\n    *   The series path to $V_{DD}$ is broken by $P_B$. The PUN is OFF.\n*   **Pull-Down Network (PDN):**\n    *   Input A is '0', which turns $N_A$ OFF.\n    *   Input B is '1', which turns $N_B$ ON.\n    *   Since $N_A$ and $N_B$ are in parallel, the path through $N_B$ connects the output Y to $V_{SS}$. The PDN is ON.\n*   **Output Y:** The PDN pulls the output down to $V_{SS}$.\n    *   Thus, for (A=0, B=1), $Y = 0$.\n\n**Case 3: A = 1, B = 0**\n*   **Pull-Up Network (PUN):**\n    *   Input A is '1', which turns $P_A$ OFF.\n    *   The series path to $V_{DD}$ is broken by $P_A$ being OFF (even if $P_B$ were working). The PUN is OFF.\n*   **Pull-Down Network (PDN):**\n    *   Input A is '1', which turns $N_A$ ON.\n    *   Input B is '0', which turns $N_B$ OFF.\n    *   Since $N_A$ and $N_B$ are in parallel, the path through $N_A$ connects the output Y to $V_{SS}$. The PDN is ON.\n*   **Output Y:** The PDN pulls the output down to $V_{SS}$.\n    *   Thus, for (A=1, B=0), $Y = 0$.\n\n**Case 4: A = 1, B = 1**\n*   **Pull-Up Network (PUN):**\n    *   Input A is '1', which turns $P_A$ OFF.\n    *   Input B is '1', which would turn $P_B$ OFF (and it's stuck-open).\n    *   The series path to $V_{DD}$ is broken. The PUN is OFF.\n*   **Pull-Down Network (PDN):**\n    *   Input A is '1', which turns $N_A$ ON.\n    *   Input B is '1', which turns $N_B$ ON.\n    *   Both parallel paths connect the output Y to $V_{SS}$. The PDN is ON.\n*   **Output Y:** The PDN pulls the output down to $V_{SS}$.\n    *   Thus, for (A=1, B=1), $Y = 0$.\n\n**Summary of Results:**\nThe sequence of outputs Y for the input combinations (0,0), (0,1), (1,0), and (1,1) is (Z, 0, 0, 0).\nComparing this sequence with the given options:\nA. (1, 0, 0, 0) - This is the behavior of a correctly functioning NOR gate.\nB. (Z, 0, 0, 0) - This matches our derived result.\nC. (1, Z, 0, 0) - Incorrect.\nD. (Z, 0, Z, 0) - Incorrect.\nE. (1, 1, 1, 0) - Incorrect.\n\nTherefore, the correct option is B.", "answer": "$$\\boxed{B}$$", "id": "1921991"}]}