{"hands_on_practices": [{"introduction": "The true power of tri-state buffers lies in their ability to build shared communication pathways, or buses. This practice challenges you to think like a circuit designer by constructing a \"programmable inverter\" from basic tri-state components. [@problem_id:1973043] By correctly managing the enable signals, you can create a versatile logic block that either passes a signal unchanged or inverts it, illustrating a core principle behind multiplexing and reconfigurable hardware.", "problem": "In digital logic design, tri-state buffers are essential components for creating shared data buses. You are tasked with designing a simple \"programmable inverter\" or configurable logic element. This circuit must have one single-bit data input `A`, one single-bit control input `C`, and one single-bit output `Y`. The behavior of the circuit is defined as follows:\n- When the control input `C` is logic `0`, the output `Y` must be equal to the data input `A` (i.e., `Y = A`).\n- When the control input `C` is logic `1`, the output `Y` must be the logical inverse of the data input `A` (i.e., `Y = \\text{NOT}(A)`).\n\nYou have access to standard NOT gates (inverters) and active-high tri-state buffers. An active-high tri-state buffer has a data input `D`, an enable input `E`, and an output `Q`. Its behavior is such that if `E=1`, `Q=D`, and if `E=0`, the output `Q` is in a high-impedance (disconnected) state. When the outputs of two tri-state buffers are connected, only one buffer should be enabled at any time to avoid bus contention.\n\nWhich of the following circuit descriptions correctly implements the desired programmable inverter?\n\nA. The input `A` is connected to the data input of a tri-state buffer, Buffer 1. The input `A` is also connected to a NOT gate, and the output of this NOT gate is connected to the data input of a second tri-state buffer, Buffer 2. The control input `C` is connected to the enable input of Buffer 2. The control input `C` is also connected to a second NOT gate, whose output is connected to the enable input of Buffer 1. The outputs of Buffer 1 and Buffer 2 are connected together to form the output `Y`.\n\nB. The input `A` is connected to the data input of a tri-state buffer, Buffer 1. The input `A` is also connected to a NOT gate, and the output of this NOT gate is connected to the data input of a second tri-state buffer, Buffer 2. The control input `C` is connected to the enable input of Buffer 1. The control input `C` is also connected to a second NOT gate, whose output is connected to the enable input of Buffer 2. The outputs of Buffer 1 and Buffer 2 are connected together to form the output `Y`.\n\nC. The input `A` is connected to the data input of a tri-state buffer, Buffer 1. The input `A` is also connected to a NOT gate, and the output of this NOT gate is connected to the data input of a second tri-state buffer, Buffer 2. The control input `C` is connected to the enable input of both Buffer 1 and Buffer 2. The outputs of Buffer 1 and Buffer 2 are connected together to form the output `Y`.\n\nD. The input `A` is connected to the data input of a tri-state buffer, Buffer 1. The control input `C` is connected to a NOT gate, whose output is connected to the enable input of Buffer 1. The output of Buffer 1 is the final output `Y`. This circuit does not use a second buffer.", "solution": "We require a configurable function with one data input $A$, one control input $C$, and one output $Y$ such that:\n- If $C=0$, then $Y=A$.\n- If $C=1$, then $Y=\\overline{A}$.\n\nThis is equivalent to a 2-to-1 multiplexer selecting between $A$ and $\\overline{A}$ with select $C$, which can be expressed in Boolean algebra as\n$$\nY = (\\overline{C} \\land A) \\lor (C \\land \\overline{A}).\n$$\n\nAn active-high tri-state buffer produces $Q=D$ when $E=1$ and $Q$ is high-impedance when $E=0$. If two such buffers share an output node, the node value equals the data of the uniquely enabled buffer; both buffers must never be enabled simultaneously.\n\nTo realize $Y=(\\overline{C} \\land A) \\lor (C \\land \\overline{A})$ using two tri-state buffers with a shared output:\n- Use Buffer 1 with data $D_{1}=A$ and enable $E_{1}=\\overline{C}$.\n- Use Buffer 2 with data $D_{2}=\\overline{A}$ and enable $E_{2}=C$.\n- Tie the outputs to form $Y$.\n\nThen:\n- If $C=0$, $E_{1}=1$ and $E_{2}=0$, so only Buffer 1 drives and $Y=A$.\n- If $C=1$, $E_{1}=0$ and $E_{2}=1$, so only Buffer 2 drives and $Y=\\overline{A}$.\n- Never are both enabled simultaneously, so no bus contention occurs.\n\nNow evaluate the options:\n\nA. $D_{1}=A$, $D_{2}=\\overline{A}$, $E_{2}=C$, $E_{1}=\\overline{C}$, outputs tied. This implements exactly the configuration above, so it yields $Y=(\\overline{C} \\land A) \\lor (C \\land \\overline{A})$, which matches the required behavior.\n\nB. $D_{1}=A$, $D_{2}=\\overline{A}$, $E_{1}=C$, $E_{2}=\\overline{C}$. This yields $Y=(C \\land A) \\lor (\\overline{C} \\land \\overline{A})$, which equals the XNOR of $A$ and $C$, not the desired function (e.g., for $C=1$ it gives $Y=A$ instead of $\\overline{A}$), so it is incorrect.\n\nC. Both enables tied to $C$. When $C=1$, both buffers drive contradictory values ($A$ and $\\overline{A}$), causing bus contention; when $C=0$, both are disabled and $Y$ is high-impedance instead of $A$. Incorrect.\n\nD. Single buffer with $D_{1}=A$ and $E_{1}=\\overline{C}$. Then $Y=A$ when $C=0$ and $Y$ is high-impedance when $C=1$, not $\\overline{A}$. Incorrect.\n\nTherefore, only option A correctly implements the desired programmable inverter without contention and with correct functionality.", "answer": "$$\\boxed{A}$$", "id": "1973043"}, {"introduction": "While shared buses are efficient, they introduce the risk of bus contention if not managed carefully. This exercise explores the direct consequence of enabling two buffers on the same bus with conflicting data values. [@problem_id:1973099] Understanding this failure scenario is crucial, as it leads to a logically undefined state, often denoted by 'X', which can cause system-wide malfunctions.", "problem": "A shared data line in a simple microprocessor system is driven by two tri-state buffers, Buffer A and Buffer B. The outputs of both buffers are connected together to form the data line, `DATA_BUS`.\n\n- Buffer A has a data input $D_A$ and an active-high enable input $E_A$. Its output is active and equal to $D_A$ when $E_A=1$.\n- Buffer B has a data input $D_B$ and an active-low enable input $E_B$. Its output is active and equal to $D_B$ when $E_B=0$.\n\nWhen a buffer's output is not active, it is in the high-impedance state, which is logically represented by 'Z'. If all buffers connected to the bus are in the high-impedance state, the bus line itself is considered to be in the high-impedance state 'Z'. If two or more active buffers attempt to drive the bus to different logic levels (e.g., one to '1' and another to '0'), the bus enters a state of bus contention. This invalid state is represented logically as 'X'.\n\nAt a particular moment in time, the input signals to the buffers are as follows:\n$D_A = 1$\n$E_A = 1$\n$D_B = 0$\n$E_B = 0$\n\nBased on these inputs, determine the resulting logical state of the `DATA_BUS`.\n\nA. 0\n\nB. 1\n\nC. Z\n\nD. X", "solution": "By definition of a tri-state buffer:\n- Buffer A is active when $E_{A}=1$ and then drives its output equal to $D_{A}$.\n- Buffer B is active when $E_{B}=0$ and then drives its output equal to $D_{B}$.\n\nGiven inputs:\n$$D_{A}=1,\\quad E_{A}=1,\\quad D_{B}=0,\\quad E_{B}=0.$$\n\nFirst, determine each bufferâ€™s output state:\n- Since $E_{A}=1$, Buffer A is enabled and drives $D_{A}=1$ onto the bus.\n- Since $E_{B}=0$, Buffer B is enabled and drives $D_{B}=0$ onto the bus.\n\nThus both buffers are simultaneously active with conflicting logic levels:\n$$\\text{Buffer A drives }1,\\quad \\text{Buffer B drives }0.$$\n\nWhen two active drivers attempt to force different logic levels on the shared bus, the bus enters contention, represented as the invalid state X. Therefore, the resulting logical state of `DATA_BUS` is X, which corresponds to option D.", "answer": "$$\\boxed{D}$$", "id": "1973099"}, {"introduction": "Theoretical knowledge meets practical troubleshooting in this diagnostic challenge. A common symptom of bus contention is not a clear logic '0' or '1', but an invalid intermediate voltage that can be measured with a multimeter. [@problem_id:1973096] This problem asks you to deduce the most likely electrical cause for a reading near $V_{CC}/2$, connecting the abstract concept of logical contention to its real-world physical signature and reinforcing your debugging intuition.", "problem": "A system designer is debugging a custom-built embedded system. The system features a central processing unit (CPU) and several peripheral devices that communicate over a shared data bus. Each device connects to the bus via its own set of tri-state buffers. A tri-state buffer is a digital logic gate with a data input, a data output, and an enable input. When enabled, the buffer passes the logic level from its data input to its data output. When disabled, the data output enters a high-impedance (Hi-Z) state, electrically disconnecting it from the bus. The logic for the system is powered by a supply voltage denoted as $V_{CC}$ and referenced to Ground (GND, 0 V). In normal operation, a control unit ensures that only one device's buffers are enabled at any given time to write data onto the bus.\n\nDuring a diagnostic test, the system is supposed to be idle with all devices' buffers disabled. However, the designer uses a high-impedance digital multimeter to measure the voltage on one of the bus lines and observes a steady, stable reading of approximately $V_{CC}/2$. This is an invalid logic level, indicating a fault.\n\nWhich of the following scenarios represents the most probable and direct electrical cause for this specific voltage reading on the bus line?\n\nA. At least two tri-state buffers connected to the bus line are simultaneously enabled, where one is attempting to drive the line to a logic HIGH and another is attempting to drive it to a logic LOW.\n\nB. Exactly one buffer connected to the line is enabled, but its internal logic is malfunctioning, causing it to output an intermediate voltage.\n\nC. All buffers connected to the line are correctly disabled and are in the high-impedance state as intended.\n\nD. The bus line has developed a resistive fault, creating a short circuit of moderate resistance to the $V_{CC}$ power rail.\n\nE. A single buffer connected to the line is permanently stuck in the enabled state, while all other buffers are correctly disabled.", "solution": "We model the measurement and each scenario with simple circuit principles.\n\nA high-impedance digital multimeter approximates an open circuit, so it measures the open-circuit node voltage of the bus line. Thus the reading reflects the internal equivalent network attached to the bus, not an artifact of meter loading.\n\nA mid-rail value stabilized near $V_{CC}/2$ implies two finite, roughly comparable conductance paths from the node to the rails simultaneously exist, forming an effective resistive divider. The canonical way this occurs on a tri-state bus is bus contention: one enabled buffer driving HIGH and another enabled buffer driving LOW.\n\nModel the two contending outputs as Thevenin sources:\n- The HIGH-driving buffer as a source $V_{CC}$ with output resistance $R_{H}$ (the pull-up on-resistance).\n- The LOW-driving buffer as a source $0$ with output resistance $R_{L}$ (the pull-down on-resistance).\n\nWith both enabled, the bus node voltage $V$ satisfies by KCL:\n$$(V - V_{CC})\\frac{1}{R_{H}} + \\frac{V}{R_{L}} = 0.$$\nSolving for $V$ gives\n$$V = V_{CC}\\frac{R_{L}}{R_{H}+R_{L}}.$$\nWhen $R_{H} \\approx R_{L}$ (typical for symmetric CMOS drivers), this yields\n$$V \\approx \\frac{V_{CC}}{2},$$\nwhich matches the observed steady mid-rail reading. Furthermore, because both drivers are low impedance, the value is stable (though it implies significant shoot-through current).\n\nNow evaluate the alternatives:\n- Exactly one enabled buffer with an internal fault producing an intermediate DC level (option B) is atypical for CMOS digital outputs, which normally saturate near rails unless externally loaded; such a failure is less probable and not the direct, standard mechanism for a stable $V_{CC}/2$.\n- All buffers disabled (option C) leaves the bus floating. A floating node with a high-impedance meter does not have a well-defined stable mid-rail level; any reading is incidental and often not steady.\n- A resistive fault only to $V_{CC}$ (option D) would pull the node toward $V_{CC}$; to get $V_{CC}/2$ one would also need a comparable resistive path to GND, which is not stated.\n- A single buffer stuck enabled (option E) drives firmly to either HIGH or LOW, not mid-rail, absent a competing path.\n\nTherefore, the most probable and direct electrical cause of a steady reading near $V_{CC}/2$ is two buffers enabled simultaneously, one driving HIGH and one driving LOW.\n\nHence, the correct choice is A.", "answer": "$$\\boxed{A}$$", "id": "1973096"}]}