{"hands_on_practices": [{"introduction": "Before diving into the circuit-level details of a design technique, it's essential to understand its system-level impact. This first practice explores the fundamental motivation for clock gating: power reduction. By analyzing a hypothetical but realistic scenario within a modern System-on-Chip (SoC), you will quantify the total power savings achieved by turning off a component when it's idle, providing a clear justification for why this technique is a cornerstone of low-power digital design [@problem_id:1920661].", "problem": "A modern smartphone's System-on-Chip (SoC) includes a specialized Neural Processing Unit (NPU) dedicated to accelerating machine learning computations. Under a full-load benchmark condition where all parts of the SoC are continuously active, the NPU is responsible for 18% of the total dynamic power consumed by the SoC.\n\nIn a typical daily usage profile, this NPU is active for only 35% of the time and is idle for the remaining 65%. To conserve battery life, engineers implement clock gating on the NPU. This technique completely eliminates the NPU's dynamic power consumption during its idle periods by halting its clock signal.\n\nAssuming the logic used for clock gating is ideal (i.e., it consumes no power itself), calculate the fractional reduction in the *average total dynamic power* of the entire SoC as a result of implementing this clock gating scheme for the typical daily usage profile. Express your answer as a decimal value rounded to three significant figures.", "solution": "Let $P_{\\text{tot}}$ denote the total dynamic power of the SoC under the full-load benchmark and let the NPU’s dynamic power under that condition be $P_{\\text{NPU}}=fP_{\\text{tot}}$ with $f=0.18$. In the typical usage profile, the NPU is active for a fraction $\\alpha=0.35$ of the time and idle for a fraction $\\beta=1-\\alpha=0.65$. Ideal clock gating eliminates the NPU’s dynamic power during idle, so the time-averaged power saved is the NPU’s idle-time dynamic power:\n$$\n\\langle P_{\\text{save}}\\rangle=\\beta\\,P_{\\text{NPU}}=\\beta f P_{\\text{tot}}.\n$$\nThe fractional reduction in the average total dynamic power of the SoC is the saved power divided by the reference total dynamic power:\n$$\n\\frac{\\langle P_{\\text{save}}\\rangle}{P_{\\text{tot}}}=\\beta f=(1-\\alpha)f.\n$$\nSubstituting the given values,\n$$\n(1-0.35)\\times 0.18=0.65\\times 0.18=0.117.\n$$\nRounded to three significant figures, the fractional reduction is $0.117$.", "answer": "$$\\boxed{0.117}$$", "id": "1920661"}, {"introduction": "With the motivation clear, we now turn to implementation. The simplest way to gate a clock is with a basic AND gate, but this approach harbors a significant risk. This exercise demonstrates a critical hazard in naive clock gating: the generation of malformed clock pulses, or \"glitches,\" when the enable signal is not perfectly synchronized. By calculating the width of a shortened clock pulse, you will gain a concrete understanding of why asynchronous enable signals can compromise circuit integrity and lead to functional failure [@problem_id:1920603].", "problem": "A junior digital design engineer is implementing a power-saving feature in a system-on-chip by using a simple clock gating circuit. The circuit consists of a single two-input AND gate. One input to the gate is the main system clock, `CLK`, and the other is an active-high `ENABLE` signal. The output of the AND gate, `GATED_CLK`, drives a synchronous logic module.\n\nThe system clock `CLK` is a periodic signal with a period of $T_{clk}$ and a 50% duty cycle. A single cycle can be described as follows: the `CLK` signal is high for the time interval $0 \\le t < T_{clk}/2$ and low for $T_{clk}/2 \\le t < T_{clk}$.\n\nThe `ENABLE` signal is asserted by a controller that is not synchronized to the `CLK` signal. During a particular cycle of interest starting at $t=0$, the `ENABLE` signal is initially low and makes a single, clean transition from low to high at time $t_{en}$, where it is given that $0 < t_{en} < T_{clk}/2$. After this transition, the `ENABLE` signal remains high for the rest of the clock cycle and beyond.\n\nThe AND gate has a uniform propagation delay of $t_{pd}$ for all transitions. This means that any change at an input that causes a change in the output will be reflected at the output after a delay of $t_{pd}$.\n\nBecause the `ENABLE` signal is asserted while `CLK` is already high, the first pulse on the `GATED_CLK` line is malformed. Determine the total duration (i.e., the width) of this first, shortened pulse on the `GATED_CLK` output. Provide your answer as a symbolic expression in terms of $T_{clk}$, $t_{en}$, and $t_{pd}$.", "solution": "The two-input AND gate outputs the logical product of its two inputs, delayed by the propagation delay $t_{pd}$ for any input transition that causes an output change.\n\nGiven the $50\\%$-duty clock, during the interval $0 \\le t < \\frac{T_{clk}}{2}$ we have $\\mathrm{CLK}=1$, and during $\\frac{T_{clk}}{2} \\le t < T_{clk}$ we have $\\mathrm{CLK}=0$. Initially, $\\mathrm{ENABLE}=0$ and changes to $1$ at $t=t_{en}$ with $0<t_{en}<\\frac{T_{clk}}{2}$, then remains high.\n\nBecause $\\mathrm{ENABLE}=0$ for $0 \\le t < t_{en}$, the logical AND at the gate input is $0$ throughout that interval even though $\\mathrm{CLK}=1$. Therefore, there is no output transition at $t=0$; the output remains low. At $t=t_{en}$, $\\mathrm{ENABLE}$ rises while $\\mathrm{CLK}=1$, so the logical AND at the gate input changes from $0$ to $1$. With propagation delay $t_{pd}$, the output $\\mathrm{GATED\\_CLK}$ makes its first rising transition at\n$$\nt_{\\text{rise,out}}=t_{en}+t_{pd}.\n$$\nAt $t=\\frac{T_{clk}}{2}$, $\\mathrm{CLK}$ falls to $0$ while $\\mathrm{ENABLE}=1$, so the logical AND at the gate input changes from $1$ to $0$. With propagation delay $t_{pd}$, the output $\\mathrm{GATED\\_CLK}$ falls at\n$$\nt_{\\text{fall,out}}=\\frac{T_{clk}}{2}+t_{pd}.\n$$\nThe width of the first, shortened high pulse on $\\mathrm{GATED\\_CLK}$ is the time between these output transitions:\n$$\nW = t_{\\text{fall,out}} - t_{\\text{rise,out}} = \\left(\\frac{T_{clk}}{2}+t_{pd}\\right) - \\left(t_{en}+t_{pd}\\right) = \\frac{T_{clk}}{2} - t_{en}.\n$$\nSince $0<t_{en}<\\frac{T_{clk}}{2}$, this width is positive, and the propagation delay cancels because it equally shifts both the rising and falling edges.", "answer": "$$\\boxed{\\frac{T_{clk}}{2}-t_{en}}$$", "id": "1920603"}, {"introduction": "To overcome the glitch hazard explored previously, engineers use a \"safe\" clock-gating circuit, typically built with a latch. This final practice focuses on the robust, industry-standard solution and the rigorous timing analysis required to ensure its proper function. You will determine the maximum allowable delay for the enable logic to meet its timing budget, a crucial skill for guaranteeing that the gated clock signal is always clean and reliable, thereby preventing the very timing violations we aim to avoid [@problem_id:1920633].", "problem": "In the design of a low-power digital signal processor, a latch-based clock gating technique is used to disable the clock to an idle Floating-Point Unit (FPU). The clock gating circuit is constructed from a negative-level-sensitive transparent latch and an AND gate. The control signal, `ENABLE`, is fed into the latch's data input. The latch's output is then ANDed with the system clock, `CLK`, to produce the gated clock for the FPU. The latch is transparent (i.e., its output follows its input) only when `CLK` is low, and it captures the state of the `ENABLE` signal on the rising edge of `CLK`.\n\nThe `ENABLE` signal itself is generated by a block of combinational logic whose inputs come from a set of control registers. These control registers are updated on the **falling edge** of the same system clock, `CLK`.\n\nGiven the following timing parameters for a worst-case analysis:\n- The minimum guaranteed duration for the clock's low phase is $T_{\\text{low}} = 600$ ps.\n- The clock-to-Q delay of the falling-edge-triggered control registers is $T_{\\text{c2q}} = 45$ ps.\n- The setup time requirement for the data input of the clock-gating latch is $T_{\\text{su,latch}} = 35$ ps.\n- A mandatory safety timing margin of $T_{\\text{margin}} = 50$ ps must be included to ensure robust operation.\n\nCalculate the maximum allowable propagation delay, $T_{\\text{prop,max}}$, for the combinational logic block that generates the `ENABLE` signal. Express your answer in picoseconds (ps).", "solution": "The negative-level-sensitive latch used for clock gating is transparent only when $CLK$ is low and closes at the rising edge of $CLK$. The data input to the latch, $ENABLE$, must be stable at least $T_{\\text{su,latch}}$ before the rising edge of $CLK$, and an extra safety margin $T_{\\text{margin}}$ must be included as well.\n\nThe control registers that drive the combinational logic are triggered on the falling edge of $CLK$, and their outputs become valid after a clock-to-$Q$ delay $T_{\\text{c2q}}$. The combinational logic then incurs a propagation delay $T_{\\text{prop}}$ to produce $ENABLE$ at the latch input.\n\nConsidering the minimum low phase duration $T_{\\text{low}}$, the total available time from the falling edge to the latest allowed stable arrival at the latch input is $T_{\\text{low}} - T_{\\text{su,latch}} - T_{\\text{margin}}$. Therefore, the timing inequality for safe operation is\n$$\nT_{\\text{c2q}} + T_{\\text{prop}} \\leq T_{\\text{low}} - T_{\\text{su,latch}} - T_{\\text{margin}}.\n$$\nSolving for the maximum allowable propagation delay,\n$$\nT_{\\text{prop,max}} = T_{\\text{low}} - T_{\\text{c2q}} - T_{\\text{su,latch}} - T_{\\text{margin}}.\n$$\nSubstituting the given values $T_{\\text{low}} = 600\\ \\text{ps}$, $T_{\\text{c2q}} = 45\\ \\text{ps}$, $T_{\\text{su,latch}} = 35\\ \\text{ps}$, and $T_{\\text{margin}} = 50\\ \\text{ps}$,\n$$\nT_{\\text{prop,max}} = 600 - 45 - 35 - 50 = 470\\ \\text{ps}.\n$$\nThus, the maximum allowable propagation delay for the combinational logic is $470\\ \\text{ps}$.", "answer": "$$\\boxed{470}$$", "id": "1920633"}]}