{"hands_on_practices": [{"introduction": "To truly master the digital PID controller, we must first understand its mechanics at the most fundamental level. This practice involves a step-by-step manual calculation of the controller's output over several time intervals. By working through this process [@problem_id:1571856], you will gain a concrete understanding of how the proportional, integral, and derivative components individually and collectively respond to a changing error signal, forming the foundation for all further analysis and implementation.", "problem": "A digital controller is designed to regulate the temperature of a small experimental furnace. The controller's output, $u(k)$, is the voltage applied to the heating element at discrete time step $k$. This controller implements a Proportional-Integral-Derivative (PID) algorithm. The control voltage $u(k)$ is calculated based on the error signal $e(k)$, which is the difference between the desired setpoint temperature and the measured furnace temperature.\n\nThe discrete-time PID control law is given by the equation:\n$$u(k) = K_p e(k) + K_i T_s \\sum_{i=0}^{k} e(i) + \\frac{K_d}{T_s} (e(k) - e(k-1))$$\nwhere:\n- $K_p$ is the proportional gain.\n- $K_i$ is the integral gain.\n- $K_d$ is the derivative gain.\n- $T_s$ is the sampling time.\n\nThe controller has the following parameters:\n- Proportional gain, $K_p = 2.0$ V/°C\n- Integral gain, $K_i = 0.8$ V/(°C·s)\n- Derivative gain, $K_d = 0.5$ V·s/°C\n- Sampling time, $T_s = 0.5$ s\n\nThe system is activated at time $t=0$ (corresponding to sample $k=0$). For the initial period of operation, the error signal is observed to follow the relation $e(k) = A \\cdot k$, where $k \\in \\{0, 1, 2, ...\\}$ is the discrete time index and $A = 0.25$ °C.\n\nAssume the system is at rest for all time prior to $k=0$. This implies that the initial value of the summation term is zero, and the error at the previous time step, $e(-1)$, can be taken as $0$.\n\nCalculate the first four values of the controller output voltage, $u(0)$, $u(1)$, $u(2)$, and $u(3)$. Express your answers in Volts. Present the four values, $u(0), u(1), u(2), u(3)$, as a row matrix, with each value rounded to three significant figures.", "solution": "The discrete-time PID law is\n$$u(k) = K_{p} e(k) + K_{i} T_{s} \\sum_{i=0}^{k} e(i) + \\frac{K_{d}}{T_{s}} \\left(e(k) - e(k-1)\\right).$$\nGiven $e(k)=A k$ for $k \\geq 0$ with $A=0.25$ and $e(-1)=0$, we compute the summation and difference terms:\n$$\\sum_{i=0}^{k} e(i) = \\sum_{i=0}^{k} A i = A \\sum_{i=0}^{k} i = A \\frac{k(k+1)}{2},$$\n$$e(k)-e(k-1) = \\begin{cases}\n0, & k=0,\\\\\nA, & k \\geq 1.\n\\end{cases}$$\nSubstitute the controller parameters $K_{p}=2.0$, $K_{i}=0.8$, $K_{d}=0.5$, $T_{s}=0.5$:\n$$K_{i}T_{s}=0.8 \\cdot 0.5=0.4,\\qquad \\frac{K_{d}}{T_{s}}=\\frac{0.5}{0.5}=1.$$\nThus,\n$$u(k)=2.0\\,e(k)+0.4 \\sum_{i=0}^{k} e(i)+1\\cdot\\left(e(k)-e(k-1)\\right).$$\nWith $e(k)=0.25 k$ and $\\sum_{i=0}^{k} e(i)=0.25 \\cdot \\frac{k(k+1)}{2}=0.125\\,k(k+1)$, we have\n$$u(k)=2.0\\cdot(0.25 k)+0.4\\cdot(0.125\\,k(k+1))+\\left(e(k)-e(k-1)\\right).$$\nSince $e(k)-e(k-1)=0$ for $k=0$ and equals $0.25$ for $k \\geq 1$, evaluate each $k$:\n\nFor $k=0$:\n$$e(0)=0,\\quad \\sum_{i=0}^{0} e(i)=0,\\quad e(0)-e(-1)=0,$$\n$$u(0)=2.0\\cdot 0+0.4\\cdot 0+1\\cdot 0=0.$$\n\nFor $k=1$:\n$$e(1)=0.25,\\quad \\sum_{i=0}^{1} e(i)=0.125\\cdot 1\\cdot 2=0.25,\\quad e(1)-e(0)=0.25,$$\n$$u(1)=2.0\\cdot 0.25+0.4\\cdot 0.25+1\\cdot 0.25=0.5+0.1+0.25=0.85.$$\n\nFor $k=2$:\n$$e(2)=0.5,\\quad \\sum_{i=0}^{2} e(i)=0.125\\cdot 2\\cdot 3=0.75,\\quad e(2)-e(1)=0.25,$$\n$$u(2)=2.0\\cdot 0.5+0.4\\cdot 0.75+1\\cdot 0.25=1.0+0.3+0.25=1.55.$$\n\nFor $k=3$:\n$$e(3)=0.75,\\quad \\sum_{i=0}^{3} e(i)=0.125\\cdot 3\\cdot 4=1.5,\\quad e(3)-e(2)=0.25,$$\n$$u(3)=2.0\\cdot 0.75+0.4\\cdot 1.5+1\\cdot 0.25=1.5+0.6+0.25=2.35.$$\n\nRounded to three significant figures, the values are $u(0)=0.000$, $u(1)=0.850$, $u(2)=1.55$, $u(3)=2.35$.", "answer": "$$\\boxed{\\begin{pmatrix} 0.000 & 0.850 & 1.55 & 2.35 \\end{pmatrix}}$$", "id": "1571856"}, {"introduction": "Moving from theory to application, the next logical step is to translate control algorithms into functional code, a core task for any control engineer. This exercise [@problem_id:1571851] challenges you to implement a common and powerful variant of the standard PID controller known as the I-PD controller. By focusing the proportional and derivative actions on the process measurement rather than the error, this structure helps mitigate \"derivative kick\" during setpoint changes, and this practice will solidify your ability to translate difference equations into a robust software function.", "problem": "In digital control systems, a Proportional-Integral-Derivative (PID) controller is often modified to improve its response to setpoint changes. One such modification is the I-PD controller, where the integral action is applied to the error signal, but the proportional and derivative actions are applied directly to the process measurement. This configuration helps to avoid \"derivative kick,\" an undesirable large spike in the controller output when the setpoint is changed suddenly.\n\nConsider a digital I-PD controller whose output $u[k]$ at discrete time step $k$ is determined by the following set of difference equations:\n\n$u[k] = u_I[k] - u_P[k] - u_D[k]$\n\nwhere the component terms are defined as:\n1.  **Integral Action ($u_I$):** This term accumulates the error over time.\n    $u_I[k] = u_I[k-1] + K_i T_s e[k]$\n2.  **Proportional Action ($u_P$):** This term is proportional to the current measurement.\n    $u_P[k] = K_p y[k]$\n3.  **Derivative Action ($u_D$):** This term is proportional to the rate of change of the measurement, approximated by a backward difference.\n    $u_D[k] = \\frac{K_d}{T_s}(y[k] - y[k-1])$\n\nThe error $e[k]$ is defined as the difference between the reference setpoint $r[k]$ and the process measurement $y[k]$:\n$e[k] = r[k] - y[k]$\n\nThe parameters are:\n- $u[k]$: Controller output at time step $k$.\n- $y[k]$: Process measurement at time step $k$.\n- $r[k]$: Reference setpoint at time step $k$.\n- $T_s$: Constant sampling period.\n- $K_p$, $K_i$, $K_d$: Proportional, integral, and derivative gains, respectively (all are positive constants).\n\nYou are tasked with implementing this controller in C-like pseudo-code. The function `compute_control_signal` is called once per sampling period $T_s$. It must correctly calculate the output $u[k]$ and maintain the necessary state variables for the next call. The function receives the current `reference` ($r[k]$) and `measurement` ($y[k]$) and should return the calculated `output` ($u[k]$). The gains `Kp`, `Ki`, `Kd`, and the sampling time `Ts` are available as global constants.\n\nSelect the code block that correctly implements the I-PD controller as defined by the equations above.\n\nA.\n```c\nfloat compute_control_signal(float reference, float measurement) {\n    static float integral_term = 0.0;\n    static float prev_measurement = 0.0;\n\n    float error = reference - measurement;\n    integral_term = integral_term + Ki * Ts * error;\n    float p_term = Kp * measurement;\n    float d_term = (Kd / Ts) * (measurement - prev_measurement);\n    float output = integral_term - p_term - d_term;\n\n    prev_measurement = measurement;\n    return output;\n}\n```\n\nB.\n```c\nfloat compute_control_signal(float reference, float measurement) {\n    static float integral_term = 0.0;\n    static float prev_error = 0.0;\n\n    float error = reference - measurement;\n    integral_term = integral_term + Ki * Ts * error;\n    float p_term = Kp * error;\n    float d_term = (Kd / Ts) * (error - prev_error);\n    float output = p_term + integral_term + d_term;\n\n    prev_error = error;\n    return output;\n}\n```\n\nC.\n```c\nfloat compute_control_signal(float reference, float measurement) {\n    static float integral_term = 0.0;\n    static float prev_measurement = 0.0;\n\n    float error = reference - measurement;\n    integral_term = integral_term + Ki * Ts * error;\n    float p_term = Kp * measurement;\n    float d_term = (Kd / Ts) * (measurement - prev_measurement);\n    float output = p_term + integral_term + d_term;\n\n    prev_measurement = measurement;\n    return output;\n}\n```\n\nD.\n```c\nfloat compute_control_signal(float reference, float measurement) {\n    static float integral_term = 0.0;\n    static float prev_measurement = 0.0;\n\n    float error = reference - measurement;\n    integral_term = Ki * Ts * error;\n    float p_term = Kp * measurement;\n    float d_term = (Kd / Ts) * (measurement - prev_measurement);\n    float output = integral_term - p_term - d_term;\n\n    prev_measurement = measurement;\n    return output;\n}\n```", "solution": "We are given the I-PD controller defined by the discrete-time equations:\n$$u[k] = u_{I}[k] - u_{P}[k] - u_{D}[k],$$\nwith\n$$u_{I}[k] = u_{I}[k-1] + K_{i} T_{s} e[k], \\quad u_{P}[k] = K_{p} y[k], \\quad u_{D}[k] = \\frac{K_{d}}{T_{s}}\\left(y[k] - y[k-1]\\right),$$\nand\n$$e[k] = r[k] - y[k].$$\nTo implement this in code, we need persistent state variables: one to store $u_{I}[k-1]$ (an integral accumulator) and one to store $y[k-1]$ (the previous measurement). At each call:\n- Compute the error $e[k] = r[k] - y[k]$.\n- Update the integral accumulator as $u_{I}[k] = u_{I}[k-1] + K_{i} T_{s} e[k]$.\n- Compute the proportional term using the measurement: $u_{P}[k] = K_{p} y[k]$.\n- Compute the derivative term using the backward difference of the measurement: $u_{D}[k] = \\frac{K_{d}}{T_{s}}(y[k] - y[k-1])$.\n- Form the output with the specified signs: $u[k] = u_{I}[k] - u_{P}[k] - u_{D}[k]$.\n- Update the stored previous measurement: $y[k-1] \\leftarrow y[k]$.\n\nNow evaluate each option against these requirements:\n\nOption A:\n- Uses a static integral accumulator and previous measurement.\n- Computes $e[k] = r[k] - y[k]$.\n- Updates the integral as $u_{I}[k] = u_{I}[k-1] + K_{i} T_{s} e[k]$.\n- Computes $u_{P}[k] = K_{p} y[k]$ and $u_{D}[k] = \\frac{K_{d}}{T_{s}}(y[k] - y[k-1])$.\n- Forms $u[k] = u_{I}[k] - u_{P}[k] - u_{D}[k]$ and updates $y[k-1]$.\nThis matches the given equations exactly.\n\nOption B:\n- Uses proportional and derivative terms on the error, i.e., $u_{P}[k] = K_{p} e[k]$ and $u_{D}[k] = \\frac{K_{d}}{T_{s}}(e[k] - e[k-1])$.\n- Sums $u_{P} + u_{I} + u_{D}$.\nThis is a standard PID on the error, not an I-PD; therefore incorrect.\n\nOption C:\n- Uses $u_{P}[k] = K_{p} y[k]$ and $u_{D}[k] = \\frac{K_{d}}{T_{s}}(y[k] - y[k-1])$ correctly with measurement, and updates the integral correctly.\n- However, forms $u[k] = u_{P}[k] + u_{I}[k] + u_{D}[k]$, which has the wrong signs; the correct form requires subtraction of the proportional and derivative terms.\nTherefore incorrect.\n\nOption D:\n- Uses the proportional and derivative terms on the measurement and subtracts them, matching the sign convention.\n- However, sets the integral term to $K_{i} T_{s} e[k]$ without accumulation, i.e., it omits $u_{I}[k-1]$.\nThis fails to implement integral accumulation and is incorrect.\n\nTherefore, only Option A implements the I-PD controller as defined.", "answer": "$$\\boxed{A}$$", "id": "1571851"}, {"introduction": "A successful digital control system depends not just on the control law itself, but also on the specific method used for its digital implementation. Continuous-time controller designs must be approximated into a discrete-time form, and this choice has profound consequences. This final practice [@problem_id:1571885] guides you through an analysis of closed-loop stability, comparing two common discretization techniques: the Forward Euler and Tustin methods. It is a crucial exercise that reveals how a controller that is stable in theory can become unstable due to the nuances of its digital implementation.", "problem": "A digital control system is designed to regulate a process modeled by the continuous-time transfer function of a pure integrator plant, $P(s) = \\frac{K}{s}$. The controller is an ideal Proportional-Derivative (PD) controller with the transfer function $C(s) = K_p + K_d s$. The system is configured in a standard unity feedback loop.\n\nFor implementation, the continuous plant $P(s)$ is discretized using a Zero-Order Hold (ZOH) with a sampling time $T$, resulting in the discrete-time transfer function $P(z) = \\frac{KT}{z-1}$. The digital controller $C(z)$ is obtained by discretizing the continuous controller $C(s)$.\n\nYou are tasked with comparing the stability of the closed-loop system for two different discretization methods for the controller:\n1.  **Forward Euler Method**: using the approximation $s \\approx \\frac{z-1}{T}$.\n2.  **Tustin's Method (Bilinear Transform)**: using the approximation $s \\approx \\frac{2}{T}\\frac{z-1}{z+1}$.\n\nThe system parameters are given as: plant gain $K=5$, proportional gain $K_p=0.4$, and derivative gain $K_d=0.1$.\n\nLet $T_{FE}$ be the maximum sampling time (in seconds) for which the system using the Forward Euler controller remains stable. If the system is stable for all $T > 0$, consider its maximum sampling time to be infinite.\nLet $T_{T}$ be the maximum sampling time (in seconds) for which the system using the Tustin controller remains stable. If the system is stable for all $T > 0$, consider its maximum sampling time to be infinite.\n\nWhich of the following statements correctly describes the stability of the two resulting systems?\n\nA. The Forward Euler system has a stability limit of $T_{FE} = 1.5$ s; the Tustin-based system is unstable for all $T > 0$.\nB. The Forward Euler system has a stability limit of $T_{FE} = 0.75$ s; the Tustin-based system is unstable for all $T > 0$.\nC. The Forward Euler system has a stability limit of $T_{FE} = 1.5$ s; the Tustin-based system is stable for all $T > 0$.\nD. Both systems are stable for all $T > 0$.\nE. Both systems are unstable for all $T > 0$.", "solution": "The continuous plant is a pure integrator $P(s)=\\frac{K}{s}$. With ZOH and sampling time $T$, the discrete plant is\n$$\nP(z)=\\frac{K T}{z-1}.\n$$\nThe continuous PD controller is $C(s)=K_{p}+K_{d}s$. We discretize $C(s)$ by two methods and analyze the closed-loop stability with unity feedback.\n\nForward Euler method: use $s \\approx \\frac{z-1}{T}$, giving\n$$\nC_{\\mathrm{FE}}(z)=K_{p}+K_{d}\\frac{z-1}{T}.\n$$\nThe loop transfer function is\n$$\nL_{\\mathrm{FE}}(z)=C_{\\mathrm{FE}}(z)P(z)=\\left(K_{p}+K_{d}\\frac{z-1}{T}\\right)\\frac{K T}{z-1}=K K_{d}+\\frac{K T K_{p}}{z-1}.\n$$\nThe closed-loop characteristic equation is $1+L_{\\mathrm{FE}}(z)=0$. Multiplying by $(z-1)$ yields\n$$\n(z-1)\\left(1+K K_{d}\\right)+K T K_{p}=0,\n$$\nso the closed-loop pole is\n$$\nz=1-\\frac{K T K_{p}}{1+K K_{d}}.\n$$\nDiscrete-time stability requires $|z|<1$, i.e.,\n$$\n|1-\\frac{K K_{p}}{1+K K_{d}}T|<1.\n$$\nThis is equivalent to\n$$\n0<T<\\frac{2\\left(1+K K_{d}\\right)}{K K_{p}}.\n$$\nThus the maximum sampling time is\n$$\nT_{\\mathrm{FE},\\max}=\\frac{2\\left(1+K K_{d}\\right)}{K K_{p}}.\n$$\nSubstituting $K=5$, $K_{p}=0.4$, $K_{d}=0.1$ gives $K K_{p}=2$ and $K K_{d}=0.5$, hence\n$$\nT_{\\mathrm{FE},\\max}=\\frac{2(1+0.5)}{2}=1.5.\n$$\n\nTustin method: use $s \\approx \\frac{2}{T}\\frac{z-1}{z+1}$, giving\n$$\nC_{\\mathrm{T}}(z)=K_{p}+K_{d}\\frac{2}{T}\\frac{z-1}{z+1}=\\frac{K_{p}(z+1)+\\frac{2K_{d}}{T}(z-1)}{z+1}.\n$$\nThe loop transfer function is\n$$\nL_{\\mathrm{T}}(z)=C_{\\mathrm{T}}(z)P(z)=\\frac{K T}{z-1}\\cdot\\frac{K_{p}(z+1)+\\frac{2K_{d}}{T}(z-1)}{z+1}=\\frac{K T K_{p}}{z-1}+\\frac{2 K K_{d}}{z+1}.\n$$\nThe closed-loop characteristic equation $1+L_{\\mathrm{T}}(z)=0$ becomes, after multiplying by $(z-1)(z+1)$,\n$$\n(z-1)(z+1)+K T K_{p}(z+1)+2 K K_{d}(z-1)=0,\n$$\nor\n$$\nz^{2}+\\left(K T K_{p}+2 K K_{d}\\right)z+\\left(K T K_{p}-2 K K_{d}-1\\right)=0.\n$$\nDefine $b=K T K_{p}+2 K K_{d}$ and $c=K T K_{p}-2 K K_{d}-1$. Schur stability for $z^{2}+b z+c$ requires the Jury conditions\n$$\n1+b+c>0,\\quad 1-b+c>0,\\quad 1-c>0.\n$$\nCompute these symbolically:\n$$\n1+b+c=1+\\left(K T K_{p}+2 K K_{d}\\right)+\\left(K T K_{p}-2 K K_{d}-1\\right)=2 K T K_{p}>0 \\text{ for } T>0,\n$$\n$$\n1-b+c=1-\\left(K T K_{p}+2 K K_{d}\\right)+\\left(K T K_{p}-2 K K_{d}-1\\right)=-4 K K_{d},\n$$\n$$\n1-c=1-\\left(K T K_{p}-2 K K_{d}-1\\right)=2+2 K K_{d}-K T K_{p}.\n$$\nWith $K>0$ and $K_{d}>0$, the second condition becomes $-4 K K_{d}>0$, which is impossible. Therefore the Tustin-based closed loop is unstable for all $T>0$, regardless of the value of $T$.\n\nWith $K=5$, $K_{p}=0.4$, $K_{d}=0.1$, the Forward Euler design has stability limit $T_{\\mathrm{FE}}=1.5$ s, and the Tustin design is unstable for all $T>0$. This corresponds to option A.", "answer": "$$\\boxed{A}$$", "id": "1571885"}]}