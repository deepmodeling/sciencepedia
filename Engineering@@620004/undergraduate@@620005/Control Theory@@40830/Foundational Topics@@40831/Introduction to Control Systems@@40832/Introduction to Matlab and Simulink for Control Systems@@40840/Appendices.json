{"hands_on_practices": [{"introduction": "Before building complex simulations, it's essential to understand the language of control systems. Key performance metrics like the natural frequency ($\\omega_n$) and damping ratio ($\\zeta$) are derived directly from a system's transfer function and tell us whether a system will oscillate, overshoot, or respond sluggishly. This first practice [@problem_id:1583287] is a fundamental exercise in extracting these crucial parameters from a given second-order system model, a calculation that forms the basis of many analysis commands in MATLAB.", "problem": "An aerospace engineering student is modeling the closed-loop stabilization system for a camera gimbal mounted on a quadcopter. The transfer function, $G(s)$, relating the desired camera angle to the actual camera angle is found to be:\n\n$$ G(s) = \\frac{225}{3s^2 + 15s + 150} $$\n\nTo analyze the system's performance, such as its tendency to overshoot or oscillate, the student plans to use MATLAB. A common approach is to identify the system's natural frequency, $\\omega_n$, and damping ratio, $\\zeta$, by comparing the system to the standard second-order prototype:\n\n$$ G_{std}(s) = \\frac{K \\omega_n^2}{s^2 + 2\\zeta\\omega_n s + \\omega_n^2} $$\n\nYour task is to manually calculate the values that MATLAB's analysis tools would determine for this system. Calculate the natural frequency, $\\omega_n$, and the damping ratio, $\\zeta$.\n\nExpress the natural frequency $\\omega_n$ in rad/s. Present your final answer as a row matrix containing two numerical values, rounded to three significant figures: the first element being the value for $\\omega_n$ and the second being the value for $\\zeta$.", "solution": "We are given the transfer function $G(s) = \\frac{225}{3s^2 + 15s + 150}$ and the standard second-order form $G_{std}(s) = \\frac{K \\omega_n^2}{s^2 + 2\\zeta\\omega_n s + \\omega_n^2}$. To identify $\\omega_n$ and $\\zeta$, first rewrite $G(s)$ so the coefficient of $s^2$ in the denominator is $1$:\n$$\nG(s) = \\frac{225}{3s^2 + 15s + 150} = \\frac{75}{s^2 + 5s + 50}.\n$$\nComparing the denominator $s^2 + 5s + 50$ with the standard form denominator $s^2 + 2\\zeta\\omega_n s + \\omega_n^2$ gives the parameter identifications:\n$$\n2\\zeta \\omega_n = 5, \\qquad \\omega_n^2 = 50.\n$$\nSolve for the natural frequency:\n$$\n\\omega_n = \\sqrt{50}.\n$$\nThen solve for the damping ratio using $2\\zeta \\omega_n = 5$:\n$$\n\\zeta = \\frac{5}{2\\omega_n} = \\frac{5}{2\\sqrt{50}} = \\frac{1}{2\\sqrt{2}}.\n$$\nFor the requested numerical values rounded to three significant figures: $\\omega_n = \\sqrt{50} \\approx 7.07$ rad/s and $\\zeta \\approx 0.354$. A consistency check gives $K$ via $K \\omega_n^2 = 75$, so $K = \\frac{75}{50} = 1.5$, which is not required for the final answer.", "answer": "$$\\boxed{\\begin{pmatrix} 7.07 & 0.354 \\end{pmatrix}}$$", "id": "1583287"}, {"introduction": "Moving from analysis to implementation, we often use digital controllers to manage a system's behavior. While Simulink provides ready-made blocks, a true understanding comes from building a controller from its foundational principles. This exercise [@problem_id:1583275] challenges you to trace the step-by-step logic of a discrete-time PID controller, demystifying how its proportional, integral, and derivative actions unfold over time to guide a system towards its target.", "problem": "A digital control system is designed to regulate the position of a mechanical plant. The system consists of a discrete-time Proportional-Integral-Derivative (PID) controller operating in a feedback loop with the plant. The controller and plant are implemented in a simulation environment with a fixed sample time $T_s$.\n\nThe control system's objective is to make the plant's output, $y(k)$, follow a reference signal, $r(k)$. The reference signal is a unit step function, defined as $r(k) = 1$ for all time steps $k \\ge 0$, and $r(k) = 0$ for $k < 0$. The error signal is computed at each step as $e(k) = r(k) - y(k)$.\n\nThe PID controller calculates the control input to the plant, $u(k)$, as the sum of three components: $u(k) = P(k) + I(k) + D(k)$.\n- The Proportional (P) term is $P(k) = K_p \\cdot e(k)$.\n- The Integral (I) term is implemented as an accumulator described by the recursive formula $I(k) = I(k-1) + K_i T_s e(k)$.\n- The Derivative (D) term is approximated using a backward difference: $D(k) = \\frac{K_d}{T_s} (e(k) - e(k-1))$.\n\nThe plant is modeled by the discrete-time difference equation $y(k) = y(k-1) + T_s u(k-1)$.\n\nThe system uses the following parameters:\n- Proportional Gain: $K_p = 1.2$\n- Integral Gain: $K_i = 0.5$\n- Derivative Gain: $K_d = 0.8$\n- Sample Time: $T_s = 0.1$ s\n\nAssume the system starts from rest, which means all signals are zero for any time step $k < 0$. Specifically, $u(k)=0$, $e(k)=0$, and $y(k)=0$ for all $k < 0$. The initial condition for the integral term is $I(-1)=0$.\n\nCalculate the numerical value of the plant's output, $y(k)$, at the time step $k=3$. Express your answer, which represents the plant's position, in meters. Round your final answer to four significant figures.", "solution": "The discrete-time controller and plant are given by\n$$u(k) = P(k) + I(k) + D(k),\\quad P(k) = K_p e(k),\\quad I(k) = I(k-1) + K_i T_s e(k),\\quad D(k) = \\frac{K_d}{T_s}\\big(e(k) - e(k-1)\\big),$$\nand\n$$y(k) = y(k-1) + T_s u(k-1).$$\nThe reference is $r(k)=1$ for $k\\geq 0$, with $e(k) = r(k) - y(k)$. Initial conditions are $y(k)=0$, $u(k)=0$, $e(k)=0$ for $k<0$, and $I(-1)=0$. With $K_p=1.2$, $K_i=0.5$, $K_d=0.8$, and $T_s=0.1$, we compute step by step.\n\nAt $k=0$,\n$$y(0) = y(-1) + T_s u(-1) = 0,$$\n$$e(0) = r(0) - y(0) = 1 - 0 = 1,$$\n$$P(0) = 1.2 \\cdot 1 = 1.2,\\quad I(0) = 0 + 0.5 \\cdot 0.1 \\cdot 1 = 0.05,\\quad D(0) = \\frac{0.8}{0.1}(1 - 0) = 8,$$\n$$u(0) = 1.2 + 0.05 + 8 = 9.25,\\quad y(1) = y(0) + 0.1 \\cdot 9.25 = 0.925.$$\n\nAt $k=1$,\n$$e(1) = 1 - 0.925 = 0.075,$$\n$$P(1) = 1.2 \\cdot 0.075 = 0.09,\\quad I(1) = 0.05 + 0.5 \\cdot 0.1 \\cdot 0.075 = 0.05375,$$\n$$D(1) = \\frac{0.8}{0.1}(0.075 - 1) = -7.4,$$\n$$u(1) = 0.09 + 0.05375 - 7.4 = -7.25625,\\quad y(2) = 0.925 + 0.1 \\cdot (-7.25625) = 0.199375.$$\n\nAt $k=2$,\n$$e(2) = 1 - 0.199375 = 0.800625,$$\n$$P(2) = 1.2 \\cdot 0.800625 = 0.96075,\\quad I(2) = 0.05375 + 0.5 \\cdot 0.1 \\cdot 0.800625 = 0.09378125,$$\n$$D(2) = \\frac{0.8}{0.1}(0.800625 - 0.075) = 8 \\cdot 0.725625 = 5.805,$$\n$$u(2) = 0.96075 + 0.09378125 + 5.805 = 6.85953125.$$\n\nTherefore,\n$$y(3) = y(2) + 0.1 \\cdot u(2) = 0.199375 + 0.1 \\cdot 6.85953125 = 0.885328125.$$\nRounded to four significant figures, $y(3) = 0.8853$.", "answer": "$$\\boxed{0.8853}$$", "id": "1583275"}, {"introduction": "As you build more intricate models in Simulink, you may encounter a common and initially confusing error: the 'algebraic loop'. This occurs when a block's output depends instantaneously on its own input, creating a dependency that the solver cannot resolve. This problem [@problem_id:1583230] presents a classic scenario that generates such a loop and prompts you to think critically about the most physically faithful and mathematically sound way to restructure the model, a crucial skill for robust simulation.", "problem": "A control engineering student is tasked with creating a dynamic simulation model for a mechanical rotational system. The system comprises two coaxial disks with moments of inertia $J_1$ and $J_2$. These disks are interconnected by a shaft that is assumed to be perfectly rigid and massless. An external torque, $\\tau(t)$, is applied to the disk with inertia $J_1$. The objective is to compute the resulting angular acceleration, $\\alpha(t)$, of the coupled system.\n\nThe student approaches the modeling problem by considering each disk as an independent subsystem within the simulation environment.\n- The equation of motion for the first disk is derived from Newton's second law for rotation: $J_1 \\alpha_1(t) = \\tau(t) - \\tau_{int}(t)$, where $\\alpha_1$ is the angular acceleration of the first disk and $\\tau_{int}$ is the internal torque exerted by the second disk through the shaft.\n- Similarly, the equation for the second disk is: $J_2 \\alpha_2(t) = \\tau_{int}(t)$, where $\\alpha_2$ is its angular acceleration.\n- The constraint imposed by the perfectly rigid shaft is that the angular accelerations of both disks must be identical at all times: $\\alpha_1(t) = \\alpha_2(t)$.\n\nUpon implementing this model in a block-diagram-based simulation environment (such as Simulink), where the output $\\alpha_2$ is used to compute $\\tau_{int}$, which is then fed back to the summation block for the first disk's equation, the simulation fails to initialize. The software reports an \"algebraic loop\" error. This error arises because the output of a block (e.g., the block calculating $\\alpha_1$) directly depends on its own input at the same simulation time step, creating a circular dependency that the solver cannot resolve sequentially.\n\nWhich of the following proposed strategies represents the most mathematically sound and physically faithful method to resolve this algebraic loop for the system as described?\n\nA. Modify the block diagram by inserting a Unit Delay block in the feedback path for the internal torque, $\\tau_{int}$. This makes the calculation of $\\tau_{int}$ at the current time step, $t$, dependent on the system's state at the previous time step, $t-\\Delta t$.\n\nB. Reformulate the underlying mathematical model by algebraically combining the equations of motion for both disks into a single equation representing an equivalent system, thereby eliminating the internal torque variable from the model.\n\nC. Change the solver configuration settings in the simulation software to automatically handle algebraic loops by enabling its iterative line-search algorithm and setting the diagnostic for algebraic loops from \"error\" to \"warning\".\n\nD. Insert a first-order lag filter, represented by a transfer function block of the form $G(s) = 1/(T_f s + 1)$ where $T_f$ is a very small positive time constant, in the feedback path for $\\tau_{int}$ to approximate the rigid connection while breaking the instantaneous dependency.", "solution": "We begin with Newton’s second law for rotation for each disk:\n$$\nJ_1\\alpha_1(t)=\\tau(t)-\\tau_{int}(t), \\qquad J_2\\alpha_2(t)=\\tau_{int}(t).\n$$\nThe perfectly rigid, massless shaft imposes the kinematic constraint that the angular accelerations are identical:\n$$\n\\alpha_1(t)=\\alpha_2(t)\\equiv\\alpha(t).\n$$\nUsing this constraint, we eliminate the internal torque by adding the two equations:\n$$\nJ_1\\alpha(t)+J_2\\alpha(t)=\\tau(t),\n$$\nwhich simplifies to the equivalent single equation\n$$\n\\left(J_1+J_2\\right)\\alpha(t)=\\tau(t).\n$$\nTherefore, the coupled system behaves exactly like a single rigid body with equivalent moment of inertia\n$$\nJ_{eq}=J_1+J_2,\n$$\nand its angular acceleration is\n$$\n\\alpha(t)=\\frac{\\tau(t)}{J_{eq}}=\\frac{\\tau(t)}{J_1+J_2}.\n$$\nThis reformulation removes the internal torque variable from the model, converts the dynamics into an ordinary differential equation without algebraic loops, and preserves the exact physics of a perfectly rigid coupling. It is also consistent with energy and momentum: for a rigidly locked assembly with common angular velocity $\\omega(t)$, the kinetic energy is $T=\\frac{1}{2}(J_1+J_2)\\omega^2(t)$, matching the equivalent inertia.\n\nEvaluating the proposed strategies:\n- Option A (insert a Unit Delay) introduces a discrete-time artifact that breaks the instantaneous rigid constraint and creates nonphysical dynamics dependent on the step size, so it is not mathematically exact nor physically faithful.\n- Option B (algebraically combine into an equivalent system) is mathematically exact under the rigid-shaft assumption, eliminates the algebraic loop, and is physically faithful, as shown above.\n- Option C (change solver settings) leaves the underlying algebraic loop intact and relies on numerical heuristics; it does not improve physical fidelity and may affect robustness.\n- Option D (insert a small lag) adds artificial compliance/dynamics and only approximates rigidity; it is not exact and can bias results.\n\nThus, the most mathematically sound and physically faithful method is to reformulate the model into the equivalent single-inertia system, i.e., Option B.", "answer": "$$\\boxed{B}$$", "id": "1583230"}]}