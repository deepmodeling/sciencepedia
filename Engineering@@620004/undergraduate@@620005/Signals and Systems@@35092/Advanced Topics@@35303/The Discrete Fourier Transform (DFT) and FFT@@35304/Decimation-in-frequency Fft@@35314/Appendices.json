{"hands_on_practices": [{"introduction": "The power of the Fast Fourier Transform (FFT) lies in its dramatic reduction of computational complexity compared to the direct DFT calculation. The Decimation-In-Frequency (DIF) algorithm achieves this efficiency through a 'divide and conquer' strategy built upon a fundamental operation called the 'butterfly'. This first practice invites you to analyze the computational cost at the most basic level by quantifying the exact number of arithmetic operations required in the initial stage of a DIF-FFT, providing a tangible grasp of the algorithm's efficiency. [@problem_id:1711068]", "problem": "A specialized Digital Signal Processor (DSP) is being designed to perform a Fast Fourier Transform (FFT). The hardware is optimized for a radix-2, 16-point Decimation-In-Frequency (DIF) FFT algorithm. The DIF algorithm begins by creating a set of butterfly computations from the input sequence, $x[n]$ for $n=0, 1, \\dots, 15$. This initial step is referred to as the 'first stage' of the FFT. In this stage, a new set of values is computed by combining elements from the first half of the sequence, $x[n]$ for $n=0, 1, \\dots, 7$, with elements from the second half, $x[n+8]$.\n\nYour task is to determine the total number of fundamental complex arithmetic operations performed during this first stage. A fundamental complex arithmetic operation is defined as either one complex addition, one complex subtraction, or one complex multiplication. Count every such operation required by the standard DIF-FFT butterfly structure for this stage.", "solution": "For a radix-2, length-$N$ Decimation-In-Frequency FFT, the first-stage butterflies pair samples $x[n]$ and $x[n+N/2]$ for $n=0,1,\\dots,\\frac{N}{2}-1$. The standard DIF butterfly computes\n$$\ny_{0}[n]=x[n]+x[n+N/2], \\quad y_{1}[n]=\\big(x[n]-x[n+N/2]\\big)\\,W_{N}^{n},\n$$\nwhere $W_{N}=\\exp\\big(-j\\,2\\pi/N\\big)$.\n\nFrom these expressions, per butterfly:\n- Computing $y_{0}[n]$ requires one complex addition.\n- Computing $x[n]-x[n+N/2]$ requires one complex subtraction.\n- Multiplying by $W_{N}^{n}$ requires one complex multiplication.\n\nThus, each butterfly entails exactly one complex addition, one complex subtraction, and one complex multiplication, for a total of three fundamental complex operations per butterfly.\n\nIn the first stage for $N=16$, the number of butterflies is $\\frac{N}{2}=\\frac{16}{2}=8$. Therefore, the total number of fundamental complex arithmetic operations in this stage is\n$$\n8 \\times \\big(1\\ \\text{complex addition} + 1\\ \\text{complex subtraction} + 1\\ \\text{complex multiplication}\\big)=8+8+8=24.\n$$", "answer": "$$\\boxed{24}$$", "id": "1711068"}, {"introduction": "In practical signal processing, we often manipulate input signals before applying the FFT to enhance our analysis. A common technique is zero-padding, which can improve the apparent resolution of the frequency spectrum. This exercise explores the direct consequences of zero-padding on the internal workings of the DIF-FFT algorithm, demonstrating how a structured input simplifies the first-stage butterfly calculations and creates a special relationship between the resulting intermediate data streams. [@problem_id:1711040]", "problem": "Consider a finite, discrete-time sequence $x[n]$ of length 4, defined for $n \\in \\{0, 1, 2, 3\\}$. A new sequence $y[n]$ of length 8 is created by zero-padding $x[n]$, such that $y[n] = x[n]$ for $n \\in \\{0, 1, 2, 3\\}$ and $y[n] = 0$ for $n \\in \\{4, 5, 6, 7\\}$.\n\nThis 8-point sequence $y[n]$ is the input to a standard radix-2 Decimation-In-Frequency (DIF) Fast Fourier Transform (FFT) algorithm. The first stage of this algorithm computes two intermediate 4-point sequences, which we will denote as $g[n]$ and $h[n]$, defined for $n \\in \\{0, 1, 2, 3\\}$. The computations are as follows:\n\n$g[n] = y[n] + y[n+4]$\n$h[n] = (y[n] - y[n+4]) W_8^n$\n\nHere, $W_N^k = \\exp(-j2\\pi k/N)$ is the twiddle factor. Assume $x[n]$ is not identically zero.\n\nWhich of the following statements correctly describes the relationship between the sequences $g[n]$ and $h[n]$ as a result of the zero-padding?\n\nA. $h[n] = g[n]$ for all $n \\in \\{0, 1, 2, 3\\}$\n\nB. $h[n] = g[n]W_8^n$ for all $n \\in \\{0, 1, 2, 3\\}$\n\nC. $h[n] = -g[n]$ for all $n \\in \\{0, 1, 2, 3\\}$\n\nD. $g[0] = h[1]$ and $g[1] = h[0]$\n\nE. $h[n] = 0$ for all $n \\in \\{0, 1, 2, 3\\}$", "solution": "By construction, the zero-padded sequence satisfies $y[n]=x[n]$ for $n\\in\\{0,1,2,3\\}$ and $y[n]=0$ for $n\\in\\{4,5,6,7\\}$. In the first stage of the radix-2 DIF FFT, for $n\\in\\{0,1,2,3\\}$ we have\n$$\ng[n]=y[n]+y[n+4],\\qquad h[n]=(y[n]-y[n+4])\\,W_{8}^{n}.\n$$\nSince $n\\in\\{0,1,2,3\\}$ implies $n+4\\in\\{4,5,6,7\\}$, the zero-padding gives $y[n+4]=0$. Therefore,\n$$\ng[n]=y[n]+0=y[n]=x[n],\n$$\nand\n$$\nh[n]=(y[n]-0)\\,W_{8}^{n}=y[n]\\,W_{8}^{n}=x[n]\\,W_{8}^{n}.\n$$\nIt follows directly that\n$$\nh[n]=g[n]\\,W_{8}^{n}\\quad\\text{for all }n\\in\\{0,1,2,3\\}.\n$$\nThus, the correct choice is B, and the other options do not hold in general (A would require $W_{8}^{n}=1$ for all $n$, C would require $W_{8}^{n}=-1$ for all $n$, D is unrelated to these definitions, and E would require $x[n]=0$ for all $n$, which is excluded by assumption).", "answer": "$$\\boxed{B}$$", "id": "1711040"}, {"introduction": "A deep understanding of an algorithm comes not just from knowing how it works, but also from being able to predict what happens when it goes wrong. This practice presents a thought experiment in debugging: a single error is introduced into a twiddle factor in the first stage of the DIF-FFT. By tracing the propagation of this error, you will gain crucial insight into the algorithm's signal flow graph and the distinct paths that process the even- and odd-indexed frequency components, reinforcing the core principle of the decimation-in-frequency approach. [@problem_id:1711088]", "problem": "An engineer is debugging an 8-point Decimation-In-Frequency (DIF) Fast Fourier Transform (FFT) algorithm designed to compute the Discrete Fourier Transform (DFT) of an input sequence $x[n]$ for $n = 0, 1, \\dots, 7$. The DFT output is denoted by $X[k]$ for $k = 0, 1, \\dots, 7$. The algorithm is based on the standard DIF-FFT decomposition, where the input sequence is split into its first and second halves at each stage. The twiddle factor is defined as $W_N^k = \\exp(-j\\frac{2\\pi k}{N})$.\n\nUpon inspection, it is discovered that a single calculation error exists in the first stage of the algorithm. Specifically, the twiddle factor $W_8^2$ has been incorrectly programmed as $1$ instead of its true value. This error occurs at only one location in the computation. Assume the input sequence $x[n]$ is a general complex-valued sequence for which $x[2] \\neq x[6]$. Which of the following sets of output samples $X[k]$ will be rendered incorrect due to this single programming error?\n\nA. $X[2], X[6]$\n\nB. $X[0], X[2], X[4], X[6]$\n\nC. $X[2], X[3], X[6], X[7]$\n\nD. $X[1], X[3], X[5], X[7]$\n\nE. All output samples $X[k]$ for $k=0, 1, \\dots, 7$", "solution": "Let $N=8$ and define the DFT by\n$$\nX[k]=\\sum_{n=0}^{7}x[n]W_{8}^{nk},\\quad W_{8}^{k}=\\exp\\!\\left(-j\\frac{2\\pi k}{8}\\right).\n$$\nFor the DIF decomposition, split $n=m$ and $n=m+4$ with $m=0,1,2,3$:\n$$\nX[k]=\\sum_{m=0}^{3}\\left(x[m]+W_{8}^{4k}x[m+4]\\right)W_{8}^{mk}.\n$$\nSince $W_{8}^{4k}=(-1)^{k}$, we get\n$$\nX[k]=\\sum_{m=0}^{3}\\left(x[m]+(-1)^{k}x[m+4]\\right)W_{8}^{mk}.\n$$\nFor even $k=2r$,\n$$\nX[2r]=\\sum_{m=0}^{3}\\left(x[m]+x[m+4]\\right)W_{8}^{m\\cdot 2r}\n=\\sum_{m=0}^{3}a[m]\\,W_{4}^{mr},\n$$\nwith $a[m]=x[m]+x[m+4]$. For odd $k=2r+1$,\n$$\nX[2r+1]=\\sum_{m=0}^{3}\\left(x[m]-x[m+4]\\right)W_{8}^{m(2r+1)}\n=\\sum_{m=0}^{3}\\underbrace{\\left(x[m]-x[m+4]\\right)W_{8}^{m}}_{c[m]}W_{4}^{mr}.\n$$\nThus the first DIF stage computes $a[m]=x[m]+x[m+4]$ (no twiddle) and $c[m]=(x[m]-x[m+4])W_{8}^{m}$ (twiddle applied), and the final outputs satisfy\n$$\nX[2r]=\\text{DFT}_{4}\\{a[m]\\}[r],\\quad X[2r+1]=\\text{DFT}_{4}\\{c[m]\\}[r],\\quad r=0,1,2,3.\n$$\nThe stated error is that at the first stage the twiddle $W_{8}^{2}$ is incorrectly set to $1$ at one location. This affects only the computation of $c[2]$, replacing the correct\n$$\nc[2]=(x[2]-x[6])W_{8}^{2}\n$$\nby the incorrect\n$$\nc'[2]=(x[2]-x[6]).\n$$\nAll other $a[m]$ and $c[m]$ remain correct. Therefore, only the odd-index outputs, which depend on $c[m]$, can be affected. The erroneous odd outputs are, for $r=0,1,2,3$,\n$$\nX'[2r+1]=\\sum_{m=0}^{3}c'[m]W_{4}^{mr}\n= \\sum_{m=0}^{3}c[m]W_{4}^{mr}+\\bigl(c'[2]-c[2]\\bigr)W_{4}^{2r}\n= X[2r+1]+\\bigl(1-W_{8}^{2}\\bigr)(x[2]-x[6])W_{4}^{2r}.\n$$\nFor a $4$-point DFT, $W_{4}^{2r}=(-1)^{r}$, which is never zero. Since $W_{8}^{2}\\neq 1$ and $x[2]\\neq x[6]$ by assumption, the correction term is nonzero for each $r$, so all odd-index outputs $X[1],X[3],X[5],X[7]$ are corrupted. The even-index outputs come solely from $a[m]$ and are unaffected.\n\nTherefore, the incorrect outputs are $X[1],X[3],X[5],X[7]$, corresponding to option D.", "answer": "$$\\boxed{D}$$", "id": "1711088"}]}