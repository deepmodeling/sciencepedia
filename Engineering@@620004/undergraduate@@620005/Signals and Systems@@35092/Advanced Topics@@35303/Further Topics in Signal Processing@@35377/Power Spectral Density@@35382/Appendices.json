{"hands_on_practices": [{"introduction": "This first exercise reinforces the fundamental meaning of the Power Spectral Density (PSD). By integrating a given PSD that includes both a continuous noise component and discrete sinusoidal tones, you will calculate the signal's total average power. This practice is foundational for understanding the physical link between the spectral representation and a signal's energy content [@problem_id:1742996].", "problem": "A real-valued wide-sense stationary random process $X(t)$ is used to model a communication signal. Its Power Spectral Density (PSD), denoted by $S_{XX}(\\omega)$, is composed of a continuous part and a discrete part. The total PSD is given by the sum $S_{XX}(\\omega) = S_c(\\omega) + S_d(\\omega)$.\n\nThe continuous part, $S_c(\\omega)$, which represents a band-limited noise or data component, is described by a rectangular function:\n$$\nS_c(\\omega) = \\begin{cases} A & \\text{if } |\\omega| \\leq \\omega_1 \\\\ 0 & \\text{if } |\\omega| > \\omega_1 \\end{cases}\n$$\n\nThe discrete part, $S_d(\\omega)$, which represents a pair of sinusoidal pilot tones, is described by two Dirac delta functions:\n$$\nS_d(\\omega) = B \\left( \\delta(\\omega - \\omega_2) + \\delta(\\omega + \\omega_2) \\right)\n$$\n\nHere, $A$, $B$, $\\omega_1$, and $\\omega_2$ are all positive real constants, with the condition that $\\omega_2 > \\omega_1$ ensuring the tones are outside the continuous band. The function $\\delta(\\cdot)$ is the Dirac delta function.\n\nDetermine the total average power of the random process $X(t)$. Express your answer as an analytic expression in terms of the constants $A$, $B$, and $\\omega_1$.", "solution": "For a real wide-sense stationary process with two-sided power spectral density $S_{XX}(\\omega)$ defined over angular frequency $\\omega$, the Wiener–Khinchin theorem gives the autocorrelation function as\n$$\nR_{X}(\\tau) = \\frac{1}{2\\pi} \\int_{-\\infty}^{\\infty} S_{XX}(\\omega)\\,\\exp(j\\omega \\tau)\\,d\\omega.\n$$\nThe total average power is the mean-square value $P = R_{X}(0)$, hence\n$$\nP = R_{X}(0) = \\frac{1}{2\\pi} \\int_{-\\infty}^{\\infty} S_{XX}(\\omega)\\,d\\omega.\n$$\nWith $S_{XX}(\\omega) = S_{c}(\\omega) + S_{d}(\\omega)$, the integral separates:\n$$\nP = \\frac{1}{2\\pi}\\left(\\int_{-\\infty}^{\\infty} S_{c}(\\omega)\\,d\\omega + \\int_{-\\infty}^{\\infty} S_{d}(\\omega)\\,d\\omega\\right).\n$$\nFor the continuous rectangular part,\n$$\n\\int_{-\\infty}^{\\infty} S_{c}(\\omega)\\,d\\omega = \\int_{-\\omega_{1}}^{\\omega_{1}} A\\,d\\omega = 2A\\omega_{1}.\n$$\nFor the discrete part using $\\int_{-\\infty}^{\\infty} \\delta(\\omega-\\omega_{0})\\,d\\omega = 1$,\n$$\n\\int_{-\\infty}^{\\infty} S_{d}(\\omega)\\,d\\omega = B\\left(\\int_{-\\infty}^{\\infty} \\delta(\\omega-\\omega_{2})\\,d\\omega + \\int_{-\\infty}^{\\infty} \\delta(\\omega+\\omega_{2})\\,d\\omega\\right) = 2B.\n$$\nTherefore,\n$$\nP = \\frac{1}{2\\pi}\\left(2A\\omega_{1} + 2B\\right) = \\frac{A\\omega_{1} + B}{\\pi}.\n$$\nThe location $\\omega_{2}$ does not affect the power because the integral of each Dirac delta over all $\\omega$ is unity; the condition $\\omega_{2} > \\omega_{1}$ only ensures spectral separation.", "answer": "$$\\boxed{\\frac{A\\omega_{1}+B}{\\pi}}$$", "id": "1742996"}, {"introduction": "Many physical processes exhibit \"memory,\" where the current state depends on the past. This exercise demonstrates how to derive the PSD for a signal generated by a first-order autoregressive (AR) model, a cornerstone of modern signal processing used to model such phenomena [@problem_id:1742994]. You will apply the principles of linear systems to see how passing simple white noise through a system with feedback creates a uniquely shaped, or \"colored,\" power spectrum.", "problem": "A simplified model for the temperature fluctuations inside a digitally-controlled cryogenic chamber is being analyzed. The measured temperature deviation from a stable setpoint at discrete time index $n$ is denoted by the signal $x[n]$. The system's behavior is governed by thermal inertia, where the current deviation is partially dependent on the previous measurement, and by random electronic noise from the sensor hardware.\n\nThis relationship is described by the following first-order autoregressive (AR) model:\n$$x[n] = \\alpha x[n-1] + w[n]$$\nHere, $\\alpha$ is a real constant representing the thermal memory of the system, with a given value of $\\alpha = 0.5$. The term $w[n]$ represents a stationary, zero-mean, discrete-time white noise process. This noise has a constant variance $\\sigma_w^2$ and its value at any time $n$ is uncorrelated with all past system states $x[k]$ for $k<n$.\n\nYour task is to calculate the Power Spectral Density (PSD) of the temperature deviation process, $S_x(\\omega)$. The PSD describes the distribution of the signal's power as a function of frequency.\n\nProvide a closed-form analytic expression for $S_x(\\omega)$ in terms of the noise variance $\\sigma_w^2$ and the normalized angular frequency $\\omega$ (in radians per sample).", "solution": "The problem asks for the Power Spectral Density (PSD) of the output signal $x[n]$ of a system described by the difference equation $x[n] = \\alpha x[n-1] + w[n]$, where the input $w[n]$ is white noise with variance $\\sigma_w^2$ and $\\alpha=0.5$.\n\nThis system can be viewed as a Linear Time-Invariant (LTI) filter where the input is $w[n]$ and the output is $x[n]$. The relationship between the PSD of the input, $S_w(\\omega)$, and the PSD of the output, $S_x(\\omega)$, is given by:\n$$S_x(\\omega) = |H(e^{j\\omega})|^2 S_w(\\omega)$$\nwhere $H(e^{j\\omega})$ is the frequency response of the LTI system.\n\nFirst, we find the system's transfer function, $H(z)$, by taking the Z-transform of the difference equation:\n$$x[n] - \\alpha x[n-1] = w[n]$$\nApplying the Z-transform to both sides yields:\n$$X(z) - \\alpha z^{-1}X(z) = W(z)$$\nFactoring out $X(z)$:\n$$X(z)(1 - \\alpha z^{-1}) = W(z)$$\nThe transfer function $H(z)$ is the ratio of the output transform $X(z)$ to the input transform $W(z)$:\n$$H(z) = \\frac{X(z)}{W(z)} = \\frac{1}{1 - \\alpha z^{-1}}$$\n\nNext, we find the frequency response $H(e^{j\\omega})$ by evaluating the transfer function $H(z)$ on the unit circle, i.e., by substituting $z = e^{j\\omega}$:\n$$H(e^{j\\omega}) = \\frac{1}{1 - \\alpha e^{-j\\omega}}$$\n\nNow, we need to calculate the squared magnitude of the frequency response, $|H(e^{j\\omega})|^2$. This is found by multiplying the frequency response by its complex conjugate:\n$$|H(e^{j\\omega})|^2 = H(e^{j\\omega}) H^*(e^{j\\omega}) = \\left(\\frac{1}{1 - \\alpha e^{-j\\omega}}\\right) \\left(\\frac{1}{1 - \\alpha e^{j\\omega}}\\right)$$\n$$|H(e^{j\\omega})|^2 = \\frac{1}{(1 - \\alpha e^{-j\\omega})(1 - \\alpha e^{j\\omega})}$$\nExpanding the denominator:\n$$(1 - \\alpha e^{-j\\omega})(1 - \\alpha e^{j\\omega}) = 1 - \\alpha e^{j\\omega} - \\alpha e^{-j\\omega} + \\alpha^2 e^{-j\\omega}e^{j\\omega}$$\n$$= 1 - \\alpha(e^{j\\omega} + e^{-j\\omega}) + \\alpha^2(1)$$\nUsing Euler's identity, $\\cos(\\omega) = \\frac{e^{j\\omega} + e^{-j\\omega}}{2}$, we have $e^{j\\omega} + e^{-j\\omega} = 2\\cos(\\omega)$. Substituting this into the expression gives:\n$$= 1 - 2\\alpha\\cos(\\omega) + \\alpha^2$$\nSo, the squared magnitude of the frequency response is:\n$$|H(e^{j\\omega})|^2 = \\frac{1}{1 - 2\\alpha\\cos(\\omega) + \\alpha^2}$$\n\nThe final piece needed is the PSD of the input white noise, $S_w(\\omega)$. For a discrete-time white noise process $w[n]$ with variance $\\sigma_w^2$, the autocorrelation function is $R_w[k] = \\sigma_w^2 \\delta[k]$, where $\\delta[k]$ is the Kronecker delta function. The PSD is the Discrete-Time Fourier Transform (DTFT) of the autocorrelation function:\n$$S_w(\\omega) = \\sum_{k=-\\infty}^{\\infty} R_w[k] e^{-j\\omega k} = \\sum_{k=-\\infty}^{\\infty} \\sigma_w^2 \\delta[k] e^{-j\\omega k}$$\nDue to the sifting property of the delta function, the sum is non-zero only for $k=0$:\n$$S_w(\\omega) = \\sigma_w^2 e^{-j\\omega \\cdot 0} = \\sigma_w^2$$\nThe PSD of white noise is a constant value equal to its variance for all frequencies.\n\nNow we can combine all the parts to find $S_x(\\omega)$:\n$$S_x(\\omega) = |H(e^{j\\omega})|^2 S_w(\\omega) = \\left(\\frac{1}{1 - 2\\alpha\\cos(\\omega) + \\alpha^2}\\right) \\sigma_w^2$$\n$$S_x(\\omega) = \\frac{\\sigma_w^2}{1 - 2\\alpha\\cos(\\omega) + \\alpha^2}$$\n\nFinally, we substitute the given numerical value for the parameter $\\alpha = 0.5$:\n$$S_x(\\omega) = \\frac{\\sigma_w^2}{1 - 2(0.5)\\cos(\\omega) + (0.5)^2}$$\n$$S_x(\\omega) = \\frac{\\sigma_w^2}{1 - \\cos(\\omega) + 0.25}$$\n$$S_x(\\omega) = \\frac{\\sigma_w^2}{1.25 - \\cos(\\omega)}$$\nThis is the final expression for the Power Spectral Density of the process $x[n]$.", "answer": "$$\\boxed{\\frac{\\sigma_w^{2}}{1.25 - \\cos(\\omega)}}$$", "id": "1742994"}, {"introduction": "Moving from analytical derivation to computational practice, this final exercise confronts a universal challenge in spectral estimation: leakage. Through a hands-on coding task, you will explore why the Discrete Fourier Transform (DFT) of a pure sinusoid can spread its energy across multiple frequency bins and how windowing functions help to concentrate it [@problem_id:2429045]. Mastering this concept is crucial for accurately interpreting the PSD of any finite-length data record.", "problem": "You are given a pure sinusoid sampled uniformly in time, and your task is to demonstrate spectral leakage via power spectral density estimation using the Discrete Fourier Transform (DFT). Begin from fundamental definitions: the Discrete Fourier Transform (DFT) of a discrete-time sequence $x[n]$ of length $N$ is $X[k] = \\sum_{n=0}^{N-1} x[n] e^{-j 2\\pi kn/N}$, where $k \\in \\{0,1,\\dots,N-1\\}$, and $j$ is the imaginary unit. The sampling frequency is $F_s$ so that the sampling interval is $\\Delta t = 1/F_s$, and the DFT frequency resolution is $\\Delta f = F_s/N$. Windowing is defined by a real sequence $w[n]$ applied pointwise to $x[n]$, producing $x_w[n]=w[n]x[n]$. Use the conservation of energy in discrete time (Parseval’s relation) together with these definitions to construct a one-sided periodogram estimator of the power spectral density (PSD) with proper window power normalization. All trigonometric arguments must be in radians.\n\nYour program must:\n- Construct the discrete-time signal $x[n] = \\sin(2\\pi f_0 n / F_s)$ for $n \\in \\{0,1,\\dots,N-1\\}$.\n- Apply a chosen window $w[n]$ (either a rectangular window $w[n]=1$ or a Hann window $w[n] = \\tfrac{1}{2}\\left(1 - \\cos\\left(\\tfrac{2\\pi n}{N-1}\\right)\\right)$) to form $x_w[n]=w[n]x[n]$.\n- Compute an $N$-point DFT (no zero-padding) and form a one-sided periodogram PSD estimate $P[k]$ for frequencies $f_k = k \\Delta f$ with $k \\in \\{0,1,\\dots,\\tfrac{N}{2}\\}$, using window power normalization based on the average squared window. Ensure that the one-sided spectrum correctly accounts for the discarded negative-frequency content by doubling the power for bins strictly between direct current (DC) and the Nyquist frequency when $N$ is even.\n- Define the leakage ratio $\\mathcal{L}$ as the fraction of total one-sided spectral power that lies outside the main lobe around the peak, where the main lobe is operationally defined as the set of frequency bins whose PSD is within $-6$ decibels of the peak value. In symbols: find the peak bin index $k_{\\max}$ such that $P[k_{\\max}]$ is maximal; define the main-lobe index set $\\mathcal{M} = \\{k : 10 \\log_{10}(P[k]/P[k_{\\max}]) \\ge -6\\}$; then compute the leakage ratio as $\\mathcal{L} = 1 - \\dfrac{\\sum_{k \\in \\mathcal{M}} P[k]}{\\sum_{k} P[k]}$. The decibel conversion uses $10 \\log_{10}(\\cdot)$ applied to power ratios.\n- For each test case, output the leakage ratio as a floating-point number. The sinusoid amplitude is $1$.\n\nTest suite:\n- Case $1$ (non-integer-bin, rectangular window): $F_s = 1024 \\,\\mathrm{Hz}$, $N = 1024$, $f_0 = 128.5 \\,\\mathrm{Hz}$, window type “rectangular”.\n- Case $2$ (non-integer-bin, Hann window): $F_s = 1024 \\,\\mathrm{Hz}$, $N = 1024$, $f_0 = 128.5 \\,\\mathrm{Hz}$, window type “Hann”.\n- Case $3$ (exact-bin, rectangular window): $F_s = 1024 \\,\\mathrm{Hz}$, $N = 1024$, $f_0 = 128.0 \\,\\mathrm{Hz}$, window type “rectangular”.\n- Case $4$ (small offset, rectangular window): $F_s = 1024 \\,\\mathrm{Hz}$, $N = 1024$, $f_0 = 128.01 \\,\\mathrm{Hz}$, window type “rectangular”.\n- Case $5$ (short record, non-integer-bin, rectangular window): $F_s = 256 \\,\\mathrm{Hz}$, $N = 256$, $f_0 = 50.3 \\,\\mathrm{Hz}$, window type “rectangular”.\n\nAngle unit requirement: all angles used in trigonometric functions must be in radians.\n\nFinal output format:\n- Your program should produce a single line of output containing the leakage ratios for the five cases in the order listed above, formatted as a comma-separated list enclosed in square brackets, with each leakage ratio rounded to six decimal places, for example, “$[0.123456,0.234567,0.345678,0.456789,0.567890]$”.", "solution": "The problem presented is a valid and well-posed exercise in computational physics, specifically in the domain of digital signal processing. It requires the calculation of spectral leakage from a periodogram estimate of a pure sinusoidal signal under different conditions. The provided definitions are standard and self-consistent, enabling a direct and unambiguous solution.\n\nThe solution proceeds systematically, beginning from first principles.\n\n**1. Signal and Windowing Model**\n\nThe discrete-time signal is a pure sinusoid of amplitude $A=1$, sampled at a frequency $F_s$ over $N$ points. The signal is defined as:\n$$x[n] = \\sin\\left(\\frac{2\\pi f_0 n}{F_s}\\right), \\quad n \\in \\{0, 1, \\dots, N-1\\}$$\nwhere $f_0$ is the frequency of the sinusoid.\n\nThis signal is then multiplied by a window function $w[n]$ to produce the windowed signal $x_w[n]$:\n$$x_w[n] = w[n] x[n]$$\nThe problem specifies two window types:\n- **Rectangular window**: $w[n] = 1$ for all $n$.\n- **Hann window**: $w[n] = \\frac{1}{2}\\left(1 - \\cos\\left(\\frac{2\\pi n}{N-1}\\right)\\right)$.\n\n**2. Power Spectrum Estimation**\n\nThe core of the problem is to construct a properly normalized, one-sided power spectrum. We begin with the Discrete Fourier Transform (DFT) of the windowed signal:\n$$X_w[k] = \\sum_{n=0}^{N-1} x_w[n] e^{-j 2\\pi kn/N}$$\n\nTo ensure the estimated power is independent of the window function's gain, we must normalize the spectrum. Parseval's theorem for discrete signals relates the signal's energy in the time domain to its energy in the frequency domain:\n$$\\sum_{n=0}^{N-1} |x_w[n]|^2 = \\frac{1}{N} \\sum_{k=0}^{N-1} |X_w[k]|^2$$\nThe average power of the windowed signal over the $N$ samples is $P_{\\text{avg},w} = \\frac{1}{N} \\sum_{n=0}^{N-1} |x_w[n]|^2$. Therefore:\n$$P_{\\text{avg},w} = \\frac{1}{N^2} \\sum_{k=0}^{N-1} |X_w[k]|^2$$\nThe average power of the original signal $x[n]$ is related to that of the windowed signal. For a sinusoidal signal, the windowing process scales the power by a factor equal to the mean square of the window function. The estimated average power of the original signal, $P_{\\text{avg},x}$, is thus:\n$$P_{\\text{avg},x} = \\frac{P_{\\text{avg},w}}{\\frac{1}{N}\\sum_{n=0}^{N-1} w[n]^2} = \\frac{N}{\\sum_{n=0}^{N-1} w[n]^2} P_{\\text{avg},w}$$\nLet's denote the sum of squared window weights as $S_2 = \\sum_{n=0}^{N-1} w[n]^2$. The total estimated power of the original signal is:\n$$P_{\\text{total}} = P_{\\text{avg},x} = \\frac{N}{S_2} \\left( \\frac{1}{N^2} \\sum_{k=0}^{N-1} |X_w[k]|^2 \\right) = \\frac{1}{S_2 N} \\sum_{k=0}^{N-1} |X_w[k]|^2$$\nFor a real-valued input signal $x[n]$, the DFT is conjugate symmetric: $X_w[k] = X_w^*[N-k]$. This implies $|X_w[k]|^2 = |X_w[N-k]|^2$. We can construct a one-sided power spectrum $P[k]$ for $k \\in \\{0, 1, \\dots, N/2\\}$ that preserves the total power. The summation over the two-sided spectrum can be re-written (for even $N$):\n$$\\sum_{k=0}^{N-1} |X_w[k]|^2 = |X_w[0]|^2 + |X_w[N/2]|^2 + 2\\sum_{k=1}^{N/2-1} |X_w[k]|^2$$\nWe define the one-sided power spectrum $P[k]$ such that its sum equals the total average power $P_{\\text{total}}$. The components of $P[k]$ are the power contained in each frequency bin $k$:\n$$P[k] = \\begin{cases} \\frac{1}{S_2 N} |X_w[k]|^2 & \\text{for } k=0 \\text{ and } k=N/2 \\\\ \\frac{2}{S_2 N} |X_w[k]|^2 & \\text{for } k=1, 2, \\dots, N/2-1 \\end{cases}$$\nThe sum $\\sum_{k=0}^{N/2} P[k]$ correctly yields the total average power of the original signal. Given $x[n]$ is a sinusoid with amplitude $A=1$, its true average power is $A^2/2 = 1/2$. Our estimator $\\sum P[k]$ will approximate this value.\n\n**3. Leakage Ratio Calculation**\n\nThe spectral leakage ratio $\\mathcal{L}$ is defined as the fraction of total power lying outside the main lobe of the spectral peak.\nFirst, we find the maximum value of the power spectrum, $P_{\\max} = \\max_k P[k]$. The main lobe is operationally defined as the set of frequency bins $\\mathcal{M}$ whose power is within $-6$ decibels of the peak:\n$$\\mathcal{M} = \\left\\{k \\mid 10 \\log_{10}\\left(\\frac{P[k]}{P_{\\max}}\\right) \\ge -6\\right\\}$$\nThis inequality is equivalent to $P[k] \\ge P_{\\max} \\cdot 10^{-0.6}$.\n\nThe total power in the main lobe is $P_{\\text{lobe}} = \\sum_{k \\in \\mathcal{M}} P[k]$. The total power across the entire spectrum is $P_{\\text{total}} = \\sum_{k=0}^{N/2} P[k]$.\nThe leakage ratio is then computed as:\n$$\\mathcal{L} = 1 - \\frac{P_{\\text{lobe}}}{P_{\\text{total}}}$$\n\nThis procedure is implemented for each test case to determine the leakage ratio under the specified conditions.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Calculates the spectral leakage ratio for a sinusoidal signal under various\n    windowing and frequency conditions.\n    \"\"\"\n    # Define the test cases from the problem statement.\n    test_cases = [\n        # (Fs, N, f0, window_type)\n        (1024.0, 1024, 128.5, \"rectangular\"),\n        (1024.0, 1024, 128.5, \"Hann\"),\n        (1024.0, 1024, 128.0, \"rectangular\"),\n        (1024.0, 1024, 128.01, \"rectangular\"),\n        (256.0, 256, 50.3, \"rectangular\"),\n    ]\n\n    results = []\n    for case in test_cases:\n        Fs, N, f0, window_type = case\n        \n        # 1. Signal Generation\n        # Construct the time vector for N samples.\n        n = np.arange(N)\n        # Generate the sinusoidal signal with amplitude 1.\n        x = np.sin(2 * np.pi * f0 * n / Fs)\n\n        # 2. Windowing\n        # Apply the specified window function.\n        if window_type == \"rectangular\":\n            w = np.ones(N)\n        elif window_type == \"Hann\":\n            # Per problem: w[n] = 1/2 * (1 - cos(2*pi*n / (N-1)))\n            w = 0.5 * (1 - np.cos(2 * np.pi * n / (N - 1)))\n        \n        x_w = x * w\n\n        # 3. N-point DFT\n        # Compute the DFT of the windowed signal.\n        X_w = np.fft.fft(x_w, n=N)\n\n        # 4. One-sided Power Spectrum Estimation\n        # All test cases have even N. The one-sided spectrum has N/2 + 1 points.\n        num_freq_bins = N // 2 + 1\n        X_w_mag_sq = np.abs(X_w[0:num_freq_bins])**2\n        \n        # Calculate the sum of squares of the window for normalization.\n        S2 = np.sum(w**2)\n        \n        # Initialize the power spectrum array.\n        P = np.zeros(num_freq_bins)\n        \n        # Normalization ensures the sum of P[k] approximates the true signal power (0.5).\n        # Normalization constant for DC and Nyquist bins.\n        norm_const_dc_nyquist = 1.0 / (S2 * N)\n        # Normalization constant for other bins (doubled for one-sided spectrum).\n        norm_const_other = 2.0 / (S2 * N)\n\n        # Calculate power for bins from k=1 to k=N/2 - 1.\n        P[1:-1] = norm_const_other * X_w_mag_sq[1:-1]\n        \n        # Calculate power for DC (k=0) and Nyquist (k=N/2) bins.\n        P[0] = norm_const_dc_nyquist * X_w_mag_sq[0]\n        P[-1] = norm_const_dc_nyquist * X_w_mag_sq[-1]\n\n        # 5. Leakage Ratio Calculation\n        P_total = np.sum(P)\n        \n        # Handle the ideal case where total power is numerically zero.\n        if P_total < 1e-15:\n            leakage_ratio = 0.0\n        else:\n            P_max = np.max(P)\n            # Main lobe is defined as all bins within -6 dB of the peak value.\n            # This corresponds to a linear magnitude ratio of 10^(-6/10).\n            db_threshold_ratio = 10**(-6.0 / 10.0)\n            main_lobe_mask = P >= P_max * db_threshold_ratio\n            \n            # Sum the power within the main lobe.\n            P_lobe = np.sum(P[main_lobe_mask])\n            \n            # Leakage ratio is the fraction of power outside the main lobe.\n            leakage_ratio = 1.0 - (P_lobe / P_total)\n            \n        results.append(leakage_ratio)\n\n    # Final print statement in the exact required format.\n    # Format each result to six decimal places.\n    print(f\"[{','.join(f'{r:.6f}' for r in results)}]\")\n\nsolve()\n```", "id": "2429045"}]}