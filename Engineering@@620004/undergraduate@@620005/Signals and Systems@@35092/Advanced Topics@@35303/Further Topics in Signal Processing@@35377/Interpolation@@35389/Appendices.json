{"hands_on_practices": [{"introduction": "To truly understand interpolation, we must start with its fundamental mechanics. This practice walks you through the complete two-stage process for increasing a signal's sampling rate: first, the upsampling stage where zeros are inserted, and second, the anti-imaging filtering stage that \"fills in the gaps\" to create a new, denser signal. By working through this concrete example [@problem_id:1728378], you will build a solid foundation for how discrete-time signals are effectively manipulated in the digital domain.", "problem": "In digital signal processing, interpolation is the process of increasing the sampling rate of a signal. For an integer interpolation factor $L$, this is typically achieved in two stages. First, an intermediate signal $w[n]$ is created by inserting $L-1$ zeros between each consecutive sample of the original discrete-time signal $x[n]$. This operation is known as upsampling. The resulting signal is then passed through a low-pass anti-imaging filter with impulse response $h[n]$ to generate the final output signal $y[n]$.\n\nConsider a finite-length input signal defined by $x[0]=2$, $x[1]=4$, $x[2]=0$, $x[3]=-2$, and $x[n]=0$ for all other integer values of $n$. This signal is to be interpolated by a factor of $L=2$.\n\nThe anti-imaging filter is a simple two-point moving average filter, whose impulse response is given by $h[n] = 0.5(\\delta[n] + \\delta[n-1])$, where $\\delta[n]$ is the Kronecker delta function.\n\nCalculate the sum of all sample values in the final output sequence $y[n]$. That is, find the value of $S = \\sum_{n=-\\infty}^{\\infty} y[n]$.", "solution": "The problem asks for the sum of all samples of the output signal $y[n]$ from an interpolation process. The process involves two steps: upsampling the input signal $x[n]$ by a factor of $L=2$ to get an intermediate signal $w[n]$, and then filtering $w[n]$ with an anti-imaging filter $h[n]$ to get the output $y[n]$.\n\n**Step 1: Define the input signal and the interpolation factor.**\nThe input signal is given as a finite sequence:\n$x[n] = \\{..., 0, \\underset{\\uparrow}{2}, 4, 0, -2, 0, ...\\}$\nwhere the arrow indicates the sample at $n=0$. Specifically, $x[0]=2$, $x[1]=4$, $x[2]=0$, $x[3]=-2$, and $x[n]=0$ for $n<0$ and $n>3$.\nThe interpolation factor is $L=2$.\n\n**Step 2: Perform the upsampling operation.**\nThe upsampling operation creates the intermediate signal $w[n]$ by inserting $L-1 = 2-1 = 1$ zero between each sample of $x[n]$. The relationship is $w[nL] = x[n]$ and $w[k]=0$ if $k$ is not a multiple of $L$.\nFor $L=2$, $w[2n] = x[n]$ and $w[2n+1]=0$.\n\nLet's list the non-zero values of $w[n]$:\n$w[0] = x[0] = 2$\n$w[2] = x[1] = 4$\n$w[4] = x[2] = 0$\n$w[6] = x[3] = -2$\n\nThe resulting upsampled sequence $w[n]$ is:\n$w[n] = \\{..., 0, \\underset{\\uparrow}{2}, 0, 4, 0, 0, 0, -2, 0, ...\\}$\nThe explicit sequence is $w[0]=2, w[1]=0, w[2]=4, w[3]=0, w[4]=0, w[5]=0, w[6]=-2, w[7]=0$, and $w[n]=0$ for all other $n$.\n\n**Step 3: Define the filter and perform the convolution.**\nThe output signal $y[n]$ is the convolution of the upsampled signal $w[n]$ and the filter's impulse response $h[n]$.\n$y[n] = w[n] * h[n] = \\sum_{k=-\\infty}^{\\infty} h[k] w[n-k]$\n\nThe impulse response is given by $h[n] = 0.5\\delta[n] + 0.5\\delta[n-1]$. This means $h[0]=0.5$, $h[1]=0.5$, and $h[n]=0$ for all other $n$.\n\nThe convolution sum simplifies to:\n$y[n] = h[0]w[n-0] + h[1]w[n-1]$\n$y[n] = 0.5w[n] + 0.5w[n-1]$\n\n**Step 4: Calculate the samples of the output sequence $y[n]$.**\nWe can now compute the values of $y[n]$ for each $n$ where the output can be non-zero. The explicit sequence $w[n]$ from Step 2 is treated as a sequence of length 8 (from $n=0$ to $n=7$). The impulse response $h[n]$ has a length of 2. The length of the output convolved sequence is $N_w + N_h - 1 = 8 + 2 - 1 = 9$. So we expect values from $n=0$ to $n=8$.\n\n$y[0] = 0.5w[0] + 0.5w[-1] = 0.5(2) + 0.5(0) = 1$\n$y[1] = 0.5w[1] + 0.5w[0] = 0.5(0) + 0.5(2) = 1$\n$y[2] = 0.5w[2] + 0.5w[1] = 0.5(4) + 0.5(0) = 2$\n$y[3] = 0.5w[3] + 0.5w[2] = 0.5(0) + 0.5(4) = 2$\n$y[4] = 0.5w[4] + 0.5w[3] = 0.5(0) + 0.5(0) = 0$\n$y[5] = 0.5w[5] + 0.5w[4] = 0.5(0) + 0.5(0) = 0$\n$y[6] = 0.5w[6] + 0.5w[5] = 0.5(-2) + 0.5(0) = -1$\n$y[7] = 0.5w[7] + 0.5w[6] = 0.5(0) + 0.5(-2) = -1$\n$y[8] = 0.5w[8] + 0.5w[7] = 0.5(0) + 0.5(0) = 0$\n\nFor $n > 8$, $y[n]$ will also be zero.\nThe complete output sequence is $y[n] = \\{..., 0, \\underset{\\uparrow}{1}, 1, 2, 2, 0, 0, -1, -1, 0, ...\\}$.\n\n**Step 5: Calculate the sum of all samples.**\nThe question asks for the sum $S = \\sum_{n=-\\infty}^{\\infty} y[n]$.\n$S = y[0] + y[1] + y[2] + y[3] + y[4] + y[5] + y[6] + y[7]$\n$S = 1 + 1 + 2 + 2 + 0 + 0 + (-1) + (-1) = 4$\n\n**Alternative Method (using properties of the Discrete-Time Fourier Transform):**\nThe sum of samples of a sequence is equal to its Discrete-Time Fourier Transform (DTFT) evaluated at frequency $\\omega=0$.\n$S = \\sum_{n=-\\infty}^{\\infty} y[n] = Y(e^{j0})$, where $Y(e^{j\\omega})$ is the DTFT of $y[n]$.\n\nSince $y[n] = w[n] * h[n]$, their DTFTs are related by $Y(e^{j\\omega}) = W(e^{j\\omega}) H(e^{j\\omega})$.\nTherefore, $S = W(e^{j0}) H(e^{j0})$.\n\nLet's calculate $H(e^{j0})$ and $W(e^{j0})$.\n$H(e^{j\\omega}) = \\sum_n h[n] e^{-j\\omega n} = 0.5 e^{-j\\omega(0)} + 0.5 e^{-j\\omega(1)} = 0.5(1 + e^{-j\\omega})$.\n$H(e^{j0}) = 0.5(1+e^0) = 0.5(1+1) = 1$.\n\nThe DTFT of the upsampled signal $w[n]$ is related to the DTFT of the original signal $x[n]$ by $W(e^{j\\omega}) = X(e^{jL\\omega})$. For $L=2$, $W(e^{j\\omega}) = X(e^{j2\\omega})$.\n$W(e^{j0}) = X(e^{j0})$.\n\nThe value $X(e^{j0})$ is the sum of the samples of the original signal $x[n]$:\n$X(e^{j0}) = \\sum_{n=-\\infty}^{\\infty} x[n] = 2 + 4 + 0 + (-2) = 4$.\n\nSo, $W(e^{j0}) = 4$.\n\nFinally, the sum $S$ is:\n$S = W(e^{j0}) H(e^{j0}) = (4) \\times (1) = 4$.\n\nBoth methods yield the same result.", "answer": "$$\\boxed{4}$$", "id": "1728378"}, {"introduction": "Ideal models in signal processing provide powerful insights, but they also have limitations, especially when applied to real-world signals that are not perfectly well-behaved. The Whittaker-Shannon-Kotelnikov interpolation formula, which relies on the sinc function, is theoretically perfect for band-limited signals. This problem [@problem_id:1728127] explores a classic consequence of applying this ideal reconstruction to a signal with a sharp discontinuity, forcing you to calculate the resulting \"ringing\" artifact, a manifestation of the well-known Gibbs phenomenon.", "problem": "A continuous-time signal $x(t)$ is defined by a step discontinuity occurring between sampling instants. Specifically, the signal is given by $x(t) = 0$ for $t < T_s/2$ and $x(t) = 1$ for $t \\ge T_s/2$, where $T_s$ is a positive constant representing a sampling period.\n\nThis signal is sampled at integer multiples of $T_s$, producing a discrete-time sequence $x[n] = x(nT_s)$ for all integers $n$.\n\nA new continuous-time signal, $x_r(t)$, is then reconstructed from these samples using the ideal Whittaker-Shannon-Kotelnikov interpolation formula:\n$$x_r(t) = \\sum_{n=-\\infty}^{\\infty} x[n] \\operatorname{sinc}\\left(\\frac{t - nT_s}{T_s}\\right)$$\nThe sinc function is defined as $\\operatorname{sinc}(u) = \\frac{\\sin(\\pi u)}{\\pi u}$ for $u \\neq 0$ and $\\operatorname{sinc}(0) = 1$.\n\nThis reconstruction process, which is equivalent to ideal low-pass filtering, introduces ringing artifacts near the discontinuity. Calculate the value of the most significant undershoot of the reconstructed signal, which occurs at time $t = -T_s/2$.\n\nFor your calculation, you may use the known value of the Gregory-Leibniz series:\n$$\\sum_{k=0}^{\\infty} \\frac{(-1)^k}{2k+1} = 1 - \\frac{1}{3} + \\frac{1}{5} - \\frac{1}{7} + \\dots = \\frac{\\pi}{4}$$\n\nExpress your answer as a numerical value, rounded to four significant figures.", "solution": "The problem asks for the value of the reconstructed signal $x_r(t)$ at the specific time $t = -T_s/2$.\n\nFirst, we must determine the values of the discrete samples $x[n]$. The original signal is $x(t)=1$ for $t \\ge T_s/2$ and $x(t)=0$ for $t < T_s/2$. The samples are taken at $t=nT_s$.\nSo, $x[n] = x(nT_s)$. This means $x[n]=1$ if $nT_s \\ge T_s/2$, which simplifies to $n \\ge 1/2$. Since $n$ must be an integer, this condition becomes $n \\ge 1$. For all other integers, i.e., $n \\le 0$, we have $nT_s \\le 0 < T_s/2$, so $x[n]=0$.\nIn summary, the sample sequence is:\n$$x[n] = \\begin{cases} 1 & \\text{if } n \\ge 1 \\\\ 0 & \\text{if } n \\le 0 \\end{cases}$$\n\nNext, we use the given interpolation formula to find $x_r(t)$ at $t = -T_s/2$.\n$$x_r(-T_s/2) = \\sum_{n=-\\infty}^{\\infty} x[n] \\operatorname{sinc}\\left(\\frac{-T_s/2 - nT_s}{T_s}\\right)$$\nSince $x[n]=0$ for $n \\le 0$, the sum only needs to be evaluated for $n \\ge 1$.\n$$x_r(-T_s/2) = \\sum_{n=1}^{\\infty} (1) \\cdot \\operatorname{sinc}\\left(\\frac{-T_s/2 - nT_s}{T_s}\\right) = \\sum_{n=1}^{\\infty} \\operatorname{sinc}\\left(-\\frac{1}{2} - n\\right)$$\n\nNow we expand the sinc function definition, $\\operatorname{sinc}(u) = \\frac{\\sin(\\pi u)}{\\pi u}$:\n$$x_r(-T_s/2) = \\sum_{n=1}^{\\infty} \\frac{\\sin\\left(\\pi\\left(-\\frac{1}{2} - n\\right)\\right)}{\\pi\\left(-\\frac{1}{2} - n\\right)}$$\n\nLet's simplify the sine term in the numerator.\n$\\sin\\left(\\pi\\left(-\\frac{1}{2} - n\\right)\\right) = \\sin\\left(-\\frac{\\pi}{2} - n\\pi\\right)$.\nUsing the property $\\sin(-A) = -\\sin(A)$ and periodicity, $\\sin(A+n\\pi) = (-1)^n \\sin(A)$, we get:\n$\\sin(-\\frac{\\pi}{2} - n\\pi) = -\\sin(\\frac{\\pi}{2} + n\\pi) = -(-1)^n \\cos(n\\pi) \\sin(\\pi/2) = -(-1)^n$.\nAlternatively, using the angle subtraction identity $\\sin(A-B) = \\sin(A)\\cos(B) - \\cos(A)\\sin(B)$ with $A = -n\\pi$ and $B=\\pi/2$, we get:\n$\\sin(-n\\pi)\\cos(\\pi/2) - \\cos(-n\\pi)\\sin(\\pi/2)$.\nSince $\\sin(-n\\pi)=0$ and $\\cos(-n\\pi)=(-1)^n$, the expression simplifies to $0 \\cdot 0 - (-1)^n \\cdot 1 = -(-1)^n$.\n\nSubstituting this back into the sum:\n$$x_r(-T_s/2) = \\sum_{n=1}^{\\infty} \\frac{-(-1)^n}{-\\pi\\left(n + \\frac{1}{2}\\right)} = \\frac{1}{\\pi} \\sum_{n=1}^{\\infty} \\frac{(-1)^n}{n + \\frac{1}{2}}$$\n\nLet's write out the first few terms of the series:\n$$\\sum_{n=1}^{\\infty} \\frac{(-1)^n}{n + \\frac{1}{2}} = \\frac{-1}{1 + \\frac{1}{2}} + \\frac{1}{2 + \\frac{1}{2}} - \\frac{1}{3 + \\frac{1}{2}} + \\dots = \\frac{-1}{3/2} + \\frac{1}{5/2} - \\frac{1}{7/2} + \\dots$$\n$$= -\\frac{2}{3} + \\frac{2}{5} - \\frac{2}{7} + \\dots = -2\\left(\\frac{1}{3} - \\frac{1}{5} + \\frac{1}{7} - \\dots\\right)$$\n\nThe problem provides the Gregory-Leibniz series:\n$$1 - \\frac{1}{3} + \\frac{1}{5} - \\frac{1}{7} + \\dots = \\frac{\\pi}{4}$$\nWe can rearrange this to find the value of the series we need:\n$$\\frac{1}{3} - \\frac{1}{5} + \\frac{1}{7} - \\dots = 1 - \\frac{\\pi}{4}$$\n\nNow, substitute this result back into our expression for the sum:\n$$\\sum_{n=1}^{\\infty} \\frac{(-1)^n}{n + \\frac{1}{2}} = -2\\left(1 - \\frac{\\pi}{4}\\right) = -2 + \\frac{\\pi}{2}$$\n\nFinally, we can calculate the value of $x_r(-T_s/2)$:\n$$x_r(-T_s/2) = \\frac{1}{\\pi} \\left(-2 + \\frac{\\pi}{2}\\right) = -\\frac{2}{\\pi} + \\frac{1}{2}$$\n\nTo get the final numerical answer, we compute the value of this expression:\n$$x_r(-T_s/2) = 0.5 - \\frac{2}{\\pi} \\approx 0.5 - \\frac{2}{3.14159265...} \\approx 0.5 - 0.63661977...$$\n$$x_r(-T_s/2) \\approx -0.13661977...$$\n\nRounding to four significant figures, we get $-0.1366$.", "answer": "$$\\boxed{-0.1366}$$", "id": "1728127"}, {"introduction": "In engineering, it is powerful to recognize when seemingly different operations are fundamentally related. This exercise explores that idea by examining the \"zero-order hold,\" an intuitive process where each sample of a signal is simply repeated to increase its data rate. Your task is to demonstrate that this operation can be perfectly modeled within the standard interpolation framework of upsampling followed by filtering [@problem_id:1728149]. This reveals the unifying structure that underpins many signal processing techniques and deepens your understanding of system equivalences.", "problem": "Consider a discrete-time signal processing system that transforms an input signal $x[n]$ into an output signal $y[n]$. The transformation is defined by the rule $y[n] = x[\\lfloor n/L \\rfloor]$ for all integer values of $n$, where $\\lfloor \\cdot \\rfloor$ denotes the floor function and $L$ is a fixed positive integer greater than 1. This operation effectively holds each sample of $x[n]$ for $L$ consecutive time steps.\n\nThis entire operation can be shown to be equivalent to a two-stage process:\n1.  First, an intermediate signal $v[n]$ is created by inserting $L-1$ zeros between each sample of the original signal $x[n]$. This can be formally written as:\n    $$ v[n] = \\begin{cases} x[n/L] & \\text{if } n \\text{ is a multiple of } L \\\\ 0 & \\text{otherwise} \\end{cases} $$\n2.  Second, the intermediate signal $v[n]$ is passed through a Linear Time-Invariant (LTI) filter with impulse response $h[n]$ to produce the final output, such that $y[n] = (v * h)[n]$.\n\nDetermine the impulse response $h[n]$ of this equivalent LTI filter. Express your answer as a closed-form expression in terms of $n$ and $L$, using the discrete-time unit step function, $u[n]$, which is defined as $u[n]=1$ for $n \\ge 0$ and $u[n]=0$ for $n < 0$.", "solution": "We want an LTI filter with impulse response $h[n]$ such that, for any input $x[n]$, the two-stage operation (zero-insertion by $L$ followed by filtering) reproduces the signal defined by $y[n] = x[\\lfloor n/L \\rfloor]$.\n\nThe impulse response of a system is its output when the input is a unit impulse, $x[n]=\\delta[n]$. Let's apply this input to the zero-order hold system.\nThe output would be $y[n] = \\delta[\\lfloor n/L \\rfloor]$.\nThe floor function $\\lfloor n/L \\rfloor$ is equal to 0 for all $n$ such that $0 \\le n/L < 1$, which is equivalent to $0 \\le n < L$. For all other values of $n$, $\\lfloor n/L \\rfloor$ is a non-zero integer.\nSince $\\delta[k]=1$ only for $k=0$, the output $y[n]$ will be 1 only when $\\lfloor n/L \\rfloor = 0$.\nThus, the impulse response of the overall system is:\n$$ y[n] = \\begin{cases} 1 & \\text{for } 0 \\le n \\le L-1 \\\\ 0 & \\text{otherwise} \\end{cases} $$\nThis is the impulse response we are seeking, so $h_{overall}[n] = y[n]$.\n\nNow let's analyze the two-stage equivalent system. The impulse response of this system is its output when the input is $x[n]=\\delta[n]$.\n1. The upsampling stage produces $v[n]$. When $x[n]=\\delta[n]$, we get $v[n] = \\delta[n]$ because only $x[0]$ is non-zero, and it is placed at $v[0]$. All other values are zero.\n2. The second stage filters $v[n]$ with $h[n]$. The output is $y[n] = (v * h)[n] = (\\delta * h)[n] = h[n]$.\n\nBy equating the impulse responses of the two equivalent systems, we find that the required filter $h[n]$ is exactly the impulse response of the overall zero-order hold operation.\n$$ h[n] = \\begin{cases} 1 & \\text{for } 0 \\le n \\le L-1 \\\\ 0 & \\text{otherwise} \\end{cases} $$\nThis is a rectangular pulse of length $L$ starting at $n=0$. Using the discrete-time unit step function $u[n]$, this impulse response can be expressed as the difference of two step functions:\n$$\nh[n] = u[n] - u[n - L].\n$$", "answer": "$$\\boxed{u[n]-u[n-L]}$$", "id": "1728149"}]}