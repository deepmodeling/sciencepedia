{"hands_on_practices": [{"introduction": "This first exercise takes us back to the foundational principles of reciprocal space. By starting with a simple two-dimensional rectangular lattice, you will derive its Brillouin zone directly from the defining condition of reciprocal lattice vectors and the Wigner–Seitz construction. This practice reinforces the critical inverse relationship between real and reciprocal space dimensions and demonstrates how lattice anisotropy directly shapes the Brillouin zone, a fundamental concept for understanding electronic and vibrational properties in crystals [@problem_id:2804283].", "problem": "A two-dimensional rectangular Bravais lattice in real space has primitive vectors $\\mathbf{a}_{1}=a_{x}\\,\\hat{\\mathbf{x}}$ and $\\mathbf{a}_{2}=a_{y}\\,\\hat{\\mathbf{y}}$ with $a_{x}\\neq a_{y}$. Starting from the fundamental definition that the reciprocal lattice consists of all wave vectors $\\mathbf{k}$ such that $\\exp\\!\\left(\\mathrm{i}\\,\\mathbf{k}\\cdot\\mathbf{R}\\right)=1$ for every real-space lattice vector $\\mathbf{R}=n_{1}\\mathbf{a}_{1}+n_{2}\\mathbf{a}_{2}$ with integers $n_{1},n_{2}$, and that the first Brillouin zone (BZ) is the Wigner–Seitz cell of the reciprocal lattice centered at $\\mathbf{k}=\\mathbf{0}$, derive the first Brillouin zone for this lattice and determine how the anisotropy $a_{x}\\neq a_{y}$ alters its edge lengths.\n\nExpress your final answer as a row matrix containing, in order: the full side length of the first Brillouin zone along the $k_{x}$ axis, the full side length along the $k_{y}$ axis, and the ratio of these two side lengths (the $k_{x}$-side length divided by the $k_{y}$-side length). Provide the expressions symbolically in terms of $a_{x}$ and $a_{y}$ in reciprocal-length units. No numerical evaluation is required.", "solution": "The problem posed is a standard, fundamental exercise in solid-state physics. It is scientifically grounded, well-posed, and contains all necessary information for a unique solution. The validation process confirms the problem's integrity. We proceed with the derivation.\n\nThe problem requires the derivation of the first Brillouin zone (BZ) for a two-dimensional rectangular Bravais lattice, starting from the fundamental definition of the reciprocal lattice. The real-space primitive vectors are given as $\\mathbf{a}_{1}=a_{x}\\,\\hat{\\mathbf{x}}$ and $\\mathbf{a}_{2}=a_{y}\\,\\hat{\\mathbf{y}}$, with an anisotropy $a_{x}\\neq a_{y}$.\n\nFirst, we must construct the reciprocal lattice. The reciprocal lattice is the set of all wave vectors $\\mathbf{k}$ that satisfy the condition $\\exp\\!\\left(\\mathrm{i}\\,\\mathbf{k}\\cdot\\mathbf{R}\\right)=1$ for any real-space lattice vector $\\mathbf{R}$. A general real-space lattice vector is given by $\\mathbf{R}=n_{1}\\mathbf{a}_{1}+n_{2}\\mathbf{a}_{2}$, where $n_{1}$ and $n_{2}$ are integers.\n\nThe condition $\\exp\\!\\left(\\mathrm{i}\\,\\mathbf{k}\\cdot\\mathbf{R}\\right)=1$ is equivalent to the condition that $\\mathbf{k}\\cdot\\mathbf{R}$ must be an integer multiple of $2\\pi$. That is, $\\mathbf{k}\\cdot\\mathbf{R} = 2\\pi m$ for some integer $m$.\n\nThe reciprocal lattice itself is a Bravais lattice, spanned by a set of primitive vectors, which we will denote as $\\mathbf{b}_{1}$ and $\\mathbf{b}_{2}$. Any vector $\\mathbf{G}$ in the reciprocal lattice can be written as $\\mathbf{G} = m_{1}\\mathbf{b}_{1}+m_{2}\\mathbf{b}_{2}$ for integers $m_{1}$ and $m_{2}$. These vectors $\\mathbf{G}$ are the wave vectors $\\mathbf{k}$ that satisfy the defining condition.\n\nThe standard duality relation between the real-space and reciprocal-space primitive vectors is $\\mathbf{a}_{i} \\cdot \\mathbf{b}_{j} = 2\\pi\\delta_{ij}$, where $\\delta_{ij}$ is the Kronecker delta. We will derive this from the fundamental condition.\nLet a reciprocal lattice vector be $\\mathbf{k} = \\mathbf{G}$. For $\\mathbf{R}=\\mathbf{a}_{1}$ ($n_1=1$, $n_2=0$), the condition is $\\mathbf{G}\\cdot\\mathbf{a}_{1} = 2\\pi \\times (\\text{integer})$. For $\\mathbf{R}=\\mathbf{a}_{2}$ ($n_1=0$, $n_2=1$), the condition is $\\mathbf{G}\\cdot\\mathbf{a}_{2} = 2\\pi \\times (\\text{integer})$.\nIf we write $\\mathbf{G} = m_{1}\\mathbf{b}_{1}+m_{2}\\mathbf{b}_{2}$ and require these conditions to hold for arbitrary integers $m_1, m_2$, the simplest choice for the primitive vectors $\\mathbf{b}_1, \\mathbf{b}_2$ that generate the entire reciprocal lattice is the one satisfying the specific conditions:\n$\\mathbf{b}_{1}\\cdot\\mathbf{a}_{1} = 2\\pi$\n$\\mathbf{b}_{1}\\cdot\\mathbf{a}_{2} = 0$\n$\\mathbf{b}_{2}\\cdot\\mathbf{a}_{1} = 0$\n$\\mathbf{b}_{2}\\cdot\\mathbf{a}_{2} = 2\\pi$\nThis is precisely the relation $\\mathbf{a}_{i} \\cdot \\mathbf{b}_{j} = 2\\pi\\delta_{ij}$.\n\nLet the reciprocal lattice vectors be expressed in Cartesian coordinates in k-space:\n$\\mathbf{b}_{1} = b_{1x}\\,\\hat{\\mathbf{k}}_{x} + b_{1y}\\,\\hat{\\mathbf{k}}_{y}$\n$\\mathbf{b}_{2} = b_{2x}\\,\\hat{\\mathbf{k}}_{x} + b_{2y}\\,\\hat{\\mathbf{k}}_{y}$\nwhere $\\hat{\\mathbf{k}}_{x}$ and $\\hat{\\mathbf{k}}_{y}$ are the unit vectors in reciprocal space, equivalent to $\\hat{\\mathbf{x}}$ and $\\hat{\\mathbf{y}}$.\n\nWe apply the duality relations using the given real-space vectors $\\mathbf{a}_{1}=a_{x}\\,\\hat{\\mathbf{x}}$ and $\\mathbf{a}_{2}=a_{y}\\,\\hat{\\mathbf{y}}$:\n$1$. $\\mathbf{a}_{1}\\cdot\\mathbf{b}_{1} = (a_{x}\\,\\hat{\\mathbf{x}}) \\cdot (b_{1x}\\,\\hat{\\mathbf{k}}_{x} + b_{1y}\\,\\hat{\\mathbf{k}}_{y}) = a_{x} b_{1x} = 2\\pi \\implies b_{1x} = \\frac{2\\pi}{a_{x}}$.\n$2$. $\\mathbf{a}_{2}\\cdot\\mathbf{b}_{1} = (a_{y}\\,\\hat{\\mathbf{y}}) \\cdot (b_{1x}\\,\\hat{\\mathbf{k}}_{x} + b_{1y}\\,\\hat{\\mathbf{k}}_{y}) = a_{y} b_{1y} = 0 \\implies b_{1y} = 0$.\n$3$. $\\mathbf{a}_{1}\\cdot\\mathbf{b}_{2} = (a_{x}\\,\\hat{\\mathbf{x}}) \\cdot (b_{2x}\\,\\hat{\\mathbf{k}}_{x} + b_{2y}\\,\\hat{\\mathbf{k}}_{y}) = a_{x} b_{2x} = 0 \\implies b_{2x} = 0$.\n$4$. $\\mathbf{a}_{2}\\cdot\\mathbf{b}_{2} = (a_{y}\\,\\hat{\\mathbf{y}}) \\cdot (b_{2x}\\,\\hat{\\mathbf{k}}_{x} + b_{2y}\\,\\hat{\\mathbf{k}}_{y}) = a_{y} b_{2y} = 2\\pi \\implies b_{2y} = \\frac{2\\pi}{a_{y}}$.\n\nFrom these results, the primitive vectors of the reciprocal lattice are:\n$\\mathbf{b}_{1} = \\frac{2\\pi}{a_{x}}\\,\\hat{\\mathbf{k}}_{x}$\n$\\mathbf{b}_{2} = \\frac{2\\pi}{a_{y}}\\,\\hat{\\mathbf{k}}_{y}$\nThis demonstrates that the reciprocal lattice of a rectangular lattice is also a rectangular lattice, with lattice constants inversely proportional to those of the real-space lattice.\n\nNext, we construct the first Brillouin zone. The first BZ is defined as the Wigner–Seitz cell of the reciprocal lattice, centered at the origin of k-space, $\\mathbf{k}=\\mathbf{0}$. The construction of a Wigner–Seitz cell involves drawing lines from a chosen lattice point (the origin) to its neighboring lattice points, and then constructing the perpendicular bisectors of these lines. The smallest area enclosed by these bisectors is the cell.\n\nThe reciprocal lattice points are given by vectors $\\mathbf{G} = m_{1}\\mathbf{b}_{1} + m_{2}\\mathbf{b}_{2}$ for integer pairs $(m_{1}, m_{2})$. The origin corresponds to $(0,0)$. The nearest neighbors to the origin are the points for which the magnitude $|\\mathbf{G}|$ is minimal (and non-zero). These correspond to:\n- $(m_{1}, m_{2}) = (\\pm 1, 0)$, giving the vectors $\\mathbf{G}_{\\pm 1, 0} = \\pm \\mathbf{b}_{1} = \\pm \\frac{2\\pi}{a_{x}}\\,\\hat{\\mathbf{k}}_{x}$.\n- $(m_{1}, m_{2}) = (0, \\pm 1)$, giving the vectors $\\mathbf{G}_{0, \\pm 1} = \\pm \\mathbf{b}_{2} = \\pm \\frac{2\\pi}{a_{y}}\\,\\hat{\\mathbf{k}}_{y}$.\n\nNow, we construct the perpendicular bisector planes (lines in 2D) for the vectors connecting the origin to these nearest neighbors.\n- For $\\mathbf{G}_{1, 0} = \\frac{2\\pi}{a_{x}}\\,\\hat{\\mathbf{k}}_{x}$, the midpoint is at $\\frac{1}{2}\\mathbf{G}_{1, 0} = \\frac{\\pi}{a_{x}}\\,\\hat{\\mathbf{k}}_{x}$. The perpendicular bisector is a vertical line defined by the equation $k_{x} = \\frac{\\pi}{a_{x}}$.\n- For $\\mathbf{G}_{-1, 0} = -\\frac{2\\pi}{a_{x}}\\,\\hat{\\mathbf{k}}_{x}$, the midpoint is at $-\\frac{\\pi}{a_{x}}\\,\\hat{\\mathbf{k}}_{x}$. The perpendicular bisector is the line $k_{x} = -\\frac{\\pi}{a_{x}}$.\n- For $\\mathbf{G}_{0, 1} = \\frac{2\\pi}{a_{y}}\\,\\hat{\\mathbf{k}}_{y}$, the midpoint is at $\\frac{\\pi}{a_{y}}\\,\\hat{\\mathbf{k}}_{y}$. The perpendicular bisector is a horizontal line defined by the equation $k_{y} = \\frac{\\pi}{a_{y}}$.\n- For $\\mathbf{G}_{0, -1} = -\\frac{2\\pi}{a_{y}}\\,\\hat{\\mathbf{k}}_{y}$, the midpoint is at $-\\frac{\\pi}{a_{y}}\\,\\hat{\\mathbf{k}}_{y}$. The perpendicular bisector is the line $k_{y} = -\\frac{\\pi}{a_{y}}$.\n\nThe region enclosed by these four lines is a rectangle centered at the origin. This rectangle is the first Brillouin zone, defined by the inequalities:\n$-\\frac{\\pi}{a_{x}} \\le k_{x} \\le \\frac{\\pi}{a_{x}}$\n$-\\frac{\\pi}{a_{y}} \\le k_{y} \\le \\frac{\\pi}{a_{y}}$\n\nFinally, we determine the full side lengths of this rectangular BZ and their ratio.\nThe full side length along the $k_{x}$ axis, which we call $L_{k_{x}}$, is the distance from $k_{x}=-\\frac{\\pi}{a_{x}}$ to $k_{x}=+\\frac{\\pi}{a_{x}}$.\n$L_{k_{x}} = \\frac{\\pi}{a_{x}} - \\left(-\\frac{\\pi}{a_{x}}\\right) = \\frac{2\\pi}{a_{x}}$.\n\nThe full side length along the $k_{y}$ axis, $L_{k_{y}}$, is the distance from $k_{y}=-\\frac{\\pi}{a_{y}}$ to $k_{y}=+\\frac{\\pi}{a_{y}}$.\n$L_{k_{y}} = \\frac{\\pi}{a_{y}} - \\left(-\\frac{\\pi}{a_{y}}\\right) = \\frac{2\\pi}{a_{y}}$.\n\nThe anisotropy $a_{x} \\neq a_{y}$ directly affects the shape of the BZ. If $a_{x} > a_{y}$, meaning the real-space lattice is elongated in the x-direction, then $\\frac{2\\pi}{a_{x}} < \\frac{2\\pi}{a_{y}}$, meaning the BZ is compressed in the $k_{x}$-direction. This inverse relationship is a fundamental property of Fourier transforms and reciprocal spaces.\n\nThe ratio of the $k_{x}$-side length to the $k_{y}$-side length is:\n$\\frac{L_{k_{x}}}{L_{k_{y}}} = \\frac{2\\pi/a_{x}}{2\\pi/a_{y}} = \\frac{a_{y}}{a_{x}}$.\n\nThis completes the derivation. The required quantities are the side lengths $L_{k_{x}} = \\frac{2\\pi}{a_{x}}$, $L_{k_{y}} = \\frac{2\\pi}{a_{y}}$, and their ratio $\\frac{a_{y}}{a_{x}}$.", "answer": "$$\n\\boxed{\\begin{pmatrix} \\frac{2\\pi}{a_x} & \\frac{2\\pi}{a_y} & \\frac{a_y}{a_x} \\end{pmatrix}}\n$$", "id": "2804283"}, {"introduction": "Moving from two dimensions to a vital three-dimensional case, this problem explores the face-centered cubic (fcc) lattice, a structure common to many important metals. You will demonstrate the elegant duality that the reciprocal lattice of an fcc crystal is a body-centered cubic (bcc) lattice, leading to a Brillouin zone with the geometry of a truncated octahedron. A key part of this exercise is identifying the coordinates of high-symmetry points like $\\Gamma$, $X$, and $L$, which are indispensable for interpreting the electronic band structures ubiquitous in materials science literature [@problem_id:3013704].", "problem": "Consider a three-dimensional crystal with a face-centered cubic (fcc) Bravais lattice of conventional cubic lattice constant $a$ and conventional Cartesian axes aligned with the cube edges. Starting from first principles, use core definitions to derive the reciprocal lattice of this fcc crystal and show that it is a body-centered cubic (bcc) lattice. Then, construct the first Brillouin zone of this reciprocal lattice as the Wigner–Seitz cell in reciprocal space and identify its geometry. Using this geometric construction, determine the coordinates of the standard high-symmetry points in this zone, specifically the zone center $\\Gamma$, the center of a square face $X$, the center of a hexagonal face $L$, and the edge point $K$, all expressed in the same Cartesian coordinate system tied to the conventional cubic basis of the reciprocal lattice. Finally, compute the exact dimensionless ratio of distances $\\lvert \\Gamma K \\rvert / \\lvert \\Gamma X \\rvert$. Express your final answer as a single closed-form analytic expression. Do not round.", "solution": "The problem requires the derivation of the reciprocal lattice of a face-centered cubic (fcc) lattice, the construction of its first Brillouin zone, the identification of high-symmetry points, and the calculation of a specific distance ratio. We will proceed step-by-step, starting from first principles.\n\n**1. Derivation of the Reciprocal Lattice**\n\nA face-centered cubic (fcc) lattice with a conventional cubic cell of side length $a$ can be described by a set of primitive lattice vectors. We align the Cartesian axes with the cube edges. One possible choice for the primitive lattice vectors, connecting the origin to three adjacent face centers, is:\n$$\n\\vec{a}_1 = \\frac{a}{2}(\\hat{y} + \\hat{z}) \\\\\n\\vec{a}_2 = \\frac{a}{2}(\\hat{x} + \\hat{z}) \\\\\n\\vec{a}_3 = \\frac{a}{2}(\\hat{x} + \\hat{y})\n$$\n\nThe volume of the primitive cell, $V$, is given by the scalar triple product of these vectors:\n$V = \\vec{a}_1 \\cdot (\\vec{a}_2 \\times \\vec{a}_3)$.\nFirst, we compute the cross product:\n$$\n\\vec{a}_2 \\times \\vec{a}_3 = \\left(\\frac{a}{2}\\right)^2 (\\hat{x} + \\hat{z}) \\times (\\hat{x} + \\hat{y}) = \\frac{a^2}{4} (\\hat{x} \\times \\hat{y} + \\hat{z} \\times \\hat{x} + \\hat{z} \\times \\hat{y}) = \\frac{a^2}{4} (\\hat{z} + \\hat{y} - \\hat{x})\n$$\nThen, the volume is:\n$$\nV = \\frac{a}{2}(\\hat{y} + \\hat{z}) \\cdot \\frac{a^2}{4} (-\\hat{x} + \\hat{y} + \\hat{z}) = \\frac{a^3}{8} (1 + 1) = \\frac{a^3}{4}\n$$\nThe primitive reciprocal lattice vectors $\\vec{b}_1, \\vec{b}_2, \\vec{b}_3$ are defined by the relation $\\vec{a}_i \\cdot \\vec{b}_j = 2\\pi \\delta_{ij}$. The general formulas are:\n$$\n\\vec{b}_1 = 2\\pi \\frac{\\vec{a}_2 \\times \\vec{a}_3}{V}, \\quad \\vec{b}_2 = 2\\pi \\frac{\\vec{a}_3 \\times \\vec{a}_1}{V}, \\quad \\vec{b}_3 = 2\\pi \\frac{\\vec{a}_1 \\times \\vec{a}_2}{V}\n$$\nUsing the previously calculated cross product for $\\vec{b}_1$:\n$$\n\\vec{b}_1 = 2\\pi \\frac{\\frac{a^2}{4}(-\\hat{x} + \\hat{y} + \\hat{z})}{\\frac{a^3}{4}} = \\frac{2\\pi}{a}(-\\hat{x} + \\hat{y} + \\hat{z})\n$$\nBy cyclic permutation of indices, we find the other two vectors:\n$$\n\\vec{a}_3 \\times \\vec{a}_1 = \\frac{a^2}{4}(\\hat{x} + \\hat{y}) \\times (\\hat{y} + \\hat{z}) = \\frac{a^2}{4}(\\hat{x} - \\hat{y} + \\hat{z}) \\implies \\vec{b}_2 = \\frac{2\\pi}{a}(\\hat{x} - \\hat{y} + \\hat{z})\n$$\n$$\n\\vec{a}_1 \\times \\vec{a}_2 = \\frac{a^2}{4}(\\hat{y} + \\hat{z}) \\times (\\hat{x} + \\hat{z}) = \\frac{a^2}{4}(\\hat{x} + \\hat{y} - \\hat{z}) \\implies \\vec{b}_3 = \\frac{2\\pi}{a}(\\hat{x} + \\hat{y} - \\hat{z})\n$$\nThese vectors $\\{\\vec{b}_1, \\vec{b}_2, \\vec{b}_3\\}$ are the primitive lattice vectors for a body-centered cubic (bcc) lattice. A bcc lattice can be constructed from a conventional cubic cell of side length $a_{\\text{rec}}$ using primitive vectors of the form $\\frac{a_{\\text{rec}}}{2}(-\\hat{x} + \\hat{y} + \\hat{z})$, $\\frac{a_{\\text{rec}}}{2}(\\hat{x} - \\hat{y} + \\hat{z})$, and $\\frac{a_{\\text{rec}}}{2}(\\hat{x} + \\hat{y} - \\hat{z})$. Comparing this form to our derived $\\vec{b}_i$, we identify the conventional lattice constant of the bcc reciprocal lattice as $a_{\\text{rec}} = \\frac{4\\pi}{a}$. Thus, the reciprocal lattice of an fcc direct lattice is a bcc lattice.\n\n**2. First Brillouin Zone Construction**\n\nThe first Brillouin zone (BZ) is the Wigner-Seitz cell of the reciprocal lattice centered at the origin ($\\vec{k}=0$). For the bcc reciprocal lattice, we must identify the shortest reciprocal lattice vectors $\\vec{G}$ to construct the bounding planes. A general vector in this lattice is $\\vec{G} = n_1\\vec{b}_1 + n_2\\vec{b}_2 + n_3\\vec{b}_3$.\n\nThe shortest non-zero reciprocal lattice vectors correspond to the nearest and next-nearest neighbors of the origin in the bcc lattice.\nThe nearest neighbors in a bcc lattice with conventional side $a_{\\text{rec}}$ are at positions $\\frac{a_{\\text{rec}}}{2}(\\pm\\hat{k}_x \\pm\\hat{k}_y \\pm\\hat{k}_z)$. In our case, this gives $8$ vectors:\n$$\n\\vec{G}_{\\text{NN}} = \\frac{a_{\\text{rec}}}{2}(\\pm\\hat{k}_x, \\pm\\hat{k}_y, \\pm\\hat{k}_z) = \\frac{2\\pi}{a}(\\pm\\hat{k}_x, \\pm\\hat{k}_y, \\pm\\hat{k}_z)\n$$\nThe next-nearest neighbors are at positions $\\pm a_{\\text{rec}}\\hat{k}_x$, $\\pm a_{\\text{rec}}\\hat{k}_y$, $\\pm a_{\\text{rec}}\\hat{k}_z$. This gives $6$ vectors:\n$$\n\\vec{G}_{\\text{NNN}} = a_{\\text{rec}}(\\pm\\hat{k}_x, 0, 0) \\text{ and permutations} = \\frac{4\\pi}{a}(\\pm\\hat{k}_x, 0, 0) \\text{ and permutations}\n$$\nThe Wigner-Seitz cell is enclosed by the perpendicular bisector planes of these vectors. The planes bisecting the $\\vec{G}_{\\text{NNN}}$ vectors (e.g., $k_x = \\pm \\frac{2\\pi}{a}$) form a cube. The planes bisecting the $\\vec{G}_{\\text{NN}}$ vectors (e.g., $k_x+k_y+k_z = \\pm \\frac{3\\pi}{a}$) truncate the $8$ corners of this cube. The resulting solid is a **truncated octahedron** with $14$ faces: $6$ square faces and $8$ hexagonal faces. This is the geometry of the first Brillouin zone of an fcc crystal.\n\n**3. High-Symmetry Points**\n\nWe now identify the coordinates of the high-symmetry points in the Cartesian coordinate system of the reciprocal lattice, where the conventional cell is a cube of side $a_{\\text{rec}} = \\frac{4\\pi}{a}$.\n\n-   **$\\Gamma$ point:** The center of the BZ.\n    $$ \\Gamma = (0, 0, 0) $$\n\n-   **$X$ point:** The center of a square face. The square faces are centered on the Cartesian axes at a distance from the origin equal to half the length of a $\\vec{G}_{\\text{NNN}}$ vector. For the face normal to the $k_x$ axis, this point is:\n    $$ X = \\frac{1}{2}\\vec{G}_{\\text{NNN}} = \\frac{1}{2} \\left(\\frac{4\\pi}{a}, 0, 0\\right) = \\left(\\frac{2\\pi}{a}, 0, 0\\right) $$\n\n-   **$L$ point:** The center of a hexagonal face. The hexagonal faces are centered on the body diagonals of the cubic cell. Their centers are at a distance from the origin equal to half the length of a $\\vec{G}_{\\text{NN}}$ vector. For the face normal to $(1,1,1)$, this point is:\n    $$ L = \\frac{1}{2}\\vec{G}_{\\text{NN}} = \\frac{1}{2} \\left(\\frac{2\\pi}{a}, \\frac{2\\pi}{a}, \\frac{2\\pi}{a}\\right) = \\left(\\frac{\\pi}{a}, \\frac{\\pi}{a}, \\frac{\\pi}{a}\\right) $$\n\n-   **$K$ point:** An edge point, standardly defined as a point on the edge shared by two hexagonal faces in a plane like $k_z=0$. Such an edge is the intersection of two bisecting planes, for example, for $\\vec{G} = \\frac{2\\pi}{a}(1,1,1)$ and $\\vec{G}' = \\frac{2\\pi}{a}(1,1,-1)$. The plane equations are $k_x+k_y+k_z = \\frac{3\\pi}{a}$ and $k_x+k_y-k_z = \\frac{3\\pi}{a}$. The standard $K$ point in the $k_z=0$ plane that lies on this edge is:\n    $$ K = \\left(\\frac{3\\pi}{2a}, \\frac{3\\pi}{2a}, 0\\right) $$\n    We can verify this point satisfies both plane equations for $k_z=0$: $\\frac{3\\pi}{2a} + \\frac{3\\pi}{2a} + 0 = \\frac{3\\pi}{a}$.\n\n**4. Calculation of the Distance Ratio**\n\nWe need to compute the dimensionless ratio $|\\Gamma K| / |\\Gamma X|$. The distances are Euclidean distances from the origin $\\Gamma$.\n\nThe distance $|\\Gamma X|$ is simply the magnitude of the vector $X$:\n$$\n|\\Gamma X| = \\left| \\left(\\frac{2\\pi}{a}, 0, 0\\right) \\right| = \\sqrt{\\left(\\frac{2\\pi}{a}\\right)^2 + 0^2 + 0^2} = \\frac{2\\pi}{a}\n$$\nThe distance $|\\Gamma K|$ is the magnitude of the vector $K$:\n$$\n|\\Gamma K| = \\left| \\left(\\frac{3\\pi}{2a}, \\frac{3\\pi}{2a}, 0\\right) \\right| = \\sqrt{\\left(\\frac{3\\pi}{2a}\\right)^2 + \\left(\\frac{3\\pi}{2a}\\right)^2 + 0^2} = \\sqrt{2 \\cdot \\frac{9\\pi^2}{4a^2}} = \\frac{3\\pi\\sqrt{2}}{2a}\n$$\nFinally, we compute the ratio:\n$$\n\\frac{|\\Gamma K|}{|\\Gamma X|} = \\frac{\\frac{3\\pi\\sqrt{2}}{2a}}{\\frac{2\\pi}{a}} = \\frac{3\\sqrt{2}}{2} \\cdot \\frac{1}{2} = \\frac{3\\sqrt{2}}{4}\n$$\nThis is the required exact, dimensionless, closed-form analytic expression.", "answer": "$$\\boxed{\\frac{3\\sqrt{2}}{4}}$$", "id": "3013704"}, {"introduction": "This final practice bridges the gap between analytical theory and modern computational materials science, where efficiency is paramount. You will implement an algorithm to exploit a crystal's point-group symmetry to map any wave vector $\\mathbf{k}$ to its unique representative within the irreducible Brillouin zone (IBZ). Mastering this symmetry reduction is not just a theoretical exercise; it is a core technique used in virtually all first-principles calculation packages to drastically reduce computational cost, making the study of complex materials feasible [@problem_id:2804328].", "problem": "Implement a program that, for a simple cubic Bravais lattice, maps arbitrary crystal wave vectors to a canonical representative in the irreducible Brillouin zone wedge using point-group operations and computes symmetry weights based on the size of the star of each wave vector. The setting and constraints are as follows.\n\n- Use a simple cubic real-space lattice with lattice parameter $a=1$. The primitive reciprocal lattice vectors then have magnitude $2\\pi$ along the Cartesian axes, so all wave vectors are expressed in units of $1/a$.\n- Let the First Brillouin Zone (BZ) be the cubic region defined componentwise by $(-\\pi,\\pi]$. Folding a vector $\\mathbf{k}$ to the BZ means adding a reciprocal lattice vector $2\\pi \\,\\mathbf{n}$, with $\\mathbf{n}\\in\\mathbb{Z}^3$, componentwise, to obtain a unique representative in $(-\\pi,\\pi]$.\n- The point group to be used is the full octahedral symmetry group $O_h$ of the cube, realized as all $3\\times 3$ orthogonal integer matrices with exactly one nonzero entry in each row and column, each nonzero being $\\pm 1$. There are $48$ such signed permutation matrices, each of which acts on $\\mathbf{k}$ by left multiplication. Two wave vectors $\\mathbf{k}$ and $\\mathbf{k}'$ are symmetry-equivalent if there exists a group element $R\\in O_h$ and a reciprocal lattice vector $2\\pi\\,\\mathbf{n}$ such that $\\mathbf{k}'=R\\mathbf{k}+2\\pi\\,\\mathbf{n}$.\n- Define the irreducible wedge $\\mathcal{W}$ as the set of $\\mathbf{k}$ in the BZ that satisfy the inequalities $k_x\\ge k_y\\ge k_z\\ge 0$, including boundaries. A canonical representative of the symmetry orbit (the star) of $\\mathbf{k}$ is the unique element of its star that lies in $\\mathcal{W}$. If multiple images lie on shared boundaries, use lexicographic ordering on the triple $(k_x,k_y,k_z)$ to choose the smallest such triple. Use a numerical tolerance $\\epsilon=10^{-9}$ when testing inequalities and boundary equivalences.\n- For a given $\\mathbf{k}$, define its star $\\mathcal{S}(\\mathbf{k})=\\{\\mathrm{fold}_{\\mathrm{BZ}}(R\\mathbf{k})\\,:\\,R\\in O_h\\}$ where $\\mathrm{fold}_{\\mathrm{BZ}}$ denotes folding into $(-\\pi,\\pi]$ componentwise. Let $m(\\mathbf{k})$ be the cardinality of $\\mathcal{S}(\\mathbf{k})$ after identifying points equal within the tolerance $\\epsilon$. Define the star weight $w_{\\star}(\\mathbf{k})=1/m(\\mathbf{k})$. Also define the group-normalized weight $\\widetilde{w}(\\mathbf{k})=m(\\mathbf{k})/|O_h|$, where $|O_h|=48$.\n- Your program must:\n  - Generate all point-group operations in $O_h$ as signed permutation matrices.\n  - Implement folding into $(-\\pi,\\pi]$ with the convention that any component equal to $-\\pi$ within numerical tolerance is mapped to $+\\pi$.\n  - For each input $\\mathbf{k}$, compute its full star, identify $m(\\mathbf{k})$, choose the canonical representative $\\mathbf{k}_{\\mathrm{rep}}$ in $\\mathcal{W}$ using the rule above, and compute $w_{\\star}(\\mathbf{k})$ and $\\widetilde{w}(\\mathbf{k})$.\n\nFundamental base to rely upon:\n- The definition of the reciprocal lattice, the First Brillouin Zone, and point-group symmetries as orthogonal mappings preserving the lattice.\n- The equivalence relation $\\mathbf{k}\\sim R\\mathbf{k}+2\\pi\\,\\mathbf{n}$ with $R$ in the point group and $\\mathbf{n}$ an integer vector.\n- The orbit-stabilizer relation for a finite group $G$: for the orbit $\\mathcal{O}(\\mathbf{k})$ of a point and its little group $G_{\\mathbf{k}}=\\{R\\in G\\,:\\,\\mathrm{fold}_{\\mathrm{BZ}}(R\\mathbf{k})=\\mathrm{fold}_{\\mathrm{BZ}}(\\mathbf{k})\\}$, one has $|\\mathcal{O}(\\mathbf{k})|=|G|/|G_{\\mathbf{k}}|$.\n\nInput test suite:\n- Use the following five input wave vectors $\\mathbf{k}$, expressed in units of $1/a$:\n  - Case A: $\\mathbf{k}_A=\\big(0.7\\pi,\\,0.2\\pi,\\,-0.4\\pi\\big)$.\n  - Case B: $\\mathbf{k}_B=\\big(\\frac{\\pi}{4},\\,\\frac{\\pi}{4},\\,\\frac{\\pi}{6}\\big)$.\n  - Case C: $\\mathbf{k}_C=\\big(0,\\,0,\\,0\\big)$.\n  - Case D: $\\mathbf{k}_D=\\big(\\pi,\\,0.1\\pi,\\,0\\big)$.\n  - Case E: $\\mathbf{k}_E=\\big(\\pi,\\,\\pi,\\,\\pi\\big)$.\n\nRequired output and units:\n- For each case, output a list $[k_{\\mathrm{rep},x},\\,k_{\\mathrm{rep},y},\\,k_{\\mathrm{rep},z},\\,m,\\,w_{\\star},\\,\\widetilde{w}]$, where $k_{\\mathrm{rep},x}$, $k_{\\mathrm{rep},y}$, and $k_{\\mathrm{rep},z}$ are the Cartesian components of $\\mathbf{k}_{\\mathrm{rep}}$ in units of $1/a$, $m$ is the integer multiplicity, $w_{\\star}$ and $\\widetilde{w}$ are floats as defined above. Round all floating-point outputs to $10$ decimal places.\n- Your program should produce a single line of output containing the results for the five cases in the order A, B, C, D, E as a comma-separated list enclosed in square brackets, where each element is the list described above. For example, an output shape should be of the form $[[\\dots],[\\dots],[\\dots],[\\dots],[\\dots]]$ with no additional text.", "solution": "The construction proceeds from first principles of reciprocal space symmetry and equivalence. For a simple cubic lattice with lattice parameter $a=1$, the primitive reciprocal vectors are $\\mathbf{b}_1=2\\pi\\,\\hat{\\mathbf{x}}$, $\\mathbf{b}_2=2\\pi\\,\\hat{\\mathbf{y}}$, and $\\mathbf{b}_3=2\\pi\\,\\hat{\\mathbf{z}}$. The First Brillouin Zone (BZ) can be represented as the hypercube $(-\\pi,\\pi]$ taken componentwise. Any wave vector $\\mathbf{k}$ is equivalent to $\\mathbf{k}+2\\pi\\,\\mathbf{n}$ with $\\mathbf{n}\\in\\mathbb{Z}^3$, so folding to the BZ is defined by reducing each component modulo $2\\pi$ into $(-\\pi,\\pi]$. To ensure a unique representation, any component equal (within a tolerance) to $-\\pi$ is mapped to $+\\pi$.\n\nThe point group of the cube $O_h$ acts on wave vectors by orthogonal transformations $R$ that permute and sign-flip coordinates while preserving lengths, with entries $R_{ij}\\in\\{0,\\pm 1\\}$ and exactly one nonzero per row and column. There are $48$ such matrices, all of which represent symmetry operations for the cubic lattice in reciprocal space, including proper rotations and operations composed with inversion. Two wave vectors are symmetry equivalent if they are related by such an $R$ up to a reciprocal lattice vector $2\\pi\\,\\mathbf{n}$. This defines the orbit or star,\n$$\n\\mathcal{S}(\\mathbf{k})=\\left\\{\\,\\mathrm{fold}_{\\mathrm{BZ}}(R\\mathbf{k}) \\,:\\, R\\in O_h\\,\\right\\}.\n$$\n\nFrom group theory, for a finite group $G$ acting on a set, the size of the orbit $|\\mathcal{O}(\\mathbf{k})|$ times the size of the stabilizer (little group) $|G_{\\mathbf{k}}|$ equals $|G|$ through the orbit-stabilizer theorem,\n$$\n\\left|\\mathcal{O}(\\mathbf{k})\\right|=\\frac{|G|}{|G_{\\mathbf{k}}|}.\n$$\nIn our setting, $G=O_h$ with $|G|=48$, the orbit is the star $\\mathcal{S}(\\mathbf{k})$, and the little group $G_{\\mathbf{k}}$ comprises all $R\\in O_h$ such that $\\mathrm{fold}_{\\mathrm{BZ}}(R\\mathbf{k})=\\mathrm{fold}_{\\mathrm{BZ}}(\\mathbf{k})$.\n\nThe irreducible wedge $\\mathcal{W}$ is chosen as the set of folded $\\mathbf{k}$ satisfying the inequalities $k_x\\ge k_y\\ge k_z\\ge 0$, including boundaries. Because $O_h$ contains all signed permutations of coordinates, every orbit meets $\\mathcal{W}$. If the orbit intersects $\\mathcal{W}$ at multiple boundary points, a deterministic selection is needed; lexicographic ordering on $(k_x,k_y,k_z)$ provides a canonical choice. With a numerical tolerance $\\epsilon=10^{-9}$, we test inequalities $k_x\\ge k_y-\\epsilon$, $k_y\\ge k_z-\\epsilon$, and $k_z\\ge -\\epsilon$.\n\nAlgorithmic steps grounded in these principles:\n- Generate $O_h$ by enumerating all permutations of axes and all sign combinations. For each permutation $\\pi$ of the coordinate indices and each sign triple $(s_1,s_2,s_3)\\in\\{\\pm 1\\}^3$, form the matrix $R$ with entries $R_{i,\\pi(i)}=s_i$ and zeros elsewhere. This yields $6\\times 8=48$ distinct matrices.\n- Implement folding to $(-\\pi,\\pi]$ componentwise. For each scalar component $x$, compute $y=((x+\\pi) \\bmod 2\\pi)-\\pi$; if $y$ is within a small tolerance of $-\\pi$, replace it with $+\\pi$. This guarantees $y\\in(-\\pi,\\pi]$.\n- For a given $\\mathbf{k}$, compute all images $\\mathrm{fold}_{\\mathrm{BZ}}(R\\mathbf{k})$ over $R\\in O_h$. Identify unique vectors by rounding to a fixed number of decimal places (this realizes the tolerance $\\epsilon$ numerically) and counting distinct rounded triples. This count is $m(\\mathbf{k})$.\n- Among the unique images, select those satisfying the wedge inequalities with tolerance $\\epsilon$. From these, choose the lexicographically smallest rounded triple as $\\mathbf{k}_{\\mathrm{rep}}$. The existence of at least one such triple in the wedge follows from the ability of signed permutations to sort coordinates by magnitude and make them nonnegative after folding. If numerical rounding were to exclude candidates spuriously, a fallback would pick the lexicographically smallest across all images; however, with the adopted tolerance and the signed-permutation group, a wedge representative exists in practice for the stated cases.\n- The star weight is $w_{\\star}(\\mathbf{k})=1/m(\\mathbf{k})$. The group-normalized weight is $\\widetilde{w}(\\mathbf{k})=m(\\mathbf{k})/48$, consistent with $\\widetilde{w}(\\mathbf{k})=1/|G_{\\mathbf{k}}|$ by the orbit-stabilizer theorem.\n\nNumerical considerations:\n- Use $\\epsilon=10^{-9}$ for inequality tests and an internal rounding of $10$ decimal places to identify unique points and to output floats. This is consistent because all input coordinates are rational multiples of $\\pi$ and the group action preserves this structure; small floating-point errors are controlled by the rounding.\n\nThe program implements these steps, constructs the group, folds points, computes stars and weights, chooses the representative in $\\mathcal{W}$, and prints a single-line list of $5$ entries corresponding to the five test $\\mathbf{k}$ vectors, each entry containing $[k_{\\mathrm{rep},x},k_{\\mathrm{rep},y},k_{\\mathrm{rep},z},m,w_{\\star},\\widetilde{w}]$ rounded to $10$ decimals, in units of $1/a$ with $a=1$.", "answer": "```python\nimport numpy as np\nimport itertools\n\n# Execution environment: Python 3.12, numpy 1.23.5, scipy 1.11.4 (not used)\n\ndef generate_oh_group():\n    \"\"\"\n    Generate the full octahedral group Oh as all 3x3 signed permutation matrices.\n    Returns a list of numpy arrays (float type).\n    \"\"\"\n    mats = []\n    for perm in itertools.permutations([0, 1, 2]):\n        for signs in itertools.product([-1, 1], repeat=3):\n            M = np.zeros((3, 3), dtype=int)\n            for i, p in enumerate(perm):\n                M[i, p] = signs[i]\n            mats.append(M.astype(float))\n    # Deduplicate (though construction yields unique already)\n    unique = []\n    seen = set()\n    for M in mats:\n        key = tuple(M.flatten().tolist())\n        if key not in seen:\n            seen.add(key)\n            unique.append(M)\n    return unique  # Expect 48 matrices\n\ndef fold_to_bz(k, tol=1e-12):\n    \"\"\"\n    Fold vector k component-wise into (-pi, pi], mapping any -pi to +pi.\n    \"\"\"\n    L = 2.0 * np.pi\n    y = (k + np.pi) % L - np.pi\n    # Map components equal to -pi (within tol) to +pi to realize (-pi, pi]\n    y = np.where(np.isclose(y, -np.pi, atol=tol), np.pi, y)\n    return y\n\ndef in_wedge(k, eps=1e-9):\n    \"\"\"\n    Test if k lies in the irreducible wedge: kx >= ky >= kz >= 0 with tolerance eps.\n    \"\"\"\n    return (k[0] >= k[1] - eps) and (k[1] >= k[2] - eps) and (k[2] >= -eps)\n\ndef compute_star_and_rep(k, group, round_dec=10, eps=1e-9):\n    \"\"\"\n    For a given k and group (list of 3x3 matrices), compute:\n    - unique folded images (the star) with uniqueness via rounding to round_dec decimals\n    - multiplicity m = size of unique set\n    - representative in the irreducible wedge (lexicographically smallest among candidates)\n    Returns (k_rep, m, w_star, w_group_norm)\n    \"\"\"\n    # Generate all images under group and fold to BZ\n    images = []\n    for R in group:\n        k_img = fold_to_bz(R @ k)\n        images.append(k_img)\n    # Unique images via rounding\n    rounded_to_image = {}\n    for img in images:\n        key = tuple(np.round(img, round_dec))\n        rounded_to_image[key] = img  # last one kept; all approximately same\n    unique_keys = list(rounded_to_image.keys())\n    m = len(unique_keys)\n\n    # Candidates in the wedge\n    wedge_candidates = [key for key in unique_keys if in_wedge(np.array(key), eps=eps)]\n    if not wedge_candidates:\n        # Fallback: should not happen for Oh with defined wedge; pick lexicographically smallest overall\n        chosen_key = min(unique_keys)\n    else:\n        chosen_key = min(wedge_candidates)\n    # Use the rounded key as representative to ensure consistency with rounding\n    k_rep = np.array(chosen_key, dtype=float)\n\n    # Weights\n    w_star = 1.0 / float(m)\n    w_group_norm = float(m) / float(len(group))\n    return k_rep, m, w_star, w_group_norm\n\ndef solve():\n    # Define test cases (in units of 1/a with a=1)\n    test_cases = [\n        np.array([0.7*np.pi, 0.2*np.pi, -0.4*np.pi], dtype=float),              # Case A\n        np.array([0.25*np.pi, 0.25*np.pi, (1.0/6.0)*np.pi], dtype=float),       # Case B\n        np.array([0.0, 0.0, 0.0], dtype=float),                                 # Case C\n        np.array([np.pi, 0.1*np.pi, 0.0], dtype=float),                         # Case D\n        np.array([np.pi, np.pi, np.pi], dtype=float),                           # Case E\n    ]\n\n    # Generate Oh group\n    group = generate_oh_group()\n\n    results = []\n    for k in test_cases:\n        k_rep, m, w_star, w_group_norm = compute_star_and_rep(k, group, round_dec=10, eps=1e-9)\n        # Round outputs to 10 decimals as required\n        k_rep_rounded = np.round(k_rep, 10).tolist()\n        w_star_rounded = round(w_star, 10)\n        w_group_norm_rounded = round(w_group_norm, 10)\n        results.append([k_rep_rounded[0], k_rep_rounded[1], k_rep_rounded[2], int(m), w_star_rounded, w_group_norm_rounded])\n\n    # Print single-line output in the exact required format\n    print(f\"[{','.join(map(str, results))}]\")\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "2804328"}]}