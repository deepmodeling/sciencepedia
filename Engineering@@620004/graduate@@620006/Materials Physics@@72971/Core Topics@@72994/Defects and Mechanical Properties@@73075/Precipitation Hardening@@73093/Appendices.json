{"hands_on_practices": [{"introduction": "The peak strength in a precipitation-hardened alloy is not an arbitrary point; it represents a critical transition in the dominant dislocation-precipitate interaction mechanism. This practice explores this fundamental concept by tasking you with deriving the critical precipitate radius where it becomes energetically more favorable for a dislocation to bow around a precipitate (Orowan looping) rather than to cut through it (shearing) [@problem_id:128390]. Successfully completing this derivation provides a foundational, quantitative understanding of the origin of peak aging by linking material properties, such as misfit strain $\\epsilon$ and interface energy $\\gamma_s$, to microstructural design.", "problem": "In the field of physical metallurgy, precipitation hardening is a critical mechanism for strengthening light alloys. The process involves creating a fine dispersion of secondary-phase precipitates within a primary phase matrix. The strengthening effect depends on the interaction between moving dislocations and these precipitates.\n\nFor small, coherent precipitates, dislocations shear through them. As the precipitates grow during aging, it becomes energetically more favorable for dislocations to bow out and bypass them, a process known as Orowan looping. The maximum strength of the alloy is typically achieved at a critical precipitate radius, $r_c$, which marks the transition between these two mechanisms.\n\nYour task is to derive an expression for this critical precipitate radius, $r_c$. Assume the transition occurs when the critical resolved shear stress required for shearing, $\\tau_{sh}$, equals the stress required for Orowan looping, $\\tau_{Or}$.\n\nUse the following models and definitions:\n\n1.  **Shearing Stress ($\\tau_{sh}$):** The resistance to shearing arises from a combination of coherency strain and the creation of new precipitate-matrix interface. The maximum resisting force, $F_{max}$, exerted by a single spherical precipitate of radius $r$ on a dislocation is given by the linear superposition of these effects:\n    $$ F_{max} = (K_c G \\epsilon + K_s \\gamma_s)r $$\n    where $G$ is the shear modulus of the matrix, $\\epsilon$ is the constrained lattice misfit parameter of the precipitate, $\\gamma_s$ is the specific energy of the new interface created, and $K_c$ and $K_s$ are dimensionless constants of order unity.\n\n    The critical resolved shear stress for shearing a random distribution of these precipitates is described by Friedel statistics:\n    $$ \\tau_{sh} = \\frac{F_{max}^{3/2}}{\\sqrt{2\\Gamma} b L_s} $$\n    where $b$ is the magnitude of the Burgers vector, $\\Gamma = \\frac{Gb^2}{2}$ is the dislocation line tension, and $L_s$ is the mean square spacing of precipitates on the slip plane, given by $L_s = r \\sqrt{\\frac{\\pi}{f}}$, where $f$ is the volume fraction of precipitates.\n\n2.  **Orowan Looping Stress ($\\tau_{Or}$):** The stress required for a dislocation to bypass impenetrable precipitates is given by:\n    $$ \\tau_{Or} = \\frac{2\\Gamma}{b \\lambda} $$\n    where $\\lambda$ is the effective edge-to-edge inter-precipitate spacing. For this problem, you should use the relation $\\lambda = L_s - 2r$.\n\nDerive the expression for the critical precipitate radius, $r_c$, at the transition point.", "solution": "1. Relevant definitions and equations:\n   $F_{max} = (K_c G \\epsilon + K_s \\gamma_s)r$\n   $\\Gamma = \\frac{Gb^2}{2}$\n   $L_s = r \\sqrt{\\frac{\\pi}{f}}$\n   $\\lambda = L_s - 2r = r(\\sqrt{\\frac{\\pi}{f}} - 2)$\n   $\\tau_{sh} = \\frac{F_{max}^{3/2}}{\\sqrt{2\\Gamma} b L_s}$\n   $\\tau_{Or} = \\frac{2\\Gamma}{b \\lambda}$\n\n2. Express $\\tau_{sh}$ in terms of $r$:\n   Let $A = K_c G \\epsilon + K_s \\gamma_s$. Then $F_{max} = Ar$, so\n   $$\\tau_{sh}=\\frac{(A\\,r)^{3/2}}{\\sqrt{2\\Gamma}\\,b\\,(r\\sqrt{\\pi/f})}\n     =\\frac{A^{3/2}\\,r^{3/2}}{b\\sqrt{2\\Gamma}\\,r\\sqrt{\\pi/f}}\n     =\\frac{A^{3/2}\\,r^{1/2}}{b\\sqrt{2\\Gamma\\,\\pi/f}}\\,. $$\n\n3. Express $\\tau_{Or}$ in terms of $r$:\n   $$\\tau_{Or}=\\frac{2\\Gamma}{b\\,\\lambda}\n     =\\frac{2\\Gamma}{b\\,r(\\sqrt{\\pi/f}-2)}\\,. $$\n\n4. Set $\\tau_{sh} = \\tau_{Or}$ and solve for $r$:\n   $$\\frac{A^{3/2}r^{1/2}}{b\\sqrt{2\\Gamma\\,\\pi/f}}\n     =\\frac{2\\Gamma}{b\\,r(\\sqrt{\\pi/f}-2)}\\,.$$\n   Cancel $b$ and multiply both sides by denominators:\n   $$A^{3/2}r^{3/2}(\\sqrt{\\pi/f}-2)=2\\Gamma\\sqrt{2\\Gamma\\,\\pi/f}\\,.$$\n   Hence\n   $$r^{3/2}\n     =\\frac{2\\Gamma\\sqrt{2\\Gamma\\,\\pi/f}}{A^{3/2}(\\sqrt{\\pi/f}-2)}$$\n   and\n   $$r_c\n     =\\left[\\frac{2\\Gamma\\sqrt{2\\Gamma\\,\\pi/f}}{A^{3/2}(\\sqrt{\\pi/f}-2)}\\right]^{2/3}.$$\n\n5. Simplify using $2\\Gamma=Gb^2$:\n   Numerator: $(2\\Gamma)^{1+1/2}=(2\\Gamma)^{3/2}$ which to the $2/3$ power gives $2\\Gamma$; and $(\\pi/f)^{1/2 \\cdot 2/3}=(\\pi/f)^{1/3}$. Denominator: $A^{3/2 \\cdot 2/3}=A$, $(\\sqrt{\\pi/f}-2)^{2/3}$. Thus\n   $$r_c\n     =\\frac{2\\Gamma\\,(\\pi/f)^{1/3}}{A(\\sqrt{\\pi/f}-2)^{2/3}}\n     =\\frac{G\\,b^2\\,(\\pi/f)^{1/3}}{(K_c\\,G\\,\\epsilon+K_s\\,\\gamma_s)\\,(\\sqrt{\\pi/f}-2)^{2/3}}\\,. $$", "answer": "$$\\boxed{\\frac{G\\,b^2\\left(\\frac{\\pi}{f}\\right)^{1/3}}{\\bigl(K_c\\,G\\,\\epsilon+K_s\\,\\gamma_s\\bigr)\\,\\bigl(\\sqrt{\\tfrac{\\pi}{f}}-2\\bigr)^{2/3}}}$$", "id": "128390"}, {"introduction": "Building on the concept of an optimal precipitate size, this exercise investigates the consequences of aging an alloy beyond its peak strength—a phenomenon known as over-aging. You will apply the Orowan strengthening model to quantify the reduction in strength as precipitates coarsen while the total volume fraction remains constant [@problem_id:1327444]. This practice demonstrates that for dislocation bypass mechanisms, it is the clear spacing $\\lambda$ between obstacles, not their absolute size, that is the most critical parameter governing strength.", "problem": "A novel nickel-based superalloy, designated \"Ni-Cr-W-Alloy 719,\" is being developed for high-temperature structural components in a next-generation fusion reactor. Its strength at elevated temperatures is derived from a fine dispersion of coherent, spherical $\\gamma'$ (gamma-prime) precipitates of composition Ni$_3$Al within the nickel-rich matrix. The primary strengthening mechanism active at the service temperature is Orowan bowing, where dislocations are forced to bow between these non-shearable precipitates.\n\nThe increase in yield strength, $\\Delta\\sigma_y$, due to this mechanism is given by the Orowan relation:\n$$ \\Delta\\sigma_y = M \\frac{G b}{\\lambda} $$\nwhere $M$ is the Taylor factor for the polycrystalline matrix, $G$ is the shear modulus of the matrix, $b$ is the magnitude of the Burgers vector for dislocations, and $\\lambda$ is the effective inter-precipitate spacing.\n\nFor this problem, model the precipitates as being uniformly distributed on a simple cubic lattice. The effective inter-precipitate spacing, $\\lambda$, is to be taken as the clear, edge-to-edge distance between adjacent precipitates along a cube edge of this lattice.\n\nThe alloy is subjected to two different heat treatments starting from the same initial composition. Both treatments result in the same total volume fraction, $f$, of $\\gamma'$ precipitates.\n1.  **Peak-Aged Condition**: A carefully controlled heat treatment results in an optimal dispersion with a mean precipitate radius of $r_1 = 6.00 \\text{ nm}$.\n2.  **Over-Aged Condition**: The alloy is held at an elevated temperature for an extended period, causing the precipitates to coarsen via Ostwald ripening. The total volume of precipitate phase remains constant, but the mean precipitate radius increases to $r_2 = 30.0 \\text{ nm}$.\n\nGiven the following material parameters:\n-   Shear modulus of the matrix, $G = 81.0 \\text{ GPa}$\n-   Magnitude of the Burgers vector, $b = 0.254 \\text{ nm}$\n-   Taylor factor, $M = 3.06$\n-   Volume fraction of precipitates, $f = 0.180$\n\nCalculate the ratio of the strengthening increment in the over-aged condition ($\\Delta\\sigma_{y,2}$) to that in the peak-aged condition ($\\Delta\\sigma_{y,1}$). Express your answer as a single real number rounded to three significant figures.", "solution": "The Orowan strengthening is given as $\\Delta\\sigma_{y} = M \\dfrac{G b}{\\lambda}$, where the effective inter-precipitate spacing $\\lambda$ is the clear edge-to-edge distance between adjacent spherical precipitates along a cube edge in a simple cubic array.\n\nFor a simple cubic lattice with one precipitate per cubic cell of edge length $L$, the number density is $n = L^{-3}$. The volume fraction of precipitates is\n$$\nf = n \\left(\\frac{4\\pi r^{3}}{3}\\right) = \\frac{1}{L^{3}}\\left(\\frac{4\\pi r^{3}}{3}\\right).\n$$\nSolving for $L$ gives\n$$\nL^{3} = \\frac{4\\pi r^{3}}{3f} \\quad\\Rightarrow\\quad L = r \\left(\\frac{4\\pi}{3f}\\right)^{1/3}.\n$$\nThe clear spacing along a cube edge is the center-to-center distance minus two radii:\n$$\n\\lambda = L - 2r = r\\left[\\left(\\frac{4\\pi}{3f}\\right)^{1/3} - 2\\right].\n$$\nSince $f$ is the same for both conditions, the bracketed factor is identical, so $\\lambda \\propto r$. Therefore, using $\\Delta\\sigma_{y} = M G b/\\lambda$ with the same $M$, $G$, and $b$ in both conditions,\n$$\n\\frac{\\Delta\\sigma_{y,2}}{\\Delta\\sigma_{y,1}} = \\frac{\\lambda_{1}}{\\lambda_{2}} = \\frac{r_{1}}{r_{2}}.\n$$\nSubstituting $r_{1} = 6.00\\,\\text{nm}$ and $r_{2} = 30.0\\,\\text{nm}$,\n$$\n\\frac{\\Delta\\sigma_{y,2}}{\\Delta\\sigma_{y,1}} = \\frac{6.00}{30.0} = 0.200.\n$$", "answer": "$$\\boxed{0.200}$$", "id": "1327444"}, {"introduction": "This advanced computational problem bridges the gap from simplified analytical models to the practical simulation of materials processing. You are challenged to construct a kinetic model from first principles to predict the evolution of a precipitate-strengthened system under a realistic, non-isothermal heat treatment schedule [@problem_id:2854069]. This exercise develops skills in translating physical theory, including temperature-dependent nucleation $I(T)$ and growth $U(T)$ rates, into a numerical model, a crucial capability for modern materials design and process optimization.", "problem": "You are asked to build, justify, and implement a non-isothermal precipitation hardening kinetic model starting from first principles of nucleation and growth, and to compute the resulting heat flow signal as a function of time under specified thermal schedules. Your program must be a complete, runnable script that performs the required calculations for a given test suite and prints the results in the exact required format.\n\nStarting point and definitions to be used as the fundamental base:\n- Non-isothermal temperature program $T(t)$ is prescribed. Assume $T(t)$ is piecewise linear, with constant heating or cooling rate $\\beta = dT/dt$ on each segment.\n- The nucleation rate per unit volume is $I(T) = I_{0}\\exp\\!\\left(-\\dfrac{Q_{n}}{R\\,T}\\right)$ where $I_{0}$ is a prefactor, $Q_{n}$ is the activation energy for nucleation, and $R$ is the universal gas constant. Use $R = 8.314\\ \\mathrm{J\\,mol^{-1}\\,K^{-1}}$.\n- The radial interface growth rate is $U(T) = U_{0}\\exp\\!\\left(-\\dfrac{Q_{g}}{R\\,T}\\right)$ where $U_{0}$ is a prefactor and $Q_{g}$ is the activation energy for growth.\n- For a nucleus formed at time $t'$, the radius at time $t \\ge t'$ is $r(t',t) = \\int_{t'}^{t} U(\\tau)\\,d\\tau$.\n- For growth in $m$ spatial dimensions ($m \\in \\{1,2,3\\}$), the extended transformed “volume” per nucleus is $V_{\\mathrm{ext}}(t',t) = c_{m}\\,r(t',t)^{m}$, where $c_{1}=2$, $c_{2}=\\pi$, and $c_{3}=\\dfrac{4\\pi}{3}$ for needles, disks, and spheres, respectively.\n- The extended transformed fraction is\n$$\nX_{e}(t) = \\int_{0}^{t} I(t')\\,V_{\\mathrm{ext}}(t',t)\\,dt' = c_{m}\\int_{0}^{t} I(t')\\left(\\int_{t'}^{t} U(\\tau)\\,d\\tau\\right)^{m} dt'.\n$$\n- The actual transformed fraction, accounting for impingement, is $X(t) = 1 - \\exp(-X_{e}(t))$.\n- The instantaneous heat flow rate per unit mass due to precipitation is $\\dot{q}(t) = \\Delta H_{m}\\,\\dfrac{dX}{dt}$, where $\\Delta H_{m}$ is the enthalpy change per unit mass of the precipitation reaction. Take the convention that exothermic precipitation yields $\\dot{q}(t) \\ge 0$.\n\nTasks:\n1. From the above base, formulate a differential system for the evolution of $X_{e}(t)$ that is amenable to time integration under a general non-isothermal schedule, without invoking any closed-form “shortcut” expressions. The derivation must start from the given integral definition of $X_{e}(t)$ and use only the stated base facts.\n2. Use your derived differential system to design a numerical algorithm that advances the state in time with a fixed time step $\\Delta t$, updating temperature via the prescribed heating rate $\\beta$ on each segment, and computing $\\dot{q}(t)$ and $X(t)$ at each step. Use explicit time stepping. Ensure that every intermediate quantity has consistent physical units. You must treat the non-isothermal case correctly, i.e., $I(T)$ and $U(T)$ must be evaluated at the instantaneous temperature $T(t)$.\n3. Implement the algorithm as a complete program that, for each test case in the suite below, computes:\n   - $t_{\\mathrm{peak}}$ in $\\mathrm{s}$: the time at which $\\dot{q}(t)$ attains its maximum over the schedule.\n   - $T_{\\mathrm{peak}}$ in $\\mathrm{K}$: the temperature at which the peak occurs.\n   - $\\dot{q}_{\\mathrm{peak}}$ in $\\mathrm{W\\,kg^{-1}}$: the peak heat flow rate per unit mass.\n   - $X_{\\mathrm{final}}$ (dimensionless): the final transformed fraction at the end of the schedule.\n   Your program must round $t_{\\mathrm{peak}}$ to $3$ decimals, $T_{\\mathrm{peak}}$ to $2$ decimals, $\\dot{q}_{\\mathrm{peak}}$ to $2$ decimals, and $X_{\\mathrm{final}}$ to $6$ decimals.\n4. The final output format must be a single line containing a Python-like list of per-test-case lists in the given order, e.g., $[\\,[$t_{\\mathrm{peak},1},T_{\\mathrm{peak},1},\\dot{q}_{\\mathrm{peak},1},X_{\\mathrm{final},1}],\\,[...],\\,[...]\\ ]$ with no spaces after commas.\n\nNumerical and unit conventions:\n- Use time in $\\mathrm{s}$, temperature in $\\mathrm{K}$, the gas constant $R$ in $\\mathrm{J\\,mol^{-1}\\,K^{-1}}$, activation energies in $\\mathrm{J\\,mol^{-1}}$, growth rate $U$ in $\\mathrm{m\\,s^{-1}}$, nucleation rate $I$ in $\\mathrm{m^{-3}\\,s^{-1}}$, $c_{m}$ as specified, and enthalpy $\\Delta H_{m}$ in $\\mathrm{J\\,kg^{-1}}$ so that $\\dot{q}$ is in $\\mathrm{W\\,kg^{-1}}$.\n- Use a fixed time step $\\Delta t = 0.10\\ \\mathrm{s}$ and ensure segment boundaries are respected exactly (i.e., shorten the last step of a segment so that it ends exactly at the boundary).\n\nTest suite:\nFor all cases, take $R = 8.314\\ \\mathrm{J\\,mol^{-1}\\,K^{-1}}$ and $m=3$ with $c_{3} = \\dfrac{4\\pi}{3}$. Each case provides $(I_{0},Q_{n},U_{0},Q_{g},\\Delta H_{m},T_{0},\\{\\text{segments}\\})$ where each segment is $(\\text{duration},\\beta)$ with duration in $\\mathrm{s}$ and $\\beta$ in $\\mathrm{K\\,s^{-1}}$.\n\n- Case A (single linear heating):\n  - $I_{0} = 1.0\\times 10^{20}\\ \\mathrm{m^{-3}\\,s^{-1}}$, $Q_{n} = 1.40\\times 10^{5}\\ \\mathrm{J\\,mol^{-1}}$,\n  - $U_{0} = 1.0\\times 10^{-7}\\ \\mathrm{m\\,s^{-1}}$, $Q_{g} = 1.20\\times 10^{5}\\ \\mathrm{J\\,mol^{-1}}$,\n  - $\\Delta H_{m} = 3.0\\times 10^{4}\\ \\mathrm{J\\,kg^{-1}}$, $T_{0} = 400\\ \\mathrm{K}$,\n  - segments: $\\left[(3600,\\ 0.1666667)\\right]$.\n\n- Case B (ramp–hold–ramp):\n  - $I_{0} = 1.0\\times 10^{20}\\ \\mathrm{m^{-3}\\,s^{-1}}$, $Q_{n} = 1.50\\times 10^{5}\\ \\mathrm{J\\,mol^{-1}}$,\n  - $U_{0} = 5.0\\times 10^{-8}\\ \\mathrm{m\\,s^{-1}}$, $Q_{g} = 1.25\\times 10^{5}\\ \\mathrm{J\\,mol^{-1}}$,\n  - $\\Delta H_{m} = 3.0\\times 10^{4}\\ \\mathrm{J\\,kg^{-1}}$, $T_{0} = 390\\ \\mathrm{K}$,\n  - segments: $\\left[(1800,\\ 0.0333333),\\ (600,\\ 0.0),\\ (1800,\\ 0.0333333)\\right]$.\n\n- Case C (moderate heating, higher activation):\n  - $I_{0} = 5.0\\times 10^{21}\\ \\mathrm{m^{-3}\\,s^{-1}}$, $Q_{n} = 1.80\\times 10^{5}\\ \\mathrm{J\\,mol^{-1}}$,\n  - $U_{0} = 2.0\\times 10^{-7}\\ \\mathrm{m\\,s^{-1}}$, $Q_{g} = 1.40\\times 10^{5}\\ \\mathrm{J\\,mol^{-1}}$,\n  - $\\Delta H_{m} = 3.0\\times 10^{4}\\ \\mathrm{J\\,kg^{-1}}$, $T_{0} = 350\\ \\mathrm{K}$,\n  - segments: $\\left[(4000,\\ 0.1)\\right]$.\n\nAnswer specification:\n- For each case, compute and report the tuple ($t_{\\mathrm{peak}},T_{\\mathrm{peak}},\\dot{q}_{\\mathrm{peak}},X_{\\mathrm{final}}$) with the rounding stated above.\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets and containing, in order, the three per-case lists: $[\\,[$t_{\\mathrm{peak},1},T_{\\mathrm{peak},1},\\dot{q}_{\\mathrm{peak},1},X_{\\mathrm{final},1}],[$t_{\\mathrm{peak},2},...],[$t_{\\mathrm{peak},3},...]\\ ]$.", "solution": "The problem is subjected to validation before a solution is attempted.\n\n### Step 1: Extract Givens\nThe problem provides the following governing equations and definitions:\n- Piecewise linear temperature schedule $T(t)$ with rate $\\beta = dT/dt$.\n- Nucleation rate per unit volume: $I(T) = I_{0}\\exp\\!\\left(-\\dfrac{Q_{n}}{R\\,T}\\right)$.\n- Radial interface growth rate: $U(T) = U_{0}\\exp\\!\\left(-\\dfrac{Q_{g}}{R\\,T}\\right)$.\n- Gas constant: $R = 8.314\\ \\mathrm{J\\,mol^{-1}\\,K^{-1}}$.\n- Radius of a nucleus formed at $t'$ and observed at time $t \\ge t'$: $r(t',t) = \\int_{t'}^{t} U(\\tau)\\,d\\tau$.\n- Extended transformed \"volume\" per nucleus for growth in $m$ dimensions: $V_{\\mathrm{ext}}(t',t) = c_{m}\\,r(t',t)^{m}$, with $c_1=2$, $c_2=\\pi$, $c_3=\\frac{4\\pi}{3}$.\n- Extended transformed fraction: $X_{e}(t) = \\int_{0}^{t} I(t')\\,V_{\\mathrm{ext}}(t',t)\\,dt' = c_{m}\\int_{0}^{t} I(t')\\left(\\int_{t'}^{t} U(\\tau)\\,d\\tau\\right)^{m} dt'$.\n- Actual transformed fraction (Avrami equation): $X(t) = 1 - \\exp(-X_{e}(t))$.\n- Heat flow rate per unit mass: $\\dot{q}(t) = \\Delta H_{m}\\,\\dfrac{dX}{dt}$, with $\\Delta H_{m}$ being the specific enthalpy of transformation.\n\nNumerical parameters and test cases are also provided, including material constants $(I_{0}, Q_{n}, U_{0}, Q_{g}, \\Delta H_{m})$, initial temperature $T_{0}$, thermal segments, dimensionality $m=3$, and time step $\\Delta t = 0.10\\ \\mathrm{s}$.\n\n### Step 2: Validate Using Extracted Givens\n- **Scientifically Grounded**: The model is based on the Johnson-Mehl-Avrami-Kolmogorov (JMAK) theory for solid-state transformations, a cornerstone of physical metallurgy and materials science. The use of Arrhenius-type equations for nucleation and growth rates is a standard and valid physical approximation.\n- **Well-Posed**: The problem is fully specified. It provides all necessary governing equations, material parameters, initial conditions ($T_0$ at $t=0$, implying $X(0)=0$), and a defined thermal path. The task is to derive and numerically solve a system of differential equations, for which a unique solution is expected.\n- **Objective**: The problem is stated using precise mathematical and physical language, devoid of any subjectivity or ambiguity.\n- **Flaws**:\n    1.  **Scientific Unsoundness**: None. The model is a valid, albeit simplified, representation of precipitation kinetics.\n    2.  **Non-Formalizable or Irrelevant**: None. The problem is a formal exercise in modeling materials phenomena.\n    3.  **Incomplete or Contradictory Setup**: None. All required information is provided.\n    4.  **Unrealistic or Infeasible**: None. The material parameters and thermal schedules are within physically plausible ranges for precipitation in metallic alloys.\n    5.  **Ill-Posed or Poorly Structured**: None. The problem structure naturally leads to a solvable system of ordinary differential equations (ODEs).\n    6.  **Outside Scientific Verifiability**: None. The calculations can be performed and verified.\n    7.  **\"Pseudo-profound\"**: None. The derivation requires a non-trivial application of calculus (Leibniz rule) and the numerical implementation is a substantive task.\n\n### Step 3: Verdict and Action\nThe problem is **valid**. A solution will be developed.\n\n### Task 1: Formulation of the Differential System\n\nThe objective is to convert the integral definition of the extended fraction $X_e(t)$ into a system of ODEs suitable for numerical integration. We start with the definition:\n$$X_{e}(t) = c_{m}\\int_{0}^{t} I(t')\\left(\\int_{t'}^{t} U(\\tau)\\,d\\tau\\right)^{m} dt'$$\nLet us define a set of moments, $M_k(t)$, of the particle size distribution as:\n$$M_{k}(t) = \\int_{0}^{t} I(t')\\left(\\int_{t'}^{t} U(\\tau)\\,d\\tau\\right)^{k} dt'$$\nfor $k = 0, 1, \\dots, m$. With this definition, the extended fraction is $X_e(t) = c_m M_m(t)$. We now derive the time evolution of these moments. We differentiate $M_k(t)$ with respect to time $t$ using the Leibniz integral rule, $\\frac{d}{dt} \\int_{a(t)}^{b(t)} f(x, t) dx = \\int_{a(t)}^{b(t)} \\frac{\\partial f}{\\partial t} dx + f(b(t), t) \\frac{db}{dt} - f(a(t), t) \\frac{da}{dt}$.\n\nFor $M_k(t)$, the integration variable is $t'$, the limits are $0$ and $t$, and the integrand is $f(t',t) = I(t')\\left(\\int_{t'}^{t} U(\\tau)\\,d\\tau\\right)^{k}$.\n$$ \\frac{dM_k}{dt} = \\int_{0}^{t} \\frac{\\partial}{\\partial t} \\left[ I(t')\\left(\\int_{t'}^{t} U(\\tau)\\,d\\tau\\right)^{k} \\right] dt' + I(t)\\left(\\int_{t}^{t} U(\\tau)\\,d\\tau\\right)^{k} \\cdot \\frac{d(t)}{dt} $$\nThe second term evaluates to zero because $\\int_{t}^{t} U(\\tau)\\,d\\tau = 0$ for $k > 0$.\nFor the special case $k=0$:\n$$M_0(t) = \\int_0^t I(t') dt' \\quad \\implies \\quad \\frac{dM_0}{dt} = I(t)$$\nThis moment, $M_0(t)$, represents the total number of nuclei formed per unit volume up to time $t$.\n\nFor $k > 0$, we differentiate the integrand with respect to $t$:\n$$ \\frac{\\partial}{\\partial t} \\left[ I(t')\\left(\\int_{t'}^{t} U(\\tau)\\,d\\tau\\right)^{k} \\right] = I(t') \\cdot k \\left(\\int_{t'}^{t} U(\\tau)\\,d\\tau\\right)^{k-1} \\cdot \\frac{\\partial}{\\partial t}\\left(\\int_{t'}^{t} U(\\tau)\\,d\\tau\\right) $$\nThe derivative of the inner integral is simply $U(t)$.\n$$ \\frac{\\partial}{\\partial t} \\left[ \\dots \\right] = I(t') \\cdot k \\left(\\int_{t'}^{t} U(\\tau)\\,d\\tau\\right)^{k-1} U(t) $$\nSubstituting this back into the expression for $\\frac{dM_k}{dt}$:\n$$ \\frac{dM_k}{dt} = \\int_{0}^{t} I(t') \\cdot k \\left(\\int_{t'}^{t} U(\\tau)\\,d\\tau\\right)^{k-1} U(t) \\,dt' $$\n$$ \\frac{dM_k}{dt} = k\\,U(t) \\int_{0}^{t} I(t') \\left(\\int_{t'}^{t} U(\\tau)\\,d\\tau\\right)^{k-1} \\,dt' $$\nBy definition, the integral on the right is $M_{k-1}(t)$. This yields a recursive relationship:\n$$ \\frac{dM_k}{dt} = k\\,U(t)\\,M_{k-1}(t) \\quad \\text{for } k=1, 2, \\dots, m $$\nFor the specific case of $m=3$ (spherical growth), we have the following system of four coupled ODEs:\n$$ \\begin{cases} \\dfrac{dM_0}{dt} = I(t) \\\\ \\dfrac{dM_1}{dt} = U(t) M_0(t) \\\\ \\dfrac{dM_2}{dt} = 2\\,U(t) M_1(t) \\\\ \\dfrac{dM_3}{dt} = 3\\,U(t) M_2(t) \\end{cases} $$\nThe initial conditions at $t=0$ are $M_0(0) = M_1(0) = M_2(0) = M_3(0) = 0$.\n\nThe transformed fraction $X(t)$ and heat flow $\\dot{q}(t)$ can be expressed in terms of these moments.\n$X_e(t) = c_3 M_3(t)$.\n$$ \\frac{dX}{dt} = \\frac{d}{dt} \\left(1 - e^{-X_e(t)}\\right) = e^{-X_e(t)} \\frac{dX_e}{dt} = e^{-c_3 M_3(t)} \\cdot c_3 \\frac{dM_3}{dt} $$\nSubstituting the expression for $\\frac{dM_3}{dt}$:\n$$ \\frac{dX}{dt} = e^{-c_3 M_3(t)} \\cdot c_3 \\cdot \\left( 3\\,U(t) M_2(t) \\right) = (1-X(t)) \\cdot 3 c_3 U(t) M_2(t) $$\nThe heat flow rate is then:\n$$ \\dot{q}(t) = \\Delta H_m \\frac{dX}{dt} = \\Delta H_m (1-X(t)) \\cdot 3 c_3 U(t) M_2(t) $$\n\n### Task 2: Numerical Algorithm Design\n\nAn explicit time-stepping algorithm based on the Forward Euler method is constructed to solve the derived system.\n1.  **State Vector**: The system state at any time $t$ is defined by the vector $[T(t), M_0(t), M_1(t), M_2(t), M_3(t)]$.\n2.  **Initialization**: At $t=0$, set $T = T_0$ and $M_k = 0$ for $k \\in \\{0, 1, 2, 3\\}$. Initialize total time $t_{total}=0$. Create arrays to store the time series of $t, T, \\dot{q}, X$.\n3.  **Time Integration Loop**: The simulation proceeds by iterating through the defined thermal segments. For each segment with duration $D$ and rate $\\beta$:\n    -   Set segment end time $t_{end} = t_{total} + D$.\n    -   Loop while $t_{total} < t_{end}$:\n        a.  Determine current time step $\\Delta t_{curr} = \\min(\\Delta t, t_{end} - t_{total})$.\n        b.  At the current state $(T, M_0, M_1, M_2, M_3)$, calculate the temperature-dependent rates $I(T)$ and $U(T)$.\n        c.  Calculate the derivatives $\\frac{dM_k}{dt}$ using the ODE system derived above.\n        d.  Calculate the instantaneous transformed fraction $X(t) = 1 - \\exp(-c_3 M_3(t))$ and heat flow $\\dot{q}(t) = \\Delta H_m \\cdot (1-X(t)) \\cdot 3 c_3 U(t) M_2(t)$.\n        e.  Store the current values $(t_{total}, T, \\dot{q}, X)$.\n        f.  Update the state variables using the Forward Euler scheme:\n            -   $M_k(t+\\Delta t_{curr}) = M_k(t) + \\frac{dM_k}{dt} \\cdot \\Delta t_{curr}$ for $k=0,1,2,3$.\n            -   $T(t+\\Delta t_{curr}) = T(t) + \\beta \\cdot \\Delta t_{curr}$.\n        g.  Advance the total time: $t_{total} = t_{total} + \\Delta t_{curr}$.\n4.  **Post-Processing**: After the simulation completes, analyze the stored time series to find the peak heat flow $\\dot{q}_{\\mathrm{peak}}$ and the corresponding time $t_{\\mathrm{peak}}$ and temperature $T_{\\mathrm{peak}}$. The final transformed fraction $X_{\\mathrm{final}}$ is the last value in the stored $X$ series.\n5.  **Result Formatting**: Round the calculated values to the specified decimal places and format the output as required. The use of NumPy arrays can facilitate efficient storage and analysis.\n\nThis algorithm correctly implements the non-isothermal model by re-evaluating rates at each time step and ensures that segment boundaries are precisely met.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the non-isothermal precipitation hardening kinetics problem.\n    \"\"\"\n    # Universal gas constant in J/(mol*K)\n    R = 8.314\n    # Time step in s\n    DT = 0.10\n    # Shape factor for spherical precipitates (m=3)\n    C3 = 4.0 * np.pi / 3.0\n\n    test_cases = [\n        # Case A (single linear heating)\n        {\n            'I0': 1.0e20,  # m^-3 s^-1\n            'Qn': 1.40e5,  # J/mol\n            'U0': 1.0e-7,  # m/s\n            'Qg': 1.20e5,  # J/mol\n            'dH': 3.0e4,   # J/kg\n            'T0': 400.0,   # K\n            'segments': [(3600.0, 0.1666667)]  # (duration_s, beta_K/s)\n        },\n        # Case B (ramp–hold–ramp)\n        {\n            'I0': 1.0e20,\n            'Qn': 1.50e5,\n            'U0': 5.0e-8,\n            'Qg': 1.25e5,\n            'dH': 3.0e4,\n            'T0': 390.0,\n            'segments': [(1800.0, 0.0333333), (600.0, 0.0), (1800.0, 0.0333333)]\n        },\n        # Case C (moderate heating, higher activation)\n        {\n            'I0': 5.0e21,\n            'Qn': 1.80e5,\n            'U0': 2.0e-7,\n            'Qg': 1.40e5,\n            'dH': 3.0e4,\n            'T0': 350.0,\n            'segments': [(4000.0, 0.1)]\n        }\n    ]\n\n    all_results = []\n\n    for case in test_cases:\n        # Unpack parameters\n        I0, Qn = case['I0'], case['Qn']\n        U0, Qg = case['U0'], case['Qg']\n        dH, T0 = case['dH'], case['T0']\n        segments = case['segments']\n\n        # Initialize state variables\n        t_current = 0.0\n        T_current = T0\n        # Moments M0, M1, M2, M3\n        M_k = np.zeros(4)\n\n        # Data storage\n        history_t = []\n        history_T = []\n        history_q_dot = []\n        history_X = []\n\n        # Simulation loop over segments\n        for duration, beta in segments:\n            t_segment_end = t_current + duration\n            \n            # Machine precision epsilon for float comparison\n            epsilon = 1e-9\n\n            while t_current  t_segment_end - epsilon:\n                # Ensure segment boundary is hit exactly\n                dt_current = min(DT, t_segment_end - t_current)\n\n                # Calculate temperature-dependent rates at current T\n                # Avoid division by zero if T is ever 0\n                if T_current = 0:\n                    I_rate = 0.0\n                    U_rate = 0.0\n                else: \n                    I_rate = I0 * np.exp(-Qn / (R * T_current))\n                    U_rate = U0 * np.exp(-Qg / (R * T_current))\n\n                # Calculate derivatives of moments\n                dM0_dt = I_rate\n                dM1_dt = U_rate * M_k[0]\n                dM2_dt = 2.0 * U_rate * M_k[1]\n                dM3_dt = 3.0 * U_rate * M_k[2]\n\n                # Calculate physical quantities\n                X_e = C3 * M_k[3]\n                # Avoid underflow in exp\n                if X_e > 700: # np.exp(-700) is close to zero\n                    X = 1.0\n                    exp_X_e = 0.0\n                else:\n                    exp_X_e = np.exp(-X_e)\n                    X = 1.0 - exp_X_e\n                \n                # dX/dt = exp(-X_e) * dX_e/dt = exp(-X_e) * C3 * dM3/dt\n                dX_dt = exp_X_e * C3 * dM3_dt\n                q_dot = dH * dX_dt\n                \n                # Store results for this step\n                history_t.append(t_current)\n                history_T.append(T_current)\n                history_q_dot.append(q_dot)\n                history_X.append(X)\n\n                # Update state variables using Forward Euler\n                M_k[0] += dM0_dt * dt_current\n                M_k[1] += dM1_dt * dt_current\n                M_k[2] += dM2_dt * dt_current\n                M_k[3] += dM3_dt * dt_current\n                T_current += beta * dt_current\n                t_current += dt_current\n\n        history_q_dot_np = np.array(history_q_dot)\n        peak_idx = np.argmax(history_q_dot_np)\n\n        t_peak = history_t[peak_idx]\n        T_peak = history_T[peak_idx]\n        q_peak = history_q_dot_np[peak_idx]\n        X_final = history_X[-1] if history_X else 0.0\n\n        # Round results to specified precision\n        t_peak_rounded = round(t_peak, 3)\n        T_peak_rounded = round(T_peak, 2)\n        q_peak_rounded = round(q_peak, 2)\n        X_final_rounded = round(X_final, 6)\n\n        all_results.append([\n            t_peak_rounded,\n            T_peak_rounded,\n            q_peak_rounded,\n            X_final_rounded\n        ])\n    \n    # Format the final output string exactly as required\n    result_str = '[' + ','.join(['[' + ','.join(map(str, res)) + ']' for res in all_results]) + ']'\n    print(result_str)\n\nsolve()\n```", "id": "2854069"}]}