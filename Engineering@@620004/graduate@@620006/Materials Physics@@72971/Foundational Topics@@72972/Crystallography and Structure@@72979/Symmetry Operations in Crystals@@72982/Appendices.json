{"hands_on_practices": [{"introduction": "Understanding how to represent symmetry operations mathematically is the first step toward analyzing crystal structures. This exercise focuses on representing composite operations, specifically a reflection followed by a rotation, as a single transformation matrix [@problem_id:1807464]. Mastering this allows you to predict the final position of any point in the crystal after a sequence of symmetry events, a fundamental skill in crystallography.", "problem": "In a computational model of a crystal lattice, an atom's position is subject to transformations that simulate environmental interactions. An atom, initially located by a position vector $\\vec{r} = (x, y, z)$ in a standard Cartesian coordinate system, undergoes a specific two-step sequence of symmetry operations.\n\nFirst, the atom is reflected through the $xz$-plane. Second, immediately following this reflection, the atom is rotated by an angle $\\theta$ about the $y$-axis. The sense of rotation is counter-clockwise when viewed from the positive $y$-axis towards the origin.\n\nDetermine the single $3 \\times 3$ matrix, let's call it $M$, which represents this combined two-step transformation, such that the final position vector $\\vec{r'}$ is given by $\\vec{r'} = M\\vec{r}$. Express the components of the matrix $M$ in terms of the angle $\\theta$.", "solution": "We represent the two-step transformation by composing the corresponding matrices in the order of application to the vector $\\vec{r}$.\n\n1) Reflection through the $xz$-plane changes $(x,y,z)$ to $(x,-y,z)$. The corresponding matrix, acting on column vectors, is\n$$\nS=\\begin{pmatrix}\n1 & 0 & 0\\\\\n0 & -1 & 0\\\\\n0 & 0 & 1\n\\end{pmatrix}.\n$$\n\n2) Rotation by angle $\\theta$ about the $y$-axis, counter-clockwise when viewed from the positive $y$-axis towards the origin, is the standard right-hand rule rotation with matrix\n$$\nR_{y}(\\theta)=\\begin{pmatrix}\n\\cos\\theta & 0 & \\sin\\theta\\\\\n0 & 1 & 0\\\\\n-\\sin\\theta & 0 & \\cos\\theta\n\\end{pmatrix}.\n$$\n\n3) The combined transformation first applies $S$ and then $R_{y}(\\theta)$, so the net matrix is the product\n$$\nM=R_{y}(\\theta)\\,S.\n$$\nSince $S$ is diagonal, this scales the columns of $R_{y}(\\theta)$ by the diagonal entries of $S$, yielding\n$$\nM=\\begin{pmatrix}\n\\cos\\theta & 0 & \\sin\\theta\\\\\n0 & -1 & 0\\\\\n-\\sin\\theta & 0 & \\cos\\theta\n\\end{pmatrix}.\n$$\nThis matrix satisfies $\\vec{r'}=M\\vec{r}$ with $x'=\\cos\\theta\\,x+\\sin\\theta\\,z$, $y'=-y$, and $z'=-\\sin\\theta\\,x+\\cos\\theta\\,z$, as required by the specified sequence of operations.", "answer": "$$\\boxed{\\begin{pmatrix}\n\\cos\\theta & 0 & \\sin\\theta\\\\\n0 & -1 & 0\\\\\n-\\sin\\theta & 0 & \\cos\\theta\n\\end{pmatrix}}$$", "id": "1807464"}, {"introduction": "Building on matrix representations, we can explore the deeper algebraic structure of space groups using the powerful Seitz notation for isometries. This practice challenges you to compute the commutator of a rotation and a translation, two fundamental symmetry operations [@problem_id:2864784]. This calculation is not merely an abstract exercise; it reveals how non-commuting operations can generate pure translations, a concept that is central to the existence of non-symmorphic space groups.", "problem": "Consider a three-dimensional orthorhombic Bravais lattice with primitive translation vectors $\\mathbf{a}$, $\\mathbf{b}$, and $\\mathbf{c}$, which are mutually orthogonal and of unequal lengths $a$, $b$, and $c$ (so the lattice is noncubic). A crystal symmetry operation can be represented as an isometry acting on position vectors $\\mathbf{r}$ in the form $\\mathbf{r} \\mapsto R \\mathbf{r} + \\mathbf{t}$, where $R$ is a proper or improper orthogonal matrix and $\\mathbf{t}$ is a lattice translation. Consider the following two lattice symmetries defined with respect to an origin at a lattice point:\n- a twofold rotation about the $\\mathbf{c}$ axis through the origin, represented by $\\mathcal{R} = (R \\mid \\mathbf{0})$ with rotation angle $\\pi$,\n- a primitive translation along $\\mathbf{a}$, represented by $\\mathcal{T} = (I \\mid \\mathbf{a})$.\n\nUsing only the fundamental group-composition structure of Euclidean isometries and the fact that the orthorhombic lattice is invariant under a twofold rotation about each principal axis, construct the commutator\n$$\\mathcal{C} = \\mathcal{R}\\,\\mathcal{T}\\,\\mathcal{R}^{-1}\\,\\mathcal{T}^{-1}$$\nand determine its translation part expressed in fractional coordinates with respect to the primitive basis $\\{\\mathbf{a}, \\mathbf{b}, \\mathbf{c}\\}$. That is, find $(u, v, w)$ such that the translation part of $\\mathcal{C}$ equals $u\\,\\mathbf{a} + v\\,\\mathbf{b} + w\\,\\mathbf{c}$. Provide your final answer as a single row matrix containing the three components. No rounding is required, and the answer should be unitless because it is expressed in fractions of the primitive vectors.", "solution": "The problem requires the construction of the commutator of two symmetry operations in a three-dimensional orthorhombic Bravais lattice. We are given the lattice, with mutually orthogonal primitive vectors $\\mathbf{a}$, $\\mathbf{b}$, and $\\mathbf{c}$ of unequal length. We will analyze the problem using the Seitz notation for Euclidean isometries, where an operation is represented by a pair $(R \\mid \\mathbf{t})$ that transforms a position vector $\\mathbf{r}$ to $R\\mathbf{r} + \\mathbf{t}$.\n\nThe two given symmetry operations are:\n$1$. A twofold rotation $\\mathcal{R}$ about the $\\mathbf{c}$ axis, passing through the origin, which is a lattice point. The translation part is zero. In Seitz notation, this is $\\mathcal{R} = (R \\mid \\mathbf{0})$. The rotation is by an angle of $\\pi$ radians.\n$2$. A primitive lattice translation $\\mathcal{T}$ along the vector $\\mathbf{a}$. This is represented as $\\mathcal{T} = (I \\mid \\mathbf{a})$, where $I$ is the $3 \\times 3$ identity matrix.\n\nThe task is to compute the commutator $\\mathcal{C} = \\mathcal{R}\\,\\mathcal{T}\\,\\mathcal{R}^{-1}\\,\\mathcal{T}^{-1}$ and determine its translation part in fractional coordinates.\n\nFirst, we must establish a coordinate system. Let us align the Cartesian axes $(\\hat{x}, \\hat{y}, \\hat{z})$ with the directions of the primitive vectors $(\\mathbf{a}, \\mathbf{b}, \\mathbf{c})$, such that $\\mathbf{a} = a\\hat{x}$, $\\mathbf{b} = b\\hat{y}$, and $\\mathbf{c} = c\\hat{z}$. The matrix representation of the rotation $R$ for a twofold rotation ($\\theta = \\pi$) about the $\\mathbf{c}$ axis (the $z$-axis) is:\n$$\nR = R_z(\\pi) = \\begin{pmatrix} \\cos(\\pi) & -\\sin(\\pi) & 0 \\\\ \\sin(\\pi) & \\cos(\\pi) & 0 \\\\ 0 & 0 & 1 \\end{pmatrix} = \\begin{pmatrix} -1 & 0 & 0 \\\\ 0 & -1 & 0 \\\\ 0 & 0 & 1 \\end{pmatrix}\n$$\n\nNext, we determine the inverse operations.\nThe inverse of a general operation $(S \\mid \\mathbf{v})$ is $(S^{-1} \\mid -S^{-1}\\mathbf{v})$.\nFor the rotation $\\mathcal{R} = (R \\mid \\mathbf{0})$, the inverse is $\\mathcal{R}^{-1} = (R^{-1} \\mid -R^{-1}\\mathbf{0}) = (R^{-1} \\mid \\mathbf{0})$. A rotation by $\\pi$ is its own inverse, so $R^2=I$, which means $R^{-1}=R$. Thus, $\\mathcal{R}^{-1} = (R \\mid \\mathbf{0})$.\nFor the translation $\\mathcal{T} = (I \\mid \\mathbf{a})$, the inverse is $\\mathcal{T}^{-1} = (I^{-1} \\mid -I^{-1}\\mathbf{a}) = (I \\mid -\\mathbf{a})$.\n\nNow, we compute the commutator $\\mathcal{C}$ using the composition rule for Seitz operators: $(R_1 \\mid \\mathbf{t}_1)(R_2 \\mid \\mathbf{t}_2) = (R_1R_2 \\mid \\mathbf{t}_1 + R_1\\mathbf{t}_2)$.\nLet us compute the product $\\mathcal{R}\\mathcal{T}\\mathcal{R}^{-1}\\mathcal{T}^{-1}$ sequentially.\nFirst, we find the product $\\mathcal{R}\\mathcal{T}$:\n$$\n\\mathcal{R}\\mathcal{T} = (R \\mid \\mathbf{0}) (I \\mid \\mathbf{a}) = (RI \\mid \\mathbf{0} + R\\mathbf{a}) = (R \\mid R\\mathbf{a})\n$$\nNext, we compose this result with $\\mathcal{R}^{-1}$:\n$$\n(\\mathcal{R}\\mathcal{T})\\mathcal{R}^{-1} = (R \\mid R\\mathbf{a}) (R^{-1} \\mid \\mathbf{0}) = (RR^{-1} \\mid R\\mathbf{a} + R\\mathbf{0}) = (I \\mid R\\mathbf{a})\n$$\nFinally, we compose with $\\mathcal{T}^{-1}$:\n$$\n\\mathcal{C} = ((\\mathcal{R}\\mathcal{T})\\mathcal{R}^{-1}) \\mathcal{T}^{-1} = (I \\mid R\\mathbf{a}) (I \\mid -\\mathbf{a}) = (I \\cdot I \\mid R\\mathbf{a} + I(-\\mathbf{a})) = (I \\mid R\\mathbf{a} - \\mathbf{a})\n$$\nThe commutator $\\mathcal{C}$ is a pure translation, as its rotational part is the identity matrix $I$. The translation vector is $\\mathbf{t}_{\\mathcal{C}} = R\\mathbf{a} - \\mathbf{a}$.\n\nWe must now evaluate this vector. The vector $\\mathbf{a}$ in our chosen Cartesian system is $\\begin{pmatrix} a \\\\ 0 \\\\ 0 \\end{pmatrix}$. Applying the rotation matrix $R$:\n$$\nR\\mathbf{a} = \\begin{pmatrix} -1 & 0 & 0 \\\\ 0 & -1 & 0 \\\\ 0 & 0 & 1 \\end{pmatrix} \\begin{pmatrix} a \\\\ 0 \\\\ 0 \\end{pmatrix} = \\begin{pmatrix} -a \\\\ 0 \\\\ 0 \\end{pmatrix} = -\\mathbf{a}\n$$\nSubstituting this result into the expression for the translation vector:\n$$\n\\mathbf{t}_{\\mathcal{C}} = R\\mathbf{a} - \\mathbf{a} = -\\mathbf{a} - \\mathbf{a} = -2\\mathbf{a}\n$$\nThe problem requires this translation vector to be expressed in fractional coordinates with respect to the primitive basis $\\{\\mathbf{a}, \\mathbf{b}, \\mathbf{c}\\}$. We seek coefficients $(u, v, w)$ such that:\n$$\n\\mathbf{t}_{\\mathcal{C}} = u\\mathbf{a} + v\\mathbf{b} + w\\mathbf{c}\n$$\nBy direct comparison with our result $\\mathbf{t}_{\\mathcal{C}} = -2\\mathbf{a}$:\n$$\n-2\\mathbf{a} + 0\\mathbf{b} + 0\\mathbf{c} = u\\mathbf{a} + v\\mathbf{b} + w\\mathbf{c}\n$$\nSince the vectors $\\mathbf{a}$, $\\mathbf{b}$, and $\\mathbf{c}$ are non-coplanar and thus linearly independent, the coefficients must be equal.\nTherefore, $u = -2$, $v = 0$, and $w = 0$.\n\nThe fractional coordinates of the translation part of the commutator are $(-2, 0, 0)$. This result is a lattice vector, as expected, since the composition of any four space group operations must yield another valid space group operation.", "answer": "$$\n\\boxed{\\begin{pmatrix} -2 & 0 & 0 \\end{pmatrix}}\n$$", "id": "2864784"}, {"introduction": "The theoretical framework of symmetry operations finds its ultimate practical use in computational modeling and data analysis. This hands-on problem requires you to implement an algorithm that generates the full set of equivalent atomic positions from a single seed position and a list of symmetry operations [@problem_id:2864749]. Successfully completing this task involves translating the mathematical formalism of Seitz operators and lattice periodicity into working code, a core skill for any modern materials physicist.", "problem": "Implement an algorithm that applies a finite set of Seitz operations to a seed position in fractional coordinates and identifies distinct images modulo lattice translations. A Seitz operation is defined by a pair $\\left(R \\mid \\mathbf{t}\\right)$ acting on a position vector $\\mathbf{r}$ as $\\mathbf{r}' = R \\mathbf{r} + \\mathbf{t}$. The setting is a Bravais lattice defined by a basis, and fractional coordinates are taken with respect to this basis so that two positions $\\mathbf{r}_{1}$ and $\\mathbf{r}_{2}$ are equivalent if and only if $\\mathbf{r}_{1} - \\mathbf{r}_{2} = \\mathbf{n}$ for some integer vector $\\mathbf{n} \\in \\mathbb{Z}^{3}$. In practical computation, treat two fractional positions $\\mathbf{x}, \\mathbf{y} \\in \\mathbb{R}^{3}$ as equivalent if the difference $\\mathbf{x}-\\mathbf{y}$ differs from an integer vector by at most a tolerance $\\epsilon = 10^{-8}$ in each component. You must operate entirely in fractional coordinates; the lattice basis is implicit, and reduction modulo lattice translations corresponds to taking each component modulo $1$ to map into the half-open interval $\\left[0,1\\right)$.\n\nFundamental base to use:\n- Group action of linear isometries on Euclidean space together with translations, encoded by Seitz pairs $\\left(R \\mid \\mathbf{t}\\right)$, and the definition $\\mathbf{r}' = R \\mathbf{r} + \\mathbf{t}$.\n- Periodicity of a crystal lattice: $\\mathbf{r}$ and $\\mathbf{r} + \\mathbf{n}$ with $\\mathbf{n} \\in \\mathbb{Z}^{3}$ label the same physical point in the crystal.\n- Equivalence classes of positions under lattice translations form the quotient space $\\mathbb{R}^{3}/\\mathbb{Z}^{3}$, represented by fractional coordinates reduced componentwise modulo $1$.\n\nYour program must:\n- For each test case, apply every provided Seitz operation $\\left(R \\mid \\mathbf{t}\\right)$ to the seed fractional position $\\mathbf{r}$ to compute $\\mathbf{r}' = R \\mathbf{r} + \\mathbf{t}$, then reduce $\\mathbf{r}'$ componentwise into $\\left[0,1\\right)$ by modulo $1$.\n- Implement equivalence modulo lattice translations: two reduced fractional positions $\\mathbf{x}$ and $\\mathbf{y}$ are considered the same if there exists $\\mathbf{n} \\in \\mathbb{Z}^{3}$ such that $\\left\\lVert \\left(\\mathbf{x} - \\mathbf{y}\\right) - \\mathbf{n} \\right\\rVert_{\\infty} \\le \\epsilon$ with $\\epsilon = 10^{-8}$.\n- Count the number of distinct images generated from the seed by the given set of Seitz operations for each test case.\n\nImportant implementation details:\n- All coordinates are unitless fractional coordinates; there are no physical units to report.\n- Use the specified tolerance $\\epsilon = 10^{-8}$ consistently in your equivalence checks.\n- Angles do not appear in the input; all rotation matrices $R$ are explicitly specified.\n- You must ensure numerical stability at the boundaries, e.g., a component equal to $1$ after rounding should be mapped to $0$.\n\nTest suite:\nProvide results for the following five test cases. In every case, operations and coordinates are given in fractional-coordinate representation.\n\n- Test case $1$: Simple identity.\n  - Seed $\\mathbf{r} = \\left(0.1, 0.2, 0.3\\right)$.\n  - Operations: $\\left(I \\mid \\left(0, 0, 0\\right)\\right)$, where $I$ is the $3 \\times 3$ identity matrix.\n- Test case $2$: Twofold rotation about the $z$-axis.\n  - Seed $\\mathbf{r} = \\left(0.3, 0.1, 0.0\\right)$.\n  - Operations: $\\left(I \\mid \\left(0, 0, 0\\right)\\right)$ and $\\left(R_{2z} \\mid \\left(0, 0, 0\\right)\\right)$ with $R_{2z} = \\mathrm{diag}\\left(-1, -1, 1\\right)$.\n- Test case $3$: Twofold screw axis along the $z$-direction.\n  - Seed $\\mathbf{r} = \\left(0.25, 0.25, 0.25\\right)$.\n  - Operations: $\\left(I \\mid \\left(0, 0, 0\\right)\\right)$ and $\\left(R_{2z} \\mid \\left(0, 0, 0.5\\right)\\right)$ with $R_{2z} = \\mathrm{diag}\\left(-1, -1, 1\\right)$.\n- Test case $4$: Fourfold rotations about the $z$-axis applied to a high-symmetry point.\n  - Seed $\\mathbf{r} = \\left(0, 0, 0\\right)$.\n  - Operations: $\\left(R_{k} \\mid \\left(0, 0, 0\\right)\\right)$ for $k \\in \\left\\{0,1,2,3\\right\\}$, where\n    $$\n    R_{0} = \\begin{bmatrix} 1 & 0 & 0\\\\ 0 & 1 & 0\\\\ 0 & 0 & 1 \\end{bmatrix},\\;\n    R_{1} = \\begin{bmatrix} 0 & -1 & 0\\\\ 1 & 0 & 0\\\\ 0 & 0 & 1 \\end{bmatrix},\\;\n    R_{2} = \\begin{bmatrix} -1 & 0 & 0\\\\ 0 & -1 & 0\\\\ 0 & 0 & 1 \\end{bmatrix},\\;\n    R_{3} = \\begin{bmatrix} 0 & 1 & 0\\\\ -1 & 0 & 0\\\\ 0 & 0 & 1 \\end{bmatrix}.\n    $$\n- Test case $5$: Redundancy due to a pure lattice translation embedded as a Seitz operation.\n  - Seed $\\mathbf{r} = \\left(0.4, 0.6, 0.7\\right)$.\n  - Operations: $\\left(I \\mid \\left(0, 0, 0\\right)\\right)$ and $\\left(I \\mid \\left(1, 0, 0\\right)\\right)$.\n\nRequired final output format:\n- Your program should produce a single line of output containing a list of integers, where the $j$-th integer is the number of distinct images for test case $j$.\n- The format must be exactly one line with a comma-separated list enclosed in square brackets, for example, $\\left[\\text{result}_{1},\\text{result}_{2},\\ldots\\right]$.", "solution": "The problem requires the implementation of an algorithm to determine the number of unique atomic positions generated by applying a set of symmetry operations to an initial seed position within a crystal lattice. The entire analysis is performed in fractional coordinates, where periodicity and equivalence are handled modulo lattice translations.\n\nA symmetry operation in a crystal is mathematically described by a Seitz pair $\\left(R \\mid \\mathbf{t}\\right)$, which comprises a rotational part $R$ (a $3 \\times 3$ matrix) and a translational part $\\mathbf{t}$ (a $3 \\times 1$ vector). The action of this operation on a position vector $\\mathbf{r}$ is an affine transformation given by:\n$$\n\\mathbf{r}' = R \\mathbf{r} + \\mathbf{t}\n$$\nAll vectors and matrices are expressed in a fractional coordinate system based on the lattice vectors. In this system, the periodic nature of the crystal implies that two positions, $\\mathbf{r}_1$ and $\\mathbf{r}_2$, are physically equivalent if their difference is a vector with integer components. That is, $\\mathbf{r}_1 \\sim \\mathbf{r}_2$ if $\\mathbf{r}_1 - \\mathbf{r}_2 = \\mathbf{n}$ for some $\\mathbf{n} \\in \\mathbb{Z}^3$.\n\nThis equivalence relation partitions the space of all positions into equivalence classes. A canonical representative for each class can be found within the primary unit cell, defined by fractional coordinates in the half-open interval $\\left[0, 1\\right)$. Any position vector $\\mathbf{r}'$ can be mapped into this unit cell by taking each component modulo $1$. For a component $v$, its reduced value $v''$ is given by $v'' = v - \\lfloor v \\rfloor$. This operation, denoted as $\\mathbf{r}'' = \\mathbf{r}' \\pmod 1$, ensures that all resulting coordinates lie in $\\left[0, 1\\right)$.\n\nThe algorithm to solve the problem proceeds as follows for each test case:\n1. Initialize an empty list, `distinct_images`, to store the unique positions found.\n2. For each provided Seitz operation $\\left(R_i \\mid \\mathbf{t}_i\\right)$:\n   a. Apply the operation to the seed position $\\mathbf{r}$ to generate a new position $\\mathbf{r}'_i = R_i \\mathbf{r} + \\mathbf{t}_i$.\n   b. Reduce the new position $\\mathbf{r}'_i$ into the primary unit cell to obtain $\\mathbf{r}''_i = \\mathbf{r}'_i \\pmod 1$. Computationally, this is performed component-wise, for example, using `numpy.mod(vector, 1.0)`. A special check is made for values numerically close to $1.0$, which are mapped to $0.0$ to strictly enforce the $\\left[0, 1\\right)$ interval.\n   c. Check if this reduced position $\\mathbf{r}''_i$ is equivalent to any position already stored in `distinct_images`.\n\nThe core of the problem lies in the numerical implementation of the equivalence check between two reduced positions, $\\mathbf{x}$ and $\\mathbf{y}$, both within the range $\\left[0, 1\\right)^3$. According to the problem statement, they are equivalent if their difference, $\\mathbf{x} - \\mathbf{y}$, is close to an integer vector $\\mathbf{n}$ within a tolerance $\\epsilon = 10^{-8}$ for each component.\nLet $\\mathbf{d} = \\mathbf{x} - \\mathbf{y}$. Since $\\mathbf{x}, \\mathbf{y} \\in \\left[0, 1\\right)^3$, each component $d_j$ of the difference vector $\\mathbf{d}$ lies in the interval $\\left(-1, 1\\right)$. The integer vector $\\mathbf{n}$ that could be close to $\\mathbf{d}$ must have components in $\\{-1, 0, 1\\}$.\nThe condition for equivalence is that for each component $j \\in \\{1, 2, 3\\}$, the periodic distance between $x_j$ and $y_j$ must be less than $\\epsilon$. The periodic distance on a circle of circumference $1$ is given by $\\min(\\left|x_j - y_j\\right|, 1 - \\left|x_j - y_j\\right|)$.\nTherefore, two reduced positions $\\mathbf{x}$ and $\\mathbf{y}$ are deemed equivalent if, for all components $j$:\n$$\n\\min(\\left|x_j - y_j\\right|, 1 - \\left|x_j - y_j\\right|) < \\epsilon\n$$\nIf $\\mathbf{r}''_i$ is found to be not equivalent to any existing position in `distinct_images`, it is added to the list as a new unique image.\n\n3. After applying all operations, the total number of distinct images is the final size of the `distinct_images` list. This count is computed for each test case.\n\nThis procedure correctly enumerates the orbit of the seed position under the action of the given set of symmetry operations, respecting the lattice periodicity and handling numerical comparisons with appropriate tolerance.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Applies Seitz operations to a seed position and counts distinct images\n    modulo lattice translations.\n    \"\"\"\n    epsilon = 1e-8\n\n    # Define the test cases from the problem statement.\n    I = np.identity(3)\n    R2z = np.diag([-1., -1., 1.])\n    R4z_0 = np.array([[1., 0., 0.], [0., 1., 0.], [0., 0., 1.]])\n    R4z_1 = np.array([[0., -1., 0.], [1., 0., 0.], [0., 0., 1.]])\n    R4z_2 = np.array([[-1., 0., 0.], [0., -1., 0.], [0., 0., 1.]])\n    R4z_3 = np.array([[0., 1., 0.], [-1., 0., 0.], [0., 0., 1.]])\n\n    test_cases = [\n        # Test case 1: Simple identity\n        {\n            \"seed\": np.array([0.1, 0.2, 0.3]),\n            \"operations\": [\n                (I, np.array([0., 0., 0.])),\n            ]\n        },\n        # Test case 2: Twofold rotation about the z-axis\n        {\n            \"seed\": np.array([0.3, 0.1, 0.0]),\n            \"operations\": [\n                (I, np.array([0., 0., 0.])),\n                (R2z, np.array([0., 0., 0.])),\n            ]\n        },\n        # Test case 3: Twofold screw axis along the z-direction\n        {\n            \"seed\": np.array([0.25, 0.25, 0.25]),\n            \"operations\": [\n                (I, np.array([0., 0., 0.])),\n                (R2z, np.array([0., 0., 0.5])),\n            ]\n        },\n        # Test case 4: Fourfold rotations about the z-axis on a high-symmetry point\n        {\n            \"seed\": np.array([0., 0., 0.]),\n            \"operations\": [\n                (R4z_0, np.array([0., 0., 0.])),\n                (R4z_1, np.array([0., 0., 0.])),\n                (R4z_2, np.array([0., 0., 0.])),\n                (R4z_3, np.array([0., 0., 0.])),\n            ]\n        },\n        # Test case 5: Redundancy due to a pure lattice translation\n        {\n            \"seed\": np.array([0.4, 0.6, 0.7]),\n            \"operations\": [\n                (I, np.array([0., 0., 0.])),\n                (I, np.array([1., 0., 0.])),\n            ]\n        }\n    ]\n\n    results = []\n    \n    def are_equivalent(p1, p2):\n        \"\"\"\n        Check if two reduced fractional positions are equivalent modulo\n        lattice translations within the given tolerance.\n        \"\"\"\n        diff = np.abs(p1 - p2)\n        periodic_dist = np.minimum(diff, 1.0 - diff)\n        return np.all(periodic_dist < epsilon)\n\n    for case in test_cases:\n        seed = case[\"seed\"]\n        operations = case[\"operations\"]\n        distinct_images = []\n\n        for R, t in operations:\n            # Apply Seitz operation: r' = R*r + t\n            new_pos = R @ seed + t\n            \n            # Reduce to the unit cell [0, 1)\n            reduced_pos = np.mod(new_pos, 1.0)\n            \n            # Handle boundary cases where a value is numerically 1.0\n            reduced_pos[np.isclose(reduced_pos, 1.0, atol=epsilon, rtol=0)] = 0.0\n\n            # Check if this position is a new distinct image\n            is_new = True\n            for existing_pos in distinct_images:\n                if are_equivalent(reduced_pos, existing_pos):\n                    is_new = False\n                    break\n            \n            if is_new:\n                distinct_images.append(reduced_pos)\n\n        results.append(len(distinct_images))\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2864749"}]}