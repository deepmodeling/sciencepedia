{"hands_on_practices": [{"introduction": "The formation of the desired perovskite crystal structure is the most fundamental prerequisite for a high-performance solar cell. This exercise introduces the Goldschmidt tolerance factor ($t$) and the octahedral factor ($\\mu$), which are indispensable first-order guides for predicting structural stability based on the ionic radii of the constituent A, B, and X ions. By calculating these parameters for a contemporary mixed-cation composition, you will practice connecting atomic-scale geometry to the macroscopic likelihood of forming a stable perovskite phase [@problem_id:2846468].", "problem": "A halide perovskite of nominal composition FA$_{0.83}$Cs$_{0.17}$PbI$_3$ is considered, where FA$^+$ denotes formamidinium. Treat the structure as an ideal cubic $ABX_3$ perovskite at the level of hard-sphere geometry and quasi-static ionic packing. Starting from the geometric constraints imposed by a corner-sharing $B$X$_6$ octahedral network in the ideal cubic perovskite (with $B$ cations octahedrally coordinated by anions and $A$ cations occupying the cuboctahedral site), derive the dimensionless ratios that govern geometric stability of the perovskite lattice:\n- the Goldschmidt tolerance factor $t$ as the ratio of the $A$–$X$ separation to the $B$–$X$ separation projected along the cubic directions, and\n- the octahedral factor $\\mu$ as the $B$-site to $X$-site hard-sphere radius ratio required for a $B$ cation to fit into an anion octahedron.\n\nAssume that the effective $A$-site radius of a mixed-cation composition is the composition-weighted linear average, i.e., $r_A = x\\,r_{\\mathrm{FA}^+} + (1-x)\\,r_{\\mathrm{Cs}^+}$ with $x = 0.83$. Use the following Shannon and effective ionic radii (with the specified coordination numbers appropriate to the perovskite geometry):\n- $r_{\\mathrm{Pb}^{2+}}^{\\mathrm{VI}} = 1.19\\ \\mathrm{\\AA}$,\n- $r_{\\mathrm{I}^{-}}^{\\mathrm{VI}} = 2.20\\ \\mathrm{\\AA}$,\n- $r_{\\mathrm{Cs}^{+}}^{\\mathrm{XII}} = 1.88\\ \\mathrm{\\AA}$,\n- $r_{\\mathrm{FA}^{+}}^{\\mathrm{XII}} = 2.53\\ \\mathrm{\\AA}$.\n\nUsing only these assumptions and radii, compute $t$ and $\\mu$ for FA$_{0.83}$Cs$_{0.17}$PbI$_3$. Then, based on whether the computed $t$ and $\\mu$ fall within broadly accepted empirical halide-perovskite stability windows at room temperature (without invoking any additional fitting formulas), provide a brief qualitative assessment of whether the perovskite phase is favored over a nonperovskite polymorph. Round your reported numerical values of $t$ and $\\mu$ to four significant figures, and express the final answer as a row matrix $\\bigl(t\\ \\ \\mu\\bigr)$ with dimensionless entries.", "solution": "The problem requires the derivation and calculation of two geometric stability parameters for the halide perovskite FA$_{0.83}$Cs$_{0.17}$PbI$_3$: the Goldschmidt tolerance factor $t$ and the octahedral factor $\\mu$. The analysis is based on a hard-sphere model of an ideal cubic $ABX_3$ perovskite structure.\n\nFirst, we establish the geometric relationships in an ideal cubic perovskite lattice with lattice parameter $a$. The $A$-site cation is at the cube corner (e.g., origin), the $B$-site cation is at the body center, and the $X$-site anions are at the face centers.\n- The $B$ cation at position $(\\frac{a}{2}, \\frac{a}{2}, \\frac{a}{2})$ is octahedrally coordinated by six $X$ anions at positions like $(\\frac{a}{2}, \\frac{a}{2}, 0)$. The distance between the center of the $B$ cation and the center of an adjacent $X$ anion, $d_{BX}$, is half the lattice parameter:\n$$d_{BX} = \\frac{a}{2}$$\nIn a hard-sphere model where these ions are touching, this distance is the sum of their radii, $r_B$ and $r_X$:\n$$d_{BX} = r_B + r_X$$\nThis implies a relationship for the lattice parameter based on the dimensions of the $BX_6$ octahedral network:\n$$a = 2(r_B + r_X)$$\n- The $A$ cation at position $(0, 0, 0)$ is in a cuboctahedral void, coordinated by twelve $X$ anions. The distance from the $A$ cation to an adjacent $X$ anion at $(\\frac{a}{2}, \\frac{a}{2}, 0)$, denoted as $d_{AX}$, is the length of a face half-diagonal:\n$$d_{AX} = \\sqrt{\\left(\\frac{a}{2}\\right)^2 + \\left(\\frac{a}{2}\\right)^2} = \\sqrt{\\frac{a^2}{2}} = \\frac{a}{\\sqrt{2}}$$\nIn the ideal case where the $A$ and $X$ ions also touch, this distance is the sum of their radii, $r_A$ and $r_X$:\n$$d_{AX} = r_A + r_X$$\n\nNow we derive the dimensionless factors.\n\n1. The Goldschmidt Tolerance Factor ($t$):\nThe problem provides a definition for $t$ as \"the ratio of the $A$–$X$ separation to the $B$–$X$ separation projected along the cubic directions\". This phrasing is non-standard and ambiguous. We will proceed by deriving the standard definition from the geometric constraints, which is the only physically coherent interpretation. The tolerance factor quantifies the size mismatch between the $A$-cation and the void provided for it by the corner-sharing $BX_6$ framework. The size of this void is determined by the $A-X$ distance as dictated by the framework's geometry, which is $d_{AX} = a/\\sqrt{2}$. Substituting the expression for $a$ from the $B-X$ bond, we find the available distance:\n$$d_{AX, \\text{framework}} = \\frac{2(r_B + r_X)}{\\sqrt{2}} = \\sqrt{2}(r_B + r_X)$$\nThe bond length required to accommodate the $A$ and $X$ ions, based on their radii, is:\n$$d_{AX, \\text{radii}} = r_A + r_X$$\nThe tolerance factor $t$ is the ratio of the length required by the ions to the length provided by the framework. For a perfect geometric fit, these two lengths must be equal, so $t=1$.\n$$t = \\frac{d_{AX, \\text{radii}}}{d_{AX, \\text{framework}}} = \\frac{r_A + r_X}{\\sqrt{2}(r_B + r_X)}$$\nThis is the standard and correct formula for the Goldschmidt tolerance factor.\n\n2. The Octahedral Factor ($\\mu$):\nThe problem defines $\\mu$ as \"the $B$-site to $X$-site hard-sphere radius ratio\". This factor assesses the stability of the $BX_6$ octahedron itself. It is simply the ratio of the radius of the cation at the B-site to that of the anion at the X-site.\n$$\\mu = \\frac{r_B}{r_X}$$\nFor the $B$ cation to be large enough to prevent the octahedron from being unstable (i.e., to prevent the anions from touching each other), its radius must satisfy the geometric condition $r_B \\ge (\\sqrt{2}-1)r_X$, which implies $\\mu \\ge \\sqrt{2}-1 \\approx 0.414$. The factor $\\mu$ itself is the direct ratio of the radii.\n\nNext, we compute the numerical values for FA$_{0.83}$Cs$_{0.17}$PbI$_3$. The ionic radii are given as $r_B = r_{\\mathrm{Pb}^{2+}} = 1.19\\ \\mathrm{\\AA}$ and $r_X = r_{\\mathrm{I}^{-}} = 2.20\\ \\mathrm{\\AA}$.\nThe effective radius of the mixed $A$-site cation, $r_A$, is calculated as the composition-weighted average:\n$r_A = x\\,r_{\\mathrm{FA}^+} + (1-x)\\,r_{\\mathrm{Cs}^+}$, with $x=0.83$.\n$$r_A = (0.83)(2.53\\ \\mathrm{\\AA}) + (0.17)(1.88\\ \\mathrm{\\AA}) = 2.0999\\ \\mathrm{\\AA} + 0.3196\\ \\mathrm{\\AA} = 2.4195\\ \\mathrm{\\AA}$$\n\nNow we can calculate $\\mu$ and $t$:\n$$\\mu = \\frac{r_B}{r_X} = \\frac{1.19}{2.20} \\approx 0.540909...$$\nRounding to four significant figures, $\\mu = 0.5409$.\n\n$$t = \\frac{r_A + r_X}{\\sqrt{2}(r_B + r_X)} = \\frac{2.4195 + 2.20}{\\sqrt{2}(1.19 + 2.20)} = \\frac{4.6195}{\\sqrt{2}(3.39)} \\approx \\frac{4.6195}{4.79418} \\approx 0.96356...$$\nRounding to four significant figures, $t = 0.9636$.\n\nFinally, a qualitative assessment of phase stability is required.\nThe calculated octahedral factor is $\\mu \\approx 0.5409$. This value is substantially greater than the minimal threshold for octahedral stability ($\\mu > \\sqrt{2}-1 \\approx 0.414$), indicating that the Pb$^{2+}$ cation is sufficiently large to form a stable octahedral coordination with the I$^{-}$ anions.\nThe calculated tolerance factor is $t \\approx 0.9636$. For halide perovskites, the ideal cubic or pseudocubic perovskite phase is empirically found to be most stable for $t$ in the range of approximately $0.9 < t < 1.0$. Values of $t > 1$ tend to favor the formation of non-perovskite hexagonal phases, while values of $t < 0.9$ typically lead to significant octahedral tilting and lower-symmetry structures that may exhibit poor optoelectronic properties or be thermodynamically unstable. The computed value of $t = 0.9636$ falls squarely within the optimal window for stable, high-quality perovskite phase formation.\n\nTherefore, based on this geometric analysis, both $t$ and $\\mu$ values are favorable. The combination of a sufficiently large $B$-cation and an $A$-cation of nearly ideal size suggests that the cubic (or near-cubic) perovskite phase of FA$_{0.83}$Cs$_{0.17}$PbI$_3$ is geometrically stable and should be favored over non-perovskite polymorphs.", "answer": "$$\\boxed{\\begin{pmatrix} 0.9636 & 0.5409 \\end{pmatrix}}$$", "id": "2846468"}, {"introduction": "Once a stable structure is formed, its interaction with light is paramount. This practice focuses on determining the optical bandgap ($E_g$), a critical parameter that dictates the portion of the solar spectrum a material can absorb. You will work through a common and essential experimental analysis procedure, using Tauc plot methodology to extract the bandgap from simulated optical transmission data, thereby bridging the gap between the quantum theory of direct transitions and practical materials characterization [@problem_id:2846429].", "problem": "A thin-film absorber of formamidinium–cesium lead iodide perovskite $\\mathrm{FA}_{1-x}\\mathrm{Cs}_{x}\\mathrm{PbI}_{3}$ (formamidinium: FA) is measured in transmission and reflectance at normal incidence near its fundamental absorption edge. The film thickness is $d = 500\\,\\mathrm{nm}$, and the spectrally averaged, near-edge reflectance may be taken as a constant $R = 0.06$. The measured transmission at selected photon energies $E$ is:\n- $E = 1.66\\,\\mathrm{eV}$ with $T = 0.340705336$,\n- $E = 1.72\\,\\mathrm{eV}$ with $T = 0.206354717$,\n- $E = 1.78\\,\\mathrm{eV}$ with $T = 0.149594703$.\n\nStarting from fundamental principles, use:\n- Beer–Lambert absorption to relate the transmission to the absorption coefficient,\n- Fermi’s Golden Rule with three-dimensional parabolic bands to determine the joint density of states near a direct band edge,\nto obtain an energy-axis linearization of a suitable function of the absorption coefficient that allows extraction of the direct bandgap energy $E_g$ by straight-line extrapolation. Then:\n\n1. Compute the absorption coefficient $\\alpha(E)$ at the three given photon energies using a single-pass reflectance correction at normal incidence, neglecting coherent interference and multiple internal reflections.\n2. Construct the linearized quantity implied by your derivation and perform a linear least-squares fit over the three points to determine the energy-axis intercept, which is the bandgap $E_g$.\n\nExpress your final answer for $E_g$ in $\\mathrm{eV}$ and round to four significant figures.", "solution": "The problem requires the determination of the direct bandgap energy, $E_g$, of a perovskite thin film from optical transmission data. The solution is executed in two stages: first, the theoretical basis for the data analysis is established from fundamental principles; second, the data are processed according to this theoretical model to extract the value of $E_g$.\n\nThe relationship between the absorption coefficient $\\alpha$ and the photon energy $E = \\hbar\\omega$ for a direct bandgap semiconductor is derived from Fermi's Golden Rule. The transition rate $W_{i \\to f}$ from an initial valence band state $|v, \\vec{k}\\rangle$ to a final conduction band state $|c, \\vec{k}'\\rangle$ is given by:\n$$W_{v, \\vec{k} \\to c, \\vec{k}'} = \\frac{2\\pi}{\\hbar} |\\langle c, \\vec{k}' | H' | v, \\vec{k} \\rangle|^2 \\delta(E_c(\\vec{k}') - E_v(\\vec{k}) - E)$$\nwhere $H'$ is the light-matter interaction Hamiltonian. For a direct transition, momentum is conserved, so $\\vec{k}' \\approx \\vec{k}$.\n\nAssuming parabolic bands for a three-dimensional crystal system, the energies of the conduction band ($E_c$) and valence band ($E_v$) relative to the top of the valence band are:\n$$E_c(\\vec{k}) = E_g + \\frac{\\hbar^2 k^2}{2 m_e^*}$$\n$$E_v(\\vec{k}) = -\\frac{\\hbar^2 k^2}{2 m_h^*}$$\nwhere $m_e^*$ and $m_h^*$ are the effective masses of the electron and hole, respectively, and $k = |\\vec{k}|$. The energy conservation condition for a photon of energy $E$ becomes:\n$$E = E_c(\\vec{k}) - E_v(\\vec{k}) = E_g + \\frac{\\hbar^2 k^2}{2\\mu^*}$$\nwhere $\\mu^* = (1/m_e^* + 1/m_h^*)^{-1}$ is the reduced effective mass.\n\nThe absorption coefficient $\\alpha(E)$ is proportional to the total transition rate, which involves summing over all possible initial and final states. This summation is replaced by an integral over k-space. The resulting expression for $\\alpha(E)$ is:\n$$\\alpha(E) \\propto \\frac{1}{E} \\int_0^\\infty |M|^2 g_{joint}(E) dE$$\nwhere $|M|^2=|\\langle c, \\vec{k} | H' | v, \\vec{k} \\rangle|^2$ is the transition matrix element, assumed to be approximately constant for allowed transitions near the band edge. The joint density of states, $g_{joint}(E)$, represents the number of available transition pairs per unit volume per unit energy. For a 3D system, it can be shown to be:\n$$g_{joint}(E) \\propto (2\\mu^*)^{3/2} \\sqrt{E-E_g}$$\nfor $E > E_g$, and zero otherwise. Combining these results gives the characteristic energy dependence for a direct allowed transition:\n$$\\alpha(E) = \\frac{C_{\\text{mat}}}{E}\\sqrt{E-E_g}$$\nwhere $C_{\\text{mat}}$ is a material-dependent constant. To linearize this relationship, the equation is rearranged and squared:\n$$(\\alpha(E) E)^2 = C_{\\text{mat}}^2 (E - E_g)$$\nThis equation is of the form $Y = mX + b$, where $Y = (\\alpha E)^2$, $X = E$, the slope is $m = C_{\\text{mat}}^2$, and the intercept is $b = -C_{\\text{mat}}^2 E_g$. A plot of $(\\alpha E)^2$ versus $E$, known as a Tauc plot, will therefore be a straight line for energies above the bandgap. The extrapolation of this line to the energy axis (where $(\\alpha E)^2 = 0$) directly yields the bandgap energy, $E_g = -b/m$.\n\nNext, the absorption coefficient $\\alpha$ must be calculated from the experimental data. The problem specifies that measured transmission $T$ and reflectance $R$ are provided for a film of thickness $d$. Critically, the model must neglect coherent interference and multiple internal reflections. This instruction is interpreted as a single-pass model where a beam enters the front surface, is attenuated through the bulk, and exits the back surface. The fractional intensity transmitted, $T$, is thus:\n$$T = \\frac{I_0 (1-R) \\exp(-\\alpha d) (1-R)}{I_0} = (1-R)^2 \\exp(-\\alpha d)$$\nwhere $(1-R)$ accounts for reflection loss at the front interface and the second $(1-R)$ accounts for reflection loss at the back interface, assuming symmetric interfaces. Solving for $\\alpha$ yields:\n$$\\alpha(E) = \\frac{1}{d} \\ln\\left( \\frac{(1-R)^2}{T(E)} \\right)$$\nWith the provided data: $d = 500\\,\\mathrm{nm} = 5 \\times 10^{-5}\\,\\mathrm{cm}$ and $R = 0.06$. Thus, $(1-R)^2 = (0.94)^2 = 0.8836$.\n\nThe values of $\\alpha(E)$ are calculated for the three given data points:\n1.  For $E_1 = 1.66\\,\\mathrm{eV}$ and $T_1 = 0.340705336$:\n    $$\\alpha_1 = \\frac{1}{5 \\times 10^{-5}} \\ln\\left( \\frac{0.8836}{0.340705336} \\right) = \\frac{\\ln(2.59344)}{5 \\times 10^{-5}} = \\frac{0.95300}{5 \\times 10^{-5}} = 19060.0\\,\\mathrm{cm}^{-1}$$\n2.  For $E_2 = 1.72\\,\\mathrm{eV}$ and $T_2 = 0.206354717$:\n    $$\\alpha_2 = \\frac{1}{5 \\times 10^{-5}} \\ln\\left( \\frac{0.8836}{0.206354717} \\right) = \\frac{\\ln(4.28182)}{5 \\times 10^{-5}} = \\frac{1.45436}{5 \\times 10^{-5}} = 29087.2\\,\\mathrm{cm}^{-1}$$\n3.  For $E_3 = 1.78\\,\\mathrm{eV}$ and $T_3 = 0.149594703$:\n    $$\\alpha_3 = \\frac{1}{5 \\times 10^{-5}} \\ln\\left( \\frac{0.8836}{0.149594703} \\right) = \\frac{\\ln(5.90680)}{5 \\times 10^{-5}} = \\frac{1.77610}{5 \\times 10^{-5}} = 35522.0\\,\\mathrm{cm}^{-1}$$\n\nNow, the linearized quantity $y = (\\alpha E)^2$ is computed for each point $(x,y) = (E, (\\alpha E)^2)$:\n1.  $x_1 = 1.66\\,\\mathrm{eV}$, $y_1 = (19060.0 \\times 1.66)^2 = (31639.6)^2 = 1.00106 \\times 10^9 \\, (\\mathrm{cm}^{-1}\\cdot\\mathrm{eV})^2$\n2.  $x_2 = 1.72\\,\\mathrm{eV}$, $y_2 = (29087.2 \\times 1.72)^2 = (50029.98)^2 = 2.50300 \\times 10^9 \\, (\\mathrm{cm}^{-1}\\cdot\\mathrm{eV})^2$\n3.  $x_3 = 1.78\\,\\mathrm{eV}$, $y_3 = (35522.0 \\times 1.78)^2 = (63229.16)^2 = 3.99793 \\times 10^9 \\, (\\mathrm{cm}^{-1}\\cdot\\mathrm{eV})^2$\n\nTo find the bandgap, a linear least-squares fit of $y = m x + b$ is performed on these three points. For $N=3$ points, the slope $m$ and intercept $b$ are given by:\n$$m = \\frac{N \\sum(x_i y_i) - (\\sum x_i)(\\sum y_i)}{N \\sum(x_i^2) - (\\sum x_i)^2}$$\n$$b = \\bar{y} - m\\bar{x} = \\frac{\\sum y_i}{N} - m\\frac{\\sum x_i}{N}$$\nThe required sums are (omitting the common factor of $10^9$ in $y_i$ for calculation, as it scales $m$ and $b$ equally, leaving their ratio unaffected):\n$\\sum x_i = 1.66 + 1.72 + 1.78 = 5.16$\n$\\sum y_i' = 1.00106 + 2.50300 + 3.99793 = 7.50199$\n$\\sum x_i^2 = (1.66)^2 + (1.72)^2 + (1.78)^2 = 2.7556 + 2.9584 + 3.1684 = 8.8824$\n$\\sum (x_i y_i') = (1.66)(1.00106) + (1.72)(2.50300) + (1.78)(3.99793) = 1.66176 + 4.30516 + 7.11632 = 13.08324$\n\nThe slope $m'$ (for the scaled $y_i'$ values) is:\n$$m' = \\frac{3(13.08324) - (5.16)(7.50199)}{3(8.8824) - (5.16)^2} = \\frac{39.24972 - 38.71027}{26.6472 - 26.6256} = \\frac{0.53945}{0.0216} \\approx 24.9745$$\nThe intercept $b'$ is:\n$$b' = \\frac{7.50199}{3} - (24.9745) \\frac{5.16}{3} = 2.50066 - (24.9745)(1.72) = 2.50066 - 42.95614 = -40.45548$$\nThe bandgap is the energy-axis intercept:\n$$E_g = -\\frac{b'}{m'} = -\\frac{-40.45548}{24.9745} = 1.61989\\,\\mathrm{eV}$$\nRounding the result to four significant figures gives $1.620\\,\\mathrm{eV}$.", "answer": "$$\\boxed{1.620}$$", "id": "2846429"}, {"introduction": "Beyond absorbing light, an efficient solar cell must minimize the loss of photogenerated charge carriers to recombination before they can be extracted. This advanced exercise simulates a crucial research task: analyzing carrier recombination dynamics by fitting lifetime data to a physical model. This problem provides hands-on experience in deriving the governing rate equations for radiative and Auger recombination and implementing a numerical algorithm to extract the key coefficients, reflecting a complete workflow from theory to data analysis in modern optoelectronics research [@problem_id:2846439].", "problem": "You are given time-resolved photoluminescence lifetime measurements of a metal-halide perovskite thin film as a function of excess carrier density. Assume a three-dimensional, direct bandgap semiconductor in the intrinsic or high-level injection regime, with negligible background doping and negligible Shockley–Read–Hall (SRH) recombination over the provided density ranges. Start from the following fundamental base and definitions only, and derive any model you need beyond them:\n- The bimolecular radiative recombination rate is defined by $R_{\\mathrm{rad}} = B \\left(n p - n_i^2\\right)$, where $B$ is the radiative recombination coefficient, $n$ and $p$ are electron and hole densities, and $n_i$ is the intrinsic carrier density.\n- The Auger recombination rate is the sum of electron- and hole-assisted channels, $R_{\\mathrm{Aug}} = C_n n \\left(n p - n_i^2\\right) + C_p p \\left(n p - n_i^2\\right)$. In this problem, assume a single effective Auger coefficient $C$ that is valid under the given conditions.\n- Under high-level injection in an intrinsic thin film, the photoexcited excess densities satisfy $\\Delta n = \\Delta p$ and $n \\approx p \\approx \\Delta n$ over the measurement window.\n- The effective carrier lifetime is defined by $\\tau_{\\mathrm{eff}} = \\Delta n / R_{\\mathrm{tot}}$, where $R_{\\mathrm{tot}}$ is the total recombination rate.\nYour tasks are:\n1) Using the base above, and no additional empirical formulas, derive a relationship that connects the effective lifetime $\\tau$ as a function of excess carrier density $n$ to the coefficients $B$ and $C$. You must clearly state your approximations and the regime in which your relationship holds.\n2) Design an algorithm that, given measured pairs $\\{(n_i,\\tau_i)\\}$, extracts $B$ and a single effective Auger coefficient $C$ by solving a well-posed least squares problem. Your method must be robust to small measurement rounding, rely only on the derived relationship, and return $B$ in $\\mathrm{cm}^3\\!/\\!\\mathrm{s}$ and $C$ in $\\mathrm{cm}^6\\!/\\!\\mathrm{s}$.\n3) Define the criterion for \"radiatively limited\" recombination over the provided density set as follows. For each density $n_i$, compute the fraction $f_i$ of the radiative recombination contribution to the total recombination rate using your derived model. The recombination is deemed radiatively limited over the set if $f_i \\ge 0.8$ for all $i$. To avoid floating-point ambiguity near the threshold, use a numerical tolerance $\\epsilon = 10^{-9}$ and accept $f_i \\ge 0.8 - \\epsilon$.\n4) Implement your derivation and algorithm in a complete, runnable program that processes the test suite below and prints the required outputs in the exact format specified.\nTest suite (all densities in $\\mathrm{cm}^{-3}$ and lifetimes in $\\mathrm{s}$):\n- Test case A (happy-path, broad density range): densities $[1.0\\times 10^{15}, 3.0\\times 10^{15}, 1.0\\times 10^{16}, 3.0\\times 10^{16}, 1.0\\times 10^{17}, 3.0\\times 10^{17}, 1.0\\times 10^{18}]$, lifetimes $[9.999000099990001\\times 10^{-6}, 3.332700329703039\\times 10^{-6}, 9.99000999000999\\times 10^{-7}, 3.323309403799602\\times 10^{-7}, 9.900990099009901\\times 10^{-8}, 3.236245954692557\\times 10^{-8}, 9.090909090909091\\times 10^{-9}]$.\n- Test case B (Auger-dominated at high injection): densities $[1.0\\times 10^{16}, 3.0\\times 10^{16}, 1.0\\times 10^{17}, 3.0\\times 10^{17}, 1.0\\times 10^{18}]$, lifetimes $[9.523809523809524\\times 10^{-7}, 2.898550724637681\\times 10^{-7}, 6.666666666666667\\times 10^{-8}, 1.3333333333333334\\times 10^{-8}, 1.6666666666666667\\times 10^{-9}]$.\n- Test case C (boundary near the radiative threshold): densities $[1.0\\times 10^{16}, 3.0\\times 10^{16}, 1.0\\times 10^{17}, 3.0\\times 10^{17}, 1.0\\times 10^{18}]$, lifetimes $[9.975062344139651\\times 10^{-7}, 3.3078880407124685\\times 10^{-7}, 9.75609756097561\\times 10^{-8}, 3.1007751937984496\\times 10^{-8}, 8.0\\times 10^{-9}]$.\nYour program must:\n- For each test case, fit and return $B$ in $\\mathrm{cm}^3\\!/\\!\\mathrm{s}$ and $C$ in $\\mathrm{cm}^6\\!/\\!\\mathrm{s}$ as floating-point numbers, and determine the radiatively limited boolean according to the criterion above evaluated over the given densities of that case.\n- Produce a single line of output containing the results as a comma-separated list of triples, one triple per test case, enclosed in square brackets. Each triple must be of the form $[B,C,\\text{radiatively\\_limited}]$. For example, the output format should be like $[[B_A,C_A,\\text{flag}_A],[B_B,C_B,\\text{flag}_B],[B_C,C_C,\\text{flag}_C]]$ with no spaces inserted.", "solution": "The problem as stated is subjected to validation and is found to be scientifically sound, well-posed, and self-contained. It is based on fundamental principles of semiconductor physics and presents a standard, albeit non-trivial, data analysis task. All necessary definitions, assumptions, and data are provided. There are no contradictions, ambiguities, or factual inaccuracies. Therefore, we may proceed with the solution.\n\nThe problem requires a three-part theoretical development followed by a computational implementation. We shall address each theoretical part sequentially.\n\nFirst, we derive the relationship between the effective carrier lifetime $\\tau$ and the excess carrier density $n$. The analysis is based exclusively on the provided definitions and assumptions.\nThe total recombination rate $R_{\\mathrm{tot}}$ is the sum of all contributing channels. The problem specifies that Shockley-Read-Hall (SRH) recombination is negligible, thus we consider only radiative and Auger recombination:\n$$R_{\\mathrm{tot}} = R_{\\mathrm{rad}} + R_{\\mathrm{Aug}}$$\nThe given rate expressions are:\n$$R_{\\mathrm{rad}} = B (n p - n_i^2)$$\n$$R_{\\mathrm{Aug}} = C_n n (n p - n_i^2) + C_p p (n p - n_i^2)$$\nHere, $B$ is the bimolecular radiative recombination coefficient, $C_n$ and $C_p$ are the Auger coefficients for electron- and hole-assisted processes, respectively, $n$ and $p$ are the total electron and hole densities, and $n_i$ is the intrinsic carrier density.\n\nThe problem states that the semiconductor is analyzed under high-level injection conditions in an intrinsic thin film. This implies that the photo-generated excess carrier density $\\Delta n$ is much larger than the intrinsic carrier density ($ \\Delta n \\gg n_i $). In an intrinsic material, the background carrier densities are $n_0 = p_0 = n_i$. The total carrier densities are $n = n_0 + \\Delta n = n_i + \\Delta n$ and $p = p_0 + \\Delta p = n_i + \\Delta p$. The condition of charge neutrality for photo-generation requires $\\Delta n = \\Delta p$.\nUnder high-level injection, we can thus approximate the total densities as:\n$$n \\approx \\Delta n$$\n$$p \\approx \\Delta p$$\nAs $\\Delta n = \\Delta p$, it follows that $n \\approx p \\approx \\Delta n$. We shall use the symbol $n$ to represent the excess carrier density $\\Delta n$, as per the problem's convention. The term $(n p - n_i^2)$ simplifies under this approximation:\n$$n p - n_i^2 \\approx (\\Delta n)(\\Delta n) - n_i^2 = n^2 - n_i^2 \\approx n^2$$\nSubstituting this approximation into the rate equations yields:\n$$R_{\\mathrm{rad}} \\approx B n^2$$\n$$R_{\\mathrm{Aug}} \\approx C_n n (n^2) + C_p p (n^2) = (C_n n + C_p p) n^2 \\approx (C_n + C_p) n \\cdot n^2 = (C_n + C_p) n^3$$\nThe problem permits the use of a single effective Auger coefficient $C$. We define it as the sum of the channel-specific coefficients, $C = C_n + C_p$. The Auger rate is then:\n$$R_{\\mathrm{Aug}} \\approx C n^3$$\nThe total recombination rate is therefore:\n$$R_{\\mathrm{tot}}(n) \\approx B n^2 + C n^3$$\nThe effective carrier lifetime $\\tau_{\\mathrm{eff}}$ (denoted hereafter as $\\tau$) is defined as $\\tau = \\Delta n / R_{\\mathrm{tot}}$. Using our expression for $R_{\\mathrm{tot}}$ and letting $\\Delta n = n$:\n$$\\tau(n) = \\frac{n}{B n^2 + C n^3} = \\frac{1}{B n + C n^2}$$\nFor the purpose of parameter fitting, it is most convenient to linearize this model by taking the reciprocal of the lifetime:\n$$\\frac{1}{\\tau} = B n + C n^2$$\nThis equation provides the fundamental relationship connecting the measured quantities $n$ and $\\tau$ to the unknown physical parameters $B$ and $C$. This model is valid under high-level injection where radiative and Auger processes dominate.\n\nSecond, we design the algorithm for extracting the coefficients $B$ and $C$ from a set of measured data points $\\{(n_i, \\tau_i)\\}_{i=1}^N$. The derived relationship $1/\\tau_i = B n_i + C n_i^2$ is a linear model. This structure is ideal for a linear least squares regression. Let us define the response variable $y_i = 1/\\tau_i$, the predictor variables $x_{i,1} = n_i$ and $x_{i,2} = n_i^2$, and the parameters to be estimated $\\beta_1 = B$ and $\\beta_2 = C$. The system of equations for all data points can be written in matrix form:\n$$\\mathbf{y} = \\mathbf{X} \\boldsymbol{\\beta}$$\nwhere:\n$$\\mathbf{y} = \\begin{pmatrix} 1/\\tau_1 \\\\ 1/\\tau_2 \\\\ \\vdots \\\\ 1/\\tau_N \\end{pmatrix}, \\quad \\mathbf{X} = \\begin{pmatrix} n_1 & n_1^2 \\\\ n_2 & n_2^2 \\\\ \\vdots & \\vdots \\\\ n_N & n_N^2 \\end{pmatrix}, \\quad \\boldsymbol{\\beta} = \\begin{pmatrix} B \\\\ C \\end{pmatrix}$$\nThe goal is to find the vector $\\boldsymbol{\\beta}$ that minimizes the sum of squared residuals, $S = ||\\mathbf{y} - \\mathbf{X}\\boldsymbol{\\beta}||^2$. The standard solution to this problem is given by the normal equations, $\\boldsymbol{\\beta} = (\\mathbf{X}^T \\mathbf{X})^{-1} \\mathbf{X}^T \\mathbf{y}$. For superior numerical stability, particularly when columns of $\\mathbf{X}$ are nearly collinear, a direct solution via QR decomposition or Singular Value Decomposition (SVD) is preferred over explicitly computing the inverse. A standard numerical linear algebra library routine, such as `numpy.linalg.lstsq`, implements such a robust solution. The algorithm is as follows:\n$1$. For a given set of $N$ data points $(n_i, \\tau_i)$, construct the $N \\times 1$ vector $\\mathbf{y}$ with elements $y_i = 1/\\tau_i$.\n$2$. Construct the $N \\times 2$ design matrix $\\mathbf{X}$, where the first column contains the densities $n_i$ and the second column contains the densities squared, $n_i^2$.\n$3$. Solve the linear system $\\mathbf{X}\\boldsymbol{\\beta} = \\mathbf{y}$ for $\\boldsymbol{\\beta}$ using a least squares solver.\n$4$. The resulting solution vector $\\boldsymbol{\\beta}$ contains the estimates for $B$ and $C$. The problem specifies units of $\\mathrm{cm}^{-3}$ for density and $\\mathrm{s}$ for lifetime. Our derived equation is dimensionally consistent, and using these units directly will yield $B$ in $\\mathrm{cm}^3\\!/\\!\\mathrm{s}$ and $C$ in $\\mathrm{cm}^6\\!/\\!\\mathrm{s}$, as required.\n\nThird, we establish the procedure to evaluate the \"radiatively limited\" criterion. This criterion is defined as the fraction of radiative recombination, $f_i$, being at least $0.8$ for all densities $n_i$ in the measured set.\nThe fraction $f_i$ is the ratio of the radiative recombination rate to the total recombination rate:\n$$f_i = \\frac{R_{\\mathrm{rad}, i}}{R_{\\mathrm{tot}, i}} = \\frac{B n_i^2}{B n_i^2 + C n_i^3}$$\nThis simplifies to:\n$$f_i = \\frac{B}{B + C n_i}$$\nThe algorithm is:\n$1$. Using the fitted parameters $B$ and $C$.\n$2$. For each density $n_i$ in the input data set, compute the fraction $f_i$.\n$3$. The criterion for being radiatively limited is that $f_i \\ge 0.8$ for all $i = 1, \\dots, N$. To handle potential floating-point inaccuracies, the condition is relaxed to $f_i \\ge 0.8 - \\epsilon$, where the tolerance $\\epsilon$ is given as $10^{-9}$.\n$4$. A boolean flag is set to `True` if the condition holds for all points, and `False` otherwise. This check must be performed for each test case using its specific density values.\nThe combination of these three derived procedures provides a complete and robust methodology to solve the problem.", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the problem of extracting recombination coefficients from lifetime data\n    for multiple test cases and formats the output as specified.\n    \"\"\"\n    \n    # Test suite (densities in cm^-3, lifetimes in s)\n    test_cases = [\n        # Test case A (happy-path, broad density range)\n        (\n            [1.0e15, 3.0e15, 1.0e16, 3.0e16, 1.0e17, 3.0e17, 1.0e18],\n            [9.999000099990001e-6, 3.332700329703039e-6, 9.99000999000999e-7, 3.323309403799602e-7, 9.900990099009901e-8, 3.236245954692557e-8, 9.090909090909091e-9]\n        ),\n        # Test case B (Auger-dominated at high injection)\n        (\n            [1.0e16, 3.0e16, 1.0e17, 3.0e17, 1.0e18],\n            [9.523809523809524e-7, 2.898550724637681e-7, 6.666666666666667e-8, 1.3333333333333334e-8, 1.6666666666666667e-9]\n        ),\n        # Test case C (boundary near the radiative threshold)\n        (\n            [1.0e16, 3.0e16, 1.0e17, 3.0e17, 1.0e18],\n            [9.975062344139651e-7, 3.3078880407124685e-7, 9.75609756097561e-8, 3.1007751937984496e-8, 8.0e-9]\n        )\n    ]\n\n    results = []\n    for densities, lifetimes in test_cases:\n        # Convert input lists to numpy arrays for vectorized operations\n        n_arr = np.array(densities, dtype=np.float64)\n        tau_arr = np.array(lifetimes, dtype=np.float64)\n\n        # The model is 1/tau = B*n + C*n^2. This is a linear system y = X*beta.\n        # y = 1/tau\n        y = 1.0 / tau_arr\n        \n        # X is the design matrix with columns [n, n^2]\n        X = np.vstack([n_arr, n_arr**2]).T\n        \n        # Solve the linear least squares problem X*beta = y for beta = [B, C]\n        # np.linalg.lstsq is a robust solver.\n        beta, _, _, _ = np.linalg.lstsq(X, y, rcond=None)\n        B, C = beta[0], beta[1]\n\n        # Evaluate the \"radiatively limited\" criterion.\n        # The fraction of radiative recombination is f = B / (B + C*n).\n        # The criterion is f_i >= 0.8 for all densities n_i in the set.\n        # A tolerance is used to avoid floating-point ambiguity.\n        tolerance = 1e-9\n        radiative_threshold = 0.8\n        \n        # The denominator B + C*n should be positive for physical recombination rates.\n        radiative_fractions = B / (B + C * n_arr)\n        \n        is_rad_limited = np.all(radiative_fractions >= radiative_threshold - tolerance)\n\n        # Store the results for this test case\n        results.append([B, C, is_rad_limited])\n\n    # Format the final output string according to the strict specification:\n    # [[B_A,C_A,flag_A],[B_B,C_B,flag_B],[B_C,C_C,flag_C]] with no spaces.\n    string_parts = []\n    for b_val, c_val, flag_val in results:\n        # f-string formatting of a boolean gives 'True' or 'False' as required.\n        string_parts.append(f\"[{b_val},{c_val},{str(flag_val).lower()}]\")\n    \n    final_output = f\"[{','.join(string_parts)}]\"\n    \n    print(final_output)\n\n# The original problem asked for a direct print of the boolean, which in Python\n# would be 'True' or 'False'. The example format shows 'flag_A', implying\n# a variable name. The prompt also says \"boolean\". Python's default string\n# representation for booleans is capitalized. To be safe and ensure lowercase\n# `true`/`false` if that is the unstated expectation, I've added `.lower()`.\n# If the literal Python output 'True'/'False' is desired, `.lower()` should be removed.\n# Re-reading the prompt: \"For example, the output format should be like [[B_A,C_A,flag_A]...]\"\n# This is ambiguous. But it also says `[B,C,radiatively_limited]`. `radiatively_limited`\n# is the name of my boolean variable. Standard JSON/most other languages use lowercase\n# booleans. Let's stick with the default Python representation for simplicity, as it is\n# the most direct interpretation of \"return ... the radiatively limited boolean\".\n# The final code submitted will use `str(flag_val)` without `.lower()`.\n\ndef solve_final():\n    test_cases = [\n        ([1.0e15, 3.0e15, 1.0e16, 3.0e16, 1.0e17, 3.0e17, 1.0e18], [9.999000099990001e-6, 3.332700329703039e-6, 9.99000999000999e-7, 3.323309403799602e-7, 9.900990099009901e-8, 3.236245954692557e-8, 9.090909090909091e-9]),\n        ([1.0e16, 3.0e16, 1.0e17, 3.0e17, 1.0e18], [9.523809523809524e-7, 2.898550724637681e-7, 6.666666666666667e-8, 1.3333333333333334e-8, 1.6666666666666667e-9]),\n        ([1.0e16, 3.0e16, 1.0e17, 3.0e17, 1.0e18], [9.975062344139651e-7, 3.3078880407124685e-7, 9.75609756097561e-8, 3.1007751937984496e-8, 8.0e-9])\n    ]\n    results = []\n    for densities, lifetimes in test_cases:\n        n_arr = np.array(densities, dtype=np.float64)\n        tau_arr = np.array(lifetimes, dtype=np.float64)\n        y = 1.0 / tau_arr\n        X = np.vstack([n_arr, n_arr**2]).T\n        beta, _, _, _ = np.linalg.lstsq(X, y, rcond=None)\n        B, C = beta[0], beta[1]\n        tolerance = 1e-9\n        radiative_threshold = 0.8\n        radiative_fractions = B / (B + C * n_arr)\n        is_rad_limited = np.all(radiative_fractions >= radiative_threshold - tolerance)\n        results.append(f\"[{B},{C},{str(is_rad_limited)}]\")\n    print(f\"[{','.join(results)}]\")\n\n# Running the code to get the actual output.\n# Case A: B=1.0e-10, C=1.0e-29. f(1e18) = 1e-10/(1e-10 + 1e-29*1e18) = 1e-10/(1e-10 + 1e-11) = 1/1.1 = 0.9. f(1e15) is even closer to 1. So True.\n# Case B: B=1.0e-10, C=6.0e-28. f(1e18) = 1e-10/(1e-10 + 6e-28*1e18) = 1e-10/(1e-10 + 6e-10) = 1/7 ~ 0.14. So False.\n# Case C: B=1.0e-10, C=2.5e-29. f(1e18) = 1e-10/(1e-10 + 2.5e-29*1e18) = 1e-10/(1e-10 + 2.5e-11) = 1/1.25 = 0.8. The condition is >= 0.8, so this point passes. f will be higher for lower n. So True.\n# The code should produce something like:\n# [[1.0000e-10,1.0000e-29,True],[1.0000e-10,6.0000e-28,False],[1.0000e-10,2.5000e-29,True]]\n# The final implementation should have `str(flag_val)` to get \"True\" or \"False\". Let's stick with that.\n# The format `radiatively_limited` is a variable name, and its value is a boolean. Python's `str()` on a boolean is correct.\n\n# The `solve()` function is defined but not called in the provided snippet. I will correct this to be a callable script.\n# Actually, the user provides a `solve()` function and then calls it. This is fine. The code is complete and runnable.\n# The `answer` tag should contain the complete runnable code as written.\n# The python code contains `>=` which will be properly escaped in the final XML output.\n# Looks good.\n```\n\n```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the problem of extracting recombination coefficients from lifetime data\n    for multiple test cases and formats the output as specified.\n    \"\"\"\n    \n    # Test suite (densities in cm^-3, lifetimes in s)\n    test_cases = [\n        # Test case A (happy-path, broad density range)\n        (\n            [1.0e15, 3.0e15, 1.0e16, 3.0e16, 1.0e17, 3.0e17, 1.0e18],\n            [9.999000099990001e-6, 3.332700329703039e-6, 9.99000999000999e-7, 3.323309403799602e-7, 9.900990099009901e-8, 3.236245954692557e-8, 9.090909090909091e-9]\n        ),\n        # Test case B (Auger-dominated at high injection)\n        (\n            [1.0e16, 3.0e16, 1.0e17, 3.0e17, 1.0e18],\n            [9.523809523809524e-7, 2.898550724637681e-7, 6.666666666666667e-8, 1.3333333333333334e-8, 1.6666666666666667e-9]\n        ),\n        # Test case C (boundary near the radiative threshold)\n        (\n            [1.0e16, 3.0e16, 1.0e17, 3.0e17, 1.0e18],\n            [9.975062344139651e-7, 3.3078880407124685e-7, 9.75609756097561e-8, 3.1007751937984496e-8, 8.0e-9]\n        )\n    ]\n\n    results = []\n    for densities, lifetimes in test_cases:\n        # Convert input lists to numpy arrays for vectorized operations\n        n_arr = np.array(densities, dtype=np.float64)\n        tau_arr = np.array(lifetimes, dtype=np.float64)\n\n        # The model is 1/tau = B*n + C*n^2. This is a linear system y = X*beta.\n        # y = 1/tau\n        y = 1.0 / tau_arr\n        \n        # X is the design matrix with columns [n, n^2]\n        X = np.vstack([n_arr, n_arr**2]).T\n        \n        # Solve the linear least squares problem X*beta = y for beta = [B, C]\n        # np.linalg.lstsq is a robust solver.\n        beta, _, _, _ = np.linalg.lstsq(X, y, rcond=None)\n        B, C = beta[0], beta[1]\n\n        # Evaluate the \"radiatively limited\" criterion.\n        # The fraction of radiative recombination is f = B / (B + C*n).\n        # The criterion is f_i >= 0.8 for all densities n_i in the set.\n        # A tolerance is used to avoid floating-point ambiguity.\n        tolerance = 1e-9\n        radiative_threshold = 0.8\n        \n        # The denominator B + C*n should be positive for physical recombination rates.\n        radiative_fractions = B / (B + C * n_arr)\n        \n        is_rad_limited = np.all(radiative_fractions >= radiative_threshold - tolerance)\n\n        # Store the results for this test case\n        results.append([B, C, is_rad_limited])\n\n    # Format the final output string according to the strict specification:\n    # [[B_A,C_A,flag_A],[B_B,C_B,flag_B],[B_C,C_C,flag_C]] with no spaces.\n    string_parts = []\n    for b_val, c_val, flag_val in results:\n        # f-string formatting of a boolean gives 'True' or 'False' as required.\n        string_parts.append(f\"[{b_val},{c_val},{str(flag_val)}]\")\n    \n    final_output = f\"[{','.join(string_parts)}]\"\n    \n    print(final_output)\n\nsolve()\n```", "id": "2846439"}]}