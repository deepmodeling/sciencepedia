{"hands_on_practices": [{"introduction": "Before the widespread use of computers, approximate analytical techniques like the von Kármán integral method were essential tools in fluid dynamics. This practice guides you through applying this method to the flat-plate boundary layer, using an assumed polynomial velocity profile to derive integral parameters like displacement thickness $\\delta^*$ and the shape factor $H$. By comparing your results with the known Blasius values, you will gain a hands-on appreciation for the power and accuracy of these integral techniques. [@problem_id:2500262]", "problem": "A steady, two-dimensional, incompressible laminar boundary layer forms over a semi-infinite flat plate aligned with a uniform free stream of speed $U$ in a fluid with kinematic viscosity $\\nu$ and dynamic viscosity $\\mu$, with zero imposed pressure gradient and constant properties. Let $x$ denote the downstream coordinate and $y$ the wall-normal coordinate. Assume that the streamwise velocity profile within the boundary layer of thickness $\\delta(x)$ is approximated by the quartic Pohlhausen polynomial\n$$\n\\frac{u(x,y)}{U} \\equiv \\phi(\\eta) = 2 \\eta - 2 \\eta^{3} + \\eta^{4}, \\quad \\eta \\equiv \\frac{y}{\\delta(x)} ,\n$$\nwhich satisfies the boundary conditions $u(x,0)=0$, $u(x,\\delta)=U$, and $\\partial u/\\partial y\\vert_{y=\\delta}=0$.\n\nStarting from the steady, two-dimensional boundary layer equations for mass and momentum, and using only these equations as the fundamental base, perform the following steps:\n- Derive the integral momentum relation appropriate to a zero-pressure-gradient flat-plate boundary layer and express it in terms of the momentum thickness $\\theta(x)$ and the wall shear stress $\\tau_{w}(x)$.\n- Using the assumed profile $\\phi(\\eta)$, compute the displacement thickness $\\delta^{*}(x)$ and the momentum thickness $\\theta(x)$ as exact multiples of $\\delta(x)$ by evaluating the required integrals over $0 \\le \\eta \\le 1$.\n- Compute the wall shear stress $\\tau_{w}(x)$ in terms of $\\delta(x)$ from the constitutive relation and the assumed profile, and then obtain and solve the ordinary differential equation for $\\delta(x)$ implied by the integral momentum relation.\n- Eliminate $\\delta(x)$ to express the displacement thickness in the form $\\delta^{*}(x) = C \\sqrt{\\nu x / U}$, identifying the dimensionless coefficient $C$.\n- Compute the shape factor $H \\equiv \\delta^{*}/\\theta$ predicted by the assumed profile.\n\nCompare your values with the exact Blasius similarity-solution results $\\delta^{*}_{\\mathrm{Bl}}(x)=1.7208 \\sqrt{\\nu x/U}$ and $H_{\\mathrm{Bl}} \\approx 2.59$ by discussing the sign and magnitude of the deviations, but do not report these comparisons in your final numeric answer.\n\nReport, as your final answer, the pair consisting of the coefficient $C$ and the shape factor $H$ as a row matrix $\\big[\\,C \\;\\; H\\,\\big]$. Round both reported numbers to four significant figures. Both $C$ and $H$ are dimensionless; do not include units in your reported pair.", "solution": "The problem as stated is scientifically grounded, well-posed, and objective. It presents a standard application of the integral boundary layer method, a valid and established approximation technique in fluid mechanics. All givens are consistent and sufficient for a unique solution. We proceed with the derivation as instructed.\n\nFirst, we derive the integral momentum relation. The steady, two-dimensional, incompressible boundary layer equations for zero pressure gradient are:\nContinuity:\n$$\n\\frac{\\partial u}{\\partial x} + \\frac{\\partial v}{\\partial y} = 0\n$$\nMomentum:\n$$\nu \\frac{\\partial u}{\\partial x} + v \\frac{\\partial u}{\\partial y} = \\nu \\frac{\\partial^2 u}{\\partial y^2}\n$$\nThe momentum equation can be rewritten using the product rule and the continuity equation:\n$$\n\\frac{\\partial (u^2)}{\\partial x} + \\frac{\\partial (uv)}{\\partial y} - u \\left(\\frac{\\partial u}{\\partial x} + \\frac{\\partial v}{\\partial y}\\right) = \\nu \\frac{\\partial^2 u}{\\partial y^2}\n$$\nThe term in parentheses is zero, leaving:\n$$\n\\frac{\\partial (u^2)}{\\partial x} + \\frac{\\partial (uv)}{\\partial y} = \\nu \\frac{\\partial^2 u}{\\partial y^2}\n$$\nWe integrate this equation with respect to $y$ from the wall ($y=0$) to a location $y=h$ outside the boundary layer, where $h > \\delta(x)$:\n$$\n\\int_0^h \\frac{\\partial (u^2)}{\\partial x} dy + \\int_0^h \\frac{\\partial (uv)}{\\partial y} dy = \\int_0^h \\nu \\frac{\\partial^2 u}{\\partial y^2} dy\n$$\nEvaluating each term:\nThe right-hand side is $\\nu \\left[\\frac{\\partial u}{\\partial y}\\right]_0^h = \\nu \\left(\\frac{\\partial u}{\\partial y}\\big|_{y=h} - \\frac{\\partial u}{\\partial y}\\big|_{y=0}\\right)$. Since $u=U$ for $y \\ge \\delta$, $\\frac{\\partial u}{\\partial y}\\big|_{y=h} = 0$. The wall shear stress is $\\tau_w = \\mu \\frac{\\partial u}{\\partial y}\\big|_{y=0}$. Thus, the RHS becomes $-\\nu \\frac{\\tau_w}{\\mu} = -\\frac{\\tau_w}{\\rho}$.\n\nThe second term on the left-hand side is $[uv]_0^h = u(h)v(h) - u(0)v(0)$. With no-slip ($u(0)=0$) and no-penetration ($v(0)=0$), this is $u(h)v(h) = U v(h)$. We find $v(h)$ by integrating the continuity equation: $v(h) = \\int_0^h \\frac{\\partial v}{\\partial y} dy = -\\int_0^h \\frac{\\partial u}{\\partial x} dy$.\n\nThe first term on the left-hand side is handled using the Leibniz integral rule, with $h$ being a constant: $\\int_0^h \\frac{\\partial (u^2)}{\\partial x} dy = \\frac{d}{dx} \\int_0^h u^2 dy$.\n\nCombining all terms:\n$$\n\\frac{d}{dx} \\int_0^h u^2 dy - U \\int_0^h \\frac{\\partial u}{\\partial x} dy = -\\frac{\\tau_w}{\\rho}\n$$\nRecognizing that $\\int_0^h \\frac{\\partial u}{\\partial x} dy = \\frac{d}{dx} \\int_0^h u \\, dy$:\n$$\n\\frac{d}{dx} \\int_0^h u^2 dy - U \\frac{d}{dx} \\int_0^h u \\, dy = -\\frac{\\tau_w}{\\rho}\n$$\n$$\n\\frac{d}{dx} \\int_0^h (u^2 - Uu) dy = -\\frac{\\tau_w}{\\rho} \\implies \\frac{d}{dx} \\int_0^h u(U-u) dy = \\frac{\\tau_w}{\\rho}\n$$\nThe momentum thickness $\\theta(x)$ is defined as $\\theta = \\int_0^\\infty \\frac{u}{U}(1-\\frac{u}{U})dy$. The integral can be written as $U^2 \\theta = \\int_0^\\infty u(U-u)dy$. Since the integrand is zero for $y > \\delta$, the upper limit can be taken as $\\infty$. Substituting this into the equation gives:\n$$\n\\frac{d}{dx}(U^2\\theta) = \\frac{\\tau_w}{\\rho}\n$$\nFor a constant free-stream velocity $U$, this simplifies to the required integral momentum relation:\n$$\n\\tau_w = \\rho U^2 \\frac{d\\theta}{dx}\n$$\nNext, we compute the displacement thickness $\\delta^*(x)$ and momentum thickness $\\theta(x)$ using the given velocity profile $\\frac{u}{U} = \\phi(\\eta) = 2\\eta - 2\\eta^3 + \\eta^4$, where $\\eta = y/\\delta(x)$.\n$$\n\\delta^* = \\int_0^\\infty \\left(1-\\frac{u}{U}\\right)dy = \\delta \\int_0^1 (1-\\phi(\\eta))d\\eta\n$$\n$$\n\\delta^* = \\delta \\int_0^1 (1 - 2\\eta + 2\\eta^3 - \\eta^4)d\\eta = \\delta \\left[\\eta - \\eta^2 + \\frac{2}{4}\\eta^4 - \\frac{1}{5}\\eta^5\\right]_0^1\n$$\n$$\n\\delta^* = \\delta \\left(1-1+\\frac{1}{2}-\\frac{1}{5}\\right) = \\delta\\left(\\frac{5-2}{10}\\right) = \\frac{3}{10}\\delta(x)\n$$\n$$\n\\theta = \\int_0^\\infty \\frac{u}{U}\\left(1-\\frac{u}{U}\\right)dy = \\delta \\int_0^1 \\phi(\\eta)(1-\\phi(\\eta))d\\eta = \\delta \\left( \\int_0^1 \\phi(\\eta)d\\eta - \\int_0^1 \\phi^2(\\eta)d\\eta \\right)\n$$\nFirst integral:\n$$\n\\int_0^1 \\phi(\\eta)d\\eta = \\int_0^1 (2\\eta - 2\\eta^3 + \\eta^4)d\\eta = \\left[\\eta^2 - \\frac{2}{4}\\eta^4 + \\frac{1}{5}\\eta^5\\right]_0^1 = 1-\\frac{1}{2}+\\frac{1}{5} = \\frac{7}{10}\n$$\nSecond integral:\n$$\n\\phi^2(\\eta) = (2\\eta - 2\\eta^3 + \\eta^4)^2 = 4\\eta^2 + 4\\eta^6 + \\eta^8 - 8\\eta^4 + 4\\eta^5 - 4\\eta^7\n$$\n$$\n\\int_0^1 \\phi^2(\\eta)d\\eta = \\int_0^1 (4\\eta^2 - 8\\eta^4 + 4\\eta^5 + 4\\eta^6 - 4\\eta^7 + \\eta^8) d\\eta\n$$\n$$\n= \\left[\\frac{4}{3}\\eta^3 - \\frac{8}{5}\\eta^5 + \\frac{4}{6}\\eta^6 + \\frac{4}{7}\\eta^7 - \\frac{4}{8}\\eta^8 + \\frac{1}{9}\\eta^9\\right]_0^1 = \\frac{4}{3} - \\frac{8}{5} + \\frac{2}{3} + \\frac{4}{7} - \\frac{1}{2} + \\frac{1}{9} = \\frac{367}{630}\n$$\nSo, for $\\theta$:\n$$\n\\theta = \\delta \\left(\\frac{7}{10} - \\frac{367}{630}\\right) = \\delta \\left(\\frac{441 - 367}{630}\\right) = \\frac{74}{630}\\delta(x) = \\frac{37}{315}\\delta(x)\n$$\nNow we compute the wall shear stress $\\tau_w$:\n$$\n\\tau_w = \\mu \\frac{\\partial u}{\\partial y}\\bigg|_{y=0} = \\mu \\frac{U}{\\delta} \\frac{d\\phi}{d\\eta}\\bigg|_{\\eta=0}\n$$\n$$\n\\frac{d\\phi}{d\\eta} = 2 - 6\\eta^2 + 4\\eta^3 \\implies \\frac{d\\phi}{d\\eta}\\bigg|_{\\eta=0} = 2\n$$\n$$\n\\tau_w = \\frac{2\\mu U}{\\delta}\n$$\nSubstitute $\\tau_w$ and $\\theta$ into the integral momentum equation:\n$$\n\\frac{2\\mu U}{\\delta} = \\rho U^2 \\frac{d}{dx}\\left(\\frac{37}{315}\\delta\\right) = \\rho U^2 \\frac{37}{315} \\frac{d\\delta}{dx}\n$$\nRearranging gives a differential equation for $\\delta(x)$:\n$$\n\\delta \\frac{d\\delta}{dx} = \\frac{2\\mu U}{\\rho U^2} \\frac{315}{37} = \\frac{2\\nu}{U} \\frac{315}{37} = \\frac{630}{37} \\frac{\\nu}{U}\n$$\nIntegrating with respect to $x$, assuming $\\delta(0)=0$:\n$$\n\\int_0^\\delta \\delta' d\\delta' = \\frac{630}{37}\\frac{\\nu}{U} \\int_0^x dx' \\implies \\frac{1}{2}\\delta^2 = \\frac{630}{37} \\frac{\\nu x}{U}\n$$\n$$\n\\delta^2(x) = \\frac{1260}{37} \\frac{\\nu x}{U} \\implies \\delta(x) = \\sqrt{\\frac{1260}{37}} \\sqrt{\\frac{\\nu x}{U}}\n$$\nWe can now express $\\delta^*(x)$ in the required form $\\delta^{*}(x) = C \\sqrt{\\nu x / U}$:\n$$\n\\delta^*(x) = \\frac{3}{10}\\delta(x) = \\frac{3}{10} \\sqrt{\\frac{1260}{37}} \\sqrt{\\frac{\\nu x}{U}}\n$$\nThe coefficient $C$ is therefore:\n$$\nC = \\frac{3}{10}\\sqrt{\\frac{1260}{37}} = \\frac{3}{10}\\sqrt{\\frac{36 \\times 35}{37}} = \\frac{3 \\times 6}{10}\\sqrt{\\frac{35}{37}} = \\frac{9}{5}\\sqrt{\\frac{35}{37}}\n$$\nNumerically, $C = 1.8 \\sqrt{35/37} \\approx 1.750675$. Rounded to four significant figures, $C = 1.751$.\n\nFinally, we compute the shape factor $H$:\n$$\nH = \\frac{\\delta^*}{\\theta} = \\frac{\\frac{3}{10}\\delta}{\\frac{37}{315}\\delta} = \\frac{3}{10} \\times \\frac{315}{37} = \\frac{945}{370} = \\frac{189}{74}\n$$\nNumerically, $H \\approx 2.554054$. Rounded to four significant figures, $H = 2.554$.\n\nAs requested, we compare these results to the exact Blasius similarity solution.\nThe calculated coefficient $C \\approx 1.751$ is larger than the exact value $C_{\\mathrm{Bl}} = 1.7208$. The deviation is positive, with a relative error of approximately $+1.74\\%$.\nThe calculated shape factor $H \\approx 2.554$ is smaller than the exact value $H_{\\mathrm{Bl}} \\approx 2.59$. The deviation is negative, with a relative error of approximately $-1.39\\%$. These deviations are small and are expected from an approximate integral method.\n\nThe required final values are the coefficient $C$ and the shape factor $H$, rounded to four significant figures.\n$C = 1.751$\n$H = 2.554$", "answer": "$$\n\\boxed{\\big[ 1.751 \\;\\; 2.554 \\big]}\n$$", "id": "2500262"}, {"introduction": "The Blasius equation itself does not have a simple analytical solution, requiring numerical methods to unlock its secrets. This practice introduces the 'shooting method,' a fundamental numerical technique for solving boundary value problems (BVPs) like the Blasius equation. You will learn to convert the third-order BVP into a system of first-order initial value problems (IVPs) and iteratively 'shoot' for the unknown wall condition that satisfies the far-field boundary condition. [@problem_id:2500302]", "problem": "You are asked to design and implement a numerical shooting method to compute the similarity solution for the two-dimensional, steady, incompressible laminar boundary layer that forms over a semi-infinite, flat plate aligned with a uniform free stream. The physical problem is governed by the boundary-layer approximation of the Navier–Stokes equations. Your tasks must start from the fundamental conservation laws and well-tested mathematical facts, and proceed by deriving the similarity reduction to a boundary-value ordinary differential equation, then converting it into a numerically tractable initial-value problem with an unknown initial slope that you determine by enforcing an asymptotic boundary condition.\n\nBegin with the following foundations.\n\n- The steady, two-dimensional, incompressible boundary-layer equations consist of the continuity equation and the streamwise momentum equation written in Cartesian coordinates:\n  - Continuity: $\\dfrac{\\partial u}{\\partial x} + \\dfrac{\\partial v}{\\partial y} = 0$.\n  - Streamwise momentum: $u \\dfrac{\\partial u}{\\partial x} + v \\dfrac{\\partial u}{\\partial y} = \\nu \\dfrac{\\partial^2 u}{\\partial y^2}$, where $\\nu$ is the kinematic viscosity and $u(x,y)$ and $v(x,y)$ are the velocity components in the streamwise and wall-normal directions, respectively.\n\n- The boundary conditions are no-slip and no-penetration at the wall and uniform free stream far from the wall:\n  - At the wall $y = 0$: $u(x,0) = 0$, $v(x,0) = 0$.\n  - As $y \\to \\infty$: $u(x,y) \\to U_\\infty$, where $U_\\infty$ is the constant free-stream speed.\n\nTasks to complete:\n\n1. From the governing equations and boundary conditions above, introduce a similarity variable and stream function of the form\n   - $\\psi(x,y) = \\sqrt{\\nu U_\\infty x}\\, f(\\eta)$,\n   - $\\eta = y \\sqrt{\\dfrac{U_\\infty}{\\nu x}}$,\n   and use the definitions $u = \\dfrac{\\partial \\psi}{\\partial y}$ and $v = -\\dfrac{\\partial \\psi}{\\partial x}$ to reduce the partial differential equations to a single boundary-value ordinary differential equation for $f(\\eta)$ together with boundary conditions in the similarity coordinate. You must provide the logical steps that justify that the resulting equation and boundary conditions are dimensionless and do not depend explicitly on $x$, $y$, or on physical parameters other than through the similarity variables.\n\n2. Convert the boundary-value ordinary differential equation into a system of first-order initial-value equations using auxiliary variables (for example, by defining $f = y_1$, $f' = y_2$, and $f'' = y_3$), and identify the unknown initial condition at $\\eta = 0$ that plays the role of a shooting parameter. Explain how this unknown can be tuned so that the far-field condition at $\\eta \\to \\infty$ is satisfied.\n\n3. Propose an update procedure based on a one-dimensional root-finding method that uses only function evaluations (no derivatives with respect to the shooting parameter are required) to adjust the unknown initial condition. Your update rule must be justified from first principles of root finding for nonlinear equations, and must terminate when a user-specified tolerance in the far-field residual is met. You should discuss how to handle the fact that the computational domain in $\\eta$ is truncated at a finite $\\eta_{\\max}$ and how this affects the residual definition.\n\n4. Implement your procedure as a complete program that:\n   - Integrates the initial-value system from $\\eta = 0$ to $\\eta = \\eta_{\\max}$ for any trial value of the shooting parameter.\n   - Evaluates a residual defined as the deviation of the streamwise similarity velocity derivative from its far-field target at $\\eta = \\eta_{\\max}$.\n   - Updates the shooting parameter iteratively until the residual magnitude is less than a specified tolerance.\n   - Reports, for each test case specified below, the converged shooting parameter value. All variables in the similarity formulation are nondimensional. No physical units are required, and none should be reported.\n\nTest suite specification:\n\nFor each test, you are given a quadruple $(\\eta_{\\max}, s_0, s_1, \\varepsilon)$, where:\n- $\\eta_{\\max}$ is the finite truncation of the similarity coordinate used to approximate the far field,\n- $s_0$ and $s_1$ are two distinct initial guesses for the shooting parameter $s = f''(0)$,\n- $\\varepsilon$ is the absolute tolerance for the far-field residual.\n\nYour program must solve the problem for the following test suite:\n- Test $1$: $(\\eta_{\\max}, s_0, s_1, \\varepsilon) = (10, 0.3, 0.35, 10^{-10})$.\n- Test $2$: $(\\eta_{\\max}, s_0, s_1, \\varepsilon) = (8, 0.1, 1.0, 10^{-8})$.\n- Test $3$: $(\\eta_{\\max}, s_0, s_1, \\varepsilon) = (6, 0.3, 0.35, 10^{-8})$.\n- Test $4$: $(\\eta_{\\max}, s_0, s_1, \\varepsilon) = (12, 0.33, 0.34, 10^{-12})$.\n\nOutput specification:\n\n- For each test, output only the converged value of the shooting parameter $s^\\star = f''(0)$ computed by your algorithm.\n- Aggregate the four floating-point results in the order of the tests into a single line, formatted exactly as a comma-separated list enclosed in square brackets, with each value rounded to exactly six digits after the decimal point, for example, $[0.111111,0.222222,0.333333,0.444444]$.", "solution": "The problem is subjected to validation.\n\n### Step 1: Extract Givens\n\nThe governing partial differential equations for a steady, two-dimensional, incompressible laminar boundary layer are provided:\n- Continuity: $\\dfrac{\\partial u}{\\partial x} + \\dfrac{\\partial v}{\\partial y} = 0$.\n- Streamwise momentum: $u \\dfrac{\\partial u}{\\partial x} + v \\dfrac{\\partial u}{\\partial y} = \\nu \\dfrac{\\partial^2 u}{\\partial y^2}$.\n\nThe boundary conditions are:\n- At the wall, $y = 0$: $u(x,0) = 0$ and $v(x,0) = 0$.\n- In the free stream, as $y \\to \\infty$: $u(x,y) \\to U_\\infty$.\n\nThe similarity transformation is defined by:\n- Stream function: $\\psi(x,y) = \\sqrt{\\nu U_\\infty x}\\, f(\\eta)$.\n- Similarity variable: $\\eta = y \\sqrt{\\dfrac{U_\\infty}{\\nu x}}$.\n\nThe velocity components are related to the stream function by:\n- $u = \\dfrac{\\partial \\psi}{\\partial y}$.\n- $v = -\\dfrac{\\partial \\psi}{\\partial x}$.\n\nThe tasks are:\n1.  Derive the similarity ordinary differential equation (ODE) for $f(\\eta)$ and its boundary conditions.\n2.  Convert the resulting boundary-value problem (BVP) into an initial-value problem (IVP) system and identify the shooting parameter.\n3.  Propose a derivative-free root-finding method (e.g., Secant method) to determine the shooting parameter.\n4.  Implement a program to solve for the shooting parameter $s = f''(0)$ for a given test suite.\n\nThe test suite is specified by quadruples $(\\eta_{\\max}, s_0, s_1, \\varepsilon)$:\n- Test $1$: $(10, 0.3, 0.35, 10^{-10})$.\n- Test $2$: $(8, 0.1, 1.0, 10^{-8})$.\n- Test $3$: $(6, 0.3, 0.35, 10^{-8})$.\n- Test $4$: $(12, 0.33, 0.34, 10^{-12})$.\n\nThe output must be the converged value of $f''(0)$ for each test case, rounded to six decimal places, in a specific list format.\n\n### Step 2: Validate Using Extracted Givens\n\n- **Scientifically Grounded**: The problem is a classic in fluid mechanics, describing the Blasius solution for a laminar boundary layer over a flat plate. The governing equations and boundary conditions are standard and fundamentally sound. This is a critical foundation of boundary-layer theory.\n- **Well-Posed**: The problem statement leads to the Blasius equation, which is a well-posed BVP known to have a unique, stable, and physically meaningful solution.\n- **Objective**: The problem is stated in precise, formal mathematical and physical language, free of ambiguity or subjective claims.\n- **Completeness**: All necessary equations, boundary conditions, definitions, and numerical parameters for the test cases are provided. The problem is self-contained.\n- **Consistency**: The provided information is internally consistent and does not contain contradictions. The tasks logically build upon one another, from theoretical derivation to numerical implementation.\n\nThe problem does not exhibit any of the flaws listed in the validation checklist. It is a standard, verifiable, and well-structured problem in computational fluid dynamics.\n\n### Step 3: Verdict and Action\n\nThe problem is **valid**. A solution will be provided.\n\n---\n\nHere is a step-by-step solution based on the principles of fluid mechanics and numerical analysis.\n\n**Task 1: Derivation of the Blasius Similarity Equation**\n\nThe objective is to reduce the governing partial differential equations to a single ordinary differential equation using the provided similarity transformation. We begin by expressing the velocity components $u$ and $v$ in terms of the similarity function $f(\\eta)$.\n\nThe similarity variable is $\\eta = y \\sqrt{\\frac{U_\\infty}{\\nu x}}$, and the stream function is $\\psi(x,y) = \\sqrt{\\nu U_\\infty x} f(\\eta)$. The prime notation, e.g., $f'$, will denote differentiation with respect to $\\eta$.\n\nFirst, we calculate the streamwise velocity component $u$:\n$$\nu = \\frac{\\partial \\psi}{\\partial y} = \\frac{\\partial}{\\partial y} \\left( \\sqrt{\\nu U_\\infty x} f(\\eta) \\right) = \\sqrt{\\nu U_\\infty x} \\frac{df}{d\\eta} \\frac{\\partial \\eta}{\\partial y}\n$$\nThe derivative of $\\eta$ with respect to $y$ is:\n$$\n\\frac{\\partial \\eta}{\\partial y} = \\sqrt{\\frac{U_\\infty}{\\nu x}}\n$$\nSubstituting this into the expression for $u$ gives:\n$$\nu = \\sqrt{\\nu U_\\infty x} f'(\\eta) \\sqrt{\\frac{U_\\infty}{\\nu x}} = U_\\infty f'(\\eta)\n$$\n\nNext, we calculate the wall-normal velocity component $v$. This is more involved as both terms in the product for $\\psi$ and the variable $\\eta$ itself depend on $x$:\n$$\nv = -\\frac{\\partial \\psi}{\\partial x} = -\\frac{\\partial}{\\partial x} \\left( \\sqrt{\\nu U_\\infty x} f(\\eta) \\right) = -\\left[ \\frac{\\partial(\\sqrt{\\nu U_\\infty x})}{\\partial x} f(\\eta) + \\sqrt{\\nu U_\\infty x} \\frac{\\partial(f(\\eta))}{\\partial x} \\right]\n$$\nThe derivatives are:\n$$\n\\frac{\\partial(\\sqrt{\\nu U_\\infty x})}{\\partial x} = \\sqrt{\\nu U_\\infty} \\frac{1}{2\\sqrt{x}} = \\frac{1}{2x} \\sqrt{\\nu U_\\infty x}\n$$\n$$\n\\frac{\\partial(f(\\eta))}{\\partial x} = \\frac{df}{d\\eta} \\frac{\\partial \\eta}{\\partial x} = f'(\\eta) \\frac{\\partial \\eta}{\\partial x}\n$$\n$$\n\\frac{\\partial \\eta}{\\partial x} = y \\sqrt{\\frac{U_\\infty}{\\nu}} \\left(-\\frac{1}{2} x^{-3/2}\\right) = -\\frac{1}{2x} \\left(y \\sqrt{\\frac{U_\\infty}{\\nu x}}\\right) = -\\frac{\\eta}{2x}\n$$\nSubstituting these back into the expression for $v$:\n$$\nv = -\\left[ \\frac{1}{2x} \\sqrt{\\nu U_\\infty x} f(\\eta) + \\sqrt{\\nu U_\\infty x} f'(\\eta) \\left(-\\frac{\\eta}{2x}\\right) \\right] = \\frac{1}{2} \\sqrt{\\frac{\\nu U_\\infty}{x}} \\left( \\eta f'(\\eta) - f(\\eta) \\right)\n$$\nThe continuity equation $\\frac{\\partial u}{\\partial x} + \\frac{\\partial v}{\\partial y} = 0$ is automatically satisfied by the definition of the stream function, as $\\frac{\\partial^2 \\psi}{\\partial x \\partial y} - \\frac{\\partial^2 \\psi}{\\partial y \\partial x} = 0$.\n\nNow, we compute the terms in the momentum equation:\n$$\n\\frac{\\partial u}{\\partial x} = \\frac{\\partial}{\\partial x} (U_\\infty f'(\\eta)) = U_\\infty f''(\\eta) \\frac{\\partial \\eta}{\\partial x} = U_\\infty f''(\\eta) \\left(-\\frac{\\eta}{2x}\\right) = -\\frac{U_\\infty \\eta}{2x} f''(\\eta)\n$$\n$$\n\\frac{\\partial u}{\\partial y} = \\frac{\\partial}{\\partial y} (U_\\infty f'(\\eta)) = U_\\infty f''(\\eta) \\frac{\\partial \\eta}{\\partial y} = U_\\infty f''(\\eta) \\sqrt{\\frac{U_\\infty}{\\nu x}}\n$$\n$$\n\\frac{\\partial^2 u}{\\partial y^2} = \\frac{\\partial}{\\partial y} \\left( U_\\infty f''(\\eta) \\sqrt{\\frac{U_\\infty}{\\nu x}} \\right) = U_\\infty f'''(\\eta) \\left(\\frac{\\partial \\eta}{\\partial y}\\right)^2 = U_\\infty f'''(\\eta) \\frac{U_\\infty}{\\nu x}\n$$\nSubstitute these expressions into the momentum equation $u \\frac{\\partial u}{\\partial x} + v \\frac{\\partial u}{\\partial y} = \\nu \\frac{\\partial^2 u}{\\partial y^2}$:\n$$\n(U_\\infty f') \\left(-\\frac{U_\\infty \\eta}{2x} f''\\right) + \\frac{1}{2} \\sqrt{\\frac{\\nu U_\\infty}{x}} (\\eta f' - f) \\left(U_\\infty f'' \\sqrt{\\frac{U_\\infty}{\\nu x}}\\right) = \\nu \\left(U_\\infty f''' \\frac{U_\\infty}{\\nu x}\\right)\n$$\nSimplifying the left-hand side (LHS):\n$$\n\\text{LHS} = -\\frac{U_\\infty^2}{2x} \\eta f' f'' + \\frac{1}{2} \\frac{U_\\infty^2}{x} (\\eta f' - f) f'' = \\frac{U_\\infty^2}{2x} (-\\eta f' f'' + \\eta f' f'' - f f'') = -\\frac{U_\\infty^2}{2x} f f''\n$$\nSimplifying the right-hand side (RHS):\n$$\n\\text{RHS} = \\frac{U_\\infty^2}{x} f'''\n$$\nEquating the simplified LHS and RHS:\n$$\n-\\frac{U_\\infty^2}{2x} f f'' = \\frac{U_\\infty^2}{x} f'''\n$$\nAfter canceling common terms $\\frac{U_\\infty^2}{x}$, we obtain the Blasius equation:\n$$\nf'''(\\eta) + \\frac{1}{2} f(\\eta) f''(\\eta) = 0\n$$\nThis is a third-order nonlinear ODE. The transformation is successful as the equation depends only on $\\eta$ and $f(\\eta)$, not on $x$, $y$, or the physical parameters.\n\nWe now transform the boundary conditions:\n- At the wall, $y=0$, which implies $\\eta = 0 \\sqrt{\\frac{U_\\infty}{\\nu x}} = 0$.\n  - $u(x,0) = 0 \\implies U_\\infty f'(0) = 0 \\implies f'(0) = 0$.\n  - $v(x,0) = 0 \\implies \\frac{1}{2} \\sqrt{\\frac{\\nu U_\\infty}{x}} (\\eta f'(0) - f(0))|_{\\eta=0} = 0 \\implies 0 - f(0) = 0 \\implies f(0) = 0$.\n- In the free stream, $y \\to \\infty$, which implies $\\eta \\to \\infty$.\n  - $u(x,y) \\to U_\\infty \\implies U_\\infty f'(\\eta) \\to U_\\infty \\implies f'(\\eta \\to \\infty) = 1$.\n\nThe complete boundary-value problem in the similarity coordinate is:\n$$\nf'''(\\eta) + \\frac{1}{2} f(\\eta) f''(\\eta) = 0\n$$\nsubject to:\n$$\nf(0) = 0, \\quad f'(0) = 0, \\quad f'(\\eta \\to \\infty) = 1\n$$\n\n**Task 2: Conversion to an Initial-Value Problem (IVP)**\n\nThe third-order BVP is converted into a system of three first-order ODEs. Let us define a state vector $\\mathbf{y}(\\eta) = [y_1(\\eta), y_2(\\eta), y_3(\\eta)]^T$, where:\n- $y_1(\\eta) = f(\\eta)$\n- $y_2(\\eta) = f'(\\eta)$\n- $y_3(\\eta) = f''(\\eta)$\n\nThe system of first-order ODEs is derived from these definitions and the Blasius equation:\n- $y_1' = f' = y_2$\n- $y_2' = f'' = y_3$\n- $y_3' = f''' = -\\frac{1}{2} f f'' = -\\frac{1}{2} y_1 y_3$\n\nThe boundary conditions at $\\eta = 0$ provide two initial conditions for this system:\n- $y_1(0) = f(0) = 0$\n- $y_2(0) = f'(0) = 0$\n\nTo solve this system as an IVP, we need a third initial condition, $y_3(0) = f''(0)$. This value is unknown. We must guess it. Let this shooting parameter be $s = f''(0) = y_3(0)$.\n\nThe IVP to be solved is:\n$$\n\\frac{d}{d\\eta} \\begin{pmatrix} y_1 \\\\ y_2 \\\\ y_3 \\end{pmatrix} = \\begin{pmatrix} y_2 \\\\ y_3 \\\\ -\\frac{1}{2} y_1 y_3 \\end{pmatrix}\n$$\nwith initial conditions at $\\eta=0$:\n$$\n\\mathbf{y}(0) = \\begin{pmatrix} 0 \\\\ 0 \\\\ s \\end{pmatrix}\n$$\nThe shooting method procedure is to guess a value for $s$, integrate the IVP from $\\eta=0$ to a large value $\\eta_{\\max}$ that approximates $\\infty$, and check if the boundary condition at infinity, $f'(\\infty) = 1$ (or $y_2(\\infty)=1$), is satisfied. We define a residual function $R(s)$:\n$$\nR(s) = y_2(\\eta_{\\max}; s) - 1\n$$\nwhere $y_2(\\eta_{\\max}; s)$ denotes the solution for $y_2$ at $\\eta_{\\max}$ obtained with the shooting parameter $s$. The goal is to find the value of $s$, let's call it $s^*$, such that $R(s^*) = 0$.\n\n**Task 3: Update Procedure for the Shooting Parameter**\n\nWe need to find the root $s^*$ of the nonlinear equation $R(s)=0$. The problem asks for a method that does not require the derivative $\\frac{dR}{ds}$. The Secant method is a suitable choice. It is a quasi-Newton method that approximates the derivative using a finite difference based on the two previous iterates.\n\nGiven two initial guesses for the shooting parameter, $s_0$ and $s_1$, the Secant method generates a sequence of approximations $\\{s_k\\}$ using the update rule:\n$$\ns_{k+1} = s_k - R(s_k) \\frac{s_k - s_{k-1}}{R(s_k) - R(s_{k-1})}\n$$\nThe algorithm proceeds as follows:\n1.  Choose two distinct initial guesses, $s_0$ and $s_1$, and a tolerance $\\varepsilon$.\n2.  Compute the residuals $R_0 = R(s_0)$ and $R_1 = R(s_1)$ by integrating the IVP for each guess.\n3.  For $k=1, 2, ...$:\n    a. Calculate the next guess $s_{k+1}$ using the formula above.\n    b. Integrate the IVP with $s = s_{k+1}$ to find the new residual $R_{k+1} = R(s_{k+1})$.\n    c. If $|R_{k+1}| < \\varepsilon$, the process has converged. The solution is $s^* \\approx s_{k+1}$.\n    d. Otherwise, update the values for the next iteration: $s_k \\to s_{k+1}$, $s_{k-1} \\to s_k$, and similarly for the residuals.\n\nThe domain is truncated at a finite $\\eta_{\\max}$ because numerical integration cannot proceed to infinity. This approximation is valid if $\\eta_{\\max}$ is chosen large enough so that the boundary layer flow has effectively reached the free-stream velocity, i.e., $f'(\\eta) \\approx 1$ and $f''(\\eta) \\approx 0$ for $\\eta \\ge \\eta_{\\max}$. The test cases provide values for $\\eta_{\\max}$ ($6, 8, 10, 12$), which are known to be sufficient for the required accuracies. The residual is therefore defined at this finite boundary: $R(s) = y_2(\\eta_{\\max}; s) - 1$. The algorithm finds the value of $s$ that satisfies the far-field condition at this truncated boundary.\n\n**Task 4: Program Implementation**\n\nThe logic described above is implemented in a Python program. We use `scipy.integrate.solve_ivp` to integrate the system of ODEs and a loop to implement the Secant method for root finding. The final converged values of the shooting parameter $s^* = f''(0)$ are reported for each test case.", "answer": "```python\nimport numpy as np\nfrom scipy.integrate import solve_ivp\n\ndef solve():\n    \"\"\"\n    Solves the Blasius boundary layer problem for a given test suite\n    using a numerical shooting method based on the Secant algorithm.\n    \"\"\"\n\n    def blasius_solver(eta_max: float, s0: float, s1: float, tol: float) -> float:\n        \"\"\"\n        Finds the shooting parameter s = f''(0) for the Blasius equation.\n\n        Args:\n            eta_max: The finite truncation of the similarity coordinate.\n            s0: The first initial guess for the shooting parameter s.\n            s1: The second initial guess for the shooting parameter s.\n            tol: The absolute tolerance for the far-field residual.\n\n        Returns:\n            The converged value of the shooting parameter s.\n        \"\"\"\n\n        def ode_system(eta, y):\n            \"\"\"\n            Defines the system of first-order ODEs for the Blasius problem.\n            y[0] = f, y[1] = f', y[2] = f''\n            \"\"\"\n            _f, _f_prime, _f_double_prime = y\n            return [\n                _f_prime,\n                _f_double_prime,\n                -0.5 * _f * _f_double_prime,\n            ]\n\n        memo = {}\n        def get_residual(s: float) -> float:\n            \"\"\"\n            Calculates the residual R(s) = f'(eta_max; s) - 1.\n            It integrates the ODE system for a given shooting parameter s.\n            \"\"\"\n            if s in memo:\n                return memo[s]\n            \n            y0 = [0.0, 0.0, s]\n            sol = solve_ivp(\n                ode_system,\n                [0, eta_max],\n                y0,\n                dense_output=True,\n                rtol=1e-13, # Use high-precision integration\n                atol=1e-13,\n            )\n            \n            # The value of f'(eta_max) is the second component of the solution vector\n            # at the last time point.\n            f_prime_at_eta_max = sol.y[1, -1]\n            residual = f_prime_at_eta_max - 1.0\n            memo[s] = residual\n            return residual\n\n        # Secant Method Implementation\n        s_prev, s_curr = s0, s1\n        r_prev = get_residual(s_prev)\n        r_curr = get_residual(s_curr)\n        \n        # Limit iterations to prevent infinite loops in case of non-convergence\n        max_iter = 50 \n        for _ in range(max_iter):\n            if abs(r_curr)  tol:\n                return s_curr\n\n            # Avoid division by zero, though unlikely for this problem\n            if abs(r_curr - r_prev)  1e-14:\n                # If residuals are too close, stop to avoid numerical instability.\n                # This may happen if tolerance is too low or guesses are bad.\n                break\n\n            s_next = s_curr - r_curr * (s_curr - s_prev) / (r_curr - r_prev)\n            \n            s_prev, s_curr = s_curr, s_next\n            r_prev, r_curr = r_curr, get_residual(s_curr)\n\n        return s_curr\n\n    # Define the test cases from the problem statement.\n    test_cases = [\n        (10.0, 0.3, 0.35, 1e-10),\n        (8.0, 0.1, 1.0, 1e-8),\n        (6.0, 0.3, 0.35, 1e-8),\n        (12.0, 0.33, 0.34, 1e-12),\n    ]\n\n    results = []\n    for case in test_cases:\n        eta_max_val, s0_val, s1_val, tol_val = case\n        converged_s = blasius_solver(eta_max_val, s0_val, s1_val, tol_val)\n        results.append(converged_s)\n\n    # Format the final output string as specified.\n    # Each value must be rounded to exactly six digits after the decimal point.\n    output_str = ','.join([f\"{res:.6f}\" for res in results])\n    print(f\"[{output_str}]\")\n\nsolve()\n```", "id": "2500302"}, {"introduction": "A numerical solution is only as reliable as our understanding of its inherent errors. This practice moves beyond simply finding a solution to critically assessing its accuracy, focusing on the truncation error introduced by approximating an infinite domain with a finite one, $\\eta_{\\max}$. You will implement a robust shooting method and develop quantitative criteria to ensure that your numerical results for key engineering quantities, like wall shear, are not compromised by this necessary approximation. [@problem_id:2500305]", "problem": "Consider steady, two-dimensional, incompressible flow of a Newtonian fluid past an isothermal, semi-infinite flat plate aligned with a uniform free stream. The laminar boundary layer is modeled by the Prandtl boundary layer equations coupled with the continuity equation. Introduce a streamfunction to satisfy continuity, and a similarity variable to collapse the partial differential equations into a single ordinary differential equation with appropriate boundary conditions at the wall and as the normal coordinate tends to infinity. Work entirely in the resulting dimensionless similarity variables so that no physical units appear.\n\nYour goal is to quantify and control the truncation error introduced when the semi-infinite similarity domain is truncated at a finite similarity coordinate. Specifically:\n\n- Start from the steady, two-dimensional, incompressible boundary layer equations and the definition of a similarity streamfunction to obtain a boundary value problem on a semi-infinite domain for a dimensionless function of a single dimensionless similarity variable. Do not assume any shortcut formulas: proceed from the governing equations and appropriate similarity assumptions to establish the resulting ordinary differential equation and boundary conditions.\n\n- Using this boundary value problem as the mathematical ground truth, define a truncated problem on the finite interval $\\left[0,\\eta_{\\max}\\right]$ for a chosen truncation boundary $\\eta_{\\max}$. Then, devise a numerical method that transforms the boundary value problem into an initial value problem with an unknown wall-curvature parameter, which is determined so that the far-field boundary condition is enforced at $\\eta=\\eta_{\\max}$. The numerical method should integrate the ordinary differential equation from $\\eta=0$ to $\\eta=\\eta_{\\max}$ for candidate values of the unknown wall-curvature parameter and adjust that parameter until the far-field boundary condition at $\\eta_{\\max}$ is satisfied to within numerical tolerance.\n\n- The truncation error arises because the true boundary condition applies at $\\eta\\to\\infty$ whereas the computed solution enforces it at $\\eta=\\eta_{\\max}$. Propose a criterion, expressed purely in terms of the solution on $\\left[0,\\eta_{\\max}\\right]$ and a reference computation on a much larger truncated domain $\\left[0,\\eta_{\\mathrm{ref}}\\right]$ with $\\eta_{\\mathrm{ref}}\\gg \\eta_{\\max}$, that ensures the truncation error is negligible for quantities of engineering interest such as the dimensionless wall shear (i.e., the wall-curvature parameter). Your criterion must involve:\n  - A tail smallness condition, requiring that the magnitude of the dimensionless second derivative at the truncation boundary, $\\left|f''\\left(\\eta_{\\max}\\right)\\right|$, does not exceed a prescribed tolerance $\\varepsilon_{\\mathrm{tail}}$.\n  - A stability condition on the dimensionless wall-curvature parameter, requiring that the relative deviation of the truncated-domain value from a reference value, $\\left|s\\left(\\eta_{\\max}\\right)-s\\left(\\eta_{\\mathrm{ref}}\\right)\\right|/s\\left(\\eta_{\\mathrm{ref}}\\right)$, does not exceed a prescribed tolerance $\\varepsilon_{\\mathrm{rel}}$.\n\n- Implement a robust numerical algorithm that:\n  1. Computes a high-accuracy reference value $s\\left(\\eta_{\\mathrm{ref}}\\right)$ on a very large domain $\\left[0,\\eta_{\\mathrm{ref}}\\right]$.\n  2. For each test case $\\left(\\eta_{\\max},\\varepsilon_{\\mathrm{tail}},\\varepsilon_{\\mathrm{rel}}\\right)$, computes the truncated-domain value $s\\left(\\eta_{\\max}\\right)$ by shooting so that the far-field boundary condition is enforced at $\\eta=\\eta_{\\max}$, evaluates $\\left|f''\\left(\\eta_{\\max}\\right)\\right|$, and tests the two inequalities\n     $$\\left|f''\\left(\\eta_{\\max}\\right)\\right|\\le \\varepsilon_{\\mathrm{tail}},\\qquad \\frac{\\left|s\\left(\\eta_{\\max}\\right)-s\\left(\\eta_{\\mathrm{ref}}\\right)\\right|}{s\\left(\\eta_{\\mathrm{ref}}\\right)}\\le \\varepsilon_{\\mathrm{rel}}.$$\n  3. Returns a boolean indicating whether both inequalities are satisfied.\n\n- Design the shooting method with an automatic bracketing of the wall-curvature parameter so that it converges for all test cases. Use an adaptive-step, variable-order ordinary differential equation integrator with stringent absolute and relative tolerances to ensure that any observed differences are attributable to truncation, not time-stepping error.\n\nTest Suite and Answer Specification:\n- Use the following five test cases, each specified by $\\left(\\eta_{\\max},\\varepsilon_{\\mathrm{tail}},\\varepsilon_{\\mathrm{rel}}\\right)$:\n  1. $\\left(4.0,\\,10^{-3},\\,10^{-3}\\right)$\n  2. $\\left(6.0,\\,5\\times 10^{-4},\\,2\\times 10^{-4}\\right)$\n  3. $\\left(8.0,\\,10^{-5},\\,10^{-4}\\right)$\n  4. $\\left(10.0,\\,10^{-6},\\,10^{-5}\\right)$\n  5. $\\left(12.0,\\,10^{-7},\\,5\\times 10^{-6}\\right)$\n\n- Choose a single reference truncation $\\eta_{\\mathrm{ref}}=30.0$ and corresponding solver tolerances that justify treating $s\\left(\\eta_{\\mathrm{ref}}\\right)$ as the reference value.\n\n- Your program should produce a single line of output containing the boolean results for the five test cases as a comma-separated list enclosed in square brackets, for example, $\\left[\\mathrm{True},\\mathrm{False},\\mathrm{True},\\mathrm{True},\\mathrm{False}\\right]$ but printed using standard programming language boolean literals and list formatting, that is, exactly like $[\\mathrm{True},\\mathrm{False},\\mathrm{True},\\mathrm{True},\\mathrm{False}]$.\n\nAll mathematical symbols and numbers must be interpreted as dimensionless quantities defined by the similarity transformation you derive. No angles, physical units, or percentage signs should appear anywhere in your derivation or output. All numerical tolerances must be implemented exactly as specified above and compared with absolute or relative values as appropriate. The algorithmic components must be described and implemented in a manner that is universally applicable in any modern programming language.", "solution": "The problem as stated is valid. It is a well-posed problem in computational fluid dynamics, grounded in the established principles of boundary layer theory. The problem is scientifically sound, objective, and contains all necessary information to proceed with a unique and verifiable numerical solution. It poses a non-trivial challenge in implementing a robust numerical method and interpreting the results in the context of truncation error analysis. We will now proceed with the solution.\n\nThe physical system is a steady, two-dimensional, incompressible laminar flow of a Newtonian fluid over a semi-infinite flat plate. The governing equations under the Prandtl boundary layer approximation are the continuity equation and the $x$-momentum equation:\n$$\n\\frac{\\partial u}{\\partial x} + \\frac{\\partial v}{\\partial y} = 0\n$$\n$$\nu \\frac{\\partial u}{\\partial x} + v \\frac{\\partial u}{\\partial y} = \\nu \\frac{\\partial^2 u}{\\partial y^2}\n$$\nHere, $u$ and $v$ are the velocity components in the $x$ (streamwise) and $y$ (wall-normal) directions, respectively, and $\\nu$ is the kinematic viscosity of the fluid. The boundary conditions are no-slip and impermeability at the plate surface ($y=0$), and matching with the uniform free stream velocity $U_\\infty$ far from the plate ($y \\to \\infty$):\n$$\nu(x, 0) = 0, \\quad v(x, 0) = 0\n$$\n$$\nu(x, y \\to \\infty) = U_\\infty\n$$\nTo satisfy the continuity equation identically, we introduce a streamfunction $\\psi(x,y)$ such that:\n$$\nu = \\frac{\\partial \\psi}{\\partial y}, \\qquad v = - \\frac{\\partial \\psi}{\\partial x}\n$$\nSubstituting these into the momentum equation yields a single third-order partial differential equation for $\\psi$:\n$$\n\\frac{\\partial \\psi}{\\partial y} \\frac{\\partial^2 \\psi}{\\partial x \\partial y} - \\frac{\\partial \\psi}{\\partial x} \\frac{\\partial^2 \\psi}{\\partial y^2} = \\nu \\frac{\\partial^3 \\psi}{\\partial y^3}\n$$\nThe problem lacks an intrinsic length scale, which suggests the existence of a similarity solution. We introduce a dimensionless similarity variable $\\eta$ and a dimensionless streamfunction $f(\\eta)$:\n$$\n\\eta = y \\sqrt{\\frac{U_\\infty}{\\nu x}}\n$$\n$$\n\\psi(x, y) = \\sqrt{\\nu x U_\\infty} f(\\eta)\n$$\nWe now transform the velocity components and their derivatives into the similarity coordinates $(\\eta, f)$. The chain rule is applied systematically.\nThe velocity component $u$ is:\n$$\nu = \\frac{\\partial \\psi}{\\partial y} = \\frac{\\partial \\psi}{\\partial \\eta}\\frac{\\partial \\eta}{\\partial y} = \\left(\\sqrt{\\nu x U_\\infty} f'(\\eta)\\right) \\left(\\sqrt{\\frac{U_\\infty}{\\nu x}}\\right) = U_\\infty f'(\\eta)\n$$\nThe velocity component $v$ is:\n$$\nv = - \\frac{\\partial \\psi}{\\partial x} = - \\left( \\frac{\\partial}{\\partial x}\\left(\\sqrt{\\nu x U_\\infty}\\right) f(\\eta) + \\sqrt{\\nu x U_\\infty} \\frac{\\partial}{\\partial x}(f(\\eta)) \\right) \\\\ = - \\left( \\frac{1}{2} \\sqrt{\\frac{\\nu U_\\infty}{x}} f(\\eta) + \\sqrt{\\nu x U_\\infty} f'(\\eta) \\frac{\\partial \\eta}{\\partial x} \\right)\n$$\nSince $\\frac{\\partial \\eta}{\\partial x} = y \\sqrt{\\frac{U_\\infty}{\\nu}} \\left(-\\frac{1}{2} x^{-3/2}\\right) = -\\frac{1}{2x} \\left(y \\sqrt{\\frac{U_\\infty}{\\nu x}}\\right) = -\\frac{\\eta}{2x}$, we find:\n$$\nv = - \\frac{1}{2} \\sqrt{\\frac{\\nu U_\\infty}{x}} f(\\eta) - \\sqrt{\\nu x U_\\infty} f'(\\eta) \\left(-\\frac{\\eta}{2x}\\right) = \\frac{1}{2} \\sqrt{\\frac{\\nu U_\\infty}{x}} \\left( \\eta f'(\\eta) - f(\\eta) \\right)\n$$\nNext, we compute the derivatives appearing in the momentum equation:\n$$\n\\frac{\\partial u}{\\partial x} = \\frac{\\partial}{\\partial x} (U_\\infty f'(\\eta)) = U_\\infty f''(\\eta) \\frac{\\partial \\eta}{\\partial x} = U_\\infty f''(\\eta) \\left(-\\frac{\\eta}{2x}\\right) = -\\frac{U_\\infty \\eta}{2x} f''(\\eta)\n$$\n$$\n\\frac{\\partial u}{\\partial y} = \\frac{\\partial}{\\partial y} (U_\\infty f'(\\eta)) = U_\\infty f''(\\eta) \\frac{\\partial \\eta}{\\partial y} = U_\\infty f''(\\eta) \\sqrt{\\frac{U_\\infty}{\\nu x}}\n$$\n$$\n\\frac{\\partial^2 u}{\\partial y^2} = \\frac{\\partial}{\\partial y} \\left( U_\\infty f''(\\eta) \\sqrt{\\frac{U_\\infty}{\\nu x}} \\right) = U_\\infty \\sqrt{\\frac{U_\\infty}{\\nu x}} f'''(\\eta) \\frac{\\partial \\eta}{\\partial y} = \\frac{U_\\infty^2}{\\nu x} f'''(\\eta)\n$$\nSubstituting these expressions back into the momentum equation $u \\frac{\\partial u}{\\partial x} + v \\frac{\\partial u}{\\partial y} = \\nu \\frac{\\partial^2 u}{\\partial y^2}$:\n$$\n\\left(U_\\infty f'(\\eta)\\right) \\left(-\\frac{U_\\infty \\eta}{2x} f''(\\eta)\\right) + \\left(\\frac{1}{2} \\sqrt{\\frac{\\nu U_\\infty}{x}} \\left( \\eta f'(\\eta) - f(\\eta) \\right)\\right) \\left(U_\\infty f''(\\eta) \\sqrt{\\frac{U_\\infty}{\\nu x}}\\right) = \\nu \\left(\\frac{U_\\infty^2}{\\nu x} f'''(\\eta)\\right)\n$$\nSimplifying this equation by dividing all terms by the common factor $\\frac{U_\\infty^2}{x}$:\n$$\n-\\frac{1}{2} \\eta f'(\\eta) f''(\\eta) + \\frac{1}{2} \\left( \\eta f'(\\eta) - f(\\eta) \\right) f''(\\eta) = f'''(\\eta)\n$$\nThe terms involving $\\eta f'(\\eta) f''(\\eta)$ cancel, leaving the Blasius equation, a third-order ordinary differential equation:\n$$\n2 f'''(\\eta) + f(\\eta) f''(\\eta) = 0\n$$\nThe boundary conditions are transformed as well:\n1.  $u(x,0) = 0 \\implies U_\\infty f'(0) = 0 \\implies f'(0) = 0$.\n2.  $v(x,0) = 0 \\implies \\frac{1}{2} \\sqrt{\\frac{\\nu U_\\infty}{x}} (0 \\cdot f'(0) - f(0)) = 0 \\implies f(0) = 0$.\n3.  $u(x, y \\to \\infty) = U_\\infty \\implies U_\\infty f'(\\eta \\to \\infty) = U_\\infty \\implies f'(\\infty) = 1$.\n\nThe problem is thus reduced to a boundary value problem (BVP) on a semi-infinite domain $[0, \\infty)$:\n$$\n2 f''' + f f'' = 0, \\quad f(0) = 0, \\quad f'(0) = 0, \\quad f'(\\infty) = 1\n$$\nFor a numerical solution, we truncate the domain to $[0, \\eta_{\\max}]$ and apply the far-field condition at $\\eta_{\\max}$:\n$$\nf'(\\eta_{\\max}) = 1\n$$\nThis BVP is solved using a shooting method. We convert the BVP into an initial value problem (IVP) by guessing the unknown initial condition $f''(0)$, which we denote by $s$. The IVP is:\n$$\n2 f''' + f f'' = 0, \\quad f(0) = 0, \\quad f'(0) = 0, \\quad f''(0) = s\n$$\nTo integrate this numerically, we define a state vector $\\mathbf{y}(\\eta) = [y_1(\\eta), y_2(\\eta), y_3(\\eta)]^T = [f(\\eta), f'(\\eta), f''(\\eta)]^T$. The third-order ODE is rewritten as a system of three first-order ODEs:\n$$\n\\frac{d\\mathbf{y}}{d\\eta} = \n\\begin{pmatrix}\ny_1' \\\\\ny_2' \\\\\ny_3'\n\\end{pmatrix}\n=\n\\begin{pmatrix}\ny_2 \\\\\ny_3 \\\\\n- \\frac{1}{2} y_1 y_3\n\\end{pmatrix}\n$$\nwith the initial condition $\\mathbf{y}(0) = [0, 0, s]^T$.\nWe integrate this system from $\\eta = 0$ to $\\eta = \\eta_{\\max}$. The goal is to find the value of $s$ for which the solution satisfies the truncated far-field boundary condition, i.e., $y_2(\\eta_{\\max}) = f'(\\eta_{\\max}) = 1$. This defines a root-finding problem for the function $R(s) = y_2(\\eta_{\\max}; s) - 1$. Since $f'(\\eta_{\\max})$ is a monotonically increasing function of $s$, a unique root exists and can be efficiently found using a bracketing method like Brent's method.\n\nThe problem requires quantifying the truncation error. This is accomplished by comparing the solution on a truncated domain $[0, \\eta_{\\max}]$ against a high-fidelity reference solution computed on a much larger domain $[0, \\eta_{\\mathrm{ref}}]$, where $\\eta_{\\mathrm{ref}} = 30.0$. Let $s(\\eta_b)$ be the value of the wall curvature parameter $f''(0)$ obtained by solving the shooting problem on the interval $[0, \\eta_b]$. We define the reference value $s_{\\mathrm{ref}} = s(\\eta_{\\mathrm{ref}} = 30.0)$.\n\nFor each test case $(\\eta_{\\max}, \\varepsilon_{\\mathrm{tail}}, \\varepsilon_{\\mathrm{rel}})$, we first compute the truncated-domain wall curvature, $s_{\\mathrm{trunc}} = s(\\eta_{\\max})$, and the corresponding second derivative at the truncation boundary, $f''(\\eta_{\\max})$. Then, we evaluate two conditions:\n1.  **Tail Smallness Condition:** The magnitude of the dimensionless shear stress at the truncation boundary must be sufficiently small: $|f''(\\eta_{\\max})| \\le \\varepsilon_{\\mathrm{tail}}$. Since $f''(\\eta) > 0$ for $\\eta > 0$, this is $f''(\\eta_{\\max}) \\le \\varepsilon_{\\mathrm{tail}}$.\n2.  **Wall-Curvature Stability Condition:** The relative deviation of the computed wall curvature from the reference value must be within a given tolerance: $\\frac{|s_{\\mathrm{trunc}} - s_{\\mathrm{ref}}|}{s_{\\mathrm{ref}}} \\le \\varepsilon_{\\mathrm{rel}}$.\n\nA test case is considered successful (evaluates to True) if and only if both conditions are satisfied.\n\nThe algorithm is as follows:\n1.  Set a high-precision ODE solver with stringent absolute and relative tolerances (e.g., $10^{-12}$) to ensure that numerical integration error is negligible.\n2.  Compute the reference wall curvature $s_{\\mathrm{ref}}$ by solving the shooting problem for $\\eta_{\\mathrm{ref}} = 30.0$.\n3.  For each test case $(\\eta_{\\max}, \\varepsilon_{\\mathrm{tail}}, \\varepsilon_{\\mathrm{rel}})$:\n    a. Solve the shooting problem for $\\eta = \\eta_{\\max}$ to find $s_{\\mathrm{trunc}}$.\n    b. After finding $s_{\\mathrm{trunc}}$, perform one final integration from $\\eta=0$ to $\\eta=\\eta_{\\max}$ with $\\mathbf{y}(0) = [0, 0, s_{\\mathrm{trunc}}]$ to obtain the full solution state at $\\eta_{\\max}$, which includes $f''(\\eta_{\\max}) = y_3(\\eta_{\\max})$.\n    c. Evaluate the tail smallness and wall-curvature stability conditions.\n    d. Record the boolean result of the combined check.\n4.  Output the list of boolean results.", "answer": "```python\nimport numpy as np\nfrom scipy.integrate import solve_ivp\nfrom scipy.optimize import brentq\n\ndef solve():\n    \"\"\"\n    Solves the Blasius boundary value problem using a shooting method,\n    and evaluates truncation error criteria for several test cases.\n    \"\"\"\n\n    # Define the first-order ODE system for the Blasius equation:\n    # y = [f, f', f''], so y' = [f', f'', f'''] = [y[1], y[2], -0.5*y[0]*y[2]]\n    def blasius_ode(eta, y):\n        # y[0] = f, y[1] = f', y[2] = f''\n        return [y[1], y[2], -0.5 * y[0] * y[2]]\n\n    # High-precision solver tolerances to minimize numerical integration error\n    rtol, atol = 1e-12, 1e-12\n\n    def solve_shooting(eta_max):\n        \"\"\"\n        Finds the wall-curvature parameter s = f''(0) such that f'(eta_max) = 1.\n        Returns the computed s and the value of f''(eta_max).\n        \"\"\"\n        \n        # Objective function for the root-finder: residual = f'(eta_max) - 1\n        def aresidual(s: float):\n            y0 = [0, 0, s]\n            sol = solve_ivp(\n                blasius_ode,\n                [0, eta_max],\n                y0,\n                method='LSODA',\n                rtol=rtol,\n                atol=atol\n            )\n            # Return the value of y[1] (which is f') at the end of the interval\n            return sol.y[1, -1] - 1.0\n\n        # Find the value of s using Brent's method. The bracket [0.1, 1.0] is\n        # known to contain the root for the Blasius problem.\n        try:\n            s_val = brentq(aresidual, 0.1, 1.0)\n        except ValueError:\n            # Should not happen with this bracket, but as a safeguard.\n            return None, None\n\n        # With the correct s_val, re-integrate to get the final state vector.\n        y0_final = [0, 0, s_val]\n        final_sol = solve_ivp(\n            blasius_ode,\n            [0, eta_max],\n            y0_final,\n            method='LSODA',\n            rtol=rtol,\n            atol=atol\n        )\n\n        # f''(eta_max) is the third component of the solution vector at the final point.\n        f_double_prime_at_max = final_sol.y[2, -1]\n\n        return s_val, f_double_prime_at_max\n    \n    # 1. Compute the high-accuracy reference value s_ref\n    eta_ref = 30.0\n    s_ref, _ = solve_shooting(eta_ref)\n    \n    # Define the test suite\n    test_cases = [\n        (4.0, 1e-3, 1e-3),\n        (6.0, 5e-4, 2e-4),\n        (8.0, 1e-5, 1e-4),\n        (10.0, 1e-6, 1e-5),\n        (12.0, 1e-7, 5e-6),\n    ]\n\n    results = []\n\n    # 2. Iterate through each test case\n    for case in test_cases:\n        eta_max, eps_tail, eps_rel = case\n        \n        # 3a. Compute s_trunc and f''(eta_max) for the current case\n        s_trunc, f_double_prime_max = solve_shooting(eta_max)\n        \n        # 3b. Evaluate the two conditions\n        tail_condition_met = abs(f_double_prime_max) = eps_tail\n        stability_condition_met = (abs(s_trunc - s_ref) / s_ref) = eps_rel\n        \n        # 3c. The result is True only if both conditions are met\n        results.append(tail_condition_met and stability_condition_met)\n\n    # 4. Format and print the final output as specified\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n\n```", "id": "2500305"}]}