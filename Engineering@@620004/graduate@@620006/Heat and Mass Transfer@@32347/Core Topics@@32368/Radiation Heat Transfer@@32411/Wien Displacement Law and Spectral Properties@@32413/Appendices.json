{"hands_on_practices": [{"introduction": "Wien's displacement law constant, $b$, is a cornerstone of thermal radiation analysis, linking a blackbody's temperature to its peak emission wavelength. This exercise solidifies the fundamental origin of this constant, starting from the first principles of Planck's radiation law. By applying the calculus of extrema to find the peak of the spectral distribution, you will derive and numerically solve the transcendental equation that defines the law, connecting the theoretical result directly to a high-precision calculation using modern, exact SI definitions of the constants $h$, $c$, and $k_B$ [@problem_id:2538969].", "problem": "A diffuse isothermal black surface at absolute temperature $T$ exhibits a spectral radiance per unit wavelength given by Planck’s radiation law. Starting from the spectral radiance $B_{\\lambda}(T)$ expressed as a function of wavelength $\\lambda$ and temperature $T$, do the following:\n\n1. By maximizing $B_{\\lambda}(T)$ with respect to $\\lambda$ at fixed $T$, derive the implicit transcendental condition that determines the dimensionless maximizer $x^{\\star}$, where $x \\equiv \\dfrac{h c}{\\lambda k_{B} T}$, with $h$ the Planck constant, $c$ the speed of light in vacuum, and $k_{B}$ the Boltzmann constant.\n2. Express the displacement constant $b$ defined by $\\lambda_{\\text{max}} T = b$ in terms of $h$, $c$, $k_{B}$, and $x^{\\star}$.\n3. Using the following Committee on Data of the International Science Council (CODATA) exact values for the International System of Units (SI),\n   - $h = 6.62607015\\times 10^{-34}\\ \\text{J}\\cdot\\text{s}$,\n   - $c = 299\\,792\\,458\\ \\text{m}\\cdot \\text{s}^{-1}$,\n   - $k_{B} = 1.380649\\times 10^{-23}\\ \\text{J}\\cdot \\text{K}^{-1}$,\n   compute a numerical value for $b$ by solving for $x^{\\star}$ and substituting into your expression from part 2. Round your final result to ten significant figures and express it in $\\text{m}\\cdot\\text{K}$.\n4. Compare your computed value to the widely used reference $b \\approx 2.897771955\\times 10^{-3}\\ \\text{m}\\cdot\\text{K}$, and briefly comment on the primary sources (or absence) of uncertainty in the present-day determination of $b$ within the SI.\n\nYour final answer must be the single rounded numerical value of $b$ only. Do not include intermediate results in the final answer. State all reasoning and intermediate results in your solution.", "solution": "The problem requires the derivation and calculation of the Wien displacement law constant, $b$, starting from Planck's law for the spectral radiance of a black body. The validation of the problem statement confirms that it is scientifically sound, well-posed, and objective. We proceed with the solution.\n\nPlanck's law for the spectral radiance per unit wavelength, $B_{\\lambda}(T)$, is given by\n$$B_{\\lambda}(T) = \\frac{2 h c^2}{\\lambda^5} \\frac{1}{\\exp\\left(\\frac{h c}{\\lambda k_B T}\\right) - 1}$$\nwhere $h$ is the Planck constant, $c$ is the speed of light, $k_B$ is the Boltzmann constant, $T$ is the absolute temperature, and $\\lambda$ is the wavelength.\n\nTo find the wavelength $\\lambda_{\\text{max}}$ at which $B_{\\lambda}(T)$ is maximum for a fixed temperature $T$, we must solve the equation $\\frac{d B_{\\lambda}(T)}{d \\lambda} = 0$.\n\nLet us introduce the dimensionless variable $x \\equiv \\frac{h c}{\\lambda k_B T}$. From this definition, we can express $\\lambda$ as $\\lambda = \\frac{h c}{x k_B T}$. Substituting this into the expression for $B_{\\lambda}(T)$ yields:\n$$B_{\\lambda}(T) = \\frac{2 h c^2}{\\left(\\frac{h c}{x k_B T}\\right)^5} \\frac{1}{\\exp(x) - 1} = \\left(\\frac{2 k_B^5 T^5}{h^4 c^3}\\right) \\frac{x^5}{\\exp(x) - 1}$$\nTo find the maximum of $B_{\\lambda}(T)$ with respect to $\\lambda$, we can find the maximum with respect to $x$. Using the chain rule, $\\frac{d B_{\\lambda}}{d \\lambda} = \\frac{d B_{\\lambda}}{d x} \\frac{d x}{d \\lambda}$. The derivative $\\frac{d x}{d \\lambda} = -\\frac{h c}{\\lambda^2 k_B T}$ is non-zero for finite $\\lambda$. Therefore, the condition $\\frac{d B_{\\lambda}}{d \\lambda} = 0$ is equivalent to $\\frac{d B_{\\lambda}}{d x} = 0$.\n\nThe term $\\left(\\frac{2 k_B^5 T^5}{h^4 c^3}\\right)$ is a constant with respect to $x$. Thus, we only need to maximize the function $f(x) = \\frac{x^5}{\\exp(x) - 1}$. We compute the derivative of $f(x)$ with respect to $x$ and set it to zero:\n$$\\frac{d f(x)}{d x} = \\frac{d}{d x} \\left( \\frac{x^5}{\\exp(x) - 1} \\right) = \\frac{5x^4(\\exp(x) - 1) - x^5(\\exp(x))}{(\\exp(x) - 1)^2} = 0$$\nFor a non-trivial solution where $x \\neq 0$, the numerator must be zero:\n$$5x^4(\\exp(x) - 1) - x^5\\exp(x) = 0$$\nDividing by $x^4$ (since $x=0$ corresponds to $\\lambda \\to \\infty$, which is a minimum, not a maximum):\n$$5(\\exp(x) - 1) - x\\exp(x) = 0$$\nRearranging the terms, we obtain the implicit transcendental condition for the maximizer, which we denote as $x^{\\star}$:\n$$5\\exp(x^{\\star}) - 5 - x^{\\star}\\exp(x^{\\star}) = 0$$\n$$(5 - x^{\\star})\\exp(x^{\\star}) = 5$$\nThis can be written in several equivalent forms, such as $x^{\\star} = 5(1 - \\exp(-x^{\\star}))$ or $x^{\\star} + 5\\exp(-x^{\\star}) - 5 = 0$. This completes the first part of the problem.\n\nFor the second part, we relate $x^{\\star}$ to the Wien displacement constant $b$. By definition, $\\lambda_{\\text{max}} T = b$. The value $\\lambda_{\\text{max}}$ corresponds to the value $x^{\\star}$ through the relation:\n$$x^{\\star} = \\frac{h c}{\\lambda_{\\text{max}} k_B T}$$\nSubstituting $\\lambda_{\\text{max}} T = b$ into this equation gives:\n$$x^{\\star} = \\frac{h c}{k_B b}$$\nSolving for $b$, we find the expression for the displacement constant:\n$$b = \\frac{h c}{x^{\\star} k_B}$$\nThis completes the second part.\n\nFor the third part, we must compute the numerical value of $b$. First, the transcendental equation $x = 5(1 - \\exp(-x))$ must be solved for $x^{\\star}$. This is accomplished using a numerical root-finding algorithm, such as Newton's method. The solution, computed to sufficient precision, is:\n$$x^{\\star} \\approx 4.965114231744276$$\nThe problem provides the following exact values for the fundamental constants in the SI:\n- $h = 6.62607015 \\times 10^{-34}\\ \\text{J}\\cdot\\text{s}$\n- $c = 299\\,792\\,458\\ \\text{m}\\cdot \\text{s}^{-1}$\n- $k_{B} = 1.380649 \\times 10^{-23}\\ \\text{J}\\cdot \\text{K}^{-1}$\n\nSubstituting these values into the expression for $b$:\n$$b = \\frac{(6.62607015 \\times 10^{-34}) \\times (299\\,792\\,458)}{(4.965114231744276) \\times (1.380649 \\times 10^{-23})} \\ \\text{m}\\cdot\\text{K}$$\n$$b \\approx \\frac{1.9864458571489 \\times 10^{-25}}{6.8550920555365 \\times 10^{-23}} \\ \\text{m}\\cdot\\text{K}$$\n$$b \\approx 0.002897771955185 \\ \\text{m}\\cdot\\text{K}$$\nRounding to ten significant figures as required:\n$$b \\approx 2.897771955 \\times 10^{-3}\\ \\text{m}\\cdot\\text{K}$$\nThis completes the third part.\n\nFor the final part, we compare our result to the reference value $b \\approx 2.897771955 \\times 10^{-3}\\ \\text{m}\\cdot\\text{K}$. Our calculated value matches the reference value to all ten significant figures.\n\nThe commentary on uncertainty is as follows. The problem correctly states that the given SI values for $h$, $c$, and $k_B$ are exact. This reflects the 2019 redefinition of SI base units, where these fundamental constants were assigned fixed numerical values, thereby having zero uncertainty by definition. The constant $x^{\\star}$ is a purely mathematical constant, being the solution to a specific transcendental equation, and as such, it can be computed to arbitrary precision and has no uncertainty. Since $b$ is expressed as a combination of these exact quantities ($b = \\frac{h c}{x^{\\star} k_B}$), the Wien displacement constant $b$ is also an exact quantity within the current SI framework. There are no sources of uncertainty in its determination from fundamental principles. Prior to the 2019 SI redefinition, constants such as $h$ and $k_B$ were experimentally determined and carried measurement uncertainties, which propagated to the calculated value of $b$. The redefinition has eliminated this source of uncertainty in the value of the constant itself. Any experimental uncertainty is now associated with the realization of the units (e.g., kilogram, kelvin) rather than the values of the fundamental constants.", "answer": "$$\\boxed{2.897771955 \\times 10^{-3}}$$", "id": "2538969"}, {"introduction": "While Planck's law is exact, approximations are invaluable tools in physics and engineering for simplifying analysis. The Wien *approximation* serves as the short-wavelength (or high-frequency) limit of Planck's law and is distinct from Wien's displacement law. This practice focuses on a crucial engineering skill: not just applying an approximation, but rigorously quantifying its accuracy by deriving the relative error as a function of the dimensionless parameter $x = hc/(\\lambda k_{B} T)$, thereby determining the precise regime of validity for its use [@problem_id:2538981].", "problem": "A black surface at absolute temperature $T$ emits thermal radiation with spectral radiance per unit wavelength described by Planck’s law, a well-tested foundation in radiative heat transfer. For a blackbody, the spectral radiance is\n$$\nB_{\\lambda}(T)=\\frac{2 h c^{2}}{\\lambda^{5}}\\,\\frac{1}{\\exp\\!\\left(\\frac{h c}{\\lambda k_{B} T}\\right)-1},\n$$\nwhere $h$ is Planck’s constant, $c$ is the speed of light in vacuum, $k_{B}$ is the Boltzmann constant, and $\\lambda$ is the wavelength. In the short-wavelength (high-frequency) limit, the denominator obeys the asymptotic simplification $\\exp(x)-1\\approx \\exp(x)$ when $x\\gg 1$. Define the dimensionless variable $x\\equiv h c/(\\lambda k_{B}T)$.\n\nUsing only the above base, do the following:\n- Derive the relative error $\\varepsilon(x)$ incurred by replacing $B_{\\lambda}(T)$ with its short-wavelength (Wien) approximation, defined as the absolute relative error of the approximation with respect to the exact Planck expression.\n- Determine the smallest value $x_{\\star}$ for which $\\varepsilon(x)<0.01$. Report your final answer as the exact expression for $x_{\\star}$, with no numerical rounding.\n- Additionally, express the corresponding regime of validity as an inequality relating $\\lambda$ and $T$ using fundamental constants, in the International System of Units (SI). This part does not need to be included in the final boxed answer.\n\nExpress the final answer as an exact closed-form expression for $x_{\\star}$. Do not include units in your final boxed answer.", "solution": "The problem statement has been validated and is found to be scientifically grounded, well-posed, and internally consistent. It is based on fundamental principles of radiative heat transfer and presents a tractable mathematical challenge. We shall proceed with the solution.\n\nThe problem requires an analysis of the error incurred by using the Wien approximation for Planck's law of blackbody radiation. Planck's law for the spectral radiance $B_{\\lambda}(T)$ is given as:\n$$\nB_{\\lambda}(T)=\\frac{2 h c^{2}}{\\lambda^{5}}\\,\\frac{1}{\\exp\\!\\left(\\frac{h c}{\\lambda k_{B} T}\\right)-1}\n$$\nThe dimensionless variable $x$ is defined as $x \\equiv \\frac{h c}{\\lambda k_{B} T}$. In terms of $x$, Planck's law is proportional to $(\\exp(x)-1)^{-1}$.\n\nThe short-wavelength (Wien) approximation, which we denote as $B_{\\lambda, W}(T)$, is obtained by applying the limit $\\exp(x) - 1 \\approx \\exp(x)$ for $x \\gg 1$. Thus, the approximation is:\n$$\nB_{\\lambda, W}(T)=\\frac{2 h c^{2}}{\\lambda^{5}}\\,\\frac{1}{\\exp\\!\\left(\\frac{h c}{\\lambda k_{B} T}\\right)}\n$$\nIn terms of $x$, this approximation is proportional to $\\exp(-x)$.\n\nThe first task is to derive the relative error $\\varepsilon(x)$, defined as the absolute relative error of the approximation with respect to the exact Planck expression.\n$$\n\\varepsilon(x) = \\left| \\frac{B_{\\lambda, W}(T) - B_{\\lambda}(T)}{B_{\\lambda}(T)} \\right| = \\left| \\frac{B_{\\lambda, W}(T)}{B_{\\lambda}(T)} - 1 \\right|\n$$\nWe compute the ratio of the approximate radiance to the exact radiance:\n$$\n\\frac{B_{\\lambda, W}(T)}{B_{\\lambda}(T)} = \\frac{\\frac{2 h c^{2}}{\\lambda^{5}}\\,\\exp\\!\\left(-\\frac{h c}{\\lambda k_{B} T}\\right)}{\\frac{2 h c^{2}}{\\lambda^{5}}\\,\\left(\\exp\\!\\left(\\frac{h c}{\\lambda k_{B} T}\\right)-1\\right)^{-1}} = \\exp\\!\\left(-\\frac{h c}{\\lambda k_{B} T}\\right) \\left[ \\exp\\!\\left(\\frac{h c}{\\lambda k_{B} T}\\right)-1 \\right]\n$$\nSubstituting the dimensionless variable $x$, the ratio simplifies to:\n$$\n\\frac{B_{\\lambda, W}(T)}{B_{\\lambda}(T)} = \\exp(-x) \\left[ \\exp(x) - 1 \\right] = 1 - \\exp(-x)\n$$\nNow we substitute this back into the expression for the relative error:\n$$\n\\varepsilon(x) = |(1 - \\exp(-x)) - 1| = |-\\exp(-x)|\n$$\nFor any physical system, the absolute temperature $T$ and wavelength $\\lambda$ are positive quantities. The constants $h$, $c$, and $k_B$ are all positive. Therefore, $x = \\frac{h c}{\\lambda k_B T}$ must be positive. For any $x > 0$, the function $\\exp(-x)$ is also positive. Consequently, the absolute value is redundant.\nThe relative error is:\n$$\n\\varepsilon(x) = \\exp(-x)\n$$\n\nThe second task is to determine the smallest value $x_{\\star}$ for which $\\varepsilon(x) < 0.01$. The function $\\varepsilon(x) = \\exp(-x)$ is a strictly decreasing function for $x>0$. Therefore, the inequality $\\varepsilon(x) < 0.01$ defines an open interval for $x$. The phrasing \"smallest value\" is imprecise, as a set $(a, \\infty)$ has no minimum element. A rigorous interpretation would render the problem ill-posed. However, standard scientific and engineering parlance implies finding the boundary value of the domain of validity, which is the infimum of the set of solutions. We will proceed by finding this boundary value, which we shall call $x_{\\star}$. This value is where the error is exactly equal to the threshold.\nWe set the condition:\n$$\n\\varepsilon(x_{\\star}) = 0.01\n$$\n$$\n\\exp(-x_{\\star}) = 0.01 = \\frac{1}{100} = 10^{-2}\n$$\nTo solve for $x_{\\star}$, we take the natural logarithm of both sides:\n$$\n-x_{\\star} = \\ln(10^{-2})\n$$\n$$\n-x_{\\star} = -2\\ln(10)\n$$\n$$\nx_{\\star} = 2\\ln(10)\n$$\nAlternatively, and more directly:\n$$\n-x_{\\star} = \\ln(0.01) = \\ln\\left(\\frac{1}{100}\\right) = -\\ln(100)\n$$\n$$\nx_{\\star} = \\ln(100)\n$$\nThis is the exact, closed-form expression for the required value.\n\nFinally, we are asked to express the corresponding regime of validity as an inequality. The Wien approximation is valid to within $1\\%$ when $\\varepsilon(x) < 0.01$, which corresponds to $x > x_{\\star}$.\n$$\nx > \\ln(100)\n$$\nSubstituting the definition of $x$:\n$$\n\\frac{h c}{\\lambda k_B T} > \\ln(100)\n$$\nRearranging to relate $\\lambda$ and $T$:\n$$\n\\lambda T < \\frac{h c}{k_B \\ln(100)}\n$$\nThis inequality defines the regime in terms of wavelength and temperature where the Wien approximation has a relative error of less than $1\\%$. The term $\\frac{h c}{k_B}$ is dimensionally a product of length and temperature (meter-Kelvin in SI units), consistent with the product $\\lambda T$. This completes the analysis.", "answer": "$$\n\\boxed{\\ln(100)}\n$$", "id": "2538981"}, {"introduction": "The ultimate test of physical laws is their application to interpreting experimental data. This advanced practice simulates this process, tasking you with estimating a surface's temperature $T$ and emissivity $\\varepsilon$ from noisy spectral radiance measurements—a classic inverse problem in remote sensing, pyrometry, and diagnostics. By formulating and solving a nonlinear least-squares problem, you will use Wien's law to establish a robust initial guess and Planck's law as the core of your forward model, thus synthesizing foundational concepts to tackle a challenge that mirrors real-world scientific data analysis [@problem_id:2539028].", "problem": "You are given a physics-based inverse problem in radiative heat transfer: estimate the absolute temperature $T$ and parameters of the spectral emissivity $\\varepsilon(\\lambda;\\boldsymbol{\\theta})$ of an opaque diffuse surface from noisy measurements of spectral radiance $I_\\lambda(\\lambda)$ under the model $I_\\lambda(\\lambda) = \\varepsilon(\\lambda;\\boldsymbol{\\theta}) \\, L_\\lambda(\\lambda,T) + \\eta(\\lambda)$, where $L_\\lambda(\\lambda,T)$ is the spectral blackbody radiance and $\\eta(\\lambda)$ is zero-mean Gaussian noise with known standard deviation. Your program must formulate and solve a weighted Nonlinear Least Squares (NLS) estimation problem and assess identifiability and uncertainty via the Fisher Information Matrix (FIM).\n\nBase your derivation and implementation only on the following fundamental laws and well-tested formulas:\n- Planck’s law for spectral radiance per unit wavelength: \n$$L_\\lambda(\\lambda,T) = \\frac{2 h c^2}{\\lambda^5} \\, \\frac{1}{\\exp\\!\\left(\\frac{h c}{\\lambda k_B T}\\right) - 1},$$\nwith the physical constants in International System of Units (SI): Planck constant $h = 6.62607015\\times 10^{-34}\\,\\mathrm{J\\cdot s}$, speed of light $c = 2.99792458\\times 10^{8}\\,\\mathrm{m/s}$, and Boltzmann constant $k_B = 1.380649\\times 10^{-23}\\,\\mathrm{J/K}$.\n- The definition of emissivity as a multiplicative factor on blackbody radiance.\n- The assumption of independent Gaussian measurement noise with known variance, for which the negative log-likelihood is proportional to the weighted sum of squared residuals; thus the maximum-likelihood estimator is obtained by solving a weighted NLS problem.\n- Wien’s displacement law for a blackbody peak wavelength: $\\lambda_{\\text{peak}} T = b$ with $b = 2.897771955\\times 10^{-3}\\,\\mathrm{m\\cdot K}$, to construct an initial guess for $T$ from the measured spectrum.\n\nYour program must:\n1. Implement the forward model $I_\\lambda(\\lambda) = \\varepsilon(\\lambda;\\boldsymbol{\\theta}) \\, L_\\lambda(\\lambda,T)$ for two emissivity parameterizations:\n   - Gray emissivity: $\\varepsilon(\\lambda;\\boldsymbol{\\theta}) = a_0$ with parameter $a_0 \\in (0,1]$.\n   - Linear-in-wavelength emissivity about a reference $\\lambda_0$: $\\varepsilon(\\lambda;\\boldsymbol{\\theta}) = a_0 + a_1 (\\lambda - \\lambda_0)$, with parameters chosen so that $\\varepsilon(\\lambda;\\boldsymbol{\\theta}) \\in (0,1]$ across the specified band.\n2. Solve the weighted NLS problem for $(T,\\boldsymbol{\\theta})$ using bounds that enforce physical plausibility: $T \\in [10, 10000]$ in $\\mathrm{K}$, $a_0 \\in [0.01, 1.0]$, and $a_1 \\in [-10^6, 10^6]$ in $\\mathrm{m^{-1}}$. Use Wien’s displacement law with the measured spectrum to seed a plausible initial guess for $T$, and default emissivity parameters $a_0 = 0.9$, $a_1 = 0$ when applicable.\n3. At the solution, compute the Fisher Information Matrix (FIM) under the Gaussian-noise model as \n$$\\mathcal{I}(\\hat{\\boldsymbol{\\phi}}) = \\mathbf{J}(\\hat{\\boldsymbol{\\phi}})^\\top \\mathbf{W} \\, \\mathbf{J}(\\hat{\\boldsymbol{\\phi}}),$$\nwhere $\\hat{\\boldsymbol{\\phi}}$ is the estimated parameter vector, $\\mathbf{J}$ is the Jacobian of the residuals with respect to the parameters, and $\\mathbf{W}$ is the inverse noise covariance (diagonal, with entries $1/\\sigma^2$). Use the inverse (or pseudoinverse if necessary) of the FIM to approximate the parameter covariance.\n4. Quantify identifiability using the FIM condition number $\\kappa(\\mathcal{I})$ and rank; declare the parameter set to be locally identifiable if and only if the FIM is full rank and $\\kappa(\\mathcal{I}) \\le 10^{10}$. Also compute the maximum relative standard deviation across parameters as a dimensionless decimal $r_{\\max} = \\max_i \\left( \\sqrt{\\mathrm{Cov}_{ii}} / |\\hat{\\phi}_i| \\right)$, with the convention that if $|\\hat{\\phi}_i| = 0$ you use the absolute standard deviation for that parameter in the maximum.\n5. Use the following test suite of synthetic cases. In each case, generate the wavelengths, compute noiseless $I_\\lambda(\\lambda)$ from the stated true parameters, set the noise standard deviation to $\\sigma = s \\cdot \\max_\\lambda I_\\lambda(\\lambda)$ with the specified $s$, and then add independent Gaussian noise with the specified random seed. All wavelengths must be in $\\mathrm{m}$ and temperatures in $\\mathrm{K}$. The spectral radiance unit is $\\mathrm{W\\cdot sr^{-1}\\cdot m^{-3}}$.\n   - Case $1$ (happy path, gray emissivity): $T_{\\text{true}} = 1800\\,\\mathrm{K}$, $a_{0,\\text{true}} = 0.82$, $\\lambda \\in [1.0, 6.0]\\,\\mu\\mathrm{m}$ sampled at $25$ uniformly spaced points, noise fraction $s = 0.01$, random seed $42$.\n   - Case $2$ (edge case, Rayleigh–Jeans-like band, gray emissivity): $T_{\\text{true}} = 5000\\,\\mathrm{K}$, $a_{0,\\text{true}} = 0.70$, $\\lambda \\in [40.0, 60.0]\\,\\mu\\mathrm{m}$ sampled at $15$ uniformly spaced points, noise fraction $s = 0.005$, random seed $123$. This band strongly couples $T$ and $a_0$, challenging identifiability.\n   - Case $3$ (slope emissivity near peak, linear emissivity): $T_{\\text{true}} = 1500\\,\\mathrm{K}$, $a_{0,\\text{true}} = 0.85$, $a_{1,\\text{true}} = -0.02\\,\\mu\\mathrm{m}^{-1}$ (that is $-2.0\\times 10^{4}\\,\\mathrm{m^{-1}}$), reference $\\lambda_0 = 2.0\\,\\mu\\mathrm{m}$, $\\lambda \\in [1.2, 3.6]\\,\\mu\\mathrm{m}$ sampled at $20$ uniformly spaced points, noise fraction $s = 0.01$, random seed $7$.\n6. Program output requirements:\n   - For each case, compute and report the following four quantities in order: the estimated temperature $\\hat{T}$ in $\\mathrm{K}$ rounded to one decimal place; the FIM condition number $\\kappa(\\mathcal{I})$ rounded to three significant figures; the identifiability decision as a boolean; and $r_{\\max}$ rounded to three significant figures as a decimal (no percent sign).\n   - Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, in the order of cases $1$, $2$, $3$. Thus the line has $12$ entries: $[\\hat{T}_1,\\kappa_1,\\mathrm{ident}_1,r_{\\max,1},\\hat{T}_2,\\kappa_2,\\mathrm{ident}_2,r_{\\max,2},\\hat{T}_3,\\kappa_3,\\mathrm{ident}_3,r_{\\max,3}]$ with no spaces.", "solution": "The provided problem is a well-posed inverse problem in radiative heat transfer. It is scientifically grounded in Planck's law and statistical estimation theory, and all necessary parameters and procedures are specified without ambiguity or contradiction. Therefore, I will proceed with a full solution.\n\nThe core of the problem is to estimate a set of physical parameters $\\boldsymbol{\\phi}$ from a series of noisy measurements. The measurements consist of spectral radiance $I_{\\lambda,i}$ at known wavelengths $\\lambda_i$. The physical model connecting the parameters to the ideal, noiseless radiance is given by $M(\\lambda_i, \\boldsymbol{\\phi}) = \\varepsilon(\\lambda_i;\\boldsymbol{\\theta}) \\, L_\\lambda(\\lambda_i,T)$, where the parameter vector $\\boldsymbol{\\phi}$ comprises the surface temperature $T$ and the emissivity parameters $\\boldsymbol{\\theta}$. The measurement process is described by $I_{\\lambda,i} = M(\\lambda_i, \\boldsymbol{\\phi}) + \\eta_i$, where $\\eta_i$ are independent, zero-mean Gaussian noise terms with a known, constant standard deviation $\\sigma$.\n\n**1. Problem Formulation as Weighted Nonlinear Least Squares (NLS)**\n\nUnder the assumption of independent and identically distributed Gaussian noise, the maximum likelihood estimator (MLE) for the parameters $\\boldsymbol{\\phi}$ is the one that minimizes the sum of squared residuals between the measured data and the model prediction. Since the noise variance $\\sigma^2$ is known, we formulate a weighted NLS problem. The objective is to find the parameters $\\hat{\\boldsymbol{\\phi}}$ that minimize the weighted sum of squared errors, $\\chi^2$:\n$$ \\chi^2(\\boldsymbol{\\phi}) = \\sum_{i=1}^{N} \\frac{(I_{\\lambda,i}^\\text{meas} - M(\\lambda_i, \\boldsymbol{\\phi}))^2}{\\sigma^2} $$\nwhere $N$ is the number of measurement points. Minimizing this objective function is equivalent to minimizing the sum of the squared weighted residuals, $r_i(\\boldsymbol{\\phi}) = (I_{\\lambda,i}^\\text{meas} - M(\\lambda_i, \\boldsymbol{\\phi}))/\\sigma$. This is the standard form solved by numerical optimization routines such as `scipy.optimize.least_squares`.\n\n**2. Forward Model and Analytical Jacobian**\n\nThe forward model $M(\\boldsymbol{\\phi})$ depends on the parameterization of the spectral emissivity $\\varepsilon(\\lambda; \\boldsymbol{\\theta})$ and Planck's law for the spectral radiance of a blackbody, $L_\\lambda(\\lambda, T)$:\n$$ L_\\lambda(\\lambda,T) = \\frac{2 h c^2}{\\lambda^5} \\, \\frac{1}{\\exp\\left(\\frac{h c}{\\lambda k_B T}\\right) - 1} $$\nwhere $h$ is the Planck constant, $c$ is the speed of light, and $k_B$ is the Boltzmann constant.\n\nTo ensure efficient and robust convergence of the NLS solver, we must provide the analytical Jacobian of the weighted residuals. The Jacobian matrix $\\mathbf{J}_{\\text{LS}}$ has elements $J_{\\text{LS}, ij} = \\partial r_i / \\partial \\phi_j$.\n$$ J_{\\text{LS}, ij} = \\frac{\\partial}{\\partial \\phi_j} \\left( \\frac{I_{\\lambda,i}^\\text{meas} - M(\\lambda_i, \\boldsymbol{\\phi})}{\\sigma} \\right) = - \\frac{1}{\\sigma} \\frac{\\partial M(\\lambda_i, \\boldsymbol{\\phi})}{\\partial \\phi_j} $$\nThe partial derivatives of the model, $\\partial M / \\partial \\phi_j$, form the sensitivity matrix. The derivative of Planck's law with respect to temperature $T$ is essential:\n$$ \\frac{\\partial L_\\lambda}{\\partial T} = L_\\lambda(\\lambda, T) \\cdot \\frac{\\exp\\left(\\frac{C_2}{\\lambda T}\\right)}{\\exp\\left(\\frac{C_2}{\\lambda T}\\right) - 1} \\cdot \\frac{C_2}{\\lambda T^2} $$\nwhere $C_2 = hc/k_B$.\n\nThe model derivatives for each emissivity case are:\n- **Gray Emissivity**: $\\boldsymbol{\\phi}=(T, a_0)$, $M = a_0 L_\\lambda(\\lambda,T)$.\n  $$ \\frac{\\partial M}{\\partial T} = a_0 \\frac{\\partial L_\\lambda}{\\partial T}, \\quad \\frac{\\partial M}{\\partial a_0} = L_\\lambda $$\n- **Linear Emissivity**: $\\boldsymbol{\\phi}=(T, a_0, a_1)$, $M = (a_0 + a_1(\\lambda - \\lambda_0)) L_\\lambda(\\lambda,T)$.\n  $$ \\frac{\\partial M}{\\partial T} = \\varepsilon(\\lambda) \\frac{\\partial L_\\lambda}{\\partial T}, \\quad \\frac{\\partial M}{\\partial a_0} = L_\\lambda, \\quad \\frac{\\partial M}{\\partial a_1} = (\\lambda - \\lambda_0) L_\\lambda $$\nThese derivatives are used to construct the Jacobian matrix for the NLS solver.\n\n**3. Initial Guess Strategy**\n\nA crucial step in nonlinear optimization is providing a good initial guess for the parameters. The problem specifies a physically-motivated strategy for the temperature $T$. Wien's displacement law, $\\lambda_{\\text{peak}} T = b$, relates the temperature of a blackbody to the wavelength of its peak emission. We apply this law to the measured spectrum: we identify the wavelength $\\lambda_{\\text{peak,meas}}$ corresponding to the maximum measured radiance $I_{\\lambda,\\text{max}}$ and compute an initial temperature guess as $T_0 = b / \\lambda_{\\text{peak,meas}}$. For the emissivity parameters, the problem specifies default initial values of $a_0 = 0.9$ and $a_1 = 0$.\n\n**4. Parameter Estimation and Uncertainty Quantification**\n\nWith the objective function, Jacobian, initial guess, and parameter bounds established, we employ the `scipy.optimize.least_squares` function to find the optimal parameter vector $\\hat{\\boldsymbol{\\phi}}$.\n\nUpon convergence, we assess the quality and identifiability of the solution. The Fisher Information Matrix (FIM) provides a way to quantify the information that the data provides about the parameters. For a weighted NLS problem, the FIM at the solution $\\hat{\\boldsymbol{\\phi}}$ is given by:\n$$ \\mathcal{I}(\\hat{\\boldsymbol{\\phi}}) = \\mathbf{S}^\\top \\mathbf{W} \\mathbf{S} $$\nwhere $\\mathbf{S}$ is the sensitivity matrix ($\\mathbf{S}_{ij} = \\partial M_i / \\partial \\phi_j$) and $\\mathbf{W}$ is the inverse of the measurement noise covariance matrix. For our case, $\\mathbf{W} = \\sigma^{-2} \\mathbf{I}$, where $\\mathbf{I}$ is the identity matrix. The Jacobian returned by `scipy.optimize.least_squares` is $\\mathbf{J}_{\\text{LS}} = - \\sigma^{-1} \\mathbf{S}$. Substituting this relationship, the FIM simplifies to:\n$$ \\mathcal{I} = (\\sigma \\mathbf{J}_{\\text{LS}})^\\top (\\sigma^{-2} \\mathbf{I}) (\\sigma \\mathbf{J}_{\\text{LS}}) = \\mathbf{J}_{\\text{LS}}^\\top \\mathbf{J}_{\\text{LS}} $$\nThis provides a direct method for computing the FIM from the optimization output.\n\nIdentifiability and uncertainty are assessed as follows:\n- **Identifiability**: A parameter set is locally identifiable if the FIM is full rank and well-conditioned. We check if the rank of $\\mathcal{I}$ equals the number of parameters and if its condition number, $\\kappa(\\mathcal{I}) = \\sigma_{\\max}(\\mathcal{I}) / \\sigma_{\\min}(\\mathcal{I})$, is below a threshold of $10^{10}$. A high condition number signifies that the parameters are highly correlated, making them difficult to estimate independently. Case $2$ is designed to exhibit this behavior, as the measurement band lies in the Rayleigh-Jeans tail of the blackbody spectrum, where $L_\\lambda \\propto T/\\lambda^4$, leading to a strong coupling between the estimated temperature $\\hat{T}$ and emissivity $\\hat{a}_0$.\n- **Uncertainty**: The inverse of the FIM approximates the covariance matrix of the estimated parameters, $\\text{Cov}(\\hat{\\boldsymbol{\\phi}}) \\approx \\mathcal{I}^{-1}$. The square roots of the diagonal elements of this matrix, $\\sqrt{\\text{Cov}_{ii}}$, give the standard deviation (uncertainty) for each parameter estimate $\\hat{\\phi}_i$. We compute the maximum relative standard deviation, $r_{\\max} = \\max_i (\\sqrt{\\text{Cov}_{ii}} / |\\hat{\\phi}_i|)$, as a dimensionless measure of uncertainty, with a special handling for cases where $\\hat{\\phi}_i = 0$.\n\nThis comprehensive procedure allows for not only estimating the parameters but also rigorously evaluating the confidence in those estimates.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.optimize import least_squares\nfrom scipy import constants\n\ndef solve():\n    \"\"\"\n    Solves the inverse heat transfer problem for three test cases.\n    \"\"\"\n    # Physical constants from scipy.constants in SI units\n    h = constants.h\n    c = constants.c\n    k_B = constants.k\n    b_wien = 2.897771955e-3 # Wien's displacement law constant in m.K\n\n    def planck_law(lmbd, T):\n        \"\"\"\n        Computes Planck's law for spectral radiance per unit wavelength (W sr^-1 m^-3).\n        \n        Args:\n            lmbd (np.ndarray): Wavelengths in meters.\n            T (float): Temperature in Kelvin.\n\n        Returns:\n            np.ndarray: Spectral radiance.\n        \"\"\"\n        # Numerically robust implementation of Planck's law\n        # Use np.expm1 for precision with small arguments\n        arg = h * c / (lmbd * k_B * T)\n        # Avoid overflow, exp(709.7) is near float64 max\n        # For large arg, radiance is effectively zero.\n        radiance = np.zeros_like(arg)\n        valid_mask = arg  709.0\n        \n        numerator = 2 * h * c**2\n        denominator = lmbd[valid_mask]**5 * np.expm1(arg[valid_mask])\n        \n        # Avoid division by zero if denominator is zero (can happen for T=inf)\n        # Denominator is guaranteed positive otherwise\n        radiance[valid_mask] = numerator / denominator\n        return radiance\n\n    def process_case(case_spec):\n        \"\"\"\n        Generates synthetic data, solves the NLS problem, and performs uncertainty analysis.\n        \"\"\"\n        # 1. Generate synthetic data\n        model_type = case_spec['model']\n        true_params = case_spec['true_params']\n        T_true = true_params[0]\n        \n        lmbd = np.linspace(case_spec['lambda_range_um'][0], case_spec['lambda_range_um'][1], case_spec['num_points']) * 1e-6\n        \n        if model_type == 'gray':\n            a0_true = true_params[1]\n            eps_true = a0_true\n        elif model_type == 'linear':\n            a0_true, a1_true = true_params[1], true_params[2]\n            lambda_0 = case_spec['lambda_0_um'] * 1e-6\n            eps_true = a0_true + a1_true * (lmbd - lambda_0)\n\n        I_true = eps_true * planck_law(lmbd, T_true)\n        \n        sigma = case_spec['noise_frac'] * np.max(I_true)\n        \n        rng = np.random.default_rng(case_spec['seed'])\n        noise = rng.normal(0, sigma, lmbd.shape)\n        I_meas = I_true + noise\n\n        # 2. Define residuals and Jacobian for least_squares\n        def get_residuals_and_jacobian_funcs(model_type):\n            if model_type == 'gray':\n                def residuals(params):\n                    T, a0 = params\n                    model_rad = a0 * planck_law(lmbd, T)\n                    return (I_meas - model_rad) / sigma\n\n                def jacobian(params):\n                    T, a0 = params\n                    J = np.zeros((len(lmbd), 2))\n                    \n                    L = planck_law(lmbd, T)\n                    arg = h * c / (lmbd * k_B * T)\n                    \n                    # Numerically stable derivative calculation\n                    exp_arg = np.exp(arg)\n                    expm1_arg = np.expm1(arg)\n                    # Handle arg -> 0 case, where exp_arg/expm1_arg -> inf, but arg/T -> 0\n                    # The product has a finite limit, so we handle it manually.\n                    dL_dT_factor = np.full_like(arg, 1.0 / T)\n                    mask = expm1_arg > 1e-9 # if not, arg is very small\n                    dL_dT_factor[mask] = (arg[mask] / T) * (exp_arg[mask] / expm1_arg[mask])\n\n                    dL_dT = L * dL_dT_factor\n                    \n                    J[:, 0] = a0 * dL_dT\n                    J[:, 1] = L\n                    return -J / sigma\n\n            elif model_type == 'linear':\n                def residuals(params):\n                    T, a0, a1 = params\n                    eps = a0 + a1 * (lmbd - lambda_0)\n                    model_rad = eps * planck_law(lmbd, T)\n                    return (I_meas - model_rad) / sigma\n\n                def jacobian(params):\n                    T, a0, a1 = params\n                    J = np.zeros((len(lmbd), 3))\n                    \n                    eps = a0 + a1 * (lmbd - lambda_0)\n                    L = planck_law(lmbd, T)\n                    arg = h * c / (lmbd * k_B * T)\n\n                    exp_arg = np.exp(arg)\n                    expm1_arg = np.expm1(arg)\n                    dL_dT_factor = np.full_like(arg, 1.0 / T)\n                    mask = expm1_arg > 1e-9\n                    dL_dT_factor[mask] = (arg[mask] / T) * (exp_arg[mask] / expm1_arg[mask])\n\n                    dL_dT = L * dL_dT_factor\n                    \n                    J[:, 0] = eps * dL_dT\n                    J[:, 1] = L\n                    J[:, 2] = (lmbd - lambda_0) * L\n                    return -J / sigma\n            \n            return residuals, jacobian\n\n        residuals_func, jacobian_func = get_residuals_and_jacobian_funcs(model_type)\n\n        # 3. Initial guess and bounds\n        lambda_peak_meas_idx = np.argmax(I_meas)\n        lambda_peak_meas = lmbd[lambda_peak_meas_idx]\n        T_initial = b_wien / lambda_peak_meas\n        \n        initial_guess = [T_initial] + case_spec['initial_emiss_params']\n        bounds = ([10, 0.01, -1e6], [10000, 1.0, 1e6])\n        if model_type == 'gray':\n            bounds = (bounds[0][:2], bounds[1][:2])\n\n        # 4. Run optimization\n        result = least_squares(residuals_func, initial_guess, jac=jacobian_func, bounds=bounds, method='trf')\n        estimated_params = result.x\n        jac_ls = result.jac\n\n        # 5. Post-processing and uncertainty analysis\n        fim = jac_ls.T @ jac_ls\n        \n        num_params = len(estimated_params)\n        fim_rank = np.linalg.matrix_rank(fim)\n        \n        is_identifiable = (fim_rank == num_params)\n        \n        if is_identifiable:\n            cond_num = np.linalg.cond(fim)\n            is_identifiable = is_identifiable and (cond_num = 1e10)\n            cov_matrix = np.linalg.inv(fim)\n        else:\n            cond_num = np.inf\n            cov_matrix = np.linalg.pinv(fim)\n\n        stds = np.sqrt(np.diag(cov_matrix))\n        \n        r_vals = []\n        for i in range(num_params):\n            if np.abs(estimated_params[i]) == 0.0:\n                r_vals.append(stds[i])\n            else:\n                r_vals.append(stds[i] / np.abs(estimated_params[i]))\n        r_max = np.max(r_vals)\n\n        # 6. Format results\n        T_hat = estimated_params[0]\n        \n        T_hat_str = f\"{T_hat:.1f}\"\n        cond_num_str = f\"{cond_num:.3g}\"\n        is_identifiable_str = str(is_identifiable)\n        r_max_str = f\"{r_max:.3g}\"\n        \n        return [T_hat_str, cond_num_str, is_identifiable_str, r_max_str]\n\n    test_cases = [\n        {\n            'model': 'gray',\n            'true_params': [1800.0, 0.82],\n            'lambda_range_um': [1.0, 6.0],\n            'num_points': 25,\n            'noise_frac': 0.01,\n            'seed': 42,\n            'initial_emiss_params': [0.9],\n        },\n        {\n            'model': 'gray',\n            'true_params': [5000.0, 0.70],\n            'lambda_range_um': [40.0, 60.0],\n            'num_points': 15,\n            'noise_frac': 0.005,\n            'seed': 123,\n            'initial_emiss_params': [0.9],\n        },\n        {\n            'model': 'linear',\n            'true_params': [1500.0, 0.85, -2.0e4],\n            'lambda_range_um': [1.2, 3.6],\n            'lambda_0_um': 2.0,\n            'num_points': 20,\n            'noise_frac': 0.01,\n            'seed': 7,\n            'initial_emiss_params': [0.9, 0.0],\n        }\n    ]\n\n    all_results = []\n    for case in test_cases:\n        case_results = process_case(case)\n        all_results.extend(case_results)\n\n    print(f\"[{','.join(all_results)}]\")\n\nsolve()\n```", "id": "2539028"}]}