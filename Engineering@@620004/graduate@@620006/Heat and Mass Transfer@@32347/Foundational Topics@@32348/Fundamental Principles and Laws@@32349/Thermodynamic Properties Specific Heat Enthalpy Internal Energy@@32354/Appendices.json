{"hands_on_practices": [{"introduction": "The distinction between specific internal energy, $u$, and specific enthalpy, $h$, is fundamental to thermodynamics, with the difference being the flow work term, $pv$. This exercise sharpens your understanding of this relationship by focusing on the case of an incompressible substance, like liquid water. By deriving and calculating the magnitude of the difference $h - u$, you will gain a practical intuition for when these two energy properties can be used interchangeably and when their difference is significant in energy balances [@problem_id:2532114].", "id": "2532114", "problem": "A simple, single-phase, closed system undergoes a quasistatic change of state and can be modeled as a simple compressible substance with uniform properties. Using the First and Second Laws of Thermodynamics for simple compressible systems as your fundamental base, and the standard thermodynamic definition of specific enthalpy, derive a general relation that connects the differentials of specific internal energy $u$, specific enthalpy $h$, pressure $p$, and specific volume $v$. Then, specialize your result to an incompressible substance with constant density (that is, constant specific volume $v$), and obtain the algebraic expression for the difference $h - u$ in terms of $p$ and the density $\\rho$.\n\nFinally, evaluate the magnitude of this difference for liquid water at pressure $p = 1$ bar and temperature $T = 300$ K, taking the density as $\\rho = 996.6\\,\\text{kg}\\,\\text{m}^{-3}$ at these conditions. Use $1\\,\\text{bar} = 1.000 \\times 10^{5}\\,\\text{Pa}$, and express your final energy difference in $\\text{J}\\,\\text{kg}^{-1}$. Round your answer to four significant figures.", "solution": "The problem statement is scientifically sound, well-posed, and contains all necessary information for a complete solution. It is a standard problem in introductory thermodynamics.\n\nThe first task is to derive a general relation connecting the differentials of specific internal energy ($u$), specific enthalpy ($h$), pressure ($p$), and specific volume ($v$). We begin with the definition of specific enthalpy, $h$, which is a thermodynamic property defined as:\n$$\nh \\equiv u + pv\n$$\nThis definition holds for any pure substance in any phase. To find the relationship between the differentials of these properties, we differentiate the expression for $h$. Using the product rule for the $pv$ term, we obtain:\n$$\ndh = d(u + pv) = du + d(pv) = du + p dv + v dp\n$$\nThis equation, $dh = du + p dv + v dp$, is the general relation that connects the four differentials $du$, $dh$, $dp$, and $dv$. It is an exact differential because it is derived from state functions. This relation is fundamental and does not depend on the process path.\n\nFor context, using the First and Second Laws for a quasistatic (reversible) process, we have the first Gibbs relation: $du = Tds - pdv$. Substituting this into the differential for $h$ yields the second Gibbs relation, $dh = (Tds - pdv) + pdv + vdp = Tds + vdp$. However, the problem specifically asks for a relation connecting $u, h, p, v$ and their differentials, for which $dh = du + p dv + v dp$ is the most direct answer.\n\nThe second task is to specialize this result for an incompressible substance. An incompressible substance is defined by the constraint that its specific volume $v$ (and thus its density $\\rho = 1/v$) is constant.\n$$\nv = \\text{constant} \\implies dv = 0\n$$\nSubstituting $dv = 0$ into the general relation $dh = du + p dv + v dp$, we obtain the specialized relation for an incompressible substance:\n$$\ndh = du + v dp\n$$\nThis can be written as $d(h-u) = v dp$, which shows how the difference between specific enthalpy and specific internal energy changes with pressure for an incompressible substance.\n\nThe third task is to find the algebraic expression for the difference $h - u$ in terms of $p$ and $\\rho$. We return to the definition of enthalpy:\n$$\nh = u + pv\n$$\nRearranging this equation gives the difference directly:\n$$\nh - u = pv\n$$\nThis simple algebraic relation holds universally. For the specific case of an incompressible substance, the specific volume $v$ is a constant parameter. To express this in terms of density $\\rho$, we use the definition $\\rho = 1/v$:\n$$\nh - u = \\frac{p}{\\rho}\n$$\nThis is the required expression. This result is consistent with the integration of the differential form $d(h-u) = v dp$. Integrating from a reference state where pressure is $p_0=0$ and setting $u_0=0$ (so $h_0=0$), we find $\\int_{0}^{h-u} d(h'-u') = \\int_{0}^{p} v dp'$ which gives $h-u = vp = p/\\rho$. Thus, the expression is robust.\n\nThe final task is to evaluate the magnitude of $h - u$ for liquid water under the specified conditions.\nThe given data are:\n- Pressure: $p = 1 \\text{ bar} = 1.000 \\times 10^{5} \\text{ Pa}$\n- Density: $\\rho = 996.6 \\text{ kg m}^{-3}$\n\nWe substitute these values into the derived expression $h - u = p/\\rho$. The units must be handled correctly. A Pascal ($Pa$) is a Newton per square meter ($\\text{N m}^{-2}$), and a Joule ($J$) is a Newton-meter ($\\text{N m}$).\n$$\nh - u = \\frac{1.000 \\times 10^{5} \\text{ Pa}}{996.6 \\text{ kg m}^{-3}} = \\frac{1.000 \\times 10^{5} \\text{ N m}^{-2}}{996.6 \\text{ kg m}^{-3}}\n$$\nThe calculation yields:\n$$\nh - u = 100.34116... \\text{ N m kg}^{-1} = 100.34116... \\text{ J kg}^{-1}\n$$\nThe problem requires the answer to be rounded to four significant figures, which is consistent with the precision of the given data ($1.000$ and $996.6$ both have four significant figures).\nRounding the result to four significant figures, we get:\n$$\nh - u = 100.3 \\text{ J kg}^{-1}\n$$", "answer": "$$\n\\boxed{100.3}\n$$"}, {"introduction": "While the properties of liquids and solids are often approximated as constant, the specific heat of gases can vary dramatically with temperature. This practice confronts the simplifying assumption of a \"calorically perfect gas\" (constant $c_p$) with a more realistic \"thermally perfect gas\" model where $c_p(T)$ is defined by tabulated data. By comparing the heat transfer predictions of both models for a high-temperature process, you will quantify the error inherent in the simpler assumption and develop a critical sense for its limitations [@problem_id:2532089].", "id": "2532089", "problem": "A steady-flow, constant-pressure gas heater raises a stream of dry air from an inlet temperature of $T_{1} = 300\\,\\mathrm{K}$ to an outlet temperature of $T_{2} = 2000\\,\\mathrm{K}$. Neglect changes in kinetic and potential energies and treat air as an ideal gas. Two predictions of the required heat transfer rate are to be compared:\n\n1. A calorically perfect gas model that assumes a constant specific heat at constant pressure equal to its value at $T_{1}$, namely $c_{p,0} = 1006\\,\\mathrm{J/(kg\\cdot K)}$.\n2. A thermally perfect gas model using a temperature-dependent $c_{p}(T)$ constructed by linear interpolation between the following tabulated values for dry air (units of $c_{p}$ are $\\mathrm{J/(kg\\cdot K)}$ and units of $T$ are $\\mathrm{K}$):\n$$(T,c_{p}) \\in \\{(300,1006),\\,(600,1040),\\,(900,1100),\\,(1200,1160),\\,(1500,1220),\\,(1800,1270),\\,(2000,1310)\\}.$$\nAssume $c_{p}(T)$ varies linearly between each pair of adjacent tabulated temperatures, and use only the data provided.\n\nStarting from first principles, use the steady-flow first law of thermodynamics and the definition of enthalpy for an ideal gas to derive expressions for the heat transfer rate predictions under each model and then compute the signed relative error of the calorically perfect gas prediction with respect to the thermally perfect baseline. Report the signed relative error as\n$$\\varepsilon = \\frac{\\dot{Q}_{\\text{caloric}} - \\dot{Q}_{\\text{thermal}}}{\\dot{Q}_{\\text{thermal}}},$$\nexpressed as a dimensionless decimal fraction. Round your final answer to four significant figures. Do not use a percentage sign. If you introduce a mass flow rate $\\dot{m}$, your final reported $\\varepsilon$ must not depend on $\\dot{m}$.", "solution": "The problem is first validated to ensure it is scientifically sound and well-posed. The problem is based on the first law of thermodynamics applied to an open system, utilizing standard models for the specific heat of an ideal gas (calorically perfect and thermally perfect). The provided data for the specific heat of air are physically realistic, and the temperature range is relevant to engineering applications such as gas turbines. The problem is self-contained, with all necessary data and conditions provided to calculate a unique, meaningful result. There are no contradictions, ambiguities, or violations of physical principles. The problem is deemed valid and a solution can be formulated.\n\nThe analysis begins with the steady-flow first law of thermodynamics for a control volume. The energy balance is given by:\n$$ \\dot{Q} - \\dot{W}_{s} = \\dot{m} \\left( (h_{2} - h_{1}) + \\frac{V_{2}^{2} - V_{1}^{2}}{2} + g(z_{2} - z_{1}) \\right) $$\nwhere $\\dot{Q}$ is the rate of heat transfer into the system, $\\dot{W}_{s}$ is the rate of shaft work done by the system, $\\dot{m}$ is the mass flow rate, $h$ is the specific enthalpy, $V$ is the velocity, and $z$ is the elevation.\n\nAccording to the problem statement, the system is a gas heater, so there is no shaft work, meaning $\\dot{W}_{s} = 0$. Changes in kinetic and potential energies are to be neglected, thus $\\frac{V_{2}^{2} - V_{1}^{2}}{2} \\approx 0$ and $g(z_{2} - z_{1}) \\approx 0$. The first law simplifies to:\n$$ \\dot{Q} = \\dot{m} (h_{2} - h_{1}) = \\dot{m} \\Delta h $$\nThe specific heat transfer, $q$, is the heat transfer per unit mass:\n$$ q = \\frac{\\dot{Q}}{\\dot{m}} = h_{2} - h_{1} $$\nFor an ideal gas, the change in specific enthalpy is solely a function of temperature. The differential change in specific enthalpy is $dh = c_{p}(T) dT$, where $c_{p}(T)$ is the specific heat at constant pressure. The total change in specific enthalpy from an inlet temperature $T_{1}$ to an outlet temperature $T_{2}$ is found by integration:\n$$ \\Delta h = \\int_{T_{1}}^{T_{2}} c_{p}(T) dT $$\nTherefore, the specific heat transfer is $q = \\int_{T_{1}}^{T_{2}} c_{p}(T) dT$. We will evaluate this integral for the two proposed models.\n\nModel 1: Calorically Perfect Gas\nIn this model, the specific heat is assumed to be constant at its value at the initial temperature $T_{1} = 300\\,\\mathrm{K}$. This value is given as $c_{p,0} = 1006\\,\\mathrm{J/(kg \\cdot K)}$. The integral for the specific heat transfer becomes:\n$$ q_{\\text{caloric}} = \\int_{T_{1}}^{T_{2}} c_{p,0} dT = c_{p,0} \\int_{T_{1}}^{T_{2}} dT = c_{p,0} (T_{2} - T_{1}) $$\nSubstituting the given values, $T_{1} = 300\\,\\mathrm{K}$ and $T_{2} = 2000\\,\\mathrm{K}$:\n$$ q_{\\text{caloric}} = (1006\\,\\mathrm{J/(kg \\cdot K)}) \\times (2000\\,\\mathrm{K} - 300\\,\\mathrm{K}) = 1006 \\times 1700\\,\\mathrm{J/kg} = 1710200\\,\\mathrm{J/kg} $$\n\nModel 2: Thermally Perfect Gas\nIn this model, $c_{p}(T)$ is a temperature-dependent, piecewise linear function defined by the provided data points. To find the specific heat transfer $q_{\\text{thermal}}$, we must integrate this piecewise function from $T_{1} = 300\\,\\mathrm{K}$ to $T_{2} = 2000\\,\\mathrm{K}$. The integral is the sum of the integrals over each linear segment. For any segment between temperatures $T_{i}$ and $T_{i+1}$, the integral of the linear function $c_p(T)$ is the area of a trapezoid:\n$$ \\int_{T_{i}}^{T_{i+1}} c_{p}(T) dT = \\frac{c_{p}(T_{i}) + c_{p}(T_{i+1})}{2} (T_{i+1} - T_{i}) $$\nThe total specific heat transfer is the sum of these areas over all segments from $T_{1}$ to $T_{2}$. The data points are $(300, 1006)$, $(600, 1040)$, $(900, 1100)$, $(1200, 1160)$, $(1500, 1220)$, $(1800, 1270)$, and $(2000, 1310)$.\nThe calculation proceeds as a sum over the six intervals:\n\\begin{align*} q_{\\text{thermal}} = & \\frac{1006 + 1040}{2} (600 - 300) + \\frac{1040 + 1100}{2} (900 - 600) \\\\ & + \\frac{1100 + 1160}{2} (1200 - 900) + \\frac{1160 + 1220}{2} (1500 - 1200) \\\\ & + \\frac{1220 + 1270}{2} (1800 - 1500) + \\frac{1270 + 1310}{2} (2000 - 1800) \\end{align*}\n$$ q_{\\text{thermal}} = (1023)(300) + (1070)(300) + (1130)(300) + (1190)(300) + (1245)(300) + (1290)(200) $$\n$$ q_{\\text{thermal}} = 306900 + 321000 + 339000 + 357000 + 373500 + 258000 $$\n$$ q_{\\text{thermal}} = 1955400\\,\\mathrm{J/kg} $$\n\nSigned Relative Error\nThe signed relative error $\\varepsilon$ of the calorically perfect model with respect to the thermally perfect model is defined as:\n$$ \\varepsilon = \\frac{\\dot{Q}_{\\text{caloric}} - \\dot{Q}_{\\text{thermal}}}{\\dot{Q}_{\\text{thermal}}} $$\nSince $\\dot{Q} = \\dot{m} q$, the mass flow rate $\\dot{m}$ cancels from the expression:\n$$ \\varepsilon = \\frac{\\dot{m} q_{\\text{caloric}} - \\dot{m} q_{\\text{thermal}}}{\\dot{m} q_{\\text{thermal}}} = \\frac{q_{\\text{caloric}} - q_{\\text{thermal}}}{q_{\\text{thermal}}} $$\nSubstituting the computed values for $q_{\\text{caloric}}$ and $q_{\\text{thermal}}$:\n$$ \\varepsilon = \\frac{1710200 - 1955400}{1955400} = \\frac{-245200}{1955400} $$\n$$ \\varepsilon \\approx -0.125396338... $$\nRounding the result to four significant figures gives:\n$$ \\varepsilon = -0.1254 $$\nThe negative sign indicates that the constant specific heat model significantly underestimates the heat transfer required to achieve the specified temperature rise, because it neglects the increase in specific heat capacity of air at higher temperatures.", "answer": "$$\\boxed{-0.1254}$$"}, {"introduction": "In advanced computational fluid dynamics (CFD) and other simulation fields, thermodynamic state is often determined by solving for temperature from a known enthalpy. This hands-on computational practice challenges you to build a robust numerical solver to perform this inversion. You will implement a Newton's method algorithm to find the temperature $T$ that corresponds to a given enthalpy $h^{\\star}$, based on an integrated polynomial model for $c_p(T)$, bridging the gap between theoretical thermodynamic relations and their practical implementation in high-performance scientific software [@problem_id:2532137].", "id": "2532137", "problem": "You are asked to implement and analyze a numerical inversion of temperature-dependent specific enthalpy for a calorically imperfect gas in a computational fluid dynamics setting. The inversion is from specific enthalpy to temperature, where the specific heat at constant pressure is temperature-dependent. The algorithmic core must be a Newton iteration with a well-defined stopping criterion and a globalization strategy that guarantees robust behavior over a prescribed temperature bracket.\n\nThe fundamental base is as follows:\n- For a single-phase substance modeled as a perfect gas with temperature-dependent specific heat at constant pressure, the definition of specific enthalpy satisfies the differential relation $dh = c_p(T)\\, dT$. Therefore, with a reference state temperature $T_{\\mathrm{ref}}$ and reference enthalpy set to zero, the enthalpy as a function of temperature is given by\n$$\nh(T) = \\int_{T_{\\mathrm{ref}}}^{T} c_p(\\theta)\\, d\\theta.\n$$\n- Assume a polynomial model for $c_p(T)$:\n$$\nc_p(T) = a + b\\,T + c\\,T^2,\n$$\nwhere $a$, $b$, and $c$ are constants in the International System of Units (SI) with $c_p$ in $\\mathrm{J}\\,\\mathrm{kg}^{-1}\\,\\mathrm{K}^{-1}$ and $T$ in $\\mathrm{K}$.\n\nTask requirements:\n1. Derive a Newton iteration to solve for temperature $T$ given a target enthalpy $h^\\star$ by formulating a scalar root-finding problem $r(T)=0$ using only the base definitions above. Your derivation must be from first principles, without assuming any shortcut formulas. State the stopping criteria you will implement and a globalization strategy that ensures robustness when the raw Newton step would leave a prescribed temperature bracket.\n2. Implement the iteration for the specific model data below. Your implementation must check a priori that the root is bracketed and must employ a safeguard that combines Newton steps with backtracking and bisection as needed.\n3. Analyze mathematically the conditions under which the Newton iteration will converge for this model and discuss the effect of two initial guess strategies. Then, evaluate these strategies numerically using the provided test suite.\n\nModel data and units:\n- Use $T$ in $\\mathrm{K}$, $h$ in $\\mathrm{J}\\,\\mathrm{kg}^{-1}$, and $c_p$ in $\\mathrm{J}\\,\\mathrm{kg}^{-1}\\,\\mathrm{K}^{-1}$.\n- Let $T_{\\mathrm{ref}} = 298.15$.\n- Let $a = 850.0$, $b = 0.1$, and $c = 1.0\\times 10^{-4}$.\n- With this choice, $c_p(T) > 0$ on a broad temperature range relevant to combustion and high-temperature gas dynamics, and $h(T)$ is strictly increasing, ensuring a unique inverse on any interval where $c_p(T)$ remains positive.\n- Use the closed-form integral implied by the fundamental base when evaluating $h(T)$.\n\nNumerical algorithm inputs and rules:\n- Temperature bracket: $T_{\\min} = 200.0$ and $T_{\\max} = 2500.0$.\n- Convergence tolerances:\n  - Temperature increment tolerance: $\\varepsilon_T = 10^{-10}$ in $\\mathrm{K}$.\n  - Residual tolerance: $\\varepsilon_h = 10^{-6}$ in $\\mathrm{J}\\,\\mathrm{kg}^{-1}$.\n- Maximum iterations: $N_{\\max} = 50$.\n- Globalization:\n  - If a raw Newton step would leave $[T_{\\min},T_{\\max}]$, perform a backtracking line search (step damping) and, if necessary, fall back to a bisection step using the current bracket that encloses the root.\n  - Update the bracketing interval using the sign of the residual at the accepted iterate to maintain a valid enclosure.\n\nInitial guess strategies to compare:\n- Strategy $\\mathrm{S1}$ (reference linearization): $T_0^{\\mathrm{S1}} = T_{\\mathrm{ref}} + h^\\star / c_p(T_{\\mathrm{ref}})$.\n- Strategy $\\mathrm{S2}$ (midpoint of the admissible bracket): $T_0^{\\mathrm{S2}} = \\tfrac{1}{2}(T_{\\min}+T_{\\max})$.\n- In all cases, clamp the initial guess to the bracket.\n\nTest suite:\n- For each test, the program must construct the target enthalpy $h^\\star$ from a known “true” temperature $T_{\\mathrm{true}}$ by exact evaluation of the integral $h(T_{\\mathrm{true}})$ and then attempt to recover the temperature via the inversion algorithm. Use the following set of true temperatures:\n  - Case $1$: $T_{\\mathrm{true}} = 900.0$.\n  - Case $2$: $T_{\\mathrm{true}} = 300.0$.\n  - Case $3$: $T_{\\mathrm{true}} = 2200.0$.\n  - Case $4$: $T_{\\mathrm{true}} = 250.0$.\n  - Case $5$: $T_{\\mathrm{true}} = 1500.0$.\n\nProgram output requirements:\n- For each case, run both initial guess strategies $\\mathrm{S1}$ and $\\mathrm{S2}$ and return, for each, the computed temperature in $\\mathrm{K}$, the number of iterations taken, and a boolean flag indicating convergence under the stated tolerances.\n- Express temperatures in $\\mathrm{K}$ rounded to six decimal places. The iteration count must be an integer. The convergence flag must be a boolean.\n- Your program should produce a single line of output containing the results as a comma-separated Python-style list of lists, one sub-list per test case. Each sub-list must be\n  $[T^{\\mathrm{S1}}, n^{\\mathrm{S1}}, \\mathrm{conv}^{\\mathrm{S1}}, T^{\\mathrm{S2}}, n^{\\mathrm{S2}}, \\mathrm{conv}^{\\mathrm{S2}}]$,\n  where $T^{\\mathrm{S1}}$ and $T^{\\mathrm{S2}}$ are floats in $\\mathrm{K}$ rounded to six decimals, $n^{\\mathrm{S1}}$ and $n^{\\mathrm{S2}}$ are integers, and $\\mathrm{conv}^{\\mathrm{S1}}$, $\\mathrm{conv}^{\\mathrm{S2}}$ are booleans.\n- For example, the final output format must look like\n  $[[T_1^{\\mathrm{S1}}, n_1^{\\mathrm{S1}}, \\mathrm{conv}_1^{\\mathrm{S1}}, T_1^{\\mathrm{S2}}, n_1^{\\mathrm{S2}}, \\mathrm{conv}_1^{\\mathrm{S2}}],\\dots]$\n  on a single line, with no additional text.", "solution": "The problem statement is assessed to be valid. It is scientifically grounded in the principles of thermodynamics, well-posed with a unique solution guaranteed by the provided model, and objective in its formulation. All data and algorithmic requirements are complete and consistent. We may, therefore, proceed with the solution.\n\nThe task is to find the temperature $T$ that corresponds to a given specific enthalpy $h^\\star$ for a calorically imperfect gas. The relationship between specific enthalpy $h$ and temperature $T$ is defined by the specific heat at constant pressure, $c_p(T)$.\n\nFirst, we establish the explicit functional relationship between $h$ and $T$. The definition is $dh = c_p(T) dT$. Integrating this from a reference temperature $T_{\\mathrm{ref}}$ to an arbitrary temperature $T$, and setting the reference enthalpy to zero, yields:\n$$\nh(T) = \\int_{T_{\\mathrm{ref}}}^{T} c_p(\\theta)\\, d\\theta\n$$\nThe specific heat is given by a polynomial model:\n$$\nc_p(T) = a + bT + cT^2\n$$\nSubstituting this into the integral for $h(T)$, we perform the integration:\n$$\nh(T) = \\int_{T_{\\mathrm{ref}}}^{T} (a + b\\theta + c\\theta^2)\\, d\\theta = \\left[ a\\theta + \\frac{b}{2}\\theta^2 + \\frac{c}{3}\\theta^3 \\right]_{T_{\\mathrm{ref}}}^{T}\n$$\nThis results in the closed-form expression for specific enthalpy:\n$$\nh(T) = \\left( aT + \\frac{b}{2}T^2 + \\frac{c}{3}T^3 \\right) - \\left( aT_{\\mathrm{ref}} + \\frac{b}{2}T_{\\mathrm{ref}}^2 + \\frac{c}{3}T_{\\mathrm{ref}}^3 \\right)\n$$\nFor convenience, we can define a primitive function $H(T) = aT + \\frac{b}{2}T^2 + \\frac{c}{3}T^3$, such that $h(T) = H(T) - H(T_{\\mathrm{ref}})$.\n\nThe problem of inverting this relationship to find $T$ for a given $h^\\star$ is equivalent to finding the root of the residual function $r(T)$:\n$$\nr(T) = h(T) - h^\\star = 0\n$$\nTo solve this using Newton's method, we require the derivative of the residual function, $r'(T)$. Using the Fundamental Theorem of Calculus, the derivative of an integral with respect to its upper limit is the integrand evaluated at that limit.\n$$\nr'(T) = \\frac{d}{dT} \\left( \\int_{T_{\\mathrm{ref}}}^{T} c_p(\\theta)\\, d\\theta - h^\\star \\right) = c_p(T)\n$$\nThus, $r'(T) = a + bT + cT^2$. The Newton iteration for finding the root $T$ is given by the recursive formula:\n$$\nT_{k+1} = T_k - \\frac{r(T_k)}{r'(T_k)} = T_k - \\frac{h(T_k) - h^\\star}{c_p(T_k)}\n$$\nwhere $T_k$ is the temperature at iteration $k$.\n\nThe numerical algorithm must be robust. A globalization strategy is required to ensure convergence even when the initial guess is far from the root. The specified temperature bracket is $[T_{\\min}, T_{\\max}] = [200.0, 2500.0]$. A hybrid Newton-bisection algorithm will be implemented.\nFirst, we must verify that a root exists within the bracket by checking if $r(T_{\\min})$ and $r(T_{\\max})$ have opposite signs. Given the provided constants $a = 850.0$, $b = 0.1$, and $c = 1.0 \\times 10^{-4}$, the derivative $c_p(T)$ is a parabola opening upwards with its minimum at $T = -b/(2c) = -500.0$ K. For $T \\ge 200.0$ K, $c_p(T) > 0$, so $h(T)$ is strictly increasing. This guarantees a unique root inside any bracket $[T_L, T_R]$ if $h^\\star$ is between $h(T_L)$ and $h(T_R)$.\n\nThe algorithm proceeds as follows:\n1.  Initialize the iteration count $k = 0$, the temperature bracket $[T_L, T_R] = [T_{\\min}, T_{\\max}]$, and the initial guess $T_0$ according to the chosen strategy (S1 or S2), clamped to the bracket.\n2.  In each iteration $k$, starting with the current guess $T_k$:\n    a. Calculate the residual $r(T_k)$ and its derivative $c_p(T_k)$.\n    b. Compute the Newton step $\\Delta T_k = -r(T_k)/c_p(T_k)$ and the proposed next iterate $T_{\\text{prop}} = T_k + \\Delta T_k$.\n    c. If the proposed iterate $T_{\\text{prop}}$ falls outside the current search bracket $[T_L, T_R]$, the raw Newton step is rejected. A more conservative bisection step is taken instead: $T_{k+1} = T_L + 0.5(T_R - T_L)$.\n    d. Otherwise, the Newton step is accepted: $T_{k+1} = T_{\\text{prop}}$.\n    e. The bracketing interval is updated for the next iteration. By evaluating the sign of the residual at the new iterate, $r(T_{k+1})$, the bracket is narrowed. If $\\text{sign}(r(T_{k+1})) = \\text{sign}(r(T_L))$, the new left boundary becomes $T_L = T_{k+1}$. Otherwise, the new right boundary becomes $T_R = T_{k+1}$. This ensures the root remains bracketed.\n3.  The iteration terminates if convergence is achieved or the maximum number of iterations, $N_{\\max} = 50$, is reached. Convergence is defined as satisfying either of two conditions:\n    a. The change in temperature is below a tolerance: $|T_{k+1} - T_k| < \\varepsilon_T = 10^{-10}$ K.\n    b. The magnitude of the enthalpy residual is below a tolerance: $|r(T_{k+1})| = |h(T_{k+1}) - h^\\star| < \\varepsilon_h = 10^{-6}$ J/kg.\n\nThe mathematical conditions for convergence of Newton's method are favorable here. The function $r(T)$ has its second derivative as $r''(T) = c_p'(T) = b + 2cT$. For all $T > -b/(2c) = -500.0$ K, $r''(T)>0$. This means $r(T)$ is a convex function over the entire temperature range of interest $[200.0, 2500.0]$. For a convex function, Newton's method is guaranteed to converge to the unique root from any starting point $T_0$ for which $r(T_0)>0$, and will converge rapidly from starting points $T_0 < T^\\star$. The implemented globalization strategy provides an additional layer of robustness, guaranteeing convergence even in less ideal circumstances.\n\nWe analyze two initial guess strategies:\n- **Strategy S1**: $T_0^{\\mathrm{S1}} = T_{\\mathrm{ref}} + h^\\star / c_p(T_{\\mathrm{ref}})$. This guess is derived from a first-order Taylor series expansion of the inverse function $T(h)$ around the reference state $(T_{\\mathrm{ref}}, h=0)$. It linearizes the problem using the specific heat at the reference temperature. This \"informed\" guess is expected to be highly accurate when the true temperature $T_{\\mathrm{true}}$ is near $T_{\\mathrm{ref}} = 298.15$ K, and should remain a good estimate for temperatures where $c_p(T)$ does not deviate drastically from $c_p(T_{\\mathrm{ref}})$.\n- **Strategy S2**: $T_0^{\\mathrm{S2}} = \\tfrac{1}{2}(T_{\\min}+T_{\\max}) = 1350.0$ K. This \"uninformed\" guess is fixed at the midpoint of the admissible temperature bracket, irrespective of the target enthalpy $h^\\star$. It is a safe but potentially inefficient starting point, especially when the true root lies near the boundaries of the bracket.\n\nWe expect Strategy S1 to be superior, resulting in fewer iterations across the test suite, due to its physical basis. Strategy S2's performance will depend strongly on the proximity of the true temperature to the bracket's midpoint. Both strategies are expected to converge successfully due to the robustness of the implemented algorithm.", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Implements and analyzes a Newton-Raphson-based solver for inverting a\n    temperature-dependent specific enthalpy function for a calorically imperfect gas.\n    The solution is derived from first principles and includes a robust globalization\n    strategy combining Newton steps with bisection.\n    \"\"\"\n\n    # --- Model Data and Constants ---\n    a = 850.0  # J/kg/K\n    b = 0.1    # J/kg/K^2\n    c = 1.0e-4 # J/kg/K^3\n    T_ref = 298.15  # K\n\n    # --- Numerical Algorithm Parameters ---\n    T_min = 200.0  # K\n    T_max = 2500.0 # K\n    eps_T = 1.0e-10 # K\n    eps_h = 1.0e-6  # J/kg\n    N_max = 50\n\n    # --- Pre-calculate reference enthalpy primitive ---\n    H_T_ref = a * T_ref + (b / 2.0) * T_ref**2 + (c / 3.0) * T_ref**3\n\n    def c_p(T):\n        \"\"\"Calculates specific heat at constant pressure, c_p(T).\"\"\"\n        return a + b * T + c * T**2\n\n    def h(T):\n        \"\"\"Calculates specific enthalpy, h(T), relative to T_ref.\"\"\"\n        H_T = a * T + (b / 2.0) * T**2 + (c / 3.0) * T**3\n        return H_T - H_T_ref\n\n    def invert_h_to_T(h_target, initial_guess_strategy):\n        \"\"\"\n        Inverts h(T) = h_target to find T using a robust Newton's method.\n        \"\"\"\n        # --- A priori root bracketing check ---\n        # With the given constants, h(T) is strictly increasing for T > 0.\n        if not (h(T_min) <= h_target <= h(T_max)):\n            # This should not happen with the given test cases.\n            return T_min, N_max, False\n\n        # --- Determine initial guess T_0 ---\n        if initial_guess_strategy == 'S1':\n            T_0 = T_ref + h_target / c_p(T_ref)\n        elif initial_guess_strategy == 'S2':\n            T_0 = 0.5 * (T_min + T_max)\n        else:\n            raise ValueError(\"Invalid initial guess strategy.\")\n\n        # Clamp initial guess to the global bracket\n        T_k = np.clip(T_0, T_min, T_max)\n\n        # --- Initialize Globalization Bracket ---\n        T_L, T_R = T_min, T_max\n        r_L = h(T_L) - h_target\n\n        for n_iter in range(1, N_max + 1):\n            # Calculate residual and derivative at current iterate T_k\n            r_k = h(T_k) - h_target\n            r_prime_k = c_p(T_k)\n\n            # Avoid division by zero, though c_p(T) > 0 in the bracket\n            if abs(r_prime_k) < 1e-12:\n                break\n\n            # --- Hybrid Newton-Bisection Step ---\n            # Proposed Newton step\n            delta_T = -r_k / r_prime_k\n            T_prop = T_k + delta_T\n\n            # Globalization: check if Newton step is within the current bracket\n            if T_prop <= T_L or T_prop >= T_R:\n                # Fallback to bisection\n                T_k_plus_1 = T_L + 0.5 * (T_R - T_L)\n            else:\n                # Accept Newton step\n                T_k_plus_1 = T_prop\n\n            # --- Check for Convergence ---\n            r_k_plus_1 = h(T_k_plus_1) - h_target\n            temp_step = abs(T_k_plus_1 - T_k)\n\n            if temp_step < eps_T or abs(r_k_plus_1) < eps_h:\n                return T_k_plus_1, n_iter, True\n            \n            # --- Update Bracket for Next Iteration ---\n            if r_k_plus_1 * r_L > 0:\n                T_L = T_k_plus_1\n                r_L = r_k_plus_1\n            else:\n                T_R = T_k_plus_1\n            \n            # Prepare for next iteration\n            T_k = T_k_plus_1\n\n        # If loop finishes, convergence was not achieved\n        return T_k, N_max, False\n\n    # --- Test Suite ---\n    test_cases_T_true = [900.0, 300.0, 2200.0, 250.0, 1500.0]\n    \n    results = []\n    for T_true in test_cases_T_true:\n        h_star = h(T_true)\n        \n        # Run with Strategy S1\n        T_s1, n_s1, conv_s1 = invert_h_to_T(h_star, 'S1')\n        \n        # Run with Strategy S2\n        T_s2, n_s2, conv_s2 = invert_h_to_T(h_star, 'S2')\n        \n        case_result = [\n            round(T_s1, 6), n_s1, conv_s1,\n            round(T_s2, 6), n_s2, conv_s2\n        ]\n        results.append(case_result)\n\n    # --- Final Output Formatting ---\n    # The output format is a python-style list of lists string representation.\n    # The str() of a list automatically handles spacing and True/False boolean representation.\n    # The result is joined to form the final string.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```"}]}