{"hands_on_practices": [{"introduction": "Before any Lattice Boltzmann Method (LBM) simulation can begin, we must perform the crucial task of mapping the physical problem onto the discrete lattice world. This involves ensuring that key dimensionless quantities, such as the Reynolds number ($Re$) and Peclet number ($Pe$), are identical in both the physical system and the simulation. This practice will guide you through the fundamental process of selecting lattice parameters, like the relaxation times $\\tau_{\\nu}$ and $\\tau_{T}$, that correctly represent the physical fluid's kinematic viscosity ($\\nu$) and thermal diffusivity ($\\alpha$) on your chosen computational grid. [@problem_id:2500937]", "problem": "A two-dimensional heated channel of length $L$ and height $H$ carries a passive scalar with advection by a steady flow of characteristic speed $U$. The fluid has kinematic viscosity $\\nu$ and thermal diffusivity $\\alpha$. You will set up a lattice Boltzmann method (LBM) simulation using a single-relaxation-time Bhatnagar–Gross–Krook (BGK) model and a two-dimensional nine-velocity (D2Q9) lattice for both the momentum and scalar transport. The lattice discrete sound speed satisfies $c_{s}^{2} = 1/3$. The Reynolds number (Re) and Peclet number (Pe) are defined by $Re = UL/\\nu$ and $Pe = UL/\\alpha$.\n\nGiven the following physical properties and geometry:\n- $L = 0.100\\,\\mathrm{m}$, $H = 0.010\\,\\mathrm{m}$,\n- $U = 0.50\\,\\mathrm{m/s}$,\n- $\\nu = 1.5 \\times 10^{-5}\\,\\mathrm{m^{2}/s}$,\n- $\\alpha = 2.2 \\times 10^{-5}\\,\\mathrm{m^{2}/s}$,\n\ndesign a lattice with $N_{x} = 1000$ nodes uniformly spanning the length $L$ (use a square lattice so that the lattice spacing is $\\Delta x = L/N_{x}$ in both directions). To keep compressibility error small, choose a characteristic lattice speed $U_{\\ell b} = 0.050$ (in lattice units). Using the similarity requirement that the Reynolds number and Peclet number computed in lattice units equal their physical values, determine the time step $\\Delta t$ consistent with this choice, and then compute the BGK relaxation times for momentum and temperature, $\\tau_{\\nu}$ and $\\tau_{T}$, required to represent the given $\\nu$ and $\\alpha$.\n\nExpress the final answer as a row matrix $\\left(\\tau_{\\nu},\\ \\tau_{T}\\right)$ with no units. Round your answer to five significant figures.", "solution": "The problem as stated is scientifically grounded, well-posed, objective, and contains sufficient information for a unique solution. It is a standard exercise in applying the scaling relations of the Lattice Boltzmann Method (LBM). Therefore, I will proceed with the derivation.\n\nThe core principle of LBM simulation is the invariance of dimensionless numbers, such as the Reynolds number ($Re$) and Peclet number ($Pe$), between the physical system and its lattice representation. This requires consistent scaling of physical quantities (length, time, mass) to their counterparts in lattice units.\n\nFirst, we define the lattice parameters. The physical length of the channel is $L = 0.100\\,\\mathrm{m}$, which is discretized by $N_{x} = 1000$ nodes. This defines the lattice spacing, $\\Delta x$, which is the physical distance between adjacent lattice nodes.\n$$\n\\Delta x = \\frac{L}{N_{x}} = \\frac{0.100\\,\\mathrm{m}}{1000} = 1.0 \\times 10^{-4}\\,\\mathrm{m}\n$$\nThe problem specifies a square lattice, so the spacing is the same in both dimensions.\n\nNext, we must determine the simulation time step, $\\Delta t$. This is found by relating the physical characteristic velocity, $U = 0.50\\,\\mathrm{m/s}$, to the specified characteristic velocity in lattice units, $U_{\\ell b} = 0.050$. The conversion between physical velocity ($v_{p}$) and lattice velocity ($v_{\\ell b}$) is given by $v_{p} = v_{\\ell b} \\frac{\\Delta x}{\\Delta t}$. Applying this to the characteristic velocities:\n$$\nU = U_{\\ell b} \\frac{\\Delta x}{\\Delta t}\n$$\nSolving for the time step $\\Delta t$:\n$$\n\\Delta t = \\frac{U_{\\ell b} \\Delta x}{U} = \\frac{0.050 \\times (1.0 \\times 10^{-4}\\,\\mathrm{m})}{0.50\\,\\mathrm{m/s}} = 1.0 \\times 10^{-5}\\,\\mathrm{s}\n$$\n\nWith the scaling factors $\\Delta x$ and $\\Delta t$ established, we can convert the physical transport coefficients—kinematic viscosity $\\nu$ and thermal diffusivity $\\alpha$—into their lattice unit equivalents, $\\nu_{\\ell b}$ and $\\alpha_{\\ell b}$. The conversion for these quantities, which have units of length$^2$/time, is given by:\n$$\n\\nu_{\\ell b} = \\frac{\\nu \\Delta t}{\\Delta x^{2}} \\quad \\text{and} \\quad \\alpha_{\\ell b} = \\frac{\\alpha \\Delta t}{\\Delta x^{2}}\n$$\nSubstituting the given physical values and the calculated scaling factors:\n$\\nu = 1.5 \\times 10^{-5}\\,\\mathrm{m^{2}/s}$\n$\\alpha = 2.2 \\times 10^{-5}\\,\\mathrm{m^{2}/s}$\n$$\n\\nu_{\\ell b} = \\frac{(1.5 \\times 10^{-5}\\,\\mathrm{m^{2}/s}) \\times (1.0 \\times 10^{-5}\\,\\mathrm{s})}{(1.0 \\times 10^{-4}\\,\\mathrm{m})^{2}} = \\frac{1.5 \\times 10^{-10}}{1.0 \\times 10^{-8}} = 0.015\n$$\n$$\n\\alpha_{\\ell b} = \\frac{(2.2 \\times 10^{-5}\\,\\mathrm{m^{2}/s}) \\times (1.0 \\times 10^{-5}\\,\\mathrm{s})}{(1.0 \\times 10^{-4}\\,\\mathrm{m})^{2}} = \\frac{2.2 \\times 10^{-10}}{1.0 \\times 10^{-8}} = 0.022\n$$\nThese are the dimensionless values for viscosity and diffusivity in the lattice simulation.\n\nFinally, we use the relations from the single-relaxation-time Bhatnagar–Gross–Krook (BGK) model for the D2Q9 lattice to find the required relaxation times, $\\tau_{\\nu}$ and $\\tau_{T}$. For this model, the transport coefficients in lattice units are related to their respective relaxation times by:\n$$\n\\nu_{\\ell b} = c_{s}^{2} (\\tau_{\\nu} - 0.5)\n$$\n$$\n\\alpha_{\\ell b} = c_{s}^{2} (\\tau_{T} - 0.5)\n$$\nThe problem specifies the square of the lattice speed of sound as $c_{s}^{2} = 1/3$. We can now solve for the relaxation times.\n\nFor the momentum relaxation time, $\\tau_{\\nu}$:\n$$\n\\tau_{\\nu} = \\frac{\\nu_{\\ell b}}{c_{s}^{2}} + 0.5 = \\frac{0.015}{1/3} + 0.5 = 3 \\times 0.015 + 0.5 = 0.045 + 0.5 = 0.545\n$$\nFor the temperature (passive scalar) relaxation time, $\\tau_{T}$:\n$$\n\\tau_{T} = \\frac{\\alpha_{\\ell b}}{c_{s}^{2}} + 0.5 = \\frac{0.022}{1/3} + 0.5 = 3 \\times 0.022 + 0.5 = 0.066 + 0.5 = 0.566\n$$\nThe problem requires the answer to be rounded to five significant figures.\n$\\tau_{\\nu} = 0.54500$\n$\\tau_{T} = 0.56600$\n\nThe final answer is presented as a row matrix.", "answer": "$$\n\\boxed{\\begin{pmatrix} 0.54500 & 0.56600 \\end{pmatrix}}\n$$", "id": "2500937"}, {"introduction": "Writing code is only the first step; verifying its correctness is paramount. This exercise introduces the \"grid refinement study,\" a gold-standard technique in numerical analysis for confirming that a solver behaves as theoretically predicted. You will implement a basic D1Q3 LBM solver for the diffusion equation and compare its output against a known exact solution, calculating the observed order of accuracy to verify that the implementation is indeed second-order accurate in space. [@problem_id:2500947]", "problem": "A one-dimensional diffusive heat pulse evolves according to the heat equation on a periodic domain. Consider the scalar temperature field $T(x,t)$ on a periodic interval of length $L$, governed by the equation $\\partial_t T = \\alpha \\partial_{xx} T$, where $\\alpha$ is the constant thermal diffusivity. The lattice Boltzmann method (LBM) with the single-relaxation-time Bhatnagar–Gross–Krook (BGK) model in the one-dimensional, three-velocity stencil (D1Q3) will be used to approximate the evolution of this scalar field. The D1Q3 model employs discrete particle velocities $e_i \\in \\{-c, 0, +c\\}$ in physical units, quadrature weights $w_0 = 2/3$ and $w_{\\pm 1} = 1/6$, and a linear equilibrium distribution $f_i^{\\mathrm{eq}} = w_i T$ for the scalar. The lattice sound speed satisfies $c_s^2 = c^2/3$. Under diffusive scaling consistent with the macroscopic heat equation, the thermal diffusivity is related to the lattice parameters by $\\alpha = c_s^2 (\\tau - 1/2)\\Delta t$, where $\\tau$ is the dimensionless relaxation time and $\\Delta t$ is the physical time step. With a uniform grid of $N_x$ nodes and grid spacing $\\Delta x = L/N_x$, streaming in D1Q3 is exact when $c = \\Delta x/\\Delta t$, which implies the coupling $\\Delta t = \\frac{\\Delta x^2}{3\\alpha}(\\tau - 1/2)$ to keep $\\alpha$ fixed as the grid is refined.\n\nInitial condition and exact solution. Let the initial temperature be a periodic Gaussian pulse of amplitude $A$ and width parameter $\\sigma_0$, centered at $x_0 = L/2$. The $2J+1$-image periodic approximation is\n$$\nT(x,0) \\;=\\; A\\sum_{j=-J}^{J} \\exp\\!\\left(-\\frac{(x-x_0 + jL)^2}{\\sigma_0^2}\\right).\n$$\nBy linear superposition and the fundamental solution of the heat equation, the corresponding periodic exact solution at time $t$ is\n$$\nT_{\\mathrm{exact}}(x,t) \\;=\\; A\\sqrt{\\frac{\\sigma_0^2}{\\sigma_0^2 + 4\\alpha t}} \\;\\sum_{j=-J}^{J} \\exp\\!\\left(-\\frac{(x-x_0 + jL)^2}{\\sigma_0^2 + 4\\alpha t}\\right).\n$$\nAll quantities are nondimensional, so report any final numerical values as unitless numbers.\n\nDiscretization and error norm. Implement the scalar D1Q3 LBM with BGK collision and exact streaming on a periodic grid. The macroscopic temperature is the zeroth moment $T = \\sum_i f_i$. Initialize the populations by $f_i(x,0) = w_i T(x,0)$. Evolve for $N_t = \\mathrm{round}(T_{\\mathrm{final}}/\\Delta t)$ time steps to approximate the solution at $t^\\ast = N_t \\Delta t$. Compare the numerical solution $T_{\\mathrm{num}}(x,t^\\ast)$ with the exact solution $T_{\\mathrm{exact}}(x,t^\\ast)$ using the discrete $L^2$ norm\n$$\nE \\;=\\; \\left(\\Delta x \\sum_{k=0}^{N_x-1} \\left[T_{\\mathrm{num}}(x_k,t^\\ast) - T_{\\mathrm{exact}}(x_k,t^\\ast)\\right]^2 \\right)^{1/2}.\n$$\n\nObserved orders of accuracy. Perform a grid refinement study with $N_x \\in \\{64,128,256,512\\}$ while keeping $\\alpha$ fixed via the diffusive scaling relation above. For each refinement, compute the error $E$, the grid spacing $\\Delta x$, and the time step $\\Delta t$. Estimate:\n- the observed spatial order $p_x$ as the slope of the least-squares linear fit of $\\log E$ versus $\\log \\Delta x$;\n- the observed temporal order $p_t$ as the slope of the least-squares linear fit of $\\log E$ versus $\\log \\Delta t$.\nBecause $\\Delta t \\propto \\Delta x^2$ under diffusive scaling, both fits must be performed on the same set of refinement data to separately characterize how errors scale with $\\Delta x$ and with $\\Delta t$.\n\nTest suite. Use the following three parameter sets, each with domain length $L=1$, center $x_0=L/2$, and image count $J=6$:\n- Case A (baseline): $\\alpha=0.02$, $\\tau=0.8$, $\\sigma_0=0.05$, $A=1.0$, $T_{\\mathrm{final}}=0.02$.\n- Case B (lower diffusivity): $\\alpha=0.005$, $\\tau=0.8$, $\\sigma_0=0.05$, $A=1.0$, $T_{\\mathrm{final}}=0.02$.\n- Case C (sharper pulse): $\\alpha=0.02$, $\\tau=0.8$, $\\sigma_0=0.03$, $A=1.0$, $T_{\\mathrm{final}}=0.02$.\n\nProgram requirements. Write a complete program that:\n- Implements the D1Q3 scalar LBM described above for each case and for $N_x \\in \\{64,128,256,512\\}$.\n- For each case, computes the arrays $\\{E\\}$, $\\{\\Delta x\\}$, and $\\{\\Delta t\\}$ across refinements, then returns $(p_x, p_t)$ using least-squares fits.\n- Produces as its only output a single line containing the six floating-point values $[p_x^{(A)},p_t^{(A)},p_x^{(B)},p_t^{(B)},p_x^{(C)},p_t^{(C)}]$ in that order, each rounded to three decimal places, formatted as a comma-separated list enclosed in square brackets.\n\nAngle units and physical units. There are no angle quantities, and all variables are nondimensional. No physical units should be reported; all outputs are pure numbers.\n\nYour program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets (e.g., \"[result1,result2,result3,result4,result5,result6]\").", "solution": "The problem statement is subjected to validation and is found to be scientifically sound, well-posed, and self-contained. It presents a standard numerical analysis task involving the application of the lattice Boltzmann method (LBM) to the one-dimensional heat equation. All parameters, equations, and procedures are specified with sufficient clarity and correctness to permit a unique solution. We therefore proceed with the derivation and implementation of the solution.\n\nThe problem requires the numerical solution of the scalar heat diffusion equation,\n$$\n\\partial_t T = \\alpha \\,\\partial_{xx} T\n$$\non a one-dimensional periodic domain of length $L$. The method specified is the D1Q3 lattice Boltzmann model with a Bhatnagar-Gross-Krook (BGK) collision operator.\n\nThe D1Q3 model discretizes velocity space into three directions, $i \\in \\{0, 1, 2\\}$, corresponding to microscopic particle velocities $e_0 = 0$, $e_1 = +c$, and $e_2 = -c$. The evolution of the particle distribution functions, $f_i(x,t)$, is governed by the lattice Boltzmann equation:\n$$\nf_i(x+e_i\\Delta t, t+\\Delta t) - f_i(x,t) = -\\frac{1}{\\tau} (f_i(x,t) - f_i^{\\mathrm{eq}}(x,t))\n$$\nwhere $\\tau$ is the dimensionless relaxation time, and $f_i^{\\mathrm{eq}}$ is the local equilibrium distribution. The left-hand side represents the streaming of particles to adjacent lattice sites, while the right-hand side represents the relaxation towards equilibrium due to collisions.\n\nFor a scalar diffusive process, the equilibrium distribution is a linear function of the macroscopic scalar field, in this case, the temperature $T$. It is given by $f_i^{\\mathrm{eq}} = w_i T$, where $w_i$ are the quadrature weights. For the D1Q3 stencil, these weights are $w_0 = 2/3$ and $w_{1,2} = 1/6$. The macroscopic temperature is recovered as the zeroth moment of the distribution functions:\n$$\nT(x,t) = \\sum_{i=0}^{2} f_i(x,t)\n$$\nIt can be verified that $\\sum_i f_i^{\\mathrm{eq}} = \\sum_i w_i T = T(\\sum_i w_i) = T(2/3 + 1/6 + 1/6) = T$, which ensures local conservation of the scalar quantity $T$ during collision.\n\nThe numerical algorithm proceeds in two steps at each time increment: collision and streaming.\n1.  **Collision Step**: The post-collision distribution functions, $f_i^{\\ast}$, are computed at each grid node $x_k$:\n    $$\n    f_i^{\\ast}(x_k, t) = f_i(x_k, t) - \\frac{1}{\\tau} (f_i(x_k, t) - f_i^{\\mathrm{eq}}(x_k, t))\n    $$\n    First, the macroscopic temperature $T(x_k,t) = \\sum_i f_i(x_k,t)$ is calculated from the current populations. Then, the equilibrium populations $f_i^{\\mathrm{eq}}(x_k,t) = w_i T(x_k,t)$ are determined, and finally the collision update is applied.\n\n2.  **Streaming Step**: The post-collision populations propagate to adjacent nodes according to their velocities. With the lattice speed set to $c = \\Delta x/\\Delta t$, where $\\Delta x$ is the grid spacing and $\\Delta t$ is the time step, particles move exactly from one node to its neighbor in one time step. For a periodic domain, this is implemented as a circular shift:\n    $$\n    f_0(x_k, t+\\Delta t) = f_0^{\\ast}(x_k, t) \\\\\n    f_1(x_k, t+\\Delta t) = f_1^{\\ast}(x_{k-1}, t) \\\\\n    f_2(x_k, t+\\Delta t) = f_2^{\\ast}(x_{k+1}, t)\n    $$\n    The indices $k-1$ and $k+1$ are handled with periodic wrap-around.\n\nThe simulation is initialized at time $t=0$. The initial temperature field $T(x,0)$ is given by a periodic sum of Gaussian functions. The initial particle distributions are set to be in local equilibrium with this field: $f_i(x_k, 0) = f_i^{\\mathrm{eq}}(x_k, 0) = w_i T(x_k, 0)$. The simulation then evolves for $N_t = \\mathrm{round}(T_{\\mathrm{final}}/\\Delta t)$ time steps. The final numerical temperature profile $T_{\\mathrm{num}}(x_k, t^{\\ast})$ is computed at the actual final time $t^{\\ast} = N_t \\Delta t$.\n\nThe problem specifies a diffusive scaling relationship to keep the physical thermal diffusivity $\\alpha$ constant across grid refinements. The relation is:\n$$\n\\alpha = c_s^2 (\\tau - 1/2) \\Delta t\n$$\nwhere $c_s^2 = c^2/3 = (\\Delta x/\\Delta t)^2/3$ is the square of the lattice sound speed. Substituting $c_s^2$ into the expression for $\\alpha$ and solving for $\\Delta t$ yields the explicit coupling between the time step and grid spacing:\n$$\n\\Delta t = \\frac{\\Delta x^2}{3\\alpha} (\\tau - 1/2)\n$$\nThis relation implies that $\\Delta t \\propto \\Delta x^2$.\n\nA grid refinement study is performed using grid sizes $N_x \\in \\{64, 128, 256, 512\\}$. For each $N_x$, the grid spacing is $\\Delta x=L/N_x$, and the corresponding $\\Delta t$ is calculated. The simulation is run, and the error $E$ is computed using the discrete $L^2$ norm against the provided exact solution evaluated at $t^{\\ast}$:\n$$\nE = \\left(\\Delta x \\sum_{k=0}^{N_x-1} \\left[T_{\\mathrm{num}}(x_k, t^{\\ast}) - T_{\\mathrm{exact}}(x_k, t^{\\ast})\\right]^2 \\right)^{1/2}\n$$\nThe order of accuracy is determined from the assumption of an error scaling law $E \\approx C (\\Delta x)^{p_x}$ for some constant $C$ and spatial order $p_x$. Taking the logarithm gives $\\log E \\approx \\log C + p_x \\log \\Delta x$. The spatial order $p_x$ is therefore the slope of the least-squares linear fit of $\\log E$ versus $\\log \\Delta x$. Similarly, since $\\Delta t \\propto \\Delta x^2$, we have $\\log E \\approx \\log C' + p_t \\log \\Delta t$, where $p_t = p_x/2$. The temporal order $p_t$ is the slope of the fit of $\\log E$ versus $\\log \\Delta t$. These two slopes will be computed for each of the three test cases specified. The LBM-BGK scheme for diffusion is expected to be second-order accurate in space, so we anticipate $p_x \\approx 2.0$ and consequently $p_t \\approx 1.0$.\n\nThe implementation proceeds by first defining functions for the initial condition and the exact analytical solution. A main simulation function encapsulates the LBM algorithm for a given set of physical and numerical parameters. This function is called for each refinement level. The resulting errors and grid parameters are collected. Finally, a linear regression is performed on the log-transformed data to extract the observed orders of accuracy, which are then reported.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.stats import linregress\n\ndef setup_exact_solution_function(L, A, sigma0, alpha, J, x0):\n    \"\"\"\n    Creates a function that computes the exact solution for a given time t.\n    \"\"\"\n    def get_exact_solution(x_grid, t):\n        if t == 0:\n            var_term = sigma0**2\n            time_prefactor = A\n        else:\n            var_term = sigma0**2 + 4 * alpha * t\n            time_prefactor = A * np.sqrt(sigma0**2 / var_term)\n\n        if var_term == 0:\n            # Handle the case of a delta function, though not expected here.\n            T_exact = np.zeros_like(x_grid)\n            idx = np.abs(x_grid - x0).argmin()\n            T_exact[idx] = np.inf\n            return T_exact\n\n        T_exact = np.zeros_like(x_grid)\n        for j in range(-J, J + 1):\n            T_exact += np.exp(-((x_grid - x0 + j * L)**2) / var_term)\n        \n        return time_prefactor * T_exact\n\n    return get_exact_solution\n\n\ndef run_lbm_and_get_error(Nx, L, alpha, tau, T_final, A, sigma0, J, x0):\n    \"\"\"\n    Runs a single D1Q3 LBM simulation and computes the L2 error.\n    \"\"\"\n    # Grid and time parameters\n    dx = L / Nx\n    dt = (dx**2 / (3 * alpha)) * (tau - 0.5)\n    Nt = int(round(T_final / dt))\n    t_star = Nt * dt\n    x = np.linspace(0, L, Nx, endpoint=False) + dx / 2.0\n\n    # LBM parameters\n    w = np.array([2./3., 1./6., 1./6.]) # w0, w+, w-\n    omega = 1.0 / tau\n\n    # Initialization\n    exact_solution_func = setup_exact_solution_function(L, A, sigma0, alpha, J, x0)\n    T0 = exact_solution_func(x, 0)\n    \n    # Populations f0, f+, f-\n    f0 = w[0] * T0\n    f1 = w[1] * T0\n    f2 = w[2] * T0\n    \n    # Main time-stepping loop\n    for _ in range(Nt):\n        # Macroscopic temperature\n        T = f0 + f1 + f2\n        \n        # Collision\n        f0_eq = w[0] * T\n        f1_eq = w[1] * T\n        f2_eq = w[2] * T\n        \n        f0 = f0 - omega * (f0 - f0_eq)\n        f1 = f1 - omega * (f1 - f1_eq)\n        f2 = f2 - omega * (f2 - f2_eq)\n        \n        # Streaming\n        f1 = np.roll(f1, 1)  # moves right\n        f2 = np.roll(f2, -1) # moves left\n\n    # Final numerical temperature\n    T_num = f0 + f1 + f2\n    \n    # Exact solution at final time\n    T_exact = exact_solution_func(x, t_star)\n    \n    # L2 Error calculation\n    error = np.sqrt(dx * np.sum((T_num - T_exact)**2))\n    \n    return error, dx, dt\n\n\ndef solve():\n    \"\"\"\n    Main function to run the test suite and compute orders of accuracy.\n    \"\"\"\n    test_cases = [\n        # Case A (baseline)\n        {\"alpha\": 0.02, \"tau\": 0.8, \"sigma0\": 0.05, \"A\": 1.0, \"T_final\": 0.02},\n        # Case B (lower diffusivity)\n        {\"alpha\": 0.005, \"tau\": 0.8, \"sigma0\": 0.05, \"A\": 1.0, \"T_final\": 0.02},\n        # Case C (sharper pulse)\n        {\"alpha\": 0.02, \"tau\": 0.8, \"sigma0\": 0.03, \"A\": 1.0, \"T_final\": 0.02},\n    ]\n\n    # Shared parameters\n    L = 1.0\n    x0 = L / 2.0\n    J = 6\n    Nx_refinements = [64, 128, 256, 512]\n    \n    all_results = []\n    \n    for case_params in test_cases:\n        errors = []\n        dxs = []\n        dts = []\n        \n        for Nx in Nx_refinements:\n            error, dx, dt = run_lbm_and_get_error(Nx, L, **case_params, J=J, x0=x0)\n            errors.append(error)\n            dxs.append(dx)\n            dts.append(dt)\n        \n        # Log-transform data for linear regression\n        log_errors = np.log(np.array(errors))\n        log_dxs = np.log(np.array(dxs))\n        log_dts = np.log(np.array(dts))\n        \n        # Perform linear regression to find slopes (orders of accuracy)\n        px_res = linregress(log_dxs, log_errors)\n        pt_res = linregress(log_dts, log_errors)\n        \n        px = px_res.slope\n        pt = pt_res.slope\n        \n        all_results.extend([px, pt])\n\n    # Format the final output string\n    # [px_A, pt_A, px_B, pt_B, px_C, pt_C] rounded to 3 decimal places\n    output_str = f\"[{','.join([f'{r:.3f}' for r in all_results])}]\"\n    print(output_str)\n\nsolve()\n```", "id": "2500947"}, {"introduction": "While the single-relaxation-time (BGK) model is simple, its limitations become apparent in challenging flows. This practice introduces the superior Multiple-Relaxation-Time (MRT) collision model, which provides independent control over the relaxation rates of different kinetic moments. Your task is to design an MRT relaxation spectrum, moving from a user of a standard model to a designer who can engineer a simulation for enhanced stability and accuracy by targeting specific damping rates for non-hydrodynamic modes. [@problem_id:2500997]", "problem": "You are to design a Multiple-Relaxation-Time (MRT) relaxation spectrum within the Lattice Boltzmann Method (LBM) for a two-dimensional nine-velocity lattice (D2Q9) to control the damping of a specified non-hydrodynamic moment, and then compute the attenuation of spurious modes in a shear wave test. Your solution must be implemented as a complete, runnable program.\n\nStarting point and modeling assumptions:\n- Begin from the discrete-time, discrete-velocity Boltzmann equation with collision and streaming on a regular lattice, where the collision step in moment space is diagonal. Consider the D2Q9 lattice with a linear moment basis where conserved moments are density and momentum, and non-conserved moments include the second-order stresses and higher-order kinetic moments. The collision step in moment space is given by a diagonal relaxation with rates that may differ per moment.\n- Assume small-amplitude perturbations so that linearization about a uniform equilibrium applies. Consider the usual Chapman–Enskog connection between the relaxation of the stress moments and the effective kinematic viscosity of the shear mode in the hydrodynamic limit.\n- Consider a transverse shear wave with velocity field $u_y(x,t)$ of small amplitude in a domain large enough to treat the wave number as fixed and to neglect boundary effects. The hydrodynamic shear mode amplitude decays diffusively with a rate set by the kinematic viscosity and the square of the wave number. Non-hydrodynamic (ghost) modes have zero equilibrium and decay purely due to relaxation.\n\nDesign objective:\n- Given a target decay rate $\\gamma_{\\mathrm{nh}}$ in $\\mathrm{s}^{-1}$ for a specific non-hydrodynamic moment (take the scalar “energy” moment commonly denoted $e$ in D2Q9 as the representative non-hydrodynamic moment with equilibrium equal to zero for the shear wave), design the MRT diagonal relaxation spectrum so that the relaxation parameter for that moment yields the desired decay rate. Also choose the stress-moment relaxation rate so that the effective kinematic viscosity equals a prescribed value $\\nu$ in $\\mathrm{m}^2/\\mathrm{s}$.\n- The lattice spacing is $\\Delta x$ in $\\mathrm{m}$, the time step is $\\Delta t$ in $\\mathrm{s}$, and the lattice speed is $c = \\Delta x / \\Delta t$. The lattice sound speed satisfies $c_s^2 = c^2 / 3$ in D2Q9.\n\nPerformance objective:\n- For a shear-wave test with initial transverse velocity amplitude $U_0$ in $\\mathrm{m}/\\mathrm{s}$ and wave number $k$ in $\\mathrm{m}^{-1}$, compute after $N$ time steps the following:\n    1. The MRT relaxation parameter for the chosen non-hydrodynamic moment, denoted $s_e$ (dimensionless).\n    2. The MRT relaxation parameter for the shear stress moments, denoted $s_v$ (dimensionless), chosen to realize the prescribed kinematic viscosity.\n    3. The attenuation factor of the non-hydrodynamic spurious mode amplitude, defined as the ratio $A_{\\mathrm{nh}}(N) / A_{\\mathrm{nh}}(0)$ (dimensionless).\n    4. The hydrodynamic shear-wave velocity amplitude at time $T = N \\Delta t$, denoted $U(T)$ in $\\mathrm{m}/\\mathrm{s}$, assuming diffusive decay of the shear mode in the linear regime.\n\nRequirements:\n- Derive from first principles how to express $s_e$ in terms of $\\gamma_{\\mathrm{nh}}$ and $\\Delta t$, and how to express $s_v$ in terms of $\\nu$, $c_s^2$, and $\\Delta t$. Then express $A_{\\mathrm{nh}}(N) / A_{\\mathrm{nh}}(0)$ and $U(T)$ in terms of the given parameters.\n- Clearly state and justify all intermediate steps by appealing to the discrete collision rule in moment space for a moment with zero equilibrium, and to the hydrodynamic limit relation connecting the stress relaxation to the kinematic viscosity. Do not assume or quote the target formulas; instead, derive them from the stated modeling assumptions.\n- Scientific realism: ensure all parameter combinations are within stability-relevant ranges for MRT where relaxation parameters lie strictly within the open interval $(0, 2)$ for non-conserved moments.\n\nTest suite (three cases):\n- Case $1$ (general “happy path”):\n    - $\\Delta x = 10^{-3} \\ \\mathrm{m}$, $\\Delta t = 10^{-5} \\ \\mathrm{s}$, $\\nu = 10^{-5} \\ \\mathrm{m}^2/\\mathrm{s}$, $k = 100 \\ \\mathrm{m}^{-1}$, $U_0 = 10^{-2} \\ \\mathrm{m}/\\mathrm{s}$, $\\gamma_{\\mathrm{nh}} = 500 \\ \\mathrm{s}^{-1}$, $N = 1000$.\n- Case $2$ (boundary condition for zero target damping of the non-hydrodynamic moment):\n    - $\\Delta x = 10^{-3} \\ \\mathrm{m}$, $\\Delta t = 10^{-5} \\ \\mathrm{s}$, $\\nu = 10^{-5} \\ \\mathrm{m}^2/\\mathrm{s}$, $k = 50 \\ \\mathrm{m}^{-1}$, $U_0 = 2 \\times 10^{-2} \\ \\mathrm{m}/\\mathrm{s}$, $\\gamma_{\\mathrm{nh}} = 0 \\ \\mathrm{s}^{-1}$, $N = 500$.\n- Case $3$ (strong damping for the non-hydrodynamic moment and large viscosity):\n    - $\\Delta x = 10^{-3} \\ \\mathrm{m}$, $\\Delta t = 10^{-5} \\ \\mathrm{s}$, $\\nu = 10^{-1} \\ \\mathrm{m}^2/\\mathrm{s}$, $k = 150 \\ \\mathrm{m}^{-1}$, $U_0 = 5 \\times 10^{-3} \\ \\mathrm{m}/\\mathrm{s}$, $\\gamma_{\\mathrm{nh}} = 10^{5} \\ \\mathrm{s}^{-1}$, $N = 100$.\n\nUnit and angle specifications:\n- All physical inputs and outputs must be in the units specified above. No angles are used.\n- The attenuation factor $A_{\\mathrm{nh}}(N) / A_{\\mathrm{nh}}(0)$ is dimensionless.\n\nProgram specification:\n- Your program must implement the above derivation to compute, for each case in the test suite, the ordered list $[s_e, s_v, A_{\\mathrm{nh}}(N) / A_{\\mathrm{nh}}(0), U(T)]$.\n- Your program should produce a single line of output containing the results as a comma-separated list of per-case lists enclosed in square brackets, for example $[[\\dots], [\\dots], [\\dots]]$. Values should be emitted as floating-point numbers in decimal or scientific notation as needed, without units or additional text.", "solution": "The problem has been subjected to validation and is deemed scientifically grounded, well-posed, and objective. All necessary parameters for a unique solution are provided. The core task involves applying standard, established principles of the Lattice Boltzmann Method (LBM) and fluid dynamics. One test case (Case 2) results in a relaxation parameter $s_e = 0$, which lies on the boundary of the specified stability interval of $(0, 2)$. While this represents a violation of the *strict* inequality, it corresponds to the well-defined physical limit of zero damping for a non-hydrodynamic mode, which is computationally trivial. The problem is thus considered valid, and we proceed to the derivation and solution.\n\nThe objective is to determine four quantities for a D2Q9 Multiple-Relaxation-Time (MRT) LBM simulation of a shear wave: the relaxation parameter for the energy moment $s_e$, the relaxation parameter for the shear stress moments $s_v$, the attenuation factor for the non-hydrodynamic energy mode, and the final amplitude of the hydrodynamic shear wave. These will be derived from the provided physical parameters.\n\nFirst, we define the lattice speed $c$ and the sound speed $c_s$. Given the lattice spacing $\\Delta x$ and the time step $\\Delta t$, the lattice speed is:\n$$\nc = \\frac{\\Delta x}{\\Delta t}\n$$\nFor the D2Q9 lattice, the speed of sound $c_s$ is related to the lattice speed by:\n$$\nc_s^2 = \\frac{c^2}{3}\n$$\n\n**1. Derivation of the Non-Hydrodynamic Relaxation Parameter, $s_e$**\n\nThe evolution of any moment $m_k$ in the MRT collision step is described by:\n$$\nm_k' = m_k - s_k(m_k - m_k^{eq})\n$$\nwhere $m_k'$ is the post-collision moment, $s_k$ is the relaxation parameter for that moment, and $m_k^{eq}$ is its equilibrium value. The problem specifies the \"energy\" moment, denoted $e$, as the representative non-hydrodynamic moment. For a shear wave perturbation around a state of rest, the equilibrium value of this moment is zero, i.e., $m_e^{eq} = 0$. The collision rule for this moment simplifies to:\n$$\nm_e(t+\\Delta t)_{\\text{post-collision}} = m_e(t) - s_e m_e(t) = (1 - s_e) m_e(t)\n$$\nThe problem states that non-hydrodynamic modes decay \"purely due to relaxation\". This allows us to model the evolution of the amplitude of this mode, $A_{\\mathrm{nh}}(t)$, over one discrete time step as directly governed by the collision operator:\n$$\nA_{\\mathrm{nh}}(t + \\Delta t) = (1 - s_e) A_{\\mathrm{nh}}(t)\n$$\nThis discrete decay must be consistent with the continuous physical decay model, which is defined by the target decay rate $\\gamma_{\\mathrm{nh}}$:\n$$\nA_{\\mathrm{nh}}(t) = A_{\\mathrm{nh}}(0) e^{-\\gamma_{\\mathrm{nh}} t}\n$$\nFrom this continuous form, the amplitude change over one time step is:\n$$\nA_{\\mathrm{nh}}(t + \\Delta t) = A_{\\mathrm{nh}}(0) e^{-\\gamma_{\\mathrm{nh}}(t+\\Delta t)} = \\left(A_{\\mathrm{nh}}(0) e^{-\\gamma_{\\mathrm{nh}} t}\\right) e^{-\\gamma_{\\mathrm{nh}} \\Delta t} = A_{\\mathrm{nh}}(t) e^{-\\gamma_{\\mathrm{nh}} \\Delta t}\n$$\nBy equating the discrete and continuous expressions for the evolution of $A_{\\mathrm{nh}}$, we find the relationship between $s_e$ and $\\gamma_{\\mathrm{nh}}$:\n$$\n1 - s_e = e^{-\\gamma_{\\mathrm{nh}} \\Delta t}\n$$\nSolving for $s_e$ yields the required design equation:\n$$\ns_e = 1 - e^{-\\gamma_{\\mathrm{nh}} \\Delta t}\n$$\n\n**2. Derivation of the Viscous Relaxation Parameter, $s_v$**\n\nThe kinematic viscosity $\\nu$ in LBM is determined by the relaxation of the non-equilibrium stress moments. A Chapman-Enskog analysis of the lattice Boltzmann equation shows that, to recover the Navier-Stokes equations in the hydrodynamic limit, the kinematic viscosity is related to the relaxation time $\\tau_v$ of the shear stress modes. For the MRT model, this relationship is given by:\n$$\n\\nu = c_s^2 \\left( \\tau_v - \\frac{\\Delta t}{2} \\right)\n$$\nThe continuous relaxation time $\\tau_v$ is related to the dimensionless relaxation parameter $s_v$ by $\\tau_v = \\frac{\\Delta t}{s_v}$. Substituting this into the viscosity expression gives the standard formula:\n$$\n\\nu = c_s^2 \\left( \\frac{\\Delta t}{s_v} - \\frac{\\Delta t}{2} \\right) = c_s^2 \\Delta t \\left( \\frac{1}{s_v} - \\frac{1}{2} \\right)\n$$\nThis is the required \"Chapman-Enskog connection\". We must solve for $s_v$ to meet the prescribed viscosity $\\nu$. Rearranging the equation:\n$$\n\\frac{\\nu}{c_s^2 \\Delta t} = \\frac{1}{s_v} - \\frac{1}{2}\n$$\n$$\n\\frac{1}{s_v} = \\frac{\\nu}{c_s^2 \\Delta t} + \\frac{1}{2}\n$$\nInverting this expression gives the design equation for $s_v$:\n$$\ns_v = \\left( \\frac{\\nu}{c_s^2 \\Delta t} + \\frac{1}{2} \\right)^{-1}\n$$\n\n**3. Calculation of Non-Hydrodynamic Mode Attenuation**\n\nThe attenuation factor is the ratio of the non-hydrodynamic mode amplitude at time $T = N \\Delta t$ to its initial amplitude, $A_{\\mathrm{nh}}(N) / A_{\\mathrm{nh}}(0)$. Using the discrete evolution equation derived in part 1, $A_{\\mathrm{nh}}(t+\\Delta t) = (1-s_e)A_{\\mathrm{nh}}(t)$, we can determine the amplitude after $N$ steps by repeated application:\n$$\nA_{\\mathrm{nh}}(N \\Delta t) = (1 - s_e)^N A_{\\mathrm{nh}}(0)\n$$\nTherefore, the attenuation factor is:\n$$\n\\frac{A_{\\mathrm{nh}}(N)}{A_{\\mathrm{nh}}(0)} = (1 - s_e)^N\n$$\nSubstituting the expression for $s_e$, we can also write this as:\n$$\n\\frac{A_{\\mathrm{nh}}(N)}{A_{\\mathrm{nh}}(0)} = \\left(1 - (1 - e^{-\\gamma_{\\mathrm{nh}} \\Delta t})\\right)^N = \\left(e^{-\\gamma_{\\mathrm{nh}} \\Delta t}\\right)^N = e^{-\\gamma_{\\mathrm{nh}} N \\Delta t}\n$$\n\n**4. Calculation of Hydrodynamic Shear Wave Amplitude**\n\nThe problem states that the amplitude of the hydrodynamic shear mode, $U(t)$, decays diffusively. For a shear wave with a fixed wave number $k$, this process is governed by the linearized Navier-Stokes equations, which yield the following ordinary differential equation for the velocity amplitude:\n$$\n\\frac{d U(t)}{dt} = -\\nu k^2 U(t)\n$$\nThis equation describes exponential decay. Given an initial amplitude $U(0) = U_0$, the solution is:\n$$\nU(t) = U_0 e^{-\\nu k^2 t}\n$$\nThe problem asks for the amplitude at time $T = N \\Delta t$. Substituting this time into the solution yields the final expression:\n$$\nU(T) = U_0 e^{-\\nu k^2 N \\Delta t}\n$$\n\nThese derived formulas are sufficient to compute all required quantities for the given test cases.", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes MRT-LBM relaxation parameters and shear-wave decay properties.\n    \"\"\"\n    \n    # Test cases are defined as tuples:\n    # (delta_x, delta_t, nu, k, U0, gamma_nh, N)\n    test_cases = [\n        # Case 1 (general \"happy path\")\n        (1e-3, 1e-5, 1e-5, 100.0, 1e-2, 500.0, 1000),\n        # Case 2 (boundary condition for zero target damping of the non-hydrodynamic moment)\n        (1e-3, 1e-5, 1e-5, 50.0, 2e-2, 0.0, 500),\n        # Case 3 (strong damping for the non-hydrodynamic moment and large viscosity)\n        (1e-3, 1e-5, 1e-1, 150.0, 5e-3, 1e5, 100),\n    ]\n\n    results = []\n    \n    for case in test_cases:\n        # Unpack the parameters for the current case\n        delta_x, delta_t, nu, k, U0, gamma_nh, N = case\n\n        # --- Calculations based on the derived formulas ---\n\n        # 1. Calculate lattice speed and sound speed squared\n        c = delta_x / delta_t\n        c_s_sq = c**2 / 3.0\n\n        # 2. Calculate the non-hydrodynamic relaxation parameter s_e\n        # s_e = 1 - exp(-gamma_nh * delta_t)\n        s_e = 1.0 - np.exp(-gamma_nh * delta_t)\n        \n        # 3. Calculate the viscous relaxation parameter s_v\n        # s_v = (nu / (c_s^2 * delta_t) + 0.5)^-1\n        s_v = 1.0 / (nu / (c_s_sq * delta_t) + 0.5)\n\n        # 4. Calculate the attenuation factor of the non-hydrodynamic mode\n        # Attenuation = (1 - s_e)^N\n        # Note: (1 - s_e) is numerically equivalent to exp(-gamma_nh * delta_t)\n        # Using the exponential form is more stable and direct\n        T = N * delta_t\n        attenuation_nh = np.exp(-gamma_nh * T)\n\n        # 5. Calculate the final hydrodynamic shear wave amplitude U(T)\n        # U(T) = U0 * exp(-nu * k^2 * T)\n        U_T = U0 * np.exp(-nu * k**2 * T)\n\n        # Append the list of results for this case\n        results.append([s_e, s_v, attenuation_nh, U_T])\n\n    # Format the final output string as specified in the problem statement.\n    # The output should be a single line: \"[[case1_res], [case2_res], ...]\"\n    # Using str(list) automatically adds the square brackets and commas.\n    output_str = f\"[{','.join(map(str, results))}]\"\n    print(output_str)\n\nsolve()\n```", "id": "2500997"}]}