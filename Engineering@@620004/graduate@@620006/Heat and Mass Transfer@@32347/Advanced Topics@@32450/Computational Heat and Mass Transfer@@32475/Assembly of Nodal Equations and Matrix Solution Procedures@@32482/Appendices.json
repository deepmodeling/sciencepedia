{"hands_on_practices": [{"introduction": "The first step in any finite volume analysis is the careful translation of the governing physical laws into a system of algebraic equations. This foundational practice [@problem_id:2468813] guides you through the process of assembling the nodal equations for a two-dimensional heat conduction problem, focusing on the correct implementation of different boundary conditions. By systematically deriving the coefficients for interior, Dirichlet, Neumann, and Robin boundary cells, you will gain hands-on experience in constructing the matrix system that forms the heart of a numerical solver.", "problem": "A two-dimensional, steady-state heat conduction problem is to be discretized with the finite volume method on a uniform Cartesian grid and assembled into algebraic nodal equations of the form $a_P T_P - \\sum a_{nb} T_{nb} = b_P$, where $a_P$ is the main diagonal coefficient, $a_{nb}$ are the neighbor coefficients, and $b_P$ is the right-hand side source term. The computational domain is a rectangle of width $L_x$ and height $L_y$, with thermal conductivity $k$ (assumed constant and isotropic), uniform volumetric heat generation $\\dot{q}$ in W/m$^3$, and unit thickness in the out-of-plane direction. The grid consists of $n_x \\times n_y$ control volumes of equal sizes $\\Delta x$ and $\\Delta y$, so that $L_x = n_x \\Delta x$ and $L_y = n_y \\Delta y$. You will assemble the nodal equations for each control volume using the integral form of conservation of energy and verify the correctness of the assembled coefficients $a_P$, $a_{nb}$, and $b_P$ against independently computed expected values for a set of representative cells that exercise each boundary type.\n\nStart from the fundamental energy conservation for steady heat conduction with generation,\n$$-\\nabla \\cdot \\left(k \\nabla T \\right) = \\dot{q},$$\nintegrated over each control volume, and approximate face-normal gradients by linear profiles over distances between cell centers or between a cell center and a boundary face. Assume the face areas are $A_e = \\Delta y$, $A_w = \\Delta y$, $A_n = \\Delta x$, and $A_s = \\Delta x$ (unit thickness). Use the following finite volume principles for face fluxes and boundary treatments, derived from the conservation statement without using any shortcut formulas as targets:\n\n- For an internal face between neighboring control volumes $P$ and $E$ separated by distance $\\Delta x$, the diffusive conductance is $D_e = k A_e / \\Delta x$, contributing $a_E = D_e$ to the equation of $P$ and $a_W = D_e$ to the equation of its eastern neighbor. Analogous definitions apply to the west, north, and south faces with $D_w = k A_w / \\Delta x$, $D_n = k A_n / \\Delta y$, and $D_s = k A_s / \\Delta y$.\n\n- For a Dirichlet boundary at a face with prescribed boundary temperature $T_b$, eliminate the ghost temperature by linear extrapolation across the half-cell distance so that the face contribution is represented by an addition to the main coefficient and right-hand side: add $2 k A / \\delta$ to $a_P$ and $2 k A T_b / \\delta$ to $b_P$, where $\\delta$ is the distance from the cell center to the boundary face, equal to $\\Delta x/2$ for vertical faces and $\\Delta y/2$ for horizontal faces.\n\n- For a Neumann boundary at a face with prescribed normal heat flux $q''$ defined positive into the computational domain, add $q'' A$ to $b_P$ for that face, with no change to neighbor coefficients at that face.\n\n- For a convective Robin boundary at a face, where the heat flux at the surface satisfies $q'' = h (T_\\infty - T_\\text{face})$ with heat transfer coefficient $h$ and ambient temperature $T_\\infty$, combine the linear conduction relation across the half-cell, $q'' = k (T_P - T_\\text{face})/\\delta$, with the convection condition to eliminate $T_\\text{face}$ and obtain an effective linear contribution of the form $q'' = G (T_\\infty - T_P)$, where\n$$G = \\frac{\\left( k/\\delta \\right) h}{h + \\left( k/\\delta \\right)} A.$$\nRepresent this by adding $G$ to $a_P$ and $G T_\\infty$ to $b_P$.\n\n- Treat the volumetric source by adding $\\dot{q} V$ to $b_P$, where $V = \\Delta x \\Delta y$ is the control volume.\n\nImplement the algebraic equation in the canonical form $a_P T_P - \\sum a_{nb} T_{nb} = b_P$ with neighbor set $\\{E,W,N,S\\}$. For any missing neighbor due to a boundary, the corresponding $a_{nb}$ must be $0$.\n\nYour tasks:\n\n- Assemble programmatically the coefficients $a_P$, $a_W$, $a_E$, $a_S$, $a_N$, and $b_P$ for every control volume in a $n_x \\times n_y$ grid for the given physical parameters and boundary conditions.\n\n- Independently compute expected values of these coefficients using the face-by-face formulas above for selected control volumes that illustrate each boundary type.\n\n- Verify, for each selected control volume, that the assembled and expected coefficients match within an absolute tolerance of $\\varepsilon = 10^{-10}$.\n\nBoundary condition specification:\n\n- The west boundary at $x=0$ is Dirichlet with prescribed temperature $T_W$.\n\n- The east boundary at $x=L_x$ is Neumann with prescribed heat flux $q''_E$ (positive into the domain).\n\n- The south boundary at $y=0$ is Neumann with prescribed heat flux $q''_S$ (positive into the domain; may be $0$ for adiabatic).\n\n- The north boundary at $y=L_y$ is Robin (convective) with coefficient $h_N$ and ambient temperature $T_{\\infty,N}$.\n\nGeometric and material parameters:\n\n- The grid is uniform with $n_x \\times n_y$ control volumes, spacings $\\Delta x$ and $\\Delta y$ (in m), isotropic thermal conductivity $k$ (in W/(m·K)), and volumetric heat generation $\\dot{q}$ (in W/m$^3$). The thickness is $1$ (dimensionless in meters), so face areas are $A_e = A_w = \\Delta y$ and $A_n = A_s = \\Delta x$ (in m$^2$), and cell volume is $V = \\Delta x \\Delta y$ (in m$^3$).\n\nRepresentative cells to verify for each test case:\n\n- Interior center cell $(i,j) = (1,1)$, where $i=0,\\dots,n_x-1$ runs west to east and $j=0,\\dots,n_y-1$ runs south to north.\n\n- West-edge middle cell $(0,1)$ (Dirichlet face present).\n\n- East-edge middle cell $(n_x-1,1)$ (Neumann face present).\n\n- North-edge middle cell $(1,n_y-1)$ (Robin face present).\n\n- South-edge middle cell $(1,0)$ (Neumann face present, which may be adiabatic).\n\n- Northwest corner cell $(0,n_y-1)$ (simultaneous Dirichlet and Robin faces).\n\nTest suite:\n\nProvide three test cases; all data are in coherent SI units as indicated.\n\n- Test case A:\n    - $n_x = 3$, $n_y = 3$, $\\Delta x = 0.1$ m, $\\Delta y = 0.1$ m,\n    - $k = 20$ W/(m·K), $\\dot{q} = 1.0 \\times 10^5$ W/m$^3$,\n    - West Dirichlet $T_W = 400$ K,\n    - East Neumann $q''_E = 5000$ W/m$^2$,\n    - South Neumann $q''_S = 0$ W/m$^2$ (adiabatic),\n    - North Robin $h_N = 25$ W/(m$^2$·K), $T_{\\infty,N} = 300$ K.\n\n- Test case B:\n    - $n_x = 3$, $n_y = 3$, $\\Delta x = 0.05$ m, $\\Delta y = 0.2$ m,\n    - $k = 50$ W/(m·K), $\\dot{q} = 0$ W/m$^3$,\n    - West Dirichlet $T_W = 310$ K,\n    - East Neumann $q''_E = -2000$ W/m$^2$,\n    - South Neumann $q''_S = 0$ W/m$^2$,\n    - North Robin $h_N = 100$ W/(m$^2$·K), $T_{\\infty,N} = 350$ K.\n\n- Test case C:\n    - $n_x = 3$, $n_y = 3$, $\\Delta x = 0.08$ m, $\\Delta y = 0.12$ m,\n    - $k = 10$ W/(m·K), $\\dot{q} = 2.0 \\times 10^4$ W/m$^3$,\n    - West Dirichlet $T_W = 300$ K,\n    - East Neumann $q''_E = 0$ W/m$^2$,\n    - South Neumann $q''_S = 1000$ W/m$^2$,\n    - North Robin $h_N = 10^4$ W/(m$^2$·K), $T_{\\infty,N} = 330$ K.\n\nFinal output specification:\n\n- Your program must assemble coefficients for each test case and, for the six specified control volumes in the order $(1,1)$, $(0,1)$, $(2,1)$, $(1,2)$, $(1,0)$, $(0,2)$, compare the assembled coefficients against independently computed expected values using an absolute tolerance of $\\varepsilon = 10^{-10}$.\n\n- For each cell, produce a single boolean that is $true$ if and only if all six coefficients $a_P$, $a_W$, $a_E$, $a_S$, $a_N$, and $b_P$ match within tolerance; otherwise $false$.\n\n- Aggregate all booleans for all three test cases, preserving test-case order and cell order per test case, into one flat list and print a single line containing this list as a comma-separated list enclosed in square brackets, for example, $[\\text{true},\\text{true},\\dots]$.\n\nAngle units do not apply. Physical inputs are in the specified SI units, while the final booleans are unitless.", "solution": "The problem statement is critically examined and found to be valid. It is scientifically grounded in the principles of heat transfer, mathematically self-contained, and objectively formulated. It poses a well-defined task in computational heat transfer: the assembly and verification of nodal algebraic equations derived from the finite volume method.\n\nThe fundamental principle is the conservation of energy for a steady-state system, which in differential form for heat conduction with a source term is:\n$$-\\nabla \\cdot \\left(k \\nabla T \\right) = \\dot{q}$$\nwhere $k$ is the thermal conductivity in W/(m·K), $T$ is the temperature field in K, and $\\dot{q}$ is the volumetric heat generation rate in W/m$^3$.\n\nTo discretize this equation using the finite volume method, we integrate it over a control volume $V_P$ centered around a node $P$:\n$$ \\int_{V_P} -\\nabla \\cdot \\left(k \\nabla T \\right) dV = \\int_{V_P} \\dot{q} dV $$\nApplying the divergence theorem to the left-hand side converts the volume integral into a sum of fluxes over the faces of the control volume:\n$$ -\\sum_{f} \\int_{A_f} (k \\nabla T) \\cdot \\mathbf{n} \\, dA = \\dot{q} V_P $$\nwhere the sum is over all faces $f$ (east, west, north, south) of the control volume, $A_f$ is the area of a face, and $\\mathbf{n}$ is the outward-pointing normal vector. Let $q''_f$ be the heat flux out of the control volume through face $f$. The equation becomes:\n$$ \\sum_{f \\in \\{e,w,n,s\\}} q''_f A_f = \\dot{q} V_P $$\nThe core of the method lies in approximating the heat flux terms $q''_f A_f$. The resulting algebraic equation for each node $P$ is expressed in the canonical form:\n$$ a_P T_P - \\sum_{nb} a_{nb} T_{nb} = b_P $$\nwhere $T_P$ is the temperature at node $P$, $T_{nb}$ are temperatures at neighboring nodes, $a_P$ is the central coefficient, $a_{nb}$ are the neighbor coefficients, and $b_P$ is the source term. The coefficients are assembled by considering the contribution of each face of the control volume.\n\n**1. Internal Face:**\nFor an internal face, for example the east face 'e' between nodes $P$ and $E$, the heat flux is approximated using a linear temperature profile between the cell centers. The heat rate leaving $P$ through face 'e' is:\n$$ q_e = k A_e \\frac{T_P - T_E}{\\delta x_{PE}} $$\nHere, $A_e = \\Delta y$ is the face area (assuming unit depth), and $\\delta x_{PE} = \\Delta x$ is the distance between cell centers. This contribution can be written as $D_e(T_P - T_E)$, where $D_e = k A_e / \\Delta x$ is the diffusive conductance. The term $-D_e T_E$ moves to the left side of the final equation, giving $a_E = D_e$. The term $D_e T_P$ contributes to the central coefficient, so $a_P$ is increased by $D_e$. Analogous expressions hold for other internal faces, with $a_W = D_w = k \\Delta y / \\Delta x$, $a_N = D_n = k \\Delta x / \\Delta y$, and $a_S = D_s = k \\Delta x / \\Delta y$. For a boundary face, the corresponding neighbor coefficient $a_{nb}$ is zero.\n\n**2. Dirichlet Boundary (Prescribed Temperature):**\nAt a boundary face with a specified temperature $T_b$, for example the west face, the flux is approximated using the distance from the cell center $P$ to the boundary, $\\delta = \\Delta x/2$. The heat rate is:\n$$ q_w = k A_w \\frac{T_P - T_b}{\\delta} = \\frac{2k A_w}{\\Delta x}(T_P - T_b) $$\nRearranging this into the standard form $a_P T_P - \\dots = b_P$, the term $\\frac{2k A_w}{\\Delta x} T_P$ contributes to the left side, and the term $\\frac{2k A_w}{\\Delta x} T_b$ moves to the right side. Thus, for a Dirichlet boundary face, we add $\\frac{2kA}{\\delta}$ to $a_P$ and $\\frac{2kAT_b}{\\delta}$ to $b_P$, where $A$ is the face area and $\\delta$ is the half-cell width.\n\n**3. Neumann Boundary (Prescribed Heat Flux):**\nAt a boundary face with a specified heat flux $q''$ entering the domain, the heat rate entering the control volume is simply $q'' A$. The heat rate leaving the control volume is $-q'' A$. The conservation equation at the face is $q_f A_f = -q''_f A$. This term is a constant that contributes only to the source term $b_P$. Thus, for a Neumann boundary face, we add $q''_{bnd} A$ to $b_P$.\n\n**4. Robin Boundary (Convection):**\nFor a convective boundary, the flux into the domain is given by $q''=h(T_{\\infty}-T_{\\text{face}})$. The flux from the cell center $P$ to the face is $q''=k(T_P-T_{\\text{face}})/\\delta$. Eliminating the unknown face temperature $T_{\\text{face}}$ yields a flux expression solely in terms of $T_P$ and the known ambient temperature $T_{\\infty}$:\n$$ q'' = G(T_{\\infty}-T_P)/A \\quad \\text{where} \\quad G = \\frac{1}{\\frac{\\delta}{kA} + \\frac{1}{hA}} = \\frac{(k/\\delta)h}{h + (k/\\delta)}A $$\nThe total heat rate entering through the face is $q''A=G(T_{\\infty}-T_P)$. Rearranging, the term $G T_P$ contributes to the left side of the equation, so we add $G$ to $a_P$. The term $G T_{\\infty}$ contributes to the right side, so we add $G T_{\\infty}$ to $b_P$.\n\n**5. Volumetric Source:**\nThe integrated volumetric heat source $\\dot{q} V_P = \\dot{q} \\Delta x \\Delta y$ is a constant contribution to the source term $b_P$.\n\n**Assembly and Verification Procedure:**\nThe implementation proceeds in two parts. First, a general routine programmatically assembles the six coefficient arrays ($a_P, a_W, a_E, a_S, a_N, b_P$) for the entire $n_x \\times n_y$ grid by iterating through each cell $(i,j)$ for $i=0, \\dots, n_x-1$ and $j=0, \\dots, n_y-1$ and applying the rules above based on the cell's location. Second, to verify this general implementation, a separate function computes the expected coefficients for a single, specified cell by directly applying the same set of formulas, hard-coded for that cell's specific combination of boundary and internal faces. Finally, for the selected representative cells, the results from the general assembly are compared against the specific, independently computed expected values. A boolean value of `true` is returned if and only if all six coefficients for a given cell match within an absolute tolerance of $\\varepsilon = 10^{-10}$. This process is repeated for all specified test cases.", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Assembles and verifies finite volume nodal equation coefficients for a 2D heat conduction problem.\n    \"\"\"\n    test_cases = [\n        # Test Case A\n        {\n            \"nx\": 3, \"ny\": 3, \"dx\": 0.1, \"dy\": 0.1,\n            \"k\": 20.0, \"q_dot\": 1.0e5,\n            \"T_W\": 400.0, \"q_E\": 5000.0, \"q_S\": 0.0,\n            \"h_N\": 25.0, \"T_inf_N\": 300.0,\n        },\n        # Test Case B\n        {\n            \"nx\": 3, \"ny\": 3, \"dx\": 0.05, \"dy\": 0.2,\n            \"k\": 50.0, \"q_dot\": 0.0,\n            \"T_W\": 310.0, \"q_E\": -2000.0, \"q_S\": 0.0,\n            \"h_N\": 100.0, \"T_inf_N\": 350.0,\n        },\n        # Test Case C\n        {\n            \"nx\": 3, \"ny\": 3, \"dx\": 0.08, \"dy\": 0.12,\n            \"k\": 10.0, \"q_dot\": 2.0e4,\n            \"T_W\": 300.0, \"q_E\": 0.0, \"q_S\": 1000.0,\n            \"h_N\": 1.0e4, \"T_inf_N\": 330.0,\n        },\n    ]\n\n    verification_cells = [(1, 1), (0, 1), (2, 1), (1, 2), (1, 0), (0, 2)]\n    tolerance = 1e-10\n    all_results = []\n\n    def assemble_coefficients(params):\n        nx, ny, dx, dy = params[\"nx\"], params[\"ny\"], params[\"dx\"], params[\"dy\"]\n        k, q_dot = params[\"k\"], params[\"q_dot\"]\n        T_W, q_E, q_S = params[\"T_W\"], params[\"q_E\"], params[\"q_S\"]\n        h_N, T_inf_N = params[\"h_N\"], params[\"T_inf_N\"]\n        \n        a_P = np.zeros((ny, nx))\n        a_W = np.zeros((ny, nx))\n        a_E = np.zeros((ny, nx))\n        a_S = np.zeros((ny, nx))\n        a_N = np.zeros((ny, nx))\n        b_P = np.zeros((ny, nx))\n\n        V = dx * dy\n        \n        for j in range(ny):\n            for i in range(nx):\n                # Volumetric source term\n                b_P[j, i] += q_dot * V\n\n                # West face\n                if i == 0:  # West boundary (Dirichlet)\n                    delta_w = dx / 2\n                    A_w = dy\n                    term = 2 * k * A_w / delta_w\n                    a_P[j, i] += term\n                    b_P[j, i] += term * T_W\n                else:  # Internal face\n                    D_w = k * dy / dx\n                    a_P[j, i] += D_w\n                    a_W[j, i] = D_w\n                \n                # East face\n                if i == nx - 1:  # East boundary (Neumann)\n                    A_e = dy\n                    b_P[j, i] += q_E * A_e\n                else:  # Internal face\n                    D_e = k * dy / dx\n                    a_P[j, i] += D_e\n                    a_E[j, i] = D_e\n\n                # South face\n                if j == 0:  # South boundary (Neumann)\n                    A_s = dx\n                    b_P[j, i] += q_S * A_s\n                else:  # Internal face\n                    D_s = k * dx / dy\n                    a_P[j, i] += D_s\n                    a_S[j, i] = D_s\n\n                # North face\n                if j == ny - 1:  # North boundary (Robin)\n                    delta_n = dy / 2\n                    A_n = dx\n                    G = (k / delta_n * h_N) / (h_N + k / delta_n) * A_n\n                    a_P[j, i] += G\n                    b_P[j, i] += G * T_inf_N\n                else:  # Internal face\n                    D_n = k * dx / dy\n                    a_P[j, i] += D_n\n                    a_N[j, i] = D_n\n\n        return a_P, a_W, a_E, a_S, a_N, b_P\n\n    def get_expected_coeffs(i, j, params):\n        nx, ny, dx, dy = params[\"nx\"], params[\"ny\"], params[\"dx\"], params[\"dy\"]\n        k, q_dot = params[\"k\"], params[\"q_dot\"]\n        T_W, q_E, q_S = params[\"T_W\"], params[\"q_E\"], params[\"q_S\"]\n        h_N, T_inf_N = params[\"h_N\"], params[\"T_inf_N\"]\n        \n        aP, aW, aE, aS, aN, bP = 0.0, 0.0, 0.0, 0.0, 0.0, 0.0\n        \n        V = dx * dy\n        bP += q_dot * V\n\n        # West Face Contribution\n        if i > 0:\n            D_w = k * dy / dx\n            aP += D_w\n            aW = D_w\n        else: # i == 0\n            delta_w = dx / 2\n            A_w = dy\n            term = 2 * k * A_w / delta_w\n            aP += term\n            bP += term * T_W\n            aW = 0.0\n            \n        # East Face Contribution\n        if i < nx - 1:\n            D_e = k * dy / dx\n            aP += D_e\n            aE = D_e\n        else: # i == nx - 1\n            A_e = dy\n            bP += q_E * A_e\n            aE = 0.0\n\n        # South Face Contribution\n        if j > 0:\n            D_s = k * dx / dy\n            aP += D_s\n            aS = D_s\n        else: # j == 0\n            A_s = dx\n            bP += q_S * A_s\n            aS = 0.0\n            \n        # North Face Contribution\n        if j < ny - 1:\n            D_n = k * dx / dy\n            aP += D_n\n            aN = D_n\n        else: # j == ny - 1\n            delta_n = dy / 2\n            A_n = dx\n            G = (k / delta_n * h_N) / (h_N + k / delta_n) * A_n\n            aP += G\n            bP += G * T_inf_N\n            aN = 0.0\n\n        return aP, aW, aE, aS, aN, bP\n\n    for case in test_cases:\n        assembled_coeffs = assemble_coefficients(case)\n        aP_arr, aW_arr, aE_arr, aS_arr, aN_arr, bP_arr = assembled_coeffs\n        \n        case_results = []\n        for i, j in verification_cells:\n            # Map (i,j) which is (col, row) to numpy's (row, col) indexing\n            assembled_vals = np.array([\n                aP_arr[j, i],\n                aW_arr[j, i],\n                aE_arr[j, i],\n                aS_arr[j, i],\n                aN_arr[j, i],\n                bP_arr[j, i]\n            ])\n            \n            expected_vals = np.array(get_expected_coeffs(i, j, case))\n            \n            is_match = np.allclose(assembled_vals, expected_vals, rtol=0, atol=tolerance)\n            case_results.append(str(is_match).lower())\n        \n        all_results.extend(case_results)\n\n    print(f\"[{','.join(all_results)}]\")\n\nsolve()\n```", "id": "2468813"}, {"introduction": "Once a system of equations is assembled, understanding the properties of the resulting coefficient matrix is crucial for predicting the behavior and stability of the numerical solution. This exercise [@problem_id:2468727] delves into this analysis by having you apply Gershgorin's Circle Theorem to a system derived from a transient diffusion problem. You will not only assemble the matrix but also use this elegant theorem to certify properties like strict diagonal dominance and to establish bounds on the system's eigenvalues, providing deep insights into the nature of the discretized physical model.", "problem": "A one-dimensional transient heat diffusion problem is discretized by the Finite Volume Method (FVM) on a nonuniform grid with Dirichlet boundary conditions at both ends. The bar has constant isotropic thermal conductivity $k$, constant density $\\rho$, constant specific heat $c_p$, and constant cross-sectional area $A$. The governing law is Fourier’s law of heat conduction and conservation of energy over each control volume. An implicit (backward Euler) time integration with time step $\\Delta t$ is used to march from time level $n$ to $n+1$. The nodal unknowns are the temperatures $\\{T_1^{n+1},T_2^{n+1},T_3^{n+1}\\}$ at the three interior nodes; the boundary temperatures at the left and right ends are prescribed and eliminated into the right-hand side.\n\nThe grid geometry is as follows. The distances along the bar are: from the left boundary to node $1$ is $d_L = 0.02$ m, between nodes $1$ and $2$ is $d_{12} = 0.03$ m, between nodes $2$ and $3$ is $d_{23} = 0.02$ m, and from node $3$ to the right boundary is $d_R = 0.01$ m. The cross-sectional area is $A = 0.02$ m$^2$, thermal conductivity is $k = 50$ W m$^{-1}$ K$^{-1}$, density is $\\rho = 7800$ kg m$^{-3}$, specific heat is $c_p = 500$ J kg$^{-1}$ K$^{-1}$, and the time step is $\\Delta t = 2$ s. The control volume around each interior node $i$ occupies half the distances to its adjacent neighbors or boundary, so that the control volume lengths are $0.5\\,(d_L + d_{12})$ for node $1$, $0.5\\,(d_{12}+d_{23})$ for node $2$, and $0.5\\,(d_{23}+d_R)$ for node $3$.\n\nStarting from energy conservation over each control volume and Fourier’s law, assemble the $3\\times 3$ linear system matrix $\\mathbf{A}$ that multiplies the vector of unknown temperatures at time level $n+1$. Using this assembled matrix, perform the following:\n\n1. Compute the Gershgorin disks for $\\mathbf{A}$, specifying the center and radius for each row-disk.\n2. Use the Gershgorin disks to bound the spectrum and to argue strict diagonal dominance of $\\mathbf{A}$.\n3. From the Gershgorin disks, determine the largest certified lower bound on the smallest eigenvalue of $\\mathbf{A}$.\n\nReport as your final answer only the single numerical value of the largest certified lower bound on the smallest eigenvalue, rounded to four significant figures. Express the numerical value in W K$^{-1}$ in your working, but do not include units in the final boxed answer.", "solution": "The problem statement is subjected to validation.\n\n**Step 1: Extract Givens**\n- **Problem type**: One-dimensional transient heat diffusion.\n- **Discretization method**: Finite Volume Method (FVM) on a nonuniform grid.\n- **Time integration**: Implicit (backward Euler) with time step $\\Delta t = 2\\,\\text{s}$.\n- **Boundary conditions**: Dirichlet at both ends.\n- **Unknowns**: Nodal temperatures $\\{T_1^{n+1}, T_2^{n+1}, T_3^{n+1}\\}$ for three interior nodes.\n- **Material properties (constant, isotropic)**:\n  - Thermal conductivity: $k = 50\\,\\text{W}\\,\\text{m}^{-1}\\,\\text{K}^{-1}$.\n  - Density: $\\rho = 7800\\,\\text{kg}\\,\\text{m}^{-3}$.\n  - Specific heat: $c_p = 500\\,\\text{J}\\,\\text{kg}^{-1}\\,\\text{K}^{-1}$.\n- **Geometric properties**:\n  - Cross-sectional area: $A = 0.02\\,\\text{m}^2$.\n  - Inter-nodal distances: $d_L = 0.02\\,\\text{m}$ (left boundary to node 1), $d_{12} = 0.03\\,\\text{m}$ (node 1 to 2), $d_{23} = 0.02\\,\\text{m}$ (node 2 to 3), $d_R = 0.01\\,\\text{m}$ (node 3 to right boundary).\n- **Control volume lengths**: $\\Delta x_1 = 0.5(d_L + d_{12})$, $\\Delta x_2 = 0.5(d_{12} + d_{23})$, $\\Delta x_3 = 0.5(d_{23} + d_R)$.\n- **Task**: Assemble the $3 \\times 3$ linear system matrix $\\mathbf{A}$, compute its Gershgorin disks, use them to bound the spectrum and show strict diagonal dominance, and find the largest certified lower bound on the smallest eigenvalue of $\\mathbf{A}$.\n\n**Step 2: Validate Using Extracted Givens**\n- **Scientific Grounding**: The problem is based on Fourier's law of heat conduction and the principle of energy conservation, which are fundamental to heat transfer. The Finite Volume Method with an implicit time scheme is a standard, scientifically sound numerical technique.\n- **Well-Posedness**: The problem provides all necessary material properties, geometric data, and numerical parameters to uniquely construct the system matrix $\\mathbf{A}$. The task is mathematically precise.\n- **Objectivity**: The problem is stated using objective, quantitative language, free of ambiguity or subjective claims.\n\nThe problem does not violate any criteria for invalidity. It is scientifically sound, well-posed, objective, complete, and feasible.\n\n**Step 3: Verdict and Action**\nThe problem is valid. A solution will be constructed.\n\n**Solution Derivation**\nThe governing equation for transient heat conduction in one dimension is:\n$$ \\rho c_p \\frac{\\partial T}{\\partial t} = \\frac{\\partial}{\\partial x} \\left( k \\frac{\\partial T}{\\partial x} \\right) $$\nWe apply the Finite Volume Method. The integral form of the energy conservation equation for a control volume (CV) around a node $i$ is:\n$$ \\int_{CV_i} \\rho c_p \\frac{\\partial T}{\\partial t} \\, dV = \\int_{\\partial CV_i} k \\frac{\\partial T}{\\partial x} \\hat{n} \\cdot d\\mathbf{S} $$\nFor a one-dimensional bar with constant cross-sectional area $A$, the volume of the $i$-th CV is $V_i = A \\Delta x_i$. The equation becomes:\n$$ \\rho c_p A \\Delta x_i \\frac{dT_i}{dt} = q_w - q_e $$\nwhere $q_w$ and $q_e$ are the heat transfer rates through the west and east faces of the control volume, respectively. Using an implicit (backward Euler) time discretization with time step $\\Delta t$, we approximate the time derivative and evaluate the spatial fluxes at the future time level $n+1$:\n$$ \\rho c_p A \\Delta x_i \\frac{T_i^{n+1} - T_i^n}{\\Delta t} = q_w^{n+1} - q_e^{n+1} $$\nThe heat flux between two points $a$ and $b$ separated by a distance $d_{ab}$ is given by Fourier's law: $q_{ab} = k A \\frac{T_a - T_b}{d_{ab}}$.\n\nWe now derive the specific equation for each of the three interior nodes.\n\n**Node 1:**\nThe control volume for node $1$ has length $\\Delta x_1 = 0.5(d_L + d_{12})$. The energy balance is:\n$$ \\rho c_p A \\Delta x_1 \\frac{T_1^{n+1} - T_1^n}{\\Delta t} = k A \\frac{T_L^{n+1} - T_1^{n+1}}{d_L} - k A \\frac{T_1^{n+1} - T_2^{n+1}}{d_{12}} $$\nwhere $T_L$ is the prescribed temperature at the left boundary. Rearranging the equation to group the unknown temperatures $\\{T_1^{n+1}, T_2^{n+1}, T_3^{n+1}\\}$ on the left-hand side (LHS):\n$$ \\left( \\frac{\\rho c_p \\Delta x_1}{\\Delta t} + \\frac{k}{d_L} + \\frac{k}{d_{12}} \\right) A T_1^{n+1} - \\left( \\frac{k}{d_{12}} \\right) A T_2^{n+1} = \\text{RHS}_1 $$\nThe right-hand side (RHS) contains known quantities from the previous time step and boundary conditions. From this, we identify the coefficients of the first row of matrix $\\mathbf{A}$:\n$A_{11} = \\left( \\frac{\\rho c_p \\Delta x_1}{\\Delta t} + \\frac{k}{d_L} + \\frac{k}{d_{12}} \\right) A$\n$A_{12} = -\\frac{k A}{d_{12}}$\n$A_{13} = 0$\n\n**Node 2:**\nThe control volume for node $2$ has length $\\Delta x_2 = 0.5(d_{12} + d_{23})$. The energy balance is:\n$$ \\rho c_p A \\Delta x_2 \\frac{T_2^{n+1} - T_2^n}{\\Delta t} = k A \\frac{T_1^{n+1} - T_2^{n+1}}{d_{12}} - k A \\frac{T_2^{n+1} - T_3^{n+1}}{d_{23}} $$\nRearranging gives:\n$$ -\\left( \\frac{k}{d_{12}} \\right) A T_1^{n+1} + \\left( \\frac{\\rho c_p \\Delta x_2}{\\Delta t} + \\frac{k}{d_{12}} + \\frac{k}{d_{23}} \\right) A T_2^{n+1} - \\left( \\frac{k}{d_{23}} \\right) A T_3^{n+1} = \\text{RHS}_2 $$\nThe coefficients of the second row are:\n$A_{21} = -\\frac{k A}{d_{12}}$\n$A_{22} = \\left( \\frac{\\rho c_p \\Delta x_2}{\\Delta t} + \\frac{k}{d_{12}} + \\frac{k}{d_{23}} \\right) A$\n$A_{23} = -\\frac{k A}{d_{23}}$\n\n**Node 3:**\nThe control volume for node $3$ has length $\\Delta x_3 = 0.5(d_{23} + d_R)$. The energy balance is:\n$$ \\rho c_p A \\Delta x_3 \\frac{T_3^{n+1} - T_3^n}{\\Delta t} = k A \\frac{T_2^{n+1} - T_3^{n+1}}{d_{23}} - k A \\frac{T_3^{n+1} - T_R^{n+1}}{d_R} $$\nRearranging gives:\n$$ -\\left( \\frac{k}{d_{23}} \\right) A T_2^{n+1} + \\left( \\frac{\\rho c_p \\Delta x_3}{\\Delta t} + \\frac{k}{d_{23}} + \\frac{k}{d_R} \\right) A T_3^{n+1} = \\text{RHS}_3 $$\nThe coefficients of the third row are:\n$A_{31} = 0$\n$A_{32} = -\\frac{k A}{d_{23}}$\n$A_{33} = \\left( \\frac{\\rho c_p \\Delta x_3}{\\Delta t} + \\frac{k}{d_{23}} + \\frac{k}{d_R} \\right) A$\n\n**Numerical Assembly of Matrix A**\nWe substitute the given numerical values. First, we compute the helper terms. All units are SI.\n$\\rho c_p = 7800 \\times 500 = 3.9 \\times 10^6$\n$\\frac{\\rho c_p}{\\Delta t} = \\frac{3.9 \\times 10^6}{2} = 1.95 \\times 10^6$\n$\\Delta x_1 = 0.5(0.02 + 0.03) = 0.025$\n$\\Delta x_2 = 0.5(0.03 + 0.02) = 0.025$\n$\\Delta x_3 = 0.5(0.02 + 0.01) = 0.015$\n\nNow we compute the matrix elements. The unit of each element is $\\text{W}\\,\\text{K}^{-1}$.\n$A_{11} = \\left( (1.95 \\times 10^6 \\times 0.025) + \\frac{50}{0.02} + \\frac{50}{0.03} \\right) \\times 0.02 = \\left( 48750 + 2500 + \\frac{5000}{3} \\right) \\times 0.02 = \\left( 51250 + \\frac{5000}{3} \\right) \\times 0.02 = \\left( \\frac{153750+5000}{3} \\right) \\times 0.02 = \\frac{158750}{3} \\times 0.02 = \\frac{3175}{3}$.\n$A_{12} = -\\frac{50 \\times 0.02}{0.03} = -\\frac{1}{0.03} = -\\frac{100}{3}$.\n$A_{13} = 0$.\n\n$A_{21} = A_{12} = -\\frac{100}{3}$.\n$A_{22} = \\left( (1.95 \\times 10^6 \\times 0.025) + \\frac{50}{0.03} + \\frac{50}{0.02} \\right) \\times 0.02 = \\left( 48750 + \\frac{5000}{3} + 2500 \\right) \\times 0.02 = \\frac{3175}{3}$.\n$A_{23} = -\\frac{50 \\times 0.02}{0.02} = -50$.\n\n$A_{31} = 0$.\n$A_{32} = A_{23} = -50$.\n$A_{33} = \\left( (1.95 \\times 10^6 \\times 0.015) + \\frac{50}{0.02} + \\frac{50}{0.01} \\right) \\times 0.02 = (29250 + 2500 + 5000) \\times 0.02 = 36750 \\times 0.02 = 735$.\n\nThe assembled matrix $\\mathbf{A}$ is symmetric:\n$$ \\mathbf{A} = \\begin{pmatrix} \\frac{3175}{3} & -\\frac{100}{3} & 0 \\\\ -\\frac{100}{3} & \\frac{3175}{3} & -50 \\\\ 0 & -50 & 735 \\end{pmatrix} \\approx \\begin{pmatrix} 1058.33 & -33.33 & 0 \\\\ -33.33 & 1058.33 & -50 \\\\ 0 & -50 & 735.00 \\end{pmatrix} $$\n\n**Gershgorin Disk Analysis**\nThe Gershgorin Circle Theorem states that every eigenvalue of a matrix $\\mathbf{A}$ lies within at least one of its Gershgorin disks. The $i$-th disk, $G_i$, is centered at the diagonal element $A_{ii}$ with a radius $R_i = \\sum_{j \\neq i} |A_{ij}|$.\n\n1. **Compute Gershgorin Disks:**\n   - For row 1: Center $C_1 = A_{11} = \\frac{3175}{3}$. Radius $R_1 = |A_{12}| + |A_{13}| = |-\\frac{100}{3}| + |0| = \\frac{100}{3}$.\n   - For row 2: Center $C_2 = A_{22} = \\frac{3175}{3}$. Radius $R_2 = |A_{21}| + |A_{23}| = |-\\frac{100}{3}| + |-50| = \\frac{100}{3} + 50 = \\frac{250}{3}$.\n   - For row 3: Center $C_3 = A_{33} = 735$. Radius $R_3 = |A_{31}| + |A_{32}| = |0| + |-50| = 50$.\n\n2. **Bound Spectrum and Argue Strict Diagonal Dominance:**\n   Since $\\mathbf{A}$ is a real symmetric matrix, its eigenvalues are real. The eigenvalues must lie in the union of the real intervals defined by the disks:\n   - Interval 1: $[C_1 - R_1, C_1 + R_1] = [\\frac{3075}{3}, \\frac{3275}{3}] = [1025, 1091.\\overline{6}]$\n   - Interval 2: $[C_2 - R_2, C_2 + R_2] = [\\frac{2925}{3}, \\frac{3425}{3}] = [975, 1141.\\overline{6}]$\n   - Interval 3: $[C_3 - R_3, C_3 + R_3] = [735 - 50, 735 + 50] = [685, 785]$\n   The spectrum $\\sigma(\\mathbf{A})$ is contained in the union $[685, 785] \\cup [975, 1141.\\overline{6}]$.\n\n   A matrix is strictly diagonally dominant (SDD) if $|A_{ii}| > R_i$ for all $i$.\n   - Row 1: $|\\frac{3175}{3}| \\approx 1058.33 > \\frac{100}{3} \\approx 33.33$. Holds.\n   - Row 2: $|\\frac{3175}{3}| \\approx 1058.33 > \\frac{250}{3} \\approx 83.33$. Holds.\n   - Row 3: $|735| > 50$. Holds.\n   The matrix $\\mathbf{A}$ is strictly diagonally dominant. For a symmetric matrix with positive diagonals, SDD implies it is positive definite, meaning all its eigenvalues are strictly positive. Our intervals confirm this.\n\n3. **Largest Certified Lower Bound on the Smallest Eigenvalue:**\n   From the Gershgorin theorem, for any eigenvalue $\\lambda \\in \\sigma(\\mathbf{A})$, $|\\lambda - A_{ii}| \\le R_i$ for some $i$. This implies $\\lambda \\ge A_{ii} - R_i$. Therefore, all eigenvalues must be greater than or equal to the minimum of these lower bounds:\n   $$ \\lambda_{min} \\ge \\min_{i} (A_{ii} - R_i) $$\n   The lower bounds for each disk are:\n   - $C_1 - R_1 = 1025$\n   - $C_2 - R_2 = 975$\n   - $C_3 - R_3 = 685$\n   Thus, $\\lambda_{min} \\ge \\min(1025, 975, 685) = 685$.\n\n   Furthermore, a second part of the theorem states that if a union of $k$ disks is disjoint from the union of the other $n-k$ disks, then the first union contains exactly $k$ eigenvalues. Here, $G_1 \\cup G_2$ (which corresponds to the interval $[975, 1141.\\overline{6}]$) is disjoint from $G_3$ (the interval $[685, 785]$). This proves that there is exactly one eigenvalue in $[685, 785]$ and two eigenvalues in $[975, 1141.\\overline{6}]$. The smallest eigenvalue, $\\lambda_{min}$, must therefore lie in the interval $[685, 785]$.\n   The largest certified lower bound for $\\lambda_{min}$ that can be determined from the Gershgorin disks is the minimum value in this range, which is $685$. The theorem does not permit us to certify a lower bound greater than $685$, as it is possible for the eigenvalue to be exactly at this boundary.\n\nThe largest certified lower bound on the smallest eigenvalue is $685$. The problem requires rounding to four significant figures, which gives $685.0$.", "answer": "$$\\boxed{685.0}$$", "id": "2468727"}, {"introduction": "For large-scale simulations, the raw assembled matrix is often computationally prohibitive to solve directly due to excessive memory usage and operation counts during factorization. This practice [@problem_id:2468747] introduces matrix reordering, a critical optimization technique for improving solver efficiency. You will explore the connection between the matrix graph and Cholesky factorization and apply the Reverse Cuthill–McKee (RCM) algorithm to a sample grid, demonstrating how a strategic reordering of nodes can significantly reduce the matrix bandwidth and, consequently, the computational cost of finding a solution.", "problem": "A symmetric sparse linear system arises from assembling the nodal energy balance for steady two-dimensional heat conduction on a uniform rectangular grid with isotropic conductivity, using a five-point finite volume stencil. Let $\\mathbf{A} \\in \\mathbb{R}^{N \\times N}$ denote the assembled coefficient matrix with $N$ equal to the number of interior nodes. The undirected graph $G=(V,E)$ of $\\mathbf{A}$ has one vertex per node ($|V|=N$), and an edge $\\{i,j\\} \\in E$ if and only if $a_{ij} \\neq 0$ with $i \\neq j$. The half-bandwidth $\\beta$ of $\\mathbf{A}$ under a given permutation $\\pi$ of the nodes (so that row and column $i$ of $\\mathbf{A}$ correspond to node $\\pi(i)$) is defined by\n$$\n\\beta(\\pi) \\equiv \\max_{\\{u,v\\} \\in E} \\left|p(u)-p(v)\\right|,\n$$\nwhere $p(u)$ is the position of vertex $u$ under $\\pi$ in $\\{1,2,\\dots,N\\}$.\n\nTask 1 (derivation): Starting from the fundamental relationship between the graph structure of $\\mathbf{A}$ and its Cholesky factorization for symmetric positive definite systems, justify why a practical objective for reordering is to minimize $\\beta(\\pi)$, and explain how the Reverse Cuthill–McKee (RCM) algorithm follows from breadth-first search (BFS) level-sets to pursue this objective. Your derivation must begin from the definition of $\\beta(\\pi)$ and from the observation that the fill-in pattern in the Cholesky factor is contained within the envelope implied by the bandwidth.\n\nTask 2 (application): Consider a rectangular grid of size $3 \\times 5$ (rows $\\times$ columns), with nodes numbered in row-major order from the top-left corner (node $1$) to the bottom-right corner (node $15$). The five-point stencil induces $E$ by connecting each interior node to its four axis-aligned neighbors and each boundary node only to existing in-domain neighbors. Apply the RCM algorithm to $G$ under the following precise rules to obtain a permutation $\\pi_{\\mathrm{RCM}}$:\n- Choose the initial root as a node of minimum graph degree; in case of ties, choose the smallest index.\n- Perform Cuthill–McKee layering by BFS: maintain a first-in-first-out queue, dequeue one node at a time, and when enqueuing neighbors, sort unnumbered neighbors by nondecreasing degree, breaking ties by increasing index.\n- Record the Cuthill–McKee order as the sequence of nodes in the order they are dequeued.\n- Reverse that sequence to obtain the RCM ordering.\n\nCompute the half-bandwidth $\\beta(\\pi_{\\mathrm{RCM}})$ for this grid and ordering. Express your final answer as a single integer.", "solution": "The problem is divided into two parts. The first requires a theoretical justification for bandwidth minimization as a reordering strategy for sparse linear systems. The second requires the application of the Reverse Cuthill–McKee algorithm to a specific grid graph to compute the resulting half-bandwidth.\n\nFirst, we validate the problem statement. The givens are: a symmetric sparse linear system from a five-point finite volume discretization of the 2D steady heat equation on a uniform grid, the definition of the matrix graph $G=(V, E)$, the definition of the half-bandwidth $\\beta(\\pi)$, the specific parameters for a $3 \\times 5$ grid, and the precise rules for applying the Reverse Cuthill–McKee (RCM) algorithm. The problem is scientifically grounded in the fields of numerical analysis and scientific computing, specifically concerning the efficient solution of sparse linear systems arising from partial differential equations. The concepts of Cholesky factorization, matrix bandwidth, and graph-based reordering algorithms like RCM are standard and well-defined. The problem is well-posed; the rules for the RCM algorithm are deterministic, ensuring a unique permutation and thus a unique bandwidth. The problem is self-contained and objective. The minor ambiguity in the problem description, contrasting the general statement of $N$ being the number of *interior* nodes with the application to a grid of $N=15$ total nodes, is resolved by the detailed specification of the graph construction for the application part, which includes all $15$ nodes. The problem is therefore deemed valid.\n\nPart 1: Derivation\nThe problem concerns the solution of a symmetric positive definite (SPD) linear system $\\mathbf{A}\\mathbf{x} = \\mathbf{b}$, where $\\mathbf{A} \\in \\mathbb{R}^{N \\times N}$ arises from the discretization of a physical problem. Such systems are commonly solved using direct methods, particularly Cholesky factorization, which decomposes $\\mathbf{A}$ into $\\mathbf{L}\\mathbf{L}^T$, where $\\mathbf{L}$ is a lower triangular matrix. The solution is then found by solving two triangular systems: $\\mathbf{L}\\mathbf{y} = \\mathbf{b}$ (forward substitution) and $\\mathbf{L}^T\\mathbf{x} = \\mathbf{y}$ (backward substitution).\n\nThe efficiency of this method depends critically on the sparsity pattern of $\\mathbf{A}$, and more importantly, on the sparsity pattern of the Cholesky factor $\\mathbf{L}$. During factorization, new non-zero entries, known as \"fill-in,\" can appear in $\\mathbf{L}$ at positions where the original matrix $\\mathbf{A}$ had zeros. That is, $l_{ij}$ can be non-zero even if $a_{ij}=0$ for $i > j$. The set of non-zero positions in $\\mathbf{L}$ is a superset of the non-zero positions in the lower triangle of $\\mathbf{A}$.\n\nThe half-bandwidth of a matrix, for a given row and column ordering, is defined as $\\beta = \\max \\{|i-j| \\mid a_{ij} \\neq 0\\}$. An important theorem states that if $\\mathbf{A}$ is a banded matrix with half-bandwidth $\\beta$, its Cholesky factor $\\mathbf{L}$ will also be banded and will have the same lower half-bandwidth $\\beta$. This means that all fill-in occurs *within* the band. Consequently, the computational resources required for the factorization are determined by $\\beta$. For an $N \\times N$ matrix, the storage for the band is approximately $N(\\beta+1)$, or $O(N\\beta)$, and the number of floating-point operations for a banded Cholesky factorization is approximately $N\\beta^2$, or $O(N\\beta^2)$.\n\nA reordering of the nodes in the underlying grid graph $G$ corresponds to a symmetric permutation of the matrix $\\mathbf{A}$, resulting in $\\mathbf{A}' = \\mathbf{P}\\mathbf{A}\\mathbf{P}^T$, where $\\mathbf{P}$ is a permutation matrix. The goal of reordering algorithms is to find a permutation $\\mathbf{P}$ (or equivalently, a node permutation $\\pi$) such that $\\mathbf{A}'$ has a structure that minimizes fill-in and computational work. The problem defines the half-bandwidth under a permutation $\\pi$ as $\\beta(\\pi) \\equiv \\max_{\\{u,v\\} \\in E} |p(u)-p(v)|$, where $p(u)$ gives the new index (row/column number) of node $u$. This definition is precisely the half-bandwidth of the permuted matrix $\\mathbf{A}'$. Therefore, minimizing $\\beta(\\pi)$ is a direct strategy to reduce the $O(N\\beta^2)$ complexity and $O(N\\beta)$ storage of a banded Cholesky solver, justifying it as a practical objective.\n\nThe Cuthill–McKee (CM) algorithm is a heuristic for minimizing bandwidth. It is based on a Breadth-First Search (BFS) of the matrix graph $G$. A BFS partitions the vertices into level sets $L_0, L_1, \\dots, L_k$, where $L_0$ is the starting node and $L_i$ contains all nodes at shortest-path distance $i$ from the start node. A key property of the graph structure is that any node in level $L_i$ can only be connected to nodes in levels $L_{i-1}$, $L_i$, and $L_{i+1}$. The CM algorithm numbers the nodes starting from a peripheral node (one of low degree) and then proceeds to number nodes level by level, as generated by the BFS. By numbering nodes in adjacent levels consecutively, the difference in indices $|p(u)-p(v)|$ for any connected pair $\\{u,v\\}$ is constrained. This tends to keep the non-zero entries of the matrix clustered around the main diagonal, thus reducing the bandwidth.\n\nThe Reverse Cuthill–McKee (RCM) algorithm simply reverses the ordering produced by CM. While $\\beta(\\pi_{\\mathrm{CM}}) = \\beta(\\pi_{\\mathrm{RCM}})$, it is empirically and theoretically established that RCM typically yields less total fill-in than CM. This is because RCM tends to reduce the matrix *envelope* or *profile* more effectively, which is a more precise measure of the work required for a general sparse (not strictly banded) Cholesky factorization. The fill-in is contained within the envelope defined by the first non-zero in each row. RCM's effectiveness stems from how it structures the dependencies in the factorization process.\n\nPart 2: Application\nWe apply the RCM algorithm to the $3 \\times 5$ grid. The nodes are numbered $1, \\dots, 15$ in row-major order.\nThe grid and node adjacencies (the graph $G$) are defined by the five-point stencil. First, we determine the degree of each node:\n- Corner nodes $\\{1, 5, 11, 15\\}$ have degree $2$.\n- Edge nodes $\\{2, 3, 4, 6, 10, 12, 13, 14\\}$ have degree $3$.\n- Interior nodes $\\{7, 8, 9\\}$ have degree $4$.\n\nThe RCM algorithm proceeds as follows:\n1.  **Select the root node:** Choose a node of minimum degree. The minimum degree is $2$, corresponding to nodes $\\{1, 5, 11, 15\\}$. The tie-breaking rule specifies choosing the one with the smallest index. Thus, the root node is $1$.\n\n2.  **Generate the Cuthill–McKee ordering using BFS:** We maintain a queue $Q$ and the result list $R$.\n    - Start with $R=[]$, $Q=[1]$.\n    - Dequeue $1$, add to $R$. $R=[1]$. Neighbors of $1$: $\\{2, 6\\}$. Degrees: $\\text{deg}(2)=3, \\text{deg}(6)=3$. Tie is broken by index. Enqueue $2$, then $6$. $Q=[2, 6]$.\n    - Dequeue $2$, add to $R$. $R=[1, 2]$. Unvisited neighbors of $2$: $\\{3, 7\\}$. Degrees: $\\text{deg}(3)=3, \\text{deg}(7)=4$. Sorted by degree: $3, 7$. Enqueue $3, 7$. $Q=[6, 3, 7]$.\n    - Dequeue $6$, add to $R$. $R=[1, 2, 6]$. Unvisited neighbor of $6$: $\\{11\\}$. Degree $\\text{deg}(11)=2$. Enqueue $11$. $Q=[3, 7, 11]$.\n    - Dequeue $3$, add to $R$. $R=[1, 2, 6, 3]$. Unvisited neighbors of $3$: $\\{4, 8\\}$. Degrees: $\\text{deg}(4)=3, \\text{deg}(8)=4$. Sorted: $4, 8$. Enqueue $4, 8$. $Q=[7, 11, 4, 8]$.\n    - Dequeue $7$, add to $R$. $R=[1, 2, 6, 3, 7]$. Unvisited neighbor of $7$: $\\{12\\}$. Degree $\\text{deg}(12)=3$. Enqueue $12$. $Q=[11, 4, 8, 12]$.\n    - Dequeue $11$, add to $R$. $R=[1, 2, 6, 3, 7, 11]$. No unvisited neighbors. $Q=[4, 8, 12]$.\n    - Dequeue $4$, add to $R$. $R=[1, 2, 6, 3, 7, 11, 4]$. Unvisited neighbors of $4$: $\\{5, 9\\}$. Degrees: $\\text{deg}(5)=2, \\text{deg}(9)=4$. Sorted: $5, 9$. Enqueue $5, 9$. $Q=[8, 12, 5, 9]$.\n    - Dequeue $8$, add to $R$. $R=[1, 2, 6, 3, 7, 11, 4, 8]$. Unvisited neighbor of $8$: $\\{13\\}$. Degree $\\text{deg}(13)=3$. Enqueue $13$. $Q=[12, 5, 9, 13]$.\n    - Dequeue $12$, add to $R$. $R=[1, 2, 6, 3, 7, 11, 4, 8, 12]$. No unvisited neighbors. $Q=[5, 9, 13]$.\n    - Dequeue $5$, add to $R$. $R=[1, 2, 6, \\dots, 12, 5]$. Unvisited neighbor of $5$: $\\{10\\}$. Degree $\\text{deg}(10)=3$. Enqueue $10$. $Q=[9, 13, 10]$.\n    - Dequeue $9$, add to $R$. $R=[1, 2, \\dots, 5, 9]$. Unvisited neighbor of $9$: $\\{14\\}$. Degree $\\text{deg}(14)=3$. Enqueue $14$. $Q=[13, 10, 14]$.\n    - Dequeue $13$, add to $R$. $R=[1, 2, \\dots, 9, 13]$. No unvisited neighbors. $Q=[10, 14]$.\n    - Dequeue $10$, add to $R$. $R=[1, 2, \\dots, 13, 10]$. Unvisited neighbor of $10$: $\\{15\\}$. Degree $\\text{deg}(15)=2$. Enqueue $15$. $Q=[14, 15]$.\n    - Dequeue $14$, add to $R$. $R=[1, 2, \\dots, 10, 14]$. No unvisited neighbors. $Q=[15]$.\n    - Dequeue $15$, add to $R$. $R=[1, 2, \\dots, 14, 15]$. No unvisited neighbors. $Q=[]$.\n\n    The Cuthill–McKee ordering is:\n    $\\pi_{\\mathrm{CM}} = (1, 2, 6, 3, 7, 11, 4, 8, 12, 5, 9, 13, 10, 14, 15)$.\n\n3.  **Reverse the order:** The RCM ordering is the reverse of the CM ordering:\n    $\\pi_{\\mathrm{RCM}} = (15, 14, 10, 13, 9, 5, 12, 8, 4, 11, 7, 3, 6, 2, 1)$.\n\n4.  **Compute the half-bandwidth:** We establish the new position function $p(u)$ from this ordering. For instance, $p(15)=1$, $p(14)=2$, $p(10)=3$, and so on, up to $p(1)=15$. We must now find the maximum of $|p(u)-p(v)|$ over all edges $\\{u,v\\} \\in E$.\n    The mapping $p$ is: $p(1)=15, p(2)=14, p(3)=12, p(4)=9, p(5)=6, p(6)=13, p(7)=11, p(8)=8, p(9)=5, p(10)=3, p(11)=10, p(12)=7, p(13)=4, p(14)=2, p(15)=1$.\n\n    We check some representative edges that are likely to produce large index differences:\n    - Edge $\\{1, 2\\}: |p(1)-p(2)| = |15-14| = 1$.\n    - Edge $\\{3, 4\\}: |p(3)-p(4)| = |12-9| = 3$.\n    - Edge $\\{14, 15\\}: |p(14)-p(15)| = |2-1| = 1$.\n    - Edge $\\{1, 6\\}: |p(1)-p(6)| = |15-13| = 2$.\n    - Edge $\\{2, 7\\}: |p(2)-p(7)| = |14-11| = 3$.\n    - Edge $\\{3, 8\\}: |p(3)-p(8)| = |12-8| = 4$.\n    - Edge $\\{4, 9\\}: |p(4)-p(9)| = |9-5| = 4$.\n    - Edge $\\{5, 10\\}: |p(5)-p(10)| = |6-3| = 3$.\n    - Edge $\\{6, 11\\}: |p(6)-p(11)| = |13-10| = 3$.\n    - Edge $\\{7, 12\\}: |p(7)-p(12)| = |11-7| = 4$.\n    - Edge $\\{8, 13\\}: |p(8)-p(13)| = |8-4| = 4$.\n    - Edge $\\{9, 14\\}: |p(9)-p(14)| = |5-2| = 3$.\n    - Edge $\\{10, 15\\}: |p(10)-p(15)| = |3-1| = 2$.\n\n    After checking all edges, the maximum difference is found to be $4$. This occurs for several edges, including $\\{3,8\\}$, $\\{4,9\\}$, $\\{7,12\\}$, and $\\{8,13\\}$.\n    Thus, the half-bandwidth for this ordering is $\\beta(\\pi_{\\mathrm{RCM}}) = 4$.", "answer": "$$\\boxed{4}$$", "id": "2468747"}]}