{"hands_on_practices": [{"introduction": "Before we can trust the results of a simulation, we must first ensure it is numerically stable. This practice delves into one of the most fundamental concepts in computational fluid dynamics: the Courant–Friedrichs–Lewy (CFL) condition, which sets an upper limit on the time step for explicit time-integration schemes. By analyzing a one-dimensional advection-diffusion equation, common in scalar transport modeling, you will derive the combined stability constraint arising from both advective and diffusive processes ([@problem_id:2500565]). This exercise is crucial for developing an intuition for the parameters that govern simulation stability in LES and beyond.", "problem": "In a Large-Eddy Simulation (LES) of passive-scalar transport, consider the one-dimensional filtered scalar equation with constant resolved velocity and constant effective diffusivity,\n$$\n\\frac{\\partial \\tilde{\\phi}}{\\partial t} + \\frac{\\partial}{\\partial x}\\big(\\bar{u}\\,\\tilde{\\phi}\\big) \\;=\\; \\frac{\\partial}{\\partial x}\\!\\left(\\kappa\\,\\frac{\\partial \\tilde{\\phi}}{\\partial x}\\right),\n$$\nwhere $\\tilde{\\phi}$ is the filtered scalar, $\\bar{u}$ is the resolved velocity, and $\\kappa$ is the effective diffusivity (molecular plus subgrid contributions). The spatial domain is discretized on a uniform mesh of spacing $\\Delta$, and the update in time uses explicit forward Euler. The convective flux is discretized with first-order upwind and the diffusive flux with second-order central differences in a conservative finite-volume form. Assume $\\bar{u} \\ge 0$ so that upwinding uses the left state; when needed, replace $\\bar{u}$ by $|\\bar{u}|$.\n\nStarting from the conservative finite-volume update for the cell average $\\tilde{\\phi}_j^n$ at time $t^n$, derive a single inequality of the form\n$$\nf(\\Delta t;\\,\\Delta,\\,|\\bar{u}|,\\,\\kappa)\\;\\le\\;1\n$$\nthat guarantees linear monotonicity (nonnegative update coefficients that sum to one) of the explicit scheme. Then, for the mesh and material parameters\n$$\n\\Delta \\;=\\; 2.5 \\times 10^{-3}\\ \\mathrm{m},\\qquad |\\bar{u}|\\;=\\; 3.2\\ \\mathrm{m/s},\\qquad \\kappa \\;=\\; 1.5 \\times 10^{-4}\\ \\mathrm{m^2/s},\n$$\nevaluate the left-hand side of your inequality at the trial time step\n$$\n\\Delta t \\;=\\; 3.00 \\times 10^{-4}\\ \\mathrm{s},\n$$\nand interpret the stability margin as $1$ minus that value. Finally, determine the maximum stable explicit time step $\\Delta t_{\\max}$ that exactly saturates your inequality.\n\nExpress your final answer as the value of $\\Delta t_{\\max}$ in seconds, rounded to four significant figures. Use the Courant–Friedrichs–Lewy (CFL) nomenclature as appropriate, and clearly state any intermediate dimensionless groups you introduce, but do not assume any result not derived from the stated discretization and governing equation.", "solution": "The problem as stated is subjected to validation.\n\nStep 1: Extract Givens.\n- Governing Equation: $\\frac{\\partial \\tilde{\\phi}}{\\partial t} + \\frac{\\partial}{\\partial x}\\big(\\bar{u}\\,\\tilde{\\phi}\\big) = \\frac{\\partial}{\\partial x}\\!\\left(\\kappa\\,\\frac{\\partial \\tilde{\\phi}}{\\partial x}\\right)$, where $\\tilde{\\phi}$ is the filtered scalar, $\\bar{u}$ is a constant resolved velocity, and $\\kappa$ is a constant effective diffusivity.\n- Discretization: Uniform mesh with spacing $\\Delta$. Explicit forward Euler in time. Conservative finite-volume form for space.\n- Flux Schemes: First-order upwind for the convective flux $\\frac{\\partial}{\\partial x}(\\bar{u}\\,\\tilde{\\phi})$. Second-order central differences for the diffusive flux $\\frac{\\partial}{\\partial x}(\\kappa\\,\\frac{\\partial \\tilde{\\phi}}{\\partial x})$.\n- Upwinding Convention: For $\\bar{u} \\ge 0$, use the left state. When needed, replace $\\bar{u}$ by $|\\bar{u}|$.\n- Task 1: Derive a single inequality $f(\\Delta t;\\,\\Delta,\\,|\\bar{u}|,\\,\\kappa)\\;\\le\\;1$ that guarantees linear monotonicity.\n- Task 2: For the given parameters, evaluate the left-hand side of the inequality.\n- Task 3: Interpret the stability margin.\n- Task 4: Determine the maximum stable explicit time step, $\\Delta t_{\\max}$.\n- Parameters: $\\Delta = 2.5 \\times 10^{-3}\\ \\mathrm{m}$, $|\\bar{u}| = 3.2\\ \\mathrm{m/s}$, $\\kappa = 1.5 \\times 10^{-4}\\ \\mathrm{m^2/s}$, $\\Delta t = 3.00 \\times 10^{-4}\\ \\mathrm{s}$.\n\nStep 2: Validate Using Extracted Givens.\n- The problem is **scientifically grounded**: It concerns the stability analysis of a standard numerical scheme for the advection-diffusion equation, a fundamental topic in computational fluid dynamics and heat and mass transfer. The context of Large-Eddy Simulation (LES) is appropriate, as this equation form is the basis for scalar transport modeling in LES.\n- The problem is **well-posed**: It requests the derivation of a stability criterion and subsequent calculations based on a clearly defined discretization method and governing equation. The requested result (a time step limit) is known to exist and be unique for this class of problems.\n- The problem is **objective**: All terms are defined, the discretization schemes are specified without ambiguity, and the tasks are quantitative and verifiable. No subjective elements are present.\n- The problem is **complete and consistent**: All necessary information (equation, schemes, parameters) is provided. There are no contradictions.\n\nStep 3: Verdict and Action.\nThe problem is valid. A rigorous solution will be provided.\n\nWe begin by formulating the conservative finite-volume discretization of the governing equation. We integrate the partial differential equation over a control volume (cell) $j$, which spans from $x_{j-1/2}$ to $x_{j+1/2}$, with cell center $x_j$ and width $\\Delta = x_{j+1/2} - x_{j-1/2}$.\n$$\n\\int_{x_{j-1/2}}^{x_{j+1/2}} \\frac{\\partial \\tilde{\\phi}}{\\partial t} \\,dx \\;+\\; \\int_{x_{j-1/2}}^{x_{j+1/2}} \\frac{\\partial}{\\partial x}\\big(\\bar{u}\\,\\tilde{\\phi}\\big) \\,dx \\;=\\; \\int_{x_{j-1/2}}^{x_{j+1/2}} \\frac{\\partial}{\\partial x}\\!\\left(\\kappa\\,\\frac{\\partial \\tilde{\\phi}}{\\partial x}\\right) \\,dx\n$$\nLet $\\tilde{\\phi}_j(t)$ be the cell-averaged value of $\\tilde{\\phi}$ in cell $j$. Applying the divergence theorem and the definition of the cell average, the equation becomes:\n$$\n\\frac{d \\tilde{\\phi}_j}{d t} \\Delta \\;+\\; \\left[F_c\\right]_{j+1/2} - \\left[F_c\\right]_{j-1/2} \\;=\\; \\left[F_d\\right]_{j+1/2} - \\left[F_d\\right]_{j-1/2}\n$$\nwhere $F_c = \\bar{u}\\,\\tilde{\\phi}$ is the convective flux and $F_d = \\kappa\\,\\frac{\\partial \\tilde{\\phi}}{\\partial x}$ is the diffusive flux. Rearranging for the time derivative of the cell average:\n$$\n\\frac{d \\tilde{\\phi}_j}{d t} \\;=\\; -\\frac{1}{\\Delta} \\left( F_{c, j+1/2} - F_{c, j-1/2} \\right) \\;+\\; \\frac{1}{\\Delta} \\left( F_{d, j+1/2} - F_{d, j-1/2} \\right)\n$$\nNow, we discretize the fluxes at the cell faces. The problem states to use first-order upwinding for convection. Since $\\bar{u} \\ge 0$ is assumed, which we generalize to using $|\\bar{u}|$, the value of $\\tilde{\\phi}$ at a face is taken from the upwind (left) cell.\n$$\nF_{c, j+1/2} = |\\bar{u}| \\tilde{\\phi}_j\n$$\n$$\nF_{c, j-1/2} = |\\bar{u}| \\tilde{\\phi}_{j-1}\n$$\nThe diffusive flux is discretized using a second-order central difference:\n$$\nF_{d, j+1/2} = \\kappa \\left( \\frac{\\tilde{\\phi}_{j+1} - \\tilde{\\phi}_j}{\\Delta} \\right)\n$$\n$$\nF_{d, j-1/2} = \\kappa \\left( \\frac{\\tilde{\\phi}_j - \\tilde{\\phi}_{j-1}}{\\Delta} \\right)\n$$\nSubstituting these flux discretizations into the semi-discrete equation gives:\n$$\n\\frac{d \\tilde{\\phi}_j}{d t} = -\\frac{|\\bar{u}|}{\\Delta} (\\tilde{\\phi}_j - \\tilde{\\phi}_{j-1}) + \\frac{\\kappa}{\\Delta^2} (\\tilde{\\phi}_{j+1} - 2\\tilde{\\phi}_j + \\tilde{\\phi}_{j-1})\n$$\nNext, we apply the explicit forward Euler scheme for the time integration, where $\\tilde{\\phi}_j^n = \\tilde{\\phi}_j(t^n)$:\n$$\n\\frac{\\tilde{\\phi}_j^{n+1} - \\tilde{\\phi}_j^n}{\\Delta t} = -\\frac{|\\bar{u}|}{\\Delta} (\\tilde{\\phi}_j^n - \\tilde{\\phi}_{j-1}^n) + \\frac{\\kappa}{\\Delta^2} (\\tilde{\\phi}_{j+1}^n - 2\\tilde{\\phi}_j^n + \\tilde{\\phi}_{j-1}^n)\n$$\nSolving for $\\tilde{\\phi}_j^{n+1}$:\n$$\n\\tilde{\\phi}_j^{n+1} = \\tilde{\\phi}_j^n - \\frac{|\\bar{u}|\\Delta t}{\\Delta} (\\tilde{\\phi}_j^n - \\tilde{\\phi}_{j-1}^n) + \\frac{\\kappa\\Delta t}{\\Delta^2} (\\tilde{\\phi}_{j+1}^n - 2\\tilde{\\phi}_j^n + \\tilde{\\phi}_{j-1}^n)\n$$\nTo analyze linear monotonicity, we group the terms on the right-hand side by their spatial indices:\n$$\n\\tilde{\\phi}_j^{n+1} = \\left(\\frac{|\\bar{u}|\\Delta t}{\\Delta} + \\frac{\\kappa\\Delta t}{\\Delta^2}\\right) \\tilde{\\phi}_{j-1}^n + \\left(1 - \\frac{|\\bar{u}|\\Delta t}{\\Delta} - \\frac{2\\kappa\\Delta t}{\\Delta^2}\\right) \\tilde{\\phi}_j^n + \\left(\\frac{\\kappa\\Delta t}{\\Delta^2}\\right) \\tilde{\\phi}_{j+1}^n\n$$\nThis update is of the form $\\tilde{\\phi}_j^{n+1} = C_{j-1}\\tilde{\\phi}_{j-1}^n + C_j\\tilde{\\phi}_j^n + C_{j+1}\\tilde{\\phi}_{j+1}^n$. The condition for linear monotonicity is that all coefficients $C_k$ must be non-negative, and their sum must be one. Let's check the sum:\n$$\n\\sum C_k = \\left(\\frac{|\\bar{u}|\\Delta t}{\\Delta} + \\frac{\\kappa\\Delta t}{\\Delta^2}\\right) + \\left(1 - \\frac{|\\bar{u}|\\Delta t}{\\Delta} - \\frac{2\\kappa\\Delta t}{\\Delta^2}\\right) + \\left(\\frac{\\kappa\\Delta t}{\\Delta^2}\\right) = 1\n$$\nThe sum is identically one, a feature of conservative schemes. Now we enforce non-negativity for each coefficient. Let $C = \\frac{|\\bar{u}|\\Delta t}{\\Delta}$ be the convective Courant number and $d = \\frac{\\kappa\\Delta t}{\\Delta^2}$ be the diffusive Courant number (or von Neumann number).\nThe coefficients are:\n$$\nC_{j-1} = C + d = \\frac{|\\bar{u}|\\Delta t}{\\Delta} + \\frac{\\kappa\\Delta t}{\\Delta^2} \\ge 0\n$$\n$$\nC_{j+1} = d = \\frac{\\kappa\\Delta t}{\\Delta^2} \\ge 0\n$$\n$$\nC_j = 1 - C - 2d = 1 - \\frac{|\\bar{u}|\\Delta t}{\\Delta} - \\frac{2\\kappa\\Delta t}{\\Delta^2} \\ge 0\n$$\nSince $\\Delta t$, $\\Delta$, $|\\bar{u}|$, and $\\kappa$ are non-negative physical quantities, the conditions for $C_{j-1}$ and $C_{j+1}$ are always satisfied. The constraint on the scheme's stability and monotonicity comes from the coefficient $C_j$:\n$$\n1 - \\frac{|\\bar{u}|\\Delta t}{\\Delta} - \\frac{2\\kappa\\Delta t}{\\Delta^2} \\ge 0\n$$\nRearranging this gives the desired inequality:\n$$\n\\frac{|\\bar{u}|\\Delta t}{\\Delta} + \\frac{2\\kappa\\Delta t}{\\Delta^2} \\le 1\n$$\nThis can be written as $C + 2d \\le 1$. The function $f$ requested in the problem statement is the left-hand side of this inequality:\n$$\nf(\\Delta t;\\,\\Delta,\\,|\\bar{u}|,\\,\\kappa) = \\Delta t \\left( \\frac{|\\bar{u}|}{\\Delta} + \\frac{2\\kappa}{\\Delta^2} \\right)\n$$\nNow, we evaluate this function for the given parameters:\n$\\Delta = 2.5 \\times 10^{-3}\\ \\mathrm{m}$\n$|\\bar{u}| = 3.2\\ \\mathrm{m/s}$\n$\\kappa = 1.5 \\times 10^{-4}\\ \\mathrm{m^2/s}$\n$\\Delta t = 3.00 \\times 10^{-4}\\ \\mathrm{s}$\n\nFirst, we calculate the terms inside the parenthesis:\n$$\n\\frac{|\\bar{u}|}{\\Delta} = \\frac{3.2}{2.5 \\times 10^{-3}} = 1280\\ \\mathrm{s^{-1}}\n$$\n$$\n\\frac{2\\kappa}{\\Delta^2} = \\frac{2 \\times (1.5 \\times 10^{-4})}{(2.5 \\times 10^{-3})^2} = \\frac{3.0 \\times 10^{-4}}{6.25 \\times 10^{-6}} = 48\\ \\mathrm{s^{-1}}\n$$\nSo, the quantity in the parenthesis is $1280 + 48 = 1328\\ \\mathrm{s^{-1}}$.\nThe left-hand side of the inequality is:\n$$\nf = (3.00 \\times 10^{-4}) \\times 1328 = 0.3984\n$$\nThe stability margin is $1 - f = 1 - 0.3984 = 0.6016$. Since $0.3984 \\le 1$, the scheme is stable and monotonic for this trial time step.\n\nFinally, we determine the maximum stable explicit time step, $\\Delta t_{\\max}$, which saturates the inequality:\n$$\n\\Delta t_{\\max} \\left( \\frac{|\\bar{u}|}{\\Delta} + \\frac{2\\kappa}{\\Delta^2} \\right) = 1\n$$\n$$\n\\Delta t_{\\max} = \\frac{1}{\\frac{|\\bar{u}|}{\\Delta} + \\frac{2\\kappa}{\\Delta^2}} = \\frac{1}{1328\\ \\mathrm{s^{-1}}} \\approx 0.000753012... \\ \\mathrm{s}\n$$\nRounding to four significant figures as requested:\n$$\n\\Delta t_{\\max} \\approx 7.530 \\times 10^{-4}\\ \\mathrm{s}\n$$\nThis is the maximum time step allowed to maintain monotonicity and stability for the specified explicit numerical scheme. This limit is a combination of the convective CFL condition ($\\Delta t \\le \\Delta/|\\bar{u}|$) and the diffusive CFL condition ($\\Delta t \\le \\Delta^2/(2\\kappa)$). The combined condition is stricter than either condition alone.", "answer": "$$\\boxed{7.530 \\times 10^{-4}}$$", "id": "2500565"}, {"introduction": "A stable simulation is not necessarily an accurate one, as the choice of discretization scheme introduces numerical errors like dissipation and dispersion. In Large-Eddy Simulation, it is critical to distinguish this inherent numerical dissipation from the physical dissipation intended by the subgrid-scale model. This practice uses Fourier analysis, a powerful tool for analyzing numerical methods, to dissect the properties of different advection schemes and quantify their dissipative behavior relative to an SGS model ([@problem_id:2500593]). This skill is essential for selecting appropriate numerical methods and correctly interpreting the results of an LES for scalar transport.", "problem": "Consider one-dimensional passive scalar transport in a Large-Eddy Simulation (LES) with a constant subgrid-scale (SGS) scalar diffusivity. The filtered scalar field, denoted by $\\phi(x,t)$, obeys the advection–diffusion equation\n$$\n\\frac{\\partial \\phi}{\\partial t} + U \\frac{\\partial \\phi}{\\partial x} = \\kappa_{t} \\frac{\\partial^{2} \\phi}{\\partial x^{2}},\n$$\nwhere $U$ is the constant advecting velocity and $\\kappa_{t}$ is the constant SGS scalar diffusivity. Assume a uniform periodic grid with spacing $\\Delta$, and define the nondimensional wavenumber $\\theta \\equiv k \\Delta$ for a Fourier mode $\\phi(x,0) = \\sin(k x)$.\n\nYou will analyze two spatial discretizations for the advective derivative $\\partial \\phi/\\partial x$, both used in LES for scalar transport:\n- Second-order upwind (for positive $U$): the semi-discrete spatial derivative at grid point $j$ is approximated by\n$$\n\\left.\\frac{\\partial \\phi}{\\partial x}\\right|_{j} \\approx \\frac{3 \\phi_{j} - 4 \\phi_{j-1} + \\phi_{j-2}}{2 \\Delta}.\n$$\n- Fourth-order central: the semi-discrete spatial derivative at grid point $j$ is approximated by\n$$\n\\left.\\frac{\\partial \\phi}{\\partial x}\\right|_{j} \\approx \\frac{-\\phi_{j+2} + 8 \\phi_{j+1} - 8 \\phi_{j-1} + \\phi_{j-2}}{12 \\Delta}.\n$$\nFor the diffusive term, use the standard second-order central approximation,\n$$\n\\left.\\frac{\\partial^{2} \\phi}{\\partial x^{2}}\\right|_{j} \\approx \\frac{\\phi_{j+1} - 2 \\phi_{j} + \\phi_{j-1}}{\\Delta^{2}}.\n$$\n\nStarting from the advection–diffusion equation and the above semi-discrete operators, perform a Fourier analysis for a single mode $\\phi_{j}(t) = A(t) \\sin(j \\theta)$ on the periodic grid to:\n1. Derive the semi-discrete amplification rate for the mode under each advection scheme, carefully identifying the contributions of dispersion (imaginary part) and dissipation (real part) from advection, and the dissipation from the SGS diffusion. Express the real part of the second-order upwind advection symbol in terms of $\\theta$ only.\n2. By equating the numerical dissipation rate introduced by the second-order upwind advection to the SGS diffusive dissipation rate (both evaluated for the same $\\theta$ on the same grid), derive an analytic expression for the unique nondimensional wavenumber $\\theta_{\\star} \\in (0,\\pi)$ at which these two dissipation rates are equal.\n3. Evaluate $\\theta_{\\star}$ for $U = 1.0 \\ \\mathrm{m/s}$, $\\Delta = 1.0 \\times 10^{-2} \\ \\mathrm{m}$, and $\\kappa_{t} = 5.0 \\times 10^{-3} \\ \\mathrm{m^{2}/s}$. Give your answer in radians. Round your answer to four significant figures.\n\nFinally, briefly relate your findings to aliasing of the SGS term: for a quadratic SGS contribution that generates a mode at wavenumber $2k$ from an input mode at $k$, state whether $2\\theta_{\\star}$ lies below, at, or above the Nyquist nondimensional wavenumber, and interpret what this implies for the potential severity of aliasing when using fourth-order central advection (which is non-dissipative) compared with second-order upwind advection (which is dissipative). Your discussion should be qualitative and concise. The final numerical answer to be reported is only the computed value of $\\theta_{\\star}$.", "solution": "The problem presented is subjected to validation and is deemed to be valid. It is scientifically grounded in the field of computational fluid dynamics, specifically concerning Large-Eddy Simulation (LES). The problem is well-posed, objective, and contains sufficient information for a unique solution. A minor ambiguity in the problem statement regarding the form of the Fourier mode, $\\phi_{j}(t) = A(t) \\sin(j \\theta)$, is resolved by interpreting it as a directive to perform a standard von Neumann (Fourier) stability analysis. This standard procedure utilizes complex exponential modes, $\\phi_j(t) = \\hat{\\phi}(t) e^{ij\\theta}$, because they are the eigenfunctions of linear, constant-coefficient finite difference operators on periodic domains. For a linear system with real coefficients, the analysis of the real part ($\\cos(j\\theta)$) and imaginary part ($\\sin(j\\theta)$) of the complex exponential mode is equivalent. Thus, this interpretation is rigorous and allows for a definitive solution.\n\nThe semi-discrete form of the governing advection-diffusion equation at a grid point $j$ is:\n$$\n\\frac{d\\phi_j}{dt} = -U \\left( \\frac{\\partial \\phi}{\\partial x} \\right)_j + \\kappa_t \\left( \\frac{\\partial^2 \\phi}{\\partial x^2} \\right)_j\n$$\nSubstituting the complex Fourier mode $\\phi_j(t) = \\hat{\\phi}(t) e^{ij\\theta}$ into this equation, where $\\theta = k\\Delta$ is the nondimensional wavenumber, yields:\n$$\n\\frac{d\\hat{\\phi}}{dt} e^{ij\\theta} = \\hat{\\phi}(t) \\left[ \\mathcal{L}_{adv}(e^{ij\\theta}) + \\mathcal{L}_{diff}(e^{ij\\theta}) \\right]\n$$\nHere, $\\mathcal{L}_{adv}$ and $\\mathcal{L}_{diff}$ represent the spatial finite difference operators for advection and diffusion, respectively. Since $e^{ij\\theta}$ is an eigenfunction of these operators, we can write $\\mathcal{L}(e^{ij\\theta}) = \\hat{\\mathcal{L}}(\\theta) e^{ij\\theta}$, where $\\hat{\\mathcal{L}}(\\theta)$ is the complex symbol, or spectral representation, of the operator. The equation simplifies to an ordinary differential equation for the modal amplitude $\\hat{\\phi}(t)$:\n$$\n\\frac{d\\hat{\\phi}}{dt} = \\sigma(\\theta) \\hat{\\phi}\n$$\nwhere $\\sigma(\\theta) = \\hat{\\mathcal{L}}_{adv}(\\theta) + \\hat{\\mathcal{L}}_{diff}(\\theta)$ is the total semi-discrete amplification rate. The real part of $\\sigma(\\theta)$ governs the dissipation (if negative) or amplification (if positive) of the mode, while the imaginary part relates to its phase speed and dispersion.\n\nWe analyze each spatial operator to find its symbol.\n\nThe second-order central difference operator for the SGS diffusion term is:\n$$\n\\mathcal{L}_{diff}(\\phi_j) = \\kappa_t \\frac{\\phi_{j+1} - 2\\phi_j + \\phi_{j-1}}{\\Delta^2}\n$$\nIts symbol $\\hat{\\mathcal{L}}_{diff}(\\theta)$ is found by substituting $\\phi_j = e^{ij\\theta}$:\n$$\n\\hat{\\mathcal{L}}_{diff}(\\theta) = \\frac{\\kappa_t}{\\Delta^2} (e^{i\\theta} - 2 + e^{-i\\theta}) = \\frac{\\kappa_t}{\\Delta^2} (2\\cos\\theta - 2) = -\\frac{2\\kappa_t}{\\Delta^2} (1 - \\cos\\theta)\n$$\nThis term is purely real and non-positive, representing the dissipative effect of the SGS model. Using the identity $1 - \\cos\\theta = 2\\sin^2(\\theta/2)$, we can write it as $\\hat{\\mathcal{L}}_{diff}(\\theta) = -\\frac{4\\kappa_t}{\\Delta^2} \\sin^2(\\frac{\\theta}{2})$.\n\nNow, we derive the symbols for the two advection schemes.\n\n**1. Derivation of Amplification Rates and Constituent Parts**\n\n**Second-Order Upwind Advection:**\nThe operator for advection (with $U>0$) is:\n$$\n\\mathcal{L}_{adv, up2}(\\phi_j) = -U \\frac{3\\phi_j - 4\\phi_{j-1} + \\phi_{j-2}}{2\\Delta}\n$$\nIts symbol is:\n$$\n\\hat{\\mathcal{L}}_{adv, up2}(\\theta) = -\\frac{U}{2\\Delta} (3 - 4e^{-i\\theta} + e^{-i2\\theta}) = -\\frac{U}{2\\Delta} [3 - 4(\\cos\\theta - i\\sin\\theta) + (\\cos(2\\theta) - i\\sin(2\\theta))]\n$$\nThe total amplification rate for the semi-discrete system using this advection scheme is $\\sigma_{up2}(\\theta) = \\hat{\\mathcal{L}}_{adv, up2}(\\theta) + \\hat{\\mathcal{L}}_{diff}(\\theta)$.\nThe individual contributions are:\n-   **Dissipation from advection (numerical dissipation):** This is the real part of $\\hat{\\mathcal{L}}_{adv, up2}(\\theta)$.\n    $$\n    \\mathrm{Re}[\\hat{\\mathcal{L}}_{adv, up2}(\\theta)] = -\\frac{U}{2\\Delta} (3 - 4\\cos\\theta + \\cos(2\\theta))\n    $$\n    Using the identity $\\cos(2\\theta) = 2\\cos^2\\theta - 1$, the term in the parenthesis becomes $3 - 4\\cos\\theta + 2\\cos^2\\theta - 1 = 2(1 - 2\\cos\\theta + \\cos^2\\theta) = 2(1 - \\cos\\theta)^2$.\n    Thus, the real part is:\n    $$\n    \\mathrm{Re}[\\hat{\\mathcal{L}}_{adv, up2}(\\theta)] = -\\frac{U}{\\Delta} (1 - \\cos\\theta)^2\n    $$\n-   **Dispersion from advection:** This is the imaginary part of $\\hat{\\mathcal{L}}_{adv, up2}(\\theta)$.\n    $$\n    \\mathrm{Im}[\\hat{\\mathcal{L}}_{adv, up2}(\\theta)] = -\\frac{U}{2\\Delta} (4\\sin\\theta - \\sin(2\\theta))\n    $$\n-   **Dissipation from SGS diffusion:** As derived previously, this is:\n    $$\n    \\hat{\\mathcal{L}}_{diff}(\\theta) = -\\frac{2\\kappa_t}{\\Delta^2} (1 - \\cos\\theta)\n    $$\n\n**Fourth-Order Central Advection:**\nThe operator for advection is:\n$$\n\\mathcal{L}_{adv, c4}(\\phi_j) = -U \\frac{-\\phi_{j+2} + 8\\phi_{j+1} - 8\\phi_{j-1} + \\phi_{j-2}}{12\\Delta}\n$$\nIts symbol is:\n$$\n\\hat{\\mathcal{L}}_{adv, c4}(\\theta) = -\\frac{U}{12\\Delta} (-e^{i2\\theta} + 8e^{i\\theta} - 8e^{-i\\theta} + e^{-i2\\theta}) = -\\frac{U}{12\\Delta} [- (e^{i2\\theta} - e^{-i2\\theta}) + 8(e^{i\\theta} - e^{-i\\theta})]\n$$\nUsing the identity $e^{i\\alpha} - e^{-i\\alpha} = 2i\\sin\\alpha$:\n$$\n\\hat{\\mathcal{L}}_{adv, c4}(\\theta) = -\\frac{U}{12\\Delta} [-2i\\sin(2\\theta) + 16i\\sin\\theta] = -i \\frac{U}{6\\Delta} (8\\sin\\theta - \\sin(2\\theta))\n$$\nThe total amplification rate for this scheme is $\\sigma_{c4}(\\theta) = \\hat{\\mathcal{L}}_{adv, c4}(\\theta) + \\hat{\\mathcal{L}}_{diff}(\\theta)$. The individual contributions are:\n-   **Dissipation from advection (numerical dissipation):** The symbol $\\hat{\\mathcal{L}}_{adv, c4}(\\theta)$ is purely imaginary, so its real part is zero.\n    $$\n    \\mathrm{Re}[\\hat{\\mathcal{L}}_{adv, c4}(\\theta)] = 0\n    $$\n    This scheme is non-dissipative.\n-   **Dispersion from advection:**\n    $$\n    \\mathrm{Im}[\\hat{\\mathcal{L}}_{adv, c4}(\\theta)] = -\\frac{U}{6\\Delta} (8\\sin\\theta - \\sin(2\\theta))\n    $$\n-   **Dissipation from SGS diffusion:** This is the same as for the upwind scheme:\n    $$\n    \\hat{\\mathcal{L}}_{diff}(\\theta) = -\\frac{2\\kappa_t}{\\Delta^2} (1 - \\cos\\theta)\n    $$\n\n**2. Derivation of the Nondimensional Wavenumber $\\theta_{\\star}$**\n\nThe problem requires equating the numerical dissipation rate introduced by the second-order upwind advection scheme to the SGS diffusive dissipation rate. The dissipation *rate* is the magnitude of the (negative) real part of the corresponding symbol.\n-   Numerical dissipation rate: $| \\mathrm{Re}[\\hat{\\mathcal{L}}_{adv, up2}(\\theta)] | = \\frac{U}{\\Delta} (1 - \\cos\\theta)^2$.\n-   SGS dissipation rate: $| \\hat{\\mathcal{L}}_{diff}(\\theta) | = \\frac{2\\kappa_t}{\\Delta^2} (1 - \\cos\\theta)$.\n\nEquating these two rates at the specific wavenumber $\\theta_{\\star}$:\n$$\n\\frac{U}{\\Delta} (1 - \\cos\\theta_{\\star})^2 = \\frac{2\\kappa_t}{\\Delta^2} (1 - \\cos\\theta_{\\star})\n$$\nFor $\\theta_{\\star} \\in (0, \\pi)$, the term $(1 - \\cos\\theta_{\\star})$ is non-zero, so we can divide both sides by it:\n$$\n\\frac{U}{\\Delta} (1 - \\cos\\theta_{\\star}) = \\frac{2\\kappa_t}{\\Delta^2}\n$$\nSolving for $(1 - \\cos\\theta_{\\star})$:\n$$\n1 - \\cos\\theta_{\\star} = \\frac{2\\kappa_t}{U\\Delta}\n$$\nThis gives the expression for $\\cos\\theta_{\\star}$:\n$$\n\\cos\\theta_{\\star} = 1 - \\frac{2\\kappa_t}{U\\Delta}\n$$\nThe nondimensional group $\\frac{U\\Delta}{\\kappa_t}$ is the grid Péclet number, $Pe_{\\Delta}$. In terms of $Pe_{\\Delta}$, the expression is $\\cos\\theta_{\\star} = 1 - \\frac{2}{Pe_{\\Delta}}$. For a solution $\\theta_{\\star} \\in (0, \\pi)$ to exist, the argument of the inverse cosine must be in $(-1, 1)$, which requires $Pe_{\\Delta} > 1$.\n\nThe analytic expression for $\\theta_{\\star}$ is therefore:\n$$\n\\theta_{\\star} = \\arccos\\left(1 - \\frac{2\\kappa_t}{U\\Delta}\\right)\n$$\n\n**3. Evaluation of $\\theta_{\\star}$**\n\nWe are given the values $U = 1.0$ m/s, $\\Delta = 1.0 \\times 10^{-2}$ m, and $\\kappa_t = 5.0 \\times 10^{-3}$ m$^2$/s. All values are in consistent SI units.\nFirst, we compute the dimensionless argument of the arccos function:\n$$\n1 - \\frac{2\\kappa_t}{U\\Delta} = 1 - \\frac{2 \\times (5.0 \\times 10^{-3})}{(1.0) \\times (1.0 \\times 10^{-2})} = 1 - \\frac{1.0 \\times 10^{-2}}{1.0 \\times 10^{-2}} = 1 - 1 = 0\n$$\nNow, we find $\\theta_{\\star}$:\n$$\n\\theta_{\\star} = \\arccos(0)\n$$\nThe principal value for $\\arccos(0)$ that lies in the required interval $(0, \\pi)$ is $\\pi/2$.\n$$\n\\theta_{\\star} = \\frac{\\pi}{2} \\ \\mathrm{radians}\n$$\nTo provide a numerical answer rounded to four significant figures:\n$$\n\\theta_{\\star} \\approx 1.570796... \\ \\mathrm{radians}\n$$\nRounding to four significant figures gives $1.571$.\n\n**4. Discussion of Aliasing**\n\nThe Nyquist nondimensional wavenumber, which corresponds to the highest wavenumber resolvable on a grid with spacing $\\Delta$, is $\\theta_{Nyquist} = k_{Nyquist} \\Delta = (\\pi/\\Delta)\\Delta = \\pi$.\n\nThe problem considers a quadratic SGS contribution that generates a mode at wavenumber $2k$ from an input mode at $k$. This represents the self-interaction of a mode, a fundamental process in turbulence that transfers energy to smaller scales (higher wavenumbers). For our calculated wavenumber $\\theta_{\\star} = \\pi/2$, the generated mode has a nondimensional wavenumber of $2\\theta_{\\star} = 2(\\pi/2) = \\pi$.\n\nThis result, $2\\theta_{\\star} = \\pi$, means that the mode generated by the self-interaction of the mode at $\\theta_{\\star}$ is exactly **at** the Nyquist nondimensional wavenumber.\n\nThis has important implications for the potential severity of aliasing when comparing the two advection schemes:\n-   **Fourth-order central advection:** This scheme is non-dissipative ($\\mathrm{Re}[\\hat{\\mathcal{L}}_{adv, c4}(\\theta)] = 0$). Without any numerical dissipation, energy transferred by nonlinear interactions to high wavenumbers is not removed by the numerical scheme. When energy is transferred to the Nyquist wavenumber $\\pi$, it cannot propagate to higher, unresolved wavenumbers. Instead, it accumulates at the end of the resolved spectrum, a phenomenon known as spectral blocking. If energy were transferred to wavenumbers beyond $\\pi$, it would be aliased (falsely represented) as a lower wavenumber mode, contaminating the solution. The pile-up at $\\theta = \\pi$ is a severe numerical artifact that can lead to instability. The only mechanism to control this is the explicit SGS dissipation, which may be insufficient on its own, especially for under-resolved simulations.\n\n-   **Second-order upwind advection:** This scheme is dissipative. The numerical dissipation rate, $\\frac{U}{\\Delta}(1-\\cos\\theta)^2$, increases with $\\theta$ across the interval $(0, \\pi)$ and is strongest at the highest wavenumbers. At $\\theta_{\\star} = \\pi/2$, its dissipation rate already matches that of the explicit SGS model. For $\\theta > \\theta_{\\star}$, the numerical dissipation becomes even larger than the SGS dissipation. This inherent damping mechanism removes energy from high-wavenumber modes, including those at and near the Nyquist frequency. Consequently, it effectively prevents the severe energy pile-up seen with the central scheme and mitigates the polluting effects of aliasing by dissipating the energy that would otherwise be aliased. The cost is reduced accuracy for the resolved modes due to this numerical damping, but it provides stability.\n\nIn summary, the fact that $2\\theta_\\star$ is located at the Nyquist limit highlights a critical weakness of the non-dissipative central scheme (susceptibility to aliasing-induced instability) and a key feature of the dissipative upwind scheme (implicit damping that enhances stability).", "answer": "$$\\boxed{1.571}$$", "id": "2500593"}, {"introduction": "The transport of a scalar quantity is governed by a fundamental conservation law, and our numerical simulations must honor this principle at the discrete level to be physically meaningful. This hands-on programming exercise guides you through the construction of a \"flux-form\" or conservative finite-volume discretization for the scalar advection equation ([@problem_id:2500597]). By implementing and testing the scheme, you will numerically verify that the total amount of the scalar is conserved over time, bridging the gap between the theoretical formulation of conservation and its practical implementation in code.", "problem": "You are given resolved, filtered fields for velocity components $\\bar{u}$, $\\bar{v}$, $\\bar{w}$ and a resolved scalar $\\bar{\\theta}$ on a uniform Cartesian grid under periodic boundary conditions. In the spirit of Large-Eddy Simulation (LES), suppose that subgrid-scale fluxes, molecular diffusion, and volumetric sources are absent. Starting from the finite-volume statement of scalar conservation for the filtered scalar transport in the absence of sources and diffusion, construct a second-order, flux-form discrete approximation of the filtered scalar transport operator that, when used in a single forward-Euler time update, preserves the global mean of $\\bar{\\theta}$ up to floating-point roundoff.\n\nFundamental base to use:\n- Conservation law for a passive scalar in the absence of sources and diffusion, filtered at the LES scale: $\\partial_t \\bar{\\theta} + \\partial_j \\left( \\bar{u}_j \\, \\bar{\\theta} \\right) = 0$, where repeated index $j$ implies summation over spatial coordinates.\n- Uniform Cartesian grids and periodic boundary conditions in all directions.\n- Finite-volume control-volume balance and definition of numerical fluxes consistent with conservation.\n\nYou must:\n- Derive a uniform-grid, cell-centered, second-order discrete divergence of the advective fluxes $\\partial_j \\left( \\bar{u}_j \\bar{\\theta} \\right)$ using face-centered fluxes constructed by arithmetic averages of neighboring cell-centered quantities. Your approximation must be in strict flux form so that global conservation is guaranteed under periodic boundaries.\n- Implement a single forward-Euler time update $\\bar{\\theta}^{n+1} = \\bar{\\theta}^{n} - \\Delta t \\, \\mathcal{L}(\\bar{\\theta}^{n})$, where $\\mathcal{L}(\\cdot)$ is your discrete operator, and verify numerically that the global mean of $\\bar{\\theta}$ is preserved up to floating-point roundoff.\n\nAssumptions and conventions:\n- All fields are dimensionless. No physical units are required.\n- The grid is uniform with spacings $\\Delta x$, $\\Delta y$, $\\Delta z$ in the $x$, $y$, $z$ directions, respectively. Cell centers are located at positions $x_i = \\left(i + \\tfrac{1}{2}\\right) \\Delta x$, $y_j = \\left(j + \\tfrac{1}{2}\\right) \\Delta y$, $z_k = \\left(k + \\tfrac{1}{2}\\right) \\Delta z$ for integer indices $(i,j,k)$.\n- Periodic boundary conditions are enforced in all directions by wrapping indices.\n\nConstruction details to enforce in your algorithm:\n- For each direction, construct face-centered velocities by arithmetic averages of adjacent cell-centered velocities, e.g., at face $i+\\tfrac{1}{2}$ use $\\bar{u}_{i+\\frac{1}{2},j,k} = \\tfrac{1}{2} \\left( \\bar{u}_{i,j,k} + \\bar{u}_{i+1,j,k} \\right)$, and similarly for $\\bar{v}$ and $\\bar{w}$ in their respective directions.\n- Construct face-centered scalars by arithmetic averages of adjacent cell-centered scalars, e.g., $\\bar{\\theta}_{i+\\frac{1}{2},j,k} = \\tfrac{1}{2} \\left( \\bar{\\theta}_{i,j,k} + \\bar{\\theta}_{i+1,j,k} \\right)$.\n- Define face fluxes as products of face-centered velocities and face-centered scalars, e.g., $F^x_{i+\\frac{1}{2},j,k} = \\bar{u}_{i+\\frac{1}{2},j,k} \\, \\bar{\\theta}_{i+\\frac{1}{2},j,k}$, with analogous definitions for $F^y$ and $F^z$.\n- Define the discrete divergence of the flux as a difference of neighboring face fluxes divided by the grid spacing, for example, $\\left[\\nabla \\cdot \\left(\\bar{\\mathbf{u}} \\bar{\\theta}\\right)\\right]_{i,j,k} \\approx \\dfrac{F^x_{i+\\frac{1}{2},j,k} - F^x_{i-\\frac{1}{2},j,k}}{\\Delta x} + \\dfrac{F^y_{i,j+\\frac{1}{2},k} - F^y_{i,j-\\frac{1}{2},k}}{\\Delta y} + \\dfrac{F^z_{i,j,k+\\frac{1}{2}} - F^z_{i,j,k-\\frac{1}{2}}}{\\Delta z}$.\n- Use periodic wrapping so that all required neighbor values exist for every cell.\n\nTest suite:\nImplement and evaluate the single-step forward-Euler update with your operator for the following three cases. In all cases, use a time-step $\\Delta t = 0.01$.\n\n- Case A (one-dimensional): Domain length $L_x = 1$, number of cells $N_x = 64$, spacings $\\Delta x = L_x/N_x$, $\\Delta y = 1$, $\\Delta z = 1$, effectively $N_y = 1$, $N_z = 1$. The cell-center coordinate is $x_i = \\left(i + \\tfrac{1}{2}\\right)\\Delta x$ for $i \\in \\{0,\\dots,N_x-1\\}$. Define velocity $\\bar{u}(x) = 1 + 0.3 \\sin\\left(2\\pi x\\right)$, $\\bar{v} \\equiv 0$, $\\bar{w} \\equiv 0$, and scalar $\\bar{\\theta}(x) = \\sin\\left(2\\pi x\\right) + 0.25 \\cos\\left(6\\pi x\\right)$.\n\n- Case B (two-dimensional): Domain lengths $L_x = 1$, $L_y = 1$, numbers of cells $N_x = 32$, $N_y = 33$, spacings $\\Delta x = L_x/N_x$, $\\Delta y = L_y/N_y$, with $N_z = 1$, $\\Delta z = 1$. Cell-center coordinates are $x_i = \\left(i + \\tfrac{1}{2}\\right)\\Delta x$, $y_j = \\left(j + \\tfrac{1}{2}\\right)\\Delta y$. Define velocity $\\bar{u}(x,y) = \\sin\\left(2\\pi y\\right)$, $\\bar{v}(x,y) = \\cos\\left(2\\pi x\\right)$, $\\bar{w} \\equiv 0$, and scalar $\\bar{\\theta}(x,y) = \\sin\\left(2\\pi x\\right)\\cos\\left(2\\pi y\\right) + 0.1 \\sin\\left(4\\pi x\\right)$.\n\n- Case C (three-dimensional with degenerate extent): Domain lengths $L_x = 1$, $L_y = 1$, $L_z = 1$, numbers of cells $N_x = 1$, $N_y = 8$, $N_z = 9$, spacings $\\Delta x = L_x/N_x$, $\\Delta y = L_y/N_y$, $\\Delta z = L_z/N_z$. Cell-center coordinates are $x_i = \\left(i + \\tfrac{1}{2}\\right)\\Delta x$, $y_j = \\left(j + \\tfrac{1}{2}\\right)\\Delta y$, $z_k = \\left(k + \\tfrac{1}{2}\\right)\\Delta z$. Define velocity $\\bar{u}(y) = 0.7 \\cos\\left(2\\pi y\\right)$, $\\bar{v}(z) = 0.5 \\sin\\left(2\\pi z\\right)$, $\\bar{w}(x) = 0.3 \\cos\\left(2\\pi x\\right)$, and scalar $\\bar{\\theta}(x,y,z) = \\sin\\left(2\\pi y\\right) + \\cos\\left(2\\pi z\\right) + 0.2 \\sin\\left(2\\pi x\\right)$.\n\nQuantities to compute and report:\n- For each case, compute the absolute change in the global mean of $\\bar{\\theta}$ after one forward-Euler step, defined as $\\left|\\langle \\bar{\\theta}^{n+1}\\rangle - \\langle \\bar{\\theta}^{n}\\rangle\\right|$, where $\\langle \\cdot \\rangle$ denotes the arithmetic mean over all grid cells. Because all variables are dimensionless, this change is also dimensionless.\n\nFinal output format:\n- Your program should produce a single line of output containing the three results, in this order for Cases A, B, C, as a comma-separated list enclosed in square brackets, for example, $[\\text{result}_A,\\text{result}_B,\\text{result}_C]$.\n- Each result must be a floating-point number. To facilitate automated checking, print each floating-point number in scientific notation with twelve digits after the decimal point.", "solution": "The problem statement is assessed to be valid. It is a well-posed, scientifically sound, and objective problem in the field of computational fluid dynamics, specifically concerning the numerical discretization of scalar transport equations as used in Large-Eddy Simulation (LES). The problem provides all necessary information, including the governing equation, domain, boundary conditions, and a full specification of the numerical method to be implemented. The task is to derive and implement a specific finite-volume scheme and verify its conservation property.\n\nThe solution proceeds as follows. First, the continuous conservation law is formulated in the finite-volume framework. Second, the specific discrete operator is constructed as per the problem's instructions. Third, the conservation property of the resulting scheme is demonstrated analytically. Finally, numerical implementation details are discussed, which are realized in the provided code.\n\nThe governing equation is the conservation law for a filtered passive scalar $\\bar{\\theta}$ in the absence of sources and diffusion:\n$$\n\\frac{\\partial \\bar{\\theta}}{\\partial t} + \\nabla \\cdot (\\bar{\\mathbf{u}} \\bar{\\theta}) = 0\n$$\nwhere $\\bar{\\mathbf{u}} = (\\bar{u}, \\bar{v}, \\bar{w})$ is the filtered velocity field and the term $\\bar{\\mathbf{u}} \\bar{\\theta}$ represents the advective flux of the scalar.\n\nWe apply the finite-volume method by integrating this equation over a control volume $V_{i,j,k}$ corresponding to a grid cell centered at $(x_i, y_j, z_k)$:\n$$\n\\int_{V_{i,j,k}} \\frac{\\partial \\bar{\\theta}}{\\partial t} dV + \\int_{V_{i,j,k}} \\nabla \\cdot (\\bar{\\mathbf{u}} \\bar{\\theta}) dV = 0\n$$\nThe volume of the cell is $V_{cell} = \\Delta x \\Delta y \\Delta z$. Defining the cell-average of the scalar as $\\bar{\\theta}_{i,j,k} = \\frac{1}{V_{cell}} \\int_{V_{i,j,k}} \\bar{\\theta} dV$, and applying the Gauss divergence theorem to the flux term, we obtain:\n$$\nV_{cell} \\frac{d \\bar{\\theta}_{i,j,k}}{dt} + \\oint_{\\partial V_{i,j,k}} (\\bar{\\mathbf{u}} \\bar{\\theta}) \\cdot \\mathbf{n} \\, dS = 0\n$$\nwhere $\\partial V_{i,j,k}$ is the surface of the cell and $\\mathbf{n}$ is the outward-pointing normal vector. In a cell-centered finite-volume scheme, we approximate the cell-averaged scalar $\\bar{\\theta}_{i,j,k}$ with the value at the cell center. The surface integral is approximated by a sum of fluxes over the six faces of the Cartesian cell:\n$$\nV_{cell} \\frac{d \\bar{\\theta}_{i,j,k}}{dt} + \\left( (F^x A_x)_{i+\\frac{1}{2},j,k} - (F^x A_x)_{i-\\frac{1}{2},j,k} \\right) + \\left( (F^y A_y)_{i,j+\\frac{1}{2},k} - (F^y A_y)_{i,j-\\frac{1}{2},k} \\right) + \\left( (F^z A_z)_{i,j,k+\\frac{1}{2}} - (F^z A_z)_{i,j,k-\\frac{1}{2}} \\right) = 0\n$$\nHere, $F^x$, $F^y$, $F^z$ are the flux components evaluated at the cell faces, and $A_x = \\Delta y \\Delta z$, $A_y = \\Delta x \\Delta z$, $A_z = \\Delta x \\Delta y$ are the face areas. Dividing by $V_{cell}$, we get the semi-discrete equation:\n$$\n\\frac{d \\bar{\\theta}_{i,j,k}}{dt} = - \\left( \\frac{F^x_{i+\\frac{1}{2},j,k} - F^x_{i-\\frac{1}{2},j,k}}{\\Delta x} + \\frac{F^y_{i,j+\\frac{1}{2},k} - F^y_{i,j-\\frac{1}{2},k}}{\\Delta y} + \\frac{F^z_{i,j,k+\\frac{1}{2}} - F^z_{i,j,k-\\frac{1}{2}}}{\\Delta z} \\right)\n$$\nThe right-hand side is the discrete divergence operator, which we denote as $\\mathcal{L}(\\bar{\\theta})_{i,j,k}$.\n\nThe problem specifies a second-order central differencing scheme to construct the fluxes at the cell faces. For example, the flux $F^x$ at face $(i+\\frac{1}{2}, j, k)$ is defined as the product of the face-centered velocity and face-centered scalar. These face-centered quantities are obtained by arithmetic averaging of the values from the adjacent cell centers:\n$$\n\\bar{u}_{i+\\frac{1}{2},j,k} = \\frac{1}{2} \\left( \\bar{u}_{i,j,k} + \\bar{u}_{i+1,j,k} \\right)\n$$\n$$\n\\bar{\\theta}_{i+\\frac{1}{2},j,k} = \\frac{1}{2} \\left( \\bar{\\theta}_{i,j,k} + \\bar{\\theta}_{i+1,j,k} \\right)\n$$\nThe flux is then:\n$$\nF^x_{i+\\frac{1}{2},j,k} = \\bar{u}_{i+\\frac{1}{2},j,k} \\, \\bar{\\theta}_{i+\\frac{1}{2},j,k} = \\frac{1}{4} \\left( \\bar{u}_{i,j,k} + \\bar{u}_{i+1,j,k} \\right) \\left( \\bar{\\theta}_{i,j,k} + \\bar{\\theta}_{i+1,j,k} \\right)\n$$\nAnalogous expressions apply for fluxes $F^y$ and $F^z$. This specific construction defines the operator $\\mathcal{L}(\\bar{\\theta})$. This is a \"flux-form\" or \"conservative\" discretization, which is crucial for ensuring the conservation of the total quantity of $\\bar{\\theta}$.\n\nWe now demonstrate that this scheme conserves the global mean of $\\bar{\\theta}$ under periodic boundary conditions. The time integration is performed with a forward-Euler step:\n$$\n\\bar{\\theta}^{n+1}_{i,j,k} = \\bar{\\theta}^{n}_{i,j,k} - \\Delta t \\, \\mathcal{L}(\\bar{\\theta}^n)_{i,j,k}\n$$\nThe total amount of scalar in the domain at time $t^n$ is proportional to the sum over all cells, $\\sum_{i,j,k} \\bar{\\theta}^{n}_{i,j,k}$. The change in this total sum after one time step is:\n$$\n\\sum_{i,j,k} \\bar{\\theta}^{n+1}_{i,j,k} - \\sum_{i,j,k} \\bar{\\theta}^{n}_{i,j,k} = - \\Delta t \\sum_{i,j,k} \\mathcal{L}(\\bar{\\theta}^n)_{i,j,k}\n$$\nTo show conservation, we must prove that $\\sum_{i,j,k} \\mathcal{L}(\\bar{\\theta}^n)_{i,j,k} = 0$. Let's examine the sum of the $x$-component of the operator over all cells (indices $j$ and $k$ are held constant for now):\n$$\n\\sum_{i=0}^{N_x-1} \\frac{F^x_{i+\\frac{1}{2},j,k} - F^x_{i-\\frac{1}{2},j,k}}{\\Delta x} = \\frac{1}{\\Delta x} \\sum_{i=0}^{N_x-1} \\left( F^x_{i+\\frac{1}{2},j,k} - F^x_{i-\\frac{1}{2},j,k} \\right)\n$$\nThis is a telescoping sum. For each internal cell $i$, the flux $F^x_{i+\\frac{1}{2},j,k}$ is subtracted from cell $i$ and added to cell $i+1$. When we sum over all cells, these internal fluxes perfectly cancel. The only remaining contributions are from the boundary faces. With periodic boundary conditions, the face at $i-\\frac{1}{2}$ for $i=0$ is the same as the face at $i=N_x-\\frac{1}{2}$. That is, the flux leaving the last cell, $F^x_{N_x-1+\\frac{1}{2},j,k}$, is identical to the flux entering the first cell, $F^x_{-\\frac{1}{2},j,k}$. Therefore, the sum is exactly zero:\n$$\n\\sum_{i=0}^{N_x-1} \\left( F^x_{i+\\frac{1}{2},j,k} - F^x_{i-\\frac{1}{2},j,k} \\right) = 0\n$$\nThis holds for any $(j,k)$ pair and, by the same logic, for the sums over the $y$ and $z$ directions. Consequently, the sum of the discrete operator over the entire domain is zero:\n$$\n\\sum_{i,j,k} \\mathcal{L}(\\bar{\\theta})_{i,j,k} = 0\n$$\nThis proves that $\\sum_{i,j,k} \\bar{\\theta}^{n+1}_{i,j,k} = \\sum_{i,j,k} \\bar{\\theta}^{n}_{i,j,k}$, meaning the total sum of $\\bar{\\theta}$ is conserved. The global mean, $\\langle \\bar{\\theta} \\rangle = \\frac{1}{N_x N_y N_z} \\sum_{i,j,k} \\bar{\\theta}_{i,j,k}$, is therefore also conserved. Numerically, this conservation holds up to the limits of floating-point precision. The following implementation will verify this property for the given test cases.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef calculate_divergence(u, v, w, theta, dx, dy, dz):\n    \"\"\"\n    Computes the divergence of the advective flux of a scalar theta.\n    The flux is (u*theta, v*theta, w*theta).\n    The scheme is a second-order, cell-centered finite volume method on a\n    uniform Cartesian grid with periodic boundary conditions.\n    \"\"\"\n    Nx, Ny, Nz = theta.shape\n    \n    div = np.zeros_like(theta)\n    \n    # X-direction flux component and its divergence\n    if Nx > 1:\n        # Calculate face-centered quantities at i+1/2 faces\n        u_ip1 = np.roll(u, -1, axis=0)\n        theta_ip1 = np.roll(theta, -1, axis=0)\n        u_face_x = 0.5 * (u + u_ip1)\n        theta_face_x = 0.5 * (theta + theta_ip1)\n        \n        # Flux at i+1/2 faces\n        flux_x = u_face_x * theta_face_x\n        \n        # Flux at i-1/2 faces by rolling the i+1/2 flux array\n        flux_x_im1 = np.roll(flux_x, 1, axis=0)\n        \n        # Divergence contribution from x-direction\n        div += (flux_x - flux_x_im1) / dx\n\n    # Y-direction flux component and its divergence\n    if Ny > 1:\n        # Calculate face-centered quantities at j+1/2 faces\n        v_jp1 = np.roll(v, -1, axis=1)\n        theta_jp1 = np.roll(theta, -1, axis=1)\n        v_face_y = 0.5 * (v + v_jp1)\n        theta_face_y = 0.5 * (theta + theta_jp1)\n        \n        # Flux at j+1/2 faces\n        flux_y = v_face_y * theta_face_y\n        \n        # Flux at j-1/2 faces\n        flux_y_jm1 = np.roll(flux_y, 1, axis=1)\n        \n        # Divergence contribution from y-direction\n        div += (flux_y - flux_y_jm1) / dy\n\n    # Z-direction flux component and its divergence\n    if Nz > 1:\n        # Calculate face-centered quantities at k+1/2 faces\n        w_kp1 = np.roll(w, -1, axis=2)\n        theta_kp1 = np.roll(theta, -1, axis=2)\n        w_face_z = 0.5 * (w + w_kp1)\n        theta_face_z = 0.5 * (theta + theta_kp1)\n        \n        # Flux at k+1/2 faces\n        flux_z = w_face_z * theta_face_z\n        \n        # Flux at k-1/2 faces\n        flux_z_km1 = np.roll(flux_z, 1, axis=2)\n        \n        # Divergence contribution from z-direction\n        div += (flux_z - flux_z_km1) / dz\n        \n    return div\n\ndef solve():\n    \"\"\"\n    Main function to solve the problem for all test cases.\n    \"\"\"\n    dt = 0.01\n\n    # Define the test cases from the problem statement.\n    test_cases = [\n        # Case A: (Lx, Ly, Lz, Nx, Ny, Nz)\n        {'name': 'A', 'L': (1.0, 1.0, 1.0), 'N': (64, 1, 1)},\n        # Case B: (Lx, Ly, Lz, Nx, Ny, Nz)\n        {'name': 'B', 'L': (1.0, 1.0, 1.0), 'N': (32, 33, 1)},\n        # Case C: (Lx, Ly, Lz, Nx, Ny, Nz)\n        {'name': 'C', 'L': (1.0, 1.0, 1.0), 'N': (1, 8, 9)},\n    ]\n\n    results = []\n    for case in test_cases:\n        Lx, Ly, Lz = case['L']\n        Nx, Ny, Nz = case['N']\n\n        # Grid spacings\n        dx = Lx / Nx\n        dy = Ly / Ny\n        dz = Lz / Nz\n\n        # Cell-centered coordinates\n        x_coords = (np.arange(Nx) + 0.5) * dx\n        y_coords = (np.arange(Ny) + 0.5) * dy\n        z_coords = (np.arange(Nz) + 0.5) * dz\n        \n        X, Y, Z = np.meshgrid(x_coords, y_coords, z_coords, indexing='ij')\n\n        # Initialize fields based on the case\n        if case['name'] == 'A':\n            # 1D Case\n            u = 1.0 + 0.3 * np.sin(2 * np.pi * X)\n            v = np.zeros((Nx, Ny, Nz))\n            w = np.zeros((Nx, Ny, Nz))\n            theta = np.sin(2 * np.pi * X) + 0.25 * np.cos(6 * np.pi * X)\n        elif case['name'] == 'B':\n            # 2D Case\n            u = np.sin(2 * np.pi * Y)\n            v = np.cos(2 * np.pi * X)\n            w = np.zeros((Nx, Ny, Nz))\n            theta = np.sin(2 * np.pi * X) * np.cos(2 * np.pi * Y) + 0.1 * np.sin(4 * np.pi * X)\n        elif case['name'] == 'C':\n            # 3D Case\n            u = 0.7 * np.cos(2 * np.pi * Y)\n            v = 0.5 * np.sin(2 * np.pi * Z)\n            w = 0.3 * np.cos(2 * np.pi * X)\n            theta = np.sin(2 * np.pi * Y) + np.cos(2 * np.pi * Z) + 0.2 * np.sin(2 * np.pi * X)\n\n        # Calculate initial mean of theta\n        mean_theta_n = np.mean(theta)\n        \n        # Calculate the divergence of the flux\n        divergence_op = calculate_divergence(u, v, w, theta, dx, dy, dz)\n        \n        # Perform a single forward-Euler time step\n        theta_np1 = theta - dt * divergence_op\n        \n        # Calculate new mean of theta\n        mean_theta_np1 = np.mean(theta_np1)\n        \n        # Calculate the absolute change in the mean\n        change_in_mean = abs(mean_theta_np1 - mean_theta_n)\n        \n        # Append formatted result\n        results.append(f\"{change_in_mean:.12e}\")\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2500597"}]}