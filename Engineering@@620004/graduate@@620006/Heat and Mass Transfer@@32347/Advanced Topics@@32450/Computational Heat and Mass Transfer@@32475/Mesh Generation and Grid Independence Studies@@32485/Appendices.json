{"hands_on_practices": [{"introduction": "In computational heat transfer, accurately modeling the physics at material interfaces is crucial for reliable results. This exercise explores the fundamental principle of flux conservation across a boundary between two materials with different thermal conductivities. By deriving the correct, conservative discretization for the interfacial heat flux and comparing it to a common but flawed alternative, you will gain a deep understanding of why the choice of numerical approximation is critical and how an inconsistent scheme can lead to errors that persist even as the mesh is refined. [@problem_id:2506397]", "problem": "Consider one-dimensional, steady heat conduction with no internal sources across a material interface located at $x=0$, with thermal conductivities $k_1$ for $x<0$ and $k_2$ for $x>0$, both constant and positive. Two adjacent finite volumes in a Finite Volume Method (FVM) discretization straddle the interface, with cell centers at $x=-\\delta_W$ and $x=+\\delta_E$, where $\\delta_W>0$ and $\\delta_E>0$. Let the corresponding cell-centered unknowns be $T_W$ and $T_E$, which approximate the temperature field at those locations. Assume a constant cross-sectional area and a mesh generated such that the interface coincides with a control-volume face. In a grid independence study, $\\delta_W$ and $\\delta_E$ may be refined while keeping their ratio fixed by mesh clustering near the material interface.\n\nUsing only Fourierâ€™s law and conservation of energy, derive a conservative discrete expression for the interfacial conductive heat flux per unit area, $q_f$, that enforces continuity of normal heat flux at $x=0$ and uses only the data $\\{T_W, T_E, \\delta_W, \\delta_E, k_1, k_2\\}$. Then suppose a non-conservative alternative is used in which the face conductivity is taken as the arithmetic average $k_a=(k_1+k_2)/2$ and a centered difference is applied over the stencil spanning $-\\delta_W$ to $+\\delta_E$, leading to an approximate flux $q_a$.\n\nDefine the relative flux error $\\varepsilon$ of the arithmetic-averaged approximation with respect to the conservative interface flux as $\\varepsilon = q_a/q_f - 1$. Provide a closed-form analytic expression for $\\varepsilon$ in terms of $k_1$, $k_2$, $\\delta_W$, and $\\delta_E$ only. Your final answer must be this single expression. No numerical evaluation is required. If you find it helpful, you may comment on the implications for mesh refinement near the interface, but the final reported answer must be the expression for $\\varepsilon$.", "solution": "The problem statement has been subjected to rigorous validation and is determined to be valid. It is scientifically grounded in the principles of heat transfer and numerical analysis, well-posed, objective, and contains all necessary information for a unique solution. We may proceed.\n\nThe objective is to derive an expression for the relative error $\\varepsilon$ between a non-conservative and a conservative finite-volume approximation for heat flux at a material interface.\n\nFirst, we derive the conservative expression for the interfacial heat flux per unit area, $q_f$, at the location $x=0$. The foundation of this derivation is the enforcement of heat flux continuity, which is a direct consequence of energy conservation for one-dimensional, steady-state heat conduction with no sources. Let $T_f$ be the temperature at the interface face, $x=0$.\n\nApplying Fourier's Law, $-k \\frac{dT}{dx}$, to the two control volume halves adjacent to the interface, we obtain two expressions for the flux.\nFor the interval $x \\in [-\\delta_W, 0]$, the flux is approximated as:\n$$\nq_f = -k_1 \\frac{T_f - T_W}{0 - (-\\delta_W)} = k_1 \\frac{T_W - T_f}{\\delta_W}\n$$\nFor the interval $x \\in [0, \\delta_E]$, the flux is approximated as:\n$$\nq_f = -k_2 \\frac{T_E - T_f}{\\delta_E - 0} = k_2 \\frac{T_f - T_E}{\\delta_E}\n$$\nFor a conservative scheme, these two expressions for the flux must be equal. This allows us to solve for the unknown interface temperature $T_f$:\n$$\nk_1 \\frac{T_W - T_f}{\\delta_W} = k_2 \\frac{T_f - T_E}{\\delta_E}\n$$\nRearranging the terms to solve for $T_f$:\n$$\n\\frac{k_1}{\\delta_W} T_W - \\frac{k_1}{\\delta_W} T_f = \\frac{k_2}{\\delta_E} T_f - \\frac{k_2}{\\delta_E} T_E\n$$\n$$\nT_f \\left( \\frac{k_1}{\\delta_W} + \\frac{k_2}{\\delta_E} \\right) = \\frac{k_1}{\\delta_W} T_W + \\frac{k_2}{\\delta_E} T_E\n$$\n$$\nT_f = \\frac{\\frac{k_1}{\\delta_W} T_W + \\frac{k_2}{\\delta_E} T_E}{\\frac{k_1}{\\delta_W} + \\frac{k_2}{\\delta_E}}\n$$\nThis expression for $T_f$ is a weighted average of the nodal temperatures $T_W$ and $T_E$, where the weights are the thermal conductances of the half-cells. Now, we substitute this back into one of the flux expressions. Using the first one:\n$$\nq_f = \\frac{k_1}{\\delta_W} (T_W - T_f) = \\frac{k_1}{\\delta_W} \\left( T_W - \\frac{\\frac{k_1}{\\delta_W} T_W + \\frac{k_2}{\\delta_E} T_E}{\\frac{k_1}{\\delta_W} + \\frac{k_2}{\\delta_E}} \\right)\n$$\nTo simplify, place the terms inside the parenthesis over a common denominator:\n$$\nq_f = \\frac{k_1}{\\delta_W} \\left( \\frac{T_W \\left( \\frac{k_1}{\\delta_W} + \\frac{k_2}{\\delta_E} \\right) - \\left( \\frac{k_1}{\\delta_W} T_W + \\frac{k_2}{\\delta_E} T_E \\right)}{\\frac{k_1}{\\delta_W} + \\frac{k_2}{\\delta_E}} \\right)\n$$\n$$\nq_f = \\frac{k_1}{\\delta_W} \\left( \\frac{\\frac{k_1 T_W}{\\delta_W} + \\frac{k_2 T_W}{\\delta_E} - \\frac{k_1 T_W}{\\delta_W} - \\frac{k_2 T_E}{\\delta_E}}{\\frac{k_1}{\\delta_W} + \\frac{k_2}{\\delta_E}} \\right) = \\frac{k_1}{\\delta_W} \\left( \\frac{\\frac{k_2}{\\delta_E}(T_W - T_E)}{\\frac{k_1 \\delta_E + k_2 \\delta_W}{\\delta_W \\delta_E}} \\right)\n$$\n$$\nq_f = \\frac{\\frac{k_1 k_2}{\\delta_W \\delta_E}(T_W - T_E)}{\\frac{k_1 \\delta_E + k_2 \\delta_W}{\\delta_W \\delta_E}} = \\frac{k_1 k_2}{k_1 \\delta_E + k_2 \\delta_W} (T_W - T_E)\n$$\nThis can be rewritten in a more physically intuitive form by recognizing the denominator as the sum of thermal resistances in series, $R = \\frac{\\delta}{k}$:\n$$\nq_f = \\frac{T_W - T_E}{\\frac{\\delta_W}{k_1} + \\frac{\\delta_E}{k_2}}\n$$\nThis is the correct, conservative expression for the interfacial flux, which is equivalent to using a harmonic mean for the interface conductivity.\n\nNext, we formulate the non-conservative alternative flux, $q_a$. It is defined using the arithmetic average of conductivities, $k_a = \\frac{k_1+k_2}{2}$, and a standard centered difference approximation for the gradient over the entire stencil of width $\\delta_W + \\delta_E$:\n$$\nq_a = -k_a \\frac{T_E - T_W}{(\\delta_E) - (-\\delta_W)} = -\\left(\\frac{k_1+k_2}{2}\\right) \\frac{T_E - T_W}{\\delta_W + \\delta_E}\n$$\n$$\nq_a = \\frac{k_1+k_2}{2(\\delta_W + \\delta_E)} (T_W - T_E)\n$$\nNow, we compute the relative flux error $\\varepsilon$, defined as $\\varepsilon = \\frac{q_a}{q_f} - 1$. We first find the ratio $\\frac{q_a}{q_f}$:\n$$\n\\frac{q_a}{q_f} = \\frac{\\frac{k_1+k_2}{2(\\delta_W + \\delta_E)} (T_W - T_E)}{\\frac{1}{\\frac{\\delta_W}{k_1} + \\frac{\\delta_E}{k_2}} (T_W - T_E)} = \\frac{k_1+k_2}{2(\\delta_W + \\delta_E)} \\left( \\frac{\\delta_W}{k_1} + \\frac{\\delta_E}{k_2} \\right)\n$$\nThe dependency on temperatures $(T_W - T_E)$ correctly cancels. Now, we perform the algebraic simplification:\n$$\n\\frac{q_a}{q_f} = \\frac{k_1+k_2}{2(\\delta_W + \\delta_E)} \\left( \\frac{k_2 \\delta_W + k_1 \\delta_E}{k_1 k_2} \\right) = \\frac{(k_1+k_2)(k_2 \\delta_W + k_1 \\delta_E)}{2 k_1 k_2 (\\delta_W + \\delta_E)}\n$$\nSubstitute this ratio into the definition of $\\varepsilon$:\n$$\n\\varepsilon = \\frac{(k_1+k_2)(k_2 \\delta_W + k_1 \\delta_E)}{2 k_1 k_2 (\\delta_W + \\delta_E)} - 1\n$$\nCombine terms over a common denominator:\n$$\n\\varepsilon = \\frac{(k_1+k_2)(k_2 \\delta_W + k_1 \\delta_E) - 2 k_1 k_2 (\\delta_W + \\delta_E)}{2 k_1 k_2 (\\delta_W + \\delta_E)}\n$$\nExpand the numerator:\n$$\n\\text{Numerator} = (k_1 k_2 \\delta_W + k_1^2 \\delta_E + k_2^2 \\delta_W + k_1 k_2 \\delta_E) - (2 k_1 k_2 \\delta_W + 2 k_1 k_2 \\delta_E)\n$$\nGroup terms by $\\delta_W$ and $\\delta_E$:\n$$\n\\text{Numerator} = \\delta_W (k_1 k_2 + k_2^2 - 2 k_1 k_2) + \\delta_E (k_1^2 + k_1 k_2 - 2 k_1 k_2)\n$$\n$$\n\\text{Numerator} = \\delta_W (k_2^2 - k_1 k_2) + \\delta_E (k_1^2 - k_1 k_2)\n$$\nFactor the terms:\n$$\n\\text{Numerator} = k_2 \\delta_W (k_2 - k_1) + k_1 \\delta_E (k_1 - k_2)\n$$\nFactor out the common term $(k_1 - k_2)$:\n$$\n\\text{Numerator} = -k_2 \\delta_W (k_1 - k_2) + k_1 \\delta_E (k_1 - k_2) = (k_1 - k_2)(k_1 \\delta_E - k_2 \\delta_W)\n$$\nSubstituting this back into the expression for $\\varepsilon$ yields the final analytical form:\n$$\n\\varepsilon = \\frac{(k_1 - k_2)(k_1 \\delta_E - k_2 \\delta_W)}{2 k_1 k_2 (\\delta_W + \\delta_E)}\n$$\nIt is instructive to note that this error does not depend on the absolute mesh size, but on the cell size ratio $\\delta_W / \\delta_E$. If one refines the mesh while keeping this ratio constant, the error $\\varepsilon$ due to the non-conservative arithmetic average does not vanish. This demonstrates that such a scheme is not consistent. The error is zero only if $k_1 = k_2$ (a homogeneous medium) or, non-trivially, if the mesh is constructed such that $k_1 \\delta_E = k_2 \\delta_W$, or $\\frac{\\delta_W}{\\delta_E} = \\frac{k_1}{k_2}$. This specific grid spacing cancels the error for this simple problem but is not a generally applicable solution. The conservative harmonic-mean approach is robust and correct for any mesh configuration.", "answer": "$$ \\boxed{ \\frac{(k_1 - k_2)(k_1 \\delta_E - k_2 \\delta_W)}{2 k_1 k_2 (\\delta_W + \\delta_E)} } $$", "id": "2506397"}, {"introduction": "Accurately capturing heat transfer in turbulent flows often hinges on resolving the thin fluid layers near solid surfaces. This practice delves into the essential task of designing a mesh that resolves the viscous sublayer by translating the non-dimensional wall distance, $y^+$, into a physical grid spacing. You will perform a fundamental calculation for near-wall cell height and analyze the sensitivity of heat transfer predictions to this choice, providing insight into the robustness of wall-resolved turbulence models. [@problem_id:2506403]", "problem": "A turbulent forced-convection simulation over a smooth, isothermal flat plate in air at standard conditions is to be performed using the Shear Stress Transport (SST) $k$-$\\omega$ model with integration to the wall (no wall functions). To resolve the viscous sublayer, the target nondimensional wall-normal distance at the first cell center is $y^+ \\approx 1$. The wall friction velocity is measured to be $u_{\\tau} = 0.45\\,\\mathrm{m/s}$ and the kinematic viscosity of air is $\\nu = 1.6 \\times 10^{-5}\\,\\mathrm{m^2/s}$. Using fundamental definitions of wall units and without invoking wall functions, determine the required first cell center height $y_1$ (distance from the wall to the centroid of the first cell) that corresponds to $y^+ = 1$. Round your answer to four significant figures and express it in meters.\n\nThen, starting from the definitions of the friction velocity $u_{\\tau} = \\sqrt{\\tau_w/\\rho}$, the wall-unit coordinate $y^+ = y u_{\\tau}/\\nu$, the Nusselt number $Nu = h L_c/k$, and the wall heat flux relation $q'' = h\\,(T_w - T_\\infty) = -k\\,\\left.\\frac{\\partial T}{\\partial y}\\right|_{w}$, reason about how the predicted local Nusselt number $Nu$ is sensitive to deviations of the first-cell wall coordinate $y_1^+$ away from the target $y_1^+ \\approx 1$ while remaining within the viscous sublayer (say $y_1^+ \\lesssim 5$). Your discussion should be based on near-wall scalings of the Reynolds-Averaged Navierâ€“Stokes (RANS) energy equation under SST $k$-$\\omega$ modeling and should qualitatively establish the leading-order dependence of the error in $Nu$ on small perturbations of $y_1^+$ around $1$. No numerical result is required for this discussion.\n\nProvide only the numerical value of $y_1$ as your final answer, rounded to four significant figures and expressed in meters.", "solution": "The problem is first validated for scientific soundness, completeness, and objectivity.\n\n**Problem Validation**\n\n**Step 1: Extracted Givens**\n-   Model: Shear Stress Transport (SST) $k$-$\\omega$ model with integration to the wall.\n-   Target nondimensional wall-normal distance: $y^+ \\approx 1$.\n-   Wall friction velocity: $u_{\\tau} = 0.45\\,\\mathrm{m/s}$.\n-   Kinematic viscosity of air: $\\nu = 1.6 \\times 10^{-5}\\,\\mathrm{m^2/s}$.\n-   Definitions: $u_{\\tau} = \\sqrt{\\tau_w/\\rho}$, $y^+ = y u_{\\tau}/\\nu$, $Nu = h L_c/k$, $q'' = h\\,(T_w - T_\\infty) = -k\\,\\left.\\frac{\\partial T}{\\partial y}\\right|_{w}$.\n-   Task 1: Determine the first cell center height $y_1$ for $y^+ = 1$.\n-   Task 2: Discuss the sensitivity of the predicted local Nusselt number $Nu$ to deviations of $y_1^+$ from $1$ within the viscous sublayer ($y_1^+ \\lesssim 5$).\n\n**Step 2: Validation**\nThe problem is scientifically grounded, well-posed, and objective. It is based on fundamental principles of computational fluid dynamics and heat transfer concerning near-wall turbulence modeling. The provided data are physically consistent and sufficient for the required calculation. The second part of the problem, a qualitative discussion, is a standard conceptual question in this field and is well-defined. There are no contradictions, ambiguities, or factual unsoundness.\n\n**Verdict**\nThe problem is deemed valid. A solution will be provided.\n\n**Part 1: Calculation of First Cell Height $y_1$**\n\nThe nondimensional wall-normal distance, $y^+$, is defined as:\n$$y^+ = \\frac{y u_{\\tau}}{\\nu}$$\nwhere $y$ is the physical distance from the wall, $u_{\\tau}$ is the friction velocity, and $\\nu$ is the kinematic viscosity of the fluid. We are required to find the height of the first cell center, which we denote as $y_1$, such that the corresponding nondimensional distance is $y^+ = 1$.\n\nRearranging the definition for $y_1$, we have:\n$$y_1 = \\frac{y^{+} \\nu}{u_{\\tau}}$$\n\nWe are given the following values:\n-   $y^+ = 1$ (dimensionless target)\n-   $\\nu = 1.6 \\times 10^{-5}\\,\\mathrm{m^2/s}$\n-   $u_{\\tau} = 0.45\\,\\mathrm{m/s}$\n\nSubstituting these values into the equation for $y_1$:\n$$y_1 = \\frac{(1) \\times (1.6 \\times 10^{-5}\\,\\mathrm{m^2/s})}{0.45\\,\\mathrm{m/s}}$$\n$$y_1 = \\frac{1.6}{0.45} \\times 10^{-5}\\,\\mathrm{m}$$\n$$y_1 \\approx 3.5555... \\times 10^{-5}\\,\\mathrm{m}$$\n\nRounding the result to four significant figures as required by the problem statement:\n$$y_1 \\approx 3.556 \\times 10^{-5}\\,\\mathrm{m}$$\n\n**Part 2: Sensitivity of Nusselt Number Prediction**\n\nThe second part requires a qualitative discussion on the sensitivity of the predicted local Nusselt number $Nu$ to the placement of the first grid point $y_1$, as long as it remains within the viscous sublayer (i.e., $y_1^+ \\lesssim 5$).\n\nThe local Nusselt number is defined as $Nu = h L_c/k$, where the heat transfer coefficient is $h = q''_w / (T_w - T_\\infty)$. Therefore, $Nu$ is directly proportional to the wall heat flux, $q''_w$. The accuracy of the predicted $Nu$ is thus directly dependent on the accuracy of the computed wall heat flux.\n\nThe wall heat flux is given by Fourier's law at the wall:\n$$q''_w = -k \\left. \\frac{\\partial T}{\\partial y} \\right|_{y=0}$$\nIn a cell-centered finite volume method, this gradient is typically approximated using a first-order, one-sided difference scheme:\n$$q''_{w, \\text{num}} = -k \\frac{T_1 - T_w}{y_1 - 0} = k \\frac{T_w - T_1}{y_1}$$\nwhere $T_1$ is the temperature at the first cell center, located at $y=y_1$.\n\nTo analyze the accuracy of this approximation, we must examine the behavior of the temperature profile $T(y)$ very close to the wall. The Reynolds-Averaged Navier-Stokes (RANS) energy equation for steady, incompressible flow with constant properties is:\n$$\\frac{\\partial (U_j T)}{\\partial x_j} = \\frac{\\partial}{\\partial x_j} \\left( \\alpha \\frac{\\partial T}{\\partial x_j} - \\overline{u'_j T'} \\right) + S_T$$\nwhere $\\alpha = k/(\\rho c_p)$ is the thermal diffusivity and $-\\overline{u'_j T'}$ is the turbulent heat flux. For a two-dimensional boundary layer, and very close to the wall ($y \\to 0$), convective terms are negligible. The equation simplifies to a balance between molecular and turbulent diffusion in the wall-normal direction:\n$$\\frac{d}{dy} \\left( \\alpha \\frac{dT}{dy} - \\overline{v'T'} \\right) \\approx 0$$\nThis implies that the total heat flux, $q_{total} = -k \\frac{dT}{dy} + \\rho c_p \\overline{v'T'}$, is approximately constant and equal to the wall heat flux $q''_w$.\n\nWithin the viscous sublayer ($y^+ \\lesssim 5$), turbulent fluctuations are heavily damped by viscous effects. Specifically, the wall-normal velocity fluctuation $v'$ must satisfy $v' \\propto y^2$ due to continuity and no-slip conditions, and temperature fluctuations near an isothermal wall scale as $T' \\propto y$. This leads to the turbulent heat flux scaling as $\\overline{v'T'} \\propto y^3$ or higher powers of $y$. Consequently, the turbulent heat flux is negligible compared to the molecular heat flux for very small $y$.\n\nThe energy equation in the viscous sublayer thus reduces to:\n$$\\frac{d}{dy}\\left( k \\frac{dT}{dy} \\right) \\approx 0 \\quad \\implies \\quad -k \\frac{dT}{dy} \\approx \\text{constant} = q''_w$$\nThis indicates that the temperature profile is nearly linear with respect to $y$:\n$$T(y) \\approx T_w - \\frac{q''_w}{k} y$$\nIf the temperature profile were perfectly linear, the finite difference approximation $q''_{w, \\text{num}} = k(T_w - T_1)/y_1$ would be exact, because substituting the linear profile gives $T_1 = T_w - (q''_w/k)y_1$, and thus $q''_{w, \\text{num}} = k(T_w - (T_w - (q''_w/k)y_1))/y_1 = q''_w$.\n\nThe error in the numerical approximation arises from the deviation of the true temperature profile from a perfect line. To find the leading-order error, we use a Taylor series expansion of $T(y)$ around $y=0$:\n$$T(y) = T(0) + T'(0)y + \\frac{T''(0)}{2}y^2 + \\frac{T'''(0)}{6}y^3 + \\mathcal{O}(y^4)$$\nThe numerically approximated gradient is $\\frac{T(y_1)-T(0)}{y_1} = T'(0) + \\frac{T''(0)}{2}y_1 + \\frac{T'''(0)}{6}y_1^2 + \\mathcal{O}(y_1^3)$.\nFrom the simplified energy equation, $\\frac{d^2 T}{dy^2} = \\frac{1}{\\alpha} \\frac{d}{dy}(\\overline{v'T'})$. Since $\\overline{v'T'} \\propto y^3$, its derivative $\\frac{d}{dy}(\\overline{v'T'})$ scales as $y^2$. This means $T''(y) \\propto y^2$ and importantly, $T''(0)=0$.\nThe Taylor series is therefore $T(y) = T_w + T'(0)y + \\mathcal{O}(y^3)$. A more careful analysis of the energy balance including the $\\overline{v'T'} \\propto y^3$ term actually yields $T'''(0)=0$ and a leading non-linear term of $\\mathcal{O}(y^4)$. Let's assume the more general case based on the Taylor series itself. With $T''(0)=0$, the error in the gradient calculation is:\n$$\\text{Error} = \\left(\\frac{T(y_1)-T_w}{y_1}\\right) - T'(0) = \\frac{T'''(0)}{6}y_1^2 + \\mathcal{O}(y_1^3)$$\nThe error in the computed wall heat flux $q''_{w, \\text{num}}$ is thus of second order with respect to the first cell height $y_1$.\n$$\\text{Error}(q''_w) \\propto y_1^2$$\nExpressing this in wall units, the relative error in the Nusselt number prediction scales with the square of the non-dimensional wall distance of the first cell center:\n$$\\frac{\\Delta Nu}{Nu} \\propto (y_1^+)^2$$\nBecause the error depends on the square of $y_1^+$, it remains very small for values of $y_1^+ \\lesssim 5$. For instance, doubling $y_1^+$ from $1$ to $2$ (both well within the viscous sublayer) would quadruple the discretization error, but the absolute error, being proportional to a small quantity squared, is still small. This demonstrates a relative insensitivity of the predicted heat transfer to the precise placement of the first grid point, provided it is kept within the viscous sublayer. The strict requirement of $y^+ \\approx 1$ is often more critical for accurately resolving the velocity field and the turbulence quantities ($k$ and $\\omega$), whose profiles exhibit stronger non-linearity closer to the wall.", "answer": "$$\\boxed{3.556 \\times 10^{-5}}$$", "id": "2506403"}, {"introduction": "Before a numerical simulation can be trusted, we must verify that the code correctly solves the intended equations and that the solution is free from significant discretization error. This practice introduces the Method of Manufactured Solutions (MMS), a powerful and standard procedure for code verification and for conducting a formal grid independence study. Through this guided coding exercise, you will measure your solver's convergence rates, learning how to systematically quantify numerical accuracy and ensure your results are reliable. [@problem_id:2506363]", "problem": "You will verify spatial and temporal convergence orders of a one-dimensional transient heat conduction solver by the Method of Manufactured Solutions (MMS). Consider the heat equation on a unit interval with homogeneous Neumann boundary conditions,\n$$\n\\frac{\\partial T}{\\partial t}(x,t) \\;=\\; \\alpha \\,\\frac{\\partial^2 T}{\\partial x^2}(x,t),\\quad x\\in[0,1],\\; t>0,\\quad \\frac{\\partial T}{\\partial x}(0,t)=0,\\;\\frac{\\partial T}{\\partial x}(1,t)=0,\n$$\nwith the manufactured exact solution\n$$\nT(x,t)\\;=\\;\\cos(\\pi x)\\,\\exp\\!\\big(-\\pi^2 \\alpha t\\big),\n$$\nand initial condition\n$$\nT(x,0)\\;=\\;\\cos(\\pi x).\n$$\nHere $\\alpha$ is the thermal diffusivity. In this problem, take $\\alpha=1$ (in $\\mathrm{m^2/s}$) and use $T_f=10^{-1}$ (in $\\mathrm{s}$) as the final time. Treat $T$ as nondimensional temperature so that error norms and estimated orders are dimensionless.\n\nDiscretize the spatial domain $[0,1]$ with a uniform mesh of $N$ points including the boundaries, so that the grid spacing is $h=1/(N-1)$. Approximate the second derivative with the second-order central difference formula on interior points. Enforce the homogeneous Neumann boundary conditions by mirrored ghost points (i.e., $T_{-1}=T_{1}$ at $x=0$ and $T_{N}=T_{N-2}$ at $x=1$), which induces a tridiagonal discrete Laplacian with modified off-diagonals at the boundaries. March in time with the Crankâ€“Nicolson (CN) method (Crankâ€“Nicolson (CN) is a second-order, unconditionally stable, implicit trapezoidal time integrator). Solve the resulting tridiagonal linear system at each time step.\n\nCompute the error against the exact solution at $t=T_f$ using the discrete $L^2$ norm\n$$\n\\|e\\|_{2,h}\\;=\\;\\Big(h\\sum_{i=0}^{N-1} \\big(T_i^{\\text{num}}-T(x_i,T_f)\\big)^2\\Big)^{1/2},\n$$\nwhere $x_i=i\\,h$.\n\nYou must estimate observed convergence orders by least-squares slope on logâ€“log data. Given resolution parameters $r_j$ (either $h$ or $\\Delta t$) and corresponding errors $E_j$, fit\n$$\n\\log E_j \\;\\approx\\; c + p\\,\\log r_j,\n$$\nand report the fitted slope $p$ as the observed order.\n\nImplement the following test suite (all runs use $\\alpha=1$ and $T_f=10^{-1}\\,\\mathrm{s}$):\n\n- Spatial-order study (hold time error negligible): use $\\Delta t = 10^{-3}\\,\\mathrm{s}$ and $N\\in\\{33,65,129,257\\}$. For each $N$, compute the error at $t=T_f$. Fit $\\log E$ versus $\\log h$ to obtain the observed spatial order $p_s$. Also check monotonicity of spatial refinement errors, i.e., verify $E(h_{j+1})<E(h_j)$ for successive refinements; report a boolean.\n- Temporal-order study (hold space error negligible): use $N=1025$ and $\\Delta t\\in\\{10^{-2},5\\cdot 10^{-3},2.5\\cdot 10^{-3},1.25\\cdot 10^{-3}\\}\\,\\mathrm{s}$. For each $\\Delta t$, compute the error at $t=T_f$. Fit $\\log E$ versus $\\log \\Delta t$ to obtain the observed temporal order $q_t$.\n- Boundary-condition check (homogeneous Neumann): with $N=65$ and $\\Delta t=10^{-3}\\,\\mathrm{s}$, compute the final numerical solution at $t=T_f$ and evaluate one-sided discrete gradients $\\big| (T_1-T_0)/h \\big|$ at $x=0$ and $\\big| (T_{N-1}-T_{N-2})/h \\big|$ at $x=1$. Verify both are less than $10^{-3}$; report a boolean.\n\nYour program must produce a single line of output containing the results as a comma-separated list enclosed in square brackets, in the following order:\n- $p_s$ rounded to three decimal places,\n- $q_t$ rounded to three decimal places,\n- a boolean indicating whether $|p_s-2|\\le 2\\times 10^{-1}$,\n- a boolean indicating whether $|q_t-2|\\le 2\\times 10^{-1}$,\n- a boolean indicating whether both boundary gradients are less than $10^{-3}$,\n- a boolean indicating whether the spatial errors decrease strictly with refinement.\n\nThus the exact output format is\n$$\n[\\text{p\\_s\\_rounded},\\text{q\\_t\\_rounded},\\text{bool\\_p},\\text{bool\\_q},\\text{bool\\_bc},\\text{bool\\_mono}],\n$$\nfor example, $[2.000,2.001,True,True,True,True]$. All floating-point quantities are dimensionless. Angles, if any, must be in radians; time must be in seconds. No percentages are to be printed; any ratios must be decimals or fractions.", "solution": "The problem requires the verification of a numerical solver for the one-dimensional transient heat equation using the Method of Manufactured Solutions (MMS). The governing equation, domain, and boundary conditions are specified as:\n$$\n\\frac{\\partial T}{\\partial t}(x,t) \\;=\\; \\alpha \\,\\frac{\\partial^2 T}{\\partial x^2}(x,t), \\quad x \\in [0, 1], \\quad t > 0\n$$\n$$\n\\frac{\\partial T}{\\partial x}(0,t)=0,\\quad \\frac{\\partial T}{\\partial x}(1,t)=0\n$$\nA manufactured solution is provided. It must be verified that this function satisfies the homogeneous partial differential equation (PDE), the boundary conditions, and provides the initial condition. The solution is:\n$$\nT_{\\text{exact}}(x,t) \\;=\\; \\cos(\\pi x)\\,\\exp(-\\pi^2 \\alpha t)\n$$\nChecking the PDE: $\\frac{\\partial T}{\\partial t} = -\\pi^2 \\alpha \\cos(\\pi x)\\exp(-\\pi^2 \\alpha t) = -\\pi^2 \\alpha T_{\\text{exact}}$ and $\\frac{\\partial^2 T}{\\partial x^2} = -\\pi^2 \\cos(\\pi x)\\exp(-\\pi^2 \\alpha t) = -\\pi^2 T_{\\text{exact}}$. Thus, $\\frac{\\partial T}{\\partial t} = \\alpha \\frac{\\partial^2 T}{\\partial x^2}$ is satisfied.\nChecking the boundary conditions: $\\frac{\\partial T}{\\partial x} = -\\pi \\sin(\\pi x) \\exp(-\\pi^2 \\alpha t)$. At $x=0$, $\\sin(0)=0$. At $x=1$, $\\sin(\\pi)=0$. Both boundary conditions are satisfied.\nThe initial condition is derived from this solution at $t=0$:\n$$\nT(x,0)\\;=\\;\\cos(\\pi x)\n$$\nThe constants are given as $\\alpha=1 \\, \\mathrm{m^2/s}$ and the final time is $T_f=0.1 \\, \\mathrm{s}$. The problem states to treat temperature $T$ as a nondimensional quantity.\n\nThe numerical scheme involves a finite difference method for spatial discretization and the Crank-Nicolson method for time integration.\n\n**1. Spatial Discretization**\n\nThe spatial domain $[0,1]$ is discretized using $N$ uniformly spaced points $x_i = i h$ for $i=0, 1, \\dots, N-1$, with grid spacing $h=1/(N-1)$. The second spatial derivative is approximated using a second-order central difference formula for interior points $i=1, \\dots, N-2$:\n$$\n\\frac{\\partial^2 T}{\\partial x^2}\\bigg|_{x_i} \\approx \\frac{T_{i-1} - 2T_i + T_{i+1}}{h^2}\n$$\nThe homogeneous Neumann boundary conditions are implemented using second-order accurate approximations involving mirrored ghost points. At $x=0$, a central difference $\\frac{T_1 - T_{-1}}{2h}=0$ implies the ghost point value is $T_{-1}=T_1$. Substituting this into the central difference formula at $i=0$ yields:\n$$\n\\frac{\\partial^2 T}{\\partial x^2}\\bigg|_{x_0} \\approx \\frac{T_1 - 2T_0 + T_{-1}}{h^2} = \\frac{2T_1 - 2T_0}{h^2}\n$$\nSimilarly, at $x=1$, the condition $\\frac{T_N - T_{N-2}}{2h}=0$ gives $T_N=T_{N-2}$. At $i=N-1$:\n$$\n\\frac{\\partial^2 T}{\\partial x^2}\\bigg|_{x_{N-1}} \\approx \\frac{T_N - 2T_{N-1} + T_{N-2}}{h^2} = \\frac{2T_{N-2} - 2T_{N-1}}{h^2}\n$$\nThis leads to a semi-discretized system of ordinary differential equations:\n$$\n\\frac{d\\vec{T}}{dt} = \\frac{\\alpha}{h^2} A \\vec{T}\n$$\nwhere $\\vec{T} = [T_0, T_1, \\dots, T_{N-1}]^T$ is the vector of temperatures at the grid points, and $A$ is the $N \\times N$ discrete Laplacian matrix:\n$$\nA = \\begin{pmatrix}\n-2 & 2 & 0 & \\dots & 0 \\\\\n1 & -2 & 1 & \\ddots & \\vdots \\\\\n0 & \\ddots & \\ddots & \\ddots & 0 \\\\\n\\vdots & \\ddots & 1 & -2 & 1 \\\\\n0 & \\dots & 0 & 2 & -2\n\\end{pmatrix}\n$$\n\n**2. Temporal Discretization**\n\nThe Crank-Nicolson method, an implicit trapezoidal rule, is applied to the semi-discretized system. For a time step $\\Delta t$, the scheme is:\n$$\n\\frac{\\vec{T}^{n+1} - \\vec{T}^n}{\\Delta t} = \\frac{1}{2} \\left( \\frac{\\alpha}{h^2} A \\vec{T}^{n+1} + \\frac{\\alpha}{h^2} A \\vec{T}^n \\right)\n$$\nwhere $\\vec{T}^n$ denotes the solution at time $t_n = n \\Delta t$. Rearranging the terms to solve for the unknown $\\vec{T}^{n+1}$:\n$$\n\\left(I - \\frac{\\alpha \\Delta t}{2h^2} A\\right) \\vec{T}^{n+1} = \\left(I + \\frac{\\alpha \\Delta t}{2h^2} A\\right) \\vec{T}^n\n$$\nLet the dimensionless parameter be $\\lambda = \\alpha \\Delta t / h^2$. The equation becomes:\n$$\n\\left(I - \\frac{\\lambda}{2} A\\right) \\vec{T}^{n+1} = \\left(I + \\frac{\\lambda}{2} A\\right) \\vec{T}^n\n$$\nAt each time step, this constitutes a tridiagonal linear system, which is solved efficiently using a banded matrix solver.\n\n**3. Implementation and Verification Tests**\n\nA solver is implemented based on the above formulation.\n1.  Initialize the temperature field $\\vec{T}^0$ using the initial condition $T(x,0) = \\cos(\\pi x)$.\n2.  Iterate for $N_t = \\text{round}(T_f/\\Delta t)$ time steps. In each step, we solve the linear system for $\\vec{T}^{n+1}$.\n3.  After the final time step, compute the discrete $L^2$ error norm against the exact solution at $t=T_f$:\n    $$\n    \\|e\\|_{2,h} = \\left(h \\sum_{i=0}^{N-1} (T_i^{\\text{num}} - T_{\\text{exact}}(x_i, T_f))^2\\right)^{1/2}\n    $$\nThe convergence orders are estimated by a linear least-squares fit on the logarithm of the error versus the logarithm of the resolution parameter ($h$ or $\\Delta t$). The slope of the fitted line, $p$, is the observed order.\n\nThe required tests are performed:\n\n- **Spatial Convergence Study**: The time step is fixed at $\\Delta t = 10^{-3} \\, \\mathrm{s}$, which ensures temporal discretization error is negligible. The number of grid points $N$ is varied through $\\{33, 65, 129, 257\\}$, corresponding to decreasing grid spacings $h$. The slope of $\\log(\\|e\\|_{2,h})$ versus $\\log(h)$ yields the spatial order $p_s$. The expectation for a second-order scheme is $p_s \\approx 2$. Error monotonicity is verified.\n\n- **Temporal Convergence Study**: The number of grid points is fixed at $N=1025$, ensuring spatial discretization error is negligible. The time step $\\Delta t$ is varied through $\\{10^{-2}, 5 \\cdot 10^{-3}, 2.5 \\cdot 10^{-3}, 1.25 \\cdot 10^{-3}\\} \\, \\mathrm{s}$. The slope of $\\log(\\|e\\|_{2,h})$ versus $\\log(\\Delta t)$ yields the temporal order $q_t$. The expectation for the second-order Crank-Nicolson method is $q_t \\approx 2$.\n\n- **Boundary Condition Check**: For a run with $N=65$ and $\\Delta t=10^{-3} \\, \\mathrm{s}$, the numerical gradients $|(T_1-T_0)/h|$ and $|(T_{N-1}-T_{N-2})/h|$ are computed at $t=T_f$ and checked against the tolerance of $10^{-3}$.\n\nFinally, the computed orders $p_s$ and $q_t$ are checked against the theoretical value of $2$ within a tolerance of $0.2$, and all results are formatted as requested.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.linalg import solve_banded\n\ndef solve():\n    \"\"\"\n    Solves the 1D transient heat equation to verify spatial and temporal\n    convergence orders using the Method of Manufactured Solutions.\n    \"\"\"\n    # Global parameters from the problem statement\n    alpha = 1.0\n    Tf = 0.1\n\n    def get_exact_solution(x, t, alpha_val):\n        \"\"\"Computes the manufactured exact solution.\"\"\"\n        return np.cos(np.pi * x) * np.exp(-np.pi**2 * alpha_val * t)\n\n    def run_solver(N, dt):\n        \"\"\"\n        Core PDE solver for given spatial (N) and temporal (dt) resolution.\n        \n        Args:\n            N (int): Number of grid points.\n            dt (float): Time step size.\n            \n        Returns:\n            numpy.ndarray: The numerical solution T(x, Tf) at the final time.\n        \"\"\"\n        h = 1.0 / (N - 1)\n        x = np.linspace(0.0, 1.0, N)\n        \n        # Dimensionless parameter for the CN scheme\n        lam = alpha * dt / h**2\n        \n        # --- Set up Crank-Nicolson matrices ---\n        # The LHS matrix M_lhs = (I - (lambda/2) * A) is prepared in the\n        # banded format required by scipy.linalg.solve_banded.\n        # For a tridiagonal matrix, the banded format is a 3xN array.\n        M_lhs_banded = np.zeros((3, N))\n        \n        # Main diagonal of M_lhs\n        M_lhs_banded[1, :] = 1.0 + lam\n        \n        # Super-diagonal of M_lhs\n        super_diag_lhs = np.full(N - 1, -lam / 2.0)\n        super_diag_lhs[0] = -lam  # Modified entry for the Neumann BC at x=0\n        M_lhs_banded[0, 1:] = super_diag_lhs\n        \n        # Sub-diagonal of M_lhs\n        sub_diag_lhs = np.full(N - 1, -lam / 2.0)\n        sub_diag_lhs[-1] = -lam # Modified entry for the Neumann BC at x=1\n        M_lhs_banded[2, :-1] = sub_diag_lhs\n        \n        # --- Initial condition ---\n        T = get_exact_solution(x, 0.0, alpha)\n\n        # --- Time-stepping loop ---\n        num_steps = int(round(Tf / dt))\n        for _ in range(num_steps):\n            # Build RHS vector: b = (I + (lambda/2) * A) * T\n            # This is done efficiently without forming the full matrix A.\n            v = np.zeros(N)\n            # Interior points\n            v[1:-1] = T[:-2] - 2 * T[1:-1] + T[2:]\n            # Boundary points (enforcing Neumann BCs)\n            v[0] = 2 * T[1] - 2 * T[0]\n            v[-1] = 2 * T[-2] - 2 * T[-1]\n\n            rhs_vec = T + (lam / 2.0) * v\n            \n            # Solve the tridiagonal system for the next time step\n            T = solve_banded((1, 1), M_lhs_banded, rhs_vec)\n            \n        return T\n\n    # --- 1. Spatial order study ---\n    dt_spatial = 1e-3\n    N_vals_spatial = np.array([33, 65, 129, 257])\n    h_vals_spatial = 1.0 / (N_vals_spatial - 1)\n    errors_spatial = []\n\n    for N_s in N_vals_spatial:\n        T_num = run_solver(N_s, dt_spatial)\n        h_s = 1.0 / (N_s - 1)\n        x_s = np.linspace(0.0, 1.0, N_s)\n        T_exact = get_exact_solution(x_s, Tf, alpha)\n        error = np.sqrt(h_s * np.sum((T_num - T_exact)**2))\n        errors_spatial.append(error)\n\n    # Fit for spatial order ps using least-squares on log-log data\n    log_h = np.log(h_vals_spatial)\n    log_E_s = np.log(errors_spatial)\n    ps, _ = np.polyfit(log_h, log_E_s, 1)\n\n    # Check for monotonic error decrease with spatial refinement\n    bool_mono = all(np.diff(errors_spatial) < 0)\n\n    # --- 2. Temporal order study ---\n    N_temporal = 1025\n    dt_vals_temporal = np.array([1e-2, 5e-3, 2.5e-3, 1.25e-3])\n    errors_temporal = []\n\n    h_t = 1.0 / (N_temporal - 1)\n    x_t = np.linspace(0.0, 1.0, N_temporal)\n    \n    for dt_t in dt_vals_temporal:\n        T_num = run_solver(N_temporal, dt_t)\n        T_exact = get_exact_solution(x_t, Tf, alpha)\n        error = np.sqrt(h_t * np.sum((T_num - T_exact)**2))\n        errors_temporal.append(error)\n        \n    # Fit for temporal order qt using least-squares on log-log data\n    log_dt = np.log(dt_vals_temporal)\n    log_E_t = np.log(errors_temporal)\n    qt, _ = np.polyfit(log_dt, log_E_t, 1)\n\n    # --- 3. Boundary condition check ---\n    N_bc = 65\n    dt_bc = 1e-3\n    T_final_bc = run_solver(N_bc, dt_bc)\n    h_bc = 1.0 / (N_bc - 1)\n    \n    grad_0 = np.abs((T_final_bc[1] - T_final_bc[0]) / h_bc)\n    grad_1 = np.abs((T_final_bc[-1] - T_final_bc[-2]) / h_bc)\n    \n    bool_bc = (grad_0 < 1e-3) and (grad_1 < 1e-3)\n\n    # --- 4. Final assembly of results ---\n    ps_rounded = round(ps, 3)\n    qt_rounded = round(qt, 3)\n    \n    bool_p = abs(ps - 2.0) <= 0.2\n    bool_q = abs(qt - 2.0) <= 0.2\n    \n    # Format and print the final output as a single line\n    print(f\"[{ps_rounded},{qt_rounded},{bool_p},{bool_q},{bool_bc},{bool_mono}]\")\n\n# Execute the main function to produce the result.\nsolve()\n```", "id": "2506363"}]}