{"hands_on_practices": [{"introduction": "Moving from theory to practice requires a critical eye for the tools we use. While we often describe a finite difference scheme by its order of accuracy, this single number can hide important details about its performance. This first exercise [@problem_id:2486059] delves deeper by analyzing the intrinsic quality of the most fundamental building block: the five-point stencil for the Laplacian. Using a technique known as modified wavenumber analysis, you will uncover the subtle, direction-dependent error (anisotropy) that a standard grid introduces, even when simulating a perfectly isotropic physical process.", "problem": "A two-dimensional, isotropic, steady heat conduction problem in an unbounded homogeneous medium is governed by the partial differential equation (PDE) $-\\kappa \\nabla^{2} T = 0$, where $\\kappa$ is a positive constant thermal conductivity and $T(x,y)$ is the temperature field. Consider discretizing the Laplacian operator $\\nabla^{2}$ on a uniform, axis-aligned Cartesian grid with spacing $h$ using the standard five-point finite difference stencil. To quantify the orientation dependence of the discretization error, analyze the response of the discrete operator to a plane-wave temperature field of the form\n$$\nT(x,y) = \\exp\\!\\big(i k (x \\cos\\theta + y \\sin\\theta)\\big),\n$$\nwhere $k>0$ is a fixed spatial wavenumber, $\\theta \\in [0,\\pi/2]$ is the angle between the wavevector and the $x$-axis, and $i$ is the imaginary unit.\n\nDefine the discrete symbol $\\lambda_{d}(k,h,\\theta)$ as the ratio of the five-point stencil applied to $T$ at a grid node to the value of $T$ at that node. The exact continuous symbol of $-\\nabla^{2}$ acting on $T$ is $k^{2}$. Using only fundamental Taylor expansions and without invoking any pre-tabulated modified-equation results, derive the leading-order (in $h$) orientation-dependent relative eigenvalue error\n$$\n\\varepsilon(\\theta) \\equiv \\frac{\\lambda_{d}(k,h,\\theta) + k^{2}}{k^{2}},\n$$\nas $h \\to 0$ with fixed $k$ and fixed $\\theta$.\n\nProvide your final answer as a single closed-form analytic expression for $\\varepsilon(\\theta)$, simplified and retaining terms up to and including order $(k h)^{2}$. No numerical evaluation is required. Express the final answer without units.", "solution": "The problem as stated is scientifically sound, well-posed, and free of contradictions. It represents a standard analysis of the discretization error for a finite difference scheme, commonly known as a modified wavenumber analysis or truncation error analysis. I will proceed with a rigorous derivation.\n\nThe objective is to determine the leading-order orientation-dependent relative error, $\\varepsilon(\\theta)$, of the five-point finite difference stencil for the Laplacian operator, $\\nabla^{2}$, when applied to a plane wave.\n\nThe partial differential equation given, $-\\kappa \\nabla^{2} T = 0$, provides context. However, the core of the problem lies in the analysis of the discrete approximation to the Laplacian operator, $\\nabla^{2} = \\frac{\\partial^{2}}{\\partial x^{2}} + \\frac{\\partial^{2}}{\\partial y^{2}}$.\n\nThe standard five-point finite difference stencil approximates the Laplacian of a function $T(x,y)$ at a grid node $(x,y)$ using its neighbors on a uniform Cartesian grid with spacing $h$. The discrete operator, which we denote as $\\nabla_{h}^{2}$, is defined as:\n$$\n(\\nabla_{h}^{2} T)(x,y) = \\frac{T(x+h, y) + T(x-h, y) + T(x, y+h) + T(x, y-h) - 4T(x,y)}{h^{2}}\n$$\n\nWe are given the plane-wave temperature field $T(x,y) = \\exp(i k (x \\cos\\theta + y \\sin\\theta))$. We analyze the action of the discrete operator $\\nabla_{h}^{2}$ on this function. Let us evaluate $T$ at the points required by the stencil:\n\\begin{align*} T(x+h, y) &= \\exp(i k ((x+h) \\cos\\theta + y \\sin\\theta)) = \\exp(i k (x \\cos\\theta + y \\sin\\theta)) \\exp(i k h \\cos\\theta) = T(x,y) \\exp(i k h \\cos\\theta) \\\\ T(x-h, y) &= T(x,y) \\exp(-i k h \\cos\\theta) \\\\ T(x, y+h) &= T(x,y) \\exp(i k h \\sin\\theta) \\\\ T(x, y-h) &= T(x,y) \\exp(-i k h \\sin\\theta) \\end{align*}\nSubstituting these into the definition of the discrete Laplacian gives:\n$$\n(\\nabla_{h}^{2} T)(x,y) = \\frac{T(x,y)}{h^{2}} \\left[ \\exp(i k h \\cos\\theta) + \\exp(-i k h \\cos\\theta) + \\exp(i k h \\sin\\theta) + \\exp(-i k h \\sin\\theta) - 4 \\right]\n$$\nThe problem defines the discrete symbol $\\lambda_{d}(k,h,\\theta)$ as the ratio $(\\nabla_{h}^{2} T)/T$. From the expression above, we find:\n$$\n\\lambda_{d}(k,h,\\theta) = \\frac{1}{h^{2}} \\left[ \\big(\\exp(i k h \\cos\\theta) + \\exp(-i k h \\cos\\theta)\\big) + \\big(\\exp(i k h \\sin\\theta) + \\exp(-i k h \\sin\\theta)\\big) - 4 \\right]\n$$\nUsing Euler's identity, $\\exp(iz) + \\exp(-iz) = 2 \\cos(z)$, we simplify the expression for the discrete symbol:\n$$\n\\lambda_{d}(k,h,\\theta) = \\frac{1}{h^{2}} \\left[ 2 \\cos(k h \\cos\\theta) + 2 \\cos(k h \\sin\\theta) - 4 \\right] = \\frac{2}{h^{2}} \\left[ \\cos(k h \\cos\\theta) + \\cos(k h \\sin\\theta) - 2 \\right]\n$$\nThis is the exact discrete symbol for the five-point Laplacian operator.\n\nThe exact continuous symbol corresponds to the eigenvalue of the continuous operator $\\nabla^{2}$ for the given plane wave. Applying $\\nabla^{2}$ to $T(x,y)$:\n$$\n\\nabla^{2}T = \\frac{\\partial^{2}T}{\\partial x^{2}} + \\frac{\\partial^{2}T}{\\partial y^{2}} = (i k \\cos\\theta)^{2} T + (i k \\sin\\theta)^{2} T = (-k^{2}\\cos^{2}\\theta - k^{2}\\sin^{2}\\theta)T = -k^{2}(\\cos^{2}\\theta + \\sin^{2}\\theta)T = -k^{2}T\n$$\nSo the exact eigenvalue is $-k^{2}$. The problem statement correctly notes that the symbol of $-\\nabla^{2}$ is $k^{2}$.\n\nTo find the leading-order error, we must perform a Taylor expansion of $\\lambda_{d}$ for small $h$, as we are considering the limit $h \\to 0$ with $k$ and $\\theta$ fixed. The Taylor series for the cosine function around $z=0$ is:\n$$\n\\cos(z) = 1 - \\frac{z^{2}}{2!} + \\frac{z^{4}}{4!} - O(z^{6})\n$$\nWe apply this expansion to the terms in $\\lambda_{d}$. The problem requires retaining terms up to order $(kh)^{2}$ in the final error expression, which means we must expand the cosine terms to at least the fourth power of their arguments to capture the leading error term in $\\lambda_d$.\nLet $u = k h \\cos\\theta$ and $v = k h \\sin\\theta$.\n$$\n\\cos(u) = 1 - \\frac{u^{2}}{2} + \\frac{u^{4}}{24} + O(u^{6}) = 1 - \\frac{k^{2}h^{2}\\cos^{2}\\theta}{2} + \\frac{k^{4}h^{4}\\cos^{4}\\theta}{24} + O((kh)^{6})\n$$\n$$\n\\cos(v) = 1 - \\frac{v^{2}}{2} + \\frac{v^{4}}{24} + O(v^{6}) = 1 - \\frac{k^{2}h^{2}\\sin^{2}\\theta}{2} + \\frac{k^{4}h^{4}\\sin^{4}\\theta}{24} + O((kh)^{6})\n$$\nSubstituting these expansions back into the expression for $\\lambda_{d}$:\n$$\n\\lambda_{d} = \\frac{2}{h^{2}} \\left[ \\left(1 - \\frac{k^{2}h^{2}\\cos^{2}\\theta}{2} + \\frac{k^{4}h^{4}\\cos^{4}\\theta}{24}\\right) + \\left(1 - \\frac{k^{2}h^{2}\\sin^{2}\\theta}{2} + \\frac{k^{4}h^{4}\\sin^{4}\\theta}{24}\\right) - 2 + O((kh)^{6}) \\right]\n$$\nCombine the terms:\n$$\n\\lambda_{d} = \\frac{2}{h^{2}} \\left[ (1+1-2) - \\frac{k^{2}h^{2}}{2}(\\cos^{2}\\theta + \\sin^{2}\\theta) + \\frac{k^{4}h^{4}}{24}(\\cos^{4}\\theta + \\sin^{4}\\theta) + O((kh)^{6}) \\right]\n$$\nUsing the identity $\\cos^{2}\\theta + \\sin^{2}\\theta = 1$:\n$$\n\\lambda_{d} = \\frac{2}{h^{2}} \\left[ -\\frac{k^{2}h^{2}}{2} + \\frac{k^{4}h^{4}}{24}(\\cos^{4}\\theta + \\sin^{4}\\theta) + O(k^{6}h^{6}) \\right]\n$$\n$$\n\\lambda_{d} = -k^{2} + \\frac{k^{4}h^{2}}{12}(\\cos^{4}\\theta + \\sin^{4}\\theta) + O(k^{6}h^{4})\n$$\nThis expression shows that the discrete eigenvalue $\\lambda_{d}$ matches the exact eigenvalue $-k^{2}$ at leading order, with the next term being the leading-order truncation error, which is of order $O(h^{2})$.\n\nNow, we compute the relative eigenvalue error as defined in the problem:\n$$\n\\varepsilon(\\theta) \\equiv \\frac{\\lambda_{d}(k,h,\\theta) + k^{2}}{k^{2}}\n$$\nSubstituting our expansion for $\\lambda_{d}$:\n$$\n\\varepsilon(\\theta) = \\frac{\\left(-k^{2} + \\frac{k^{4}h^{2}}{12}(\\cos^{4}\\theta + \\sin^{4}\\theta) + O(k^{6}h^{4})\\right) + k^{2}}{k^{2}}\n$$\n$$\n\\varepsilon(\\theta) = \\frac{\\frac{k^{4}h^{2}}{12}(\\cos^{4}\\theta + \\sin^{4}\\theta) + O(k^{6}h^{4})}{k^{2}} = \\frac{k^{2}h^{2}}{12}(\\cos^{4}\\theta + \\sin^{4}\\theta) + O(k^{4}h^{4})\n$$\nThe problem asks for the final answer simplified and retaining terms up to $(kh)^{2}$. Thus, the leading-order error is:\n$$\n\\varepsilon(\\theta) = \\frac{k^{2}h^{2}}{12}(\\cos^{4}\\theta + \\sin^{4}\\theta)\n$$\nTo simplify the orientation-dependent part, we use trigonometric identities:\n$$\n\\cos^{4}\\theta + \\sin^{4}\\theta = (\\cos^{2}\\theta + \\sin^{2}\\theta)^{2} - 2\\sin^{2}\\theta\\cos^{2}\\theta = 1 - 2(\\sin\\theta\\cos\\theta)^{2} = 1 - 2\\left(\\frac{\\sin(2\\theta)}{2}\\right)^{2} = 1 - \\frac{\\sin^{2}(2\\theta)}{2}\n$$\nUsing the identity $\\sin^{2}(A) = \\frac{1 - \\cos(2A)}{2}$, we have $\\sin^{2}(2\\theta) = \\frac{1 - \\cos(4\\theta)}{2}$.\n$$\n\\cos^{4}\\theta + \\sin^{4}\\theta = 1 - \\frac{1}{2}\\left(\\frac{1 - \\cos(4\\theta)}{2}\\right) = 1 - \\frac{1}{4} + \\frac{\\cos(4\\theta)}{4} = \\frac{3}{4} + \\frac{\\cos(4\\theta)}{4} = \\frac{1}{4}(3 + \\cos(4\\theta))\n$$\nSubstituting this simplified form into our expression for $\\varepsilon(\\theta)$:\n$$\n\\varepsilon(\\theta) = \\frac{k^{2}h^{2}}{12} \\left[ \\frac{1}{4}(3 + \\cos(4\\theta)) \\right] = \\frac{k^{2}h^{2}}{48}(3 + \\cos(4\\theta))\n$$\nThis is the final expression for the leading-order relative eigenvalue error, which is of order $(kh)^{2}$ as required.", "answer": "$$\\boxed{\\frac{k^{2}h^{2}}{48}(3 + \\cos(4\\theta))}$$", "id": "2486059"}, {"introduction": "Having seen that even a standard stencil can introduce subtle numerical artifacts, we now investigate a more dramatic failure mode. This practice [@problem_id:2485931] explores what happens when we apply a standard central-differencing approach to a physically anisotropic problem, specifically one with a rotated thermal conductivity tensor. You will discover that this seemingly straightforward method can generate non-physical oscillations in the solution, and more importantly, you will uncover the rigorous mathematical reason for this failure by connecting the stencil's coefficients to the properties of the underlying system matrix and the violation of the discrete maximum principle.", "problem": "A two-dimensional, steady heat conduction problem is posed on the unit square with homogeneous Dirichlet boundary conditions. The temperature field $u(x,y)$ satisfies the conservation of energy and Fourier’s law with a constant, symmetric positive definite conductivity tensor $\\boldsymbol{K}$ whose principal conductivities are $k_1$ and $k_2$ and whose principal axes are rotated by an angle $\\phi$ relative to the Cartesian grid axes. The governing equation is $-\\nabla \\cdot (\\boldsymbol{K}\\nabla u)=f$ in the unit square with $u=0$ on the boundary. Assume a uniform source term $f(x,y)\\equiv 1$. \n\n1) Starting from the conservation of energy and Fourier’s law, derive the rotated-tensor form of the operator in Cartesian coordinates, namely\n$$\n-\\left(k_{xx}\\,u_{xx} + 2\\,k_{xy}\\,u_{xy} + k_{yy}\\,u_{yy}\\right)=f,\n$$\nand express $k_{xx}$, $k_{yy}$, and $k_{xy}$ in terms of $k_1$, $k_2$, and $\\phi$.\n\n2) On a uniform square grid with spacing $h$ in both directions, discretize the operator using second-order central differences for $u_{xx}$ and $u_{yy}$ and the standard central cross-difference for $u_{xy}$. Write down the resulting nine-point stencil and identify the signs of the edge and corner coefficients. \n\n3) Using the sign pattern you obtained, give a rigorous explanation (in terms of the discrete maximum principle and the matrix inverse-positivity characterization of an $M$-matrix) for why this nine-point central-difference discretization is non-monotone whenever $k_{xy}\\neq 0$, and hence can exhibit spurious spatial oscillations that persist under grid refinement (even though their amplitude may decrease with $h$).\n\n4) Construct a concrete counterexample by specifying numerical values $k_1=10$, $k_2=1$, and $\\phi=\\pi/4$, with $f(x,y)\\equiv 1$ and homogeneous Dirichlet boundary conditions. For this setting, determine explicitly the positive corner coefficient of the discrete stiffness matrix row (i.e., the magnitude of a corner off-diagonal entry that is positive) as a function of $h$. Provide your final answer as a closed-form analytic expression in terms of $h$ only. No units are required. Do not round your answer.", "solution": "The supplied problem is a multi-part theoretical and computational exercise in the numerical analysis of partial differential equations, specifically concerning the finite difference method for an anisotropic elliptic problem. The problem is scientifically grounded, well-posed, objective, and internally consistent. It addresses a known, fundamental issue in the discretization of PDEs with mixed-derivative terms. Therefore, it is valid and a full solution will be provided.\n\n1) Derivation of the operator and tensor components\n\nThe governing equation is the conservation of energy, which in steady state with a source term $f$ is given by $-\\nabla \\cdot \\mathbf{q} = f$, where $\\mathbf{q}$ is the heat flux vector. Fourier's law for an anisotropic medium states that $\\mathbf{q} = -\\boldsymbol{K} \\nabla u$, where $u$ is the temperature and $\\boldsymbol{K}$ is the conductivity tensor. Combining these gives the governing partial differential equation:\n$$\n-\\nabla \\cdot (-\\boldsymbol{K} \\nabla u) = \\nabla \\cdot (\\boldsymbol{K} \\nabla u) = f\n$$\nThe problem statement includes a negative sign, so we proceed with $-\\nabla \\cdot (\\boldsymbol{K}\\nabla u)=f$.\n\nIn Cartesian coordinates $(x,y)$, the gradient of the scalar field $u(x,y)$ is the vector $\\nabla u = \\begin{pmatrix} \\frac{\\partial u}{\\partial x} \\\\ \\frac{\\partial u}{\\partial y} \\end{pmatrix}$. Let $u_x = \\frac{\\partial u}{\\partial x}$ and $u_y = \\frac{\\partial u}{\\partial y}$. The conductivity tensor $\\boldsymbol{K}$ is given as a constant, symmetric matrix:\n$$\n\\boldsymbol{K} = \\begin{pmatrix} k_{xx} & k_{xy} \\\\ k_{xy} & k_{yy} \\end{pmatrix}\n$$\nThe vector field $\\boldsymbol{K}\\nabla u$ is then:\n$$\n\\boldsymbol{K}\\nabla u = \\begin{pmatrix} k_{xx} & k_{xy} \\\\ k_{xy} & k_{yy} \\end{pmatrix} \\begin{pmatrix} u_x \\\\ u_y \\end{pmatrix} = \\begin{pmatrix} k_{xx}u_x + k_{xy}u_y \\\\ k_{xy}u_x + k_{yy}u_y \\end{pmatrix}\n$$\nThe divergence of this vector field is:\n$$\n\\nabla \\cdot (\\boldsymbol{K}\\nabla u) = \\frac{\\partial}{\\partial x}(k_{xx}u_x + k_{xy}u_y) + \\frac{\\partial}{\\partial y}(k_{xy}u_x + k_{yy}u_y)\n$$\nSince the tensor components $k_{xx}$, $k_{xy}$, and $k_{yy}$ are constant, we can apply the product rule for differentiation:\n$$\n\\nabla \\cdot (\\boldsymbol{K}\\nabla u) = k_{xx} \\frac{\\partial^2 u}{\\partial x^2} + k_{xy} \\frac{\\partial^2 u}{\\partial x \\partial y} + k_{xy} \\frac{\\partial^2 u}{\\partial y \\partial x} + k_{yy} \\frac{\\partial^2 u}{\\partial y^2}\n$$\nAssuming sufficient smoothness of the solution $u$ (e.g., $u \\in C^2$), Clairaut's theorem on the equality of mixed partials states that $u_{xy} = \\frac{\\partial^2 u}{\\partial x \\partial y} = \\frac{\\partial^2 u}{\\partial y \\partial x} = u_{yx}$. The expression simplifies to:\n$$\n\\nabla \\cdot (\\boldsymbol{K}\\nabla u) = k_{xx}u_{xx} + 2k_{xy}u_{xy} + k_{yy}u_{yy}\n$$\nThus, the governing equation $-\\nabla \\cdot (\\boldsymbol{K}\\nabla u)=f$ takes the form:\n$$\n-\\left(k_{xx}u_{xx} + 2k_{xy}u_{xy} + k_{yy}u_{yy}\\right) = f\n$$\nThis completes the first part of the derivation.\n\nNext, we express the components of $\\boldsymbol{K}$ in terms of its principal conductivities $k_1$, $k_2$ and the rotation angle $\\phi$. In the principal coordinate system, the tensor is diagonal: $\\boldsymbol{K}' = \\begin{pmatrix} k_1 & 0 \\\\ 0 & k_2 \\end{pmatrix}$. The transformation from the principal axes to the Cartesian axes is achieved by a rotation matrix $\\boldsymbol{R}(\\phi) = \\begin{pmatrix} \\cos\\phi & -\\sin\\phi \\\\ \\sin\\phi & \\cos\\phi \\end{pmatrix}$. The tensor transformation law is $\\boldsymbol{K} = \\boldsymbol{R} \\boldsymbol{K}' \\boldsymbol{R}^T$.\n$$\n\\boldsymbol{K} = \\begin{pmatrix} \\cos\\phi & -\\sin\\phi \\\\ \\sin\\phi & \\cos\\phi \\end{pmatrix} \\begin{pmatrix} k_1 & 0 \\\\ 0 & k_2 \\end{pmatrix} \\begin{pmatrix} \\cos\\phi & \\sin\\phi \\\\ -\\sin\\phi & \\cos\\phi \\end{pmatrix}\n$$\n$$\n\\boldsymbol{K} = \\begin{pmatrix} \\cos\\phi & -\\sin\\phi \\\\ \\sin\\phi & \\cos\\phi \\end{pmatrix} \\begin{pmatrix} k_1\\cos\\phi & k_1\\sin\\phi \\\\ -k_2\\sin\\phi & k_2\\cos\\phi \\end{pmatrix}\n$$\n$$\n\\boldsymbol{K} = \\begin{pmatrix} k_1\\cos^2\\phi + k_2\\sin^2\\phi & k_1\\cos\\phi\\sin\\phi - k_2\\sin\\phi\\cos\\phi \\\\ k_1\\sin\\phi\\cos\\phi - k_2\\sin\\phi\\cos\\phi & k_1\\sin^2\\phi + k_2\\cos^2\\phi \\end{pmatrix}\n$$\nBy comparing this matrix with the general form of $\\boldsymbol{K}$, we identify the components:\n$$\nk_{xx} = k_1\\cos^2\\phi + k_2\\sin^2\\phi\n$$\n$$\nk_{yy} = k_1\\sin^2\\phi + k_2\\cos^2\\phi\n$$\n$$\nk_{xy} = (k_1 - k_2)\\sin\\phi\\cos\\phi = \\frac{1}{2}(k_1 - k_2)\\sin(2\\phi)\n$$\n\n2) Finite difference discretization and stencil\n\nWe discretize the operator $L(u) = -k_{xx}u_{xx} - 2k_{xy}u_{xy} - k_{yy}u_{yy}$ on a uniform square grid with spacing $h$. Let $u_{i,j}$ denote the approximate solution at the grid point $(x_i, y_j) = (ih, jh)$. We use standard second-order central difference approximations:\n$$\nu_{xx}\\bigg|_{i,j} \\approx \\frac{u_{i+1,j} - 2u_{i,j} + u_{i-1,j}}{h^2}\n$$\n$$\nu_{yy}\\bigg|_{i,j} \\approx \\frac{u_{i,j+1} - 2u_{i,j} + u_{i,j-1}}{h^2}\n$$\n$$\nu_{xy}\\bigg|_{i,j} \\approx \\frac{u_{i+1,j+1} - u_{i-1,j+1} - u_{i+1,j-1} + u_{i-1,j-1}}{4h^2}\n$$\nSubstituting these into the discrete equation $L_h(u_{i,j}) = f_{i,j}$ gives:\n$$\n-k_{xx}\\frac{u_{i+1,j} - 2u_{i,j} + u_{i-1,j}}{h^2} - k_{yy}\\frac{u_{i,j+1} - 2u_{i,j} + u_{i,j-1}}{h^2} - 2k_{xy}\\frac{u_{i+1,j+1} - u_{i-1,j+1} - u_{i+1,j-1} + u_{i-1,j-1}}{4h^2} = f_{i,j}\n$$\nTo form the discrete stiffness matrix $A$, we write this as a linear system $A\\mathbf{u} = \\mathbf{f}$. The entries of the matrix row corresponding to the grid point $(i,j)$ are the coefficients of the $u$ terms. Multiplying by $h^2$ for clarity is not correct for the matrix itself, so we maintain the $1/h^2$ factor. The matrix row coefficients are:\n\\begin{itemize}\n    \\item Center ($u_{i,j}$): $\\frac{2(k_{xx}+k_{yy})}{h^2}$ (diagonal entry)\n    \\item East/West ($u_{i\\pm1,j}$): $-\\frac{k_{xx}}{h^2}$ (off-diagonal)\n    \\item North/South ($u_{i,j\\pm1}$): $-\\frac{k_{yy}}{h^2}$ (off-diagonal)\n    \\item Northeast/Southwest ($u_{i+1,j+1}, u_{i-1,j-1}$): $-\\frac{k_{xy}}{2h^2}$ (off-diagonal)\n    \\item Northwest/Southeast ($u_{i-1,j+1}, u_{i+1,j-1}$): $+\\frac{k_{xy}}{2h^2}$ (off-diagonal)\n\\end{itemize}\nThe corresponding nine-point stencil for the operator $L_h$ is represented by the coefficients of the involved $u$ variables:\n$$\n\\frac{1}{h^2} \\begin{pmatrix}\nk_{xy}/2 & -k_{yy} & -k_{xy}/2 \\\\\n-k_{xx} & 2(k_{xx}+k_{yy}) & -k_{xx} \\\\\n-k_{xy}/2 & -k_{yy} & k_{xy}/2\n\\end{pmatrix}\n$$\nFor the signs of the coefficients in the stiffness matrix row (which corresponds to setting the above expression equal to $f_{i,j}$ and moving all terms except the central one to the right-hand side, thus flipping their signs):\n\\begin{itemize}\n    \\item The diagonal coefficient $\\frac{2(k_{xx}+k_{yy})}{h^2}$ is positive, since $\\boldsymbol{K}$ is positive definite, implying $k_{xx}>0$ and $k_{yy}>0$.\n    \\item The edge coefficients for immediate neighbors, $-\\frac{k_{xx}}{h^2}$ and $-\\frac{k_{yy}}{h^2}$, are negative.\n    \\item The corner coefficients, $-\\frac{k_{xy}}{2h^2}$ and $+\\frac{k_{xy}}{2h^2}$, have signs that depend on the sign of $k_{xy}$. If $k_{xy} \\neq 0$, some corner coefficients are positive and others are negative.\n\\end{itemize}\n\n3) Explanation of non-monotonicity\n\nA finite difference scheme is called monotone if the resulting matrix $A$ is inverse-positive, i.e., all entries of its inverse $A^{-1}$ are non-negative. For an irreducible matrix $A$, a sufficient and often necessary condition for inverse-positivity is that $A$ is an $M$-matrix.\n\nA matrix $A$ is an $M$-matrix if it is a $Z$-matrix and its inverse is non-negative. A Z-matrix is a matrix whose off-diagonal entries are all non-positive ($A_{ij} \\le 0$ for $i \\neq j$).\n\nFrom the analysis in part (2), the off-diagonal entries of our stiffness matrix $A$ are:\n$$\nA_{(i,j),(i \\pm 1, j)} = -\\frac{k_{xx}}{h^2} \\le 0\n$$\n$$\nA_{(i,j),(i, j \\pm 1)} = -\\frac{k_{yy}}{h^2} \\le 0\n$$\n$$\nA_{(i,j),(i+1,j+1)} = A_{(i,j),(i-1,j-1)} = -\\frac{k_{xy}}{2h^2}\n$$\n$$\nA_{(i,j),(i-1,j+1)} = A_{(i,j),(i+1,j-1)} = +\\frac{k_{xy}}{2h^2}\n$$\nIf $k_{xy} \\neq 0$, then one half of the corner coefficients are positive and the other half are negative. For instance, if $k_{xy} > 0$, then $A_{(i,j),(i-1,j+1)}$ and $A_{(i,j),(i+1,j-1)}$ are strictly positive. This violates the condition for $A$ to be a $Z$-matrix. Consequently, $A$ cannot be an $M$-matrix. Since $A$ is not an $M$-matrix, the scheme is not monotone.\n\nThe lack of monotonicity is directly related to the violation of the discrete maximum principle (DMP). The weak DMP states that for an operator $L_h$, if $L_h u \\le 0$ everywhere in the interior of the domain, then the maximum value of $u$ must occur on the boundary. This principle holds if the scheme can be written in the form $u_{i,j} = \\sum_{(k,l)\\neq(i,j)} \\omega_{kl} u_{kl} + \\gamma$ where all weights $\\omega_{kl}$ are non-negative. From our scheme, we can express $u_{i,j}$ as:\n$$\nu_{i,j} = \\sum_{(k,l)\\neq(i,j)} \\left(-\\frac{A_{(i,j),(k,l)}}{A_{(i,j),(i,j)}}\\right) u_{k,l} + \\frac{h^2}{2(k_{xx}+k_{yy})} f_{i,j}\n$$\nThe weights are $\\omega_{(k,l)} = -A_{(i,j),(k,l)}/A_{(i,j),(i,j)}$. Since the diagonal entry $A_{(i,j),(i,j)}$ is positive, the non-negativity of weights requires $A_{(i,j),(k,l)} \\le 0$ for all off-diagonal entries. This is precisely the Z-matrix condition. Because this condition is violated when $k_{xy} \\neq 0$, some weights are negative. A negative weight allows a neighboring value to be \"subtracted,\" which can create a local maximum or minimum in the interior even if not warranted by the source term or boundary conditions. This manifests as spurious, grid-scale oscillations in the numerical solution, which do not represent the physics of the problem. While the scheme remains formally second-order accurate (i.e., the error magnitude decreases as $h^2$ in a suitable norm), these unphysical oscillations persist under grid refinement.\n\n4) Concrete counterexample\n\nWe are given $k_1=10$, $k_2=1$, and $\\phi=\\pi/4$. First, we compute the tensor components.\n$$\n\\cos(\\pi/4) = \\frac{1}{\\sqrt{2}}, \\quad \\sin(\\pi/4) = \\frac{1}{\\sqrt{2}}\n$$\n$$\nk_{xx} = k_1\\cos^2\\phi + k_2\\sin^2\\phi = 10\\left(\\frac{1}{2}\\right) + 1\\left(\\frac{1}{2}\\right) = 5.5 = \\frac{11}{2}\n$$\n$$\nk_{yy} = k_1\\sin^2\\phi + k_2\\cos^2\\phi = 10\\left(\\frac{1}{2}\\right) + 1\\left(\\frac{1}{2}\\right) = 5.5 = \\frac{11}{2}\n$$\n$$\nk_{xy} = (k_1-k_2)\\sin\\phi\\cos\\phi = (10 - 1)\\left(\\frac{1}{\\sqrt{2}}\\right)\\left(\\frac{1}{\\sqrt{2}}\\right) = 9\\left(\\frac{1}{2}\\right) = 4.5 = \\frac{9}{2}\n$$\nSince $k_{xy} = 9/2 > 0$, the positive corner coefficients in the discrete stiffness matrix row are $A_{(i,j),(i-1,j+1)}$ and $A_{(i,j),(i+1,j-1)}$. Their value is given by the formula from part (2):\n$$\n+\\frac{k_{xy}}{2h^2}\n$$\nSubstituting the value $k_{xy} = 9/2$, the positive corner coefficient is:\n$$\n\\frac{9/2}{2h^2} = \\frac{9}{4h^2}\n$$\nThis is a positive off-diagonal entry in the stiffness matrix, explicitly demonstrating the violation of the Z-matrix property for this configuration.", "answer": "$$\n\\boxed{\\frac{9}{4h^2}}\n$$", "id": "2485931"}, {"introduction": "A robust theoretical understanding of discretization must be paired with the practical ability to verify that our code is working correctly. This final hands-on practice [@problem_id:2486032] transitions from spatial discretization theory to the essential task of code verification for a transient simulation. You will implement the popular Crank-Nicolson method and, through a carefully designed numerical experiment, confirm its second-order temporal accuracy. This exercise will teach you the gold standard for separating spatial and temporal errors, a critical skill for producing reliable and trustworthy computational results.", "problem": "You are tasked with designing, implementing, and using a numerical experiment to separate spatial and temporal discretization errors in a one-dimensional transient heat conduction simulation and to verify the second-order temporal accuracy of the Crank–Nicolson (CN) method.\n\nStarting point and governing principle: begin from the local conservation of energy for a one-dimensional homogeneous rod with constant thermal diffusivity $\\alpha$ and no internal heat generation, which leads to the heat equation\n$$\n\\frac{\\partial u}{\\partial t} = \\alpha \\frac{\\partial^2 u}{\\partial x^2},\n$$\nfor $x \\in (0,L)$ and $t \\ge 0$, where $u(x,t)$ is the temperature. Impose Dirichlet boundary conditions $u(0,t)=0$ and $u(L,t)=0$, and the initial condition $u(x,0)=\\sin\\!\\left(\\pi x/L\\right)$.\n\nDiscretization requirements (to be derived and implemented by you from the governing equation using the stated principles, not by quoting pre-packaged formulas): use a uniform spatial grid on $[0,L]$ with $N$ equal segments (so $N+1$ nodes, including boundaries) and a standard second-order central difference for the spatial second derivative. For time, use the Crank–Nicolson (CN) method to advance the solution. Assemble and solve the resulting tridiagonal linear system at each time step exactly (within floating-point arithmetic) using an algorithm appropriate for tridiagonal systems.\n\nError separation strategy: separate temporal from spatial error in two complementary ways.\n- Strategy A (analytic-in-time and space): exploit the exact solution\n$$\nu_{\\text{exact}}(x,t) = \\sin\\!\\left(\\pi x/L\\right)\\, \\exp\\!\\left(-\\alpha \\left(\\pi/L\\right)^2 t\\right),\n$$\nand ensure that spatial error is negligible by using a very fine spatial grid. With spatial error negligible, the observed error as $\\Delta t \\to 0$ reveals the temporal order.\n- Strategy B (same-grid temporal reference): at fixed spatial grid (so fixed $N$), estimate the temporal error by comparing a solution computed with time step $\\Delta t$ to a reference solution on the same spatial grid computed with a much smaller time step $\\Delta t_{\\text{ref}} = \\Delta t / 2^r$ for a given refinement factor $r$. Because both solutions share the same spatial discretization, subtracting them cancels the dominant spatial error, isolating temporal error.\n\nError measurement and observed order: for a sequence of time steps $\\{\\Delta t_j\\}$ with $\\Delta t_{j+1} = \\Delta t_j/2$, compute the discrete $L^2$-norm of the error at a fixed final time $T$ over the $N-1$ interior nodes $\\{x_i\\}_{i=1}^{N-1}$,\n$$\n\\|e(\\Delta t_j)\\|_{L^2_h} = \\left( h \\sum_{i=1}^{N-1} \\left( u_i^{\\text{num}}(T;\\Delta t_j) - u_i^{\\text{ref}}(T) \\right)^2 \\right)^{1/2},\n$$\nwhere $h = L/N$ and $u_i^{\\text{ref}}(T)$ is either $u_{\\text{exact}}(x_i,T)$ for Strategy A or the same-grid reference solution for Strategy B. Estimate the observed temporal order between consecutive pairs by\n$$\n\\hat{p}_j = \\frac{\\log\\!\\left(\\|e(\\Delta t_j)\\|_{L^2_h} / \\|e(\\Delta t_{j+1})\\|_{L^2_h}\\right)}{\\log\\!\\left(\\Delta t_j / \\Delta t_{j+1}\\right)}.\n$$\nReport a single order estimate $\\hat{p}$ per test case as the minimum of the pairwise $\\hat{p}_j$ to guard against non-asymptotic effects.\n\nScientific realism and units: use $L$ in $\\mathrm{m}$, $\\alpha$ in $\\mathrm{m^2/s}$, $t$ in $\\mathrm{s}$, and $u$ in $\\mathrm{K}$. All computed observed orders $\\hat{p}$ are dimensionless. When constructing time-step sequences for a given $T$, use steps that partition $T$ exactly; if necessary, internally adjust each $\\Delta t$ to $T/M$ with integer $M$.\n\nYour program must implement the above and run the following test suite, producing one scalar $\\hat{p}$ per case. Use the specified units. All cases share the same boundary conditions $u(0,t)=0\\,\\mathrm{K}$ and $u(L,t)=0\\,\\mathrm{K}$ and initial condition $u(x,0)=\\sin(\\pi x/L)\\,\\mathrm{K}$.\n\nTest Suite:\n- Case A (happy path: analytic reference with negligible spatial error): $L=1\\,\\mathrm{m}$, $\\alpha=0.1\\,\\mathrm{m^2/s}$, $T=0.1\\,\\mathrm{s}$, $N=4096$. Use Strategy A with the exact solution as reference. Use the time-step sequence $\\Delta t \\in \\{T/10,\\, T/20,\\, T/40,\\, T/80\\}$.\n- Case B (same-grid temporal reference to cancel spatial error): $L=1\\,\\mathrm{m}$, $\\alpha=0.1\\,\\mathrm{m^2/s}$, $T=0.1\\,\\mathrm{s}$, $N=64$. Use Strategy B with refinement factor $r=6$ so that $\\Delta t_{\\text{ref}} = \\Delta t / 2^6$. Use the same time-step sequence $\\Delta t \\in \\{T/10,\\, T/20,\\, T/40,\\, T/80\\}$.\n- Case C (edge case demonstrating contamination when spatial error is not negligible if using analytic reference): $L=1\\,\\mathrm{m}$, $\\alpha=0.1\\,\\mathrm{m^2/s}$, $T=0.1\\,\\mathrm{s}$, $N=16$. Use Strategy A with the exact solution as reference. Use the same time-step sequence $\\Delta t \\in \\{T/10,\\, T/20,\\, T/40,\\, T/80\\}$.\n\nNumerical outputs:\n- For each test case, compute the scalar $\\hat{p}$ as described. Round each $\\hat{p}$ to three decimal places.\n\nFinal output format:\n- Your program should produce a single line of output containing the three results as a comma-separated list enclosed in square brackets, in the order [Case A, Case B, Case C], for example, \"[$p_A,p_B,p_C$]\". The printed line must contain plain decimal numerals without LaTeX markup. The observed orders are dimensionless and should be printed as floating-point numbers rounded to three decimal places.", "solution": "The problem posed is a well-defined exercise in the verification of a numerical method for a partial differential equation. It requires the implementation of the Crank-Nicolson scheme for the one-dimensional transient heat equation and a subsequent numerical experiment to confirm its second-order temporal accuracy. The problem statement is scientifically sound, internally consistent, and complete. All parameters and methodologies are specified with sufficient precision to permit a unique and verifiable solution. Thus, we proceed with the derivation and implementation.\n\nThe governing equation is the one-dimensional heat equation for a homogeneous medium with constant thermal diffusivity $\\alpha$ and no internal heat generation:\n$$\n\\frac{\\partial u}{\\partial t} = \\alpha \\frac{\\partial^2 u}{\\partial x^2}\n$$\nThe domain is specified as $x \\in [0, L]$ and $t \\ge 0$. The analysis is performed on the interior of the spatial domain, $x \\in (0, L)$. The system is subject to homogeneous Dirichlet boundary conditions, $u(0, t) = 0$ and $u(L, t) = 0$, and a sinusoidal initial condition, $u(x, 0) = \\sin(\\pi x/L)$.\n\nOur first task is to construct the finite difference approximation. We define a uniform spatial grid with $N+1$ nodes, $x_i = i h$ for $i = 0, 1, \\dots, N$, where the grid spacing is $h = L/N$. Time is discretized into steps of size $\\Delta t$, such that $t_n = n \\Delta t$. The temperature at a discrete point $(x_i, t_n)$ is denoted by $u_i^n \\approx u(x_i, t_n)$.\n\nThe second spatial derivative is approximated using a second-order central difference stencil:\n$$\n\\frac{\\partial^2 u}{\\partial x^2} \\bigg|_{x_i} \\approx \\frac{u_{i-1} - 2u_i + u_{i+1}}{h^2} + O(h^2)\n$$\nThe Crank-Nicolson method is an implicit scheme that achieves second-order accuracy in time. It is formulated by centering the finite difference approximation at the half time step $t_{n+1/2} = t_n + \\Delta t/2$. The time derivative is approximated by a central difference about this point:\n$$\n\\frac{\\partial u}{\\partial t} \\bigg|_{t_{n+1/2}} \\approx \\frac{u_i^{n+1} - u_i^n}{\\Delta t} + O(\\Delta t^2)\n$$\nThe spatial derivative term is evaluated as the average of its values at time levels $n$ and $n+1$:\n$$\n\\frac{\\partial^2 u}{\\partial x^2} \\bigg|_{t_{n+1/2}} \\approx \\frac{1}{2} \\left( \\frac{u_{i-1}^n - 2u_i^n + u_{i+1}^n}{h^2} + \\frac{u_{i-1}^{n+1} - 2u_i^{n+1} + u_{i+1}^{n+1}}{h^2} \\right)\n$$\nSubstituting these approximations into the governing PDE yields the discrete equation for each interior node $i = 1, \\dots, N-1$:\n$$\n\\frac{u_i^{n+1} - u_i^n}{\\Delta t} = \\frac{\\alpha}{2h^2} \\left[ (u_{i-1}^n - 2u_i^n + u_{i+1}^n) + (u_{i-1}^{n+1} - 2u_i^{n+1} + u_{i+1}^{n+1}) \\right]\n$$\nTo solve for the unknown temperatures at time level $n+1$, we rearrange the equation, placing terms at $t_{n+1}$ on the left-hand side and known terms at $t_n$ on the right-hand side. Let $\\lambda = \\alpha \\Delta t / h^2$ be the dimensionless mesh Fourier number. The equation becomes:\n$$\n-\\frac{\\lambda}{2} u_{i-1}^{n+1} + (1 + \\lambda) u_i^{n+1} - \\frac{\\lambda}{2} u_{i+1}^{n+1} = \\frac{\\lambda}{2} u_{i-1}^n + (1 - \\lambda) u_i^n + \\frac{\\lambda}{2} u_{i+1}^n\n$$\nThis represents a system of $N-1$ linear equations for the unknown interior nodal temperatures $\\{u_i^{n+1}\\}_{i=1}^{N-1}$. The boundary conditions $u_0^{n+1} = 0$ and $u_N^{n+1} = 0$ are incorporated into the equations for the first ($i=1$) and last ($i=N-1$) interior nodes. The system can be written in matrix form as:\n$$\nA \\mathbf{u}^{n+1} = B \\mathbf{u}^{n}\n$$\nwhere $\\mathbf{u}^n$ is the vector of interior temperatures $[u_1^n, u_2^n, \\dots, u_{N-1}^n]^T$. The matrices $A$ and $B$ are $(N-1) \\times (N-1)$ tridiagonal matrices with constant coefficients:\n$$\nA = \n\\begin{pmatrix}\n1+\\lambda & -\\frac{\\lambda}{2} & & \\\\\n-\\frac{\\lambda}{2} & 1+\\lambda & -\\frac{\\lambda}{2} & \\\\\n& \\ddots & \\ddots & \\ddots & \\\\\n& & -\\frac{\\lambda}{2} & 1+\\lambda & -\\frac{\\lambda}{2} \\\\\n& & & -\\frac{\\lambda}{2} & 1+\\lambda\n\\end{pmatrix}\n, \\quad\nB = \n\\begin{pmatrix}\n1-\\lambda & \\frac{\\lambda}{2} & & \\\\\n\\frac{\\lambda}{2} & 1-\\lambda & \\frac{\\lambda}{2} & \\\\\n& \\ddots & \\ddots & \\ddots & \\\\\n& & \\frac{\\lambda}{2} & 1-\\lambda & \\frac{\\lambda}{2} \\\\\n& & & \\frac{\\lambda}{2} & 1-\\lambda\n\\end{pmatrix}\n$$\nThe right-hand side vector, $\\mathbf{d}^n = B \\mathbf{u}^n$, is computed, and then the system $A \\mathbf{u}^{n+1} = \\mathbf{d}^n$ is solved for $\\mathbf{u}^{n+1}$. Since $A$ is tridiagonal, symmetric, and positive-definite, it is efficiently solved using the Thomas algorithm (a specialized Gaussian elimination), which has a computational cost of $O(N)$.\n\nTo verify the second-order temporal accuracy, we must measure the error and compute its convergence rate. The error is measured at a final time $T$ using a discrete $L^2$-norm:\n$$\n\\|e(\\Delta t_j)\\|_{L^2_h} = \\left( h \\sum_{i=1}^{N-1} \\left( u_i^{\\text{num}}(T;\\Delta t_j) - u_i^{\\text{ref}}(T) \\right)^2 \\right)^{1/2}\n$$\nHere, $u_i^{\\text{num}}$ is the numerical solution and $u_i^{\\text{ref}}$ is a reference solution.\nStrategy A uses the exact analytical solution as the reference: $u_{\\text{ref}}(x_i, T) = u_{\\text{exact}}(x_i, T) = \\sin(\\pi x_i/L) \\exp(-\\alpha (\\pi/L)^2 T)$. This strategy is effective only if the spatial discretization error is negligible compared to the temporal error.\nStrategy B constructs a reference solution on the same spatial grid but with a much smaller time step, $\\Delta t_{\\text{ref}} = \\Delta t / 2^r$. The error measured is $e = u^{\\text{num}}(\\Delta t) - u^{\\text{num}}(\\Delta t_{\\text{ref}})$. Since both solutions share the same spatial discretization, subtracting them cancels the dominant spatial error term, thereby isolating the temporal error.\n\nGiven a sequence of time steps $\\Delta t_j$ where $\\Delta t_{j+1} = \\Delta t_j/2$, we compute the corresponding errors $\\|e(\\Delta t_j)\\|_{L^2_h}$. The observed order of convergence between two successive refinements is:\n$$\n\\hat{p}_j = \\frac{\\log\\!\\left(\\|e(\\Delta t_j)\\|_{L^2_h} / \\|e(\\Delta t_{j+1})\\|_{L^2_h}\\right)}{\\log\\!\\left(\\Delta t_j / \\Delta t_{j+1}\\right)} = \\frac{\\log\\!\\left(\\|e(\\Delta t_j)\\|_{L^2_h} / \\|e(\\Delta t_{j+1})\\|_{L^2_h}\\right)}{\\log(2)}\n$$\nThe reported order $\\hat{p}$ is the minimum of these pairwise orders to provide a conservative estimate of the asymptotic behavior.\n\nThe three test cases are designed to illustrate these principles:\nCase A: With a very fine mesh ($N=4096$), the spatial error is minimized, and Strategy A should reveal the theoretical temporal order of $\\hat{p} \\approx 2.0$.\nCase B: With a coarser mesh ($N=64$), the spatial error is significant. However, Strategy B is used to cancel this spatial error, and again we expect to observe $\\hat{p} \\approx 2.0$.\nCase C: With a coarse mesh ($N=16$) and Strategy A, the non-negligible spatial error does not cancel and will eventually dominate the total error as $\\Delta t$ becomes small. This \"error floor\" prevents the total error from decreasing with $\\Delta t$, causing the observed order $\\hat{p}$ to drop significantly below $2.0$ and approach $0.0$.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.linalg import solve_banded\n\ndef solve():\n    \"\"\"\n    Main function to run the test suite and print results.\n    \"\"\"\n\n    def run_cn_simulation(L, alpha, N, T, dt_nominal):\n        \"\"\"\n        Solves the 1D heat equation using the Crank-Nicolson method.\n\n        Args:\n            L (float): Length of the rod.\n            alpha (float): Thermal diffusivity.\n            N (int): Number of spatial segments.\n            T (float): Final time.\n            dt_nominal (float): Nominal time step size.\n\n        Returns:\n            numpy.ndarray: Temperature distribution at the interior nodes at time T.\n        \"\"\"\n        # Adjust dt to partition T exactly\n        num_steps = int(round(T / dt_nominal))\n        dt = T / num_steps\n\n        h = L / N\n        x = np.linspace(0, L, N + 1)\n        x_interior = x[1:-1]\n\n        # Initial condition on interior nodes\n        u = np.sin(np.pi * x_interior / L)\n\n        # Mesh Fourier number\n        lambda_val = alpha * dt / h**2\n\n        # Tridiagonal matrix A for the LHS\n        m = N - 1  # Size of the system\n        A_banded = np.zeros((3, m))\n        A_banded[0, 1:] = -lambda_val / 2.0\n        A_banded[1, :] = 1.0 + lambda_val\n        A_banded[2, :-1] = -lambda_val / 2.0\n\n        for _ in range(num_steps):\n            # Construct the RHS vector d = B * u\n            d = np.zeros(m)\n            # Inner points\n            d[1:-1] = (lambda_val / 2.0) * u[:-2] + \\\n                      (1.0 - lambda_val) * u[1:-1] + \\\n                      (lambda_val / 2.0) * u[2:]\n            \n            # Boundary-adjacent points (u_0 and u_N are 0)\n            if m > 0:\n                d[0] = (1.0 - lambda_val) * u[0] + (lambda_val / 2.0) * u[1] if m > 1 else (1.0 - lambda_val) * u[0]\n            if m > 1:\n                d[-1] = (lambda_val / 2.0) * u[-2] + (1.0 - lambda_val) * u[-1]\n\n            # Solve the tridiagonal system A * u_next = d\n            u = solve_banded((1, 1), A_banded, d, overwrite_ab=False, overwrite_b=False)\n\n        return u\n\n    def calculate_order(params, strategy, r=None):\n        \"\"\"\n        Calculates the observed order of convergence for a given case.\n        \"\"\"\n        L, alpha, T, N, dt_sequence = params\n\n        h = L / N\n        x = np.linspace(0, L, N + 1)\n        x_interior = x[1:-1]\n        \n        errors = []\n        for dt in dt_sequence:\n            u_num = run_cn_simulation(L, alpha, N, T, dt)\n\n            if strategy == 'A':\n                # Strategy A: Reference is the exact solution\n                u_ref = np.sin(np.pi * x_interior / L) * np.exp(-alpha * (np.pi / L)**2 * T)\n            elif strategy == 'B':\n                # Strategy B: Reference is from a much smaller dt\n                dt_ref = dt / (2**r)\n                u_ref = run_cn_simulation(L, alpha, N, T, dt_ref)\n            else:\n                raise ValueError(\"Unknown strategy\")\n\n            # Calculate discrete L2 norm of the error\n            error_norm = np.sqrt(h * np.sum((u_num - u_ref)**2))\n            errors.append(error_norm)\n\n        # Calculate pairwise orders\n        orders = []\n        for i in range(len(errors) - 1):\n            # Ratio of time steps is 2\n            order = np.log(errors[i] / errors[i+1]) / np.log(2.0)\n            orders.append(order)\n\n        # Return the minimum of the pairwise orders, as per problem spec\n        return min(orders)\n\n    # Common parameters\n    L = 1.0  # m\n    alpha = 0.1  # m^2/s\n    T = 0.1  # s\n    dt_sequence = [T / 10.0, T / 20.0, T / 40.0, T / 80.0]\n\n    # Test Suite\n    # Case A: happy path (analytic reference, negligible spatial error)\n    params_A = (L, alpha, T, 4096, dt_sequence)\n    p_A = calculate_order(params_A, strategy='A')\n\n    # Case B: same-grid temporal reference\n    params_B = (L, alpha, T, 64, dt_sequence)\n    p_B = calculate_order(params_B, strategy='B', r=6)\n\n    # Case C: edge case (spatial error contamination)\n    params_C = (L, alpha, T, 16, dt_sequence)\n    p_C = calculate_order(params_C, strategy='A')\n\n    results = [round(p_A, 3), round(p_B, 3), round(p_C, 3)]\n    \n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2486032"}]}