{"hands_on_practices": [{"introduction": "A successful Direct Numerical Simulation (DNS) hinges on resolving all dynamically relevant length scales. This practice guides you through the essential first step of any DNS project: calculating the minimum grid resolution needed to capture both the smallest velocity structures, defined by the Kolmogorov scale ($\\eta$), and the smallest scalar structures, defined by the Batchelor scale ($\\eta_B$). By applying fundamental scaling laws, you will determine the concrete grid spacing requirements for a simulation, a critical skill for project planning and resource estimation [@problem_id:2477585].", "problem": "A Direct Numerical Simulation (DNS) of homogeneous, isotropic turbulence with a temperature field treated as a passive scalar is planned in a Newtonian liquid with kinematic viscosity $\\nu$ and Prandtl number $\\Pr$. The mean kinetic energy dissipation rate per unit mass is estimated as $\\epsilon$. A uniform Cartesian grid with second-order central differences will be used. A commonly adopted accuracy target in prior DNS practice is to resolve the smallest dynamically relevant scales such that the product of the maximum resolvable wavenumber and the smallest scale is at least a prescribed threshold in both the velocity and the scalar fields. Concretely, let the target thresholds for the velocity and temperature fields be $\\alpha_{u}$ and $\\alpha_{T}$, respectively, where the maximum resolvable wavenumber is approximated by the grid Nyquist limit $k_{\\max} \\approx \\pi/\\Delta x$. Starting from the definitions of the Kolmogorov length scale (for velocity) and the Batchelor scale (for temperature when $\\Pr \\ge 1$), and from dimensional reasoning for turbulence and diffusion time scale balance, derive symbolic expressions for the constants $c_{1}$ and $c_{2}$ in the grid-spacing requirements $\\Delta x \\lesssim c_{1}\\,\\eta$ and $\\Delta x_{T} \\lesssim c_{2}\\,\\eta_{B}$ that achieve the above resolution targets. Then, using the following data,\n- $\\nu = 1.0 \\times 10^{-6}\\ \\mathrm{m^{2}/s}$,\n- $\\epsilon = 1.0 \\times 10^{-1}\\ \\mathrm{m^{2}/s^{3}}$,\n- $\\Pr = 7$,\n- $\\alpha_{u} = 1.5$ and $\\alpha_{T} = 1.5$,\ncompute the corresponding numerical values of the two upper bounds $\\Delta x_{\\max}$ and $\\Delta x_{T,\\max}$ implied by the requirements. Justify the chosen $\\alpha_{u}$ and $\\alpha_{T}$ based on prior DNS practice and explain why the scalar criterion is typically more restrictive when $\\Pr \\ge 1$. Express both numerical answers in meters and round to three significant figures.", "solution": "The problem posed is a standard exercise in determining the grid resolution requirements for a Direct Numerical Simulation (DNS) of turbulent flow with a passive scalar. It is scientifically grounded, well-posed, and contains sufficient information for a unique solution. Therefore, the problem is valid.\n\nThe analysis proceeds in three parts. First, the symbolic constants for the grid-spacing requirements are derived. Second, the numerical values for the maximum permissible grid spacing for the velocity and scalar fields are computed. Third, a justification of the provided resolution parameters and the relative stringency of the scalar resolution criterion is provided.\n\nThe smallest dynamically-relevant length scale in the velocity field is the Kolmogorov length scale, $\\eta$, defined as the scale where the inertial and viscous forces are of the same order. It is given by\n$$ \\eta = \\left( \\frac{\\nu^3}{\\epsilon} \\right)^{1/4} $$\nwhere $\\nu$ is the kinematic viscosity and $\\epsilon$ is the mean rate of kinetic energy dissipation per unit mass.\n\nFor a passive scalar field with Prandtl number $\\Pr = \\nu / \\kappa \\ge 1$, where $\\kappa$ is the thermal diffusivity, the smallest length scale of the scalar fluctuations, the Batchelor scale $\\eta_B$, is smaller than the Kolmogorov scale. It is the scale at which the rate of strain from the smallest turbulent eddies is balanced by molecular diffusion. For $\\Pr \\ge 1$, this scale is given by\n$$ \\eta_B = \\frac{\\eta}{\\sqrt{\\Pr}} = \\left( \\frac{\\nu \\kappa^2}{\\epsilon} \\right)^{1/4} $$\n\nThe resolution criterion for a numerical simulation is based on ensuring that the grid is fine enough to resolve these smallest scales. A common approach is to require that the product of the maximum resolvable wavenumber, $k_{\\max}$, and the relevant physical scale ($\\eta$ or $\\eta_B$) exceeds a certain threshold, $\\alpha$. For a uniform Cartesian grid with spacing $\\Delta x$, the maximum resolvable wavenumber is the Nyquist wavenumber, $k_{\\max} = \\pi / \\Delta x$.\n\nFor the velocity field, the resolution requirement is\n$$ k_{\\max} \\eta \\ge \\alpha_u $$\nSubstituting $k_{\\max} = \\pi / \\Delta x$, we have\n$$ \\frac{\\pi}{\\Delta x} \\eta \\ge \\alpha_u $$\nRearranging this inequality to find the upper bound on the grid spacing $\\Delta x$ yields\n$$ \\Delta x \\le \\frac{\\pi}{\\alpha_u} \\eta $$\nThe problem defines this relationship as $\\Delta x \\lesssim c_1 \\eta$. By direct comparison, the constant $c_1$ is\n$$ c_1 = \\frac{\\pi}{\\alpha_u} $$\n\nSimilarly, for the passive scalar (temperature) field, the resolution requirement is\n$$ k_{\\max} \\eta_B \\ge \\alpha_T $$\nAssuming the grid spacing for resolving the temperature field is $\\Delta x_T$, the Nyquist wavenumber is $k_{\\max} = \\pi / \\Delta x_T$. Note that for a single-grid simulation, one must use a single $\\Delta x$ that satisfies both velocity and scalar resolution requirements. The problem asks for the individual upper bounds, which we interpret as the constraints imposed by each field separately. Thus,\n$$ \\frac{\\pi}{\\Delta x_T} \\eta_B \\ge \\alpha_T $$\nRearranging gives the requirement on grid spacing:\n$$ \\Delta x_T \\le \\frac{\\pi}{\\alpha_T} \\eta_B $$\nThe problem defines this relationship as $\\Delta x_T \\lesssim c_2 \\eta_B$. The constant $c_2$ is therefore\n$$ c_2 = \\frac{\\pi}{\\alpha_T} $$\n\nNow, we proceed to numerical computation using the provided data: $\\nu = 1.0 \\times 10^{-6}\\ \\mathrm{m^2/s}$, $\\epsilon = 1.0 \\times 10^{-1}\\ \\mathrm{m^2/s^3}$, $\\Pr = 7$, $\\alpha_u = 1.5$, and $\\alpha_T = 1.5$.\n\nFirst, we calculate the Kolmogorov length scale $\\eta$:\n$$ \\eta = \\left( \\frac{(1.0 \\times 10^{-6}\\ \\mathrm{m^2/s})^3}{1.0 \\times 10^{-1}\\ \\mathrm{m^2/s^3}} \\right)^{1/4} = \\left( \\frac{1.0 \\times 10^{-18}}{1.0 \\times 10^{-1}} \\right)^{1/4}\\ \\mathrm{m} = (1.0 \\times 10^{-17})^{1/4}\\ \\mathrm{m} \\approx 5.6234 \\times 10^{-5}\\ \\mathrm{m} $$\n\nNext, we calculate the Batchelor length scale $\\eta_B$:\n$$ \\eta_B = \\frac{\\eta}{\\sqrt{\\Pr}} = \\frac{5.6234 \\times 10^{-5}\\ \\mathrm{m}}{\\sqrt{7}} \\approx \\frac{5.6234 \\times 10^{-5}}{2.64575}\\ \\mathrm{m} \\approx 2.1254 \\times 10^{-5}\\ \\mathrm{m} $$\n\nThe maximum allowable grid spacing to resolve the velocity field, $\\Delta x_{\\max}$, is:\n$$ \\Delta x_{\\max} = c_1 \\eta = \\frac{\\pi}{\\alpha_u} \\eta = \\frac{\\pi}{1.5} (5.6234 \\times 10^{-5}\\ \\mathrm{m}) \\approx 1.1777 \\times 10^{-4}\\ \\mathrm{m} $$\nRounding to three significant figures, $\\Delta x_{\\max} = 1.18 \\times 10^{-4}\\ \\mathrm{m}$.\n\nThe maximum allowable grid spacing to resolve the temperature field, $\\Delta x_{T,\\max}$, is:\n$$ \\Delta x_{T,\\max} = c_2 \\eta_B = \\frac{\\pi}{\\alpha_T} \\eta_B = \\frac{\\pi}{1.5} (2.1254 \\times 10^{-5}\\ \\mathrm{m}) \\approx 4.4514 \\times 10^{-5}\\ \\mathrm{m} $$\nRounding to three significant figures, $\\Delta x_{T, \\max} = 4.45 \\times 10^{-5}\\ \\mathrm{m}$.\n\nFinally, a justification for the resolution parameters and the relative stringency of the scalar criterion is required.\nThe choice of $\\alpha_u = \\alpha_T = 1.5$ is a common, though not universally stringent, standard in the DNS literature. The condition $k_{\\max}\\eta=1$ represents the absolute minimum resolution where the grid can barely represent a structure of size $\\eta$. A value of $1.5$ provides a modest safety margin, corresponding to a grid spacing of $\\Delta x \\approx (\\pi/1.5)\\eta \\approx 2.1\\eta$. This ensures that the smallest eddies are resolved by at least a few grid points, which is critical for accuracy, especially with lower-order numerical schemes like the second-order central differences mentioned. More conservative simulations might use $\\alpha > 2$.\n\nThe scalar resolution criterion is more restrictive than the velocity resolution criterion when $\\Pr > 1$. The required grid spacing for the velocity field is proportional to $\\eta$, while for the scalar field it is proportional to $\\eta_B$. The ratio of the upper bounds is\n$$ \\frac{\\Delta x_{T, \\max}}{\\Delta x_{\\max}} = \\frac{(\\pi/\\alpha_T) \\eta_B}{(\\pi/\\alpha_u) \\eta} = \\frac{\\alpha_u}{\\alpha_T} \\frac{\\eta_B}{\\eta} = \\frac{\\alpha_u}{\\alpha_T} \\frac{1}{\\sqrt{\\Pr}} $$\nGiven $\\alpha_u = \\alpha_T = 1.5$ and $\\Pr = 7 > 1$, this ratio is $1/\\sqrt{7} \\approx 0.378  1$. Thus, $\\Delta x_{T, \\max}  \\Delta x_{\\max}$. A DNS using a single uniform grid must satisfy the most stringent requirement, so its grid spacing $\\Delta x$ must be less than or equal to $\\Delta x_{T, \\max}$. The physical reason for this is that for high $\\Pr$ fluids (like water or oils), momentum diffuses much more quickly than heat ($\\nu \\gg \\kappa$). As a result, temperature gradients persist down to much smaller scales than velocity gradients, creating fine-scale thermal structures that require a finer grid to resolve accurately.", "answer": "$$ \\boxed{ \\begin{pmatrix} 1.18 \\times 10^{-4}  4.45 \\times 10^{-5} \\end{pmatrix} } $$", "id": "2477585"}, {"introduction": "Ensuring a numerical solver is free of bugs and correctly implements the governing equations is a cornerstone of computational science. The Method of Manufactured Solutions (MMS) provides a rigorous framework for such code verification by testing a code's ability to reproduce a known, non-trivial solution. This exercise [@problem_id:2477527] involves performing the key analytical step of MMS: deriving the specific source term $S(x,y,z,t)$ that, when added to the advection-diffusion equation, forces a predefined \"manufactured\" temperature field to be an exact solution.", "problem": "In a triply periodic box, the temperature field of an incompressible fluid is governed by the advection–diffusion equation. Consider Direct Numerical Simulation (DNS) for verifying the discrete accuracy of a scalar transport solver using the Method of Manufactured Solutions (MMS). Begin from the local conservation of thermal energy and Fourier’s law of heat conduction for a passive scalar in an incompressible flow. Use these fundamentals to obtain the governing partial differential equation for a nondimensional temperature field $T(x,y,z,t)$ with a constant thermal diffusivity $\\alpha$ and a divergence-free velocity field $\\boldsymbol{u}(x,y,z)$. The domain is $\\Omega=[0,2\\pi]^{3}$ with periodic boundary conditions on all faces.\n\nLet the incompressible velocity be\n$$\n\\boldsymbol{u}(x,y,z)=\\bigl(2\\sin x\\,\\cos y\\,\\cos z,\\,-2\\cos x\\,\\sin y\\,\\cos z,\\,0\\bigr),\n$$\nand let the manufactured temperature be\n$$\nT(x,y,z,t)=\\cos(3x)\\,\\cos(2y)\\,\\cos(z)\\,\\exp(\\sigma t),\n$$\nwhere $\\sigma$ is a nonzero constant and $\\alpha0$ is constant. Using the Method of Manufactured Solutions (MMS), derive the spatiotemporal source term $S(x,y,z,t)$ that must be added to the right-hand side of the advection–diffusion equation so that $T(x,y,z,t)$ is an exact solution in $\\Omega$ for all $t\\ge 0$. State the corresponding initial condition and boundary conditions implied by this construction, and justify each modeling step from the conservation law and constitutive relation. Your final reported result must be the explicit closed-form analytic expression for $S(x,y,z,t)$. No numerical rounding is required. Express your final answer as a single analytic expression.", "solution": "The problem is subjected to validation and is found to be scientifically sound, well-posed, objective, and self-contained. The provided velocity field is verifiably divergence-free, confirming the incompressibility condition. The problem is a standard application of the Method of Manufactured Solutions (MMS) in computational fluid dynamics and is therefore valid.\n\nThe solution proceeds by first principles. The conservation of thermal energy for a passive scalar in an incompressible fluid is governed by the advection-diffusion equation. We derive this equation from the integral conservation law for thermal energy in an arbitrary control volume $V$ with surface $\\partial V$:\n$$ \\frac{d}{dt}\\int_{V} \\rho c_p T \\,dV = -\\oint_{\\partial V} \\boldsymbol{q} \\cdot d\\boldsymbol{A} - \\oint_{\\partial V} \\rho c_p T \\boldsymbol{u} \\cdot d\\boldsymbol{A} + \\int_{V} S_{v} \\,dV $$\nHere, $\\rho$ is the fluid density, $c_p$ is the specific heat capacity at constant pressure, $T$ is the temperature, $\\boldsymbol{q}$ is the heat flux vector, $\\boldsymbol{u}$ is the velocity field, and $S_v$ is a volumetric heat source. Using the divergence theorem and recognizing that the resulting equation must hold for any arbitrary $V$, we obtain the local differential form:\n$$ \\frac{\\partial}{\\partial t}(\\rho c_p T) + \\nabla \\cdot (\\rho c_p T \\boldsymbol{u}) = -\\nabla \\cdot \\boldsymbol{q} + S_v $$\nFor constant $\\rho$ and $c_p$, this simplifies to:\n$$ \\rho c_p \\left( \\frac{\\partial T}{\\partial t} + \\nabla \\cdot (T \\boldsymbol{u}) \\right) = -\\nabla \\cdot \\boldsymbol{q} + S_v $$\nUsing the vector identity $\\nabla \\cdot (T \\boldsymbol{u}) = T(\\nabla \\cdot \\boldsymbol{u}) + \\boldsymbol{u} \\cdot \\nabla T$ and the incompressibility condition $\\nabla \\cdot \\boldsymbol{u} = 0$, the advection term becomes $\\boldsymbol{u} \\cdot \\nabla T$.\nThe constitutive relation for heat conduction is Fourier's law, $\\boldsymbol{q} = -k \\nabla T$, where $k$ is the thermal conductivity. Assuming $k$ is constant, we have $-\\nabla \\cdot \\boldsymbol{q} = \\nabla \\cdot (k \\nabla T) = k \\nabla^2 T$.\nSubstituting these into the conservation equation gives:\n$$ \\rho c_p \\left( \\frac{\\partial T}{\\partial t} + \\boldsymbol{u} \\cdot \\nabla T \\right) = k \\nabla^2 T + S_v $$\nDividing by $\\rho c_p$ and defining the thermal diffusivity $\\alpha = k/(\\rho c_p)$ and the normalized source term $S(x,y,z,t) = S_v/(\\rho c_p)$ yields the standard advection-diffusion equation:\n$$ \\frac{\\partial T}{\\partial t} + \\boldsymbol{u} \\cdot \\nabla T = \\alpha \\nabla^2 T + S $$\nFor the Method of Manufactured Solutions, we rearrange this equation to define the source term $S$ that must be added to force the manufactured temperature field to be an exact solution:\n$$ S(x,y,z,t) = \\frac{\\partial T}{\\partial t} + \\boldsymbol{u} \\cdot \\nabla T - \\alpha \\nabla^2 T $$\nWe are given the manufactured solution $T(x,y,z,t) = \\cos(3x)\\cos(2y)\\cos(z)\\exp(\\sigma t)$ and the velocity field $\\boldsymbol{u}(x,y,z)=\\bigl(2\\sin x\\,\\cos y\\,\\cos z,\\,-2\\cos x\\,\\sin y\\,\\cos z,\\,0\\bigr)$. We now compute each term in the expression for $S$.\n\n$1$. Temporal derivative, $\\frac{\\partial T}{\\partial t}$:\n$$ \\frac{\\partial T}{\\partial t} = \\frac{\\partial}{\\partial t} \\left[ \\cos(3x)\\cos(2y)\\cos(z)\\exp(\\sigma t) \\right] = \\sigma \\cos(3x)\\cos(2y)\\cos(z)\\exp(\\sigma t) = \\sigma T $$\n\n$2$. Laplacian, $\\nabla^2 T = \\frac{\\partial^2 T}{\\partial x^2} + \\frac{\\partial^2 T}{\\partial y^2} + \\frac{\\partial^2 T}{\\partial z^2}$:\n$$ \\frac{\\partial^2 T}{\\partial x^2} = \\frac{\\partial^2}{\\partial x^2} \\left[ \\cos(3x)\\cos(2y)\\cos(z)\\exp(\\sigma t) \\right] = -3^2 T = -9T $$\n$$ \\frac{\\partial^2 T}{\\partial y^2} = \\frac{\\partial^2}{\\partial y^2} \\left[ \\cos(3x)\\cos(2y)\\cos(z)\\exp(\\sigma t) \\right] = -2^2 T = -4T $$\n$$ \\frac{\\partial^2 T}{\\partial z^2} = \\frac{\\partial^2}{\\partial z^2} \\left[ \\cos(3x)\\cos(2y)\\cos(z)\\exp(\\sigma t) \\right] = -1^2 T = -T $$\nThus, the Laplacian is:\n$$ \\nabla^2 T = (-9 - 4 - 1)T = -14T = -14\\cos(3x)\\cos(2y)\\cos(z)\\exp(\\sigma t) $$\n\n$3$. Advection term, $\\boldsymbol{u} \\cdot \\nabla T$:\nFirst, we find the gradient of $T$, $\\nabla T = \\left(\\frac{\\partial T}{\\partial x}, \\frac{\\partial T}{\\partial y}, \\frac{\\partial T}{\\partial z}\\right)$:\n$$ \\frac{\\partial T}{\\partial x} = -3\\sin(3x)\\cos(2y)\\cos(z)\\exp(\\sigma t) $$\n$$ \\frac{\\partial T}{\\partial y} = -2\\cos(3x)\\sin(2y)\\cos(z)\\exp(\\sigma t) $$\n$$ \\frac{\\partial T}{\\partial z} = -\\cos(3x)\\cos(2y)\\sin(z)\\exp(\\sigma t) $$\nNow, we compute the dot product $\\boldsymbol{u} \\cdot \\nabla T = u_x \\frac{\\partial T}{\\partial x} + u_y \\frac{\\partial T}{\\partial y} + u_z \\frac{\\partial T}{\\partial z}$:\n$$ u_x \\frac{\\partial T}{\\partial x} = (2\\sin x\\,\\cos y\\,\\cos z) \\cdot (-3\\sin(3x)\\cos(2y)\\cos(z)\\exp(\\sigma t)) \\\\ = -6 \\exp(\\sigma t) \\sin x \\sin(3x) \\cos y \\cos(2y) \\cos^2(z) $$\n$$ u_y \\frac{\\partial T}{\\partial y} = (-2\\cos x\\,\\sin y\\,\\cos z) \\cdot (-2\\cos(3x)\\sin(2y)\\cos(z)\\exp(\\sigma t)) \\\\ = 4 \\exp(\\sigma t) \\cos x \\cos(3x) \\sin y \\sin(2y) \\cos^2(z) $$\n$$ u_z \\frac{\\partial T}{\\partial z} = 0 $$\nSumming these gives the advection term:\n$$ \\boldsymbol{u} \\cdot \\nabla T = \\exp(\\sigma t) \\cos^2(z) \\left[ -6 \\sin x \\sin(3x) \\cos y \\cos(2y) + 4 \\cos x \\cos(3x) \\sin y \\sin(2y) \\right] $$\n\n$4$. Assemble the source term $S(x,y,z,t)$:\nSubstituting the computed terms into the expression for $S$:\n$$ S = \\sigma T + \\boldsymbol{u} \\cdot \\nabla T - \\alpha(-14T) = (\\sigma + 14\\alpha)T + \\boldsymbol{u} \\cdot \\nabla T $$\n$$ S(x,y,z,t) = (\\sigma + 14\\alpha)\\cos(3x)\\cos(2y)\\cos(z)\\exp(\\sigma t) + \\exp(\\sigma t) \\cos^2(z) \\left[ -6 \\sin x \\sin(3x) \\cos y \\cos(2y) + 4 \\cos x \\cos(3x) \\sin y \\sin(2y) \\right] $$\nFactoring out $\\exp(\\sigma t)$ yields the final expression for the source term:\n$$ S(x,y,z,t) = \\exp(\\sigma t) \\left( (\\sigma + 14\\alpha)\\cos(3x)\\cos(2y)\\cos(z) + \\cos^2(z) \\left[ 4 \\cos x \\cos(3x) \\sin y \\sin(2y) - 6 \\sin x \\sin(3x) \\cos y \\cos(2y) \\right] \\right) $$\n\nThe initial condition, evaluated at $t=0$, is derived directly from the manufactured solution:\n$$ T(x,y,z,0) = \\cos(3x)\\cos(2y)\\cos(z) $$\nThe boundary conditions for the domain $\\Omega=[0,2\\pi]^{3}$ are periodic. The manufactured solution $T(x,y,z,t)$ and the velocity field $\\boldsymbol{u}(x,y,z)$ are composed of trigonometric functions whose arguments are integer multiples of the spatial coordinates. These functions are inherently periodic on the domain $[0,2\\pi]^{3}$ (e.g., $\\cos(3(x+2\\pi)) = \\cos(3x+6\\pi) = \\cos(3x)$). Therefore, the manufactured solution inherently satisfies the periodic boundary conditions.\nAll modeling steps are justified, starting from the fundamental conservation law and leading to the required source term. The final result for $S(x,y,z,t)$ is the explicit analytic expression derived above.", "answer": "$$ \\boxed{\\exp(\\sigma t) \\left( (\\sigma + 14\\alpha)\\cos(3x)\\cos(2y)\\cos(z) + \\cos^2(z) \\left[ 4 \\cos(x) \\cos(3x) \\sin(y) \\sin(2y) - 6 \\sin(x) \\sin(3x) \\cos(y) \\cos(2y) \\right] \\right)} $$", "id": "2477527"}, {"introduction": "The choice of discretization scheme can dramatically impact the physical realism of a simulation, particularly when sharp thermal gradients are involved. Standard high-order schemes often introduce spurious oscillations, a critical issue in DNS where physical fidelity is paramount. This hands-on coding exercise [@problem_id:2477612] directly contrasts a classic oscillatory central scheme with a modern, non-oscillatory Total Variation Diminishing (TVD) flux-limited scheme, allowing you to visualize and quantify their performance on a sharp thermal front.", "problem": "Write a program that performs a Direct Numerical Simulation (DNS) of one-dimensional, constant-velocity thermal advection to compare the behavior of a central scheme versus a flux-limited scheme in the presence of a sharp thermal front. The governing conservation law is the linear advection equation\n$$\n\\frac{\\partial T}{\\partial t} + a \\frac{\\partial T}{\\partial x} = 0,\n$$\non a periodic domain of length $L$, with $x \\in [0,L)$, advecting a nondimensional temperature field $T(x,t)$. The advection speed $a$ is constant and positive, and the initial condition is a Riemann problem (sharp front) given by\n$$\nT(x,0) = \\begin{cases}\nT_{\\mathrm{L}},  0 \\le x  x_0,\\\\\nT_{\\mathrm{R}},  x_0 \\le x  L,\n\\end{cases}\n$$\nwith $T_{\\mathrm{L}}=1$, $T_{\\mathrm{R}}=0$, $L=1$, $x_0 = 0.5$, and $a=1$. Simulate up to a final time $t_{\\mathrm{end}}=0.2$.\n\nUse a finite-volume semi-discrete update,\n$$\nT_i^{n+1} = T_i^n - \\frac{\\Delta t}{\\Delta x}\\left(F_{i+1/2}^n - F_{i-1/2}^n\\right),\n$$\nfor two different numerical fluxes:\n- Central scheme: Use the Lax–Wendroff flux for linear advection,\n$$\nF_{i+1/2}^n = a\\left[\\frac{T_i^n + T_{i+1}^n}{2} - \\frac{a \\Delta t}{2 \\Delta x}\\left(T_{i+1}^n - T_i^n\\right)\\right].\n$$\n- Flux-limited scheme: Use a Monotonic Upstream-centered Scheme for Conservation Laws (MUSCL) reconstruction with the van Leer Total Variation Diminishing (TVD) limiter. For positive $a$, compute limited slopes via\n$$\nr_i = \\frac{T_i - T_{i-1}}{T_{i+1} - T_i}, \\quad\n\\phi(r) = \\frac{r + |r|}{1 + |r|},\n$$\nwith the convention that if the denominator is $0$ then $r=0$. Reconstruct the left state at face $i+\\tfrac{1}{2}$ as\n$$\nT_{i+1/2}^{L} = T_i + \\frac{1}{2}\\,\\phi(r_i)\\,(T_{i+1} - T_i),\n$$\nand take the upwind Godunov flux\n$$\nF_{i+1/2} = a\\,T_{i+1/2}^{L}.\n$$\nAdvance this flux with the second-order Strong Stability Preserving Runge–Kutta (SSP-RK2) method:\n$$\nT^{(1)} = T^n - \\frac{\\Delta t}{\\Delta x}\\nabla\\cdot F(T^n), \\quad\nT^{n+1} = \\frac{1}{2} T^n + \\frac{1}{2}\\left[T^{(1)} - \\frac{\\Delta t}{\\Delta x}\\nabla\\cdot F(T^{(1)})\\right].\n$$\n\nDiscretize the domain using $N$ uniform finite volumes with centers at $x_i$ and width $\\Delta x = L/N$. Impose periodic boundary conditions. Choose the time step by the Courant–Friedrichs–Lewy (CFL) condition with a Courant number $\\mathrm{CFL}=0.8$, i.e.,\n$$\n\\Delta t = \\frac{\\mathrm{CFL}\\,\\Delta x}{a},\n$$\nand use a constant $\\Delta t$ set by rounding up the number of steps to reach $t_{\\mathrm{end}}$ and then resetting $\\Delta t = t_{\\mathrm{end}}/N_t$ to hit $t_{\\mathrm{end}}$ exactly.\n\nDefine the $L_\\infty$ norm of the overshoot at time $t_{\\mathrm{end}}$ as the maximum violation of the physical bounds $[T_{\\min},T_{\\max}] = [0,1]$:\n$$\n\\| \\text{overshoot} \\|_\\infty = \\max\\left(0, \\max_i(T_i - T_{\\max}), \\max_i(T_{\\min} - T_i)\\right).\n$$\nThis quantity is dimensionless.\n\nTest Suite:\n- Use $N \\in \\{32, 64, 128, 256\\}$ with $L=1$, $a=1$, $x_0=0.5$, $T_{\\mathrm{L}}=1$, $T_{\\mathrm{R}}=0$, $\\mathrm{CFL}=0.8$, and $t_{\\mathrm{end}}=0.2$.\n- For each $N$, compute two floats: the $L_\\infty$ overshoot for the central Lax–Wendroff scheme and the $L_\\infty$ overshoot for the flux-limited MUSCL–van Leer scheme at $t_{\\mathrm{end}}$.\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, ordered as\n$$\n[\\text{LW}(32), \\text{MUSCL}(32), \\text{LW}(64), \\text{MUSCL}(64), \\text{LW}(128), \\text{MUSCL}(128), \\text{LW}(256), \\text{MUSCL}(256)],\n$$\nwhere each entry is a float rounded to six decimal places. No other text should be printed.", "solution": "The problem presented is a valid and well-posed numerical exercise in the field of computational heat and mass transfer. It requires the implementation and comparison of two distinct numerical schemes for solving the one-dimensional linear advection equation, a cornerstone of transport phenomena. The task is to simulate the advection of a sharp thermal front, or Riemann problem, and to quantify the non-physical oscillations (overshoots) generated by each scheme. The problem is scientifically grounded, internally consistent, and all parameters are provided for a complete and unambiguous implementation.\n\nThe governing partial differential equation (PDE) for this system is the linear advection equation for a nondimensional temperature field $T(x,t)$:\n$$\n\\frac{\\partial T}{\\partial t} + a \\frac{\\partial T}{\\partial x} = 0\n$$\nwhere $a$ is the constant, positive advection speed. The spatial domain is $x \\in [0,L)$ with periodic boundary conditions. The initial condition is a step function, which presents a significant challenge for numerical schemes due to its infinite gradient.\n\nWe will use a finite-volume method, which discretizes the domain into $N$ cells of width $\\Delta x = L/N$. The temperature in each cell $i$, denoted $T_i$, represents the cell-averaged value. The semi-discrete form of the governing equation is an ordinary differential equation (ODE) for each cell average:\n$$\n\\frac{dT_i}{dt} = -\\frac{1}{\\Delta x}\\left(F_{i+1/2} - F_{i-1/2}\\right)\n$$\nHere, $F_{i+1/2}$ is the numerical flux of $T$ across the interface between cell $i$ and cell $i+1$. The core of the problem lies in the definition of this flux for two different schemes.\n\n**1. Central Scheme: Lax–Wendroff**\n\nThe Lax–Wendroff scheme is a classic method that is second-order accurate in both space and time. It achieves this by including terms from a Taylor series expansion in time. For linear advection, this results in a single-step time update using a specially constructed flux. The problem provides this flux directly:\n$$\nF_{i+1/2}^n = a\\left[\\frac{T_i^n + T_{i+1}^n}{2} - \\frac{a \\Delta t}{2 \\Delta x}\\left(T_{i+1}^n - T_i^n\\right)\\right]\n$$\nThe first term, $a(T_i^n + T_{i+1}^n)/2$, is a simple central-differencing flux, which is second-order in space but is known to be unstable. The second term, proportional to the Courant number $\\nu = a \\Delta t / \\Delta x$, is a numerical diffusion term that stabilizes the scheme and elevates the temporal accuracy to second order. While accurate for smooth solutions, the Lax–Wendroff scheme is known to produce spurious, non-physical oscillations (Gibbs phenomenon) near sharp gradients or discontinuities, which we expect to observe as a significant overshoot.\n\n**2. Flux-Limited Scheme: MUSCL with van Leer Limiter**\n\nTo overcome the oscillatory behavior of high-order linear schemes like Lax–Wendroff, non-linear Total Variation Diminishing (TVD) schemes were developed. The Monotonic Upstream-centered Scheme for Conservation Laws (MUSCL) is a prominent example. The key idea is to use a high-order reconstruction of the solution within each cell and then \"limit\" the gradients of this reconstruction near discontinuities to prevent oscillations. This procedure involves three main steps:\n\n*   **Reconstruction**: A piecewise-linear representation of the data is reconstructed within each cell $i$, using a slope derived from neighboring cell averages. The quality of this reconstruction determines the accuracy.\n*   **Limiting**: The reconstructed slope is multiplied by a limiter function $\\phi(r)$, which depends on the ratio $r_i$ of consecutive gradients: $r_i = (T_i - T_{i-1}) / (T_{i+1} - T_i)$. The limiter reduces the slope (and thus the order of the scheme, locally to first-order) in regions of high variation to prevent the formation of new extrema. The problem specifies the van Leer limiter:\n    $$\n    \\phi(r) = \\frac{r + |r|}{1 + |r|}\n    $$\n    This limiter is smooth and provides second-order accuracy in smooth regions of the flow while ensuring monotonicity. The reconstructed temperature value at the left side of the interface $i+1/2$ is then:\n    $$\n    T_{i+1/2}^{L} = T_i + \\frac{1}{2}\\,\\phi(r_i)\\,(T_{i+1} - T_i)\n    $$\n*   **Flux-Update**: The flux at the interface is calculated using the reconstructed values. For positive advection speed $a  0$, the information flows from left to right, so an upwind or Godunov flux is simply:\n    $$\n    F_{i+1/2} = a\\,T_{i+1/2}^{L}\n    $$\n*   **Time Integration**: To maintain the TVD property and achieve second-order accuracy in time, a suitable multi-stage time-stepping method is required. The problem specifies the second-order Strong Stability Preserving Runge–Kutta (SSP-RK2) method:\n    $$\n    \\begin{align*}\n    T^{(1)} = T^n - \\frac{\\Delta t}{\\Delta x}\\left( F(T^n)_{i+1/2} - F(T^n)_{i-1/2} \\right) \\\\\n    T^{n+1} = \\frac{1}{2} T^n + \\frac{1}{2}\\left[T^{(1)} - \\frac{\\Delta t}{\\Delta x}\\left( F(T^{(1)})_{i+1/2} - F(T^{(1)})_{i-1/2} \\right) \\right]\n    \\end{align*}\n    $$\nThis combination of MUSCL reconstruction, van Leer limiting, and SSP-RK2 integration is designed to produce a sharp, non-oscillatory resolution of the advected front.\n\n**Implementation and Analysis**\n\nThe simulation will be carried out on a uniform grid with periodic boundary conditions, which are handled computationally by wrapping array indices (e.g., using `numpy.roll`). The initial condition, a step function, is discretized by computing the cell-average over each finite volume, which provides a more accurate representation than simple point-wise sampling. The time step $\\Delta t$ is determined from the Courant–Friedrichs–Lewy (CFL) condition with a Courant number of $0.8$ and adjusted to ensure the simulation concludes precisely at $t_{\\mathrm{end}}$.\n\nThe primary metric for comparison is the $L_\\infty$ norm of the overshoot, which measures the maximum deviation of the numerical solution outside the physically expected range $[T_{\\min}, T_{\\max}] = [0, 1]$. We anticipate that the Lax–Wendroff scheme will exhibit significant overshoot that decreases with grid refinement, while the MUSCL/van Leer scheme will show little to no overshoot, demonstrating its TVD property.", "answer": "```python\nimport numpy as np\nimport math\n\ndef setup_grid_and_ic(N, L, x0, TL, TR):\n    \"\"\"\n    Sets up the grid and initial condition using cell-averaging.\n    \"\"\"\n    dx = L / N\n    # Cell centers\n    x = np.linspace(dx / 2, L - dx / 2, N)\n    \n    T0 = np.zeros(N)\n    \n    # Cell boundaries\n    x_faces = np.linspace(0, L, N + 1)\n    \n    for i in range(N):\n        x_left = x_faces[i]\n        x_right = x_faces[i+1]\n        \n        # Portion of the cell to the left of x0\n        overlap_left = max(0, min(x_right, x0) - x_left)\n        # Portion of the cell to the right of or at x0\n        overlap_right = max(0, x_right - max(x_left, x0))\n        \n        T0[i] = (overlap_left * TL + overlap_right * TR) / dx\n        \n    return x, dx, T0\n\ndef calculate_overshoot(T, T_min, T_max):\n    \"\"\"\n    Calculates the L-infinity norm of the overshoot.\n    \"\"\"\n    overshoot = np.max([0.0, np.max(T) - T_max, T_min - np.min(T)])\n    return overshoot\n\ndef run_lax_wendroff(T0, N, L, a, cfl, t_end):\n    \"\"\"\n    Solves the 1D linear advection equation using the Lax-Wendroff scheme.\n    \"\"\"\n    dx = L / N\n    \n    # Calculate stable time step\n    dt_cfl = cfl * dx / a\n    num_steps = math.ceil(t_end / dt_cfl)\n    dt = t_end / num_steps\n    \n    T = T0.copy()\n    nu = a * dt / dx # Courant number\n\n    for _ in range(num_steps):\n        T_ip1 = np.roll(T, -1)\n        \n        # Lax-Wendroff flux F_{i+1/2}\n        flux_face = a * (0.5 * (T + T_ip1) - 0.5 * nu * (T_ip1 - T))\n        \n        flux_face_im1 = np.roll(flux_face, 1)\n        \n        # Finite volume update\n        T = T - (dt / dx) * (flux_face - flux_face_im1)\n        \n    return T\n\ndef calculate_rhs_muscl(T, dx, a):\n    \"\"\"Calculates the right-hand-side for the MUSCL scheme.\"\"\"\n    # Periodic boundary conditions via numpy.roll\n    T_im1 = np.roll(T, 1)\n    T_ip1 = np.roll(T, -1)\n    \n    # Slope ratio r_i = (T_i - T_{i-1}) / (T_{i+1} - T_i)\n    numerator = T - T_im1\n    denominator = T_ip1 - T\n    \n    r = np.zeros_like(T)\n    # Avoid division by zero\n    mask = np.abs(denominator) > 1e-12\n    r[mask] = numerator[mask] / denominator[mask]\n    \n    # van Leer limiter: phi(r) = (r + |r|) / (1 + |r|)\n    phi = (r + np.abs(r)) / (1.0 + np.abs(r))\n    \n    # Reconstructed left state at face i+1/2\n    T_L_face = T + 0.5 * phi * (T_ip1 - T)\n    \n    # Godunov flux for a > 0\n    F_face = a * T_L_face\n    \n    # Flux at face i-1/2\n    F_face_im1 = np.roll(F_face, 1)\n    \n    # RHS = -1/dx * (F_{i+1/2} - F_{i-1/2})\n    rhs = -(F_face - F_face_im1) / dx\n    return rhs\n\ndef run_muscl_vanleer(T0, N, L, a, cfl, t_end):\n    \"\"\"\n    Solves the 1D linear advection equation using the MUSCL-vanLeer TVD scheme\n    with SSP-RK2 time integration.\n    \"\"\"\n    dx = L / N\n\n    # Calculate stable time step\n    dt_cfl = cfl * dx / a\n    num_steps = math.ceil(t_end / dt_cfl)\n    dt = t_end / num_steps\n\n    T = T0.copy()\n\n    for _ in range(num_steps):\n        # SSP-RK2 Stage 1\n        rhs1 = calculate_rhs_muscl(T, dx, a)\n        T1 = T + dt * rhs1\n        \n        # SSP-RK2 Stage 2\n        rhs2 = calculate_rhs_muscl(T1, dx, a)\n        T = 0.5 * T + 0.5 * (T1 + dt * rhs2)\n        \n    return T\n\ndef solve():\n    \"\"\"\n    Main solver function to run simulations and print results.\n    \"\"\"\n    # Problem parameters\n    L = 1.0\n    a = 1.0\n    x0 = 0.5\n    TL = 1.0\n    TR = 0.0\n    cfl = 0.8\n    t_end = 0.2\n    T_min, T_max = 0.0, 1.0\n\n    # Test cases for N\n    N_values = [32, 64, 128, 256]\n    \n    results = []\n\n    for N in N_values:\n        _x, dx, T0 = setup_grid_and_ic(N, L, x0, TL, TR)\n        \n        # Run Lax-Wendroff simulation\n        T_lw = run_lax_wendroff(T0, N, L, a, cfl, t_end)\n        overshoot_lw = calculate_overshoot(T_lw, T_min, T_max)\n        results.append(round(overshoot_lw, 6))\n        \n        # Run MUSCL-vanLeer simulation\n        T_muscl = run_muscl_vanleer(T0, N, L, a, cfl, t_end)\n        overshoot_muscl = calculate_overshoot(T_muscl, T_min, T_max)\n        results.append(round(overshoot_muscl, 6))\n\n    # Format and print the final output\n    print(f\"[{','.join(f'{r:.6f}' for r in results)}]\")\n\nsolve()\n```", "id": "2477612"}]}