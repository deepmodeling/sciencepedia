{"hands_on_practices": [{"introduction": "The cornerstone of the Discrete Ordinates Method is the approximation of the continuous integral over solid angle with a discrete, weighted sum. This practice explores how to derive the appropriate discrete directions and weights, which form a quadrature set, for an axisymmetric system common in engineering applications. By starting with a standard one-dimensional Gauss-Legendre quadrature, you will learn the crucial skill of mapping it onto the full solid angle while ensuring the resulting discretization correctly preserves key physical moments of the radiation field [@problem_id:2528233].", "problem": "A radiatively participating medium is treated with the Discrete Ordinates Method (DOM), assuming axisymmetry about a fixed axis so that any angular dependence of the specific intensity can be written as a function of the direction cosine $\\mu=\\cos\\theta$ only. Let the solid-angle element be $d\\Omega=\\sin\\theta\\,d\\theta\\,d\\phi$, with polar angle $\\theta\\in[0,\\pi]$ and azimuthal angle $\\phi\\in[0,2\\pi)$. Consider approximating the solid-angle integral of a smooth scalar function $f(\\mu)$ by a one-dimensional Gauss–Legendre quadrature on $\\mu\\in[-1,1]$ with $N$ points.\n\nTasks:\n1) Starting from the definition of $d\\Omega$ and the change of variables $\\mu=\\cos\\theta$, derive the axisymmetric representation of the full solid-angle integral of $f(\\mu)$ and state the corresponding exact normalization condition for the integral of the constant function $f(\\mu)=1$ over the sphere.\n2) Let the one-dimensional Gauss–Legendre quadrature on $\\mu\\in[-1,1]$ be characterized by nodes $\\{\\mu_{n}\\}_{n=1}^{N}$ and weights $\\{w_{n}\\}_{n=1}^{N}$, so that $\\int_{-1}^{1}g(\\mu)\\,d\\mu\\approx\\sum_{n=1}^{N}w_{n}g(\\mu_{n})$ for sufficiently smooth $g$. Determine the solid-angle weights $\\{W_{n}\\}_{n=1}^{N}$ to be paired with the same nodes $\\{\\mu_{n}\\}$ so that the discrete approximation $\\int_{4\\pi} f\\,d\\Omega\\approx\\sum_{n=1}^{N}W_{n}f(\\mu_{n})$ integrates $f(\\mu)=1$ exactly over the full sphere.\n3) Specialize to $N=3$. Compute the Gauss–Legendre nodes $\\{\\mu_{n}\\}_{n=1}^{3}$ and the corresponding one-dimensional weights $\\{w_{n}\\}_{n=1}^{3}$ on $\\mu\\in[-1,1]$, and then compute the mapped solid-angle weights $\\{W_{n}\\}_{n=1}^{3}$ from part (2). Order the nodes increasingly, $\\mu_{1}<\\mu_{2}<\\mu_{3}$, and report the final ordered row vector $\\big[W_{1}\\;\\;W_{2}\\;\\;W_{3}\\big]$.\n\nAnswer specification:\n- Provide exact expressions; do not approximate $\\pi$.\n- Express the final weights in steradians.\n- Your final answer must be the single row vector $\\big[W_{1}\\;\\;W_{2}\\;\\;W_{3}\\big]$ in closed form, with no rounding.", "solution": "The problem as stated is well-posed, scientifically grounded, and contains all necessary information for a unique solution. We proceed directly to the derivation and calculation.\n\nThe problem is divided into three parts, which we shall address sequentially.\n\n1) Derivation of the axisymmetric solid-angle integral representation and its normalization.\n\nThe solid-angle integral of a function $f(\\mu)$ that depends only on the direction cosine $\\mu = \\cos\\theta$ is given by\n$$\n\\int_{4\\pi} f(\\mu) \\, d\\Omega\n$$\nwhere $d\\Omega = \\sin\\theta \\, d\\theta \\, d\\phi$ is the differential solid angle in spherical coordinates. The angles are $\\theta \\in [0, \\pi]$ and $\\phi \\in [0, 2\\pi)$. Substituting the expression for $d\\Omega$, the integral becomes:\n$$\n\\int_{0}^{2\\pi} \\int_{0}^{\\pi} f(\\cos\\theta) \\sin\\theta \\, d\\theta \\, d\\phi\n$$\nSince the integrand $f(\\cos\\theta)$ is independent of the azimuthal angle $\\phi$, the integration with respect to $\\phi$ can be performed directly:\n$$\n\\int_{0}^{2\\pi} d\\phi = 2\\pi\n$$\nThis leaves us with a one-dimensional integral over the polar angle $\\theta$:\n$$\n\\int_{4\\pi} f(\\mu) \\, d\\Omega = 2\\pi \\int_{0}^{\\pi} f(\\cos\\theta) \\sin\\theta \\, d\\theta\n$$\nWe now perform the change of variables from $\\theta$ to $\\mu = \\cos\\theta$. The differential is $d\\mu = -\\sin\\theta \\, d\\theta$. The limits of integration must also be transformed:\n- For $\\theta = 0$, $\\mu = \\cos(0) = 1$.\n- For $\\theta = \\pi$, $\\mu = \\cos(\\pi) = -1$.\n\nSubstituting these into the integral, we get:\n$$\n2\\pi \\int_{1}^{-1} f(\\mu) (-d\\mu) = 2\\pi \\int_{-1}^{1} f(\\mu) \\, d\\mu\n$$\nThis is the axisymmetric representation of the full solid-angle integral.\n\nFor the normalization condition, we consider the constant function $f(\\mu) = 1$. The integral over the full sphere must yield the total solid angle, $4\\pi$ steradians. Using our derived formula:\n$$\n\\int_{4\\pi} 1 \\, d\\Omega = 2\\pi \\int_{-1}^{1} 1 \\, d\\mu = 2\\pi \\left[ \\mu \\right]_{-1}^{1} = 2\\pi (1 - (-1)) = 2\\pi(2) = 4\\pi\n$$\nThe result is correct, thus confirming the derived formula and the normalization.\n\n2) Determination of the solid-angle quadrature weights $W_{n}$.\n\nThe problem proposes to approximate the solid-angle integral using an $N$-point quadrature:\n$$\n\\int_{4\\pi} f(\\mu) \\, d\\Omega \\approx \\sum_{n=1}^{N} W_{n} f(\\mu_{n})\n$$\nUsing the result from part (1), we have the exact relation:\n$$\n\\int_{4\\pi} f(\\mu) \\, d\\Omega = 2\\pi \\int_{-1}^{1} f(\\mu) \\, d\\mu\n$$\nThe integral on the right-hand side is to be approximated by an $N$-point Gauss-Legendre quadrature on the interval $[-1, 1]$, defined by nodes $\\{\\mu_n\\}$ and weights $\\{w_n\\}$:\n$$\n\\int_{-1}^{1} g(\\mu) \\, d\\mu \\approx \\sum_{n=1}^{N} w_{n} g(\\mu_{n})\n$$\nApplying this to our function $f(\\mu)$, we obtain the approximation:\n$$\n2\\pi \\int_{-1}^{1} f(\\mu) \\, d\\mu \\approx 2\\pi \\sum_{n=1}^{N} w_{n} f(\\mu_{n})\n$$\nBy comparing the two quadrature formulas for the solid-angle integral,\n$$\n\\sum_{n=1}^{N} W_{n} f(\\mu_{n}) \\approx 2\\pi \\sum_{n=1}^{N} w_{n} f(\\mu_{n})\n$$\nand requiring this to hold for any sufficiently smooth function $f(\\mu)$, we can identify the coefficients for each $f(\\mu_n)$ term:\n$$\nW_{n} = 2\\pi w_{n}\n$$\nThis gives the solid-angle weights $W_n$ in terms of the standard one-dimensional Gauss-Legendre weights $w_n$. To verify this, we check if the quadrature integrates $f(\\mu) = 1$ exactly. The quadrature sum for $f(\\mu)=1$ is $\\sum_{n=1}^{N} W_n$. For this to be exact, it must equal $4\\pi$.\n$$\n\\sum_{n=1}^{N} W_{n} = \\sum_{n=1}^{N} 2\\pi w_{n} = 2\\pi \\sum_{n=1}^{N} w_{n}\n$$\nA fundamental property of Gauss-Legendre quadrature is that it integrates polynomials of degree up to $2N-1$ exactly. For $N \\ge 1$, this includes constant functions (degree $0$). Therefore, the sum of the weights is exact:\n$$\n\\sum_{n=1}^{N} w_{n} = \\int_{-1}^{1} 1 \\, d\\mu = 2\n$$\nSubstituting this into the expression for the sum of $W_n$:\n$$\n\\sum_{n=1}^{N} W_{n} = 2\\pi (2) = 4\\pi\n$$\nThe condition is satisfied. The relation $W_n = 2\\pi w_n$ is therefore correct.\n\n3) Calculation for $N=3$.\n\nFor $N=3$, the Gauss-Legendre quadrature nodes $\\{\\mu_n\\}$ are the roots of the Legendre polynomial of degree $3$, $P_3(\\mu)$. The Legendre polynomials are defined by the recurrence relation $(n+1)P_{n+1}(x) = (2n+1)xP_n(x) - nP_{n-1}(x)$, with $P_0(x)=1$ and $P_1(x)=x$. This gives:\n$$\nP_3(\\mu) = \\frac{1}{2}(5\\mu^3 - 3\\mu)\n$$\nThe roots are found by setting $P_3(\\mu) = 0$:\n$$\n\\frac{1}{2}\\mu(5\\mu^2 - 3) = 0\n$$\nThis yields the roots $\\mu = 0$ and $\\mu = \\pm\\sqrt{\\frac{3}{5}}$. Ordered increasingly, the nodes are:\n$$\n\\mu_1 = -\\sqrt{\\frac{3}{5}}, \\quad \\mu_2 = 0, \\quad \\mu_3 = \\sqrt{\\frac{3}{5}}\n$$\nThe corresponding weights $\\{w_n\\}$ are given by the formula $w_n = \\frac{2}{(1-\\mu_n^2)[P_N'(\\mu_n)]^2}$. For $N=3$, we need the derivative of $P_3(\\mu)$:\n$$\nP_3'(\\mu) = \\frac{d}{d\\mu}\\left(\\frac{1}{2}(5\\mu^3 - 3\\mu)\\right) = \\frac{1}{2}(15\\mu^2 - 3)\n$$\nNow we compute the weights:\nFor the nodes $\\mu_1 = -\\sqrt{3/5}$ and $\\mu_3 = \\sqrt{3/5}$, we have $\\mu_{1,3}^2 = 3/5$.\n$$\nP_3'(\\mu_{1,3}) = \\frac{1}{2}\\left(15\\left(\\frac{3}{5}\\right) - 3\\right) = \\frac{1}{2}(9-3) = 3\n$$\nThe weights are:\n$$\nw_1 = w_3 = \\frac{2}{(1 - 3/5)[3]^2} = \\frac{2}{(2/5)(9)} = \\frac{10}{18} = \\frac{5}{9}\n$$\nFor the node $\\mu_2 = 0$:\n$$\nP_3'(\\mu_2) = \\frac{1}{2}(15(0)^2 - 3) = -\\frac{3}{2}\n$$\nThe weight is:\n$$\nw_2 = \\frac{2}{(1 - 0^2)[-3/2]^2} = \\frac{2}{9/4} = \\frac{8}{9}\n$$\nThe one-dimensional weights are $\\{w_1, w_2, w_3\\} = \\{5/9, 8/9, 5/9\\}$.\n\nFinally, we compute the solid-angle weights $\\{W_n\\}$ using the relation $W_n = 2\\pi w_n$. Their units are steradians.\n$$\nW_1 = 2\\pi w_1 = 2\\pi \\left(\\frac{5}{9}\\right) = \\frac{10\\pi}{9}\n$$\n$$\nW_2 = 2\\pi w_2 = 2\\pi \\left(\\frac{8}{9}\\right) = \\frac{16\\pi}{9}\n$$\n$$\nW_3 = 2\\pi w_3 = 2\\pi \\left(\\frac{5}{9}\\right) = \\frac{10\\pi}{9}\n$$\nThe final answer is the ordered row vector of these weights.\n$$\n\\begin{pmatrix} W_1 & W_2 & W_3 \\end{pmatrix} = \\begin{pmatrix} \\frac{10\\pi}{9} & \\frac{16\\pi}{9} & \\frac{10\\pi}{9} \\end{pmatrix}\n$$", "answer": "$$\n\\boxed{\\begin{pmatrix} \\frac{10\\pi}{9} & \\frac{16\\pi}{9} & \\frac{10\\pi}{9} \\end{pmatrix}}\n$$", "id": "2528233"}, {"introduction": "Once the radiative transfer equation is discretized, we must solve the resulting system of algebraic equations. The \"sweep\" algorithm accomplishes this by processing computational cells in an order that respects the direction of radiation flow, ensuring that upwind cell intensities are known before downwind cells are computed. This exercise challenges you to implement this critical logic by constructing a data dependency graph for cells on an unstructured mesh and performing a topological sort to find a valid sweep schedule [@problem_id:2528194]. Mastering this procedure is key to developing a functional and efficient DOM solver.", "problem": "You are to implement a program that constructs a sweep schedule for the Discrete Ordinates Method (DOM) in radiative heat transfer on unstructured two-dimensional meshes. The schedule must respect upwinding for a given discrete direction by performing a topological sort of cell dependencies induced by the streaming term.\n\nStart from the steady Radiative Transfer Equation (RTE) streaming term in a given discrete direction represented by a unit vector $\\hat{\\boldsymbol{s}} \\in \\mathbb{R}^2$:\n$$\n\\hat{\\boldsymbol{s}} \\cdot \\nabla I(\\boldsymbol{x}, \\hat{\\boldsymbol{s}}) + \\kappa I(\\boldsymbol{x}, \\hat{\\boldsymbol{s}}) = S(\\boldsymbol{x}, \\hat{\\boldsymbol{s}}),\n$$\nwhere $I$ is the radiation intensity, $\\kappa$ is the absorption coefficient, and $S$ is a source term. In a finite-volume discretization over cells $\\{ \\mathcal{C}_i \\}_{i=0}^{N-1}$ with outward face normals $\\boldsymbol{n}_{i,f}$ per face $f \\in \\mathcal{F}_i$, the streaming term is upwinded: for each face $f$ of cell $i$, if $\\hat{\\boldsymbol{s}} \\cdot \\boldsymbol{n}_{i,f} < 0$ and the face is internal with neighboring cell $j$, then the value in cell $i$ depends on the value in the upwind neighbor $j$ across that face. If the face is a boundary face with $\\hat{\\boldsymbol{s}} \\cdot \\boldsymbol{n}_{i,f} < 0$, the inflow boundary intensity is known and does not induce a dependency. Faces with $\\hat{\\boldsymbol{s}} \\cdot \\boldsymbol{n}_{i,f} > 0$ are outflow for cell $i$ with no dependency. Faces with $\\hat{\\boldsymbol{s}} \\cdot \\boldsymbol{n}_{i,f} = 0$ are tangential and may be treated as no-coupling for ordering purposes.\n\nDefine a directed graph on cells with vertices $\\{0,1,\\dots,N-1\\}$. For each cell $i$ and each face $f \\in \\mathcal{F}_i$:\n- If the face is internal with neighbor $j$ and $\\hat{\\boldsymbol{s}} \\cdot \\boldsymbol{n}_{i,f} < 0$, add a directed edge $j \\to i$.\n- If the face is a boundary face and $\\hat{\\boldsymbol{s}} \\cdot \\boldsymbol{n}_{i,f} < 0$, add no edge (boundary inflow is known).\n- If $\\hat{\\boldsymbol{s}} \\cdot \\boldsymbol{n}_{i,f} \\ge 0$, add no edge.\n\nA sweep schedule is then any topological ordering of this directed acyclic graph that lists each cell after all of its upwind dependencies (predecessors). To ensure deterministic behavior when multiple cells are eligible at once, break ties by increasing projected center coordinate $t_i = \\boldsymbol{x}_i \\cdot \\hat{\\boldsymbol{s}}$; if there is still a tie, break by increasing cell identifier $i$.\n\nImplement the above logic and compute sweep schedules for the following three test cases. In each case, the mesh is specified by:\n- A set of cell identifiers.\n- Cell center coordinates $\\boldsymbol{x}_i \\in \\mathbb{R}^2$.\n- For each cell $i$, a list of faces. Each face is given by an outward normal vector $\\boldsymbol{n}_{i,f} \\in \\mathbb{R}^2$ and either a neighboring cell identifier $j$ (internal face) or the value $\\varnothing$ for a boundary face.\n\nUse the following test suite. All vector components are dimensionless and given as real numbers. The discrete direction vector components are also given as real numbers. You must treat the tangential condition using a strict tolerance $\\varepsilon = 10^{-12}$: a face is considered inflow if and only if $\\hat{\\boldsymbol{s}} \\cdot \\boldsymbol{n}_{i,f} < -\\varepsilon$, outflow if and only if $\\hat{\\boldsymbol{s}} \\cdot \\boldsymbol{n}_{i,f} > \\varepsilon$, and otherwise tangential (no dependency). The tie-breaking projection uses $t_i = \\boldsymbol{x}_i \\cdot \\hat{\\boldsymbol{s}}$.\n\nTest case $1$ (structured $2 \\times 2$ mesh, right-going sweep):\n- Cells and centers:\n  - $0$: $\\boldsymbol{x}_0 = (0.5, 0.5)$\n  - $1$: $\\boldsymbol{x}_1 = (1.5, 0.5)$\n  - $2$: $\\boldsymbol{x}_2 = (0.5, 1.5)$\n  - $3$: $\\boldsymbol{x}_3 = (1.5, 1.5)$\n- Faces per cell (each entry is $(\\boldsymbol{n}_{i,f}, \\text{neighbor})$ with neighbor $\\in \\{0,1,2,3\\}$ or $\\varnothing$):\n  - Cell $0$: $[ ((-1,0), \\varnothing),\\ ((+1,0), 1),\\ ((0,-1), \\varnothing),\\ ((0,+1), 2) ]$\n  - Cell $1$: $[ ((-1,0), 0),\\ ((+1,0), \\varnothing),\\ ((0,-1), \\varnothing),\\ ((0,+1), 3) ]$\n  - Cell $2$: $[ ((-1,0), \\varnothing),\\ ((+1,0), 3),\\ ((0,-1), 0),\\ ((0,+1), \\varnothing) ]$\n  - Cell $3$: $[ ((-1,0), 2),\\ ((+1,0), \\varnothing),\\ ((0,-1), 1),\\ ((0,+1), \\varnothing) ]$\n- Direction: $\\hat{\\boldsymbol{s}} = (1, 0)$\n\nTest case $2$ (unstructured triangular chain, diagonal sweep):\n- Cells and centers:\n  - $0$: $\\boldsymbol{x}_0 = (0.0, 0.0)$\n  - $1$: $\\boldsymbol{x}_1 = (1.0, 1.0)$\n  - $2$: $\\boldsymbol{x}_2 = (2.0, 2.0)$\n- Faces per cell:\n  - Cell $0$: $[ ((+1,+1), 1),\\ ((-1,0), \\varnothing),\\ ((0,-1), \\varnothing) ]$\n  - Cell $1$: $[ ((-1,-1), 0),\\ ((+1,+1), 2),\\ ((-1,+1), \\varnothing) ]$\n  - Cell $2$: $[ ((-1,-1), 1),\\ ((+1,0), \\varnothing),\\ ((0,+1), \\varnothing) ]$\n- Direction: $\\hat{\\boldsymbol{s}} = (1, 1)$\n\nTest case $3$ (tangential internal face, upward sweep):\n- Cells and centers:\n  - $0$: $\\boldsymbol{x}_0 = (0.5, 0.5)$\n  - $1$: $\\boldsymbol{x}_1 = (1.5, 0.5)$\n- Faces per cell:\n  - Cell $0$: $[ ((-1,0), \\varnothing),\\ ((+1,0), 1),\\ ((0,-1), \\varnothing),\\ ((0,+1), \\varnothing) ]$\n  - Cell $1$: $[ ((-1,0), 0),\\ ((+1,0), \\varnothing),\\ ((0,-1), \\varnothing),\\ ((0,+1), \\varnothing) ]$\n- Direction: $\\hat{\\boldsymbol{s}} = (0, 1)$\n\nYour program must:\n- Construct the directed dependency graph as defined above for each test case.\n- Compute a topological order that respects the dependencies. When multiple cells have zero in-degree at any step, choose the cell with smallest $t_i = \\boldsymbol{x}_i \\cdot \\hat{\\boldsymbol{s}}$; if still tied, choose the smallest identifier $i$.\n- Output the sweep order for each test case as a list of integers.\n\nFinal output format:\n- Your program should produce a single line of output containing the results for all three test cases as a comma-separated list enclosed in square brackets, where each test case result is itself a list of integers representing the cell identifiers in sweep order. For example, the format must be exactly like $[[\\dots],[\\dots],[\\dots]]$ with commas separating items and no additional text.\n\nThe expected output data types are lists of integers. There are no physical units to report in this problem. Angles are not used; all directions are specified via their vector components. All numbers in the output should be integers corresponding to cell identifiers.", "solution": "The problem presented is a well-posed and standard task in the field of computational methods for transport phenomena. It requires the construction of a sweep schedule for the discrete ordinates method (DOM) applied to the radiative transfer equation (RTE). A sweep schedule is a specific ordering of computational cells that respects the flow of information, a concept dictated by the principle of upwinding. This schedule is equivalent to a topological sort of a directed graph representing cell dependencies.\n\nThe governing equation is the steady-state RTE in two dimensions for a particular discrete direction $\\hat{\\boldsymbol{s}}$:\n$$\n\\hat{\\boldsymbol{s}} \\cdot \\nabla I(\\boldsymbol{x}, \\hat{\\boldsymbol{s}}) + \\kappa I(\\boldsymbol{x}, \\hat{\\boldsymbol{s}}) = S(\\boldsymbol{x}, \\hat{\\boldsymbol{s}})\n$$\nIn a finite-volume discretization, the intensity $I$ in a cell $\\mathcal{C}_i$ is coupled to its neighbors. The direction of this coupling is determined by the sign of the dot product of the direction vector $\\hat{\\boldsymbol{s}}$ and the outward normal vector $\\boldsymbol{n}_{i,f}$ of a face $f$ of cell $\\mathcal{C}_i$. If $\\hat{\\boldsymbol{s}} \\cdot \\boldsymbol{n}_{i,f} < 0$, the face is an inflow face, and the calculation for cell $\\mathcal{C}_i$ depends on information from outside the cell. If this face is shared with a neighbor cell $\\mathcal{C}_j$, then cell $\\mathcal{C}_i$ depends on cell $\\mathcal{C}_j$. This establishes a directed dependency $j \\to i$.\n\nThe problem demands the implementation of a specific algorithm to determine this sweep order, which is a variation of Kahn's algorithm for topological sorting. The procedure is as follows:\n\n1.  **Dependency Graph Construction**: For a given mesh and direction $\\hat{\\boldsymbol{s}}$, a directed graph $G = (V, E)$ is constructed. The vertices $V$ are the cell identifiers $\\{0, 1, \\dots, N-1\\}$. A directed edge $j \\to i$ is added to the set of edges $E$ if and only if cell $\\mathcal{C}_i$ shares an internal face with neighbor $\\mathcal{C}_j$ and the condition $\\hat{\\boldsymbol{s}} \\cdot \\boldsymbol{n}_{i,f} < -\\varepsilon$ is met, where $\\boldsymbol{n}_{i,f}$ is the outward normal from cell $\\mathcal{C}_i$ on that face and $\\varepsilon = 10^{-12}$ is the specified numerical tolerance.\n\n2.  **Topological Sort**: A topological sort is computed. The algorithm proceeds iteratively:\n    a. Compute the in-degree of all vertices (cells).\n    b. Maintain a queue of vertices with an in-degree of zero. These are the cells ready to be processed.\n    c. When multiple cells are in the queue, a deterministic tie-breaking rule must be applied. The cell with the minimum projected center coordinate $t_i = \\boldsymbol{x}_i \\cdot \\hat{\\boldsymbol{s}}$ is chosen. If a tie persists, the cell with the smallest numerical identifier $i$ is chosen.\n    d. The chosen cell is removed from the queue and added to the final sorted list.\n    e. The in-degrees of all its successor cells in the graph are decremented. If any successor's in-degree becomes zero, it is added to the queue.\n    f. This process repeats until the queue is empty.\n\nWe now apply this procedure to each test case.\n\n**Test Case 1: Structured $2 \\times 2$ mesh, $\\hat{\\boldsymbol{s}} = (1, 0)$**\n\nThe cells are $\\{0, 1, 2, 3\\}$. The direction vector is $\\hat{\\boldsymbol{s}} = (1, 0)$. The tie-breaking projections are $t_i = \\boldsymbol{x}_i \\cdot \\hat{\\boldsymbol{s}}$:\n- $t_0 = (0.5, 0.5) \\cdot (1, 0) = 0.5$\n- $t_1 = (1.5, 0.5) \\cdot (1, 0) = 1.5$\n- $t_2 = (0.5, 1.5) \\cdot (1, 0) = 0.5$\n- $t_3 = (1.5, 1.5) \\cdot (1, 0) = 1.5$\n\nThe dot products $\\hat{\\boldsymbol{s}} \\cdot \\boldsymbol{n}_{i,f}$ determine the dependencies:\n- For cell $1$, face with neighbor $0$: normal is $\\boldsymbol{n}_{1,f}=(-1, 0)$. $\\hat{\\boldsymbol{s}} \\cdot \\boldsymbol{n}_{1,f} = (1,0) \\cdot (-1,0) = -1 < -\\varepsilon$. This creates a dependency $0 \\to 1$.\n- For cell $3$, face with neighbor $2$: normal is $\\boldsymbol{n}_{3,f}=(-1, 0)$. $\\hat{\\boldsymbol{s}} \\cdot \\boldsymbol{n}_{3,f} = (1,0) \\cdot (-1,0) = -1 < -\\varepsilon$. This creates a dependency $2 \\to 3$.\n- All other internal faces have normals orthogonal to $\\hat{\\boldsymbol{s}}$, resulting in a zero dot product, which is treated as tangential (no dependency).\n\nThe resulting graph has edges $\\{0 \\to 1, 2 \\to 3\\}$. The initial in-degrees are: $ind(0)=0, ind(1)=1, ind(2)=0, ind(3)=1$.\n\nThe sort proceeds as follows:\n1.  Initial queue of zero in-degree cells: $\\{0, 2\\}$. Tie-breaking: $t_0 = 0.5$ and $t_2 = 0.5$. A tie in projection occurs. The secondary tie-breaker is cell ID: $0 < 2$. Cell $0$ is chosen. Sweep order: $[0]$.\n2.  Cell $0$ is processed. The in-degree of its successor, cell $1$, is decremented to $0$. The queue of available cells becomes $\\{1, 2\\}$.\n3.  Choose between cells $1$ and $2$. Tie-breaking: $t_1 = 1.5$, $t_2 = 0.5$. Since $t_2 < t_1$, cell $2$ is chosen. Sweep order: $[0, 2]$.\n4.  Cell $2$ is processed. The in-degree of its successor, cell $3$, is decremented to $0$. The queue becomes $\\{1, 3\\}$.\n5.  Choose between cells $1$ and $3$. Tie-breaking: $t_1 = 1.5$, $t_3 = 1.5$. A tie in projection. Secondary tie-breaker: $1 < 3$. Cell $1$ is chosen. Sweep order: $[0, 2, 1]$.\n6.  The only remaining cell is $3$. It is chosen. Sweep order: $[0, 2, 1, 3]$.\n\nThe final sweep order for Test Case 1 is $[0, 2, 1, 3]$.\n\n**Test Case 2: Unstructured triangular chain, $\\hat{\\boldsymbol{s}} = (1, 1)$**\n\nThe cells are $\\{0, 1, 2\\}$. The direction vector is $\\hat{\\boldsymbol{s}} = (1, 1)$. The tie-breaking projections are:\n- $t_0 = (0, 0) \\cdot (1, 1) = 0$\n- $t_1 = (1, 1) \\cdot (1, 1) = 2$\n- $t_2 = (2, 2) \\cdot (1, 1) = 4$\n\nDependencies are determined by $\\hat{\\boldsymbol{s}} \\cdot \\boldsymbol{n}_{i,f}$:\n- For cell $1$, face with neighbor $0$: normal is $\\boldsymbol{n}_{1,f}=(-1, -1)$. $\\hat{\\boldsymbol{s}} \\cdot \\boldsymbol{n}_{1,f} = (1,1) \\cdot (-1,-1) = -2 < -\\varepsilon$. Dependency $0 \\to 1$.\n- For cell $2$, face with neighbor $1$: normal is $\\boldsymbol{n}_{2,f}=(-1, -1)$. $\\hat{\\boldsymbol{s}} \\cdot \\boldsymbol{n}_{2,f} = (1,1) \\cdot (-1,-1) = -2 < -\\varepsilon$. Dependency $1 \\to 2$.\n- Other faces are either outflow, tangential, or boundary inflow, creating no dependencies.\n\nThe graph is a simple chain: $0 \\to 1 \\to 2$. The initial in-degrees are: $ind(0)=0, ind(1)=1, ind(2)=1$.\n\nThe sort is straightforward as there are never multiple choices:\n1.  Initial queue: $\\{0\\}$. Choose $0$. Sweep order: $[0]$.\n2.  In-degree of cell $1$ becomes $0$. Queue: $\\{1\\}$. Choose $1$. Sweep order: $[0, 1]$.\n3.  In-degree of cell $2$ becomes $0$. Queue: $\\{2\\}$. Choose $2$. Sweep order: $[0, 1, 2]$.\n\nThe final sweep order for Test Case 2 is $[0, 1, 2]$.\n\n**Test Case 3: Tangential internal face, $\\hat{\\boldsymbol{s}} = (0, 1)$**\n\nThe cells are $\\{0, 1\\}$. The direction vector is $\\hat{\\boldsymbol{s}} = (0, 1)$. The tie-breaking projections are:\n- $t_0 = (0.5, 0.5) \\cdot (0, 1) = 0.5$\n- $t_1 = (1.5, 0.5) \\cdot (0, 1) = 0.5$\n\nThe face between cells $0$ and $1$ has normal $\\boldsymbol{n}_{0,f}=(+1,0)$ for cell $0$ and $\\boldsymbol{n}_{1,f}=(-1,0)$ for cell $1$.\n- For cell $0$: $\\hat{\\boldsymbol{s}} \\cdot \\boldsymbol{n}_{0,f} = (0,1) \\cdot (1,0) = 0$.\n- For cell $1$: $\\hat{\\boldsymbol{s}} \\cdot \\boldsymbol{n}_{1,f} = (0,1) \\cdot (-1,0) = 0$.\nBoth dot products are $0$, which fall within the tangential tolerance $[-\\varepsilon, +\\varepsilon]$. Therefore, this face creates no dependency. All other faces are either boundary inflow or outflow. The resulting dependency graph has no edges.\n\nThe initial in-degrees are $ind(0)=0$ and $ind(1)=0$.\n\nThe sort proceeds as follows:\n1.  Initial queue: $\\{0, 1\\}$. Tie-breaking: $t_0 = 0.5$ and $t_1 = 0.5$. Tie in projection. Secondary tie-breaker (cell ID): $0 < 1$. Cell $0$ is chosen. Sweep order: $[0]$.\n2.  The queue now contains only cell $1$. It is chosen. Sweep order: $[0, 1]$.\n\nThe final sweep order for Test Case 3 is $[0, 1]$.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef compute_sweep_schedule(cells, faces_per_cell, direction_vector, tolerance):\n    \"\"\"\n    Constructs a sweep schedule for the Discrete Ordinates Method.\n\n    This involves building a dependency graph based on upwinding rules for a given\n    sweep direction and then performing a topological sort on that graph with\n    specific tie-breaking rules.\n    \"\"\"\n    num_cells = len(cells)\n    cell_ids = sorted(cells.keys())\n    \n    # Use numpy arrays for vector operations\n    cell_centers = {cid: np.array(c) for cid, c in cells.items()}\n    s_vec = np.array(direction_vector)\n    \n    # 1. Calculate tie-breaking projections\n    projections = {cid: np.dot(cell_centers[cid], s_vec) for cid in cell_ids}\n    \n    # 2. Build the dependency graph\n    # Adjacency list: adj[j] contains list of cells i that depend on j (j -> i)\n    adj = {cid: [] for cid in cell_ids}\n    # In-degree for each cell\n    in_degrees = {cid: 0 for cid in cell_ids}\n    \n    for i in cell_ids:\n        for face_normal, neighbor_j in faces_per_cell[i]:\n            # A dependency j -> i is created if cell i has an inflow face\n            # from an internal neighbor j.\n            \n            # Boundary faces have neighbor_j as None and create no dependencies\n            if neighbor_j is None:\n                continue\n            \n            n_vec = np.array(face_normal)\n            dot_product = np.dot(s_vec, n_vec)\n            \n            # Inflow condition: s . n_i,f < -epsilon.\n            # Normal n_i,f is for cell i, neighbor is j.\n            # This means information flows from j to i. Add edge j -> i.\n            if dot_product < -tolerance:\n                adj[neighbor_j].append(i)\n                in_degrees[i] += 1\n                \n    # 3. Perform topological sort (Kahn's algorithm)\n    # The queue contains all cells with an in-degree of 0.\n    queue = [cid for cid in cell_ids if in_degrees[cid] == 0]\n    \n    sorted_order = []\n    \n    while queue:\n        # Sort the queue to apply tie-breaking rules:\n        # 1. Minimum projected coordinate t_i\n        # 2. Minimum cell identifier i\n        queue.sort(key=lambda cid: (projections[cid], cid))\n        \n        # Dequeue the cell with the highest priority (first in sorted list)\n        u = queue.pop(0)\n        sorted_order.append(u)\n        \n        # For each neighbor v of u, update in-degrees\n        # Graph stores u -> v, so v is a successor of u\n        for v in adj[u]:\n            in_degrees[v] -= 1\n            if in_degrees[v] == 0:\n                queue.append(v)\n                \n    # The graph must be a DAG, so the sort should include all cells.\n    if len(sorted_order) != num_cells:\n        # This should not occur for valid DOM sweep problems.\n        raise ValueError(\"The dependency graph contains a cycle.\")\n        \n    return sorted_order\n\ndef solve():\n    \"\"\"\n    Defines test cases and computes the sweep schedule for each.\n    \"\"\"\n    \n    # Define the tolerance for tangential flow\n    epsilon = 1e-12\n\n    # Test Case 1\n    cells_1 = {\n        0: (0.5, 0.5), 1: (1.5, 0.5),\n        2: (0.5, 1.5), 3: (1.5, 1.5)\n    }\n    faces_1 = {\n        0: [ ((-1.0, 0.0), None), ((1.0, 0.0), 1), ((0.0, -1.0), None), ((0.0, 1.0), 2) ],\n        1: [ ((-1.0, 0.0), 0),   ((1.0, 0.0), None),((0.0, -1.0), None), ((0.0, 1.0), 3) ],\n        2: [ ((-1.0, 0.0), None), ((1.0, 0.0), 3), ((0.0, -1.0), 0),   ((0.0, 1.0), None) ],\n        3: [ ((-1.0, 0.0), 2),   ((1.0, 0.0), None),((0.0, -1.0), 1),   ((0.0, 1.0), None) ]\n    }\n    direction_1 = (1.0, 0.0)\n\n    # Test Case 2\n    cells_2 = {\n        0: (0.0, 0.0), 1: (1.0, 1.0), 2: (2.0, 2.0)\n    }\n    faces_2 = {\n        0: [ ((1.0, 1.0), 1), ((-1.0, 0.0), None), ((0.0, -1.0), None) ],\n        1: [ ((-1.0, -1.0), 0), ((1.0, 1.0), 2), ((-1.0, 1.0), None) ],\n        2: [ ((-1.0, -1.0), 1), ((1.0, 0.0), None), ((0.0, 1.0), None) ]\n    }\n    direction_2 = (1.0, 1.0)\n    \n    # Test Case 3\n    cells_3 = {\n        0: (0.5, 0.5), 1: (1.5, 0.5)\n    }\n    faces_3 = {\n        0: [ ((-1.0, 0.0), None), ((1.0, 0.0), 1), ((0.0, -1.0), None), ((0.0, 1.0), None) ],\n        1: [ ((-1.0, 0.0), 0), ((1.0, 0.0), None), ((0.0, -1.0), None), ((0.0, 1.0), None) ]\n    }\n    direction_3 = (0.0, 1.0)\n    \n    test_cases = [\n        (cells_1, faces_1, direction_1),\n        (cells_2, faces_2, direction_2),\n        (cells_3, faces_3, direction_3)\n    ]\n\n    results = []\n    for cells, faces, direction in test_cases:\n        result = compute_sweep_schedule(cells, faces, direction, epsilon)\n        results.append(result)\n\n    # Format output as a string representation of a list of lists.\n    # e.g., [[0, 2, 1, 3],[0, 1, 2],[0, 1]]\n    output_str = \"[\" + \",\".join(map(str, results)) + \"]\"\n    \n    # Remove spaces for exact format matching\n    print(output_str.replace(\" \", \"\"))\n\nsolve()\n```", "id": "2528194"}, {"introduction": "A crucial step in adopting any new numerical method is to verify its accuracy against known analytical or limiting cases. In the absence of a participating medium (i.e., in a vacuum), the sophisticated machinery of the DOM should reduce to the classical theory of radiative exchange between surfaces, governed by view factors. This practice guides you to demonstrate this exact equivalence for a simple one-dimensional system, providing a powerful validation of the method's fundamental correctness and its connection to established heat transfer principles [@problem_id:2528258].", "problem": "You are asked to verify, from first principles, the equivalence between the Discrete Ordinates Method (DOM) and the classical view factor formulation for radiative exchange in the non-participating limit. Consider a one-dimensional vacuum cavity (a planar slab) bounded by two infinite, parallel, diffuse-gray, isothermal walls at positions $x=0$ (left wall) and $x=L$ (right wall). The space between the walls is vacuum (non-participating medium), and there is no refractive index jump. Let the left wall have emissivity $\\varepsilon_L$ and temperature $T_L$, and the right wall have emissivity $\\varepsilon_R$ and temperature $T_R$. The Stefan–Boltzmann constant is $\\sigma = 5.670374419\\times 10^{-8}\\ \\mathrm{W/m^2/K^4}$. All temperatures must be provided in $\\mathrm{K}$, and all heat fluxes must be reported in $\\mathrm{W/m^2}$.\n\nStarting from the radiative transfer equation in vacuum and the diffuse-gray boundary condition, do the following:\n\n1. Using the Discrete Ordinates Method (DOM) for a one-dimensional plane-parallel vacuum, discretize the angular domain by $N_\\mu$ ordinates using Gauss–Legendre quadrature in $\\mu\\in[0,1]$, where $\\mu=\\cos\\theta$ is the direction cosine with respect to the wall normal. In vacuum, the specific intensity $I(x,\\mu)$ is constant along a ray. At a diffuse-gray wall, the outgoing intensity is isotropic and given by $I_\\text{out} = J/\\pi$, where the radiosity $J$ satisfies $J=\\varepsilon\\sigma T^4 + (1-\\varepsilon)G$ and the irradiation $G$ satisfies $G=\\int_{\\Omega_i} I_\\text{in}\\cos\\theta\\,\\mathrm{d}\\Omega$, where $\\Omega_i$ is the incident hemisphere. For the two-wall slab, use the DOM quadrature to express the irradiations $G_L$ and $G_R$ at the left and right walls in terms of the opposite wall’s outgoing intensities and compute the net radiative heat flux at the left wall $q_L''=J_L-G_L$.\n\n2. Independently, compute the reference enclosure-theory result using the view factor solution for two infinite parallel plates in vacuum:\n$$\nq_\\text{VF}''=\\frac{\\sigma\\left(T_L^4-T_R^4\\right)}{\\dfrac{1}{\\varepsilon_L}+\\dfrac{1}{\\varepsilon_R}-1}.\n$$\n\n3. Compare the DOM-computed net heat flux at the left wall, $q_\\text{DOM}''$, to the view-factor heat flux $q_\\text{VF}''$ by returning the absolute difference $\\left|q_\\text{DOM}''-q_\\text{VF}''\\right|$ in $\\mathrm{W/m^2}$ for each test case.\n\nFundamental base and constraints you must use in your derivation and implementation:\n- Radiative Transfer Equation (RTE) in vacuum: along any direction $\\mathbf{s}$, $\\mathbf{s}\\cdot\\nabla I(\\mathbf{x},\\mathbf{s})=0$ (no emission, absorption, or scattering in the medium), so $I$ is constant along a ray.\n- Diffuse-gray wall boundary condition: the wall-leaving intensity is $I_\\text{out}=J/\\pi$ with $J=\\varepsilon\\sigma T^4+(1-\\varepsilon)G$, and $G=\\int_{\\Omega_i} I_\\text{in}\\cos\\theta\\,\\mathrm{d}\\Omega$.\n- Solid-angle integration identity for a constant intensity over a hemisphere: $\\int_{\\Omega_i}\\cos\\theta\\,\\mathrm{d}\\Omega=\\pi$.\n- Discrete ordinates (angular quadrature): approximate $\\int_0^1 f(\\mu)\\,\\mathrm{d}\\mu \\approx \\sum_{k=1}^{N_\\mu} w_k f(\\mu_k)$ using Gauss–Legendre nodes $\\mu_k\\in[0,1]$ and weights $w_k>0$.\n\nAngle units are not required because the discretization uses direction cosines $\\mu\\in[0,1]$. Length $L$ does not enter the result in vacuum for parallel infinite plates and should not be used.\n\nYour program must implement both computations and return the absolute difference in $\\mathrm{W/m^2}$ as a float for each of the specified test cases. Use the following test suite, each specified as $(T_L,\\varepsilon_L,T_R,\\varepsilon_R)$ with temperatures in $\\mathrm{K}$:\n- Test $1$: $(1200,0.8,800,0.6)$\n- Test $2$: $(1000,0.7,1000,0.9)$\n- Test $3$: $(400,1.0,300,1.0)$\n- Test $4$: $(1000,0.05,300,0.05)$\n- Test $5$: $(1500,1.0,300,0.3)$\n\nNumerical output requirements:\n- Express each returned value (absolute difference) in $\\mathrm{W/m^2}$.\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets (e.g., \"[a,b,c,d,e]\"). Each element must be a float.\n\nNo user input is allowed; all parameters are fixed as above and embedded in the program.", "solution": "The problem statement is subjected to validation. It is found to be scientifically grounded, well-posed, objective, and self-contained. It is a standard problem in radiative heat transfer theory, designed to demonstrate the equivalence of the discrete ordinates method and the view factor method in a simplified, non-participating medium scenario. The problem is valid and a solution will be provided.\n\nThe objective is to verify from first principles the equivalence between the Discrete Ordinates Method (DOM) and the classical view factor formulation for radiative exchange between two infinite, parallel, diffuse-gray walls separated by a vacuum.\n\nFirst, we derive the net radiative heat flux using the Discrete Ordinates Method.\nThe one-dimensional Radiative Transfer Equation (RTE) in a non-participating medium (vacuum) is given by:\n$$\n\\mu \\frac{dI(x,\\mu)}{dx} = 0\n$$\nwhere $I(x, \\mu)$ is the radiative intensity at position $x$ in the direction specified by the cosine $\\mu = \\cos\\theta$. This equation implies that for any given direction $\\mu$, the intensity $I$ is constant along its path.\n\nThe system consists of a left wall at $x=0$ and a right wall at $x=L$. The walls are diffuse and gray.\nThe intensity of radiation leaving the left wall (for directions $\\mu > 0$) is isotropic and given by $I_{L}^{+} = J_L/\\pi$, where $J_L$ is the radiosity of the left wall.\nSimilarly, the intensity of radiation leaving the right wall (for directions $\\mu < 0$) is $I_{R}^{-} = J_R/\\pi$.\n\nDue to the vacuum between the plates, the intensity incident on the right wall is the same as that which left the left wall: $I_{\\text{in},R}(\\mu > 0) = I_{L}^{+} = J_L/\\pi$.\nLikewise, the intensity incident on the left wall is the same as that which left the right wall: $I_{\\text{in},L}(\\mu < 0) = I_{R}^{-} = J_R/\\pi$.\n\nThe irradiation $G$ on a surface is the incident radiative flux, defined as $G = \\int_{\\Omega_i} I_{\\text{in}} \\cos\\theta \\, d\\Omega$, where the integral is over the incident hemisphere $\\Omega_i$. For a planar surface, this becomes:\n$$\nG = \\int_0^{2\\pi} d\\phi \\int_0^1 I_{\\text{in}}(\\mu) \\mu \\, d\\mu = 2\\pi \\int_0^1 I_{\\text{in}}(\\mu) \\mu \\, d\\mu\n$$\nThe irradiation on the left wall, $G_L$, is due to intensity from the right wall. Since $I_{\\text{in},L}$ is constant ($J_R/\\pi$) over the entire hemisphere of incident directions, we have:\n$$\nG_L = 2\\pi \\int_0^1 \\left(\\frac{J_R}{\\pi}\\right) \\mu \\, d\\mu = 2J_R \\int_0^1 \\mu \\, d\\mu = 2J_R \\left[\\frac{\\mu^2}{2}\\right]_0^1 = J_R\n$$\nUsing the discrete ordinates quadrature as specified, $G_L$ is approximated as:\n$$\nG_L \\approx 2\\pi \\sum_{k=1}^{N_\\mu} w_k I_{\\text{in},L}(\\mu_k) \\mu_k = 2\\pi \\sum_{k=1}^{N_\\mu} w_k \\left(\\frac{J_R}{\\pi}\\right) \\mu_k = 2J_R \\sum_{k=1}^{N_\\mu} w_k \\mu_k\n$$\nThe summation term is the Gauss-Legendre quadrature approximation for the integral $\\int_0^1 \\mu \\, d\\mu = 1/2$. A Gauss-Legendre quadrature of order $N_\\mu$ is exact for polynomials of degree up to $2N_\\mu - 1$. Since the integrand is a polynomial of degree $1$, the quadrature is exact for any $N_\\mu \\ge 1$. Thus, $\\sum_{k=1}^{N_\\mu} w_k \\mu_k = 1/2$. The DOM result is exact: $G_L = 2J_R(1/2) = J_R$.\nBy symmetry, the irradiation on the right wall is $G_R = J_L$.\n\nThe radiosities $J_L$ and $J_R$ are defined by the diffuse-gray wall boundary condition: $J = \\varepsilon \\sigma T^4 + (1-\\varepsilon)G$. This yields a system of two linear equations for the two unknown radiosities:\n$$\nJ_L = \\varepsilon_L \\sigma T_L^4 + (1-\\varepsilon_L)G_L = \\varepsilon_L \\sigma T_L^4 + (1-\\varepsilon_L)J_R \\\\\nJ_R = \\varepsilon_R \\sigma T_R^4 + (1-\\varepsilon_R)G_R = \\varepsilon_R \\sigma T_R^4 + (1-\\varepsilon_R)J_L\n$$\nWe solve this system for $J_L$ and $J_R$. Substituting the second equation into the first:\n$$\nJ_L = \\varepsilon_L \\sigma T_L^4 + (1-\\varepsilon_L)[\\varepsilon_R \\sigma T_R^4 + (1-\\varepsilon_R)J_L]\n$$\n$$\nJ_L[1 - (1-\\varepsilon_L)(1-\\varepsilon_R)] = \\varepsilon_L \\sigma T_L^4 + (1-\\varepsilon_L)\\varepsilon_R \\sigma T_R^4\n$$\nThe term in brackets simplifies to $1 - (1 - \\varepsilon_L - \\varepsilon_R + \\varepsilon_L\\varepsilon_R) = \\varepsilon_L + \\varepsilon_R - \\varepsilon_L\\varepsilon_R$. So,\n$$\nJ_L = \\frac{\\varepsilon_L \\sigma T_L^4 + (1-\\varepsilon_L)\\varepsilon_R \\sigma T_R^4}{\\varepsilon_L + \\varepsilon_R - \\varepsilon_L\\varepsilon_R}\n$$\nBy symmetry, swapping indices $L$ and $R$:\n$$\nJ_R = \\frac{\\varepsilon_R \\sigma T_R^4 + (1-\\varepsilon_R)\\varepsilon_L \\sigma T_L^4}{\\varepsilon_L + \\varepsilon_R - \\varepsilon_L\\varepsilon_R}\n$$\nThe net radiative heat flux at the left wall is the difference between the outgoing flux (radiosity) and the incoming flux (irradiation):\n$$\nq_{L, \\text{DOM}}'' = J_L - G_L = J_L - J_R\n$$\nSubstituting the expressions for $J_L$ and $J_R$:\n$$\nq_{L, \\text{DOM}}'' = \\frac{(\\varepsilon_L \\sigma T_L^4 + (1-\\varepsilon_L)\\varepsilon_R \\sigma T_R^4) - (\\varepsilon_R \\sigma T_R^4 + (1-\\varepsilon_R)\\varepsilon_L \\sigma T_L^4)}{\\varepsilon_L + \\varepsilon_R - \\varepsilon_L\\varepsilon_R}\n$$\n$$\nq_{L, \\text{DOM}}'' = \\frac{\\sigma T_L^4(\\varepsilon_L - (1-\\varepsilon_R)\\varepsilon_L) - \\sigma T_R^4(\\varepsilon_R - (1-\\varepsilon_L)\\varepsilon_R)}{\\varepsilon_L + \\varepsilon_R - \\varepsilon_L\\varepsilon_R}\n$$\n$$\nq_{L, \\text{DOM}}'' = \\frac{\\sigma T_L^4(\\varepsilon_L - \\varepsilon_L + \\varepsilon_L\\varepsilon_R) - \\sigma T_R^4(\\varepsilon_R - \\varepsilon_R + \\varepsilon_L\\varepsilon_R)}{\\varepsilon_L + \\varepsilon_R - \\varepsilon_L\\varepsilon_R}\n$$\n$$\nq_{L, \\text{DOM}}'' = \\frac{\\varepsilon_L\\varepsilon_R \\sigma (T_L^4 - T_R^4)}{\\varepsilon_L + \\varepsilon_R - \\varepsilon_L\\varepsilon_R}\n$$\nThis is the final expression for the net heat flux at the left wall derived from the DOM formulation.\n\nNext, we examine the provided view factor formula for two infinite parallel plates:\n$$\nq_\\text{VF}'' = \\frac{\\sigma(T_L^4 - T_R^4)}{\\frac{1}{\\varepsilon_L} + \\frac{1}{\\varepsilon_R} - 1}\n$$\nTo compare this with the DOM result, we simplify the denominator:\n$$\n\\frac{1}{\\varepsilon_L} + \\frac{1}{\\varepsilon_R} - 1 = \\frac{\\varepsilon_R + \\varepsilon_L - \\varepsilon_L\\varepsilon_R}{\\varepsilon_L\\varepsilon_R}\n$$\nSubstituting this into the view factor expression:\n$$\nq_\\text{VF}'' = \\sigma(T_L^4 - T_R^4) \\left( \\frac{\\varepsilon_L\\varepsilon_R}{\\varepsilon_L + \\varepsilon_R - \\varepsilon_L\\varepsilon_R} \\right) = \\frac{\\varepsilon_L\\varepsilon_R \\sigma (T_L^4 - T_R^4)}{\\varepsilon_L + \\varepsilon_R - \\varepsilon_L\\varepsilon_R}\n$$\nThe expressions for $q_{L, \\text{DOM}}''$ and $q_\\text{VF}''$ are analytically identical. Therefore, their absolute difference $|q_{L, \\text{DOM}}'' - q_\\text{VF}''|$ is exactly zero, independent of the parameter values. The DOM formulation correctly recovers the classical enclosure theory result in this limiting case. Any numerical computation should yield a difference of zero, or a value on the order of machine precision due to floating-point arithmetic.", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Verifies the equivalence between the Discrete Ordinates Method (DOM) and\n    the view factor formulation for radiative exchange between two infinite\n    parallel plates in a vacuum.\n    \"\"\"\n    # Stefan-Boltzmann constant in W/m^2/K^4\n    sigma = 5.670374419e-8\n\n    # Test cases: (T_L, eps_L, T_R, eps_R)\n    # T in Kelvin\n    # eps is dimensionless emissivity\n    test_cases = [\n        (1200.0, 0.8, 800.0, 0.6),\n        (1000.0, 0.7, 1000.0, 0.9),\n        (400.0, 1.0, 300.0, 1.0),\n        (1000.0, 0.05, 300.0, 0.05),\n        (1500.0, 1.0, 300.0, 0.3),\n    ]\n\n    results = []\n\n    for case in test_cases:\n        T_L, eps_L, T_R, eps_R = case\n\n        # Part 1: Calculation using the derived DOM formulation result.\n        # q_DOM = [eps_L * eps_R * sigma * (T_L^4 - T_R^4)] / [eps_L + eps_R - eps_L * eps_R]\n        \n        # Check for division by zero, although not possible for physical emissivities (0 < eps <= 1)\n        # unless both are zero, which is unphysical.\n        # The denominator is eps_L + eps_R * (1 - eps_L) which is positive.\n        q_dom_numerator = eps_L * eps_R * sigma * (T_L**4 - T_R**4)\n        q_dom_denominator = eps_L + eps_R - eps_L * eps_R\n        q_dom = q_dom_numerator / q_dom_denominator\n\n        # Part 2: Calculation using the classical View Factor (enclosure theory) result.\n        # q_VF = [sigma * (T_L^4 - T_R^4)] / [1/eps_L + 1/eps_R - 1]\n        \n        # Denominator of View Factor formulation\n        q_vf_denominator = (1.0 / eps_L) + (1.0 / eps_R) - 1.0\n        \n        # Check for division by zero in the view factor formula.\n        # This occurs if 1/eps_L + 1/eps_R = 1, e.g. eps_L=2, eps_R=2, unphysical.\n        # For physical eps values in (0, 1], the denominator is always >= 1.\n        if q_vf_denominator == 0:\n            # Handle cases where emissivities are such that the denominator is zero.\n            # This is physically not expected for eps in [0, 1] unless as a limit.\n            # If both T_L and T_R are equal, flux is 0. Otherwise, it might be infinite.\n            if T_L == T_R:\n                q_vf = 0.0\n            else:\n                # This case should not be reached with physical emissivities.\n                q_vf = float('inf') * np.sign(T_L - T_R)\n        else:\n            q_vf = (sigma * (T_L**4 - T_R**4)) / q_vf_denominator\n\n        # Part 3: Compute the absolute difference.\n        # Due to algebraic equivalence, this should be 0.0 or near machine precision.\n        abs_diff = abs(q_dom - q_vf)\n        results.append(abs_diff)\n        \n    # Format the results into the required string format\n    # \"[result1,result2,result3,result4,result5]\"\n    # Using 'g' format specifier to represent floats cleanly.\n    print(f\"[{','.join(f'{r:.1f}' for r in results)}]\")\n\nsolve()\n```", "id": "2528258"}]}