{"hands_on_practices": [{"introduction": "This first practice provides a foundational exercise in cooling tower design by implementing the Merkel method from first principles. You will develop a numerical procedure to calculate the required tower capacity, represented by the volumetric transfer product $K_a a_v V$, for a specified thermal duty. This hands-on problem reinforces the connection between conservation laws, psychrometric properties, and the numerical integration techniques used to size heat and mass transfer equipment [@problem_id:2474416].", "problem": "You are asked to implement a numerically robust procedure, based on the Merkel integral, to compute the required product of overall volumetric mass transfer coefficient, interfacial area per unit volume, and tower volume, denoted by $K_a a_v V$, for a counterflow evaporative cooling tower that rejects a specified heat load to an air stream. Your procedure must start from conservation principles and standard psychrometric relations, and must not rely on any pre-tabulated tower performance correlations. All physical inputs use the International System of Units (SI), and all outputs must be reported in the specified SI units.\n\nThe physical setting uses the following modeling bases and assumptions:\n- Conservation of energy for a differential tower slice and steady operation.\n- The Merkel method with the Lewis factor (ratio of heat to mass transfer analog coefficients) assumed equal to unity, and negligible heat capacity of liquid-vapor interfaces.\n- Air is treated as an ideal mixture of Dry Air (DA) and water vapor with standard psychrometric relationships at a uniform total pressure.\n- Water specific heat is treated as constant over the temperature range of interest.\n\nYour program must implement the following fundamental relations and steps:\n\n1. Define the water-side heat flow rate as $Q$ in watts ($\\mathrm{W}$), the inlet and outlet water temperatures as $T_{w,\\mathrm{in}}$ and $T_{w,\\mathrm{out}}$ in degrees Celsius ($^{\\circ}\\mathrm{C}$), the inlet air dry-bulb temperature as $T_{a,\\mathrm{in}}$ in degrees Celsius ($^{\\circ}\\mathrm{C}$), the inlet air relative humidity as $\\phi_{\\mathrm{in}}$ in decimal fraction (e.g., $0.50$ for fifty percent), the total static pressure as $P$ in pascals ($\\mathrm{Pa}$), and the dry-air mass flow rate as $G$ in kilograms per second ($\\mathrm{kg/s}$). The volumetric product $K_a a_v V$ must be reported in kilograms of dry air per second ($\\mathrm{kg/s}$).\n\n2. Compute the water-side heat capacity rate\n$$\nL \\equiv \\dot{m}_w c_{p,w} = \\frac{Q}{\\Delta T_w}, \\quad \\Delta T_w \\equiv T_{w,\\mathrm{in}} - T_{w,\\mathrm{out}},\n$$\nwith $c_{p,w}$ taken constant and absorbed into $L$ by definition as is standard in the Merkel method. Note that $L$ has units of $\\mathrm{W/K}$.\n\n3. Use conservation of energy on a differential slice and the Merkel driving potential to write\n$$\nL\\,\\mathrm{d}T_w = K_a a_v \\left(h_s(T_w) - h_a\\right)\\,\\mathrm{d}V,\n$$\nwhere $h_s(T_w)$ is the specific enthalpy of saturated moist air (per unit mass of dry air) at the interface temperature equal to the local water temperature $T_w$, and $h_a$ is the bulk moist air enthalpy (per unit mass of dry air). The corresponding air-side energy balance gives\n$$\nG\\,\\mathrm{d}h_a = K_a a_v \\left(h_s(T_w) - h_a\\right)\\,\\mathrm{d}V.\n$$\nEliminate $\\mathrm{d}V$ to obtain the operating line slope\n$$\n\\frac{\\mathrm{d}h_a}{\\mathrm{d}T_w} = \\frac{L}{G}.\n$$\nWith the counterflow boundary condition that the inlet air at the tower bottom contacts the outlet water, the bulk air enthalpy along the tower varies linearly with the local water temperature as\n$$\nh_a(T_w) = h_{a,\\mathrm{in}} + \\frac{L}{G}\\,\\left(T_w - T_{w,\\mathrm{out}}\\right),\n$$\nwhere $h_{a,\\mathrm{in}}$ is the inlet air enthalpy.\n\n4. Integrate the differential energy balance to obtain the Merkel integral for the required volumetric capacity:\n$$\nK_a a_v V \\;=\\; L \\int_{T_{w,\\mathrm{out}}}^{T_{w,\\mathrm{in}}} \\frac{\\mathrm{d}T_w}{h_s(T_w) - h_a(T_w)}.\n$$\nThis integral must be evaluated numerically.\n\n5. Implement standard psychrometric relations to compute $h_{a,\\mathrm{in}}$ and $h_s(T_w)$:\n- Saturation vapor pressure over liquid water (valid over $T \\in [0,50]\\,^{\\circ}\\mathrm{C}$) by the Magnus-type relation\n$$\np_{ws}(T) = 610.94\\,\\exp\\left(\\frac{17.625\\,T}{T+243.04}\\right)\\quad\\text{(Pa)},\n$$\nwith $T$ in $^{\\circ}\\mathrm{C}$.\n- Humidity ratio at given $T$ and relative humidity $\\phi$:\n$$\nW(T,\\phi,P) = \\frac{0.62198\\,\\phi\\,p_{ws}(T)}{P - \\phi\\,p_{ws}(T)}\\quad(\\text{kg vapor}/\\text{kg dry air}).\n$$\n- Humidity ratio at saturation at the interface temperature:\n$$\nW_s(T,P) = \\frac{0.62198\\,p_{ws}(T)}{P - p_{ws}(T)}.\n$$\n- Moist air specific enthalpy per unit mass of dry air (with $h=0$ at $T=0\\,^{\\circ}\\mathrm{C}$ and zero humidity), using the widely adopted linearized form:\n$$\nh(T,W) = 1000\\left(1.006\\,T + W\\left(2501 + 1.86\\,T\\right)\\right)\\quad\\text{(J/kg dry air)},\n$$\nwith $T$ in $^{\\circ}\\mathrm{C}$. For the saturation enthalpy at the interface, set $W=W_s(T,P)$ and $T=T_w$:\n$$\nh_s(T_w) = h\\left(T_w,\\,W_s(T_w,P)\\right).\n$$\n\n6. Numerical evaluation details:\n- Discretize the water temperature interval $[T_{w,\\mathrm{out}},\\,T_{w,\\mathrm{in}}]$ into a sufficiently fine uniform grid, compute the integrand $1/\\left(h_s(T_w)-h_a(T_w)\\right)$ at each grid point, and integrate by the composite trapezoidal rule.\n- For physical realism, ensure $h_s(T_w) - h_a(T_w) > 0$ over the range; otherwise, the inputs are unphysical for the Merkel method.\n\nInput units and output requirement:\n- Inputs per test case: $Q$ in $\\mathrm{W}$, $T_{w,\\mathrm{in}}$ in $^{\\circ}\\mathrm{C}$, $T_{w,\\mathrm{out}}$ in $^{\\circ}\\mathrm{C}$, $T_{a,\\mathrm{in}}$ in $^{\\circ}\\mathrm{C}$, $\\phi_{\\mathrm{in}}$ as a decimal, $P$ in $\\mathrm{Pa}$, and $G$ in $\\mathrm{kg/s}$.\n- Output per test case: the required $K_a a_v V$ in $\\mathrm{kg/s}$, rounded to three decimal places.\n\nTest suite:\nProvide results for the following five parameter sets. Each set is given as an ordered $7$-tuple $(Q,\\,T_{w,\\mathrm{in}},\\,T_{w,\\mathrm{out}},\\,T_{a,\\mathrm{in}},\\,\\phi_{\\mathrm{in}},\\,P,\\,G)$:\n- Case $1$ (general): $(5.0\\times 10^{6},\\,40.0,\\,30.0,\\,25.0,\\,0.50,\\,101325.0,\\,500.0)$.\n- Case $2$ (humid inlet air): $(2.0\\times 10^{6},\\,35.0,\\,28.0,\\,28.0,\\,0.90,\\,101325.0,\\,300.0)$.\n- Case $3$ (high altitude): $(3.0\\times 10^{6},\\,45.0,\\,32.0,\\,20.0,\\,0.40,\\,85000.0,\\,600.0)$.\n- Case $4$ (large air flow, nearly flat operating line): $(1.0\\times 10^{6},\\,40.0,\\,35.0,\\,20.0,\\,0.50,\\,101325.0,\\,2000.0)$.\n- Case $5$ (small air flow, steep operating line): $(1.0\\times 10^{6},\\,40.0,\\,32.0,\\,25.0,\\,0.50,\\,101325.0,\\,100.0)$.\n\nProgram output format:\nYour program should produce a single line of output containing the five computed $K_a a_v V$ values as a comma-separated list enclosed in square brackets, in the same order as the test suite and rounded to three decimal places; for example, $[x_1,x_2,x_3,x_4,x_5]$ with each $x_i$ in $\\mathrm{kg/s}$.", "solution": "The problem statement submitted for analysis is clear, scientifically sound, and well-posed. It presents a standard engineering task in the field of heat and mass transfer: the sizing of a counterflow cooling tower using the established Merkel method. All necessary physical principles, constitutive relations, and boundary conditions are provided, and the required numerical procedure is specified unambiguously. The problem is free from contradictions, subjective claims, or factual inaccuracies, and its parameters are within a physically plausible range. Thus, I deem the problem valid and will proceed with a rigorous solution.\n\nThe core of the problem lies in the evaluation of the Merkel integral, which quantifies the required \"size\" or \"capacity\" of the cooling tower, represented by the product $K_a a_v V$. This quantity is derived from fundamental principles of energy and mass conservation applied to a differential control volume within the tower.\n\nFirst, we establish the energy balance. The heat rejected by the water stream, $L\\,\\mathrm{d}T_w$, must be transferred to the air stream. In the Merkel model, this transfer is driven by the difference in specific enthalpy between saturated air at the water-air interface, $h_s(T_w)$, and the bulk air, $h_a$. This leads to the differential rate equation for a slice of tower volume $\\mathrm{d}V$:\n$$\nL\\,\\mathrm{d}T_w = K_a a_v \\left(h_s(T_w) - h_a\\right)\\,\\mathrm{d}V\n$$\nHere, $L$ is the water-side heat capacity rate, $L = \\frac{Q}{T_{w,\\mathrm{in}} - T_{w,\\mathrm{out}}}$, having units of $\\mathrm{W/K}$ or $\\mathrm{J/(s \\cdot K)}$. The term $K_a a_v$ is the overall volumetric mass transfer coefficient, with units of $\\mathrm{kg/(s \\cdot m^3)}$.\n\nSimultaneously, the energy gained by the air stream as it passes through the same differential volume is given by:\n$$\nG\\,\\mathrm{d}h_a = K_a a_v \\left(h_s(T_w) - h_a\\right)\\,\\mathrm{d}V\n$$\nwhere $G$ is the mass flow rate of dry air in $\\mathrm{kg/s}$.\n\nBy equating the right-hand sides of these two energy balances, we find the relationship between the change in air enthalpy and the change in water temperature:\n$$\nL\\,\\mathrm{d}T_w = G\\,\\mathrm{d}h_a \\implies \\frac{\\mathrm{d}h_a}{\\mathrm{d}T_w} = \\frac{L}{G}\n$$\nThis linear relationship defines the \"operating line\" of the cooling tower. Integrating this from the bottom of the tower (where air enters at $h_{a,\\mathrm{in}}$ and water leaves at $T_{w,\\mathrm{out}}$) to an arbitrary point in the tower with local water temperature $T_w$ and air enthalpy $h_a(T_w)$ yields:\n$$\nh_a(T_w) - h_{a,\\mathrm{in}} = \\frac{L}{G} (T_w - T_{w,\\mathrm{out}})\n$$\n$$\nh_a(T_w) = h_{a,\\mathrm{in}} + \\frac{L}{G} (T_w - T_{w,\\mathrm{out}})\n$$\nThis equation provides the bulk air enthalpy at any point in the tower as a function of the local water temperature.\n\nTo find the required tower capacity, we rearrange the water-side energy balance and integrate over the entire tower height, which corresponds to the water temperature changing from $T_{w,\\mathrm{out}}$ to $T_{w,\\mathrm{in}}$:\n$$\n\\frac{\\mathrm{d}T_w}{h_s(T_w) - h_a(T_w)} = \\frac{K_a a_v}{L} \\mathrm{d}V\n$$\nAssuming $K_a a_v$ is constant throughout the tower, integration gives:\n$$\n\\int_{T_{w,\\mathrm{out}}}^{T_{w,\\mathrm{in}}} \\frac{\\mathrm{d}T_w}{h_s(T_w) - h_a(T_w)} = \\frac{K_a a_v}{L} \\int_0^V \\mathrm{d}V = \\frac{K_a a_v V}{L}\n$$\nRearranging for the desired product $K_a a_v V$ yields the Merkel integral:\n$$\nK_a a_v V = L \\int_{T_{w,\\mathrm{out}}}^{T_{w,\\mathrm{in}}} \\frac{\\mathrm{d}T_w}{h_s(T_w) - h_a(T_w)}\n$$\nThe units of this quantity are $(\\mathrm{J/(s \\cdot K)}) \\cdot (\\mathrm{K / (J/kg)}) = \\mathrm{kg/s}$, as correctly stated in the problem.\n\nThe evaluation requires expressions for the enthalpies $h_s(T_w)$ and $h_a(T_w)$. This necessitates the use of standard psychrometric relations. The sequence of calculation is as follows:\n1.  Calculate the saturation vapor pressure $p_{ws}(T)$ at a given temperature $T$ (in $^{\\circ}\\mathrm{C}$) using the provided Magnus-type formula:\n    $$\n    p_{ws}(T) = 610.94\\,\\exp\\left(\\frac{17.625\\,T}{T+243.04}\\right)\n    $$\n2.  Calculate the humidity ratio $W$. For unsaturated air with relative humidity $\\phi$ at pressure $P$:\n    $$\n    W(T,\\phi,P) = \\frac{0.62198\\,\\phi\\,p_{ws}(T)}{P - \\phi\\,p_{ws}(T)}\n    $$\n    For saturated air at the water interface, $\\phi=1$, and the humidity ratio $W_s$ is:\n    $$\n    W_s(T_w,P) = \\frac{0.62198\\,p_{ws}(T_w)}{P - p_{ws}(T_w)}\n    $$\n3.  Calculate the moist air specific enthalpy $h$ (in $\\mathrm{J/kg}$ dry air) given $T$ (in $^{\\circ}\\mathrm{C}$) and $W$:\n    $$\n    h(T,W) = 1000\\left(1.006\\,T + W\\left(2501 + 1.86\\,T\\right)\\right)\n    $$\n4.  The specific enthalpies for the Merkel integral are then:\n    -   $h_{a,\\mathrm{in}} = h(T_{a,\\mathrm{in}}, W(T_{a,\\mathrm{in}}, \\phi_{\\mathrm{in}}, P))$\n    -   $h_a(T_w) = h_{a,\\mathrm{in}} + \\frac{L}{G} (T_w - T_{w,\\mathrm{out}})$\n    -   $h_s(T_w) = h(T_w, W_s(T_w, P))$\n\nThe definite integral is computed numerically. The interval of integration $[T_{w,\\mathrm{out}}, T_{w,\\mathrm{in}}]$ is discretized into a uniform grid of points. The value of the integrand, $\\frac{1}{h_s(T_w) - h_a(T_w)}$, is calculated at each grid point. The composite trapezoidal rule is then applied to these values to approximate the integral. A sufficiently large number of grid points, such as $1000$ or more, ensures high accuracy.\n\nThe implementation will consist of helper functions for the psychrometric calculations and a main function to orchestrate the steps for each test case: calculation of $L$, determination of the inlet air enthalpy $h_{a,in}$, numerical integration over the water temperature range, and final computation of $K_a a_v V$.", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the cooling tower performance problem for a suite of test cases\n    based on the Merkel integral method.\n    \"\"\"\n\n    def p_ws(T_celsius):\n        \"\"\"\n        Calculates saturation vapor pressure over liquid water.\n        :param T_celsius: Temperature in degrees Celsius.\n        :return: Saturation pressure in Pascals.\n        \"\"\"\n        return 610.94 * np.exp((17.625 * T_celsius) / (T_celsius + 243.04))\n\n    def W_hum(T_celsius, phi, P_pascal):\n        \"\"\"\n        Calculates humidity ratio for given relative humidity.\n        :param T_celsius: Dry-bulb temperature in degrees Celsius.\n        :param phi: Relative humidity as a decimal fraction.\n        :param P_pascal: Total pressure in Pascals.\n        :return: Humidity ratio in kg vapor / kg dry air.\n        \"\"\"\n        p_v = phi * p_ws(T_celsius)\n        return (0.62198 * p_v) / (P_pascal - p_v)\n\n    def W_sat(T_celsius, P_pascal):\n        \"\"\"\n        Calculates humidity ratio at saturation.\n        :param T_celsius: Temperature in degrees Celsius.\n        :param P_pascal: Total pressure in Pascals.\n        :return: Saturated humidity ratio in kg vapor / kg dry air.\n        \"\"\"\n        p_sat = p_ws(T_celsius)\n        return (0.62198 * p_sat) / (P_pascal - p_sat)\n\n    def h_air(T_celsius, W_kg_per_kg):\n        \"\"\"\n        Calculates moist air specific enthalpy.\n        :param T_celsius: Temperature in degrees Celsius.\n        :param W_kg_per_kg: Humidity ratio in kg vapor / kg dry air.\n        :return: Specific enthalpy in J / kg dry air.\n        \"\"\"\n        return 1000.0 * (1.006 * T_celsius + W_kg_per_kg * (2501.0 + 1.86 * T_celsius))\n\n    def calculate_kavV(params):\n        \"\"\"\n        Calculates the required KaV for a single cooling tower case.\n        :param params: A tuple containing (Q, Tw_in, Tw_out, Ta_in, phi_in, P, G).\n        :return: The volumetric product KaV in kg/s.\n        \"\"\"\n        Q, Tw_in, Tw_out, Ta_in, phi_in, P, G = params\n        \n        # 1. Compute water-side heat capacity rate L\n        if Tw_in <= Tw_out:\n            # Physically impossible for cooling, avoids division by zero or negative\n            return float('nan') \n        L = Q / (Tw_in - Tw_out)\n\n        # 2. Compute inlet air properties\n        W_in = W_hum(Ta_in, phi_in, P)\n        h_a_in = h_air(Ta_in, W_in)\n\n        # 3. Define the integrand for the Merkel integral\n        def integrand(Tw):\n            # Enthalpy of saturated air at the interface (water) temperature\n            h_s_Tw = h_air(Tw, W_sat(Tw, P))\n            \n            # Enthalpy of bulk air from the operating line\n            h_a_Tw = h_a_in + (L / G) * (Tw - Tw_out)\n            \n            driving_force = h_s_Tw - h_a_Tw\n            if driving_force <= 0:\n                # Unphysical condition, integral would diverge or be invalid.\n                # In a robust implementation, this would raise an error.\n                # For this problem, we assume valid inputs as per validation.\n                return np.inf\n                \n            return 1.0 / driving_force\n\n        # 4. Numerical integration using the composite trapezoidal rule\n        num_steps = 2000  # Number of steps for integration, ensures high accuracy\n        Tw_grid = np.linspace(Tw_out, Tw_in, num_steps + 1)\n        \n        integrand_values = np.array([integrand(T) for T in Tw_grid])\n        \n        # Use numpy.trapz for integration\n        integral_val = np.trapz(integrand_values, Tw_grid)\n\n        # 5. Compute the final result\n        KaV = L * integral_val\n        \n        return KaV\n\n    # Define the test cases from the problem statement.\n    test_cases = [\n        # (Q,      Tw_in, Tw_out, Ta_in, phi_in, P,       G)\n        (5.0e6, 40.0,  30.0,   25.0,  0.50,   101325.0, 500.0), # Case 1\n        (2.0e6, 35.0,  28.0,   28.0,  0.90,   101325.0, 300.0), # Case 2\n        (3.0e6, 45.0,  32.0,   20.0,  0.40,   85000.0,  600.0), # Case 3\n        (1.0e6, 40.0,  35.0,   20.0,  0.50,   101325.0, 2000.0),# Case 4\n        (1.0e6, 40.0,  32.0,   25.0,  0.50,   101325.0, 100.0), # Case 5\n    ]\n\n    results = []\n    for case in test_cases:\n        result = calculate_kavV(case)\n        results.append(f\"{result:.3f}\")\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2474416"}, {"introduction": "Building upon the integral approach, this exercise delves into a more detailed differential analysis of tower performance. Instead of calculating a single sizing parameter, you will numerically solve the coupled governing equations to determine the complete temperature and enthalpy profiles along the tower's height. This practice introduces the challenge of solving a two-point boundary value problem, a common task in transport phenomena, and demonstrates how to model spatially varying properties for a more realistic simulation [@problem_id:2474377].", "problem": "You are asked to build a complete numerical model of a counterflow wet cooling tower based on the Merkel method, but without assuming a constant driving force. Instead, you must couple conservation laws with a psychrometric property model to compute the local driving enthalpy difference and a height-varying volumetric mass/enthalpy transfer coefficient. The goal is to evaluate the cold water outlet temperature under a realistic, spatially varying driving force and to compare it to a naive constant-driving-force approximation.\n\nStart from a fundamental base valid for heat and mass transfer in wet cooling towers:\n- Conservation of energy for the falling liquid water film.\n- Conservation of energy for the gas phase based on dry-air mass conservation.\n- The Merkel assumption that the interfacial air is saturated at the local liquid water temperature.\n- Unity Lewis number and negligible heat losses to the surroundings.\n- Well-tested ideal-gas psychrometric relations linking water vapor saturation pressure, humidity ratio, and moist-air enthalpy at a specified total pressure.\n\nModel assumptions and definitions (all symbols are written in LaTeX):\n- Consider a counterflow tower of height $H$ with coordinate $z$ measured from the water inlet at the top ($z=0$) to the air inlet at the bottom ($z=H$).\n- Use a per-unit-cross-sectional-area basis. Let $L$ be the liquid water mass flow rate per unit cross-sectional area in $\\mathrm{kg}\\,\\mathrm{s}^{-1}\\,\\mathrm{m}^{-2}$, and let $G$ be the dry-air mass flow rate per unit cross-sectional area in $\\mathrm{kg}\\,\\mathrm{s}^{-1}\\,\\mathrm{m}^{-2}$. Treat $L$ and $G$ as constants for purposes of the energy balances.\n- Let $T_w(z)$ be the liquid water temperature in $\\mathrm{^\\circ C}$ and $h_a(z)$ be the moist-air specific enthalpy in $\\mathrm{kJ}\\,\\mathrm{kg}^{-1}\\,(\\text{dry air})$.\n- The local interfacial enthalpy under the Merkel assumption is $h_s^\\star(T_w,P) = h_a\\!\\left(T=T_w,\\,W=W_s(T_w,P)\\right)$ where $W_s$ is the saturation humidity ratio at $T_w$ and total pressure $P$.\n\nPsychrometric property model to implement:\n- Total pressure $P$ is given in $\\mathrm{kPa}$ and is spatially uniform.\n- Saturation vapor pressure as a function of temperature $T$ in $\\mathrm{^\\circ C}$: use the Magnus-type correlation\n$$ p_{ws}(T) = 0.61078 \\exp\\!\\left(\\frac{17.2694\\,T}{T+237.3}\\right) \\quad \\text{in } \\mathrm{kPa}, $$\nvalid for $T$ in a typical cooling tower range.\n- Saturation humidity ratio\n$$ W_s(T,P) = 0.62198\\,\\frac{p_{ws}(T)}{P - p_{ws}(T)}. $$\n- For a moist air state with dry-bulb temperature $T$ in $\\mathrm{^\\circ C}$ and humidity ratio $W$ in $\\mathrm{kg}\\,\\mathrm{kg}^{-1}$ (water per dry air), the specific enthalpy (per unit dry air) is\n$$ h_a(T,W) = c_{p,a}\\,T + W\\left(h_{fg,0} + c_{p,v}\\,T\\right) \\quad \\text{in } \\mathrm{kJ}\\,\\mathrm{kg}^{-1}, $$\nwith $c_{p,a} = 1.006$ in $\\mathrm{kJ}\\,\\mathrm{kg}^{-1}\\,\\mathrm{K}^{-1}$, $c_{p,v} = 1.86$ in $\\mathrm{kJ}\\,\\mathrm{kg}^{-1}\\,\\mathrm{K}^{-1}$, and $h_{fg,0} = 2501$ in $\\mathrm{kJ}\\,\\mathrm{kg}^{-1}$. At the interface $h_s^\\star(T_w,P) = h_a\\!\\left(T_w, W_s(T_w,P)\\right)$.\n- Given inlet air dry-bulb temperature $T_{db,\\mathrm{in}}$ in $\\mathrm{^\\circ C}$ and relative humidity $\\phi_{\\mathrm{in}}$ as a decimal in $[0, 1]$, compute $p_{w,\\mathrm{in}} = \\phi_{\\mathrm{in}}\\,p_{ws}(T_{db,\\mathrm{in}})$, then $W_{\\mathrm{in}} = 0.62198\\,p_{w,\\mathrm{in}}/(P-p_{w,\\mathrm{in}})$, and finally $h_{a,\\mathrm{in}} = h_a(T_{db,\\mathrm{in}},W_{\\mathrm{in}})$.\n\nTransfer coefficient model:\n- The volumetric mass/enthalpy transfer coefficient varies linearly with height,\n$$ K(z) = k_{\\mathrm{ref}}\\left(1 + \\beta\\,\\frac{z}{H}\\right) \\quad \\text{with } k_{\\mathrm{ref}} > 0, \\text{ and } 1 + \\beta\\,\\frac{z}{H} > 0 \\text{ for } z\\in[0,H]. $$\nUnits of $K$ are such that, when multiplied by an enthalpy driving force in $\\mathrm{kJ}\\,\\mathrm{kg}^{-1}$, $K$ contributes to a rate per unit height in $\\mathrm{kJ}\\,\\mathrm{s}^{-1}\\,\\mathrm{m}^{-3}$ compatible with the per-area balances below.\n\nGoverning balances to encode (do not use any shortcut formulas; start from conservation of energy and the definitions above to derive the working equations):\n- A differential energy balance on the liquid water film and on the gas phase, using the coordinate $z$ increasing from the water inlet at the top to the air inlet at the bottom, gives a coupled initial–boundary-value problem that must be solved numerically. The water boundary condition is at $z=0$ with $T_w(0) = T_{w,\\mathrm{in}}$ in $\\mathrm{^\\circ C}$, while the air boundary condition is at $z=H$ with $h_a(H) = h_{a,\\mathrm{in}}$ in $\\mathrm{kJ}\\,\\mathrm{kg}^{-1}$.\n\nRequired outputs for each test case:\n- Compute the physically consistent counterflow solution for $T_w(z)$ and $h_a(z)$ by numerical integration with a psychrometric property model and a height-dependent $K(z)$. From this, report the cold water outlet temperature $T_{w,\\mathrm{out}} = T_w(H)$ in $\\mathrm{^\\circ C}$.\n- Also compute a naive constant-driving-force approximation where the driving enthalpy difference is frozen at its inlet value, i.e., use $\\Delta h_{\\mathrm{const}} = h_s^\\star(T_{w,\\mathrm{in}},P) - h_{a,\\mathrm{in}}$, and replace the height-varying $K(z)$ with its height average $\\overline{K} = \\frac{1}{H}\\int_0^H K(z)\\,dz$. Based on an energy balance for the water film, estimate an approximate cold water outlet temperature $\\widetilde{T}_{w,\\mathrm{out}}$ in $\\mathrm{^\\circ C}$ under this simplification.\n- Finally, output the difference $\\Delta T = T_{w,\\mathrm{out}} - \\widetilde{T}_{w,\\mathrm{out}}$ in $\\mathrm{^\\circ C}$.\n\nPhysical constants and units:\n- Use $c_{p,w} = 4.186$ in $\\mathrm{kJ}\\,\\mathrm{kg}^{-1}\\,\\mathrm{K}^{-1}$ for liquid water.\n- Use $c_{p,a} = 1.006$, $c_{p,v} = 1.86$, and $h_{fg,0} = 2501$ as specified above.\n- All temperatures must be in $\\mathrm{^\\circ C}$; all pressures in $\\mathrm{kPa}$; $L$ and $G$ in $\\mathrm{kg}\\,\\mathrm{s}^{-1}\\,\\mathrm{m}^{-2}$; $H$ in $\\mathrm{m}$.\n- Express the final temperatures in $\\mathrm{^\\circ C}$ rounded to three decimals. Express the difference $\\Delta T$ in $\\mathrm{^\\circ C}$ rounded to three decimals.\n\nTest suite:\nFor each tuple, the parameters are $(H,\\,G,\\,L,\\,k_{\\mathrm{ref}},\\,\\beta,\\,T_{w,\\mathrm{in}},\\,T_{db,\\mathrm{in}},\\,\\phi_{\\mathrm{in}},\\,P)$, all in the units specified above.\n- Case A: $(H=\\,$$5.0$$,\\,G=\\,$$1.5$$,\\,L=\\,$$5.5$$,\\,k_{\\mathrm{ref}}=\\,$$1.0$$,\\,\\beta=\\,$$0.4$$,\\,T_{w,\\mathrm{in}}=\\,$$40.0$$,\\,T_{db,\\mathrm{in}}=\\,$$30.0$$,\\,\\phi_{\\mathrm{in}}=\\,$$0.6$$,\\,P=\\,$$101.325$$)$\n- Case B: $(H=\\,$$3.0$$,\\,G=\\,$$1.2$$,\\,L=\\,$$4.8$$,\\,k_{\\mathrm{ref}}=\\,$$0.35$$,\\,\\beta=\\,$$0.2$$,\\,T_{w,\\mathrm{in}}=\\,$$40.0$$,\\,T_{db,\\mathrm{in}}=\\,$$32.0$$,\\,\\phi_{\\mathrm{in}}=\\,$$0.5$$,\\,P=\\,$$101.325$$)$\n- Case C: $(H=\\,$$5.0$$,\\,G=\\,$$1.8$$,\\,L=\\,$$6.5$$,\\,k_{\\mathrm{ref}}=\\,$$0.9$$,\\,\\beta=\\,$$-0.6$$,\\,T_{w,\\mathrm{in}}=\\,$$42.0$$,\\,T_{db,\\mathrm{in}}=\\,$$27.0$$,\\,\\phi_{\\mathrm{in}}=\\,$$0.7$$,\\,P=\\,$$101.325$$)$\n- Case D: $(H=\\,$$6.0$$,\\,G=\\,$$1.4$$,\\,L=\\,$$5.2$$,\\,k_{\\mathrm{ref}}=\\,$$1.1$$,\\,\\beta=\\,$$0.3$$,\\,T_{w,\\mathrm{in}}=\\,$$38.0$$,\\,T_{db,\\mathrm{in}}=\\,$$28.0$$,\\,\\phi_{\\mathrm{in}}=\\,$$0.9$$,\\,P=\\,$$101.325$$)$\n\nProgram requirements:\n- Implement a robust numerical integration of the coupled balances with the height-varying $K(z)$ and the psychrometric property model provided.\n- Solve the counterflow boundary-value problem by an appropriate numerical strategy grounded in the fundamental balances (for example, via a shooting method that adjusts $h_a(0)$ so that the terminal condition $h_a(H)=h_{a,\\mathrm{in}}$ is satisfied).\n- For each test case, produce a list of three floats $[T_{w,\\mathrm{out}},\\,\\widetilde{T}_{w,\\mathrm{out}},\\,\\Delta T]$, all in $\\mathrm{^\\circ C}$ and rounded to three decimals.\n\nFinal output format:\nYour program should produce a single line of output containing the results for Cases A–D as a comma-separated list of lists enclosed in square brackets, in the order A, B, C, D. For example, a syntactically valid output format is\n$$ [[x_{A,1},x_{A,2},x_{A,3}],[x_{B,1},x_{B,2},x_{B,3}],[x_{C,1},x_{C,2},x_{C,3}],[x_{D,1},x_{D,2},x_{D,3}]] $$\nwith each $x_{\\cdot,\\cdot}$ a float rounded as specified, and with no additional text.", "solution": "The problem requires the construction of a numerical model for a counterflow wet cooling tower. Before proceeding to a solution, we must validate the problem statement. The problem is found to be scientifically sound, well-posed, and contains all necessary information to formulate and solve the governing equations. It presents a standard engineering problem in heat and mass transfer, specifically the application of the Merkel method without common oversimplifications. The given psychrometric correlations and physical constants are standard and acceptable. The problem is therefore deemed valid.\n\nThe solution proceeds by first deriving the governing differential equations from fundamental principles of energy conservation. A numerical strategy is then outlined to solve the resulting two-point boundary value problem. Finally, the simplified model for comparison is formulated.\n\nFirst, we establish the psychrometric functions necessary for modeling the state of moist air. The total pressure $P$ is in $\\mathrm{kPa}$ and temperature $T$ is in $\\mathrm{^\\circ C}$.\nThe saturation vapor pressure over liquid water is given by the Magnus correlation:\n$$ p_{ws}(T) = 0.61078 \\exp\\!\\left(\\frac{17.2694\\,T}{T+237.3}\\right) $$\nThe saturation humidity ratio, $W_s$, which is the mass of water vapor per unit mass of dry air in saturated air, is:\n$$ W_s(T,P) = 0.62198\\,\\frac{p_{ws}(T)}{P - p_{ws}(T)} $$\nThe specific enthalpy of moist air, $h_a$, per unit mass of dry air, is a function of the dry-bulb temperature $T$ and the humidity ratio $W$:\n$$ h_a(T,W) = c_{p,a}\\,T + W\\left(h_{fg,0} + c_{p,v}\\,T\\right) $$\nwhere $c_{p,a} = 1.006\\,\\mathrm{kJ}\\,\\mathrm{kg}^{-1}\\,\\mathrm{K}^{-1}$, $c_{p,v} = 1.86\\,\\mathrm{kJ}\\,\\mathrm{kg}^{-1}\\,\\mathrm{K}^{-1}$, and $h_{fg,0} = 2501\\,\\mathrm{kJ}\\,\\mathrm{kg}^{-1}$.\nUnder the Merkel assumption, the air at the gas-liquid interface is saturated at the local water temperature $T_w$. Its specific enthalpy, denoted $h_s^\\star$, is therefore:\n$$ h_s^\\star(T_w,P) = h_a(T=T_w, W=W_s(T_w,P)) $$\n\nNext, we derive the governing differential equations. Consider a differential control volume of unit cross-sectional area and height $dz$ within the tower. The coordinate $z$ starts at $0$ at the water inlet (top) and increases to $H$ at the air inlet (bottom).\n\nEnergy balance on the liquid water: Water flows in the positive $z$ direction with mass flow rate $L$. The change in enthalpy of the water must equal the energy transferred to the air. The energy transferred per unit area over height $dz$ is $d\\dot{q} = K(z)(h_s^\\star - h_a)dz$, where $K(z)$ is the volumetric mass/enthalpy transfer coefficient. The energy balance is:\n$$ (L c_{p,w} T_w)|_z - (L c_{p,w} T_w)|_{z+dz} = d\\dot{q} $$\n$$ -L c_{p,w} dT_w = K(z)(h_s^\\star(T_w, P) - h_a)dz $$\nThis yields the first ordinary differential equation (ODE):\n$$ \\frac{dT_w}{dz} = -\\frac{K(z)}{L c_{p,w}}(h_s^\\star(T_w, P) - h_a) $$\nSince the water is cooled, $T_w$ decreases as $z$ increases, so $dT_w/dz < 0$. As $h_s^\\star > h_a$ for heat transfer from water to air, this equation is correctly formulated.\n\nEnergy balance on the moist air: Air flows in the negative $z$ direction with dry-air mass flow rate $G$. The change in enthalpy of the air stream is due to the same energy transfer $d\\dot{q}$. The energy balance on the control volume is:\n$$ (G h_a)|_{z+dz} - (G h_a)|_z + d\\dot{q} = 0 $$\n$$ G dh_a + K(z)(h_s^\\star(T_w, P) - h_a)dz = 0 $$\nThis yields the second ODE:\n$$ \\frac{dh_a}{dz} = -\\frac{K(z)}{G}(h_s^\\star(T_w, P) - h_a) $$\nThe air is heated and humidified as it moves from $z=H$ to $z=0$, so its enthalpy $h_a$ increases. Therefore, $h_a$ must be a decreasing function of $z$, which means $dh_a/dz < 0$. This equation is also correctly formulated.\n\nThe height-dependent transfer coefficient is given as:\n$$ K(z) = k_{\\mathrm{ref}}\\left(1 + \\beta\\,\\frac{z}{H}\\right) $$\n\nWe have a system of two coupled ODEs for the state variables $T_w(z)$ and $h_a(z)$. The problem is a two-point boundary value problem (BVP) with conditions specified at opposite ends of the domain $z \\in [0, H]$:\n- Water inlet condition: $T_w(0) = T_{w,\\mathrm{in}}$\n- Air inlet condition: $h_a(H) = h_{a,\\mathrm{in}}$\n\nTo solve this BVP, a shooting method is employed. The method converts the BVP into an initial value problem (IVP). We guess the unknown initial condition for the air enthalpy at the water inlet, $h_a(0) = h_{a,0,\\text{guess}}$. With a complete set of initial conditions, $\\{T_w(0)=T_{w,\\text{in}}, h_a(0)=h_{a,0,\\text{guess}}\\}$, the system of ODEs can be integrated from $z=0$ to $z=H$. The resulting air enthalpy at the outlet, $h_a(H)$, is compared to the required boundary condition $h_{a,\\text{in}}$. A root-finding algorithm is used to adjust the guess $h_{a,0,\\text{guess}}$ until the objective function $f(h_{a,0,\\text{guess}}) = h_a(H)|_{\\text{integrated}} - h_{a,\\text{in}}$ becomes zero. The physically valid range for the search is $h_{a,\\text{in}} < h_{a,0,\\text{guess}} < h_s^\\star(T_{w,\\text{in}}, P)$. Once the correct $h_a(0)$ is found, a final integration yields the solution profiles $T_w(z)$ and $h_a(z)$, from which the cold water outlet temperature is $T_{w,\\text{out}} = T_w(H)$.\n\nFor comparison, a \"naive\" model is computed. This model uses a constant driving force, $\\Delta h_{\\text{const}} = h_s^\\star(T_{w,\\mathrm{in}},P) - h_{a,\\mathrm{in}}$, and a height-averaged transfer coefficient, $\\overline{K}$.\n$$ \\overline{K} = \\frac{1}{H}\\int_0^H K(z)\\,dz = \\frac{1}{H}\\int_0^H k_{\\mathrm{ref}}\\left(1 + \\beta\\frac{z}{H}\\right)dz = k_{\\mathrm{ref}}\\left(1 + \\frac{\\beta}{2}\\right) $$\nAn overall energy balance on the water film is integrated with these constant values:\n$$ L c_{p,w} \\int_{T_{w,\\mathrm{in}}}^{\\widetilde{T}_{w,\\mathrm{out}}} dT_w = -\\int_0^H \\overline{K} \\cdot \\Delta h_{\\text{const}} dz $$\n$$ L c_{p,w} (\\widetilde{T}_{w,\\mathrm{out}} - T_{w,\\mathrm{in}}) = -\\overline{K} H \\Delta h_{\\text{const}} $$\nSolving for the approximate cold water outlet temperature, $\\widetilde{T}_{w,\\mathrm{out}}$:\n$$ \\widetilde{T}_{w,\\mathrm{out}} = T_{w,\\mathrm{in}} - \\frac{\\overline{K} H}{L c_{p,w}} \\left(h_s^\\star(T_{w,\\mathrm{in}},P) - h_{a,\\mathrm{in}}\\right) $$\nThis provides a simple algebraic estimate to compare against the full numerical solution.\n\nThe final output is the set of three values for each test case: the numerically solved outlet water temperature $T_{w,\\text{out}}$, the naively approximated outlet water temperature $\\widetilde{T}_{w,\\text{out}}$, and their difference $\\Delta T = T_{w,\\text{out}} - \\widetilde{T}_{w,\\text{out}}$.", "answer": "```python\nimport numpy as np\nfrom scipy.integrate import solve_ivp\nfrom scipy.optimize import brentq\n\ndef solve():\n    \"\"\"\n    Solves the cooling tower problem for a given set of test cases.\n    \"\"\"\n    # Physicochemical constants\n    C_PA = 1.006  # Specific heat of dry air [kJ/kg-K]\n    C_PV = 1.86   # Specific heat of water vapor [kJ/kg-K]\n    H_FG0 = 2501.0 # Latent heat of vaporization of water at 0 C [kJ/kg]\n    C_PW = 4.186  # Specific heat of liquid water [kJ/kg-K]\n\n    # Psychrometric property model\n    def p_ws(T):\n        \"\"\"Saturation vapor pressure [kPa] over water at temperature T [C].\"\"\"\n        return 0.61078 * np.exp((17.2694 * T) / (T + 237.3))\n\n    def W_s(T, P):\n        \"\"\"Saturation humidity ratio [kg/kg] at temperature T [C] and pressure P [kPa].\"\"\"\n        p_sat = p_ws(T)\n        if p_sat >= P: # Avoid division by zero or negative\n            return np.inf\n        return 0.62198 * p_sat / (P - p_sat)\n\n    def h_a(T, W):\n        \"\"\"Specific enthalpy of moist air [kJ/kg dry air] at T [C] and W [kg/kg].\"\"\"\n        return C_PA * T + W * (H_FG0 + C_PV * T)\n\n    def h_s_star(T_w, P):\n        \"\"\"Enthalpy of saturated air at the interface [kJ/kg] at water temp T_w [C] and pressure P [kPa].\"\"\"\n        return h_a(T_w, W_s(T_w, P))\n        \n    def get_inlet_air_properties(T_db_in, phi_in, P):\n        \"\"\"Calculates inlet air humidity ratio and enthalpy.\"\"\"\n        p_w_in = phi_in * p_ws(T_db_in)\n        W_in = 0.62198 * p_w_in / (P - p_w_in)\n        h_a_in = h_a(T_db_in, W_in)\n        return W_in, h_a_in\n\n    # Main ODE system for the full model\n    def ode_system(z, y, H, G, L, k_ref, beta, P):\n        \"\"\"\n        System of ODEs for water temperature T_w and air enthalpy h_a.\n        y = [T_w, h_a]\n        \"\"\"\n        T_w, h_a_val = y[0], y[1]\n        \n        K_z = k_ref * (1 + beta * z / H)\n        h_s_star_val = h_s_star(T_w, P)\n        \n        driving_force = h_s_star_val - h_a_val\n        \n        dT_w_dz = -(K_z / (L * C_PW)) * driving_force\n        dh_a_dz = -(K_z / G) * driving_force\n        \n        return [dT_w_dz, dh_a_dz]\n\n    # Objective function for the shooting method\n    def objective_function(h_a_0_guess, H, G, L, k_ref, beta, T_w_in, h_a_in, P):\n        \"\"\"\n        Objective function for the root finder.\n        It returns the error at the boundary z=H.\n        \"\"\"\n        y0 = [T_w_in, h_a_0_guess]\n        sol = solve_ivp(\n            ode_system, \n            [0, H], \n            y0, \n            args=(H, G, L, k_ref, beta, P),\n            dense_output=True,\n            method='RK45'\n        )\n        h_a_at_H = sol.y[1, -1]\n        return h_a_at_H - h_a_in\n\n    # Test cases\n    test_cases = [\n        # (H, G, L, k_ref, beta, T_w_in, T_db_in, phi_in, P)\n        (5.0, 1.5, 5.5, 1.0, 0.4, 40.0, 30.0, 0.6, 101.325), # Case A\n        (3.0, 1.2, 4.8, 0.35, 0.2, 40.0, 32.0, 0.5, 101.325), # Case B\n        (5.0, 1.8, 6.5, 0.9, -0.6, 42.0, 27.0, 0.7, 101.325), # Case C\n        (6.0, 1.4, 5.2, 1.1, 0.3, 38.0, 28.0, 0.9, 101.325), # Case D\n    ]\n\n    results = []\n    \n    for case in test_cases:\n        H, G, L, k_ref, beta, T_w_in, T_db_in, phi_in, P = case\n        \n        # --- 1. Full Numerical Solution ---\n        \n        # Inlet air conditions\n        _, h_a_in = get_inlet_air_properties(T_db_in, phi_in, P)\n        \n        # Bracket for the shooting method's root finder\n        h_a_0_lower_bound = h_a_in\n        h_a_0_upper_bound = h_s_star(T_w_in, P)\n\n        # Solve for the correct h_a(0) using the shooting method\n        try:\n            h_a_0_correct = brentq(\n                objective_function, \n                h_a_0_lower_bound, \n                h_a_0_upper_bound, \n                args=(H, G, L, k_ref, beta, T_w_in, h_a_in, P),\n                xtol=1e-8, rtol=1e-8\n            )\n        except ValueError:\n            # Fallback if bounds do not bracket a root, though they should\n            results.append([float('nan'), float('nan'), float('nan')])\n            continue\n            \n        # Final integration with the correct initial condition\n        y0_correct = [T_w_in, h_a_0_correct]\n        solution = solve_ivp(\n            ode_system, \n            [0, H], \n            y0_correct, \n            args=(H, G, L, k_ref, beta, P),\n            dense_output=True,\n            method='RK45'\n        )\n        \n        T_w_out = solution.y[0, -1]\n        \n        # --- 2. Naive Constant-Driving-Force Approximation ---\n        \n        # Average transfer coefficient\n        K_bar = k_ref * (1 + beta / 2.0)\n        \n        # Constant driving force (as defined in the problem)\n        h_s_star_in = h_s_star(T_w_in, P)\n        delta_h_const = h_s_star_in - h_a_in\n        \n        # Approximate outlet water temperature\n        Tilde_T_w_out = T_w_in - (K_bar * H / (L * C_PW)) * delta_h_const\n        \n        # --- 3. Final Results ---\n        \n        Delta_T = T_w_out - Tilde_T_w_out\n        \n        results.append([\n            round(T_w_out, 3), \n            round(Tilde_T_w_out, 3), \n            round(Delta_T, 3)\n        ])\n\n    # Print the final output in the required format\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2474377"}, {"introduction": "One-dimensional models, while useful, inherently assume uniform flow, a condition rarely met in practice. This final exercise explores the significant impact of flow maldistribution on cooling tower performance by comparing a simple 1D model against a more detailed channel-resolved model that mimics spatial non-uniformity. This thought experiment is crucial for developing the critical skill of assessing a model's adequacy and understanding when simplified assumptions may lead to significant prediction errors [@problem_id:2474415].", "problem": "A crossflow, induced-draft cooling tower is analyzed under conditions where strong lateral maldistribution of liquid water occurs across parallel vertical flow passages. You are to compare a channel-resolved prediction intended to mimic a fine-grid Computational Fluid Dynamics (CFD) model against a one-dimensional (1D) lumped model, and then quantify the discrepancy in the predicted cold water outlet temperature. The water stream is modeled as a plug flow with negligible axial conduction. The air side is modeled, for this exercise, as a very large capacity sink that maintains a constant wet-bulb temperature throughout the fill. Each channel has an effective overall heat transfer conductance that lumps the height-integrated product of overall heat transfer coefficient and interfacial area.\n\nFundamental base and assumptions to be used:\n- Conservation of energy for the water phase in differential form along the flow direction, with the air treated as an infinite-capacity thermal sink at constant wet-bulb temperature.\n- Plug-flow water in each independent channel, negligible thermal capacitance of the solid packing.\n- For each channel, a constant, height-integrated overall conductance parameter that we denote by $UA_k$ in units of $\\mathrm{W/K}$.\n- The water specific heat is constant and equal to $c_{p,w}$, and the water mass flow in channel $k$ is $m_{w,k}=\\phi_k\\,m_{w,\\mathrm{tot}}$, where $\\phi_k$ are nonnegative flow fractions that sum to $1$.\n\nTasks to perform from first principles:\n1. Starting from conservation of energy, derive for a single channel $k$ a governing relation between the inlet water temperature $T_{w,\\mathrm{in}}$, the outlet water temperature $T_{w,\\mathrm{out},k}$, the wet-bulb temperature $T_{wb}$ (treated as constant), the channel conductance $UA_k$, the channel water flow $m_{w,k}$, and the specific heat $c_{p,w}$, under the plug-flow and constant-parameter assumptions given above. Your derivation should begin from the appropriate differential form of the energy balance and proceed by separation of variables and integration across the control volume.\n2. Define the CFD-like outlet temperature as the mass-flow-weighted average across channels: $T_{w,\\mathrm{out}}^{\\mathrm{CFD}}=\\sum_{k=1}^{N}\\phi_k\\,T_{w,\\mathrm{out},k}$.\n3. Derive the 1D-lumped counterpart by aggregating all channels into one equivalent pass with $UA_{\\mathrm{tot}}=\\sum_{k=1}^{N}UA_k$ and total water flow $m_{w,\\mathrm{tot}}$, and obtain $T_{w,\\mathrm{out}}^{\\mathrm{1D}}$ from the same fundamental balance used in Task $1$.\n4. Quantify the discrepancy using:\n   - Absolute error in Kelvin: $\\Delta T=\\left|T_{w,\\mathrm{out}}^{\\mathrm{CFD}}-T_{w,\\mathrm{out}}^{\\mathrm{1D}}\\right|$.\n   - A relative error as a decimal fraction normalized by the approach to wet-bulb on the CFD-like prediction: $r=\\Delta T/\\max\\left(\\left|T_{w,\\mathrm{out}}^{\\mathrm{CFD}}-T_{wb}\\right|,\\,\\varepsilon\\right)$, where $\\varepsilon$ is a small baseline scale.\n5. Assess model adequacy for each test case by the following criterion: the 1D model is deemed adequate if simultaneously $\\Delta T\\leq 0.5$ and $r\\leq 0.1$, where all temperatures are in Kelvin and the relative error $r$ is a decimal fraction (not a percentage).\n\nUse the following fixed constants in all cases:\n- Water specific heat: $c_{p,w}=4180\\,\\mathrm{J}/(\\mathrm{kg}\\cdot\\mathrm{K})$.\n- Relative-error baseline: $\\varepsilon=0.5\\,\\mathrm{K}$.\n\nTest suite. For each case, the variables are: number of channels $N$, inlet water temperature $T_{w,\\mathrm{in}}$ in Kelvin, wet-bulb temperature $T_{wb}$ in Kelvin, total water mass flow $m_{w,\\mathrm{tot}}$ in $\\mathrm{kg/s}$, the list $\\{UA_k\\}$ in $\\mathrm{W/K}$ for $k=1,\\dots,N$, and the list of flow fractions $\\{\\phi_k\\}$ (dimensionless) that sum to $1$.\n- Case A (strong maldistribution, moderate effectiveness):\n  - $N=4$\n  - $T_{w,\\mathrm{in}}=313.15$\n  - $T_{wb}=298.15$\n  - $m_{w,\\mathrm{tot}}=50$\n  - $\\{UA_k\\}=\\{20000,\\,25000,\\,30000,\\,75000\\}$\n  - $\\{\\phi_k\\}=\\{0.05,\\,0.10,\\,0.15,\\,0.70\\}$\n- Case B (no maldistribution benchmark):\n  - $N=5$\n  - $T_{w,\\mathrm{in}}=308.15$\n  - $T_{wb}=295.15$\n  - $m_{w,\\mathrm{tot}}=60$\n  - $\\{UA_k\\}=\\{10000,\\,10000,\\,10000,\\,10000,\\,10000\\}$\n  - $\\{\\phi_k\\}=\\{0.20,\\,0.20,\\,0.20,\\,0.20,\\,0.20\\}$\n- Case C (extreme maldistribution, very uneven capacity-to-flow):\n  - $N=3$\n  - $T_{w,\\mathrm{in}}=323.15$\n  - $T_{wb}=300.15$\n  - $m_{w,\\mathrm{tot}}=40$\n  - $\\{UA_k\\}=\\{5000,\\,10000,\\,145000\\}$\n  - $\\{\\phi_k\\}=\\{0.60,\\,0.35,\\,0.05\\}$\n- Case D (high overall effectiveness with maldistribution):\n  - $N=4$\n  - $T_{w,\\mathrm{in}}=310.15$\n  - $T_{wb}=299.15$\n  - $m_{w,\\mathrm{tot}}=50$\n  - $\\{UA_k\\}=\\{50000,\\,50000,\\,50000,\\,50000\\}$\n  - $\\{\\phi_k\\}=\\{0.10,\\,0.10,\\,0.30,\\,0.50\\}$\n\nProgram requirements:\n- Implement the derivation to compute $T_{w,\\mathrm{out},k}$ for each channel and then $T_{w,\\mathrm{out}}^{\\mathrm{CFD}}$ and $T_{w,\\mathrm{out}}^{\\mathrm{1D}}$ for each case.\n- Compute for each case the pair $(\\Delta T,\\,r)$ and the adequacy boolean.\n- Express all temperatures in Kelvin. The relative error $r$ must be reported as a decimal fraction. Round all reported floating-point outputs to six decimal places.\n- Final output format: Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, where each test case’s result is a list of the form $[\\Delta T, r, \\mathrm{adequate}]$. For example: $[[\\Delta T_1,r_1,\\mathrm{True}],[\\Delta T_2,r_2,\\mathrm{False}],\\dots]$.", "solution": "We begin from conservation of energy for the water phase in a single vertical channel. Let $z$ be the axial coordinate. The water mass flow in channel $k$ is $m_{w,k}$, the specific heat is $c_{p,w}$, and the bulk water temperature is $T_w(z)$. The air side is treated as a constant-temperature, infinite-capacity sink at the wet-bulb temperature $T_{wb}$, and the height-integrated conductance for channel $k$ is $UA_k$ in $\\mathrm{W/K}$. Under steady state, neglecting axial conduction, the rate of sensible energy loss of the water over a differential span is balanced by the heat transfer to the air sink. The differential energy balance is\n$$\nm_{w,k}\\,c_{p,w}\\,\\frac{dT_w}{dz} \\;=\\; -\\,U a P\\,\\left(T_w(z)-T_{wb}\\right),\n$$\nwhere $U a P$ is the product of overall heat transfer coefficient, interfacial area per unit length, and wet perimeter, which we treat as constant with respect to $z$ within channel $k$. Integrating over the channel height converts $U a P$ to a height-integrated conductance. Introducing the height-integrated parameter\n$$\nUA_k \\;=\\; \\int_0^L U a P \\,dz,\n$$\nand integrating the separable ordinary differential equation from $z=0$ at inlet to $z=L$ at outlet, we obtain\n$$\n\\int_{T_{w,\\mathrm{in}}}^{T_{w,\\mathrm{out},k}} \\frac{dT_w}{T_w-T_{wb}} \\;=\\; -\\,\\int_0^L \\frac{U a P}{m_{w,k}\\,c_{p,w}}\\,dz \\;=\\; -\\,\\frac{UA_k}{m_{w,k}\\,c_{p,w}}.\n$$\nThis yields the logarithmic relation\n$$\n\\ln\\!\\left(\\frac{T_{w,\\mathrm{out},k}-T_{wb}}{T_{w,\\mathrm{in}}-T_{wb}}\\right) \\;=\\; -\\,\\frac{UA_k}{m_{w,k}\\,c_{p,w}},\n$$\nand therefore the single-channel outlet temperature is\n$$\nT_{w,\\mathrm{out},k} \\;=\\; T_{wb} \\;+\\; \\left(T_{w,\\mathrm{in}}-T_{wb}\\right)\\,\\exp\\!\\left(-\\frac{UA_k}{m_{w,k}\\,c_{p,w}}\\right).\n$$\nDefine the water flow split by $\\phi_k$ so that $m_{w,k}=\\phi_k\\,m_{w,\\mathrm{tot}}$ and $\\sum_{k=1}^{N}\\phi_k=1$. The CFD-like (channel-resolved) outlet temperature is then the mass-flow-weighted average\n$$\nT_{w,\\mathrm{out}}^{\\mathrm{CFD}} \\;=\\; \\sum_{k=1}^{N}\\phi_k\\,T_{w,\\mathrm{out},k} \\;=\\; T_{wb} \\;+\\; \\left(T_{w,\\mathrm{in}}-T_{wb}\\right)\\,\\sum_{k=1}^{N}\\phi_k\\,\\exp\\!\\left(-\\frac{UA_k}{\\phi_k\\,m_{w,\\mathrm{tot}}\\,c_{p,w}}\\right).\n$$\n\nFor the one-dimensional lumped model, we consider the entire bundle of channels as a single equivalent pass with aggregate conductance $UA_{\\mathrm{tot}}=\\sum_{k=1}^{N}UA_k$ in parallel with the same total water flow $m_{w,\\mathrm{tot}}$. Repeating the same derivation with $UA_{\\mathrm{tot}}$ and $m_{w,\\mathrm{tot}}$ gives\n$$\nT_{w,\\mathrm{out}}^{\\mathrm{1D}} \\;=\\; T_{wb} \\;+\\; \\left(T_{w,\\mathrm{in}}-T_{wb}\\right)\\,\\exp\\!\\left(-\\frac{UA_{\\mathrm{tot}}}{m_{w,\\mathrm{tot}}\\,c_{p,w}}\\right).\n$$\n\nThe discrepancy metrics are defined as follows. The absolute error is\n$$\n\\Delta T \\;=\\; \\left|T_{w,\\mathrm{out}}^{\\mathrm{CFD}}-T_{w,\\mathrm{out}}^{\\mathrm{1D}}\\right|.\n$$\nTo obtain a scale-aware relative error that remains well-defined in the limit of very small approach to the wet-bulb temperature, we normalize by the larger of the CFD-like approach $A_{\\mathrm{CFD}}=\\left|T_{w,\\mathrm{out}}^{\\mathrm{CFD}}-T_{wb}\\right|$ and a small baseline $\\varepsilon$:\n$$\nr \\;=\\; \\frac{\\Delta T}{\\max\\!\\left(A_{\\mathrm{CFD}},\\,\\varepsilon\\right)}.\n$$\nWith the adequacy criterion posed as $\\Delta T\\leq 0.5$ and $r\\leq 0.1$, we evaluate each test case.\n\nAlgorithmic implementation per test case:\n- Inputs: $N$, $T_{w,\\mathrm{in}}$, $T_{wb}$, $m_{w,\\mathrm{tot}}$, $c_{p,w}$, $\\{UA_k\\}_{k=1}^{N}$, $\\{\\phi_k\\}_{k=1}^{N}$.\n- For each channel $k$, compute $m_{w,k}=\\phi_k\\,m_{w,\\mathrm{tot}}$, the transfer unit $NTU_k=UA_k/(m_{w,k}\\,c_{p,w})$, then $T_{w,\\mathrm{out},k}=T_{wb}+(T_{w,\\mathrm{in}}-T_{wb})\\,e^{-NTU_k}$.\n- Compute $T_{w,\\mathrm{out}}^{\\mathrm{CFD}}=\\sum_{k=1}^{N}\\phi_k\\,T_{w,\\mathrm{out},k}$.\n- Compute $UA_{\\mathrm{tot}}=\\sum_{k=1}^{N}UA_k$, $NTU_{\\mathrm{tot}}=UA_{\\mathrm{tot}}/(m_{w,\\mathrm{tot}}\\,c_{p,w})$, and $T_{w,\\mathrm{out}}^{\\mathrm{1D}}=T_{wb}+(T_{w,\\mathrm{in}}-T_{wb})\\,e^{-NTU_{\\mathrm{tot}}}$.\n- Compute $\\Delta T$, $A_{\\mathrm{CFD}}=\\left|T_{w,\\mathrm{out}}^{\\mathrm{CFD}}-T_{wb}\\right|$, $r=\\Delta T/\\max(A_{\\mathrm{CFD}},\\varepsilon)$ with $\\varepsilon=0.5$, and the adequacy boolean $(\\Delta T\\leq 0.5)\\wedge(r\\leq 0.1)$.\n- Report $[\\Delta T, r, \\mathrm{adequate}]$ with $\\Delta T$ and $r$ rounded to six decimal places.\n\nQualitative expectations for the test suite:\n- Case A, with moderate overall effectiveness and strong but not extreme maldistribution, should yield a small but nonzero $\\Delta T$ and satisfy adequacy.\n- Case B, with uniform conductance and uniform flow, produces identical transfer units across channels, making the channel-average equivalent to the lumped model; thus $\\Delta T$ is effectively zero and adequacy holds.\n- Case C, with very uneven capacity-to-flow ratios, heavily violates the lumped assumption and should yield a large $\\Delta T$ and fail adequacy.\n- Case D, in the high-effectiveness regime with maldistribution, exhibits sensitivity of outlet temperature to flow nonuniformity, likely producing a moderate $\\Delta T$ that fails at least one adequacy condition.\n\nThe accompanying program implements these steps and prints a single-line, list-of-lists with $[\\Delta T, r, \\mathrm{adequate}]$ for each case, using temperatures in Kelvin and relative error as a decimal fraction, both rounded to six decimal places.", "answer": "```python\nimport numpy as np\n\ndef compute_case(T_in, T_wb, m_w_tot, cp_w, UA_list, phi_list, eps=0.5):\n    UA = np.array(UA_list, dtype=float)\n    phi = np.array(phi_list, dtype=float)\n    # Ensure no zero-flow channels to avoid division by zero\n    # (Problem data provides strictly positive splits.)\n    m_w_k = phi * m_w_tot  # kg/s per channel\n    NTU_k = UA / (m_w_k * cp_w)\n    # Channel outlet temperatures based on plug-flow exponential cooling to wet-bulb\n    exp_terms = np.exp(-NTU_k)\n    T_out_k = T_wb + (T_in - T_wb) * exp_terms\n    # CFD-like mass-weighted outlet\n    T_out_cfd = float(np.dot(phi, T_out_k))\n    # 1D lumped outlet\n    UA_tot = float(np.sum(UA))\n    NTU_tot = UA_tot / (m_w_tot * cp_w)\n    T_out_1d = T_wb + (T_in - T_wb) * np.exp(-NTU_tot)\n    # Discrepancy metrics\n    abs_err = abs(T_out_cfd - T_out_1d)\n    approach_cfd = abs(T_out_cfd - T_wb)\n    denom = max(approach_cfd, eps)\n    rel_err = abs_err / denom\n    adequate = (abs_err <= 0.5) and (rel_err <= 0.1)\n    # Round floats to six decimals\n    abs_err = round(abs_err, 6)\n    rel_err = round(rel_err, 6)\n    return [abs_err, rel_err, adequate]\n\ndef solve():\n    cp_w = 4180.0  # J/(kg K)\n    eps = 0.5      # K baseline for relative error\n    test_cases = [\n        # Case A\n        {\n            \"T_in\": 313.15, \"T_wb\": 298.15, \"m_w_tot\": 50.0, \"cp_w\": cp_w,\n            \"UA_list\": [20000.0, 25000.0, 30000.0, 75000.0],\n            \"phi_list\": [0.05, 0.10, 0.15, 0.70]\n        },\n        # Case B\n        {\n            \"T_in\": 308.15, \"T_wb\": 295.15, \"m_w_tot\": 60.0, \"cp_w\": cp_w,\n            \"UA_list\": [10000.0, 10000.0, 10000.0, 10000.0, 10000.0],\n            \"phi_list\": [0.20, 0.20, 0.20, 0.20, 0.20]\n        },\n        # Case C\n        {\n            \"T_in\": 323.15, \"T_wb\": 300.15, \"m_w_tot\": 40.0, \"cp_w\": cp_w,\n            \"UA_list\": [5000.0, 10000.0, 145000.0],\n            \"phi_list\": [0.60, 0.35, 0.05]\n        },\n        # Case D\n        {\n            \"T_in\": 310.15, \"T_wb\": 299.15, \"m_w_tot\": 50.0, \"cp_w\": cp_w,\n            \"UA_list\": [50000.0, 50000.0, 50000.0, 50000.0],\n            \"phi_list\": [0.10, 0.10, 0.30, 0.50]\n        },\n    ]\n\n    results = []\n    for case in test_cases:\n        res = compute_case(\n            T_in=case[\"T_in\"],\n            T_wb=case[\"T_wb\"],\n            m_w_tot=case[\"m_w_tot\"],\n            cp_w=case[\"cp_w\"],\n            UA_list=case[\"UA_list\"],\n            phi_list=case[\"phi_list\"],\n            eps=eps\n        )\n        results.append(res)\n\n    # Final print statement in the exact required format.\n    # Ensure booleans and floats are printed as default Python representations.\n    print(f\"[{','.join(str(r) for r in results)}]\")\n\nsolve()\n```", "id": "2474415"}]}