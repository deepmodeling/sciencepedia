{"hands_on_practices": [{"introduction": "A spray consists of droplets of many sizes, necessitating a representative diameter for accurate modeling. The Sauter Mean Diameter, $D_{32}$, is crucial because it preserves the overall surface-area-to-volume ratio of the spray, which governs many heat and mass transfer processes. This foundational exercise [@problem_id:2524374] hones your ability to derive key physical parameters from statistical distribution functions.", "problem": "A liquid spray produced by a pressure-swirl atomizer is characterized by a Rosin–Rammler cumulative number distribution given by $Q(D)=1-\\exp\\!\\left[-\\left(D/\\lambda\\right)^{n}\\right]$ for $D \\ge 0$, where $D$ is the droplet diameter, $\\lambda>0$ is a scale parameter with dimensions of length, and $n>0$ is a dimensionless shape parameter. The Sauter mean diameter $D_{32}$ is defined as the diameter of a sphere whose volume-to-surface-area ratio equals that of the entire population, which for a number-distribution in the continuum limit is the ratio of the third to the second number-moments of the diameter distribution. Starting from the definition of $D_{32}$ in terms of the surface area and volume of spheres and the fundamental connection between the cumulative distribution function and the probability density function, derive a closed-form expression for $D_{32}$ in terms of $\\lambda$ and $n$ by evaluating the appropriate moment integrals over $D \\in [0,\\infty)$. Express your final result symbolically in terms of $\\lambda$ and $n$ only; do not perform any numerical substitution or rounding. If $\\lambda$ is expressed in meters, then $D_{32}$ is in meters.", "solution": "The problem as stated is scientifically grounded, well-posed, and objective. It presents a standard, non-trivial calculation in the field of particle size analysis, which is fundamental to the study of sprays in heat and mass transfer. The provided information, including the Rosin-Rammler distribution and the definition of the Sauter mean diameter, is complete and consistent. Therefore, a rigorous derivation is possible.\n\nThe Sauter mean diameter, $D_{32}$, is defined as the ratio of the third number-moment ($M_3$) to the second number-moment ($M_2$) of the droplet diameter distribution.\n$$\nD_{32} = \\frac{M_3}{M_2}\n$$\nThe $k$-th number-moment, $M_k$, is defined as the expected value of $D^k$, which is calculated by integrating $D^k$ over the probability density function (PDF), $f(D)$, of the droplet diameters.\n$$\nM_k = E[D^k] = \\int_{0}^{\\infty} D^k f(D) \\,dD\n$$\nThe PDF, $f(D)$, is the derivative of the cumulative number distribution function (CDF), $Q(D)$. The provided CDF is:\n$$\nQ(D) = 1 - \\exp\\!\\left[ -\\left(\\frac{D}{\\lambda}\\right)^n \\right]\n$$\nWe find the PDF by differentiating $Q(D)$ with respect to $D$:\n$$\nf(D) = \\frac{d}{dD} Q(D) = \\frac{d}{dD} \\left( 1 - \\exp\\!\\left[ -\\left(\\frac{D}{\\lambda}\\right)^n \\right] \\right)\n$$\n$$\nf(D) = - \\exp\\!\\left[ -\\left(\\frac{D}{\\lambda}\\right)^n \\right] \\cdot \\left( -n \\left(\\frac{D}{\\lambda}\\right)^{n-1} \\cdot \\frac{1}{\\lambda} \\right)\n$$\n$$\nf(D) = \\frac{n}{\\lambda} \\left(\\frac{D}{\\lambda}\\right)^{n-1} \\exp\\!\\left[ -\\left(\\frac{D}{\\lambda}\\right)^n \\right]\n$$\nNow, we can write the general expression for the $k$-th moment:\n$$\nM_k = \\int_{0}^{\\infty} D^k \\left( \\frac{n}{\\lambda} \\left(\\frac{D}{\\lambda}\\right)^{n-1} \\exp\\!\\left[ -\\left(\\frac{D}{\\lambda}\\right)^n \\right] \\right) \\,dD\n$$\nTo evaluate this integral, we perform a change of variables. Let $x = (D/\\lambda)^n$.\nFrom this substitution, we have $D = \\lambda x^{1/n}$. Differentiating with respect to $x$ gives the differential element:\n$$\ndD = \\lambda \\frac{1}{n} x^{(1/n)-1} \\,dx\n$$\nThe limits of integration remain unchanged: as $D \\to 0$, $x \\to 0$; and as $D \\to \\infty$, $x \\to \\infty$. Substituting these into the integral for $M_k$:\n$$\nM_k = \\int_{0}^{\\infty} (\\lambda x^{1/n})^k \\left( \\frac{n}{\\lambda} (x^{1/n})^{n-1} \\exp(-x) \\right) \\left( \\lambda \\frac{1}{n} x^{(1/n)-1} \\,dx \\right)\n$$\nLet us simplify the terms.\n$$\nM_k = \\int_{0}^{\\infty} \\lambda^k x^{k/n} \\cdot \\frac{n}{\\lambda} x^{(n-1)/n} \\exp(-x) \\cdot \\frac{\\lambda}{n} x^{(1-n)/n} \\,dx\n$$\nCombining the constants and the powers of $x$:\n$$\nM_k = \\lambda^k \\left(\\frac{n}{\\lambda} \\frac{\\lambda}{n}\\right) \\int_{0}^{\\infty} x^{k/n} x^{(n-1)/n} x^{(1-n)/n} \\exp(-x) \\,dx\n$$\n$$\nM_k = \\lambda^k \\int_{0}^{\\infty} x^{\\frac{k + (n-1) + (1-n)}{n}} \\exp(-x) \\,dx\n$$\n$$\nM_k = \\lambda^k \\int_{0}^{\\infty} x^{k/n} \\exp(-x) \\,dx\n$$\nThis integral is in the form of the Euler's Gamma function, $\\Gamma(z)$, which is defined as:\n$$\n\\Gamma(z) = \\int_{0}^{\\infty} t^{z-1} \\exp(-t) \\,dt\n$$\nBy comparing our integral with the definition of the Gamma function, we let $t=x$ and identify the exponent of $x$ as $z-1$.\n$$\nz - 1 = \\frac{k}{n} \\implies z = 1 + \\frac{k}{n}\n$$\nTherefore, the general expression for the $k$-th moment is:\n$$\nM_k = \\lambda^k \\Gamma\\left(1 + \\frac{k}{n}\\right)\n$$\nWe need to find $D_{32} = M_3/M_2$. We use the general formula for $k=3$ and $k=2$.\nFor the third moment ($k=3$):\n$$\nM_3 = \\lambda^3 \\Gamma\\left(1 + \\frac{3}{n}\\right)\n$$\nFor the second moment ($k=2$):\n$$\nM_2 = \\lambda^2 \\Gamma\\left(1 + \\frac{2}{n}\\right)\n$$\nFinally, we compute the ratio to find the Sauter mean diameter:\n$$\nD_{32} = \\frac{M_3}{M_2} = \\frac{\\lambda^3 \\Gamma\\left(1 + \\frac{3}{n}\\right)}{\\lambda^2 \\Gamma\\left(1 + \\frac{2}{n}\\right)}\n$$\n$$\nD_{32} = \\lambda \\frac{\\Gamma\\left(1 + \\frac{3}{n}\\right)}{\\Gamma\\left(1 + \\frac{2}{n}\\right)}\n$$\nThis is the closed-form expression for the Sauter mean diameter in terms of the Rosin-Rammler parameters $\\lambda$ and $n$. The dimensional consistency is confirmed, as $\\lambda$ has dimensions of length and the ratio of Gamma functions is dimensionless.", "answer": "$$\\boxed{\\lambda \\frac{\\Gamma\\left(1 + \\frac{3}{n}\\right)}{\\Gamma\\left(1 + \\frac{2}{n}\\right)}}$$", "id": "2524374"}, {"introduction": "Predicting where droplets land and their state upon impact is essential for designing effective spray cooling systems. A droplet's trajectory is governed by a balance of inertia, gravity, and aerodynamic drag, complicated by evaporative shrinkage during its flight. In this computational practice [@problem_id:2524403], you will construct and numerically solve the full system of differential equations, gaining core skills in multiphase flow modeling and simulation.", "problem": "A mono-disperse spray is injected downward toward a horizontal plate in a uniform gaseous crossflow. Each droplet is spherical, subject to gravity, aerodynamic drag, and evaporative shrinkage that obeys the classical quadratic diameter law. Assume constant fluid properties, a quiescent liquid core (no internal circulation effects), negligible buoyancy relative to droplet weight, and that the momentum carried by evaporated vapor does not impart a reactive force on the droplet. The gas flow is uniform and steady. The goal is to derive the governing ordinary differential equations for the droplet trajectory, then implement a numerical solver that predicts the statistical distribution of impact locations on the plate for a specified set of cases.\n\nStarting point and assumptions:\n- Coordinate system: the plate lies in the plane $y=0$ and extends infinitely in the $x$-direction; the $y$-axis is vertical with upward positive. The nozzle exit is located at $y=H$ and $x=0$. Gravity acts in the negative $y$-direction with magnitude $g$.\n- Gas crossflow: $\\mathbf{U}_{g} = (U_{\\infty}, 0)$, uniform and steady.\n- Droplet kinematics: droplet position $\\mathbf{x}(t) = (x(t), y(t))$ and velocity $\\mathbf{v}(t) = (v_{x}(t), v_{y}(t))$ evolve under Newton’s second law.\n- Drag model: spherical droplet, steady drag with coefficient $C_{D}$ given by the Schiller–Naumann correlation for particle Reynolds number $Re \\leq 10^{5}$.\n- Evaporation model: the quadratic diameter law $D^{2}(t) = D_{0}^{2} - K\\,t$ until $D$ vanishes, where $K$ is a constant with units of $\\mathrm{m^{2}/s}$.\n- Liquid density is constant, the droplet remains spherical, and gas properties are constant.\n\nTasks:\n1) From Newton’s second law, derive the ordinary differential equations governing $(x(t), y(t), v_{x}(t), v_{y}(t))$ under the above assumptions. Use the following base relations only:\n- Newton’s second law: $m \\,\\dfrac{d\\mathbf{v}}{dt} = \\mathbf{F}_{\\text{drag}} + m\\,\\mathbf{g}$.\n- Drag force: $\\mathbf{F}_{\\text{drag}} = \\dfrac{1}{2}\\,\\rho_{g}\\,C_{D}\\,A\\,\\lVert \\mathbf{w} \\rVert\\,\\mathbf{w}$, where $\\mathbf{w} = \\mathbf{U}_{g} - \\mathbf{v}$ is the relative velocity, $A = \\dfrac{\\pi D^{2}}{4}$ is the projected area, and $C_{D}$ is the drag coefficient.\n- Schiller–Naumann correlation: $C_{D} = \\dfrac{24}{Re}\\bigl(1 + 0.15\\,Re^{0.687}\\bigr)$ for $Re \\leq 10^{5}$, where $Re = \\dfrac{\\rho_{g}\\,\\lVert \\mathbf{w} \\rVert\\,D}{\\mu_{g}}$.\n- Quadratic diameter law: $D^{2}(t) = D_{0}^{2} - K\\,t$ for $t \\geq 0$, with $D(t) \\geq 0$ and instantaneous evaporation when $D(t)=0$.\n- Droplet mass: $m(t) = \\rho_{\\ell}\\,\\dfrac{\\pi}{6}\\,D^{3}(t)$.\n- Kinematics: $\\dfrac{d x}{dt} = v_{x}$ and $\\dfrac{d y}{dt} = v_{y}$.\nClearly show how the time-varying diameter enters the acceleration through both the drag force and the droplet mass.\n\n2) Implement a numerical solver that advances each droplet trajectory until one of the following termination events occurs:\n- Impact: $y(t)$ crosses $0$ from above with $D(t) > 0$. Record the impact location $x_{\\mathrm{imp}}$ by linearly interpolating between the last step above the plate and the first step at or below the plate.\n- Complete evaporation: $D(t)$ reaches $0$ before impact; the droplet is considered a non-impactor.\n- Final time reached: $t$ reaches a specified maximum time $t_{\\max}$ without impact or complete evaporation; treat as a non-impactor.\nUse a fixed-step explicit midpoint method (second-order Runge–Kutta) to integrate the equations. At each step of size $\\Delta t$, update the diameter via the quadratic law, and recompute the mass and drag consistently with the midpoint state. If the Reynolds number is effectively zero, take $\\mathbf{F}_{\\text{drag}} = \\mathbf{0}$. Use a constant time step for all trajectories and cases.\n\n3) Initial conditions and sampling:\n- For each test case, simulate $N$ droplets. For each droplet, independently sample the initial diameter $D_{0}$ uniformly on the interval $[D_{\\min}, D_{\\max}]$.\n- The initial droplet center is at $x(0)=0$ and $y(0)=H$.\n- The initial droplet speed magnitude is $V_{0}$. The initial direction is tilted from the vertical by an angle $\\theta$ in the $x$–$y$ plane, sampled uniformly on $[-\\alpha, +\\alpha]$, where $\\alpha$ is given in degrees; the program must convert it to radians. The initial velocity components are $v_{x}(0) = V_{0}\\,\\sin\\theta$ and $v_{y}(0) = -V_{0}\\,\\cos\\theta$.\n- To ensure reproducibility, use a fixed pseudorandom seed equal to $12345$ for all sampling.\n\n4) Output specification:\n- For each test case, aggregate the $x$-locations of droplets that impact the plate into the sample mean $\\bar{x}$ and the sample standard deviation $s_{x}$ (population standard deviation). Let $f$ denote the fraction (as a decimal between $0$ and $1$) of droplets that impact the plate. If no droplets impact, define $\\bar{x}=0$ and $s_{x}=0$ and $f=0$.\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets. For the $i$-th test case, output the triple $(\\bar{x}_{i}, s_{x,i}, f_{i})$ in order, and concatenate the results for all test cases into one flattened list, e.g., $[\\bar{x}_{1}, s_{x,1}, f_{1}, \\bar{x}_{2}, s_{x,2}, f_{2}, \\dots]$.\n- All distances must be in meters, speeds in meters per second, dynamic viscosity in Pascal-seconds, densities in kilograms per cubic meter, gravity in meters per second squared, time in seconds, and evaporation constant in square meters per second. Express $\\bar{x}$ and $s_{x}$ in meters, and $f$ as a decimal (not a percentage).\n\nPhysical properties and constants (use identical values for all test cases):\n- Gas density: $\\rho_{g} = 1.2\\ \\mathrm{kg/m^{3}}$.\n- Gas dynamic viscosity: $\\mu_{g} = 1.8\\times 10^{-5}\\ \\mathrm{Pa\\cdot s}$.\n- Liquid density: $\\rho_{\\ell} = 997\\ \\mathrm{kg/m^{3}}$.\n- Gravitational acceleration magnitude: $g = 9.81\\ \\mathrm{m/s^{2}}$.\n- Time step: $\\Delta t = 5\\times 10^{-4}\\ \\mathrm{s}$.\n- Maximum simulation time: $t_{\\max} = 0.5\\ \\mathrm{s}$.\n\nTest suite:\nProvide results for the following four test cases. In each case, output the triple $(\\bar{x}, s_{x}, f)$ as specified and concatenate them into a single flat list, in the order cases $1$ through $4$.\n\n- Case $1$ (baseline crossflow, weak evaporation):\n  - $N = 150$, $H = 0.2\\ \\mathrm{m}$, $U_{\\infty} = 5\\ \\mathrm{m/s}$, $V_{0} = 6\\ \\mathrm{m/s}$, $\\alpha = 10$ degrees, $D_{\\min} = 50\\times 10^{-6}\\ \\mathrm{m}$, $D_{\\max} = 150\\times 10^{-6}\\ \\mathrm{m}$, $K = 1.0\\times 10^{-9}\\ \\mathrm{m^{2}/s}$.\n\n- Case $2$ (strong crossflow, weak evaporation):\n  - $N = 150$, $H = 0.2\\ \\mathrm{m}$, $U_{\\infty} = 20\\ \\mathrm{m/s}$, $V_{0} = 6\\ \\mathrm{m/s}$, $\\alpha = 10$ degrees, $D_{\\min} = 50\\times 10^{-6}\\ \\mathrm{m}$, $D_{\\max} = 150\\times 10^{-6}\\ \\mathrm{m}$, $K = 1.0\\times 10^{-9}\\ \\mathrm{m^{2}/s}$.\n\n- Case $3$ (moderate crossflow, strong evaporation, smaller droplets):\n  - $N = 150$, $H = 0.2\\ \\mathrm{m}$, $U_{\\infty} = 5\\ \\mathrm{m/s}$, $V_{0} = 6\\ \\mathrm{m/s}$, $\\alpha = 10$ degrees, $D_{\\min} = 40\\times 10^{-6}\\ \\mathrm{m}$, $D_{\\max} = 100\\times 10^{-6}\\ \\mathrm{m}$, $K = 5.0\\times 10^{-8}\\ \\mathrm{m^{2}/s}$.\n\n- Case $4$ (no crossflow, moderate evaporation, narrow spray):\n  - $N = 150$, $H = 0.2\\ \\mathrm{m}$, $U_{\\infty} = 0\\ \\mathrm{m/s}$, $V_{0} = 6\\ \\mathrm{m/s}$, $\\alpha = 5$ degrees, $D_{\\min} = 50\\times 10^{-6}\\ \\mathrm{m}$, $D_{\\max} = 150\\times 10^{-6}\\ \\mathrm{m}$, $K = 1.0\\times 10^{-8}\\ \\mathrm{m^{2}/s}$.\n\nYour program must implement the above model and produce exactly one line:\n- A single Python list literal with $12$ floating-point numbers: $[\\bar{x}_{1}, s_{x,1}, f_{1}, \\bar{x}_{2}, s_{x,2}, f_{2}, \\bar{x}_{3}, s_{x,3}, f_{3}, \\bar{x}_{4}, s_{x,4}, f_{4}]$.", "solution": "The problem statement is subjected to validation before a solution is attempted.\n\nStep 1: Extract Givens\n\n- **Coordinate System**: Plate at $y=0$, nozzle at $(0, H)$. Gravity $\\mathbf{g} = (0, -g)$.\n- **Gas Flow**: Uniform crossflow $\\mathbf{U}_{g} = (U_{\\infty}, 0)$.\n- **Droplet Kinematics**: Position $\\mathbf{x}(t) = (x(t), y(t))$, velocity $\\mathbf{v}(t) = (v_{x}(t), v_{y}(t))$.\n- **Governing Equation (Newton's Second Law)**: $m \\,\\dfrac{d\\mathbf{v}}{dt} = \\mathbf{F}_{\\text{drag}} + m\\,\\mathbf{g}$.\n- **Drag Force**: $\\mathbf{F}_{\\text{drag}} = \\dfrac{1}{2}\\,\\rho_{g}\\,C_{D}\\,A\\,\\lVert \\mathbf{w} \\rVert\\,\\mathbf{w}$, where $\\mathbf{w} = \\mathbf{U}_{g} - \\mathbf{v}$.\n- **Projected Area**: $A = \\dfrac{\\pi D^{2}}{4}$.\n- **Drag Coefficient (Schiller–Naumann)**: $C_{D} = \\dfrac{24}{Re}\\bigl(1 + 0.15\\,Re^{0.687}\\bigr)$ for $Re \\leq 10^{5}$.\n- **Reynolds Number**: $Re = \\dfrac{\\rho_{g}\\,\\lVert \\mathbf{w} \\rVert\\,D}{\\mu_{g}}$.\n- **Evaporation Law**: $D^{2}(t) = D_{0}^{2} - K\\,t$, with $D(t) \\geq 0$.\n- **Droplet Mass**: $m(t) = \\rho_{\\ell}\\,\\dfrac{\\pi}{6}\\,D^{3}(t)$.\n- **Kinematic Relations**: $\\dfrac{d x}{dt} = v_{x}$, $\\dfrac{d y}{dt} = v_{y}$.\n- **Assumptions**: Constant fluid properties, quiescent liquid core, negligible buoyancy, no reactive force from evaporation, spherical droplet shape.\n- **Numerical Method**: Fixed-step explicit midpoint method (RK2) with step size $\\Delta t$.\n- **Termination Conditions**: Impact ($y(t)$ crosses $0$), complete evaporation ($D(t)$ reaches $0$), or max time ($t$ reaches $t_{\\max}$).\n- **Initial Conditions**:\n  - Position: $(x(0), y(0)) = (0, H)$.\n  - Velocity: $v_{x}(0) = V_{0}\\,\\sin\\theta$, $v_{y}(0) = -V_{0}\\,\\cos\\theta$.\n  - Initial diameter $D_0$ sampled uniformly from $[D_{\\min}, D_{\\max}]$.\n  - Initial angle $\\theta$ sampled uniformly from $[-\\alpha, +\\alpha]$.\n- **Random Sampling**: Fixed seed of $12345$ for $N$ droplets per case.\n- **Output**: For each case, compute sample mean $\\bar{x}$, population standard deviation $s_x$, and impaction fraction $f$ of impact locations $x_{\\mathrm{imp}}$. If no impacts, $(\\bar{x}, s_{x}, f) = (0, 0, 0)$.\n- **Physical Constants**: $\\rho_{g} = 1.2\\ \\mathrm{kg/m^{3}}$, $\\mu_{g} = 1.8\\times 10^{-5}\\ \\mathrm{Pa\\cdot s}$, $\\rho_{\\ell} = 997\\ \\mathrm{kg/m^{3}}$, $g = 9.81\\ \\mathrm{m/s^{2}}$.\n- **Numerical Parameters**: $\\Delta t = 5\\times 10^{-4}\\ \\mathrm{s}$, $t_{\\max} = 0.5\\ \\mathrm{s}$.\n- **Test Cases**: Four specific cases are defined with parameters $(N, H, U_{\\infty}, V_{0}, \\alpha, D_{\\min}, D_{\\max}, K)$.\n\nStep 2: Validate Using Extracted Givens\n\nThe problem is reviewed against the validation criteria.\n\n- **Scientifically Grounded**: The problem is based on fundamental principles of classical mechanics (Newton's second law) and fluid dynamics. The models for aerodynamic drag (Schiller-Naumann correlation) and evaporation (quadratic diameter law) are standard, well-established approximations in the field of multiphase flows and spray physics. The problem is free of pseudoscience and factually sound.\n- **Well-Posed**: The problem specifies a system of ordinary differential equations (ODEs), provides complete initial conditions for the state variables, and defines clear termination conditions for the numerical integration. This structure ensures that a unique numerical solution can be computed for each droplet trajectory. The problem is well-posed for numerical solution.\n- **Objective**: The problem is stated using precise, quantitative, and unambiguous terminology. All models, parameters, and tasks are defined objectively. There are no subjective or opinion-based statements.\n- **Completeness and Consistency**: All necessary physical constants, model parameters, initial conditions, and numerical specifications are provided. There are no missing data or contradictory constraints. The units specified are consistent within the SI system.\n- **Realism**: The physical properties provided (densities, viscosity) are realistic for air and water at standard conditions. The droplet sizes, velocities, and geometrical setup are plausible for a spray cooling application. The problem is scientifically feasible.\n- **Structure and Formalizability**: The problem is well-structured, breaking down the task into a logical sequence: model derivation, numerical implementation, and application to test cases. The physical setup is clearly described and can be formalized into a mathematical model without ambiguity.\n- **Triviality**: The problem is non-trivial. It involves a system of coupled, nonlinear ODEs where the droplet mass is time-dependent. The solution requires numerical integration and statistical analysis of a population of trajectories, which is a substantive computational physics task.\n\nStep 3: Verdict and Action\n\nThe problem is **valid**. It is scientifically sound, well-posed, and complete. A solution will be provided.\n\n**1. Derivation of the Governing Equations**\n\nThe motion of the droplet is governed by Newton's second law, as specified:\n$$\nm(t) \\frac{d\\mathbf{v}}{dt} = \\mathbf{F}_{\\text{drag}} + m(t)\\mathbf{g}\n$$\nThe state of the droplet at time $t$ is described by its position $\\mathbf{x}(t)=(x(t), y(t))$ and velocity $\\mathbf{v}(t)=(v_x(t), v_y(t))$. The time rate of change of the state is a system of four first-order ODEs. The first two are the kinematic relations:\n$$\n\\frac{dx}{dt} = v_x(t)\n$$\n$$\n\\frac{dy}{dt} = v_y(t)\n$$\nThe equations for the acceleration components are derived by expanding the vector equation of motion. The gravitational acceleration vector is $\\mathbf{g} = (0, -g)$. The droplet acceleration is thus:\n$$\n\\frac{d\\mathbf{v}}{dt} = \\frac{\\mathbf{F}_{\\text{drag}}}{m(t)} + \\mathbf{g}\n$$\nThe drag force $\\mathbf{F}_{\\text{drag}}$ depends on the relative velocity $\\mathbf{w} = \\mathbf{U}_g - \\mathbf{v}$. With $\\mathbf{U}_g = (U_\\infty, 0)$ and $\\mathbf{v} = (v_x, v_y)$, the relative velocity is $\\mathbf{w} = (U_\\infty - v_x, -v_y)$. Its magnitude is $\\lVert\\mathbf{w}\\rVert = \\sqrt{(U_\\infty - v_x)^2 + v_y^2}$.\n\nThe drag force is $\\mathbf{F}_{\\text{drag}} = \\frac{1}{2}\\rho_g C_D A \\lVert\\mathbf{w}\\rVert \\mathbf{w}$. Its components are:\n$$\n(\\mathbf{F}_{\\text{drag}})_x = \\frac{1}{2}\\rho_g C_D A \\lVert\\mathbf{w}\\rVert (U_\\infty - v_x)\n$$\n$$\n(\\mathbf{F}_{\\text{drag}})_y = \\frac{1}{2}\\rho_g C_D A \\lVert\\mathbf{w}\\rVert (-v_y)\n$$\nThe droplet's mass $m(t)$ and projected area $A(t)$ are functions of its time-varying diameter $D(t)$:\n$$\nm(t) = \\rho_\\ell \\frac{\\pi}{6} D(t)^3\n$$\n$$\nA(t) = \\frac{\\pi}{4} D(t)^2\n$$\nSubstituting these expressions into the acceleration equations yields:\n$$\n\\frac{dv_x}{dt} = \\frac{(\\mathbf{F}_{\\text{drag}})_x}{m(t)} = \\frac{\\frac{1}{2}\\rho_g C_D (\\frac{\\pi}{4} D^2) \\lVert\\mathbf{w}\\rVert (U_\\infty - v_x)}{\\rho_\\ell (\\frac{\\pi}{6} D^3)} = \\frac{3 \\rho_g}{4 \\rho_\\ell D(t)} C_D \\lVert\\mathbf{w}\\rVert (U_\\infty - v_x)\n$$\n$$\n\\frac{dv_y}{dt} = \\frac{(\\mathbf{F}_{\\text{drag}})_y}{m(t)} - g = \\frac{\\frac{1}{2}\\rho_g C_D (\\frac{\\pi}{4} D^2) \\lVert\\mathbf{w}\\rVert (-v_y)}{\\rho_\\ell (\\frac{\\pi}{6} D^3)} - g = \\frac{3 \\rho_g}{4 \\rho_\\ell D(t)} C_D \\lVert\\mathbf{w}\\rVert (-v_y) - g\n$$\nThe diameter $D(t)$ evolves according to the quadratic law, $D^2(t) = D_0^2 - Kt$, which implies $D(t) = \\sqrt{\\max(0, D_0^2 - Kt)}$. The drag coefficient $C_D$ is determined by the Schiller-Naumann correlation, which depends on the particle Reynolds number $Re = \\frac{\\rho_g \\lVert\\mathbf{w}\\rVert D(t)}{\\mu_g}$.\n\nThe complete system of ODEs for the state vector $\\mathbf{S}(t) = [x(t), y(t), v_x(t), v_y(t)]^T$ is:\n$$\n\\frac{d\\mathbf{S}}{dt} =\n\\begin{pmatrix}\nv_x \\\\\nv_y \\\\\n\\frac{3 \\rho_g}{4 \\rho_\\ell D(t)} C_D \\lVert\\mathbf{w}\\rVert (U_\\infty - v_x) \\\\\n\\frac{3 \\rho_g}{4 \\rho_\\ell D(t)} C_D \\lVert\\mathbf{w}\\rVert (-v_y) - g\n\\end{pmatrix}\n$$\nThis system, denoted $\\frac{d\\mathbf{S}}{dt} = f(t, \\mathbf{S})$, is solved numerically.\n\n**2. Numerical Integration Scheme**\n\nThe explicit midpoint method (second-order Runge-Kutta, RK2) is used to advance the solution from time $t_n$ to $t_{n+1} = t_n + \\Delta t$. Let $\\mathbf{S}_n$ be the state vector at time $t_n$.\n\n1.  **Evaluate derivative at the start ($k_1$)**: Compute the derivative vector $f(t_n, \\mathbf{S}_n)$. This involves calculating $D(t_n) = \\sqrt{D_0^2 - K t_n}$, followed by $\\mathbf{w}_n$, $Re_n$, and $C_{D,n}$ based on the state $\\mathbf{S}_n$.\n    $$\n    \\mathbf{k}_1 = f(t_n, \\mathbf{S}_n)\n    $$\n2.  **Estimate midpoint state**: Advance the state to the midpoint in time, $t_{mid} = t_n + \\Delta t/2$, using the initial slope $\\mathbf{k}_1$.\n    $$\n    \\mathbf{S}_{mid} = \\mathbf{S}_n + \\frac{\\Delta t}{2} \\mathbf{k}_1\n    $$\n3.  **Evaluate derivative at the midpoint ($k_2$)**: Compute the derivative vector $f(t_{mid}, \\mathbf{S}_{mid})$. This requires evaluating all quantities at the midpoint: $D(t_{mid}) = \\sqrt{D_0^2 - K t_{mid}}$, and then $\\mathbf{w}_{mid}$, $Re_{mid}$, and $C_{D,mid}$ based on the state $\\mathbf{S}_{mid}$.\n    $$\n    \\mathbf{k}_2 = f(t_{mid}, \\mathbf{S}_{mid})\n    $$\n4.  **Advance to the next step**: Update the state from $\\mathbf{S}_n$ to $\\mathbf{S}_{n+1}$ using the midpoint derivative $\\mathbf{k}_2$.\n    $$\n    \\mathbf{S}_{n+1} = \\mathbf{S}_n + \\Delta t \\, \\mathbf{k}_2\n    $$\nThis process is repeated in a loop until a termination condition is met.\n\n- **Impact**: If $y_{n+1} \\leq 0$ while $y_n > 0$, the droplet has impacted the plate. The impact location $x_{imp}$ is found by linear interpolation:\n  $$\n  x_{imp} = x_n + (x_{n+1} - x_n) \\frac{0 - y_n}{y_{n+1} - y_n} = x_n - (v_x)_{mid} \\Delta t \\frac{y_n}{y_{n+1}-y_n}\n  $$\n- **Evaporation**: The droplet fully evaporates at time $t_{evap} = D_0^2 / K$. If at any step $t_{n+1} \\geq t_{evap}$, the droplet is considered evaporated and the simulation for it terminates.\n- **Max Time**: If $t_{n+1} \\geq t_{max}$ without impact or evaporation, the simulation terminates.\n\n**3. Simulation and Statistical Analysis**\n\nFor each of the four test cases, the following procedure is executed:\n\n1.  Initialize a pseudorandom number generator with the specified seed of $12345$.\n2.  An empty list is created to store the impact locations, $x_{imp}$.\n3.  A loop runs for $N$ droplets. In each iteration:\n    a. Sample an initial diameter $D_0$ from a uniform distribution over $[D_{min}, D_{max}]$.\n    b. Sample an initial injection angle $\\theta_{deg}$ from a uniform distribution over $[-\\alpha, +\\alpha]$. Convert $\\theta_{deg}$ to radians: $\\theta_{rad} = \\theta_{deg} \\cdot \\pi / 180$.\n    c. Set the initial state vector $\\mathbf{S}_0 = [0, H, V_0 \\sin(\\theta_{rad}), -V_0 \\cos(\\theta_{rad})]^T$.\n    d. Numerically integrate the trajectory using the RK2 method described above until a termination condition is met.\n    e. If the droplet impacts the plate, calculate $x_{imp}$ and add it to the list.\n4.  After simulating all $N$ droplets, calculate the required statistics:\n    a. Let $N_{imp}$ be the number of recorded impact locations. The impaction fraction is $f = N_{imp} / N$.\n    b. If $N_{imp} > 0$, compute the sample mean $\\bar{x}$ and the population standard deviation $s_x$ of the collected $x_{imp}$ values. The population standard deviation is used, with the sum of squared differences divided by $N_{imp}$.\n    c. If $N_{imp} = 0$, set $\\bar{x} = 0$, $s_x = 0$, and $f = 0$.\n5.  The resulting triplet $(\\bar{x}, s_x, f)$ for each case is stored. Finally, all triplets are flattened into a single list for output, as specified.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the droplet trajectory problem according to the specified model and cases.\n    \"\"\"\n    \n    # --- Physical and Numerical Constants ---\n    RHO_G = 1.2  # Gas density (kg/m^3)\n    MU_G = 1.8e-5  # Gas dynamic viscosity (Pa.s)\n    RHO_L = 997.0  # Liquid density (kg/m^3)\n    G = 9.81  # Gravitational acceleration (m/s^2)\n    \n    DT = 5e-4  # Time step (s)\n    T_MAX = 0.5  # Maximum simulation time (s)\n    \n    # --- Test Cases ---\n    test_cases = [\n        # Case 1: baseline crossflow, weak evaporation\n        {'N': 150, 'H': 0.2, 'U_inf': 5.0, 'V0': 6.0, 'alpha_deg': 10,\n         'D_min': 50e-6, 'D_max': 150e-6, 'K': 1.0e-9},\n        # Case 2: strong crossflow, weak evaporation\n        {'N': 150, 'H': 0.2, 'U_inf': 20.0, 'V0': 6.0, 'alpha_deg': 10,\n         'D_min': 50e-6, 'D_max': 150e-6, 'K': 1.0e-9},\n        # Case 3: moderate crossflow, strong evaporation, smaller droplets\n        {'N': 150, 'H': 0.2, 'U_inf': 5.0, 'V0': 6.0, 'alpha_deg': 10,\n         'D_min': 40e-6, 'D_max': 100e-6, 'K': 5.0e-8},\n        # Case 4: no crossflow, moderate evaporation, narrow spray\n        {'N': 150, 'H': 0.2, 'U_inf': 0.0, 'V0': 6.0, 'alpha_deg': 5,\n         'D_min': 50e-6, 'D_max': 150e-6, 'K': 1.0e-8},\n    ]\n\n    # --- RNG for reproducible sampling ---\n    rng = np.random.default_rng(12345)\n\n    final_results = []\n\n    for case in test_cases:\n\n        def get_derivatives(t, state, D0, K, U_inf):\n            \"\"\"\n            Computes the right-hand side of the ODE system dS/dt = f(t, S).\n            S = [x, y, vx, vy]\n            \"\"\"\n            _x, _y, vx, vy = state\n\n            # Diameter at time t\n            D2 = D0**2 - K * t\n            if D2 <= 0:\n                D = 0.0\n            else:\n                D = np.sqrt(D2)\n\n            # If droplet has evaporated, no more dynamics\n            if D <= 1e-9: # Effectively zero diameter\n                return np.array([vx, vy, 0.0, 0.0])\n\n            # Relative velocity\n            wx = U_inf - vx\n            wy = -vy\n            w_norm = np.sqrt(wx**2 + wy**2)\n            \n            # Reynolds number and drag coefficient\n            if w_norm < 1e-9: # Effectively zero relative velocity\n                ax, ay = 0.0, -G\n            else:\n                Re = RHO_G * w_norm * D / MU_G\n                if Re < 1e-9: # Stokes regime limit\n                    CD = 24.0 / Re if Re > 0 else 0.0\n                elif Re > 1e5: # Schiller-Naumann limit\n                    CD = 0.44\n                else:\n                    CD = (24.0 / Re) * (1.0 + 0.15 * Re**0.687)\n            \n                # Drag term pre-factor\n                drag_factor = (3.0 * RHO_G) / (4.0 * RHO_L * D) * CD * w_norm\n                \n                # Accelerations\n                ax = drag_factor * wx\n                ay = drag_factor * wy - G\n                \n            return np.array([vx, vy, ax, ay])\n\n        def simulate_droplet(D0, vx0, vy0, case_params):\n            \"\"\"\n            Simulates a single droplet trajectory using the RK2 midpoint method.\n            \"\"\"\n            H = case_params['H']\n            K = case_params['K']\n            U_inf = case_params['U_inf']\n            \n            t = 0.0\n            state = np.array([0.0, H, vx0, vy0])\n            \n            t_evap = D0**2 / K\n\n            while t < T_MAX:\n                if t >= t_evap:\n                    return None # Evaporated before this step\n\n                y_prev = state[1]\n\n                # RK2 Midpoint Method\n                k1 = get_derivatives(t, state, D0, K, U_inf)\n                \n                t_mid = t + DT / 2.0\n                if t_mid >= t_evap:\n                    return None # Evaporates mid-step\n                \n                state_mid = state + 0.5 * DT * k1\n                k2 = get_derivatives(t_mid, state_mid, D0, K, U_inf)\n                \n                state_next = state + DT * k2\n                t_next = t + DT\n\n                # Check for impact\n                if state_next[1] <= 0 and y_prev > 0:\n                    # Linear interpolation for impact location\n                    y0, y1 = y_prev, state_next[1]\n                    x0, x1 = state[0], state_next[0]\n                    \n                    if np.abs(y1 - y0) < 1e-9:\n                        x_imp = x1\n                    else:\n                        x_imp = x0 + (x1 - x0) * (0.0 - y0) / (y1 - y0)\n                    return x_imp\n\n                state = state_next\n                t = t_next\n                \n            return None # Reached t_max without impact\n\n        # --- Main simulation loop for one case ---\n        N = case['N']\n        D0_samples = rng.uniform(case['D_min'], case['D_max'], N)\n        theta_samples = np.deg2rad(rng.uniform(-case['alpha_deg'], case['alpha_deg'], N))\n        \n        impact_locations = []\n        for i in range(N):\n            D0 = D0_samples[i]\n            theta = theta_samples[i]\n            vx0 = case['V0'] * np.sin(theta)\n            vy0 = -case['V0'] * np.cos(theta)\n            \n            x_imp = simulate_droplet(D0, vx0, vy0, case)\n            if x_imp is not None:\n                impact_locations.append(x_imp)\n        \n        # --- Calculate and store statistics ---\n        num_impacts = len(impact_locations)\n        if num_impacts > 0:\n            impaction_fraction = num_impacts / N\n            mean_x = np.mean(impact_locations)\n            std_dev_x = np.std(impact_locations) # Population std dev (ddof=0)\n            final_results.extend([mean_x, std_dev_x, impaction_fraction])\n        else:\n            final_results.extend([0.0, 0.0, 0.0])\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, final_results))}]\")\n\nsolve()\n\n```", "id": "2524403"}, {"introduction": "Experimental validation is the cornerstone of engineering science, but every measurement has uncertainty. In spray cooling, the heat transfer coefficient, $h$, is often inferred from temperature measurements, making its accuracy dependent on the precision of a number of input parameters. This practical exercise [@problem_id:2524339] will guide you through a rigorous uncertainty analysis, demonstrating how to trace and quantify the propagation of experimental errors to a final derived quantity.", "problem": "An infrared (IR) thermography-based spray cooling experiment estimates the convective heat transfer coefficient $h$ on a water-cooled copper target using the definition $h = q''/(T_{s} - T_{\\mathrm{ref}})$, where $q''$ is the surface heat flux, $T_{s}$ is the surface temperature inferred from IR radiation, and $T_{\\mathrm{ref}}$ is the coolant reference temperature. Assume a gray, diffuse, opaque surface surrounded by an isothermal environment at temperature $T_{\\mathrm{env}}$, and a quasi-steady one-dimensional conduction model relates the surface and the instrumented backside of a plate. You will propagate uncertainty from camera calibration, surface emissivity, and conduction model parameters into $h$ using first principles and the first-order law of propagation of uncertainty.\n\nStart from the following fundamental relations:\n- Hemispherical emissive-radiative balance for a gray, diffuse surface: the band-integrated hemispherical radiative exitance leaving the surface is modeled as $M_{\\mathrm{out}} = \\epsilon \\sigma T_{s}^{4} + (1-\\epsilon)\\,\\sigma T_{\\mathrm{env}}^{4}$, where $\\epsilon$ is the surface emissivity and $\\sigma$ is the Stefan–Boltzmann constant.\n- A linear radiometric calibration maps the camera signal $S$ (counts) to $M_{\\mathrm{out}}$ via $M_{\\mathrm{out}} = (S - \\beta)/\\alpha$, where $\\alpha$ (gain) and $\\beta$ (offset) are calibration parameters.\n- Fourier’s law of heat conduction in one dimension for a plate of thickness $\\delta$: $q'' = k\\,(T_{b} - T_{s})/\\delta$, where $k$ is the thermal conductivity and $T_{b}$ is the measured backside temperature.\n- The convective heat transfer coefficient is $h = q''/(T_{s}-T_{\\mathrm{ref}})$.\n\nAssume the following known values and standard uncertainties (all input quantities are uncorrelated):\n- Camera signal $S = 17600$ counts (uncertainty negligible), calibration gain $\\alpha = 20$ counts$\\cdot$$(\\mathrm{W}\\,\\mathrm{m}^{-2})^{-1}$ with standard uncertainty $u_{\\alpha} = 0.05$ counts$\\cdot$$(\\mathrm{W}\\,\\mathrm{m}^{-2})^{-1}$, calibration offset $\\beta = 1000$ counts with standard uncertainty $u_{\\beta} = 5$ counts.\n- Emissivity $\\epsilon = 0.95$ with standard uncertainty $u_{\\epsilon} = 0.01$.\n- Environment temperature $T_{\\mathrm{env}} = 295\\,\\mathrm{K}$, coolant reference temperature $T_{\\mathrm{ref}} = 293\\,\\mathrm{K}$ (both treated as exact).\n- Backside temperature $T_{b} = 360\\,\\mathrm{K}$ (treated as exact for the purpose of this propagation).\n- Plate thickness $\\delta = 0.002\\,\\mathrm{m}$ with standard uncertainty $u_{\\delta} = 1.0\\times 10^{-5}\\,\\mathrm{m}$.\n- Thermal conductivity $k = 400\\,\\mathrm{W\\cdot m^{-1}\\cdot K^{-1}}$ with standard uncertainty $u_{k} = 5\\,\\mathrm{W\\cdot m^{-1}\\cdot K^{-1}}$.\n- Stefan–Boltzmann constant $\\sigma = 5.670374419\\times 10^{-8}\\,\\mathrm{W\\cdot m^{-2}\\cdot K^{-4}}$ (treat as exact).\n\nTasks:\n- From the stated laws, derive $T_{s}$ as a function of $\\alpha$, $\\beta$, $\\epsilon$, $\\sigma$, $S$, and $T_{\\mathrm{env}}$ without invoking any pre-derived inversion shortcuts.\n- Derive $h$ as an explicit function $h(\\alpha,\\beta,\\epsilon,k,\\delta; S,T_{b},T_{\\mathrm{env}},T_{\\mathrm{ref}},\\sigma)$.\n- Using the first-order law of propagation of uncertainty for uncorrelated inputs, derive the combined standard uncertainty $u_{h}$ in terms of the sensitivities $\\partial h/\\partial x_{i}$ for $x_{i}\\in\\{\\alpha,\\beta,\\epsilon,k,\\delta\\}$ and the given standard uncertainties.\n- Evaluate $u_{h}$ numerically at the given nominal values. Round your final reported value of $u_{h}$ to $3$ significant figures. Express the final $u_{h}$ in $\\mathrm{W\\cdot m^{-2}\\cdot K^{-1}}$.", "solution": "The problem as stated is subjected to validation before any attempt at a solution.\n\nThe givens are extracted verbatim from the problem statement:\n- Fundamental relations:\n    - $h = q''/(T_{s} - T_{\\mathrm{ref}})$\n    - $M_{\\mathrm{out}} = \\epsilon \\sigma T_{s}^{4} + (1-\\epsilon)\\,\\sigma T_{\\mathrm{env}}^{4}$\n    - $M_{\\mathrm{out}} = (S - \\beta)/\\alpha$\n    - $q'' = k\\,(T_{b} - T_{s})/\\delta$\n- Values and uncertainties (uncorrelated):\n    - Camera signal: $S = 17600$ (negligible uncertainty)\n    - Calibration gain: $\\alpha = 20$ counts$\\cdot(\\mathrm{W}\\,\\mathrm{m}^{-2})^{-1}$, $u_{\\alpha} = 0.05$ counts$\\cdot(\\mathrm{W}\\,\\mathrm{m}^{-2})^{-1}$\n    - Calibration offset: $\\beta = 1000$ counts, $u_{\\beta} = 5$ counts\n    - Emissivity: $\\epsilon = 0.95$, $u_{\\epsilon} = 0.01$\n    - Environment temperature: $T_{\\mathrm{env}} = 295\\,\\mathrm{K}$ (exact)\n    - Coolant reference temperature: $T_{\\mathrm{ref}} = 293\\,\\mathrm{K}$ (exact)\n    - Backside temperature: $T_{b} = 360\\,\\mathrm{K}$ (exact)\n    - Plate thickness: $\\delta = 0.002\\,\\mathrm{m}$, $u_{\\delta} = 1.0\\times 10^{-5}\\,\\mathrm{m}$\n    - Thermal conductivity: $k = 400\\,\\mathrm{W\\cdot m^{-1}\\cdot K^{-1}}$, $u_{k} = 5\\,\\mathrm{W\\cdot m^{-1}\\cdot K^{-1}}$\n    - Stefan–Boltzmann constant: $\\sigma = 5.670374419\\times 10^{-8}\\,\\mathrm{W\\cdot m^{-2}\\cdot K^{-4}}$ (exact)\n\nThe problem is evaluated for validity. It is scientifically grounded in the principles of heat and mass transfer, specifically conduction, convection, and radiation. The formulation relies on standard, well-established physical laws (Fourier's Law, Stefan-Boltzmann Law). The problem is well-posed, providing all necessary information, definitions, and data for a unique solution. The language is objective and precise. The numerical values are physically plausible for a spray cooling experiment on a copper target. The problem is a non-trivial application of uncertainty analysis requiring systematic derivation and calculation. Therefore, the problem is deemed valid and a solution will be furnished.\n\nThe tasks will be addressed in sequence.\n\nFirst, we derive the surface temperature $T_{s}$. The radiative exitance $M_{\\mathrm{out}}$ is given by two relations, one from radiative balance and one from camera calibration. Equating them yields:\n$$\n\\epsilon \\sigma T_{s}^{4} + (1-\\epsilon)\\,\\sigma T_{\\mathrm{env}}^{4} = \\frac{S - \\beta}{\\alpha}\n$$\nWe solve for $T_s$. The term involving $T_s$ is isolated:\n$$\n\\epsilon \\sigma T_{s}^{4} = \\frac{S - \\beta}{\\alpha} - (1-\\epsilon)\\,\\sigma T_{\\mathrm{env}}^{4}\n$$\nThis leads to the expression for $T_{s}^{4}$:\n$$\nT_{s}^{4} = \\frac{1}{\\epsilon \\sigma} \\left( \\frac{S - \\beta}{\\alpha} - (1-\\epsilon)\\,\\sigma T_{\\mathrm{env}}^{4} \\right)\n$$\nTaking the fourth root gives the desired expression for $T_s$ as a function of the specified variables:\n$$\nT_{s} = \\left[ \\frac{1}{\\epsilon \\sigma} \\left( \\frac{S - \\beta}{\\alpha} - (1-\\epsilon)\\,\\sigma T_{\\mathrm{env}}^{4} \\right) \\right]^{1/4}\n$$\n\nSecond, we derive the explicit function for the convective heat transfer coefficient, $h$. We begin with the definition of $h$:\n$$\nh = \\frac{q''}{T_{s} - T_{\\mathrm{ref}}}\n$$\nWe substitute the one-dimensional Fourier's law for the heat flux, $q'' = k\\,(T_{b} - T_{s})/\\delta$:\n$$\nh = \\frac{k(T_{b} - T_{s})}{\\delta(T_{s} - T_{\\mathrm{ref}})}\n$$\nFinally, we substitute the previously derived expression for $T_s$ to obtain $h$ as a comprehensive function of all its independent input quantities:\n$$\nh(\\alpha,\\beta,\\epsilon,k,\\delta; S,T_{b},T_{\\mathrm{env}},T_{\\mathrm{ref}},\\sigma) = \\frac{k\\left(T_b - \\left[ \\frac{1}{\\epsilon \\sigma} \\left( \\frac{S - \\beta}{\\alpha} - (1-\\epsilon)\\,\\sigma T_{\\mathrm{env}}^{4} \\right) \\right]^{1/4}\\right)}{\\delta\\left(\\left[ \\frac{1}{\\epsilon \\sigma} \\left( \\frac{S - \\beta}{\\alpha} - (1-\\epsilon)\\,\\sigma T_{\\mathrm{env}}^{4} \\right) \\right]^{1/4} - T_{\\mathrm{ref}}\\right)}\n$$\n\nThird, we derive the combined standard uncertainty $u_h$. For uncorrelated input quantities $x_i \\in \\{\\alpha, \\beta, \\epsilon, k, \\delta\\}$, the first-order law of propagation of uncertainty states:\n$$\nu_{h}^{2} = \\sum_{i} \\left(\\frac{\\partial h}{\\partial x_i} u_{x_i}\\right)^2 = \\left(\\frac{\\partial h}{\\partial \\alpha}\\right)^2 u_{\\alpha}^2 + \\left(\\frac{\\partial h}{\\partial \\beta}\\right)^2 u_{\\beta}^2 + \\left(\\frac{\\partial h}{\\partial \\epsilon}\\right)^2 u_{\\epsilon}^2 + \\left(\\frac{\\partial h}{\\partial k}\\right)^2 u_{k}^2 + \\left(\\frac{\\partial h}{\\partial \\delta}\\right)^2 u_{\\delta}^2\n$$\nWe must find the partial derivatives (sensitivity coefficients). The derivatives with respect to $k$ and $\\delta$ are straightforward:\n$$\n\\frac{\\partial h}{\\partial k} = \\frac{(T_b - T_s)}{\\delta(T_s - T_{\\mathrm{ref}})} = \\frac{h}{k}\n$$\n$$\n\\frac{\\partial h}{\\partial \\delta} = - \\frac{k(T_b - T_s)}{\\delta^2(T_s - T_{\\mathrm{ref}})} = -\\frac{h}{\\delta}\n$$\nFor the variables $\\alpha$, $\\beta$, and $\\epsilon$, we use the chain rule: $\\frac{\\partial h}{\\partial x_i} = \\frac{\\partial h}{\\partial T_s} \\frac{\\partial T_s}{\\partial x_i}$. First, we find $\\frac{\\partial h}{\\partial T_s}$ using the quotient rule:\n$$\n\\frac{\\partial h}{\\partial T_s} = \\frac{k}{\\delta} \\frac{(-1)(T_s - T_{\\mathrm{ref}}) - (T_b - T_s)(1)}{(T_s - T_{\\mathrm{ref}})^2} = \\frac{k(T_{\\mathrm{ref}} - T_b)}{\\delta(T_s - T_{\\mathrm{ref}})^2}\n$$\nNext, we find the derivatives of $T_s$. It is efficient to use the relation $\\frac{\\partial T_s}{\\partial x_i} = \\frac{1}{4}T_s^{-3}\\frac{\\partial(T_s^4)}{\\partial x_i}$.\n$$\nT_s^4 = \\frac{S-\\beta}{\\alpha\\epsilon\\sigma} - \\left(\\frac{1}{\\epsilon}-1\\right)T_{\\mathrm{env}}^4\n$$\nThe partial derivatives of $T_s^4$ are:\n$$\n\\frac{\\partial (T_s^4)}{\\partial \\alpha} = -\\frac{S-\\beta}{\\alpha^2\\epsilon\\sigma} \\implies \\frac{\\partial T_s}{\\partial \\alpha} = -\\frac{T_s^{-3}}{4}\\frac{S-\\beta}{\\alpha^2\\epsilon\\sigma}\n$$\n$$\n\\frac{\\partial (T_s^4)}{\\partial \\beta} = -\\frac{1}{\\alpha\\epsilon\\sigma} \\implies \\frac{\\partial T_s}{\\partial \\beta} = -\\frac{T_s^{-3}}{4}\\frac{1}{\\alpha\\epsilon\\sigma}\n$$\n$$\n\\frac{\\partial (T_s^4)}{\\partial \\epsilon} = -\\frac{S-\\beta}{\\alpha\\epsilon^2\\sigma} + \\frac{T_{\\mathrm{env}}^4}{\\epsilon^2} = -\\frac{1}{\\epsilon^2}\\left(\\frac{S-\\beta}{\\alpha\\sigma} - T_{\\mathrm{env}}^4\\right) \\implies \\frac{\\partial T_s}{\\partial \\epsilon} = -\\frac{T_s^{-3}}{4\\epsilon^2}\\left(\\frac{S-\\beta}{\\alpha\\sigma} - T_{\\mathrm{env}}^4\\right)\n$$\nCombining these results gives the full sensitivity coefficients for $\\alpha, \\beta, \\epsilon$:\n$$\n\\frac{\\partial h}{\\partial \\alpha} = \\frac{k(T_{\\mathrm{ref}} - T_b)}{\\delta(T_s - T_{\\mathrm{ref}})^2} \\left(-\\frac{T_s^{-3}}{4}\\frac{S-\\beta}{\\alpha^2\\epsilon\\sigma}\\right)\n$$\n$$\n\\frac{\\partial h}{\\partial \\beta} = \\frac{k(T_{\\mathrm{ref}} - T_b)}{\\delta(T_s - T_{\\mathrm{ref}})^2} \\left(-\\frac{T_s^{-3}}{4}\\frac{1}{\\alpha\\epsilon\\sigma}\\right)\n$$\n$$\n\\frac{\\partial h}{\\partial \\epsilon} = \\frac{k(T_{\\mathrm{ref}} - T_b)}{\\delta(T_s - T_{\\mathrm{ref}})^2} \\left(-\\frac{T_s^{-3}}{4\\epsilon^2}\\left(\\frac{S-\\beta}{\\alpha\\sigma} - T_{\\mathrm{env}}^4\\right)\\right)\n$$\n\nFourth, we evaluate the uncertainty $u_h$ numerically. We first compute the nominal values of $T_s$ and $h$.\nGiven values: $S=17600$, $\\alpha=20$, $\\beta=1000$, $\\epsilon=0.95$, $T_{\\mathrm{env}}=295\\,\\mathrm{K}$, $T_{b}=360\\,\\mathrm{K}$, $T_{\\mathrm{ref}}=293\\,\\mathrm{K}$, $k=400$, $\\delta=0.002$, $\\sigma=5.670374419 \\times 10^{-8}$.\nThe radiometer signal corresponds to an exitance of $M_{\\mathrm{out}} = (17600 - 1000)/20 = 830\\,\\mathrm{W\\cdot m^{-2}}$.\nThe surface temperature $T_s$ is calculated:\n$$\nT_s = \\left[ \\frac{830 - (1-0.95)(5.670374419 \\times 10^{-8})(295)^4}{0.95(5.670374419 \\times 10^{-8})} \\right]^{1/4} \\approx 350.02286\\,\\mathrm{K}\n$$\nThe nominal heat transfer coefficient $h$ is:\n$$\nh = \\frac{400(360 - 350.02286)}{0.002(350.02286 - 293)} \\approx 34994.506\\,\\mathrm{W\\cdot m^{-2}\\cdot K^{-1}}\n$$\nNow, we evaluate the sensitivity coefficients at these nominal values:\n$$\n\\frac{\\partial h}{\\partial k} = \\frac{h}{k} \\approx \\frac{34994.506}{400} \\approx 87.486\\,\\mathrm{m^{-2}}\n$$\n$$\n\\frac{\\partial h}{\\partial \\delta} = -\\frac{h}{\\delta} \\approx -\\frac{34994.506}{0.002} \\approx -1.7497 \\times 10^{7}\\,\\mathrm{W\\cdot m^{-3}\\cdot K^{-1}}\n$$\n$$\n\\frac{\\partial h}{\\partial T_s} = \\frac{400(293 - 360)}{0.002(350.02286 - 293)^2} \\approx -4120.735\\,\\mathrm{W\\cdot m^{-2}\\cdot K^{-2}}\n$$\nWe find the sensitivities of $T_s$:\n$$\n\\frac{\\partial T_s}{\\partial \\alpha} \\approx -4.4844\\,\\mathrm{K} \\cdot (\\text{counts}\\cdot(\\mathrm{W\\cdot m^{-2}})^{-1})^{-1}\n$$\n$$\n\\frac{\\partial T_s}{\\partial \\beta} \\approx -0.005403\\,\\mathrm{K} \\cdot \\text{counts}^{-1}\n$$\n$$\n\\frac{\\partial T_s}{\\partial \\epsilon} \\approx -45.626\\,\\mathrm{K}\n$$\nWhich yields the remaining sensitivities for $h$:\n$$\n\\frac{\\partial h}{\\partial \\alpha} = \\frac{\\partial h}{\\partial T_s}\\frac{\\partial T_s}{\\partial \\alpha} \\approx (-4120.735)(-4.4844) \\approx 18481.5\\,\\frac{\\mathrm{W\\cdot m^{-2}\\cdot K^{-1}}}{\\text{counts}\\cdot(\\mathrm{W\\cdot m^{-2}})^{-1}}\n$$\n$$\n\\frac{\\partial h}{\\partial \\beta} = \\frac{\\partial h}{\\partial T_s}\\frac{\\partial T_s}{\\partial \\beta} \\approx (-4120.735)(-0.005403) \\approx 22.259\\,\\frac{\\mathrm{W\\cdot m^{-2}\\cdot K^{-1}}}{\\text{counts}}\n$$\n$$\n\\frac{\\partial h}{\\partial \\epsilon} = \\frac{\\partial h}{\\partial T_s}\\frac{\\partial T_s}{\\partial \\epsilon} \\approx (-4120.735)(-45.626) \\approx 187803\\,\\mathrm{W\\cdot m^{-2}\\cdot K^{-1}}\n$$\nWe now compute the squared uncertainty components, $u_i^2 = (\\frac{\\partial h}{\\partial x_i} u_{x_i})^2$:\n$$\nu_h^2(\\alpha) = (18481.5 \\times 0.05)^2 \\approx (924.075)^2 \\approx 853914\\,(\\mathrm{W\\cdot m^{-2}\\cdot K^{-1}})^2\n$$\n$$\nu_h^2(\\beta) = (22.259 \\times 5)^2 \\approx (111.295)^2 \\approx 12387\\,(\\mathrm{W\\cdot m^{-2}\\cdot K^{-1}})^2\n$$\n$$\nu_h^2(\\epsilon) = (187803 \\times 0.01)^2 \\approx (1878.03)^2 \\approx 3526996\\,(\\mathrm{W\\cdot m^{-2}\\cdot K^{-1}})^2\n$$\n$$\nu_h^2(k) = (87.486 \\times 5)^2 \\approx (437.43)^2 \\approx 191345\\,(\\mathrm{W\\cdot m^{-2}\\cdot K^{-1}})^2\n$$\n$$\nu_h^2(\\delta) = (-1.7497 \\times 10^{7} \\times 1.0 \\times 10^{-5})^2 \\approx (-174.97)^2 \\approx 30615\\,(\\mathrm{W\\cdot m^{-2}\\cdot K^{-1}})^2\n$$\nThe combined variance is the sum of these components:\n$$\nu_h^2 = 853914 + 12387 + 3526996 + 191345 + 30615 = 4615257\\,(\\mathrm{W\\cdot m^{-2}\\cdot K^{-1}})^2\n$$\nThe combined standard uncertainty $u_h$ is the square root of the variance:\n$$\nu_h = \\sqrt{4615257} \\approx 2148.315\\,\\mathrm{W\\cdot m^{-2}\\cdot K^{-1}}\n$$\nRounding to $3$ significant figures as required, we obtain $u_h = 2150\\,\\mathrm{W\\cdot m^{-2}\\cdot K^{-1}}$.", "answer": "$$\\boxed{2.15 \\times 10^{3}}$$", "id": "2524339"}]}