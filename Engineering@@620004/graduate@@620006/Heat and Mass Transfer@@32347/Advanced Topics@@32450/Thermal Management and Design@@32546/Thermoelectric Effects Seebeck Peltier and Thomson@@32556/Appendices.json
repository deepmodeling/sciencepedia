{"hands_on_practices": [{"introduction": "The Kelvin relations form the thermodynamic foundation of thermoelectricity, elegantly linking the Seebeck, Peltier, and Thomson effects. This practice focuses on applying the second Kelvin relation, $\\mu = T \\frac{dS}{dT}$, which connects the Thomson coefficient ($\\mu$) to the temperature derivative of the Seebeck coefficient ($S$). By working through this exercise [@problem_id:246428], you will gain direct experience in using these fundamental laws to determine one thermoelectric property from another, reinforcing the deep thermodynamic unity of these phenomena.", "problem": "In the study of thermoelectricity, three primary phenomena are observed: the Seebeck effect, the Peltier effect, and the Thomson effect. Each is characterized by a coefficient: the Seebeck coefficient (or thermopower) $S$, the Peltier coefficient $\\Pi$, and the Thomson coefficient $\\mu$. These coefficients quantify the coupling between electrical and thermal currents in a material.\n\nOn thermodynamic grounds, William Thomson (Lord Kelvin) derived two relations that connect these coefficients. The first Kelvin relation connects the Peltier and Seebeck coefficients: $\\Pi = S \\cdot T$. The second Kelvin relation, also known as the Thomson relation, connects the Thomson and Seebeck coefficients:\n$$\n\\mu = T \\frac{dS}{dT}\n$$\nwhere $T$ is the absolute temperature.\n\nConsider a particular metallic alloy for which, over a certain range of temperatures, its absolute Seebeck coefficient is well-described by the empirical formula:\n$$\nS(T) = aT + bT^3\n$$\nHere, $a$ and $b$ are material-specific constants. Assuming the validity of the Kelvin relations, determine the Thomson coefficient $\\mu(T)$ for this alloy as a function of temperature $T$.", "solution": "The problem asks for the Thomson coefficient $\\mu(T)$ of a material, given its absolute Seebeck coefficient $S(T)$. The connection between these two coefficients is provided by the second Kelvin relation.\n\nThe second Kelvin relation is given by:\n$$\n\\mu(T) = T \\frac{dS}{dT}\n$$\n\nThe Seebeck coefficient for the material is given as:\n$$\nS(T) = aT + bT^3\n$$\nwhere $a$ and $b$ are constants.\n\nTo find $\\mu(T)$, we first need to compute the derivative of $S(T)$ with respect to the absolute temperature $T$.\n$$\n\\frac{dS}{dT} = \\frac{d}{dT} (aT + bT^3)\n$$\n\nUsing the power rule for differentiation, $\\frac{d}{dx} (cx^n) = ncx^{n-1}$, we get:\n$$\n\\frac{dS}{dT} = a \\frac{d(T)}{dT} + b \\frac{d(T^3)}{dT}\n$$\n$$\n\\frac{dS}{dT} = a(1) + b(3T^2)\n$$\n$$\n\\frac{dS}{dT} = a + 3bT^2\n$$\n\nNow, we substitute this derivative back into the second Kelvin relation:\n$$\n\\mu(T) = T \\left( \\frac{dS}{dT} \\right)\n$$\n$$\n\\mu(T) = T (a + 3bT^2)\n$$\n\nFinally, we distribute the $T$ term to obtain the final expression for the Thomson coefficient:\n$$\n\\mu(T) = aT + 3bT^3\n$$\n\nThis expression gives the Thomson coefficient as a function of temperature, based on the provided form of the Seebeck coefficient and the fundamental thermodynamic Kelvin relations.", "answer": "$$\n\\boxed{aT + 3bT^3}\n$$", "id": "246428"}, {"introduction": "While individual coefficients describe specific effects, the overall performance of a thermoelectric material is best quantified by a single, dimensionless figure of merit, $ZT$. This exercise [@problem_id:246357] guides you through the derivation of $ZT$ by combining the material's Seebeck coefficient ($S$), electrical resistivity ($\\rho$), and total thermal conductivity ($\\kappa$). This practice is crucial for understanding the complex interplay between electrical and thermal properties and highlights the materials engineering challenge of optimizing thermoelectric performance.", "problem": "Consider a non-degenerate, n-type semiconductor whose thermoelectric properties are characterized at an absolute temperature $T$. The material's Seebeck coefficient is measured to be $S$, its electrical resistivity is $\\rho$, and the lattice contribution to its thermal conductivity is $\\kappa_l$.\n\nThe dominant charge carrier scattering mechanism in this semiconductor is described by an energy-dependent relaxation time $\\tau(E) \\propto (E-E_c)^r$, where $E$ is the electron energy, $E_c$ is the conduction band edge energy, and $r$ is a constant known as the scattering parameter.\n\nThe total thermal conductivity, $\\kappa$, is the sum of the electronic contribution, $\\kappa_e$, and the lattice contribution, $\\kappa_l$:\n$$ \\kappa = \\kappa_e + \\kappa_l $$\n\nThe electronic thermal conductivity, $\\kappa_e$, is related to the electrical resistivity via a modified Wiedemann-Franz law:\n$$ \\kappa_e = \\frac{L T}{\\rho} $$\nFor a non-degenerate semiconductor with the scattering mechanism described above, the Lorenz number, $L$, is given by:\n$$ L = \\left(r + \\frac{5}{2}\\right) \\left(\\frac{k_B}{e}\\right)^2 $$\nwhere $k_B$ is the Boltzmann constant and $e$ is the elementary charge.\n\nUsing the information provided, derive an expression for the dimensionless thermoelectric figure of merit, $ZT$, for this semiconductor. The figure of merit is defined as $ZT = \\frac{S^2 T}{\\rho \\kappa}$.", "solution": "The thermoelectric figure of merit is defined as:\n$$ ZT = \\frac{S^2 T}{\\rho \\kappa} $$\nwhere $\\kappa = \\kappa_e + \\kappa_l$ is the total thermal conductivity.\n\nGiven the electronic thermal conductivity $\\kappa_e$ and the Lorenz number $L$:\n$$ \\kappa_e = \\frac{L T}{\\rho}, \\quad L = \\left(r + \\frac{5}{2}\\right) \\left(\\frac{k_B}{e}\\right)^2 $$\nsubstitute $\\kappa_e$ into the expression for $\\kappa$:\n$$ \\kappa = \\frac{L T}{\\rho} + \\kappa_l $$\n\nNow substitute $\\kappa$ into the expression for $ZT$:\n$$ ZT = \\frac{S^2 T}{\\rho \\left( \\frac{L T}{\\rho} + \\kappa_l \\right)} = \\frac{S^2 T}{L T + \\rho \\kappa_l} $$\n\nSubstitute the expression for $L$:\n$$ ZT = \\frac{S^2 T}{ \\left( r + \\frac{5}{2} \\right) \\left(\\frac{k_B}{e}\\right)^2 T + \\rho \\kappa_l } $$\n\nThis is the derived expression for $ZT$ in terms of the given parameters $S$, $\\rho$, $\\kappa_l$, $T$, $r$, and fundamental constants $k_B$ and $e$.", "answer": "$$ \\boxed{ \\dfrac{ S^{2} T }{ \\left( r + \\dfrac{5}{2} \\right) \\left( \\dfrac{k_B}{e} \\right)^{2} T + \\rho \\kappa_l } } $$", "id": "246357"}, {"introduction": "Accurately measuring a material's intrinsic Seebeck coefficient is a sophisticated task, often complicated by the dynamic thermal and electrical response of the measurement system. This advanced computational exercise [@problem_id:2532862] challenges you to model these real-world non-idealities and then solve the \"inverse problem\": reconstructing the true Seebeck coefficient, $S(T)$, from a simulated transient voltage measurement. This hands-on problem demonstrates how computational analysis is used to deconvolve underlying physical properties from complex experimental data, a vital skill in modern physics and materials characterization.", "problem": "You are given a self-consistent dynamical model for a single-material thermoelectric leg measured in open circuit under a linearly ramped bath temperature. The goal is to recover the temperature-dependent Seebeck coefficient, denoted by $S(T)$, from a transient open-circuit voltage record measured under finite thermal lag and parasitic electrical capacitance. You must implement a program that, for each test case, generates a synthetic measurement by forward simulation of the coupled thermal-electrical dynamics and then reconstructs $S(T)$ from that measurement using only the provided physical laws and known parameters. Your program must output the reconstructed $S(T)$ at specified evaluation temperatures in microvolts per kelvin, rounded to six decimal places, aggregated across all test cases in a single flattened list.\n\nPhysical model and foundational laws:\n- Seebeck effect definition for a single material referenced to a fixed junction at temperature $T_\\mathrm{ref}$: the open-circuit source voltage $V_s(t)$ is the path integral of the Seebeck coefficient along the temperature difference,\n$$\nV_s(t) \\;=\\; \\int_{T_\\mathrm{ref}}^{T_s(t)} S(T')\\,\\mathrm{d}T' \\, .\n$$\n- Lumped thermal energy balance for the sample temperature $T_s(t)$ exchanging heat conductively with a bath at $T_b(t)$:\n$$\nC_\\mathrm{th}\\,\\frac{\\mathrm{d}T_s}{\\mathrm{d}t} \\;=\\; \\frac{T_b(t) - T_s(t)}{R_\\mathrm{th}} \\, .\n$$\n- Lumped electrical parasitic modeled as a shunt capacitance at the measurement node with a Thevenin internal source and series resistance $R_s$, yielding the node dynamics for the measured voltage $V_m(t)$:\n$$\nC_e\\,\\frac{\\mathrm{d}V_m}{\\mathrm{d}t} \\;=\\; \\frac{V_s(t) - V_m(t)}{R_s} \\, .\n$$\n- The bath temperature is ramped as\n$$\nT_b(t) \\;=\\; T_0 + r\\,t \\, ,\n$$\nwith $T_s(0)=T_0$ and $V_s(0)=0$ so that $V_m(0)=0$.\n\nData generation for the test suite:\n- For each test, $S(T)$ is a polynomial about $T_0$,\n$$\nS(T) \\;=\\; S_0 \\;+\\; a_1\\,(T - T_0) \\;+\\; a_2\\,(T - T_0)^2 \\, ,\n$$\nwith $S_0$, $a_1$, and $a_2$ given in volts per kelvin, volts per kelvin squared, and volts per kelvin cubed, respectively.\n- The primitive $U(T)$ used to generate $V_s(t)$ is\n$$\nU(T) \\;=\\; \\int_{T_0}^{T} S(T')\\,\\mathrm{d}T' \\;=\\; S_0\\,(T-T_0) \\;+\\; \\frac{a_1}{2}\\,(T-T_0)^2 \\;+\\; \\frac{a_2}{3}\\,(T-T_0)^3 \\, .\n$$\n- Time discretization is uniform with step $\\Delta t = 0.001\\,\\mathrm{s}$ over $t \\in [0, t_\\mathrm{end}]$. Use $T_b(t_n)$ in the thermal update, then compute $T_s(t_n)$ via time marching, compute $V_s(t_n)=U(T_s(t_n))$, and finally propagate $V_m(t_n)$ by time marching of the electrical dynamics. If $C_e=0$, take $V_m(t_n)=V_s(t_n)$ exactly for all $n$.\n\nReconstruction task:\n- Using only the measured $V_m(t_n)$ and the known parameters $R_s$, $C_e$, $R_\\mathrm{th}$, $C_\\mathrm{th}$, $T_0$, and $r$, reconstruct $S(T)$ at specified evaluation temperatures. You must:\n  - Reconstruct $V_s(t_n)$ from $V_m(t_n)$ using the electrical dynamics and time differentiation.\n  - Reconstruct $T_s(t_n)$ by integrating the thermal dynamics driven by the known ramp $T_b(t)$.\n  - Use the chain rule to compute\n  $$\n  S\\bigl(T_s(t)\\bigr) \\;=\\; \\frac{\\mathrm{d}V_s/\\mathrm{d}t}{\\mathrm{d}T_s/\\mathrm{d}t} \\, ,\n  $$\n  where time derivatives are obtained from the reconstructed time series.\n  - Interpolate the resulting $(T_s,S)$ relation to the test-specific evaluation temperatures $T_\\mathrm{eval}$.\n- Express the final results in microvolts per kelvin. That is, convert from volts per kelvin by multiplying by $10^{6}$. Round each value to $6$ decimal places.\n\nTest suite:\n- Use the following three test cases. For each case, simulate the measurement and then reconstruct and report $S(T)$ at the listed $T_\\mathrm{eval}$.\n\nCase $1$:\n- $T_0 = 300\\,\\mathrm{K}$, $r = 0.5\\,\\mathrm{K/s}$, $t_\\mathrm{end} = 40\\,\\mathrm{s}$.\n- $R_\\mathrm{th} = 2.0\\,\\mathrm{K/W}$, $C_\\mathrm{th} = 2.5\\,\\mathrm{J/K}$.\n- $R_s = 50.0\\,\\Omega$, $C_e = 100\\times10^{-6}\\,\\mathrm{F}$.\n- $S_0 = 200\\times10^{-6}\\,\\mathrm{V/K}$, $a_1 = -0.5\\times10^{-6}\\,\\mathrm{V/K^2}$, $a_2 = 0.01\\times10^{-6}\\,\\mathrm{V/K^3}$.\n- $T_\\mathrm{eval} = [302, 310, 316]\\,\\mathrm{K}$.\n\nCase $2$:\n- $T_0 = 300\\,\\mathrm{K}$, $r = 1.0\\,\\mathrm{K/s}$, $t_\\mathrm{end} = 10\\,\\mathrm{s}$.\n- $R_\\mathrm{th} = 1.0\\,\\mathrm{K/W}$, $C_\\mathrm{th} = 1.0\\,\\mathrm{J/K}$.\n- $R_s = 5.0\\,\\Omega$, $C_e = 0.0\\,\\mathrm{F}$.\n- $S_0 = 150\\times10^{-6}\\,\\mathrm{V/K}$, $a_1 = 0.2\\times10^{-6}\\,\\mathrm{V/K^2}$, $a_2 = -0.005\\times10^{-6}\\,\\mathrm{V/K^3}$.\n- $T_\\mathrm{eval} = [302, 306, 308]\\,\\mathrm{K}$.\n\nCase $3$:\n- $T_0 = 300\\,\\mathrm{K}$, $r = 0.2\\,\\mathrm{K/s}$, $t_\\mathrm{end} = 100\\,\\mathrm{s}$.\n- $R_\\mathrm{th} = 4.0\\,\\mathrm{K/W}$, $C_\\mathrm{th} = 5.0\\,\\mathrm{J/K}$.\n- $R_s = 20.0\\,\\Omega$, $C_e = 1.0\\times10^{-3}\\,\\mathrm{F}$.\n- $S_0 = 220\\times10^{-6}\\,\\mathrm{V/K}$, $a_1 = -0.1\\times10^{-6}\\,\\mathrm{V/K^2}$, $a_2 = 0.002\\times10^{-6}\\,\\mathrm{V/K^3}$.\n- $T_\\mathrm{eval} = [304, 312, 315]\\,\\mathrm{K}$.\n\nNumerical details and constraints:\n- Use uniform time stepping with $\\Delta t = 0.001\\,\\mathrm{s}$.\n- Use finite differences to estimate time derivatives; central differences in the interior and one-sided differences at endpoints are acceptable.\n- When dividing by $\\mathrm{d}T_s/\\mathrm{d}t$, discard time indices where $\\left|\\mathrm{d}T_s/\\mathrm{d}t\\right| < 10^{-9}\\,\\mathrm{K/s}$ to avoid numerical blow-up.\n- For $C_e=0$, use $V_s(t_n)=V_m(t_n)$ exactly.\n- Angles do not appear; no angle unit is needed.\n\nRequired final output format:\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, in the order: case $1$ values for $T_\\mathrm{eval}$ in ascending order, followed by case $2$ values in ascending order, followed by case $3$ values in ascending order. For example, the final output must look like\n$[x_1,x_2,x_3,x_4,x_5,x_6,x_7,x_8,x_9]$,\nwhere each $x_i$ is a float in microvolts per kelvin rounded to $6$ decimal places.", "solution": "The problem statement has been subjected to rigorous validation and is found to be valid. It is scientifically grounded in the principles of thermoelectricity and circuit theory, algorithmically well-posed, and provides a complete, self-consistent set of parameters and objectives. The task is to first generate synthetic measurement data through a forward simulation of coupled thermal and electrical dynamics, and then to solve the inverse problem of reconstructing the Seebeck coefficient, $S(T)$, from this synthetic data. This is a non-trivial exercise in computational physics that tests the implementation of numerical integration, differentiation, and interpolation.\n\nThe solution is executed in two primary phases for each test case provided.\n\nPhase 1: Forward Simulation\n\nThe first phase is the generation of the \"measured\" voltage time series, $V_m(t)$. This requires solving a system of two coupled, first-order linear ordinary differential equations.\n\nFirst, the time domain is discretized into steps of size $\\Delta t = 0.001\\,\\mathrm{s}$ over the interval $t \\in [0, t_\\mathrm{end}]$. The bath temperature, which drives the system, is a known linear function of time:\n$$\nT_b(t) = T_0 + r\\,t\n$$\n\nThe sample's temperature, $T_s(t)$, is governed by the lumped thermal energy balance:\n$$\n\\frac{\\mathrm{d}T_s}{\\mathrm{d}t} = \\frac{T_b(t) - T_s(t)}{R_\\mathrm{th} C_\\mathrm{th}}\n$$\nThis equation, with the initial condition $T_s(0) = T_0$, is solved numerically using the Forward Euler method:\n$$\nT_s(t_{n+1}) = T_s(t_n) + \\Delta t \\left( \\frac{T_b(t_n) - T_s(t_n)}{\\tau_\\mathrm{th}} \\right)\n$$\nwhere $\\tau_\\mathrm{th} = R_\\mathrm{th} C_\\mathrm{th}$ is the thermal time constant. The chosen time step $\\Delta t$ is significantly smaller than the smallest thermal time constant ($\\tau_\\mathrm{th} \\ge 1.0\\,\\mathrm{s}$), ensuring numerical stability.\n\nNext, the thermoelectric source voltage, $V_s(t)$, is calculated. It is defined by the integral of the Seebeck coefficient from a reference temperature, here $T_0$, to the sample temperature $T_s(t)$. Given the polynomial form of $S(T)$, the integral $U(T)$ is provided:\n$$\nV_s(t) = U(T_s(t)) = \\int_{T_0}^{T_s(t)} S(T')\\,\\mathrm{d}T' = S_0(T_s(t)-T_0) + \\frac{a_1}{2}(T_s(t)-T_0)^2 + \\frac{a_2}{3}(T_s(t)-T_0)^3\n$$\nThis calculation is performed at each time step using the computed $T_s(t_n)$ values.\n\nFinally, the measured voltage, $V_m(t)$, is determined by the electrical model, which describes an RC circuit with source $V_s(t)$:\n$$\n\\frac{\\mathrm{d}V_m}{\\mathrm{d}t} = \\frac{V_s(t) - V_m(t)}{R_s C_e}\n$$\nThis equation, with the initial condition $V_m(0) = 0\\,\\mathrm{V}$, is also integrated using the Forward Euler method:\n$$\nV_m(t_{n+1}) = V_m(t_n) + \\Delta t \\left( \\frac{V_s(t_n) - V_m(t_n)}{\\tau_e} \\right)\n$$\nwhere $\\tau_e = R_s C_e$ is the electrical time constant. For the special case where $C_e = 0\\,\\mathrm{F}$, there is no electrical lag, and we have $V_m(t) = V_s(t)$ exactly.\n\nPhase 2: Inverse Reconstruction\n\nThe second phase uses the generated time series $V_m(t_n)$ and the known system parameters ($R_s, C_e, R_\\mathrm{th}, C_\\mathrm{th}, T_0, r$) to reconstruct the function $S(T)$.\n\nFirst, the sample temperature time series, $T_s(t)$, is reconstructed. Since the thermal parameters and the bath temperature ramp $T_b(t)$ are known, we can solve the thermal ODE exactly as was done in the forward simulation. This yields a reconstructed time series $T_s^\\mathrm{recon}(t)$ that is, within numerical precision, identical to the one from the simulation.\n\nSecond, the source voltage $V_s(t)$ is reconstructed from the \"measured\" $V_m(t)$. By rearranging the electrical dynamics equation, we obtain:\n$$\nV_s(t) = V_m(t) + R_s C_e \\frac{\\mathrm{d}V_m}{\\mathrm{d}t}\n$$\nThe time derivative $\\mathrm{d}V_m/\\mathrm{d}t$ is computed numerically from the discrete data $V_m(t_n)$ using finite differences. Specifically, a second-order central difference for interior points and first-order one-sided differences for the endpoints are used, as implemented in `numpy.gradient`. If $C_e=0\\,\\mathrm{F}$, this step simplifies to $V_s(t) = V_m(t)$.\n\nThird, the Seebeck coefficient is computed using the chain rule, which connects the time derivatives of voltage and temperature:\n$$\nS(T_s(t)) = \\frac{\\mathrm{d}V_s/\\mathrm{d}t}{\\mathrm{d}T_s/\\mathrm{d}t}\n$$\nBoth derivatives, $\\mathrm{d}V_s/\\mathrm{d}t$ and $\\mathrm{d}T_s/\\mathrm{d}t$, are computed from the reconstructed time series $V_s^\\mathrm{recon}(t)$ and $T_s^\\mathrm{recon}(t)$ using the same numerical gradient method. To prevent division by zero or numerical instability, data points where the magnitude of the denominator, $|\\mathrm{d}T_s/\\mathrm{d}t|$, is below a threshold of $10^{-9}\\,\\mathrm{K/s}$ are excluded from the calculation. This is physically justified, as the Seebeck coefficient is ill-defined under isothermal conditions.\n\nFinally, the resulting discrete pairs of $(T_s(t_n), S(T_s(t_n)))$ are used to determine the value of $S$ at the specified evaluation temperatures, $T_\\mathrm{eval}$. This is achieved through linear interpolation of the reconstructed $(T_s, S)$ data. The resulting values, in units of $\\mathrm{V/K}$, are converted to $\\mathrm{\\mu V/K}$ by multiplying by $10^6$ and are then rounded to six decimal places, as required. This procedure is repeated for all test cases, and the results are aggregated into a single list for the final output.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Main function to solve the problem for all test cases.\n    It simulates thermoelectric measurements and then reconstructs the Seebeck\n    coefficient, reporting its value at specified temperatures.\n    \"\"\"\n\n    test_cases = [\n        {\n            \"case_id\": 1,\n            \"T0\": 300.0, \"r\": 0.5, \"t_end\": 40.0,\n            \"R_th\": 2.0, \"C_th\": 2.5,\n            \"R_s\": 50.0, \"C_e\": 100e-6,\n            \"S0\": 200e-6, \"a1\": -0.5e-6, \"a2\": 0.01e-6,\n            \"T_eval\": [302.0, 310.0, 316.0]\n        },\n        {\n            \"case_id\": 2,\n            \"T0\": 300.0, \"r\": 1.0, \"t_end\": 10.0,\n            \"R_th\": 1.0, \"C_th\": 1.0,\n            \"R_s\": 5.0, \"C_e\": 0.0,\n            \"S0\": 150e-6, \"a1\": 0.2e-6, \"a2\": -0.005e-6,\n            \"T_eval\": [302.0, 306.0, 308.0]\n        },\n        {\n            \"case_id\": 3,\n            \"T0\": 300.0, \"r\": 0.2, \"t_end\": 100.0,\n            \"R_th\": 4.0, \"C_th\": 5.0,\n            \"R_s\": 20.0, \"C_e\": 1.0e-3,\n            \"S0\": 220e-6, \"a1\": -0.1e-6, \"a2\": 0.002e-6,\n            \"T_eval\": [304.0, 312.0, 315.0]\n        }\n    ]\n\n    all_results = []\n    \n    for case in test_cases:\n        results = process_case(case)\n        all_results.extend(results)\n\n    # Final print statement in the exact required format.\n    # Using np.round again to handle potential floating point inaccuracies before formatting.\n    formatted_results = [f\"{val:.6f}\" for val in np.round(all_results, 6)]\n    print(f\"[{','.join(formatted_results)}]\")\n\ndef process_case(params):\n    \"\"\"\n    Processes a single test case: performs forward simulation and inverse reconstruction.\n    \"\"\"\n    # Unpack parameters\n    T0 = params['T0']\n    r = params['r']\n    t_end = params['t_end']\n    R_th, C_th = params['R_th'], params['C_th']\n    R_s, C_e = params['R_s'], params['C_e']\n    S0, a1, a2 = params['S0'], params['a1'], params['a2']\n    T_eval = params['T_eval']\n    dt = 0.001\n\n    # --- Phase 1: Forward Simulation (Data Generation) ---\n\n    t = np.arange(0, t_end + dt, dt) \n    n_steps = len(t)\n    \n    # Bath temperature\n    Tb = T0 + r * t\n\n    # Sample temperature T_s(t) via Forward Euler\n    Ts = np.zeros(n_steps)\n    Ts[0] = T0\n    tau_th = R_th * C_th\n    for i in range(n_steps - 1):\n        dTs_dt_sim = (Tb[i] - Ts[i]) / tau_th\n        Ts[i+1] = Ts[i] + dTs_dt_sim * dt\n\n    # Source voltage V_s(t)\n    delta_T = Ts - T0\n    Vs = S0 * delta_T + (a1 / 2.0) * delta_T**2 + (a2 / 3.0) * delta_T**3\n\n    # Measured voltage V_m(t) via Forward Euler\n    Vm = np.zeros(n_steps)\n    Vm[0] = 0.0\n    if C_e == 0.0:\n        Vm = Vs\n    else:\n        tau_e = R_s * C_e\n        for i in range(n_steps - 1):\n            dVm_dt_sim = (Vs[i] - Vm[i]) / tau_e\n            Vm[i+1] = Vm[i] + dVm_dt_sim * dt\n\n    # --- Phase 2: Inverse Reconstruction ---\n    # Here, 'Vm' is the input \"measurement\".\n\n    # 1. Reconstruct T_s(t) from known parameters\n    Ts_recon = np.zeros(n_steps)\n    Ts_recon[0] = T0\n    Tb_recon = T0 + r * t\n    for i in range(n_steps - 1):\n        dTs_dt_recon_loop = (Tb_recon[i] - Ts_recon[i]) / tau_th\n        Ts_recon[i+1] = Ts_recon[i] + dTs_dt_recon_loop * dt\n\n    # 2. Reconstruct V_s(t) from V_m(t)\n    if C_e == 0.0:\n        Vs_recon = Vm\n    else:\n        dVm_dt_recon = np.gradient(Vm, dt)\n        Vs_recon = Vm + R_s * C_e * dVm_dt_recon\n\n    # 3. Compute time derivatives for S(T) reconstruction\n    dVs_dt = np.gradient(Vs_recon, dt)\n    dTs_dt = np.gradient(Ts_recon, dt)\n\n    # 4. Compute S(T_s(t)) with filtering\n    valid_mask = np.abs(dTs_dt) >= 1e-9\n    \n    t_filtered = t[valid_mask]\n    Ts_filtered = Ts_recon[valid_mask]\n    \n    S_recon_at_t = np.full_like(dTs_dt, np.nan)\n    np.divide(dVs_dt, dTs_dt, out=S_recon_at_t, where=valid_mask)\n    S_filtered = S_recon_at_t[valid_mask]\n    \n    # The first few points might be unstable due to initial transient and derivatives.\n    # Exclude the very beginning of the time series for a more stable interpolation.\n    # A time of 5 * max(tau_th, tau_e) would be a robust choice, but a simpler\n    # fixed time or number of points is sufficient here. Let's discard the first second.\n    stable_start_index = np.searchsorted(t_filtered, 1.0, side='left')\n\n    # 5. Interpolate to find S at T_eval\n    S_at_Teval = np.interp(T_eval, Ts_filtered[stable_start_index:], S_filtered[stable_start_index:])\n\n    # 6. Convert to microvolts per kelvin and return\n    return S_at_Teval * 1e6\n\nsolve()\n```", "id": "2532862"}]}