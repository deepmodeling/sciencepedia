{"hands_on_practices": [{"introduction": "At the heart of any enthalpy-based simulation is the need to recover physical quantities like temperature $T$ and liquid fraction $f_l$ from the conserved enthalpy variable $h$. This exercise guides you through deriving the fundamental piecewise mapping for this inversion, considering a material with a linear mushy zone. Mastering this process is the first and most critical step toward implementing a robust and accurate phase-change model, solidifying your understanding of how latent heat is implicitly handled in the enthalpy formulation [@problem_id:2482083].", "problem": "You are modeling phase change in a one-dimensional control volume using the enthalpy method. The control volume contains a pure substance with a solid-to-liquid phase change over a temperature interval. In the enthalpy method, the total specific enthalpy $h$ of the cell is stored and advanced in time by energy conservation. To reconstruct the temperature $T$ and the liquid mass fraction $f_l$ from a known $h$, you must invert the enthalpy–temperature mapping using only fundamental principles and a minimal closure.\n\nFundamental base and modeling assumptions:\n- Use conservation of energy and the definition of specific enthalpy as the sum of sensible and latent contributions.\n- Assume the specific heat capacity $c_p$ is constant and identical in the solid and liquid phases.\n- Assume local thermal equilibrium (LTE), so that a single temperature $T$ characterizes both phases inside the control volume.\n- Use the standard lever-rule closure across the mushy zone, i.e., in the two-phase interval between the solidus temperature $T_s$ and the liquidus temperature $T_l$, the liquid fraction $f_l$ varies monotonically from $0$ to $1$ with $T$, and the latent heat $L$ is apportioned across this interval consistently with LTE.\n- Take as reference that the specific enthalpy is zero at the solidus without latent contribution, i.e., $h=0$ at $T=T_s$ with $f_l=0$.\n\nYour task:\n- Starting from the above principles, derive a robust piecewise-invertible mapping from specific enthalpy $h$ to the pair $(T, f_l)$ that applies to both a finite mushy interval case with $T_l>T_s$ and the isothermal phase change limit $T_l=T_s$.\n- Prove that your mapping is monotone in $T$ and that the inversion $(h \\mapsto (T, f_l))$ is well-posed and numerically robust under finite precision arithmetic.\n- Implement the derived inversion as a program that, given $(h, T_s, T_l, c_p, L)$, recovers $(T, f_l)$.\n- Enforce the physical constraints $f_l \\in [0,1]$ and, in the two-phase interval, $T \\in [T_s, T_l]$. If $T_l=T_s$, interpret this as an isothermal phase change with a latent plateau at $T=T_s$.\n- Explicitly specify the units: $T$, $T_s$, and $T_l$ are in Kelvin (K), $h$ and $L$ are in joules per kilogram (J/kg), and $c_p$ is in joules per kilogram-kelvin (J/(kg·K)). Express the temperature in Kelvin and $f_l$ as a decimal in $[0,1]$. Round both $T$ and $f_l$ to six decimal places.\n\nTest suite:\nFor each parameter set $(h,T_s,T_l,c_p,L)$ below, compute and return $(T,f_l)$ in the specified units and rounding. The test suite covers subsolidus, mushy, and superliquid regimes, as well as the isothermal limit and boundary conditions.\n\n- Case A (subsolidus, finite mushy interval): $(h, T_s, T_l, c_p, L) = (-100000, 300, 350, 2000, 250000)$\n- Case B (mushy interior, finite mushy interval): $(h, T_s, T_l, c_p, L) = (175000, 300, 350, 2000, 250000)$\n- Case C (liquid boundary, finite mushy interval): $(h, T_s, T_l, c_p, L) = (350000, 300, 350, 2000, 250000)$\n- Case D (superliquid, finite mushy interval): $(h, T_s, T_l, c_p, L) = (450000, 300, 350, 2000, 250000)$\n- Case E (isothermal latent plateau): $(h, T_s, T_l, c_p, L) = (50000, 300, 300, 1000, 100000)$\n- Case F (isothermal, superliquid): $(h, T_s, T_l, c_p, L) = (150000, 300, 300, 1000, 100000)$\n- Case G (mushy lower boundary, finite mushy interval): $(h, T_s, T_l, c_p, L) = (0, 300, 350, 2000, 250000)$\n\nFinal output format:\nYour program should produce a single line of output containing the results for Cases A through G, in order, as a comma-separated list enclosed in square brackets. Each element must itself be a two-element list $[T,f_l]$ with both values rounded to six decimal places. For example, the overall structure must be like: [[T_A,f_A],[T_B,f_B],...,[T_G,f_G]] (do not include variable names; this is only the structure). The numbers must be printed as decimals, not fractions, and without any units in the output line.", "solution": "The problem statement has been analyzed and is determined to be valid. It is scientifically sound, well-posed, and contains all necessary information to derive a unique and meaningful solution. The problem is a standard exercise in the formulation of enthalpy methods for computational heat transfer with phase change. I will now proceed with the derivation and solution.\n\nThe fundamental relationship for specific enthalpy, $h$, is defined as the sum of its sensible and latent components. The reference state is given as $h=0$ at the solidus temperature $T=T_s$ for a fully solid material, i.e., with liquid fraction $f_l=0$.\n\nThe sensible enthalpy component, $h_{sensible}$, for a material with constant specific heat capacity $c_p$, relative to the reference temperature $T_s$, is given by:\n$$h_{sensible} = c_p (T - T_s)$$\nThe latent enthalpy component, $h_{latent}$, is the energy absorbed during phase change. For a liquid fraction $f_l$ and a total latent heat of fusion $L$, this is:\n$$h_{latent} = f_l L$$\nCombining these, the total specific enthalpy $h$ as a function of temperature $T$ and liquid fraction $f_l$ is:\n$$h(T, f_l) = c_p (T - T_s) + f_l L$$\nTo establish a unique relationship between enthalpy and temperature, we must define the liquid fraction $f_l$ in terms of temperature $T$ for the three thermodynamic regimes.\n\n1.  **Solid Regime ($T < T_s$):** The material is entirely solid, so $f_l=0$. The enthalpy is purely sensible:\n    $$h(T) = c_p (T - T_s)$$\n    For $T<T_s$, the enthalpy is negative. At the boundary $T=T_s$, we find $h(T_s)=0$, which we define as the solidus enthalpy, $h_s$.\n\n2.  **Liquid Regime ($T > T_l$):** The material is entirely liquid, so $f_l=1$. The enthalpy is:\n    $$h(T) = c_p (T - T_s) + L$$\n    At the boundary $T=T_l$, the enthalpy is $h(T_l) = c_p(T_l - T_s) + L$. We define this as the liquidus enthalpy, $h_l$.\n\n3.  **Mushy Regime ($T_s \\le T \\le T_l$):** Both phases coexist. The problem specifies a lever-rule closure for the liquid fraction. The simplest and most standard form assumes $f_l$ varies linearly with $T$ from $0$ at $T_s$ to $1$ at $T_l$. This is valid for cases where the mushy zone has a finite width, i.e., $T_l > T_s$.\n    $$f_l(T) = \\frac{T - T_s}{T_l - T_s}$$\n    Substituting this into the general enthalpy expression:\n    $$h(T) = c_p(T - T_s) + \\left(\\frac{T - T_s}{T_l - T_s}\\right) L = (T - T_s) \\left( c_p + \\frac{L}{T_l - T_s} \\right)$$\n    This expression connects the enthalpies at the boundaries, as $h(T_s)=0=h_s$ and $h(T_l)=c_p(T_l-T_s)+L=h_l$.\n\nThe complete forward map $h(T)$ for the case $T_l > T_s$ is a piecewise function:\n$$\nh(T) =\n\\begin{cases}\nc_p (T - T_s) & \\text{if } T < T_s \\\\\n(T - T_s) \\left(c_p + \\frac{L}{T_l - T_s}\\right) & \\text{if } T_s \\le T \\le T_l \\\\\nc_p (T - T_s) + L & \\text{if } T > T_l\n\\end{cases}\n$$\n\nFor the inversion $h \\mapsto (T, f_l)$ to be well-posed, the function $h(T)$ must be strictly monotonic. We verify this by examining the derivative $\\frac{dh}{dT}$ in each regime, assuming physical constants $c_p > 0$ and $L > 0$.\n-   For $T < T_s$: $\\frac{dh}{dT} = c_p > 0$.\n-   For $T_s < T < T_l$: $\\frac{dh}{dT} = c_p + \\frac{L}{T_l - T_s} > c_p > 0$. This term can be viewed as an effective heat capacity $c_{p,eff}$.\n-   For $T > T_l$: $\\frac{dh}{dT} = c_p > 0$.\n\nSince $h(T)$ is continuous and its derivative is strictly positive, the function is strictly monotonic. This guarantees that a unique inverse $T(h)$ exists, and the problem of finding $(T, f_l)$ from $h$ is well-posed.\n\n**Isothermal Case ($T_l = T_s$)**\nIn this limit, the mushy zone collapses to a single temperature point, $T=T_s$. Phase change occurs isothermally.\n-   For $h_s=0 \\le h \\le h_l=L$, the temperature remains constant at $T=T_s$.\n-   The enthalpy in this range is purely latent: $h = f_l L$.\n-   Thus, for $0 \\le h \\le L$, we have $T=T_s$ and $f_l = h/L$.\n\n**Unified Inversion Algorithm**\nThe derived relationships allow us to construct a robust algorithm to find $(T, f_l)$ from a given $h$.\n\n1.  **Define enthalpy thresholds**. The solidus enthalpy is $h_s=0$. The liquidus enthalpy, $h_l$, is calculated based on whether the phase change is isothermal or over a finite interval.\n    -   If $T_l = T_s$: $h_l = L$.\n    -   If $T_l > T_s$: $h_l = c_p (T_l - T_s) + L$.\n\n2.  **Determine the regime based on $h$**.\n    -   **Subsolidus ($h < h_s$):** The material is solid.\n        $$f_l = 0$$\n        $$T = T_s + h / c_p$$\n\n    -   **Phase Change ($h_s \\le h \\le h_l$):** The material is in a two-phase state (mushy or isothermal plateau).\n        -   If $T_l = T_s$ (isothermal):\n            $$T = T_s$$\n            $$f_l = h / L \\quad (\\text{assuming } L>0)$$\n        -   If $T_l > T_s$ (mushy): For superior numerical stability, we first compute $f_l$ and then $T$. From $h(T) = c_p(T-T_s) + f_l L$ and $T-T_s = f_l(T_l-T_s)$, we substitute for $T-T_s$ to get $h = c_p f_l(T_l-T_s) + f_l L = f_l(c_p(T_l-T_s)+L) = f_l h_l$.\n            $$f_l = h / h_l$$\n            $$T = T_s + f_l(T_l - T_s)$$\n            This formulation avoids direct computation with potentially large terms like $L/(T_l-T_s)$ if $(T_l-T_s)$ is small.\n\n    -   **Superliquid ($h > h_l$):** The material is liquid.\n        $$f_l = 1$$\n        $$T = T_s + (h - L) / c_p$$\n\nThis algorithm is complete, robust, and handles both finite mushy intervals and the isothermal limit in a unified manner. It strictly adheres to the physical constraints and provides a numerically stable procedure for the required inversion. The implementation will follow this logic directly.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves for temperature (T) and liquid fraction (f_l) from specific enthalpy (h)\n    using the enthalpy method for phase change, covering multiple test cases.\n    \"\"\"\n\n    # test_cases format: (h, T_s, T_l, c_p, L)\n    # Units: h, L [J/kg]; T_s, T_l [K]; c_p [J/(kg·K)]\n    test_cases = [\n        # Case A: Subsolidus, finite mushy interval\n        (-100000.0, 300.0, 350.0, 2000.0, 250000.0),\n        # Case B: Mushy interior, finite mushy interval\n        (175000.0, 300.0, 350.0, 2000.0, 250000.0),\n        # Case C: Liquid boundary, finite mushy interval\n        (350000.0, 300.0, 350.0, 2000.0, 250000.0),\n        # Case D: Superliquid, finite mushy interval\n        (450000.0, 300.0, 350.0, 2000.0, 250000.0),\n        # Case E: Isothermal latent plateau\n        (50000.0, 300.0, 300.0, 1000.0, 100000.0),\n        # Case F: Isothermal, superliquid\n        (150000.0, 300.0, 300.0, 1000.0, 100000.0),\n        # Case G: Mushy lower boundary, finite mushy interval\n        (0.0, 300.0, 350.0, 2000.0, 250000.0),\n    ]\n\n    results = []\n    \n    for case in test_cases:\n        h, T_s, T_l, c_p, L = case\n        \n        # Enforce physical assumptions for robustness, although test cases are well-behaved.\n        # Tolerate floating point inaccuracies for T_l == T_s comparison.\n        is_isothermal = abs(T_l - T_s) < 1e-9\n\n        if is_isothermal:\n            # Isothermal phase change at T_s\n            h_l = L\n        else:\n            # Phase change over a mushy interval [T_s, T_l]\n            h_l = c_p * (T_l - T_s) + L\n        \n        h_s = 0.0\n\n        T, f_l = 0.0, 0.0\n\n        if h < h_s:\n            # Subsolidus (solid) regime\n            f_l = 0.0\n            T = T_s + h / c_p\n        elif h > h_l:\n            # Superliquid (liquid) regime\n            f_l = 1.0\n            T = T_s + (h - L) / c_p\n        else: # h_s <= h <= h_l\n            # Phase change regime (mushy or isothermal plateau)\n            if is_isothermal:\n                T = T_s\n                # Avoid division by zero if L=0 (no phase change), though problem implies L>0.\n                f_l = h / L if L > 0 else 0.0\n            else: # Mushy zone\n                # Numerically robust calculation: find f_l first\n                # f_l = h / h_l ; T = T_s + f_l * (T_l - T_s)\n                # Avoid division by zero if h_l=0 (unphysical for L>0, T_l>T_s)\n                f_l = h / h_l if h_l > 0 else 0.0\n                T = T_s + f_l * (T_l - T_s)\n\n        # Round to six decimal places as required\n        T_rounded = round(T, 6)\n        f_l_rounded = round(f_l, 6)\n        \n        # Ensure T_rounded isn't negative zero\n        if T_rounded == -0.0:\n            T_rounded = 0.0\n            \n        results.append([T_rounded, f_l_rounded])\n\n    # Format the final output string exactly as specified, without extra spaces\n    # Example: [[T_A,f_l_A],[T_B,f_l_B]]\n    result_str = \"[\" + \",\".join([f\"[{r[0]},{r[1]}]\" for r in results]) + \"]\"\n    print(result_str)\n\nsolve()\n```", "id": "2482083"}, {"introduction": "Once the core enthalpy-temperature relationship is established, the next challenge is to integrate it into a full numerical simulation, which requires careful treatment of boundary conditions. This practice challenges you to apply first principles of the Finite Volume Method (FVM) to derive the correct discrete form of a convective (Robin) boundary condition. By deriving the boundary source term yourself, you will gain a deeper insight into how external heat transfer processes drive the enthalpy field and initiate phase change within a computational domain [@problem_id:2482106].", "problem": "A one-dimensional semi-infinite slab of a Phase Change Material (PCM) occupies the half-space $x \\ge 0$. The slab is modeled by the enthalpy method, in which the volumetric enthalpy $H(T)$ accounts for both sensible and latent heat through an appropriate temperature-dependent relationship. The governing energy conservation law in the solid is conduction-only, with thermal conductivity $k$ treated as constant. The boundary at $x=0$ is exposed to an external fluid at ambient temperature $T_{\\infty}$ with a convective heat transfer coefficient $h_c$, so that the heat exchange at the boundary is controlled by Newton’s law of cooling. You discretize the solid with a cell-centered Finite Volume Method (FVM), considering the control volume adjacent to the boundary, denoted $P$, of thickness $\\Delta x$ and cross-sectional area $A$ (so the control volume has $V_P = A\\,\\Delta x$). Let $T_P$ denote the cell-centered temperature in $P$, and let $T_w$ denote the temperature at the boundary face at $x=0$.\n\nStarting from first principles and without invoking any pre-packaged discretization formulas:\n\n- Use the integral form of energy conservation over $V_P$, Fourier’s law of heat conduction, and Newton’s law of cooling to construct the semi-discrete enthalpy balance for cell $P$, clearly defining the sign convention for the boundary heat flux $q_w$ at $x=0$.\n- Enforce the convective (Robin) boundary condition at $x=0$ using a linear reconstruction between the boundary face at $x=0$ and the cell center at $x=\\Delta x/2$ to eliminate $T_w$ in favor of $T_P$ and $T_{\\infty}$.\n- In the resulting semi-discrete enthalpy balance, identify the boundary contribution as a volumetric source term $S_b(T_P)$ that depends only on $k$, $h_c$, $\\Delta x$, $T_{\\infty}$, and $T_P$.\n\nProvide the exact analytic expression for the volumetric boundary source term $S_b(T_P)$ to be added on the right-hand side of the enthalpy balance for cell $P$. Express $S_b(T_P)$ in $\\mathrm{W}\\,\\mathrm{m}^{-3}$. The final answer must be a single closed-form expression in terms of $k$, $h_c$, $\\Delta x$, $T_{\\infty}$, and $T_P$.", "solution": "The problem statement has been validated and is found to be scientifically grounded, well-posed, and objective. It constitutes a standard derivation in the field of computational heat transfer. We will proceed to derive the requested expression from first principles.\n\nThe integral form of the energy conservation law for the control volume $V_P$ is given by:\n$$\n\\frac{d}{dt} \\int_{V_P} H(T) \\, dV = - \\oint_{\\partial V_P} \\vec{q} \\cdot d\\vec{S}\n$$\nwhere $H(T)$ is the volumetric enthalpy in $\\mathrm{J}\\,\\mathrm{m}^{-3}$, $\\vec{q}$ is the heat flux vector in $\\mathrm{W}\\,\\mathrm{m}^{-2}$, $t$ is time, $V_P$ is the control volume, and $\\partial V_P$ is its boundary surface.\n\nFor the one-dimensional cell-centered control volume $P$ adjacent to the boundary, as described, the volume is $V_P = A \\Delta x$, where $A$ is the cross-sectional area and $\\Delta x$ is the thickness. The control volume extends from the physical boundary at $x=0$ (the west face, $w$) to the interior cell face at $x=\\Delta x$ (the east face, $e$). The cell center, where the temperature $T_P$ is defined, is at $x_P = \\Delta x/2$.\n\nAssuming the enthalpy is uniform within the cell, $H(T) \\approx H(T_P) = H_P$, the integral energy balance simplifies to a semi-discrete ordinary differential equation:\n$$\nV_P \\frac{dH_P}{dt} = A q_w - A q_e\n$$\nHere, we adopt the sign convention that heat flux $q$ is positive in the positive $x$-direction. Thus, $q_w$ is the heat flux entering the control volume at the west face ($x=0$) and $q_e$ is the heat flux leaving at the east face ($x=\\Delta x$). Dividing by the control volume $V_P = A \\Delta x$, we obtain the energy balance per unit volume:\n$$\n\\frac{dH_P}{dt} = \\frac{q_w}{\\Delta x} - \\frac{q_e}{\\Delta x}\n$$\nThe problem asks for the boundary contribution to this balance, which we identify as the volumetric source term $S_b(T_P)$. This term arises from the flux at the west face, $q_w$:\n$$\nS_b(T_P) = \\frac{q_w}{\\Delta x}\n$$\nTo determine $q_w$, we must enforce the convective boundary condition. At the surface $x=0$, the heat flux is continuous. It is given by Newton's law of cooling for the fluid side and Fourier's law of conduction for the solid side.\n$1$. Convective flux from the fluid at temperature $T_{\\infty}$ to the wall at temperature $T_w$:\n$$\nq_w = h_c (T_{\\infty} - T_w)\n$$\n$2$. Conductive flux from the wall into the solid:\n$$\nq_w = -k \\left. \\frac{\\partial T}{\\partial x} \\right|_{x=0}\n$$\nThe problem specifies using a linear reconstruction for the temperature profile between the boundary face at $x=0$ and the cell center at $x_P = \\Delta x/2$. This allows us to approximate the temperature gradient at the wall:\n$$\n\\left. \\frac{\\partial T}{\\partial x} \\right|_{x=0} \\approx \\frac{T_P - T_w}{x_P - 0} = \\frac{T_P - T_w}{\\Delta x / 2}\n$$\nSubstituting this approximation into Fourier's law gives:\n$$\nq_w = -k \\left( \\frac{T_P - T_w}{\\Delta x / 2} \\right) = \\frac{2k}{\\Delta x} (T_w - T_P)\n$$\nBy equating the convective and conductive expressions for $q_w$, we enforce flux continuity at the boundary:\n$$\nh_c (T_{\\infty} - T_w) = \\frac{2k}{\\Delta x} (T_w - T_P)\n$$\nWe must now solve this algebraic equation for the unknown wall temperature $T_w$ in terms of the cell temperature $T_P$ and the ambient temperature $T_{\\infty}$:\n$$\nh_c T_{\\infty} - h_c T_w = \\frac{2k}{\\Delta x} T_w - \\frac{2k}{\\Delta x} T_P\n$$\n$$\nh_c T_{\\infty} + \\frac{2k}{\\Delta x} T_P = T_w \\left( h_c + \\frac{2k}{\\Delta x} \\right)\n$$\n$$\nT_w = \\frac{h_c T_{\\infty} + \\frac{2k}{\\Delta x} T_P}{h_c + \\frac{2k}{\\Delta x}}\n$$\nNow we can construct the final expression for the volumetric source term $S_b(T_P)$. We substitute the expression for $T_w$ into the formula $S_b(T_P) = \\frac{h_c(T_{\\infty} - T_w)}{\\Delta x}$:\n$$\nS_b(T_P) = \\frac{h_c}{\\Delta x} \\left( T_{\\infty} - \\frac{h_c T_{\\infty} + \\frac{2k}{\\Delta x} T_P}{h_c + \\frac{2k}{\\Delta x}} \\right)\n$$\nTo simplify, we place the terms inside the parentheses over a common denominator:\n$$\nS_b(T_P) = \\frac{h_c}{\\Delta x} \\left( \\frac{T_{\\infty} \\left(h_c + \\frac{2k}{\\Delta x}\\right) - \\left(h_c T_{\\infty} + \\frac{2k}{\\Delta x} T_P\\right)}{h_c + \\frac{2k}{\\Delta x}} \\right)\n$$\nExpanding the numerator:\n$$\nS_b(T_P) = \\frac{h_c}{\\Delta x} \\left( \\frac{h_c T_{\\infty} + \\frac{2k}{\\Delta x} T_{\\infty} - h_c T_{\\infty} - \\frac{2k}{\\Delta x} T_P}{h_c + \\frac{2k}{\\Delta x}} \\right)\n$$\nThe terms $h_c T_{\\infty}$ cancel, leaving:\n$$\nS_b(T_P) = \\frac{h_c}{\\Delta x} \\left( \\frac{\\frac{2k}{\\Delta x} (T_{\\infty} - T_P)}{h_c + \\frac{2k}{\\Delta x}} \\right)\n$$\nTo eliminate the complex fraction, we can multiply the numerator and denominator of the inner fraction by $\\Delta x$:\n$$\nS_b(T_P) = \\frac{h_c}{\\Delta x} \\left( \\frac{2k (T_{\\infty} - T_P)}{h_c \\Delta x + 2k} \\right)\n$$\nFinally, combining the terms gives the complete expression for the volumetric boundary source term:\n$$\nS_b(T_P) = \\frac{2 k h_c}{\\Delta x (2k + h_c \\Delta x)} (T_{\\infty} - T_P)\n$$\nThis expression represents the net heat added to the first control volume per unit volume and per unit time due to the convective boundary condition at $x=0$.", "answer": "$$\n\\boxed{\\frac{2 k h_c (T_{\\infty} - T_P)}{\\Delta x (2k + h_c \\Delta x)}}\n$$", "id": "2482106"}, {"introduction": "While simple linear models are excellent for learning, real-world materials often exhibit complex, non-linear phase transitions and temperature-dependent properties. This advanced exercise extends the enthalpy-temperature inversion concept to materials with non-linear liquid fraction profiles and variable specific heat, necessitating the use of numerical root-finding techniques. Completing this practice demonstrates the true power of the enthalpy method, showing how it can be adapted to model the complex phase equilibria found in advanced materials by leveraging robust numerical solvers [@problem_id:2482091].", "problem": "A one-dimensional enthalpy method is used to model phase change with complex, non-linear liquid fraction profiles in temperature. Consider specific enthalpy per unit mass $h(T)$ defined on a bounded temperature interval $[T_{\\min},T_{\\max}]$ in Kelvin, with the reference taken at $T_{\\min}$, and with latent heat incorporated through the liquid fraction. The constitutive relations to be used are:\n- Specific heat capacity $c_p(T)$ (in J/(kg·K)) given by $c_p(T)=a+b(T-T_0)^2$ with constants $a \\ge 0$ and $b \\ge 0$.\n- Liquid fraction $f_\\ell(T) \\in [0, 1]$ defined as a weighted superposition of smooth step functions,\n$$\nf_\\ell(T)=\\sum_{i=1}^m w_i\\sigma\\left(\\frac{T-T_i}{s_i}\\right),\n$$\nwhere $\\sigma(x)=\\frac{1}{1+e^{-x}}$ is the logistic function, the weights $w_i$ satisfy $\\sum_{i=1}^m w_i=1$, $T_i$ are transition temperatures in Kelvin, and $s_i > 0$ are smoothing widths in Kelvin. For numerical stability, values of $f_\\ell(T)$ should be clamped to the interval $[0,1]$ if needed.\n- Latent heat $L$ (in J/kg), with $L \\ge 0$.\n\nThe specific enthalpy is\n$$\nh(T)=\\int_{T_{\\min}}^{T} c_p(\\theta)\\,\\mathrm{d}\\theta+L f_\\ell(T),\n$$\nin J/kg. Note that $h(T_{\\min})=\\int_{T_{\\min}}^{T_{\\min}} c_p(\\theta)\\,\\mathrm{d}\\theta+L f_\\ell(T_{\\min})=L f_\\ell(T_{\\min})$, and $h(T_{\\max})=\\int_{T_{\\min}}^{T_{\\max}} c_p(\\theta)\\,\\mathrm{d}\\theta+L f_\\ell(T_{\\max})$.\n\nTask. Design and implement a robust, globally convergent inversion routine that, given a target enthalpy value $h^\\ast$ in J/kg, returns the unique $T \\in [T_{\\min}, T_{\\max}]$ satisfying $h(T)=h^\\ast$ when such a $T$ exists. The routine must:\n- Treat $f_\\ell(T)$ as defined above, which may be non-linear and yield a non-convex $h(T)$, but with $c_p(T) \\ge 0$ and $L \\ge 0$ ensuring monotonicity of $h(T)$ over $[T_{\\min}, T_{\\max}]$.\n- Use a bracketing-based root finder for the residual $g(T)=h(T)-h^\\ast$ that guarantees convergence regardless of local non-convexities of $h(T)$, without assuming convexity or relying solely on local derivatives. It must return the boundary value $T_{\\min}$ if $h^\\ast \\le h(T_{\\min})$ and the boundary value $T_{\\max}$ if $h^\\ast \\ge h(T_{\\max})$.\n- Compute $h(T)$ using the provided constitutive forms, with the integral evaluated exactly from the quadratic $c_p(T)$, i.e.,\n$$\n\\int_{T_{\\min}}^{T} c_p(\\theta)\\,\\mathrm{d}\\theta=a(T-T_{\\min})+\\frac{b}{3}\\left[(T-T_0)^3-(T_{\\min}-T_0)^3\\right].\n$$\n\nAngle units do not appear. All temperatures must be reported in Kelvin, and the final answers must be printed in Kelvin rounded to exactly six decimal places.\n\nTest suite. Use the following six cases. For each case, define $h^\\ast$ as specified, then invert to obtain the corresponding temperature. The program must compute and output the list of temperatures for these six cases in order.\n\n- Case $1$:\n  - $T_{\\min}=300$ K, $T_{\\max}=1300$ K.\n  - $a=900$ J/(kg·K), $b=0$, $T_0=0$ K.\n  - $L=2.5 \\times 10^5$ J/kg.\n  - $f_\\ell(T)=\\sigma\\left(\\frac{T-900}{15}\\right)$.\n  - Define $h^\\ast=h(T^\\dagger)$ with $T^\\dagger=920$ K.\n\n- Case $2$:\n  - $T_{\\min}=300$ K, $T_{\\max}=1400$ K.\n  - $a=1000$ J/(kg·K), $b=0$, $T_0=0$ K.\n  - $L=3.0 \\times 10^5$ J/kg.\n  - $f_\\ell(T)=0.6\\sigma\\left(\\frac{T-700}{10}\\right)+0.4\\sigma\\left(\\frac{T-1000}{20}\\right)$.\n  - Define $h^\\ast=h(T^\\dagger)$ with $T^\\dagger=950$ K.\n\n- Case $3$:\n  - $T_{\\min}=300$ K, $T_{\\max}=1200$ K.\n  - $a=850$ J/(kg·K), $b=0$, $T_0=0$ K.\n  - $L=1.8 \\times 10^5$ J/kg.\n  - $f_\\ell(T)=\\sigma\\left(\\frac{T-800}{0.8}\\right)$.\n  - Define $h^\\ast=h(T^\\dagger)$ with $T^\\dagger=800.2$ K.\n\n- Case $4$:\n  - $T_{\\min}=300$ K, $T_{\\max}=1300$ K.\n  - $a=700$ J/(kg·K), $b=0.5$ J/(kg·K$^3$), $T_0=500$ K.\n  - $L=2.2 \\times 10^5$ J/kg.\n  - $f_\\ell(T)=0.2\\sigma\\left(\\frac{T-600}{12}\\right)+0.5\\sigma\\left(\\frac{T-900}{25}\\right)+0.3\\sigma\\left(\\frac{T-1100}{15}\\right)$.\n  - Define $h^\\ast=h(T^\\dagger)$ with $T^\\dagger=1000$ K.\n\n- Case $5$ (lower-bound test):\n  - Use the same parameters as Case $2$.\n  - Define $h^\\ast=h(T_{\\min})-10^4$ J/kg.\n\n- Case $6$ (upper-bound test):\n  - Use the same parameters as Case $1$.\n  - Define $h^\\ast=h(T_{\\max})+10^4$ J/kg.\n\nFinal output format. Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, for example, `[result1,result2,...,result6]`. Each temperature must be reported in Kelvin with exactly six digits after the decimal point, in the order of Cases $1$ through $6$.", "solution": "We begin from energy conservation and the definition of specific enthalpy in the enthalpy method for phase change. For a one-dimensional material element with temperature $T$ and liquid fraction $f_\\ell(T)$, the specific enthalpy $h(T)$ per unit mass changes due to sensible heat and latent heat. The sensible contribution is given by the integral of the specific heat capacity $c_p(T)$, and the latent contribution is $L f_\\ell(T)$, where $L$ is the latent heat of fusion per unit mass. This yields the constitutive definition\n$$\nh(T)=\\int_{T_{\\min}}^{T} c_p(\\theta)\\,\\mathrm{d}\\theta+L f_\\ell(T),\n$$\nwith $h(T_{\\min})=L f_\\ell(T_{\\min})$.\n\nFor the chosen parametric form $c_p(T)=a+b(T-T_0)^2$ with $a \\ge 0$, $b \\ge 0$, the integral admits the exact anti-derivative,\n$$\n\\int_{T_{\\min}}^{T} c_p(\\theta)\\,\\mathrm{d}\\theta=a(T-T_{\\min})+\\frac{b}{3}\\left[(T-T_0)^3-(T_{\\min}-T_0)^3\\right].\n$$\nThus the model is fully specified once $a$, $b$, $T_0$, $L$, and the liquid fraction profile $f_\\ell(T)$ are given. The liquid fraction is defined as a convex combination of logistic steps,\n$$\nf_\\ell(T)=\\sum_{i=1}^m w_i\\sigma\\left(\\frac{T-T_i}{s_i}\\right),\\quad \\sigma(x)=\\frac{1}{1+e^{-x}},\\quad \\sum_{i=1}^m w_i=1,\\quad s_i>0,\n$$\noptionally clamped to $[0,1]$ for numerical robustness. The first derivative of $h(T)$ is\n$$\n\\frac{\\mathrm{d}h}{\\mathrm{d}T}=c_p(T)+L\\frac{\\mathrm{d}f_\\ell}{\\mathrm{d}T}.\n$$\nBecause $c_p(T) \\ge a \\ge 0$ and $\\frac{\\mathrm{d}f_\\ell}{\\mathrm{d}T} \\ge 0$ for the logistic-based $f_\\ell(T)$, we have $\\frac{\\mathrm{d}h}{\\mathrm{d}T} \\ge a \\ge 0$. In our test suite, $a > 0$ in all cases, which guarantees $\\frac{\\mathrm{d}h}{\\mathrm{d}T} > 0$ for all $T \\in [T_{\\min}, T_{\\max}]$. Therefore $h(T)$ is strictly increasing, ensuring existence and uniqueness of the inverse $T(h)$ on $[T_{\\min}, T_{\\max}]$. Although $h(T)$ may be non-convex (i.e., have regions where $\\frac{\\mathrm{d}^2 h}{\\mathrm{d}T^2}$ changes sign) due to multiple phase transitions or temperature-dependent $c_p(T)$, monotonicity suffices for robust inversion.\n\nTo invert $h(T)$ for a given $h^\\ast$, we reformulate the problem as finding a root of the residual\n$$\ng(T)=h(T)-h^\\ast.\n$$\nBecause $h(T)$ is continuous and strictly increasing on $[T_{\\min},T_{\\max}]$, $g(T)$ is also continuous and strictly increasing, and hence any root in the interval is unique. A robust inversion routine is obtained by a bracketing-based root finder that exploits this monotonicity:\n- Compute $h_{\\min}=h(T_{\\min})$ and $h_{\\max}=h(T_{\\max})$.\n- If $h^\\ast \\le h_{\\min}$, return $T_{\\min}$; if $h^\\ast \\ge h_{\\max}$, return $T_{\\max}$.\n- Otherwise, $g(T_{\\min})=h_{\\min}-h^\\ast  0$ and $g(T_{\\max})=h_{\\max}-h^\\ast > 0$, so there is a unique root in $(T_{\\min},T_{\\max})$. Use a bracketing method such as the algorithm of Richard Brent (which blends bisection, secant, and inverse quadratic interpolation with bracketing safeguards) to find the root. Brent’s method is globally convergent for continuous functions with opposite signs at the bracketing endpoints and is insensitive to non-convexity.\n\nThis design is principle-based: it starts from the enthalpy definition and guarantees invertibility by showing monotonicity of $h(T)$. The numerical method choice ensures robustness without relying on local convexity or derivatives.\n\nAlgorithmic details for evaluation:\n- Evaluate $f_\\ell(T)$ via the logistic definition. For numerical stability, use saturation of $\\sigma(x)$ for large $|x|$ (e.g., treat $x\\le -40$ as $\\sigma(x)\\approx 0$ and $x\\ge 40$ as $\\sigma(x)\\approx 1$) and clamp the final $f_\\ell(T)$ to $[0,1]$ if needed.\n- Evaluate the sensible heat integral exactly from the quadratic polynomial for $c_p(T)$, using\n$$\n\\int_{T_{\\min}}^{T} c_p(\\theta)\\,\\mathrm{d}\\theta=a(T-T_{\\min})+\\frac{b}{3}\\left[(T-T_0)^3-(T_{\\min}-T_0)^3\\right].\n$$\n- Assemble $h(T)$ as sensible plus latent contributions and compute $g(T)=h(T)-h^\\ast$.\n- Apply the bracketing root finder on $[T_{\\min},T_{\\max}]$.\n- Round the final temperature to six decimal places and report in Kelvin.\n\nTest suite handling:\n- Cases $1$–$4$ define $h^\\ast=h(T^\\dagger)$ for a specified $T^\\dagger$ within $[T_{\\min},T_{\\max}]$. By strict monotonicity, the inversion must return $T=T^\\dagger$ to within the numerical tolerance.\n- Case $5$ defines a lower-bound stress test $h^\\ast=h(T_{\\min})-10^4$ J/kg, which must return $T_{\\min}$.\n- Case $6$ defines an upper-bound stress test $h^\\ast=h(T_{\\max})+10^4$ J/kg, which must return $T_{\\max}$.\n\nThe final program constructs each case, computes the corresponding $h^\\ast$ as specified, performs the inversion using a bracketing method, and prints a single line with the six temperatures in Kelvin, each rounded to exactly six decimals, enclosed in square brackets and separated by commas, as required.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.optimize import root_scalar\n\ndef sigmoid(x: float) - float:\n    # Numerically stable logistic function with saturation.\n    if x = -40.0:\n        return 0.0\n    if x = 40.0:\n        return 1.0\n    return 1.0 / (1.0 + np.exp(-x))\n\ndef liquid_fraction(T: float, fl_params):\n    # fl_params: list of tuples (w_i, T_i, s_i)\n    val = 0.0\n    for (w, Ti, si) in fl_params:\n        val += w * sigmoid((T - Ti) / si)\n    # Clamp to [0,1] to avoid any numerical overshoot.\n    if val  0.0:\n        val = 0.0\n    elif val  1.0:\n        val = 1.0\n    return val\n\ndef sensible_integral(T: float, Tmin: float, a: float, b: float, T0: float) - float:\n    # Exact integral of c_p(T) = a + b*(T - T0)^2 from Tmin to T\n    return a * (T - Tmin) + (b / 3.0) * ((T - T0) ** 3 - (Tmin - T0) ** 3)\n\ndef enthalpy(T: float, params: dict) - float:\n    Tmin = params[\"Tmin\"]\n    a = params[\"a\"]\n    b = params[\"b\"]\n    T0 = params[\"T0\"]\n    L = params[\"L\"]\n    fl = params[\"fl\"]\n    h_sens = sensible_integral(T, Tmin, a, b, T0)\n    f = liquid_fraction(T, fl)\n    return h_sens + L * f\n\ndef invert_temperature(params: dict, h_star: float) - float:\n    Tmin = params[\"Tmin\"]\n    Tmax = params[\"Tmax\"]\n\n    # Compute enthalpy at bounds\n    h_min = enthalpy(Tmin, params)\n    h_max = enthalpy(Tmax, params)\n\n    # Bound handling\n    if h_star = h_min:\n        return float(Tmin)\n    if h_star = h_max:\n        return float(Tmax)\n\n    # Define residual g(T) = h(T) - h_star\n    def g(T):\n        return enthalpy(T, params) - h_star\n\n    # Brent's method on [Tmin, Tmax]\n    sol = root_scalar(g, bracket=[Tmin, Tmax], method=\"brentq\", xtol=1e-12, rtol=1e-12, maxiter=200)\n    if not sol.converged:\n        # As a last resort fallback, perform bisection manually\n        a_, b_ = Tmin, Tmax\n        fa, fb = g(a_), g(b_)\n        # Ensure bracketing exists (should be true due to checks above)\n        for _ in range(200):\n            m = 0.5 * (a_ + b_)\n            fm = g(m)\n            if fm == 0.0 or abs(b_ - a_)  1e-12:\n                return m\n            if np.sign(fm) == np.sign(fa):\n                a_, fa = m, fm\n            else:\n                b_, fb = m, fm\n        return 0.5 * (a_ + b_)\n    return float(sol.root)\n\ndef solve():\n    # Define the six test cases as per the problem statement.\n    # Each case is a dict with parameters for c_p, f_l, latent heat, and T bounds.\n    # For Cases 1-4 we define probe_T from which h_star is generated.\n    # For Cases 5-6 we define offsets relative to h(Tmin) and h(Tmax).\n    cases = []\n\n    # Case 1\n    cases.append({\n        \"Tmin\": 300.0, \"Tmax\": 1300.0,\n        \"a\": 900.0, \"b\": 0.0, \"T0\": 0.0,\n        \"L\": 2.5e5,\n        \"fl\": [(1.0, 900.0, 15.0)],\n        \"probe_T\": 920.0,\n        \"offset\": None\n    })\n\n    # Case 2\n    cases.append({\n        \"Tmin\": 300.0, \"Tmax\": 1400.0,\n        \"a\": 1000.0, \"b\": 0.0, \"T0\": 0.0,\n        \"L\": 3.0e5,\n        \"fl\": [(0.6, 700.0, 10.0), (0.4, 1000.0, 20.0)],\n        \"probe_T\": 950.0,\n        \"offset\": None\n    })\n\n    # Case 3\n    cases.append({\n        \"Tmin\": 300.0, \"Tmax\": 1200.0,\n        \"a\": 850.0, \"b\": 0.0, \"T0\": 0.0,\n        \"L\": 1.8e5,\n        \"fl\": [(1.0, 800.0, 0.8)],\n        \"probe_T\": 800.2,\n        \"offset\": None\n    })\n\n    # Case 4\n    cases.append({\n        \"Tmin\": 300.0, \"Tmax\": 1300.0,\n        \"a\": 700.0, \"b\": 0.5, \"T0\": 500.0,\n        \"L\": 2.2e5,\n        \"fl\": [(0.2, 600.0, 12.0), (0.5, 900.0, 25.0), (0.3, 1100.0, 15.0)],\n        \"probe_T\": 1000.0,\n        \"offset\": None\n    })\n\n    # Case 5 (lower-bound test) - same parameters as Case 2, offset below h(Tmin)\n    cases.append({\n        \"Tmin\": 300.0, \"Tmax\": 1400.0,\n        \"a\": 1000.0, \"b\": 0.0, \"T0\": 0.0,\n        \"L\": 3.0e5,\n        \"fl\": [(0.6, 700.0, 10.0), (0.4, 1000.0, 20.0)],\n        \"probe_T\": None,\n        \"offset\": (\"low\", 1.0e4)  # h_star = h(Tmin) - 1e4\n    })\n\n    # Case 6 (upper-bound test) - same parameters as Case 1, offset above h(Tmax)\n    cases.append({\n        \"Tmin\": 300.0, \"Tmax\": 1300.0,\n        \"a\": 900.0, \"b\": 0.0, \"T0\": 0.0,\n        \"L\": 2.5e5,\n        \"fl\": [(1.0, 900.0, 15.0)],\n        \"probe_T\": None,\n        \"offset\": (\"high\", 1.0e4)  # h_star = h(Tmax) + 1e4\n    })\n\n    results = []\n    for case in cases:\n        params = {\n            \"Tmin\": case[\"Tmin\"],\n            \"Tmax\": case[\"Tmax\"],\n            \"a\": case[\"a\"],\n            \"b\": case[\"b\"],\n            \"T0\": case[\"T0\"],\n            \"L\": case[\"L\"],\n            \"fl\": case[\"fl\"],\n        }\n        if case[\"probe_T\"] is not None:\n            # Construct h_star = h(T_dagger) for the given probe temperature\n            T_probe = case[\"probe_T\"]\n            h_star = enthalpy(T_probe, params)\n        else:\n            # Construct h_star from offset relative to boundary enthalpy\n            which, mag = case[\"offset\"]\n            if which == \"low\":\n                h_star = enthalpy(params[\"Tmin\"], params) - mag\n            elif which == \"high\":\n                h_star = enthalpy(params[\"Tmax\"], params) + mag\n            else:\n                raise ValueError(\"Unknown offset specifier.\")\n\n        T_inv = invert_temperature(params, h_star)\n        # Round to exactly 6 decimals for output\n        results.append(f\"{T_inv:.6f}\")\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "2482091"}]}