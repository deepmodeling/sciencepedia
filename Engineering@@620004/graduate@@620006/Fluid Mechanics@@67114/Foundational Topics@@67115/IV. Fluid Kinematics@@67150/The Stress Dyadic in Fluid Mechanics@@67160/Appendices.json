{"hands_on_practices": [{"introduction": "To truly understand the stress dyadic, we first must grasp when its off-diagonal, or shear, components come into play. This exercise uses a hypothetical scenario of a fluid in solid-body rotation to explore a fundamental principle: viscous stresses arise from the rate of deformation of a fluid, not simply from its motion. By analyzing this specific case where the fluid moves as a rigid body, you will solidify your understanding of the link between relative fluid motion and the generation of shear stress [@problem_id:1767847].", "problem": "A large, open-topped cylindrical container is partially filled with a viscous, incompressible Newtonian fluid of density $\\rho$ and dynamic viscosity $\\mu$. The container is initially at rest. It is then spun about its central vertical axis with a constant angular velocity $\\Omega$. After a sufficient amount of time, the entire body of fluid rotates with the container as a rigid body, a state known as solid-body rotation. In this state, the free surface of the fluid assumes a parabolic shape.\n\nConsider a small, imaginary tetrahedron-shaped fluid element located at an arbitrary point within the bulk of the rotating fluid (i.e., not on the free surface or in contact with the container walls). Is the thermodynamic pressure acting on the faces of this element isotropic? Select the best explanation from the choices below.\n\nA. No, the pressure is not isotropic. The centrifugal force, which acts radially outward, creates a higher pressure in the radial direction compared to other directions.\n\nB. No, the pressure is not isotropic. Any fluid motion, including solid-body rotation, necessarily induces viscous shear stresses between adjacent fluid layers, making the total stress state anisotropic.\n\nC. Yes, the pressure remains isotropic. In solid-body rotation, there is no relative motion or deformation between adjacent fluid particles, which means no viscous shear stresses are generated. The stress state is therefore purely compressive and uniform in all directions at any given point.\n\nD. Yes, the pressure remains isotropic, but its value is direction-dependent. The pressure in the radial direction is greater than in the vertical direction at the same point.\n\nE. The concept of pressure is ill-defined for a moving fluid. One must use the full stress tensor, which is inherently anisotropic in this case due to the rotation.", "solution": "For a Newtonian fluid, the Cauchy stress tensor at a point is decomposed as\n$$\n\\boldsymbol{\\sigma} = -p\\,\\mathbf{I} + \\boldsymbol{\\tau},\n$$\nwhere $p$ is the thermodynamic pressure (a scalar) and $\\boldsymbol{\\tau}$ is the deviatoric viscous stress. For an incompressible Newtonian fluid,\n$$\n\\boldsymbol{\\tau} = 2\\mu\\,\\mathbf{E}, \\quad \\text{with} \\quad E_{ij} = \\frac{1}{2}\\left(\\frac{\\partial u_{i}}{\\partial x_{j}} + \\frac{\\partial u_{j}}{\\partial x_{i}}\\right).\n$$\nThus, the stress is isotropic at a point if and only if $\\boldsymbol{\\tau} = \\mathbf{0}$, i.e., if the rate-of-strain tensor $\\mathbf{E}$ vanishes.\n\nIn solid-body rotation with constant angular velocity $\\boldsymbol{\\Omega} = \\Omega\\,\\hat{\\mathbf{z}}$, the velocity field is\n$$\n\\mathbf{u} = \\boldsymbol{\\Omega} \\times \\mathbf{r}.\n$$\nWriting components using $u_{i} = \\epsilon_{ijk}\\,\\Omega_{j}\\,x_{k}$ and differentiating,\n$$\n\\frac{\\partial u_{i}}{\\partial x_{l}} = \\epsilon_{ijk}\\,\\Omega_{j}\\,\\frac{\\partial x_{k}}{\\partial x_{l}} = \\epsilon_{ijl}\\,\\Omega_{j}.\n$$\nThe rate-of-strain tensor is the symmetric part of the velocity gradient, hence\n$$\nE_{il} = \\frac{1}{2}\\left(\\epsilon_{ijl}\\,\\Omega_{j} + \\epsilon_{lji}\\,\\Omega_{j}\\right) = \\frac{1}{2}\\left(\\epsilon_{ijl} - \\epsilon_{ijl}\\right)\\Omega_{j} = 0.\n$$\nTherefore,\n$$\n\\boldsymbol{\\tau} = 2\\mu\\,\\mathbf{E} = \\mathbf{0},\n$$\nand the Cauchy stress reduces to\n$$\n\\boldsymbol{\\sigma} = -p\\,\\mathbf{I}.\n$$\nThis means the stress at any point is purely hydrostatic and isotropic; the thermodynamic pressure acts equally on all faces through $-p\\,\\mathbf{n}$ for any unit normal $\\mathbf{n}$.\n\nThe pressure may vary with position because steady momentum balance in the inertial frame,\n$$\n\\rho\\,\\mathbf{a} = -\\nabla p + \\rho\\,\\mathbf{g},\n$$\nwith $\\mathbf{a} = \\boldsymbol{\\Omega}\\times(\\boldsymbol{\\Omega}\\times \\mathbf{r}) = -\\Omega^{2} r\\,\\hat{\\mathbf{r}}$, gives\n$$\n\\nabla p = \\rho\\left(\\mathbf{g} + \\Omega^{2} r\\,\\hat{\\mathbf{r}}\\right),\n$$\nso $p$ increases radially outward (and varies with $z$ under gravity). However, this spatial variation does not alter isotropy at a point: the stress tensor remains $-p\\,\\mathbf{I}$ with no shear components. Hence the thermodynamic pressure acting on the faces of a small fluid element is isotropic in solid-body rotation.\n\nTherefore, the correct choice is the statement that emphasizes absence of viscous shear in solid-body rotation and a purely compressive, isotropic stress at any given point.", "answer": "$$\\boxed{C}$$", "id": "1767847"}, {"introduction": "The stress tensor, whether it describes viscous effects or turbulent fluctuations, contains information about both pressure-like forces and shape-distorting forces. This practice introduces a critical mathematical tool: the decomposition of a tensor into its isotropic and deviatoric parts. Working with a given Reynolds stress tensor from a hypothetical turbulence measurement, you will learn how to isolate the component responsible for anisotropic stress, providing a concrete skill applicable in fields like turbulence modeling [@problem_id:1555741].", "problem": "In the study of turbulent fluid dynamics, the Reynolds stress tensor, denoted by $\\mathbf{T}$, is a symmetric second-rank tensor that quantifies the contribution of turbulent fluctuations to the overall momentum transport in a fluid. Any symmetric second-rank tensor can be additively decomposed into an isotropic part and a deviatoric part. The isotropic part represents a scalar pressure-like term (often called the turbulent pressure), while the deviatoric part represents the anisotropic stresses that cause the fluid element to deform.\n\nAt a specific point within a turbulent boundary layer, the Reynolds stress tensor $\\mathbf{T}$ is measured and its components are given by the following matrix, with respect to a Cartesian coordinate system $(x_1, x_2, x_3)$:\n$$\n\\mathbf{T} = \\begin{pmatrix} 10 & 1 & -2 \\\\ 1 & 6 & 3 \\\\ -2 & 3 & 8 \\end{pmatrix} \\text{kPa}\n$$\nLet $\\mathbf{T}_{\\text{dev}}$ be the deviatoric part of the tensor $\\mathbf{T}$. Calculate the component $T_{\\text{dev},23}$ of the deviatoric tensor. Express your answer in units of kPa.", "solution": "The deviatoric part of a second-rank tensor $\\mathbf{T}$ is defined by removing its isotropic (spherical) part:\n$$\n\\mathbf{T}_{\\text{dev}}=\\mathbf{T}-\\frac{1}{3}\\,\\text{tr}(\\mathbf{T})\\,\\mathbf{I}.\n$$\nFirst compute the trace of $\\mathbf{T}$:\n$$\n\\text{tr}(\\mathbf{T})=T_{11}+T_{22}+T_{33}=10+6+8=24.\n$$\nHence the isotropic part is\n$$\n\\frac{1}{3}\\,\\text{tr}(\\mathbf{T})\\,\\mathbf{I}=8\\,\\mathbf{I}.\n$$\nSince the isotropic part is diagonal, all its off-diagonal components are zero. Therefore, for the $(2,3)$ component,\n$$\nT_{\\text{dev},23}=T_{23}-0=3.\n$$\nBecause the entries of $\\mathbf{T}$ are in kPa, the component $T_{\\text{dev},23}$ is $3$ kPa.", "answer": "$$\\boxed{3}$$", "id": "1555741"}, {"introduction": "In computational fluid dynamics and experimental analysis, we often work with discrete velocity field data. This hands-on computational exercise bridges the gap between the abstract concept of the stress dyadic and its practical application in data analysis. You will implement a method to calculate a scalar magnitude of shear stress from the velocity gradient tensor, learning how to identify regions of high stress in a flow, a vital task for engineering design and scientific investigation [@problem_id:2449119].", "problem": "You are given a set of discrete velocity gradient tensors sampled at points in a viscous Newtonian fluid. In computational modeling, the velocity gradient tensor $\\nabla \\mathbf{v}$ at a point is a matrix whose entries have units of inverse seconds $\\mathrm{s}^{-1}$. For a Newtonian fluid with dynamic viscosity $\\mu$ in pascal-seconds $\\mathrm{Pa \\cdot s}$, the deviatoric Cauchy stress tensor is modeled by the constitutive relation (a well-tested formula in continuum mechanics): the deviatoric stress tensor equals the dynamic viscosity times a symmetric tensor derived from the velocity gradient. Formally, this tensor is $\\mathbf{S} = \\nabla \\mathbf{v} + (\\nabla \\mathbf{v})^{\\mathsf{T}}$, and the deviatoric stress tensor is $\\boldsymbol{\\tau} = \\mu \\, \\mathbf{S}$. Regions of high shear stress correlate with large magnitude of $\\boldsymbol{\\tau}$.\n\nYour task is to design and implement a program that, for each provided test case, computes a scalar measure of the shear stress magnitude using the Frobenius norm $\\|\\cdot\\|_{F}$, namely the scalar\n$$\n\\tau_{\\mathrm{mag}} = \\mu \\, \\|\\mathbf{S}\\|_{F} = \\mu \\, \\|\\nabla \\mathbf{v} + (\\nabla \\mathbf{v})^{\\mathsf{T}}\\|_{F},\n$$\nwith units of pascals $\\mathrm{Pa}$. A point is classified as a high-shear region if $\\tau_{\\mathrm{mag}}$ is greater than or equal to a given threshold $\\tau_{\\mathrm{th}}$ (in pascals), within a specified absolute tolerance $\\varepsilon$. Use the absolute tolerance $\\varepsilon = 10^{-10}\\ \\mathrm{Pa}$ and the rule “classify as high shear if and only if $\\tau_{\\mathrm{mag}} + \\varepsilon \\ge \\tau_{\\mathrm{th}}$.”\n\nFundamental base to use:\n- Newtonian fluid deviatoric stress equals dynamic viscosity times the symmetric part of the velocity gradient.\n- The Frobenius norm is a unitarily invariant matrix norm appropriate for measuring the magnitude of a tensor independent of orthonormal basis rotations.\n\nImplement the following test suite. For each case, you are given a velocity gradient matrix $\\nabla \\mathbf{v}$, a dynamic viscosity $\\mu$, and a threshold $\\tau_{\\mathrm{th}}$. All $\\mu$ values are in $\\mathrm{Pa \\cdot s}$, all gradient entries are in $\\mathrm{s}^{-1}$, and all thresholds are in $\\mathrm{Pa}$. Classify each case as a boolean according to the rule above.\n\n- Case $1$ (zero gradient; boundary case):\n  - $\\nabla \\mathbf{v} = \\begin{bmatrix} 0 & 0 \\\\ 0 & 0 \\end{bmatrix}$, $\\mu = 1.0$, $\\tau_{\\mathrm{th}} = 0.1$.\n\n- Case $2$ (pure rigid-body rotation; anti-symmetric; boundary case that should not produce shear):\n  - $\\nabla \\mathbf{v} = \\begin{bmatrix} 0 & 5.0 \\\\ -5.0 & 0 \\end{bmatrix}$, $\\mu = 0.5$, $\\tau_{\\mathrm{th}} = 0.01$.\n\n- Case $3$ (pure shear; happy path):\n  - $\\nabla \\mathbf{v} = \\begin{bmatrix} 0 & 3.0 \\\\ 0 & 0 \\end{bmatrix}$, $\\mu = 0.8$, $\\tau_{\\mathrm{th}} = 3.0$.\n\n- Case $4$ (equality at threshold; tests tolerance):\n  - $\\nabla \\mathbf{v} = \\begin{bmatrix} 1.0 & 2.0 \\\\ 2.0 & -1.0 \\end{bmatrix}$, $\\mu = 0.2$.\n  - Set $\\tau_{\\mathrm{th}}$ for this case equal to the exact value $\\tau_{\\mathrm{mag}}$ computed from these inputs, that is $\\tau_{\\mathrm{th}} = \\mu \\, \\|\\nabla \\mathbf{v} + (\\nabla \\mathbf{v})^{\\mathsf{T}}\\|_{F}$.\n\n- Case $5$ (large anti-symmetric entries but tiny symmetric part; edge case):\n  - $\\nabla \\mathbf{v} = \\begin{bmatrix} 0.0 & 10.0 & 0.0 \\\\ -9.9999 & 0.0 & 0.0001 \\\\ 0.0 & -0.0001 & 0.0 \\end{bmatrix}$, $\\mu = 1.0$, $\\tau_{\\mathrm{th}} = 0.001$.\n\n- Case $6$ (three-dimensional mixed symmetric contributions; happy path in $3$D):\n  - $\\nabla \\mathbf{v} = \\begin{bmatrix} 1.0 & 2.0 & 3.0 \\\\ 2.0 & 0.0 & -1.0 \\\\ 3.0 & -1.0 & 0.0 \\end{bmatrix}$, $\\mu = 0.05$, $\\tau_{\\mathrm{th}} = 0.4$.\n\nAngle units are not involved in this problem. All physical quantities must be treated with their stated units (do not convert units). The final classification for each case must be a boolean.\n\nFinal output format:\n- Your program should produce a single line of output containing the results as a comma-separated list of booleans enclosed in square brackets, with no spaces, in the order of the cases above. For example, output of six cases should look like: “[True,False,True,False,True,False]”.", "solution": "We begin from the constitutive behavior of a Newtonian fluid, which is a well-tested physical law: the deviatoric Cauchy stress tensor equals the dynamic viscosity times the rate-of-strain tensor. The rate-of-strain tensor is the symmetric part of the velocity gradient, so the deviatoric stress tensor is\n$$\n\\boldsymbol{\\tau} = 2 \\mu \\mathbf{D}, \\quad \\mathbf{D} = \\tfrac{1}{2}\\left(\\nabla \\mathbf{v} + (\\nabla \\mathbf{v})^{\\mathsf{T}}\\right).\n$$\nCombining these gives the equivalent and numerically convenient form\n$$\n\\boldsymbol{\\tau} = \\mu \\left(\\nabla \\mathbf{v} + (\\nabla \\mathbf{v})^{\\mathsf{T}}\\right) = \\mu \\mathbf{S},\n$$\nwhere $\\mathbf{S} = \\nabla \\mathbf{v} + (\\nabla \\mathbf{v})^{\\mathsf{T}}$ is symmetric. To quantify the magnitude of shear stress in a way that is independent of the orientation of the orthonormal basis (a desirable property for computational physics), we use the Frobenius norm $\\|\\cdot\\|_{F}$, which is orthogonally invariant. The scalar measure of shear stress magnitude is therefore\n$$\n\\tau_{\\mathrm{mag}} = \\|\\boldsymbol{\\tau}\\|_{F} = \\mu \\, \\|\\mathbf{S}\\|_{F} = \\mu \\sqrt{\\sum_{i,j} S_{ij}^{2}}.\n$$\nThis scalar has units of pascals $\\mathrm{Pa}$ because $\\mu$ has units $\\mathrm{Pa \\cdot s}$ and the entries of $\\mathbf{S}$ have units $\\mathrm{s}^{-1}$.\n\nWe classify a point as a high-shear region if $\\tau_{\\mathrm{mag}}$ meets or exceeds a threshold $\\tau_{\\mathrm{th}}$ within an absolute tolerance $\\varepsilon$. Numerically, to avoid classifying an exact-equality case incorrectly due to floating-point roundoff, we implement the rule “classify as high shear if and only if $\\tau_{\\mathrm{mag}} + \\varepsilon \\ge \\tau_{\\mathrm{th}}$,” with $\\varepsilon = 10^{-10}\\ \\mathrm{Pa}$.\n\nAlgorithmic steps for each case:\n- Step $1$: Form $\\mathbf{S} = \\nabla \\mathbf{v} + (\\nabla \\mathbf{v})^{\\mathsf{T}}$.\n- Step $2$: Compute $\\|\\mathbf{S}\\|_{F}$.\n- Step $3$: Compute $\\tau_{\\mathrm{mag}} = \\mu \\, \\|\\mathbf{S}\\|_{F}$.\n- Step $4$: Compare using the criterion $\\tau_{\\mathrm{mag}} + \\varepsilon \\ge \\tau_{\\mathrm{th}}$ to produce a boolean classification.\n\nWhy this works and what it reveals:\n- The antisymmetric part of $\\nabla \\mathbf{v}$ corresponds to rigid-body rotation, which does not produce deviatoric stress in a Newtonian fluid. This antisymmetric component cancels in $\\mathbf{S}$, so pure rotations lead to $\\mathbf{S} = \\mathbf{0}$ and hence $\\tau_{\\mathrm{mag}} = 0$.\n- The Frobenius norm aggregates contributions from all components of $\\mathbf{S}$ and is invariant under orthonormal changes of basis, so it provides a basis-independent magnitude of shear stress.\n\nNow we evaluate the six specified cases:\n\n- Case $1$: $\\nabla \\mathbf{v} = \\begin{bmatrix} 0 & 0 \\\\ 0 & 0 \\end{bmatrix}$, $\\mu = 1.0$, $\\tau_{\\mathrm{th}} = 0.1$.\n  - $\\mathbf{S} = \\mathbf{0}$, so $\\|\\mathbf{S}\\|_{F} = 0$ and $\\tau_{\\mathrm{mag}} = 0$. Since $0 + 10^{-10} < 0.1$, classification is False.\n\n- Case $2$: $\\nabla \\mathbf{v} = \\begin{bmatrix} 0 & 5.0 \\\\ -5.0 & 0 \\end{bmatrix}$, $\\mu = 0.5$, $\\tau_{\\mathrm{th}} = 0.01$.\n  - $\\mathbf{S} = \\mathbf{0}$ because the gradient is antisymmetric. Hence $\\tau_{\\mathrm{mag}} = 0$, and with the same reasoning, classification is False.\n\n- Case $3$: $\\nabla \\mathbf{v} = \\begin{bmatrix} 0 & 3.0 \\\\ 0 & 0 \\end{bmatrix}$, $\\mu = 0.8$, $\\tau_{\\mathrm{th}} = 3.0$.\n  - $\\mathbf{S} = \\begin{bmatrix} 0 & 3.0 \\\\ 3.0 & 0 \\end{bmatrix}$.\n  - $\\|\\mathbf{S}\\|_{F} = \\sqrt{0^{2} + 3.0^{2} + 3.0^{2} + 0^{2}} = \\sqrt{18} \\approx 4.242640687$.\n  - $\\tau_{\\mathrm{mag}} \\approx 0.8 \\times 4.242640687 \\approx 3.3941125496 \\ge 3.0$, so classification is True.\n\n- Case $4$: $\\nabla \\mathbf{v} = \\begin{bmatrix} 1.0 & 2.0 \\\\ 2.0 & -1.0 \\end{bmatrix}$, $\\mu = 0.2$, and $\\tau_{\\mathrm{th}}$ is set equal to $\\tau_{\\mathrm{mag}}$ for this case by definition.\n  - $\\mathbf{S} = \\begin{bmatrix} 2.0 & 4.0 \\\\ 4.0 & -2.0 \\end{bmatrix}$.\n  - $\\|\\mathbf{S}\\|_{F} = \\sqrt{2.0^{2} + 4.0^{2} + 4.0^{2} + (-2.0)^{2}} = \\sqrt{40} \\approx 6.3245553203$.\n  - $\\tau_{\\mathrm{mag}} = 0.2 \\times \\sqrt{40} \\approx 1.2649110641$, and $\\tau_{\\mathrm{th}}$ is set to this same value. By the tolerance rule, $\\tau_{\\mathrm{mag}} + \\varepsilon \\ge \\tau_{\\mathrm{th}}$, so classification is True.\n\n- Case $5$: $\\nabla \\mathbf{v} = \\begin{bmatrix} 0.0 & 10.0 & 0.0 \\\\ -9.9999 & 0.0 & 0.0001 \\\\ 0.0 & -0.0001 & 0.0 \\end{bmatrix}$, $\\mu = 1.0$, $\\tau_{\\mathrm{th}} = 0.001$.\n  - The antisymmetric entries nearly cancel in $\\mathbf{S}$, yielding $\\mathbf{S}$ with tiny off-diagonal terms $\\approx 0.0001$ and zeros elsewhere. Thus $\\|\\mathbf{S}\\|_{F} \\approx \\sqrt{2 \\times (0.0001)^{2}} \\approx 1.414213562 \\times 10^{-4}$.\n  - $\\tau_{\\mathrm{mag}} \\approx 1.414213562 \\times 10^{-4} < 0.001$, so classification is False.\n\n- Case $6$: $\\nabla \\mathbf{v} = \\begin{bmatrix} 1.0 & 2.0 & 3.0 \\\\ 2.0 & 0.0 & -1.0 \\\\ 3.0 & -1.0 & 0.0 \\end{bmatrix}$, $\\mu = 0.05$, $\\tau_{\\mathrm{th}} = 0.4$.\n  - $\\mathbf{S} = \\begin{bmatrix} 2.0 & 4.0 & 6.0 \\\\ 4.0 & 0.0 & -2.0 \\\\ 6.0 & -2.0 & 0.0 \\end{bmatrix}$.\n  - $\\|\\mathbf{S}\\|_{F} = \\sqrt{116} \\approx 10.770329614$.\n  - $\\tau_{\\mathrm{mag}} \\approx 0.05 \\times 10.770329614 \\approx 0.5385164807 \\ge 0.4$, so classification is True.\n\nTherefore, the boolean classifications in order are\n$[\\text{False}, \\text{False}, \\text{True}, \\text{True}, \\text{False}, \\text{True}]$.\n\nThe program should implement the above algorithm and print exactly this list format on a single line.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef shear_classification(grad, mu, tau_th, eps=1e-10):\n    \"\"\"\n    Classify a point as high shear if mu * ||S||_F + eps >= tau_th,\n    where S = grad + grad.T and ||.||_F is the Frobenius norm.\n    \"\"\"\n    S = grad + grad.T\n    tau_mag = mu * np.linalg.norm(S, ord='fro')\n    return (tau_mag + eps) >= tau_th\n\ndef solve():\n    # Define the test cases from the problem statement.\n    # Each case: (gradient matrix, mu, tau_th, compute_equal_threshold_flag)\n    cases = []\n\n    # Case 1\n    G1 = np.array([[0.0, 0.0],\n                   [0.0, 0.0]], dtype=float)\n    mu1 = 1.0\n    th1 = 0.1\n    cases.append((G1, mu1, th1, False))\n\n    # Case 2\n    G2 = np.array([[0.0, 5.0],\n                   [-5.0, 0.0]], dtype=float)\n    mu2 = 0.5\n    th2 = 0.01\n    cases.append((G2, mu2, th2, False))\n\n    # Case 3\n    G3 = np.array([[0.0, 3.0],\n                   [0.0, 0.0]], dtype=float)\n    mu3 = 0.8\n    th3 = 3.0\n    cases.append((G3, mu3, th3, False))\n\n    # Case 4: threshold equals exact tau_mag for equality test\n    G4 = np.array([[1.0, 2.0],\n                   [2.0, -1.0]], dtype=float)\n    mu4 = 0.2\n    # tau_th will be computed exactly from G4 and mu4\n    cases.append((G4, mu4, None, True))\n\n    # Case 5\n    G5 = np.array([[0.0, 10.0, 0.0],\n                   [-9.9999, 0.0, 0.0001],\n                   [0.0, -0.0001, 0.0]], dtype=float)\n    mu5 = 1.0\n    th5 = 0.001\n    cases.append((G5, mu5, th5, False))\n\n    # Case 6\n    G6 = np.array([[1.0, 2.0, 3.0],\n                   [2.0, 0.0, -1.0],\n                   [3.0, -1.0, 0.0]], dtype=float)\n    mu6 = 0.05\n    th6 = 0.4\n    cases.append((G6, mu6, th6, False))\n\n    eps = 1e-10\n    results = []\n    for G, mu, tau_th, equal_flag in cases:\n        if equal_flag:\n            # Compute exact threshold as tau_mag for this case\n            S = G + G.T\n            tau_th = mu * np.linalg.norm(S, ord='fro')\n        is_high = shear_classification(G, mu, tau_th, eps=eps)\n        results.append(is_high)\n\n    # Final print statement in the exact required format (no spaces).\n    print(f\"[{','.join('True' if r else 'False' for r in results)}]\")\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "2449119"}]}