{"hands_on_practices": [{"introduction": "One of the key predictions of nonlocal elasticity is the dispersive nature of wave propagation, where wave speed becomes dependent on wavelength. This exercise provides a foundational calculation of this phenomenon for longitudinal waves in a rod, demonstrating how nonlocal models capture size-dependent effects. By deriving the dispersion relation from Eringen's model [@problem_id:2665404], you will analyze the phase and group velocities and observe how the theory predicts classical behavior for long waves while regularizing the response for short waves.", "problem": "A slender, prismatic rod of uniform cross-sectional area undergoes small-amplitude, one-dimensional longitudinal motion along its axis. Let the displacement field be $u(x,t)$, and let the mass density and Young’s modulus be $\\rho$ and $E$, respectively. The balance of linear momentum in one spatial dimension is given by $\\rho\\,\\partial^{2}u/\\partial t^{2}=\\partial\\sigma/\\partial x$, and the infinitesimal strain is $\\varepsilon=\\partial u/\\partial x$. The material obeys the differential form of Eringen’s nonlocal elastic law,\n$$(1-\\ell^{2}\\,\\partial^{2}/\\partial x^{2})\\,\\sigma(x,t)=E\\,\\varepsilon(x,t),$$\nwhere $\\ell>0$ is the intrinsic material length scale (assumed constant).\n\nConsider an infinite rod and harmonic plane-wave solutions of the form $u(x,t)=\\Re\\{U\\,\\exp[i(kx-\\omega t)]\\}$ with real wavenumber $k>0$ and circular frequency $\\omega>0$. Define the classical bar wave speed $c_{0}=\\sqrt{E/\\rho}$, the phase velocity $c_{p}(k)=\\omega(k)/k$, and the group velocity $c_{g}(k)=d\\omega/dk$.\n\nUsing only the governing equations and definitions stated above, derive the dispersion relation $\\omega(k)$ implied by Eringen’s nonlocal elasticity, and from it compute the symbolic expressions for the phase velocity $c_{p}(k)$ and the group velocity $c_{g}(k)$ in terms of $c_{0}$, $\\ell$, and $k$. Then, discuss the limiting values of $c_{p}(k)$ and $c_{g}(k)$ as $k\\to 0^{+}$ and as $k\\to\\infty$, noting their leading-order scalings. You do not need to produce a numerical plot; instead, give a symbolic characterization that would determine the qualitative shape.\n\nReport your final result as the pair $\\big[c_{p}(k),\\,c_{g}(k)\\big]$ as a closed-form analytic expression in terms of $c_{0}$, $\\ell$, and $k$. Do not include units in the final reported pair. No rounding is required.", "solution": "The problem statement has been examined and found to be valid. It is a well-posed problem in continuum mechanics, grounded in the established theory of Eringen's nonlocal elasticity. All necessary governing equations and definitions are provided, and there are no contradictions or ambiguities. We proceed with the derivation.\n\nThe objective is to derive the dispersion relation, phase velocity, and group velocity for longitudinal waves in an infinite rod governed by Eringen's nonlocal model.\n\nThe governing equations are:\n1.  Balance of linear momentum: $\\rho\\,\\frac{\\partial^{2}u}{\\partial t^{2}}=\\frac{\\partial\\sigma}{\\partial x}$\n2.  Kinematic relation (infinitesimal strain): $\\varepsilon=\\frac{\\partial u}{\\partial x}$\n3.  Eringen's nonlocal constitutive relation: $(1-\\ell^{2}\\,\\frac{\\partial^{2}}{\\partial x^{2}})\\,\\sigma(x,t)=E\\,\\varepsilon(x,t)$\n\nWe consider a harmonic plane-wave solution for the displacement field $u(x,t)$ of the form:\n$$u(x,t) = U\\,\\exp[i(kx-\\omega t)]$$\nwhere $U$ is the complex amplitude, $k>0$ is the wavenumber, and $\\omega>0$ is the circular frequency. For linear equations, we can work with this complex form and take the real part at the end, if necessary. The stress field $\\sigma(x,t)$ is assumed to have a similar form:\n$$\\sigma(x,t) = \\Sigma\\,\\exp[i(kx-\\omega t)]$$\nwhere $\\Sigma$ is the complex stress amplitude.\n\nFirst, we substitute these wave forms into the governing equations to obtain algebraic relationships between the amplitudes $U$ and $\\Sigma$.\n\nThe necessary partial derivatives are:\n$$\\frac{\\partial u}{\\partial x} = iku, \\quad \\frac{\\partial^{2}u}{\\partial t^{2}} = (-\\mathrm{i}\\omega)^{2}u = -\\omega^{2}u$$\n$$\\frac{\\partial \\sigma}{\\partial x} = ik\\sigma, \\quad \\frac{\\partial^{2} \\sigma}{\\partial x^{2}} = (ik)^{2}\\sigma = -k^{2}\\sigma$$\n\nSubstitute these into the momentum balance equation:\n$$\\rho(-\\omega^{2}u) = ik\\sigma$$\n$$\\rho(-\\omega^{2}U\\exp[i(kx-\\omega t)]) = ik\\Sigma\\exp[i(kx-\\omega t)]$$\nFor a non-trivial solution, we require a relationship between the amplitudes:\n$$-\\rho\\omega^{2}U = ik\\Sigma$$\n$$\\Sigma = \\frac{-\\rho\\omega^{2}}{ik}U = \\frac{i\\rho\\omega^{2}}{k}U \\quad (*)$$\n\nNext, substitute the wave forms into the strain definition and the constitutive relation. The strain is:\n$$\\varepsilon = \\frac{\\partial u}{\\partial x} = iku = ikU\\exp[i(kx-\\omega t)]$$\nNow substitute into the constitutive relation:\n$$(1-\\ell^{2}(-k^{2}))\\sigma = E\\varepsilon$$\n$$(1+\\ell^{2}k^{2})\\sigma = E\\varepsilon$$\nRelating the amplitudes:\n$$(1+\\ell^{2}k^{2})\\Sigma = E(ikU)$$\n$$\\Sigma = \\frac{ikE}{1+\\ell^{2}k^{2}}U \\quad (**)$$\n\nTo find the dispersion relation, we eliminate $\\Sigma$ and $U$ by equating the two expressions for $\\Sigma$ from equations $(*)$ and $(**)$:\n$$\\frac{i\\rho\\omega^{2}}{k}U = \\frac{ikE}{1+\\ell^{2}k^{2}}U$$\nAssuming a wave exists ($U \\neq 0$), we can divide by $iU$:\n$$\\frac{\\rho\\omega^{2}}{k} = \\frac{kE}{1+\\ell^{2}k^{2}}$$\nSolving for $\\omega^{2}$:\n$$\\omega^{2} = \\frac{E}{\\rho}\\frac{k^{2}}{1+\\ell^{2}k^{2}}$$\nUsing the definition of the classical bar wave speed, $c_{0} = \\sqrt{E/\\rho}$, this becomes:\n$$\\omega^{2}(k) = \\frac{c_{0}^{2}k^{2}}{1+\\ell^{2}k^{2}}$$\nSince frequency $\\omega$ must be positive, we take the positive square root to obtain the dispersion relation:\n$$\\omega(k) = \\frac{c_{0}k}{\\sqrt{1+\\ell^{2}k^{2}}}$$\nThis relation connects the temporal frequency $\\omega$ to the spatial frequency (wavenumber) $k$.\n\nNow we compute the phase velocity $c_{p}(k)$ and group velocity $c_{g}(k)$.\n\nThe phase velocity is defined as $c_{p}(k)=\\omega(k)/k$:\n$$c_{p}(k) = \\frac{1}{k}\\left(\\frac{c_{0}k}{\\sqrt{1+\\ell^{2}k^{2}}}\\right) = \\frac{c_{0}}{\\sqrt{1+\\ell^{2}k^{2}}}$$\n\nThe group velocity is defined as $c_{g}(k)=d\\omega/dk$. We apply the quotient rule to our expression for $\\omega(k)$:\n$$c_{g}(k) = \\frac{d}{dk}\\left(\\frac{c_{0}k}{(1+\\ell^{2}k^{2})^{\\frac{1}{2}}}\\right)$$\n$$c_{g}(k) = \\frac{c_{0}(1+\\ell^{2}k^{2})^{\\frac{1}{2}} - c_{0}k \\cdot \\frac{1}{2}(1+\\ell^{2}k^{2})^{-\\frac{1}{2}}(2\\ell^{2}k)}{1+\\ell^{2}k^{2}}$$\n$$c_{g}(k) = \\frac{c_{0}(1+\\ell^{2}k^{2}) - c_{0}\\ell^{2}k^{2}}{(1+\\ell^{2}k^{2})^{\\frac{3}{2}}}$$\n$$c_{g}(k) = \\frac{c_{0} + c_{0}\\ell^{2}k^{2} - c_{0}\\ell^{2}k^{2}}{(1+\\ell^{2}k^{2})^{\\frac{3}{2}}} = \\frac{c_{0}}{(1+\\ell^{2}k^{2})^{\\frac{3}{2}}}$$\n\nFinally, we analyze the limiting behavior of these velocities.\n\nFor the long-wavelength limit ($k \\to 0^{+}$):\n$$\\lim_{k \\to 0^{+}} c_{p}(k) = \\lim_{k \\to 0^{+}} \\frac{c_{0}}{\\sqrt{1+\\ell^{2}k^{2}}} = c_{0}$$\n$$\\lim_{k \\to 0^{+}} c_{g}(k) = \\lim_{k \\to 0^{+}} \\frac{c_{0}}{(1+\\ell^{2}k^{2})^{\\frac{3}{2}}} = c_{0}$$\nIn this limit, both velocities approach the classical wave speed $c_{0}$. The material behaves like a local elastic solid for wavelengths much larger than the intrinsic length scale $\\ell$.\n\nFor the short-wavelength limit ($k \\to \\infty$):\n$$\\lim_{k \\to \\infty} c_{p}(k) = \\lim_{k \\to \\infty} \\frac{c_{0}}{\\sqrt{1+\\ell^{2}k^{2}}} \\sim \\lim_{k \\to \\infty} \\frac{c_{0}}{\\ell k} = 0$$\nThe leading-order scaling is $c_{p}(k) \\propto k^{-1}$.\n$$\\lim_{k \\to \\infty} c_{g}(k) = \\lim_{k \\to \\infty} \\frac{c_{0}}{(1+\\ell^{2}k^{2})^{\\frac{3}{2}}} \\sim \\lim_{k \\to \\infty} \\frac{c_{0}}{(\\ell k)^{3}} = 0$$\nThe leading-order scaling is $c_{g}(k) \\propto k^{-3}$.\nIn this limit, both velocities vanish, indicating that waves with wavelengths comparable to or smaller than the material length scale $\\ell$ do not propagate. This is a characteristic feature of this nonlocal model, often termed \"strain softening\".\n\nFor a qualitative characterization, we note that the derivatives of both velocities with respect to $k$ are strictly negative for all $k>0$. Thus, both $c_{p}(k)$ and $c_{g}(k)$ are monotonically decreasing functions, starting from a maximum value of $c_{0}$ at $k=0$ and decaying to $0$ as $k \\to \\infty$. Furthermore, for any $k>0$, $(1+\\ell^{2}k^{2})^{\\frac{3}{2}} > (1+\\ell^{2}k^{2})^{\\frac{1}{2}}$, which implies $c_{g}(k) < c_{p}(k)$. This describes a medium with anomalous dispersion.\n\nThe required expressions for the phase and group velocities are:\n$$c_{p}(k) = \\frac{c_{0}}{\\sqrt{1+\\ell^{2}k^{2}}}$$\n$$c_{g}(k) = \\frac{c_{0}}{(1+\\ell^{2}k^{2})^{\\frac{3}{2}}}$$", "answer": "$$ \\boxed{\\left[ \\frac{c_{0}}{\\sqrt{1 + \\ell^{2}k^{2}}}, \\frac{c_{0}}{(1 + \\ell^{2}k^{2})^{\\frac{3}{2}}} \\right]} $$", "id": "2665404"}, {"introduction": "While the differential form of Eringen's model is convenient, its application to problems on bounded domains can lead to unexpected \"paradoxes\" where the expected material softening vanishes or even reverses. This conceptual exercise challenges you to diagnose the origin of this issue in the classic cantilever beam problem [@problem_id:2665419]. By critically evaluating different hypotheses, you will gain a deeper appreciation for the subtleties distinguishing the integral and differential formulations and the crucial role of boundary conditions in nonlocal mechanics.", "problem": "A straight, prismatic Euler–Bernoulli cantilever beam of length $L$, bending stiffness $E I$, clamped at $x=0$ and free at $x=L$, is subjected to a transverse point load $P$ applied downward at its free end. In Eringen’s nonlocal elasticity, the bending moment–curvature relation can be written in the integral (strain-driven) form\n$$\nM(x)=E I \\int_{0}^{L} \\alpha\\!\\left(\\lvert x-\\xi\\rvert\\right)\\,\\kappa(\\xi)\\,d\\xi,\n$$\nwhere $\\kappa(x)=w''(x)$ is the curvature and $\\alpha(r)$ is a normalized attenuation kernel with internal length $\\,\\ell>0$. For the exponentially decaying kernel, on unbounded domains this integral relation is formally equivalent to the differential surrogate\n$$\n\\left(1-\\ell^{2}\\frac{d^{2}}{dx^{2}}\\right) M(x)=E I\\,\\kappa(x).\n$$\nStatic equilibrium of the beam remains local and reads $dV/dx+q(x)=0$ and $dM/dx=V$, where $q(x)$ is the distributed load per unit length (here $q\\equiv 0$), with mechanical boundary conditions at the free end $x=L$ given by $M(L)=0$ (no applied end moment) and $V(L)=P$.\n\nIt has been reported that certain implementations of the differential nonlocal model for this problem predict a response that is either identical to the local solution or even “stiffened,” contradicting the softening typically associated with nonlocality. Which of the following statements best identifies the origin of this “paradox” and proposes a consistent remedy based on enforcing the constitutive law in integral form?\n\nA. The disappearance of nonlocal effects (or apparent stiffening) arises when one inserts the equilibrium-determined linear bending moment into the differential surrogate and enforces only the classical mechanical boundary conditions; because $M''(x)=0$ for a tip-loaded cantilever, the surrogate collapses to the local curvature, erasing nonlocal softening. A remedy is to enforce the constitutive law in its integral form (at least at the boundary, and preferably in the domain), i.e., to determine $\\kappa$ from $M(x)=E I \\int_{0}^{L}\\alpha(\\lvert x-\\xi\\rvert)\\kappa(\\xi)\\,d\\xi$ with the natural boundary conditions expressed through the integral nonlocal moment and shear, which restores the softening predicted by the nonlocal model.\n\nB. The paradox occurs because nonlocality alters static equilibrium; using $dM/dx=V$ is incorrect. The remedy is to adopt a modified equilibrium $d[(1-\\ell^{2}d^{2}/dx^{2})M]/dx=V$ so that the differential surrogate is consistent and produces softening.\n\nC. The paradox is resolved by supplementing the differential surrogate with constitutive boundary conditions $M'(0)=M'(L)=0$ while retaining $V(L)=P$ and $M(L)=0$; for a tip load this set is compatible and yields the nonlocal softening response.\n\nD. The paradox is an artifact of the exponential kernel; replacing it with a different admissible kernel removes the issue without changing how boundary conditions are enforced in the differential model.", "solution": "We start from first principles: static equilibrium and the constitutive law. Equilibrium for the Euler–Bernoulli beam reads\n$$\n\\frac{dV}{dx}+q(x)=0,\\qquad \\frac{dM}{dx}=V,\n$$\nwith $q(x)\\equiv 0$ and free-end mechanical boundary conditions $M(L)=0$ and $V(L)=P$. These equations depend only on force and moment balance and do not involve the constitutive law. Therefore, for a tip-loaded cantilever one obtains directly from equilibrium\n$$\nV(x)=P,\\qquad M'(x)=V(x)=P,\\qquad M(x)=P(x-L),\n$$\nso that\n$$\nM''(x)=0\\quad \\text{for all }x\\in(0,L).\n$$\n\nThe Eringen integral constitutive relation for bending is\n$$\nM(x)=E I \\int_{0}^{L} \\alpha\\!\\left(\\lvert x-\\xi\\rvert\\right)\\,\\kappa(\\xi)\\,d\\xi,\\qquad \\kappa(x)=w''(x).\n$$\nOn an unbounded domain with the exponential kernel, this is formally equivalent to the differential surrogate\n$$\n\\left(1-\\ell^{2}\\frac{d^{2}}{dx^{2}}\\right) M(x)=E I\\,\\kappa(x).\n$$\nIf one directly combines the equilibrium-determined $M(x)=P(x-L)$ with the differential surrogate, one obtains\n$$\nE I\\,\\kappa(x)=\\left(1-\\ell^{2}\\frac{d^{2}}{dx^{2}}\\right) M(x)=M(x)-\\ell^{2}M''(x)=M(x),\n$$\nsince $M''(x)=0$. Thus,\n$$\n\\kappa(x)=\\frac{M(x)}{E I},\\quad \\text{identical to the local relation},\n$$\nwhich yields exactly the local beam deflection. This is the essence of the “paradox”: the nonlocal differential surrogate, when naively enforced with classical mechanical boundary conditions and the equilibrium moment for a tip-loaded cantilever, predicts no deviation from the local response (and, in some other boundary-value settings, can lead to apparent stiffening).\n\nWhy does this happen? The formal equivalence between the integral and differential constitutive laws on a bounded domain requires additional constitutive boundary conditions that depend on the kernel. For the exponential kernel, these take the form\n$$\nM'(0)=0,\\qquad M'(L)=0,\n$$\nto render the operator $\\left(1-\\ell^{2}d^{2}/dx^{2}\\right)$ invertible on the finite interval in a way consistent with the convolution. However, these constitutive boundary conditions are incompatible with equilibrium for a tip-loaded cantilever, because equilibrium enforces $M'(x)=V(x)=P$ (a nonzero constant), hence $M'(0)=M'(L)=P\\neq 0$. Therefore, the differential surrogate, together with its proper constitutive boundary conditions, cannot be satisfied for this load case; and if one ignores those constitutive boundary conditions and uses only classical mechanical boundary conditions, the surrogate degenerates to the local relation as shown above. This incompatibility pinpoints the origin of the paradox.\n\nA consistent remedy is to enforce the constitutive law in its integral form, at least at the boundary (often termed “integral enforcement”), and preferably throughout the domain. Concretely, one must determine $\\kappa$ as the solution of the Fredholm integral equation of the first kind\n$$\nE I \\int_{0}^{L} \\alpha\\!\\left(\\lvert x-\\xi\\rvert\\right)\\,\\kappa(\\xi)\\,d\\xi = M(x)=P(x-L),\\qquad x\\in[0,L],\n$$\nwhile maintaining the classical mechanical boundary conditions $M(L)=0$ and $V(L)=M'(L)=P$. On a bounded domain, the inverse of the convolution operator is not the simple differential operator $\\left(1-\\ell^{2}d^{2}/dx^{2}\\right)$ used for unbounded media; the integral equation must be solved with the truncated kernel. The resulting curvature $\\kappa(x)$ differs from $M(x)/(E I)$ and is spatially smoothed by the kernel; near the clamped and free boundaries, the truncation of $\\alpha$ alters the balance so that the curvature distribution adjusts to satisfy the integral relation. When integrated twice to obtain $w(x)$ with clamped-end kinematic boundary conditions $w(0)=0$ and $w'(0)=0$, this nonlocal curvature field yields a larger tip deflection than the local model for $\\ell/L>0$, i.e., the expected nonlocal softening is restored.\n\nOption-by-option analysis:\n\n- Option A: This correctly identifies that inserting the equilibrium moment $M(x)=P(x-L)$ into the differential surrogate with only classical mechanical boundary conditions leads to $M''(x)=0$ and thus $\\kappa(x)=M(x)/(E I)$, eliminating nonlocal softening. It also correctly states that enforcing the constitutive law in integral form (at least for the natural boundary relations and ideally in the domain) restores consistency on a finite interval and yields the softening expected of the nonlocal model. Verdict — Correct.\n\n- Option B: This claims that nonlocality alters the equilibrium equations. In Eringen’s nonlocal elasticity, balance of linear and angular momentum remain classical; $dV/dx+q=0$ and $dM/dx=V$ are unchanged. Modifying equilibrium to $d[(1-\\ell^{2}d^{2}/dx^{2})M]/dx=V$ is not justified and would violate fundamental balance laws. Verdict — Incorrect.\n\n- Option C: This proposes adding constitutive boundary conditions $M'(0)=M'(L)=0$ while keeping $V(L)=P$ and $M(L)=0$. For the tip-loaded cantilever, equilibrium enforces $M'(x)=V(x)=P$ everywhere, so $M'(0)=M'(L)=P\\neq 0$, making this set incompatible. Thus it does not resolve the paradox for this load case. Verdict — Incorrect.\n\n- Option D: The paradox is attributed entirely to the exponential kernel and suggested to vanish upon switching kernels without changing boundary enforcement. The issue arises from misuse of the differential surrogate and boundary enforcement on bounded domains, not uniquely from the choice of the exponential kernel. Simply changing the kernel without addressing boundary enforcement does not generally remove the paradox. Verdict — Incorrect.", "answer": "$$\\boxed{A}$$", "id": "2665419"}, {"introduction": "The integral nature of nonlocal elasticity poses a significant computational challenge, as a direct, naive evaluation of the convolution integral is often prohibitively expensive for finely discretized systems. This hands-on programming exercise guides you through the modern, efficient solution to this problem by leveraging the convolution theorem and the Fast Fourier Transform (FFT). By implementing and comparing a direct summation against an FFT-based algorithm [@problem_id:2665428], you will gain practical experience with an essential numerical technique and verify its dramatic $O(N\\log N)$ performance advantage.", "problem": "Consider the one-dimensional Eringen-type nonlocal integral constitutive relation on a periodic bar of length $L$ with period $L$ and equispaced grid of $N$ nodes. Let $x_j = j\\Delta x$ with $\\Delta x = L/N$ for $j \\in \\{0,1,\\dots,N-1\\}$. Denote the local strain by $\\varepsilon(x)$ and the nonlocal stress by $\\sigma(x)$. The nonlocal constitutive law in its scalar form is\n$$\n\\sigma(x) = \\int_0^L \\alpha_p(x-y)\\,E\\,\\varepsilon(y)\\,dy,\n$$\nwhere $E$ is the elastic modulus (a positive constant) and $\\alpha_p$ is the periodic nonlocal attenuation kernel. On a periodic domain, the Fourier-series multiplier corresponding to the classical Helmholtz-type Eringen kernel with internal length $\\ell > 0$ is\n$$\n\\widehat{\\alpha}(k) = \\frac{1}{1 + (\\ell k)^2},\n$$\nso that $\\widehat{\\sigma}(k) = \\widehat{\\alpha}(k)\\,E\\,\\widehat{\\varepsilon}(k)$ for each Fourier wavenumber $k$.\n\nDiscretize the integral using the trapezoidal rule on the periodic grid. Define the discrete sequences $\\varepsilon_j = \\varepsilon(x_j)$, $\\sigma_j \\approx \\sigma(x_j)$, and the discrete periodic kernel samples $b_j$ such that\n$$\n\\sigma_j \\approx \\sum_{m=0}^{N-1} b_{(j-m)\\bmod N}\\,\\varepsilon_m \\quad \\text{for all } j \\in \\{0,1,\\dots,N-1\\}.\n$$\nAssume throughout that the Discrete Fourier Transform (DFT) and its inverse are defined by\n$$\n\\widehat{f}_n = \\sum_{j=0}^{N-1} f_j \\, e^{-i 2\\pi j n/N}, \\qquad f_j = \\frac{1}{N}\\sum_{n=0}^{N-1} \\widehat{f}_n \\, e^{i 2\\pi j n/N},\n$$\nso that the circular convolution theorem holds: $\\widehat{f\\star g} = \\widehat{f}\\,\\widehat{g}$, where $(f\\star g)_j = \\sum_{m=0}^{N-1} g_{(j-m)\\bmod N} f_m$.\n\nYour tasks:\n\n$1.$ Starting from the integral nonlocal law and the periodic trapezoidal rule, derive the discrete circular convolution form for $\\sigma_j$ and identify the precise relationship between the discrete kernel samples $b_j$ and the spectral multiplier $\\widehat{\\alpha}(k_n)$ at the discrete wavenumbers $k_n = \\frac{2\\pi}{L}n$ with $n \\in \\{0,1,\\dots,N-1\\}$.\n\n$2.$ Using only the convolution theorem for the Discrete Fourier Transform (DFT), derive a Fast Fourier Transform (FFT, Fast Fourier Transform) based algorithm that computes $\\sigma_j$ for all $j$ by:\n- computing the DFT of $\\varepsilon_j$,\n- multiplying pointwise by the spectral multiplier corresponding to the Helmholtz-type Eringen kernel,\n- applying the inverse DFT.\n\nMake every step explicit and ensure the algorithm computes the same discrete circular convolution as in task $1$.\n\n$3.$ Perform an operation count to compare the naive direct circular convolution versus the FFT-based method. Show that the direct method requires on the order of $O(N^2)$ arithmetic operations, while the FFT-based method requires on the order of $O(N\\log N)$ operations. From this, derive a theoretical speedup ratio (ignoring constant factors) of approximately\n$$\nS(N) \\approx \\frac{N}{\\log_2 N}.\n$$\n\n$4.$ Implement a program that, for each test case below, computes:\n- the discrete nonlocal stress via the direct $O(N^2)$ circular convolution using the kernel $b_j$ implied by the multiplier $\\widehat{\\alpha}(k_n)$,\n- the discrete nonlocal stress via the FFT-based $O(N\\log N)$ method,\n- the maximum absolute difference (an absolute error) between the two results,\n- the theoretical speedup ratio $S(N)$ defined above.\n\nUse the following test suite, with all angles in radians:\n- Test A (general \"happy path\"): $N = 64$, $L = 2\\pi$, $\\ell = 0.3$, and $\\varepsilon(x) = \\sin(3x) + 0.5\\cos(5x) + 0.2\\sin(7x)$.\n- Test B (approach to the local limit): $N = 128$, $L = 2\\pi$, $\\ell = 10^{-6}$, and the same $\\varepsilon(x)$ as in Test A.\n- Test C (non power-of-two size): $N = 96$, $L = 2\\pi$, $\\ell = 0.5$, and the same $\\varepsilon(x)$ as in Test A.\n- Test D (edge case, constant strain): $N = 100$, $L = 2\\pi$, $\\ell = 0.2$, and $\\varepsilon(x) \\equiv 3.7$.\n\nImplementation details that must be respected:\n- Construct the discrete spectral multiplier at the discrete wavenumbers $k_n = \\frac{2\\pi}{L} n$ using $\\widehat{\\alpha}(k_n) = \\frac{1}{1 + (\\ell k_n)^2}$.\n- Construct the corresponding discrete kernel samples $b_j$ by inverse DFT of the multiplier so that the direct circular convolution matches the FFT-based result.\n- For the direct method, compute the circular convolution explicitly in $O(N^2)$ by summation, not using FFT.\n\nYour program must output a single line in the exact format:\n- A single list whose entries alternate, for each test case in the order A, B, C, D, between:\n  - the maximum absolute error (a float), then\n  - the theoretical speedup ratio $S(N)$ (a float).\nThus the output should be of the form\n$$\n[\\text{err}_A, S(N_A), \\text{err}_B, S(N_B), \\text{err}_C, S(N_C), \\text{err}_D, S(N_D)].\n$$\nAll outputs are dimensionless real numbers. The angle unit is radians. No physical unit conversion is required in the outputs. The program must produce the output as a comma-separated list enclosed in square brackets on a single line.", "solution": "The problem as stated is scientifically grounded, well-posed, and an objective exercise in computational mechanics and numerical analysis. It contains all necessary information to derive and implement the required algorithms. Therefore, it is deemed valid. A complete solution is provided below.\n\nThe elastic modulus $E$ is given as a positive constant but its value is not specified. As it acts as a simple scaling factor on the stress $\\sigma$, and the focus of the problem is on the comparison of numerical algorithms and their complexity, we can set $E=1$ without loss of generality. All derivations and calculations will proceed under this assumption.\n\n**1. Derivation of the Discrete Convolution Form**\n\nWe begin with the one-dimensional integral constitutive relation for the nonlocal stress $\\sigma(x)$ on a periodic domain of length $L$:\n$$\n\\sigma(x) = \\int_0^L \\alpha_p(x-y)\\,E\\,\\varepsilon(y)\\,dy\n$$\nWe discretize this integral on a grid of $N$ equispaced nodes $x_j = j\\Delta x$ for $j \\in \\{0, 1, \\dots, N-1\\}$, where $\\Delta x = L/N$. The integral is approximated using the periodic trapezoidal rule. Setting $x = x_j$ and noting that the integration variable $y$ corresponds to the grid points $y_m = m\\Delta x$:\n$$\n\\sigma(x_j) \\approx \\sum_{m=0}^{N-1} \\left(E \\alpha_p(x_j - y_m)\\right) \\varepsilon(y_m) \\Delta x\n$$\nLet $\\sigma_j \\equiv \\sigma(x_j)$ and $\\varepsilon_m \\equiv \\varepsilon(y_m)$. Substituting the grid point definitions, $x_j - y_m = (j-m)\\Delta x$:\n$$\n\\sigma_j \\approx \\sum_{m=0}^{N-1} \\left(E \\Delta x \\alpha_p((j-m)\\Delta x)\\right) \\varepsilon_m\n$$\nThis expression is a discrete circular convolution. The problem statement provides the form $\\sigma_j \\approx \\sum_{m=0}^{N-1} b_{(j-m)\\bmod N}\\,\\varepsilon_m$. By direct comparison, we identify the discrete kernel samples $b_k$ as:\n$$\nb_k = E \\Delta x \\alpha_p(k \\Delta x) = \\frac{EL}{N} \\alpha_p\\left(\\frac{kL}{N}\\right)\n$$\nNow, we relate the discrete kernel $b_j$ to the spectral multiplier $\\widehat{\\alpha}(k_n)$. We take the Discrete Fourier Transform (DFT) of the discrete convolution. Using the provided definition of the circular convolution theorem, $\\widehat{(\\mathbf{b} \\star \\boldsymbol{\\varepsilon})}_n = \\widehat{b}_n \\widehat{\\varepsilon}_n$, we have:\n$$\n\\widehat{\\sigma}_n = \\widehat{b}_n \\widehat{\\varepsilon}_n\n$$\nwhere $\\widehat{b}_n$ is the DFT of the sequence $b_j$.\nTo find $\\widehat{b}_n$, we can relate the DFT to the continuous Fourier series coefficients. For a function $f(x)$, its Fourier series coefficient $\\tilde{c}_n$ at wavenumber $k_n = 2\\pi n/L$ is approximated by its DFT $\\widehat{f}_n$ as $\\tilde{c}_n(f) \\approx \\frac{1}{N} \\widehat{f}_n$.\nThe continuous spectral law is $\\widehat{\\sigma}(k) = E \\widehat{\\alpha}(k) \\widehat{\\varepsilon}(k)$. This implies a relationship between the Fourier series coefficients: $\\tilde{c}_n(\\sigma) = E \\widehat{\\alpha}(k_n) \\tilde{c}_n(\\varepsilon)$.\nSubstituting the DFT approximations:\n$$\n\\frac{1}{N} \\widehat{\\sigma}_n \\approx E \\widehat{\\alpha}(k_n) \\left(\\frac{1}{N} \\widehat{\\varepsilon}_n\\right) \\implies \\widehat{\\sigma}_n \\approx E \\widehat{\\alpha}(k_n) \\widehat{\\varepsilon}_n\n$$\nComparing this with $\\widehat{\\sigma}_n = \\widehat{b}_n \\widehat{\\varepsilon}_n$, we establish the precise relationship:\n$$\n\\widehat{b}_n = E \\widehat{\\alpha}(k_n)\n$$\nAs per the problem, we use the Helmholtz-type multiplier $\\widehat{\\alpha}(k) = \\frac{1}{1 + (\\ell k)^2}$ at the discrete wavenumbers $k_n = \\frac{2\\pi n}{L}$ for $n \\in \\{0, 1, \\dots, N-1\\}$. Setting $E=1$, the spectral representation of the discrete kernel is:\n$$\n\\widehat{b}_n = \\frac{1}{1 + (\\ell k_n)^2} = \\frac{1}{1 + \\left(\\ell \\frac{2\\pi n}{L}\\right)^2}\n$$\nThe discrete kernel samples $b_j$ themselves are obtained by applying the Inverse Discrete Fourier Transform (IDFT) to $\\widehat{b}_n$:\n$$\nb_j = \\text{IDFT}(\\widehat{b})_j = \\frac{1}{N} \\sum_{n=0}^{N-1} \\widehat{b}_n \\, e^{i 2\\pi j n/N}\n$$\n\n**2. FFT-Based Algorithm**\n\nThe relationship $\\widehat{\\sigma}_n = \\widehat{b}_n \\widehat{\\varepsilon}_n$ derived above provides the basis for an efficient algorithm using the Fast Fourier Transform (FFT). The procedure to compute the discrete stress $\\sigma_j$ from the discrete strain $\\varepsilon_j$ is as follows:\n\n1.  **Forward Transform**: Compute the DFT of the discrete strain sequence $\\varepsilon_j$ to obtain its spectral representation $\\widehat{\\varepsilon}_n$. This is done efficiently using an FFT algorithm.\n    $$\n    \\widehat{\\varepsilon}_n = \\text{DFT}(\\boldsymbol{\\varepsilon})_n = \\sum_{j=0}^{N-1} \\varepsilon_j \\, e^{-i 2\\pi j n/N}\n    $$\n2.  **Spectral Multiplication**: Construct the sequence of spectral multipliers $\\widehat{b}_n$ (with $E=1$) at the discrete wavenumbers $k_n = \\frac{2\\pi n}{L}$ for $n=0, \\dots, N-1$.\n    $$\n    \\widehat{b}_n = \\frac{1}{1 + (\\ell k_n)^2}\n    $$\n    Then, perform a pointwise multiplication in the Fourier domain to find the spectrum of the stress.\n    $$\n    \\widehat{\\sigma}_n = \\widehat{b}_n \\cdot \\widehat{\\varepsilon}_n\n    $$\n3.  **Inverse Transform**: Compute the IDFT of the resulting stress spectrum $\\widehat{\\sigma}_n$ to obtain the discrete stress sequence $\\sigma_j$ in the physical domain. This is done efficiently using an Inverse Fast Fourier Transform (IFFT) algorithm.\n    $$\n    \\sigma_j = \\text{IDFT}(\\widehat{\\boldsymbol{\\sigma}})_j = \\frac{1}{N} \\sum_{n=0}^{N-1} \\widehat{\\sigma}_n \\, e^{i 2\\pi j n/N}\n    $$\nBy the convolution theorem, this procedure is mathematically equivalent to the direct circular convolution $\\sigma_j = \\sum_{m=0}^{N-1} b_{(j-m)\\bmod N}\\,\\varepsilon_m$, where $b_j = \\text{IDFT}(\\widehat{b})_j$. The FFT-based method avoids the explicit calculation of $b_j$ and the costly summation.\n\n**3. Complexity Analysis and Speedup**\n\nWe analyze the number of arithmetic operations for each method.\n\n*   **Direct Circular Convolution**: The computation is $\\sigma_j = \\sum_{m=0}^{N-1} b_{(j-m)\\bmod N}\\,\\varepsilon_m$.\n    *   For each of the $N$ output points $\\sigma_j$, we perform a sum over $N$ terms.\n    *   Each term in the sum requires one multiplication and one addition (the index calculation is an integer operation, typically faster).\n    *   This results in approximately $N$ multiplications and $N$ additions for each $\\sigma_j$.\n    *   Since this must be repeated for all $N$ values of $j$, the total number of floating-point operations scales as $N \\times (2N)$, which is of order $O(N^2)$.\n\n*   **FFT-Based Method**: The computation involves three steps.\n    1.  FFT of $\\varepsilon_j$: Standard FFT algorithms, such as the Cooley-Tukey algorithm, have a computational complexity of $O(N \\log N)$.\n    2.  Pointwise Multiplication: $\\widehat{\\sigma}_n = \\widehat{b}_n \\widehat{\\varepsilon}_n$. This involves $N$ complex multiplications, which is an $O(N)$ operation.\n    3.  IFFT of $\\widehat{\\sigma}_n$: The inverse FFT has the same complexity as the forward FFT, which is $O(N \\log N)$.\n    *   The total complexity is the sum of these steps: $O(N \\log N) + O(N) + O(N \\log N) = O(N \\log N)$.\n\n*   **Theoretical Speedup Ratio**: The speedup $S(N)$ is the ratio of the computational cost of the slower algorithm to that of the faster one.\n    $$\n    S(N) = \\frac{\\text{Cost}_{\\text{direct}}}{\\text{Cost}_{\\text{FFT}}} \\approx \\frac{C_1 N^2}{C_2 N \\log N} = \\left(\\frac{C_1}{C_2}\\right) \\frac{N}{\\log N}\n    $$\n    where $C_1$ and $C_2$ are implementation-dependent constants. Asymptotically, for large $N$, the constants become less significant. The problem asks for the speedup ratio using a base-2 logarithm, which is natural for common FFT algorithms:\n    $$\n    S(N) \\approx \\frac{N}{\\log_2 N}\n    $$\nThis shows that for large $N$, the FFT-based method is significantly more efficient than direct convolution.\n\n**4. Implementation Strategy**\n\nThe Python implementation will follow the derived algorithms. For each test case:\n1.  The discrete strain array $\\boldsymbol{\\varepsilon}$ is generated by sampling the given function $\\varepsilon(x)$ on the grid.\n2.  The **FFT-based method** is implemented concisely:\n    `sigma_fft = np.fft.ifft(np.fft.fft(epsilon) * alpha_hat)`\n    where `alpha_hat` is the array of spectral multipliers $\\widehat{b}_n$.\n3.  The **direct convolution method** is implemented using nested loops to explicitly compute the summation for each $\\sigma_j$. The kernel $b_j$ required for this method is first computed as `b = np.fft.ifft(alpha_hat)`.\n4.  The discrete wavenumbers are computed as $k_n = \\frac{2\\pi n}{L}$ for $n \\in \\{0, \\dots, N-1\\}$. This implies the spectral multiplier array `alpha_hat` will not be conjugate-symmetric. Consequently, its inverse DFT, the kernel `b`, will be complex-valued. Therefore, all calculations for the direct convolution must be performed in complex arithmetic to ensure a valid comparison with the FFT-based method.\n5.  The maximum absolute difference, `max(abs(sigma_fft - sigma_direct))`, serves as the error metric to verify the numerical equivalence of the two methods.\n6.  The theoretical speedup $S(N)$ is computed using the formula derived in Part 3.\n\nThis rigorous process validates the problem's premises and provides a clear path to a correct and verifiable solution.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the nonlocal elasticity problem for the given test cases.\n    It computes nonlocal stress using two methods: direct O(N^2) convolution\n    and an efficient O(N log N) FFT-based method. It then calculates the\n    maximum absolute difference between the results and the theoretical speedup.\n    \"\"\"\n    \n    # Define the strain function ε(x)\n    def strain_func(x):\n        return np.sin(3 * x) + 0.5 * np.cos(5 * x) + 0.2 * np.sin(7 * x)\n\n    # Define the test cases from the problem statement.\n    # Format: (N, L, l, epsilon_func)\n    test_cases = [\n        (64, 2 * np.pi, 0.3, strain_func),\n        (128, 2 * np.pi, 1e-6, strain_func),\n        (96, 2 * np.pi, 0.5, strain_func),\n        (100, 2 * np.pi, 0.2, lambda x: np.full_like(x, 3.7))\n    ]\n\n    results = []\n    \n    for N, L, ell, eps_func in test_cases:\n        # 1. Setup grid and discrete signals\n        # Grid points x_j = j * Delta_x for j=0,...,N-1\n        # Delta_x = L/N\n        # Using endpoint=False ensures periodicity, i.e., x_N = L is not included.\n        x = np.linspace(0, L, N, endpoint=False)\n        \n        # Discrete strain vector epsilon_j = ε(x_j)\n        epsilon = eps_func(x)\n\n        # 2. Define wavenumbers and spectral multiplier\n        # As per problem: k_n = (2*pi/L)*n for n = 0,...,N-1\n        n_indices = np.arange(N)\n        k_n = (2 * np.pi / L) * n_indices\n        \n        # Spectral multiplier for Helmholtz kernel (with E=1)\n        # alpha_hat_n = 1 / (1 + (ell*k_n)^2)\n        alpha_hat = 1.0 / (1.0 + (ell * k_n)**2)\n\n        # 3. FFT-based O(N log N) method\n        # σ_hat = α_hat * ε_hat\n        # σ = IDFT(σ_hat)\n        epsilon_hat = np.fft.fft(epsilon)\n        sigma_hat = alpha_hat * epsilon_hat\n        sigma_fft = np.fft.ifft(sigma_hat)\n\n        # 4. Direct O(N^2) circular convolution method\n        # First, compute the discrete kernel b_j by taking the IDFT of the multiplier\n        # b_j = IDFT(α_hat)_j\n        # The result b will be complex-valued because alpha_hat is not conjugate-symmetric\n        # with the given non-standard definition of k_n.\n        b = np.fft.ifft(alpha_hat)\n        \n        # Initialize the result array for direct convolution\n        sigma_direct = np.zeros(N, dtype=np.complex128)\n        \n        # Perform the explicit O(N^2) circular convolution\n        # σ_j = sum_{m=0}^{N-1} b_{(j-m) mod N} * ε_m\n        for j in range(N):\n            s = 0.0 + 0.0j # Use complex accumulator\n            for m in range(N):\n                # The modulo operator % in Python correctly handles negative results\n                # for the index, mapping them into the range [0, N-1] for positive N.\n                idx = (j - m) % N\n                s += b[idx] * epsilon[m]\n            sigma_direct[j] = s\n\n        # 5. Compute metrics\n        # Maximum absolute difference (absolute error) between the two methods\n        # np.abs computes the magnitude for complex numbers.\n        max_abs_error = np.max(np.abs(sigma_fft - sigma_direct))\n        \n        # Theoretical speedup ratio S(N) = N / log2(N)\n        theoretical_speedup = N / np.log2(N)\n        \n        results.append(max_abs_error)\n        results.append(theoretical_speedup)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2665428"}]}