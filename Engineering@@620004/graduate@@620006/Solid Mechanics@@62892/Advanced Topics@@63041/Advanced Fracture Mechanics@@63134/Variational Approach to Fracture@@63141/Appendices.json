{"hands_on_practices": [{"introduction": "The power of the variational approach lies in its foundation on energetic principles. This first practice provides a direct link between the phase-field model and the cornerstone of fracture mechanics, the critical energy release rate $G_c$. By solving the Euler-Lagrange equation for a one-dimensional crack, you will derive the stationary phase-field profile and use it to calibrate the fracture energy functional, ensuring the model accurately represents the energy required to create a new surface [@problem_id:2709354].", "problem": "Consider a one-dimensional, out-of-plane unit-thickness setting for a variational phase-field description of brittle fracture. Let $d(x)$ denote an integrity-type phase-field variable with $d(x)\\in[0,1]$, where $d(x)=0$ denotes a fully developed crack and $d(x)\\to 1$ denotes intact material far from the crack. The fracture surface energy per unit out-of-plane thickness is modeled by\n$$\n\\mathcal{E}_{\\Gamma}[d] \\;=\\; G_{c}\\,\\int_{-\\infty}^{\\infty} \\gamma_{\\ell}\\!\\left(d(x),d'(x)\\right)\\,\\mathrm{d}x,\n$$\nwith a simplified crack surface density\n$$\n\\gamma_{\\ell}(d,d') \\;=\\; \\frac{1}{c_{0}}\\,\\bigg[\\,\\frac{1}{2\\,\\ell}\\,\\big(1-d\\big)^{2} \\;+\\; \\frac{\\ell}{2}\\,\\big(d'\\big)^{2}\\,\\bigg],\n$$\nwhere $G_{c}$ is the critical energy release rate, $\\ell>0$ is the internal length, and $c_{0}>0$ is a dimensionless normalization constant to be determined by calibration.\n\nAssume a stationary, even phase-field profile centered at $x=0$ that satisfies $d(0)=0$, $d(x)\\to 1$ as $|x|\\to\\infty$, and is given by\n$$\nd(x) \\;=\\; 1 - \\exp\\!\\big(-|x|/\\ell\\big).\n$$\n\nStarting from the calculus of variations for the above functional and using standard boundary conditions at infinity for an isolated crack, compute the fracture surface energy associated with this profile and determine the value of $c_{0}$ required so that $\\mathcal{E}_{\\Gamma}[d]=G_{c}$, i.e., the energy associated with a single, fully developed crack equals $G_{c}$. Provide your final answer as a single closed-form value for $c_{0}$. No rounding is required, and no physical units are to be reported for $c_{0}$.", "solution": "The starting point is the fracture surface energy functional\n$$\n\\mathcal{E}_{\\Gamma}[d] \\;=\\; G_{c}\\,\\int_{-\\infty}^{\\infty} \\gamma_{\\ell}(d,d')\\,\\mathrm{d}x,\n\\quad\n\\gamma_{\\ell}(d,d') \\;=\\; \\frac{1}{c_{0}}\\left[\\frac{1}{2\\,\\ell}\\,(1-d)^{2} + \\frac{\\ell}{2}\\,(d')^{2}\\right].\n$$\nA stationary profile $d(x)$ satisfies the Euler–Lagrange equation associated with the integrand\n$$\nf(d,d') \\;=\\; \\frac{1}{2\\,\\ell}\\,(1-d)^{2} + \\frac{\\ell}{2}\\,(d')^{2}.\n$$\nCompute the first variations:\n$$\n\\frac{\\partial f}{\\partial d} \\;=\\; \\frac{1}{2\\,\\ell}\\cdot 2(1-d)\\cdot(-1) \\;=\\; -\\,\\frac{1}{\\ell}\\,(1-d),\n\\qquad\n\\frac{\\partial f}{\\partial d'} \\;=\\; \\frac{\\ell}{2}\\cdot 2\\,d' \\;=\\; \\ell\\,d'.\n$$\nHence the Euler–Lagrange equation on any interval where $d$ is smooth is\n$$\n\\frac{\\partial f}{\\partial d} \\;-\\; \\frac{\\mathrm{d}}{\\mathrm{d}x}\\!\\left(\\frac{\\partial f}{\\partial d'}\\right) \\;=\\; 0\n\\;\\;\\Longrightarrow\\;\\;\n-\\,\\frac{1}{\\ell}\\,(1-d) \\;-\\; \\frac{\\mathrm{d}}{\\mathrm{d}x}\\!\\left(\\ell\\,d'\\right) \\;=\\; 0,\n$$\nthat is,\n$$\n\\ell\\,d'' \\;+\\; \\frac{1}{\\ell}\\,(1-d) \\;=\\; 0\n\\;\\;\\Longleftrightarrow\\;\\;\nd'' \\;+\\; \\frac{1}{\\ell^{2}}\\,(1-d) \\;=\\; 0,\n$$\nto be imposed on $x>0$ and $x<0$ separately with symmetry about $x=0$ and boundary conditions $d(0)=0$ and $d(x)\\to 1$ as $|x|\\to\\infty$.\n\nOn $x>0$, the ordinary differential equation is\n$$\nd'' \\;-\\; \\frac{1}{\\ell^{2}}\\,d \\;=\\; -\\,\\frac{1}{\\ell^{2}}.\n$$\nA particular solution is $d_{p}(x)=1$. The homogeneous solution is $d_{h}(x)=A\\,\\exp(x/\\ell)+B\\,\\exp(-x/\\ell)$. Boundedness as $x\\to +\\infty$ enforces $A=0$. Imposing $d(0)=0$ yields $0=1+B$, so $B=-1$. Thus, for $x>0$,\n$$\nd(x) \\;=\\; 1 - \\exp(-x/\\ell).\n$$\nBy even symmetry about $x=0$, the full profile is\n$$\nd(x) \\;=\\; 1 - \\exp\\!\\big(-|x|/\\ell\\big),\n$$\nwhich matches the assumed stationary profile and is thus consistent with the Euler–Lagrange equation on $x\\neq 0$.\n\nNext, we evaluate the fracture surface energy integral. For the given $d(x)$, we have\n$$\n1 - d(x) \\;=\\; \\exp\\!\\big(-|x|/\\ell\\big),\n\\qquad\nd'(x) \\;=\\; \n\\begin{cases}\n\\;\\;\\;\\;\\dfrac{1}{\\ell}\\,\\exp(-x/\\ell), & x>0,\\\\[6pt]\n-\\dfrac{1}{\\ell}\\,\\exp(x/\\ell), & x<0.\n\\end{cases}\n$$\nHence\n$$\n\\big(1-d(x)\\big)^{2} \\;=\\; \\exp\\!\\big(-2|x|/\\ell\\big),\n\\qquad\n\\big(d'(x)\\big)^{2} \\;=\\; \\frac{1}{\\ell^{2}}\\,\\exp\\!\\big(-2|x|/\\ell\\big).\n$$\nThe surface energy density becomes\n$$\n\\gamma_{\\ell}(d,d') \\;=\\; \\frac{1}{c_{0}}\\left[\\frac{1}{2\\,\\ell}\\,\\exp\\!\\big(-2|x|/\\ell\\big) + \\frac{\\ell}{2}\\cdot \\frac{1}{\\ell^{2}}\\,\\exp\\!\\big(-2|x|/\\ell\\big)\\right]\n\\;=\\; \\frac{1}{c_{0}}\\left[\\frac{1}{2\\,\\ell} + \\frac{1}{2\\,\\ell}\\right]\\exp\\!\\big(-2|x|/\\ell\\big)\n\\;=\\; \\frac{1}{c_{0}}\\,\\frac{1}{\\ell}\\,\\exp\\!\\big(-2|x|/\\ell\\big).\n$$\nTherefore,\n$$\n\\int_{-\\infty}^{\\infty} \\gamma_{\\ell}(d,d')\\,\\mathrm{d}x\n\\;=\\;\n\\frac{1}{c_{0}}\\,\\int_{-\\infty}^{\\infty} \\frac{1}{\\ell}\\,\\exp\\!\\big(-2|x|/\\ell\\big)\\,\\mathrm{d}x.\n$$\nThe integrand is even, so\n$$\n\\int_{-\\infty}^{\\infty} \\frac{1}{\\ell}\\,\\exp\\!\\big(-2|x|/\\ell\\big)\\,\\mathrm{d}x\n\\;=\\;\n2\\int_{0}^{\\infty} \\frac{1}{\\ell}\\,\\exp\\!\\big(-2x/\\ell\\big)\\,\\mathrm{d}x\n\\;=\\;\n2\\cdot \\frac{1}{\\ell}\\cdot \\left[\\,-\\frac{\\ell}{2}\\,\\exp\\!\\big(-2x/\\ell\\big)\\,\\right]_{0}^{\\infty}\n\\;=\\;\n2\\cdot \\frac{1}{\\ell}\\cdot \\frac{\\ell}{2}\n\\;=\\;\n1.\n$$\nIt follows that\n$$\n\\int_{-\\infty}^{\\infty} \\gamma_{\\ell}(d,d')\\,\\mathrm{d}x \\;=\\; \\frac{1}{c_{0}}.\n$$\nThus the fracture surface energy for this stationary profile is\n$$\n\\mathcal{E}_{\\Gamma}[d] \\;=\\; G_{c}\\,\\frac{1}{c_{0}}.\n$$\nCalibrating to a single, fully developed crack requires $\\mathcal{E}_{\\Gamma}[d]=G_{c}$, which implies\n$$\nG_{c}\\,\\frac{1}{c_{0}} \\;=\\; G_{c}\n\\;\\;\\Longrightarrow\\;\\;\nc_{0} \\;=\\; 1.\n$$\nThis value of $c_{0}$ ensures that the fracture surface energy of the stationary profile equals $G_{c}$, independent of the internal length $\\ell$.", "answer": "$$\\boxed{1}$$", "id": "2709354"}, {"introduction": "Moving from analytical solutions to computational models requires discretizing the continuous variational principles. This practice guides you through the fundamental process of applying the Finite Element Method (FEM) to the phase-field fracture problem. You will translate the integral energy functional into the discrete element-level stiffness matrices, providing the essential building blocks for any numerical simulation of fracture [@problem_id:2709414].", "problem": "Consider the variational phase-field formulation of brittle fracture (Ambrosio–Tortorelli type) in two-dimensional small-strain elasticity. The total energy functional for displacement $u$ and crack phase-field $d$ is\n$$\n\\Pi(u,d) \\;=\\; \\int_{\\Omega} g(d)\\,\\psi_{0}(\\varepsilon(u))\\,\\mathrm{d}\\Omega \\;+\\; \\int_{\\Omega} \\frac{G_{c}}{2\\ell}\\,d^{2} \\;+\\; \\frac{G_{c}\\,\\ell}{2}\\,|\\nabla d|^{2}\\,\\mathrm{d}\\Omega,\n$$\nwhere $\\varepsilon(u)=(\\nabla u+\\nabla u^{\\top})/2$ is the small-strain tensor, $\\psi_{0}(\\varepsilon(u))=\\frac{1}{2}\\,\\varepsilon(u):\\mathbb{C}:\\varepsilon(u)$ is the undamaged elastic energy density with $\\mathbb{C}$ the fourth-order elasticity tensor, $G_{c}$ is the critical energy release rate, $\\ell$ is the regularization length, and $g(d)$ is a degradation function. Take $g(d)=(1-d)^{2}$, and assume the elastic solid obeys linear isotropic plane stress with Young’s modulus $E$ and Poisson’s ratio $\\nu$.\n\nUse the Finite Element Method (FEM) with linear Lagrange triangles ($\\mathbb{P}_{1}$) on the convex quadrilateral $\\Omega=[0,1]\\times[0,1]$ partitioned into two triangles by the diagonal from $(1,0)$ to $(0,1)$. The nodal coordinates are\n- Node $1$: $(0,0)$,\n- Node $2$: $(1,0)$,\n- Node $3$: $(0,1)$,\n- Node $4$: $(1,1)$.\n\nThe two triangular elements are\n- Element $e=1$: nodes $(1,2,3)$,\n- Element $e=2$: nodes $(2,4,3)$.\n\nAdopt unit thickness. Discretize $u$ with two components per node and $d$ with one scalar per node, both using the same mesh. Work with the following non-dimensional material parameters and state:\n- $E=1$,\n- $\\nu=0$ (plane stress),\n- $G_{c}=1$,\n- $\\ell=1$,\n- the current crack field is $d\\equiv 0$ at all nodes (so that $g(d)=1$ everywhere).\n\nTasks:\n1. Starting from the given energy functional, derive the element-level bilinear forms that define the stiffness matrices for the displacement field $u$ and for the phase field $d$.\n2. For each triangle, compute explicitly the element stiffness matrix for $u$ and the element stiffness matrix for $d$ using linear shape functions and the given material parameters.\n3. Assemble the global displacement stiffness matrix $K_{uu}$ (size $8\\times 8$, degree-of-freedom order $[u_{1x},u_{1y},u_{2x},u_{2y},u_{3x},u_{3y},u_{4x},u_{4y}]$) and the global phase-field stiffness matrix $K_{dd}$ (size $4\\times 4$, node order $[d_{1},d_{2},d_{3},d_{4}]$).\n\nAnswer specification:\n- Report as your final output the single scalar equal to the $(1,1)$ entry of the assembled global displacement stiffness matrix $K_{uu}$ under the above conditions.\n- No rounding is required; provide the exact value as a simplified fraction with no units.", "solution": "The total energy functional is given by\n$$\n\\Pi(u,d) \\;=\\; \\int_{\\Omega} g(d)\\,\\psi_{0}(\\varepsilon(u))\\,\\mathrm{d}\\Omega \\;+\\; \\int_{\\Omega} \\frac{G_{c}}{2\\ell}\\,d^{2} \\;+\\; \\frac{G_{c}\\,\\ell}{2}\\,|\\nabla d|^{2}\\,\\mathrm{d}\\Omega\n$$\nThe stiffness matrices are derived from the terms in the energy functional that are quadratic in the fields $u$ and $d$. In a linear formulation, these correspond to the second variation of the potential energy. The associated symmetric bilinear forms define the variational problem.\n\nTask 1: Derivation of element-level bilinear forms.\nThe energy functional is additively decomposed into a part related to the displacement field, $\\Pi_u(u, d)$, and a part related to the phase field, $\\Pi_d(d)$.\n$$\n\\Pi_u(u, d) = \\int_{\\Omega} g(d)\\,\\psi_{0}(\\varepsilon(u))\\,\\mathrm{d}\\Omega = \\int_{\\Omega} g(d)\\,\\frac{1}{2}\\,\\varepsilon(u):\\mathbb{C}:\\varepsilon(u)\\,\\mathrm{d}\\Omega\n$$\n$$\n\\Pi_d(d) = \\int_{\\Omega} \\left( \\frac{G_{c}}{2\\ell}\\,d^{2} + \\frac{G_{c}\\,\\ell}{2}\\,|\\nabla d|^{2} \\right)\\,\\mathrm{d}\\Omega\n$$\nThe bilinear form for the displacement field $u$ is found by taking the second directional derivative of $\\Pi_u$ with respect to $u$, or by using the polarization identity on the quadratic form. For two displacement fields $v_1$ and $v_2$, the bilinear form is:\n$$\na_u(v_1, v_2) = \\int_{\\Omega} g(d)\\,\\varepsilon(v_1):\\mathbb{C}:\\varepsilon(v_2)\\,\\mathrm{d}\\Omega\n$$\nSimilarly, for two phase fields $w_1$ and $w_2$, the bilinear form for $d$ is:\n$$\na_d(w_1, w_2) = \\int_{\\Omega} \\left( \\frac{G_{c}}{\\ell} w_1 w_2 + G_{c}\\,\\ell \\nabla w_1 \\cdot \\nabla w_2 \\right)\\,\\mathrm{d}\\Omega\n$$\nThese are the requested bilinear forms.\n\nTask 2 and 3: Computation of stiffness matrices.\nWe are given the state $d \\equiv 0$ at all nodes. For a $\\mathbb{P}_1$ interpolation, this means $d(x) = 0$ for all $x \\in \\Omega$. The degradation function is $g(d)=(1-d)^2$, so $g(0) = (1-0)^2 = 1$.\nThe energy functional for displacement simplifies to the standard linear elastic potential energy:\n$$\n\\Pi_u(u) = \\frac{1}{2} \\int_{\\Omega} \\varepsilon(u):\\mathbb{C}:\\varepsilon(u)\\,\\mathrm{d}\\Omega\n$$\nIn the context of the Finite Element Method, the discretized potential energy of one element $e$ is expressed as $\\frac{1}{2}(\\boldsymbol{d}^e)^\\top K_{uu}^e \\boldsymbol{d}^e$, where $\\boldsymbol{d}^e$ is the vector of nodal displacements of the element and $K_{uu}^e$ is the element stiffness matrix. The element stiffness matrix is computed by the integral over the element domain $\\Omega_e$:\n$$\nK_{uu}^e = t \\int_{\\Omega_e} B^\\top D B \\,\\mathrm{d}A\n$$\nHere, $t$ is the thickness (given as $t=1$), $B$ is the strain-displacement matrix relating the strain vector to the nodal displacements, and $D$ is the material constitutive matrix in Voigt notation.\nThe material is linear isotropic plane stress with Young's modulus $E=1$ and Poisson's ratio $\\nu=0$. The constitutive matrix $D$ is:\n$$\nD = \\frac{E}{1-\\nu^2} \\begin{pmatrix} 1 & \\nu & 0 \\\\ \\nu & 1 & 0 \\\\ 0 & 0 & \\frac{1-\\nu}{2} \\end{pmatrix} = \\frac{1}{1-0^2} \\begin{pmatrix} 1 & 0 & 0 \\\\ 0 & 1 & 0 \\\\ 0 & 0 & \\frac{1-0}{2} \\end{pmatrix} = \\begin{pmatrix} 1 & 0 & 0 \\\\ 0 & 1 & 0 \\\\ 0 & 0 & 1/2 \\end{pmatrix}\n$$\nThe strain vector is defined as $\\boldsymbol{\\varepsilon} = [\\varepsilon_{xx}, \\varepsilon_{yy}, \\gamma_{xy}]^\\top$, where $\\gamma_{xy} = 2\\varepsilon_{xy}$.\n\nThe problem requires the $(1,1)$ entry of the assembled global matrix $K_{uu}$. The global degree-of-freedom ordering is $[u_{1x},u_{1y},u_{2x},u_{2y},u_{3x},u_{3y},u_{4x},u_{4y}]$. The $(1,1)$ entry corresponds to the degree of freedom $u_{1x}$ for Node $1$ at $(0,0)$. Node $1$ is only part of Element $e=1$, which connects nodes $1$, $2$, and $3$. Therefore, the global stiffness matrix entry $K_{uu}(1,1)$ is determined exclusively by the local stiffness matrix of Element $1$, specifically $K_{uu}^{(1)}(1,1)$.\n\nFor a linear triangular element, the shape function derivatives are constant, making the $B$ matrix constant over the element. The element stiffness matrix simplifies to $K_{uu}^e = t A_e B^\\top D B$, where $A_e$ is the area of the element.\n\nLet us compute this for Element $1$, with nodes $1:(0,0)$, $2:(1,0)$, $3:(0,1)$. The area is $A_1 = \\frac{1}{2} |(x_1(y_2-y_3) + x_2(y_3-y_1) + x_3(y_1-y_2))| = \\frac{1}{2} |(0(0-1) + 1(1-0) + 0(0-0))| = \\frac{1}{2}$.\nThe derivatives of the shape functions $N_i$ are collected in coefficient vectors $\\boldsymbol{b}$ and $\\boldsymbol{c}$:\n$$\nb_i = \\frac{1}{2A_e}(y_{j}-y_{k}), \\quad c_i = \\frac{1}{2A_e}(x_{k}-x_{j}) \\quad \\text{for } (i,j,k) \\text{ cyclic}\n$$\nFor Element $1$, with $2A_1 = 1$:\n$b_1 = y_2 - y_3 = 0 - 1 = -1$\n$c_1 = x_3 - x_2 = 0 - 1 = -1$\n$b_2 = y_3 - y_1 = 1 - 0 = 1$\n$c_2 = x_1 - x_3 = 0 - 0 = 0$\n$b_3 = y_1 - y_2 = 0 - 0 = 0$\n$c_3 = x_2 - x_1 = 1 - 0 = 1$\n\nThe strain-displacement matrix $B$ is a $3 \\times 6$ matrix for a 2D linear triangle:\n$$\nB^{(1)} = \\begin{pmatrix} b_1 & 0 & b_2 & 0 & b_3 & 0 \\\\ 0 & c_1 & 0 & c_2 & 0 & c_3 \\\\ c_1 & b_1 & c_2 & b_2 & c_3 & b_3 \\end{pmatrix} = \\begin{pmatrix} -1 & 0 & 1 & 0 & 0 & 0 \\\\ 0 & -1 & 0 & 0 & 0 & 1 \\\\ -1 & -1 & 0 & 1 & 1 & 0 \\end{pmatrix}\n$$\nThe first column of $B^{(1)}$ corresponds to the nodal displacement $u_{1x}$. Let this column be $\\boldsymbol{B}_{1x}$.\n$$\n\\boldsymbol{B}_{1x} = \\begin{pmatrix} b_1 \\\\ 0 \\\\ c_1 \\end{pmatrix} = \\begin{pmatrix} -1 \\\\ 0 \\\\ -1 \\end{pmatrix}\n$$\nThe entry $K_{uu}^{(1)}(1,1)$ of the element stiffness matrix is given by:\n$$\nK_{uu}^{(1)}(1,1) = t A_1 \\boldsymbol{B}_{1x}^\\top D \\boldsymbol{B}_{1x}\n$$\nSubstituting the known values ($t=1, A_1=1/2$):\n$$\nK_{uu}^{(1)}(1,1) = (1)\\left(\\frac{1}{2}\\right) \\begin{pmatrix} -1 & 0 & -1 \\end{pmatrix} \\begin{pmatrix} 1 & 0 & 0 \\\\ 0 & 1 & 0 \\\\ 0 & 0 & 1/2 \\end{pmatrix} \\begin{pmatrix} -1 \\\\ 0 \\\\ -1 \\end{pmatrix}\n$$\n$$\nK_{uu}^{(1)}(1,1) = \\frac{1}{2} \\begin{pmatrix} -1 & 0 & -1/2 \\end{pmatrix} \\begin{pmatrix} -1 \\\\ 0 \\\\ -1 \\end{pmatrix}\n$$\n$$\nK_{uu}^{(1)}(1,1) = \\frac{1}{2} \\left( (-1)(-1) + (0)(0) + (-1/2)(-1) \\right) = \\frac{1}{2} \\left( 1 + \\frac{1}{2} \\right) = \\frac{1}{2} \\left( \\frac{3}{2} \\right) = \\frac{3}{4}\n$$\nSince Node $1$ is not part of any other element, there are no other contributions to the global stiffness entry $K_{uu}(1,1)$. Thus, $K_{uu}(1,1) = K_{uu}^{(1)}(1,1)$.\nThe requested value is $\\frac{3}{4}$.", "answer": "$$\\boxed{\\frac{3}{4}}$$", "id": "2709414"}, {"introduction": "With the analytical and discretization concepts in place, this practice moves to the implementation of a full solution algorithm. You will code an alternate minimization scheme, a robust iterative method for solving the coupled displacement and phase-field equations. By implementing and running this solver, you will directly witness the energy-minimizing principle in action and learn to use the total energy as a practical convergence criterion for your simulation [@problem_id:2709351].", "problem": "Consider a one-dimensional, nondimensionalized elastic bar on the interval $\\left[0,L\\right]$ with a scalar displacement field $u(x)$ and a scalar phase-field fracture variable $d(x)$, where $d(x)$ approximates damage with $d(x)=0$ denoting intact material and $d(x)=1$ denoting fully broken material. The variational approach to fracture seeks minimizers of the total energy with respect to both $u$ and $d$. In this problem, you will implement an alternate minimization scheme to numerically demonstrate, in principle, that the total energy is nonincreasing over the iterations, and you will use the monotonic decrease in the total energy as a convergence criterion to stop the iterations.\n\nFundamental base and model:\n- The principle of minimum potential energy states that, for fixed boundary conditions, the physically realized fields minimize the total energy. We use a standard phase-field regularization of brittle fracture in one dimension. The nondimensionalized total energy functional is\n$$\n\\mathcal{E}(u,d) \\;=\\; \\int_0^L \\left[ g(d)\\,\\frac{E}{2}\\,\\left(u'(x)\\right)^2 \\;+\\; G_c\\left(\\frac{d(x)^2}{4\\ell} \\;+\\; \\ell\\,\\left(d'(x)\\right)^2\\right) \\right]\\,\\mathrm{d}x,\n$$\nwhere $E$ is a dimensionless elastic modulus, $G_c$ is a nondimensionalized critical energy release rate, $\\ell$ is a nondimensionalized internal length scale, and $g(d)$ is a degradation function. Let $g(d) = \\left(1-d\\right)^2 + \\kappa$, with $\\kappa>0$ a small residual stiffness parameter to maintain ellipticity. The bar is subject to Dirichlet displacement boundary conditions $u(0)=0$ and $u(L)=\\bar{U}$.\n\nDiscretization and numerical scheme:\n- Discretize the interval $\\left[0,L\\right]$ using $N$ nodes with uniform spacing $h = L/(N-1)$.\n- Use second-order finite differences (edge-based central differences) for gradients. Denote by $\\Delta u_i = u_{i+1}-u_i$ and $\\Delta d_i = d_{i+1}-d_i$ on edges between nodes $i$ and $i+1$.\n- Discrete energy approximation:\n  - The elastic energy is approximated by\n    $$\n    \\mathcal{E}_{\\text{el}}(u,d) \\approx \\sum_{i=0}^{N-2} \\frac{1}{2}\\,\\frac{E\\,g_{i+\\frac{1}{2}}}{h}\\,\\left(\\Delta u_i\\right)^2,\n    $$\n    with $g_{i+\\frac{1}{2}} = \\tfrac{1}{2}\\big(g(d_i)+g(d_{i+1})\\big)$.\n  - The fracture surface energy is approximated by\n    $$\n    \\mathcal{E}_{\\text{frac}}(d) \\approx \\sum_{i=0}^{N-1} G_c\\,\\frac{d_i^2}{4\\ell}\\,h \\;+\\; \\sum_{i=0}^{N-2} G_c\\,\\ell\\,\\frac{\\left(\\Delta d_i\\right)^2}{h}.\n    $$\n  - The total energy is $\\mathcal{E}(u,d) \\approx \\mathcal{E}_{\\text{el}}(u,d) + \\mathcal{E}_{\\text{frac}}(d)$.\n- Alternate minimization (also called block coordinate descent):\n  - With $d$ fixed, minimize $\\mathcal{E}(u,d)$ over $u$ subject to $u(0)=0$ and $u(L)=\\bar{U}$. This yields a linear system with a symmetric positive definite (SPD) stiffness matrix because $g(d)\\ge \\kappa>0$.\n  - With $u$ fixed, minimize $\\mathcal{E}(u,d)$ over $d$ without additional constraints. The Euler–Lagrange equation discretizes to an SPD linear system of the form $\\mathbf{A}_d \\mathbf{d} = \\mathbf{b}_d$ with\n    $$\n    \\mathbf{A}_d \\;=\\; \\underbrace{\\mathbf{K}_{\\text{grad}}}_{\\text{from } \\ell(d')^2} \\;+\\; \\underbrace{\\operatorname{diag}\\!\\big(2\\,\\psi_i\\,h\\big)}_{\\text{from } g'(d)\\psi}\\;+\\; \\underbrace{\\operatorname{diag}\\!\\left(\\frac{G_c}{2\\ell}\\,h\\right)}_{\\text{from } d^2/(4\\ell)},\n    $$\n    where $\\psi_i$ is a nodal approximation of the elastic energy density $\\psi(u)=\\frac{E}{2}(u')^2$, and $\\mathbf{b}_d$ has components $\\left(\\mathbf{b}_d\\right)_i = 2\\,\\psi_i\\,h$.\n  - We do not enforce irreversibility or bound constraints in this demonstration so that each subproblem is an unconstrained convex minimization, ensuring the energy is nonincreasing at each substep in exact arithmetic.\n- Energy density nodal approximation: compute edge strains $\\varepsilon_{i+\\frac{1}{2}}=\\Delta u_i/h$ and edge elastic energies $\\psi_{i+\\frac{1}{2}}=\\tfrac{E}{2}\\,\\varepsilon_{i+\\frac{1}{2}}^2$, then set $\\psi_0=\\psi_{\\frac{1}{2}}$, $\\psi_{N-1}=\\psi_{N-\\frac{3}{2}}$, and for interior nodes $i$ use $\\psi_i=\\tfrac{1}{2}\\left(\\psi_{i-\\frac{1}{2}}+\\psi_{i+\\frac{1}{2}}\\right)$.\n\nTasks:\n1. Implement the described alternate minimization algorithm. Initialize with $d^{(0)}_i=0$ for all nodes $i$. In each iteration $k$:\n   - Solve for $u^{(k+1)}$ with $d^{(k)}$ fixed.\n   - Compute and record the total energy $\\mathcal{E}\\big(u^{(k+1)},d^{(k)}\\big)$.\n   - Solve for $d^{(k+1)}$ with $u^{(k+1)}$ fixed.\n   - Compute and record the total energy $\\mathcal{E}\\big(u^{(k+1)},d^{(k+1)}\\big)$.\n2. Demonstrate numerically that the total energy sequence over substeps is nonincreasing, up to floating-point tolerance. Use a mixed tolerance criterion: given energies $\\{E_j\\}_{j\\ge 0}$ recorded after every substep, check $E_{j+1}\\le E_j + \\varepsilon_{\\text{abs}} + \\varepsilon_{\\text{rel}}\\,E_j$ with $\\varepsilon_{\\text{abs}}=10^{-14}$ and $\\varepsilon_{\\text{rel}}=10^{-12}$.\n3. Use the total energy decrease as a convergence criterion. After each full alternate-minimization cycle (i.e., after updating both $u$ and $d$), compute the relative decrease\n   $$\n   r_k \\;=\\; \\frac{\\mathcal{E}\\big(u^{(k)},d^{(k)}\\big) - \\mathcal{E}\\big(u^{(k+1)},d^{(k+1)}\\big)}{\\max\\!\\left(\\mathcal{E}\\big(u^{(k)},d^{(k)}\\big),\\,10^{-16}\\right)}.\n   $$\n   Stop when $r_k < \\text{tol}$ or a maximum number of iterations is reached.\n\nTest suite:\n- For each test case, all quantities are nondimensional, so no physical units are required. Use the following parameter sets:\n  - Case A (general case): $L=1.0$, $N=101$, $E=1.0$, $G_c=0.01$, $\\ell=0.02$, $\\kappa=10^{-6}$, $\\bar{U}=0.2$, $\\text{tol}=10^{-10}$, $\\text{max\\_iter}=200$.\n  - Case B (near-elastic, tiny load): $L=1.0$, $N=51$, $E=1.0$, $G_c=0.01$, $\\ell=0.02$, $\\kappa=10^{-6}$, $\\bar{U}=10^{-4}$, $\\text{tol}=10^{-12}$, $\\text{max\\_iter}=200$.\n  - Case C (more compliant fracture): $L=1.0$, $N=101$, $E=1.0$, $G_c=0.005$, $\\ell=0.05$, $\\kappa=10^{-6}$, $\\bar{U}=0.2$, $\\text{tol}=10^{-10}$, $\\text{max\\_iter}=200$.\n\nProgram requirements:\n- Your program must compute, for each case, the following outputs:\n  - A boolean indicating whether the recorded total energies are nonincreasing over all substeps within the run, using the mixed tolerance test specified above.\n  - The number of full alternate-minimization iterations performed until convergence or until the maximum number of iterations is reached.\n  - The final total energy value rounded to eight decimal places.\n- Final output format: Your program should produce a single line of output containing a flat, comma-separated list enclosed in square brackets. The list must concatenate, in order, the triple for each case. Specifically, output\n  $$\n  [\\text{mono\\_A},\\text{iter\\_A},\\text{energy\\_A},\\text{mono\\_B},\\text{iter\\_B},\\text{energy\\_B},\\text{mono\\_C},\\text{iter\\_C},\\text{energy\\_C}],\n  $$\n  where each $\\text{mono\\_*}$ is either $\\text{True}$ or $\\text{False}$, each $\\text{iter\\_*}$ is an integer, and each $\\text{energy\\_*}$ is a float rounded to eight decimal places.", "solution": "**1. Discretization and State Variables**\n\nThe one-dimensional domain $[0,L]$ is discretized into $N$ nodes, indexed $i=0, 1, \\dots, N-1$. The uniform spacing between nodes is $h = L/(N-1)$. The displacement and phase fields are represented by nodal value vectors $\\mathbf{u} = [u_0, u_1, \\dots, u_{N-1}]^T$ and $\\mathbf{d} = [d_0, d_1, \\dots, d_{N-1}]^T$.\n\n**2. Total Energy Functional**\n\nThe total energy $\\mathcal{E}(u,d)$ is the sum of the elastic energy $\\mathcal{E}_{\\text{el}}(u,d)$ and the fracture energy $\\mathcal{E}_{\\text{frac}}(d)$. Following the provided discretization:\n\nThe elastic energy is:\n$$\n\\mathcal{E}_{\\text{el}}(\\mathbf{u},\\mathbf{d}) = \\sum_{i=0}^{N-2} \\frac{E}{2h} g_{i+\\frac{1}{2}} (u_{i+1}-u_i)^2\n$$\nwhere $g(d) = (1-d)^2+\\kappa$ and the edge-centered degradation value is $g_{i+\\frac{1}{2}} = \\frac{1}{2}(g(d_i) + g(d_{i+1}))$.\n\nThe fracture energy is:\n$$\n\\mathcal{E}_{\\text{frac}}(\\mathbf{d}) = \\sum_{i=0}^{N-1} G_c \\frac{d_i^2}{4\\ell} h + \\sum_{i=0}^{N-2} G_c \\ell \\frac{(d_{i+1}-d_i)^2}{h}\n$$\n\n**3. Alternate Minimization Subproblems**\n\nThe core of the algorithm is the alternate minimization loop. At each iteration $k$, we first solve for $\\mathbf{u}^{(k+1)}$ while keeping $\\mathbf{d}^{(k)}$ fixed, then solve for $\\mathbf{d}^{(k+1)}$ while keeping $\\mathbf{u}^{(k+1)}$ fixed.\n\n**3.1. Minimization with respect to Displacement u**\n\nFor a fixed phase field $\\mathbf{d}$, we minimize $\\mathcal{E}(\\mathbf{u},\\mathbf{d})$ with respect to $\\mathbf{u}$, subject to the boundary conditions $u_0=0$ and $u_{N-1}=\\bar{U}$. This is equivalent to solving $\\frac{\\partial \\mathcal{E}_{\\text{el}}}{\\partial u_i} = 0$ for the interior nodes $i=1, \\dots, N-2$. The derivative for an interior node $u_i$ is:\n$$\n\\frac{\\partial \\mathcal{E}_{\\text{el}}}{\\partial u_i} = \\frac{\\partial}{\\partial u_i} \\left[ \\frac{E}{2h}g_{i-\\frac{1}{2}}(u_i-u_{i-1})^2 + \\frac{E}{2h}g_{i+\\frac{1}{2}}(u_{i+1}-u_i)^2 \\right] = 0\n$$\nThis yields a system of linear equations:\n$$\n\\frac{E}{h}g_{i-\\frac{1}{2}}(u_i-u_{i-1}) - \\frac{E}{h}g_{i+\\frac{1}{2}}(u_{i+1}-u_i) = 0\n$$\nRearranging for $i=1, \\dots, N-2$:\n$$\n-\\left(\\frac{E}{h}g_{i-\\frac{1}{2}}\\right)u_{i-1} + \\left(\\frac{E}{h}g_{i-\\frac{1}{2}} + \\frac{E}{h}g_{i+\\frac{1}{2}}\\right)u_i - \\left(\\frac{E}{h}g_{i+\\frac{1}{2}}\\right)u_{i+1} = 0\n$$\nThis defines a linear system $\\mathbf{K}_u \\mathbf{u}_{\\text{int}} = \\mathbf{f}_u$ for the unknown interior displacements $\\mathbf{u}_{\\text{int}} = [u_1, \\dots, u_{N-2}]^T$. The stiffness matrix $\\mathbf{K}_u$ is an $(N-2) \\times (N-2)$ symmetric tridiagonal matrix.\nThe diagonal entries are $(\\mathbf{K}_u)_{j,j} = \\frac{E}{h}(g_{j-\\frac{1}{2}} + g_{j+\\frac{1}{2}})$ for $j=1, \\dots, N-2$ (using local matrix indices).\nThe off-diagonal entries are $(\\mathbf{K}_u)_{j,j+1} = (\\mathbf{K}_u)_{j+1,j} = -\\frac{E}{h}g_{j+\\frac{1}{2}}$.\nThe boundary conditions $u_0=0$ and $u_{N-1}=\\bar{U}$ modify the equations for $i=1$ and $i=N-2$, respectively. For $i=1$, the $u_0$ term is zero. For $i=N-2$, the term $-\\frac{E}{h}g_{N-\\frac{3}{2}}u_{N-1}$ becomes a known value moved to the right-hand side, so the last component of the force vector $\\mathbf{f}_u$ is $f_{N-2} = \\frac{E}{h}g_{N-\\frac{3}{2}}\\bar{U}$. All other components of $\\mathbf{f}_u$ are zero. Since $g(d) \\ge \\kappa > 0$, the matrix $\\mathbf{K}_u$ is symmetric and positive definite (SPD), guaranteeing a unique solution.\n\n**3.2. Minimization with respect to Phase Field d**\n\nFor a fixed displacement field $\\mathbf{u}$, we minimize $\\mathcal{E}(\\mathbf{u},\\mathbf{d})$ with respect to $\\mathbf{d}$. The problem statement provides the form of the resulting linear system $\\mathbf{A}_d \\mathbf{d} = \\mathbf{b}_d$. This system is derived from setting $\\frac{\\partial \\mathcal{E}}{\\partial d_i} = 0$ for all nodes $i=0, \\dots, N-1$.\n\nFirst, we compute the nodal elastic energy density $\\psi_i$. The edge strains $\\varepsilon_{i+\\frac{1}{2}} = (u_{i+1}-u_i)/h$ and edge energy densities $\\psi_{i+\\frac{1}{2}} = \\frac{E}{2}\\varepsilon_{i+\\frac{1}{2}}^2$ are calculated. Then, nodal values are assigned as specified:\n$$\n\\psi_0 = \\psi_{\\frac{1}{2}}, \\quad \\psi_{N-1} = \\psi_{N-\\frac{3}{2}}, \\quad \\psi_i = \\frac{1}{2}(\\psi_{i-\\frac{1}{2}} + \\psi_{i+\\frac{1}{2}}) \\text{ for } i=1, \\dots, N-2.\n$$\nThe linear system is $\\mathbf{A}_d \\mathbf{d} = \\mathbf{b}_d$, where the $N \\times N$ matrix $\\mathbf{A}_d$ and $N$-vector $\\mathbf{b}_d$ are constructed. The vector $\\mathbf{b}_d$ has components $(\\mathbf{b}_d)_i = 2\\psi_i h$. The symmetric, tridiagonal matrix $\\mathbf{A}_d$ is the sum of three contributions specified in the problem statement. The system matrix $\\mathbf{A}_d$ is SPD, and the system can be solved efficiently for $\\mathbf{d}$.\n\n**4. Algorithm and Convergence**\n\nThe overall algorithm is as follows:\n1.  **Initialization**: Set iteration counter $k=0$. Initialize the phase field $\\mathbf{d}^{(0)}$ to a zero vector. Compute the corresponding linear elastic displacement field $\\mathbf{u}^{(0)}$ with components $u_i^{(0)} = \\bar{U} \\cdot i / (N-1)$. Compute the initial total energy $E_{\\text{prev}} = \\mathcal{E}(\\mathbf{u}^{(0)}, \\mathbf{d}^{(0)})$.\n2.  **Iteration Loop**: For $k=0, 1, \\dots, \\text{max_iter}-1$:\n    a. Solve for $\\mathbf{u}^{(k+1)}$ using $\\mathbf{d}^{(k)}$.\n    b. Record the energy $\\mathcal{E}(\\mathbf{u}^{(k+1)}, \\mathbf{d}^{(k)})$.\n    c. Solve for $\\mathbf{d}^{(k+1)}$ using $\\mathbf{u}^{(k+1)}$.\n    d. Compute the new total energy $E_{\\text{new}} = \\mathcal{E}(\\mathbf{u}^{(k+1)}, \\mathbf{d}^{(k+1)})$. Record this energy.\n    e. Check for convergence by calculating the relative energy decrease $r_k = (E_{\\text{prev}} - E_{\\text{new}})/\\max(E_{\\text{prev}}, 10^{-16})$. If $r_k < \\text{tol}$, terminate the loop.\n    f. Update for the next iteration: $E_{\\text{prev}} = E_{\\text{new}}$.\n3.  **Post-processing**: After the loop finishes, verify that the sequence of all recorded energies is non-increasing within the specified numerical tolerance: $E_{j+1} \\le E_j + \\varepsilon_{\\text{abs}} + \\varepsilon_{\\text{rel}} E_j$.\n4.  **Output**: Return the monotonicity check result, the total number of iterations performed, and the final converged energy.", "answer": "```python\nimport numpy as np\nfrom scipy.linalg import solve_banded\n\ndef solve():\n    \"\"\"\n    Main function to run the test suite and print results.\n    \"\"\"\n    test_cases = [\n        # Case A (general case)\n        (1.0, 101, 1.0, 0.01, 0.02, 1e-6, 0.2, 1e-10, 200),\n        # Case B (near-elastic, tiny load)\n        (1.0, 51, 1.0, 0.01, 0.02, 1e-6, 1e-4, 1e-12, 200),\n        # Case C (more compliant fracture)\n        (1.0, 101, 1.0, 0.005, 0.05, 1e-6, 0.2, 1e-10, 200),\n    ]\n\n    all_results = []\n    for params in test_cases:\n        L, N, E, Gc, l, kappa, U_bar, tol, max_iter = params\n        is_monotonic, iters, final_energy = solve_case(L, N, E, Gc, l, kappa, U_bar, tol, max_iter)\n        all_results.extend([is_monotonic, iters, round(final_energy, 8)])\n\n    # Format and print the final output string\n    print(f\"[{','.join(map(str, all_results))}]\")\n\ndef solve_case(L, N, E, Gc, l, kappa, U_bar, tol, max_iter):\n    \"\"\"\n    Solves a single instance of the phase-field fracture problem.\n    \n    Returns:\n        tuple: (is_monotonic, iterations, final_energy)\n    \"\"\"\n    h = L / (N - 1)\n    x = np.linspace(0, L, N)\n    \n    # --- Helper Functions ---\n\n    def compute_total_energy(u, d):\n        # Elastic energy\n        g = (1 - d)**2 + kappa\n        g_mid = 0.5 * (g[:-1] + g[1:])\n        du = u[1:] - u[:-1]\n        el_energy = np.sum(0.5 * E * g_mid / h * du**2)\n        \n        # Fracture energy\n        frac_surf = np.sum(Gc * d**2 / (4 * l) * h)\n        dd = d[1:] - d[:-1]\n        frac_grad = np.sum(Gc * l * (dd**2) / h)\n        \n        return el_energy + frac_surf + frac_grad\n\n    def solve_for_u(d):\n        g = (1 - d)**2 + kappa\n        g_mid = 0.5 * (g[:-1] + g[1:])\n        k_stiff_edge = E * g_mid / h\n        \n        # System for interior nodes u_1, ..., u_{N-2}\n        num_internal_nodes = N - 2\n        diag = k_stiff_edge[:-1] + k_stiff_edge[1:]\n        off_diag = -k_stiff_edge[1:-1]\n        \n        Ku = np.zeros((3, num_internal_nodes))\n        Ku[0, 1:] = off_diag\n        Ku[1, :] = diag\n        Ku[2, :-1] = off_diag\n        \n        fu = np.zeros(num_internal_nodes)\n        fu[-1] = k_stiff_edge[-1] * U_bar\n        \n        u_internal = solve_banded((1, 1), Ku, fu)\n        \n        u = np.zeros(N)\n        u[1:-1] = u_internal\n        u[-1] = U_bar\n        return u\n\n    def solve_for_d(u):\n        # Calculate nodal elastic energy density psi\n        eps_edge = (u[1:] - u[:-1]) / h\n        psi_edge = 0.5 * E * eps_edge**2\n        \n        psi = np.zeros(N)\n        psi[0] = psi_edge[0]\n        psi[-1] = psi_edge[-1]\n        psi[1:-1] = 0.5 * (psi_edge[:-1] + psi_edge[1:])\n\n        # Assemble and solve Ad * d = bd\n        bd = 2 * psi * h\n\n        # Build Ad matrix (tridiagonal, N x N)\n        # K_grad part\n        diag_Ad = np.full(N, 2 * Gc * l / h)\n        diag_Ad[1:-1] += 2 * Gc * l / h\n        off_diag_Ad = np.full(N - 1, -2 * Gc * l / h)\n        \n        # Other diagonal contributions (based on problem description derivation)\n        diag_Ad += 2 * psi * h * 2 # Corresponds to g''(d)=2 from (1-d)^2\n        diag_Ad += Gc * h / (2 * l)\n        \n        Ad_banded = np.zeros((3, N))\n        Ad_banded[0, 1:] = off_diag_Ad\n        Ad_banded[1, :] = diag_Ad\n        Ad_banded[2, :-1] = off_diag_Ad\n        \n        d_new = solve_banded((1, 1), Ad_banded, bd)\n        return d_new\n\n    # --- Alternate Minimization Loop ---\n    \n    # Initialization\n    d_k = np.zeros(N)\n    u_k = x * U_bar / L  # Linear elastic solution for d=0\n    \n    energy_k = compute_total_energy(u_k, d_k)\n    all_energies = [energy_k]\n    \n    iters_done = 0\n    for k in range(max_iter):\n        iters_done = k + 1\n        energy_prev_cycle = energy_k\n        \n        # Step 1: u-minimization\n        u_k_plus_1 = solve_for_u(d_k)\n        all_energies.append(compute_total_energy(u_k_plus_1, d_k))\n        \n        # Step 2: d-minimization\n        # In the problem, the d subproblem is approximated as convex, leading to a linear system.\n        # This is a simplification (a Newton step from d=0, or a Gauss-Newton step).\n        # We enforce g'(d) = -2(1-d) and the driving force term in the residual is -(d/dd)g(d)psi = 2(1-d)psi\n        # The equation for d is: [K_grad + diag(d^2 term) + diag(2*psi)] d = diag(2*psi)\n        # The problem statement's derivation for A_d seems based on a quadratic approximation of the energy. Let's follow that.\n\n        # Re-deriving d-minimization based on problem description\n        # E(d) = sum(g(d)psi_el) + E_frac(d). Minimizing implies dE/dd = 0\n        # g'(d)psi_el + dE_frac/dd = 0 => [-2(1-d_i)]*psi_i + dE_frac/dd_i = 0\n        # 2*psi_i - 2*psi_i*d_i + ... = 0\n        # This gives the system [A_d]d = b_d where b_d has 2*psi_i terms. A_d has 2*psi_i on the diagonal.\n        # The problem statement has b_d = 2*psi_i*h and A_d has diag(2*psi_i*h), this seems consistent with the discretization.\n        \n        # Corrected assembly for Ad based on problem statement\n        psi_nodes = np.zeros(N)\n        eps_edge = (u_k_plus_1[1:] - u_k_plus_1[:-1]) / h\n        psi_edge = 0.5 * E * eps_edge**2\n        psi_nodes[0] = psi_edge[0]\n        psi_nodes[-1] = psi_edge[-1]\n        psi_nodes[1:-1] = 0.5 * (psi_edge[:-1] + psi_edge[1:])\n\n        b_d = 2 * psi_nodes * h\n\n        # K_grad from (l * (d')^2) term gives -2*l/h off-diag and 2*l/h on ends, 4*l/h interior\n        k_grad_diag = np.full(N, 4 * Gc * l / h)\n        k_grad_diag[0] = 2 * Gc * l / h\n        k_grad_diag[-1] = 2 * Gc * l / h\n        k_grad_off_diag = np.full(N - 1, -2 * Gc * l / h)\n        \n        # The other two terms are diagonal\n        d_psi_diag = 2 * psi_nodes * h\n        d2_diag = Gc * h / (2 * l)\n\n        # Total diagonal\n        A_d_diag = k_grad_diag + d_psi_diag + d2_diag\n\n        Ad_banded = np.zeros((3, N))\n        Ad_banded[0, 1:] = k_grad_off_diag\n        Ad_banded[1, :] = A_d_diag\n        Ad_banded[2, :-1] = k_grad_off_diag\n\n        d_k_plus_1 = solve_banded((1, 1), Ad_banded, b_d)\n\n        energy_k = compute_total_energy(u_k_plus_1, d_k_plus_1)\n        all_energies.append(energy_k)\n        \n        # Update state for next iteration\n        u_k = u_k_plus_1\n        d_k = d_k_plus_1\n        \n        # Check for convergence\n        rel_decr = (energy_prev_cycle - energy_k) / max(abs(energy_prev_cycle), 1e-16)\n        if rel_decr  tol:\n            break\n            \n    # --- Post-processing ---\n    \n    # Check for non-increasing energy property (monotonicity)\n    is_monotonic = True\n    eps_abs = 1e-14\n    eps_rel = 1e-12\n    for i in range(len(all_energies) - 1):\n        if all_energies[i+1] > all_energies[i] + eps_abs + eps_rel * abs(all_energies[i]):\n            is_monotonic = False\n            break\n            \n    return is_monotonic, iters_done, energy_k\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "2709351"}]}