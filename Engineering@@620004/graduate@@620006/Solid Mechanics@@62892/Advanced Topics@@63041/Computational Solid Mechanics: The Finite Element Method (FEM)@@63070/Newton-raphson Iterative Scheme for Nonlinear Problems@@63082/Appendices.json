{"hands_on_practices": [{"introduction": "This first exercise grounds the Newton-Raphson method in its simplest form: a single scalar equation. By analyzing a one-dimensional hyperelastic bar under a single-parameter approximation, you will derive the scalar residual $R(u)$ and tangent stiffness $K_T(u)$ directly from the total potential energy $\\Pi(u)$. This fundamental practice of formulating the analytical expression for the Newton step will build a strong intuition for the core components of the method [@problem_id:2664990].", "problem": "A homogeneous prismatic bar of length $L$ and constant cross-sectional area $A$ undergoes small-strain, one-dimensional axial deformation. One end at $x=0$ is fixed, and a tensile force $F$ is applied at the free end $x=L$. The material is hyperelastic with strain energy density $W(\\varepsilon)=\\tfrac{1}{2}E\\,\\varepsilon^{2}+\\tfrac{\\alpha}{4}\\,\\varepsilon^{4}$, where $E>0$ is the Young’s modulus and $\\alpha>0$ is a material nonlinearity parameter. Adopt a single-parameter kinematic approximation $u(x)=\\dfrac{u}{L}\\,x$, where $u$ is the axial displacement at $x=L$, so that the axial strain is uniform, $\\varepsilon=\\dfrac{u}{L}$. The total potential energy is\n$$\n\\Pi(u)=\\int_{0}^{L}A\\,W\\!\\left(\\varepsilon\\right)\\,\\mathrm{d}x - F\\,u.\n$$\nUsing the principle of stationary total potential energy and the Newton–Raphson iterative scheme for nonlinear problems, derive the scalar residual and tangent associated with the unknown $u$, and from these obtain the closed-form expression for the Newton step $\\Delta u_{k}$ at a general iteration $k$, expressed exclusively in terms of $A$, $L$, $E$, $\\alpha$, $F$, and $u_{k}$. Provide your final result as a single analytic expression for $\\Delta u_{k}$. Do not substitute numerical values and do not include units in your final expression.", "solution": "The problem as stated is valid, self-contained, and scientifically sound. It is a standard application of variational principles and numerical methods in nonlinear solid mechanics. We proceed with the derivation.\n\nThe total potential energy $\\Pi$ of the system is given as\n$$ \\Pi(u)=\\int_{0}^{L}A\\,W\\!\\left(\\varepsilon\\right)\\,\\mathrm{d}x - F\\,u $$\nThe strain energy density $W$ depends on the axial strain $\\varepsilon$. The problem provides a kinematic approximation, which simplifies the strain to be uniform throughout the bar:\n$$ \\varepsilon = \\frac{u}{L} $$\nwhere $u$ is the displacement at the free end $x=L$.\nSubstituting this uniform strain into the given expression for the strain energy density $W(\\varepsilon)=\\tfrac{1}{2}E\\,\\varepsilon^{2}+\\tfrac{\\alpha}{4}\\,\\varepsilon^{4}$, we obtain:\n$$ W\\left(\\frac{u}{L}\\right) = \\frac{1}{2}E\\left(\\frac{u}{L}\\right)^{2} + \\frac{\\alpha}{4}\\left(\\frac{u}{L}\\right)^{4} = \\frac{E u^{2}}{2L^{2}} + \\frac{\\alpha u^{4}}{4L^{4}} $$\nSince the integrand in the total potential energy expression is now constant with respect to the spatial coordinate $x$, the integration is trivial:\n$$ \\int_{0}^{L}A\\,W(\\varepsilon)\\,\\mathrm{d}x = A L W(\\varepsilon) $$\nSubstituting the expression for $W$ in terms of $u$, the total potential energy becomes a function of the single unknown displacement $u$:\n$$ \\Pi(u) = A L \\left( \\frac{E u^{2}}{2L^{2}} + \\frac{\\alpha u^{4}}{4L^{4}} \\right) - F u $$\nSimplifying this expression yields:\n$$ \\Pi(u) = \\frac{A E}{2L} u^{2} + \\frac{A \\alpha}{4L^{3}} u^{4} - F u $$\nThe principle of stationary total potential energy states that for the system to be in equilibrium, the first derivative of the potential energy with respect to the generalized coordinate $u$ must be zero. This derivative defines the scalar residual function, $R(u)$:\n$$ R(u) = \\frac{\\mathrm{d}\\Pi}{\\mathrm{d}u} = \\frac{\\mathrm{d}}{\\mathrm{d}u}\\left(\\frac{A E}{2L} u^{2} + \\frac{A \\alpha}{4L^{3}} u^{4} - F u\\right) $$\nPerforming the differentiation gives:\n$$ R(u) = \\frac{A E}{L} u + \\frac{A \\alpha}{L^{3}} u^{3} - F $$\nThe Newton–Raphson iterative scheme is employed to solve the nonlinear equilibrium equation $R(u)=0$. This scheme requires the tangent stiffness, $K_T(u)$, which is the derivative of the residual with respect to $u$. This is equivalent to the second derivative of the potential energy.\n$$ K_{T}(u) = \\frac{\\mathrm{d}R}{\\mathrm{d}u} = \\frac{\\mathrm{d}^{2}\\Pi}{\\mathrm{d}u^{2}} = \\frac{\\mathrm{d}}{\\mathrm{d}u}\\left(\\frac{A E}{L} u + \\frac{A \\alpha}{L^{3}} u^{3} - F\\right) $$\nThe differentiation yields the tangent stiffness:\n$$ K_{T}(u) = \\frac{A E}{L} + \\frac{3 A \\alpha}{L^{3}} u^{2} $$\nThe Newton–Raphson method provides an iterative update to the displacement. At a general iteration $k$, the current estimate of the displacement is $u_{k}$. The linearized system at $u_{k}$ is given by:\n$$ R(u_{k}) + K_{T}(u_{k}) \\Delta u_{k} = 0 $$\nwhere $\\Delta u_{k} = u_{k+1} - u_{k}$ is the displacement increment, or the Newton step. Solving for this increment gives:\n$$ \\Delta u_{k} = - \\frac{R(u_{k})}{K_{T}(u_{k})} $$\nWe now substitute the expressions for the residual $R(u_{k})$ and the tangent stiffness $K_{T}(u_{k})$ evaluated at the displacement $u_{k}$:\n$$ R(u_{k}) = \\frac{A E}{L} u_{k} + \\frac{A \\alpha}{L^{3}} u_{k}^{3} - F $$\n$$ K_{T}(u_{k}) = \\frac{A E}{L} + \\frac{3 A \\alpha}{L^{3}} u_{k}^{2} $$\nSubstituting these into the expression for $\\Delta u_{k}$:\n$$ \\Delta u_{k} = - \\frac{\\frac{A E}{L} u_{k} + \\frac{A \\alpha}{L^{3}} u_{k}^{3} - F}{\\frac{A E}{L} + \\frac{3 A \\alpha}{L^{3}} u_{k}^{2}} $$\nThis expression can be rearranged by absorbing the negative sign into the numerator:\n$$ \\Delta u_{k} = \\frac{F - \\frac{A E}{L} u_{k} - \\frac{A \\alpha}{L^{3}} u_{k}^{3}}{\\frac{A E}{L} + \\frac{3 A \\alpha}{L^{3}} u_{k}^{2}} $$\nTo obtain a final form free of nested fractions, we multiply the numerator and denominator by $L^{3}$:\n$$ \\Delta u_{k} = \\frac{L^{3} \\left( F - \\frac{A E}{L} u_{k} - \\frac{A \\alpha}{L^{3}} u_{k}^{3} \\right)}{L^{3} \\left( \\frac{A E}{L} + \\frac{3 A \\alpha}{L^{3}} u_{k}^{2} \\right)} $$\nThis simplifies to the closed-form expression for the Newton step $\\Delta u_{k}$:\n$$ \\Delta u_{k} = \\frac{F L^{3} - A E L^{2} u_{k} - A \\alpha u_{k}^{3}}{A E L^{2} + 3 A \\alpha u_{k}^{2}} $$\nThis is the required result, expressed exclusively in terms of the given parameters $A$, $L$, $E$, $\\alpha$, $F$, and the current displacement estimate $u_{k}$.", "answer": "$$\n\\boxed{\\frac{F L^{3} - A E L^{2} u_{k} - A \\alpha u_{k}^{3}}{A E L^{2} + 3 A \\alpha u_{k}^{2}}}\n$$", "id": "2664990"}, {"introduction": "Real-world structural systems involve many interconnected degrees of freedom, requiring a move from scalar equations to a matrix-vector framework. This practice extends the concept to an illustrative two-degree-of-freedom (2-DOF) nonlinear system [@problem_id:2665001]. You will derive the residual vector $\\mathbf{R}(\\mathbf{u})$ and the tangent stiffness matrix $\\mathbf{K}_T(\\mathbf{u})$, gaining direct experience with the multi-dimensional form of the Newton-Raphson iteration, which is governed by the linear system $\\mathbf{K}_T \\Delta \\mathbf{u} = -\\mathbf{R}$.", "problem": "Consider a conservative, nonlinear, two-degrees-of-freedom (DOF) solid mechanics system with generalized displacements $u_{1}$ and $u_{2}$. Let the total potential energy be $\\Pi(u_{1},u_{2}) = W(u_{1},u_{2}) - F_{1} u_{1} - F_{2} u_{2}$, where the stored energy $W$ is\n$$\nW(u_{1},u_{2}) = \\tfrac{1}{2} k \\left(u_{1}^{2} + u_{2}^{2}\\right) + \\tfrac{1}{4} \\alpha\\, u_{1}^{4} + \\tfrac{1}{4} \\gamma\\, u_{2}^{4} + \\tfrac{1}{2} \\beta\\, u_{1}^{2} u_{2}^{2}.\n$$\nThe equilibrium equations follow from the stationarity condition of the total potential energy, that is, $\\nabla \\Pi(u_{1},u_{2}) = \\mathbf{0}$, which can be written in residual form $\\mathbf{R}(\\mathbf{u}) = \\mathbf{0}$ with $\\mathbf{u} = \\begin{pmatrix} u_{1} \\\\ u_{2} \\end{pmatrix}$.\n\nGiven the material/interaction parameters $k = 1000$, $\\alpha = 100$, $\\gamma = 50$, and $\\beta = 20$, and the external nodal forces $F_{1} = 500$ and $F_{2} = 800$, perform the following:\n\n- Starting from the definition of the residual vector as the gradient of the stored energy minus the external forces, derive the components $R_{1}(u_{1},u_{2})$ and $R_{2}(u_{1},u_{2})$.\n- By linearizing $\\mathbf{R}(\\mathbf{u})$ via first-order Taylor expansion, derive the consistent tangent matrix (Jacobian) $\\mathbf{K}_T(\\mathbf{u})$.\n- Using the Newton iteration concept, set up the linear system that must be solved for the Newton increment $\\Delta \\mathbf{u}^{(k)}$ at a current iterate $\\mathbf{u}^{(k)}$.\n- For the current iterate $\\mathbf{u}^{(k)} = \\begin{pmatrix} 0.5 \\\\ 0.3 \\end{pmatrix}$, compute the Newton increment vector $\\Delta \\mathbf{u}^{(k)}$.\n\nExpress the entries of the increment vector in millimeters. Round your numerical answer to four significant figures.", "solution": "The problem statement is analyzed and found to be valid. It is scientifically grounded in the principles of solid mechanics and numerical analysis, well-posed, objective, and contains all necessary information to proceed with a solution.\n\nThe problem asks for the derivation of the residual vector, the tangent matrix, and the calculation of a single Newton-Raphson increment for a two-degree-of-freedom nonlinear system.\n\nThe total potential energy $\\Pi$ is given by\n$$\n\\Pi(\\mathbf{u}) = W(\\mathbf{u}) - \\mathbf{F}^{T} \\mathbf{u}\n$$\nwhere $\\mathbf{u} = \\begin{pmatrix} u_{1} \\\\ u_{2} \\end{pmatrix}$ is the vector of generalized displacements, $\\mathbf{F} = \\begin{pmatrix} F_{1} \\\\ F_{2} \\end{pmatrix}$ is the vector of external forces, and $W(\\mathbf{u})$ is the stored elastic energy. The stored energy is given as\n$$\nW(u_{1}, u_{2}) = \\tfrac{1}{2} k (u_{1}^{2} + u_{2}^{2}) + \\tfrac{1}{4} \\alpha u_{1}^{4} + \\tfrac{1}{4} \\gamma u_{2}^{4} + \\tfrac{1}{2} \\beta u_{1}^{2} u_{2}^{2}\n$$\nThe equilibrium state is found from the principle of stationarity of potential energy, $\\nabla \\Pi(\\mathbf{u}) = \\mathbf{0}$. The residual vector $\\mathbf{R}(\\mathbf{u})$ is defined as the gradient of the potential energy.\n$$\n\\mathbf{R}(\\mathbf{u}) = \\nabla \\Pi(\\mathbf{u}) = \\nabla W(\\mathbf{u}) - \\mathbf{F} = \\begin{pmatrix} \\frac{\\partial W}{\\partial u_{1}} - F_{1} \\\\ \\frac{\\partial W}{\\partial u_{2}} - F_{2} \\end{pmatrix}\n$$\nThe first task is to derive the components of the residual vector, $R_{1}$ and $R_{2}$. We compute the partial derivatives of the stored energy $W$ with respect to $u_{1}$ and $u_{2}$.\n$$\n\\frac{\\partial W}{\\partial u_{1}} = \\frac{\\partial}{\\partial u_{1}} \\left( \\tfrac{1}{2} k(u_{1}^{2} + u_{2}^{2}) + \\tfrac{1}{4} \\alpha u_{1}^{4} + \\tfrac{1}{4} \\gamma u_{2}^{4} + \\tfrac{1}{2} \\beta u_{1}^{2} u_{2}^{2} \\right) = k u_{1} + \\alpha u_{1}^{3} + \\beta u_{1} u_{2}^{2}\n$$\n$$\n\\frac{\\partial W}{\\partial u_{2}} = \\frac{\\partial}{\\partial u_{2}} \\left( \\tfrac{1}{2} k(u_{1}^{2} + u_{2}^{2}) + \\tfrac{1}{4} \\alpha u_{1}^{4} + \\tfrac{1}{4} \\gamma u_{2}^{4} + \\tfrac{1}{2} \\beta u_{1}^{2} u_{2}^{2} \\right) = k u_{2} + \\gamma u_{2}^{3} + \\beta u_{1}^{2} u_{2}\n$$\nThus, the components of the residual vector are:\n$$\nR_{1}(u_{1}, u_{2}) = k u_{1} + \\alpha u_{1}^{3} + \\beta u_{1} u_{2}^{2} - F_{1}\n$$\n$$\nR_{2}(u_{1}, u_{2}) = k u_{2} + \\gamma u_{2}^{3} + \\beta u_{1}^{2} u_{2} - F_{2}\n$$\nThe second task is to derive the consistent tangent matrix $\\mathbf{K}_T(\\mathbf{u})$, which is the Jacobian of the residual vector $\\mathbf{R}(\\mathbf{u})$ with respect to $\\mathbf{u}$.\n$$\n\\mathbf{K}_T(\\mathbf{u}) = \\frac{\\partial \\mathbf{R}}{\\partial \\mathbf{u}} = \\begin{pmatrix} \\frac{\\partial R_{1}}{\\partial u_{1}} & \\frac{\\partial R_{1}}{\\partial u_{2}} \\\\ \\frac{\\partial R_{2}}{\\partial u_{1}} & \\frac{\\partial R_{2}}{\\partial u_{2}} \\end{pmatrix} = \\nabla^2 W(\\mathbf{u})\n$$\nWe compute the required second-order partial derivatives of $W$:\n$$\n\\frac{\\partial R_{1}}{\\partial u_{1}} = \\frac{\\partial^{2} W}{\\partial u_{1}^{2}} = k + 3 \\alpha u_{1}^{2} + \\beta u_{2}^{2}\n$$\n$$\n\\frac{\\partial R_{1}}{\\partial u_{2}} = \\frac{\\partial^{2} W}{\\partial u_{1} \\partial u_{2}} = 2 \\beta u_{1} u_{2}\n$$\n$$\n\\frac{\\partial R_{2}}{\\partial u_{1}} = \\frac{\\partial^{2} W}{\\partial u_{2} \\partial u_{1}} = 2 \\beta u_{1} u_{2}\n$$\n$$\n\\frac{\\partial R_{2}}{\\partial u_{2}} = \\frac{\\partial^{2} W}{\\partial u_{2}^{2}} = k + 3 \\gamma u_{2}^{2} + \\beta u_{1}^{2}\n$$\nThe tangent matrix is symmetric, as expected for a conservative system.\n$$\n\\mathbf{K}_T(u_{1}, u_{2}) = \\begin{pmatrix} k + 3 \\alpha u_{1}^{2} + \\beta u_{2}^{2} & 2 \\beta u_{1} u_{2} \\\\ 2 \\beta u_{1} u_{2} & k + 3 \\gamma u_{2}^{2} + \\beta u_{1}^{2} \\end{pmatrix}\n$$\nThe third task is to set up the linear system for the Newton-Raphson iteration. The core idea is to find a root of $\\mathbf{R}(\\mathbf{u}) = \\mathbf{0}$. Given a current iterate $\\mathbf{u}^{(k)}$, we approximate the residual at the next iterate $\\mathbf{u}^{(k+1)}$ using a first-order Taylor expansion around $\\mathbf{u}^{(k)}$:\n$$\n\\mathbf{R}(\\mathbf{u}^{(k+1)}) \\approx \\mathbf{R}(\\mathbf{u}^{(k)}) + \\frac{\\partial \\mathbf{R}}{\\partial \\mathbf{u}}\\Big|_{\\mathbf{u}^{(k)}} (\\mathbf{u}^{(k+1)} - \\mathbf{u}^{(k)})\n$$\nSetting $\\mathbf{R}(\\mathbf{u}^{(k+1)}) = \\mathbf{0}$ to find the improved root and defining the increment $\\Delta \\mathbf{u}^{(k)} = \\mathbf{u}^{(k+1)} - \\mathbf{u}^{(k)}$, we obtain:\n$$\n\\mathbf{0} \\approx \\mathbf{R}(\\mathbf{u}^{(k)}) + \\mathbf{K}_T(\\mathbf{u}^{(k)}) \\Delta \\mathbf{u}^{(k)}\n$$\nThis leads to the linear system of equations that must be solved for the displacement increment $\\Delta \\mathbf{u}^{(k)}$:\n$$\n\\mathbf{K}_T(\\mathbf{u}^{(k)}) \\Delta \\mathbf{u}^{(k)} = -\\mathbf{R}(\\mathbf{u}^{(k)})\n$$\nThe final task is to compute the increment $\\Delta \\mathbf{u}^{(k)}$ for the iterate $\\mathbf{u}^{(k)} = \\begin{pmatrix} 0.5 \\\\ 0.3 \\end{pmatrix}$. The provided parameters are $k = 1000$, $\\alpha = 100$, $\\gamma = 50$, $\\beta = 20$, $F_{1} = 500$, and $F_{2} = 800$. The displacement values are assumed to be in millimeters ($mm$).\n\nFirst, we evaluate the residual vector $\\mathbf{R}(\\mathbf{u}^{(k)})$ at $\\mathbf{u}^{(k)} = \\begin{pmatrix} 0.5 \\\\ 0.3 \\end{pmatrix}$:\n$$\nR_{1}^{(k)} = (1000)(0.5) + (100)(0.5)^{3} + (20)(0.5)(0.3)^{2} - 500 = 500 + 12.5 + 0.9 - 500 = 13.4\n$$\n$$\nR_{2}^{(k)} = (1000)(0.3) + (50)(0.3)^{3} + (20)(0.5)^{2}(0.3) - 800 = 300 + 1.35 + 1.5 - 800 = -497.15\n$$\nSo, $\\mathbf{R}(\\mathbf{u}^{(k)}) = \\begin{pmatrix} 13.4 \\\\ -497.15 \\end{pmatrix}$.\n\nNext, we evaluate the tangent matrix $\\mathbf{K}_T(\\mathbf{u}^{(k)})$ at the same point:\n$$\nK_{T,11} = 1000 + 3(100)(0.5)^{2} + (20)(0.3)^{2} = 1000 + 75 + 1.8 = 1076.8\n$$\n$$\nK_{T,12} = K_{T,21} = 2(20)(0.5)(0.3) = 6\n$$\n$$\nK_{T,22} = 1000 + 3(50)(0.3)^{2} + (20)(0.5)^{2} = 1000 + 13.5 + 5 = 1018.5\n$$\nSo, $\\mathbf{K}_T(\\mathbf{u}^{(k)}) = \\begin{pmatrix} 1076.8 & 6 \\\\ 6 & 1018.5 \\end{pmatrix}$.\n\nNow we solve the linear system $\\mathbf{K}_T(\\mathbf{u}^{(k)}) \\Delta \\mathbf{u}^{(k)} = -\\mathbf{R}(\\mathbf{u}^{(k)})$:\n$$\n\\begin{pmatrix} 1076.8 & 6 \\\\ 6 & 1018.5 \\end{pmatrix} \\begin{pmatrix} \\Delta u_{1}^{(k)} \\\\ \\Delta u_{2}^{(k)} \\end{pmatrix} = -\\begin{pmatrix} 13.4 \\\\ -497.15 \\end{pmatrix} = \\begin{pmatrix} -13.4 \\\\ 497.15 \\end{pmatrix}\n$$\nTo solve this $2 \\times 2$ system, we can use matrix inversion. The inverse of a matrix $\\mathbf{A} = \\begin{pmatrix} a & b \\\\ c & d \\end{pmatrix}$ is $\\mathbf{A}^{-1} = \\frac{1}{\\det(\\mathbf{A})} \\begin{pmatrix} d & -b \\\\ -c & a \\end{pmatrix}$.\nThe determinant of $\\mathbf{K}_T$ is:\n$$\n\\det(\\mathbf{K}_T) = (1076.8)(1018.5) - (6)(6) = 1096756.8 - 36 = 1096720.8\n$$\nThe increment vector is then:\n$$\n\\Delta \\mathbf{u}^{(k)} = \\frac{1}{1096720.8} \\begin{pmatrix} 1018.5 & -6 \\\\ -6 & 1076.8 \\end{pmatrix} \\begin{pmatrix} -13.4 \\\\ 497.15 \\end{pmatrix}\n$$\nWe compute the components:\n$$\n\\Delta u_{1}^{(k)} = \\frac{ (1018.5)(-13.4) + (-6)(497.15) }{ 1096720.8 } = \\frac{ -13647.9 - 2982.9 }{ 1096720.8 } = \\frac{ -16630.8 }{ 1096720.8 } \\approx -0.0151642 \\, \\text{mm}\n$$\n$$\n\\Delta u_{2}^{(k)} = \\frac{ (-6)(-13.4) + (1076.8)(497.15) }{ 1096720.8 } = \\frac{ 80.4 + 535348.52 }{ 1096720.8 } = \\frac{ 535428.92 }{ 1096720.8 } \\approx 0.488214 \\, \\text{mm}\n$$\nRounding the results to four significant figures as requested:\n$$\n\\Delta u_{1}^{(k)} \\approx -0.01516 \\, \\text{mm}\n$$\n$$\n\\Delta u_{2}^{(k)} \\approx 0.4882 \\, \\text{mm}\n$$\nThe Newton increment vector is $\\Delta \\mathbf{u}^{(k)} \\approx \\begin{pmatrix} -0.01516 \\\\ 0.4882 \\end{pmatrix}$.", "answer": "$$\n\\boxed{\n\\begin{pmatrix} -0.01516 \\\\ 0.4882 \\end{pmatrix}\n}\n$$", "id": "2665001"}, {"introduction": "Analytical solutions are only feasible for the simplest models; practical engineering analysis relies on computational methods. This exercise bridges theory and practice by guiding you through the implementation of a complete incremental-iterative solver [@problem_id:2664930]. You will apply the Newton-Raphson algorithm over a series of load steps to trace the response of a hyperelastic rod, learning to track convergence via the residual norm and to implement essential safeguards like step damping to ensure a robust and physically meaningful solution.", "problem": "Consider a one-dimensional hyperelastic cantilever rod of undeformed length $L_0$ and uniform cross-sectional area $A$, clamped at $X=0$ and subjected to a concentrated end force at $X=L_0$. The rod is modeled as a one-dimensional hyperelastic body with a stored-energy density per reference volume given by $\\Psi(F)=\\dfrac{k}{2}\\left(F^2-1-2\\ln F\\right)$, where $F=1+\\dfrac{u}{L_0}$ is the axial deformation gradient and $u$ is the end displacement at $X=L_0$. The material parameter $k$ has units of pascals. The total potential energy is $\\Pi(u;\\lambda)=A L_0\\,\\Psi(F)-\\lambda\\,F_0^{\\mathrm{ext}}\\,u$, where $\\lambda$ is a scalar load factor multiplying a baseline end force $F_0^{\\mathrm{ext}}$ with units of newtons. Equilibrium follows from the stationarity condition $\\delta \\Pi=0$, which defines the scalar residual function $R(u;\\lambda)$ whose root $R(u;\\lambda)=0$ yields equilibrium at a given $\\lambda$.\n\nYou must implement the Newton–Raphson iterative scheme to solve the nonlinear equilibrium equation for two consecutive load steps in an incremental-iterative fashion. Start from the undeformed and unloaded state at step index $s=0$ with $u^{(0)}=0$ and $\\lambda^{(0)}=0$. For step $s=1$, advance the load factor by a prescribed increment $\\Delta\\lambda_1$ so that $\\lambda^{(1)}=\\lambda^{(0)}+\\Delta\\lambda_1$, and perform Newton–Raphson iterations on $u$ to solve $R(u;\\lambda^{(1)})=0$. Use the converged solution $u^{(1)}$ as the initial guess for the next step. For step $s=2$, advance to $\\lambda^{(2)}=\\lambda^{(1)}+\\Delta\\lambda_2$ and again perform Newton–Raphson iterations on $u$ to solve $R(u;\\lambda^{(2)})=0$. Record, for each step $s\\in\\{1,2\\}$, the sequence of Newton residual norms $\\{|R(u_k;\\lambda^{(s)})|\\}_{k=0,1,2,\\dots}$, where $u_k$ is the $k$-th Newton iterate within that load step. Terminate the Newton iterations in a given step when $|R(u_k;\\lambda^{(s)})|\\le \\varepsilon_R$ or when a maximum of $k_{\\max}$ iterations is reached. Use absolute convergence tolerance $\\varepsilon_R$ and declare nonconvergence if the tolerance is not met within $k_{\\max}$ iterations; in such a case, still report the residual sequence generated up to $k_{\\max}$.\n\nWithin this one-degree-of-freedom setting, the internal nominal force is $A\\,P(F)$, where $P(F)=\\dfrac{\\partial \\Psi}{\\partial F}$ is the first Piola–Kirchhoff stress in one dimension, and the external end force is $\\lambda\\,F_0^{\\mathrm{ext}}$. Thus the scalar residual is $R(u;\\lambda)=A\\,P(F)-\\lambda\\,F_0^{\\mathrm{ext}}$. The Newton update requires the consistent tangent $K(u)=\\dfrac{\\mathrm{d}R}{\\mathrm{d}u}$ obtained by linearizing $R(u;\\lambda)$ with respect to $u$ at fixed $\\lambda$.\n\nPhysical and numerical units and tolerances:\n- Use the International System of Units (SI) consistently. Express every residual value in newtons. All inputs are given in SI units: $L_0$ in meters, $A$ in square meters, $k$ in pascals, and $F_0^{\\mathrm{ext}}$ in newtons.\n- Use absolute residual tolerance $\\varepsilon_R=10^{-8}$ newtons and maximum Newton iterations $k_{\\max}=25$.\n- Use the initial guess $u_0=u^{(s-1)}$ at the start of load step $s$.\n\nTest suite specification:\nImplement your program to evaluate and report the Newton residual sequences for the following three parameter sets, each consisting of $(L_0,A,k,F_0^{\\mathrm{ext}},\\Delta\\lambda_1,\\Delta\\lambda_2)$:\n- Case $1$ (general case): $(L_0,A,k,F_0^{\\mathrm{ext}},\\Delta\\lambda_1,\\Delta\\lambda_2)=\\left(1.0,\\,1.0\\times 10^{-3},\\,2.0\\times 10^{6},\\,1500.0,\\,0.6,\\,0.4\\right)$.\n- Case $2$ (stronger loading): $(L_0,A,k,F_0^{\\mathrm{ext}},\\Delta\\lambda_1,\\Delta\\lambda_2)=\\left(0.5,\\,2.0\\times 10^{-3},\\,5.0\\times 10^{5},\\,8000.0,\\,0.5,\\,0.5\\right)$.\n- Case $3$ (boundary increment): $(L_0,A,k,F_0^{\\mathrm{ext}},\\Delta\\lambda_1,\\Delta\\lambda_2)=\\left(1.0,\\,1.0\\times 10^{-3},\\,1.0\\times 10^{6},\\,1000.0,\\,0.9,\\,0.0\\right)$.\n\nAlgorithmic requirements:\n- Derive $R(u;\\lambda)$ and $K(u)$ from the given stored-energy density and use them in a standard Newton–Raphson scheme to update $u$ via $u_{k+1}=u_k-\\dfrac{R(u_k;\\lambda)}{K(u_k)}$ at fixed $\\lambda$.\n- Guard against nonphysical deformation by rejecting any trial iterate that would produce $F\\le 0$; in such a case, damp the step by halving the Newton increment repeatedly until $F>0$ holds. If damping fails after $m$ successive halvings with $m=20$, stop and report the residual sequence accumulated so far.\n\nOutput requirements:\n- For each case, produce two lists corresponding to steps $s=1$ and $s=2$, each list containing the sequence of absolute residuals $|R|$ in newtons at iterations $k=0,1,2,\\dots$ until termination by the stated tolerance or by $k_{\\max}$.\n- Round every residual value to $6$ decimal places.\n- Your program should produce a single line of output containing the results as a comma-separated list of three elements, one per case, each element being a list of two residual sequences. For example, the overall output format must be exactly of the form $[\\,[\\,[r_{1,0},r_{1,1},\\dots],[r_{2,0},r_{2,1},\\dots]\\,],\\,[\\,[\\dots],[\\dots]\\,],\\,[\\,[\\dots],[\\dots]\\,]\\,]$, with no spaces inserted after commas and with all $r_{i,j}$ printed as decimal numbers in newtons. Ensure the single line contains only this bracketed structure and nothing else.", "solution": "The problem statement has been rigorously validated and is found to be scientifically grounded, well-posed, and internally consistent. It presents a standard problem in computational solid mechanics, specifically the application of an incremental-iterative Newton-Raphson scheme to a one-dimensional hyperelastic system. All necessary physical parameters, constitutive relations, numerical tolerances, and algorithmic constraints are provided, permitting a unique and verifiable solution. We may therefore proceed with the derivation and implementation.\n\nThe objective is to solve the nonlinear equilibrium equation for a hyperelastic rod subjected to an end force. The analysis is performed over two consecutive load steps. The core of the problem lies in implementing the Newton-Raphson method to find the end displacement $u$ that satisfies the equilibrium condition $R(u;\\lambda)=0$ at specified load levels $\\lambda$.\n\nFirst, we must derive the explicit forms of the residual function $R(u;\\lambda)$ and its corresponding tangent stiffness $K(u)$.\n\nThe stored-energy density function is given as:\n$$ \\Psi(F) = \\frac{k}{2}\\left(F^2 - 1 - 2\\ln F\\right) $$\nwhere $F$ is the deformation gradient. For this one-dimensional problem with end displacement $u$ and initial length $L_0$, $F$ is uniform throughout the rod and is given by:\n$$ F(u) = 1 + \\frac{u}{L_0} $$\nThe physical constraint of non-penetration requires $F > 0$, which implies $u > -L_0$.\n\nThe problem states that the scalar residual $R(u;\\lambda)$ arises from the stationarity of the total potential energy $\\Pi(u;\\lambda) = A L_0\\,\\Psi(F)-\\lambda\\,F_0^{\\mathrm{ext}}\\,u$. The stationarity condition is $\\frac{\\partial \\Pi}{\\partial u} = 0$.\nThe residual is thus the derivative of the potential energy with respect to the displacement $u$:\n$$ R(u;\\lambda) = \\frac{\\partial \\Pi}{\\partial u} = A L_0 \\frac{\\partial\\Psi}{\\partial F}\\frac{\\partial F}{\\partial u} - \\lambda F_0^{\\mathrm{ext}} $$\nThe derivative of $F$ with respect to $u$ is $\\frac{\\partial F}{\\partial u} = \\frac{1}{L_0}$.\nThe derivative of $\\Psi$ with respect to $F$ defines the one-dimensional first Piola-Kirchhoff stress, $P(F)$:\n$$ P(F) = \\frac{\\partial\\Psi}{\\partial F} = \\frac{k}{2}\\left(2F - \\frac{2}{F}\\right) = k\\left(F - \\frac{1}{F}\\right) $$\nSubstituting these into the expression for $R(u;\\lambda)$:\n$$ R(u;\\lambda) = A L_0 \\left(k\\left(F - \\frac{1}{F}\\right)\\right) \\frac{1}{L_0} - \\lambda F_0^{\\mathrm{ext}} $$\nThis simplifies to the final form of the residual function:\n$$ R(u;\\lambda) = A k\\left(F(u) - \\frac{1}{F(u)}\\right) - \\lambda F_0^{\\mathrm{ext}} $$\n\nNext, we derive the tangent stiffness $K(u)$, which is the linearization of the residual with respect to $u$ at a fixed load level $\\lambda$:\n$$ K(u) = \\frac{\\mathrm{d}R}{\\mathrm{d}u} = \\frac{\\mathrm{d}}{\\mathrm{d}u} \\left[ A k\\left(F(u) - \\frac{1}{F(u)}\\right) \\right] $$\nUsing the chain rule, $\\frac{\\mathrm{d}}{\\mathrm{d}u} = \\frac{\\mathrm{d}F}{\\mathrm{d}u}\\frac{\\mathrm{d}}{\\mathrm{d}F} = \\frac{1}{L_0}\\frac{\\mathrm{d}}{\\mathrm{d}F}$:\n$$ K(u) = \\frac{A k}{L_0} \\frac{\\mathrm{d}}{\\mathrm{d}F} \\left(F - \\frac{1}{F}\\right) = \\frac{A k}{L_0} \\left(1 + \\frac{1}{F^2}\\right) $$\nSubstituting the expression for $F(u)$:\n$$ K(u) = \\frac{A k}{L_0} \\left(1 + \\frac{1}{\\left(1 + u/L_0\\right)^2}\\right) $$\n\nThe Newton-Raphson iterative scheme for finding the root of $R(u;\\lambda)=0$ is defined by the update rule:\n$$ u_{k+1} = u_k - \\frac{R(u_k;\\lambda)}{K(u_k)} $$\nwhere $u_k$ is the displacement at iteration $k$.\n\nThe overall incremental-iterative procedure is as follows:\n1. Initialize at step $s=0$: $u^{(0)}=0$, $\\lambda^{(0)}=0$.\n2. For each load step $s = 1, 2, \\dots$:\n   a. Update the load factor: $\\lambda^{(s)} = \\lambda^{(s-1)} + \\Delta\\lambda_s$.\n   b. Set the initial guess for the displacement: $u_0 = u^{(s-1)}$, where $u^{(s-1)}$ is the converged solution from the previous step.\n   c. Start Newton-Raphson iterations for $k=0, 1, 2, \\dots, k_{\\max}$:\n      i. Calculate the current deformation gradient $F_k = 1 + u_k/L_0$.\n      ii. Calculate the residual $R_k = R(u_k; \\lambda^{(s)})$ and the tangent stiffness $K_k = K(u_k)$.\n      iii. Record the absolute residual norm $|R_k|$.\n      iv. Check for convergence: if $|R_k| \\le \\varepsilon_R$, the step has converged. Set $u^{(s)} = u_k$ and proceed to the next load step.\n      v. If $k=k_{\\max}$, terminate due to reaching the maximum number of iterations. Set $u^{(s)} = u_k$ and proceed.\n      vi. Calculate the displacement increment: $\\Delta u_k = -R_k / K_k$.\n      vii. Perform a line search (step damping) to ensure the trial state is physical. Initialize a damping factor $\\eta=1$. Check if the trial deformation gradient $F_{\\text{trial}} = 1 + (u_k + \\eta \\Delta u_k)/L_0$ is positive. If not, repeatedly halve $\\eta$ until $F_{\\text{trial}} > 0$. This must be achieved within a specified number of halvings, $m=20$. If it fails, the load step is terminated.\n      viii. Update the displacement: $u_{k+1} = u_k + \\eta \\Delta u_k$.\n\nThis complete algorithm is implemented for the provided test cases. The residual sequence for each of the two load steps per test case is collected and formatted as specified. All calculations are performed using the International System of Units (SI).", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the nonlinear equilibrium of a hyperelastic rod using a Newton-Raphson scheme\n    for multiple load steps and several test cases, as specified in the problem statement.\n    \"\"\"\n\n    def run_simulation_for_case(L0, A, k, F0_ext, d_lambda1, d_lambda2):\n        \"\"\"\n        Executes the incremental-iterative Newton-Raphson procedure for a single test case.\n        \n        Args:\n            L0 (float): Undeformed length of the rod (m).\n            A (float): Cross-sectional area (m^2).\n            k (float): Material parameter (Pa).\n            F0_ext (float): Baseline external force (N).\n            d_lambda1 (float): Load factor increment for step 1.\n            d_lambda2 (float): Load factor increment for step 2.\n\n        Returns:\n            list: A list containing two lists, where each inner list contains the\n                  sequence of residual norms for a load step.\n        \"\"\"\n        # Numerical parameters\n        epsilon_R = 1e-8\n        k_max = 25\n        max_halvings = 20\n\n        # Initial state (s=0)\n        u_converged = 0.0\n        lambda_current = 0.0\n\n        all_steps_residuals = []\n        d_lambdas = [d_lambda1, d_lambda2]\n        \n        L0_inv = 1.0 / L0\n\n        for s_idx, d_lambda in enumerate(d_lambdas):\n            # --- Step Initialization ---\n            lambda_current += d_lambda\n            u_k = u_converged  # Initial guess from previous step\n\n            step_residuals = []\n\n            # --- Newton-Raphson Iteration Loop ---\n            for k_iter in range(k_max + 1):\n                # Calculate F, a dimensionless quantity\n                F = 1.0 + u_k * L0_inv\n                \n                # Precautionary check (should be handled by damping)\n                if F <= 0:\n                    # This indicates a failure even before the update,\n                    # likely from a failed damping in the previous iteration.\n                    break\n\n                # Calculate Residual R (in Newtons) and Tangent K (in N/m)\n                # R = A*k*(F - 1/F) - lambda*F0_ext\n                # K = (A*k/L0)*(1 + 1/F^2)\n                \n                try:\n                    R = A * k * (F - 1.0 / F) - lambda_current * F0_ext\n                    K = (A * k * L0_inv) * (1.0 + 1.0 / (F * F))\n                except (ZeroDivisionError, OverflowError):\n                    # In case F is extremely close to 0, break iteration\n                    break\n                    \n                step_residuals.append(np.abs(R))\n\n                # Check for convergence\n                if np.abs(R) <= epsilon_R:\n                    u_converged = u_k\n                    break\n\n                # Check for maximum iteration count\n                if k_iter == k_max:\n                    u_converged = u_k\n                    break\n\n                # Calculate Newton increment\n                delta_u = -R / K\n\n                # --- Damping/Line Search to ensure F > 0 ---\n                damping_factor = 1.0\n                u_k_plus_1 = None\n                \n                for _ in range(max_halvings + 1):\n                    u_trial = u_k + damping_factor * delta_u\n                    F_trial = 1.0 + u_trial * L0_inv\n                    if F_trial > 0:\n                        u_k_plus_1 = u_trial\n                        break\n                    damping_factor /= 2.0\n                \n                if u_k_plus_1 is None:\n                    # Damping failed, stop this load step\n                    u_converged = u_k\n                    break\n                else:\n                    u_k = u_k_plus_1\n            \n            all_steps_residuals.append(step_residuals)\n\n        return all_steps_residuals\n\n    # Test suite specification from the problem statement\n    test_cases = [\n        # Case 1 (general case)\n        (1.0, 1.0e-3, 2.0e6, 1500.0, 0.6, 0.4),\n        # Case 2 (stronger loading)\n        (0.5, 2.0e-3, 5.0e5, 8000.0, 0.5, 0.5),\n        # Case 3 (boundary increment)\n        (1.0, 1.0e-3, 1.0e6, 1000.0, 0.9, 0.0),\n    ]\n\n    all_results = []\n    for case_params in test_cases:\n        case_result = run_simulation_for_case(*case_params)\n        \n        # Format the output for the current case\n        formatted_case__results = []\n        for step_res in case_result:\n            # Round each residual to 6 decimal places and format as a string\n            formatted_step_res = [f\"{r:.6f}\" for r in step_res]\n            # Join numbers into a string like \"[r1,r2,...]\"\n            formatted_case__results.append(f\"[{','.join(formatted_step_res)}]\")\n        \n        # Join the two step strings into \"[ [res1], [res2] ]\"\n        all_results.append(f\"[{','.join(formatted_case__results)}]\")\n\n    # Final print statement in the exact required format\n    # Produces a single line string like \"[ case1_str, case2_str, ... ]\"\n    print(f\"[{','.join(all_results)}]\")\n\nsolve()\n```", "id": "2664930"}]}