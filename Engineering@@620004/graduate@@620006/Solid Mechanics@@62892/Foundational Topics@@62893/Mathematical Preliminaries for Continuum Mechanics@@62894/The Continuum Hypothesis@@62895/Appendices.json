{"hands_on_practices": [{"introduction": "The continuum hypothesis posits that matter can be modeled as a continuous medium, but how do we bridge the gap from a discrete, atomistic reality to this smooth idealization? This practice provides a direct, computational experience of this process, known as coarse-graining. By convolving discrete particle data with a smoothing kernel, you will construct continuum fields for density and momentum, and quantitatively explore how the smoothness of these fields depends on the chosen averaging scale, $\\eta$ [@problem_id:2922844].", "problem": "You are given a discrete set of point particles in a two-dimensional domain consistent with the continuum hypothesis of materials mechanics: a macroscopic field is obtained as a coarse-grained average of microscopic constituents via a smoothing kernel. Starting from fundamental conservation principles and definitions, you must construct the coarse-grained mass density field and linear momentum density field on a uniform grid by convolving the discrete particle data with a normalized Gaussian kernel of width parameter $\\eta$, and then quantify the smoothness of these fields as $\\eta$ varies.\n\nDefinitions and modeling assumptions:\n- The spatial domain is the unit square $\\Omega = [0,1]\\times[0,1]$, treated as nondimensional, so that all quantities are dimensionless.\n- The coarse-grained mass density field at location $\\mathbf{x}\\in \\Omega$ for kernel width $\\eta>0$ is defined by\n$$\n\\rho_{\\eta}(\\mathbf{x}) \\equiv \\sum_{p=1}^{P} m_p \\, W_{\\eta}(\\mathbf{x}-\\mathbf{x}_p),\n$$\nwhere $m_p$ and $\\mathbf{x}_p$ are the mass and position of particle $p$, and $W_{\\eta}$ is a normalized Gaussian kernel in two spatial dimensions,\n$$\nW_{\\eta}(\\mathbf{r}) \\equiv \\frac{1}{2\\pi \\eta^2}\\,\\exp\\!\\left(-\\frac{\\|\\mathbf{r}\\|^2}{2\\eta^2}\\right).\n$$\n- The coarse-grained linear momentum density field is defined by\n$$\n\\mathbf{g}_{\\eta}(\\mathbf{x}) \\equiv \\sum_{p=1}^{P} m_p \\,\\mathbf{v}_p \\, W_{\\eta}(\\mathbf{x}-\\mathbf{x}_p),\n$$\nwhere $\\mathbf{v}_p$ is the particle velocity. Note that $\\mathbf{g}_{\\eta}$ is a vector field with two components in the plane.\n\nDiscretization to make the computation explicit, testable, and reproducible:\n- Use a uniform Cartesian grid with $N$ points in each direction over $\\Omega$, with coordinates $x_i = i\\,h$ and $y_j = j\\,h$ for $i,j\\in\\{0,1,\\dots,N-1\\}$, where $h\\equiv 1/(N-1)$.\n- Evaluate $\\rho_{\\eta}$ and $\\mathbf{g}_{\\eta}$ on all grid nodes $(x_i,y_j)$ by direct summation over particles using the stated $W_{\\eta}$.\n- Define a discrete roughness (smoothness inverse) for a scalar grid field $f$ by the dimensionally consistent, normalized discrete Dirichlet-to-energy ratio\n$$\n\\mathcal{R}[f] \\equiv \\frac{\\sqrt{\\sum_{i=0}^{N-2}\\sum_{j=0}^{N-1}\\left(\\frac{f_{i+1,j}-f_{i,j}}{h}\\right)^2 h^2 \\;+\\; \\sum_{i=0}^{N-1}\\sum_{j=0}^{N-2}\\left(\\frac{f_{i,j+1}-f_{i,j}}{h}\\right)^2 h^2}}{\\sqrt{\\sum_{i=0}^{N-1}\\sum_{j=0}^{N-1} f_{i,j}^2 \\, h^2}}.\n$$\n- Define the roughness of the vector field $\\mathbf{g}_{\\eta}=(g^{(x)}_{\\eta},g^{(y)}_{\\eta})$ by\n$$\n\\mathcal{R}[\\mathbf{g}_{\\eta}] \\equiv \\frac{\\sqrt{\\sum_{i,j}\\left(\\left\\|\\nabla_h g^{(x)}_{\\eta}\\right\\|^2 + \\left\\|\\nabla_h g^{(y)}_{\\eta}\\right\\|^2\\right) h^2}}{\\sqrt{\\sum_{i,j}\\left(\\left(g^{(x)}_{\\eta}\\right)^2 + \\left(g^{(y)}_{\\eta}\\right)^2\\right) h^2}},\n$$\nwhere $\\|\\nabla_h f\\|^2$ is approximated by the same forward-difference stencil as in $\\mathcal{R}[f]$, using sums over $i\\in\\{0,\\dots,N-2\\}$ and $j\\in\\{0,\\dots,N-1\\}$ for $x$-differences and $i\\in\\{0,\\dots,N-1\\}$ and $j\\in\\{0,\\dots,N-2\\}$ for $y$-differences.\n\nData for reproducible testing:\n- Grid resolution: $N=81$ so that $h=1/(81-1)$.\n- Number of particles: $P=6$, with the following properties:\n  - Particle $1$: position $(0.20,\\,0.20)$, mass $0.50$, velocity $(0.80,\\,0.10)$.\n  - Particle $2$: position $(0.80,\\,0.20)$, mass $0.30$, velocity $(-0.20,\\,0.50)$.\n  - Particle $3$: position $(0.50,\\,0.50)$, mass $0.70$, velocity $(0.00,\\,-0.60)$.\n  - Particle $4$: position $(0.10,\\,0.90)$, mass $0.40$, velocity $(0.30,\\,0.30)$.\n  - Particle $5$: position $(0.90,\\,0.90)$, mass $0.60$, velocity $(-0.40,\\,0.20)$.\n  - Particle $6$: position $(0.05,\\,0.05)$, mass $0.20$, velocity $(0.00,\\,0.00)$.\n- Kernel widths (test suite): $\\eta\\in\\{0.02,\\;0.05,\\;0.10,\\;0.25\\}$.\n\nTasks:\n- Starting solely from the above definitions and the continuum hypothesis, compute for each kernel width $\\eta$ the discrete fields $\\rho_{\\eta}$ and $\\mathbf{g}_{\\eta}$ on the grid, then compute the two roughness measures $\\mathcal{R}[\\rho_{\\eta}]$ and $\\mathcal{R}[\\mathbf{g}_{\\eta}]$.\n- Investigate how $\\eta$ affects smoothness by reporting the pair $\\left(\\mathcal{R}[\\rho_{\\eta}],\\,\\mathcal{R}[\\mathbf{g}_{\\eta}]\\right)$ for each $\\eta$ in the specified test suite.\n\nAnswer specification and output format:\n- For each $\\eta$ in the order $\\eta=0.02$, then $\\eta=0.05$, then $\\eta=0.10$, then $\\eta=0.25$, compute the two scalars $\\mathcal{R}[\\rho_{\\eta}]$ and $\\mathcal{R}[\\mathbf{g}_{\\eta}]$.\n- Round each scalar to $6$ decimal places using standard rounding.\n- Your program should produce a single line of output containing a comma-separated list enclosed in square brackets with the results flattened in the order\n$$\n\\left[\\mathcal{R}[\\rho_{0.02}],\\;\\mathcal{R}[\\mathbf{g}_{0.02}],\\;\\mathcal{R}[\\rho_{0.05}],\\;\\mathcal{R}[\\mathbf{g}_{0.05}],\\;\\mathcal{R}[\\rho_{0.10}],\\;\\mathcal{R}[\\mathbf{g}_{0.10}],\\;\\mathcal{R}[\\rho_{0.25}],\\;\\mathcal{R}[\\mathbf{g}_{0.25}]\\right].\n$$\n- The output must be exactly one line with no extra text, for example, in the form $\\left[r_1,r_2,r_3,r_4,r_5,r_6,r_7,r_8\\right]$, where each $r_k$ is a float rounded to $6$ decimals.\n\nYour final answer must be a complete, runnable program that performs these steps and prints the required single-line output.", "solution": "The problem statement is subjected to validation and is found to be valid. It is a well-posed computational problem grounded in the principles of continuum mechanics, specifically the coarse-graining procedure that links a discrete particle description to a continuous field description. All definitions, data, and required computations are specified without ambiguity or contradiction.\n\nThe task is to compute coarse-grained fields for mass density and linear momentum density from a set of discrete particles and then to quantify the smoothness of these fields. The procedure is as follows:\n\n1.  **Discretize the Domain**: The continuous domain $\\Omega = [0,1]\\times[0,1]$ is discretized into a uniform Cartesian grid of $N \\times N$ points, where $N=81$. The grid points are $\\mathbf{x}_{ij} = (i h, j h)$ for $i,j \\in \\{0, 1, \\dots, N-1\\}$, with spacing $h=1/(N-1)$.\n\n2.  **Construct Continuous Fields**: For a given kernel width $\\eta$, the mass density field $\\rho_{\\eta}$ and linear momentum density field $\\mathbf{g}_{\\eta}$ are constructed at each grid point $\\mathbf{x}_{ij}$. These fields are superpositions of the contributions from each of the $P=6$ particles, weighted by a normalized two-dimensional Gaussian kernel $W_{\\eta}$.\n    The mass density, a scalar field, is given by:\n    $$\n    \\rho_{\\eta}(\\mathbf{x}_{ij}) = \\sum_{p=1}^{P} m_p \\, W_{\\eta}(\\mathbf{x}_{ij}-\\mathbf{x}_p)\n    $$\n    The linear momentum density, a vector field $\\mathbf{g}_{\\eta} = (g^{(x)}_{\\eta}, g^{(y)}_{\\eta})$, is given by:\n    $$\n    \\mathbf{g}_{\\eta}(\\mathbf{x}_{ij}) = \\sum_{p=1}^{P} m_p \\,\\mathbf{v}_p \\, W_{\\eta}(\\mathbf{x}_{ij}-\\mathbf{x}_p)\n    $$\n    The kernel function is defined as:\n    $$\n    W_{\\eta}(\\mathbf{r}) = \\frac{1}{2\\pi \\eta^2}\\,\\exp\\!\\left(-\\frac{\\|\\mathbf{r}\\|^2}{2\\eta^2}\\right)\n    $$\n    where $\\mathbf{r} = \\mathbf{x}_{ij} - \\mathbf{x}_p$ is the vector from particle $p$ to grid point $(i,j)$.\n\n3.  **Quantify Field Smoothness**: The smoothness of the computed fields is quantified by a discrete roughness measure $\\mathcal{R}$. This measure is a normalized ratio. The numerator is a discrete approximation of the $L^2$-norm of the field's gradient, which represents the total variation or \"energy\" of the field's spatial changes. The denominator is the discrete $L^2$-norm of the field itself, which provides normalization.\n    For a scalar field $f$ on the grid, its roughness is:\n    $$\n    \\mathcal{R}[f] = \\frac{\\sqrt{\\sum_{i,j} \\|\\nabla_h f_{ij}\\|^2 h^2}}{\\sqrt{\\sum_{i,j} f_{ij}^2 h^2}} = \\frac{\\sqrt{ \\sum_{i=0}^{N-2}\\sum_{j=0}^{N-1} (f_{i+1,j}-f_{i,j})^2 + \\sum_{i=0}^{N-1}\\sum_{j=0}^{N-2} (f_{i,j+1}-f_{i,j})^2 }}{h \\sqrt{\\sum_{i=0}^{N-1}\\sum_{j=0}^{N-1} f_{i,j}^2}}\n    $$\n    The term $\\|\\nabla_h f_{ij}\\|^2 h^2$ is evaluated using forward differences for the gradient components, as defined in the problem statement.\n    For the vector field $\\mathbf{g}_{\\eta} = (g^{(x)}_{\\eta}, g^{(y)}_{\\eta})$, the roughness generalizes this concept: the numerator combines the gradient energies of both components, and the denominator is the vector field's $L^2$-norm.\n    $$\n    \\mathcal{R}[\\mathbf{g}_{\\eta}] = \\frac{\\sqrt{ \\left(\\text{NumSq}[g^{(x)}_{\\eta}]\\right) + \\left(\\text{NumSq}[g^{(y)}_{\\eta}]\\right) }}{h \\sqrt{\\sum_{i,j} \\left( (g^{(x)}_{\\eta,ij})^2 + (g^{(y)}_{\\eta,ij})^2\\right)}}\n    $$\n    where $\\text{NumSq}[f]$ represents the squared numerator term from the scalar roughness calculation.\n\nThis entire procedure is implemented for each specified kernel width $\\eta \\in \\{0.02, 0.05, 0.10, 0.25\\}$. As $\\eta$ increases, the Gaussian kernel becomes wider, resulting in greater overlap and smoother macroscopic fields. Consequently, the roughness measures $\\mathcal{R}[\\rho_{\\eta}]$ and $\\mathcal{R}[\\mathbf{g}_{\\eta}]$ are expected to decrease, confirming the smoothing effect of the coarse-graining process. The final results are rounded and formatted as requested.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes coarse-grained mass and momentum density fields from discrete particle data\n    and calculates their roughness for various Gaussian kernel widths.\n    \"\"\"\n    # Define the test cases and parameters from the problem statement.\n    test_cases = [\n        # Particle data: [pos_x, pos_y, mass, vel_x, vel_y]\n        (np.array([\n            [0.20, 0.20, 0.50,  0.80,  0.10],\n            [0.80, 0.20, 0.30, -0.20,  0.50],\n            [0.50, 0.50, 0.70,  0.00, -0.60],\n            [0.10, 0.90, 0.40,  0.30,  0.30],\n            [0.90, 0.90, 0.60, -0.40,  0.20],\n            [0.05, 0.05, 0.20,  0.00,  0.00],\n        ]),\n        [0.02, 0.05, 0.10, 0.25])\n    ]\n\n    N = 81\n    h = 1.0 / (N - 1)\n    \n    # Generate grid coordinates\n    grid_coords = np.linspace(0, 1, N)\n    xx, yy = np.meshgrid(grid_coords, grid_coords)\n\n    results = []\n\n    for particles, eta_values in test_cases:\n        for eta in eta_values:\n            # Initialize fields for the current eta\n            rho = np.zeros((N, N))\n            g_x = np.zeros((N, N))\n            g_y = np.zeros((N, N))\n            \n            eta_sq = eta**2\n            kernel_norm = 1.0 / (2.0 * np.pi * eta_sq)\n            \n            # Sum contributions from all particles to construct the fields\n            for p_data in particles:\n                pos_x, pos_y, mass, vel_x, vel_y = p_data\n                \n                # Calculate squared distance from particle to all grid points\n                dist_sq = (xx - pos_x)**2 + (yy - pos_y)**2\n                \n                # Evaluate the Gaussian kernel over the grid\n                W = kernel_norm * np.exp(-dist_sq / (2.0 * eta_sq))\n                \n                # Accumulate weighted contributions to fields\n                rho += mass * W\n                g_x += mass * vel_x * W\n                g_y += mass * vel_y * W\n\n            # --- Calculate roughness for the scalar field rho ---\n            # Numerator: sqrt of sum of squared differences\n            diff_rho_x = rho[1:, :] - rho[:-1, :]\n            diff_rho_y = rho[:, 1:] - rho[:, :-1]\n            num_rho_sq = np.sum(diff_rho_x**2) + np.sum(diff_rho_y**2)\n            \n            # Denominator: h * sqrt of sum of squared field values\n            den_rho_sq_sum = np.sum(rho**2)\n            \n            if num_rho_sq == 0 or den_rho_sq_sum == 0:\n                R_rho = 0.0\n            else:\n                R_rho = np.sqrt(num_rho_sq) / (h * np.sqrt(den_rho_sq_sum))\n\n            # --- Calculate roughness for the vector field g ---\n            # Numerator: sqrt of the sum of squared gradient energies for each component\n            diff_gx_x = g_x[1:, :] - g_x[:-1, :]\n            diff_gx_y = g_x[:, 1:] - g_x[:, :-1]\n            num_gx_sq = np.sum(diff_gx_x**2) + np.sum(diff_gx_y**2)\n            \n            diff_gy_x = g_y[1:, :] - g_y[:-1, :]\n            diff_gy_y = g_y[:, 1:] - g_y[:, :-1]\n            num_gy_sq = np.sum(diff_gy_x**2) + np.sum(diff_gy_y**2)\n\n            num_g_sq = num_gx_sq + num_gy_sq\n\n            # Denominator: h * sqrt of sum of squared vector magnitudes\n            den_g_sq_sum = np.sum(g_x**2 + g_y**2)\n\n            if num_g_sq == 0 or den_g_sq_sum == 0:\n                R_g = 0.0\n            else:\n                 R_g = np.sqrt(num_g_sq) / (h * np.sqrt(den_g_sq_sum))\n\n            # Append rounded results to the list\n            results.append(round(R_rho, 6))\n            results.append(round(R_g, 6))\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2922844"}, {"introduction": "A major advantage of the continuum model is the ability to define powerful field quantities, like the Cauchy stress tensor, which describes the state of internal forces at a point. This exercise demonstrates the predictive power of this concept, a cornerstone of solid mechanics. You will derive the fundamental relationship between the stress tensor $\\boldsymbol{\\sigma}$ and the traction vector $\\boldsymbol{t}$ on an arbitrary surface and then apply it to calculate the normal and shear forces acting on a specific plane within a stressed body [@problem_id:2695067].", "problem": "A small neighborhood of a point $P$ in a homogeneous elastic solid is modeled under the continuum hypothesis, so that stresses and tractions are well-defined at $P$ as field quantities. Starting from balance of linear and angular momentum applied to an infinitesimal tetrahedron surrounding $P$ and the definition of stress as the linear functional mapping oriented area vectors to forces, derive the expression for the traction vector acting on a plane with unit normal $\\boldsymbol{n}$ in terms of the Cauchy stress tensor at $P$. Then, for the specific state described below, compute the traction vector, and decompose it uniquely into normal and shear components relative to the plane. Finally, report the magnitude of the shear traction.\n\nAt $P$, in a Cartesian basis $\\{\\boldsymbol{e}_{1},\\boldsymbol{e}_{2},\\boldsymbol{e}_{3}\\}$, the Cauchy stress tensor is\n$$\n\\boldsymbol{\\sigma}=\\begin{pmatrix}\n120 & 30 & -20\\\\\n30 & 80 & 25\\\\\n-20 & 25 & 60\n\\end{pmatrix}\n$$\nin megapascal (MPa). Consider the plane with unit normal\n$$\n\\boldsymbol{n}=\\frac{1}{3}\\begin{pmatrix}2\\\\-1\\\\2\\end{pmatrix}.\n$$\n\nCarry out the derivation and calculations symbolically as far as possible, then evaluate numerically. State explicitly the traction vector $\\boldsymbol{t}$, the normal traction component (as a scalar) $t_{n}$, and the shear traction vector $\\boldsymbol{s}$ on the plane. As the final reported quantity, provide the magnitude of the shear traction $\\tau=\\|\\boldsymbol{s}\\|$ in megapascal, rounded to four significant figures. Do not include units in your final boxed answer.", "solution": "The problem statement is scientifically grounded, well-posed, and objective. It is a standard problem in continuum mechanics that is self-contained and free of contradictions. The provided stress tensor is symmetric, which is required by the balance of angular momentum in the absence of body couples, a standard assumption in the field. The provided normal vector is indeed a unit vector. Therefore, I will proceed with the solution.\n\nThe problem requires first a derivation of Cauchy's stress theorem, then its application to a specific case.\n\nPart 1: Derivation of the Traction Vector Formula\nWe begin by considering an infinitesimal tetrahedron at point $P$, with three faces aligned with the coordinate planes and one oblique face. Let the unit normal vector to the oblique face be $\\boldsymbol{n} = n_1 \\boldsymbol{e}_1 + n_2 \\boldsymbol{e}_2 + n_3 \\boldsymbol{e}_3$, and its area be $dA$. The three other faces have areas $dA_1 = n_1 dA$, $dA_2 = n_2 dA$, and $dA_3 = n_3 dA$, and their respective outward-pointing normals are $-\\boldsymbol{e}_1, -\\boldsymbol{e}_2, -\\boldsymbol{e}_3$.\n\nLet $\\boldsymbol{t}(\\boldsymbol{u})$ denote the traction vector on a surface with unit normal $\\boldsymbol{u}$. The traction vector represents force per unit area. The total surface force on the tetrahedron is the sum of forces on each of its four faces. Applying the balance of linear momentum (Newton's second law) to the tetrahedron, we have:\n$$ \\sum \\boldsymbol{F} = \\boldsymbol{t}(\\boldsymbol{n}) dA + \\boldsymbol{t}(-\\boldsymbol{e}_1) dA_1 + \\boldsymbol{t}(-\\boldsymbol{e}_2) dA_2 + \\boldsymbol{t}(-\\boldsymbol{e}_3) dA_3 + \\boldsymbol{b} V = \\rho V \\boldsymbol{a} $$\nwhere $\\boldsymbol{b}$ is the body force per unit volume, $\\rho$ is the mass density, $\\boldsymbol{a}$ is the acceleration, and $V$ is the volume of the tetrahedron.\nStress is defined as a linear mapping from the normal vector to the traction vector, so $\\boldsymbol{t}(-\\boldsymbol{u}) = -\\boldsymbol{t}(\\boldsymbol{u})$. Substituting this and $dA_i = n_i dA$ into the momentum balance equation gives:\n$$ \\boldsymbol{t}(\\boldsymbol{n}) dA - \\sum_{i=1}^{3} \\boldsymbol{t}(\\boldsymbol{e}_i) n_i dA + (\\boldsymbol{b} - \\rho \\boldsymbol{a}) V = 0 $$\nLet $h$ be a characteristic length of the tetrahedron (e.g., its height from the origin to the oblique face). The volume scales as $V \\sim h \\cdot dA$. Dividing the entire equation by $dA$ yields:\n$$ \\boldsymbol{t}(\\boldsymbol{n}) - \\sum_{i=1}^{3} \\boldsymbol{t}(\\boldsymbol{e}_i) n_i + (\\boldsymbol{b} - \\rho \\boldsymbol{a}) \\frac{V}{dA} = 0 $$\nTo find the relationship at the point $P$, we shrink the tetrahedron by taking the limit as $h \\to 0$. In this limit, the term $\\frac{V}{dA} \\to 0$, causing the body force and inertial terms to vanish. This leaves Cauchy's lemma:\n$$ \\boldsymbol{t}(\\boldsymbol{n}) = \\sum_{i=1}^{3} n_i \\boldsymbol{t}(\\boldsymbol{e}_i) $$\nThe Cauchy stress tensor, denoted by $\\boldsymbol{\\sigma}$, is defined such that its components $\\sigma_{ij}$ relate the components of the normal vector to the components of the traction vector. Specifically, the traction vector on a surface with normal $\\boldsymbol{e}_i$ is given by $\\boldsymbol{t}(\\boldsymbol{e}_i) = \\sum_{j=1}^{3} \\sigma_{ij} \\boldsymbol{e}_j$. Substituting this into Cauchy's lemma:\n$$ \\boldsymbol{t}(\\boldsymbol{n}) = \\sum_{i=1}^{3} n_i \\left( \\sum_{j=1}^{3} \\sigma_{ij} \\boldsymbol{e}_j \\right) = \\sum_{j=1}^{3} \\left( \\sum_{i=1}^{3} \\sigma_{ij} n_i \\right) \\boldsymbol{e}_j $$\nThe $j$-th component of the traction vector $\\boldsymbol{t}(\\boldsymbol{n})$ is thus $t_j = \\sum_{i=1}^{3} \\sigma_{ij} n_i$. In matrix notation, this is expressed as $\\boldsymbol{t} = \\boldsymbol{\\sigma}^T \\boldsymbol{n}$.\nFurthermore, the balance of angular momentum, when applied to an infinitesimal element, requires the stress tensor to be symmetric ($\\sigma_{ij} = \\sigma_{ji}$, or $\\boldsymbol{\\sigma} = \\boldsymbol{\\sigma}^T$) in the absence of body couples. The problem provides a symmetric tensor, consistent with this principle. Therefore, the relationship simplifies to Cauchy's stress theorem:\n$$ \\boldsymbol{t} = \\boldsymbol{\\sigma} \\boldsymbol{n} $$\nThis concludes the derivation.\n\nPart 2: Calculation of Traction and its Decomposition\nThe given stress tensor and normal vector are:\n$$ \\boldsymbol{\\sigma}=\\begin{pmatrix} 120 & 30 & -20\\\\ 30 & 80 & 25\\\\ -20 & 25 & 60 \\end{pmatrix} \\text{MPa}, \\quad \\boldsymbol{n}=\\frac{1}{3}\\begin{pmatrix} 2\\\\ -1\\\\ 2 \\end{pmatrix} $$\nFirst, we calculate the traction vector $\\boldsymbol{t}$ using the derived formula $\\boldsymbol{t} = \\boldsymbol{\\sigma} \\boldsymbol{n}$:\n$$ \\boldsymbol{t} = \\frac{1}{3} \\begin{pmatrix} 120 & 30 & -20\\\\ 30 & 80 & 25\\\\ -20 & 25 & 60 \\end{pmatrix} \\begin{pmatrix} 2\\\\ -1\\\\ 2 \\end{pmatrix} = \\frac{1}{3} \\begin{pmatrix} (120)(2) + (30)(-1) + (-20)(2) \\\\ (30)(2) + (80)(-1) + (25)(2) \\\\ (-20)(2) + (25)(-1) + (60)(2) \\end{pmatrix} $$\n$$ \\boldsymbol{t} = \\frac{1}{3} \\begin{pmatrix} 240 - 30 - 40 \\\\ 60 - 80 + 50 \\\\ -40 - 25 + 120 \\end{pmatrix} = \\frac{1}{3} \\begin{pmatrix} 170 \\\\ 30 \\\\ 55 \\end{pmatrix} = \\begin{pmatrix} 170/3 \\\\ 10 \\\\ 55/3 \\end{pmatrix} \\text{MPa} $$\nNext, we decompose the traction vector $\\boldsymbol{t}$ into its normal component $t_n$ (a scalar projection onto $\\boldsymbol{n}$) and its shear component $\\boldsymbol{s}$ (a vector orthogonal to $\\boldsymbol{n}$).\nThe normal traction component is given by the dot product $t_n = \\boldsymbol{t} \\cdot \\boldsymbol{n}$:\n$$ t_n = \\left(\\frac{1}{3} \\begin{pmatrix} 170 \\\\ 30 \\\\ 55 \\end{pmatrix}\\right) \\cdot \\left(\\frac{1}{3} \\begin{pmatrix} 2 \\\\ -1 \\\\ 2 \\end{pmatrix}\\right) = \\frac{1}{9} ( (170)(2) + (30)(-1) + (55)(2) ) $$\n$$ t_n = \\frac{1}{9} (340 - 30 + 110) = \\frac{420}{9} = \\frac{140}{3} \\text{ MPa} $$\nThe shear traction vector $\\boldsymbol{s}$ is the component of $\\boldsymbol{t}$ perpendicular to $\\boldsymbol{n}$, found by $\\boldsymbol{s} = \\boldsymbol{t} - t_n \\boldsymbol{n}$:\n$$ \\boldsymbol{s} = \\frac{1}{3} \\begin{pmatrix} 170 \\\\ 30 \\\\ 55 \\end{pmatrix} - \\frac{140}{3} \\left(\\frac{1}{3} \\begin{pmatrix} 2 \\\\ -1 \\\\ 2 \\end{pmatrix}\\right) = \\frac{1}{9} \\left( 3 \\begin{pmatrix} 170 \\\\ 30 \\\\ 55 \\end{pmatrix} - 140 \\begin{pmatrix} 2 \\\\ -1 \\\\ 2 \\end{pmatrix} \\right) $$\n$$ \\boldsymbol{s} = \\frac{1}{9} \\left( \\begin{pmatrix} 510 \\\\ 90 \\\\ 165 \\end{pmatrix} - \\begin{pmatrix} 280 \\\\ -140 \\\\ 280 \\end{pmatrix} \\right) = \\frac{1}{9} \\begin{pmatrix} 230 \\\\ 230 \\\\ -115 \\end{pmatrix} \\text{MPa} $$\nFinally, we compute the magnitude of the shear traction, $\\tau = \\|\\boldsymbol{s}\\|$.\n$$ \\tau = \\left\\| \\frac{1}{9} \\begin{pmatrix} 230 \\\\ 230 \\\\ -115 \\end{pmatrix} \\right\\| = \\frac{1}{9} \\sqrt{230^2 + 230^2 + (-115)^2} $$\n$$ \\tau = \\frac{115}{9} \\sqrt{2^2 + 2^2 + (-1)^2} = \\frac{115}{9} \\sqrt{4+4+1} = \\frac{115}{9} \\sqrt{9} = \\frac{115 \\times 3}{9} = \\frac{115}{3} \\text{ MPa} $$\nAs a numerical value, $\\tau = \\frac{115}{3} \\approx 38.3333...$ MPa. Rounding to four significant figures gives $38.33$.\nThus, the requested quantities are:\n- Traction vector: $\\boldsymbol{t} = \\begin{pmatrix} 170/3 \\\\ 10 \\\\ 55/3 \\end{pmatrix}$ MPa.\n- Normal traction: $t_n = \\frac{140}{3}$ MPa.\n- Shear traction vector: $\\boldsymbol{s} = \\frac{1}{9} \\begin{pmatrix} 230 \\\\ 230 \\\\ -115 \\end{pmatrix}$ MPa.\n- Magnitude of shear traction: $\\tau = \\frac{115}{3}$ MPa.\n\nThe final answer required is the numerical value of $\\tau$ rounded to four significant figures.", "answer": "$$\\boxed{38.33}$$", "id": "2695067"}, {"introduction": "Every powerful assumption has its limits, and the continuum hypothesis is no exception. This practice explores the breakdown of a key continuum principle—the no-slip boundary condition—in the context of rarefied gas dynamics, where the molecular mean free path $\\lambda$ is no longer negligible compared to the system's characteristic length $h$. By deriving the flow profile with a modified \"slip\" boundary condition, you will quantify the deviation from classical theory and gain insight into the conditions under which continuum models must be corrected or abandoned [@problem_id:1798395].", "problem": "In macroscopic fluid dynamics, the no-slip boundary condition, which assumes the fluid velocity is zero at a stationary solid surface, is a foundational principle. However, in micro- and nano-scale systems, where the characteristic length of the flow domain becomes comparable to the mean free path of the fluid molecules, this assumption breaks down. This regime is often described by rarefied gas dynamics.\n\nConsider the steady, pressure-driven flow of a gas between two large, stationary, parallel plates located at $y = -h$ and $y = +h$. The flow is driven by a constant pressure gradient along the x-axis, $-\\frac{dp}{dx} = P$, where $P$ is a positive constant. The gas has a constant dynamic viscosity $\\mu$ and a constant density $\\rho$.\n\nIn this rarefied regime, the velocity of the gas at the wall, known as the slip velocity, is non-zero. A first-order model for this phenomenon, known as the Maxwell slip condition, relates the fluid velocity at the wall to the velocity gradient at the wall. For this specific geometry, the boundary conditions for the fluid velocity in the x-direction, $u_x(y)$, are given by:\n- At the top wall ($y=+h$): $u_x(+h) = -\\beta \\lambda \\left(\\frac{du_x}{dy}\\right)_{y=+h}$\n- At the bottom wall ($y=-h$): $u_x(-h) = +\\beta \\lambda \\left(\\frac{du_x}{dy}\\right)_{y=-h}$\n\nHere, $\\lambda$ is the mean free path of the gas molecules, and $\\beta$ is a dimensionless constant known as the tangential momentum accommodation coefficient, which depends on the specific gas-surface interaction. You may assume the flow is laminar and fully developed, such that the Navier-Stokes equations simplify to $\\mu \\frac{d^2u_x}{dy^2} = \\frac{dp}{dx}$.\n\nYour task is to determine the quantitative effect of this velocity slip on the overall transport. Derive an expression for the ratio of the total mass flow rate per unit width in the x-direction for this slip-flow case to the mass flow rate per unit width that would be predicted by the classical no-slip condition (which corresponds to setting $\\lambda = 0$).\n\nExpress your final answer as a single closed-form analytic expression in terms of $\\beta$, $\\lambda$, and $h$.", "solution": "We consider steady, fully developed plane Poiseuille flow, for which the $x$-momentum equation reduces to\n$$\n\\mu \\frac{d^{2} u_{x}}{dy^{2}} = \\frac{dp}{dx}.\n$$\nWith $-\\frac{dp}{dx} = P$ (with $P>0$), it follows that\n$$\n\\frac{d^{2} u_{x}}{dy^{2}} = -\\frac{P}{\\mu}.\n$$\nIntegrating twice gives\n$$\n\\frac{du_{x}}{dy} = -\\frac{P}{\\mu} y + C_{1}, \\quad u_{x}(y) = -\\frac{P}{2\\mu} y^{2} + C_{1} y + C_{2},\n$$\nwhere $C_{1}$ and $C_{2}$ are constants to be determined from the slip boundary conditions:\n$$\nu_{x}(+h) = -\\beta \\lambda \\left(\\frac{du_{x}}{dy}\\right)_{y=+h}, \\quad u_{x}(-h) = +\\beta \\lambda \\left(\\frac{du_{x}}{dy}\\right)_{y=-h}.\n$$\nEvaluating at $y=\\pm h$:\n$$\nu_{x}(+h) = -\\frac{P}{2\\mu} h^{2} + C_{1} h + C_{2}, \\quad \\left.\\frac{du_{x}}{dy}\\right|_{y=+h} = -\\frac{P}{\\mu} h + C_{1},\n$$\n$$\nu_{x}(-h) = -\\frac{P}{2\\mu} h^{2} - C_{1} h + C_{2}, \\quad \\left.\\frac{du_{x}}{dy}\\right|_{y=-h} = \\frac{P}{\\mu} h + C_{1}.\n$$\nThus the boundary conditions give the system\n$$\n-\\frac{P}{2\\mu} h^{2} + C_{1} h + C_{2} = -\\beta \\lambda\\left(-\\frac{P}{\\mu} h + C_{1}\\right),\n$$\n$$\n-\\frac{P}{2\\mu} h^{2} - C_{1} h + C_{2} = \\beta \\lambda\\left(\\frac{P}{\\mu} h + C_{1}\\right).\n$$\nSubtracting the second from the first yields\n$$\n2 C_{1} h = -2 \\beta \\lambda C_{1},\n$$\nwhich, for positive $h$, $\\beta$, and $\\lambda$, implies $C_{1} = 0$. Using either boundary condition to solve for $C_{2}$,\n$$\n-\\frac{P}{2\\mu} h^{2} + C_{2} = \\beta \\lambda \\frac{P}{\\mu} h \\quad \\Rightarrow \\quad C_{2} = \\frac{P}{\\mu}\\left(\\beta \\lambda h + \\frac{h^{2}}{2}\\right).\n$$\nTherefore, the velocity profile is\n$$\nu_{x}(y) = \\frac{P}{\\mu}\\left(\\beta \\lambda h + \\frac{h^{2}}{2} - \\frac{y^{2}}{2}\\right).\n$$\nThe mass flow rate per unit width is\n$$\n\\dot{m}'_{\\text{slip}} = \\rho \\int_{-h}^{h} u_{x}(y)\\, dy = \\rho \\frac{P}{\\mu} \\int_{-h}^{h} \\left(\\beta \\lambda h + \\frac{h^{2}}{2} - \\frac{y^{2}}{2}\\right) dy.\n$$\nEvaluating the integral term by term,\n$$\n\\int_{-h}^{h} \\beta \\lambda h \\, dy = 2 \\beta \\lambda h^{2}, \\quad \\int_{-h}^{h} \\frac{h^{2}}{2} \\, dy = h^{3}, \\quad \\int_{-h}^{h} \\frac{y^{2}}{2} \\, dy = \\frac{1}{2} \\cdot \\frac{2}{3} h^{3} = \\frac{1}{3} h^{3},\n$$\nso\n$$\n\\dot{m}'_{\\text{slip}} = \\rho \\frac{P}{\\mu} \\left(2 \\beta \\lambda h^{2} + \\frac{2}{3} h^{3}\\right).\n$$\nFor the no-slip case (equivalently $\\lambda=0$), the velocity profile is $u_{x}^{(0)}(y) = \\frac{P}{\\mu}\\left(\\frac{h^{2}}{2} - \\frac{y^{2}}{2}\\right)$, giving\n$$\n\\dot{m}'_{\\text{no-slip}} = \\rho \\frac{P}{\\mu} \\int_{-h}^{h} \\left(\\frac{h^{2}}{2} - \\frac{y^{2}}{2}\\right) dy = \\rho \\frac{P}{\\mu} \\cdot \\frac{2}{3} h^{3}.\n$$\nTherefore, the desired ratio is\n$$\n\\frac{\\dot{m}'_{\\text{slip}}}{\\dot{m}'_{\\text{no-slip}}} = \\frac{2 \\beta \\lambda h^{2} + \\frac{2}{3} h^{3}}{\\frac{2}{3} h^{3}} = 1 + 3 \\beta \\frac{\\lambda}{h}.\n$$\nAll factors $\\rho$, $P$, and $\\mu$ cancel, leaving a closed-form expression solely in terms of $\\beta$, $\\lambda$, and $h$.", "answer": "$$\\boxed{1 + 3 \\beta \\frac{\\lambda}{h}}$$", "id": "1798395"}]}