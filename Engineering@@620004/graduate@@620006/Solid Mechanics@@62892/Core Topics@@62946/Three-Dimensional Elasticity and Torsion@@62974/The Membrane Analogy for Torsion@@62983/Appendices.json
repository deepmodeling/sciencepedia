{"hands_on_practices": [{"introduction": "We begin with a classic problem that serves as a cornerstone for understanding the application of Prandtl's membrane analogy: the torsion of a bar with an elliptical cross-section. This exercise is fundamental because it represents one of the few non-circular geometries for which an exact analytical solution can be found with relative ease. By postulating a simple polynomial form for the Prandtl stress function $\\phi$ that respects the geometry and boundary conditions, you will derive the exact stress distribution and torsional constant, providing a solid analytical foundation and a benchmark for more complex methods [@problem_id:2698592].", "problem": "A straight, prismatic bar of homogeneous, isotropic material with shear modulus $G$ has an elliptical cross-section defined by $x^{2}/a^{2} + y^{2}/b^{2} \\le 1$, where $a$ and $b$ are the semi-axes with $a,b>0$. The bar is subjected to a uniform rate of twist per unit length $\\theta$ about its longitudinal axis. Using the Prandtl membrane analogy for Saint-Venant torsion, the scalar Prandtl stress function $\\phi(x,y)$ on the cross-section satisfies a Poisson equation with a Dirichlet boundary condition on the boundary of the ellipse, and the torque $T$ transmitted by the bar can be written as an area integral of $\\phi(x,y)$.\n\nStarting from these fundamental statements and without invoking any pre-compiled torsion formulas, do the following:\n\n1) Derive the governing partial differential equation and boundary condition for $\\phi(x,y)$, and justify a minimal-degree polynomial ansatz that is consistent with the symmetries of the ellipse and the requirement that the Laplacian of $\\phi$ be constant in the domain.\n\n2) Determine the unique coefficients in your ansatz by enforcing the governing equation and boundary condition, thereby obtaining an explicit expression for $\\phi(x,y)$ on the ellipse. Explain how an appropriate linear scaling of the in-plane coordinates that maps the ellipse to the unit disk renders the solution radially symmetric in the scaled coordinates.\n\n3) Using only relations that follow from the membrane analogy, express the torque $T$ in terms of $\\phi(x,y)$ and evaluate it by direct integration over the elliptical cross-section. From the constitutive relation $T = G J \\theta$ that defines the torsion constant $J$, deduce $J$.\n\nExpress the final torsion constant $J$ in closed form in terms of $a$ and $b$. No numerical evaluation is required, and no rounding is needed. Your final answer should be a single analytical expression.", "solution": "The problem as stated is valid. It is a well-posed, scientifically grounded problem from the field of solid mechanics, specifically the theory of elasticity. It requests the derivation of the torsion constant for an elliptical cross-section using the established Prandtl membrane analogy, starting from fundamental principles. The premises are physically and mathematically sound, and all necessary information is provided. We shall proceed with the solution.\n\nThe analysis of Saint-Venant torsion of a prismatic bar is governed by the Prandtl stress function $\\phi(x,y)$, which must satisfy a specific Poisson equation over the cross-sectional domain $A$ and a constant value on its boundary $\\partial A$.\n\n1) The governing partial differential equation for the Prandtl stress function $\\phi(x,y)$ is derived from the equilibrium and compatibility equations of elasticity. For a homogeneous, isotropic material with shear modulus $G$ subjected to a uniform rate of twist $\\theta$, this equation is:\n$$ \\nabla^2 \\phi(x,y) = \\frac{\\partial^2 \\phi}{\\partial x^2} + \\frac{\\partial^2 \\phi}{\\partial y^2} = -2 G \\theta $$\nThe boundary condition arises from the requirement that the lateral surface of the bar must be free of traction. This implies that the tangential component of the shear stress vector must vanish on the boundary of the cross-section. In terms of the stress function, this condition is satisfied if $\\phi$ is constant along the boundary $\\partial A$. Without loss of generality, this constant can be set to zero. For the given elliptical cross-section, the domain $A$ is defined by $x^{2}/a^{2} + y^{2}/b^{2} \\le 1$, and its boundary $\\partial A$ is the ellipse $x^{2}/a^{2} + y^{2}/b^{2} = 1$. Thus, the Dirichlet boundary condition is:\n$$ \\phi(x,y) = 0 \\quad \\text{for} \\quad (x,y) \\in \\partial A $$\nTo find a solution, we seek a minimal-degree polynomial ansatz for $\\phi(x,y)$. The boundary condition suggests that the expression for $\\phi$ must contain the factor $\\left(\\frac{x^2}{a^2} + \\frac{y^2}{b^2} - 1\\right)$. Let us posit the simplest non-trivial form that satisfies this, which is a second-degree polynomial:\n$$ \\phi(x,y) = C \\left( \\frac{x^2}{a^2} + \\frac{y^2}{b^2} - 1 \\right) $$\nwhere $C$ is a constant to be determined. This form is zero on the boundary by construction. The elliptical cross-section possesses symmetry with respect to both the $x$-axis and the $y$-axis. The proposed ansatz is an even function of both $x$ and $y$, i.e., $\\phi(x,y) = \\phi(-x,y) = \\phi(x,-y)$, which correctly reflects these geometric symmetries. Furthermore, we must check if this ansatz is consistent with the governing Poisson equation, which requires that the Laplacian of $\\phi$ be constant. We compute the second partial derivatives:\n$$ \\frac{\\partial \\phi}{\\partial x} = C \\left( \\frac{2x}{a^2} \\right) \\implies \\frac{\\partial^2 \\phi}{\\partial x^2} = \\frac{2C}{a^2} $$\n$$ \\frac{\\partial \\phi}{\\partial y} = C \\left( \\frac{2y}{b^2} \\right) \\implies \\frac{\\partial^2 \\phi}{\\partial y^2} = \\frac{2C}{b^2} $$\nThe Laplacian is therefore:\n$$ \\nabla^2 \\phi = \\frac{2C}{a^2} + \\frac{2C}{b^2} = 2C \\left( \\frac{1}{a^2} + \\frac{1}{b^2} \\right) = 2C \\frac{a^2 + b^2}{a^2 b^2} $$\nThe Laplacian is indeed a constant, which validates the chosen form of the ansatz. Its degree, $2$, is minimal, as any first-degree polynomial has a zero Laplacian and cannot satisfy both the PDE and the non-trivial boundary condition simultaneously.\n\n2) The constant $C$ is determined by substituting the calculated Laplacian into the governing equation:\n$$ 2C \\frac{a^2 + b^2}{a^2 b^2} = -2 G \\theta $$\nSolving for $C$ yields:\n$$ C = -G \\theta \\frac{a^2 b^2}{a^2 + b^2} $$\nSubstituting this back into the ansatz gives the explicit expression for the Prandtl stress function:\n$$ \\phi(x,y) = -G \\theta \\frac{a^2 b^2}{a^2 + b^2} \\left( \\frac{x^2}{a^2} + \\frac{y^2}{b^2} - 1 \\right) $$\nNow, consider the linear scaling of coordinates defined by $x' = x/a$ and $y' = y/b$. This transformation maps the elliptical domain $x^2/a^2 + y^2/b^2 \\le 1$ in the $(x,y)$-plane to the unit disk $(x')^2 + (y')^2 \\le 1$ in the $(x',y')$-plane. In these scaled coordinates, the stress function becomes:\n$$ \\phi(x'(x), y'(y)) = -G \\theta \\frac{a^2 b^2}{a^2 + b^2} \\left( (x')^2 + (y')^2 - 1 \\right) $$\nIf we define a radial coordinate in the scaled system as $r' = \\sqrt{(x')^2 + (y')^2}$, the expression for $\\phi$ simplifies to:\n$$ \\phi(r') = -G \\theta \\frac{a^2 b^2}{a^2 + b^2} \\left( (r')^2 - 1 \\right) $$\nThis function depends only on the scaled radial distance $r'$, demonstrating that the linear scaling of the Cartesian coordinates renders the solution radially symmetric in the transformed space.\n\n3) In the context of the membrane analogy, the total torque $T$ transmitted by the bar is equal to twice the volume enclosed by the deflected membrane $\\phi(x,y)$ and the plane $z=0$. Mathematically, this is expressed as:\n$$ T = 2 \\iint_A \\phi(x,y) \\,dx\\,dy $$\nWe substitute the derived expression for $\\phi(x,y)$:\n$$ T = 2 \\iint_A \\left[ -G \\theta \\frac{a^2 b^2}{a^2 + b^2} \\left( \\frac{x^2}{a^2} + \\frac{y^2}{b^2} - 1 \\right) \\right] dx\\,dy $$\n$$ T = -2 G \\theta \\frac{a^2 b^2}{a^2 + b^2} \\iint_A \\left( \\frac{x^2}{a^2} + \\frac{y^2}{b^2} - 1 \\right) dx\\,dy $$\nTo evaluate this integral, we perform a change of variables to the scaled coordinates $x' = x/a$ and $y' = y/b$. The differential area element transforms as $dx\\,dy = |\\det(J_c)| \\,dx'\\,dy'$, where $J_c$ is the Jacobian matrix of the transformation from $(x',y')$ to $(x,y)$.\n$$ J_c = \\begin{pmatrix} \\frac{\\partial x}{\\partial x'} & \\frac{\\partial x}{\\partial y'} \\\\ \\frac{\\partial y}{\\partial x'} & \\frac{\\partial y}{\\partial y'} \\end{pmatrix} = \\begin{pmatrix} a & 0 \\\\ 0 & b \\end{pmatrix} $$\nThe determinant is $\\det(J_c) = ab$. Thus, $dx\\,dy = ab\\,dx'\\,dy'$. The domain of integration becomes the unit disk $D$ defined by $(x')^2 + (y')^2 \\le 1$. The integral for the torque is now:\n$$ T = -2 G \\theta \\frac{a^2 b^2}{a^2 + b^2} (ab) \\iint_D \\left( (x')^2 + (y')^2 - 1 \\right) dx'\\,dy' $$\nIt is most convenient to evaluate the remaining integral in polar coordinates for the scaled system, $x' = r' \\cos\\alpha$ and $y' = r' \\sin\\alpha$, where $0 \\le r' \\le 1$ and $0 \\le \\alpha \\le 2\\pi$. The area element is $dx'\\,dy' = r'\\,dr'\\,d\\alpha$.\n$$ \\iint_D \\left( (x')^2 + (y')^2 - 1 \\right) dx'\\,dy' = \\int_0^{2\\pi} \\int_0^1 \\left( (r')^2 - 1 \\right) r' \\,dr'\\,d\\alpha $$\n$$ = \\int_0^{2\\pi} \\left[ \\frac{(r')^4}{4} - \\frac{(r')^2}{2} \\right]_0^1 d\\alpha = \\int_0^{2\\pi} \\left( \\frac{1}{4} - \\frac{1}{2} \\right) d\\alpha = -\\frac{1}{4} \\int_0^{2\\pi} d\\alpha = -\\frac{2\\pi}{4} = -\\frac{\\pi}{2} $$\nSubstituting this result back into the expression for torque $T$:\n$$ T = -2 G \\theta \\frac{a^3 b^3}{a^2 + b^2} \\left( -\\frac{\\pi}{2} \\right) = G \\theta \\frac{\\pi a^3 b^3}{a^2 + b^2} $$\nThe torsion constant, or torsional rigidity, $J$ is defined by the linear constitutive relation $T = G J \\theta$. By comparing this definition with our derived expression for the torque, we can directly identify $J$:\n$$ G J \\theta = G \\theta \\frac{\\pi a^3 b^3}{a^2 + b^2} $$\nTherefore, the torsion constant for an elliptical cross-section is:\n$$ J = \\frac{\\pi a^3 b^3}{a^2 + b^2} $$\nThis completes the derivation.", "answer": "$$\n\\boxed{\\frac{\\pi a^{3} b^{3}}{a^{2} + b^{2}}}\n$$", "id": "2698592"}, {"introduction": "For most cross-sectional shapes, finding an exact solution is impractical or impossible, which is where approximation techniques become invaluable. This exercise introduces the power of the energy method by tackling the torsion of a bar with a triangular cross-section. You will use the Rayleigh-Ritz method, a powerful variational approach, to find an approximate solution for the torsional constant [@problem_id:2698588]. This practice develops your skills in applying variational principles, which form the theoretical bedrock of many advanced computational techniques, including the Finite Element Method.", "problem": "A long, prismatic bar of shear modulus $G$ and uniform triangular cross-section occupies the region\n$$\\Omega = \\{(x,y)\\in\\mathbb{R}^2 \\,:\\, x \\ge 0,\\; y \\ge 0,\\; \\frac{x}{a} + \\frac{y}{b} \\le 1\\},$$\nwith vertices at $(0,0)$, $(a,0)$, and $(0,b)$, where $a>0$ and $b>0$. The bar is subjected to Saint-Venant torsion with constant twist per unit length $\\kappa$ about the $z$-axis. Let $\\phi(x,y)$ denote the Prandtl stress function, defined so that the nonzero shear stresses are $\\tau_{xz} = \\partial \\phi/\\partial y$ and $\\tau_{yz} = -\\partial \\phi/\\partial x$. Assume the lateral boundary of $\\Omega$ is free of traction, corresponding to the essential boundary condition $\\phi=0$ on $\\partial \\Omega$.\n\nTask:\n- Starting only from the definitions above and standard energy principles for Saint-Venant torsion, set up the governing Poisson problem for the Prandtl stress function $\\phi(x,y)$, and then introduce the normalized stress function $\\psi(x,y) = \\phi(x,y)/(G\\kappa)$.\n- Using the energy method, propose the simplest nontrivial trial function that is a single scalar multiple of the product of the three affine edge equations of the triangle, namely\n$$\\tilde{\\psi}(x,y) = C\\,x\\,y\\left(1 - \\frac{x}{a} - \\frac{y}{b}\\right),$$\nwhere $C$ is a scalar to be determined by minimization of the appropriate energy functional.\n- With this one-parameter trial space, determine $C$ by stationarity and then produce an approximation $\\tilde{J}$ to the torsional constant $J$ of the section. Express $\\tilde{J}$ in closed form in terms of $a$ and $b$ only.\n\nAnswer format:\n- Provide a single closed-form analytic expression for $\\tilde{J}$ as a function of $a$ and $b$. No numerical substitution is required and no rounding is needed. Do not report intermediate quantities. The final answer must be dimensionally consistent with a torsional constant (length to the fourth power) and expressed without units in the final boxed expression.", "solution": "The problem is subjected to validation.\n\nStep 1: Extract Givens\n- Shear modulus: $G$\n- Cross-section: $\\Omega = \\{(x,y)\\in\\mathbb{R}^2 \\,:\\, x \\ge 0,\\; y \\ge 0,\\; \\frac{x}{a} + \\frac{y}{b} \\le 1\\}$, where $a>0$, $b>0$.\n- Twist per unit length: $\\kappa$\n- Prandtl stress function: $\\phi(x,y)$\n- Shear stress components: $\\tau_{xz} = \\partial \\phi/\\partial y$, $\\tau_{yz} = -\\partial \\phi/\\partial x$\n- Boundary condition: $\\phi=0$ on $\\partial \\Omega$\n- Normalized stress function: $\\psi(x,y) = \\phi(x,y)/(G\\kappa)$\n- Trial function for $\\psi$: $\\tilde{\\psi}(x,y) = C\\,x\\,y\\left(1 - \\frac{x}{a} - \\frac{y}{b}\\right)$\n- Task: Determine the constant $C$ using the energy method and find the resulting approximation $\\tilde{J}$ for the torsional constant $J$.\n\nStep 2: Validate Using Extracted Givens\nThe problem is scientifically grounded, rooted in the classical Saint-Venant theory of torsion in elasticity. It is well-posed, providing a clear path to an approximate solution via the Rayleigh-Ritz energy method, a standard and rigorous technique. The language is objective and unambiguous. All necessary information is provided, and the setup is internally consistent. The problem does not violate any of the invalidity criteria.\n\nStep 3: Verdict and Action\nThe problem is valid. A solution will be provided.\n\nThe governing equation for the Prandtl stress function $\\phi(x,y)$ in Saint-Venant torsion is derived from the compatibility of strains, and for a linear elastic material, it takes the form of a Poisson equation:\n$$ \\nabla^2 \\phi = -2G\\kappa $$\nwhere $\\nabla^2 = \\frac{\\partial^2}{\\partial x^2} + \\frac{\\partial^2}{\\partial y^2}$ is the Laplacian operator. The boundary condition that the lateral surface is free of traction corresponds to $\\phi$ being constant on the boundary $\\partial\\Omega$. Without loss of generality, this constant is set to zero:\n$$ \\phi|_{\\partial\\Omega} = 0 $$\nThe problem introduces a normalized stress function $\\psi(x,y) = \\phi(x,y)/(G\\kappa)$. Substituting $\\phi = G\\kappa\\psi$ into the governing equation and boundary condition yields the normalized problem:\n$$ \\nabla^2(G\\kappa\\psi) = -2G\\kappa \\implies \\nabla^2\\psi = -2 $$\n$$ G\\kappa\\psi|_{\\partial\\Omega} = 0 \\implies \\psi|_{\\partial\\Omega} = 0 $$\nThis is a standard Poisson problem for $\\psi(x,y)$. The torsional constant $J$ is related to the torque $M_t = G\\kappa J$ and can also be calculated from the stress function as $M_t = 2 \\iint_{\\Omega} \\phi \\, dA$. This gives two equivalent expressions for $J$ for the exact solution $\\psi$:\n$$ J = 2 \\iint_{\\Omega} \\psi \\, dA = \\iint_{\\Omega} |\\nabla\\psi|^2 \\, dA $$\nThe equivalence is established via Green's first identity.\n\nThe energy method (Rayleigh-Ritz method) seeks an approximate solution by minimizing the potential energy functional associated with the Poisson problem. For the equation $\\nabla^2\\psi = -2$, the functional to be minimized is:\n$$ \\Pi[\\psi] = \\iint_{\\Omega} \\left( \\frac{1}{2} |\\nabla\\psi|^2 - 2\\psi \\right) dA $$\nThe proposed trial function is $\\tilde{\\psi}(x,y) = C\\,\\psi_0(x,y)$, where $\\psi_0(x,y) = x\\,y\\left(1 - \\frac{x}{a} - \\frac{y}{b}\\right)$. This function satisfies the essential boundary condition $\\tilde{\\psi}=0$ on $\\partial\\Omega$ because each of the lines defining the triangle, $x=0$, $y=0$, and $1 - \\frac{x}{a} - \\frac{y}{b} = 0$, causes one of the factors to be zero.\n\nSubstituting $\\tilde{\\psi}$ into the functional $\\Pi$ gives a function of the single parameter $C$:\n$$ \\Pi(C) = \\iint_{\\Omega} \\left( \\frac{1}{2} |\\nabla(C\\psi_0)|^2 - 2(C\\psi_0) \\right) dA = \\frac{1}{2} C^2 \\iint_{\\Omega} |\\nabla\\psi_0|^2 \\, dA - 2C \\iint_{\\Omega} \\psi_0 \\, dA $$\nTo find the optimal value of $C$ that minimizes $\\Pi(C)$, we set its derivative with respect to $C$ to zero:\n$$ \\frac{d\\Pi}{dC} = C \\iint_{\\Omega} |\\nabla\\psi_0|^2 \\, dA - 2 \\iint_{\\Omega} \\psi_0 \\, dA = 0 $$\nSolving for $C$ yields:\n$$ C = \\frac{2 \\iint_{\\Omega} \\psi_0 \\, dA}{\\iint_{\\Omega} |\\nabla\\psi_0|^2 \\, dA} $$\nLet us define two integrals: $I_A = \\iint_{\\Omega} \\psi_0 \\, dA$ and $I_B = \\iint_{\\Omega} |\\nabla\\psi_0|^2 \\, dA$. Then $C = 2 I_A / I_B$.\n\nThe approximation for the torsional constant, $\\tilde{J}$, is found using the optimized trial function $\\tilde{\\psi}$. A consistent formulation within the Rayleigh-Ritz method yields $\\tilde{J} = 2 \\iint_{\\Omega} \\tilde{\\psi} \\, dA$.\n$$ \\tilde{J} = 2 \\iint_{\\Omega} C\\psi_0 \\, dA = 2C I_A = 2\\left(\\frac{2 I_A}{I_B}\\right)I_A = \\frac{4 I_A^2}{I_B} $$\nWe now compute the integrals $I_A$ and $I_B$. For a triangular domain with vertices $(0,0)$, $(a,0)$, and $(0,b)$, we use the formula:\n$$ \\iint_{\\Omega} x^p y^q \\, dx dy = \\frac{a^{p+1}b^{q+1} p! q!}{(p+q+2)!} $$\nFirst, we compute $I_A$:\n$$ I_A = \\iint_{\\Omega} xy\\left(1 - \\frac{x}{a} - \\frac{y}{b}\\right) dA = \\iint_{\\Omega} \\left(xy - \\frac{x^2y}{a} - \\frac{xy^2}{b}\\right) dA $$\n$$ I_A = \\iint_{\\Omega} x^1y^1 dA - \\frac{1}{a}\\iint_{\\Omega} x^2y^1 dA - \\frac{1}{b}\\iint_{\\Omega} x^1y^2 dA $$\nUsing the formula for each term:\n$$ \\iint x^1y^1 dA = \\frac{a^2b^2 1!1!}{4!} = \\frac{a^2b^2}{24} $$\n$$ \\iint x^2y^1 dA = \\frac{a^3b^2 2!1!}{5!} = \\frac{2a^3b^2}{120} = \\frac{a^3b^2}{60} $$\n$$ \\iint x^1y^2 dA = \\frac{a^2b^3 1!2!}{5!} = \\frac{2a^2b^3}{120} = \\frac{a^2b^3}{60} $$\nSubstituting back into $I_A$:\n$$ I_A = \\frac{a^2b^2}{24} - \\frac{1}{a}\\left(\\frac{a^3b^2}{60}\\right) - \\frac{1}{b}\\left(\\frac{a^2b^3}{60}\\right) = a^2b^2\\left(\\frac{1}{24} - \\frac{1}{60} - \\frac{1}{60}\\right) = a^2b^2\\left(\\frac{5-2-2}{120}\\right) = \\frac{a^2b^2}{120} $$\nNext, we compute $I_B = \\iint_{\\Omega} |\\nabla\\psi_0|^2 \\, dA$. A direct calculation is tedious. We use Green's first identity: $\\iint_{\\Omega} (f \\nabla^2 g + \\nabla f \\cdot \\nabla g) dA = \\oint_{\\partial\\Omega} f (\\nabla g \\cdot \\mathbf{n}) dS$. Setting $f=g=\\psi_0$ and noting $\\psi_0=0$ on $\\partial\\Omega$, we get:\n$$ I_B = \\iint_{\\Omega} |\\nabla\\psi_0|^2 \\, dA = - \\iint_{\\Omega} \\psi_0 \\nabla^2\\psi_0 \\, dA $$\nFirst, find $\\nabla^2\\psi_0$:\n$$ \\frac{\\partial\\psi_0}{\\partial x} = y - \\frac{2xy}{a} - \\frac{y^2}{b} \\implies \\frac{\\partial^2\\psi_0}{\\partial x^2} = -\\frac{2y}{a} $$\n$$ \\frac{\\partial\\psi_0}{\\partial y} = x - \\frac{x^2}{a} - \\frac{2xy}{b} \\implies \\frac{\\partial^2\\psi_0}{\\partial y^2} = -\\frac{2x}{b} $$\n$$ \\nabla^2\\psi_0 = -2\\left(\\frac{y}{a} + \\frac{x}{b}\\right) $$\nNow compute $I_B$:\n$$ I_B = -\\iint_{\\Omega} xy\\left(1 - \\frac{x}{a} - \\frac{y}{b}\\right) \\left[-2\\left(\\frac{y}{a} + \\frac{x}{b}\\right)\\right] dA $$\n$$ I_B = 2\\iint_{\\Omega} \\left(xy - \\frac{x^2y}{a} - \\frac{xy^2}{b}\\right)\\left(\\frac{y}{a} + \\frac{x}{b}\\right) dA $$\n$$ I_B = 2\\iint_{\\Omega} \\left(\\frac{xy^2}{a} + \\frac{x^2y}{b} - \\frac{x^2y^2}{a^2} - \\frac{x^3y}{ab} - \\frac{xy^3}{ab} - \\frac{x^2y^2}{b^2}\\right) dA $$\nWe evaluate each integral term by term:\n$$ \\iint x^1y^2 dA = \\frac{a^2b^3}{60}, \\quad \\iint x^2y^1 dA = \\frac{a^3b^2}{60}, \\quad \\iint x^2y^2 dA = \\frac{a^3b^3}{180} $$\n$$ \\iint x^3y^1 dA = \\frac{a^4b^2}{120}, \\quad \\iint x^1y^3 dA = \\frac{a^2b^4}{120} $$\nSubstitute these into the expression for $I_B$:\n$$ I_B = 2 \\left[ \\frac{1}{a}\\left(\\frac{a^2b^3}{60}\\right) + \\frac{1}{b}\\left(\\frac{a^3b^2}{60}\\right) - \\left(\\frac{1}{a^2}+\\frac{1}{b^2}\\right)\\frac{a^3b^3}{180} - \\frac{1}{ab}\\frac{a^4b^2}{120} - \\frac{1}{ab}\\frac{a^2b^4}{120} \\right] $$\n$$ I_B = 2 \\left[ \\frac{ab^3}{60} + \\frac{a^3b}{60} - \\frac{ab^3}{180} - \\frac{a^3b}{180} - \\frac{a^3b}{120} - \\frac{ab^3}{120} \\right] $$\n$$ I_B = 2(a^3b+ab^3)\\left(\\frac{1}{60} - \\frac{1}{180} - \\frac{1}{120}\\right) = 2(a^3b+ab^3)\\left(\\frac{6-2-3}{360}\\right) = 2(a^3b+ab^3)\\left(\\frac{1}{360}\\right) $$\n$$ I_B = \\frac{a^3b+ab^3}{180} = \\frac{ab(a^2+b^2)}{180} $$\nFinally, we compute $\\tilde{J}$:\n$$ \\tilde{J} = \\frac{4 I_A^2}{I_B} = \\frac{4 \\left(\\frac{a^2b^2}{120}\\right)^2}{\\frac{ab(a^2+b^2)}{180}} = \\frac{4 \\frac{a^4b^4}{14400}}{\\frac{ab(a^2+b^2)}{180}} $$\n$$ \\tilde{J} = \\frac{4 a^4b^4}{14400} \\cdot \\frac{180}{ab(a^2+b^2)} = \\frac{4 \\times 180}{14400} \\frac{a^3b^3}{a^2+b^2} = \\frac{720}{14400} \\frac{a^3b^3}{a^2+b^2} $$\n$$ \\tilde{J} = \\frac{1}{20} \\frac{a^3b^3}{a^2+b^2} $$\nThis expression has dimensions of length to the fourth power, consistent with a torsional constant.", "answer": "$$\n\\boxed{\\frac{a^3 b^3}{20(a^2+b^2)}}\n$$", "id": "2698588"}, {"introduction": "To solve torsion problems for the arbitrary cross-sections encountered in engineering practice, numerical methods are the standard approach. This final practice bridges the gap from analytical theory to computational implementation by guiding you through the development of a finite difference solver for the governing Poisson equation [@problem_id:2698611]. This hands-on coding task demonstrates how to handle complex, spline-defined boundaries and validate simulation results against a fundamental energy identity, providing a complete workflow from problem definition to a verified numerical solution.", "problem": "Consider torsion of a long prismatic bar with simply connected cross-section. In Saint-Venant torsion, introduce the Prandtl stress function $\\phi(x,y)$ on the cross-section domain $A$ that satisfies the boundary value problem derived from linear elasticity and equilibrium: $\\nabla^2 \\phi = -2\\,G\\,\\theta$ in $A$ with $\\phi=0$ on $\\partial A$, where $G$ is the shear modulus and $\\theta$ is the twist per unit length in radians per meter. The membrane analogy asserts that the torsional shear stress components are $\\tau_{xz}=\\partial \\phi/\\partial y$ and $\\tau_{yz}=-\\partial \\phi/\\partial x$, and that the torque per unit length is $T=2\\int_A \\phi\\,dA$, hence the torsional constant is $J=T/(G\\theta)=\\dfrac{2}{G\\theta}\\int_A \\phi\\,dA$. Furthermore, by Green’s identities for functions vanishing on the boundary, the strain energy identity holds: $\\int_A \\lVert \\nabla \\phi \\rVert^2 \\, dA = 2\\,G\\,\\theta \\int_A \\phi \\, dA$.\n\nYour task is to approximate $\\phi$ numerically on a uniform grid inside domains $A$ whose boundary $\\partial A$ is defined by a periodic cubic spline interpolant through a given ordered list of control points. Then compute the torsional constant $J$ and validate the energy identity numerically within a prescribed tolerance.\n\nDiscretization requirements:\n- Use a square bounding box $[-L, L]\\times[-L, L]$ with $L=0.06$ in meters and a uniform grid of $N\\times N$ nodes with $N=161$. Let the uniform grid spacing be $h=2L/(N-1)$ in meters.\n- Assemble the five-point finite difference approximation of the Laplacian on the grid points that lie inside $A$, imposing homogeneous Dirichlet data $\\phi=0$ outside $A$. Specifically, for each interior grid node with index $i$, approximate the Laplacian as $\\phi_{i+\\hat{x}}+\\phi_{i-\\hat{x}}+\\phi_{i+\\hat{y}}+\\phi_{i-\\hat{y}}-4\\phi_i = h^2 f_i$, with $f_i=-2\\,G\\,\\theta$. This yields a sparse linear system $A\\,u=b$ for the vector $u$ of unknown nodal values $\\phi$ on the inside nodes, where $A$ is the unscaled graph Laplacian stencil and $b=h^2 f$.\n- Compute the discrete energy $E_h = u^\\top(-A)\\,u$ and the discrete membrane integral $I_h = h^2 \\sum_i u_i$. Compare $E_h$ to $2\\,G\\,\\theta\\,I_h$ and report the relative residual $r = \\lvert E_h - 2\\,G\\,\\theta\\,I_h\\rvert / E_h$.\n- Compute $J$ from $J \\approx \\dfrac{2}{G\\,\\theta}\\,I_h$. Express $J$ in $\\mathrm{m}^4$.\n\nSpline boundary construction:\n- For a set of control points $\\{(x_k,y_k)\\}_{k=0}^{K-1}$ in meters with $(x_0,y_0)=(x_K,y_K)$ to enforce periodicity, construct a periodic cubic spline in the parameter $t$ for the $x$- and $y$-coordinates separately. Then sample the spline densely at $M$ points to form a polygonal approximation of $\\partial A$. Use $M=800$ samples. Use a robust point-in-polygon test to determine which grid points lie inside $A$.\n\nMaterial and loading parameters:\n- Use $G = 26\\times 10^9$ in pascals.\n- Use $\\theta = 0.01$ in radians per meter.\n\nTest suite:\n- Case $1$ (smooth trifoil): Let $K=12$ control points on a radius-modulated circle of base radius $R=0.04$ in meters with threefold cosine modulation of amplitude factor $a=0.2$. For $k=0,1,\\dots,K-1$, let $\\alpha_k = 2\\pi k/K$, $r_k = R\\,(1 + a\\cos(3\\alpha_k))$, and $(x_k,y_k) = (r_k\\cos\\alpha_k,\\; r_k\\sin\\alpha_k)$. Enforce periodicity by repeating $(x_0,y_0)$ at the end for the spline.\n- Case $2$ (rounded rectangle): Construct $K=16$ control points that trace a rectangle of width $w=0.08$ and height $h_r=0.05$ in meters with nominal rounded corners of offset $\\rho=0.012$ in meters. In counterclockwise order, use the sequence of points\n  $(w/2-\\rho,\\,h_r/2)$,\n  $(w/2,\\,h_r/2)$,\n  $(w/2,\\,h_r/2-\\rho)$,\n  $(w/2,\\,0)$,\n  $(w/2,\\, -h_r/2+\\rho)$,\n  $(w/2,\\, -h_r/2)$,\n  $(w/2-\\rho,\\, -h_r/2)$,\n  $(0,\\, -h_r/2)$,\n  $(-w/2+\\rho,\\, -h_r/2)$,\n  $(-w/2,\\, -h_r/2)$,\n  $(-w/2,\\, -h_r/2+\\rho)$,\n  $(-w/2,\\, 0)$,\n  $(-w/2,\\, h_r/2-\\rho)$,\n  $(-w/2,\\, h_r/2)$,\n  $(-w/2+\\rho,\\, h_r/2)$,\n  $(0,\\, h_r/2)$,\n  and then repeat the first point to close for periodicity. These points are intentionally arranged so that the periodic cubic spline smooths the corners.\n- Case $3$ (slender four-lobed clover): Let $K=16$ control points with fourfold modulation and anisotropy. For $k=0,1,\\dots,K-1$, set $\\alpha_k = 2\\pi k/K$, $r_k = R_c\\,(1 + b\\cos(4\\alpha_k))$ with $R_c=0.035$ in meters and $b=0.3$, then $(x_k,y_k) = (s\\,r_k\\cos\\alpha_k,\\; r_k\\sin\\alpha_k)$ with anisotropy factor $s=1.4$. Repeat the first point at the end.\n\nNumerical outputs and units:\n- For each case, compute the pair $(J,r)$ where $J$ is the torsional constant in $\\mathrm{m}^4$ and $r$ is the relative residual as defined above. Also compute an integer pass flag $p$ equal to $1$ if $r \\le \\tau$ and $0$ otherwise, with tolerance $\\tau=10^{-8}$.\n- Your program must output a single line containing a Python-style list of lists, one per case, in the order Case $1$, Case $2$, Case $3$. Each inner list must be of the form $[J,r,p]$ where $J$ and $r$ are floating-point numbers and $p$ is an integer. The line must include no spaces. For example, an output for three cases must look like $[[J_1,r_1,p_1],[J_2,r_2,p_2],[J_3,r_3,p_3]]$.\n\nAll calculations must be consistent with the discretization rules above. Express $J$ in $\\mathrm{m}^4$ and $r$ as a dimensionless float. Angles are in radians. No other units are needed. The algorithm must be general and written such that it could handle any of the three spline-defined domains without code modifications other than the control points provided in the test suite.", "solution": "The problem statement is subjected to rigorous validation.\n\nStep 1: Extract Givens\n- **Governing Equation**: $\\nabla^2 \\phi = -2\\,G\\,\\theta$ in a simply connected domain $A$.\n- **Boundary Condition**: $\\phi=0$ on the boundary $\\partial A$.\n- **Governing Parameters**: Shear modulus $G = 26\\times 10^9$ Pa, twist per unit length $\\theta = 0.01$ rad/m.\n- **Derived Quantities**:\n  - Shear stress components: $\\tau_{xz}=\\partial \\phi/\\partial y$, $\\tau_{yz}=-\\partial \\phi/\\partial x$.\n  - Torque: $T=2\\int_A \\phi\\,dA$.\n  - Torsional constant: $J=T/(G\\theta)=\\dfrac{2}{G\\theta}\\int_A \\phi\\,dA$.\n- **Energy Identity**: $\\int_A \\lVert \\nabla \\phi \\rVert^2 \\, dA = 2\\,G\\,\\theta \\int_A \\phi \\, dA$.\n- **Computational Domain**: A square bounding box $[-L, L]\\times[-L, L]$ with $L=0.06$ m.\n- **Discretization**:\n  - A uniform grid of $N\\times N$ nodes, with $N=161$.\n  - Grid spacing: $h=2L/(N-1)$.\n  - Five-point finite difference stencil: $\\phi_{i+\\hat{x}}+\\phi_{i-\\hat{x}}+\\phi_{i+\\hat{y}}+\\phi_{i-\\hat{y}}-4\\phi_i = h^2 f_i$, where $f_i=-2\\,G\\,\\theta$.\n  - Linear system: $A\\,u=b$, with $A$ as the unscaled graph Laplacian stencil and $b$ as the vector of $h^2 f_i$ values for interior nodes.\n- **Numerical Validation & Post-processing**:\n  - Discrete energy: $E_h = u^\\top(-A)\\,u$.\n  - Discrete membrane integral: $I_h = h^2 \\sum_i u_i$.\n  - Torsional constant approximation: $J \\approx \\dfrac{2}{G\\,\\theta}\\,I_h$.\n  - Relative residual: $r = \\lvert E_h - 2\\,G\\,\\theta\\,I_h\\rvert / E_h$.\n  - Pass flag: $p=1$ if $r \\le \\tau$, $p=0$ otherwise, with tolerance $\\tau=10^{-8}$.\n- **Boundary Definition**:\n  - Periodic cubic spline through a given ordered list of control points.\n  - Polygonal approximation of the spline boundary using $M=800$ sample points.\n  - A point-in-polygon test is required to classify grid nodes.\n- **Test Cases**:\n  - Case 1: Smooth trifoil defined by $K=12$ control points with radius $R=0.04$ m and modulation $a=0.2$.\n  - Case 2: Rounded rectangle with width $w=0.08$ m, height $h_r=0.05$ m, and corner offset $\\rho=0.012$ m, defined by $K=16$ points.\n  - Case 3: Slender four-lobed clover from $K=16$ points, with base radius $R_c=0.035$ m, modulation $b=0.3$, and anisotropy $s=1.4$.\n- **Output Format**: A single line `[[J1,r1,p1],[J2,r2,p2],[J3,r3,p3]]` with no spaces.\n\nStep 2: Validate Using Extracted Givens\nThe problem is evaluated against the validation criteria.\n- **Scientifically Grounded**: The problem is rooted in the classical Saint-Venant theory of torsion for prismatic bars, a cornerstone of linear elasticity. The governing equation is a standard Poisson boundary value problem, and the membrane analogy is a well-established concept. All principles are sound.\n- **Well-Posed**: The Poisson equation with homogeneous Dirichlet boundary conditions on a bounded domain is a classic example of a well-posed elliptic problem, guaranteeing a unique and stable solution. The numerical formulation leads to a symmetric, negative-definite linear system $A u = b$, which is non-singular and has a unique solution.\n- **Objective**: The problem is specified with complete and unambiguous quantitative data, mathematical formulations, and algorithmic requirements. It is free from any subjective or qualitative language.\n- **Incomplete or Contradictory Setup**: All parameters required for the simulation ($G, \\theta, L, N, M, \\tau$) and for defining the geometry of all test cases are explicitly provided. The numerical method is prescribed in sufficient detail. There are no contradictions. The problem is self-contained.\n- **Unrealistic or Infeasible**: The material properties, geometric dimensions, and loading conditions are physically plausible within an engineering context. The grid size $N=161$ results in a large but computationally tractable linear system.\n- **Ill-Posed or Poorly Structured**: The problem is clearly structured with a defined goal and a prescribed path to the solution. The terms are well-defined within the context of solid mechanics and numerical analysis.\n- **The discrete energy identity**: The problem states to compare $E_h = u^\\top(-A)u$ with $2G\\theta I_h$. From the discrete system definition, $Au = b$, where the vector $b$ has entries $b_i = h^2(-2G\\theta)$. Thus, $-Au = -b = h^2(2G\\theta)\\mathbf{1}$. The energy is $E_h = u^\\top(-Au) = u^\\top(h^2 2G\\theta \\mathbf{1}) = 2G\\theta h^2 \\sum_i u_i$. The integral is $I_h = h^2 \\sum_i u_i$. Therefore, the identity $E_h = 2G\\theta I_h$ holds exactly for the discrete system. The requested residual $r$ is thus a measure of the numerical accuracy of the linear solver, not a measure of discretization error, which is a subtle but valid check of computational fidelity.\n\nStep 3: Verdict and Action\nThe problem statement is **valid**. It is scientifically sound, mathematically well-posed, and computationally specific. A complete solution will be provided.\n\n**Solution Methodology**\n\nThe problem requires the numerical solution of the Prandtl stress function $\\phi$ for torsion over non-standard cross-sections and the subsequent calculation of engineering quantities. The solution proceeds in five distinct steps.\n\n1.  **Domain Boundary Construction**: The boundary $\\partial A$ of the cross-section for each case is defined by a set of control points. A periodic cubic spline is constructed to pass through these points, providing a smooth, closed curve. We use separate splines for the $x$ and $y$ coordinates, both parameterized by a normalized arc length parameter $t$. This is achieved using `scipy.interpolate.CubicSpline` with the `bc_type='periodic'` option. To facilitate numerical tests, this continuous spline boundary is then densely sampled into a polygon with $M=800$ vertices, which serves as a high-fidelity approximation of $\\partial A$.\n\n2.  **Grid Generation and Interior Node Identification**: The computational domain is a square $[-L, L]^2$ discretized into a uniform $N \\times N$ grid of nodes. The core task here is to classify each of the $N^2$ grid nodes as either 'interior' or 'exterior' to the polygonal boundary $\\partial A$. For this, a robust and efficient scanline algorithm is employed. For each horizontal grid line, its intersections with the polygon edges are calculated. These intersection points, when sorted by their $x$-coordinate, define intervals along the grid line that lie inside the domain. Grid nodes falling within these intervals are marked as interior. This method is substantially more efficient than a naive per-point ray-casting test.\n\n3.  **Finite Difference System Assembly**: The governing Poisson equation, $\\nabla^2 \\phi = -2G\\theta$, is discretized on the set of identified interior grid nodes using the five-point finite difference formula. For an interior node $u_k$ corresponding to grid position $(i,j)$, the equation is:\n    $$ \\phi_{i+1,j} + \\phi_{i-1,j} + \\phi_{i,j+1} + \\phi_{i,j-1} - 4\\phi_{i,j} = h^2(-2G\\theta) $$\n    If a neighboring node is exterior to the domain, the homogeneous Dirichlet condition $\\phi=0$ is enforced, and its value is taken as $0$. This process is systematically applied to all $N_{int}$ interior nodes, resulting in a sparse, symmetric linear system of equations $A u = b$. Here, $u$ is a vector of the unknown $\\phi$ values at the interior nodes, $A$ is the $N_{int} \\times N_{int}$ coefficient matrix (the unscaled negative Laplacian operator), and $b$ is the right-hand side vector with each entry equal to $h^2(-2G\\theta)$. The matrix $A$ is constructed using a sparse format, such as `lil_matrix`, for computational efficiency.\n\n4.  **Solving the Linear System**: The assembled sparse linear system is large but well-structured. The matrix $A$ is negative-definite. We solve $A u = b$ for the unknown vector $u$ using a high-performance direct sparse solver, specifically `scipy.sparse.linalg.spsolve`, which is well-suited for this class of problems. The solution vector $u$ provides the approximate values of the stress function $\\phi$ at each interior grid node.\n\n5.  **Post-Processing and Validation**: With the solution vector $u$ obtained, the final quantities are computed.\n    - The discrete membrane integral is calculated as a Riemann sum: $I_h = h^2 \\sum_{k=1}^{N_{int}} u_k$.\n    - The torsional constant is then approximated as $J = \\dfrac{2}{G\\theta} I_h$.\n    - The discrete energy identity is validated. The numerical energy is computed via the quadratic form $E_h = u^\\top(-A)u$. This is compared against the term $2G\\theta I_h$. The relative residual $r = |E_h - 2G\\theta I_h| / E_h$ is calculated. As established in the validation, this residual primarily quantifies the numerical precision of the linear solver.\n    - A pass flag $p$ is set to $1$ if $r$ is below the specified tolerance $\\tau = 10^{-8}$ and $0$ otherwise.\n    \nThis procedure is applied to each of the three test cases, and the results $[J, r, p]$ for each case are aggregated into the specified final output format.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.interpolate import CubicSpline\nfrom scipy.sparse import lil_matrix\nfrom scipy.sparse.linalg import spsolve\n\ndef solve():\n    # Problem Parameters\n    G = 26e9  # Shear modulus in Pa\n    theta = 0.01  # Twist per unit length in rad/m\n    L = 0.06  # Bounding box half-width in m\n    N = 161  # Grid dimension\n    M = 800  # Number of spline samples for polygon\n    tau = 1e-8  # Tolerance for residual check\n\n    # Discretization setup\n    h = 2 * L / (N - 1)\n    grid_coords = np.linspace(-L, L, N)\n    xx, yy = np.meshgrid(grid_coords, grid_coords)\n    grid_points = np.vstack([xx.ravel(), yy.ravel()]).T\n\n    # --- Test Case Definitions ---\n    \n    # Case 1: Smooth trifoil\n    def get_case1_points():\n        K = 12\n        R = 0.04\n        a = 0.2\n        alphas = np.linspace(0, 2 * np.pi, K, endpoint=False)\n        radii = R * (1 + a * np.cos(3 * alphas))\n        x_pts = radii * np.cos(alphas)\n        y_pts = radii * np.sin(alphas)\n        return np.vstack([np.append(x_pts, x_pts[0]), np.append(y_pts, y_pts[0])]).T\n\n    # Case 2: Rounded rectangle\n    def get_case2_points():\n        w = 0.08\n        h_r = 0.05\n        rho = 0.012\n        w_half, h_half = w / 2, h_r / 2\n        \n        points = [\n            (w_half - rho, h_half), (w_half, h_half), (w_half, h_half - rho),\n            (w_half, 0), (w_half, -h_half + rho), (w_half, -h_half),\n            (w_half - rho, -h_half), (0, -h_half), (-w_half + rho, -h_half),\n            (-w_half, -h_half), (-w_half, -h_half + rho), (-w_half, 0),\n            (-w_half, h_half - rho), (-w_half, h_half), (-w_half + rho, h_half),\n            (0, h_half), (w_half - rho, h_half)\n        ]\n        return np.array(points)\n\n    # Case 3: Slender four-lobed clover\n    def get_case3_points():\n        K = 16\n        R_c = 0.035\n        b = 0.3\n        s = 1.4\n        alphas = np.linspace(0, 2 * np.pi, K, endpoint=False)\n        radii = R_c * (1 + b * np.cos(4 * alphas))\n        x_pts = s * radii * np.cos(alphas)\n        y_pts = radii * np.sin(alphas)\n        return np.vstack([np.append(x_pts, x_pts[0]), np.append(y_pts, y_pts[0])]).T\n\n    test_cases_points_gen = [get_case1_points, get_case2_points, get_case3_points]\n    \n    final_results = []\n\n    for get_points_func in test_cases_points_gen:\n        control_points = get_points_func()\n        \n        # 1. Domain Boundary Construction\n        t = np.arange(control_points.shape[0])\n        cs_x = CubicSpline(t, control_points[:, 0], bc_type='periodic')\n        cs_y = CubicSpline(t, control_points[:, 1], bc_type='periodic')\n        \n        fine_t = np.linspace(t[0], t[-1], M)\n        poly_verts = np.vstack([cs_x(fine_t), cs_y(fine_t)]).T\n\n        # 2. Grid Generation and Interior Node Identification (Scanline Algorithm)\n        is_interior = np.zeros(N * N, dtype=bool)\n        path = poly_verts\n\n        for j in range(N):\n            y = grid_coords[j]\n            intersections = []\n            for i in range(len(path) - 1):\n                p1 = path[i]\n                p2 = path[i+1]\n                if p1[1] == p2[1]: continue # Horizontal edge\n                if min(p1[1], p2[1]) < y <= max(p1[1], p2[1]):\n                    x_intersect = (y - p1[1]) * (p2[0] - p1[0]) / (p2[1] - p1[1]) + p1[0]\n                    intersections.append(x_intersect)\n            \n            intersections.sort()\n            \n            for k in range(0, len(intersections), 2):\n                if k + 1 < len(intersections):\n                    x_start, x_end = intersections[k], intersections[k+1]\n                    # Find grid indices for x_start and x_end\n                    idx_start = np.searchsorted(grid_coords, x_start, side='left')\n                    idx_end = np.searchsorted(grid_coords, x_end, side='right')\n                    start_linear_idx = j * N + idx_start\n                    end_linear_idx = j * N + idx_end\n                    is_interior[start_linear_idx:end_linear_idx] = True\n        \n        interior_indices = np.where(is_interior)[0]\n        n_interior = len(interior_indices)\n        \n        # Map from 2D grid index (as a single int) to 1D matrix index\n        map_2d_to_1d = -np.ones(N*N, dtype=int)\n        map_2d_to_1d[interior_indices] = np.arange(n_interior)\n\n        # 3. Finite Difference System Assembly\n        A = lil_matrix((n_interior, n_interior))\n        b = np.full(n_interior, h**2 * (-2 * G * theta))\n\n        for k in range(n_interior):\n            idx_2d = interior_indices[k]\n            row, col = divmod(idx_2d, N)\n\n            # Diagonal element\n            A[k, k] = -4\n\n            # Neighbors\n            neighbors = [(row, col-1), (row, col+1), (row-1, col), (row+1, col)]\n            for r_n, c_n in neighbors:\n                if 0 <= r_n < N and 0 <= c_n < N:\n                    neighbor_idx_2d = r_n * N + c_n\n                    if is_interior[neighbor_idx_2d]:\n                        idx_1d_neighbor = map_2d_to_1d[neighbor_idx_2d]\n                        A[k, idx_1d_neighbor] = 1\n\n        # 4. Solving the Linear System\n        A = A.tocsc()\n        u = spsolve(A, b)\n\n        # 5. Post-Processing and Validation\n        I_h = h**2 * np.sum(u)\n        J = (2 / (G * theta)) * I_h\n        \n        # Energy calculation E_h = u.T * (-A) * u\n        neg_A_u = -A.dot(u)\n        E_h = u.dot(neg_A_u)\n        \n        # Validation\n        V = 2 * G * theta * I_h\n        r = np.abs(E_h - V) / E_h if E_h != 0 else 0.0\n        p = 1 if r <= tau else 0\n        \n        final_results.append([J, r, p])\n\n    # Format the final output string\n    output_str = \"[\" + \",\".join([f\"[{J:.10e},{r:.10e},{p}]\" for J, r, p in final_results]) + \"]\"\n    print(output_str)\n\nsolve()\n```", "id": "2698611"}]}