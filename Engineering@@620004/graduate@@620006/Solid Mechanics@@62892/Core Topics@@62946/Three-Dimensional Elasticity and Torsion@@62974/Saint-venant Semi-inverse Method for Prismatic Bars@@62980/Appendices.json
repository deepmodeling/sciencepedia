{"hands_on_practices": [{"introduction": "The torsion of a prismatic bar with a circular cross-section is the canonical example of Saint-Venant's semi-inverse method. This exercise guides you through a first-principles derivation to demonstrate a remarkable and foundational result: circular cross-sections do not warp under torsion. By methodically applying the steps of assuming a displacement field, deriving strains and stresses, and satisfying equilibrium and boundary conditions, you will build a solid understanding of the theory and prove why simpler engineering models are exact for this specific, yet crucial, geometry [@problem_id:2683235].", "problem": "A straight, prismatic, circular bar of radius $a$ and length $L$ made of a homogeneous, isotropic, linearly elastic solid with shear modulus $G$ is subjected to equal and opposite end torques of magnitude $T$ about the longitudinal axis $\\hat{\\boldsymbol{z}}$. There are no body forces, and the lateral cylindrical surface is traction-free. Using the Saint-Venant semi-inverse approach to torsion of prismatic bars, proceed as follows starting only from the fundamental balance of linear momentum in the absence of body forces, the small-strain kinematics, and Hooke’s law for shear:\n- Assume a uniform twist per unit length $\\alpha$ and allow for a possible longitudinal warping displacement $\\omega(x,y)$, with the displacement field consistent with rigid cross-sectional rotation about $\\hat{\\boldsymbol{z}}$ and warping along $\\hat{\\boldsymbol{z}}$.\n- Derive the governing boundary-value problem that $\\omega(x,y)$ must satisfy, together with the traction-free boundary condition on the circular lateral surface.\n- Use those relations to deduce whether $\\omega(x,y)$ vanishes identically for the circular cross-section.\n- Enforce the resultant torque condition to determine the shear stress distribution.\n\nReport your final result as the pair consisting of the warping function and the circumferential shear stress distribution as a function of the radial coordinate $r$: first $\\omega(x,y)$, then $\\tau_{z\\theta}(r)$. Your final answer must be a single closed-form analytic expression. Do not include units. If you choose a constant for $\\omega$, set it to $0$ without loss of generality.", "solution": "The problem as stated is a standard exercise in the theory of elasticity. It is self-contained, scientifically grounded, and well-posed. The validation is affirmative, and I will proceed with the solution.\n\nThe problem requires a solution for the torsion of a prismatic bar with a circular cross-section using Saint-Venant's semi-inverse method. The bar has a radius $a$ and is subjected to end torques $T$. The longitudinal axis is the $z$-axis.\n\nFirst, we establish the displacement field. Following Saint-Venant's hypothesis for pure torsion, the displacement of a point $(x,y,z)$ is assumed to be composed of a rigid rotation of the cross-section about the $z$-axis, proportional to the distance $z$ from one end, and a longitudinal displacement or \"warping\" that is independent of $z$. For a small angle of twist per unit length, $\\alpha$, the displacement components $(u_x, u_y, u_z)$ are:\n$$\nu_x = -\\alpha z y \\\\\nu_y = \\alpha z x \\\\\nu_z = \\omega(x,y)\n$$\nHere, $\\omega(x,y)$ is the warping function, which describes the out-of-plane deformation of the cross-section.\n\nNext, we compute the components of the infinitesimal strain tensor, $\\varepsilon_{ij} = \\frac{1}{2}(\\frac{\\partial u_i}{\\partial x_j} + \\frac{\\partial u_j}{\\partial x_i})$.\n$$\n\\varepsilon_{xx} = \\frac{\\partial u_x}{\\partial x} = 0 \\\\\n\\varepsilon_{yy} = \\frac{\\partial u_y}{\\partial y} = 0 \\\\\n\\varepsilon_{zz} = \\frac{\\partial u_z}{\\partial z} = \\frac{\\partial \\omega(x,y)}{\\partial z} = 0 \\\\\n\\varepsilon_{xy} = \\frac{1}{2}\\left(\\frac{\\partial u_x}{\\partial y} + \\frac{\\partial u_y}{\\partial x}\\right) = \\frac{1}{2}(-\\alpha z + \\alpha z) = 0\n$$\nThe only non-vanishing strain components are the shear strains related to the $z$-direction:\n$$\n\\varepsilon_{xz} = \\frac{1}{2}\\left(\\frac{\\partial u_x}{\\partial z} + \\frac{\\partial u_z}{\\partial x}\\right) = \\frac{1}{2}\\left(-\\alpha y + \\frac{\\partial \\omega}{\\partial x}\\right) \\\\\n\\varepsilon_{yz} = \\frac{1}{2}\\left(\\frac{\\partial u_y}{\\partial z} + \\frac{\\partial u_z}{\\partial y}\\right) = \\frac{1}{2}\\left(\\alpha x + \\frac{\\partial \\omega}{\\partial y}\\right)\n$$\n\nFor a homogeneous, isotropic, linearly elastic material, Hooke's law relates stress $\\sigma_{ij}$ to strain $\\varepsilon_{ij}$. As all normal strain components and $\\varepsilon_{xy}$ are zero, the trace of the strain tensor $\\varepsilon_{kk} = \\varepsilon_{xx} + \\varepsilon_{yy} + \\varepsilon_{zz} = 0$. Consequently, all normal stress components $\\sigma_{xx}, \\sigma_{yy}, \\sigma_{zz}$ are zero, and the shear stress $\\sigma_{xy}$ is also zero. The only non-zero stress components are:\n$$\n\\sigma_{xz} = 2G\\varepsilon_{xz} = G\\left(\\frac{\\partial \\omega}{\\partial x} - \\alpha y\\right) \\\\\n\\sigma_{yz} = 2G\\varepsilon_{yz} = G\\left(\\frac{\\partial \\omega}{\\partial y} + \\alpha x\\right)\n$$\nwhere $G$ is the shear modulus.\n\nThese stress components must satisfy the equations of equilibrium, $\\frac{\\partial \\sigma_{ij}}{\\partial x_j} = 0$, in the absence of body forces. The first two equilibrium equations (in the $x$ and $y$ directions) are satisfied identically since all stress components are independent of $z$. The third equilibrium equation (in the $z$ direction) is:\n$$\n\\frac{\\partial \\sigma_{xz}}{\\partial x} + \\frac{\\partial \\sigma_{yz}}{\\partial y} + \\frac{\\partial \\sigma_{zz}}{\\partial z} = 0\n$$\nSubstituting the expressions for the stresses:\n$$\n\\frac{\\partial}{\\partial x}\\left[G\\left(\\frac{\\partial \\omega}{\\partial x} - \\alpha y\\right)\\right] + \\frac{\\partial}{\\partial y}\\left[G\\left(\\frac{\\partial \\omega}{\\partial y} + \\alpha x\\right)\\right] = 0\n$$\nAs $G$ and $\\alpha$ are constants, this simplifies to:\n$$\nG\\left(\\frac{\\partial^2 \\omega}{\\partial x^2} - 0\\right) + G\\left(\\frac{\\partial^2 \\omega}{\\partial y^2} + 0\\right) = 0\n$$\nThis yields Laplace's equation for the warping function over the cross-sectional domain $\\mathcal{D}$:\n$$\n\\nabla^2 \\omega = \\frac{\\partial^2 \\omega}{\\partial x^2} + \\frac{\\partial^2 \\omega}{\\partial y^2} = 0 \\quad \\text{for } (x,y) \\in \\mathcal{D}\n$$\n\nThe boundary condition is that the lateral surface of the bar is traction-free. The traction vector on this surface is given by $\\boldsymbol{t} = \\boldsymbol{\\sigma} \\boldsymbol{n}$, where $\\boldsymbol{n}$ is the outward unit normal vector to the boundary curve $\\partial\\mathcal{D}$. For the component of traction along the $z$-axis, we must have $t_z = 0$.\n$$\nt_z = \\sigma_{xz} n_x + \\sigma_{yz} n_y = 0\n$$\nFor a circular cross-section of radius $a$, the boundary is the circle $x^2 + y^2 = a^2$, and the outward unit normal has components $n_x = x/a$ and $n_y = y/a$. Substituting this and the stress expressions into the boundary condition gives:\n$$\nG\\left(\\frac{\\partial \\omega}{\\partial x} - \\alpha y\\right)\\frac{x}{a} + G\\left(\\frac{\\partial \\omega}{\\partial y} + \\alpha x\\right)\\frac{y}{a} = 0\n$$\n$$\n\\left(\\frac{\\partial \\omega}{\\partial x}\\right)x - \\alpha yx + \\left(\\frac{\\partial \\omega}{\\partial y}\\right)y + \\alpha xy = 0\n$$\n$$\nx\\frac{\\partial \\omega}{\\partial x} + y\\frac{\\partial \\omega}{\\partial y} = 0\n$$\nThis boundary condition can be expressed in polar coordinates $(r, \\theta)$ as $r\\frac{\\partial \\omega}{\\partial r} = 0$ on the boundary $r=a$. Since $r=a \\neq 0$, the condition simplifies to $\\frac{\\partial \\omega}{\\partial r} = 0$ at $r=a$.\n\nThe governing boundary-value problem for $\\omega$ is thus:\nPDE: $\\nabla^2 \\omega = 0$ for $r < a$.\nBC: $\\frac{\\partial \\omega}{\\partial r} = 0$ at $r=a$.\n\nTo deduce whether $\\omega$ vanishes, we use Green's first identity over the domain $\\mathcal{D}$:\n$$\n\\iint_{\\mathcal{D}} (\\omega \\nabla^2 \\omega + |\\nabla \\omega|^2) \\,dA = \\oint_{\\partial\\mathcal{D}} \\omega \\frac{\\partial \\omega}{\\partial n} \\,ds\n$$\nHere, $\\frac{\\partial \\omega}{\\partial n}$ is the normal derivative, which is $\\frac{\\partial \\omega}{\\partial r}$. Since $\\nabla^2 \\omega = 0$ in $\\mathcal{D}$ and $\\frac{\\partial \\omega}{\\partial r} = 0$ on $\\partial\\mathcal{D}$, the identity reduces to:\n$$\n\\iint_{\\mathcal{D}} |\\nabla \\omega|^2 \\,dA = 0\n$$\nThe integrand $|\\nabla \\omega|^2 = (\\frac{\\partial \\omega}{\\partial x})^2 + (\\frac{\\partial \\omega}{\\partial y})^2$ is non-negative. For its integral over the domain to be zero, the integrand must be identically zero throughout the domain. Therefore, $\\nabla \\omega = 0$ for all $(x,y)$ in the cross-section. This implies that $\\omega(x,y)$ must be a constant. A constant warping represents a rigid-body translation along the $z$-axis, which induces no stress and can be set to zero without loss of generality, as specified in the problem statement. Thus, for a circular cross-section:\n$$\n\\omega(x,y) = 0\n$$\nThis signifies that circular cross-sections do not warp under torsion.\n\nWith $\\omega=0$, the stress components simplify to:\n$$\n\\sigma_{xz} = -G \\alpha y \\\\\n\\sigma_{yz} = G \\alpha x\n$$\nThe resultant torque $T$ on the cross-section is the integral of the moments produced by these shear stresses:\n$$\nT = \\iint_{\\mathcal{D}} (x \\sigma_{yz} - y \\sigma_{xz}) \\,dA = \\iint_{\\mathcal{D}} (x(G \\alpha x) - y(-G \\alpha y)) \\,dA = G \\alpha \\iint_{\\mathcal{D}} (x^2 + y^2) \\,dA\n$$\nThe integral is the polar moment of inertia $J$ of the circular cross-section. In polar coordinates:\n$$\nJ = \\int_0^{2\\pi} \\int_0^a r^2 \\cdot r \\,dr \\,d\\theta = 2\\pi \\left[\\frac{r^4}{4}\\right]_0^a = \\frac{\\pi a^4}{2}\n$$\nThus, $T = G \\alpha J$, which relates the twist per unit length $\\alpha$ to the applied torque $T$:\n$$\n\\alpha = \\frac{T}{GJ} = \\frac{2T}{G\\pi a^4}\n$$\nTo find the shear stress distribution, we express the stresses in cylindrical coordinates. The radial shear stress $\\tau_{zr}$ is:\n$$\n\\tau_{zr} = \\sigma_{xz} \\cos\\theta + \\sigma_{yz} \\sin\\theta = (-G \\alpha y) \\cos\\theta + (G \\alpha x) \\sin\\theta = -G \\alpha (r \\sin\\theta) \\cos\\theta + G \\alpha (r \\cos\\theta) \\sin\\theta = 0\n$$\nThe circumferential shear stress $\\tau_{z\\theta}$ is:\n$$\n\\tau_{z\\theta} = -\\sigma_{xz} \\sin\\theta + \\sigma_{yz} \\cos\\theta = -(-G \\alpha y) \\sin\\theta + (G \\alpha x) \\cos\\theta = G \\alpha (y \\sin\\theta + x \\cos\\theta)\n$$\n$$\n\\tau_{z\\theta} = G \\alpha (r \\sin^2\\theta + r \\cos^2\\theta) = G \\alpha r\n$$\nSubstituting the expression for $\\alpha$:\n$$\n\\tau_{z\\theta}(r) = G \\left(\\frac{T}{GJ}\\right) r = \\frac{T r}{J} = \\frac{T r}{\\frac{1}{2}\\pi a^4} = \\frac{2Tr}{\\pi a^4}\n$$\nThe final results are the warping function, which is zero, and the circumferential shear stress as a function of the radial coordinate $r$.\n\nThe solution pair $(\\omega(x,y), \\tau_{z\\theta}(r))$ is:\nFirst element: $\\omega(x,y) = 0$.\nSecond element: $\\tau_{z\\theta}(r) = \\frac{2Tr}{\\pi a^4}$.", "answer": "$$\n\\boxed{\n\\begin{pmatrix}\n0 & \\frac{2Tr}{\\pi a^{4}}\n\\end{pmatrix}\n}\n$$", "id": "2683235"}, {"introduction": "Saint-Venant's principle is the cornerstone that makes the semi-inverse method so powerful, allowing us to replace complex, localized end tractions with simpler, statically equivalent resultants. This practice moves beyond qualitative statements to provide a quantitative, hands-on understanding of this principle. You will design a computational experiment to measure the rate at which stress perturbations decay, linking this physical phenomenon to a fundamental mathematical eigenvalue problem on the cross-section [@problem_id:2683210].", "problem": "Consider a straight prismatic bar of length $L$ with a simply connected cross-section $\\Omega \\subset \\mathbb{R}^2$ lying in the $x$–$y$ plane, the axis being the $z$-axis. The bar is made of a homogeneous, isotropic, linearly elastic material and is subject to no body forces. The base loading is a constant end torque generating pure Saint-Venant torsion (no lateral tractions), to which is superposed a localized end traction perturbation applied only at $z = 0$ over the end face. The perturbation is self-equilibrated (zero net resultant force and zero net resultant moment) and its lateral tractions are zero. The goal is to quantify the decay of the perturbation with distance $z$ into the bar using Saint-Venant's semi-inverse method.\n\nStarting from the three-dimensional linear elasticity equations (equilibrium with zero body force, linear kinematics, and Hooke’s law) and the Saint-Venant semi-inverse ansatz for prismatic bars, show that any self-equilibrated end traction perturbation can be decomposed into modes that decay exponentially like $\\mathrm{e}^{-k z}$. Show that the admissible decay rates $k$ are linked to a two-dimensional eigenproblem on the cross-section $\\Omega$ with homogeneous Neumann Boundary Conditions (BC) for the scalar Laplace operator. Conclude that the slowest decay is governed by the smallest positive eigenvalue $\\lambda_1$ of that problem, via $k_1 = \\sqrt{\\lambda_1}$, excluding rigid modes. Explain why the base torsion solution does not alter these decay rates for the superposed perturbation under the given assumptions.\n\nDesign a computational experiment in which the observable is the amplitude of the perturbation measured on a cross-section at distance $z$ from $z = 0$. Define the observable amplitude $A(z)$ as the $L^2$ norm over $\\Omega$ of the perturbation’s shear traction field on the cross-section at position $z$, normalized by its value at $z = 0$. Under the mode decomposition, argue that for sufficiently large $z$ the amplitude satisfies\n$$\nA(z) \\sim \\mathrm{e}^{-k_1 z},\n$$\nand the corresponding elastic energy density integrated over $\\Omega$ scales like\n$$\n\\mathcal{E}(z) \\sim \\mathrm{e}^{-2 k_1 z}.\n$$\nHence, two direct observables to quantify decay rates are $A(z)$ and $\\mathcal{E}(z)$, and the slope of $\\ln A(z)$ versus $z$ gives $-k_1$.\n\nFor implementation and testability, restrict $\\Omega$ to a rectangle of side lengths $a$ and $b$ (in $\\mathrm{m}$), aligned with the $x$ and $y$ axes, and compute $k_1$ by obtaining the smallest positive eigenvalue of the Neumann Laplacian on that rectangle (you may use analytical separation of variables or a numerical method of your choice). Then, for a given distance $z$ (in $\\mathrm{m}$), predict the observables\n$$\nA(z) = \\mathrm{e}^{-k_1 z}, \\quad \\mathcal{E}(z) = \\mathrm{e}^{-2 k_1 z}.\n$$\nAll distances must be handled in $\\mathrm{m}$, and the outputs $A(z)$ and $\\mathcal{E}(z)$ are dimensionless.\n\nImplement a program that, for each test case $(a,b,z)$, computes and returns the pair $[A(z), \\mathcal{E}(z)]$.\n\nTest Suite:\n- Case 1 (happy path, moderate size): $(a,b,z) = (\\,0.2\\,\\mathrm{m},\\,0.2\\,\\mathrm{m},\\,0.5\\,\\mathrm{m}\\,)$.\n- Case 2 (anisotropy in cross-section): $(a,b,z) = (\\,0.4\\,\\mathrm{m},\\,0.2\\,\\mathrm{m},\\,0.5\\,\\mathrm{m}\\,)$.\n- Case 3 (slender in $b$ but long reach into the bar): $(a,b,z) = (\\,1.0\\,\\mathrm{m},\\,0.1\\,\\mathrm{m},\\,1.0\\,\\mathrm{m}\\,)$.\n- Case 4 (large cross-section, short distance): $(a,b,z) = (\\,2.0\\,\\mathrm{m},\\,2.0\\,\\mathrm{m},\\,0.1\\,\\mathrm{m}\\,)$.\n\nYour program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets. Each test case’s result must be a two-element sublist in the order $[A(z),\\mathcal{E}(z)]$. There must be no spaces anywhere in the line. For example, the output format must look like\n$$\n[\\,[A_1,\\mathcal{E}_1],[A_2,\\mathcal{E}_2],[A_3,\\mathcal{E}_3],[A_4,\\mathcal{E}_4]\\,].\n$$", "solution": "The problem presented is a standard exercise in the application of Saint-Venant's principle to a prismatic bar within the framework of linear elasticity. The validity of the problem statement is confirmed, as it is scientifically grounded, well-posed, and objective. We shall proceed with the derivation and subsequent computation.\n\nThe mechanics of the bar are governed by the three-dimensional equations of linear elasticity. With no body forces, the equilibrium equation for the stress tensor $\\boldsymbol{\\sigma}$ is $\\nabla \\cdot \\boldsymbol{\\sigma} = \\mathbf{0}$. The material is homogeneous and isotropic, so Hooke's law relates stress to the strain tensor $\\boldsymbol{\\epsilon}$ by $\\boldsymbol{\\sigma} = \\lambda_L \\mathrm{tr}(\\boldsymbol{\\epsilon})\\mathbf{I} + 2\\mu\\boldsymbol{\\epsilon}$, where $\\lambda_L$ and $\\mu$ are the Lamé parameters. The strain is derived from the displacement field $\\mathbf{u}$ via the linear kinematic relation $\\boldsymbol{\\epsilon} = \\frac{1}{2}(\\nabla \\mathbf{u} + (\\nabla \\mathbf{u})^T)$.\n\nThe problem concerns a self-equilibrated perturbation superposed on a pure torsion state. Due to the linearity of the governing equations, the principle of superposition applies. The base torsion solution and the perturbation solution can be analyzed independently. The perturbation displacement field $\\mathbf{u}_p$ must satisfy the governing equations with zero traction on the lateral surfaces of the bar and a self-equilibrated traction distribution on the end face at $z=0$. Saint-Venant's principle posits that such localized, self-equilibrated loads produce effects that decay with distance from the point of application.\n\nTo formalize this, we seek solutions for the perturbation field of the form $\\mathbf{u}(\\mathbf{x}) = \\mathbf{v}(x,y) e^{-kz}$, which represents a mode of deformation that decays exponentially along the bar's axis, the $z$-axis. Substituting this ansatz into the Navier equations of elasticity, $\\mu \\nabla^2 \\mathbf{u} + (\\lambda_L + \\mu) \\nabla(\\nabla \\cdot \\mathbf{u}) = \\mathbf{0}$, results in a two-dimensional generalized eigenvalue problem for the decay rate squared, $k^2$, on the cross-section $\\Omega$.\n\nA complete derivation using displacement potentials (for instance, the Papkovich-Neuber representation) demonstrates that the problem of finding the admissible decay rates $k$ can be reduced, under appropriate conditions, to solving for the eigenvalues of the two-dimensional scalar Laplacian operator on the cross-section $\\Omega$. The boundary condition of zero traction on the lateral surface, $\\boldsymbol{\\sigma}\\mathbf{n} = \\mathbf{0}$ where $\\mathbf{n}$ is the normal to the boundary $\\partial\\Omega$ in the $x$-$y$ plane, translates to homogeneous Neumann boundary conditions for the underlying potential functions. Thus, we must solve the eigenproblem:\n$$\n-\\nabla^2 \\psi = \\lambda \\psi \\quad \\text{in } \\Omega\n$$\n$$\n\\frac{\\partial \\psi}{\\partial n} = 0 \\quad \\text{on } \\partial\\Omega\n$$\nwhere $\\nabla^2 = \\partial^2/\\partial x^2 + \\partial^2/\\partial y^2$. This problem yields a spectrum of non-negative eigenvalues $0 = \\lambda_0 < \\lambda_1 \\leq \\lambda_2 \\leq \\dots$. The decay rates are related to these eigenvalues by $k_n = \\sqrt{\\lambda_n}$.\n\nThe eigenvalue $\\lambda_0=0$, corresponding to a constant eigenfunction, gives $k_0=0$. This zero decay rate corresponds to non-decaying solutions: the four rigid-body motions (three translations and one rotation about the $z$-axis) and the two fundamental Saint-Venant solutions of extension and bending. The Saint-Venant torsion solution is also a zero-energy mode but is treated separately. The condition that the end load perturbation is self-equilibrated means it has zero resultant force and moment. This orthogonality condition ensures that the expansion of the end load into the eigenfunctions does not contain components corresponding to $\\lambda_0=0$.\n\nTherefore, the perturbation solution is a superposition of modes with positive decay rates $k_n = \\sqrt{\\lambda_n}$ for $n \\ge 1$. For sufficiently large distances $z$ from the end face, the mode with the smallest positive decay rate will dominate the behavior of the solution. This slowest decay rate is $k_1 = \\sqrt{\\lambda_1}$, where $\\lambda_1$ is the smallest positive eigenvalue of the Neumann-Laplacian on $\\Omega$.\n\nThe observables $A(z)$ and $\\mathcal{E}(z)$ are defined based on the perturbation field. $A(z)$ is the normalized $L^2$ norm of the shear tractions $(\\sigma_{xz}, \\sigma_{yz})$ on the cross-section at $z$. For large $z$, the stress components are dominated by the first mode, so $\\boldsymbol{\\sigma}_{\\text{pert}} \\sim e^{-k_1 z}$. The $L^2$ norm involves an integral of $\\sigma_{xz}^2 + \\sigma_{yz}^2 \\sim e^{-2k_1 z}$. Taking the square root, after normalization, yields $A(z) \\sim e^{-k_1 z}$. The elastic energy density $W = \\frac{1}{2}\\boldsymbol{\\sigma}:\\boldsymbol{\\epsilon}$ involves products of stress and strain components, both of which decay as $e^{-k_1 z}$. Thus, $W \\sim e^{-2k_1 z}$, and its integral over the cross-section, $\\mathcal{E}(z)$, also follows this scaling. The problem statement defines $A(z)$ and $\\mathcal{E}(z)$ as the limiting forms $A(z) = e^{-k_1 z}$ and $\\mathcal{E}(z) = e^{-2k_1 z}$, which we will use for computation.\n\nFor the specified rectangular cross-section $\\Omega = [0, a] \\times [0, b]$, the eigenvalue problem is solved by separation of variables. Let $\\psi(x,y) = X(x)Y(y)$. The boundary value problem separates into two one-dimensional Sturm-Liouville problems:\n$X''(x) + \\lambda_x X(x) = 0$ with $X'(0) = X'(a) = 0$.\n$Y''(y) + \\lambda_y Y(y) = 0$ with $Y'(0) = Y'(b) = 0$.\nThe solutions yield eigenvalues $\\lambda_{x,m} = (\\frac{m\\pi}{a})^2$ for $m=0, 1, 2, \\dots$ and $\\lambda_{y,n} = (\\frac{n\\pi}{b})^2$ for $n=0, 1, 2, \\dots$. The eigenvalues for the two-dimensional problem are the sums $\\lambda_{m,n} = \\lambda_{x,m} + \\lambda_{y,n} = (\\frac{m\\pi}{a})^2 + (\\frac{n\\pi}{b})^2$.\n\nThe smallest eigenvalue is $\\lambda_{0,0} = 0$, which is excluded. The smallest positive (non-zero) eigenvalue, $\\lambda_1$, is found by choosing $(m,n)$ to be either $(1,0)$ or $(0,1)$:\n$$\n\\lambda_1 = \\min(\\lambda_{1,0}, \\lambda_{0,1}) = \\min\\left(\\left(\\frac{\\pi}{a}\\right)^2, \\left(\\frac{\\pi}{b}\\right)^2\\right) = \\pi^2 \\min\\left(\\frac{1}{a^2}, \\frac{1}{b^2}\\right) = \\frac{\\pi^2}{(\\max(a,b))^2}\n$$\nThe slowest decay rate is therefore:\n$$\nk_1 = \\sqrt{\\lambda_1} = \\frac{\\pi}{\\max(a,b)}\n$$\nThis result is physically intuitive: the characteristic length for decay is governed by the largest dimension of the cross-section.\n\nWith this, we can compute the observables for the given test cases. For each triplet $(a,b,z)$, we first find $k_1 = \\pi/\\max(a,b)$ and then compute $A(z) = e^{-k_1 z}$ and $\\mathcal{E}(z) = e^{-2k_1 z}$.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes the decay observables for self-equilibrated end perturbations\n    on a prismatic bar with a rectangular cross-section.\n    \"\"\"\n    # Define the test cases from the problem statement.\n    # Each case is a tuple (a, b, z) where a and b are the side lengths\n    # of the rectangular cross-section in meters, and z is the distance\n    # along the bar in meters.\n    test_cases = [\n        (0.2, 0.2, 0.5),  # Case 1\n        (0.4, 0.2, 0.5),  # Case 2\n        (1.0, 0.1, 1.0),  # Case 3\n        (2.0, 2.0, 0.1),  # Case 4\n    ]\n\n    results = []\n    for case in test_cases:\n        a, b, z = case\n\n        # The slowest decay rate k1 is determined by the largest dimension of the\n        # cross-section, according to the solution of the Neumann-Laplacian\n        # eigenvalue problem on a rectangle.\n        # k1 = sqrt(lambda1) where lambda1 = pi^2 / (max(a,b))^2.\n        # So, k1 = pi / max(a,b).\n        d_max = max(a, b)\n        k1 = np.pi / d_max\n\n        # The amplitude of the perturbation A(z) is assumed to decay as exp(-k1*z).\n        # This is the asymptotic behavior for large z, dominated by the slowest mode.\n        A_z = np.exp(-k1 * z)\n\n        # The integrated elastic energy density E(z) decays as exp(-2*k1*z) because\n        # energy density is quadratic in stress/strain fields, which themselves\n        # decay as exp(-k1*z).\n        E_z = np.exp(-2 * k1 * z)\n\n        results.append([A_z, E_z])\n\n    # Final print statement in the exact required format.\n    # The format is a single line: [[A_1,E_1],[A_2,E_2],[A_3,E_3],[A_4,E_4]]\n    # with no spaces.\n    output_str = f\"[{','.join([f'[{r[0]},{r[1]}]' for r in results])}]\"\n    print(output_str)\n\nsolve()\n```", "id": "2683210"}, {"introduction": "While analytical solutions are invaluable for building intuition, most engineering problems involving complex geometries require numerical methods. This practice delves into solving the Saint-Venant torsion problem using the powerful Finite Element Method (FEM). You will implement a standard primal formulation to compute the torsional properties of a bar, translating the governing differential equation for a potential function into a solvable matrix system and gaining practical experience in computational mechanics [@problem_id:2683204].", "problem": "Consider the Saint-Venant torsion of a straight prismatic bar with constant cross-section $\\Omega$ and shear modulus $G$, subjected to a torque $T$. The problem can be formulated using an auxiliary potential function, $\\psi(x,y)$, which satisfies the Poisson equation $\\nabla^2\\psi = -2$ within the cross-section $\\Omega$, and the Dirichlet boundary condition $\\psi = 0$ on the boundary $\\Gamma = \\partial\\Omega$.\nThe torsional rigidity $J_t$ of the cross-section is then given by the integral of this potential function over the domain: $J_t = \\int_{\\Omega} \\psi \\, \\mathrm{d}A$. The twist per unit length $\\theta$ is subsequently found from the fundamental relation $T = G \\theta J_t$.\n\nYour task is to design and implement a finite element method using bilinear $Q_1$ elements on a uniform rectangular grid ($\\Omega = (0,a) \\times (0,b)$ with $N_x$ by $N_y$ elements) to solve for $\\psi$.\nBegin from the following:\n- The governing equation $\\nabla^2\\psi = -2$ in $\\Omega$ with $\\psi=0$ on $\\Gamma$.\n- The standard variational formulation for the Poisson equation.\n- The relation $T = G \\theta J_t$ where $J_t = \\int_{\\Omega} \\psi \\, \\mathrm{d}A$.\n\nFormulate the variational problem, assemble the global stiffness matrix $\\mathbf{K}$ and load vector $\\mathbf{F}$ for the system $\\mathbf{K}\\boldsymbol{\\Psi} = \\mathbf{F}$, where $\\boldsymbol{\\Psi}$ is the vector of nodal values of $\\psi$. You must correctly impose the homogeneous Dirichlet boundary conditions. Use $2\\times 2$ Gaussian quadrature for element integration. After solving for $\\boldsymbol{\\Psi}$, compute the torsional rigidity $J_t$ by numerically integrating the resulting field $\\psi_h(x,y)$. Finally, compute the twist per unit length $\\theta$.\n\nYour program must implement the above method and evaluate the following test suite. For each case, report the twist per unit length $\\theta$ in radians per meter and the computed torsional rigidity $J_t$ in m⁴.\n- Test 1: $a = 1.0\\,\\text{m}$, $b = 1.0\\,\\text{m}$, $G = 26 \\times 10^9\\,\\text{Pa}$, $T = 1000\\,\\text{N}\\cdot\\text{m}$, $N_x = 16$, $N_y = 16$.\n- Test 2: $a = 2.0\\,\\text{m}$, $b = 0.5\\,\\text{m}$, $G = 79.3 \\times 10^9\\,\\text{Pa}$, $T = 500\\,\\text{N}\\cdot\\text{m}$, $N_x = 24$, $N_y = 12$.\n- Test 3: $a = 1.0\\,\\text{m}$, $b = 1.0\\,\\text{m}$, $G = 26 \\times 10^9\\,\\text{Pa}$, $T = 2000\\,\\text{N}\\cdot\\text{m}$, $N_x = 16$, $N_y = 16$.\n- Test 4: $a = 1.0\\,\\text{m}$, $b = 1.0\\,\\text{m}$, $G = 26 \\times 10^9\\,\\text{Pa}$, $T = 0\\,\\text{N}\\cdot\\text{m}$, $N_x = 12$, $N_y = 12$.\n\nRequired final output format: Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, where each test case contributes a sub-list in the form $[\\theta, J_t]$. For example, a valid output for two cases would look like $[[\\theta_1,J_{t1}],[\\theta_2,J_{t2}]]$. Report $\\theta$ in radians per meter and $J_t$ in m⁴, both as floating-point numbers.", "solution": "The problem describes the standard primal finite element formulation for solving the Saint-Venant torsion problem. The scientific basis is sound and the methodology is correct. I will proceed with the detailed solution.\n\nThe governing boundary value problem for the auxiliary potential function $\\psi$ is:\n$$\n\\nabla^2\\psi = -2 \\quad \\text{in } \\Omega\n$$\n$$\n\\psi = 0 \\quad \\text{on } \\Gamma = \\partial\\Omega\n$$\nTo solve this using the finite element method, we first derive the weak (variational) form. We multiply the PDE by a test function $v$ which also satisfies the homogeneous Dirichlet boundary condition ($v=0$ on $\\Gamma$) and integrate over the domain $\\Omega$:\n$$\n\\int_{\\Omega} v (\\nabla^2 \\psi) \\, \\mathrm{d}A = \\int_{\\Omega} v (-2) \\, \\mathrm{d}A\n$$\nApplying Green's first identity to the left-hand side:\n$$\n\\int_{\\Omega} \\nabla v \\cdot \\nabla \\psi \\, \\mathrm{d}A = \\int_{\\partial\\Omega} v (\\nabla \\psi \\cdot \\mathbf{n}) \\, \\mathrm{d}s - \\int_{\\Omega} v (\\nabla^2 \\psi) \\, \\mathrm{d}A\n$$\nRearranging and substituting this into the first equation gives:\n$$\n-\\int_{\\Omega} \\nabla v \\cdot \\nabla \\psi \\, \\mathrm{d}A + \\int_{\\partial\\Omega} v (\\nabla \\psi \\cdot \\mathbf{n}) \\, \\mathrm{d}s = \\int_{\\Omega} -2v \\, \\mathrm{d}A\n$$\nSince the test function $v=0$ on the boundary $\\Gamma$, the boundary integral vanishes. This leaves the final weak form: Find $\\psi \\in H^1_0(\\Omega)$ such that for all $v \\in H^1_0(\\Omega)$:\n$$\n\\int_{\\Omega} \\nabla v \\cdot \\nabla \\psi \\, \\mathrm{d}A = \\int_{\\Omega} 2v \\, \\mathrm{d}A\n$$\n\nThe domain $\\Omega$ is discretized into a uniform mesh of $N_x \\times N_y$ rectangular elements. The function $\\psi$ is approximated using bilinear $Q_1$ basis functions $N_i(x,y)$: $\\psi(x,y) \\approx \\psi_h(x,y) = \\sum_{i=1}^{N_{nodes}} \\Psi_i N_i(x,y)$, where $\\Psi_i$ are the nodal values.\n\nSubstituting this into the weak form and choosing the basis functions $N_j$ as test functions leads to the linear system $\\mathbf{K}\\boldsymbol{\\Psi} = \\mathbf{F}$, where:\n- $\\mathbf{K}$ is the stiffness matrix with entries $K_{ji} = \\int_{\\Omega} \\nabla N_j \\cdot \\nabla N_i \\, \\mathrm{d}A$.\n- $\\mathbf{F}$ is the load vector with entries $F_j = \\int_{\\Omega} 2 N_j \\, \\mathrm{d}A$.\n- $\\boldsymbol{\\Psi}$ is the vector of unknown nodal values.\n\nThe element stiffness matrix and load vector are computed over each element (e.g., using Gaussian quadrature) and assembled into the global system.\n\nThe Dirichlet boundary condition $\\psi=0$ on $\\Gamma$ must be enforced. This is typically done by modifying the global system. For every node $i$ on the boundary, we set its corresponding equation to $\\Psi_i = 0$. A common technique is to zero out the $i$-th row of $\\mathbf{K}$ and $\\mathbf{F}$, place a 1 on the diagonal $K_{ii}$, and set $F_i = 0$.\n\nAfter solving the modified system for the nodal values $\\boldsymbol{\\Psi}$, we compute the torsional rigidity $J_t$:\n$$\nJ_t = \\int_{\\Omega} \\psi_h \\, \\mathrm{d}A = \\int_{\\Omega} \\sum_{i=1}^{N_{nodes}} \\Psi_i N_i \\, \\mathrm{d}A = \\sum_{i=1}^{N_{nodes}} \\Psi_i \\int_{\\Omega} N_i \\, \\mathrm{d}A\n$$\nThe integral $\\int_{\\Omega} N_i \\, \\mathrm{d}A$ is the $i$-th component of a \"mass vector\". The total integral is simply the sum over all elements of the integral of $\\psi_h$ over that element.\n\nFinally, the twist per unit length $\\theta$ is calculated from the applied torque $T$ and shear modulus $G$:\n$$\n\\theta = \\frac{T}{G J_t}\n$$\nThe implementation will follow these steps for each test case.", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Main function to solve the Saint-Venant torsion problem for a series of test cases\n    using a primal finite element method.\n    \"\"\"\n    test_cases = [\n        # Test 1\n        {'a': 1.0, 'b': 1.0, 'G': 26e9, 'T': 1000.0, 'Nx': 16, 'Ny': 16},\n        # Test 2\n        {'a': 2.0, 'b': 0.5, 'G': 79.3e9, 'T': 500.0, 'Nx': 24, 'Ny': 12},\n        # Test 3\n        {'a': 1.0, 'b': 1.0, 'G': 26e9, 'T': 2000.0, 'Nx': 16, 'Ny': 16},\n        # Test 4\n        {'a': 1.0, 'b': 1.0, 'G': 26e9, 'T': 0.0, 'Nx': 12, 'Ny': 12},\n    ]\n\n    results = []\n    for case in test_cases:\n        theta, Jt = fem_torsion_solver(**case)\n        results.append(f\"[{theta},{Jt}]\")\n\n    print(f\"[{','.join(results)}]\")\n\ndef fem_torsion_solver(a, b, G, T, Nx, Ny):\n    \"\"\"\n    Assembles and solves the primal finite element system for the torsion problem.\n    \"\"\"\n    Nx_p1 = Nx + 1\n    Ny_p1 = Ny + 1\n    N_nodes = Nx_p1 * Ny_p1\n\n    hx = a / Nx\n    hy = b / Ny\n    \n    K = np.zeros((N_nodes, N_nodes))\n    F = np.zeros(N_nodes)\n    \n    # Gaussian quadrature points and weights for 2x2\n    gp = 1.0 / np.sqrt(3.0)\n    gauss_points = [(-gp, -gp), (gp, -gp), (gp, gp), (-gp, gp)]\n    gauss_weights = [1.0, 1.0, 1.0, 1.0]\n\n    # Pre-compute derivatives of shape functions at Gauss points\n    xi_nodes = [-1, 1, 1, -1]\n    eta_nodes = [-1, -1, 1, 1]\n    N_hat = np.zeros((len(gauss_points), 4))\n    B_hat = np.zeros((len(gauss_points), 2, 4))\n    for i in range(4):\n        for q, (xi, eta) in enumerate(gauss_points):\n            N_hat[q, i] = 0.25 * (1 + xi_nodes[i] * xi) * (1 + eta_nodes[i] * eta)\n            B_hat[q, 0, i] = 0.25 * xi_nodes[i] * (1 + eta_nodes[i] * eta)\n            B_hat[q, 1, i] = 0.25 * eta_nodes[i] * (1 + xi_nodes[i] * xi)\n\n    J = np.array([[hx / 2.0, 0], [0, hy / 2.0]])\n    det_J = hx * hy / 4.0\n    J_inv = np.linalg.inv(J)\n\n    for ey in range(Ny):\n        for ex in range(Nx):\n            n_glob_idx = [ey * Nx_p1 + ex, ey * Nx_p1 + ex + 1, (ey + 1) * Nx_p1 + ex + 1, (ey + 1) * Nx_p1 + ex]\n            \n            Ke = np.zeros((4, 4))\n            Fe = np.zeros(4)\n            for q in range(len(gauss_points)):\n                B_mat = J_inv @ B_hat[q]\n                Ke += (B_mat.T @ B_mat) * gauss_weights[q] * det_J\n                Fe += 2.0 * N_hat[q] * gauss_weights[q] * det_J\n\n            for i in range(4):\n                F[n_glob_idx[i]] += Fe[i]\n                for j in range(4):\n                    K[n_glob_idx[i], n_glob_idx[j]] += Ke[i, j]\n\n    # Identify boundary nodes\n    boundary_nodes = set()\n    for i in range(Nx_p1):\n        boundary_nodes.add(i) # bottom\n        boundary_nodes.add(Ny * Nx_p1 + i) # top\n    for j in range(Ny_p1):\n        boundary_nodes.add(j * Nx_p1) # left\n        boundary_nodes.add(j * Nx_p1 + Nx) # right\n\n    # Apply Dirichlet boundary conditions (psi=0 on boundary)\n    for node_idx in boundary_nodes:\n        K[node_idx, :] = 0\n        K[:, node_idx] = 0\n        K[node_idx, node_idx] = 1.0\n        F[node_idx] = 0.0\n\n    # Solve the system\n    Psi = np.linalg.solve(K, F)\n\n    # Post-processing: Compute Jt and theta\n    Jt = 0.0\n    for ey in range(Ny):\n        for ex in range(Nx):\n            n_glob_idx = [ey * Nx_p1 + ex, ey * Nx_p1 + ex + 1, (ey + 1) * Nx_p1 + ex + 1, (ey + 1) * Nx_p1 + ex]\n            Psi_e = Psi[n_glob_idx]\n            # Integrate psi_h over the element\n            integral_psi_e = 0.0\n            for q in range(len(gauss_points)):\n                psi_at_gp = np.dot(N_hat[q], Psi_e)\n                integral_psi_e += psi_at_gp * gauss_weights[q] * det_J\n            Jt += integral_psi_e\n            \n    if T == 0:\n        theta = 0.0\n    else:\n        # Avoid division by zero if Jt is close to zero (e.g., coarse mesh)\n        theta = T / (G * Jt) if Jt > 1e-12 else 0.0\n\n    return theta, Jt\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "2683204"}]}