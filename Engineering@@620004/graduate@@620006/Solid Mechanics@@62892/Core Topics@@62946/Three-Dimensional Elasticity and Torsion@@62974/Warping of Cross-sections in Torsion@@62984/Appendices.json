{"hands_on_practices": [{"introduction": "To build a foundational understanding of torsional warping, this first practice directly contrasts the behavior of a circular cross-section with that of a square one. By calculating the torsional constant, $J$, for both shapes under an equal-area constraint, you will quantitatively see how geometry dictates stiffness. This exercise [@problem_id:2710728] illuminates why the non-warping circular shape is the most efficient cross-section for resisting torsion, providing a crucial physical intuition for more complex problems.", "problem": "A homogeneous, isotropic, linearly elastic prismatic bar is subjected to Saint-Venant torsion with twist per unit length $\\,\\theta'\\,$, and has a traction-free lateral surface. Let the cross-section be either (i) a circle of radius $\\,R\\,$ or (ii) a square of side $\\,s\\,$. Denote the Saint-Venant torsional constant by $\\,J\\,$, defined through $\\,T = G\\,J\\,\\theta'\\,$, where $\\,T\\,$ is the applied torque and $\\,G\\,$ is the shear modulus.\n\nTasks:\n- Using the Prandtl stress function formulation for Saint-Venant torsion, derive $\\,J\\,$ for the circular cross-section from first principles.\n- For the square cross-section, obtain a reliable value for the dimensionless constant $\\,c\\,$ in the relation $J_{\\text{square}} = c s^4$ by either solving the Saint-Venant boundary value problem exactly (via a Fourier series) or by using a variational approximation with an admissible Prandtl stress function that satisfies the traction-free boundary condition. State clearly which path you chose and justify the step that gives $\\,c\\,$.\n- Impose the equal-area constraint $\\,\\pi R^{2} = s^{2}\\,$ and compute the ratio $\\,J_{\\text{circle}}/J_{\\text{square}}\\,$.\n- Provide a brief physical explanation, based on the governing equations or an energy/variational statement, of why among all simply connected shapes of given area the circle maximizes $\\,J\\,$.\n\nExpress the final ratio $\\,J_{\\text{circle}}/J_{\\text{square}}\\,$ as a dimensionless number, rounded to four significant figures.", "solution": "The problem presented is a standard exercise in the theory of elasticity, specifically relating to Saint-Venant torsion of prismatic bars. It is scientifically grounded, well-posed, and all necessary conditions are provided. Therefore, the problem is valid and I will proceed with a complete solution.\n\nThe analysis is based on the Prandtl stress function, $\\phi(x,y)$, which is defined over the cross-section domain $\\Omega$ of the bar. This function must satisfy Poisson's equation within the domain and be constant on the boundary for a traction-free lateral surface. For a simply connected domain, this constant can be set to zero.\n\nThe governing equations are:\n1.  The Poisson equation for the stress function $\\phi$:\n    $$ \\nabla^{2}\\phi = \\frac{\\partial^{2}\\phi}{\\partial x^{2}} + \\frac{\\partial^{2}\\phi}{\\partial y^{2}} = -2G\\theta' \\quad \\text{in } \\Omega $$\n2.  The boundary condition on the perimeter $\\partial\\Omega$:\n    $$ \\phi = 0 \\quad \\text{on } \\partial\\Omega $$\n3.  The resulting torque $T$ is related to the stress function by:\n    $$ T = 2 \\iint_{\\Omega} \\phi \\, dA $$\n4.  The torsional rigidity, or torsional constant, $J$, is defined by the relation $T = G J \\theta'$. Combining these gives an expression for $J$ in terms of $\\phi$:\n    $$ J = \\frac{2}{G\\theta'} \\iint_{\\Omega} \\phi \\, dA $$\n\nI will now address each task in sequence.\n\n**Task 1: Derivation of $J$ for a Circular Cross-Section**\n\nFor a circular cross-section of radius $R$, the domain $\\Omega$ is defined by $x^{2} + y^{2} \\le R^{2}$. Due to the axisymmetry of the problem, it is most convenient to use polar coordinates $(r, \\vartheta)$, where $r^{2} = x^{2} + y^{2}$. The Laplace operator in polar coordinates is $\\nabla^{2} = \\frac{\\partial^{2}}{\\partial r^{2}} + \\frac{1}{r}\\frac{\\partial}{\\partial r} + \\frac{1}{r^{2}}\\frac{\\partial^{2}}{\\partial \\vartheta^{2}}$. Assuming an axisymmetric solution, $\\phi$ is a function of $r$ only, so $\\phi = \\phi(r)$, and the term with $\\frac{\\partial^{2}}{\\partial \\vartheta^{2}}$ vanishes.\n\nThe governing equation simplifies to an ordinary differential equation:\n$$ \\frac{1}{r}\\frac{d}{dr}\\left(r\\frac{d\\phi}{dr}\\right) = -2G\\theta' $$\nIntegrating with respect to $r$ yields:\n$$ r\\frac{d\\phi}{dr} = -G\\theta'r^{2} + C_{1} $$\nDividing by $r$ and integrating again:\n$$ \\frac{d\\phi}{dr} = -G\\theta'r + \\frac{C_{1}}{r} $$\n$$ \\phi(r) = -\\frac{1}{2}G\\theta'r^{2} + C_{1}\\ln(r) + C_{2} $$\nTo determine the constants of integration, we apply physical and boundary conditions. First, the stresses, and thus the stress function $\\phi$, must remain finite at the center of the solid shaft ($r=0$). The logarithmic term $\\ln(r)$ is singular at $r=0$, so its coefficient must be zero. Thus, $C_{1}=0$.\nThe boundary condition is $\\phi=0$ on the perimeter, i.e., $\\phi(R)=0$.\n$$ \\phi(R) = -\\frac{1}{2}G\\theta'R^{2} + C_{2} = 0 \\implies C_{2} = \\frac{1}{2}G\\theta'R^{2} $$\nThe stress function for the circular cross-section is therefore:\n$$ \\phi(r) = \\frac{1}{2}G\\theta'(R^{2} - r^{2}) $$\nNow, we compute the torsional rigidity $J_{\\text{circle}}$ using its definition. The area element in polar coordinates is $dA = r\\,dr\\,d\\vartheta$.\n$$ J_{\\text{circle}} = \\frac{2}{G\\theta'} \\int_{0}^{2\\pi}\\int_{0}^{R} \\frac{1}{2}G\\theta'(R^{2} - r^{2}) \\, r \\, dr \\, d\\vartheta $$\nThe $G\\theta'$ terms cancel, and the integral over $\\vartheta$ gives a factor of $2\\pi$.\n$$ J_{\\text{circle}} = 2 \\pi \\int_{0}^{R} (R^{2}r - r^{3}) \\, dr = 2\\pi \\left[ \\frac{R^{2}r^{2}}{2} - \\frac{r^{4}}{4} \\right]_{0}^{R} $$\n$$ J_{\\text{circle}} = 2\\pi \\left( \\frac{R^{4}}{2} - \\frac{R^{4}}{4} \\right) = 2\\pi \\left( \\frac{R^{4}}{4} \\right) = \\frac{\\pi R^{4}}{2} $$\nThis is the well-known polar moment of inertia of a circular area.\n\n**Task 2: Torsional Constant for a Square Cross-Section**\n\nFor a square cross-section of side length $s$, finding an exact closed-form solution for $\\phi$ is not possible. The problem asks for a reliable value for the constant $c$ in the relation $J_{\\text{square}} = c s^{4}$. This value is obtained by solving the Saint-Venant boundary value problem exactly using a Fourier series representation for the stress function $\\phi$. The subsequent integration of $\\phi$ over the square domain yields the torque and thus $J$. The derivation is lengthy, so I will state clearly that I am using the established result from this exact method.\n\nFor a square of side $s$, the torsional constant is given by:\n$$ J_{\\text{square}} = \\left( \\frac{1}{3} - \\frac{64}{\\pi^{5}}\\sum_{n=1,3,5,\\dots}^{\\infty} \\frac{1}{n^{5}}\\tanh\\left(\\frac{n\\pi}{2}\\right) \\right) s^{4} $$\nThe dimensionless constant $c$ is the expression in the parenthesis. We can compute its numerical value. The series converges very rapidly.\n$$ c = \\frac{1}{3} - \\frac{64}{\\pi^{5}}\\left( \\frac{\\tanh(\\pi/2)}{1^{5}} + \\frac{\\tanh(3\\pi/2)}{3^{5}} + \\frac{\\tanh(5\\pi/2)}{5^{5}} + \\dots \\right) $$\nUsing numerical values: $\\pi \\approx 3.14159$, $\\pi^{5} \\approx 306.02$.\n$\\tanh(\\pi/2) \\approx \\tanh(1.5708) \\approx 0.91715$.\n$\\tanh(3\\pi/2) \\approx \\tanh(4.7124) \\approx 0.99991$.\nThe first term of the sum dominates significantly.\n$$ c \\approx \\frac{1}{3} - \\frac{64}{306.02} \\left( 0.91715 + \\frac{0.99991}{243} + \\dots \\right) \\approx 0.33333 - 0.20914 \\left( 0.91715 + 0.00411 \\right) $$\n$$ c \\approx 0.33333 - 0.20914 \\times 0.92126 \\approx 0.33333 - 0.19266 \\approx 0.14067 $$\nThe accepted reliable value for this constant is $c \\approx 0.1406$. Thus, we have $J_{\\text{square}} = 0.1406\\,s^{4}$.\n\n**Task 3: Ratio of Torsional Constants**\n\nWe are given the equal-area constraint:\n$$ \\text{Area}_{\\text{circle}} = \\text{Area}_{\\text{square}} \\implies \\pi R^{2} = s^{2} $$\nFrom this constraint, we can express $R^{4}$ in terms of $s^{4}$:\n$$ R^{2} = \\frac{s^{2}}{\\pi} \\implies R^{4} = \\frac{s^{4}}{\\pi^{2}} $$\nNow, we substitute this into the expression for $J_{\\text{circle}}$:\n$$ J_{\\text{circle}} = \\frac{\\pi R^{4}}{2} = \\frac{\\pi}{2} \\left( \\frac{s^{4}}{\\pi^{2}} \\right) = \\frac{s^{4}}{2\\pi} $$\nWe can now compute the ratio $J_{\\text{circle}} / J_{\\text{square}}$:\n$$ \\frac{J_{\\text{circle}}}{J_{\\text{square}}} = \\frac{s^{4}/(2\\pi)}{c s^{4}} = \\frac{1}{2\\pi c} $$\nSubstituting the value $c \\approx 0.1406$:\n$$ \\frac{J_{\\text{circle}}}{J_{\\text{square}}} \\approx \\frac{1}{2\\pi(0.1406)} \\approx \\frac{1}{0.8834} \\approx 1.13190 $$\nRounding to four significant figures, the ratio is $1.132$.\n\n**Task 4: Physical Explanation for Maximality of the Circle**\n\nSaint-Venant's conjecture, proven by George PÃ³lya, states that among all simply connected cross-sectional shapes of a given area, the circle possesses the maximum torsional rigidity $J$. A physical explanation can be constructed by considering the stress distribution and its contribution to rigidity.\n\nThe shear stresses in torsion are given by the gradients of the Prandtl stress function: $\\tau_{xz} = \\frac{\\partial\\phi}{\\partial y}$ and $\\tau_{yz} = -\\frac{\\partial\\phi}{\\partial x}$. The torsional resistance arises from these stresses. For a cross-section to be efficient in resisting torsion, the material should be stressed as uniformly as possible.\n\nIn the case of a circular cross-section, the magnitude of the shear stress vector, $|\\boldsymbol{\\tau}| = \\sqrt{\\tau_{xz}^{2} + \\tau_{yz}^{2}} = |\\nabla\\phi|$, is constant at any given radius $r$ and reaches its maximum value, $|\\boldsymbol{\\tau}|_{\\text{max}} = G\\theta'R$, which is constant along the entire boundary. This indicates a highly efficient distribution of stress.\n\nIn contrast, for a non-circular shape like a square, the stress distribution is non-uniform. The shear stress must be tangent to the boundary. At the corners of the square, this condition forces the stress to be zero ($|\\nabla\\phi|=0$). The maximum stress occurs at the midpoints of the sides. This means that the material near the corners is underutilized and contributes very little to the overall torque capacity, while the material at the midpoints of the sides is highly stressed. These under-stressed regions represent an inefficient use of the cross-sectional area for resisting torsion.\n\nFrom an energy perspective, maximizing the torsional rigidity $J$ for a given area is equivalent to minimizing the total elastic strain energy for a given applied torque $T$. The circular shape, by distributing stresses more uniformly and avoiding both stress concentrations and under-stressed zones like the corners of the square, achieves the lowest possible strain energy state for a given torque among all shapes of the same area. A lower energy state for the same external load implies a stiffer structure, hence a maximal $J$. This optimality of the circle is a manifestation of its geometric property of enclosing the maximum area for a given perimeter length, which in the context of the membrane analogy for torsion, allows for the maximum volume under the deflected membrane, a quantity proportional to $J$.", "answer": "$$\n\\boxed{1.132}\n$$", "id": "2710728"}, {"introduction": "While exact analytical solutions for warping in non-circular sections are rare, they offer profound insight when available. This practice explores one such case: the equilateral triangle. You will employ an elegant technique by constructing a polynomial for the Prandtl stress function $\\Phi$ that inherently satisfies the boundary conditions, allowing for an exact calculation of the torsional constant $J$ [@problem_id:2710727]. This exercise demonstrates a powerful analytical method and sharpens your skills in applying the fundamental principles of torsion to a non-trivial geometry.", "problem": "A straight, homogeneous, isotropic bar with an equilateral triangular cross-section of side length $s$ is subjected to Saint-Venant torsion with a uniform twist per unit length $\\theta$ about the $z$-axis. Choose Cartesian coordinates $(x,y)$ in the cross-sectional plane such that one side of the triangle coincides with the segment from $(0,0)$ to $(s,0)$ on the $x$-axis, and the third vertex is at $\\left(\\frac{s}{2}, \\frac{\\sqrt{3}}{2}s\\right)$. Work within the classical Saint-Venant framework with the Prandtl stress function scaled by the twist, that is, introduce a dimensionless stress function $\\Phi(x,y)$ such that the shear stresses are represented by\n- $\\tau_{xz} = G \\,\\theta \\,\\frac{\\partial \\Phi}{\\partial y}$,\n- $\\tau_{yz} = - G \\,\\theta \\,\\frac{\\partial \\Phi}{\\partial x}$,\nand the Prandtl stress function satisfies the Poisson equation with constant source term,\n- $\\nabla^{2} \\Phi = -2$ in the triangular domain,\ntogether with the free-surface boundary condition\n- $\\Phi = 0$ on each side of the triangle.\n\nStarting exclusively from these statements and the definition of the torque,\n$$\nT \\,=\\, \\iint_{A} \\big( x\\,\\tau_{yz} \\,-\\, y\\,\\tau_{xz} \\big)\\, \\mathrm{d}A,\n$$\nwhere $A$ is the triangular area, do the following:\n\n1. Construct an explicit polynomial candidate for $\\Phi(x,y)$ that enforces $\\Phi=0$ on all three sides, determine the unique scalar factor required so that $\\nabla^{2}\\Phi=-2$ holds in the domain, and verify the boundary condition $\\Phi=0$ on each side.\n\n2. Using only the given definitions and fundamental vector-calculus identities, reduce the torque integral to an area integral involving $\\Phi$ alone, and thereby obtain the torsional constant $J$ defined by $T = G J \\theta$ as a functional of $\\Phi$.\n\n3. Evaluate the resulting area integral exactly for the given equilateral triangle to obtain a closed-form expression for $J$ as a function of $s$.\n\nExpress the final torsional constant $J$ as a single exact symbolic expression in terms of $s$ only. No numerical rounding is required. Do not include units in your final expression.", "solution": "The problem statement is scientifically sound, well-posed, and complete. It presents a standard problem in the theory of elasticityâthe torsion of a prismatic bar with an equilateral triangular cross-section, formulated using the Prandtl stress function. All governing equations and boundary conditions are correctly specified. We will proceed with the solution in three parts as requested.\n\nPart 1: Construction of the Stress Function $\\Phi(x,y)$\n\nThe problem requires constructing a stress function $\\Phi(x,y)$ that satisfies the Poisson equation $\\nabla^{2} \\Phi = -2$ within the triangular domain and is zero on its boundary. The triangle has vertices at $(0,0)$, $(s,0)$, and $(\\frac{s}{2}, \\frac{\\sqrt{3}}{2}s)$. The three lines forming the boundary are:\n$1$. The side on the $x$-axis: $L_1: y = 0$.\n$2$. The side connecting $(s,0)$ and $(\\frac{s}{2}, \\frac{\\sqrt{3}}{2}s)$: $L_2: y - 0 = \\frac{\\frac{\\sqrt{3}}{2}s - 0}{\\frac{s}{2}-s}(x-s)$, which simplifies to $y = -\\sqrt{3}(x-s)$, or $y + \\sqrt{3}x - \\sqrt{3}s = 0$.\n$3$. The side connecting $(0,0)$ and $(\\frac{s}{2}, \\frac{\\sqrt{3}}{2}s)$: $L_3: y = \\sqrt{3}x$, or $y - \\sqrt{3}x = 0$.\n\nA polynomial function that is zero on all three boundary lines can be constructed as the product of the linear expressions defining these lines. We propose a candidate function of the form:\n$$ \\Phi(x,y) = C \\cdot y \\cdot (y - \\sqrt{3}x) \\cdot (y + \\sqrt{3}x - \\sqrt{3}s) $$\nwhere $C$ is a constant to be determined. Expanding this polynomial:\n$$ \\Phi(x,y) = C \\cdot (y^2 - \\sqrt{3}xy) \\cdot (y + \\sqrt{3}x - \\sqrt{3}s) $$\n$$ \\Phi(x,y) = C \\cdot [y^2(y + \\sqrt{3}x - \\sqrt{3}s) - \\sqrt{3}xy(y + \\sqrt{3}x - \\sqrt{3}s)] $$\n$$ \\Phi(x,y) = C \\cdot [y^3 + \\sqrt{3}xy^2 - \\sqrt{3}sy^2 - \\sqrt{3}xy^2 - 3x^2y + 3sxy] $$\n$$ \\Phi(x,y) = C \\cdot (y^3 - 3x^2y - \\sqrt{3}sy^2 + 3sxy) $$\nBy construction, this function is zero on the boundary of the triangle because one of its factors is zero on each side.\n\nNext, we must enforce the condition $\\nabla^{2} \\Phi = -2$. We compute the Laplacian of $\\Phi(x,y)$:\n$$ \\frac{\\partial \\Phi}{\\partial x} = C \\cdot (-6xy + 3sy) $$\n$$ \\frac{\\partial^2 \\Phi}{\\partial x^2} = C \\cdot (-6y) $$\n$$ \\frac{\\partial \\Phi}{\\partial y} = C \\cdot (3y^2 - 3x^2 - 2\\sqrt{3}sy + 3sx) $$\n$$ \\frac{\\partial^2 \\Phi}{\\partial y^2} = C \\cdot (6y - 2\\sqrt{3}s) $$\nThe Laplacian is the sum of these second partial derivatives:\n$$ \\nabla^2 \\Phi = \\frac{\\partial^2 \\Phi}{\\partial x^2} + \\frac{\\partial^2 \\Phi}{\\partial y^2} = C(-6y) + C(6y - 2\\sqrt{3}s) = -2\\sqrt{3}Cs $$\nEquating this to $-2$ gives:\n$$ -2\\sqrt{3}Cs = -2 \\implies C = \\frac{1}{\\sqrt{3}s} $$\nThus, the unique stress function satisfying the given conditions is:\n$$ \\Phi(x,y) = \\frac{1}{\\sqrt{3}s}(y^3 - 3x^2y - \\sqrt{3}sy^2 + 3sxy) $$\nVerification of the boundary condition $\\Phi=0$ is immediate from the product form, as for any point on a side of the triangle, one of the linear factors $y$, $y-\\sqrt{3}x$, or $y+\\sqrt{3}x-\\sqrt{3}s$ becomes zero.\n\nPart 2: Derivation of the Torsional Constant $J$\n\nThe torque $T$ is defined as:\n$$ T = \\iint_{A} (x\\,\\tau_{yz} - y\\,\\tau_{xz}) \\mathrm{d}A $$\nSubstituting the stress components in terms of $\\Phi$:\n$$ T = \\iint_{A} \\left[ x\\left(-G\\theta \\frac{\\partial \\Phi}{\\partial x}\\right) - y\\left(G\\theta \\frac{\\partial \\Phi}{\\partial y}\\right) \\right] \\mathrm{d}A $$\n$$ T = -G\\theta \\iint_{A} \\left( x \\frac{\\partial \\Phi}{\\partial x} + y \\frac{\\partial \\Phi}{\\partial y} \\right) \\mathrm{d}A $$\nWe recognize the integrand as part of the divergence of a vector field. Consider the vector field $\\mathbf{F} = \\Phi\\mathbf{r}$, where $\\mathbf{r} = x\\mathbf{i} + y\\mathbf{j}$. Its divergence is:\n$$ \\nabla \\cdot \\mathbf{F} = \\nabla \\cdot (\\Phi\\mathbf{r}) = (\\nabla\\Phi) \\cdot \\mathbf{r} + \\Phi(\\nabla \\cdot \\mathbf{r}) = \\left(\\frac{\\partial \\Phi}{\\partial x}x + \\frac{\\partial \\Phi}{\\partial y}y\\right) + \\Phi(1+1) = \\left(x \\frac{\\partial \\Phi}{\\partial x} + y \\frac{\\partial \\Phi}{\\partial y}\\right) + 2\\Phi $$\n Rearranging this identity gives:\n$$ x \\frac{\\partial \\Phi}{\\partial x} + y \\frac{\\partial \\Phi}{\\partial y} = \\nabla \\cdot (\\Phi\\mathbf{r}) - 2\\Phi $$\nSubstituting this into the expression for torque:\n$$ T = -G\\theta \\iint_{A} [\\nabla \\cdot (\\Phi\\mathbf{r}) - 2\\Phi] \\mathrm{d}A = -G\\theta \\left( \\iint_{A} \\nabla \\cdot (\\Phi\\mathbf{r}) \\mathrm{d}A - 2\\iint_{A} \\Phi \\mathrm{d}A \\right) $$\nBy the Divergence Theorem (or Green's Theorem in the plane), the first integral can be converted to a boundary integral:\n$$ \\iint_{A} \\nabla \\cdot (\\Phi\\mathbf{r}) \\mathrm{d}A = \\oint_{\\partial A} (\\Phi\\mathbf{r}) \\cdot \\mathbf{n} \\mathrm{d}l $$\nwhere $\\partial A$ is the boundary of the triangular domain $A$. Since $\\Phi = 0$ at every point on the boundary $\\partial A$, the line integral is zero.\n$$ \\oint_{\\partial A} (\\Phi\\mathbf{r}) \\cdot \\mathbf{n} \\mathrm{d}l = \\oint_{\\partial A} (0 \\cdot \\mathbf{r}) \\cdot \\mathbf{n} \\mathrm{d}l = 0 $$\nThe torque expression simplifies to:\n$$ T = -G\\theta \\left( 0 - 2\\iint_{A} \\Phi \\mathrm{d}A \\right) = 2G\\theta \\iint_{A} \\Phi \\mathrm{d}A $$\nBy definition, the torsional constant $J$ relates torque and twist via $T = G J \\theta$. Comparing this with our derived expression, we find:\n$$ G J \\theta = 2G\\theta \\iint_{A} \\Phi \\mathrm{d}A \\implies J = 2\\iint_{A} \\Phi \\mathrm{d}A $$\n\nPart 3: Evaluation of the Torsional Constant $J$\n\nWe now evaluate the integral for $J$ using the derived expression for $\\Phi(x,y)$:\n$$ J = 2\\iint_{A} \\frac{1}{\\sqrt{3}s}(y^3 - 3x^2y - \\sqrt{3}sy^2 + 3sxy) \\mathrm{d}A $$\nThe domain of integration is the triangle defined by $0 \\le y \\le \\frac{\\sqrt{3}}{2}s$ and $\\frac{y}{\\sqrt{3}} \\le x \\le s - \\frac{y}{\\sqrt{3}}$.\n$$ J = \\frac{2}{\\sqrt{3}s} \\int_{0}^{\\frac{\\sqrt{3}}{2}s} \\int_{y/\\sqrt{3}}^{s-y/\\sqrt{3}} (y^3 - \\sqrt{3}sy^2 - 3x^2y + 3sxy) \\mathrm{d}x \\mathrm{d}y $$\nFirst, we evaluate the inner integral with respect to $x$:\n$$ I_x = \\int_{y/\\sqrt{3}}^{s-y/\\sqrt{3}} (y^3 - \\sqrt{3}sy^2 - 3x^2y + 3sxy) \\mathrm{d}x = \\left[ (y^3 - \\sqrt{3}sy^2)x - yx^3 + \\frac{3s}{2}yx^2 \\right]_{x=y/\\sqrt{3}}^{x=s-y/\\sqrt{3}} $$\nLet $x_R = s - y/\\sqrt{3}$ and $x_L = y/\\sqrt{3}$. Then $x_R - x_L = s - 2y/\\sqrt{3}$, $x_R^2 - x_L^2 = s(s - 2y/\\sqrt{3})$, and $x_R^3 - x_L^3 = s^3 - \\sqrt{3}s^2y + sy^2 - \\frac{2y^3}{3\\sqrt{3}}$. Substituting these gives:\n$$ I_x = (y^3 - \\sqrt{3}sy^2)(s - \\frac{2y}{\\sqrt{3}}) - y(s^3 - \\sqrt{3}s^2y + sy^2 - \\frac{2y^3}{3\\sqrt{3}}) + \\frac{3s}{2}y \\cdot s(s - \\frac{2y}{\\sqrt{3}}) $$\nExpanding and collecting terms in powers of $y$:\n$$ I_x = \\left( sy^3 - \\frac{2}{\\sqrt{3}}y^4 - \\sqrt{3}s^2y^2 + 2sy^3 \\right) - \\left( s^3y - \\sqrt{3}s^2y^2 + sy^3 - \\frac{2y^4}{3\\sqrt{3}} \\right) + \\left( \\frac{3s^3y}{2} - \\sqrt{3}s^2y^2 \\right) $$\n$$ I_x = \\left(3s - s\\right)y^3 + \\left(-\\frac{2}{\\sqrt{3}} + \\frac{2}{3\\sqrt{3}}\\right)y^4 + \\left(-\\sqrt{3}s^2 + \\sqrt{3}s^2 - \\sqrt{3}s^2\\right)y^2 + \\left(-s^3 + \\frac{3s^3}{2}\\right)y $$\n$$ I_x = 2sy^3 - \\frac{4}{3\\sqrt{3}}y^4 - \\sqrt{3}s^2y^2 + \\frac{s^3}{2}y $$\nNow, we perform the outer integral with respect to $y$:\n$$ \\int_{0}^{\\frac{\\sqrt{3}}{2}s} I_x \\mathrm{d}y = \\int_{0}^{\\frac{\\sqrt{3}}{2}s} \\left( 2sy^3 - \\frac{4}{3\\sqrt{3}}y^4 - \\sqrt{3}s^2y^2 + \\frac{s^3}{2}y \\right) \\mathrm{d}y $$\n$$ = \\left[ \\frac{2s}{4}y^4 - \\frac{4}{3\\sqrt{3} \\cdot 5}y^5 - \\frac{\\sqrt{3}s^2}{3}y^3 + \\frac{s^3}{4}y^2 \\right]_{0}^{\\frac{\\sqrt{3}}{2}s} $$\n$$ = \\frac{s}{2}\\left(\\frac{9s^4}{16}\\right) - \\frac{4}{15\\sqrt{3}}\\left(\\frac{9\\sqrt{3}s^5}{32}\\right) - \\frac{\\sqrt{3}s^2}{3}\\left(\\frac{3\\sqrt{3}s^3}{8}\\right) + \\frac{s^3}{4}\\left(\\frac{3s^2}{4}\\right) $$\n$$ = \\frac{9s^5}{32} - \\frac{36s^5}{480} - \\frac{9s^5}{24} + \\frac{3s^5}{16} = \\frac{9s^5}{32} - \\frac{3s^5}{40} - \\frac{3s^5}{8} + \\frac{3s^5}{16} $$\nThe common denominator is $160$:\n$$ = \\left(\\frac{45 - 12 - 60 + 30}{160}\\right)s^5 = \\frac{3}{160}s^5 $$\nThis is the value of the integral $\\iint_A (y^3 - 3x^2y - \\sqrt{3}sy^2 + 3sxy) \\mathrm{d}A$.\nFinally, we substitute this back into the expression for $J$:\n$$ J = \\frac{2}{\\sqrt{3}s} \\left(\\frac{3}{160}s^5\\right) = \\frac{6s^4}{160\\sqrt{3}} = \\frac{3s^4}{80\\sqrt{3}} $$\nRationalizing the denominator:\n$$ J = \\frac{3s^4 \\cdot \\sqrt{3}}{80\\sqrt{3} \\cdot \\sqrt{3}} = \\frac{3\\sqrt{3}s^4}{80 \\cdot 3} = \\frac{\\sqrt{3}}{80}s^4 $$\nThis is the torsional constant for the equilateral triangular cross-section.", "answer": "$$\\boxed{\\frac{\\sqrt{3}}{80}s^4}$$", "id": "2710727"}, {"introduction": "In real-world engineering, cross-sections are often complex, making analytical solutions impractical. This advanced practice bridges theory and computation by guiding you through the development of a Finite Element Method (FEM) solver for the torsion problem [@problem_id:2710723]. By deriving the weak form of the governing equation and implementing it for linear triangular elements, you will build a versatile tool capable of analyzing the warping and torsional rigidity of any arbitrary polygonal shape. This exercise is a capstone in understanding how to apply continuum mechanics principles to create practical engineering software.", "problem": "Consider Saint-Venant torsion of a simply connected, prismatic bar of length much greater than its cross-sectional dimension, with a generic polygonal cross-section denoted by the bounded domain $\\Omega \\subset \\mathbb{R}^2$ and outward unit normal $\\boldsymbol{n} = (n_x,n_y)$ on its boundary $\\partial \\Omega$. Let the twist per unit length be $\\kappa = d\\theta/dz$, and let $G$ be the shear modulus. Introduce the warping function $\\Phi(x,y)$ such that the axial displacement is $u_z(x,y) = \\kappa \\, \\Phi(x,y)$. The shear strains are\n$\\gamma_{xz} = \\kappa \\left(\\partial \\Phi/\\partial x - y \\right)$ and $\\gamma_{yz} = \\kappa \\left(\\partial \\Phi/\\partial y + x \\right)$, and the shear stresses follow from linear elasticity via Hookeâs law $\\tau_{xz} = G \\, \\gamma_{xz}$ and $\\tau_{yz} = G \\, \\gamma_{yz}$. Equilibrium in the absence of body forces requires $\\partial \\tau_{xz}/\\partial x + \\partial \\tau_{yz}/\\partial y = 0$ in $\\Omega$. The lateral surface is traction-free, so $\\tau_{xz} n_x + \\tau_{yz} n_y = 0$ on $\\partial \\Omega$.\n\nStarting from these fundamental kinematics, constitutive relation, and equilibrium, perform the following:\n\n1) Derive the strong form of the boundary-value problem for the warping function $\\Phi(x,y)$ in $\\Omega$, showing that it satisfies a homogeneous Laplace equation in the interior with a Neumann-type boundary condition on $\\partial \\Omega$. Write the natural boundary data explicitly in terms of $x$, $y$, $n_x$, and $n_y$.\n\n2) Derive the weak form: find $\\Phi \\in H^{1}(\\Omega)$, unique up to an additive constant, such that the bilinear form involving $\\nabla \\Phi$ and the test function gradient equals a boundary integral involving the natural boundary data and the test function. State clearly the normalization condition you adopt to remove the nullspace.\n\n3) Discretize the weak form using the Finite Element Method (FEM) with continuous, piecewise-linear shape functions on a conforming triangulation $\\mathcal{T}_h$ of $\\Omega$. For a single triangle element $e$ with vertices $(x_1,y_1)$, $(x_2,y_2)$, $(x_3,y_3)$, define the standard linear shape functions $N_i(x,y)$, $i \\in \\{1,2,3\\}$, and their gradients $\\nabla N_i$ which are constant on $e$. Explicitly write the element stiffness matrix $K^{(e)} \\in \\mathbb{R}^{3 \\times 3}$ and the consistent Neumann load vector contributions $f^{(e,\\partial)} \\in \\mathbb{R}^{3}$ arising from a boundary edge of $e$ that lies on $\\partial \\Omega$.\n\nYour element formulas must be given in closed form as functions of the triangle vertex coordinates, and for a boundary edge with end nodes $i$ and $j$, the edge length, outward unit normal, and end-node coordinates. Use the following definitions on a triangle $e$ with area $A_e$ and the conventional constants\n$$\nb_1 = y_2 - y_3,\\quad b_2 = y_3 - y_1,\\quad b_3 = y_1 - y_2, \\qquad\nc_1 = x_3 - x_2,\\quad c_2 = x_1 - x_3,\\quad c_3 = x_2 - x_1,\n$$\nand $A_e = \\tfrac{1}{2} \\left| (x_2-x_1)(y_3-y_1) - (x_3-x_1)(y_2-y_1) \\right|$.\n\n4) Implement a program that:\n- Assembles the global stiffness matrix and load vector for $\\Phi$ using the explicit element formulas derived in part $3)$.\n- Enforces uniqueness by fixing one nodal value of $\\Phi$ to zero (a single-point Dirichlet constraint).\n- Solves for the nodal values of $\\Phi$.\n- Computes the torsional constant $J$ using the identity (for unit twist per unit length and unit shear modulus)\n$$\nJ \\;=\\; \\int_{\\Omega} \\left[ \\left(\\frac{\\partial \\Phi}{\\partial x} - y \\right)^{2} + \\left(\\frac{\\partial \\Phi}{\\partial y} + x \\right)^{2} \\right] \\, dA,\n$$\nwhere the gradients $\\partial \\Phi/\\partial x$ and $\\partial \\Phi/\\partial y$ are constant on each linear triangle. For element-wise numerical integration, you must use a degree-$2$ exact quadrature rule on triangles.\n\nFor numerical evaluation, set the twist per unit length to $\\kappa = 1$ in radians per meter and the shear modulus to $G = 1$ in pascals. Report $J$ in square meters to the fourth power $\\text{m}^4$.\n\nTest Suite (all lengths in meters, angles in radians):\n- Case A (happy path): Square $\\Omega = [0,1] \\times [0,1]$ discretized by a structured mesh with $2 \\times 2$ rectangles, each split into two triangles along the diagonal from the lower-left to upper-right corner of each rectangle.\n- Case B (edge case, minimal mesh): Right triangle with vertices $(0,0)$, $(1,0)$, $(0,1)$$,$ discretized as a single linear triangle.\n- Case C (aspect-ratio stress test): Thin rectangle $\\Omega = [0,2] \\times [0,0.5]$ discretized by a structured mesh with $4 \\times 1$ rectangles, each split into two triangles along the diagonal from the lower-left to upper-right corner of each rectangle.\n\nAngle unit: radians. Physical unit for $J$: $\\text{m}^4$. Express the outputs as real numbers in $\\text{m}^4$.\n\nYour program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets (e.g., \"[resultA,resultB,resultC]\"), where each entry is the computed $J$ for Cases A, B, and C, in this order, in $\\text{m}^4$.", "solution": "We start from the fundamental kinematics and balance laws of Saint-Venant torsion under the assumptions of linear elasticity, small strains, and traction-free lateral surface. Let $\\kappa = d\\theta/dz$ denote the twist per unit length. The warping function $\\Phi(x,y)$ is defined through the axial displacement $u_z(x,y) = \\kappa \\, \\Phi(x,y)$. The shear strains are\n$$\n\\gamma_{xz} = \\kappa\\Big(\\frac{\\partial \\Phi}{\\partial x} - y \\Big), \\qquad\n\\gamma_{yz} = \\kappa\\Big(\\frac{\\partial \\Phi}{\\partial y} + x \\Big).\n$$\nBy Hookeâs law, the shear stresses are\n$$\n\\tau_{xz} = G \\, \\gamma_{xz} = G \\kappa \\Big(\\frac{\\partial \\Phi}{\\partial x} - y \\Big), \\qquad\n\\tau_{yz} = G \\, \\gamma_{yz} = G \\kappa \\Big(\\frac{\\partial \\Phi}{\\partial y} + x \\Big).\n$$\nStatic equilibrium in the absence of body forces requires\n$$\n\\frac{\\partial \\tau_{xz}}{\\partial x} + \\frac{\\partial \\tau_{yz}}{\\partial y} = 0 \\quad \\text{in } \\Omega.\n$$\nSubstituting the shear stresses yields\n$$\nG \\kappa \\left( \\frac{\\partial^2 \\Phi}{\\partial x^2} + \\frac{\\partial^2 \\Phi}{\\partial y^2} \\right) = 0 \\quad \\Rightarrow \\quad \\nabla^2 \\Phi = 0 \\quad \\text{in } \\Omega,\n$$\nso the warping function solves a homogeneous Laplace equation. The traction-free condition on the lateral surface is\n$$\n\\tau_{xz} n_x + \\tau_{yz} n_y = 0 \\quad \\text{on } \\partial \\Omega,\n$$\nwhich, upon substitution, gives\n$$\nG \\kappa \\left[ \\Big(\\frac{\\partial \\Phi}{\\partial x} - y \\Big) n_x + \\Big(\\frac{\\partial \\Phi}{\\partial y} + x \\Big) n_y \\right] = 0.\n$$\nFor nonzero $G$ and $\\kappa$, this simplifies to the Neumann boundary condition\n$$\n\\frac{\\partial \\Phi}{\\partial n} \\equiv \\nabla \\Phi \\cdot \\boldsymbol{n} = y \\, n_x - x \\, n_y \\quad \\text{on } \\partial \\Omega.\n$$\nBecause the Laplace operator with pure Neumann data determines $\\Phi$ up to an additive constant, we fix uniqueness by a normalization; for example,\n$$\n\\int_{\\Omega} \\Phi \\, dA = 0,\n$$\nor, numerically, by setting one nodal value to zero.\n\nWeak form. Multiply $\\nabla^2 \\Phi = 0$ by an arbitrary test function $v \\in H^1(\\Omega)$ and integrate over $\\Omega$:\n$$\n\\int_{\\Omega} (\\nabla^2 \\Phi) \\, v \\, dA = 0.\n$$\nApplying Greenâs identity,\n$$\n- \\int_{\\Omega} \\nabla \\Phi \\cdot \\nabla v \\, dA + \\int_{\\partial \\Omega} \\frac{\\partial \\Phi}{\\partial n} \\, v \\, ds = 0.\n$$\nUsing the natural boundary data $\\partial \\Phi/\\partial n = y n_x - x n_y$, the weak form is:\nfind $\\Phi \\in H^1(\\Omega)$, unique up to an additive constant, such that\n$$\n\\int_{\\Omega} \\nabla \\Phi \\cdot \\nabla v \\, dA = \\int_{\\partial \\Omega} (y n_x - x n_y) \\, v \\, ds \\qquad \\forall v \\in H^1(\\Omega),\n$$\nwith the normalization condition to fix the nullspace.\n\nFinite Element Method (FEM) discretization with linear triangles. Let $\\mathcal{T}_h$ be a conforming triangulation of $\\Omega$. On an element $e$ with vertices $(x_1,y_1)$, $(x_2,y_2)$, $(x_3,y_3)$ and area $A_e$, the linear shape functions are\n$$\nN_i(x,y) = \\frac{a_i + b_i x + c_i y}{2 A_e}, \\quad i \\in \\{1,2,3\\},\n$$\nwith constants\n$$\nb_1 = y_2 - y_3,\\quad b_2 = y_3 - y_1,\\quad b_3 = y_1 - y_2, \\qquad\nc_1 = x_3 - x_2,\\quad c_2 = x_1 - x_3,\\quad c_3 = x_2 - x_1,\n$$\nand gradients\n$$\n\\nabla N_i = \\frac{1}{2 A_e}\\begin{bmatrix} b_i \\\\ c_i \\end{bmatrix},\n$$\nwhich are constant on $e$. The element stiffness matrix $K^{(e)} \\in \\mathbb{R}^{3 \\times 3}$ has entries\n$$\nK^{(e)}_{ij} = \\int_{e} \\nabla N_i \\cdot \\nabla N_j \\, dA = \\frac{b_i b_j + c_i c_j}{4 A_e}, \\quad i,j \\in \\{1,2,3\\}.\n$$\nNeumann load vector on a boundary edge. Suppose an element edge with end nodes $i$ and $j$ lies on $\\partial \\Omega$. Let the edge length be $L_{ij}$ and the outward unit normal be $\\boldsymbol{n} = (n_x,n_y)$, which is constant along a straight edge. Parameterize the edge by $t \\in [0,1]$ so that the position is $\\boldsymbol{x}(t) = \\boldsymbol{x}_i + t (\\boldsymbol{x}_j - \\boldsymbol{x}_i)$ with $\\boldsymbol{x}_i = (x_i,y_i)$ and $\\Delta \\boldsymbol{x} = \\boldsymbol{x}_j - \\boldsymbol{x}_i = (\\Delta x, \\Delta y)$. The shape functions restricted to the edge are $N_i(t) = 1-t$ and $N_j(t) = t$. The natural boundary data is $g(t) = y(t) n_x - x(t) n_y$. The consistent edge load contributions are\n$$\nf_i^{(e,\\partial)} = \\int_{\\text{edge }ij} N_i \\, g \\, ds = L_{ij} \\int_0^1 (1-t)\\, [A + t B] \\, dt\n= L_{ij} \\left( \\frac{A}{2} + \\frac{B}{6} \\right),\n$$\n$$\nf_j^{(e,\\partial)} = \\int_{\\text{edge }ij} N_j \\, g \\, ds = L_{ij} \\int_0^1 t\\, [A + t B] \\, dt\n= L_{ij} \\left( \\frac{A}{2} + \\frac{B}{3} \\right),\n$$\nwhere\n$$\nA = y_i n_x - x_i n_y, \\qquad B = \\Delta y \\, n_x - \\Delta x \\, n_y, \\qquad L_{ij} = \\sqrt{(\\Delta x)^2 + (\\Delta y)^2}.\n$$\nThere is no volumetric source term in the weak form, so interior element load vectors are zero.\n\nGlobal system and constraint. Assembling over all elements gives a symmetric positive semidefinite matrix $K$ and load vector $f$. To remove the constant nullspace, we enforce one Dirichlet constraint, e.g., $\\Phi(\\text{node }1) = 0$, by modifying the corresponding row and column of $K$ and the right-hand side $f$.\n\nPostprocessing for the torsional constant. With unit twist per unit length $\\kappa = 1$ and unit shear modulus $G=1$, the torsional constant $J$ can be computed from the warping solution as\n$$\nJ \\;=\\; \\int_{\\Omega} \\left[ \\left(\\frac{\\partial \\Phi}{\\partial x} - y \\right)^{2} + \\left(\\frac{\\partial \\Phi}{\\partial y} + x \\right)^{2} \\right] \\, dA.\n$$\nOn a linear triangle element, $\\nabla \\Phi$ is constant:\n$$\n\\nabla \\Phi|_{e} = \\sum_{i=1}^{3} \\Phi_i \\, \\nabla N_i = \\frac{1}{2 A_e} \\begin{bmatrix} \\sum_{i=1}^3 \\Phi_i b_i \\\\ \\sum_{i=1}^3 \\Phi_i c_i \\end{bmatrix}.\n$$\nDefine constants on $e$ as $p_e = \\partial \\Phi/\\partial x$ and $q_e = \\partial \\Phi/\\partial y$. The integrand is quadratic in $x$ and $y$, so a degree-$2$ exact quadrature rule on triangles suffices. Use the three-point symmetric rule with barycentric points $(\\tfrac{2}{3},\\tfrac{1}{6},\\tfrac{1}{6})$, $(\\tfrac{1}{6},\\tfrac{2}{3},\\tfrac{1}{6})$, $(\\tfrac{1}{6},\\tfrac{1}{6},\\tfrac{2}{3})$ and weights $A_e/3$ each. At each quadrature point with coordinates $(x_q,y_q)$, evaluate\n$$\nq_e(x_q,y_q) = \\left(p_e - y_q \\right)^2 + \\left(q_e + x_q \\right)^2,\n$$\nand sum $J_e = \\sum_{q=1}^{3} \\left( \\frac{A_e}{3} \\, q_e(x_q,y_q) \\right)$. The global torsional constant is $J = \\sum_{e} J_e$.\n\nAlgorithmic implementation summary:\n- Generate the meshes for the three test cases.\n- For each mesh, assemble $K$ from the element stiffness matrices using $K^{(e)}_{ij} = (b_i b_j + c_i c_j)/(4 A_e)$.\n- Build the Neumann load vector $f$ by summing the boundary edge contributions $f_i^{(e,\\partial)}$ using the closed-form expressions for $A$ and $B$ and outward unit normals computed from edge geometry.\n- Impose $\\Phi$ equal to zero at one node to fix the constant nullspace, and solve $K \\Phi = f$.\n- Compute $J$ via the degree-$2$ exact triangle quadrature.\n- Report $J$ for the three cases in $\\text{m}^4$.\n\nThe program adheres to the required units: twist per unit length $\\kappa$ in radians per meter (set to $\\kappa = 1$), shear modulus $G$ in pascals (set to $G=1$), and outputs $J$ in $\\text{m}^4$.\n\nThe final output format is a single line containing the results as a comma-separated list enclosed in square brackets, i.e., \"[resultA,resultB,resultC]\".", "answer": "```python\nimport numpy as np\n\ndef triangle_area(coords):\n    x1, y1 = coords[0]\n    x2, y2 = coords[1]\n    x3, y3 = coords[2]\n    return 0.5 * abs((x2 - x1)*(y3 - y1) - (x3 - x1)*(y2 - y1))\n\ndef tri_bc_constants(coords):\n    # Returns arrays b and c for a 3-node triangle with nodes in order (1,2,3)\n    x1, y1 = coords[0]\n    x2, y2 = coords[1]\n    x3, y3 = coords[2]\n    b = np.array([y2 - y3, y3 - y1, y1 - y2], dtype=float)\n    c = np.array([x3 - x2, x1 - x3, x2 - x1], dtype=float)\n    return b, c\n\ndef tri_stiffness(coords):\n    # Linear triangle element stiffness for Laplace operator\n    A = triangle_area(coords)\n    b, c = tri_bc_constants(coords)\n    Ke = (np.outer(b, b) + np.outer(c, c)) / (4.0 * A)\n    return Ke\n\ndef edge_outward_normal(p_i, p_j, centroid):\n    # Compute outward unit normal for boundary edge ij using centroid test\n    v = p_j - p_i\n    L = np.linalg.norm(v)\n    if L == 0.0:\n        return np.array([0.0, 0.0]), 0.0\n    # Candidate normal by rotating edge vector by +90 degrees (clockwise): (vy, -vx)\n    n = np.array([v[1], -v[0]]) / L\n    mid = 0.5 * (p_i + p_j)\n    # Flip to make it point outward: dot(n, mid - centroid) > 0\n    if np.dot(n, mid - centroid)  0.0:\n        n = -n\n    return n, L\n\ndef assemble_system(nodes, elements):\n    N = len(nodes)\n    K = np.zeros((N, N), dtype=float)\n    f = np.zeros(N, dtype=float)\n\n    # Assemble stiffness\n    for elem in elements:\n        coords = nodes[np.array(elem)]\n        Ke = tri_stiffness(coords)\n        for a_local, a_global in enumerate(elem):\n            for b_local, b_global in enumerate(elem):\n                K[a_global, b_global] += Ke[a_local, b_local]\n\n    # Identify boundary edges (edges that appear only once)\n    edge_count = {}\n    edge_dir = {}\n    for elem in elements:\n        for (i_local, j_local) in [(0,1), (1,2), (2,0)]:\n            i = elem[i_local]\n            j = elem[j_local]\n            key = (min(i, j), max(i, j))\n            if key not in edge_count:\n                edge_count[key] = 0\n                edge_dir[key] = (i, j)  # store directed edge as first seen\n            edge_count[key] += 1\n\n    # Compute domain centroid (for outward normal orientation)\n    centroid = np.mean(nodes, axis=0)\n\n    # Assemble Neumann load from boundary edges\n    for key, count in edge_count.items():\n        if count == 1:\n            i, j = edge_dir[key]\n            pi = nodes[i]\n            pj = nodes[j]\n            n, L = edge_outward_normal(pi, pj, centroid)\n            nx, ny = n\n            xi, yi = pi\n            dx, dy = pj - pi\n\n            A_val = yi * nx - xi * ny\n            B_val = dy * nx - dx * ny\n\n            fi = L * (0.5 * A_val + (1.0/6.0) * B_val)\n            fj = L * (0.5 * A_val + (1.0/3.0) * B_val)\n\n            f[i] += fi\n            f[j] += fj\n\n    return K, f\n\ndef apply_dirichlet_constraint(K, f, node_index, value=0.0):\n    # Enforce Phi(node_index) = value\n    n = K.shape[0]\n    K[node_index, :] = 0.0\n    K[:, node_index] = 0.0\n    K[node_index, node_index] = 1.0\n    f[node_index] = value\n    return K, f\n\ndef solve_system(K, f):\n    return np.linalg.solve(K, f)\n\ndef tri_grad_phi(coords, phi_local):\n    # Compute constant gradient on linear triangle: grad Phi = 1/(2A) * [sum(phi_i b_i), sum(phi_i c_i)]\n    A = triangle_area(coords)\n    b, c = tri_bc_constants(coords)\n    px = np.dot(phi_local, b) / (2.0 * A)\n    py = np.dot(phi_local, c) / (2.0 * A)\n    return px, py, A\n\ndef tri_quadrature_points(coords):\n    # Degree-2 exact symmetric quadrature: 3 points, barycentric coords\n    lams = np.array([\n        [2.0/3.0, 1.0/6.0, 1.0/6.0],\n        [1.0/6.0, 2.0/3.0, 1.0/6.0],\n        [1.0/6.0, 1.0/6.0, 2.0/3.0]\n    ])\n    pts = []\n    for lam in lams:\n        x = lam[0]*coords[0,0] + lam[1]*coords[1,0] + lam[2]*coords[2,0]\n        y = lam[0]*coords[0,1] + lam[1]*coords[1,1] + lam[2]*coords[2,1]\n        pts.append((x, y))\n    return pts\n\ndef compute_J(nodes, elements, phi):\n    # Unit twist kappa=1, unit shear modulus G=1\n    J = 0.0\n    for elem in elements:\n        coords = nodes[np.array(elem)]\n        phi_local = phi[np.array(elem)]\n        px, py, A = tri_grad_phi(coords, phi_local)\n        # Quadrature\n        w = A / 3.0\n        for (xq, yq) in tri_quadrature_points(coords):\n            integrand = (px - yq)**2 + (py + xq)**2\n            J += w * integrand\n    return J\n\ndef rect_mesh(width, height, nx, ny):\n    # Structured rectangular mesh, split each cell by diagonal from (i,j) to (i+1,j+1)\n    xs = np.linspace(0.0, width, nx+1)\n    ys = np.linspace(0.0, height, ny+1)\n    nodes = np.array([(x, y) for y in ys for x in xs], dtype=float)\n    def node_id(i, j):\n        return j*(nx+1) + i\n    elements = []\n    for j in range(ny):\n        for i in range(nx):\n            n00 = node_id(i, j)\n            n10 = node_id(i+1, j)\n            n01 = node_id(i, j+1)\n            n11 = node_id(i+1, j+1)\n            # Two triangles: (n00, n10, n11) and (n00, n11, n01)\n            elements.append([n00, n10, n11])\n            elements.append([n00, n11, n01])\n    return nodes, elements\n\ndef right_triangle_mesh():\n    # Single triangle with vertices (0,0), (1,0), (0,1)\n    nodes = np.array([[0.0, 0.0],\n                      [1.0, 0.0],\n                      [0.0, 1.0]], dtype=float)\n    elements = [[0, 1, 2]]\n    return nodes, elements\n\ndef run_case(nodes, elements):\n    K, f = assemble_system(nodes, elements)\n    # Fix one node to zero (e.g., node 0)\n    Kc, fc = apply_dirichlet_constraint(K, f, node_index=0, value=0.0)\n    phi = solve_system(Kc, fc)\n    J = compute_J(nodes, elements, phi)\n    return J\n\ndef solve():\n    # Test cases:\n    # Case A: Unit square [0,1]x[0,1], 2x2 grid\n    nodes_A, elems_A = rect_mesh(1.0, 1.0, nx=2, ny=2)\n    JA = run_case(nodes_A, elems_A)\n\n    # Case B: Right triangle single element\n    nodes_B, elems_B = right_triangle_mesh()\n    JB = run_case(nodes_B, elems_B)\n\n    # Case C: Thin rectangle [0,2]x[0,0.5], 4x1 grid\n    nodes_C, elems_C = rect_mesh(2.0, 0.5, nx=4, ny=1)\n    JC = run_case(nodes_C, elems_C)\n\n    results = [JA, JB, JC]\n    print(f\"[{','.join(map(str, results))}]\")\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "2710723"}]}