{"hands_on_practices": [{"introduction": "This problem explores stress concentrations in a plate, a classic topic in elasticity where the principle of superposition is a powerful analytical tool. By combining known solutions for simple loading cases—uniaxial tension (Kirsch solution) and internal pressure (Lamé solution)—you will analyze a more complex, combined loading scenario. This exercise [@problem_id:630098] demonstrates how fundamental solutions act as building blocks, allowing us to predict stress states and design against failure in realistic engineering components without deriving complex stress fields from first principles.", "problem": "An infinite, thin, isotropic, and linear elastic plate contains a circular hole of radius $R$. The plate is subjected to a remote biaxial stress field, with principal stresses $\\sigma_x$ and $\\sigma_y$ acting along the Cartesian axes $x$ and $y$, respectively. Additionally, the boundary of the hole is subjected to a uniform internal pressure $p$.\n\nThe stress components in polar coordinates $(r, \\theta)$ around a circular hole in an infinite plate for different loading cases are given. The angle $\\theta$ is measured counter-clockwise from the positive $x$-axis.\n\n1.  For a remote uniaxial tension $\\sigma_0$ acting along the $x$-axis, the tangential stress at the hole boundary ($r=R$) is given by the Kirsch equation:\n    $$ \\sigma_{\\theta\\theta}(R, \\theta) = \\sigma_0 (1 - 2\\cos(2\\theta)) $$\n2.  For a uniform internal pressure $p$ applied to the hole boundary, with zero stress at infinity, the Lamé solution gives the tangential stress at the boundary as:\n    $$ \\sigma_{\\theta\\theta}(R) = p $$\n\nUsing the principle of superposition, derive an expression for the internal pressure $p$ in terms of $\\sigma_x$ and $\\sigma_y$ that makes the minimum tangential stress at the boundary of the hole equal to zero. You may assume that $\\sigma_x > \\sigma_y > 0$.", "solution": "We superpose three loading cases: remote tension $\\sigma_x$ along $x$, remote tension $\\sigma_y$ along $y$, and internal pressure $p$.  \n\n1. Remote uniaxial tension $\\sigma_x$ along $x$ (Kirsch):\n$$\n\\sigma_{\\theta\\theta}^{(x)}(R,\\theta)=\\sigma_x\\bigl(1-2\\cos2\\theta\\bigr).\n$$\n\n2. Remote uniaxial tension $\\sigma_y$ along $y$ is equivalent to Kirsch with $\\theta\\to\\theta+\\tfrac\\pi2$:\n$$\n\\sigma_{\\theta\\theta}^{(y)}(R,\\theta)\n=\\sigma_y\\bigl[1-2\\cos2(\\theta+\\tfrac\\pi2)\\bigr]\n=\\sigma_y\\bigl(1+2\\cos2\\theta\\bigr).\n$$\n\n3. Uniform internal pressure $p$ gives\n$$\n\\sigma_{\\theta\\theta}^{(p)}(R)=p.\n$$\n\nBy superposition,\n$$\n\\sigma_{\\theta\\theta}(R,\\theta)\n=\\sigma_x(1-2\\cos2\\theta)+\\sigma_y(1+2\\cos2\\theta)+p\n=\\bigl(\\sigma_x+\\sigma_y+p\\bigr)+2(\\sigma_y-\\sigma_x)\\cos2\\theta.\n$$\n\nSince $\\sigma_x>\\sigma_y$, the coefficient $2(\\sigma_y-\\sigma_x)<0$, so the minimum occurs at $\\cos2\\theta=1$:\n$$\n\\sigma_{\\min}\n=(\\sigma_x+\\sigma_y+p)+2(\\sigma_y-\\sigma_x)\n=-\\sigma_x+3\\sigma_y+p.\n$$\n\nRequiring $\\sigma_{\\min}=0$ yields\n$$\np=\\sigma_x-3\\sigma_y.\n$$", "answer": "$$\\boxed{\\sigma_x-3\\sigma_y}$$", "id": "630098"}, {"introduction": "The principle of superposition is not only a tool for solving problems but also for analyzing and comparing the underlying physical models. This exercise [@problem_id:2699126] challenges you to apply superposition within two distinct beam theories, the Euler–Bernoulli and Timoshenko models, to analyze a cantilever beam under multiple point loads. By deriving and comparing the total deflections, you will use this framework to quantify the contribution of shear deformation, thereby determining the slenderness ratio at which the simpler Euler–Bernoulli model ceases to be a valid approximation.", "problem": "A straight, prismatic, homogeneous, linearly elastic cantilever beam of length $L$, rectangular cross-section of width $b$ and thickness $h$, Young’s modulus $E$, shear modulus $G$, and shear correction coefficient $\\kappa$ is subjected to two transverse point loads $P_{1}$ and $P_{2}$ applied at distances $x=c_{1}L$ and $x=c_{2}L$ from the fixed end ($0<c_{1},c_{2}\\le 1$). Assume small strains, small rotations, and linear material behavior. Using the principle of superposition for linear systems, the total transverse deflection at the free end equals the sum of the deflections due to each load.\n\nStarting only from the linear kinematics and constitutive relations of the Euler–Bernoulli Beam (EB) theory and the Timoshenko Beam (TB) theory, derive the superposed free-end deflection under the combined loading in each theory. Then, define the relative change\n$$\\Delta \\equiv \\frac{w_{\\mathrm{TB}}-w_{\\mathrm{EB}}}{w_{\\mathrm{EB}}},$$\nand determine the minimum slenderness ratio $s^{\\ast}\\equiv L/h$ such that $\\Delta=\\delta$ for a prescribed threshold $\\delta>0$.\n\nTake the rectangular-section shear correction coefficient $\\kappa= \\frac{5}{6}$, and use the elastic relation $E=2G(1+\\nu)$ with Poisson’s ratio $\\nu$. Evaluate your final expression for the following data: $P_{1}=3.0$ kN, $P_{2}=5.0$ kN, $c_{1}=0.35$, $c_{2}=0.70$, $E=210$ GPa, $\\nu=0.30$, and the materiality threshold $\\delta=0.05$. Express the final answer as the dimensionless slenderness ratio $s^{\\ast}=L/h$. Round your answer to four significant figures.", "solution": "The problem statement poses a standard question in structural mechanics, comparing the Euler-Bernoulli and Timoshenko beam theories. The problem is scientifically grounded, well-posed, objective, and contains all necessary information for a unique solution. It is therefore deemed valid. The solution will proceed by first deriving the end deflection of a cantilever beam under a single point load for each theory, then applying the principle of superposition, and finally determining the required slenderness ratio.\n\nFirst, we establish the fundamental relations. Let $x$ be the coordinate along the beam's neutral axis, with the fixed end at $x=0$. Let $w(x)$ be the transverse deflection, $\\psi(x)$ be the rotation of the cross-section, $M(x)$ be the bending moment, and $V(x)$ be the shear force. The material is linearly elastic with Young's modulus $E$ and shear modulus $G$. The cross-section is rectangular with width $b$ and height $h$, giving area $A=bh$ and second moment of area $I=\\frac{bh^3}{12}$.\n\nConsider a single transverse point load $P$ applied at a distance $a$ from the fixed end, where $0 < a \\le L$. For a cantilever beam, the internal bending moment and shear force for the segment $0 \\le x \\le a$ are given by $M(x) = P(a-x)$ and $V(x) = P$. For the segment $a < x \\le L$, $M(x)=0$ and $V(x)=0$. The boundary conditions at the fixed end ($x=0$) are zero deflection, $w(0)=0$, and zero rotation.\n\nFor the Euler-Bernoulli (EB) beam theory, we assume that plane sections remain perpendicular to the neutral axis after deformation, which implies that shear deformation is neglected. The rotation of the neutral axis is $\\frac{dw}{dx}$. The moment-curvature relationship is:\n$$EI \\frac{d^2w}{dx^2} = M(x)$$\nWe integrate this equation for the two segments of the beam.\nFor $0 \\le x \\le a$:\n$$EI \\frac{d^2w}{dx^2} = P(a-x)$$\nIntegrating with respect to $x$ gives the slope:\n$$EI \\frac{dw}{dx} = P(ax - \\frac{x^2}{2}) + C_1$$\nThe boundary condition at the fixed end is $\\frac{dw}{dx}(0) = 0$, which yields $C_1=0$.\nIntegrating again gives the deflection:\n$$EI w(x) = P(\\frac{ax^2}{2} - \\frac{x^3}{6}) + C_2$$\nThe boundary condition $w(0)=0$ yields $C_2=0$. Thus, for $0 \\le x \\le a$:\n$$w(x) = \\frac{P}{EI}\\left(\\frac{ax^2}{2} - \\frac{x^3}{6}\\right)$$\nFor the segment $a < x \\le L$, $M(x)=0$, so $EI \\frac{d^2w}{dx^2} = 0$. Integrating gives a linear deflection profile. The slope and deflection must be continuous at $x=a$.\nThe slope at $x=a$ is $\\frac{dw}{dx}(a) = \\frac{P}{EI}(a^2 - \\frac{a^2}{2}) = \\frac{Pa^2}{2EI}$.\nThe deflection at $x=a$ is $w(a) = \\frac{P}{EI}(\\frac{a^3}{2} - \\frac{a^3}{6}) = \\frac{Pa^3}{3EI}$.\nFor $a < x \\le L$, the slope is constant and equal to $\\frac{dw}{dx}(a)$. Thus, the deflection is:\n$$w(x) = w(a) + \\frac{dw}{dx}(a) (x-a) = \\frac{Pa^3}{3EI} + \\frac{Pa^2}{2EI}(x-a)$$\nThe deflection at the free end ($x=L$) is:\n$$w_{\\mathrm{EB}}(L; P, a) = \\frac{Pa^3}{3EI} + \\frac{Pa^2}{2EI}(L-a) = \\frac{P}{6EI}(2a^3 + 3a^2L - 3a^3) = \\frac{Pa^2(3L-a)}{6EI}$$\n\nFor the Timoshenko (TB) beam theory, shear deformation is considered. The total slope of the neutral axis, $\\frac{dw}{dx}$, is the sum of the rotation of the cross-section, $\\psi$, and the average shear strain on the cross-section, $\\gamma$.\n$$\\frac{dw}{dx} = \\psi + \\gamma$$\nThe constitutive relations are:\n$$M(x) = EI \\frac{d\\psi}{dx} \\quad \\text{and} \\quad V(x) = \\kappa G A \\gamma = \\kappa G A \\left(\\frac{dw}{dx} - \\psi\\right)$$\nwhere $\\kappa$ is the shear correction coefficient.\nThe total deflection $w(x)$ can be considered as the sum of the bending deflection, $w_b$, and the shear deflection, $w_s$. The bending component is governed by the same kinematics as the EB beam, so $w_b(x)$ is identical to the EB deflection derived above.\n$$w_b(L; P, a) = \\frac{Pa^2(3L-a)}{6EI}$$\nThe shear deflection is obtained by integrating the shear strain $\\gamma = \\frac{V(x)}{\\kappa G A}$.\n$$w_s(x) = \\int_0^x \\gamma(x') dx' = \\int_0^x \\frac{V(x')}{\\kappa G A} dx'$$\nFor a load $P$ at $x=a$, the shear force $V(x)=P$ for $0 \\le x \\le a$ and $V(x)=0$ for $a < x \\le L$. The shear deformation therefore only occurs over the segment $[0, a]$. The segment $[a, L]$ translates and rotates as a rigid body with the shear-induced displacement and rotation at $x=a$. The deflection at the tip due to shear is simply the deflection accumulated up to the point of a load.\n$$w_s(L; P, a) = \\int_0^a \\frac{P}{\\kappa G A} dx = \\frac{Pa}{\\kappa G A}$$\nThe total deflection at the free end under Timoshenko theory is the sum of the bending and shear contributions:\n$$w_{\\mathrm{TB}}(L; P, a) = w_b(L; P, a) + w_s(L; P, a) = \\frac{Pa^2(3L-a)}{6EI} + \\frac{Pa}{\\kappa G A}$$\n\nNow we apply the principle of superposition for the two loads, $P_1$ at $a_1=c_1L$ and $P_2$ at $a_2=c_2L$.\nThe total Euler-Bernoulli deflection at the free end is:\n$$w_{\\mathrm{EB}} = w_{\\mathrm{EB}}(L; P_1, c_1L) + w_{\\mathrm{EB}}(L; P_2, c_2L)$$\n$$w_{\\mathrm{EB}} = \\frac{P_1(c_1L)^2(3L-c_1L)}{6EI} + \\frac{P_2(c_2L)^2(3L-c_2L)}{6EI}$$\n$$w_{\\mathrm{EB}} = \\frac{L^3}{6EI} \\left[ P_1 c_1^2(3-c_1) + P_2 c_2^2(3-c_2) \\right]$$\nThe total Timoshenko deflection at the free end is:\n$$w_{\\mathrm{TB}} = w_{\\mathrm{TB}}(L; P_1, c_1L) + w_{\\mathrm{TB}}(L; P_2, c_2L)$$\n$$w_{\\mathrm{TB}} = \\left( \\frac{P_1(c_1L)^2(3L-c_1L)}{6EI} + \\frac{P_1(c_1L)}{\\kappa G A} \\right) + \\left( \\frac{P_2(c_2L)^2(3L-c_2L)}{6EI} + \\frac{P_2(c_2L)}{\\kappa G A} \\right)$$\n$$w_{\\mathrm{TB}} = w_{\\mathrm{EB}} + \\frac{L}{\\kappa G A} (P_1 c_1 + P_2 c_2)$$\n\nThe relative change $\\Delta$ is defined as $\\frac{w_{\\mathrm{TB}}-w_{\\mathrm{EB}}}{w_{\\mathrm{EB}}}$.\n$$\\Delta = \\frac{\\frac{L}{\\kappa G A} (P_1 c_1 + P_2 c_2)}{\\frac{L^3}{6EI} \\left[ P_1 c_1^2(3-c_1) + P_2 c_2^2(3-c_2) \\right]}$$\nTo express this in terms of the slenderness ratio $s = L/h$, we substitute $I=\\frac{bh^3}{12}$, $A=bh$, and the elastic relation $E=2G(1+\\nu)$.\n$$\\Delta = \\frac{L}{\\kappa G (bh)} \\frac{6E(\\frac{bh^3}{12})}{L^3} \\frac{P_1 c_1 + P_2 c_2}{P_1 c_1^2(3-c_1) + P_2 c_2^2(3-c_2)}$$\n$$\\Delta = \\frac{L}{\\kappa G bh} \\frac{Ebh^3}{2L^3} \\frac{P_1 c_1 + P_2 c_2}{P_1 c_1^2(3-c_1) + P_2 c_2^2(3-c_2)}$$\n$$\\Delta = \\frac{E}{\\kappa G} \\frac{h^2}{2L^2} \\frac{P_1 c_1 + P_2 c_2}{P_1 c_1^2(3-c_1) + P_2 c_2^2(3-c_2)} = \\frac{2G(1+\\nu)}{\\kappa G} \\frac{1}{2s^2} \\frac{P_1 c_1 + P_2 c_2}{P_1 c_1^2(3-c_1) + P_2 c_2^2(3-c_2)}$$\n$$\\Delta = \\frac{1+\\nu}{\\kappa s^2} \\frac{P_1 c_1 + P_2 c_2}{P_1 c_1^2(3-c_1) + P_2 c_2^2(3-c_2)}$$\nWe are tasked to find the minimum slenderness ratio $s^*$ for which $\\Delta = \\delta$.\n$$\\delta = \\frac{1+\\nu}{\\kappa (s^*)^2} \\frac{P_1 c_1 + P_2 c_2}{P_1 c_1^2(3-c_1) + P_2 c_2^2(3-c_2)}$$\nSolving for $s^*$:\n$$s^* = \\sqrt{\\frac{1+\\nu}{\\kappa \\delta} \\frac{P_1 c_1 + P_2 c_2}{P_1 c_1^2(3-c_1) + P_2 c_2^2(3-c_2)}}$$\n\nFinally, we substitute the given numerical values: $P_1 = 3.0 \\times 10^3\\,$N, $P_2 = 5.0 \\times 10^3\\,$N, $c_1=0.35$, $c_2=0.70$, $\\nu=0.30$, $\\kappa=5/6$, and $\\delta=0.05$. The factor $10^3$ in the loads cancels, so we use $P_1=3.0$ and $P_2=5.0$.\n\nFirst, calculate the dimensionless load factor:\n$$ \\mathcal{F} = \\frac{P_1 c_1 + P_2 c_2}{P_1 c_1^2(3-c_1) + P_2 c_2^2(3-c_2)} $$\nNumerator: $P_1 c_1 + P_2 c_2 = (3.0)(0.35) + (5.0)(0.70) = 1.05 + 3.5 = 4.55$.\nDenominator:\n$P_1 c_1^2(3-c_1) = (3.0)(0.35)^2(3-0.35) = (3.0)(0.1225)(2.65) = 0.973875$.\n$P_2 c_2^2(3-c_2) = (5.0)(0.70)^2(3-0.70) = (5.0)(0.49)(2.3) = 5.635$.\nThe denominator is $0.973875 + 5.635 = 6.608875$.\nSo, $\\mathcal{F} = \\frac{4.55}{6.608875} \\approx 0.6884606$.\n\nNext, calculate the material and threshold factor:\n$$ \\frac{1+\\nu}{\\kappa \\delta} = \\frac{1+0.30}{(5/6) \\times 0.05} = \\frac{1.3}{5/6 \\times 1/20} = \\frac{1.3}{5/120} = \\frac{1.3 \\times 120}{5} = 1.3 \\times 24 = 31.2 $$\n\nNow, we can find $(s^*)^2$:\n$$ (s^*)^2 = \\left( \\frac{1+\\nu}{\\kappa \\delta} \\right) \\mathcal{F} = (31.2) \\left( \\frac{4.55}{6.608875} \\right) \\approx 21.480051 $$\nThe slenderness ratio is the square root:\n$$ s^* = \\sqrt{21.480051} \\approx 4.634657 $$\nRounding to four significant figures gives $s^*=4.635$.\nThis result is physically reasonable; it indicates that for this loading configuration, shear deformation contributes $5\\%$ of the bending deflection for a relatively thick beam (low slenderness ratio).", "answer": "$$\\boxed{4.635}$$", "id": "2699126"}, {"introduction": "In modern engineering practice, superposition finds its most powerful expression in computational mechanics, forming the basis for highly efficient analysis techniques. This problem [@problem_id:2699158] recasts the principle in the language of linear algebra, where the response of a discrete system to a general force vector is a linear combination of responses to elementary unit loads. You will implement this concept by pre-computing \"influence vectors\" to rapidly assemble the solutions for numerous load patterns, illustrating a core strategy used in finite element analysis for tasks like design optimization and uncertainty quantification.", "problem": "A discrete linear elastic system is modeled by a symmetric positive definite stiffness matrix $K \\in \\mathbb{R}^{n \\times n}$, relating nodal displacement vector $u \\in \\mathbb{R}^{n}$ to nodal force vector $f \\in \\mathbb{R}^{n}$ via the linear equilibrium equation $K u = f$. By the linearity of the mapping $f \\mapsto u$, the principle of superposition holds. You are asked to compute responses for many sparse load patterns efficiently, without explicitly forming $K^{-1}$ and without refactorizing $K$ more than once per test case, by assembling responses from a small set of canonical influence solutions. Assume $K$ is time-invariant and independent of $f$.\n\nStart from fundamental momentum balance and linear elasticity assumptions: equilibrium of the discrete system enforces $K u = f$, with $K$ arising from a stable linear constitutive relation and compatible kinematics so that $K$ is symmetric positive definite. Use these principles to design an algorithm from first principles that minimizes repeated work across many load patterns by exploiting linearity. Do not use any prepackaged shortcut specific to a problem domain other than general linear algebra.\n\nYour program must solve the following test suite using $0$-based indexing for degrees of freedom. All physical units must be observed: stiffness entries are in newtons per meter ($\\mathrm{N/m}$), forces are in newtons ($\\mathrm{N}$), displacements are in meters ($\\mathrm{m}$), and strain energy is in joules ($\\mathrm{J}$). For each test case, precompute a minimal set of canonical influence responses and then, for each load pattern, assemble the displacement vector using superposition from those influence responses. For each load pattern, report only the total strain energy $U = \\tfrac{1}{2} f^{\\mathsf{T}} u$ in joules. Express each strain energy in joules as a decimal number rounded to six decimal places.\n\nConstraints that must be satisfied by your program for each test case:\n- Perform at most a single matrix factorization of $K$ per test case.\n- Do not explicitly form $K^{-1}$.\n- Use superposition by precomputing influence responses corresponding to a prescribed set of loadable degrees of freedom.\n- Each given load vector has nonzero entries only at the specified loadable degrees of freedom.\n\nTest suite. There are $3$ independent test cases. For each test case, a stiffness matrix $K$, a set $\\mathcal{I}$ of loadable degree-of-freedom indices, and a list of load vectors $\\{ f^{(j)} \\}$ are specified. Indices are $0$-based, and vectors are listed in coordinate order.\n\n- Test case $1$:\n  - Size $n = 4$.\n  - Stiffness\n    $$K_1 = 1000 \\cdot\n    \\begin{bmatrix}\n    2 & -1 & 0 & 0 \\\\\n    -1 & 2 & -1 & 0 \\\\\n    0 & -1 & 2 & -1 \\\\\n    0 & 0 & -1 & 2\n    \\end{bmatrix} \\quad [\\mathrm{N/m}].$$\n  - Loadable indices $\\mathcal{I}_1 = \\{0, 3\\}$.\n  - Load vectors (in newtons):\n    $$f_1^{(1)} = \\begin{bmatrix} 100 \\\\ 0 \\\\ 0 \\\\ 0 \\end{bmatrix}, \\quad\n      f_1^{(2)} = \\begin{bmatrix} 0 \\\\ 0 \\\\ 0 \\\\ 50 \\end{bmatrix}, \\quad\n      f_1^{(3)} = \\begin{bmatrix} 60 \\\\ 0 \\\\ 0 \\\\ 40 \\end{bmatrix}, \\quad\n      f_1^{(4)} = \\begin{bmatrix} 0 \\\\ 0 \\\\ 0 \\\\ 0 \\end{bmatrix}.$$\n\n- Test case $2$:\n  - Size $n = 5$.\n  - Stiffness\n    $$K_2 = 1500 \\cdot\n    \\begin{bmatrix}\n    2 & -1 & 0 & 0 & 0 \\\\\n    -1 & 2 & -1 & 0 & 0 \\\\\n    0 & -1 & 2 & -1 & 0 \\\\\n    0 & 0 & -1 & 2 & -1 \\\\\n    0 & 0 & 0 & -1 & 2\n    \\end{bmatrix} \\quad [\\mathrm{N/m}].$$\n  - Loadable indices $\\mathcal{I}_2 = \\{1, 4\\}$.\n  - Load vectors (in newtons):\n    $$f_2^{(1)} = \\begin{bmatrix} 0 \\\\ 120 \\\\ 0 \\\\ 0 \\\\ 0 \\end{bmatrix}, \\quad\n      f_2^{(2)} = \\begin{bmatrix} 0 \\\\ 80 \\\\ 0 \\\\ 0 \\\\ 40 \\end{bmatrix}, \\quad\n      f_2^{(3)} = \\begin{bmatrix} 0 \\\\ 0 \\\\ 0 \\\\ 0 \\\\ 100 \\end{bmatrix}, \\quad\n      f_2^{(4)} = \\begin{bmatrix} 0 \\\\ 0 \\\\ 0 \\\\ 0 \\\\ 0 \\end{bmatrix}.$$\n\n- Test case $3$:\n  - Size $n = 3$.\n  - Stiffness\n    $$K_3 = 500 \\cdot\n    \\begin{bmatrix}\n    2 & -1 & 0 \\\\\n    -1 & 2 & -1 \\\\\n    0 & -1 & 2\n    \\end{bmatrix} \\quad [\\mathrm{N/m}].$$\n  - Loadable indices $\\mathcal{I}_3 = \\{1\\}$.\n  - Load vectors (in newtons):\n    $$f_3^{(1)} = \\begin{bmatrix} 0 \\\\ 75 \\\\ 0 \\end{bmatrix}, \\quad\n      f_3^{(2)} = \\begin{bmatrix} 0 \\\\ 0 \\\\ 0 \\end{bmatrix}, \\quad\n      f_3^{(3)} = \\begin{bmatrix} 0 \\\\ 150 \\\\ 0 \\end{bmatrix}.$$\n\nRequired output. Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets. The list should have one entry per test case, in the same order as above. Each entry must be a list of decimal numbers, where each number is the strain energy $U = \\tfrac{1}{2} f^{\\mathsf{T}} u$ in joules for the corresponding load vector in the order given, rounded to six decimal places. For example, the overall format should be\n$$[\\,[U_{1}^{(1)}, U_{1}^{(2)}, \\dots],\\ [U_{2}^{(1)}, U_{2}^{(2)}, \\dots],\\ [U_{3}^{(1)}, U_{3}^{(2)}, \\dots]\\,],$$\nwith all $U$ expressed in $\\mathrm{J}$ as decimal numbers rounded to six decimal places.", "solution": "The problem is subjected to validation before a solution is attempted.\n\n### Step 1: Extract Givens\n- **Governing Equation**: The discrete linear elastic system is governed by the equilibrium equation $K u = f$, where $K \\in \\mathbb{R}^{n \\times n}$ is the symmetric positive definite stiffness matrix, $u \\in \\mathbb{R}^{n}$ is the nodal displacement vector, and $f \\in \\mathbb{R}^{n}$ is the nodal force vector.\n- **Principle of Superposition**: The linearity of the map $f \\mapsto u$ is explicitly stated.\n- **Strain Energy**: The total strain energy is given by the formula $U = \\tfrac{1}{2} f^{\\mathsf{T}} u$.\n- **Constraints on Method**:\n    1.  Perform at most one matrix factorization of $K$ per test case.\n    2.  Do not explicitly compute the matrix inverse $K^{-1}$.\n    3.  Use superposition by precomputing responses to canonical loads.\n    4.  Load vectors are sparse, with non-zero entries only at specified loadable degrees of freedom (DOFs).\n- **Test Cases**: Three test cases are provided. Each consists of a stiffness matrix $K$, a set of loadable DOF indices $\\mathcal{I}$, and a list of load vectors $\\{ f^{(j)} \\}$.\n    - **Test Case 1**:\n        - $n = 4$\n        - $K_1 = 1000 \\cdot [[2, -1, 0, 0], [-1, 2, -1, 0], [0, -1, 2, -1], [0, 0, -1, 2]]$ $\\mathrm{N/m}$\n        - $\\mathcal{I}_1 = \\{0, 3\\}$\n        - $f_1^{(1)} = [100, 0, 0, 0]^{\\mathsf{T}}$ $\\mathrm{N}$, $f_1^{(2)} = [0, 0, 0, 50]^{\\mathsf{T}}$ $\\mathrm{N}$, $f_1^{(3)} = [60, 0, 0, 40]^{\\mathsf{T}}$ $\\mathrm{N}$, $f_1^{(4)} = [0, 0, 0, 0]^{\\mathsf{T}}$ $\\mathrm{N}$\n    - **Test Case 2**:\n        - $n = 5$\n        - $K_2 = 1500 \\cdot [[2, -1, 0, 0, 0], [-1, 2, -1, 0, 0], [0, -1, 2, -1, 0], [0, 0, -1, 2, -1], [0, 0, 0, -1, 2]]$ $\\mathrm{N/m}$\n        - $\\mathcal{I}_2 = \\{1, 4\\}$\n        - $f_2^{(1)} = [0, 120, 0, 0, 0]^{\\mathsf{T}}$ $\\mathrm{N}$, $f_2^{(2)} = [0, 80, 0, 0, 40]^{\\mathsf{T}}$ $\\mathrm{N}$, $f_2^{(3)} = [0, 0, 0, 0, 100]^{\\mathsf{T}}$ $\\mathrm{N}$, $f_2^{(4)} = [0, 0, 0, 0, 0]^{\\mathsf{T}}$ $\\mathrm{N}$\n    - **Test Case 3**:\n        - $n = 3$\n        - $K_3 = 500 \\cdot [[2, -1, 0], [-1, 2, -1], [0, -1, 2]]$ $\\mathrm{N/m}$\n        - $\\mathcal{I}_3 = \\{1\\}$\n        - $f_3^{(1)} = [0, 75, 0]^{\\mathsf{T}}$ $\\mathrm{N}$, $f_3^{(2)} = [0, 0, 0]^{\\mathsf{T}}$ $\\mathrm{N}$, $f_3^{(3)} = [0, 150, 0]^{\\mathsf{T}}$ $\\mathrm{N}$\n- **Output Requirement**: For each test case, report a list of strain energies for each load vector, rounded to six decimal places, in a nested list format.\n\n### Step 2: Validate Using Extracted Givens\n- **Scientific Grounding**: The problem is founded on the fundamental principles of linear elasticity and structural mechanics, namely the equilibrium equation $K u = f$ for a discrete system and the principle of superposition which is a direct consequence of linearity. The stiffness matrices provided are symmetric and (as is well-known for this structure) positive definite, consistent with stable elastic systems. The definition of strain energy $U = \\tfrac{1}{2} f^{\\mathsf{T}} u$ is correct for a linear elastic system. The problem is scientifically sound.\n- **Well-Posed**: The stiffness matrix $K$ is stated to be symmetric positive definite, which means it is invertible. Therefore, for any given force vector $f$, a unique displacement vector $u = K^{-1}f$ exists. The problem is well-posed.\n- **Objectivity**: The problem is specified using precise mathematical notation and objective physical quantities. There are no subjective or ambiguous statements.\n- **Completeness and Consistency**: All necessary data ($K$, $\\mathcal{I}$, $f^{(j)}$) and formulas are provided for each test case. The constraints on the solution method are clearly defined and not contradictory. The problem is self-contained and consistent.\n- **Feasibility**: The numerical values and matrix structures are standard for academic problems in mechanics. There are no physically impossible conditions or dimensionally inconsistent data.\n\n### Step 3: Verdict and Action\nThe problem statement is valid. It is scientifically grounded, well-posed, objective, and complete. A solution will be constructed based on exploiting the principle of superposition as required.\n\n### Solution Derivation\nThe governing equation of the static, discrete linear elastic system is\n$$K u = f$$\nwhere $K$ is the stiffness matrix, $u$ is the displacement vector, and $f$ is the force vector. Since $K$ is a constant matrix, this represents a linear transformation from the space of forces to the space of displacements. The formal solution is $u = K^{-1}f$. This linearity gives rise to the principle of superposition.\n\nThe problem specifies that for any given test case, all applied load vectors $f$ have non-zero components only at a small, fixed set of degrees of freedom (DOFs), denoted by the index set $\\mathcal{I}$. Let the canonical basis vector for the $k$-th DOF be $e_k$, which is a vector with a value of $1$ at index $k$ and $0$ elsewhere. Any such load vector $f$ can be expressed as a linear combination of these basis vectors for $k \\in \\mathcal{I}$:\n$$f = \\sum_{k \\in \\mathcal{I}} f_k e_k$$\nwhere $f_k$ is the magnitude of the force applied at DOF $k$.\n\nBy the principle of superposition, the displacement response $u$ to the combined load $f$ is the sum of the scaled responses to each individual component of the load:\n$$u = K^{-1}f = K^{-1} \\left( \\sum_{k \\in \\mathcal{I}} f_k e_k \\right) = \\sum_{k \\in \\mathcal{I}} f_k (K^{-1} e_k)$$\n\nThis structure suggests an efficient computational strategy. We can precompute a set of \"influence vectors.\" An influence vector, which we denote as $u^{(k)}$, is the displacement response of the system to a unit load applied at a single DOF $k$. Mathematically, $u^{(k)}$ is the solution to the linear system:\n$$K u^{(k)} = e_k$$\nThus, $u^{(k)} = K^{-1}e_k$. Note that $u^{(k)}$ is simply the $k$-th column of the inverse matrix $K^{-1}$. However, the problem forbids the explicit computation of $K^{-1}$. Instead, we can solve the system $K u^{(k)} = e_k$ for each $k \\in \\mathcal{I}$ to find the required influence vectors.\n\nOnce the set of influence vectors $\\{u^{(k)} \\mid k \\in \\mathcal{I}\\}$ is precomputed, the displacement response $u^{(j)}$ for any given load vector $f^{(j)}$ can be assembled rapidly by linear combination:\n$$u^{(j)} = \\sum_{k \\in \\mathcal{I}} f_k^{(j)} u^{(k)}$$\nwhere $f_k^{(j)}$ is the $k$-th component of the vector $f^{(j)}$.\n\nFinally, the strain energy $U^{(j)}$ for each load case is calculated using its definition:\n$$U^{(j)} = \\frac{1}{2} (f^{(j)})^{\\mathsf{T}} u^{(j)}$$\n\nThe overall algorithm for each test case is as follows:\n1.  **Precomputation**:\n    a.  Factorize the stiffness matrix $K$ once. Since $K$ is symmetric and positive definite, Cholesky factorization ($K = LL^{\\mathsf{T}}$) is the most efficient choice. This single factorization adheres to the problem constraints.\n    b.  For each index $k$ in the set of loadable DOFs $\\mathcal{I}$:\n        i.  Construct the unit load vector $e_k$.\n        ii. Solve the linear system $K u^{(k)} = e_k$ to find the influence vector $u^{(k)}$. This is done efficiently using the precomputed Cholesky factors (forward and backward substitution), avoiding re-factorization and explicit inversion.\n    c.  Store the computed influence vectors $\\{u^{(k)}\\}_{k \\in \\mathcal{I}}$.\n\n2.  **Response Calculation**:\n    a.  For each load vector $f^{(j)}$ provided in the test case:\n        i.  Initialize the total displacement vector $u^{(j)}$ to the zero vector.\n        ii. Assemble the total displacement by summing the contributions from each loadable DOF: $u^{(j)} = \\sum_{k \\in \\mathcal{I}} f_k^{(j)} u^{(k)}$.\n        iii. Compute the strain energy: $U^{(j)} = \\frac{1}{2} (f^{(j)})^{\\mathsf{T}} u^{(j)}$.\n    b.  Collect the computed energies for all load vectors in the test case.\n\nThis algorithm satisfies all problem constraints by performing only one factorization per test case, avoiding explicit matrix inversion, and leveraging superposition to efficiently compute responses for multiple load scenarios.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.linalg import cho_factor, cho_solve\n\ndef solve():\n    \"\"\"\n    Solves a series of linear elastic problems using the principle of superposition.\n    For each test case, it pre-computes influence vectors for a set of loadable\n    degrees of freedom and then assembles the response for various load patterns.\n    The final output is the strain energy for each load pattern.\n    \"\"\"\n    \n    # Define the test cases from the problem statement.\n    test_cases = [\n        {\n            \"K\": 1000.0 * np.array([\n                [2, -1, 0, 0],\n                [-1, 2, -1, 0],\n                [0, -1, 2, -1],\n                [0, 0, -1, 2]\n            ]),\n            \"loadable_indices\": [0, 3],\n            \"load_vectors\": [\n                np.array([100.0, 0, 0, 0]),\n                np.array([0, 0, 0, 50.0]),\n                np.array([60.0, 0, 0, 40.0]),\n                np.array([0, 0, 0, 0])\n            ]\n        },\n        {\n            \"K\": 1500.0 * np.array([\n                [2, -1, 0, 0, 0],\n                [-1, 2, -1, 0, 0],\n                [0, -1, 2, -1, 0],\n                [0, 0, -1, 2, -1],\n                [0, 0, 0, -1, 2]\n            ]),\n            \"loadable_indices\": [1, 4],\n            \"load_vectors\": [\n                np.array([0, 120.0, 0, 0, 0]),\n                np.array([0, 80.0, 0, 0, 40.0]),\n                np.array([0, 0, 0, 0, 100.0]),\n                np.array([0, 0, 0, 0, 0])\n            ]\n        },\n        {\n            \"K\": 500.0 * np.array([\n                [2, -1, 0],\n                [-1, 2, -1],\n                [0, -1, 2]\n            ]),\n            \"loadable_indices\": [1],\n            \"load_vectors\": [\n                np.array([0, 75.0, 0]),\n                np.array([0, 0, 0]),\n                np.array([0, 150.0, 0])\n            ]\n        }\n    ]\n\n    all_results = []\n\n    for case in test_cases:\n        K = case[\"K\"]\n        loadable_indices = case[\"loadable_indices\"]\n        load_vectors = case[\"load_vectors\"]\n        n = K.shape[0]\n        \n        # Precomputation Step\n        # 1. Factorize the stiffness matrix K = L L^T once.\n        # Since K is symmetric positive-definite, Cholesky factorization is used.\n        try:\n            c, low = cho_factor(K, lower=True)\n        except np.linalg.LinAlgError:\n            # This should not happen for the given valid matrices.\n            # Handle error gracefully if it occurs in a general case.\n            all_results.append([])\n            continue\n\n        # 2. Compute and store influence vectors for each loadable DOF.\n        # An influence vector u_k is the response to a unit load e_k at DOF k.\n        influence_vectors = {}\n        for k in loadable_indices:\n            # Create the unit load vector e_k.\n            e_k = np.zeros(n)\n            e_k[k] = 1.0\n            \n            # Solve K u_k = e_k using the precomputed Cholesky factorization.\n            u_k = cho_solve((c, low), e_k)\n            influence_vectors[k] = u_k\n\n        # Response Calculation Step\n        case_energies = []\n        for f in load_vectors:\n            # Assemble the total displacement u using superposition.\n            u = np.zeros(n)\n            for k in loadable_indices:\n                force_component = f[k]\n                if force_component != 0.0:\n                    u += force_component * influence_vectors[k]\n            \n            # Calculate strain energy U = 0.5 * f^T * u.\n            energy = 0.5 * np.dot(f, u)\n            \n            # Round to six decimal places as required.\n            case_energies.append(round(energy, 6))\n            \n        all_results.append(case_energies)\n\n    # Format the final output string exactly as specified.\n    # The str() of a list of lists is close, we just remove spaces.\n    final_output_string = str(all_results).replace(\" \", \"\")\n    print(final_output_string)\n\nsolve()\n```", "id": "2699158"}]}