{"hands_on_practices": [{"introduction": "Understanding the moment-curvature ($M-\\kappa$) relationship is foundational to inelastic structural analysis, as it serves as the section-level constitutive law that bridges material behavior and structural response. This first practice guides you through deriving this relationship from first principles for a rectangular beam with a bilinear material model that includes strain hardening [@problem_id:2670668]. By explicitly integrating the stress distribution over the cross-section, you will forge a direct link between the material's stress-strain properties and the section's evolving stiffness and moment capacity, building a solid intuition for nonlinear mechanics.", "problem": "A straight prismatic beam of rectangular cross-section, width $b$ and total depth $h$, is subjected to uniform bending about its strong axis under the Euler–Bernoulli kinematic assumption that plane sections remain plane and orthogonal to the neutral axis. The material obeys a bilinear, rate-independent stress–strain relation in uniaxial tension and compression with initial Young’s modulus $E$, yield stress $\\sigma_{y}$ at yield strain $\\varepsilon_{y} = \\sigma_{y}/E$, and a constant post-yield hardening modulus $H'$, identical in tension and compression. There is no axial force in the section, and the cross-section and material are symmetric so that the neutral axis remains at the mid-depth.\n\n1) Starting only from the definitions $\\varepsilon(y) = \\kappa\\,y$ for the longitudinal strain at a fiber located at a distance $y$ from the neutral axis and $M = \\int_{A} \\sigma(y)\\,y\\,\\mathrm{d}A$ for the bending moment, derive the exact section moment–curvature relation $M(\\kappa)$ for the rectangular section. Your derivation must explicitly identify the elastic regime and the elastoplastic regime, and express $M(\\kappa)$ in closed form in terms of $b$, $h$, $E$, $\\sigma_{y}$, $H'$, and $\\kappa$ only.\n\n2) Define an effective plastic moment at a prescribed local plastic hinge rotation demand $\\theta_{d}$ by introducing a plastic hinge length $L_{p}$ and assuming that the curvature is uniform across this length, so that the hinge rotation satisfies $\\theta_{d} = \\kappa\\,L_{p}$. Using your $M(\\kappa)$ from part 1, set $M_{\\mathrm{eff}}(\\theta_{d}) := M\\!\\left(\\kappa = \\theta_{d}/L_{p}\\right)$.\n\nEvaluate $M_{\\mathrm{eff}}(\\theta_{d})$ numerically for the data\n$b = 0.200 \\text{ m}$, $h = 0.300 \\text{ m}$, $E = 200 \\times 10^{9} \\text{ Pa}$, $\\sigma_{y} = 300 \\times 10^{6} \\text{ Pa}$, $H' = 5.0 \\times 10^{9} \\text{ Pa}$, $\\theta_{d} = 0.020 \\text{ rad}$, $L_{p} = 0.150 \\text{ m}$.\nExpress your final moment in $\\text{kN}\\cdot\\text{m}$ and round your answer to four significant figures.", "solution": "The problem statement is first subjected to validation.\n\nGivens extracted verbatim from the statement:\n- A straight prismatic beam of rectangular cross-section, width $b$ and total depth $h$.\n- Subjected to uniform bending about its strong axis.\n- Euler–Bernoulli kinematic assumption: plane sections remain plane and orthogonal to the neutral axis.\n- Material stress–strain relation: bilinear, rate-independent, with initial Young’s modulus $E$, yield stress $\\sigma_{y}$ at yield strain $\\varepsilon_{y} = \\sigma_{y}/E$, and a constant post-yield hardening modulus $H'$. Identical in tension and compression.\n- No axial force, neutral axis remains at mid-depth.\n- Definition of strain: $\\varepsilon(y) = \\kappa\\,y$.\n- Definition of bending moment: $M = \\int_{A} \\sigma(y)\\,y\\,\\mathrm{d}A$.\n- Part $1$ task: Derive the exact section moment–curvature relation $M(\\kappa)$ in closed form.\n- Part $2$ definitions: plastic hinge length $L_{p}$ and hinge rotation $\\theta_{d} = \\kappa\\,L_{p}$.\n- Part $2$ task: Evaluate $M_{\\mathrm{eff}}(\\theta_{d}) := M(\\kappa = \\theta_{d}/L_{p})$ numerically.\n- Numerical data: $b = 0.200 \\text{ m}$, $h = 0.300 \\text{ m}$, $E = 200 \\times 10^{9} \\text{ Pa}$, $\\sigma_{y} = 300 \\times 10^{6} \\text{ Pa}$, $H' = 5.0 \\times 10^{9} \\text{ Pa}$, $\\theta_{d} = 0.020 \\text{ rad}$, $L_{p} = 0.150 \\text{ m}$.\n- Final answer requirements: Express moment in $\\text{kN}\\cdot\\text{m}$, rounded to four significant figures.\n\nValidation against criteria:\n- **Scientifically Grounded**: The problem is a standard, fundamental problem in the field of inelastic solid mechanics. The concepts of Euler-Bernoulli kinematics, bilinear material models, moment-curvature relations, and plastic hinges are established and central to structural analysis.\n- **Well-Posed**: The problem is clearly defined, provides all necessary information and definitions, and leads to a unique, stable solution for both the analytical derivation and the numerical calculation.\n- **Objective**: The language is precise, technical, and free of any subjective or ambiguous terms.\n\nVerdict: The problem is valid. It is a well-formulated, self-contained problem in advanced mechanics of materials. We proceed with the solution.\n\nThe response of the cross-section is derived by first establishing the constitutive law and then integrating the stress field over the section.\n\n**Part 1: Derivation of the Moment-Curvature Relation $M(\\kappa)$**\n\nThe bilinear stress-strain law $\\sigma(\\varepsilon)$ is given by:\n$$\n\\sigma(\\varepsilon) =\n\\begin{cases}\nE\\varepsilon & \\text{for } |\\varepsilon| \\le \\varepsilon_y \\\\\n\\mathrm{sgn}(\\varepsilon)[\\sigma_y + H'(|\\varepsilon| - \\varepsilon_y)] & \\text{for } |\\varepsilon| > \\varepsilon_y\n\\end{cases}\n$$\nwhere $\\varepsilon_y = \\sigma_y / E$. The strain distribution is linear across the depth: $\\varepsilon(y) = \\kappa y$. The moment is $M = \\int_{-h/2}^{h/2} \\sigma(\\kappa y) y (b \\, dy)$.\n\n**Regime 1: Fully Elastic Behavior ($0 \\le \\kappa \\le \\kappa_y$)**\nThe section is fully elastic as long as the strain at the extreme fibers ($y = \\pm h/2$) does not exceed the yield strain. This condition, $|\\varepsilon(h/2)| = \\kappa (h/2) \\le \\varepsilon_y$, defines the limit of the elastic regime. The curvature at first yield is:\n$$ \\kappa_y = \\frac{\\varepsilon_y}{h/2} = \\frac{2\\varepsilon_y}{h} = \\frac{2\\sigma_y}{Eh} $$\nFor any curvature $\\kappa \\le \\kappa_y$, the stress is $\\sigma(y) = E\\varepsilon(y) = E\\kappa y$ everywhere. The moment is:\n$$ M(\\kappa) = \\int_{-h/2}^{h/2} (E\\kappa y) y (b \\, dy) = E\\kappa b \\int_{-h/2}^{h/2} y^2 dy = E\\kappa \\left( \\frac{bh^3}{12} \\right) $$\nLetting $I = bh^3/12$ be the second moment of area, the moment-curvature relation in the elastic regime is:\n$$ M(\\kappa) = EI\\kappa $$\n\n**Regime 2: Elastoplastic Behavior ($\\kappa > \\kappa_y$)**\nWhen $\\kappa > \\kappa_y$, the outer fibers yield. An elastic core exists for $|y| \\le y_c$, where $y_c$ is the distance from the neutral axis at which strain equals $\\varepsilon_y$.\n$$ \\kappa y_c = \\varepsilon_y \\implies y_c = \\frac{\\varepsilon_y}{\\kappa} = \\frac{\\kappa_y}{\\kappa}\\frac{h}{2} $$\nTo derive the moment, we use superposition. The stress-strain law can be decomposed as $\\sigma(\\varepsilon) = \\sigma_1(\\varepsilon) + \\sigma_2(\\varepsilon)$:\n1. A linear hardening component: $\\sigma_1(\\varepsilon) = H'\\varepsilon$. This is valid for all strains.\n2. An elastic-perfectly plastic component: $\\sigma_2(\\varepsilon)$, with elastic modulus $E' = E - H'$ and yield stress $\\sigma_{y,eff} = \\sigma_y - H'\\varepsilon_y = \\sigma_y(1 - H'/E)$. The yield strain for this component is $\\varepsilon_{y,eff} = \\sigma_{y,eff} / E' = \\sigma_y/E = \\varepsilon_y$.\n\nThe total moment is $M = M_1 + M_2$.\nThe moment from the linear hardening component is:\n$$ M_1 = \\int_A \\sigma_1(\\kappa y) y \\, dA = \\int_A (H'\\kappa y) y \\, dA = H'I\\kappa $$\nThe moment from the elastic-perfectly plastic component requires integration over its elastic core and plastic zones. For an elastic-perfectly plastic rectangular section, the moment is a known result:\n$$ M_2 = M_{p,eff} \\left( 1 - \\frac{1}{3} \\frac{y_c^2}{(h/2)^2} \\right) $$\nwhere $M_{p,eff}$ is the fully plastic moment for the effective yield stress $\\sigma_{y,eff}$, and $y_c$ is the extent of the elastic core.\n$$ M_{p,eff} = \\sigma_{y,eff} Z_p = \\sigma_y \\left(1 - \\frac{H'}{E}\\right) \\frac{bh^2}{4} $$\nHere, $Z_p = bh^2/4$ is the plastic section modulus. Substituting $y_c = (\\kappa_y/\\kappa)(h/2)$:\n$$ M_2 = \\sigma_y \\left(1 - \\frac{H'}{E}\\right) \\frac{bh^2}{4} \\left( 1 - \\frac{1}{3} \\left(\\frac{\\kappa_y}{\\kappa}\\right)^2 \\right) $$\nCombining the two parts gives the moment for the elastoplastic regime:\n$$ M(\\kappa) = H'I\\kappa + \\sigma_y \\left(1 - \\frac{H'}{E}\\right) \\frac{bh^2}{4} \\left( 1 - \\frac{1}{3} \\left(\\frac{\\kappa_y}{\\kappa}\\right)^2 \\right) $$\n\nSummary of the moment-curvature relation:\n$$\nM(\\kappa) =\n\\begin{cases}\nE I \\kappa & \\text{for } 0 \\le \\kappa \\le \\kappa_y \\\\\nH'I\\kappa + \\sigma_y \\left(1 - \\frac{H'}{E}\\right) Z_p \\left( 1 - \\frac{1}{3} \\left(\\frac{\\kappa_y}{\\kappa}\\right)^2 \\right) & \\text{for } \\kappa > \\kappa_y\n\\end{cases}\n$$\nwhere $I = bh^3/12$, $Z_p = bh^2/4$, and $\\kappa_y = 2\\sigma_y / (Eh)$.\n\n**Part 2: Numerical Evaluation**\n\nGiven data:\n$b = 0.200 \\text{ m}$\n$h = 0.300 \\text{ m}$\n$E = 200 \\times 10^{9} \\text{ Pa}$\n$\\sigma_{y} = 300 \\times 10^{6} \\text{ Pa}$\n$H' = 5.0 \\times 10^{9} \\text{ Pa}$\n$\\theta_{d} = 0.020 \\text{ rad}$\n$L_{p} = 0.150 \\text{ m}$\n\nFirst, calculate the required curvature $\\kappa$:\n$$ \\kappa = \\frac{\\theta_d}{L_p} = \\frac{0.020}{0.150} = \\frac{2}{15} \\text{ m}^{-1} \\approx 0.1333 \\text{ m}^{-1} $$\nNext, calculate the yield curvature $\\kappa_y$ to determine the regime:\n$$ \\kappa_y = \\frac{2\\sigma_y}{Eh} = \\frac{2 \\times (300 \\times 10^6 \\text{ Pa})}{(200 \\times 10^9 \\text{ Pa}) \\times (0.300 \\text{ m})} = \\frac{6 \\times 10^8}{6 \\times 10^{10}} = 0.01 \\text{ m}^{-1} $$\nSince $\\kappa = 2/15 \\text{ m}^{-1} > \\kappa_y = 0.01 \\text{ m}^{-1}$, the section is in the elastoplastic regime. We use the corresponding formula.\n\nCalculate the necessary geometric and material parameters:\nSecond moment of area:\n$$ I = \\frac{bh^3}{12} = \\frac{(0.200 \\text{ m})(0.300 \\text{ m})^3}{12} = 4.5 \\times 10^{-4} \\text{ m}^4 $$\nPlastic section modulus:\n$$ Z_p = \\frac{bh^2}{4} = \\frac{(0.200 \\text{ m})(0.300 \\text{ m})^2}{4} = 4.5 \\times 10^{-3} \\text{ m}^3 $$\nRatio of hardening modulus to Young's modulus:\n$$ \\frac{H'}{E} = \\frac{5.0 \\times 10^9 \\text{ Pa}}{200 \\times 10^9 \\text{ Pa}} = 0.025 $$\nRatio of curvatures squared:\n$$ \\left(\\frac{\\kappa_y}{\\kappa}\\right)^2 = \\left(\\frac{0.01}{2/15}\\right)^2 = (0.075)^2 = 0.005625 $$\n\nNow, evaluate the two terms of the moment expression:\nTerm $1$: $H'I\\kappa$\n$$ M_1 = (5.0 \\times 10^9 \\text{ Pa}) \\times (4.5 \\times 10^{-4} \\text{ m}^4) \\times (\\frac{2}{15} \\text{ m}^{-1}) = 300000 \\text{ N}\\cdot\\text{m} $$\nTerm $2$: $\\sigma_y (1 - H'/E) Z_p (1 - \\frac{1}{3}(\\kappa_y/\\kappa)^2)$\n$$ M_2 = (300 \\times 10^6 \\text{ Pa}) \\times (1 - 0.025) \\times (4.5 \\times 10^{-3} \\text{ m}^3) \\times \\left(1 - \\frac{1}{3}(0.005625)\\right) $$\n$$ M_2 = (300 \\times 10^6) \\times (0.975) \\times (4.5 \\times 10^{-3}) \\times (1 - 0.001875) $$\n$$ M_2 = (1316250) \\times (0.998125) \\text{ N}\\cdot\\text{m} $$\n$$ M_2 = 1313791.40625 \\text{ N}\\cdot\\text{m} $$\nThe total moment $M_{\\mathrm{eff}}(\\theta_d) = M(\\kappa)$ is the sum $M_1 + M_2$:\n$$ M = 300000 + 1313791.40625 = 1613791.40625 \\text{ N}\\cdot\\text{m} $$\nConvert to $\\text{kN}\\cdot\\text{m}$:\n$$ M = 1613.79140625 \\text{ kN}\\cdot\\text{m} $$\nRounding to four significant figures as required:\n$$ M \\approx 1614 \\text{ kN}\\cdot\\text{m} $$\nThe effective plastic moment is $1614 \\text{ kN}\\cdot\\text{m}$.", "answer": "$$\n\\boxed{1614}\n$$", "id": "2670668"}, {"introduction": "While analytical derivations are invaluable for conceptual understanding, their applicability is often limited to simple geometries and material laws. To analyze realistic engineering structures, we turn to numerical methods. This exercise introduces the powerful fiber-discretization method, a cornerstone of modern nonlinear analysis software used to compute the full moment-curvature-axial force interaction surface [@problem_id:2663507]. You will implement a computational algorithm that discretizes the cross-section into \"fibers,\" enforces force equilibrium, and integrates the resulting nonlinear stress field, providing you with a practical and general-purpose tool for section analysis.", "problem": "Consider a prismatic beam with a rectangular cross-section of width $b$ and height $h$. Assume the kinematics of Euler–Bernoulli beam theory (plane sections remain plane) so that the axial strain distribution over the cross-section is $\\epsilon_x(y) = \\epsilon_0 + \\kappa y$, where $y$ is the coordinate measured from the centroidal axis (positive upward), $\\epsilon_0$ is a uniform axial strain, and $\\kappa$ is the curvature (in radians per meter). The material is modeled as an isotropic, rate-independent, small-strain, one-dimensional elastoplastic solid with linear isotropic hardening: for a uniaxial state, the Cauchy stress is a function $\\sigma_x = \\sigma_x(\\epsilon_x)$ defined by the following principles:\n- Before yielding, stress is linear elastic with Young's modulus $E$.\n- Yielding initiates at the initial yield stress $\\sigma_{y0}$ in tension or compression.\n- After yielding under monotonic loading, the stress-strain response is bilinear, with hardening defined by a constant plastic modulus $H \\ge 0$, ensuring objectivity under load reversals is ignored for this problem.\nAssume small strains and small rotations, and neglect shear deformation.\n\nYour task is to implement a fiber-discretization section integration algorithm that, for a given curvature $\\kappa$, determines the unique axial strain offset $\\epsilon_0$ such that the resultant axial force over the cross-section vanishes, and then computes the corresponding bending moment $M$ (about the $z$ axis, with the $x$ axis along the beam and $y$ axis vertical). Specifically:\n- Discretize the cross-section into $N_y$ horizontal fibers of equal area $\\Delta A = b\\, h / N_y$, located at positions $y_i$ uniformly spanning the height, for $i = 1,2,\\ldots,N_y$.\n- Impose the axial strain in fiber $i$ as $\\epsilon_i = \\epsilon_0 + \\kappa y_i$.\n- Use a constitutive map $\\sigma_i = \\sigma_x(\\epsilon_i; E,\\sigma_{y0},H)$ that is consistent with linear elasticity up to first yield and linear isotropic hardening thereafter under monotonic loading.\n- Enforce axial force equilibrium $N(\\epsilon_0,\\kappa) = \\sum_{i=1}^{N_y} \\sigma_i \\Delta A = 0$ by solving for $\\epsilon_0$ for a given $\\kappa$.\n- Compute the bending moment $M(\\kappa) = \\sum_{i=1}^{N_y} \\sigma_i y_i \\Delta A$ once $N=0$ is satisfied.\n\nStart from fundamental principles only: equilibrium of internal resultants, kinematics of plane sections, and the definition of the bilinear elastoplastic behavior with linear isotropic hardening. Do not use or cite any pre-derived moment–curvature relations. Your implementation must handle both the purely elastic regime and the inelastic regime up to nearly fully plastic response, and must be robust in the limit of perfect plasticity ($H=0$).\n\nNumerical and physical specifications:\n- Use the International System of Units: $b$ and $h$ in meters, $E$ and $\\sigma_{y0}$ and $H$ in Pascals, $\\kappa$ in radians per meter, and report $M$ in Newton-meters.\n- The angle unit for curvature is radians per meter.\n- Use $N_y = 800$ fibers.\n- Solve the scalar equilibrium equation in $\\epsilon_0$ with a robust root-finding strategy that remains reliable when the tangent stiffness degenerates (for example, by combining Newton’s method with bisection fallback).\n- In computing the local one-dimensional elastoplastic response under monotonic loading from zero, use the bilinear law consistent with linear isotropic hardening, with elastic modulus $E$, initial yield strain $\\epsilon_y = \\sigma_{y0}/E$, and a post-yield tangent modulus $E_t$ derived from the plastic modulus $H$ as $E_t = E H / (E + H)$ for $H > 0$, and $E_t = 0$ for $H = 0$.\n\nTest suite:\nFor each parameter set $(b,h,E,\\sigma_{y0},H,\\kappa)$, compute the bending moment $M$ in Newton-meters. Use the following four test cases:\n- Case A (elastic regime): $(b,h,E,\\sigma_{y0},H,\\kappa) = (\\, 0.3,\\, 0.6,\\, 210\\times 10^9,\\, 250\\times 10^6,\\, 2\\times 10^9,\\, 1.0\\times 10^{-5}\\,)$.\n- Case B (moderate plasticity with hardening): $(\\, 0.3,\\, 0.6,\\, 210\\times 10^9,\\, 250\\times 10^6,\\, 2\\times 10^9,\\, 5.0\\times 10^{-3}\\,)$.\n- Case C (near fully plastic, perfect plasticity): $(\\, 0.3,\\, 0.6,\\, 210\\times 10^9,\\, 250\\times 10^6,\\, 0.0,\\, 5.0\\times 10^{-2}\\,)$.\n- Case D (zero curvature boundary case): $(\\, 0.3,\\, 0.6,\\, 210\\times 10^9,\\, 250\\times 10^6,\\, 1\\times 10^9,\\, 0.0\\,)$.\n\nFinal output specification:\n- Your program must produce a single line containing a Python list literal of the four computed bending moments, in Newton-meters, rounded to three decimal places, ordered as $[M_A, M_B, M_C, M_D]$ corresponding to Cases A–D.\n- The single line must have no additional text or spaces beyond the commas separating the values. For example, a valid output format is $[11340.000,123456.789,6750000.000,0.000]$.", "solution": "The posed problem is a standard exercise in the nonlinear analysis of structures, specifically the computation of the moment-curvature relationship for a beam with an inelastic material model. It is scientifically grounded, well-posed, and contains all necessary information for a unique solution. We shall proceed with its resolution.\n\nThe objective is to determine the bending moment $M$ in a rectangular beam section for a given curvature $\\kappa$, under the constraint that the net axial force $N$ is zero. This requires a numerical approach, as the material behavior is nonlinear (elastoplastic). We will employ the fiber-discretization method, which is a robust and fundamental technique for analyzing the inelastic response of beam cross-sections.\n\nThe solution is constructed upon three pillars of solid mechanics: kinematics, material constitutive law, and equilibrium.\n\n**1. Kinematics: The Euler-Bernoulli Hypothesis**\nThe foundation of our analysis is the Euler-Bernoulli beam theory, which posits that plane sections initially normal to the beam's axis remain plane and normal to the axis after deformation. This kinematic constraint implies a linear distribution of axial strain $\\epsilon_x$ across the section's height. The strain at a vertical distance $y$ from the centroidal axis is given by:\n$$\n\\epsilon_x(y) = \\epsilon_0 + \\kappa y\n$$\nHere, $\\epsilon_0$ represents a uniform axial strain across the entire section, and $\\kappa$ is the curvature of the beam's neutral axis. Our task is to find the specific $\\epsilon_0$ that ensures axial equilibrium for a given $\\kappa$.\n\n**2. Material Constitutive Law: Bilinear Elastoplasticity with Hardening**\nThe material exhibits a bilinear stress-strain relationship under monotonic uniaxial loading. This model is characterized by an initial linear elastic region followed by a linear plastic (hardening) region. Let $E$ be the Young's modulus, $\\sigma_{y0}$ be the initial yield stress, and $H$ be the plastic modulus. The yield strain is $\\epsilon_{y0} = \\sigma_{y0} / E$. The post-yield tangent modulus, $E_t$, is derived from the series coupling of elastic and plastic stiffnesses, resulting in $E_t = \\frac{EH}{E+H}$ for $H > 0$. For perfect plasticity, $H=0$, which implies $E_t = 0$.\n\nThe uniaxial stress $\\sigma_x$ is a function of the axial strain $\\epsilon_x$ as follows:\n$$\n\\sigma_x(\\epsilon_x) =\n\\begin{cases}\nE \\epsilon_x & \\text{if } |\\epsilon_x| \\le \\epsilon_{y0} \\quad \\text{(Elastic)} \\\\\n\\sigma_{y0} + E_t (\\epsilon_x - \\epsilon_{y0}) & \\text{if } \\epsilon_x > \\epsilon_{y0} \\quad \\text{(Tension Yielding)} \\\\\n-\\sigma_{y0} + E_t (\\epsilon_x + \\epsilon_{y0}) & \\text{if } \\epsilon_x < -\\epsilon_{y0} \\quad \\text{(Compression Yielding)}\n\\end{cases}\n$$\nThis relationship is piecewise linear and continuous. The local tangent modulus, $d\\sigma_x/d\\epsilon_x$, is $E$ in the elastic range and $E_t$ in the plastic range.\n\n**3. Equilibrium of Stress Resultants**\nThe internal forces on the cross-section must be in equilibrium with any external loads. For pure bending, the net axial force $N$ must be zero. The axial force and bending moment $M$ are defined as the integrated effects of the stress distribution $\\sigma_x(y)$ over the cross-sectional area $A$.\n\nThe axial force resultant $N$ is:\n$$\nN = \\int_A \\sigma_x(y) \\, dA\n$$\nThe bending moment resultant $M$ about the z-axis (the axis parallel to the width $b$) is:\n$$\nM = \\int_A \\sigma_x(y) \\, y \\, dA\n$$\n\n**4. Numerical Solution: The Fiber Discretization Method**\nSince the stress function $\\sigma_x(\\epsilon_x(y))$ is nonlinear, the equilibrium integrals are analytically tractable only in the simplest cases. A general and powerful solution is to discretize the cross-section into a finite number of \"fibers.\"\n\nWe divide the rectangular section of width $b$ and height $h$ into $N_y$ horizontal fibers of equal thickness. Each fiber $i$ has an area $\\Delta A = b \\cdot (h/N_y)$ and is located at a centroidal coordinate $y_i$. For a uniform discretization, the coordinate of the $i$-th fiber (for $i=1, 2, \\ldots, N_y$) can be defined at the center of each layer:\n$$\ny_i = -\\frac{h}{2} + \\left(i - \\frac{1}{2}\\right) \\frac{h}{N_y}\n$$\nThe continuous integrals for $N$ and $M$ are then approximated by finite sums:\n$$\nN \\approx \\sum_{i=1}^{N_y} \\sigma_i \\Delta A \\quad\\text{and}\\quad M \\approx \\sum_{i=1}^{N_y} \\sigma_i y_i \\Delta A\n$$\nThe strain in each fiber is given by the kinematic relation: $\\epsilon_i = \\epsilon_0 + \\kappa y_i$. The stress in each fiber, $\\sigma_i$, is then determined from the constitutive law: $\\sigma_i = \\sigma_x(\\epsilon_i)$.\n\n**5. Algorithm to Compute Moment for a Given Curvature**\nFor a specified curvature $\\kappa$, our procedure is:\n1.  **Solve for $\\epsilon_0$**: We must find the value of $\\epsilon_0$ that satisfies the axial equilibrium condition $N(\\epsilon_0, \\kappa) = 0$. This is a root-finding problem for the scalar nonlinear equation:\n    $$\n    N(\\epsilon_0) = \\sum_{i=1}^{N_y} \\sigma_x(\\epsilon_0 + \\kappa y_i) \\Delta A = 0\n    $$\n    The function $N(\\epsilon_0)$ is monotonically increasing because $\\sigma_x(\\epsilon_x)$ is a monotonically increasing function. This property guarantees a unique root. A robust numerical method, such as Brent's method or a Newton-Raphson scheme with a bisection fallback, is suitable for this task. The problem specification recommends this robust approach. We will use a standard library implementation of a bracketing root-finder (Brent's method) which is highly reliable. To use such a method, we only need to provide a search interval $[\\epsilon_{a}, \\epsilon_{b}]$ such that $N(\\epsilon_{a})$ and $N(\\epsilon_{b})$ have opposite signs. A sufficiently large interval, such as $[-0.1, 0.1]$, is guaranteed to bracket the root for any realistic engineering problem.\n\n2.  **Compute Bending Moment $M$**: Once the unique root $\\epsilon_0$ is found, the strain distribution is fully defined. The corresponding stress $\\sigma_i$ in each fiber can be calculated. The bending moment $M$ is then computed by the summation:\n    $$\n    M = \\sum_{i=1}^{N_y} \\sigma_x(\\epsilon_0 + \\kappa y_i) \\cdot y_i \\cdot \\Delta A\n    $$\n\nThis algorithm is implemented in the following Python code, adhering to all specified constraints. The code defines a function for the bilinear constitutive law, a function to compute the axial force for a given $\\epsilon_0$, and uses `scipy.optimize.root_scalar` to solve the equilibrium equation before finally calculating the moment. This process is repeated for each test case provided.", "answer": "```python\nimport numpy as np\nfrom scipy import optimize\n\ndef solve():\n    \"\"\"\n    Main function to solve the moment-curvature problem for the given test cases.\n    \"\"\"\n\n    test_cases = [\n        # (b, h, E, sigma_y0, H, kappa)\n        # Case A: Elastic\n        (0.3, 0.6, 210e9, 250e6, 2e9, 1.0e-5),\n        # Case B: Moderate plasticity with hardening\n        (0.3, 0.6, 210e9, 250e6, 2e9, 5.0e-3),\n        # Case C: Near fully plastic, perfect plasticity\n        (0.3, 0.6, 210e9, 250e6, 0.0, 5.0e-2),\n        # Case D: Zero curvature boundary case\n        (0.3, 0.6, 210e9, 250e6, 1e9, 0.0),\n    ]\n\n    results = []\n    for params in test_cases:\n        moment = calculate_moment_for_section(*params)\n        results.append(f\"{moment:.3f}\")\n\n    print(f\"[{','.join(results)}]\")\n\n\ndef get_stress(epsilon, E, sigma_y0, E_t):\n    \"\"\"\n    Computes stress based on a bilinear elastoplastic model with linear hardening.\n    This function is vectorized to handle numpy arrays of strain.\n    \"\"\"\n    epsilon_y0 = sigma_y0 / E\n\n    # Conditions for elastic, tension yield, and compression yield\n    elastic_cond = np.abs(epsilon) <= epsilon_y0\n    tension_yield_cond = epsilon > epsilon_y0\n    \n    # Calculate stress using np.where for vectorized conditional logic\n    stress = np.where(\n        elastic_cond,\n        E * epsilon,\n        np.where(\n            tension_yield_cond,\n            sigma_y0 + E_t * (epsilon - epsilon_y0),  # Tension yield\n            -sigma_y0 + E_t * (epsilon + epsilon_y0) # Compression yield\n        )\n    )\n    return stress\n\n\ndef calculate_moment_for_section(b, h, E, sigma_y0, H, kappa, Ny=800):\n    \"\"\"\n    Calculates the bending moment for a rectangular section given curvature and\n    material properties, using the fiber method.\n\n    Args:\n        b (float): Width of the cross-section [m].\n        h (float): Height of the cross-section [m].\n        E (float): Young's modulus [Pa].\n        sigma_y0 (float): Initial yield stress [Pa].\n        H (float): Plastic modulus [Pa].\n        kappa (float): Curvature [rad/m].\n        Ny (int): Number of fibers for discretization.\n\n    Returns:\n        float: The corresponding bending moment [Nm].\n    \"\"\"\n    if kappa == 0.0:\n        return 0.0\n\n    # 1. Define section and material properties\n    delta_A = b * h / Ny\n    epsilon_y0 = sigma_y0 / E\n    if H > 0:\n        E_t = (E * H) / (E + H)\n    else:\n        E_t = 0.0\n\n    # 2. Discretize the section (fiber coordinates)\n    # y_coords are the centroidal positions of each fiber\n    y_coords = np.linspace(-h/2 + h/(2*Ny), h/2 - h/(2*Ny), Ny)\n\n    # 3. Define the objective function for the root-finder\n    # This function computes the net axial force N for a given axial strain epsilon_0.\n    def axial_force_function(epsilon_0):\n        # Calculate strain in each fiber\n        strains = epsilon_0 + kappa * y_coords\n        # Calculate stress in each fiber using the constitutive law\n        stresses = get_stress(strains, E, sigma_y0, E_t)\n        # Sum forces from all fibers to get the total axial force\n        net_force = np.sum(stresses) * delta_A\n        return net_force\n\n    # 4. Solve for epsilon_0 that makes axial force N = 0\n    # We use a robust bracketing root-finder from SciPy.\n    # The bracket [-0.1, 0.1] is extremely safe for strains in structural materials.\n    try:\n        # A robust bracketing solver like brentq is preferred\n        solution = optimize.root_scalar(\n            axial_force_function,\n            bracket=[-0.1, 0.1],\n            method='brentq'\n        )\n        epsilon_0_sol = solution.root\n    except ValueError:\n        # This fallback might occur if N(a) and N(b) have the same sign,\n        # which is unlikely with a large bracket for this well-behaved function.\n        # But for robustness, we return NaN.\n        return np.nan\n\n    # 5. Compute the bending moment using the found epsilon_0\n    # With the correct epsilon_0, compute the final strain and stress distributions\n    final_strains = epsilon_0_sol + kappa * y_coords\n    final_stresses = get_stress(final_strains, E, sigma_y0, E_t)\n    \n    # The moment is the sum of force*lever_arm for all fibers\n    moment = np.sum(final_stresses * y_coords) * delta_A\n    \n    return moment\n\nsolve()\n```", "id": "2663507"}, {"introduction": "The moment-curvature relationship for inelastic materials is path-dependent, meaning the response to loading depends on the history of deformation. This is especially critical for analyzing structures under cyclic loads like earthquakes, where effects like kinematic hardening and the Bauschinger effect are prominent. This advanced practice moves beyond monotonic loading to explore the incremental nature of plasticity by developing a section-level return-mapping algorithm [@problem_id:2663491]. By implementing this core algorithm of computational plasticity, you will learn how to track the evolution of a section's state ($M$, $\\kappa^p$, $\\alpha$) through a sequence of curvature increments, capturing the essential physics of hysteretic behavior.", "problem": "Consider a one-dimensional section-level constitutive model for bending of a slender member under the Euler–Bernoulli hypothesis, where the generalized stress is the bending moment $M$ and the generalized strain is the curvature $\\kappa$. Assume small strains and small rotations. The elastic bending relation is $M = K(\\kappa - \\kappa^p)$, where $K = EI$ is the elastic flexural stiffness with $E$ the Young’s modulus and $I$ the second moment of area. Plasticity is modeled at the section level by introducing a plastic curvature $\\kappa^p$ such that the elastic moment–curvature relation is $M = K ( \\kappa - \\kappa^p )$. Adopt linear kinematic hardening of Prager type, with a backstress $\\alpha$ translating the yield surface, and the evolution law $\\mathrm{d}\\alpha = c \\, \\mathrm{d}\\kappa^p$, where $c$ is a constant kinematic hardening modulus. Let the yield function be $f(M,\\alpha) = \\lvert M - \\alpha \\rvert - M_{y} \\le 0$, where $M_{y}$ is the yield bending moment. The plastic flow is associative so that the flow direction is $\\partial f / \\partial M$, and plastic loading is governed by the Karush–Kuhn–Tucker conditions and the consistency condition. The generalized virtual work statement (or energy conjugacy) provides that $M$ is work-conjugate to $\\kappa$, and linear elasticity provides the quadratic free energy in terms of the elastic curvature $\\kappa^{e} = \\kappa - \\kappa^{p}$. \n\nYour task is to derive and implement a section-level return-mapping algorithm to update the state $(M,\\kappa^p,\\alpha)$ over a curvature-controlled incremental loading step $\\kappa_{n} \\to \\kappa_{n+1}$, starting from known internal variables $(\\kappa^p_{n}, \\alpha_{n})$. Begin from the fundamental principles listed below and derive, without introducing any shortcut formulas, the algorithmic update including the computation of the plastic consistency parameter increment $\\Delta\\gamma$, the updated plastic curvature $\\kappa^p_{n+1}$, the updated backstress $\\alpha_{n+1}$, and the updated moment $M_{n+1}$. Ensure that you clearly state the trial state, the yield check, and the plastic correction when yielding occurs. Then translate this derivation into an algorithm and implement it as a program that processes a set of prescribed curvature increment sequences.\n\nFoundational starting points you must use:\n- Energy conjugacy between $M$ and $\\kappa$ from the principle of virtual work, and the quadratic elastic free energy $\\psi = \\tfrac{1}{2} K ( \\kappa - \\kappa^p )^{2}$.\n- Linear elasticity $M = \\partial \\psi / \\partial \\kappa = K ( \\kappa - \\kappa^p )$.\n- Associative plasticity with linear kinematic hardening (Prager): yield function $f = \\lvert M - \\alpha \\rvert - M_{y}$, flow rule $\\mathrm{d}\\kappa^p = \\Delta \\gamma \\, \\operatorname{sign}(M - \\alpha)$, hardening law $\\mathrm{d}\\alpha = c \\, \\mathrm{d}\\kappa^p$, Kuhn–Tucker conditions $\\Delta \\gamma \\ge 0$, $f \\le 0$, $\\Delta \\gamma f = 0$, and consistency $\\Delta \\gamma > 0 \\Rightarrow f_{n+1} = 0$.\n\nImplement the algorithm to process multiple loading steps for each test case, with initial conditions $\\kappa^p_{0} = 0$ and $\\alpha_{0} = 0$, and with curvature controlled by a sequence $\\{\\Delta \\kappa_{i}\\}_{i=1}^{N_{\\text{steps}}}$ such that $\\kappa_{i} = \\kappa_{i-1} + \\Delta \\kappa_{i}$. At each substep $i$, compute $M_{i}$, $\\kappa^p_{i}$, and $\\alpha_{i}$.\n\nUse the following material and section parameters, expressed in coherent units:\n- Flexural stiffness $K = EI = 5 \\times 10^{6} \\, \\mathrm{N \\cdot m^{2}}$.\n- Yield bending moment $M_{y} = 2 \\times 10^{4} \\, \\mathrm{N \\cdot m}$.\n- Kinematic hardening modulus $c = 1 \\times 10^{6} \\, \\mathrm{N \\cdot m^{2}}$.\n\nYour program must implement the return-mapping update for the following test suite of curvature increment sequences (units of curvature are $\\mathrm{m^{-1}}$). For each test case, start from zero state and apply the increments in order:\n- Test A (purely elastic path): $\\left[ 0.001, 0.001, 0.001 \\right]$.\n- Test B (elastic then plastic loading): $\\left[ 0.002, 0.003 \\right]$.\n- Test C (plastic loading followed by strong reverse into compression, demonstrating the Bauschinger effect): $\\left[ 0.004, 0.002, -0.010 \\right]$.\n- Test D (boundary case exactly at first yield): $\\left[ 0.004 \\right]$.\n- Test E (elastic loading, plastic extension, then unload to zero curvature): $\\left[ 0.003, 0.003, -0.006 \\right]$.\n\nFor each test case, your program should output the final values after all increments are applied, namely $M_{\\text{final}}$ in $\\mathrm{N \\cdot m}$, $\\kappa^p_{\\text{final}}$ in $\\mathrm{m^{-1}}$, and $\\alpha_{\\text{final}}$ in $\\mathrm{N \\cdot m}$. Express $M_{\\text{final}}$ and $\\alpha_{\\text{final}}$ in $\\mathrm{N \\cdot m}$ and $\\kappa^p_{\\text{final}}$ in $\\mathrm{m^{-1}}$, each rounded to six decimal places.\n\nFinal Output Format:\n- Your program should produce a single line of output containing the list of results for all test cases as a comma-separated list enclosed in square brackets, where each test case result is itself a comma-separated list enclosed in square brackets, in the order $\\left[ M_{\\text{final}}, \\kappa^p_{\\text{final}}, \\alpha_{\\text{final}} \\right]$. For example: $\\left[ [M_{A},\\kappa^{p}_{A},\\alpha_{A}], [M_{B},\\kappa^{p}_{B},\\alpha_{B}], \\dots \\right]$.\n\nAnswer in the specified units and rounding exactly as stated above, and ensure the algorithm is implemented from the stated fundamentals, not by invoking any external plasticity solver.", "solution": "The problem statement is subjected to validation.\n\n**Step 1: Extract Givens**\n- **Model**: One-dimensional section-level elastoplasticity with linear kinematic hardening for bending.\n- **State variables**: Bending moment $M$, total curvature $\\kappa$, plastic curvature $\\kappa^p$, and backstress $\\alpha$.\n- **Elastic relation**: $M = K (\\kappa - \\kappa^p)$, where $K = EI$ is the flexural stiffness.\n- **Yield function**: $f(M,\\alpha) = \\lvert M - \\alpha \\rvert - M_{y} \\le 0$, where $M_{y}$ is the yield moment.\n- **Plastic flow rule (associative)**: $\\mathrm{d}\\kappa^p = \\mathrm{d}\\gamma \\, \\operatorname{sign}(M - \\alpha)$, where $\\mathrm{d}\\gamma$ is the plastic multiplier increment.\n- **Hardening law (Prager)**: $\\mathrm{d}\\alpha = c \\, \\mathrm{d}\\kappa^p$, where $c$ is the kinematic hardening modulus.\n- **KKT conditions**: $\\Delta\\gamma \\ge 0$, $f \\le 0$, $\\Delta\\gamma f = 0$.\n- **Consistency condition**: If $\\Delta\\gamma > 0$, then $f_{n+1} = 0$ at the end of the step.\n- **Task**: Derive and implement a return-mapping algorithm for a curvature-controlled increment $\\kappa_{n} \\to \\kappa_{n+1}$, starting from a known state $(\\kappa^p_{n}, \\alpha_{n})$.\n- **Initial conditions**: $\\kappa^p_{0} = 0$, $\\alpha_{0} = 0$.\n- **Material parameters**: $K = 5 \\times 10^{6} \\, \\mathrm{N \\cdot m^{2}}$, $M_{y} = 2 \\times 10^{4} \\, \\mathrm{N \\cdot m}$, $c = 1 \\times 10^{6} \\, \\mathrm{N \\cdot m^{2}}$.\n- **Test cases**: Five sequences of curvature increments $\\{\\Delta\\kappa_{i}\\}$ are provided.\n- **Output**: Final state $(M_{\\text{final}}, \\kappa^p_{\\text{final}}, \\alpha_{\\text{final}})$ for each test case, rounded to six decimal places.\n\n**Step 2: Validate Using Extracted Givens**\nThe problem is scientifically grounded, well-posed, and objective. It presents a standard problem in computational plasticity, a subfield of solid mechanics. The model is a classic $1\\mathrm{D}$ formulation of elastoplasticity with linear kinematic hardening, which is a fundamental topic. All necessary parameters, initial conditions, and loading histories are provided. The definitions are internally consistent and align with established theory. The formulation is based on fundamental principles such as energy conjugacy and associative plasticity. There are no contradictions, ambiguities, or factual unsoundness.\n\n**Step 3: Verdict and Action**\nThe problem is valid. A rigorous solution will be developed.\n\nThe objective is to formulate a numerical algorithm to integrate the constitutive equations over a finite load increment, from a known state at step $n$ to an unknown state at step $n+1$. The loading is controlled by the total curvature, so the value of $\\kappa_{n+1}$ is prescribed. The state at step $n$ is defined by the internal variables $(\\kappa^p_n, \\alpha_n)$, which are consistent with the load history up to that point. The moment $M_n = K(\\kappa_n - \\kappa^p_n)$ and the yield condition $f(M_n, \\alpha_n) \\le 0$ are satisfied.\n\nThe integration of the elastoplastic evolution equations is performed using an implicit Euler scheme, which is the basis for the return-mapping algorithm. The algorithm consists of two main stages: an elastic trial step and a plastic corrector step.\n\n**1. Elastic Trial Step**\nFirst, we assume the entire curvature increment $\\Delta\\kappa = \\kappa_{n+1} - \\kappa_n$ is purely elastic. This implies that the plastic internal variables do not change during the step. The \"trial\" state at the end of the step is computed based on this assumption.\nThe trial plastic curvature and backstress are frozen at their values from the previous step:\n$$\n\\kappa^{p, \\text{trial}}_{n+1} = \\kappa^{p}_{n}\n$$\n$$\n\\alpha^{\\text{trial}}_{n+1} = \\alpha_{n}\n$$\nThe trial moment, $M^{\\text{trial}}_{n+1}$, is then computed using the elastic constitutive law with the new total curvature $\\kappa_{n+1}$:\n$$\nM^{\\text{trial}}_{n+1} = K ( \\kappa_{n+1} - \\kappa^{p, \\text{trial}}_{n+1} ) = K ( \\kappa_{n+1} - \\kappa^{p}_{n} )\n$$\n\n**2. Yield Check**\nNext, we determine if the elastic assumption is valid by checking if the trial state violates the yield condition. We evaluate the yield function $f$ at the trial state:\n$$\nf^{\\text{trial}} = f(M^{\\text{trial}}_{n+1}, \\alpha^{\\text{trial}}_{n+1}) = \\lvert M^{\\text{trial}}_{n+1} - \\alpha_{n} \\rvert - M_{y}\n$$\n- If $f^{\\text{trial}} \\le 0$: The trial state is admissible (lies within or on the boundary of the yield surface). The elastic assumption is correct, and the step is purely elastic. The final state at $n+1$ is the trial state.\n  $$\n  M_{n+1} = M^{\\text{trial}}_{n+1}\n  $$\n  $$\n  \\kappa^{p}_{n+1} = \\kappa^{p}_{n}\n  $$\n  $$\n  \\alpha_{n+1} = \\alpha_{n}\n  $$\n- If $f^{\\text{trial}} > 0$: The trial state is inadmissible (lies outside the yield surface). This is physically impossible. The elastic assumption is incorrect, and plastic deformation must occur during the step. A plastic correction is required.\n\n**3. Plastic Corrector Step (Return Mapping)**\nWhen $f^{\\text{trial}} > 0$, we must find the correct final state $(M_{n+1}, \\kappa^{p}_{n+1}, \\alpha_{n+1})$ that satisfies all governing equations. The key is the consistency condition, which dictates that for a plastic step, the final state must lie on the yield surface: $f(M_{n+1}, \\alpha_{n+1}) = 0$.\n\nThe evolution of the internal variables is integrated using the backward Euler method. Let $\\Delta\\gamma$ be the finite plastic multiplier increment over the step.\nThe updates for the plastic variables are:\n$$\n\\kappa^{p}_{n+1} = \\kappa^{p}_{n} + \\Delta\\kappa^{p} = \\kappa^{p}_{n} + \\Delta\\gamma \\, \\operatorname{sign}(M_{n+1} - \\alpha_{n+1})\n$$\n$$\n\\alpha_{n+1} = \\alpha_{n} + \\Delta\\alpha = \\alpha_{n} + c \\, \\Delta\\kappa^{p} = \\alpha_{n} + c \\, \\Delta\\gamma \\, \\operatorname{sign}(M_{n+1} - \\alpha_{n+1})\n$$\nThe moment at the end of the step is given by:\n$$\nM_{n+1} = K ( \\kappa_{n+1} - \\kappa^{p}_{n+1} )\n$$\nSubstituting the update for $\\kappa^{p}_{n+1}$:\n$$\nM_{n+1} = K \\left( \\kappa_{n+1} - ( \\kappa^{p}_{n} + \\Delta\\gamma \\, \\operatorname{sign}(M_{n+1} - \\alpha_{n+1}) ) \\right)\n$$\nRecognizing that $K(\\kappa_{n+1} - \\kappa^p_n)$ is the trial moment $M^{\\text{trial}}_{n+1}$, we get:\n$$\nM_{n+1} = M^{\\text{trial}}_{n+1} - K \\, \\Delta\\gamma \\, \\operatorname{sign}(M_{n+1} - \\alpha_{n+1})\n$$\nA fundamental simplification in return-mapping algorithms is that the plastic flow direction at the end of the step is determined by the trial state. For this $1\\mathrm{D}$ case, this means:\n$$\nR \\equiv \\operatorname{sign}(M_{n+1} - \\alpha_{n+1}) = \\operatorname{sign}(M^{\\text{trial}}_{n+1} - \\alpha_{n})\n$$\nWith this, the update equations for $M_{n+1}$ and $\\alpha_{n+1}$ become explicit in terms of the unknown $\\Delta\\gamma$:\n$$\nM_{n+1} = M^{\\text{trial}}_{n+1} - K \\, \\Delta\\gamma \\, R\n$$\n$$\n\\alpha_{n+1} = \\alpha_{n} + c \\, \\Delta\\gamma \\, R\n$$\nWe now enforce the consistency condition, $f_{n+1} = \\lvert M_{n+1} - \\alpha_{n+1} \\rvert - M_{y} = 0$, to solve for $\\Delta\\gamma$.\nFrom the definition of $R$, this is equivalent to $(M_{n+1} - \\alpha_{n+1})R - M_y = 0$.\nLet's compute the relative moment $M_{n+1} - \\alpha_{n+1}$:\n$$\nM_{n+1} - \\alpha_{n+1} = ( M^{\\text{trial}}_{n+1} - K \\, \\Delta\\gamma \\, R ) - ( \\alpha_{n} + c \\, \\Delta\\gamma \\, R )\n$$\n$$\nM_{n+1} - \\alpha_{n+1} = ( M^{\\text{trial}}_{n+1} - \\alpha_{n} ) - (K+c) \\, \\Delta\\gamma \\, R\n$$\nSubstituting this into the consistency condition:\n$$\n\\left[ ( M^{\\text{trial}}_{n+1} - \\alpha_{n} ) - (K+c) \\, \\Delta\\gamma \\, R \\right] R - M_{y} = 0\n$$\nUsing $R^2=1$ and $(M^{\\text{trial}}_{n+1} - \\alpha_{n})R = \\lvert M^{\\text{trial}}_{n+1} - \\alpha_{n} \\rvert$:\n$$\n\\lvert M^{\\text{trial}}_{n+1} - \\alpha_{n} \\rvert - (K+c) \\, \\Delta\\gamma - M_{y} = 0\n$$\nThe first and last terms on the left are the definition of $f^{\\text{trial}}$:\n$$\nf^{\\text{trial}} - (K+c) \\, \\Delta\\gamma = 0\n$$\nSolving for the plastic multiplier increment $\\Delta\\gamma$:\n$$\n\\Delta\\gamma = \\frac{f^{\\text{trial}}}{K+c} = \\frac{\\lvert M^{\\text{trial}}_{n+1} - \\alpha_{n} \\rvert - M_{y}}{K+c}\n$$\nSince this corrector step is executed only if $f^{\\text{trial}} > 0$, we are guaranteed that $\\Delta\\gamma > 0$, consistent with KKT conditions.\n\nWith $\\Delta\\gamma$ known, we can finalize the state updates:\n1. Determine flow direction: $R = \\operatorname{sign}(M^{\\text{trial}}_{n+1} - \\alpha_{n})$.\n2. Update plastic curvature: $\\kappa^{p}_{n+1} = \\kappa^{p}_{n} + \\Delta\\gamma \\, R$.\n3. Update backstress: $\\alpha_{n+1} = \\alpha_{n} + c \\, \\Delta\\gamma \\, R$.\n4. Update moment: $M_{n+1} = K(\\kappa_{n+1} - \\kappa^{p}_{n+1})$. Alternatively and more efficiently, $M_{n+1} = M^{\\text{trial}}_{n+1} - K \\, \\Delta\\gamma \\, R$.\n\nThis completes the derivation of the return-mapping algorithm, which will now be implemented.", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the 1D elastoplastic bending problem for multiple test cases\n    using a return-mapping algorithm.\n    \"\"\"\n\n    # Material and section parameters in coherent units.\n    K = 5.0e6  # Flexural stiffness (N*m^2)\n    My = 2.0e4  # Yield bending moment (N*m)\n    c = 1.0e6  # Kinematic hardening modulus (N*m^2)\n\n    # Test suite of curvature increment sequences.\n    test_cases = {\n        \"A\": [0.001, 0.001, 0.001],\n        \"B\": [0.002, 0.003],\n        \"C\": [0.004, 0.002, -0.010],\n        \"D\": [0.004],\n        \"E\": [0.003, 0.003, -0.006],\n    }\n\n    test_order = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    results_list = []\n\n    for key in test_order:\n        delta_k_sequence = test_cases[key]\n        \n        # Initial state for each test case\n        # (kappa, M, kappa_p, alpha)\n        k, M, kp, a = 0.0, 0.0, 0.0, 0.0\n\n        for delta_k in delta_k_sequence:\n            # Store state at beginning of increment\n            kp_prev = kp\n            a_prev = a\n\n            # Update total curvature for the current step\n            k += delta_k\n\n            # 1. Elastic Trial Step\n            M_trial = K * (k - kp_prev)\n            a_trial = a_prev\n\n            # 2. Yield Check\n            f_trial = abs(M_trial - a_trial) - My\n\n            # A small tolerance for floating point comparisons\n            if f_trial <= 1e-9:\n                # Elastic step: update moment only\n                M = M_trial\n                # Plastic variables kp and a remain unchanged\n            else:\n                # 3. Plastic Corrector Step (Return Mapping)\n                \n                # Calculate plastic consistency parameter increment\n                delta_gamma = f_trial / (K + c)\n                \n                # Determine direction of plastic flow\n                R = np.sign(M_trial - a_trial)\n\n                # Update plastic curvature\n                delta_kp = delta_gamma * R\n                kp = kp_prev + delta_kp\n                \n                # Update backstress\n                delta_a = c * delta_kp\n                a = a_prev + delta_a\n                \n                # Update moment\n                M = M_trial - K * delta_kp\n        \n        # Store final results for the test case\n        results_list.append([M, kp, a])\n\n    # Format the final output string as specified\n    formatted_results = []\n    for r in results_list:\n        # r[0] is M_final, r[1] is kp_final, r[2] is a_final\n        formatted_results.append(f\"[{r[0]:.6f},{r[1]:.6f},{r[2]:.6f}]\")\n    \n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n\n```", "id": "2663491"}]}