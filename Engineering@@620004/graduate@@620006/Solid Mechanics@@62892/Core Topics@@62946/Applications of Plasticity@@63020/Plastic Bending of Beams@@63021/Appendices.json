{"hands_on_practices": [{"introduction": "The cornerstone of plastic bending analysis is the plastic moment capacity, $M_p$, which represents the maximum moment a cross-section can withstand. To calculate $M_p$, one must first locate the plastic neutral axis (PNA). This exercise challenges you to apply the fundamental definition of the PNA, which divides the cross-section into equal areas of tension and compression, to a non-symmetric T-section — a critical skill that moves beyond idealized rectangular shapes. [@problem_id:2670368]", "problem": "A straight, prismatic beam with a monosymmetric T-shaped cross-section about its strong axis is subjected to positive bending that places the top flange in compression and the bottom fiber in tension. The material is ideal elastic–perfectly plastic with yield stress $\\sigma_{y}$, and there is no axial force. Plane sections remain plane.\n\nThe T-section geometry is as follows: flange width $b_{f} = 200\\,\\mathrm{mm}$, flange thickness $t_{f} = 20\\,\\mathrm{mm}$, web thickness $t_{w} = 20\\,\\mathrm{mm}$, and web depth below the flange $h_{w} = 180\\,\\mathrm{mm}$. The total section depth is $h = t_{f} + h_{w} = 200\\,\\mathrm{mm}$.\n\nWorking from first principles of internal force and moment equilibrium for an ideal elastic–perfectly plastic material, determine for the fully plastic state corresponding to $M = M_{p}$:\n- the location $y_{p}$ of the plastic neutral axis measured downward from the top surface, and\n- the vertical extents $a_{c}$ and $a_{t}$ of the compressive and tensile plastic zones, respectively, defined as the distances from the plastic neutral axis to the extreme compression fiber (top surface) and to the extreme tension fiber (bottom surface).\n\nExpress all distances in $\\mathrm{mm}$. Do not assume any shortcut formulas that are not derived from the stated principles.", "solution": "The fundamental principle for the analysis of a fully plastic cross-section under pure bending (zero axial force) is derived from the equilibrium of internal forces. The material is specified as ideal elastic–perfectly plastic. In the fully plastic state, every fiber in the cross-section has yielded. This means the stress is uniform in magnitude, equal to the yield stress $\\sigma_y$, and its sign depends on whether the fiber is in tension or compression.\n\nLet the cross-sectional area in compression be $A_c$ and the area in tension be $A_t$. The stress in the compression zone is $-\\sigma_y$ and in the tension zone is $+\\sigma_y$. The plastic neutral axis (PNA) is the boundary between these two zones. The equilibrium of axial forces requires that the total force on the cross-section is zero:\n$$ \\sum F_x = \\int_A \\sigma \\, dA = 0 $$\nSubstituting the stress values for the fully plastic state:\n$$ \\int_{A_c} (-\\sigma_y) \\, dA + \\int_{A_t} (+\\sigma_y) \\, dA = 0 $$\nSince $\\sigma_y$ is a non-zero constant, it can be factored out:\n$$ -\\sigma_y \\int_{A_c} dA + \\sigma_y \\int_{A_t} dA = 0 $$\n$$ -\\sigma_y A_c + \\sigma_y A_t = 0 $$\nThis leads to the fundamental condition for the location of the plastic neutral axis:\n$$ A_c = A_t $$\nThe total area of the cross-section is $A = A_c + A_t$. Therefore, the PNA must divide the total area into two equal halves:\n$$ A_c = A_t = \\frac{A}{2} $$\nFirst, we compute the total area of the T-shaped cross-section. The geometry is given: flange width $b_f = 200\\,\\mathrm{mm}$, flange thickness $t_f = 20\\,\\mathrm{mm}$, web thickness $t_w = 20\\,\\mathrm{mm}$, and web depth below the flange $h_w = 180\\,\\mathrm{mm}$.\nThe area of the flange is $A_f = b_f \\times t_f = 200\\,\\mathrm{mm} \\times 20\\,\\mathrm{mm} = 4000\\,\\mathrm{mm}^2$.\nThe area of the web is $A_w = h_w \\times t_w = 180\\,\\mathrm{mm} \\times 20\\,\\mathrm{mm} = 3600\\,\\mathrm{mm}^2$.\nThe total area of the section is $A = A_f + A_w = 4000\\,\\mathrm{mm}^2 + 3600\\,\\mathrm{mm}^2 = 7600\\,\\mathrm{mm}^2$.\n\nAccording to the principle derived above, the area in compression, $A_c$, must be half of the total area:\n$$ A_c = \\frac{A}{2} = \\frac{7600\\,\\mathrm{mm}^2}{2} = 3800\\,\\mathrm{mm}^2 $$\nThe problem states that the top flange is in compression. We must find the location of the PNA, denoted by $y_p$, measured downwards from the top surface, such that the area above it is $3800\\,\\mathrm{mm}^2$.\nWe compare the required compression area $A_c$ with the area of the flange $A_f$.\n$A_c = 3800\\,\\mathrm{mm}^2$ and $A_f = 4000\\,\\mathrm{mm}^2$.\nSince $A_c  A_f$, the plastic neutral axis must lie within the flange.\n\nLet $y_p$ be the distance from the top surface to the PNA. As the PNA is in the flange ($0 \\le y_p \\le t_f$), the compression area is a rectangle with width $b_f$ and depth $y_p$:\n$$ A_c = b_f \\times y_p $$\nSubstituting the known values:\n$$ 3800\\,\\mathrm{mm}^2 = 200\\,\\mathrm{mm} \\times y_p $$\nSolving for $y_p$:\n$$ y_p = \\frac{3800\\,\\mathrm{mm}^2}{200\\,\\mathrm{mm}} = 19\\,\\mathrm{mm} $$\nThe value $y_p = 19\\,\\mathrm{mm}$ is less than the flange thickness $t_f = 20\\,\\mathrm{mm}$, which confirms our assumption that the PNA is located within the flange.\nThus, the location of the plastic neutral axis measured downward from the top surface is $y_p = 19\\,\\mathrm{mm}$.\n\nNext, we determine the vertical extents of the compressive and tensile zones, $a_c$ and $a_t$.\n$a_c$ is defined as the distance from the PNA to the extreme compression fiber, which is the top surface of the beam. The top surface is at $y=0$. The PNA is at $y=y_p$.\n$$ a_c = |y_p - 0| = y_p = 19\\,\\mathrm{mm} $$\n$a_t$ is defined as the distance from the PNA to the extreme tension fiber, which is the bottom surface of the beam. The total depth of the section is $h = t_f + h_w = 20\\,\\mathrm{mm} + 180\\,\\mathrm{mm} = 200\\,\\mathrm{mm}$. The bottom surface is at $y=h$.\n$$ a_t = |h - y_p| = 200\\,\\mathrm{mm} - 19\\,\\mathrm{mm} = 181\\,\\mathrm{mm} $$\nAs a check, the sum of these extents must equal the total depth of the beam: $a_c + a_t = 19\\,\\mathrm{mm} + 181\\,\\mathrm{mm} = 200\\,\\mathrm{mm}$, which is correct.\n\nThe required quantities are the location of the plastic neutral axis, $y_p$, and the extents of the compression and tension zones, $a_c$ and $a_t$.\nThe calculated values are:\n$y_p = 19\\,\\mathrm{mm}$\n$a_c = 19\\,\\mathrm{mm}$\n$a_t = 181\\,\\mathrm{mm}$", "answer": "$$\n\\boxed{\n\\begin{pmatrix}\n19  19  181\n\\end{pmatrix}\n}\n$$", "id": "2670368"}, {"introduction": "After determining a section's plastic moment capacity, the next step is to predict the collapse load of an entire structure. This practice moves from section analysis to structural analysis, focusing on a statically indeterminate propped cantilever. You will apply the static (lower-bound) theorem of limit analysis, a powerful tool that provides a safe estimate of the collapse load by constructing a statically admissible bending moment field that respects the material's yield limit. [@problem_id:2670343]", "problem": "A straight, prismatic beam of length $L$ is clamped at $x=0$ and simply supported (pin) at $x=L$, forming a propped cantilever. The beam is subjected to a uniformly distributed load of unknown constant intensity $w$ along $0 \\le x \\le L$. The material is modeled as rigid-perfectly plastic in bending with a symmetric, section-constant plastic moment capacity $M_p$ (i.e., the bending moment yield condition is $|M(x)| \\le M_p$ for all $x$). Shear failure is neglected and the beam is sufficiently wide in the transverse direction that plane sections remain plane.\n\nUsing the static (lower bound) theorem of limit analysis and only equilibrium relations for beams, determine the largest value of $w$ for which there exists a bending-moment field $M(x)$ that:\n- satisfies one-dimensional equilibrium with the applied load,\n- satisfies the boundary condition imposed by the an pin at $x=L$,\n- and respects the yield condition $|M(x)| \\le M_p$ everywhere.\n\nDo not use any kinematic (upper bound) arguments. Express your final answer as a closed-form expression in terms of $M_p$ and $L$ only. No numerical evaluation is required, and no units are to be included in the final expression.", "solution": "The problem requires finding the maximum load intensity $w$ for which a bending moment field $M(x)$ exists that satisfies equilibrium and the yield condition $|M(x)| \\le M_p$. This is a direct application of the static (lower bound) theorem of limit analysis.\n\nThe structure is statically indeterminate. We can express the bending moment $M(x)$ in terms of the redundant vertical reaction force $R_L$ at the simple support ($x=L$). By considering equilibrium for a segment from an arbitrary point $x$ to the support at $L$, we get:\n$$ M(x) = R_L(L-x) - \\frac{w}{2}(L-x)^2 $$\nThis expression automatically satisfies the equilibrium equation $\\frac{d^2M}{dx^2} = -w$ and the boundary condition $M(L)=0$.\n\nFor a collapse mechanism to form, plastic hinges must develop at the points of maximum moment magnitude. Under a downward uniform load, these locations are:\n1.  The clamped support at $x=0$, where the moment is negative.\n2.  A point $x_p$ within the span $(0, L)$, where the moment is positive and maximum.\n\nThe moment at the clamped support is:\n$$ M(0) = R_L L - \\frac{wL^2}{2} $$\nThe maximum positive moment occurs where the shear force $V(x) = \\frac{dM}{dx} = -R_L + w(L-x)$ is zero. This gives the location:\n$$ x_p = L - \\frac{R_L}{w} $$\nSubstituting this back into the moment expression gives the maximum positive moment:\n$$ M_{pos,max} = M(x_p) = R_L\\left(\\frac{R_L}{w}\\right) - \\frac{w}{2}\\left(\\frac{R_L}{w}\\right)^2 = \\frac{R_L^2}{2w} $$\nThe collapse load is reached when a mechanism forms, which requires both moment extrema to reach the plastic moment capacity $M_p$:\n1.  $M(0) = -M_p \\implies R_L L - \\frac{wL^2}{2} = -M_p$\n2.  $M_{pos,max} = M_p \\implies \\frac{R_L^2}{2w} = M_p$\n\nWe now have a system of two equations for the two unknowns, $w$ and $R_L$. From the first equation, we isolate $R_L$:\n$$ R_L = \\frac{wL}{2} - \\frac{M_p}{L} $$\nSubstitute this expression for $R_L$ into the second equation:\n$$ \\frac{1}{2w}\\left(\\frac{wL}{2} - \\frac{M_p}{L}\\right)^2 = M_p $$\nExpanding the squared term and multiplying by $2w$:\n$$ \\left(\\frac{w^2L^2}{4} - wM_p + \\frac{M_p^2}{L^2}\\right) = 2wM_p $$\nRearranging this into a standard quadratic equation for $w$:\n$$ \\frac{w^2L^2}{4} - 3wM_p + \\frac{M_p^2}{L^2} = 0 $$\nMultiplying by $4L^2$ to clear the denominators gives:\n$$ w^2L^4 - 12wL^2M_p + 4M_p^2 = 0 $$\nWe solve for $w$ using the quadratic formula $w = \\frac{-b \\pm \\sqrt{b^2-4ac}}{2a}$:\n$$ w = \\frac{12L^2M_p \\pm \\sqrt{(-12L^2M_p)^2 - 4(L^4)(4M_p^2)}}{2L^4} $$\n$$ w = \\frac{12L^2M_p \\pm \\sqrt{144L^4M_p^2 - 16L^4M_p^2}}{2L^4} = \\frac{12L^2M_p \\pm \\sqrt{128L^4M_p^2}}{2L^4} $$\n$$ w = \\frac{12L^2M_p \\pm 8\\sqrt{2}L^2M_p}{2L^4} = \\frac{(6 \\pm 4\\sqrt{2})M_p}{L^2} $$\nThis gives two possible values for the collapse load. To be physically valid, the internal hinge location $x_p$ must be within the beam span, i.e., $0  x_p  L$. Using our expression for $x_p$ and $R_L$:\n$$ x_p = L - \\frac{R_L}{w} = L - \\frac{1}{w}\\left(\\frac{wL}{2} - \\frac{M_p}{L}\\right) = \\frac{L}{2} + \\frac{M_p}{wL} $$\nThe condition $x_p  L$ implies $\\frac{M_p}{wL}  \\frac{L}{2}$, which requires $w > \\frac{2M_p}{L^2}$.\nEvaluating the two solutions for $w$:\n-   $w_1 = (6 + 4\\sqrt{2})\\frac{M_p}{L^2} \\approx 11.657\\frac{M_p}{L^2}$. This value satisfies $w > \\frac{2M_p}{L^2}$.\n-   $w_2 = (6 - 4\\sqrt{2})\\frac{M_p}{L^2} \\approx 0.343\\frac{M_p}{L^2}$. This value does not satisfy the condition.\n\nThe smaller root corresponds to a hinge location outside the beam span, which is physically inadmissible for this collapse mechanism. Therefore, the true plastic collapse load is the larger value.", "answer": "$$\\boxed{(6 + 4\\sqrt{2})\\frac{M_p}{L^2}}$$", "id": "2670343"}, {"introduction": "While analytical methods are powerful, they are often restricted to idealized elastic-perfectly plastic materials. This capstone practice guides you through the development of a computational \"fiber model\" to simulate the response of a beam with more realistic material behavior, including strain hardening and composite layering. By implementing the core numerical techniques—such as the return-mapping algorithm and Newton-Raphson solvers—you will gain a profound understanding of the methods used in modern nonlinear structural analysis software. [@problem_id:2670335]", "problem": "You are asked to implement a complete, runnable program that constructs the incremental bending response of a laminated rectangular metal beam under prescribed curvature history using a layerwise (fiber) numerical integration of uniaxial rate-independent plasticity with isotropic hardening. The section response must be computed by enforcing axial force equilibrium at each curvature increment through a scalar Newton iteration on the unknown axial strain, while each layer is updated by a one-dimensional return-mapping algorithm appropriate to its hardening law.\n\nThe problem must be solved under the following assumptions and fundamental principles:\n- Kinematics: Small strains and the Bernoulli-Euler hypothesis that plane sections remain plane and perpendicular to the neutral axis. The axial strain distribution along the section depth coordinate is given by $ \\varepsilon(y) = \\varepsilon_0 - \\kappa \\, y $, where $ \\varepsilon_0 $ is the section axial strain at the geometric centroid ($ y = 0 $), $ \\kappa $ is the scalar curvature, and $ y $ is the coordinate measured positive toward the top surface.\n- Statics: The section force resultants are $ N = \\int_A \\sigma \\, \\mathrm{d}A $ and $ M = \\int_A \\sigma \\, y \\, \\mathrm{d}A $, where $ \\sigma $ is the axial Cauchy stress. For a rectangular section of constant width $ b $, these reduce, under layerwise midpoint integration, to Riemann sums $ N \\approx \\sum_i \\sigma_i \\, b \\, t_i $ and $ M \\approx \\sum_i \\sigma_i \\, y_i \\, b \\, t_i $, where $ t_i $ is the layer thickness and $ y_i $ its centroid.\n- Constitutive response in each layer: One-dimensional, rate-independent, associative plasticity consistent with a specialization of the von Mises criterion based on the second invariant of the deviatoric stress tensor (J2) to uniaxial stress. Let the additive strain split be $ \\varepsilon = \\varepsilon^{\\mathrm{e}} + \\varepsilon^{\\mathrm{p}} $, with $ \\sigma = E \\, \\varepsilon^{\\mathrm{e}} $ (Hooke’s law) and the yield function $ \\varphi(\\sigma,p) = |\\sigma| - \\sigma_{y0} - R(p) \\le 0 $, where $ \\sigma_{y0} $ is the initial yield stress, $ p $ is the accumulated equivalent plastic strain, and $ R(p) $ is an isotropic hardening function. The flow rule is $ \\mathrm{d}\\varepsilon^{\\mathrm{p}} = \\mathrm{d}\\lambda \\, \\mathrm{sign}(\\sigma) $ and $ \\mathrm{d}p = \\mathrm{d}\\lambda $ with the Karush-Kuhn-Tucker loading-unloading conditions. The uniaxial return-mapping at layer level must be implemented by solving the scalar plastic consistency problem if yielding occurs.\n\nYour code must implement:\n- A fiber discretization of a rectangular cross-section into $ N_{\\ell} $ equal-thickness layers of thickness $ t = h/N_{\\ell} $, where $ h $ is the section depth. The layer centroid coordinates are $ y_i = -h/2 + \\left(i+\\tfrac{1}{2}\\right) t $ for $ i = 0, 1, \\dots, N_{\\ell}-1 $.\n- At each load step, a Newton iteration on the unknown $ \\varepsilon_0 $ enforcing $ N = N_{\\mathrm{ext}} $ with $ N_{\\mathrm{ext}} = 0 $, while curvature $ \\kappa $ is prescribed by the load history. For a given iterate $ \\varepsilon_0 $, the layer total strain is $ \\varepsilon_i = \\varepsilon_0 - \\kappa \\, y_i $. Use the layerwise return-mapping to compute $ \\sigma_i $ and the algorithmic tangent $ \\partial \\sigma_i / \\partial \\varepsilon_i $ at that state. Assemble the residual $ r = \\sum_i \\sigma_i \\, b \\, t - N_{\\mathrm{ext}} $ and the section tangent $ K = \\sum_i \\left(\\partial \\sigma_i / \\partial \\varepsilon_i\\right) b \\, t $, and update $ \\varepsilon_0 \\leftarrow \\varepsilon_0 - r/K $ until convergence of axial force. After convergence, compute the bending moment $ M = \\sum_i \\sigma_i \\, y_i \\, b \\, t $.\n- Layer hardening laws by region through the depth:\n  - Top third (i.e., $ y \\in (h/6, h/2] $): linear isotropic hardening $ R(p) = H \\, p $.\n  - Middle third (i.e., $ y \\in [-h/6, h/6] $): elastic-perfectly plastic $ R(p) = 0 $.\n  - Bottom third (i.e., $ y \\in [-h/2, -h/6) $): Voce-type saturation $ R(p) = Q \\left( 1 - e^{-b_{\\mathrm{V}} p} \\right) $.\n- Return mapping at layer level:\n  - Elastic trial stress computed from the layer total strain and previous plastic strain.\n  - If elastic, accept the trial state.\n  - If plastic, solve the scalar plastic consistency problem arising from $ \\varphi(\\sigma_{n+1}, p_{n+1}) = 0 $ to obtain the plastic multiplier increment. For linear hardening and elastic-perfectly plastic, this scalar equation admits a closed-form solution. For the Voce law, solve the scalar equation by a robust Newton method with a suitable stopping criterion on the yield function.\n  - Provide the algorithmic consistent tangent $ \\partial \\sigma / \\partial \\varepsilon $ at the updated state needed by the section-level Newton iteration.\n\nPhysical and numerical units:\n- All lengths $ b $ and $ h $ are in meters. Elastic moduli $ E $, yield stresses $ \\sigma_{y0} $, and hardening parameters $ H $ and $ Q $ are in Pascals. Curvatures $ \\kappa $ are in inverse meters. The bending moment $ M $ must be reported in newton-meters. Express the final answers in newton-meters, rounded to three significant figures.\n\nTest suite and required output:\n- Implement the computation for the following three test cases. Each case uses the same depth-wise assignment of hardening law by thirds as stated above, but with its own geometry and curvature history. The section width is constant and equal to $ b $ across the depth. For each case, the axial resultant is constrained to $ N_{\\mathrm{ext}} = 0 $ at every load step. Use equally spaced curvature steps including the endpoints.\n\n  - Case A (general mixed plasticity, “happy path”):\n    - Geometry: $ b = 0.06 \\ \\mathrm{m} $, $ h = 0.12 \\ \\mathrm{m} $, number of layers $ N_{\\ell} = 120 $.\n    - Material parameters by region:\n      - Top third (linear hardening): $ E = 2.10 \\times 10^{11} \\ \\mathrm{Pa} $, $ \\sigma_{y0} = 3.20 \\times 10^{8} \\ \\mathrm{Pa} $, $ H = 1.20 \\times 10^{9} \\ \\mathrm{Pa} $.\n      - Middle third (perfectly plastic): $ E = 2.00 \\times 10^{11} \\ \\mathrm{Pa} $, $ \\sigma_{y0} = 2.20 \\times 10^{8} \\ \\mathrm{Pa} $.\n      - Bottom third (Voce): $ E = 2.10 \\times 10^{11} \\ \\mathrm{Pa} $, $ \\sigma_{y0} = 3.00 \\times 10^{8} \\ \\mathrm{Pa} $, $ Q = 1.50 \\times 10^{8} \\ \\mathrm{Pa} $, $ b_{\\mathrm{V}} = 25 $.\n    - Curvature history: from $ \\kappa = 0 $ to $ \\kappa = 0.06 \\ \\mathrm{m}^{-1} $ in $ 80 $ equal increments.\n\n  - Case B (purely elastic boundary case):\n    - Geometry: $ b = 0.06 \\ \\mathrm{m} $, $ h = 0.12 \\ \\mathrm{m} $, number of layers $ N_{\\ell} = 120 $.\n    - Same material parameters as Case A.\n    - Curvature history: from $ \\kappa = 0 $ to $ \\kappa = 1.0 \\times 10^{-5} \\ \\mathrm{m}^{-1} $ in $ 4 $ equal increments.\n\n  - Case C (reverse bending and strong plasticity edge case):\n    - Geometry: $ b = 0.05 \\ \\mathrm{m} $, $ h = 0.10 \\ \\mathrm{m} $, number of layers $ N_{\\ell} = 100 $.\n    - Material parameters by region:\n      - Top third (linear hardening): $ E = 2.05 \\times 10^{11} \\ \\mathrm{Pa} $, $ \\sigma_{y0} = 3.00 \\times 10^{8} \\ \\mathrm{Pa} $, $ H = 1.00 \\times 10^{9} \\ \\mathrm{Pa} $.\n      - Middle third (perfectly plastic): $ E = 2.00 \\times 10^{11} \\ \\mathrm{Pa} $, $ \\sigma_{y0} = 2.00 \\times 10^{8} \\ \\mathrm{Pa} $.\n      - Bottom third (Voce): $ E = 2.10 \\times 10^{11} \\ \\mathrm{Pa} $, $ \\sigma_{y0} = 3.20 \\times 10^{8} \\ \\mathrm{Pa} $, $ Q = 2.00 \\times 10^{8} \\ \\mathrm{Pa} $, $ b_{\\mathrm{V}} = 20 $.\n    - Curvature history: from $ \\kappa = 0 $ to $ \\kappa = -0.05 \\ \\mathrm{m}^{-1} $ in $ 60 $ equal increments.\n\n- For each case, report the bending moment at the final curvature of the history. Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, with the three moments in newton-meters, rounded to three significant figures, in the order [Case A result, Case B result, Case C result]. For example, your output must look like $ [m_A, m_B, m_C] $ where each $ m_\\cdot $ is a float number in newton-meters rounded to three significant figures.\n\nScientific realism and implementation constraints:\n- Use the constitutive and equilibrium principles above. Do not assume any closed-form section response beyond the layerwise numerical integration and Newton solution described.\n- Use robust tolerances for both the layer-level plasticity and the section-level Newton solves. Ensure the algorithm converges for the given test suite and that the axial force equilibrium residual is driven to a negligible value relative to the characteristic section force scale.\n- The final code must be self-contained, not require any input, and adhere to the execution environment specified later. The only allowed external libraries are Numerical Python (NumPy) and the Python standard library.", "solution": "The task is to compute the bending moment $M$ in a rectangular beam section subjected to a prescribed history of curvature $\\kappa$, under the constraint of zero net axial force $N=0$. The beam is composed of layers with distinct material properties, exhibiting elastoplastic behavior with isotropic hardening. The solution requires a nested iterative approach: an outer loop increments the curvature, and an inner Newton-Raphson loop determines the section's neutral axis strain $\\varepsilon_0$ to satisfy axial equilibrium. The state of each material layer is updated using a return-mapping algorithm.\n\n**1. Kinematics and Section Discretization**\n\nWe adopt the Bernoulli-Euler hypothesis, which states that plane sections remain plane. The axial strain $\\varepsilon$ at a distance $y$ from the section's geometric centroid is linear:\n$$ \\varepsilon(y) = \\varepsilon_0 - \\kappa y $$\nHere, $\\varepsilon_0$ is the axial strain at the centroid ($y=0$) and $\\kappa$ is the prescribed curvature. The coordinate $y$ is positive towards the top surface of the beam.\n\nThe rectangular section of height $h$ and width $b$ is discretized into $N_{\\ell}$ layers of equal thickness $t = h/N_{\\ell}$. Each layer $i$ (where $i=0, \\dots, N_{\\ell}-1$) is represented by its centroidal coordinate $y_i$ and area $A_i=b \\cdot t$:\n$$ y_i = -\\frac{h}{2} + \\left(i+\\frac{1}{2}\\right)t $$\nThis discrete representation transforms the integral definitions of section force resultants into Riemann sums:\n- Axial Force: $N = \\int_A \\sigma \\, \\mathrm{d}A \\approx \\sum_{i=0}^{N_{\\ell}-1} \\sigma_i \\, A_i$\n- Bending Moment: $M = \\int_A \\sigma y \\, \\mathrm{d}A \\approx \\sum_{i=0}^{N_{\\ell}-1} \\sigma_i \\, y_i \\, A_i$\nwhere $\\sigma_i$ is the uniform axial stress within layer $i$.\n\n**2. Layer Constitutive Model and Return Mapping**\n\nEach layer follows a one-dimensional, rate-independent, elastoplastic constitutive law. The total strain $\\varepsilon$ is additively decomposed into an elastic part $\\varepsilon^{\\mathrm{e}}$ and a plastic part $\\varepsilon^{\\mathrm{p}}$:\n$$ \\varepsilon = \\varepsilon^{\\mathrm{e}} + \\varepsilon^{\\mathrm{p}} $$\nThe stress $\\sigma$ is related to the elastic strain by Hooke's law, $\\sigma = E \\varepsilon^{\\mathrm{e}}$, where $E$ is the Young's modulus.\n\nPlastic deformation is governed by a yield function $\\varphi$, which depends on the stress $\\sigma$ and an internal state variable, the accumulated plastic strain $p$:\n$$ \\varphi(\\sigma, p) = |\\sigma| - (\\sigma_{y0} + R(p)) \\le 0 $$\nwhere $\\sigma_{y0}$ is the initial yield stress and $R(p)$ is the hardening function describing the expansion of the yield surface. Plastic flow occurs only when $\\varphi = 0$.\n\nThe evolution of plastic strain is described by an associative flow rule:\n$$ \\mathrm{d}\\varepsilon^{\\mathrm{p}} = \\mathrm{d}\\lambda \\, \\mathrm{sign}(\\sigma) \\quad \\text{and} \\quad \\mathrm{d}p = |\\mathrm{d}\\varepsilon^{\\mathrm{p}}| = \\mathrm{d}\\lambda $$\nwhere $\\mathrm{d}\\lambda \\ge 0$ is the plastic multiplier. The Karush-Kuhn-Tucker (KKT) conditions $\\mathrm{d}\\lambda \\ge 0$, $\\varphi \\le 0$, and $\\mathrm{d}\\lambda \\cdot \\varphi = 0$ must hold.\n\nFor a given total strain increment, the updated stress and state variables are found using a return-mapping algorithm:\n1.  **Elastic Predictor**: A trial stress is computed assuming the step is purely elastic:\n    $$ \\sigma^{\\mathrm{trial}} = E(\\varepsilon_{n+1} - \\varepsilon^{\\mathrm{p}}_n) $$\n    where the subscript $n$ denotes the state at the beginning of the increment.\n2.  **Yield Check**: The yield function is evaluated at the trial state:\n    $$ \\varphi^{\\mathrm{trial}} = |\\sigma^{\\mathrm{trial}}| - (\\sigma_{y0} + R(p_n)) $$\n    If $\\varphi^{\\mathrm{trial}} \\le 0$, the step is elastic. The state is updated as $\\sigma_{n+1} = \\sigma^{\\mathrm{trial}}$, $\\varepsilon^{\\mathrm{p}}_{n+1} = \\varepsilon^{\\mathrm{p}}_n$, $p_{n+1}=p_n$. The material's response is linear, so the algorithmic tangent modulus is $E^{\\mathrm{alg}} = E$.\n3.  **Plastic Corrector**: If $\\varphi^{\\mathrm{trial}} > 0$, the step is plastic. The state must be \"returned\" to the updated yield surface. This requires solving for the plastic multiplier increment $\\Delta\\lambda > 0$ that satisfies the consistency condition at the end of the step, $\\varphi(\\sigma_{n+1}, p_{n+1})=0$. Substituting the relations $\\sigma_{n+1} = \\sigma^{\\mathrm{trial}} - E\\Delta\\lambda\\,\\mathrm{sign}(\\sigma^{\\mathrm{trial}})$ and $p_{n+1} = p_n + \\Delta\\lambda$, we obtain a single scalar equation for $\\Delta\\lambda$:\n    $$ g(\\Delta\\lambda) = |\\sigma^{\\mathrm{trial}}| - E\\Delta\\lambda - (\\sigma_{y0} + R(p_n + \\Delta\\lambda)) = 0 $$\n    The solution for $\\Delta\\lambda$ depends on the form of the hardening function $R(p)$:\n    - **Elastic-Perfectly Plastic ($R(p)=0$):** The equation is linear, yielding a closed-form solution: $\\Delta\\lambda = \\frac{|\\sigma^{\\mathrm{trial}}| - \\sigma_{y0}}{E}$.\n    - **Linear Hardening ($R(p)=H p$):** The equation is again linear in $\\Delta\\lambda$: $\\Delta\\lambda = \\frac{|\\sigma^{\\mathrm{trial}}| - (\\sigma_{y0} + H p_n)}{E+H}$.\n    - **Voce Saturation Hardening ($R(p) = Q(1-e^{-b_{\\mathrm{V}}p})$):** The equation becomes nonlinear and must be solved numerically, for which we implement a scalar Newton's method. The iteration is $\\Delta\\lambda_{k+1} = \\Delta\\lambda_k - g(\\Delta\\lambda_k)/g'(\\Delta\\lambda_k)$, where $g'(\\Delta\\lambda) = -E - R'(p_n+\\Delta\\lambda)$.\n\nOnce $\\Delta\\lambda$ is found, the state is updated: $p_{n+1}=p_n+\\Delta\\lambda$, $\\varepsilon^{\\mathrm{p}}_{n+1} = \\varepsilon^{\\mathrm{p}}_n + \\Delta\\lambda\\,\\mathrm{sign}(\\sigma^{\\mathrm{trial}})$, and $\\sigma_{n+1} = E(\\varepsilon_{n+1} - \\varepsilon^{\\mathrm{p}}_{n+1})$.\n\nThe consistent algorithmic tangent modulus, $E^{\\mathrm{alg}} = \\frac{\\mathrm{d}\\sigma_{n+1}}{\\mathrm{d}\\varepsilon_{n+1}}$, is required for the section-level Newton iteration. For an elastic step, $E^{\\mathrm{alg}}=E$. For a plastic step, it is given by:\n$$ E^{\\mathrm{alg}} = \\frac{E \\, R'(p_{n+1})}{E + R'(p_{n+1})} $$\nwhere $R'(p)$ is the hardening modulus. For perfect plasticity, $R'=0$, so $E^{\\mathrm{alg}}=0$. For linear hardening, $R'=H$, so $E^{\\mathrm{alg}}=\\frac{EH}{E+H}$.\n\n**3. Section-Level Equilibrium**\n\nFor each prescribed curvature $\\kappa_{n+1}$, we must find the axial strain $\\varepsilon_0$ that satisfies the axial force equilibrium condition, $N(\\varepsilon_0) = 0$. This is a scalar root-finding problem, which we solve using Newton's method.\nStarting with an initial guess for $\\varepsilon_0$, we iterate:\n$$ \\varepsilon_0^{(k+1)} = \\varepsilon_0^{(k)} - \\frac{r^{(k)}}{K^{(k)}} $$\nThe residual $r^{(k)}$ is the net axial force, and the tangent stiffness $K^{(k)}$ is its derivative with respect to $\\varepsilon_0$:\n$$ r^{(k)} = N(\\varepsilon_0^{(k)}) = \\sum_{i} \\sigma_i(\\varepsilon_0^{(k)}) \\, A_i $$\n$$ K^{(k)} = \\frac{\\mathrm{d}N}{\\mathrm{d}\\varepsilon_0}\\bigg|_{\\varepsilon_0^{(k)}} = \\sum_{i} \\frac{\\mathrm{d}\\sigma_i}{\\mathrm{d}\\varepsilon_i} \\frac{\\mathrm{d}\\varepsilon_i}{\\mathrm{d}\\varepsilon_0} A_i = \\sum_{i} E^{\\mathrm{alg}}_i \\, A_i $$\nThe iteration continues until the magnitude of the residual $|r^{(k)}|$ is below a specified tolerance.\n\n**4. Simulation Algorithm**\n\nThe complete simulation proceeds as follows:\n1.  **Initialization**: Discretize the section and assign material properties (Young's modulus, yield stress, hardening law) to each layer based on its centroidal coordinate $y_i$. Initialize all state variables: plastic strains $\\varepsilon^{\\mathrm{p}}_i = 0$ and accumulated plastic strains $p_i = 0$ for all layers.\n2.  **Curvature Incrementation**: Loop through the prescribed sequence of equally spaced curvature values, from $\\kappa=0$ to the final target curvature.\n3.  **Section Analysis**: For each new curvature value $\\kappa_{n+1}$:\n    a.  Solve for the corresponding centroidal strain $\\varepsilon_0$ using the section-level Newton-Raphson method described above. The converged value from the previous curvature step serves as the initial guess.\n    b.  During each Newton iteration, the stress $\\sigma_i$ and algorithmic tangent $E^{\\mathrm{alg}}_i$ for each layer are computed using the return-mapping algorithm based on the current trial total strain $\\varepsilon_i = \\varepsilon_0 - \\kappa_{n+1}y_i$.\n4.  **State Update**: Once $\\varepsilon_0$ has converged, the final layer states ($\\sigma_i, \\varepsilon^{\\mathrm{p}}_i, p_i$) for the current curvature step are computed and stored, becoming the \"previous\" state for the next increment.\n5.  **Moment Calculation**: After the final curvature step is solved, the corresponding bending moment is computed using the converged layer stresses: $M = \\sum_i \\sigma_i \\, y_i \\, A_i$.\n\nThis procedure is applied to each of the three test cases specified in the problem statement to obtain the final bending moments.", "answer": "```python\nimport numpy as np\nimport math\n\n# Constants for numerical tolerances and limits\nSECTION_FORCE_TOL = 1e-6  # Tolerance for section axial force equilibrium [N]\nLAYER_CONSISTENCY_TOL = 1e-9  # Tolerance for layer consistency condition [Pa]\nMAX_SECTION_ITER = 20  # Max iterations for section Newton-Raphson\nMAX_LAYER_ITER = 20  # Max iterations for layer (Voce) Newton-Raphson\n\ndef round_to_sf(x, sf):\n    \"\"\"Rounds a number to a specified number of significant figures.\"\"\"\n    if x == 0:\n        return 0.0\n    return float(f\"{x:.{sf}g}\")\n\ndef _solve_voce_consistency(sig_trial_abs, p_n, E, sigy0, h_params):\n    \"\"\"\n    Solves the nonlinear consistency equation for Voce hardening\n    using Newton's method to find the plastic multiplier increment delta_lambda.\n    \"\"\"\n    Q, b_V = h_params\n    delta_lambda = 0.0\n\n    for _ in range(MAX_LAYER_ITER):\n        # Evaluate consistency residual g(delta_lambda)\n        p_np1 = p_n + delta_lambda\n        R_np1 = Q * (1.0 - math.exp(-b_V * p_np1))\n        g = sig_trial_abs - E * delta_lambda - (sigy0 + R_np1)\n\n        if abs(g)  LAYER_CONSISTENCY_TOL:\n            return delta_lambda\n\n        # Evaluate derivative g'(delta_lambda)\n        hardening_modulus_np1 = Q * b_V * math.exp(-b_V * p_np1)\n        g_prime = -E - hardening_modulus_np1\n        \n        # Newton update\n        delta_lambda -= g / g_prime\n\n    return delta_lambda # Return best effort if not converged\n\ndef update_layer_state(total_strain, ep_n, p_n, mat_props):\n    \"\"\"\n    Performs the return-mapping algorithm for a single layer.\n    \"\"\"\n    E, sigy0, hardening_type, h_params = mat_props\n\n    # 1. Elastic predictor\n    sig_trial = E * (total_strain - ep_n)\n    sig_trial_abs = abs(sig_trial)\n\n    # Calculate hardening at previous step\n    if hardening_type == 'perfect':\n        R_n = 0.0\n    elif hardening_type == 'linear':\n        H = h_params[0]\n        R_n = H * p_n\n    else: # Voce\n        Q, b_V = h_params\n        R_n = Q * (1.0 - math.exp(-b_V * p_n))\n\n    # 2. Yield check\n    phi_trial = sig_trial_abs - (sigy0 + R_n)\n\n    if phi_trial = 1e-9:  # Elastic step\n        E_alg = E\n        return sig_trial, E_alg, ep_n, p_n\n    \n    # 3. Plastic corrector\n    sign_sig = np.sign(sig_trial) if sig_trial != 0 else 1.0\n    \n    # Solve for plastic multiplier increment delta_lambda\n    if hardening_type == 'perfect':\n        delta_lambda = phi_trial / E\n        hardening_modulus_np1 = 0.0\n    elif hardening_type == 'linear':\n        H = h_params[0]\n        delta_lambda = phi_trial / (E + H)\n        hardening_modulus_np1 = H\n    else: # Voce\n        delta_lambda = _solve_voce_consistency(sig_trial_abs, p_n, E, sigy0, h_params)\n        Q, b_V = h_params\n        p_np1 = p_n + delta_lambda\n        hardening_modulus_np1 = Q * b_V * math.exp(-b_V * p_np1)\n\n    # Update state variables\n    p_np1 = p_n + delta_lambda\n    ep_np1 = ep_n + delta_lambda * sign_sig\n    sig_np1 = E * (total_strain - ep_np1)\n\n    # Calculate consistent algorithmic tangent\n    E_alg = (E * hardening_modulus_np1) / (E + hardening_modulus_np1)\n    \n    return sig_np1, E_alg, ep_np1, p_np1\n\ndef run_simulation(case):\n    \"\"\"Main simulation driver for a single test case.\"\"\"\n    b, h, Nl = case['geom']\n    materials = case['materials']\n    kappa_start, kappa_end, n_steps = case['history']\n    \n    # Section discretization\n    t = h / Nl\n    layer_area = b * t\n    y_coords = -h / 2.0 + (np.arange(Nl) + 0.5) * t\n\n    # Assign material properties to layers\n    layer_mat_props = []\n    h_6 = h / 6.0\n    for y_i in y_coords:\n        if y_i > h_6:\n            layer_mat_props.append(materials['top'])\n        elif y_i  -h_6:\n            layer_mat_props.append(materials['bottom'])\n        else:\n            layer_mat_props.append(materials['middle'])\n\n    # Initialize state variables\n    ep_vals = np.zeros(Nl)  # Plastic strain\n    p_vals = np.zeros(Nl)   # Accumulated plastic strain\n    epsilon0 = 0.0\n\n    kappa_hist = np.linspace(kappa_start, kappa_end, n_steps + 1)\n\n    # Loop through curvature increments\n    for kappa_curr in kappa_hist[1:]:\n        epsilon0_guess = epsilon0  # Use previous converged value as guess\n        \n        # Section-level Newton-Raphson for epsilon0\n        for _ in range(MAX_SECTION_ITER):\n            # Store layer results for current iteration\n            sig_vals_iter = np.zeros(Nl)\n            E_alg_vals_iter = np.zeros(Nl)\n            \n            # Layer-wise update\n            total_strains_iter = epsilon0_guess - kappa_curr * y_coords\n            for i in range(Nl):\n                sig_i, E_alg_i, _, _ = update_layer_state(\n                    total_strains_iter[i], ep_vals[i], p_vals[i], layer_mat_props[i]\n                )\n                sig_vals_iter[i] = sig_i\n                E_alg_vals_iter[i] = E_alg_i\n            \n            # Assemble residual and tangent stiffness\n            residual_N = np.sum(sig_vals_iter) * layer_area\n            tangent_K = np.sum(E_alg_vals_iter) * layer_area\n            \n            # Check for convergence\n            if abs(residual_N)  SECTION_FORCE_TOL:\n                epsilon0 = epsilon0_guess\n                break\n            \n            if abs(tangent_K)  1e-9: # Avoid division by zero\n                # This should not happen in these problems\n                epsilon0 = epsilon0_guess\n                break\n\n            # Newton update\n            epsilon0_guess -= residual_N / tangent_K\n        else:\n            # If loop finishes without break, it did not converge\n            # Use the last guess and proceed\n            epsilon0 = epsilon0_guess\n        \n        # Update state variables for the converged step\n        final_strains = epsilon0 - kappa_curr * y_coords\n        for i in range(Nl):\n            _, _, ep_np1, p_np1 = update_layer_state(\n                final_strains[i], ep_vals[i], p_vals[i], layer_mat_props[i]\n            )\n            ep_vals[i] = ep_np1\n            p_vals[i] = p_np1\n            \n    # Final calculation after all increments\n    final_strains = epsilon0 - kappa_end * y_coords\n    final_sigmas = np.zeros(Nl)\n    for i in range(Nl):\n        sig_i, _, _, _ = update_layer_state(\n            final_strains[i], ep_vals[i], p_vals[i], layer_mat_props[i]\n        )\n        final_sigmas[i] = sig_i\n\n    final_moment = np.sum(final_sigmas * y_coords) * layer_area\n    return final_moment\n\ndef solve():\n    \"\"\"Defines and runs the test cases, then prints the results.\"\"\"\n    test_cases = [\n        # Case A\n        {\n            'geom': (0.06, 0.12, 120),\n            'materials': {\n                'top':    (2.10e11, 3.20e8, 'linear', (1.20e9,)),\n                'middle': (2.00e11, 2.20e8, 'perfect', ()),\n                'bottom': (2.10e11, 3.00e8, 'voce', (1.50e8, 25.0)),\n            },\n            'history': (0.0, 0.06, 80),\n        },\n        # Case B\n        {\n            'geom': (0.06, 0.12, 120),\n            'materials': {\n                'top':    (2.10e11, 3.20e8, 'linear', (1.20e9,)),\n                'middle': (2.00e11, 2.20e8, 'perfect', ()),\n                'bottom': (2.10e11, 3.00e8, 'voce', (1.50e8, 25.0)),\n            },\n            'history': (0.0, 1.0e-5, 4),\n        },\n        # Case C\n        {\n            'geom': (0.05, 0.10, 100),\n            'materials': {\n                'top':    (2.05e11, 3.00e8, 'linear', (1.00e9,)),\n                'middle': (2.00e11, 2.00e8, 'perfect', ()),\n                'bottom': (2.10e11, 3.20e8, 'voce', (2.00e8, 20.0)),\n            },\n            'history': (0.0, -0.05, 60),\n        }\n    ]\n\n    results = []\n    for case in test_cases:\n        moment = run_simulation(case)\n        rounded_moment = round_to_sf(moment, 3)\n        results.append(rounded_moment)\n\n    print(f\"[{','.join(map(str, results))}]\")\n\nif __name__ == '__main__':\n    solve()\n```", "id": "2670335"}]}