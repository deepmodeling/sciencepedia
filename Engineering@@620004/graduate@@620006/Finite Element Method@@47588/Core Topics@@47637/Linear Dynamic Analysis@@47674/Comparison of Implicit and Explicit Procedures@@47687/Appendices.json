{"hands_on_practices": [{"introduction": "The stability of the time integration scheme is a paramount concern when choosing an explicit solver. This first exercise provides a foundational analysis of this issue by examining the classic diffusion equation. By applying the forward Euler method to a finite element semi-discretization, you will derive the famous stability constraint on the time step $\\Delta t$, revealing its critical dependence on the mesh size $h$ and material diffusivity $\\kappa$ [@problem_id:2545016].", "problem": "Consider the linear diffusion equation $u_{t}=\\kappa\\,\\Delta u$ on the $d$-dimensional hypercube $\\Omega=(0,L)^{d}$ with homogeneous Dirichlet boundary conditions and constant diffusivity $\\kappa>0$. Let $V_{h}\\subset H_{0}^{1}(\\Omega)$ be the conforming finite element space of continuous, piecewise bilinear/trilinear tensor-product polynomials (that is, $Q_{1}$ elements) over a uniform Cartesian partition with mesh size $h=L/N$ in each coordinate, and let $\\{\\phi_{i}\\}$ denote its nodal basis. The semidiscrete method of lines obtained from the standard Galerkin method yields the ordinary differential equation system $M\\,\\dot{\\mathbf{U}}(t)+K\\,\\mathbf{U}(t)=\\mathbf{0}$, where $M_{ij}=(\\phi_{i},\\phi_{j})_{L^{2}(\\Omega)}$ and $K_{ij}=\\kappa\\,(\\nabla\\phi_{i},\\nabla\\phi_{j})_{L^{2}(\\Omega)}$. Assume the mass matrix is replaced by its row-sum lumped diagonal approximation $M_{\\ell}$, so that the explicit forward Euler update takes the form $\\mathbf{U}^{n+1}=\\mathbf{U}^{n}-\\Delta t\\,M_{\\ell}^{-1}K\\,\\mathbf{U}^{n}$. Starting from the principles that: (i) the amplification matrix of forward Euler is $I-\\Delta t\\,A$ for a linear system $\\dot{\\mathbf{y}}=-A\\,\\mathbf{y}$, and stability for real, nonnegative spectra requires $|1-\\Delta t\\,\\lambda|\\leq 1$ for all eigenvalues $\\lambda$ of $A$, and (ii) on a uniform Cartesian mesh with homogeneous Dirichlet boundary conditions, $M_{\\ell}^{-1}K$ is diagonalizable by the discrete sine transform with real, nonnegative eigenvalues that coincide with those of $\\kappa$ times the standard negative discrete Laplacian on the same grid, derive the maximal forward Euler time step $\\Delta t_{\\max}$ ensuring linear stability in terms of $h$, $d$, and $\\kappa$. Your derivation must make explicit the dependence of the largest eigenvalue $\\lambda_{\\max}(M_{\\ell}^{-1}K)$ on $h$ and $d$. As a context-based comparison of implicit and explicit procedures, briefly justify in your reasoning why the backward Euler method does not impose such a step-size restriction for this problem, but do not report any separate numerical bound for it. Provide your final answer as a single, closed-form expression for $\\Delta t_{\\max}$ in terms of $h$, $d$, and $\\kappa$. If assigning physical units, interpret time in seconds when $h$ is in meters and $\\kappa$ is in meters squared per second. Do not include units in your final boxed answer.", "solution": "The problem as stated is valid and well-posed. It constitutes a standard exercise in the stability analysis of numerical methods for partial differential equations. We proceed with the derivation.\n\nThe semidiscrete finite element formulation with mass lumping is given by the system of ordinary differential equations $M_{\\ell}\\,\\dot{\\mathbf{U}}(t)+K\\,\\mathbf{U}(t)=\\mathbf{0}$. This can be written in the standard form for a linear system as:\n$$\n\\dot{\\mathbf{U}}(t) = -M_{\\ell}^{-1}K\\,\\mathbf{U}(t)\n$$\nWe identify the system matrix as $A = M_{\\ell}^{-1}K$. The forward Euler method discretizes this system in time as:\n$$\n\\frac{\\mathbf{U}^{n+1} - \\mathbf{U}^{n}}{\\Delta t} = -A\\,\\mathbf{U}^{n}\n$$\nThis yields the explicit update rule $\\mathbf{U}^{n+1} = (I - \\Delta t\\,A)\\,\\mathbf{U}^{n}$, where $I$ is the identity matrix. The amplification matrix for this scheme is $G = I - \\Delta t\\,A$.\n\nAccording to the provided principle (i), for a system with a real, nonnegative spectrum of eigenvalues $\\{\\lambda_k\\}$, stability requires that the magnitude of all eigenvalues of the amplification matrix be bounded by $1$. The eigenvalues of $G$ are $g_k = 1 - \\Delta t\\,\\lambda_k$. The condition is $|1 - \\Delta t\\,\\lambda_k| \\le 1$ for all $k$. Since $K$ is symmetric positive semi-definite and $M_{\\ell}$ is a diagonal matrix with positive entries (the lumped masses are positive), the eigenvalues $\\lambda_k$ of $A = M_{\\ell}^{-1}K$ are real and non-negative. Thus, the stability condition simplifies to:\n$$\n-1 \\le 1 - \\Delta t\\,\\lambda_k \\le 1\n$$\nThe right-hand inequality, $1 - \\Delta t\\,\\lambda_k \\le 1$, implies $-\\Delta t\\,\\lambda_k \\le 0$, which is always satisfied since $\\Delta t > 0$ and $\\lambda_k \\ge 0$. The left-hand inequality, $-1 \\le 1 - \\Delta t\\,\\lambda_k$, imposes the actual constraint:\n$$\n\\Delta t\\,\\lambda_k \\le 2 \\implies \\Delta t \\le \\frac{2}{\\lambda_k}\n$$\nThis must hold for all eigenvalues. The most restrictive condition is imposed by the largest eigenvalue, $\\lambda_{\\max}$. Therefore, the condition for numerical stability is:\n$$\n\\Delta t \\le \\frac{2}{\\lambda_{\\max}(A)} \\implies \\Delta t_{\\max} = \\frac{2}{\\lambda_{\\max}(M_{\\ell}^{-1}K)}\n$$\nThe central task is to determine $\\lambda_{\\max}(M_{\\ell}^{-1}K)$. We use the provided principle (ii), which states that the eigenvalues of $M_{\\ell}^{-1}K$ for lumped $Q_1$ elements on a uniform grid are identical to those of $\\kappa$ times the standard negative discrete Laplacian, denoted $-\\Delta_h$, on the same grid with homogeneous Dirichlet boundary conditions.\nThe eigenvalues of $A$ are thus $\\lambda(A) = \\kappa\\,\\lambda(-\\Delta_h)$.\n\nWe now derive the eigenvalues of the operator $-\\Delta_h$ on the $d$-dimensional domain $\\Omega=(0,L)^{d}$ with a uniform mesh of size $h=L/N$. The operator is defined by its action on a grid function $v_{j_1, \\dots, j_d}$:\n$$\n(-\\Delta_h v)_{\\mathbf{j}} = -\\frac{1}{h^2} \\sum_{k=1}^d (v_{\\mathbf{j}+\\mathbf{e}_k} - 2v_{\\mathbf{j}} + v_{\\mathbf{j}-\\mathbf{e}_k})\n$$\nwhere $\\mathbf{j}=(j_1, \\dots, j_d)$ is a multi-index for an interior grid point, $1 \\le j_k \\le N-1$. The eigenfunctions are products of sine functions:\n$$\n\\psi_{\\mathbf{m}}(\\mathbf{j}) = \\prod_{k=1}^d \\sin\\left(\\frac{m_k \\pi j_k h}{L}\\right) = \\prod_{k=1}^d \\sin\\left(\\frac{m_k \\pi j_k}{N}\\right)\n$$\nfor a mode multi-index $\\mathbf{m}=(m_1, \\dots, m_d)$ with $1 \\le m_k \\le N-1$. Due to the separability of the Laplacian operator, the eigenvalues in $d$ dimensions are the sum of the eigenvalues from each dimension. For a single dimension, the eigenvalue $\\lambda_m^{(1D)}$ corresponding to the eigenfunction $\\sin(m \\pi j/N)$ is:\n$$\n\\lambda_m^{(1D)} = \\frac{2}{h^2} \\left(1 - \\cos\\left(\\frac{m \\pi}{N}\\right)\\right) = \\frac{4}{h^2} \\sin^2\\left(\\frac{m \\pi}{2N}\\right)\n$$\nSumming over the $d$ dimensions, the eigenvalue for mode $\\mathbf{m}$ is:\n$$\n\\lambda_{\\mathbf{m}}^{(dD)} = \\sum_{k=1}^d \\lambda_{m_k}^{(1D)} = \\frac{4}{h^2} \\sum_{k=1}^d \\sin^2\\left(\\frac{m_k \\pi}{2N}\\right)\n$$\nThe largest eigenvalue, $\\lambda_{\\max}(-\\Delta_h)$, corresponds to the highest frequency mode, where each $m_k$ takes its maximum value, $m_k = N-1$.\n$$\n\\lambda_{\\max}(-\\Delta_h) = \\frac{4}{h^2} \\sum_{k=1}^d \\sin^2\\left(\\frac{(N-1)\\pi}{2N}\\right) = \\frac{4d}{h^2} \\sin^2\\left(\\frac{\\pi}{2} - \\frac{\\pi}{2N}\\right) = \\frac{4d}{h^2} \\cos^2\\left(\\frac{\\pi}{2N}\\right)\n$$\nSubstituting $N=L/h$, we have $\\lambda_{\\max}(-\\Delta_h) = \\frac{4d}{h^2} \\cos^2\\left(\\frac{\\pi h}{2L}\\right)$. The problem requires a final answer in terms of only $h$, $d$, and $\\kappa$. This implies the stability bound must be independent of the domain size $L$. A universally valid stability bound must hold for any domain size $L$. We must therefore consider the worst-case scenario, which corresponds to the largest possible value of $\\lambda_{\\max}$. The supremum of $\\lambda_{\\max}$ over all possible values of $L$ is achieved as $h/L \\to 0$:\n$$\n\\sup_{L>0} \\lambda_{\\max}(-\\Delta_h) = \\sup_{L>0} \\frac{4d}{h^2} \\cos^2\\left(\\frac{\\pi h}{2L}\\right) = \\frac{4d}{h^2}\n$$\nTherefore, the relevant largest eigenvalue of the system matrix $A=M_{\\ell}^{-1}K$ is:\n$$\n\\lambda_{\\max}(M_{\\ell}^{-1}K) = \\kappa \\cdot \\left(\\frac{4d}{h^2}\\right) = \\frac{4d\\kappa}{h^2}\n$$\nSubstituting this into the stability condition for $\\Delta t$ gives the maximal time step:\n$$\n\\Delta t_{\\max} = \\frac{2}{\\lambda_{\\max}(M_{\\ell}^{-1}K)} = \\frac{2}{4d\\kappa/h^2} = \\frac{2h^2}{4d\\kappa} = \\frac{h^2}{2d\\kappa}\n$$\nThis is the well-known CFL-type condition for the explicit Euler discretization of the diffusion equation.\n\nFor comparison, consider the implicit backward Euler method: $\\mathbf{U}^{n+1} = \\mathbf{U}^{n} - \\Delta t\\,A\\,\\mathbf{U}^{n+1}$. The update is given by $(I + \\Delta t\\,A)\\,\\mathbf{U}^{n+1} = \\mathbf{U}^{n}$. The amplification matrix is $G_{BE} = (I + \\Delta t\\,A)^{-1}$. Its eigenvalues are $g_k = (1 + \\Delta t\\,\\lambda_k)^{-1}$. The stability condition $|g_k| \\le 1$ translates to:\n$$\n\\left| \\frac{1}{1 + \\Delta t\\,\\lambda_k} \\right| \\le 1\n$$\nSince $\\Delta t > 0$ and all eigenvalues $\\lambda_k$ of $A$ are non-negative, the denominator $1 + \\Delta t\\,\\lambda_k$ is always greater than or equal to $1$. Consequently, the inequality $|g_k| \\le 1$ is satisfied for any choice of $\\Delta t > 0$. The backward Euler method is therefore unconditionally stable for this problem and does not impose a stability-based restriction on the time step size.", "answer": "$$\n\\boxed{\\frac{h^2}{2d\\kappa}}\n$$", "id": "2545016"}, {"introduction": "Beyond the time step constraint, the choice between explicit and implicit procedures influences the formulation of the discrete system itself, most notably the mass matrix. This exercise delves into the practical trade-off between the computationally inexpensive lumped mass matrix, common in explicit codes, and the theoretically more accurate consistent mass matrix. You will quantify the effect of this choice by calculating the resulting error in the modal frequencies of a simple vibrating bar, providing direct insight into the compromise between efficiency and dynamic fidelity [@problem_id:2545080].", "problem": "A uniform, prismatic, linearly elastic bar of length $L$, cross-sectional area $A$, Young's modulus $E$, and mass density $\\rho$ undergoes small longitudinal vibrations with both ends fixed. The governing strong form is the axial wave equation $ \\rho A \\,\\ddot{u}(x,t) - \\frac{\\partial}{\\partial x}\\big(EA\\, \\frac{\\partial u}{\\partial x}(x,t)\\big) = 0 $ for $x \\in (0,L)$, with essential boundary conditions $u(0,t)=0$ and $u(L,t)=0$. Consider the standard Galerkin Finite Element Method (FEM) spatial semi-discretization using continuous, piecewise-linear shape functions over a uniform partition of the bar into $N=3$ equal elements. Impose the essential boundary conditions exactly, so that the only global unknowns are the interior nodal displacements.\n\nAs context, many implicit time integration procedures (for example, the Newmark family) use the consistent mass matrix, whereas many explicit procedures (for example, central-difference schemes) use a diagonal, lumped mass matrix to avoid solving linear systems. The choice of mass matrix changes the discrete modal properties.\n\nStarting from the weak form obtained by multiplying the strong form by a test function and integrating over $(0,L)$ with integration by parts on the stiffness term, and using the standard two-node linear shape functions on each element, perform the following steps without assuming any special orthogonality beyond what follows from the uniform mesh and imposed boundary conditions:\n- Derive the element stiffness and mass matrices and assemble the global semi-discrete system in the form $K\\,\\mathbf{u}(t) + M\\,\\ddot{\\mathbf{u}}(t) = \\mathbf{0}$ for the $N=3$-element mesh after applying boundary conditions, for both the consistent mass matrix $M^{(C)}$ and a fully diagonal lumped mass matrix $M^{(L)}$ obtained by exact row-sum lumping of the consistent mass at the element level.\n- Form the corresponding generalized eigenvalue problems $K\\,\\boldsymbol{\\phi}^{(C)}=\\omega^{2}\\,M^{(C)}\\,\\boldsymbol{\\phi}^{(C)}$ and $K\\,\\boldsymbol{\\phi}^{(L)}=\\omega^{2}\\,M^{(L)}\\,\\boldsymbol{\\phi}^{(L)}$.\n- Compute the first $2$ discrete angular frequencies $\\omega_{1}^{(C)}$, $\\omega_{2}^{(C)}$ (consistent mass) and $\\omega_{1}^{(L)}$, $\\omega_{2}^{(L)}$ (lumped mass) in closed form.\n\nDefine the relative frequency error for mode $p \\in \\{1,2\\}$ as\n$$\n\\varepsilon_{p} \\equiv \\frac{\\omega_{p}^{(L)} - \\omega_{p}^{(C)}}{\\omega_{p}^{(C)}},\n$$\nand the maximum magnitude of the relative frequency error over the first two discrete modes as\n$$\n\\mathcal{E}_{\\max} \\equiv \\max\\{|\\varepsilon_{1}|,\\,|\\varepsilon_{2}|\\}.\n$$\n\nCompute $\\mathcal{E}_{\\max}$ as a single closed-form analytic expression in terms of radicals and integers only. Do not introduce any numerical values for $E$, $\\rho$, $A$, or $L$; your final expression must be independent of material and geometric parameters. Express the answer as a pure number without units. No rounding is required.", "solution": "The problem statement is critically examined and found to be valid. It is scientifically grounded, well-posed, objective, and contains all necessary information for a unique solution. The problem is a standard exercise in the finite element analysis of structural dynamics.\n\nThe strong form of the governing equation for longitudinal vibrations of a uniform bar is\n$$ \\rho A \\frac{\\partial^2 u}{\\partial t^2}(x,t) - \\frac{\\partial}{\\partial x}\\left(EA \\frac{\\partial u}{\\partial x}(x,t)\\right) = 0, \\quad x \\in (0,L) $$\nwith boundary conditions $u(0,t)=0$ and $u(L,t)=0$. The corresponding weak form is obtained by multiplying by a test function $v(x)$ and integrating by parts:\n$$ \\int_0^L \\rho A v \\ddot{u} \\,dx + \\int_0^L EA \\frac{\\partial v}{\\partial x} \\frac{\\partial u}{\\partial x} \\,dx = 0 $$\nThe solution $u(x,t)$ is approximated as $u(x,t) \\approx \\sum_{i} N_i(x) u_i(t)$, where $N_i(x)$ are the shape functions. This semi-discretization leads to the matrix system $M \\ddot{\\mathbf{u}} + K \\mathbf{u} = \\mathbf{0}$.\n\nWe first derive the element stiffness and mass matrices for a standard $2$-node linear bar element of length $h$. The shape functions in local coordinates $\\xi \\in [0,h]$ are $N_1(\\xi) = 1 - \\frac{\\xi}{h}$ and $N_2(\\xi) = \\frac{\\xi}{h}$. Their derivatives are $N_1'(\\xi) = -\\frac{1}{h}$ and $N_2'(\\xi) = \\frac{1}{h}$.\n\nThe element stiffness matrix $k_e$ has entries $k_{ij} = \\int_0^h EA N_i' N_j' d\\xi$.\n$$ k_e = \\int_0^h EA \\begin{pmatrix} (-1/h)^2 & (-1/h)(1/h) \\\\ (1/h)(-1/h) & (1/h)^2 \\end{pmatrix} d\\xi = \\frac{EA}{h} \\begin{pmatrix} 1 & -1 \\\\ -1 & 1 \\end{pmatrix} $$\n\nThe element consistent mass matrix $m_e^{(C)}$ has entries $m_{ij}^{(C)} = \\int_0^h \\rho A N_i N_j d\\xi$.\n$$ m_{11}^{(C)} = \\rho A \\int_0^h (1-\\frac{\\xi}{h})^2 d\\xi = \\frac{\\rho A h}{3} $$\n$$ m_{12}^{(C)} = \\rho A \\int_0^h (1-\\frac{\\xi}{h})(\\frac{\\xi}{h}) d\\xi = \\frac{\\rho A h}{6} $$\n$$ m_e^{(C)} = \\frac{\\rho A h}{6} \\begin{pmatrix} 2 & 1 \\\\ 1 & 2 \\end{pmatrix} $$\n\nThe element lumped mass matrix $m_e^{(L)}$ is obtained by summing the rows of $m_e^{(C)}$ and placing the sums on the diagonal. The sum of each row is $\\frac{\\rho A h}{6}(2+1) = \\frac{\\rho A h}{2}$.\n$$ m_e^{(L)} = \\frac{\\rho A h}{2} \\begin{pmatrix} 1 & 0 \\\\ 0 & 1 \\end{pmatrix} $$\n\nThe bar is discretized into $N=3$ equal elements, so the element length is $h=L/3$. There are $4$ nodes, indexed $0, 1, 2, 3$. The boundary conditions $u(0,t)=0$ and $u(L,t)=0$ mean that the displacements at node $0$ and node $3$, $u_0$ and $u_3$, are zero. The unknown degrees of freedom are the displacements at the interior nodes $1$ and $2$, $\\mathbf{u} = [u_1, u_2]^T$. We assemble the global matrices and then extract the $2 \\times 2$ sub-system corresponding to these free nodes.\n\nAssembly of the global stiffness matrix $K$:\n$$ K = \\frac{EA}{h} \\begin{pmatrix} 1+1 & -1 \\\\ -1 & 1+1 \\end{pmatrix} = \\frac{3EA}{L} \\begin{pmatrix} 2 & -1 \\\\ -1 & 2 \\end{pmatrix} $$\n\nAssembly of the global consistent mass matrix $M^{(C)}$:\n$$ M^{(C)} = \\frac{\\rho A h}{6} \\begin{pmatrix} 2+2 & 1 \\\\ 1 & 2+2 \\end{pmatrix} = \\frac{\\rho A (L/3)}{6} \\begin{pmatrix} 4 & 1 \\\\ 1 & 4 \\end{pmatrix} = \\frac{\\rho A L}{18} \\begin{pmatrix} 4 & 1 \\\\ 1 & 4 \\end{pmatrix} $$\n\nAssembly of the global lumped mass matrix $M^{(L)}$:\n$$ M^{(L)} = \\frac{\\rho A h}{2} \\begin{pmatrix} 1+1 & 0 \\\\ 0 & 1+1 \\end{pmatrix} = \\frac{\\rho A (L/3)}{2} \\begin{pmatrix} 2 & 0 \\\\ 0 & 2 \\end{pmatrix} = \\frac{\\rho A L}{3} \\begin{pmatrix} 1 & 0 \\\\ 0 & 1 \\end{pmatrix} $$\n\nWe now solve the generalized eigenvalue problems $K \\boldsymbol{\\phi} = \\omega^2 M \\boldsymbol{\\phi}$, which is $\\det(K - \\omega^2 M) = 0$.\n\nFor consistent mass, $M = M^{(C)}$, the problem is $\\det(K - (\\omega^{(C)})^2 M^{(C)}) = 0$. Let $\\lambda_C = (\\omega^{(C)})^2$.\n$$ \\det\\left( \\frac{3EA}{L} \\begin{pmatrix} 2 & -1 \\\\ -1 & 2 \\end{pmatrix} - \\lambda_C \\frac{\\rho A L}{18} \\begin{pmatrix} 4 & 1 \\\\ 1 & 4 \\end{pmatrix} \\right) = 0 $$\nLet us define a constant $C_0 = \\frac{54E}{\\rho L^2}$. The determinant becomes:\n$$ \\det\\left( \\frac{C_0}{18} \\frac{\\rho A L}{3} \\begin{pmatrix} 2 & -1 \\\\ -1 & 2 \\end{pmatrix} - \\lambda_C \\frac{\\rho A L}{18} \\begin{pmatrix} 4 & 1 \\\\ 1 & 4 \\end{pmatrix} \\right) = 0 $$\n$$ \\det\\left( C_0 \\begin{pmatrix} 2 & -1 \\\\ -1 & 2 \\end{pmatrix} - \\lambda_C \\begin{pmatrix} 4 & 1 \\\\ 1 & 4 \\end{pmatrix} \\right) = 0 $$\n$$ \\det \\begin{pmatrix} 2C_0 - 4\\lambda_C & -C_0 - \\lambda_C \\\\ -C_0 - \\lambda_C & 2C_0 - 4\\lambda_C \\end{pmatrix} = 0 $$\nThis yields $(2C_0 - 4\\lambda_C)^2 - (C_0 + \\lambda_C)^2 = 0$, which gives two solutions:\n1. $2C_0 - 4\\lambda_C = C_0 + \\lambda_C \\implies C_0 = 5\\lambda_C \\implies \\lambda_C = C_0/5$.\n2. $2C_0 - 4\\lambda_C = -(C_0 + \\lambda_C) \\implies 3C_0 = 3\\lambda_C \\implies \\lambda_C = C_0$.\nThe eigenvalues are $(\\omega_{1}^{(C)})^2 = \\frac{C_0}{5} = \\frac{54}{5} \\frac{E}{\\rho L^2}$ and $(\\omega_{2}^{(C)})^2 = C_0 = 54 \\frac{E}{\\rho L^2}$.\n\nFor lumped mass, $M = M^{(L)}$, the problem is $\\det(K - (\\omega^{(L)})^2 M^{(L)}) = 0$. Let $\\lambda_L = (\\omega^{(L)})^2$.\n$$ \\det\\left( \\frac{3EA}{L} \\begin{pmatrix} 2 & -1 \\\\ -1 & 2 \\end{pmatrix} - \\lambda_L \\frac{\\rho A L}{3} \\begin{pmatrix} 1 & 0 \\\\ 0 & 1 \\end{pmatrix} \\right) = 0 $$\nThis is a standard eigenvalue problem for the matrix $K$. Let $\\mu$ be the eigenvalues of $\\begin{pmatrix} 2 & -1 \\\\ -1 & 2 \\end{pmatrix}$.\n$\\det \\begin{pmatrix} 2-\\mu & -1 \\\\ -1 & 2-\\mu \\end{pmatrix} = (2-\\mu)^2 - 1 = 0 \\implies 2-\\mu = \\pm 1$.\nThe eigenvalues are $\\mu_1 = 1$ and $\\mu_2 = 3$.\nThe relationship is $\\frac{3EA}{L} \\mu = \\lambda_L \\frac{\\rho A L}{3}$, so $\\lambda_L = \\mu \\frac{9E}{\\rho L^2}$.\nThe eigenvalues are $(\\omega_{1}^{(L)})^2 = 1 \\cdot \\frac{9E}{\\rho L^2} = 9 \\frac{E}{\\rho L^2}$ and $(\\omega_{2}^{(L)})^2 = 3 \\cdot \\frac{9E}{\\rho L^2} = 27 \\frac{E}{\\rho L^2}$.\n\nNow we compute the angular frequencies by taking the square root. All physical parameters are positive.\n$\\omega_{1}^{(C)} = \\sqrt{\\frac{54}{5} \\frac{E}{\\rho L^2}}$, $\\omega_{2}^{(C)} = \\sqrt{54 \\frac{E}{\\rho L^2}}$\n$\\omega_{1}^{(L)} = \\sqrt{9 \\frac{E}{\\rho L^2}} = 3 \\sqrt{\\frac{E}{\\rho L^2}}$, $\\omega_{2}^{(L)} = \\sqrt{27 \\frac{E}{\\rho L^2}}$\n\nThe relative frequency error for mode $p$ is $\\varepsilon_{p} = \\frac{\\omega_{p}^{(L)} - \\omega_{p}^{(C)}}{\\omega_{p}^{(C)}} = \\frac{\\omega_{p}^{(L)}}{\\omega_{p}^{(C)}} - 1$.\nFor mode $p=1$:\n$$ \\frac{\\omega_{1}^{(L)}}{\\omega_{1}^{(C)}} = \\frac{\\sqrt{9}}{\\sqrt{54/5}} = \\sqrt{\\frac{9 \\cdot 5}{54}} = \\sqrt{\\frac{45}{54}} = \\sqrt{\\frac{5}{6}} $$\n$$ \\varepsilon_{1} = \\sqrt{\\frac{5}{6}} - 1 $$\nFor mode $p=2$:\n$$ \\frac{\\omega_{2}^{(L)}}{\\omega_{2}^{(C)}} = \\frac{\\sqrt{27}}{\\sqrt{54}} = \\sqrt{\\frac{27}{54}} = \\sqrt{\\frac{1}{2}} = \\frac{1}{\\sqrt{2}} $$\n$$ \\varepsilon_{2} = \\frac{1}{\\sqrt{2}} - 1 $$\nBoth errors are negative, as expected, because mass lumping reduces the discrete frequencies.\n\nWe need to compute $\\mathcal{E}_{\\max} = \\max\\{|\\varepsilon_{1}|,\\,|\\varepsilon_{2}|\\}$.\n$|\\varepsilon_1| = \\left|\\sqrt{\\frac{5}{6}} - 1\\right| = 1 - \\sqrt{\\frac{5}{6}}$.\n$|\\varepsilon_2| = \\left|\\frac{1}{\\sqrt{2}} - 1\\right| = 1 - \\frac{1}{\\sqrt{2}}$.\nTo compare these values, we compare $\\sqrt{5/6}$ and $1/\\sqrt{2}$. Squaring both gives $5/6$ and $1/2$.\nSince $\\frac{5}{6} > \\frac{1}{2}$ (as $0.833... > 0.5$), it follows that $\\sqrt{\\frac{5}{6}} > \\frac{1}{\\sqrt{2}}$.\nThis implies $1 - \\sqrt{\\frac{5}{6}} < 1 - \\frac{1}{\\sqrt{2}}$.\nTherefore, $|\\varepsilon_1| < |\\varepsilon_2|$, and the maximum error is $|\\varepsilon_2|$.\n$$ \\mathcal{E}_{\\max} = |\\varepsilon_2| = 1 - \\frac{1}{\\sqrt{2}} = 1 - \\frac{\\sqrt{2}}{2} = \\frac{2 - \\sqrt{2}}{2} $$\nThis expression is a pure number, independent of the material and geometric parameters, as required.", "answer": "$$\n\\boxed{\\frac{2 - \\sqrt{2}}{2}}\n$$", "id": "2545080"}, {"introduction": "The true distinction between explicit and implicit methods often emerges in complex, nonlinear problems where stability is not merely a question of time step size but of the fundamental algorithm's ability to handle physical instabilities. This advanced, code-based practice explores such a scenario: the simulation of material damage and strain-softening, which can lead to severe numerical challenges. You will implement both an explicit and an implicit procedure to discover how the explicit approach can exhibit pathological mesh-dependence, while the implicit scheme provides a robust and convergent solution, illustrating a key reason for its use in complex material modeling [@problem_id:2545077].", "problem": "Consider a one-dimensional bar of length $L$ and cross-sectional area $A$ undergoing quasi-static uniaxial tension, modeled by the Finite Element Method (FEM). Let the bar be partitioned into $N$ equal two-node linear elements of length $h = L/N$, with $N+1$ nodes. The left end at $x=0$ is fixed ($u(0,t)=0$), and the right end at $x=L$ is subjected to a prescribed displacement $u(L,t) = \\bar{u}(t)$ that increases monotonically in pseudo-time $t \\in [0,1]$ according to $\\bar{u}(t) = u_{\\mathrm{final}} \\, t$. Assume dimensionless units for all quantities in this benchmark.\n\nConstitutive behavior is linear elastic with scalar isotropic damage: the Cauchy stress in each element is $\\sigma = (1-d) \\, E \\, \\varepsilon$, where $E$ is Young's modulus, $\\varepsilon$ is the axial strain (constant per element for linear shape functions), and $d \\in [0,1]$ is the internal damage variable ($d=0$ undamaged, $d=1$ fully damaged). Damage evolves according to a viscous regularized rate law driven by the elastic energy release rate. Define the elastic energy release rate per unit volume as $Y = \\tfrac{1}{2} E \\, \\varepsilon^2$. The local damage driving threshold is $Y_c(d) = Y_{0,i} \\, (1 - \\beta \\, d)$ for element index $i \\in \\{0,\\dots,N-1\\}$, where $Y_{0,i}$ is the element-wise initial threshold including a deterministic small material imperfection, and $\\beta>0$ is a softening slope parameter. Use $Y_{0,i} = Y_0 \\, \\bigl( 1 + \\epsilon_{\\mathrm{imp}} \\, \\sin( 2\\pi \\, (i + \\tfrac{1}{2})/N ) \\bigr)$, with a small imperfection amplitude $\\epsilon_{\\mathrm{imp}} \\ll 1$. The rate-dependent damage flow rule is\n$$\n\\eta \\, \\dot{d} = \\langle Y - Y_c(d) \\rangle_{+}, \\quad d \\in [0,1], \\quad \\dot{d} \\ge 0,\n$$\nwhere $\\eta>0$ is the viscosity (regularization) parameter, the Macaulay bracket $\\langle \\cdot \\rangle_{+}$ denotes the positive part, and the inequality $\\dot{d}\\ge 0$ enforces irreversibility. The weak form of equilibrium at each pseudo-time is the standard virtual work statement for the bar with stress $\\sigma = (1-d) E \\varepsilon$, leading to the assembled global linear system\n$$\n\\mathbf{K}(\\mathbf{d}) \\, \\mathbf{u} = \\mathbf{f},\n$$\nwhere $\\mathbf{K}(\\mathbf{d})$ is the damage-dependent global stiffness, $\\mathbf{u}$ is the nodal displacement vector, and $\\mathbf{f}$ represents external nodal loads equivalent to the imposed displacement boundary conditions. For the uniform bar without body forces, one may assemble $\\mathbf{K}(\\mathbf{d})$ from elemental contributions $\\mathbf{K}_e(d_e) = \\dfrac{(1 - d_e) \\, E \\, A}{h} \\begin{bmatrix} 1 & -1 \\\\ -1 & 1 \\end{bmatrix}$.\n\nTwo time-integration procedures for the damage evolution are to be compared:\n\n- An explicit staggered procedure that advances $d$ using a forward Euler update at each pseudo-time step of size $\\Delta t$ based on strains from the previous time step, and then solves the linear equilibrium with the updated $\\mathbf{K}(\\mathbf{d})$ to obtain the new displacement field consistent with the imposed boundary conditions.\n\n- An implicit procedure that, at each pseudo-time step, solves for the displacement and the updated damage in a coupled manner using a backward Euler update of the damage flow rule, iterated to convergence (e.g., by fixed-point or Newton iteration on the coupled system), so that the damage and displacement are consistent at the end of the time step.\n\nYour task is to implement both procedures for the following benchmark in strictly dimensionless form, starting from the above fundamental definitions and the principle of virtual work. Use one Gauss point per element. Use a uniform cross-section and material, with the following parameters:\n- $L = 1$,\n- $A = 1$,\n- $E = 1$,\n- $Y_0 = 0.03$,\n- $\\beta = 1$,\n- $\\eta = 0.01$,\n- $\\epsilon_{\\mathrm{imp}} = 10^{-3}$,\n- $u_{\\mathrm{final}} = 0.3$.\n\nFor each time step, compute the global reaction at the loaded end $x=L$ as the nodal reaction force required to enforce the displacement boundary condition; in the assembled system without body forces, this is the product of the full assembled stiffness row corresponding to the loaded node with the converged displacement vector. Track the reaction force sequence $\\{F_n\\}_{n=0}^{N_t}$ for both explicit and implicit procedures, where $N_t = 1/\\Delta t$.\n\nTo quantitatively compare the procedures, compute for each procedure:\n1. The peak reaction force $F_{\\max} = \\max_{0 \\le n \\le N_t} F_n$.\n2. The oscillation excess\n$$\n\\gamma = \\sum_{n=0}^{N_t-1} \\left| F_{n+1} - F_n \\right| \\;-\\; \\left( (F_{\\max} - F_0) + (F_{\\max} - F_{N_t}) \\right),\n$$\nwhich is zero for a perfectly unimodal monotone-increase-then-monotone-decrease response and positive when mesh-dependent or time-integration-induced oscillations occur.\n\nDesign a small test suite that reveals mesh-dependent instability in the explicit staggered procedure and demonstrates stabilization by the implicit regularization. Use the following three test cases, each defined by $(N, \\Delta t)$:\n- Test $1$: $(N, \\Delta t) = (16, 0.005)$,\n- Test $2$: $(N, \\Delta t) = (64, 0.005)$,\n- Test $3$: $(N, \\Delta t) = (16, 0.010)$.\n\nFor each test case, run both procedures over $t \\in [0,1]$ with $\\bar{u}(t) = u_{\\mathrm{final}} \\, t$. Your program must output a single line containing a list of three items, one per test case, where each item is the list $[\\gamma_{\\mathrm{explicit}}, \\gamma_{\\mathrm{implicit}}, F_{\\max,\\mathrm{explicit}}, F_{\\max,\\mathrm{implicit}}]$ in this exact order. The output must be printed as a single line in the format $[[g_{1,E},g_{1,I},F_{1,E},F_{1,I}],[g_{2,E},g_{2,I},F_{2,E},F_{2,I}],[g_{3,E},g_{3,I},F_{3,E},F_{3,I}]]$ with decimal numbers.\n\nAll quantities are dimensionless. Angles are not used. No percentages are required. The final printout must be exactly one line with the specified list-of-lists format, containing floating-point numbers. The solution must be fully self-contained and not require any user input or external files.", "solution": "The problem requires the implementation and comparison of two numerical procedures, explicit and implicit, for solving a quasi-static uniaxial tension problem of a bar with material damage. The model is based on the Finite Element Method (FEM). This document presents the formulation and algorithmic design for the solution. All mathematical entities are rendered in LaTeX as required.\n\nFirst, we establish the problem's governing equations. The bar has length $L=1$, cross-section area $A=1$, and Young's modulus $E=1$. It is discretized into $N$ linear finite elements of equal length $h=L/N$.\n\nThe equilibrium of the discretized system is expressed by the global matrix equation:\n$$\n\\mathbf{K}(\\mathbf{d}) \\mathbf{u} = \\mathbf{f}\n$$\nwhere $\\mathbf{u}$ is the vector of $N+1$ nodal displacements, $\\mathbf{d}$ is the vector of $N$ element damage variables, $\\mathbf{K}(\\mathbf{d})$ is the $(N+1) \\times (N+1)$ global stiffness matrix, and $\\mathbf{f}$ is the vector of nodal forces. The elemental stiffness matrix for element $e$ with damage $d_e$ is:\n$$\n\\mathbf{K}_e(d_e) = \\frac{(1 - d_e) E A}{h}\n\\begin{bmatrix}\n1 & -1 \\\\\n-1 & 1\n\\end{bmatrix}\n$$\nThe boundary conditions are a fixed displacement $u_0 = 0$ at $x=0$ and a prescribed displacement $u_N = \\bar{u}(t) = u_{\\mathrm{final}} \\cdot t$ at $x=L$. We solve for the $N-1$ unknown internal nodal displacements $\\mathbf{u}_I = [u_1, \\dots, u_{N-1}]^T$. This leads to a reduced, $(N-1) \\times (N-1)$ tridiagonal linear system $\\mathbf{A} \\mathbf{u}_I = \\mathbf{b}$, where the matrix $\\mathbf{A}$ and vector $\\mathbf{b}$ depend on the current damage state $\\mathbf{d}$. The non-zero entries of $\\mathbf{A}$ are:\n$$\nA_{i,i} = \\frac{(1-d_{i-1})EA}{h} + \\frac{(1-d_{i})EA}{h}, \\quad i=1, \\dots, N-1\n$$\n$$\nA_{i,i-1} = -\\frac{(1-d_{i-1})EA}{h}, \\quad i=2, \\dots, N-1\n$$\n$$\nA_{i,i+1} = -\\frac{(1-d_{i})EA}{h}, \\quad i=1, \\dots, N-2\n$$\nThe right-hand side vector $\\mathbf{b}$ is zero except for its last component:\n$$\nb_{N-1} = \\frac{(1-d_{N-1})EA}{h} \\bar{u}(t)\n$$\nThis tridiagonal system is efficiently solvable.\n\nThe damage evolution is governed by the rate law $\\eta \\dot{d} = \\langle Y - Y_c(d) \\rangle_{+}$, where $\\eta=0.01$ is viscosity. The energy release rate is $Y = \\frac{1}{2} E \\varepsilon^2$, with strain $\\varepsilon_i = (u_{i+1} - u_i)/h$ for element $i$. The damage threshold is $Y_c(d) = Y_{0,i}(1 - \\beta d)$, with $\\beta=1$. The initial threshold $Y_{0,i}$ includes a spatial imperfection:\n$$\nY_{0,i} = Y_0 \\left( 1 + \\epsilon_{\\mathrm{imp}} \\sin\\left( \\frac{2\\pi(i + 0.5)}{N} \\right) \\right)\n$$\nwith $Y_0 = 0.03$ and $\\epsilon_{\\mathrm{imp}} = 10^{-3}$.\n\nThe simulation proceeds in discrete time steps of size $\\Delta t$ from $t=0$ to $t=1$. Let the index for the time step be $n$.\n\n**Explicit Staggered Procedure**\n\nIn this procedure, the state at time $t_{n+1}$ is computed sequentially.\n1.  **Damage Update**: The damage $d_{i,n+1}$ for each element $i$ is calculated using a forward Euler step, based on the state at $t_n$:\n    $$\n    d_{i,n+1} = d_{i,n} + \\frac{\\Delta t}{\\eta} \\left\\langle \\frac{1}{2}E \\varepsilon_{i,n}^2 - Y_{0,i}(1 - \\beta d_{i,n}) \\right\\rangle_{+}\n    $$\n    where $\\varepsilon_{i,n} = (u_{i+1,n} - u_{i,n})/h$. The updated damage is constrained to the interval $[d_{i,n}, 1]$ to ensure irreversibility and the physical limit.\n2.  **Equilibrium Solve**: With the new damage values $\\mathbf{d}_{n+1}$, the linear system for displacements at $t_{n+1}$ is assembled and solved: $\\mathbf{A}(\\mathbf{d}_{n+1}) \\mathbf{u}_{I,n+1} = \\mathbf{b}(\\mathbf{d}_{n+1}, \\bar{u}(t_{n+1}))$. This yields the internal displacements $\\mathbf{u}_{I,n+1}$. The full displacement vector is $\\mathbf{u}_{n+1} = [0, u_{1,n+1}, \\dots, u_{N-1,n+1}, \\bar{u}(t_{n+1})]^T$.\n\n**Implicit Procedure**\n\nThis procedure solves for damage and displacements at $t_{n+1}$ simultaneously using a backward Euler scheme for damage. This results in a nonlinear system at each time step, which is solved here using a fixed-point (Picard) iteration.\nFor each time step $n \\to n+1$, we iterate with index $k$:\n1.  **Initialization**: Start with an initial guess for the new damage state, e.g., $\\mathbf{d}_{n+1}^{(0)} = \\mathbf{d}_n$.\n2.  **Fixed-Point Iteration**:\n    a. **Equilibrium Solve**: Given the damage guess $\\mathbf{d}_{n+1}^{(k)}$, solve for the displacements $\\mathbf{u}_{n+1}^{(k+1)}$ by solving the linear system $\\mathbf{A}(\\mathbf{d}_{n+1}^{(k)}) \\mathbf{u}_{I,n+1}^{(k+1)} = \\mathbf{b}(\\mathbf{d}_{n+1}^{(k)}, \\bar{u}(t_{n+1}))$.\n    b. **Damage Update**: Using the computed displacements $\\mathbf{u}_{n+1}^{(k+1)}$, calculate the corresponding strains $\\varepsilon_{i,n+1}^{(k+1)}$. Then, update the damage for each element by solving the implicit equation:\n    $$\n    \\eta \\frac{d_{i,n+1}^{(k+1)} - d_{i,n}}{\\Delta t} = \\left\\langle \\frac{1}{2}E \\left(\\varepsilon_{i,n+1}^{(k+1)}\\right)^2 - Y_{0,i}(1 - \\beta d_{i,n+1}^{(k+1)}) \\right\\rangle_{+}\n    $$\n    If the driving term on the right is non-positive when evaluated with the previous damage value $d_{i,n}$, then no damage growth occurs, and $d_{i,n+1}^{(k+1)} = d_{i,n}$. Otherwise, the Macaulay bracket is active, and solving the resulting linear equation for $d_{i,n+1}^{(k+1)}$ yields:\n    $$\n    d_{i,n+1}^{(k+1)} = \\frac{d_{i,n} + \\frac{\\Delta t}{\\eta} \\left( \\frac{1}{2}E\\left(\\varepsilon_{i,n+1}^{(k+1)}\\right)^2 - Y_{0,i} \\right)}{1 - \\frac{\\Delta t}{\\eta} Y_{0,i} \\beta}\n    $$\n    The result is then constrained to the interval $[d_{i,n}, 1]$ to enforce irreversibility and the physical damage limit.\n    c. **Convergence Check**: If the change $\\|\\mathbf{d}_{n+1}^{(k+1)} - \\mathbf{d}_{n+1}^{(k)}\\|$ is smaller than a tolerance, the iteration has converged. Otherwise, set $k \\to k+1$ and repeat.\n\n**Output Calculation**\n\nAfter each successful time step integration (for either procedure), the reaction force $F_{n+1}$ at the loaded end $x=L$ is computed. From the global equilibrium equations, this force corresponds to the last row of $\\mathbf{K}\\mathbf{u}$:\n$$\nF_{n+1} = \\frac{(1 - d_{N-1, n+1}) E A}{h} (u_{N, n+1} - u_{N-1, n+1})\n$$\nThe force history $\\{F_n\\}_{n=0}^{N_t}$ is collected. The peak force $F_{\\max}$ is the maximum of this sequence. The oscillation excess $\\gamma$ is computed using its definition:\n$$\n\\gamma = \\sum_{n=0}^{N_t-1} \\left| F_{n+1} - F_n \\right| - \\left( (F_{\\max} - F_0) + (F_{\\max} - F_{N_t}) \\right)\n$$\nwhere $F_0=0$. These calculations are performed for both explicit and implicit methods for each of the three test cases specified. The expected outcome is that the explicit method will show numerical instability (large $\\gamma$) for finer meshes or larger time steps, while the implicit method remains stable.", "answer": "```python\nimport numpy as np\nfrom scipy.linalg import solve_banded\n\ndef solve():\n    \"\"\"\n    Main function to run the benchmark simulations and print the results.\n    \"\"\"\n    # Dimensionless parameters from the problem statement\n    params = {\n        'L': 1.0,\n        'A': 1.0,\n        'E': 1.0,\n        'Y0': 0.03,\n        'beta': 1.0,\n        'eta': 0.01,\n        'eps_imp': 1e-3,\n        'u_final': 0.3\n    }\n    \n    test_cases = [\n        (16, 0.005),  # Test 1\n        (64, 0.005),  # Test 2\n        (16, 0.010),  # Test 3\n    ]\n\n    all_results = []\n    for N, dt in test_cases:\n        F_hist_explicit = run_simulation(N, dt, 'explicit', params)\n        F_hist_implicit = run_simulation(N, dt, 'implicit', params)\n\n        gamma_explicit, F_max_explicit = calculate_metrics(F_hist_explicit)\n        gamma_implicit, F_max_implicit = calculate_metrics(F_hist_implicit)\n        \n        case_results = [gamma_explicit, gamma_implicit, F_max_explicit, F_max_implicit]\n        all_results.append(case_results)\n\n    # Format output as a single line string representation of a list of lists.\n    # e.g., [[val1, val2, ...], [val1, val2, ...]]\n    output_str = '[' + ','.join(['[' + ','.join(map(str, res)) + ']' for res in all_results]) + ']'\n    print(output_str)\n\n\ndef run_simulation(N, dt, method, params):\n    \"\"\"\n    Runs a single simulation for a given configuration (N, dt, method).\n    \"\"\"\n    L, A, E = params['L'], params['A'], params['E']\n    Y0, beta, eta = params['Y0'], params['beta'], params['eta']\n    eps_imp, u_final = params['eps_imp'], params['u_final']\n\n    h = L / N\n    Nt = int(round(1.0 / dt))\n\n    # Element-wise initial damage threshold\n    i_coords = np.arange(N) + 0.5\n    Y0_i = Y0 * (1 + eps_imp * np.sin(2 * np.pi * i_coords / N))\n\n    u = np.zeros(N + 1)\n    d = np.zeros(N)\n    \n    F_history = [0.0]\n\n    for n in range(Nt):\n        t_np1 = (n + 1) * dt\n        u_prescribed = u_final * t_np1\n\n        if method == 'explicit':\n            # Explicit damage update\n            eps_n = (u[1:] - u[:-1]) / h\n            Y_n = 0.5 * E * eps_n**2\n            Yc_n = Y0_i * (1 - beta * d)\n            d_dot = (1 / eta) * np.maximum(0, Y_n - Yc_n)\n            d_np1 = d + d_dot * dt\n            d_np1 = np.minimum(d_np1, 1.0) # Enforce d <= 1\n            \n            # Solve for displacement\n            u_np1 = solve_displacements(d_np1, u_prescribed, N, h, A, E)\n\n        elif method == 'implicit':\n            u_np1, d_np1 = solve_implicit_step(u, d, u_prescribed, N, h, dt, params, Y0_i)\n        \n        # Update state variables\n        u = u_np1\n        d = d_np1\n        \n        # Calculate reaction force\n        # F_np1 = (1 - d[N-1]) * E * A / h * (u[N] - u[N-1])\n        # A more stable calculation, as d[N-1] could be 1\n        stiffness_last_elem = (1 - d[N-1]) * E * A / h\n        F_np1 = stiffness_last_elem * (u_np1[N] - u_np1[N-1])\n\n        F_history.append(F_np1)\n        \n    return np.array(F_history)\n\ndef solve_displacements(d, u_prescribed, N, h, A, E):\n    \"\"\"\n    Solves the tridiagonal system for internal nodal displacements.\n    \"\"\"\n    u_np1 = np.zeros(N + 1)\n    u_np1[N] = u_prescribed\n\n    if N > 1:\n        # Assemble tridiagonal system for internal nodes (1 to N-1)\n        k_elem = (1 - d) * E * A / h\n        \n        diag = k_elem[:-1] + k_elem[1:]\n        upper_diag = -k_elem[1:-1]\n        lower_diag = -k_elem[1:-1]\n        \n        # SciPy's solve_banded format:\n        # ab[0,:] is upper diagonal (shifted)\n        # ab[1,:] is main diagonal\n        # ab[2,:] is lower diagonal (shifted)\n        ab = np.zeros((3, N - 1))\n        ab[0, 1:] = upper_diag\n        ab[1, :] = diag\n        ab[2, :-1] = lower_diag\n        \n        # Assemble RHS vector\n        b = np.zeros(N - 1)\n        b[-1] = k_elem[-1] * u_prescribed\n\n        try:\n            u_internal = solve_banded((1, 1), ab, b)\n            u_np1[1:N] = u_internal\n        except np.linalg.LinAlgError:\n            # If matrix is singular (e.g., full damage), handle gracefully.\n            # This simplified handling assumes failure propagation.\n            u_np1[1:N] = np.linspace(0, u_prescribed, N+1)[1:N]\n\n    return u_np1\n\ndef solve_implicit_step(u_n, d_n, u_prescribed, N, h, dt, params, Y0_i):\n    \"\"\"\n    Solves the coupled system for one implicit time step using fixed-point iteration.\n    \"\"\"\n    E, beta, eta = params['E'], params['beta'], params['eta']\n    \n    # Fixed-point iteration settings\n    max_iter = 100\n    tol = 1e-8\n    \n    # Initial guess\n    d_k = d_n.copy()\n    \n    for _ in range(max_iter):\n        # 1. Solve for displacements with current damage guess d_k\n        u_kp1 = solve_displacements(d_k, u_prescribed, N, h, params['A'], E)\n        \n        # 2. Update damage with new displacements u_kp1\n        eps_kp1 = (u_kp1[1:] - u_kp1[:-1]) / h\n        Y_kp1 = 0.5 * E * eps_kp1**2\n        \n        # Check damage criterion\n        g_at_dn = Y_kp1 - Y0_i * (1 - beta * d_n)\n        \n        d_kp1 = d_n.copy()\n        \n        # Find elements where damage grows\n        idx_growth = g_at_dn > 0\n        \n        if np.any(idx_growth):\n            Y0_i_g = Y0_i[idx_growth]\n            d_n_g = d_n[idx_growth]\n            Y_kp1_g = Y_kp1[idx_growth]\n\n            # Solve for d_kp1\n            # d_kp1 * (eta/dt - Y0_i*beta) = eta/dt*d_n + Y_kp1 - Y0_i\n            denom = (eta / dt) - Y0_i_g * beta\n            # Avoid division by zero, although not expected with problem params\n            denom[np.abs(denom) < 1e-12] = 1e-12\n            \n            num = (eta / dt) * d_n_g + Y_kp1_g - Y0_i_g\n            d_kp1[idx_growth] = num / denom\n        \n        # Enforce constraints\n        d_kp1 = np.maximum(d_n, np.minimum(d_kp1, 1.0))\n        \n        # 3. Check for convergence\n        if np.linalg.norm(d_kp1 - d_k) < tol * (np.linalg.norm(d_k) + tol):\n            break\n        \n        d_k = d_kp1\n\n    u_np1 = solve_displacements(d_k, u_prescribed, N, h, params['A'], E)\n    return u_np1, d_k\n\n\ndef calculate_metrics(F_history):\n    \"\"\"\n    Calculates the peak force and oscillation excess.\n    \"\"\"\n    if len(F_history) < 2:\n        return 0.0, 0.0\n\n    F_max = np.max(F_history)\n    F0 = F_history[0]\n    F_Nt = F_history[-1]\n    \n    sum_abs_diff = np.sum(np.abs(np.diff(F_history)))\n    \n    monotone_path_length = (F_max - F0) + (F_max - F_Nt)\n    \n    gamma = sum_abs_diff - monotone_path_length\n    \n    return gamma, F_max\n\nsolve()\n```", "id": "2545077"}]}