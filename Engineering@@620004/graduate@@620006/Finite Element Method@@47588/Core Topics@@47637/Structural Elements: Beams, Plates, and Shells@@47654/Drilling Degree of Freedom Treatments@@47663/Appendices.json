{"hands_on_practices": [{"introduction": "Before implementing any numerical scheme, it is crucial to understand the physical principles it must honor. This first practice establishes the theoretical foundation for a valid drilling degree of freedom stabilization by ensuring it is consistent with rigid-body mechanics. By deriving the necessary conditions for a general stabilization energy to vanish under a pure rigid-body rotation [@problem_id:2552865], you will discover why effective treatments must penalize the mismatch between the drilling rotation $\\varphi$ and the continuum spin $\\omega_z$.", "problem": "Consider a planar, linearly elastic continuum discretized by a single isoparametric finite element with nodal displacement vector $\\mathbf{d}_{u}$ (collecting all in-plane translational degrees of freedom) and an independent, scalar drilling rotation field $\\varphi(\\mathbf{x})$ interpolated by the same element shape functions $\\{N_{i}(\\mathbf{x})\\}_{i=1}^{n}$. Let the continuum (material) rotation about the out-of-plane axis be defined by $\\omega_{z}(\\mathbf{x}) = \\tfrac{1}{2}\\left(\\frac{\\partial u_{y}}{\\partial x} - \\frac{\\partial u_{x}}{\\partial y}\\right)$, where $(u_{x},u_{y})$ are the in-plane displacement components. The element is stabilized by the following quadratic energy density, constant over the element domain $\\Omega^{e}$:\n$$\nw_{\\mathrm{stab}}(\\mathbf{x}) \\;=\\; \\tfrac{1}{2}\\,a\\,\\varphi^{2} \\;+\\; \\tfrac{1}{2}\\,b\\,\\varphi\\,\\omega_{z} \\;+\\; \\tfrac{1}{2}\\,c\\,\\omega_{z}^{2} \\;+\\; \\tfrac{1}{2}\\,d\\,\\nabla\\varphi\\cdot\\nabla\\varphi,\n$$\nwith constant stabilization coefficients $a$, $b$, $c$, and $d$ (independent of $\\mathbf{x}$). The total stabilization energy is $U_{\\mathrm{stab}}^{e} = \\int_{\\Omega^{e}} w_{\\mathrm{stab}}\\,\\mathrm{d}\\Omega$. Assume free boundary conditions (no external tractions or couples) and that the elastic membrane energy vanishes for a rigid-body motion.\n\nStarting from the principle of virtual work and the definition of $\\omega_{z}$, derive the algebraic conditions on the constants $a$, $b$, and $c$ such that, for any uniform rigid-body rotation field of the form $\\mathbf{u}(\\mathbf{x}) = \\theta\\,\\mathbf{e}_{z}\\times\\mathbf{x}$ with constant $\\theta \\in \\mathbb{R}$ and with the drilling field set to the same uniform value $\\varphi(\\mathbf{x})=\\theta$, the element produces zero internal nodal forces and zero internal nodal moments from $U_{\\mathrm{stab}}^{e}$. You may take $d$ as arbitrary, and you may assume sufficient regularity to perform standard integrations by parts.\n\nExpress your final answer as the ratio vector $(a:b:c)$, normalized so that $a=1$, and present it as a single row matrix. No rounding is required, and no units are needed. The final answer must be a single analytic expression.", "solution": "The problem requires the derivation of conditions on the stabilization parameters $a$, $b$, and $c$ such that a single finite element produces no internal nodal forces or moments when subjected to a rigid-body rotation. The starting point for this analysis is the principle of virtual work applied to the given stabilization energy, $U_{\\mathrm{stab}}^{e}$.\n\nThe stabilization energy is given by $U_{\\mathrm{stab}}^{e} = \\int_{\\Omega^{e}} w_{\\mathrm{stab}}\\,\\mathrm{d}\\Omega$, with the energy density:\n$$\nw_{\\mathrm{stab}}(\\mathbf{x}) = \\tfrac{1}{2}\\,a\\,\\varphi^{2} + \\tfrac{1}{2}\\,b\\,\\varphi\\,\\omega_{z} + \\tfrac{1}{2}\\,c\\,\\omega_{z}^{2} + \\tfrac{1}{2}\\,d\\,\\nabla\\varphi\\cdot\\nabla\\varphi\n$$\nThe internal nodal forces and moments are work-conjugate to the nodal degrees of freedom and are obtained from the first variation of the energy, $\\delta U_{\\mathrm{stab}}^{e}$.\n$$\n\\delta U_{\\mathrm{stab}}^{e} = \\int_{\\Omega^{e}} \\delta w_{\\mathrm{stab}}\\,\\mathrm{d}\\Omega\n$$\nThe variation of the energy density is:\n$$\n\\delta w_{\\mathrm{stab}} = \\frac{\\partial w_{\\mathrm{stab}}}{\\partial \\varphi} \\delta\\varphi + \\frac{\\partial w_{\\mathrm{stab}}}{\\partial \\omega_z} \\delta\\omega_z + \\frac{\\partial w_{\\mathrm{stab}}}{\\partial(\\nabla\\varphi)} \\cdot \\delta(\\nabla\\varphi)\n$$\nComputing the partial derivatives of $w_{\\mathrm{stab}}$:\n$$\n\\frac{\\partial w_{\\mathrm{stab}}}{\\partial \\varphi} = a\\varphi + \\tfrac{1}{2}b\\omega_z\n$$\n$$\n\\frac{\\partial w_{\\mathrm{stab}}}{\\partial \\omega_z} = \\tfrac{1}{2}b\\varphi + c\\omega_z\n$$\n$$\n\\frac{\\partial w_{\\mathrm{stab}}}{\\partial(\\nabla\\varphi)} = d\\nabla\\varphi\n$$\nSubstituting these into the expression for $\\delta U_{\\mathrm{stab}}^{e}$:\n$$\n\\delta U_{\\mathrm{stab}}^{e} = \\int_{\\Omega^{e}} \\left[ (a\\varphi + \\tfrac{1}{2}b\\omega_z)\\delta\\varphi + (\\tfrac{1}{2}b\\varphi + c\\omega_z)\\delta\\omega_z + d\\nabla\\varphi \\cdot \\nabla(\\delta\\varphi) \\right] \\mathrm{d}\\Omega\n$$\nThe fields $\\mathbf{u}=(u_x, u_y)$ and $\\varphi$ are interpolated from their nodal values using shape functions $N_i(\\mathbf{x})$:\n$$\n\\mathbf{u}(\\mathbf{x}) = \\sum_{i=1}^{n} N_i(\\mathbf{x}) \\mathbf{d}_{u,i} \\quad \\text{and} \\quad \\varphi(\\mathbf{x}) = \\sum_{i=1}^{n} N_i(\\mathbf{x}) d_{\\varphi,i}\n$$\nwhere $\\mathbf{d}_{u,i} = (d_{u_x,i}, d_{u_y,i})^T$ and $d_{\\varphi,i}$ are the nodal DOFs at node $i$. The variations of the fields are related to virtual nodal displacements:\n$$\n\\delta\\varphi = \\sum_{i=1}^{n} N_i \\delta d_{\\varphi,i} \\quad \\text{and} \\quad \\nabla(\\delta\\varphi) = \\sum_{i=1}^{n} \\nabla N_i \\delta d_{\\varphi,i}\n$$\nThe variation of the continuum rotation $\\omega_z = \\tfrac{1}{2}(\\partial_x u_y - \\partial_y u_x)$ is:\n$$\n\\delta\\omega_z = \\tfrac{1}{2} \\left( \\frac{\\partial(\\delta u_y)}{\\partial x} - \\frac{\\partial(\\delta u_x)}{\\partial y} \\right) = \\tfrac{1}{2} \\sum_{i=1}^{n} \\left( \\frac{\\partial N_i}{\\partial x} \\delta d_{u_y,i} - \\frac{\\partial N_i}{\\partial y} \\delta d_{u_x,i} \\right)\n$$\nSubstituting these into the expression for $\\delta U_{\\mathrm{stab}}^{e}$ allows us to identify the internal nodal forces and moments. The internal virtual work is expressed as $\\delta U_{\\mathrm{stab}}^{e} = \\sum_{i=1}^{n} (\\mathbf{f}_{i,\\text{int}} \\cdot \\delta \\mathbf{d}_{u,i} + m_{i,\\text{int}} \\delta d_{\\varphi,i})$. The nodal force and moment at node $i$ are the respective coefficients of $\\delta\\mathbf{d}_{u,i}$ and $\\delta d_{\\varphi,i}$:\n$$\nf_{u_x,i,\\text{int}} = \\int_{\\Omega^{e}} - \\tfrac{1}{2} (\\tfrac{1}{2}b\\varphi + c\\omega_z) \\frac{\\partial N_i}{\\partial y} \\mathrm{d}\\Omega\n$$\n$$\nf_{u_y,i,\\text{int}} = \\int_{\\Omega^{e}} \\tfrac{1}{2} (\\tfrac{1}{2}b\\varphi + c\\omega_z) \\frac{\\partial N_i}{\\partial x} \\mathrm{d}\\Omega\n$$\n$$\nm_{\\varphi,i,\\text{int}} = \\int_{\\Omega^{e}} \\left[ (a\\varphi + \\tfrac{1}{2}b\\omega_z) N_i + d\\nabla\\varphi \\cdot \\nabla N_i \\right] \\mathrm{d}\\Omega\n$$\nThe problem requires these internal forces and moments to be zero when evaluated for a rigid-body rotation. The specified rigid-body rotation is given by $\\mathbf{u}(\\mathbf{x}) = \\theta\\,\\mathbf{e}_{z}\\times\\mathbf{x}$ and $\\varphi(\\mathbf{x})=\\theta$ for a constant $\\theta$.\nLet $\\mathbf{x} = (x, y, 0)$. The displacement field is $\\mathbf{u}(x,y) = (-\\theta y, \\theta x)$.\nWe evaluate the relevant kinematic quantities for this motion:\n1.  The drilling rotation is constant: $\\varphi(\\mathbf{x}) = \\theta$.\n2.  The gradient of the drilling rotation is zero: $\\nabla\\varphi = \\mathbf{0}$.\n3.  The continuum rotation is:\n$$\n\\omega_z = \\tfrac{1}{2}\\left(\\frac{\\partial u_{y}}{\\partial x} - \\frac{\\partial u_{x}}{\\partial y}\\right) = \\tfrac{1}{2}\\left(\\frac{\\partial(\\theta x)}{\\partial x} - \\frac{\\partial(-\\theta y)}{\\partial y}\\right) = \\tfrac{1}{2}(\\theta - (-\\theta)) = \\theta\n$$\nNow, substitute these values ($\\varphi=\\theta$, $\\omega_z=\\theta$, $\\nabla\\varphi=\\mathbf{0}$) into the expressions for the internal nodal forces and moments:\n$$\nf_{u_x,i,\\text{int}} = \\int_{\\Omega^{e}} - \\tfrac{1}{2} (\\tfrac{1}{2}b\\theta + c\\theta) \\frac{\\partial N_i}{\\partial y} \\mathrm{d}\\Omega = -\\tfrac{\\theta}{2}(\\tfrac{b}{2} + c) \\int_{\\Omega^{e}} \\frac{\\partial N_i}{\\partial y} \\mathrm{d}\\Omega\n$$\n$$\nf_{u_y,i,\\text{int}} = \\int_{\\Omega^{e}} \\tfrac{1}{2} (\\tfrac{1}{2}b\\theta + c\\theta) \\frac{\\partial N_i}{\\partial x} \\mathrm{d}\\Omega = \\tfrac{\\theta}{2}(\\tfrac{b}{2} + c) \\int_{\\Omega^{e}} \\frac{\\partial N_i}{\\partial x} \\mathrm{d}\\Omega\n$$\n$$\nm_{\\varphi,i,\\text{int}} = \\int_{\\Omega^{e}} \\left[ (a\\theta + \\tfrac{1}{2}b\\theta) N_i + d(\\mathbf{0}) \\cdot \\nabla N_i \\right] \\mathrm{d}\\Omega = \\theta(a + \\tfrac{b}{2}) \\int_{\\Omega^{e}} N_i \\mathrm{d}\\Omega\n$$\nFor these forces and moments to be zero for any element (i.e., for any valid set of shape functions $N_i$) and for any non-zero rotation $\\theta$, the constant coefficients multiplying the integrals must be zero. The integrals $\\int \\partial_y N_i d\\Omega$, $\\int \\partial_x N_i d\\Omega$, and $\\int N_i d\\Omega$ are in general non-zero.\nThis leads to two independent algebraic conditions on the parameters $a$, $b$, and $c$:\n1.  From the nodal force expressions:\n$$\n\\tfrac{b}{2} + c = 0 \\implies b + 2c = 0\n$$\n2.  From the nodal moment expression:\n$$\na + \\tfrac{b}{2} = 0 \\implies 2a + b = 0\n$$\nWe now solve this system of linear equations for the ratio $(a:b:c)$.\nFrom the second equation, we find $b = -2a$.\nSubstituting this into the first equation gives:\n$$\n(-2a) + 2c = 0 \\implies 2c = 2a \\implies c = a\n$$\nThus, the parameters must be in the ratio $(a:b:c) = (a : -2a : a)$. For any non-zero $a$, this simplifies to the ratio $(1 : -2 : 1)$.\nThe problem requests the final answer as a ratio vector $(a:b:c)$ normalized such that $a=1$. This gives $a=1$, $b=-2$, and $c=1$.\nThis result implies that the quadratic part of the stabilization energy, which is dependent on $a$, $b$, and $c$, is proportional to $(\\varphi - \\omega_z)^2$:\n$$\n\\tfrac{1}{2}a\\varphi^2 + \\tfrac{1}{2}b\\varphi\\omega_z + \\tfrac{1}{2}c\\omega_z^2 = \\tfrac{a}{2}(\\varphi^2 - 2\\varphi\\omega_z + \\omega_z^2) = \\tfrac{a}{2}(\\varphi - \\omega_z)^2\n$$\nFor a rigid-body rotation, $\\varphi = \\omega_z = \\theta$, so this energy term is identically zero, which is a sufficient condition for the resulting forces and moments to be zero. Our derivation confirms this from first principles.", "answer": "$$\n\\boxed{\n\\begin{pmatrix}\n1 & -2 & 1\n\\end{pmatrix}\n}\n$$", "id": "2552865"}, {"introduction": "With the theoretical blueprint in hand, we can now move to a concrete implementation, which is the most direct way to translate theory into practice. This exercise guides you through coding a bilinear quadrilateral element from first principles, first with standard translational degrees of freedom and then augmenting it with a penalty-stabilized drilling rotation [@problem_id:2552917]. By building the element stiffness matrices and comparing the results of both models, you will gain practical insight into how drilling stabilization is numerically implemented and how it influences the solution.", "problem": "You are asked to implement, from first principles of linear elasticity and the Finite Element Method (FEM), a single bilinear quadrilateral membrane element on the unit square domain with optional drilling degree of freedom (DOF) stabilization. The domain is the unit square with coordinates at nodes: node $1$ at $(0,0)$, node $2$ at $(1,0)$, node $3$ at $(1,1)$, node $4$ at $(0,1)$. The membrane is subjected to a uniform traction of magnitude $T_0$ in the positive $x$-direction along the right edge ($x=1$), while all other edges are traction-free. The membrane is modeled under plane stress with Young’s modulus $E$, Poisson’s ratio $\\nu$, and thickness $t$. Use consistent nondimensional units throughout.\n\nYour task is to compute the nodal displacement vector field for two models:\n- Model A: a standard bilinear quadrilateral membrane element with only in-plane translational DOFs per node, denoted by $u$ and $v$.\n- Model B: the same element enriched with a drilling rotation DOF per node, denoted by $\\theta$, stabilized via a penalty on the difference between the drilling rotation and the in-plane continuum rotation. The stabilization uses a parameter $\\alpha$ and adds to the weak form the integral over the element area of $\\alpha (\\theta - \\omega_z)^2$, where $\\omega_z$ is the out-of-plane continuum rotation defined by $\\omega_z = \\tfrac{1}{2} \\left( \\dfrac{\\partial v}{\\partial x} - \\dfrac{\\partial u}{\\partial y} \\right)$.\n\nYou must derive and then implement the following, starting from fundamental definitions:\n- The plane stress constitutive relation of linear elasticity for the stress vector $\\sigma$ and the strain vector $\\varepsilon$ using the constitutive matrix $D$, where the strain is $\\varepsilon = [\\varepsilon_{xx}, \\varepsilon_{yy}, \\gamma_{xy}]^T$ with $\\varepsilon_{xx} = \\dfrac{\\partial u}{\\partial x}$, $\\varepsilon_{yy} = \\dfrac{\\partial v}{\\partial y}$, and $\\gamma_{xy} = \\dfrac{\\partial u}{\\partial y} + \\dfrac{\\partial v}{\\partial x}$.\n- The isoparametric mapping and bilinear shape functions for the quadrilateral element, using two-by-two Gaussian quadrature with points at $\\xi, \\eta \\in \\{ -1/\\sqrt{3}, +1/\\sqrt{3} \\}$ and weights equal to $1$. Assemble the element stiffness matrix $K_{uv}$ by integrating $B^T D B \\, t \\, \\det(J)$, where $B$ is the linearized strain-displacement matrix and $J$ is the Jacobian of the mapping.\n- The traction vector applied on the right edge using consistent nodal forces, evaluated by one-dimensional Gaussian quadrature along the edge at $\\xi = 1$, integrating the product of the edge shape functions, the traction $[T_0, 0]^T$, the thickness $t$, and the edge Jacobian factor corresponding to the parametric-to-physical line mapping.\n- The drilling rotation stabilization. Introduce the drilling DOF field $\\theta \\approx \\sum_{i=1}^4 N_i \\, \\theta_i$, where $N_i$ are the bilinear shape functions. Define the continuum rotation mapping at each quadrature point by $\\omega_z = \\tfrac{1}{2} ( \\partial v / \\partial x - \\partial u / \\partial y )$. Add to the element weak form the penalty stabilization $\\int_\\Omega \\alpha (\\theta - \\omega_z)^2 \\, t \\, \\mathrm{d}\\Omega$. Show that this contributes symmetric blocks to the element matrix: $K_{\\theta \\theta} = \\int \\alpha N^T N \\, t \\, \\mathrm{d}\\Omega$, $K_{u \\theta} = - \\int \\alpha B_\\omega^T N \\, t \\, \\mathrm{d}\\Omega$ with $B_\\omega$ the $1 \\times 8$ mapping from translational DOFs to $\\omega_z$, and $K_{uu}^{\\text{stab}} = \\int \\alpha B_\\omega^T B_\\omega \\, t \\, \\mathrm{d}\\Omega$. The full stabilized element matrix for Model B is then\n$$\nK^{(B)} = \\begin{bmatrix}\nK_{uv} + K_{uu}^{\\text{stab}} & K_{u \\theta} \\\\\nK_{u \\theta}^T & K_{\\theta \\theta}\n\\end{bmatrix}.\n$$\n- Essential boundary conditions: to eliminate rigid body motions, constrain $u=0$ at nodes $1$ and $4$ (the left edge with $x=0$) and additionally constrain $v=0$ at node $1$ only. Do not impose any essential boundary condition on $\\theta$. Apply the same essential boundary conditions for both Model A and Model B. For Model A, the global system only includes translational DOFs; for Model B, it includes both translational and drilling DOFs. The external force in Model A acts on the translational DOFs only; in Model B, the drilling DOFs have zero external load.\n\nCompute both solutions and compare the translational nodal displacement vectors by taking the maximum absolute difference over all $u$ and $v$ DOFs across all nodes between Model A and Model B.\n\nYour program must implement the above and run a test suite with the following parameter sets, treated as nondimensional:\n- Case $1$: $E = 1000$, $\\nu = 0.3$, $t = 1$, $T_0 = 1$, $\\alpha = 0.1$.\n- Case $2$: $E = 1000$, $\\nu = 0.3$, $t = 1$, $T_0 = 1$, $\\alpha = 10$.\n- Case $3$: $E = 1000$, $\\nu = 0.49$, $t = 1$, $T_0 = 1$, $\\alpha = 1$.\n- Case $4$: $E = 1000$, $\\nu = 0.3$, $t = 0.1$, $T_0 = 1$, $\\alpha = 1$.\n\nFor each case, output a single floating-point number equal to the maximum absolute difference of the translational nodal displacements between Model A and Model B.\n\nFinal output format: Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets (e.g., \"[result1,result2,result3,result4]\"), where each result corresponds to the cases above in order.", "solution": "The problem presented is a well-posed and scientifically sound exercise in computational solid mechanics, specifically within the framework of the Finite Element Method (FEM). It requires the implementation and comparison of two models for a plane stress membrane element: a standard bilinear quadrilateral and one augmented with drilling degrees of freedom (DOFs) stabilized via a penalty method. All necessary data, including material properties, geometry, loading, boundary conditions, and numerical parameters, are provided. The problem is free of contradictions, ambiguities, and factual errors. Therefore, it is deemed valid, and a full solution shall be provided.\n\nThe solution will be derived from first principles of linear elasticity and isoparametric finite element theory.\n\n**1. Constitutive Relation for Plane Stress**\n\nFor a linear, isotropic, elastic material under plane stress conditions ($\\sigma_{zz} = \\sigma_{xz} = \\sigma_{yz} = 0$), the relationship between the in-plane stress vector $\\sigma = [\\sigma_{xx}, \\sigma_{yy}, \\tau_{xy}]^T$ and the strain vector $\\varepsilon = [\\varepsilon_{xx}, \\varepsilon_{yy}, \\gamma_{xy}]^T$ is given by $\\sigma = D \\varepsilon$. The constitutive matrix $D$ is derived from Hooke's Law and is given by:\n$$\nD = \\frac{E}{1 - \\nu^2}\n\\begin{bmatrix}\n1 & \\nu & 0 \\\\\n\\nu & 1 & 0 \\\\\n0 & 0 & \\frac{1 - \\nu}{2}\n\\end{bmatrix}\n$$\nwhere $E$ is the Young's modulus and $\\nu$ is the Poisson's ratio.\n\n**2. Isoparametric Bilinear Quadrilateral Element**\n\nThe geometry and displacement fields are interpolated from nodal values using the same set of shape functions, which is the core of the isoparametric concept.\n\nShape Functions: For a four-node quadrilateral element in the parent domain defined by $\\xi, \\eta \\in [-1, 1]$, the bilinear shape functions $N_i(\\xi, \\eta)$ are:\n$$\nN_1 = \\frac{1}{4}(1-\\xi)(1-\\eta), \\quad N_2 = \\frac{1}{4}(1+\\xi)(1-\\eta), \\quad N_3 = \\frac{1}{4}(1+\\xi)(1+\\eta), \\quad N_4 = \\frac{1}{4}(1-\\xi)(1+\\eta)\n$$\nGeometric Mapping: The physical coordinates $(x, y)$ are mapped from the parent coordinates $(\\xi, \\eta)$ as:\n$$\nx(\\xi, \\eta) = \\sum_{i=1}^4 N_i(\\xi, \\eta) x_i, \\quad y(\\xi, \\eta) = \\sum_{i=1}^4 N_i(\\xi, \\eta) y_i\n$$\nFor the specified unit square with nodes $1(0,0)$, $2(1,0)$, $3(1,1)$, $4(0,1)$, this mapping simplifies to $x = \\frac{1}{2}(1+\\xi)$ and $y = \\frac{1}{2}(1+\\eta)$.\n\nJacobian Matrix: The transformation of derivatives from the physical to the parent coordinate system is governed by the Jacobian matrix $J$:\n$$\nJ = \\begin{bmatrix} \\frac{\\partial x}{\\partial \\xi} & \\frac{\\partial y}{\\partial \\xi} \\\\ \\frac{\\partial x}{\\partial \\eta} & \\frac{\\partial y}{\\partial \\eta} \\end{bmatrix} = \\begin{bmatrix} 1/2 & 0 \\\\ 0 & 1/2 \\end{bmatrix}\n$$\nThe determinant of the Jacobian is $\\det(J) = 1/4$. The differential area element is $dA = \\det(J) \\, d\\xi \\, d\\eta$.\n\nStrain-Displacement Matrix ($B$): The strain components are defined by spatial derivatives of the displacement field $u(x,y) = \\sum N_i u_i$ and $v(x,y) = \\sum N_i v_i$. The relationship $\\varepsilon = B d_{uv}$ connects the strain vector $\\varepsilon$ to the nodal displacement vector $d_{uv} = [u_1, v_1, u_2, v_2, u_3, v_3, u_4, v_4]^T$. The matrix $B$ is constructed from the spatial derivatives of the shape functions:\n$$\nB = [B_1, B_2, B_3, B_4], \\quad \\text{where} \\quad B_i = \\begin{bmatrix} \\frac{\\partial N_i}{\\partial x} & 0 \\\\ 0 & \\frac{\\partial N_i}{\\partial y} \\\\ \\frac{\\partial N_i}{\\partial y} & \\frac{\\partial N_i}{\\partial x} \\end{bmatrix}\n$$\nThe derivatives with respect to $x$ and $y$ are found using the inverse of the Jacobian:\n$$\n\\begin{pmatrix} \\frac{\\partial N_i}{\\partial x} \\\\ \\frac{\\partial N_i}{\\partial y} \\end{pmatrix} = J^{-1} \\begin{pmatrix} \\frac{\\partial N_i}{\\partial \\xi} \\\\ \\frac{\\partial N_i}{\\partial \\eta} \\end{pmatrix} = \\begin{bmatrix} 2 & 0 \\\\ 0 & 2 \\end{bmatrix} \\begin{pmatrix} \\frac{\\partial N_i}{\\partial \\xi} \\\\ \\frac{\\partial N_i}{\\partial \\eta} \\end{pmatrix}\n$$\n\n**3. Element Stiffness and Force Vector**\n\nStandard Stiffness Matrix ($K_{uv}$): The element stiffness matrix for translational DOFs is computed by integrating the strain energy over the element's volume:\n$$\nK_{uv} = \\int_A B^T D B \\, t \\, dA = \\int_{-1}^1 \\int_{-1}^1 B^T(\\xi, \\eta) D B(\\xi, \\eta) \\, t \\det(J) \\, d\\xi \\, d\\eta\n$$\nThis integral is evaluated numerically using $2 \\times 2$ Gaussian quadrature.\n\nConsistent Nodal Forces: The uniform traction $\\vec{T} = [T_0, 0]^T$ applied on the right edge (node 2 to node 3, where $\\xi=1$) generates a consistent nodal force vector $F_{uv}$:\n$$\nF_{uv} = \\int_{\\text{edge 2-3}} N_{\\text{edge}}^T \\vec{T} \\, t \\, dL\n$$\nwhere $N_{\\text{edge}}$ contains the shape functions evaluated on the edge. On this edge, $N_1 = N_4 = 0$, $N_2 = \\frac{1}{2}(1-\\eta)$, and $N_3 = \\frac{1}{2}(1+\\eta)$. The differential line element is $dL = \\sqrt{(\\partial x/\\partial\\eta)^2 + (\\partial y/\\partial\\eta)^2} \\, d\\eta = 1/2 \\, d\\eta$. Integration yields non-zero forces only for the $u$-displacements at nodes $2$ and $3$: $F_{2,u} = F_{3,u} = T_0 t / 2$. The total force vector is $F_{uv} = [0, 0, T_0 t/2, 0, T_0 t/2, 0, 0, 0]^T$.\n\n**4. Drilling Degree of Freedom Stabilization (Model B)**\n\nModel B introduces a drilling rotation DOF, $\\theta_i$, at each node. The stabilization is achieved by adding a penalty energy term to the total potential energy, which penalizes the mismatch between the nodal drilling rotation field $\\theta = \\sum N_i \\theta_i$ and the continuum rotation $\\omega_z = \\frac{1}{2}(\\partial v/\\partial x - \\partial u/\\partial y)$.\n\nThe stabilization energy is:\n$$\n\\Pi_{\\text{stab}} = \\frac{1}{2} \\int_A \\alpha (\\theta - \\omega_z)^2 \\, t \\, dA\n$$\nwhere $\\alpha$ is a penalty parameter. We can express $\\theta$ and $\\omega_z$ in terms of nodal DOFs:\n$$\n\\theta = N d_\\theta, \\quad \\omega_z = B_\\omega d_{uv}\n$$\nHere, $d_\\theta = [\\theta_1, \\theta_2, \\theta_3, \\theta_4]^T$, $N = [N_1, N_2, N_3, N_4]$ is the row vector of shape functions, and $B_\\omega$ is a $1 \\times 8$ matrix that maps translational displacements to continuum rotation:\n$$\nB_\\omega = \\frac{1}{2} \\left[-\\frac{\\partial N_1}{\\partial x}, \\frac{\\partial N_1}{\\partial y}, -\\frac{\\partial N_2}{\\partial x}, \\frac{\\partial N_2}{\\partial y}, \\dots, -\\frac{\\partial N_4}{\\partial x}, \\frac{\\partial N_4}{\\partial y}\\right]\n$$\nSubstituting these into the penalty energy and taking the second variation with respect to the nodal DOFs yields the stabilization stiffness matrices, which are added to the system. The total stiffness matrix for Model B, $K^{(B)}$, for a DOF ordering of $[d_{uv}^T, d_\\theta^T]^T$, is:\n$$\nK^{(B)} = \\begin{bmatrix}\nK_{uv} + K_{uu}^{\\text{stab}} & K_{u \\theta} \\\\\nK_{u \\theta}^T & K_{\\theta \\theta}\n\\end{bmatrix}\n$$\nwhere the stabilization components are given by the integrals:\n$$\nK_{uu}^{\\text{stab}} = \\int_A \\alpha B_\\omega^T B_\\omega \\, t \\, dA, \\quad K_{u \\theta} = - \\int_A \\alpha B_\\omega^T N \\, t \\, dA, \\quad K_{\\theta \\theta} = \\int_A \\alpha N^T N \\, t \\, dA\n$$\nThese matrices are also computed using $2 \\times 2$ Gaussian quadrature.\n\n**5. System Solution and Boundary Conditions**\n\nModel A: The system of equations is $K_{uv} d_{uv} = F_{uv}$.\nModel B: The system is $K^{(B)} d = F^{(B)}$, where $d = [d_{uv}^T, d_\\theta^T]^T$ and $F^{(B)} = [F_{uv}^T, 0, 0, 0, 0]^T$.\n\nBoundary Conditions (BCs): To eliminate rigid body modes, the following essential BCs are applied for both models:\n- $u_1 = 0$ (DOF index $0$)\n- $v_1 = 0$ (DOF index $1$)\n- $u_4 = 0$ (DOF index $6$)\nThese conditions are enforced by modifying the global stiffness matrix and force vector. For a constrained DOF $k$ ($d_k=0$), the $k$-th row and column of the stiffness matrix are set to zero, the diagonal element $K_{kk}$ is set to $1$, and the $k$-th element of the force vector, $F_k$, is set to $0$.\n\nThe resulting linear systems are solved for the nodal displacements $d_{uv}^{(A)}$ and $d_{uv}^{(B)}$. The final comparison is the maximum absolute difference between these two translational displacement vectors: $\\max(|d_{uv}^{(A)} - d_{uv}^{(B)}|)$.", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Implements and compares a standard bilinear quadrilateral membrane element (Model A)\n    with an element enriched with stabilized drilling degrees of freedom (Model B).\n    \"\"\"\n    \n    test_cases = [\n        # (E, nu, t, T0, alpha)\n        (1000.0, 0.3, 1.0, 1.0, 0.1),\n        (1000.0, 0.3, 1.0, 1.0, 10.0),\n        (1000.0, 0.49, 1.0, 1.0, 1.0),\n        (1000.0, 0.3, 0.1, 1.0, 1.0),\n    ]\n\n    results = []\n\n    for E, nu, t, T0, alpha in test_cases:\n        # Nodal coordinates for the unit square element\n        coords = np.array([\n            [0.0, 0.0],  # Node 1\n            [1.0, 0.0],  # Node 2\n            [1.0, 1.0],  # Node 3\n            [0.0, 1.0],  # Node 4\n        ])\n\n        # Gaussian quadrature points and weights for 2x2 rule\n        gauss_points = [-1.0 / np.sqrt(3.0), 1.0 / np.sqrt(3.0)]\n        gauss_weights = [1.0, 1.0]\n\n        # Constitutive matrix for plane stress\n        D = (E / (1.0 - nu**2)) * np.array([\n            [1.0, nu, 0.0],\n            [nu, 1.0, 0.0],\n            [0.0, 0.0, (1.0 - nu) / 2.0]\n        ])\n\n        # Initialize element matrices\n        K_uv = np.zeros((8, 8))\n        K_uu_stab = np.zeros((8, 8))\n        K_utheta = np.zeros((8, 4))\n        K_thetatheta = np.zeros((4, 4))\n\n        # Numerical integration over the element area\n        for i in range(len(gauss_points)):\n            for j in range(len(gauss_points)):\n                xi = gauss_points[i]\n                eta = gauss_points[j]\n                weight = gauss_weights[i] * gauss_weights[j]\n\n                # Shape functions and their derivatives in parent domain\n                N = 0.25 * np.array([\n                    (1 - xi) * (1 - eta),\n                    (1 + xi) * (1 - eta),\n                    (1 + xi) * (1 + eta),\n                    (1 - xi) * (1 + eta)\n                ])\n\n                # Derivatives w.r.t. xi and eta\n                dN_dxi = 0.25 * np.array([\n                    -(1 - eta), (1 - eta), (1 + eta), -(1 + eta)\n                ])\n                dN_deta = 0.25 * np.array([\n                    -(1 - xi), -(1 + xi), (1 + xi), (1 - xi)\n                ])\n\n                # Jacobian matrix, its inverse and determinant\n                # For the unit square, J is constant\n                J = np.array([[0.5, 0.0], [0.0, 0.5]])\n                J_inv = np.array([[2.0, 0.0], [0.0, 2.0]])\n                det_J = 0.25\n                \n                # Shape function derivatives in physical domain\n                dN_dxy = J_inv @ np.vstack((dN_dxi, dN_deta))\n                dN_dx = dN_dxy[0, :]\n                dN_dy = dN_dxy[1, :]\n\n                # Strain-displacement matrix B\n                B = np.zeros((3, 8))\n                for k in range(4):\n                    B[0, 2 * k] = dN_dx[k]\n                    B[1, 2 * k + 1] = dN_dy[k]\n                    B[2, 2 * k] = dN_dy[k]\n                    B[2, 2 * k + 1] = dN_dx[k]\n\n                # Continuum rotation matrix B_omega\n                B_omega = np.zeros((1, 8))\n                for k in range(4):\n                    B_omega[0, 2 * k] = -0.5 * dN_dx[k]\n                    B_omega[0, 2 * k + 1] = 0.5 * dN_dy[k]\n\n                # Assemble stiffness matrices\n                factor = t * det_J * weight\n                K_uv += B.T @ D @ B * factor\n                \n                # Stabilization matrices\n                stab_factor = alpha * factor\n                K_uu_stab += B_omega.T @ B_omega * stab_factor\n                K_utheta -= B_omega.T @ N.reshape(1, 4) * stab_factor\n                K_thetatheta += N.reshape(4, 1) @ N.reshape(1, 4) * stab_factor\n        \n        # --- MODEL A ---\n        K_A = K_uv.copy()\n        F_A = np.zeros(8)\n        # Consistent nodal forces from traction T0 on edge 2-3\n        F_A[2] = T0 * t * 0.5  # u2\n        F_A[4] = T0 * t * 0.5  # u3\n\n        # Apply boundary conditions for Model A\n        # u1=0 (DOF 0), v1=0 (DOF 1), u4=0 (DOF 6)\n        constrained_dofs_A = [0, 1, 6]\n        for dof in constrained_dofs_A:\n            K_A[dof, :] = 0.0\n            K_A[:, dof] = 0.0\n            K_A[dof, dof] = 1.0\n            F_A[dof] = 0.0\n        \n        d_uv_A = np.linalg.solve(K_A, F_A)\n        \n        # --- MODEL B ---\n        K_B = np.zeros((12, 12))\n        K_B[0:8, 0:8] = K_uv + K_uu_stab\n        K_B[0:8, 8:12] = K_utheta\n        K_B[8:12, 0:8] = K_utheta.T\n        K_B[8:12, 8:12] = K_thetatheta\n\n        F_B = np.zeros(12)\n        F_B[2] = T0 * t * 0.5\n        F_B[4] = T0 * t * 0.5\n        \n        # Apply boundary conditions for Model B (same translational DOFs)\n        constrained_dofs_B = [0, 1, 6]\n        for dof in constrained_dofs_B:\n            K_B[dof, :] = 0.0\n            K_B[:, dof] = 0.0\n            K_B[dof, dof] = 1.0\n            F_B[dof] = 0.0\n        \n        d_B = np.linalg.solve(K_B, F_B)\n        d_uv_B = d_B[:8]\n\n        # Calculate the maximum absolute difference\n        max_diff = np.max(np.abs(d_uv_A - d_uv_B))\n        results.append(max_diff)\n        \n    # Format and print the final output\n    print(f\"[{','.join(f'{r:.8e}' for r in results)}]\")\n\nsolve()\n```", "id": "2552917"}, {"introduction": "Energy-based penalty methods are not the only way to treat drilling degrees of freedom; direct kinematic constraints offer a powerful alternative. This practice challenges you to construct a multi-point constraint (MPC) that explicitly links the drilling rotation at a node to the average continuum spin of the surrounding elements [@problem_id:2552859]. Deriving and assembling this constraint provides hands-on experience with a 'hard' enforcement method, broadening your toolkit for developing robust and accurate finite element models.", "problem": "In small-strain two-dimensional elasticity, the continuum spin (the skew-symmetric part of the displacement gradient) about the out-of-plane axis is defined by the infinitesimal-rotation scalar $\\omega_{z} = \\tfrac{1}{2}\\left(\\dfrac{\\partial u_{y}}{\\partial x} - \\dfrac{\\partial u_{x}}{\\partial y}\\right)$, where $u_{x}$ and $u_{y}$ are the Cartesian displacement components. In a conforming finite element discretization with linear triangular elements, the displacement field is approximated by $u_{x}(x,y) = \\sum_{i} N_{i}(x,y)\\,u_{ix}$ and $u_{y}(x,y) = \\sum_{i} N_{i}(x,y)\\,u_{iy}$, where $N_{i}$ are the element shape functions and $u_{ix}, u_{iy}$ are nodal displacement unknowns. A drilling degree of freedom (rotation about the out-of-plane axis) $\\theta_{i}$ is introduced at each node to enable coupling with rotational boundary conditions and to improve conditioning.\n\nConsider the following unstructured patch of two constant-strain linear triangular elements that share node $1$:\n- Element $\\mathcal{T}_{1}$ has nodes $\\{1,2,3\\}$ with coordinates $(x_{1},y_{1}) = (0,0)$, $(x_{2},y_{2}) = (1,0)$, $(x_{3},y_{3}) = (0,1)$.\n- Element $\\mathcal{T}_{2}$ has nodes $\\{1,4,2\\}$ with coordinates $(x_{1},y_{1}) = (0,0)$, $(x_{4},y_{4}) = (0,-1)$, $(x_{2},y_{2}) = (1,0)$.\n\nEach node $i \\in \\{1,2,3,4\\}$ carries translational degrees of freedom $u_{ix}, u_{iy}$ and a drilling rotation $\\theta_{i}$. The global degree-of-freedom vector is ordered as\n$$\n\\mathbf{q} = \\big[u_{1x},\\,u_{1y},\\,\\theta_{1},\\,u_{2x},\\,u_{2y},\\,\\theta_{2},\\,u_{3x},\\,u_{3y},\\,\\theta_{3},\\,u_{4x},\\,u_{4y},\\,\\theta_{4}\\big]^{\\mathsf{T}}.\n$$\n\nUsing only the fundamental kinematic definition $\\omega_{z} = \\tfrac{1}{2}\\left(\\dfrac{\\partial u_{y}}{\\partial x} - \\dfrac{\\partial u_{x}}{\\partial y}\\right)$ and the fact that for a linear triangular element the shape function gradients are constant over the element, construct a single linear multi-point constraint that enforces the drilling rotation at node $1$ to equal the simple arithmetic average of the continuum spin computed over the two adjacent elements $\\mathcal{T}_{1}$ and $\\mathcal{T}_{2}$. Express the constraint in the assembled global form\n$$\n\\mathbf{g}^{\\mathsf{T}}\\,\\mathbf{q} = 0,\n$$\nwhere $\\mathbf{g}$ is a row vector of coefficients in the given global degree-of-freedom ordering. Show clearly how you compute the continuum spin on each element from the nodal displacements and how you form the average, then assemble the resulting coefficients into the global vector $\\mathbf{g}$ corresponding to the ordering of $\\mathbf{q}$ above.\n\nProvide the exact coefficient values (no rounding). Your final answer must be the single row vector $\\mathbf{g}^{\\mathsf{T}}$ written as a $1 \\times 12$ row matrix in the specified degree-of-freedom order.", "solution": "The problem statement is submitted for validation.\n\nFirst, the givens are extracted verbatim.\n- Continuum spin definition: $\\omega_{z} = \\tfrac{1}{2}\\left(\\dfrac{\\partial u_{y}}{\\partial x} - \\dfrac{\\partial u_{x}}{\\partial y}\\right)$.\n- Finite element displacement approximation: $u_{x}(x,y) = \\sum_{i} N_{i}(x,y)\\,u_{ix}$ and $u_{y}(x,y) = \\sum_{i} N_{i}(x,y)\\,u_{iy}$.\n- Element $\\mathcal{T}_{1}$ nodes and coordinates: $\\{1,2,3\\}$, $(x_{1},y_{1}) = (0,0)$, $(x_{2},y_{2}) = (1,0)$, $(x_{3},y_{3}) = (0,1)$.\n- Element $\\mathcal{T}_{2}$ nodes and coordinates: $\\{1,4,2\\}$, $(x_{1},y_{1}) = (0,0)$, $(x_{4},y_{4}) = (0,-1)$, $(x_{2},y_{2}) = (1,0)$.\n- Degrees of freedom per node $i$: $u_{ix}, u_{iy}, \\theta_{i}$.\n- Global degree-of-freedom vector ordering: $\\mathbf{q} = \\big[u_{1x},\\,u_{1y},\\,\\theta_{1},\\,u_{2x},\\,u_{2y},\\,\\theta_{2},\\,u_{3x},\\,u_{3y},\\,\\theta_{3},\\,u_{4x},\\,u_{4y},\\,\\theta_{4}\\big]^{\\mathsf{T}}$.\n- Constraint condition: The drilling rotation at node $1$, $\\theta_{1}$, must equal the simple arithmetic average of the continuum spins computed over elements $\\mathcal{T}_{1}$ and $\\mathcal{T}_{2}$.\n- Required output form: A linear constraint $\\mathbf{g}^{\\mathsf{T}}\\,\\mathbf{q} = 0$, where $\\mathbf{g}$ is the vector of coefficients.\n\nNext, a validation is performed based on these givens.\n- **Scientific Groundedness**: The problem is based on fundamental principles of continuum mechanics and the finite element method. The concepts of continuum spin, linear triangular elements, and drilling degrees of freedom are standard in computational solid mechanics. It is scientifically sound.\n- **Well-Posedness**: The problem is well-posed. It provides all necessary information—geometry, connectivity, kinematic definitions, and degree-of-freedom ordering—to uniquely determine the coefficients of the constraint vector, up to a trivial scaling factor.\n- **Objectivity**: The problem is stated in precise, objective mathematical language, free of subjective or ambiguous terminology.\n\nThe verdict is that the problem is valid. It is a standard, well-defined exercise in finite element kinematics. I will now proceed with the solution.\n\nThe objective is to derive the coefficients of the row vector $\\mathbf{g}^{\\mathsf{T}}$ that represents the specified multi-point constraint. The constraint requires the drilling rotation at node $1$, $\\theta_{1}$, to be the arithmetic average of the continuum spins in the two adjacent elements, $\\omega_z^{(1)}$ and $\\omega_z^{(2)}$. This is expressed as:\n$$\n\\theta_{1} = \\frac{\\omega_z^{(1)} + \\omega_z^{(2)}}{2}\n$$\nTo express this as a homogeneous linear equation in the form $\\mathbf{g}^{\\mathsf{T}}\\mathbf{q} = 0$, we rearrange the terms:\n$$\n\\theta_{1} - \\frac{1}{2}\\omega_z^{(1)} - \\frac{1}{2}\\omega_z^{(2)} = 0\n$$\nOur task reduces to finding the expressions for $\\omega_z^{(1)}$ and $\\omega_z^{(2)}$ in terms of the nodal displacements. For a constant-strain linear triangular element, the gradient of the displacement field is constant over the element domain. For a generic displacement component $u(x,y) = \\sum_{i=1}^{3} N_i(x,y) u_i$, its partial derivatives are given by $\\frac{\\partial u}{\\partial x} = \\sum_{i=1}^{3} \\frac{\\partial N_i}{\\partial x} u_i$ and $\\frac{\\partial u}{\\partial y} = \\sum_{i=1}^{3} \\frac{\\partial N_i}{\\partial y} u_i$. The shape function derivatives are constant and are given by $\\frac{\\partial N_i}{\\partial x} = \\frac{b_i}{2A}$ and $\\frac{\\partial N_i}{\\partial y} = \\frac{c_i}{2A}$, where $A$ is the element area, and $b_i, c_i$ are geometric coefficients depending on the nodal coordinates $(x_j, y_j)$ in counter-clockwise order $(i, j, k)$: $b_i = y_j - y_k$ and $c_i = x_k - x_j$.\n\nFirst, we analyze element $\\mathcal{T}_{1}$ with nodes $\\{1,2,3\\}$ at coordinates $(x_{1},y_{1}) = (0,0)$, $(x_{2},y_{2}) = (1,0)$, and $(x_{3},y_{3}) = (0,1)$. The nodal ordering $(1,2,3)$ is counter-clockwise. The area of the element is $A_{1} = \\frac{1}{2}|(x_2-x_1)(y_3-y_1) - (x_3-x_1)(y_2-y_1)| = \\frac{1}{2}|(1)(1) - (0)(0)| = \\frac{1}{2}$.\nThe geometric coefficients are:\n$b_1 = y_2 - y_3 = 0 - 1 = -1$\n$b_2 = y_3 - y_1 = 1 - 0 = 1$\n$b_3 = y_1 - y_2 = 0 - 0 = 0$\n$c_1 = x_3 - x_2 = 0 - 1 = -1$\n$c_2 = x_1 - x_3 = 0 - 0 = 0$\n$c_3 = x_2 - x_1 = 1 - 0 = 1$\n\nThe displacement gradients are:\n$\\frac{\\partial u_x}{\\partial y} = \\sum_{i=1}^{3} \\frac{c_i}{2A_1} u_{ix} = \\frac{1}{1}(-1 \\cdot u_{1x} + 0 \\cdot u_{2x} + 1 \\cdot u_{3x}) = -u_{1x} + u_{3x}$\n$\\frac{\\partial u_y}{\\partial x} = \\sum_{i=1}^{3} \\frac{b_i}{2A_1} u_{iy} = \\frac{1}{1}(-1 \\cdot u_{1y} + 1 \\cdot u_{2y} + 0 \\cdot u_{3y}) = -u_{1y} + u_{2y}$\nThe continuum spin in element $\\mathcal{T}_{1}$ is:\n$\\omega_z^{(1)} = \\frac{1}{2}\\left(\\frac{\\partial u_y}{\\partial x} - \\frac{\\partial u_x}{\\partial y}\\right) = \\frac{1}{2}\\left((-u_{1y} + u_{2y}) - (-u_{1x} + u_{3x})\\right) = \\frac{1}{2}(u_{1x} - u_{1y} + u_{2y} - u_{3x})$.\n\nNext, we analyze element $\\mathcal{T}_{2}$ with nodes $\\{1,4,2\\}$ at coordinates $(x_{1},y_{1}) = (0,0)$, $(x_{4},y_{4}) = (0,-1)$, and $(x_{2},y_{2}) = (1,0)$. The nodal ordering $(1,4,2)$ is counter-clockwise. The area is $A_{2} = \\frac{1}{2}|(x_4-x_1)(y_2-y_1) - (x_2-x_1)(y_4-y_1)| = \\frac{1}{2}|(0)(0) - (1)(-1)| = \\frac{1}{2}$.\nThe geometric coefficients for the ordered set $(1,4,2)$ are:\n$b_1 = y_4 - y_2 = -1 - 0 = -1$\n$b_4 = y_2 - y_1 = 0 - 0 = 0$\n$b_2 = y_1 - y_4 = 0 - (-1) = 1$\n$c_1 = x_2 - x_4 = 1 - 0 = 1$\n$c_4 = x_1 - x_2 = 0 - 1 = -1$\n$c_2 = x_4 - x_1 = 0 - 0 = 0$\n\nThe displacement gradients are:\n$\\frac{\\partial u_x}{\\partial y} = \\sum_{i \\in \\{1,4,2\\}} \\frac{c_i}{2A_2} u_{ix} = \\frac{1}{1}(1 \\cdot u_{1x} - 1 \\cdot u_{4x} + 0 \\cdot u_{2x}) = u_{1x} - u_{4x}$\n$\\frac{\\partial u_y}{\\partial x} = \\sum_{i \\in \\{1,4,2\\}} \\frac{b_i}{2A_2} u_{iy} = \\frac{1}{1}(-1 \\cdot u_{1y} + 0 \\cdot u_{4y} + 1 \\cdot u_{2y}) = -u_{1y} + u_{2y}$\nThe continuum spin in element $\\mathcal{T}_{2}$ is:\n$\\omega_z^{(2)} = \\frac{1}{2}\\left(\\frac{\\partial u_y}{\\partial x} - \\frac{\\partial u_x}{\\partial y}\\right) = \\frac{1}{2}\\left((-u_{1y} + u_{2y}) - (u_{1x} - u_{4x})\\right) = \\frac{1}{2}(-u_{1x} - u_{1y} + u_{2y} + u_{4x})$.\n\nFinally, we substitute these expressions back into the constraint equation:\n$$\n\\theta_{1} - \\frac{1}{2}\\left[ \\frac{1}{2}(u_{1x} - u_{1y} + u_{2y} - u_{3x}) \\right] - \\frac{1}{2}\\left[ \\frac{1}{2}(-u_{1x} - u_{1y} + u_{2y} + u_{4x}) \\right] = 0\n$$\n$$\n\\theta_{1} - \\frac{1}{4}(u_{1x} - u_{1y} + u_{2y} - u_{3x}) - \\frac{1}{4}(-u_{1x} - u_{1y} + u_{2y} + u_{4x}) = 0\n$$\nWe collect the coefficients for each degree of freedom in the global vector $\\mathbf{q}$:\n- $u_{1x}$: $-\\frac{1}{4}(1) - \\frac{1}{4}(-1) = -\\frac{1}{4} + \\frac{1}{4} = 0$\n- $u_{1y}$: $-\\frac{1}{4}(-1) - \\frac{1}{4}(-1) = \\frac{1}{4} + \\frac{1}{4} = \\frac{1}{2}$\n- $\\theta_{1}$: $1$\n- $u_{2x}$: $0$\n- $u_{2y}$: $-\\frac{1}{4}(1) - \\frac{1}{4}(1) = -\\frac{1}{2}$\n- $\\theta_{2}$: $0$\n- $u_{3x}$: $-\\frac{1}{4}(-1) = \\frac{1}{4}$\n- $u_{3y}$: $0$\n- $\\theta_{3}$: $0$\n- $u_{4x}$: $-\\frac{1}{4}(1) = -\\frac{1}{4}$\n- $u_{4y}$: $0$\n- $\\theta_{4}$: $0$\n\nThe complete constraint equation is:\n$$\n(0)u_{1x} + \\left(\\frac{1}{2}\\right)u_{1y} + (1)\\theta_{1} + (0)u_{2x} + \\left(-\\frac{1}{2}\\right)u_{2y} + (0)\\theta_{2} + \\left(\\frac{1}{4}\\right)u_{3x} + (0)u_{3y} + (0)\\theta_{3} + \\left(-\\frac{1}{4}\\right)u_{4x} + (0)u_{4y} + (0)\\theta_{4} = 0\n$$\nThe row vector $\\mathbf{g}^{\\mathsf{T}}$ is therefore assembled from these coefficients according to the specified ordering of $\\mathbf{q}$.", "answer": "$$\n\\boxed{\n\\begin{pmatrix}\n0 & \\frac{1}{2} & 1 & 0 & -\\frac{1}{2} & 0 & \\frac{1}{4} & 0 & 0 & -\\frac{1}{4} & 0 & 0\n\\end{pmatrix}\n}\n$$", "id": "2552859"}]}