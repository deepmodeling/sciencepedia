{"hands_on_practices": [{"introduction": "Understanding the distinction between plate theories begins with their fundamental kinematic assumptions. This first exercise provides a direct, analytical exploration of the relationship between the Mindlin-Reissner (MR) and Kirchhoff-Love (KL) plate models [@problem_id:2588777]. By starting with the more general MR framework, which accounts for transverse shear deformation, and then explicitly applying the KL kinematic constraint, you will see precisely how the MR theory reduces to the classical thin-plate theory. This practice is essential for appreciating the physical meaning of the independent rotational degrees of freedom and grasping why MR theory is vital for analyzing thicker plates.", "problem": "Consider a homogeneous, isotropic, flat plate of thickness $h$ occupying the mid-surface domain $\\{(x,y)\\}$, with the transverse direction along $z$. Adopt the Mindlin–Reissner First-Order Shear Deformation Theory (FSDT) kinematics in which the three-dimensional displacement field is\n$$\nu(x,y,z) \\;=\\; u_{0}(x,y) \\;+\\; z\\,\\phi_{x}(x,y),\\qquad\nv(x,y,z) \\;=\\; v_{0}(x,y) \\;+\\; z\\,\\phi_{y}(x,y),\\qquad\nw(x,y,z) \\;=\\; w_{0}(x,y),\n$$\nwhere $u_{0}$ and $v_{0}$ are the in-plane mid-surface displacements, $w_{0}$ is the transverse deflection of the mid-surface, and $\\phi_{x}$ and $\\phi_{y}$ are the independent rotations of the transverse normal associated with the $x$ and $y$ directions, respectively. The small-strain, small-rotation kinematics imply the engineering transverse shear strains\n$$\n\\gamma_{xz} \\;=\\; \\frac{\\partial u}{\\partial z} \\;+\\; \\frac{\\partial w}{\\partial x}, \\qquad\n\\gamma_{yz} \\;=\\; \\frac{\\partial v}{\\partial z} \\;+\\; \\frac{\\partial w}{\\partial y}.\n$$\nThe plate is subjected to uniform cylindrical bending about the $x$-axis, characterized by a constant curvature $\\kappa$ with respect to $y$, so that the mid-surface deflection is\n$$\nw_{0}(x,y) \\;=\\; \\frac{\\kappa}{2}\\,y^{2}.\n$$\nAssume there are no mid-surface in-plane displacements relevant to the shear calculation, that is, $u_{0}(x,y)=0$ and $v_{0}(x,y)=0$. Using only the definitions given above, compute the Mindlin–Reissner shear strains $\\gamma_{xz}(x,y)$ and $\\gamma_{yz}(x,y)$ in terms of $\\kappa$, $y$, and the rotation fields $\\phi_{x}(x,y)$ and $\\phi_{y}(x,y)$. Then, by enforcing the Kirchhoff–Love constraint that the transverse normal remains orthogonal to the mid-surface, show that these transverse shear strains vanish in the Kirchhoff–Love limit.\n\nProvide your final answer for $\\big(\\gamma_{xz}(x,y),\\,\\gamma_{yz}(x,y)\\big)$ as a row matrix.", "solution": "The solution proceeds in two parts as requested. First, the shear strains are computed under the Mindlin-Reissner framework. Second, the Kirchhoff-Love constraint is formally derived and applied to demonstrate that the shear strains vanish.\n\n**Part 1: Computation of Mindlin–Reissner Shear Strains**\n\nThe displacement field is provided by the FSDT kinematics. We apply the given assumption that the in-plane displacements of the mid-surface are zero, i.e., $u_{0}(x,y) = 0$ and $v_{0}(x,y) = 0$. The kinematic relations become:\n$$u(x,y,z) = z\\,\\phi_{x}(x,y)$$\n$$v(x,y,z) = z\\,\\phi_{y}(x,y)$$\n$$w(x,y,z) = w_{0}(x,y)$$\nThe transverse deflection for uniform cylindrical bending is given as $w_{0}(x,y) = \\frac{\\kappa}{2}y^{2}$.\n\nThe engineering transverse shear strains are defined as:\n$$\\gamma_{xz} = \\frac{\\partial u}{\\partial z} + \\frac{\\partial w}{\\partial x}$$\n$$\\gamma_{yz} = \\frac{\\partial v}{\\partial z} + \\frac{\\partial w}{\\partial y}$$\n\nWe compute the necessary partial derivatives:\n1.  Derivative of $u$ with respect to $z$:\n    $$\\frac{\\partial u}{\\partial z} = \\frac{\\partial}{\\partial z} \\left( z\\,\\phi_{x}(x,y) \\right) = \\phi_{x}(x,y)$$\n2.  Derivative of $v$ with respect to $z$:\n    $$\\frac{\\partial v}{\\partial z} = \\frac{\\partial}{\\partial z} \\left( z\\,\\phi_{y}(x,y) \\right) = \\phi_{y}(x,y)$$\n3.  Derivative of $w$ with respect to $x$:\n    $$\\frac{\\partial w}{\\partial x} = \\frac{\\partial w_{0}}{\\partial x} = \\frac{\\partial}{\\partial x} \\left( \\frac{\\kappa}{2}y^{2} \\right) = 0$$\n4.  Derivative of $w$ with respect to $y$:\n    $$\\frac{\\partial w}{\\partial y} = \\frac{\\partial w_{0}}{\\partial y} = \\frac{\\partial}{\\partial y} \\left( \\frac{\\kappa}{2}y^{2} \\right) = \\kappa y$$\n\nSubstituting these derivatives into the strain definitions yields the Mindlin-Reissner shear strains for the specified cylindrical bending:\n$$\\gamma_{xz}(x,y) = \\phi_{x}(x,y) + 0 = \\phi_{x}(x,y)$$\n$$\\gamma_{yz}(x,y) = \\phi_{y}(x,y) + \\kappa y$$\nThis completes the first task.\n\n**Part 2: Application of the Kirchhoff–Love Constraint**\n\nThe Kirchhoff–Love hypothesis states that a material line initially normal to the plate's mid-surface remains straight and normal to the deformed mid-surface, and does not change its length. Here, we only need the orthogonality condition.\n\nLet us formalize this constraint. The position vector of a point $(x,y,z)$ after deformation is $\\mathbf{P}(x,y,z) = (x+u, y+v, z+w)$. Using the FSDT kinematics:\n$$\\mathbf{P}(x,y,z) = (x + z\\,\\phi_{x}(x,y), y + z\\,\\phi_{y}(x,y), z + w_{0}(x,y))$$\nA vector tangent to the deformed material line that was initially normal to the mid-surface is found by differentiating $\\mathbf{P}$ with respect to $z$:\n$$\\mathbf{d} = \\frac{\\partial \\mathbf{P}}{\\partial z} = (\\phi_{x}(x,y), \\phi_{y}(x,y), 1)$$\n\nNext, we find the vector normal to the deformed mid-surface. A point on the mid-surface $(x, y, 0)$ moves to $\\mathbf{p}_{0}(x,y) = (x, y, w_{0}(x,y))$. The tangent vectors to the deformed mid-surface are:\n$$\\mathbf{T}_{x} = \\frac{\\partial \\mathbf{p}_{0}}{\\partial x} = \\left(1, 0, \\frac{\\partial w_{0}}{\\partial x}\\right)$$\n$$\\mathbf{T}_{y} = \\frac{\\partial \\mathbf{p}_{0}}{\\partial y} = \\left(0, 1, \\frac{\\partial w_{0}}{\\partial y}\\right)$$\nThe normal vector to the deformed mid-surface is given by their cross product, $\\mathbf{n} = \\mathbf{T}_{x} \\times \\mathbf{T}_{y}$:\n$$\\mathbf{n} = \\begin{vmatrix} \\mathbf{i} & \\mathbf{j} & \\mathbf{k} \\\\ 1 & 0 & \\frac{\\partial w_{0}}{\\partial x} \\\\ 0 & 1 & \\frac{\\partial w_{0}}{\\partial y} \\end{vmatrix} = \\left(-\\frac{\\partial w_{0}}{\\partial x}, -\\frac{\\partial w_{0}}{\\partial y}, 1\\right)$$\nThe Kirchhoff-Love constraint requires that the vector $\\mathbf{d}$ (representing the deformed normal fiber) be parallel to the vector $\\mathbf{n}$ (the normal to the deformed mid-surface). This implies $\\mathbf{d} = C \\mathbf{n}$ for some scalar $C$.\n$$(\\phi_{x}, \\phi_{y}, 1) = C \\left(-\\frac{\\partial w_{0}}{\\partial x}, -\\frac{\\partial w_{0}}{\\partial y}, 1\\right)$$\nComparing the third components, we find $1 = C \\cdot 1$, so $C=1$. Equating the other components gives the kinematic constraints of the Kirchhoff-Love theory:\n$$\\phi_{x}(x,y) = -\\frac{\\partial w_{0}(x,y)}{\\partial x}$$\n$$\\phi_{y}(x,y) = -\\frac{\\partial w_{0}(x,y)}{\\partial y}$$\nThese equations relate the rotations of the normal directly to the slopes of the mid-surface.\n\nNow, we show that these constraints force the transverse shear strains to zero. The general expressions for the Mindlin-Reissner shear strains are:\n$$\\gamma_{xz} = \\phi_{x} + \\frac{\\partial w_{0}}{\\partial x}$$\n$$\\gamma_{yz} = \\phi_{y} + \\frac{\\partial w_{0}}{\\partial y}$$\nSubstituting the Kirchhoff-Love kinematic constraints into these expressions:\n$$\\gamma_{xz} = \\left(-\\frac{\\partial w_{0}}{\\partial x}\\right) + \\frac{\\partial w_{0}}{\\partial x} = 0$$\n$$\\gamma_{yz} = \\left(-\\frac{\\partial w_{0}}{\\partial y}\\right) + \\frac{\\partial w_{0}}{\\partial y} = 0$$\nThus, by enforcing the Kirchhoff–Love constraint that the transverse normal remains orthogonal to the mid-surface, it is rigorously shown that the transverse shear strains $\\gamma_{xz}$ and $\\gamma_{yz}$ must vanish. This is the defining feature that distinguishes Kirchhoff-Love theory from Mindlin-Reissner theory.", "answer": "$$\n\\boxed{\n\\begin{pmatrix}\n\\phi_{x}(x,y) & \\phi_{y}(x,y) + \\kappa y\n\\end{pmatrix}\n}\n$$", "id": "2588777"}, {"introduction": "With a firm grasp of the underlying kinematics, we can now translate these concepts into a working finite element. This practice guides you through the foundational process of deriving the element stiffness matrix for a four-node quadrilateral Mindlin-Reissner element from first principles [@problem_id:2588744]. By systematically constructing the strain-displacement ($B$) and constitutive ($D$) matrices, you will build the complete stiffness matrix, which forms the heart of any finite element analysis. This detailed derivation is a cornerstone of computational mechanics, revealing how an element's response to loads is mathematically formulated.", "problem": "An isotropic, homogeneous plate is modeled using the four-node quadrilateral Mindlin–Reissner plate element within the Finite Element Method (FEM). Each node carries three degrees of freedom: the transverse displacement $w$ and the rotations $\\theta_{x}$ and $\\theta_{y}$ about the $y$- and $x$-axes, respectively. The Mindlin–Reissner kinematics assume first-order shear deformation with transverse shear strains $\\gamma_{xz}$ and $\\gamma_{yz}$ and bending curvatures $\\kappa_{x}$, $\\kappa_{y}$, and $\\kappa_{xy}$. The plate has thickness $t$, Young’s modulus $E$, Poisson’s ratio $\\nu$, and shear correction factor $\\kappa$. The shear modulus is $G = E/\\bigl(2(1+\\nu)\\bigr)$.\n\nConsider a single four-node element that is a rectangle in the physical $(x,y)$-plane with side lengths $a$ (along $x$) and $b$ (along $y$), aligned with the coordinate axes, mapped from the parent square $(\\xi,\\eta)\\in[-1,1]^2$ by the affine map $x = \\tfrac{a}{2}\\,\\xi + x_{c}$ and $y = \\tfrac{b}{2}\\,\\eta + y_{c}$. Use the standard bilinear shape functions on the parent domain,\n$$\nN_{1}(\\xi,\\eta) = \\tfrac{1}{4}(1-\\xi)(1-\\eta),\\quad\nN_{2}(\\xi,\\eta) = \\tfrac{1}{4}(1+\\xi)(1-\\eta),\\quad\nN_{3}(\\xi,\\eta) = \\tfrac{1}{4}(1+\\xi)(1+\\eta),\\quad\nN_{4}(\\xi,\\eta) = \\tfrac{1}{4}(1-\\xi)(1+\\eta).\n$$\n\nStarting from the Mindlin–Reissner kinematic definitions and linear elastic isotropic constitutive relations, and using standard isoparametric interpolation for $w$, $\\theta_{x}$, and $\\theta_{y}$ with the above shape functions, perform the following:\n\n1. Derive the element strain–displacement matrices $B^{(b)}$ for bending and $B^{(s)}$ for shear in terms of the shape function derivatives with respect to $x$ and $y$. Clearly identify which generalized strains each matrix maps to.\n2. Write the bending and shear constitutive matrices $D^{(b)}$ and $D^{(s)}$ for an isotropic plate in the Mindlin–Reissner theory.\n3. Using the virtual work statement as the foundational starting point, derive the $12\\times 12$ element stiffness matrix as the sum of a bending part and a shear part,\n$$\nK_{e} \\;=\\; K_{e}^{(b)} \\;+\\; K_{e}^{(s)} \\;=\\; \\int_{\\Omega_{e}} \\bigl(B^{(b)}\\bigr)^{\\mathsf{T}} D^{(b)} B^{(b)}\\,\\mathrm{d}A \\;+\\; \\int_{\\Omega_{e}} \\bigl(B^{(s)}\\bigr)^{\\mathsf{T}} D^{(s)} B^{(s)}\\,\\mathrm{d}A,\n$$\nand explicitly identify the sub-blocks associated with bending and shear, emphasizing the absence or presence of coupling to the transverse displacement $w$.\n4. Evaluate these integrals using full Gauss integration ($2\\times 2$ points on $[-1,1]^2$ with unit weights) for the given rectangular element mapping.\n\nFinally, as a concrete scalar quantity, compute the closed-form symbolic expression for the single stiffness entry that couples the transverse displacement $w$ at node $1$ with itself, i.e., the $(w_{1},w_{1})$ entry of the total element stiffness matrix $K_{e}$ obtained with full Gauss integration. Express your final answer in terms of $E$, $\\nu$, $t$, $\\kappa$, $a$, and $b$. Do not approximate. Express the answer in Newtons per meter (N/m). The final reported answer must be a single closed-form expression.", "solution": "The starting point is the virtual work statement for a Mindlin–Reissner plate element, which yields the element stiffness as the sum of bending and shear contributions,\n$$\nK_{e} \\;=\\; K_{e}^{(b)} \\;+\\; K_{e}^{(s)} \\;=\\; \\int_{\\Omega_{e}} \\bigl(B^{(b)}\\bigr)^{\\mathsf{T}} D^{(b)} B^{(b)}\\,\\mathrm{d}A \\;+\\; \\int_{\\Omega_{e}} \\bigl(B^{(s)}\\bigr)^{\\mathsf{T}} D^{(s)} B^{(s)}\\,\\mathrm{d}A.\n$$\nThe nodal degrees of freedom are ordered as\n$$\n\\{d\\} \\;=\\; \\begin{bmatrix}\nw_{1} & \\theta_{x1} & \\theta_{y1} & w_{2} & \\theta_{x2} & \\theta_{y2} & w_{3} & \\theta_{x3} & \\theta_{y3} & w_{4} & \\theta_{x4} & \\theta_{y4}\n\\end{bmatrix}^{\\mathsf{T}}.\n$$\n\nKinematics for the Mindlin–Reissner plate are\n$$\n\\gamma_{xz} \\;=\\; \\theta_{x} \\;+\\; \\frac{\\partial w}{\\partial x},\\qquad\n\\gamma_{yz} \\;=\\; \\theta_{y} \\;+\\; \\frac{\\partial w}{\\partial y},\n$$\n$$\n\\kappa_{x} \\;=\\; \\frac{\\partial \\theta_{x}}{\\partial x},\\qquad\n\\kappa_{y} \\;=\\; \\frac{\\partial \\theta_{y}}{\\partial y},\\qquad\n\\kappa_{xy} \\;=\\; \\frac{\\partial \\theta_{x}}{\\partial y} \\;+\\; \\frac{\\partial \\theta_{y}}{\\partial x}.\n$$\n\nInterpolation of the fields with the bilinear shape functions $N_{i}$ is\n$$\nw(\\xi,\\eta) \\;=\\; \\sum_{i=1}^{4} N_{i}(\\xi,\\eta)\\,w_{i},\\qquad\n\\theta_{x}(\\xi,\\eta) \\;=\\; \\sum_{i=1}^{4} N_{i}(\\xi,\\eta)\\,\\theta_{xi},\\qquad\n\\theta_{y}(\\xi,\\eta) \\;=\\; \\sum_{i=1}^{4} N_{i}(\\xi,\\eta)\\,\\theta_{yi}.\n$$\nUsing the affine mapping for a rectangle, the Jacobian is constant and diagonal,\n$$\nJ \\;=\\; \\begin{bmatrix}\n\\frac{\\partial x}{\\partial \\xi} & \\frac{\\partial x}{\\partial \\eta}\\\\\n\\frac{\\partial y}{\\partial \\xi} & \\frac{\\partial y}{\\partial \\eta}\n\\end{bmatrix}\n\\;=\\;\n\\begin{bmatrix}\n\\frac{a}{2} & 0\\\\\n0 & \\frac{b}{2}\n\\end{bmatrix},\\qquad\n\\det J \\;=\\; \\frac{ab}{4},\n$$\nand derivatives transform as\n$$\n\\frac{\\partial}{\\partial x} \\;=\\; \\frac{2}{a}\\,\\frac{\\partial}{\\partial \\xi},\\qquad\n\\frac{\\partial}{\\partial y} \\;=\\; \\frac{2}{b}\\,\\frac{\\partial}{\\partial \\eta}.\n$$\n\nConstruction of the strain–displacement matrices proceeds by inserting the interpolations into the kinematic relations and reading off coefficients of nodal degrees of freedom. Define the generalized strain vectors\n$$\n\\{\\varepsilon^{(b)}\\} \\;=\\; \\begin{bmatrix} \\kappa_{x} & \\kappa_{y} & \\kappa_{xy} \\end{bmatrix}^{\\mathsf{T}},\\qquad\n\\{\\varepsilon^{(s)}\\} \\;=\\; \\begin{bmatrix} \\gamma_{xz} & \\gamma_{yz} \\end{bmatrix}^{\\mathsf{T}}.\n$$\nThen\n$$\n\\{\\varepsilon^{(b)}\\} \\;=\\; B^{(b)} \\{d\\},\\qquad \\{\\varepsilon^{(s)}\\} \\;=\\; B^{(s)} \\{d\\},\n$$\nwith $B^{(b)}\\in\\mathbb{R}^{3\\times 12}$ and $B^{(s)}\\in\\mathbb{R}^{2\\times 12}$ assembled node-by-node. For node $i$, the $3\\times 3$ bending contribution to $B^{(b)}$ associated with $\\{w_{i},\\theta_{xi},\\theta_{yi}\\}$ is\n$$\nB^{(b)}_{i} \\;=\\; \\begin{bmatrix}\n0 & \\dfrac{\\partial N_{i}}{\\partial x} & 0\\\\\n0 & 0 & \\dfrac{\\partial N_{i}}{\\partial y}\\\\\n0 & \\dfrac{\\partial N_{i}}{\\partial y} & \\dfrac{\\partial N_{i}}{\\partial x}\n\\end{bmatrix},\n$$\nso that $B^{(b)}$ is the horizontal concatenation of $B^{(b)}_{i}$ for $i=1,\\dots,4$ and has zero columns wherever $w_{i}$ appears (bending does not depend on $w$). For shear, the $2\\times 3$ contribution for node $i$ is\n$$\nB^{(s)}_{i} \\;=\\; \\begin{bmatrix}\n\\dfrac{\\partial N_{i}}{\\partial x} & N_{i} & 0\\\\\n\\dfrac{\\partial N_{i}}{\\partial y} & 0 & N_{i}\n\\end{bmatrix},\n$$\nso that $B^{(s)}$ is the horizontal concatenation of $B^{(s)}_{i}$ for $i=1,\\dots,4$.\n\nThe isotropic constitutive matrices for Mindlin–Reissner plates are\n$$\nD^{(b)} \\;=\\; \\frac{E t^{3}}{12\\bigl(1-\\nu^{2}\\bigr)}\\begin{bmatrix}\n1 & \\nu & 0\\\\\n\\nu & 1 & 0\\\\\n0 & 0 & \\dfrac{1-\\nu}{2}\n\\end{bmatrix},\\qquad\nD^{(s)} \\;=\\; \\kappa\\, G\\, t \\begin{bmatrix} 1 & 0\\\\ 0 & 1 \\end{bmatrix},\\quad G \\;=\\; \\frac{E}{2(1+\\nu)}.\n$$\n\nWith these, the element stiffness contributions follow from\n$$\nK_{e}^{(b)} \\;=\\; \\int_{\\Omega_{e}} \\bigl(B^{(b)}\\bigr)^{\\mathsf{T}} D^{(b)} B^{(b)}\\,\\mathrm{d}A,\\qquad\nK_{e}^{(s)} \\;=\\; \\int_{\\Omega_{e}} \\bigl(B^{(s)}\\bigr)^{\\mathsf{T}} D^{(s)} B^{(s)}\\,\\mathrm{d}A.\n$$\nIn block form, ordering the degrees of freedom as $\\{w\\}$ first and $\\{\\theta_{x},\\theta_{y}\\}$ next, one observes that\n$$\nK_{e}^{(b)} \\;=\\; \\begin{bmatrix}\n0 & 0\\\\\n0 & K_{\\theta\\theta}^{(b)}\n\\end{bmatrix},\\qquad\nK_{e}^{(s)} \\;=\\; \\begin{bmatrix}\nK_{ww}^{(s)} & K_{w\\theta}^{(s)}\\\\\n\\bigl(K_{w\\theta}^{(s)}\\bigr)^{\\mathsf{T}} & K_{\\theta\\theta}^{(s)}\n\\end{bmatrix},\n$$\nso the bending part involves only the rotational degrees of freedom, while the shear part couples transverse displacement and rotations and also contributes to $K_{ww}$.\n\nFull Gauss integration with $2\\times 2$ points on $[-1,1]^2$ uses the four points $(\\xi,\\eta)=(\\pm s,\\pm s)$ with $s=1/\\sqrt{3}$ and unit weights. The Jacobian determinant is constant, $\\det J = ab/4$, so for any integrand $f(\\xi,\\eta)$,\n$$\n\\int_{\\Omega_{e}} f\\,\\mathrm{d}A \\;=\\; \\sum_{g=1}^{4} f(\\xi_{g},\\eta_{g})\\,\\det J.\n$$\n\nWe now compute the single scalar entry requested: the $(w_{1},w_{1})$ entry of the total element stiffness $K_{e}$ obtained with full Gauss integration. As noted, bending does not depend on $w$, so this entry is contributed entirely by $K_{e}^{(s)}$. From the form of $B^{(s)}$, the $(w_{1},w_{1})$ entry is\n$$\n\\bigl[K_{e}\\bigr]_{w_{1},w_{1}} \\;=\\; \\int_{\\Omega_{e}} \\kappa\\,G\\,t\\left[\\left(\\frac{\\partial N_{1}}{\\partial x}\\right)^{2} + \\left(\\frac{\\partial N_{1}}{\\partial y}\\right)^{2}\\right]\\mathrm{d}A.\n$$\nFor the rectangle mapping, using $N_{1}(\\xi,\\eta) = \\tfrac{1}{4}(1-\\xi)(1-\\eta)$,\n$$\n\\frac{\\partial N_{1}}{\\partial \\xi} \\;=\\; -\\frac{1}{4}(1-\\eta),\\qquad\n\\frac{\\partial N_{1}}{\\partial \\eta} \\;=\\; -\\frac{1}{4}(1-\\xi),\n$$\nand thus\n$$\n\\frac{\\partial N_{1}}{\\partial x} \\;=\\; \\frac{2}{a}\\frac{\\partial N_{1}}{\\partial \\xi} \\;=\\; -\\frac{1}{2a}(1-\\eta),\\qquad\n\\frac{\\partial N_{1}}{\\partial y} \\;=\\; \\frac{2}{b}\\frac{\\partial N_{1}}{\\partial \\eta} \\;=\\; -\\frac{1}{2b}(1-\\xi).\n$$\nEvaluating the integral by full Gauss quadrature,\n$$\n\\bigl[K_{e}\\bigr]_{w_{1},w_{1}} \\;=\\; \\sum_{(\\xi,\\eta)\\in\\{\\pm s\\}^{2}} \\kappa\\,G\\,t\\left[\\frac{1}{4a^{2}}(1-\\eta)^{2} + \\frac{1}{4b^{2}}(1-\\xi)^{2}\\right]\\det J.\n$$\nBecause the set of Gauss points contains two with $\\eta=s$ and two with $\\eta=-s$, and similarly for $\\xi$, the summations separate. Let $s=1/\\sqrt{3}$. Then\n$$\n\\sum_{(\\xi,\\eta)} (1-\\eta)^{2} \\;=\\; 2\\bigl[(1-s)^{2} + (1+s)^{2}\\bigr] \\;=\\; 4(1+s^{2}),\n$$\nand the same identity holds for $\\sum_{(\\xi,\\eta)} (1-\\xi)^{2}$. Therefore,\n$$\n\\bigl[K_{e}\\bigr]_{w_{1},w_{1}} \\;=\\; \\kappa\\,G\\,t\\left[\\frac{1}{4a^{2}} + \\frac{1}{4b^{2}}\\right]\\cdot 4(1+s^{2})\\cdot \\det J.\n$$\nWith $s^{2}=\\tfrac{1}{3}$ and $\\det J=\\tfrac{ab}{4}$, this simplifies to\n$$\n\\bigl[K_{e}\\bigr]_{w_{1},w_{1}} \\;=\\; \\kappa\\,G\\,t\\left[\\frac{1}{4a^{2}} + \\frac{1}{4b^{2}}\\right]\\cdot \\frac{16}{3}\\cdot \\frac{ab}{4}\n\\;=\\; \\kappa\\,G\\,t\\cdot \\frac{ab}{3}\\left[\\frac{1}{a^{2}}+\\frac{1}{b^{2}}\\right]\n\\;=\\; \\kappa\\,G\\,t\\cdot \\frac{1}{3}\\left(\\frac{b}{a}+\\frac{a}{b}\\right).\n$$\nSubstituting $G=\\dfrac{E}{2(1+\\nu)}$ yields the final closed-form expression\n$$\n\\bigl[K_{e}\\bigr]_{w_{1},w_{1}} \\;=\\; \\frac{\\kappa\\,E\\,t}{6(1+\\nu)}\\left(\\frac{a}{b}+\\frac{b}{a}\\right).\n$$\nThe units are Newtons per meter, since $\\kappa$ is dimensionless, $E$ has units of pressure, and $t$ is length.\n\nThis completes the derivation of the element stiffness decomposition into bending and shear parts and the requested scalar stiffness entry using full Gauss integration.", "answer": "$$\\boxed{\\dfrac{\\kappa\\,E\\,t}{6(1+\\nu)}\\left(\\dfrac{a}{b}+\\dfrac{b}{a}\\right)}$$", "id": "2588744"}, {"introduction": "A theoretically sound formulation does not always lead to a practically effective finite element; verification is paramount. This final hands-on practice transitions from analytical derivation to computational implementation and testing, confronting the critical issue of 'shear locking' in Mindlin-Reissner elements [@problem_id:2588738]. By coding and comparing a standard element with advanced formulations like Reduced Integration (RI) and Mixed Interpolation of Tensorial Components (MITC) via the patch test, you will gain invaluable practical experience. This exercise demonstrates not only how to diagnose pathological element behavior but also how to implement established techniques to create robust and accurate plate elements for real-world simulations.", "problem": "Consider the first-order shear deformation (Mindlin-Reissner) plate theory with the kinematic fields given by the transverse deflection $w(x,y)$ and rotations $\\theta_x(x,y)$ and $\\theta_y(x,y)$ of the normal about the $y$- and $x$-axes, respectively. The transverse shear strains are $\\gamma_{xz} = \\theta_x + \\partial w/\\partial x$ and $\\gamma_{yz} = \\theta_y + \\partial w/\\partial y$. The bending curvatures are $\\kappa_{xx} = -\\partial \\theta_x/\\partial x$, $\\kappa_{yy} = -\\partial \\theta_y/\\partial y$, and $\\kappa_{xy} = -(\\partial \\theta_x/\\partial y + \\partial \\theta_y/\\partial x)$. In a patch test, one prescribes a deformation field that induces either a constant curvature state (pure bending) with vanishing shear, or a constant transverse shear state (pure shear) with vanishing curvature, and checks whether a finite element formulation reproduces the target strain field with zero error under exact nodal interpolation of the prescribed field.\n\nImplement and compare three four-node quadrilateral ($Q4$) Mindlin-Reissner plate elements for the patch test:\n- Standard bilinear element: $w$, $\\theta_x$, and $\\theta_y$ are interpolated with the same isoparametric bilinear shape functions. Transverse shear strains are computed directly as $\\gamma_{xz} = \\theta_x + \\partial w/\\partial x$ and $\\gamma_{yz} = \\theta_y + \\partial w/\\partial y$. Use full two-by-two Gauss integration with points at $(\\pm 1/\\sqrt{3}, \\pm 1/\\sqrt{3})$ and unit weights.\n- Reduced integration element: same kinematics, but evaluate the transverse shear strains and any shear-associated integrals using a single Gauss point at $(0,0)$ with weight $4$; bending quantities remain evaluated at the two-by-two Gauss points. For this task, for the error measures defined below, use the same evaluation rule for the shear error as specified for the reduced integration case (single Gauss point) and for the bending error as specified below (two-by-two Gauss points).\n- Mixed Interpolation of Tensorial Components (MITC): use the same bilinear interpolation for $w$, $\\theta_x$, and $\\theta_y$ for bending quantities, but construct modified transverse shear strains $\\gamma_{xz}^\\ast$ and $\\gamma_{yz}^\\ast$ by tying shear strain components at appropriate edge midpoints and interpolating them over the element in a way that enforces vanishing shear under pure bending and reproduces constant shear under pure shear states. The tying points are at the midpoints of the edges: $(\\xi, \\eta) = (0, +1)$ and $(0, -1)$ for $\\gamma_{xz}$ and $(+1, 0)$ and $(-1, 0)$ for $\\gamma_{yz}$ in the parent domain. Evaluate the error in the shear strains at the two-by-two Gauss points using the tied shear field $\\gamma^\\ast$.\n\nUse isoparametric mapping with the standard bilinear shape functions on the parent square $[-1,1]\\times[-1,1]$ and an affine image to the physical element with given nodal coordinates. For a given prescribed exact field, assign nodal values by sampling the exact field at the physical nodal coordinates.\n\nDefine two exact fields for the patch tests:\n- Pure bending about the $y$-axis with constant curvature $\\kappa_x$: $w(x,y) = \\tfrac{1}{2}\\kappa_x x^2$, $\\theta_x(x,y) = -\\kappa_x x$, and $\\theta_y(x,y) = 0$. For this state, the exact transverse shear strains are identically zero, i.e., $\\gamma_{xz} = 0$ and $\\gamma_{yz} = 0$ everywhere. Use $\\kappa_x = 1.0$ expressed in $\\text{m}^{-1}$; the resulting shear errors are dimensionless.\n- Pure transverse shear in the $x$-direction with constant $\\gamma_{xz} = \\gamma_0$ and $\\gamma_{yz} = 0$: take $w(x,y) = 0$, $\\theta_x(x,y) = \\gamma_0$, and $\\theta_y(x,y) = 0$. For this state, the exact bending curvatures are identically zero. Use $\\gamma_0 = 1.0$ (dimensionless); the resulting curvature errors are in $\\text{m}^{-1}$ units.\n\nEvaluate errors as root-mean-square (RMS) measures over the element:\n- Shear error for a given element and a given field: let $\\mathbf{\\gamma}$ denote either the direct shear strain $(\\gamma_{xz}, \\gamma_{yz})$ (for the standard and reduced integration elements) or the tied shear strain $(\\gamma_{xz}^\\ast, \\gamma_{yz}^\\ast)$ (for the MITC element). Define the RMS shear error as\n$$\n\\varepsilon_{\\text{shear}} = \\sqrt{\\frac{\\int_{\\Omega_e} \\left(\\gamma_{xz}^2 + \\gamma_{yz}^2\\right)\\, \\mathrm{d}\\Omega}{\\int_{\\Omega_e} \\mathrm{d}\\Omega}},\n$$\napproximated by the specified Gauss rule for each element as described above.\n- Bending error for a given element and a given field: let $\\boldsymbol{\\kappa} = (\\kappa_{xx}, \\kappa_{yy}, \\kappa_{xy})$ be computed directly from the interpolated rotations. Define the RMS bending error as\n$$\n\\varepsilon_{\\text{bend}} = \\sqrt{\\frac{\\int_{\\Omega_e} \\left(\\kappa_{xx}^2 + \\kappa_{yy}^2 + \\kappa_{xy}^2\\right)\\, \\mathrm{d}\\Omega}{\\int_{\\Omega_e} \\mathrm{d}\\Omega}},\n$$\napproximated with the two-by-two Gauss rule.\n\nConstruct a test suite with two element geometries (nodes ordered counterclockwise):\n- Geometry A (square): nodes at $(-0.5,-0.5)$, $(0.5,-0.5)$, $(0.5,0.5)$, $(-0.5,0.5)$ with coordinates in $\\text{m}$.\n- Geometry B (high aspect ratio rectangle): nodes at $(-2.0,-0.25)$, $(2.0,-0.25)$, $(2.0,0.25)$, $(-2.0,0.25)$ with coordinates in $\\text{m}$.\n\nFor each geometry, compute:\n- For the pure bending field: the RMS shear error $\\varepsilon_{\\text{shear}}$ for each of the three elements (standard, reduced integration, MITC).\n- For the pure shear field: the RMS bending error $\\varepsilon_{\\text{bend}}$ for each of the three elements (standard, reduced integration, MITC).\n\nYour program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets in the following order of $12$ floating-point values:\n- For Geometry A: $[\\varepsilon_{\\text{shear}}^{\\text{STD}}, \\varepsilon_{\\text{shear}}^{\\text{RI}}, \\varepsilon_{\\text{shear}}^{\\text{MITC}}, \\varepsilon_{\\text{bend}}^{\\text{STD}}, \\varepsilon_{\\text{bend}}^{\\text{RI}}, \\varepsilon_{\\text{bend}}^{\\text{MITC}}]$.\n- For Geometry B: $[\\varepsilon_{\\text{shear}}^{\\text{STD}}, \\varepsilon_{\\text{shear}}^{\\text{RI}}, \\varepsilon_{\\text{shear}}^{\\text{MITC}}, \\varepsilon_{\\text{bend}}^{\\text{STD}}, \\varepsilon_{\\text{bend}}^{\\text{RI}}, \\varepsilon_{\\text{bend}}^{\\text{MITC}}]$.\n\nAll strains are dimensionless and all curvatures are in $\\text{m}^{-1}$. Report the numerical values as decimal floating-point numbers in the order specified. The final output must be a single line of the form $[\\text{result}_1,\\text{result}_2,\\dots,\\text{result}_{12}]$.", "solution": "The problem presented is a well-defined exercise in computational mechanics, specifically within the finite element analysis of plates using Mindlin-Reissner theory. It requires the implementation and validation of three distinct four-node quadrilateral element formulations through a standard patch test. The problem is scientifically grounded, formally specified, and internally consistent. It provides all necessary data, including kinematic relations, element interpolation schemes, integration rules, prescribed deformation fields for testing, and precise error metrics. Therefore, the problem is deemed valid and a formal solution is provided below.\n\nThe solution is developed by first establishing the theoretical foundation of the isoparametric four-node Mindlin-Reissner plate element. Subsequently, the specific formulations for the standard (STD), reduced integration (RI), and Mixed Interpolation of Tensorial Components (MITC) elements are detailed. Finally, the patch test procedure and error calculations are implemented to generate the required numerical results.\n\n### 1. Mindlin-Reissner Plate Theory and Kinematics\n\nThe Mindlin-Reissner theory is a first-order shear deformation theory for plates. The kinematic state of the plate's mid-plane, located in the $x-y$ plane, is described by three independent fields: the transverse deflection $w(x,y)$ and two rotations of the cross-section, $\\theta_x(x,y)$ about the $y$-axis and $\\theta_y(x,y)$ about the $x$-axis.\n\nThe bending curvatures, denoted by the vector $\\boldsymbol{\\kappa}$, and the transverse shear strains, denoted by the vector $\\boldsymbol{\\gamma}$, are defined as:\n$$\n\\boldsymbol{\\kappa} =\n\\begin{Bmatrix} \\kappa_{xx} \\\\ \\kappa_{yy} \\\\ \\kappa_{xy} \\end{Bmatrix} =\n\\begin{Bmatrix} -\\frac{\\partial \\theta_x}{\\partial x} \\\\ -\\frac{\\partial \\theta_y}{\\partial y} \\\\ -(\\frac{\\partial \\theta_x}{\\partial y} + \\frac{\\partial \\theta_y}{\\partial x}) \\end{Bmatrix}\n\\quad , \\quad\n\\boldsymbol{\\gamma} =\n\\begin{Bmatrix} \\gamma_{xz} \\\\ \\gamma_{yz} \\end{Bmatrix} =\n\\begin{Bmatrix} \\theta_x + \\frac{\\partial w}{\\partial x} \\\\ \\theta_y + \\frac{\\partial w}{\\partial y} \\end{Bmatrix}\n$$\n\n### 2. Isoparametric Four-Node Quadrilateral ($Q4$) Element\n\nThe element geometry and kinematic fields are interpolated from nodal values using isoparametric bilinear shape functions $N_i(\\xi, \\eta)$ defined on a parent square domain $[-1,1] \\times [-1,1]$. The four shape functions are:\n$$\nN_1 = \\frac{1}{4}(1-\\xi)(1-\\eta) \\quad, \\quad N_2 = \\frac{1}{4}(1+\\xi)(1-\\eta) \\quad, \\quad N_3 = \\frac{1}{4}(1+\\xi)(1+\\eta) \\quad, \\quad N_4 = \\frac{1}{4}(1-\\xi)(1+\\eta)\n$$\nThe physical coordinates $(x,y)$ and the kinematic fields $(w, \\theta_x, \\theta_y)$ within the element are interpolated from their respective nodal values:\n$$\nx(\\xi, \\eta) = \\sum_{i=1}^4 N_i(\\xi, \\eta) x_i \\quad, \\quad y(\\xi, \\eta) = \\sum_{i=1}^4 N_i(\\xi, \\eta) y_i\n$$\n$$\nw^h(\\xi, \\eta) = \\sum_{i=1}^4 N_i(\\xi, \\eta) w_i \\quad, \\quad \\theta_x^h(\\xi, \\eta) = \\sum_{i=1}^4 N_i(\\xi, \\eta) \\theta_{xi} \\quad, \\quad \\theta_y^h(\\xi, \\eta) = \\sum_{i=1}^4 N_i(\\xi, \\eta) \\theta_{yi}\n$$\nThe superscript $h$ denotes the finite element approximation. Derivatives with respect to physical coordinates are obtained via the chain rule, which involves the Jacobian matrix $\\boldsymbol{J}$:\n$$\n\\begin{Bmatrix} \\frac{\\partial}{\\partial x} \\\\ \\frac{\\partial}{\\partial y} \\end{Bmatrix} = \\boldsymbol{J}^{-1} \\begin{Bmatrix} \\frac{\\partial}{\\partial \\xi} \\\\ \\frac{\\partial}{\\partial \\eta} \\end{Bmatrix} \\quad \\text{where} \\quad \\boldsymbol{J} = \\begin{bmatrix} \\frac{\\partial x}{\\partial \\xi} & \\frac{\\partial y}{\\partial \\xi} \\\\ \\frac{\\partial x}{\\partial \\eta} & \\frac{\\partial y}{\\partial \\eta} \\end{bmatrix} = \\begin{bmatrix} \\sum \\frac{\\partial N_i}{\\partial \\xi} x_i & \\sum \\frac{\\partial N_i}{\\partial \\xi} y_i \\\\ \\sum \\frac{\\partial N_i}{\\partial \\eta} x_i & \\sum \\frac{\\partial N_i}{\\partial \\eta} y_i \\end{bmatrix}\n$$\nThe differential area element transforms as $d\\Omega = \\det(\\boldsymbol{J}) d\\xi d\\eta$. For the specified rectangular geometries, the Jacobian $\\boldsymbol{J}$ is a constant diagonal matrix.\n\n### 3. Element Formulations and Strain Calculation\n\nThe three element formulations differ in how they compute the transverse shear strains and handle the associated numerical integration, a critical aspect for avoiding shear locking.\n\n**Standard (STD) Element:** All fields are interpolated bilinearly. Strains are computed by direct application of the kinematic definitions to the interpolated fields. Both bending and shear terms in any integral (e.g., for stiffness matrix or error norms) are evaluated using a full $2 \\times 2$ Gauss quadrature rule, with points at $(\\xi, \\eta) = (\\pm 1/\\sqrt{3}, \\pm 1/\\sqrt{3})$ and weights $w_g=1$. This formulation is known to suffer from severe shear locking, particularly for thin plates or distorted meshes.\n\n**Reduced Integration (RI) Element:** This formulation is identical to the standard element, except that integrals involving transverse shear strains are evaluated using a single Gauss point at the element center $(\\xi, \\eta) = (0,0)$ with weight $w_g=4$. For this problem, the shear error $\\varepsilon_{\\text{shear}}$ is computed using this $1 \\times 1$ rule. Bending-related integrals continue to use the $2 \\times 2$ rule. This technique often alleviates shear locking but can sometimes introduce other issues like spurious zero-energy modes.\n\n**Mixed Interpolation of Tensorial Components (MITC) Element:** This is a more sophisticated method to combat shear locking. While the bending curvatures are computed directly from the bilinearly interpolated rotations, the transverse shear strains are derived from a separate, \"tied\" interpolation.\nThe procedure is as follows:\n1.  The \"raw\" transverse shear strains, $(\\gamma_{xz}, \\gamma_{yz})$, are evaluated at specific tying points on the element edges in the parent domain. For $\\gamma_{xz}$, the tying points are $A: (\\xi=0, \\eta=-1)$ and $B: (\\xi=0, \\eta=1)$. For $\\gamma_{yz}$, the points are $C: (\\xi=-1, \\eta=0)$ and $D: (\\xi=1, \\eta=0)$.\n2.  At these points, the strains are computed from the standard kinematic definition, e.g., $\\gamma_{xz, A} = \\theta_x^h(A) + \\frac{\\partial w^h}{\\partial x}(A)$.\n3.  A modified shear strain field, $(\\gamma_{xz}^\\ast, \\gamma_{yz}^\\ast)$, is then interpolated over the element using these tied values:\n    $$\n    \\gamma_{xz}^\\ast(\\xi, \\eta) = \\frac{1}{2}(1-\\eta) \\gamma_{xz,A} + \\frac{1}{2}(1+\\eta) \\gamma_{xz,B}\n    $$\n    $$\n    \\gamma_{yz}^\\ast(\\xi, \\eta) = \\frac{1}{2}(1-\\xi) \\gamma_{yz,C} + \\frac{1}{2}(1+\\xi) \\gamma_{yz,D}\n    $$\n4.  The shear error $\\varepsilon_{\\text{shear}}$ is computed by integrating these modified strains $\\gamma^\\ast$ over the element using a $2 \\times 2$ Gauss rule.\n\n### 4. Patch Test and Error Evaluation\n\nThe patch test verifies an element's ability to exactly reproduce a constant strain state. Here, two states are tested:\n- **Pure Bending:** A field with constant curvature $\\kappa_{xx} = \\kappa_x = 1.0$ and zero transverse shear strain ($\\gamma_{xz} = \\gamma_{yz}=0$) is prescribed: $w(x,y) = \\frac{1}{2}\\kappa_x x^2$, $\\theta_x(x,y) = -\\kappa_x x$, $\\theta_y(x,y) = 0$. The numerical shear error, $\\varepsilon_{\\text{shear}}$, is computed. An ideal element should yield $\\varepsilon_{\\text{shear}} = 0$.\n- **Pure Shear:** A field with constant shear strain $\\gamma_{xz} = \\gamma_0 = 1.0$ and zero curvature ($\\kappa_{xx} = \\kappa_{yy} = \\kappa_{xy} = 0$) is prescribed: $w(x,y)=0$, $\\theta_x(x,y)=\\gamma_0$, $\\theta_y(x,y)=0$. The numerical bending error, $\\varepsilon_{\\text{bend}}$, is computed. An ideal element should yield $\\varepsilon_{\\text{bend}} = 0$.\n\nFor each test, the nodal values $(w_i, \\theta_{xi}, \\theta_{yi})$ are obtained by evaluating the prescribed analytical field at the element's physical nodal coordinates.\n\nThe errors are quantified using Root-Mean-Square (RMS) measures, calculated via numerical integration:\n$$\n\\varepsilon_{\\text{shear}} = \\sqrt{\\frac{\\sum_{g} (\\gamma_{xz}^2 + \\gamma_{yz}^2)_g w_g \\det(\\boldsymbol{J}_g)}{\\sum_{g} w_g \\det(\\boldsymbol{J}_g)}} \\quad , \\quad \\varepsilon_{\\text{bend}} = \\sqrt{\\frac{\\sum_{g} (\\kappa_{xx}^2 + \\kappa_{yy}^2 + \\kappa_{xy}^2)_g w_g \\det(\\boldsymbol{J}_g)}{\\sum_{g} w_g \\det(\\boldsymbol{J}_g)}}\n$$\nThe summation is over the Gauss points $g$ specified for each element type and strain component. The term $\\gamma$ refers to the directly computed shear strain for STD and RI elements, and to the tied strain $\\gamma^\\ast$ for the MITC element.\n\n### 5. Algorithmic Implementation\n\nThe Python code implements these procedures. A main loop iterates through the two specified geometries. For each geometry, it performs the two patch tests.\n1.  **Pure Bending Test:**\n    - Nodal degrees of freedom are calculated from the pure bending field equations.\n    - The shear error $\\varepsilon_{\\text{shear}}$ is computed for the STD, RI, and MITC elements using their respective strain calculation and integration rules.\n2.  **Pure Shear Test:**\n    - Nodal degrees of freedom are calculated from the pure shear field equations.\n    - The bending error $\\varepsilon_{\\text{bend}}$ is computed for all three elements using the $2 \\times 2$ Gauss rule.\n\nFor the simple rectangular geometries given, the finite element approximation of the pure shear field is exact, resulting in zero bending error for all element types. For the pure bending field, the bilinear element cannot exactly represent the quadratic deflection $w=\\frac{1}{2}\\kappa_x x^2$, which leads to parasitic shear strains. The standard element exhibits a non-zero shear error, demonstrating shear locking. The reduced integration and MITC formulations are designed to correct this deficiency and are expected to pass this test with zero error for rectangular elements. The results from the code align with these theoretical expectations.", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Implements and compares three Q4 Mindlin-Reissner plate elements\n    (Standard, Reduced Integration, MITC) in a patch test.\n    \"\"\"\n    \n    # --- Constants and Test Case Definitions ---\n    KAPPA_X = 1.0  # m^-1\n    GAMMA_0 = 1.0  # dimensionless\n\n    # Gauss points and weights for 2x2 integration\n    gp_val = 1.0 / np.sqrt(3.0)\n    GAUSS_2x2 = {\n        'points': [\n            (-gp_val, -gp_val), (gp_val, -gp_val),\n            (gp_val, gp_val), (-gp_val, gp_val)\n        ],\n        'weights': [1.0, 1.0, 1.0, 1.0]\n    }\n    \n    # Gauss point and weight for 1x1 integration\n    GAUSS_1x1 = {\n        'points': [(0.0, 0.0)],\n        'weights': [4.0]\n    }\n\n    geometries = {\n        'A': np.array([\n            [-0.5, -0.5], [0.5, -0.5], [0.5, 0.5], [-0.5, 0.5]\n        ]),\n        'B': np.array([\n            [-2.0, -0.25], [2.0, -0.25], [2.0, 0.25], [-2.0, 0.25]\n        ])\n    }\n\n    # --- Core FEM Helper Functions ---\n\n    def get_shape_functions(xi, eta):\n        \"\"\"Returns bilinear shape functions and their derivatives in parent coords.\"\"\"\n        N = 0.25 * np.array([\n            (1 - xi) * (1 - eta),\n            (1 + xi) * (1 - eta),\n            (1 + xi) * (1 + eta),\n            (1 - xi) * (1 + eta)\n        ])\n        dNdxi = 0.25 * np.array([\n            -(1 - eta), (1 - eta), (1 + eta), -(1 + eta)\n        ])\n        dNdeta = 0.25 * np.array([\n            -(1 - xi), -(1 + xi), (1 + xi), (1 - xi)\n        ])\n        return N, dNdxi, dNdeta\n\n    def get_jacobian_and_physical_grads(xi, eta, nodes):\n        \"\"\"Computes Jacobian, its determinant, and shape function grads in physical coords.\"\"\"\n        _, dNdxi, dNdeta = get_shape_functions(xi, eta)\n        \n        # Jacobian matrix J = [[dx/dxi, dy/dxi], [dx/deta, dy/deta]]\n        J = np.zeros((2, 2))\n        J[0, 0] = np.dot(dNdxi, nodes[:, 0])\n        J[0, 1] = np.dot(dNdxi, nodes[:, 1])\n        J[1, 0] = np.dot(dNdeta, nodes[:, 0])\n        J[1, 1] = np.dot(dNdeta, nodes[:, 1])\n        \n        detJ = np.linalg.det(J)\n        if detJ <= 0:\n            raise ValueError(\"Jacobian determinant is non-positive.\")\n        \n        J_inv = np.linalg.inv(J)\n        \n        # Gradients of shape functions w.r.t physical coordinates (x, y)\n        dG = np.vstack((dNdxi, dNdeta)) # shape (2, 4)\n        dN_dxy = J_inv @ dG # shape (2, 4)\n        dNdx = dN_dxy[0, :]\n        dNdy = dN_dxy[1, :]\n        \n        return detJ, dNdx, dNdy\n\n    # --- Element-Specific Calculation Functions ---\n\n    def calculate_errors(nodes, nodal_dofs):\n        \"\"\"\n        Calculates shear and bending errors for all three element formulations.\n        \"\"\"\n        w_nodal = nodal_dofs[:, 0]\n        th_x_nodal = nodal_dofs[:, 1]\n        th_y_nodal = nodal_dofs[:, 2]\n\n        # --- Quantities for STD and RI elements ---\n        num_shear_std, den_shear_std = 0.0, 0.0\n        num_shear_ri, den_shear_ri = 0.0, 0.0\n        num_bend_std_ri, den_bend_std_ri = 0.0, 0.0\n        \n        # Bending error (and shear for STD) uses 2x2 Gauss rule\n        for i, (xi, eta) in enumerate(GAUSS_2x2['points']):\n            w_gp = GAUSS_2x2['weights'][i]\n            N, _, _ = get_shape_functions(xi, eta)\n            detJ, dNdx, dNdy = get_jacobian_and_physical_grads(xi, eta, nodes)\n            \n            # Interpolated rotations\n            th_x = np.dot(N, th_x_nodal)\n            th_y = np.dot(N, th_y_nodal)\n            \n            # Bending curvatures\n            k_xx = -np.dot(dNdx, th_x_nodal)\n            k_yy = -np.dot(dNdy, th_y_nodal)\n            k_xy = -(np.dot(dNdy, th_x_nodal) + np.dot(dNdx, th_y_nodal))\n            \n            # Direct shear strains\n            gam_xz = th_x + np.dot(dNdx, w_nodal)\n            gam_yz = th_y + np.dot(dNdy, w_nodal)\n            \n            num_bend_std_ri += (k_xx**2 + k_yy**2 + k_xy**2) * w_gp * detJ\n            den_bend_std_ri += w_gp * detJ\n            \n            num_shear_std += (gam_xz**2 + gam_yz**2) * w_gp * detJ\n            den_shear_std += w_gp * detJ\n\n        # Shear error for RI uses 1x1 Gauss rule\n        xi_ri, eta_ri = GAUSS_1x1['points'][0]\n        w_gp_ri = GAUSS_1x1['weights'][0]\n        N_ri, _, _ = get_shape_functions(xi_ri, eta_ri)\n        detJ_ri, dNdx_ri, dNdy_ri = get_jacobian_and_physical_grads(xi_ri, eta_ri, nodes)\n        \n        th_x_ri = np.dot(N_ri, th_x_nodal)\n        gam_xz_ri = th_x_ri + np.dot(dNdx_ri, w_nodal)\n        th_y_ri = np.dot(N_ri, th_y_nodal)\n        gam_yz_ri = th_y_ri + np.dot(dNdy_ri, w_nodal)\n        \n        num_shear_ri = (gam_xz_ri**2 + gam_yz_ri**2) * w_gp_ri * detJ_ri\n        den_shear_ri = w_gp_ri * detJ_ri\n\n        eps_shear_std = np.sqrt(num_shear_std / den_shear_std)\n        eps_shear_ri = np.sqrt(num_shear_ri / den_shear_ri)\n        eps_bend_std = np.sqrt(num_bend_std_ri / den_bend_std_ri)\n        eps_bend_ri = eps_bend_std # Same bending formulation\n\n        # --- Quantities for MITC element ---\n        tying_points = {\n            'A': (0.0, -1.0), 'B': (0.0, 1.0), # for gamma_xz\n            'C': (-1.0, 0.0), 'D': (1.0, 0.0)  # for gamma_yz\n        }\n        \n        tied_strains = {}\n        for name, (xi, eta) in tying_points.items():\n            N, _, _ = get_shape_functions(xi, eta)\n            _, dNdx, dNdy = get_jacobian_and_physical_grads(xi, eta, nodes)\n            th_x = np.dot(N, th_x_nodal)\n            th_y = np.dot(N, th_y_nodal)\n            gam_xz = th_x + np.dot(dNdx, w_nodal)\n            gam_yz = th_y + np.dot(dNdy, w_nodal)\n            tied_strains[name] = (gam_xz, gam_yz)\n        \n        gam_xz_A = tied_strains['A'][0]\n        gam_xz_B = tied_strains['B'][0]\n        gam_yz_C = tied_strains['C'][1]\n        gam_yz_D = tied_strains['D'][1]\n\n        num_shear_mitc, den_shear_mitc = 0.0, 0.0\n        for i, (xi, eta) in enumerate(GAUSS_2x2['points']):\n            w_gp = GAUSS_2x2['weights'][i]\n            detJ, _, _ = get_jacobian_and_physical_grads(xi, eta, nodes)\n            \n            # Interpolated tied shear strains\n            gam_xz_star = 0.5 * (1 - eta) * gam_xz_A + 0.5 * (1 + eta) * gam_xz_B\n            gam_yz_star = 0.5 * (1 - xi) * gam_yz_C + 0.5 * (1 + xi) * gam_yz_D\n            \n            num_shear_mitc += (gam_xz_star**2 + gam_yz_star**2) * w_gp * detJ\n            den_shear_mitc += w_gp * detJ\n        \n        eps_shear_mitc = np.sqrt(num_shear_mitc / den_shear_mitc)\n        eps_bend_mitc = eps_bend_std # Same bending formulation\n        \n        return {\n            'shear_std': eps_shear_std, 'shear_ri': eps_shear_ri, 'shear_mitc': eps_shear_mitc,\n            'bend_std': eps_bend_std, 'bend_ri': eps_bend_ri, 'bend_mitc': eps_bend_mitc\n        }\n\n    # --- Main Calculation Loop ---\n    all_results = []\n    \n    for geom_name in sorted(geometries.keys()):\n        nodes = geometries[geom_name]\n        \n        # 1. Pure Bending Patch Test (compute shear error)\n        dofs_bending_test = np.zeros((4, 3))\n        dofs_bending_test[:, 0] = 0.5 * KAPPA_X * nodes[:, 0]**2  # w\n        dofs_bending_test[:, 1] = -KAPPA_X * nodes[:, 0]        # theta_x\n        dofs_bending_test[:, 2] = 0.0                           # theta_y\n        \n        errors_bending_test = calculate_errors(nodes, dofs_bending_test)\n        all_results.append(errors_bending_test['shear_std'])\n        all_results.append(errors_bending_test['shear_ri'])\n        all_results.append(errors_bending_test['shear_mitc'])\n        \n        # 2. Pure Shear Patch Test (compute bending error)\n        dofs_shear_test = np.zeros((4, 3))\n        dofs_shear_test[:, 0] = 0.0                             # w\n        dofs_shear_test[:, 1] = GAMMA_0                         # theta_x\n        dofs_shear_test[:, 2] = 0.0                             # theta_y\n        \n        errors_shear_test = calculate_errors(nodes, dofs_shear_test)\n        all_results.append(errors_shear_test['bend_std'])\n        all_results.append(errors_shear_test['bend_ri'])\n        all_results.append(errors_shear_test['bend_mitc'])\n\n    # Format and print the final output\n    print(f\"[{','.join(f'{r:.15g}' for r in all_results)}]\")\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "2588738"}]}