{"hands_on_practices": [{"introduction": "We begin with the fundamentals of continuum mechanics. This practice reinforces the core relationships between load, shear, moment, and deflection as described by Euler-Bernoulli beam theory. By deriving the governing differential equation and solving a classic boundary value problem by hand [@problem_id:2556579], you will build a strong intuition for the beam's physical behavior and the mathematical model that underpins its analysis, providing an essential analytical benchmark for numerical methods.", "problem": "Consider a slender prismatic beam of length $L$, flexural rigidity $E I$ (with $E$ the Young’s modulus and $I$ the second moment of area, both constant along the span), and small transverse deflections $w(x)$ measured positive in the downward direction. The beam is clamped at $x=0$ and free at $x=L$. A static concentrated transverse load of magnitude $P$ acts at the free end $x=L$ in the positive (downward) direction. Assume the Euler–Bernoulli kinematic hypothesis (plane sections remain plane and normal to the deformed centerline) and linear elasticity, and neglect axial deformation and rotary inertia.\n\nStarting from first principles appropriate for the Euler–Bernoulli beam used in the Finite Element Method (FEM)—namely:\n- the curvature–bending moment relation based on small rotations, the linear elastic constitutive law, and the Euler–Bernoulli kinematics,\n- and the static equilibrium relations for internal shear force and bending moment derived from Newton’s laws—\n\nderive the governing differential equation for the transverse displacement $w(x)$ in the absence of distributed loading, determine the appropriate boundary conditions for the clamped-free beam with an end load $P$, and solve the boundary value problem to obtain the closed-form transverse deflection field $w(x)$ over $0 \\le x \\le L$.\n\nExpress your final answer as a single closed-form analytic expression for $w(x)$ in terms of $P$, $E$, $I$, $L$, and $x$. Do not substitute numerical values. Do not include units in your final boxed answer. No rounding is required.", "solution": "The problem as stated is a classical exercise in linear beam theory. It is well-posed, scientifically grounded, and contains all necessary information to derive a unique solution. Therefore, the problem is valid. We proceed with the derivation.\n\nThe derivation requires establishing the governing differential equation from first principles and then solving it subject to the specified boundary conditions.\n\nFirst, we establish a consistent sign convention:\n1.  The coordinate $x$ runs from $0$ at the clamped end to $L$ at the free end.\n2.  The transverse deflection $w(x)$ is positive in the downward direction.\n3.  The bending moment $M(x)$ is positive if it causes tension on the bottom fibers of the beam. A positive moment causes the beam to sag, resulting in a concave-up curvature.\n4.  The internal shear force $V(x)$ and distributed load $q(x)$ are also taken as positive in the downward direction.\n\nWe begin with the **static equilibrium relations**. Consider a differential element of the beam of length $dx$, located at a position $x$.\nFor vertical force equilibrium, the sum of downward forces is zero:\n$$V(x) + q(x)dx - V(x+dx) = 0$$\nUsing the Taylor expansion $V(x+dx) = V(x) + \\frac{dV}{dx}dx + O(dx^2)$, this simplifies to:\n$$q(x)dx - \\frac{dV}{dx}dx = 0 \\implies \\frac{dV(x)}{dx} = q(x)$$\nFor moment equilibrium about the right end of the element (at $x+dx$):\n$$M(x+dx) - M(x) - V(x)dx - q(x)dx \\frac{dx}{2} = 0$$\nDividing by $dx$ and taking the limit as $dx \\to 0$, we neglect the higher-order term:\n$$\\frac{dM(x)}{dx} = V(x)$$\n\nNext, we establish the **curvature–bending moment relation**. The linear elastic constitutive law is $M(x) = EI\\kappa$. We must relate the curvature $\\kappa$ to the deflection $w(x)$ based on our sign conventions. Our convention is: (1) $w$ is positive downwards, and (2) a positive moment $M$ causes a concave-up sag. A concave-up curve in a downward-positive coordinate system has a negative second derivative (e.g., the parabola $w(x) = C - kx^2$ has $w''  0$). Thus, a positive moment (positive curvature) must correspond to a negative $w''(x)$. The relation is therefore $\\kappa = -w''(x)$. This yields the correct moment-curvature equation:\n$$M(x) = -EI \\frac{d^2w(x)}{dx^2}$$\n\nNow, we combine the equilibrium and constitutive relations to derive the **governing differential equation**.\n$$V(x) = \\frac{dM(x)}{dx} = -EI \\frac{d^3w(x)}{dx^3}$$\n$$\\frac{dV(x)}{dx} = q(x) \\implies -EI \\frac{d^4w(x)}{dx^4} = q(x)$$\n$$EI \\frac{d^4w(x)}{dx^4} = -q(x)$$\nThe problem specifies no distributed loading, so $q(x)=0$. The governing differential equation for the beam is therefore:\n$$EI \\frac{d^4w(x)}{dx^4} = 0$$\n\nThe general solution to this ordinary differential equation is a cubic polynomial, found by integrating four times with respect to $x$:\n$$w(x) = \\frac{C_1}{6}x^3 + \\frac{C_2}{2}x^2 + C_3x + C_4$$\nThe four constants of integration ($C_1$, $C_2$, $C_3$, $C_4$) are determined by the four **boundary conditions**.\n\nThe beam is clamped at $x=0$, which means both the deflection and the slope are zero:\n1.  $w(0) = 0$ (zero deflection)\n2.  $\\frac{dw}{dx}(0) = 0$ (zero slope)\n\nThe beam is free at $x=L$, but with a concentrated load $P$ acting in the positive (downward) direction. A free end implies zero internal bending moment and a shear force that balances any applied point load.\n3.  $M(L) = 0$ (zero bending moment). Using our derived relation:\n    $$-EI \\frac{d^2w}{dx^2}(L) = 0 \\implies \\frac{d^2w}{dx^2}(L) = 0$$\n4.  $V(L) = P$ (shear force equals the point load). The shear force on the cross-section at $x=L^-$ must balance the downward load $P$. With our sign convention (shear positive downwards), this means $V(L)=P$. Using our derived relation:\n    $$-EI \\frac{d^3w}{dx^3}(L) = P \\implies \\frac{d^3w}{dx^3}(L) = -\\frac{P}{EI}$$\n\nNow we apply these four boundary conditions to the general solution:\nFrom $w(0)=0$:\n$$w(0) = \\frac{C_1}{6}(0)^3 + \\frac{C_2}{2}(0)^2 + C_3(0) + C_4 = 0 \\implies C_4 = 0$$\n\nFrom $\\frac{dw}{dx}(0)=0$:\nFirst, find the derivative of the general solution: $\\frac{dw}{dx} = \\frac{C_1}{2}x^2 + C_2x + C_3$.\n$$\\frac{dw}{dx}(0) = \\frac{C_1}{2}(0)^2 + C_2(0) + C_3 = 0 \\implies C_3 = 0$$\n\nFrom $\\frac{d^2w}{dx^2}(L)=0$:\nFind the second derivative: $\\frac{d^2w}{dx^2} = C_1x + C_2$.\n$$\\frac{d^2w}{dx^2}(L) = C_1L + C_2 = 0 \\implies C_2 = -C_1L$$\n\nFrom $\\frac{d^3w}{dx^3}(L) = -\\frac{P}{EI}$:\nFind the third derivative: $\\frac{d^3w}{dx^3} = C_1$.\n$$\\frac{d^3w}{dx^3}(L) = C_1 = -\\frac{P}{EI}$$\n\nNow we can determine all the constants.\n$$C_1 = -\\frac{P}{EI}$$\n$$C_2 = -C_1L = - \\left(-\\frac{P}{EI}\\right)L = \\frac{PL}{EI}$$\n$$C_3 = 0$$\n$$C_4 = 0$$\n\nFinally, substitute these constants back into the general solution for $w(x)$:\n$$w(x) = \\left(-\\frac{P}{EI}\\right) \\frac{x^3}{6} + \\left(\\frac{PL}{EI}\\right) \\frac{x^2}{2} + 0 \\cdot x + 0$$\n$$w(x) = \\frac{P}{EI} \\left(-\\frac{x^3}{6} + \\frac{Lx^2}{2}\\right)$$\nFactoring out common terms gives the final closed-form expression for the transverse deflection field:\n$$w(x) = \\frac{Px^2}{6EI} (3L - x)$$\nThis expression correctly gives a positive (downward) deflection for $0 \\le x \\le L$, and correctly evaluates to the well-known maximum deflection of $w(L) = \\frac{PL^3}{3EI}$ at the free end.", "answer": "$$\n\\boxed{\\frac{P x^{2}}{6 E I} (3 L - x)}\n$$", "id": "2556579"}, {"introduction": "Next, we bridge the gap between continuous theory and the finite element method (FEM). This essential exercise guides you through the derivation of the element stiffness matrix, the fundamental building block for any FEM analysis of beam structures [@problem_id:2556574]. Using the principle of virtual work and cubic Hermite interpolation, you will see precisely how the continuous physics of bending is encoded into a discrete matrix format ready for computational implementation.", "problem": "Consider a prismatic Euler–Bernoulli beam finite element within the finite element method (FEM) having constant Young’s modulus $E$, constant second moment of area $I$, and element length $L_{e}$. Adopt the classical Euler–Bernoulli kinematics for small deflection bending: cross-sections remain plane and normal to the deformed centerline, so the rotation field equals the slope, $\\theta(x)=\\dfrac{dw}{dx}$, and the curvature is $\\kappa(x)=\\dfrac{d\\theta}{dx}=\\dfrac{d^{2}w}{dx^{2}}$. Let the element have two nodes, with nodal degrees of freedom collected as\n$$\n\\mathbf{q}_{e}=\\begin{pmatrix} w_{1}  \\theta_{1}  w_{2}  \\theta_{2}\\end{pmatrix}^{\\mathsf{T}},\n$$\nwhere $w_{a}$ is the transverse displacement and $\\theta_{a}$ is the slope at node $a\\in\\{1,2\\}$. Using the principle of virtual work and a $C^{1}$-continuous interpolation that exactly reproduces both nodal displacement and slope, derive the exact $4\\times 4$ bending stiffness matrix $\\mathbf{K}_{e}$ such that the nodal force vector $\\mathbf{f}_{e}=\\begin{pmatrix} V_{1}  M_{1}  V_{2}  M_{2}\\end{pmatrix}^{\\mathsf{T}}$ satisfies $\\mathbf{f}_{e}=\\mathbf{K}_{e}\\mathbf{q}_{e}$ in the absence of distributed loading, where $V_{a}$ and $M_{a}$ are the shear force and bending moment at node $a$.\n\nStart from fundamental definitions only: internal virtual work $\\delta U=\\displaystyle\\int_{0}^{L_{e}} M\\,\\delta\\kappa\\,dx$, linear elastic bending $M=E I\\,\\kappa$, and the kinematic relation $\\kappa=\\dfrac{d^{2}w}{dx^{2}}$. Construct the required interpolation for $w(x)$ that enforces $C^{1}$ continuity and the nodal value and slope reproduction, and from it obtain the curvature-displacement operator. Assemble the element stiffness as a consistent quadratic form in this operator, integrated over the element.\n\nExpress your final answer as a single, closed-form $4\\times 4$ matrix in terms of $E$, $I$, and $L_{e}$. No numerical evaluation is required; no rounding is needed. Do not include physical units in your final boxed expression.", "solution": "The problem requires the derivation of the bending stiffness matrix for a two-node Euler-Bernoulli beam element. The derivation must be founded on the principle of virtual work, utilizing an appropriate interpolation scheme for the transverse displacement field $w(x)$.\n\nThe fundamental statement of the principle of virtual work equates the internal virtual work $\\delta U$ to the external virtual work $\\delta W_{\\text{ext}}$. For a beam element subjected only to nodal forces and moments, this is expressed as:\n$$\n\\delta U = \\delta W_{\\text{ext}}\n$$\nThe external virtual work is the work done by the nodal forces $\\mathbf{f}_{e}$ through the virtual nodal displacements $\\delta\\mathbf{q}_{e}$:\n$$\n\\delta W_{\\text{ext}} = \\delta w_1 V_1 + \\delta \\theta_1 M_1 + \\delta w_2 V_2 + \\delta \\theta_2 M_2 = \\delta\\mathbf{q}_{e}^{\\mathsf{T}} \\mathbf{f}_{e}\n$$\nThe internal virtual work, or the virtual strain energy, is given by the integral of the product of the bending moment $M$ and the virtual curvature $\\delta\\kappa$ over the element length $L_e$:\n$$\n\\delta U = \\int_{0}^{L_{e}} M \\, \\delta\\kappa \\, dx\n$$\nThe problem specifies the linear elastic constitutive relation $M = EI\\kappa$, where $E$ is the Young's modulus and $I$ is the second moment of area, both constant. Substituting this into the expression for $\\delta U$:\n$$\n\\delta U = \\int_{0}^{L_{e}} (EI\\kappa) \\, \\delta\\kappa \\, dx\n$$\nTo proceed, the displacement field $w(x)$ must be interpolated from the nodal degrees of freedom $\\mathbf{q}_{e} = \\begin{pmatrix} w_{1}  \\theta_{1}  w_{2}  \\theta_{2}\\end{pmatrix}^{\\mathsf{T}}$. The governing differential equation for Euler-Bernoulli beams is of fourth order, and we have four nodal degrees of freedom. This suggests a cubic polynomial interpolation for $w(x)$, which is the lowest-order polynomial that can satisfy the four nodal conditions and ensure $C^{1}$ continuity (continuity of displacement $w$ and slope $\\theta = dw/dx$) across element boundaries.\nLet the displacement field be represented as $w(x) = \\mathbf{N}(x)\\mathbf{q}_{e}$, where $\\mathbf{N}(x)$ is a $1 \\times 4$ row vector of shape functions.\n$$\nw(x) = N_1(x) w_1 + N_2(x) \\theta_1 + N_3(x) w_2 + N_4(x) \\theta_2\n$$\nThese shape functions are the standard Hermite cubic polynomials, defined over a local coordinate domain $x \\in [0, L_e]$. They are determined by enforcing the nodal conditions:\n\\begin{itemize}\n    \\item $w(0) = w_1$, $\\frac{dw}{dx}(0) = \\theta_1$\n    \\item $w(L_e) = w_2$, $\\frac{dw}{dx}(L_e) = \\theta_2$\n\\end{itemize}\nThe resulting shape functions are:\n$$\n\\begin{aligned}\nN_1(x) = 1 - 3\\left(\\frac{x}{L_e}\\right)^2 + 2\\left(\\frac{x}{L_e}\\right)^3 \\\\\nN_2(x) = x - 2L_e\\left(\\frac{x}{L_e}\\right)^2 + L_e\\left(\\frac{x}{L_e}\\right)^3 = x \\left(1 - \\frac{x}{L_e}\\right)^2 \\\\\nN_3(x) = 3\\left(\\frac{x}{L_e}\\right)^2 - 2\\left(\\frac{x}{L_e}\\right)^3 \\\\\nN_4(x) = -L_e\\left(\\frac{x}{L_e}\\right)^2 + L_e\\left(\\frac{x}{L_e}\\right)^3 = \\frac{x^2}{L_e} \\left(\\frac{x}{L_e} - 1\\right)\n\\end{aligned}\n$$\nThe curvature $\\kappa$ is the second derivative of the displacement: $\\kappa(x) = \\frac{d^2w}{dx^2}$. Differentiating the interpolated displacement field, we obtain the curvature-displacement relationship:\n$$\n\\kappa(x) = \\frac{d^2}{dx^2} \\left( \\mathbf{N}(x)\\mathbf{q}_{e} \\right) = \\left( \\frac{d^2\\mathbf{N}(x)}{dx^2} \\right) \\mathbf{q}_{e} = \\mathbf{B}(x) \\mathbf{q}_{e}\n$$\nwhere $\\mathbf{B}(x)$ is the strain-displacement operator, a $1 \\times 4$ row vector containing the second derivatives of the shape functions:\n$$\n\\mathbf{B}(x) = \\begin{pmatrix} N_1''(x)  N_2''(x)  N_3''(x)  N_4''(x) \\end{pmatrix}\n$$\nThe second derivatives are:\n$$\n\\begin{aligned}\nN_1''(x) = \\frac{1}{L_e^2}\\left(-6 + 12\\frac{x}{L_e}\\right) \\\\\nN_2''(x) = \\frac{1}{L_e}\\left(-4 + 6\\frac{x}{L_e}\\right) \\\\\nN_3''(x) = \\frac{1}{L_e^2}\\left(6 - 12\\frac{x}{L_e}\\right) \\\\\nN_4''(x) = \\frac{1}{L_e}\\left(-2 + 6\\frac{x}{L_e}\\right)\n\\end{aligned}\n$$\nThe virtual curvature is then $\\delta\\kappa(x) = \\mathbf{B}(x)\\delta\\mathbf{q}_{e}$. Substituting the expressions for $\\kappa$ and $\\delta\\kappa$ into the internal virtual work equation:\n$$\n\\delta U = \\int_{0}^{L_{e}} EI \\left( \\mathbf{B}(x) \\mathbf{q}_{e} \\right)^{\\mathsf{T}} \\left( \\mathbf{B}(x) \\delta\\mathbf{q}_{e} \\right) dx = \\int_{0}^{L_{e}} \\left( \\delta\\mathbf{q}_{e}^{\\mathsf{T}} \\mathbf{B}(x)^{\\mathsf{T}} \\right) EI \\left( \\mathbf{B}(x) \\mathbf{q}_{e} \\right) dx\n$$\nSince $\\mathbf{q}_{e}$ and $\\delta\\mathbf{q}_{e}$ are constant vectors with respect to integration over $x$, we can write:\n$$\n\\delta U = \\delta\\mathbf{q}_{e}^{\\mathsf{T}} \\left( \\int_{0}^{L_{e}} EI \\mathbf{B}(x)^{\\mathsf{T}} \\mathbf{B}(x) \\, dx \\right) \\mathbf{q}_{e}\n$$\nEquating internal and external virtual work, $\\delta\\mathbf{q}_{e}^{\\mathsf{T}} \\mathbf{f}_{e} = \\delta U$, we get:\n$$\n\\delta\\mathbf{q}_{e}^{\\mathsf{T}} \\mathbf{f}_{e} = \\delta\\mathbf{q}_{e}^{\\mathsf{T}} \\left( \\int_{0}^{L_{e}} EI \\mathbf{B}(x)^{\\mathsf{T}} \\mathbf{B}(x) \\, dx \\right) \\mathbf{q}_{e}\n$$\nAs this must hold for any arbitrary virtual displacement $\\delta\\mathbf{q}_{e} \\neq \\mathbf{0}$, we obtain the element force-displacement relationship $\\mathbf{f}_{e} = \\mathbf{K}_{e}\\mathbf{q}_{e}$, where the stiffness matrix $\\mathbf{K}_{e}$ is:\n$$\n\\mathbf{K}_{e} = \\int_{0}^{L_{e}} EI \\, \\mathbf{B}(x)^{\\mathsf{T}} \\mathbf{B}(x) \\, dx\n$$\nThe components of the stiffness matrix, $K_{ij}$, are computed as $K_{ij} = \\int_{0}^{L_{e}} EI \\, B_i(x) B_j(x) \\, dx$. We perform a change of variables to a non-dimensional coordinate $\\xi = x/L_e$, so $dx = L_e d\\xi$. The integration limits become $0$ to $1$. The components of $\\mathbf{B}$ become:\n$B_1(\\xi) = \\frac{1}{L_e^2}(-6+12\\xi)$, $B_2(\\xi) = \\frac{1}{L_e}(-4+6\\xi)$, $B_3(\\xi) = \\frac{1}{L_e^2}(6-12\\xi)$, $B_4(\\xi) = \\frac{1}{L_e}(-2+6\\xi)$.\nWe calculate the necessary integrals. For example, for the $K_{11}$ component:\n$$\nK_{11} = EI \\int_0^1 \\left(\\frac{1}{L_e^2}(-6+12\\xi)\\right)^2 L_e \\, d\\xi = \\frac{EI}{L_e^3} \\int_0^1 (36 - 144\\xi + 144\\xi^2) \\, d\\xi = \\frac{EI}{L_e^3} [36\\xi - 72\\xi^2 + 48\\xi^3]_0^1 = \\frac{12EI}{L_e^3}\n$$\nFor the $K_{12}$ component:\n$$\nK_{12} = EI \\int_0^1 \\left(\\frac{-6+12\\xi}{L_e^2}\\right)\\left(\\frac{-4+6\\xi}{L_e}\\right) L_e \\, d\\xi = \\frac{EI}{L_e^2} \\int_0^1 (24 - 84\\xi + 72\\xi^2) \\, d\\xi = \\frac{EI}{L_e^2} [24\\xi - 42\\xi^2 + 24\\xi^3]_0^1 = \\frac{6EI}{L_e^2}\n$$\nFor the $K_{22}$ component:\n$$\nK_{22} = EI \\int_0^1 \\left(\\frac{-4+6\\xi}{L_e}\\right)^2 L_e \\, d\\xi = \\frac{EI}{L_e} \\int_0^1 (16 - 48\\xi + 36\\xi^2) \\, d\\xi = \\frac{EI}{L_e} [16\\xi - 24\\xi^2 + 12\\xi^3]_0^1 = \\frac{4EI}{L_e}\n$$\nThe remaining components are computed similarly, or deduced from symmetry and antisymmetry properties of the shape function derivatives ($N_3''(x) = -N_1''(x)$). This leads to relationships like $K_{13} = -K_{11}$ and $K_{33} = K_{11}$. After calculating all unique components and assembling them, we obtain the element stiffness matrix. Pulling out a common factor of $\\frac{EI}{L_e^3}$ yields the final matrix.\n$$\n\\mathbf{K}_{e} = \\frac{EI}{L_e^3}\n\\begin{pmatrix}\n12  6L_e  -12  6L_e \\\\\n6L_e  4L_e^2  -6L_e  2L_e^2 \\\\\n-12  -6L_e  12  -6L_e \\\\\n6L_e  2L_e^2  -6L_e  4L_e^2\n\\end{pmatrix}\n$$\nThis is the exact bending stiffness matrix for a prismatic Euler-Bernoulli beam element under the assumption of a cubic displacement field.", "answer": "$$\n\\boxed{\\frac{EI}{L_{e}^{3}} \\begin{pmatrix} 12  6 L_{e}  -12  6 L_{e} \\\\ 6 L_{e}  4 L_{e}^{2}  -6 L_{e}  2 L_{e}^{2} \\\\ -12  -6 L_{e}  12  -6 L_{e} \\\\ 6 L_{e}  2 L_{e}^{2}  -6 L_{e}  4 L_{e}^{2} \\end{pmatrix}}\n$$", "id": "2556574"}, {"introduction": "Finally, we apply our knowledge to a practical and critical engineering problem: structural stability. This hands-on computational practice requires assembling both the standard stiffness matrix and a geometric stiffness matrix to capture the destabilizing effects of an axial compressive load [@problem_id:2556607]. By implementing and solving the resulting linear buckling eigenproblem, you will compute the critical buckling load and verify your model's convergence towards the exact analytical solution, a cornerstone of numerical verification.", "problem": "Consider a slender, prismatic beam governed by Euler-Bernoulli kinematics: a transverse displacement field $w(x)$ over a span of length $L$, small deflection/rotation, plane cross-sections that remain plane and normal to the neutral axis, and curvature $\\kappa(x) = d^2 w/dx^2$. Let the beam have a constant bending rigidity $E I$ and be subjected to a uniform axial compressive load $P$ producing classical linear elastic buckling. Use the Finite Element Method (FEM) with two degrees of freedom per node, the transverse displacement $w$ and the cross-section rotation $\\theta = dw/dx$, approximated over each element by cubic Hermite interpolation. Starting from the principle of virtual work and the definition of internal bending energy, construct the element bending stiffness and the geometric stiffness that arises from the second-order work of the axial force. Assemble the global system and impose simple supports at both ends (pinned-pinned): $w(0)=0$ and $w(L)=0$, with end rotations unconstrained. Formulate and solve the generalized linear buckling eigenproblem to obtain the smallest positive critical load.\n\nYour derivation and implementation must be based only on fundamental laws and core definitions such as the Euler-Bernoulli beam kinematics, the principle of virtual work, and energy expressions for bending and axial pre-stress. Do not use any pre-derived shortcut formulas that bypass these bases. The analytical continuum reference for the fundamental pinned-pinned buckling load must be obtained from first principles of the same theory and used for verification. All calculations must be carried out in the International System of Units (SI): $E$ in pascals (newtons per square meter), $I$ in meters to the fourth power, $L$ in meters, and buckling loads in newtons. The final numerical outputs required below are dimensionless relative errors; therefore, no physical unit is associated with those outputs.\n\nImplement a program that, for each test case described below, computes:\n- the smallest positive buckling eigenvalue $P_{\\text{FE}}$ in newtons obtained from the generalized eigenproblem of the assembled FEM model, and\n- the relative error $|P_{\\text{FE}} - P_{\\text{exact}}| / P_{\\text{exact}}$, where $P_{\\text{exact}}$ is the exact analytical fundamental buckling load derived from continuum theory for pinned-pinned boundary conditions.\n\nYour program must solve the following test suite, each specified as a tuple $(E, I, L, N)$ where $N$ is the number of equal-length finite elements:\n- Test A (mesh refinement on a steel-like beam): $(E, I, L, N) = (210 \\times 10^9, 8.1 \\times 10^{-6}, 2.0, 1)$\n- Test B: $(E, I, L, N) = (210 \\times 10^9, 8.1 \\times 10^{-6}, 2.0, 2)$\n- Test C: $(E, I, L, N) = (210 \\times 10^9, 8.1 \\times 10^{-6}, 2.0, 4)$\n- Test D: $(E, I, L, N) = (210 \\times 10^9, 8.1 \\times 10^{-6}, 2.0, 8)$\n- Test E: $(E, I, L, N) = (210 \\times 10^9, 8.1 \\times 10^{-6}, 2.0, 16)$\n- Test F (different material and geometry): $(E, I, L, N) = (70 \\times 10^9, 3.2 \\times 10^{-6}, 1.5, 12)$\n- Test G (very slender beam): $(E, I, L, N) = (200 \\times 10^9, 5.0 \\times 10^{-8}, 10.0, 40)$\n\nFor each test case, compute the relative error as a decimal number. Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets in the order A through G, for example, $[a,b,c,d,e,f,g]$. Angles (if any intermediate angles are handled) must be in radians. No user input is provided; all data are as above. The numerical method must be general: do not hard-code any exact buckling load values; derive the analytical benchmark from continuum Euler-Bernoulli theory within the program and use it for comparison. The final output is the list of seven floating-point relative errors corresponding to tests A through G, in that exact order, expressed as decimal numbers.", "solution": "The problem statement is evaluated and determined to be valid. It is scientifically grounded, well-posed, objective, and contains all necessary information to formulate and solve for the requested quantities. The problem is a classical application of the Finite Element Method to the linear elastic buckling analysis of a beam, based on established principles of continuum mechanics and virtual work.\n\nThe solution proceeds as follows. First, the continuum mechanics formulation is used to derive the exact analytical solution for the fundamental buckling load, which will serve as a benchmark. Second, the finite element formulation is derived from the principle of virtual work, leading to the element stiffness and geometric stiffness matrices. Third, the procedure for assembling the global system, applying boundary conditions, and solving the resulting generalized eigenvalue problem is detailed.\n\nThe governing principle for linear elastic buckling is derived from the second variation of the total potential energy being zero, $\\delta^2 \\Pi = 0$. For a beam with bending rigidity $EI$ under a compressive axial load $P$, this condition can be expressed using the principle of virtual work as the balance between the internal virtual work of bending stresses and the virtual work done by the axial force $P$ acting through the displacements of a buckled configuration. The resulting weak form for the virtual transverse displacement $\\delta w$ is:\n$$ \\delta U - \\delta W_P = \\int_{0}^{L} EI \\frac{d^2w}{dx^2} \\frac{d^2(\\delta w)}{dx^2} \\,dx - P \\int_{0}^{L} \\frac{dw}{dx} \\frac{d(\\delta w)}{dx} \\,dx = 0 $$\nwhere $w(x)$ is the transverse displacement field.\n\nFirst, we derive the exact analytical solution from the strong form of the governing equation. This is obtained by integrating the weak form by parts and applying the fundamental lemma of calculus of variations. The resulting Euler-Lagrange equation is the well-known fourth-order ordinary differential equation for beam buckling:\n$$ EI \\frac{d^4 w}{dx^4} + P \\frac{d^2 w}{dx^2} = 0 $$\nLet us define $k^2 = P / (EI)$. The equation becomes $\\frac{d^4 w}{dx^4} + k^2 \\frac{d^2 w}{dx^2} = 0$. The general solution is:\n$$ w(x) = C_1 \\sin(kx) + C_2 \\cos(kx) + C_3 x + C_4 $$\nThe boundary conditions for a pinned-pinned beam (simple supports) are zero displacement and zero bending moment at both ends:\n$1.$ $w(0) = 0$\n$2.$ $w(L) = 0$\n$3.$ $M(0) = -EI \\frac{d^2 w}{dx^2}|_{x=0} = 0$\n$4.$ $M(L) = -EI \\frac{d^2 w}{dx^2}|_{x=L} = 0$\n\nApplying these conditions sequentially:\nFrom $w(0)=0$: $C_2 + C_4 = 0$.\nFrom $M(0)=0$: $\\frac{d^2 w}{dx^2} = -k^2(C_1 \\sin(kx) + C_2 \\cos(kx))$. At $x=0$, this gives $-k^2 C_2 = 0$. Since $k \\neq 0$ for a non-trivial solution, we must have $C_2 = 0$. This implies $C_4 = 0$.\nThe solution reduces to $w(x) = C_1 \\sin(kx) + C_3 x$.\nFrom $w(L)=0$: $C_1 \\sin(kL) + C_3 L = 0$.\nFrom $M(L)=0$: $-EI(-k^2 C_1 \\sin(kL)) = 0$, which simplifies to $C_1 \\sin(kL) = 0$.\nFor a non-trivial buckled shape, $C_1$ cannot be zero. Therefore, we must have $\\sin(kL) = 0$. This also implies from the previous condition that $C_3 L = 0$, so $C_3 = 0$.\nThe eigenvalue equation is $\\sin(kL) = 0$, which yields $kL = n\\pi$ for any integer $n \\geq 1$.\nSubstituting $k = \\sqrt{P/(EI)}$, we find the critical loads:\n$$ P_n = \\frac{n^2 \\pi^2 EI}{L^2} $$\nThe fundamental (smallest positive) buckling load corresponds to $n=1$:\n$$ P_{\\text{exact}} = \\frac{\\pi^2 EI}{L^2} $$\nThis analytical result will be used for computing the relative error of the FEM solution.\n\nNext, we formulate the Finite Element Method solution. The beam is discretized into $N$ elements of equal length $l_e = L/N$. Each element has two nodes, and each node has two degrees of freedom (DOFs): transverse displacement $w$ and rotation $\\theta = dw/dx$. The element nodal displacement vector is $\\mathbf{d}_e = \\{w_1, \\theta_1, w_2, \\theta_2\\}^T$.\nThe displacement field within an element is interpolated using cubic Hermite shape functions $\\mathbf{N}(\\xi) = [N_1(\\xi), N_2(\\xi), N_3(\\xi), N_4(\\xi)]$, where $\\xi = x/l_e$ is the natural coordinate ($0 \\le \\xi \\le 1$):\n$$ w(\\xi) = \\mathbf{N}(\\xi) \\mathbf{d}_e $$\nThe shape functions are:\n$N_1(\\xi) = 1 - 3\\xi^2 + 2\\xi^3$\n$N_2(\\xi) = l_e(\\xi - 2\\xi^2 + \\xi^3)$\n$N_3(\\xi) = 3\\xi^2 - 2\\xi^3$\n$N_4(\\xi) = l_e(-\\xi^2 + \\xi^3)$\n\nSubstituting the interpolated displacement field into the weak form gives the element-level matrix equation.\nThe first term gives the element bending stiffness matrix $\\mathbf{k}_e$:\n$$ \\delta\\mathbf{d}_e^T \\mathbf{k}_e \\mathbf{d}_e = \\int_{0}^{l_e} EI \\left(\\frac{d^2w}{dx^2}\\right) \\left(\\frac{d^2(\\delta w)}{dx^2}\\right) \\,dx = \\delta\\mathbf{d}_e^T \\left( \\int_{0}^{l_e} EI (\\mathbf{B}_{\\text{curv}})^T \\mathbf{B}_{\\text{curv}} \\,dx \\right) \\mathbf{d}_e $$\nwhere $\\mathbf{B}_{\\text{curv}} = d^2\\mathbf{N}/dx^2$. The integration yields the standard element bending stiffness matrix:\n$$ \\mathbf{k}_e = \\frac{EI}{l_e^3} \\begin{bmatrix} 12  6l_e  -12  6l_e \\\\ 6l_e  4l_e^2  -6l_e  2l_e^2 \\\\ -12  -6l_e  12  -6l_e \\\\ 6l_e  2l_e^2  -6l_e  4l_e^2 \\end{bmatrix} $$\nThe second term in the weak form gives the element geometric stiffness matrix $\\mathbf{k}_{g,e}$, which accounts for the effect of the axial force $P$:\n$$ \\delta\\mathbf{d}_e^T (P \\mathbf{k}_{g,e}) \\mathbf{d}_e = P \\int_{0}^{l_e} \\left(\\frac{dw}{dx}\\right) \\left(\\frac{d(\\delta w)}{dx}\\right) \\,dx = P \\delta\\mathbf{d}_e^T \\left( \\int_{0}^{l_e} (\\mathbf{B}_{\\text{slope}})^T \\mathbf{B}_{\\text{slope}} \\,dx \\right) \\mathbf{d}_e $$\nwhere $\\mathbf{B}_{\\text{slope}} = d\\mathbf{N}/dx$. The integration yields the element geometric stiffness matrix:\n$$ \\mathbf{k}_{g,e} = \\frac{1}{30l_e} \\begin{bmatrix} 36  3l_e  -36  3l_e \\\\ 3l_e  4l_e^2  -3l_e  -l_e^2 \\\\ -36  -3l_e  36  -3l_e \\\\ 3l_e  -l_e^2  -3l_e  4l_e^2 \\end{bmatrix} $$\nThe element matrices are assembled into global matrices $\\mathbf{K}$ and $\\mathbf{K}_g$, leading to the global system for linear buckling:\n$$ \\mathbf{K} \\mathbf{D} = P \\mathbf{K}_g \\mathbf{D} $$\nwhere $\\mathbf{D}$ is the vector of global nodal DOFs. The size of the global system for $N$ elements (and $N+1$ nodes) is $(2(N+1)) \\times (2(N+1))$.\n\nThe pinned-pinned boundary conditions, $w(0)=0$ and $w(L)=0$, are applied. These correspond to the first DOF ($w_0$) and the DOF at index $2N$ ($w_N$) being zero. We enforce these conditions by eliminating the corresponding rows and columns from the global matrices $\\mathbf{K}$ and $\\mathbf{K}_g$ to form the reduced system:\n$$ \\mathbf{K}_{\\text{red}} \\mathbf{D}_{\\text{red}} = P \\mathbf{K}_{g, \\text{red}} \\mathbf{D}_{\\text{red}} $$\nThis is a generalized eigenvalue problem. The eigenvalues $P$ are the critical buckling loads, and the eigenvectors $\\mathbf{D}_{\\text{red}}$ are the corresponding buckling mode shapes. We solve this system to find the smallest positive eigenvalue, which corresponds to the fundamental buckling load predicted by the finite element model, $P_{\\text{FE}}$.\n\nFinally, the relative error is computed for each test case using the formula:\n$$ \\text{Relative Error} = \\frac{|P_{\\text{FE}} - P_{\\text{exact}}|}{P_{\\text{exact}}} $$\nThe implementation will perform these steps for each provided set of parameters $(E, I, L, N)$.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.linalg import eig\n\ndef solve():\n    \"\"\"\n    Solves for the fundamental buckling load of a pinned-pinned beam using FEM\n    and compares it to the exact analytical solution.\n    \"\"\"\n    # Define the test cases from the problem statement.\n    # Each case is a tuple (E, I, L, N).\n    test_cases = [\n        (210e9, 8.1e-6, 2.0, 1),   # Test A\n        (210e9, 8.1e-6, 2.0, 2),   # Test B\n        (210e9, 8.1e-6, 2.0, 4),   # Test C\n        (210e9, 8.1e-6, 2.0, 8),   # Test D\n        (210e9, 8.1e-6, 2.0, 16),  # Test E\n        (70e9, 3.2e-6, 1.5, 12),   # Test F\n        (200e9, 5.0e-8, 10.0, 40), # Test G\n    ]\n\n    results = []\n    for E, I, L, N in test_cases:\n        # Step 1: Calculate the exact analytical fundamental buckling load\n        P_exact = (np.pi**2 * E * I) / (L**2)\n\n        # Step 2: FEM formulation\n        num_nodes = N + 1\n        num_dofs = 2 * num_nodes\n        le = L / N\n\n        # Define element bending stiffness matrix (ke)\n        ke = (E * I / le**3) * np.array([\n            [12, 6 * le, -12, 6 * le],\n            [6 * le, 4 * le**2, -6 * le, 2 * le**2],\n            [-12, -6 * le, 12, -6 * le],\n            [6 * le, 2 * le**2, -6 * le, 4 * le**2]\n        ])\n\n        # Define element geometric stiffness matrix (kge)\n        kge = (1 / (30 * le)) * np.array([\n            [36, 3 * le, -36, 3 * le],\n            [3 * le, 4 * le**2, -3 * le, -le**2],\n            [-36, -3 * le, 36, -3 * le],\n            [3 * le, -le**2, -3 * le, 4 * le**2]\n        ])\n\n        # Step 3: Assemble global matrices\n        K_global = np.zeros((num_dofs, num_dofs))\n        Kg_global = np.zeros((num_dofs, num_dofs))\n\n        for i in range(N):\n            # Global DOFs for element i (connecting nodes i and i+1)\n            # DOFs are w_i, theta_i, w_{i+1}, theta_{i+1}\n            dof_indices = np.array([2*i, 2*i + 1, 2*i + 2, 2*i + 3])\n            \n            # Add element matrices to global matrices\n            K_global[np.ix_(dof_indices, dof_indices)] += ke\n            Kg_global[np.ix_(dof_indices, dof_indices)] += kge\n\n        # Step 4: Apply pinned-pinned boundary conditions\n        # w(0) = 0 - DOF 0 is constrained\n        # w(L) = 0 - DOF 2*N is constrained\n        \n        # Identify degrees of freedom to keep\n        all_dofs = list(range(num_dofs))\n        constrained_dofs = [0, 2 * N]\n        kept_dofs = [dof for dof in all_dofs if dof not in constrained_dofs]\n        \n        # Reduce the global matrices\n        K_red = K_global[np.ix_(kept_dofs, kept_dofs)]\n        Kg_red = Kg_global[np.ix_(kept_dofs, kept_dofs)]\n\n        # Step 5: Solve the generalized eigenvalue problem K_red*v = P*Kg_red*v\n        eigenvalues, _ = eig(K_red, Kg_red)\n        \n        # The eigenvalues are the critical loads P. We need the smallest positive one.\n        # Eigenvalues may be complex due to numerical precision, so we take the real part.\n        positive_eigenvalues = np.real(eigenvalues[eigenvalues > 1e-6]) # Filter for positive\n        \n        if len(positive_eigenvalues) == 0:\n            # This case should not happen for a valid physical problem setup\n            P_fe = np.nan \n        else:\n            P_fe = np.min(positive_eigenvalues)\n\n        # Step 6: Calculate the relative error\n        relative_error = abs(P_fe - P_exact) / P_exact\n        results.append(relative_error)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(f'{r:.15f}' for r in results)}]\")\n\nsolve()\n```", "id": "2556607"}]}