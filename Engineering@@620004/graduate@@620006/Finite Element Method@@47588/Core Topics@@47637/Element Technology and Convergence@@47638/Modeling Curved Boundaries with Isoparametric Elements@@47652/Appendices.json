{"hands_on_practices": [{"introduction": "This first practice provides a crucial, hands-on demonstration of why the isoparametric concept is so powerful for modeling curved domains. By directly comparing an exact load calculation on a curved edge with a naive approximation that ignores the geometry-induced distortion, you will quantify the error introduced by oversimplification. This exercise illuminates the central role of the line Jacobian, $J(\\xi)$, in correctly transforming integrals from the simple reference domain to the complex physical domain, a cornerstone of the finite element method. [@problem_id:2579730]", "problem": "Consider a planar edge of a two-dimensional isoparametric finite element in the Finite Element Method (FEM). The edge is represented by a quadratic isoparametric mapping from the reference coordinate $ \\xi \\in [-1,1] $ with the standard quadratic Lagrange shape functions $ L_1(\\xi) = \\frac{\\xi(\\xi-1)}{2} $, $ L_2(\\xi) = 1 - \\xi^2 $, and $ L_3(\\xi) = \\frac{\\xi(\\xi+1)}{2} $. The physical nodal coordinates are $ \\mathbf{x}_1 = (0,0) $, $ \\mathbf{x}_2 = \\left(\\frac{1}{2}, a\\right) $, and $ \\mathbf{x}_3 = (1,0) $, where $ a \\in \\mathbb{R} $ is a scalar shape parameter that controls the curvature of the edge. A constant line load of magnitude $ q $ (per unit out-of-plane thickness) acts along this edge; the total scalar load transmitted by the edge is the line integral $ \\int_{\\Gamma} q \\,\\mathrm{d}s $. Starting from the definitions of isoparametric mapping and line integration, the exact total load equals $ Q_{\\mathrm{exact}}(a) = \\int_{-1}^{1} q \\, J(\\xi)\\,\\mathrm{d}\\xi $, where $ J(\\xi) = \\left\\| \\frac{\\mathrm{d}\\mathbf{r}}{\\mathrm{d}\\xi} \\right\\| $ is the line Jacobian induced by the mapping $ \\mathbf{r}(\\xi) = \\sum_{i=1}^{3} L_i(\\xi)\\,\\mathbf{x}_i $. \n\nAn engineer, however, applies a naive quadrature intended for a straight edge: they use the $2$-point Gauss–Legendre Quadrature (GLQ) on $ [-1,1] $ with weights $ w_1 = w_2 = 1 $ and nodes $ \\xi_{1,2} = \\pm 1/\\sqrt{3} $, but they replace the true Jacobian $ J(\\xi) $ by the constant straight-edge Jacobian $ J_0 = \\frac{\\ell_0}{2} $, where the chord length is $ \\ell_0 = 1 $. This produces the naive estimate $ Q_{\\mathrm{naive}} = q \\sum_{i=1}^{2} w_i J_0 $. This naive rule ignores curvature and, for $ a \\neq 0 $, underestimates the total load.\n\nDerive from first principles the exact expression for the fractional underestimation error of the naive rule relative to the exact curved-edge integral, defined as\n$$\n\\varepsilon(a) \\equiv \\frac{Q_{\\mathrm{exact}}(a) - Q_{\\mathrm{naive}}}{Q_{\\mathrm{exact}}(a)}.\n$$\nYour derivation must begin from the definitions of the isoparametric mapping, the line Jacobian, and the Gauss–Legendre Quadrature rule. Report the final answer as a single closed-form analytic expression in terms of $ a $ only. No numerical evaluation is required and no units are to be included in the final expression.", "solution": "The problem is subjected to validation and is deemed valid. It is scientifically grounded in the principles of the Finite Element Method, is well-posed with all necessary information provided, and is formulated with objective, precise language. There are no contradictions, ambiguities, or factual unsoundness. We may therefore proceed with the derivation.\n\nOur objective is to find the fractional underestimation error, defined as $\\varepsilon(a) = \\frac{Q_{\\mathrm{exact}}(a) - Q_{\\mathrm{naive}}}{Q_{\\mathrm{exact}}(a)}$, which can be expressed as $\\varepsilon(a) = 1 - \\frac{Q_{\\mathrm{naive}}}{Q_{\\mathrm{exact}}(a)}$. We will derive expressions for $Q_{\\mathrm{naive}}$ and $Q_{\\mathrm{exact}}(a)$ from first principles.\n\nFirst, we calculate the naive load estimate, $Q_{\\mathrm{naive}}$. This estimate is based on the assumption of a straight edge, meaning the Jacobian $J(\\xi)$ is replaced by a constant value $J_0$. This constant Jacobian is defined as $J_0 = \\frac{\\ell_0}{2}$, where $\\ell_0$ is the chord length of the edge. The chord length is the straight-line distance between the start and end nodes, $\\mathbf{x}_1 = (0,0)$ and $\\mathbf{x}_3 = (1,0)$.\n$$\n\\ell_0 = \\|\\mathbf{x}_3 - \\mathbf{x}_1\\| = \\|(1,0) - (0,0)\\| = \\sqrt{(1-0)^{2} + (0-0)^{2}} = 1\n$$\nThus, the constant Jacobian is $J_0 = \\frac{1}{2}$. The naive load is computed using a $2$-point Gauss-Legendre Quadrature rule with weights $w_1 = w_2 = 1$.\n$$\nQ_{\\mathrm{naive}} = q \\sum_{i=1}^{2} w_i J_0 = q(w_1 J_0 + w_2 J_0) = q\\left(1 \\cdot \\frac{1}{2} + 1 \\cdot \\frac{1}{2}\\right) = q(1) = q\n$$\n\nNext, we calculate the exact load, $Q_{\\mathrm{exact}}(a) = \\int_{-1}^{1} q \\, J(\\xi)\\,\\mathrm{d}\\xi$. This requires determination of the true, position-dependent Jacobian $J(\\xi)$.\nThe isoparametric mapping of the edge is given by $\\mathbf{r}(\\xi) = \\sum_{i=1}^{3} L_i(\\xi)\\mathbf{x}_i$. Substituting the given Lagrange shape functions $L_1(\\xi) = \\frac{\\xi(\\xi-1)}{2}$, $L_2(\\xi) = 1 - \\xi^2$, $L_3(\\xi) = \\frac{\\xi(\\xi+1)}{2}$ and nodal coordinates $\\mathbf{x}_1 = (0,0)$, $\\mathbf{x}_2 = \\left(\\frac{1}{2}, a\\right)$, $\\mathbf{x}_3 = (1,0)$:\n$$\n\\mathbf{r}(\\xi) = \\frac{\\xi(\\xi-1)}{2}(0,0) + (1-\\xi^2)\\left(\\frac{1}{2}, a\\right) + \\frac{\\xi(\\xi+1)}{2}(1,0)\n$$\nLet $\\mathbf{r}(\\xi) = (x(\\xi), y(\\xi))$. We find the component functions:\n$$\nx(\\xi) = \\left(1-\\xi^2\\right)\\frac{1}{2} + \\frac{\\xi(\\xi+1)}{2} = \\frac{1 - \\xi^2 + \\xi^2 + \\xi}{2} = \\frac{1+\\xi}{2}\n$$\n$$\ny(\\xi) = a(1-\\xi^2)\n$$\nThe tangent vector along the mapped edge is $\\frac{\\mathrm{d}\\mathbf{r}}{\\mathrm{d}\\xi} = \\left(\\frac{\\mathrm{d}x}{\\mathrm{d}\\xi}, \\frac{\\mathrm{d}y}{\\mathrm{d}\\xi}\\right)$.\n$$\n\\frac{\\mathrm{d}x}{\\mathrm{d}\\xi} = \\frac{1}{2}\n$$\n$$\n\\frac{\\mathrm{d}y}{\\mathrm{d}\\xi} = -2a\\xi\n$$\nThe line Jacobian $J(\\xi)$ is the magnitude of this tangent vector:\n$$\nJ(\\xi) = \\left\\| \\frac{\\mathrm{d}\\mathbf{r}}{\\mathrm{d}\\xi} \\right\\| = \\sqrt{\\left(\\frac{\\mathrm{d}x}{\\mathrm{d}\\xi}\\right)^2 + \\left(\\frac{\\mathrm{d}y}{\\mathrm{d}\\xi}\\right)^2} = \\sqrt{\\left(\\frac{1}{2}\\right)^2 + (-2a\\xi)^2} = \\sqrt{\\frac{1}{4} + 4a^2\\xi^2} = \\frac{1}{2}\\sqrt{1+16a^2\\xi^2}\n$$\nNow we can compute the exact load $Q_{\\mathrm{exact}}(a)$ by integrating the arc length element $q \\, J(\\xi)\\,\\mathrm{d}\\xi$:\n$$\nQ_{\\mathrm{exact}}(a) = \\int_{-1}^{1} q J(\\xi)\\,\\mathrm{d}\\xi = q \\int_{-1}^{1} \\frac{1}{2}\\sqrt{1+16a^2\\xi^2}\\,\\mathrm{d}\\xi\n$$\nThe integrand is an even function of $\\xi$, so we can simplify the integral over the symmetric interval $[-1,1]$:\n$$\nQ_{\\mathrm{exact}}(a) = 2 \\cdot q \\int_{0}^{1} \\frac{1}{2}\\sqrt{1+16a^2\\xi^2}\\,\\mathrm{d}\\xi = q \\int_{0}^{1} \\sqrt{1+16a^2\\xi^2}\\,\\mathrm{d}\\xi\n$$\nTo evaluate this integral, we use the substitution $u = 4a\\xi$, which gives $\\mathrm{d}u = 4a\\,\\mathrm{d}\\xi$. For $\\xi$ from $0$ to $1$, $u$ goes from $0$ to $4a$.\n$$\nQ_{\\mathrm{exact}}(a) = q \\int_{0}^{4a} \\sqrt{1+u^2} \\frac{\\mathrm{d}u}{4a} = \\frac{q}{4a} \\int_{0}^{4a} \\sqrt{1+u^2}\\,\\mathrm{d}u\n$$\nThe standard integral for $\\sqrt{1+u^2}$ is known: $\\int \\sqrt{1+u^2}\\,\\mathrm{d}u = \\frac{u}{2}\\sqrt{1+u^2} + \\frac{1}{2}\\arcsinh(u) + C$.\nApplying the limits of integration from $0$ to $4a$:\n$$\n\\int_{0}^{4a} \\sqrt{1+u^2}\\,\\mathrm{d}u = \\left[\\frac{u}{2}\\sqrt{1+u^2} + \\frac{1}{2}\\arcsinh(u)\\right]_0^{4a} = \\frac{4a}{2}\\sqrt{1+(4a)^2} + \\frac{1}{2}\\arcsinh(4a) - 0 = 2a\\sqrt{1+16a^2} + \\frac{1}{2}\\arcsinh(4a)\n$$\nSubstituting this result back into the expression for $Q_{\\mathrm{exact}}(a)$:\n$$\nQ_{\\mathrm{exact}}(a) = \\frac{q}{4a} \\left(2a\\sqrt{1+16a^2} + \\frac{1}{2}\\arcsinh(4a)\\right) = q \\left(\\frac{\\sqrt{1+16a^2}}{2} + \\frac{\\arcsinh(4a)}{8a}\\right)\n$$\nThis expression is valid for $a \\neq 0$. For the case $a=0$, the path is a straight line, and $J(\\xi)=1/2$, so $Q_{\\mathrm{exact}}(0) = q \\int_{-1}^1 \\frac{1}{2} d\\xi = q$, which matches $Q_{\\mathrm{naive}}$. Our derived expression for $Q_{\\mathrm{exact}}(a)$ correctly yields this result in the limit $a \\to 0$.\n\nFinally, we assemble the fractional error $\\varepsilon(a)$:\n$$\n\\varepsilon(a) = 1 - \\frac{Q_{\\mathrm{naive}}}{Q_{\\mathrm{exact}}(a)} = 1 - \\frac{q}{q \\left(\\frac{\\sqrt{1+16a^2}}{2} + \\frac{\\arcsinh(4a)}{8a}\\right)}\n$$\nSimplifying the denominator:\n$$\n\\frac{\\sqrt{1+16a^2}}{2} + \\frac{\\arcsinh(4a)}{8a} = \\frac{4a\\sqrt{1+16a^2} + \\arcsinh(4a)}{8a}\n$$\nSubstituting this back into the expression for $\\varepsilon(a)$:\n$$\n\\varepsilon(a) = 1 - \\frac{1}{\\frac{4a\\sqrt{1+16a^2} + \\arcsinh(4a)}{8a}} = 1 - \\frac{8a}{4a\\sqrt{1+16a^2} + \\arcsinh(4a)}\n$$\nThis expression represents the fractional underestimation error as a function of the shape parameter $a$.", "answer": "$$\n\\boxed{1 - \\frac{8a}{4a\\sqrt{1+16a^2} + \\arcsinh(4a)}}\n$$", "id": "2579730"}, {"introduction": "Having established the importance of the Jacobian for accurate integration, we now probe deeper into the theoretical implications for assembling element matrices. This exercise challenges you to determine if it's possible to integrate the stiffness matrix of a curved isoparametric element *exactly* using standard numerical quadrature. By analyzing the mathematical nature of the full integrand, you will uncover a fundamental subtlety of isoparametric elements: the resulting expression is often a rational function, not a simple polynomial, which has profound consequences for the choice of integration schemes. [@problem_id:2579755]", "problem": "In the finite element method (FEM), consider a two-dimensional plane problem with a homogeneous isotropic material so that the constitutive matrix $\\mathbf{D}$ is constant over the domain. Let $\\Omega$ be discretized by a quadratic isoparametric triangular element (a six-node triangle) whose geometry contains a curved boundary. The element map $\\mathbf{x}(\\xi,\\eta)$ from the reference triangle $\\hat{T}$ to the physical element $T$ is defined by the isoparametric interpolation $\\mathbf{x}(\\xi,\\eta) = \\sum_{a=1}^{6} N_a(\\xi,\\eta)\\,\\mathbf{x}_a$, where $N_a(\\xi,\\eta)$ are the quadratic shape functions on $\\hat{T}$ and $\\mathbf{x}_a$ are the nodal coordinates in physical space that produce a genuinely curved edge (so that the mapping is non-affine). The element stiffness entries are given by\n$$\nk_{ij} \\;=\\; \\int_{T} \\left(\\nabla_{\\mathbf{x}} N_i\\right)^{\\!T} \\mathbf{D} \\left(\\nabla_{\\mathbf{x}} N_j\\right)\\, \\mathrm{d}\\Omega \\;=\\; \\int_{\\hat{T}} \\left(\\nabla_{\\mathbf{x}} N_i\\right)^{\\!T} \\mathbf{D} \\left(\\nabla_{\\mathbf{x}} N_j\\right)\\, \\det\\mathbf{J}(\\xi,\\eta)\\, \\mathrm{d}\\xi\\,\\mathrm{d}\\eta,\n$$\nwhere $\\mathbf{J}(\\xi,\\eta)$ is the Jacobian of the isoparametric mapping and $\\nabla_{\\mathbf{x}} N_i = \\mathbf{J}(\\xi,\\eta)^{-1}\\nabla_{\\xi,\\eta} N_i$.\n\nA standard Gaussian quadrature rule on triangles of order $p$ is defined to be exact for all bivariate polynomials of total degree up to $p$. Determine the minimum quadrature order $p_{\\min}$ required to exactly integrate every entry of the stiffness matrix of this quadratic isoparametric triangular element for arbitrary curved geometry consistent with quadratic isoparametric mapping. Express your final answer as an analytical expression. If no finite order suffices, give the symbol that represents this outcome. No rounding is required and no units are needed.", "solution": "The problem requires the determination of the minimum Gaussian quadrature order $p_{\\min}$ needed to exactly integrate the stiffness matrix entries for a quadratic isoparametric triangular element with a curved boundary. The validity of the problem statement is first assessed.\n\nStep 1: Extract Givens\n- Element Type: two-dimensional, $6$-node quadratic isoparametric triangle.\n- Material: Homogeneous and isotropic, thus the constitutive matrix $\\mathbf{D}$ is constant.\n- Geometry: The element has a genuinely curved edge, meaning the isoparametric map is non-affine.\n- Isoparametric Mapping: $\\mathbf{x}(\\xi,\\eta) = \\sum_{a=1}^{6} N_a(\\xi,\\eta)\\,\\mathbf{x}_a$, where $N_a$ are quadratic shape functions and $\\mathbf{x}_a$ are nodal coordinates.\n- Stiffness Matrix Entry: $k_{ij} = \\int_{\\hat{T}} \\left(\\nabla_{\\mathbf{x}} N_i\\right)^{\\!T} \\mathbf{D} \\left(\\nabla_{\\mathbf{x}} N_j\\right)\\, \\det\\mathbf{J}(\\xi,\\eta)\\, \\mathrm{d}\\xi\\,\\mathrm{d}\\eta$.\n- Gradient Transformation: $\\nabla_{\\mathbf{x}} N_i = \\mathbf{J}(\\xi,\\eta)^{-1}\\nabla_{\\xi,\\eta} N_i$.\n- Quadrature Rule: A rule of order $p$ is exact for bivariate polynomials of total degree up to $p$.\n- Objective: Find the minimum order $p_{\\min}$ for exact integration.\n\nStep 2: Validate Using Extracted Givens\nThe problem is well-defined within the context of the finite element method. All terms, such as isoparametric mapping, Jacobian, and stiffness matrix formulation, are standard and correct. The premise of a curved element boundary is scientifically sound and a common scenario in advanced FEM applications. The problem is objective, self-contained, and does not violate any scientific or mathematical principles. It is a non-trivial but solvable theoretical question.\n\nStep 3: Verdict and Action\nThe problem is deemed valid. A solution will be derived.\n\nThe core of the problem is to determine the nature of the integrand in the stiffness matrix expression on the reference element $\\hat{T}$. The integrand is $I(\\xi, \\eta) = \\left(\\nabla_{\\mathbf{x}} N_i\\right)^{\\!T} \\mathbf{D} \\left(\\nabla_{\\mathbf{x}} N_j\\right)\\, \\det\\mathbf{J}(\\xi,\\eta)$. A Gaussian quadrature rule can integrate a function exactly if and only if the function is a polynomial of a degree less than or equal to the order of the rule. We must therefore determine the polynomial degree of $I(\\xi, \\eta)$.\n\n1.  Shape Functions and Their Gradients:\n    For a $6$-node quadratic triangle, the shape functions $N_i(\\xi, \\eta)$ are polynomials in the reference coordinates $(\\xi, \\eta)$ of total degree $2$. Consequently, their gradients with respect to the reference coordinates, $\\nabla_{\\xi,\\eta} N_i = \\left( \\frac{\\partial N_i}{\\partial \\xi}, \\frac{\\partial N_i}{\\partial \\eta} \\right)^T$, are vectors whose components are polynomials of total degree $1$.\n\n2.  Jacobian of the Mapping:\n    The coordinate mapping is given by $\\mathbf{x}(\\xi, \\eta) = (x(\\xi, \\eta), y(\\xi, \\eta))^T = \\sum_{a=1}^{6} N_a(\\xi, \\eta) \\mathbf{x}_a$. Since the shape functions $N_a$ are polynomials of total degree $2$, the physical coordinates $x(\\xi, \\eta)$ and $y(\\xi, \\eta)$ are likewise polynomials of total degree $2$.\n    The Jacobian matrix of this transformation is:\n    $$\n    \\mathbf{J}(\\xi, \\eta) =\n    \\begin{pmatrix}\n    \\frac{\\partial x}{\\partial \\xi}  \\frac{\\partial y}{\\partial \\xi} \\\\\n    \\frac{\\partial x}{\\partial \\eta}  \\frac{\\partial y}{\\partial \\eta}\n    \\end{pmatrix}\n    $$\n    As $x$ and $y$ are polynomials of degree $2$, the entries of the Jacobian matrix $\\mathbf{J}$ are polynomials of total degree $1$. The problem states the element has a \"genuinely curved edge,\" which implies that the mapping is non-affine, and thus the entries of $\\mathbf{J}$ are not all constant.\n\n3.  Determinant of the Jacobian:\n    The determinant of the Jacobian is $\\det\\mathbf{J} = \\frac{\\partial x}{\\partial \\xi} \\frac{\\partial y}{\\partial \\eta} - \\frac{\\partial y}{\\partial \\xi} \\frac{\\partial x}{\\partial \\eta}$. Each term is a product of two polynomials of degree $1$. Therefore, $\\det\\mathbf{J}(\\xi, \\eta)$ is a polynomial of total degree $2$. Since the mapping is non-affine, $\\det\\mathbf{J}$ is not a constant.\n\n4.  Gradient in Physical Coordinates:\n    The gradient of a shape function with respect to physical coordinates $\\mathbf{x}$ is given by $\\nabla_{\\mathbf{x}} N_i = \\mathbf{J}^{-1} \\nabla_{\\xi,\\eta} N_i$. The inverse of the Jacobian matrix is:\n    $$\n    \\mathbf{J}^{-1} = \\frac{1}{\\det\\mathbf{J}}\n    \\begin{pmatrix}\n    \\frac{\\partial y}{\\partial \\eta}  -\\frac{\\partial y}{\\partial \\xi} \\\\\n    -\\frac{\\partial x}{\\partial \\eta}  \\frac{\\partial x}{\\partial \\xi}\n    \\end{pmatrix}\n    = \\frac{1}{\\det\\mathbf{J}} \\text{adj}(\\mathbf{J})\n    $$\n    The adjugate matrix, $\\text{adj}(\\mathbf{J})$, contains entries that are polynomials of degree $1$. The determinant, $\\det\\mathbf{J}$, is a polynomial of degree $2$. Therefore, the entries of $\\mathbf{J}^{-1}$ are rational functions, specifically the ratio of a degree-$1$ polynomial to a degree-$2$ polynomial.\n\n    The gradient $\\nabla_{\\mathbf{x}} N_i$ is the product of $\\mathbf{J}^{-1}$ (whose entries are rational functions) and $\\nabla_{\\xi,\\eta} N_i$ (whose entries are degree-$1$ polynomials). The components of $\\nabla_{\\mathbf{x}} N_i$ are therefore rational functions of the form:\n    $$\n    \\frac{\\text{polynomial of degree } 1}{\\text{polynomial of degree } 2} \\times (\\text{polynomial of degree } 1) = \\frac{\\text{polynomial of degree } 2}{\\text{polynomial of degree } 2}\n    $$\n    Specifically, the numerator is a polynomial of degree $2$ and the denominator is $\\det\\mathbf{J}$.\n\n5.  The Full Integrand:\n    Now we assemble the complete integrand $I(\\xi, \\eta)$. The term $\\left(\\nabla_{\\mathbf{x}} N_i\\right)^{\\!T} \\mathbf{D} \\left(\\nabla_{\\mathbf{x}} N_j\\right)$ involves products of the components of $\\nabla_{\\mathbf{x}} N_i$ and $\\nabla_{\\mathbf{x}} N_j$. Since $\\mathbf{D}$ is constant, this term is a scalar rational function. Its structure is:\n    $$\n    \\left( \\frac{\\text{Poly deg } 2}{\\det\\mathbf{J}} \\right) \\left( \\frac{\\text{Poly deg } 2}{\\det\\mathbf{J}} \\right) = \\frac{\\text{Poly deg } 4}{(\\det\\mathbf{J})^2}\n    $$\n    The full integrand is this term multiplied by $\\det\\mathbf{J}$:\n    $$\n    I(\\xi, \\eta) = \\frac{\\text{Polynomial of degree } 4}{(\\det\\mathbf{J}(\\xi, \\eta))^2} \\times \\det\\mathbf{J}(\\xi, \\eta) = \\frac{\\text{Polynomial of degree } 4}{\\det\\mathbf{J}(\\xi, \\eta)}\n    $$\n    The integrand is a rational function, where the numerator is a polynomial of total degree up to $4$ and the denominator is the non-constant polynomial $\\det\\mathbf{J}(\\xi, \\eta)$ of total degree $2$.\n\n6.  Conclusion on Quadrature Order:\n    A Gaussian quadrature rule of order $p$ is defined to be exact for integrating any polynomial of total degree up to $p$. It is not, in general, exact for rational functions where the denominator is not a constant. Since the integrand for a genuinely curved quadratic isoparametric element is a rational function, not a polynomial, no finite-order Gaussian quadrature rule can integrate it exactly. Exact integration would require a method capable of handling such rational functions, which is beyond the scope of standard polynomial-based Gaussian quadrature. Any application of Gaussian quadrature in this context will yield an approximation, not an exact result.\n\nTherefore, the minimum quadrature order $p_{\\min}$ required for exact integration does not exist as a finite number. This situation is represented by infinity.", "answer": "$$\\boxed{\\infty}$$", "id": "2579755"}, {"introduction": "Theoretical understanding must be paired with practical validation to build robust and reliable computational models. This final practice shifts focus to verification: the process of ensuring your code correctly implements the underlying mathematical theory. You will use a classic technique—modeling a circular sector with a collapsed quadrilateral element—to test your implementation of an isoparametric mapping, comparing the numerically computed arc length and area against their known analytical values to quantify the accuracy of your geometric representation. [@problem_id:2579765]", "problem": "You are asked to design and implement a numerical verification routine for curved boundary mapping in the isoparametric finite element method by comparing numerically integrated arc lengths and areas against analytical values for canonical circular sectors. Work in a purely mathematical setting and assume planar domains without units; report dimensionless relative errors. The goal is to demonstrate how to test and debug an implementation of curved boundary mapping using a standard serendipity isoparametric element.\n\nStart from the following fundamental base.\n\n- Isoparametric mapping: For a serendipity quadrilateral with $8$ nodes (commonly called a $Q8$ element), define the mapping from the reference square $(\\xi,\\eta)\\in[-1,1]^2$ to physical coordinates $(x,y)\\in\\mathbb{R}^2$ by\n$$\nx(\\xi,\\eta) \\;=\\; \\sum_{i=1}^8 N_i(\\xi,\\eta)\\,x_i,\\qquad\ny(\\xi,\\eta) \\;=\\; \\sum_{i=1}^8 N_i(\\xi,\\eta)\\,y_i,\n$$\nwhere $(x_i,y_i)$ are the physical node coordinates, and $N_i(\\xi,\\eta)$ are the $Q8$ shape functions. The Jacobian matrix is\n$$\n\\mathbf{J}(\\xi,\\eta) \\;=\\;\n\\begin{bmatrix}\n\\frac{\\partial x}{\\partial \\xi}  \\frac{\\partial x}{\\partial \\eta}\\\n$$4pt]\n\\frac{\\partial y}{\\partial \\xi}  \\frac{\\partial y}{\\partial \\eta}\n\\end{bmatrix}\n\\;=\\;\n\\sum_{i=1}^8\n\\begin{bmatrix}\n\\frac{\\partial N_i}{\\partial \\xi}(\\xi,\\eta)\\,x_i  \\frac{\\partial N_i}{\\partial \\eta}(\\xi,\\eta)\\,x_i\\\n$$4pt]\n\\frac{\\partial N_i}{\\partial \\xi}(\\xi,\\eta)\\,y_i  \\frac{\\partial N_i}{\\partial \\eta}(\\xi,\\eta)\\,y_i\n\\end{bmatrix}.\n$$\n\n- $Q8$ shape functions: Using the standard serendipity basis on $[-1,1]^2$,\n$$\n\\begin{aligned}\nN_1(\\xi,\\eta)=\\tfrac{1}{4}(1-\\xi)(1-\\eta)(-\\xi-\\eta-1),\\quad\nN_2(\\xi,\\eta)=\\tfrac{1}{4}(1+\\xi)(1-\\eta)(\\xi-\\eta-1),\\\\\nN_3(\\xi,\\eta)=\\tfrac{1}{4}(1+\\xi)(1+\\eta)(\\xi+\\eta-1),\\quad\nN_4(\\xi,\\eta)=\\tfrac{1}{4}(1-\\xi)(1+\\eta)(-\\xi+\\eta-1),\\\\\nN_5(\\xi,\\eta)=\\tfrac{1}{2}(1-\\xi^2)(1-\\eta),\\quad\nN_6(\\xi,\\eta)=\\tfrac{1}{2}(1+\\xi)(1-\\eta^2),\\\\\nN_7(\\xi,\\eta)=\\tfrac{1}{2}(1-\\xi^2)(1+\\eta),\\quad\nN_8(\\xi,\\eta)=\\tfrac{1}{2}(1-\\xi)(1-\\eta^2).\n\\end{aligned}\n$$\nTheir derivatives $\\tfrac{\\partial N_i}{\\partial \\xi}$ and $\\tfrac{\\partial N_i}{\\partial \\eta}$ are to be obtained by direct differentiation of these polynomials.\n\n- Numerical arc length on a mapped edge: For the curved top edge of the reference element defined by $\\eta=1$ with $\\xi\\in[-1,1]$, the physical curve is $\\gamma(\\xi) = \\big(x(\\xi,1),y(\\xi,1)\\big)$. Its arc length is\n$$\nL_{\\text{num}} \\;=\\; \\int_{-1}^1 \\left\\Vert \\frac{\\mathrm{d}\\gamma}{\\mathrm{d}\\xi} \\right\\Vert \\,\\mathrm{d}\\xi\n\\;=\\; \\int_{-1}^1 \\sqrt{ \\left(\\frac{\\partial x}{\\partial \\xi}(\\xi,1)\\right)^2 + \\left(\\frac{\\partial y}{\\partial \\xi}(\\xi,1)\\right)^2 } \\,\\mathrm{d}\\xi.\n$$\n\n- Numerical area of the mapped element: The area is the pullback integral\n$$\nA_{\\text{num}} \\;=\\; \\int_{-1}^1 \\int_{-1}^1 \\left|\\det \\mathbf{J}(\\xi,\\eta)\\right| \\,\\mathrm{d}\\xi\\,\\mathrm{d}\\eta.\n$$\n\n- Analytical benchmarks for circular sectors: Consider a circular sector of radius $R$ and central angle $\\theta$ (in radians). The exact arc length and area are\n$$\nL_{\\text{exact}} \\;=\\; R\\,\\theta,\\qquad A_{\\text{exact}} \\;=\\; \\tfrac{1}{2} R^2\\,\\theta.\n$$\n\nYour implementation must construct a single $Q8$ isoparametric element that approximates a circular sector of radius $R$ spanning from angle $\\alpha_0$ to $\\alpha_1=\\alpha_0+\\theta$. Use a collapsed-mesh construction in which the bottom edge of the reference square collapses to the sector center. Define the node placement by the following rules, using $(0,0)$ as the circle center:\n\n- Corner nodes mapped from reference coordinates $(\\xi,\\eta)\\in\\{(-1,-1),(1,-1),(1,1),(-1,1)\\}$:\n    - Node $1$ at the center $(0,0)$.\n    - Node $2$ at the center $(0,0)$.\n    - Node $3$ on the circle at angle $\\alpha_1$: $(R\\cos\\alpha_1,\\,R\\sin\\alpha_1)$.\n    - Node $4$ on the circle at angle $\\alpha_0$: $(R\\cos\\alpha_0,\\,R\\sin\\alpha_0)$.\n\n- Midside nodes mapped from reference coordinates $(\\xi,\\eta)\\in\\{(0,-1),(1,0),(0,1),(-1,0)\\}$:\n    - Node $5$ at the center $(0,0)$.\n    - Node $6$ on the radius at angle $\\alpha_1$ at half-radius: $\\big(\\tfrac{R}{2}\\cos\\alpha_1,\\,\\tfrac{R}{2}\\sin\\alpha_1\\big)$.\n    - Node $7$ on the circle at the mid-angle $\\alpha_m=\\tfrac{\\alpha_0+\\alpha_1}{2}$: $(R\\cos\\alpha_m,\\,R\\sin\\alpha_m)$.\n    - Node $8$ on the radius at angle $\\alpha_0$ at half-radius: $\\big(\\tfrac{R}{2}\\cos\\alpha_0,\\,\\tfrac{R}{2}\\sin\\alpha_0\\big)$.\n\nThis choice yields an exact circular geometry along the three nodal points on the curved edge but only an approximate circular arc between them, providing a realistic test of a curved-edge implementation.\n\nNumerically evaluate $L_{\\text{num}}$ using one-dimensional Gauss–Legendre quadrature on $\\xi\\in[-1,1]$ at $\\eta=1$. Numerically evaluate $A_{\\text{num}}$ using tensor-product Gauss–Legendre quadrature on $[-1,1]^2$. Use sufficiently high quadrature orders to resolve the curved mapping; set the arc-length quadrature order to $n_L=64$ points and the area quadrature order to $n_A=32\\times 32$ points.\n\nCompute the relative errors\n$$\ne_L \\;=\\; \\frac{\\left|L_{\\text{num}}-L_{\\text{exact}}\\right|}{L_{\\text{exact}}},\\qquad\ne_A \\;=\\; \\frac{\\left|A_{\\text{num}}-A_{\\text{exact}}\\right|}{A_{\\text{exact}}}.\n$$\n\nYour program must implement the above and produce the results for the following test suite. All angles are in radians.\n\n- Test $1$ (happy path, moderate curvature): $R=1$, $\\alpha_0=0$, $\\theta=\\tfrac{\\pi}{2}$.\n- Test $2$ (large curvature, stronger collapse): $R=2$, $\\alpha_0=0$, $\\theta=\\pi$.\n- Test $3$ (small arc, rotated sector): $R=3$, $\\alpha_0=\\tfrac{\\pi}{3}$, $\\theta=\\tfrac{\\pi}{6}$.\n\nFor each test, your program must return the pair of relative errors $(e_L,e_A)$ as floats rounded to $8$ decimal places. Aggregate all results into a single line with the following exact format: a comma-separated list enclosed in square brackets, ordered as $[e_{L,1},e_{A,1},e_{L,2},e_{A,2},e_{L,3},e_{A,3}]$.\n\nYour program must be self-contained, take no input, and rely only on the numerical rules and formulas stated above. No physical units are required; report all values as pure decimal numbers rounded to $8$ decimal places.", "solution": "The problem requires the numerical verification of an isoparametric mapping for a curved boundary. The specific case is an $8$-node serendipity quadrilateral element ($Q8$) mapped to a circular sector. The verification will be performed by comparing numerically computed arc lengths and areas against their exact analytical values, with the results presented as dimensionless relative errors. The procedure is based on established principles of the Finite Element Method.\n\nFirst, we define the mathematical framework. The isoparametric mapping transforms a point $(\\xi, \\eta)$ from the reference square domain $[-1, 1] \\times [-1, 1]$ to a point $(x, y)$ in the physical domain. This mapping is given by:\n$$\nx(\\xi, \\eta) = \\sum_{i=1}^{8} N_i(\\xi, \\eta) x_i\n$$\n$$\ny(\\xi, \\eta) = \\sum_{i=1}^{8} N_i(\\xi, \\eta) y_i\n$$\nHere, $(x_i, y_i)$ are the physical coordinates of the $8$ nodes of the element, and $N_i(\\xi, \\eta)$ are the $Q8$ serendipity shape functions provided in the problem statement.\n\nThe analysis requires derivatives of the shape functions to compute the Jacobian matrix of the transformation, $\\mathbf{J}(\\xi, \\eta)$. The components of $\\mathbf{J}$ are:\n$$\n\\mathbf{J} = \\begin{bmatrix} J_{11}  J_{12} \\\\ J_{21}  J_{22} \\end{bmatrix} = \\begin{bmatrix} \\frac{\\partial x}{\\partial \\xi}  \\frac{\\partial x}{\\partial \\eta} \\\\ \\frac{\\partial y}{\\partial \\xi}  \\frac{\\partial y}{\\partial \\eta} \\end{bmatrix}\n$$\nwhere each entry is a sum over the nodes, for instance, $J_{11} = \\frac{\\partial x}{\\partial \\xi} = \\sum_{i=1}^{8} \\frac{\\partial N_i}{\\partial \\xi} x_i$. The derivatives $\\frac{\\partial N_i}{\\partial \\xi}$ and $\\frac{\\partial N_i}{\\partial \\eta}$ are found by direct differentiation of the polynomial shape functions.\n\nThe problem specifies a collapsed-element configuration to model a circular sector of radius $R$ and angle $\\theta$ from $\\alpha_0$ to $\\alpha_1 = \\alpha_0 + \\theta$. The node coordinates $(x_i, y_i)$ are defined as follows:\n- Nodes $1$, $2$, $5$ (from reference coordinates $(\\xi=-1,\\eta=-1)$, $(\\xi=1,\\eta=-1)$, $(\\xi=0,\\eta=-1)$) are collapsed to the origin $(0,0)$.\n- Node $4$ (from $(\\xi=-1,\\eta=1)$) is at $(R\\cos\\alpha_0, R\\sin\\alpha_0)$.\n- Node $3$ (from $(\\xi=1,\\eta=1)$) is at $(R\\cos\\alpha_1, R\\sin\\alpha_1)$.\n- Node $7$ (from $(\\xi=0,\\eta=1)$) is at $(R\\cos\\alpha_m, R\\sin\\alpha_m)$, where $\\alpha_m = (\\alpha_0+\\alpha_1)/2$.\n- Node $8$ (from $(\\xi=-1,\\eta=0)$) is at $(\\frac{R}{2}\\cos\\alpha_0, \\frac{R}{2}\\sin\\alpha_0)$.\n- Node $6$ (from $(\\xi=1,\\eta=0)$) is at $(\\frac{R}{2}\\cos\\alpha_1, \\frac{R}{2}\\sin\\alpha_1)$.\nThis configuration maps the reference square's top edge ($\\eta=1, \\xi \\in [-1,1]$) to the curved arc of the sector and the bottom edge ($\\eta=-1$) to the sector's central point.\n\nThe numerical arc length, $L_{\\text{num}}$, of the curved edge is computed by integrating the differential arc length along the mapped edge $\\eta=1$:\n$$\nL_{\\text{num}} = \\int_{-1}^{1} \\sqrt{ \\left(\\frac{\\partial x}{\\partial \\xi}(\\xi, 1)\\right)^2 + \\left(\\frac{\\partial y}{\\partial \\xi}(\\xi, 1)\\right)^2 } \\, \\mathrm{d}\\xi\n$$\nThis one-dimensional integral is evaluated using Gauss-Legendre quadrature with $n_L = 64$ points.\n\nThe numerical area, $A_{\\text{num}}$, of the element is computed by integrating the determinant of the Jacobian matrix over the reference square:\n$$\nA_{\\text{num}} = \\int_{-1}^{1} \\int_{-1}^{1} |\\det\\mathbf{J}(\\xi, \\eta)| \\, \\mathrm{d}\\xi \\, \\mathrm{d}\\eta\n$$\nThis two-dimensional integral is evaluated using a tensor-product Gauss-Legendre quadrature with an $n_A \\times n_A = 32 \\times 32$ grid of points. The singularity in the mapping at the collapsed edge ($\\eta=-1$), where $\\det\\mathbf{J}=0$, is correctly handled as the Gauss quadrature points do not include the domain boundaries.\n\nThe computed numerical values are compared against the analytical formulas for a circular sector:\n$$\nL_{\\text{exact}} = R \\theta\n$$\n$$\nA_{\\text{exact}} = \\frac{1}{2} R^2 \\theta\n$$\nThe accuracy of the isoparametric mapping and numerical integration is quantified by the relative errors:\n$$\ne_L = \\frac{|L_{\\text{num}} - L_{\\text{exact}}|}{L_{\\text{exact}}}\n$$\n$$\ne_A = \\frac{|A_{\\text{num}} - A_{\\text{exact}}|}{A_{\\text{exact}}}\n$$\nThe implementation will systematically execute these calculations for each of the three test cases provided, reporting the pair of relative errors $(e_L, e_A)$ for each case. The calculations will be performed in a self-contained program adhering to the specified numerical parameters.", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the problem of verifying isoparametric mapping for a Q8 element\n    approximating a circular sector.\n    \"\"\"\n\n    # Test cases: (R, alpha0, theta)\n    test_cases = [\n        (1.0, 0.0, np.pi / 2.0),\n        (2.0, 0.0, np.pi),\n        (3.0, np.pi / 3.0, np.pi / 6.0),\n    ]\n\n    # Quadrature orders\n    n_L = 64  # for arc length\n    n_A = 32  # for area (n_A x n_A grid)\n\n    results = []\n    \n    # Q8 shape functions and their derivatives\n    # N[i-1] corresponds to node i\n    N = [\n        lambda xi, eta: 0.25 * (1 - xi) * (1 - eta) * (-xi - eta - 1),\n        lambda xi, eta: 0.25 * (1 + xi) * (1 - eta) * (xi - eta - 1),\n        lambda xi, eta: 0.25 * (1 + xi) * (1 + eta) * (xi + eta - 1),\n        lambda xi, eta: 0.25 * (1 - xi) * (1 + eta) * (-xi + eta - 1),\n        lambda xi, eta: 0.5 * (1 - xi**2) * (1 - eta),\n        lambda xi, eta: 0.5 * (1 + xi) * (1 - eta**2),\n        lambda xi, eta: 0.5 * (1 - xi**2) * (1 + eta),\n        lambda xi, eta: 0.5 * (1 - xi) * (1 - eta**2)\n    ]\n\n    # dN/d(xi)\n    dN_dxi = [\n        lambda xi, eta: 0.25 * (1 - eta) * (2 * xi + eta),\n        lambda xi, eta: 0.25 * (1 - eta) * (2 * xi - eta),\n        lambda xi, eta: 0.25 * (1 + eta) * (2 * xi + eta),\n        lambda xi, eta: 0.25 * (1 + eta) * (2 * xi - eta),\n        lambda xi, eta: -xi * (1 - eta),\n        lambda xi, eta: 0.5 * (1 - eta**2),\n        lambda xi, eta: -xi * (1 + eta),\n        lambda xi, eta: -0.5 * (1 - eta**2)\n    ]\n\n    # dN/d(eta)\n    dN_deta = [\n        lambda xi, eta: 0.25 * (1 - xi) * (2 * eta + xi),\n        lambda xi, eta: 0.25 * (1 + xi) * (2 * eta - xi),\n        lambda xi, eta: 0.25 * (1 + xi) * (2 * eta + xi),\n        lambda xi, eta: 0.25 * (1 - xi) * (2 * eta - xi),\n        lambda xi, eta: -0.5 * (1 - xi**2),\n        lambda xi, eta: -eta * (1 + xi),\n        lambda xi, eta: 0.5 * (1 - xi**2),\n        lambda xi, eta: -eta * (1 - xi)\n    ]\n\n    for R, alpha0, theta in test_cases:\n        alpha1 = alpha0 + theta\n        alpha_m = (alpha0 + alpha1) / 2.0\n\n        # Define node coordinates for the circular sector\n        # The arrays are 0-indexed, corresponding to nodes 1-8\n        x_nodes = np.array([\n            0.0,\n            0.0,\n            R * np.cos(alpha1),\n            R * np.cos(alpha0),\n            0.0,\n            0.5 * R * np.cos(alpha1),\n            R * np.cos(alpha_m),\n            0.5 * R * np.cos(alpha0)\n        ])\n        y_nodes = np.array([\n            0.0,\n            0.0,\n            R * np.sin(alpha1),\n            R * np.sin(alpha0),\n            0.0,\n            0.5 * R * np.sin(alpha1),\n            R * np.sin(alpha_m),\n            0.5 * R * np.sin(alpha0)\n        ])\n\n        # --- Numerical Arc Length Calculation ---\n        L_num = 0.0\n        points_L, weights_L = np.polynomial.legendre.leggauss(n_L)\n        eta_val = 1.0\n\n        for i in range(n_L):\n            xi_k = points_L[i]\n            w_k = weights_L[i]\n            dN_dxi_vals = np.array([f(xi_k, eta_val) for f in dN_dxi])\n            dx_dxi = np.dot(dN_dxi_vals, x_nodes)\n            dy_dxi = np.dot(dN_dxi_vals, y_nodes)\n            integrand = np.sqrt(dx_dxi**2 + dy_dxi**2)\n            L_num += integrand * w_k\n            \n        # --- Numerical Area Calculation ---\n        A_num = 0.0\n        points_A, weights_A = np.polynomial.legendre.leggauss(n_A)\n\n        for i in range(n_A):\n            xi_i = points_A[i]\n            w_i = weights_A[i]\n            for j in range(n_A):\n                eta_j = points_A[j]\n                w_j = weights_A[j]\n\n                dN_dxi_vals = np.array([f(xi_i, eta_j) for f in dN_dxi])\n                dN_deta_vals = np.array([f(xi_i, eta_j) for f in dN_deta])\n\n                dx_dxi = np.dot(dN_dxi_vals, x_nodes)\n                dy_dxi = np.dot(dN_dxi_vals, y_nodes)\n                dx_deta = np.dot(dN_deta_vals, x_nodes)\n                dy_deta = np.dot(dN_deta_vals, y_nodes)\n\n                det_J = dx_dxi * dy_deta - dx_deta * dy_dxi\n                A_num += np.abs(det_J) * w_i * w_j\n\n        # --- Analytical Benchmarks and Relative Errors ---\n        L_exact = R * theta\n        A_exact = 0.5 * R**2 * theta\n\n        e_L = np.abs(L_num - L_exact) / L_exact\n        e_A = np.abs(A_num - A_exact) / A_exact\n\n        results.extend([round(e_L, 8), round(e_A, 8)])\n\n    # Format the final output string\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n\n```", "id": "2579765"}]}