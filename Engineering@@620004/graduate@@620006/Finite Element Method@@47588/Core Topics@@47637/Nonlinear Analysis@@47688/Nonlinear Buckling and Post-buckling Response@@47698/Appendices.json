{"hands_on_practices": [{"introduction": "To truly grasp the concept of stability, we begin with a classic problem that can be solved analytically from first principles. By analyzing the total potential energy of a simple two-bar truss, known as the von Mises truss, you will determine the precise load at which the structure buckles. This exercise [@problem_id:2584357] is fundamental because it connects the abstract mathematical condition for stability—the second variation of potential energy being positive definite—to a tangible physical event.", "problem": "A pin-jointed two-bar truss in a vertical plane consists of two identical straight bars of initial length $L_0$ made of a linear elastic material with Young’s modulus $E$ and cross-sectional area $A$. The bottom nodes are fixed at coordinates $(-a,0)$ and $(a,0)$, and the apex node is initially at $(0,h)$. A vertical dead load $P$ acts downward at the apex node. The bars carry only axial force and undergo finite displacements but small axial strains; the strain energy of bar $i$ is given by $U_i = \\dfrac{E A}{2 L_0} \\left(\\Delta L_i\\right)^2$, where $\\Delta L_i$ is the exact change in bar length. Let the apex node undergo displacements $(u,-w)$, where $u$ is the horizontal displacement (positive to the right) and $w$ is the downward vertical displacement (positive downward).\n\nStarting from the definition of the total potential energy\n$$\n\\Pi(u,w) = \\sum_{i=1}^{2} \\frac{E A}{2 L_0} \\left(L_i(u,w) - L_0\\right)^2 \\;-\\; P\\, w,\n$$\nwhere $L_i(u,w)$ are the current bar lengths, and enforcing only the fundamental principles of conservative systems and exact bar-length kinematics, do the following:\n\n- Derive the second variation $\\delta^2 \\Pi$ at a symmetric pre-buckling equilibrium point with $u=0$ in terms of the small independent variations $\\delta u$ and $\\delta w$. Express your result using $a$, $h$, $w$, $L_0=\\sqrt{a^2+h^2}$, and $L=\\sqrt{a^2+(h-w)^2}$ evaluated at $u=0$.\n\n- Use the symmetric pre-buckling equilibrium relation obtained from $\\dfrac{\\partial \\Pi}{\\partial w}=0$ at $u=0$ to rewrite the quadratic form $\\delta^2 \\Pi$ so that all coefficients are expressed in terms of $E$, $A$, $a$, $h$, $w$, $L_0$, $L$, and the applied load $P$.\n\n- Identify the condition under which stability is lost with respect to the lateral perturbation $\\delta u$ by requiring the coefficient of $(\\delta u)^2$ in $\\delta^2 \\Pi$ to vanish, and denote the corresponding load as $P_{\\mathrm{cr}}$.\n\n- For the specific geometry satisfying $h = \\dfrac{\\sqrt{23}}{2}\\, a$, determine $P_{\\mathrm{cr}}$ in closed form by eliminating the pre-buckling displacement using the symmetric equilibrium and geometry relations. Express the final load in Newtons. Provide an exact analytic expression and do not round.", "solution": "The problem requires a stability analysis of a two-bar truss subjected to a vertical dead load. We will find the critical buckling load by examining the second variation of the total potential energy.\n\nFirst, we define the geometry. The apex node, initially at $(0,h)$, moves to $(u, h-w)$. The fixed base nodes are at $(-a,0)$ and $(a,0)$. The lengths of the two bars, denoted bar $1$ (left) and bar $2$ (right), in the deformed configuration are given by the distance formula:\n$$ L_1(u,w) = \\sqrt{(u+a)^2 + (h-w)^2} $$\n$$ L_2(u,w) = \\sqrt{(u-a)^2 + (h-w)^2} $$\nThe initial length of each identical bar is $L_0 = \\sqrt{a^2 + h^2}$. The total potential energy $\\Pi(u,w)$ of the system is given as:\n$$ \\Pi(u,w) = \\frac{E A}{2 L_0} \\left[ (L_1(u,w) - L_0)^2 + (L_2(u,w) - L_0)^2 \\right] - P w $$\nwhere $E$ is Young's modulus, $A$ is the cross-sectional area, and $P$ is the applied vertical load.\n\nThe stability of an equilibrium position is determined by the second variation of the total potential energy, $\\delta^2 \\Pi$. An equilibrium state $(u,w)$ is stable if $\\delta^2 \\Pi$ is positive definite for all admissible variations $(\\delta u, \\delta w)$. Bifurcation, or loss of stability, occurs when $\\delta^2 \\Pi$ ceases to be positive definite. Following the problem's convention, we define $\\delta^2 \\Pi$ as the quadratic form:\n$$ \\delta^2 \\Pi = \\frac{\\partial^2 \\Pi}{\\partial u^2} (\\delta u)^2 + 2 \\frac{\\partial^2 \\Pi}{\\partial u \\partial w} \\delta u \\delta w + \\frac{\\partial^2 \\Pi}{\\partial w^2} (\\delta w)^2 $$\nWe evaluate the coefficients of this form at a symmetric pre-buckling equilibrium point, which is characterized by $u=0$.\n\nFirst, we compute the required partial derivatives of $\\Pi$. The first derivatives are:\n$$ \\frac{\\partial \\Pi}{\\partial u} = \\frac{E A}{L_0} \\left[ (L_1 - L_0) \\frac{u+a}{L_1} + (L_2 - L_0) \\frac{u-a}{L_2} \\right] $$\n$$ \\frac{\\partial \\Pi}{\\partial w} = \\frac{E A}{L_0} \\left[ (L_1 - L_0) \\frac{-(h-w)}{L_1} + (L_2 - L_0) \\frac{-(h-w)}{L_2} \\right] - P $$\nAt the symmetric configuration $u=0$, the bar lengths are equal: $L_1 = L_2 = L = \\sqrt{a^2+(h-w)^2}$. At this state, $\\frac{\\partial \\Pi}{\\partial u} = 0$, confirming that $u=0$ is an equilibrium path. The equilibrium along this path is governed by $\\frac{\\partial \\Pi}{\\partial w}|_{u=0} = 0$, which yields the pre-buckling equilibrium relation:\n$$ P = -2 \\frac{E A}{L_0} (L - L_0) \\frac{h-w}{L} $$\n\nNext, we calculate the second partial derivatives and evaluate them at $u=0$.\nThe mixed partial derivative is:\n$$ \\frac{\\partial^2 \\Pi}{\\partial u \\partial w} = -EA(h-w) \\left[ \\frac{u+a}{L_1^3} + \\frac{u-a}{L_2^3} \\right] $$\nEvaluated at $u=0$, this becomes $\\left. \\frac{\\partial^2 \\Pi}{\\partial u \\partial w} \\right|_{u=0} = -EA(h-w) \\left[ \\frac{a}{L^3} - \\frac{a}{L^3} \\right] = 0$.\nThe unmixed second partial derivatives are:\n$$ \\frac{\\partial^2 \\Pi}{\\partial u^2} = \\frac{E A}{L_0} \\left[ \\frac{(u+a)^2}{L_1^2} + (L_1-L_0)\\frac{(h-w)^2}{L_1^3} + \\frac{(u-a)^2}{L_2^2} + (L_2-L_0)\\frac{(h-w)^2}{L_2^3} \\right] $$\n$$ \\frac{\\partial^2 \\Pi}{\\partial w^2} = \\frac{E A}{L_0} \\left[ \\frac{(h-w)^2}{L_1^2} + (L_1-L_0)\\frac{(u+a)^2}{L_1^3} + \\frac{(h-w)^2}{L_2^2} + (L_2-L_0)\\frac{(u-a)^2}{L_2^3} \\right] $$\nEvaluating at $u=0$ (where $L_1=L_2=L$):\n$$ H_{uu} = \\left. \\frac{\\partial^2 \\Pi}{\\partial u^2} \\right|_{u=0} = \\frac{E A}{L_0} \\left[ 2\\frac{a^2}{L^2} + 2(L-L_0)\\frac{(h-w)^2}{L^3} \\right] = 2\\frac{E A}{L_0} \\left[ \\frac{a^2}{L^2} + (L-L_0)\\frac{(h-w)^2}{L^3} \\right] $$\n$$ H_{ww} = \\left. \\frac{\\partial^2 \\Pi}{\\partial w^2} \\right|_{u=0} = \\frac{E A}{L_0} \\left[ 2\\frac{(h-w)^2}{L^2} + 2(L-L_0)\\frac{a^2}{L^3} \\right] = 2\\frac{E A}{L_0} \\left[ \\frac{(h-w)^2}{L^2} + (L-L_0)\\frac{a^2}{L^3} \\right] $$\nThe quadratic form of the second variation at the symmetric pre-buckling state is thus diagonal:\n$$ \\delta^2 \\Pi = H_{uu} (\\delta u)^2 + H_{ww} (\\delta w)^2 $$\nThis completes the first task, expressing the coefficients in terms of $a, h, w, L_0, L$.\n\nFor the second task, we use the pre-buckling equilibrium relation $P = -2 \\frac{E A}{L_0} (L - L_0) \\frac{h-w}{L}$, which can be rearranged to $2\\frac{EA}{L_0}(L-L_0) = -P\\frac{L}{h-w}$. Substituting this into the coefficients $H_{uu}$ and $H_{ww}$:\n$$ H_{uu} = 2\\frac{E A}{L_0} \\frac{a^2}{L^2} + \\left(-P\\frac{L}{h-w}\\right) \\frac{(h-w)^2}{L^3} = 2\\frac{E A}{L_0} \\frac{a^2}{L^2} - P\\frac{h-w}{L^2} $$\n$$ H_{ww} = 2\\frac{E A}{L_0} \\frac{(h-w)^2}{L^2} + \\left(-P\\frac{L}{h-w}\\right) \\frac{a^2}{L^3} = 2\\frac{E A}{L_0} \\frac{(h-w)^2}{L^2} - P\\frac{a^2}{L^2(h-w)} $$\nThis expresses the coefficients in terms of the load $P$ and other geometric quantities.\n\nThe third task is to identify the condition for loss of stability. Lateral (asymmetric) buckling occurs when the stiffness against a lateral perturbation $\\delta u$ vanishes. This corresponds to the condition $H_{uu}=0$. The load at which this occurs is the critical load, $P_{\\mathrm{cr}}$.\n$$ H_{uu} = 2\\frac{E A}{L_0} \\frac{a^2}{L^2} - P_{\\mathrm{cr}}\\frac{h-w}{L^2} = 0 $$\nSolving for $P_{\\mathrm{cr}}$ gives the buckling condition:\n$$ P_{\\mathrm{cr}} = \\frac{2 E A a^2}{L_0 (h-w)} $$\n\nFor the final task, we determine $P_{\\mathrm{cr}}$ for the specific geometry $h = \\frac{\\sqrt{23}}{2} a$. We must solve for the state $(w, P_{\\mathrm{cr}})$ at buckling by using both the equilibrium equation and the buckling condition. Equating the two expressions for $P_{\\mathrm{cr}}$:\n$$ \\frac{2 E A a^2}{L_0 (h-w)} = -2 \\frac{E A}{L_0} (L - L_0) \\frac{h-w}{L} $$\nAssuming $E, A, L_0 \\neq 0$ and $h-w \\neq 0$, we simplify:\n$$ a^2 = -(L-L_0) \\frac{(h-w)^2}{L} \\implies a^2 L = (L_0-L)(h-w)^2 $$\n$$ L(a^2 + (h-w)^2) = L_0 (h-w)^2 $$\nLet $y=h-w$ be the current height of the apex. Since $L^2 = a^2+y^2$, this simplifies to a remarkably compact form:\n$$ L^3 = L_0 y^2 $$\nSubstituting the definitions $L=\\sqrt{a^2+y^2}$ and $L_0=\\sqrt{a^2+h^2}$:\n$$ (a^2+y^2)^{3/2} = \\sqrt{a^2+h^2} \\, y^2 $$\nSquaring both sides and letting $Y=y^2$:\n$$ (a^2+Y)^3 = (a^2+h^2) Y^2 $$\nExpanding the cubic term:\n$$ a^6 + 3a^4 Y + 3a^2 Y^2 + Y^3 = a^2 Y^2 + h^2 Y^2 $$\nRearranging into a polynomial for $Y$:\n$$ Y^3 + (2a^2 - h^2)Y^2 + 3a^4 Y + a^6 = 0 $$\nNow, we use the given geometry $h = \\frac{\\sqrt{23}}{2} a$, so $h^2 = \\frac{23}{4} a^2$.\n$$ Y^3 + (2a^2 - \\frac{23}{4}a^2)Y^2 + 3a^4 Y + a^6 = 0 $$\n$$ Y^3 - \\frac{15}{4}a^2 Y^2 + 3a^4 Y + a^6 = 0 $$\nThis is a homogeneous polynomial in $Y$ and $a^2$. We seek a solution $Y=Ca^2$. Substituting this gives a cubic equation for the constant $C$:\n$$ C^3 a^6 - \\frac{15}{4} C^2 a^6 + 3C a^6 + a^6 = 0 \\implies 4C^3 - 15C^2 + 12C + 4 = 0 $$\nBy inspection, $C=2$ is a root: $4(2)^3 - 15(2)^2 + 12(2) + 4 = 32 - 60 + 24 + 4 = 0$.\nThe polynomial can be factored as $(C-2)(4C^2 - 7C - 2) = 0$. The quadratic factor yields roots $C = \\frac{7 \\pm \\sqrt{49+32}}{8} = \\frac{7 \\pm 9}{8}$, so $C=2$ (a double root) and $C = -1/4$.\nSince $Y=y^2$ must be positive, $C$ must be positive. The only physically meaningful solution is $C=2$.\nThus, at buckling, $Y_{\\mathrm{cr}} = y_{\\mathrm{cr}}^2 = 2a^2$, which means the height of the apex is $y_{\\mathrm{cr}} = h-w_{\\mathrm{cr}} = \\sqrt{2}a$.\n\nFinally, we calculate $P_{\\mathrm{cr}}$ using the derived formula:\n$$ P_{\\mathrm{cr}} = \\frac{2 E A a^2}{L_0 y_{\\mathrm{cr}}} $$\nWe need $L_0$ for the given geometry: $L_0^2 = a^2 + h^2 = a^2 + \\frac{23}{4}a^2 = \\frac{27}{4}a^2$, so $L_0 = \\frac{3\\sqrt{3}}{2}a$.\nSubstituting the values of $L_0$ and $y_{\\mathrm{cr}}$:\n$$ P_{\\mathrm{cr}} = \\frac{2 E A a^2}{\\left(\\frac{3\\sqrt{3}}{2}a\\right) (\\sqrt{2}a)} = \\frac{2 E A a^2}{\\frac{3\\sqrt{6}}{2}a^2} = \\frac{4 E A}{3\\sqrt{6}} $$\nRationalizing the denominator gives the final analytical expression for the critical load:\n$$ P_{\\mathrm{cr}} = \\frac{4 E A}{3\\sqrt{6}} \\cdot \\frac{\\sqrt{6}}{\\sqrt{6}} = \\frac{4\\sqrt{6} E A}{18} = \\frac{2\\sqrt{6}}{9} E A $$\nThis expression has units of force. In the SI system, this would be Newtons, assuming $E$, $A$ are given in compatible SI units ($Pa$, $m^2$).", "answer": "$$\\boxed{\\frac{2\\sqrt{6}}{9} E A}$$", "id": "2584357"}, {"introduction": "Real-world structures are too complex for a single energy analysis. Instead, we use the Finite Element Method (FEM) to assemble the response from simpler components. A crucial insight in buckling analysis is that an element's stiffness changes under load. This practice [@problem_id:2584381] guides you through the derivation of the 'geometric stiffness matrix' for a truss element, which quantifies this load-stiffening or -softening effect. This matrix is the essential building block for constructing the linearized eigenvalue problem that predicts the critical buckling loads in any FEM software.", "problem": "A straight, pin-jointed two-dimensional truss element connects nodes $1$ and $2$ with undeformed length $L$ and orientation angle $\\theta$ measured from the global $X$-axis. Let the global nodal displacement vector be ordered as $\\{d\\} = [u_{X1},\\,u_{Y1},\\,u_{X2},\\,u_{Y2}]^{\\mathsf{T}}$. The element is subjected to a uniform, pre-existing axial force $N$ that is constant along the element. Adopt the signed convention that $N$ is positive in tension; for a compressive state, $N<0$. \n\nUsing the total Lagrangian form of the principle of virtual work and the Green–Lagrange axial strain for a slender bar, derive the consistent initial-stress (geometric) stiffness matrix in global coordinates for incremental equilibrium about the straight, pre-stressed configuration. Assume a linear interpolation of the transverse displacement along the element axis and retain the quadratic term in the Green–Lagrange strain that couples the axial force $N$ with transverse displacement gradients. Denote the direction cosines by $c=\\cos\\theta$ and $s=\\sin\\theta$, and let the local transverse unit normal (perpendicular to the element axis) expressed in global components be $\\mathbf{n}=[-s,\\;c]^{\\mathsf{T}}$.\n\nExpress your final answer as a single closed-form $4\\times 4$ matrix $\\mathbf{K}_{g}^{(g)}(N,L,c,s)$ multiplying the global nodal displacement vector $\\{d\\}$, written in terms of $N$, $L$, $c$, and $s$. Show explicitly how $\\mathbf{K}_{g}^{(g)}$ scales with $N$ and $L$. No numerical evaluation is required; provide a symbolic expression. No rounding is needed. No units should be included in the final matrix.", "solution": "The problem requires the derivation of the geometric stiffness matrix for a two-dimensional truss element. This derivation is performed within a Total Lagrangian framework, starting from the principle of virtual work and employing the Green-Lagrange strain measure, specialized for a slender bar element.\n\nThe contribution of the initial stress to the tangent stiffness matrix, known as the geometric or initial-stress stiffness matrix $\\mathbf{K}_g$, arises from the work done by the initial axial force $N$ during the deformation of the element. The relevant term in the incremental form of the principle of virtual work is:\n$$ \\delta W_g = \\int_{V_0} S_0 \\, \\delta E_{NL} \\, dV_0 $$\nwhere $S_0$ is the initial second Piola-Kirchhoff stress in the reference configuration, and $E_{NL}$ is the nonlinear part of the Green-Lagrange strain tensor. For a truss element with a constant predefined axial force $N$ and initial cross-sectional area $A_0$, the initial stress is uniform, $S_0 = N/A_0$. The integral over the initial volume $V_0$ simplifies to an integral over the element's initial length $L$:\n$$ \\delta W_g = \\int_{0}^{L} (A_0 S_0) \\, \\delta E_{NL} \\, dx = \\int_{0}^{L} N \\, \\delta E_{NL} \\, dx $$\nThe Green-Lagrange axial strain for a bar element is given by:\n$$ E = \\frac{\\partial u}{\\partial x} + \\frac{1}{2} \\left[ \\left(\\frac{\\partial u}{\\partial x}\\right)^2 + \\left(\\frac{\\partial v}{\\partial x}\\right)^2 \\right] $$\nwhere $u(x)$ and $v(x)$ are the axial and transverse displacements, respectively, in the element's local coordinate system. The problem specifies to retain the quadratic term coupling the axial force with transverse displacement gradients. This implies we consider the nonlinear strain term to be:\n$$ E_{NL} = \\frac{1}{2} \\left(\\frac{dv}{dx}\\right)^2 $$\nThe variation of this term is $\\delta E_{NL} = \\frac{dv}{dx} \\delta\\left(\\frac{dv}{dx}\\right)$. Substituting this into the expression for $\\delta W_g$ gives:\n$$ \\delta W_g = \\int_{0}^{L} N \\left(\\frac{dv}{dx}\\right) \\delta\\left(\\frac{dv}{dx}\\right) dx $$\nThe problem states to assume a linear interpolation for the transverse displacement $v(x)$ based on the local nodal transverse displacements, $u_{y1}$ and $u_{y2}$:\n$$ v(x) = \\left(1 - \\frac{x}{L}\\right) u_{y1} + \\left(\\frac{x}{L}\\right) u_{y2} $$\nThe gradient of the transverse displacement, which represents the element's rotation, is therefore constant along the length:\n$$ \\frac{dv}{dx} = \\frac{1}{L} (u_{y2} - u_{y1}) $$\nThe variation of this gradient is:\n$$ \\delta\\left(\\frac{dv}{dx}\\right) = \\frac{1}{L} (\\delta u_{y2} - \\delta u_{y1}) $$\nSubstituting these expressions for the gradient and its variation into the integral for $\\delta W_g$:\n$$ \\delta W_g = \\int_{0}^{L} N \\left[ \\frac{1}{L} (u_{y2} - u_{y1}) \\right] \\left[ \\frac{1}{L} (\\delta u_{y2} - \\delta u_{y1}) \\right] dx $$\nSince the integrand is constant with respect to $x$, the integration is trivial:\n$$ \\delta W_g = \\frac{N}{L^2} (u_{y2} - u_{y1}) (\\delta u_{y2} - \\delta u_{y1}) \\int_{0}^{L} dx = \\frac{N}{L} (u_{y2} - u_{y1}) (\\delta u_{y2} - \\delta u_{y1}) $$\nThis expression can be written in matrix form as $\\delta W_g = \\{\\delta d'\\}^{\\mathsf{T}} \\mathbf{K}_g^{(l)} \\{d'\\}$, where $\\{d'\\} = [u_{x1}, u_{y1}, u_{x2}, u_{y2}]^{\\mathsf{T}}$ is the local nodal displacement vector. Expanding the expression gives:\n$$ \\delta W_g = \\frac{N}{L} (\\delta u_{y1} u_{y1} - \\delta u_{y1} u_{y2} - \\delta u_{y2} u_{y1} + \\delta u_{y2} u_{y2}) $$\nFrom this quadratic form, the local geometric stiffness matrix $\\mathbf{K}_g^{(l)}$ is identified as:\n$$ \\mathbf{K}_g^{(l)} = \\frac{N}{L} \\begin{pmatrix} 0 & 0 & 0 & 0 \\\\ 0 & 1 & 0 & -1 \\\\ 0 & 0 & 0 & 0 \\\\ 0 & -1 & 0 & 1 \\end{pmatrix} $$\nTo obtain the geometric stiffness matrix in the global coordinate system, $\\mathbf{K}_g^{(g)}$, we perform a congruent transformation using the rotation matrix $\\mathbf{T}$:\n$$ \\mathbf{K}_g^{(g)} = \\mathbf{T}^{\\mathsf{T}} \\mathbf{K}_g^{(l)} \\mathbf{T} $$\nThe rotation matrix $\\mathbf{T}$ transforms global displacements $\\{d\\}$ to local displacements $\\{d'\\}$ and is constructed using the direction cosines $c = \\cos\\theta$ and $s = \\sin\\theta$:\n$$ \\mathbf{T} = \\begin{pmatrix} c & s & 0 & 0 \\\\ -s & c & 0 & 0 \\\\ 0 & 0 & c & s \\\\ 0 & 0 & -s & c \\end{pmatrix} $$\nThe transpose is:\n$$ \\mathbf{T}^{\\mathsf{T}} = \\begin{pmatrix} c & -s & 0 & 0 \\\\ s & c & 0 & 0 \\\\ 0 & 0 & c & -s \\\\ 0 & 0 & s & c \\end{pmatrix} $$\nPerforming the matrix multiplication $\\mathbf{K}_g^{(g)} = \\mathbf{T}^{\\mathsf{T}} \\left( \\frac{N}{L} \\begin{pmatrix} 0 & 0 & 0 & 0 \\\\ 0 & 1 & 0 & -1 \\\\ 0 & 0 & 0 & 0 \\\\ 0 & -1 & 0 & 1 \\end{pmatrix} \\right) \\mathbf{T}$:\n$$ \\mathbf{K}_g^{(g)} = \\frac{N}{L} \\mathbf{T}^{\\mathsf{T}} \\begin{pmatrix} 0 & 0 & 0 & 0 \\\\ -s & c & s & -c \\\\ 0 & 0 & 0 & 0 \\\\ s & -c & -s & c \\end{pmatrix} $$\n$$ \\mathbf{K}_g^{(g)} = \\frac{N}{L} \\begin{pmatrix} c & -s & 0 & 0 \\\\ s & c & 0 & 0 \\\\ 0 & 0 & c & -s \\\\ 0 & 0 & s & c \\end{pmatrix} \\begin{pmatrix} 0 & 0 & 0 & 0 \\\\ -s & c & s & -c \\\\ 0 & 0 & 0 & 0 \\\\ s & -c & -s & c \\end{pmatrix} $$\nThis multiplication yields the final matrix. The elements are computed as follows:\nRow 1: $[s^2, -sc, -s^2, sc]$\nRow 2: $[-sc, c^2, sc, -c^2]$\nRow 3: $[-s^2, sc, s^2, -sc]$\nRow 4: $[sc, -c^2, -sc, c^2]$\nThe resulting global geometric stiffness matrix is:\n$$ \\mathbf{K}_g^{(g)} = \\frac{N}{L} \\begin{pmatrix} s^2 & -sc & -s^2 & sc \\\\ -sc & c^2 & sc & -c^2 \\\\ -s^2 & sc & s^2 & -sc \\\\ sc & -c^2 & -sc & c^2 \\end{pmatrix} $$\nThis matrix clearly shows the scaling with the axial force $N$ and inverse scaling with the length $L$. It is proportional to $N/L$. This is the consistent geometric stiffness matrix for a two-dimensional truss element.", "answer": "$$\n\\boxed{\\frac{N}{L} \\begin{pmatrix} s^{2} & -sc & -s^{2} & sc \\\\ -sc & c^{2} & sc & -c^{2} \\\\ -s^{2} & sc & s^{2} & -sc \\\\ sc & -c^{2} & -sc & c^{2} \\end{pmatrix}}\n$$", "id": "2584381"}, {"introduction": "Identifying the critical buckling load is only the first step; understanding the behavior *after* buckling is often more important. The post-buckling path can reveal whether a failure is catastrophic or benign, and may involve complex phenomena like snap-through and snap-back. This exercise [@problem_id:2584348] uses a carefully constructed single-degree-of-freedom model to demonstrate these behaviors and, more importantly, to expose the algorithmic failure of simple load-controlled solution methods. It provides a clear, hands-on motivation for the advanced path-following algorithms, such as the arc-length method, that are indispensable in modern nonlinear analysis.", "problem": "Construct a minimal discrete model that exhibits snap-back in the load–displacement response and use it to expose algorithmic challenges for load control in the finite element method. Begin from the principle of stationary total potential energy and consider a single-degree-of-freedom surrogate of a post-buckling structural response with total potential\n$$\\Pi(u;P) = U(u) - P\\,u,$$\nwhere $u$ is the generalized displacement (in meters), $P$ is the applied scalar load (in newtons), and the stored energy function is\n$$U(u) = \\tfrac{1}{2}k\\,u^{2} - \\tfrac{1}{4}\\alpha\\,u^{4} + \\tfrac{1}{6}\\beta\\,u^{6}.$$\nHere $k$ (in $\\mathrm{N/m}$), $\\alpha$ (in $\\mathrm{N/m^{3}}$), and $\\beta$ (in $\\mathrm{N/m^{5}}$) are positive constants. This ansatz can be interpreted as the energy of a minimal discrete element capturing geometric nonlinearity leading to softening and subsequent restiffening.\n\nTasks:\n- From the stationary condition $d\\Pi/du=0$, derive the scalar equilibrium equation in residual form $r(u;P)=0$ together with its tangent (Jacobian) needed for a Newton-type iteration. Explain clearly what the internal force and the tangent stiffness are in this discrete setting.\n- Show how turning points (limit points) on the equilibrium path arise from a stationarity condition on the load–displacement curve. Derive an algebraic condition that characterizes the turning points, and determine how many real, positive turning points can occur as a function of the parameters $k$, $\\alpha$, and $\\beta$.\n- Using only load control (i.e., prescribing $P$ and solving for $u$), design an incremental–iterative Newton–Raphson procedure to trace the equilibrium path from $P=0$ up to a specified target $P_{\\max}^{\\mathrm{tar}}$. Assume a fixed number of load steps $N_{\\mathrm{steps}}$, a convergence tolerance $\\varepsilon$ on the residual, and a maximum number of Newton iterations per step $N_{\\mathrm{it}}^{\\max}$. If a step fails to converge, terminate and report how many steps successfully converged.\n- Identify and explain the algorithmic challenges that arise for load control as the path approaches and attempts to pass a turning point (snap-back), with reference to the derived tangent.\n\nTest suite:\nConsider $3$ cases with the following parameters (all in International System of Units, that is, forces in newtons and displacements in meters):\n- Case $1$: $k=1000$, $\\alpha=10$, $\\beta=1$, $P_{\\max}^{\\mathrm{tar}}=500$, $N_{\\mathrm{steps}}=50$.\n- Case $2$: $k=100$, $\\alpha=60$, $\\beta=5$, $P_{\\max}^{\\mathrm{tar}}=60$, $N_{\\mathrm{steps}}=50$.\n- Case $3$: $k=22.5$, $\\alpha=10$, $\\beta=2$, $P_{\\max}^{\\mathrm{tar}}=16$, $N_{\\mathrm{steps}}=40$.\n\nFor each case:\n- Determine the number of positive turning points on the equilibrium path. Count a repeated turning point as $1$.\n- Compute the maximum load at the turning points (if any), defined as the largest value of $P(u)$ among the positive turning points. If there are no turning points, report $0$ for this quantity. Express this load in newtons, rounded to three digits after the decimal point.\n- Execute the described load-controlled Newton–Raphson procedure with a residual tolerance $\\varepsilon = 10^{-10}$ and a per-step iteration cap $N_{\\mathrm{it}}^{\\max} = 50$, starting from $u=0$ at $P=0$, and report how many load steps successfully converged before failure (or $N_{\\mathrm{steps}}$ if no failure occurs).\n\nRequired final output format:\nYour program should produce a single line of output containing a flat, comma-separated list enclosed in square brackets. The list must concatenate, in order, for each case, the triple\n$[\\text{count}, \\text{P\\_max\\_turn}, \\text{steps\\_converged}]$,\nwhere $\\text{count}$ is an integer, $\\text{P\\_max\\_turn}$ is a float with three digits after the decimal point (in newtons), and $\\text{steps\\_converged}$ is an integer. For the three cases in order, the final single-line output must therefore contain $9$ values arranged as\n$[\\text{c1},\\text{p1},\\text{s1},\\text{c2},\\text{p2},\\text{s2},\\text{c3},\\text{p3},\\text{s3}]$ with no additional text.", "solution": "The problem statement is validated as coherent, scientifically grounded, and well-posed. The analysis will proceed from the fundamental principle of stationary total potential energy to derive the equilibrium behavior and algorithmic response of the specified discrete system.\n\nThe total potential energy of the system is given as\n$$\\Pi(u;P) = U(u) - P\\,u,$$\nwhere the strain energy $U(u)$ is\n$$U(u) = \\tfrac{1}{2}k\\,u^{2} - \\tfrac{1}{4}\\alpha\\,u^{4} + \\tfrac{1}{6}\\beta\\,u^{6}.$$\nHere, $u$ is the generalized displacement, $P$ is the applied load, and $k, \\alpha, \\beta$ are positive material and geometric parameters.\n\n**Equilibrium Equation and Tangent Stiffness**\n\nThe condition for equilibrium is that the total potential energy is stationary with respect to the generalized coordinate $u$. This is expressed as the vanishing of the first derivative of $\\Pi$:\n$$\\frac{d\\Pi}{du} = \\frac{dU}{du} - P = 0.$$\nComputing the derivative of the strain energy $U(u)$ yields the internal force of the system, denoted as $P_{\\mathrm{int}}(u)$:\n$$P_{\\mathrm{int}}(u) = \\frac{dU}{du} = k\\,u - \\alpha\\,u^{3} + \\beta\\,u^{5}.$$\nAt equilibrium, the internal force must balance the external load $P$. This leads to the equilibrium path equation $P(u)$:\n$$P(u) = k\\,u - \\alpha\\,u^{3} + \\beta\\,u^{5}.$$\nFor numerical solution schemes such as the Newton-Raphson method, it is standard to formulate the equilibrium condition in residual form, $r(u;P) = 0$. The residual represents the force imbalance for a given state $(u,P)$:\n$$r(u;P) = P_{\\mathrm{int}}(u) - P = k\\,u - \\alpha\\,u^{3} + \\beta\\,u^{5} - P.$$\nThe Newton-Raphson method requires the linearization of the residual function, which involves its derivative with respect to the unknown displacement $u$. This derivative is the tangent stiffness, $K_T(u)$, which in this single-degree-of-freedom case is the scalar equivalent of the Jacobian matrix:\n$$K_T(u) = \\frac{dr}{du} = \\frac{dP_{\\mathrm{int}}(u)}{du} = \\frac{d^2U}{du^2}.$$\nCalculating this derivative gives the expression for the tangent stiffness:\n$$K_T(u) = k - 3\\alpha\\,u^{2} + 5\\beta\\,u^{4}.$$\n\n**Analysis of Turning Points**\n\nTurning points (limit points) on the load-displacement equilibrium path are locations where the load $P(u)$ attains a local extremum with respect to displacement $u$. Mathematically, this corresponds to the condition where the derivative of the load with respect to displacement is zero:\n$$\\frac{dP}{du} = 0.$$\nFrom the derivations above, we see that this condition is identical to the tangent stiffness being zero: $K_T(u) = 0$. Thus, the displacements at which turning points occur are the roots of the equation:\n$$5\\beta\\,u^{4} - 3\\alpha\\,u^{2} + k = 0.$$\nThis is a biquadratic equation. Let $x = u^2$. Since we are interested in real displacements $u$, we require real, positive solutions for $x$. The equation transforms into a quadratic equation in $x$:\n$$5\\beta\\,x^{2} - 3\\alpha\\,x + k = 0.$$\nThe solutions for $x$ are given by the quadratic formula:\n$$x = \\frac{3\\alpha \\pm \\sqrt{(3\\alpha)^2 - 4(5\\beta)(k)}}{2(5\\beta)} = \\frac{3\\alpha \\pm \\sqrt{9\\alpha^2 - 20k\\beta}}{10\\beta}.$$\nThe nature and number of real solutions for $u$ depend on the discriminant, $\\Delta = 9\\alpha^2 - 20k\\beta$.\n\n1.  If $\\Delta < 0$ (i.e., $9\\alpha^2 < 20k\\beta$): There are no real solutions for $x$, and thus no turning points on the equilibrium path. The load-displacement curve is monotonic.\n2.  If $\\Delta = 0$ (i.e., $9\\alpha^2 = 20k\\beta$): There is one real solution for $x = \\frac{3\\alpha}{10\\beta}$. Since $k, \\alpha, \\beta$ are all positive, $x$ is positive. This yields one pair of symmetric solutions $u = \\pm\\sqrt{x}$, corresponding to one positive turning point.\n3.  If $\\Delta > 0$ (i.e., $9\\alpha^2 > 20k\\beta$): There are two distinct real solutions for $x$. Since $\\sqrt{9\\alpha^2 - 20k\\beta} < \\sqrt{9\\alpha^2} = 3\\alpha$, both numerators $3\\alpha \\pm \\sqrt{\\Delta}$ are positive. As $\\beta > 0$, both solutions $x_1$ and $x_2$ are positive. Each positive $x$ gives a pair of real solutions for $u$, leading to two distinct positive turning points.\n\n**Load-Controlled Newton-Raphson Procedure**\n\nThe task requires tracing the equilibrium path using a load-controlled incremental-iterative strategy. The total target load $P_{\\max}^{\\mathrm{tar}}$ is divided into $N_{\\mathrm{steps}}$ equal increments, $\\Delta P = P_{\\max}^{\\mathrm{tar}} / N_{\\mathrm{steps}}$. The procedure starts from the known equilibrium state $(u,P) = (0,0)$.\n\nFor each load step $i = 1, \\dots, N_{\\mathrm{steps}}$:\n1.  The target load is set to $P_i = i \\cdot \\Delta P$.\n2.  A Newton-Raphson iteration is initiated to find the corresponding equilibrium displacement $u_i$ that satisfies $r(u_i; P_i) = 0$.\n3.  The initial guess for the displacement at step $i$ is the converged solution from the previous step, $u_i^{(0)} = u_{i-1}$ (with $u_0 = 0$).\n4.  The iterative update proceeds as follows for iteration $j=0, 1, 2, \\dots$:\n    $$u_i^{(j+1)} = u_i^{(j)} - \\left[K_T(u_i^{(j)})\\right]^{-1} r(u_i^{(j)}; P_i).$$\n5.  The iteration continues until the norm of the residual is below a tolerance, $|r(u_i^{(j)}; P_i)| < \\varepsilon$, or until a maximum number of iterations, $N_{\\mathrm{it}}^{\\max}$, is reached.\n6.  If convergence is not achieved within $N_{\\mathrm{it}}^{\\max}$ iterations, the procedure terminates and reports failure.\n\n**Algorithmic Challenges of Load Control**\n\nThe load-controlled approach is simple but exhibits fundamental limitations when dealing with nonlinear responses involving turning points, such as snap-through or snap-back.\n\n1.  **Singularity at Limit Points:** As the equilibrium state $(u, P(u))$ approaches a turning point, the tangent stiffness $K_T(u)$ approaches zero. The Newton-Raphson correction, $\\Delta u = -r/K_T$, becomes unbounded. This leads to large, non-physical displacement updates, causing the iterative process to overshoot the solution, oscillate, and ultimately diverge. The algorithm fails to converge at or near a limit point.\n\n2.  **Inability to Traverse Turning Points:** Load control, by definition, prescribes a monotonically increasing sequence of load levels. However, to trace an equilibrium path beyond a maximum load point (snap-through) or a minimum load point (snap-back), the load parameter must decrease. A load-controlled scheme is algorithmically incapable of following such a path segment. When a load increment attempts to push the system to a load level for which no stable equilibrium exists on the current path branch (i.e., a load greater than a local maximum), the solver will fail to find a solution.\n\n3.  **Solution Multiplicity:** For loads between the maximum and minimum turning point values, multiple equilibrium displacements $u$ exist. The standard Newton-Raphson method, using the previous solution as an initial guess, will typically converge to the solution on the nearest continuous path segment. It has no mechanism to jump to other, possibly stable, equilibrium configurations. This is not the primary cause of failure at the limit point itself, but it highlights the complexity of the solution space that load control cannot explore.\n\nThese challenges demonstrate why load control is inadequate for analyzing complex post-buckling behavior. More robust path-following algorithms, such as arc-length methods (e.g., Riks or Crisfield methods), are required. These methods treat both the load and displacements as variables, adding a constraint equation on the \"length\" of the incremental step in the load-displacement space, which allows them to successfully navigate limit points.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the problem for the three specified test cases.\n    For each case, it determines the number of turning points, the maximum load\n    at these points, and the number of successfully converged steps in a\n    load-controlled simulation.\n    \"\"\"\n\n    test_cases = [\n        # k, alpha, beta, P_max_tar, N_steps\n        (1000.0, 10.0, 1.0, 500.0, 50),\n        (100.0, 60.0, 5.0, 60.0, 50),\n        (22.5, 10.0, 2.0, 16.0, 40),\n    ]\n\n    # Algorithm parameters from problem statement\n    epsilon = 1e-10\n    n_it_max = 50\n\n    results = []\n    for case in test_cases:\n        k, alpha, beta, p_max_tar, n_steps = case\n        \n        # Task 1: Analyze turning points\n        count, p_max_turn = analyze_turning_points(k, alpha, beta)\n        \n        # Task 2: Run load-controlled Newton-Raphson simulation\n        steps_converged = run_load_control(k, alpha, beta, p_max_tar, n_steps, epsilon, n_it_max)\n        \n        results.append(count)\n        results.append(f\"{p_max_turn:.3f}\")\n        results.append(steps_converged)\n\n    print(f\"[{','.join(map(str, results))}]\")\n\ndef analyze_turning_points(k, alpha, beta):\n    \"\"\"\n    Determines the number of positive turning points and the maximum load at those points.\n    \n    A turning point occurs where the tangent stiffness K_T = 5*beta*u^4 - 3*alpha*u^2 + k is zero.\n    This is a quadratic equation in u^2.\n    \"\"\"\n    discriminant = (3 * alpha)**2 - 4 * (5 * beta) * k\n\n    if discriminant  0:\n        return 0, 0.0\n\n    # The problem specifies k, alpha, beta > 0.\n    # The term sqrt(9*alpha^2 - 20*k*beta) is always less than 3*alpha.\n    # Thus, if real solutions for u^2 exist, they must be positive.\n    \n    if discriminant == 0:\n        # One repeated positive root for u^2\n        u_sq = (3 * alpha) / (10 * beta)\n        u_tp = np.sqrt(u_sq)\n        p_tp = u_tp * (k - alpha * u_tp**2 + beta * u_tp**4)\n        return 1, p_tp\n    else: # discriminant > 0\n        # Two distinct positive roots for u^2\n        sqrt_disc = np.sqrt(discriminant)\n        u_sq1 = (3 * alpha - sqrt_disc) / (10 * beta)\n        u_sq2 = (3 * alpha + sqrt_disc) / (10 * beta)\n\n        u_tp1 = np.sqrt(u_sq1)\n        u_tp2 = np.sqrt(u_sq2)\n\n        p_tp1 = u_tp1 * (k - alpha * u_tp1**2 + beta * u_tp1**4)\n        p_tp2 = u_tp2 * (k - alpha * u_tp2**2 + beta * u_tp2**4)\n        \n        return 2, max(p_tp1, p_tp2)\n\ndef run_load_control(k, alpha, beta, p_max_tar, n_steps, tol, max_it):\n    \"\"\"\n    Performs an incremental-iterative analysis using load control and Newton-Raphson.\n    Returns the number of successfully converged load steps.\n    \"\"\"\n    delta_p = p_max_tar / n_steps\n    u_converged = 0.0  # Converged displacement from the previous step\n\n    for i in range(1, n_steps + 1):\n        p_target = i * delta_p\n        u_k = u_converged  # Initial guess for the current step (predictor)\n        \n        step_converged = False\n        for _ in range(max_it):\n            # Calculate residual force\n            residual = k * u_k - alpha * u_k**3 + beta * u_k**5 - p_target\n            \n            # Check for convergence\n            if abs(residual)  tol:\n                u_converged = u_k\n                step_converged = True\n                break\n            \n            # Calculate tangent stiffness\n            tangent = k - 3 * alpha * u_k**2 + 5 * beta * u_k**4\n            \n            # Check for singularity (a symptom of approaching a limit point)\n            if abs(tangent)  1e-12:\n                # Singular tangent, iteration will fail. Break early.\n                break\n            \n            # Calculate displacement correction and update\n            delta_u = -residual / tangent\n            u_k += delta_u\n        \n        if not step_converged:\n            # Current step i failed to converge. Return number of last successful step.\n            return i - 1\n            \n    # All steps converged\n    return n_steps\n\nsolve()\n```", "id": "2584348"}]}