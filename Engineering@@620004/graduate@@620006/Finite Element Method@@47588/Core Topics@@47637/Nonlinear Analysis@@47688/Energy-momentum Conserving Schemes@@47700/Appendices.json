{"hands_on_practices": [{"introduction": "Before exploring advanced conserving schemes, it is instructive to analyze the behavior of a simpler, widely-used method. The explicit central difference scheme is popular for its simplicity and efficiency, but it does not formally conserve energy. This exercise allows you to derive the exact per-step energy fluctuation for a linear oscillator, providing a concrete understanding of how energy behaves in a non-conserving, yet stable, integration [@problem_id:2555622]. By relating this fluctuation to the Courant–Friedrichs–Lewy (CFL) condition, you will see how numerical stability constrains energy error, which motivates the development of schemes that control energy by design.", "problem": "Consider the semi-discrete single-degree-of-freedom equation that arises from a finite element (FE) semi-discretization of undamped linear elastodynamics in one mode,\n$$\nm\\,\\ddot{u}(t) + k\\,u(t) = 0,\n$$\nwhere $m>0$ is the modal mass, $k>0$ is the modal stiffness, and $u(t)$ is the modal displacement. Define the natural frequency by $\\omega = \\sqrt{k/m}$. Discretize time using a uniform step $\\Delta t$ and the explicit central difference method, interpreting the second time derivative by the centered finite difference at $t^{n}$:\n$$\n\\ddot{u}(t^{n}) \\approx \\frac{u^{n+1} - 2 u^{n} + u^{n-1}}{\\Delta t^{2}}.\n$$\nDefine the discrete kinetic energy and potential energy at step $n$ by\n$$\nT^{n} = \\frac{1}{2} m \\left(\\frac{u^{n} - u^{n-1}}{\\Delta t}\\right)^{2}, \\qquad V^{n} = \\frac{1}{2} k \\left(u^{n}\\right)^{2},\n$$\nand the discrete total energy $E^{n} = T^{n} + V^{n}$. Starting only from Newton’s second law, the above finite-difference representation of the second derivative, and the definitions of $T^{n}$ and $V^{n}$, derive a closed-form expression for the per-step discrete energy variation\n$$\n\\Delta E^{n} := E^{n+1} - E^{n}\n$$\nin terms of $m$, $k$, $\\Delta t$, $u^{n-1}$, and $u^{n}$. Express your final answer as a single symbolic expression (no equality sign), simplified as much as possible. If this expression were to be evaluated numerically, the energy should be expressed in Joules. Finally, relate your result to the Courant–Friedrichs–Lewy (CFL) condition by introducing the nondimensional parameter $s = \\omega^{2} \\Delta t^{2}$ and explaining how the sign and boundedness of $\\Delta E^{n}$ depend on whether $s \\leq 4$ or $s > 4$. Your final answer must be the requested closed-form expression only (no units and no additional commentary).", "solution": "The problem as stated is well-posed and scientifically sound. It is a standard exercise in the analysis of numerical methods for ordinary differential equations arising from structural dynamics. I will proceed with the derivation.\n\nThe governing equation for the undamped single-degree-of-freedom system is given by Newton's second law:\n$$ m\\,\\ddot{u}(t) + k\\,u(t) = 0 $$\nwhere $m > 0$ and $k > 0$. The time domain is discretized with a uniform step size $\\Delta t$, such that $t^n = n \\Delta t$. The second derivative $\\ddot{u}(t)$ at time $t^n$ is approximated using the second-order central finite difference formula:\n$$ \\ddot{u}(t^n) \\approx \\frac{u^{n+1} - 2u^n + u^{n-1}}{\\Delta t^2} $$\nSubstituting this into the governing equation yields the fully discrete equation of motion:\n$$ m \\left( \\frac{u^{n+1} - 2u^n + u^{n-1}}{\\Delta t^2} \\right) + k u^n = 0 $$\nThis equation defines the time-stepping algorithm. We can rearrange it to obtain an explicit update rule for the displacement $u^{n+1}$:\n$$ u^{n+1} = \\left(2 - \\frac{k \\Delta t^2}{m}\\right) u^n - u^{n-1} $$\n\nWe are asked to find the per-step variation in the discrete total energy, $\\Delta E^n = E^{n+1} - E^n$. The total energy at step $n$ is defined as the sum of kinetic and potential energies, $E^n = T^n + V^n$. The provided definitions are:\n$$ T^n = \\frac{1}{2} m \\left( \\frac{u^n - u^{n-1}}{\\Delta t} \\right)^2 $$\n$$ V^n = \\frac{1}{2} k (u^n)^2 $$\nAccordingly, the energy at step $n+1$ is:\n$$ E^{n+1} = T^{n+1} + V^{n+1} = \\frac{1}{2} m \\left( \\frac{u^{n+1} - u^n}{\\Delta t} \\right)^2 + \\frac{1}{2} k (u^{n+1})^2 $$\nThe energy variation is therefore:\n$$ \\Delta E^n = E^{n+1} - E^n = \\left( T^{n+1} - T^n \\right) + \\left( V^{n+1} - V^n \\right) $$\nLet us analyze the change in kinetic energy, $T^{n+1} - T^n$:\n$$ T^{n+1} - T^n = \\frac{m}{2 \\Delta t^2} \\left[ (u^{n+1} - u^n)^2 - (u^n - u^{n-1})^2 \\right] $$\nUsing the identity $a^2 - b^2 = (a-b)(a+b)$, we get:\n$$ T^{n+1} - T^n = \\frac{m}{2 \\Delta t^2} (u^{n+1} - 2u^n + u^{n-1})(u^{n+1} - u^{n-1}) $$\nFrom the discrete equation of motion, we have the identity $u^{n+1} - 2u^n + u^{n-1} = -\\frac{k \\Delta t^2}{m} u^n$. Substituting this into the expression for the change in kinetic energy yields:\n$$ T^{n+1} - T^n = \\frac{m}{2 \\Delta t^2} \\left( -\\frac{k \\Delta t^2}{m} u^n \\right) (u^{n+1} - u^{n-1}) = -\\frac{k}{2} u^n (u^{n+1} - u^{n-1}) $$\nNow, we can write the total energy variation as:\n$$ \\Delta E^n = -\\frac{k}{2} u^n (u^{n+1} - u^{n-1}) + \\left( V^{n+1} - V^n \\right) $$\nSubstituting the definition for potential energy, $V^n = \\frac{1}{2}k(u^n)^2$:\n$$ \\Delta E^n = -\\frac{k}{2} u^n (u^{n+1} - u^{n-1}) + \\frac{k}{2} \\left( (u^{n+1})^2 - (u^n)^2 \\right) $$\nWe factor out $\\frac{k}{2}$ and rearrange the terms:\n$$ \\Delta E^n = \\frac{k}{2} \\left[ (u^{n+1})^2 - (u^n)^2 - u^n u^{n+1} + u^n u^{n-1} \\right] $$\n$$ \\Delta E^n = \\frac{k}{2} \\left[ u^{n+1}(u^{n+1} - u^n) - u^n(u^n - u^{n-1}) \\right] $$\nThis expression depends on $u^{n+1}$. To satisfy the problem's requirement, we must eliminate $u^{n+1}$ using the update rule $u^{n+1} = (2 - \\frac{k \\Delta t^2}{m}) u^n - u^{n-1}$. Let us substitute this into the components of the expression above:\n$$ u^{n+1} - u^n = \\left(1 - \\frac{k \\Delta t^2}{m}\\right) u^n - u^{n-1} $$\nThus, the term $u^{n+1}(u^{n+1} - u^n)$ becomes:\n$$ u^{n+1}(u^{n+1} - u^n) = \\left[ \\left(2 - \\frac{k \\Delta t^2}{m}\\right) u^n - u^{n-1} \\right] \\left[ \\left(1 - \\frac{k \\Delta t^2}{m}\\right) u^n - u^{n-1} \\right] $$\nThis leads to unnecessarily complicated algebra. A more direct substitution into an earlier form is more efficient. Let us return to:\n$$ \\Delta E^n = \\frac{k}{2} \\left[ (u^{n+1})^2 - 2u^n u^{n+1} + (1-s)(u^n)^2 \\right] $$\nwhere we have used the convenient non-dimensional parameter $s = \\frac{k}{m}\\Delta t^2 = \\omega^2 \\Delta t^2$ and expressed the relation as $\\Delta E^n = \\frac{k}{2}[ (u^{n+1}-u^n)^2 - s(u^n)^2 ]$. This is not quite right.\nLet us restart the final substitution carefully.\nMy expression was $\\Delta E^n = \\frac{k}{2} \\left[ (u^{n+1})^2 - (u^n)^2 - u^n u^{n+1} + u^n u^{n-1} \\right]$.\nUsing $u^{n+1} = (2-s)u^n - u^{n-1}$.\n$$ \\Delta E^n = \\frac{k}{2} \\left[ ((2-s)u^n - u^{n-1})^2 - (u^n)^2 - u^n((2-s)u^n - u^{n-1}) + u^n u^{n-1} \\right] $$\n$$ \\Delta E^n = \\frac{k}{2} \\left[ ((2-s)^2 - (2-s) - 1)(u^n)^2 + (-2(2-s) + 1 + 1)u^n u^{n-1} + (u^{n-1})^2 \\right] $$\nThe coefficient of $(u^n)^2$ is $(4-4s+s^2) - 2+s - 1 = s^2-3s+1$.\nThe coefficient of $u^n u^{n-1}$ is $-4+2s+2 = 2s-2 = 2(s-1)$.\nThe coefficient of $(u^{n-1})^2$ is $1$.\nThis gives:\n$$ \\Delta E^n = \\frac{k}{2} \\left[ (s^2-3s+1)(u^n)^2 + 2(s-1)u^n u^{n-1} + (u^{n-1})^2 \\right] $$\nThis quadratic form can be simplified by completing the square. We notice that $(s^2-3s+1) = (s^2-2s+1) - s = (s-1)^2 - s$.\n$$ \\Delta E^n = \\frac{k}{2} \\left[ ((s-1)^2 - s)(u^n)^2 + 2(s-1)u^n u^{n-1} + (u^{n-1})^2 \\right] $$\n$$ \\Delta E^n = \\frac{k}{2} \\left[ \\left( (s-1)^2 (u^n)^2 + 2(s-1)u^n u^{n-1} + (u^{n-1})^2 \\right) - s(u^n)^2 \\right] $$\n$$ \\Delta E^n = \\frac{k}{2} \\left[ \\left( (s-1)u^n + u^{n-1} \\right)^2 - s(u^n)^2 \\right] $$\nFinally, we substitute back the definition $s = \\frac{k}{m}\\Delta t^2$ to provide the answer in the requested variables:\n$$ \\Delta E^n = \\frac{k}{2} \\left[ \\left( \\left( \\frac{k}{m}\\Delta t^2 - 1 \\right)u^n + u^{n-1} \\right)^2 - \\frac{k}{m}\\Delta t^2 (u^n)^2 \\right] $$\nThis is the final, simplified, closed-form expression for the discrete energy variation.\n\nNow, we relate this result to the Courant–Friedrichs–Lewy (CFL) condition. For the central difference scheme applied to this system, the stability limit is given by $s \\le 4$, which is equivalent to $\\omega \\Delta t \\le 2$.\n\nThe sign and boundedness of $\\Delta E^n$ are analyzed as follows:\nThe derived expression for $\\Delta E^n$ is a difference of two squared quantities. Its sign is determined by the relative magnitudes of the terms $\\left( (s-1)u^n + u^{n-1} \\right)^2$ and $s(u^n)^2$. Since the state $(u^n, u^{n-1})$ evolves in time, this relative magnitude changes at each step. Consequently, $\\Delta E^n$ does not have a fixed sign; it can be positive, negative, or zero at any given step. The total energy $E^n$ as defined is not a monotonically increasing or decreasing quantity, even when the scheme is unstable. It will oscillate.\n\nThe boundedness of $\\Delta E^n$, however, is directly linked to the stability of the numerical scheme.\n1. When $s \\leq 4$ (the CFL condition is met), the scheme is stable (or neutrally stable at $s=4$). The amplitude of the numerical solution $u^n$ remains bounded for all $n$. Because $\\Delta E^n$ is a continuous quadratic function of the state $(u^n, u^{n-1})$, a bounded solution guarantees that $\\Delta E^n$ is also bounded. The energy fluctuations are contained.\n2. When $s > 4$ (the CFL condition is violated), the scheme is unstable. The numerical solution exhibits exponential growth, i.e., $|u^n| \\to \\infty$ as $n \\to \\infty$. As the magnitudes of $u^n$ and $u^{n-1}$ grow without bound, the magnitude of $\\Delta E^n$ also grows without bound, typically quadratically with the solution amplitude at each step. This unbounded growth in energy fluctuations is a manifestation of the numerical instability.\n\nIn summary, while the sign of the energy variation $\\Delta E^n$ is indeterminate at any given step, its boundedness is a direct consequence of the numerical stability dictated by the CFL condition.", "answer": "$$ \\boxed{ \\frac{k}{2} \\left[ \\left( \\left( \\frac{k}{m}\\Delta t^{2} - 1 \\right)u^{n} + u^{n-1} \\right)^{2} - \\frac{k}{m}\\Delta t^{2} (u^{n})^{2} \\right] } $$", "id": "2555622"}, {"introduction": "Having established the potential for energy error in simpler schemes, we now turn to an algorithm specifically designed for conservation. Energy-momentum conserving schemes are constructed to preserve fundamental physical invariants at the discrete level, a critical feature for long-term simulations of nonlinear systems. This practice guides you through a proof that a momentum-conserving scheme exactly preserves the total angular momentum for a finite element undergoing a rigid body rotation [@problem_id:2555623]. Successfully completing this derivation provides direct insight into the algebraic structure that guarantees these desirable conservation properties.", "problem": "Consider a single 4-node tetrahedral finite-strain element in three-dimensional space undergoing a rigid body motion. The nodes are located at the spatial positions\n$$\n\\mathbf{x}_1 = (1,\\,1,\\,1),\\quad\n\\mathbf{x}_2 = (-1,\\,-1,\\,1),\\quad\n\\mathbf{x}_3 = (-1,\\,1,\\,-1),\\quad\n\\mathbf{x}_4 = (1,\\,-1,\\,-1),\n$$\nso that the centroid is at the origin. Each node carries a lumped mass $m$, so that the total discrete mass is $M = 4m$. The motion is a rigid body rotation about the origin with constant angular velocity vector $\\boldsymbol{\\Omega}$, i.e., $\\mathbf{x}(t) = \\mathbf{R}(t)\\,\\mathbf{X}$ with $\\mathbf{R}(t) \\in \\mathrm{SO}(3)$ and $\\dot{\\mathbf{R}}(t) = \\boldsymbol{\\Omega}\\times \\mathbf{R}(t)$, so that the nodal velocities satisfy $\\mathbf{v}_a(t) = \\boldsymbol{\\Omega} \\times \\mathbf{x}_a(t)$ for $a=1,2,3,4$.\n\nThe time integration employs an energy-momentum conserving scheme based on the midpoint rule for kinematics,\n$$\n\\mathbf{x}_a^{n+1} = \\mathbf{x}_a^{n} + \\Delta t\\,\\mathbf{v}_a^{n+\\frac{1}{2}},\\qquad \\mathbf{v}_a^{n+\\frac{1}{2}} = \\frac{\\mathbf{v}_a^{n+1}+\\mathbf{v}_a^{n}}{2},\n$$\nand the discrete momentum balance\n$$\nm\\left(\\mathbf{v}_a^{n+1} - \\mathbf{v}_a^{n}\\right) = \\Delta t\\left(\\mathbf{f}_{a,\\mathrm{int}}^{n+\\frac{1}{2}} + \\mathbf{f}_{a,\\mathrm{ext}}^{n+\\frac{1}{2}}\\right),\n$$\nwith no external loads $\\mathbf{f}_{a,\\mathrm{ext}}^{n+\\frac{1}{2}}=\\mathbf{0}$. The internal nodal forces $\\mathbf{f}_{a,\\mathrm{int}}^{n+\\frac{1}{2}}$ are computed from an energy-momentum consistent algorithmic stress so that, in the absence of external loads and for a rigid body motion, they produce zero net force and zero net moment:\n$$\n\\sum_{a=1}^{4}\\mathbf{f}_{a,\\mathrm{int}}^{n+\\frac{1}{2}}=\\mathbf{0},\\qquad \\sum_{a=1}^{4}\\mathbf{x}_a^{n+\\frac{1}{2}}\\times \\mathbf{f}_{a,\\mathrm{int}}^{n+\\frac{1}{2}}=\\mathbf{0}.\n$$\n\nDefine the discrete angular momentum at step $n$ about the origin by\n$$\n\\mathbf{L}^n := \\sum_{a=1}^{4} m\\,\\mathbf{x}_a^{n}\\times \\mathbf{v}_a^{n}.\n$$\n\nTasks:\n1) Starting from the rigid body kinematics $\\mathbf{v}_a^{n}=\\boldsymbol{\\Omega}\\times \\mathbf{x}_a^{n}$ and the definition of discrete angular momentum, derive a closed-form expression for $\\mathbf{L}^n$ in terms of $m$ and $\\boldsymbol{\\Omega}$ for the given nodal positions.\n\n2) Using only the midpoint kinematics, the discrete momentum balance, and the stated properties of the energy-momentum consistent internal forces, prove that $\\mathbf{L}^{n+1}=\\mathbf{L}^{n}$ for this rigid body motion with zero external loads.\n\nExpress your final answer for the discrete angular momentum vector symbolically in terms of $m$ and $\\boldsymbol{\\Omega}$. No numerical rounding is required, and no units should be included in the final expression.", "solution": "The problem statement is scientifically grounded, well-posed, and objective. It is a standard problem in computational mechanics, specifically in the analysis of numerical integration schemes for nonlinear elastodynamics. All necessary data and definitions are provided, and there are no internal contradictions or factual errors. The problem is valid for solution.\n\nThe solution is divided into two parts as per the problem tasks.\n\nTask $1$: Derivation of the discrete angular momentum $\\mathbf{L}^n$.\n\nThe discrete angular momentum at time step $n$ is defined as the sum of the moments of momentum of the individual nodal masses about the origin:\n$$\n\\mathbf{L}^n := \\sum_{a=1}^{4} m\\,\\mathbf{x}_a^{n}\\times \\mathbf{v}_a^{n}\n$$\nThe motion is specified as a rigid body rotation about the origin with a constant angular velocity vector $\\boldsymbol{\\Omega}$. The velocity of each node is thus given by the kinematic relation:\n$$\n\\mathbf{v}_a^{n} = \\boldsymbol{\\Omega} \\times \\mathbf{x}_a^{n}\n$$\nSubstituting this expression for the velocity into the definition of angular momentum, we obtain:\n$$\n\\mathbf{L}^n = \\sum_{a=1}^{4} m\\,\\mathbf{x}_a^{n}\\times (\\boldsymbol{\\Omega} \\times \\mathbf{x}_a^{n})\n$$\nWe apply the vector triple product identity, $\\mathbf{a} \\times (\\mathbf{b} \\times \\mathbf{c}) = \\mathbf{b}(\\mathbf{a} \\cdot \\mathbf{c}) - \\mathbf{c}(\\mathbf{a} \\cdot \\mathbf{b})$, with $\\mathbf{a} = \\mathbf{x}_a^n$, $\\mathbf{b} = \\boldsymbol{\\Omega}$, and $\\mathbf{c} = \\mathbf{x}_a^n$. This gives:\n$$\n\\mathbf{x}_a^{n}\\times (\\boldsymbol{\\Omega} \\times \\mathbf{x}_a^{n}) = \\boldsymbol{\\Omega}(\\mathbf{x}_a^{n} \\cdot \\mathbf{x}_a^{n}) - \\mathbf{x}_a^{n}(\\mathbf{x}_a^{n} \\cdot \\boldsymbol{\\Omega})\n$$\nSubstituting this back into the expression for $\\mathbf{L}^n$ and factoring out the constant mass $m$ yields:\n$$\n\\mathbf{L}^n = m \\sum_{a=1}^{4} \\left[ \\boldsymbol{\\Omega}|\\mathbf{x}_a^{n}|^2 - \\mathbf{x}_a^{n}(\\mathbf{x}_a^{n} \\cdot \\boldsymbol{\\Omega}) \\right]\n$$\nThis can be rewritten in terms of the discrete tensor of inertia, $\\mathbf{J}^n$, as $\\mathbf{L}^n = \\mathbf{J}^n \\boldsymbol{\\Omega}$. The tensor of inertia is given by:\n$$\n\\mathbf{J}^n = m \\sum_{a=1}^{4} \\left( |\\mathbf{x}_a^{n}|^2 \\mathbf{I} - \\mathbf{x}_a^{n} \\otimes \\mathbf{x}_a^{n} \\right)\n$$\nwhere $\\mathbf{I}$ is the $3 \\times 3$ identity tensor. Since the motion is a rigid rotation, the distance of each node from the origin is constant. We can compute the components of $\\mathbf{J}^n$ using the given nodal positions, which we can denote as $\\mathbf{x}_a$ without loss of generality.\nThe nodal positions are:\n$\\mathbf{x}_1 = (1,1,1)$, $\\mathbf{x}_2 = (-1,-1,1)$, $\\mathbf{x}_3 = (-1,1,-1)$, and $\\mathbf{x}_4 = (1,-1,-1)$.\n\nFirst, we compute the squared magnitude of each position vector:\n$|\\mathbf{x}_1|^2 = 1^2 + 1^2 + 1^2 = 3$\n$|\\mathbf{x}_2|^2 = (-1)^2 + (-1)^2 + 1^2 = 3$\n$|\\mathbf{x}_3|^2 = (-1)^2 + 1^2 + (-1)^2 = 3$\n$|\\mathbf{x}_4|^2 = 1^2 + (-1)^2 + (-1)^2 = 3$\nThe sum of the squared magnitudes is $\\sum_{a=1}^{4} |\\mathbf{x}_a|^2 = 4 \\times 3 = 12$.\n\nNext, we compute the sum of the dyadic products $\\sum_{a=1}^{4} \\mathbf{x}_a \\otimes \\mathbf{x}_a$. This is a $3 \\times 3$ matrix whose $(i,j)$ component is $\\sum_{a=1}^{4} x_{a,i} x_{a,j}$.\nThe diagonal components are:\n$\\sum x_a^2 = 1^2 + (-1)^2 + (-1)^2 + 1^2 = 4$\n$\\sum y_a^2 = 1^2 + (-1)^2 + 1^2 + (-1)^2 = 4$\n$\\sum z_a^2 = 1^2 + 1^2 + (-1)^2 + (-1)^2 = 4$\nThe off-diagonal components are:\n$\\sum x_a y_a = (1)(1) + (-1)(-1) + (-1)(1) + (1)(-1) = 1+1-1-1 = 0$\n$\\sum x_a z_a = (1)(1) + (-1)(1) + (-1)(-1) + (1)(-1) = 1-1+1-1 = 0$\n$\\sum y_a z_a = (1)(1) + (-1)(1) + (1)(-1) + (-1)(-1) = 1-1-1+1 = 0$\nThus, the sum of the dyadic products is a diagonal matrix:\n$$\n\\sum_{a=1}^{4} \\mathbf{x}_a \\otimes \\mathbf{x}_a = \\begin{pmatrix} 4 & 0 & 0 \\\\ 0 & 4 & 0 \\\\ 0 & 0 & 4 \\end{pmatrix} = 4\\mathbf{I}\n$$\nNow we assemble the inertia tensor:\n$$\n\\mathbf{J} = m \\left( \\left(\\sum_{a=1}^{4} |\\mathbf{x}_a|^2\\right) \\mathbf{I} - \\sum_{a=1}^{4} \\mathbf{x}_a \\otimes \\mathbf{x}_a \\right) = m \\left( 12\\mathbf{I} - 4\\mathbf{I} \\right) = 8m\\mathbf{I}\n$$\nSince the inertia tensor is spherical (a scalar multiple of the identity tensor), it is invariant under rotation. Therefore, $\\mathbf{J}^n = \\mathbf{J} = 8m\\mathbf{I}$ for all $n$. The angular momentum is then:\n$$\n\\mathbf{L}^n = \\mathbf{J}^n \\boldsymbol{\\Omega} = (8m\\mathbf{I})\\boldsymbol{\\Omega} = 8m\\boldsymbol{\\Omega}\n$$\n\nTask $2$: Proof of conservation of angular momentum, $\\mathbf{L}^{n+1}=\\mathbf{L}^{n}$.\n\nWe need to show that the change in discrete angular momentum over one time step, $\\mathbf{L}^{n+1} - \\mathbf{L}^{n}$, is zero.\n$$\n\\mathbf{L}^{n+1} - \\mathbf{L}^{n} = \\sum_{a=1}^{4} m \\left( \\mathbf{x}_a^{n+1} \\times \\mathbf{v}_a^{n+1} - \\mathbf{x}_a^{n} \\times \\mathbf{v}_a^{n} \\right)\n$$\nWe use the midpoint rule definitions. Let $\\mathbf{x}_a^{n+\\frac{1}{2}} = \\frac{\\mathbf{x}_a^{n+1}+\\mathbf{x}_a^{n}}{2}$ and $\\mathbf{v}_a^{n+\\frac{1}{2}} = \\frac{\\mathbf{v}_a^{n+1}+\\mathbf{v}_a^{n}}{2}$.\nFrom the kinematic update rule, $\\mathbf{x}_a^{n+1} - \\mathbf{x}_a^{n} = \\Delta t\\,\\mathbf{v}_a^{n+\\frac{1}{2}}$.\nWe express the start and end point values in terms of the midpoint values:\n$\\mathbf{x}_a^{n+1} = \\mathbf{x}_a^{n+\\frac{1}{2}} + \\frac{\\Delta t}{2}\\mathbf{v}_a^{n+\\frac{1}{2}}$\n$\\mathbf{x}_a^{n} = \\mathbf{x}_a^{n+\\frac{1}{2}} - \\frac{\\Delta t}{2}\\mathbf{v}_a^{n+\\frac{1}{2}}$\n$\\mathbf{v}_a^{n+1} = \\mathbf{v}_a^{n+\\frac{1}{2}} + \\frac{1}{2}(\\mathbf{v}_a^{n+1} - \\mathbf{v}_a^{n})$\n$\\mathbf{v}_a^{n} = \\mathbf{v}_a^{n+\\frac{1}{2}} - \\frac{1}{2}(\\mathbf{v}_a^{n+1} - \\mathbf{v}_a^{n})$\nLet us evaluate the difference term $\\mathbf{x}_a^{n+1} \\times \\mathbf{v}_a^{n+1} - \\mathbf{x}_a^{n} \\times \\mathbf{v}_a^{n}$:\n$$\n\\left(\\mathbf{x}_a^{n+\\frac{1}{2}} + \\frac{\\Delta t}{2}\\mathbf{v}_a^{n+\\frac{1}{2}}\\right) \\times \\left(\\mathbf{v}_a^{n+\\frac{1}{2}} + \\frac{1}{2}(\\mathbf{v}_a^{n+1} - \\mathbf{v}_a^{n})\\right) - \\left(\\mathbf{x}_a^{n+\\frac{1}{2}} - \\frac{\\Delta t}{2}\\mathbf{v}_a^{n+\\frac{1}{2}}\\right) \\times \\left(\\mathbf{v}_a^{n+\\frac{1}{2}} - \\frac{1}{2}(\\mathbf{v}_a^{n+1} - \\mathbf{v}_a^{n})\\right)\n$$\nExpanding the cross products and using the property $\\mathbf{v} \\times \\mathbf{v} = \\mathbf{0}$, we see that many terms cancel. The expansion of the first term is:\n$\\mathbf{x}_a^{n+\\frac{1}{2}} \\times \\mathbf{v}_a^{n+\\frac{1}{2}} + \\frac{1}{2}\\mathbf{x}_a^{n+\\frac{1}{2}} \\times (\\mathbf{v}_a^{n+1} - \\mathbf{v}_a^{n}) + \\frac{\\Delta t}{4}\\mathbf{v}_a^{n+\\frac{1}{2}} \\times (\\mathbf{v}_a^{n+1} - \\mathbf{v}_a^{n})$\nThe expansion of the second term is:\n$\\mathbf{x}_a^{n+\\frac{1}{2}} \\times \\mathbf{v}_a^{n+\\frac{1}{2}} - \\frac{1}{2}\\mathbf{x}_a^{n+\\frac{1}{2}} \\times (\\mathbf{v}_a^{n+1} - \\mathbf{v}_a^{n}) + \\frac{\\Delta t}{4}\\mathbf{v}_a^{n+\\frac{1}{2}} \\times (\\mathbf{v}_a^{n+1} - \\mathbf{v}_a^{n})$\nSubtracting the second expansion from the first yields:\n$$\n\\mathbf{x}_a^{n+1} \\times \\mathbf{v}_a^{n+1} - \\mathbf{x}_a^{n} \\times \\mathbf{v}_a^{n} = \\mathbf{x}_a^{n+\\frac{1}{2}} \\times (\\mathbf{v}_a^{n+1} - \\mathbf{v}_a^{n})\n$$\nNow, we substitute this result back into the expression for the change in total angular momentum:\n$$\n\\mathbf{L}^{n+1} - \\mathbf{L}^{n} = \\sum_{a=1}^{4} m \\left[ \\mathbf{x}_a^{n+\\frac{1}{2}} \\times (\\mathbf{v}_a^{n+1} - \\mathbf{v}_a^{n}) \\right]\n$$\nWe use the discrete momentum balance equation provided, with zero external forces:\n$$\nm(\\mathbf{v}_a^{n+1} - \\mathbf{v}_a^{n}) = \\Delta t\\,\\mathbf{f}_{a,\\mathrm{int}}^{n+\\frac{1}{2}}\n$$\nSubstituting this into the equation for the change in angular momentum:\n$$\n\\mathbf{L}^{n+1} - \\mathbf{L}^{n} = \\sum_{a=1}^{4} \\mathbf{x}_a^{n+\\frac{1}{2}} \\times (\\Delta t\\,\\mathbf{f}_{a,\\mathrm{int}}^{n+\\frac{1}{2}}) = \\Delta t \\sum_{a=1}^{4} \\mathbf{x}_a^{n+\\frac{1}{2}} \\times \\mathbf{f}_{a,\\mathrm{int}}^{n+\\frac{1}{2}}\n$$\nThe problem statement provides a key property of the energy-momentum consistent internal forces for a rigid body motion: the net moment they produce about the midpoint configuration is zero.\n$$\n\\sum_{a=1}^{4}\\mathbf{x}_a^{n+\\frac{1}{2}}\\times \\mathbf{f}_{a,\\mathrm{int}}^{n+\\frac{1}{2}}=\\mathbf{0}\n$$\nTherefore, the change in angular momentum is:\n$$\n\\mathbf{L}^{n+1} - \\mathbf{L}^{n} = \\Delta t \\cdot \\mathbf{0} = \\mathbf{0}\n$$\nThis proves that $\\mathbf{L}^{n+1} = \\mathbf{L}^{n}$. The discrete angular momentum is exactly conserved by the scheme for this rigid body motion. The final expression for this conserved angular momentum is the result from Task $1$. Let $\\boldsymbol{\\Omega} = \\begin{pmatrix} \\Omega_1 & \\Omega_2 & \\Omega_3 \\end{pmatrix}^T$ be the column vector of angular velocity components. The angular momentum vector is $\\mathbf{L}^n = 8m\\boldsymbol{\\Omega}$.", "answer": "$$\n\\boxed{8m\\boldsymbol{\\Omega}}\n$$", "id": "2555623"}, {"introduction": "Theoretical understanding is best solidified through practical implementation and verification. This final exercise bridges theory and practice by asking you to build a simple finite element solver for a 1D wave propagation problem and use an energy-conserving time integrator, the trapezoidal rule [@problem_id:2555590]. By performing a mesh refinement study, you will numerically confirm two crucial outcomes: the long-term stability provided by energy conservation and, simultaneously, the convergence of the numerical solution to the exact physical answer. This demonstrates that the benefits of conservation can be achieved without compromising the fundamental accuracy of the simulation.", "problem": "Consider the one-dimensional linear elastodynamics of a homogeneous bar using the Finite Element Method (FEM). Let the bar occupy the interval $x \\in (0,L)$, with density $\\rho$, Young’s modulus $E$, and constant cross-sectional area $A$. The unknown displacement field is $u(x,t)$. The governing equation is the second-order hyperbolic system\n$$\n\\rho A \\, \\frac{\\partial^2 u}{\\partial t^2}(x,t) - \\frac{\\partial}{\\partial x}\\Big(E A \\, \\frac{\\partial u}{\\partial x}(x,t)\\Big) = 0 \\quad \\text{for } x \\in (0,L), \\ t > 0,\n$$\nwith homogeneous Dirichlet boundary conditions $u(0,t)=0$ and $u(L,t)=0$, and initial conditions $u(x,0)=u_0(x)$ and $v(x,0)=\\frac{\\partial u}{\\partial t}(x,0)=v_0(x)$. Assume nondimensional parameters $L=1$, $\\rho=1$, $E=1$, and $A=1$, so that the wave speed is $c=\\sqrt{E/\\rho}=1$. Use the exact initial conditions $u_0(x)=\\sin(\\pi x)$ and $v_0(x)=0$, which generate the exact solution\n$$\nu_{\\text{exact}}(x,t)=\\sin(\\pi x)\\cos(\\pi t), \\qquad \\sigma_{\\text{exact}}(x,t)=E \\, \\frac{\\partial u_{\\text{exact}}}{\\partial x}(x,t)=\\pi \\cos(\\pi x)\\cos(\\pi t).\n$$\n\nYour task is to discretize the spatial problem by the standard Galerkin method with linear elements, leading to the semi-discrete second-order system\n$$\n\\mathbf{M}\\,\\ddot{\\mathbf{u}}(t) + \\mathbf{K}\\,\\mathbf{u}(t) = \\mathbf{0},\n$$\nwhere $\\mathbf{M}$ is the symmetric positive-definite consistent mass matrix and $\\mathbf{K}$ is the symmetric positive-definite stiffness matrix. Then, integrate in time using an energy-momentum conserving scheme based on the trapezoidal (average-acceleration) rule over a uniform time step $\\Delta t$. Let the semi-discrete total energy be\n$$\n\\mathcal{E}(t) = \\tfrac{1}{2}\\,\\dot{\\mathbf{u}}(t)^{\\top}\\mathbf{M}\\,\\dot{\\mathbf{u}}(t) + \\tfrac{1}{2}\\,\\mathbf{u}(t)^{\\top}\\mathbf{K}\\,\\mathbf{u}(t).\n$$\nUsing this method, perform a mesh refinement study to numerically demonstrate both of the following:\n- Convergence of the displacement and stress fields to the exact solution as the number of elements increases.\n- Absence of spurious energy injection, quantified by the near-invariance of the discrete total energy $\\mathcal{E}(t)$ over time.\n\nStart from the fundamental balance laws and the standard weak form for elastodynamics to construct the spatial discretization. Use the trapezoidal time integrator, which is known to conserve the discrete energy and linear momentum for undamped linear systems, but do not assume any specific update formula for the displacement and velocity without derivation from the method’s definition. Use homogeneous Dirichlet boundary conditions by eliminating the corresponding degrees of freedom.\n\nDefine the following discrete error measures at a final time $T$:\n- The displacement error measured by the consistent mass matrix inner product,\n$$\ne_u = \\sqrt{(\\mathbf{u}_h(T)-\\mathbf{u}_{\\text{exact}}(T))^{\\top}\\mathbf{M}_{\\text{full}}\\,(\\mathbf{u}_h(T)-\\mathbf{u}_{\\text{exact}}(T))},\n$$\nwhere $\\mathbf{M}_{\\text{full}}$ is the full consistent mass matrix before enforcing boundary conditions, $\\mathbf{u}_h(T)$ is the computed nodal field (including zeros at Dirichlet nodes), and $\\mathbf{u}_{\\text{exact}}(T)$ is the exact nodal field.\n- The stress error measured in the $L^2$-like norm over the domain,\n$$\ne_{\\sigma} = \\bigg(\\int_0^L \\big(\\sigma_h(x,T)-\\sigma_{\\text{exact}}(x,T)\\big)^2\\,dx\\bigg)^{1/2},\n$$\nwhere $\\sigma_h(x,T)=E\\,\\partial u_h/\\partial x$ is the piecewise-constant finite element stress. Use a sufficiently accurate Gaussian quadrature per element to evaluate this integral numerically.\n- The relative maximum energy drift over the time interval $[0,T]$,\n$$\n\\delta_{\\max} = \\max_{0 \\le n \\le N_t}\\frac{\\big|\\mathcal{E}(t_n)-\\mathcal{E}(0)\\big|}{\\mathcal{E}(0)},\n$$\nwhere $t_n=n\\,\\Delta t$ and $N_t=T/\\Delta t$.\n\nTest Suite. Use the following three test cases, all nondimensional:\n- Case 1 (coarse): number of elements $N=10$, time step $\\Delta t=0.001$, final time $T=1.0$.\n- Case 2 (medium): number of elements $N=20$, time step $\\Delta t=0.001$, final time $T=1.0$.\n- Case 3 (fine): number of elements $N=40$, time step $\\Delta t=0.001$, final time $T=1.0$.\n\nFor each case, compute $e_u$, $e_{\\sigma}$, and $\\delta_{\\max}$. Additionally, report the booleans\n- $b_u$, which is $\\text{True}$ if the displacement error strictly decreases with mesh refinement from $N=10$ to $N=20$ to $N=40$;\n- $b_{\\sigma}$, which is $\\text{True}$ if the stress error strictly decreases with mesh refinement across the same sequence;\n- $b_{\\mathcal{E}}$, which is $\\text{True}$ if all three cases satisfy $\\delta_{\\max} \\le 10^{-10}$.\n\nAll quantities are dimensionless. Your program must implement assembly of $\\mathbf{M}$ and $\\mathbf{K}$ for linear elements on a uniform mesh, enforce homogeneous Dirichlet boundary conditions, carry out time stepping using the trapezoidal rule, compute the defined errors, and aggregate the results across the test suite.\n\nFinal Output Format. Your program should produce a single line of output containing a comma-separated list with the following $12$ entries enclosed in square brackets:\n$$\n\\big[e_u(N{=}10), \\ e_u(N{=}20), \\ e_u(N{=}40), \\ e_{\\sigma}(N{=}10), \\ e_{\\sigma}(N{=}20), \\ e_{\\sigma}(N{=}40), \\ \\delta_{\\max}(N{=}10), \\ \\delta_{\\max}(N{=}20), \\ \\delta_{\\max}(N{=}40), \\ b_u, \\ b_{\\sigma}, \\ b_{\\mathcal{E}}\\big].\n$$", "solution": "The problem presented is a standard, well-posed initial-boundary value problem in computational elastodynamics. All parameters, conditions, and objectives are clearly defined and scientifically sound. The problem serves as a verification exercise for a finite element implementation of the one-dimensional wave equation using an energy-conserving time integration scheme. The validation is passed, and we may proceed to the solution.\n\nThe solution is constructed in the following sequence:\n$1$. Derivation of the weak form of the governing partial differential equation.\n$2$. Spatial discretization using the Galerkin finite element method with linear basis functions, leading to the semi-discrete system of ordinary differential equations.\n$3$. Temporal integration of the semi-discrete system using the trapezoidal rule (average acceleration method), which is an energy-conserving scheme for linear systems.\n$4$. Specification of the algorithms for calculating the required error metrics.\n\n**1. Weak Formulation**\n\nThe governing equation for the one-dimensional elastodynamics of a homogeneous bar is\n$$\n\\rho A \\, \\frac{\\partial^2 u}{\\partial t^2} - \\frac{\\partial}{\\partial x}\\Big(E A \\, \\frac{\\partial u}{\\partial x}\\Big) = 0 \\quad \\text{for } x \\in (0,L), \\ t > 0.\n$$\nHere, $u(x,t)$ is the axial displacement, $\\rho$ is the material density, $A$ is the cross-sectional area, and $E$ is the Young's modulus.\nTo derive the weak form, we multiply the equation by a sufficiently smooth test function $w(x)$ that satisfies the homogeneous Dirichlet boundary conditions, i.e., $w(0)=0$ and $w(L)=0$. We then integrate over the spatial domain $[0,L]$:\n$$\n\\int_0^L w(x) \\left( \\rho A \\, \\frac{\\partial^2 u}{\\partial t^2} - \\frac{\\partial}{\\partial x}\\Big(E A \\, \\frac{\\partial u}{\\partial x}\\Big) \\right) dx = 0.\n$$\nApplying integration by parts to the second term yields:\n$$\n\\int_0^L \\rho A w \\ddot{u} \\,dx + \\int_0^L E A \\frac{\\partial w}{\\partial x} \\frac{\\partial u}{\\partial x} \\,dx - \\left[ w \\Big(E A \\frac{\\partial u}{\\partial x}\\Big) \\right]_0^L = 0.\n$$\nThe boundary term $\\left[ w (E A u') \\right]_0^L$ vanishes because the test function $w$ is zero at $x=0$ and $x=L$. The resulting weak form is: Find $u(x,t)$ such that for all admissible test functions $w(x)$,\n$$\n\\int_0^L \\rho A w \\ddot{u} \\,dx + \\int_0^L E A w' u' \\,dx = 0.\n$$\n\n**2. Spatial Discretization (Finite Element Method)**\n\nWe discretize the domain $[0,L]$ into $N$ linear finite elements of equal length $h = L/N$. The displacement field within this discrete space is approximated as a linear combination of basis functions $N_j(x)$:\n$$\nu_h(x,t) = \\sum_{j=0}^{N} u_j(t) N_j(x),\n$$\nwhere $u_j(t)$ is the displacement at node $j$, and $N_j(x)$ is the linear \"hat\" function which is $1$ at node $j$ and $0$ at all other nodes.\nBy the Galerkin method, the test functions $w(x)$ are chosen from the same space as the trial functions, i.e., $w(x) = N_i(x)$ for $i=0, 1, \\dots, N$. Substituting the approximation $u_h(x,t)$ into the weak form and choosing $w(x) = N_i(x)$ for each $i=0, \\dots, N$ yields a system of ordinary differential equations:\n$$\n\\sum_{j=0}^{N} \\left( \\int_0^L \\rho A N_i N_j dx \\right) \\ddot{u}_j(t) + \\sum_{j=0}^{N} \\left( \\int_0^L E A N_i' N_j' dx \\right) u_j(t) = 0.\n$$\nThis is the semi-discrete system $\\mathbf{M}_{\\text{full}}\\,\\ddot{\\mathbf{u}}(t) + \\mathbf{K}_{\\text{full}}\\,\\mathbf{u}(t) = \\mathbf{0}$, where $\\mathbf{u}(t)$ is the vector of nodal displacements $[u_0(t), \\dots, u_N(t)]^T$, and the entries of the full mass and stiffness matrices are:\n$$\n(\\mathbf{M}_{\\text{full}})_{ij} = \\int_0^L \\rho A N_i(x) N_j(x) \\,dx \\qquad (\\text{Consistent Mass Matrix})\n$$\n$$\n(\\mathbf{K}_{\\text{full}})_{ij} = \\int_0^L E A N_i'(x) N_j'(x) \\,dx \\qquad (\\text{Stiffness Matrix})\n$$\nFor a single linear element of length $h$ with nondimensional parameters $\\rho=A=E=1$, the local element mass and stiffness matrices are:\n$$\n\\mathbf{m}^e = \\frac{h}{6} \\begin{pmatrix} 2 & 1 \\\\ 1 & 2 \\end{pmatrix}, \\quad \\mathbf{k}^e = \\frac{1}{h} \\begin{pmatrix} 1 & -1 \\\\ -1 & 1 \\end{pmatrix}.\n$$\nThese element matrices are assembled into the global matrices $\\mathbf{M}_{\\text{full}}$ and $\\mathbf{K}_{\\text{full}}$. The homogeneous Dirichlet boundary conditions $u_0(t)=0$ and $u_N(t)=0$ are enforced by removing the first and last rows and columns from these matrices. The resulting reduced system is $\\mathbf{M}\\,\\ddot{\\mathbf{d}}(t) + \\mathbf{K}\\,\\mathbf{d}(t) = \\mathbf{0}$, where $\\mathbf{d}(t) = [u_1(t), \\dots, u_{N-1}(t)]^T$ is the vector of unknown interior nodal displacements, and $\\mathbf{M}$ and $\\mathbf{K}$ are the $(N-1) \\times (N-1)$ reduced matrices, which are symmetric and positive-definite.\n\n**3. Temporal Discretization (Trapezoidal Rule)**\n\nThe semi-discrete system is integrated in time using the trapezoidal rule (also known as the average acceleration method or Newmark's method with parameters $\\gamma=1/2$, $\\beta=1/4$). For a time step $\\Delta t$, the updates for displacement $\\mathbf{d}$ and velocity $\\mathbf{v} = \\dot{\\mathbf{d}}$ from time $t_n$ to $t_{n+1}$ are given by:\n$$\n\\mathbf{d}_{n+1} = \\mathbf{d}_n + \\Delta t \\, \\mathbf{v}_n + \\frac{\\Delta t^2}{2} \\left( (1-2\\beta)\\ddot{\\mathbf{d}}_n + 2\\beta \\ddot{\\mathbf{d}}_{n+1} \\right)\n$$\n$$\n\\mathbf{v}_{n+1} = \\mathbf{v}_n + \\Delta t \\left( (1-\\gamma)\\ddot{\\mathbf{d}}_n + \\gamma \\ddot{\\mathbf{d}}_{n+1} \\right)\n$$\nWith $\\gamma=1/2$ and $\\beta=1/4$, and using the equation of motion $\\mathbf{M}\\ddot{\\mathbf{d}}_{n+1} = -\\mathbf{K}\\mathbf{d}_{n+1}$, we can derive the update scheme. We first rearrange the displacement update to solve for $\\ddot{\\mathbf{d}}_{n+1}$:\n$$ \\ddot{\\mathbf{d}}_{n+1} = \\frac{4}{\\Delta t^2}(\\mathbf{d}_{n+1} - \\mathbf{d}_n - \\Delta t \\mathbf{v}_n) - \\ddot{\\mathbf{d}}_n. $$\nSubstituting this into the equation of motion at $t_{n+1}$:\n$$ \\mathbf{M} \\left( \\frac{4}{\\Delta t^2}(\\mathbf{d}_{n+1} - \\mathbf{d}_n - \\Delta t \\mathbf{v}_n) - \\ddot{\\mathbf{d}}_n \\right) + \\mathbf{K}\\mathbf{d}_{n+1} = \\mathbf{0}. $$\nRearranging to solve for the unknown $\\mathbf{d}_{n+1}$:\n$$ \\left(\\mathbf{M} + \\frac{\\Delta t^2}{4}\\mathbf{K}\\right) \\mathbf{d}_{n+1} = \\mathbf{M} \\left( \\mathbf{d}_n + \\Delta t \\mathbf{v}_n + \\frac{\\Delta t^2}{4}\\ddot{\\mathbf{d}}_n \\right). $$\nUsing $\\mathbf{M}\\ddot{\\mathbf{d}}_n = -\\mathbf{K}\\mathbf{d}_n$, the right-hand side simplifies to:\n$$ \\left(\\mathbf{M} + \\frac{\\Delta t^2}{4}\\mathbf{K}\\right) \\mathbf{d}_{n+1} = \\mathbf{M} (\\mathbf{d}_n + \\Delta t \\mathbf{v}_n) - \\frac{\\Delta t^2}{4} \\mathbf{K} \\mathbf{d}_n. $$\nAt each time step, we solve this linear system for $\\mathbf{d}_{n+1}$. Once $\\mathbf{d}_{n+1}$ is found, the acceleration $\\ddot{\\mathbf{d}}_{n+1}$ and velocity $\\mathbf{v}_{n+1}$ are updated. The initial conditions are $\\mathbf{d}_0$ and $\\mathbf{v}_0$ from the problem statement, and $\\ddot{\\mathbf{d}}_0$ is found by solving $\\mathbf{M}\\ddot{\\mathbf{d}}_0 = -\\mathbf{K}\\mathbf{d}_0$.\n\nThis method is unconditionally stable and exactly conserves the discrete energy $\\mathcal{E}(t) = \\tfrac{1}{2}\\,\\mathbf{v}(t)^{\\top}\\mathbf{M}\\,\\mathbf{v}(t) + \\tfrac{1}{2}\\,\\mathbf{d}(t)^{\\top}\\mathbf{K}\\,\\mathbf{d}(t)$ for linear systems, meaning $\\mathcal{E}(t_{n+1}) = \\mathcal{E}(t_n)$ in exact arithmetic.\n\n**4. Error Calculation**\n\n- **Displacement Error ($e_u$):** At the final time $T$, we form the full numerical solution vector $\\mathbf{u}_h(T)$ of size ($N+1$) by prepending and appending zeros for the Dirichlet nodes to the computed interior solution $\\mathbf{d}(T)$. The exact solution vector $\\mathbf{u}_{\\text{exact}}(T)$ is formed by evaluating $u_{\\text{exact}}(x_i, T)$ at all nodes $i=0, \\dots, N$. The error is then computed using the energy norm induced by the full mass matrix:\n$e_u = \\sqrt{(\\mathbf{u}_h(T)-\\mathbf{u}_{\\text{exact}}(T))^{\\top}\\mathbf{M}_{\\text{full}}\\,(\\mathbf{u}_h(T)-\\mathbf{u}_{\\text{exact}}(T))}$.\n\n- **Stress Error ($e_{\\sigma}$):** The numerical stress $\\sigma_h(x,T)$ is piecewise constant over each element $e$. On an element between nodes $j-1$ and $j$, it is given by $\\sigma_h^e(T) = E (u_j(T) - u_{j-1}(T))/h$. The squared $L^2$-like error is the sum of integrals over each element:\n$e_{\\sigma}^2 = \\sum_{e=1}^N \\int_{x_{e-1}}^{x_e} (\\sigma_h^e(T)-\\sigma_{\\text{exact}}(x,T))^2\\,dx$. Each integral is computed using high-accuracy numerical quadrature (e.g., Gauss-Kronrod, as implemented in `scipy.integrate.quad`).\n\n- **Energy Drift ($\\delta_{\\max}$):** At each time step $t_n$, the discrete total energy $\\mathcal{E}(t_n)$ is computed. The initial energy $\\mathcal{E}(0)$ is calculated from the initial conditions. The maximum relative drift is then found over the entire simulation history:\n$\\delta_{\\max} = \\max_{0 \\le n \\le N_t} \\frac{|\\mathcal{E}(t_n)-\\mathcal{E}(0)|}{|\\mathcal{E}(0)|}$. A small value of $\\delta_{\\max}$ indicates negligible spurious energy injection or dissipation by the time integrator.\n\nThe convergence of $e_u$ and $e_\\sigma$ with increasing $N$ demonstrates the accuracy of the spatial discretization, while the near-zero value of $\\delta_{\\max}$ confirms the energy-conserving property of the temporal scheme.", "answer": "```python\nimport numpy as np\nfrom scipy.linalg import solve\nfrom scipy.sparse.linalg import splu\nfrom scipy.sparse import csc_matrix\nfrom scipy.integrate import quad\n\ndef solve_problem():\n    \"\"\"\n    Solves the 1D elastodynamics problem using FEM and an energy-conserving\n    time integrator, performing a mesh refinement study as specified.\n    \"\"\"\n    # Nondimensional parameters\n    L = 1.0\n    E = 1.0\n    rho = 1.0\n    A = 1.0\n\n    # Test suite from the problem statement\n    test_cases = [\n        {'N': 10, 'dt': 0.001, 'T': 1.0},\n        {'N': 20, 'dt': 0.001, 'T': 1.0},\n        {'N': 40, 'dt': 0.001, 'T': 1.0}\n    ]\n\n    results_eu = []\n    results_esigma = []\n    results_dmax = []\n\n    for case in test_cases:\n        N = case['N']\n        dt = case['dt']\n        T = case['T']\n        \n        h = L / N\n        num_nodes = N + 1\n        num_dofs_full = num_nodes\n        num_dofs_reduced = N - 1\n\n        # 1. Spatial Discretization: Assemble M and K matrices\n        M_full = np.zeros((num_dofs_full, num_dofs_full))\n        K_full = np.zeros((num_dofs_full, num_dofs_full))\n\n        m_e = (rho * A * h / 6.0) * np.array([[2, 1], [1, 2]])\n        k_e = (E * A / h) * np.array([[1, -1], [-1, 1]])\n\n        for i in range(N):\n            nodes = [i, i + 1]\n            M_full[np.ix_(nodes, nodes)] += m_e\n            K_full[np.ix_(nodes, nodes)] += k_e\n\n        # 2. Apply homogeneous Dirichlet BCs\n        M = M_full[1:-1, 1:-1]\n        K = K_full[1:-1, 1:-1]\n\n        # 3. Initial Conditions\n        x_coords_full = np.linspace(0, L, num_nodes)\n        x_coords_reduced = x_coords_full[1:-1]\n\n        u0_reduced = np.sin(np.pi * x_coords_reduced)\n        v0_reduced = np.zeros(num_dofs_reduced)\n        \n        # Initial acceleration: M*a0 = -K*u0\n        a0_reduced = solve(M, -K @ u0_reduced)\n\n        # 4. Time Integration (Trapezoidal Rule / Newmark beta=1/4, gamma=1/2)\n        u_n, v_n, a_n = u0_reduced, v0_reduced, a0_reduced\n\n        # Effective stiffness matrix for time stepping\n        A_eff = M + (dt**2 / 4.0) * K\n        # Use sparse LU factorization for efficiency\n        A_eff_splu = splu(csc_matrix(A_eff))\n\n        num_steps = int(round(T / dt))\n        energies = []\n        \n        # Calculate initial energy\n        E_kin0 = 0.5 * v_n.T @ M @ v_n\n        E_pot0 = 0.5 * u_n.T @ K @ u_n\n        E0 = E_kin0 + E_pot0\n        energies.append(E0)\n\n        for _ in range(num_steps):\n            # Form right-hand side vector\n            rhs = M @ (u_n + dt * v_n) - (dt**2 / 4.0) * K @ u_n\n            \n            # Solve for next displacement\n            u_next = A_eff_splu.solve(rhs)\n\n            # Update acceleration and velocity\n            a_next = (4.0 / dt**2) * (u_next - u_n - dt * v_n) - a_n\n            v_next = v_n + (dt / 2.0) * (a_n + a_next)\n            \n            u_n, v_n, a_n = u_next, v_next, a_next\n\n            # Store energy for drift calculation\n            E_kin = 0.5 * v_n.T @ M @ v_n\n            E_pot = 0.5 * u_n.T @ K @ u_n\n            energies.append(E_kin + E_pot)\n\n        # 5. Error Calculation at time T\n        \n        # Displacement error e_u\n        u_h_final_full = np.concatenate(([0], u_n, [0]))\n        u_exact_final_full = np.sin(np.pi * x_coords_full) * np.cos(np.pi * T)\n        error_vec_u = u_h_final_full - u_exact_final_full\n        e_u = np.sqrt(error_vec_u.T @ M_full @ error_vec_u)\n        results_eu.append(e_u)\n\n        # Stress error e_sigma\n        total_sq_stress_error = 0.0\n        for i in range(N):\n            u_left, u_right = u_h_final_full[i], u_h_final_full[i+1]\n            sigma_h = N * (u_right - u_left) # E=1, h=1/N\n            \n            def sigma_exact_func(x):\n                return np.pi * np.cos(np.pi * x) * np.cos(np.pi * T)\n\n            def integrand(x):\n                return (sigma_h - sigma_exact_func(x))**2\n\n            integral_val, _ = quad(integrand, x_coords_full[i], x_coords_full[i+1])\n            total_sq_stress_error += integral_val\n\n        e_sigma = np.sqrt(total_sq_stress_error)\n        results_esigma.append(e_sigma)\n\n        # Energy drift delta_max\n        energies = np.array(energies)\n        if E0 == 0:\n            delta_max = 0.0 \n        else:\n            delta_max = np.max(np.abs(energies - E0)) / np.abs(E0)\n        results_dmax.append(delta_max)\n\n    # 6. Boolean Checks\n    b_u = results_eu[2] < results_eu[1] and results_eu[1] < results_eu[0]\n    b_sigma = results_esigma[2] < results_esigma[1] and results_esigma[1] < results_esigma[0]\n    b_E = all(d <= 1e-10 for d in results_dmax)\n\n    # Final output formatting\n    final_list = results_eu + results_esigma + results_dmax + [b_u, b_sigma, b_E]\n    \n    # Format the floats to a consistent representation to avoid printing issues.\n    formatted_list = [f\"{x:.6e}\" if isinstance(x, float) else str(x) for x in final_list]\n    \n    print(f\"[{','.join(formatted_list)}]\")\n\nsolve_problem()\n```", "id": "2555590"}]}