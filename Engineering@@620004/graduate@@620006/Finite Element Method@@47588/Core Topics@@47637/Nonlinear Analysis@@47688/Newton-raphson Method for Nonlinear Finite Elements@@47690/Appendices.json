{"hands_on_practices": [{"introduction": "The efficiency and quadratic convergence of the Newton-Raphson method hinge on the precise implementation of the consistent tangent stiffness matrix, $K_T(u)$. Mistakes in deriving or coding this matrix are a common source of bugs that can degrade performance to linear convergence or cause divergence. This practice guides you through the essential skill of verifying your tangent matrix implementation by comparing its action on a random vector against a carefully constructed finite-difference approximation of the residual's directional derivative [@problem_id:2583316]. Mastering this \"tangent check\" is a fundamental step in building robust and reliable nonlinear finite element software.", "problem": "Consider a single two-node one-dimensional bar finite element with linear shape functions and a nonlinear constitutive law. Assume all quantities are dimensionless. Let the nodal displacement vector be $u \\in \\mathbb{R}^2$, the element length be $L > 0$, and the cross-sectional area be $A > 0$. The Green-Lagrange strain for this element reduces to a constant engineering strain $\\varepsilon = B u$ with the constant strain-displacement matrix $B = \\left[-\\dfrac{1}{L}, \\dfrac{1}{L}\\right]$. The Cauchy stress is modeled by a smooth nonlinear law $\\sigma(\\varepsilon) = E\\varepsilon + \\alpha\\varepsilon^3$, where $E > 0$ is a linear stiffness parameter and $\\alpha \\ge 0$ controls the nonlinearity. The internal force vector is given by the principle of virtual work as $f_{\\mathrm{int}}(u) = \\int_{0}^{L} B^\\top \\sigma(\\varepsilon) A \\mathrm{d}x$, and the residual is $R(u) = f_{\\mathrm{int}}(u) - f_{\\mathrm{ext}}$, where $f_{\\mathrm{ext}}\\in\\mathbb{R}^2$ is the external nodal load vector. The Newton-Raphson method for solving $R(u)=0$ uses the consistent tangent (Jacobian) $K_T(u) = \\dfrac{\\partial R}{\\partial u}(u)$.\n\nYour task is to write a program that implements a unit test verifying the consistency of the tangent $K_T(u)$ against a central finite-difference directional derivative of $R(u)$ under a random perturbation direction. The test must use a reproducible random direction and a theoretically justified step size. Specifically:\n\n- Start from the definitions above and derive $R(u)$ and $K_T(u)$ in terms of $E$, $\\alpha$, $A$, $L$, and $u$, using only the facts that $B$ is constant for a two-node linear element, $\\varepsilon = B u$, $f_{\\mathrm{int}}(u) = \\int_{0}^{L} B^\\top \\sigma(\\varepsilon) A \\mathrm{d}x$, and $\\sigma(\\varepsilon) = E\\varepsilon + \\alpha\\varepsilon^3$.\n- Implement a central finite-difference check of the form\n$$\n\\frac{R(u + h p) - R(u - h p)}{2h} \\approx K_T(u) p,\n$$\nwhere $p \\in \\mathbb{R}^2$ is a random unit vector (direction) generated with a fixed seed, and $h > 0$ is a step size chosen according to floating-point error analysis. Use the relative error\n$$\ne = \\frac{\\left\\| \\frac{R(u + h p) - R(u - h p)}{2h} - K_T(u) p \\right\\|_2}{\\max\\left(1,\\;\\left\\| K_T(u) p \\right\\|_2\\right)}\n$$\nand declare the test passed if $e \\le \\text{rtol}$ for a specified relative tolerance $\\text{rtol}$.\n- Choose $h$ based on the standard central-difference truncation-versus-roundoff balance, and justify your choice of $h$ and $\\text{rtol}$ in terms of the floating-point machine epsilon $\\varepsilon_{\\mathrm{mach}}$ and the expected curvature scale of the residual.\n\nAssume dimensionless quantities and radians are implied if any angles appear (no angles are used here). Use the following test suite (each case provides $(E,\\alpha,A,L,u,f_{\\mathrm{ext}})$), where all numbers are dimensionless:\n\n- Case A (linear happy path): $E = 100$, $\\alpha = 0$, $A = 1$, $L = 1$, $u = [0.2, 0.8]^\\top$, $f_{\\mathrm{ext}} = [0, 0]^\\top$.\n- Case B (moderate nonlinearity): $E = 200$, $\\alpha = 50$, $A = 2$, $L = 3$, $u = [0.01, 0.03]^\\top$, $f_{\\mathrm{ext}} = [1, -1]^\\top$.\n- Case C (strong nonlinearity and larger strain magnitude): $E = 10$, $\\alpha = 2000$, $A = 0.8$, $L = 1.5$, $u = [0.3, -0.2]^\\top$, $f_{\\mathrm{ext}} = [-0.5, 0.2]^\\top$.\n- Case D (zero displacement): $E = 150$, $\\alpha = 500$, $A = 1.2$, $L = 2.5$, $u = [0, 0]^\\top$, $f_{\\mathrm{ext}} = [0, 0]^\\top$.\n\nUse a fixed random seed so that the random direction $p$ is the same on every run. Use a single relative tolerance $\\text{rtol}$ for all cases, justified by analysis. Your program must output one boolean result per case indicating whether the test passes.\n\nFinal Output Format:\nYour program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets (e.g., \"[True,False,True,True]\").", "solution": "We begin from the principle of virtual work in a single two-node one-dimensional bar element with linear shape functions. The constant strain-displacement matrix is $B = \\left[-\\dfrac{1}{L}, \\dfrac{1}{L}\\right]$, so the strain is $\\varepsilon = B u$. The constitutive law is $\\sigma(\\varepsilon) = E\\varepsilon + \\alpha\\varepsilon^3$. The internal force follows from the virtual work statement\n$$\nf_{\\mathrm{int}}(u) \\equiv \\int_0^L B^\\top \\sigma(\\varepsilon) A \\mathrm{d}x.\n$$\nFor a linear two-node element, $B$ and $\\varepsilon$ are constant over the element, so the integral reduces to\n$$\nf_{\\mathrm{int}}(u) = B^\\top \\sigma(\\varepsilon) A L.\n$$\nTherefore, the residual is\n$$\nR(u) = f_{\\mathrm{int}}(u) - f_{\\mathrm{ext}} = B^\\top \\sigma(Bu) A L - f_{\\mathrm{ext}}.\n$$\nTo form the consistent tangent, we differentiate $R(u)$ with respect to $u$. Noting $R(u)$ depends on $u$ only through $\\sigma(Bu)$, we apply the chain rule:\n$$\nK_T(u) \\equiv \\frac{\\partial R}{\\partial u}(u) = B^\\top \\frac{\\mathrm{d}\\sigma}{\\mathrm{d}\\varepsilon}\\bigg|_{\\varepsilon=Bu} B A L.\n$$\nSince $\\sigma(\\varepsilon) = E\\varepsilon + \\alpha\\varepsilon^3$, its derivative is\n$$\n\\frac{\\mathrm{d}\\sigma}{\\mathrm{d}\\varepsilon} = E + 3\\alpha\\varepsilon^2.\n$$\nThus the $2\\times 2$ tangent matrix is\n$$\nK_T(u) = \\left(E + 3\\alpha(Bu)^2\\right) A L \\left(B^\\top B\\right).\n$$\nWith $B = \\left[-\\dfrac{1}{L}, \\dfrac{1}{L}\\right]$, we have\n$$\nB^\\top B = \n\\begin{bmatrix}\n\\frac{1}{L^2} & -\\frac{1}{L^2}\\\\\n-\\frac{1}{L^2} & \\frac{1}{L^2}\n\\end{bmatrix},\n$$\nso explicitly\n$$\nK_T(u) = \\left(E + 3\\alpha\\varepsilon^2\\right) \\frac{A}{L}\n\\begin{bmatrix}\n1 & -1\\\\\n-1 & 1\n\\end{bmatrix},\n\\quad \\text{with} \\quad \\varepsilon = \\frac{u_2 - u_1}{L}.\n$$\n\nTo verify the consistency of $K_T(u)$, we compare it to a central finite-difference directional derivative of $R(u)$. For a unit direction $p \\in \\mathbb{R}^2$ and step $h > 0$, the central difference approximation is\n$$\nD_h R(u; p) \\equiv \\frac{R(u + h p) - R(u - h p)}{2h}.\n$$\nBy Taylor expansion of $R$ about $u$ in the direction $p$,\n$$\nR(u \\pm h p) = R(u) \\pm h K_T(u) p + \\frac{h^2}{2} R''(u)[p,p] \\pm \\frac{h^3}{6}R^{(3)}(u)[p,p,p] + \\mathcal{O}(h^4),\n$$\nso the central difference cancels the even-order terms and yields\n$$\nD_h R(u; p) = K_T(u) p + \\frac{h^2}{6}R^{(3)}(u)[p,p,p] + \\mathcal{O}(h^4).\n$$\nThis has a truncation error of $\\mathcal{O}(h^2)$. In floating-point arithmetic, subtractive cancellation and rounding introduce an additional error term of order $\\mathcal{O}(\\frac{\\varepsilon_{\\mathrm{mach}}}{h})$, where $\\varepsilon_{\\mathrm{mach}}$ is the machine epsilon. Hence the total error behaves as\n$$\n\\|D_h R(u; p) - K_T(u) p\\|_2 \\approx C_1 h^2 + C_2 \\frac{\\varepsilon_{\\mathrm{mach}}}{h},\n$$\nfor problem-dependent constants $C_1$ and $C_2$ set by higher derivatives and magnitudes. Balancing these terms suggests choosing $h$ on the order of $h \\sim \\varepsilon_{\\mathrm{mach}}^{1/3}$ up to a scale factor reflecting $\\|u\\|_2$. We therefore pick\n$$\nh = \\varepsilon_{\\mathrm{mach}}^{1/3} \\max(1, \\|u\\|_2),\n$$\nwhich controls both truncation and roundoff across cases of different displacement magnitudes.\n\nWe measure a relative error\n$$\ne = \\frac{\\left\\| D_h R(u;p) - K_T(u) p \\right\\|_2}{\\max\\left(1, \\left\\| K_T(u) p \\right\\|_2\\right)},\n$$\nand declare pass if $e \\le \\text{rtol}$. For double precision, $\\varepsilon_{\\mathrm{mach}} \\approx 2.22\\times 10^{-16}$, so $\\varepsilon_{\\mathrm{mach}}^{1/3} \\approx 6\\times 10^{-6}$. In purely linear cases, the central difference is exact in exact arithmetic, and the observed error is limited by roundoff, typically near $\\mathcal{O}(10^{-11})$ or smaller. In nonlinear cases, the truncation term scales with $h^2$ times a curvature magnitude set by higher derivatives. Here $\\sigma''(\\varepsilon) = 6\\alpha\\varepsilon$, so for moderate strains and $\\alpha$ up to values like $2000$, a conservative bound on the truncation contribution for $h \\approx 6\\times 10^{-6}$ lies around $10^{-7}$ to $10^{-8}$ in relative terms, depending on the magnitude of $K_T(u) p$. To be robust across the provided test suite, including the strong nonlinearity case with larger $|\\varepsilon|$, we set a single tolerance\n$$\n\\text{rtol} = 10^{-6},\n$$\nwhich comfortably accommodates the worst-case truncation estimate while remaining stringent enough to detect inconsistencies.\n\nAlgorithmic steps implemented in the program:\n- For each test case, parse $(E,\\alpha,A,L,u,f_{\\mathrm{ext}})$.\n- Define $B = \\left[-\\dfrac{1}{L}, \\dfrac{1}{L}\\right]$, compute $\\varepsilon = B u$, compute $\\sigma(\\varepsilon) = E\\varepsilon + \\alpha\\varepsilon^3$, then compute $R(u) = B^\\top \\sigma(\\varepsilon) A L - f_{\\mathrm{ext}}$.\n- Compute $K_T(u) = B^\\top (E + 3\\alpha\\varepsilon^2) B A L$.\n- Generate a reproducible random direction $p$ using a fixed seed and normalize it to unit length.\n- Choose $h = \\varepsilon_{\\mathrm{mach}}^{1/3} \\max(1,\\|u\\|_2)$.\n- Compute $D_h R(u;p)$ and the relative error $e$, and check $e \\le \\text{rtol}$.\n- Output one boolean per case in a single bracketed list on one line.\n\nThe final output is a single line like \"[True,True,True,True]\". This unit test design validates the Newton-Raphson consistent tangent $K_T(u)$ via an accuracy-controlled finite-difference check with a justified tolerance linked to floating-point limits and truncation error analysis.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef residual(u, E, alpha, A, L, f_ext):\n    \"\"\"\n    Compute residual R(u) = f_int(u) - f_ext for a 2-node 1D bar element\n    with nonlinear constitutive law sigma = E*eps + alpha*eps^3.\n    \"\"\"\n    # B = [-1/L, 1/L]\n    B = np.array([-1.0 / L, 1.0 / L])\n    eps = float(B @ u)\n    sigma = E * eps + alpha * (eps ** 3)\n    f_int = (A * L) * (B[:, None] * sigma)  # B^T * sigma * A * L; shape (2,1)\n    # Convert to 1D array and subtract external load\n    return f_int.ravel() - f_ext\n\ndef tangent(u, E, alpha, A, L):\n    \"\"\"\n    Compute consistent tangent K_T(u) = B^T * (d sigma/d eps) * B * A * L\n    where d sigma/d eps = E + 3*alpha*eps^2.\n    \"\"\"\n    B = np.array([-1.0 / L, 1.0 / L])\n    eps = float(B @ u)\n    dsig = E + 3.0 * alpha * (eps ** 2)\n    K = (A * L) * dsig * np.outer(B, B)\n    return K\n\ndef central_diff_check(u, params, rng, rtol):\n    \"\"\"\n    Perform central difference directional derivative check:\n    (R(u+h p) - R(u-h p))/(2h) ~ K(u) p\n    Returns True if relative error <= rtol.\n    \"\"\"\n    E, alpha, A, L, f_ext = params\n    # Random direction p, normalized\n    p = rng.standard_normal(size=2)\n    nrm = np.linalg.norm(p)\n    if nrm == 0.0:\n        p = np.array([1.0, 0.0])\n    else:\n        p = p / nrm\n\n    # Step size selection: h = eps^(1/3) * max(1, ||u||)\n    eps_mach = np.finfo(float).eps\n    h_base = eps_mach ** (1.0 / 3.0)\n    scale = max(1.0, float(np.linalg.norm(u)))\n    h = h_base * scale\n\n    Ru_ph = residual(u + h * p, E, alpha, A, L, f_ext)\n    Ru_mh = residual(u - h * p, E, alpha, A, L, f_ext)\n    cd = (Ru_ph - Ru_mh) / (2.0 * h)\n\n    K = tangent(u, E, alpha, A, L)\n    Kp = K @ p\n\n    num = np.linalg.norm(cd - Kp)\n    den = max(1.0, np.linalg.norm(Kp))\n    rel_err = num / den\n    return rel_err <= rtol\n\ndef solve():\n    # Define test cases as specified in the problem statement.\n    # Each case: (E, alpha, A, L, u, f_ext)\n    test_cases = [\n        (100.0, 0.0, 1.0, 1.0, np.array([0.2, 0.8]), np.array([0.0, 0.0])),            # Case A\n        (200.0, 50.0, 2.0, 3.0, np.array([0.01, 0.03]), np.array([1.0, -1.0])),         # Case B\n        (10.0, 2000.0, 0.8, 1.5, np.array([0.3, -0.2]), np.array([-0.5, 0.2])),         # Case C\n        (150.0, 500.0, 1.2, 2.5, np.array([0.0, 0.0]), np.array([0.0, 0.0])),           # Case D\n    ]\n\n    # Relative tolerance justified by truncation and roundoff analysis.\n    rtol = 1e-6\n\n    # Fixed random seed for reproducibility.\n    rng = np.random.default_rng(123456)\n\n    results = []\n    for (E, alpha, A, L, u, f_ext) in test_cases:\n        params = (E, alpha, A, L, f_ext)\n        ok = central_diff_check(u, params, rng, rtol)\n        results.append(ok)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "2583316"}, {"introduction": "A converging nonlinear analysis is satisfying, but a stalled or slowly converging one can be perplexing. Simply observing a slow decrease in the residual norm can be misleading, potentially causing premature termination of a simulation that is about to succeed. This diagnostic exercise challenges you to look beyond simple convergence metrics and analyze the underlying geometry of the Newton step [@problem_id:2583291]. By examining the angle between the residual vector $R(u_k)$ and the calculated displacement update $\\Delta u_k$, you will learn to assess the quality of the search direction and make a more informed judgment about whether the solver is truly stagnating or simply navigating a complex region of the solution space.", "problem": "You are solving a nonlinear finite element equilibrium problem defined by finding a displacement vector $u \\in \\mathbb{R}^n$ such that the residual $R(u) = f_{\\mathrm{int}}(u) - f_{\\mathrm{ext}}$ satisfies $R(u) = 0$, where $f_{\\mathrm{int}}(u)$ is the internal force vector and $f_{\\mathrm{ext}}$ is the external load vector. The Newton-Raphson (NR) method updates $u_k$ by solving the linearized system $K_T(u_k)\\,\\Delta u_k = -R(u_k)$ followed by $u_{k+1} = u_k + \\Delta u_k$, where $K_T(u_k)$ is the tangent stiffness matrix. Assume that, at the reported iterates, $K_T(u_k)$ is symmetric positive definite, and that no line search or trust region globalization is employed.\n\nA code terminates early due to a “stagnation” rule: if the relative residual decreases by less than $20\\%$ in two consecutive iterations, it stops. In a particular run, termination occurs at $k=2$. The measured quantities at $k=0,1,2$ are:\n- At $k=0$: $\\|R(u_0)\\| = 10.0$, $\\|\\Delta u_0\\| = 0.90$, $R(u_0)^{\\mathsf T}\\Delta u_0 = -1.70$.\n- At $k=1$: $\\|R(u_1)\\| = 8.50$, $\\|\\Delta u_1\\| = 0.70$, $R(u_1)^{\\mathsf T}\\Delta u_1 = -4.165$.\n- At $k=2$: $\\|R(u_2)\\| = 7.40$, $\\|\\Delta u_2\\| = 0.78$, $R(u_2)^{\\mathsf T}\\Delta u_2 = -5.68$.\n\nConsider the rate of decrease of $\\|R(u_k)\\|$ and the angle $\\phi_k$ between $R(u_k)$ and $\\Delta u_k$, defined by $\\cos \\phi_k = \\dfrac{R(u_k)^{\\mathsf T}\\Delta u_k}{\\|R(u_k)\\|\\,\\|\\Delta u_k\\|}$. Based strictly on these data and first-principles properties of Newton-Raphson for nonlinear finite elements with a symmetric positive definite tangent stiffness, which diagnosis is most justified?\n\nA. Termination at $k=2$ was premature: despite slow residual decrease so far, the increasingly obtuse angle and $\\cos \\phi_2$ near $-1$ indicate that the Newton step is becoming nearly antiparallel to $R(u_k)$; an additional iteration is expected to yield a substantial drop in $\\|R(u_k)\\|$.\n\nB. Termination at $k=2$ was not premature: a negative $R(u_k)^{\\mathsf T}\\Delta u_k$ guarantees at best monotonic linear decrease, so continuing would not significantly improve convergence.\n\nC. Termination at $k=2$ was not premature: since $R(u_k)^{\\mathsf T}\\Delta u_k  0$ for all $k$, the iterates move against $R(u_k)$, which signals divergence; the algorithm should be stopped.\n\nD. Termination at $k=2$ was justified by stagnation: the angle is irrelevant for Newton-Raphson because the Newton step is not a descent direction for the residual norm, so only the residual decrease should be considered.", "solution": "The problem statement is subjected to validation.\n\n**Step 1: Extract Givens**\n-   The equilibrium problem is to find a displacement vector $u \\in \\mathbb{R}^n$ such that the residual $R(u) = f_{\\mathrm{int}}(u) - f_{\\mathrm{ext}} = 0$.\n-   The iterative method is the Newton-Raphson (NR) method.\n-   The NR update step is defined by solving the linear system $K_T(u_k)\\,\\Delta u_k = -R(u_k)$, followed by the update $u_{k+1} = u_k + \\Delta u_k$.\n-   $K_T(u_k)$ is the tangent stiffness matrix at iterate $u_k$.\n-   Assumption: For the reported iterates, $K_T(u_k)$ is a symmetric positive definite (SPD) matrix.\n-   Assumption: No line search or trust region globalization is used (i.e., a full step is taken).\n-   Termination Rule: The code stops if the relative residual decrease is less than $20\\%$ in two consecutive iterations.\n-   Termination occurs at iteration $k=2$.\n-   Data at $k=0$: $\\|R(u_0)\\| = 10.0$, $\\|\\Delta u_0\\| = 0.90$, $R(u_0)^{\\mathsf T}\\Delta u_0 = -1.70$.\n-   Data at $k=1$: $\\|R(u_1)\\| = 8.50$, $\\|\\Delta u_1\\| = 0.70$, $R(u_1)^{\\mathsf T}\\Delta u_1 = -4.165$.\n-   Data at $k=2$: $\\|R(u_2)\\| = 7.40$, $\\|\\Delta u_2\\| = 0.78$, $R(u_2)^{\\mathsf T}\\Delta u_2 = -5.68$.\n-   The angle $\\phi_k$ between $R(u_k)$ and $\\Delta u_k$ is defined by $\\cos \\phi_k = \\dfrac{R(u_k)^{\\mathsf T}\\Delta u_k}{\\|R(u_k)\\|\\,\\|\\Delta u_k\\|}$.\n\n**Step 2: Validate Using Extracted Givens**\nThe problem describes a standard application of the Newton-Raphson method to a nonlinear solid mechanics problem formulated via the finite element method. The concepts, equations, and assumptions ($K_T$ is SPD) are standard in this field. The provided data is numerical and self-consistent. The question is objective and asks for a diagnosis based on the provided data and established principles. The problem is scientifically grounded, well-posed, and objective. No flaws are identified.\n\n**Step 3: Verdict and Action**\nThe problem is valid. A solution will be derived.\n\n**Derivation and Analysis**\n\nFirst, we verify that the stated termination condition was met. The termination rule requires the relative residual decrease, $1 - \\frac{\\|R(u_{k+1})\\|}{\\|R(u_k)\\|}$, to be less than $0.20$ for two consecutive iterations.\n\nFor the first iteration ($k=0 \\to k=1$):\nThe reduction factor is $\\frac{\\|R(u_1)\\|}{\\|R(u_0)\\|} = \\frac{8.50}{10.0} = 0.85$.\nThe relative decrease is $1 - 0.85 = 0.15$, which is $15\\%$. Since $15\\%  20\\%$, this is the first iteration that meets the stagnation criterion.\n\nFor the second iteration ($k=1 \\to k=2$):\nThe reduction factor is $\\frac{\\|R(u_2)\\|}{\\|R(u_1)\\|} = \\frac{7.40}{8.50} \\approx 0.8706$.\nThe relative decrease is $1 - 0.8706 \\approx 0.1294$, which is approximately $12.9\\%$. Since $12.9\\%  20\\%$, this is the second consecutive iteration that meets the stagnation criterion.\nThus, the termination at $k=2$ is consistent with the stipulated rule. The question is whether this termination was scientifically justified or premature.\n\nNext, we analyze the convergence behavior using the provided data. The angle $\\phi_k$ between the residual $R(u_k)$ and the Newton step $\\Delta u_k$ provides critical insight. We calculate $\\cos \\phi_k$ for each iteration.\n\nFor $k=0$:\n$$ \\cos \\phi_0 = \\frac{R(u_0)^{\\mathsf T}\\Delta u_0}{\\|R(u_0)\\|\\,\\|\\Delta u_0\\|} = \\frac{-1.70}{10.0 \\times 0.90} = \\frac{-1.70}{9.0} \\approx -0.1889 $$\n\nFor $k=1$:\n$$ \\cos \\phi_1 = \\frac{R(u_1)^{\\mathsf T}\\Delta u_1}{\\|R(u_1)\\|\\,\\|\\Delta u_1\\|} = \\frac{-4.165}{8.50 \\times 0.70} = \\frac{-4.165}{5.95} = -0.7 $$\n\nFor $k=2$:\n$$ \\cos \\phi_2 = \\frac{R(u_2)^{\\mathsf T}\\Delta u_2}{\\|R(u_2)\\|\\,\\|\\Delta u_2\\|} = \\frac{-5.68}{7.40 \\times 0.78} = \\frac{-5.68}{5.772} \\approx -0.9841 $$\n\nThe calculations reveal a strong trend: $\\cos \\phi_k$ is progressively approaching $-1$. This means the angle $\\phi_k$ is approaching $\\pi$ radians ($180^\\circ$), and the Newton step vector $\\Delta u_k$ is becoming increasingly antiparallel to the residual vector $R(u_k)$.\n\nLet us analyze the significance of this from first principles.\nIn conservative systems, the residual is the gradient of a potential energy functional $\\Pi(u)$, so $R(u) = \\nabla \\Pi(u)$. The direction of steepest descent for the potential energy is $-\\nabla \\Pi(u) = -R(u)$. The Newton step is given by $\\Delta u_k = -K_T(u_k)^{-1} R(u_k)$. The trend $\\cos \\phi_k \\to -1$ indicates that the Newton direction $\\Delta u_k$ is aligning with the steepest descent direction $-R(u_k)$. This suggests that the Newton step is becoming an almost ideal search direction for minimizing the potential energy. While the initial steps showed slow convergence (possibly due to a poor search direction, as indicated by the small magnitude of $\\cos \\phi_0$), the quality of the search direction improves dramatically. A step taken in a direction that is nearly optimal is highly likely to produce a significant reduction in the residual, especially as the Newton method also provides a physically meaningful step length. The slow convergence so far is not indicative of future performance, given the dramatic improvement in the search direction quality. The simple stagnation check ignores this critical information.\n\n**Evaluation of Options**\n\nA. **Termination at $k=2$ was premature: despite slow residual decrease so far, the increasingly obtuse angle and $\\cos \\phi_2$ near $-1$ indicate that the Newton step is becoming nearly antiparallel to $R(u_k)$; an additional iteration is expected to yield a substantial drop in $\\|R(u_k)\\|$.**\nThis statement correctly identifies the trend of the angle becoming more obtuse and $\\cos \\phi_k \\to -1$. It correctly interprets this as the Newton step $\\Delta u_k$ becoming nearly antiparallel to the residual $R(u_k)$. Based on the analysis above, this alignment signifies a high-quality search direction, and it is reasonable to expect a substantial reduction in the residual in the next step. The conclusion that termination was premature is therefore well-justified.\nThe verdict is **Correct**.\n\nB. **Termination at $k=2$ was not premature: a negative $R(u_k)^{\\mathsf T}\\Delta u_k$ guarantees at best monotonic linear decrease, so continuing would not significantly improve convergence.**\nThis statement is fundamentally flawed. The condition $R(u_k)^{\\mathsf T}\\Delta u_k  0$ is a direct consequence of the assumption that $K_T(u_k)$ is symmetric positive definite: $R(u_k)^{\\mathsf T}\\Delta u_k = R(u_k)^{\\mathsf T}(-K_T(u_k)^{-1} R(u_k)) = -R(u_k)^{\\mathsf T}K_T(u_k)^{-1} R(u_k)  0$. This condition means $\\Delta u_k$ is a descent direction for the potential energy. It is a prerequisite for convergence, not a limiter on its rate. The Newton-Raphson method is known for its quadratic convergence rate near the solution, which is much faster than linear. To claim this condition guarantees \"at best\" linear decrease is false.\nThe verdict is **Incorrect**.\n\nC. **Termination at $k=2$ was not premature: since $R(u_k)^{\\mathsf T}\\Delta u_k  0$ for all $k$, the iterates move against $R(u_k)$, which signals divergence; the algorithm should be stopped.**\nThis statement demonstrates a profound misunderstanding of descent methods. We seek to find $u$ where $R(u)=0$. When $R(u_k) \\neq 0$, we must take a step $\\Delta u_k$ that attempts to reduce the residual. Moving \"against\" $R(u_k)$ (i.e., in a direction $\\Delta u_k$ that has a negative projection onto $R(u_k)$, meaning $R(u_k)^{\\mathsf T}\\Delta u_k  0$) is precisely what is required for a descent method to make progress towards a minimum (of the potential energy). This condition is a signal for convergence, not divergence.\nThe verdict is **Incorrect**.\n\nD. **Termination at $k=2$ was justified by stagnation: the angle is irrelevant for Newton-Raphson because the Newton step is not a descent direction for the residual norm, so only the residual decrease should be considered.**\nThis statement contains a critical falsehood. The Newton step $\\Delta u_k$ *is* a descent direction for the scalar function $g(u) = \\frac{1}{2}\\|R(u)\\|^2 = \\frac{1}{2}R(u)^{\\mathsf T}R(u)$. The gradient of $g(u)$ is $\\nabla g(u) = (\\nabla R(u))^{\\mathsf T}R(u) = K_T(u)^{\\mathsf T}R(u)$. By symmetry of $K_T$, $\\nabla g(u) = K_T(u)R(u)$. The directional derivative of $g(u)$ at $u_k$ in the direction $\\Delta u_k$ is:\n$$ (\\nabla g(u_k))^{\\mathsf T} \\Delta u_k = (K_T(u_k)R(u_k))^{\\mathsf T} \\Delta u_k = R(u_k)^{\\mathsf T} K_T(u_k)^{\\mathsf T} \\Delta u_k = R(u_k)^{\\mathsf T} (K_T(u_k) \\Delta u_k) $$\nUsing the NR equation $K_T(u_k)\\Delta u_k = -R(u_k)$, we get:\n$$ (\\nabla g(u_k))^{\\mathsf T} \\Delta u_k = R(u_k)^{\\mathsf T} (-R(u_k)) = -\\|R(u_k)\\|^2 $$\nSince $\\|R(u_k)\\|^2 > 0$ (as long as we have not converged), the directional derivative is strictly negative. This proves that the Newton direction is a descent direction for the residual norm. The claim that it is not, and that the angle is therefore irrelevant, is false. The angle is a crucial indicator of the quality of the search direction.\nThe verdict is **Incorrect**.", "answer": "$$\\boxed{A}$$", "id": "2583291"}, {"introduction": "Standard load-controlled Newton-Raphson methods fail when the structural path reaches a \"limit point,\" where the tangent stiffness matrix becomes singular. To trace complex equilibrium paths that include snap-through or snap-back phenomena, we need more advanced path-following techniques. This exercise provides hands-on practice with the widely used Crisfield-type arc-length method, which augments the equilibrium equations with a constraint on the \"length\" of the incremental step in the load-displacement space [@problem_id:2583322]. You will perform one corrector iteration for a simple nonlinear system, gaining direct experience in setting up and solving the coupled system for both displacement and load factor increments.", "problem": "A two-bar truss is modeled as two parallel, coaxial, axial springs connecting a rigid base to a single top node with one generalized displacement degree of freedom $u$ (positive downward). Each bar $i \\in \\{1,2\\}$ follows a nonlinear axial force–elongation relation $N_i(a_i) = k_i a_i + \\beta_i a_i^3$ under small displacement kinematics, so that for this one-degree-of-freedom configuration $a_1 = a_2 = u$ and the assembled internal nodal force is $f_{\\mathrm{int}}(u) = \\sum_{i=1}^{2} N_i(u)$. The external load is applied through a scalar load factor $\\lambda$ multiplying a fixed reference load $\\hat{P}$, so that $f_{\\mathrm{ext}} = \\lambda \\hat{P}$.\n\nYou will perform one Newton–Raphson corrector iteration within a Crisfield-type spherical arc-length procedure. Use the following data:\n- Constitutive parameters: $k_1 = 2$, $k_2 = 1$, $\\beta_1 = 1$, $\\beta_2 = 0$.\n- Reference load: $\\hat{P} = 5$.\n- Current iterate at load step $n \\to n+1$: $(u_k,\\lambda_k) = (1.0, 0.5)$.\n- Last converged state from the previous load step: $(u_n,\\lambda_n) = (0.7, 0.4)$.\n- Arc-length parameters: radius $\\Delta s = 0.6$ and load scaling $\\alpha = 2$.\n\nStarting from the principle of virtual work and its finite element residual $R(u,\\lambda) = f_{\\mathrm{int}}(u) - \\lambda \\hat{P}$, and adopting the spherical arc-length constraint\n$$\ng(\\Delta u,\\Delta \\lambda) \\equiv \\Delta u^2 + \\alpha^2 \\Delta \\lambda^2 - \\Delta s^2 = 0,\n$$\nwhere $\\Delta u = u - u_n$ and $\\Delta \\lambda = \\lambda - \\lambda_n$, do the following within this single corrector iteration about $(u_k,\\lambda_k)$:\n- Derive the Newton–Raphson linearization of the equilibrium equation to obtain a relation between the corrector $(\\delta u,\\delta \\lambda)$ and the residual $R(u_k,\\lambda_k)$.\n- Linearize the arc-length constraint about $(\\Delta u_k,\\Delta \\lambda_k) = (u_k - u_n,\\lambda_k - \\lambda_n)$ to obtain a linear relation in $(\\delta u,\\delta \\lambda)$.\n- Assemble the resulting $2 \\times 2$ linear system for $(\\delta u,\\delta \\lambda)$ and solve it.\n\nReport the scalar corrector to the load factor, $\\delta \\lambda$, as your final answer. Provide the exact value; do not round. No units are required since $\\lambda$ is dimensionless.", "solution": "The problem is subjected to validation.\n\n**Step 1: Extract Givens**\n- Model: Two parallel axial springs with a single degree of freedom $u$.\n- Constitutive law for bar $i$: $N_i(a_i) = k_i a_i + \\beta_i a_i^3$.\n- Kinematics: $a_1 = a_2 = u$.\n- Internal force: $f_{\\mathrm{int}}(u) = \\sum_{i=1}^{2} N_i(u)$.\n- External force: $f_{\\mathrm{ext}} = \\lambda \\hat{P}$.\n- Residual: $R(u,\\lambda) = f_{\\mathrm{int}}(u) - \\lambda \\hat{P}$.\n- Arc-length constraint: $g(\\Delta u,\\Delta \\lambda) \\equiv \\Delta u^2 + \\alpha^2 \\Delta \\lambda^2 - \\Delta s^2 = 0$.\n- Increment definitions: $\\Delta u = u - u_n$, $\\Delta \\lambda = \\lambda - \\lambda_n$.\n- Parameters:\n  - $k_1 = 2$, $k_2 = 1$.\n  - $\\beta_1 = 1$, $\\beta_2 = 0$.\n  - $\\hat{P} = 5$.\n  - Current iterate (iteration $k$): $(u_k,\\lambda_k) = (1.0, 0.5)$.\n  - Last converged state (step $n$): $(u_n,\\lambda_n) = (0.7, 0.4)$.\n  - Arc-length parameters: $\\Delta s = 0.6$, $\\alpha = 2$.\n- Task: Perform one Newton-Raphson corrector iteration for $(\\delta u, \\delta \\lambda)$ and report $\\delta \\lambda$.\n\n**Step 2: Validate Using Extracted Givens**\n- **Scientific Grounding (Critical):** The problem describes a canonical one-degree-of-freedom system with cubic material nonlinearity, analyzed using the Newton-Raphson method combined with a Crisfield-type spherical arc-length constraint. This is a standard and fundamental topic in computational nonlinear mechanics. The formulation is scientifically sound.\n- **Well-Posed:** All necessary data and constitutive relations are provided. The objective is clearly stated. The problem is self-contained and structured to yield a unique solution for the requested quantity, assuming the Jacobian of the system is non-singular.\n- **Objective (Critical):** The problem is stated in precise mathematical and engineering terms, devoid of any subjectivity or ambiguity.\n\n**Step 3: Verdict and Action**\nThe problem is valid. We proceed with the solution.\n\nThe corrector iteration seeks an update $(\\delta u, \\delta \\lambda)$ from the current iterate $(u_k, \\lambda_k)$ to a new iterate $(u_{k+1}, \\lambda_{k+1}) = (u_k + \\delta u, \\lambda_k + \\delta \\lambda)$. This update is determined by linearizing the system of governing nonlinear equations, which consists of the equilibrium residual equation and the arc-length constraint equation.\n\nFirst, we formulate the specific internal force expression for the given system.\nThe force from each bar is $N_1(u) = k_1 u + \\beta_1 u^3$ and $N_2(u) = k_2 u + \\beta_2 u^3$.\nSubstituting the given parameters:\n$N_1(u) = 2u + 1u^3 = 2u + u^3$.\n$N_2(u) = 1u + 0u^3 = u$.\nThe total internal force is the sum:\n$f_{\\mathrm{int}}(u) = N_1(u) + N_2(u) = (2u + u^3) + u = 3u + u^3$.\n\nThe equilibrium residual is $R(u,\\lambda) = f_{\\mathrm{int}}(u) - \\lambda \\hat{P}$.\nWith the given parameters, this becomes:\n$R(u,\\lambda) = 3u + u^3 - 5\\lambda$.\n\nThe Newton-Raphson method linearizes the condition $R(u_{k+1}, \\lambda_{k+1}) = 0$ about the current iterate $(u_k, \\lambda_k)$.\n$R(u_k + \\delta u, \\lambda_k + \\delta \\lambda) \\approx R(u_k, \\lambda_k) + \\frac{\\partial R}{\\partial u}\\bigg|_{(u_k, \\lambda_k)} \\delta u + \\frac{\\partial R}{\\partial \\lambda}\\bigg|_{(u_k, \\lambda_k)} \\delta \\lambda = 0$.\nThis can be written as:\n$K_{T,k} \\delta u - \\hat{P} \\delta \\lambda = -R_k$,\nwhere $K_{T,k}$ is the tangent stiffness at $u_k$, and $R_k$ is the residual at $(u_k, \\lambda_k)$.\n\nWe compute the necessary terms at $(u_k, \\lambda_k) = (1.0, 0.5)$:\nThe tangent stiffness is the derivative of the internal force:\n$K_T(u) = \\frac{d f_{\\mathrm{int}}}{du} = \\frac{d}{du}(3u + u^3) = 3 + 3u^2$.\nAt $u_k=1.0$, the stiffness is $K_{T,k} = 3 + 3(1.0)^2 = 6$.\nThe residual at the current iterate is:\n$R_k = R(1.0, 0.5) = 3(1.0) + (1.0)^3 - 5(0.5) = 3 + 1 - 2.5 = 1.5$.\nThe derivative with respect to $\\lambda$ is $-\\hat{P} = -5$.\nSubstituting these values, the linearized equilibrium equation is:\n$6 \\delta u - 5 \\delta \\lambda = -1.5$. (Equation 1)\n\nNext, we linearize the arc-length constraint equation. The constraint must be satisfied by the updated state $(u_{k+1}, \\lambda_{k+1})$. The increments from the last converged state $(u_n, \\lambda_n)$ are:\n$\\Delta u_{k+1} = u_{k+1} - u_n = (u_k - u_n) + \\delta u = \\Delta u_k + \\delta u$.\n$\\Delta \\lambda_{k+1} = \\lambda_{k+1} - \\lambda_n = (\\lambda_k - \\lambda_n) + \\delta \\lambda = \\Delta \\lambda_k + \\delta \\lambda$.\nThe constraint is $g(\\Delta u_{k+1}, \\Delta \\lambda_{k+1}) = (\\Delta u_k + \\delta u)^2 + \\alpha^2 (\\Delta \\lambda_k + \\delta \\lambda)^2 - \\Delta s^2 = 0$.\nWe linearize this equation for $(\\delta u, \\delta \\lambda)$ around $(\\delta u, \\delta \\lambda)=(0,0)$:\n$g_k + \\frac{\\partial g}{\\partial (\\delta u)}\\bigg|_k \\delta u + \\frac{\\partial g}{\\partial (\\delta \\lambda)}\\bigg|_k \\delta \\lambda = 0$.\nThe terms are:\nCurrent total increments:\n$\\Delta u_k = u_k - u_n = 1.0 - 0.7 = 0.3$.\n$\\Delta \\lambda_k = \\lambda_k - \\lambda_n = 0.5 - 0.4 = 0.1$.\nThe constraint evaluated at the current iterate:\n$g_k = (\\Delta u_k)^2 + \\alpha^2 (\\Delta \\lambda_k)^2 - \\Delta s^2 = (0.3)^2 + (2)^2 (0.1)^2 - (0.6)^2 = 0.09 + 4(0.01) - 0.36 = 0.13 - 0.36 = -0.23$.\nThe partial derivatives are:\n$\\frac{\\partial g}{\\partial (\\delta u)}\\bigg|_k = 2(\\Delta u_k + \\delta u)|_{\\delta u=0} = 2\\Delta u_k = 2(0.3) = 0.6$.\n$\\frac{\\partial g}{\\partial (\\delta \\lambda)}\\bigg|_k = 2\\alpha^2(\\Delta \\lambda_k + \\delta \\lambda)|_{\\delta \\lambda=0} = 2\\alpha^2\\Delta \\lambda_k = 2(2)^2(0.1) = 2(4)(0.1) = 0.8$.\nThe linearized constraint equation is:\n$0.6 \\delta u + 0.8 \\delta \\lambda = -g_k = -(-0.23) = 0.23$. (Equation 2)\n\nWe now have a $2 \\times 2$ linear system for $(\\delta u, \\delta \\lambda)$:\n1. $6 \\delta u - 5 \\delta \\lambda = -1.5$\n2. $0.6 \\delta u + 0.8 \\delta \\lambda = 0.23$\n\nTo solve this system, we can multiply Equation 2 by $10$ to eliminate the decimal notation:\n2'. $6 \\delta u + 8 \\delta \\lambda = 2.3$\nNow, we subtract Equation 1 from Equation 2':\n$(6 \\delta u + 8 \\delta \\lambda) - (6 \\delta u - 5 \\delta \\lambda) = 2.3 - (-1.5)$.\n$8 \\delta \\lambda + 5 \\delta \\lambda = 2.3 + 1.5$.\n$13 \\delta \\lambda = 3.8$.\nSolving for $\\delta \\lambda$:\n$\\delta \\lambda = \\frac{3.8}{13} = \\frac{38}{130} = \\frac{19}{65}$.\n\nThe requested quantity is the scalar corrector to the load factor, $\\delta \\lambda$.", "answer": "$$\\boxed{\\frac{19}{65}}$$", "id": "2583322"}]}