{"hands_on_practices": [{"introduction": "This first exercise provides an ideal entry point into the mechanics of the strain-displacement matrix. By focusing on a one-dimensional quadratic bar element, we can isolate the core concepts of isoparametric mapping and the chain rule. This practice allows you to build a strong conceptual foundation by deriving the $B$ matrix from first principles without the geometric complexities of higher dimensions [@problem_id:2601372].", "problem": "Consider a straight, prismatic, one-dimensional elastic bar under small deformation, discretized by a single three-node isoparametric quadratic element in the Finite Element Method (FEM). Let the parent (reference) coordinate be denoted by $\\xi \\in [-1,1]$ with nodes located at $\\xi_1=-1$, $\\xi_2=0$, and $\\xi_3=1$. The physical coordinates of the element nodes are $x_1=0$, $x_2=1$, and $x_3=3$. The nodal axial displacements are $u_1$, $u_2$, and $u_3$. Assume the standard quadratic Lagrange interpolation on the parent element and isoparametric mapping to the physical coordinate.\n\nStarting only from the definition of the one-dimensional small (engineering) strain $\\varepsilon = \\dfrac{du}{dx}$ and the isoparametric approximation $u^h(x(\\xi)) = \\sum_{i=1}^{3} N_i(\\xi)\\,u_i$ along with the isoparametric mapping $x(\\xi) = \\sum_{i=1}^{3} N_i(\\xi)\\,x_i$, use the chain rule to derive the strain-displacement matrix (often called the $\\mathbf{B}$ matrix) in the form $\\mathbf{B}(\\xi) = \\begin{bmatrix} \\dfrac{dN_1}{dx} & \\dfrac{dN_2}{dx} & \\dfrac{dN_3}{dx} \\end{bmatrix}$, expressing $\\dfrac{dN_i}{dx}$ in terms of derivatives with respect to $\\xi$ and the Jacobian $J(\\xi) = \\dfrac{dx}{d\\xi}$. Then, for the given nodal coordinates $x_1=0$, $x_2=1$, and $x_3=3$, evaluate the axial strain at the parent coordinate $\\xi=0$ in terms of the nodal displacements $u_1$, $u_2$, and $u_3$.\n\nExpress the final answer as a single simplified analytic expression for $\\varepsilon(0)$ (dimensionless, no units). No rounding is required.", "solution": "The goal is to obtain the one-dimensional strain-displacement relation starting from first principles. In small deformation kinematics for a one-dimensional bar, the engineering strain is defined by\n$$\n\\varepsilon(x) = \\frac{du}{dx}.\n$$\nIn the isoparametric finite element setting, we interpolate the displacement field and the geometry with the same shape functions. For a three-node quadratic element on the parent domain $\\xi \\in [-1,1]$ with nodes at $\\xi_1=-1$, $\\xi_2=0$, and $\\xi_3=1$, the displacement approximation is\n$$\nu^h(x(\\xi)) = \\sum_{i=1}^{3} N_i(\\xi)\\,u_i,\n$$\nand the geometry mapping is\n$$\nx(\\xi) = \\sum_{i=1}^{3} N_i(\\xi)\\,x_i.\n$$\nBy the chain rule,\n$$\n\\frac{du}{dx} = \\frac{du}{d\\xi}\\,\\frac{d\\xi}{dx}.\n$$\nSince $u^h$ depends on $\\xi$ through the shape functions $N_i(\\xi)$, its derivative with respect to $\\xi$ is\n$$\n\\frac{du}{d\\xi} = \\sum_{i=1}^{3} \\frac{dN_i}{d\\xi}(\\xi)\\,u_i.\n$$\nThe Jacobian of the isoparametric mapping is\n$$\nJ(\\xi) = \\frac{dx}{d\\xi} = \\sum_{i=1}^{3} \\frac{dN_i}{d\\xi}(\\xi)\\,x_i,\n$$\nand hence\n$$\n\\frac{d\\xi}{dx} = \\frac{1}{J(\\xi)}.\n$$\nCombining these, the strain can be written as\n$$\n\\varepsilon(\\xi) = \\frac{du}{dx} = \\left(\\sum_{i=1}^{3} \\frac{dN_i}{d\\xi}(\\xi)\\,u_i\\right)\\frac{1}{J(\\xi)}.\n$$\nThis identifies the strain-displacement matrix (row vector) as\n$$\n\\mathbf{B}(\\xi) = \\begin{bmatrix} \\dfrac{dN_1}{dx} & \\dfrac{dN_2}{dx} & \\dfrac{dN_3}{dx} \\end{bmatrix}\n= \\begin{bmatrix} \\dfrac{dN_1}{d\\xi} & \\dfrac{dN_2}{d\\xi} & \\dfrac{dN_3}{d\\xi} \\end{bmatrix}\\frac{1}{J(\\xi)}.\n$$\nTo evaluate $\\varepsilon$ at a specific location, we require explicit shape functions. For quadratic Lagrange polynomials associated with the parent nodes $\\xi_1=-1$, $\\xi_2=0$, and $\\xi_3=1$, the shape functions follow from the Lagrange construction\n$$\nN_i(\\xi) = \\prod_{\\substack{j=1 \\\\ j\\neq i}}^{3} \\frac{\\xi-\\xi_j}{\\xi_i-\\xi_j}.\n$$\nThus,\n$$\nN_1(\\xi) = \\frac{(\\xi-0)(\\xi-1)}{(-1-0)(-1-1)} = \\frac{\\xi(\\xi-1)}{2},\\quad\nN_2(\\xi) = \\frac{(\\xi+1)(\\xi-1)}{(0+1)(0-1)} = 1-\\xi^2,\\quad\nN_3(\\xi) = \\frac{(\\xi+1)(\\xi-0)}{(1+1)(1-0)} = \\frac{\\xi(\\xi+1)}{2}.\n$$\nTheir derivatives with respect to $\\xi$ are\n$$\n\\frac{dN_1}{d\\xi} = \\xi - \\frac{1}{2},\\quad\n\\frac{dN_2}{d\\xi} = -2\\xi,\\quad\n\\frac{dN_3}{d\\xi} = \\xi + \\frac{1}{2}.\n$$\nThe Jacobian is\n$$\nJ(\\xi) = \\left(\\xi - \\frac{1}{2}\\right)x_1 + (-2\\xi)\\,x_2 + \\left(\\xi + \\frac{1}{2}\\right)x_3.\n$$\nFor the given nodal coordinates $x_1=0$, $x_2=1$, and $x_3=3$, evaluate at $\\xi=0$:\n$$\n\\left.\\frac{dN_1}{d\\xi}\\right|_{\\xi=0} = -\\frac{1}{2},\\quad\n\\left.\\frac{dN_2}{d\\xi}\\right|_{\\xi=0} = 0,\\quad\n\\left.\\frac{dN_3}{d\\xi}\\right|_{\\xi=0} = \\frac{1}{2},\n$$\nand\n$$\nJ(0) = \\left(-\\frac{1}{2}\\right)x_1 + 0\\cdot x_2 + \\left(\\frac{1}{2}\\right)x_3 = -\\frac{1}{2}\\cdot 0 + 0\\cdot 1 + \\frac{1}{2}\\cdot 3 = \\frac{3}{2}.\n$$\nTherefore, the strain-displacement matrix evaluated at $\\xi=0$ is\n$$\n\\mathbf{B}(0) = \\begin{bmatrix}\n\\displaystyle \\frac{-\\frac{1}{2}}{\\frac{3}{2}} & \\displaystyle \\frac{0}{\\frac{3}{2}} & \\displaystyle \\frac{\\frac{1}{2}}{\\frac{3}{2}}\n\\end{bmatrix}\n=\n\\begin{bmatrix}\n-\\frac{1}{3} & 0 & \\frac{1}{3}\n\\end{bmatrix}.\n$$\nThe axial strain at $\\xi=0$ is then\n$$\n\\varepsilon(0) = \\mathbf{B}(0)\\begin{bmatrix} u_1 \\\\ u_2 \\\\ u_3 \\end{bmatrix}\n= -\\frac{1}{3}u_1 + 0\\cdot u_2 + \\frac{1}{3}u_3\n= \\frac{u_3 - u_1}{3}.\n$$\nThis is dimensionless and requires no rounding.", "answer": "$$\\boxed{\\frac{u_3 - u_1}{3}}$$", "id": "2601372"}, {"introduction": "Moving into two dimensions, this practice tackles the derivation for the foundational Constant Strain Triangle (CST) element. This exercise is crucial as it demonstrates a direct derivation route in physical coordinates, providing a valuable contrast to the isoparametric method. Furthermore, it reinforces the fundamental principle that the $B$ matrix is a purely kinematic quantity, entirely independent of the material's constitutive assumptions such as plane strain or plane stress [@problem_id:2601319].", "problem": "Consider a two-dimensional (2D) linear triangular finite element, also known as the Constant Strain Triangle (CST), used within the Finite Element Method (FEM). The element occupies a region in the physical (Cartesian) domain with nodal coordinates given by node $1$ at $(0,0)$, node $2$ at $(2,0)$, and node $3$ at $(0,3)$. Let the in-plane displacement field be approximated by linear shape functions as $u(x,y) = \\sum_{i=1}^{3} N_i(x,y)\\,u_i$ and $v(x,y) = \\sum_{i=1}^{3} N_i(x,y)\\,v_i$, where $u_i$ and $v_i$ are the nodal displacement components at node $i$ in the $x$- and $y$-directions, respectively. The small-strain tensor components are defined by $\\varepsilon_{xx} = \\partial u/\\partial x$, $\\varepsilon_{yy} = \\partial v/\\partial y$, and $\\gamma_{xy} = \\partial u/\\partial y + \\partial v/\\partial x$.\n\nStarting from these definitions and the nodal interpolation conditions that define the CST shape functions in physical coordinates (no isoparametric mapping is needed), perform the following:\n\n1. Derive the strain-displacement matrix (B matrix) that relates the nodal displacement vector $\\mathbf{d} = \\{u_1, v_1, u_2, v_2, u_3, v_3\\}^{T}$ to the strain vector $\\boldsymbol{\\varepsilon} = \\{\\varepsilon_{xx}, \\varepsilon_{yy}, \\gamma_{xy}\\}^{T}$ for the plane strain case.\n\n2. Repeat the derivation for the plane stress case, and explain whether the resulting strain-displacement matrices differ between the two cases, and why.\n\nThen, using the B matrix you derived (for either case, as appropriate based on your conclusion), compute the scalar\n$$\nS \\;=\\; \\det(\\mathbf{B}\\mathbf{B}^{T}).\n$$\n\nProvide $S$ as an exact rational number. Do not provide intermediate values; report only the final value of $S$ without units. No rounding is required.", "solution": "The derivation proceeds as follows. For a linear triangular element, the in-plane displacement field, $u(x,y)$ and $v(x,y)$, is assumed to be a linear function of the spatial coordinates $x$ and $y$.\n$$\nu(x,y) = \\alpha_1 + \\alpha_2 x + \\alpha_3 y\n$$\n$$\nv(x,y) = \\alpha_4 + \\alpha_5 x + \\alpha_6 y\n$$\nThe six coefficients $\\alpha_i$ are determined by enforcing the boundary conditions at the element's nodes, i.e., the displacement at each node must equal its prescribed nodal displacement.\nThe nodal coordinates are $(x_1, y_1) = (0,0)$, $(x_2, y_2) = (2,0)$, and $(x_3, y_3) = (0,3)$.\n\nAt node $1$: $u_1 = u(0,0) = \\alpha_1$, and $v_1 = v(0,0) = \\alpha_4$.\nAt node $2$: $u_2 = u(2,0) = \\alpha_1 + 2\\alpha_2$, which gives $\\alpha_2 = \\frac{1}{2}(u_2 - u_1)$.\nAlso, $v_2 = v(2,0) = \\alpha_4 + 2\\alpha_5$, which gives $\\alpha_5 = \\frac{1}{2}(v_2 - v_1)$.\nAt node $3$: $u_3 = u(0,3) = \\alpha_1 + 3\\alpha_3$, which gives $\\alpha_3 = \\frac{1}{3}(u_3 - u_1)$.\nAlso, $v_3 = v(0,3) = \\alpha_4 + 3\\alpha_6$, which gives $\\alpha_6 = \\frac{1}{3}(v_3 - v_1)$.\n\nSubstituting these coefficients back into the displacement field equations:\n$$\nu(x,y) = u_1 + \\frac{1}{2}(u_2 - u_1)x + \\frac{1}{3}(u_3 - u_1)y\n$$\n$$\nv(x,y) = v_1 + \\frac{1}{2}(v_2 - v_1)x + \\frac{1}{3}(v_3 - v_1)y\n$$\nThese expressions can be rearranged to identify the shape functions, $N_i(x,y)$, which interpolate the nodal displacements over the element domain.\n$$\nu(x,y) = \\left(1 - \\frac{x}{2} - \\frac{y}{3}\\right)u_1 + \\left(\\frac{x}{2}\\right)u_2 + \\left(\\frac{y}{3}\\right)u_3 = N_1 u_1 + N_2 u_2 + N_3 u_3\n$$\n$$\nv(x,y) = \\left(1 - \\frac{x}{2} - \\frac{y}{3}\\right)v_1 + \\left(\\frac{x}{2}\\right)v_2 + \\left(\\frac{y}{3}\\right)v_3 = N_1 v_1 + N_2 v_2 + N_3 v_3\n$$\nThus, the shape functions are:\n$N_1(x,y) = 1 - \\frac{x}{2} - \\frac{y}{3}$, $N_2(x,y) = \\frac{x}{2}$, $N_3(x,y) = \\frac{y}{3}$.\n\nThe strain vector $\\boldsymbol{\\varepsilon} = \\{\\varepsilon_{xx}, \\varepsilon_{yy}, \\gamma_{xy}\\}^{T}$ is derived from the displacement field using the small-strain definitions:\n$$\n\\varepsilon_{xx} = \\frac{\\partial u}{\\partial x} = \\frac{\\partial}{\\partial x}(N_1 u_1 + N_2 u_2 + N_3 u_3) = \\frac{\\partial N_1}{\\partial x}u_1 + \\frac{\\partial N_2}{\\partial x}u_2 + \\frac{\\partial N_3}{\\partial x}u_3\n$$\n$$\n\\varepsilon_{yy} = \\frac{\\partial v}{\\partial y} = \\frac{\\partial}{\\partial y}(N_1 v_1 + N_2 v_2 + N_3 v_3) = \\frac{\\partial N_1}{\\partial y}v_1 + \\frac{\\partial N_2}{\\partial y}v_2 + \\frac{\\partial N_3}{\\partial y}v_3\n$$\n$$\n\\gamma_{xy} = \\frac{\\partial u}{\\partial y} + \\frac{\\partial v}{\\partial x} = \\left(\\frac{\\partial N_1}{\\partial y}u_1 + \\frac{\\partial N_2}{\\partial y}u_2 + \\frac{\\partial N_3}{\\partial y}u_3\\right) + \\left(\\frac{\\partial N_1}{\\partial x}v_1 + \\frac{\\partial N_2}{\\partial x}v_2 + \\frac{\\partial N_3}{\\partial x}v_3\\right)\n$$\nThe required partial derivatives of the shape functions are:\n$\\frac{\\partial N_1}{\\partial x} = -\\frac{1}{2}$, $\\frac{\\partial N_1}{\\partial y} = -\\frac{1}{3}$\n$\\frac{\\partial N_2}{\\partial x} = \\frac{1}{2}$, $\\frac{\\partial N_2}{\\partial y} = 0$\n$\\frac{\\partial N_3}{\\partial x} = 0$, $\\frac{\\partial N_3}{\\partial y} = \\frac{1}{3}$\n\nThe relationship between the strain vector $\\boldsymbol{\\varepsilon}$ and the nodal displacement vector $\\mathbf{d} = \\{u_1, v_1, u_2, v_2, u_3, v_3\\}^{T}$ is given by $\\boldsymbol{\\varepsilon} = \\mathbf{B}\\mathbf{d}$. The matrix $\\mathbf{B}$ is the strain-displacement matrix. By assembling the strain components from the shape function derivatives, we construct $\\mathbf{B}$:\n$$\n\\mathbf{B} =\n\\begin{pmatrix}\n\\frac{\\partial N_1}{\\partial x} & 0 & \\frac{\\partial N_2}{\\partial x} & 0 & \\frac{\\partial N_3}{\\partial x} & 0 \\\\\n0 & \\frac{\\partial N_1}{\\partial y} & 0 & \\frac{\\partial N_2}{\\partial y} & 0 & \\frac{\\partial N_3}{\\partial y} \\\\\n\\frac{\\partial N_1}{\\partial y} & \\frac{\\partial N_1}{\\partial x} & \\frac{\\partial N_2}{\\partial y} & \\frac{\\partial N_2}{\\partial x} & \\frac{\\partial N_3}{\\partial y} & \\frac{\\partial N_3}{\\partial x}\n\\end{pmatrix}\n$$\nSubstituting the calculated derivatives:\n$$\n\\mathbf{B} =\n\\begin{pmatrix}\n-\\frac{1}{2} & 0 & \\frac{1}{2} & 0 & 0 & 0 \\\\\n0 & -\\frac{1}{3} & 0 & 0 & 0 & \\frac{1}{3} \\\\\n-\\frac{1}{3} & -\\frac{1}{2} & 0 & \\frac{1}{2} & \\frac{1}{3} & 0\n\\end{pmatrix}\n$$\nThis is the strain-displacement matrix for the given CST element.\n\nRegarding the second part of the problem: comparison between plane strain and plane stress cases. The derivation of the $\\mathbf{B}$ matrix is based entirely on kinematic relationships, which link strain (a measure of deformation geometry) to displacements. These relationships are independent of the material's constitutive law (the stress-strain relation). The distinction between plane strain ($\\varepsilon_{zz}=0$) and plane stress ($\\sigma_{zz}=0$) appears in the constitutive matrix $\\mathbf{D}$, which relates stress to strain, but not in the strain-displacement matrix $\\mathbf{B}$. Therefore, the derivation is identical for both cases, and the resulting $\\mathbf{B}$ matrix is the same.\n\nFinally, we must compute the scalar $S = \\det(\\mathbf{B}\\mathbf{B}^T)$. First, we form the transpose of $\\mathbf{B}$, which is a $6 \\times 3$ matrix:\n$$\n\\mathbf{B}^T =\n\\begin{pmatrix}\n-\\frac{1}{2} & 0 & -\\frac{1}{3} \\\\\n0 & -\\frac{1}{3} & -\\frac{1}{2} \\\\\n\\frac{1}{2} & 0 & 0 \\\\\n0 & 0 & \\frac{1}{2} \\\\\n0 & 0 & \\frac{1}{3} \\\\\n0 & \\frac{1}{3} & 0\n\\end{pmatrix}\n$$\nNext, we compute the product $\\mathbf{C} = \\mathbf{B}\\mathbf{B}^T$, which results in a $3 \\times 3$ matrix.\n$C_{11} = (-\\frac{1}{2})^2 + (\\frac{1}{2})^2 = \\frac{1}{4} + \\frac{1}{4} = \\frac{1}{2}$\n$C_{12} = 0$\n$C_{13} = (-\\frac{1}{2})(-\\frac{1}{3}) = \\frac{1}{6}$\n$C_{21} = 0$\n$C_{22} = (-\\frac{1}{3})^2 + (\\frac{1}{3})^2 = \\frac{1}{9} + \\frac{1}{9} = \\frac{2}{9}$\n$C_{23} = (-\\frac{1}{3})(-\\frac{1}{2}) = \\frac{1}{6}$\n$C_{31} = (-\\frac{1}{3})(-\\frac{1}{2}) = \\frac{1}{6}$\n$C_{32} = (-\\frac{1}{2})(-\\frac{1}{3}) = \\frac{1}{6}$\n$C_{33} = (-\\frac{1}{3})^2 + (-\\frac{1}{2})^2 + (\\frac{1}{2})^2 + (\\frac{1}{3})^2 = \\frac{1}{9} + \\frac{1}{4} + \\frac{1}{4} + \\frac{1}{9} = \\frac{2}{9} + \\frac{1}{2} = \\frac{4+9}{18} = \\frac{13}{18}$\n\nThe resulting matrix is:\n$$\n\\mathbf{C} = \\mathbf{B}\\mathbf{B}^T =\n\\begin{pmatrix}\n\\frac{1}{2} & 0 & \\frac{1}{6} \\\\\n0 & \\frac{2}{9} & \\frac{1}{6} \\\\\n\\frac{1}{6} & \\frac{1}{6} & \\frac{13}{18}\n\\end{pmatrix}\n$$\nNow, we compute its determinant, $S = \\det(\\mathbf{C})$.\n$$\nS = \\frac{1}{2}\\left(\\frac{2}{9} \\cdot \\frac{13}{18} - \\frac{1}{6} \\cdot \\frac{1}{6}\\right) - 0 + \\frac{1}{6}\\left(0 \\cdot \\frac{1}{6} - \\frac{2}{9} \\cdot \\frac{1}{6}\\right)\n$$\n$$\nS = \\frac{1}{2}\\left(\\frac{26}{162} - \\frac{1}{36}\\right) + \\frac{1}{6}\\left(-\\frac{2}{54}\\right)\n$$\nSimplify the fractions: $\\frac{26}{162} = \\frac{13}{81}$ and $\\frac{2}{54} = \\frac{1}{27}$.\n$$\nS = \\frac{1}{2}\\left(\\frac{13}{81} - \\frac{1}{36}\\right) - \\frac{1}{162}\n$$\nThe least common multiple of $81$ and $36$ is $324$.\n$$\nS = \\frac{1}{2}\\left(\\frac{13 \\cdot 4}{324} - \\frac{1 \\cdot 9}{324}\\right) - \\frac{1}{162} = \\frac{1}{2}\\left(\\frac{52 - 9}{324}\\right) - \\frac{1}{162} = \\frac{1}{2}\\left(\\frac{43}{324}\\right) - \\frac{1}{162}\n$$\n$$\nS = \\frac{43}{648} - \\frac{1}{162} = \\frac{43}{648} - \\frac{4}{648} = \\frac{39}{648}\n$$\nThis fraction can be simplified by dividing numerator and denominator by their greatest common divisor, which is $3$.\n$$\nS = \\frac{39 \\div 3}{648 \\div 3} = \\frac{13}{216}\n$$\nThe value of $S$ is an exact rational number as requested.", "answer": "$$\n\\boxed{\\frac{13}{216}}\n$$", "id": "2601319"}, {"introduction": "This capstone exercise bridges the gap between theoretical derivation and practical application. True mastery of finite element formulations comes from their successful implementation, and this problem challenges you to translate the mathematical recipes for the $B$ matrix into a verifiable computational algorithm. By coding and then testing your implementation against fundamental principles like linear field reproduction and rigid body motion, you will solidify your understanding in the most hands-on way possible [@problem_id:2601354].", "problem": "You are to implement and verify the strain-displacement matrix (commonly called the B matrix) for two-dimensional isoparametric elements within the Finite Element Method (FEM). The derivation must begin strictly from the following foundations: (i) the small-strain kinematics in two dimensions, (ii) the interpolation of displacements by element shape functions, and (iii) the chain rule with an isoparametric mapping. No other shortcuts or pre-derived B matrices may be used.\n\nFoundational base:\n- The small (infinitesimal) strain tensor is defined by $\\varepsilon = \\tfrac{1}{2}\\left(\\nabla \\mathbf{u} + \\nabla \\mathbf{u}^{T}\\right)$ for a displacement field $\\mathbf{u}(x,y) = [u(x,y), v(x,y)]^{T}$. In engineering strain vector form, use $\\boldsymbol{\\varepsilon} = [\\varepsilon_{xx}, \\varepsilon_{yy}, \\gamma_{xy}]^{T}$ where $\\varepsilon_{xx} = \\partial u / \\partial x$, $\\varepsilon_{yy} = \\partial v / \\partial y$, and $\\gamma_{xy} = \\partial u / \\partial y + \\partial v / \\partial x$.\n- Within an element, approximate $\\mathbf{u}(x,y)$ by shape functions $N_{i}$ and nodal displacement values $\\mathbf{d}_{i} = [u_{i}, v_{i}]^{T}$ via $\\mathbf{u}(x,y) = \\sum_{i=1}^{n} N_{i}(x,y)\\,\\mathbf{d}_{i}$. Stack the element nodal displacement vector as $\\mathbf{d}_{e} = [u_{1}, v_{1}, u_{2}, v_{2}, \\dots]^{T}$ so that, by definition, there exists a matrix $\\mathbf{B}(x,y)$ with $\\boldsymbol{\\varepsilon}(x,y) = \\mathbf{B}(x,y)\\,\\mathbf{d}_{e}$.\n- For isoparametric elements with natural coordinates $(\\xi,\\eta)$ and physical coordinates $(x,y)$, use the chain rule to relate derivatives with respect to $(x,y)$ to those with respect to $(\\xi,\\eta)$ via the Jacobian $\\mathbf{J} = \\begin{bmatrix} \\partial x / \\partial \\xi & \\partial y / \\partial \\xi \\\\ \\partial x / \\partial \\eta & \\partial y / \\partial \\eta \\end{bmatrix}$.\n\nElement families and their shape functions:\n- Four-node bilinear quadrilateral (Q4) on the reference square $(\\xi,\\eta)\\in[-1,1]\\times[-1,1]$ with nodes ordered counter-clockwise as $1:(-1,-1)$, $2:(+1,-1)$, $3:(+1,+1)$, $4:(-1,+1)$ and shape functions\n  $$\n  N_{1}(\\xi,\\eta)=\\tfrac{1}{4}(1-\\xi)(1-\\eta),\\quad\n  N_{2}(\\xi,\\eta)=\\tfrac{1}{4}(1+\\xi)(1-\\eta),\\quad\n  N_{3}(\\xi,\\eta)=\\tfrac{1}{4}(1+\\xi)(1+\\eta),\\quad\n  N_{4}(\\xi,\\eta)=\\tfrac{1}{4}(1-\\xi)(1+\\eta).\n  $$\n  The mapping to physical coordinates uses the same $N_{i}$ with nodal coordinates $(x_{i},y_{i})$.\n- Three-node linear triangle (TRI3) with physical nodal coordinates $(x_{1},y_{1})$, $(x_{2},y_{2})$, $(x_{3},y_{3})$ and linear shape functions $N_{1}(x,y)$, $N_{2}(x,y)$, $N_{3}(x,y)$ that form a partition of unity and reproduce linear fields over the triangle.\n\nTasks:\n1. Derive and implement the algorithm to assemble $\\mathbf{B}$ for Q4 at any $(\\xi,\\eta)$ by:\n   - Computing $\\partial N_{i}/\\partial \\xi$ and $\\partial N_{i}/\\partial \\eta$,\n   - Forming the Jacobian $\\mathbf{J}$ from nodal coordinates $(x_{i},y_{i})$ and inverting it to obtain $\\partial N_{i}/\\partial x$ and $\\partial N_{i}/\\partial y$,\n   - Assembling $\\mathbf{B}$ so that $\\boldsymbol{\\varepsilon} = \\mathbf{B}\\,\\mathbf{d}_{e}$ in the engineering strain vector ordering.\n2. Derive and implement the algorithm to assemble $\\mathbf{B}$ for TRI3 (which is constant over the element) directly from nodal coordinates $(x_{i},y_{i})$ using the definitions above and the fact that $N_{i}(x,y)$ are linear in $(x,y)$.\n3. Verification by linear field reproduction: for a linear displacement field\n   $$\n   u(x,y) = a_{0} + a_{1}\\,x + a_{2}\\,y,\\quad\n   v(x,y) = b_{0} + b_{1}\\,x + b_{2}\\,y,\n   $$\n   the exact strains are $\\varepsilon_{xx} = a_{1}$, $\\varepsilon_{yy} = b_{2}$, $\\gamma_{xy} = a_{2} + b_{1}$. For each test case below, construct $\\mathbf{d}_{e}$ by evaluating $(u,v)$ at the element nodes and verify that $\\mathbf{B}\\,\\mathbf{d}_{e}$ matches the exact strain at the specified evaluation point. Use a tolerance of $10^{-10}$ on the Euclidean norm of the difference.\n4. Verification by rigid body modes: for rigid translation and infinitesimal rotation about the origin,\n   $$\n   u(x,y) = c_{x} - \\omega\\,y,\\quad v(x,y) = c_{y} + \\omega\\,x,\n   $$\n   the exact engineering strain vector is identically zero. Verify that $\\mathbf{B}\\,\\mathbf{d}_{e}$ is approximately zero (tolerance $10^{-10}$).\n5. Verification of partition of unity gradients for Q4: verify that $\\sum_{i} \\partial N_{i}/\\partial x = 0$ and $\\sum_{i} \\partial N_{i}/\\partial y = 0$ at the specified evaluation point (tolerance $10^{-12}$).\n\nTest suite:\n- Test $1$ (Q4, interior point, linear reproduction):\n  - Nodal coordinates $(x_{i},y_{i})$ for $i=1,2,3,4$:\n    $$\n    (x_{1},y_{1})=(0,0),\\quad (x_{2},y_{2})=(2,0.2),\\quad (x_{3},y_{3})=(2.2,1.8),\\quad (x_{4},y_{4})=(-0.1,1.7).\n    $$\n  - Evaluation point $(\\xi,\\eta)=(0.3,-0.7)$.\n  - Displacement field coefficients:\n    $$\n    a_{0}=1.2,\\ a_{1}=0.5,\\ a_{2}=-0.3;\\quad b_{0}=-0.8,\\ b_{1}=0.4,\\ b_{2}=0.6.\n    $$\n  - Exact strain:\n    $$\n    \\varepsilon_{xx}=0.5,\\ \\varepsilon_{yy}=0.6,\\ \\gamma_{xy}=0.1.\n    $$\n  - Output a boolean indicating whether the norm of the difference is below $10^{-10}$.\n- Test $2$ (Q4, corner point, linear reproduction):\n  - Same nodal coordinates as Test $1$.\n  - Evaluation point $(\\xi,\\eta)=(-1,-1)$.\n  - Displacement field coefficients:\n    $$\n    a_{0}=-0.2,\\ a_{1}=0.9,\\ a_{2}=0.1;\\quad b_{0}=0.3,\\ b_{1}=-0.7,\\ b_{2}=0.2.\n    $$\n  - Exact strain:\n    $$\n    \\varepsilon_{xx}=0.9,\\ \\varepsilon_{yy}=0.2,\\ \\gamma_{xy}=-0.6.\n    $$\n  - Output a boolean as above.\n- Test $3$ (TRI3, linear reproduction, $\\mathbf{B}$ constant):\n  - Nodal coordinates $(x_{1},y_{1})=(0,0)$, $(x_{2},y_{2})=(2,0.5)$, $(x_{3},y_{3})=(0.3,1.7)$.\n  - Displacement field coefficients:\n    $$\n    a_{0}=0.0,\\ a_{1}=0.2,\\ a_{2}=-0.4;\\quad b_{0}=1.1,\\ b_{1}=-0.3,\\ b_{2}=0.8.\n    $$\n  - Exact strain:\n    $$\n    \\varepsilon_{xx}=0.2,\\ \\varepsilon_{yy}=0.8,\\ \\gamma_{xy}=-0.7.\n    $$\n  - Output a boolean using any evaluation point inside the triangle (since $\\mathbf{B}$ is constant, the choice is immaterial).\n- Test $4$ (Q4, rigid body modes, zero strain):\n  - Use the same Q4 nodal coordinates as Test $1$.\n  - Rigid body parameters:\n    $$\n    c_{x}=0.5,\\ c_{y}=-1.2,\\ \\omega=0.05.\n    $$\n  - Evaluation point $(\\xi,\\eta)=(0.0,0.0)$.\n  - Output a boolean indicating whether $\\|\\mathbf{B}\\,\\mathbf{d}_{e}\\|_{2} \\le 10^{-10}$.\n- Test $5$ (Q4, partition of unity gradients):\n  - Use the same Q4 nodal coordinates as Test $1$.\n  - Evaluation point $(\\xi,\\eta)=(0.1, -0.2)$.\n  - Output a boolean indicating whether both $\\left|\\sum_{i=1}^{4}\\partial N_{i}/\\partial x\\right| \\le 10^{-12}$ and $\\left|\\sum_{i=1}^{4}\\partial N_{i}/\\partial y\\right| \\le 10^{-12}$ hold.\n\nFinal output format:\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets (e.g., $[result_{1},result_{2},result_{3},result_{4},result_{5}]$), where each $result_{k}$ is a boolean corresponding to Test $k$ in order.\n- No units are required, as this task is purely mathematical.", "solution": "The problem presented is a standard, well-posed exercise in the computational implementation of the finite element method. It is scientifically sound, internally consistent, and contains all necessary information for its resolution. We shall proceed with the derivation and verification as stipulated.\n\nThe fundamental relationship in linear elastostatics between the strain tensor and the nodal displacement vector within a single finite element is given by:\n$$\n\\boldsymbol{\\varepsilon}(x,y) = \\mathbf{B}(x,y)\\,\\mathbf{d}_{e}\n$$\nHere, $\\boldsymbol{\\varepsilon}$ is the engineering strain vector, $\\mathbf{d}_{e}$ is the vector of nodal displacements for the element, and $\\mathbf{B}$ is the strain-displacement matrix. Our task is to derive and implement the matrix $\\mathbf{B}$ for two-dimensional quadrilateral and triangular elements.\n\nFirst, we establish the general formulation. The engineering strain vector is defined from the displacement field $\\mathbf{u}(x,y) = [u(x,y), v(x,y)]^{T}$ as:\n$$\n\\boldsymbol{\\varepsilon} = \\begin{Bmatrix} \\varepsilon_{xx} \\\\ \\varepsilon_{yy} \\\\ \\gamma_{xy} \\end{Bmatrix} = \\begin{Bmatrix} \\partial u / \\partial x \\\\ \\partial v / \\partial y \\\\ \\partial u / \\partial y + \\partial v / \\partial x \\end{Bmatrix}\n$$\nThis can be expressed using a differential operator matrix $\\mathbf{L}$:\n$$\n\\boldsymbol{\\varepsilon} = \\begin{bmatrix} \\partial/\\partial x & 0 \\\\ 0 & \\partial/\\partial y \\\\ \\partial/\\partial y & \\partial/\\partial x \\end{bmatrix} \\begin{Bmatrix} u \\\\ v \\end{Bmatrix} = \\mathbf{L}\\,\\mathbf{u}\n$$\nWithin a finite element with $n$ nodes, the displacement field is interpolated from the nodal displacements $\\mathbf{d}_i = [u_i, v_i]^T$ using shape functions $N_i$:\n$$\nu = \\sum_{i=1}^{n} N_i u_i \\quad \\text{and} \\quad v = \\sum_{i=1}^{n} N_i v_i\n$$\nThis interpolation can be written in matrix form as $\\mathbf{u} = \\mathbf{N}\\mathbf{d}_e$, where $\\mathbf{d}_e = [u_1, v_1, \\dots, u_n, v_n]^T$ and $\\mathbf{N}$ is the matrix of shape functions:\n$$\n\\mathbf{N} = \\begin{bmatrix} N_1 & 0 & N_2 & 0 & \\dots & N_n & 0 \\\\ 0 & N_1 & 0 & N_2 & \\dots & 0 & N_n \\end{bmatrix}\n$$\nSubstituting the interpolated displacement field into the strain definition yields:\n$$\n\\boldsymbol{\\varepsilon} = \\mathbf{L}(\\mathbf{N}\\mathbf{d}_e) = (\\mathbf{L}\\mathbf{N})\\mathbf{d}_e\n$$\nBy comparing this with the definition $\\boldsymbol{\\varepsilon} = \\mathbf{B}\\mathbf{d}_e$, we identify the strain-displacement matrix as $\\mathbf{B} = \\mathbf{L}\\mathbf{N}$. Performing the matrix multiplication gives:\n$$\n\\mathbf{B} = \\begin{bmatrix} \\frac{\\partial N_1}{\\partial x} & 0 & \\frac{\\partial N_2}{\\partial x} & 0 & \\dots & \\frac{\\partial N_n}{\\partial x} & 0 \\\\ 0 & \\frac{\\partial N_1}{\\partial y} & 0 & \\frac{\\partial N_2}{\\partial y} & \\dots & 0 & \\frac{\\partial N_n}{\\partial y} \\\\ \\frac{\\partial N_1}{\\partial y} & \\frac{\\partial N_1}{\\partial x} & \\frac{\\partial N_2}{\\partial y} & \\frac{\\partial N_2}{\\partial x} & \\dots & \\frac{\\partial N_n}{\\partial y} & \\frac{\\partial N_n}{\\partial x} \\end{bmatrix}\n$$\nThis general form can be seen as a concatenation of nodal sub-matrices $\\mathbf{B}_i$ of size $3 \\times 2$:\n$$\n\\mathbf{B} = \\begin{bmatrix} \\mathbf{B}_1 & \\mathbf{B}_2 & \\dots & \\mathbf{B}_n \\end{bmatrix}, \\quad \\text{where} \\quad \\mathbf{B}_i = \\begin{bmatrix} \\partial N_i/\\partial x & 0 \\\\ 0 & \\partial N_i/\\partial y \\\\ \\partial N_i/\\partial y & \\partial N_i/\\partial x \\end{bmatrix}\n$$\n\nFor isoparametric elements, the shape functions $N_i$ are defined in a reference (natural) coordinate system $(\\xi,\\eta)$, while the strain definition requires derivatives with respect to the physical coordinates $(x,y)$. The chain rule of differentiation connects these derivatives:\n$$\n\\begin{Bmatrix} \\partial f / \\partial \\xi \\\\ \\partial f / \\partial \\eta \\end{Bmatrix} = \\begin{bmatrix} \\partial x / \\partial \\xi & \\partial y / \\partial \\xi \\\\ \\partial x / \\partial \\eta & \\partial y / \\partial \\eta \\end{bmatrix} \\begin{Bmatrix} \\partial f / \\partial x \\\\ \\partial f / \\partial y \\end{Bmatrix} = \\mathbf{J} \\begin{Bmatrix} \\partial f / \\partial x \\\\ \\partial f / \\partial y \\end{Bmatrix}\n$$\nThe matrix $\\mathbf{J}$ is the Jacobian of the coordinate transformation. In the isoparametric formulation, the physical coordinates are interpolated using the same shape functions as the displacements: $x(\\xi,\\eta) = \\sum_{i=1}^{n} N_i(\\xi,\\eta)x_i$ and $y(\\xi,\\eta) = \\sum_{i=1}^{n} N_i(\\xi,\\eta)y_i$. The components of the Jacobian are therefore:\n$$\nJ_{11} = \\frac{\\partial x}{\\partial \\xi} = \\sum_{i=1}^{n} \\frac{\\partial N_i}{\\partial \\xi} x_i, \\quad J_{12} = \\frac{\\partial y}{\\partial \\xi} = \\sum_{i=1}^{n} \\frac{\\partial N_i}{\\partial \\xi} y_i\n$$\n$$\nJ_{21} = \\frac{\\partial x}{\\partial \\eta} = \\sum_{i=1}^{n} \\frac{\\partial N_i}{\\partial \\eta} x_i, \\quad J_{22} = \\frac{\\partial y}{\\partial \\eta} = \\sum_{i=1}^{n} \\frac{\\partial N_i}{\\partial \\eta} y_i\n$$\nTo find the required physical derivatives of the shape functions, we must invert the chain rule relationship:\n$$\n\\begin{Bmatrix} \\partial N_i / \\partial x \\\\ \\partial N_i / \\partial y \\end{Bmatrix} = \\mathbf{J}^{-1} \\begin{Bmatrix} \\partial N_i / \\partial \\xi \\\\ \\partial N_i / \\partial \\eta \\end{Bmatrix}\n$$\n\n**Task 1: Four-Node Bilinear Quadrilateral (Q4) Element**\nFor the Q4 element, $n=4$. The derivatives of the shape functions with respect to the natural coordinates $(\\xi, \\eta)$ are:\n$$\n\\frac{\\partial N_1}{\\partial\\xi} = -\\frac{1}{4}(1-\\eta), \\quad \\frac{\\partial N_2}{\\partial\\xi} = \\frac{1}{4}(1-\\eta), \\quad \\frac{\\partial N_3}{\\partial\\xi} = \\frac{1}{4}(1+\\eta), \\quad \\frac{\\partial N_4}{\\partial\\xi} = -\\frac{1}{4}(1+\\eta)\n$$\n$$\n\\frac{\\partial N_1}{\\partial\\eta} = -\\frac{1}{4}(1-\\xi), \\quad \\frac{\\partial N_2}{\\partial\\eta} = -\\frac{1}{4}(1+\\xi), \\quad \\frac{\\partial N_3}{\\partial\\eta} = \\frac{1}{4}(1+\\xi), \\quad \\frac{\\partial N_4}{\\partial\\eta} = \\frac{1}{4}(1-\\xi)\n$$\nThe algorithm for computing $\\mathbf{B}$ at a given point $(\\xi, \\eta)$ is as follows:\n1.  Evaluate the $4 \\times 2$ matrix of shape function derivatives with respect to natural coordinates, where the $i$-th row is $[\\partial N_i/\\partial\\xi, \\partial N_i/\\partial\\eta]$.\n2.  Compute the $2 \\times 2$ Jacobian matrix $\\mathbf{J}$ using the nodal coordinates and the derivatives from step 1.\n3.  Compute the inverse of the Jacobian, $\\mathbf{J}^{-1}$.\n4.  For each node $i=1, \\dots, 4$, compute the derivatives with respect to physical coordinates, $[\\partial N_i/\\partial x, \\partial N_i/\\partial y]$, by multiplying $\\mathbf{J}^{-1}$ by the vector of natural coordinate derivatives for node $i$.\n5.  Assemble the $3 \\times 8$ matrix $\\mathbf{B}$ from the physical derivatives obtained in step 4.\n\n**Task 2: Three-Node Linear Triangle (TRI3) Element**\nFor the TRI3 element, the shape functions $N_i(x,y)$ are linear in the physical coordinates. Consequently, their first derivatives, $\\partial N_i/\\partial x$ and $\\partial N_i/\\partial y$, are constant throughout the element. The matrix $\\mathbf{B}$ is therefore also constant. These derivatives can be computed directly from the nodal coordinates $(x_i, y_i)$. Let the area of the triangle be $A$. The value $2A$ is given by the determinant:\n$$\n2A = \\det \\begin{bmatrix} x_1 & y_1 & 1 \\\\ x_2 & y_2 & 1 \\\\ x_3 & y_3 & 1 \\end{bmatrix} = x_1(y_2 - y_3) + x_2(y_3 - y_1) + x_3(y_1 - y_2)\n$$\nThe constant derivatives are given by the formula:\n$$\n\\frac{\\partial N_1}{\\partial x} = \\frac{y_2 - y_3}{2A}, \\quad \\frac{\\partial N_2}{\\partial x} = \\frac{y_3 - y_1}{2A}, \\quad \\frac{\\partial N_3}{\\partial x} = \\frac{y_1 - y_2}{2A}\n$$\n$$\n\\frac{\\partial N_1}{\\partial y} = \\frac{x_3 - x_2}{2A}, \\quad \\frac{\\partial N_2}{\\partial y} = \\frac{x_1 - x_3}{2A}, \\quad \\frac{\\partial N_3}{\\partial y} = \\frac{x_2 - x_1}{2A}\n$$\nThese values are then used to assemble the constant $3 \\times 6$ matrix $\\mathbf{B}$.\n\n**Tasks 3, 4, 5: Verification**\nThe verification tasks test fundamental properties that any valid finite element formulation must satisfy.\n- **Linear Field Reproduction:** Isoparametric elements must be able to exactly represent a constant strain state. If the applied displacement field is a linear function of $(x,y)$, the resulting strain is constant. The FEM approximation $\\boldsymbol{\\varepsilon} = \\mathbf{B}\\mathbf{d}_e$ must yield this exact constant strain vector. This is a direct consequence of the fact that the shape functions form a partition of unity and can reproduce linear fields.\n- **Rigid Body Modes:** A displacement field corresponding to a rigid body translation and infinitesimal rotation must produce zero strain. This is essential for the element to not generate spurious internal stresses under rigid motion.\n- **Partition of Unity Gradients:** The property that shape functions sum to one, $\\sum_{i=1}^{n} N_i = 1$, implies that the sum of their gradients must be zero. In the natural coordinate system, $\\sum_{i} \\partial N_i/\\partial \\xi = 0$ and $\\sum_{i} \\partial N_i/\\partial \\eta = 0$. Applying the chain rule transformation, we find this property holds for physical coordinates as well:\n  $$\n  \\begin{Bmatrix} \\sum_{i} \\partial N_i / \\partial x \\\\ \\sum_{i} \\partial N_i / \\partial y \\end{Bmatrix} = \\mathbf{J}^{-1} \\begin{Bmatrix} \\sum_{i} \\partial N_i / \\partial \\xi \\\\ \\sum_{i} \\partial N_i / \\partial \\eta \\end{Bmatrix} = \\mathbf{J}^{-1} \\begin{Bmatrix} 0 \\\\ 0 \\end{Bmatrix} = \\begin{Bmatrix} 0 \\\\ 0 \\end{Bmatrix}\n  $$\nThis completes the theoretical preamble. The implementation will follow these derivations precisely.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef q4_b_matrix(xi, eta, nodes):\n    \"\"\"\n    Computes the strain-displacement matrix B for a Q4 element.\n\n    Args:\n        xi (float): Natural coordinate xi.\n        eta (float): Natural coordinate eta.\n        nodes (np.ndarray): 4x2 array of nodal coordinates (x, y).\n\n    Returns:\n        tuple[np.ndarray, np.ndarray]: A tuple containing:\n            - The 3x8 strain-displacement matrix B.\n            - The 2x4 matrix of shape function derivatives w.r.t. (x, y).\n    \"\"\"\n    if nodes.shape != (4, 2):\n        raise ValueError(\"nodes must be a 4x2 array.\")\n\n    # Derivatives of shape functions w.r.t. natural coordinates (xi, eta)\n    # grad_nat is a 2x4 matrix: [[dN1/dxi, dN2/dxi, ...], [dN1/deta, dN2/deta, ...]]\n    grad_nat = 0.25 * np.array([\n        [-(1 - eta), (1 - eta), (1 + eta), -(1 + eta)],\n        [-(1 - xi), -(1 + xi), (1 + xi), (1 - xi)]\n    ])\n\n    # Jacobian matrix: J = grad_nat @ nodes\n    # J[0,0] = sum(dNi/dxi * xi), J[0,1] = sum(dNi/dxi * yi)\n    # J[1,0] = sum(dNi/deta * xi), J[1,1] = sum(dNi/deta * yi)\n    J = grad_nat @ nodes\n    det_J = np.linalg.det(J)\n    if np.isclose(det_J, 0):\n        raise np.linalg.LinAlgError(\"Jacobian matrix is singular.\")\n    J_inv = np.linalg.inv(J)\n\n    # Derivatives of shape functions w.r.t. physical coordinates (x, y)\n    # grad_phys = J_inv @ grad_nat\n    # grad_phys is a 2x4 matrix: [[dN1/dx, dN2/dx, ...], [dN1/dy, dN2/dy, ...]]\n    grad_phys = J_inv @ grad_nat\n\n    # Assemble the B matrix (3x8)\n    B = np.zeros((3, 8))\n    for i in range(4):\n        # B_i = [[dNi/dx, 0], [0, dNi/dy], [dNi/dy, dNi/dx]]\n        B[0, 2 * i]     = grad_phys[0, i]  # Strain_xx contribution from u_i\n        B[1, 2 * i + 1] = grad_phys[1, i]  # Strain_yy contribution from v_i\n        B[2, 2 * i]     = grad_phys[1, i]  # Strain_xy contribution from u_i\n        B[2, 2 * i + 1] = grad_phys[0, i]  # Strain_xy contribution from v_i\n\n    return B, grad_phys\n\ndef tri3_b_matrix(nodes):\n    \"\"\"\n    Computes the constant strain-displacement matrix B for a TRI3 element.\n\n    Args:\n        nodes (np.ndarray): 3x2 array of nodal coordinates (x, y).\n\n    Returns:\n        np.ndarray: The 3x6 constant strain-displacement matrix B.\n    \"\"\"\n    if nodes.shape != (3, 2):\n        raise ValueError(\"nodes must be a 3x2 array.\")\n\n    x1, y1 = nodes[0]\n    x2, y2 = nodes[1]\n    x3, y3 = nodes[2]\n    \n    # 2 * Area of the triangle\n    two_A = x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)\n    if np.isclose(two_A, 0):\n        raise ValueError(\"Triangle area is zero (collinear nodes).\")\n\n    # Derivatives of shape functions w.r.t. physical coordinates (x, y)\n    # These are constant for a linear triangle.\n    dN1_dx = (y2 - y3) / two_A\n    dN2_dx = (y3 - y1) / two_A\n    dN3_dx = (y1 - y2) / two_A\n    \n    dN1_dy = (x3 - x2) / two_A\n    dN2_dy = (x1 - x3) / two_A\n    dN3_dy = (x2 - x1) / two_A\n\n    # Assemble the B matrix (3x6)\n    B = np.array([\n        [dN1_dx, 0,      dN2_dx, 0,      dN3_dx, 0     ],\n        [0,      dN1_dy, 0,      dN2_dy, 0,      dN3_dy],\n        [dN1_dy, dN1_dx, dN2_dy, dN2_dx, dN3_dy, dN3_dx]\n    ])\n    \n    return B\n\ndef solve():\n    \"\"\"\n    Main function to run all verification tests.\n    \"\"\"\n    results = []\n\n    # Common data for Q4 tests\n    q4_nodes = np.array([\n        [0.0, 0.0],\n        [2.0, 0.2],\n        [2.2, 1.8],\n        [-0.1, 1.7]\n    ])\n\n    # --- Test 1 (Q4, interior point, linear reproduction) ---\n    xi, eta = 0.3, -0.7\n    a0, a1, a2 = 1.2, 0.5, -0.3\n    b0, b1, b2 = -0.8, 0.4, 0.6\n    exact_strain_1 = np.array([a1, b2, a2 + b1])\n    \n    B1, _ = q4_b_matrix(xi, eta, q4_nodes)\n    d_e1 = np.zeros(8)\n    for i in range(4):\n        x, y = q4_nodes[i]\n        d_e1[2 * i] = a0 + a1 * x + a2 * y\n        d_e1[2 * i + 1] = b0 + b1 * x + b2 * y\n    \n    num_strain_1 = B1 @ d_e1\n    results.append(np.linalg.norm(num_strain_1 - exact_strain_1) < 1e-10)\n\n    # --- Test 2 (Q4, corner point, linear reproduction) ---\n    xi, eta = -1.0, -1.0\n    a0, a1, a2 = -0.2, 0.9, 0.1\n    b0, b1, b2 = 0.3, -0.7, 0.2\n    exact_strain_2 = np.array([a1, b2, a2 + b1])\n\n    B2, _ = q4_b_matrix(xi, eta, q4_nodes)\n    d_e2 = np.zeros(8)\n    for i in range(4):\n        x, y = q4_nodes[i]\n        d_e2[2 * i] = a0 + a1 * x + a2 * y\n        d_e2[2 * i + 1] = b0 + b1 * x + b2 * y\n\n    num_strain_2 = B2 @ d_e2\n    results.append(np.linalg.norm(num_strain_2 - exact_strain_2) < 1e-10)\n\n    # --- Test 3 (TRI3, linear reproduction) ---\n    tri3_nodes = np.array([\n        [0.0, 0.0],\n        [2.0, 0.5],\n        [0.3, 1.7]\n    ])\n    a0, a1, a2 = 0.0, 0.2, -0.4\n    b0, b1, b2 = 1.1, -0.3, 0.8\n    exact_strain_3 = np.array([a1, b2, a2 + b1])\n    \n    B3 = tri3_b_matrix(tri3_nodes)\n    d_e3 = np.zeros(6)\n    for i in range(3):\n        x, y = tri3_nodes[i]\n        d_e3[2 * i] = a0 + a1 * x + a2 * y\n        d_e3[2 * i + 1] = b0 + b1 * x + b2 * y\n    \n    num_strain_3 = B3 @ d_e3\n    results.append(np.linalg.norm(num_strain_3 - exact_strain_3) < 1e-10)\n\n    # --- Test 4 (Q4, rigid body modes) ---\n    cx, cy, omega = 0.5, -1.2, 0.05\n    xi, eta = 0.0, 0.0\n    \n    B4, _ = q4_b_matrix(xi, eta, q4_nodes)\n    d_e4 = np.zeros(8)\n    for i in range(4):\n        x, y = q4_nodes[i]\n        d_e4[2 * i] = cx - omega * y\n        d_e4[2 * i + 1] = cy + omega * x\n        \n    num_strain_4 = B4 @ d_e4\n    results.append(np.linalg.norm(num_strain_4) <= 1e-10)\n    \n    # --- Test 5 (Q4, partition of unity gradients) ---\n    xi, eta = 0.1, -0.2\n    _, grad_phys_5 = q4_b_matrix(xi, eta, q4_nodes)\n    sum_dN_dx = np.sum(grad_phys_5[0, :])\n    sum_dN_dy = np.sum(grad_phys_5[1, :])\n    \n    test5_passed = abs(sum_dN_dx) <= 1e-12 and abs(sum_dN_dy) <= 1e-12\n    results.append(test5_passed)\n\n    # Final print statement\n    result_str = \",\".join(map(lambda b: str(b).lower(), results))\n    print(f\"[{result_str}]\")\n\nsolve()\n```", "id": "2601354"}]}