{"hands_on_practices": [{"introduction": "A crucial step in mastering discontinuous Galerkin methods is understanding how the theoretical bilinear form translates into a solvable system of linear equations. This first practice [@problem_id:2596888] challenges you to analyze the structure of the global stiffness matrix for the Symmetric Interior Penalty Galerkin (SIPG) method. By examining its properties, you will gain vital insights into the role of the penalty parameter on the method's stability and conditioning.", "problem": "Consider the Poisson Partial Differential Equation (PDE) $-\\Delta u = f$ on a bounded Lipschitz domain $\\Omega \\subset \\mathbb{R}^d$ with homogeneous Dirichlet boundary condition $u=0$ on $\\partial\\Omega$. Let $\\mathcal{T}_h$ be a shape-regular mesh of $\\Omega$ into simplices or parallelepipeds, and let $V_h$ be a discontinuous finite element space of piecewise polynomials on $\\mathcal{T}_h$. Denote by $\\mathcal{E}_h^{\\mathrm{int}}$ the set of interior faces and by $\\mathcal{E}_h^{\\partial}$ the set of boundary faces. For an interior face $e \\in \\mathcal{E}_h^{\\mathrm{int}}$ shared by elements $K$ and $L$, let $\\mathbf{n}_K$ and $\\mathbf{n}_L$ be the unit outward normals on $e$ relative to $K$ and $L$, respectively. For a scalar field $w$, define the jump and average on $e$ by $[w] := w|_K \\,\\mathbf{n}_K + w|_L \\,\\mathbf{n}_L$ and $\\{\\nabla w\\} := \\tfrac{1}{2}\\left(\\nabla w|_K + \\nabla w|_L\\right)$. On $e \\in \\mathcal{E}_h^{\\partial}$, define $[w] := w \\,\\mathbf{n}$ and $\\{\\nabla w\\} := \\nabla w$, where $\\mathbf{n}$ is the outward unit normal to $\\partial\\Omega$. Consider the symmetric interior penalty Galerkin (SIPG) discretization within the discontinuous Galerkin (DG) framework, with a facewise penalty parameter $\\eta_e > 0$ and characteristic face size $h_e$. The discrete solution $u_h \\in V_h$ is defined by a symmetric bilinear form assembled over elements and faces and a linear functional of $f$.\n\nWhich of the following statements correctly describe the structure of the assembled global matrix and the impact of the penalty parameter $\\eta_e$ on symmetry and conditioning?\n\nA. The assembled global stiffness matrix is block-symmetric and sparse, with nonzero couplings only between degrees of freedom associated with elements that share a face (including boundary faces). Its blocks are the sum of element-wise volume contributions $\\int_K \\nabla \\varphi_i \\cdot \\nabla \\varphi_j \\, \\mathrm{d}x$ and face contributions coming from two types of terms: symmetric consistency terms that couple traces across faces and interior penalty terms of the form $\\int_e (\\eta_e/h_e) \\, \\varphi_i \\, \\varphi_j \\, \\mathrm{d}s$ acting on jumps. Increasing $\\eta_e$ leaves symmetry intact but worsens spectral conditioning, with the largest eigenvalues growing proportionally to $\\eta_e/h_e$, whereas taking $\\eta_e$ too small can destroy coercivity and positive definiteness.\n\nB. The SIPG global matrix is generally non-symmetric unless $\\eta_e = 1$ on every face; symmetry is recovered only by tuning the penalty parameter to $\\eta_e = 1$.\n\nC. Choosing very large $\\eta_e$ always improves conditioning because it increases diagonal dominance; as $\\eta_e \\to \\infty$ the condition number decreases and the system becomes easier to solve.\n\nD. To maintain coercivity, the penalty must scale like $\\eta_e \\, h_e$ on each face rather than $\\eta_e/h_e$; using $\\eta_e/h_e$ makes the matrix singular as $h_e \\to 0$ regardless of the magnitude of $\\eta_e$.", "solution": "The problem asks for an assessment of the properties of the global stiffness matrix derived from a symmetric interior penalty Galerkin (SIPG) discretization of the Poisson equation. The PDE is $-\\Delta u = f$ on a domain $\\Omega$, with $u=0$ on the boundary $\\partial\\Omega$.\n\nThe SIPG method seeks a solution $u_h$ in a discontinuous finite element space $V_h$, defined by the variational problem $a_h(u_h, v_h) = \\ell(v_h)$ for all $v_h \\in V_h$. Here, $\\ell(v_h) = \\int_\\Omega f v_h \\, \\mathrm{d}x$. The bilinear form $a_h(\\cdot, \\cdot)$ is central to the question. Using the definitions provided, it is given by:\n$$\na_h(u_h, v_h) = \\sum_{K \\in \\mathcal{T}_h} \\int_K \\nabla u_h \\cdot \\nabla v_h \\, d\\mathbf{x} - \\sum_{e \\in \\mathcal{E}_h} \\int_e \\left( \\{\\nabla u_h\\} \\cdot [v_h] + \\{\\nabla v_h\\} \\cdot [u_h] \\right) dS + \\sum_{e \\in \\mathcal{E}_h} \\int_e \\frac{\\eta_e}{h_e} [u_h] \\cdot [v_h] dS\n$$\nwhere $\\mathcal{E}_h$ is the set of all faces, interior and boundary. The global stiffness matrix $A$ is assembled from this bilinear form, with entries $A_{ij} = a_h(\\varphi_j, \\varphi_i)$, where $\\{\\varphi_i\\}$ is the basis for $V_h$.\n\nLet us analyze the properties of this matrix and evaluate each option.\n\n**Matrix Structure: Sparsity and Symmetry**\nThe basis functions $\\varphi_i$ of a discontinuous Galerkin space $V_h$ have local support, typically confined to a single element $K_i$.\n1.  The volume integral $\\sum_K \\int_K \\nabla \\varphi_i \\cdot \\nabla \\varphi_j \\, d\\mathbf{x}$ is non-zero only if the supports of $\\varphi_i$ and $\\varphi_j$ are the same element, i.e., $K_i = K_j$. This term contributes to the diagonal blocks of the element-wise block-structured global matrix.\n2.  The face integrals are taken over the skeleton of the mesh, $\\mathcal{E}_h$. A face term involving $\\varphi_i$ and $\\varphi_j$ is non-zero only if both basis functions have non-zero trace on that face. This occurs if $K_i = K_j$ (contributing to diagonal blocks) or if elements $K_i$ and $K_j$ are immediate neighbors, sharing a common face (contributing to off-diagonal blocks).\nConsequently, the matrix $A$ has non-zero entries only for pairs of degrees of freedom belonging to the same or adjacent elements. This makes the matrix sparse.\n\nThe name of the method, \"Symmetric Interior Penalty Galerkin,\" already indicates the symmetry of the bilinear form. Let's verify this.\n- The term $\\sum_K \\int_K \\nabla u_h \\cdot \\nabla v_h \\, d\\mathbf{x}$ is clearly symmetric in $u_h$ and $v_h$.\n- The penalty term $\\sum_e \\int_e \\frac{\\eta_e}{h_e} [u_h] \\cdot [v_h] \\, dS$ is symmetric because the dot product is commutative.\n- The consistency term $-\\sum_e \\int_e ( \\{\\nabla u_h\\} \\cdot [v_h] + \\{\\nabla v_h\\} \\cdot [u_h] ) dS$ is structured as $C(u_h, v_h) + C(v_h, u_h)$, which is symmetric.\nThus, $a_h(u_h, v_h) = a_h(v_h, u_h)$ for any choice of $u_h, v_h \\in V_h$. This implies that the global stiffness matrix $A$ is symmetric. This symmetry is inherent to the formulation and does not depend on the value of the penalty parameter $\\eta_e$.\n\n**Role of the Penalty Parameter $\\eta_e$**\n1.  **Coercivity and Positive Definiteness**: Coercivity of the bilinear form, $a_h(v_h, v_h) \\ge C \\|v_h\\|_{DG}^2$ for a suitable norm and a constant $C > 0$, is essential for the unique solvability of the linear system. In SIPG, the consistency terms can be negative. The penalty term, which is positive, must be large enough to dominate these terms. Through the use of trace inequalities, it can be proven that coercivity holds if and only if the penalty parameter $\\eta_e$ is chosen sufficiently large on every face, i.e., $\\eta_e > \\eta_0$ for some constant $\\eta_0 > 0$ that depends on the polynomial degree and mesh shape-regularity, but not on the mesh size $h$. If $\\eta_e$ is too small, coercivity is lost, and the matrix $A$ is not guaranteed to be positive definite and can be singular.\n\n2.  **Spectral Conditioning**: The condition number of matrix $A$ is $\\kappa(A) = \\lambda_{\\max}(A) / \\lambda_{\\min}(A)$.\n    -   The largest eigenvalue, $\\lambda_{\\max}(A)$, is related to the continuity constant of the bilinear form. The penalty term $\\frac{\\eta_e}{h_e}$ introduces a large contribution to the form's magnitude. Standard analysis shows that $\\lambda_{\\max}(A)$ grows proportionally to $\\max_e(\\eta_e/h_e)$.\n    -   The smallest eigenvalue, $\\lambda_{\\min}(A)$, is related to the coercivity constant. For a sufficiently large but fixed $\\eta_e$, $\\lambda_{\\min}(A)$ is bounded below, away from zero.\n    -   Therefore, as $\\eta_e$ increases, $\\lambda_{\\max}(A)$ increases while $\\lambda_{\\min}(A)$ typically stabilizes. This causes the condition number $\\kappa(A)$ to grow, approximately linearly with $\\eta_e$. A very large penalty parameter leads to a very ill-conditioned system, making it numerically difficult to solve.\n\nWe now evaluate the given options based on this analysis.\n\n**A. The assembled global stiffness matrix is block-symmetric and sparse, with nonzero couplings only between degrees of freedom associated with elements that share a face (including boundary faces). Its blocks are the sum of element-wise volume contributions $\\int_K \\nabla \\varphi_i \\cdot \\nabla \\varphi_j \\, \\mathrm{d}x$ and face contributions coming from two types of terms: symmetric consistency terms that couple traces across faces and interior penalty terms of the form $\\int_e (\\eta_e/h_e) \\, \\varphi_i \\, \\varphi_j \\, \\mathrm{d}s$ acting on jumps. Increasing $\\eta_e$ leaves symmetry intact but worsens spectral conditioning, with the largest eigenvalues growing proportionally to $\\eta_e/h_e$, whereas taking $\\eta_e$ too small can destroy coercivity and positive definiteness.**\n\nThis statement provides a comprehensive and accurate description. The matrix is sparse and symmetric (the term \"block-symmetric\" is acceptable in this context, as the global matrix is symmetric). The description of contributions is conceptually correct, although the notation $\\int_e (\\eta_e/h_e) \\, \\varphi_i \\, \\varphi_j \\, \\mathrm{d}s$ is a simplification of the jump-jump term $\\int_e (\\eta_e/h_e) \\, [\\varphi_i] \\cdot [\\varphi_j] \\, \\mathrm{d}s$. The phrase \"acting on jumps\" clarifies the intent. Most importantly, the second part of the statement correctly describes the effects of the penalty parameter $\\eta_e$: symmetry is unaffected by its value, large $\\eta_e$ worsens conditioning, and small $\\eta_e$ risks loss of coercivity.\nVerdict: **Correct**.\n\n**B. The SIPG global matrix is generally non-symmetric unless $\\eta_e = 1$ on every face; symmetry is recovered only by tuning the penalty parameter to $\\eta_e = 1$.**\n\nThis statement is fundamentally incorrect. The bilinear form for SIPG is constructed to be symmetric for any choice of positive penalty parameters $\\eta_e > 0$. The symmetry is a defining characteristic of the method. Other DG variants like NIPG (Non-symmetric IPG) result in non-symmetric matrices, but SIPG is always symmetric.\nVerdict: **Incorrect**.\n\n**C. Choosing very large $\\eta_e$ always improves conditioning because it increases diagonal dominance; as $\\eta_e \\to \\infty$ the condition number decreases and the system becomes easier to solve.**\n\nThis statement is the opposite of the truth. As established, increasing $\\eta_e$ increases the largest eigenvalue of the stiffness matrix, thereby worsening the condition number. While the penalty term does add to the magnitude of certain matrix entries, it does not improve conditioning. The limit $\\eta_e \\to \\infty$ corresponds to a severely ill-conditioned system.\nVerdict: **Incorrect**.\n\n**D. To maintain coercivity, the penalty must scale like $\\eta_e \\, h_e$ on each face rather than $\\eta_e/h_e$; using $\\eta_e/h_e$ makes the matrix singular as $h_e \\to 0$ regardless of the magnitude of $\\eta_e$.**\n\nThis statement presents an incorrect scaling for the penalty term. The correct scaling, which balances the terms in the coercivity proof involving trace and inverse inequalities, is $\\eta_e/h_e$. A dimensional analysis also confirms this: all terms in the bilinear form must have the same physical units, and only the scaling $\\propto 1/h_e$ for the penalty parameter achieves this for the Poisson equation. The scaling $\\eta_e/h_e$ is precisely what is needed to ensure stability (coercivity) uniformly as the mesh is refined ($h_e \\to 0$), provided $\\eta_e$ is sufficiently large.\nVerdict: **Incorrect**.", "answer": "$$\\boxed{A}$$", "id": "2596888"}, {"introduction": "With a high-level understanding of the global system, we now focus on the building blocks: the face integrals that couple adjacent elements and enforce boundary conditions. This exercise [@problem_id:2569501] tests your ability to correctly construct the weak forms for both interior faces using the SIPG method and boundary faces using Nitsche's method. Correctly handling these terms is fundamental to a robust implementation, as it requires careful attention to the definitions of jump and average operators and the need for orientation-independent formulas.", "problem": "Consider the scalar diffusion model problem with Dirichlet boundary data on a polyhedral domain $\\Omega \\subset \\mathbb{R}^d$:\n$$\n-\\nabla \\cdot (\\kappa \\nabla u) = f \\quad \\text{in } \\Omega, \n\\qquad\nu = g \\quad \\text{on } \\Gamma_D = \\partial \\Omega,\n$$\nwhere $\\kappa(x) > 0$ is piecewise constant on a shape-regular simplicial or hexahedral mesh $\\mathcal{T}_h$. Let $\\mathcal{F}_h^{\\mathrm{int}}$ denote the set of interior faces and $\\mathcal{F}_h^{\\mathrm{D}}$ the set of boundary faces on $\\Gamma_D$. Consider a Discontinuous Galerkin (DG) finite element space $V_h$ of piecewise polynomials of degree $\\le p \\ge 1$ on $\\mathcal{T}_h$.\n\nImplementation conventions for faces. For each interior face $F \\in \\mathcal{F}_h^{\\mathrm{int}}$ shared by elements $K_L$ and $K_R$, store an arbitrary but fixed unit normal vector $\\boldsymbol{n}_F$ pointing from $K_L$ to $K_R$. Define $u_L := u|_{K_L}$ and $u_R := u|_{K_R}$ for the traces on $F$. Define the scalar jump and vector average by\n$$\n[w] := u_L - u_R, \n\\qquad\n\\{\\boldsymbol{\\phi}\\} := \\tfrac{1}{2}\\left( \\boldsymbol{\\phi}_L + \\boldsymbol{\\phi}_R \\right),\n$$\nfor any vector field $\\boldsymbol{\\phi}$ with well-defined traces on $F$. On boundary faces $F \\in \\mathcal{F}_h^{\\mathrm{D}}$, let $\\boldsymbol{n}$ denote the outward unit normal to $\\Omega$ and use the same jump/average notation with the convention that on a boundary face there is only one trace from the interior.\n\nLet $h_F$ denote a face diameter and assume a facewise penalty parameter of the form $\\eta_F \\simeq C_{\\mathrm{IP}} \\,\\overline{\\kappa}_F \\, p^2$ with a mesh- and coefficient-dependent positive average $\\overline{\\kappa}_F$ (for instance the arithmetic mean $\\overline{\\kappa}_F := \\tfrac{1}{2}(\\kappa|_{K_L}+\\kappa|_{K_R})$ on interior faces and $\\overline{\\kappa}_F := \\kappa|_K$ on boundary faces) and a sufficiently large constant $C_{\\mathrm{IP}} > 0$. Throughout, bilinear and linear forms are assembled by summation of element-volume terms and face terms.\n\nQuestion. Which of the following prescriptions for the face contributions of the bilinear form $a_h(\\cdot,\\cdot)$ and linear form $\\ell_h(\\cdot)$ yields an orientation-independent, symmetric and adjoint-consistent coupling for the symmetric interior penalty Galerkin (SIPG) method on interior faces and the Nitsche method for Dirichlet boundary faces, under the above jump/average conventions?\n\nA. Interior faces $F \\in \\mathcal{F}_h^{\\mathrm{int}}$:\n$$\na_F(u,v) \\;=\\; -\\int_F \\{\\kappa \\nabla u\\}\\cdot \\boldsymbol{n}_F \\,[v] \\;-\\; \\int_F \\{\\kappa \\nabla v\\}\\cdot \\boldsymbol{n}_F \\,[u] \\;+\\; \\int_F \\frac{\\eta_F}{h_F}\\,[u]\\,[v].\n$$\nDirichlet boundary faces $F \\in \\mathcal{F}_h^{\\mathrm{D}}$ (Nitsche):\n$$\na_F(u,v) \\;=\\; -\\int_F \\kappa \\nabla u \\cdot \\boldsymbol{n}\\, v \\;-\\; \\int_F \\kappa \\nabla v \\cdot \\boldsymbol{n}\\, u \\;+\\; \\int_F \\frac{\\eta_F}{h_F}\\, u\\, v,\n$$\n$$\n\\ell_F(v) \\;=\\; \\int_F \\frac{\\eta_F}{h_F}\\, g\\, v \\;-\\; \\int_F \\kappa \\nabla v \\cdot \\boldsymbol{n}\\, g.\n$$\n\nB. Interior faces $F \\in \\mathcal{F}_h^{\\mathrm{int}}$:\n$$\na_F(u,v) \\;=\\; -\\int_F \\{\\kappa \\nabla u \\cdot \\boldsymbol{n}_{\\mathrm{out}}\\}\\,[v] \\;-\\; \\int_F \\{\\kappa \\nabla v \\cdot \\boldsymbol{n}_{\\mathrm{out}}\\}\\,[u] \\;+\\; \\int_F \\frac{\\eta_F}{h_F}\\,[u]\\,[v],\n$$\nwhere $\\{\\kappa \\nabla u \\cdot \\boldsymbol{n}_{\\mathrm{out}}\\} := \\tfrac{1}{2}\\big(\\kappa_L \\nabla u_L \\cdot \\boldsymbol{n}_{L\\!,F} + \\kappa_R \\nabla u_R \\cdot \\boldsymbol{n}_{R\\!,F}\\big)$ uses the outward normals $\\boldsymbol{n}_{L\\!,F}$ of $K_L$ and $\\boldsymbol{n}_{R\\!,F}$ of $K_R$ on $F$. Dirichlet boundary faces $F \\in \\mathcal{F}_h^{\\mathrm{D}}$:\n$$\na_F(u,v) \\;=\\; -\\int_F \\kappa \\nabla u \\cdot \\boldsymbol{n}\\, v \\;-\\; \\int_F \\kappa \\nabla v \\cdot \\boldsymbol{n}\\, u \\;+\\; \\int_F \\frac{\\eta_F}{h_F}\\, u\\, v,\n\\qquad\n\\ell_F(v) \\;=\\; \\int_F \\frac{\\eta_F}{h_F}\\, g\\, v \\;-\\; \\int_F \\kappa \\nabla v \\cdot \\boldsymbol{n}\\, g.\n$$\n\nC. Interior faces $F \\in \\mathcal{F}_h^{\\mathrm{int}}$:\n$$\na_F(u,v) \\;=\\; -\\int_F \\{\\kappa \\nabla u\\}\\cdot \\boldsymbol{n}_F \\,[v] \\;+\\; \\int_F \\frac{\\eta_F}{h_F}\\,[u]\\,[v],\n$$\ni.e., omit the term with $\\{\\kappa \\nabla v\\}$. Dirichlet boundary faces $F \\in \\mathcal{F}_h^{\\mathrm{D}}$:\n$$\na_F(u,v) \\;=\\; -\\int_F \\kappa \\nabla u \\cdot \\boldsymbol{n}\\, v \\;+\\; \\int_F \\frac{\\eta_F}{h_F}\\, u\\, v,\n\\qquad\n\\ell_F(v) \\;=\\; \\int_F \\frac{\\eta_F}{h_F}\\, g\\, v.\n$$\n\nD. Interior faces $F \\in \\mathcal{F}_h^{\\mathrm{int}}$:\n$$\na_F(u,v) \\;=\\; -\\int_F \\{\\kappa \\nabla u\\}\\cdot \\boldsymbol{n}_F \\,[v] \\;-\\; \\int_F \\{\\kappa \\nabla v\\}\\cdot \\boldsymbol{n}_F \\,[u] \\;+\\; \\int_F \\eta_F\\, h_F\\,[u]\\,[v],\n$$\ni.e., scale the penalty by $h_F$ instead of $h_F^{-1}$. Dirichlet boundary faces $F \\in \\mathcal{F}_h^{\\mathrm{D}}$:\n$$\na_F(u,v) \\;=\\; \\int_F \\kappa \\nabla u \\cdot \\boldsymbol{n}\\, v \\;+\\; \\int_F \\kappa \\nabla v \\cdot \\boldsymbol{n}\\, u \\;+\\; \\int_F \\eta_F\\, h_F\\, u\\, v,\n\\qquad\n\\ell_F(v) \\;=\\; \\int_F \\eta_F\\, h_F\\, g\\, v \\;+\\; \\int_F \\kappa \\nabla v \\cdot \\boldsymbol{n}\\, g.\n$$\n\nSelect the option that is correct under the stated conventions and requirements.", "solution": "The task is to identify the correct formulation for the face contributions of a Discontinuous Galerkin method for a scalar diffusion problem. The required properties are that the formulation is orientation-independent, symmetric, and adjoint-consistent. The method should be the Symmetric Interior Penalty Galerkin (SIPG) method on interior faces and the symmetric Nitsche's method for Dirichlet boundary conditions.\n\nFirst, let us derive the correct formulation from first principles.\n\nThe starting point is the weak formulation on each element $K$ of the mesh $\\mathcal{T}_h$. We multiply the PDE $-\\nabla \\cdot (\\kappa \\nabla u) = f$ by a test function $v \\in V_h$ and integrate over $K$:\n$$\n-\\int_K (\\nabla \\cdot (\\kappa \\nabla u)) v \\, d\\boldsymbol{x} = \\int_K f v \\, d\\boldsymbol{x}\n$$\nApplying integration by parts (Green's first identity) to the left-hand side yields:\n$$\n\\int_K \\kappa \\nabla u \\cdot \\nabla v \\, d\\boldsymbol{x} - \\int_{\\partial K} (\\kappa \\nabla u \\cdot \\boldsymbol{n}_K) v \\, ds = \\int_K f v \\, d\\boldsymbol{x}\n$$\nwhere $\\boldsymbol{n}_K$ is the outward unit normal to the boundary $\\partial K$ of the element $K$.\n\nSumming over all elements $K \\in \\mathcal{T}_h$ gives the global formulation:\n$$\n\\sum_{K \\in \\mathcal{T}_h} \\int_K \\kappa \\nabla u \\cdot \\nabla v \\, d\\boldsymbol{x} - \\sum_{K \\in \\mathcal{T}_h} \\int_{\\partial K} (\\kappa \\nabla u \\cdot \\boldsymbol{n}_K) v \\, ds = \\int_\\Omega f v \\, d\\boldsymbol{x}\n$$\nThe integral over element boundaries can be split into contributions from interior faces $\\mathcal{F}_h^{\\mathrm{int}}$ and boundary faces $\\mathcal{F}_h^{\\mathrm{D}}$. This is where the numerical fluxes of the DG method are introduced.\n\n**Interior Faces ($F \\in \\mathcal{F}_h^{\\mathrm{int}}$)**\n\nFor an interior face $F$ shared by two elements $K_L$ and $K_R$, the sum over element boundaries contains two terms. With the given convention of a fixed normal $\\boldsymbol{n}_F$ pointing from $K_L$ to $K_R$, the outward normal for $K_L$ is $\\boldsymbol{n}_{L,F} = \\boldsymbol{n}_F$ and for $K_R$ is $\\boldsymbol{n}_{R,F} = -\\boldsymbol{n}_F$. The boundary integral over $F$ becomes:\n$$\n\\int_F (\\kappa \\nabla u_L \\cdot \\boldsymbol{n}_{L,F}) v_L \\, ds + \\int_F (\\kappa \\nabla u_R \\cdot \\boldsymbol{n}_{R,F}) v_R \\, ds = \\int_F ((\\kappa \\nabla u_L \\cdot \\boldsymbol{n}_F) v_L - (\\kappa \\nabla u_R \\cdot \\boldsymbol{n}_F) v_R) \\, ds\n$$\nUsing the definitions of jump $[w] := w_L - w_R$ and average $\\{\\boldsymbol{\\phi}\\} := \\frac{1}{2}(\\boldsymbol{\\phi}_L + \\boldsymbol{\\phi}_R)$, and the identity $[ab] = \\{a\\}[b] + [a]\\{b\\}$, the integrand can be written as $[(\\kappa \\nabla u \\cdot \\boldsymbol{n}_F) v] = \\{\\kappa \\nabla u \\cdot \\boldsymbol{n}_F\\}[v] + [\\kappa \\nabla u \\cdot \\boldsymbol{n}_F]\\{v\\}$. For the exact solution $u$, the flux is continuous, i.e., $[\\kappa \\nabla u \\cdot \\boldsymbol{n}_F] = 0$. Thus, for the exact solution, the boundary term from integration by parts simplifies to $\\sum_{F \\in \\mathcal{F}_h^{\\mathrm{int}}} \\int_F \\{\\kappa \\nabla u \\cdot \\boldsymbol{n}_F\\}[v] \\, ds$.\n\nThe Discontinuous Galerkin formulation replaces the boundary terms from the integration by parts with numerical flux terms. For adjoint consistency, the formulation for the exact solution must recover the original weak form. The term $-\\int_F \\{\\kappa \\nabla u \\cdot \\boldsymbol{n}_F\\}[v]$ is the consistency term.\n\nFor the SIPG method, which must be symmetric, we must add the corresponding \"adjoint\" term, which is obtained by swapping $u$ and $v$: $-\\int_F \\{\\kappa \\nabla v \\cdot \\boldsymbol{n}_F\\}[u]$.\nFinally, to ensure stability (coercivity), a penalty term is added, which penalizes the jump of the solution: $+\\int_F \\frac{\\eta_F}{h_F} [u][v]$. This term is symmetric and vanishes for the exact solution (for which $[u]=0$), thus preserving consistency.\n\nCombining these gives the SIPG bilinear form for an interior face $F$:\n$$\na_F(u,v) = -\\int_F \\{\\kappa \\nabla u\\}\\cdot \\boldsymbol{n}_F \\,[v] - \\int_F \\{\\kappa \\nabla v\\}\\cdot \\boldsymbol{n}_F \\,[u] + \\int_F \\frac{\\eta_F}{h_F}\\,[u]\\,[v]\n$$\nThis form is symmetric by construction. We must verify its orientation-independence. If we flip the normal, $\\boldsymbol{n}_F \\to -\\boldsymbol{n}_F$, the labels $L$ and $R$ are swapped. This implies $[w] \\to -[w]$ and $\\{\\boldsymbol{\\phi}\\} \\to \\{\\boldsymbol{\\phi}\\}$.\nThe first term becomes $-\\int_F \\{\\kappa \\nabla u\\}\\cdot (-\\boldsymbol{n}_F) \\,(-[v]) = -\\int_F \\{\\kappa \\nabla u\\}\\cdot \\boldsymbol{n}_F \\,[v]$.\nThe second term is similarly invariant.\nThe third term becomes $\\int_F \\frac{\\eta_F}{h_F} (-[u])(-[v]) = \\int_F \\frac{\\eta_F}{h_F} [u][v]$.\nAll terms are invariant. Thus, the formulation is orientation-independent.\n\n**Dirichlet Boundary Faces ($F \\in \\mathcal{F}_h^{\\mathrm{D}}$)**\n\nNitsche's method enforces the boundary condition $u=g$ weakly. We require a symmetric, adjoint-consistent formulation. The starting point is the boundary term from integration by parts, $-\\int_F (\\kappa \\nabla u \\cdot \\boldsymbol{n}) v \\, ds$, where $\\boldsymbol{n}$ is the outward unit normal to $\\Omega$.\n\n1.  **Consistency term**: The term $-\\int_F (\\kappa \\nabla u \\cdot \\boldsymbol{n}) v$ is included to ensure consistency with the original PDE.\n2.  **Symmetry term**: To make the formulation symmetric, we add the adjoint term $-\\int_F (\\kappa \\nabla v \\cdot \\boldsymbol{n}) u$.\n3.  **Penalty term**: For stability, a penalty term $+\\int_F \\frac{\\eta_F}{h_F} u v$ is added.\n\nCombining these, the bilinear form contribution from a boundary face is:\n$$\na_F(u,v) = -\\int_F \\kappa \\nabla u \\cdot \\boldsymbol{n}\\, v - \\int_F \\kappa \\nabla v \\cdot \\boldsymbol{n}\\, u + \\int_F \\frac{\\eta_F}{h_F}\\, u\\, v\n$$\nThis form is symmetric by construction. The linear form $\\ell_F(v)$ arises from incorporating the boundary data $g$. In the symmetric and penalty terms of the full formulation, we replace the trial function $u$ by the prescribed data $g$. The corresponding terms are then moved to the right-hand side of the final equation $a_h(u,v) = \\ell_h(v)$.\nThe full boundary face contribution to the equation is:\n$-\\int_F \\kappa \\nabla u \\cdot \\boldsymbol{n}\\, v - \\int_F \\kappa \\nabla v \\cdot \\boldsymbol{n}\\, g + \\int_F \\frac{\\eta_F}{h_F}(u-g)v$.\nExpanding this: $-\\int_F \\kappa \\nabla u \\cdot \\boldsymbol{n}\\, v - \\int_F \\kappa \\nabla v \\cdot \\boldsymbol{n}\\, g + \\int_F \\frac{\\eta_F}{h_F}u v - \\int_F \\frac{\\eta_F}{h_F}g v$.\nThe terms linear in $u$ constitute $a_F(u,v)$. The terms involving only data ($g$) and the test function ($v$) constitute $-\\ell_F(v)$.\nTherefore, the linear form is:\n$$\n\\ell_F(v) = \\int_F \\kappa \\nabla v \\cdot \\boldsymbol{n}\\, g - \\int_F \\frac{\\eta_F}{h_F} g v\n$$\nWait, my derivation gives a different sign. Let me re-derive this by adding a term that is zero for the exact solution, which is a more robust method.\nStarting from the consistency equation for the exact solution $u$:\n$\\sum_K \\int_K \\kappa \\nabla u \\cdot \\nabla v - \\sum_{F \\in \\mathcal{F}_h^{\\mathrm{int}}} \\int_F \\{\\kappa \\nabla u \\cdot \\boldsymbol{n}_F\\}[v] - \\sum_{F \\in \\mathcal{F}_h^{\\mathrm{D}}} \\int_F (\\kappa \\nabla u \\cdot \\boldsymbol{n})v = \\int_\\Omega f v$.\nWe add the following terms, which sum to zero for the exact solution $u$ (since $u=g$ on $\\Gamma_D$):\n$0 = \\sum_{F \\in \\mathcal{F}_h^{\\mathrm{D}}} \\left( -\\int_F \\kappa \\nabla v \\cdot \\boldsymbol{n}(u-g) + \\int_F \\frac{\\eta_F}{h_F}(u-g)v \\right)$.\nAdding this to the consistency equation, we can identify $a_h(u,v)$ and $\\ell_h(v)$.\nThe terms with the trial function $u$ are:\n$$\na_F(u,v) = -\\int_F \\kappa \\nabla u \\cdot \\boldsymbol{n}\\, v - \\int_F \\kappa \\nabla v \\cdot \\boldsymbol{n}\\, u + \\int_F \\frac{\\eta_F}{h_F}\\, u\\, v\n$$\nThe terms with data $g$ are:\n$$\n+\\int_F \\kappa \\nabla v \\cdot \\boldsymbol{n}\\, g - \\int_F \\frac{\\eta_F}{h_F} gv\n$$\nThese terms, when moved to the right-hand side, form $\\ell_F(v)$. The signs change:\n$$\n\\ell_F(v) = -\\int_F \\kappa \\nabla v \\cdot \\boldsymbol{n}\\, g + \\int_F \\frac{\\eta_F}{h_F} gv\n$$\nThis formulation for $a_F(u,v)$ and $\\ell_F(v)$ is the standard symmetric Nitsche method.\n\nNow we evaluate the given options.\n\n**Option A:**\n-   **Interior faces:** $a_F(u,v) = -\\int_F \\{\\kappa \\nabla u\\}\\cdot \\boldsymbol{n}_F \\,[v] - \\int_F \\{\\kappa \\nabla v\\}\\cdot \\boldsymbol{n}_F \\,[u] + \\int_F \\frac{\\eta_F}{h_F}\\,[u]\\,[v]$. This matches our derived SIPG formulation, which is symmetric, orientation-independent, and adjoint-consistent.\n-   **Dirichlet boundary faces:**\n    $a_F(u,v) = -\\int_F \\kappa \\nabla u \\cdot \\boldsymbol{n}\\, v - \\int_F \\kappa \\nabla v \\cdot \\boldsymbol{n}\\, u + \\int_F \\frac{\\eta_F}{h_F}\\, u\\, v$. This matches our derived symmetric Nitsche bilinear form.\n    $\\ell_F(v) = \\int_F \\frac{\\eta_F}{h_F}\\, g\\, v - \\int_F \\kappa \\nabla v \\cdot \\boldsymbol{n}\\, g$. This also matches our derived linear form.\nAll forms in this option are correct.\nVerdict: **Correct**.\n\n**Option B:**\n-   **Interior faces:** The formulation uses $\\{\\kappa \\nabla u \\cdot \\boldsymbol{n}_{\\mathrm{out}}\\} := \\tfrac{1}{2}\\big(\\kappa_L \\nabla u_L \\cdot \\boldsymbol{n}_{L\\!,F} + \\kappa_R \\nabla u_R \\cdot \\boldsymbol{n}_{R\\!,F}\\big)$. With $\\boldsymbol{n}_{L\\!,F}=\\boldsymbol{n}_F$ and $\\boldsymbol{n}_{R\\!,F}=-\\boldsymbol{n}_F$, this becomes $\\tfrac{1}{2}(\\kappa_L \\nabla u_L - \\kappa_R \\nabla u_R) \\cdot \\boldsymbol{n}_F = \\tfrac{1}{2}[\\kappa \\nabla u]\\cdot\\boldsymbol{n}_F$. For an exact solution, the flux is continuous, so $[\\kappa \\nabla u \\cdot \\boldsymbol{n}_F]=0$. This term will vanish, but the consistency term requires the average of the flux $\\{\\kappa \\nabla u \\cdot \\boldsymbol{n}_F\\}$, which does not vanish. Therefore, this formulation is not adjoint-consistent.\nVerdict: **Incorrect**.\n\n**Option C:**\n-   **Interior faces:** $a_F(u,v) = -\\int_F \\{\\kappa \\nabla u\\}\\cdot \\boldsymbol{n}_F \\,[v] + \\int_F \\frac{\\eta_F}{h_F}\\,[u]\\,[v]$. This form is missing the symmetrizing term $-\\int_F \\{\\kappa \\nabla v\\}\\cdot \\boldsymbol{n}_F \\,[u]$ and is therefore not symmetric. This corresponds to the NIPG (Non-symmetric Interior Penalty Galerkin) method. The problem requires a symmetric method.\n-   **Dirichlet boundary faces:** The bilinear form $a_F(u,v)$ is similarly missing its symmetrizing term. It is not symmetric.\nVerdict: **Incorrect**.\n\n**Option D:**\n-   **Interior faces:** The penalty term is given as $\\int_F \\eta_F\\, h_F\\,[u]\\,[v]$. The scaling factor is $h_F$, instead of the correct $h_F^{-1}$. For second-order elliptic problems, the penalty term must scale with the inverse of the face diameter to balance the gradient terms and ensure stability (and optimal convergence rates). This scaling is incorrect.\n-   **Dirichlet boundary faces:** The signs of the consistency and symmetry terms in $a_F(u,v)$ are positive, which is incorrect and violates consistency. The penalty term also has the wrong scaling $h_F$. The linear form $\\ell_F(v)$ also has incorrect signs.\nVerdict: **Incorrect**.\n\nBased on the detailed analysis, only Option A provides the correct formulations that satisfy all the stated requirements.", "answer": "$$\\boxed{A}$$", "id": "2569501"}, {"introduction": "Beyond ensuring basic stability, an effective finite element implementation often requires adapting parameters to local solution features for optimal accuracy and efficiency. This final practice [@problem_id:2569500] guides you through a computational task: implementing an adaptive strategy for the penalty parameter $\\sigma_e$ based on local flux residuals. This exercise bridges theory and practice, demonstrating how a posteriori information can be used to create a more intelligent and powerful numerical scheme.", "problem": "You are tasked with designing and implementing an algorithm to adapt the symmetric interior penalty (SIP) parameter for discontinuous Galerkin (dG) methods and the boundary penalty for Nitsche's method based on equilibrated flux information. Consider the scalar diffusion model problem with diffusion coefficient $\\kappa(\\boldsymbol{x})$ on a shape-regular mesh $\\mathcal{T}_h$ of a domain $\\Omega \\subset \\mathbb{R}^d$ with skeleton $\\mathcal{E}_h$. For an interior face $e \\in \\mathcal{E}_h$, let $h_e$ denote a representative face size, $p_e$ the local polynomial degree on the adjacent elements, and define the arithmetic jump and average via standard conventions. For the SIP method, the penalty appears in the form\n$$\n\\sum_{e \\in \\mathcal{E}_h} \\int_e \\sigma_e \\frac{\\kappa_e}{h_e} \\, [[u_h]] \\, [[v_h]] \\, \\mathrm{d}s,\n$$\nwhere $\\sigma_e$ is a dimensionless stabilization parameter and $\\kappa_e$ is an effective face diffusion. For the Nitsche boundary coupling on Dirichlet boundaries, an analogous penalty term $\\int_{\\partial \\Omega_D} \\sigma_e \\frac{\\kappa_e}{h_e} \\, u_h \\, v_h \\, \\mathrm{d}s$ is used.\n\nThe fundamental starting points are:\n- The discrete trace inequality on shape-regular meshes: there exists a face-dependent constant $C_{\\mathrm{tr}}$ such that for any polynomial $v_h$ of degree $p_e$ on an element $K$ with face $e \\subset \\partial K$, one has\n$$\n\\| v_h \\|_{L^2(e)}^2 \\le C_{\\mathrm{tr}} \\frac{(p_e + 1)^2}{h_e} \\, \\| v_h \\|_{L^2(K)}^2.\n$$\n- Coercivity of the SIP form is ensured if\n$$\n\\sigma_e \\ge C_{\\mathrm{tr}} (p_e + 1)^2,\n$$\nup to universal shape-regularity constants and dimension-dependent factors, when the penalty term is scaled as $\\sigma_e \\frac{\\kappa_e}{h_e}$.\n- An equilibrated flux $\\hat{\\boldsymbol{q}} \\in H(\\mathrm{div};\\Omega)$ is a post-processed flux field that is locally conservative on elements and consistent with the numerical solution. Its face-wise normal jumps provide a robust residual measure. For an interior face $e$ with unit normal $\\boldsymbol{n}_e$, define a flux residual magnitude $r_e := \\| [[ \\hat{\\boldsymbol{q}} \\cdot \\boldsymbol{n}_e ]] \\|_{L^2(e)}$. For a Dirichlet boundary face $e \\subset \\partial \\Omega_D$, define $r_e := \\| \\hat{\\boldsymbol{q}} \\cdot \\boldsymbol{n} - t_e \\|_{L^2(e)}$, where $t_e$ is the target boundary traction, here supplied numerically. Let $j_e := \\| [[u_h]] \\|_{L^2(e)}$ for interior faces and $j_e := \\| u_h \\|_{L^2(e)}$ for Dirichlet boundary faces.\n\nYou must derive, from these bases, a dimensionally consistent adaptive rule for $\\sigma_e$ that preserves the coercivity floor and increases $\\sigma_e$ in proportion to a normalized flux disequilibrium. The adaptive rule must use the following structure:\n- Let $\\kappa_e$ be the harmonic average of the adjacent diffusion coefficients for interior faces, i.e.,\n$$\n\\kappa_e = \\frac{2 \\kappa^- \\kappa^+}{\\kappa^- + \\kappa^+},\n$$\nand for boundary faces set $\\kappa_e = \\kappa^-$.\n- Let the minimum stabilization level be\n$$\n\\sigma_{\\min,e} := C_{\\mathrm{tr}} (p_e + 1)^2.\n$$\n- Let the normalized disequilibrium be\n$$\n\\phi_e := \\min \\left\\{ \\frac{h_e \\, r_e}{\\kappa_e \\, (j_e + \\delta)}, \\, \\phi_{\\max} \\right\\},\n$$\nwith a small positive regularization $\\delta$ preventing division by zero and a cap $\\phi_{\\max}$ preventing unbounded growth.\n- Let the final adaptive penalty be\n$$\n\\sigma_e := \\sigma_{\\min,e} \\left( 1 + \\theta \\, \\phi_e \\right).\n$$\n\nYour program must compute $\\sigma_e$ for a given test suite, using the constants $C_{\\mathrm{tr}} = 1$, $\\theta = 2.5$, $\\phi_{\\max} = 10$, and $\\delta = 10^{-12}$. All computations are dimensionless and purely mathematical; no physical units are involved.\n\nTest Suite:\n- Test case $1$ (uniform diffusion, moderate residuals, interior faces):\n  - Edges described by tuples $(h_e, p_e, \\kappa^-, \\kappa^+, r_e, j_e)$:\n    - $(0.25, 1, 1.0, 1.0, 0.02, 0.20)$,\n    - $(0.25, 1, 1.0, 1.0, 0.01, 0.15)$,\n    - $(0.25, 1, 1.0, 1.0, 0.005, 0.10)$.\n- Test case $2$ (mixed degrees, mesh sizes, and diffusion contrast, interior faces):\n  - $(0.10, 2, 1.0, 1.0, 0.20, 0.05)$,\n  - $(0.10, 3, 5.0, 0.2, 0.05, 0.10)$,\n  - $(0.05, 1, 0.5, 0.5, 0.10, 0.01)$,\n  - $(0.20, 1, 1.0, 1.0, 0.00, 0.20)$.\n- Test case $3$ (Dirichlet boundary via Nitsche and interior edge with small size, high-degree case):\n  - For a Dirichlet boundary face, represent it by setting the second diffusion to $0$; tuples are interpreted as $(h_e, p_e, \\kappa^-, 0, r_e, j_e)$:\n    - $(0.05, 2, 2.0, 0, 0.10, 0.00)$,\n  - Interior edges:\n    - $(0.01, 1, 1.0, 1.0, 0.01, 0.05)$,\n    - $(0.20, 4, 10.0, 10.0, 0.20, 1.00)$.\n\nRequirements:\n- Implement the adaptive formula specified above to compute the list of penalties $\\sigma_e$ for each test case, in the order provided.\n- Use the constants $C_{\\mathrm{tr}} = 1$, $\\theta = 2.5$, $\\phi_{\\max} = 10$, and $\\delta = 10^{-12}$ exactly as given.\n- The program must produce a single line of output containing the results as a comma-separated list enclosed in square brackets, where each test case’s result is a list of floating-point numbers rounded to six decimal places. For example, the output format must be like\n$[ [\\sigma_{1,1}, \\sigma_{1,2}], [\\sigma_{2,1}], [\\sigma_{3,1}, \\sigma_{3,2}] ]$\nwith actual numerical values filled in, rounded to six decimals.", "solution": "The problem presented is a valid and well-posed computational task grounded in the theory of numerical methods for partial differential equations. It requires the implementation of an adaptive algorithm for the penalty parameter, $\\sigma_e$, used in the symmetric interior penalty discontinuous Galerkin (SIP-dG) method and Nitsche's method for enforcing Dirichlet boundary conditions. The provided formulation is scientifically sound, internally consistent, and contains all necessary information for a unique solution. We shall proceed with a reasoned derivation of the computational algorithm.\n\nThe objective is to compute the stabilization parameter $\\sigma_e$ for a set of faces (or edges in $\\mathbb{R}^2$) in a finite element mesh. This parameter is crucial for ensuring the stability, or more formally, the coercivity, of the discrete problem. The adaptive strategy is designed to adjust $\\sigma_e$ based on local indicators of solution quality, specifically the disequilibrium of a post-processed numerical flux.\n\nThe foundation of the penalty parameter design rests on the discrete trace inequality, which for an element $K$ and its face $e$ states that\n$$\n\\| v_h \\|_{L^2(e)}^2 \\le C_{\\mathrm{tr}} \\frac{(p_e + 1)^2}{h_e} \\, \\| v_h \\|_{L^2(K)}^2\n$$\nwhere $v_h$ is a polynomial of degree $p_e$, $h_e$ is the face size, and $C_{\\mathrm{tr}}$ is a constant dependent on element shape regularity. To guarantee coercivity of the SIP-dG bilinear form, the penalty parameter $\\sigma_e$ must be sufficiently large to control the terms arising from the jump of the solution across faces. This leads to the condition $\\sigma_e \\ge C_{\\mathrm{tr}} (p_e + 1)^2$. The problem thus defines a minimum allowable penalty parameter:\n$$\n\\sigma_{\\min,e} := C_{\\mathrm{tr}} (p_e + 1)^2\n$$\nThis serves as a baseline to ensure theoretical stability. For the given problem, $C_{\\mathrm{tr}} = 1$, so $\\sigma_{\\min,e} = (p_e + 1)^2$.\n\nThe core of the adaptive algorithm is to augment this baseline penalty in response to local numerical errors. A robust measure of such error is provided by an equilibrated flux, $\\hat{\\boldsymbol{q}}$, which is a post-processed vector field satisfying local conservation properties. The magnitude of the jump in the normal component of this flux across an interior face $e$, denoted $r_e = \\| [[ \\hat{\\boldsymbol{q}} \\cdot \\boldsymbol{n}_e ]] \\|_{L^2(e)}$, quantifies the local flux imbalance. A large $r_e$ suggests a poor local approximation.\n\nTo make this indicator useful for adapting $\\sigma_e$, it must be non-dimensionalized and scaled appropriately. The proposed adaptive rule introduces a normalized disequilibrium indicator, $\\phi_e$. This indicator relates the flux residual $r_e$ to the solution jump across the same face, $j_e = \\| [[u_h]] \\|_{L^2(e)}$. The formulation is:\n$$\n\\phi_e := \\min \\left\\{ \\frac{h_e \\, r_e}{\\kappa_e \\, (j_e + \\delta)}, \\, \\phi_{\\max} \\right\\}\n$$\nHere, $\\kappa_e$ is an effective diffusion coefficient at the face, which properly scales the flux residual against the solution jump. The term $h_e / \\kappa_e$ ensures the ratio is dimensionless, as the units of $r_e$ are approximately $[\\kappa][u]/[L]$ and the units of $j_e$ are $[u]$ in an integrated sense. The small regularization parameter $\\delta > 0$ prevents division by zero if the solution jump $j_e$ is close to zero, which can occur. The parameter $\\phi_{\\max}$ provides an upper bound, or cap, on the adaptive contribution to prevent the penalty $\\sigma_e$ from becoming excessively large, which could degrade the conditioning of the global system matrix.\n\nFinally, the adaptive penalty parameter $\\sigma_e$ is constructed by augmenting the minimum penalty $\\sigma_{\\min,e}$ using this disequilibrium indicator:\n$$\n\\sigma_e := \\sigma_{\\min,e} \\left( 1 + \\theta \\, \\phi_e \\right)\n$$\nThe parameter $\\theta$ controls the strength of the adaptive response. A value of $\\theta=0$ would recover the minimal, non-adaptive penalty. A positive $\\theta$ increases stabilization in regions of high flux disequilibrium.\n\nThe computational procedure for each face $e$ with given parameters $(h_e, p_e, \\kappa^-, \\kappa^+, r_e, j_e)$ is as follows, using the specified constants $C_{\\mathrm{tr}} = 1$, $\\theta = 2.5$, $\\phi_{\\max} = 10$, and $\\delta = 10^{-12}$:\n\n1.  **Compute Effective Diffusion $\\kappa_e$**:\n    -   For an interior face, where adjacent elements have diffusion coefficients $\\kappa^-$ and $\\kappa^+$, the harmonic mean is used: $\\kappa_e = \\frac{2 \\kappa^- \\kappa^+}{\\kappa^- + \\kappa^+}$. This is a standard choice for accurately capturing the effective conductivity between two different media.\n    -   For a boundary face, represented by $\\kappa^+=0$, the parameter is taken from the single adjacent element: $\\kappa_e = \\kappa^-$.\n\n2.  **Compute Minimum Penalty $\\sigma_{\\min,e}$**:\n    -   Using the local polynomial degree $p_e$ and $C_{\\mathrm{tr}} = 1$, calculate $\\sigma_{\\min,e} = (p_e + 1)^2$.\n\n3.  **Compute Normalized Disequilibrium $\\phi_e$**:\n    -   Calculate the ratio $\\frac{h_e \\, r_e}{\\kappa_e \\, (j_e + \\delta)}$.\n    -   Apply the cap: $\\phi_e = \\min\\left(\\frac{h_e \\, r_e}{\\kappa_e \\, (j_e + \\delta)}, \\phi_{\\max}\\right)$.\n\n4.  **Compute Final Adaptive Penalty $\\sigma_e$**:\n    -   Combine the above components: $\\sigma_e = \\sigma_{\\min,e} (1 + \\theta \\, \\phi_e)$.\n\nThis algorithm will be applied to every face specified in the test suite to produce the required numerical results.", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes the adaptive penalty parameter sigma_e for a suite of test cases\n    based on the provided formulation for discontinuous Galerkin and Nitsche methods.\n    \"\"\"\n\n    # Constants provided in the problem statement.\n    C_TR = 1.0\n    THETA = 2.5\n    PHI_MAX = 10.0\n    DELTA = 1e-12\n\n    # Test suite defined in the problem.\n    test_cases = [\n        # Test case 1 (uniform diffusion, moderate residuals, interior faces)\n        [\n            (0.25, 1, 1.0, 1.0, 0.02, 0.20),\n            (0.25, 1, 1.0, 1.0, 0.01, 0.15),\n            (0.25, 1, 1.0, 1.0, 0.005, 0.10)\n        ],\n        # Test case 2 (mixed degrees, mesh sizes, and diffusion contrast, interior faces)\n        [\n            (0.10, 2, 1.0, 1.0, 0.20, 0.05),\n            (0.10, 3, 5.0, 0.2, 0.05, 0.10),\n            (0.05, 1, 0.5, 0.5, 0.10, 0.01),\n            (0.20, 1, 1.0, 1.0, 0.00, 0.20)\n        ],\n        # Test case 3 (Dirichlet boundary, high-degree case)\n        [\n            (0.05, 2, 2.0, 0.0, 0.10, 0.00),  # Dirichlet boundary face\n            (0.01, 1, 1.0, 1.0, 0.01, 0.05),  # Interior face\n            (0.20, 4, 10.0, 10.0, 0.20, 1.00) # Interior face\n        ]\n    ]\n\n    def calculate_sigma_e(h_e, p_e, kappa_minus, kappa_plus, r_e, j_e):\n        \"\"\"\n        Calculates the adaptive penalty parameter sigma_e for a single face.\n        \n        Args:\n            h_e (float): Face size.\n            p_e (int): Local polynomial degree.\n            kappa_minus (float): Diffusion coefficient in one element.\n            kappa_plus (float): Diffusion coefficient in the other; 0 for boundary.\n            r_e (float): Flux residual norm.\n            j_e (float): Solution jump norm.\n            \n        Returns:\n            float: The calculated penalty parameter sigma_e.\n        \"\"\"\n        \n        # Step 1: Compute Effective Diffusion kappa_e\n        if kappa_plus == 0.0:  # Boundary face\n            kappa_e = kappa_minus\n        else:  # Interior face\n            # Harmonic mean, check for zero denominator though problem data avoids this.\n            if kappa_minus + kappa_plus == 0:\n                 kappa_e = 0\n            else:\n                 kappa_e = (2 * kappa_minus * kappa_plus) / (kappa_minus + kappa_plus)\n\n        # Step 2: Compute Minimum Penalty sigma_min_e\n        sigma_min_e = C_TR * (p_e + 1)**2\n\n        # Step 3: Compute Normalized Disequilibrium phi_e\n        denominator = kappa_e * (j_e + DELTA)\n        if denominator == 0:\n            # This case happens if kappa_e is zero. Assign large number to be capped by PHI_MAX.\n            raw_phi = float('inf')\n        else:\n            raw_phi = (h_e * r_e) / denominator\n        \n        phi_e = min(raw_phi, PHI_MAX)\n        \n        # Step 4: Compute Final Adaptive Penalty sigma_e\n        sigma_e = sigma_min_e * (1 + THETA * phi_e)\n        \n        return sigma_e\n\n    all_results = []\n    for case in test_cases:\n        case_results = []\n        for face_params in case:\n            sigma_e = calculate_sigma_e(*face_params)\n            case_results.append(sigma_e)\n        all_results.append(case_results)\n\n    # Format the output to six decimal places and the required string structure.\n    formatted_results = []\n    for case_res in all_results:\n        rounded_vals = [f\"{val:.6f}\" for val in case_res]\n        formatted_results.append(f'[{\",\".join(rounded_vals)}]')\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n```", "id": "2569500"}]}