{"hands_on_practices": [{"introduction": "The Polynomial Chaos Expansion (PCE) is a foundational tool in Stochastic Finite Element Methods, allowing us to represent a random quantity as a series of deterministic functions multiplied by orthogonal polynomials. Before we can use PCE, we must first understand how to build the basis itself. This practice guides you through the essential task of constructing multivariate Hermite basis functions from univariate ones and then counting the total number of terms, a key step in setting up any PCE-based analysis [@problem_id:2686929].", "problem": "In the stochastic finite element method, a random response is often represented by a Polynomial Chaos Expansion (PCE) built from an orthogonal basis adapted to the input distribution. Consider an $m$-dimensional vector of independent standard normal random variables $\\boldsymbol{\\Xi} = (\\Xi_{1},\\ldots,\\Xi_{m})$, and the associated Hermite chaos basis constructed from the probabilists’ Hermite polynomials, which are orthogonal in $L^{2}$ with respect to the standard normal density. The univariate probabilists’ Hermite polynomials are defined by the Rodrigues formula\n$$\n\\mathrm{He}_{n}(\\xi) = (-1)^{n} \\exp\\!\\left(\\frac{\\xi^{2}}{2}\\right) \\frac{d^{n}}{d\\xi^{n}} \\exp\\!\\left(-\\frac{\\xi^{2}}{2}\\right),\n$$\nwith the first three given by $\\mathrm{He}_{0}(\\xi)=1$, $\\mathrm{He}_{1}(\\xi)=\\xi$, and $\\mathrm{He}_{2}(\\xi)=\\xi^{2}-1$.\n\nDefine the multivariate Hermite chaos basis functions by tensor products indexed with a multi-index $\\boldsymbol{\\alpha}=(\\alpha_{1},\\ldots,\\alpha_{m}) \\in \\mathbb{N}_{0}^{m}$ and total order $|\\boldsymbol{\\alpha}|=\\sum_{i=1}^{m}\\alpha_{i}$:\n$$\n\\Psi_{\\boldsymbol{\\alpha}}(\\boldsymbol{\\Xi}) \\equiv \\prod_{i=1}^{m} \\mathrm{He}_{\\alpha_{i}}(\\Xi_{i}).\n$$\n\nTasks:\n- Write explicitly, in terms of $\\mathrm{He}_{0}$, $\\mathrm{He}_{1}$, and $\\mathrm{He}_{2}$, the set of multivariate basis functions $\\{\\Psi_{\\boldsymbol{\\alpha}}(\\boldsymbol{\\Xi}) : |\\boldsymbol{\\alpha}| \\leq p\\}$ for total order $p=2$ and general dimension $m$, organized by total order $|\\boldsymbol{\\alpha}|=0$, $|\\boldsymbol{\\alpha}|=1$, and $|\\boldsymbol{\\alpha}|=2$. Your description should clearly indicate all distinct types of terms without omitting any class.\n- Using only first-principles combinatorial reasoning based on counting nonnegative integer solutions, derive the total number of distinct multivariate basis functions of total order at most $p=2$ as a closed-form function of $m$.\n\nProvide the final answer as a single analytic expression in terms of $m$. No rounding is needed and no units are required.", "solution": "The problem statement has been validated and is deemed to be scientifically grounded, well-posed, and objective. It contains no scientific or factual unsoundness, is formally structured, and provides all necessary definitions and constraints for a unique solution. We will therefore proceed with the derivation.\n\nThe problem is divided into two tasks: first, to explicitly describe the set of multivariate Hermite basis functions for a total order $p \\leq 2$, and second, to derive a closed-form expression for the total number of such functions as a function of the dimension $m$.\n\n**Part 1: Enumeration of Basis Functions for $|\\boldsymbol{\\alpha}| \\leq 2$**\n\nWe seek to identify all distinct multi-indices $\\boldsymbol{\\alpha} = (\\alpha_{1}, \\ldots, \\alpha_{m}) \\in \\mathbb{N}_{0}^{m}$ such that the total order $|\\boldsymbol{\\alpha}| = \\sum_{i=1}^{m} \\alpha_{i}$ is less than or equal to $2$. The basis functions $\\Psi_{\\boldsymbol{\\alpha}}(\\boldsymbol{\\Xi})$ are constructed as tensor products of the univariate Hermite polynomials $\\mathrm{He}_{\\alpha_{i}}(\\Xi_{i})$. We organize the basis functions by their total order.\n\n**Case 1: Total order $|\\boldsymbol{\\alpha}| = 0$**\nThe condition $\\sum_{i=1}^{m} \\alpha_{i} = 0$, with the constraint that all $\\alpha_{i} \\in \\mathbb{N}_{0}$, has only one possible solution: $\\alpha_{i} = 0$ for all $i \\in \\{1, \\ldots, m\\}$.\nThis corresponds to a single multi-index, $\\boldsymbol{\\alpha} = (0, 0, \\ldots, 0)$.\nThe resulting basis function is:\n$$ \\Psi_{(0, \\ldots, 0)}(\\boldsymbol{\\Xi}) = \\prod_{i=1}^{m} \\mathrm{He}_{0}(\\Xi_{i}) = \\prod_{i=1}^{m} 1 = 1 $$\nThere is $1$ basis function of total order $0$.\n\n**Case 2: Total order $|\\boldsymbol{\\alpha}| = 1$**\nThe condition is $\\sum_{i=1}^{m} \\alpha_{i} = 1$. For non-negative integers $\\alpha_{i}$, this implies that exactly one component, say $\\alpha_{j}$, must be equal to $1$, and all other components $\\alpha_{k}$ (for $k \\neq j$) must be $0$.\nThe index $j$ can be any integer from $1$ to $m$. Thus, there are $m$ distinct multi-indices of this form. For each $j \\in \\{1, \\ldots, m\\}$, the multi-index is $\\boldsymbol{\\alpha} = (0, \\ldots, 1, \\ldots, 0)$, where the $1$ is in the $j$-th position.\nThe corresponding basis functions are:\n$$ \\Psi_{\\boldsymbol{\\alpha}}(\\boldsymbol{\\Xi}) = \\mathrm{He}_{1}(\\Xi_{j}) \\prod_{k \\neq j} \\mathrm{He}_{0}(\\Xi_{k}) = \\mathrm{He}_{1}(\\Xi_{j}) $$\nThe set of basis functions for total order $1$ is $\\{\\mathrm{He}_{1}(\\Xi_{j}) : j=1, \\ldots, m\\}$. There are $m$ such functions.\n\n**Case 3: Total order $|\\boldsymbol{\\alpha}| = 2$**\nThe condition is $\\sum_{i=1}^{m} \\alpha_{i} = 2$. For non-negative integers $\\alpha_{i}$, there are two distinct types of solutions:\n- **Type 3a:** One component is $2$, and all others are $0$. Let $\\alpha_{j} = 2$ for some $j \\in \\{1, \\ldots, m\\}$, and $\\alpha_{k} = 0$ for all $k \\neq j$. There are $m$ such multi-indices. The corresponding basis functions are of the form:\n$$ \\Psi_{\\boldsymbol{\\alpha}}(\\boldsymbol{\\Xi}) = \\mathrm{He}_{2}(\\Xi_{j}) \\prod_{k \\neq j} \\mathrm{He}_{0}(\\Xi_{k}) = \\mathrm{He}_{2}(\\Xi_{j}) $$\nThis gives a set of $m$ \"pure\" second-order basis functions: $\\{\\mathrm{He}_{2}(\\Xi_{j}) : j=1, \\ldots, m\\}$.\n\n- **Type 3b:** Two components are $1$, and all others are $0$. Let $\\alpha_{j} = 1$ and $\\alpha_{k} = 1$ for two distinct indices $j, k \\in \\{1, \\ldots, m\\}$ with $j \\neq k$. All other components are $0$. The number of ways to choose two distinct indices from a set of $m$ is given by the binomial coefficient $\\binom{m}{2}$. The corresponding basis functions are of the form:\n$$ \\Psi_{\\boldsymbol{\\alpha}}(\\boldsymbol{\\Xi}) = \\mathrm{He}_{1}(\\Xi_{j}) \\mathrm{He}_{1}(\\Xi_{k}) \\prod_{l \\neq j,k} \\mathrm{He}_{0}(\\Xi_{l}) = \\mathrm{He}_{1}(\\Xi_{j})\\mathrm{He}_{1}(\\Xi_{k}) $$\nThis gives a set of $\\binom{m}{2} = \\frac{m(m-1)}{2}$ \"mixed\" second-order basis functions: $\\{\\mathrm{He}_{1}(\\Xi_{j})\\mathrm{He}_{1}(\\Xi_{k}) : 1 \\leq j < k \\leq m\\}$.\n\nThe total number of basis functions of order $2$ is the sum of the counts from these two disjoint types: $m + \\binom{m}{2}$.\n\n**Part 2: Total Number of Basis Functions for $|\\boldsymbol{\\alpha}| \\leq 2$**\n\nWe must derive the total number of distinct basis functions for total order at most $p=2$. This is equivalent to finding the cardinality of the set of multi-indices $S = \\{\\boldsymbol{\\alpha} \\in \\mathbb{N}_{0}^{m} : |\\boldsymbol{\\alpha}| \\leq 2\\}$. This is a standard combinatorial problem.\n\nThe problem of counting the number of non-negative integer solutions to the inequality $\\sum_{i=1}^{m} \\alpha_{i} \\leq p$ can be transformed into counting solutions to an equality. We introduce an auxiliary \"slack\" variable, $\\alpha_{m+1} \\in \\mathbb{N}_{0}$, such that the inequality becomes an equality in $m+1$ variables:\n$$ \\sum_{i=1}^{m} \\alpha_{i} + \\alpha_{m+1} = p $$\nThe number of non-negative integer solutions to this equation is given by the \"stars and bars\" formula. The problem is equivalent to distributing $p$ indistinguishable items (stars) into $m+1$ distinguishable bins (the variables $\\alpha_{1}, \\ldots, \\alpha_{m+1}$). The number of ways to do this is given by:\n$$ N_{m,p} = \\binom{p + (m+1) - 1}{(m+1) - 1} = \\binom{p+m}{m} = \\binom{p+m}{p} $$\nFor the specific case of this problem, we have $p=2$. The total number of basis functions, $N$, is:\n$$ N = \\binom{2+m}{m} = \\binom{m+2}{2} $$\nWe expand this binomial coefficient to obtain the final closed-form expression:\n$$ N = \\frac{(m+2)!}{2!(m+2-2)!} = \\frac{(m+2)!}{2 \\cdot m!} = \\frac{(m+2)(m+1)m!}{2m!} = \\frac{(m+1)(m+2)}{2} $$\nThis result can be verified by summing the counts derived in Part 1 for each order:\n- Order $0$: $1$ function.\n- Order $1$: $m$ functions.\n- Order $2$: $m + \\binom{m}{2}$ functions.\nTotal number $N$:\n$$ N = 1 + m + \\left(m + \\binom{m}{2}\\right) = 1 + 2m + \\frac{m(m-1)}{2} $$\n$$ N = \\frac{2 + 4m + m^2 - m}{2} = \\frac{m^2 + 3m + 2}{2} = \\frac{(m+1)(m+2)}{2} $$\nThe verification confirms the result obtained from the stars and bars method. The final expression is the required closed-form function of $m$.", "answer": "$$\\boxed{\\frac{(m+1)(m+2)}{2}}$$", "id": "2686929"}, {"introduction": "Once an uncertain physical quantity is expressed as a Polynomial Chaos Expansion, a key advantage is the ability to compute its statistical moments efficiently. This exercise demonstrates how to post-process a given PCE solution, using the orthogonality of the basis polynomials to calculate the mean and variance directly from the expansion coefficients. This practice reveals the analytical power of spectral stochastic methods, bypassing the need for computationally intensive sampling to obtain statistical insights [@problem_id:2600487].", "problem": "Consider a one-dimensional, steady, linear elliptic boundary value problem with a random coefficient field, discretized by the Finite Element Method (FEM). The stochastic Galerkin approximation uses generalized Polynomial Chaos (gPC) with respect to a single standard normal random variable $\\xi \\sim \\mathcal{N}(0,1)$ and the probabilists' Hermite basis $\\{\\mathrm{He}_{\\alpha}(\\xi)\\}_{\\alpha=0}^{3}$. The basis is orthogonal in $L^{2}(\\mathbb{R},\\rho)$ with $\\rho$ the standard normal density, satisfying $\\mathbb{E}[\\mathrm{He}_{\\alpha}(\\xi)\\,\\mathrm{He}_{\\beta}(\\xi)]=\\alpha!\\,\\delta_{\\alpha\\beta}$, with $\\mathrm{He}_{0}(\\xi)\\equiv 1$ and $\\mathbb{E}[\\mathrm{He}_{\\alpha}(\\xi)]=0$ for all $\\alpha \\geq 1$. The approximate solution field is represented as\n$$\nu_{h}(x,\\xi)=\\sum_{m=1}^{3}\\phi_{m}(x)\\sum_{\\alpha=0}^{3}c_{m,\\alpha}\\,\\mathrm{He}_{\\alpha}(\\xi),\n$$\non the spatial domain $[0,1]$ with a uniform mesh of two linear elements and nodal basis functions at $x=0$, $x=\\tfrac{1}{2}$, and $x=1$. The piecewise-linear FEM shape functions $\\{\\phi_{m}(x)\\}_{m=1}^{3}$ are the usual hat functions on this mesh. The coefficient matrix $\\boldsymbol{C}=[c_{m,\\alpha}]$ is given by\n$$\n\\boldsymbol{C} \\;=\\;\n\\begin{pmatrix}\n1.0 & 0.5 & -0.3 & 0.0 \\\\\n2.0 & -0.2 & 0.4 & 0.25 \\\\\n0.0 & 0.1 & 0.0 & -0.05\n\\end{pmatrix},\n$$\nwhere the row index $m\\in\\{1,2,3\\}$ corresponds to the spatial basis function $\\phi_{m}(x)$ and the column index $\\alpha\\in\\{0,1,2,3\\}$ corresponds to $\\mathrm{He}_{\\alpha}(\\xi)$.\n\nUsing only the orthogonality of the basis and the definition of statistical moments, compute the mean and the pointwise variance of $u_{h}(x,\\xi)$ at the spatial location $\\hat{x}=0.3$.\n\nExpress your final answer as a single row matrix $\\begin{pmatrix}\\mu & \\sigma^{2}\\end{pmatrix}$, where $\\mu$ is the mean and $\\sigma^{2}$ is the variance at $x=\\hat{x}$, rounded to four significant figures. The quantities are dimensionless; do not include units in your answer.", "solution": "The problem must first be validated for scientific soundness, completeness, and objectivity.\n\nThe givens are:\n- The approximate solution from a stochastic finite element method: $u_{h}(x,\\xi)=\\sum_{m=1}^{3}\\phi_{m}(x)\\sum_{\\alpha=0}^{3}c_{m,\\alpha}\\,\\mathrm{He}_{\\alpha}(\\xi)$.\n- The random variable is standard normal: $\\xi \\sim \\mathcal{N}(0,1)$.\n- The stochastic basis is the probabilists' Hermite basis $\\{\\mathrm{He}_{\\alpha}(\\xi)\\}_{\\alpha=0}^{3}$.\n- The orthogonality condition for the basis is $\\mathbb{E}[\\mathrm{He}_{\\alpha}(\\xi)\\,\\mathrm{He}_{\\beta}(\\xi)]=\\alpha!\\,\\delta_{\\alpha\\beta}$.\n- The basis functions have mean zero for non-constant terms: $\\mathrm{He}_{0}(\\xi)=1$ and $\\mathbb{E}[\\mathrm{He}_{\\alpha}(\\xi)]=0$ for $\\alpha \\geq 1$.\n- The spatial domain is $[0,1]$ with nodes at $x \\in \\{0, \\frac{1}{2}, 1\\}$.\n- The spatial basis functions $\\{\\phi_{m}(x)\\}_{m=1}^{3}$ are standard piecewise-linear (hat) functions corresponding to nodes $x=0$, $x=0.5$, and $x=1$ respectively.\n- The coefficient matrix $\\boldsymbol{C}=[c_{m,\\alpha}]$ is given as:\n$$\n\\boldsymbol{C} \\;=\\;\n\\begin{pmatrix}\n1.0 & 0.5 & -0.3 & 0.0 \\\\\n2.0 & -0.2 & 0.4 & 0.25 \\\\\n0.0 & 0.1 & 0.0 & -0.05\n\\end{pmatrix}\n$$\n- The task is to compute the mean $\\mu$ and pointwise variance $\\sigma^{2}$ of $u_{h}(x,\\xi)$ at the location $\\hat{x}=0.3$.\n\nThe problem is valid. It describes a standard scenario in uncertainty quantification using the stochastic Galerkin method. All provided information is consistent, scientifically sound, and sufficient to perform the required calculations. The problem is a direct application of statistical moment definitions to a given polynomial chaos expansion. There are no contradictions, ambiguities, or violations of scientific principles. Thus, we may proceed to the solution.\n\nThe approximate solution is given by a generalized Polynomial Chaos (gPC) expansion:\n$$u_{h}(x,\\xi) = \\sum_{m=1}^{3}\\phi_{m}(x) \\left( \\sum_{\\alpha=0}^{3}c_{m,\\alpha}\\,\\mathrm{He}_{\\alpha}(\\xi) \\right)$$\nWe can rewrite this expression by grouping terms by the stochastic basis functions:\n$$u_{h}(x,\\xi) = \\sum_{\\alpha=0}^{3} \\left( \\sum_{m=1}^{3} c_{m,\\alpha}\\,\\phi_{m}(x) \\right) \\mathrm{He}_{\\alpha}(\\xi)$$\nLet us evaluate this expression at the specific spatial location $\\hat{x}=0.3$. First, we must determine the values of the piecewise-linear basis functions $\\phi_{m}(x)$ at this point. The nodes are located at $x_{1}=0$, $x_{2}=0.5$, and $x_{3}=1$. The point $\\hat{x}=0.3$ lies in the first element, between nodes $x_{1}=0$ and $x_{2}=0.5$.\n\nThe expressions for the hat functions on the interval $[0, 0.5]$ are:\n- $\\phi_{1}(x) = \\frac{x_{2}-x}{x_{2}-x_{1}} = \\frac{0.5-x}{0.5} = 1 - 2x$\n- $\\phi_{2}(x) = \\frac{x-x_{1}}{x_{2}-x_{1}} = \\frac{x-0}{0.5} = 2x$\n- $\\phi_{3}(x) = 0$ for $x \\in [0, 0.5]$\n\nEvaluating at $\\hat{x}=0.3$:\n- $\\phi_{1}(0.3) = 1 - 2(0.3) = 1 - 0.6 = 0.4$\n- $\\phi_{2}(0.3) = 2(0.3) = 0.6$\n- $\\phi_{3}(0.3) = 0$\n\nNow, we can write the specific gPC expansion for $u_{h}(0.3, \\xi)$:\n$$u_{h}(0.3, \\xi) = \\sum_{\\alpha=0}^{3} \\left( c_{1,\\alpha}\\,\\phi_{1}(0.3) + c_{2,\\alpha}\\,\\phi_{2}(0.3) + c_{3,\\alpha}\\,\\phi_{3}(0.3) \\right) \\mathrm{He}_{\\alpha}(\\xi)$$\nLet the total coefficient for each Hermite polynomial be $d_{\\alpha}$:\n$$d_{\\alpha} = c_{1,\\alpha}\\,\\phi_{1}(0.3) + c_{2,\\alpha}\\,\\phi_{2}(0.3) + c_{3,\\alpha}\\,\\phi_{3}(0.3)$$\nSo, $u_{h}(0.3, \\xi) = \\sum_{\\alpha=0}^{3} d_{\\alpha} \\mathrm{He}_{\\alpha}(\\xi)$.\n\nUsing the values $\\phi_{1}(0.3)=0.4$, $\\phi_{2}(0.3)=0.6$, and $\\phi_{3}(0.3)=0$, and the given matrix $\\boldsymbol{C}$:\n- For $\\alpha=0$: $d_{0} = c_{1,0}(0.4) + c_{2,0}(0.6) = (1.0)(0.4) + (2.0)(0.6) = 0.4 + 1.2 = 1.6$\n- For $\\alpha=1$: $d_{1} = c_{1,1}(0.4) + c_{2,1}(0.6) = (0.5)(0.4) + (-0.2)(0.6) = 0.20 - 0.12 = 0.08$\n- For $\\alpha=2$: $d_{2} = c_{1,2}(0.4) + c_{2,2}(0.6) = (-0.3)(0.4) + (0.4)(0.6) = -0.12 + 0.24 = 0.12$\n- For $\\alpha=3$: $d_{3} = c_{1,3}(0.4) + c_{2,3}(0.6) = (0.0)(0.4) + (0.25)(0.6) = 0 + 0.15 = 0.15$\n\nThe mean, $\\mu$, of $u_{h}(0.3, \\xi)$ is its expected value, $\\mathbb{E}[u_{h}(0.3, \\xi)]$. By linearity of expectation:\n$$\\mu = \\mathbb{E}\\left[\\sum_{\\alpha=0}^{3} d_{\\alpha} \\mathrm{He}_{\\alpha}(\\xi)\\right] = \\sum_{\\alpha=0}^{3} d_{\\alpha} \\mathbb{E}[\\mathrm{He}_{\\alpha}(\\xi)]$$\nUsing the property that $\\mathbb{E}[\\mathrm{He}_{\\alpha}(\\xi)] = \\delta_{\\alpha 0}$, we find:\n$$\\mu = d_{0} \\mathbb{E}[\\mathrm{He}_{0}(\\xi)] + \\sum_{\\alpha=1}^{3} d_{\\alpha} \\mathbb{E}[\\mathrm{He}_{\\alpha}(\\xi)] = d_{0} \\cdot 1 + \\sum_{\\alpha=1}^{3} d_{\\alpha} \\cdot 0 = d_{0}$$\nTherefore, the mean is $\\mu = 1.6$.\n\nThe variance, $\\sigma^{2}$, of $u_{h}(0.3, \\xi)$ is given by $\\mathbb{V}[u_{h}(0.3, \\xi)] = \\mathbb{E}[(u_{h}(0.3, \\xi) - \\mu)^2]$.\nSince $\\mu = d_{0} \\mathrm{He}_{0}(\\xi)$ (as $\\mathrm{He}_{0}(\\xi) = 1$), the deviation from the mean is:\n$$u_{h}(0.3, \\xi) - \\mu = \\left(\\sum_{\\alpha=0}^{3} d_{\\alpha} \\mathrm{He}_{\\alpha}(\\xi)\\right) - d_{0}\\mathrm{He}_{0}(\\xi) = \\sum_{\\alpha=1}^{3} d_{\\alpha} \\mathrm{He}_{\\alpha}(\\xi)$$\nThe variance is then:\n$$\\sigma^{2} = \\mathbb{E}\\left[ \\left( \\sum_{\\alpha=1}^{3} d_{\\alpha} \\mathrm{He}_{\\alpha}(\\xi) \\right)^2 \\right] = \\mathbb{E}\\left[ \\left( \\sum_{\\alpha=1}^{3} d_{\\alpha} \\mathrm{He}_{\\alpha}(\\xi) \\right) \\left( \\sum_{\\beta=1}^{3} d_{\\beta} \\mathrm{He}_{\\beta}(\\xi) \\right) \\right]$$\n$$\\sigma^{2} = \\sum_{\\alpha=1}^{3}\\sum_{\\beta=1}^{3} d_{\\alpha}d_{\\beta} \\mathbb{E}[\\mathrm{He}_{\\alpha}(\\xi)\\mathrm{He}_{\\beta}(\\xi)]$$\nUsing the orthogonality property $\\mathbb{E}[\\mathrm{He}_{\\alpha}(\\xi)\\mathrm{He}_{\\beta}(\\xi)] = \\alpha! \\delta_{\\alpha\\beta}$:\n$$\\sigma^{2} = \\sum_{\\alpha=1}^{3}\\sum_{\\beta=1}^{3} d_{\\alpha}d_{\\beta} (\\alpha! \\delta_{\\alpha\\beta}) = \\sum_{\\alpha=1}^{3} d_{\\alpha}^2 (\\alpha!)$$\nSubstituting the calculated values of $d_{\\alpha}$:\n$$\\sigma^{2} = d_{1}^2(1!) + d_{2}^2(2!) + d_{3}^2(3!)$$\n$$\\sigma^{2} = (0.08)^2(1) + (0.12)^2(2) + (0.15)^2(6)$$\n$$\\sigma^{2} = 0.0064 + (0.0144)(2) + (0.0225)(6)$$\n$$\\sigma^{2} = 0.0064 + 0.0288 + 0.135$$\n$$\\sigma^{2} = 0.1702$$\n\nThe problem requires the result to be rounded to four significant figures.\nThe mean is $\\mu=1.6$, which is $1.600$ to four significant figures.\nThe variance is $\\sigma^{2}=0.1702$, which already has four significant figures.\n\nThe final answer consists of the mean $\\mu = 1.600$ and the variance $\\sigma^{2} = 0.1702$.", "answer": "$$\n\\boxed{\n\\begin{pmatrix}\n1.600 & 0.1702\n\\end{pmatrix}\n}\n$$", "id": "2600487"}, {"introduction": "Bridging theory with practice is crucial for mastering any computational method. This hands-on coding exercise provides a complete validation workflow for a simple SFEM problem, integrating finite element modeling, uncertainty propagation, and statistical analysis [@problem_id:2686978]. By comparing the results of a Monte Carlo simulation against a derived analytical solution for a 1D bar with a random Young's modulus, you will gain practical experience in verifying the correctness of a stochastic simulation.", "problem": "Consider a straight, prismatic, one-dimensional axial bar of length $L$ and constant cross-sectional area $A$. The bar is subjected to a uniform axial body force per unit length $b$ acting along its axis. Both ends of the bar are fixed, i.e., the displacement boundary conditions are $u(0)=0$ and $u(L)=0$. The axial displacement field $u(x)$ satisfies force equilibrium and linear elasticity in one dimension, starting from the following fundamental bases: the strong form of equilibrium $dN/dx + b = 0$ with axial force $N(x) = A \\sigma(x)$, the kinematic relation $\\varepsilon = du/dx$, and Hooke’s law $\\sigma = E \\varepsilon$, where $E$ is the Young’s modulus. Assume small strains and linear behavior. \n\nIn this problem, the Young’s modulus $E$ is uncertain and modeled as a single spatially uniform random variable across the bar (i.e., the same realization of $E$ applies to all elements and all $x \\in [0,L]$). The random variable $E$ follows a lognormal distribution characterized by a mean $\\mu_E$ and a coefficient of variation $c_E$. All physical quantities must be handled in International System of Units (SI): length in meters (m), area in square meters (m$^2$), force in newtons (N), stress in pascals (Pa), and displacement in meters (m). Angles are not involved. All outputs of your program must be dimensionless booleans and therefore have no units.\n\nYou are to validate a Stochastic Finite Element Method (SFEM) implementation using Monte Carlo Simulation (MCS) by reproducing the analytic mean and variance of the mid-span nodal displacement when both ends are fixed. Use a standard linear finite element discretization with $N_e$ uniform two-node bar elements, consistent element load vectors for the uniform body force $b$, and exact imposition of Dirichlet boundary conditions at both ends. For an even number of elements, the mid-span corresponds to the interior node at $x=L/2$. Because $E$ is spatially uniform, the assembled global stiffness matrix $K$ scales linearly with $E$, and for a fixed load vector $f$ the displacement vector scales inversely with $E$. Exploit this structure to avoid redundant solves: compute once the deterministic displacement vector for the unit modulus case $E=1$ and then map samples of $E$ to displacement samples by scaling. \n\nTasks to be performed by your program:\n- Assemble the finite element model with $E=1$ and compute the mid-span nodal displacement $u_{\\text{mid}}^{(1)}$ for each test case.\n- Model $E$ as a lognormal random variable with mean $\\mu_E$ and coefficient of variation $c_E$. Using only well-tested properties of the lognormal distribution, derive the analytic expectation $\\mathbb{E}[1/E]$ and variance $\\operatorname{Var}[1/E]$ in terms of $\\mu_E$ and $c_E$, and from these obtain the analytic mean and variance of the mid-span displacement, which scales as $u_{\\text{mid}} = u_{\\text{mid}}^{(1)}/E$.\n- Perform Monte Carlo Simulation with a fixed, deterministic seed to generate samples of $E$ and compute $u_{\\text{mid}}$ samples, then estimate the sample mean and variance of $u_{\\text{mid}}$ using population formulas.\n- For each test case, compare the Monte Carlo estimates to the analytic mean and variance using the tolerance rule $\\lvert \\widehat{m} - m \\rvert \\le \\max(r_{\\text{tol}} \\lvert m \\rvert, a_{\\text{tol}})$ and $\\lvert \\widehat{v} - v \\rvert \\le \\max(r_{\\text{tol}} \\lvert v \\rvert, a_{\\text{tol}})$, where $\\widehat{m}$ and $\\widehat{v}$ are the Monte Carlo estimates, $m$ and $v$ are the analytic values, $r_{\\text{tol}}$ is a relative tolerance, and $a_{\\text{tol}}$ is an absolute tolerance. The boolean result for a test case is true if and only if both comparisons pass.\n\nYour program must implement this validation for the following test suite, with all quantities provided in SI units:\n- Test case $1$ (happy path): $L = 2.0$, $A = 0.01$, $b = 1.0 \\times 10^{5}$, $\\mu_E = 2.0 \\times 10^{11}$, $c_E = 0.1$, $N_e = 10$, number of Monte Carlo samples $N_s = 100000$, relative tolerance for mean $r_{\\text{tol},m} = 0.01$, relative tolerance for variance $r_{\\text{tol},v} = 0.03$, absolute tolerances $a_{\\text{tol},m} = 0$, $a_{\\text{tol},v} = 0$.\n- Test case $2$ (degenerate boundary case with zero variability): $L = 1.0$, $A = 0.005$, $b = 5.0 \\times 10^{4}$, $\\mu_E = 1.5 \\times 10^{11}$, $c_E = 0.0$, $N_e = 8$, $N_s = 5000$, $r_{\\text{tol},m} = 1.0 \\times 10^{-12}$, $r_{\\text{tol},v} = 0.0$, $a_{\\text{tol},m} = 0$, $a_{\\text{tol},v} = 1.0 \\times 10^{-24}$.\n- Test case $3$ (high variability): $L = 3.0$, $A = 0.02$, $b = 2.0 \\times 10^{5}$, $\\mu_E = 7.0 \\times 10^{10}$, $c_E = 0.5$, $N_e = 20$, $N_s = 200000$, $r_{\\text{tol},m} = 0.015$, $r_{\\text{tol},v} = 0.03$, $a_{\\text{tol},m} = 0$, $a_{\\text{tol},v} = 0$.\n\nImplementation and numerical requirements:\n- Use a uniform mesh with $N_e$ even, linear shape functions, and consistent element load vectors for the uniform $b$. Impose $u(0)=0$ and $u(L)=0$ exactly.\n- Compute the deterministic mid-span displacement $u_{\\text{mid}}^{(1)}$ with $E=1$ once per test case using finite element assembly and solution.\n- Generate lognormal samples of $E$ using the standard parameterization obtained from $\\mu_E$ and $c_E$, and a fixed pseudo-random number generator seed common to all test cases.\n- Estimate the sample mean and variance using population formulas.\n- Perform the tolerance checks described above.\n\nFinal output format:\n- Your program should produce a single line of output containing the boolean results for the three test cases as a comma-separated list enclosed in square brackets (e.g., \"[True,False,True]\"). No other output is permitted.", "solution": "We begin from the one-dimensional axial equilibrium and linear elasticity. The axial force balance is $dN/dx + b = 0$, with $N(x) = A \\sigma(x)$, strain $\\varepsilon(x) = du/dx$, and Hooke’s law $\\sigma(x) = E \\varepsilon(x)$. Eliminating $\\sigma$ and $\\varepsilon$ yields the strong form\n$$\n\\frac{d}{dx} \\left( A E \\frac{du}{dx} \\right) + b = 0 \\quad \\text{on } x \\in (0,L), \\quad u(0)=0, \\quad u(L)=0.\n$$\nFor constant $A$ and spatially uniform $E$, integration yields a quadratic exact displacement field; because of Dirichlet conditions at both ends, the field is uniquely determined. In the finite element method with $N_e$ uniform linear elements (two-node bars), the Galerkin formulation yields the assembled linear system\n$$\nK(E) \\, \\mathbf{u} = \\mathbf{f},\n$$\nwith $K(E)$ symmetric positive definite on the interior degrees of freedom after applying $u(0)=u(L)=0$. For a two-node element on an interval of length $h=L/N_e$, the element stiffness with modulus $E$ is\n$$\nk_e(E) = \\frac{A E}{h} \\begin{bmatrix} 1 & -1 \\\\ -1 & 1 \\end{bmatrix},\n$$\nand the consistent element load vector for uniform body force $b$ is\n$$\n\\mathbf{f}_e = \\frac{b h}{2} \\begin{bmatrix} 1 \\\\ 1 \\end{bmatrix}.\n$$\nAssembling over elements and enforcing homogeneous Dirichlet boundary conditions yields the reduced system on the interior nodes, from which we recover the nodal displacement vector $\\mathbf{u}(E)$. Because $k_e(E)$ and hence $K(E)$ scale linearly with $E$ while $\\mathbf{f}$ does not depend on $E$, we have\n$$\nK(E) = E \\, K(1), \\quad \\Rightarrow \\quad \\mathbf{u}(E) = K(E)^{-1} \\mathbf{f} = \\frac{1}{E} K(1)^{-1} \\mathbf{f} = \\frac{1}{E} \\, \\mathbf{u}^{(1)},\n$$\nwhere $\\mathbf{u}^{(1)} := \\mathbf{u}(E=1)$ is the displacement vector for the unit modulus case. Therefore, for the mid-span node (which is an interior node for even $N_e$), the displacement is\n$$\nu_{\\text{mid}}(E) = \\frac{u_{\\text{mid}}^{(1)}}{E}.\n$$\n\nWe now propagate uncertainty from the random modulus $E$ to $u_{\\text{mid}}$. The Young’s modulus is modeled as lognormal with mean $\\mu_E$ and coefficient of variation $c_E$. If $E$ is lognormal, then $\\ln E$ is Gaussian with parameters $\\mu$ and $\\sigma^2$ satisfying the well-known relationships\n$$\n\\mathbb{E}[E] = \\mu_E = e^{\\mu + \\frac{1}{2} \\sigma^2}, \\qquad \\operatorname{Var}(E) = \\mu_E^2 \\, c_E^2 = \\left(e^{\\sigma^2} - 1\\right) e^{2\\mu + \\sigma^2}.\n$$\nFrom these, the variance parameter is recovered as\n$$\n\\sigma^2 = \\ln(1 + c_E^2),\n$$\nand the location parameter is\n$$\n\\mu = \\ln(\\mu_E) - \\frac{1}{2} \\sigma^2.\n$$\nThe reciprocal of a lognormal variable is also lognormal: if $E \\sim \\text{LogNormal}(\\mu, \\sigma^2)$, then $Y := 1/E \\sim \\text{LogNormal}(-\\mu, \\sigma^2)$. Consequently,\n$$\n\\mathbb{E}\\!\\left[\\frac{1}{E}\\right] = e^{-\\mu + \\frac{1}{2} \\sigma^2}, \\qquad \\operatorname{Var}\\!\\left(\\frac{1}{E}\\right) = \\left(e^{\\sigma^2} - 1\\right) e^{-2\\mu + \\sigma^2}.\n$$\nTherefore, because $u_{\\text{mid}}(E) = u_{\\text{mid}}^{(1)} \\cdot (1/E)$, the analytic mean and variance of the mid-span displacement are\n$$\nm := \\mathbb{E}[u_{\\text{mid}}] = u_{\\text{mid}}^{(1)} \\, \\mathbb{E}\\!\\left[\\frac{1}{E}\\right] = u_{\\text{mid}}^{(1)} \\, e^{-\\mu + \\frac{1}{2} \\sigma^2},\n$$\n$$\nv := \\operatorname{Var}(u_{\\text{mid}}) = \\left(u_{\\text{mid}}^{(1)}\\right)^2 \\, \\operatorname{Var}\\!\\left(\\frac{1}{E}\\right) = \\left(u_{\\text{mid}}^{(1)}\\right)^2 \\left(e^{\\sigma^2} - 1\\right) e^{-2\\mu + \\sigma^2}.\n$$\n\nAlgorithmic design:\n- For each test case, assemble the global stiffness matrix and load vector with $E=1$ to compute $\\mathbf{u}^{(1)}$ and extract $u_{\\text{mid}}^{(1)}$. This uses the element matrices $k_e(1)$ and $\\mathbf{f}_e$ defined above and standard assembly. Enforce $u(0)=0$ and $u(L)=0$ by removing the first and last rows and columns of the stiffness matrix and the corresponding entries in the load vector. Solve the reduced linear system and reconstruct the full displacement vector with zeros at boundaries.\n- Convert $\\mu_E$ and $c_E$ to the underlying normal parameters $\\mu$ and $\\sigma^2$ via $\\sigma^2 = \\ln(1+c_E^2)$ and $\\mu = \\ln(\\mu_E) - \\frac{1}{2}\\sigma^2$. Handle the degenerate case $c_E=0$ by setting $\\sigma=0$, which produces a deterministic $E=\\mu_E$.\n- Compute the analytic mean $m$ and variance $v$ of $u_{\\text{mid}}$ using the formulas above.\n- Generate $N_s$ independent samples of $E$ using the lognormal parameterization and a fixed seed for reproducibility. Map these to displacement samples by $u_{\\text{mid}}^{(i)} = u_{\\text{mid}}^{(1)}/E^{(i)}$ without re-solving linear systems, which is valid because of the linear scaling $K(E)=E K(1)$.\n- Estimate the Monte Carlo mean $\\widehat{m}$ and variance $\\widehat{v}$ using population formulas (i.e., $\\operatorname{Var}$ with divisor $N_s$). Compare to analytic values using the tolerances for each test case. The boolean result is true if and only if both mean and variance comparisons satisfy $\\lvert \\widehat{m} - m \\rvert \\le \\max(r_{\\text{tol},m}\\lvert m \\rvert, a_{\\text{tol},m})$ and $\\lvert \\widehat{v} - v \\rvert \\le \\max(r_{\\text{tol},v}\\lvert v \\rvert, a_{\\text{tol},v})$.\n\nRemarks on numerical realism:\n- The deterministic mid-span displacement for $E=1$ equals the exact mid-span value for the continuous problem when using a uniform mesh and consistent loads for this one-dimensional setting with quadratic exact solution; hence the finite element solution at nodes is exact for this load in one dimension. This ensures that the only source of discrepancy in the stochastic validation is Monte Carlo sampling error, not spatial discretization error.\n- Units are consistently SI throughout; the final boolean outputs are unitless by construction.\n\nThe program outputs a single line containing a list of three booleans, one per test case, in the same order as listed in the problem statement.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef assemble_and_solve_unit_mid_displacement(L, A, b, Ne):\n    \"\"\"\n    Assemble 1D bar FEM with linear elements, uniform mesh, consistent body force,\n    Dirichlet BC u(0)=u(L)=0, and E=1. Return the mid-span nodal displacement.\n    \"\"\"\n    assert Ne % 2 == 0, \"Number of elements must be even to have a mid-span node.\"\n    nn = Ne + 1\n    h = L / Ne\n\n    # Global stiffness and load (use E=1 here)\n    K = np.zeros((nn, nn), dtype=float)\n    f = np.zeros(nn, dtype=float)\n\n    # Element matrices for E=1\n    ke = (A / h) * np.array([[1.0, -1.0],\n                              [-1.0, 1.0]], dtype=float)\n    fe = (b * h / 2.0) * np.array([1.0, 1.0], dtype=float)\n\n    # Assembly\n    for e in range(Ne):\n        n1 = e\n        n2 = e + 1\n        K[n1, n1] += ke[0, 0]\n        K[n1, n2] += ke[0, 1]\n        K[n2, n1] += ke[1, 0]\n        K[n2, n2] += ke[1, 1]\n        f[n1] += fe[0]\n        f[n2] += fe[1]\n\n    # Apply Dirichlet BCs: u(0)=0, u(L)=0 -> remove first and last DOFs\n    interior = np.arange(1, nn - 1)\n    K_ff = K[np.ix_(interior, interior)]\n    f_f = f[interior]\n\n    # Solve for interior DOFs\n    u_f = np.linalg.solve(K_ff, f_f)\n\n    # Reconstruct full displacement vector\n    u = np.zeros(nn, dtype=float)\n    u[interior] = u_f\n\n    # Mid-span node index\n    mid_node = Ne // 2\n    return u[mid_node]\n\ndef lognormal_params_from_mean_cov(mean, cov):\n    \"\"\"\n    Given mean and coefficient of variation of a lognormal variable,\n    return (mu, sigma) of the underlying normal distribution.\n    Handle cov=0 as the degenerate deterministic case with sigma=0.\n    \"\"\"\n    if cov == 0.0:\n        sigma2 = 0.0\n        sigma = 0.0\n        mu = np.log(mean) if mean > 0 else -np.inf  # mean should be > 0 for E\n        return mu, sigma\n    sigma2 = np.log(1.0 + cov * cov)\n    sigma = np.sqrt(sigma2)\n    mu = np.log(mean) - 0.5 * sigma2\n    return mu, sigma\n\ndef analytic_mean_var_u_mid(u_mid_unit, mean_E, cov_E):\n    \"\"\"\n    Using properties of the lognormal distribution, compute analytic mean and variance\n    of u_mid = u_mid_unit / E, given mean and cov of E.\n    \"\"\"\n    # Handle both general and degenerate case\n    mu, sigma = lognormal_params_from_mean_cov(mean_E, cov_E)\n    # E[1/E] and Var[1/E]\n    # For degenerate cov=0, sigma=0 => returns exact reciprocal\n    E_inv_mean = np.exp(-mu + 0.5 * sigma * sigma)\n    E_inv_var = (np.exp(sigma * sigma) - 1.0) * np.exp(-2.0 * mu + sigma * sigma)\n    m = u_mid_unit * E_inv_mean\n    v = (u_mid_unit ** 2) * E_inv_var\n    return m, v\n\ndef within_tolerance(estimate, truth, rtol, atol):\n    return abs(estimate - truth) <= max(rtol * abs(truth), atol)\n\ndef run_case(case, rng):\n    \"\"\"\n    Execute one test case:\n    case = (L, A, b, mean_E, cov_E, Ne, Ns, rtol_m, rtol_v, atol_m, atol_v)\n    Returns True if both mean and variance checks pass, else False.\n    \"\"\"\n    (L, A, b, mean_E, cov_E, Ne, Ns, rtol_m, rtol_v, atol_m, atol_v) = case\n\n    # Deterministic mid-span displacement for E=1 via FEM\n    u_mid_unit = assemble_and_solve_unit_mid_displacement(L, A, b, Ne)\n\n    # Analytic mean and variance\n    m_true, v_true = analytic_mean_var_u_mid(u_mid_unit, mean_E, cov_E)\n\n    # Sample E and compute u_mid samples via scaling\n    mu, sigma = lognormal_params_from_mean_cov(mean_E, cov_E)\n    if sigma == 0.0:\n        E_samples = np.full(Ns, mean_E, dtype=float)\n    else:\n        E_samples = rng.lognormal(mean=mu, sigma=sigma, size=Ns)\n\n    u_samples = u_mid_unit / E_samples\n\n    # Monte Carlo estimates (population statistics)\n    m_hat = float(np.mean(u_samples))\n    v_hat = float(np.var(u_samples))  # population variance\n\n    # Tolerance checks\n    mean_ok = within_tolerance(m_hat, m_true, rtol_m, atol_m)\n    var_ok = within_tolerance(v_hat, v_true, rtol_v, atol_v)\n\n    return bool(mean_ok and var_ok)\n\ndef solve():\n    # Define the test cases from the problem statement.\n    # (L, A, b, mean_E, cov_E, Ne, Ns, rtol_m, rtol_v, atol_m, atol_v)\n    test_cases = [\n        (2.0, 0.01, 1.0e5, 2.0e11, 0.1, 10, 100000, 0.01, 0.03, 0.0, 0.0),\n        (1.0, 0.005, 5.0e4, 1.5e11, 0.0, 8, 5000, 1.0e-12, 0.0, 0.0, 1.0e-24),\n        (3.0, 0.02, 2.0e5, 7.0e10, 0.5, 20, 200000, 0.015, 0.03, 0.0, 0.0),\n    ]\n\n    # Fixed seed for reproducibility\n    rng = np.random.default_rng(seed=123456)\n\n    results = []\n    for case in test_cases:\n        res = run_case(case, rng)\n        results.append(res)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "2686978"}]}