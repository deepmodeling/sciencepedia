{"hands_on_practices": [{"introduction": "This exercise serves to ground the abstract theory of two-scale asymptotic expansion in a concrete, analytically tractable problem. By applying the formal homogenization procedure to a simple layered composite, you will directly derive the effective antiplane shear stiffnesses [@problem_id:2565061]. This practice is invaluable as it reveals how the method recovers the well-known \"series\" and \"parallel\" models, corresponding to harmonic and arithmetic averages, providing a solid, intuitive foundation for more complex microstructures.", "problem": "Consider antiplane shear in linear elasticity for a periodically layered composite occupying a bounded Lipschitz domain $\\Omega \\subset \\mathbb{R}^{2}$. The out-of-plane displacement $w^{\\varepsilon} : \\Omega \\to \\mathbb{R}$ satisfies the equilibrium equation $-\\nabla \\cdot \\left( \\mu\\left(\\frac{\\boldsymbol{x}}{\\varepsilon}\\right) \\nabla w^{\\varepsilon}(\\boldsymbol{x}) \\right) = f(\\boldsymbol{x})$ in $\\Omega$ with homogeneous Dirichlet boundary conditions, where $\\varepsilon > 0$ is the small scale parameter and $\\mu(\\boldsymbol{y})$ is a $Y$-periodic shear modulus with $Y = (0,1)^{2}$. The composite is a layered laminate normal to the $x_{1}$-axis: $\\mu(\\boldsymbol{y}) = \\mu_{1}$ in the layer $0 < y_{1} < \\theta$ and $\\mu(\\boldsymbol{y}) = \\mu_{2}$ in the layer $\\theta < y_{1} < 1$, with fixed volume fraction $\\theta \\in (0,1)$ and positive constants $\\mu_{1} > 0$ and $\\mu_{2} > 0$.\n\nUsing two-scale asymptotic expansion within the framework of the Finite Element Method (FEM) homogenization, derive the periodic cell problem and compute the homogenized shear stiffness tensor $\\mathbb{C}^{\\ast} \\in \\mathbb{R}^{2 \\times 2}$ such that the macroscopic flux satisfies $\\boldsymbol{q}^{\\ast} = \\mathbb{C}^{\\ast} \\nabla w_{0}$ in the homogenized limit. Express $\\mathbb{C}^{\\ast}$ explicitly in terms of $\\mu_{1}$, $\\mu_{2}$, and $\\theta$. Then verify, by analytical reasoning from the derived cell problem, that the principal components of $\\mathbb{C}^{\\ast}$ coincide with the exact series and parallel bounds depending on the loading direction relative to the layers.\n\nYour final answer must be the single matrix $\\mathbb{C}^{\\ast}$ as a closed-form analytic expression in terms of $\\mu_{1}$, $\\mu_{2}$, and $\\theta$. No numerical evaluation is required, and no units are needed in the final answer.", "solution": "The problem as stated is valid. It is a well-posed, scientifically grounded problem in the field of homogenization theory for composite materials, based on established principles of linear elasticity and asymptotic analysis. All necessary data and definitions are provided, and there are no internal contradictions, ambiguities, or factual unsoundness. We shall proceed with the derivation.\n\nThe problem governs antiplane shear deformation, described by the out-of-plane displacement $w^{\\varepsilon}(\\boldsymbol{x})$ which satisfies the equilibrium equation:\n$$-\\nabla \\cdot \\left( \\mu\\left(\\frac{\\boldsymbol{x}}{\\varepsilon}\\right) \\nabla w^{\\varepsilon}(\\boldsymbol{x}) \\right) = f(\\boldsymbol{x}) \\quad \\text{in } \\Omega \\subset \\mathbb{R}^{2}$$\nThe shear modulus $\\mu(\\boldsymbol{y})$ is a $Y$-periodic function, where $\\boldsymbol{y} = \\boldsymbol{x}/\\varepsilon$ is the fast-scale variable and $Y = (0,1)^{2}$ is the unit cell. The material is a laminate with layers normal to the $x_{1}$-axis, meaning $\\mu(\\boldsymbol{y}) = \\mu(y_1)$.\n\nWe employ the two-scale asymptotic expansion method, positing a solution of the form:\n$$w^{\\varepsilon}(\\boldsymbol{x}) = w_{0}(\\boldsymbol{x}) + \\varepsilon w_{1}(\\boldsymbol{x}, \\boldsymbol{y}) + \\varepsilon^{2} w_{2}(\\boldsymbol{x}, \\boldsymbol{y}) + \\dots$$\nwhere each $w_{i}(\\boldsymbol{x}, \\boldsymbol{y})$ is $Y$-periodic with respect to $\\boldsymbol{y}$. The gradient operator transforms according to the chain rule: $\\nabla = \\nabla_{\\boldsymbol{x}} + \\frac{1}{\\varepsilon}\\nabla_{\\boldsymbol{y}}$. Substituting the expansion into the governing equation gives:\n$$-\\left(\\nabla_{\\boldsymbol{x}} + \\frac{1}{\\varepsilon}\\nabla_{\\boldsymbol{y}}\\right) \\cdot \\left[ \\mu(\\boldsymbol{y}) \\left(\\nabla_{\\boldsymbol{x}} + \\frac{1}{\\varepsilon}\\nabla_{\\boldsymbol{y}}\\right) (w_{0} + \\varepsilon w_{1} + \\dots) \\right] = f(\\boldsymbol{x})$$\n\nWe expand and collect terms based on powers of $\\varepsilon$:\n$$O(\\varepsilon^{-2}): \\quad -\\nabla_{\\boldsymbol{y}} \\cdot (\\mu(\\boldsymbol{y}) \\nabla_{\\boldsymbol{y}} w_{0}) = 0$$\n$$O(\\varepsilon^{-1}): \\quad -\\nabla_{\\boldsymbol{y}} \\cdot (\\mu(\\boldsymbol{y}) \\nabla_{\\boldsymbol{x}} w_{0}) - \\nabla_{\\boldsymbol{y}} \\cdot (\\mu(\\boldsymbol{y}) \\nabla_{\\boldsymbol{y}} w_{1}) = 0$$\n$$O(\\varepsilon^{0}): \\quad -\\nabla_{\\boldsymbol{x}} \\cdot (\\mu(\\boldsymbol{y}) \\nabla_{\\boldsymbol{x}} w_{0}) - \\nabla_{\\boldsymbol{x}} \\cdot (\\mu(\\boldsymbol{y}) \\nabla_{\\boldsymbol{y}} w_{1}) - \\nabla_{\\boldsymbol{y}} \\cdot (\\mu(\\boldsymbol{y}) \\nabla_{\\boldsymbol{x}} w_{1}) - \\nabla_{\\boldsymbol{y}} \\cdot (\\mu(\\boldsymbol{y}) \\nabla_{\\boldsymbol{y}} w_{2}) = f(\\boldsymbol{x})$$\n\nFrom the $O(\\varepsilon^{-2})$ equation, since $\\mu > 0$ and we seek periodic solutions for $w_0$ in $\\boldsymbol{y}$, it must be that $w_0$ is independent of $\\boldsymbol{y}$, i.e., $w_{0}(\\boldsymbol{x}, \\boldsymbol{y}) = w_{0}(\\boldsymbol{x})$.\n\nThe $O(\\varepsilon^{-1})$ equation is a problem for $w_{1}$ on the unit cell $Y$. Given that $w_{0}$ is independent of $\\boldsymbol{y}$, we can write $\\nabla_{\\boldsymbol{x}}w_0$ as a factor. We seek a solution for $w_1$ that is linear in $\\nabla_{\\boldsymbol{x}}w_0$:\n$$w_{1}(\\boldsymbol{x}, \\boldsymbol{y}) = \\sum_{k=1}^{2} \\chi_{k}(\\boldsymbol{y}) \\frac{\\partial w_{0}}{\\partial x_{k}}(\\boldsymbol{x})$$\nwhere $\\chi_{k}(\\boldsymbol{y})$ are unknown cell functions, also called correctors. Substituting this ansatz into the $O(\\varepsilon^{-1})$ equation yields a set of problems for each corrector $\\chi_k$:\n$$-\\nabla_{\\boldsymbol{y}} \\cdot (\\mu(\\boldsymbol{y}) \\boldsymbol{e}_{k}) - \\nabla_{\\boldsymbol{y}} \\cdot (\\mu(\\boldsymbol{y}) \\nabla_{\\boldsymbol{y}} \\chi_{k}(\\boldsymbol{y})) = 0 \\quad \\text{for } k=1, 2$$\nThis is the cell problem, which we rewrite as:\n$$-\\nabla_{\\boldsymbol{y}} \\cdot (\\mu(\\boldsymbol{y}) \\nabla_{\\boldsymbol{y}} \\chi_{k}(\\boldsymbol{y})) = \\nabla_{\\boldsymbol{y}} \\cdot (\\mu(\\boldsymbol{y}) \\boldsymbol{e}_{k})$$\nto be solved for $Y$-periodic $\\chi_k$ with zero mean, $\\int_{Y} \\chi_{k}(\\boldsymbol{y}) d\\boldsymbol{y} = 0$.\n\nNext, we average the $O(\\varepsilon^{0})$ equation over the unit cell $Y$. The terms $\\nabla_{\\boldsymbol{y}} \\cdot (\\dots)$ vanish upon integration due to periodicity. We are left with:\n$$-\\int_{Y} \\left[ \\nabla_{\\boldsymbol{x}} \\cdot (\\mu \\nabla_{\\boldsymbol{x}} w_{0}) + \\nabla_{\\boldsymbol{x}} \\cdot (\\mu \\nabla_{\\boldsymbol{y}} w_{1}) \\right] d\\boldsymbol{y} = \\int_{Y} f(\\boldsymbol{x}) d\\boldsymbol{y}$$\nSince $\\nabla_x$ operates on macroscopic variables, it can be pulled outside the integral. Noting $|Y|=1$:\n$$-\\nabla_{\\boldsymbol{x}} \\cdot \\left( \\int_{Y} \\mu(\\boldsymbol{y}) (\\nabla_{\\boldsymbol{x}} w_{0} + \\nabla_{\\boldsymbol{y}} w_{1}) d\\boldsymbol{y} \\right) = f(\\boldsymbol{x})$$\nThe term inside the parentheses is the homogenized flux, whose corresponding stiffness tensor $\\mathbb{C}^{\\ast}$ is defined by $\\boldsymbol{q}^{\\ast} = \\mathbb{C}^{\\ast} \\nabla w_{0}$. With the shear flux being $\\boldsymbol{q} = -\\mu \\nabla w$, the homogenized stiffness tensor is given by:\n$$C_{ij}^{\\ast} = \\int_{Y} \\mu(\\boldsymbol{y}) \\left( \\delta_{ij} + \\frac{\\partial \\chi_{j}(\\boldsymbol{y})}{\\partial y_{i}} \\right) d\\boldsymbol{y}$$\n\nNow, we solve the cell problem for the specific laminate structure, where $\\mu(\\boldsymbol{y}) = \\mu(y_1)$.\nFor $k=1$:\n$$-\\nabla_{\\boldsymbol{y}} \\cdot (\\mu(y_1) \\nabla_{\\boldsymbol{y}} \\chi_{1}) = \\frac{\\partial \\mu(y_1)}{\\partial y_{1}}$$\nWe assume $\\chi_1$ depends only on $y_1$. The equation becomes $-\\frac{d}{dy_1}\\left(\\mu(y_1)\\frac{d\\chi_1}{dy_1}\\right) = \\frac{d\\mu}{dy_1}$. Integrating once yields $\\mu(y_1)\\frac{d\\chi_1}{dy_1} = -\\mu(y_1) + C$ for some constant $C$. Thus, $\\frac{d\\chi_1}{dy_1} = -1 + \\frac{C}{\\mu(y_1)}$. For $\\chi_1$ to be periodic, $\\int_0^1 \\frac{d\\chi_1}{dy_1} dy_1 = 0$, which gives $\\int_0^1 (-1 + \\frac{C}{\\mu(y_1)}) dy_1 = 0$. This determines the constant $C = \\left(\\int_0^1 \\frac{1}{\\mu(y_1)} dy_1\\right)^{-1}$.\n\nFor $k=2$:\n$$-\\nabla_{\\boldsymbol{y}} \\cdot (\\mu(y_1) \\nabla_{\\boldsymbol{y}} \\chi_{2}) = \\frac{\\partial \\mu(y_1)}{\\partial y_{2}} = 0$$\nThe unique $Y$-periodic solution with zero mean for this homogeneous equation is $\\chi_{2}(\\boldsymbol{y}) = 0$.\n\nNow we compute the components of $\\mathbb{C}^{\\ast}$.\n$C_{12}^{\\ast} = \\int_Y \\mu(y_1) \\frac{\\partial \\chi_2}{\\partial y_1} d\\boldsymbol{y} = 0$ since $\\chi_2=0$.\n$C_{21}^{\\ast} = \\int_Y \\mu(y_1) \\frac{\\partial \\chi_1}{\\partial y_2} d\\boldsymbol{y} = 0$ since $\\chi_1=\\chi_1(y_1)$.\nThe tensor is diagonal.\n\nFor the diagonal components:\n$C_{11}^{\\ast} = \\int_Y \\mu(y_1) \\left(1 + \\frac{\\partial \\chi_1}{\\partial y_1}\\right) d\\boldsymbol{y} = \\int_0^1 \\mu(y_1) \\left(1 + \\left(-1 + \\frac{C}{\\mu(y_1)}\\right)\\right) dy_1 = \\int_0^1 C dy_1 = C$.\nThus, $C_{11}^{\\ast} = \\left(\\int_0^1 \\frac{1}{\\mu(y_1)} dy_1\\right)^{-1}$. This is the harmonic mean of $\\mu$.\n\n$C_{22}^{\\ast} = \\int_Y \\mu(y_1) \\left(1 + \\frac{\\partial \\chi_2}{\\partial y_2}\\right) d\\boldsymbol{y} = \\int_0^1 \\mu(y_1) (1+0) dy_1 = \\int_0^1 \\mu(y_1) dy_1$. This is the arithmetic mean of $\\mu$.\n\nFinally, we substitute the given piecewise constant function for $\\mu(y_1)$: $\\mu = \\mu_{1}$ for $y_1 \\in (0, \\theta)$ and $\\mu = \\mu_{2}$ for $y_1 \\in (\\theta, 1)$.\nThe harmonic mean is:\n$$C_{11}^{\\ast} = \\left( \\int_0^{\\theta} \\frac{1}{\\mu_{1}} dy_1 + \\int_{\\theta}^{1} \\frac{1}{\\mu_{2}} dy_1 \\right)^{-1} = \\left( \\frac{\\theta}{\\mu_{1}} + \\frac{1-\\theta}{\\mu_{2}} \\right)^{-1} = \\frac{\\mu_{1} \\mu_{2}}{\\theta\\mu_{2} + (1-\\theta)\\mu_{1}}$$\nThe arithmetic mean is:\n$$C_{22}^{\\ast} = \\int_0^{\\theta} \\mu_{1} dy_1 + \\int_{\\theta}^{1} \\mu_{2} dy_1 = \\theta\\mu_{1} + (1-\\theta)\\mu_{2}$$\n\nThe homogenized stiffness tensor is therefore:\n$$\\mathbb{C}^{\\ast} = \\begin{pmatrix} C_{11}^{\\ast} & 0 \\\\ 0 & C_{22}^{\\ast} \\end{pmatrix} = \\begin{pmatrix} \\frac{\\mu_{1} \\mu_{2}}{\\theta\\mu_{2} + (1-\\theta)\\mu_{1}} & 0 \\\\ 0 & \\theta\\mu_{1} + (1-\\theta)\\mu_{2} \\end{pmatrix}$$\n\nThis result is consistent with physical reasoning. The component $C_{11}^{\\ast}$ represents the effective stiffness for a shear gradient along the $x_1$-axis, which is normal to the layers. This corresponds to a \"series\" mechanical model, for which the effective property is the harmonic average. The component $C_{22}^{\\ast}$ is for a shear gradient along the $x_2$-axis, which is parallel to the layers. This corresponds to a \"parallel\" mechanical model, for which the effective property is the arithmetic average. Our derived cell problem and resulting homogenized coefficients correctly reproduce these exact bounds for a layered laminate.", "answer": "$$\\boxed{\\begin{pmatrix} \\frac{\\mu_{1}\\mu_{2}}{(1-\\theta)\\mu_{1} + \\theta\\mu_{2}} & 0 \\\\ 0 & (1-\\theta)\\mu_{2} + \\theta\\mu_{1} \\end{pmatrix}}$$", "id": "2565061"}, {"introduction": "Transitioning from analytical derivations to computational methods is a crucial step in mastering homogenization. This practice focuses on the core computational task: solving the periodic cell problem with the Finite Element Method (FEM) in a simple one-dimensional setting [@problem_id:2565137]. You will implement the weak form and learn how to enforce the necessary zero-mean constraint on the corrector function using the Lagrange multiplier technique, a fundamental skill for implementing periodic homogenization codes.", "problem": "Consider a scalar, steady diffusion problem on a periodic unit cell. Let $Y = (0,1)$ denote the one-dimensional unit cell with periodic coordinate $y \\in Y$. Let $A(y)$ be a positive, bounded, measurable diffusion coefficient that is $Y$-periodic. In first-order periodic homogenization of composite materials, the corrector $w(y)$ for a unit macroscopic gradient is defined as the $Y$-periodic function that satisfies the cell problem in weak form and has zero mean over $Y$.\n\nYour task is to implement the weak form of the single-cell problem using the Finite Element Method (FEM) with a Lagrange multiplier to enforce the zero-mean constraint for the corrector. You must specify the function spaces, assemble the discrete system, solve it, and then compute the discrete homogenized coefficient as an energy.\n\nFormulation:\n- The strong form of the one-dimensional periodic cell problem for a unit macroscopic gradient is given by the equilibrium of the microscopic flux $q(y)$:\n$$\nq(y) = A(y)\\left(1 + \\frac{dw}{dy}(y)\\right), \\quad -\\frac{dq}{dy}(y) = 0 \\ \\text{in}\\ Y,\n$$\nwith $w$ being $Y$-periodic and having zero mean. \n- The corresponding weak form reads: find $w \\in V$ and a Lagrange multiplier $\\lambda \\in \\mathbb{R}$ such that\n$$\n\\int_Y A(y)\\,\\frac{dw}{dy}(y)\\,\\frac{dv}{dy}(y)\\,dy + \\lambda \\int_Y v(y)\\,dy \\;=\\; -\\int_Y A(y)\\,\\frac{dv}{dy}(y)\\,dy \\quad \\text{for all } v \\in V,\n$$\nand\n$$\n\\int_Y w(y)\\,dy \\;=\\; 0.\n$$\n\nFunction spaces:\n- The trial and test space is the closed subspace $V \\subset H^1_{\\text{per}}(Y)$ consisting of $Y$-periodic functions in the Sobolev space $H^1(Y)$; the zero-mean constraint is enforced by a Lagrange multiplier, so $V$ itself does not incorporate the mean-zero condition.\n- The Lagrange multiplier space is $\\mathbb{R}$, enforcing $\\int_Y w \\, dy = 0$.\n\nFinite Element discretization:\n- Choose a uniform mesh of $N$ elements on $Y$, with nodes at $y_i = i h$ for $i \\in \\{0,1,\\dots,N-1\\}$ and mesh size $h = 1/N$. Impose periodicity by identifying the node at $y=1$ with the node at $y=0$. Use the standard continuous, piecewise-linear finite element space $V_h \\subset V$ on this periodic mesh (endpoints identified).\n- The discrete unknowns are $(w_h,\\lambda_h) \\in V_h \\times \\mathbb{R}$ satisfying the discrete mixed weak form:\n$$\n\\sum_{e} \\int_{e} A(y)\\, \\frac{dw_h}{dy}(y)\\, \\frac{dv_h}{dy}(y)\\,dy \\;+\\; \\lambda_h \\int_Y v_h(y)\\,dy \\;=\\; -\\sum_{e} \\int_{e} A(y)\\, \\frac{dv_h}{dy}(y)\\,dy \\quad \\text{for all } v_h \\in V_h,\n$$\nand\n$$\n\\int_Y w_h(y)\\,dy \\;=\\; 0,\n$$\nwhere the sum runs over all mesh elements $e$. Use two-point Gauss quadrature per element to approximate the integrals. Assemble the linear system in saddle-point form with the constraint vector coming from the consistent $L^2$ inner product with the constant function.\n\nPost-processing:\n- After solving for $w_h$, compute the discrete homogenized coefficient as the energy\n$$\nA_{\\text{hom},h} \\;=\\; \\sum_{e} \\int_{e} A(y)\\,\\left(1 + \\frac{dw_h}{dy}(y)\\right)^2 dy,\n$$\nwhich is dimensionless in this setting.\n\nImplementation requirements:\n- Implement the periodic mesh topologically as a cycle: each element connects node $i$ to node $j = (i+1) \\bmod N$ so that the mesh covers $Y$ once. \n- Use two-point Gauss quadrature on each element for all element integrals. \n- Assemble the global stiffness matrix, the constraint vector, and the right-hand side, then solve the resulting $(N+1)\\times(N+1)$ linear system for $(w_h,\\lambda_h)$.\n\nTest suite:\nUse the following test cases, which specify the coefficient $A(y)$ and the number of elements $N$.\n- Case $1$ (piecewise-constant, moderate contrast): \n  - $A(y) = 1$ for $0 \\le y < 0.5$, and $A(y) = 10$ for $0.5 \\le y < 1$.\n  - $N = 64$.\n- Case $2$ (smooth, strictly positive):\n  - $A(y) = 2 + \\sin(2\\pi y)$.\n  - $N = 96$.\n- Case $3$ (piecewise-constant, high contrast):\n  - $A(y) = 0.1$ for $0 \\le y < 0.5$, and $A(y) = 10$ for $0.5 \\le y < 1$.\n  - $N = 128$.\n- Case $4$ (uniform medium, sanity check):\n  - $A(y) = 5$ for all $y \\in Y$.\n  - $N = 8$.\n\nOutput specification:\n- For each case, compute the discrete homogenized coefficient $A_{\\text{hom},h}$ using the energy formula above and report it as a floating-point number.\n- Your program should produce a single line of output containing these four results as a comma-separated list enclosed in square brackets, in the order of the cases $1$ through $4$, each rounded to eight decimal places, with no units (dimensionless).\n- Example format: \"[1.23456789,2.34567890,3.45678901,4.56789012]\".\n\nThere are no physical units in this problem; all quantities are dimensionless.\n\nYour final submission must be a complete, runnable program that assembles and solves the discrete mixed system for each test case and outputs the results in the exact format described above, using two-point Gauss quadrature per element.", "solution": "The problem presented is a standard cell problem from the theory of periodic homogenization, to be solved using the Finite Element Method (FEM). The problem is well-posed, scientifically sound, and contains all necessary information for a unique solution. I will proceed with the derivation and implementation.\n\nThe objective is to find the corrector function $w(y)$ and the homogenized coefficient $A_{\\text{hom}}$ for a one-dimensional periodic composite material. The problem is formulated as a mixed weak form, which we will discretize using continuous, piecewise-linear finite elements.\n\nThe weak formulation is: find $(w, \\lambda) \\in V \\times \\mathbb{R}$ such that for all $v \\in V$:\n$$\n\\int_Y A(y)\\,\\frac{dw}{dy}(y)\\,\\frac{dv}{dy}(y)\\,dy + \\lambda \\int_Y v(y)\\,dy \\;=\\; -\\int_Y A(y)\\,\\frac{dv}{dy}(y)\\,dy\n$$\n$$\n\\int_Y w(y)\\,dy \\;=\\; 0\n$$\nwhere $V = H^1_{\\text{per}}(Y)$ is the space of periodic functions in $H^1(Y)$.\n\nWe discretize the unit cell $Y=(0,1)$ into $N$ uniform elements of size $h=1/N$. The nodes are $y_i = i h$ for $i \\in \\{0, 1, \\dots, N-1\\}$. Due to periodicity, the node at $y=1$ is identified with the node at $y=0$, resulting in $N$ distinct nodes. The finite element space $V_h \\subset V$ consists of continuous, piecewise-linear (P1) functions. Any function $u_h \\in V_h$ can be written as $u_h(y) = \\sum_{j=0}^{N-1} u_j N_j(y)$, where $u_j$ are the nodal values and $N_j(y)$ are the P1 \"hat\" basis functions.\n\nSubstituting the expansions for the trial function $w_h(y) = \\sum_{j=0}^{N-1} w_j N_j(y)$ and the test function $v_h(y) = N_i(y)$ for $i=0, \\dots, N-1$ into the weak form yields a system of linear algebraic equations. This system is augmented with the discrete form of the zero-mean constraint, enforced by the Lagrange multiplier $\\lambda_h$. The resulting algebraic system has the saddle-point structure:\n$$\n\\begin{pmatrix}\n\\mathbf{K} & \\mathbf{B}^T \\\\\n\\mathbf{B} & 0\n\\end{pmatrix}\n\\begin{pmatrix}\n\\mathbf{w} \\\\\n\\lambda_h\n\\end{pmatrix}\n=\n\\begin{pmatrix}\n\\mathbf{f} \\\\\n0\n\\end{pmatrix}\n$$\nHere, $\\mathbf{w} = (w_0, \\dots, w_{N-1})^T$ is the vector of nodal corrector values. The matrix $\\mathbf{K}$, vectors $\\mathbf{B}$, and $\\mathbf{f}$ are defined by their components:\n-   Stiffness Matrix $\\mathbf{K} \\in \\mathbb{R}^{N \\times N}$: $K_{ij} = \\int_Y A(y) \\frac{dN_j}{dy} \\frac{dN_i}{dy} dy$\n-   Constraint Vector $\\mathbf{B} \\in \\mathbb{R}^{1 \\times N}$: $B_j = \\int_Y N_j(y) dy$\n-   Load Vector $\\mathbf{f} \\in \\mathbb{R}^{N \\times 1}$: $f_i = -\\int_Y A(y) \\frac{dN_i}{dy} dy$\n\nWe assemble these components by summing contributions from each element $e_k = [y_k, y_{(k+1)\\pmod N}]$ for $k=0, \\dots, N-1$. The integrals over each element are approximated using two-point Gauss quadrature.\n\nOn an element $e_k$, the basis functions have constant derivatives: $\\frac{dN_k}{dy} = -1/h$ and $\\frac{dN_{(k+1)\\pmod N}}{dy} = 1/h$.\nThe element stiffness matrix is:\n$$\n\\mathbf{K}^k = \\frac{1}{h^2} \\left( \\int_{e_k} A(y) dy \\right) \\begin{pmatrix} 1 & -1 \\\\ -1 & 1 \\end{pmatrix}\n$$\nThe element load vector contribution arises from the term $-\\int_{e_k} A(y) \\frac{dv_h}{dy} dy$. For $v_h=N_k$ and $v_h=N_{(k+1)\\pmod N}$, this gives:\n$$\n\\mathbf{f}^k = -\\frac{1}{h} \\left( \\int_{e_k} A(y) dy \\right) \\begin{pmatrix} -1 \\\\ 1 \\end{pmatrix}\n$$\nThe constraint vector components are $B_j = \\int_Y N_j(y) dy$. For a P1 basis function, $\\int_Y N_j(y) dy = h$. Using two-point Gauss quadrature on the two elements supporting $N_j(y)$, this result is reproduced exactly. So, $\\mathbf{B} = [h, h, \\dots, h]$.\n\nThe integral of the coefficient $A(y)$ over an element $e_k$ is approximated as:\n$$\n\\int_{e_k} A(y) dy \\approx \\frac{h}{2} \\left( A(y_{g1}) + A(y_{g2}) \\right) = h I_{e_k}\n$$\nwhere $y_{g1}, y_{g2}$ are the two Gauss points within element $e_k$, and $I_{e_k}$ denotes the average value of $A(y)$ over the element, calculated by the quadrature rule. Let $C_{e_k} = I_{e_k}/h$.\n\nThe components of the global system for node $i$ are assembled as follows:\n-   $K_{i,i} = C_{e_{(i-1)\\pmod N}} + C_{e_i}$\n-   $K_{i, (i+1)\\pmod N} = -C_{e_i}$\n-   $f_i = I_{e_i} - I_{e_{(i-1)\\pmod N}}$\n-   $(\\mathbf{B}^T)_i = h$ and $B_i = h$\n\nAfter solving the $(N+1) \\times (N+1)$ linear system for the nodal corrector values $\\mathbf{w}$ and the multiplier $\\lambda_h$, we compute the discrete homogenized coefficient $A_{\\text{hom},h}$. On each element $e_k$, the derivative of the corrector is constant: $\\frac{dw_h}{dy} = \\frac{w_{(k+1)\\pmod N} - w_k}{h}$. The homogenized coefficient is calculated as the energy average:\n$$\nA_{\\text{hom},h} = \\sum_{k=0}^{N-1} \\int_{e_k} A(y) \\left(1 + \\frac{dw_h}{dy}\\right)^2 dy\n$$\nUsing Gauss quadrature for the integral of $A(y)$:\n$$\nA_{\\text{hom},h} = \\sum_{k=0}^{N-1} (h I_{e_k}) \\left(1 + \\frac{w_{(k+1)\\pmod N} - w_k}{h}\\right)^2\n$$\nThis procedure is systematic and implements the specified mixed finite element formulation. The provided sanity check case, where $A(y)$ is constant, correctly yields $w_h=0$ and $A_{\\text{hom},h} = A(y)$, validating the formulation.", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Main function to solve the homogenization problem for all test cases.\n    \"\"\"\n\n    def solve_homogenization(A_func, N):\n        \"\"\"\n        Assembles and solves the 1D homogenization cell problem using FEM.\n\n        Args:\n            A_func (callable): A function A(y) defining the diffusion coefficient.\n            N (int): The number of elements in the mesh.\n\n        Returns:\n            float: The computed homogenized coefficient A_hom.\n        \"\"\"\n        h = 1.0 / N\n        sqrt3 = np.sqrt(3.0)\n\n        # Element-wise properties\n        I_e = np.zeros(N)  # Quadrature approx. of average A(y) on element e\n        C_e = np.zeros(N)  # I_e / h, for stiffness matrix assembly\n\n        for i in range(N):\n            # Element e_i connects nodes i and (i+1)%N.\n            # Node i is at y = i*h.\n            y_mid = (i + 0.5) * h\n            y_g1 = y_mid - h / (2.0 * sqrt3)\n            y_g2 = y_mid + h / (2.0 * sqrt3)\n            \n            A_g1 = A_func(y_g1)\n            A_g2 = A_func(y_g2)\n            \n            # Integral of A(y) over element i is approx. h * I_e[i]\n            I_e[i] = 0.5 * (A_g1 + A_g2)\n            \n            # Stiffness contribution from element i\n            C_e[i] = I_e[i] / h\n\n        # Assemble the (N+1)x(N+1) saddle-point system matrix and RHS vector\n        A_sys = np.zeros((N + 1, N + 1))\n        F_sys = np.zeros(N + 1)\n\n        # Assemble stiffness matrix K (top-left NxN block of A_sys)\n        for i in range(N):\n            # Diagonal term K_ii from elements (i-1) and i\n            A_sys[i, i] = C_e[(i - 1 + N) % N] + C_e[i]\n            \n            # Off-diagonal term K_{i, i+1} from element i\n            j = (i + 1) % N\n            A_sys[i, j] -= C_e[i]\n            A_sys[j, i] -= C_e[i]\n\n        # Assemble constraint vector B and its transpose B^T\n        A_sys[N, :N] = h  # Row B\n        A_sys[:N, N] = h  # Column B^T\n        \n        # Assemble load vector f (top N entries of F_sys)\n        for i in range(N):\n            F_sys[i] = I_e[i] - I_e[(i - 1 + N) % N]\n        \n        # Solve the linear system A_sys * x = F_sys\n        try:\n            solution = np.linalg.solve(A_sys, F_sys)\n        except np.linalg.LinAlgError:\n            return np.nan # Should not happen for a well-posed problem\n\n        w = solution[:N]  # Corrector nodal values\n        # lambda_h = solution[N] # Lagrange multiplier, not needed for post-processing\n\n        # Post-processing: Compute the homogenized coefficient A_hom\n        A_hom = 0.0\n        for k in range(N):\n            w_k = w[k]\n            w_k_plus_1 = w[(k + 1) % N]\n            \n            # Constant derivative of w_h on element k\n            dw_dy_h = (w_k_plus_1 - w_k) / h\n            \n            # Add contribution from element k to the energy integral\n            integral_A_on_element = h * I_e[k]\n            A_hom += integral_A_on_element * (1.0 + dw_dy_h)**2\n            \n        return A_hom\n\n    # --- Test Cases ---\n    def A_case1(y):\n        return 1.0 if y < 0.5 else 10.0\n\n    def A_case2(y):\n        return 2.0 + np.sin(2.0 * np.pi * y)\n\n    def A_case3(y):\n        return 0.1 if y < 0.5 else 10.0\n\n    def A_case4(y):\n        return 5.0\n\n    test_cases = [\n        (A_case1, 64),\n        (A_case2, 96),\n        (A_case3, 128),\n        (A_case4, 8)\n    ]\n\n    results = []\n    for A_func, N in test_cases:\n        res = solve_homogenization(A_func, N)\n        results.append(res)\n    \n    # Format and print the final output as specified\n    formatted_results = [f'{r:.8f}' for r in results]\n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n```", "id": "2565137"}, {"introduction": "Building upon the fundamentals of both theory and implementation, this practice advances to a more realistic two-dimensional problem. You will develop a Finite Element code to compute the effective elastic moduli of a composite with a circular inclusion within a Representative Volume Element (RVE) [@problem_id:2565193]. A key aspect of this exercise is the validation of your numerical results against the celebrated Hashin–Shtrikman bounds, providing a rigorous benchmark and deeper insight into the behavior of composite materials.", "problem": "You are given a two-dimensional Representative Volume Element (RVE) modeled as a unit square containing a circular inclusion of radius $r$ centered at $(0.5,0.5)$. The composite consists of two isotropic phases: a matrix (phase $1$) and an inclusion (phase $2$). Each phase is characterized by its three-dimensional isotropic bulk modulus $K$ and shear modulus $G$, both expressed in gigapascals (GPa). The goal is to compute, using the Finite Element Method (FEM) with bilinear quadrilateral elements under plane strain kinematics and Kinematic Uniform Boundary Conditions (KUBC), the effective bulk modulus $K_{\\mathrm{eff}}$ and shear modulus $G_{\\mathrm{eff}}$ of the composite, and to compare them against the three-dimensional Hashin–Shtrikman bounds.\n\nThe derivation must start from the small-strain linear elasticity definition and the Hill–Mandel macro-homogeneity condition. Under small strain, the Cauchy stress tensor satisfies the isotropic Hooke law\n$$\n\\boldsymbol{\\sigma} = 2 G \\boldsymbol{\\varepsilon} + \\lambda \\,\\mathrm{tr}(\\boldsymbol{\\varepsilon}) \\mathbf{I},\n$$\nwith the Lamé parameter $\\lambda = K - \\tfrac{2}{3} G$, and $\\boldsymbol{\\varepsilon}$ the symmetric small-strain tensor. In plane strain, the in-plane stress–strain law in Voigt notation with engineering shear $\\gamma_{xy} = 2 \\varepsilon_{xy}$ is\n$$\n\\begin{bmatrix}\n\\sigma_{xx} \\\\ \\sigma_{yy} \\\\ \\sigma_{xy}\n\\end{bmatrix}\n=\n\\underbrace{\n\\begin{bmatrix}\n\\lambda + 2 G & \\lambda & 0 \\\\\n\\lambda & \\lambda + 2 G & 0 \\\\\n0 & 0 & G\n\\end{bmatrix}\n}_{\\mathbf{D}(K,G)}\n\\begin{bmatrix}\n\\varepsilon_{xx} \\\\ \\varepsilon_{yy} \\\\ \\gamma_{xy}\n\\end{bmatrix}.\n$$\nThe Hill–Mandel condition requires the macroscopic stress power to equal the volume average of the microscopic stress power, which under KUBC with prescribed macroscopic strain $\\overline{\\boldsymbol{\\varepsilon}}$ reduces to computing the volume average of the stress field arising from the boundary displacement field consistent with $\\overline{\\boldsymbol{\\varepsilon}}$.\n\nFinite Element Method requirements:\n- Discretize the unit square with a uniform mesh of $N \\times N$ bilinear quadrilateral elements (total nodes $(N+1) \\times (N+1)$).\n- Assign phase properties elementwise based on the element centroid $(x_c,y_c)$: an element is phase $2$ if $(x_c - 0.5)^2 + (y_c - 0.5)^2 \\le r^2$ and phase $1$ otherwise. The area fraction $f_2$ must be computed as the ratio of the number of phase $2$ elements to the total number of elements; set $f_1 = 1 - f_2$.\n- Use plane strain kinematics and the constitutive matrix $\\mathbf{D}(K,G)$ above, with $K$ and $G$ taken from the phase of each element.\n- Use $2 \\times 2$ Gauss integration per element.\n- Impose Kinematic Uniform Boundary Conditions by prescribing the displacement field on the entire boundary as $\\mathbf{u}(\\mathbf{x}) = \\overline{\\boldsymbol{\\varepsilon}} \\,\\mathbf{x}$, with $\\overline{\\boldsymbol{\\varepsilon}}$ symmetric. For the engineering shear, use $\\gamma_{xy} = 2 \\varepsilon_{xy}$ so that $u_x = \\varepsilon_{xx} x + \\tfrac{\\gamma_{xy}}{2} y$ and $u_y = \\varepsilon_{yy} y + \\tfrac{\\gamma_{xy}}{2} x$.\n- For each load case below, solve the linear system, compute the element stresses at Gauss points, and volume-average them over the unit square to obtain $\\langle \\boldsymbol{\\sigma} \\rangle$.\n\nEffective moduli extraction:\n- Shear load: impose $\\overline{\\varepsilon}_{xx} = 0$, $\\overline{\\varepsilon}_{yy} = 0$, $\\overline{\\gamma}_{xy} = \\gamma_0$ with $\\gamma_0 = 2 \\times 10^{-3}$. The effective shear modulus is\n$$\nG_{\\mathrm{eff}} = \\frac{\\langle \\sigma_{xy} \\rangle}{\\gamma_0}.\n$$\n- Equal-biaxial load: impose $\\overline{\\varepsilon}_{xx} = e_0$, $\\overline{\\varepsilon}_{yy} = e_0$, $\\overline{\\gamma}_{xy} = 0$ with $e_0 = 10^{-3}$. Assuming macroscopic in-plane isotropy, identify the effective Lamé parameter from\n$$\n\\langle \\sigma_{xx} \\rangle = \\left(2 \\lambda_{\\mathrm{eff}} + 2 G_{\\mathrm{eff}}\\right) e_0 \\quad \\Rightarrow \\quad \\lambda_{\\mathrm{eff}} = \\frac{\\langle \\sigma_{xx} \\rangle}{2 e_0} - G_{\\mathrm{eff}},\n$$\nand then the effective bulk modulus\n$$\nK_{\\mathrm{eff}} = \\lambda_{\\mathrm{eff}} + \\frac{2}{3} G_{\\mathrm{eff}}.\n$$\nAll moduli must be reported in gigapascals.\n\nHashin–Shtrikman bounds for three-dimensional isotropic two-phase composites with volume fractions $f_1$ and $f_2$ are\n$$\nK_{\\mathrm{HS}}^{-} = K_1 + \\frac{f_2}{\\dfrac{1}{K_2 - K_1} + \\dfrac{3 f_1}{3 K_1 + 4 G_1}}, \\quad\nK_{\\mathrm{HS}}^{+} = K_2 + \\frac{f_1}{\\dfrac{1}{K_1 - K_2} + \\dfrac{3 f_2}{3 K_2 + 4 G_2}},\n$$\n$$\nG_{\\mathrm{HS}}^{-} = G_1 + \\frac{f_2}{\\dfrac{1}{G_2 - G_1} + \\dfrac{6 f_1 (K_1 + 2 G_1)}{5 G_1 (3 K_1 + 4 G_1)}}, \\quad\nG_{\\mathrm{HS}}^{+} = G_2 + \\frac{f_1}{\\dfrac{1}{G_1 - G_2} + \\dfrac{6 f_2 (K_2 + 2 G_2)}{5 G_2 (3 K_2 + 4 G_2)}}.\n$$\nHandle the degenerate equal-modulus case $K_1 = K_2$ or $G_1 = G_2$ by taking the lower and upper bounds equal to that common value.\n\nTest suite:\nImplement your program to evaluate the following four cases. In each tuple, the parameters are $(N, r, K_1, G_1, K_2, G_2)$ with $K$ and $G$ in gigapascals:\n- Case $1$: $(16, 0.30, 50.0, 20.0, 150.0, 60.0)$\n- Case $2$: $(12, 0.00, 50.0, 20.0, 150.0, 60.0)$\n- Case $3$: $(14, 0.35, 80.0, 30.0, 80.0, 30.0)$\n- Case $4$: $(18, 0.40, 50.0, 20.0, 1000.0, 400.0)$\n\nYour program must, for each case, compute the numerical $(K_{\\mathrm{eff}}, G_{\\mathrm{eff}})$ and the four Hashin–Shtrikman bounds $(K_{\\mathrm{HS}}^{-}, K_{\\mathrm{HS}}^{+}, G_{\\mathrm{HS}}^{-}, G_{\\mathrm{HS}}^{+})$ using the area fraction $f_2$ as defined by the element-centroid assignment. Express all moduli in gigapascals. Angles do not appear; no angle unit is required. Strains are dimensionless.\n\nFinal output format:\nYour program should produce a single line of output containing a list of results, where each result is itself a list of six floats in the order $[K_{\\mathrm{eff}}, G_{\\mathrm{eff}}, K_{\\mathrm{HS}}^{-}, K_{\\mathrm{HS}}^{+}, G_{\\mathrm{HS}}^{-}, G_{\\mathrm{HS}}^{+}]$, using a Python list literal representation. For the four cases above, the final printed line must look like\n$[[\\cdot,\\cdot,\\cdot,\\cdot,\\cdot,\\cdot],[\\cdot,\\cdot,\\cdot,\\cdot,\\cdot,\\cdot],[\\cdot,\\cdot,\\cdot,\\cdot,\\cdot,\\cdot],[\\cdot,\\cdot,\\cdot,\\cdot,\\cdot,\\cdot]]$\nwith actual numeric values in place of the dots.", "solution": "The problem presented is a well-posed and standard exercise in computational micromechanics. It requires the application of the Finite Element Method (FEM) to determine the effective elastic properties of a two-dimensional, two-phase composite material under the assumption of plane strain. The problem statement is scientifically sound, self-contained, and provides all necessary data and definitions for a unique solution. We shall proceed with the derivation and implementation.\n\nThe theoretical foundation is the theory of linear elasticity for small strains. The constitutive behavior of each isotropic phase $i$ is described by Hooke's law, relating the Cauchy stress tensor $\\boldsymbol{\\sigma}$ to the infinitesimal strain tensor $\\boldsymbol{\\varepsilon}$:\n$$\n\\boldsymbol{\\sigma} = 2 G_i \\boldsymbol{\\varepsilon} + \\lambda_i \\mathrm{tr}(\\boldsymbol{\\varepsilon}) \\mathbf{I}\n$$\nwhere $G_i$ is the shear modulus, $\\mathbf{I}$ is the identity tensor, and $\\lambda_i = K_i - \\frac{2}{3} G_i$ is the first Lamé parameter, with $K_i$ being the bulk modulus. For the two-dimensional case of plane strain, where $\\varepsilon_{zz} = \\varepsilon_{xz} = \\varepsilon_{yz} = 0$, this relation simplifies. Using Voigt notation for the in-plane components $\\boldsymbol{\\sigma} = [\\sigma_{xx}, \\sigma_{yy}, \\sigma_{xy}]^T$ and $\\boldsymbol{\\varepsilon} = [\\varepsilon_{xx}, \\varepsilon_{yy}, \\gamma_{xy}]^T$ (with engineering shear strain $\\gamma_{xy} = 2\\varepsilon_{xy}$), the constitutive law is given by $\\boldsymbol{\\sigma} = \\mathbf{D}_i \\boldsymbol{\\varepsilon}$, where the plane strain stiffness matrix $\\mathbf{D}_i$ is:\n$$\n\\mathbf{D}_i = \\begin{bmatrix}\n\\lambda_i + 2 G_i & \\lambda_i & 0 \\\\\n\\lambda_i & \\lambda_i + 2 G_i & 0 \\\\\n0 & 0 & G_i\n\\end{bmatrix}\n$$\n\nThe procedure involves the following steps:\n\n1.  **Finite Element Discretization**: The domain, a unit square $\\Omega = [0,1] \\times [0,1]$, is discretized into a uniform mesh of $N \\times N$ four-noded bilinear quadrilateral elements. Each element has an area $A_e = (1/N)^2$. A node $(i,j)$ with $i,j \\in \\{0, 1, \\dots, N\\}$ has coordinates $(i/N, j/N)$. An element is assigned the properties of phase 2 (inclusion) if its centroid's coordinates $(x_c, y_c)$ satisfy $(x_c - 0.5)^2 + (y_c - 0.5)^2 \\le r^2$; otherwise, it is assigned the properties of phase 1 (matrix).\n\n2.  **Element Stiffness Matrix**: For each element $e$, the stiffness matrix $\\mathbf{k}^e$, an $8 \\times 8$ matrix, relates the element's $8$ nodal degrees of freedom (two per node) to the nodal forces. It is computed by integrating over the element's area $\\Omega_e$:\n$$\n\\mathbf{k}^e = \\int_{\\Omega_e} \\mathbf{B}^T \\mathbf{D} \\mathbf{B} \\, dA\n$$\nHere, $\\mathbf{D}$ is the constitutive matrix of the element's assigned phase. The matrix $\\mathbf{B}$ relates the strain vector $\\boldsymbol{\\varepsilon}$ to the element's nodal displacement vector $\\mathbf{u}^e$. For a node $k$, the corresponding block in $\\mathbf{B}$ is\n$$\n\\mathbf{B}_k = \\begin{bmatrix} \\frac{\\partial N_k}{\\partial x} & 0 \\\\ 0 & \\frac{\\partial N_k}{\\partial y} \\\\ \\frac{\\partial N_k}{\\partial y} & \\frac{\\partial N_k}{\\partial x} \\end{bmatrix}\n$$\nwhere $N_k(x,y)$ are the bilinear shape functions. The integral is evaluated numerically using a $2 \\times 2$ Gaussian quadrature scheme in the element's reference coordinate system $(\\xi, \\eta) \\in [-1,1] \\times [-1,1]$.\n$$\n\\mathbf{k}^e = \\sum_{p=1}^{4} w_p \\mathbf{B}(\\xi_p, \\eta_p)^T \\mathbf{D} \\mathbf{B}(\\xi_p, \\eta_p) \\det(\\mathbf{J})\n$$\nwhere $w_p=1$ are the Gauss weights, and $\\mathbf{J}$ is the Jacobian of the mapping from reference to global coordinates. For a square element of side $h=1/N$, $\\det(\\mathbf{J}) = (h/2)^2 = 1/(4N^2)$.\n\n3.  **Global Assembly and Boundary Conditions**: The element stiffness matrices are assembled into a global stiffness matrix $\\mathbf{K}$ for the entire system of $(N+1)^2$ nodes. The governing system is $\\mathbf{K} \\mathbf{U} = \\mathbf{F}$, where $\\mathbf{U}$ is the global vector of nodal displacements and $\\mathbf{F}$ is the global vector of nodal forces.\n    We apply Kinematic Uniform Boundary Conditions (KUBC) by prescribing displacements on all boundary nodes. For a macroscopic strain tensor $\\overline{\\boldsymbol{\\varepsilon}}$, the displacement $\\mathbf{u}$ at a boundary point $\\mathbf{x}=[x,y]^T$ is $\\mathbf{u} = \\overline{\\boldsymbol{\\varepsilon}} \\mathbf{x}$. Using engineering shear strain, this is:\n$$\nu_x(x,y) = \\overline{\\varepsilon}_{xx} x + \\frac{\\overline{\\gamma}_{xy}}{2} y, \\quad u_y(x,y) = \\overline{\\varepsilon}_{yy} y + \\frac{\\overline{\\gamma}_{xy}}{2} x\n$$\nThe system is partitioned into degrees of freedom corresponding to internal nodes (unknowns, subscript $I$) and boundary nodes (knowns, subscript $B$):\n$$\n\\begin{bmatrix} \\mathbf{K}_{II} & \\mathbf{K}_{IB} \\\\ \\mathbf{K}_{BI} & \\mathbf{K}_{BB} \\end{bmatrix} \\begin{bmatrix} \\mathbf{U}_I \\\\ \\mathbf{U}_B \\end{bmatrix} = \\begin{bmatrix} \\mathbf{F}_I \\\\ \\mathbf{F}_B \\end{bmatrix}\n$$\nWith no body forces, $\\mathbf{F}_I = \\mathbf{0}$. The unknown internal displacements $\\mathbf{U}_I$ are found by solving the reduced system:\n$$\n\\mathbf{K}_{II} \\mathbf{U}_I = -\\mathbf{K}_{IB} \\mathbf{U}_B\n$$\n\n4.  **Homogenization and Effective Properties**: After solving for $\\mathbf{U}_I$, the full displacement field is known. The Hill-Mandel condition implies that the macroscopic stress $\\langle \\boldsymbol{\\sigma} \\rangle$ is the volume average of the microscopic stress field $\\boldsymbol{\\sigma}(\\mathbf{x})$. This average is computed numerically:\n$$\n\\langle \\boldsymbol{\\sigma} \\rangle = \\frac{1}{A_{total}} \\int_{\\Omega} \\boldsymbol{\\sigma}(\\mathbf{x}) \\, dA = \\frac{1}{1} \\sum_{e=1}^{N^2} \\int_{\\Omega_e} \\mathbf{D}_e \\mathbf{B} \\mathbf{u}^e \\, dA = \\sum_{e=1}^{N^2} \\sum_{p=1}^{4} w_p \\mathbf{D}_e \\mathbf{B}_{p} \\mathbf{u}^e \\frac{\\det(\\mathbf{J})}{1}\n$$\nWith $w_p=1$ and $\\det(\\mathbf{J})=1/(4N^2)$, this simplifies to the arithmetic mean of the stress tensors evaluated at all Gauss points across all elements.\n$$\n\\langle \\boldsymbol{\\sigma} \\rangle = \\frac{1}{4N^2} \\sum_{e=1}^{N^2} \\sum_{p=1}^{4} \\boldsymbol{\\sigma}_p^e\n$$\nWe apply two load cases to find the effective moduli:\n    a) **Pure Shear**: Set $\\overline{\\varepsilon}_{xx} = \\overline{\\varepsilon}_{yy} = 0$, $\\overline{\\gamma}_{xy} = \\gamma_0 = 2 \\times 10^{-3}$. The effective shear modulus is:\n$$\nG_{\\mathrm{eff}} = \\frac{\\langle \\sigma_{xy} \\rangle}{\\overline{\\gamma}_{xy}}\n$$\n    b) **Equal Biaxial Strain**: Set $\\overline{\\varepsilon}_{xx} = \\overline{\\varepsilon}_{yy} = e_0 = 10^{-3}$, $\\overline{\\gamma}_{xy} = 0$. The macroscopic response is $\\langle \\sigma_{xx} \\rangle = (2\\lambda_{\\mathrm{eff}} + 2G_{\\mathrm{eff}}) e_0$. We already have $G_{\\mathrm{eff}}$ from the shear test. Thus, we find $\\lambda_{\\mathrm{eff}}$:\n$$\n\\lambda_{\\mathrm{eff}} = \\frac{\\langle \\sigma_{xx} \\rangle}{2 e_0} - G_{\\mathrm{eff}}\n$$\nFinally, the effective bulk modulus is computed from its definition:\n$$\nK_{\\mathrm{eff}} = \\lambda_{\\mathrm{eff}} + \\frac{2}{3} G_{\\mathrm{eff}}\n$$\n\n5.  **Hashin-Shtrikman Bounds**: The computed effective properties are benchmarked against the three-dimensional Hashin-Shtrikman (HS) bounds for two-phase isotropic composites. The volume fraction of the inclusion phase, $f_2$, is computed as the ratio of the number of phase 2 elements to the total number of elements, $N^2$. Then $f_1 = 1 - f_2$. The lower ($-$) and upper ($+$) bounds for the bulk modulus $K$ and shear modulus $G$ are given by the provided formulae. Special care is taken for the case of equal phase moduli ($K_1=K_2$ or $G_1=G_2$), where the corresponding lower and upper bounds are simply set to the common modulus value.\n\nThis procedure is implemented for each test case to derive the required numerical results.", "answer": "```python\nimport numpy as np\n\ndef get_constitutive_matrix(K, G):\n    \"\"\"Computes the plane strain constitutive matrix D.\"\"\"\n    lambda_lame = K - (2.0 / 3.0) * G\n    C11 = lambda_lame + 2 * G\n    C12 = lambda_lame\n    C33 = G\n    return np.array([\n        [C11, C12, 0],\n        [C12, C11, 0],\n        [0,   0,   C33]\n    ])\n\ndef get_element_stiffness_and_B_matrices(h):\n    \"\"\"\n    Computes the bilinear quad element stiffness matrix template and B-matrices.\n    The final stiffness matrix is obtained by k = detJ * B^T D B, summed over Gauss points.\n    We return the ingredients: B matrices for each Gauss point and detJ.\n    \"\"\"\n    gauss_points = [-1.0 / np.sqrt(3.0), 1.0 / np.sqrt(3.0)]\n    B_matrices_gp = []\n    \n    # corner_nodes_ref = [(-1,-1), (1,-1), (1,1), (-1,1)]\n    xi_coords = [-1, 1, 1, -1]\n    eta_coords = [-1, -1, 1, 1]\n\n    for eta_gp in gauss_points:\n        for xi_gp in gauss_points:\n            B = np.zeros((3, 8))\n            for i in range(4):\n                xi_i, eta_i = xi_coords[i], eta_coords[i]\n                \n                # Derivatives of shape functions w.r.t. reference coordinates\n                dN_dxi = 0.25 * xi_i * (1 + eta_i * eta_gp)\n                dN_deta = 0.25 * eta_i * (1 + xi_i * xi_gp)\n                \n                # Jacobian for a square element of side h\n                # J = [[h/2, 0], [0, h/2]]\n                # J_inv = [[2/h, 0], [0, 2/h]]\n                \n                # Derivatives of shape functions w.r.t. global coordinates\n                dN_dx = dN_dxi * (2.0 / h)\n                dN_dy = dN_deta * (2.0 / h)\n                \n                # Assemble B_i into B\n                B[0, 2 * i] = dN_dx\n                B[1, 2 * i + 1] = dN_dy\n                B[2, 2 * i] = dN_dy\n                B[2, 2 * i + 1] = dN_dx\n            B_matrices_gp.append(B)\n            \n    # For a square element, det(J) is constant\n    det_J = (h / 2.0)**2\n    \n    return B_matrices_gp, det_J\n\ndef run_fem(N, r, K1, G1, K2, G2, macro_strain):\n    \"\"\"Main FEM routine for a single load case.\"\"\"\n    h = 1.0 / N\n    num_nodes = (N + 1)**2\n    num_elements = N**2\n    total_dofs = 2 * num_nodes\n\n    # Material properties\n    D1 = get_constitutive_matrix(K1, G1)\n    D2 = get_constitutive_matrix(K2, G2)\n\n    # Pre-compute element stiffness components\n    B_matrices_gp, det_J = get_element_stiffness_and_B_matrices(h)\n\n    # Assembly\n    K_global = np.zeros((total_dofs, total_dofs))\n    element_phases = []\n    \n    for j in range(N):\n        for i in range(N):\n            elem_idx = j * N + i\n            \n            # Element phase assignment\n            xc = (i + 0.5) * h\n            yc = (j + 0.5) * h\n            is_phase2 = (xc - 0.5)**2 + (yc - 0.5)**2 <= r**2\n            D_elem = D2 if is_phase2 else D1\n            element_phases.append(2 if is_phase2 else 1)\n\n            # Element stiffness calculation\n            k_elem = np.zeros((8, 8))\n            for B_gp in B_matrices_gp:\n                k_elem += B_gp.T @ D_elem @ B_gp * det_J\n            \n            # Global assembly\n            node_0 = j * (N + 1) + i\n            node_1 = j * (N + 1) + i + 1\n            node_2 = (j + 1) * (N + 1) + i + 1\n            node_3 = (j + 1) * (N + 1) + i\n            \n            nodes = [node_0, node_1, node_2, node_3]\n            dof_indices = []\n            for node in nodes:\n                dof_indices.extend([2 * node, 2 * node + 1])\n                \n            K_global[np.ix_(dof_indices, dof_indices)] += k_elem\n\n    # Apply Boundary Conditions\n    boundary_dofs = []\n    internal_dofs = []\n    node_coords = np.zeros((num_nodes, 2))\n    \n    for j in range(N + 1):\n        for i in range(N + 1):\n            node_idx = j * (N + 1) + i\n            dof_x, dof_y = 2 * node_idx, 2 * node_idx + 1\n            node_coords[node_idx] = [i * h, j * h]\n            \n            if i == 0 or i == N or j == 0 or j == N:\n                boundary_dofs.extend([dof_x, dof_y])\n            else:\n                internal_dofs.extend([dof_x, dof_y])\n\n    U_B = np.zeros(len(boundary_dofs))\n    e_xx, e_yy, gam_xy = macro_strain\n\n    for i, dof in enumerate(boundary_dofs):\n        node_idx = dof // 2\n        x, y = node_coords[node_idx]\n        if dof % 2 == 0:  # x-dof\n            U_B[i] = e_xx * x + gam_xy / 2.0 * y\n        else: # y-dof\n            U_B[i] = e_yy * y + gam_xy / 2.0 * x\n\n    K_II = K_global[np.ix_(internal_dofs, internal_dofs)]\n    K_IB = K_global[np.ix_(internal_dofs, boundary_dofs)]\n    \n    F_I = -K_IB @ U_B\n    U_I = np.linalg.solve(K_II, F_I)\n\n    # Reconstruct full displacement vector\n    U_global = np.zeros(total_dofs)\n    U_global[internal_dofs] = U_I\n    U_global[boundary_dofs] = U_B\n\n    # Post-processing: Stress averaging\n    avg_stress = np.zeros(3)\n    for j in range(N):\n        for i in range(N):\n            elem_idx = j * N + i\n            D_elem = D2 if element_phases[elem_idx] == 2 else D1\n            \n            node_0 = j * (N + 1) + i\n            node_1 = j * (N + 1) + i + 1\n            node_2 = (j + 1) * (N + 1) + i + 1\n            node_3 = (j + 1) * (N + 1) + i\n            nodes = [node_0, node_1, node_2, node_3]\n            \n            dof_indices = []\n            for node in nodes:\n                dof_indices.extend([2 * node, 2 * node + 1])\n            u_elem = U_global[dof_indices]\n\n            for B_gp in B_matrices_gp:\n                stress_gp = D_elem @ B_gp @ u_elem\n                avg_stress += stress_gp\n\n    avg_stress /= (num_elements * 4) # Average over all Gauss points\n    f2 = sum(1 for phase in element_phases if phase == 2) / num_elements\n    \n    return avg_stress, f2\n\ndef calculate_hs_bounds(f1, f2, K1, G1, K2, G2):\n    # Equal moduli case\n    if K1 == K2:\n        K_hs_lower, K_hs_upper = K1, K1\n    else:\n        # Lower bound\n        num = f2\n        den = 1.0 / (K2 - K1) + (3 * f1) / (3 * K1 + 4 * G1)\n        K_hs_lower = K1 + num / den\n        # Upper bound\n        num = f1\n        den = 1.0 / (K1 - K2) + (3 * f2) / (3 * K2 + 4 * G2)\n        K_hs_upper = K2 + num / den\n\n    if G1 == G2:\n        G_hs_lower, G_hs_upper = G1, G1\n    else:\n        # Lower bound\n        num = f2\n        den = 1.0 / (G2 - G1) + (6 * f1 * (K1 + 2 * G1)) / (5 * G1 * (3 * K1 + 4 * G1))\n        G_hs_lower = G1 + num / den\n        # Upper bound\n        num = f1\n        den = 1.0 / (G1 - G2) + (6 * f2 * (K2 + 2 * G2)) / (5 * G2 * (3 * K2 + 4 * G2))\n        G_hs_upper = G2 + num / den\n    \n    # Ensure lower is not greater than upper due to formula differences (phase 1 vs 2)\n    return min(K_hs_lower, K_hs_upper), max(K_hs_lower, K_hs_upper), \\\n           min(G_hs_lower, G_hs_upper), max(G_hs_lower, G_hs_upper)\n\ndef process_case(N, r, K1, G1, K2, G2):\n    gamma0 = 2.0e-3\n    e0 = 1.0e-3\n    \n    # 1. Shear test\n    shear_strain = (0.0, 0.0, gamma0)\n    avg_stress_shear, f2 = run_fem(N, r, K1, G1, K2, G2, shear_strain)\n    G_eff = avg_stress_shear[2] / gamma0\n    \n    # 2. Biaxial test\n    biaxial_strain = (e0, e0, 0.0)\n    avg_stress_biaxial, _ = run_fem(N, r, K1, G1, K2, G2, biaxial_strain)\n    \n    # Assuming macroscopic isotropy, <sigma_xx> = <sigma_yy>\n    # We use <sigma_xx> as per problem\n    lambda_eff = (avg_stress_biaxial[0] / (2.0 * e0)) - G_eff\n    K_eff = lambda_eff + (2.0 / 3.0) * G_eff\n    \n    # 3. Hashin-Shtrikman bounds\n    f1 = 1.0 - f2\n    K_hs_lower, K_hs_upper, G_hs_lower, G_hs_upper = calculate_hs_bounds(f1, f2, K1, G1, K2, G2)\n    \n    return [K_eff, G_eff, K_hs_lower, K_hs_upper, G_hs_lower, G_hs_upper]\n\ndef solve():\n    test_cases = [\n        (16, 0.30, 50.0, 20.0, 150.0, 60.0),\n        (12, 0.00, 50.0, 20.0, 150.0, 60.0),\n        (14, 0.35, 80.0, 30.0, 80.0, 30.0),\n        (18, 0.40, 50.0, 20.0, 1000.0, 400.0)\n    ]\n\n    all_results = []\n    for case in test_cases:\n        N, r, K1, G1, K2, G2 = case\n        result = process_case(N, r, K1, G1, K2, G2)\n        all_results.append(result)\n    \n    print(str(all_results).replace(\" \", \"\"))\n\nsolve()\n```", "id": "2565193"}]}