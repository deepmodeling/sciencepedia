{"hands_on_practices": [{"introduction": "The journey into the Finite Element Method begins with its most fundamental building block: the element. This practice guides you through the essential process of deriving the discrete algebraic counterparts—the element stiffness matrix $K_e$ and load vector $f_e$—from the continuous differential equation for one-dimensional heat conduction. Mastering this translation from the governing physics (strong form) to a computable matrix system (weak form and discretization) is a cornerstone of understanding and applying FEM to any engineering problem. [@problem_id:2599170]", "problem": "Consider one-dimensional steady-state heat conduction in a homogeneous prismatic rod of length $h$ with constant thermal conductivity $k$ and spatially uniform volumetric heat generation $Q$. Assume unit cross-sectional area so that all expressions are per unit out-of-plane thickness. The governing strong form on an element is $-\\dfrac{d}{dx}\\!\\left(k\\,\\dfrac{dT}{dx}\\right)=Q$ on $x\\in[0,h]$. Using the Finite Element Method (FEM) with the standard Galerkin approach and two-node linear interpolation, proceed as follows:\n\n1. Starting from the strong form, construct the weighted residual statement, integrate by parts to obtain the weak form over the element, and clearly identify the bilinear and linear forms.\n\n2. Using linear shape functions on the element with nodes at $x=0$ and $x=h$, derive the element stiffness matrix $K_e$ and the consistent element load vector $f_e$ for constant $k$ and $Q$.\n\n3. Define the discrete energy functional for the element,\n$$\n\\Pi(T_e)\\;=\\;\\dfrac{1}{2}\\,T_e^{\\mathsf T}\\,K_e\\,T_e\\;-\\;T_e^{\\mathsf T}\\,f_e,\n$$\nwhere $T_e=\\begin{bmatrix}T_1 & T_2\\end{bmatrix}^{\\mathsf T}$ collects the nodal temperatures. Evaluate $\\Pi(T_e)$ at the specific nodal temperature vector $T_e=\\begin{bmatrix}0 & 1\\end{bmatrix}^{\\mathsf T}$.\n\nProvide your final answer as a single closed-form symbolic expression in terms of $k$, $h$, and $Q$. Do not evaluate numerically or round.", "solution": "The problem as stated is scientifically grounded, well-posed, objective, and self-contained. It is a standard exercise in the application of the Finite Element Method to a second-order boundary value problem, specifically one-dimensional steady-state heat conduction. All necessary parameters and governing equations are provided, and there are no contradictions or ambiguities. The problem is therefore deemed valid and a solution will be constructed.\n\nThe solution process proceeds in three stages as delineated by the problem statement.\n\nFirst, we derive the weak form of the governing equation. The strong form for an element of length $h$ is given as:\n$$-\\frac{d}{dx}\\left(k \\frac{dT}{dx}\\right) = Q, \\quad x \\in [0, h]$$\nThe residual $R(x)$ is formed by moving all terms to one side:\n$$R(x) = -\\frac{d}{dx}\\left(k \\frac{dT}{dx}\\right) - Q$$\nAccording to the Galerkin method, the residual must be orthogonal to a set of weighting functions $w(x)$ over the element domain. This is expressed as the weighted residual statement:\n$$\\int_{0}^{h} w(x) R(x) \\,dx = 0$$\nSubstituting the expression for the residual, we have:\n$$\\int_{0}^{h} w(x) \\left[ -\\frac{d}{dx}\\left(k \\frac{dT}{dx}\\right) - Q \\right] dx = 0$$\nThis can be separated into two terms:\n$$-\\int_{0}^{h} w(x) \\frac{d}{dx}\\left(k \\frac{dT}{dx}\\right) dx - \\int_{0}^{h} w(x) Q \\,dx = 0$$\nTo reduce the order of the derivative on the temperature field $T(x)$, we apply integration by parts to the first term, $\\int u \\,dv = [uv] - \\int v \\,du$. Let $u = w(x)$ and $dv = \\frac{d}{dx}\\left(k \\frac{dT}{dx}\\right)dx$. This gives $du = \\frac{dw}{dx}dx$ and $v = k \\frac{dT}{dx}$. Applying this yields:\n$$\\int_{0}^{h} \\frac{dw}{dx} k \\frac{dT}{dx} dx - \\left[ w(x) k \\frac{dT}{dx} \\right]_{0}^{h} - \\int_{0}^{h} w(x) Q \\,dx = 0$$\nRearranging gives the weak form:\n$$\\int_{0}^{h} k \\frac{dw}{dx} \\frac{dT}{dx} dx = \\int_{0}^{h} w(x) Q \\,dx + \\left[ w(x) k \\frac{dT}{dx} \\right]_{0}^{h}$$\nThis formulation is of the type $a(w, T) = L(w)$, where $a(w, T)$ is a bilinear form and $L(w)$ is a linear functional.\nThe bilinear form is identified as:\n$$a(w, T) = \\int_{0}^{h} k \\frac{dw}{dx} \\frac{dT}{dx} dx$$\nThe linear functional is:\n$$L(w) = \\int_{0}^{h} w(x) Q \\,dx - w(h)q_{h} + w(0)q_{0}$$\nwhere $q_{h} = -k \\frac{dT}{dx}|_{x=h}$ and $q_{0} = -k \\frac{dT}{dx}|_{x=0}$ are the heat fluxes at the element boundaries.\n\nSecond, we derive the element stiffness matrix $K_e$ and consistent load vector $f_e$. For a two-node linear element with nodes at $x=0$ and $x=h$, the temperature field $T(x)$ is approximated by $T_h(x) = N_1(x)T_1 + N_2(x)T_2$, where $T_1$ and $T_2$ are the nodal temperatures. The linear shape functions are:\n$$N_1(x) = 1 - \\frac{x}{h}, \\quad N_2(x) = \\frac{x}{h}$$\nTheir derivatives with respect to $x$ are:\n$$\\frac{dN_1}{dx} = -\\frac{1}{h}, \\quad \\frac{dN_2}{dx} = \\frac{1}{h}$$\nThe element stiffness matrix $K_e$ has components $K_{ij} = a(N_i, N_j) = \\int_0^h k \\frac{dN_i}{dx} \\frac{dN_j}{dx} dx$. For constant $k$:\n$$K_{11} = \\int_{0}^{h} k \\left(-\\frac{1}{h}\\right)\\left(-\\frac{1}{h}\\right) dx = \\frac{k}{h^2} \\int_{0}^{h} dx = \\frac{k}{h}$$\n$$K_{12} = K_{21} = \\int_{0}^{h} k \\left(-\\frac{1}{h}\\right)\\left(\\frac{1}{h}\\right) dx = -\\frac{k}{h^2} \\int_{0}^{h} dx = -\\frac{k}{h}$$\n$$K_{22} = \\int_{0}^{h} k \\left(\\frac{1}{h}\\right)\\left(\\frac{1}{h}\\right) dx = \\frac{k}{h^2} \\int_{0}^{h} dx = \\frac{k}{h}$$\nThus, the element stiffness matrix is:\n$$K_e = \\frac{k}{h} \\begin{pmatrix} 1 & -1 \\\\ -1 & 1 \\end{pmatrix}$$\nThe consistent element load vector $f_e$ due to the volumetric heat source $Q$ has components $f_{e,i} = \\int_0^h N_i(x) Q \\,dx$. For constant $Q$:\n$$f_{e,1} = \\int_{0}^{h} Q \\left(1 - \\frac{x}{h}\\right) dx = Q \\left[x - \\frac{x^2}{2h}\\right]_{0}^{h} = Q \\left(h - \\frac{h^2}{2h}\\right) = \\frac{Qh}{2}$$\n$$f_{e,2} = \\int_{0}^{h} Q \\left(\\frac{x}{h}\\right) dx = \\frac{Q}{h} \\left[\\frac{x^2}{2}\\right]_{0}^{h} = \\frac{Q}{h} \\frac{h^2}{2} = \\frac{Qh}{2}$$\nThus, the consistent element load vector is:\n$$f_e = \\frac{Qh}{2} \\begin{pmatrix} 1 \\\\ 1 \\end{pmatrix}$$\n\nThird, we evaluate the discrete energy functional $\\Pi(T_e) = \\frac{1}{2} T_e^{\\mathsf T} K_e T_e - T_e^{\\mathsf T} f_e$ for the given nodal temperature vector $T_e = \\begin{pmatrix} 0 & 1 \\end{pmatrix}^{\\mathsf T}$.\nWe compute the quadratic term first:\n$$T_e^{\\mathsf T} K_e T_e = \\begin{pmatrix} 0 & 1 \\end{pmatrix} \\left( \\frac{k}{h} \\begin{pmatrix} 1 & -1 \\\\ -1 & 1 \\end{pmatrix} \\right) \\begin{pmatrix} 0 \\\\ 1 \\end{pmatrix}$$\n$$= \\frac{k}{h} \\begin{pmatrix} 0 & 1 \\end{pmatrix} \\begin{pmatrix} -1 \\\\ 1 \\end{pmatrix} = \\frac{k}{h} ((0)(-1) + (1)(1)) = \\frac{k}{h}$$\nSo, the quadratic part of the functional is $\\frac{1}{2} (T_e^{\\mathsf T} K_e T_e) = \\frac{k}{2h}$.\nNext, we compute the linear term:\n$$T_e^{\\mathsf T} f_e = \\begin{pmatrix} 0 & 1 \\end{pmatrix} \\left( \\frac{Qh}{2} \\begin{pmatrix} 1 \\\\ 1 \\end{pmatrix} \\right)$$\n$$= \\frac{Qh}{2} ((0)(1) + (1)(1)) = \\frac{Qh}{2}$$\nFinally, we assemble the complete functional value:\n$$\\Pi(T_e) = \\frac{k}{2h} - \\frac{Qh}{2}$$\nThis expression can be combined into a single fraction:\n$$\\Pi(T_e) = \\frac{k - Qh^2}{2h}$$\nThis is the final symbolic expression for the value of the energy functional.", "answer": "$$ \\boxed{\\frac{k - Qh^{2}}{2h}} $$", "id": "2599170"}, {"introduction": "Building upon an understanding of the single element, this practice addresses the next logical step: assembling elements to model a complete physical system. You will construct and solve the global matrix equations for a one-dimensional bar subject to realistic, mixed boundary conditions—a fixed temperature at one end and convection at the other. This exercise emphasizes the practical skills of applying various boundary conditions and interpreting the solution by calculating physically meaningful quantities, such as the reaction heat flux required to maintain a prescribed temperature. [@problem_id:2599184]", "problem": "A straight bar of length $L = 0.3$ m and uniform cross-sectional area $A = 0.01$ m$^2$ conducts heat in one dimension under steady-state conditions. The thermal conductivity is constant, $k = 200$ W/(m K). The bar experiences a uniform volumetric heat generation $q = 1.0 \\times 10^{6}$ W/m$^3$. The left end at $x=0$ is subject to a prescribed (Dirichlet) temperature $T(0)=400$ K. The right end at $x=L$ is exposed to convection with heat transfer coefficient $h = 100$ W/(m$^2$ K) and ambient temperature $T_{\\infty} = 300$ K.\n\nUsing the Finite Element Method (FEM) with $2$ equal linear elements ($3$ nodes at $x=0$, $x=L/2$, and $x=L$):\n\n- Start from the steady-state energy balance and Fourier’s law to construct the weak form appropriate for this problem.\n- From the weak form, derive the element contributions and assemble the global system in terms of the global stiffness matrix $\\mathbf{K}$ and the global load vector $\\mathbf{F}$, including effects of the volumetric heat generation and the convective boundary at $x=L$.\n- Impose the Dirichlet boundary condition at $x=0$ and solve for the unknown nodal temperatures.\n- Define the nodal reaction heat rate at the Dirichlet node as the quantity required to balance the original assembled equation at that node, i.e., the residual that remains when the computed temperatures are substituted into the unmodified global equilibrium at that node. Compute this scalar quantity at $x=0$ and interpret its sign as the net heat exchange through the imposed boundary.\n\nExpress your final answer as a single heat rate in W. Round your answer to four significant figures.", "solution": "The problem is first validated to ensure it is scientifically grounded, well-posed, and objective.\n\nStep 1: Extract Givens\n-   Length of the bar: $L = 0.3$ m\n-   Cross-sectional area: $A = 0.01$ m$^2$\n-   Thermal conductivity: $k = 200$ W/(m K)\n-   Volumetric heat generation: $q = 1.0 \\times 10^{6}$ W/m$^3$\n-   Dirichlet boundary condition at $x=0$: $T(0) = 400$ K\n-   Convection boundary condition at $x=L$: heat transfer coefficient $h = 100$ W/(m$^2$ K), ambient temperature $T_{\\infty} = 300$ K\n-   Finite Element Method discretization: $2$ equal linear elements, resulting in $3$ nodes at $x_1=0$, $x_2=L/2=0.15$ m, and $x_3=L=0.3$ m.\n-   Task: Derive and solve the FEM system and compute the reaction heat rate at the Dirichlet node ($x=0$).\n\nStep 2: Validate Using Extracted Givens\n-   **Scientifically Grounded:** The problem describes one-dimensional, steady-state heat conduction, a fundamental and well-established topic in thermal engineering. The governing physics (energy balance and Fourier's law) are standard.\n-   **Well-Posed:** The problem is a well-posed boundary value problem. It specifies a second-order ordinary differential equation, the domain, and a complete set of boundary conditions (one Dirichlet, one Robin), which guarantees a unique solution.\n-   **Objective:** The problem is stated using precise, quantitative, and unambiguous language. All parameters are given with consistent physical units.\n-   **Completeness:** All necessary physical properties, geometric parameters, and boundary conditions are provided to formulate and solve the problem.\n-   **Feasibility:** The given values for thermal conductivity, dimensions, and heat loads are realistic for engineering materials and applications.\n\nStep 3: Verdict and Action\nThe problem is deemed **valid**. A full solution will be provided.\n\nThe governing equation for one-dimensional, steady-state heat conduction with a heat source is derived from an energy balance on a differential element. It is given by:\n$$ \\frac{d}{dx} \\left( k A \\frac{dT}{dx} \\right) + qA = 0 $$\nwhere $T$ is the temperature, $k$ is the thermal conductivity, $A$ is the cross-sectional area, and $q$ is the volumetric rate of heat generation.\n\nTo derive the weak form, we multiply the governing equation by a weight function $w(x)$ and integrate over the domain $[0, L]$:\n$$ \\int_{0}^{L} w \\left( \\frac{d}{dx} \\left( kA \\frac{dT}{dx} \\right) + qA \\right) dx = 0 $$\nApplying integration by parts to the first term yields:\n$$ \\left[ w kA \\frac{dT}{dx} \\right]_{0}^{L} - \\int_{0}^{L} \\frac{dw}{dx} kA \\frac{dT}{dx} dx + \\int_{0}^{L} w qA dx = 0 $$\nRearranging the terms, we get:\n$$ \\int_{0}^{L} kA \\frac{dw}{dx} \\frac{dT}{dx} dx = \\int_{0}^{L} w qA dx + \\left[ w kA \\frac{dT}{dx} \\right]_{0}^{L} $$\nThe term on the right, $\\left[ w kA \\frac{dT}{dx} \\right]_{0}^{L}$, represents the boundary heat fluxes. Let $Q(x) = -kA \\frac{dT}{dx}$ be the heat rate. The equation becomes:\n$$ \\int_{0}^{L} kA \\frac{dw}{dx} \\frac{dT}{dx} dx = \\int_{0}^{L} w qA dx + w(L)(-Q(L)) + w(0)Q(0) $$\nAt the right boundary ($x=L$), there is convection: $Q(L) = hA(T(L) - T_{\\infty})$. At the left boundary ($x=0$), the temperature is prescribed, and the heat rate $Q(0)$ is an unknown reaction. The weak form is thus:\n$$ \\int_{0}^{L} kA \\frac{dw}{dx} \\frac{dT}{dx} dx + w(L)hAT(L) = \\int_{0}^{L} w qA dx + w(L)hAT_{\\infty} + w(0)Q(0) $$\nIn the finite element method, we discretize the domain into elements. For a linear element of length $l_e$, the element stiffness matrix $\\mathbf{k}^{(e)}$ and element source vector $\\mathbf{f}_q^{(e)}$ are:\n$$ \\mathbf{k}^{(e)} = \\frac{kA}{l_e} \\begin{pmatrix} 1 & -1 \\\\ -1 & 1 \\end{pmatrix}, \\quad \\mathbf{f}_q^{(e)} = \\frac{qAl_e}{2} \\begin{pmatrix} 1 \\\\ 1 \\end{pmatrix} $$\nThe problem uses $2$ elements, so $l_e = L/2 = 0.3/2 = 0.15$ m. We compute the numerical values:\n$$ \\frac{kA}{l_e} = \\frac{200 \\, \\text{W/(m K)} \\times 0.01 \\, \\text{m}^2}{0.15 \\, \\text{m}} = \\frac{2}{0.15} = \\frac{40}{3} \\, \\text{W/K} $$\n$$ \\frac{qAl_e}{2} = \\frac{(1.0 \\times 10^6 \\, \\text{W/m}^3) \\times 0.01 \\, \\text{m}^2 \\times 0.15 \\, \\text{m}}{2} = 750 \\, \\text{W} $$\nThe element matrices for both elements ($e=1$ for nodes $1,2$ and $e=2$ for nodes $2,3$) are identical:\n$$ \\mathbf{k}^{(1)} = \\mathbf{k}^{(2)} = \\frac{40}{3} \\begin{pmatrix} 1 & -1 \\\\ -1 & 1 \\end{pmatrix}, \\quad \\mathbf{f}_q^{(1)} = \\mathbf{f}_q^{(2)} = \\begin{pmatrix} 750 \\\\ 750 \\end{pmatrix} $$\nAssembling the global stiffness matrix $\\mathbf{K}$ and global source vector $\\mathbf{F}_q$:\n$$ \\mathbf{K} = \\begin{pmatrix} \\frac{40}{3} & -\\frac{40}{3} & 0 \\\\ -\\frac{40}{3} & \\frac{40}{3}+\\frac{40}{3} & -\\frac{40}{3} \\\\ 0 & -\\frac{40}{3} & \\frac{40}{3} \\end{pmatrix} = \\frac{40}{3} \\begin{pmatrix} 1 & -1 & 0 \\\\ -1 & 2 & -1 \\\\ 0 & -1 & 1 \\end{pmatrix} $$\n$$ \\mathbf{F}_q = \\begin{pmatrix} 750 \\\\ 750+750 \\\\ 750 \\end{pmatrix} = \\begin{pmatrix} 750 \\\\ 1500 \\\\ 750 \\end{pmatrix} $$\nNext, we incorporate the convection boundary condition at node $3$ ($x=L$). This adds a term $hA$ to the $(3,3)$ entry of the stiffness matrix and a term $hAT_{\\infty}$ to the $3$rd entry of the force vector.\n$hA = 100 \\, \\text{W/(m}^2 \\text{K)} \\times 0.01 \\, \\text{m}^2 = 1$ W/K.\n$hAT_{\\infty} = 1 \\, \\text{W/K} \\times 300 \\, \\text{K} = 300$ W.\nThe modified global system $\\mathbf{K_{global}}\\mathbf{T} = \\mathbf{F_{global}}$ becomes:\n$$ \\mathbf{K_{global}} = \\frac{40}{3} \\begin{pmatrix} 1 & -1 & 0 \\\\ -1 & 2 & -1 \\\\ 0 & -1 & 1 \\end{pmatrix} + \\begin{pmatrix} 0 & 0 & 0 \\\\ 0 & 0 & 0 \\\\ 0 & 0 & 1 \\end{pmatrix} = \\frac{1}{3} \\begin{pmatrix} 40 & -40 & 0 \\\\ -40 & 80 & -40 \\\\ 0 & -40 & 43 \\end{pmatrix} $$\n$$ \\mathbf{F_{global}} = \\begin{pmatrix} 750 \\\\ 1500 \\\\ 750 \\end{pmatrix} + \\begin{pmatrix} 0 \\\\ 0 \\\\ 300 \\end{pmatrix} = \\begin{pmatrix} 750 \\\\ 1500 \\\\ 1050 \\end{pmatrix} $$\nThe full system of equations is:\n$$ \\frac{1}{3} \\begin{pmatrix} 40 & -40 & 0 \\\\ -40 & 80 & -40 \\\\ 0 & -40 & 43 \\end{pmatrix} \\begin{pmatrix} T_1 \\\\ T_2 \\\\ T_3 \\end{pmatrix} = \\begin{pmatrix} 750 \\\\ 1500 \\\\ 1050 \\end{pmatrix} $$\nWe apply the Dirichlet boundary condition $T_1 = 400$ K. The unknown temperatures $T_2$ and $T_3$ are found by solving the second and third equations:\n2) $-\\frac{40}{3} T_1 + \\frac{80}{3} T_2 - \\frac{40}{3} T_3 = 1500 \\implies -40(400) + 80 T_2 - 40 T_3 = 4500 \\implies 80 T_2 - 40 T_3 = 20500 \\implies 2T_2-T_3 = 512.5$\n3) $-\\frac{40}{3} T_2 + \\frac{43}{3} T_3 = 1050 \\implies -40 T_2 + 43 T_3 = 3150$\n\nWe solve this $2 \\times 2$ system. From the first equation, $T_3 = 2T_2 - 512.5$. Substituting into the second:\n$$ -40T_2 + 43(2T_2 - 512.5) = 3150 $$\n$$ -40T_2 + 86T_2 - 22037.5 = 3150 $$\n$$ 46T_2 = 25187.5 $$\n$$ T_2 = \\frac{25187.5}{46} = \\frac{50375}{92} \\approx 547.554 \\, \\text{K} $$\nThen, $T_3$:\n$$ T_3 = 2\\left(\\frac{50375}{92}\\right) - 512.5 = \\frac{50375}{46} - \\frac{23575}{46} = \\frac{26800}{46} = \\frac{13400}{23} \\approx 582.609 \\, \\text{K} $$\nFinally, we compute the reaction heat rate at the Dirichlet node ($x=0$), defined as the residual of the first equation in the unmodified global system. The reaction rate $R_1$ is given by $R_1 = (\\mathbf{K_{global}}\\mathbf{T})_1 - (\\mathbf{F_{global}})_1$.\n$$ R_1 = \\left( \\frac{40}{3} T_1 - \\frac{40}{3} T_2 \\right) - 750 $$\nSubstituting the known values for $T_1$ and the calculated $T_2$:\n$$ R_1 = \\frac{40}{3} \\left( 400 - \\frac{50375}{92} \\right) - 750 $$\n$$ R_1 = \\frac{40}{3} \\left( \\frac{400 \\times 92 - 50375}{92} \\right) - 750 = \\frac{40}{3} \\left( \\frac{36800 - 50375}{92} \\right) - 750 $$\n$$ R_1 = \\frac{40}{3} \\left( \\frac{-13575}{92} \\right) - 750 $$\nNoting that $40/92 = 10/23$:\n$$ R_1 = \\frac{10}{3} \\left( \\frac{-13575}{23} \\right) - 750 = \\frac{-135750}{69} - \\frac{750 \\times 69}{69} $$\n$$ R_1 = \\frac{-135750 - 51750}{69} = \\frac{-187500}{69} $$\nBoth numerator and denominator are divisible by $3$:\n$$ R_1 = \\frac{-62500}{23} \\approx -2717.3913 \\, \\text{W} $$\nThe sign is negative, indicating that heat is being removed from the bar at node $1$ to maintain the temperature at $400$ K. This is the reaction heat rate.\nRounding to four significant figures, the value is $-2717$ W.", "answer": "$$ \\boxed{-2717} $$", "id": "2599184"}, {"introduction": "This advanced practice challenges you to synthesize the core concepts of FEM into a complete, two-dimensional solver and explore the crucial topic of solution verification. You will implement a program for a heat conduction problem with a known \"manufactured solution,\" which allows for the exact calculation of error. The primary goal is to implement and evaluate a Zienkiewicz-Zhu type a posteriori error estimator using Superconvergent Patch Recovery (SPR), providing a powerful technique for assessing the accuracy of finite element simulations in practice. [@problem_id:2599230]", "problem": "Implement a program that constructs a Superconvergent Patch Recovery (SPR) for steady-state heat conduction in two space dimensions and uses it to produce an improved a posteriori error estimate. Start from the following fundamental base: conservation of energy and Fourier’s law. Conservation of energy in a stationary regime gives that the divergence of the heat flux equals the source, and Fourier’s law expresses the flux as proportional to the negative temperature gradient. Specifically, let the temperature field be denoted by $T$, the symmetric positive-definite conductivity tensor by $\\mathbf{K}$, and the heat flux by $\\mathbf{q}$. The governing equations are $-\\nabla \\cdot \\mathbf{q} = f$ in the interior and $\\mathbf{q} = -\\mathbf{K} \\nabla T$ with Dirichlet boundary data prescribed on the boundary. Derive the weak form by multiplying the conservation equation by an admissible test function and integrating by parts, using the heat flux definition to express the bilinear form in terms of $\\nabla T$. Then, using a conforming space of continuous piecewise-linear trial and test functions on a triangulation, obtain the discrete linear system. You must not use any shortcut formulas that bypass these derivations.\n\nGiven the exact manufactured solution $T(x,y) = \\sin(\\pi x)\\sin(\\pi y)$ on the unit square domain $[0,1]\\times[0,1]$ with homogeneous Dirichlet boundary conditions enforced by prescribing $T$ itself on the boundary, construct the body source $f$ implied by substituting $T$ and a constant tensor $\\mathbf{K}$ into the strong form. You must use the following mesh family: a structured partition of the unit square into $N_x \\times N_y$ rectangles, each subdivided into two right triangles along the descending diagonal. For each triangle, form the element stiffness using the gradients of the linear shape functions and assemble globally.\n\nDefine the following quantities in terms of the exact and numerical solutions and the conductivity tensor:\n- The exact flux $\\mathbf{q} = -\\mathbf{K}\\nabla T$.\n- The discrete flux per element $\\mathbf{q}_h$ computed from the piecewise-constant gradient of the discrete solution $T_h$ on each triangle.\n- The recovered flux field $\\tilde{\\mathbf{q}}$ obtained by Superconvergent Patch Recovery (SPR), where on each vertex patch you perform two independent local least-squares fits of degree one polynomials in $x$ and $y$ to the sampled components of $\\mathbf{q}_h$ at the centroids of neighboring elements, returning nodal values of $\\tilde{\\mathbf{q}}$ by evaluating the fitted polynomials at the vertex. If an underdetermined fit arises (for example, insufficient sample points at a corner), consistently fall back to the average of the sampled fluxes on the patch for that component.\n\nUse these to define quantitatively:\n- The energy norm of the exact solution $\\lVert T \\rVert_E = \\left(\\int_{\\Omega} (\\nabla T)^{\\top}\\mathbf{K}\\nabla T \\, \\mathrm{d}\\Omega\\right)^{1/2}$.\n- The exact energy-norm error $\\lVert T - T_h \\rVert_E = \\left(\\int_{\\Omega} (\\nabla T - \\nabla T_h)^{\\top}\\mathbf{K}(\\nabla T - \\nabla T_h) \\, \\mathrm{d}\\Omega\\right)^{1/2}$.\n- The Zienkiewicz–Zhu type estimator based on SPR $\\eta = \\left(\\int_{\\Omega} (\\tilde{\\mathbf{q}} - \\mathbf{q}_h)^{\\top}\\mathbf{K}^{-1}(\\tilde{\\mathbf{q}} - \\mathbf{q}_h) \\, \\mathrm{d}\\Omega\\right)^{1/2}$.\n\nCompute all integrals by a consistent single-point centroid rule on each triangle. Treat all quantities as dimensionless; no physical units are required in the final results.\n\nYour program must:\n- Build and solve the Finite Element Method (FEM) linear system for the manufactured solution with Dirichlet boundary conditions set from $T$ on the boundary.\n- Compute the per-element discrete flux $\\mathbf{q}_h$.\n- Construct the recovered flux $\\tilde{\\mathbf{q}}$ via Superconvergent Patch Recovery (SPR) as specified.\n- Estimate, by centroid quadrature, the global exact energy-norm error, the global estimator $\\eta$, and the energy norm of the exact solution.\n- Report, for each test case, the triple consisting of the relative exact error $\\lVert T - T_h \\rVert_E / \\lVert T \\rVert_E$, the relative estimator $\\eta / \\lVert T \\rVert_E$, and the effectivity index $\\eta / \\lVert T - T_h \\rVert_E$.\n\nTest suite and coverage:\n- Case $1$: $N_x = 4$, $N_y = 4$, isotropic $\\mathbf{K} = \\mathrm{diag}(1,1)$.\n- Case $2$: $N_x = 8$, $N_y = 8$, isotropic $\\mathbf{K} = \\mathrm{diag}(1,1)$.\n- Case $3$: $N_x = 8$, $N_y = 8$, anisotropic $\\mathbf{K} = \\mathrm{diag}(10,1)$.\n\nAngle units do not apply. All outputs are dimensionless floats.\n\nFinal output format:\n- Your program should produce a single line of output containing the results as a comma-separated list of lists, one inner list per test case, each inner list ordered as $[\\lVert T - T_h \\rVert_E / \\lVert T \\rVert_E,\\ \\eta / \\lVert T \\rVert_E,\\ \\eta / \\lVert T - T_h \\rVert_E]$, and enclosed in square brackets. For example: $[[a_1,b_1,c_1],[a_2,b_2,c_2],[a_3,b_3,c_3]]$, where each $a_i,b_i,c_i$ is a float.", "solution": "The problem requires the implementation of a Finite Element Method (FEM) solver for two-dimensional steady-state heat conduction, followed by a Superconvergent Patch Recovery (SPR) procedure to compute an a posteriori error estimate. The analysis must begin from first principles.\n\nLet $\\Omega \\subset \\mathbb{R}^2$ be a domain with boundary $\\partial\\Omega$. The temperature field is denoted by $T(\\mathbf{x})$, the heat flux by $\\mathbf{q}(\\mathbf{x})$, the heat source by $f(\\mathbf{x})$, and the thermal conductivity by a symmetric positive-definite tensor $\\mathbf{K}$.\n\nThe governing physical principles are:\n1.  **Conservation of Energy (steady state)**: The net heat flux out of any infinitesimal control volume is balanced by the internal heat generation. In differential form, this is expressed as:\n    $$ -\\nabla \\cdot \\mathbf{q} = f $$\n2.  **Fourier's Law of Heat Conduction**: The heat flux is proportional to the negative of the temperature gradient.\n    $$ \\mathbf{q} = -\\mathbf{K} \\nabla T $$\n\nCombining these two equations yields the strong form of the governing partial differential equation (PDE) for temperature:\n$$ -\\nabla \\cdot (\\mathbf{K} \\nabla T) = f \\quad \\text{in } \\Omega $$\nThe problem specifies Dirichlet boundary conditions, where the temperature is prescribed on the boundary:\n$$ T = g \\quad \\text{on } \\partial\\Omega $$\n\nTo derive the weak form, we multiply the PDE by an arbitrary test function $v$ from a suitable space of functions (here, the Sobolev space $H_0^1(\\Omega)$ of functions that are zero on the Dirichlet boundary) and integrate over the domain $\\Omega$:\n$$ \\int_{\\Omega} (-\\nabla \\cdot (\\mathbf{K} \\nabla T)) v \\, \\mathrm{d}\\Omega = \\int_{\\Omega} f v \\, \\mathrm{d}\\Omega $$\nApplying the divergence theorem (integration by parts) to the left-hand side:\n$$ \\int_{\\Omega} (\\mathbf{K} \\nabla T) \\cdot \\nabla v \\, \\mathrm{d}\\Omega - \\int_{\\partial\\Omega} v (\\mathbf{K} \\nabla T) \\cdot \\mathbf{n} \\, \\mathrm{d}\\Omega = \\int_{\\Omega} f v \\, \\mathrm{d}\\Omega $$\nSince the test function $v$ is chosen to be zero on the boundary $\\partial\\Omega$, the boundary integral vanishes. This gives the standard weak formulation: Find $T \\in H^1(\\Omega)$ such that $T=g$ on $\\partial\\Omega$ and for all $v \\in H_0^1(\\Omega)$:\n$$ a(T, v) = L(v) $$\nwith the bilinear form $a(T,v)$ and linear form $L(v)$ defined as:\n$$ a(T,v) = \\int_{\\Omega} (\\nabla v)^{\\top} \\mathbf{K} (\\nabla T) \\, \\mathrm{d}\\Omega $$\n$$ L(v) = \\int_{\\Omega} f v \\, \\mathrm{d}\\Omega $$\n\nFor the Finite Element Method, we discretize the domain $\\Omega$ into a mesh of triangular elements and approximate the temperature field $T$ by a piecewise polynomial function $T_h$. Using continuous piecewise-linear ($P^1$) basis functions $N_j(\\mathbf{x})$, the approximate solution is written as a linear combination:\n$$ T_h(\\mathbf{x}) = \\sum_{j=1}^{N_{nodes}} T_j N_j(\\mathbf{x}) $$\nwhere $T_j$ are the unknown temperature values at the mesh nodes $j$. We use the same basis functions for the test functions (Galerkin method), $v_h = \\sum_{i=1}^{N_{nodes}} c_i N_i(\\mathbf{x})$. Substituting these into the weak form leads to a system of linear equations $\\mathbf{K}_{global} \\mathbf{T} = \\mathbf{F}$, where $\\mathbf{T}$ is the vector of nodal temperatures.\n\nThe entries of the global stiffness matrix $\\mathbf{K}_{global}$ and load vector $\\mathbf{F}$ are assembled from element-level contributions:\n$$ (\\mathbf{K}_{global})_{ij} = a(N_j, N_i) = \\int_{\\Omega} (\\nabla N_i)^{\\top} \\mathbf{K} (\\nabla N_j) \\, \\mathrm{d}\\Omega $$\n$$ (\\mathbf{F})_i = L(N_i) = \\int_{\\Omega} f N_i \\, \\mathrm{d}\\Omega $$\nFor a single triangular element $\\Omega_e$ with nodes $1, 2, 3$, the linear basis functions $N_k^e$ have constant gradients $\\nabla N_k^e$ over the element. The element stiffness matrix $\\mathbf{k}^e$ has entries:\n$$ k_{ij}^e = \\int_{\\Omega_e} (\\nabla N_i^e)^{\\top} \\mathbf{K} (\\nabla N_j^e) \\, \\mathrm{d}\\Omega_e = ((\\nabla N_i^e)^{\\top} \\mathbf{K} (\\nabla N_j^e)) A_e $$\nwhere $A_e$ is the area of the element. This can be written in matrix form as $\\mathbf{k}^e = A_e (\\mathbf{B}^e)^{\\top} \\mathbf{K} \\mathbf{B}^e$, where $\\mathbf{B}^e$ is the $2 \\times 3$ matrix whose columns are the gradients $\\nabla N_k^e$.\n\nThe problem states to use single-point centroid quadrature. The element load vector $\\mathbf{f}^e$ is:\n$$ f_i^e = \\int_{\\Omega_e} f N_i^e \\, \\mathrm{d}\\Omega_e \\approx f(\\mathbf{x}_c^e) N_i^e(\\mathbf{x}_c^e) A_e $$\nAt the centroid $\\mathbf{x}_c^e$ of a linear triangle, $N_i^e(\\mathbf{x}_c^e) = 1/3$ for all three nodes $i$. Thus:\n$$ f_i^e \\approx \\frac{A_e}{3} f(\\mathbf{x}_c^e) $$\n\nThe manufactured solution is $T(x,y) = \\sin(\\pi x)\\sin(\\pi y)$ on $\\Omega = [0,1]^2$. The boundary conditions are homogeneous Dirichlet since $T=0$ on $\\partial\\Omega$. The source term $f$ is derived by substituting $T$ into the strong form:\n$$ \\nabla T = \\begin{pmatrix} \\pi \\cos(\\pi x)\\sin(\\pi y) \\\\ \\pi \\sin(\\pi x)\\cos(\\pi y) \\end{pmatrix} $$\n$$ f = -\\nabla \\cdot (-\\mathbf{K} \\nabla T) = \\nabla \\cdot (\\mathbf{K} \\nabla T) $$\nFor a constant diagonal tensor $\\mathbf{K} = \\mathrm{diag}(K_{xx}, K_{yy})$:\n$$ f = \\frac{\\partial}{\\partial x}(K_{xx} \\pi \\cos(\\pi x)\\sin(\\pi y)) + \\frac{\\partial}{\\partial y}(K_{yy} \\pi \\sin(\\pi x)\\cos(\\pi y)) $$\n$$ f(x,y) = -K_{xx} \\pi^2 \\sin(\\pi x)\\sin(\\pi y) - K_{yy} \\pi^2 \\sin(\\pi x)\\sin(\\pi y) = (K_{xx} + K_{yy})\\pi^2 \\sin(\\pi x)\\sin(\\pi y) $$\nThis function $f$ is used to compute the load vector.\n\nAfter solving the linear system for the interior nodal temperatures $T_h$, we perform post-processing.\nThe discrete flux $\\mathbf{q}_h^e$ on each element $e$ is constant:\n$$ \\mathbf{q}_h^e = -\\mathbf{K} \\nabla T_h^e = -\\mathbf{K} \\sum_{i=1}^3 T_i^e \\nabla N_i^e $$\n\nFor Superconvergent Patch Recovery (SPR), for each vertex $v$ of the mesh, we construct a patch of elements sharing that vertex. We sample the discrete flux components $(\\mathbf{q}_h)_x$ and $(\\mathbf{q}_h)_y$ at the centroid of each element in the patch. For each component, we find a linear polynomial $\\tilde{p}(x,y) = a_0 + a_1 x + a_2 y$ that best fits the sampled values in a least-squares sense. This involves solving a linear system $\\mathbf{A}\\mathbf{c}=\\mathbf{b}$ for the coefficients $\\mathbf{c}=(a_0, a_1, a_2)^{\\top}$, where $\\mathbf{A}$ contains the polynomial basis functions evaluated at the centroids. If this system is underdetermined (i.e., $\\mathrm{rank}(\\mathbf{A}) < 3$), the recovered value at the vertex is the average of the sampled component values in the patch. Otherwise, the recovered value is $\\tilde{p}(x_v, y_v)$. This gives a recovered flux vector $\\tilde{\\mathbf{q}}_v$ at each node $v$. The recovered flux field $\\tilde{\\mathbf{q}}$ is then interpolated over each element using the linear basis functions:\n$$ \\tilde{\\mathbf{q}}(\\mathbf{x}) = \\sum_{i=1}^3 \\tilde{\\mathbf{q}}_i N_i^e(\\mathbf{x}) \\quad \\text{for } \\mathbf{x} \\in \\Omega_e $$\n\nFinally, we compute the error quantities using centroid quadrature.\n1.  **Energy Norm of Exact Solution**:\n    $$ \\lVert T \\rVert_E^2 = \\int_{\\Omega} (\\nabla T)^{\\top}\\mathbf{K}\\nabla T \\, \\mathrm{d}\\Omega \\approx \\sum_{e \\in \\mathcal{T}_h} (\\nabla T(\\mathbf{x}_c^e))^{\\top}\\mathbf{K}(\\nabla T(\\mathbf{x}_c^e)) A_e $$\n2.  **Exact Energy-Norm Error**:\n    $$ \\lVert T - T_h \\rVert_E^2 = \\int_{\\Omega} (\\nabla T - \\nabla T_h)^{\\top}\\mathbf{K}(\\nabla T - \\nabla T_h) \\, \\mathrm{d}\\Omega \\approx \\sum_{e \\in \\mathcal{T}_h} (\\nabla T(\\mathbf{x}_c^e) - \\nabla T_h^e)^{\\top}\\mathbf{K}(\\nabla T(\\mathbf{x}_c^e) - \\nabla T_h^e) A_e $$\n3.  **Zienkiewicz-Zhu Estimator**:\n    $$ \\eta^2 = \\int_{\\Omega} (\\tilde{\\mathbf{q}} - \\mathbf{q}_h)^{\\top}\\mathbf{K}^{-1}(\\tilde{\\mathbf{q}} - \\mathbf{q}_h) \\, \\mathrm{d}\\Omega \\approx \\sum_{e \\in \\mathcal{T}_h} (\\tilde{\\mathbf{q}}(\\mathbf{x}_c^e) - \\mathbf{q}_h^e)^{\\top}\\mathbf{K}^{-1}(\\tilde{\\mathbf{q}}(\\mathbf{x}_c^e) - \\mathbf{q}_h^e) A_e $$\n    where $\\tilde{\\mathbf{q}}(\\mathbf{x}_c^e) = \\frac{1}{3}\\sum_{i=1}^3 \\tilde{\\mathbf{q}}_i$ for element $e$ with vertices $i=1,2,3$.\n\nThe final reported values are the relative error $\\lVert T-T_h \\rVert_E / \\lVert T \\rVert_E$, the relative estimator $\\eta / \\lVert T \\rVert_E$, and the effectivity index $\\eta / \\lVert T-T_h \\rVert_E$.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve_fem_spr(Nx, Ny, K_tensor):\n    \"\"\"\n    Solves the 2D steady-state heat conduction problem using FEM and SPR.\n    \"\"\"\n    \n    # 1. Mesh Generation\n    num_nodes_x = Nx + 1\n    num_nodes_y = Ny + 1\n    num_nodes = num_nodes_x * num_nodes_y\n    num_rects = Nx * Ny\n    num_elems = 2 * num_rects\n\n    dx = 1.0 / Nx\n    dy = 1.0 / Ny\n    \n    nodes = np.zeros((num_nodes, 2))\n    for j in range(num_nodes_y):\n        for i in range(num_nodes_x):\n            node_idx = j * num_nodes_x + i\n            nodes[node_idx] = [i * dx, j * dy]\n\n    elements = np.zeros((num_elems, 3), dtype=int)\n    elem_idx = 0\n    for j in range(Ny):\n        for i in range(Nx):\n            n1 = j * num_nodes_x + i       # bottom-left\n            n2 = j * num_nodes_x + i + 1   # bottom-right\n            n3 = (j + 1) * num_nodes_x + i # top-left\n            n4 = (j + 1) * num_nodes_x + i + 1 # top-right\n            \n            # Triangle 1 from descending diagonal (n3 -> n2)\n            elements[elem_idx] = [n1, n2, n3]\n            elem_idx += 1\n            # Triangle 2\n            elements[elem_idx] = [n2, n4, n3]\n            elem_idx += 1\n\n    # 2. Identify boundary and interior nodes\n    boundary_nodes = set()\n    for j in range(num_nodes_y):\n        for i in range(num_nodes_x):\n            if i == 0 or i == Nx or j == 0 or j == Ny:\n                boundary_nodes.add(j * num_nodes_x + i)\n    \n    interior_nodes = sorted(list(set(range(num_nodes)) - boundary_nodes))\n    node_map = {node_idx: i for i, node_idx in enumerate(interior_nodes)}\n    \n    # 3. Assemble Global Stiffness Matrix and Load Vector\n    num_interior = len(interior_nodes)\n    K_global = np.zeros((num_interior, num_interior))\n    F_global = np.zeros(num_interior)\n\n    # Manufactured solution and source term\n    T_exact_func = lambda x, y: np.sin(np.pi * x) * np.sin(np.pi * y)\n    f_func = lambda x, y, K: (K[0,0] + K[1,1]) * np.pi**2 * T_exact_func(x,y)\n\n    for el_nodes in elements:\n        v1, v2, v3 = nodes[el_nodes]\n        \n        # Element geometry\n        area = 0.5 * np.abs(v1[0]*(v2[1] - v3[1]) + v2[0]*(v3[1] - v1[1]) + v3[0]*(v1[1] - v2[1]))\n        \n        # Gradients of shape functions (B matrix)\n        B = np.zeros((2, 3))\n        b = np.array([v2[1] - v3[1], v3[1] - v1[1], v1[1] - v2[1]])\n        c = np.array([v3[0] - v2[0], v1[0] - v3[0], v2[0] - v1[0]])\n        B[0, :] = b / (2 * area)\n        B[1, :] = c / (2 * area)\n\n        # Element stiffness matrix\n        k_elem = area * B.T @ K_tensor @ B\n\n        # Element load vector (centroid quadrature)\n        centroid = (v1 + v2 + v3) / 3.0\n        f_val = f_func(centroid[0], centroid[1], K_tensor)\n        f_elem = (area / 3.0) * f_val * np.ones(3)\n\n        # Assembly into global system for interior nodes\n        for i in range(3):\n            node_i = el_nodes[i]\n            if node_i in interior_nodes:\n                map_i = node_map[node_i]\n                F_global[map_i] += f_elem[i]\n                for j in range(3):\n                    node_j = el_nodes[j]\n                    if node_j in interior_nodes:\n                        map_j = node_map[node_j]\n                        K_global[map_i, map_j] += k_elem[i, j]\n\n    # 4. Solve system and reconstruct full solution vector\n    T_interior = np.linalg.solve(K_global, F_global)\n    T_h = np.zeros(num_nodes)\n    for i, node_idx in enumerate(interior_nodes):\n        T_h[node_idx] = T_interior[i]\n\n    # 5. Compute discrete flux q_h\n    elem_flux_h = np.zeros((num_elems, 2))\n    elem_centroids = np.zeros((num_elems, 2))\n    elem_areas = np.zeros(num_elems)\n    grad_Th_elems = np.zeros((num_elems, 2))\n\n    for i, el_nodes in enumerate(elements):\n        v1, v2, v3 = nodes[el_nodes]\n        area = 0.5 * np.abs(v1[0]*(v2[1] - v3[1]) + v2[0]*(v3[1] - v1[1]) + v3[0]*(v1[1] - v2[1]))\n        elem_areas[i] = area\n        elem_centroids[i] = (v1 + v2 + v3) / 3.0\n        \n        b = np.array([v2[1] - v3[1], v3[1] - v1[1], v1[1] - v2[1]])\n        c = np.array([v3[0] - v2[0], v1[0] - v3[0], v2[0] - v1[0]])\n        B_elem = np.vstack((b, c)) / (2 * area)\n        \n        T_h_elem = T_h[el_nodes]\n        grad_Th_elems[i] = B_elem @ T_h_elem\n        elem_flux_h[i] = -K_tensor @ grad_Th_elems[i]\n\n    # 6. Superconvergent Patch Recovery (SPR)\n    node_patches = {i: [] for i in range(num_nodes)}\n    for i, el_nodes in enumerate(elements):\n        for node_idx in el_nodes:\n            node_patches[node_idx].append(i)\n\n    q_recovered = np.zeros((num_nodes, 2))\n    for i in range(num_nodes):\n        patch_elem_indices = node_patches[i]\n        patch_fluxes = elem_flux_h[patch_elem_indices]\n        patch_centroids = elem_centroids[patch_elem_indices]\n        \n        m = len(patch_elem_indices)\n        A = np.ones((m, 3))\n        A[:, 1:] = patch_centroids\n        \n        is_underdetermined = np.linalg.matrix_rank(A) < 3\n\n        for comp in range(2): # for qx and qy\n            b = patch_fluxes[:, comp]\n            if is_underdetermined:\n                # Fallback to average\n                q_recovered[i, comp] = np.mean(b)\n            else:\n                # Least squares fit\n                coeffs, _, _, _ = np.linalg.lstsq(A, b, rcond=None)\n                node_coord = nodes[i]\n                q_recovered[i, comp] = coeffs[0] + coeffs[1]*node_coord[0] + coeffs[2]*node_coord[1]\n    \n    # 7. Error Estimation\n    grad_T_exact_func = lambda x, y: np.array([\n        np.pi * np.cos(np.pi * x) * np.sin(np.pi * y),\n        np.pi * np.sin(np.pi * x) * np.cos(np.pi * y)\n    ])\n    \n    K_inv = np.linalg.inv(K_tensor)\n    \n    exact_energy_sq = 0.0\n    error_energy_sq = 0.0\n    eta_sq = 0.0\n\n    for i, el_nodes in enumerate(elements):\n        centroid = elem_centroids[i]\n        area = elem_areas[i]\n        \n        grad_T_exact = grad_T_exact_func(centroid[0], centroid[1])\n        grad_T_h = grad_Th_elems[i]\n        \n        # Energy norm of exact solution\n        exact_energy_sq += (grad_T_exact.T @ K_tensor @ grad_T_exact) * area\n        \n        # Energy norm of error\n        error_grad = grad_T_exact - grad_T_h\n        error_energy_sq += (error_grad.T @ K_tensor @ error_grad) * area\n        \n        # ZZ Estimator\n        q_h_at_centroid = elem_flux_h[i]\n        recovered_node_fluxes = q_recovered[el_nodes]\n        q_rec_at_centroid = np.mean(recovered_node_fluxes, axis=0)\n        flux_diff = q_rec_at_centroid - q_h_at_centroid\n        eta_sq += (flux_diff.T @ K_inv @ flux_diff) * area\n        \n    exact_energy_norm = np.sqrt(exact_energy_sq)\n    error_energy_norm = np.sqrt(error_energy_sq)\n    eta = np.sqrt(eta_sq)\n    \n    rel_error = error_energy_norm / exact_energy_norm\n    rel_estimator = eta / exact_energy_norm\n    effectivity = eta / error_energy_norm if error_energy_norm > 1e-12 else 0.0\n\n    return [rel_error, rel_estimator, effectivity]\n\n\ndef solve():\n    test_cases = [\n        (4, 4, np.array([[1.0, 0.0], [0.0, 1.0]])),\n        (8, 8, np.array([[1.0, 0.0], [0.0, 1.0]])),\n        (8, 8, np.array([[10.0, 0.0], [0.0, 1.0]]))\n    ]\n\n    results = []\n    for case in test_cases:\n        Nx, Ny, K_tensor = case\n        result_triple = solve_fem_spr(Nx, Ny, K_tensor)\n        results.append(result_triple)\n\n    # Format output as a list of lists of floats\n    output_str = \"[\" + \",\".join([f\"[{r[0]},{r[1]},{r[2]}]\" for r in results]) + \"]\"\n    print(output_str)\n\nsolve()\n```", "id": "2599230"}]}