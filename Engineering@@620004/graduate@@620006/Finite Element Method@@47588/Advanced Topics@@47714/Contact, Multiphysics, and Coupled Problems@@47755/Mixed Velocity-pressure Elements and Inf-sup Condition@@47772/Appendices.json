{"hands_on_practices": [{"introduction": "Before delving into complex calculations, it is crucial to solidify our understanding of the two distinct challenges in mixed finite element methods for Stokes flow: ensuring a unique pressure solution and ensuring a stable one. This exercise challenges you to disentangle these concepts by considering various boundary conditions, domain configurations, and element choices. Successfully navigating these scenarios will help clarify the fundamental difference between the Ladyzhenskaya–Babuška–Brezzi (LBB) condition, which governs stability, and pressure normalization, which addresses uniqueness [@problem_id:2578107].", "problem": "Consider the steady Stokes equations for an incompressible viscous fluid on a bounded Lipschitz domain $\\Omega \\subset \\mathbb{R}^d$ with $d \\in \\{2,3\\}$. The governing equations are the balance of linear momentum and incompressibility, given by\n$$\n- \\nabla \\cdot \\boldsymbol{\\sigma}(\\boldsymbol{u},p) = \\boldsymbol{f} \\quad \\text{in } \\Omega, \\qquad \\nabla \\cdot \\boldsymbol{u} = 0 \\quad \\text{in } \\Omega,\n$$\nwhere $\\boldsymbol{u}$ is the velocity, $p$ is the pressure, $\\boldsymbol{f}$ is the body force, the Cauchy stress is $\\boldsymbol{\\sigma}(\\boldsymbol{u},p) = 2\\mu \\boldsymbol{\\varepsilon}(\\boldsymbol{u}) - p \\boldsymbol{I}$, the viscosity is $\\mu > 0$, and $\\boldsymbol{\\varepsilon}(\\boldsymbol{u}) = \\tfrac{1}{2}(\\nabla \\boldsymbol{u} + \\nabla \\boldsymbol{u}^\\top)$. The boundary $\\partial \\Omega$ is split into two disjoint parts $\\Gamma_D$ and $\\Gamma_N$ with $\\overline{\\Gamma_D} \\cup \\overline{\\Gamma_N} = \\partial \\Omega$. On $\\Gamma_D$ one prescribes velocity $\\boldsymbol{u} = \\boldsymbol{g}$, and on $\\Gamma_N$ one prescribes traction $\\boldsymbol{\\sigma}(\\boldsymbol{u},p)\\boldsymbol{n} = \\boldsymbol{t}$, where $\\boldsymbol{n}$ is the outward unit normal. Let $V = \\{\\boldsymbol{v} \\in [H^1(\\Omega)]^d : \\boldsymbol{v} = \\boldsymbol{0} \\text{ on } \\Gamma_D\\}$ and $Q = L^2(\\Omega)$, and define the bilinear forms $a(\\boldsymbol{u},\\boldsymbol{v}) = \\int_{\\Omega} 2\\mu \\boldsymbol{\\varepsilon}(\\boldsymbol{u}):\\boldsymbol{\\varepsilon}(\\boldsymbol{v}) \\, \\mathrm{d}x$ and $b(\\boldsymbol{v},q) = -\\int_{\\Omega} q \\, \\nabla \\cdot \\boldsymbol{v} \\, \\mathrm{d}x$. The weak formulation seeks $(\\boldsymbol{u},p)$ in appropriate affine and linear subspaces of $V$ and $Q$ such that the balance laws hold in the sense of distributions. A conforming mixed finite element method chooses discrete subspaces $V_h \\subset V$ and $Q_h \\subset Q$ and seeks $(\\boldsymbol{u}_h,p_h) \\in V_h \\times Q_h$ satisfying the corresponding discrete weak equations. The stability of such mixed methods requires the Ladyzhenskaya–Babuška–Brezzi (LBB) inf-sup condition, which is a discrete counterpart of a fundamental compatibility condition between $V$ and $Q$.\n\nSelect all statements below that are true about boundary conditions, pressure normalization, and stability for this mixed velocity–pressure formulation.\n\nA. If $\\Gamma_N = \\emptyset$ and $\\Gamma_D = \\partial \\Omega$ with $\\boldsymbol{g}$ prescribed everywhere, then the pressure is determined only up to an additive constant. To obtain a unique discrete solution and a nonsingular algebraic system, one must impose a pressure normalization such as $\\int_{\\Omega} p_h \\, \\mathrm{d}x = 0$ or fix $p_h$ at a point.\n\nB. If $\\Gamma_N$ has positive measure and the traction $\\boldsymbol{t}$ is prescribed there, then the absolute level of the pressure is fixed by the boundary data, and no additional pressure normalization is required for uniqueness.\n\nC. For equal-order discretizations, for example $V_h = [\\mathbb{P}_1]^d$ and $Q_h = \\mathbb{P}_1$ on simplicial meshes, enforcing a single pressure normalization constraint like $\\int_{\\Omega} p_h \\, \\mathrm{d}x = 0$ is sufficient to guarantee stability and eliminate spurious pressure modes, even if the pair does not satisfy the LBB inf-sup condition.\n\nD. If $\\Omega$ is the disjoint union of two connected components $\\Omega_1$ and $\\Omega_2$, and for each component the entire boundary is of Dirichlet type (no traction is prescribed anywhere), then exactly one independent pressure normalization constraint over the entire $\\Omega$ is necessary and sufficient to ensure uniqueness of the pressure.\n\nE. Using a stable Taylor–Hood pair, for example $V_h = [\\mathbb{P}_2]^d$ and $Q_h = \\mathbb{P}_1$, removes the need for pressure normalization only when $\\Gamma_N$ has positive measure; if $\\Gamma_N = \\emptyset$, a pressure normalization is still required to eliminate the constant-pressure nullspace at both the continuous and discrete levels.", "solution": "The problem statement describes the steady-state Stokes equations and their mixed finite element discretization. The problem is scientifically grounded, well-posed, and all terms and concepts are standard in the field of numerical analysis for partial differential equations. The presentation is clear and factually correct. Therefore, the problem statement is valid, and we proceed to analyze the provided options.\n\nThe core of the problem revolves around two distinct concepts:\n$1$. The uniqueness of the pressure solution, which is determined by the boundary conditions of the continuous problem.\n$2$. The stability of the discrete solution, which is governed by the choice of finite element spaces $V_h$ and $Q_h$ satisfying the Ladyzhenskaya–Babuška–Brezzi (LBB) or inf-sup condition.\n\nThe pressure $p$ appears in the strong form of the momentum equation through its gradient, $\\nabla p$. This implies that if $(\\boldsymbol{u}, p)$ is a solution, then $(\\boldsymbol{u}, p+C)$ for any constant $C$ will also satisfy the momentum equation $- \\nabla \\cdot (2\\mu \\boldsymbol{\\varepsilon}(\\boldsymbol{u})) + \\nabla(p+C) = \\boldsymbol{f}$ and the incompressibility constraint $\\nabla \\cdot \\boldsymbol{u} = 0$. The uniqueness of the pressure is therefore determined by whether the boundary conditions constrain this constant $C$.\n\nThe traction boundary condition on $\\Gamma_N$ is $\\boldsymbol{\\sigma}(\\boldsymbol{u},p)\\boldsymbol{n} = (2\\mu \\boldsymbol{\\varepsilon}(\\boldsymbol{u}) - p \\boldsymbol{I})\\boldsymbol{n} = \\boldsymbol{t}$. If we substitute $p+C$ for $p$, the condition becomes $2\\mu \\boldsymbol{\\varepsilon}(\\boldsymbol{u})\\boldsymbol{n} - (p+C)\\boldsymbol{n} = \\boldsymbol{t}$, which simplifies to $(\\boldsymbol{\\sigma}(\\boldsymbol{u},p)\\boldsymbol{n}) - C\\boldsymbol{n} = \\boldsymbol{t}$. For this to hold, we require $C\\boldsymbol{n} = \\boldsymbol{0}$. Since this must be true for all points on $\\Gamma_N$ (which has positive measure), and $\\boldsymbol{n}$ is a unit normal vector, it must be that $C=0$. Thus, if traction is prescribed on any part of the boundary, the pressure is unique.\n\nIf, however, the boundary conditions are purely of Dirichlet type ($\\Gamma_D = \\partial \\Omega$, $\\Gamma_N = \\emptyset$), the pressure does not appear in the boundary condition $\\boldsymbol{u} = \\boldsymbol{g}$. In this case, $(\\boldsymbol{u}, p+C)$ remains a valid solution for any constant $C$. The pressure is determined only up to an additive constant. This non-uniqueness must be addressed at both the continuous and discrete levels. In the weak formulation, this manifests as the constant functions being in the kernel of the operator associated with the bilinear form $b(\\boldsymbol{v},q)$, because for $\\boldsymbol{v} \\in V$ with $\\boldsymbol{v}=\\boldsymbol{0}$ on $\\partial\\Omega$, the divergence theorem gives $b(\\boldsymbol{v},C) = -\\int_{\\Omega} C \\nabla \\cdot \\boldsymbol{v} \\, \\mathrm{d}x = -C \\int_{\\partial\\Omega} \\boldsymbol{v} \\cdot \\boldsymbol{n} \\, \\mathrm{d}S = 0$.\n\nLet us evaluate each option based on these principles.\n\nA. If $\\Gamma_N = \\emptyset$ and $\\Gamma_D = \\partial \\Omega$ with $\\boldsymbol{g}$ prescribed everywhere, then the pressure is determined only up to an additive constant. To obtain a unique discrete solution and a nonsingular algebraic system, one must impose a pressure normalization such as $\\int_{\\Omega} p_h \\, \\mathrm{d}x = 0$ or fix $p_h$ at a point.\n\nThis statement describes the pure Dirichlet problem. As established, the pressure is determined only up to a constant. In the discrete formulation, this non-uniqueness translates to a singular algebraic system because the constant pressure mode is in the nullspace of the discrete divergence operator. To render the system non-singular, this mode must be removed from the solution space. This is achieved by imposing an additional constraint on the pressure. The two standard methods are imposing a zero-mean condition, $\\int_{\\Omega} p_h \\, \\mathrm{d}x = 0$, or fixing the pressure value at a single point (or node). Both methods provide the necessary constraint to ensure a unique discrete pressure solution.\n**Verdict: Correct.**\n\nB. If $\\Gamma_N$ has positive measure and the traction $\\boldsymbol{t}$ is prescribed there, then the absolute level of the pressure is fixed by the boundary data, and no additional pressure normalization is required for uniqueness.\n\nAs shown in the preliminary analysis, when a traction boundary condition is applied on a part of the boundary with positive measure, the pressure term $p\\boldsymbol{n}$ in the traction definition fixes the arbitrary constant. The pressure is therefore uniquely determined by the problem data. Consequently, no additional normalization constraint is necessary to ensure uniqueness at either the continuous or discrete level. The resulting algebraic system will be non-singular, provided the chosen finite element spaces satisfy the LBB condition.\n**Verdict: Correct.**\n\nC. For equal-order discretizations, for example $V_h = [\\mathbb{P}_1]^d$ and $Q_h = \\mathbb{P}_1$ on simplicial meshes, enforcing a single pressure normalization constraint like $\\int_{\\Omega} p_h \\, \\mathrm{d}x = 0$ is sufficient to guarantee stability and eliminate spurious pressure modes, even if the pair does not satisfy the LBB inf-sup condition.\n\nThe equal-order linear element pair, $V_h = [\\mathbb{P}_1]^d$ and $Q_h = \\mathbb{P}_1$, is known to be unstable for the Stokes problem; it does not satisfy the LBB condition. This failure leads to non-physical, high-frequency oscillations in the computed pressure field, known as spurious pressure modes or checkerboarding. The pressure normalization constraint $\\int_{\\Omega} p_h \\, \\mathrm{d}x = 0$ only removes the constant pressure mode, which addresses uniqueness in the pure Dirichlet case, but it has no effect on the spurious oscillatory modes. These modes are of a different nature and are a consequence of an improper balance between the dimension of the discrete velocity and pressure spaces. To guarantee stability, one must either choose an LBB-stable pair of spaces or modify the formulation itself (e.g., using stabilization techniques like GLS or PSPG). The claim that a single normalization constraint is sufficient for stability is fundamentally incorrect.\n**Verdict: Incorrect.**\n\nD. If $\\Omega$ is the disjoint union of two connected components $\\Omega_1$ and $\\Omega_2$, and for each component the entire boundary is of Dirichlet type (no traction is prescribed anywhere), then exactly one independent pressure normalization constraint over the entire $\\Omega$ is necessary and sufficient to ensure uniqueness of the pressure.\n\nThe domain $\\Omega$ consists of two disconnected subdomains, $\\Omega_1$ and $\\Omega_2$. Since the problem is posed with pure Dirichlet boundary conditions on each component, the pressure on $\\Omega_1$, say $p_1$, is determined up to an arbitrary constant $C_1$, and the pressure on $\\Omega_2$, say $p_2$, is determined up to an independent arbitrary constant $C_2$. The nullspace of the pressure is thus two-dimensional, spanned by the functions that are constant on one component and zero on the other. To obtain a unique pressure solution over the entire domain $\\Omega$, one must impose two independent constraints. For example, one could enforce $\\int_{\\Omega_1} p_h \\, \\mathrm{d}x = 0$ and $\\int_{\\Omega_2} p_h \\, \\mathrm{d}x = 0$. A single constraint, such as $\\int_{\\Omega} p_h \\, \\mathrm{d}x = \\int_{\\Omega_1} p_h \\, \\mathrm{d}x + \\int_{\\Omega_2} p_h \\, \\mathrm{d}x = 0$, defines a line in the $(C_1, C_2)$ plane, leaving a one-dimensional family of possible solutions. Therefore, one constraint is not sufficient.\n**Verdict: Incorrect.**\n\nE. Using a stable Taylor–Hood pair, for example $V_h = [\\mathbb{P}_2]^d$ and $Q_h = \\mathbb{P}_1$, removes the need for pressure normalization only when $\\Gamma_N$ has positive measure; if $\\Gamma_N = \\emptyset$, a pressure normalization is still required to eliminate the constant-pressure nullspace at both the continuous and discrete levels.\n\nThe Taylor–Hood finite element pair ($[\\mathbb{P}_2]^d$-$\\mathbb{P}_1$) is a classic example of an LBB-stable discretization. This stability ensures that, apart from the constant pressure mode, there are no other spurious pressure modes. The LBB condition addresses the stability of the velocity-pressure coupling. However, it does not alter the fundamental properties of the continuous problem regarding pressure uniqueness. As analyzed before, the need for pressure normalization is dictated solely by the boundary conditions.\n- If $\\Gamma_N$ has positive measure, the pressure is unique (see B), and no normalization is needed.\n- If $\\Gamma_N = \\emptyset$ (pure Dirichlet problem), the pressure is non-unique up to a constant (see A). This non-uniqueness persists in the discrete problem, even with an LBB-stable pair, because the constant function is part of the pressure space $Q_h = \\mathbb{P}_1$ and lies in the kernel of the discrete divergence operator. Therefore, a pressure normalization is still mandatory.\nThis statement accurately distinguishes between the role of LBB stability (eliminating spurious modes) and pressure normalization (ensuring uniqueness).\n**Verdict: Correct.**", "answer": "$$\\boxed{ABE}$$", "id": "2578107"}, {"introduction": "The global inf-sup condition is a powerful theoretical tool, but its verification often relies on local analysis performed on small patches of elements. This practice brings that abstract idea to life with a concrete, hands-on calculation for the inf-sup stable \"mini element\". By directly computing the action of the discrete divergence operator on a single reference element, you will verify from first principles that the local velocity and pressure spaces are properly coupled, providing a tangible feel for what makes a mixed element \"work\" [@problem_id:2578113].", "problem": "Consider the steady Stokes equations for an incompressible Newtonian fluid on a bounded polygonal domain in two dimensions, written in mixed weak form: find velocity $\\boldsymbol{u} \\in \\boldsymbol{V}$ and pressure $p \\in Q$ such that\n$$\na(\\boldsymbol{u},\\boldsymbol{v}) + b(\\boldsymbol{v},p) = \\ell(\\boldsymbol{v}) \\quad \\text{for all } \\boldsymbol{v} \\in \\boldsymbol{V}, \\qquad\nb(\\boldsymbol{u},q) = 0 \\quad \\text{for all } q \\in Q,\n$$\nwhere $a(\\boldsymbol{u},\\boldsymbol{v}) = \\int_{\\Omega} 2 \\nu \\, \\boldsymbol{\\varepsilon}(\\boldsymbol{u}) : \\boldsymbol{\\varepsilon}(\\boldsymbol{v}) \\, \\mathrm{d}x$, $b(\\boldsymbol{v},q) = - \\int_{\\Omega} (\\nabla \\cdot \\boldsymbol{v}) \\, q \\, \\mathrm{d}x$, and $\\boldsymbol{\\varepsilon}(\\boldsymbol{u}) = (\\nabla \\boldsymbol{u} + \\nabla \\boldsymbol{u}^{\\top})/2$. Here $\\nu > 0$ is the kinematic viscosity, and $\\ell$ is a given linear functional. For a mixed finite element method, the Ladyzhenskaya–Babuška–Brezzi (LBB) inf-sup condition requires that the discrete coupling operator $b(\\cdot,\\cdot)$ is sufficiently surjective from the discrete velocity space onto the dual of the discrete pressure space.\n\nPerform a macroelement patch test for the so-called mini element on a single reference triangle. Let $K = \\{(x,y) \\in \\mathbb{R}^2 : x \\ge 0, \\, y \\ge 0, \\, x + y \\le 1\\}$ and consider the following local discrete spaces:\n- The local velocity space with homogeneous Dirichlet boundary conditions on $\\partial K$ is\n$$\n\\boldsymbol{V}_M = \\left\\{ \\boldsymbol{v}_h \\in [\\mathbb{P}_1(K)]^2 \\oplus \\operatorname{span}\\{b \\boldsymbol{e}_1, b \\boldsymbol{e}_2\\} : \\boldsymbol{v}_h|_{\\partial K} = \\boldsymbol{0} \\right\\},\n$$\nwhere $\\mathbb{P}_1(K)$ denotes polynomials of total degree at most $1$ on $K$, $\\boldsymbol{e}_1 = (1,0)^{\\top}$, $\\boldsymbol{e}_2 = (0,1)^{\\top}$, and $b(x,y) = 27 \\, x \\, y \\, (1 - x - y)$ is the standard cubic bubble function on $K$. Because of the boundary condition, $\\boldsymbol{V}_M = \\operatorname{span}\\{b \\boldsymbol{e}_1, b \\boldsymbol{e}_2\\}$.\n- The local pressure space with zero-mean constraint is\n$$\nQ_M = \\left\\{ q_h \\in \\mathbb{P}_1(K) : \\int_K q_h \\, \\mathrm{d}x = 0 \\right\\}.\n$$\n\nDefine the local kernel of the transpose of the discrete divergence operator as\n$$\n\\mathcal{N}_M = \\left\\{ q_h \\in Q_M : b(\\boldsymbol{v}_h, q_h) = - \\int_K (\\nabla \\cdot \\boldsymbol{v}_h) \\, q_h \\, \\mathrm{d}x = 0 \\text{ for all } \\boldsymbol{v}_h \\in \\boldsymbol{V}_M \\right\\}.\n$$\n\nStarting from the definitions above and without invoking any precomputed stability results, compute the dimension of $\\mathcal{N}_M$ by explicitly evaluating the action of $b(\\cdot,\\cdot)$ on a basis of $\\boldsymbol{V}_M$ and a basis of $Q_M$. Express your final answer as a single integer. No rounding is required.", "solution": "We begin from the definitions of the bilinear form $b(\\boldsymbol{v},q) = - \\int_K (\\nabla \\cdot \\boldsymbol{v}) \\, q \\, \\mathrm{d}x$ and the local spaces. On the single reference triangle $K = \\{(x,y) \\in \\mathbb{R}^2 : x \\ge 0, \\, y \\ge 0, \\, x + y \\le 1\\}$, the scalar bubble function $b(x,y) = 27 \\, x \\, y \\, (1 - x - y)$ vanishes identically on $\\partial K$. Because $\\boldsymbol{v}_h \\in [\\mathbb{P}_1(K)]^2$ vanishing on $\\partial K$ must be identically zero, the local velocity space reduces to\n$$\n\\boldsymbol{V}_M = \\operatorname{span}\\{ b \\boldsymbol{e}_1, \\, b \\boldsymbol{e}_2 \\}.\n$$\nThus, $\\dim \\boldsymbol{V}_M = 2$ and a convenient basis is $\\{\\boldsymbol{\\psi}_1, \\boldsymbol{\\psi}_2\\}$ with $\\boldsymbol{\\psi}_1 = b \\boldsymbol{e}_1$ and $\\boldsymbol{\\psi}_2 = b \\boldsymbol{e}_2$.\n\nFor the pressure, $\\mathbb{P}_1(K)$ has dimension $3$, and the zero-mean constraint removes one dimension, so $\\dim Q_M = 2$. A convenient basis for $Q_M$ is obtained from barycentric coordinates. Let $\\lambda_1 = 1 - x - y$, $\\lambda_2 = x$, and $\\lambda_3 = y$. Since $\\int_K \\lambda_i \\, \\mathrm{d}x = |K|/3$ for each $i$, the functions\n$$\nq_1 = \\lambda_2 - \\lambda_3 = x - y, \\qquad q_2 = \\lambda_1 - \\lambda_3 = 1 - x - 2y,\n$$\nhave zero mean on $K$ and span $Q_M$.\n\nTo compute the local kernel\n$$\n\\mathcal{N}_M = \\left\\{ q_h \\in Q_M : - \\int_K (\\nabla \\cdot \\boldsymbol{\\psi}_i) \\, q_h \\, \\mathrm{d}x = 0 \\text{ for } i = 1,2 \\right\\},\n$$\nit suffices to assemble the $2 \\times 2$ coupling matrix $G$ with entries\n$$\nG_{ij} = - \\int_K (\\nabla \\cdot \\boldsymbol{\\psi}_i) \\, q_j \\, \\mathrm{d}x, \\quad i,j \\in \\{1,2\\}.\n$$\nIf $G$ is invertible, then the only $q_h \\in Q_M$ that annihilates both rows is $q_h = 0$, hence $\\dim \\mathcal{N}_M = 0$. If $G$ is rank-deficient, $\\dim \\mathcal{N}_M$ would be positive.\n\nWe compute $\\nabla \\cdot \\boldsymbol{\\psi}_1 = \\partial_x b$ and $\\nabla \\cdot \\boldsymbol{\\psi}_2 = \\partial_y b$. Using $b(x,y) = 27 \\, x \\, y \\, (1 - x - y)$,\n$$\n\\partial_x b = 27 \\left( y - 2 x y - y^2 \\right), \\qquad \\partial_y b = 27 \\left( x - x^2 - 2 x y \\right).\n$$\nThus\n$$\nG = - \\begin{pmatrix}\n\\int_K (\\partial_x b) \\, q_1 \\, \\mathrm{d}x & \\int_K (\\partial_x b) \\, q_2 \\, \\mathrm{d}x \\\\\n\\int_K (\\partial_y b) \\, q_1 \\, \\mathrm{d}x & \\int_K (\\partial_y b) \\, q_2 \\, \\mathrm{d}x\n\\end{pmatrix}.\n$$\nWe compute these integrals exactly using the standard monomial integrals on $K$:\n$$\n\\int_K x^a y^b \\, \\mathrm{d}x \\, \\mathrm{d}y = \\frac{a! \\, b!}{(a+b+2)!}, \\quad \\text{for all integers } a \\ge 0, \\, b \\ge 0.\n$$\n\nFirst, with $q_1 = x - y$,\n\\begin{align*}\n\\int_K (\\partial_x b) \\, q_1 \\, \\mathrm{d}x\n&= 27 \\int_K \\left( y - 2 x y - y^2 \\right) (x - y) \\, \\mathrm{d}x \\\\\n&= 27 \\int_K \\left( x y - y^2 - 2 x^2 y + x y^2 + y^3 \\right) \\mathrm{d}x \\\\\n&= 27 \\left( \\frac{1}{24} - \\frac{1}{12} - 2 \\cdot \\frac{1}{60} + \\frac{1}{60} + \\frac{1}{20} \\right) \\\\\n&= 27 \\left( - \\frac{1}{120} \\right) = - \\frac{27}{120} = - \\frac{9}{40}.\n\\end{align*}\nSimilarly,\n\\begin{align*}\n\\int_K (\\partial_x b) \\, q_2 \\, \\mathrm{d}x\n&= 27 \\int_K \\left( y - 2 x y - y^2 \\right) (1 - x - 2 y) \\, \\mathrm{d}x \\\\\n&= 27 \\int_K \\left( y - 3 x y - 3 y^2 + 2 x^2 y + 5 x y^2 + 2 y^3 \\right) \\mathrm{d}x \\\\\n&= 27 \\left( \\frac{1}{6} - 3 \\cdot \\frac{1}{24} - 3 \\cdot \\frac{1}{12} + 2 \\cdot \\frac{1}{60} + 5 \\cdot \\frac{1}{60} + 2 \\cdot \\frac{1}{20} \\right) \\\\\n&= 27 \\left( \\frac{1}{120} \\right) = \\frac{27}{120} = \\frac{9}{40}.\n\\end{align*}\nNext, with $\\partial_y b = 27 ( x - x^2 - 2 x y )$,\n\\begin{align*}\n\\int_K (\\partial_y b) \\, q_1 \\, \\mathrm{d}x\n&= 27 \\int_K \\left( x - x^2 - 2 x y \\right) (x - y) \\, \\mathrm{d}x \\\\\n&= 27 \\int_K \\left( x^2 - x y - x^3 - x^2 y + 2 x y^2 \\right) \\mathrm{d}x \\\\\n&= 27 \\left( \\frac{1}{12} - \\frac{1}{24} - \\frac{1}{20} - \\frac{1}{60} + 2 \\cdot \\frac{1}{60} \\right) \\\\\n&= 27 \\left( \\frac{1}{120} \\right) = \\frac{27}{120} = \\frac{9}{40},\n\\end{align*}\nand\n\\begin{align*}\n\\int_K (\\partial_y b) \\, q_2 \\, \\mathrm{d}x\n&= 27 \\int_K \\left( x - x^2 - 2 x y \\right) (1 - x - 2 y) \\, \\mathrm{d}x \\\\\n&= 27 \\int_K \\left( x - 2 x^2 + x^3 - 4 x y + 4 x^2 y + 4 x y^2 \\right) \\mathrm{d}x \\\\\n&= 27 \\left( \\frac{1}{6} - 2 \\cdot \\frac{1}{12} + \\frac{1}{20} - 4 \\cdot \\frac{1}{24} + 4 \\cdot \\frac{1}{60} + 4 \\cdot \\frac{1}{60} \\right) \\\\\n&= 27 \\left( \\frac{1}{60} \\right) = \\frac{27}{60} = \\frac{9}{20}.\n\\end{align*}\nTherefore,\n$$\nG = - \\begin{pmatrix}\n- \\frac{9}{40} & \\frac{9}{40} \\\\\n\\frac{9}{40} & \\frac{9}{20}\n\\end{pmatrix}\n= \\begin{pmatrix}\n\\frac{9}{40} & - \\frac{9}{40} \\\\\n- \\frac{9}{40} & - \\frac{9}{20}\n\\end{pmatrix}.\n$$\nThe determinant of the unnegated coupling (equivalently of $-G$) is\n$$\n\\det \\begin{pmatrix}\n- \\frac{9}{40} & \\frac{9}{40} \\\\\n\\frac{9}{40} & \\frac{9}{20}\n\\end{pmatrix}\n= \\left( - \\frac{9}{40} \\right) \\left( \\frac{9}{20} \\right) - \\left( \\frac{9}{40} \\right) \\left( \\frac{9}{40} \\right)\n= - \\frac{81}{800} - \\frac{81}{1600}\n= - \\frac{243}{1600} \\ne 0.\n$$\nHence $G$ is invertible. Consequently, the only $q_h \\in Q_M$ that satisfies $b(\\boldsymbol{v}_h, q_h) = 0$ for all $\\boldsymbol{v}_h \\in \\boldsymbol{V}_M$ is $q_h = 0$. It follows that\n$$\n\\dim \\mathcal{N}_M = 0.\n$$\nThis verifies that the mini element passes this macroelement patch test on a single triangle and is locally inf-sup stable in this sense. The requested integer is the dimension of $\\mathcal{N}_M$.", "answer": "$$\\boxed{0}$$", "id": "2578113"}, {"introduction": "The ultimate confirmation of a mixed method's stability lies in the value of its discrete inf-sup constant, $\\beta_h$. This coding exercise guides you through the process of empirically measuring $\\beta_h$ by translating its abstract definition into a solvable generalized eigenvalue problem. You will implement the full finite element pipeline to compare the computed $\\beta_h$ for a stable (MINI) and an unstable ($\\mathbb{P}_1$-$\\mathbb{P}_1$) element pair, yielding a powerful numerical and visual confirmation of the LBB condition's practical importance [@problem_id:2578083].", "problem": "Consider the incompressible Stokes equations in two spatial dimensions on the unit square domain $\\Omega = (0,1)\\times(0,1)$ with homogeneous Dirichlet boundary conditions on the velocity, discretized by a mixed finite element method. Let $V_h \\subset [H_0^1(\\Omega)]^2$ be a finite-dimensional velocity space and $Q_h \\subset L_0^2(\\Omega)$ be a finite-dimensional pressure space with zero-mean constraint. The discrete inf-sup constant $\\beta_h$ is defined by\n$$\n\\beta_h \\;=\\; \\inf_{0 \\neq q_h \\in Q_h} \\; \\sup_{0 \\neq v_h \\in V_h} \\; \\frac{b(v_h,q_h)}{\\|v_h\\|_V \\, \\|q_h\\|_Q},\n$$\nwhere $b(v_h,q_h) = \\int_{\\Omega} q_h \\, \\nabla \\cdot v_h \\, \\mathrm{d}x$, $\\|v_h\\|_V = \\left(\\int_{\\Omega} \\nabla v_h : \\nabla v_h \\, \\mathrm{d}x\\right)^{1/2}$ is the $H^1$ seminorm on vector fields, and $\\|q_h\\|_Q = \\left(\\int_{\\Omega} q_h^2 \\, \\mathrm{d}x\\right)^{1/2}$ is the $L^2$ norm on scalars.\n\nYour task is to empirically compute discrete inf-sup constants $\\beta_h$ for the following finite element space pairs on a family of conforming triangulations of $\\Omega$ made by subdividing each rectangle of an $N_x \\times N_y$ grid into two triangles by the lower-left-to-upper-right diagonal.\n\n- Velocity-pressure pair $\\mathcal{P}_{\\text{MINI}}$: the velocity space $V_h$ is the continuous piecewise linear vector field enriched by one scalar cubic bubble function per triangle (one independent bubble coefficient per velocity component and per triangle), and the pressure space $Q_h$ is continuous piecewise linear scalar fields on vertices. This is often called the \"MINI\" element.\n- Velocity-pressure pair $\\mathcal{P}_{\\text{P1P1}}$: the velocity space $V_h$ is continuous piecewise linear vector fields (no bubbles) and the pressure space $Q_h$ is the same continuous piecewise linear scalar fields.\n\nUse the following foundational principles to construct a fully computable procedure:\n- The mixed Galerkin method produces a saddle-point system with a symmetric positive definite (SPD) velocity bilinear form $a(u_h,v_h) = \\int_{\\Omega} \\nabla u_h : \\nabla v_h \\, dx$, a bilinear form $b(v_h,q_h)$ coupling velocity and pressure through the divergence, and the $L^2$ inner product on pressure. \n- The discrete inf-sup constant $\\beta_h$ is the smallest positive singular value of the discrete divergence operator $V_h \\to Q_h$ when the velocity space is equipped with the norm induced by $a(\\cdot,\\cdot)$ and the pressure space is equipped with the $L^2$ norm.\n\nImplementation requirements:\n1. Mesh and basis:\n   - Build the conforming triangular mesh from a structured $N_x \\times N_y$ grid on $\\Omega$, splitting each rectangle into two triangles by the lower-left to upper-right diagonal.\n   - For continuous piecewise linear shape functions on a triangle with vertices at coordinates $(x_i,y_i)$, the gradients are constant on that triangle and must be computed from first principles using the affine mapping.\n   - For the MINI element, enrich each triangle’s velocity space by one scalar cubic bubble function per triangle per velocity component. On a triangle with barycentric coordinates $(\\lambda_1,\\lambda_2,\\lambda_3)$, the scalar bubble is $b(\\lambda) = 27 \\lambda_1 \\lambda_2 \\lambda_3$. Its gradient can be expressed in terms of $\\lambda$ and the constant gradients of the barycentric coordinates.\n2. Quadrature:\n   - Integrals involving only continuous piecewise linear basis functions and their gradients can be computed exactly by constants-times-area formulas.\n   - Integrals involving the bubble function or its gradient must be performed by a triangle quadrature rule that is exact for polynomials of total degree at least $5$. You must implement a valid rule explicitly and ensure correct geometric scaling from the reference to the physical triangle.\n3. Boundary conditions:\n   - Impose homogeneous Dirichlet boundary conditions on the velocity by eliminating all nodal velocity degrees of freedom located on the boundary. Bubble velocity degrees of freedom vanish on the boundary by construction and remain as unconstrained interior unknowns.\n   - Do not impose any boundary conditions on pressure. Do not enforce the mean-zero pressure by elimination; instead, retain the full continuous pressure space and numerically identify the smallest strictly positive mode in the spectrum that results from the discrete inf-sup characterization.\n4. Empirical inf-sup computation:\n   - From the assembled matrices corresponding to the velocity seminorm, the divergence coupling, and the pressure $L^2$ inner product, derive a mathematically justified, fully discrete and computable procedure to obtain $\\beta_h$ for each test case. Your method must be consistent with the principle that $\\beta_h$ is the smallest strictly positive singular value of the discrete divergence operator under the stated norms. The derivation details belong in your solution write-up; the code must implement the resulting procedure.\n\nTest suite:\nCompute $\\beta_h$ for the following three test cases, in this exact order.\n- Case 1 (happy path, stable pair): $\\mathcal{P}_{\\text{MINI}}$ on a $2 \\times 2$ grid (i.e., $N_x=2$, $N_y=2$).\n- Case 2 (edge case, unstable pair): $\\mathcal{P}_{\\text{P1P1}}$ on the same $2 \\times 2$ grid.\n- Case 3 (coverage across sizes, stable pair): $\\mathcal{P}_{\\text{MINI}}$ on a $3 \\times 2$ grid (i.e., $N_x=3$, $N_y=2$).\n\nAnswer specification:\n- Your program must output a single line containing a comma-separated list of the three computed discrete inf-sup constants, rounded to exactly six decimal places, enclosed in square brackets. For example: \"[0.312345,0.000001,0.298765]\".\n- No physical units are involved. Angles are not used. No percentages are used.\n\nYour final program must be complete and runnable \"as is\" and must not require any external input.", "solution": "The problem presented is a well-posed and standard task in the numerical analysis of partial differential equations, specifically within the finite element method for fluid dynamics. It is scientifically sound, contains all necessary information, and is free of contradictions or ambiguities. Therefore, I will proceed with its solution.\n\nThe problem requires the computation of the discrete inf-sup constant $\\beta_h$ for two different mixed finite element pairs for the Stokes problem. The analysis begins with the discrete weak formulation, which results in a saddle-point linear system. For a discrete velocity field $u_h \\in V_h$ and pressure field $q_h \\in Q_h$, represented by coefficient vectors $\\mathbf{u}$ and $\\mathbf{p}$ respectively, the system is\n$$\n\\begin{pmatrix} A & B^T \\\\ B & 0 \\end{pmatrix}\n\\begin{pmatrix} \\mathbf{u} \\\\ \\mathbf{p} \\end{pmatrix}\n=\n\\begin{pmatrix} \\mathbf{f} \\\\ \\mathbf{g} \\end{pmatrix}\n$$\nHere, $A$ is the velocity stiffness matrix derived from the bilinear form $a(u_h, v_h)$, and $B$ is the discrete divergence matrix from the bilinear form $b(v_h, q_h)$. The norms specified are $\\|v_h\\|_V^2 = a(v_h,v_h) = \\mathbf{v}^T A \\mathbf{v}$ and $\\|q_h\\|_Q^2 = \\int_\\Omega q_h^2 \\, \\mathrm{d}x = \\mathbf{p}^T M_p \\mathbf{p}$, where $M_p$ is the pressure mass matrix.\n\nThe discrete inf-sup constant $\\beta_h$ is defined as:\n$$\n\\beta_h = \\inf_{0 \\neq q_h \\in Q_h} \\sup_{0 \\neq v_h \\in V_h} \\frac{b(v_h,q_h)}{\\|v_h\\|_V \\|q_h\\|_Q}\n$$\nIn matrix notation, this becomes:\n$$\n\\beta_h = \\inf_{\\mathbf{p} \\neq 0} \\sup_{\\mathbf{v} \\neq 0} \\frac{\\mathbf{p}^T B \\mathbf{v}}{\\sqrt{\\mathbf{v}^T A \\mathbf{v}} \\sqrt{\\mathbf{p}^T M_p \\mathbf{p}}}\n$$\nThe inner supremum over $\\mathbf{v}$ is a maximization problem. For a fixed $\\mathbf{p}$, the expression is maximized when $\\mathbf{v}$ is chosen appropriately. The Cauchy-Schwarz inequality in the $A$-inner product reveals that the supremum is attained when $A\\mathbf{v}$ is proportional to $B^T\\mathbf{p}$. Specifically, the value of the supremum is $\\sqrt{\\mathbf{p}^T B A^{-1} B^T \\mathbf{p}}$.\n\nSubstituting this back into the expression for $\\beta_h$, we obtain:\n$$\n\\beta_h = \\inf_{\\mathbf{p} \\neq 0} \\frac{\\sqrt{\\mathbf{p}^T B A^{-1} B^T \\mathbf{p}}}{\\sqrt{\\mathbf{p}^T M_p \\mathbf{p}}}\n$$\nSquaring this expression yields:\n$$\n\\beta_h^2 = \\inf_{\\mathbf{p} \\neq 0} \\frac{\\mathbf{p}^T (B A^{-1} B^T) \\mathbf{p}}{\\mathbf{p}^T M_p \\mathbf{p}}\n$$\nThis is the Rayleigh quotient for the matrix pencil $(B A^{-1} B^T, M_p)$. The infimum corresponds to the smallest eigenvalue $\\lambda$ of the generalized eigenvalue problem:\n$$\n(B A^{-1} B^T) \\mathbf{p} = \\lambda M_p \\mathbf{p}\n$$\nThe pressure space $Q_h$ is a subspace of $L^2(\\Omega)$, not $L_0^2(\\Omega)$, as we are instructed not to enforce the zero-mean constraint explicitly. The operator $B$ has a null space corresponding to constant pressures, as $\\int (\\nabla \\cdot v_h) c \\, \\mathrm{d}x = c \\int_{\\partial \\Omega} v_h \\cdot n \\, \\mathrm{d}s = 0$ for $v_h \\in V_h \\subset [H_0^1(\\Omega)]^2$. Consequently, the matrix $B A^{-1} B^T$ has a null space corresponding to the vector of coefficients for a constant pressure field, leading to a zero eigenvalue. The inf-sup constant is related to the stability of non-constant pressure modes. Therefore, $\\beta_h^2$ is the smallest strictly positive eigenvalue of this problem.\n\nThe computational procedure is as follows:\n1.  **Mesh Generation and DOF Management**: A structured grid of $N_x \\times N_y$ rectangles is generated over $\\Omega = (0,1)\\times(0,1)$. Each rectangle is divided into two triangles. Degrees of freedom (DOFs) for velocity and pressure are associated with the mesh vertices and triangles. Homogeneous Dirichlet boundary conditions for velocity are enforced by retaining only DOFs corresponding to interior vertices and bubble functions.\n\n2.  **Matrix Assembly**: For each triangle $T$ in the mesh, local matrices $A_T$, $B_T$, and $M_{p,T}$ are computed and assembled into global matrices.\n    -   **P1 Elements**: For continuous piecewise linear basis functions $\\phi_i$, the gradients are constant on each triangle. Integrals like $\\int_T \\nabla \\phi_i \\cdot \\nabla \\phi_j \\,dx$ are computed exactly as $(\\nabla \\phi_i \\cdot \\nabla \\phi_j) \\cdot \\text{Area}(T)$. The pressure mass matrix entries $\\int_T \\phi_i \\phi_j \\,dx$ use the standard formula $\\frac{\\text{Area}(T)}{12}(1+\\delta_{ij})$.\n    -   **MINI Elements**: This element enriches the P1 velocity space with vector-valued bubble functions. The scalar bubble function on a reference element is $b(\\lambda_1, \\lambda_2, \\lambda_3) = 27\\lambda_1\\lambda_2\\lambda_3$. Integrals involving the bubble function or its derivatives, such as $\\int_T \\nabla b_k:\\nabla b_l\\,dx$ and $\\int_T q_h \\nabla \\cdot b_k \\,dx$, involve polynomials of degree up to 4. As per the problem specification, a quadrature rule exact for polynomials of at least degree 5 is required. A symmetric 7-point rule on the triangle is implemented for this purpose. The quadrature points and weights are transformed from a reference triangle to each physical triangle in the mesh.\n\n3.  **Boundary Conditions Enforcement**: After assembling the full system matrices ($A_{full}, B_{full}$), the rows and columns corresponding to velocity DOFs on the boundary $\\partial\\Omega$ are removed from $A_{full}$ to form the matrix $A$, and the corresponding columns are removed from $B_{full}$ to form $B$. The pressure matrix $M_p$ remains unchanged.\n\n4.  **Eigenvalue Problem Solution**: With the matrices $A$, $B$, and $M_p$ constructed, the following steps are performed:\n    a. The velocity stiffness matrix $A$ for interior DOFs is inverted.\n    b. The Schur complement-like matrix $S = B A^{-1} B^T$ is explicitly formed. Given the small problem sizes, this is computationally feasible.\n    c. The generalized eigenvalue problem $S\\mathbf{p} = \\lambda M_p\\mathbf{p}$ is solved using a standard numerical library function for symmetric matrices (e.g., `scipy.linalg.eigh`).\n    d. The resulting eigenvalues are sorted. The smallest one will be numerically close to zero, corresponding to the constant pressure mode. The next smallest eigenvalue is $\\lambda_{min, >0}$.\n    e. The inf-sup constant is computed as $\\beta_h = \\sqrt{\\lambda_{min,>0}}$.\n\nThis procedure is applied to each of the three test cases specified in the problem. For the unstable $\\mathcal{P}_{\\text{P1P1}}$ pair, additional near-zero eigenvalues are expected due to spurious pressure modes, but the logic to find the smallest strictly positive eigenvalue correctly identifies the stability constant, which is expected to be close to zero.", "answer": "```python\nimport numpy as np\nfrom scipy.linalg import eigh\n\ndef solve():\n    \"\"\"\n    Main solver function to compute inf-sup constants for the specified test cases.\n    \"\"\"\n    test_cases = [\n        {'Nx': 2, 'Ny': 2, 'pair': 'MINI'},\n        {'Nx': 2, 'Ny': 2, 'pair': 'P1P1'},\n        {'Nx': 3, 'Ny': 2, 'pair': 'MINI'}\n    ]\n\n    results = []\n    for case in test_cases:\n        beta_h = compute_inf_sup(case['Nx'], case['Ny'], case['pair'])\n        results.append(f\"{beta_h:.6f}\")\n\n    print(f\"[{','.join(results)}]\")\n\ndef get_quadrature_rule(degree):\n    \"\"\"\n    Returns points and weights for a symmetric triangle quadrature rule.\n    Points are in barycentric coordinates. Weights are for a triangle of area 1.\n    \"\"\"\n    if degree >= 5: # 7-point rule, exact for degree 5\n        # Ref: Dunavant, D. A. (1985). High degree efficient symmetrical Gaussian\n        # quadrature rules for the triangle. International journal for numerical\n        # methods in engineering, 21(6), 1129-1148. Scheme 7-2.\n        points = [\n            (1/3, 1/3, 1/3),\n            (0.797426985353087, 0.101286507323456, 0.101286507323456),\n            (0.101286507323456, 0.797426985353087, 0.101286507323456),\n            (0.101286507323456, 0.101286507323456, 0.797426985353087),\n            (0.059715871789770, 0.470142064105115, 0.470142064105115),\n            (0.470142064105115, 0.059715871789770, 0.470142064105115),\n            (0.470142064105115, 0.470142064105115, 0.059715871789770)\n        ]\n        weights = [\n            0.225, 0.125939180544827, 0.125939180544827, 0.125939180544827,\n            0.132394152788506, 0.132394152788506, 0.132394152788506\n        ]\n        return np.array(points), np.array(weights)\n    else:\n        raise NotImplementedError(\"Only quadrature for degree >= 5 is implemented.\")\n\ndef compute_inf_sup(Nx, Ny, pair):\n    \"\"\"\n    Computes the discrete inf-sup constant beta_h for a given grid and element pair.\n    \"\"\"\n    # 1. Mesh Generation\n    num_nodes = (Nx + 1) * (Ny + 1)\n    nodes = np.array([[i / Nx, j / Ny] for j in range(Ny + 1) for i in range(Nx + 1)])\n    \n    num_triangles = 2 * Nx * Ny\n    triangles = []\n    for j in range(Ny):\n        for i in range(Nx):\n            p0 = j * (Nx + 1) + i\n            p1 = j * (Nx + 1) + (i + 1)\n            p2 = (j + 1) * (Nx + 1) + i\n            p3 = (j + 1) * (Nx + 1) + (i + 1)\n            triangles.append([p0, p1, p3]) # Lower-left to upper-right diagonal\n            triangles.append([p0, p3, p2])\n    triangles = np.array(triangles)\n\n    # 2. DOF Management\n    is_boundary_node = np.isclose(nodes[:, 0], 0) | np.isclose(nodes[:, 0], 1) | \\\n                       np.isclose(nodes[:, 1], 0) | np.isclose(nodes[:, 1], 1)\n    \n    interior_v_nodes = np.where(~is_boundary_node)[0]\n    num_interior_v_nodes = len(interior_v_nodes)\n    \n    # Map global P1 node index to interior velocity DoF index\n    v_node_map = {node_idx: i for i, node_idx in enumerate(interior_v_nodes)}\n\n    if pair == 'MINI':\n        num_v_dofs = 2 * num_interior_v_nodes + 2 * num_triangles\n    elif pair == 'P1P1':\n        num_v_dofs = 2 * num_interior_v_nodes\n    else:\n        raise ValueError(\"Unknown element pair\")\n        \n    num_p_dofs = num_nodes\n\n    # 3. Matrix Assembly\n    A = np.zeros((num_v_dofs, num_v_dofs))\n    B = np.zeros((num_p_dofs, num_v_dofs))\n    Mp = np.zeros((num_p_dofs, num_p_dofs))\n    \n    quad_points, quad_weights = get_quadrature_rule(5)\n    \n    for tri_idx, tri_nodes in enumerate(triangles):\n        v = nodes[tri_nodes]\n        J = np.array([v[1] - v[0], v[2] - v[0]]).T\n        area = 0.5 * np.abs(np.linalg.det(J))\n        J_inv_T = np.linalg.inv(J).T\n\n        # Gradients of barycentric coordinates on reference element\n        grad_lambda_ref = np.array([[-1, -1], [1, 0], [0, 1]]).T\n        # Gradients of P1 basis functions on physical element\n        grad_phi_phys = J_inv_T @ grad_lambda_ref\n        \n        # P1-P1 stiffness and mass contributions\n        for i in range(3):\n            for j in range(3):\n                # Pressure mass matrix\n                Mp_local = area / 12 * (1 + (i == j))\n                Mp[tri_nodes[i], tri_nodes[j]] += Mp_local\n                \n                # Velocity stiffness matrix (P1 part)\n                if tri_nodes[i] in v_node_map and tri_nodes[j] in v_node_map:\n                    dof_i = v_node_map[tri_nodes[i]]\n                    dof_j = v_node_map[tri_nodes[j]]\n                    A_local_p1 = area * np.dot(grad_phi_phys[:, i], grad_phi_phys[:, j])\n                    A[dof_i, dof_j] += A_local_p1             # u-u\n                    A[dof_i + num_interior_v_nodes, dof_j + num_interior_v_nodes] += A_local_p1 # v-v\n        \n        # Divergence matrix (P1 velocity, P1 pressure)\n        for i in range(3): # local velocity node\n            if tri_nodes[i] in v_node_map:\n                dof_i_u = v_node_map[tri_nodes[i]]\n                dof_i_v = dof_i_u + num_interior_v_nodes\n                for j in range(3): # local pressure node\n                    dof_j_p = tri_nodes[j]\n                    # divergence of u-basis is grad_phi_phys[0,i]\n                    # divergence of v-basis is grad_phi_phys[1,i]\n                    B_local_u = grad_phi_phys[0, i] * area / 3.0\n                    B_local_v = grad_phi_phys[1, i] * area / 3.0\n                    B[dof_j_p, dof_i_u] += B_local_u\n                    B[dof_j_p, dof_i_v] += B_local_v\n\n        # Bubble function contributions (for MINI element)\n        if pair == 'MINI':\n            u_bubble_dof = 2 * num_interior_v_nodes + 2 * tri_idx\n            v_bubble_dof = u_bubble_dof + 1\n            \n            for q_idx in range(len(quad_weights)):\n                lmbda = quad_points[q_idx]\n                w = quad_weights[q_idx] * area\n                \n                # Bubble value and gradient on reference triangle\n                b_val = 27 * lmbda[0] * lmbda[1] * lmbda[2]\n                grad_b_ref = 27 * (lmbda[1]*lmbda[2]*grad_lambda_ref[:,0] + \n                                   lmbda[0]*lmbda[2]*grad_lambda_ref[:,1] +\n                                   lmbda[0]*lmbda[1]*grad_lambda_ref[:,2])\n                \n                grad_b_phys = J_inv_T @ grad_b_ref\n                div_b_phys = grad_b_phys[0] + grad_b_phys[1]\n\n                # Stiffness matrix: bubble-bubble\n                A_bb_local = w * np.dot(grad_b_phys, grad_b_phys)\n                A[u_bubble_dof, u_bubble_dof] += A_bb_local\n                A[v_bubble_dof, v_bubble_dof] += A_bb_local\n                \n                # Stiffness matrix: bubble-P1\n                for i in range(3):\n                    if tri_nodes[i] in v_node_map:\n                        p1_dof_u = v_node_map[tri_nodes[i]]\n                        p1_dof_v = p1_dof_u + num_interior_v_nodes\n                        \n                        A_bp_local = w * np.dot(grad_b_phys, grad_phi_phys[:,i])\n                        A[u_bubble_dof, p1_dof_u] += A_bp_local\n                        A[p1_dof_u, u_bubble_dof] += A_bp_local\n                        A[v_bubble_dof, p1_dof_v] += A_bp_local\n                        A[p1_dof_v, v_bubble_dof] += A_bp_local\n                \n                # Divergence matrix: bubble velocity - P1 pressure\n                for j in range(3):\n                    p_dof = tri_nodes[j]\n                    p_val_at_quad = lmbda[j]\n                    \n                    B_u_local = w * p_val_at_quad * grad_b_phys[0] # div u_bubble = grad_b_phys[0]\n                    B_v_local = w * p_val_at_quad * grad_b_phys[1] # div v_bubble = grad_b_phys[1]\n                    \n                    B[p_dof, u_bubble_dof] += B_u_local\n                    B[p_dof, v_bubble_dof] += B_v_local\n    \n    # 4. Eigenvalue Problem\n    if num_v_dofs == 0:\n        return 0.0\n\n    try:\n        A_inv = np.linalg.inv(A)\n    except np.linalg.LinAlgError:\n        # This can happen if A is singular, e.g. for P1-P1 on a grid with no interior nodes.\n        return 0.0\n\n    S = B @ A_inv @ B.T\n    \n    # Solve generalized eigenvalue problem: S*p = lambda*Mp*p\n    # eigh sorts eigenvalues in ascending order\n    # For symmetric positive semi-definite S and positive definite Mp\n    eigenvalues = eigh(S, Mp, eigvals_only=True)\n\n    # The smallest eigenvalue should be ~0 (constant pressure mode).\n    # The inf-sup constant is the sqrt of the smallest non-zero eigenvalue.\n    # We take the second smallest eigenvalue.\n    smallest_positive_lambda = 0.0\n    for eig in eigenvalues:\n        if eig > 1e-10: # Tolerance for zero\n            smallest_positive_lambda = eig\n            break\n            \n    beta_h = np.sqrt(smallest_positive_lambda) if smallest_positive_lambda > 0 else 0.0\n    \n    return beta_h\n\nif __name__ == '__main__':\n    solve()\n\n```", "id": "2578083"}]}