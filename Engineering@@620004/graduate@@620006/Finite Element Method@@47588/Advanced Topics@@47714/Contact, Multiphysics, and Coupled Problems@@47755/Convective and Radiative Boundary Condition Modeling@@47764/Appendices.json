{"hands_on_practices": [{"introduction": "The Stefan-Boltzmann law is a cornerstone of radiative heat transfer, but its fourth-power dependence on temperature introduces a common and critical pitfall. This first exercise [@problem_id:2549197] provides a quantitative demonstration of why absolute temperature scales, such as Kelvin, are non-negotiable in these calculations. By computing the error from a common mistake, you will gain a concrete appreciation for the physical principles that underpin any valid numerical model.", "problem": "A one-dimensional thermal bar of length $L$ is modeled using the Finite Element Method (FEM). At the boundary $x=L$, the heat exchange with an environment at temperature $T_{\\infty}$ occurs by both convection and thermal radiation. The surface at $x=L$ has temperature $T_{s}$. The boundary traction (outward heat flux) that enters the natural boundary integral of the weak form is the sum of a convective term and a radiative term. Starting from the fundamental facts that (i) Newton’s law of cooling states the convective heat flux is proportional to the temperature difference, and (ii) the Stefan–Boltzmann law for blackbody emission states the emissive power is proportional to the fourth power of absolute temperature, derive the correct expression for the net radiative heat flux between the surface and the surroundings for a diffuse-gray surface with emissivity $\\epsilon$. Then, suppose an engineer mistakenly evaluates the radiative boundary traction by substituting temperatures expressed in degrees Celsius into the fourth-power dependence rather than an absolute temperature in kelvin.\n\nFor the specific case $T_{s}=120\\,^{\\circ}\\mathrm{C}$ and $T_{\\infty}=25\\,^{\\circ}\\mathrm{C}$, with emissivity $\\epsilon$ and Stefan–Boltzmann constant $\\sigma$ treated as given physical constants, compute the signed relative error in the radiative traction contribution caused solely by using degrees Celsius instead of kelvin, defined as\n$$\\delta \\equiv \\frac{q_{\\text{wrong}}-q_{\\text{correct}}}{q_{\\text{correct}}},$$\nwhere $q_{\\text{wrong}}$ is the radiative term computed with degrees Celsius and $q_{\\text{correct}}$ is the radiative term computed with absolute temperature in kelvin. Express your final answer as a dimensionless decimal fraction (not a percentage) and round your answer to four significant figures.", "solution": "First, we derive the expression for the net radiative heat flux, which is the boundary traction contribution in the Finite Element Method formulation. The surface at $x=L$ is described as a diffuse-gray surface with temperature $T_s$ and emissivity $\\epsilon$, exchanging heat with large surroundings at temperature $T_{\\infty}$.\n\n1.  **Emission**: According to the Stefan-Boltzmann law, the emissive power of a real (gray) surface is given by $E = \\epsilon \\sigma T_s^4$, where $\\sigma$ is the Stefan-Boltzmann constant and $T_s$ is the absolute surface temperature in kelvin. This is the energy radiated away from the surface per unit area.\n\n2.  **Irradiation and Absorption**: The surroundings are considered to be a large enclosure that behaves as a blackbody radiator at an absolute temperature $T_{\\infty}$. The radiation incident on the surface from the surroundings, known as irradiation, is therefore $G = \\sigma T_{\\infty}^4$. A fraction of this incident radiation is absorbed by the surface. The absorptivity, $\\alpha$, of a gray surface is equal to its emissivity, $\\epsilon$, a consequence of Kirchhoff's law of thermal radiation. Thus, the absorbed radiative flux is $G_{abs} = \\alpha G = \\epsilon \\sigma T_{\\infty}^4$.\n\n3.  **Net Flux**: The net radiative heat flux, $q_{\\text{rad}}$, is the difference between the emitted flux and the absorbed flux. It represents the net rate of energy leaving the surface per unit area due to radiation.\n    $$q_{\\text{rad}} = E - G_{abs} = \\epsilon \\sigma T_s^4 - \\epsilon \\sigma T_{\\infty}^4$$\n    This simplifies to the correct expression for the radiative boundary traction:\n    $$q_{\\text{correct}} = \\epsilon \\sigma (T_s^4 - T_{\\infty}^4)$$\n    It is imperative to recognize that $T_s$ and $T_{\\infty}$ in this equation must be expressed in an absolute temperature scale, such as kelvin $(\\mathrm{K})$.\n\nNow, we compute the relative error caused by the described blunder. The engineer incorrectly uses temperatures in degrees Celsius $(^{\\circ}\\mathrm{C})$ instead of kelvin. We are given the surface temperature $T_{s,C} = 120 \\,^{\\circ}\\mathrm{C}$ and the environment temperature $T_{\\infty,C} = 25 \\,^{\\circ}\\mathrm{C}$.\n\nThe conversion from Celsius to Kelvin is $T_K = T_C + 273.15$.\nThe correct absolute temperatures are:\n$T_{s,K} = 120 + 273.15 = 393.15 \\, \\mathrm{K}$\n$T_{\\infty,K} = 25 + 273.15 = 298.15 \\, \\mathrm{K}$\n\nThe correct radiative flux is:\n$$q_{\\text{correct}} = \\epsilon \\sigma (T_{s,K}^4 - T_{\\infty,K}^4) = \\epsilon \\sigma \\left( (393.15)^4 - (298.15)^4 \\right)$$\n\nThe incorrectly calculated flux, using Celsius values directly, is:\n$$q_{\\text{wrong}} = \\epsilon \\sigma (T_{s,C}^4 - T_{\\infty,C}^4) = \\epsilon \\sigma \\left( (120)^4 - (25)^4 \\right)$$\n\nThe signed relative error $\\delta$ is defined as:\n$$\\delta = \\frac{q_{\\text{wrong}} - q_{\\text{correct}}}{q_{\\text{correct}}}$$\nSubstituting the expressions for the fluxes:\n$$\\delta = \\frac{\\epsilon \\sigma (T_{s,C}^4 - T_{\\infty,C}^4) - \\epsilon \\sigma (T_{s,K}^4 - T_{\\infty,K}^4)}{\\epsilon \\sigma (T_{s,K}^4 - T_{\\infty,K}^4)}$$\nThe term $\\epsilon \\sigma$ is a non-zero common factor and cancels out, leaving:\n$$\\delta = \\frac{T_{s,C}^4 - T_{\\infty,C}^4}{T_{s,K}^4 - T_{\\infty,K}^4} - 1$$\n\nWe now substitute the numerical values:\nNumerator calculation:\n$$T_{s,C}^4 - T_{\\infty,C}^4 = (120)^4 - (25)^4 = 207360000 - 390625 = 206969375$$\nDenominator calculation:\n$$T_{s,K}^4 - T_{\\infty,K}^4 = (393.15)^4 - (298.15)^4 \\approx 2.39025 \\times 10^{10} - 7.89617 \\times 10^9 = 1.60063 \\times 10^{10}$$\nThe precise difference is $16006345000$.\n\nNow we compute the ratio:\n$$\\frac{T_{s,C}^4 - T_{\\infty,C}^4}{T_{s,K}^4 - T_{\\infty,K}^4} = \\frac{206969375}{16006345000} \\approx 0.0129304$$\n\nFinally, we calculate the relative error $\\delta$:\n$$\\delta = 0.0129304 - 1 = -0.9870696$$\n\nThe problem requires the answer to be rounded to four significant figures. The first four significant figures are $9, 8, 7, 0$. The following digit is $6$, so we round up the last significant digit.\n$$\\delta \\approx -0.9871$$\nThis substantial negative error indicates that the incorrect calculation grossly underestimates the true radiative heat flux, yielding a result that is only about $1.3\\%$ of the correct value. Such a mistake is not merely a numerical discrepancy; it is a fundamental failure of physical reasoning that would lead to catastrophic design flaws.", "answer": "$$\\boxed{-0.9871}$$", "id": "2549197"}, {"introduction": "Transitioning from physical laws to a computational framework requires a rigorous mathematical formulation. This practice [@problem_id:2549173] guides you through the derivation of the weak form for a general heat transfer problem involving mixed boundary conditions, including the nonlinear radiative term. Understanding how different boundary types are naturally or essentially enforced is fundamental to correctly implementing and interpreting finite element simulations.", "problem": "Consider steady heat conduction in a bounded Lipschitz domain $\\Omega \\subset \\mathbb{R}^d$ with thermal conductivity $k(\\boldsymbol{x}) > 0$. Let the boundary $\\partial \\Omega$ be partitioned into pairwise disjoint measurable subsets $\\Gamma_D$, $\\Gamma_N$, and $\\Gamma_R$ such that $\\overline{\\Gamma_D} \\cup \\overline{\\Gamma_N} \\cup \\overline{\\Gamma_R} = \\partial \\Omega$. The strong form is given by the conservation of energy and Fourier’s law: \n$$- \\nabla \\cdot \\left( k \\nabla T \\right) = q \\quad \\text{in } \\Omega,$$\nwith boundary conditions\n$$T = T_D \\quad \\text{on } \\Gamma_D,$$\n$$-k \\nabla T \\cdot \\boldsymbol{n} = 0 \\quad \\text{on } \\Gamma_N,$$\n$$-k \\nabla T \\cdot \\boldsymbol{n} = h \\left( T - T_\\infty \\right) + \\varepsilon \\sigma \\left( T^4 - T_\\infty^4 \\right) \\quad \\text{on } \\Gamma_R,$$\nwhere $q$ is a volumetric heat source, $T_D$ is a prescribed temperature, $\\boldsymbol{n}$ is the unit outward normal on $\\partial \\Omega$, $h \\ge 0$ is a convective heat transfer coefficient, $\\varepsilon \\in [0,1]$ is an emissivity, and $\\sigma$ is the Stefan–Boltzmann constant. The last boundary condition models simultaneous convection and thermal radiation (a nonlinear Robin condition).\n\nUsing the finite element method (FEM), derive the variational formulation starting from the strong form, employing a test function $w$ with $w=0$ on $\\Gamma_D$. Use only integration by parts and the stated boundary conditions. From this, determine how a zero-flux condition on $\\Gamma_N$ is enforced in the assembled system when $-k \\nabla T \\cdot \\boldsymbol{n} = 0$ on $\\Gamma_N$.\n\nThen discuss the numerical treatment, if any, required at a geometrical corner (or edge in higher dimension) where $\\Gamma_N$ meets $\\Gamma_R$, that is, points in $\\overline{\\Gamma_N} \\cap \\overline{\\Gamma_R}$. Address both the well-posedness of the weak form and any practical finite element assembly or quadrature considerations for the convective–radiative term. You may assume a standard $C^0$ Lagrange finite element space and standard element and boundary-edge quadrature rules.\n\nWhich of the following statements are correct?\n\nA. In the weak form, the boundary integral over $\\Gamma_N$ vanishes under $-k \\nabla T \\cdot \\boldsymbol{n} = 0$, so omitting all load-vector and stiffness contributions from $\\Gamma_N$ exactly enforces the zero-flux boundary without any penalty or Lagrange multipliers.\n\nB. At a corner where $\\Gamma_N$ meets $\\Gamma_R$, one must add a special pointwise Robin contribution at that corner node; otherwise the convective–radiative exchange is undercounted and global energy balance is violated.\n\nC. The set $\\overline{\\Gamma_N} \\cap \\overline{\\Gamma_R}$ has surface measure $0$, so the weak form requires no extra boundary term at the junction; however, solution gradients can be locally singular at mixed-boundary corners, and accuracy may require mesh refinement or enrichment, while standard edge-based assembly on $\\Gamma_R$ remains sufficient and $\\Gamma_N$ contributes nothing.\n\nD. For the radiative nonlinearity, a Newton linearization of the Robin term over $\\Gamma_R$ is appropriate; this linearization must also include a Dirac-delta-like contribution at the junction point $\\overline{\\Gamma_N} \\cap \\overline{\\Gamma_R}$ to capture the corner effect.\n\nE. Accurate assembly of the $\\Gamma_R$ term requires a boundary quadrature rule that explicitly includes the edge endpoints; otherwise the missing endpoint evaluations lead to a systematic error at mixed-boundary corners, so special endpoint-weighted quadrature is mandatory.", "solution": "### Derivation of the Variational Formulation\n\nWe begin with the strong form of the governing equation:\n$$ - \\nabla \\cdot (k \\nabla T) = q \\quad \\text{in } \\Omega $$\nWe multiply by a suitable test function $w$ from a function space where $w=0$ on the Dirichlet boundary $\\Gamma_D$, and integrate over the domain $\\Omega$:\n$$ \\int_\\Omega -w \\nabla \\cdot (k \\nabla T) \\, dV = \\int_\\Omega w q \\, dV $$\nNext, we apply the integration by parts formula (Green's first identity) to the left-hand side term:\n$$ \\int_\\Omega \\nabla w \\cdot (k \\nabla T) \\, dV - \\int_{\\partial \\Omega} w (k \\nabla T \\cdot \\boldsymbol{n}) \\, dS = \\int_\\Omega w q \\, dV $$\nRearranging the terms, we get:\n$$ \\int_\\Omega k \\nabla w \\cdot \\nabla T \\, dV = \\int_\\Omega w q \\, dV + \\int_{\\partial \\Omega} w (k \\nabla T \\cdot \\boldsymbol{n}) \\, dS $$\nWe now enforce the boundary conditions by splitting the boundary integral over $\\partial\\Omega = \\Gamma_D \\cup \\Gamma_N \\cup \\Gamma_R$:\n$$ \\int_{\\partial \\Omega} w (k \\nabla T \\cdot \\boldsymbol{n}) \\, dS = \\int_{\\Gamma_D} w (k \\nabla T \\cdot \\boldsymbol{n}) \\, dS + \\int_{\\Gamma_N} w (k \\nabla T \\cdot \\boldsymbol{n}) \\, dS + \\int_{\\Gamma_R} w (k \\nabla T \\cdot \\boldsymbol{n}) \\, dS $$\nLet us analyze each integral:\n1.  **On $\\Gamma_D$**: The temperature $T=T_D$ is prescribed. This is an essential boundary condition. The test function $w$ is chosen from a space of functions that are zero on $\\Gamma_D$. Thus, for any $w$ in our test space, $w=0$ on $\\Gamma_D$, which implies $\\int_{\\Gamma_D} w (k \\nabla T \\cdot \\boldsymbol{n}) \\, dS = 0$.\n2.  **On $\\Gamma_N$**: The zero-flux condition is given as $-k \\nabla T \\cdot \\boldsymbol{n} = 0$, which is equivalent to $k \\nabla T \\cdot \\boldsymbol{n} = 0$. Substituting this into the integral yields $\\int_{\\Gamma_N} w (0) \\, dS = 0$. The integral vanishes identically. This type of condition, satisfied naturally through the variational formulation, is called a natural boundary condition.\n3.  **On $\\Gamma_R$**: The convective-radiative condition is given: $-k \\nabla T \\cdot \\boldsymbol{n} = h(T - T_\\infty) + \\varepsilon \\sigma (T^4 - T_\\infty^4)$. This is also a natural boundary condition. We substitute for the flux term, noting that $k \\nabla T \\cdot \\boldsymbol{n} = - [ h(T - T_\\infty) + \\varepsilon \\sigma (T^4 - T_\\infty^4) ]$:\n    $$ \\int_{\\Gamma_R} w (k \\nabla T \\cdot \\boldsymbol{n}) \\, dS = \\int_{\\Gamma_R} -w \\left[ h(T-T_\\infty) + \\varepsilon \\sigma (T^4-T_\\infty^4) \\right] \\, dS $$\n\nCombining these results, the final weak (or variational) formulation is:\nFind $T \\in V_D = \\{ \\phi \\in H^1(\\Omega) \\mid \\phi|_{\\Gamma_D} = T_D \\}$ such that for all test functions $w \\in V_0 = \\{ \\phi \\in H^1(\\Omega) \\mid \\phi|_{\\Gamma_D} = 0 \\}$:\n$$ \\int_\\Omega k \\nabla w \\cdot \\nabla T \\, dV + \\int_{\\Gamma_R} w \\left[ h(T-T_\\infty) + \\varepsilon \\sigma (T^4-T_\\infty^4) \\right] dS = \\int_\\Omega wq \\, dV $$\nThis equation is nonlinear in $T$ due to the $T^4$ term.\n\n### Enforcement of $\\Gamma_N$ Condition and Treatment of $\\overline{\\Gamma_N} \\cap \\overline{\\Gamma_R}$ Corner\n\n- **Enforcement of Zero-Flux on $\\Gamma_N$**: As shown in the derivation, the boundary integral over $\\Gamma_N$ naturally becomes zero when the condition $-k \\nabla T \\cdot \\boldsymbol{n} = 0$ is substituted. In a finite element implementation, one assembles stiffness matrices and load vectors by looping over elements and their faces. For element faces that lie on $\\Gamma_N$, one simply does not compute or add any boundary integral contributions. This act of \"doing nothing\" for the boundary $\\Gamma_N$ is precisely how the homogeneous Neumann condition is enforced.\n\n- **Treatment of the Corner $\\overline{\\Gamma_N} \\cap \\overline{\\Gamma_R}$**: This set represents the junction between the insulated and the convective-radiative boundaries. In $\\mathbb{R}^2$, this is a point; in $\\mathbb{R}^3$, this is an edge. The surface integrals in the weak form are over $(d-1)$-dimensional manifolds. The junction $\\overline{\\Gamma_N} \\cap \\overline{\\Gamma_R}$ has dimension $(d-2)$, and thus its $(d-1)$-dimensional measure is zero. Since integration over a set of measure zero yields zero, this junction does not contribute to the boundary integrals. Therefore, the weak formulation requires no special terms or treatment for this junction. It is a known result that solutions may exhibit singular behavior (e.g., unbounded gradients) at corners where boundary condition types change. This is a matter of solution regularity and local accuracy, which can be addressed by local mesh refinement or using enriched basis functions, but it does not alter the fundamental weak formulation itself.\n\n### Evaluation of Options\n\n**A. In the weak form, the boundary integral over $\\Gamma_N$ vanishes under $-k \\nabla T \\cdot \\boldsymbol{n} = 0$, so omitting all load-vector and stiffness contributions from $\\Gamma_N$ exactly enforces the zero-flux boundary without any penalty or Lagrange multipliers.**\nThis statement is perfectly accurate. The derivation shows that the integral over $\\Gamma_N$ vanishes. In the finite element method, this translates directly to not adding any terms to the global system from the boundary faces on $\\Gamma_N$. This is the defining characteristic of a homogeneous natural boundary condition.\n**Verdict: Correct.**\n\n**B. At a corner where $\\Gamma_N$ meets $\\Gamma_R$, one must add a special pointwise Robin contribution at that corner node; otherwise the convective–radiative exchange is undercounted and global energy balance is violated.**\nThis is incorrect. The weak formulation is based on integrals over sets of non-zero measure. A corner or edge, having zero surface measure, does not contribute to the surface integral. There is no mathematical basis in the Galerkin method for adding a \"pointwise\" term.\n**Verdict: Incorrect.**\n\n**C. The set $\\overline{\\Gamma_N} \\cap \\overline{\\Gamma_R}$ has surface measure $0$, so the weak form requires no extra boundary term at the junction; however, solution gradients can be locally singular at mixed-boundary corners, and accuracy may require mesh refinement or enrichment, while standard edge-based assembly on $\\Gamma_R$ remains sufficient and $\\Gamma_N$ contributes nothing.**\nThis is a comprehensive and correct statement. It correctly identifies that the junction has measure zero, hence no extra term is needed in the weak form. It correctly points out the potential for solution singularities, which is a known issue of solution regularity, not of formulation. It also correctly notes that the standard numerical procedure (mesh refinement for accuracy, standard assembly of existing terms) is the proper way to handle the situation.\n**Verdict: Correct.**\n\n**D. For the radiative nonlinearity, a Newton linearization of the Robin term over $\\Gamma_R$ is appropriate; this linearization must also include a Dirac-delta-like contribution at the junction point $\\overline{\\Gamma_N} \\cap \\overline{\\Gamma_R}$ to capture the corner effect.**\nThe first part of the statement is true; Newton's method is a standard technique. However, the second part is false. The linearization of an integral term does not produce a Dirac-delta function at the boundary of the integration domain.\n**Verdict: Incorrect.**\n\n**E. Accurate assembly of the $\\Gamma_R$ term requires a boundary quadrature rule that explicitly includes the edge endpoints; otherwise the missing endpoint evaluations lead to a systematic error at mixed-boundary corners, so special endpoint-weighted quadrature is mandatory.**\nThis is incorrect. Standard numerical quadrature schemes, such as Gaussian quadrature, are generally used and do not evaluate the integrand at the endpoints of the integration interval. This is by design and does not constitute an error. The accuracy of the integration is controlled by the order of the quadrature rule and the mesh size.\n**Verdict: Incorrect.**\n\nBoth statements A and C are correct descriptions of different aspects of the problem asked.", "answer": "$$\\boxed{AC}$$", "id": "2549173"}, {"introduction": "Theoretical understanding is best solidified through practical application. This final exercise [@problem_id:2549213] bridges the gap between formulation and solution by asking you to reduce a boundary value problem with a radiative condition to a single nonlinear algebraic equation and implement a Newton-Raphson solver. This hands-on task crystallizes how abstract boundary conditions are transformed into a tangible computational algorithm that yields a physical result.", "problem": "Consider the one-dimensional steady heat conduction problem governed by the second-order ordinary differential equation (ODE) $-k\\,T''(x)=0$ on the open interval $(0,L)$, with a radiative natural boundary at $x=0$ and a prescribed temperature (Dirichlet condition) at $x=L$. The parameters are: the thermal conductivity $k$ in $\\mathrm{W\\,m^{-1}\\,K^{-1}}$, the length $L$ in $\\mathrm{m}$, the emissivity $\\epsilon$ (dimensionless), and the Stefan–Boltzmann constant $\\sigma$ in $\\mathrm{W\\,m^{-2}\\,K^{-4}}$. The ambient temperature is $T_{\\infty}$ in $\\mathrm{K}$, and the prescribed temperature at $x=L$ is $\\bar T$ in $\\mathrm{K}$. The radiative boundary condition at $x=0$ is\n$$-k\\,T'(0)=\\epsilon\\,\\sigma\\left(T(0)^4 - T_{\\infty}^4\\right),$$\nwhere $T'(0)$ denotes the derivative of $T$ with respect to the outward unit normal at $x=0$ (so that the left-hand side represents the positive outward heat flux). The boundary condition at $x=L$ is $T(L)=\\bar T$.\n\nTasks:\n- Starting from the fundamental facts that the solution of $-k\\,T''(x)=0$ is linear in $x$, that Fourier’s law gives the conductive flux, and that the radiative flux is governed by the Stefan–Boltzmann law, reduce the boundary value problem to a single nonlinear algebraic equation in the scalar unknown $T(0)$.\n- Derive a consistent Newton iteration to solve this scalar nonlinear equation. Your iteration must be written using a residual function and its derivative with respect to $T(0)$, obtained directly from the reduced algebraic equation.\n- Implement a program that, for each parameter set listed below, solves for $T(0)$ using your Newton iteration. The program must use a stopping criterion based on a residual norm tolerance and should include a globalization strategy (such as step damping) to ensure robust convergence. If $\\epsilon=0$, the program should still return a correct answer. The final answers must be expressed in Kelvin (unit $\\mathrm{K}$), rounded to three decimal places.\n\nTest suite (each tuple is $(k, L, \\epsilon, \\sigma, T_{\\infty}, \\bar T)$ in $\\left(\\mathrm{W\\,m^{-1}\\,K^{-1}}, \\mathrm{m}, -, \\mathrm{W\\,m^{-2}\\,K^{-4}}, \\mathrm{K}, \\mathrm{K}\\right)$):\n- Case $1$: $\\left(200,\\,0.01,\\,0.8,\\,5.670374419\\times 10^{-8},\\,300,\\,500\\right)$\n- Case $2$: $\\left(100,\\,0.05,\\,0,\\,5.670374419\\times 10^{-8},\\,400,\\,800\\right)$\n- Case $3$: $\\left(10,\\,0.2,\\,0.9,\\,5.670374419\\times 10^{-8},\\,300,\\,350\\right)$\n- Case $4$: $\\left(30,\\,0.1,\\,0.6,\\,5.670374419\\times 10^{-8},\\,300,\\,305\\right)$\n\nFinal output format:\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, for example $[T_0^{(1)},T_0^{(2)},T_0^{(3)},T_0^{(4)}]$, where each $T_0^{(i)}$ is the computed approximation to $T(0)$ in $\\mathrm{K}$ rounded to three decimal places. No additional text may be printed.", "solution": "The solution process begins with the governing ordinary differential equation (ODE) for steady-state one-dimensional heat conduction with no internal heat generation:\n$$ -k\\,T''(x) = 0 $$\nwhere $k$ is the thermal conductivity, assumed constant. Since $k>0$, this simplifies to $T''(x) = 0$. The general solution to this ODE is a linear function of $x$:\n$$ T(x) = C_1 x + C_2 $$\nwhere $C_1$ and $C_2$ are constants of integration.\n\nThese constants are determined by applying the boundary conditions. We define the unknown temperature at $x=0$ as $T_0 \\equiv T(0)$. The two conditions are:\n$1$. At $x=0$: $T(0) = T_0$.\n$2$. At $x=L$: $T(L) = \\bar{T}$.\n\nApplying the first condition to the general solution gives:\n$$ T(0) = C_1(0) + C_2 = T_0 \\implies C_2 = T_0 $$\nApplying the second condition gives:\n$$ T(L) = C_1 L + C_2 = \\bar{T} $$\nSubstituting $C_2=T_0$ into the second equation allows us to solve for $C_1$:\n$$ C_1 L + T_0 = \\bar{T} \\implies C_1 = \\frac{\\bar{T} - T_0}{L} $$\nThus, the temperature distribution along the rod is fully determined by the unknown boundary temperature $T_0$:\n$$ T(x) = \\left(\\frac{\\bar{T} - T_0}{L}\\right) x + T_0 $$\nThe heat flux is given by Fourier's Law, $q(x) = -k\\,T'(x)$. The derivative of the temperature is:\n$$ T'(x) = \\frac{d}{dx}T(x) = \\frac{\\bar{T} - T_0}{L} $$\nThis is a constant, indicating that the heat flux is uniform throughout the rod, which is consistent with a steady-state problem with no heat sources.\n\nThe problem specifies a nonlinear radiative boundary condition at $x=0$:\n$$ -k\\,T'(0) = \\epsilon\\,\\sigma\\left(T(0)^4 - T_{\\infty}^4\\right) $$\nThe term $T'(0)$ is defined as the derivative with respect to the outward unit normal at $x=0$. For a domain on $[0, L]$, the outward normal at $x=0$ points in the negative $x$-direction. Therefore, the normal derivative is $\\frac{\\partial T}{\\partial n}|_{x=0} = -\\frac{dT}{dx}|_{x=0}$. The problem's notation $T'(0)$ corresponds to this normal derivative.\n$$ T'(0) = -\\frac{dT}{dx}\\bigg|_{x=0} = -\\left(\\frac{\\bar{T} - T_0}{L}\\right) = \\frac{T_0 - \\bar{T}}{L} $$\nSubstituting this expression for $T'(0)$ and $T(0)=T_0$ into the radiative boundary condition yields:\n$$ -k \\left(\\frac{T_0 - \\bar{T}}{L}\\right) = \\epsilon\\,\\sigma\\left(T_0^4 - T_{\\infty}^4\\right) $$\nRearranging the left side gives:\n$$ \\frac{k}{L}(\\bar{T} - T_0) = \\epsilon\\,\\sigma\\left(T_0^4 - T_{\\infty}^4\\right) $$\nThis equation represents the physical balance at $x=0$: the heat conducted into the boundary from the rod, $\\frac{k}{L}(\\bar{T} - T_0)$, must equal the heat radiated away from the boundary, $\\epsilon\\,\\sigma(T_0^4 - T_{\\infty}^4)$. This is the desired single nonlinear algebraic equation for the unknown scalar $T_0$.\n\nTo solve this equation numerically, we employ the Newton-Raphson method. First, we define a residual function $R(T_0)$ by bringing all terms to one side:\n$$ R(T_0) = \\frac{k}{L}(\\bar{T} - T_0) - \\epsilon\\,\\sigma\\left(T_0^4 - T_{\\infty}^4\\right) = 0 $$\nThe Newton iteration requires the derivative of the residual function with respect to the unknown, $T_0$. This derivative, $R'(T_0)$, is the Jacobian of the scalar system:\n$$ R'(T_0) = \\frac{d}{dT_0} \\left[ \\frac{k}{L}(\\bar{T} - T_0) - \\epsilon\\,\\sigma(T_0^4 - T_{\\infty}^4) \\right] $$\n$$ R'(T_0) = -\\frac{k}{L} - \\epsilon\\,\\sigma(4T_0^3) = -\\left(\\frac{k}{L} + 4\\epsilon\\,\\sigma T_0^3\\right) $$\nFor any physically meaningful temperature $T_0 > 0$, the derivative $R'(T_0)$ is strictly negative, as $k, L, \\epsilon, \\sigma$ are positive constants. This ensures that the residual function is monotonically decreasing, guaranteeing a unique positive root.\n\nThe Newton-Raphson iteration is given by the update rule:\n$$ T_{0,n+1} = T_{0,n} - \\frac{R(T_{0,n})}{R'(T_{0,n})} $$\nwhere $T_{0,n}$ is the estimate of $T_0$ at iteration $n$.\n\nThe implementation will use this iteration. A suitable initial guess is $T_{0,0} = \\bar{T}$. The iteration continues until the absolute value of the residual, $|R(T_{0,n})|$, falls below a specified tolerance. A globalization strategy, specifically a backtracking line search, is included to ensure robust convergence. The update is modified to $T_{0,n+1} = T_{0,n} + \\alpha \\Delta T_{0,n}$, where $\\Delta T_{0,n} = -R(T_{0,n})/R'(T_{0,n})$ is the full Newton step and $\\alpha \\in (0, 1]$ is a damping factor. We start with $\\alpha=1$ and successively halve it until a sufficient decrease in the residual norm is achieved, i.e., $|R(T_{0,n+1})| < |R(T_{0,n})|$.\n\nIn the special case where the emissivity $\\epsilon=0$, the boundary condition simplifies to $\\frac{k}{L}(\\bar{T} - T_0) = 0$, which implies $T_0 = \\bar{T}$. This corresponds to an insulated boundary, where zero heat flux ($T'(x)=0$) leads to a uniform temperature profile. The derived Newton iteration correctly converges to this solution in a single step.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef newton_solver(k, L, eps, sigma, T_inf, T_bar):\n    \"\"\"\n    Solves the nonlinear equation for T(0) using a damped Newton's method.\n    \n    Args:\n        k (float): Thermal conductivity (W m^-1 K^-1).\n        L (float): Length of the rod (m).\n        eps (float): Emissivity (dimensionless).\n        sigma (float): Stefan-Boltzmann constant (W m^-2 K^-4).\n        T_inf (float): Ambient temperature (K).\n        T_bar (float): Prescribed temperature at x=L (K).\n        \n    Returns:\n        float: The solved temperature T(0) in Kelvin.\n    \"\"\"\n    \n    # In the case of zero emissivity, the boundary is insulated.\n    # The heat flux is zero, so T'(x) = 0, and T(x) is constant.\n    # Therefore, T(0) = T(L) = T_bar.\n    if eps == 0.0:\n        return T_bar\n\n    # --- Newton-Raphson Solver Setup ---\n    # Initial guess for T(0) is the prescribed temperature at the other end.\n    T0 = float(T_bar)\n    \n    tol = 1e-9  # Convergence tolerance for the residual norm\n    max_iter = 50  # Maximum number of Newton iterations\n    max_ls_iter = 10  # Maximum number of line search (damping) steps\n\n    for i in range(max_iter):\n        # Define the residual function R(T0) and its derivative R_prime(T0).\n        # R(T0) = k/L * (T_bar - T0) - eps * sigma * (T0^4 - T_inf^4)\n        term_cond = (k / L) * (T_bar - T0)\n        term_rad = eps * sigma * (T0**4 - T_inf**4)\n        res = term_cond - term_rad\n\n        # Check for convergence\n        if abs(res) < tol:\n            return T0\n\n        # R_prime(T0) = -k/L - 4 * eps * sigma * T0^3\n        jac = -(k / L) - 4 * eps * sigma * T0**3\n        \n        if abs(jac) < 1e-20:\n            raise RuntimeError(\"Singular Jacobian encountered; solver failed.\")\n\n        # Full Newton step\n        delta_T0 = -res / jac\n\n        # --- Globalization: Damped step with backtracking line search ---\n        alpha = 1.0  # Initial damping factor\n        current_res_norm = abs(res)\n        step_found = False\n\n        for _ in range(max_ls_iter):\n            T0_next = T0 + alpha * delta_T0\n            \n            # Ensure temperature remains physically meaningful (positive Kelvin)\n            if T0_next <= 0:\n                alpha /= 2.0\n                continue\n\n            # Calculate residual at the new trial point\n            next_term_cond = (k / L) * (T_bar - T0_next)\n            next_term_rad = eps * sigma * (T0_next**4 - T_inf**4)\n            new_res_norm = abs(next_term_cond - next_term_rad)\n\n            # Accept step if residual is reduced\n            if new_res_norm < current_res_norm:\n                T0 = T0_next\n                step_found = True\n                break\n            \n            # Reduce step size if residual did not decrease\n            alpha /= 2.0\n\n        if not step_found:\n            raise RuntimeError(\"Line search failed to find a descent direction.\")\n\n    raise RuntimeError(f\"Newton's method did not converge within {max_iter} iterations.\")\n\n\ndef solve():\n    \"\"\"\n    Main function to run test cases and print the results.\n    \"\"\"\n    # Test suite: (k, L, epsilon, sigma, T_infinity, T_bar)\n    test_cases = [\n        (200.0, 0.01, 0.8, 5.670374419e-8, 300.0, 500.0),\n        (100.0, 0.05, 0.0, 5.670374419e-8, 400.0, 800.0),\n        (10.0, 0.2, 0.9, 5.670374419e-8, 300.0, 350.0),\n        (30.0, 0.1, 0.6, 5.670374419e-8, 300.0, 305.0)\n    ]\n\n    results = []\n    for case in test_cases:\n        k, L, eps, sigma, T_inf, T_bar = case\n        try:\n            T0_solution = newton_solver(k, L, eps, sigma, T_inf, T_bar)\n            # Format the result to three decimal places as required.\n            results.append(f\"{T0_solution:.3f}\")\n        except RuntimeError as e:\n            results.append(f\"Error: {e}\")\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2549213"}]}