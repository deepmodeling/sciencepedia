{"hands_on_practices": [{"introduction": "The first step in implementing any finite element method is to understand its contribution at the element level. This practice focuses on deriving the fundamental building block of the GLS method: the element stabilization matrix for the 1D advection-diffusion equation. By working through this calculation for simple linear elements, you will uncover a key simplification that makes the implementation efficient [@problem_id:2561151].", "problem": "Consider the one-dimensional steady advection–diffusion model problem on the interval $(0,1)$,\n$$- \\kappa \\, u''(x) + \\beta \\, u'(x) = f(x), \\quad x \\in (0,1),$$\nwith homogeneous Dirichlet boundary conditions $u(0)=0$ and $u(1)=0$, where $\\kappa0$ and $\\beta \\in \\mathbb{R}$ are constants. Let $V_h$ denote the conforming, piecewise linear finite element space subordinate to a partition of $(0,1)$ into nonoverlapping open elements $\\{K_e\\}$ with nodes at the endpoints and mesh size $h_e = \\operatorname{meas}(K_e)$. Using the weighted residual statement and the standard variational formulation for the Galerkin method, derive the Galerkin/least-squares stabilization (GLS) weak form by adding on each element $K_e$ a stabilization term of the form\n$$\\tau_e \\, \\big( \\mathcal{L} u_h, \\mathcal{L} v_h \\big)_{K_e},$$\nwhere $\\mathcal{L} := -\\kappa \\tfrac{d^2}{dx^2} + \\beta \\tfrac{d}{dx}$ and $\\tau_e0$ is an element-wise stabilization parameter. Clearly state the resulting stabilized weak problem.\n\nThen, using the local nodal basis $\\{\\varphi_1,\\varphi_2\\}$ of $V_h$ on a generic element $K_e=[x_a,x_b]$ with $\\varphi_1(x_a)=1$, $\\varphi_1(x_b)=0$, $\\varphi_2(x_a)=0$, $\\varphi_2(x_b)=1$, compute the $2 \\times 2$ element-level GLS stabilization matrix $\\mathbf{K}^{(e)}_{\\text{GLS}}$ with entries\n$$\\big(\\mathbf{K}^{(e)}_{\\text{GLS}}\\big)_{ij} \\;=\\; \\tau_e \\int_{K_e} \\big(\\mathcal{L}\\varphi_j\\big)\\,\\big(\\mathcal{L}\\varphi_i\\big)\\,dx, \\quad i,j \\in \\{1,2\\},$$\nexpressed in closed form in terms of $\\beta$, $\\kappa$, $\\tau_e$, and $h_e$.\n\nYour final answer must be a single closed-form analytic expression for the element-level GLS stabilization matrix. Do not simplify to numerical values. Do not include units. Provide no intermediate steps in the final answer block.", "solution": "The problem as stated is mathematically well-defined, self-contained, and scientifically grounded within the established theory of finite element methods for partial differential equations. All necessary definitions and parameters are provided to permit a rigorous derivation and computation. We shall proceed directly to the solution.\n\nThe problem is divided into two parts. First, we derive the stabilized weak formulation. Second, we compute the element-level stabilization matrix.\n\nPart 1: Derivation of the Galerkin/Least-Squares (GLS) Weak Form\n\nThe governing differential equation is the one-dimensional steady advection-diffusion equation:\n$$ - \\kappa \\, u''(x) + \\beta \\, u'(x) = f(x), \\quad x \\in (0,1) $$\nwith homogeneous Dirichlet boundary conditions $u(0)=0$ and $u(1)=0$. The differential operator is $\\mathcal{L}u = -\\kappa u'' + \\beta u'$.\n\nThe standard Galerkin method begins with the weighted residual statement. We seek an approximate solution $u_h$ in a finite-dimensional space $V_h$ such that for all test functions $v_h \\in V_h$:\n$$ \\int_0^1 ( - \\kappa u_h''(x) + \\beta u_h'(x) - f(x) ) \\, v_h(x) \\, dx = 0 $$\nApplying integration by parts to the second-derivative term gives:\n$$ \\int_0^1 \\kappa u_h'(x) v_h'(x) \\, dx - [\\kappa u_h'(x) v_h(x)]_0^1 + \\int_0^1 \\beta u_h'(x) v_h(x) \\, dx = \\int_0^1 f(x) v_h(x) \\, dx $$\nThe test functions $v_h$ are required to belong to the same space as the trial solutions and satisfy the homogeneous form of the essential boundary conditions. Thus, for our problem, $v_h(0)=0$ and $v_h(1)=0$, which causes the boundary term $[\\kappa u_h'(x) v_h(x)]_0^1$ to vanish. The standard Galerkin weak form is then: Find $u_h \\in V_h$ such that for all $v_h \\in V_h$,\n$$ \\int_0^1 \\left( \\kappa u_h'(x) v_h'(x) + \\beta u_h'(x) v_h(x) \\right) dx = \\int_0^1 f(x) v_h(x) \\, dx $$\nThis can be written compactly as $B(u_h, v_h) = L(v_h)$.\n\nThe Galerkin/least-squares (GLS) method adds a stabilization term to the standard formulation. As specified, the term to be added is a sum over all elements $K_e$ of the mesh:\n$$ \\sum_{e} \\tau_e \\, ( \\mathcal{L} u_h, \\mathcal{L} v_h )_{K_e} = \\sum_{e} \\tau_e \\int_{K_e} (\\mathcal{L}u_h) \\, (\\mathcal{L}v_h) \\, dx $$\nwhere $\\mathcal{L}u_h = -\\kappa u_h'' + \\beta u_h'$. Adding this to the left-hand side of the standard Galerkin form yields the stabilized weak problem: Find $u_h \\in V_h$ such that for all $v_h \\in V_h$,\n$$ \\int_0^1 \\left( \\kappa u_h'(x) v_h'(x) + \\beta u_h'(x) v_h(x) \\right) dx + \\sum_{e} \\tau_e \\int_{K_e} \\big(-\\kappa u_h'' + \\beta u_h'\\big) \\big(-\\kappa v_h'' + \\beta v_h'\\big) \\, dx = \\int_0^1 f(x) v_h(x) \\, dx $$\nThis completes the first part of the problem.\n\nPart 2: Computation of the Element-Level GLS Stabilization Matrix\n\nWe are to compute the $2 \\times 2$ element-level stabilization matrix $\\mathbf{K}^{(e)}_{\\text{GLS}}$ for a generic element $K_e = [x_a, x_b]$ of length $h_e = x_b - x_a$. The entries are given by:\n$$ \\big(\\mathbf{K}^{(e)}_{\\text{GLS}}\\big)_{ij} = \\tau_e \\int_{K_e} \\big(\\mathcal{L}\\varphi_j\\big) \\, \\big(\\mathcal{L}\\varphi_i\\big) \\, dx, \\quad i,j \\in \\{1,2\\} $$\nThe space $V_h$ consists of continuous piecewise linear functions. On the element $K_e$, the local basis functions $\\{\\varphi_1, \\varphi_2\\}$ are linear polynomials defined by their nodal values:\n$$ \\varphi_1(x_a)=1, \\quad \\varphi_1(x_b)=0 $$\n$$ \\varphi_2(x_a)=0, \\quad \\varphi_2(x_b)=1 $$\nExplicitly, on $K_e$, these functions are:\n$$ \\varphi_1(x) = \\frac{x_b - x}{x_b - x_a} = \\frac{x_b - x}{h_e} $$\n$$ \\varphi_2(x) = \\frac{x - x_a}{x_b - x_a} = \\frac{x - x_a}{h_e} $$\nWe compute their first and second derivatives with respect to $x$:\n$$ \\varphi_1'(x) = -\\frac{1}{h_e}, \\quad \\varphi_1''(x) = 0 $$\n$$ \\varphi_2'(x) = \\frac{1}{h_e}, \\quad \\varphi_2''(x) = 0 $$\nNow, we apply the operator $\\mathcal{L} = -\\kappa \\frac{d^2}{dx^2} + \\beta \\frac{d}{dx}$ to each basis function. Since the basis functions are linear, their second derivatives are zero *within* the element $K_e$.\n$$ \\mathcal{L}\\varphi_1 = -\\kappa \\varphi_1'' + \\beta \\varphi_1' = -\\kappa(0) + \\beta \\left(-\\frac{1}{h_e}\\right) = -\\frac{\\beta}{h_e} $$\n$$ \\mathcal{L}\\varphi_2 = -\\kappa \\varphi_2'' + \\beta \\varphi_2' = -\\kappa(0) + \\beta \\left(\\frac{1}{h_e}\\right) = \\frac{\\beta}{h_e} $$\nIt is a crucial observation that for piecewise linear elements, the diffusive part of the operator, $-\\kappa \\frac{d^2}{dx^2}$, vanishes when applied to the basis functions inside an element. Consequently, the resulting stabilization matrix will be independent of the diffusivity parameter $\\kappa$.\n\nThe terms $\\mathcal{L}\\varphi_1$ and $\\mathcal{L}\\varphi_2$ are constant over the element $K_e$. We can now compute the entries of the matrix $\\mathbf{K}^{(e)}_{\\text{GLS}}$.\n\nFor $(i,j)=(1,1)$:\n$$ \\big(\\mathbf{K}^{(e)}_{\\text{GLS}}\\big)_{11} = \\tau_e \\int_{x_a}^{x_b} (\\mathcal{L}\\varphi_1)(\\mathcal{L}\\varphi_1) \\, dx = \\tau_e \\int_{x_a}^{x_b} \\left(-\\frac{\\beta}{h_e}\\right) \\left(-\\frac{\\beta}{h_e}\\right) dx = \\tau_e \\frac{\\beta^2}{h_e^2} \\int_{x_a}^{x_b} dx = \\tau_e \\frac{\\beta^2}{h_e^2} (h_e) = \\frac{\\tau_e \\beta^2}{h_e} $$\nFor $(i,j)=(1,2)$:\n$$ \\big(\\mathbf{K}^{(e)}_{\\text{GLS}}\\big)_{12} = \\tau_e \\int_{x_a}^{x_b} (\\mathcal{L}\\varphi_2)(\\mathcal{L}\\varphi_1) \\, dx = \\tau_e \\int_{x_a}^{x_b} \\left(\\frac{\\beta}{h_e}\\right) \\left(-\\frac{\\beta}{h_e}\\right) dx = -\\tau_e \\frac{\\beta^2}{h_e^2} \\int_{x_a}^{x_b} dx = -\\frac{\\tau_e \\beta^2}{h_e} $$\nFor $(i,j)=(2,1)$:\n$$ \\big(\\mathbf{K}^{(e)}_{\\text{GLS}}\\big)_{21} = \\tau_e \\int_{x_a}^{x_b} (\\mathcal{L}\\varphi_1)(\\mathcal{L}\\varphi_2) \\, dx = \\tau_e \\int_{x_a}^{x_b} \\left(-\\frac{\\beta}{h_e}\\right) \\left(\\frac{\\beta}{h_e}\\right) dx = -\\tau_e \\frac{\\beta^2}{h_e^2} \\int_{x_a}^{x_b} dx = -\\frac{\\tau_e \\beta^2}{h_e} $$\nFor $(i,j)=(2,2)$:\n$$ \\big(\\mathbf{K}^{(e)}_{\\text{GLS}}\\big)_{22} = \\tau_e \\int_{x_a}^{x_b} (\\mathcal{L}\\varphi_2)(\\mathcal{L}\\varphi_2) \\, dx = \\tau_e \\int_{x_a}^{x_b} \\left(\\frac{\\beta}{h_e}\\right) \\left(\\frac{\\beta}{h_e}\\right) dx = \\tau_e \\frac{\\beta^2}{h_e^2} \\int_{x_a}^{x_b} dx = \\frac{\\tau_e \\beta^2}{h_e} $$\nAssembling these entries into matrix form, we obtain the element-level GLS stabilization matrix:\n$$ \\mathbf{K}^{(e)}_{\\text{GLS}} = \\begin{pmatrix} \\frac{\\tau_e \\beta^2}{h_e}  -\\frac{\\tau_e \\beta^2}{h_e} \\\\ -\\frac{\\tau_e \\beta^2}{h_e}  \\frac{\\tau_e \\beta^2}{h_e} \\end{pmatrix} = \\frac{\\tau_e \\beta^2}{h_e} \\begin{pmatrix} 1  -1 \\\\ -1  1 \\end{pmatrix} $$\nThis is the required closed-form expression.", "answer": "$$\n\\boxed{\\frac{\\tau_e \\beta^2}{h_e} \\begin{pmatrix} 1  -1 \\\\ -1  1 \\end{pmatrix}}\n$$", "id": "2561151"}, {"introduction": "While the standard Galerkin method can produce oscillatory, non-physical solutions for advection-dominated problems, stabilization aims to correct this. This exercise provides a deeper justification for GLS by connecting it to the discrete maximum principle, a condition ensuring that the numerical solution behaves reasonably. You will derive the exact amount of stabilization needed to guarantee a monotone, oscillation-free stencil [@problem_id:2561128].", "problem": "Consider the steady one-dimensional ($1$D) advection–diffusion boundary value problem on the interval $[0,L]$ with Dirichlet boundary conditions\n$$\n- \\nu\\, u''(x) + a\\, u'(x) = f(x), \\quad x \\in (0,L), \\qquad u(0)=\\alpha,\\quad u(L)=\\beta,\n$$\nwhere $a0$ is a constant advection speed, $\\nu \\ge 0$ is a constant diffusion coefficient, and $f$ is sufficiently smooth. Discretize the problem using the finite element method with continuous, piecewise linear basis functions on a uniform mesh with $N$ elements and element size $h=L/N$. Stabilize the discretization using the Galerkin/Least-Squares (GLS) method, in which one adds to the standard Galerkin weak form an elementwise least-squares term of the strong residual, weighted by a constant stabilization parameter $\\tau$ on each element.\n\nStarting from the fundamental definitions of the standard Galerkin weak form and the Galerkin/Least-Squares (GLS) stabilization for this operator, and using only properties of linear shape functions on a uniform mesh, carry out the following steps for an interior node $i$:\n$1.$ Derive the assembled three-point stencil (the coefficients multiplying $u_{i-1}$, $u_{i}$, and $u_{i+1}$) for the GLS-stabilized discrete equations.\n$2.$ Using the characterization of monotone matrices for three-point stencils, determine the condition on $\\tau$ that guarantees all off-diagonal entries in the interior-node equations are non-positive, ensuring a discrete maximum principle for the interior.\n$3.$ From this, identify the minimal stabilization parameter $\\tau_{\\min}$ (as a single analytic expression) in terms of $a$, $\\nu$, and $h$ such that the GLS-stabilized matrix is monotone in the interior for all interior nodes.\n\nGive your final answer as the closed-form expression for $\\tau_{\\min}$ in terms of $a$, $\\nu$, and $h$. Do not provide an inequality; provide a single analytic expression. If your expression involves any constants, write them explicitly. No numerical rounding is required.", "solution": "The problem will first be validated for scientific and logical consistency.\n\n### Step 1: Extract Givens\n- **Governing Equation**: Steady $1$D advection–diffusion equation: $- \\nu\\, u''(x) + a\\, u'(x) = f(x)$ for $x \\in (0,L)$.\n- **Boundary Conditions**: Dirichlet conditions: $u(0)=\\alpha$, $u(L)=\\beta$.\n- **Parameters**: $a  0$ (constant advection speed), $\\nu \\ge 0$ (constant diffusion coefficient).\n- **Discretization**: Finite element method with continuous, piecewise linear basis functions.\n- **Mesh**: Uniform mesh with $N$ elements, element size $h=L/N$.\n- **Stabilization**: Galerkin/Least-Squares (GLS) method, where a term is added to the standard Galerkin weak form. The added term is an elementwise least-squares term of the strong residual, weighted by a constant stabilization parameter $\\tau$ on each element.\n\n### Step 2: Validate Using Extracted Givens\n- **Scientifically Grounded**: The problem is based on the advection-diffusion equation, a fundamental model in physics and engineering. The Finite Element Method (FEM) and Galerkin/Least-Squares (GLS) stabilization are standard, well-established topics in numerical analysis for partial differential equations. The problem is scientifically sound.\n- **Well-Posed**: The problem asks for the derivation of a discrete stencil and a stability parameter based on a well-defined mathematical procedure. The boundary value problem is well-posed, and the task of deriving the discrete system and its properties is a standard exercise in computational mathematics.\n- **Objective**: The problem is stated in precise, objective mathematical language.\n- **Completeness**: All necessary information is provided. The PDE, boundary conditions, discretization type, and stabilization method are explicitly defined. While the phrasing \"least-squares term of the strong residual\" can be slightly ambiguous, in the context of linear elements and the advection-diffusion operator, it has a standard interpretation as the Streamline-Upwind Petrov-Galerkin (SUPG) method, which is a particular form of GLS. Adopting this standard interpretation renders the problem complete and solvable.\n\n### Step 3: Verdict and Action\nThe problem is deemed **valid**. It is a standard, well-posed problem in the field of numerical analysis for PDEs. I will now proceed with a complete solution.\n\nThe weak formulation of the problem is derived by multiplying the PDE by a test function $v(x)$ from a suitable space and integrating over the domain $\\Omega = (0, L)$.\n$$\n\\int_0^L (- \\nu\\, u'' + a\\, u') v \\, dx = \\int_0^L f v \\, dx\n$$\nIntegrating the second-order term by parts, we obtain the standard Galerkin weak form: Find $u \\in H^1(0,L)$ with $u(0)=\\alpha, u(L)=\\beta$ such that for all $v \\in H_0^1(0,L)$,\n$$\nB_{std}(u,v) \\equiv \\int_0^L (\\nu u' v' + a u' v) \\, dx = \\int_0^L f v \\, dx \\equiv L(v)\n$$\nThe finite element method seeks an approximate solution $u_h$ in a finite-dimensional space $S_h$ of piecewise linear functions, satisfying the boundary conditions. The test functions $v_h$ are taken from the corresponding space $V_h$ with homogeneous boundary conditions.\n\nThe Galerkin/Least-Squares (GLS) method adds a stabilization term to the standard weak form. The problem specifies this as an \"elementwise least-squares term of the strong residual\". The strong residual for a function $w$ is $R(w) = - \\nu w'' + a w' - f$. For a continuous, piecewise linear function $w_h$, its second derivative $w_h''$ is zero inside each element. Thus, the residual on an element $K_e$ is $R(w_h)|_{K_e} = a w_h' - f$. The standard GLS (or SUPG) formulation adds the term $\\sum_{e} \\int_{K_e} \\tau (a u_h') (a v_h') \\, dx$ to the left-hand side and $\\sum_{e} \\int_{K_e} \\tau f (a v_h') \\,dx$ to the right-hand side. The GLS-stabilized weak form is: Find $u_h \\in S_h$ such that for all $v_h \\in V_h$,\n$$\nB_{GLS}(u_h,v_h) = L_{GLS}(v_h)\n$$\nwhere\n$$\nB_{GLS}(u_h,v_h) = \\int_0^L (\\nu u_h' v_h' + a u_h' v_h) \\, dx + \\sum_{e=1}^N \\tau \\int_{K_e} a^2 u_h' v_h' \\, dx\n$$\nand the right-hand side is not needed for the stencil coefficients.\n\n**1. Derivation of the three-point stencil**\n\nWe consider an interior node $i$ at position $x_i = i h$. The discrete equation for this node is obtained by choosing the test function $v_h(x) = \\phi_i(x)$, where $\\phi_i(x)$ is the standard linear \"hat\" basis function centered at $x_i$. The support of $\\phi_i(x)$ is the interval $[x_{i-1}, x_{i+1}]$, which comprises two elements, $K_{i-1}=[x_{i-1}, x_i]$ and $K_i=[x_i, x_{i+1}]$.\nThe basis functions and their derivatives on these elements are:\n- On $K_{i-1}$: $\\phi_{i-1}(x) = \\frac{x_i - x}{h}$, $\\phi_i(x) = \\frac{x - x_{i-1}}{h}$. Derivatives are $\\phi'_{i-1}(x) = -\\frac{1}{h}$, $\\phi'_i(x) = \\frac{1}{h}$.\n- On $K_i$: $\\phi_i(x) = \\frac{x_{i+1} - x}{h}$, $\\phi_{i+1}(x) = \\frac{x - x_i}{h}$. Derivatives are $\\phi'_i(x) = -\\frac{1}{h}$, $\\phi'_{i+1}(x) = \\frac{1}{h}$.\n\nThe trial function $u_h(x)$ over the support of $\\phi_i(x)$ is $u_h(x) = u_{i-1}\\phi_{i-1}(x) + u_i\\phi_i(x) + u_{i+1}\\phi_{i+1}(x)$. Its derivative is constant on each element:\n- On $K_{i-1}$: $u_h'(x) = \\frac{u_i - u_{i-1}}{h}$.\n- On $K_i$: $u_h'(x) = \\frac{u_{i+1} - u_i}{h}$.\n\nWe assemble the equation for node $i$ by computing $B_{GLS}(u_h, \\phi_i)$.\nThe contribution from the diffusion term is:\n$$\n\\int_0^L \\nu u_h' \\phi_i' \\, dx = \\int_{x_{i-1}}^{x_i} \\nu \\left(\\frac{u_i - u_{i-1}}{h}\\right) \\left(\\frac{1}{h}\\right) dx + \\int_{x_i}^{x_{i+1}} \\nu \\left(\\frac{u_{i+1} - u_i}{h}\\right) \\left(-\\frac{1}{h}\\right) dx\n= \\frac{\\nu}{h}(u_i - u_{i-1}) - \\frac{\\nu}{h}(u_{i+1} - u_i) = \\frac{\\nu}{h}(-u_{i-1} + 2u_i - u_{i+1})\n$$\nThe contribution from the advection term is:\n$$\n\\int_0^L a u_h' \\phi_i \\, dx = \\int_{x_{i-1}}^{x_i} a \\left(\\frac{u_i - u_{i-1}}{h}\\right) \\left(\\frac{x - x_{i-1}}{h}\\right) dx + \\int_{x_i}^{x_{i+1}} a \\left(\\frac{u_{i+1} - u_i}{h}\\right) \\left(\\frac{x_{i+1} - x}{h}\\right) dx\n$$\nThe integrals evaluate to $\\int_0^h \\xi d\\xi = h^2/2$ and $\\int_0^h (h-\\xi)d\\xi = h^2/2$.\n$$\n= a\\left(\\frac{u_i - u_{i-1}}{h^2}\\right)\\frac{h^2}{2} + a\\left(\\frac{u_{i+1} - u_i}{h^2}\\right)\\frac{h^2}{2} = \\frac{a}{2}(u_i - u_{i-1}) + \\frac{a}{2}(u_{i+1} - u_i) = \\frac{a}{2}(-u_{i-1} + u_{i+1})\n$$\nThe contribution from the stabilization term is:\n$$\n\\sum_e \\tau \\int_{K_e} a^2 u_h' \\phi_i' \\, dx = \\tau a^2 \\int_{x_{i-1}}^{x_i} \\left(\\frac{u_i - u_{i-1}}{h}\\right) \\left(\\frac{1}{h}\\right) dx + \\tau a^2 \\int_{x_i}^{x_{i+1}} \\left(\\frac{u_{i+1} - u_i}{h}\\right) \\left(-\\frac{1}{h}\\right) dx\n= \\frac{\\tau a^2}{h}(u_i - u_{i-1}) - \\frac{\\tau a^2}{h}(u_{i+1} - u_i) = \\frac{\\tau a^2}{h}(-u_{i-1} + 2u_i - u_{i+1})\n$$\nCombining all terms, we find the discrete equation at node $i$:\n$$\n\\left(\\frac{\\nu}{h} + \\frac{a}{2} + \\frac{\\tau a^2}{h}\\right)(-u_{i-1}) + \\left(\\frac{2\\nu}{h} + \\frac{2\\tau a^2}{h}\\right)u_i + \\left(\\frac{\\nu}{h} - \\frac{a}{2} + \\frac{\\tau a^2}{h}\\right)(-u_{i+1}) = \\text{RHS}_i\n$$\nThe coefficients of the three-point stencil multiplying $(u_{i-1}, u_i, u_{i+1})$ are:\n- Coefficient of $u_{i-1}$: $-\\frac{\\nu}{h} - \\frac{a}{2} - \\frac{\\tau a^2}{h}$\n- Coefficient of $u_i$: $\\frac{2\\nu}{h} + \\frac{2\\tau a^2}{h}$\n- Coefficient of $u_{i+1}$: $-\\frac{\\nu}{h} + \\frac{a}{2} - \\frac{\\tau a^2}{h}$\n\n**2. Condition on $\\tau$ for a monotone matrix**\n\nA tridiagonal matrix is considered monotone (specifically, an M-matrix), which implies a discrete maximum principle, if its diagonal entries are positive and its off-diagonal entries are non-positive.\n- **Diagonal entry**: The coefficient of $u_i$ is $\\frac{2}{h}(\\nu + \\tau a^2)$. Since $\\nu \\ge 0$, $a0$, $h0$, and stabilization requires $\\tau \\ge 0$, this term is always non-negative. It is strictly positive unless $\\nu=0$ and $\\tau=0$, a case we ignore.\n- **Off-diagonal entries**:\n  The coefficient of $u_{i-1}$ must be non-positive:\n  $$\n  -\\frac{\\nu}{h} - \\frac{a}{2} - \\frac{\\tau a^2}{h} \\le 0 \\implies \\frac{\\nu}{h} + \\frac{a}{2} + \\frac{\\tau a^2}{h} \\ge 0\n  $$\n  This condition is always satisfied for $\\nu \\ge 0, a  0, h  0, \\tau \\ge 0$.\n  The coefficient of $u_{i+1}$ must be non-positive:\n  $$\n  -\\frac{\\nu}{h} + \\frac{a}{2} - \\frac{\\tau a^2}{h} \\le 0\n  $$\n  This is the critical condition that constrains $\\tau$. Rearranging the inequality:\n  $$\n  \\frac{a}{2} \\le \\frac{\\nu}{h} + \\frac{\\tau a^2}{h}\n  $$\n  Multiplying by $h$ and solving for $\\tau$:\n  $$\n  \\frac{ah}{2} \\le \\nu + \\tau a^2 \\implies \\tau a^2 \\ge \\frac{ah}{2} - \\nu \\implies \\tau \\ge \\frac{h}{2a} - \\frac{\\nu}{a^2}\n  $$\n  Since the stabilization parameter $\\tau$ must be non-negative, we must combine this with the condition $\\tau \\ge 0$.\n  Therefore, the condition on $\\tau$ to ensure all off-diagonal entries are non-positive is:\n  $$\n  \\tau \\ge \\max\\left(0, \\frac{h}{2a} - \\frac{\\nu}{a^2}\\right)\n  $$\n\n**3. Minimal stabilization parameter $\\tau_{\\min}$**\n\nThe problem asks for the minimal stabilization parameter $\\tau_{\\min}$ that guarantees matrix monotonicity for all interior nodes. This corresponds to choosing the smallest possible value of $\\tau$ that satisfies the condition derived in the previous step. This is achieved by taking the lower bound of the inequality as the value for $\\tau_{\\min}$.\n\nTherefore, the minimal stabilization parameter is given by the single analytic expression:\n$$\n\\tau_{\\min} = \\max\\left(0, \\frac{h}{2a} - \\frac{\\nu}{a^2}\\right)\n$$\nThis value ensures that if the standard Galerkin method is already monotone (which occurs when $\\frac{h}{2a} - \\frac{\\nu}{a^2} \\le 0$, i.e., when the element Péclet number $Pe_h = \\frac{ah}{2\\nu} \\le 1$), no stabilization is added ($\\tau_{\\min} = 0$). If the standard Galerkin method is not monotone ($Pe_h  1$), $\\tau_{\\min}$ is the minimum positive value required to restore monotonicity to the system matrix.", "answer": "$$\\boxed{\\max\\left(0, \\frac{h}{2a} - \\frac{\\nu}{a^2}\\right)}$$", "id": "2561128"}, {"introduction": "Theory comes to life through implementation. This comprehensive practice guides you through building a complete GLS-stabilized finite element solver from the ground up for an advection-diffusion-reaction problem. Using the powerful method of manufactured solutions, you will not only write the code but also verify its correctness and quantitatively analyze how stabilization impacts solution accuracy [@problem_id:2561145].", "problem": "Consider the one-dimensional stationary advection–diffusion–reaction boundary value problem on the unit interval:\nFind a function $u : [0,1] \\to \\mathbb{R}$ such that\n$$\n-\\varepsilon\\,u''(x) + \\beta\\,u'(x) + c\\,u(x) = f(x)\\quad \\text{for } x\\in(0,1), \\qquad u(0)=0,\\; u(1)=0,\n$$\nwhere $\\varepsilon  0$, $\\beta \\in \\mathbb{R}$, and $c \\ge 0$ are given coefficients. Using the method of manufactured solutions, take the exact solution to be $u(x)=\\sin(\\pi x)$ and determine the source term $f(x)$ that makes $u(x)$ satisfy the differential equation with the given coefficients. Adopt a continuous, piecewise linear finite element space on a uniform mesh of $N$ elements with mesh size $h=1/N$, and derive the stabilized Galerkin/least-squares (GLS) formulation for this problem.\n\nStarting from the fundamental definitions of the weak form of the boundary value problem and the least-squares stabilization principle, perform the following derivations:\n1) Write the weak (variational) formulation corresponding to the standard Galerkin method: find $u \\in H_0^1(0,1)$ such that for all $v \\in H_0^1(0,1)$,\n$$\na(u,v) = \\ell(v),\n$$\nwhere $a(\\cdot,\\cdot)$ and $\\ell(\\cdot)$ are the bilinear and linear forms, respectively, corresponding to the differential operator $-\\varepsilon \\,\\frac{d^2}{dx^2} + \\beta \\,\\frac{d}{dx} + c$ and the source $f$.\n2) Derive the Galerkin/least-squares stabilized formulation: add the least-squares of the strong residual of the operator to both sides, i.e.,\n$$\na_{\\text{GLS}}(u,v) = \\ell_{\\text{GLS}}(v),\n$$\nwith\n$$\na_{\\text{GLS}}(u,v) := a(u,v) + \\sum_{K}\\tau_K \\int_{K} \\left( -\\varepsilon\\,u'' + \\beta\\,u' + c\\,u \\right)\\,\\left( -\\varepsilon\\,v'' + \\beta\\,v' + c\\,v \\right)\\,dx,\n$$\n$$\n\\ell_{\\text{GLS}}(v) := \\ell(v) + \\sum_{K}\\tau_K \\int_{K} f(x)\\,\\left( -\\varepsilon\\,v'' + \\beta\\,v' + c\\,v \\right)\\,dx,\n$$\nwhere the sum runs over the mesh elements $K$ and $\\tau_K$ is a positive stabilization parameter depending on $h$ and the coefficients.\n3) Specialize the above to continuous piecewise linear elements. Argue, using only basic properties of these basis functions, that within each element $K$ the second derivatives of the discrete trial and test functions vanish, and hence the GLS terms simplify to expressions involving only first derivatives and function values. Derive the resulting element-level algebraic contributions needed for assembly.\n4) Define an element-wise stabilization parameter of the form\n$$\n\\tau_K = \\tau_0 \\,\\frac{h_K}{2\\,|\\beta|},\n$$\nfor $|\\beta|  0$, where $\\tau_0 \\ge 0$ is a dimensionless tuning parameter and $h_K$ is the element size. Clarify how to handle the degenerate case $|\\beta|=0$.\n\nImplement a program that assembles the stabilized linear system for the discrete unknown vector of nodal values, applies homogeneous Dirichlet boundary conditions, solves the resulting linear system, and computes the $L^2$ and $H^1$ norm errors of the numerical solution with respect to $u(x)=\\sin(\\pi x)$:\n- The $L^2$ error is $\\|u - u_h\\|_{L^2(0,1)} := \\left( \\int_0^1 (u-u_h)^2 \\, dx\\right)^{1/2}$,\n- The $H^1$ error is $\\|u - u_h\\|_{H^1(0,1)} := \\left( \\|u-u_h\\|_{L^2(0,1)}^2 + \\|u' - u_h'\\|_{L^2(0,1)}^2 \\right)^{1/2}$.\nAll integrals required for assembly and error evaluation must be computed numerically by Gaussian quadrature with at least four Gauss points per element.\n\nUse the following fixed coefficients throughout: $\\varepsilon = 10^{-3}$, $\\beta = 2$, $c = 0$. With the manufactured solution $u(x)=\\sin(\\pi x)$, compute the corresponding source term $f(x)$ in exact arithmetic and use it in the assembly.\n\nTest suite:\nEvaluate the errors for the following nine cases, where $N$ is the number of uniform elements and $\\tau_0$ is the dimensionless stabilization parameter used in the definition of $\\tau_K$ above:\n- $(N,\\tau_0) \\in \\{(20,0.0),(20,0.5),(20,1.0),(40,0.0),(40,0.5),(40,1.0),(80,0.0),(80,0.5),(80,1.0)\\}$.\n\nFinal output format:\nYour program should produce a single line of output containing a list of nine entries, each entry corresponding to one test case in the order listed above. Each entry must itself be a four-element list of the form $[N,\\tau_0,L2\\_error,H1\\_error]$, where $L2\\_error$ and $H1\\_error$ are decimal numbers. The final line must have the exact format:\n[[N1,tau01,L2_error1,H1_error1],[N2,tau02,L2_error2,H1_error2],...,[N9,tau09,L2_error9,H1_error9]]", "solution": "We start from the fundamental weak form associated with the differential operator. For given coefficients $\\varepsilon  0$, $\\beta \\in \\mathbb{R}$, and $c \\ge 0$, consider the operator $L u := -\\varepsilon\\,u'' + \\beta\\,u' + c\\,u$. The strong form is $L u = f$ in $(0,1)$ with homogeneous Dirichlet boundary conditions $u(0) = u(1) = 0$. The standard Galerkin weak form is obtained by multiplying the strong equation by a test function $v \\in H_0^1(0,1)$, integrating over $(0,1)$, and integrating by parts the second derivative term once. This yields the bilinear form $a(\\cdot,\\cdot)$ and linear form $\\ell(\\cdot)$:\n$$\na(u,v) = \\int_0^1 \\varepsilon\\,u'(x)\\,v'(x)\\,dx \\;+\\; \\int_0^1 \\beta\\,u'(x)\\,v(x)\\,dx \\;+\\; \\int_0^1 c\\,u(x)\\,v(x)\\,dx,\n$$\n$$\n\\ell(v) = \\int_0^1 f(x)\\,v(x)\\,dx.\n$$\nThe Galerkin/least-squares (GLS) stabilization augments this formulation by adding a consistent least-squares term involving the strong residual on each element $K$ of the mesh. Let $\\{\\mathcal{T}_h\\}$ be a partition of $[0,1]$ into elements $K$ of size $h_K$. Define the GLS-stabilized bilinear and linear forms by\n$$\na_{\\text{GLS}}(u,v) = a(u,v) + \\sum_{K \\in \\mathcal{T}_h} \\tau_K \\int_{K} (L u)\\,(L v)\\,dx,\\qquad\n\\ell_{\\text{GLS}}(v) = \\ell(v) + \\sum_{K \\in \\mathcal{T}_h} \\tau_K \\int_{K} f(x)\\,(L v)\\,dx,\n$$\nwhere $\\tau_K  0$ is chosen to control stability in advection-dominated regimes.\n\nWe adopt a continuous, piecewise linear finite element space $V_h \\subset H_0^1(0,1)$ on a uniform mesh of $N$ elements with $h=1/N$. On each element $K=[x_i,x_{i+1}]$, the local basis functions are the standard linear shape functions $N_1$ and $N_2$. For any discrete function $w_h \\in V_h$, the second derivative $w_h''$ vanishes inside each element $K$, because $w_h$ is linear on $K$. Therefore, for trial and test functions $u_h, v_h \\in V_h$,\n$$\nL u_h\\big|_K = -\\varepsilon\\,u_h'' + \\beta\\,u_h' + c\\,u_h = \\beta\\,u_h' + c\\,u_h,\\quad\nL v_h\\big|_K = \\beta\\,v_h' + c\\,v_h.\n$$\nThis observation simplifies the GLS terms considerably:\n$$\n\\int_{K} (L u_h)(L v_h)\\,dx = \\int_{K} (\\beta\\,u_h' + c\\,u_h)\\,(\\beta\\,v_h' + c\\,v_h)\\,dx.\n$$\nExpanding this, the local GLS bilinear form consists of four contributions:\n1) $\\beta^2 \\int_K u_h' v_h' \\, dx$,\n2) $\\beta c \\int_K u_h' v_h \\, dx$,\n3) $\\beta c \\int_K u_h v_h' \\, dx$,\n4) $c^2 \\int_K u_h v_h \\, dx$.\nSimilarly, the stabilized right-hand side becomes\n$$\n\\int_K f(x)\\,(\\beta\\,v_h' + c\\,v_h)\\,dx = \\beta \\int_K f(x)\\,v_h'\\,dx + c \\int_K f(x)\\,v_h\\,dx.\n$$\nThese integrals can be assembled using Gaussian quadrature on each element, together with the standard Galerkin contributions:\n- Diffusion term: $\\varepsilon \\int_K u_h' v_h' \\, dx$,\n- Advection term: $\\beta \\int_K u_h' v_h \\, dx$,\n- Reaction term: $c \\int_K u_h v_h \\, dx$,\n- Load term: $\\int_K f(x) v_h \\, dx$.\n\nWe now specify the manufactured source $f(x)$ when $u(x) = \\sin(\\pi x)$. Using $L u = f$, we compute\n$$\nu'(x) = \\pi \\cos(\\pi x),\\qquad u''(x) = -\\pi^2 \\sin(\\pi x),\n$$\nand hence\n$$\nf(x) = -\\varepsilon\\,u''(x) + \\beta\\,u'(x) + c\\,u(x) = \\varepsilon\\,\\pi^2 \\sin(\\pi x) + \\beta\\,\\pi \\cos(\\pi x) + c\\,\\sin(\\pi x).\n$$\nUnder the specified coefficients $\\varepsilon = 10^{-3}$, $\\beta = 2$, and $c=0$, this simplifies to\n$$\nf(x) = 10^{-3}\\,\\pi^2 \\sin(\\pi x) + 2\\pi \\cos(\\pi x).\n$$\n\nWe choose the stabilization parameter on each element as\n$$\n\\tau_K = \\tau_0\\,\\frac{h_K}{2\\,|\\beta|},\n$$\nfor $|\\beta|0$. If $|\\beta|=0$, one may set $\\tau_K = \\tau_0\\,h_K/2$ as a fallback, though in our test suite we use $\\beta=2$ so the nondegenerate case applies.\n\nAlgorithmic implementation details:\n- Generate a uniform mesh with nodes $x_i = i h$ for $i=0,\\dots,N$.\n- Assemble the global matrix and vector by looping over elements. For numerical integration, use four-point Gauss–Legendre quadrature on the reference element $[-1,1]$ with the affine map to each physical element. The shape functions are $N_1(\\xi) = \\frac{1-\\xi}{2}$ and $N_2(\\xi) = \\frac{1+\\xi}{2}$ on the reference coordinate $\\xi \\in [-1,1]$. Their derivatives with respect to $x$ are constant on each element: $dN_1/dx = -1/h_K$, $dN_2/dx = 1/h_K$; equivalently, compute using $d\\xi \\mapsto dx$ via $dx = \\frac{h_K}{2}\\,d\\xi$.\n- The standard Galerkin bilinear contributions on each element are:\n  - Diffusion: $\\varepsilon \\int_K (dN/dx)^\\top (dN/dx)\\,dx$,\n  - Advection: $\\beta \\int_K (dN/dx)^\\top N\\,dx$,\n  - Reaction: $c \\int_K N^\\top N\\,dx$,\n  where $N=[N_1,N_2]^\\top$ and $dN/dx=[dN_1/dx,dN_2/dx]^\\top$.\n- The GLS bilinear contribution is $\\tau_K \\int_K (\\beta\\,dN/dx + c\\,N)\\,(\\beta\\,dN/dx + c\\,N)^\\top\\,dx$.\n- The right-hand side is augmented by the GLS term $\\tau_K \\int_K f(x)\\,(\\beta\\,dN/dx + c\\,N)\\,dx$ in addition to the standard load $\\int_K f(x)\\,N\\,dx$.\n- Apply homogeneous Dirichlet boundary conditions at the endpoints by forming the reduced system for the interior degrees of freedom (nodes $1$ through $N-1$).\n- Solve the resulting linear system for the interior nodal values.\n- Reconstruct $u_h$ on each element and evaluate the error norms using four-point Gauss–Legendre quadrature:\n  - For each quadrature point $x_q$ with weight $w_q$ and Jacobian $J_K = h_K/2$, compute the discrete solution value $u_h(x_q)=N(x_q)\\cdot u_h^K$ and derivative $u_h'(x_q)=dN/dx \\cdot u_h^K$. The exact values are $u(x_q)=\\sin(\\pi x_q)$ and $u'(x_q)=\\pi\\cos(\\pi x_q)$. Accumulate\n    $\\int_K (u-u_h)^2\\,dx \\approx \\sum_q w_q\\,J_K\\,(u(x_q)-u_h(x_q))^2$ and\n    $\\int_K (u'-u_h')^2\\,dx \\approx \\sum_q w_q\\,J_K\\,(u'(x_q)-u_h'(x_q))^2$.\n  - The global $L^2$ error is the square root of the sum over all elements of the first quantity, and the $H^1$ error is the square root of the sum of both quantities.\n\nTest suite and output:\nUse the nine $(N,\\tau_0)$ pairs specified in the problem. For each pair, compute the $L^2$ and $H^1$ errors. The program must output a single line containing a list of nine entries, each of the form $[N,\\tau_0,L2\\_error,H1\\_error]$, in the order of the test suite. This ensures coverage of multiple mesh sizes and different stabilization strengths, including the unstabilized case $\\tau_0=0$ and two stabilized cases.\n\nThis procedure is grounded in the fundamental weak formulation and the least-squares stabilization principle, uses only standard finite element machinery for assembly and quadrature, and yields quantifiable error norms for the manufactured solution, thus enabling a principled study of the effects of $h$ and $\\tau_0$ on the accuracy.", "answer": "```python\nimport numpy as np\n\ndef gauss_legendre(n):\n    # Returns points and weights for Gauss-Legendre quadrature on [-1,1]\n    if n == 1:\n        pts = np.array([0.0])\n        wts = np.array([2.0])\n    elif n == 2:\n        pts = np.array([-1.0/np.sqrt(3.0), 1.0/np.sqrt(3.0)])\n        wts = np.array([1.0, 1.0])\n    elif n == 3:\n        pts = np.array([-np.sqrt(3.0/5.0), 0.0, np.sqrt(3.0/5.0)])\n        wts = np.array([5.0/9.0, 8.0/9.0, 5.0/9.0])\n    elif n == 4:\n        pts = np.array([\n            -0.8611363115940526,\n            -0.3399810435848563,\n             0.3399810435848563,\n             0.8611363115940526\n        ])\n        wts = np.array([\n            0.3478548451374538,\n            0.6521451548625461,\n            0.6521451548625461,\n            0.3478548451374538\n        ])\n    else:\n        # Fallback using numpy for general n (not required here)\n        pts, wts = np.polynomial.legendre.leggauss(n)\n    return pts, wts\n\ndef manufactured_f(x, eps, beta, c):\n    # f(x) for u = sin(pi x)\n    pi = np.pi\n    return eps * (pi**2) * np.sin(pi * x) + beta * pi * np.cos(pi * x) + c * np.sin(pi * x)\n\ndef exact_u(x):\n    return np.sin(np.pi * x)\n\ndef exact_du(x):\n    return np.pi * np.cos(np.pi * x)\n\ndef assemble_system(N, tau0, eps, beta, c):\n    # Mesh\n    nodes = np.linspace(0.0, 1.0, N + 1)\n    # Global system\n    ndof = N + 1\n    A = np.zeros((ndof, ndof))\n    b = np.zeros(ndof)\n\n    # Quadrature (use 4-point rule)\n    xi_q, w_q = gauss_legendre(4)\n\n    for e in range(N):\n        xL = nodes[e]\n        xR = nodes[e + 1]\n        h = xR - xL\n        J = h / 2.0  # Jacobian for mapping from reference [-1,1] to [xL, xR]\n        tau_e = tau0 * h / (2.0 * (abs(beta) + 1e-30))  # stabilization parameter\n\n        # Local matrices and vector\n        Ae = np.zeros((2, 2))\n        be = np.zeros(2)\n\n        # Shape functions on reference element\n        # N1 = (1 - xi)/2, N2 = (1 + xi)/2\n        # dN/dxi: dN1/dxi = -1/2, dN2/dxi = 1/2\n        # dN/dx = dN/dxi * 2/h - constant on element\n        dNdx = np.array([-1.0 / h, 1.0 / h])  # [dN1/dx, dN2/dx] is constant\n\n        for (xi, w) in zip(xi_q, w_q):\n            # Map xi - x\n            x = 0.5 * (xL + xR) + 0.5 * h * xi\n\n            # Shape values at xi\n            N1 = 0.5 * (1.0 - xi)\n            N2 = 0.5 * (1.0 + xi)\n            N = np.array([N1, N2])\n\n            # Standard Galerkin contributions\n            # Diffusion: eps * (dNdx^T dNdx)\n            Ae += eps * np.outer(dNdx, dNdx) * (w * J)\n            # Advection: beta * (dNdx^T N)\n            Ae += beta * np.outer(dNdx, N) * (w * J)\n            # Reaction: c * (N^T N)\n            Ae += c * np.outer(N, N) * (w * J)\n\n            # Load vector: \\int f N dx\n            fx = manufactured_f(x, eps, beta, c)\n            be += fx * N * (w * J)\n\n            # GLS contributions\n            # L(N) for P1 inside element: beta * dNdx + c * N\n            LN = beta * dNdx + c * N  # vector of size 2\n            # Bilinear GLS: tau_e * \\int (LN)(LN)^T dx\n            Ae += tau_e * np.outer(LN, LN) * (w * J)\n            # RHS GLS: tau_e * \\int f * (beta dNdx + c N) dx\n            be += tau_e * fx * LN * (w * J)\n\n        # Assemble into global system\n        dofs = np.array([e, e + 1])\n        A[np.ix_(dofs, dofs)] += Ae\n        b[dofs] += be\n\n    # Apply Dirichlet boundary conditions u(0)=0, u(1)=0 by reduction\n    interior = np.arange(1, ndof - 1)\n    A_reduced = A[np.ix_(interior, interior)]\n    b_reduced = b[interior]  # boundary values are zero\n\n    # Solve\n    uh_interior = np.linalg.solve(A_reduced, b_reduced)\n\n    # Reconstruct full solution with boundary zeros\n    uh = np.zeros(ndof)\n    uh[1:-1] = uh_interior\n\n    return nodes, uh\n\ndef compute_errors(nodes, uh):\n    # Compute L2 and H1 norm errors using 4-point Gauss quadrature\n    xi_q, w_q = gauss_legendre(4)\n    L2_int = 0.0\n    H1semi_int = 0.0\n    N = len(nodes) - 1\n    for e in range(N):\n        xL = nodes[e]\n        xR = nodes[e + 1]\n        h = xR - xL\n        J = h / 2.0\n\n        ue = np.array([uh[e], uh[e + 1]])\n        dNdx = np.array([-1.0 / h, 1.0 / h])\n\n        for (xi, w) in zip(xi_q, w_q):\n            x = 0.5 * (xL + xR) + 0.5 * h * xi\n            N1 = 0.5 * (1.0 - xi)\n            N2 = 0.5 * (1.0 + xi)\n            Nvals = np.array([N1, N2])\n\n            uh_val = Nvals @ ue\n            duh_val = dNdx @ ue\n\n            u_ex = exact_u(x)\n            du_ex = exact_du(x)\n\n            L2_int += (u_ex - uh_val) ** 2 * (w * J)\n            H1semi_int += (du_ex - duh_val) ** 2 * (w * J)\n\n    L2_err = np.sqrt(L2_int)\n    H1_err = np.sqrt(L2_int + H1semi_int)\n    return L2_err, H1_err\n\ndef solve():\n    # Coefficients\n    eps = 1e-3\n    beta = 2.0\n    c = 0.0\n\n    # Test cases: (N, tau0)\n    test_cases = [\n        (20, 0.0), (20, 0.5), (20, 1.0),\n        (40, 0.0), (40, 0.5), (40, 1.0),\n        (80, 0.0), (80, 0.5), (80, 1.0),\n    ]\n\n    results = []\n    for N, tau0 in test_cases:\n        nodes, uh = assemble_system(N, tau0, eps, beta, c)\n        L2_err, H1_err = compute_errors(nodes, uh)\n        # Append [N, tau0, L2_error, H1_error]\n        results.append([int(N), float(tau0), float(L2_err), float(H1_err)])\n\n    # Format as a single line in the required structure\n    # Use default Python list formatting for nested lists\n    print(\"[\" + \",\".join(str(entry) for entry in results) + \"]\")\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "2561145"}]}