{"hands_on_practices": [{"introduction": "Practical finite element analysis relies on mapping simple 'parent' elements onto complex physical geometries. This exercise [@problem_id:2542271] delves into the heart of this process—the isoparametric formulation—for a four-node axisymmetric element. By deriving the Jacobian matrix and the transformation rules for gradients, you will develop the essential machinery needed to compute strains and stresses in arbitrarily shaped quadrilateral elements.", "problem": "Consider a four-node bilinear isoparametric axisymmetric solid finite element, with natural (parent) coordinates $(\\xi,\\eta) \\in [-1,1]\\times[-1,1]$ and physical coordinates $(r,z)$. The element uses the standard bilinear shape functions $N_{i}(\\xi,\\eta)$ for $i \\in \\{1,2,3,4\\}$ associated with the nodes located at the parent-space corners $(\\xi,\\eta)=(-1,-1),(+1,-1),(+1,+1),(-1,+1)$, respectively. The isoparametric mapping is $r(\\xi,\\eta)=\\sum_{i=1}^{4}N_{i}(\\xi,\\eta)\\,r_{i}$ and $z(\\xi,\\eta)=\\sum_{i=1}^{4}N_{i}(\\xi,\\eta)\\,z_{i}$. Starting from the chain rule and the definition of the Jacobian of the mapping, derive the Jacobian matrix $J=\\partial(r,z)/\\partial(\\xi,\\eta)$ and the operator relation that maps the natural gradients $\\left[\\partial N_{i}/\\partial \\xi,\\partial N_{i}/\\partial \\eta\\right]^{\\mathsf{T}}$ to the physical gradients $\\left[\\partial N_{i}/\\partial r,\\partial N_{i}/\\partial z\\right]^{\\mathsf{T}}$ needed in the strain-displacement matrix (B-matrix). Then, for the specific axisymmetric element whose nodal coordinates in the $(r,z)$-plane are\n- node $1$: $(r_{1},z_{1})=(\\,0.5,\\,0\\,)$,\n- node $2$: $(r_{2},z_{2})=(\\,1.5,\\,0\\,)$,\n- node $3$: $(r_{3},z_{3})=(\\,1.5,\\,1\\,)$,\n- node $4$: $(r_{4},z_{4})=(\\,0.5,\\,1\\,)$,\nevaluate at the natural point $(\\xi,\\eta)=(0,0)$ the Jacobian entries and the physical derivatives $\\partial N_{i}/\\partial r$ and $\\partial N_{i}/\\partial z$ for $i=1,2,3,4$. Use meters for lengths. Express your final answer as a single row matrix that first lists the Jacobian entries in row-major order $[J_{11}, J_{12}, J_{21}, J_{22}]$, followed by the eight derivatives in the order $[\\partial N_{1}/\\partial r,\\partial N_{1}/\\partial z,\\partial N_{2}/\\partial r,\\partial N_{2}/\\partial z,\\partial N_{3}/\\partial r,\\partial N_{3}/\\partial z,\\partial N_{4}/\\partial r,\\partial N_{4}/\\partial z]$. Report exact values (no rounding) and do not include units in the row matrix.", "solution": "The problem statement is parsed and validated. It is found to be scientifically grounded, well-posed, objective, and complete. It represents a standard exercise in the theory of the finite element method. There are no logical inconsistencies or factual errors. Therefore, a solution is warranted.\n\nThe four-node isoparametric element uses bilinear shape functions $N_i(\\xi, \\eta)$ defined on the parent domain $(\\xi, \\eta) \\in [-1, 1] \\times [-1, 1]$. For nodes $i \\in \\{1, 2, 3, 4\\}$ at the corners $(\\xi_i, \\eta_i)$ given by $(-1, -1), (+1, -1), (+1, +1), (-1, +1)$ respectively, the shape functions are:\n$$\n\\begin{aligned}\nN_1(\\xi, \\eta) &= \\frac{1}{4}(1 - \\xi)(1 - \\eta) \\\\\nN_2(\\xi, \\eta) &= \\frac{1}{4}(1 + \\xi)(1 - \\eta) \\\\\nN_3(\\xi, \\eta) &= \\frac{1}{4}(1 + \\xi)(1 + \\eta) \\\\\nN_4(\\xi, \\eta) &= \\frac{1}{4}(1 - \\xi)(1 + \\eta)\n\\end{aligned}\n$$\nThe isoparametric mapping relates the physical coordinates $(r, z)$ to the natural coordinates $(\\xi, \\eta)$ via these shape functions:\n$$\nr(\\xi, \\eta) = \\sum_{i=1}^{4} N_i(\\xi, \\eta) r_i \\quad \\text{and} \\quad z(\\xi, \\eta) = \\sum_{i=1}^{4} N_i(\\xi, \\eta) z_i\n$$\nwhere $(r_i, z_i)$ are the coordinates of node $i$ in the physical domain.\n\nThe relationship between derivatives in the physical and natural coordinate systems is established through the chain rule. For an arbitrary function $f(r, z)$, its derivatives with respect to $(\\xi, \\eta)$ are:\n$$\n\\frac{\\partial f}{\\partial \\xi} = \\frac{\\partial f}{\\partial r} \\frac{\\partial r}{\\partial \\xi} + \\frac{\\partial f}{\\partial z} \\frac{\\partial z}{\\partial \\xi}\n$$\n$$\n\\frac{\\partial f}{\\partial \\eta} = \\frac{\\partial f}{\\partial r} \\frac{\\partial r}{\\partial \\eta} + \\frac{\\partial f}{\\partial z} \\frac{\\partial z}{\\partial \\eta}\n$$\nThis can be expressed in matrix form:\n$$\n\\begin{Bmatrix} \\frac{\\partial f}{\\partial \\xi} \\\\ \\frac{\\partial f}{\\partial \\eta} \\end{Bmatrix} = \\begin{bmatrix} \\frac{\\partial r}{\\partial \\xi} & \\frac{\\partial z}{\\partial \\xi} \\\\ \\frac{\\partial r}{\\partial \\eta} & \\frac{\\partial z}{\\partial \\eta} \\end{bmatrix} \\begin{Bmatrix} \\frac{\\partial f}{\\partial r} \\\\ \\frac{\\partial f}{\\partial z} \\end{Bmatrix}\n$$\nThe matrix in this relation is the Jacobian matrix of the transformation, denoted by $J$:\n$$\nJ = \\frac{\\partial(r, z)}{\\partial(\\xi, \\eta)} = \\begin{bmatrix} J_{11} & J_{12} \\\\ J_{21} & J_{22} \\end{bmatrix} = \\begin{bmatrix} \\frac{\\partial r}{\\partial \\xi} & \\frac{\\partial z}{\\partial \\xi} \\\\ \\frac{\\partial r}{\\partial \\eta} & \\frac{\\partial z}{\\partial \\eta} \\end{bmatrix}\n$$\nThe components of the Jacobian matrix are found by differentiating the isoparametric mapping expressions:\n$$\nJ_{11} = \\frac{\\partial r}{\\partial \\xi} = \\sum_{i=1}^{4} \\frac{\\partial N_i}{\\partial \\xi} r_i \\quad, \\quad J_{12} = \\frac{\\partial z}{\\partial \\xi} = \\sum_{i=1}^{4} \\frac{\\partial N_i}{\\partial \\xi} z_i\n$$\n$$\nJ_{21} = \\frac{\\partial r}{\\partial \\eta} = \\sum_{i=1}^{4} \\frac{\\partial N_i}{\\partial \\eta} r_i \\quad, \\quad J_{22} = \\frac{\\partial z}{\\partial \\eta} = \\sum_{i=1}^{4} \\frac{\\partial N_i}{\\partial \\eta} z_i\n$$\nThis completes the derivation of the Jacobian matrix.\n\nTo obtain the physical gradients $\\left[\\partial N_i / \\partial r, \\partial N_i / \\partial z\\right]^{\\mathsf{T}}$ from the natural gradients $\\left[\\partial N_i / \\partial \\xi, \\partial N_i / \\partial \\eta\\right]^{\\mathsf{T}}$, we must invert the matrix relation. Setting $f = N_i$, we have:\n$$\n\\begin{Bmatrix} \\frac{\\partial N_i}{\\partial \\xi} \\\\ \\frac{\\partial N_i}{\\partial \\eta} \\end{Bmatrix} = J \\begin{Bmatrix} \\frac{\\partial N_i}{\\partial r} \\\\ \\frac{\\partial N_i}{\\partial z} \\end{Bmatrix}\n$$\nSolving for the physical gradients requires the inverse of the Jacobian matrix, provided its determinant is non-zero:\n$$\n\\begin{Bmatrix} \\frac{\\partial N_i}{\\partial r} \\\\ \\frac{\\partial N_i}{\\partial z} \\end{Bmatrix} = J^{-1} \\begin{Bmatrix} \\frac{\\partial N_i}{\\partial \\xi} \\\\ \\frac{\\partial N_i}{\\partial \\eta} \\end{Bmatrix}\n$$\nwhere\n$$\nJ^{-1} = \\frac{1}{\\det(J)} \\begin{bmatrix} J_{22} & -J_{12} \\\\ -J_{21} & J_{11} \\end{bmatrix} \\quad \\text{with} \\quad \\det(J) = J_{11}J_{22} - J_{12}J_{21}\n$$\nThe operator that maps natural gradients to physical gradients is thus $J^{-1}$.\n\nNow, we proceed to the specific calculations for the given element with nodal coordinates:\n- Node $1$: $(r_1, z_1) = (0.5, 0)$\n- Node $2$: $(r_2, z_2) = (1.5, 0)$\n- Node $3$: $(r_3, z_3) = (1.5, 1)$\n- Node $4$: $(r_4, z_4) = (0.5, 1)$\nAll calculations will be performed at the center of the parent element, $(\\xi, \\eta) = (0, 0)$.\n\nFirst, the derivatives of the shape functions with respect to the natural coordinates are computed:\n$$\n\\begin{aligned}\n\\frac{\\partial N_1}{\\partial \\xi} &= -\\frac{1}{4}(1-\\eta), & \\frac{\\partial N_1}{\\partial \\eta} &= -\\frac{1}{4}(1-\\xi) \\\\\n\\frac{\\partial N_2}{\\partial \\xi} &= \\frac{1}{4}(1-\\eta), & \\frac{\\partial N_2}{\\partial \\eta} &= -\\frac{1}{4}(1+\\xi) \\\\\n\\frac{\\partial N_3}{\\partial \\xi} &= \\frac{1}{4}(1+\\eta), & \\frac{\\partial N_3}{\\partial \\eta} &= \\frac{1}{4}(1+\\xi) \\\\\n\\frac{\\partial N_4}{\\partial \\xi} &= -\\frac{1}{4}(1+\\eta), & \\frac{\\partial N_4}{\\partial \\eta} &= \\frac{1}{4}(1-\\xi)\n\\end{aligned}\n$$\nEvaluating these at $(\\xi, \\eta) = (0, 0)$:\n$$\n\\begin{alignedat}{4}\n\\frac{\\partial N_1}{\\partial \\xi}\\bigg|_{(0,0)} &= -\\frac{1}{4}, &\\quad \\frac{\\partial N_2}{\\partial \\xi}\\bigg|_{(0,0)} &= \\frac{1}{4}, &\\quad \\frac{\\partial N_3}{\\partial \\xi}\\bigg|_{(0,0)} &= \\frac{1}{4}, &\\quad \\frac{\\partial N_4}{\\partial \\xi}\\bigg|_{(0,0)} &= -\\frac{1}{4} \\\\\n\\frac{\\partial N_1}{\\partial \\eta}\\bigg|_{(0,0)} &= -\\frac{1}{4}, &\\quad \\frac{\\partial N_2}{\\partial \\eta}\\bigg|_{(0,0)} &= -\\frac{1}{4}, &\\quad \\frac{\\partial N_3}{\\partial \\eta}\\bigg|_{(0,0)} &= \\frac{1}{4}, &\\quad \\frac{\\partial N_4}{\\partial \\eta}\\bigg|_{(0,0)} &= \\frac{1}{4}\n\\end{alignedat}\n$$\nUsing these values, the Jacobian components at $(\\xi, \\eta) = (0, 0)$ are:\n$$\nJ_{11} = \\sum_{i=1}^{4} \\frac{\\partial N_i}{\\partial \\xi} r_i = \\frac{1}{4}(-1 \\cdot 0.5 + 1 \\cdot 1.5 + 1 \\cdot 1.5 - 1 \\cdot 0.5) = \\frac{1}{4}(-0.5 + 1.5 + 1.5 - 0.5) = \\frac{2}{4} = \\frac{1}{2}\n$$\n$$\nJ_{12} = \\sum_{i=1}^{4} \\frac{\\partial N_i}{\\partial \\xi} z_i = \\frac{1}{4}(-1 \\cdot 0 + 1 \\cdot 0 + 1 \\cdot 1 - 1 \\cdot 1) = \\frac{1}{4}(0 + 0 + 1 - 1) = 0\n$$\n$$\nJ_{21} = \\sum_{i=1}^{4} \\frac{\\partial N_i}{\\partial \\eta} r_i = \\frac{1}{4}(-1 \\cdot 0.5 - 1 \\cdot 1.5 + 1 \\cdot 1.5 + 1 \\cdot 0.5) = \\frac{1}{4}(-0.5 - 1.5 + 1.5 + 0.5) = 0\n$$\n$$\nJ_{22} = \\sum_{i=1}^{4} \\frac{\\partial N_i}{\\partial \\eta} z_i = \\frac{1}{4}(-1 \\cdot 0 - 1 \\cdot 0 + 1 \\cdot 1 + 1 \\cdot 1) = \\frac{1}{4}(0 + 0 + 1 + 1) = \\frac{2}{4} = \\frac{1}{2}\n$$\nThe Jacobian matrix at $(\\xi, \\eta) = (0, 0)$ is $J = \\begin{bmatrix} 1/2 & 0 \\\\ 0 & 1/2 \\end{bmatrix}$. Its determinant is $\\det(J) = (1/2)(1/2) - 0 = 1/4$. The inverse Jacobian is:\n$$\nJ^{-1} = \\frac{1}{1/4} \\begin{bmatrix} 1/2 & 0 \\\\ 0 & 1/2 \\end{bmatrix} = 4 \\begin{bmatrix} 1/2 & 0 \\\\ 0 & 1/2 \\end{bmatrix} = \\begin{bmatrix} 2 & 0 \\\\ 0 & 2 \\end{bmatrix}\n$$\nFinally, the physical derivatives for each node $i$ at $(\\xi, \\eta) = (0, 0)$ are computed:\nFor $i=1$: $\\begin{Bmatrix} \\partial N_1/\\partial r \\\\ \\partial N_1/\\partial z \\end{Bmatrix} = \\begin{bmatrix} 2 & 0 \\\\ 0 & 2 \\end{bmatrix} \\begin{Bmatrix} -1/4 \\\\ -1/4 \\end{Bmatrix} = \\begin{Bmatrix} -1/2 \\\\ -1/2 \\end{Bmatrix}$\nFor $i=2$: $\\begin{Bmatrix} \\partial N_2/\\partial r \\\\ \\partial N_2/\\partial z \\end{Bmatrix} = \\begin{bmatrix} 2 & 0 \\\\ 0 & 2 \\end{bmatrix} \\begin{Bmatrix} 1/4 \\\\ -1/4 \\end{Bmatrix} = \\begin{Bmatrix} 1/2 \\\\ -1/2 \\end{Bmatrix}$\nFor $i=3$: $\\begin{Bmatrix} \\partial N_3/\\partial r \\\\ \\partial N_3/\\partial z \\end{Bmatrix} = \\begin{bmatrix} 2 & 0 \\\\ 0 & 2 \\end{bmatrix} \\begin{Bmatrix} 1/4 \\\\ 1/4 \\end{Bmatrix} = \\begin{Bmatrix} 1/2 \\\\ 1/2 \\end{Bmatrix}$\nFor $i=4$: $\\begin{Bmatrix} \\partial N_4/\\partial r \\\\ \\partial N_4/\\partial z \\end{Bmatrix} = \\begin{bmatrix} 2 & 0 \\\\ 0 & 2 \\end{bmatrix} \\begin{Bmatrix} -1/4 \\\\ 1/4 \\end{Bmatrix} = \\begin{Bmatrix} -1/2 \\\\ 1/2 \\end{Bmatrix}$\n\nThe results are now compiled into the specified single row matrix format.\nThe Jacobian entries are: $J_{11} = 1/2$, $J_{12} = 0$, $J_{21} = 0$, $J_{22} = 1/2$.\nThe physical derivatives are:\n$\\left(\\frac{\\partial N_1}{\\partial r}, \\frac{\\partial N_1}{\\partial z}\\right) = \\left(-\\frac{1}{2}, -\\frac{1}{2}\\right)$\n$\\left(\\frac{\\partial N_2}{\\partial r}, \\frac{\\partial N_2}{\\partial z}\\right) = \\left(\\frac{1}{2}, -\\frac{1}{2}\\right)$\n$\\left(\\frac{\\partial N_3}{\\partial r}, \\frac{\\partial N_3}{\\partial z}\\right) = \\left(\\frac{1}{2}, \\frac{1}{2}\\right)$\n$\\left(\\frac{\\partial N_4}{\\partial r}, \\frac{\\partial N_4}{\\partial z}\\right) = \\left(-\\frac{1}{2}, \\frac{1}{2}\\right)$", "answer": "$$\n\\boxed{\\begin{pmatrix} \\frac{1}{2} & 0 & 0 & \\frac{1}{2} & -\\frac{1}{2} & -\\frac{1}{2} & \\frac{1}{2} & -\\frac{1}{2} & \\frac{1}{2} & \\frac{1}{2} & -\\frac{1}{2} & \\frac{1}{2} \\end{pmatrix}}\n$$", "id": "2542271"}, {"introduction": "The cornerstone of a finite element's formulation is the strain-displacement matrix, or $B$-matrix, which translates nodal displacements into element strains. This practice [@problem_id:2542358] focuses on explicitly deriving the $B$-matrix for a linear triangular axisymmetric element, a foundational element type. This hands-on derivation will solidify your understanding of how continuum mechanics kinematic relations are discretized and highlight the unique role of the hoop strain term $\\varepsilon_{\\theta} = u_r/r$ in axisymmetric analysis.", "problem": "Consider a three-node linear triangular axisymmetric solid element used in the Finite Element Method (FEM) to model a body of revolution about the axis $r=0$. Let the nodal coordinates in the meridional $(r,z)$-plane be $(r_{i},z_{i})$ for $i=1,2,3$. The small-strain axisymmetric kinematics relate the radial displacement $u_{r}(r,z)$ and axial displacement $u_{z}(r,z)$ to the strain components $\\varepsilon_{r}$, $\\varepsilon_{z}$, $\\gamma_{rz}$, and $\\varepsilon_{\\theta}$, where $\\varepsilon_{\\theta}$ is the circumferential (hoop) strain. The element uses area (barycentric) coordinates $(L_{1},L_{2},L_{3})$ with linear shape functions $N_{i}(r,z)=L_{i}(r,z)$, so that the derivatives of $N_{i}$ with respect to $r$ and $z$ are constant over the element. The nodal degrees of freedom (DOF) are ordered as the vector\n\n$$\n\\mathbf{d}=\\begin{pmatrix}u_{r1} & u_{z1} & u_{r2} & u_{z2} & u_{r3} & u_{z3}\\end{pmatrix}^{\\mathsf{T}}.\n$$\n\nUsing only fundamental kinematic relations for axisymmetric small strain and the definition of area coordinates for a linear triangle, do the following:\n\n1. Starting from the definitions of $\\varepsilon_{r}$, $\\varepsilon_{z}$, $\\gamma_{rz}$, and $\\varepsilon_{\\theta}$ in an axisymmetric setting, derive the explicit strain-displacement matrix $\\mathbf{B}(r,z)$ such that\n\n$$\n\\begin{pmatrix}\\varepsilon_{r} & \\varepsilon_{z} & \\gamma_{rz} & \\varepsilon_{\\theta}\\end{pmatrix}^{\\mathsf{T}}=\\mathbf{B}(r,z)\\,\\mathbf{d}.\n$$\n\nWrite $\\mathbf{B}(r,z)$ fully in terms of the constant derivatives $\\partial N_{i}/\\partial r$, $\\partial N_{i}/\\partial z$, and the shape functions $N_{i}(r,z)$ themselves, evaluated at a generic point $(r,z)$ within the element.\n\n2. For the specific triangle with nodal coordinates\n\n$$\n(r_{1},z_{1})=(0.06,\\,0.00),\\quad (r_{2},z_{2})=(0.10,\\,0.00),\\quad (r_{3},z_{3})=(0.08,\\,0.05),\n$$\n\nevaluate $\\mathbf{B}(r,z)$ at the element centroid, i.e., at the point where $L_{1}=L_{2}=L_{3}=1/3$. Using this centroidal evaluation, extract the single scalar entry $\\mathbf{B}_{4,1}$, which multiplies $u_{r1}$ in the hoop strain equation. Provide the numerical value of $\\mathbf{B}_{4,1}$ at the centroid, rounded to four significant figures. Express your final answer in $\\mathrm{m}^{-1}$.", "solution": "The problem is first subjected to validation.\n\nGivens are extracted verbatim:\n- A three-node linear triangular axisymmetric solid element is used to model a body of revolution about the axis $r=0$.\n- Nodal coordinates in the meridional $(r,z)$-plane are $(r_{i},z_{i})$ for $i=1,2,3$.\n- Small-strain axisymmetric kinematics relate displacements $u_{r}(r,z)$ and $u_{z}(r,z)$ to strain components $\\varepsilon_{r}$, $\\varepsilon_{z}$, $\\gamma_{rz}$, and $\\varepsilon_{\\theta}$.\n- Element uses area (barycentric) coordinates $(L_{1},L_{2},L_{3})$ with linear shape functions $N_{i}(r,z)=L_{i}(r,z)$.\n- Derivatives of $N_{i}$ with respect to $r$ and $z$ are constant.\n- Nodal degree of freedom vector is $\\mathbf{d}=\\begin{pmatrix}u_{r1} & u_{z1} & u_{r2} & u_{z2} & u_{r3} & u_{z3}\\end{pmatrix}^{\\mathsf{T}}$.\n- The strain-displacement relation to be derived is $\\begin{pmatrix}\\varepsilon_{r} & \\varepsilon_{z} & \\gamma_{rz} & \\varepsilon_{\\theta}\\end{pmatrix}^{\\mathsf{T}}=\\mathbf{B}(r,z)\\,\\mathbf{d}$.\n- The specific nodal coordinates are $(r_{1},z_{1})=(0.06,\\,0.00)$, $(r_{2},z_{2})=(0.10,\\,0.00)$, and $(r_{3},z_{3})=(0.08,\\,0.05)$.\n- An evaluation is required at the element centroid, where $L_{1}=L_{2}=L_{3}=1/3$.\n- The target is the numerical value of the specific entry $\\mathbf{B}_{4,1}$ at the centroid.\n\nValidation Verdict:\nThe problem is scientifically grounded, rooted in the standard theory of the Finite Element Method and continuum mechanics for axisymmetric bodies. It is well-posed, providing all necessary definitions, constants, and clear objectives. The language is objective and precise. The data provided are consistent and do not lead to physical or mathematical contradictions. The problem requires a standard, but non-trivial, derivation and calculation, characteristic of a typical engineering analysis problem. Therefore, the problem is deemed valid and a solution will be furnished.\n\nThe solution proceeds in two parts as demanded.\n\nPart $1$: Derivation of the Strain-Displacement Matrix $\\mathbf{B}(r,z)$.\nThe fundamental kinematic relations for small strains in an axisymmetric coordinate system are:\n$$\n\\varepsilon_{r} = \\frac{\\partial u_{r}}{\\partial r}\n$$\n$$\n\\varepsilon_{z} = \\frac{\\partial u_{z}}{\\partial z}\n$$\n$$\n\\gamma_{rz} = \\frac{\\partial u_{r}}{\\partial z} + \\frac{\\partial u_{z}}{\\partial r}\n$$\n$$\n\\varepsilon_{\\theta} = \\frac{u_{r}}{r}\n$$\nThe displacement field within the $3$-node linear triangular element is interpolated from the nodal displacements using the shape functions $N_{i}(r,z)$. For a linear element, the shape functions $N_{i}$ are identical to the area coordinates $L_{i}$.\nThe displacement components $u_{r}(r,z)$ and $u_{z}(r,z)$ at any point $(r,z)$ inside the element are given by:\n$$\nu_{r}(r,z) = N_{1}(r,z)u_{r1} + N_{2}(r,z)u_{r2} + N_{3}(r,z)u_{r3} = \\sum_{i=1}^{3} N_{i} u_{ri}\n$$\n$$\nu_{z}(r,z) = N_{1}(r,z)u_{z1} + N_{2}(r,z)u_{z2} + N_{3}(r,z)u_{z3} = \\sum_{i=1}^{3} N_{i} u_{zi}\n$$\nThe strain components are found by substituting these displacement approximations into the kinematic relations.\n\nFor $\\varepsilon_{r}$:\n$$\n\\varepsilon_{r} = \\frac{\\partial}{\\partial r} \\left( \\sum_{i=1}^{3} N_{i} u_{ri} \\right) = \\sum_{i=1}^{3} \\frac{\\partial N_{i}}{\\partial r} u_{ri} = \\frac{\\partial N_{1}}{\\partial r} u_{r1} + \\frac{\\partial N_{2}}{\\partial r} u_{r2} + \\frac{\\partial N_{3}}{\\partial r} u_{r3}\n$$\nFor $\\varepsilon_{z}$:\n$$\n\\varepsilon_{z} = \\frac{\\partial}{\\partial z} \\left( \\sum_{i=1}^{3} N_{i} u_{zi} \\right) = \\sum_{i=1}^{3} \\frac{\\partial N_{i}}{\\partial z} u_{zi} = \\frac{\\partial N_{1}}{\\partial z} u_{z1} + \\frac{\\partial N_{2}}{\\partial z} u_{z2} + \\frac{\\partial N_{3}}{\\partial z} u_{z3}\n$$\nFor $\\gamma_{rz}$:\n$$\n\\gamma_{rz} = \\frac{\\partial}{\\partial z} \\left( \\sum_{i=1}^{3} N_{i} u_{ri} \\right) + \\frac{\\partial}{\\partial r} \\left( \\sum_{i=1}^{3} N_{i} u_{zi} \\right) = \\sum_{i=1}^{3} \\left( \\frac{\\partial N_{i}}{\\partial z} u_{ri} + \\frac{\\partial N_{i}}{\\partial r} u_{zi} \\right)\n$$\nFor $\\varepsilon_{\\theta}$:\n$$\n\\varepsilon_{\\theta} = \\frac{1}{r} u_{r} = \\frac{1}{r} \\left( \\sum_{i=1}^{3} N_{i} u_{ri} \\right) = \\frac{N_{1}}{r} u_{r1} + \\frac{N_{2}}{r} u_{r2} + \\frac{N_{3}}{r} u_{r3}\n$$\nThese $4$ strain relations must be expressed in the matrix form $\\boldsymbol{\\varepsilon} = \\mathbf{B}\\mathbf{d}$, where $\\boldsymbol{\\varepsilon} = \\begin{pmatrix} \\varepsilon_{r} & \\varepsilon_{z} & \\gamma_{rz} & \\varepsilon_{\\theta} \\end{pmatrix}^{\\mathsf{T}}$ and $\\mathbf{d} = \\begin{pmatrix} u_{r1} & u_{z1} & u_{r2} & u_{z2} & u_{r3} & u_{z3} \\end{pmatrix}^{\\mathsf{T}}$. By collecting the coefficients of the nodal displacements for each strain component, we construct the rows of the $4\\times6$ matrix $\\mathbf{B}(r,z)$.\n\nRow $1$ ($\\varepsilon_{r}$): $\\begin{pmatrix} \\frac{\\partial N_{1}}{\\partial r} & 0 & \\frac{\\partial N_{2}}{\\partial r} & 0 & \\frac{\\partial N_{3}}{\\partial r} & 0 \\end{pmatrix}$\nRow $2$ ($\\varepsilon_{z}$): $\\begin{pmatrix} 0 & \\frac{\\partial N_{1}}{\\partial z} & 0 & \\frac{\\partial N_{2}}{\\partial z} & 0 & \\frac{\\partial N_{3}}{\\partial z} \\end{pmatrix}$\nRow $3$ ($\\gamma_{rz}$): $\\begin{pmatrix} \\frac{\\partial N_{1}}{\\partial z} & \\frac{\\partial N_{1}}{\\partial r} & \\frac{\\partial N_{2}}{\\partial z} & \\frac{\\partial N_{2}}{\\partial r} & \\frac{\\partial N_{3}}{\\partial z} & \\frac{\\partial N_{3}}{\\partial r} \\end{pmatrix}$\nRow $4$ ($\\varepsilon_{\\theta}$): $\\begin{pmatrix} \\frac{N_{1}}{r} & 0 & \\frac{N_{2}}{r} & 0 & \\frac{N_{3}}{r} & 0 \\end{pmatrix}$\n\nAssembling these rows gives the complete strain-displacement matrix $\\mathbf{B}(r,z)$:\n$$\n\\mathbf{B}(r,z) = \\begin{pmatrix}\n\\frac{\\partial N_{1}}{\\partial r} & 0 & \\frac{\\partial N_{2}}{\\partial r} & 0 & \\frac{\\partial N_{3}}{\\partial r} & 0 \\\\\n0 & \\frac{\\partial N_{1}}{\\partial z} & 0 & \\frac{\\partial N_{2}}{\\partial z} & 0 & \\frac{\\partial N_{3}}{\\partial z} \\\\\n\\frac{\\partial N_{1}}{\\partial z} & \\frac{\\partial N_{1}}{\\partial r} & \\frac{\\partial N_{2}}{\\partial z} & \\frac{\\partial N_{2}}{\\partial r} & \\frac{\\partial N_{3}}{\\partial z} & \\frac{\\partial N_{3}}{\\partial r} \\\\\n\\frac{N_{1}}{r} & 0 & \\frac{N_{2}}{r} & 0 & \\frac{N_{3}}{r} & 0\n\\end{pmatrix}\n$$\nThis completes the first part of the problem. For a linear triangular element, the derivatives $\\frac{\\partial N_{i}}{\\partial r}$ and $\\frac{\\partial N_{i}}{\\partial z}$ are constant throughout the element, while the shape functions $N_{i}$ themselves and the term $1/r$ vary with position $(r,z)$.\n\nPart $2$: Evaluation of $\\mathbf{B}_{4,1}$ at the element centroid.\nThe entry $\\mathbf{B}_{4,1}$ is the element in the $4$-th row and $1$-st column of the $\\mathbf{B}$ matrix. From the derived expression, this is:\n$$\n\\mathbf{B}_{4,1}(r,z) = \\frac{N_{1}(r,z)}{r}\n$$\nWe must evaluate this expression at the centroid of the specific triangular element.\nThe problem states that at the centroid, the area coordinates are $L_{1}=L_{2}=L_{3}=1/3$. Since $N_{i} = L_{i}$ for a linear element, the value of the first shape function at the centroid is $N_{1} = 1/3$.\n\nThe radial coordinate $r$ of the centroid, which we denote as $r_{c}$, is the average of the nodal radial coordinates, as the interpolation property $r = \\sum N_{i} r_{i}$ holds.\n$$\nr_{c} = N_{1}r_{1} + N_{2}r_{2} + N_{3}r_{3}\n$$\nSubstituting the centroidal values $N_{i}=1/3$:\n$$\nr_{c} = \\frac{1}{3}r_{1} + \\frac{1}{3}r_{2} + \\frac{1}{3}r_{3} = \\frac{r_{1} + r_{2} + r_{3}}{3}\n$$\nThe given nodal coordinates are $(r_{1},z_{1})=(0.06,\\,0.00)$, $(r_{2},z_{2})=(0.10,\\,0.00)$, and $(r_{3},z_{3})=(0.08,\\,0.05)$.\nWe calculate $r_{c}$:\n$$\nr_{c} = \\frac{0.06 + 0.10 + 0.08}{3} = \\frac{0.24}{3} = 0.08 \\, \\text{m}\n$$\nNow we evaluate $\\mathbf{B}_{4,1}$ at the centroid by substituting $N_{1}=1/3$ and $r=r_{c}=0.08$:\n$$\n\\mathbf{B}_{4,1}|_{\\text{centroid}} = \\frac{1/3}{r_{c}} = \\frac{1}{3 \\times 0.08} = \\frac{1}{0.24}\n$$\nThe numerical value is:\n$$\n\\frac{1}{0.24} = \\frac{100}{24} = \\frac{25}{6} \\approx 4.1666... \\, \\mathrm{m}^{-1}\n$$\nRounding to four significant figures as requested, the value is $4.167 \\, \\mathrm{m}^{-1}$.", "answer": "$$\n\\boxed{4.167}\n$$", "id": "2542358"}, {"introduction": "A crucial skill for any computational engineer is the ability to verify that a numerical model is performing correctly. This practice [@problem_id:2542326] guides you through a complete verification procedure, where you will compare synthetic finite element results for a pressurized thick-walled cylinder against the classic Lamé analytical solution. By implementing the exact solution and computing weighted $L^2$ error norms, you will gain practical experience in the essential process of code validation and error quantification in engineering analysis.", "problem": "Consider a long, thick-walled, linearly elastic, isotropic cylinder subjected to axisymmetric internal and external pressure. Assume the long-cylinder approximation so that the state is axisymmetric with no axial displacement variation and use the plane strain condition in the axial direction. The goal is to validate a set of given finite element (FE) results by comparing the radial displacement and hoop stress distributions against the analytical Lamé solution and to compute relative error norms.\n\nStarting from fundamental equilibrium in cylindrical coordinates for an axisymmetric state without body forces, the radial equilibrium equation is\n$$\n\\frac{d\\sigma_r}{dr} + \\frac{\\sigma_r - \\sigma_\\theta}{r} = 0,\n$$\nand the kinematics for axisymmetric radial displacement $u(r)$ gives\n$$\n\\varepsilon_r = \\frac{du}{dr}, \\quad \\varepsilon_\\theta = \\frac{u}{r}, \\quad \\varepsilon_z = 0 \\quad \\text{(plane strain)}.\n$$\nUse the linear elastic constitutive law in three dimensions,\n$$\n\\boldsymbol{\\sigma} = 2 G \\boldsymbol{\\varepsilon} + \\lambda \\, \\mathrm{tr}(\\boldsymbol{\\varepsilon}) \\mathbf{I},\n$$\nwhere $G = \\frac{E}{2(1+\\nu)}$ is the shear modulus, $\\lambda = \\frac{E \\nu}{(1+\\nu)(1-2\\nu)}$ is the first Lamé parameter, $E$ is Young’s modulus, and $\\nu$ is Poisson’s ratio. Under this model, it is well established from solving the equilibrium equation that the general solution for the radial and hoop stresses has the Lamé form\n$$\n\\sigma_r(r) = A - \\frac{B}{r^2}, \\qquad \\sigma_\\theta(r) = A + \\frac{B}{r^2},\n$$\nfor constants $A$ and $B$ determined by the boundary conditions. For a cylinder with inner radius $a$ and outer radius $b$, subjected to internal pressure $p_i$ at $r=a$ and external pressure $p_o$ at $r=b$, the boundary conditions are $\\sigma_r(a) = -p_i$ and $\\sigma_r(b) = -p_o$, yielding\n$$\nA = \\frac{p_i a^2 - p_o b^2}{b^2 - a^2}, \\qquad B = \\frac{(p_i - p_o) a^2 b^2}{b^2 - a^2}.\n$$\nUnder plane strain, the exact radial displacement is obtained by combining the constitutive law with the Lamé stresses and kinematics to give\n$$\nu_{\\text{exact}}(r) = \\frac{1+\\nu}{E}\\left[(1-2\\nu) A \\, r + \\frac{B}{r} \\right],\n$$\nand the exact hoop stress is\n$$\n\\sigma_{\\theta,\\text{exact}}(r) = A + \\frac{B}{r^2}.\n$$\n\nDefine the relative weighted $L^2$-norm of the error over the annular cross-section using the axisymmetric measure, which introduces the weight $r$ for integrals over $r \\in [a,b]$. For a field $f(r)$ with FE approximation $f_{\\text{FE}}(r)$ and exact solution $f_{\\text{exact}}(r)$, define\n$$\n\\| e \\|_{L^2_r} = \\left( \\int_a^b r \\, \\left( f_{\\text{FE}}(r) - f_{\\text{exact}}(r) \\right)^2 \\, dr \\right)^{1/2}, \\quad\n\\| f_{\\text{exact}} \\|_{L^2_r} = \\left( \\int_a^b r \\, \\left( f_{\\text{exact}}(r) \\right)^2 \\, dr \\right)^{1/2},\n$$\nand the relative error as\n$$\n\\mathcal{E}_{\\text{rel}} = \n\\begin{cases}\n\\frac{\\| e \\|_{L^2_r}}{\\| f_{\\text{exact}} \\|_{L^2_r}}, & \\text{if } \\| f_{\\text{exact}} \\|_{L^2_r} > 0, \\\\\n0, & \\text{if } \\| f_{\\text{exact}} \\|_{L^2_r} = 0 \\text{ and } \\| e \\|_{L^2_r} = 0, \\\\\n1, & \\text{if } \\| f_{\\text{exact}} \\|_{L^2_r} = 0 \\text{ and } \\| e \\|_{L^2_r} > 0.\n\\end{cases}\n$$\nIn numerical implementation, approximate the integrals using the trapezoidal rule on a set of $N$ radial nodes $r_i$, $i = 0,1,\\dots,N-1$, uniformly spaced from $a$ to $b$:\n$$\n\\int_a^b r \\, g(r) \\, dr \\approx \\sum_{i=0}^{N-2} \\frac{(r_{i+1} - r_i)}{2} \\left[ r_i \\, g(r_i) + r_{i+1} \\, g(r_{i+1}) \\right].\n$$\nNote that the constant factors $2\\pi$ and the cylinder length $L$ cancel in the relative error, so they do not affect the ratio.\n\nImplement a program that, for each test case, constructs the exact solutions and a synthetic FE dataset at $N$ nodes $\\{ r_i \\}$ and computes the relative weighted $L^2$ error for the radial displacement $u(r)$ in meters and the hoop stress $\\sigma_\\theta(r)$ in Pascals. The synthetic FE datasets are defined to be controlled perturbations of the exact solution to emulate realistic FE errors:\n$$\nu_{\\text{FE}}(r_i) = u_{\\text{exact}}(r_i) \\left[ 1 + \\delta \\, \\sin\\!\\left( \\pi \\, \\frac{r_i - a}{b - a} \\right) \\right],\n$$\n$$\n\\sigma_{\\theta,\\text{FE}}(r_i) = \\sigma_{\\theta,\\text{exact}}(r_i) \\left[ 1 - \\delta \\, \\cos\\!\\left( \\pi \\, \\frac{r_i - a}{b - a} \\right) \\right],\n$$\nwith a prescribed perturbation amplitude $\\delta$ for each test case.\n\nAll physical quantities must be used in the following units: length in meters, pressure and elastic modulus in Pascals, and displacement in meters. Angles in the trigonometric functions are implicitly in radians. Your program must report the relative errors as dimensionless floating-point numbers rounded to six decimal places.\n\nTest suite:\n- Case $1$ (moderate thickness, internal pressure only): $a = 0.05$, $b = 0.15$, $p_i = 50 \\times 10^6$, $p_o = 0$, $E = 210 \\times 10^9$, $\\nu = 0.3$, $\\delta = 0.01$, $N = 17$.\n- Case $2$ (both internal and external pressure): $a = 0.1$, $b = 0.2$, $p_i = 100 \\times 10^6$, $p_o = 20 \\times 10^6$, $E = 70 \\times 10^9$, $\\nu = 0.33$, $\\delta = 0.015$, $N = 17$.\n- Case $3$ (thin wall limit): $a = 0.099$, $b = 0.1$, $p_i = 30 \\times 10^6$, $p_o = 0$, $E = 200 \\times 10^9$, $\\nu = 0.25$, $\\delta = 0.005$, $N = 17$.\n- Case $4$ (hydrostatic, no net load): $a = 0.08$, $b = 0.12$, $p_i = 10 \\times 10^6$, $p_o = 10 \\times 10^6$, $E = 150 \\times 10^9$, $\\nu = 0.28$, $\\delta = 0$, $N = 17$.\n\nYour program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets. Each test case contributes a list of two numbers in the order $\\left[ \\mathcal{E}^{(u)}_{\\text{rel}}, \\mathcal{E}^{(\\sigma_\\theta)}_{\\text{rel}} \\right]$. For all four cases, the final output must therefore be a single line of the form\n$$\n\\left[ [e_{u,1}, e_{\\theta,1}], [e_{u,2}, e_{\\theta,2}], [e_{u,3}, e_{\\theta,3}], [e_{u,4}, e_{\\theta,4}] \\right],\n$$\nwhere each $e$ is rounded to six decimal places.", "solution": "The problem presented is a standard exercise in the verification of numerical methods, specifically for validating a finite element (FE) implementation against a known analytical solution. The physical context is the linear elastic response of a thick-walled cylinder under axisymmetric pressure, a classic problem in solid mechanics resolved by the Lamé equations. All aspects of the problem are scientifically and mathematically sound, and all required data and definitions are provided. The procedure is to compute the analytical solution, generate a synthetic FE dataset with a prescribed error, and then quantify the discrepancy using a specified error norm.\n\nThe fundamental principles are those of continuum mechanics for a linear elastic, isotropic material under plane strain conditions ($\\varepsilon_z = 0$). The governing equation in the radial direction, derived from equilibrium principles in a cylindrical coordinate system, is:\n$$\n\\frac{d\\sigma_r}{dr} + \\frac{\\sigma_r - \\sigma_\\theta}{r} = 0\n$$\nHere, $\\sigma_r$ and $\\sigma_\\theta$ are the radial and hoop stresses, respectively. The strain-displacement relations for a purely radial displacement field $u(r)$ are:\n$$\n\\varepsilon_r = \\frac{du}{dr}, \\quad \\varepsilon_\\theta = \\frac{u}{r}\n$$\nThe solution to this system, using the linear elastic constitutive law, yields the well-known Lamé stress distribution:\n$$\n\\sigma_r(r) = A - \\frac{B}{r^2}, \\qquad \\sigma_\\theta(r) = A + \\frac{B}{r^2}\n$$\nThe constants $A$ and $B$ are determined by applying the pressure boundary conditions at the inner radius $r=a$ and outer radius $r=b$: $\\sigma_r(a) = -p_i$ and $\\sigma_r(b) = -p_o$. This leads to:\n$$\nA = \\frac{p_i a^2 - p_o b^2}{b^2 - a^2}, \\qquad B = \\frac{(p_i - p_o) a^2 b^2}{b^2 - a^2}\n$$\nThe exact hoop stress $\\sigma_{\\theta,\\text{exact}}(r)$ is given directly by this formula. The exact radial displacement $u_{\\text{exact}}(r)$ is derived from the strains, which are in turn related to the stresses via the constitutive law. Under plane strain, this relationship yields:\n$$\nu_{\\text{exact}}(r) = \\frac{1+\\nu}{E}\\left[(1-2\\nu) A \\, r + \\frac{B}{r} \\right]\n$$\nwhere $E$ is Young's modulus and $\\nu$ is Poisson's ratio.\n\nTo validate a potential FE solution, we generate a synthetic dataset at $N$ discrete radial nodes $r_i$ by introducing a controlled perturbation, with amplitude $\\delta$, to the exact solution:\n$$\nu_{\\text{FE}}(r_i) = u_{\\text{exact}}(r_i) \\left[ 1 + \\delta \\, \\sin\\!\\left( \\pi \\, \\frac{r_i - a}{b - a} \\right) \\right]\n$$\n$$\n\\sigma_{\\theta,\\text{FE}}(r_i) = \\sigma_{\\theta,\\text{exact}}(r_i) \\left[ 1 - \\delta \\, \\cos\\!\\left( \\pi \\, \\frac{r_i - a}{b - a} \\right) \\right]\n$$\nThe comparison between the FE approximation $f_{\\text{FE}}$ and the exact solution $f_{\\text{exact}}$ is quantified using the relative weighted $L^2$-norm, defined as $\\mathcal{E}_{\\text{rel}} = \\| e \\|_{L^2_r} / \\| f_{\\text{exact}} \\|_{L^2_r}$, where $e = f_{\\text{FE}} - f_{\\text{exact}}$. The squared norm $\\| \\cdot \\|_{L^2_r}^2$ involves an integral weighted by the radial coordinate $r$:\n$$\n\\| g \\|_{L^2_r}^2 = \\int_a^b r \\, (g(r))^2 \\, dr\n$$\nThis integral is approximated numerically using the trapezoidal rule on the set of $N$ nodes:\n$$\n\\int_a^b r \\, (g(r))^2 \\, dr \\approx \\sum_{i=0}^{N-2} \\frac{r_{i+1} - r_i}{2} \\left[ r_i (g(r_i))^2 + r_{i+1} (g(r_{i+1}))^2 \\right]\n$$\nThis is equivalent to applying the standard trapezoidal rule to the function $F(r) = r \\cdot (g(r))^2$.\n\nThe computational algorithm for each specified test case is as follows:\n1.  Calculate the Lamé constants $A$ and $B$ from the given geometric and loading parameters ($a, b, p_i, p_o$).\n2.  Generate an array of $N$ uniformly spaced radial nodes from $a$ to $b$.\n3.  Compute the values of the exact solutions, $u_{\\text{exact}}$ and $\\sigma_{\\theta,\\text{exact}}$, at these nodes.\n4.  Compute the values of the synthetic FE data, $u_{\\text{FE}}$ and $\\sigma_{\\theta,\\text{FE}}$, at the same nodes.\n5.  For both displacement and hoop stress fields, calculate the error field $e(r_i)$ and the exact field $f_{\\text{exact}}(r_i)$.\n6.  Use the numerical integration rule to compute the squared norms of the error field, $\\| e \\|_{L^2_r}^2$, and the exact field, $\\| f_{\\text{exact}} \\|_{L^2_r}^2$.\n7.  Determine the relative error $\\mathcal{E}_{\\text{rel}}$ by taking the square root of the ratio of these norms, carefully handling the case where the exact solution norm is zero as specified.\n8.  The calculated relative errors for displacement and hoop stress are collected for each test case and formatted as required. For test case $4$, $\\delta=0$, which implies the synthetic data is identical to the exact solution, resulting in an expected relative error of $0$.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Main function to solve the problem for all test cases and print the results.\n    \"\"\"\n\n    def calculate_errors_for_case(params):\n        \"\"\"\n        Calculates the relative weighted L2 error for displacement and hoop stress\n        for a single test case.\n        \n        Args:\n            params (tuple): A tuple containing the parameters for the case:\n                            (a, b, p_i, p_o, E, nu, delta, N).\n        \n        Returns:\n            list: A list containing two floats [rel_error_u, rel_error_sigma].\n        \"\"\"\n        a, b, p_i, p_o, E, nu, delta, N = params\n\n        # 1. Calculate Lamé constants\n        a2 = a**2\n        b2 = b**2\n        if abs(b2 - a2)  1e-15: # Avoid division by zero for thin-walled degenerate case\n            return [0.0, 0.0]\n        \n        A = (p_i * a2 - p_o * b2) / (b2 - a2)\n        B = (p_i - p_o) * a2 * b2 / (b2 - a2)\n\n        # 2. Generate N uniformly spaced radial nodes\n        r_nodes = np.linspace(a, b, N)\n\n        # 3. Evaluate exact solutions at nodes\n        # The problem guarantees r_nodes > 0 since a > 0.\n        u_exact = ((1 + nu) / E) * ((1 - 2 * nu) * A * r_nodes + B / r_nodes)\n        sigma_theta_exact = A + B / r_nodes**2\n\n        # 4. Generate synthetic FE data at nodes\n        r_normalized = (r_nodes - a) / (b - a)\n        u_fe = u_exact * (1 + delta * np.sin(np.pi * r_normalized))\n        sigma_theta_fe = sigma_theta_exact * (1 - delta * np.cos(np.pi * r_normalized))\n        \n        def get_relative_error(f_fe, f_exact, r_nodes):\n            \"\"\"\n            Computes the relative weighted L2 error for a generic field f.\n            \"\"\"\n            error_field = f_fe - f_exact\n            \n            # Form the integrands for the weighted L2 norm calculation.\n            # The function to integrate is r * g(r)^2.\n            integrand_for_error_norm_sq = r_nodes * (error_field**2)\n            integrand_for_exact_norm_sq = r_nodes * (f_exact**2)\n            \n            # 6. Use numpy.trapz to perform numerical integration: integral of y(x)dx\n            norm_e_sq = np.trapz(integrand_for_error_norm_sq, r_nodes)\n            norm_f_exact_sq = np.trapz(integrand_for_exact_norm_sq, r_nodes)\n\n            norm_e = np.sqrt(norm_e_sq)\n            norm_f_exact = np.sqrt(norm_f_exact_sq)\n            \n            # 7. Apply the specified definition for relative error\n            if norm_f_exact > 1e-15:  # Use a small tolerance for floating point comparison\n                rel_error = norm_e / norm_f_exact\n            elif norm_e  1e-15:  # Both norms are zero\n                rel_error = 0.0\n            else:  # Zero exact solution norm, but non-zero error\n                rel_error = 1.0\n                \n            return rel_error\n\n        # Calculate relative errors for both fields\n        rel_error_u = get_relative_error(u_fe, u_exact, r_nodes)\n        rel_error_sigma = get_relative_error(sigma_theta_fe, sigma_theta_exact, r_nodes)\n        \n        return [rel_error_u, rel_error_sigma]\n\n    # Define the test cases from the problem statement.\n    test_cases = [\n        # (a, b, p_i, p_o, E, nu, delta, N)\n        (0.05, 0.15, 50e6, 0, 210e9, 0.3, 0.01, 17),\n        (0.1, 0.2, 100e6, 20e6, 70e9, 0.33, 0.015, 17),\n        (0.099, 0.1, 30e6, 0, 200e9, 0.25, 0.005, 17),\n        (0.08, 0.12, 10e6, 10e6, 150e9, 0.28, 0.0, 17),\n    ]\n\n    results = []\n    for case in test_cases:\n        errors = calculate_errors_for_case(case)\n        results.append(errors)\n\n    # Format the final output string to match the required format.\n    # e.g., [[0.005697,0.008101],[...]] with no spaces.\n    list_of_strs = []\n    for pair in results:\n        list_of_strs.append(f'[{pair[0]:.6f},{pair[1]:.6f}]')\n    \n    final_output_string = f\"[{','.join(list_of_strs)}]\"\n\n    print(final_output_string)\n\nsolve()\n```", "id": "2542326"}]}