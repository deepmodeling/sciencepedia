{"hands_on_practices": [{"introduction": "To apply the spectral element method to real-world problems with complex geometries, we must first master the art of mapping. This exercise focuses on the isoparametric mapping, a cornerstone of both finite and spectral element methods, which uses the same high-order basis functions to represent the physical geometry and the solution field. By working through the derivation of the Jacobian and its application to integral transformation [@problem_id:2597909], you will develop a practical understanding of how computations on a simple reference element, such as the interval $[-1, 1]$, are connected to the physical domain.", "problem": "Consider a one-dimensional spectral element on the reference interval $[-1,1]$ with nodes $\\{\\xi_i\\}_{i=0}^{N}$ chosen as the Gauss–Lobatto–Legendre (GLL) nodes, and define the Lagrange interpolating basis $\\{\\ell_i(\\xi)\\}_{i=0}^{N}$ by the conditions $\\ell_i(\\xi_j)=\\delta_{ij}$. The isoparametric mapping from the reference coordinate $\\xi$ to the physical coordinate $x$ is defined by $x(\\xi)=\\sum_{i=0}^{N} X_i \\,\\ell_i(\\xi)$, where $\\{X_i\\}_{i=0}^{N}$ are the physical nodal coordinates.\n\nTasks:\n1) Starting from the definition of the Lagrange interpolating polynomials on the nodes $\\{\\xi_i\\}_{i=0}^{N}$, derive an explicit expression for the Jacobian $J(\\xi)=\\frac{dx}{d\\xi}$ in terms of $\\{X_i\\}$ and the derivatives $\\{\\ell_i'(\\xi)\\}$.\n\n2) Using only the one-dimensional change-of-variables theorem from calculus and the chain rule, derive the transformation rule for an integral of a scalar function $f(x)$ over the physical element $K=x([-1,1])$:\n$$\n\\int_{K} f(x)\\,dx \\quad \\text{in terms of} \\quad \\int_{-1}^{1} \\cdots \\, d\\xi.\n$$\nClearly indicate the role played by $J(\\xi)$.\n\n3) Specialize to the case $N=2$ with GLL nodes $\\xi_0=-1$, $\\xi_1=0$, $\\xi_2=1$ and physical nodal coordinates $X_0=0$, $X_1=1$, $X_2=3$. For the function $f(x)=x^2$, compute the exact value of the physical integral\n$$\nI \\;=\\; \\int_{x(-1)}^{x(1)} x^2\\,dx\n$$\nby transforming to the reference interval $[-1,1]$ and evaluating the resulting expression exactly. Provide your final answer as a single real number with no units and do not round.", "solution": "The problem statement is first subjected to a critical validation to ensure its scientific and logical integrity.\n\nThe givens are as follows:\n- A one-dimensional spectral element on the reference interval $[-1,1]$.\n- Nodal points are the Gauss–Lobatto–Legendre (GLL) nodes $\\{\\xi_i\\}_{i=0}^{N}$.\n- The basis functions are the Lagrange interpolating polynomials $\\{\\ell_i(\\xi)\\}_{i=0}^{N}$ satisfying the property $\\ell_i(\\xi_j)=\\delta_{ij}$.\n- The isoparametric mapping from the reference coordinate $\\xi$ to the physical coordinate $x$ is given by $x(\\xi)=\\sum_{i=0}^{N} X_i \\,\\ell_i(\\xi)$, where $\\{X_i\\}_{i=0}^{N}$ are the physical nodal coordinates.\n- For Task $3$, we are given $N=2$, with GLL nodes $\\xi_0=-1$, $\\xi_1=0$, $\\xi_2=1$.\n- The corresponding physical nodal coordinates are $X_0=0$, $X_1=1$, $X_2=3$.\n- The function to be integrated is $f(x)=x^2$.\n\nThe problem is scientifically grounded, being a standard formulation in the finite element and spectral element literature. It is well-posed, with all necessary information provided to derive the requested expressions and compute the final value. The language is objective and precise. The problem is free of logical contradictions, factual errors, or any other flaws that would render it invalid. Therefore, we proceed with the solution.\n\nTask 1: Derive an explicit expression for the Jacobian $J(\\xi)$.\n\nThe Jacobian of the one-dimensional transformation from the reference coordinate $\\xi$ to the physical coordinate $x$ is defined as $J(\\xi) = \\frac{dx}{d\\xi}$. The mapping is given by the isoparametric formulation:\n$$\nx(\\xi) = \\sum_{i=0}^{N} X_i \\, \\ell_i(\\xi)\n$$\nTo find the Jacobian, we differentiate this expression with respect to $\\xi$. The physical nodal coordinates $\\{X_i\\}$ are constants with respect to the reference coordinate $\\xi$. The differentiation operation is linear, so we can differentiate the sum term by term:\n$$\nJ(\\xi) = \\frac{d}{d\\xi} \\left( \\sum_{i=0}^{N} X_i \\, \\ell_i(\\xi) \\right)\n$$\nApplying the derivative to each term in the summation yields:\n$$\nJ(\\xi) = \\sum_{i=0}^{N} X_i \\, \\frac{d\\ell_i}{d\\xi}(\\xi)\n$$\nUsing prime notation for the derivative, $\\ell_i'(\\xi) = \\frac{d\\ell_i}{d\\xi}(\\xi)$, the expression for the Jacobian is:\n$$\nJ(\\xi) = \\sum_{i=0}^{N} X_i \\, \\ell_i'(\\xi)\n$$\n\nTask 2: Derive the transformation rule for an integral of a scalar function $f(x)$.\n\nWe are asked to transform the integral of a scalar function $f(x)$ over the physical element $K = x([-1,1])$. The integral is $\\int_{K} f(x)\\,dx$. The domain $K$ corresponds to the interval $[x(-1), x(1)]$. We use the one-dimensional change-of-variables theorem from calculus. The transformation is given by the mapping $x=x(\\xi)$. The differential element $dx$ is related to the differential element $d\\xi$ by the chain rule:\n$$\ndx = \\frac{dx}{d\\xi} \\, d\\xi = J(\\xi) \\, d\\xi\n$$\nWhen the variable of integration is changed from $x$ to $\\xi$, the limits of integration must also be transformed. The physical domain $K$ spans from $x_{start} = x(-1)$ to $x_{end} = x(1)$. These correspond to the reference domain limits $\\xi=-1$ and $\\xi=1$, respectively. Substituting $x=x(\\xi)$, $dx=J(\\xi)d\\xi$, and the new limits into the integral gives the transformation rule:\n$$\n\\int_{x(-1)}^{x(1)} f(x) \\, dx = \\int_{-1}^{1} f(x(\\xi)) \\, J(\\xi) \\, d\\xi\n$$\nThe role of the Jacobian $J(\\xi)$ is to act as a scaling factor that relates the differential length element $dx$ in the physical domain to the differential length element $d\\xi$ in the reference domain. It accounts for the local stretching ($|J(\\xi)| > 1$), compression ($|J(\\xi)|  1$), or orientation reversal ($J(\\xi)  0$) of the mapping at each point $\\xi$. For a valid, non-degenerate element mapping, the Jacobian must not be zero within the element's interior.\n\nTask 3: Compute the exact value of the integral for the specified case.\n\nWe have $N=2$, with nodes $\\xi_0=-1$, $\\xi_1=0$, $\\xi_2=1$. We first construct the Lagrange basis polynomials $\\{\\ell_i(\\xi)\\}_{i=0}^{2}$:\n$$\n\\ell_0(\\xi) = \\frac{(\\xi - \\xi_1)(\\xi - \\xi_2)}{(\\xi_0 - \\xi_1)(\\xi_0 - \\xi_2)} = \\frac{(\\xi - 0)(\\xi - 1)}{(-1 - 0)(-1 - 1)} = \\frac{\\xi(\\xi-1)}{2} = \\frac{1}{2}\\xi^2 - \\frac{1}{2}\\xi\n$$\n$$\n\\ell_1(\\xi) = \\frac{(\\xi - \\xi_0)(\\xi - \\xi_2)}{(\\xi_1 - \\xi_0)(\\xi_1 - \\xi_2)} = \\frac{(\\xi - (-1))(\\xi - 1)}{(0 - (-1))(0 - 1)} = \\frac{(\\xi+1)(\\xi-1)}{-1} = 1 - \\xi^2\n$$\n$$\n\\ell_2(\\xi) = \\frac{(\\xi - \\xi_0)(\\xi - \\xi_1)}{(\\xi_2 - \\xi_0)(\\xi_2 - \\xi_1)} = \\frac{(\\xi - (-1))(\\xi - 0)}{(1 - (-1))(1 - 0)} = \\frac{(\\xi+1)\\xi}{2} = \\frac{1}{2}\\xi^2 + \\frac{1}{2}\\xi\n$$\nNext, we construct the isoparametric mapping $x(\\xi)$ using the physical node coordinates $X_0=0$, $X_1=1$, and $X_2=3$:\n$$\nx(\\xi) = X_0\\ell_0(\\xi) + X_1\\ell_1(\\xi) + X_2\\ell_2(\\xi)\n$$\n$$\nx(\\xi) = (0)\\left(\\frac{1}{2}\\xi^2 - \\frac{1}{2}\\xi\\right) + (1)(1 - \\xi^2) + (3)\\left(\\frac{1}{2}\\xi^2 + \\frac{1}{2}\\xi\\right)\n$$\n$$\nx(\\xi) = 1 - \\xi^2 + \\frac{3}{2}\\xi^2 + \\frac{3}{2}\\xi = \\frac{1}{2}\\xi^2 + \\frac{3}{2}\\xi + 1\n$$\nWe verify the mapping at the nodes: $x(-1) = \\frac{1}{2} - \\frac{3}{2} + 1 = 0 = X_0$, $x(0) = 1 = X_1$, $x(1) = \\frac{1}{2} + \\frac{3}{2} + 1 = 3 = X_2$. The mapping is correct.\n\nNow, we compute the Jacobian $J(\\xi)$:\n$$\nJ(\\xi) = \\frac{dx}{d\\xi} = \\frac{d}{d\\xi}\\left(\\frac{1}{2}\\xi^2 + \\frac{3}{2}\\xi + 1\\right) = \\xi + \\frac{3}{2}\n$$\nThe integral to be computed is $I = \\int_{x(-1)}^{x(1)} x^2\\,dx = \\int_{0}^{3} x^2\\,dx$.\nWe transform this integral to the reference interval $[-1,1]$:\n$$\nI = \\int_{-1}^{1} (x(\\xi))^2 \\, J(\\xi) \\, d\\xi\n$$\nSubstituting the expressions for $x(\\xi)$ and $J(\\xi)$:\n$$\nI = \\int_{-1}^{1} \\left(\\frac{1}{2}\\xi^2 + \\frac{3}{2}\\xi + 1\\right)^2 \\left(\\xi + \\frac{3}{2}\\right) d\\xi\n$$\nLet us recognize that the term $\\xi + \\frac{3}{2}$ is precisely the derivative of the term inside the parenthesis, i.e., $J(\\xi) = \\frac{dx(\\xi)}{d\\xi}$. This allows for a direct substitution. Let $u = x(\\xi) = \\frac{1}{2}\\xi^2 + \\frac{3}{2}\\xi + 1$. Then $du = (\\xi + \\frac{3}{2})d\\xi = J(\\xi)d\\xi$. We must also change the limits of integration according to this substitution:\n- When $\\xi = -1$, $u = x(-1) = 0$.\n- When $\\xi = 1$, $u = x(1) = 3$.\n\nThe integral transforms as follows:\n$$\nI = \\int_{u(\\xi=-1)}^{u(\\xi=1)} u^2 \\, du = \\int_{0}^{3} u^2 \\, du\n$$\nThis is a trivial integral to evaluate:\n$$\nI = \\left[ \\frac{u^3}{3} \\right]_{0}^{3} = \\frac{3^3}{3} - \\frac{0^3}{3} = \\frac{27}{3} = 9\n$$\nThis result can be verified by direct integration in the physical space, which confirms the correctness of our procedure:\n$$\n\\int_{0}^{3} x^2 \\, dx = \\left[ \\frac{x^3}{3} \\right]_{0}^{3} = \\frac{3^3}{3} = 9\n$$\nThe calculation is consistent and correct.", "answer": "$$\n\\boxed{9}\n$$", "id": "2597909"}, {"introduction": "Once we are comfortable working on the reference element, our next step is to build the tools of calculus. This practice delves into the construction of the algebraic operators that represent differentiation in the spectral element method. You will derive the explicit formulas for the first and second derivative matrices, $D$ and $D^{(2)}$, at the Gauss-Lobatto-Legendre nodes [@problem_id:2597917]. Understanding the structure of these matrices and their spectral properties is fundamental, as their eigenvalues directly govern the numerical stability and accuracy of time-dependent simulations.", "problem": "Consider a single spectral element on the interval $[-1,1]$ using the spectral element method (SEM). Let $\\{x_j\\}_{j=0}^{N}$ be the Gauss–Lobatto–Legendre (GLL) nodes associated with the Legendre polynomial $P_{N}(x)$ of degree $N$, that is, $x_0=-1$, $x_N=1$, and $x_1,\\dots,x_{N-1}$ are the roots of $P_{N}'(x)$. Let $\\{\\ell_j(x)\\}_{j=0}^{N}$ be the Lagrange nodal basis polynomials satisfying $\\ell_j(x_i)=\\delta_{ij}$, and define the first and second derivative matrices by\n$$\nD_{ij}=\\ell_j'(x_i),\\qquad D^{(2)}_{ij}=\\ell_j''(x_i).\n$$\nWork from the following fundamental bases:\n- The definition of the nodal polynomial $\\pi(x)=\\prod_{m=0}^{N}(x-x_m)$ for the nodes $\\{x_m\\}$ and its relation to the Lagrange basis $\\ell_j(x)=\\frac{\\pi(x)}{\\pi'(x_j)(x-x_j)}$.\n- The characterization of GLL nodes by $(1-x^2)P_N'(x)=0$ and that, up to a nonzero constant, $\\pi(x)\\propto (1-x^2)P_{N}'(x)$.\n- The Legendre differential equation $(1-x^2)P_{N}''(x)-2xP_{N}'(x)+N(N+1)P_{N}(x)=0$ and its derivatives.\n- The summation-by-parts property associated with GLL quadrature weights in the context of SEM.\n\nTasks:\n1. Derive a closed-form expression for off-diagonal entries $D_{ij}$ for $i\\neq j$ in terms of $P_{N}(x)$ and the GLL nodes.\n2. Derive closed-form diagonal entries $D_{ii}$ for all $i\\in\\{0,1,\\dots,N\\}$.\n3. Using only identities that follow from the definitions above, derive explicit formulas for $D^{(2)}_{ij}$ for $i\\neq j$ in terms of $D_{ij}$, $x_i$, $x_j$, and $D_{ii}$, and then simplify these formulas for interior rows $i\\in\\{1,\\dots,N-1\\}$. Derive closed-form diagonal entries $D^{(2)}_{ii}$ for interior and endpoint indices separately.\n4. Let $W=\\mathrm{diag}(w_0,\\dots,w_N)$ be the diagonal matrix of GLL quadrature weights. Consider the Galerkin stiffness $K=D^{\\top}WD$ and mass $M=W$, and impose homogeneous Dirichlet boundary conditions by restricting to the interior degrees of freedom, yielding $K_{\\mathrm{int}}$ and $M_{\\mathrm{int}}$. Analyze the spectra of the following operators:\n   - The first derivative matrix $D$ (qualitative behavior and scaling of the spectral radius with $N$).\n   - The collocation second derivative matrix $D^{(2)}$ (qualitative behavior and scaling of the spectral radius with $N$).\n   - The generalized eigenvalue problem $K_{\\mathrm{int}}v=\\lambda M_{\\mathrm{int}}v$ (reality, definiteness, and scaling of extremal eigenvalues with $N$).\nProvide rigorous arguments based on the listed bases, including the Legendre equation, properties of $\\pi(x)$, and polynomial inverse inequalities, but avoid any shortcut formulas not derivable from these ingredients.\n\nYour final reported answer must be a single closed-form expression: the off-diagonal entry $D_{ij}$ for $i\\neq j$ in terms of $P_N$ and the nodes $x_i,x_j$. Do not include units. Do not provide numerical values. Do not include any additional text in your final answer beyond the requested expression.", "solution": "The problem statement is a well-posed, scientifically grounded problem in the field of numerical analysis, specifically concerning the spectral element method. All terms are standard and the tasks require rigorous derivations based on the provided fundamental principles. The problem is deemed valid and a full solution is presented.\n\nThe derivation will proceed by addressing the four tasks in the order they are presented.\n\nTask 1: Derivation of off-diagonal entries $D_{ij}$ for $i\\neq j$.\n\nThe first derivative matrix entries are defined as $D_{ij} = \\ell_j'(x_i)$, where $\\{\\ell_j(x)\\}_{j=0}^{N}$ are the Lagrange basis polynomials defined on the Gauss-Lobatto-Legendre (GLL) nodes $\\{x_k\\}_{k=0}^N$. The Lagrange basis polynomial $\\ell_j(x)$ is given by the formula:\n$$\n\\ell_j(x) = \\prod_{m=0, m\\neq j}^{N} \\frac{x-x_m}{x_j-x_m}\n$$\nThis can be expressed in terms of the nodal polynomial $\\pi(x) = \\prod_{m=0}^{N}(x-x_m)$. A simple manipulation gives $\\pi'(x_j) = \\prod_{m=0, m\\neq j}^{N}(x_j-x_m)$, which allows us to write $\\ell_j(x)$ as proposed in the problem statement:\n$$\n\\ell_j(x) = \\frac{\\pi(x)}{\\pi'(x_j)(x-x_j)}\n$$\nTo find $D_{ij}$, we must differentiate $\\ell_j(x)$ with respect to $x$ and then evaluate the result at $x=x_i$. For a fixed $j$, and for $x \\neq x_j$, the derivative of $\\ell_j(x)$ using the quotient rule is:\n$$\n\\ell_j'(x) = \\frac{1}{\\pi'(x_j)} \\frac{\\pi'(x)(x-x_j) - \\pi(x)\\cdot 1}{(x-x_j)^2}\n$$\nWe want to evaluate this at $x=x_i$ for $i \\neq j$. Since $x_i$ is a GLL node, it is a root of the nodal polynomial $\\pi(x)$, so $\\pi(x_i) = 0$. The expression for $\\ell_j'(x_i)$ simplifies significantly:\n$$\nD_{ij} = \\ell_j'(x_i) = \\frac{1}{\\pi'(x_j)} \\frac{\\pi'(x_i)(x_i-x_j) - \\pi(x_i)}{(x_i-x_j)^2} = \\frac{1}{\\pi'(x_j)} \\frac{\\pi'(x_i)(x_i-x_j) - 0}{(x_i-x_j)^2} = \\frac{\\pi'(x_i)}{\\pi'(x_j)(x_i-x_j)}\n$$\nNow, we must use the given properties of the GLL nodes. The nodal polynomial $\\pi(x)$ is proportional to $(1-x^2)P_N'(x)$, where $P_N(x)$ is the Legendre polynomial of degree $N$. Let this proportionality be $\\pi(x) = c(1-x^2)P_N'(x)$ for some non-zero constant $c$. To find $\\pi'(x)$, we differentiate this expression:\n$$\n\\pi'(x) = c \\left[ -2xP_N'(x) + (1-x^2)P_N''(x) \\right]\n$$\nThe Legendre differential equation, also provided, is $(1-x^2)P_N''(x) - 2xP_N'(x) + N(N+1)P_N(x) = 0$. We can solve for the term $(1-x^2)P_N''(x)$:\n$$\n(1-x^2)P_N''(x) = 2xP_N'(x) - N(N+1)P_N(x)\n$$\nSubstituting this into the expression for $\\pi'(x)$:\n$$\n\\pi'(x) = c \\left[ -2xP_N'(x) + \\left( 2xP_N'(x) - N(N+1)P_N(x) \\right) \\right] = -c N(N+1) P_N(x)\n$$\nThis provides a simple form for $\\pi'(x)$ evaluated at a node $x_k$: $\\pi'(x_k) = -cN(N+1)P_N(x_k)$. Substituting this back into our formula for $D_{ij}$:\n$$\nD_{ij} = \\frac{-c N(N+1) P_N(x_i)}{(-c N(N+1) P_N(x_j))(x_i-x_j)} = \\frac{P_N(x_i)}{P_N(x_j)(x_i-x_j)}\n$$\nThis is the required closed-form expression for the off-diagonal entries of the first derivative matrix for $i \\neq j$.\n\nTask 2: Derivation of diagonal entries $D_{ii}$.\n\nTo find the diagonal entries $D_{ii} = \\ell_i'(x_i)$, we can use the property that the derivative of a constant is zero. The sum of all Lagrange basis functions is identically equal to $1$:\n$$\n\\sum_{j=0}^{N} \\ell_j(x) = 1\n$$\nDifferentiating this identity with respect to $x$ yields:\n$$\n\\sum_{j=0}^{N} \\ell_j'(x) = 0\n$$\nEvaluating this sum at a node $x_i$ gives the sum of the entries in the $i$-th row of the matrix $D$:\n$$\n\\sum_{j=0}^{N} \\ell_j'(x_i) = \\sum_{j=0}^{N} D_{ij} = 0\n$$\nThis allows us to express the diagonal entry $D_{ii}$ in terms of the off-diagonal entries: $D_{ii} = - \\sum_{j=0, j \\neq i}^{N} D_{ij}$. While correct, a closed form is required.\n\nA direct derivation for $D_{ii}$ starts by considering $\\ell_i'(x_i)$ via the limit definition of the derivative. A more direct route is to find the second derivative of $\\pi(x)$. From the result $\\ell_i'(x_i) = \\frac{\\pi''(x_i)}{2\\pi'(x_i)}$ (which can be derived using L'Hôpital's rule twice on $\\frac{\\ell_i(x)-1}{x-x_i}$ or by Taylor expansion), we can find a closed form. We have $\\pi'(x) = -c N(N+1) P_N(x)$, so $\\pi''(x) = -c N(N+1) P_N'(x)$.\nSubstituting these into the formula for $D_{ii}$:\n$$\nD_{ii} = \\frac{-c N(N+1) P_N'(x_i)}{2(-c N(N+1) P_N(x_i))} = \\frac{P_N'(x_i)}{2P_N(x_i)}\n$$\nWe must evaluate this at the different types of GLL nodes.\nFor interior nodes $i \\in \\{1, \\dots, N-1\\}$, the nodes $x_i$ are defined as the roots of $P_N'(x)$, so $P_N'(x_i) = 0$. This gives:\n$$\nD_{ii} = 0, \\quad \\text{for } i = 1, \\dots, N-1\n$$\nFor the endpoint nodes $x_0 = -1$ and $x_N = 1$:\nAt $x_N=1$, we use the standard values $P_N(1) = 1$ and $P_N'(1) = \\frac{N(N+1)}{2}$.\n$$\nD_{NN} = \\frac{P_N'(1)}{2P_N(1)} = \\frac{N(N+1)/2}{2(1)} = \\frac{N(N+1)}{4}\n$$\nAt $x_0=-1$, we use $P_N(-1) = (-1)^N$ and $P_N'(-1) = (-1)^{N-1}\\frac{N(N+1)}{2}$.\n$$\nD_{00} = \\frac{P_N'(-1)}{2P_N(-1)} = \\frac{(-1)^{N-1}N(N+1)/2}{2(-1)^N} = -\\frac{N(N+1)}{4}\n$$\n\nTask 3: Derivation of second derivative matrix entries $D^{(2)}_{ij}$.\n\nFirst, we derive the off-diagonal entries $D^{(2)}_{ij} = \\ell_j''(x_i)$ for $i \\neq j$. We start from the expression for $\\ell_j'(x)$ derived earlier:\n$$\n\\ell_j'(x) = \\frac{\\pi'(x)(x-x_j) - \\pi(x)}{\\pi'(x_j)(x-x_j)^2}\n$$\nDifferentiating this with respect to $x$ using the quotient rule gives:\n$$\n\\ell_j''(x) = \\frac{1}{\\pi'(x_j)} \\frac{d}{dx} \\left( \\frac{\\pi'(x)(x-x_j) - \\pi(x)}{(x-x_j)^2} \\right)\n$$\nThe derivative of the numerator is $\\pi''(x)(x-x_j) + \\pi'(x) - \\pi'(x) = \\pi''(x)(x-x_j)$. The derivative of the denominator is $2(x-x_j)$.\n$$\n\\ell_j''(x) = \\frac{1}{\\pi'(x_j)} \\frac{[\\pi''(x)(x-x_j)](x-x_j)^2 - [\\pi'(x)(x-x_j)-\\pi(x)][2(x-x_j)]}{(x-x_j)^4}\n$$\nSimplifying by a factor of $(x-x_j)$:\n$$\n\\ell_j''(x) = \\frac{1}{\\pi'(x_j)} \\frac{\\pi''(x)(x-x_j)^2 - 2[\\pi'(x)(x-x_j)-\\pi(x)]}{(x-x_j)^3}\n$$\nEvaluating at $x=x_i$ where $i \\neq j$, we use $\\pi(x_i)=0$:\n$$\nD_{ij}^{(2)} = \\ell_j''(x_i) = \\frac{1}{\\pi'(x_j)} \\frac{\\pi''(x_i)(x_i-x_j)^2 - 2\\pi'(x_i)(x_i-x_j)}{(x_i-x_j)^3} = \\frac{\\pi''(x_i)(x_i-x_j) - 2\\pi'(x_i)}{\\pi'(x_j)(x_i-x_j)^2}\n$$\nWe can split this into two terms:\n$$\nD_{ij}^{(2)} = \\frac{\\pi''(x_i)}{\\pi'(x_j)(x_i-x_j)} - \\frac{2\\pi'(x_i)}{\\pi'(x_j)(x_i-x_j)^2}\n$$\nWe can express these terms using $D_{ij}$ and $D_{ii}$. Recall $D_{ij} = \\frac{\\pi'(x_i)}{\\pi'(x_j)(x_i-x_j)}$ and $D_{ii} = \\frac{\\pi''(x_i)}{2\\pi'(x_i)}$, which implies $\\pi''(x_i) = 2D_{ii}\\pi'(x_i)$.\nThe second term is $\\frac{2}{x_i-x_j} \\frac{\\pi'(x_i)}{\\pi'(x_j)(x_i-x_j)} = \\frac{2D_{ij}}{x_i-x_j}$.\nThe first term is $\\frac{2D_{ii}\\pi'(x_i)}{\\pi'(x_j)(x_i-x_j)} = 2D_{ii} \\frac{\\pi'(x_i)}{\\pi'(x_j)(x_i-x_j)} = 2D_{ii}D_{ij}$.\nCombining these gives the formula:\n$$\nD^{(2)}_{ij} = 2D_{ii}D_{ij} - \\frac{2D_{ij}}{x_i-x_j} = 2D_{ij}\\left(D_{ii} - \\frac{1}{x_i-x_j}\\right) \\quad \\text{for } i \\neq j\n$$\nFor interior rows $i \\in \\{1,\\dots,N-1\\}$, we have $D_{ii}=0$. The formula simplifies to:\n$$\nD^{(2)}_{ij} = -\\frac{2D_{ij}}{x_i-x_j}, \\quad i \\in \\{1,\\dots,N-1\\}, i \\neq j\n$$\nNext, we derive the diagonal entries $D^{(2)}_{ii} = \\ell_i''(x_i)$. A direct formula is $D^{(2)}_{ii} = \\frac{\\pi'''(x_i)}{3\\pi'(x_i)}$. We have $\\pi'(x) = -c N(N+1)P_N(x)$ and thus $\\pi'''(x) = -c N(N+1)P_N''(x)$.\n$$\nD^{(2)}_{ii} = \\frac{-c N(N+1)P_N''(x_i)}{3(-c N(N+1)P_N(x_i))} = \\frac{P_N''(x_i)}{3P_N(x_i)}\n$$\nUsing the Legendre equation, $P_N''(x_i) = \\frac{2x_iP_N'(x_i) - N(N+1)P_N(x_i)}{1-x_i^2}$.\nFor interior nodes $i \\in \\{1,\\dots,N-1\\}$, $x_i^2 \\neq 1$ and $P_N'(x_i)=0$.\n$$\nD^{(2)}_{ii} = \\frac{1}{3P_N(x_i)} \\frac{-N(N+1)P_N(x_i)}{1-x_i^2} = -\\frac{N(N+1)}{3(1-x_i^2)}, \\quad i \\in \\{1,\\dots,N-1\\}\n$$\nFor the endpoints $i=0,N$, the denominator $1-x_i^2$ is zero. We must handle these separately. Differentiating the Legendre equation yields $(1-x^2)P_N''' - 4xP_N'' + (N(N+1)-2)P_N' = 0$. At $x=1$, this gives $-4P_N''(1) + (N(N+1)-2)P_N'(1) = 0$.\nSo, $P_N''(1) = \\frac{N(N+1)-2}{4}P_N'(1) = \\frac{N(N+1)-2}{4} \\frac{N(N+1)}{2} = \\frac{N(N+1)(N^2+N-2)}{8}$.\nThen for $i=N$, since $P_N(1)=1$:\n$$\nD^{(2)}_{NN} = \\frac{P_N''(1)}{3P_N(1)} = \\frac{N(N+1)(N^2+N-2)}{24}\n$$\nBy symmetry of the GLL nodes about $x=0$, $D^{(2)}_{00} = D^{(2)}_{NN}$.\n\nTask 4: Spectral analysis.\n\n- **Spectrum of $D$**: The eigenvalues $\\lambda$ of $D$ are not, in general, purely imaginary. Using the summation-by-parts (SBP) property $W D + D^T W = B$, where $B=\\text{diag}(-1, 0, \\dots, 0, 1)$, for an eigenvector $v$ with eigenvalue $\\lambda$, we have $2\\text{Re}(\\lambda)v^H W v = |v_N|^2 - |v_0|^2$. So the real part of $\\lambda$ is non-zero if the eigenvector has different magnitudes at the boundaries. For eigenvectors with $v_0=v_N=0$, the eigenvalues are purely imaginary. The matrix $D$ is not normal. The spectral radius $\\rho(D) = \\max|\\lambda|$ scales with the polynomial degree $N$. From the polynomial inverse inequality (Markov's inequality), $\\|Du\\|_{\\infty} \\leq C N^2 \\|u\\|_{\\infty}$ for a vector $u$ representing polynomial values at the nodes. This implies $\\rho(D) = O(N^2)$.\n\n- **Spectrum of $D^{(2)}$**: The eigenvalues of $D^{(2)}$ are real and non-positive. Since $\\sum_j D^{(2)}_{ij}=0$, the vector of all ones is an eigenvector with eigenvalue $0$. The other eigenvalues are negative. The spectral radius $\\rho(D^{(2)})$ scales as $O(N^4)$, which can be inferred from the corresponding polynomial inverse inequality for second derivatives: $\\|D^{(2)}u\\|_{\\infty} \\leq C N^4 \\|u\\|_{\\infty}$.\n\n- **Spectrum of $K_{\\mathrm{int}}v=\\lambda M_{\\mathrm{int}}v$**: This is the generalized eigenvalue problem for the Galerkin discretization of the one-dimensional Poisson equation with homogeneous Dirichlet boundary conditions.\n  - $M_{\\mathrm{int}}$ is the mass matrix restricted to interior nodes. It is a diagonal matrix with the GLL weights $w_j = \\int_{-1}^1 \\ell_j(x) dx$ for $j=1,\\dots,N-1$. All $w_j>0$, so $M_{\\mathrm{int}}$ is symmetric positive definite (SPD).\n  - $K_{\\mathrm{int}}$ is the stiffness matrix for interior nodes. For any interior vector $v$ (padded with zeros at endpoints to form $\\tilde{v}$), the quadratic form is $v^T K_{\\mathrm{int}} v = \\tilde{v}^T D^T W D \\tilde{v} = (D\\tilde{v})^T W (D\\tilde{v}) = \\sum_{i=0}^N w_i ( (D\\tilde{v})_i )^2 \\ge 0$. The form is zero only if $D\\tilde{v}=0$, which means the corresponding polynomial has zero derivative at all nodes, hence is a constant. As the polynomial is zero at the boundaries, it must be zero everywhere. Thus, $v=0$. So $K_{\\mathrm{int}}$ is also SPD.\n  - The generalized eigenvalue problem with two SPD matrices has real and positive eigenvalues: $\\lambda > 0$.\n  - The eigenvalues $\\lambda$ approximate the eigenvalues of the continuous problem $-u''=\\mu u$ on $[-1,1]$ with $u(\\pm 1)=0$, which are $\\mu_k = (k\\pi/2)^2$ for $k=1,2,\\dots$.\n  - The smallest eigenvalue, $\\lambda_{\\min}$, converges to the smallest continuous eigenvalue $\\mu_1 = (\\pi/2)^2$ as $N \\to \\infty$. Thus, $\\lambda_{\\min} = O(1)$.\n  - The largest eigenvalue, $\\lambda_{\\max}$, is related to the maximum frequency resolvable by the grid. It scales with the inverse of the minimum grid spacing squared. For GLL nodes, this leads to a scaling of $\\lambda_{\\max} = O(N^4)$. This is consistent with the stability constraint for explicit time integrators for the heat equation, which is $\\Delta t \\propto 1/\\lambda_{\\max}$.", "answer": "$$\\boxed{\\frac{P_{N}(x_i)}{P_{N}(x_j)(x_i-x_j)}}$$", "id": "2597917"}, {"introduction": "Armed with the tools of mapping and differentiation, we can now tackle a nonlinear problem: the inviscid Burgers' equation. A naive application of the differentiation matrix to the nonlinear flux term is computationally efficient but can introduce unphysical artifacts. This practice critically examines the issue of aliasing error by comparing a simple collocation approach with a more rigorous, fully-integrated Galerkin discretization [@problem_id:2597924]. Quantifying the impact of these different approaches on a conserved quantity like energy provides a crucial lesson in developing robust and physically faithful numerical schemes for complex nonlinear systems.", "problem": "Consider the one-dimensional inviscid Burgers equation in conservative form on a single reference spectral element,\n$$\n\\partial_t u + \\partial_x \\left(\\frac{1}{2} u^2\\right) = 0,\\quad x\\in[-1,1],\n$$\nand its continuous Galerkin discretization by the Spectral Element Method (SEM). Use a polynomial space of degree $N=6$ with Lagrange basis functions at the Gauss–Lobatto–Legendre (GLL) nodes. Let $\\{\\ell_i(x)\\}_{i=0}^{N}$ be the nodal basis associated with the $N+1$ GLL nodes $\\{x_i\\}_{i=0}^{N}$. Define the nodal vector $u\\in\\mathbb{R}^{N+1}$ by $u_i = u(x_i)$. The physical flux is $f(u)=\\frac{1}{2}u^2$.\n\nYou must compute and compare the convective residual using two strategies:\n\n1. Under-integrated (collocation) residual: let $D\\in\\mathbb{R}^{(N+1)\\times(N+1)}$ be the differentiation matrix with entries $D_{ij} = \\ell_j'(x_i)$. Define\n$$\nr^{\\mathrm{UI}} = D\\, f(u),\n$$\nwhere $f(u)$ is evaluated componentwise, i.e., $[f(u)]_i = \\frac{1}{2} u_i^2$.\n\n2. Fully integrated (Galerkin) residual: use the exact weak form evaluated by over-integration. Let the consistent mass matrix be\n$$\nM_{ij} = \\int_{-1}^{1} \\ell_i(x)\\,\\ell_j(x)\\,dx,\n$$\nand define the load vector\n$$\ng_i = -\\int_{-1}^{1} \\ell_i'(x)\\, f(u_h(x))\\,dx,\\quad u_h(x)=\\sum_{k=0}^{N} u_k \\ell_k(x).\n$$\nObtain the fully integrated residual $r^{\\mathrm{FI}}\\in\\mathbb{R}^{N+1}$ by solving\n$$\nM\\, r^{\\mathrm{FI}} = g.\n$$\nAll element-level integrals must be evaluated by Gauss–Legendre quadrature with $Q=200$ points on $[-1,1]$; this over-integration should be treated as numerically exact for the purposes of this problem. All derivatives of basis functions at quadrature points must be computed consistently from the Lagrange basis, not by finite differences.\n\nEnergy quantification. The discrete energy is\n$$\nE_h(u) = \\frac{1}{2} u^\\top M\\, u.\n$$\nFor a residual $r$, define the instantaneous energy production rate (due solely to the convective term) by\n$$\n\\dot{E}_h(u;r) = u^\\top M\\, r.\n$$\nOn a periodic domain and with exact integration, the convective term should not change the energy, so the fully integrated residual should satisfy $\\dot{E}_h(u;r^{\\mathrm{FI}})\\approx 0$.\n\nDifference metric. Quantify the discrepancy between $r^{\\mathrm{FI}}$ and $r^{\\mathrm{UI}}$ using the mass-weighted $L^2$ norm,\n$$\n\\|r^{\\mathrm{FI}}-r^{\\mathrm{UI}}\\|_{M} = \\sqrt{(r^{\\mathrm{FI}}-r^{\\mathrm{UI}})^\\top M\\, (r^{\\mathrm{FI}}-r^{\\mathrm{UI}})}.\n$$\n\nImplement the computation in a single program with no user input. Use the following test suite of initial data, represented by their nodal values $u_i=u(x_i)$:\n- Case A (trigonometric, periodic): $u(x) = \\sin(\\pi x) + \\frac{1}{2}\\sin(2\\pi x)$.\n- Case B (low-degree polynomial): $u(x) = x^3 - x$.\n- Case C (highest-mode Legendre polynomial): $u(x) = P_6(x)$, where $P_6$ is the Legendre polynomial of degree $6$.\n\nFor each case, compute and report three quantities:\n- The mass-weighted difference $\\|r^{\\mathrm{FI}}-r^{\\mathrm{UI}}\\|_{M}$.\n- The under-integrated energy production $\\dot{E}_h(u;r^{\\mathrm{UI}})$.\n- The fully integrated energy production $\\dot{E}_h(u;r^{\\mathrm{FI}})$.\n\nAll computations are dimensionless. Output specification: Your program should produce a single line of output containing the nine results, ordered as\n$$\n[\\|r^{\\mathrm{FI}}-r^{\\mathrm{UI}}\\|_{M}^{(A)},\\ \\dot E_h^{(A)}(u;r^{\\mathrm{UI}}),\\ \\dot E_h^{(A)}(u;r^{\\mathrm{FI}}),\\ \\|r^{\\mathrm{FI}}-r^{\\mathrm{UI}}\\|_{M}^{(B)},\\ \\dot E_h^{(B)}(u;r^{\\mathrm{UI}}),\\ \\dot E_h^{(B)}(u;r^{\\mathrm{FI}}),\\ \\|r^{\\mathrm{FI}}-r^{\\mathrm{UI}}\\|_{M}^{(C)},\\ \\dot E_h^{(C)}(u;r^{\\mathrm{UI}}),\\ \\dot E_h^{(C)}(u;r^{\\mathrm{FI}})],\n$$\nrounded to $10$ decimal places and printed as a comma-separated list enclosed in square brackets (for example, $[0.1234567890,0.0,0.0,\\dots]$).", "solution": "The user has provided a valid problem statement. The task is to compute and compare two different discretizations of the convective term in the one-dimensional inviscid Burgers' equation, $\\partial_t u + \\partial_x (\\frac{1}{2} u^2) = 0$, using the Spectral Element Method (SEM) on a reference element $x\\in[-1,1]$. The core of the problem lies in the distinction between a computationally efficient but non-conservative collocation scheme and a more expensive but conservative Galerkin scheme. This analysis is fundamental to understanding numerical stability and conservation in high-order methods for nonlinear partial differential equations.\n\nThe solution is constructed by implementing the necessary components of a single-element SEM code for a polynomial approximation of degree $N=6$.\n\nFirst, we establish the discretization framework. The solution $u(x,t)$ is approximated by a polynomial $u_h(x,t) \\in \\mathcal{P}_N$, the space of polynomials of degree at most $N$. In the nodal SEM, this polynomial is represented by its values at a set of $N+1$ quadrature nodes. For this problem, the Gauss–Lobatto–Legendre (GLL) nodes, $\\{x_i\\}_{i=0}^{N}$, are used. These nodes are the roots of the polynomial $(1-x^2)P_N'(x)$, where $P_N(x)$ is the Legendre polynomial of degree $N$. For $N=6$, this gives $7$ nodes on the interval $[-1,1]$.\n\nThe polynomial approximant $u_h(x,t)$ is expressed in the basis of Lagrange polynomials $\\{\\ell_j(x)\\}_{j=0}^{N}$ defined over these GLL nodes:\n$$\nu_h(x,t) = \\sum_{j=0}^{N} u_j(t) \\ell_j(x)\n$$\nwhere $u_j(t) = u_h(x_j,t)$ are the nodal values of the solution, and the basis functions satisfy the cardinality property $\\ell_j(x_i) = \\delta_{ij}$.\n\nThe two residual calculation strategies are then defined as follows:\n\n1.  **Under-integrated (Collocation) Residual, $r^{\\mathrm{UI}}$**: This approach arises from collocating the strong form of the PDE at the GLL nodes. Substituting $u_h$ into the PDE, we get a residual $R(x) = \\partial_t u_h + \\partial_x f(u_h)$. We demand $R(x_i)=0$ for all nodes $i=0, \\dots, N$. The spatial part of this equation gives rise to the specified residual. The spatial derivative $\\partial_x$ is replaced by the action of the differentiation matrix $D$, whose entries are $D_{ij} = \\ell_j'(x_i)$. The nonlinear flux $f(u) = \\frac{1}{2}u^2$ is evaluated pointwise at the nodes, i.e., $[f(u)]_i = f(u_i)$. The semi-discrete equation becomes $\\dot{u}_i + [D f(u)]_i = 0$. The convective residual is therefore defined as:\n    $$\n    r^{\\mathrm{UI}} = D f(u)\n    $$\n    This scheme is computationally efficient as it involves only matrix-vector products. However, treating the nonlinear term $f(u_h(x))$ by evaluating it only at the nodes $f(u(x_i))$ implicitly uses GLL quadrature to integrate the nonlinear term in the weak form. Because the degree of $f(u_h(x))$ is $2N$, this quadrature is inexact and introduces aliasing errors, which typically manifest as a violation of conservation laws.\n\n2.  **Fully Integrated (Galerkin) Residual, $r^{\\mathrm{FI}}$**: This approach is derived from the weak form of the PDE. We multiply the PDE by a test function $v_h(x) \\in \\mathcal{P}_N$ (here, the basis functions $\\ell_i(x)$) and integrate over the domain:\n    $$\n    \\int_{-1}^{1} \\ell_i(x) \\partial_t u_h(x) \\,dx + \\int_{-1}^{1} \\ell_i(x) \\partial_x f(u_h(x)) \\,dx = 0\n    $$\n    The first term gives the mass matrix contribution: $\\sum_{j=0}^N \\dot{u}_j \\int_{-1}^1 \\ell_i(x) \\ell_j(x) \\,dx = [M \\dot{u}]_i$. The second term is integrated by parts: $\\int_{-1}^1 \\ell_i \\partial_x f(u_h) \\,dx = [\\ell_i f(u_h)]_{-1}^1 - \\int_{-1}^1 \\ell_i'(x) f(u_h(x)) \\,dx$. For a continuous Galerkin method on a global domain, the boundary terms are used to enforce inter-element continuity or physical boundary conditions. On a single element as considered here, and following the problem definition, we focus on the interior integral part, which defines the vector $g$:\n    $$\n    g_i = -\\int_{-1}^{1} \\ell_i'(x) f(u_h(x)) \\, dx\n    $$\n    The semi-discrete system is $M \\dot{u} = -g$. The problem defines the fully-integrated residual $r^{\\mathrm{FI}}$ via the relation $M r^{\\mathrm{FI}} = g$. To avoid aliasing, the integrals for both the mass matrix $M_{ij} = \\int \\ell_i \\ell_j \\,dx$ and the load vector $g_i$ must be computed with sufficient accuracy. The problem specifies a Gauss-Legendre quadrature with $Q=200$ points, which is treated as numerically exact for the polynomial degrees involved.\n\nTo analyze the conservation properties, we examine the rate of change of the discrete kinetic energy, $E_h = \\frac{1}{2} u^\\top M u$. Its time derivative is $\\dot{E}_h = u^\\top M \\dot{u}$. In our context, the spatial residual $r$ is equivalent to $-\\dot{u}$ if we ignore boundary fluxes. The problem defines the energy production rate associated with a residual $r$ as $\\dot{E}_h(u;r) = u^\\top M r$.\nFor the fully integrated residual, this rate is $\\dot{E}_h(u; r^{\\mathrm{FI}}) = u^\\top M r^{\\mathrm{FI}} = u^\\top g$. Expanding this, we have:\n$$\n\\dot{E}_h(u; r^{\\mathrm{FI}}) = \\sum_{i=0}^N u_i g_i = \\sum_{i=0}^N u_i \\left( -\\int_{-1}^1 \\ell_i'(x) f(u_h(x)) dx \\right) = -\\int_{-1}^1 \\left( \\sum_{i=0}^N u_i \\ell_i'(x) \\right) f(u_h(x)) dx\n$$\nRecognizing that $\\sum_i u_i \\ell_i'(x) = u_h'(x)$ and $f(u_h) = \\frac{1}{2}u_h^2$, the integral becomes:\n$$\n\\dot{E}_h(u; r^{\\mathrm{FI}}) = -\\int_{-1}^1 u_h'(x) \\left(\\frac{1}{2}u_h(x)^2\\right) dx = -\\int_{-1}^1 \\frac{d}{dx}\\left(\\frac{1}{6}u_h(x)^3\\right) dx = -\\left[\\frac{1}{6}u_h(x)^3\\right]_{-1}^{1} = \\frac{1}{6}\\left(u_h(-1)^3 - u_h(1)^3\\right)\n$$\nThis shows that energy change is due solely to flux at the boundaries. For all three test cases provided, $u_h(-1)^3 = u_h(1)^3$, so we expect $\\dot{E}_h(u; r^{\\mathrm{FI}})$ to be zero up to numerical precision. In contrast, $\\dot{E}_h(u; r^{\\mathrm{UI}}) = u^\\top M r^{\\mathrm{UI}}$ is generally non-zero due to aliasing errors inherent in the collocation approach.\n\nThe discrepancy between the two residuals is quantified using a mass-weighted norm, $\\|r^{\\mathrm{FI}}-r^{\\mathrm{UI}}\\|_{M} = \\sqrt{(r^{\\mathrm{FI}}-r^{\\mathrm{UI}})^\\top M (r^{\\mathrm{FI}}-r^{\\mathrm{UI}})}$, which represents the difference in the natural energy norm of the space.\n\nThe computational procedure is as follows:\n1.  Compute the $N+1$ GLL nodes for $N=6$.\n2.  Construct the SEM differentiation matrix $D \\in \\mathbb{R}^{(N+1)\\times(N+1)}$.\n3.  Establish a high-order Gauss-Legendre quadrature rule with $Q=200$ points.\n4.  Evaluate the Lagrange basis functions $\\ell_j(x)$ and their derivatives $\\ell_j'(x)$ at the $Q$ quadrature points.\n5.  Use these evaluations to compute the consistent mass matrix $M$ via numerical quadrature.\n6.  For each test case:\n    a. Determine the nodal solution vector $u$ by evaluating the given function at the GLL nodes.\n    b. Compute the collocation residual $r^{\\mathrm{UI}} = D f(u)$.\n    c. Compute the Galerkin load vector $g$ by integrating $-\\ell_i'(x)f(u_h(x))$ with the high-order rule.\n    d. Solve the linear system $M r^{\\mathrm{FI}} = g$ to find the Galerkin residual $r^{\\mathrm{FI}}$.\n    e. Compute the three required quantities: $\\|r^{\\mathrm{FI}}-r^{\\mathrm{UI}}\\|_{M}$, $\\dot{E}_h(u;r^{\\mathrm{UI}})$, and $\\dot{E}_h(u;r^{\\mathrm{FI}})$.\nThe results are then collected and formatted as specified.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.special import roots_jacobi, eval_legendre\n\ndef get_gll_nodes(n):\n    \"\"\"\n    Computes the N+1 Gauss-Lobatto-Legendre nodes on [-1, 1].\n    \"\"\"\n    if n == 0:\n        return np.array([0.0])\n    if n == 1:\n        return np.array([-1.0, 1.0])\n    \n    # Interior nodes are roots of P_n'(x), which are roots of Jacobi P_{n-1}^{(1,1)}(x)\n    interior_nodes, _ = roots_jacobi(n - 1, 1, 1)\n    nodes = np.concatenate(([-1.0], np.sort(interior_nodes), [1.0]))\n    return nodes\n\ndef get_diff_matrix(n, nodes):\n    \"\"\"\n    Computes the (N+1)x(N+1) differentiation matrix D_ij = l'_j(x_i).\n    \"\"\"\n    D = np.zeros((n + 1, n + 1))\n    pn_vals_at_nodes = eval_legendre(n, nodes)\n    \n    for i in range(n + 1):\n        for j in range(n + 1):\n            if i == j:\n                if i == 0:\n                    D[i, j] = -n * (n + 1) / 4.0\n                elif i == n:\n                    D[i, j] = n * (n + 1) / 4.0\n                else:\n                    D[i, j] = 0.0\n            else:\n                D[i, j] = pn_vals_at_nodes[i] / (pn_vals_at_nodes[j] * (nodes[i] - nodes[j]))\n    return D\n\ndef lagrange_basis_poly(nodes, j):\n    \"\"\"\n    Returns a polynomial object for the j-th Lagrange basis function l_j(x).\n    \"\"\"\n    p = np.polynomial.Polynomial([1.0])\n    for k, node_k in enumerate(nodes):\n        if k == j:\n            continue\n        p = p * np.polynomial.Polynomial([-node_k, 1.0]) / (nodes[j] - node_k)\n    return p\n\ndef evaluate_basis_at_quad_points(nodes, quad_points):\n    \"\"\"\n    Evaluates all Lagrange basis functions and their derivatives at quadrature points.\n    Returns L, L_prime where L[q,j] = l_j(z_q) and L_prime[q,j] = l'_j(z_q).\n    \"\"\"\n    n_nodes = len(nodes)\n    n_quad = len(quad_points)\n    \n    L = np.zeros((n_quad, n_nodes))\n    L_prime = np.zeros((n_quad, n_nodes))\n    \n    for j in range(n_nodes):\n        lj = lagrange_basis_poly(nodes, j)\n        lj_prime = lj.deriv()\n        L[:, j] = lj(quad_points)\n        L_prime[:, j] = lj_prime(quad_points)\n        \n    return L, L_prime\n\ndef solve():\n    \"\"\"\n    Main function to solve the problem as specified.\n    \"\"\"\n    N = 6  # Polynomial degree\n    Q = 200 # Number of quadrature points for 'exact' integration\n\n    # 1. Setup SEM components\n    gll_nodes = get_gll_nodes(N)\n    diff_matrix_D = get_diff_matrix(N, gll_nodes)\n    \n    # 2. Setup high-order quadrature\n    gl_quad_points, gl_quad_weights = np.polynomial.legendre.leggauss(Q)\n    \n    # 3. Evaluate basis functions and derivatives at quadrature points\n    L_mat, L_prime_mat = evaluate_basis_at_quad_points(gll_nodes, gl_quad_points)\n    \n    # 4. Compute consistent mass matrix M using high-order quadrature\n    # M_ij = integral(l_i * l_j dx) ~ sum_q w_q * l_i(z_q) * l_j(z_q)\n    M = (L_mat.T * gl_quad_weights) @ L_mat\n\n    # 5. Define test cases\n    test_cases = {\n        'A': lambda x: np.sin(np.pi * x) + 0.5 * np.sin(2 * np.pi * x),\n        'B': lambda x: x**3 - x,\n        'C': lambda x: eval_legendre(N, x)\n    }\n    \n    results = []\n    \n    for case_id in ['A', 'B', 'C']:\n        # Get nodal values for the current test case\n        u_func = test_cases[case_id]\n        u_nodal = u_func(gll_nodes)\n        \n        # Flux at nodes\n        f_u_nodal = 0.5 * u_nodal**2\n        \n        # Compute under-integrated (collocation) residual\n        r_UI = diff_matrix_D @ f_u_nodal\n        \n        # Compute fully integrated (Galerkin) residual\n        # Reconstruct u_h and f(u_h) at quadrature points\n        u_h_at_quad = L_mat @ u_nodal\n        f_uh_at_quad = 0.5 * u_h_at_quad**2\n        \n        # Compute load vector g\n        # g_i = - integral( l'_i * f(u_h) dx ) ~ - sum_q w_q * l'_i(z_q) * f(u_h(z_q))\n        g = -L_prime_mat.T @ (gl_quad_weights * f_uh_at_quad)\n\n        # Solve M * r_FI = g\n        r_FI = np.linalg.solve(M, g)\n        \n        # --- Compute required quantities ---\n        \n        # Mass-weighted difference norm ||r_FI - r_UI||_M\n        r_diff = r_FI - r_UI\n        diff_norm_sq = r_diff.T @ M @ r_diff\n        diff_norm = np.sqrt(diff_norm_sq)\n        \n        # Under-integrated energy production rate\n        E_dot_UI = u_nodal.T @ M @ r_UI\n        \n        # Fully integrated energy production rate\n        E_dot_FI = u_nodal.T @ M @ r_FI\n        \n        results.extend([diff_norm, E_dot_UI, E_dot_FI])\n\n    # Format output to 10 decimal places as specified\n    formatted_results = [f\"{val:.10f}\" for val in results]\n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n```", "id": "2597924"}]}