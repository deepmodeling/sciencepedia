{"hands_on_practices": [{"introduction": "To effectively use wedge elements in structural analysis, we must first establish the fundamental relationship between nodal displacements and the continuous strain field within the element. This practice guides you through the derivation of the strain-displacement matrix, commonly known as the $B$-matrix, for a linear wedge element [@problem_id:2611736]. By mastering this process, you will gain a concrete understanding of how the abstract isoparametric formulation translates into the physical prediction of strain, a critical step for assembling the element stiffness matrix.", "problem": "Consider the isoparametric linear wedge (triangular prism) finite element used in three-dimensional (3D) small-strain elasticity within the Finite Element Method (FEM). Let the natural coordinates be $(\\xi,\\eta,\\zeta)$, where $(\\xi,\\eta)$ are the area (barycentric) coordinates on the reference triangle with $\\xi \\ge 0$, $\\eta \\ge 0$, $\\xi+\\eta \\le 1$, and $\\zeta \\in [-1,1]$ is the thickness coordinate. Define the linear wedge shape functions using the triangle area coordinates $L_1=\\xi$, $L_2=\\eta$, $L_3=1-\\xi-\\eta$ as\n$$\nN_1 = L_1 \\frac{1-\\zeta}{2},\\quad\nN_2 = L_2 \\frac{1-\\zeta}{2},\\quad\nN_3 = L_3 \\frac{1-\\zeta}{2},\\quad\nN_4 = L_1 \\frac{1+\\zeta}{2},\\quad\nN_5 = L_2 \\frac{1+\\zeta}{2},\\quad\nN_6 = L_3 \\frac{1+\\zeta}{2}.\n$$\nThe physical (Cartesian) node coordinates are given as\n- Node $1$: $(x_1,y_1,z_1)=(1,0,0)$,\n- Node $2$: $(x_2,y_2,z_2)=(0,1,0)$,\n- Node $3$: $(x_3,y_3,z_3)=(0,0,0)$,\n- Node $4$: $(x_4,y_4,z_4)=(1,0,1)$,\n- Node $5$: $(x_5,y_5,z_5)=(0,1,1)$,\n- Node $6$: $(x_6,y_6,z_6)=(0,0,1)$.\n\nTasks:\n1) Starting only from the above shape function definitions and the isoparametric mapping $x(\\xi,\\eta,\\zeta)=\\sum_{i=1}^{6} N_i x_i$, $y(\\xi,\\eta,\\zeta)=\\sum_{i=1}^{6} N_i y_i$, $z(\\xi,\\eta,\\zeta)=\\sum_{i=1}^{6} N_i z_i$, compute the natural-coordinate derivatives $\\partial N_i/\\partial \\xi$, $\\partial N_i/\\partial \\eta$, and $\\partial N_i/\\partial \\zeta$ for all $i \\in \\{1,\\dots,6\\}$.\n2) Using the definition of the small-strain tensor $\\boldsymbol{\\varepsilon}=\\tfrac{1}{2}(\\nabla \\mathbf{u}+(\\nabla \\mathbf{u})^{\\top})$ and the chain rule relating derivatives with respect to $(x,y,z)$ and $(\\xi,\\eta,\\zeta)$ via the Jacobian of the isoparametric map, assemble the element kinematic matrix $B(\\xi,\\eta,\\zeta)$ such that $\\boldsymbol{\\varepsilon} = B \\mathbf{d}$, where the nodal displacement vector is ordered as $\\mathbf{d}=[u_1 \\ v_1 \\ w_1 \\ u_2 \\ v_2 \\ w_2 \\ u_3 \\ v_3 \\ w_3 \\ u_4 \\ v_4 \\ w_4 \\ u_5 \\ v_5 \\ w_5 \\ u_6 \\ v_6 \\ w_6]^{\\top}$ and the engineering strain vector is ordered as $[\\varepsilon_{xx}\\ \\varepsilon_{yy}\\ \\varepsilon_{zz}\\ \\gamma_{xy}\\ \\gamma_{yz}\\ \\gamma_{zx}]^{\\top}$.\n\nProvide your final answer as the single compact analytic expression of the $6 \\times 18$ matrix $B(\\xi,\\eta,\\zeta)$ in terms of $\\xi$, $\\eta$, and $\\zeta$. No numerical rounding is required. Do not include units in the final answer.", "solution": "The problem statement is subjected to validation before a solution is attempted.\n\n**Step 1: Extraction of Givens**\n- Element Type: Isoparametric linear wedge (triangular prism) finite element.\n- Physics: $3$-dimensional small-strain elasticity.\n- Natural Coordinates: $(\\xi, \\eta, \\zeta)$, with $\\xi \\ge 0$, $\\eta \\ge 0$, $\\xi+\\eta \\le 1$, and $\\zeta \\in [-1,1]$.\n- Triangular Area Coordinates: $L_1=\\xi$, $L_2=\\eta$, $L_3=1-\\xi-\\eta$.\n- Shape Functions:\n$$\n\\begin{aligned}\nN_1 &= L_1 \\frac{1-\\zeta}{2} = \\xi \\frac{1-\\zeta}{2} \\\\\nN_2 &= L_2 \\frac{1-\\zeta}{2} = \\eta \\frac{1-\\zeta}{2} \\\\\nN_3 &= L_3 \\frac{1-\\zeta}{2} = (1 - \\xi - \\eta) \\frac{1-\\zeta}{2} \\\\\nN_4 &= L_1 \\frac{1+\\zeta}{2} = \\xi \\frac{1+\\zeta}{2} \\\\\nN_5 &= L_2 \\frac{1+\\zeta}{2} = \\eta \\frac{1+\\zeta}{2} \\\\\nN_6 &= L_3 \\frac{1+\\zeta}{2} = (1 - \\xi - \\eta) \\frac{1+\\zeta}{2}\n\\end{aligned}\n$$\n- Physical Node Coordinates:\n  - Node $1$: $(1,0,0)$\n  - Node $2$: $(0,1,0)$\n  - Node $3$: $(0,0,0)$\n  - Node $4$: $(1,0,1)$\n  - Node $5$: $(0,1,1)$\n  - Node $6$: $(0,0,1)$\n- Isoparametric Mapping: $x(\\xi,\\eta,\\zeta)=\\sum_{i=1}^{6} N_i x_i$, $y(\\xi,\\eta,\\zeta)=\\sum_{i=1}^{6} N_i y_i$, $z(\\xi,\\eta,\\zeta)=\\sum_{i=1}^{6} N_i z_i$.\n- Strain Definition: Small-strain tensor $\\boldsymbol{\\varepsilon}=\\tfrac{1}{2}(\\nabla \\mathbf{u}+(\\nabla \\mathbf{u})^{\\top})$.\n- Required Relation: $\\boldsymbol{\\varepsilon} = B \\mathbf{d}$, where $\\mathbf{d}$ is the nodal displacement vector $[u_1, v_1, w_1, \\dots, u_6, v_6, w_6]^{\\top}$ and $\\boldsymbol{\\varepsilon}$ is the engineering strain vector $[\\varepsilon_{xx}, \\varepsilon_{yy}, \\varepsilon_{zz}, \\gamma_{xy}, \\gamma_{yz}, \\gamma_{zx}]^{\\top}$.\n\n**Step 2: Validation**\nThe problem is scientifically grounded, well-posed, and objective. It presents a standard, canonical problem in the theory of the Finite Element Method. All definitions, data, and conditions are standard, complete, and consistent. The specified nodal coordinates define a non-degenerate element geometry, ensuring the existence of a unique, stable, and meaningful solution. The problem does not violate any of the invalidity criteria.\n\n**Step 3: Verdict**\nThe problem is **valid**. A solution will be derived.\n\n**Solution Derivation**\n\nThe engineering strain vector $\\boldsymbol{\\varepsilon}$ is defined in terms of the spatial derivatives of the displacement field $\\mathbf{u} = (u,v,w)$:\n$$\n\\boldsymbol{\\varepsilon} = \\begin{pmatrix} \\varepsilon_{xx} \\\\ \\varepsilon_{yy} \\\\ \\varepsilon_{zz} \\\\ \\gamma_{xy} \\\\ \\gamma_{yz} \\\\ \\gamma_{zx} \\end{pmatrix} = \\begin{pmatrix} \\frac{\\partial u}{\\partial x} \\\\ \\frac{\\partial v}{\\partial y} \\\\ \\frac{\\partial w}{\\partial z} \\\\ \\frac{\\partial u}{\\partial y} + \\frac{\\partial v}{\\partial x} \\\\ \\frac{\\partial v}{\\partial z} + \\frac{\\partial w}{\\partial y} \\\\ \\frac{\\partial w}{\\partial x} + \\frac{\\partial u}{\\partial z} \\end{pmatrix}\n$$\nThe displacement field is interpolated from the nodal displacements $\\mathbf{d}$ using the shape functions $N_i$:\n$$\nu = \\sum_{i=1}^{6} N_i u_i, \\quad v = \\sum_{i=1}^{6} N_i v_i, \\quad w = \\sum_{i=1}^{6} N_i w_i\n$$\nSubstituting these into the strain definition yields the relation $\\boldsymbol{\\varepsilon} = B \\mathbf{d}$, where $B$ is the $6 \\times 18$ strain-displacement matrix. The matrix $B$ is constructed by partitioning it into $6$ blocks, $B = [B_1, B_2, B_3, B_4, B_5, B_6]$, where each $B_i$ is a $6 \\times 3$ matrix associated with node $i$:\n$$\nB_i = \\begin{pmatrix}\n\\frac{\\partial N_i}{\\partial x} & 0 & 0 \\\\\n0 & \\frac{\\partial N_i}{\\partial y} & 0 \\\\\n0 & 0 & \\frac{\\partial N_i}{\\partial z} \\\\\n\\frac{\\partial N_i}{\\partial y} & \\frac{\\partial N_i}{\\partial x} & 0 \\\\\n0 & \\frac{\\partial N_i}{\\partial z} & \\frac{\\partial N_i}{\\partial y} \\\\\n\\frac{\\partial N_i}{\\partial z} & 0 & \\frac{\\partial N_i}{\\partial x}\n\\end{pmatrix}\n$$\nTo construct $B_i$, we require the derivatives of the shape functions with respect to the physical coordinates $(x,y,z)$. These are obtained from the derivatives with respect to the natural coordinates $(\\xi, \\eta, \\zeta)$ via the chain rule:\n$$\n\\begin{pmatrix} \\frac{\\partial N_i}{\\partial \\xi} \\\\ \\frac{\\partial N_i}{\\partial \\eta} \\\\ \\frac{\\partial N_i}{\\partial \\zeta} \\end{pmatrix} = \\begin{pmatrix} \\frac{\\partial x}{\\partial \\xi} & \\frac{\\partial y}{\\partial \\xi} & \\frac{\\partial z}{\\partial \\xi} \\\\ \\frac{\\partial x}{\\partial \\eta} & \\frac{\\partial y}{\\partial \\eta} & \\frac{\\partial z}{\\partial \\eta} \\\\ \\frac{\\partial x}{\\partial \\zeta} & \\frac{\\partial y}{\\partial \\zeta} & \\frac{\\partial z}{\\partial \\zeta} \\end{pmatrix} \\begin{pmatrix} \\frac{\\partial N_i}{\\partial x} \\\\ \\frac{\\partial N_i}{\\partial y} \\\\ \\frac{\\partial N_i}{\\partial z} \\end{pmatrix} = J \\begin{pmatrix} \\frac{\\partial N_i}{\\partial x} \\\\ \\frac{\\partial N_i}{\\partial y} \\\\ \\frac{\\partial N_i}{\\partial z} \\end{pmatrix}\n$$\nwhere $J$ is the Jacobian matrix of the isoparametric mapping. The required physical derivatives are then given by:\n$$\n\\begin{pmatrix} \\frac{\\partial N_i}{\\partial x} \\\\ \\frac{\\partial N_i}{\\partial y} \\\\ \\frac{\\partial N_i}{\\partial z} \\end{pmatrix} = J^{-1} \\begin{pmatrix} \\frac{\\partial N_i}{\\partial \\xi} \\\\ \\frac{\\partial N_i}{\\partial \\eta} \\\\ \\frac{\\partial N_i}{\\partial \\zeta} \\end{pmatrix}\n$$\nFirst, we compute the derivatives of the shape functions with respect to natural coordinates:\n$$\n\\begin{array}{lll}\n\\frac{\\partial N_1}{\\partial \\xi}=\\frac{1-\\zeta}{2} & \\frac{\\partial N_1}{\\partial \\eta}=0 & \\frac{\\partial N_1}{\\partial \\zeta}=-\\frac{\\xi}{2} \\\\\n\\frac{\\partial N_2}{\\partial \\xi}=0 & \\frac{\\partial N_2}{\\partial \\eta}=\\frac{1-\\zeta}{2} & \\frac{\\partial N_2}{\\partial \\zeta}=-\\frac{\\eta}{2} \\\\\n\\frac{\\partial N_3}{\\partial \\xi}=-\\frac{1-\\zeta}{2} & \\frac{\\partial N_3}{\\partial \\eta}=-\\frac{1-\\zeta}{2} & \\frac{\\partial N_3}{\\partial \\zeta}=-\\frac{1-\\xi-\\eta}{2} \\\\\n\\frac{\\partial N_4}{\\partial \\xi}=\\frac{1+\\zeta}{2} & \\frac{\\partial N_4}{\\partial \\eta}=0 & \\frac{\\partial N_4}{\\partial \\zeta}=\\frac{\\xi}{2} \\\\\n\\frac{\\partial N_5}{\\partial \\xi}=0 & \\frac{\\partial N_5}{\\partial \\eta}=\\frac{1+\\zeta}{2} & \\frac{\\partial N_5}{\\partial \\zeta}=\\frac{\\eta}{2} \\\\\n\\frac{\\partial N_6}{\\partial \\xi}=-\\frac{1+\\zeta}{2} & \\frac{\\partial N_6}{\\partial \\eta}=-\\frac{1+\\zeta}{2} & \\frac{\\partial N_6}{\\partial \\zeta}=\\frac{1-\\xi-\\eta}{2}\n\\end{array}\n$$\nNext, we compute the Jacobian matrix $J$. The components are $J_{kl} = \\frac{\\partial x_k}{\\partial \\xi_l} = \\sum_{i=1}^{6} \\frac{\\partial N_i}{\\partial \\xi_l} x_{i,k}$, where $(x_1, x_2, x_3)=(x,y,z)$ and $(\\xi_1, \\xi_2, \\xi_3)=(\\xi,\\eta,\\zeta)$.\nFor this specific geometry, the mapping is:\n$x = \\sum N_i x_i = N_1(1) + N_4(1) = \\xi\\frac{1-\\zeta}{2} + \\xi\\frac{1+\\zeta}{2} = \\xi$\n$y = \\sum N_i y_i = N_2(1) + N_5(1) = \\eta\\frac{1-\\zeta}{2} + \\eta\\frac{1+\\zeta}{2} = \\eta$\n$z = \\sum N_i z_i = N_4(1) + N_5(1) + N_6(1) = (\\xi+\\eta+1-\\xi-\\eta)\\frac{1+\\zeta}{2} = \\frac{1+\\zeta}{2}$\nThe Jacobian matrix is therefore:\n$$\nJ = \\begin{pmatrix} \\frac{\\partial x}{\\partial \\xi} & \\frac{\\partial y}{\\partial \\xi} & \\frac{\\partial z}{\\partial \\xi} \\\\ \\frac{\\partial x}{\\partial \\eta} & \\frac{\\partial y}{\\partial \\eta} & \\frac{\\partial z}{\\partial \\eta} \\\\ \\frac{\\partial x}{\\partial \\zeta} & \\frac{\\partial y}{\\partial \\zeta} & \\frac{\\partial z}{\\partial \\zeta} \\end{pmatrix} = \\begin{pmatrix} 1 & 0 & 0 \\\\ 0 & 1 & 0 \\\\ 0 & 0 & \\frac{1}{2} \\end{pmatrix}\n$$\nThe inverse Jacobian is:\n$$\nJ^{-1} = \\begin{pmatrix} 1 & 0 & 0 \\\\ 0 & 1 & 0 \\\\ 0 & 0 & 2 \\end{pmatrix}\n$$\nNow we find the physical derivatives of $N_i$:\n$\\frac{\\partial N_i}{\\partial x} = \\frac{\\partial N_i}{\\partial \\xi}$, $\\frac{\\partial N_i}{\\partial y} = \\frac{\\partial N_i}{\\partial \\eta}$, and $\\frac{\\partial N_i}{\\partial z} = 2\\frac{\\partial N_i}{\\partial \\zeta}$.\n$$\n\\begin{array}{lll}\n\\frac{\\partial N_1}{\\partial x}=\\frac{1-\\zeta}{2} & \\frac{\\partial N_1}{\\partial y}=0 & \\frac{\\partial N_1}{\\partial z}=-\\xi \\\\\n\\frac{\\partial N_2}{\\partial x}=0 & \\frac{\\partial N_2}{\\partial y}=\\frac{1-\\zeta}{2} & \\frac{\\partial N_2}{\\partial z}=-\\eta \\\\\n\\frac{\\partial N_3}{\\partial x}=-\\frac{1-\\zeta}{2} & \\frac{\\partial N_3}{\\partial y}=-\\frac{1-\\zeta}{2} & \\frac{\\partial N_3}{\\partial z}=-(1-\\xi-\\eta) \\\\\n\\frac{\\partial N_4}{\\partial x}=\\frac{1+\\zeta}{2} & \\frac{\\partial N_4}{\\partial y}=0 & \\frac{\\partial N_4}{\\partial z}=\\xi \\\\\n\\frac{\\partial N_5}{\\partial x}=0 & \\frac{\\partial N_5}{\\partial y}=\\frac{1+\\zeta}{2} & \\frac{\\partial N_5}{\\partial z}=\\eta \\\\\n\\frac{\\partial N_6}{\\partial x}=-\\frac{1+\\zeta}{2} & \\frac{\\partial N_6}{\\partial y}=-\\frac{1+\\zeta}{2} & \\frac{\\partial N_6}{\\partial z}=1-\\xi-\\eta\n\\end{array}\n$$\nFinally, we assemble the $B$ matrix. The columns are grouped by node number $(1 \\dots 6)$, with each node having three columns for its $(u,v,w)$ displacements.\n$$\nB(\\xi,\\eta,\\zeta) = [B_1 \\ B_2 \\ B_3 \\ B_4 \\ B_5 \\ B_6]\n$$\nSubstituting the derivatives yields the final expression for the $B$ matrix.", "answer": "$$\n\\boxed{\n\\begin{pmatrix}\n\\frac{1-\\zeta}{2} & 0 & 0 & 0 & 0 & 0 & -\\frac{1-\\zeta}{2} & 0 & 0 & \\frac{1+\\zeta}{2} & 0 & 0 & 0 & 0 & 0 & -\\frac{1+\\zeta}{2} & 0 & 0 \\\\\n0 & 0 & 0 & 0 & \\frac{1-\\zeta}{2} & 0 & 0 & -\\frac{1-\\zeta}{2} & 0 & 0 & 0 & 0 & 0 & \\frac{1+\\zeta}{2} & 0 & 0 & -\\frac{1+\\zeta}{2} & 0 \\\\\n0 & 0 & -\\xi & 0 & 0 & -\\eta & 0 & 0 & - (1-\\xi-\\eta) & 0 & 0 & \\xi & 0 & 0 & \\eta & 0 & 0 & 1-\\xi-\\eta \\\\\n0 & \\frac{1-\\zeta}{2} & 0 & \\frac{1-\\zeta}{2} & 0 & 0 & -\\frac{1-\\zeta}{2} & -\\frac{1-\\zeta}{2} & 0 & 0 & \\frac{1+\\zeta}{2} & 0 & \\frac{1+\\zeta}{2} & 0 & 0 & -\\frac{1+\\zeta}{2} & -\\frac{1+\\zeta}{2} & 0 \\\\\n0 & -\\xi & 0 & 0 & -\\eta & \\frac{1-\\zeta}{2} & 0 & - (1-\\xi-\\eta) & -\\frac{1-\\zeta}{2} & 0 & \\xi & 0 & 0 & \\eta & \\frac{1+\\zeta}{2} & 0 & 1-\\xi-\\eta & -\\frac{1+\\zeta}{2} \\\\\n-\\xi & 0 & \\frac{1-\\zeta}{2} & -\\eta & 0 & 0 & - (1-\\xi-\\eta) & 0 & -\\frac{1-\\zeta}{2} & \\xi & 0 & \\frac{1+\\zeta}{2} & \\eta & 0 & 0 & 1-\\xi-\\eta & 0 & -\\frac{1+\\zeta}{2}\n\\end{pmatrix}\n}\n$$", "id": "2611736"}, {"introduction": "The formulation of element matrices, such as the stiffness or mass matrix, involves integrating polynomial functions over the element's volume. Since analytic integration is often impractical, we rely on numerical quadrature. This exercise delves into the theoretical underpinnings of constructing an accurate quadrature rule for a wedge element by combining rules for a triangle and a line segment [@problem_id:2611747]. Understanding how the exactness of the constituent rules dictates the overall accuracy for trivariate polynomials is crucial for implementing a robust and reliable finite element code.", "problem": "Consider the reference wedge (triangular prism) element with coordinates $(\\xi,\\eta,\\zeta)$, where $(\\xi,\\eta)$ lies in the unit reference triangle $T := \\{(\\xi,\\eta)\\in\\mathbb{R}^{2} \\mid \\xi \\ge 0,\\ \\eta \\ge 0,\\ \\xi+\\eta \\le 1\\}$ and $\\zeta \\in [-1,1]$. Let $\\int_{T} \\int_{-1}^{1} f(\\xi,\\eta,\\zeta)\\,\\mathrm{d}\\zeta\\,\\mathrm{d}A$ denote the integral of a sufficiently smooth function $f$ over the wedge, where $\\mathrm{d}A$ is the area measure on $T$.\n\nAssume you are given:\n- A triangle quadrature rule on $T$ with nodes $\\{(\\xi_{i},\\eta_{i})\\}_{i=1}^{N_{T}}$ and positive weights $\\{w^{T}_{i}\\}_{i=1}^{N_{T}}$ that is exact for all bivariate polynomials in $(\\xi,\\eta)$ of total degree at most $p$, meaning $\\sum_{i=1}^{N_{T}} w^{T}_{i}\\,g(\\xi_{i},\\eta_{i}) = \\int_{T} g(\\xi,\\eta)\\,\\mathrm{d}A$ for every polynomial $g(\\xi,\\eta)$ with total degree $\\le p$.\n- A Gauss–Legendre (GL) quadrature rule on $[-1,1]$ with nodes $\\{\\zeta_{j}\\}_{j=1}^{N_{Z}}$ and positive weights $\\{w^{Z}_{j}\\}_{j=1}^{N_{Z}}$ that is exact for all univariate polynomials in $\\zeta$ of degree at most $q$, meaning $\\sum_{j=1}^{N_{Z}} w^{Z}_{j}\\,h(\\zeta_{j}) = \\int_{-1}^{1} h(\\zeta)\\,\\mathrm{d}\\zeta$ for every polynomial $h(\\zeta)$ with degree $\\le q$.\n\nYou wish to construct a tensor-product quadrature rule on the wedge by combining these two rules:\n- Nodes $\\{(\\xi_{i},\\eta_{i},\\zeta_{j})\\}_{i=1,\\dots,N_{T}}^{j=1,\\dots,N_{Z}}$,\n- Weights $\\{w^{T}_{i}\\,w^{Z}_{j}\\}_{i=1,\\dots,N_{T}}^{j=1,\\dots,N_{Z}}$.\n\nStarting from the definitions of quadrature exactness and using polynomial factorization properties, derive the condition under which this tensor-product rule is exact for monomials of the form $\\xi^{a}\\eta^{b}\\zeta^{c}$, and then obtain the largest total degree $d$ such that every polynomial in $(\\xi,\\eta,\\zeta)$ of total degree at most $d$ is integrated exactly by the tensor-product rule. Your derivation must explicitly justify both sufficiency and necessity of your condition based on the given exactness properties in $(\\xi,\\eta)$ and in $\\zeta$.\n\nState your final answer as a single closed-form expression in terms of $p$ and $q$, representing the largest total polynomial degree $d$ for which the tensor-product rule is exact on the wedge. No numerical evaluation is required. Express only the degree $d$ as your final answer.", "solution": "The problem as stated is scientifically sound, mathematically well-posed, objective, and self-contained. It presents a standard question in the theory of numerical integration for the finite element method. We shall proceed with its formal resolution.\n\nThe problem asks for the maximum total degree $d$ such that a tensor-product quadrature rule is exact for all trivariate polynomials of total degree at most $d$ on a reference wedge element. The integral of a function $f(\\xi, \\eta, \\zeta)$ over the reference wedge is given by\n$$I(f) = \\int_{T} \\int_{-1}^{1} f(\\xi,\\eta,\\zeta)\\,\\mathrm{d}\\zeta\\,\\mathrm{d}A$$\nwhere $T = \\{(\\xi,\\eta)\\in\\mathbb{R}^{2} \\mid \\xi \\ge 0,\\ \\eta \\ge 0,\\ \\xi+\\eta \\le 1\\}$ is the unit reference triangle and $\\mathrm{d}A$ is its area measure.\n\nThe quadrature rule is constructed as a tensor product of a triangle rule and a one-dimensional Gauss-Legendre rule. The approximation of the integral is given by the sum:\n$$Q(f) = \\sum_{i=1}^{N_{T}} \\sum_{j=1}^{N_{Z}} w^{T}_{i}\\,w^{Z}_{j}\\, f(\\xi_{i},\\eta_{i},\\zeta_{j})$$\nwhere $\\{(\\xi_{i},\\eta_{i}), w^{T}_{i}\\}$ are the nodes and weights of the triangle rule and $\\{\\zeta_{j}, w^{Z}_{j}\\}$ are the nodes and weights of the Gauss-Legendre rule.\n\nA quadrature rule is exact for a space of polynomials if it integrates every basis function of that space exactly. Due to the linearity of both the integral and the quadrature sum, it is sufficient to analyze the exactness for the monomial basis functions, $f(\\xi,\\eta,\\zeta) = \\xi^{a}\\eta^{b}\\zeta^{c}$, where $a$, $b$, and $c$ are non-negative integers.\n\nLet us first compute the exact integral of such a monomial. Because the domain of integration is a product of domains in $(\\xi, \\eta)$ and $\\zeta$, and the integrand is a separable function $\\xi^{a}\\eta^{b}\\zeta^{c} = (\\xi^{a}\\eta^{b})(\\zeta^{c})$, we can separate the integral using Fubini's theorem:\n$$I(\\xi^{a}\\eta^{b}\\zeta^{c}) = \\int_{T} \\int_{-1}^{1} (\\xi^{a}\\eta^{b})(\\zeta^{c})\\,\\mathrm{d}\\zeta\\,\\mathrm{d}A = \\left(\\int_{T} \\xi^{a}\\eta^{b}\\,\\mathrm{d}A\\right) \\left(\\int_{-1}^{1} \\zeta^{c}\\,\\mathrm{d}\\zeta\\right)$$\n\nNext, let us compute the quadrature sum for this monomial:\n$$Q(\\xi^{a}\\eta^{b}\\zeta^{c}) = \\sum_{i=1}^{N_{T}} \\sum_{j=1}^{N_{Z}} w^{T}_{i}\\,w^{Z}_{j}\\, \\xi_{i}^{a}\\eta_{i}^{b}\\zeta_{j}^{c}$$\nThe sum can be rearranged and factored due to the tensor-product structure:\n$$Q(\\xi^{a}\\eta^{b}\\zeta^{c}) = \\left(\\sum_{i=1}^{N_{T}} w^{T}_{i} \\, \\xi_{i}^{a}\\eta_{i}^{b}\\right) \\left(\\sum_{j=1}^{N_{Z}} w^{Z}_{j} \\, \\zeta_{j}^{c}\\right)$$\n\nThe quadrature rule is exact for the monomial $\\xi^{a}\\eta^{b}\\zeta^{c}$ if and only if $I(\\xi^{a}\\eta^{b}\\zeta^{c}) = Q(\\xi^{a}\\eta^{b}\\zeta^{c})$. This equality holds if the factors of the integral expression match the factors of the sum expression:\n$$\n\\begin{align*}\n\\int_{T} \\xi^{a}\\eta^{b}\\,\\mathrm{d}A &= \\sum_{i=1}^{N_{T}} w^{T}_{i} \\, \\xi_{i}^{a}\\eta_{i}^{b} \\quad \\text{(Condition 1)} \\\\\n\\int_{-1}^{1} \\zeta^{c}\\,\\mathrm{d}\\zeta &= \\sum_{j=1}^{N_{Z}} w^{Z}_{j} \\, \\zeta_{j}^{c} \\quad \\text{(Condition 2)}\n\\end{align*}\n$$\nWe are given the exactness properties of the constituent rules.\nThe triangle rule is exact for all bivariate polynomials in $(\\xi, \\eta)$ of total degree at most $p$. The function $g(\\xi, \\eta) = \\xi^{a}\\eta^{b}$ is a polynomial of total degree $a+b$. Thus, Condition $1$ is satisfied if $a+b \\le p$.\nThe Gauss-Legendre rule is exact for all univariate polynomials in $\\zeta$ of degree at most $q$. The function $h(\\zeta) = \\zeta^{c}$ is a polynomial of degree $c$. Thus, Condition $2$ is satisfied if $c \\le q$.\n\nTherefore, the tensor-product rule is exact for the monomial $\\xi^{a}\\eta^{b}\\zeta^{c}$ if and only if $a+b \\le p$ and $c \\le q$. This establishes the necessary and sufficient condition for the exactness of a single monomial. The necessity follows from the fact that if, for example, $a+b > p$, one can generally find a monomial $\\xi^a \\eta^b$ for which the triangle rule fails. Setting $c=0$ (for which the GL rule is always exact), the tensor-product rule would fail for $\\xi^a \\eta^b \\zeta^0$. A similar argument holds if $c > q$.\n\nNow, we must find the largest integer $d$ such that the rule is exact for *every* polynomial of total degree at most $d$. This means the rule must be exact for all monomials $\\xi^{a}\\eta^{b}\\zeta^{c}$ such that their total degree $a+b+c \\le d$.\nThis requires that for any choice of non-negative integers $a, b, c$ satisfying $a+b+c \\le d$, the conditions $a+b \\le p$ and $c \\le q$ must hold.\n\nLet us analyze these constraints. For any monomial $\\xi^a\\eta^b\\zeta^c$ with total degree $k = a+b+c$, we have:\n1. $a+b = k-c$. Since $c \\ge 0$, we have $a+b \\le k$.\n2. $c = k-(a+b)$. Since $a,b \\ge 0$, we have $a+b \\ge 0$, so $c \\le k$.\n\nFor the rule to be exact for all monomials of total degree up to $d$, the conditions $a+b \\le p$ and $c \\le q$ must hold for any $a,b,c$ with $a+b+c \\le d$.\nLet us consider a monomial of total degree $k \\le d$.\nThe maximum possible value for the total degree in the planar variables, $a+b$, occurs when $c=0$, giving $a+b=k$. To satisfy $a+b \\le p$ for all possible distributions of exponents, we must have $k \\le p$.\nThe maximum possible value for the degree in the axial variable, $c$, occurs when $a=b=0$, giving $c=k$. To satisfy $c \\le q$ for all possible distributions of exponents, we must have $k \\le q$.\n\nThus, for any monomial of total degree $k$ to be integrated exactly, regardless of the distribution of powers, we must have $k \\le p$ and $k \\le q$. This is equivalent to $k \\le \\min(p, q)$.\nSince this must hold for any monomial with total degree up to $d$, it must hold for $k=d$. This implies that we must have $d \\le \\min(p, q)$.\n\nTo prove that $d = \\min(p, q)$ is the largest such integer, we perform two checks.\n\nSufficiency: Assume $d = \\min(p, q)$. Let $\\xi^{a}\\eta^{b}\\zeta^{c}$ be any monomial with total degree $a+b+c \\le d$.\nWe need to show that $a+b \\le p$ and $c \\le q$.\nFrom $a+b+c \\le d$, we have $a+b \\le d$ (since $c \\ge 0$). As $d = \\min(p, q) \\le p$, it follows that $a+b \\le p$.\nSimilarly, from $a+b+c \\le d$, we have $c \\le d$ (since $a,b \\ge 0$). As $d = \\min(p, q) \\le q$, it follows that $c \\le q$.\nBoth conditions are satisfied for any such monomial, so the rule is exact for all polynomials of total degree up to $d = \\min(p, q)$.\n\nNecessity: We must show that if $d > \\min(p, q)$, there exists at least one monomial of total degree $d$ for which the rule is not exact. Let $d = \\min(p, q) + 1$.\nCase 1: $p \\le q$. Then $\\min(p, q) = p$ and $d = p+1$. Consider the monomial $\\xi^{p+1}\\eta^{0}\\zeta^{0} = \\xi^{p+1}$. Its total degree is $a+b+c = (p+1)+0+0 = p+1 = d$. For this monomial, the total degree in the planar variables is $a+b = p+1$, which is greater than $p$. The triangle rule is not guaranteed to be exact for this polynomial, and in general is not. Therefore, the tensor-product rule will not be exact for this monomial.\nCase 2: $q < p$. Then $\\min(p, q) = q$ and $d = q+1$. Consider the monomial $\\xi^{0}\\eta^{0}\\zeta^{q+1} = \\zeta^{q+1}$. Its total degree is $a+b+c = 0+0+(q+1) = q+1 = d$. For this monomial, the degree in the axial variable is $c=q+1$, which is greater than $q$. The Gauss-Legendre rule is not exact for this polynomial. Therefore, the tensor-product rule will not be exact.\n\nIn both cases, if the total degree $d$ exceeds $\\min(p, q)$, we can construct a monomial of degree $d$ that is not integrated exactly.\nTherefore, the largest total degree $d$ for which every polynomial of total degree at most $d$ is integrated exactly is $\\min(p, q)$.", "answer": "$$\n\\boxed{\\min(p, q)}\n$$", "id": "2611747"}, {"introduction": "This practice brings together theory and computation by tasking you with implementing a routine to assemble the consistent mass matrix for a linear wedge element using numerical quadrature [@problem_id:2611725]. Beyond simply writing the code, you will perform a numerical sensitivity analysis to investigate how the matrix's eigenvalues—which govern the element's dynamic behavior—are affected by its geometric aspect ratio. This capstone exercise not only reinforces the entire element formulation process but also provides deep insight into the practical aspects of element performance and scaling laws in computational dynamics.", "problem": "Consider the linear wedge (triangular prism) element in the Finite Element Method (FEM). Let the natural coordinates be $(\\xi,\\eta,\\zeta)$ with $(\\xi,\\eta)$ on the reference triangle defined by $\\xi \\ge 0$, $\\eta \\ge 0$, $\\xi+\\eta \\le 1$, and $\\zeta \\in [-1,1]$. The linear wedge has $6$ nodes, indexed as bottom face nodes $1,2,3$ at $\\zeta=-1$ and top face nodes $4,5,6$ at $\\zeta=+1$. The shape functions are defined by the standard linear triangle barycentric coordinates $L_1=1-\\xi-\\eta$, $L_2=\\xi$, $L_3=\\eta$, combined with linear functions in $\\zeta$:\n$$\nN_1 = L_1 \\frac{1-\\zeta}{2},\\quad\nN_2 = L_2 \\frac{1-\\zeta}{2},\\quad\nN_3 = L_3 \\frac{1-\\zeta}{2},\\quad\nN_4 = L_1 \\frac{1+\\zeta}{2},\\quad\nN_5 = L_2 \\frac{1+\\zeta}{2},\\quad\nN_6 = L_3 \\frac{1+\\zeta}{2}.\n$$\nConsider a prismatic physical mapping in which the bottom triangular face lies in the plane $z=0$ with nodes\n$$\n\\mathbf{x}_1=(0,0,0),\\quad \\mathbf{x}_2=(s,0,0),\\quad \\mathbf{x}_3=(0,s,0),\n$$\nand the top triangular face lies in the plane $z=h$ with nodes\n$$\n\\mathbf{x}_4=(0,0,h),\\quad \\mathbf{x}_5=(s,0,h),\\quad \\mathbf{x}_6=(0,s,h),\n$$\nwhere $s>0$ is a base scale for the triangular face and $h>0$ is the wedge length in the $\\zeta$-direction. Let the material density be constant with value $\\rho=1$ (dimensionless). The consistent mass matrix $M \\in \\mathbb{R}^{6 \\times 6}$ is defined by\n$$\nM = \\int_{V} \\rho\\, \\mathbf{N}^T \\mathbf{N}\\, dV,\n$$\nwhere $\\mathbf{N} = [N_1,\\dots,N_6]$ and $V$ is the physical wedge volume mapped from the reference domain via the isoparametric rule $\\mathbf{x}(\\xi,\\eta,\\zeta)=\\sum_{a=1}^6 N_a(\\xi,\\eta,\\zeta)\\mathbf{x}_a$.\n\nTask: From the above fundamental definitions and domain mapping, derive and implement a numerically exact algorithm (for polynomials up to degree $2$ in $(\\xi,\\eta)$ and degree $2$ in $\\zeta$) to assemble $M$ using separable Gaussian Quadrature (GQ): a triangle rule in $(\\xi,\\eta)$ of degree at least $2$ and a one-dimensional Gauss-Legendre rule in $\\zeta$ of degree at least $3$. Compute the eigenvalues of $M$ and analyze their sensitivity to the aspect ratio defined by\n$$\n\\mathrm{AR} = \\frac{h}{s}.\n$$\nUse the following facts as a starting point for your derivation:\n- The Jacobian determinant $|\\!J|$ for the above prismatic mapping is constant over the element and equal to the product of the base area and the height, namely $|\\!J| = A\\,h$, where $A$ is the physical area of the base triangle.\n- For the specified right triangle base with vertices $(0,0)$, $(s,0)$, $(0,s)$, the area is $A = \\frac{s^2}{2}$.\n\nYour program must implement the assembly of $M$ by quadrature, compute its eigenvalues, and then evaluate the following test suite. All quantities are dimensionless. Angles do not appear. The final program output must be a single line containing a comma-separated Python list with one floating-point number per test case, in the order listed below.\n\nTest Suite:\n- Test case $1$ (normalized eigenvalue invariance across aspect ratios at fixed base scale): Set $s=1$ and compute the normalized eigenvalues $\\lambda_i / (A h)$ for $\\mathrm{AR}=0.5$ and for $\\mathrm{AR}=3.0$ (i.e., $h=\\mathrm{AR}\\cdot s$). Sort each eigenvalue set in ascending order and return the maximum absolute difference between the two normalized spectra. The expected result is a small float near $0$.\n- Test case $2$ (logarithmic sensitivity at fixed base scale): With $s=1$, evaluate the largest eigenvalue $\\lambda_{\\max}$ at $\\mathrm{AR}_0=1.2$ using a symmetric perturbation $\\delta=10^{-4}$ to approximate the logarithmic derivative\n$$\nS_{\\mathrm{fixed}\\,s} \\approx \\frac{\\ln \\lambda_{\\max}(\\mathrm{AR}_0+\\delta)-\\ln \\lambda_{\\max}(\\mathrm{AR}_0-\\delta)}{\\ln(\\mathrm{AR}_0+\\delta)-\\ln(\\mathrm{AR}_0-\\delta)}.\n$$\nReturn this single float. The expected value is close to $1$.\n- Test case $3$ (logarithmic sensitivity at fixed volume): Impose a fixed volume $V_0=1$ and $\\mathrm{AR}_0=1.2$ with the same symmetric perturbation $\\delta=10^{-4}$. For each perturbed aspect ratio $\\mathrm{AR}$, choose $s=(2 V_0 / \\mathrm{AR})^{1/3}$ and $h=\\mathrm{AR}\\cdot s$ so that $A h = V_0$ holds exactly. Compute\n$$\nS_{\\mathrm{fixed}\\,V} \\approx \\frac{\\ln \\lambda_{\\max}(\\mathrm{AR}_0+\\delta)-\\ln \\lambda_{\\max}(\\mathrm{AR}_0-\\delta)}{\\ln(\\mathrm{AR}_0+\\delta)-\\ln(\\mathrm{AR}_0-\\delta)}.\n$$\nReturn this single float. The expected value is close to $0$.\n- Test case $4$ (near-degenerate geometric scaling check): Compare normalized eigenvalues at $(s,\\mathrm{AR})=(1,1)$ and at $(s,\\mathrm{AR})=(10^{-3},10^{3})$. For each case, compute the normalized spectrum $\\lambda_i/(A h)$, sort ascending, and return the Euclidean norm of the difference between the two normalized spectra. The expected result is a small float near $0$.\n\nYour program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets (for example, $[x_1,x_2,x_3,x_4]$). Each $x_k$ must be a floating-point number corresponding to test case $k$ in the order given above.", "solution": "The problem statement has been validated and is deemed sound. It is scientifically grounded, well-posed, and objective. It presents a standard problem in the Finite Element Method with clear definitions and constraints, allowing for a unique and verifiable solution.\n\nThe task is to compute the consistent mass matrix $\\mathbf{M}$ for a linear wedge element and analyze its eigenvalues. The mass matrix is defined by the integral:\n$$\nM_{ab} = \\int_{V} \\rho N_a N_b dV\n$$\nwhere $a, b \\in \\{1, \\dots, 6\\}$ are node indices, $\\mathbf{N} = [N_1, \\dots, N_6]$ is the vector of shape functions, $V$ is the physical volume of the element, and the density $\\rho$ is given as $1$.\n\nThe isoparametric mapping transforms this integral from the physical domain to the reference domain $(\\xi, \\eta, \\zeta)$, where $(\\xi, \\eta)$ are coordinates on the reference triangle and $\\zeta \\in [-1, 1]$. The volume element transforms as $dV = |\\!J| d\\xi d\\eta d\\zeta$, where $|\\!J|$ is the determinant of the Jacobian matrix of the mapping. The problem states that for this specific prismatic mapping, $|\\!J|$ is constant and equal to $A h = \\frac{s^2 h}{2}$. The integral for the mass matrix becomes:\n$$\nM_{ab} = \\frac{s^2 h}{2} \\int_{-1}^{1} \\int_{A_{\\text{ref}}} N_a(\\xi, \\eta, \\zeta) N_b(\\xi, \\eta, \\zeta) \\,d\\xi d\\eta \\,d\\zeta\n$$\nwhere $A_{\\text{ref}}$ is the area of the reference triangle, which is $\\frac{1}{2}$.\n\nThe integrand, $N_a N_b$, is a product of shape functions. The shape functions are defined as $N_i = L_k \\frac{1 \\pm \\zeta}{2}$, where $L_k$ are the linear barycentric coordinates on the triangle. Specifically, $L_1 = 1-\\xi-\\eta$, $L_2 = \\xi$, and $L_3 = \\eta$. Consequently, the term $N_a N_b$ is a polynomial of at most degree $2$ in the triangle coordinates $(\\xi,\\eta)$ and at most degree $2$ in the coordinate $\\zeta$.\n\nTo compute this integral numerically and exactly (up to machine precision), we use a Gaussian Quadrature scheme that is exact for polynomials of the required degree.\n1.  For the integral over the reference triangle in $(\\xi, \\eta)$, the integrand is quadratic. A $3$-point quadrature rule, which is exact for polynomials up to degree $2$, is sufficient. The quadrature points $(\\xi_i, \\eta_i)$ and weights $w_i^{\\text{tri}}$ for the reference triangle with vertices at $(0,0), (1,0), (0,1)$ are:\n    *   Points: $(1/2, 0), (0, 1/2), (1/2, 1/2)$\n    *   Weights: $w_i^{\\text{tri}} = 1/6$ for each point. These weights correspond to an integration domain of area $1/2$.\n2.  For the integral over $\\zeta \\in [-1, 1]$, the integrand is quadratic. The problem requires a rule of degree at least $3$. A $2$-point Gauss-Legendre quadrature rule is exact for polynomials up to degree $2(2)-1 = 3$, which satisfies the requirement. The points $\\zeta_j$ and weights $w_j^{\\zeta}$ are:\n    *   Points: $\\pm 1/\\sqrt{3}$\n    *   Weights: $w_j^{\\zeta} = 1$ for each point.\n\nThe mass matrix is then assembled by summing the contributions from each quadrature point:\n$$\nM_{ab} \\approx |\\!J| \\sum_{j} w_j^{\\zeta} \\sum_{i} w_i^{\\text{tri}} N_a(\\xi_i, \\eta_i, \\zeta_j) N_b(\\xi_i, \\eta_i, \\zeta_j)\n$$\nThis can be implemented by iterating through all $3 \\times 2 = 6$ quadrature points. At each point, the shape function vector $\\mathbf{N}$ is evaluated, and the outer product $\\mathbf{N}^T \\mathbf{N}$ is scaled by the corresponding total weight and added to the mass matrix $\\mathbf{M}$. The total weight for a quadrature point $(\\xi_i, \\eta_i, \\zeta_j)$ is $|\\!J| \\cdot w_i^{\\text{tri}} \\cdot w_j^{\\zeta}$.\n\nThe eigenvalues $\\lambda_i$ of the resulting symmetric positive-definite matrix $\\mathbf{M}$ are then computed numerically.\n\nFor the analysis in the test cases, it is crucial to recognize the scaling behavior of the mass matrix. The matrix $\\mathbf{M}$ can be expressed as:\n$$\n\\mathbf{M} = \\frac{s^2 h}{2} \\mathbf{M}_{\\text{ref}} = (A h) \\mathbf{M}_{\\text{ref}}\n$$\nwhere $\\mathbf{M}_{\\text{ref}}$ is a constant reference mass matrix independent of the geometric parameters $s$ and $h$. The eigenvalues $\\lambda_i$ of $\\mathbf{M}$ are therefore directly proportional to the element volume $V = A h$:\n$$\n\\lambda_i = (A h) \\lambda_{i, \\text{ref}}\n$$\nwhere $\\lambda_{i, \\text{ref}}$ are the constant eigenvalues of $\\mathbf{M}_{\\text{ref}}$. This implies that the normalized eigenvalues $\\lambda_i / (A h)$ are invariant with respect to the element's geometry. This principle explains the expected outcomes for the test cases:\n*   **Test Cases 1 and 4**: The normalized eigenvalue spectra are independent of the aspect ratio and scale, so their difference should be near zero.\n*   **Test Case 2**: With fixed $s=1$, the volume $A h = \\frac{s^3}{2} \\mathrm{AR} = \\frac{1}{2} \\mathrm{AR}$. Thus, $\\lambda_{\\max} \\propto \\mathrm{AR}$. The logarithmic derivative $\\frac{d(\\ln \\lambda_{\\max})}{d(\\ln \\mathrm{AR})} = 1$.\n*   **Test Case 3**: With fixed volume $A h = V_0 = 1$, the eigenvalues $\\lambda_{\\max} = V_0 \\lambda_{\\max, \\text{ref}}$ are constant. Therefore, their derivative with respect to any parameter, including $\\mathrm{AR}$, is $0$.\n\nThe implementation will follow this robust theoretical and numerical framework.", "answer": "```python\nimport numpy as np\nimport math\n\ndef get_quadrature_data():\n    \"\"\"\n    Provides quadrature points and weights for the reference wedge element.\n    - Triangle: 3-point rule, exact for degree 2 polynomials.\n    - Line: 2-point Gauss-Legendre rule, exact for degree 3 polynomials.\n    \"\"\"\n    # Triangle (xi, eta) quadrature for reference triangle with area 1/2\n    # Vertices at (0,0), (1,0), (0,1)\n    tri_points = np.array([\n        [0.5, 0.0],\n        [0.0, 0.5],\n        [0.5, 0.5]\n    ])\n    # Weights for a domain of area 1/2\n    tri_weights = np.array([1/6.0, 1/6.0, 1/6.0])\n\n    # 1D Gauss-Legendre quadrature for interval [-1, 1]\n    zeta_points = np.array([-1.0 / math.sqrt(3.0), 1.0 / math.sqrt(3.0)])\n    zeta_weights = np.array([1.0, 1.0])\n    \n    return tri_points, tri_weights, zeta_points, zeta_weights\n\ndef assemble_mass_matrix(s, h, quad_data):\n    \"\"\"\n    Assembles the 6x6 consistent mass matrix for a linear wedge element.\n    \n    Args:\n        s (float): Base scale of the triangular face.\n        h (float): Height of the wedge.\n        quad_data (tuple): Quadrature points and weights.\n\n    Returns:\n        numpy.ndarray: The 6x6 mass matrix.\n    \"\"\"\n    tri_points, tri_weights, zeta_points, zeta_weights = quad_data\n    mass_matrix = np.zeros((6, 6))\n    \n    # The Jacobian determinant is constant for this prismatic mapping.\n    # The transformation is (x,y,z) = (s*xi, s*eta, h/2 * (1+zeta)).\n    # The Jacobian matrix is diagonal with entries (s, s, h/2).\n    # Its determinant is |J| = s^2 * h / 2.\n    jac_det = (s**2 * h) / 2.0\n    \n    # Pre-calculate shape function vector at each quadrature point\n    N_qp = np.zeros(6)\n    \n    for i in range(len(tri_points)):\n        xi, eta = tri_points[i]\n        w_tri = tri_weights[i]\n        \n        # Barycentric coordinates\n        L = np.array([1.0 - xi - eta, xi, eta])\n        \n        for j in range(len(zeta_points)):\n            zeta = zeta_points[j]\n            w_zeta = zeta_weights[j]\n            \n            # Linear functions in zeta direction\n            f_zeta = np.array([(1.0 - zeta) / 2.0, (1.0 + zeta) / 2.0])\n            \n            # Shape functions N_1 to N_6\n            N_qp[0:3] = L * f_zeta[0]  # Bottom face (zeta=-1)\n            N_qp[3:6] = L * f_zeta[1]  # Top face (zeta=+1)\n            \n            # Total weight for the current quadrature point\n            total_weight = jac_det * w_tri * w_zeta\n            \n            # Add contribution to the mass matrix\n            mass_matrix += np.outer(N_qp, N_qp) * total_weight\n            \n    return mass_matrix\n\ndef compute_sorted_eigs(s, h, quad_data):\n    \"\"\"Computes and sorts the eigenvalues of the mass matrix.\"\"\"\n    M = assemble_mass_matrix(s, h, quad_data)\n    # The mass matrix is symmetric, use eigvalsh for numerical stability and efficiency.\n    eigs = np.linalg.eigvalsh(M)\n    return np.sort(eigs)\n\ndef solve():\n    \"\"\"\n    Executes the test suite for the wedge element eigenvalue analysis.\n    \"\"\"\n    quad_data = get_quadrature_data()\n    results = []\n\n    # Test Case 1: Normalized eigenvalue invariance\n    s = 1.0\n    ar_a, ar_b = 0.5, 3.0\n    h_a, h_b = ar_a * s, ar_b * s\n    vol_a, vol_b = (s**2 / 2.0) * h_a, (s**2 / 2.0) * h_b\n    \n    eigs_a = compute_sorted_eigs(s, h_a, quad_data)\n    eigs_b = compute_sorted_eigs(s, h_b, quad_data)\n    \n    norm_eigs_a = eigs_a / vol_a\n    norm_eigs_b = eigs_b / vol_b\n  \n    result1 = np.max(np.abs(norm_eigs_a - norm_eigs_b))\n    results.append(result1)\n\n    # Test Case 2: Logarithmic sensitivity at fixed base scale\n    s = 1.0\n    ar0 = 1.2\n    delta = 1.0e-4\n    ar_plus, ar_minus = ar0 + delta, ar0 - delta\n\n    h_plus, h_minus = ar_plus * s, ar_minus * s\n\n    lambda_max_plus = compute_sorted_eigs(s, h_plus, quad_data)[-1]\n    lambda_max_minus = compute_sorted_eigs(s, h_minus, quad_data)[-1]\n\n    log_deriv_num = math.log(lambda_max_plus) - math.log(lambda_max_minus)\n    log_deriv_den = math.log(ar_plus) - math.log(ar_minus)\n    result2 = log_deriv_num / log_deriv_den\n    results.append(result2)\n\n    # Test Case 3: Logarithmic sensitivity at fixed volume\n    v0 = 1.0\n    ar0 = 1.2\n    delta = 1.0e-4\n    ar_plus, ar_minus = ar0 + delta, ar0 - delta\n\n    def get_geom_from_vol_ar(v, ar):\n        s = (2.0 * v / ar)**(1.0/3.0)\n        h = ar * s\n        return s, h\n\n    s_plus, h_plus = get_geom_from_vol_ar(v0, ar_plus)\n    s_minus, h_minus = get_geom_from_vol_ar(v0, ar_minus)\n\n    lambda_max_plus = compute_sorted_eigs(s_plus, h_plus, quad_data)[-1]\n    lambda_max_minus = compute_sorted_eigs(s_minus, h_minus, quad_data)[-1]\n\n    log_deriv_num = math.log(lambda_max_plus) - math.log(lambda_max_minus)\n    log_deriv_den = math.log(ar_plus) - math.log(ar_minus)\n    result3 = log_deriv_num / log_deriv_den\n    results.append(result3)\n\n    # Test Case 4: Near-degenerate geometric scaling check\n    s_a, ar_a = 1.0, 1.0\n    h_a = s_a * ar_a\n    vol_a = (s_a**2 / 2.0) * h_a\n    eigs_a = compute_sorted_eigs(s_a, h_a, quad_data)\n    norm_eigs_a = eigs_a / vol_a\n\n    s_b, ar_b = 1.0e-3, 1.0e3\n    h_b = s_b * ar_b  # h_b = 1.0\n    vol_b = (s_b**2 / 2.0) * h_b # vol_b = 0.5e-6\n    eigs_b = compute_sorted_eigs(s_b, h_b, quad_data)\n    norm_eigs_b = eigs_b / vol_b\n   \n    result4 = np.linalg.norm(norm_eigs_a - norm_eigs_b)\n    results.append(result4)\n\n    # Format the final output\n    print(f\"[{','.join(f'{r:.15f}' for r in results)}]\")\n\nsolve()\n```", "id": "2611725"}]}