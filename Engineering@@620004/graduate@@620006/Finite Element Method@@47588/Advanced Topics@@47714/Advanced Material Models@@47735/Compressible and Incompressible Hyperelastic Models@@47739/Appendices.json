{"hands_on_practices": [{"introduction": "The starting point for any finite element implementation of a hyperelastic material model is the analytical derivation of the stress tensor and the consistent tangent modulus. The stress is essential for computing the internal force vector, while the tangent modulus is required to form the stiffness matrix for Newton-Raphson solvers. This practice will strengthen your foundational skills by having you derive these key quantities for the widely used incompressible Mooney-Rivlin model, directly linking the strain energy potential to the quantities needed in a computational code [@problem_id:2545790].", "problem": "Consider a three-dimensional, isotropic, incompressible hyperelastic solid in a spatial (Eulerian) finite element formulation. The strain-energy density is assumed to be purely isochoric and given by the Mooney–Rivlin form\n$$\nW(\\bar{I}_{1},\\bar{I}_{2}) \\;=\\; c_{1}\\,(\\bar{I}_{1}-3) \\;+\\; c_{2}\\,(\\bar{I}_{2}-3),\n$$\nwhere $c_{1}$ and $c_{2}$ are positive material parameters, $\\bar{I}_{1}$ and $\\bar{I}_{2}$ are the first and second invariants of the isochoric left Cauchy–Green tensor $\\bar{\\boldsymbol{B}}$, and incompressibility implies $J=\\det \\boldsymbol{F}=1$ so that $\\bar{\\boldsymbol{B}}=J^{-2/3}\\boldsymbol{B}=\\boldsymbol{B}$. Here $\\boldsymbol{F}$ is the deformation gradient and $\\boldsymbol{B}=\\boldsymbol{F}\\boldsymbol{F}^{\\mathsf{T}}$ is the left Cauchy–Green tensor. Let $\\boldsymbol{\\tau}$ denote the Kirchhoff stress and $\\boldsymbol{\\sigma}=\\boldsymbol{\\tau}/J$ the Cauchy stress. The incompressibility is enforced by a Lagrange multiplier (pressure) $p$.\n\nStarting only from the standard hyperelastic relations (Kirchhoff stress obtained by pushing forward $\\partial W/\\partial \\boldsymbol{C}$, with $\\boldsymbol{C}=\\boldsymbol{F}^{\\mathsf{T}}\\boldsymbol{F}$, and the definitions of the invariants of $\\boldsymbol{C}$ or $\\boldsymbol{B}$), derive:\n\n1) The Kirchhoff stress $\\boldsymbol{\\tau}$ in terms of $\\bar{\\boldsymbol{B}}$ and $\\bar{\\boldsymbol{B}}^{-1}$.\n\n2) The spatial, algorithmically consistent tangent (elasticity) tensor $\\mathbb{c}$ mapping the rate-of-deformation tensor $\\boldsymbol{d}=\\tfrac{1}{2}(\\boldsymbol{L}+\\boldsymbol{L}^{\\mathsf{T}})$ to the Jaumann rate of the isochoric part of the Kirchhoff stress, $\\overset{\\nabla}{\\boldsymbol{\\tau}}_{\\text{iso}}=\\mathbb{c}:\\boldsymbol{d}$, expressed purely in terms of $\\bar{\\boldsymbol{B}}$ and $\\bar{\\boldsymbol{B}}^{-1}$ and the material parameters $c_{1},c_{2}$. The vorticity $\\boldsymbol{w}=\\tfrac{1}{2}(\\boldsymbol{L}-\\boldsymbol{L}^{\\mathsf{T}})$ defines the Jaumann rate $\\overset{\\nabla}{(\\cdot)}=\\dot{(\\cdot)}-\\boldsymbol{w}(\\cdot)+(\\cdot)\\,\\boldsymbol{w}$, and you may use $\\overset{\\nabla}{\\bar{\\boldsymbol{B}}}=\\boldsymbol{d}\\,\\bar{\\boldsymbol{B}}+\\bar{\\boldsymbol{B}}\\,\\boldsymbol{d}-\\tfrac{2}{3}(\\mathrm{tr}\\,\\boldsymbol{d})\\,\\bar{\\boldsymbol{B}}$ and $\\overset{\\nabla}{\\bar{\\boldsymbol{B}}^{-1}}=-\\bar{\\boldsymbol{B}}^{-1}\\,\\overset{\\nabla}{\\bar{\\boldsymbol{B}}}\\,\\bar{\\boldsymbol{B}}^{-1}$ as kinematic identities. Write your final tensorial expression for $\\mathbb{c}$ using the left-right dyadic product $\\otimes$ defined by $(\\boldsymbol{A}\\otimes\\boldsymbol{C}):\\boldsymbol{X}=\\boldsymbol{A}\\,\\boldsymbol{X}\\,\\boldsymbol{C}^{\\mathsf{T}}$ and the identity tensor $\\boldsymbol{I}$.\n\nProvide your final result as a pair consisting of the symbolic expressions for $\\boldsymbol{\\tau}$ and $\\mathbb{c}$, with no numerical substitution. Your final answer must be a single, closed-form analytic expression; place both entries in a single row using the LaTeX $\\,\\mathrm{pmatrix}\\,$ format. No units are required. Round-off is not applicable.", "solution": "The problem is validated as self-contained, scientifically grounded, and well-posed. We proceed with the derivation.\n\nThe problem asks for two quantities for an incompressible Mooney-Rivlin hyperelastic material: the Kirchhoff stress tensor $\\boldsymbol{\\tau}$ and the spatial elasticity tensor $\\mathbb{c}$.\n\nPart 1: Derivation of the Kirchhoff Stress Tensor $\\boldsymbol{\\tau}$\n\nFor a hyperelastic material, the rate of work done per unit current volume is given by the contraction of the Kirchhoff stress tensor $\\boldsymbol{\\tau}$ with the rate-of-deformation tensor $\\boldsymbol{d}$. This must be equal to the rate of change of the stored strain energy density $W$. For an incompressible material, $J=\\det\\boldsymbol{F}=1$, which implies $\\text{tr}(\\boldsymbol{d})=0$. The stress response is composed of a part derived from the strain energy and a hydrostatic pressure part due to the incompressibility constraint. The Kirchhoff stress $\\boldsymbol{\\tau}$ is thus written as:\n$$\n\\boldsymbol{\\tau} = -p\\boldsymbol{I} + \\boldsymbol{\\tau}_{\\text{iso}}\n$$\nwhere $p$ is the Lagrange multiplier (pressure) and $\\boldsymbol{\\tau}_{\\text{iso}}$ is the part of the stress derived from the strain-energy function $W$. The power equation is $\\boldsymbol{\\tau}:\\boldsymbol{d} = \\dot{W}$. Since $(\\text{-}p\\boldsymbol{I}):\\boldsymbol{d} = -p\\,\\text{tr}(\\boldsymbol{d}) = 0$ for incompressible materials, we have $\\boldsymbol{\\tau}_{\\text{iso}}:\\boldsymbol{d} = \\dot{W}$.\n\nThe strain-energy density is given as $W = c_{1}\\,(\\bar{I}_{1}-3) + c_{2}\\,(\\bar{I}_{2}-3)$. For an incompressible material with $J=1$, the isochoric left Cauchy-Green tensor $\\bar{\\boldsymbol{B}} = J^{-2/3}\\boldsymbol{B}$ becomes identical to the left Cauchy-Green tensor $\\boldsymbol{B}$. Thus, $\\bar{\\boldsymbol{B}} = \\boldsymbol{B}$. The invariants are then given by:\n$$\n\\bar{I}_{1} = \\mathrm{tr}(\\bar{\\boldsymbol{B}}) = \\mathrm{tr}(\\boldsymbol{B})\n$$\n$$\n\\bar{I}_{2} = \\frac{1}{2}\\left( (\\mathrm{tr}(\\bar{\\boldsymbol{B}}))^{2} - \\mathrm{tr}(\\bar{\\boldsymbol{B}}^{2}) \\right) = \\mathrm{tr}(\\bar{\\boldsymbol{B}}^{-1}) = \\mathrm{tr}(\\boldsymbol{B}^{-1})\n$$\nThe last equality for $\\bar{I}_{2}$ follows from the Cayley-Hamilton theorem for a tensor with determinant $1$. So, the strain energy is $W = c_{1}(\\mathrm{tr}(\\boldsymbol{B})-3) + c_{2}(\\mathrm{tr}(\\boldsymbol{B}^{-1})-3)$.\n\nTo find $\\boldsymbol{\\tau}_{\\text{iso}}$, we compute the material time derivative of $W$:\n$$\n\\dot{W} = \\frac{\\partial W}{\\partial \\bar{I}_1}\\dot{\\bar{I}}_1 + \\frac{\\partial W}{\\partial \\bar{I}_2}\\dot{\\bar{I}}_2 = c_1 \\frac{d}{dt}(\\mathrm{tr}(\\boldsymbol{B})) + c_2 \\frac{d}{dt}(\\mathrm{tr}(\\boldsymbol{B}^{-1}))\n$$\nThe material time derivative of the left Cauchy-Green tensor $\\boldsymbol{B}$ is $\\dot{\\boldsymbol{B}} = \\boldsymbol{L}\\boldsymbol{B} + \\boldsymbol{B}\\boldsymbol{L}^{\\mathsf{T}}$, where $\\boldsymbol{L}=\\dot{\\boldsymbol{F}}\\boldsymbol{F}^{-1}$ is the velocity gradient. Using $\\boldsymbol{L}=\\boldsymbol{d}+\\boldsymbol{w}$ where $\\boldsymbol{d}$ is symmetric and $\\boldsymbol{w}$ is skew-symmetric, we have:\n$$\n\\dot{\\bar{I}}_1 = \\frac{d}{dt}(\\mathrm{tr}(\\boldsymbol{B})) = \\mathrm{tr}(\\dot{\\boldsymbol{B}}) = \\mathrm{tr}(\\boldsymbol{L}\\boldsymbol{B} + \\boldsymbol{B}\\boldsymbol{L}^{\\mathsf{T}}) = \\mathrm{tr}(\\boldsymbol{B}(\\boldsymbol{L}^{\\mathsf{T}} + \\boldsymbol{L})) = \\mathrm{tr}(2\\boldsymbol{B}\\boldsymbol{d}) = 2\\boldsymbol{B}:\\boldsymbol{d}\n$$\nThe time derivative of the inverse tensor $\\boldsymbol{B}^{-1}$ is $\\dot{\\boldsymbol{B}^{-1}} = -\\boldsymbol{B}^{-1}\\dot{\\boldsymbol{B}}\\boldsymbol{B}^{-1}$. So:\n$$\n\\dot{\\bar{I}}_2 = \\frac{d}{dt}(\\mathrm{tr}(\\boldsymbol{B}^{-1})) = \\mathrm{tr}(\\dot{\\boldsymbol{B}^{-1}}) = -\\mathrm{tr}(\\boldsymbol{B}^{-1}\\dot{\\boldsymbol{B}}\\boldsymbol{B}^{-1}) = -\\mathrm{tr}(\\dot{\\boldsymbol{B}}\\boldsymbol{B}^{-2})\n$$\nThis path is less direct. Instead:\n$$\n\\dot{\\bar{I}}_2 = \\mathrm{tr}(-\\boldsymbol{B}^{-1}(\\boldsymbol{L}\\boldsymbol{B}+\\boldsymbol{B}\\boldsymbol{L}^{\\mathsf{T}})\\boldsymbol{B}^{-1}) = -\\mathrm{tr}(\\boldsymbol{B}^{-1}\\boldsymbol{L}+\\boldsymbol{L}^{\\mathsf{T}}\\boldsymbol{B}^{-1}) = -\\mathrm{tr}(\\boldsymbol{B}^{-1}(\\boldsymbol{L}+\\boldsymbol{L}^{\\mathsf{T}})) = -2\\mathrm{tr}(\\boldsymbol{B}^{-1}\\boldsymbol{d}) = -2\\boldsymbol{B}^{-1}:\\boldsymbol{d}\n$$\nSubstituting these rates into the expression for $\\dot{W}$:\n$$\n\\dot{W} = c_1(2\\boldsymbol{B}:\\boldsymbol{d}) + c_2(-2\\boldsymbol{B}^{-1}:\\boldsymbol{d}) = (2c_1\\boldsymbol{B} - 2c_2\\boldsymbol{B}^{-1}):\\boldsymbol{d}\n$$\nBy comparing this with $\\dot{W} = \\boldsymbol{\\tau}_{\\text{iso}}:\\boldsymbol{d}$, we identify:\n$$\n\\boldsymbol{\\tau}_{\\text{iso}} = 2c_1\\boldsymbol{B} - 2c_2\\boldsymbol{B}^{-1}\n$$\nThe total Kirchhoff stress, using $\\bar{\\boldsymbol{B}}=\\boldsymbol{B}$ for the incompressible case, is:\n$$\n\\boldsymbol{\\tau} = -p\\boldsymbol{I} + 2c_1\\bar{\\boldsymbol{B}} - 2c_2\\bar{\\boldsymbol{B}}^{-1}\n$$\n\nPart 2: Derivation of the Spatial Elasticity Tensor $\\mathbb{c}$\n\nThe problem asks for the spatial elasticity tensor $\\mathbb{c}$ defined by the relation $\\overset{\\nabla}{\\boldsymbol{\\tau}}_{\\text{iso}}=\\mathbb{c}:\\boldsymbol{d}$, where $\\overset{\\nabla}{(\\cdot)}$ is the Jaumann rate. We need to compute the Jaumann rate of $\\boldsymbol{\\tau}_{\\text{iso}}$:\n$$\n\\overset{\\nabla}{\\boldsymbol{\\tau}}_{\\text{iso}} = \\overset{\\nabla}{(2c_1\\bar{\\boldsymbol{B}} - 2c_2\\bar{\\boldsymbol{B}}^{-1})} = 2c_1\\overset{\\nabla}{\\bar{\\boldsymbol{B}}} - 2c_2\\overset{\\nabla}{\\bar{\\boldsymbol{B}}^{-1}}\n$$\nThe problem provides the kinematic identity $\\overset{\\nabla}{\\bar{\\boldsymbol{B}}}=\\boldsymbol{d}\\,\\bar{\\boldsymbol{B}}+\\bar{\\boldsymbol{B}}\\,\\boldsymbol{d}-\\tfrac{2}{3}(\\mathrm{tr}\\,\\boldsymbol{d})\\,\\bar{\\boldsymbol{B}}$. For an incompressible material, $\\mathrm{tr}(\\boldsymbol{d})=0$. Thus, the identity simplifies to:\n$$\n\\overset{\\nabla}{\\bar{\\boldsymbol{B}}} = \\boldsymbol{d}\\,\\bar{\\boldsymbol{B}} + \\bar{\\boldsymbol{B}}\\,\\boldsymbol{d}\n$$\nUsing the second identity $\\overset{\\nabla}{\\bar{\\boldsymbol{B}}^{-1}} = -\\bar{\\boldsymbol{B}}^{-1}\\,\\overset{\\nabla}{\\bar{\\boldsymbol{B}}}\\,\\bar{\\boldsymbol{B}}^{-1}$, we find:\n$$\n\\overset{\\nabla}{\\bar{\\boldsymbol{B}}^{-1}} = -\\bar{\\boldsymbol{B}}^{-1}(\\boldsymbol{d}\\,\\bar{\\boldsymbol{B}} + \\bar{\\boldsymbol{B}}\\,\\boldsymbol{d})\\bar{\\boldsymbol{B}}^{-1} = -(\\bar{\\boldsymbol{B}}^{-1}\\boldsymbol{d} + \\boldsymbol{d}\\bar{\\boldsymbol{B}}^{-1})\n$$\nSubstituting these rates into the expression for $\\overset{\\nabla}{\\boldsymbol{\\tau}}_{\\text{iso}}$:\n$$\n\\overset{\\nabla}{\\boldsymbol{\\tau}}_{\\text{iso}} = 2c_1(\\boldsymbol{d}\\,\\bar{\\boldsymbol{B}} + \\bar{\\boldsymbol{B}}\\,\\boldsymbol{d}) - 2c_2(-(\\bar{\\boldsymbol{B}}^{-1}\\boldsymbol{d} + \\boldsymbol{d}\\bar{\\boldsymbol{B}}^{-1}))\n$$\n$$\n\\overset{\\nabla}{\\boldsymbol{\\tau}}_{\\text{iso}} = 2c_1(\\boldsymbol{d}\\,\\bar{\\boldsymbol{B}} + \\bar{\\boldsymbol{B}}\\,\\boldsymbol{d}) + 2c_2(\\bar{\\boldsymbol{B}}^{-1}\\boldsymbol{d} + \\boldsymbol{d}\\bar{\\boldsymbol{B}}^{-1})\n$$\nWe must now express this result in the form $\\mathbb{c}:\\boldsymbol{d}$, using the dyadic product definition $(\\boldsymbol{A}\\otimes\\boldsymbol{C}):\\boldsymbol{X}=\\boldsymbol{A}\\,\\boldsymbol{X}\\,\\boldsymbol{C}^{\\mathsf{T}}$. Given that $\\boldsymbol{d}$ and $\\bar{\\boldsymbol{B}}$ are symmetric:\nThe term $\\bar{\\boldsymbol{B}}\\boldsymbol{d}$ can be written as $(\\bar{\\boldsymbol{B}}\\otimes\\boldsymbol{I}):\\boldsymbol{d} = \\bar{\\boldsymbol{B}}\\boldsymbol{d}\\boldsymbol{I}^{\\mathsf{T}} = \\bar{\\boldsymbol{B}}\\boldsymbol{d}$.\nThe term $\\boldsymbol{d}\\bar{\\boldsymbol{B}}$ can be written as $(\\boldsymbol{I}\\otimes\\bar{\\boldsymbol{B}}):\\boldsymbol{d} = \\boldsymbol{I}\\boldsymbol{d}\\bar{\\boldsymbol{B}}^{\\mathsf{T}} = \\boldsymbol{d}\\bar{\\boldsymbol{B}}$.\nApplying this to all terms in the expression for $\\overset{\\nabla}{\\boldsymbol{\\tau}}_{\\text{iso}}$ yields:\n$$\n\\overset{\\nabla}{\\boldsymbol{\\tau}}_{\\text{iso}} = \\left[ 2c_1(\\boldsymbol{I}\\otimes\\bar{\\boldsymbol{B}} + \\bar{\\boldsymbol{B}}\\otimes\\boldsymbol{I}) + 2c_2(\\boldsymbol{I}\\otimes\\bar{\\boldsymbol{B}}^{-1} + \\bar{\\boldsymbol{B}}^{-1}\\otimes\\boldsymbol{I}) \\right] : \\boldsymbol{d}\n$$\nFrom this, we identify the fourth-order tensor $\\mathbb{c}$:\n$$\n\\mathbb{c} = 2c_1(\\boldsymbol{I}\\otimes\\bar{\\boldsymbol{B}} + \\bar{\\boldsymbol{B}}\\otimes\\boldsymbol{I}) + 2c_2(\\boldsymbol{I}\\otimes\\bar{\\boldsymbol{B}}^{-1} + \\bar{\\boldsymbol{B}}^{-1}\\otimes\\boldsymbol{I})\n$$\nHowever, the order of terms in the sum matters for the final expression. $\\boldsymbol{d}\\bar{\\boldsymbol{B}}+\\bar{\\boldsymbol{B}}\\boldsymbol{d} = (\\boldsymbol{I}\\otimes\\bar{\\boldsymbol{B}}):\\boldsymbol{d} + (\\bar{\\boldsymbol{B}}\\otimes\\boldsymbol{I}):\\boldsymbol{d}$. The order is not critical due to additivity. Let's rewrite the expression to match the derivation steps more clearly to avoid error:\n$\\overset{\\nabla}{\\boldsymbol{\\tau}}_{\\text{iso}} = 2c_1\\bar{\\boldsymbol{B}}\\boldsymbol{d} + 2c_1\\boldsymbol{d}\\bar{\\boldsymbol{B}} + 2c_2\\bar{\\boldsymbol{B}}^{-1}\\boldsymbol{d} + 2c_2\\boldsymbol{d}\\bar{\\boldsymbol{B}}^{-1}$.\nUsing the dyadic product definition:\n$\\left( 2c_1(\\bar{\\boldsymbol{B}}\\otimes\\boldsymbol{I}) + 2c_1(\\boldsymbol{I}\\otimes\\bar{\\boldsymbol{B}}) + 2c_2(\\bar{\\boldsymbol{B}}^{-1}\\otimes\\boldsymbol{I}) + 2c_2(\\boldsymbol{I}\\otimes\\bar{\\boldsymbol{B}}^{-1}) \\right) : \\boldsymbol{d}$.\nSo the tensor $\\mathbb{c}$ is the operator in the parenthesis.\n$$\n\\mathbb{c} = 2c_1(\\bar{\\boldsymbol{B}}\\otimes\\boldsymbol{I} + \\boldsymbol{I}\\otimes\\bar{\\boldsymbol{B}}) + 2c_2(\\bar{\\boldsymbol{B}}^{-1}\\otimes\\boldsymbol{I} + \\boldsymbol{I}\\otimes\\bar{\\boldsymbol{B}}^{-1})\n$$\nThis is the final expression for the spatial elasticity tensor.", "answer": "$$\n\\boxed{\\begin{pmatrix} -p\\boldsymbol{I} + 2c_{1}\\bar{\\boldsymbol{B}} - 2c_{2}\\bar{\\boldsymbol{B}}^{-1} & 2c_{1}(\\bar{\\boldsymbol{B}}\\otimes\\boldsymbol{I} + \\boldsymbol{I}\\otimes\\bar{\\boldsymbol{B}}) + 2c_{2}(\\bar{\\boldsymbol{B}}^{-1}\\otimes\\boldsymbol{I} + \\boldsymbol{I}\\otimes\\bar{\\boldsymbol{B}}^{-1}) \\end{pmatrix}}\n$$", "id": "2545790"}, {"introduction": "A correct constitutive theory is necessary but not sufficient for a successful finite element analysis, as the choice of discretization can introduce numerical pathologies. For hyperelastic models at or near the incompressible limit, standard finite elements can suffer from 'volumetric locking,' a phenomenon that leads to an overly stiff response and inaccurate results. This coding practice will guide you through implementing and analyzing different numerical integration schemes to understand the cause of locking and the effectiveness of selective reduced integration (SRI) as a remedy [@problem_id:2545811].", "problem": "Consider a single three-dimensional trilinear hexahedral element with $8$ nodes (an $8$-node brick) in the context of the Finite Element Method (FEM). The material is compressible hyperelastic neo-Hookean, and the analysis is performed in the undeformed configuration under small strains to permit a consistent tangent linearization. Use the principle of virtual work and the definition of hyperelasticity as the fundamental base.\n\nStarting from the principle of virtual work for hyperelasticity, for a body occupying a reference region with coordinates $\\mathbf{X}$, the internal virtual work is the variation of the total strain energy. At small strains around the undeformed configuration, the consistent tangent reduces to an isotropic linear mapping where the deviatoric and volumetric parts of the strain energy density separate. In this regime, with shear modulus $\\mu$ and bulk modulus $\\kappa$, the stress response operator decouples into a deviatoric part weighted by $\\mu$ and a volumetric part weighted by $\\kappa$, acting on the small strain tensor. You must use this small-strain tangent at the reference configuration to assemble the element stiffness matrix.\n\nLet the element occupy a rectangular parallelepiped of edge lengths $L_x$, $L_y$, $L_z$ aligned with the coordinate axes. The displacement field is interpolated using trilinear shape functions in the isoparametric domain $\\{(\\xi,\\eta,\\zeta)\\in[-1,1]^3\\}$. Use the standard $6$-component engineering-strain vector $\\boldsymbol{\\varepsilon} = [\\varepsilon_{11},\\varepsilon_{22},\\varepsilon_{33},\\gamma_{23},\\gamma_{13},\\gamma_{12}]^\\top$ with $\\gamma_{ij} = 2 \\varepsilon_{ij}$ for $i\\neq j$. The element stiffness is\n$$\n\\mathbf{K} = \\int_{\\Omega_0} \\mathbf{B}^\\top \\mathbf{C} \\,\\mathbf{B}\\, \\mathrm{d}V,\n$$\nwhere $\\mathbf{B}$ is the standard strain-displacement matrix for the $8$-node brick, and $\\mathbf{C}$ is the small-strain tangent at the undeformed state, which separates additively into a deviatoric operator and a volumetric operator.\n\nYour task is to implement three quadrature schemes for assembling $\\mathbf{K}$:\n- Scheme $\\mathsf{full}$: full integration for both volumetric and deviatoric parts using $2\\times 2\\times 2$ Gauss points at $\\xi,\\eta,\\zeta \\in \\{\\pm 1/\\sqrt{3}\\}$ with unit weights in each direction.\n- Scheme $\\mathsf{reduced}$: single-point reduced integration for the entire stiffness using the single Gauss point at $(\\xi,\\eta,\\zeta)=(0,0,0)$ with weight $2$ in each direction (total weight $8$ in three dimensions).\n- Scheme $\\mathsf{sri}$ (selective reduced integration): full integration for the deviatoric part as in $\\mathsf{full}$, and single-point reduced integration for the volumetric part as in $\\mathsf{reduced}$.\n\nAnalyze the impact on hourglass modes by computing the eigenvalues of the assembled element stiffness matrix $\\mathbf{K}$ for a free-free element (i.e., no essential boundary conditions). In a consistent small-strain formulation, rigid body motions contribute zero-energy modes. Hourglass modes appear as additional spurious zero-energy modes when under-integration does not capture all strain modes. To quantify this, let $\\lambda_i$ be the eigenvalues of $\\mathbf{K}$ and define a near-zero eigenvalue as one with magnitude less than a tolerance $\\tau$, where\n$$\n\\tau = \\max\\left(10^{-7} \\max_i \\lambda_i,\\; 10^{-12}\\right).\n$$\nCount the number of eigenvalues with absolute value less than or equal to $\\tau$.\n\nImplement a complete, runnable program that:\n- Constructs the $8$-node brick element stiffness matrix $\\mathbf{K}$ for each scheme using the small-strain tangent split into volumetric and deviatoric parts at the undeformed state and the appropriate quadrature rule(s) as stated above.\n- Computes the eigenvalues of $\\mathbf{K}$ and counts the number of near-zero eigenvalues for each test case as the measure of zero-energy modes (rigid body plus possible hourglass modes).\n\nNo physical output units are required for the final integer counts. Angles are not involved. All computations must be internally consistent in any chosen unit system.\n\nTest suite:\n- Case $1$: $\\mu = 8.0\\times 10^{4}$, $\\kappa = 1.6\\times 10^{5}$, $L_x=1$, $L_y=1$, $L_z=1$, scheme $\\mathsf{full}$.\n- Case $2$: same parameters as Case $1$, scheme $\\mathsf{reduced}$.\n- Case $3$: same parameters as Case $1$, scheme $\\mathsf{sri}$.\n- Case $4$: $\\mu = 8.0\\times 10^{4}$, $\\kappa = 1.6\\times 10^{5}$, $L_x=2$, $L_y=1$, $L_z=0.5$, scheme $\\mathsf{sri}$.\n\nYour program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets (for example, $[r_1,r_2,r_3,r_4]$), where $r_j$ is the integer number of near-zero eigenvalues for Case $j$ in the order listed above.", "solution": "The problem as stated is scientifically grounded, well-posed, objective, and contains all necessary information for its resolution. It represents a standard and fundamental exercise in the theory and application of the Finite Element Method. We proceed to the solution.\n\nThe foundation of the analysis is the principle of virtual work, which for a hyperelastic material states that the internal virtual work is the variation of the total strain energy, $\\delta W_{int} = \\delta \\Pi$. The stiffness matrix $\\mathbf{K}$ relates the nodal forces to nodal displacements and is obtained from the second variation of the strain energy potential. For a single finite element, this gives the expression:\n$$\n\\mathbf{K} = \\frac{\\partial^2 \\Pi}{\\partial \\mathbf{d}^2} = \\int_{\\Omega_0} \\mathbf{B}^\\top \\mathbf{C} \\mathbf{B} \\, \\mathrm{d}V\n$$\nwhere $\\mathbf{d}$ is the vector of nodal displacements, $\\Omega_0$ is the element's volume in the reference configuration, $\\mathbf{B}$ is the strain-displacement matrix, and $\\mathbf{C}$ is the constitutive tangent modulus. The problem specifies a small-strain formulation at the undeformed state, where $\\mathbf{C}$ becomes the standard isotropic linear elasticity tensor.\n\nThe solution requires a three-part construction:\n1. Formulation of the constitutive matrix $\\mathbf{C}$ and its decomposition.\n2. Formulation of the strain-displacement matrix $\\mathbf{B}$ for the $8$-node hexahedral element.\n3. Numerical integration of the stiffness matrix $\\mathbf{K}$ using the specified quadrature schemes.\nFinally, an eigenvalue analysis of the resulting matrix $\\mathbf{K}$ is performed to determine the number of zero-energy modes.\n\n**1. Constitutive Matrix $\\mathbf{C}$**\n\nFor an isotropic linear elastic material, the constitutive matrix $\\mathbf{C}$ maps the engineering strain vector $\\boldsymbol{\\varepsilon} = [\\varepsilon_{11}, \\varepsilon_{22}, \\varepsilon_{33}, \\gamma_{23}, \\gamma_{13}, \\gamma_{12}]^\\top$ to the stress vector $\\boldsymbol{\\sigma}$. The matrix is defined by the shear modulus $\\mu$ and bulk modulus $\\kappa$.\n\nThe strain energy is additively decomposed into deviatoric and volumetric parts. This leads to an additive decomposition of the constitutive matrix: $\\mathbf{C} = \\mathbf{C}_{\\text{dev}} + \\mathbf{C}_{\\text{vol}}$.\n\nThe volumetric part is related to the volumetric strain $\\varepsilon_v = \\varepsilon_{11} + \\varepsilon_{22} + \\varepsilon_{33}$. In vector form, $\\varepsilon_v = \\mathbf{m}^\\top \\boldsymbol{\\varepsilon}$ with $\\mathbf{m} = [1, 1, 1, 0, 0, 0]^\\top$. The volumetric part of the constitutive matrix is:\n$$\n\\mathbf{C}_{\\text{vol}} = \\kappa \\mathbf{m} \\mathbf{m}^\\top = \\kappa \\begin{bmatrix} 1 & 1 & 1 & 0 & 0 & 0 \\\\ 1 & 1 & 1 & 0 & 0 & 0 \\\\ 1 & 1 & 1 & 0 & 0 & 0 \\\\ 0 & 0 & 0 & 0 & 0 & 0 \\\\ 0 & 0 & 0 & 0 & 0 & 0 \\\\ 0 & 0 & 0 & 0 & 0 & 0 \\end{bmatrix}\n$$\nThe full isotropic constitutive matrix $\\mathbf{C}$ is given by:\n$$\n\\mathbf{C} = \\begin{bmatrix} \\kappa + \\frac{4}{3}\\mu & \\kappa - \\frac{2}{3}\\mu & \\kappa - \\frac{2}{3}\\mu & 0 & 0 & 0 \\\\ \\kappa - \\frac{2}{3}\\mu & \\kappa + \\frac{4}{3}\\mu & \\kappa - \\frac{2}{3}\\mu & 0 & 0 & 0 \\\\ \\kappa - \\frac{2}{3}\\mu & \\kappa - \\frac{2}{3}\\mu & \\kappa + \\frac{4}{3}\\mu & 0 & 0 & 0 \\\\ 0 & 0 & 0 & \\mu & 0 & 0 \\\\ 0 & 0 & 0 & 0 & \\mu & 0 \\\\ 0 & 0 & 0 & 0 & 0 & \\mu \\end{bmatrix}\n$$\nThe deviatoric part is then $\\mathbf{C}_{\\text{dev}} = \\mathbf{C} - \\mathbf{C}_{\\text{vol}}$:\n$$\n\\mathbf{C}_{\\text{dev}} = \\mu \\begin{bmatrix} 4/3 & -2/3 & -2/3 & 0 & 0 & 0 \\\\ -2/3 & 4/3 & -2/3 & 0 & 0 & 0 \\\\ -2/3 & -2/3 & 4/3 & 0 & 0 & 0 \\\\ 0 & 0 & 0 & 1 & 0 & 0 \\\\ 0 & 0 & 0 & 0 & 1 & 0 \\\\ 0 & 0 & 0 & 0 & 0 & 1 \\end{bmatrix}\n$$\n\n**2. Strain-Displacement Matrix $\\mathbf{B}$**\n\nThe displacement field $\\mathbf{u}(\\mathbf{X})$ is interpolated from the nodal displacements $\\mathbf{d}$ using trilinear shape functions $N_i(\\xi, \\eta, \\zeta)$:\n$$\n\\mathbf{u}(\\xi, \\eta, \\zeta) = \\sum_{i=1}^{8} N_i(\\xi, \\eta, \\zeta) \\mathbf{u}_i\n$$\nThe shape function for node $i$ with isoparametric coordinates $(\\xi_i, \\eta_i, \\zeta_i) \\in \\{-1, 1\\}^3$ is:\n$$\nN_i(\\xi, \\eta, \\zeta) = \\frac{1}{8}(1+\\xi_i\\xi)(1+\\eta_i\\eta)(1+\\zeta_i\\zeta)\n$$\nThe strain-displacement matrix $\\mathbf{B}$ is defined by $\\boldsymbol{\\varepsilon} = \\mathbf{B}\\mathbf{d}$. It is a $6\\times24$ matrix composed of $8$ blocks $\\mathbf{B}_i$ ($6\\times3$ each), corresponding to each node: $\\mathbf{B} = [\\mathbf{B}_1, \\mathbf{B}_2, \\ldots, \\mathbf{B}_8]$. Each block $\\mathbf{B}_i$ is built from the spatial derivatives of the shape function $N_i$:\n$$\n\\mathbf{B}_i = \\begin{bmatrix} \\frac{\\partial N_i}{\\partial x} & 0 & 0 \\\\ 0 & \\frac{\\partial N_i}{\\partial y} & 0 \\\\ 0 & 0 & \\frac{\\partial N_i}{\\partial z} \\\\ 0 & \\frac{\\partial N_i}{\\partial z} & \\frac{\\partial N_i}{\\partial y} \\\\ \\frac{\\partial N_i}{\\partial z} & 0 & \\frac{\\partial N_i}{\\partial x} \\\\ \\frac{\\partial N_i}{\\partial y} & \\frac{\\partial N_i}{\\partial x} & 0 \\end{bmatrix}\n$$\nThe spatial derivatives are found via the chain rule using the Jacobian of the mapping from isoparametric to physical coordinates:\n$$\n\\begin{Bmatrix} \\partial N_i/\\partial x \\\\ \\partial N_i/\\partial y \\\\ \\partial N_i/\\partial z \\end{Bmatrix} = \\mathbf{J}^{-1} \\begin{Bmatrix} \\partial N_i/\\partial \\xi \\\\ \\partial N_i/\\partial \\eta \\\\ \\partial N_i/\\partial \\zeta \\end{Bmatrix}\n$$\nFor a rectangular parallelepiped of dimensions $L_x, L_y, L_z$, centered at the origin, the mapping is $x = L_x\\xi/2, y = L_y\\eta/2, z = L_z\\zeta/2$. The Jacobian matrix is diagonal and constant:\n$$\n\\mathbf{J} = \\begin{bmatrix} L_x/2 & 0 & 0 \\\\ 0 & L_y/2 & 0 \\\\ 0 & 0 & L_z/2 \\end{bmatrix} \\implies \\mathbf{J}^{-1} = \\begin{bmatrix} 2/L_x & 0 & 0 \\\\ 0 & 2/L_y & 0 \\\\ 0 & 0 & 2/L_z \\end{bmatrix}\n$$\nThe volume element for integration is $\\mathrm{d}V = \\det(\\mathbf{J})\\mathrm{d}\\xi\\mathrm{d}\\eta\\mathrm{d}\\zeta = \\frac{L_x L_y L_z}{8} \\mathrm{d}\\xi\\mathrm{d}\\eta\\mathrm{d}\\zeta$.\n\n**3. Numerical Integration of Stiffness Matrix $\\mathbf{K}$**\n\nThe integral for $\\mathbf{K}$ is evaluated numerically using Gauss quadrature:\n$$\n\\mathbf{K} = \\int_{-1}^1\\int_{-1}^1\\int_{-1}^1 \\mathbf{B}(\\xi,\\eta,\\zeta)^\\top \\mathbf{C} \\mathbf{B}(\\xi,\\eta,\\zeta) \\det(\\mathbf{J}) \\mathrm{d}\\xi\\mathrm{d}\\eta\\mathrm{d}\\zeta \\approx \\sum_{k} w_k \\mathbf{B}(\\xi_k, \\eta_k, \\zeta_k)^\\top \\mathbf{C} \\mathbf{B}(\\xi_k, \\eta_k, \\zeta_k) \\det(\\mathbf{J})\n$$\nwhere $(\\xi_k, \\eta_k, \\zeta_k)$ are the Gauss points and $w_k$ are the corresponding weights.\n\n- Scheme $\\mathsf{full}$: $2\\times2\\times2$ Gauss quadrature is used. There are $8$ points at $(\\xi, \\eta, \\zeta) \\in \\{\\pm 1/\\sqrt{3}, \\pm 1/\\sqrt{3}, \\pm 1/\\sqrt{3}\\}$, each with weight $w_k=1$. This rule is sufficient to exactly integrate the stiffness matrix for a rectangular element. It is expected to yield $6$ zero-energy modes, corresponding to the $3$ rigid-body translations and $3$ rigid-body rotations.\n\n- Scheme $\\mathsf{reduced}$: A single Gauss point at $(\\xi, \\eta, \\zeta)=(0,0,0)$ with weight $w_k=8$ is used for the entire matrix. This scheme is computationally efficient but is unable to detect certain deformation modes (hourglass modes) that produce zero strain at the element center. For an $8$-node brick, this results in $5$ spurious zero-energy modes in addition to the $6$ rigid-body modes, for a total of $11$.\n\n- Scheme $\\mathsf{sri}$ (Selective Reduced Integration): The stiffness matrix is split: $\\mathbf{K} = \\mathbf{K}_{\\text{dev}} + \\mathbf{K}_{\\text{vol}}$.\n  - $\\mathbf{K}_{\\text{dev}} = \\int \\mathbf{B}^\\top \\mathbf{C}_{\\text{dev}} \\mathbf{B} \\,\\mathrm{d}V$ is integrated using the `full` $2\\times2\\times2$ scheme.\n  - $\\mathbf{K}_{\\text{vol}} = \\int \\mathbf{B}^\\top \\mathbf{C}_{\\text{vol}} \\mathbf{B} \\,\\mathrm{d}V$ is integrated using the `reduced` single-point scheme.\nThis technique is used to prevent volumetric locking in nearly incompressible materials while maintaining sufficient rank to resist hourglassing. The full integration of the deviatoric part provides stiffness against shear hourglass modes. This scheme is expected to yield only the $6$ authentic rigid-body zero-energy modes.\n\n**4. Eigenvalue Analysis**\n\nAfter assembling $\\mathbf{K}$ for each case, its eigenvalues $\\lambda_i$ are computed. The number of near-zero eigenvalues corresponds to the number of zero-energy modes. An eigenvalue is considered near-zero if its magnitude is less than a tolerance $\\tau = \\max(10^{-7} \\max_i \\lambda_i, 10^{-12})$. This dual relative/absolute tolerance correctly identifies numerical zeros from floating-point computations. The matrix $\\mathbf{K}$ is symmetric and positive semi-definite, so its eigenvalues are real and non-negative.", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Main solver function that orchestrates the FEM analysis for the given test cases.\n    \"\"\"\n    test_cases = [\n        # Case 1: mu, kappa, Lx, Ly, Lz, scheme\n        (8.0e4, 1.6e5, 1.0, 1.0, 1.0, 'full'),\n        # Case 2\n        (8.0e4, 1.6e5, 1.0, 1.0, 1.0, 'reduced'),\n        # Case 3\n        (8.0e4, 1.6e5, 1.0, 1.0, 1.0, 'sri'),\n        # Case 4\n        (8.0e4, 1.6e5, 2.0, 1.0, 0.5, 'sri'),\n    ]\n\n    results = []\n    for mu, kappa, Lx, Ly, Lz, scheme in test_cases:\n        K = assemble_stiffness_matrix(mu, kappa, Lx, Ly, Lz, scheme)\n        \n        # Eigenvalue analysis\n        # K is symmetric, use eigvalsh for efficiency and stability\n        eigenvalues = np.linalg.eigvalsh(K)\n        \n        # As K is positive-semidefinite, max(abs(lambda)) is just the max eigenvalue.\n        max_eig = eigenvalues[-1]\n        tolerance = max(1e-7 * max_eig, 1e-12)\n        \n        # Count near-zero eigenvalues\n        zero_modes_count = np.sum(eigenvalues <= tolerance)\n        results.append(zero_modes_count)\n\n    print(f\"[{','.join(map(str, results))}]\")\n\ndef get_constitutive_matrices(mu, kappa):\n    \"\"\"\n    Constructs the deviatoric and volumetric parts of the constitutive matrix C.\n    \"\"\"\n    C_vol = np.zeros((6, 6))\n    m = np.array([1.0, 1.0, 1.0, 0.0, 0.0, 0.0])\n    C_vol = kappa * np.outer(m, m)\n\n    C_dev = np.zeros((6, 6))\n    C_dev[0, 0] = C_dev[1, 1] = C_dev[2, 2] = 4.0 / 3.0 * mu\n    C_dev[0, 1] = C_dev[1, 0] = C_dev[0, 2] = C_dev[2, 0] = C_dev[1, 2] = C_dev[2, 1] = -2.0 / 3.0 * mu\n    C_dev[3, 3] = C_dev[4, 4] = C_dev[5, 5] = mu\n    \n    return C_dev, C_vol\n\ndef get_shape_func_derivatives(xi, eta, zeta, node_iso_coords):\n    \"\"\"\n    Computes derivatives of 8-node hex shape functions w.r.t. isoparametric coordinates.\n    \"\"\"\n    dN_dxi_eta_zeta = np.zeros((8, 3))\n    for i in range(8):\n        xi_i, eta_i, zeta_i = node_iso_coords[i]\n        dN_dxi_eta_zeta[i, 0] = 0.125 * xi_i * (1 + eta_i * eta) * (1 + zeta_i * zeta)\n        dN_dxi_eta_zeta[i, 1] = 0.125 * eta_i * (1 + xi_i * xi) * (1 + zeta_i * zeta)\n        dN_dxi_eta_zeta[i, 2] = 0.125 * zeta_i * (1 + xi_i * xi) * (1 + eta_i * eta)\n    return dN_dxi_eta_zeta\n\ndef get_B_matrix(dN_dxi_eta_zeta, Lx, Ly, Lz):\n    \"\"\"\n    Constructs the strain-displacement matrix B.\n    \"\"\"\n    J_inv_diag = np.array([2.0 / Lx, 2.0 / Ly, 2.0 / Lz])\n    dN_dxyz = dN_dxi_eta_zeta @ np.diag(J_inv_diag)\n\n    B = np.zeros((6, 24))\n    for i in range(8):\n        # Derivatives for node i in x, y, z\n        dN_dx_i = dN_dxyz[i, 0]\n        dN_dy_i = dN_dxyz[i, 1]\n        dN_dz_i = dN_dxyz[i, 2]\n        \n        # Populate the B matrix for node i (columns 3*i, 3*i+1, 3*i+2)\n        B[0, 3 * i] = dN_dx_i\n        B[1, 3 * i + 1] = dN_dy_i\n        B[2, 3 * i + 2] = dN_dz_i\n        B[3, 3 * i + 1] = dN_dz_i\n        B[3, 3 * i + 2] = dN_dy_i\n        B[4, 3 * i] = dN_dz_i\n        B[4, 3 * i + 2] = dN_dx_i\n        B[5, 3 * i] = dN_dy_i\n        B[5, 3 * i + 1] = dN_dx_i\n        \n    return B\n\ndef assemble_stiffness_matrix(mu, kappa, Lx, Ly, Lz, scheme):\n    \"\"\"\n    Assembles the element stiffness matrix K using the specified quadrature scheme.\n    \"\"\"\n    K = np.zeros((24, 24))\n    det_J = Lx * Ly * Lz / 8.0\n\n    # Isoparametric coordinates of the 8 nodes\n    node_iso_coords = np.array([\n        [-1, -1, -1], [1, -1, -1], [1, 1, -1], [-1, 1, -1],\n        [-1, -1, 1], [1, -1, 1], [1, 1, 1], [-1, 1, 1]\n    ])\n\n    C_dev, C_vol = get_constitutive_matrices(mu, kappa)\n\n    # Define Gauss quadrature points and weights\n    a = 1.0 / np.sqrt(3.0)\n    gp_8pt = [\n        (-a, -a, -a), ( a, -a, -a), ( a,  a, -a), (-a,  a, -a),\n        (-a, -a,  a), ( a, -a,  a), ( a,  a,  a), (-a,  a,  a)\n    ]\n    w_8pt = [1.0] * 8\n\n    gp_1pt = [(0.0, 0.0, 0.0)]\n    w_1pt = [8.0]\n\n    if scheme == 'full':\n        C = C_dev + C_vol\n        for i, (xi, eta, zeta) in enumerate(gp_8pt):\n            dN = get_shape_func_derivatives(xi, eta, zeta, node_iso_coords)\n            B = get_B_matrix(dN, Lx, Ly, Lz)\n            K += w_8pt[i] * B.T @ C @ B * det_J\n\n    elif scheme == 'reduced':\n        C = C_dev + C_vol\n        xi, eta, zeta = gp_1pt[0]\n        dN = get_shape_func_derivatives(xi, eta, zeta, node_iso_coords)\n        B = get_B_matrix(dN, Lx, Ly, Lz)\n        K += w_1pt[0] * B.T @ C @ B * det_J\n\n    elif scheme == 'sri':\n        # Deviatoric part with full integration\n        K_dev = np.zeros((24, 24))\n        for i, (xi, eta, zeta) in enumerate(gp_8pt):\n            dN = get_shape_func_derivatives(xi, eta, zeta, node_iso_coords)\n            B = get_B_matrix(dN, Lx, Ly, Lz)\n            K_dev += w_8pt[i] * B.T @ C_dev @ B * det_J\n        \n        # Volumetric part with reduced integration\n        K_vol = np.zeros((24, 24))\n        xi, eta, zeta = gp_1pt[0]\n        dN = get_shape_func_derivatives(xi, eta, zeta, node_iso_coords)\n        B = get_B_matrix(dN, Lx, Ly, Lz)\n        K_vol += w_1pt[0] * B.T @ C_vol @ B * det_J\n        \n        K = K_dev + K_vol\n        \n    return K\n\n# Execute the solver\nsolve()\n```", "id": "2545811"}, {"introduction": "Once a constitutive model is implemented within a finite element framework, how can we be sure the code is free of bugs and correctly solves the governing partial differential equations? The Method of Manufactured Solutions (MMS) is a rigorous verification technique where an analytical solution is chosen, and the necessary source terms (like body forces) are calculated to make it exact. This coding exercise provides hands-on experience with MMS, demonstrating how to design a verification test to build confidence in your implementation of an incompressible hyperelastic model [@problem_id:2545834].", "problem": "You are asked to design and verify a manufactured solution for plane-strain incompressible hyperelasticity suitable for code verification using the Method of Manufactured Solutions (MMS). The verification should be entirely analytical at the level of the strong form and must be implemented as a complete, runnable program. The emphasis is on deriving the correct body force that makes a prescribed isochoric motion and pressure field satisfy the balance of linear momentum and the incompressibility constraint. The program must test several parameter sets, each with a nontrivial and distinct pressure field and isochoric motion, and report whether each test passes specified tolerances. No finite element discretization is required; instead, the algorithm must check the analytical residuals at specified points.\n\nStart from the following fundamental definitions and principles:\n- The First Piola–Kirchhoff stress for an incompressible neo-Hookean solid is given by $ \\boldsymbol{P} = \\mu \\boldsymbol{F} - p \\boldsymbol{F}^{-T} $, where $ \\mu $ is the shear modulus, $ \\boldsymbol{F} = \\dfrac{\\partial \\boldsymbol{x}}{\\partial \\boldsymbol{X}} $ is the deformation gradient, and $ p $ is the Lagrange multiplier (pressure) enforcing incompressibility.\n- The static balance of linear momentum in the reference configuration requires $ \\operatorname{Div} \\boldsymbol{P} + \\boldsymbol{b} = \\mathbf{0} $, where $ \\boldsymbol{b} $ is the body force per unit reference volume.\n- The incompressibility constraint is $ J = \\det \\boldsymbol{F} = 1 $.\n\nConstruct manufactured solutions using isochoric motions with constant deformation gradient $ \\boldsymbol{F} $ (so that $ \\det \\boldsymbol{F} = 1 $ identically) and spatially varying pressure fields $ p(\\boldsymbol{X}) $. This leads to a nontrivial residual in the momentum balance driven by the pressure gradient. Specifically, the body force that makes the manufactured solution exact must satisfy\n$$\n\\boldsymbol{b}(\\boldsymbol{X}) = \\boldsymbol{F}^{-T} \\nabla p(\\boldsymbol{X}),\n$$\nso that $ \\operatorname{Div} \\boldsymbol{P} + \\boldsymbol{b} = \\mathbf{0} $ is satisfied pointwise, because $ \\operatorname{Div}(\\mu \\boldsymbol{F}) = \\mu \\operatorname{Div} \\boldsymbol{F} = \\mathbf{0} $ when $ \\boldsymbol{F} $ is constant.\n\nWork in two dimensions under plane strain on the reference domain $ \\Omega = [0,1] \\times [0,1] $ with coordinates $ \\boldsymbol{X} = (X_1, X_2) $. Use two types of isochoric motions:\n- Simple shear with shear parameter $ k \\in \\mathbb{R} $:\n$$\n\\boldsymbol{x}(\\boldsymbol{X}) = \\begin{bmatrix} X_1 + k X_2 \\\\ X_2 \\end{bmatrix}, \\quad \\boldsymbol{F} = \\begin{bmatrix} 1 & k \\\\ 0 & 1 \\end{bmatrix}, \\quad \\det \\boldsymbol{F} = 1.\n$$\n- Rigid rotation by constant angle $ \\theta $ (angle unit: radians):\n$$\n\\boldsymbol{x}(\\boldsymbol{X}) = \\boldsymbol{R}(\\theta) \\boldsymbol{X}, \\quad \\boldsymbol{F} = \\boldsymbol{R}(\\theta) = \\begin{bmatrix} \\cos \\theta & -\\sin \\theta \\\\ \\sin \\theta & \\cos \\theta \\end{bmatrix}, \\quad \\det \\boldsymbol{F} = 1.\n$$\n\nFor each manufactured solution, define the pressure field $ p(\\boldsymbol{X}) $ and compute the body force $ \\boldsymbol{b}(\\boldsymbol{X}) $ according to $ \\boldsymbol{b}(\\boldsymbol{X}) = \\boldsymbol{F}^{-T} \\nabla p(\\boldsymbol{X}) $. Then, verify for a prescribed set of points $ \\{ \\boldsymbol{X}^{(m)} \\} $ that both conditions hold:\n- Momentum residual: $ \\boldsymbol{r}(\\boldsymbol{X}^{(m)}) = \\operatorname{Div} \\boldsymbol{P}(\\boldsymbol{X}^{(m)}) + \\boldsymbol{b}(\\boldsymbol{X}^{(m)}) = \\boldsymbol{0} $.\n- Volume constraint residual: $ c = \\det \\boldsymbol{F} - 1 = 0 $.\n\nYour program must:\n- For each test case, compute the maximum Euclidean norm of the momentum residual $ \\|\\boldsymbol{r}(\\boldsymbol{X}^{(m)})\\|_2 $ over the specified points and the absolute value of the volume constraint residual $ |c| $ (which is constant because $ \\boldsymbol{F} $ is constant).\n- Declare the test case as passed if $ \\max_m \\|\\boldsymbol{r}(\\boldsymbol{X}^{(m)})\\|_2 \\leq T_{\\mathrm{eq}} $ and $ |c| \\leq T_{J} $ with $ T_{\\mathrm{eq}} = 10^{-10} $ and $ T_J = 10^{-12} $.\n- Aggregate the pass/fail results for all cases as a list of booleans and print them on a single line in the format described below.\n\nAngle unit requirement: all angles $ \\theta $ are in radians.\n\nTest suite:\n- Case $ 1 $ (simple shear): $ k = 0.6 $, $ \\mu = 1.7 $, $ p(\\boldsymbol{X}) = \\sin(\\pi X_1)\\cos(2\\pi X_2) $. Points $ \\{ \\boldsymbol{X}^{(m)} \\} $ are the uniform grid $ \\{ (0,0),(0,0.5),(0,1),(0.5,0),(0.5,0.5),(0.5,1),(1,0),(1,0.5),(1,1) \\} $.\n- Case $ 2 $ (rotation): $ \\theta = 0.8 $, $ \\mu = 3.0 $, $ p(\\boldsymbol{X}) = \\exp(X_1 + 2 X_2) $. Points $ \\{ \\boldsymbol{X}^{(m)} \\} = \\{ (0,0),(1,0),(0,1),(1,1),(0.25,0.75) \\} $.\n- Case $ 3 $ (simple shear, high shear): $ k = 10.0 $, $ \\mu = 5.0 $, $ p(\\boldsymbol{X}) = X_1^3 - 2 X_1 X_2 + X_2^2 $. Points $ \\{ \\boldsymbol{X}^{(m)} \\} = \\{ (0.1,0.2),(0.6,0.4),(0.9,0.9),(0.0,1.0) \\} $.\n- Case $ 4 $ (rotation, zero pressure): $ \\theta = -1.2 $, $ \\mu = 0.7 $, $ p(\\boldsymbol{X}) \\equiv 0 $. Points $ \\{ \\boldsymbol{X}^{(m)} \\} = \\{ (0.3,0.7),(0.8,0.2),(0.0,0.0),(1.0,1.0) \\} $.\n\nRequired final output format:\n- Your program should produce a single line of output containing the results as a comma-separated list of booleans enclosed in square brackets (e.g., \"[True,False,True,True]\"), corresponding to Cases $ 1 $ through $ 4 $ in order.", "solution": "The problem requires the design and verification of manufactured solutions for two-dimensional, plane-strain, incompressible hyperelasticity. The verification is to be performed analytically at the level of the governing partial differential equations, which are the static balance of linear momentum and the incompressibility constraint.\n\nThe foundation of this analysis rests on the following principles. The material response is described by the incompressible neo-Hookean model, for which the First Piola-Kirchhoff stress tensor $ \\boldsymbol{P} $ is given by:\n$$\n\\boldsymbol{P} = \\mu \\boldsymbol{F} - p \\boldsymbol{F}^{-T}\n$$\nHere, $ \\mu $ is the constant shear modulus, $ \\boldsymbol{F} $ is the deformation gradient, and $ p $ is the Lagrange multiplier field, typically interpreted as pressure, which enforces the incompressibility constraint. The deformation gradient is defined as $ \\boldsymbol{F} = \\dfrac{\\partial \\boldsymbol{x}}{\\partial \\boldsymbol{X}} $, where $ \\boldsymbol{x} $ is the current position of a material point that was at $ \\boldsymbol{X} $ in the reference configuration.\n\nThe system must satisfy two fundamental equations in the reference domain $ \\Omega $. First, the static balance of linear momentum requires that the divergence of the stress is balanced by a body force $ \\boldsymbol{b} $ per unit reference volume:\n$$\n\\operatorname{Div} \\boldsymbol{P} + \\boldsymbol{b} = \\mathbf{0}\n$$\nSecond, the material is incompressible, which imposes a kinematic constraint on the deformation, expressed as the determinant of the deformation gradient being unity:\n$$\nJ = \\det \\boldsymbol{F} = 1\n$$\nThis is an isochoric (volume-preserving) motion.\n\nThe Method of Manufactured Solutions (MMS) involves prescribing a solution field and then calculating the source terms (in this case, the body force $ \\boldsymbol{b} $) that are required to make these fields an exact solution to the governing equations. For this problem, we choose a constant deformation gradient $ \\boldsymbol{F} $ that satisfies the incompressibility constraint $ \\det \\boldsymbol{F} = 1 $ identically. We also prescribe a spatially varying pressure field $ p(\\boldsymbol{X}) $.\n\nWith a constant $ \\boldsymbol{F} $, the term $ \\mu \\boldsymbol{F} $ in the stress tensor has a zero divergence: $ \\operatorname{Div}(\\mu \\boldsymbol{F}) = \\mathbf{0} $. The momentum equation thus simplifies. The divergence of the pressure-dependent part of the stress is calculated as:\n$$\n(\\operatorname{Div} (-p \\boldsymbol{F}^{-T}))_i = -\\frac{\\partial}{\\partial X_J} (p (F^{-T})_{iJ})\n$$\nSince $ \\boldsymbol{F} $ is constant, so is $ \\boldsymbol{F}^{-T} $, leading to:\n$$\n(\\operatorname{Div} (-p \\boldsymbol{F}^{-T}))_i = -(F^{-T})_{iJ} \\frac{\\partial p}{\\partial X_J}\n$$\nIn vector notation, this is $ - \\boldsymbol{F}^{-T} \\nabla p $. The momentum balance equation $ \\operatorname{Div} \\boldsymbol{P} + \\boldsymbol{b} = \\mathbf{0} $ becomes:\n$$\n- \\boldsymbol{F}^{-T} \\nabla p(\\boldsymbol{X}) + \\boldsymbol{b}(\\boldsymbol{X}) = \\mathbf{0}\n$$\nFrom this, we derive the necessary body force to satisfy the equation:\n$$\n\\boldsymbol{b}(\\boldsymbol{X}) = \\boldsymbol{F}^{-T} \\nabla p(\\boldsymbol{X})\n$$\nThe analytical verification procedure consists of confirming that with this manufactured body force, the residuals of the governing equations are zero. The momentum residual $ \\boldsymbol{r} $ and the volume constraint residual $ c $ are defined as:\n$$\n\\boldsymbol{r}(\\boldsymbol{X}) = \\operatorname{Div} \\boldsymbol{P}(\\boldsymbol{X}) + \\boldsymbol{b}(\\boldsymbol{X})\n$$\n$$\nc = \\det \\boldsymbol{F} - 1\n$$\nBy construction, both residuals must be identically zero.\n$ \\boldsymbol{r}(\\boldsymbol{X}) = (-\\boldsymbol{F}^{-T} \\nabla p) + (\\boldsymbol{F}^{-T} \\nabla p) = \\mathbf{0} $.\n$ c = 1 - 1 = 0 $, since we select isochoric deformations.\n\nThe implementation will test this analytical result for four distinct cases. For each case, we compute the constant deformation gradient $ \\boldsymbol{F} $ and its inverse transpose $ \\boldsymbol{F}^{-T} $. Then, for a set of specified points $ \\{ \\boldsymbol{X}^{(m)} \\} $, we compute the analytical gradient of the pressure $ \\nabla p(\\boldsymbol{X}^{(m)}) $, the required body force $ \\boldsymbol{b}(\\boldsymbol{X}^{(m)}) $, and the divergence of the stress $ \\operatorname{Div} \\boldsymbol{P}(\\boldsymbol{X}^{(m)}) $. The numerical evaluation must confirm that the momentum residual $ \\boldsymbol{r}(\\boldsymbol{X}^{(m)}) $ and the volume constraint residual $ c $ are zero within specified numerical tolerances, $ T_{\\mathrm{eq}} = 10^{-10} $ and $ T_J = 10^{-12} $, respectively. A test case passes only if both conditions are met.\n\nThe specific deformation maps are simple shear and rigid rotation.\nFor simple shear with parameter $ k $:\n$$\n\\boldsymbol{F} = \\begin{bmatrix} 1 & k \\\\ 0 & 1 \\end{bmatrix}, \\quad \\boldsymbol{F}^{-1} = \\begin{bmatrix} 1 & -k \\\\ 0 & 1 \\end{bmatrix}, \\quad \\boldsymbol{F}^{-T} = \\begin{bmatrix} 1 & 0 \\\\ -k & 1 \\end{bmatrix}\n$$\nFor rigid rotation by angle $ \\theta $:\n$$\n\\boldsymbol{F} = \\boldsymbol{R}(\\theta) = \\begin{bmatrix} \\cos \\theta & -\\sin \\theta \\\\ \\sin \\theta & \\cos \\theta \\end{bmatrix}\n$$\nSince rotation matrices are orthogonal, $ \\boldsymbol{F}^{-1} = \\boldsymbol{F}^T $, which implies $ \\boldsymbol{F}^{-T} = (\\boldsymbol{F}^T)^{-T} = \\boldsymbol{F} $.\nFor each case, the pressure gradient $ \\nabla p $ is calculated analytically and used to compute the residuals. The maximum norm of the momentum residual over the test points and the constant volume residual are then compared against their respective tolerances to determine the pass/fail status.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Designs and verifies manufactured solutions for plane-strain incompressible\n    hyperelasticity.\n    \"\"\"\n\n    T_eq = 1e-10\n    T_J = 1e-12\n\n    test_cases = [\n        {\n            \"type\": \"shear\",\n            \"param\": 0.6,\n            \"mu\": 1.7,\n            \"p_func\": lambda X: np.sin(np.pi * X[0]) * np.cos(2 * np.pi * X[1]),\n            \"grad_p_func\": lambda X: np.array([\n                np.pi * np.cos(np.pi * X[0]) * np.cos(2 * np.pi * X[1]),\n                -2 * np.pi * np.sin(np.pi * X[0]) * np.sin(2 * np.pi * X[1])\n            ]),\n            \"points\": [\n                (0.0, 0.0), (0.0, 0.5), (0.0, 1.0),\n                (0.5, 0.0), (0.5, 0.5), (0.5, 1.0),\n                (1.0, 0.0), (1.0, 0.5), (1.0, 1.0)\n            ]\n        },\n        {\n            \"type\": \"rotation\",\n            \"param\": 0.8,\n            \"mu\": 3.0,\n            \"p_func\": lambda X: np.exp(X[0] + 2 * X[1]),\n            \"grad_p_func\": lambda X: np.array([\n                np.exp(X[0] + 2 * X[1]),\n                2 * np.exp(X[0] + 2 * X[1])\n            ]),\n            \"points\": [(0.0, 0.0), (1.0, 0.0), (0.0, 1.0), (1.0, 1.0), (0.25, 0.75)]\n        },\n        {\n            \"type\": \"shear\",\n            \"param\": 10.0,\n            \"mu\": 5.0,\n            \"p_func\": lambda X: X[0]**3 - 2 * X[0] * X[1] + X[1]**2,\n            \"grad_p_func\": lambda X: np.array([\n                3 * X[0]**2 - 2 * X[1],\n                -2 * X[0] + 2 * X[1]\n            ]),\n            \"points\": [(0.1, 0.2), (0.6, 0.4), (0.9, 0.9), (0.0, 1.0)]\n        },\n        {\n            \"type\": \"rotation\",\n            \"param\": -1.2,\n            \"mu\": 0.7,\n            \"p_func\": lambda X: 0.0,\n            \"grad_p_func\": lambda X: np.array([0.0, 0.0]),\n            \"points\": [(0.3, 0.7), (0.8, 0.2), (0.0, 0.0), (1.0, 1.0)]\n        }\n    ]\n\n    results = []\n\n    for case in test_cases:\n        case_type = case[\"type\"]\n        param = case[\"param\"]\n        grad_p_func = case[\"grad_p_func\"]\n        points = case[\"points\"]\n\n        # 1. Define deformation gradient F\n        if case_type == 'shear':\n            k = param\n            F = np.array([[1.0, k], [0.0, 1.0]])\n        elif case_type == 'rotation':\n            theta = param\n            c, s = np.cos(theta), np.sin(theta)\n            F = np.array([[c, -s], [s, c]])\n        else:\n            raise ValueError(f\"Unknown case type: {case_type}\")\n\n        # 2. Compute volume constraint residual c\n        c = np.linalg.det(F) - 1.0\n        is_volume_ok = abs(c) <= T_J\n\n        # 3. Compute F inverse transpose\n        F_inv_T = np.linalg.inv(F).T\n\n        # 4. Compute momentum residuals at all points\n        max_r_norm = 0.0\n        for point_coords in points:\n            X = np.array(point_coords)\n            \n            # Calculate manufactured body force b\n            grad_p = grad_p_func(X)\n            b = F_inv_T @ grad_p\n            \n            # Since F is constant, Div(mu*F) = 0.\n            # Div(P) = Div(mu*F - p*F^-T) = -Div(p*F^-T)\n            # Div(p*F^-T) = F^-T * grad(p) + p*Div(F^-T). Since F^-T is constant, Div(F^-T)=0.\n            # So, Div(P) = -F^-T * grad(p)\n            div_P = -F_inv_T @ grad_p\n\n            # Momentum residual r = Div(P) + b\n            r = div_P + b\n            \n            r_norm = np.linalg.norm(r)\n            if r_norm > max_r_norm:\n                max_r_norm = r_norm\n\n        # 5. Check momentum residual against tolerance\n        is_momentum_ok = max_r_norm <= T_eq\n\n        # 6. Aggregate results\n        results.append(is_volume_ok and is_momentum_ok)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2545834"}]}