{"hands_on_practices": [{"introduction": "Validating simulation tools is a critical first step in computational research. Before using a program to explore unknown phenomena, one must be confident that it correctly implements the underlying physical model. This exercise [@problem_id:2787502] provides hands-on practice in this essential task by deriving the analytical properties of an ideal gas in the isothermal-isobaric ($NPT$) ensemble and implementing a statistical test to verify that simulation data conform to these exact theoretical predictions, ensuring the sampler is working correctly.", "problem": "You are tasked with designing and implementing a programmatic validation procedure for equilibrium sampling in the isothermal–isobaric ensemble (Number–Pressure–Temperature, written as $NPT$) in the ideal-gas limit, with both a thermostat and a barostat enabled. The goal is to verify that the sampled volume statistics are consistent with the $NPT$ ensemble predictions for a classical ideal gas, without relying on any specific molecular dynamics integration details. Your procedure must be rooted in first principles and test the agreement between empirical volume statistics and the theoretically expected values, including both the average volume and the volume fluctuations.\n\nBegin from the following fundamental base:\n- The classical ideal gas canonical partition function for $N$ indistinguishable particles in a volume $V$ at temperature $T$ is $Z_{NVT}(N,V,T) = \\frac{1}{N!}\\left(\\frac{V}{\\Lambda^3}\\right)^N$, where $\\Lambda$ is the thermal de Broglie wavelength.\n- The isothermal–isobaric partition function is defined by an integral over the volume: $\\Delta(N,P,T) = \\int_{0}^{\\infty} dV \\, e^{-\\beta P V} Z_{NVT}(N,V,T)$, with $\\beta = 1/(k_{\\mathrm{B}} T)$ and $k_{\\mathrm{B}}$ being the Boltzmann constant.\n- The physical constants and units must be used consistently: pressure $P$ in pascals (Pa), temperature $T$ in kelvin (K), Boltzmann constant $k_{\\mathrm{B}}$ in joule per kelvin, and all volumes $V$ in cubic meters (m$^3$). Use $k_{\\mathrm{B}} = 1.380649 \\times 10^{-23}$ J/K.\n\nYour tasks are:\n1) From the foundational definitions above, derive the analytical expressions, in terms of $N$, $P$, $T$, and $k_{\\mathrm{B}}$, for the ideal-gas $NPT$ ensemble:\n   - The expected mean volume $\\mathbb{E}[V]$.\n   - The variance of the volume $\\mathrm{Var}(V)$.\n   - The expected second moment $\\mathbb{E}[V^2]$ and the variance of the squared volume $\\mathrm{Var}(V^2)$.\n   Your derivation must start from the probability density of $V$ implied by the isothermal–isobaric construction, without assuming the target results.\n\n2) Using these analytic moments, design a statistical validation test for a set of sampled volumes $\\{V_i\\}_{i=1}^{M}$ as follows:\n   - Treat the sample mean $\\overline{V} = \\frac{1}{M}\\sum_{i=1}^M V_i$ and the sample mean of squares $\\overline{V^2} = \\frac{1}{M}\\sum_{i=1}^M V_i^2$ as empirical estimators for $\\mathbb{E}[V]$ and $\\mathbb{E}[V^2]$, respectively.\n   - Using the Central Limit Theorem, approximate the distributions of $\\overline{V}$ and $\\overline{V^2}$ as normal with variances $\\mathrm{Var}(V)/M$ and $\\mathrm{Var}(V^2)/M$, respectively. Construct two-sided $z$-tests for both $\\overline{V}$ and $\\overline{V^2}$ at a significance level $\\alpha = 0.01$.\n   - Define the validation to pass if and only if both $z$-tests do not reject the null hypotheses that the sampled mean and sampled second moment match the theoretical predictions.\n\n3) Implement a program that:\n   - Computes the required analytical moments from part $1)$ for given $N$, $T$, and $P$.\n   - Generates synthetic sample volume data by sampling from the implied ideal-gas $NPT$ volume distribution using a gamma distribution model derived from first principles. Use a specified random seed for reproducibility.\n   - Executes the two $z$-tests specified in part $2)$ and returns a boolean indicating pass (true) or fail (false) for each test case.\n\nUnits and numerical conventions:\n- Temperatures must be in $K$ and pressures in $Pa$.\n- All volumes must be in $m^3$.\n- Boltzmann constant must be $k_{\\mathrm{B}} = 1.380649 \\times 10^{-23}$ J/K.\n- When generating synthetic data, take care to sample independent variates and use the specified seeds to ensure deterministic behavior.\n\nTest suite:\nYour program must run the following four test cases internally, with the exact parameters and seeds, generating synthetic samples accordingly. In cases $1$, $2$, and $3$, the samples are generated at the same temperature used for validation; in case $4$, the samples are generated at a different temperature while validation is performed against the specified target temperature, to emulate a mis-specified thermostat.\n\n- Case $1$ (happy path, moderate $N$):\n  - $N = 64$, $T_{\\mathrm{eval}} = 300$ K, $P = 1.0 \\times 10^{5}$ Pa, sample size $M = 40000$, random seed $12345$.\n  - Sampling temperature $T_{\\mathrm{true}} = T_{\\mathrm{eval}}$.\n\n- Case $2$ (boundary condition, very small $N$):\n  - $N = 1$, $T_{\\mathrm{eval}} = 1000$ K, $P = 5.0 \\times 10^{5}$ Pa, $M = 200000$, random seed $67890$.\n  - Sampling temperature $T_{\\mathrm{true}} = T_{\\mathrm{eval}}$.\n\n- Case $3$ (large $N$ regime):\n  - $N = 500$, $T_{\\mathrm{eval}} = 350$ K, $P = 2.0 \\times 10^{5}$ Pa, $M = 30000$, random seed $13579$.\n  - Sampling temperature $T_{\\mathrm{true}} = T_{\\mathrm{eval}}$.\n\n- Case $4$ (error detection via mis-specified thermostat):\n  - $N = 128$, $T_{\\mathrm{eval}} = 300$ K, $P = 1.0 \\times 10^{5}$ Pa, $M = 50000$, random seed $24680$.\n  - Sampling temperature $T_{\\mathrm{true}} = 330$ K.\n\nFinal output specification:\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, in the order of the cases above. For example: \"[$\\text{result}_1,\\text{result}_2,\\text{result}_3,\\text{result}_4$]\".\n- Each result must be a boolean indicating whether the validation passed for that case. The only printed line must be this list, with no additional text.", "solution": "The problem as presented is valid. It is a well-posed problem in statistical mechanics that is grounded in fundamental principles, free of factual errors, and contains all necessary information for a unique solution. We will proceed with the derivation and implementation.\n\nThe first task is to derive the analytical expressions for the moments of the volume $V$ for a classical ideal gas in the isothermal-isobaric ($NPT$) ensemble.\n\nThe starting point is the isothermal-isobaric partition function $\\Delta(N,P,T)$:\n$$\n\\Delta(N,P,T) = \\int_{0}^{\\infty} dV \\, e^{-\\beta P V} Z_{NVT}(N,V,T)\n$$\nwhere $\\beta = 1/(k_{\\mathrm{B}} T)$ and $Z_{NVT}(N,V,T)$ is the canonical partition function for $N$ indistinguishable particles:\n$$\nZ_{NVT}(N,V,T) = \\frac{1}{N!}\\left(\\frac{V}{\\Lambda^3}\\right)^N\n$$\nHere, $\\Lambda$ is the thermal de Broglie wavelength, which depends on temperature but not on volume. We can write $Z_{NVT}$ as $C(N,T) V^N$, where $C(N,T) = \\frac{1}{N!\\Lambda^{3N}}$ contains all non-volume dependencies.\n\nThe probability density function for the volume $V$, denoted $p(V)$, is proportional to the integrand of the expression for $\\Delta$:\n$$\np(V) \\propto e^{-\\beta P V} Z_{NVT}(N,V,T) \\propto e^{-\\beta P V} V^N\n$$\nTo find the normalized probability density, we must compute the normalization constant, which is $\\Delta(N,P,T)$ itself.\n$$\n\\Delta(N,P,T) = C(N,T) \\int_{0}^{\\infty} V^N e^{-\\beta P V} dV\n$$\nThe integral is a standard form of the Gamma function integral, $\\int_0^\\infty x^n e^{-ax} dx = n!/a^{n+1}$. With $n=N$ and $a=\\beta P$, we have:\n$$\n\\int_{0}^{\\infty} V^N e^{-\\beta P V} dV = \\frac{N!}{(\\beta P)^{N+1}}\n$$\nThus, the partition function is:\n$$\n\\Delta(N,P,T) = C(N,T) \\frac{N!}{(\\beta P)^{N+1}}\n$$\nThe normalized probability density is then:\n$$\np(V) = \\frac{e^{-\\beta P V} C(N,T) V^N}{\\Delta(N,P,T)} = \\frac{e^{-\\beta P V} C(N,T) V^N}{C(N,T) \\frac{N!}{(\\beta P)^{N+1}}} = \\frac{(\\beta P)^{N+1}}{N!} V^N e^{-\\beta P V}\n$$\nThis is the probability density function for a Gamma distribution. A variable $X$ following a Gamma distribution with shape parameter $k$ and scale parameter $\\theta$ has a PDF $f(x; k, \\theta) = \\frac{1}{\\Gamma(k)\\theta^k} x^{k-1} e^{-x/\\theta}$. Comparing this with $p(V)$, and noting that $\\Gamma(N+1)=N!$, we identify the parameters for the volume distribution as:\nShape parameter $k = N+1$.\nScale parameter $\\theta = \\frac{1}{\\beta P} = \\frac{k_{\\mathrm{B}} T}{P}$.\n\nThe moments $\\mathbb{E}[V^m]$ of a Gamma-distributed variable can be calculated directly or from its moment-generating function. A general formula for the moments is $\\mathbb{E}[X^m] = \\theta^m \\frac{\\Gamma(k+m)}{\\Gamma(k)}$. For our distribution, this becomes:\n$$\n\\mathbb{E}[V^m] = \\left(\\frac{1}{\\beta P}\\right)^m \\frac{\\Gamma(N+1+m)}{\\Gamma(N+1)} = \\left(\\frac{k_{\\mathrm{B}} T}{P}\\right)^m \\frac{(N+m)!}{N!}\n$$\nWe now compute the specific moments required by the problem.\n\nFor $m=1$:\n$$\n\\mathbb{E}[V] = \\left(\\frac{k_{\\mathrm{B}} T}{P}\\right) \\frac{(N+1)!}{N!} = (N+1)\\frac{k_{\\mathrm{B}} T}{P}\n$$\nFor $m=2$:\n$$\n\\mathbb{E}[V^2] = \\left(\\frac{k_{\\mathrm{B}} T}{P}\\right)^2 \\frac{(N+2)!}{N!} = (N+2)(N+1)\\left(\\frac{k_{\\mathrm{B}} T}{P}\\right)^2\n$$\nThe variance of the volume, $\\mathrm{Var}(V) = \\mathbb{E}[V^2] - (\\mathbb{E}[V])^2$, is:\n$$\n\\mathrm{Var}(V) = (N+2)(N+1)\\left(\\frac{k_{\\mathrm{B}} T}{P}\\right)^2 - \\left((N+1)\\frac{k_{\\mathrm{B}} T}{P}\\right)^2\n$$\n$$\n\\mathrm{Var}(V) = ((N+2)(N+1) - (N+1)^2)\\left(\\frac{k_{\\mathrm{B}} T}{P}\\right)^2 = (N+1)(N+2 - (N+1))\\left(\\frac{k_{\\mathrm{B}} T}{P}\\right)^2\n$$\n$$\n\\mathrm{Var}(V) = (N+1)\\left(\\frac{k_{\\mathrm{B}} T}{P}\\right)^2\n$$\nNext, we require the moments of the squared volume, $V^2$. For this we need $\\mathbb{E}[V^3]$ and $\\mathbb{E}[V^4]$.\nFor $m=3$:\n$$\n\\mathbb{E}[V^3] = (N+3)(N+2)(N+1)\\left(\\frac{k_{\\mathrm{B}} T}{P}\\right)^3\n$$\nFor $m=4$:\n$$\n\\mathbb{E}[V^4] = (N+4)(N+3)(N+2)(N+1)\\left(\\frac{k_{\\mathrm{B}} T}{P}\\right)^4\n$$\nThe variance of the squared volume, $\\mathrm{Var}(V^2) = \\mathbb{E}[(V^2)^2] - (\\mathbb{E}[V^2])^2 = \\mathbb{E}[V^4] - (\\mathbb{E}[V^2])^2$, is:\n$$\n\\mathrm{Var}(V^2) = (N+4)(N+3)(N+2)(N+1)\\left(\\frac{k_{\\mathrm{B}} T}{P}\\right)^4 - \\left((N+2)(N+1)\\left(\\frac{k_{\\mathrm{B}} T}{P}\\right)^2\\right)^2\n$$\n$$\n\\mathrm{Var}(V^2) = \\left[(N+4)(N+3) - (N+2)(N+1)\\right](N+2)(N+1)\\left(\\frac{k_{\\mathrm{B}} T}{P}\\right)^4\n$$\nThe term in the square brackets simplifies: $(N^2+7N+12) - (N^2+3N+2) = 4N+10$.\n$$\n\\mathrm{Var}(V^2) = (4N+10)(N+2)(N+1)\\left(\\frac{k_{\\mathrm{B}} T}{P}\\right)^4 = 2(2N+5)(N+2)(N+1)\\left(\\frac{k_{\\mathrm{B}} T}{P}\\right)^4\n$$\n\nThe second task is to design the statistical validation test.\nGiven a set of $M$ sampled volumes $\\{V_i\\}_{i=1}^{M}$, we compute the sample mean $\\overline{V} = \\frac{1}{M}\\sum_{i=1}^{M} V_i$ and the sample mean of squares $\\overline{V^2} = \\frac{1}{M}\\sum_{i=1}^{M} V_i^2$.\n\nThe Central Limit Theorem states that for a large sample size $M$, the distribution of the sample mean $\\overline{X}$ of a random variable $X$ approaches a normal distribution with mean $\\mathbb{E}[X]$ and variance $\\mathrm{Var}(X)/M$. We apply this to both $V$ and $V^2$.\n\nThe null hypotheses are:\n$H_{0,1}$: The sample mean $\\overline{V}$ is drawn from a distribution with mean $\\mathbb{E}[V]$.\n$H_{0,2}$: The sample mean of squares $\\overline{V^2}$ is drawn from a distribution with mean $\\mathbb{E}[V^2]$.\n\nWe construct two-sided $z$-tests. The test statistics are:\n$$\nz_1 = \\frac{\\overline{V} - \\mathbb{E}[V]}{\\sqrt{\\mathrm{Var}(V)/M}}\n$$\n$$\nz_2 = \\frac{\\overline{V^2} - \\mathbb{E}[V^2]}{\\sqrt{\\mathrm{Var}(V^2)/M}}\n$$\nFor a significance level $\\alpha = 0.01$, the critical value $z_{\\alpha/2}$ is determined by the standard normal cumulative distribution function $\\Phi(z_{\\alpha/2}) = 1 - \\alpha/2 = 0.995$. This gives $z_{0.005} \\approx 2.5758$.\n\nThe validation passes if and only if both null hypotheses are not rejected. This condition is met if:\n$|z_1| \\le z_{\\alpha/2}$ and $|z_2| \\le z_{\\alpha/2}$.\n\nThe third task is the implementation of this procedure, which is provided in the final answer. The program will compute the theoretical moments using the derived formulae, generate synthetic volume data by sampling from the corresponding Gamma distribution, calculate the sample statistics and $z$-scores, and perform the hypothesis tests. Case 4 tests a scenario where the sampling temperature $T_{\\mathrm{true}}$ differs from the evaluation temperature $T_{\\mathrm{eval}}$, which should lead to a test failure, demonstrating the sensitivity of the method.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.stats import norm\n\ndef solve():\n    \"\"\"\n    Main function to run the validation procedure for all test cases.\n    \"\"\"\n    # Define physical constants and test parameters\n    KB = 1.380649e-23  # Boltzmann constant in J/K\n    ALPHA = 0.01  # Significance level for z-tests\n\n    # Critical z-value for a two-sided test at significance level ALPHA\n    z_crit = norm.ppf(1 - ALPHA / 2)\n\n    # Define the test cases from the problem statement.\n    test_cases = [\n        # Case 1: happy path, moderate N\n        {'N': 64, 'T_eval': 300.0, 'P': 1.0e5, 'M': 40000, 'seed': 12345, 'T_true': 300.0},\n        # Case 2: boundary condition, very small N\n        {'N': 1, 'T_eval': 1000.0, 'P': 5.0e5, 'M': 200000, 'seed': 67890, 'T_true': 1000.0},\n        # Case 3: large N regime\n        {'N': 500, 'T_eval': 350.0, 'P': 2.0e5, 'M': 30000, 'seed': 13579, 'T_true': 350.0},\n        # Case 4: error detection via mis-specified thermostat\n        {'N': 128, 'T_eval': 300.0, 'P': 1.0e5, 'M': 50000, 'seed': 24680, 'T_true': 330.0},\n    ]\n\n    results = []\n    for case in test_cases:\n        # Unpack parameters\n        N = case['N']\n        T_eval = case['T_eval']\n        P = case['P']\n        M = case['M']\n        seed = case['seed']\n        T_true = case['T_true']\n\n        # --- 1. Compute theoretical moments based on T_eval ---\n        # The theoretical moments are evaluated at T_eval and P\n        term = KB * T_eval / P\n\n        # Expected value of Volume, E[V]\n        E_V = (N + 1) * term\n\n        # Variance of Volume, Var(V)\n        Var_V = (N + 1) * (term**2)\n\n        # Expected value of Volume squared, E[V^2]\n        E_V2 = (N + 2) * (N + 1) * (term**2)\n\n        # Variance of Volume squared, Var(V^2) = E[V^4] - (E[V^2])^2\n        # E[V^4] = (N+4)(N+3)(N+2)(N+1) * term^4\n        # Var(V^2) = [(N+4)(N+3) - (N+2)(N+1)] * (N+2)(N+1) * term^4\n        # The term in brackets is (4N + 10)\n        Var_V2 = (4 * N + 10) * (N + 2) * (N + 1) * (term**4)\n\n        # --- 2. Generate synthetic sample data based on T_true ---\n        # The data is sampled from a Gamma distribution with parameters\n        # derived from the true temperature T_true.\n        # Shape parameter k = N + 1\n        # Scale parameter theta = kB * T_true / P\n        rng = np.random.default_rng(seed)\n        shape_param = N + 1\n        scale_param = KB * T_true / P\n        \n        # Generate M independent samples for Volume\n        V_samples = rng.gamma(shape_param, scale_param, M)\n\n        # --- 3. Compute sample statistics ---\n        # Sample mean of V\n        V_mean_sample = np.mean(V_samples)\n        \n        # Sample mean of V^2\n        V2_mean_sample = np.mean(V_samples**2)\n\n        # --- 4. Perform z-tests ---\n        # z-test for the mean of V\n        z_V_num = V_mean_sample - E_V\n        z_V_den = np.sqrt(Var_V / M)\n        z1 = z_V_num / z_V_den\n\n        # z-test for the mean of V^2\n        z_V2_num = V2_mean_sample - E_V2\n        z_V2_den = np.sqrt(Var_V2 / M)\n        z2 = z_V2_num / z_V2_den\n\n        # Validation passes if both tests do not reject the null hypothesis\n        validation_passed = (np.abs(z1) = z_crit) and (np.abs(z2) = z_crit)\n        results.append(validation_passed)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2787502"}, {"introduction": "A primary goal of molecular simulation is to compute thermodynamic properties that are difficult to measure experimentally, such as free energy. This practice [@problem_id:2787469] demonstrates how to calculate Gibbs free energy differences, a central quantity in chemistry and materials science. You will derive and implement the thermodynamic integration formula $G(P_2) - G(P_1) = \\int_{P_1}^{P_2} \\langle V \\rangle dP$, connecting a macroscopic free energy change to a microscopic ensemble average of the system volume.", "problem": "An isothermal–isobaric ensemble provides a rigorous statistical mechanical foundation for Gibbs free energy at fixed particle number, pressure, and temperature. Starting from fundamental definitions only, and without invoking any formula that is a direct statement of the target result, complete the following.\n\n- Derivation task. Begin with the definition of the isothermal–isobaric partition function for a classical system of $N$ particles with Hamiltonian $H(\\mathbf{p},\\mathbf{r};V)$ at pressure $P$ and temperature $T$, together with the definition of the Gibbs free energy $G(N,P,T)$, and the Gibbs–Helmholtz relation with respect to Legendre transforms. Use these base definitions to derive an exact relation that connects the derivative $\\partial G/\\partial P$ at fixed $N$ and $T$ to an ensemble average in the isothermal–isobaric ensemble, and then integrate that derivative with respect to pressure to obtain a one-dimensional thermodynamic integration formula for the difference $G(N,P_{2},T)-G(N,P_{1},T)$ in terms of a pressure integral over an ensemble average. Your derivation must explicitly show each logical step starting only from these foundational definitions and may not assume any specialized result about the isothermal–isobaric ensemble beyond those definitions.\n\n- Surface adsorption protocol task. Consider adsorption of a molecular species onto a planar solid surface at fixed temperature $T$ and external pressure $P$. Outline a scientifically sound, simulation-ready protocol based on the isothermal–isobaric ensemble that would enable computation of the adsorption Gibbs free energy $ \\Delta G_{\\mathrm{ads}}(T,P) $ from molecular dynamics or Monte Carlo simulations. Your protocol should specify: (i) which systems to simulate, (ii) what observables to measure in each system at each pressure, (iii) how to combine these observables into a pressure integral that advances $ \\Delta G_{\\mathrm{ads}} $ from a reference pressure $P_{\\mathrm{ref}}$ to a target pressure $P$, and (iv) how to incorporate a known reference value $\\Delta G_{\\mathrm{ads}}(T,P_{\\mathrm{ref}})$ to obtain $\\Delta G_{\\mathrm{ads}}(T,P)$. Explicitly state any standard-state and finite-size considerations, and specify how to treat the surface geometry and barostat so that the protocol is applicable to nanomechanical surface systems.\n\n- Programming task. Implement a program that takes prescribed discrete isothermal–isobaric observables and computes pressure-integrated Gibbs free energy differences using the composite trapezoidal rule applied on the provided pressure grids. If the integration bounds are not exactly grid points, use linear interpolation to insert the bounds before integrating. All outputs must be expressed as molar quantities in kilojoules per mole (kJ/mol), rounded to $6$ decimal places. Angles are not used. Use the following test suite (pressures in pascal, molar volumes in $\\mathrm{m}^{3}\\,\\mathrm{mol}^{-1}$, energies in $\\mathrm{kJ}\\,\\mathrm{mol}^{-1}$):\n\n  - Test case A (general gas-like case). Integrate from $P_{1}=1.0\\times 10^{5}$ to $P_{2}=1.0\\times 10^{6}$ using the pressure grid $[1.0\\times 10^{5},\\,2.5\\times 10^{5},\\,5.0\\times 10^{5},\\,7.5\\times 10^{5},\\,1.0\\times 10^{6}]$ with corresponding molar volumes $V_{m}=[2.4943387854\\times 10^{-2},\\,9.9773551416\\times 10^{-3},\\,4.9886775708\\times 10^{-3},\\,3.3257850472\\times 10^{-3},\\,2.4943387854\\times 10^{-3}]$. Return the trapezoidal estimate of $\\int_{P_{1}}^{P_{2}} V_{m}(P)\\,dP$ in $\\mathrm{kJ}\\,\\mathrm{mol}^{-1}$.\n\n  - Test case B (nearly incompressible solid, linear compressibility over the range). Integrate from $P_{1}=0$ to $P_{2}=1.0\\times 10^{9}$ using the pressure grid $[0,\\,2.5\\times 10^{8},\\,5.0\\times 10^{8},\\,7.5\\times 10^{8},\\,1.0\\times 10^{9}]$ with corresponding molar volumes $V_{m}=[1.000\\times 10^{-5},\\,9.975\\times 10^{-6},\\,9.950\\times 10^{-6},\\,9.925\\times 10^{-6},\\,9.900\\times 10^{-6}]$. Return the trapezoidal estimate of $\\int_{P_{1}}^{P_{2}} V_{m}(P)\\,dP$ in $\\mathrm{kJ}\\,\\mathrm{mol}^{-1}$.\n\n  - Test case C (boundary condition check). Integrate from $P_{1}=5.0\\times 10^{5}$ to $P_{2}=5.0\\times 10^{5}$ on the pressure grid $[4.0\\times 10^{5},\\,5.0\\times 10^{5},\\,6.0\\times 10^{5}]$ with any constant molar volume grid $V_{m}=[1.000\\times 10^{-5},\\,1.000\\times 10^{-5},\\,1.000\\times 10^{-5}]$. Return the trapezoidal estimate in $\\mathrm{kJ}\\,\\mathrm{mol}^{-1}$.\n\n  - Test case D (adsorption pressure advance with known reference). A reference adsorption free energy at $P_{\\mathrm{ref}}=1.0\\times 10^{5}$ is given as $\\Delta G_{\\mathrm{ads}}(T,P_{\\mathrm{ref}})=-20.000$ in $\\mathrm{kJ}\\,\\mathrm{mol}^{-1}$. The adsorption molar volume change as a function of pressure is supplied directly on the grid $[1.0\\times 10^{5},\\,2.0\\times 10^{5},\\,3.0\\times 10^{5},\\,4.0\\times 10^{5},\\,5.0\\times 10^{5}]$ as $\\Delta V_{m}=[-2.4942387854\\times 10^{-2},\\,-1.2470693927\\times 10^{-2},\\,-8.3134626180\\times 10^{-3},\\,-6.2348469635\\times 10^{-3},\\,-4.9876775708\\times 10^{-3}]$. Compute $\\int_{P_{\\mathrm{ref}}}^{P_{2}} \\Delta V_{m}(P)\\,dP$ with $P_{2}=5.0\\times 10^{5}$ using the composite trapezoidal rule on this grid, convert to $\\mathrm{kJ}\\,\\mathrm{mol}^{-1}$, add it to the given reference to obtain $\\Delta G_{\\mathrm{ads}}(T,P_{2})$, and return that value.\n\nYour program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets (for example, $[x_{A},x_{B},x_{C},x_{D}]$), where $x_{A}$, $x_{B}$, $x_{C}$, and $x_{D}$ are the rounded $\\mathrm{kJ}\\,\\mathrm{mol}^{-1}$ values for Test cases A, B, C, and D, respectively.", "solution": "The problem presented is a valid, well-posed problem in statistical mechanics and computational science. It is scientifically grounded, internally consistent, and contains all necessary information for its resolution. I will proceed with the solution, which is divided into three parts as requested: derivation, protocol design, and numerical implementation.\n\n### Derivation Task\n\nThe objective is to derive the thermodynamic integration formula for the Gibbs free energy difference, $G(N,P_{2},T) - G(N,P_{1},T)$, starting from fundamental definitions.\n\nThe isothermal-isobaric ($NPT$) ensemble describes a system with a fixed number of particles $N$ at a constant temperature $T$ and constant pressure $P$. The corresponding partition function, $\\Delta(N,P,T)$, is defined by an integral over all possible volumes $V$ and all phase space configurations $(\\mathbf{p}, \\mathbf{r})$ consistent with that volume.\n\nThe partition function is given by:\n$$\n\\Delta(N,P,T) = C \\int_{0}^{\\infty} dV \\, e^{-\\beta PV} \\int d\\mathbf{p}^{3N} d\\mathbf{r}^{3N} \\, e^{-\\beta H(\\mathbf{p}, \\mathbf{r}; V)}\n$$\nwhere $\\beta = (k_B T)^{-1}$, $k_B$ is the Boltzmann constant, and $H(\\mathbf{p}, \\mathbf{r}; V)$ is the Hamiltonian of the system of volume $V$. The constant $C$ incorporates factors like $(h^{3N}N!)^{-1}$ and other normalization constants that are independent of pressure $P$ and volume $V$.\n\nWe can rewrite this by identifying the canonical partition function $Z(N,V,T)$:\n$$\nZ(N,V,T) = C' \\int d\\mathbf{p}^{3N} d\\mathbf{r}^{3N} \\, e^{-\\beta H(\\mathbf{p}, \\mathbf{r}; V)}\n$$\nsuch that\n$$\n\\Delta(N,P,T) = C'' \\int_{0}^{\\infty} dV \\, e^{-\\beta PV} Z(N,V,T)\n$$\nwhere $C''$ is another constant.\n\nThe fundamental connection between statistical mechanics and thermodynamics is provided by the relation between the partition function and the corresponding thermodynamic potential. For the isothermal-isobaric ensemble, this potential is the Gibbs free energy $G(N,P,T)$:\n$$\nG(N,P,T) = -k_B T \\ln \\Delta(N,P,T)\n$$\nThe problem requires deriving the relation for the pressure derivative of $G$. We differentiate $G$ with respect to $P$ at constant $N$ and $T$:\n$$\n\\frac{\\partial G}{\\partial P}\\bigg|_{N,T} = -k_B T \\frac{1}{\\Delta(N,P,T)} \\frac{\\partial \\Delta(N,P,T)}{\\partial P}\\bigg|_{N,T}\n$$\nNow, we compute the derivative of the partition function $\\Delta$ with respect to $P$:\n$$\n\\frac{\\partial \\Delta}{\\partial P}\\bigg|_{N,T} = C'' \\frac{\\partial}{\\partial P} \\int_{0}^{\\infty} dV \\, e^{-\\beta PV} Z(N,V,T)\n$$\nUsing the Leibniz rule for differentiation under the integral sign:\n$$\n\\frac{\\partial \\Delta}{\\partial P} = C'' \\int_{0}^{\\infty} dV \\, Z(N,V,T) \\, \\frac{\\partial}{\\partial P} (e^{-\\beta PV}) = C'' \\int_{0}^{\\infty} dV \\, Z(N,V,T) \\, (-\\beta V) e^{-\\beta PV}\n$$\n$$\n\\frac{\\partial \\Delta}{\\partial P} = -\\beta \\left( C'' \\int_{0}^{\\infty} dV \\, V \\, e^{-\\beta PV} Z(N,V,T) \\right)\n$$\nSubstituting this result back into the expression for $\\partial G / \\partial P$:\n$$\n\\frac{\\partial G}{\\partial P} = -k_B T \\frac{1}{\\Delta} \\left[ -\\beta \\left( C'' \\int_{0}^{\\infty} dV \\, V \\, e^{-\\beta PV} Z(N,V,T) \\right) \\right]\n$$\nSubstituting $\\beta = (k_B T)^{-1}$, this simplifies to:\n$$\n\\frac{\\partial G}{\\partial P} = \\frac{C'' \\int_{0}^{\\infty} dV \\, V \\, e^{-\\beta PV} Z(N,V,T)}{\\Delta(N,P,T)}\n$$\nThe expression on the right-hand side is precisely the definition of the ensemble average of the volume, denoted as $\\langle V \\rangle_{NPT}$. The probability density for finding the system with volume $V$ in the $NPT$ ensemble is proportional to $e^{-\\beta PV} Z(N,V,T)$. Thus, the average volume is:\n$$\n\\langle V \\rangle_{NPT} = \\frac{\\int_{0}^{\\infty} dV \\, V \\, e^{-\\beta PV} Z(N,V,T)}{\\int_{0}^{\\infty} dV \\, e^{-\\beta PV} Z(N,V,T)} = \\frac{C'' \\int_{0}^{\\infty} dV \\, V \\, e^{-\\beta PV} Z(N,V,T)}{\\Delta(N,P,T)}\n$$\nTherefore, we have derived the fundamental thermodynamic relation from statistical mechanical principles:\n$$\n\\frac{\\partial G}{\\partial P}\\bigg|_{N,T} = \\langle V \\rangle_{NPT}\n$$\nTo obtain the thermodynamic integration formula for the change in Gibbs free energy between two pressures, $P_1$ and $P_2$, at constant $N$ and $T$, we integrate this partial derivative with respect to pressure:\n$$\n\\int_{P_1}^{P_2} \\left( \\frac{\\partial G}{\\partial P'} \\right)_{N,T} dP' = \\int_{P_1}^{P_2} \\langle V \\rangle_{N,P',T} dP'\n$$\nThe left side evaluates to $G(N,P_2,T) - G(N,P_1,T)$. This yields the final thermodynamic integration formula:\n$$\nG(N,P_2,T) - G(N,P_1,T) = \\int_{P_1}^{P_2} \\langle V \\rangle_{N,P',T} dP'\n$$\nThis derivation fulfills the requirements, starting from the specified axiomatic definitions. The reference to the \"Gibbs-Helmholtz relation with respect to Legendre transforms\" alludes to the general principle that derivatives of thermodynamic potentials yield their conjugate variables, a principle which has been rigorously shown here for the $G, P, V$ relationship in the context of the $NPT$ ensemble.\n\n### Surface Adsorption Protocol Task\n\nThe goal is to compute the Gibbs free energy of adsorption, $\\Delta G_{\\mathrm{ads}}(T,P)$, for a molecule onto a planar solid surface. The adsorption process is defined as taking one molecule from the bulk gas phase and placing it onto the surface. The Gibbs free energy change for this process is:\n$$\n\\Delta G_{\\mathrm{ads}} = G_{\\mathrm{surf+ads}} - G_{\\mathrm{surf}} - G_{\\mathrm{gas, molecule}}\n$$\nwhere the terms represent the Gibbs free energies of the surface with an adsorbed molecule, the bare surface in contact with the bulk fluid, and one molecule in the bulk gas phase, respectively.\n\nUsing the result from the derivation, the pressure derivative of $\\Delta G_{\\mathrm{ads}}$ is:\n$$\n\\frac{\\partial (\\Delta G_{\\mathrm{ads}})}{\\partial P} = \\left\\langle V_{\\mathrm{surf+ads}} \\right\\rangle - \\left\\langle V_{\\mathrm{surf}} \\right\\rangle - \\left\\langle V_{\\mathrm{gas, molecule}} \\right\\rangle \\equiv \\Delta V_{\\mathrm{ads}}\n$$\nThis defines the change in volume upon adsorption, $\\Delta V_{\\mathrm{ads}}$, as the integrand for thermodynamic integration with respect to pressure. The following simulation-ready protocol enables its computation.\n\n(i) **Systems to Simulate**:\nTwo primary systems must be simulated using molecular dynamics or Monte Carlo in an appropriate isothermal-isobaric ensemble.\n1.  **System A (Adsorbed state)**: A simulation cell containing a solid slab representing the surface, surrounded by the fluid/gas phase composed of $M$ solvent/gas molecules, plus one molecule of the adsorbate species. The adsorbate is typically constrained to remain near the surface using a potential bias to define the adsorbed state.\n2.  **System B (Bare surface reference)**: An identical simulation cell containing the same solid slab and the same number $M$ of solvent/gas molecules, but without the adsorbate molecule.\n\n(ii) **Observables to Measure**:\nSimulations of both System A and System B are performed over a grid of pressure points, $\\{P_i\\}$, spanning the range from a reference pressure $P_{\\mathrm{ref}}$ to the target pressure $P$. At each pressure $P_i$:\n1.  Run the simulation for System A and compute the time-averaged volume, $\\langle V_A \\rangle(P_i)$.\n2.  Run the simulation for System B and compute the time-averaged volume, $\\langle V_B \\rangle(P_i)$.\n3.  The volume of one gas molecule, $\\langle V_{\\mathrm{gas, molecule}} \\rangle(P_i)$, must be determined. This is equivalent to the molar volume $V_m(P_i)$ divided by Avogadro's number $N_A$. The molar volume can be computed from a separate simulation of the pure bulk gas or from a reliable equation of state (e.g., the ideal gas law, $V_m = RT/P$, at low pressures).\n4.  Calculate the change in volume per mole of adsorbate, $\\Delta V_m(P_i)$:\n    $$\n    \\Delta V_m(P_i) = N_A \\times \\left( \\langle V_A \\rangle(P_i) - \\langle V_B \\rangle(P_i) - V_m(P_i)/N_A \\right) = N_A \\left( \\langle V_A \\rangle(P_i) - \\langle V_B \\rangle(P_i) \\right) - V_m(P_i)\n    $$\n\n(iii) **Pressure Integration**:\nThe set of discrete values $\\{\\Delta V_m(P_i)\\}$ is numerically integrated over pressure from $P_{\\mathrm{ref}}$ to $P$ to find the change in the adsorption free energy.\n$$\n\\int_{P_{\\mathrm{ref}}}^{P} \\Delta V_m(P') dP'\n$$\nStandard numerical quadrature rules, such as the composite trapezoidal rule, are employed for this integration using the collected data points.\n\n(iv) **Final Calculation with Reference Value**:\nThe final adsorption free energy at the target pressure $P$ is obtained by adding the pressure integral to a known reference value:\n$$\n\\Delta G_{\\mathrm{ads}}(T,P) = \\Delta G_{\\mathrm{ads}}(T,P_{\\mathrm{ref}}) + \\int_{P_{\\mathrm{ref}}}^{P} \\Delta V_m(P') dP'\n$$\nThe value $\\Delta G_{\\mathrm{ads}}(T,P_{\\mathrm{ref}})$ must be independently determined, for example via a potential of mean force (PMF) calculation at $P_{\\mathrm{ref}}$ or from experimental data.\n\n**Nanomechanical and Simulation Considerations**:\n- **Geometry and Periodicity**: To model a surface, a slab geometry with 3D periodic boundary conditions is used. A vacuum layer is added in the direction normal to the slab surface (e.g., the $z$-direction) to prevent interactions between periodic images of the slab.\n- **Barostat**: For a slab system, pressure is anisotropic. The external pressure $P$ corresponds to the normal pressure ($P_z$). The cell dimensions parallel to the surface ($L_x, L_y$) are typically held fixed, or pressure in these directions is coupled to a target surface tension (often zero). Therefore, an anisotropic barostat must be used, resulting in an $NP_zAT$ or $NP_{xx}P_{yy}P_zT$ ensemble. The \"volume\" measurement $\\langle V \\rangle$ is then the average of $A \\times L_z$, where area $A$ is constant and $L_z$ fluctuates.\n- **Finite-Size Effects**: The simulation results must be checked for convergence with respect to the surface area, slab thickness, and the amount of bulk fluid to ensure they represent the macroscopic limit.\n- **Standard State**: The calculated $\\Delta G_{\\mathrm{ads}}$ corresponds to the transfer of a molecule from the bulk at pressure $P$ to the surface. For reporting a standard free energy of adsorption, $\\Delta G^\\circ_{\\mathrm{ads}}$, corrections related to the standard states of the gas (e.g., $P^\\circ = 1$ bar) and the adsorbate (e.g., a specific surface coverage) must be applied.\n\n### Programming Task\n\nThe following program implements the required calculations. An integration function is defined to perform the composite trapezoidal rule on the provided data, handling cases where integration limits are not on the data grid via linear interpolation. This function is then applied to the four test cases specified. All final energy values are converted to kJ/mol and rounded to six decimal places.", "answer": "```python\nimport numpy as np\n\ndef integrate_with_interpolation(p_grid, v_grid, p1, p2):\n    \"\"\"\n    Computes the integral of v(p)dp from p1 to p2 using the composite\n    trapezoidal rule.\n\n    If p1 or p2 are not in p_grid, their corresponding v values are\n    found using linear interpolation.\n\n    Args:\n        p_grid (np.ndarray): Array of pressure points (x-values).\n        v_grid (np.ndarray): Array of volume values (y-values).\n        p1 (float): Lower integration bound.\n        p2 (float): Upper integration bound.\n\n    Returns:\n        float: The value of the definite integral.\n    \"\"\"\n    # Handle the trivial case\n    if p1 == p2:\n        return 0.0\n\n    # Ensure p1  p2 for simplicity; adjust sign at the end\n    sign = 1.0\n    if p1 > p2:\n        p1, p2 = p2, p1\n        sign = -1.0\n\n    # Create the new pressure grid for integration, including the bounds\n    # and all original points that lie within the integration range.\n    points_within = p_grid[(p_grid > p1)  (p_grid  p2)]\n    p_integration = np.unique(np.concatenate(([p1], points_within, [p2])))\n\n    # Interpolate to find the volume values on the new integration grid\n    v_integration = np.interp(p_integration, p_grid, v_grid)\n\n    # Compute the integral using numpy's trapezoidal rule implementation\n    integral = np.trapz(v_integration, p_integration)\n\n    return sign * integral\n\ndef solve():\n    \"\"\"\n    Solves the programming task by performing numerical integration on four\n    test cases as specified in the problem statement.\n    \"\"\"\n    J_PER_KJ = 1000.0\n    results = []\n\n    # Test case A (general gas-like case)\n    p_grid_a = np.array([1.0e5, 2.5e5, 5.0e5, 7.5e5, 1.0e6])\n    vm_grid_a = np.array([\n        2.4943387854e-2, 9.9773551416e-3, 4.9886775708e-3,\n        3.3257850472e-3, 2.4943387854e-3\n    ])\n    p1_a, p2_a = 1.0e5, 1.0e6\n    integral_a = integrate_with_interpolation(p_grid_a, vm_grid_a, p1_a, p2_a)\n    result_a = integral_a / J_PER_KJ\n    results.append(result_a)\n\n    # Test case B (nearly incompressible solid)\n    p_grid_b = np.array([0, 2.5e8, 5.0e8, 7.5e8, 1.0e9])\n    vm_grid_b = np.array([\n        1.000e-5, 9.975e-6, 9.950e-6, 9.925e-6, 9.900e-6\n    ])\n    p1_b, p2_b = 0, 1.0e9\n    integral_b = integrate_with_interpolation(p_grid_b, vm_grid_b, p1_b, p2_b)\n    result_b = integral_b / J_PER_KJ\n    results.append(result_b)\n\n    # Test case C (boundary condition check)\n    p_grid_c = np.array([4.0e5, 5.0e5, 6.0e5])\n    vm_grid_c = np.array([1.0e-5, 1.0e-5, 1.0e-5])\n    p1_c, p2_c = 5.0e5, 5.0e5\n    integral_c = integrate_with_interpolation(p_grid_c, vm_grid_c, p1_c, p2_c)\n    result_c = integral_c / J_PER_KJ\n    results.append(result_c)\n\n    # Test case D (adsorption pressure advance)\n    p_ref_d = 1.0e5\n    p2_d = 5.0e5\n    delta_g_ref_d = -20.000  # in kJ/mol\n    p_grid_d = np.array([1.0e5, 2.0e5, 3.0e5, 4.0e5, 5.0e5])\n    delta_vm_grid_d = np.array([\n        -2.4942387854e-2, -1.2470693927e-2, -8.3134626180e-3,\n        -6.2348469635e-3, -4.9876775708e-3\n    ])\n    \n    integral_d = integrate_with_interpolation(p_grid_d, delta_vm_grid_d, p_ref_d, p2_d)\n    delta_g_integral_d = integral_d / J_PER_KJ\n    result_d = delta_g_ref_d + delta_g_integral_d\n    results.append(result_d)\n    \n    # Format the final output string\n    formatted_results = [f\"{val:.6f}\" for val in results]\n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n```", "id": "2787469"}, {"introduction": "The various statistical ensembles are deeply interconnected, and data from a simulation in one ensemble can be used to reveal properties of another. This advanced practice explores the relationship between the canonical ($NVT$) and microcanonical ensembles. You will learn the histogram reweighting technique [@problem_id:2787475] to transform a canonical energy distribution $P_T(E)$ into the microcanonical entropy $S(E)$, a powerful method for identifying signatures of phase transitions, such as back-bending in the temperature-energy curve, in finite systems like nanoparticles.", "problem": "A nanoparticle undergoing a structural transition is simulated in the canonical ensemble at fixed number, volume, and temperature (NVT; Number-Volume-Temperature). You are given histograms of the potential energy $E$ collected at a fixed bath temperature $T$, binned over specified energy-bin centers. From first principles of statistical mechanics, use the relationships between the canonical probability density $P_T(E)$, the density of states $g(E)$, and the microcanonical entropy $S(E)$ to construct an algorithmic reweighting scheme that maps the canonical energy histogram into an estimate of the microcanonical entropy $S(E)$ as a function of $E$ (up to an additive constant). Then estimate the microcanonical inverse temperature $\\beta_{\\mathrm{micro}}(E)$ as the discrete derivative of $S(E)/k_{\\mathrm{B}}$ with respect to $E$, where $k_{\\mathrm{B}}$ is the Boltzmann constant.\n\nYour algorithm must adhere to the following scientifically grounded constraints:\n- Start from the canonical identity that the energy-probability density satisfies $P_T(E) \\propto g(E)\\, \\exp(-\\beta E)$ with $\\beta = 1/(k_{\\mathrm{B}} T)$ and the microcanonical definition $S(E) = k_{\\mathrm{B}} \\ln g(E)$.\n- Use a Laplace pseudocount for numerical regularization: replace each histogram count $H_i$ by $H_i + \\delta$ with $\\delta = 0.5$ before taking logarithms to handle zeros.\n- You must construct an estimate $\\tilde{S}(E_i)/k_{\\mathrm{B}}$ of the dimensionless entropy $S(E_i)/k_{\\mathrm{B}}$ at each energy bin center $E_i$ that is invariant to the unknown normalization of $P_T(E)$ and the histogram sample size. Fix the additive ambiguity by enforcing $\\min_i \\tilde{S}(E_i)/k_{\\mathrm{B}} = 0$.\n- Estimate the microcanonical inverse temperature $\\beta_{\\mathrm{micro}}(E)$ on the discrete grid by finite differences applied to $\\tilde{S}(E)/k_{\\mathrm{B}}$ versus $E$. Use centered differences in the interior, and one-sided differences at the boundaries.\n\nPhysical constants and units:\n- Use the Boltzmann constant in electronvolt per Kelvin: $k_{\\mathrm{B}} = 8.617333262 \\times 10^{-5}\\ \\mathrm{eV/K}$. All energies are given in electronvolts (eV), all temperatures in Kelvin (K), and the entropy you report must be in units of $k_{\\mathrm{B}}$ (dimensionless). The inverse temperatures $\\beta$ and $\\beta_{\\mathrm{micro}}$ must be in $\\mathrm{eV}^{-1}$.\n\nNumerical tasks and outputs to report:\n- For each test case, identify the mode index $i_{\\max}$, defined as the index of the largest count $H_i$ before applying the pseudocount. Compute the absolute deviation $|\\beta_{\\mathrm{micro}}(E_{i_{\\max}}) - \\beta|$ in $\\mathrm{eV}^{-1}$, where $\\beta = 1/(k_{\\mathrm{B}} T)$ is the canonical inverse temperature.\n- For each test case, also report the normalized entropy value at the middle index $i_{\\mathrm{mid}} = \\lfloor n/2 \\rfloor$ (zero-based indexing), namely $\\tilde{S}(E_{i_{\\mathrm{mid}}})/k_{\\mathrm{B}}$, which is dimensionless due to the normalization $\\min_i \\tilde{S}(E_i)/k_{\\mathrm{B}} = 0$.\n\nTest suite (energies, counts, and temperature):\n1) Test Case A (bimodal, no zeros):\n- Energy bin centers $E_i$ (in eV): $[-0.5,\\,-0.3,\\,-0.1,\\,0.1,\\,0.3,\\,0.5]$.\n- Histogram counts $H_i$ (dimensionless): $[638,\\,1003,\\,378,\\,238,\\,249,\\,63]$.\n- Temperature $T$ (in K): $5000$.\n\n2) Test Case B (sparse with zeros):\n- Energy bin centers $E_i$ (in eV): $[-0.4,\\,-0.2,\\,0.0,\\,0.2,\\,0.4]$.\n- Histogram counts $H_i$ (dimensionless): $[120,\\,20,\\,0,\\,5,\\,60]$.\n- Temperature $T$ (in K): $3000$.\n\n3) Test Case C (high temperature, nearly flat):\n- Energy bin centers $E_i$ (in eV): $[-0.5,\\,-0.25,\\,0.0,\\,0.25,\\,0.5,\\,0.75]$.\n- Histogram counts $H_i$ (dimensionless): $[210,\\,230,\\,240,\\,235,\\,225,\\,215]$.\n- Temperature $T$ (in K): $20000$.\n\nAngle units are not applicable. No percentages are used.\n\nFinal output specification:\n- Your program should produce a single line of output containing six floating-point numbers in a Python-style list: for each of the three test cases in order (A, B, C), output the two quantities described above in order, namely $|\\beta_{\\mathrm{micro}}(E_{i_{\\max}}) - \\beta|$ (in $\\mathrm{eV}^{-1}$), then $\\tilde{S}(E_{i_{\\mathrm{mid}}})/k_{\\mathrm{B}}$ (dimensionless). The final output format must be a single line exactly like:\n\"[r1,r2,r3,r4,r5,r6]\"\nwhere $r1$ and $r2$ are the two results for Test Case A, $r3$ and $r4$ for Test Case B, and $r5$ and $r6$ for Test Case C.", "solution": "The problem requires the formulation and implementation of an algorithm to estimate the microcanonical entropy, $S(E)$, and the microcanonical inverse temperature, $\\beta_{\\mathrm{micro}}(E)$, from a canonical energy histogram obtained at a fixed temperature $T$. This is a standard procedure in computational statistical physics known as histogram reweighting. The problem is well-posed, scientifically sound, and contains all necessary information for a unique solution. We shall proceed with the derivation and implementation.\n\nThe fundamental premise lies in the statistical mechanics of the canonical ensemble (NVT). The probability of observing a system with potential energy $E$ is given by the canonical probability density, $P_T(E)$, which is proportional to the product of the density of states, $g(E)$, and the Boltzmann factor, $\\exp(-\\beta E)$.\n$$\nP_T(E) \\propto g(E) \\exp(-\\beta E)\n$$\nHere, $\\beta = 1/(k_{\\mathrm{B}} T)$ is the canonical inverse temperature, with $k_{\\mathrm{B}}$ being the Boltzmann constant. The histogram counts, $H_i$, collected for energy bins centered at $E_i$, are a discrete sampling of this probability density. Thus, we can write:\n$$\nH_i \\propto P_T(E_i) \\propto g(E_i) \\exp(-\\beta E_i)\n$$\nwhere $C$ is an unknown constant of proportionality related to the simulation length and bin width.\n\nOur objective is to determine the microcanonical entropy, $S(E)$, which is defined by the Boltzmann relation as $S(E) = k_{\\mathrm{B}} \\ln g(E)$. To find $S(E_i)$, we must first isolate the density of states, $g(E_i)$, from the histogram data. By rearranging the proportionality, we obtain:\n$$\ng(E_i) \\propto H_i \\exp(\\beta E_i)\n$$\nTaking the natural logarithm and multiplying by $k_{\\mathrm{B}}$ yields the entropy $S(E_i)$:\n$$\nS(E_i) = k_{\\mathrm{B}} \\ln g(E_i) = k_{\\mathrm{B}} (\\ln H_i + \\beta E_i + \\text{constant})\n$$\nThe dimensionless entropy, $S(E_i)/k_{\\mathrm{B}}$, is therefore:\n$$\nS(E_i)/k_{\\mathrm{B}} = \\ln H_i + \\beta E_i + \\text{constant'}\n$$\n\nTo handle bins with zero counts, which would make the logarithm undefined, we apply a Laplace pseudocount regularization as specified. Each count $H_i$ is replaced by $H'_i = H_i + \\delta$, with $\\delta = 0.5$. This gives an unnormalized, dimensionless entropy estimate:\n$$\n\\hat{S}(E_i)/k_{\\mathrm{B}} = \\ln(H_i + \\delta) + \\beta E_i\n$$\nThe additive constant ambiguity is resolved by normalizing the entropy such that its minimum value is zero. We compute the minimum value of the unnormalized entropy across all bins, $S_{\\min}/k_{\\mathrm{B}} = \\min_{j} \\{\\hat{S}(E_j)/k_{\\mathrm{B}}\\}$, and define the normalized entropy, $\\tilde{S}(E_i)/k_{\\mathrm{B}}$, as:\n$$\n\\tilde{S}(E_i)/k_{\\mathrm{B}} = \\hat{S}(E_i)/k_{\\mathrm{B}} - S_{\\min}/k_{\\mathrm{B}} = \\ln(H_i + \\delta) + \\beta E_i - \\min_{j} \\{\\ln(H_j + \\delta) + \\beta E_j\\}\n$$\nThis procedure yields a unique, sample-size-invariant estimate of the entropy function up to an irrelevant constant.\n\nNext, we estimate the microcanonical inverse temperature, $\\beta_{\\mathrm{micro}}(E)$. From thermodynamics, this is defined as the derivative of the entropy with respect to energy:\n$$\n\\beta_{\\mathrm{micro}}(E) = \\frac{1}{k_{\\mathrm{B}}} \\frac{\\partial S(E)}{\\partial E} = \\frac{\\partial (S(E)/k_{\\mathrm{B}})}{\\partial E}\n$$\nSince the normalization constant in $\\tilde{S}(E)/k_{\\mathrm{B}}$ is independent of energy, its derivative is zero. Therefore, we can compute the derivative from our discrete, normalized entropy values. The problem specifies a finite difference scheme. Let $y_i = \\tilde{S}(E_i)/k_{\\mathrm{B}}$ and $x_i = E_i$. The derivative at each grid point $i$ is estimated as:\n\\begin{itemize}\n    \\item Forward difference at the first point ($i=0$): $\\beta_{\\mathrm{micro}}(E_0) = \\frac{y_1 - y_0}{x_1 - x_0}$\n    \\item Centered difference for interior points ($0  i  n-1$): $\\beta_{\\mathrm{micro}}(E_i) = \\frac{y_{i+1} - y_{i-1}}{x_{i+1} - x_{i-1}}$\n    \\item Backward difference at the last point ($i=n-1$): $\\beta_{\\mathrm{micro}}(E_{n-1}) = \\frac{y_{n-1} - y_{n-2}}{x_{n-1} - x_{n-2}}$\n\\end{itemize}\n\nWith this framework, the algorithm for each test case is as follows:\n1.  Given the energy bins $E_i$, histogram counts $H_i$, and temperature $T$, first compute the canonical inverse temperature $\\beta = 1/(k_{\\mathrm{B}} T)$. Identify the index of the maximum histogram count, $i_{\\max}$, and the middle index, $i_{\\mathrm{mid}} = \\lfloor n/2 \\rfloor$.\n2.  Regularize the counts: $H'_i = H_i + 0.5$.\n3.  Calculate the normalized dimensionless entropy values, $\\tilde{S}(E_i)/k_{\\mathrm{B}}$, using the derived formula.\n4.  Calculate the vector of microcanonical inverse temperatures, $\\beta_{\\mathrm{micro}}(E_i)$, using the specified finite difference scheme on the grid of $(\\tilde{S}(E_i)/k_{\\mathrm{B}}, E_i)$.\n5.  Determine the first required output: the absolute deviation $|\\beta_{\\mathrm{micro}}(E_{i_{\\max}}) - \\beta|$.\n6.  Determine the second required output: the normalized entropy at the middle index, $\\tilde{S}(E_{i_{\\mathrm{mid}}})/k_{\\mathrm{B}}$.\n\nThis provides a complete and rigorous procedure to solve the problem. The theoretical foundation is that at the mode of the canonical energy distribution, the slope of the density of states should be flat, which implies $\\beta_{\\mathrm{micro}}(E_{\\text{mode}}) \\approx \\beta$. The deviation calculated in the first task is a measure of the error introduced by discrete sampling and the finite difference approximation.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the statistical mechanics reweighting problem for the given test cases.\n    \"\"\"\n    # Define the physical constant and numerical parameter.\n    KB = 8.617333262e-5  # Boltzmann constant in eV/K\n    DELTA = 0.5  # Laplace pseudocount\n\n    # Define the test cases from the problem statement.\n    test_cases = [\n        {\n            \"E\": np.array([-0.5, -0.3, -0.1, 0.1, 0.3, 0.5]),\n            \"H\": np.array([638, 1003, 378, 238, 249, 63]),\n            \"T\": 5000.0\n        },\n        {\n            \"E\": np.array([-0.4, -0.2, 0.0, 0.2, 0.4]),\n            \"H\": np.array([120, 20, 0, 5, 60]),\n            \"T\": 3000.0\n        },\n        {\n            \"E\": np.array([-0.5, -0.25, 0.0, 0.25, 0.5, 0.75]),\n            \"H\": np.array([210, 230, 240, 235, 225, 215]),\n            \"T\": 20000.0\n        }\n    ]\n\n    results = []\n    for case in test_cases:\n        E = case[\"E\"]\n        H = case[\"H\"]\n        T = case[\"T\"]\n        n = len(E)\n\n        # Step 1: Calculate canonical beta and find special indices.\n        beta = 1.0 / (KB * T)\n        i_max = np.argmax(H)\n        i_mid = n // 2\n\n        # Step 2: Apply pseudocount regularization to histogram counts.\n        H_prime = H + DELTA\n\n        # Step 3: Calculate the normalized dimensionless entropy S_tilde/k_B.\n        # First, compute the unnormalized entropy from the reweighting formula.\n        unnormalized_S_over_kB = np.log(H_prime) + beta * E\n        \n        # Find the minimum value to enforce the normalization condition.\n        S_min_over_kB = np.min(unnormalized_S_over_kB)\n        \n        # The final normalized entropy array.\n        S_tilde_over_kB = unnormalized_S_over_kB - S_min_over_kB\n\n        # Step 4: Estimate the microcanonical inverse temperature beta_micro(E).\n        # This is the numerical derivative of S_tilde/k_B with respect to E.\n        beta_micro = np.zeros_like(E, dtype=float)\n        y = S_tilde_over_kB\n        x = E\n        \n        # Use one-sided (forward) difference for the first point (i=0).\n        if n > 1:\n            beta_micro[0] = (y[1] - y[0]) / (x[1] - x[0])\n        \n        # Use one-sided (backward) difference for the last point (i=n-1).\n        if n > 1:\n            beta_micro[n - 1] = (y[n - 1] - y[n - 2]) / (x[n - 1] - x[n - 2])\n            \n        # Use centered differences for all interior points.\n        if n > 2:\n            beta_micro[1:-1] = (y[2:] - y[:-2]) / (x[2:] - x[:-2])\n\n        # Step 5: Compute the two required output values for the test case.\n        # Result 1: Absolute deviation |beta_micro(E_imax) - beta|.\n        deviation_at_max = np.abs(beta_micro[i_max] - beta)\n        \n        # Result 2: Normalized entropy value at the middle index, S_tilde(E_imid)/k_B.\n        entropy_at_mid = S_tilde_over_kB[i_mid]\n\n        results.extend([deviation_at_max, entropy_at_mid])\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2787475"}]}