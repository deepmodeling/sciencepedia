{"hands_on_practices": [{"introduction": "Many physical systems, from robotics to aerospace, are inherently nonlinear. This practice demonstrates the cornerstone technique of linearization, which allows us to approximate the behavior of a nonlinear system around a specific operating point using a linear model. By working through the classic example of a pendulum [@problem_id:2723730], you will develop the essential skill of deriving linearized state-space models around both stable and unstable equilibria, a critical first step for analysis and control design.", "problem": "Consider a rigid planar pendulum of point mass $m$ attached to a massless rod of length $\\ell$, subject to viscous rotational damping with coefficient $b$ at the pivot and actuated by a control torque $u$ at the pivot. Taking the generalized coordinate to be the angular displacement $\\theta$ measured from the vertically downward direction with counterclockwise positive, Newton’s second law for rotation about the pivot leads to the nonlinear equation of motion\n$$\nm \\ell^{2} \\ddot{\\theta} + b \\dot{\\theta} + m g \\ell \\sin \\theta = u,\n$$\nwhich can equivalently be written as\n$$\n\\ddot{\\theta} + \\frac{b}{m \\ell^{2}} \\dot{\\theta} + \\frac{g}{\\ell} \\sin \\theta = \\frac{1}{m \\ell^{2}} u.\n$$\nAssume angles are in radians. Let the state be $x = \\begin{pmatrix} \\theta \\\\ \\dot{\\theta} \\end{pmatrix}$, the input be $u$, and the measured output be the physical angle $y = \\theta$. Using first principles (Newton’s laws and the definition of state variables), derive the linearized state-space model in the standard form\n$$\n\\dot{x} = A x + B u,\\quad y = C x + D u\n$$\naround each of the two open-loop equilibria: the downward equilibrium and the upright equilibrium. Treat the linearization in deviation variables around the respective equilibrium $(x_{e}, u_{e})$, and report the resulting constant matrices $(A,B,C,D)$ for each equilibrium.\n\nProvide your final answer as a single row matrix that lists, in order:\n- the four entries of $A$ at the downward equilibrium in row-major order,\n- the two entries of $B$ at the downward equilibrium from top to bottom,\n- the two entries of $C$ at the downward equilibrium from left to right,\n- the single entry of $D$ at the downward equilibrium,\n- followed by the same nine quantities for the upright equilibrium.\n\nNo numerical substitution is required; leave your answer in symbolic form in terms of $m$, $\\ell$, $b$, and $g$. The final answer must be a single closed-form analytic expression. Do not include units in the final answer.", "solution": "The problem presented is a standard exercise in the linearization of a nonlinear dynamical system, a fundamental procedure in control theory. The problem statement is scientifically sound, well-posed, and contains all necessary information for a unique solution. It is a valid problem. We will now proceed with the derivation.\n\nThe dynamics of the system are described by the nonlinear ordinary differential equation:\n$$\n\\ddot{\\theta} + \\frac{b}{m \\ell^{2}} \\dot{\\theta} + \\frac{g}{\\ell} \\sin \\theta = \\frac{1}{m \\ell^{2}} u\n$$\nThe state vector is defined as $x = \\begin{pmatrix} x_1 \\\\ x_2 \\end{pmatrix} = \\begin{pmatrix} \\theta \\\\ \\dot{\\theta} \\end{pmatrix}$, the input is $u$, and the output is $y = \\theta$. We first express the system in the nonlinear state-space form $\\dot{x} = f(x, u)$ and $y = h(x, u)$.\n\nFrom the definition of the state variables, we have the first state equation:\n$$\n\\dot{x}_1 = \\dot{\\theta} = x_2\n$$\nThe second state equation is obtained by rearranging the given equation of motion to solve for $\\ddot{\\theta}$:\n$$\n\\dot{x}_2 = \\ddot{\\theta} = -\\frac{g}{\\ell} \\sin \\theta - \\frac{b}{m \\ell^2} \\dot{\\theta} + \\frac{1}{m \\ell^2} u\n$$\nSubstituting the state variables $x_1 = \\theta$ and $x_2 = \\dot{\\theta}$, we obtain:\n$$\n\\dot{x}_2 = -\\frac{g}{\\ell} \\sin x_1 - \\frac{b}{m \\ell^2} x_2 + \\frac{1}{m \\ell^2} u\n$$\nThus, the nonlinear vector function $f(x, u)$ is:\n$$\nf(x, u) = \\begin{pmatrix} x_2 \\\\ -\\frac{g}{\\ell} \\sin x_1 - \\frac{b}{m \\ell^2} x_2 + \\frac{1}{m \\ell^2} u \\end{pmatrix}\n$$\nThe output equation is given as $y=\\theta$, which in terms of state variables is $y = x_1$. Therefore, the nonlinear output function $h(x, u)$ is:\n$$\nh(x, u) = x_1\n$$\nNext, we determine the open-loop equilibrium points $(x_e, u_e)$ by setting $\\dot{x} = 0$ and the control input to a constant value, which is taken to be $u_e = 0$.\nThe condition $\\dot{x} = f(x_e, u_e) = 0$ gives:\n$$\n\\begin{cases}\nx_{2e} = 0 \\\\\n-\\frac{g}{\\ell} \\sin x_{1e} - \\frac{b}{m \\ell^2} x_{2e} + \\frac{1}{m \\ell^2} u_e = 0\n\\end{cases}\n$$\nSubstituting $x_{2e} = 0$ and $u_e=0$ into the second equation yields:\n$$\n-\\frac{g}{\\ell} \\sin x_{1e} = 0\n$$\nThis implies $\\sin x_{1e} = 0$, for which the solutions are $x_{1e} = n\\pi$ for any integer $n$. The problem specifies two distinct equilibria:\n1.  The downward equilibrium: This corresponds to the stable resting position, $\\theta_e = 0$. The equilibrium state is $x_e = \\begin{pmatrix} 0 \\\\ 0 \\end{pmatrix}$.\n2.  The upright equilibrium: This corresponds to the unstable inverted position, $\\theta_e = \\pi$. The equilibrium state is $x_e = \\begin{pmatrix} \\pi \\\\ 0 \\end{pmatrix}$.\nIn both cases, the equilibrium input is $u_e = 0$.\n\nLinearization of the system around an equilibrium point $(x_e, u_e)$ yields a linear state-space model for the deviation variables $\\delta x = x - x_e$, $\\delta u = u - u_e$, and $\\delta y = y - y_e$. By a common abuse of notation, these deviation variables are typically relabeled as $x, u, y$. The model is given by $\\dot{x} = Ax + Bu$ and $y = Cx + Du$, where the matrices are the Jacobians of $f$ and $h$ evaluated at the equilibrium point:\n$$\nA = \\frac{\\partial f}{\\partial x} \\bigg|_{(x_e, u_e)}, \\quad B = \\frac{\\partial f}{\\partial u} \\bigg|_{(x_e, u_e)}, \\quad C = \\frac{\\partial h}{\\partial x} \\bigg|_{(x_e, u_e)}, \\quad D = \\frac{\\partial h}{\\partial u} \\bigg|_{(x_e, u_e)}\n$$\nWe compute these Jacobians in symbolic form first.\n$$\nA = \\frac{\\partial f}{\\partial x} = \\begin{pmatrix} \\frac{\\partial f_1}{\\partial x_1} & \\frac{\\partial f_1}{\\partial x_2} \\\\ \\frac{\\partial f_2}{\\partial x_1} & \\frac{\\partial f_2}{\\partial x_2} \\end{pmatrix} = \\begin{pmatrix} 0 & 1 \\\\ -\\frac{g}{\\ell} \\cos x_1 & -\\frac{b}{m \\ell^2} \\end{pmatrix}\n$$\n$$\nB = \\frac{\\partial f}{\\partial u} = \\begin{pmatrix} \\frac{\\partial f_1}{\\partial u} \\\\ \\frac{\\partial f_2}{\\partial u} \\end{pmatrix} = \\begin{pmatrix} 0 \\\\ \\frac{1}{m \\ell^2} \\end{pmatrix}\n$$\n$$\nC = \\frac{\\partial h}{\\partial x} = \\begin{pmatrix} \\frac{\\partial h}{\\partial x_1} & \\frac{\\partial h}{\\partial x_2} \\end{pmatrix} = \\begin{pmatrix} 1 & 0 \\end{pmatrix}\n$$\n$$\nD = \\frac{\\partial h}{\\partial u} = 0\n$$\nThe matrices $B$, $C$, and $D$ are constant and do not depend on the specific equilibrium point.\n\nNow, we evaluate the matrix $A$ at each of the two equilibria.\n\nCase 1: Downward Equilibrium\nThe equilibrium point is $(x_e, u_e) = (\\begin{pmatrix} 0 \\\\ 0 \\end{pmatrix}, 0)$. We substitute $x_{1e} = 0$ into the expression for $A$:\n$$\nA_{\\text{down}} = \\begin{pmatrix} 0 & 1 \\\\ -\\frac{g}{\\ell} \\cos(0) & -\\frac{b}{m \\ell^2} \\end{pmatrix} = \\begin{pmatrix} 0 & 1 \\\\ -\\frac{g}{\\ell} & -\\frac{b}{m \\ell^2} \\end{pmatrix}\n$$\nThe system matrices for the downward equilibrium are:\n$$\nA = \\begin{pmatrix} 0 & 1 \\\\ -\\frac{g}{\\ell} & -\\frac{b}{m \\ell^2} \\end{pmatrix}, \\quad B = \\begin{pmatrix} 0 \\\\ \\frac{1}{m \\ell^2} \\end{pmatrix}, \\quad C = \\begin{pmatrix} 1 & 0 \\end{pmatrix}, \\quad D = 0\n$$\n\nCase 2: Upright Equilibrium\nThe equilibrium point is $(x_e, u_e) = (\\begin{pmatrix} \\pi \\\\ 0 \\end{pmatrix}, 0)$. We substitute $x_{1e} = \\pi$ into the expression for $A$:\n$$\nA_{\\text{up}} = \\begin{pmatrix} 0 & 1 \\\\ -\\frac{g}{\\ell} \\cos(\\pi) & -\\frac{b}{m \\ell^2} \\end{pmatrix} = \\begin{pmatrix} 0 & 1 \\\\ \\frac{g}{\\ell} & -\\frac{b}{m \\ell^2} \\end{pmatrix}\n$$\nThe system matrices for the upright equilibrium are:\n$$\nA = \\begin{pmatrix} 0 & 1 \\\\ \\frac{g}{\\ell} & -\\frac{b}{m \\ell^2} \\end{pmatrix}, \\quad B = \\begin{pmatrix} 0 \\\\ \\frac{1}{m \\ell^2} \\end{pmatrix}, \\quad C = \\begin{pmatrix} 1 & 0 \\end{pmatrix}, \\quad D = 0\n$$\n\nFinally, we assemble the required quantities into a single row matrix as specified in the problem statement. The order is the four entries of $A_{\\text{down}}$, two of $B_{\\text{down}}$, two of $C_{\\text{down}}$, one of $D_{\\text{down}}$, followed by the nine quantities for the upright equilibrium.\nThe entries for the downward equilibrium are: $0$, $1$, $-\\frac{g}{\\ell}$, $-\\frac{b}{m \\ell^2}$; $0$, $\\frac{1}{m \\ell^2}$; $1$, $0$; $0$.\nThe entries for the upright equilibrium are: $0$, $1$, $\\frac{g}{\\ell}$, $-\\frac{b}{m \\ell^2}$; $0$, $\\frac{1}{m \\ell^2}$; $1$, $0$; $0$.\nThis completes the derivation.", "answer": "$$\n\\boxed{\\begin{pmatrix} 0 & 1 & -\\frac{g}{\\ell} & -\\frac{b}{m \\ell^{2}} & 0 & \\frac{1}{m \\ell^{2}} & 1 & 0 & 0 & 0 & 1 & \\frac{g}{\\ell} & -\\frac{b}{m \\ell^{2}} & 0 & \\frac{1}{m \\ell^{2}} & 1 & 0 & 0 \\end{pmatrix}}\n$$", "id": "2723730"}, {"introduction": "The transition from continuous-time theory to digital implementation is a critical step in modern control engineering. This exercise guides you through the exact discretization of a continuous-time linear system under the influence of a zero-order hold, which models how a digital computer applies a control signal to a physical plant [@problem_id:2723716]. Mastering this derivation of the discrete-time matrices $A_d$ and $B_d$ provides the foundation for designing and simulating digital controllers for continuous processes.", "problem": "Consider a continuous-time, linear, time-invariant state-space model\n$\\dot{x}(t)=A\\,x(t)+B\\,u(t)$,\nwhere $x(t)\\in\\mathbb{R}^{n}$, $u(t)\\in\\mathbb{R}^{m}$, $A\\in\\mathbb{R}^{n\\times n}$, and $B\\in\\mathbb{R}^{n\\times m}$. Assume the input is generated by a zero-order hold (ZOH), that is, there exists a sampling period $T_{s}>0$ and a sequence $\\{u[k]\\}_{k\\in\\mathbb{Z}_{\\ge 0}}$ such that $u(t)=u[k]$ for all $t\\in[kT_{s},(k+1)T_{s})$. Starting only from the definition of the fundamental matrix solution for linear systems and the method of variation of constants (no other pre-derived discrete-time formulas may be used), derive the exact discrete-time model $x[k+1]=A_{d}\\,x[k]+B_{d}\\,u[k]$ and express $A_{d}$ and $B_{d}$ in terms of $A$, $B$, and $T_{s}$. Then, state precise conditions under which the matrix integral that defines $B_{d}$ exists and is numerically well-conditioned, in terms of structural properties of $A$, the sampling period $T_{s}$, and the conditioning of any modal decomposition used.\n\nFinally, for the specific case\n$A=\\begin{pmatrix}0&1\\\\-2&-3\\end{pmatrix}$, $B=\\begin{pmatrix}0\\\\1\\end{pmatrix}$, and $T_{s}=\\tfrac{1}{2}$, compute the exact augmented matrix $\\begin{pmatrix}A_{d}&B_{d}\\end{pmatrix}\\in\\mathbb{R}^{2\\times 3}$ using your derived expressions. Express your final answer as a single $2\\times 3$ matrix with exact analytic entries (no numerical rounding).", "solution": "The problem presented is a standard exercise in the theory of sampled-data systems. It is scientifically grounded, well-posed, and contains all necessary information for its resolution. The problem is therefore deemed valid. We shall proceed with the derivation and calculation.\n\nThe continuous-time linear time-invariant (LTI) system is described by the state equation:\n$$ \\dot{x}(t) = A\\,x(t) + B\\,u(t) $$\nThe solution to this first-order linear vector differential equation, starting from an initial state $x(t_0)$ at time $t_0$, is given by the variation of constants formula:\n$$ x(t) = \\exp(A(t-t_0))x(t_0) + \\int_{t_0}^{t} \\exp(A(t-\\tau)) B u(\\tau) d\\tau $$\nHere, $\\exp(At)$ is the state-transition matrix, also known as the matrix exponential.\n\nWe are tasked with finding an exact discrete-time model $x[k+1]=A_{d}\\,x[k]+B_{d}\\,u[k]$, where $x[k] \\equiv x(kT_s)$ for some sampling period $T_s > 0$. We consider the evolution of the state over one sampling interval, from time $t_0 = kT_s$ to $t = (k+1)T_s$. Substituting these into the general solution yields:\n$$ x((k+1)T_s) = \\exp(A((k+1)T_s - kT_s))x(kT_s) + \\int_{kT_s}^{(k+1)T_s} \\exp(A((k+1)T_s - \\tau)) B u(\\tau) d\\tau $$\nUsing the notation $x[k] = x(kT_s)$, this becomes:\n$$ x[k+1] = \\exp(A T_s) x[k] + \\int_{kT_s}^{(k+1)T_s} \\exp(A((k+1)T_s - \\tau)) B u(\\tau) d\\tau $$\nThe problem specifies that the input $u(t)$ is generated by a zero-order hold (ZOH), which means the input is piecewise constant over each sampling interval. Thus, for any $\\tau \\in [kT_s, (k+1)T_s)$, we have $u(\\tau) = u(kT_s) \\equiv u[k]$. Since $u[k]$ is a constant vector over the integration interval, it can be factored out of the integral:\n$$ x[k+1] = \\exp(A T_s) x[k] + \\left( \\int_{kT_s}^{(k+1)T_s} \\exp(A((k+1)T_s - \\tau)) d\\tau \\right) B u[k] $$\nTo evaluate the integral, we perform a change of variable. Let $\\sigma = (k+1)T_s - \\tau$. The differential is $d\\sigma = -d\\tau$. The limits of integration change from $\\tau=kT_s \\to \\sigma=T_s$ and $\\tau=(k+1)T_s \\to \\sigma=0$. The integral becomes:\n$$ \\int_{T_s}^{0} \\exp(A\\sigma) (-d\\sigma) = \\int_{0}^{T_s} \\exp(A\\sigma) d\\sigma $$\nSubstituting this back, we arrive at the exact discrete-time model:\n$$ x[k+1] = \\left( \\exp(A T_s) \\right) x[k] + \\left( \\int_{0}^{T_s} \\exp(A\\sigma) d\\sigma \\, B \\right) u[k] $$\nBy comparing this to the target form $x[k+1]=A_{d}\\,x[k]+B_{d}\\,u[k]$, we identify the discrete-time system matrices:\n$$ A_d = \\exp(A T_s) $$\n$$ B_d = \\left( \\int_{0}^{T_s} \\exp(A\\sigma) d\\sigma \\right) B $$\n\nNext, we discuss the conditions for the existence and numerical well-conditioning of the integral $\\int_{0}^{T_s} \\exp(A\\sigma) d\\sigma$.\nExistence: The matrix exponential $\\exp(A\\sigma)$ is an analytic function for all $\\sigma \\in \\mathbb{R}$ provided $A$ is a finite-dimensional matrix. The integral of an analytic function over a finite interval $[0, T_s]$ is always well-defined and exists. Therefore, from a purely mathematical standpoint, the integral always exists.\nNumerical Well-Conditioning: The practical computation of the integral presents several conditioning issues.\n1. If the matrix $A$ is invertible, the integral can be computed as $\\int_{0}^{T_s} \\exp(A\\sigma) d\\sigma = A^{-1}(\\exp(AT_s) - I)$. This formula becomes numerically unstable if $A$ is singular or nearly singular (ill-conditioned), as $A^{-1}$ is either undefined or has a very large condition number.\n2. For small sampling periods $T_s$, the norm $\\|AT_s\\|$ becomes small. In this case, $\\exp(AT_s) \\approx I + AT_s$. The term $\\exp(AT_s) - I$ involves the subtraction of two nearly identical matrices, leading to a catastrophic loss of precision (subtractive cancellation).\n3. If a modal decomposition $A=V\\Lambda V^{-1}$ is used (where $\\Lambda$ is the diagonal matrix of eigenvalues $\\lambda_i$), the integral becomes $V \\left( \\int_0^{T_s} \\exp(\\Lambda \\sigma)d\\sigma \\right) V^{-1}$. The diagonal entries of the inner integral are $\\int_0^{T_s} \\exp(\\lambda_i\\sigma)d\\sigma$. For a non-zero eigenvalue $\\lambda_i \\neq 0$, this evaluates to $(\\exp(\\lambda_i T_s)-1)/\\lambda_i$. For a zero eigenvalue $\\lambda_j = 0$, it evaluates to $T_s$. The conditioning of this computation depends on two factors:\n    a. The condition number of the eigenvector matrix, $\\kappa(V) = \\|V\\|\\|V^{-1}\\|$. If $A$ is close to being defective (i.e., has eigenvalues that are close to each other), $V$ becomes ill-conditioned, and the computation is numerically unstable.\n    b. For any eigenvalue $\\lambda_i$ where $|\\lambda_i T_s| \\ll 1$, the term $(\\exp(\\lambda_i T_s)-1)/\\lambda_i$ suffers from the same subtractive cancellation issue as described in point 2.\n\nIn summary, the integral always exists, but its numerical computation is ill-conditioned if (a) $A$ is ill-conditioned and the inverse-based formula is used, (b) the matrix $A$ is close to defective and a modal decomposition is used, or (c) the sampling period $T_s$ is very small relative to the system's characteristic times (i.e., $\\|A T_s\\| \\ll 1$). In such cases, methods based on series expansion or other specialized algorithms (e.g., scaling and squaring with Padé approximants) are required.\n\nFinally, we compute the augmented matrix $\\begin{pmatrix}A_{d}&B_{d}\\end{pmatrix}$ for the specific case:\n$$ A=\\begin{pmatrix}0&1\\\\-2&-3\\end{pmatrix}, \\quad B=\\begin{pmatrix}0\\\\1\\end{pmatrix}, \\quad T_{s}=\\frac{1}{2} $$\nWe must first compute $A_d = \\exp(A T_s)$. We use a modal decomposition of $A$. The characteristic equation is $\\det(A-\\lambda I) = \\lambda(-\\lambda-3) - (-2)(1) = \\lambda^2+3\\lambda+2=0$, which yields eigenvalues $\\lambda_1 = -1$ and $\\lambda_2 = -2$.\nThe corresponding eigenvectors are found by solving $(A-\\lambda_i I)v_i = 0$.\nFor $\\lambda_1 = -1$: $\\begin{pmatrix}1&1\\\\-2&-2\\end{pmatrix}v_1 = 0 \\implies v_1 = \\begin{pmatrix}1\\\\-1\\end{pmatrix}$.\nFor $\\lambda_2 = -2$: $\\begin{pmatrix}2&1\\\\-2&-1\\end{pmatrix}v_2 = 0 \\implies v_2 = \\begin{pmatrix}1\\\\-2\\end{pmatrix}$.\nThe modal matrix $V$ and its inverse $V^{-1}$ are:\n$$ V = \\begin{pmatrix}1&1\\\\-1&-2\\end{pmatrix}, \\quad V^{-1} = \\frac{1}{-1}\\begin{pmatrix}-2&-1\\\\1&1\\end{pmatrix} = \\begin{pmatrix}2&1\\\\-1&-1\\end{pmatrix} $$\nThe matrix exponential is $A_d = \\exp(AT_s) = V \\exp(\\Lambda T_s) V^{-1}$, with $T_s = 1/2$.\n$$ \\exp(\\Lambda T_s) = \\begin{pmatrix}\\exp(-1 \\cdot \\frac{1}{2})&0\\\\0&\\exp(-2 \\cdot \\frac{1}{2})\\end{pmatrix} = \\begin{pmatrix}\\exp(-\\frac{1}{2})&0\\\\0&\\exp(-1)\\end{pmatrix} $$\n$$ A_d = \\begin{pmatrix}1&1\\\\-1&-2\\end{pmatrix} \\begin{pmatrix}\\exp(-\\frac{1}{2})&0\\\\0&\\exp(-1)\\end{pmatrix} \\begin{pmatrix}2&1\\\\-1&-1\\end{pmatrix} $$\n$$ A_d = \\begin{pmatrix}\\exp(-\\frac{1}{2})&\\exp(-1)\\\\-\\exp(-\\frac{1}{2})&-2\\exp(-1)\\end{pmatrix} \\begin{pmatrix}2&1\\\\-1&-1\\end{pmatrix} $$\n$$ A_d = \\begin{pmatrix} 2\\exp(-\\frac{1}{2}) - \\exp(-1) & \\exp(-\\frac{1}{2}) - \\exp(-1) \\\\ -2\\exp(-\\frac{1}{2}) + 2\\exp(-1) & -\\exp(-\\frac{1}{2}) + 2\\exp(-1) \\end{pmatrix} $$\nNow we compute $B_d$. Since $A$ is invertible (eigenvalues are non-zero), we can use the formula $B_d = A^{-1}(A_d - I)B$.\n$$ A^{-1} = \\frac{1}{(0)(-3)-(1)(-2)} \\begin{pmatrix}-3&-1\\\\2&0\\end{pmatrix} = \\frac{1}{2} \\begin{pmatrix}-3&-1\\\\2&0\\end{pmatrix} $$\n$$ A_d - I = \\begin{pmatrix} 2\\exp(-\\frac{1}{2}) - \\exp(-1) - 1 & \\exp(-\\frac{1}{2}) - \\exp(-1) \\\\ -2\\exp(-\\frac{1}{2}) + 2\\exp(-1) & -\\exp(-\\frac{1}{2}) + 2\\exp(-1) - 1 \\end{pmatrix} $$\n$$ (A_d - I)B = \\begin{pmatrix} 2\\exp(-\\frac{1}{2}) - \\exp(-1) - 1 & \\exp(-\\frac{1}{2}) - \\exp(-1) \\\\ -2\\exp(-\\frac{1}{2}) + 2\\exp(-1) & -\\exp(-\\frac{1}{2}) + 2\\exp(-1) - 1 \\end{pmatrix} \\begin{pmatrix}0\\\\1\\end{pmatrix} = \\begin{pmatrix} \\exp(-\\frac{1}{2}) - \\exp(-1) \\\\ -\\exp(-\\frac{1}{2}) + 2\\exp(-1) - 1 \\end{pmatrix} $$\n$$ B_d = A^{-1} (A_d - I)B = \\frac{1}{2} \\begin{pmatrix}-3&-1\\\\2&0\\end{pmatrix} \\begin{pmatrix} \\exp(-\\frac{1}{2}) - \\exp(-1) \\\\ -\\exp(-\\frac{1}{2}) + 2\\exp(-1) - 1 \\end{pmatrix} $$\n$$ B_d = \\frac{1}{2} \\begin{pmatrix} -3(\\exp(-\\frac{1}{2}) - \\exp(-1)) - 1(-\\exp(-\\frac{1}{2}) + 2\\exp(-1) - 1) \\\\ 2(\\exp(-\\frac{1}{2}) - \\exp(-1)) \\end{pmatrix} $$\n$$ B_d = \\frac{1}{2} \\begin{pmatrix} -3\\exp(-\\frac{1}{2}) + 3\\exp(-1) + \\exp(-\\frac{1}{2}) - 2\\exp(-1) + 1 \\\\ 2\\exp(-\\frac{1}{2}) - 2\\exp(-1) \\end{pmatrix} $$\n$$ B_d = \\frac{1}{2} \\begin{pmatrix} -2\\exp(-\\frac{1}{2}) + \\exp(-1) + 1 \\\\ 2\\exp(-\\frac{1}{2}) - 2\\exp(-1) \\end{pmatrix} = \\begin{pmatrix} \\frac{1}{2} - \\exp(-\\frac{1}{2}) + \\frac{1}{2}\\exp(-1) \\\\ \\exp(-\\frac{1}{2}) - \\exp(-1) \\end{pmatrix} $$\nCombining $A_d$ and $B_d$, the final augmented matrix is:\n$$ \\begin{pmatrix}A_{d}&B_{d}\\end{pmatrix} = \\begin{pmatrix} 2\\exp(-\\frac{1}{2}) - \\exp(-1) & \\exp(-\\frac{1}{2}) - \\exp(-1) & \\frac{1}{2} - \\exp(-\\frac{1}{2}) + \\frac{1}{2}\\exp(-1) \\\\ -2\\exp(-\\frac{1}{2}) + 2\\exp(-1) & -\\exp(-\\frac{1}{2}) + 2\\exp(-1) & \\exp(-\\frac{1}{2}) - \\exp(-1) \\end{pmatrix} $$\nThis concludes the solution.", "answer": "$$ \\boxed{ \\begin{pmatrix} 2\\exp(-\\frac{1}{2}) - \\exp(-1) & \\exp(-\\frac{1}{2}) - \\exp(-1) & \\frac{1}{2} - \\exp(-\\frac{1}{2}) + \\frac{1}{2}\\exp(-1) \\\\ -2\\exp(-\\frac{1}{2}) + 2\\exp(-1) & -\\exp(-\\frac{1}{2}) + 2\\exp(-1) & \\exp(-\\frac{1}{2}) - \\exp(-1) \\end{pmatrix} } $$", "id": "2723716"}, {"introduction": "Beyond purely continuous or discrete dynamics, many real-world systems like thermostats, power electronics, and robotic manipulators exhibit both, switching between different modes of operation. This advanced practice introduces you to the powerful framework of Hybrid Automata for formally modeling such switched systems [@problem_id:2723712]. You will not only define the components of a hybrid model but also derive and implement an efficient event-driven simulation from first principles, gaining hands-on experience in analyzing the complex interplay between continuous flows and discrete events.", "problem": "Consider a thermostat-controlled single-zone thermal system with hysteresis. The system has a single continuous state, the indoor temperature $x(t)$ in °C, and a binary control input $m(t) \\in \\{0,1\\}$ that represents the heater mode ($m(t)=1$ means heater ON, $m(t)=0$ means heater OFF). The environment has constant ambient temperature $T_a$ in °C. The thermal dynamics follow a standard energy balance for a lumped-capacitance first-order model: there exists a thermal time constant $\\tau = R_{\\mathrm{th}} C_{\\mathrm{th}}$ in s and an equivalent heating rate constant $k = P_{\\mathrm{on}}/C_{\\mathrm{th}}$ in °C/s such that the continuous-time dynamics are\n$$\n\\dot{x}(t) = -\\frac{1}{\\tau}\\big(x(t)-T_a\\big) + k\\, m(t).\n$$\nA thermostat with hysteresis tracks a constant reference setpoint $r$ in °C with a symmetric deadband half-width $h>0$ in °C. The switching logic is:\n- Turn the heater ON when $x(t)$ decreases to the lower threshold $r-h$.\n- Turn the heater OFF when $x(t)$ increases to the upper threshold $r+h$.\n\nModel this as a Hybrid Automaton (HA) with two discrete modes $\\mathcal{M}=\\{\\mathrm{ON},\\mathrm{OFF}\\}$, continuous state $x\\in\\mathbb{R}$, flow maps determined by the ordinary differential equation above with $m=1$ in mode $\\mathrm{ON}$ and $m=0$ in mode $\\mathrm{OFF}$, invariants defined by the hysteresis thresholds, guard sets at the switching surfaces, and identity reset (no state jump). Explicitly specify the flow sets, invariants, guard sets, and resets in terms of $x$, $r$, and $h$.\n\nUsing only the fundamental energy balance and the definition of a Hybrid Automaton (HA), derive from first principles an exact event-driven simulation method that does not rely on fixed time-stepping. Work from the closed-form solution of the linear scalar ordinary differential equation in each mode, and derive the formula for the next switching time by solving for the time when the trajectory hits the corresponding guard. Your derivation must start from the closed-form solution of the linear ordinary differential equation with constant input $m\\in\\{0,1\\}$ and proceed to the guard-intersection condition, making clear the necessary and sufficient condition for a guard to be hit in finite time. You must clearly state how to select the initial mode from the initial temperature $x(0)=x_0$ and the hysteresis thresholds. In the special case when the equilibrium temperature in a mode equals a guard or the guard lies beyond the equilibrium in the direction of motion, clarify why no switching occurs in finite time and how the simulation must proceed.\n\nImplement a program that, for each test case below, simulates the hybrid system over a finite horizon $T_{\\mathrm{end}}$ in s, starting from the given initial temperature $x_0$ in °C. The program must compute:\n- The average duty cycle over $[0,T_{\\mathrm{end}}]$, defined as the fraction of time the heater is ON, i.e., $\\frac{1}{T_{\\mathrm{end}}}\\int_0^{T_{\\mathrm{end}}} m(t)\\,dt$. Report this as a real number rounded to six decimal places.\n- The total number of mode switches (an integer).\n\nUnits and numerical reporting requirements:\n- Temperatures must be treated in °C, time in s, and the duty cycle is dimensionless in $[0,1]$.\n- The average duty cycle must be rounded to six decimal places using standard round-to-nearest.\n- The switch count must be reported as an integer.\n- When choosing the initial mode, use the following rule: if $x_0 \\le r-h$ choose $\\mathrm{ON}$; if $x_0 \\ge r+h$ choose $\\mathrm{OFF}$; if $r-h < x_0 < r+h$ choose $\\mathrm{OFF}$.\n\nEdge-case handling:\n- If a trajectory asymptotically approaches a guard but does not reach it in finite time (for example when the equilibrium temperature in that mode equals the guard), the mode must not change and the current mode is held for the remaining time horizon.\n\nTest suite:\nFor each tuple $(\\tau,k,T_a,r,h,x_0,T_{\\mathrm{end}})$, simulate and return the required outputs.\n\n- Case A (typical toggling): $(\\tau,k,T_a,r,h,x_0,T_{\\mathrm{end}}) = (300.0,\\,0.08,\\,15.0,\\,22.0,\\,0.5,\\,20.0,\\,3600.0)$.\n- Case B (unreachable setpoint even with heater ON): $(\\tau,k,T_a,r,h,x_0,T_{\\mathrm{end}}) = (200.0,\\,0.04,\\,0.0,\\,20.0,\\,1.0,\\,10.0,\\,1200.0)$.\n- Case C (ambient above setpoint; heater never needed): $(\\tau,k,T_a,r,h,x_0,T_{\\mathrm{end}}) = (300.0,\\,0.05,\\,30.0,\\,20.0,\\,0.5,\\,25.0,\\,1200.0)$.\n- Case D (initial temperature in deadband; defaulting to OFF): $(\\tau,k,T_a,r,h,x_0,T_{\\mathrm{end}}) = (400.0,\\,0.05,\\,18.0,\\,21.0,\\,0.5,\\,21.2,\\,3600.0)$.\n\nFinal output format specification:\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets.\n- The list must be the flattened sequence of results for the cases in the order A, B, C, D. For each case, append first the rounded average duty cycle (a float with six digits after the decimal point) and then the number of switches (an integer).\n- For example, the syntactic shape must be $[d_A, s_A, d_B, s_B, d_C, s_C, d_D, s_D]$, where $d_\\cdot$ are floats rounded to six decimal places and $s_\\cdot$ are integers.", "solution": "The problem is well-posed, scientifically grounded, and contains all necessary information for a unique solution. We proceed with the derivation and analysis.\n\n### 1. Hybrid Automaton Specification\n\nThe thermostat-controlled thermal system is modeled as a Hybrid Automaton (HA). An HA is a formal model for systems with both continuous dynamics (flow) and discrete events (jumps). The components of this HA are defined as follows:\n\n- **Discrete Modes**: The system has two discrete modes, corresponding to the heater's state: $\\mathcal{M} = \\{\\mathrm{ON}, \\mathrm{OFF}\\}$.\n\n- **Continuous State**: The single continuous state is the indoor temperature $x \\in \\mathbb{R}$, measured in °C.\n\n- **Control Input**: $m(t)$ is a piecewise constant function of time, taking values from $\\{0, 1\\}$. We associate $m=1$ with mode $\\mathrm{ON}$ and $m=0$ with mode $\\mathrm{OFF}$.\n\n- **Flow Map (Continuous Dynamics)**: The evolution of the continuous state $x(t)$ within each mode is governed by the provided ordinary differential equation (ODE):\n$$\n\\dot{x}(t) = -\\frac{1}{\\tau}\\big(x(t)-T_a\\big) + k\\, m\n$$\nThis ODE can be rewritten for each mode by defining the mode-dependent equilibrium temperature, $x_\\infty$.\nIn mode $\\mathrm{OFF}$ ($m=0$), the equilibrium is $x_{\\infty, \\mathrm{OFF}} = T_a$. The dynamics are:\n$$\n\\dot{x} = -\\frac{1}{\\tau}(x - x_{\\infty, \\mathrm{OFF}})\n$$\nIn mode $\\mathrm{ON}$ ($m=1$), the equilibrium is $x_{\\infty, \\mathrm{ON}} = T_a + k\\tau$. The dynamics are:\n$$\n\\dot{x} = -\\frac{1}{\\tau}(x - x_{\\infty, \\mathrm{ON}})\n$$\n\n- **Invariants (Flow Sets)**: An invariant set defines the region of the continuous state space where the system is allowed to remain in a particular discrete mode.\n  - In mode $\\mathrm{ON}$, the system was activated at or below the lower threshold $r-h$ and is heating up towards the upper threshold $r+h$. It remains in this mode as long as the temperature does not exceed the upper threshold. Thus, the invariant for mode $\\mathrm{ON}$ is $\\mathrm{Inv}(\\mathrm{ON}) = \\{x \\in \\mathbb{R} \\mid x \\le r+h\\}$.\n  - In mode $\\mathrm{OFF}$, the system was deactivated at or above the upper threshold $r+h$ and is cooling down towards the lower threshold $r-h$. It remains in this mode as long as the temperature does not drop below the lower threshold. Thus, the invariant for mode $\\mathrm{OFF}$ is $\\mathrm{Inv}(\\mathrm{OFF}) = \\{x \\in \\mathbb{R} \\mid x \\ge r-h\\}$.\n\n- **Guard Sets**: A guard set is a condition on the continuous state that triggers a discrete transition between modes.\n  - The transition from $\\mathrm{ON}$ to $\\mathrm{OFF}$ occurs when the temperature rises to the upper threshold. The guard is $G(\\mathrm{ON} \\to \\mathrm{OFF}) = \\{x \\in \\mathbb{R} \\mid x = r+h\\}$.\n  - The transition from $\\mathrm{OFF}$ to $\\mathrm{ON}$ occurs when the temperature falls to the lower threshold. The guard is $G(\\mathrm{OFF} \\to \\mathrm{ON}) = \\{x \\in \\mathbb{R} \\mid x = r-h\\}$.\n\n- **Reset Maps**: A reset map defines the change in the continuous state during a discrete transition. In this system, the temperature is continuous, so the state does not jump. The reset map is the identity for both transitions:\n  - For $\\mathrm{ON} \\to \\mathrm{OFF}$: $x^+ := x$.\n  - For $\\mathrm{OFF} \\to \\mathrm{ON}$: $x^+ := x$.\n\n### 2. Derivation of the Event-Driven Simulation Method\n\nAn event-driven simulation computes the exact time of the next discrete event (a mode switch) rather than using a fixed time step. This requires an analytical solution to the ODE in each mode.\n\n#### 2.1. Closed-Form Solution of the State Equation\n\nThe flow in each mode is described by a linear first-order ODE of the form $\\dot{x} = -\\frac{1}{\\tau}(x - x_\\infty)$, where $x_\\infty$ is the constant equilibrium temperature for that mode. Given an initial condition $x(t_0) = x_0$, the solution for $t \\ge t_0$ is:\n$$\nx(t) = x_\\infty + (x_0 - x_\\infty) e^{-(t-t_0)/\\tau}\n$$\n\n#### 2.2. Derivation of Time-to-Guard\n\nWe derive the time $\\Delta t = t - t_0$ required for the state to evolve from an initial temperature $x_0$ to a target temperature $x_{\\mathrm{target}}$, which represents a switching guard.\n$$\nx_{\\mathrm{target}} = x_\\infty + (x_0 - x_\\infty) e^{-\\Delta t/\\tau}\n$$\nSolving for $\\Delta t$:\n$$\n\\frac{x_{\\mathrm{target}} - x_\\infty}{x_0 - x_\\infty} = e^{-\\Delta t/\\tau}\n$$\nTaking the natural logarithm of both sides:\n$$\n\\ln\\left(\\frac{x_{\\mathrm{target}} - x_\\infty}{x_0 - x_\\infty}\\right) = -\\frac{\\Delta t}{\\tau}\n$$\n$$\n\\Delta t = -\\tau \\ln\\left(\\frac{x_{\\mathrm{target}} - x_\\infty}{x_0 - x_\\infty}\\right) = \\tau \\ln\\left(\\frac{x_0 - x_\\infty}{x_{\\mathrm{target}} - x_\\infty}\\right)\n$$\n\n#### 2.3. Condition for Finite-Time Guard Intersection\n\nFor $\\Delta t$ to be a positive, finite real number, two conditions must be met:\n1. The argument of the logarithm must be positive. This means that $(x_0 - x_\\infty)$ and $(x_{\\mathrm{target}} - x_\\infty)$ must have the same sign. In other words, $x_0$ and $x_{\\mathrm{target}}$ must lie on the same side of the equilibrium $x_\\infty$.\n2. The argument of the logarithm must be greater than $1$ (since $\\Delta t > 0$). This implies $|x_0 - x_\\infty| > |x_{\\mathrm{target}} - x_\\infty|$.\n\nCombining these, the state $x(t)$ always moves monotonically from $x_0$ towards $x_\\infty$. Therefore, for the trajectory to reach $x_{\\mathrm{target}}$ in finite time, $x_{\\mathrm{target}}$ must lie strictly between the initial state $x_0$ and the equilibrium $x_\\infty$.\n\nLet us apply this to our system:\n- **In mode ON**: The system is heating. The trajectory starts at some temperature $x_i$ and moves towards $x_{\\infty, \\mathrm{ON}}$. The guard is $x_{\\mathrm{target}} = r+h$. A switch to mode $\\mathrm{OFF}$ will occur in finite time if and only if the guard lies between the current temperature and the equilibrium: $x_i < r+h < x_{\\infty, \\mathrm{ON}}$. Since a heating cycle starts at or below $r-h$, we have $x_i \\le r+h$. The strict condition for a future switch is therefore $r+h < x_{\\infty, \\mathrm{ON}}$. If $r+h \\ge x_{\\infty, \\mathrm{ON}}$, the temperature will asymptotically approach $x_{\\infty, \\mathrm{ON}}$ without ever reaching the guard $r+h$. The time to switch is $\\Delta t_{\\mathrm{ON}} = \\tau \\ln\\left(\\frac{x_i - x_{\\infty, \\mathrm{ON}}}{ (r+h) - x_{\\infty, \\mathrm{ON}}}\\right)$.\n\n- **In mode OFF**: The system is cooling. The trajectory starts at $x_i$ and moves towards $x_{\\infty, \\mathrm{OFF}}$. The guard is $x_{\\mathrm{target}} = r-h$. A switch to mode $\\mathrm{ON}$ will occur in finite time if and only if $x_{\\infty, \\mathrm{OFF}} < r-h < x_i$. The strict condition for a future switch is $x_{\\infty, \\mathrm{OFF}} < r-h$. If $x_{\\infty, \\mathrm{OFF}} \\ge r-h$, the temperature will asymptotically approach $x_{\\infty, \\mathrm{OFF}}$ and never reach the guard. The time to switch is $\\Delta t_{\\mathrm{OFF}} = \\tau \\ln\\left(\\frac{x_i - x_{\\infty, \\mathrm{OFF}}}{(r-h) - x_{\\infty, \\mathrm{OFF}}}\\right)$.\n\n#### 2.4. Simulation Algorithm Synthesis\n\nThe event-driven simulation algorithm proceeds as follows:\n1. Initialize time $t=0.0$, initial state $x=x_0$, total ON-time $T_{\\mathrm{on}}=0.0$, and switch count $N_s=0$.\n2. Determine the initial mode based on $x_0$, $r$, and $h$ as per the problem specification.\n3. Enter a loop that continues as long as $t < T_{\\mathrm{end}}$:\n   a. Identify the current mode (ON or OFF), the corresponding equilibrium ($x_{\\infty, \\mathrm{ON}}$ or $x_{\\infty, \\mathrm{OFF}}$), and the target guard ($r+h$ or $r-h$).\n   b. Check if the condition for a finite-time switch is met.\n   c. If a switch is possible, calculate the time-to-guard, $\\Delta t$.\n      i. If $t + \\Delta t > T_{\\mathrm{end}}$, the simulation ends in the current mode. Update $T_{\\mathrm{on}}$ if the mode is ON for the remaining time $T_{\\mathrm{end}}-t$. Terminate the loop.\n      ii. If $t + \\Delta t \\le T_{\\mathrm{end}}$, a switch occurs. Update $t \\to t+\\Delta t$, update $T_{\\mathrm{on}}$ if the mode was ON, set $x$ to the guard value, increment $N_s$, and flip the mode.\n   d. If a switch is not possible (asymptotic approach), the system remains in the current mode for the rest of the simulation. Update $T_{\\mathrm{on}}$ if the mode is ON for the remaining time $T_{\\mathrm{end}}-t$. Terminate the loop.\n4. After the loop, calculate the average duty cycle: $d = T_{\\mathrm{on}} / T_{\\mathrm{end}}$.\n5. Report the rounded duty cycle and the total switch count.\n\n#### 2.5. Initial Mode Selection\nThe initial mode at $t=0$ is determined by the initial temperature $x_0$ according to the specified rule:\n- If $x_0 \\le r-h$, the mode is $\\mathrm{ON}$.\n- If $x_0 \\ge r+h$, the mode is $\\mathrm{OFF}$.\n- If $r-h < x_0 < r+h$, the mode is $\\mathrm{OFF}$.\n\nThis completes the theoretical foundation for the required implementation.", "answer": "```python\nimport numpy as np\nimport math\n\ndef solve():\n    \"\"\"\n    Main function to run simulations for all test cases and print the results.\n    \"\"\"\n\n    test_cases = [\n        # Case A: Typical toggling\n        (300.0, 0.08, 15.0, 22.0, 0.5, 20.0, 3600.0),\n        # Case B: Unreachable setpoint\n        (200.0, 0.04, 0.0, 20.0, 1.0, 10.0, 1200.0),\n        # Case C: Ambient above setpoint\n        (300.0, 0.05, 30.0, 20.0, 0.5, 25.0, 1200.0),\n        # Case D: Initial temperature in deadband\n        (400.0, 0.05, 18.0, 21.0, 0.5, 21.2, 3600.0),\n    ]\n\n    results = []\n    for case in test_cases:\n        duty_cycle, switch_count = simulate_hybrid_system(*case)\n        # Format the duty cycle to six decimal places using standard rounding\n        # f-string formatting handles rounding appropriately for this problem's values.\n        results.append(f\"{duty_cycle:.6f}\")\n        results.append(str(switch_count))\n\n    print(f\"[{','.join(results)}]\")\n\ndef simulate_hybrid_system(tau, k, T_a, r, h, x_0, T_end):\n    \"\"\"\n    Simulates the thermostat-controlled hybrid system using an event-driven method.\n\n    Args:\n        tau (float): Thermal time constant in seconds.\n        k (float): Heating rate constant in °C/s.\n        T_a (float): Ambient temperature in °C.\n        r (float): Reference setpoint in °C.\n        h (float): Hysteresis deadband half-width in °C.\n        x_0 (float): Initial temperature in °C.\n        T_end (float): Total simulation time in seconds.\n\n    Returns:\n        tuple: A tuple containing:\n            - float: The average duty cycle [0, 1].\n            - int: The total number of mode switches.\n    \"\"\"\n    t = 0.0\n    x = float(x_0)\n    total_on_time = 0.0\n    switch_count = 0\n\n    lower_threshold = r - h\n    upper_threshold = r + h\n\n    x_inf_off = float(T_a)\n    x_inf_on = T_a + k * tau\n\n    # Determine initial mode based on the problem's rule\n    if x <= lower_threshold:\n        mode = 'ON'\n    elif x >= upper_threshold:\n        mode = 'OFF'\n    else:  # In deadband\n        mode = 'OFF'\n    \n    while t < T_end:\n        time_left_in_sim = T_end - t\n\n        if mode == 'ON':\n            # Check if a switch to OFF is possible.\n            # The temperature must be able to reach the upper threshold,\n            # which requires the ON-mode equilibrium to be above it.\n            if x_inf_on > upper_threshold:\n                # Calculate time to reach the upper guard\n                # The argument to log is (x - x_inf_on) / (upper_threshold - x_inf_on).\n                # Both numerator and denominator are negative, so the ratio is positive.\n                # If x is very close to x_inf_on (practically impossible here),\n                # log could fail, but the problem structure prevents this.\n                time_to_switch = tau * np.log((x - x_inf_on) / (upper_threshold - x_inf_on))\n\n                if time_to_switch < time_left_in_sim:\n                    total_on_time += time_to_switch\n                    t += time_to_switch\n                    x = upper_threshold\n                    mode = 'OFF'\n                    switch_count += 1\n                else:\n                    # Simulation ends while the heater is ON\n                    total_on_time += time_left_in_sim\n                    t = T_end\n            else:\n                # Temperature will asymptotically approach x_inf_on, which is at or below\n                # the upper threshold. No switch will occur.\n                total_on_time += time_left_in_sim\n                t = T_end\n        \n        else:  # mode == 'OFF'\n            # Check if a switch to ON is possible.\n            # The temperature must be able to reach the lower threshold,\n            # which requires the OFF-mode equilibrium to be below it.\n            if x_inf_off < lower_threshold:\n                # Calculate time to reach the lower guard\n                # The argument to log is (x - x_inf_off) / (lower_threshold - x_inf_off).\n                # Both numerator and denominator are positive, so the ratio is positive.\n                time_to_switch = tau * np.log((x - x_inf_off) / (lower_threshold - x_inf_off))\n\n                if time_to_switch < time_left_in_sim:\n                    # Time spent in OFF mode does not add to total_on_time\n                    t += time_to_switch\n                    x = lower_threshold\n                    mode = 'ON'\n                    switch_count += 1\n                else:\n                    # Simulation ends while the heater is OFF\n                    t = T_end\n            else:\n                # Temperature will asymptotically approach x_inf_off, which is at or above\n                # the lower threshold. No switch will occur.\n                t = T_end\n    \n    duty_cycle = total_on_time / T_end if T_end > 0 else 0.0\n    return duty_cycle, switch_count\n\nif __name__ == '__main__':\n    solve()\n```", "id": "2723712"}]}