{"hands_on_practices": [{"introduction": "The response of a linear time-invariant (LTI) system can be understood as a combination of its natural modes, which are determined by the eigenvalues and eigenvectors of the state matrix $A$. This exercise explores a special, insightful scenario where the input vector $B$ is perfectly aligned with one of these modesâ€”that is, $B$ is an eigenvector of $A$. By working through this problem, you will see how this alignment dramatically simplifies the general solution, providing a clear and direct link between the system's internal structure and its response to a specific external input. [@problem_id:1611715]", "problem": "Consider a linear time-invariant (LTI) system that models the population dynamics of two interacting species, where the state variables $x_1(t)$ and $x_2(t)$ represent an excess or deficit in population compared to their stable equilibrium values. The system is governed by the state-space equation:\n$$\n\\frac{d}{dt}x(t) = Ax(t) + Bu(t)\n$$\nwhere $x(t) = \\begin{pmatrix} x_1(t) \\\\ x_2(t) \\end{pmatrix}$ is the state vector.\n\nThe system dynamics are described by the matrix $A$, and the an external influence (like a controlled food supply) is modeled by the input vector $B$ and the scalar input signal $u(t)$. The specific matrices are given as:\n$$\nA = \\begin{pmatrix} -3 & 1 \\\\ 1 & -3 \\end{pmatrix}, \\quad B = \\begin{pmatrix} 1 \\\\ 1 \\end{pmatrix}\n$$\nThe system is initially at its equilibrium state, so the initial condition is the zero vector, $x(0) = \\begin{pmatrix} 0 \\\\ 0 \\end{pmatrix}$. At time $t=0$, a constant external influence is applied, represented by a unit step function for the input signal, $u(t)=1$ for $t \\ge 0$.\n\nDetermine the state vector $x(t)$ for $t \\ge 0$ as an analytic expression.", "solution": "We use the standard solution of a linear time-invariant state-space system (variation of constants):\n$$\nx(t) = \\exp(A t)x(0) + \\int_{0}^{t} \\exp\\!\\big(A(t-\\tau)\\big) B\\, u(\\tau)\\, d\\tau.\n$$\nGiven $x(0)=\\begin{pmatrix}0 \\\\ 0\\end{pmatrix}$ and $u(\\tau)=1$ for $\\tau \\ge 0$, this reduces to\n$$\nx(t) = \\int_{0}^{t} \\exp\\!\\big(A(t-\\tau)\\big) B\\, d\\tau.\n$$\nPerform the change of variables $s=t-\\tau$, so that when $\\tau=0$, $s=t$, and when $\\tau=t$, $s=0$, yielding\n$$\nx(t) = \\int_{0}^{t} \\exp(A s) B\\, ds.\n$$\nNext, observe that $B$ is an eigenvector of $A$ by direct computation:\n$$\nA B = \\begin{pmatrix} -3 & 1 \\\\ 1 & -3 \\end{pmatrix}\\begin{pmatrix} 1 \\\\ 1 \\end{pmatrix}\n= \\begin{pmatrix} -2 \\\\ -2 \\end{pmatrix} = -2 \\begin{pmatrix} 1 \\\\ 1 \\end{pmatrix} = -2 B.\n$$\nHence $B$ is an eigenvector of $A$ with eigenvalue $-2$, which implies\n$$\n\\exp(A s) B = \\exp(-2 s)\\, B.\n$$\nTherefore,\n$$\nx(t) = \\int_{0}^{t} \\exp(-2 s)\\, B\\, ds = \\left(\\int_{0}^{t} \\exp(-2 s)\\, ds\\right) B\n= \\left[\\frac{1 - \\exp(-2 t)}{2}\\right] B.\n$$\nWith $B=\\begin{pmatrix}1 \\\\ 1\\end{pmatrix}$, we obtain\n$$\nx(t) = \\begin{pmatrix} \\frac{1 - \\exp(-2 t)}{2} \\\\ \\frac{1 - \\exp(-2 t)}{2} \\end{pmatrix}, \\quad t \\ge 0.\n$$", "answer": "$$\\boxed{\\begin{pmatrix} \\frac{1 - \\exp(-2 t)}{2} \\\\ \\frac{1 - \\exp(-2 t)}{2} \\end{pmatrix}}$$", "id": "1611715"}, {"introduction": "Building on the concept of system modes, this practice investigates the critical phenomenon of resonance. We will analyze what happens when the input signal, an exponential function $u(t) = \\exp(\\lambda t)$, has a time constant that precisely matches one of the system's eigenvalues. This scenario, where an input excites a system's natural frequency, is fundamental in many engineering fields and often leads to responses that grow in amplitude over time. This problem provides hands-on practice with the Laplace transform method, a powerful tool for solving for the system output and understanding the characteristic behavior of resonance. [@problem_id:1611775]", "problem": "A dynamic system is described by the following linear time-invariant (LTI) state-space model for time $t \\ge 0$:\n$$\n\\dot{x}(t) = Ax(t) + Bu(t) \\\\\ny(t) = Cx(t) + Du(t)\n$$\nwhere $x(t) = \\begin{pmatrix} x_1(t) \\\\ x_2(t) \\end{pmatrix}$ is the state vector, $u(t)$ is the scalar input, and $y(t)$ is the scalar output. The system matrices are given by:\n$$\nA = \\begin{pmatrix} 0 & 1 \\\\ -3 & -4 \\end{pmatrix}, \\quad B = \\begin{pmatrix} 0 \\\\ 1 \\end{pmatrix}, \\quad C = \\begin{pmatrix} 1 & 0 \\end{pmatrix}, \\quad D = [0]\n$$\nThe system is initially at rest, meaning the state vector is zero at $t=0$. An input signal $u(t) = \\exp(-t)$ is applied for all $t \\ge 0$.\n\nDetermine the output of the system, $y(t)$, for $t \\ge 0$. Your final answer should be a single analytic expression in terms of $t$.", "solution": "For a linear time-invariant state-space system with zero initial state, the output for input $u(t)$ is given by the convolution of the impulse response with the input. Equivalently, using Laplace transforms, with $x(0)=0$ we have\n$$\nY(s) = G(s) U(s),\n$$\nwhere the transfer function is\n$$\nG(s) = C(sI - A)^{-1}B + D.\n$$\nGiven\n$$\nA = \\begin{pmatrix} 0 & 1 \\\\ -3 & -4 \\end{pmatrix}, \\quad B = \\begin{pmatrix} 0 \\\\ 1 \\end{pmatrix}, \\quad C = \\begin{pmatrix} 1 & 0 \\end{pmatrix}, \\quad D = [0],\n$$\nwe compute\n$$\nsI - A = \\begin{pmatrix} s & -1 \\\\ 3 & s+4 \\end{pmatrix}, \\quad \\det(sI - A) = s(s+4) + 3 = s^{2} + 4s + 3.\n$$\nFor a $2\\times 2$ matrix $\\begin{pmatrix} a & b \\\\ c & d \\end{pmatrix}$, the adjugate is $\\begin{pmatrix} d & -b \\\\ -c & a \\end{pmatrix}$. Thus,\n$$\n\\operatorname{adj}(sI - A) = \\begin{pmatrix} s+4 & 1 \\\\ -3 & s \\end{pmatrix}.\n$$\nThen\n$$\n(sI - A)^{-1}B = \\frac{1}{\\det(sI - A)}\\,\\operatorname{adj}(sI - A)\\,B\n= \\frac{1}{s^{2}+4s+3}\\begin{pmatrix} s+4 & 1 \\\\ -3 & s \\end{pmatrix}\\begin{pmatrix} 0 \\\\ 1 \\end{pmatrix}\n= \\frac{1}{s^{2}+4s+3}\\begin{pmatrix} 1 \\\\ s \\end{pmatrix}.\n$$\nTherefore,\n$$\nG(s) = C(sI - A)^{-1}B = \\frac{1}{s^{2}+4s+3} = \\frac{1}{(s+1)(s+3)}.\n$$\nThe input is $u(t) = \\exp(-t)$ for $t \\ge 0$, so its Laplace transform is\n$$\nU(s) = \\frac{1}{s+1}.\n$$\nHence\n$$\nY(s) = G(s)U(s) = \\frac{1}{(s+1)^{2}(s+3)}.\n$$\nWe perform partial fraction decomposition:\n$$\n\\frac{1}{(s+1)^{2}(s+3)} = \\frac{A}{s+3} + \\frac{B}{s+1} + \\frac{C}{(s+1)^{2}}.\n$$\nMultiplying both sides by $(s+1)^{2}(s+3)$ gives\n$$\n1 = A(s+1)^{2} + B(s+1)(s+3) + C(s+3).\n$$\nExpanding and matching coefficients,\n$$\n1 = A(s^{2}+2s+1) + B(s^{2}+4s+3) + C(s+3),\n$$\nwhich yields the system\n$$\nA + B = 0, \\quad 2A + 4B + C = 0, \\quad A + 3B + 3C = 1.\n$$\nSolving, $B = -A$, $C = 2A$, and $4A = 1$, hence\n$$\nA = \\frac{1}{4}, \\quad B = -\\frac{1}{4}, \\quad C = \\frac{1}{2}.\n$$\nTherefore,\n$$\nY(s) = \\frac{1}{4}\\frac{1}{s+3} - \\frac{1}{4}\\frac{1}{s+1} + \\frac{1}{2}\\frac{1}{(s+1)^{2}}.\n$$\nTaking the inverse Laplace transform term-by-term, we obtain for $t \\ge 0$,\n$$\ny(t) = \\frac{1}{4}\\exp(-3t) - \\frac{1}{4}\\exp(-t) + \\frac{1}{2}t\\,\\exp(-t).\n$$\nThis is a single analytic expression in terms of $t$ and satisfies $y(0) = 0$ consistent with zero initial state and $D=0$.", "answer": "$$\\boxed{\\frac{1}{4}\\exp(-3t)-\\frac{1}{4}\\exp(-t)+\\frac{1}{2}t\\,\\exp(-t)}$$", "id": "1611775"}, {"introduction": "While exact analytical solutions offer profound insight, most real-world control systems are analyzed and designed using numerical simulation. This advanced practice bridges the gap between theory and computation by guiding you through the design of an exponential integrator, a class of numerical methods particularly well-suited for the state-space equations of LTI systems. You will derive a one-step method from first principles, analyze its local truncation error for \"stiff\" systems, and connect the analytical solution to a practical, implementable algorithm. [@problem_id:2746246]", "problem": "Consider the continuous-time Linear Time-Invariant (LTI) state equation (an Ordinary Differential Equation (ODE)) for a non-homogeneous system\n$$\n\\dot{x}(t) = A\\,x(t) + B\\,u(t),\n$$\nwhere $x(t) \\in \\mathbb{R}^n$, $u(t) \\in \\mathbb{R}^m$, and $A \\in \\mathbb{R}^{n \\times n}$, $B \\in \\mathbb{R}^{n \\times m}$. Assume the matrix $A$ is stiff in the sense that its eigenvalues have large negative real parts. Your goal is to design, analyze, and implement a time-stepper that advances the forced solution over a single step of size $h > 0$ starting from the exact state $x(t)$.\n\nTasks:\n- Start from fundamental definitions: the matrix exponential that solves the homogeneous part, and the general principle of superposition. Derive an exact representation of $x(t+h)$ that separates the homogeneous and forced contributions using only these bases. Do not invoke any specialized discretization formula directly; build it from the definitions.\n- On the single interval $[t,t+h]$, approximate the input as a first-order Taylor model $u(t+s) \\approx u(t) + s\\,u'(t)$ that is valid for small $h$. Use this approximation inside the exact forced representation to obtain a one-step exponential integrator that is explicit in terms of $A$, $B$, $u(t)$, and $u'(t)$.\n- Define the family of entire functions $\\{\\varphi_k\\}_{k \\ge 0}$ by\n$$\n\\varphi_0(Z) \\equiv e^{Z}, \n\\quad \n\\varphi_k(Z) \\equiv \\int_0^1 e^{(1-\\theta)Z}\\,\\frac{\\theta^{k-1}}{(k-1)!}\\,d\\theta\n= \\sum_{j=0}^{\\infty} \\frac{Z^j}{(j+k)!}\n\\quad \\text{for } k \\ge 1,\n$$\nfor any square matrix $Z$. Express your exponential integrator in terms of $\\varphi_1$ and $\\varphi_2$ applied to $hA$.\n- Derive the local truncation error (Local Truncation Error (LTE)) for a general twice continuously differentiable input $u$, by matching the exact forced contribution against your integrator and identifying the leading neglected term. Characterize its order in $h$ and provide the leading-order term in closed form using $\\varphi_3(hA)$ and $u''(t)$.\n- Specialize the analysis to the important case where the input $u$ is exactly quadratic in time over the step, namely $u(t+s) = u(t) + s\\,u'(t) + \\tfrac{s^2}{2}\\,u''(t)$ with $u''(t)$ constant over $[t,t+h]$. Show that, when starting from the exact $x(t)$, the one-step LTE vector is exactly\n$$\n\\Delta_{\\text{LTE}}(t,h) \\;=\\; h^3\\,\\varphi_3(hA)\\,B\\,u''(t).\n$$\nThis identity implies the integrator is second order accurate for smooth inputs, and the LTE scales like $h^3$ for small $h$.\n\nImplementation requirements:\n- Implement a program that, for the test suite below, computes the Euclidean norm of the one-step LTE vector $\\|\\Delta_{\\text{LTE}}(t,h)\\|_2$ for each test case where $u$ is quadratic with a constant second derivative $u''(t)$. Use the exact formula above. For one additional test, compute the ratio\n$$\nR \\;=\\; \\frac{\\|\\Delta_{\\text{LTE}}(t,h)\\|_2}{\\|\\Delta_{\\text{LTE}}(t,h/2)\\|_2}.\n$$\n- The functions $\\varphi_k(hA)$ must be evaluated in a numerically stable way suitable for stiff $A$. You may use the block-matrix exponential identity based on\n$$\n\\exp\\!\\Big(h\\,\\begin{bmatrix}\nA & I & 0 & 0\\\\\n0 & A & I & 0\\\\\n0 & 0 & A & I\\\\\n0 & 0 & 0 & 0\n\\end{bmatrix}\\Big) \n\\;=\\;\n\\begin{bmatrix}\n\\varphi_0(hA) & h\\,\\varphi_1(hA) & h^2\\,\\varphi_2(hA) & h^3\\,\\varphi_3(hA)\\\\\n0 & \\varphi_0(hA) & h\\,\\varphi_1(hA) & h^2\\,\\varphi_2(hA)\\\\\n0 & 0 & \\varphi_0(hA) & h\\,\\varphi_1(hA)\\\\\n0 & 0 & 0 & I\n\\end{bmatrix}.\n$$\n\nTest suite:\n- In all cases, use the Euclidean norm for vectors. There are no physical units in this problem.\n- The inputs are specified by $(A,B,u''(t),h)$; you may take $t$ arbitrary because only $u''(t)$ enters the LTE formula for quadratic $u$.\n- Compute and return floating-point answers rounded to $10$ decimal places.\n\nThe test cases are:\n- Case $1$ (stiff, diagonal): $A = \\mathrm{diag}(-100,-50)$, $B = I_2$, $u''(t) = \\begin{bmatrix}3\\\\-4\\end{bmatrix}$, $h = 0.02$. Output $\\|\\Delta_{\\text{LTE}}(t,h)\\|_2$.\n- Case $2$ (boundary, constant input): $A = [0]$, $B = [1]$, $u''(t) = [0]$, $h = 0.5$. Output $\\|\\Delta_{\\text{LTE}}(t,h)\\|_2$.\n- Case $3$ (stiff, nondiagonal): $A = \\begin{bmatrix}0 & 1\\\\ -400 & -40\\end{bmatrix}$, $B = \\begin{bmatrix}0\\\\1\\end{bmatrix}$, $u''(t) = [5]$, $h = 0.01$. Output $\\|\\Delta_{\\text{LTE}}(t,h)\\|_2$.\n- Case $4$ (order check via ratio): reuse Case $1$ with the same $A$, $B$, $u''(t)$, and compute $R = \\|\\Delta_{\\text{LTE}}(t,h)\\|_2 / \\|\\Delta_{\\text{LTE}}(t,h/2)\\|_2$ at $h = 0.02$. Output $R$.\n- Case $5$ (zero matrix limit): $A = [0]$, $B = [1]$, $u''(t) = [6]$, $h = 0.3$. Output $\\|\\Delta_{\\text{LTE}}(t,h)\\|_2$.\n\nFinal output format:\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets (for example, \"[result1,result2,result3]\"). The five values must appear in the order of Cases $1$ through $5$, each rounded to $10$ decimal places.", "solution": "The problem statement presented is valid. It is scientifically grounded in the principles of linear systems theory and numerical analysis for ordinary differential equations. It is well-posed, objective, and self-contained, providing all necessary definitions, constraints, and data for a unique and verifiable solution. I will proceed with the derivation and implementation as requested.\n\nThe subject is the solution of the non-homogeneous linear time-invariant (LTI) state equation:\n$$\n\\dot{x}(t) = A\\,x(t) + B\\,u(t)\n$$\nwhere $x(t) \\in \\mathbb{R}^n$ is the state vector, $u(t) \\in \\mathbb{R}^m$ is the input vector, and $A \\in \\mathbb{R}^{n \\times n}$, $B \\in \\mathbb{R}^{n \\times m}$ are constant matrices.\n\nFirst, we derive the exact expression for the state $x(t+h)$ given the state $x(t)$ for a single time step of size $h > 0$. The solution to this ODE can be found using the method of variation of parameters, also known as Duhamel's principle. The general solution is the sum of the homogeneous solution and a particular solution corresponding to the forcing term.\nThe homogeneous equation $\\dot{x}_h(t) = A x_h(t)$ with initial condition $x_h(t)$ has the solution $e^{A(t'-t)}x(t)$ for $t' \\geq t$.\nThe solution to the full non-homogeneous equation is given by the convolution integral:\n$$\nx(t+h) = e^{Ah} x(t) + \\int_t^{t+h} e^{A(t+h-\\tau)} B u(\\tau) \\,d\\tau\n$$\nThis formula is exact. To facilitate analysis and approximation, we perform a change of variables in the integral. Let $\\tau = t+s$, which implies $d\\tau = ds$. The integration limits change from $\\tau=t$ to $s=0$ and from $\\tau=t+h$ to $s=h$.\nThe expression becomes:\n$$\nx(t+h) = e^{Ah} x(t) + \\int_0^h e^{A(h-s)} B u(t+s) \\,ds\n$$\nThis expression cleanly separates the contribution from the initial state $x(t)$, which evolves according to the homogeneous dynamics ($e^{Ah}x(t)$), and the contribution from the input $u(t)$ over the interval $[t, t+h]$ (the integral term).\n\nSecond, we approximate the integrator by using a first-order Taylor expansion for the input $u(t+s)$ around $s=0$, valid for small $h$:\n$$\nu(t+s) \\approx u(t) + s\\,u'(t)\n$$\nSubstituting this approximation into the integral term of the exact solution gives the approximate forced response:\n$$\nx_{\\text{forced, approx}}(t+h) = \\int_0^h e^{A(h-s)} B \\left( u(t) + s\\,u'(t) \\right) \\,ds\n$$\nWe can separate the terms:\n$$\nx_{\\text{forced, approx}}(t+h) = \\left( \\int_0^h e^{A(h-s)} \\,ds \\right) B u(t) + \\left( \\int_0^h s\\,e^{A(h-s)} \\,ds \\right) B u'(t)\n$$\nTo evaluate these integrals, we perform another change of variables. Let $s = \\theta h$, so $ds = h\\,d\\theta$. The integration limits change from $s=0$ to $\\theta=0$ and from $s=h$ to $\\theta=1$.\nThe first integral becomes:\n$$\n\\int_0^1 e^{A(h-\\theta h)} h\\,d\\theta = h \\int_0^1 e^{hA(1-\\theta)} \\,d\\theta\n$$\nThe second integral becomes:\n$$\n\\int_0^1 (\\theta h) e^{A(h-\\theta h)} h\\,d\\theta = h^2 \\int_0^1 \\theta e^{hA(1-\\theta)} \\,d\\theta\n$$\nThus, our one-step exponential integrator is:\n$$\nx_{\\text{approx}}(t+h) = e^{Ah} x(t) + \\left(h \\int_0^1 e^{hA(1-\\theta)} \\,d\\theta \\right) B u(t) + \\left(h^2 \\int_0^1 \\theta e^{hA(1-\\theta)} \\,d\\theta \\right) B u'(t)\n$$\n\nThird, we express this integrator using the defined $\\varphi_k$ functions. Let $Z = hA$.\nThe definitions are:\n$$\n\\varphi_0(Z) = e^{Z}\n$$\n$$\n\\varphi_1(Z) = \\int_0^1 e^{(1-\\theta)Z} \\,d\\theta\n$$\n$$\n\\varphi_2(Z) = \\int_0^1 e^{(1-\\theta)Z} \\frac{\\theta^{2-1}}{(2-1)!} \\,d\\theta = \\int_0^1 \\theta e^{(1-\\theta)Z} \\,d\\theta\n$$\nBy direct comparison with the derived integrator terms:\nThe homogeneous part is $\\varphi_0(hA) x(t)$.\nThe coefficient of $B u(t)$ is $h \\varphi_1(hA)$.\nThe coefficient of $B u'(t)$ is $h^2 \\varphi_2(hA)$.\nThe integrator is therefore:\n$$\nx_{\\text{approx}}(t+h) = \\varphi_0(hA) x(t) + h\\,\\varphi_1(hA) B u(t) + h^2\\,\\varphi_2(hA) B u'(t)\n$$\n\nFourth, we derive the Local Truncation Error (LTE), defined as $\\Delta_{\\text{LTE}}(t,h) = x(t+h) - x_{\\text{approx}}(t+h)$, assuming $x(t)$ is exact. The homogeneous parts cancel. The error arises from the approximation of the forced response. The exact forced response depends on the full Taylor series of $u(t+s)$:\n$$\nu(t+s) = u(t) + s u'(t) + \\frac{s^2}{2} u''(t) + \\frac{s^3}{6} u'''(t) + \\dots\n$$\nSubstituting this into the exact integral formula and using the change of variables $s=\\theta h$ gives:\n\\begin{align*}\nx_{\\text{forced, exact}}(t+h) &= \\int_0^h e^{A(h-s)} B u(t+s) \\,ds \\\\\n&= h \\int_0^1 e^{hA(1-\\theta)} B \\left(u(t) + (\\theta h) u'(t) + \\frac{(\\theta h)^2}{2} u''(t) + \\dots \\right) \\,d\\theta \\\\\n&= \\left(h \\int_0^1 e^{hA(1-\\theta)} d\\theta\\right)Bu(t) + \\left(h^2 \\int_0^1 \\theta e^{hA(1-\\theta)} d\\theta\\right)Bu'(t) \\\\\n& \\quad + \\left(h^3 \\int_0^1 \\frac{\\theta^2}{2} e^{hA(1-\\theta)} d\\theta\\right)Bu''(t) + O(h^4)\n\\end{align*}\nUsing the $\\varphi_k$ definitions, where $\\varphi_k(Z) = \\int_0^1 e^{(1-\\theta)Z} \\frac{\\theta^{k-1}}{(k-1)!} \\,d\\theta$:\n$$\nx_{\\text{forced, exact}}(t+h) = h\\varphi_1(hA)Bu(t) + h^2\\varphi_2(hA)Bu'(t) + h^3\\varphi_3(hA)Bu''(t) + O(h^4)\n$$\nThe LTE is the difference between the exact and approximate forced responses:\n$$\n\\Delta_{\\text{LTE}}(t,h) = x_{\\text{forced, exact}}(t+h) - x_{\\text{forced, approx}}(t+h)\n$$\n$$\n\\Delta_{\\text{LTE}}(t,h) = h^3\\,\\varphi_3(hA)\\,B\\,u''(t) + O(h^4)\n$$\nThe leading-order term of the LTE is $h^3\\,\\varphi_3(hA)\\,B\\,u''(t)$. Since the LTE is proportional to $h^3$, the one-step integrator is second-order accurate.\n\nFinally, we specialize to the case where the input $u$ is exactly quadratic over the step, i.e., $u(t+s) = u(t) + s\\,u'(t) + \\frac{s^2}{2}\\,u''(t)$ for $s \\in [0,h]$, with $u''(t)$ constant. In this case, the Taylor series for $u(t+s)$ terminates, and all derivatives of order $3$ and higher are zero. The expression derived for $x_{\\text{forced, exact}}(t+h)$ is no longer an approximation but an exact identity where the series terminates at the $u''(t)$ term:\n$$\nx_{\\text{forced, exact}}(t+h) = h\\varphi_1(hA)Bu(t) + h^2\\varphi_2(hA)Bu'(t) + h^3\\varphi_3(hA)Bu''(t)\n$$\nThe LTE, which is the difference between this exact forced response and the one given by our second-order integrator, is therefore precisely:\n$$\n\\Delta_{\\text{LTE}}(t,h) \\;=\\; h^3\\,\\varphi_3(hA)\\,B\\,u''(t)\n$$\nThis completes the required theoretical analysis. The implementation will proceed based on this final formula.", "answer": "```python\nimport numpy as np\nfrom scipy.linalg import expm\n\ndef compute_lte_norm(A, B, u_dd, h):\n    \"\"\"\n    Computes the Euclidean norm of the one-step Local Truncation Error vector.\n\n    The LTE for a quadratic input is given by:\n    delta_LTE = h^3 * phi_3(hA) * B * u''(t)\n\n    phi_3 is computed using the block matrix exponential method.\n    \"\"\"\n    n = A.shape[0]\n    m = B.shape[1]\n\n    # Ensure B and u_dd are correctly shaped matrices\n    if B.ndim == 1:\n        B = B.reshape(n, m)\n    if u_dd.ndim == 1:\n        u_dd = u_dd.reshape(m, 1)\n\n    # Construct the augmented matrix M for computing phi functions\n    # M = h * [[A, I, 0, 0], [0, A, I, 0], [0, 0, A, I], [0, 0, 0, 0]]\n    # Size of M is (4n) x (4n)\n    m_dim = 4 * n\n    M = np.zeros((m_dim, m_dim), dtype=float)\n\n    hA = h * A\n    hI = h * np.eye(n)\n\n    # Populate the block matrix M\n    for i in range(3):\n        M[i*n:(i+1)*n, i*n:(i+1)*n] = hA\n        M[i*n:(i+1)*n, (i+1)*n:(i+2)*n] = hI\n    \n    # E = exp(M) = [[phi0, h*phi1, h^2*phi2, h^3*phi3],\n    #               [0,    phi0,   h*phi1,   h^2*phi2],\n    #               [0,    0,      phi0,     h*phi1],\n    #               [0,    0,      0,        I]]\n    E = expm(M)\n\n    # Extract the block corresponding to h^3 * phi_3(hA)\n    # This is the top-right n x n block.\n    P3_block = E[0:n, 3*n:4*n]\n    \n    # Compute the LTE vector\n    # delta_lte = (h^3 * phi_3(hA)) @ B @ u''(t)\n    delta_lte_vector = P3_block @ B @ u_dd\n    \n    # Return its Euclidean norm\n    return np.linalg.norm(delta_lte_vector)\n\ndef solve():\n    \"\"\"\n    Solves the problem for the given test suite.\n    \"\"\"\n    # Define test cases\n    # (A, B, u''(t), h)\n    \n    # Case 1\n    A1 = np.diag([-100.0, -50.0])\n    B1 = np.eye(2)\n    u_dd1 = np.array([[3.0], [-4.0]])\n    h1 = 0.02\n\n    # Case 2\n    A2 = np.array([[0.0]])\n    B2 = np.array([[1.0]])\n    u_dd2 = np.array([[0.0]])\n    h2 = 0.5\n\n    # Case 3\n    A3 = np.array([[0.0, 1.0], [-400.0, -40.0]])\n    B3 = np.array([[0.0], [1.0]])\n    u_dd3 = np.array([[5.0]])\n    h3 = 0.01\n\n    # Case 4 (re-uses Case 1 parameters)\n    A4, B4, u_dd4, h4 = A1, B1, u_dd1, h1\n    \n    # Case 5\n    A5 = np.array([[0.0]])\n    B5 = np.array([[1.0]])\n    u_dd5 = np.array([[6.0]])\n    h5 = 0.3\n\n    results = []\n\n    # Process Cases 1, 2, 3, 5\n    results.append(compute_lte_norm(A1, B1, u_dd1, h1))\n    results.append(compute_lte_norm(A2, B2, u_dd2, h2))\n    results.append(compute_lte_norm(A3, B3, u_dd3, h3))\n    \n    # Process Case 4\n    norm_h = compute_lte_norm(A4, B4, u_dd4, h4)\n    norm_h_half = compute_lte_norm(A4, B4, u_dd4, h4 / 2.0)\n    \n    # Avoid division by zero if norm_h_half is zero\n    ratio_R = norm_h / norm_h_half if norm_h_half != 0 else np.inf\n    # Insert ratio for Case 4 at the correct position (index 3)\n    results.insert(3, ratio_R)\n\n    # Process Case 5\n    results.append(compute_lte_norm(A5, B5, u_dd5, h5))\n    \n    # Round results to 10 decimal places and format output\n    # Note: Case 4 was inserted, so Case 5 result is now at the end\n    formatted_results = [f\"{res:.10f}\" for res in results]\n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n```", "id": "2746246"}]}