{"hands_on_practices": [{"introduction": "We begin our hands-on practice with a foundational scenario: designing a first-order observer for a second-order system where one state is unmeasured. This exercise focuses on the core principle of pole placement for the estimation error dynamics. By completing this problem, you will perform the essential calculation of the scalar observer gain $L$ needed to place the error dynamics pole at a specific location, thereby dictating the speed at which your state estimate converges to the true value [@problem_id:1604270].", "problem": "Consider a second-order Linear Time-Invariant (LTI) system described by the state-space equations:\n$$ \\dot{\\mathbf{x}}(t) = A \\mathbf{x}(t) + B u(t) $$\n$$ y(t) = C \\mathbf{x}(t) $$\nwith the state vector $\\mathbf{x}(t) = \\begin{pmatrix} x_1(t) \\\\ x_2(t) \\end{pmatrix}$ and matrices:\n$$ A = \\begin{pmatrix} -1 & 1 \\\\ -4 & -6 \\end{pmatrix}, \\quad B = \\begin{pmatrix} 0 \\\\ 1 \\end{pmatrix}, \\quad C = \\begin{pmatrix} 1 & 0 \\end{pmatrix} $$\nThe output $y(t)$ provides a direct measurement of the state $x_1(t)$, but the state $x_2(t)$ is not directly measured. A reduced-order observer is designed to generate an estimate, $\\hat{x}_2(t)$, of the unmeasured state. The design of this observer relies on a scalar gain parameter $L$ that influences the dynamics of the estimation error, defined as $e(t) = x_2(t) - \\hat{x}_2(t)$.\n\nDetermine the numerical value of the gain $L$ that places the eigenvalue of the first-order estimation error dynamics at -10.", "solution": "We partition the system according to measured and unmeasured states. With $\\mathbf{x} = \\begin{pmatrix} x_{1} \\\\ x_{2} \\end{pmatrix}$ and $C = \\begin{pmatrix} 1 & 0 \\end{pmatrix}$, we have $x_{1}$ measured and $x_{2}$ unmeasured. Partition $A$ and $B$ as\n$$\nA = \\begin{pmatrix} A_{11} & A_{12} \\\\ A_{21} & A_{22} \\end{pmatrix}, \\quad B = \\begin{pmatrix} B_{1} \\\\ B_{2} \\end{pmatrix},\n$$\nwith $A_{11} = -1$, $A_{12} = 1$, $A_{21} = -4$, $A_{22} = -6$, $B_{1} = 0$, and $B_{2} = 1$.\n\nDefine the reduced-order observer variable $z = x_{2} - L x_{1}$. Differentiate to obtain\n$$\n\\dot{z} = \\dot{x}_{2} - L \\dot{x}_{1} = (A_{21} x_{1} + A_{22} x_{2} + B_{2} u) - L (A_{11} x_{1} + A_{12} x_{2} + B_{1} u).\n$$\nThis simplifies to\n$$\n\\dot{z} = (A_{21} - L A_{11}) x_{1} + (A_{22} - L A_{12}) x_{2} + (B_{2} - L B_{1}) u.\n$$\nUsing $x_{2} = z + L x_{1}$ (from the definition of $z$), substitute to get\n$$\n\\dot{z} = (A_{22} - L A_{12}) z + \\big(A_{21} - L A_{11} + (A_{22} - L A_{12}) L\\big) x_{1} + (B_{2} - L B_{1}) u.\n$$\nWe implement the observer\n$$\n\\dot{\\hat{z}} = (A_{22} - L A_{12}) \\hat{z} + \\big(A_{21} - L A_{11} + (A_{22} - L A_{12}) L\\big) y + (B_{2} - L B_{1}) u,\n$$\nand reconstruct $\\hat{x}_{2} = \\hat{z} + L y$. Define the estimation error $e = x_{2} - \\hat{x}_{2}$. Since $y = x_{1}$ is measured exactly, $e = (z + L x_{1}) - (\\hat{z} + L y) = z - \\hat{z}$. Therefore, the error dynamics are\n$$\n\\dot{e} = \\dot{z} - \\dot{\\hat{z}} = (A_{22} - L A_{12}) (z - \\hat{z}) = (A_{22} - L A_{12}) e.\n$$\nHence the estimation error eigenvalue equals $A_{22} - L A_{12}$. To place it at $-10$, impose\n$$\nA_{22} - L A_{12} = -10.\n$$\nSubstituting $A_{22} = -6$ and $A_{12} = 1$ gives\n$$\n-6 - L = -10 \\quad \\Rightarrow \\quad L = 4.\n$$", "answer": "$$\\boxed{4}$$", "id": "1604270"}, {"introduction": "Having learned how to place the poles of an observer's error dynamics, it is crucial to understand the fundamental limits of this technique. This thought experiment explores the concept of observability, which determines whether state estimation is possible at all. By analyzing a hypothetical reactor, you will discover how the internal coupling of the system, represented by the matrix $A$, can render the unmeasured states \"invisible\" to the sensors, making it impossible for any choice of observer gain $L$ to stabilize the estimation error [@problem_id:1604252]. This practice will sharpen your conceptual understanding of why observability is a non-negotiable prerequisite for successful observer design.", "problem": "A control engineering team is developing a monitoring system for a new two-chamber chemical reactor. The reactor's state is described by a four-dimensional state vector $x = [x_1, x_2, x_3, x_4]^T$. The system can be modeled as a Linear Time-Invariant (LTI) system, $\\dot{x}(t) = Ax(t)$. Due to cost and physical constraints, sensors can only measure the chemical concentrations in the first chamber, which correspond to states $x_1$ and $x_2$. The concentrations in the second chamber, $x_3$ and $x_4$, are unmeasured.\n\nThe team plans to implement a reduced-order observer to estimate the unmeasured states. The state vector is partitioned as $x = \\begin{pmatrix} x_m \\\\ x_u \\end{pmatrix}$, where $x_m = [x_1, x_2]^T$ are the measured states and $x_u = [x_3, x_4]^T$ are the unmeasured states. The system matrix $A$ is partitioned accordingly:\n$$\nA = \\begin{pmatrix} A_{11} & A_{12} \\\\ A_{21} & A_{22} \\end{pmatrix}\n$$\nA preliminary analysis of the reactor's governing equations reveals two critical characteristics:\n1. The reaction dynamics in the first chamber are entirely independent of the concentrations of chemicals present in the second chamber.\n2. The subsystem describing the chemical reactions within the second chamber, when considered in isolation from the first, is inherently unstable. This means that if the coupling from the first chamber were removed, the concentrations in the second chamber would grow without bound due to a runaway reaction.\n\nGiven these two characteristics, which of the following statements correctly describes the feasibility and stability of designing a reduced-order observer to estimate the unmeasured states $(x_3, x_4)$?\n\nA. A stable reduced-order observer can always be designed by choosing an appropriate observer gain matrix $L$, which allows for arbitrary placement of the estimation error poles.\n\nB. The estimation error will be unstable because the unmeasured dynamics are unstable, and the system's structure prevents these states from being observed through the available measurements.\n\nC. The stability of the estimation error cannot be determined. It depends on whether the overall system, governed by the full matrix $A$, is stable.\n\nD. The estimation error will be stable regardless of the dynamics in the second chamber, as the decoupling of the measured states from the unmeasured states simplifies the observer design.\n\nE. The stability of the estimation error depends on the specific numerical values of the submatrix $A_{21}$, which couples the measured states to the unmeasured states.", "solution": "The problem asks about the stability of a reduced-order observer for a system with specific structural properties. Let the state vector be partitioned into measured states $x_m \\in \\mathbb{R}^2$ and unmeasured states $x_u \\in \\mathbb{R}^2$. The system dynamics are given by:\n$$\n\\begin{pmatrix} \\dot{x}_m \\\\ \\dot{x}_u \\end{pmatrix} = \\begin{pmatrix} A_{11} & A_{12} \\\\ A_{21} & A_{22} \\end{pmatrix} \\begin{pmatrix} x_m \\\\ x_u \\end{pmatrix}\n$$\nThe available measurement is $y = x_m$.\n\nA reduced-order observer is designed to estimate the unmeasured part of the state, $x_u$. The core idea is to use the known dynamics and the available measurements to construct the estimate, $\\hat{x}_u$.\n\nThe dynamics for the unmeasured states are:\n$$\n\\dot{x}_u = A_{21} x_m + A_{22} x_u\n$$\nThe dynamics for the measured states are:\n$$\n\\dot{x}_m = A_{11} x_m + A_{12} x_u\n$$\nWe can rearrange the second equation to treat part of it as a \"new output\" that contains information about $x_u$:\n$$\n\\dot{x}_m - A_{11} x_m = A_{12} x_u\n$$\nLet's call the left side $y_{new} = \\dot{x}_m - A_{11} x_m$. Since $x_m$ is measured, we can, in principle, compute its derivative $\\dot{x}_m$ (or process it through a filter), so $y_{new}$ is a knowable quantity. We have a system for $x_u$ with dynamics $\\dot{x}_u = A_{22} x_u + A_{21} x_m$ and an \"output\" $y_{new} = A_{12} x_u$.\n\nAn observer for $x_u$ is then constructed as:\n$$\n\\dot{\\hat{x}}_u = A_{22} \\hat{x}_u + A_{21} x_m + L(y_{new} - \\hat{y}_{new})\n$$\nwhere $L$ is the observer gain matrix and $\\hat{y}_{new} = A_{12} \\hat{x}_u$. Substituting the expressions for $y_{new}$ and $\\hat{y}_{new}$:\n$$\n\\dot{\\hat{x}}_u = A_{22} \\hat{x}_u + A_{21} x_m + L(A_{12} x_u - A_{12} \\hat{x}_u)\n$$\nThe estimation error is defined as $e_u = x_u - \\hat{x}_u$. The dynamics of the error are found by subtracting the observer dynamics from the true state dynamics:\n$$\n\\dot{e}_u = \\dot{x}_u - \\dot{\\hat{x}}_u = (A_{21} x_m + A_{22} x_u) - (A_{22} \\hat{x}_u + A_{21} x_m + L A_{12} (x_u - \\hat{x}_u))\n$$\nSimplifying this expression yields the error dynamics:\n$$\n\\dot{e}_u = A_{22} x_u - A_{22} \\hat{x}_u - L A_{12} (x_u - \\hat{x}_u)\n$$\n$$\n\\dot{e}_u = (A_{22} - L A_{12}) e_u\n$$\nFor the estimation error to be stable (i.e., for $e_u(t) \\to 0$ as $t \\to \\infty$), all eigenvalues of the matrix $(A_{22} - L A_{12})$ must have negative real parts. The ability to choose a gain matrix $L$ to achieve this is possible if and only if the pair $(A_{22}, A_{12})$ is detectable. If the pair is observable, the eigenvalues can be arbitrarily placed.\n\nNow, let's analyze the two properties given in the problem statement.\n\n1.  \"The reaction dynamics in the first chamber are entirely independent of the concentrations of chemicals present in the second chamber.\"\n    The dynamics of the first chamber (measured states $x_m$) are given by $\\dot{x}_m = A_{11} x_m + A_{12} x_u$. For these dynamics to be independent of the second chamber's states ($x_u$), the term multiplying $x_u$ must be zero. This directly implies that the submatrix $A_{12}$ must be the zero matrix: $A_{12} = 0$.\n\n2.  \"The subsystem describing the chemical reactions within the second chamber, when considered in isolation... is inherently unstable.\"\n    The dynamics of the second chamber in isolation are described by $\\dot{x}_u = A_{22} x_u$. The instability of this subsystem means that the matrix $A_{22}$ has at least one eigenvalue with a non-negative real part.\n\nLet's substitute the first property, $A_{12} = 0$, into the error dynamics equation:\n$$\n\\dot{e}_u = (A_{22} - L \\cdot 0) e_u = A_{22} e_u\n$$\nThis result is crucial. It shows that when $A_{12} = 0$, the observer gain matrix $L$ has no influence whatsoever on the dynamics of the estimation error. The stability of the error is determined solely by the eigenvalues of the matrix $A_{22}$.\n\nFrom the second property, we know that $A_{22}$ is an unstable matrix. Therefore, the error dynamics $\\dot{e}_u = A_{22} e_u$ are unstable. The estimation error $e_u$ will not converge to zero; in fact, it will grow unboundedly. This means it is impossible to construct a stable reduced-order observer for this system.\n\nPhysically, $A_{12}=0$ means the unmeasured states $x_u$ have no effect on the measured states $x_m$. Consequently, no information about $x_u$ can be inferred from observing $x_m$. The unmeasured states are \"hidden\" from the output, making them unobservable. The condition for observability of the pair $(A_{22}, A_{12})$ fails completely when $A_{12}=0$. Since the unobservable dynamics (governed by $A_{22}$) are unstable, the estimation error is guaranteed to be unstable.\n\nNow we evaluate the choices:\n- A is incorrect. The gain $L$ is rendered useless by the fact that $A_{12}=0$. The error dynamics poles are fixed at the eigenvalues of $A_{22}$ and cannot be placed.\n- B is correct. It accurately states that the estimation error will be unstable because the unmeasured dynamics are unstable ($A_{22}$ is unstable) and the system structure ($A_{12}=0$) prevents observation.\n- C is incorrect. The stability of the overall system matrix $A$ is irrelevant to the stability of the observer error. The observer can be unstable even if the overall system is stable, and vice versa. We have enough information to determine the error stability.\n- D is incorrect. The decoupling ($A_{12}=0$) is precisely the feature that makes a stable observer design impossible, not easier. It prevents information about $x_u$ from reaching the measurement $y=x_m$.\n- E is incorrect. The submatrix $A_{21}$ influences the dynamics of $x_u$ itself, but it does not appear in the autonomous error dynamics equation $\\dot{e}_u = A_{22} e_u$. Therefore, it has no bearing on the stability of the estimation error.", "answer": "$$\\boxed{B}$$", "id": "1604252"}, {"introduction": "Our final practice elevates the design process to a general and powerful framework suitable for complex, high-dimensional systems. This capstone problem challenges you to move beyond manual pole placement and implement a systematic design algorithm based on the profound duality between state observation and state-feedback control. You will leverage a state transformation to handle systems in any coordinate frame and use the Linear Quadratic Regulator (LQR) methodology to automatically compute a stabilizing observer gain [@problem_id:2737300]. This exercise synthesizes multiple advanced topics and bridges the gap between abstract theory and practical, computational control engineering.", "problem": "Consider a continuous-time linear time-invariant state-space system defined by the equations $ \\dot{x}(t) = A x(t) + B u(t) $ and $ y(t) = C x(t) $, where $A \\in \\mathbb{R}^{n \\times n}$, $B \\in \\mathbb{R}^{n \\times m}$, and $C \\in \\mathbb{R}^{p \\times n}$ with $\\operatorname{rank}(C) = p$. Assume that $p \\le n$ and that $C$ has full row rank. The goal is to design a reduced-order observer of order $n - p$ by exploiting the duality between observer design and controller synthesis. Your task is to derive, implement, and validate an algorithm that constructs a reduced-order observer based solely on well-established principles: the linear time-invariant state-space formulation, the duality between controllability and observability, and continuous-time Linear Quadratic Regulator (LQR) synthesis for stabilizing linear systems.\n\nDerivation requirements:\n- Start from the definitions of the linear time-invariant state-space model and the measurement equation.\n- Introduce a state transformation that separates measured and unmeasured subspaces using a right-inverse of $C$ and a basis for $\\operatorname{Null}(C)$. Avoid assuming any special structure on $A$ or $C$ other than $\\operatorname{rank}(C) = p$.\n- Derive the reduced-order estimation error dynamics for the unmeasured part in terms of the block-partitioned transformed matrices, showing how the error dynamics depend on an observer gain that multiplies a known signal that may include $\\dot{y}(t)$.\n- Use the duality between state-feedback controller design and observer design to translate a controller synthesis routine applied to a dual pair into a reduced-order observer gain. Base the controller synthesis on the continuous-time Linear Quadratic Regulator (LQR), which uses the continuous-time Algebraic Riccati Equation (ARE) to produce a stabilizing state-feedback gain when the pair is stabilizable and the weights are positive (semi)definite.\n\nAlgorithmic requirements:\n- Construct a right-inverse $X \\in \\mathbb{R}^{n \\times p}$ of $C$ such that $C X = I_p$ using $X = C^{\\top} (C C^{\\top})^{-1}$.\n- Construct a matrix $N \\in \\mathbb{R}^{n \\times (n-p)}$ whose columns form a basis of $\\operatorname{Null}(C)$.\n- Form the invertible transformation $T^{-1} = [\\, X \\; N \\,] \\in \\mathbb{R}^{n \\times n}$ and its inverse $T \\in \\mathbb{R}^{n \\times n}$. Define transformed coordinates $\\bar{x} = T x$ with $\\bar{x} = \\begin{bmatrix} x_m \\\\ x_u \\end{bmatrix}$, where $x_m \\in \\mathbb{R}^{p}$ equals the measured output $y$ and $x_u \\in \\mathbb{R}^{n-p}$ denotes the unmeasured part.\n- Compute the block-partitioned transformed matrices $\\bar{A} = T A T^{-1}$ and $\\bar{B} = T B$ as $\\bar{A} = \\begin{bmatrix} A_{11} & A_{12} \\\\ A_{21} & A_{22} \\end{bmatrix}$ and $\\bar{B} = \\begin{bmatrix} B_1 \\\\ B_2 \\end{bmatrix}$.\n- Using only the principles stated above, derive that a reduced-order observer utilizing the measurable signals $y(t)$, $u(t)$, and $\\dot{y}(t)$ (which can be computed from the model as $\\dot{y}(t) = C \\dot{x}(t) = C (A x(t) + B u(t))$) can yield estimation error dynamics for the unmeasured part of the form $\\dot{e}_u(t) = \\left( A_{22} - L A_{12} \\right) e_u(t)$, where $L \\in \\mathbb{R}^{(n-p) \\times p}$ is the reduced-order observer gain to be designed.\n- Use duality to specify a controller synthesis on the dual pair that yields $L$ via a mapping from a state-feedback controller gain obtained by continuous-time LQR. You must not assume any special canonical form beyond the stated construction with $X$ and $N$, and you must rigorously justify why the chosen controller synthesis ensures asymptotic stability of the estimation error dynamics when mapped back through duality.\n\nValidation requirements:\n- Implement a program that:\n  1. Constructs $X$, $N$, $T^{-1}$, $T$, partitions $\\bar{A}$ and $\\bar{B}$.\n  2. Designs the reduced-order observer gain using continuous-time LQR applied to a properly defined dual pair.\n  3. Simulates the plant and the reduced-order observer in continuous time using a fixed-step numerical integrator to confirm convergence.\n  4. Verifies that the eigenvalues of $A_{22} - L A_{12}$ have strictly negative real parts and that the terminal estimation error norm is below a specified tolerance.\n- The continuous-time LQR should be implemented via the continuous-time Algebraic Riccati Equation with symmetric positive semidefinite state weight $Q_d$ and symmetric positive definite input weight $R_d$. You must explicitly compute the LQR gain from the solution of the Algebraic Riccati Equation.\n\nTest suite:\nProvide the following three test cases. All quantities are dimensionless. The simulation horizon is $T = 5.0$ and the fixed time step is $\\Delta t = 0.002$. The terminal estimation error norm is computed as $\\lVert x(T) - \\hat{x}(T) \\rVert_2$, and the tolerance for success is $10^{-3}$. For each test, the initial observer internal state corresponding to the unmeasured part is zero, and the full-state estimate is reconstructed as $\\hat{x}(t) = T^{-1} \\begin{bmatrix} y(t) \\\\ \\hat{x}_u(t) \\end{bmatrix}$.\n\n- Test case $1$ (happy path, $n = 3$, $p = 1$, $m = 1$):\n  - $A = \\begin{bmatrix} 0.2 & 1.0 & 0.0 \\\\ 0.0 & 0.0 & 1.0 \\\\ 1.0 & 2.0 & 0.5 \\end{bmatrix}$, $B = \\begin{bmatrix} 0.0 \\\\ 0.0 \\\\ 1.0 \\end{bmatrix}$, $C = \\begin{bmatrix} 1.0 & 0.0 & 0.0 \\end{bmatrix}$.\n  - LQR dual weights: $Q_d = I_2$, $R_d = \\begin{bmatrix} 1.0 \\end{bmatrix}$.\n  - Initial condition: $x(0) = \\begin{bmatrix} 0.5 \\\\ -1.0 \\\\ 1.0 \\end{bmatrix}$.\n  - Input: $u(t) = 0.2$ for all $t \\in [0, T]$.\n\n- Test case $2$ (multi-output, nontrivial dual input dimension, $n = 4$, $p = 2$, $m = 1$):\n  - $A = \\begin{bmatrix}\n      0.0 & 1.0 & 1.0 & 0.0 \\\\\n      -1.0 & 0.0 & 0.0 & 1.0 \\\\\n      0.0 & 0.0 & 0.0 & 1.0 \\\\\n      1.0 & 0.0 & 3.0 & 0.2\n    \\end{bmatrix}$, $B = \\begin{bmatrix} 0.0 \\\\ 0.0 \\\\ 0.0 \\\\ 1.0 \\end{bmatrix}$, $C = \\begin{bmatrix} 1.0 & 0.0 & 0.0 & 0.0 \\\\ 0.0 & 1.0 & 0.0 & 0.0 \\end{bmatrix}$.\n  - LQR dual weights: $Q_d = I_2$, $R_d = I_2$.\n  - Initial condition: $x(0) = \\begin{bmatrix} 0.2 \\\\ -0.5 \\\\ 0.3 \\\\ 1.0 \\end{bmatrix}$.\n  - Input: $u(t) = 0.1 \\sin(2 t)$ for all $t \\in [0, T]$.\n\n- Test case $3$ (boundary case, full-state measurement, $n = 3$, $p = 3$, $m = 1$):\n  - $A = \\begin{bmatrix} 0.0 & 1.0 & 0.0 \\\\ 0.0 & 0.0 & 1.0 \\\\ -1.0 & -1.0 & -1.0 \\end{bmatrix}$, $B = \\begin{bmatrix} 0.0 \\\\ 1.0 \\\\ 0.0 \\end{bmatrix}$, $C = I_3$.\n  - LQR dual weights (unused as no unmeasured subspace): $Q_d = I_0$ (vacuous), $R_d = I_0$ (vacuous).\n  - Initial condition: $x(0) = \\begin{bmatrix} -0.3 \\\\ 0.4 \\\\ -0.2 \\end{bmatrix}$.\n  - Input: $u(t) = 0.0$ for all $t \\in [0, T]$.\n\nProgram output specification:\n- For each test case, compute a boolean value that is $\\text{True}$ if and only if both of the following hold:\n  1. All eigenvalues of $A_{22} - L A_{12}$ have strictly negative real parts (if $n - p = 0$, treat this condition as satisfied).\n  2. The terminal estimation error norm satisfies $\\lVert x(T) - \\hat{x}(T) \\rVert_2 \\le 10^{-3}$.\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets (e.g., `[\\text{True},\\text{False},\\text{True}]`).", "solution": "The problem posed is a valid, well-defined problem in the field of control theory. It is scientifically grounded in the principles of linear time-invariant (LTI) systems, state observers, and the duality between control and estimation. The problem is objective, complete, and provides all necessary data for the derivation and numerical validation of a reduced-order observer. We shall now proceed with the formal derivation and solution.\n\nThe system under consideration is a continuous-time LTI system described by the state-space equations:\n$$ \\dot{x}(t) = A x(t) + B u(t) $$\n$$ y(t) = C x(t) $$\nwhere $x(t) \\in \\mathbb{R}^n$ is the state vector, $u(t) \\in \\mathbb{R}^m$ is the input vector, and $y(t) \\in \\mathbb{R}^p$ is the measurement vector. The matrices $A$, $B$, and $C$ have compatible dimensions. We are given that $C$ has full row rank, i.e., $\\operatorname{rank}(C) = p$.\n\nOur objective is to design a reduced-order observer of order $n-p$ to estimate the state $x(t)$. The design will be based on a state transformation that separates the state vector into measured and unmeasured components.\n\nFirst, we construct a state transformation $T$. We define a matrix $T^{-1} = [\\, X \\quad N \\,]$, where $X \\in \\mathbb{R}^{n \\times p}$ is a right-inverse of $C$, and $N \\in \\mathbb{R}^{n \\times (n-p)}$ is a matrix whose columns form a basis for the nullspace of $C$, $\\operatorname{Null}(C)$.\nA suitable right-inverse $X$ can be constructed as $X = C^{\\top} (C C^{\\top})^{-1}$. Since $\\operatorname{rank}(C) = p$, the matrix $C C^{\\top} \\in \\mathbb{R}^{p \\times p}$ is positive definite and thus invertible. This choice of $X$ satisfies $C X = C C^{\\top} (C C^{\\top})^{-1} = I_p$.\nThe matrix $N$ is constructed such that its columns are linearly independent and span $\\operatorname{Null}(C)$, which implies $C N = 0$.\nThe matrix $T^{-1}$ is invertible because the column space of $X$ and the column space of $N$ (which is $\\operatorname{Null}(C)$) have a trivial intersection. To see this, let $v$ be in both spaces. Then $v = Xa$ for some $a \\in \\mathbb{R}^p$ and $Cv = 0$. Applying $C$ gives $C(Xa) = (CX)a = I_p a = a$. Thus, $a=0$, which implies $v=0$. Since the dimensions of the column spaces of $X$ and $N$ are $p$ and $n-p$ respectively, they together span $\\mathbb{R}^n$, making $T^{-1}$ invertible.\n\nWe define a new state vector $\\bar{x}(t) = T x(t)$. We partition $\\bar{x}(t)$ as $\\bar{x}(t) = \\begin{bmatrix} x_m(t) \\\\ x_u(t) \\end{bmatrix}$, where $x_m \\in \\mathbb{R}^p$ and $x_u \\in \\mathbb{R}^{n-p}$.\nThe relationship between $y(t)$ and the transformed state is found by:\n$$ y(t) = C x(t) = C T^{-1} \\bar{x}(t) = C [\\, X \\quad N \\,] \\begin{bmatrix} x_m(t) \\\\ x_u(t) \\end{bmatrix} = [\\, CX \\quad CN \\,] \\begin{bmatrix} x_m(t) \\\\ x_u(t) \\end{bmatrix} = [\\, I_p \\quad 0 \\,] \\begin{bmatrix} x_m(t) \\\\ x_u(t) \\end{bmatrix} = x_m(t) $$\nThis confirms that the first $p$ components of the transformed state are precisely the measured outputs. The remaining $n-p$ components, $x_u(t)$, are the unmeasured part of the state that we must estimate.\n\nThe dynamics of the transformed state are given by:\n$$ \\dot{\\bar{x}}(t) = T \\dot{x}(t) = T (A x(t) + B u(t)) = T A T^{-1} \\bar{x}(t) + T B u(t) $$\nLet us define the transformed system matrices $\\bar{A} = T A T^{-1}$ and $\\bar{B} = T B$. We partition them according to the partition of $\\bar{x}$:\n$$ \\bar{A} = \\begin{bmatrix} A_{11} & A_{12} \\\\ A_{21} & A_{22} \\end{bmatrix}, \\quad \\bar{B} = \\begin{bmatrix} B_1 \\\\ B_2 \\end{bmatrix} $$\nwhere $A_{11} \\in \\mathbb{R}^{p \\times p}$, $A_{12} \\in \\mathbb{R}^{p \\times (n-p)}$, $A_{21} \\in \\mathbb{R}^{(n-p) \\times p}$, $A_{22} \\in \\mathbb{R}^{(n-p) \\times (n-p)}$, $B_1 \\in \\mathbb{R}^{p \\times m}$, and $B_2 \\in \\mathbb{R}^{(n-p) \\times m}$.\nThe state dynamics in the new coordinates are:\n$$ \\dot{x}_m(t) = A_{11} x_m(t) + A_{12} x_u(t) + B_1 u(t) $$\n$$ \\dot{x}_u(t) = A_{21} x_m(t) + A_{22} x_u(t) + B_2 u(t) $$\nReplacing $x_m(t)$ with the known measurement $y(t)$, we obtain:\n$$ \\dot{y}(t) = A_{11} y(t) + A_{12} x_u(t) + B_1 u(t) $$\n$$ \\dot{x}_u(t) = A_{21} y(t) + A_{22} x_u(t) + B_2 u(t) $$\nThe first equation provides a \"measurement\" of the unmeasured state $x_u(t)$ via the relation $A_{12} x_u(t) = \\dot{y}(t) - A_{11} y(t) - B_1 u(t)$. This suggests that the pair $(A_{22}, A_{12})$ behaves like a system-output pair for the dynamics of $x_u$.\n\nWe now design a Luenberger-style observer for $x_u(t)$. Let $\\hat{x}_u(t)$ be the estimate of $x_u(t)$. The observer dynamics are constructed to mimic the dynamics of $x_u(t)$ with a correction term proportional to the output estimation error:\n$$ \\dot{\\hat{x}}_u(t) = A_{22} \\hat{x}_u(t) + A_{21} y(t) + B_2 u(t) + L \\left( (\\dot{y} - A_{11} y - B_1 u) - A_{12} \\hat{x}_u \\right) $$\nwhere $L \\in \\mathbb{R}^{(n-p) \\times p}$ is the observer gain matrix. The term $(\\dot{y} - A_{11} y - B_1 u)$ is the \"measured\" value of $A_{12} x_u$, and $A_{12} \\hat{x}_u$ is its estimate.\n\nThe estimation error is $e_u(t) = x_u(t) - \\hat{x}_u(t)$. Its dynamics are:\n$$ \\dot{e}_u(t) = \\dot{x}_u(t) - \\dot{\\hat{x}}_u(t) $$\n$$ \\dot{e}_u(t) = (A_{21} y + A_{22} x_u + B_2 u) - \\left( A_{22} \\hat{x}_u + A_{21} y + B_2 u + L ((\\dot{y} - A_{11} y - B_1 u) - A_{12} \\hat{x}_u) \\right) $$\nSubstituting $A_{12} x_u = \\dot{y} - A_{11} y - B_1 u$:\n$$ \\dot{e}_u(t) = A_{22} (x_u - \\hat{x}_u) - L (A_{12} x_u - A_{12} \\hat{x}_u) $$\n$$ \\dot{e}_u(t) = (A_{22} - L A_{12}) e_u(t) $$\nFor the estimation error to converge to zero, the matrix $(A_{22} - L A_{12})$ must be Hurwitz (all eigenvalues must have strictly negative real parts). The problem is now to select a gain $L$ that achieves this.\n\nWe employ the principle of duality. The pole placement problem for an observer with system matrix $A$ and output matrix $C$ is dual to the pole placement problem for a controller with system matrix $A^{\\top}$ and input matrix $C^{\\top}$. In our case, the system is $(A_{22}, A_{12})$. We thus consider the dual control system with state-space pair $(\\mathcal{A}_d, \\mathcal{B}_d) = (A_{22}^{\\top}, A_{12}^{\\top})$.\nWe seek a state-feedback gain $K_d$ for this dual system, $v = -K_d z$, such that the closed-loop matrix $\\mathcal{A}_d - \\mathcal{B}_d K_d = A_{22}^{\\top} - A_{12}^{\\top} K_d$ is Hurwitz. The eigenvalues of a matrix are the same as its transpose. Therefore, if $A_{22}^{\\top} - A_{12}^{\\top} K_d$ is Hurwitz, so is its transpose $(A_{22}^{\\top} - A_{12}^{\\top} K_d)^{\\top} = A_{22} - K_d^{\\top} A_{12}$.\nBy comparing this with the error dynamics matrix $(A_{22} - L A_{12})$, we identify the observer gain as $L = K_d^{\\top}$.\n\nThe problem specifies using a continuous-time LQR controller to find $K_d$. For the dual system $\\dot{z} = \\mathcal{A}_d z + \\mathcal{B}_d v$, with LQR cost function $J = \\int_0^\\infty (z^{\\top} Q_d z + v^{\\top} R_d v) dt$, the optimal feedback gain is $K_d = R_d^{-1} \\mathcal{B}_d^{\\top} P_d$, where $P_d$ is the unique symmetric positive semidefinite solution to the Continuous-time Algebraic Riccati Equation (CARE):\n$$ \\mathcal{A}_d^{\\top} P_d + P_d \\mathcal{A}_d - P_d \\mathcal{B}_d R_d^{-1} \\mathcal{B}_d^{\\top} P_d + Q_d = 0 $$\nSubstituting $\\mathcal{A}_d = A_{22}^{\\top}$ and $\\mathcal{B}_d = A_{12}^{\\top}$:\n$$ (A_{22}^{\\top})^{\\top} P_d + P_d A_{22}^{\\top} - P_d A_{12}^{\\top} R_d^{-1} (A_{12}^{\\top})^{\\top} P_d + Q_d = 0 $$\n$$ A_{22} P_d + P_d A_{22}^{\\top} - P_d A_{12}^{\\top} R_d^{-1} A_{12} P_d + Q_d = 0 $$\nIf the pair $(A_{22}^{\\top}, A_{12}^{\\top})$ is stabilizable (which is equivalent to the pair $(A_{22}, A_{12})$ being detectable) and $Q_d$ and $R_d$ are symmetric positive semidefinite and positive definite respectively, then the LQR controller guarantees that the closed-loop system is stable.\nThe controller gain is $K_d = R_d^{-1} (A_{12}^{\\top})^{\\top} P_d = R_d^{-1} A_{12} P_d$.\nThe observer gain is then $L = K_d^{\\top} = (R_d^{-1} A_{12} P_d)^{\\top} = P_d^{\\top} A_{12}^{\\top} (R_d^{-1})^{\\top}$. Since $P_d$ and $R_d$ are symmetric, this simplifies to $L = P_d A_{12}^{\\top} R_d^{-1}$.\n\nThe observer dynamics contain the term $\\dot{y}$, which is often problematic in practice. We can eliminate it by defining a new observer state $z(t) = \\hat{x}_u(t) - L y(t)$. The dynamics of $z(t)$ are:\n$$ \\dot{z}(t) = \\dot{\\hat{x}}_u(t) - L \\dot{y}(t) $$\nUsing the expression for $\\dot{\\hat{x}}_u(t)$ and simplifying, we get:\n$$ \\dot{z}(t) = (A_{22} - L A_{12}) \\hat{x}_u(t) + (A_{21} - L A_{11}) y(t) + (B_2 - L B_1) u(t) $$\nSubstituting $\\hat{x}_u(t) = z(t) + L y(t)$:\n$$ \\dot{z}(t) = (A_{22} - L A_{12}) z(t) + [(A_{22} - L A_{12})L + A_{21} - L A_{11}] y(t) + [B_2 - L B_1] u(t) $$\nThis is the differential equation for the observer's internal state $z(t)$, which can be readily implemented as it only depends on the known signals $y(t)$ and $u(t)$.\n\nFor simulation and validation, we implement the observer's internal dynamics, with initial condition $\\hat{x}_u(0)=0$ which implies $z(0) = -L y(0) = -L C x(0)$. The full state estimate $\\hat{x}(t)$ is reconstructed at any time $t$ from the measured output $y(t)$ and the observer state estimate $\\hat{x}_u(t)$ using the inverse transformation:\n$$ \\hat{x}(t) = T^{-1} \\begin{bmatrix} y(t) \\\\ \\hat{x}_u(t) \\end{bmatrix} = [\\, X \\quad N \\,] \\begin{bmatrix} y(t) \\\\ \\hat{x}_u(t) \\end{bmatrix} = X y(t) + N \\hat{x}_u(t) = X y(t) + N(z(t) + L y(t)) $$\nThis completes the derivation of the algorithm.", "answer": "```python\nimport numpy as np\nfrom scipy.linalg import solve_continuous_are, null_space\n\ndef solve():\n    \"\"\"\n    Derives, implements, and validates a reduced-order observer for LTI systems\n    using the duality with LQR control.\n    \"\"\"\n\n    test_cases = [\n        {\n            \"A\": np.array([[0.2, 1.0, 0.0], [0.0, 0.0, 1.0], [1.0, 2.0, 0.5]]),\n            \"B\": np.array([[0.0], [0.0], [1.0]]),\n            \"C\": np.array([[1.0, 0.0, 0.0]]),\n            \"Qd\": np.identity(2),\n            \"Rd\": np.array([[1.0]]),\n            \"x0\": np.array([0.5, -1.0, 1.0]),\n            \"u_func\": lambda t: 0.2,\n        },\n        {\n            \"A\": np.array([[0.0, 1.0, 1.0, 0.0], [-1.0, 0.0, 0.0, 1.0], [0.0, 0.0, 0.0, 1.0], [1.0, 0.0, 3.0, 0.2]]),\n            \"B\": np.array([[0.0], [0.0], [0.0], [1.0]]),\n            \"C\": np.array([[1.0, 0.0, 0.0, 0.0], [0.0, 1.0, 0.0, 0.0]]),\n            \"Qd\": np.identity(2),\n            \"Rd\": np.identity(2),\n            \"x0\": np.array([0.2, -0.5, 0.3, 1.0]),\n            \"u_func\": lambda t: 0.1 * np.sin(2 * t),\n        },\n        {\n            \"A\": np.array([[0.0, 1.0, 0.0], [0.0, 0.0, 1.0], [-1.0, -1.0, -1.0]]),\n            \"B\": np.array([[0.0], [1.0], [0.0]]),\n            \"C\": np.identity(3),\n            \"Qd\": np.empty((0, 0)), \n            \"Rd\": np.empty((0, 0)),\n            \"x0\": np.array([-0.3, 0.4, -0.2]),\n            \"u_func\": lambda t: 0.0,\n        },\n    ]\n\n    T_sim = 5.0\n    dt = 0.002\n    error_tolerance = 1e-3\n    results = []\n\n    for case in test_cases:\n        A, B, C, Qd, Rd, x0, u_func = case.values()\n        n, m = B.shape\n        p = C.shape[0]\n\n        eigenvalue_check_passed = False\n        terminal_error_check_passed = False\n\n        if p == n:\n            # Full state measurement case\n            # No unmeasured dynamics, so no observer is needed.\n            # Eigenvalue condition on A_22 - L A_12 is vacuously true.\n            eigenvalue_check_passed = True\n            \n            # The state is fully known: y(t) = C x(t) = I x(t) = x(t).\n            # The estimate is perfect: hat(x)(t) = y(t).\n            # The error is identically zero.\n            terminal_error_norm = 0.0\n            terminal_error_check_passed = (terminal_error_norm <= error_tolerance)\n\n            results.append(eigenvalue_check_passed and terminal_error_check_passed)\n            continue\n        \n        # 1. Construct State Transformation\n        # Right-inverse of C: X = C' * inv(C*C')\n        X = C.T @ np.linalg.inv(C @ C.T)\n        \n        # Basis for Null(C)\n        N = null_space(C)\n        \n        # Transformation matrices\n        T_inv = np.hstack([X, N])\n        T = np.linalg.inv(T_inv)\n\n        # 2. Transform System Matrices\n        A_bar = T @ A @ T_inv\n        B_bar = T @ B\n\n        # Partition transformed matrices\n        A11 = A_bar[:p, :p]\n        A12 = A_bar[:p, p:]\n        A21 = A_bar[p:, :p]\n        A22 = A_bar[p:, p:]\n        \n        B1 = B_bar[:p, :]\n        B2 = B_bar[p:, :]\n\n        # 3. Design Observer Gain L using LQR Duality\n        # Dual system matrices for controller design\n        A_dual = A22.T\n        B_dual = A12.T\n        \n        # Solve the Continuous-time Algebraic Riccati Equation (CARE) for the dual system\n        # scipy.linalg.solve_continuous_are(A, B, Q, R) solves A'X + XA - XBR^-1B'X + Q = 0\n        try:\n            Pd = solve_continuous_are(A_dual, B_dual, Qd, Rd)\n        except np.linalg.LinAlgError:\n            # Handle cases where ARE might not have a solution (e.g., not stabilizable)\n            results.append(False)\n            continue\n\n        # Observer gain L = Pd * A12' * inv(Rd)\n        L = Pd @ A12.T @ np.linalg.inv(Rd)\n        \n        # 4. Verify Observer Stability\n        A_obs_err = A22 - L @ A12\n        eigvals = np.linalg.eigvals(A_obs_err)\n        eigenvalue_check_passed = np.all(np.real(eigvals) < 0)\n\n        # 5. Set up and run simulation\n        # Observer state-space matrices (form that avoids dy/dt)\n        A_o = A_obs_err\n        B_o = A_o @ L + A21 - L @ A11\n        C_o = B2 - L @ B1\n        \n        # Initial conditions\n        x = x0.copy()\n        y0 = C @ x0\n        z = -L @ y0  # z(0) = hat_x_u(0) - L*y(0), with hat_x_u(0) = 0\n        \n        time_steps = np.arange(0, T_sim, dt)\n        \n        # Euler integration\n        for t in time_steps:\n            u = u_func(t)\n            \n            # System dynamics\n            x_dot = A @ x + B @ np.atleast_1d(u)\n            \n            # Observer dynamics\n            y = C @ x\n            z_dot = A_o @ z + B_o @ y + C_o @ np.atleast_1d(u)\n            \n            # Update states\n            x += x_dot * dt\n            z += z_dot * dt\n            \n        # 6. Compute Terminal Error\n        # Reconstruct full state estimate at t=T\n        y_T = C @ x\n        hat_x_u_T = z + L @ y_T\n        hat_x_T = X @ y_T + N @ hat_x_u_T\n        \n        terminal_error_norm = np.linalg.norm(x - hat_x_T)\n        terminal_error_check_passed = (terminal_error_norm <= error_tolerance)\n        \n        results.append(eigenvalue_check_passed and terminal_error_check_passed)\n\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2737300"}]}