{"hands_on_practices": [{"introduction": "To bring the theory of optimal control into practice, we begin with a classic and intuitive application: the time-optimal attitude control of a spacecraft. This exercise models the system as a double integrator, the canonical example for which bang-bang control is the solution. By applying the Pontryagin Maximum Principle (PMP), you will derive the famous bang-bang control law and the switching curve, building a concrete physical intuition for how to maneuver a system from one state to another in the shortest possible time. [@problem_id:2690322]", "problem": "Consider a rigid spacecraft executing a planar attitude slew about a principal axis with bounded control torque. The rotational dynamics about the principal axis are given by the rigid-body equation $J \\dot{\\omega} = u$ together with the kinematic relation $\\dot{\\theta} = \\omega$, where $J > 0$ is the principal moment of inertia, $\\theta$ is the attitude angle (in radians), $\\omega$ is the angular rate (in radians per second), and $u$ is the control torque (in newton-meters) subject to the hard constraint $\\lvert u \\rvert \\le \\tau_{\\max}$. The objective is to minimize the transfer time $T$ required to move from an initial state $(\\theta(0), \\omega(0)) = (\\theta_0, \\omega_0)$ to a terminal state $(\\theta(T), \\omega(T)) = (\\theta_f, 0)$.\n\nYour tasks:\n\n1) Using a rigorous principle-based approach beginning from the foundational definitions of the dynamics, formulate the time-optimal control problem. Analyze its structure using Pontryagin's Minimum Principle (PMP) and logically deduce the qualitative form of the optimal control policy for this double-integrator-like system under magnitude-limited control. Based on this analysis, determine whether a singular arc can occur and justify your conclusion.\n\n2) From first principles and without appealing to unproven shortcut formulas, derive the conditions that determine the optimal control sequence and the corresponding switching times. Your derivation must use only the system equations $\\dot{\\theta} = \\omega$, $J \\dot{\\omega} = u$, the bound $\\lvert u \\rvert \\le \\tau_{\\max}$, and the PMP optimality conditions. Conclude with explicit algebraic expressions that can be evaluated to obtain the minimal transfer time $T^\\star$ (in seconds), the duration $t_1$ (in seconds) of the first constant-torque arc, the duration $t_2$ (in seconds) of the second constant-torque arc, and the sign $\\sigma \\in \\{-1, +1\\}$ of the first torque level $u = \\sigma \\tau_{\\max}$, assuming that the optimal policy has at most one switch between the extreme controls.\n\n3) Implement a program that, for each test case listed below, computes:\n- the minimal transfer time $T^\\star$ in seconds,\n- the arc durations $t_1$ and $t_2$ in seconds,\n- the initial bang sign $\\sigma \\in \\{-1, +1\\}$ encoded as the integer $+1$ or $-1$,\n- a boolean flag indicating whether a singular arc occurs, which must be set to the appropriate logical value justified by your analysis.\n\nAngle units must be in radians, time units in seconds, and torque in newton-meters. If a degenerate boundary case occurs where $T^\\star = 0$ (no motion is needed), set $t_1 = 0$, $t_2 = 0$, and the sign $\\sigma = 0$.\n\nTest suite (each tuple is $(J,\\ \\tau_{\\max},\\ \\theta_0,\\ \\theta_f,\\ \\omega_0)$):\n- Case A (happy path): $(8.0,\\ 4.0,\\ 0.0,\\ 0.2,\\ 0.0)$\n- Case B (single-bang boundary, pure braking): $(2.0,\\ 2.0,\\ 0.0,\\ 0.5,\\ 1.0)$\n- Case C (general nonzero initial rate toward target): $(5.0,\\ 5.0,\\ 0.0,\\ 0.5,\\ 0.8)$\n- Case D (general initial rate opposite target): $(3.0,\\ 6.0,\\ 0.0,\\ 0.3,\\ -0.9)$\n- Case E (degenerate rest-to-rest at same angle): $(10.0,\\ 5.0,\\ 1.0,\\ 1.0,\\ 0.0)$\n\nFinal output format:\n- Your program must produce a single line containing a Python-style list of results, one per test case, in the order given above.\n- Each test case result must be a list of the form $[T^\\star,\\ t_1,\\ t_2,\\ \\sigma,\\ \\text{has\\_singular}]$.\n- All times must be expressed in seconds as floating-point numbers. The sign $\\sigma$ must be an integer ($-1$, $0$, or $+1$ as specified above). The singularity flag must be a boolean.\n- The single line must be exactly a list of these five per-case lists, for example $[[\\cdots],[\\cdots],[\\cdots],[\\cdots],[\\cdots]]$, with no extra text.\n\nYour implementation must be self-contained and not require user input. It must use only the numerical values provided in the test suite. All angles are in radians, all times in seconds, and all torques in newton-meters. If any angle-related computation is present, it must be in radians. The output times should be numerically evaluated to floating-point values; for reproducibility, round all floating-point outputs to $9$ decimal places in your printed result.", "solution": "The problem of determining the time-optimal control for a rigid-body planar slew is a classic problem in optimal control theory. The system is a double integrator in angle, which is a well-studied case. We will validate the problem and then proceed with a rigorous derivation based on Pontryagin's Minimum Principle (PMP).\n\n**Problem Formulation and State-Space Representation**\n\nFirst, we formalize the problem. Let the state vector be $x(t) = [x_1(t), x_2(t)]^T = [\\theta(t), \\omega(t)]^T$. The system dynamics are given by:\n$$\n\\begin{cases}\n\\dot{x}_1 = x_2 \\\\\n\\dot{x}_2 = \\frac{u}{J}\n\\end{cases}\n$$\nwhere $x_1 = \\theta$ is the attitude angle and $x_2 = \\omega$ is the angular rate. The control input $u$ is the torque, subject to the constraint $|u| \\le \\tau_{\\max}$. The objective is to minimize the final time $T$, so the cost function is $J = \\int_0^T 1 \\, dt$.\n\nThe boundary conditions are:\n- Initial state: $x(0) = [\\theta_0, \\omega_0]^T$\n- Final state: $x(T) = [\\theta_f, 0]^T$\n\n**Part 1: Optimality Analysis using Pontryagin's Minimum Principle and Singular Arc Analysis**\n\nAccording to Pontryagin's Minimum Principle, for an optimal control $u^\\star(t)$ and corresponding state trajectory $x^\\star(t)$, there exists a non-zero, continuous costate vector $\\lambda(t) = [\\lambda_1(t), \\lambda_2(t)]^T$ satisfying the following conditions.\n\nThe Hamiltonian $H$ for this time-optimal problem is defined as:\n$$\nH(x, \\lambda, u) = \\lambda_0 + \\lambda^T f(x, u) = 1 + \\lambda_1 x_2 + \\lambda_2 \\frac{u}{J}\n$$\nwhere we have set the constant $\\lambda_0=1$, which is permissible for a normal problem (one where the costate vector associated with the state is not zero).\n\nThe costate (or adjoint) equations are given by $\\dot{\\lambda} = -\\frac{\\partial H}{\\partial x}$:\n$$\n\\dot{\\lambda}_1 = -\\frac{\\partial H}{\\partial x_1} = 0 \\implies \\lambda_1(t) = c_1 \\quad (\\text{constant})\n$$\n$$\n\\dot{\\lambda}_2 = -\\frac{\\partial H}{\\partial x_2} = -\\lambda_1 = -c_1 \\implies \\lambda_2(t) = -c_1 t + c_2\n$$\nwhere $c_1$ and $c_2$ are integration constants determined by boundary conditions.\n\nThe minimization condition states that the optimal control $u^\\star(t)$ must minimize the Hamiltonian at every instant in time:\n$$\nu^\\star(t) = \\arg\\min_{|u| \\le \\tau_{\\max}} H(x^\\star, \\lambda^\\star, u) = \\arg\\min_{|u| \\le \\tau_{\\max}} \\left(1 + \\lambda_1^\\star x_2^\\star + \\lambda_2^\\star \\frac{u}{J}\\right)\n$$\nTo minimize $H$, we must choose $u$ to make the term $\\lambda_2^\\star u / J$ as negative as possible. This leads to the control law:\n$$\nu^\\star(t) = -\\tau_{\\max} \\text{sgn}(\\lambda_2^\\star(t))\n$$\nThe term $S(t) = \\lambda_2^\\star(t)$ is known as the switching function. The optimal control is always at its maximum or minimum value, a structure known as bang-bang control.\n\nNow, we analyze the possibility of a singular arc. A singular arc occurs if the switching function $S(t)$ is zero over a finite time interval, i.e., $S(t) \\equiv 0$ for $t \\in [t_a, t_b]$.\nIf $S(t) = \\lambda_2(t) \\equiv 0$ on an interval, then all its time derivatives must also be zero on that interval.\n-   $S(t) = -c_1 t + c_2 = 0 \\implies \\dot{S}(t) = -c_1 = 0$.\n-   $\\dot{S}(t) = 0 \\implies c_1 = 0$.\n-   Substituting $c_1=0$ back into $S(t)=0$ gives $c_2 = 0$.\nThis implies that for a singular arc to exist, we must have $\\lambda_1(t) = c_1 = 0$ and $\\lambda_2(t) = c_2 = 0$. This would mean the entire costate vector $\\lambda(t)$ is identically zero. However, PMP requires the costate vector to be non-zero. Therefore, a singular arc cannot occur in this problem. The optimal control is purely bang-bang. The switching function $\\lambda_2(t) = -c_1 t + c_2$ is a linear function of time. Unless $c_1=0$, it can be zero at most once, which implies that there can be at most one switch in the control. If $c_1=0$, $\\lambda_2(t)=c_2$ is a non-zero constant, leading to a single bang (no switch). Thus, the optimal policy consists of at most one switch between the extreme control values $+\\tau_{\\max}$ and $-\\tau_{\\max}$.\n\n**Part 2: Derivation of the Optimal Control Sequence and Switching Times**\n\nThe optimal trajectory consists of at most two segments, each with constant torque. Let the first torque be $u_1 = \\sigma\\tau_{\\max}$ for a duration $t_1$, and the second torque be $u_2 = -\\sigma\\tau_{\\max}$ for a duration $t_2$, where $\\sigma \\in \\{-1, +1\\}$. The total time is $T^\\star = t_1 + t_2$. Let $\\alpha = \\tau_{\\max}/J$ be the maximum angular acceleration.\n\n_Phase 1: $t \\in [0, t_1]$, $u = \\sigma\\tau_{\\max}$_\nIntegrating the equations of motion from the initial state $(\\theta_0, \\omega_0)$:\n$$\n\\omega(t_1) = \\omega_0 + \\sigma\\alpha t_1\n$$\n$$\n\\theta(t_1) = \\theta_0 + \\omega_0 t_1 + \\frac{1}{2}\\sigma\\alpha t_1^2\n$$\nLet $(\\theta_1, \\omega_1)$ be the state at the switching time $t_1$.\n\n_Phase 2: $t \\in (t_1, t_1+t_2]$, $u = -\\sigma\\tau_{\\max}$_\nIntegrating from $(\\theta_1, \\omega_1)$ to the final state $(\\theta_f, 0)$:\n$$\n\\omega(T) = 0 = \\omega_1 - \\sigma\\alpha t_2 \\implies \\omega_1 = \\sigma\\alpha t_2\n$$\n$$\n\\theta(T) = \\theta_f = \\theta_1 + \\omega_1 t_2 - \\frac{1}{2}\\sigma\\alpha t_2^2\n$$\nCombining the equations for $\\omega_1$, we get:\n$$\n\\omega_0 + \\sigma\\alpha t_1 = \\sigma\\alpha t_2 \\implies t_1 = t_2 - \\frac{\\sigma\\omega_0}{\\alpha}\n$$\nNow we use the equations for the total angle change $\\Delta\\theta = \\theta_f - \\theta_0$:\n$$\n\\Delta\\theta = (\\theta_1 - \\theta_0) + (\\theta_f - \\theta_1) = \\left(\\omega_0 t_1 + \\frac{1}{2}\\sigma\\alpha t_1^2\\right) + \\left(\\omega_1 t_2 - \\frac{1}{2}\\sigma\\alpha t_2^2\\right)\n$$\nSubstitute $\\omega_1 = \\sigma\\alpha t_2$:\n$$\n\\Delta\\theta = \\omega_0 t_1 + \\frac{1}{2}\\sigma\\alpha t_1^2 + \\frac{1}{2}\\sigma\\alpha t_2^2\n$$\nSubstitute $t_1 = t_2 - \\sigma\\omega_0/\\alpha$:\n$$\n\\Delta\\theta = \\omega_0\\left(t_2 - \\frac{\\sigma\\omega_0}{\\alpha}\\right) + \\frac{1}{2}\\sigma\\alpha\\left(t_2 - \\frac{\\sigma\\omega_0}{\\alpha}\\right)^2 + \\frac{1}{2}\\sigma\\alpha t_2^2\n$$\nExpanding and simplifying this expression yields a remarkably simple equation:\n$$\n\\Delta\\theta = \\sigma\\alpha t_2^2 - \\frac{1}{2}\\frac{\\sigma\\omega_0^2}{\\alpha}\n$$\nSolving for $t_2^2$:\n$$\nt_2^2 = \\frac{\\Delta\\theta}{\\sigma\\alpha} + \\frac{\\omega_0^2}{2\\alpha^2} = \\frac{\\sigma\\Delta\\theta}{\\alpha} + \\frac{\\omega_0^2}{2\\alpha^2}\n$$\nThe durations $t_1$ and $t_2$ must be non-negative. This fact, along with the physics of the problem, determines the sign $\\sigma$. The optimal strategy is to apply an initial torque that drives the system toward a \"switching curve\" in the state-space, from which a single braking torque will bring the system to the final state $(\\theta_f, 0)$.\n\nThe switching curve is the set of states $(\\theta, \\omega)$ from which the spacecraft can reach $(\\theta_f, 0)$ with a single application of maximal braking torque. The braking torque is $u=-\\text{sgn}(\\omega)\\tau_{\\max}$. The angle traversed during such braking is $\\frac{\\omega|\\omega|}{2\\alpha}$. Thus, the final angle would be $\\theta + \\frac{\\omega|\\omega|}{2\\alpha}$. For this to equal $\\theta_f$, the state must lie on the curve.\nFrom an initial state $(\\theta_0, \\omega_0)$, the angle at which the spacecraft would stop if it braked immediately is $\\theta_{stop} = \\theta_0 + \\frac{\\omega_0|\\omega_0|}{2\\alpha}$.\nWe compare $\\theta_{stop}$ with the target angle $\\theta_f$:\n- If $\\theta_f > \\theta_{stop}$, the spacecraft would stop short of the target. It must first apply a positive torque to cover more distance. Thus, $\\sigma = +1$.\n- If $\\theta_f  \\theta_{stop}$, the spacecraft would overshoot the target. It must first apply a negative torque. Thus, $\\sigma = -1$.\n- If $\\theta_f = \\theta_{stop}$, the spacecraft is already on the switching curve. A single braking maneuver is required ($t_1=0$). The formula for $\\sigma$ indicates a bang-bang trajectory, but for this boundary case, we should select $\\sigma$ to describe the braking torque in the second phase properly. The braking torque is $-\\text{sgn}(\\omega_0)\\tau_{\\max}$, while the second-phase torque is $-\\sigma\\tau_{\\max}$, implying $\\sigma = \\text{sgn}(\\omega_0)$.\n\nThis leads to the following algorithm:\n1.  Define $\\alpha = \\tau_{\\max}/J$ and $\\Delta\\theta = \\theta_f - \\theta_0$.\n2.  Handle the degenerate case: if $\\Delta\\theta=0$ and $\\omega_0=0$, then $T^\\star=t_1=t_2=0$ and $\\sigma=0$.\n3.  Calculate the stopping position under pure braking: $\\theta_{stop} = \\theta_0 + \\frac{\\omega_0|\\omega_0|}{2\\alpha}$.\n4.  If $\\theta_f = \\theta_{stop}$ (within a small tolerance), a single-bang trajectory is optimal.\n    $t_1 = 0$, $t_2 = |\\omega_0|/\\alpha$. The initial torque sign is $\\sigma = \\text{sgn}(\\omega_0)$. (If $\\omega_0=0$, we are in the degenerate case).\n5.  Otherwise, a bang-bang trajectory is optimal.\n    -   The sign of the first torque is $\\sigma = \\text{sgn}(\\theta_f - \\theta_{stop})$.\n    -   The duration of the second arc is $t_2 = \\sqrt{\\frac{\\sigma\\Delta\\theta}{\\alpha} + \\frac{\\omega_0^2}{2\\alpha^2}}$. This is guaranteed to have a non-negative radicand.\n    -   The duration of the first arc is $t_1 = t_2 - \\frac{\\sigma\\omega_0}{\\alpha}$. This is guaranteed to be non-negative.\n6.  The minimum time is $T^\\star = t_1+t_2$. The flag `has_singular` is always `False`.\n\nThis completes the derivation required for the implementation.", "answer": "```python\nimport numpy as np\nimport math\n\ndef solve():\n    \"\"\"\n    Main function to solve the spacecraft slew problem for all test cases.\n    \"\"\"\n    # Test suite: (J, tau_max, theta_0, theta_f, omega_0)\n    test_cases = [\n        (8.0, 4.0, 0.0, 0.2, 0.0),      # Case A\n        (2.0, 2.0, 0.0, 0.5, 1.0),      # Case B\n        (5.0, 5.0, 0.0, 0.5, 0.8),      # Case C\n        (3.0, 6.0, 0.0, 0.3, -0.9),     # Case D\n        (10.0, 5.0, 1.0, 1.0, 0.0),     # Case E\n    ]\n\n    results_str = []\n    for case in test_cases:\n        J, tau_max, theta_0, theta_f, omega_0 = case\n        result = compute_optimal_slew(J, tau_max, theta_0, theta_f, omega_0)\n        results_str.append(format_result(result))\n\n    # Print the final output in the exact specified format\n    print(f\"[{','.join(results_str)}]\")\n\ndef compute_optimal_slew(J, tau_max, theta_0, theta_f, omega_0):\n    \"\"\"\n    Computes the time-optimal control parameters for a single test case.\n\n    Returns a list: [T_star, t1, t2, sigma, has_singular]\n    \"\"\"\n    # From the analysis, singular arcs do not occur for this system.\n    has_singular = False\n    \n    # Degenerate case: initial state is the target state.\n    if np.isclose(theta_f, theta_0) and np.isclose(omega_0, 0.0):\n        return [0.0, 0.0, 0.0, 0, has_singular]\n\n    alpha = tau_max / J\n    delta_theta = theta_f - theta_0\n\n    # Calculate theta_stop: the angle reached if max braking is applied from the start.\n    if np.isclose(omega_0, 0.0):\n        theta_stop = theta_0\n    else:\n        theta_stop = theta_0 + (omega_0 * abs(omega_0)) / (2 * alpha)\n    \n    delta = theta_f - theta_stop\n\n    # Case 1: On the switching curve (single bang, pure braking).\n    # A small tolerance is used for floating-point comparison.\n    if np.isclose(delta, 0.0):\n        t1 = 0.0\n        t2 = abs(omega_0) / alpha\n        # The control is u = -sgn(omega_0)*tau_max. In our formulation, this\n        # corresponds to the second arc u = -sigma*tau_max.\n        # So, -sigma = -sgn(omega_0), which implies sigma = sgn(omega_0).\n        sigma = np.sign(omega_0)\n        if sigma == 0: # If omega_0 is exactly 0, handle with convention.\n            sigma = 1 if delta_theta > 0 else -1\n\n    # Case 2: Not on the switching curve (bang-bang trajectory).\n    else:\n        sigma = 1 if delta > 0 else -1\n\n        # Calculate t2 from the derived formula. Radicand is guaranteed non-negative.\n        t2_sq = (sigma * delta_theta) / alpha + (omega_0**2) / (2 * alpha**2)\n        # Handle potential small negative values due to floating point inaccuracies\n        t2 = math.sqrt(max(0, t2_sq))\n        \n        # Calculate t1. This is also guaranteed non-negative.\n        t1 = t2 - (sigma * omega_0) / alpha\n    \n    T_star = t1 + t2\n    \n    return [T_star, t1, t2, int(sigma), has_singular]\n\ndef format_result(result_list):\n    \"\"\"\n    Formats a single result list into the required string format,\n    rounding floats to 9 decimal places.\n    \"\"\"\n    T_star, t1, t2, sigma, has_singular = result_list\n    return f\"[{T_star:.9f}, {t1:.9f}, {t2:.9f}, {sigma}, {str(has_singular).lower()}]\"\n\nif __name__ == '__main__':\n    solve()\n```", "id": "2690322"}, {"introduction": "While bang-bang strategies are common, they are not the only form of optimal control. This next practice explores the fascinating case of singular control using a simplified model of a fuel-optimal rocket ascent. Here, the optimal strategy involves an intermediate thrust level, known as a singular arc, sandwiched between maximum-thrust phases. This problem will challenge you to go deeper into the necessary conditions of optimality, requiring repeated differentiation of the switching function to uncover the expression for this singular control. [@problem_id:2690328]", "problem": "Consider the following fuel-optimal ascent model (a simplified Goddard-type rocket with linear drag and variable mass). The state is $x(t) = (h(t), v(t), m(t))$ where $h$ is altitude, $v$ is vertical velocity, and $m$ is vehicle mass.The control is the thrust $T(t)$, constrained by $0 \\leq T(t) \\leq T_{\\max}$. The dynamics are\n$$\n\\dot{h}(t) = v(t), \\quad\n\\dot{v}(t) = \\frac{T(t)}{m(t)} - g - \\frac{k}{m(t)}\\,v(t), \\quad\n\\dot{m}(t) = -\\alpha\\,T(t),\n$$\nwhere $g>0$ is gravitational acceleration, $k>0$ is a linear drag coefficient (drag force $k\\,v$), and $\\alpha = \\frac{1}{c} > 0$ is the reciprocal of the effective exhaust velocity $c$ so that $\\alpha v$ is dimensionless. The performance index to be minimized is the total fuel expenditure,\n$$\nJ = \\int_{0}^{t_f} T(t)\\,dt,\n$$\nsubject to boundary conditions $h(0)=0$, $v(0)=0$, $m(0)=m_0>0$, and terminal constraints $h(t_f)=h_f$ with $v(t_f)=0$, while $m(t_f)$ is free. Assume that an optimal extremal for this problem (in the sense of Pontryagin’s Maximum Principle (PMP)) exhibits a multi-phase bang–singular–bang structure with a nontrivial interior singular arc.\n\nStarting from the fundamental necessary conditions of Pontryagin’s Maximum Principle, and without recourse to any pre-derived singular control formulas, derive the explicit closed-form expression for the singular thrust $T_s$ as a function of the instantaneous velocity $v$, mass $m$, and parameters $g$, $k$, and $\\alpha$ on the interior singular arc. You may assume that the generalized Legendre–Clebsch condition of appropriate order holds so that differentiating the switching function sufficiently many times yields an algebraic condition determining the control on the singular arc. Express the final expression for the thrust in International System of Units (SI) so that thrust is measured in Newtons. Your final answer must be a single closed-form analytic expression.", "solution": "We apply Pontryagin’s Maximum Principle (PMP) for a minimization problem with integrand $L(x,u) = T$. The Hamiltonian for minimization is\n$$\nH(x,p,u) \\;=\\; L(x,u) + p_h\\,\\dot{h} + p_v\\,\\dot{v} + p_m\\,\\dot{m}\n\\;=\\; T + p_h\\,v + p_v\\!\\left(\\frac{T}{m} - g - \\frac{k}{m}\\,v\\right) + p_m\\,(-\\alpha T),\n$$\nwhere $p = (p_h, p_v, p_m)$ are the costates. The control $T$ enters the Hamiltonian affinely. For the minimization of $H$ over $T \\in [0, T_{\\max}]$, define the switching function\n$$\n\\varphi \\;=\\; \\frac{\\partial H}{\\partial T} \\;=\\; 1 + \\frac{p_v}{m} - \\alpha\\,p_m.\n$$\nThe pointwise minimizing control is\n$$\nT^\\star =\n\\begin{cases}\n0,  \\varphi > 0,\\\\\nT_{\\max},  \\varphi  0,\\\\\n\\text{singular,}  \\varphi = 0 \\text{ on an interval.}\n\\end{cases}\n$$\nOn any singular arc, $\\varphi(t) \\equiv 0$ over a nontrivial interval, and higher time derivatives of $\\varphi$ vanish up to the order at which the control appears and can be solved.\n\nWe compute the costate equations from $\\dot{p} = -\\frac{\\partial H}{\\partial x}$:\n- For $h$, since $H$ does not depend on $h$, we have\n$$\n\\dot{p}_h \\;=\\; -\\frac{\\partial H}{\\partial h} \\;=\\; 0 \\quad \\Rightarrow \\quad p_h \\text{ is constant on each arc.}\n$$\n- For $v$, we have\n$$\n\\frac{\\partial H}{\\partial v} \\;=\\; p_h + p_v \\frac{\\partial}{\\partial v}\\!\\left(\\frac{T}{m} - g - \\frac{k}{m}v\\right) \\;=\\; p_h - \\frac{k}{m}\\,p_v,\n$$\nso\n$$\n\\dot{p}_v \\;=\\; -\\frac{\\partial H}{\\partial v} \\;=\\; -p_h + \\frac{k}{m}\\,p_v.\n$$\n- For $m$, note $\\frac{\\partial}{\\partial m}\\left(\\frac{T}{m} - g - \\frac{k}{m}v\\right) = -\\frac{T - k v}{m^2}$, hence\n$$\n\\frac{\\partial H}{\\partial m} \\;=\\; p_v \\left(-\\frac{T - k v}{m^2}\\right),\n\\quad \\Rightarrow \\quad\n\\dot{p}_m \\;=\\; -\\frac{\\partial H}{\\partial m} \\;=\\; p_v\\,\\frac{T - k v}{m^2}.\n$$\nThe state dynamics include $\\dot{m} = -\\alpha T$.\n\nOn a singular arc, $\\varphi \\equiv 0$ and its successive time derivatives vanish until the control appears explicitly. Begin with\n$$\n\\varphi \\;=\\; 1 + \\frac{p_v}{m} - \\alpha p_m \\;=\\; 0.\n$$\nDifferentiate once:\n$$\n\\dot{\\varphi} \\;=\\; \\frac{d}{dt}\\!\\left(\\frac{p_v}{m}\\right) - \\alpha \\dot{p}_m\n\\;=\\; \\frac{\\dot{p}_v\\,m - p_v \\dot{m}}{m^2} - \\alpha \\dot{p}_m.\n$$\nSubstitute $\\dot{p}_v = -p_h + \\frac{k}{m}p_v$, $\\dot{m} = -\\alpha T$, and $\\dot{p}_m = p_v \\frac{T - k v}{m^2}$:\n\\begin{align*}\n\\dot{\\varphi}\n= \\frac{m\\!\\left(-p_h + \\frac{k}{m}p_v\\right) - p_v(-\\alpha T)}{m^2} - \\alpha \\left( p_v \\frac{T - k v}{m^2} \\right) \\\\\n= \\frac{-m p_h + k p_v + \\alpha T p_v}{m^2} - \\frac{\\alpha T p_v}{m^2} + \\frac{\\alpha k v p_v}{m^2} \\\\\n= -\\frac{p_h}{m} + \\frac{k}{m^2} p_v + \\frac{\\alpha k v}{m^2} p_v.\n\\end{align*}\nThus,\n$$\n\\dot{\\varphi} \\;=\\; -\\frac{p_h}{m} + \\frac{k}{m^2} p_v (1 + \\alpha v).\n$$\nOn the singular arc, $\\dot{\\varphi} \\equiv 0$, which yields the algebraic relation\n$$\np_h \\;=\\; \\frac{k}{m}\\,p_v\\,(1 + \\alpha v).\n$$\nDifferentiate $\\dot{\\varphi}$ once more to expose the control $T$. Using $p_h$ constant, $\\dot{m} = -\\alpha T$, $\\dot{v} = \\frac{T - k v}{m} - g$, and $\\dot{p}_v = -p_h + \\frac{k}{m}p_v$, compute\n\\begin{align*}\n\\ddot{\\varphi}\n= \\frac{d}{dt}\\!\\left(-\\frac{p_h}{m} + \\frac{k}{m^2} p_v (1 + \\alpha v)\\right) \\\\\n= -p_h \\frac{d}{dt}\\!\\left(\\frac{1}{m}\\right)\n+ \\frac{d}{dt}\\!\\left(\\frac{k}{m^2}\\right)\\! p_v (1 + \\alpha v)\n+ \\frac{k}{m^2} \\dot{p}_v (1 + \\alpha v)\n+ \\frac{k}{m^2} p_v \\alpha \\dot{v}.\n\\end{align*}\nTerm by term, using $\\frac{d}{dt}(1/m) = -\\dot{m}/m^2 = \\alpha T/m^2$ and $\\frac{d}{dt}(1/m^2) = -2 \\dot{m}/m^3 = 2\\alpha T/m^3$, we obtain\n\\begin{align*}\n\\ddot{\\varphi}\n= -p_h \\left(\\frac{\\alpha T}{m^2}\\right)\n+ \\left(\\frac{2 k \\alpha T}{m^3}\\right) p_v (1 + \\alpha v)\n+ \\frac{k}{m^2}\\left(-p_h + \\frac{k}{m}p_v\\right) (1 + \\alpha v)\n+ \\frac{k}{m^2} p_v \\alpha \\left(\\frac{T - k v}{m} - g\\right).\n\\end{align*}\nCollect the terms proportional to $T$:\n\\begin{align*}\n\\ddot{\\varphi}\n= \\alpha T \\left[ -\\frac{p_h}{m^2}\n+ \\frac{2 k}{m^3} p_v (1 + \\alpha v)\n+ \\frac{k}{m^2} p_v \\left(\\frac{1}{m}\\right) \\right]\n+ \\frac{k}{m^2}\\left(-p_h + \\frac{k}{m}p_v\\right) (1 + \\alpha v)\n+ \\frac{k}{m^2} p_v \\alpha \\left( - \\frac{k v}{m} - g\\right),\n\\end{align*}\nwhere we have separated the last bracket into its $T$ and non-$T$ parts. Simplifying the $T$-coefficient by combining the second and the $T$-part of the fourth term:\n\\begin{align*}\n\\text{$T$-coefficient} = \\alpha \\left[ -\\frac{p_h}{m^2} + \\frac{2 k}{m^3} p_v (1 + \\alpha v) + \\frac{k}{m^3} p_v \\right] \\\\\n= \\alpha \\left[ -\\frac{p_h}{m^2} + \\frac{k p_v}{m^3} (3 + 2 \\alpha v) \\right].\n\\end{align*}\nThe remaining non-$T$ terms are\n\\begin{align*}\n\\text{non-$T$ terms}\n= \\frac{k}{m^2}\\left(-p_h + \\frac{k}{m}p_v\\right) (1 + \\alpha v)\n+ \\frac{k}{m^2} p_v \\alpha \\left( - \\frac{k v}{m} - g\\right).\n\\end{align*}\nOn the singular arc, we also enforce $\\dot{\\varphi} = 0$, which gave\n$$\np_h \\;=\\; \\frac{k}{m}\\,p_v\\,(1 + \\alpha v).\n$$\nSubstitute this into the $T$-coefficient and the non-$T$ terms:\n\n1) $T$-coefficient:\n\\begin{align*}\n\\alpha \\left[ -\\frac{p_h}{m^2} + \\frac{k p_v}{m^3} (3 + 2 \\alpha v) \\right]\n= \\alpha \\left[ -\\frac{1}{m^2} \\left(\\frac{k}{m} p_v (1 + \\alpha v)\\right) + \\frac{k p_v}{m^3} (3 + 2 \\alpha v) \\right] \\\\\n= \\alpha \\left[ \\frac{k p_v}{m^3} \\big( - (1 + \\alpha v) + (3 + 2 \\alpha v)\\big) \\right] \\\\\n= \\alpha \\left[ \\frac{k p_v}{m^3} (2 + \\alpha v) \\right].\n\\end{align*}\n\n2) Non-$T$ terms:\n\\begin{align*}\n\\frac{k}{m^2}\\left(-p_h + \\frac{k}{m}p_v\\right) (1 + \\alpha v)\n= \\frac{k}{m^2}\\left( - \\frac{k}{m} p_v (1 + \\alpha v) + \\frac{k}{m} p_v \\right) (1 + \\alpha v) \\\\\n= \\frac{k}{m^2}\\left( \\frac{k}{m} p_v \\big(- (1 + \\alpha v) + 1\\big) \\right) (1 + \\alpha v) \\\\\n= -\\,\\frac{\\alpha k^2 v}{m^3}\\,p_v\\,(1 + \\alpha v),\n\\end{align*}\nand\n\\begin{align*}\n\\frac{k}{m^2} p_v \\alpha \\left( - \\frac{k v}{m} - g\\right)\n= - \\frac{\\alpha k}{m^2} p_v \\left( \\frac{k v}{m} + g \\right).\n\\end{align*}\nSumming the two non-$T$ contributions:\n\\begin{align*}\n\\text{non-$T$ terms}\n= -\\,\\frac{\\alpha k^2 v}{m^3}\\,p_v\\,(1 + \\alpha v)\n- \\frac{\\alpha k}{m^2} p_v \\left( \\frac{k v}{m} + g \\right) \\\\\n= - \\frac{\\alpha k p_v}{m^3} \\left[ k v (1 + \\alpha v) + k v + g m \\right] \\\\\n= - \\frac{\\alpha k p_v}{m^3} \\left[ k v (2 + \\alpha v) + g m \\right].\n\\endalign*}\nTherefore,\n$$\n\\ddot{\\varphi}\n= \\underbrace{\\alpha \\left[ \\frac{k p_v}{m^3} (2 + \\alpha v) \\right]}_{\\text{$T$-coefficient}}\\,T\n\\;+\\; \\underbrace{\\left( - \\frac{\\alpha k p_v}{m^3} \\left[ k v (2 + \\alpha v) + g m \\right] \\right)}_{\\text{non-$T$ terms}}.\n$$\nOn the singular arc, $\\ddot{\\varphi} \\equiv 0$. Provided the generalized Legendre–Clebsch condition holds so that the coefficient of $T$ above is nonzero, we can solve algebraically for the singular control:\n\\begin{align*}\n0 = \\alpha \\left[ \\frac{k p_v}{m^3} (2 + \\alpha v) \\right] T_s\n- \\frac{\\alpha k p_v}{m^3} \\left[ k v (2 + \\alpha v) + g m \\right], \\\\\nT_s = \\frac{ k v (2 + \\alpha v) + g m }{ 2 + \\alpha v } \\\\\n= k v \\;+\\; \\frac{g m}{2 + \\alpha v}.\n\\end{align*}\nThis is the explicit singular thrust along the interior singular arc, expressed in terms of the instantaneous $v$, $m$, and parameters $g$, $k$, and $\\alpha$. In International System of Units, $T_s$ is measured in Newtons when $g$ is in $\\text{m}\\,\\text{s}^{-2}$, $m$ in $\\text{kg}$, $k$ in $\\text{N}\\,\\text{s}\\,\\text{m}^{-1}$, and $\\alpha = 1/c$ in $\\text{s}\\,\\text{m}^{-1}$, ensuring $\\alpha v$ is dimensionless.", "answer": "$$\\boxed{k v + \\frac{g m}{2 + \\alpha v}}$$", "id": "2690328"}, {"introduction": "Optimal control theory can also be a powerful tool for system identification. In this final practice, we reverse the typical problem: instead of designing a controller for a known system, you will use the observed switching behavior of an optimal controller to deduce an unknown physical parameter of the system. This exercise demonstrates that the timing of switches in a bang-bang controller contains rich information about the system's dynamics. You will derive this theoretical link and then implement a practical algorithm to estimate the parameter $\\alpha$ from noisy, sampled data. [@problem_id:2690329]", "problem": "Consider the minimum-time control of a single-input, linear time-invariant system with dynamics\n$$\n\\dot{x}(t) = A(\\alpha)\\,x(t) + B\\,u(t),\n$$\nwhere $x(t) \\in \\mathbb{R}^2$, $u(t) \\in \\mathbb{R}$ with the bound $|u(t)| \\leq 1$, and\n$$\nA(\\alpha) = \\begin{bmatrix} 0  1 \\\\ \\alpha  0 \\end{bmatrix}, \\quad B = \\begin{bmatrix} 0 \\\\ 1 \\end{bmatrix}.\n$$\nThe scalar parameter $\\alpha$ is unknown and constant with the physical dimension of inverse time squared, i.e., in $\\mathrm{s}^{-2}$. Assume the objective is to steer the state from an arbitrary initial condition to the origin in minimum time, and that the Pontryagin Maximum Principle (PMP) applies. Under PMP, define the switching function\n$$\n\\varphi(t) := B^\\top p(t),\n$$\nwhere $p(t)$ is the costate vector associated with the Hamiltonian $H(x,p,u) = p^\\top(A(\\alpha)x + Bu) + 1$. For this system, the optimal control is bang-bang, determined by the sign of $\\varphi(t)$, with switching times equal to the zeros of $\\varphi(t)$.\n\nYou observe a sequence of switching times $\\{t_k\\}_{k=0}^{N-1}$ in seconds, corresponding to zero crossings of $\\varphi(t)$. The initial time offset is unknown, and there may be additive measurement noise. In some experiments, only every $m$-th switching time is recorded, where $m \\in \\mathbb{N}$ is provided; that is, the observed sequence is $t_k \\approx t_0 + k\\,(m\\,\\Delta)$ for an unknown offset $t_0$ and an unknown base spacing $\\Delta > 0$.\n\nStarting only from fundamental definitions in optimal control (the Pontryagin Maximum Principle, the adjoint dynamics, and the definition of the switching function), derive a method to identify the unknown parameter $\\alpha$ from the observed switching times. Your derivation must explain why the inter-switch spacing is constant when $\\alpha  0$ and how it depends on $\\alpha$, and why the estimation is robust to both an unknown time offset and sub-sampling by a known integer factor $m$. Then, design an algorithm that:\n- takes as input a list of observed switching times $\\{t_k\\}$ (in seconds) and the integer $m$,\n- estimates the parameter $\\alpha$ (in $\\mathrm{s}^{-2}$),\n- is consistent for noise-free data and least-squares optimal for affine fits when small additive time noise is present,\n- requires at least two observed switching times.\n\nImplementation requirement:\n- Implement your algorithm as a complete, runnable program as specified in the final answer.\n- For each test case below, compute the estimate $\\hat{\\alpha}$ in $\\mathrm{s}^{-2}$ and round it to six decimal places.\n\nTest suite (each case provides a list of observed switching times in seconds and the corresponding $m$):\n1. Case 1 (baseline, noise-free, consecutive switches): times $= [0.35, 1.9207963267948966, 3.491592653589793, 5.06238898038469, 6.633185307179586, 8.203981633974483]$, $m = 1$.\n2. Case 2 (consecutive switches with small additive noise): times $= [0.12, 3.231592653589793, 6.398185307179586, 9.51977796076938, 12.666370614359172]$, $m = 1$.\n3. Case 3 (every second switch observed, i.e., sub-sampling): times $= [0.25, 2.3443951023931953, 4.438790204786391, 6.533185307179586, 8.627580409572781]$, $m = 2$.\n4. Case 4 (few points, large inter-switch spacing): times $= [1.0, 16.707963267948966]$, $m = 1$.\n5. Case 5 (every third switch observed with small additive noise): times $= [0.69, 11.191975511965977, 21.628951023931956, 32.11592653589793]$, $m = 3$.\n\nAngle unit: radians. Time unit: seconds. Parameter $\\alpha$ unit: $\\mathrm{s}^{-2}$.\n\nFinal output format:\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets; for example, $[\\text{result}_1,\\text{result}_2,\\ldots]$.\n- Each $\\hat{\\alpha}$ must be rounded to six decimal places.", "solution": "The problem statement is assessed to be valid. It is scientifically grounded in the principles of optimal control theory, mathematically well-posed, objective, and provides a self-contained, consistent setup for deriving a parameter estimation algorithm.\n\nThe derivation of the method to identify the parameter $\\alpha$ begins from the first principles of optimal control theory, specifically the Pontryagin Maximum Principle (PMP). The system dynamics are given by $\\dot{x}(t) = A(\\alpha)x(t) + B u(t)$, with the state $x(t) = [x_1(t), x_2(t)]^\\top \\in \\mathbb{R}^2$, control $|u(t)| \\le 1$, and matrices\n$$\nA(\\alpha) = \\begin{bmatrix} 0  1 \\\\ \\alpha  0 \\end{bmatrix}, \\quad B = \\begin{bmatrix} 0 \\\\ 1 \\end{bmatrix}.\n$$\nThe objective is to reach the origin $x=0$ in minimum time. The Hamiltonian for this problem is $H(x,p,u) = 1 + p^\\top(A(\\alpha)x + Bu)$, where $p(t) = [p_1(t), p_2(t)]^\\top$ is the costate vector. Expanding this, we have:\n$$\nH = 1 + p_1(t) x_2(t) + p_2(t) (\\alpha x_1(t) + u(t)).\n$$\nThe costate dynamics are governed by the adjoint equations, $\\dot{p}(t) = -\\frac{\\partial H}{\\partial x}(x, p, u)$:\n$$\n\\dot{p}_1(t) = -\\frac{\\partial H}{\\partial x_1} = -\\alpha p_2(t)\n$$\n$$\n\\dot{p}_2(t) = -\\frac{\\partial H}{\\partial x_2} = -p_1(t)\n$$\nAccording to PMP, the optimal control $u^*(t)$ must minimize the Hamiltonian at all times $t$. The term in $H$ involving $u(t)$ is $p_2(t)u(t)$. To minimize this, given the constraint $|u(t)| \\le 1$, the control must be $u^*(t) = -\\mathrm{sgn}(p_2(t))$. The problem defines the switching function as $\\varphi(t) := B^\\top p(t)$, which for this system is simply:\n$$\n\\varphi(t) = \\begin{bmatrix} 0  1 \\end{bmatrix} \\begin{bmatrix} p_1(t) \\\\ p_2(t) \\end{bmatrix} = p_2(t).\n$$\nThe optimal control is bang-bang, $u^*(t) = -\\mathrm{sgn}(\\varphi(t))$, and it switches values when the switching function $\\varphi(t)$ crosses zero. To understand the timing of these switches, we must analyze the dynamics of $\\varphi(t)$.\n\nBy differentiating $\\varphi(t)=p_2(t)$ and using the adjoint equations, we can find a governing differential equation for $\\varphi(t)$:\nDifferentiating $\\varphi(t)$ gives $\\dot{\\varphi}(t) = \\dot{p}_2(t) = -p_1(t)$.\nDifferentiating again gives $\\ddot{\\varphi}(t) = -\\dot{p}_1(t)$.\nSubstituting the equation for $\\dot{p}_1(t)$: $\\ddot{\\varphi}(t) = -(-\\alpha p_2(t)) = \\alpha p_2(t) = \\alpha \\varphi(t)$.\nThis yields the homogeneous second-order linear ordinary differential equation for the switching function:\n$$\n\\ddot{\\varphi}(t) - \\alpha \\varphi(t) = 0.\n$$\nThe nature of the solution depends on the sign of $\\alpha$. The problem describes observing a sequence of multiple switching times. This implies that $\\varphi(t)$ must have multiple zero-crossings.\nIf $\\alpha \\ge 0$, the general solution is $\\varphi(t) = C_1 e^{\\sqrt{\\alpha}t} + C_2 e^{-\\sqrt{\\alpha}t}$ (or $\\varphi(t) = C_1 t + C_2$ if $\\alpha=0$). Such a function can have at most one zero, which means at most one control switch can occur. This contradicts the premise of observing a sequence of switches. Therefore, we must have $\\alpha  0$.\n\nFor $\\alpha  0$, let us define $\\alpha = -\\omega^2$ where $\\omega = \\sqrt{-\\alpha}  0$. The ODE becomes:\n$$\n\\ddot{\\varphi}(t) + \\omega^2 \\varphi(t) = 0.\n$$\nThis is the equation of a simple harmonic oscillator. Its general solution is sinusoidal:\n$$\n\\varphi(t) = C \\sin(\\omega t + \\phi_0),\n$$\nwhere the amplitude $C$ and phase $\\phi_0$ are determined by the initial conditions of the costate vector. The switching times $\\{t_k\\}$ are the zeros of $\\varphi(t)$, which occur when:\n$$\n\\omega t_k + \\phi_0 = k\\pi, \\quad k \\in \\mathbb{Z}.\n$$\nSolving for $t_k$, we get $t_k = \\frac{k\\pi - \\phi_0}{\\omega}$. The time interval, $\\Delta$, between any two consecutive switches, $t_{k+1}$ and $t_k$, is constant:\n$$\n\\Delta = t_{k+1} - t_k = \\frac{(k+1)\\pi - \\phi_0}{\\omega} - \\frac{k\\pi - \\phi_0}{\\omega} = \\frac{\\pi}{\\omega}.\n$$\nSubstituting $\\omega = \\sqrt{-\\alpha}$, we find the direct relationship between the inter-switch spacing $\\Delta$ and the parameter $\\alpha$:\n$$\n\\Delta = \\frac{\\pi}{\\sqrt{-\\alpha}} \\implies \\alpha = -\\left(\\frac{\\pi}{\\Delta}\\right)^2.\n$$\nThis derivation explains why the inter-switch spacing is constant for $\\alpha  0$ and how it depends on $\\alpha$.\n\nThe problem states that the observed switching times, let's call them $T_k$, are related to an underlying sequence with constant spacing $m\\Delta$, where $m$ is a known integer sub-sampling factor. The model is $T_k \\approx T_{\\text{offset}} + k \\cdot (m\\Delta)$, where $T_{\\text{offset}}$ is an unknown time offset. This is a linear relationship between the observed times $T_k$ and their indices $k = 0, 1, 2, \\ldots, N-1$.\nWe can model this relationship as $T_k = a + b k$, where $a$ is the intercept (corresponding to the unknown offset $T_{\\text{offset}}$) and $b$ is the slope (corresponding to the observed spacing $m\\Delta$).\n\nTo estimate $\\alpha$, we first need to estimate the slope $b$. Given a set of $N$ data points $(k, T_k)$, simple linear regression provides a least-squares optimal estimate for the slope. The formula for the slope $\\hat{b}$ is:\n$$\n\\hat{b} = \\frac{N \\sum_{k=0}^{N-1} (k T_k) - (\\sum_{k=0}^{N-1} k)(\\sum_{k=0}^{N-1} T_k)}{N \\sum_{k=0}^{N-1} k^2 - (\\sum_{k=0}^{N-1} k)^2}.\n$$\nThis method is robust for the following reasons:\n1.  **Robustness to unknown time offset**: The linear regression model $T_k = a + b k$ includes an intercept term $a$. The estimation of the slope $b$ is mathematically independent of any constant offset in the data $T_k$. The intercept $a$ simply absorbs the unknown time offset.\n2.  **Robustness to sub-sampling**: The estimated slope $\\hat{b}$ corresponds to the observed spacing, which is $m\\Delta$. Since the sub-sampling factor $m$ is known, we can recover an estimate for the fundamental spacing $\\Delta$ via $\\hat{\\Delta} = \\hat{b}/m$. The calculation for $\\alpha$ will correctly use this information.\n3.  **Robustness to small additive noise**: The use of least-squares linear regression is the standard and statistically optimal method for fitting a line to data points corrupted by additive noise, assuming the noise has zero mean. It minimizes the sum of squared errors, providing the best linear unbiased estimator for the slope under common statistical assumptions.\n\nOnce the slope $\\hat{b}$ is estimated from the data, we have $\\hat{b} \\approx m\\Delta$. This gives an estimate for the fundamental spacing, $\\hat{\\Delta} = \\hat{b}/m$. Substituting this into our formula for $\\alpha$:\n$$\n\\hat{\\alpha} = -\\left(\\frac{\\pi}{\\hat{\\Delta}}\\right)^2 = -\\left(\\frac{\\pi}{\\hat{b}/m}\\right)^2 = -\\left(\\frac{m\\pi}{\\hat{b}}\\right)^2.\n$$\nThis is the final expression for the estimator of $\\alpha$. The algorithm is as follows:\n1. Given a list of $N \\ge 2$ observed switching times $\\{T_k\\}_{k=0}^{N-1}$ and an integer $m$.\n2. Construct the set of data points $(k, T_k)$ for $k=0, 1, \\ldots, N-1$.\n3. Perform a linear regression on this data to find the slope $\\hat{b}$.\n4. Compute the estimate $\\hat{\\alpha}$ using the formula $\\hat{\\alpha} = -(m\\pi/\\hat{b})^2$.\n\nThis algorithm is consistent for noise-free data and provides a least-squares optimal estimate for affine data models with small additive noise.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves for the parameter alpha for a series of test cases based on \n    observed switching times in a minimum-time optimal control problem.\n    \"\"\"\n\n    # Define the test cases from the problem statement.\n    test_cases = [\n        # Case 1 (baseline, noise-free, consecutive switches)\n        ([0.35, 1.9207963267948966, 3.491592653589793, 5.06238898038469, 6.633185307179586, 8.203981633974483], 1),\n        # Case 2 (consecutive switches with small additive noise)\n        ([0.12, 3.231592653589793, 6.398185307179586, 9.51977796076938, 12.666370614359172], 1),\n        # Case 3 (every second switch observed, i.e., sub-sampling)\n        ([0.25, 2.3443951023931953, 4.438790204786391, 6.533185307179586, 8.627580409572781], 2),\n        # Case 4 (few points, large inter-switch spacing)\n        ([1.0, 16.707963267948966], 1),\n        # Case 5 (every third switch observed with small additive noise)\n        ([0.69, 11.191975511965977, 21.628951023931956, 32.11592653589793], 3)\n    ]\n\n    results = []\n    \n    for times, m in test_cases:\n        # Convert list of times to a NumPy array for vectorized operations.\n        times_array = np.array(times)\n        num_points = len(times_array)\n\n        # The independent variable is the sequence of observation indices k = 0, 1, 2, ...\n        k_indices = np.arange(num_points)\n\n        # Perform simple linear regression of times vs. indices.\n        # The model is t_k = intercept + slope * k.\n        # np.polyfit(x, y, 1) returns [slope, intercept].\n        # The slope corresponds to the observed inter-switch spacing, m*Delta.\n        slope, _ = np.polyfit(k_indices, times_array, 1)\n        \n        b_hat = slope\n        \n        # From the derivation, alpha = - (m * pi / b_hat)^2.\n        # This formula directly uses the estimated slope b_hat and the known\n        # sub-sampling factor m.\n        # We assume b_hat > 0, as switching times are expected to be increasing.\n        if b_hat > 0:\n            alpha_hat = - (m * np.pi / b_hat)**2\n        else:\n            # This case indicates non-physical data (e.g., non-increasing times)\n            # and is not expected given the problem description.\n            alpha_hat = np.nan\n\n        # Round the result to six decimal places as required.\n        rounded_alpha = round(alpha_hat, 6)\n        results.append(str(rounded_alpha))\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2690329"}]}