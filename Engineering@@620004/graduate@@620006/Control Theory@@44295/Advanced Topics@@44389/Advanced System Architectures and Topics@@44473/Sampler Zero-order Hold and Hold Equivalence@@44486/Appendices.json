{"hands_on_practices": [{"introduction": "The first step in digital control is to accurately represent a continuous-time system within a discrete-time framework. This foundational exercise guides you through the derivation of the Zero-Order Hold (ZOH) equivalent model for a simple first-order plant. By working from first principles using state-space equations and the matrix exponential, you will gain a deep, analytical understanding of how the continuous dynamics and sampling period $T$ shape the resulting discrete-time difference equation [@problem_id:2743064]. This practice solidifies the mathematical bridge between the continuous and digital domains.", "problem": "Consider a continuous-time scalar first-order plant with transfer function $P(s)=\\frac{1}{s+a}$, where $a0$. The plant is driven by a sampled-data interconnection consisting of an ideal sampler at sampling period $T0$ and a Zero-Order Hold (ZOH) that holds each input sample constant over each sampling interval. Let $u[k]$ denote the discrete-time input applied to the ZOH, so that the continuous-time input $u(t)$ is piecewise constant with $u(t)=u[k]$ for $t\\in[kT,(k+1)T)$, and let $y[k]$ denote the sampled output $y(kT)$.\n\nStarting from first principles for Linear Time-Invariant (LTI) systems—namely, the state-space representation, the solution of linear differential equations via matrix exponentials, and the definition of the Zero-Order Hold (ZOH)—derive the exact discrete-time input-output relationship of the form $y[k+1]=\\alpha\\,y[k]+\\beta\\,u[k]$ that is hold-equivalent to the continuous-time plant under the sampler–plant–ZOH interconnection at sampling period $T$.\n\nYour task is to compute the coefficients $\\alpha$ and $\\beta$ in closed form, as functions of $a$ and $T$. Provide your final answer as a single row vector $\\begin{pmatrix}\\alpha  \\beta\\end{pmatrix}$ (no units).", "solution": "The problem statement is rigorously evaluated and confirmed to be valid. It is scientifically grounded in the principles of linear systems and control theory, well-posed with a unique and derivable solution, and objectively stated without ambiguity. The task is a standard problem in digital control systems, requiring the derivation of the discrete-time equivalent of a continuous-time system under a zero-order hold. We shall proceed with the derivation from first principles as requested.\n\nThe continuous-time plant is described by the transfer function $P(s) = \\frac{Y(s)}{U(s)} = \\frac{1}{s+a}$. This corresponds to the linear ordinary differential equation:\n$$\n\\frac{d}{dt}y(t) + a y(t) = u(t)\n$$\nWe formulate this system in state-space form. For this first-order system, we can choose the state variable $x(t)$ to be the output itself, $x(t) = y(t)$. The state-space representation is then:\n$$\n\\dot{x}(t) = A x(t) + B u(t)\n$$\n$$\ny(t) = C x(t) + D u(t)\n$$\nBy comparing with the differential equation $\\dot{y}(t) = -a y(t) + u(t)$, and noting that $x(t) = y(t)$, we identify the system matrices (which are scalars in this case):\n$$\nA = -a, \\quad B = 1, \\quad C = 1, \\quad D = 0\n$$\nThe solution to the state equation for a linear time-invariant (LTI) system over the time interval $[t_0, t]$ is given by the variation of constants formula:\n$$\nx(t) = \\exp(A(t-t_0)) x(t_0) + \\int_{t_0}^{t} \\exp(A(t-\\tau)) B u(\\tau) d\\tau\n$$\nWe are interested in the evolution of the state from one sampling instant $t_0 = kT$ to the next, $t = (k+1)T$. Substituting these into the solution gives:\n$$\nx((k+1)T) = \\exp(A((k+1)T - kT)) x(kT) + \\int_{kT}^{(k+1)T} \\exp(A((k+1)T - \\tau)) B u(\\tau) d\\tau\n$$\nLet us define the discrete-time state $x[k] \\equiv x(kT)$. The equation becomes:\n$$\nx[k+1] = \\exp(AT) x[k] + \\int_{kT}^{(k+1)T} \\exp(A((k+1)T - \\tau)) B u(\\tau) d\\tau\n$$\nThe problem specifies a Zero-Order Hold (ZOH), which means the continuous-time input $u(t)$ is piecewise constant over each sampling interval. Specifically, for any $\\tau$ in the interval $[kT, (k+1)T)$, the input is held at the value of the discrete-time sample $u[k]$, i.e., $u(\\tau) = u[k]$. Since $u[k]$ is a constant, we can take it outside the integral:\n$$\nx[k+1] = \\exp(AT) x[k] + \\left( \\int_{kT}^{(k+1)T} \\exp(A((k+1)T - \\tau)) B d\\tau \\right) u[k]\n$$\nTo evaluate the integral, we perform a change of variable. Let $\\lambda = (k+1)T - \\tau$. This implies $d\\lambda = -d\\tau$. The limits of integration change as follows: when $\\tau = kT$, $\\lambda = T$; when $\\tau = (k+1)T$, $\\lambda = 0$. The integral becomes:\n$$\n\\int_{T}^{0} \\exp(A\\lambda) B (-d\\lambda) = \\int_{0}^{T} \\exp(A\\lambda) B d\\lambda\n$$\nThis gives the exact discrete-time state-space model:\n$$\nx[k+1] = F_d x[k] + G_d u[k]\n$$\nwhere the discrete-time system matrix $F_d$ and input matrix $G_d$ are defined as:\n$$\nF_d = \\exp(AT)\n$$\n$$\nG_d = \\left( \\int_{0}^{T} \\exp(A\\lambda) d\\lambda \\right) B\n$$\nNow, we substitute the scalar values $A = -a$ and $B = 1$ for our specific plant.\nThe matrix $F_d$ is:\n$$\nF_d = \\exp(-aT)\n$$\nThe matrix $G_d$ is calculated by evaluating the integral:\n$$\nG_d = \\left( \\int_{0}^{T} \\exp(-a\\lambda) d\\lambda \\right) \\cdot 1 = \\left[ -\\frac{1}{a} \\exp(-a\\lambda) \\right]_0^T\n$$\nEvaluating the integral at the limits gives:\n$$\nG_d = -\\frac{1}{a} (\\exp(-aT) - \\exp(0)) = -\\frac{1}{a} (\\exp(-aT) - 1) = \\frac{1 - \\exp(-aT)}{a}\n$$\nThe discrete-time state equation is therefore:\n$$\nx[k+1] = \\exp(-aT) x[k] + \\frac{1-\\exp(-aT)}{a} u[k]\n$$\nThe problem relates the sampled input $u[k]$ to the sampled output $y[k] \\equiv y(kT)$. From our state-space definition, $y(t) = C x(t) + D u(t)$. With $C=1$ and $D=0$, we have $y(t) = x(t)$. Thus, the sampled output is equal to the discrete-time state: $y[k] = y(kT) = x(kT) = x[k]$.\nSubstituting $y[k]$ for $x[k]$ in the discrete state equation, we obtain the final input-output relationship:\n$$\ny[k+1] = \\exp(-aT) y[k] + \\frac{1-\\exp(-aT)}{a} u[k]\n$$\nThis equation is in the desired form $y[k+1] = \\alpha y[k] + \\beta u[k]$. By direct comparison, we identify the coefficients $\\alpha$ and $\\beta$:\n$$\n\\alpha = \\exp(-aT)\n$$\n$$\n\\beta = \\frac{1-\\exp(-aT)}{a}\n$$\nThe coefficients are functions of the plant parameter $a$ and the sampling period $T$, as required.", "answer": "$$\\boxed{\\begin{pmatrix} \\exp(-aT)  \\frac{1-\\exp(-aT)}{a} \\end{pmatrix}}$$", "id": "2743064"}, {"introduction": "Discretizing a continuous system can sometimes lead to unexpected and detrimental effects, a crucial consideration for any control engineer. This practice explores the phenomenon of \"pathological sampling,\" where a sampling period $T$ that interacts poorly with a system's natural frequencies can cause a loss of structural properties like reachability, even if the original continuous system was fully controllable [@problem_id:2743060]. Through a hands-on coding exercise, you will learn to diagnose this issue and discover how even a small adjustment to the sampling period can restore this vital system property, underscoring the importance of careful sampling time selection.", "problem": "Consider a continuous-time linear time-invariant state-space model with a sampler and a Zero-Order Hold (ZOH) on the input. The system is given by the state equation $\\dot{x}(t) = A x(t) + B u(t)$ and the output equation $y(t) = C x(t)$, where $A \\in \\mathbb{R}^{n \\times n}$, $B \\in \\mathbb{R}^{n \\times m}$, and $C \\in \\mathbb{R}^{p \\times n}$. Under a sampler of period $T  0$ seconds and a Zero-Order Hold on the input, the exact (hold-equivalent) discrete-time model is $x_{k+1} = A_d x_k + B_d u_k$, $y_k = C x_k$, where $A_d = e^{A T}$ and $B_d = \\int_{0}^{T} e^{A \\tau} B \\, d\\tau$.\n\nDefine the discrete-time reachability matrix as\n$$\n\\mathcal{R}_d(A_d,B_d) = \\left[ B_d \\; , \\; A_d B_d \\; , \\; \\dots \\; , \\; A_d^{n-1} B_d \\right] \\in \\mathbb{R}^{n \\times (n m)},\n$$\nand the discrete-time observability matrix as\n$$\n\\mathcal{O}_d(A_d,C) = \\begin{bmatrix}\nC \\\\\nC A_d \\\\\n\\vdots \\\\\nC A_d^{n-1}\n\\end{bmatrix} \\in \\mathbb{R}^{(n p) \\times n}.\n$$\nThe discrete-time model is reachable if $\\operatorname{rank}(\\mathcal{R}_d) = n$ and observable if $\\operatorname{rank}(\\mathcal{O}_d) = n$.\n\nYour task is to write a complete program that, for each test case, performs all of the following:\n- Computes the ZOH-equivalent discrete-time pair $(A_d,B_d)$ for the given $(A,B)$ and sampling period $T$.\n- Constructs $\\mathcal{R}_d$ and $\\mathcal{O}_d$ and computes their matrix ranks using a numerically stable singular value decomposition with a tolerance based on machine precision.\n- If $\\operatorname{rank}(\\mathcal{R}_d) = n$, reports a perturbation $\\delta T = 0$ (in seconds). If $\\operatorname{rank}(\\mathcal{R}_d)  n$, determines the minimal-magnitude perturbation $\\delta T$ (in seconds), restricted to a uniform search grid, needed to restore full rank reachability, subject to the following rules:\n  1. The perturbation is searched over the discrete symmetric set $\\{\\delta T = k \\Delta \\mid k \\in \\mathbb{Z}, 1 \\le |k| \\le K_{\\max} \\}$ with step size $\\Delta = 10^{-3}$ seconds and bound $K_{\\max} = 1000$.\n  2. The first $\\delta T$ encountered with the smallest nonzero magnitude such that $\\operatorname{rank}(\\mathcal{R}_d(A_d(T+\\delta T), B_d(T+\\delta T))) = n$ is accepted. In case of a tie between $\\pm k \\Delta$, choose the negative perturbation (that is, prefer $\\delta T = -k \\Delta$).\n  3. If no such $\\delta T$ exists within the search set, or if the continuous-time pair $(A,B)$ is not reachable (that is, $\\operatorname{rank}([B, AB, \\dots, A^{n-1} B])  n$), then report $\\delta T = -1$ (a sentinel indicating impossibility under the given constraints).\n\nAll times must be expressed in seconds. Angle quantities, if any, are in radians. All ranks are integers. The perturbation $\\delta T$ must be reported as a real number rounded to six decimal places.\n\nUse the following test suite. For each case, use the given $(A,B,C,T)$:\n- Case 1: $n = 2$, $m = 1$, $p = 1$, $A = \\begin{bmatrix} 0  1 \\\\ -1  0 \\end{bmatrix}$, $B = \\begin{bmatrix} 0 \\\\ 1 \\end{bmatrix}$, $C = \\begin{bmatrix} 1  0 \\end{bmatrix}$, $T = 2\\pi$.\n- Case 2: $n = 2$, $m = 1$, $p = 1$, $A = \\begin{bmatrix} 0  1 \\\\ -1  0 \\end{bmatrix}$, $B = \\begin{bmatrix} 0 \\\\ 1 \\end{bmatrix}$, $C = \\begin{bmatrix} 1  0 \\end{bmatrix}$, $T = \\pi$.\n- Case 3: $n = 2$, $m = 1$, $p = 1$, $A = \\begin{bmatrix} 0  1 \\\\ 0  0 \\end{bmatrix}$, $B = \\begin{bmatrix} 0 \\\\ 1 \\end{bmatrix}$, $C = \\begin{bmatrix} 1  0 \\end{bmatrix}$, $T = 0.1$.\n- Case 4: $n = 2$, $m = 1$, $p = 1$, $A = \\begin{bmatrix} 0  0 \\\\ 0  0 \\end{bmatrix}$, $B = \\begin{bmatrix} 1 \\\\ 0 \\end{bmatrix}$, $C = \\begin{bmatrix} 0  1 \\end{bmatrix}$, $T = 0.3$.\n- Case 5: $n = 3$, $m = 1$, $p = 1$, $A = \\begin{bmatrix} 0  1  0 \\\\ -4  0  0 \\\\ 0  0  -1 \\end{bmatrix}$, $B = \\begin{bmatrix} 0 \\\\ 1 \\\\ 1 \\end{bmatrix}$, $C = \\begin{bmatrix} 1  0  0 \\end{bmatrix}$, $T = \\pi$.\n\nYour program must output a single line containing a comma-separated flat list aggregating the results for all cases in order. For each case, output three values in sequence: the integer reachability rank $\\operatorname{rank}(\\mathcal{R}_d)$, the integer observability rank $\\operatorname{rank}(\\mathcal{O}_d)$, and the perturbation $\\delta T$ rounded to six decimal places. For example, the output format must be exactly\n$[r_{c,1},r_{o,1},\\delta T_1,r_{c,2},r_{o,2},\\delta T_2,\\dots,r_{c,5},r_{o,5},\\delta T_5]$,\nwith $\\delta T_i$ printed to six decimal places (e.g., $0.001000$) and the sentinel value printed as $-1.000000$ when applicable.", "solution": "The problem statement presented is subjected to rigorous validation.\n\nStep 1: Extract Givens\n- Continuous-time state-space model: $\\dot{x}(t) = A x(t) + B u(t)$, $y(t) = C x(t)$, with $A \\in \\mathbb{R}^{n \\times n}$, $B \\in \\mathbb{R}^{n \\times m}$, $C \\in \\mathbb{R}^{p \\times n}$.\n- Zero-Order Hold (ZOH) discrete-time equivalent model: $x_{k+1} = A_d x_k + B_d u_k$, $y_k = C x_k$.\n- Discretization formulas: $A_d = e^{A T}$ and $B_d = \\int_{0}^{T} e^{A \\tau} B \\, d\\tau$, where $T  0$ is the sampling period.\n- Discrete-time reachability matrix: $\\mathcal{R}_d(A_d,B_d) = \\left[ B_d \\; , \\; A_d B_d \\; , \\; \\dots \\; , \\; A_d^{n-1} B_d \\right] \\in \\mathbb{R}^{n \\times (n m)}$.\n- Discrete-time observability matrix: $\\mathcal{O}_d(A_d,C) = \\begin{bmatrix} C \\\\ C A_d \\\\ \\vdots \\\\ C A_d^{n-1} \\end{bmatrix} \\in \\mathbb{R}^{(n p) \\times n}$.\n- Rank conditions: The discrete system is reachable if $\\operatorname{rank}(\\mathcal{R}_d) = n$ and observable if $\\operatorname{rank}(\\mathcal{O}_d) = n$.\n- Perturbation search task for reachability:\n    1. If $\\operatorname{rank}(\\mathcal{R}_d(T)) = n$, report $\\delta T = 0$.\n    2. If $\\operatorname{rank}(\\mathcal{R}_d(T))  n$, search for a minimal-magnitude perturbation $\\delta T$ to restore full rank.\n    3. The search grid for $\\delta T$ is the discrete set $\\{\\delta T = k \\Delta \\mid k \\in \\mathbb{Z}, 1 \\le |k| \\le K_{\\max} \\}$.\n    4. Search parameters: step size $\\Delta = 10^{-3}$ seconds, maximum step multiplier $K_{\\max} = 1000$.\n    5. Tie-breaking rule: For a tie in magnitude $|k \\Delta|$, the negative perturbation $-k\\Delta$ is preferred.\n    6. Sentinel value: $\\delta T = -1$ is reported if the continuous-time pair $(A,B)$ is not reachable, or if no suitable perturbation is found within the specified search set.\n- Numerical method: Matrix rank is to be computed via Singular Value Decomposition (SVD) with a tolerance based on machine precision.\n- Test Cases: Five distinct sets of $(A, B, C, T)$ are provided.\n- Output Format: A flat list of results $[r_{c,1},r_{o,1},\\delta T_1, \\dots, r_{c,5},r_{o,5},\\delta T_5]$, with $\\delta T$ values rounded to six decimal places.\n\nStep 2: Validate Using Extracted Givens\nThe problem is scientifically grounded in established principles of linear systems and control theory, specifically concerning the discretization of continuous-time systems and the analysis of their structural properties. The definitions for the ZOH-equivalent model, reachability, and observability matrices are standard. The phenomenon of losing system properties due to pathological sampling is a well-documented topic. The problem is well-posed, providing a clear objective, all necessary data, and a deterministic algorithm for finding the perturbation $\\delta T$. The language is objective and unambiguous. The problem does not violate any of the invalidity criteria.\n\nStep 3: Verdict and Action\nThe problem is deemed **valid**. A solution will be developed.\n\nThe solution proceeds as follows. For each test case defined by the parameters $(A, B, C, T)$, we must perform a sequence of calculations.\n\nFirst, the ZOH-equivalent discrete-time system matrices $(A_d, B_d)$ must be computed for a given sampling period $T$. A robust and standard computational method involves the matrix exponential of an augmented block matrix. Define the matrix $M$ as:\n$$\nM = \\begin{bmatrix} A  B \\\\ \\mathbf{0}  \\mathbf{0} \\end{bmatrix} \\in \\mathbb{R}^{(n+m) \\times (n+m)}\n$$\nThe exponential of $M T$ yields the desired discrete-time matrices in its upper blocks:\n$$\ne^{M T} = \\exp\\left( \\begin{bmatrix} AT  BT \\\\ \\mathbf{0}  \\mathbf{0} \\end{bmatrix} \\right) = \\begin{bmatrix} e^{AT}  \\left(\\int_0^T e^{A\\sigma} d\\sigma\\right) B \\\\ \\mathbf{0}  I \\end{bmatrix} = \\begin{bmatrix} A_d  B_d \\\\ \\mathbf{0}  I \\end{bmatrix}\n$$\nThis computation is efficiently handled by numerical libraries using, for example, Padé approximants.\n\nSecond, with the discrete-time pair $(A_d, B_d)$ and the matrix $C$, we construct the discrete-time reachability matrix $\\mathcal{R}_d$ and observability matrix $\\mathcal{O}_d$.\n$$\n\\mathcal{R}_d = \\begin{bmatrix} B_d  A_d B_d  \\dots  A_d^{n-1} B_d \\end{bmatrix}\n$$\n$$\n\\mathcal{O}_d = \\begin{bmatrix} C \\\\ CA_d \\\\ \\vdots \\\\ CA_d^{n-1} \\end{bmatrix}\n$$\nThe rank of these matrices determines the system properties. The rank is defined as the number of non-zero singular values, which is best computed via SVD for numerical stability, counting singular values greater than a tolerance derived from machine precision.\n\nThird, we analyze the reachability and determine the perturbation $\\delta T$.\nThe rank of $\\mathcal{R}_d$ computed with the initial sampling period $T$ is first evaluated. If this rank is equal to the state dimension $n$, the system is reachable, and the required perturbation is $\\delta T = 0$.\n\nIf the rank is less than $n$, a loss of reachability has occurred. This may be because the original continuous-time system is itself unreachable, or it may be a pathology of the sampling process. We first check the continuous-time reachability by computing the rank of the continuous-time reachability matrix $\\mathcal{R}_c$:\n$$\n\\mathcal{R}_c = \\begin{bmatrix} B  AB  \\dots  A^{n-1}B \\end{bmatrix}\n$$\nIf $\\operatorname{rank}(\\mathcal{R}_c)  n$, the system is fundamentally unreachable, and no change in sampling period can correct this. As per the problem rules, we report $\\delta T = -1$.\n\nIf $\\operatorname{rank}(\\mathcal{R}_c) = n$ but $\\operatorname{rank}(\\mathcal{R}_d)  n$, the loss of reachability is due to pathological sampling. This typically occurs when the sampling period $T$ interacts destructively with the system's natural frequencies (related to the imaginary parts of the eigenvalues of $A$). We must then search for a minimal perturbation $\\delta T$ that restores reachability. The search proceeds on a discrete grid, for integer $k$ from $1$ to $K_{\\max} = 1000$:\n1.  Test the negative perturbation. Let $T_{\\text{new}} = T - k \\Delta$, where $\\Delta = 10^{-3}$. If $T_{\\text{new}}  0$, compute the new discrete system $(A_d(T_{\\text{new}}), B_d(T_{\\text{new}}))$ and the rank of the corresponding reachability matrix. If the rank is $n$, the minimal perturbation is found: $\\delta T = -k \\Delta$. The search terminates.\n2.  If the negative perturbation is not tested or is unsuccessful, test the positive perturbation. Let $T_{\\text{new}} = T + k \\Delta$. Compute the new discrete system and its reachability rank. If the rank is $n$, the minimal perturbation is found: $\\delta T = +k \\Delta$. The search terminates.\nThis search order inherently satisfies the tie-breaking rule of preferring a negative perturbation. If the loop completes without finding a suitable perturbation, no solution exists within the given constraints, and we report $\\delta T = -1$.\n\nThis entire procedure is encapsulated in a program and applied to each of the specified test cases to generate the required output.", "answer": "```python\nimport numpy as np\nfrom scipy.linalg import expm\n\ndef compute_rank(matrix):\n    \"\"\"\n    Computes the rank of a matrix using SVD-based method from numpy.\n    This method is numerically stable and uses a tolerance based on machine precision.\n    \"\"\"\n    if matrix.size == 0:\n        return 0\n    return np.linalg.matrix_rank(matrix)\n\ndef get_discrete_system(A, B, T):\n    \"\"\"\n    Computes the ZOH-equivalent discrete-time system (Ad, Bd) for a given\n    continuous-time system (A, B) and sampling period T.\n    \"\"\"\n    n = A.shape[0]\n    m = B.shape[1]\n\n    # Handle invalid sampling period\n    if T = 0:\n        raise ValueError(\"Sampling period T must be positive.\")\n\n    # Augmented matrix method\n    M = np.zeros((n + m, n + m))\n    M[:n, :n] = A\n    M[:n, n:] = B\n    \n    phi = expm(M * T)\n    \n    Ad = phi[:n, :n]\n    Bd = phi[:n, n:]\n    \n    return Ad, Bd\n\ndef get_reachability_matrix(A_mat, B_mat, n):\n    \"\"\"\n    Constructs the reachability matrix R = [B, AB, A^2B, ..., A^(n-1)B].\n    \"\"\"\n    if B_mat.size == 0:\n        return np.zeros((n, 0))\n    m = B_mat.shape[1]\n    R_d = np.zeros((n, n * m))\n    \n    current_power_B = B_mat\n    R_d[:, 0:m] = current_power_B\n    \n    for i in range(1, n):\n        current_power_B = A_mat @ current_power_B\n        R_d[:, i * m:(i + 1) * m] = current_power_B\n        \n    return R_d\n\ndef get_observability_matrix(A_mat, C_mat, n):\n    \"\"\"\n    Constructs the observability matrix O = [C^T, (CA)^T, ..., (CA^(n-1))^T]^T.\n    \"\"\"\n    p = C_mat.shape[0]\n    O_d = np.zeros((n * p, n))\n    \n    current_power_C = C_mat\n    O_d[0:p, :] = current_power_C\n    \n    for i in range(1, n):\n        current_power_C = current_power_C @ A_mat\n        O_d[i * p:(i + 1) * p, :] = current_power_C\n        \n    return O_d\n\ndef process_case(A, B, C, T):\n    \"\"\"\n    Analyzes a single test case according to the problem description.\n    \"\"\"\n    A = np.array(A, dtype=float)\n    B = np.array(B, dtype=float)\n    C = np.array(C, dtype=float)\n    \n    n = A.shape[0]\n    \n    # 1. Compute discrete system and initial ranks\n    Ad, Bd = get_discrete_system(A, B, T)\n    \n    R_d = get_reachability_matrix(Ad, Bd, n)\n    O_d = get_observability_matrix(Ad, C, n)\n    \n    rank_r_d = compute_rank(R_d)\n    rank_o_d = compute_rank(O_d)\n    \n    # 2. Determine delta_T\n    delta_T = 0.0\n    \n    if rank_r_d  n:\n        # Check continuous-time reachability\n        R_c = get_reachability_matrix(A, B, n)\n        if compute_rank(R_c)  n:\n            delta_T = -1.0\n        else:\n            # Search for a perturbation\n            delta_T = -1.0  # Default to sentinel if not found\n            DELTA = 1e-3\n            K_MAX = 1000\n            \n            found = False\n            for k in range(1, K_MAX + 1):\n                # Try negative perturbation first\n                T_neg = T - k * DELTA\n                if T_neg  0:\n                    Ad_neg, Bd_neg = get_discrete_system(A, B, T_neg)\n                    R_d_neg = get_reachability_matrix(Ad_neg, Bd_neg, n)\n                    if compute_rank(R_d_neg) == n:\n                        delta_T = -k * DELTA\n                        found = True\n                        break\n                \n                # Try positive perturbation\n                T_pos = T + k * DELTA\n                Ad_pos, Bd_pos = get_discrete_system(A, B, T_pos)\n                R_d_pos = get_reachability_matrix(Ad_pos, Bd_pos, n)\n                if compute_rank(R_d_pos) == n:\n                    delta_T = k * DELTA\n                    found = True\n                    break\n            \n    return rank_r_d, rank_o_d, delta_T\n\ndef solve():\n    \"\"\"\n    Main function to solve the problem for the given test cases.\n    \"\"\"\n    test_cases = [\n        {\n            \"A\": [[0, 1], [-1, 0]], \"B\": [[0], [1]], \n            \"C\": [[1, 0]], \"T\": 2 * np.pi\n        },\n        {\n            \"A\": [[0, 1], [-1, 0]], \"B\": [[0], [1]], \n            \"C\": [[1, 0]], \"T\": np.pi\n        },\n        {\n            \"A\": [[0, 1], [0, 0]], \"B\": [[0], [1]], \n            \"C\": [[1, 0]], \"T\": 0.1\n        },\n        {\n            \"A\": [[0, 0], [0, 0]], \"B\": [[1], [0]], \n            \"C\": [[0, 1]], \"T\": 0.3\n        },\n        {\n            \"A\": [[0, 1, 0], [-4, 0, 0], [0, 0, -1]], \"B\": [[0], [1], [1]],\n            \"C\": [[1, 0, 0]], \"T\": np.pi\n        }\n    ]\n\n    results = []\n    for case in test_cases:\n        r_c, r_o, dt = process_case(case[\"A\"], case[\"B\"], case[\"C\"], case[\"T\"])\n        results.extend([r_c, r_o, f\"{dt:.6f}\"])\n\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2743060"}, {"introduction": "A digital controller that achieves perfect performance at the sampling instants may still exhibit poor behavior *between* these discrete points in time. This problem investigates the critical concept of intersample performance by comparing the continuous output of a system under two different, yet discretely equivalent, control strategies [@problem_id:2743043]. By analyzing a hypothetical scenario involving a fractional control advance, this exercise compellingly demonstrates how modifying the nature of the hold can significantly reduce intersample overshoot, highlighting that a complete performance analysis must always consider the system's full continuous-time trajectory.", "problem": "Consider the continuous-time plant with transfer function $G(s) = \\frac{1}{s^{2}}$, so that the output $y(t)$ satisfies the double-integrator dynamics $y''(t) = u(t)$, where $u(t)$ is the applied control. The plant is controlled by a discrete-time controller with sampling period $h  0$ and a Zero-Order Hold (ZOH) at the input. The reference is a unit step applied at $t=0$. You will compare two implementations that are hold-equivalent in the discrete-time sense (same sampled response) but differ in intersample behavior:\n\n- Baseline ZOH: The ZOH applies piecewise-constant inputs $u_{0}$ on $[0,h)$, $u_{1}$ on $[h,2h)$, and $0$ thereafter. The discrete-time controller selects $u_{0}$ and $u_{1}$ to ensure the sampled response satisfies $y(h) = 1$ and $y(2h) = 1$.\n\n- Fractional-delay compensated ZOH: A strictly proper fractional delay compensator in the digital controller is used to mimic a phase advance in continuous time. By hold equivalence, its net effect at the plant input can be modeled as applying the same piecewise-constant values $u_{0}$, $u_{1}$, $0$ but each segment is shifted earlier by a fractional amount $\\delta \\in (0,h)$: $u(t)=u_{0}$ on $[-\\delta, h-\\delta)$, $u(t)=u_{1}$ on $[h-\\delta, 2h-\\delta)$, and $u(t)=0$ on $[2h-\\delta, \\infty)$. Assume the controller has preview of the reference and an internal model so that this implementation is causal in the sampled-data sense and still achieves the same sampled constraints $y(h)=1$ and $y(2h)=1$.\n\nFor each case, define the intersample overshoot on $[0,2h]$ as\n$$\nM = \\max_{t \\in [0, 2h]} (y(t) - 1).\n$$\nStarting from $y(0)=0$ and $y'(0)=0$, derive $y(t)$ from first principles by integrating $y''(t)=u(t)$ on each subinterval with the appropriate boundary conditions, enforce the sampled constraints $y(h)=1$ and $y(2h)=1$ to determine $u_{0}$ and $u_{1}$ in each case, and compute $M$.\n\nThen, with $h = 1\\,\\text{s}$ and fractional advance $\\delta = \\frac{h}{2}$, quantify the improvement factor\n$$\n\\rho = \\frac{M_{\\text{baseline}}}{M_{\\text{fractional}}}.\n$$\nExpress your final answer for $\\rho$ as an exact number (no rounding). Do not include units in your final answer.", "solution": "The problem requires a comparative analysis of the intersample overshoot for two different Zero-Order Hold (ZOH) implementations controlling a double integrator plant. The plant dynamics are given by $y''(t) = u(t)$, with initial conditions $y(0)=0$ and $y'(0)=0$. The controller must ensure that the output matches the unit step reference at the sampling instants $t=h$ and $t=2h$, meaning $y(h)=1$ and $y(2h)=1$.\n\nWe will analyze each case separately to find the control inputs $u_0$ and $u_1$, the resulting output trajectory $y(t)$, and the intersample overshoot $M$.\n\n**Case 1: Baseline ZOH**\n\nIn the baseline case, the control input $u(t)$ is piecewise constant on intervals $[kh, (k+1)h)$. Specifically, $u(t) = u_0$ for $t \\in [0, h)$ and $u(t) = u_1$ for $t \\in [h, 2h)$. For $t \\geq 2h$, $u(t)=0$.\n\nFirst, we find the output $y(t)$ by integrating $y''(t)=u(t)$ starting from $y(0)=0$ and $y'(0)=0$.\nFor $t \\in [0, h)$:\n$y''(t) = u_0$\n$y'(t) = \\int_0^t u_0 \\,d\\tau = u_0 t$\n$y(t) = \\int_0^t u_0 \\tau \\,d\\tau = \\frac{1}{2} u_0 t^2$\n\nAt $t=h$, we have the state:\n$y(h) = \\frac{1}{2} u_0 h^2$\n$y'(h) = u_0 h$\n\nFor $t \\in [h, 2h)$:\n$y''(t) = u_1$\n$y'(t) = y'(h) + \\int_h^t u_1 \\,d\\tau = u_0 h + u_1(t-h)$\n$y(t) = y(h) + \\int_h^t y'(\\tau) \\,d\\tau = \\frac{1}{2} u_0 h^2 + \\int_h^t [u_0 h + u_1(\\tau-h)] \\,d\\tau$\n$y(t) = \\frac{1}{2} u_0 h^2 + u_0 h (t-h) + \\frac{1}{2} u_1 (t-h)^2$\n\nNow we apply the sampling constraints $y(h)=1$ and $y(2h)=1$ to find $u_0$ and $u_1$.\nFrom $y(h)=1$:\n$\\frac{1}{2} u_0 h^2 = 1 \\implies u_0 = \\frac{2}{h^2}$\n\nFrom $y(2h)=1$:\n$y(2h) = \\frac{1}{2} u_0 h^2 + u_0 h (2h-h) + \\frac{1}{2} u_1 (2h-h)^2 = 1$\n$1 + u_0 h^2 + \\frac{1}{2} u_1 h^2 = 1$\nUsing $u_0 h^2 = 2$:\n$1 + 2 + \\frac{1}{2} u_1 h^2 = 1 \\implies 3 + \\frac{1}{2} u_1 h^2 = 1 \\implies \\frac{1}{2} u_1 h^2 = -2 \\implies u_1 = -\\frac{4}{h^2}$\n\nThe control inputs are $u_0 = \\frac{2}{h^2}$ and $u_1 = -\\frac{4}{h^2}$.\nNow we find the intersample overshoot $M_{\\text{baseline}} = \\max_{t \\in [0,2h]} (y(t)-1)$.\nOn $[0, h)$, $y(t) = \\frac{1}{2} (\\frac{2}{h^2}) t^2 = \\frac{t^2}{h^2}$. This function increases from $y(0)=0$ to $y(h)=1$. The overshoot is non-positive.\nOn $[h, 2h]$, $y(t) = 1 + u_0 h(t-h) + \\frac{1}{2}u_1(t-h)^2 = 1 + \\frac{2}{h}(t-h) - \\frac{2}{h^2}(t-h)^2$.\nTo find the maximum, we set the derivative to zero:\n$y'(t) = u_0 h + u_1(t-h) = \\frac{2}{h} - \\frac{4}{h^2}(t-h) = 0$\n$\\frac{2}{h} = \\frac{4}{h^2}(t-h) \\implies t-h = \\frac{2h^2}{4h} = \\frac{h}{2}$. The maximum occurs at $t = h + \\frac{h}{2} = \\frac{3h}{2}$.\nThe maximum value is:\n$y(\\frac{3h}{2}) = 1 + \\frac{2}{h}(\\frac{h}{2}) - \\frac{2}{h^2}(\\frac{h}{2})^2 = 1 + 1 - \\frac{2}{h^2}\\frac{h^2}{4} = 2 - \\frac{1}{2} = \\frac{3}{2}$.\nThe maximum overshoot is $M_{\\text{baseline}} = y(\\frac{3h}{2}) - 1 = \\frac{3}{2} - 1 = \\frac{1}{2}$.\n\n**Case 2: Fractional-delay Compensated ZOH**\n\nThe control input is $u(t) = u_0$ for $t \\in [-\\delta, h-\\delta)$, $u(t) = u_1$ for $t \\in [h-\\delta, 2h-\\delta)$, and $u(t)=0$ thereafter. We analyze the system for $t \\geq 0$.\nThe general solution for $y(t)$ given $y(0)=0, y'(0)=0$ is $y(t) = \\int_0^t (t-\\tau)u(\\tau)d\\tau$.\n\nFor $y(h) = 1$:\n$1 = \\int_0^h (h-\\tau) u(\\tau)d\\tau = \\int_0^{h-\\delta} (h-\\tau)u_0 d\\tau + \\int_{h-\\delta}^h (h-\\tau)u_1 d\\tau$\n$1 = u_0 \\left[-\\frac{(h-\\tau)^2}{2}\\right]_0^{h-\\delta} + u_1 \\left[-\\frac{(h-\\tau)^2}{2}\\right]_{h-\\delta}^h$\n$1 = u_0 \\left(-\\frac{\\delta^2}{2} + \\frac{h^2}{2}\\right) + u_1 \\left(0 + \\frac{\\delta^2}{2}\\right) = \\frac{u_0(h^2-\\delta^2)}{2} + \\frac{u_1\\delta^2}{2}$\n$u_0(h^2-\\delta^2) + u_1\\delta^2 = 2$  (Eq. 1)\n\nFor $y(2h) = 1$:\n$1 = \\int_0^{2h} (2h-\\tau) u(\\tau)d\\tau = \\int_0^{h-\\delta} (2h-\\tau)u_0 d\\tau + \\int_{h-\\delta}^{2h-\\delta} (2h-\\tau)u_1 d\\tau + \\int_{2h-\\delta}^{2h} (2h-\\tau) \\cdot 0 d\\tau$\n$1 = u_0 \\left[-\\frac{(2h-\\tau)^2}{2}\\right]_0^{h-\\delta} + u_1 \\left[-\\frac{(2h-\\tau)^2}{2}\\right]_{h-\\delta}^{2h-\\delta}$\n$1 = u_0 \\left(-\\frac{(h+\\delta)^2}{2} + \\frac{(2h)^2}{2}\\right) + u_1 \\left(-\\frac{\\delta^2}{2} + \\frac{(h+\\delta)^2}{2}\\right)$\n$1 = u_0 \\frac{4h^2 - (h^2+2h\\delta+\\delta^2)}{2} + u_1 \\frac{h^2+2h\\delta+\\delta^2-\\delta^2}{2}$\n$u_0(3h^2-2h\\delta-\\delta^2) + u_1(h^2+2h\\delta) = 2$  (Eq. 2)\n\nWe are given $h = 1$ and $\\delta = \\frac{h}{2} = \\frac{1}{2}$. Substituting these values:\n$h^2=1, \\delta^2=1/4$.\nEq. 1 becomes: $u_0(1-\\frac{1}{4}) + u_1(\\frac{1}{4}) = 2 \\implies \\frac{3}{4}u_0 + \\frac{1}{4}u_1 = 2 \\implies 3u_0 + u_1 = 8$.\nEq. 2 becomes: $u_0(3(1)-2(1)(\\frac{1}{2}) - \\frac{1}{4}) + u_1(1+2(1)(\\frac{1}{2})) = 2$\n$u_0(3-1-\\frac{1}{4}) + u_1(1+1) = 2 \\implies \\frac{7}{4}u_0 + 2u_1 = 2 \\implies 7u_0 + 8u_1 = 8$.\n\nSolving the system:\nFrom $3u_0 + u_1 = 8$, we have $u_1 = 8 - 3u_0$.\nSubstituting into the second equation: $7u_0 + 8(8 - 3u_0) = 8 \\implies 7u_0 + 64 - 24u_0 = 8 \\implies -17u_0 = -56 \\implies u_0 = \\frac{56}{17}$.\nThen $u_1 = 8 - 3(\\frac{56}{17}) = \\frac{136 - 168}{17} = -\\frac{32}{17}$.\n\nNow we find the intersample overshoot $M_{\\text{fractional}}$. We must find the maximum of $y(t)$ on $[0, 2]$. The input changes at $t=h-\\delta=1/2$ and $t=2h-\\delta=3/2$.\nOn $[0, 1/2)$, $u(t) = u_0 = 56/17$. $y(t) = \\frac{1}{2}u_0 t^2 = \\frac{28}{17}t^2$. $y(t)$ increases from $y(0)=0$ to $y(1/2) = \\frac{28}{17}(\\frac{1}{4}) = \\frac{7}{17}  1$.\nOn $[1/2, 3/2)$, $u(t) = u_1 = -32/17$. We need to find $y(t)$ on this interval.\nAt $t=1/2$, $y(1/2)=\\frac{7}{17}$ and $y'(1/2) = u_0(1/2) = \\frac{28}{17}$.\nFor $t \\in [1/2, 3/2)$:\n$y'(t) = y'(1/2) + u_1(t-1/2) = \\frac{28}{17} - \\frac{32}{17}(t-1/2)$.\nTo find a maximum, set $y'(t)=0$: $\\frac{28}{17} = \\frac{32}{17}(t-1/2) \\implies t-1/2 = \\frac{28}{32} = \\frac{7}{8}$.\nThe maximum occurs at $t = 1/2 + 7/8 = 11/8 = 1.375$. This is within the interval $[1/2, 3/2)$ and also within the problem domain $[0, 2]$.\nThe value of $y(t)$ at this time is found by integrating $y'(t)$:\n$y(t) = y(1/2) + \\int_{1/2}^t y'(\\tau)d\\tau = \\frac{7}{17} + \\frac{28}{17}(t-1/2) - \\frac{16}{17}(t-1/2)^2$.\nAt $t=11/8$, $t-1/2 = 7/8$:\n$y(\\frac{11}{8}) = \\frac{7}{17} + \\frac{28}{17}(\\frac{7}{8}) - \\frac{16}{17}(\\frac{7}{8})^2 = \\frac{7}{17} + \\frac{7 \\cdot 7}{17 \\cdot 2} - \\frac{16 \\cdot 49}{17 \\cdot 64} = \\frac{7}{17} + \\frac{49}{34} - \\frac{49}{68}$.\n$y(\\frac{11}{8}) = \\frac{28+98-49}{68} = \\frac{77}{68} = 1 + \\frac{9}{68}$.\nOn $[3/2, 2]$, $u(t)=0$. $y'(t)$ is constant.\n$y'(3/2) = y'(1/2) + u_1(3/2-1/2) = \\frac{28}{17} - \\frac{32}{17}(1) = -\\frac{4}{17}$.\nSince $y'(t)0$ on $[3/2, 2]$, the function is decreasing. The maximum value of $y(t)$ on $[0, 2]$ is $y(11/8) = 1 + \\frac{9}{68}$.\nThe overshoot is $M_{\\text{fractional}} = y(\\frac{11}{8}) - 1 = \\frac{9}{68}$.\n\n**Improvement Factor**\n\nFinally, we compute the improvement factor $\\rho$:\n$\\rho = \\frac{M_{\\text{baseline}}}{M_{\\text{fractional}}} = \\frac{1/2}{9/68} = \\frac{1}{2} \\cdot \\frac{68}{9} = \\frac{34}{9}$.", "answer": "$$\\boxed{\\frac{34}{9}}$$", "id": "2743043"}]}