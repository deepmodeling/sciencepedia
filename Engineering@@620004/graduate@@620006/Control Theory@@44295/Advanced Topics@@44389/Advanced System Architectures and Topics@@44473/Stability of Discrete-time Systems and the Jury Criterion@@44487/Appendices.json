{"hands_on_practices": [{"introduction": "This practice explores the fundamental connection between the algebraic conditions of the Jury test and the geometric location of system poles. For the cornerstone case of a second-order system, you will derive the famous \"stability triangle\" constraints from first principles [@problem_id:2747062]. By using the bilinear transformation to relate the discrete-time unit disk to the continuous-time left half-plane, this exercise illuminates why the Jury inequalities work and provides a solid foundation for more complex applications.", "problem": "Consider the monic quadratic polynomial in the complex variable $z$ defined by $p(z)=z^{2}+a_{1}z+a_{2}$ with real parameters $a_{1}$ and $a_{2}$. In discrete-time (DT) stability analysis, a polynomial is called Schur stable if and only if all its roots lie strictly inside the open unit disc $\\{z \\in \\mathbb{C} : |z| < 1\\}$. Starting from this definition and any rigorously justified transformation between the unit disc and the open left half-plane, together with a continuous-time stability test for quadratics that is necessary and sufficient, derive the complete set of linear inequality constraints on the coefficients $a_{1}$ and $a_{2}$ that characterize Schur stability for $p(z)$. Then, interpret each constraint in terms of how it restricts the locations of the poles (roots) relative to the unit circle, explicitly connecting the constraints to the boundary points $z=1$ and $z=-1$ and to the product of the roots.\n\nFinally, suppose the coefficient pair $(a_{1},a_{2})$ is drawn uniformly from the rectangle $\\{(a_{1},a_{2})\\in\\mathbb{R}^{2}:-2\\le a_{1}\\le 2,\\,-1.5\\le a_{2}\\le 1.5\\}$. Compute the exact probability (as a single reduced fraction) that $p(z)$ is Schur stable under this distribution. Provide your final answer as a single number with no units. If you perform any numerical evaluation, give the exact result; no rounding is required.", "solution": "The problem as stated is well-posed, scientifically grounded, and self-contained. It is a standard exercise in the stability analysis of discrete-time linear systems. We proceed with the derivation as requested.\n\nThe polynomial under consideration is $p(z) = z^{2} + a_{1}z + a_{2}$, where $a_{1}$ and $a_{2}$ are real parameters. A polynomial is Schur stable if all its roots lie strictly inside the open unit disc, defined by $\\{z \\in \\mathbb{C} : |z| < 1\\}$.\n\nWe will employ the bilinear transformation, which maps the open left half-plane of the $w$-plane to the open unit disc of the $z$-plane. The transformation is given by:\n$$ z = \\frac{1+w}{1-w} $$\nA polynomial $p(z)$ is Schur stable if and only if the transformed polynomial in $w$, let us call it $q(w)$, has all its roots in the open left half-plane (i.e., is Hurwitz stable). Substituting the transformation into the polynomial equation $p(z)=0$:\n$$ \\left(\\frac{1+w}{1-w}\\right)^{2} + a_{1}\\left(\\frac{1+w}{1-w}\\right) + a_{2} = 0 $$\nTo eliminate the denominator, we multiply the entire equation by $(1-w)^{2}$, assuming $w \\neq 1$ (which corresponds to $z \\to \\infty$, not a root of a monic polynomial).\n$$ (1+w)^{2} + a_{1}(1+w)(1-w) + a_{2}(1-w)^{2} = 0 $$\nExpanding the terms:\n$$ (1 + 2w + w^{2}) + a_{1}(1 - w^{2}) + a_{2}(1 - 2w + w^{2}) = 0 $$\nCollecting coefficients of the powers of $w$:\n$$ w^{2}(1 - a_{1} + a_{2}) + w(2 - 2a_{2}) + (1 + a_{1} + a_{2}) = 0 $$\nLet this transformed polynomial be $q(w) = A w^{2} + B w + C$, where the coefficients are:\n$$ A = 1 - a_{1} + a_{2} $$\n$$ B = 2(1 - a_{2}) $$\n$$ C = 1 + a_{1} + a_{2} $$\nFor a second-degree polynomial with real coefficients to be Hurwitz stable, it is necessary and sufficient that all of its coefficients have the same sign. Since an algebraic equation can be multiplied by $-1$ without changing its roots, we can assume without loss of generality that the coefficients are all positive.\nThe case where all coefficients are negative ($A<0$, $B<0$, $C<0$) requires $B = 2(1-a_2) < 0$, which implies $a_2 > 1$. If $z_1, z_2$ are the roots of $p(z)$, then by Vieta's formulas, their product is $z_1 z_2 = a_2$. If $a_2 > 1$, then $|z_1 z_2| = |a_2| = a_2 > 1$. This implies that at least one root must have a magnitude greater than $1$, violating the condition for Schur stability. Therefore, the case of all-negative coefficients is impossible for a stable system.\nThus, we must have $A>0$, $B>0$, and $C>0$. These strict inequalities are required because if any coefficient is zero, the order of the polynomial is reduced, corresponding to a root of $p(z)$ on the boundary of the unit circle (specifically, $A=0 \\implies p(-1)=0$ and $C=0 \\implies p(1)=0$), which is not strictly stable.\n\nThe set of linear inequality constraints on $a_1$ and $a_2$ is:\n1. $ A = 1 - a_{1} + a_{2} > 0 $\n2. $ B = 2(1 - a_{2}) > 0 \\implies 1 - a_{2} > 0 \\implies a_{2} < 1 $\n3. $ C = 1 + a_{1} + a_{2} > 0 $\n\nThese three inequalities define the region of Schur stability for the given quadratic polynomial.\n\nNext, we interpret these constraints.\nThe coefficients of the transformed polynomial $A$ and $C$ are simply the original polynomial evaluated at $z=-1$ and $z=1$ respectively:\n$A = p(-1) = (-1)^{2} + a_{1}(-1) + a_{2} = 1 - a_{1} + a_{2}$.\n$C = p(1) = 1^{2} + a_{1}(1) + a_{2} = 1 + a_{1} + a_{2}$.\n\n1.  The constraint $1 + a_{1} + a_{2} > 0$ is equivalent to $p(1) > 0$. The point $z=1$ is on the boundary of the unit circle. If there were a real root $z_r \\ge 1$, then since the other root $z'$ must satisfy $z_r z' = a_2$ and $z_r+z'=-a_1$, and the parabola $p(x)$ for real $x$ opens upwards, $p(1)$ would be non-positive. Thus, $p(1) > 0$ prevents any real root from being located at or beyond $z=1$.\n\n2.  The constraint $1 - a_{1} + a_{2} > 0$ is equivalent to $p(-1) > 0$. The point $z=-1$ is also on the boundary of the unit circle. By similar reasoning, if there were a real root $z_r \\le -1$, then $p(-1)$ would be non-positive. Thus, $p(-1) > 0$ prevents any real root from being located at or beyond $z=-1$.\n\n3.  The constraint $a_{2} < 1$. From Vieta's formulas, $a_2$ is the product of the roots, $a_{2} = z_{1}z_{2}$. The condition for Schur stability is $|z_1|<1$ and $|z_2|<1$, which implies $|z_1 z_2| < 1$, or $|a_2| < 1$. This is equivalent to $-1 < a_2 < 1$. The constraint we derived is $a_2 < 1$. The other half, $a_2 > -1$, is a consequence of the first two constraints: summing $1 + a_{1} + a_{2} > 0$ and $1 - a_{1} + a_{2} > 0$ yields $2 + 2a_{2} > 0$, or $a_{2} > -1$. If the roots are complex conjugates, $z_{1,2} = r \\exp(\\pm i\\theta)$, their product is $a_2 = z_1 z_2 = r^2$. The condition $a_2 < 1$ directly translates to $r^2 < 1$, which means the magnitude of the roots $r$ is less than $1$. Therefore, this constraint directly enforces stability for complex roots and is consistent with stability for real roots.\n\nFinally, we compute the probability. The region of Schur stability in the $(a_{1}, a_{2})$-plane is a triangle defined by the inequalities:\n- $a_{2} < 1$\n- $a_{2} > a_{1} - 1$\n- $a_{2} > -a_{1} - 1$\n\nThe vertices of this triangle are found by solving the equalities:\n- $a_2=1$ and $a_2=a_1-1 \\implies 1=a_1-1 \\implies a_1=2$. Vertex: $(2, 1)$.\n- $a_2=1$ and $a_2=-a_1-1 \\implies 1=-a_1-1 \\implies a_1=-2$. Vertex: $(-2, 1)$.\n- $a_2=a_1-1$ and $a_2=-a_1-1 \\implies a_1-1 = -a_1-1 \\implies 2a_1=0 \\implies a_1=0$, which gives $a_2=-1$. Vertex: $(0, -1)$.\nThe stability region is a triangle with vertices at $(-2, 1)$, $(2, 1)$, and $(0, -1)$.\nThe area of this triangle, denoted $\\mathcal{A}_{\\text{stable}}$, is $\\frac{1}{2} \\times \\text{base} \\times \\text{height}$. The base is the segment from $(-2, 1)$ to $(2, 1)$, of length $2 - (-2) = 4$. The height is the vertical distance from the vertex $(0, -1)$ to the line $a_{2}=1$, which is $1 - (-1) = 2$.\n$$ \\mathcal{A}_{\\text{stable}} = \\frac{1}{2} \\times 4 \\times 2 = 4 $$\nThe coefficient pair $(a_1, a_2)$ is drawn uniformly from the rectangle $R = \\{(a_1, a_2) : -2 \\le a_1 \\le 2, -1.5 \\le a_2 \\le 1.5\\}$.\nThe area of this rectangle, $\\mathcal{A}_{\\text{rect}}$, is:\n$$ \\mathcal{A}_{\\text{rect}} = (2 - (-2)) \\times (1.5 - (-1.5)) = 4 \\times 3 = 12 $$\nTo find the probability, we must determine the area of the intersection of the stability triangle and the sampling rectangle. The triangle's $a_1$ coordinates range from $-2$ to $2$, which is fully contained within the rectangle's $a_1$ range of $[-2, 2]$. The triangle's $a_2$ coordinates range from $-1$ to $1$, which is fully contained within the rectangle's $a_2$ range of $[-1.5, 1.5]$. Therefore, the stability triangle lies entirely inside the sampling rectangle.\nThe probability of $p(z)$ being Schur stable is the ratio of the area of the stability region to the total area of the sampling region:\n$$ P(\\text{stable}) = \\frac{\\mathcal{A}_{\\text{stable}}}{\\mathcal{A}_{\\text{rect}}} = \\frac{4}{12} = \\frac{1}{3} $$\nThis is the exact probability.", "answer": "$$ \\boxed{\\frac{1}{3}} $$", "id": "2747062"}, {"introduction": "Moving from foundational derivations to direct application, this exercise addresses a common scenario in control design: determining the range of a parameter that ensures system stability. You will apply the systematic, step-by-step procedure of the Jury stability test to a third-order characteristic polynomial containing a variable gain $k$ [@problem_id:2747037]. This practice reinforces the mechanics of the Jury criterion and demonstrates its power as a purely algebraic tool for analyzing parameterized systems.", "problem": "A discrete-time linear time-invariant system is characterized by the characteristic polynomial $p(z) = z^{3} + z^{2} + (2 - k) z + k$, where $k \\in \\mathbb{R}$. A real-coefficient polynomial is Schur-stable if and only if all of its zeros lie strictly inside the open unit disc $\\{z \\in \\mathbb{C} : |z| < 1\\}$. The Jury stability test provides a necessary and sufficient procedure, built from the fundamental idea of reflecting a polynomial across the unit circle via the map $z \\mapsto 1/z$ and recursively constructing lower-degree polynomials whose coefficients are affine combinations of the original coefficients, to certify Schur stability by testing a finite set of strict inequalities on these coefficients.\n\nStarting from the definition of Schur stability and the construction that underlies the Jury test for degree-$3$ polynomials (polynomial reversal and recursive elimination), derive the complete set of necessary and sufficient strict inequalities specialized to the polynomial $p(z)$ above, and use them to characterize the set of all real values of $k$ for which $p(z)$ is Schur-stable.\n\nLet $\\mathcal{K} \\subset \\mathbb{R}$ denote the set of all such $k$. What is the Lebesgue measure (i.e., the total length) of the set $\\mathcal{K}$? Provide your final answer as a single real number. No rounding is required.", "solution": "The problem requires us to determine the set of real values of the parameter $k$ for which the polynomial $p(z) = z^{3} + z^{2} + (2 - k) z + k$ is Schur-stable, and then to compute the Lebesgue measure of this set. A polynomial is Schur-stable if all its roots lie strictly inside the open unit disk in the complex plane. The derivation must proceed from the fundamental principles underlying the Jury stability test.\n\nLet the general form of the polynomial be $P_n(z) = \\sum_{i=0}^{n} a_i z^i$, with real coefficients and $a_n > 0$. For $p(z)$, we have degree $n=3$ and coefficients $a_3=1$, $a_2=1$, $a_1=2-k$, and $a_0=k$. The leading coefficient $a_3=1$ is positive.\n\nThe necessary and sufficient conditions for Schur stability can be derived from a recursive procedure. The stability of $P_n(z)$ is equivalent to the satisfaction of $|a_0/a_n| < 1$ and the Schur stability of a reduced-degree polynomial $P_{n-1}(z)$. Before applying the recursive step, two preliminary necessary conditions must be checked:\n1. $P_n(1) > 0$\n2. $(-1)^n P_n(-1) > 0$\n\nWe apply these conditions to the given polynomial $p(z)$.\n\nFirst necessary condition: $p(1) > 0$.\n$$p(1) = (1)^3 + (1)^2 + (2-k)(1) + k = 1 + 1 + 2 - k + k = 4$$\nThe inequality $4 > 0$ is always satisfied and imposes no constraint on $k$.\n\nSecond necessary condition: For $n=3$, this is $(-1)^3 p(-1) > 0$, or $p(-1) < 0$.\n$$p(-1) = (-1)^3 + (-1)^2 + (2-k)(-1) + k = -1 + 1 - 2 + k + k = 2k - 2$$\nThe inequality $2k - 2 < 0$ simplifies to $2k < 2$, which gives the constraint $k < 1$.\n\nNow, we proceed to the recursive part of the test, as specified in the problem statement. The fundamental step of the recursion requires that the magnitude of the constant term be strictly less than the magnitude of the leading coefficient.\nFor $p(z)$, this is the condition $|a_0| < a_3$.\n$$|k| < 1$$\nThis is equivalent to the interval $-1 < k < 1$. This condition is more restrictive than $k<1$, so at this stage, the requirement for stability is $k \\in (-1, 1)$.\n\nThe next step is to construct the reduced-degree polynomial and check its stability. If $p(z)$ is Schur-stable, then the polynomial $p_2(z)$ derived from the following construction must also be Schur-stable. Let $p^*(z)$ be the reversed polynomial:\n$$p^*(z) = z^3 p(1/z) = z^3( (1/z)^3 + (1/z)^2 + (2-k)(1/z) + k ) = 1 + z + (2-k)z^2 + kz^3$$\nThe recursive-step parameter is $\\alpha_3 = a_0/a_3 = k/1 = k$. The reduced polynomial $p_2(z)$ is given by:\n$$p_2(z) = \\frac{1}{z} (p(z) - \\alpha_3 p^*(z))$$\nSubstituting the expressions for $p(z)$, $p^*(z)$, and $\\alpha_3=k$:\n$$p(z) - k p^*(z) = (z^3 + z^2 + (2-k)z + k) - k(kz^3 + (2-k)z^2 + z + 1)$$\n$$= (1-k^2)z^3 + (1 - k(2-k))z^2 + (2-k - k)z + (k-k)$$\n$$= (1-k^2)z^3 + (1 - 2k + k^2)z^2 + (2-2k)z$$\n$$= (1-k^2)z^3 + (1-k)^2 z^2 + 2(1-k)z$$\nDividing by $z$ yields the second-degree polynomial $p_2(z)$:\n$$p_2(z) = (1-k^2)z^2 + (1-k)^2 z + 2(1-k)$$\nLet the coefficients of this quadratic be $b_2 = 1-k^2$, $b_1 = (1-k)^2$, and $b_0 = 2(1-k)$. For $p_2(z)$ to be Schur-stable, its own set of stability conditions must be met. The leading coefficient $b_2 = 1-k^2$ must be positive, which means $k^2 < 1$, or $|k|<1$. This is consistent with the condition we already have.\n\nThe Schur stability conditions for a quadratic polynomial $b_2 z^2 + b_1 z + b_0$ with $b_2 > 0$ are:\n1. $p_2(1) > 0 \\implies b_2+b_1+b_0 > 0$\n2. $p_2(-1) > 0 \\implies b_2-b_1+b_0 > 0$\n3. $|b_0| < b_2$\n\nLet us check these for $p_2(z)$:\n1. $b_2+b_1+b_0 = (1-k^2) + (1-k)^2 + 2(1-k) = (1-k)(1+k) + (1-k)(1-k) + 2(1-k) = (1-k)[(1+k) + (1-k) + 2] = 4(1-k)$.\nSince we require $|k|<1$, it follows that $1-k > 0$, so $4(1-k) > 0$ is satisfied.\n\n2. $b_2-b_1+b_0 = (1-k^2) - (1-k)^2 + 2(1-k) = (1-k)(1+k) - (1-k)(1-k) + 2(1-k) = (1-k)[(1+k) - (1-k) + 2] = (1-k)(2k+2) = 2(1-k^2)$.\nSince $|k|<1$, it follows that $1-k^2 > 0$, so $2(1-k^2) > 0$ is satisfied.\n\n3. $|b_0| < b_2$.\n$$|2(1-k)| < 1-k^2$$\nGiven our working constraint $|k|<1$, the term $1-k$ is strictly positive. So, $|2(1-k)| = 2(1-k)$. The inequality is:\n$$2(1-k) < 1-k^2$$\nWe can rewrite the right side as $(1-k)(1+k)$:\n$$2(1-k) < (1-k)(1+k)$$\nSince $1-k > 0$, we can divide both sides by $(1-k)$ without changing the direction of the inequality:\n$$2 < 1+k$$\n$$k > 1$$\n\nFor the original polynomial $p(z)$ to be Schur-stable, all derived conditions on $k$ must hold simultaneously. We have accumulated the following set of strict inequalities:\na) From the $|a_0| < a_3$ condition for $p(z)$: $-1 < k < 1$.\nb) From the $|b_0| < b_2$ condition for $p_2(z)$: $k > 1$.\n\nThe solution for $k$ must lie in the intersection of the sets defined by these two conditions:\n$$\\mathcal{K} = \\{k \\in \\mathbb{R} \\mid (-1 < k < 1) \\land (k > 1) \\}$$\nThe intersection of the open interval $(-1, 1)$ and the open interval $(1, \\infty)$ is the empty set.\n$$\\mathcal{K} = \\emptyset$$\nTherefore, there are no real values of $k$ for which the given polynomial is Schur-stable.\n\nThe final step is to find the Lebesgue measure of the set $\\mathcal{K}$. The Lebesgue measure of the empty set is, by definition, zero.", "answer": "$$\\boxed{0}$$", "id": "2747037"}, {"introduction": "The ultimate test of understanding an algorithm is to implement it. This final practice challenges you to synthesize your knowledge by developing a robust, functional Jury stability test in code from first principles [@problem_id:2747031]. By testing your implementation against a carefully designed suite of polynomials—including stable, unstable, marginal, and numerically sensitive cases—you will directly confront the practical challenges of computational stability analysis and bridge the gap between theory and application.", "problem": "Design and implement a program that, for a given suite of real-coefficient monic or non-monic polynomials in the complex variable $z$, decides strict Schur stability of the corresponding discrete-time linear time-invariant characteristic polynomials using a principle-based implementation of the Jury stability test. The problem must be approached from first principles: start from the definition that a discrete-time linear time-invariant system is asymptotically stable if and only if all roots of its characteristic polynomial lie strictly inside the open unit disc $\\{z \\in \\mathbb{C} : |z| < 1\\}$. Your implementation must realize a root-free decision procedure equivalent to the Jury criterion, based on a mathematically justified recursion that preserves the equivalence to the root-location definition. Do not rely on explicit root finding.\n\nYou must produce a single-line output that aggregates the decisions for all provided test polynomials in the exact format specified below.\n\nDefinitions and requirements:\n- A polynomial $p(z) = a_0 z^n + a_1 z^{n-1} + \\cdots + a_n$ with real coefficients is strictly Schur-stable if and only if all its roots satisfy $|z_i| < 1$.\n- Marginally stable cases, namely those with at least one root on the unit circle $\\{|z| = 1\\}$, must be classified as not strictly Schur-stable.\n- Nearly unstable but strictly stable cases (for example, roots with modulus very close to $1$ such as $|z_i| = 0.9999$) must be correctly classified as strictly Schur-stable.\n- Your algorithm must be numerically robust. Use a small tolerance $\\varepsilon$ for comparisons with unity in intermediate conditions. Any equality with $1$ within $\\varepsilon$ must be treated as not strictly Schur-stable, while any strict inequality holding by at least $\\varepsilon$ must be treated in favor of stability.\n\nTest suite:\nEvaluate the following list of polynomials, each given as its coefficient vector in descending powers of $z$. For example, the list $[a_0,a_1,\\ldots,a_n]$ represents $a_0 z^n + a_1 z^{n-1} + \\cdots + a_n$.\n\nProvide decisions for the following $12$ polynomials:\n- Case $1$ (stable, first order): $[1,-0.5]$.\n- Case $2$ (marginal, first order): $[1,-1.0]$.\n- Case $3$ (unstable, first order): $[1,-1.001]$.\n- Case $4$ (nearly unstable but stable, first order): $[1,-0.9999]$.\n- Case $5$ (stable, second order): $[1,-0.8,0.15]$.\n- Case $6$ (unstable, second order): $[1,-1.7,0.6]$.\n- Case $7$ (marginal, second order with a real root at $1$): $[1,-1.5,0.5]$.\n- Case $8$ (marginal, second order with a complex-conjugate unit-circle pair at angle $0.7$ radians): $[1,-1.529684374568977,1.0]$.\n- Case $9$ (stable, third order: complex-conjugate pair of radius $0.8$ at angle $0.7$ radians and a real root at $0.3$): $[1,-1.5237474996551816,1.0071242498965545,-0.192]$.\n- Case $10$ (nearly unstable but stable, third order: complex-conjugate pair of radius $0.999$ at angle $1.0$ radian and a real root at $0.7$): $[1,-1.7795240071245434,1.7536678049871803,-0.6986007]$.\n- Case $11$ (stable, non-monic second order scaling test): $[2,-1.6,0.3]$.\n- Case $12$ (marginal with repeated unit root): $[1,-2.0,1.0]$.\n\nOutput specification:\n- For each polynomial, output a boolean indicating strict Schur stability: output $\\mathrm{True}$ if and only if all roots satisfy $|z_i| < 1$; otherwise output $\\mathrm{False}$ (this includes marginal and unstable cases).\n- Aggregate all $12$ boolean results into a single list, ordered as the cases are listed above.\n- Your program should produce a single line of output containing exactly this list, with elements comma-separated and enclosed in square brackets, for example: $[ \\mathrm{True}, \\mathrm{False} ]$. There must be no additional whitespace beyond commas, and no extra text.\n\nAngle units: All angles mentioned above, where applicable, are in radians.\n\nNumerical units: No physical units are involved; all quantities are dimensionless.\n\nYour implementation must be self-contained and must not read any input. It must compute and print the final boolean list as specified above.", "solution": "The problem requires the implementation of a decision procedure for the strict Schur stability of polynomials with real coefficients. A polynomial is defined as strictly Schur-stable if all its roots lie inside the open unit disk in the complex plane. This is a fundamental concept in the stability analysis of discrete-time linear time-invariant (LTI) systems. The procedure must be based on first principles, starting from the definition of stability, and must be equivalent to the Jury stability test.\n\n**Principle and Theoretical Foundation**\n\nA discrete-time LTI system is asymptotically stable if, and only if, all the roots $z_i$ of its characteristic polynomial, $P(z) = a_0 z^n + a_1 z^{n-1} + \\dots + a_n$, satisfy the condition $|z_i| < 1$. Direct computation of roots is numerically ill-conditioned and computationally expensive. Algebraic stability criteria, such as the Jury test, provide a robust alternative by examining the coefficients of the polynomial directly.\n\nThe Jury test is a specialization of the Schur-Cohn test for polynomials with real coefficients. Its theoretical underpinnings lie in complex analysis, particularly Rouché's theorem, which allows for counting zeros of an analytic function inside a contour.\n\n**Derivation of the Recursive Algorithm**\n\nLet $P_n(z) = \\sum_{i=0}^{n} a_i z^{n-i}$ be a polynomial of degree $n$ with real coefficients. We can assume, without loss of generality, that the leading coefficient $a_0 > 0$. If $a_0 < 0$, we can analyze $-P_n(z)$, which has the same roots. If $a_0 = 0$, the degree of the polynomial is less than $n$.\n\nThe core of the stability test is a recursive argument that reduces the degree of the polynomial at each step, while preserving the stability property.\n\n1.  **Fundamental Condition**: A necessary condition for all roots to satisfy $|z_i| < 1$ is that the magnitude of the product of the roots must be less than one. From Vieta's formulas, the product of the roots is given by $\\prod_{i=1}^n z_i = (-1)^n \\frac{a_n}{a_0}$. Taking the magnitude, $|\\prod z_i| = \\prod |z_i| = |\\frac{a_n}{a_0}|$. If all $|z_i| < 1$, then it necessarily follows that $|\\frac{a_n}{a_0}| < 1$. Given our assumption $a_0 > 0$, this simplifies to $|a_n| < a_0$. If this condition is violated ($|a_n| \\ge a_0$), at least one root must lie on or outside the unit circle, and the polynomial is not strictly Schur-stable.\n\n2.  **Recursive Step**: If the condition $|a_n| < a_0$ holds, we proceed by constructing a polynomial of a lower degree, $P_{n-1}(z)$, whose stability is equivalent to that of $P_n(z)$. This is accomplished using Rouché's theorem. Let us define the \"reversed\" polynomial $P_n^*(z) = z^n P_n(1/z) = \\sum_{i=0}^{n} a_{n-i} z^{n-i}$.\n    On the unit circle, where $|z|=1$, we have $|P_n(z)| = |P_n^*(z)|$. The condition $|a_n| < a_0$ implies $|a_n P_n^*(z)| < |a_0 P_n(z)|$ on $|z|=1$, provided $P_n(z)$ has no roots on the unit circle.\n    By Rouché's theorem, the polynomial $Q(z) = a_0 P_n(z) - a_n P_n^*(z)$ has the same number of roots inside the unit disk as $a_0 P_n(z)$, and thus the same as $P_n(z)$.\n\n    The coefficients of $Q(z)$ are given by $\\sum_{i=0}^n (a_0 a_i - a_n a_{n-i}) z^{n-i}$. The constant term is $a_0 a_n - a_n a_0 = 0$, which means $Q(z)$ has a root at $z=0$. We can therefore define a new polynomial of degree $n-1$:\n    $$P_{n-1}(z) = \\frac{1}{z} Q(z) = \\frac{1}{z} (a_0 P_n(z) - a_n P_n^*(z))$$\n    The stability of $P_n(z)$ is now equivalent to the stability of $P_{n-1}(z)$, provided the initial condition $|a_n| < a_0$ holds and $P_n(z)$ has no roots on the unit circle.\n\n3.  **The Algorithm**: The overall algorithm is a recursive application of this logic.\n    Let $P^{(k)}(z) = \\sum_{i=0}^k a_i^{(k)} z^{k-i}$ be the polynomial at step $k$, with $P^{(n)}(z) = P_n(z)$.\n    For each step $k = n, n-1, \\dots, 2$:\n    a. Check the condition $|a_k^{(k)}| < a_0^{(k)}$. If it fails, the polynomial is not stable. The leading coefficient $a_0^{(k)}$ can be shown to remain positive throughout the process if it starts positive.\n    b. Construct the next polynomial $P^{(k-1)}(z)$. Its coefficients $a_i^{(k-1)}$ are given by the relation:\n       $$a_i^{(k-1)} = a_i^{(k)} - \\left(\\frac{a_k^{(k)}}{a_0^{(k)}}\\right) a_{k-i}^{(k)}, \\quad \\text{for } i=0, \\dots, k-1.$$\n    The recursion terminates when we reach a first-degree polynomial, $P^{(1)}(z) = a_0^{(1)} z + a_1^{(1)}$. Its single root is $z = -a_1^{(1)} / a_0^{(1)}$. For stability, we require $|-a_1^{(1)}/a_0^{(1)}| < 1$, which is equivalent to $|a_1^{(1)}| < a_0^{(1)}$.\n\n4.  **Singular and Preliminary Cases**: The recursion is valid as long as $|a_k^{(k)}| \\neq a_0^{(k)}$ at any step. If equality holds, this indicates roots on the unit circle, meaning the system is not strictly stable. For numerical robustness, we check $|a_k^{(k)}| \\ge a_0^{(k)}$ using a small tolerance $\\varepsilon$. Additionally, two necessary conditions for stability offer an efficient way to detect certain non-stable cases:\n    - $P(1) > 0$\n    - $(-1)^n P(-1) > 0$\n    Failure to meet these conditions implies instability. For example, if $P(1)=0$, there is a root at $z=1$. If $P(1)<0$ (for $a_0>0$), there must be an odd number of real roots greater than $1$. Both cases violate strict Schur stability. Our implementation will use these checks for fast rejection.\n\n**Implementation Summary**\n\nThe algorithm is implemented as an iterative procedure:\n1.  Normalize the input coefficient vector so that the leading coefficient is positive.\n2.  Check the two preliminary conditions: $P(1) > 0$ and $(-1)^n P(-1) > 0$.\n3.  Iteratively reduce the degree of the polynomial from $n$ down to $1$. At each step of degree $k$, test the condition $|a_k| < a_0$. If it passes, compute the coefficients of the new polynomial of degree $k-1$.\n4.  If any test fails, terminate and return `False`.\n5.  If the loop completes, all conditions were met, and the polynomial is strictly Schur-stable. Return `True`.\nA small tolerance $\\varepsilon$ is used for all floating-point comparisons to handle numerical precision issues and correctly classify marginal cases.", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the Schur stability problem for a suite of test polynomials using\n    a principle-based implementation of the Jury stability test.\n    \"\"\"\n\n    test_cases = [\n        # Case 1 (stable, first order): [1, -0.5]\n        [1, -0.5],\n        # Case 2 (marginal, first order): [1, -1.0]\n        [1, -1.0],\n        # Case 3 (unstable, first order): [1, -1.001]\n        [1, -1.001],\n        # Case 4 (nearly unstable but stable, first order): [1, -0.9999]\n        [1, -0.9999],\n        # Case 5 (stable, second order): [1, -0.8, 0.15]\n        [1, -0.8, 0.15],\n        # Case 6 (unstable, second order): [1, -1.7, 0.6]\n        [1, -1.7, 0.6],\n        # Case 7 (marginal, second order with a real root at 1): [1, -1.5, 0.5]\n        [1, -1.5, 0.5],\n        # Case 8 (marginal, second order with a complex-conjugate unit-circle pair): [1, -1.529684374568977, 1.0]\n        [1, -1.529684374568977, 1.0],\n        # Case 9 (stable, third order): [1, -1.5237474996551816, 1.0071242498965545, -0.192]\n        [1, -1.5237474996551816, 1.0071242498965545, -0.192],\n        # Case 10 (nearly unstable but stable, third order): [1, -1.7795240071245434, 1.7536678049871803, -0.6986007]\n        [1, -1.7795240071245434, 1.7536678049871803, -0.6986007],\n        # Case 11 (stable, non-monic second order): [2, -1.6, 0.3]\n        [2, -1.6, 0.3],\n        # Case 12 (marginal with repeated unit root): [1, -2.0, 1.0]\n        [1, -2.0, 1.0],\n    ]\n\n    def is_schur_stable(coeffs):\n        \"\"\"\n        Determines if a polynomial is strictly Schur-stable using the Jury test.\n\n        Args:\n            coeffs: A list or numpy array of polynomial coefficients in descending powers of z.\n\n        Returns:\n            True if all roots are strictly inside the unit circle, False otherwise.\n        \"\"\"\n        # A small tolerance for floating-point comparisons.\n        EPSILON = 1e-9\n\n        # Convert to a NumPy array for vectorized operations.\n        p = np.array(coeffs, dtype=np.float64)\n\n        # 1. Preprocessing: Handle leading zeros to find the true degree.\n        # The problem statement implies a_0 is the coeff of z^n, but good practice is to be robust.\n        nonzero_indices = np.where(np.abs(p) > EPSILON)[0]\n        if len(nonzero_indices) == 0: # Zero polynomial\n            return True # Or could be considered ill-defined, but has no roots.\n        \n        p = p[nonzero_indices[0]:]\n        n = len(p) - 1\n\n        # Degree 0 polynomial (a non-zero constant) has no roots, so it is stable.\n        if n < 1:\n            return True\n\n        # 2. Normalization: Ensure leading coefficient is positive. This does not alter the roots.\n        if p[0] < 0:\n            p = -p\n\n        # 3. Preliminary Necessary Conditions (Fast Fail).\n        # Condition 1: P(1) > 0.\n        # If P(1) <= 0, there is at least one root on or outside the unit circle at z>=1.\n        p_at_1 = np.sum(p)\n        if p_at_1 <= EPSILON:\n            return False\n\n        # Condition 2: (-1)^n * P(-1) > 0.\n        # This checks for roots on or outside the unit circle at z<=-1.\n        p_at_minus_1 = np.sum(p * ((-1)**np.arange(n, -1, -1)))\n        if ((-1)**n) * p_at_minus_1 <= EPSILON:\n            return False\n\n        # 4. Main Recursive Test (implemented iteratively).\n        current_coeffs = p.copy()\n        for k in range(n, 1, -1):\n            # The polynomial at this iteration has degree k.\n            \n            # Core Jury/Schur-Cohn condition: |a_k| < a_0.\n            c0 = current_coeffs[0]\n            ck = current_coeffs[k]\n\n            # If |a_k| >= a_0, the polynomial is not strictly stable.\n            # This is a singular case in the test and detects roots on or outside the unit circle.\n            if abs(ck) >= c0 - EPSILON:\n                return False\n\n            # Form the next polynomial of degree k-1 using the Schur-Cohn reduction.\n            alpha = ck / c0\n            \n            # The coefficients of the reduced polynomial of degree k-1 are computed.\n            next_coeffs = np.zeros(k) # k elements for degree k-1\n            for j in range(k):\n                next_coeffs[j] = current_coeffs[j] - alpha * current_coeffs[k - j]\n            \n            current_coeffs = next_coeffs\n\n        # 5. Final Condition for the resulting degree-1 polynomial.\n        # After the loop, current_coeffs represents q_0*z + q_1.\n        # Stability requires the root z = -q1/q0 to satisfy |z|<1, hence |q1| < |q0|.\n        # By construction, q0 is positive.\n        q0 = current_coeffs[0]\n        q1 = current_coeffs[1]\n        \n        if abs(q1) >= q0 - EPSILON:\n            return False\n\n        # If all checks pass, the polynomial is strictly Schur-stable.\n        return True\n\n    results = [is_schur_stable(case) for case in test_cases]\n    \n    # Format the output as a single-line comma-separated list of booleans.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2747031"}]}