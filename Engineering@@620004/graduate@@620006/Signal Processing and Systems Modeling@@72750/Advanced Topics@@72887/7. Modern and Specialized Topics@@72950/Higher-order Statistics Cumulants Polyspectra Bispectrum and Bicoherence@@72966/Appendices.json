{"hands_on_practices": [{"introduction": "Before we can identify complex signal structures, we must first understand the statistical landscape of pure randomness. This foundational exercise has you derive the trispectrum for a white, independent and identically distributed (i.i.d.) noise sequence [@problem_id:2876232]. By demonstrating that its trispectrum is constant, or \"flat,\" you will establish the essential baseline for higher-order spectral analysis, building the intuition that peaks and variations in a polyspectrum are the tell-tale signs of non-Gaussianity or non-linear interactions within a signal.", "problem": "Consider a discrete-time, zero-mean, strictly stationary, white sequence $\\{x[n]\\}_{n\\in\\mathbb{Z}}$ that is independent and identically distributed (i.i.d.). Assume that the one-dimensional cumulants exist and are finite up to order $4$, with second-order cumulant $\\kappa_{2}=\\mathbb{E}\\{x[n]^{2}\\}>0$, third-order cumulant $\\kappa_{3}$ possibly nonzero, and fourth-order cumulant $\\kappa_{4}=\\mathrm{cum}\\{x[n],x[n],x[n],x[n]\\}\\neq 0$. Define the fourth-order joint cumulant sequence\n$$\nc_{4}(\\tau_{1},\\tau_{2},\\tau_{3}) \\triangleq \\mathrm{cum}\\{x[n],\\,x[n+\\tau_{1}],\\,x[n+\\tau_{2}],\\,x[n+\\tau_{3}]\\},\n$$\nwhich depends only on the lags $(\\tau_{1},\\tau_{2},\\tau_{3})\\in\\mathbb{Z}^{3}$ by stationarity. The trispectrum $T_{x}(\\omega_{1},\\omega_{2},\\omega_{3})$ is the three-dimensional Discrete-Time Fourier Transform (DTFT) of $c_{4}(\\tau_{1},\\tau_{2},\\tau_{3})$,\n$$\nT_{x}(\\omega_{1},\\omega_{2},\\omega_{3}) \\triangleq \\sum_{\\tau_{1}=-\\infty}^{\\infty}\\sum_{\\tau_{2}=-\\infty}^{\\infty}\\sum_{\\tau_{3}=-\\infty}^{\\infty} c_{4}(\\tau_{1},\\tau_{2},\\tau_{3})\\,\\exp\\!\\big(-j(\\omega_{1}\\tau_{1}+\\omega_{2}\\tau_{2}+\\omega_{3}\\tau_{3})\\big),\n$$\nwith angular frequencies $(\\omega_{1},\\omega_{2},\\omega_{3})\\in[-\\pi,\\pi]^{3}$ measured in radians per sample.\n\nUsing only fundamental properties of cumulants and independence, derive $c_{4}(\\tau_{1},\\tau_{2},\\tau_{3})$ for this white i.i.d. sequence, compute $T_{x}(\\omega_{1},\\omega_{2},\\omega_{3})$ explicitly, and confirm its dependence (or independence) on $(\\omega_{1},\\omega_{2},\\omega_{3})$. Express your final answer as a single closed-form analytic expression for $T_{x}(\\omega_{1},\\omega_{2},\\omega_{3})$. No numerical rounding is required.", "solution": "The problem as stated is valid. It is scientifically grounded, well-posed, objective, and internally consistent. It presents a standard task in the analysis of higher-order statistics for a fundamental stochastic process. We shall proceed with the derivation.\n\nThe objective is to derive the fourth-order joint cumulant sequence, $c_{4}(\\tau_{1},\\tau_{2},\\tau_{3})$, and subsequently compute its three-dimensional Discrete-Time Fourier Transform (DTFT), the trispectrum $T_{x}(\\omega_{1},\\omega_{2},\\omega_{3})$, for a given discrete-time, zero-mean, i.i.d. random sequence $\\{x[n]\\}_{n\\in\\mathbb{Z}}$.\n\nThe fundamental property of cumulants that governs this problem is their behavior with respect to statistical independence. For a set of random variables $\\{X_{1}, X_{2}, \\dots, X_{k}\\}$, their joint cumulant, $\\mathrm{cum}\\{X_{1}, X_{2}, \\dots, X_{k}\\}$, is zero if the set of variables can be partitioned into two or more subsets that are statistically independent of each other.\n\nThe sequence $\\{x[n]\\}$ is defined as independent and identically distributed (i.i.d.). This means that any two random variables $x[n_{1}]$ and $x[n_{2}]$ from the sequence are statistically independent if and only if their time indices are different, i.e., $n_{1} \\neq n_{2}$.\n\nWe are asked to find the fourth-order cumulant sequence, defined as:\n$$\nc_{4}(\\tau_{1},\\tau_{2},\\tau_{3}) = \\mathrm{cum}\\{x[n],\\,x[n+\\tau_{1}],\\,x[n+\\tau_{2}],\\,x[n+\\tau_{3}]\\}\n$$\nThe four random variables in the argument of the cumulant are taken at time indices $n$, $n+\\tau_{1}$, $n+\\tau_{2}$, and $n+\\tau_{3}$. Let us analyze the conditions under which this cumulant can be non-zero.\n\nBased on the independence property of the i.i.d. sequence, if any one of the time indices is distinct from all the others, the corresponding random variable is independent of the remaining three variables. For example, if $n+\\tau_{1}$ is not equal to $n$, $n+\\tau_{2}$, or $n+\\tau_{3}$, then the random variable $x[n+\\tau_{1}]$ is independent of the set $\\{x[n], x[n+\\tau_{2}], x[n+\\tau_{3}]\\}$. In this situation, the set of four random variables can be partitioned into two independent subsets: $\\{x[n+\\tau_{1}]\\}$ and $\\{x[n], x[n+\\tau_{2}], x[n+\\tau_{3}]\\}$. According to the fundamental property of cumulants, their joint cumulant must be zero.\n\nThis logic extends to any partitioning. The only way to prevent such a partition into independent subsets for an i.i.d. sequence is if all the random variables are, in fact, the same variable. This occurs only when all their time indices are identical.\nTherefore, for $c_{4}(\\tau_{1},\\tau_{2},\\tau_{3})$ to be non-zero, it is necessary that:\n$$\nn = n+\\tau_{1} = n+\\tau_{2} = n+\\tau_{3}\n$$\nThis system of equations yields a unique solution for the lags:\n$$\n\\tau_{1} = 0, \\quad \\tau_{2} = 0, \\quad \\tau_{3} = 0\n$$\nFor any other combination of lags $(\\tau_{1},\\tau_{2},\\tau_{3})$, at least two distinct time indices will exist, allowing for a partition into independent subsets, which forces the cumulant to be zero.\n\nWhen $\\tau_{1}=\\tau_{2}=\\tau_{3}=0$, the cumulant becomes:\n$$\nc_{4}(0,0,0) = \\mathrm{cum}\\{x[n], x[n], x[n], x[n]\\}\n$$\nThis is the fourth-order cumulant of a single random variable from the stationary sequence, which is given in the problem statement as $\\kappa_{4}$. It is stated that $\\kappa_{4} \\neq 0$.\n\nThus, the fourth-order cumulant sequence $c_{4}(\\tau_{1},\\tau_{2},\\tau_{3})$ is non-zero only at the origin of the lag space $(\\tau_{1},\\tau_{2},\\tau_{3}) = (0,0,0)$. This can be formally expressed using the three-dimensional discrete-time impulse (or Kronecker delta) function:\n$$\nc_{4}(\\tau_{1},\\tau_{2},\\tau_{3}) = \\kappa_{4} \\cdot \\delta[\\tau_{1}] \\delta[\\tau_{2}] \\delta[\\tau_{3}]\n$$\nwhere $\\delta[k] = 1$ for $k=0$ and $\\delta[k] = 0$ for $k \\neq 0$.\n\nNow, we compute the trispectrum $T_{x}(\\omega_{1},\\omega_{2},\\omega_{3})$, which is the DTFT of $c_{4}(\\tau_{1},\\tau_{2},\\tau_{3})$:\n$$\nT_{x}(\\omega_{1},\\omega_{2},\\omega_{3}) = \\sum_{\\tau_{1}=-\\infty}^{\\infty}\\sum_{\\tau_{2}=-\\infty}^{\\infty}\\sum_{\\tau_{3}=-\\infty}^{\\infty} c_{4}(\\tau_{1},\\tau_{2},\\tau_{3})\\,\\exp\\!\\big(-j(\\omega_{1}\\tau_{1}+\\omega_{2}\\tau_{2}+\\omega_{3}\\tau_{3})\\big)\n$$\nSubstituting our expression for $c_{4}(\\tau_{1},\\tau_{2},\\tau_{3})$:\n$$\nT_{x}(\\omega_{1},\\omega_{2},\\omega_{3}) = \\sum_{\\tau_{1}=-\\infty}^{\\infty}\\sum_{\\tau_{2}=-\\infty}^{\\infty}\\sum_{\\tau_{3}=-\\infty}^{\\infty} (\\kappa_{4} \\delta[\\tau_{1}] \\delta[\\tau_{2}] \\delta[\\tau_{3}])\\,\\exp\\!\\big(-j(\\omega_{1}\\tau_{1}+\\omega_{2}\\tau_{2}+\\omega_{3}\\tau_{3})\\big)\n$$\nThe constant $\\kappa_{4}$ can be factored out of the summation:\n$$\nT_{x}(\\omega_{1},\\omega_{2},\\omega_{3}) = \\kappa_{4} \\sum_{\\tau_{1}=-\\infty}^{\\infty}\\sum_{\\tau_{2}=-\\infty}^{\\infty}\\sum_{\\tau_{3}=-\\infty}^{\\infty} \\delta[\\tau_{1}] \\delta[\\tau_{2}] \\delta[\\tau_{3}]\\,\\exp\\!\\big(-j(\\omega_{1}\\tau_{1}+\\omega_{2}\\tau_{2}+\\omega_{3}\\tau_{3})\\big)\n$$\nWe use the sifting property of the Kronecker delta function, which states that $\\sum_{k=-\\infty}^{\\infty} f[k]\\delta[k] = f[0]$. The summand is non-zero only when $\\tau_{1}=0$, $\\tau_{2}=0$, and $\\tau_{3}=0$. Evaluating the expression at this single point:\n$$\nT_{x}(\\omega_{1},\\omega_{2},\\omega_{3}) = \\kappa_{4} \\cdot \\exp\\!\\big(-j(\\omega_{1}\\cdot 0 + \\omega_{2}\\cdot 0 + \\omega_{3}\\cdot 0)\\big) = \\kappa_{4} \\cdot \\exp(0) = \\kappa_{4} \\cdot 1\n$$\nThe result is:\n$$\nT_{x}(\\omega_{1},\\omega_{2},\\omega_{3}) = \\kappa_{4}\n$$\nThis result demonstrates that the trispectrum of a zero-mean, i.i.d. sequence is a constant value equal to the fourth-order cumulant, $\\kappa_{4}$, of the underlying distribution. Consequently, the trispectrum is entirely independent of the frequencies $(\\omega_{1},\\omega_{2},\\omega_{3})$. This is the higher-order equivalent of the \"whiteness\" property, where the power spectrum (second-order spectrum) is also flat. For an i.i.d. process, all polyspectra are constant.", "answer": "$$\n\\boxed{\\kappa_{4}}\n$$", "id": "2876232"}, {"introduction": "Moving from infinite-duration theoretical processes to finite-length data records introduces fundamental challenges in estimation. This practice focuses on the critical first step in empirical polyspectral analysis: estimating the third-order cumulant sequence from a limited number of samples [@problem_id:2876208]. You will derive and compare the performance of both biased and unbiased estimators, providing direct insight into the classic bias-variance tradeoff and its implications for the accuracy of your results.", "problem": "Consider a real-valued, discrete-time, strictly stationary process $\\{x[n]\\}$ with zero mean and finite moments, observed over a finite record $\\{x[1],x[2],\\dots,x[N]\\}$ of length $N$. The third-order cumulant at lags $(\\tau_{1},\\tau_{2})$ is defined by $c_{3}(\\tau_{1},\\tau_{2})$, and for a zero-mean process it equals the third-order joint moment $c_{3}(\\tau_{1},\\tau_{2}) = \\mathbb{E}\\{x[n]\\,x[n+\\tau_{1}]\\,x[n+\\tau_{2}]\\}$. From this finite record, form the conventional finite-sample estimators for $c_{3}(\\tau_{1},\\tau_{2})$ at fixed integer lags $\\tau_{1}$ and $\\tau_{2}$ as follows. Let $L \\triangleq \\max(0,\\tau_{1},\\tau_{2})$ and define\n- the unbiased estimator $\\hat{c}_{3}^{\\,\\mathrm{u}}(\\tau_{1},\\tau_{2})$ as the average of all available triple products with normalization by the number of available terms, and\n- the classically biased estimator $\\hat{c}_{3}^{\\,\\mathrm{b}}(\\tau_{1},\\tau_{2})$ as the same finite sum but normalized by $N$.\n\nDerive explicit expressions for $\\hat{c}_{3}^{\\,\\mathrm{u}}(\\tau_{1},\\tau_{2})$ and $\\hat{c}_{3}^{\\,\\mathrm{b}}(\\tau_{1},\\tau_{2})$ in terms of the record samples and the lags.\n\nThen specialize to the case where $\\{x[n]\\}$ are independent and identically distributed (i.i.d.), zero-mean with variance $\\sigma^{2}$, and suppose $\\tau_{2}>\\tau_{1}\\geq 1$ so that all three factors in each triple product are distinct and nonoverlapping in time. Assume $N>\\tau_{2}$ so that at least one triple is available. Using only the definitions of stationarity, independence, and variance, compute the mean-squared error (MSE) $\\mathbb{E}\\{(\\hat{c}-c_{3})^{2}\\}$ of both estimators at $(\\tau_{1},\\tau_{2})$ and compare them.\n\nGive your final answer as a single, closed-form analytic expression for the ratio\n$$\nR(N,\\tau_{1},\\tau_{2}) \\triangleq \\frac{\\mathrm{MSE}\\big(\\hat{c}_{3}^{\\,\\mathrm{b}}(\\tau_{1},\\tau_{2})\\big)}{\\mathrm{MSE}\\big(\\hat{c}_{3}^{\\,\\mathrm{u}}(\\tau_{1},\\tau_{2})\\big)}\n$$\nexpressed only in terms of $N$ and the lags. No numerical approximation is required, and no units are needed in the final answer.", "solution": "The problem statement is subjected to validation.\n\n**Step 1: Extract Givens**\n- Process: $\\{x[n]\\}$ is a real-valued, discrete-time, strictly stationary process.\n- Mean: $\\mathbb{E}\\{x[n]\\} = 0$.\n- Moments: All moments are finite.\n- Observation record: $\\{x[1], x[2], \\dots, x[N]\\}$, length $N$.\n- Third-order cumulant definition for zero-mean process: $c_{3}(\\tau_{1},\\tau_{2}) = \\mathbb{E}\\{x[n]\\,x[n+\\tau_{1}]\\,x[n+\\tau_{2}]\\}$.\n- Lags: $\\tau_{1}, \\tau_{2}$ are integers.\n- Lag-dependent constant: $L \\triangleq \\max(0,\\tau_{1},\\tau_{2})$.\n- Unbiased estimator: $\\hat{c}_{3}^{\\,\\mathrm{u}}(\\tau_{1},\\tau_{2})$ is the average of all available triple products, normalized by the number of available terms.\n- Biased estimator: $\\hat{c}_{3}^{\\,\\mathrm{b}}(\\tau_{1},\\tau_{2})$ is the same sum, normalized by $N$.\n- Specialized case process properties: $\\{x[n]\\}$ are independent and identically distributed (i.i.d.), zero-mean ($\\mathbb{E}\\{x[n]\\}=0$), with variance $\\sigma^{2}$.\n- Specialized case lag constraints: $\\tau_{2}>\\tau_{1}\\ge 1$.\n- Specialized case sample size constraint: $N>\\tau_{2}$.\n- Required output: The ratio $R(N,\\tau_{1},\\tau_{2}) \\triangleq \\frac{\\mathrm{MSE}\\big(\\hat{c}_{3}^{\\,\\mathrm{b}}(\\tau_{1},\\tau_{2})\\big)}{\\mathrm{MSE}\\big(\\hat{c}_{3}^{\\,\\mathrm{u}}(\\tau_{1},\\tau_{2})\\big)}$.\n\n**Step 2: Validate Using Extracted Givens**\nThe problem is assessed for validity.\n- **Scientifically Grounded**: The concepts presented—cumulants, estimators, mean-squared error, stationarity, and i.i.d. processes—are fundamental to statistical signal processing. The problem is a standard exercise in the analysis of statistical estimators. It is scientifically sound.\n- **Well-Posed**: The definitions for the estimators are provided, the properties of the stochastic process are clearly defined for the special case, and the objective is a specific, derivable analytical expression. The problem is unambiguous and possesses a unique solution.\n- **Objective**: The problem is stated in precise mathematical language, free from subjectivity or opinion.\n\n**Step 3: Verdict and Action**\nThe problem is scientifically grounded, well-posed, objective, and internally consistent. It does not violate any of the invalidity criteria. Therefore, the problem is **valid**. A solution will be derived.\n\nFirst, we establish the explicit expressions for the estimators. A triple product is of the form $x[k]x[k+\\tau_{1}]x[k+\\tau_{2}]$. For this product to be formed from the record $\\{x[1], \\dots, x[N]\\}$, all three time indices must be within the range $[1, N]$. This requires:\n$$1 \\le k$$\n$$1 \\le k+\\tau_1 \\implies k \\ge 1-\\tau_1$$\n$$1 \\le k+\\tau_2 \\implies k \\ge 1-\\tau_2$$\n$$k \\le N$$\n$$k+\\tau_1 \\le N \\implies k \\le N-\\tau_1$$\n$$k+\\tau_2 \\le N \\implies k \\le N-\\tau_2$$\nLet us assume the conventional case where lags $\\tau_1, \\tau_2$ are non-negative, which is also consistent with the specialized case condition $\\tau_{2}>\\tau_{1}\\ge 1$. Under this assumption, $L = \\max(0, \\tau_1, \\tau_2) = \\max(\\tau_1, \\tau_2)$. The conditions on the index $k$ simplify to $1 \\le k \\le N-L$. The number of available terms is the number of integers $k$ in this range, which is $(N-L) - 1 + 1 = N-L$.\n\nThe sum of available triple products is $\\sum_{n=1}^{N-L} x[n]x[n+\\tau_{1}]x[n+\\tau_{2}]$.\n\nThe unbiased estimator, normalized by the number of terms ($N-L$), is:\n$$\n\\hat{c}_{3}^{\\,\\mathrm{u}}(\\tau_{1},\\tau_{2}) = \\frac{1}{N-L} \\sum_{n=1}^{N-L} x[n]x[n+\\tau_{1}]x[n+\\tau_{2}]\n$$\nThe classically biased estimator, normalized by $N$, is:\n$$\n\\hat{c}_{3}^{\\,\\mathrm{b}}(\\tau_{1},\\tau_{2}) = \\frac{1}{N} \\sum_{n=1}^{N-L} x[n]x[n+\\tau_{1}]x[n+\\tau_{2}]\n$$\nThese can be related by:\n$$\n\\hat{c}_{3}^{\\,\\mathrm{b}}(\\tau_{1},\\tau_{2}) = \\frac{N-L}{N} \\hat{c}_{3}^{\\,\\mathrm{u}}(\\tau_{1},\\tau_{2})\n$$\n\nNext, we specialize to the case where $\\{x[n]\\}$ are i.i.d., zero-mean with variance $\\sigma^{2}$, and lags are such that $\\tau_{2}>\\tau_{1}\\ge 1$.\nUnder these conditions, $L = \\max(\\tau_1, \\tau_2) = \\tau_2$.\nThe true third-order cumulant is $c_{3}(\\tau_{1},\\tau_{2}) = \\mathbb{E}\\{x[n]x[n+\\tau_{1}]x[n+\\tau_{2}]\\}$. Since the process is i.i.d. and the lags $\\tau_1, \\tau_2$ are positive and distinct, the random variables $x[n]$, $x[n+\\tau_{1}]$, and $x[n+\\tau_{2}]$ are independent. Therefore:\n$$\nc_{3}(\\tau_{1},\\tau_{2}) = \\mathbb{E}\\{x[n]\\} \\mathbb{E}\\{x[n+\\tau_{1}]\\} \\mathbb{E}\\{x[n+\\tau_{2}]\\}\n$$\nAs the process is zero-mean, $\\mathbb{E}\\{x[k]\\}=0$ for any $k$. Thus,\n$$\nc_{3}(\\tau_{1},\\tau_{2}) = 0 \\cdot 0 \\cdot 0 = 0\n$$\nThe mean-squared error (MSE) of an estimator $\\hat{\\theta}$ for a parameter $\\theta$ is $\\mathrm{MSE}(\\hat{\\theta}) = \\mathbb{E}\\{(\\hat{\\theta}-\\theta)^2\\}$. Since the true value $c_{3}(\\tau_{1},\\tau_{2})$ is $0$, the MSE for both estimators simplifies to the expectation of their square:\n$$\n\\mathrm{MSE}(\\hat{c}_{3}) = \\mathbb{E}\\{(\\hat{c}_{3}-0)^2\\} = \\mathbb{E}\\{(\\hat{c}_{3})^2\\}\n$$\nLet us compute the MSE for the unbiased estimator $\\hat{c}_{3}^{\\,\\mathrm{u}}$. With $L=\\tau_2$:\n$$\n\\mathrm{MSE}\\big(\\hat{c}_{3}^{\\,\\mathrm{u}}(\\tau_{1},\\tau_{2})\\big) = \\mathbb{E}\\left\\{ \\left( \\frac{1}{N-\\tau_{2}} \\sum_{n=1}^{N-\\tau_{2}} x[n]x[n+\\tau_{1}]x[n+\\tau_{2}] \\right)^2 \\right\\}\n$$\nLet $Y_{n} \\triangleq x[n]x[n+\\tau_{1}]x[n+\\tau_{2}]$. The expression becomes:\n$$\n\\mathrm{MSE}\\big(\\hat{c}_{3}^{\\,\\mathrm{u}}\\big) = \\frac{1}{(N-\\tau_{2})^2} \\mathbb{E}\\left\\{ \\left( \\sum_{n=1}^{N-\\tau_{2}} Y_{n} \\right)^2 \\right\\} = \\frac{1}{(N-\\tau_{2})^2} \\sum_{n=1}^{N-\\tau_{2}} \\sum_{m=1}^{N-\\tau_{2}} \\mathbb{E}\\{Y_{n}Y_{m}\\}\n$$\nWe evaluate the term $\\mathbb{E}\\{Y_{n}Y_{m}\\} = \\mathbb{E}\\{ x[n]x[n+\\tau_{1}]x[n+\\tau_{2}] x[m]x[m+\\tau_{1}]x[m+\\tau_{2}] \\}$.\nSince the variables are i.i.d. and zero-mean, the expectation of their product is non-zero only if every unique time index appears an even number of times.\nCase 1: $n=m$. The set of indices is $\\{n, n+\\tau_{1}, n+\\tau_{2}\\}$, with each appearing twice.\n$$\n\\mathbb{E}\\{Y_{n}^2\\} = \\mathbb{E}\\{x[n]^2 x[n+\\tau_{1}]^2 x[n+\\tau_{2}]^2\\}\n$$\nDue to independence, this is $\\mathbb{E}\\{x[n]^2\\}\\mathbb{E}\\{x[n+\\tau_{1}]^2\\}\\mathbb{E}\\{x[n+\\tau_{2}]^2\\}$. By stationarity, this is $\\sigma^2 \\cdot \\sigma^2 \\cdot \\sigma^2 = \\sigma^6$.\nCase 2: $n \\neq m$. The set of indices from $Y_n$ is $I_n = \\{n, n+\\tau_1, n+\\tau_2\\}$, and from $Y_m$ is $I_m = \\{m, m+\\tau_1, m+\\tau_2\\}$. Since $\\tau_2 > \\tau_1 \\ge 1$, the elements within each set are distinct. A non-zero expectation would require $I_n = I_m$, which is only possible if $n=m$. For $n \\neq m$, the six indices involved are not perfectly paired. For any index that appears only once in the product, its expectation is $0$, making the entire expectation $0$. Thus, $\\mathbb{E}\\{Y_{n}Y_{m}\\} = 0$ for $n \\neq m$.\n\nThe double summation collapses to the diagonal terms where $n=m$:\n$$\n\\mathrm{MSE}\\big(\\hat{c}_{3}^{\\,\\mathrm{u}}\\big) = \\frac{1}{(N-\\tau_{2})^2} \\sum_{n=1}^{N-\\tau_{2}} \\mathbb{E}\\{Y_{n}^2\\} = \\frac{1}{(N-\\tau_{2})^2} \\sum_{n=1}^{N-\\tau_{2}} \\sigma^6 = \\frac{(N-\\tau_{2})\\sigma^6}{(N-\\tau_{2})^2} = \\frac{\\sigma^6}{N-\\tau_{2}}\n$$\nNow we compute the MSE for the biased estimator $\\hat{c}_{3}^{\\,\\mathrm{b}}$. Using the relation $\\hat{c}_{3}^{\\,\\mathrm{b}} = \\frac{N-\\tau_2}{N} \\hat{c}_{3}^{\\,\\mathrm{u}}$:\n$$\n\\mathrm{MSE}\\big(\\hat{c}_{3}^{\\,\\mathrm{b}}\\big) = \\mathbb{E}\\left\\{ \\left( \\frac{N-\\tau_{2}}{N} \\hat{c}_{3}^{\\,\\mathrm{u}} \\right)^2 \\right\\} = \\left(\\frac{N-\\tau_{2}}{N}\\right)^2 \\mathbb{E}\\left\\{ (\\hat{c}_{3}^{\\,\\mathrm{u}})^2 \\right\\} = \\left(\\frac{N-\\tau_{2}}{N}\\right)^2 \\mathrm{MSE}\\big(\\hat{c}_{3}^{\\,\\mathrm{u}}\\big)\n$$\nSubstituting the result for $\\mathrm{MSE}\\big(\\hat{c}_{3}^{\\,\\mathrm{u}}\\big)$:\n$$\n\\mathrm{MSE}\\big(\\hat{c}_{3}^{\\,\\mathrm{b}}\\big) = \\left(\\frac{N-\\tau_{2}}{N}\\right)^2 \\frac{\\sigma^6}{N-\\tau_{2}} = \\frac{(N-\\tau_{2})\\sigma^6}{N^2}\n$$\nFinally, we compute the required ratio $R(N,\\tau_{1},\\tau_{2})$:\n$$\nR(N,\\tau_{1},\\tau_{2}) = \\frac{\\mathrm{MSE}\\big(\\hat{c}_{3}^{\\,\\mathrm{b}}(\\tau_{1},\\tau_{2})\\big)}{\\mathrm{MSE}\\big(\\hat{c}_{3}^{\\,\\mathrm{u}}(\\tau_{1},\\tau_{2})\\big)} = \\frac{\\frac{(N-\\tau_{2})\\sigma^6}{N^2}}{\\frac{\\sigma^6}{N-\\tau_{2}}} = \\frac{(N-\\tau_{2})\\sigma^6}{N^2} \\cdot \\frac{N-\\tau_{2}}{\\sigma^6} = \\frac{(N-\\tau_{2})^2}{N^2}\n$$\nThis can be expressed as:\n$$\nR(N,\\tau_{1},\\tau_{2}) = \\left(\\frac{N-\\tau_{2}}{N}\\right)^2\n$$\nThe result depends on $N$ and $\\tau_2$, but not on $\\tau_1$, which is consistent with the problem's constraints. Under the given conditions, the `biased` estimator has a smaller mean-squared error.", "answer": "$$\n\\boxed{\\frac{(N-\\tau_{2})^{2}}{N^{2}}}\n$$", "id": "2876208"}, {"introduction": "This capstone practice brings together theory and computation, guiding you through the construction of a complete direct bispectrum estimator from first principles [@problem_id:2876231]. You will implement the full pipeline—from raw time-series data, through cumulant estimation and windowing, to the final 2D Fast Fourier Transform—to uncover quadratic phase coupling in a synthetic signal. This hands-on implementation solidifies your understanding of how polyspectra serve as powerful tools for detecting non-linear phenomena that are entirely invisible to conventional power spectrum analysis.", "problem": "You are given the task to implement the direct Fast Fourier Transform (FFT)-based bispectrum estimator for a real-valued, discrete-time, mean-zero, finite-length sequence. The estimator must first compute an estimate of the third-order cumulant on a finite lag grid and then apply a two-dimensional FFT to obtain the bispectrum. You will also compute explicit operation counts to characterize computational complexity.\n\nStart from these core definitions only:\n\n- The third-order cumulant of a zero-mean, wide-sense stationary discrete-time process is the third-order moment: for integer lags $ \\tau_1 $ and $ \\tau_2 $, the third-order cumulant is $ c_3(\\tau_1,\\tau_2) = \\mathbb{E}\\{x[n]\\,x[n+\\tau_1]\\,x[n+\\tau_2]\\} $.\n- The bispectrum is the two-dimensional Fourier transform (in the sense of the discrete-time Fourier transform) of the third-order cumulant: $ B(f_1,f_2) = \\sum_{\\tau_1=-\\infty}^{\\infty}\\sum_{\\tau_2=-\\infty}^{\\infty} c_3(\\tau_1,\\tau_2)\\, e^{-j 2\\pi (f_1 \\tau_1 + f_2 \\tau_2)} $.\n\nYour implementation must use the following procedure, which you must derive from the definitions above without recourse to any pre-specified shortcut formulas:\n\n1. Given a finite sequence $ x[0], x[1], \\dots, x[N-1] $, subtract its empirical mean to enforce zero mean. For each pair of integer lags $ \\tau_1, \\tau_2 \\in \\{-L, -L+1, \\dots, 0, \\dots, L-1, L\\} $, compute the unbiased sample estimate of the third-order cumulant by averaging the triple products $ x[n]\\,x[n+\\tau_1]\\,x[n+\\tau_2] $ over all indices $ n $ for which the terms are defined. Concretely, define the valid summation range by the intersection of constraints $ 0 \\le n \\le N-1 $, $ 0 \\le n+\\tau_1 \\le N-1 $, and $ 0 \\le n+\\tau_2 \\le N-1 $. Let $ K(\\tau_1,\\tau_2) $ be the number of valid $ n $ in this range. If $K(\\tau_1,\\tau_2) > 0$, the sample estimate is the average of the $ K(\\tau_1,\\tau_2) $ triple products; otherwise, set the estimate to $ 0 $.\n2. Apply a separable lag-domain window to the estimated cumulant. Use the Hamming window of length $ 2L+1 $ defined by $ w[m] $, $ m \\in \\{0,1,\\dots,2L\\} $. Form the two-dimensional separable window $ W(\\tau_1,\\tau_2) = w[\\tau_1+L]\\,w[\\tau_2+L] $ and multiply it elementwise with the cumulant estimate.\n3. Embed the windowed cumulant on a $ M \\times M $ grid by mapping lag indices to two-dimensional Discrete Fourier Transform (DFT) indices using modular indexing: map $ \\tau_1 \\mapsto (\\tau_1 \\bmod M) $ and $ \\tau_2 \\mapsto (\\tau_2 \\bmod M) $, placing zeros elsewhere.\n4. Compute the two-dimensional FFT of the embedded array to produce a discrete approximation $ \\widehat{B}[k_1,k_2] $ to the bispectrum over the grid $ k_1, k_2 \\in \\{0,1,\\dots,M-1\\} $. Use the standard FFT implementation of your programming language.\n5. Report the location of the maximum magnitude of the estimated bispectrum, i.e., return the indices $ (k_1^\\star,k_2^\\star) $ that maximize $ |\\widehat{B}[k_1,k_2]| $ over the full $ M \\times M $ grid.\n\nAdditionally, compute and report the following operation counts to make the computational complexity explicit, in terms of $ N $, $ L $, and $ M $:\n\n- The total count of triple products accumulated in step 1, namely $ \\sum_{\\tau_1=-L}^{L}\\sum_{\\tau_2=-L}^{L} K(\\tau_1,\\tau_2) $. Interpret this as the dominant arithmetic count for cumulant estimation.\n- The number of real multiplications required in step 2 to apply the separable lag window as an outer product followed by elementwise multiplication with the cumulant array. Count this as $ 2\\,(2L+1)^2 $ multiplications.\n- An upper-bound estimate of the number of complex multiplications in step 4 for the two-dimensional FFT, using the textbook radix-$ 2 $ estimate for a length-$ M $ one-dimensional FFT. For a two-dimensional FFT implemented as $ M $ row FFTs and $ M $ column FFTs, report $ M^2 \\log_2 M $ as the complex multiplication count.\n\nImplement this estimator and apply it to the following test suite. For each test case, synthesize $ x[n] $ as described, fix the pseudorandom seed to $ 0 $ for any randomness, and then execute the algorithm above with the specified $ N $, $ L $, and $ M $. Angles used internally (e.g., in sinusoid generation) are in radians.\n\nTest Suite:\n\n- Case 1 (two-tone with quadratic coupling, moderate noise):\n  - Parameters: $ N = 512 $, $ L = 31 $, $ M = 256 $, $ k_1 = 20 $, $ k_2 = 40 $, $ \\alpha = 0.8 $, noise standard deviation $ \\sigma = 0.1 $.\n  - Signal: $ u[n] = \\sin\\!\\big(2\\pi k_1 n / N\\big) + \\sin\\!\\big(2\\pi k_2 n / N\\big) $, $ x[n] = u[n] + \\alpha\\,u[n]^2 + \\eta[n] $, where $ \\eta[n] $ is independent and identically distributed zero-mean Gaussian noise with variance $ \\sigma^2 $.\n- Case 2 (white Gaussian noise only, boundary on shorter data):\n  - Parameters: $ N = 128 $, $ L = 15 $, $ M = 64 $, $ \\sigma = 1.0 $.\n  - Signal: $ x[n] = \\eta[n] $ as above.\n- Case 3 (two-tone with weaker quadratic coupling, low noise):\n  - Parameters: $ N = 256 $, $ L = 21 $, $ M = 128 $, $ k_1 = 15 $, $ k_2 = 25 $, $ \\alpha = 0.3 $, $ \\sigma = 0.05 $.\n  - Signal: as in Case 1 with the specified parameters.\n- Case 4 (degenerate lag grid, minimal lag support):\n  - Parameters: $ N = 64 $, $ L = 0 $, $ M = 16 $, $ \\sigma = 0.5 $.\n  - Signal: $ x[n] = \\eta[n] $ as above.\n\nFor each case, your program must compute:\n\n- The integer indices $ k_1^\\star $ and $ k_2^\\star $ of the maximum-magnitude bispectrum estimate $ |\\widehat{B}[k_1,k_2]| $ over the full $ M \\times M $ grid.\n- The integer operation counts:\n  - $ T_{\\mathrm{cum}} = \\sum_{\\tau_1=-L}^{L}\\sum_{\\tau_2=-L}^{L} K(\\tau_1,\\tau_2) $.\n  - $ T_{\\mathrm{win}} = 2\\,(2L+1)^2 $.\n  - $ T_{\\mathrm{fft}} = M^2 \\log_2 M $ rounded to the nearest integer.\n\nFinal output format requirement:\n\n- Your program should produce a single line of output containing the results for the four cases as a comma-separated list enclosed in square brackets, where each case is represented as a list of five integers $ [k_1^\\star, k_2^\\star, T_{\\mathrm{cum}}, T_{\\mathrm{win}}, T_{\\mathrm{fft}}] $. For example: $ [[1,2,3,4,5],[6,7,8,9,10],\\dots] $.", "solution": "The task is to construct and implement a direct FFT-based bispectrum estimator for a real-valued, finite-length discrete-time signal. The problem is well-posed and scientifically sound, resting on the established principles of higher-order statistics in signal processing. We shall proceed by formalizing each step of the specified algorithm, from cumulant estimation to the final bispectrum computation, and providing explicit formulas for the associated computational complexity.\n\nThe bispectrum, $B(f_1, f_2)$, is the two-dimensional Fourier transform of the third-order cumulant, $c_3(\\tau_1, \\tau_2)$. For a zero-mean process, the third-order cumulant is identical to the third-order moment, $c_3(\\tau_1, \\tau_2) = \\mathbb{E}\\{x[n] x[n+\\tau_1] x[n+\\tau_2]\\}$. The bispectrum is particularly useful for detecting and characterizing quadratic phase coupling, a type of nonlinearity where energy from two frequencies, $f_1$ and $f_2$, is transferred to their sum $f_1+f_2$ and/or difference $|f_1-f_2|$. Such phenomena are invisible to standard power spectrum analysis, as the power spectrum, being the Fourier transform of the second-order cumulant (the autocorrelation function), is phase-blind. The bispectrum, preserving some phase information, reveals these interactions as peaks at corresponding frequency pairs $(f_1, f_2)$.\n\nThe procedure is as follows:\n\n**Step 1: Third-Order Cumulant Estimation**\n\nGiven a finite data sequence $x[n]$ of length $N$, $n \\in \\{0, 1, \\dots, N-1\\}$, we first enforce the zero-mean condition by subtracting the sample mean:\n$$\nx'[n] = x[n] - \\bar{x}, \\quad \\text{where } \\bar{x} = \\frac{1}{N}\\sum_{i=0}^{N-1}x[i]\n$$\nThe unbiased sample estimate of the third-order cumulant, $\\hat{c}_3(\\tau_1, \\tau_2)$, is computed for integer lags $\\tau_1, \\tau_2$ within the range $\\{-L, \\dots, L\\}$. The estimate is an average of triple products $x'[n]x'[n+\\tau_1]x'[n+\\tau_2]$ over all available time indices $n$. The set of valid indices $n$ is determined by the requirement that $n$, $n+\\tau_1$, and $n+\\tau_2$ all lie within the interval $[0, N-1]$. This defines the summation range for each $(\\tau_1, \\tau_2)$ pair as $n \\in [n_{\\min}, n_{\\max}]$, where:\n$$\nn_{\\min}(\\tau_1, \\tau_2) = \\max(0, -\\tau_1, -\\tau_2)\n$$\n$$\nn_{\\max}(\\tau_1, \\tau_2) = \\min(N-1, N-1-\\tau_1, N-1-\\tau_2)\n$$\nThe number of valid products for a given lag pair is $K(\\tau_1, \\tau_2) = n_{\\max} - n_{\\min} + 1$, provided $n_{\\max} \\ge n_{\\min}$; otherwise, $K(\\tau_1, \\tau_2) = 0$. The cumulant estimate is then:\n$$\n\\hat{c}_3(\\tau_1, \\tau_2) = \\begin{cases} \\frac{1}{K(\\tau_1,\\tau_2)} \\sum_{n=n_{\\min}}^{n_{\\max}} x'[n]x'[n+\\tau_1]x'[n+\\tau_2] & \\text{if } K(\\tau_1,\\tau_2) > 0 \\\\ 0 & \\text{if } K(\\tau_1,\\tau_2) = 0 \\end{cases}\n$$\nThis calculation is performed for all $\\tau_1, \\tau_2 \\in \\{-L, \\dots, L\\}$, forming a $(2L+1) \\times (2L+1)$ grid of cumulant estimates.\n\nThe dominant computational cost for this step is the total number of triple products computed. This is given by the total count $T_{\\mathrm{cum}}$:\n$$\nT_{\\mathrm{cum}} = \\sum_{\\tau_1=-L}^{L}\\sum_{\\tau_2=-L}^{L} K(\\tau_1,\\tau_2)\n$$\n\n**Step 2: Lag-Domain Windowing**\n\nThe cumulant estimate grid is truncated to a finite size of $(2L+1) \\times (2L+1)$. This abrupt truncation in the lag domain would cause significant spectral leakage (sidelobe artifacts) in the bispectrum domain. To mitigate this, a smooth window function is applied. The problem specifies a separable two-dimensional window $W(\\tau_1, \\tau_2)$ formed from a one-dimensional Hamming window, $w[m]$. The Hamming window of length $2L+1$ is defined for $m \\in \\{0, 1, \\dots, 2L\\}$ as:\n$$\nw[m] = 0.54 - 0.46 \\cos\\left(\\frac{2\\pi m}{2L}\\right)\n$$\nThe two-dimensional window is the outer product $W(\\tau_1, \\tau_2) = w[\\tau_1+L]w[\\tau_2+L]$, where the lag indices $\\tau_1, \\tau_2 \\in \\{-L, \\dots, L\\}$ are mapped to window indices $\\{0, \\dots, 2L\\}$. The windowed cumulant estimate $\\hat{c}_{3,w}$ is obtained by elementwise multiplication:\n$$\n\\hat{c}_{3,w}(\\tau_1, \\tau_2) = \\hat{c}_3(\\tau_1, \\tau_2) \\cdot W(\\tau_1, \\tau_2)\n$$\nThe number of real multiplications for this step, following the problem's specified accounting method (outer product generation followed by elementwise multiplication), is:\n$$\nT_{\\mathrm{win}} = (2L+1)^2 + (2L+1)^2 = 2(2L+1)^2\n$$\n\n**Step 3: Embedding on the DFT Grid**\n\nThe bispectrum is estimated using the two-dimensional Discrete Fourier Transform (DFT), which is efficiently computed via the Fast Fourier Transform (FFT). The DFT operates on a periodic grid. The $(2L+1) \\times (2L+1)$ windowed cumulant array must be placed onto a larger $M \\times M$ grid. The mapping is performed using modular arithmetic, which correctly handles the periodic nature of the DFT. An $M \\times M$ complex-valued array, $C_{\\mathrm{emb}}$, is initialized to zeros. For each lag pair $(\\tau_1, \\tau_2)$, the windowed cumulant value is placed at the corresponding grid location $(k_1, k_2)$:\n$$\nk_1 = \\tau_1 \\pmod M\n$$\n$$\nk_2 = \\tau_2 \\pmod M\n$$\nThis operation populates a small portion of the $M \\times M$ grid, as $2L+1 \\le M$ for all test cases. The values of $C_{\\mathrm{emb}}[k_1, k_2]$ are the windowed cumulant estimates.\n\n**Step 4: Bispectrum Computation via 2D-FFT**\n\nThe discrete bispectrum estimate, $\\widehat{B}[k_1, k_2]$, is the two-dimensional DFT of the embedded cumulant array:\n$$\n\\widehat{B}[k_1, k_2] = \\sum_{m_1=0}^{M-1} \\sum_{m_2=0}^{M-1} C_{\\mathrm{emb}}[m_1, m_2] e^{-j 2\\pi (k_1 m_1 + k_2 m_2)/M}\n$$\nThis computation is performed using a 2D-FFT algorithm. The computational complexity is dominated by the FFT. For an $M \\times M$ grid, this can be implemented as $M$ row-wise 1D-FFTs followed by $M$ column-wise 1D-FFTs. Using the radix-2 FFT complexity estimate of $(M/2) \\log_2 M$ complex multiplications for a 1D-FFT of length $M$, the total count of complex multiplications for the 2D-FFT is:\n$$\nT_{\\mathrm{fft}} = M \\cdot \\left(\\frac{M}{2} \\log_2 M\\right) + M \\cdot \\left(\\frac{M}{2} \\log_2 M\\right) = M^2 \\log_2 M\n$$\nThe problem requires this value to be rounded to the nearest integer.\n\n**Step 5: Locating the Bispectrum Maximum**\n\nThe finale of the procedure is to identify the location of the highest peak in the magnitude of the estimated bispectrum. This corresponds to the pair of frequency indices $(k_1^\\star, k_2^\\star)$ that maximizes $|\\widehat{B}[k_1, k_2]|$ over the entire $M \\times M$ grid:\n$$\n(k_1^\\star, k_2^\\star) = \\arg\\max_{k_1, k_2 \\in \\{0, \\dots, M-1\\}} |\\widehat{B}[k_1, k_2]|\n$$\nThese indices, along with the calculated operation counts $T_{\\mathrm{cum}}$, $T_{\\mathrm{win}}$, and $T_{\\mathrm{fft}}$, constitute the required output for each test case.", "answer": "```python\nimport numpy as np\nfrom scipy.signal.windows import hamming\n\ndef solve():\n    \"\"\"\n    Main function to run the bispectrum estimation for all test cases.\n    \"\"\"\n    \n    # Define the test cases as specified in the problem statement.\n    test_cases = [\n        # Case 1: (N, L, M, signal_params_dict)\n        (512, 31, 256, {'type': 'coupled', 'k1': 20, 'k2': 40, 'alpha': 0.8, 'sigma': 0.1}),\n        # Case 2:\n        (128, 15, 64, {'type': 'noise', 'sigma': 1.0}),\n        # Case 3:\n        (256, 21, 128, {'type': 'coupled', 'k1': 15, 'k2': 25, 'alpha': 0.3, 'sigma': 0.05}),\n        # Case 4:\n        (64, 0, 16, {'type': 'noise', 'sigma': 0.5}),\n    ]\n\n    results = []\n    for N, L, M, params in test_cases:\n        result = _process_case(N, L, M, params)\n        results.append(result)\n\n    # Format the final output as a comma-separated list of lists.\n    print(f\"[{','.join(map(str, results))}]\")\n\ndef _process_case(N, L, M, params):\n    \"\"\"\n    Processes a single test case for bispectrum estimation.\n    \"\"\"\n    \n    # 0. Set up random number generator with a fixed seed for reproducibility.\n    rng = np.random.default_rng(0)\n\n    # Generate the signal x[n] based on the test case parameters.\n    n_indices = np.arange(N)\n    if params['type'] == 'coupled':\n        k1, k2, alpha, sigma = params['k1'], params['k2'], params['alpha'], params['sigma']\n        u = np.sin(2 * np.pi * k1 * n_indices / N) + np.sin(2 * np.pi * k2 * n_indices / N)\n        noise = rng.normal(0, sigma, N)\n        x = u + alpha * u**2 + noise\n    elif params['type'] == 'noise':\n        sigma = params['sigma']\n        x = rng.normal(0, sigma, N)\n    else:\n        raise ValueError(\"Unknown signal type specified.\")\n\n    # 1. Enforce zero mean and estimate third-order cumulant.\n    x = x - np.mean(x)\n    \n    lag_dim = 2 * L + 1\n    c3_est = np.zeros((lag_dim, lag_dim), dtype=np.float64)\n    K_counts = np.zeros((lag_dim, lag_dim), dtype=np.int64)\n\n    lags = np.arange(-L, L + 1)\n    for i, tau1 in enumerate(lags):\n        for j, tau2 in enumerate(lags):\n            n_min = max(0, -tau1, -tau2)\n            n_max = min(N - 1, N - 1 - tau1, N - 1 - tau2)\n            \n            num_valid_n = n_max - n_min + 1\n            if num_valid_n > 0:\n                K_counts[i, j] = num_valid_n\n                \n                # Use vectorized operations for the sum of triple products\n                x_n = x[n_min : n_max + 1]\n                x_n_tau1 = x[n_min + tau1 : n_max + tau1 + 1]\n                x_n_tau2 = x[n_min + tau2 : n_max + tau2 + 1]\n                \n                triple_product_sum = np.sum(x_n * x_n_tau1 * x_n_tau2)\n                c3_est[i, j] = triple_product_sum / num_valid_n\n\n    T_cum = int(np.sum(K_counts))\n    \n    # 2. Apply a separable lag-domain window.\n    win_1d = hamming(lag_dim, sym=True)\n    win_2d = np.outer(win_1d, win_1d)\n    c3_windowed = c3_est * win_2d\n    \n    T_win = 2 * (lag_dim)**2\n\n    # 3. Embed the windowed cumulant on an M x M grid.\n    c3_embedded = np.zeros((M, M), dtype=np.complex128)\n    for i, tau1 in enumerate(lags):\n        for j, tau2 in enumerate(lags):\n            k1_idx = tau1 % M\n            k2_idx = tau2 % M\n            # Accumulate in case of aliasing, though not expected with 2L+1 = M\n            c3_embedded[k1_idx, k2_idx] += c3_windowed[i, j]\n\n    # 4. Compute the 2D FFT to get the bispectrum estimate.\n    bispectrum = np.fft.fft2(c3_embedded)\n    \n    T_fft = int(round(M**2 * np.log2(M))) if M > 0 else 0\n\n    # 5. Report the location of the maximum magnitude.\n    mag_bispectrum = np.abs(bispectrum)\n    k_star_tuple = np.unravel_index(np.argmax(mag_bispectrum), mag_bispectrum.shape)\n    k1_star, k2_star = int(k_star_tuple[0]), int(k_star_tuple[1])\n\n    return [k1_star, k2_star, T_cum, T_win, T_fft]\n\nif __name__ == '__main__':\n    solve()\n```", "id": "2876231"}]}