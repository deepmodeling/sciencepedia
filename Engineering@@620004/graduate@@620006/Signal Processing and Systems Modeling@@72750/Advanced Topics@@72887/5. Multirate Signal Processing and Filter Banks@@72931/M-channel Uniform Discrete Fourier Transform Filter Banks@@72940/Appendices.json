{"hands_on_practices": [{"introduction": "This exercise serves as an excellent starting point for understanding filter design by deriving the frequency response $H(e^{j\\omega})$ of a frequency-sampled filter from first principles. By analyzing this fundamental structure, we can quantify the minimum achievable transition bandwidth $\\Delta\\omega_{\\min}$, a critical performance metric for any filter bank [@problem_id:2881785]. This practice establishes a theoretical baseline for the inherent trade-offs in filter design, which more advanced techniques aim to improve upon.", "problem": "Consider a critically decimated, $M$-channel uniform Discrete Fourier Transform (DFT) analysis filter bank, where each analysis channel $k \\in \\{0,1,\\dots,M-1\\}$ is obtained by complex modulation of a single low-pass prototype, that is, $H_k(e^{j\\omega}) \\triangleq H\\!\\left(e^{j(\\omega - 2\\pi k/M)}\\right)$. The target is to approximate ideal brick-wall bandpass channel responses of width approximately $2\\pi/M$, each centered at $2\\pi k/M$.\n\nUsing only first principles of the frequency-sampling method for finite impulse response (FIR) design and the modulation property of the Discrete-Time Fourier Transform (DTFT), do the following:\n\n1) Starting from the definition that frequency-sampling design specifies $M$ equally spaced desired samples $H_{d}[r] \\triangleq H\\!\\left(e^{j\\omega_r}\\right)$ at $\\omega_r \\triangleq 2\\pi r/M$ for $r \\in \\{0,1,\\dots,M-1\\}$, derive the continuous-frequency prototype response $H(e^{j\\omega})$ obtained when the time-domain prototype $h[n]$ is chosen as the inverse DFT of $\\{H_{d}[r]\\}_{r=0}^{M-1}$. Your expression for $H(e^{j\\omega})$ must be in closed form and must explicitly expose the interpolation kernel that arises from summing a finite geometric series.\n\n2) Interpreting the interpolation kernel you derived in part (1), and assuming a standard choice of $H_{d}[r]$ that equals one on a contiguous set of DFT indices corresponding to a low-pass band around $\\omega=0$ and zero elsewhere (so that $H_k(e^{j\\omega})$ approximates a brick-wall band centered at $2\\pi k/M$), determine the minimum achievable transition width $\\Delta\\omega_{\\min}$ separating the nominally flat passband region (near unity) from the first zero of the stopband, as a function of $M$. Here, define the transition width as the frequency separation between the peak of the passband lobe and the first zero crossing on one side of that lobe. Your answer must be a single, closed-form analytic expression in terms of $M$ only.\n\nNo numerical substitution is required. The final answer must be the analytic expression for $\\Delta\\omega_{\\min}$ only, with no units.", "solution": "The problem as stated is scientifically grounded, well-posed, objective, and contains sufficient information for a unique solution. It is a standard problem in digital signal processing concerning the design of FIR filters using the frequency-sampling method. I will proceed with the derivation.\n\nThe problem is divided into two parts. First, we must derive the continuous-frequency response $H(e^{j\\omega})$ of a prototype filter designed via the frequency-sampling method. Second, we must determine the minimum achievable transition width for this prototype.\n\nPart 1: Derivation of the Prototype Filter Frequency Response\n\nThe problem states that the prototype filter's impulse response, $h[n]$, is of finite length, and is obtained as the inverse Discrete Fourier Transform (IDFT) of a set of $M$ desired frequency samples, $\\{H_d[r]\\}_{r=0}^{M-1}$. The length of the FIR filter is thus implicitly $M$. The definition of the $M$-point IDFT gives $h[n]$ for $n \\in \\{0, 1, \\dots, M-1\\}$ as:\n$$\nh[n] = \\frac{1}{M} \\sum_{r=0}^{M-1} H_d[r] e^{j \\frac{2\\pi r n}{M}}\n$$\nOutside of this interval, $h[n]$ is zero. The continuous-frequency response, $H(e^{j\\omega})$, is the Discrete-Time Fourier Transform (DTFT) of this finite-length sequence $h[n]$. The DTFT is defined as:\n$$\nH(e^{j\\omega}) = \\sum_{n=-\\infty}^{\\infty} h[n] e^{-j\\omega n}\n$$\nSubstituting the expression for $h[n]$ and noting its support is from $n=0$ to $n=M-1$:\n$$\nH(e^{j\\omega}) = \\sum_{n=0}^{M-1} \\left( \\frac{1}{M} \\sum_{r=0}^{M-1} H_d[r] e^{j \\frac{2\\pi r n}{M}} \\right) e^{-j\\omega n}\n$$\nWe can interchange the order of the finite summations:\n$$\nH(e^{j\\omega}) = \\frac{1}{M} \\sum_{r=0}^{M-1} H_d[r] \\left( \\sum_{n=0}^{M-1} e^{j \\frac{2\\pi r n}{M}} e^{-j\\omega n} \\right)\n$$\nLet us combine the exponential terms inside the second summation:\n$$\nH(e^{j\\omega}) = \\frac{1}{M} \\sum_{r=0}^{M-1} H_d[r] \\left( \\sum_{n=0}^{M-1} \\left( e^{j(\\frac{2\\pi r}{M} - \\omega)} \\right)^n \\right)\n$$\nThe inner summation is a finite geometric series of the form $\\sum_{n=0}^{N-1} a^n$, with $N=M$ and $a = e^{j(\\frac{2\\pi r}{M} - \\omega)}$. The sum of such a series has the closed-form expression $\\frac{1-a^N}{1-a}$, provided $a \\neq 1$.\nThe interpolation kernel requested in the problem statement is precisely this sum, which we denote $K_r(\\omega)$:\n$$\nK_r(\\omega) \\triangleq \\sum_{n=0}^{M-1} \\left( e^{j(\\frac{2\\pi r}{M} - \\omega)} \\right)^n = \\frac{1 - \\left(e^{j(\\frac{2\\pi r}{M} - \\omega)}\\right)^M}{1 - e^{j(\\frac{2\\pi r}{M} - \\omega)}}\n$$\nSimplifying the term in the numerator:\n$$\n\\left(e^{j(\\frac{2\\pi r}{M} - \\omega)}\\right)^M = e^{j(2\\pi r - M\\omega)} = e^{j2\\pi r} e^{-jM\\omega}\n$$\nSince $r$ is an integer, $e^{j2\\pi r} = 1$. The numerator becomes $1 - e^{-jM\\omega}$. The kernel is therefore:\n$$\nK_r(\\omega) = \\frac{1 - e^{-jM\\omega}}{1 - e^{j(\\frac{2\\pi r}{M} - \\omega)}} = \\frac{1 - e^{-jM\\omega}}{1 - e^{-j(\\omega - \\frac{2\\pi r}{M})}}\n$$\nSubstituting this kernel back into the expression for $H(e^{j\\omega})$, we arrive at the closed-form expression for the continuous-frequency prototype response. This expression explicitly shows the interpolation of the frequency samples $H_d[r]$ via the kernel $K_r(\\omega)$.\n$$\nH(e^{j\\omega}) = \\frac{1}{M} \\sum_{r=0}^{M-1} H_d[r] \\frac{1 - e^{-jM\\omega}}{1 - e^{-j(\\omega - \\frac{2\\pi r}{M})}}\n$$\nThis completes the first part of the problem. This expression shows that the resulting frequency response is a superposition of interpolation functions, each centered at a frequency sample point $\\omega_r = 2\\pi r / M$ and weighted by the desired response $H_d[r]$ at that point.\n\nPart 2: Minimum Achievable Transition Width\n\nThe second part requires us to find the minimum achievable transition width, $\\Delta\\omega_{\\min}$. The transition width is defined as the frequency separation between the peak of the passband lobe and the first zero of the stopband. This minimum is to be found by considering the \"standard choice of $H_d[r]$ that equals one on a contiguous set of DFT indices corresponding to a low-pass band around $\\omega=0$ and zero elsewhere\".\n\nThe structure of the frequency response $H(e^{j\\omega})$ is a linear combination of frequency-shifted versions of a fundamental interpolation function. To achieve the narrowest possible features, specifically the narrowest transition width, one must select the most concentrated possible specification for $H_d[r]$. Broadening the support of $H_d[r]$ (i.e., using a larger \"contiguous set of ones\") corresponds to summing multiple shifted interpolation kernels. This action \"fills in\" the nulls of the individual kernels, thereby broadening the overall passband and pushing the first stopband zero to a higher frequency. This increases the transition width.\n\nTherefore, the minimum transition width is achieved for the narrowest possible non-trivial passband specification for $H_d[r]$. For a low-pass filter centered at $\\omega=0$, the most concentrated, or minimal, \"contiguous set\" of non-zero samples is a single sample at $r=0$. This choice corresponds to:\n$$\nH_d[r] = \\delta[r] = \\begin{cases} 1 & r=0 \\\\ 0 & r \\in \\{1, 2, \\dots, M-1\\} \\end{cases}\n$$\nWith this choice, the summation for $H(e^{j\\omega})$ collapses to a single term for $r=0$:\n$$\nH(e^{j\\omega}) = \\frac{1}{M} \\cdot (1) \\cdot \\frac{1 - e^{-jM\\omega}}{1 - e^{-j\\omega}}\n$$\nThis is the DTFT of a rectangular window of length $M$ and amplitude $1/M$. To analyze its properties, we express it in terms of trigonometric functions.\n$$\nH(e^{j\\omega}) = \\frac{1}{M} \\frac{e^{-j\\frac{M\\omega}{2}}(e^{j\\frac{M\\omega}{2}} - e^{-j\\frac{M\\omega}{2}})}{e^{-j\\frac{\\omega}{2}}(e^{j\\frac{\\omega}{2}} - e^{-j\\frac{\\omega}{2}})} = \\frac{1}{M} e^{-j(M-1)\\frac{\\omega}{2}} \\frac{\\sin(M\\omega/2)}{\\sin(\\omega/2)}\n$$\nThe magnitude of this response is:\n$$\n|H(e^{j\\omega})| = \\frac{1}{M} \\left| \\frac{\\sin(M\\omega/2)}{\\sin(\\omega/2)} \\right|\n$$\nThis function is the scaled periodic sinc function, also known as the Dirichlet kernel.\nThe peak of the passband lobe occurs at $\\omega = 0$. Using L'HÃ´pital's rule or small-angle approximations, the peak value is:\n$$\n\\lim_{\\omega \\to 0} |H(e^{j\\omega})| = \\frac{1}{M} \\left| \\frac{M/2}{1/2} \\right| = 1\n$$\nSo, the peak is located at $\\omega_p = 0$.\n\nThe first zero of the stopband occurs at the smallest non-zero frequency $\\omega_z$ for which the numerator $\\sin(M\\omega/2)$ is zero, while the denominator $\\sin(\\omega/2)$ is non-zero. The numerator is zero when:\n$$\n\\frac{M\\omega}{2} = k\\pi \\quad \\text{for any non-zero integer } k\n$$\n$$\n\\omega = \\frac{2\\pi k}{M}\n$$\nThe first zero on one side of the main lobe at $\\omega=0$ corresponds to $k=1$. At this frequency, the denominator is $\\sin(\\pi/M)$, which is non-zero for $M > 1$. Thus, the first zero crossing is at:\n$$\n\\omega_z = \\frac{2\\pi}{M}\n$$\nThe transition width $\\Delta\\omega_{\\min}$ is the separation between the peak and this first zero:\n$$\n\\Delta\\omega_{\\min} = |\\omega_z - \\omega_p| = \\left|\\frac{2\\pi}{M} - 0\\right| = \\frac{2\\pi}{M}\n$$\nAny other standard choice for $H_d[r]$ would involve a wider passband specification (more non-zero samples), which would result in a larger transition width. Hence, this is the minimum achievable value under the given design constraints.", "answer": "$$\\boxed{\\frac{2\\pi}{M}}$$", "id": "2881785"}, {"introduction": "This practice transitions from theoretical analysis to a concrete engineering design task, where you will implement a common and effective method for designing a prototype filter. Using the Kaiser window method, you will craft a filter to meet a specific performance target for adjacent-channel leakage ($\\text{ACL}$), a crucial metric in communications and spectral analysis [@problem_id:2881712]. This exercise develops practical coding skills and reinforces the connection between design parameters, such as filter length $L$ and the Kaiser window parameter $\\beta$, and the real-world performance of a DFT filter bank.", "problem": "You are asked to design and verify a uniform Discrete Fourier Transform (DFT) analysis filter bank with $M=32$ channels using a modulated low-pass prototype. The design objective is to target an adjacent-channel leakage of approximately $60$ decibels (dB), quantified via a clearly defined isolation metric computed from the analysis filters. You must implement a self-contained program that designs the prototype using a Kaiser-windowed ideal low-pass filter and computes the specified channel isolation metrics for a given test suite of prototype lengths.\n\nDefinitions and fundamental base:\n- Consider a uniform $M$-channel DFT analysis filter bank with analysis filters $\\{H_k(e^{j\\omega})\\}_{k=0}^{M-1}$ obtained by complex modulation of a real low-pass prototype $H_0(e^{j\\omega})$:\n  $$H_k(e^{j\\omega}) = H_0\\!\\left(e^{j(\\omega - 2\\pi k/M)}\\right),\\quad k=0,1,\\dots,M-1.$$\n- The channel center frequencies are $\\omega_k = \\frac{2\\pi k}{M}$ (radians).\n- The prototype $h[n]$ is a finite impulse response (FIR) filter with length $L=K M$, where $K$ is a positive integer, designed as a Kaiser-windowed ideal low-pass filter with cutoff\n  $$\\omega_c = \\frac{\\pi}{M},$$\n  and with a transition design intent guided by the passband edge $\\omega_p = \\frac{3\\pi}{4M}$ and stopband edge $\\omega_s = \\frac{5\\pi}{4M}$ (radians), so that the notional transition width is\n  $$\\Delta\\omega = \\omega_s - \\omega_p = \\frac{\\pi}{2M}.$$\n  The Kaiser window parameter $\\beta$ for a desired sidelobe attenuation $A$ (in dB) satisfies the widely used empirical relation\n  $$\\beta =\n  \\begin{cases}\n  0, & A \\le 21,\\\\\n  0.5842\\,(A-21)^{0.4} + 0.07886\\,(A-21), & 21 < A \\le 50,\\\\\n  0.1102\\,(A-8.7), & A > 50,\n  \\end{cases}$$\n  which for $A=60$ dB yields a fixed $\\beta$.\n- The ideal low-pass prototype (before windowing) of length $L$ and cutoff $\\omega_c$ has discrete-time impulse response\n  $$h_d[n] = \\frac{\\omega_c}{\\pi}\\,\\mathrm{sinc}\\!\\left(\\frac{\\omega_c}{\\pi}\\left(n - \\frac{L-1}{2}\\right)\\right),\\quad n=0,1,\\dots,L-1,$$\n  where $\\mathrm{sinc}(x) = \\frac{\\sin(\\pi x)}{\\pi x}$ with $\\mathrm{sinc}(0)=1$. The windowed prototype is $h[n] = h_d[n]\\,w[n]$, where $w[n]$ is the Kaiser window of length $L$. Normalize $h[n]$ so that\n  $$H_0(e^{j0}) = \\sum_{n=0}^{L-1} h[n] = 1,$$\n  ensuring unit gain at the center of each modulated passband.\n\nIsolation metric to compute:\n- Define the adjacent-channel leakage (ACL) for the analysis bank as the maximum, over channels, of the ratio between the magnitude response at an adjacent channel center and the in-channel center:\n  $$\\mathrm{ACL} = 20\\log_{10}\\Bigg(\\max_{k\\in\\{0,\\dots,M-1\\}} \\frac{\\left|H_k\\!\\left(e^{j\\omega_{k\\pm 1}}\\right)\\right|}{\\left|H_k\\!\\left(e^{j\\omega_k}\\right)\\right|}\\Bigg).$$\n- For a uniform modulated bank, this reduces to a prototype-based evaluation:\n  $$\\mathrm{ACL} = 20\\log_{10}\\left(\\frac{\\left|H_0\\!\\left(e^{j\\frac{2\\pi}{M}}\\right)\\right|}{\\left|H_0\\!\\left(e^{j0}\\right)\\right|}\\right),$$\n  since $H_k(e^{j\\omega_{k\\pm1}})=H_0(e^{\\pm j\\frac{2\\pi}{M}})$ and $H_k(e^{j\\omega_k})=H_0(e^{j0})$.\n\nYour tasks:\n1. Implement the above prototype design for fixed $M=32$ with Kaiser window parameter derived from a target attenuation of $A=60$ dB.\n2. For each given $K$, construct $h[n]$ with $L=K\\,M$, normalize to unit gain at $\\omega=0$, and compute the adjacent-channel leakage in dB using the above prototype-based identity, with all angles in radians.\n3. Aggregate the results for the specified test suite and print them in the exact required format.\n\nTest suite:\n- Use $M=32$ and the following three values of $K$:\n  - $K=6$ (short prototype; significant edge case),\n  - $K=10$ (moderate length; boundary-like case),\n  - $K=18$ (longer prototype; happy path).\n- For each $K$, compute and return the scalar $\\mathrm{ACL}$ value in dB as a float rounded to two decimal places.\n\nFinal output format:\n- Your program should produce a single line of output containing the three results, in order of the test suite cases $[K=6, K=10, K=18]$, as a comma-separated list enclosed in square brackets (e.g., \"[a,b,c]\"). Use radians for all internal angle calculations and do not include any additional text.", "solution": "We begin from the fundamental definition of a uniform Discrete Fourier Transform (DFT) modulated analysis filter bank. Let there be $M$ analysis filters $\\{H_k(e^{j\\omega})\\}$ generated by complex modulation of a single low-pass prototype $H_0(e^{j\\omega})$:\n$$H_k(e^{j\\omega}) = H_0\\!\\left(e^{j(\\omega - 2\\pi k/M)}\\right),\\quad k=0,1,\\dots,M-1.$$\nThe channel center frequencies are $\\omega_k = \\frac{2\\pi k}{M}$ in radians per sample. By design, the prototype $H_0(e^{j\\omega})$ is concentrated around $\\omega=0$, and modulation shifts this low-pass to be centered around each $\\omega_k$.\n\nAdjacent-channel leakage quantifies the suppression of an adjacent channel's center frequency by a filter intended for channel $k$. A natural definition, considering analysis filters alone, is\n$$\\mathrm{ACL} = 20\\log_{10}\\Bigg(\\max_{k} \\frac{\\left|H_k\\!\\left(e^{j\\omega_{k\\pm 1}}\\right)\\right|}{\\left|H_k\\!\\left(e^{j\\omega_k}\\right)\\right|}\\Bigg),$$\nwhere $k\\pm 1$ denotes either of the immediate neighbors of $k$ on the frequency circle. Using the modulation identity,\n$$H_k(e^{j\\omega_{k}}) = H_0(e^{j0}),\\quad H_k(e^{j\\omega_{k\\pm 1}}) = H_0\\!\\left(e^{\\pm j\\frac{2\\pi}{M}}\\right).$$\nHence the worst-case ratio for a uniform bank is independent of $k$ and reduces to\n$$\\mathrm{ACL} = 20\\log_{10}\\left(\\frac{\\left|H_0\\!\\left(e^{j\\frac{2\\pi}{M}}\\right)\\right|}{\\left|H_0\\!\\left(e^{j0}\\right)\\right|}\\right).$$\nTherefore, it suffices to design $H_0$ and evaluate the above ratio.\n\nWe design $H_0$ by windowing an ideal discrete-time low-pass filter. Let $L=K M$ be the length with an integer $K\\ge 1$. Choose cutoff $\\omega_c = \\frac{\\pi}{M}$ to place the ideal passband inside the channel bandwidth. To accommodate transition and reduce leakage at the adjacent center $\\omega=\\frac{2\\pi}{M}$, we adopt passband and stopband markers $\\omega_p=\\frac{3\\pi}{4M}$ and $\\omega_s=\\frac{5\\pi}{4M}$, giving a notional transition width $\\Delta\\omega=\\frac{\\pi}{2M}$. While the ideal low-pass set at $\\omega_c = \\frac{\\pi}{M}$ has a brick-wall transition, the actual finite-length windowed response will exhibit a transition whose width and sidelobes are governed by $L$ and the window.\n\nThe ideal impulse response of a low-pass filter of length $L$ with cutoff $\\omega_c$ is\n$$h_d[n] = \\frac{\\omega_c}{\\pi}\\,\\mathrm{sinc}\\!\\left(\\frac{\\omega_c}{\\pi}\\left(n - \\frac{L-1}{2}\\right)\\right),\\quad n=0,1,\\dots,L-1,$$\nwhere $\\mathrm{sinc}(x) = \\frac{\\sin(\\pi x)}{\\pi x}$ with $\\mathrm{sinc}(0)=1$. We apply a Kaiser window $w[n]$, which is defined in terms of the zero-order modified Bessel function of the first kind $I_0(\\cdot)$ as\n$$w[n] = \\frac{I_0\\!\\left(\\beta\\,\\sqrt{1 - \\left(\\frac{2n}{L-1}-1\\right)^2}\\right)}{I_0(\\beta)},\\quad n=0,1,\\dots,L-1.$$\nThe Kaiser parameter $\\beta$ is chosen based on the desired sidelobe attenuation $A$ in decibels via well-tested empirical formulas:\n$$\\beta =\n\\begin{cases}\n0, & A \\le 21,\\\\\n0.5842\\,(A-21)^{0.4} + 0.07886\\,(A-21), & 21 < A \\le 50,\\\\\n0.1102\\,(A-8.7), & A > 50.\n\\end{cases}$$\nFor $A=60$ dB, we are in the $A>50$ regime, yielding $\\beta = 0.1102\\,(60-8.7)$, which numerically sets the sidelobe decay typical of a $60$ dB Kaiser design.\n\nThe windowed prototype is then\n$$h[n] = h_d[n]\\cdot w[n],$$\nwhich we normalize so that\n$$\\sum_{n=0}^{L-1} h[n] = 1,$$\nimplying $H_0(e^{j0})=1$ and thus unit gain at each modulated channel center. This normalization renders the adjacent-channel leakage simply\n$$\\mathrm{ACL} = 20\\log_{10}\\left(\\left|H_0\\!\\left(e^{j\\frac{2\\pi}{M}}\\right)\\right|\\right).$$\n\nAlgorithmic plan:\n1. Fix $M=32$, target attenuation $A=60$ dB, and compute $\\beta$ accordingly.\n2. For each test case with a given $K$, set $L=K M$ and generate $h_d[n]$ with $\\omega_c=\\frac{\\pi}{M}$.\n3. Multiply by the Kaiser window $w[n]$ with parameter $\\beta$; then normalize $h[n]$ to unit DC gain.\n4. Compute the discrete-time frequency response samples $H_0(e^{j\\omega})$ at $\\omega=0$ and $\\omega=\\frac{2\\pi}{M}$ using a numerically stable routine for the frequency response of FIR filters.\n5. Evaluate $\\mathrm{ACL}$ in decibels via the logarithmic ratio defined above. Use radians for all angles.\n6. Repeat for all $K$ values in the test suite, round each result to two decimal places, and print as a single list on one line in the specified format.\n\nTest suite rationale:\n- $K=6$ yields a relatively short prototype ($L=192$), stressing the transition width and typically producing higher leakage (edge case).\n- $K=10$ yields a moderate length ($L=320$), often near the target boundary for $60$ dB (boundary-like).\n- $K=18$ yields a longer prototype ($L=576$), which should provide improved isolation (happy path).\n\nThe final program adheres to these principles, computes the metrics directly from first principles using the uniform modulation identity, and outputs the three adjacent-channel leakage values in dB for the specified $K$ values in a single line list.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.signal import freqz\n\ndef kaiser_beta(A):\n    # Kaiser window beta from attenuation A (dB)\n    if A <= 21:\n        return 0.0\n    elif A <= 50:\n        return 0.5842 * (A - 21) ** 0.4 + 0.07886 * (A - 21)\n    else:\n        return 0.1102 * (A - 8.7)\n\ndef design_prototype_kaiser(M, K, A_dB=60.0):\n    \"\"\"\n    Design a low-pass prototype h[n] of length L=K*M using a Kaiser-windowed ideal low-pass\n    with cutoff wc = pi/M. Normalize to unit DC gain.\n    \"\"\"\n    L = K * M\n    wc = np.pi / M  # cutoff in radians/sample\n    n = np.arange(L, dtype=float)\n    m = n - (L - 1) / 2.0\n    # Ideal low-pass impulse response: hd[n] = (wc/pi) * sinc((wc/pi) * m)\n    # np.sinc(x) = sin(pi x)/(pi x)\n    hd = (wc / np.pi) * np.sinc((wc / np.pi) * m)\n    beta = kaiser_beta(A_dB)\n    w = np.kaiser(L, beta)\n    h = hd * w\n    # Normalize to unit DC gain\n    s = np.sum(h)\n    if s == 0.0:\n        # Avoid division by zero; fallback to tiny normalization to keep numerical stability\n        s = 1e-16\n    h /= s\n    return h\n\ndef adjacent_channel_leakage_dB(h, M):\n    \"\"\"\n    Compute ACL in dB: 20*log10(|H0(exp(j*2*pi/M))| / |H0(exp(j*0))|)\n    After normalization, H0(0) ~ 1, but we compute both for robustness.\n    \"\"\"\n    # Evaluate frequency response at omega=0 and omega=2*pi/M\n    omegas = np.array([0.0, 2.0 * np.pi / M], dtype=float)\n    w, H = freqz(h, worN=omegas)\n    H0 = H[0]\n    H_adj = H[1]\n    denom = np.abs(H0)\n    num = np.abs(H_adj)\n    # Guard against numerical zeros\n    eps = 1e-20\n    ratio = (num + eps) / (denom + eps)\n    acl_db = 20.0 * np.log10(ratio)\n    return float(acl_db)\n\ndef solve():\n    # Define the test cases from the problem statement: M=32, K in [6, 10, 18]\n    M = 32\n    test_cases = [6, 10, 18]  # K values\n\n    results = []\n    for K in test_cases:\n        h = design_prototype_kaiser(M=M, K=K, A_dB=60.0)\n        acl_db = adjacent_channel_leakage_dB(h, M)\n        # Round to two decimals for final reporting\n        results.append(f\"{acl_db:.2f}\")\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "2881712"}, {"introduction": "Our final practice explores an advanced and powerful design paradigm for achieving near-perfect reconstruction, a key goal in many filter bank applications. You will implement the method of alternating projections to computationally find a prototype filter that satisfies the crucial sum-of-squares condition, $\\sum_{k=0}^{M-1} |H(e^{j(\\omega - 2\\pi k/M)})|^2 = 1$, for a 'tight' frame [@problem_id:2881750]. This hands-on problem introduces you to iterative optimization as a sophisticated design tool and provides deep insight into constructing filter banks that can analyze and perfectly synthesize signals.", "problem": "Consider an $M$-channel uniform Discrete Fourier Transform (DFT) modulated filter bank with a single real-valued finite impulse response prototype $h[n]$ and analysis responses $H_{k}(e^{j\\omega}) = H\\!\\left(e^{j(\\omega - 2\\pi k/M)}\\right)$ for $k\\in\\{0,\\dots,M-1\\}$, where $H(e^{j\\omega})$ is the Discrete-Time Fourier Transform (DTFT) of $h[n]$. A sufficient condition for tightness in the sense of Perfect Reconstruction (PR) up to a delay and gain is the sum-of-squares condition\n$$\n\\sum_{k=0}^{M-1} \\left|H\\!\\left(e^{j\\left(\\omega - \\frac{2\\pi k}{M}\\right)}\\right)\\right|^2 = 1\\quad \\text{for all } \\omega\\in[0,2\\pi).\n$$\nYou will design a feasible prototype for $M=8$ by alternating projections between two sets: (i) the set of frequency responses whose $M$ shifted magnitudes satisfy the above pointwise sum-of-squares condition, and (ii) the set of real-valued time-domain sequences supported on a given finite interval.\n\nStart from the following fundamentals:\n- The Discrete Fourier Transform (DFT) on $N$ uniformly spaced frequency samples $\\omega_\\ell = 2\\pi \\ell/N$, $\\ell\\in\\{0,\\dots,N-1\\}$, samples the DTFT on a grid. The inverse DFT reconstructs a length-$N$ periodic sequence corresponding to those samples.\n- For $N$ divisible by $M$, the family of $M$ circularly shifted samples $\\{H[\\ell - r] : r\\in\\{0,\\dots,M-1\\}\\}$ with shift step $s=N/M$ corresponds to the $M$ frequency shifts $\\omega\\mapsto \\omega - 2\\pi r/M$ evaluated on the grid.\n- The projection of a nonzero vector $v\\in\\mathbb{C}^M$ onto the sphere $\\{u\\in\\mathbb{C}^M : \\|u\\|_2^2 = 1\\}$ with respect to the Euclidean norm is achieved by radial scaling $u = v/\\|v\\|_2$.\n\nYour task is to:\n- Implement an alternating-projection algorithm that operates as follows.\n  1. Time-domain projection: Given complex $N$-point frequency samples $H[\\ell]$, compute the inverse DFT to obtain a length-$N$ time sequence $g[n]$, project it to the real, finite-support subspace by keeping only the first $L$ samples (indices $n\\in\\{0,\\dots,L-1\\}$), zeroing out $n\\in\\{L,\\dots,N-1\\}$, and discarding the imaginary part, to form $h[n]$.\n  2. Frequency-domain projection: Compute the DFT of $h[n]$ to get $H[\\ell]$. Partition the $N$ frequency bins into $s=N/M$ disjoint groups of size $M$: for each residue class $r\\in\\{0,\\dots,s-1\\}$, define the group indices $\\mathcal{G}_r = \\{r + q s \\mod N : q\\in\\{0,\\dots,M-1\\}\\}$. Replace the vector $\\{H[\\ell] : \\ell\\in \\mathcal{G}_r\\}$ by its radial projection onto the sphere of squared $\\ell_2$-norm equal to $1$, i.e., rescale the vector so that the sum of squared magnitudes over the group is exactly $1$. Leave any all-zero group unchanged.\n  3. Repeat the two projections for a prescribed number of iterations.\n- At the end of the iterations, evaluate the discrete sum-of-squares deviation on the $N$-point grid as\n$$\n\\varepsilon_{\\max} \\triangleq \\max_{r\\in\\{0,\\dots,s-1\\}} \\left| \\sum_{\\ell \\in \\mathcal{G}_r} \\left|H[\\ell]\\right|^2 - 1 \\right|.\n$$\n\nUse the Fast Fourier Transform (FFT) for efficiency. Ensure that all transforms are consistently defined so that an inverse FFT followed by an FFT returns the original samples (up to numerical precision). Work entirely in dimensionless units; do not report angles or physical units.\n\nTest suite and required outputs:\n- Implement your algorithm for the following parameter sets, each with $M=8$:\n  1. Case A (happy path): $N=2048$, $L=96$, iterations $=300$.\n  2. Case B (edge: shorter prototype): $N=1024$, $L=32$, iterations $=300$.\n  3. Case C (longer prototype): $N=2048$, $L=128$, iterations $=300$.\n  4. Case D (coarser grid): $N=512$, $L=64$, iterations $=300$.\n- Initialize $h[n]$ for each case as the Hann window of length $L$, i.e., $h[n] = \\tfrac{1}{2}\\left(1 - \\cos\\!\\left(\\tfrac{2\\pi n}{L-1}\\right)\\right)$ for $n\\in\\{0,\\dots,L-1\\}$, and zero elsewhere.\n\nProgram output specification:\n- For each case, compute $\\varepsilon_{\\max}$ after the final iteration and round it to six decimal places.\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets (e.g., \"[r1,r2,r3,r4]\") in the order A, B, C, D, where each $r_i$ is the rounded $\\varepsilon_{\\max}$ of the corresponding case.", "solution": "The problem presented is a valid and well-posed exercise in the design of digital filters for multirate systems. It requires the implementation of an iterative algorithm, specifically the method of alternating projections, to find a finite impulse response (FIR) prototype filter that approximates the perfect reconstruction condition for a uniform Discrete Fourier Transform (DFT) modulated filter bank. All parameters and procedures are specified with sufficient clarity to permit a unique, algorithmic solution.\n\nThe objective is to design a real-valued, finite-support prototype filter sequence, denoted $h[n]$, of length $L$. This filter is used to generate an $M$-channel filter bank where the analysis filters $H_k(e^{j\\omega})$ are frequency-shifted versions of the prototype's frequency response, $H(e^{j\\omega})$. The condition for perfect reconstruction (PR), up to a constant gain and delay, is given in the frequency domain as the sum-of-squares (or power complementary) property:\n$$\n\\sum_{k=0}^{M-1} \\left|H\\left(e^{j\\left(\\omega - \\frac{2\\pi k}{M}\\right)}\\right)\\right|^2 = C\n$$\nfor all $\\omega \\in [0, 2\\pi)$, where $C$ is a constant. The problem sets $C=1$.\n\nThe design is pursued numerically on a grid of $N$ equally spaced frequencies, $\\omega_\\ell = \\frac{2\\pi \\ell}{N}$ for $\\ell \\in \\{0, \\dots, N-1\\}$. On this grid, the continuous-frequency condition is translated into a discrete condition on the $N$-point DFT of the sequence $h[n]$, denoted $H[\\ell]$. The frequency shift of $H(e^{j\\omega})$ by $\\frac{2\\pi k}{M}$ corresponds to a circular shift of its DFT samples $H[\\ell]$ by $k \\cdot (N/M)$ indices. Let $s = N/M$, which must be an integer. The condition is then enforced on $s$ disjoint groups of frequency samples. For each residue class $r \\in \\{0, \\dots, s-1\\}$, the group of indices is $\\mathcal{G}_r = \\{r + q s \\pmod N \\mid q \\in \\{0, \\dots, M-1\\}\\}$. The discrete sum-of-squares condition is:\n$$\n\\sum_{\\ell \\in \\mathcal{G}_r} |H[\\ell]|^2 = 1 \\quad \\text{for each } r \\in \\{0, \\dots, s-1\\}.\n$$\nThe design method is one of alternating projections between two sets representing the desired properties of the solution.\n1.  Set $\\mathcal{S}_T$: The set of real-valued sequences of length $N$ whose support is limited to the interval $[0, L-1]$. This is a linear subspace of $\\mathbb{R}^N$.\n2.  Set $\\mathcal{S}_F$: The set of length-$N$ complex sequences whose DFT satisfies the discrete sum-of-squares condition above. This set is non-convex.\n\nThe algorithm proceeds as follows:\nLet $h_i[n]$ be the filter estimate at iteration $i$.\nStep 0 (Initialization):\nAn initial real-valued, finite-support sequence $h_0[n]$ of length $L$ is chosen and zero-padded to length $N$. The problem specifies a Hann window of length $L$:\n$$\nh_0[n] = \\begin{cases} \\frac{1}{2}\\left(1 - \\cos\\left(\\frac{2\\pi n}{L-1}\\right)\\right) & \\text{for } n \\in \\{0, \\dots, L-1\\} \\\\ 0 & \\text{for } n \\in \\{L, \\dots, N-1\\} \\end{cases}\n$$\n\nStep 1 (Frequency Domain Projection):\nFirst, compute the DFT of the current time-domain estimate $h_{i-1}[n]$ to obtain its frequency representation $H'[\\ell]$:\n$H'[\\ell] = \\text{DFT}\\{h_{i-1}[n]\\}$\nNext, we project $H'[\\ell]$ onto the set $\\mathcal{S}_F$. This is done independently for each group of frequencies $\\mathcal{G}_r$. For each $r \\in \\{0, \\dots, s-1\\}$, consider the vector of $M$ frequency samples $V_r = (H'[\\ell])_{\\ell \\in \\mathcal{G}_r}$. We calculate the squared Euclidean norm of this vector:\n$$\nE_r = \\sum_{\\ell \\in \\mathcal{G}_r} |H'[\\ell]|^2\n$$\nIf $E_r > 0$, we normalize the vector to have a squared norm of $1$. The new frequency samples $H_i[\\ell]$ for $\\ell \\in \\mathcal{G}_r$ are:\n$$\nH_i[\\ell] = \\frac{H'[\\ell]}{\\sqrt{E_r}}\n$$\nIf $E_r = 0$, the vector components are all zero and remain unchanged. This operation ensures that the resulting frequency response $H_i[\\ell]$ satisfies the discrete sum-of-squares condition.\n\nStep 2 (Time Domain Projection):\nThe sequence $H_i[\\ell]$ is transformed back to the time domain via the inverse DFT:\n$g_i[n] = \\text{IDFT}\\{H_i[\\ell]\\}$\nThe resulting sequence $g_i[n]$ is generally complex-valued and not of finite support. We project it onto the set $\\mathcal{S}_T$ by enforcing the finite support and real-value constraints. The new estimate $h_i[n]$ is obtained by:\n$$\nh_i[n] = \\begin{cases} \\text{Re}\\{g_i[n]\\} & \\text{for } n \\in \\{0, \\dots, L-1\\} \\\\ 0 & \\text{for } n \\in \\{L, \\dots, N-1\\} \\end{cases}\n$$\nThese two steps are repeated for the specified number of iterations. The use of the Fast Fourier Transform (FFT) and its inverse (IFFT) is required for computational efficiency.\n\nFinal Evaluation:\nAfter the final iteration, the resulting prototype filter is $h_{\\text{final}}[n]$. Its DFT, $H_{\\text{final}}[\\ell]$, is computed. The quality of the approximation to the sum-of-squares condition is measured by the maximum deviation $\\varepsilon_{\\max}$ over all frequency groups:\n$$\n\\varepsilon_{\\max} = \\max_{r \\in \\{0, \\dots, s-1\\}} \\left| \\left( \\sum_{\\ell \\in \\mathcal{G}_r} |H_{\\text{final}}[\\ell]|^2 \\right) - 1 \\right|\n$$\nThis metric quantifies the worst-case deviation from the ideal perfect reconstruction property on the chosen frequency grid. The algorithm is implemented for the provided test cases to compute this value.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Implements an alternating projection algorithm to design a prototype filter\n    for an M-channel uniform DFT modulated filter bank and computes the\n    sum-of-squares deviation for several test cases.\n    \"\"\"\n\n    # Define the test cases from the problem statement.\n    # Each case is a tuple (N, L, iterations). M is fixed at 8.\n    test_cases = [\n        (2048, 96, 300),   # Case A\n        (1024, 32, 300),   # Case B\n        (2048, 128, 300),  # Case C\n        (512, 64, 300),    # Case D\n    ]\n\n    results = []\n    M = 8\n\n    for N, L, iterations in test_cases:\n        # Step 0: Initialization\n        # Initialize h[n] as the Hann window of length L, zero-padded to N.\n        # The formula h[n] = 0.5 * (1 - cos(2*pi*n/(L-1))) for n in {0,...,L-1}\n        # corresponds to a symmetric Hann window. np.hanning is symmetric by default.\n        h = np.zeros(N, dtype=float)\n        if L > 1:\n            h[:L] = np.hanning(L)\n        elif L == 1:\n            h[0] = 1.0\n        \n        # s is the number of groups, which is also the decimation factor.\n        s = N // M\n\n        # Iterative alternating projection algorithm\n        for _ in range(iterations):\n            # Step 1: Frequency Domain Projection\n            # Compute the DFT of the current time-domain estimate.\n            H = np.fft.fft(h)\n\n            # Reshape H to group frequency samples.\n            # H.reshape((M, s)).T creates an (s x M) matrix where each row\n            # corresponds to a frequency group G_r.\n            # Row r contains [H[r], H[r+s], H[r+2s], ..., H[r+(M-1)s]]\n            H_grouped = H.reshape((M, s)).T\n\n            # Calculate the sum of squared magnitudes for each group.\n            sum_sq = np.sum(np.abs(H_grouped)**2, axis=1)\n\n            # Calculate scaling factors. Avoid division by zero for all-zero groups.\n            # The scales array will have length s.\n            scales = np.sqrt(sum_sq)\n            # If a group's energy is zero, its scale is set to 1 to avoid NaN.\n            # The group elements are all zero, so dividing by 1 has no effect.\n            scales[scales  1e-9] = 1.0\n\n            # Project each group by radial scaling.\n            # We use scales[:, np.newaxis] to broadcast correctly across the columns.\n            H_grouped_proj = H_grouped / scales[:, np.newaxis]\n\n            # Reshape the projected frequency response back to a 1D array of length N.\n            # The inverse operation of reshape((M, s)).T is .T.reshape(N).\n            H_proj = H_grouped_proj.T.reshape(N)\n\n            # Step 2: Time Domain Projection\n            # Transform back to the time domain.\n            g = np.fft.ifft(H_proj)\n\n            # Project onto the real, finite-support subspace.\n            h_new = np.zeros(N, dtype=float)\n            h_new[:L] = g[:L].real\n            h = h_new\n\n        # Final Evaluation\n        # After iterations, compute the final frequency response.\n        H_final = np.fft.fft(h)\n\n        # Group the final frequency samples.\n        H_final_grouped = H_final.reshape((M, s)).T\n\n        # Compute the sum of squared magnitudes for each group.\n        sum_sq_final = np.sum(np.abs(H_final_grouped)**2, axis=1)\n\n        # Compute the maximum deviation from 1.\n        epsilon_max = np.max(np.abs(sum_sq_final - 1.0))\n\n        # Append the rounded result.\n        results.append(f\"{epsilon_max:.6f}\")\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2881750"}]}