{"hands_on_practices": [{"introduction": "The primary motivation for adopting advanced multirate structures is the dramatic improvement in computational efficiency they offer. This first practice provides a direct, quantitative comparison between the \"naive\" filter-then-decimate approach and the elegant polyphase implementation. By calculating the exact number of multiplications required for a halfband decimator in both scenarios, you will gain a concrete appreciation for why polyphase decomposition is a cornerstone of modern digital signal processing [@problem_id:2867572].", "problem": "Consider a decimator by a factor of $2$ implemented with an odd-length, linear-phase Halfband Finite Impulse Response (FIR) low-pass filter $h[n]$ of length $N=4R+1$ with integer $R \\geq 1$. The filter satisfies $h[n]=h[N-1-n]$ (even symmetry) and the Halfband property that every other coefficient is zero except the center tap: $h[n]=0$ for all odd $n$, and $h[(N-1)/2]=\\tfrac{1}{2}$. Let the input be $x[n]$ and the output after decimation be $y[m]$.\n\nYou are asked to determine the exact number of real multiplications by nonzero coefficients required per output sample under the following two implementation strategies, both exploiting coefficient symmetry and skipping the zero-valued taps:\n- Direct-form “filter then decimate”: compute the full-rate convolution $y_{\\text{full}}[n]=\\sum_{k=0}^{N-1} h[k]\\,x[n-k]$ using a symmetric FIR structure and then keep every other sample $y[m]=y_{\\text{full}}[2m]$.\n- Two-branch polyphase decimator-by-$2$: write $h[n]=e_{0}[n/2]$ for even $n$ and $h[n]=e_{1}[(n-1)/2]$ for odd $n$, evaluate $y[m]=\\sum_{k} e_{0}[k]\\,x[2m-2k]+\\sum_{k} e_{1}[k]\\,x[2m-1-2k]$ only at the low rate, and exploit symmetry within the nonzero polyphase branch.\n\nIn both strategies, count each multiplication by a nonzero coefficient exactly once, including the multiplication by the center tap $h[(N-1)/2]=\\tfrac{1}{2}$. Do not count multiplications by zero coefficients. Express your answers as closed-form symbolic expressions in terms of $N$.\n\nProvide the final answer as a row vector whose first entry is the direct-form count and whose second entry is the polyphase count. No units are required. The answer must be a single analytic expression. No rounding is needed.", "solution": "The problem statement is subjected to validation prior to any attempt at a solution.\n\n### Step 1: Extract Givens\n- Decimation factor: $M=2$.\n- Filter type: Linear-phase Halfband Finite Impulse Response (FIR) low-pass filter, $h[n]$.\n- Filter length: $N=4R+1$, where $R$ is an integer and $R \\geq 1$.\n- Filter symmetry: $h[n]=h[N-1-n]$ (Type 1, even symmetry).\n- Halfband property: $h[n]=0$ for all odd indices $n$.\n- Center tap value: $h[(N-1)/2] = \\frac{1}{2}$.\n- Input signal: $x[n]$.\n- Output signal: $y[m]$.\n- Strategy 1 (Direct-form): Compute $y_{\\text{full}}[n]=\\sum_{k=0}^{N-1} h[k]\\,x[n-k]$ using a symmetric FIR structure, then decimate via $y[m]=y_{\\text{full}}[2m]$.\n- Strategy 2 (Polyphase): Decompose $h[n]$ into polyphase components $e_0[n]$ and $e_1[n]$ and compute $y[m]=\\sum_{k} e_{0}[k]\\,x[2m-2k]+\\sum_{k} e_{1}[k]\\,x[2m-1-2k]$ exploiting symmetry.\n- Cost metric: Number of real multiplications by nonzero coefficients required per output sample, $y[m]$. Multiplications by $0$ are not counted. Multiplication by $\\frac{1}{2}$ is counted.\n\n### Step 2: Validate Using Extracted Givens\n- **Scientifically Grounded**: The problem describes the analysis of standard multirate signal processing structures (direct-form and polyphase decimators) for a specific class of FIR filters (linear-phase Halfband). All concepts are fundamental to Digital Signal Processing. The problem is scientifically sound.\n- **Well-Posed**: The problem is well-posed. It provides all necessary information and defines two distinct, standard implementation strategies. The objective is to calculate a specific, well-defined complexity metric (multiplications per output sample). A unique solution exists and is determined by the provided constraints.\n- **Objective**: The problem is stated using precise, objective, and standard technical terminology. It is free of ambiguity and subjective claims.\n\n### Step 3: Verdict and Action\nThe problem is valid as it is scientifically grounded, well-posed, and objective. A rigorous solution can be derived.\n\n### Solution Derivation\n\nFirst, we analyze the properties of the filter $h[n]$.\nThe filter length is $N=4R+1$ for an integer $R \\geq 1$. This is an odd integer. The filter possesses even symmetry, $h[n]=h[N-1-n]$, which makes it a Type 1 linear-phase FIR filter. The center of symmetry is at index $n_c = \\frac{N-1}{2} = \\frac{(4R+1)-1}{2} = 2R$.\n\nThe Halfband property states that $h[n]=0$ for all odd $n$. Therefore, the only nonzero coefficients are at even indices $n \\in \\{0, 2, \\dots, 4R\\}$. The total number of potentially nonzero coefficients is $2R+1$.\nThe center tap is $h[2R] = \\frac{1}{2}$.\nDue to symmetry, $h[2k] = h[N-1-2k] = h[4R-2k]$ for $k \\in \\{0, 1, \\dots, 2R\\}$.\nThe unique nonzero coefficient values that require multiplication are represented by $h[2k]$ for $k \\in \\{0, 1, \\dots, R-1\\}$ and the center tap $h[2R]$. This gives a total of $R+1$ unique coefficient values to be multiplied. Note that from $N=4R+1$, we have $R = \\frac{N-1}{4}$.\nThe number of unique nonzero coefficient values is $R+1 = \\frac{N-1}{4}+1 = \\frac{N+3}{4}$.\n\n#### Strategy 1: Direct-form “filter then decimate”\n\nIn this strategy, the filtering operation is performed at the high input sample rate, and the output is then downsampled by $M=2$. The convolution is $y_{\\text{full}}[n] = \\sum_{k=0}^{N-1} h[k]x[n-k]$.\n\nTo compute one sample of $y_{\\text{full}}[n]$, we exploit the filter's properties. The sum only needs to be performed over the $2R+1$ nonzero coefficients at even indices. Furthermore, exploiting symmetry allows us to pre-add input samples before multiplication.\nThe computation for one output sample $y_{\\text{full}}[n]$ is:\n$$y_{\\text{full}}[n] = h[2R]x[n-2R] + \\sum_{k=0}^{R-1} h[2k] \\left( x[n-2k] + x[n-(4R-2k)] \\right)$$\nThis requires $1$ multiplication for the center tap and $R$ multiplications for the symmetric pairs. The total number of multiplications to compute one sample $y_{\\text{full}}[n]$ is $C_{H} = R+1$.\n\nThe problem asks for the number of multiplications per final output sample $y[m]$. To obtain the sequence $y[m] = y_{\\text{full}}[2m]$, we are conceptually computing the entire sequence $y_{\\text{full}}[n]$ and discarding the odd-indexed samples. For every one sample $y[m]$ that is kept, one sample $y_{\\text{full}}[2m-1]$ is computed and discarded. Thus, the total computational work to produce one output sample $y[m]$ is the work required to compute two high-rate samples, $y_{\\text{full}}[2m-1]$ and $y_{\\text{full}}[2m]$.\n\nThe number of multiplications per final output sample is therefore $2 \\times C_{H}$.\n$$ C_1 = 2(R+1) = 2\\left(\\frac{N-1}{4}+1\\right) = 2\\left(\\frac{N+3}{4}\\right) = \\frac{N+3}{2} $$\n\n#### Strategy 2: Two-branch polyphase decimator-by-2\n\nThis structure implements the decimation efficiently by rearranging the filtering operations. The filter $H(z)$ is decomposed into its Type 1 polyphase components: $H(z) = E_0(z^2) + z^{-1}E_1(z^2)$, where the polyphase filters are defined by the even and odd indexed coefficients of $h[n]$ respectively:\n$$ e_0[k] = h[2k] \\quad \\text{and} \\quad e_1[k] = h[2k+1] $$\nThe output is computed at the low rate as $y[m] = (x_e * e_0)[m] + (x_o * e_1)[m]$ where $x_e[m]=x[2m]$ and $x_o[m]=x[2m-1]$.\n\nAccording to the Halfband property given, $h[n]=0$ for all odd $n$. This directly implies that all coefficients of the second polyphase component are zero: $e_1[k] = h[2k+1] = 0$ for all $k$. Therefore, the filter $E_1(z)$ is zero, and the second branch of the polyphase structure contributes nothing to the output.\n\nThe computation simplifies to:\n$$ y[m] = \\sum_{k} e_0[k] x[2m-2k] $$\nThis is a single convolution of the filter $e_0[k]$ with the downsampled input sequence $x[2m]$, running at the output sample rate. We need to find the cost of this convolution.\n\nThe filter $e_0[k] = h[2k]$ has coefficients for $k \\in \\{0, 1, \\dots, 2R\\}$. Its length is $L_0 = 2R+1$.\nWe check its symmetry: $e_0[k] = h[2k]$ and from the symmetry of $h[n]$, $h[2k] = h[4R-2k]$. The coefficient $e_0[2R-k] = h[2(2R-k)] = h[4R-2k]$. Thus, $e_0[k]=e_0[2R-k]$, meaning $e_0[k]$ is a symmetric filter of odd length $L_0=2R+1$.\n\nThe number of multiplications per output sample for a symmetric FIR filter of odd length $L_0$, exploiting symmetry, is $\\frac{L_0+1}{2}$.\nThe center tap of $e_0[k]$ is at index $k=R$ and has value $e_0[R] = h[2R] = \\frac{1}{2}$, which is nonzero and must be counted.\nThe computational cost for Strategy 2 is:\n$$ C_2 = \\frac{L_0+1}{2} = \\frac{(2R+1)+1}{2} = \\frac{2R+2}{2} = R+1 $$\nSubstituting $R = \\frac{N-1}{4}$:\n$$ C_2 = \\frac{N-1}{4} + 1 = \\frac{N+3}{4} $$\n\nThe number of real multiplications per output sample for the direct-form is $\\frac{N+3}{2}$ and for the polyphase form is $\\frac{N+3}{4}$.", "answer": "$$ \\boxed{ \\begin{pmatrix} \\frac{N+3}{2} & \\frac{N+3}{4} \\end{pmatrix} } $$", "id": "2867572"}, {"introduction": "Beyond computational cost, a well-designed signal processing system must meet key performance targets for signal quality. This exercise shifts our focus from decimation to interpolation and has you analyze two critical metrics: group delay, which determines signal latency, and Spurious-Free Dynamic Range (SFDR), which quantifies signal purity. You will connect the properties of the interpolation filter directly to the suppression of unwanted spectral images, a vital skill for designing high-fidelity upsampling systems [@problem_id:2867566].", "problem": "A discrete-time interpolation-by-$2$ system is constructed as follows. The input sequence $x[n]$ of sampling frequency $f_{s,\\mathrm{in}}$ is upsampled by factor $2$ via zero insertion to produce $x_{\\uparrow 2}[m]$, and then passed through a real-coefficient finite impulse response (FIR) halfband lowpass filter $h[n]$ to produce the output $y[m]$ at sampling frequency $f_{s,\\mathrm{out}}=2 f_{s,\\mathrm{in}}$. The filter $h[n]$ has odd length $N$, is linear phase with symmetry $h[n]=h[N-1-n]$, unity gain at $\\omega=0$ in the passband, and maximum stopband magnitude bounded as $\\max_{\\omega \\in \\mathrm{SB}}|H(\\mathrm{e}^{j\\omega})| \\leq 10^{-A_{s}/20}$, where $A_{s}$ is the stopband attenuation expressed in decibels (dB). Assume negligible passband ripple so that the passband gain can be taken as exactly $1$ for the derivation.\n\nLet the input be a single-tone sinusoid $x[n]=A \\cos(\\Omega_{0} n + \\varphi)$ with arbitrary phase $\\varphi$, amplitude $A>0$, and discrete-time radian frequency $\\Omega_{0}$ such that the tone lies strictly within the baseband after interpolation (i.e., no aliasing).\n\nUsing first principles of multirate signal processing (upsampling by zero insertion) and linear-phase FIR systems, derive:\n\n1. A closed-form expression, in terms of $N$, for the group delay of the overall interpolator measured in output samples (i.e., in units of the output sampling period). Then evaluate it for $N=81$.\n\n2. A closed-form expression for the minimum imaging attenuation $A_{s}^{\\star}$, expressed in dB, that guarantees a target Spurious-Free Dynamic Range (SFDR) of $S_{\\mathrm{target}}$ dB at the interpolator output for the sinusoidal input described above, under the assumption that the largest spur is the residual image after the interpolation filter. Then evaluate it for $S_{\\mathrm{target}}=92$ dB.\n\nProvide the final numeric pair as a row matrix $(\\text{group delay in output samples}, \\text{required attenuation in dB})$. Do not include units in the matrix. If any rounding is needed, round to four significant figures; otherwise provide exact integers.", "solution": "The problem is evaluated to be valid as it is scientifically grounded in the principles of digital signal processing, well-posed with sufficient information for a unique solution, and stated using objective, formal language. We may proceed with the solution.\n\nThe problem asks for two quantities related to a discrete-time interpolator. The interpolator increases the sampling rate by a factor of $M=2$ by first upsampling the input sequence $x[n]$ with zero insertion and then passing the result through a lowpass Finite Impulse Response (FIR) filter $h[n]$.\n\n**1. Group Delay of the Interpolator**\n\nThe overall interpolation system consists of two stages: an upsampler-by-$2$ and an FIR filter $h[n]$.\nThe upsampler operation, defined as $x_{\\uparrow 2}[m] = x[m/2]$ for $m$ even and $x_{\\uparrow 2}[m]=0$ for $m$ odd, is a memoryless point-wise operation. It does not introduce any time delay into the signal path. Therefore, the group delay of the entire interpolator system is determined solely by the group delay of the post-interpolation filter, $h[n]$.\n\nThe filter $h[n]$ is specified as a real-coefficient, odd-length ($N$), linear-phase FIR filter with symmetry $h[n] = h[N-1-n]$. This corresponds to a Type I linear-phase FIR filter.\n\nThe frequency response of a Type I FIR filter can be written in the form:\n$$H(\\mathrm{e}^{j\\omega}) = A_e(\\omega) \\exp\\left(-j\\omega\\frac{N-1}{2}\\right)$$\nwhere $A_e(\\omega)$ is a real-valued amplitude function, and the phase response is $\\theta(\\omega) = -\\omega \\frac{N-1}{2}$.\n\nThe group delay, $\\tau_g(\\omega)$, is defined as the negative derivative of the phase response with respect to frequency:\n$$\\tau_g(\\omega) = -\\frac{d}{d\\omega} \\theta(\\omega) = -\\frac{d}{d\\omega} \\left(-\\omega\\frac{N-1}{2}\\right)$$\n$$\\tau_g(\\omega) = \\frac{N-1}{2}$$\nFor a Type I linear-phase FIR filter, the group delay is constant across all frequencies. The filter $h[n]$ operates on the upsampled signal, which is at the output sampling frequency $f_{s,\\mathrm{out}}$. Thus, its group delay is measured in units of the output sampling period, $T_{s,\\mathrm{out}} = 1/f_{s,\\mathrm{out}}$.\n\nThe problem asks for this group delay in units of output samples. The derived value is already in these units.\nGiven the filter length $N=81$, the group delay is:\n$$\\tau_g = \\frac{81-1}{2} = \\frac{80}{2} = 40$$\nThe group delay is $40$ output samples.\n\n**2. Minimum Imaging Attenuation for Target SFDR**\n\nLet the input signal be $x[n] = A \\cos(\\Omega_0 n + \\varphi)$. Its discrete-time radian frequency is $\\Omega_0$ with respect to the input sampling rate $f_{s,\\mathrm{in}}$.\n\nThe upsampling-by-$2$ operation with zero insertion produces the sequence $x_{\\uparrow 2}[m]$. To analyze the spectral content of $x_{\\uparrow 2}[m]$, we can represent the input as a sum of complex exponentials:\n$$x[n] = \\frac{A}{2} \\left( e^{j(\\Omega_0 n + \\varphi)} + e^{-j(\\Omega_0 n + \\varphi)} \\right)$$\nThe upsampling of a complex exponential $e^{j\\omega_0 n}$ by a factor of $M$ (here $M=2$) with zero insertion results in a sequence whose components are at frequencies $\\frac{\\omega_0}{M} + \\frac{2\\pi k}{M}$ for $k=0, 1, ..., M-1$. For $M=2$, this gives frequencies $\\frac{\\omega_0}{2}$ and $\\frac{\\omega_0}{2}+\\pi$. The amplitude of each new component is $1/M$ of the original complex exponential's amplitude.\n\nApplying this to our input signal:\n- The term $\\frac{A}{2}e^{j\\varphi} e^{j\\Omega_0 n}$ results in two components in $x_{\\uparrow 2}[m]$:\n  - $\\frac{1}{2}\\left(\\frac{A}{2}e^{j\\varphi}\\right) e^{j(\\Omega_0/2) m}$ at frequency $\\omega = \\Omega_0/2$.\n  - $\\frac{1}{2}\\left(\\frac{A}{2}e^{j\\varphi}\\right) e^{j(\\Omega_0/2 + \\pi) m}$ at frequency $\\omega = \\Omega_0/2 + \\pi$.\n- The term $\\frac{A}{2}e^{-j\\varphi} e^{-j\\Omega_0 n}$ results in two components:\n  - $\\frac{1}{2}\\left(\\frac{A}{2}e^{-j\\varphi}\\right) e^{-j(\\Omega_0/2) m}$ at frequency $\\omega = -\\Omega_0/2$.\n  - $\\frac{1}{2}\\left(\\frac{A}{2}e^{-j\\varphi}\\right) e^{j(-\\Omega_0/2 + \\pi) m}$ at frequency $\\omega = \\pi - \\Omega_0/2$.\n\nCombining these components to form real sinusoids:\n- **Desired Signal**: The components at $\\pm\\Omega_0/2$ combine to form the desired signal:\n  $$s_d[m] = \\frac{A}{4}e^{j\\varphi} e^{j(\\Omega_0/2) m} + \\frac{A}{4}e^{-j\\varphi} e^{-j(\\Omega_0/2) m} = \\frac{A}{2} \\cos\\left(\\frac{\\Omega_0}{2} m + \\varphi\\right)$$\n  The amplitude of the desired signal component before filtering is $A_d^{\\mathrm{pre}} = A/2$. Its frequency $\\Omega_0/2$ lies in the passband of the halfband filter $h[n]$ (since $\\Omega_0 \\in (0, \\pi)$, then $\\Omega_0/2 \\in (0, \\pi/2)$).\n- **Image Signal**: The components at $\\pi+\\Omega_0/2$ and $\\pi-\\Omega_0/2$ form the image signal. The frequency $\\pi+\\Omega_0/2$ is an alias of $\\pi+\\Omega_0/2-2\\pi = \\Omega_0/2-\\pi = -(\\pi-\\Omega_0/2)$, which is the negative of the other image frequency. These components combine to form a real sinusoid. The resulting amplitude is also $A/2$.\n  $$s_{im}[m] = \\frac{A}{2} \\cos\\left( (\\pi - \\frac{\\Omega_0}{2})m \\pm \\phi' \\right)$$\n  The amplitude of the image signal (spur) before filtering is $A_{im}^{\\mathrm{pre}} = A/2$. Its frequency $\\pi-\\Omega_0/2$ lies in the stopband of the halfband filter.\n\nThe signal $x_{\\uparrow 2}[m]$ is then passed through the filter $h[n]$.\n- The output amplitude of the desired signal is $A_{d,\\mathrm{out}} = A_d^{\\mathrm{pre}} \\times |H(e^{j\\Omega_0/2})|$. With the assumption of unity passband gain, $|H(e^{j\\Omega_0/2})|=1$, so $A_{d,\\mathrm{out}} = A/2$.\n- The output amplitude of the spur is $A_{spur,\\mathrm{out}} = A_{im}^{\\mathrm{pre}} \\times |H(e^{j(\\pi-\\Omega_0/2)})|$. The problem provides an upper bound for the filter's magnitude in the stopband: $|H(e^{j\\omega})| \\le 10^{-A_s/20}$ for $\\omega \\in \\mathrm{SB}$. The worst-case spur amplitude occurs when the filter response at the image frequency reaches this maximum allowed value.\n  $$A_{spur,\\mathrm{out}}^{\\max} = \\frac{A}{2} \\times 10^{-A_s/20}$$\n\nThe Spurious-Free Dynamic Range (SFDR) is the ratio of the desired signal amplitude to the amplitude of the strongest spurious component.\n$$SFDR = \\frac{A_{d,\\mathrm{out}}}{A_{spur,\\mathrm{out}}^{\\max}} = \\frac{A/2}{(A/2) \\times 10^{-A_s/20}} = \\frac{1}{10^{-A_s/20}} = 10^{A_s/20}$$\nExpressing the SFDR in decibels (dB), we get:\n$$S_{\\mathrm{dB}} = 20 \\log_{10}(SFDR) = 20 \\log_{10}(10^{A_s/20}) = A_s$$\nThis shows that for this system, the required minimum stopband attenuation in dB, $A_s^{\\star}$, is equal to the target SFDR in dB, $S_{\\mathrm{target}}$.\n$$A_s^{\\star} = S_{\\mathrm{target}}$$\nGiven a target SFDR of $S_{\\mathrm{target}}=92$ dB, the minimum required stopband attenuation is:\n$$A_s^{\\star} = 92 \\; \\mathrm{dB}$$\n\nThe final numeric pair is (group delay, required attenuation).\nThe group delay is $40$ samples.\nThe required attenuation is $92$ dB.\nBoth values are exact integers and do not require rounding.", "answer": "$$ \\boxed{ \\begin{pmatrix} 40 & 92 \\end{pmatrix} } $$", "id": "2867566"}, {"introduction": "Translating abstract algorithms into functional hardware requires careful management of finite-precision arithmetic. This final practice explores the practical challenges of implementing a popular two-stage CIC-FIR decimator, where controlling bit growth is essential to prevent overflow and ensure numerical stability. You will analyze the system's gain staging and determine the register bit-widths needed for a robust fixed-point design, bridging the gap between theoretical models and their real-world realization [@problem_id:2867568].", "problem": "A Cascaded Integrator-Comb (CIC) decimation front end is followed by a compensation Finite Impulse Response (FIR) stage in a two-stage multirate decimator. The input is a signed fixed-point stream represented in two’s-complement with $B_{\\mathrm{in}}=12$ bits and normalized full-scale range $\\left[-1,1\\right)$. The input magnitude is bounded as $\\left|x[n]\\right|\\leq X_{\\max}$ with $X_{\\max}=0.5$. The CIC stage has $N=3$ cascaded sections, differential delay $M=1$, and decimation factor $R=32$. The compensation FIR stage is a linear-phase, symmetric, $5$-tap decimator by $2$ whose coefficients are\n$$\nh[0]=-0.04,\\quad h[1]=0.12,\\quad h[2]=0.84,\\quad h[3]=0.12,\\quad h[4]=-0.04,\n$$\napplied at the CIC output rate. A power-of-two scaling $2^{-k}$ is inserted immediately after the CIC comb output and before the compensation FIR to both normalize the overall direct-current (DC) gain and prevent overflow in the downstream FIR accumulator.\n\nStarting from first principles of linear time-invariant systems, including the structure of a CIC filter as an $N$-fold cascade of integrators and combs with decimation by $R$, and the induced $\\ell_{1}$-norm bounds for FIR convolution magnitude, determine:\n\n1) The normalization factor $2^{-k}$ (i.e., determine $k$) that makes the overall DC gain from input to final output exactly unity.\n\n2) The minimal additional number of bits beyond $B_{\\mathrm{in}}$ that the CIC integrator registers must have to prevent overflow for any input satisfying $\\left|x[n]\\right|\\leq X_{\\max}$.\n\n3) The minimal additional number of bits beyond the FIR input word length that the FIR accumulator must have to prevent overflow under the same input bound when the normalization factor from part 1) is used.\n\nReport your final results in the following order as a single row matrix:\n- First entry: the normalization factor $2^{-k}$ as an exact analytic expression.\n- Second entry: the additional CIC integrator bits from item 2).\n- Third entry: the additional FIR accumulator bits from item 3).\n\nNo rounding is required; provide exact values. Do not include units in your final answer.", "solution": "The problem posed is a standard exercise in the analysis of multirate digital signal processing systems, specifically concerning fixed-point implementation of a cascaded integrator-comb (CIC) filter and a finite impulse response (FIR) filter. A systematic validation reveals the problem to be scientifically grounded, well-posed, and objective. It contains all necessary information and is free from contradictions or non-formalizable assertions. Therefore, I shall proceed with a complete solution.\n\nThe problem requires the determination of three quantities related to the two-stage decimator: 1) a normalization scaling factor $2^{-k}$, 2) the additional bit width for the CIC integrator registers, and 3) the additional bit width for the compensation FIR accumulator. We will address each in turn, based on first principles.\n\nFirst, we determine the normalization factor $2^{-k}$ required to set the overall direct-current (DC) gain to unity. The total DC gain is the product of the DC gains of the individual stages in the cascade: the CIC filter, the scaler, and the FIR filter.\n\nThe transfer function of a CIC decimator, from the high-rate input to the low-rate output, is given by\n$$\nH_{\\text{CIC}}(z) = \\left( \\frac{1 - z^{-RM}}{1 - z^{-M}} \\right)^N\n$$\nHowever, for gain analysis, it is more intuitive to use the non-recursive form, which models the filter as a cascade of $N$ moving-average filters, each of length $RM$. The true transfer function from the high-rate input $x[n]$ to the low-rate output $y_d[n']$ has an equivalent frequency response corresponding to\n$$\nH_{\\text{CIC, effective}}(z) = \\left( \\frac{\\sum_{i=0}^{RM-1} z^{-i}}{1} \\right)^N = \\left( \\frac{1 - z^{-RM}}{1-z^{-1}} \\right)^N\n$$\nThe DC gain corresponds to the evaluation of this transfer function at $z=1$ (or $\\omega=0$). Direct substitution results in an indeterminate form $\\frac{0}{0}$. We apply L'Hôpital's rule to the core term:\n$$\n\\lim_{z \\to 1} \\frac{1 - z^{-RM}}{1-z^{-1}} = \\lim_{z \\to 1} \\frac{\\frac{d}{dz}(1 - z^{-RM})}{\\frac{d}{dz}(1-z^{-1})} = \\lim_{z \\to 1} \\frac{RM z^{-RM-1}}{z^{-2}} = RM\n$$\nThe DC gain of the CIC filter, $G_{\\text{CIC,DC}}$, is therefore $(RM)^N$. With the given parameters $R=32$, $M=1$, and $N=3$, we have:\n$$\nG_{\\text{CIC,DC}} = (32 \\cdot 1)^3 = 32^3 = (2^5)^3 = 2^{15}\n$$\nThe DC gain of the FIR filter, $G_{\\text{FIR,DC}}$, is the sum of its coefficients, which is equivalent to evaluating its transfer function $H_{\\text{FIR}}(z') = \\sum_{j=0}^{4} h[j] (z')^{-j}$ at $z'=1$:\n$$\nG_{\\text{FIR,DC}} = \\sum_{j=0}^{4} h[j] = (-0.04) + 0.12 + 0.84 + 0.12 + (-0.04) = 1.00\n$$\nThe overall DC gain, $G_{\\text{total}}$, is the product of the gains of the CIC stage, the scaler $2^{-k}$, and the FIR stage. We set this to unity as required:\n$$\nG_{\\text{total}} = G_{\\text{CIC,DC}} \\cdot 2^{-k} \\cdot G_{\\text{FIR,DC}} = 1\n$$\n$$\n2^{15} \\cdot 2^{-k} \\cdot 1.0 = 1 \\implies 2^{-k} = 2^{-15}\n$$\nThis determines the normalization factor to be $2^{-15}$, which implies $k=15$.\n\nSecond, we determine the minimal additional number of bits for the CIC integrator registers to prevent overflow. The number of additional bits corresponds to the necessary headroom, which is determined by the maximum possible value that the registers must hold. The maximum value at the output of the $N$-th integrator stage is bounded by the product of the filter's gain and the maximum input amplitude. For a CIC filter, this gain is $(RM)^N$.\nGiven an input signal $x[n]$ bounded by $|x[n]| \\le X_{\\max} = 0.5$, the maximum absolute value at the output of the final integrator stage, $|y_{N, \\max}|$, is:\n$$\n|y_{N, \\max}| \\le (RM)^N X_{\\max} = (32 \\cdot 1)^3 \\cdot 0.5 = 2^{15} \\cdot 2^{-1} = 2^{14}\n$$\nThe input signal is represented with $B_{\\mathrm{in}}=12$ bits in a normalized range of $[-1, 1)$, implying a fixed-point format with $0$ integer bits (the sign bit is not an integer bit). To represent the maximum output magnitude of $2^{14}$ without overflow in a two's complement system, the number of required integer bits, $I_{\\text{out}}$, is given by:\n$$\nI_{\\text{out}} = \\lceil \\log_2(|y_{N, \\max}|) \\rceil = \\lceil \\log_2(2^{14}) \\rceil = 14\n$$\nThe number of additional bits required is the increase in the number of integer bits from input to output. The input requires $I_{\\text{in}} = 0$ integer bits. Thus, the additional number of bits for the integrator registers is:\n$$\n\\Delta B_{\\text{CIC}} = I_{\\text{out}} - I_{\\text{in}} = 14 - 0 = 14\n$$\n\nThird, we determine the minimal additional bits for the FIR accumulator. The FIR filter processes the signal $v[n']$, which is the output of the CIC decimator scaled by $2^{-k}$. First, we find the maximum magnitude of $v[n']$. The maximum output of the entire CIC decimation filter, $|y_d|_{\\max}$, is bounded by the same value as its final integrator stage: $|y_d|_{\\max} \\le 2^{14}$.\nThe input to the FIR stage is $v[n'] = 2^{-k} y_d[n']$. Using $k=15$:\n$$\n|v|_{\\max} = \\max_n |v[n']| \\le 2^{-15} |y_d|_{\\max} = 2^{-15} \\cdot 2^{14} = 0.5\n$$\nTo prevent overflow in the FIR accumulator, we must find the maximum possible value of the convolution sum. A robust, worst-case bound for the output magnitude of an FIR filter is the product of the $\\ell_1$-norm of its coefficients and the maximum input magnitude. The $\\ell_1$-norm of the FIR filter, $\\|h\\|_1$, is:\n$$\n\\|h\\|_1 = \\sum_{j=0}^{4} |h[j]| = |-0.04| + |0.12| + |0.84| + |0.12| + |-0.04|\n$$\n$$\n\\|h\\|_1 = 0.04 + 0.12 + 0.84 + 0.12 + 0.04 = 1.16\n$$\nThe maximum value in the FIR accumulator, $|y_{\\text{FIR,acc}}|_{\\max}$, is therefore bounded by:\n$$\n|y_{\\text{FIR,acc}}|_{\\max} \\le \\|h\\|_1 \\cdot |v|_{\\max} = 1.16 \\cdot 0.5 = 0.58\n$$\nNow we determine the required bit growth. The FIR input signal $v[n']$ has a maximum magnitude of $0.5$. Since $0.5 < 1$, its representation requires $I_{\\text{FIR,in}} = 0$ integer bits. The accumulator output has a maximum magnitude of $0.58$. Since $0.58 < 1$, its representation also requires $I_{\\text{FIR,out}} = 0$ integer bits.\nThe number of additional bits required for the FIR accumulator is the difference:\n$$\n\\Delta B_{\\text{FIR}} = I_{\\text{FIR,out}} - I_{\\text{FIR,in}} = 0 - 0 = 0\n$$\nThe scaling factor $k=15$ is precisely the minimum integer value that ensures the FIR accumulator output magnitude remains below $1.0$, thus obviating the need for additional integer bits.\n\nThe final results are the normalization factor $2^{-15}$, the $14$ additional bits for the CIC integrator, and the $0$ additional bits for the FIR accumulator.", "answer": "$$\n\\boxed{\n\\begin{pmatrix}\n2^{-15} & 14 & 0\n\\end{pmatrix}\n}\n$$", "id": "2867568"}]}