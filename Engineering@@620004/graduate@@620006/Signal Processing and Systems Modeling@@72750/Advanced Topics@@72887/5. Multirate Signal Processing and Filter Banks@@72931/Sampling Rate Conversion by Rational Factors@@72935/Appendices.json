{"hands_on_practices": [{"introduction": "Before diving into complex implementations, it is essential to grasp how rational sampling rate conversion affects a signal in the frequency domain. This exercise provides a foundational understanding by tracking the frequency of a simple sinusoidal signal as it passes through an idealized upsampler-filter-downsampler chain. By solving this, you will solidify your intuition for the core principle that a rate change by a factor of $\\frac{L}{M}$ scales the signal's frequency by the same factor, assuming aliasing is avoided [@problem_id:1750703].", "problem": "In a digital signal processing (DSP) application, a test tone represented by the discrete-time signal $x[n] = \\cos\\left(\\frac{3\\pi n}{11}\\right)$ must be converted to a different sampling rate. The signal is passed through a sampling rate converter that changes the rate by a rational factor.\n\nThe conversion process consists of two stages. First, the signal is upsampled by an integer factor of $L=3$. This operation involves inserting $L-1$ zero-valued samples between each pair of consecutive samples of $x[n]$. The resulting signal is then passed through an ideal low-pass filter that has a gain of $L$ and a cutoff frequency of $\\frac{\\pi}{L}$ radians per sample.\n\nIn the second stage, the filtered signal is downsampled by an integer factor of $M=5$. This decimation process creates the final output signal, $y[n]$, by retaining only every $M$-th sample of the signal from the first stage.\n\nAssuming the process is ideal and that no aliasing occurs during the downsampling stage, determine the fundamental angular frequency of the output signal $y[n]$. Express your answer in radians per sample as a rational multiple of $\\pi$.", "solution": "Let the input be $x[n]=\\cos(\\omega_{0}n)$ with $\\omega_{0}=\\frac{3\\pi}{11}$.\n\nStage 1 (upsampling by $L=3$ and ideal interpolation): Inserting $L-1$ zeros gives a spectrum $X_{u}(\\mathrm{e}^{\\mathrm{j}\\omega})=X(\\mathrm{e}^{\\mathrm{j}\\omega L})$, which compresses frequency by $L$. The ideal low-pass filter with gain $L$ and cutoff $\\frac{\\pi}{L}$ removes images and restores amplitude, yielding an interpolated sequence with frequency scaled by $\\frac{1}{L}$. Therefore, the stage-1 output is\n$$\nv[n]=\\cos\\!\\left(\\frac{\\omega_{0}}{L}\\,n\\right)=\\cos\\!\\left(\\frac{\\pi}{11}\\,n\\right),\n$$\nso the intermediate angular frequency is\n$$\n\\omega_{1}=\\frac{\\omega_{0}}{L}=\\frac{\\pi}{11}.\n$$\n\nStage 2 (downsampling by $M=5$): Downsampling keeps every $M$-th sample, so\n$$\ny[n]=v[nM]=\\cos\\!\\left(\\omega_{1}Mn\\right)=\\cos\\!\\left(\\frac{M}{L}\\,\\omega_{0}\\,n\\right).\n$$\nThe frequency mapping under decimation is $\\omega\\mapsto M\\omega$ modulo $2\\pi$. The no-aliasing condition requires $|\\omega_{1}|<\\frac{\\pi}{M}$, which holds since\n$$\n\\left|\\omega_{1}\\right|=\\frac{\\pi}{11}<\\frac{\\pi}{5}.\n$$\nHence the output fundamental angular frequency is\n$$\n\\omega_{y}=\\frac{M}{L}\\,\\omega_{0}=\\frac{5}{3}\\cdot\\frac{3\\pi}{11}=\\frac{5\\pi}{11},\n$$\nwhich lies in $(0,\\pi)$ and thus needs no modulo reduction.", "answer": "$$\\boxed{\\frac{5\\pi}{11}}$$", "id": "1750703"}, {"introduction": "The low-pass filter is the most computationally intensive part of a rate converter, and its direct implementation is often too costly for practical applications. The key to efficiency lies in a powerful technique called polyphase decomposition, which breaks the large, high-rate filter into several smaller, parallel sub-filters that operate at a lower rate. This exercise offers direct, hands-on practice in performing this decomposition, a fundamental skill for designing any modern multirate signal processing system [@problem_id:2902294].", "problem": "Consider a causal finite impulse response filter with transfer function $H(z)$ given by\n$$\nH(z) \\;=\\; \\sum_{n=0}^{12} h[n]\\, z^{-n},\n$$\nwhere the impulse response coefficients $\\{h[n]\\}$ are\n$$\n\\{h[n]\\}_{n=0}^{12} \\;=\\; \\{\\, 0.0040,\\; -0.0120,\\; 0.0280,\\; 0.0800,\\; 0.1350,\\; 0.1650,\\; 0.1800,\\; 0.1650,\\; 0.1350,\\; 0.0800,\\; 0.0280,\\; -0.0120,\\; 0.0040 \\,\\}.\n$$\nIn the context of sampling rate conversion by rational factors, an interpolation-by-$L$ polyphase implementation partitions $H(z)$ into $L$ subfilters by distributing the coefficients $\\{h[n]\\}$ across $L$ branches based on the index modulo $L$. Starting only from the definitions of the $z$-transform, finite impulse response filtering, and the concept of uniform modular index partitioning, derive the polyphase decomposition for interpolation by $L=4$ by explicitly constructing the four polyphase components $E_{0}(z)$, $E_{1}(z)$, $E_{2}(z)$, and $E_{3}(z)$ that satisfy the polyphase relation for interpolation. Clearly show how the index mapping assigns coefficients to each branch.\n\nProvide your final answer as the row vector containing the four polynomials $E_{0}(z)$, $E_{1}(z)$, $E_{2}(z)$, and $E_{3}(z)$ in that order. No rounding is required; use the exact decimal values given above. The final answer should be a single closed-form analytic expression with $z$ as the variable.", "solution": "We begin from the definitions of the $z$-transform and finite impulse response filtering. A causal finite impulse response filter is specified by a finite set of impulse response coefficients $\\{h[n]\\}$ and its transfer function is\n$$\nH(z) \\;=\\; \\sum_{n=0}^{N-1} h[n]\\, z^{-n}.\n$$\nHere, we have $N=13$ and the provided $h[n]$ for $n\\in\\{0,1,\\dots,12\\}$.\n\nFor interpolation by an integer factor $L$, a polyphase implementation reorganizes the filter coefficients into $L$ subfilters by partitioning the index set $\\{0,1,\\dots,N-1\\}$ into residue classes modulo $L$. Specifically, for $L=4$, the indices are divided according to their remainders modulo $4$. The fundamental step is to rewrite the single sum over $n$ by expressing $n$ as\n$$\nn \\;=\\; 4m + k, \\quad \\text{with} \\quad k \\in \\{0,1,2,3\\}, \\quad m \\in \\mathbb{Z}_{\\ge 0},\n$$\nsubject to $4m+k \\le N-1$. Substituting this into $H(z)$ yields\n$$\nH(z)\n\\;=\\;\n\\sum_{n=0}^{N-1} h[n]\\, z^{-n}\n\\;=\\;\n\\sum_{k=0}^{3} \\sum_{m \\,\\ge\\, 0:\\, 4m+k \\le N-1} h[\\,4m + k\\,]\\, z^{-(4m + k)}.\n$$\nWe factor out the $z^{-k}$ and group the remaining powers in $z^{-4}$:\n$$\nH(z)\n\\;=\\;\n\\sum_{k=0}^{3} z^{-k} \\left( \\sum_{m \\,\\ge\\, 0:\\, 4m+k \\le N-1} h[\\,4m + k\\,]\\, (z^{-4})^{m} \\right).\n$$\nDefining the $k$-th polyphase component by\n$$\nE_{k}(z) \\;=\\; \\sum_{m \\,\\ge\\, 0:\\, 4m+k \\le N-1} h[\\,4m + k\\,]\\, z^{-m},\n$$\nwe obtain the polyphase decomposition (in the standard form for interpolation) as\n$$\nH(z) \\;=\\; \\sum_{k=0}^{3} z^{-k}\\, E_{k}\\!\\left(z^{4}\\right).\n$$\nThis construction shows how the coefficients are assigned: the branch indexed by $k$ collects all coefficients whose original indices are congruent to $k$ modulo $4$, and places them in $E_{k}(z)$ in order of increasing $m$, where $m = (n-k)/4$.\n\nWe now apply this to the given $h[n]$ with $N=13$ and $L=4$.\n\n- Branch $k=0$ takes indices $n \\in \\{0,4,8,12\\}$, corresponding to $m \\in \\{0,1,2,3\\}$:\n  - $h[0] = 0.0040$ goes to the coefficient of $z^{0}$ in $E_{0}(z)$.\n  - $h[4] = 0.1350$ goes to the coefficient of $z^{-1}$.\n  - $h[8] = 0.1350$ goes to the coefficient of $z^{-2}$.\n  - $h[12] = 0.0040$ goes to the coefficient of $z^{-3}$.\n  Therefore,\n  $$\n  E_{0}(z) \\;=\\; 0.0040 \\;+\\; 0.1350\\, z^{-1} \\;+\\; 0.1350\\, z^{-2} \\;+\\; 0.0040\\, z^{-3}.\n  $$\n\n- Branch $k=1$ takes indices $n \\in \\{1,5,9\\}$, corresponding to $m \\in \\{0,1,2\\}$:\n  - $h[1] = -0.0120$ goes to the coefficient of $z^{0}$ in $E_{1}(z)$.\n  - $h[5] = 0.1650$ goes to the coefficient of $z^{-1}$.\n  - $h[9] = 0.0800$ goes to the coefficient of $z^{-2}$.\n  Therefore,\n  $$\n  E_{1}(z) \\;=\\; -0.0120 \\;+\\; 0.1650\\, z^{-1} \\;+\\; 0.0800\\, z^{-2}.\n  $$\n\n- Branch $k=2$ takes indices $n \\in \\{2,6,10\\}$, corresponding to $m \\in \\{0,1,2\\}$:\n  - $h[2] = 0.0280$ goes to the coefficient of $z^{0}$ in $E_{2}(z)$.\n  - $h[6] = 0.1800$ goes to the coefficient of $z^{-1}$.\n  - $h[10] = 0.0280$ goes to the coefficient of $z^{-2}$.\n  Therefore,\n  $$\n  E_{2}(z) \\;=\\; 0.0280 \\;+\\; 0.1800\\, z^{-1} \\;+\\; 0.0280\\, z^{-2}.\n  $$\n\n- Branch $k=3$ takes indices $n \\in \\{3,7,11\\}$, corresponding to $m \\in \\{0,1,2\\}$:\n  - $h[3] = 0.0800$ goes to the coefficient of $z^{0}$ in $E_{3}(z)$.\n  - $h[7] = 0.1650$ goes to the coefficient of $z^{-1}$.\n  - $h[11] = -0.0120$ goes to the coefficient of $z^{-2}$.\n  Therefore,\n  $$\n  E_{3}(z) \\;=\\; 0.0800 \\;+\\; 0.1650\\, z^{-1} \\;-\\; 0.0120\\, z^{-2}.\n  $$\n\nThis explicit construction verifies the modular index mapping: each branch $k$ receives all coefficients $h[n]$ with $n \\equiv k \\pmod{4}$, and their positions within $E_{k}(z)$ follow $m = (n-k)/4$ as powers of $z^{-1}$. Substituting these $E_{k}(z)$ into the relation $H(z) = \\sum_{k=0}^{3} z^{-k} E_{k}(z^{4})$ reconstructs the original $H(z)$, confirming correctness of the decomposition.", "answer": "$$\\boxed{\\begin{pmatrix}\n0.0040 + 0.1350\\, z^{-1} + 0.1350\\, z^{-2} + 0.0040\\, z^{-3} &\n-0.0120 + 0.1650\\, z^{-1} + 0.0800\\, z^{-2} &\n0.0280 + 0.1800\\, z^{-1} + 0.0280\\, z^{-2} &\n0.0800 + 0.1650\\, z^{-1} - 0.0120\\, z^{-2}\n\\end{pmatrix}}$$", "id": "2902294"}, {"introduction": "After learning how to decompose a filter into its polyphase components, the natural question is: why is this method so important? This practice problem allows you to quantify the dramatic computational advantage of a polyphase implementation over a naive, direct-form approach. By calculating and comparing the number of operations per second for both methods, you will gain a concrete appreciation for the enormous efficiency gains that make complex real-time rate conversion feasible [@problem_id:2902270].", "problem": "A discrete-time system performs sampling rate conversion by the rational factor $L/M$ using an idealized finite impulse response (FIR) anti-imaging and anti-aliasing filter of length $N$ (that is, with $N$ nonzero taps and no coefficient symmetry exploited). The input sampling rate is $F_{\\text{in}}$. Consider two realizations of the converter for a fixed set of integers $L \\geq 2$, $M \\geq 2$:\n\n1. A naive direct-form structure that explicitly upsamples by $L$ (inserts $L-1$ zeros between input samples), filters at the higher rate, and then downsamples by $M$ (keeps one out of every $M$ samples), all without using noble identities or polyphase decomposition.\n2. A polyphase-noble optimized structure that uses the noble identities for upsampling and downsampling and the $L$-branch polyphase decomposition of the FIR filter so that only the necessary filter phases are evaluated at the lowest feasible internal rate.\n\nStarting only from the definitions of upsampling and downsampling and the convolution sum for FIR filtering, derive expressions for the total multiplication rate (multiplications per second) for each realization. Then evaluate these expressions for $L=7$, $M=5$, $N=301$, and $F_{\\text{in}}=96\\,\\mathrm{kHz}$. Finally, compute the speedup factor defined as the ratio of the naive direct-form multiplication rate to the polyphase-noble multiplication rate.\n\nExpress the two multiplication rates in MAC/s (multiply-accumulate operations per second, counting one multiplication per tap per produced sample) and the speedup factor as a pure number. Provide exact integer values; no rounding is required. Report your three final values in the order (direct-form MAC/s, polyphase MAC/s, speedup factor).", "solution": "Let the input signal be $x[n]$ with a sampling rate of $F_{\\text{in}}$. The system must convert this rate by a factor of $L/M$. The FIR filter has an impulse response $h[n]$ of length $N$.\n\nFirst, we analyze the naive direct-form realization.\nThe structure performs operations in the sequence: upsampling by $L$, FIR filtering, and downsampling by $M$.\n$1$. Upsampling by a factor of $L$: An intermediate signal $x_u[m]$ is created by inserting $L-1$ zero-valued samples between consecutive samples of $x[n]$. The sampling rate of $x_u[m]$ becomes $F_{\\text{int}} = L \\times F_{\\text{in}}$.\n$2$. FIR Filtering: The upsampled signal $x_u[m]$ is filtered by the FIR filter $h[n]$ of length $N$. The output of the filter, $v[m]$, is given by the convolution sum:\n$$v[m] = \\sum_{i=0}^{N-1} h[i] x_u[m-i]$$\nTo compute each sample $v[m]$, $N$ multiplications are required (as we count one multiply-accumulate operation per filter tap). The filter operates at the intermediate sampling rate $F_{\\text{int}}$, producing $L \\times F_{\\text{in}}$ samples per second. Therefore, the total multiplication rate for the filter is the product of the number of multiplications per sample and the sample rate.\nLet $R_1$ be the multiplication rate for the naive realization.\n$$R_1 = N \\times F_{\\text{int}} = N \\times (L \\times F_{\\text{in}}) = N L F_{\\text{in}}$$\n$3$. Downsampling by a factor of $M$: The filtered signal $v[m]$ is downsampled by keeping one sample for every $M$ samples, producing the final output $y[k] = v[kM]$. This operation involves no multiplications.\n\nThus, the total multiplication rate for the naive direct-form structure is $R_1 = N L F_{\\text{in}}$.\n\nNext, we analyze the polyphase-noble optimized realization.\nThis structure exploits multirate identities to perform the filtering at a lower sampling rate. The problem specifies using an $L$-branch polyphase decomposition of the filter $h[n]$.\n$1$. System Architecture: The overall system is a cascade of upsampling ($\\uparrow L$), filtering ($H(z)$), and downsampling ($\\downarrow M$).\n$2$. $L$-branch Polyphase Decomposition: The filter's transfer function $H(z) = \\sum_{n=0}^{N-1} h[n] z^{-n}$ is decomposed into $L$ polyphase components $E_k(z)$:\n$$H(z) = \\sum_{k=0}^{L-1} z^{-k} E_k(z^L)$$\nwhere the coefficients of the $k$-th polyphase filter $E_k(z)$ are $e_k[n] = h[nL+k]$. The length of filter $E_k(z)$ is $N_k = \\lceil (N-k)/L \\rceil$.\n$3$. Applying Noble Identities: The system can be written as $y[p] = \\left( \\left( x[n] \\uparrow L \\right) * h[n] \\right) \\downarrow M$. Substituting the polyphase expansion of $h[n]$ and analyzing the signal path for an output sample $y[p]$ yields:\n$$y[p] = \\sum_{i=0}^{N-1} h[i] x_u[pM - i]$$\nwhere $x_u[\\cdot]$ is the upsampled input. Let $i = nL+k$ for $k \\in \\{0, 1, \\dots, L-1\\}$.\n$$y[p] = \\sum_{k=0}^{L-1} \\sum_{n} h[nL+k] x_u[pM - (nL+k)]$$\nThe term $x_u[j]$ is non-zero only if $j$ is a multiple of $L$. Thus, for a non-zero contribution, we must have $pM - (nL+k)$ be a multiple of $L$. This implies $pM - k$ must be a multiple of $L$, or $k \\equiv pM \\pmod{L}$. For any given output index $p$, this condition fixes $k$ to a single value, $k_p = pM \\pmod{L}$.\nLet $pM - k_p = n_p L$, which gives $n_p = (pM - k_p)/L = \\lfloor pM/L \\rfloor$. The sum for $y[p]$ collapses to a single polyphase branch:\n$$y[p] = \\sum_{n} h[nL+k_p] x[n_p-n] = \\sum_{n} e_{k_p}[n] x[n_p-n] = (e_{k_p} * x)[n_p]$$\nThis equation reveals that to compute the output sample $y[p]$, we only need to compute the output of a single polyphase filter, $E_{k_p}(z)$, at a single time instant, $n_p$. This computation requires $N_{k_p} = \\lceil (N-k_p)/L \\rceil$ multiplications. The filtering operations effectively occur at the input rate domain, but only when a specific polyphase filter output is needed.\n\nTo find the average multiplication rate, $R_2$, we determine the average number of multiplications per output sample and multiply by the output sample rate, $F_{\\text{out}} = F_{\\text{in}} \\frac{L}{M}$.\nThe sequence of polyphase indices used, $k_p = pM \\pmod{L}$, is periodic in $p$. The period is $P = L/\\text{gcd}(L,M)$. When $\\text{gcd}(L,M)=1$, as in this problem, the period is $L$, and the sequence $\\{ pM \\pmod{L} \\}_{p=0}^{L-1}$ is a permutation of $\\{0, 1, \\dots, L-1\\}$.\nOver $L$ consecutive output samples, each of the $L$ polyphase filters is used exactly once. The total number of multiplications to produce these $L$ samples is $\\sum_{k=0}^{L-1} N_k = \\sum_{k=0}^{L-1} \\lceil (N-k)/L \\rceil$. It can be proven that this sum is exactly equal to $N$. Let $N = qL+r$ with $0 \\le r < L$.\n$$\\sum_{k=0}^{L-1} \\lceil \\frac{N-k}{L} \\rceil = \\sum_{k=0}^{L-1} \\left( q + \\lceil \\frac{r-k}{L} \\rceil \\right) = qL + \\sum_{k=0}^{r-1}(1) + \\sum_{k=r}^{L-1}(0) = qL + r = N$$\nSo, $N$ multiplications are performed to generate $L$ output samples. The average number of multiplications per output sample is $N/L$.\nThe total multiplication rate $R_2$ is:\n$$R_2 = \\left( \\frac{\\text{MACs}}{\\text{output sample}} \\right) \\times \\left( \\frac{\\text{output samples}}{\\text{second}} \\right) = \\left(\\frac{N}{L}\\right) \\times F_{\\text{out}} = \\frac{N}{L} \\times \\left( F_{\\text{in}} \\frac{L}{M} \\right) = \\frac{N F_{\\text{in}}}{M}$$\nThis expression for $R_2$ is valid since the problem specifies an $L$-branch decomposition and $\\text{gcd}(L,M)=1$.\n\nFinally, the speedup factor, $S$, is the ratio of the naive multiplication rate to the optimized rate.\n$$S = \\frac{R_1}{R_2} = \\frac{N L F_{\\text{in}}}{N F_{\\text{in}} / M} = L M$$\n\nNow we evaluate these expressions for the given values: $L=7$, $M=5$, $N=301$, and $F_{\\text{in}}=96\\,\\mathrm{kHz} = 96000\\,\\mathrm{Hz}$.\nNote that $\\text{gcd}(7,5)=1$, validating our use of the simplified formulas.\n\nDirect-form multiplication rate:\n$$R_1 = N L F_{\\text{in}} = 301 \\times 7 \\times 96000 = 2107 \\times 96000 = 202,272,000 \\,\\mathrm{MAC/s}$$\n\nPolyphase-noble multiplication rate:\n$$R_2 = \\frac{N F_{\\text{in}}}{M} = \\frac{301 \\times 96000}{5} = 301 \\times 19200 = 5,779,200 \\,\\mathrm{MAC/s}$$\n\nSpeedup factor:\n$$S = L M = 7 \\times 5 = 35$$\n\nAs a check, we can compute the ratio of the rates: $S = \\frac{202,272,000}{5,779,200} = 35$. The results are consistent.\n\nThe three final values are the direct-form MAC/s, the polyphase MAC/s, and the speedup factor.", "answer": "$$\\boxed{\\begin{pmatrix} 202272000 & 5779200 & 35 \\end{pmatrix}}$$", "id": "2902270"}]}