{"hands_on_practices": [{"introduction": "Decimation is a core operation in multirate signal processing, but it carries the inherent risk of aliasing, where high-frequency components masquerade as low-frequency ones. This exercise challenges you to derive the fundamental limits of decimation from first principles, starting with a wide-sense stationary random process. By determining the maximum integer decimation factor $M$ that avoids aliasing without pre-filtering [@problem_id:2874149], you will solidify your understanding of the relationship between a signal's bandwidth and the permissible rate change.", "problem": "Consider a real-valued wide-sense stationary (WSS) discrete-time random process $x[n]$ with power spectral density $S_{x}(\\mathrm{e}^{\\mathrm{j}\\omega})$ supported on $|\\omega| \\le \\omega_{p}$, where $\\omega_{p} \\in (0,\\pi)$ is a known passband edge in radians per sample. Define the decimated process $y[n] = x[Mn]$ for a positive integer $M$. For this problem, “alias-free without any prefiltering” means that the power spectral density of $y[n]$ contains no overlapping spectral replicas on the principal frequency interval $[-\\pi,\\pi)$ when expressed as a sum of shifted and frequency-scaled copies of $S_{x}(\\mathrm{e}^{\\mathrm{j}\\omega})$ arising from the decimation operation.\n\nStarting only from fundamental definitions for WSS processes (autocorrelation and its discrete-time Fourier transform as the power spectral density), and standard properties of Fourier series for periodic discrete-time exponentials, derive the necessary and sufficient condition on $M$ to avoid aliasing in $y[n]$ and determine the largest integer $M$ for which $y[n]$ is alias-free without any prefiltering. Express your final answer as a single closed-form expression in terms of $\\omega_{p}$ (no units are required).", "solution": "We begin with the definitions for a real-valued wide-sense stationary (WSS) discrete-time random process. Let $r_{x}[m] = \\mathbb{E}\\{x[n]\\;x[n-m]\\}$ denote the autocorrelation sequence, which depends only on the lag $m$ due to stationarity. The power spectral density (PSD) is defined as the discrete-time Fourier transform of the autocorrelation,\n$$\nS_{x}(\\mathrm{e}^{\\mathrm{j}\\omega}) = \\sum_{m=-\\infty}^{\\infty} r_{x}[m]\\,\\mathrm{e}^{-\\mathrm{j}\\omega m},\n$$\nand is $2\\pi$-periodic in $\\omega$. The bandlimited assumption is that $S_{x}(\\mathrm{e}^{\\mathrm{j}\\omega}) = 0$ for $|\\omega| > \\omega_{p}$ with $\\omega_{p} \\in (0,\\pi)$.\n\nConsider the decimated process $y[n] = x[Mn]$ with integer $M \\ge 1$. Its autocorrelation is\n$$\nr_{y}[m] \\triangleq \\mathbb{E}\\{y[n]\\;y[n-m]\\} = \\mathbb{E}\\{x[Mn]\\;x[M(n-m)]\\} = r_{x}[M m].\n$$\nBy definition, the power spectral density of $y[n]$ is\n$$\nS_{y}(\\mathrm{e}^{\\mathrm{j}\\omega}) = \\sum_{m=-\\infty}^{\\infty} r_{y}[m]\\,\\mathrm{e}^{-\\mathrm{j}\\omega m} = \\sum_{m=-\\infty}^{\\infty} r_{x}[M m]\\,\\mathrm{e}^{-\\mathrm{j}\\omega m}.\n$$\nTo relate $S_{y}(\\mathrm{e}^{\\mathrm{j}\\omega})$ to $S_{x}(\\mathrm{e}^{\\mathrm{j}\\omega})$, we use a standard identity that isolates every $M$-th sample of a sequence through the periodic exponential sum\n$$\n\\frac{1}{M}\\sum_{k=0}^{M-1} \\mathrm{e}^{\\mathrm{j}\\frac{2\\pi k}{M} n} =\n\\begin{cases}\n1, & n \\text{ is a multiple of } M,\\\\\n0, & \\text{otherwise}.\n\\end{cases}\n$$\nStarting from the series for $S_{y}$, interpose this identity to select only the indices that are multiples of $M$:\n$$\n\\sum_{m=-\\infty}^{\\infty} r_{x}[M m]\\,\\mathrm{e}^{-\\mathrm{j}\\omega m}\n= \\sum_{n=-\\infty}^{\\infty} r_{x}[n]\\,\\mathrm{e}^{-\\mathrm{j}\\frac{\\omega}{M} n}\\cdot \\frac{1}{M}\\sum_{k=0}^{M-1} \\mathrm{e}^{\\mathrm{j}\\frac{2\\pi k}{M} n}.\n$$\nExchanging the order of summation gives\n$$\nS_{y}(\\mathrm{e}^{\\mathrm{j}\\omega}) = \\frac{1}{M}\\sum_{k=0}^{M-1}\\sum_{n=-\\infty}^{\\infty} r_{x}[n]\\,\\exp\\!\\left(-\\mathrm{j}\\left(\\frac{\\omega - 2\\pi k}{M}\\right) n\\right)\n= \\frac{1}{M}\\sum_{k=0}^{M-1} S_{x}\\!\\left(\\mathrm{e}^{\\mathrm{j}\\frac{\\omega - 2\\pi k}{M}}\\right).\n$$\nThis is the fundamental aliasing relation for decimation in the power spectral density domain. It shows that $S_{y}(\\mathrm{e}^{\\mathrm{j}\\omega})$ is a sum of $M$ replicas of the original $S_{x}$, each frequency-compressed by a factor $M$ and shifted by multiples of $2\\pi$ before wrapping onto the principal interval.\n\nBecause $S_{x}(\\mathrm{e}^{\\mathrm{j}\\Omega})$ is supported on $|\\Omega| \\le \\omega_{p}$, the $k$-th term\n$$\nS_{x}\\!\\left(\\mathrm{e}^{\\mathrm{j}\\frac{\\omega - 2\\pi k}{M}}\\right)\n$$\nis nonzero if and only if\n$$\n\\left|\\frac{\\omega - 2\\pi k}{M}\\right| \\le \\omega_{p}\n\\quad\\Longleftrightarrow\\quad\n|\\omega - 2\\pi k| \\le M\\,\\omega_{p}.\n$$\nThus, on the real line, the support contributed by the $k$-th replica is the interval\n$$\n\\left[2\\pi k - M\\,\\omega_{p},\\; 2\\pi k + M\\,\\omega_{p}\\right],\n$$\nof width $2 M \\omega_{p}$ and centered at $2\\pi k$. When these intervals are wrapped $2\\pi$-periodically onto the principal interval $[-\\pi,\\pi)$, aliasing occurs if and only if adjacent replicas overlap, which happens precisely when\n$$\nM\\,\\omega_{p} > \\pi.\n$$\nTherefore, the necessary and sufficient condition for avoiding aliasing is\n$$\nM\\,\\omega_{p} \\le \\pi.\n$$\nGiven $\\omega_{p} \\in (0,\\pi)$, the largest integer $M$ that satisfies this inequality is\n$$\nM_{\\max} = \\left\\lfloor \\frac{\\pi}{\\omega_{p}} \\right\\rfloor.\n$$\nThis achieves the no-overlap condition, with the case $M\\,\\omega_{p} = \\pi$ yielding adjacent replicas that only touch at endpoints (no overlap of positive measure), which is alias-free in the sense specified.", "answer": "$$\\boxed{\\left\\lfloor \\dfrac{\\pi}{\\omega_{p}} \\right\\rfloor}$$", "id": "2874149"}, {"introduction": "Upsampling, the process of increasing a signal's sampling rate, is a two-step procedure involving zero-insertion and interpolation filtering. To truly grasp what happens in the frequency domain, this practice asks you to trace the journey of a simple cosine signal through an upsampler and a linear interpolator. By deriving the exact mathematical expression for the output signal [@problem_id:2874155], you will discover how spectral images are created and how the interpolation filter shapes their amplitudes, making the theory of image rejection tangible.", "problem": "Consider the discrete-time signal $x[n] = \\cos(\\omega_{0} n)$, where $0 < \\omega_{0} < \\pi$ is in radians. The signal is upsampled by an integer factor $L \\geq 2$ by inserting $L-1$ zeros between consecutive samples, producing $u[n]$, and then filtered by a zero-phase Finite Impulse Response (FIR) interpolator $h[n]$ that implements linear interpolation. The interpolator is defined by\n$$\nh[n] =\n\\begin{cases}\n1 - \\frac{|n|}{L}, & |n| < L,\\\\\n0, & \\text{otherwise},\n\\end{cases}\n$$\nwhich is a real, even, length-$2L-1$ kernel. Assume an idealized zero-phase implementation (noncausal symmetry about $n=0$). Let $y[n]$ denote the output of this upsample-filter chain. Angles are in radians.\n\nStarting only from the definitions of upsampling and linear, time-invariant (LTI) filtering, and from the Discrete-Time Fourier Transform (DTFT), derive the complete closed-form expression for $y[n]$ as a real superposition of cosines. Your derivation must explicitly identify:\n- the discrete-time output frequencies generated by the upsampling operation, and\n- the corresponding amplitudes after linear interpolation by the given $h[n]$,\n\nall as functions of $\\omega_{0}$ and $L$. Express the final answer as a single analytical expression for $y[n]$ that makes the set of output frequencies and their amplitudes explicit. No numerical approximation is required. State your answer in radians.", "solution": "The problem as stated is valid. It is scientifically grounded in the principles of digital signal processing, well-posed with a unique and stable solution, and formulated objectively using precise mathematical language. All necessary information is provided, and there are no internal contradictions. We may therefore proceed with a formal derivation.\n\nThe problem requires the derivation of the output signal $y[n]$ resulting from the upsampling and filtering of an input signal $x[n] = \\cos(\\omega_{0} n)$. The derivation will be conducted in the frequency domain, leveraging the Discrete-Time Fourier Transform (DTFT) as stipulated. The process is as follows: first, we find a representation for the upsampled signal $u[n]$ as a sum of discrete-time sinusoids. Second, we determine the frequency response of the linear interpolator $h[n]$. Finally, we combine these results using the property that a sinusoidal signal passing through a Linear Time-Invariant (LTI) system is scaled and phase-shifted according to the system's frequency response at the sinusoid's frequency.\n\nLet the input signal be $x[n] = \\cos(\\omega_{0} n)$, with $0 < \\omega_0 < \\pi$. Upsampling by a factor of $L$ involves inserting $L-1$ zeros between consecutive samples of $x[n]$. The resulting signal, $u[n]$, is defined as:\n$$\nu[n] =\n\\begin{cases}\nx[n/L] = \\cos(\\omega_{0} n/L), & \\text{if } n \\text{ is a multiple of } L, \\\\\n0, & \\text{otherwise}.\n\\end{cases}\n$$\nThis signal can be expressed more compactly using an impulse train. The function $\\frac{1}{L}\\sum_{k=0}^{L-1} e^{j(2\\pi k/L)n}$ evaluates to $1$ if $n$ is a multiple of $L$ and $0$ otherwise. Therefore, we can write $u[n]$ as the product:\n$$\nu[n] = \\cos(\\omega_{0}n/L) \\left( \\frac{1}{L} \\sum_{k=0}^{L-1} e^{j \\frac{2\\pi k}{L} n} \\right)\n$$\nUsing Euler's identity, $\\cos(\\theta) = \\frac{1}{2}(e^{j\\theta} + e^{-j\\theta})$, we expand this expression:\n$$\nu[n] = \\frac{1}{2L} \\left( e^{j\\frac{\\omega_{0}}{L}n} + e^{-j\\frac{\\omega_{0}}{L}n} \\right) \\sum_{k=0}^{L-1} e^{j \\frac{2\\pi k}{L} n} = \\frac{1}{2L} \\sum_{k=0}^{L-1} \\left( e^{j\\left(\\frac{\\omega_{0}+2\\pi k}{L}\\right)n} + e^{j\\left(\\frac{2\\pi k-\\omega_{0}}{L}\\right)n} \\right)\n$$\nWe can rearrange the second term in the summation by letting $m = L-k$ for $k \\in \\{1, \\dots, L-1\\}$. The complex exponential becomes $e^{j\\left(\\frac{2\\pi(L-m)-\\omega_{0}}{L}\\right)n} = e^{j\\left(2\\pi - \\frac{\\omega_{0}+2\\pi m}{L}\\right)n} = e^{-j\\left(\\frac{\\omega_{0}+2\\pi m}{L}\\right)n}$. The sum over $k$ from $0$ to $L-1$ is equivalent to a sum over $m$ from $0$ to $L-1$. Thus, the expression simplifies to:\n$$\nu[n] = \\frac{1}{L} \\sum_{k=0}^{L-1} \\frac{1}{2} \\left( e^{j\\left(\\frac{\\omega_{0}+2\\pi k}{L}\\right)n} + e^{-j\\left(\\frac{\\omega_{0}+2\\pi k}{L}\\right)n} \\right) = \\frac{1}{L} \\sum_{k=0}^{L-1} \\cos\\left( \\left(\\frac{\\omega_{0}+2\\pi k}{L}\\right) n \\right)\n$$\nThis shows that the upsampled signal $u[n]$ is a superposition of $L$ cosines. The frequencies generated by the upsampling operation are explicitly identified as:\n$$\n\\Omega_k = \\frac{\\omega_{0}+2\\pi k}{L}, \\quad \\text{for } k \\in \\{0, 1, \\dots, L-1\\}\n$$\nNext, we determine the frequency response $H(e^{j\\omega})$ of the FIR interpolator $h[n]$. The impulse response is a triangular pulse defined as $h[n] = 1 - \\frac{|n|}{L}$ for $|n|<L$. This can be written as $h[n] = \\frac{1}{L}(L-|n|)$. It is a known result that a discrete-time triangular pulse of the form $L-|n|$ for $|n|<L$ is the convolution of two rectangular pulses of length $L$. Let $r[n] = 1$ for $n \\in \\{0, \\dots, L-1\\}$ and $0$ otherwise. The convolution $(r*r[-n])[n]$ is precisely $L-|n|$ for $|n|<L$.\nThe DTFT of $r[n]$ is $R(e^{j\\omega}) = \\sum_{n=0}^{L-1} e^{-j\\omega n} = e^{-j\\omega(L-1)/2} \\frac{\\sin(\\omega L/2)}{\\sin(\\omega/2)}$.\nThe DTFT of $r[-n]$ is $R(e^{-j\\omega}) = R^*(e^{j\\omega})$ since $r[n]$ is real.\nBy the convolution property of the DTFT, the transform of $(r*r[-n])[n]$ is $R(e^{j\\omega})R^*(e^{j\\omega}) = |R(e^{j\\omega})|^2$.\n$$\n\\text{DTFT}\\{L-|n|\\} = \\left| e^{-j\\omega(L-1)/2} \\frac{\\sin(\\omega L/2)}{\\sin(\\omega/2)} \\right|^2 = \\left( \\frac{\\sin(\\omega L/2)}{\\sin(\\omega/2)} \\right)^2\n$$\nSince $h[n] = \\frac{1}{L}(L-|n|)$, its frequency response is:\n$$\nH(e^{j\\omega}) = \\frac{1}{L} \\left( \\frac{\\sin(\\omega L/2)}{\\sin(\\omega/2)} \\right)^2\n$$\nThe output signal $y[n]$ is the convolution $y[n] = (h*u)[n]$. Due to the linearity of convolution, we have:\n$$\ny[n] = h[n] * \\left( \\frac{1}{L} \\sum_{k=0}^{L-1} \\cos(\\Omega_k n) \\right) = \\frac{1}{L} \\sum_{k=0}^{L-1} (h * \\cos(\\Omega_k n))[n]\n$$\nThe response of an LTI system with impulse response $h[n]$ to a sinusoidal input $\\cos(\\Omega_k n)$ is given by $|H(e^{j\\Omega_k})|\\cos(\\Omega_k n + \\angle H(e^{j\\Omega_k}))$. The filter $h[n]$ is real and even, so its DTFT, $H(e^{j\\omega})$, is real and even. Thus, the phase $\\angle H(e^{j\\Omega_k})$ is always $0$ or $\\pi$. Since $H(e^{j\\omega})$ is a squared quantity, it is non-negative, so the phase is $0$. The response to $\\cos(\\Omega_k n)$ is simply $H(e^{j\\Omega_k}) \\cos(\\Omega_k n)$.\nSubstituting this into the expression for $y[n]$:\n$$\ny[n] = \\frac{1}{L} \\sum_{k=0}^{L-1} H(e^{j\\Omega_k}) \\cos(\\Omega_k n)\n$$\nWe now evaluate $H(e^{j\\Omega_k})$ by substituting $\\omega = \\Omega_k = \\frac{\\omega_{0}+2\\pi k}{L}$:\n$$\nH(e^{j\\Omega_k}) = \\frac{1}{L} \\left( \\frac{\\sin(\\Omega_k L/2)}{\\sin(\\Omega_k/2)} \\right)^2 = \\frac{1}{L} \\left( \\frac{\\sin\\left(\\frac{(\\omega_{0}+2\\pi k)}{L} \\frac{L}{2}\\right)}{\\sin\\left(\\frac{\\omega_{0}+2\\pi k}{2L}\\right)} \\right)^2 = \\frac{1}{L} \\left( \\frac{\\sin\\left(\\frac{\\omega_{0}}{2} + k\\pi\\right)}{\\sin\\left(\\frac{\\omega_{0}+2\\pi k}{2L}\\right)} \\right)^2\n$$\nSince $\\sin(\\theta + k\\pi) = (-1)^k \\sin(\\theta)$, the numerator term becomes $(\\sin(\\frac{\\omega_{0}}{2} + k\\pi))^2 = ((-1)^k \\sin(\\frac{\\omega_{0}}{2}))^2 = \\sin^2(\\frac{\\omega_{0}}{2})$.\nTherefore, the filter gain at each frequency $\\Omega_k$ is:\n$$\nH(e^{j\\Omega_k}) = \\frac{1}{L} \\frac{\\sin^2(\\omega_{0}/2)}{\\sin^2\\left(\\frac{\\omega_{0}+2\\pi k}{2L}\\right)}\n$$\nThe amplitudes of the cosine components in the output signal $y[n]$ are given by $\\frac{1}{L}H(e^{j\\Omega_k})$. These are:\n$$\nA_k = \\frac{1}{L^2} \\frac{\\sin^2(\\omega_{0}/2)}{\\sin^2\\left(\\frac{\\omega_{0}+2\\pi k}{2L}\\right)}\n$$\nFinally, the complete closed-form expression for the output signal $y[n]$ is obtained by substituting the amplitudes back into the sum:\n$$\ny[n] = \\sum_{k=0}^{L-1} \\left( \\frac{1}{L^2} \\frac{\\sin^2(\\omega_{0}/2)}{\\sin^2\\left(\\frac{\\omega_{0}+2\\pi k}{2L}\\right)} \\right) \\cos\\left( \\left(\\frac{\\omega_{0}+2\\pi k}{L}\\right) n \\right)\n$$\nThis expression represents the output as a real superposition of $L$ cosines, with explicitly identified frequencies $\\Omega_k$ and their corresponding amplitudes $A_k$, as required.", "answer": "$$\\boxed{y[n] = \\sum_{k=0}^{L-1} \\left( \\frac{1}{L^2} \\frac{\\sin^2(\\omega_{0}/2)}{\\sin^2\\left(\\frac{\\omega_{0}+2\\pi k}{2L}\\right)} \\right) \\cos\\left( \\left(\\frac{\\omega_{0}+2\\pi k}{L}\\right) n \\right)}$$", "id": "2874155"}, {"introduction": "Theory meets practice in the design of an asynchronous sample rate converter (SRC), a system that must bridge arbitrary sampling rates while preserving signal fidelity. This comprehensive design exercise guides you through the engineering trade-offs required for a high-quality, efficient SRC using a windowed-sinc kernel and polyphase tables. By calculating the necessary filter length and table sizes to meet specific error budgets [@problem_id:2874140], you will translate theoretical multirate concepts into tangible design parameters that balance performance against computational and memory costs.", "problem": "Design and analyze an asynchronous Sample Rate Conversion (SRC) stage implemented by a windowed-sinc Finite Impulse Response (FIR) kernel with dynamic polyphase tables. The SRC maps an input discrete-time signal with sampling rate $f_{\\mathrm{i}}$ (in Hz) to an output sampling rate $f_{\\mathrm{o}}$ (in Hz) with a generally irrational ratio $r = f_{\\mathrm{o}}/f_{\\mathrm{i}}$. The kernel is a truncated and windowed approximation to ideal bandlimited interpolation. The dynamic polyphase structure uses a lookup table of fractional-delay phases to evaluate the kernel at the instantaneous fractional delay induced by resampling. The goals are to (i) determine the minimum filter length $N$ needed to satisfy a specified passband ripple, (ii) determine the minimum number of stored fractional-delay phases $P$ to satisfy a specified maximum total passband magnitude-error budget, and (iii) compute the total memory required to store the coefficient tables and the input state buffer.\n\nStart from first principles appropriate for multirate signal processing and linear time-invariant FIR filter design:\n\n- Ideal bandlimited interpolation is characterized by the sinc kernel, and real implementations approximate it via finite-length FIR filters obtained by truncation and windowing of the sinc.\n- To avoid aliasing and imaging in asynchronous resampling, the baseband must be restricted to a common passband that is valid for both the input and the output sampling rates.\n- Classical window design connects the achievable stopband attenuation to the window parameter and the required transition width, and hence to the minimum FIR length.\n- Quantization of the fractional delay by a finite phase-table density introduces an additional deviation in the passband magnitude that must be kept within the remaining error budget not used by passband ripple.\n\nYour program must implement the following logic, derived from these bases:\n\n1. Determine the stopband edge $\\,\\Omega_{\\mathrm{s}}$ in radians per sample, normalized to the input sampling grid. Show that the common baseband constraint for asynchronous conversion implies $\\,\\Omega_{\\mathrm{s}} = \\pi \\,\\min(1, r)$, and choose a passband edge $\\,\\Omega_{\\mathrm{p}} = \\Omega_{\\mathrm{s}} - \\Delta\\omega$, where $\\,\\Delta\\omega$ is the nonnegative transition width in radians. All angles must be in radians.\n\n2. Given a passband ripple specification $\\,\\delta_{\\mathrm{p}}$ (dimensionless, use decimal form, not a percentage), and a transition width $\\,\\Delta\\omega$, derive a lower bound on the FIR length $N$ so that a windowed-sinc low-pass filter can achieve the specified ripple. Use a well-tested window design framework to connect stopband attenuation to $\\,\\delta_{\\mathrm{p}}$ and to $\\,\\Delta\\omega$, and from there to the minimum integer $N$. Choose $N$ to be the smallest odd integer that satisfies the bound.\n\n3. Given a maximum total passband magnitude-error budget $\\,\\delta_{\\max}$ (dimensionless), allocate the remaining error to phase-table quantization after accounting for the passband ripple, that is, $\\,\\delta_{\\mathrm{phase}} = \\delta_{\\max} - \\delta_{\\mathrm{p}}$. Use small-angle bounds for complex exponentials to upper-bound the passband magnitude deviation caused by fractional-delay quantization with nearest-neighbor phase selection from $P$ uniformly spaced phases over one-sample delay. Derive a sufficient lower bound on $P$ that guarantees the induced deviation over $[0,\\Omega_{\\mathrm{p}}]$ does not exceed $\\,\\delta_{\\mathrm{phase}}$, and then choose $P$ as the smallest integer that satisfies the bound with $P \\ge 1$.\n\n4. Assume $32$-bit floating-point storage for both coefficients and samples. Compute the total memory in bytes as\n$$\nM = P \\, N \\, B_{\\mathrm{c}} + N \\, B_{\\mathrm{s}},\n$$\nwhere $B_{\\mathrm{c}} = 4$ bytes per coefficient and $B_{\\mathrm{s}} = 4$ bytes per state-sample, and only one input delay-line of length $N$ is kept. If the specification is infeasible because $\\,\\Delta\\omega \\ge \\Omega_{\\mathrm{s}}$ or $\\,\\delta_{\\mathrm{phase}} \\le 0$, return the integer $-1$ for that test case.\n\nAngle units must be radians everywhere. Memory must be expressed in bytes as an integer. All ripples and error budgets must be decimals (for example, $0.001$) and not percentages.\n\nImplement your solution as a complete, runnable program that applies the above design to the following test suite. Each test case is a tuple $(f_{\\mathrm{i}}, f_{\\mathrm{o}}, \\mathrm{tw}, \\delta_{\\mathrm{p}}, \\delta_{\\max})$, where $\\mathrm{tw}$ is the transition width expressed as a fraction of $\\pi$, so that $\\Delta\\omega = \\pi \\,\\mathrm{tw}$:\n\n- Test 1 (happy path downsampling): $(48000, 44100, 0.05, 0.001, 0.002)$\n- Test 2 (happy path upsampling): $(44100, 96000, 0.10, 0.0005, 0.0012)$\n- Test 3 (infeasible error budget boundary): $(48000, 48000, 0.02, 0.0001, 0.0001)$\n- Test 4 (strong downsampling with narrow transition): $(192000, 8000, 0.01, 0.002, 0.005)$\n- Test 5 (infeasible transition width): $(22050, 11025, 0.60, 0.001, 0.002)$\n\nYour program must print a single line containing the results for the test suite as a comma-separated list enclosed in square brackets (for example, `[m_1,m_2,m_3,m_4,m_5]`), where each `m_k` is the integer total memory in bytes for test `k` or `-1` if infeasible.", "solution": "The supplied problem is subjected to rigorous validation.\n\n### Step 1: Extraction of Givens\n- **Input Signal Rate**: $f_{\\mathrm{i}}$ in Hz.\n- **Output Signal Rate**: $f_{\\mathrm{o}}$ in Hz.\n- **Resampling Ratio**: $r = f_{\\mathrm{o}}/f_{\\mathrm{i}}$.\n- **Core Technology**: Asynchronous Sample Rate Conversion (SRC) using a windowed-sinc Finite Impulse Response (FIR) kernel with dynamic polyphase tables.\n- **Filter Length**: $N$, to be determined.\n- **Number of Polyphase Phases**: $P$, to be determined.\n- **Passband Ripple Specification**: $\\delta_{\\mathrm{p}}$ (dimensionless).\n- **Maximum Total Passband Magnitude Error**: $\\delta_{\\max}$ (dimensionless).\n- **Transition Width**: $\\Delta\\omega$ in radians per sample, derived from a fractional parameter $\\mathrm{tw}$ as $\\Delta\\omega = \\pi \\cdot \\mathrm{tw}$.\n- **Stopband Edge Frequency**: $\\Omega_{\\mathrm{s}} = \\pi \\min(1, r)$ radians/sample, normalized to the input sampling grid.\n- **Passband Edge Frequency**: $\\Omega_{\\mathrm{p}} = \\Omega_{\\mathrm{s}} - \\Delta\\omega$ radians/sample.\n- **Filter Length Constraint**: $N$ must be the smallest odd integer satisfying the design requirements.\n- **Phase Quantization Error Budget**: $\\delta_{\\mathrm{phase}} = \\delta_{\\max} - \\delta_{\\mathrm{p}}$.\n- **Phase Table Size Constraint**: $P$ must be the smallest integer such that $P \\ge 1$ satisfying the error budget $\\delta_{\\mathrm{phase}}$.\n- **Storage**: $B_{\\mathrm{c}} = 4$ bytes for a $32$-bit float coefficient; $B_{\\mathrm{s}} = 4$ bytes for a $32$-bit float state-sample.\n- **Total Memory Calculation**: $M = P \\cdot N \\cdot B_{\\mathrm{c}} + N \\cdot B_{\\mathrm{s}}$.\n- **Infeasibility Conditions**: The design is infeasible if $\\Delta\\omega \\ge \\Omega_{\\mathrm{s}}$ or if $\\delta_{\\mathrm{phase}} \\le 0$. In such cases, the output is $-1$.\n\n### Step 2: Validation\nThe problem is scientifically grounded in the established principles of digital signal processing, specifically multirate systems and FIR filter design. The concepts of sinc interpolation, windowing methods, polyphase structures, and error budgeting are standard and accurately represented. The problem is well-posed, providing a clear, deterministic path from a set of inputs to a unique output. It is expressed in objective, technical language. The requirement to use a \"well-tested window design framework\" is interpreted as employing standard empirical formulas, for which the Kaiser window design equations are a suitable and industry-standard choice. The derivation for the phase table size is guided by a hint to use small-angle approximations, which points toward a standard analysis of phase quantization error. The problem is self-contained, consistent, and formalizable.\n\n### Step 3: Verdict\nThe problem is deemed **valid**. A complete solution will be developed based on the principles outlined.\n\n### Solution Derivation\nThe solution is derived by following the sequence of steps specified in the problem statement.\n\n**1. Passband and Stopband Edge Frequencies**\n\nThe foundation of asynchronous sample rate conversion is to treat the discrete-time input signal as samples of an underlying continuous-time bandlimited signal, which is then resampled at the new output rate. To prevent aliasing upon resampling, the signal's bandwidth must be limited to below the Nyquist frequency of *both* the input and output sampling grids.\nThe input Nyquist frequency is $\\pi$ radians per input sample. The output Nyquist frequency, when mapped back to the input grid, is $\\pi \\cdot (f_{\\mathrm{o}}/f_{\\mathrm{i}}) = \\pi r$ radians per input sample. Therefore, the signal must be low-pass filtered with a cutoff frequency below the minimum of these two Nyquist frequencies. This dictates the stopband edge $\\Omega_{\\mathrm{s}}$ of the required anti-aliasing/anti-imaging filter, normalized to the input sampling rate $f_{\\mathrm{i}}$:\n$$\n\\Omega_{\\mathrm{s}} = \\min(\\pi, \\pi r) = \\pi \\min(1, r)\n$$\nThe passband of the filter must end before the transition to the stopband begins. Given a specified transition width $\\Delta\\omega$, the passband edge frequency $\\Omega_{\\mathrm{p}}$ is:\n$$\n\\Omega_{\\mathrm{p}} = \\Omega_{\\mathrm{s}} - \\Delta\\omega\n$$\nA physically meaningful filter requires a non-negative transition region, so $\\Delta\\omega < \\Omega_{\\mathrm{s}}$. If $\\Delta\\omega \\ge \\Omega_{\\mathrm{s}}$, the passband width would be zero or negative, which is an infeasible specification.\n\n**2. FIR Filter Length $N$**\n\nThe FIR filter approximates the ideal brick-wall low-pass response. A windowed-sinc design is specified. The filter length $N$ is primarily determined by the desired sharpness of the transition band, $\\Delta\\omega$, and the required stopband attenuation, $A$. The passband ripple specification, $\\delta_{\\mathrm{p}}$, is used to determine $A$. For linear-phase FIR filters designed by windowing, a reasonable approximation is that the passband ripple and stopband ripple are equal: $\\delta_{\\mathrm{s}} \\approx \\delta_{\\mathrm{p}}$. The stopband attenuation in decibels is defined as:\n$$\nA = -20 \\log_{10}(\\delta_{\\mathrm{p}})\n$$\nWe employ the empirical formulas for the Kaiser window, which provide a relationship between filter length $N$, transition width $\\Delta\\omega$, and attenuation $A$. The required filter order $M=N-1$ is given by:\n$$\nM \\approx \\frac{A - 8}{2.285 \\Delta\\omega}\n$$\nTherefore, the required filter length $N = M+1$ is:\n$$\nN \\ge \\frac{A - 8}{2.285 \\Delta\\omega} + 1\n$$\nThe problem demands the smallest *odd* integer for $N$ that satisfies this bound. This ensures a Type I linear-phase filter with an integer sample delay. We calculate the floating-point lower bound for $N$, take its ceiling to find the minimum integer length, and increment to the next odd integer if the result is even.\n\n**3. Polyphase Table Size $P$**\n\nThe total passband magnitude error budget $\\delta_{\\max}$ is allocated between the filter's intrinsic passband ripple $\\delta_{\\mathrm{p}}$ and the error introduced by quantizing the fractional delay. The budget remaining for the delay quantization is:\n$$\n\\delta_{\\mathrm{phase}} = \\delta_{\\max} - \\delta_{\\mathrm{p}}\n$$\nIf $\\delta_{\\mathrm{phase}} \\le 0$, the filter's ripple alone consumes the entire error budget, making the specification infeasible.\n\nA polyphase table with $P$ entries quantizes the continuous fractional delay $\\tau \\in [0, 1)$ to the nearest value in the set $\\{0, 1/P, \\dots, (P-1)/P\\}$. The maximum error in the fractional delay is $\\Delta\\tau_{\\max} = 1/(2P)$ samples. This time-domain error perturbs the ideal fractional delay filter response, $e^{-j\\omega\\tau}$. The relative error introduced is $e^{-j\\omega\\Delta\\tau} - 1$. Assuming the target passband magnitude is unity, the magnitude of this complex error term provides a good approximation of the resulting passband magnitude deviation:\n$$\n\\text{Error}(\\omega, \\Delta\\tau) = |e^{-j\\omega\\Delta\\tau} - 1| = \\sqrt{(\\cos(\\omega\\Delta\\tau) - 1)^2 + \\sin^2(\\omega\\Delta\\tau)} = 2|\\sin(\\omega\\Delta\\tau/2)|\n$$\nThis error is maximized at the passband edge $\\omega = \\Omega_{\\mathrm{p}}$ and for the maximum delay error $|\\Delta\\tau| = 1/(2P)$. To satisfy the specification, we must ensure this maximum error does not exceed $\\delta_{\\mathrm{phase}}$:\n$$\n2\\sin\\left(\\frac{\\Omega_{\\mathrm{p}}}{4P}\\right) \\le \\delta_{\\mathrm{phase}}\n$$\nUsing the inequality $\\sin(x) \\le x$ for $x \\ge 0$, we derive a sufficient condition that is simpler to solve:\n$$\n2\\left(\\frac{\\Omega_{\\mathrm{p}}}{4P}\\right) \\le \\delta_{\\mathrm{phase}} \\implies \\frac{\\Omega_{\\mathrm{p}}}{2P} \\le \\delta_{\\mathrm{phase}}\n$$\nFrom this, we obtain a lower bound for $P$:\n$$\nP \\ge \\frac{\\Omega_{\\mathrm{p}}}{2 \\cdot \\delta_{\\mathrm{phase}}}\n$$\nThe problem requires choosing the smallest integer $P \\ge 1$ that satisfies this bound. Thus, we compute the ceiling of this lower bound and ensure it is at least $1$.\n\n**4. Total Memory $M$**\n\nThe total memory is the sum of memory for the coefficient tables and the input signal state buffer (delay line).\n- The coefficient table stores $N$ coefficients for each of the $P$ fractional phases. With $B_{\\mathrm{c}}=4$ bytes per coefficient, this is $P \\cdot N \\cdot B_{\\mathrm{c}}$ bytes.\n- The input state buffer must hold a history of $N$ input samples to compute one output sample. With $B_{\\mathrm{s}}=4$ bytes per sample, this is $N \\cdot B_{\\mathrm{s}}$ bytes.\n\nThe total memory in bytes is therefore:\n$$\nM = P \\cdot N \\cdot B_{\\mathrm{c}} + N \\cdot B_{\\mathrm{s}} = (P \\cdot B_{\\mathrm{c}} + B_{\\mathrm{s}}) \\cdot N\n$$\nThis provides the final integer result for each valid test case. If a case is found to be infeasible at any stage, the result is $-1$.", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Designs an asynchronous SRC stage and calculates the required memory.\n\n    The function implements the logic derived from first principles of multirate\n    signal processing and FIR filter design to determine the minimum filter length N\n    and polyphase table size P, and from them, the total memory M.\n    \"\"\"\n\n    # Test cases: (f_i, f_o, tw, delta_p, delta_max)\n    # f_i, f_o: input/output sampling rates in Hz\n    # tw: transition width as a fraction of pi\n    # delta_p: passband ripple (dimensionless)\n    # delta_max: total passband magnitude error budget (dimensionless)\n    test_cases = [\n        (48000, 44100, 0.05, 0.001, 0.002),\n        (44100, 96000, 0.10, 0.0005, 0.0012),\n        (48000, 48000, 0.02, 0.0001, 0.0001),\n        (192000, 8000, 0.01, 0.002, 0.005),\n        (22050, 11025, 0.60, 0.001, 0.002),\n    ]\n\n    results = []\n    \n    # Storage size in bytes for 32-bit floats\n    B_c = 4  # Bytes per coefficient\n    B_s = 4  # Bytes per state-sample\n\n    for case in test_cases:\n        f_i, f_o, tw, delta_p, delta_max = case\n\n        # Step 1: Determine stopband and passband edges\n        r = f_o / f_i\n        delta_omega = np.pi * tw\n        Omega_s = np.pi * min(1, r)\n\n        # Infeasibility Check 1: Non-positive passband width\n        if delta_omega >= Omega_s:\n            results.append(-1)\n            continue\n            \n        Omega_p = Omega_s - delta_omega\n\n        # Step 3 (part 1): Determine phase quantization error budget\n        delta_phase = delta_max - delta_p\n        \n        # Infeasibility Check 2: Non-positive error budget for phase quantization\n        if delta_phase <= 0:\n            results.append(-1)\n            continue\n\n        # Step 2: Determine FIR filter length N using Kaiser window formula\n        # Stopband attenuation in dB\n        A = -20 * np.log10(delta_p)\n        \n        # Kaiser window empirical formula for filter length N\n        # N >= (A - 8) / (2.285 * delta_omega) + 1\n        # The formula applies for A > 8. All test cases satisfy this.\n        n_float = (A - 8) / (2.285 * delta_omega) + 1\n        \n        # N must be the smallest odd integer satisfying the bound\n        N = int(np.ceil(n_float))\n        if N % 2 == 0:\n            N += 1\n\n        # Step 3 (part 2): Determine polyphase table size P\n        # Lower bound for P from passband magnitude error constraint\n        # P >= Omega_p / (2 * delta_phase)\n        p_float = Omega_p / (2 * delta_phase)\n        \n        # P must be the smallest integer >= 1 satisfying the bound\n        P = int(np.ceil(p_float))\n        if P < 1:\n            P = 1\n\n        # Step 4: Compute total memory M\n        M = P * N * B_c + N * B_s\n        results.append(int(M))\n\n    # Print the final results in the specified format\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2874140"}]}