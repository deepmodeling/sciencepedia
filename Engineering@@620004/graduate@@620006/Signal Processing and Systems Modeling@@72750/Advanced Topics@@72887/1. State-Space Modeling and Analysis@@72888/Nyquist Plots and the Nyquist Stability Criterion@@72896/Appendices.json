{"hands_on_practices": [{"introduction": "A primary application of feedback control is to stabilize systems that are inherently unstable in open-loop. The Nyquist stability criterion provides a powerful graphical tool for both analyzing and achieving this stabilization. This exercise presents a classic scenario where an open-loop unstable system, characterized by having poles in the right-half plane ($P > 0$), must be stabilized. You will apply the criterion $N=Z-P$ to discover that stability ($Z=0$) necessitates a specific, non-zero number of encirclements ($N = -P$) of the critical point, a counter-intuitive yet fundamental result in control theory. This practice is invaluable for building intuition on how controller gain can be used to reshape the Nyquist plot to achieve closed-loop stability [@problem_id:2728471].", "problem": "Consider a unity-feedback loop with open-loop transfer function $L(s)=\\dfrac{K}{(s-1)(s+3)}$, where $K \\in \\mathbb{R}$ and the open-loop has one right-half-plane pole at $s=1$. Using the Nyquist Stability Criterion (NSC), reason from first principles of the argument principle and the mapping $s \\mapsto L(s)$ to determine the net encirclement of the point $-1$ required to achieve $Z=0$ (no right-half-plane zeros of $1+L(s)$). Then, analyze the parametric frequency response $L(\\mathrm{j}\\omega)$ to find the exact critical gain $K^{\\star}0$ at which the Nyquist plot passes through $-1$, thereby separating stable from unstable closed-loop behavior. Provide an exact value for $K^{\\star}$; no rounding is required. Report only $K^{\\star}$ as your final answer.", "solution": "The problem requires an analysis of the stability of a unity-feedback closed-loop system using the Nyquist Stability Criterion. The open-loop transfer function is given as $L(s) = \\dfrac{K}{(s-1)(s+3)}$, with $K \\in \\mathbb{R}$ and $K>0$.\n\nThe Nyquist Stability Criterion is a direct application of Cauchy's Argument Principle. It states that $Z = N + P$, where:\n$P$ is the number of open-loop poles of $L(s)$ in the open right-half-plane (RHP).\n$Z$ is the number of zeros of the characteristic equation, $1+L(s)=0$, in the RHP. These are the closed-loop poles in the RHP.\n$N$ is the number of net counter-clockwise (CCW) encirclements of the critical point $-1+j0$ by the Nyquist plot of $L(s)$. A clockwise (CW) encirclement counts as a negative encirclement.\n\nFirst, we must validate the givens and determine the parameters of the criterion.\nThe open-loop transfer function $L(s)$ has poles at $s=1$ and $s=-3$. The pole at $s=1$ lies in the RHP. Therefore, the number of unstable open-loop poles is $P=1$.\n\nFor the closed-loop system to be stable, it must have no poles in the RHP. This corresponds to the condition $Z=0$.\nSubstituting $Z=0$ and $P=1$ into the Nyquist equation, we find the required number of encirclements for stability:\n$$0 = N + 1 \\implies N = -1$$\nThus, for the closed-loop system to be stable, the Nyquist plot of $L(s)$ must encircle the point $-1+j0$ exactly once in the clockwise direction.\n\nNext, we analyze the Nyquist plot, which is the locus of $L(s)$ evaluated along the standard Nyquist D-contour. For practical purposes, we first examine the mapping of the imaginary axis, $s=j\\omega$, for $\\omega \\in (-\\infty, \\infty)$. The frequency response is:\n$$L(j\\omega) = \\frac{K}{(j\\omega-1)(j\\omega+3)}$$\nTo find the points where the plot intersects the real axis, we must find the frequencies $\\omega$ for which the imaginary part of $L(j\\omega)$ is zero. We rationalize the expression:\n$$L(j\\omega) = \\frac{K}{(j\\omega-1)(j\\omega+3)} = \\frac{K}{-\\omega^2 - 3 + j(2\\omega)}$$\n$$L(j\\omega) = \\frac{K}{(-\\omega^2 - 3) + j(2\\omega)} \\cdot \\frac{(-\\omega^2 - 3) - j(2\\omega)}{(-\\omega^2 - 3) - j(2\\omega)} = \\frac{K(-\\omega^2 - 3) - j(2K\\omega)}{(-\\omega^2 - 3)^2 + (2\\omega)^2}$$\nThe real and imaginary parts are:\n$$\\text{Re}[L(j\\omega)] = \\frac{K(-\\omega^2 - 3)}{(\\omega^2+3)^2 + 4\\omega^2}$$\n$$\\text{Im}[L(j\\omega)] = \\frac{-2K\\omega}{(\\omega^2+3)^2 + 4\\omega^2}$$\nFor the plot to be on the real axis, $\\text{Im}[L(j\\omega)]$ must be zero. Given that $K>0$, this condition, $\\text{Im}[L(j\\omega)]=0$, is only satisfied when $\\omega=0$. This means the Nyquist plot for $\\omega \\in (-\\infty, \\infty)$ crosses the real axis only at the frequency $\\omega=0$.\n\nWe evaluate the function at this crossing frequency:\n$$L(j0) = \\frac{K}{(-1)(3)} = -\\frac{K}{3}$$\nFor $\\omega \\to \\infty$, the magnitude $|L(j\\omega)| \\approx |\\frac{K}{(j\\omega)^2}| = \\frac{K}{\\omega^2} \\to 0$. The plot approaches the origin as $\\omega \\to \\pm\\infty$.\nFor $\\omega>0$, $\\text{Re}[L(j\\omega)]  0$ and $\\text{Im}[L(j\\omega)]  0$. The plot for $\\omega \\in (0, \\infty)$ lies in the third quadrant.\nFor $\\omega0$, $\\text{Re}[L(j\\omega)]  0$ and $\\text{Im}[L(j\\omega)] > 0$. The plot for $\\omega \\in (-\\infty, 0)$ lies in the second quadrant.\nThe complete Nyquist plot, including the mapping of the large RHP semicircle which maps to the origin, forms a closed loop that starts at the origin, moves through the second quadrant to the point $-\\frac{K}{3}$ on the real axis, and returns to the origin through the third quadrant. It is a circle with diameter on the real axis between $0$ and $-K/3$.\n\nThe stability of the system depends on the position of the point $-1$ relative to this plot.\nIf the point $-1$ is enclosed by the plot, the encirclement count is $N=-1$ (one clockwise encirclement), which leads to $Z = -1 + P = -1 + 1 = 0$. The system is stable. This occurs if the leftmost point of the plot, $-K/3$, is to the left of $-1$.\n$$-\\frac{K}{3}  -1 \\implies K > 3$$\nIf the point $-1$ is not enclosed, the encirclement count is $N=0$, which leads to $Z = 0 + P = 1$. The system is unstable. This occurs if the point $-K/3$ is to the right of $-1$.\n$$-\\frac{K}{3} > -1 \\implies 0  K  3$$\nThe critical gain $K^{\\star}$ corresponds to the boundary case where the Nyquist plot passes directly through the point $-1+j0$. This occurs when the real-axis intercept is exactly at $-1$.\n$$L(j0) = -\\frac{K^{\\star}}{3} = -1$$\nSolving for $K^{\\star}$ gives:\n$$K^{\\star} = 3$$\nAt this gain, the system is marginally stable, with a closed-loop pole at $s=j\\omega=j0$, i.e., $s=0$. For any $K>3$, the system is stable. The critical gain at which the plot passes through $-1$ is precisely $3$.", "answer": "$$\\boxed{3}$$", "id": "2728471"}, {"introduction": "While many introductory problems focus on rational transfer functions, real-world systems often include more complex elements like time delays. A delay term, represented by $\\exp(-sT)$, makes the transfer function transcendental, rendering polynomial-based stability tests like Routh-Hurwitz inapplicable. The Nyquist criterion, however, handles such systems with elegance, as the delay simply introduces a frequency-dependent phase lag of $-\\omega T$. This practice demonstrates the unique power of the Nyquist method by asking you to find the critical time delay $T_c$ that causes the Nyquist plot to pass through the $-1$ point, an event corresponding to a Hopf bifurcation and the onset of instability [@problem_id:2888094].", "problem": "A single-input single-output unity-feedback Linear Time-Invariant (LTI) loop has open-loop transfer function with input-to-output delay given by\n$$\nL(s) = \\frac{K \\exp(-s T)}{s(s+1)},\n$$\nwhere $K \\gt 0$ is a static loop gain and $T \\ge 0$ is a pure time delay. The closed-loop characteristic equation is $1 + L(s) = 0$. A Hopf bifurcation in the closed-loop occurs when a complex conjugate pair of characteristic roots crosses the imaginary axis, which is equivalent (by the Nyquist stability criterion) to the Nyquist locus of $L(j\\omega)$ passing through the point $-1$ in the complex plane.\n\nUsing only the fundamental definition of the Nyquist stability criterion and basic properties of frequency response of rational functions and pure delays, determine the smallest positive delay $T = T_c(K)$ for which the Nyquist locus of $L(j\\omega)$ passes through $-1$. Provide an exact closed-form expression for $T_c(K)$ in terms of $K$ only. Use radians for all angles. Express your final answer as an exact symbolic expression; no numerical rounding is required. For definiteness, report $T_c(K)$ in seconds, assuming $s$ has units of $s^{-1}$ and $T$ has units of $s$.", "solution": "The problem as stated is scientifically grounded, well-posed, and objective. It presents a standard exercise in the stability analysis of linear time-invariant systems with pure time delay, using the fundamental principles of the Nyquist stability criterion. All necessary information is provided, and the problem contains no contradictions, ambiguities, or factual unsoundness. We may therefore proceed with a rigorous derivation of the solution.\n\nThe problem requires finding the smallest positive delay $T = T_c(K)$ for which the Nyquist locus of the open-loop transfer function $L(s)$ passes through the critical point $-1$ in the complex plane. This condition is expressed by the equation $L(j\\omega) = -1$ for some frequency $\\omega > 0$.\n\nThe open-loop transfer function is given as:\n$$\nL(s) = \\frac{K \\exp(-s T)}{s(s+1)}\n$$\nWe substitute $s = j\\omega$, where $j = \\sqrt{-1}$, into the equation $L(s) = -1$:\n$$\n\\frac{K \\exp(-j\\omega T)}{j\\omega(j\\omega+1)} = -1\n$$\nThis complex equation can be separated into two real equations by considering the magnitude and phase of each side.\n\nFirst, we analyze the magnitude equation:\n$$\n\\left| \\frac{K \\exp(-j\\omega T)}{j\\omega(j\\omega+1)} \\right| = |-1|\n$$\nThe magnitude of the left-hand side is calculated as:\n$$\n\\frac{|K| |\\exp(-j\\omega T)|}{|j\\omega| |j\\omega+1|} = 1\n$$\nGiven that $K > 0$, we have $|K| = K$. The magnitude of the complex exponential is $|\\exp(-j\\omega T)| = 1$. The magnitudes of the denominator terms are $|j\\omega| = \\omega$ (for $\\omega > 0$) and $|j\\omega+1| = \\sqrt{1^2 + \\omega^2} = \\sqrt{1+\\omega^2}$. The magnitude equation thus simplifies to:\n$$\n\\frac{K}{\\omega \\sqrt{1+\\omega^2}} = 1\n$$\nLet us denote the specific frequency at which this condition holds as $\\omega_c$.\n$$\nK = \\omega_c \\sqrt{1+\\omega_c^2}\n$$\nTo solve for $\\omega_c$ in terms of $K$, we square both sides:\n$$\nK^2 = \\omega_c^2 (1+\\omega_c^2) = \\omega_c^4 + \\omega_c^2\n$$\nThis is a quadratic equation in terms of $\\omega_c^2$. Let $x = \\omega_c^2$.\n$$\nx^2 + x - K^2 = 0\n$$\nUsing the quadratic formula, $x = \\frac{-b \\pm \\sqrt{b^2-4ac}}{2a}$, with $a=1$, $b=1$, and $c=-K^2$:\n$$\n\\omega_c^2 = \\frac{-1 \\pm \\sqrt{1^2 - 4(1)(-K^2)}}{2(1)} = \\frac{-1 \\pm \\sqrt{1+4K^2}}{2}\n$$\nSince $\\omega_c$ is a real frequency, $\\omega_c^2$ must be positive. As $K>0$, $\\sqrt{1+4K^2} > 1$, so we must choose the positive root:\n$$\n\\omega_c^2 = \\frac{-1 + \\sqrt{1+4K^2}}{2}\n$$\nTherefore, the crossover frequency $\\omega_c$ is uniquely determined by $K$:\n$$\n\\omega_c = \\sqrt{\\frac{\\sqrt{1+4K^2} - 1}{2}}\n$$\n\nNext, we analyze the phase equation:\n$$\n\\arg(L(j\\omega_c)) = \\arg(-1)\n$$\nThe phase of the left-hand side is:\n$$\n\\arg(L(j\\omega_c)) = \\arg(K) + \\arg(\\exp(-j\\omega_c T)) - \\arg(j\\omega_c) - \\arg(j\\omega_c+1)\n$$\nSince $K > 0$, $\\arg(K) = 0$. The phases of the other terms are:\n$\\arg(\\exp(-j\\omega_c T)) = -\\omega_c T$\n$\\arg(j\\omega_c) = \\frac{\\pi}{2}$\n$\\arg(j\\omega_c+1) = \\arctan(\\omega_c)$\nThe phase of $-1$ is $(2n+1)\\pi$ for any integer $n \\in \\mathbb{Z}$. So, the phase equation is:\n$$\n-\\omega_c T - \\frac{\\pi}{2} - \\arctan(\\omega_c) = (2n+1)\\pi\n$$\nWe solve for $T$:\n$$\nT = -\\frac{1}{\\omega_c} \\left( (2n+1)\\pi + \\frac{\\pi}{2} + \\arctan(\\omega_c) \\right)\n$$\nWe are looking for the smallest positive delay, $T_c(K) > 0$. Since $\\omega_c > 0$, the term in the parenthesis must be negative. The range of the arctangent function for a positive argument is $\\arctan(\\omega_c) \\in (0, \\frac{\\pi}{2})$. Thus, $\\frac{\\pi}{2} + \\arctan(\\omega_c) \\in (\\frac{\\pi}{2}, \\pi)$.\nLet's examine the sign of the parenthesis for different integer values of $n$:\nFor $n \\ge 0$, the term $(2n+1)\\pi$ is positive, making the entire expression in the parenthesis positive, which would lead to $T  0$.\nFor $n = -1$, the term is $-\\pi + \\frac{\\pi}{2} + \\arctan(\\omega_c) = -\\frac{\\pi}{2} + \\arctan(\\omega_c)$. Since $\\arctan(\\omega_c)  \\frac{\\pi}{2}$, this term is negative, yielding a positive value for $T$.\nFor $n = -2$, the term is $-3\\pi + \\frac{\\pi}{2} + \\arctan(\\omega_c) = -\\frac{5\\pi}{2} + \\arctan(\\omega_c)$, which is more negative, yielding a larger positive value for $T$.\nThe smallest positive value of $T$ is obtained for $n=-1$, corresponding to a total phase shift of $-\\pi$.\n$$\n-\\omega_c T - \\frac{\\pi}{2} - \\arctan(\\omega_c) = -\\pi\n$$\nSolving for $T=T_c$:\n$$\n\\omega_c T_c = \\pi - \\frac{\\pi}{2} - \\arctan(\\omega_c)\n$$\n$$\n\\omega_c T_c = \\frac{\\pi}{2} - \\arctan(\\omega_c)\n$$\n$$\nT_c(K) = \\frac{\\frac{\\pi}{2} - \\arctan(\\omega_c)}{\\omega_c}\n$$\nTo express this solely in terms of $K$, we substitute the expression for $\\omega_c$ we derived earlier:\n$$\n\\omega_c = \\sqrt{\\frac{\\sqrt{1+4K^2} - 1}{2}}\n$$\nSubstituting this into the equation for $T_c$ gives the final expression for the smallest positive critical delay $T_c(K)$.\n$$\nT_c(K) = \\frac{\\frac{\\pi}{2} - \\arctan\\left(\\sqrt{\\frac{\\sqrt{1+4K^2} - 1}{2}}\\right)}{\\sqrt{\\frac{\\sqrt{1+4K^2} - 1}{2}}}\n$$\nThis expression is the exact, closed-form solution required.", "answer": "$$\n\\boxed{\\frac{\\frac{\\pi}{2} - \\arctan\\left(\\sqrt{\\frac{\\sqrt{1+4K^2} - 1}{2}}\\right)}{\\sqrt{\\frac{\\sqrt{1+4K^2} - 1}{2}}}}\n$$", "id": "2888094"}, {"introduction": "Moving from analytical theory to practical implementation, we often work with frequency response data obtained experimentally rather than a known analytical transfer function. The theoretical basis of the Nyquist encirclement count is the winding number, a concept that can be robustly implemented in a computational algorithm. A naive implementation, however, can fail if the frequency sampling is too coarse, potentially missing encirclements entirely. This advanced practice challenges you to design and implement a robust algorithm that computes the encirclement number $N$ from sampled frequency data, using adaptive refinement to ensure the sampling is dense enough to guarantee a correct result. This exercise bridges the crucial gap between abstract theory and its application in software and experimental analysis [@problem_id:2888095].", "problem": "You are given sampled values of a loop transfer function $L(j\\omega)$ along the positive imaginary axis and are asked to compute the Nyquist encirclement number $N$, defined as the net number of clockwise encirclements of the critical point $-1$ by the complete Nyquist image of the standard Nyquist contour for $L(s)$. Assume $L(s)$ is a proper, real-rational transfer function with no poles on the imaginary axis. Your method must rely only on samples of $L(j\\omega)$ and must be robust in the sense of producing the correct integer $N$ under explicit sampling assumptions you formalize.\n\nStarting from first principles, design and implement a method to compute $N$ by interpreting it as a winding number of $F(j\\omega) = 1 + L(j\\omega)$ about the origin. Your derivation must begin from core definitions that do not include any statement of the Nyquist stability criterion or any shortcut formulas for $N$. You must articulate the sampling assumptions under which the discrete winding number of a polygonal approximation converges to the continuous winding number and thereby to the correct integer $N$. The algorithm must include safeguards that adaptively refine the sampling to enforce your assumptions.\n\nYour program must:\n- Construct a closed complex curve approximating the complete Nyquist image of the standard Nyquist contour using only sampled values of $L(j\\omega)$ for $\\omega \\in [0,\\omega_{\\max}]$ and complex conjugation to represent the negative-frequency branch. Explicitly model the connection across the infinite semicircle by inserting a short bridge in the complex plane between $F(j\\omega_{\\max})$ and its complex conjugate. If $\\omega = 0$ is admissible (no pole at the origin), include it directly.\n- Compute the discrete winding number of $F(j\\omega)$ about $0$ by summing wrapped argument increments along the closed polygon, in radians. Use this to return $N$ as a signed integer, with clockwise encirclements counted positively.\n- Implement adaptive refinement on the positive-frequency branch to ensure both of the following sampling assumptions hold:\n  1. The maximum per-segment change of the argument of $F(j\\omega)$ is strictly less than $\\pi$ radians.\n  2. The minimum distance of any linear segment of the polygonal approximation of $F(j\\omega)$ to the origin is bounded below by a positive tolerance that you choose, ensuring the polygon does not cross the origin between samples.\n- Choose $\\omega_{\\max}$ large enough that $\\lvert L(j\\omega_{\\max}) \\rvert$ is sufficiently small to make the infinite-arc contribution negligible, and verify this numerically with a tolerance. If not met, automatically increase $\\omega_{\\max}$.\n\nAll angles must be treated in radians. There are no physical units in this problem.\n\nTest Suite:\nFor each of the following four transfer functions, compute and output the integer $N$ as defined above. Each transfer function is specified by its numerator and denominator coefficients in descending powers of $s$.\n\n- Case $1$ (stable, low gain): $L(s) = \\dfrac{1}{(s+1)(s+2)}$, i.e., numerator coefficients $[\\,1\\,]$, denominator coefficients $[\\,1,\\,3,\\,2\\,]$.\n- Case $2$ (stable, higher gain): $L(s) = \\dfrac{20}{(s+1)(s+2)}$, i.e., numerator coefficients $[\\,20\\,]$, denominator coefficients $[\\,1,\\,3,\\,2\\,]$.\n- Case $3$ (open-loop unstable, admissible Nyquist since no imaginary-axis pole): $L(s) = \\dfrac{0.8}{(s-0.5)(s+1)(s+2)}$, i.e., numerator coefficients $[\\,0.8\\,]$, denominator coefficients $[\\,1,\\,2.5,\\,0.5,\\,-1\\,]$.\n- Case $4$ (with a zero, near-critical passage possible): $L(s) = \\dfrac{3(s+1)}{(s+0.2)(s+0.3)}$, i.e., numerator coefficients $[\\,3,\\,3\\,]$, denominator coefficients $[\\,1,\\,0.5,\\,0.06\\,]$.\n\nYour program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets (e.g., \"[n_1,n_2,n_3,n_4]\"), where each $n_k$ is the computed integer $N$ for the corresponding case in the order above.", "solution": "The problem requires the design and implementation of a robust numerical method to compute the Nyquist encirclement number, designated as $N$. This number represents the net count of clockwise encirclements of the critical point, $-1+j0$, by the Nyquist plot of a given loop transfer function $L(s)$. The problem is well-posed and scientifically grounded in the principles of complex analysis and control theory. We shall proceed by deriving the method from first principles.\n\nLet $L(s)$ be a proper, real-rational transfer function with no poles on the imaginary axis, as specified. The Nyquist plot is the image of the standard Nyquist contour, $\\mathcal{D}$, under the mapping $s \\mapsto L(s)$. The contour $\\mathcal{D}$ consists of the entire imaginary axis $s=j\\omega$ for $\\omega \\in (-\\infty, \\infty)$, closed by a semicircle of infinite radius in the right-half of the complex plane.\n\nThe number of encirclements, $N$, of the point $z_c = -1+j0$ by the Nyquist plot, $\\gamma_L = L(\\mathcal{D})$, is defined by the winding number of the curve $\\gamma_L$ about $z_c$. The standard definition of a winding number, $W(\\gamma, z_0)$, counts counter-clockwise encirclements as positive. The problem specifies $N$ to be the number of *clockwise* encirclements, so we have $N = -W(\\gamma_L, -1)$.\n\nThe winding number of $\\gamma_L$ about $-1$ is equivalent to the winding number of the curve $\\gamma_F = 1 + \\gamma_L$ about the origin, $0+j0$. Let $F(s) = 1 + L(s)$. Then, the curve is the image of $\\mathcal{D}$ under $F(s)$, and $N = -W(F(\\mathcal{D}), 0)$.\n\nThe winding number $W$ is given by the total change in the argument of $F(s)$ as $s$ traverses the contour $\\mathcal{D}$, divided by $2\\pi$.\n$$\nW(F(\\mathcal{D}), 0) = \\frac{1}{2\\pi} \\Delta_{\\mathcal{D}} \\arg(F(s))\n$$\nThus, the quantity to compute is:\n$$\nN = -\\frac{1}{2\\pi} \\left[ \\oint_{\\mathcal{D}} d(\\arg(F(s))) \\right]\n$$\n\nTo compute this numerically, we discretize the Nyquist contour $\\mathcal{D}$ and approximate the curve $F(\\mathcal{D})$ with a closed polygon. The contour $\\mathcal{D}$ is broken into three parts:\n1.  The positive imaginary axis: $s=j\\omega$ for $\\omega$ from $0$ to $\\omega_{\\max}$.\n2.  The large semicircle: $|s| \\to \\infty$ in the right-half plane. Since $L(s)$ is proper, $L(s) \\to k$ as $|s| \\to \\infty$, where $k$ is a constant (and $k=0$ if $L(s)$ is strictly proper, as are all examples provided). Thus, $F(s) = 1+L(s)$ maps this entire semicircle to a single point, $1+k$, or a small region around it. Its contribution to the winding number about the origin is zero, provided $|1+k|$ is not zero. We must choose $\\omega_{\\max}$ large enough such that $|L(j\\omega_{\\max})|$ is sufficiently small, making the behavior at infinity well-approximated by the point $F(j\\omega_{\\max})$.\n3.  The negative imaginary axis: $s=j\\omega$ for $\\omega$ from $-\\omega_{\\max}$ to $0$. Since $L(s)$ is a transfer function with real coefficients, $L(-j\\omega) = \\overline{L(j\\omega)}$. Consequently, $F(-j\\omega) = 1 + \\overline{L(j\\omega)} = \\overline{F(j\\omega)}$. This means the contour for negative frequencies is the complex conjugate of the contour for positive frequencies.\n\nOur numerical procedure constructs a closed polygonal path approximating $F(\\mathcal{D})$:\n1.  Generate a sequence of complex points $P_k = F(j\\omega_k) = 1 + L(j\\omega_k)$ for an ordered set of frequencies $0 = \\omega_0  \\omega_1  \\dots  \\omega_M = \\omega_{\\max}$. This constitutes the positive-frequency branch of the polygon.\n2.  As per the problem description, we connect the endpoint $P_M = F(j\\omega_{\\max})$ to its conjugate $\\overline{P_M} = F(-j\\omega_{\\max})$ with a straight line segment.\n3.  The path is completed by tracing the conjugate path from $\\overline{P_M}$ back to the start. The vertices are $\\overline{P_{M-1}}, \\overline{P_{M-2}}, \\dots, \\overline{P_1}, \\overline{P_0}$. Since $L(0)$ is real for a real-rational function, $P_0 = F(0)$ is also real, so $\\overline{P_0} = P_0$, and the polygon is closed.\n\nThe complete sequence of vertices for our polygon is $Z = [P_0, \\dots, P_M, \\overline{P_M}, \\dots, \\overline{P_1}, P_0]$. The total change in argument is computed by summing the argument changes between consecutive vertices. For a sequence of vertices $z_0, z_1, \\dots, z_K$ forming a closed polygon ($z_K = z_0$), the total angle change is:\n$$\n\\Delta\\theta_{\\text{total}} = \\sum_{k=0}^{K-1} \\arg\\left(\\frac{z_{k+1}}{z_k}\\right)\n$$\nwhere $\\arg(z)$ is the principal value of the argument in $(-\\pi, \\pi]$. This summation is valid if and only if the true change in angle between any two consecutive vertices $z_k$ and $z_{k+1}$ is less than $\\pi$ in magnitude. This leads to our first critical sampling assumption.\n\n**Adaptive Sampling Assumptions and Strategy:**\nTo ensure the discrete sum converges to the true continuous integral, two conditions must be met by every segment of our polygonal approximation. We will use an adaptive sampling algorithm to enforce them. Starting with a coarse frequency grid, we recursively subdivide any frequency interval $[\\omega_k, \\omega_{k+1}]$ until its corresponding segment $[F(j\\omega_k), F(j\\omega_{k+1})]$ satisfies:\n\n1.  **Angle Change Condition:** The magnitude of the argument change along the segment must be less than $\\pi$. We check this using the vertices: $|\\arg(F(j\\omega_{k+1}) / F(j\\omega_k))|  \\pi$. A small tolerance is used in practice, checking against $\\pi - \\epsilon$. This prevents aliasing of the winding number, where an encirclement could be missed between two widely spaced samples.\n\n2.  **Origin Proximity Condition:** The polygon must not pass through the origin. We enforce that the minimum Euclidean distance from the origin to any line segment $[F(j\\omega_k), F(j\\omega_{k+1})]$ is greater than a small positive tolerance, $\\delta > 0$. If a segment passes too close to the origin, the winding number becomes ill-defined and numerically unstable. Subdivision refines the path, pulling it away from the origin if it does not cross it, or detecting a genuine crossing if it does (which is prohibited by problem assumptions on $L(s)$).\n\nThe algorithm proceeds as follows:\n- An initial value for $\\omega_{\\max}$ is chosen and increased until $|L(j\\omega_{\\max})|$ is below a prescribed tolerance, ensuring the infinite-arc closure is valid.\n- An initial, coarse frequency grid is defined on $[0, \\omega_{\\max}]$.\n- This grid is iteratively refined. In each pass, every interval is tested against the angle and distance conditions. Any interval that fails is bisected, and the process repeats until a full pass over all intervals results in no further refinements.\n- With the final, refined set of vertices for the positive-frequency branch, the full closed polygon is constructed.\n- The total angle change is summed, and the encirclement number $N$ is calculated:\n$$\nN = -\\text{round}\\left( \\frac{1}{2\\pi} \\Delta\\theta_{\\text{total}} \\right)\n$$\nRounding to the nearest integer is appropriate as the result must be an integer, and any deviation is due to numerical precision errors.\nThis rigorous, adaptive procedure guarantees a correct and robust computation of the integer $N$.", "answer": "```python\nimport numpy as np\nfrom scipy.signal import TransferFunction\n\ndef _calculate_segment_dist_to_origin(z1: complex, z2: complex) - float:\n    \"\"\"Calculates the minimum distance from the origin to the line segment [z1, z2].\"\"\"\n    if z1 == z2:\n        return abs(z1)\n\n    v = z2 - z1\n    v_norm_sq = v.real**2 + v.imag**2\n    if v_norm_sq  1e-20:\n        return abs(z1)\n\n    # Project z1 onto the line defined by the segment\n    # t = -Re(conj(v) * z1) / |v|^2\n    t = -(v.real * z1.real + v.imag * z1.imag) / v_norm_sq\n\n    if 0 = t = 1:\n        # Closest point is on the segment\n        closest_point = z1 + t * v\n        return abs(closest_point)\n    elif t  0:\n        # Closest point on segment is z1\n        return abs(z1)\n    else: # t  1\n        # Closest point on segment is z2\n        return abs(z2)\n\ndef _compute_n(num: list, den: list) - int:\n    \"\"\"\n    Computes the Nyquist encirclement number N for a given transfer function.\n    \"\"\"\n    # --- 1. Setup ---\n    L_tf = TransferFunction(num, den)\n\n    def L_jw(w_vals):\n        \"\"\"Helper to evaluate L(jw) for an array of frequencies.\"\"\"\n        # freqresp returns H(jw) and w. We only need H(jw).\n        # It handles w=0 correctly even though it warns about it sometimes.\n        _, H_jw = L_tf.freqresp(w=w_vals)\n        return H_jw\n\n    # --- 2. Determine adequate omega_max ---\n    w_max_tol = 1e-3\n    omega_max = 100.0  # Initial guess\n    while abs(L_jw(np.array([omega_max]))[0])  w_max_tol:\n        omega_max *= 10\n        if omega_max  1e8: # Safety break\n            raise RuntimeError(\"omega_max search did not converge.\")\n\n    # --- 3. Adaptive Sampling of the Positive Frequency Branch ---\n    # Start with a logarithmic grid, including 0.\n    initial_omegas = np.concatenate(([0], np.logspace(-3, np.log10(omega_max), 200)))\n    omegas = sorted(list(set(initial_omegas)))\n    \n    angle_limit = np.pi - 1e-9\n    dist_tol = 1e-6\n    \n    while True:\n        refined = False\n        new_omegas_to_add = []\n        \n        # Evaluate F(jw) = 1 + L(jw) for the current omega set\n        F_vals = 1 + L_jw(np.array(omegas))\n        omega_map = {w: f for w, f in zip(omegas, F_vals)}\n\n        for i in range(len(omegas) - 1):\n            w1, w2 = omegas[i], omegas[i+1]\n            F1, F2 = omega_map[w1], omega_map[w2]\n\n            # Condition 1: Check angle change\n            angle_change = np.angle(F2 / F1) if abs(F1)  1e-9 else 0\n            \n            # Condition 2: Check distance to origin\n            min_dist = _calculate_segment_dist_to_origin(F1, F2)\n\n            if abs(angle_change)  angle_limit or min_dist  dist_tol:\n                # Subdivide the interval using geometric mean for log-spaced data\n                w_mid = np.sqrt(w1 * w2) if w1  0 else (w1 + w2) / 2.0\n                if w_mid  w1 and w_mid  w2:\n                  new_omegas_to_add.append(w_mid)\n                  refined = True\n        \n        if not refined:\n            break\n        \n        # Add new points and re-sort\n        omegas.extend(new_omegas_to_add)\n        omegas = sorted(list(set(omegas)))\n        if len(omegas)  20000: # Safety break\n            raise RuntimeError(\"Adaptive sampling generated too many points.\")\n\n    # --- 4. Construct the Full Nyquist Contour and Compute Winding Number ---\n    # Final F(jw) points for the refined positive frequency range\n    F_pos = 1 + L_jw(np.array(omegas))\n    \n    # Construct the full closed polygon Z representing F(D)\n    # Path: F(0)...F(w_max), then conj(F(w_max))...conj(F(w_next_to_0)), back to F(0)\n    # The path is F_pos followed by the conjugate path in reverse.\n    # The sequence of vertices is [F_0, ..., F_M, bar(F_M), ..., bar(F_1), F_0]\n    # np.conj(F_pos[::-1]) creates [bar(F_M), ..., bar(F_0)]\n    full_contour_z = np.concatenate([F_pos, np.conj(F_pos[::-1])[1:]])\n\n    # Calculate total argument change by summing arg(z_{k+1}/z_k)\n    # This correctly computes the unwrapped angle change if |angle_change|  pi for all steps\n    delta_thetas = np.angle(full_contour_z[1:] / full_contour_z[:-1])\n    total_angle = np.sum(delta_thetas)\n    \n    # Winding number (CCW is positive)\n    w = total_angle / (2 * np.pi)\n    \n    # N is clockwise encirclements\n    N = -w\n    \n    # Return the nearest integer\n    return int(np.round(N))\n\ndef solve():\n    \"\"\"\n    Solves the problem for the given test suite of transfer functions.\n    \"\"\"\n    test_cases = [\n        # Case 1: L(s) = 1 / ((s+1)(s+2))\n        {'num': [1], 'den': [1, 3, 2]},\n        # Case 2: L(s) = 20 / ((s+1)(s+2))\n        {'num': [20], 'den': [1, 3, 2]},\n        # Case 3: L(s) = 0.8 / ((s-0.5)(s+1)(s+2))\n        {'num': [0.8], 'den': [1, 2.5, 0.5, -1]},\n        # Case 4: L(s) = 3(s+1) / ((s+0.2)(s+0.3))\n        {'num': [3, 3], 'den': [1, 0.5, 0.06]},\n    ]\n    \n    results = []\n    for case in test_cases:\n        try:\n            n_val = _compute_n(case['num'], case['den'])\n            results.append(n_val)\n        except Exception as e:\n            # In a real scenario, handle errors for specific cases\n            print(f\"Error computing for case {case}: {e}\")\n            results.append(None)\n    \n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2888095"}]}