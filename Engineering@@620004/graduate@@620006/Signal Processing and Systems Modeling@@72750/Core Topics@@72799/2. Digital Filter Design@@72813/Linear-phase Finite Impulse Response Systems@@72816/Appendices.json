{"hands_on_practices": [{"introduction": "Mastering the theory of linear-phase filters begins with a firm grasp of their mathematical structure. This first exercise [@problem_id:2881290] challenges you to derive the frequency response of a classic Type I FIR filter directly from first principles. By leveraging the even symmetry of its impulse response, you will transform the standard Discrete-Time Fourier Transform (DTFT) summation into the characteristic linear-phase form, revealing its real-valued amplitude function and constant integer group delay.", "problem": "Consider a real-valued, finite impulse response (FIR) filter of length $N=7$ with even symmetry $h[n]=h[6-n]$ for all integer $n$, and with the following specified coefficients:\n- $h[0]=\\frac{1}{16}$, $h[1]=-\\frac{1}{8}$, $h[2]=\\frac{3}{16}$, $h[3]=\\frac{1}{4}$, and by symmetry $h[4]=\\frac{3}{16}$, $h[5]=-\\frac{1}{8}$, $h[6]=\\frac{1}{16}$.\n\nStarting only from the definition of the discrete-time Fourier transform (DTFT) of the impulse response and the given symmetry, derive an explicit expression of the frequency response in the linear-phase decomposition form $H(\\omega)=\\exp(-j \\omega M)\\,A(\\omega)$, identifying the real amplitude function $A(\\omega)$ as a sum of cosine terms. Then, using the definition of group delay in terms of phase, identify the constant group delay of this filter.\n\nUse radians for all angular quantities, and express the group delay in samples. Provide your final answer as two entries in a single row matrix, where the first entry is the explicit $A(\\omega)$ and the second entry is the group delay. No rounding is required.", "solution": "The problem statement is subjected to validation.\n\nGivens are extracted as follows:\n1.  The filter is a real-valued, finite impulse response (FIR) filter.\n2.  The length of the filter is $N=7$.\n3.  The impulse response exhibits even symmetry: $h[n]=h[6-n]$ for all integer $n$.\n4.  The coefficients are specified as: $h[0]=\\frac{1}{16}$, $h[1]=-\\frac{1}{8}$, $h[2]=\\frac{3}{16}$, $h[3]=\\frac{1}{4}$. The remaining coefficients are determined by symmetry: $h[4]=h[6-4]=h[2]=\\frac{3}{16}$, $h[5]=h[6-5]=h[1]=-\\frac{1}{8}$, and $h[6]=h[6-6]=h[0]=\\frac{1}{16}$.\n\nThe problem is scientifically grounded, well-posed, and objective. It concerns standard concepts in digital signal processing, specifically the analysis of a Type I linear-phase FIR filter. All provided data is consistent and sufficient for a unique solution. The problem is therefore deemed valid. The solution will proceed.\n\nThe frequency response $H(\\omega)$ of a discrete-time filter with impulse response $h[n]$ is given by its discrete-time Fourier transform (DTFT). For a filter of length $N$, the definition is:\n$$H(\\omega) = \\sum_{n=0}^{N-1} h[n] \\exp(-j \\omega n)$$\nGiven a filter length of $N=7$, the summation is from $n=0$ to $n=6$:\n$$H(\\omega) = \\sum_{n=0}^{6} h[n] \\exp(-j \\omega n)$$\nExpanding this summation yields:\n$$H(\\omega) = h[0] + h[1]\\exp(-j\\omega) + h[2]\\exp(-j2\\omega) + h[3]\\exp(-j3\\omega) + h[4]\\exp(-j4\\omega) + h[5]\\exp(-j5\\omega) + h[6]\\exp(-j6\\omega)$$\nThe problem states that the impulse response has even symmetry, $h[n]=h[6-n]$. We apply this property to the coefficients:\n$h[6] = h[0]$, $h[5] = h[1]$, and $h[4] = h[2]$.\nSubstituting these into the expression for $H(\\omega)$:\n$$H(\\omega) = h[0] + h[1]\\exp(-j\\omega) + h[2]\\exp(-j2\\omega) + h[3]\\exp(-j3\\omega) + h[2]\\exp(-j4\\omega) + h[1]\\exp(-j5\\omega) + h[0]\\exp(-j6\\omega)$$\nTo reveal the linear-phase structure, we must group terms symmetrically around the center of the impulse response. The center of symmetry for a filter of length $N=7$ is at index $n=\\frac{N-1}{2} = \\frac{7-1}{2}=3$.\n$$H(\\omega) = h[3]\\exp(-j3\\omega) + \\left( h[0] + h[0]\\exp(-j6\\omega) \\right) + \\left( h[1]\\exp(-j\\omega) + h[1]\\exp(-j5\\omega) \\right) + \\left( h[2]\\exp(-j2\\omega) + h[2]\\exp(-j4\\omega) \\right)$$\nWe factor out the phase term corresponding to the center of symmetry, $\\exp(-j3\\omega)$:\n$$H(\\omega) = \\exp(-j3\\omega) \\left[ h[3] + h[0]\\left(\\exp(j3\\omega) + \\exp(-j3\\omega)\\right) + h[1]\\left(\\exp(j2\\omega) + \\exp(-j2\\omega)\\right) + h[2]\\left(\\exp(j\\omega) + \\exp(-j\\omega)\\right) \\right]$$\nUsing Euler's identity, $2\\cos(\\theta) = \\exp(j\\theta) + \\exp(-j\\theta)$, we can express the terms in parentheses as cosines:\n$$H(\\omega) = \\exp(-j3\\omega) \\left[ h[3] + 2h[0]\\cos(3\\omega) + 2h[1]\\cos(2\\omega) + 2h[2]\\cos(\\omega) \\right]$$\nThis expression is in the desired linear-phase form $H(\\omega)=\\exp(-j \\omega M)A(\\omega)$, where $M=3$ and $A(\\omega)$ is the real-valued amplitude function:\n$$A(\\omega) = h[3] + 2h[2]\\cos(\\omega) + 2h[1]\\cos(2\\omega) + 2h[0]\\cos(3\\omega)$$\nNow, we substitute the given numerical values for the coefficients: $h[0]=\\frac{1}{16}$, $h[1]=-\\frac{1}{8}$, $h[2]=\\frac{3}{16}$, $h[3]=\\frac{1}{4}$.\n$$A(\\omega) = \\frac{1}{4} + 2\\left(\\frac{3}{16}\\right)\\cos(\\omega) + 2\\left(-\\frac{1}{8}\\right)\\cos(2\\omega) + 2\\left(\\frac{1}{16}\\right)\\cos(3\\omega)$$\n$$A(\\omega) = \\frac{1}{4} + \\frac{3}{8}\\cos(\\omega) - \\frac{1}{4}\\cos(2\\omega) + \\frac{1}{8}\\cos(3\\omega)$$\nThis is the explicit expression for the real amplitude function $A(\\omega)$.\n\nNext, we identify the group delay, $\\tau_g(\\omega)$. The group delay is defined as the negative derivative of the phase of the frequency response with respect to angular frequency $\\omega$:\n$$\\tau_g(\\omega) = -\\frac{d}{d\\omega} \\arg\\{H(\\omega)\\}$$\nThe frequency response is $H(\\omega) = A(\\omega)\\exp(-j3\\omega)$. The function $A(\\omega)$ is real, so its phase, $\\arg\\{A(\\omega)\\}$, is either $0$ (if $A(\\omega)  0$) or $\\pi$ (if $A(\\omega)  0$).\nThe total phase of $H(\\omega)$, denoted $\\phi(\\omega)$, is:\n$$\\phi(\\omega) = \\arg\\{H(\\omega)\\} = \\arg\\{A(\\omega)\\exp(-j3\\omega)\\} = \\arg\\{A(\\omega)\\} + \\arg\\{\\exp(-j3\\omega)\\} = \\arg\\{A(\\omega)\\} - 3\\omega$$\nFor a linear-phase filter, the group delay is conventionally defined by the linear component of the phase. In regions of $\\omega$ where $A(\\omega)$ does not change sign, $\\arg\\{A(\\omega)\\}$ is a constant ($0$ or $\\pi$), and its derivative is zero. Thus, the derivative of the phase is:\n$$\\frac{d\\phi(\\omega)}{d\\omega} = \\frac{d}{d\\omega}(-3\\omega) = -3$$\nThe group delay is therefore constant:\n$$\\tau_g(\\omega) = -(-3) = 3$$\nThe group delay is $3$ samples. This is consistent with the general theory of Type I linear-phase FIR filters, for which the group delay is constant and equal to $(N-1)/2$.\n\nThe final answer consists of the expression for $A(\\omega)$ and the constant value for the group delay.", "answer": "$$\n\\boxed{\n\\begin{pmatrix}\n\\frac{1}{4} + \\frac{3}{8}\\cos(\\omega) - \\frac{1}{4}\\cos(2\\omega) + \\frac{1}{8}\\cos(3\\omega)  3\n\\end{pmatrix}\n}\n$$", "id": "2881290"}, {"introduction": "While ideal linear-phase filters provide a perfect theoretical model, practical implementations are subject to imperfections like coefficient quantization, which can disrupt the precise symmetry of the impulse response. This practice [@problem_id:2881270] moves from the ideal to the near-ideal, asking you to analytically quantify the phase distortion caused by a small, targeted asymmetry in the filter taps. This advanced analysis provides crucial insight into the phase sensitivity of filter designs and the practical origins of non-linear phase error.", "problem": "Consider a real-coefficient, discrete-time, finite impulse response (FIR) linear time-invariant system of odd length $N$, with impulse response samples $\\{h[n]\\}_{n=0}^{N-1}$. Let $n_{0} = \\frac{N-1}{2}$ denote the symmetry center. In the ideally linear-phase, even-symmetric case, one has $h[n] = h[N-1-n]$ for all $n$, which yields a frequency response whose phase is an exact straight line in frequency. The discrete-time frequency response is defined by the Fourier series\n$$\nH\\!\\left(\\exp(j\\omega)\\right) \\triangleq \\sum_{n=0}^{N-1} h[n] \\exp(-j\\omega n).\n$$\nSuppose that, except for a single symmetric tap pair about $n_{0}$, the sequence remains exactly even-symmetric. Specifically, let $M \\triangleq \\frac{N-1}{2}$ and index symmetric pairs by the offset $k \\in \\{1,2,\\dots,M\\}$ as $\\{n_{0}-k,\\;n_{0}+k\\}$. Let all pairs except one, at a particular offset $m \\in \\{1,2,\\dots,M\\}$, remain exactly symmetric with common value $a_{k}$ for pair $k$, and let the center tap be $h[n_{0}] = c$. At the perturbed pair $\\{n_{0}-m,\\;n_{0}+m\\}$, impose a small antisymmetric deviation of magnitude $\\epsilon \\in \\mathbb{R}$ by setting\n$$\nh[n_{0}-m] = a_{m} - \\frac{\\epsilon}{2}, \\qquad h[n_{0}+m] = a_{m} + \\frac{\\epsilon}{2},\n$$\nso that the average of the pair remains $a_{m}$ while a small antisymmetric component of strength $\\epsilon$ is injected. All other pairs $k \\neq m$ satisfy $h[n_{0}-k] = h[n_{0}+k] = a_{k}$. Define the real, even trigonometric amplitude factor\n$$\nA(\\omega) \\triangleq c + 2 \\sum_{k=1}^{M} a_{k} \\cos(\\omega k),\n$$\nand restrict attention to frequencies $\\omega$ for which $A(\\omega)  0$ so that the unperturbed linear-phase spectrum has phase $-\\omega n_{0}$ locally without $\\pi$-jumps. Starting from the definition of $H\\!\\left(\\exp(j\\omega)\\right)$ and the symmetry structure above, derive, in closed form, the deviation of the phase from a straight line,\n$$\n\\Delta \\phi(\\omega) \\triangleq \\arg H\\!\\left(\\exp(j\\omega)\\right) - \\big(-\\omega n_{0}\\big),\n$$\ncaused by the small antisymmetric perturbation at the single pair. Express your final answer as a single analytic expression in terms of $\\epsilon$, $\\omega$, $m$, and $A(\\omega)$, valid on the set $\\{\\omega : A(\\omega) > 0\\}$. Express the angle in radians. No numerical rounding is required.", "solution": "The problem requires the derivation of the phase deviation, $\\Delta \\phi(\\omega)$, for a nearly linear-phase Finite Impulse Response (FIR) filter. The filter has an odd length $N$ and is mostly even-symmetric about its center $n_{0} = \\frac{N-1}{2}$, with a single small antisymmetric perturbation.\n\nThe discrete-time frequency response is given by\n$$H(\\exp(j\\omega)) = \\sum_{n=0}^{N-1} h[n] \\exp(-j\\omega n)$$\nWe are given the structure of the impulse response $h[n]$. It is convenient to decompose $h[n]$ into its even and odd components with respect to the center of symmetry $n_{0}$.\nLet $h[n] = h_{e}[n] + h_{o}[n]$, where $h_{e}[n]$ is the even component and $h_{o}[n]$ is the odd component, defined such that for any integer $k$, $h_{e}[n_0+k] = h_{e}[n_0-k]$ and $h_{o}[n_0+k] = -h_{o}[n_0-k]$. It follows that $h_e[n_0] = h[n_0]$ and $h_o[n_0]=0$.\n\nThe components are calculated as $h_{e}[n_{0} \\pm k] = \\frac{1}{2}(h[n_{0}+k] + h[n_{0}-k])$ and $h_{o}[n_{0} \\pm k] = \\pm \\frac{1}{2}(h[n_{0}+k] - h[n_{0}-k])$ for $k \\in \\{1, 2, \\dots, M\\}$ where $M = \\frac{N-1}{2}$.\n\nFor the unperturbed pairs where $k \\neq m$, we have $h[n_{0}-k] = h[n_{0}+k] = a_{k}$.\nThe components are:\n$$h_{e}[n_{0} \\pm k] = \\frac{1}{2}(a_{k} + a_{k}) = a_{k}$$\n$$h_{o}[n_{0} \\pm k] = \\pm \\frac{1}{2}(a_{k} - a_{k}) = 0$$\n\nFor the perturbed pair at offset $m$, we have $h[n_{0}-m] = a_{m} - \\frac{\\epsilon}{2}$ and $h[n_{0}+m] = a_{m} + \\frac{\\epsilon}{2}$.\nThe components are:\n$$h_{e}[n_{0} \\pm m] = \\frac{1}{2}\\left(\\left(a_{m} + \\frac{\\epsilon}{2}\\right) + \\left(a_{m} - \\frac{\\epsilon}{2}\\right)\\right) = a_{m}$$\n$$h_{o}[n_{0}+m] = \\frac{1}{2}\\left(\\left(a_{m} + \\frac{\\epsilon}{2}\\right) - \\left(a_{m} - \\frac{\\epsilon}{2}\\right)\\right) = \\frac{\\epsilon}{2}$$\n$$h_{o}[n_{0}-m] = -h_{o}[n_{0}+m] = -\\frac{\\epsilon}{2}$$\n\nFor the center tap $n_{0}$, we have $h[n_{0}]=c$, so $h_{e}[n_{0}] = c$ and $h_{o}[n_{0}] = 0$.\n\nThe total impulse response is thus a sum of a purely even-symmetric sequence $h_e[n]$ and a purely odd-symmetric sequence $h_o[n]$. The frequency response $H(\\exp(j\\omega))$ is the sum of the frequency responses of these two components, $H(\\exp(j\\omega)) = H_{e}(\\exp(j\\omega)) + H_{o}(\\exp(j\\omega))$.\n\nFirst, we find $H_{e}(\\exp(j\\omega))$. For an even-symmetric filter of odd length $N$, the frequency response is $H_{e}(\\exp(j\\omega)) = \\exp(-j\\omega n_{0}) A_{e}(\\omega)$, where $A_{e}(\\omega)$ is a real-valued amplitude function.\n$$A_{e}(\\omega) = h_{e}[n_{0}] + \\sum_{k=1}^{M} 2h_{e}[n_{0}-k] \\cos(\\omega k)$$\nSubstituting the derived values for $h_{e}[n]$: $h_{e}[n_{0}]=c$ and $h_{e}[n_0-k]=a_k$ for all $k \\in \\{1, \\dots, M\\}$.\n$$A_{e}(\\omega) = c + 2 \\sum_{k=1}^{M} a_{k} \\cos(\\omega k)$$\nThis matches the given definition of $A(\\omega)$. Therefore, the frequency response of the even component is:\n$$H_{e}(\\exp(j\\omega)) = A(\\omega) \\exp(-j\\omega n_{0})$$\n\nNext, we find $H_{o}(\\exp(j\\omega))$. The odd component $h_{o}[n]$ is non-zero only at $n=n_{0}-m$ and $n=n_{0}+m$.\n$$H_{o}(\\exp(j\\omega)) = \\sum_{n=0}^{N-1} h_{o}[n] \\exp(-j\\omega n) = h_{o}[n_{0}-m]\\exp(-j\\omega(n_{0}-m)) + h_{o}[n_{0}+m]\\exp(-j\\omega(n_{0}+m))$$\nSubstituting the values $h_{o}[n_{0}-m] = -\\frac{\\epsilon}{2}$ and $h_{o}[n_{0}+m] = \\frac{\\epsilon}{2}$:\n$$H_{o}(\\exp(j\\omega)) = -\\frac{\\epsilon}{2}\\exp(-j\\omega(n_{0}-m)) + \\frac{\\epsilon}{2}\\exp(-j\\omega(n_{0}+m))$$\nFactor out the common term $\\frac{\\epsilon}{2}\\exp(-j\\omega n_{0})$:\n$$H_{o}(\\exp(j\\omega)) = \\frac{\\epsilon}{2}\\exp(-j\\omega n_{0}) \\left[-\\exp(j\\omega m) + \\exp(-j\\omega m)\\right]$$\nUsing Euler's identity $\\sin(x) = \\frac{\\exp(jx) - \\exp(-jx)}{2j}$, we have $\\exp(-j\\omega m) - \\exp(j\\omega m) = -2j\\sin(\\omega m)$.\n$$H_{o}(\\exp(j\\omega)) = \\frac{\\epsilon}{2}\\exp(-j\\omega n_{0})(-2j\\sin(\\omega m)) = -j\\epsilon\\sin(\\omega m)\\exp(-j\\omega n_{0})$$\n\nNow, we combine the responses of the even and odd parts:\n$$H(\\exp(j\\omega)) = H_{e}(\\exp(j\\omega)) + H_{o}(\\exp(j\\omega)) = A(\\omega)\\exp(-j\\omega n_{0}) - j\\epsilon\\sin(\\omega m)\\exp(-j\\omega n_{0})$$\nFactor out the linear phase term $\\exp(-j\\omega n_{0})$:\n$$H(\\exp(j\\omega)) = \\exp(-j\\omega n_{0}) \\left[ A(\\omega) - j\\epsilon\\sin(\\omega m) \\right]$$\n\nThe phase of $H(\\exp(j\\omega))$ is the sum of the phases of the two factors:\n$$\\arg H(\\exp(j\\omega)) = \\arg(\\exp(-j\\omega n_{0})) + \\arg(A(\\omega) - j\\epsilon\\sin(\\omega m))$$\n$$\\arg H(\\exp(j\\omega)) = -\\omega n_{0} + \\arg(A(\\omega) - j\\epsilon\\sin(\\omega m))$$\n\nThe phase deviation $\\Delta\\phi(\\omega)$ is defined as $\\Delta \\phi(\\omega) = \\arg H(\\exp(j\\omega)) - (-\\omega n_{0})$.\n$$\\Delta\\phi(\\omega) = \\left[-\\omega n_{0} + \\arg(A(\\omega) - j\\epsilon\\sin(\\omega m))\\right] - (-\\omega n_{0})$$\n$$\\Delta\\phi(\\omega) = \\arg(A(\\omega) - j\\epsilon\\sin(\\omega m))$$\n\nThe argument of a complex number $z = x+iy$ is $\\arctan(\\frac{y}{x})$ when $x0$. Here, the real part is $x=A(\\omega)$ and the imaginary part is $y = -\\epsilon\\sin(\\omega m)$. The problem provides the condition that we restrict our analysis to frequencies $\\omega$ where $A(\\omega)  0$. This condition ensures that the phase is well-defined and can be calculated directly with the arctangent function.\n$$\\Delta\\phi(\\omega) = \\arctan\\left(\\frac{-\\epsilon\\sin(\\omega m)}{A(\\omega)}\\right)$$\nUsing the property that $\\arctan(-u) = -\\arctan(u)$, the expression can be written as:\n$$\\Delta\\phi(\\omega) = -\\arctan\\left(\\frac{\\epsilon\\sin(\\omega m)}{A(\\omega)}\\right)$$\nThis is the final closed-form expression for the phase deviation.", "answer": "$$\n\\boxed{-\\arctan\\left(\\frac{\\epsilon\\sin(\\omega m)}{A(\\omega)}\\right)}\n$$", "id": "2881270"}, {"introduction": "The ultimate test of theoretical understanding is often its application in a computational setting. This final hands-on practice [@problem_id:2881267] guides you through the process of numerically verifying the properties of linear-phase filters using the Fast Fourier Transform (FFT), a fundamental tool in digital signal processing. You will implement a procedure to analyze the spectra of all four filter types, computationally confirming their unique amplitude and phase characteristics, and connecting abstract concepts to tangible, quantitative results.", "problem": "You are given the task of programmatically evaluating the discrete-time Fourier transform of a real, finite impulse response with linear phase using a discrete grid of angular frequencies and a fast Fourier transform of a zero-padded sequence, while preserving the linear-phase structure. The goal is to show how to choose an angular frequency grid and how to correct for the inherent linear phase so that the residual spectrum reveals the even or odd structure implied by the time-domain symmetry. You must implement the evaluation and return quantitative metrics that verify the expected structure and group delay. Angles must be treated in radians. No physical units are involved.\n\nUse the following foundational definitions as the starting point:\n- The discrete-time Fourier transform (DTFT) of a sequence $h[n]$ is $H\\!\\left(e^{j\\omega}\\right)=\\sum_{n=0}^{M-1} h[n]\\,e^{-j\\omega n}$, where $M$ is the length of $h[n]$ and $\\omega$ is the angular frequency in radians.\n- A linear-phase finite impulse response $h[n]$ satisfies either $h[n]=h[M-1-n]$ (symmetric) or $h[n]=-h[M-1-n]$ (antisymmetric), which implies $H\\!\\left(e^{j\\omega}\\right)=e^{-j\\omega\\tau}\\,A(\\omega)$ for some real-valued group delay $\\tau=(M-1)/2$ and some real-even or purely imaginary-odd residual $A(\\omega)$, depending on the symmetry class.\n- The fast Fourier transform (FFT) of a length-$N$ sequence yields samples of the $2\\pi$-periodic discrete-time Fourier transform on the grid $\\omega_m=\\frac{2\\pi m}{N}$, where $m\\in\\{0,1,\\dots,N-1\\}$, and zero-padding $h[n]$ to length $N\\ge M$ increases the frequency sampling density without changing the underlying spectrum.\n\nYour program must, for each test case, implement the following steps grounded in these principles:\n1. Let the finite impulse response have length $M$. Choose an integer padding factor $S0$ specified per test case. Define the FFT length $N$ as the smallest power of two such that $N\\ge S\\,M$. This $N$ determines a uniform frequency grid $\\omega_m=\\frac{2\\pi m}{N}$ for $m\\in\\{0,1,\\dots,\\lfloor N/2\\rfloor\\}$, which spans $[0,\\pi]$ in radians. Angles are in radians.\n2. Zero-pad $h[n]$ to length $N$ and compute $H_k$ as the discrete Fourier transform sample at index $k$ using an FFT, which corresponds to $H\\!\\left(e^{j\\omega_k}\\right)$ with $\\omega_k=\\frac{2\\pi k}{N}$.\n3. Let the group delay be $\\tau=\\frac{M-1}{2}$. Form the linear-phase-corrected spectrum $G_k=H_k\\,e^{j\\omega_k\\tau}$. For symmetric $h[n]$, the ideal $G_k$ is real-valued; for antisymmetric $h[n]$, the ideal $G_k$ is purely imaginary.\n4. Define an axis leakage metric that quantifies deviation from the expected axis:\n   - If $h[n]$ is symmetric, define the leakage as $\\frac{\\max_k |\\operatorname{Im}\\{G_k\\}|}{\\max_k |G_k|+\\varepsilon}$.\n   - If $h[n]$ is antisymmetric, define the leakage as $\\frac{\\max_k |\\operatorname{Re}\\{G_k\\}|}{\\max_k |G_k|+\\varepsilon}$.\n   Use $\\varepsilon=10^{-12}$ to avoid division by zero.\n5. Estimate the linear phase slope from the unwrapped phase of $H_k$ over $\\omega\\in[0,\\pi]$ after excluding indices where $|H_k|$ is extremely small: select indices with $|H_k|\\ge 10^{-6}\\,\\max_k |H_k|$. Fit a straight line $\\phi(\\omega)\\approx a+b\\,\\omega$ to the unwrapped phase samples $\\phi(\\omega_k)=\\arg H_k$ for the selected indices using least squares. The expected slope is $b\\approx -\\tau$. Report the slope error $|b+\\tau|$.\n\nImplement the above for the following test suite. Each test case provides a length-$M$ impulse response $h[n]$, a symmetry label, and an oversampling factor $S$. The sequences are given explicitly:\n- Test case $1$ (symmetric, Type I): $h[n]=[\\,0.2,\\,0.3,\\,0.4,\\,0.5,\\,0.4,\\,0.3,\\,0.2\\,]$, $S=16$.\n- Test case $2$ (symmetric, Type II): $h[n]=[\\,0.1,\\,0.05,\\,0.2,\\,0.25,\\,0.25,\\,0.2,\\,0.05,\\,0.1\\,]$, $S=8$.\n- Test case $3$ (antisymmetric, Type III): $h[n]=[\\,0.3,\\,0.2,\\,-0.1,\\,0.0,\\,0.1,\\,-0.2,\\,-0.3\\,]$, $S=32$.\n- Test case $4$ (antisymmetric, Type IV): $h[n]=[\\,0.4,\\,0.1,\\,-0.2,\\,0.3,\\,-0.3,\\,0.2,\\,-0.1,\\,-0.4\\,]$, $S=4$.\n\nFor each test case, your program must compute and return a pair of floating-point numbers:\n- The axis leakage metric described in step $4$.\n- The slope error $|b+\\tau|$ described in step $5$.\n\nFinal output format requirement:\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, where each element corresponds to a test case and is itself a two-element list $[\\,\\text{leakage},\\,\\text{slope\\_error}\\,]$. For example, the format must be like $[[x_1,y_1],[x_2,y_2],[x_3,y_3],[x_4,y_4]]$ with no additional text. All angles must be in radians, and all reported quantities must be decimal floating-point numbers.", "solution": "The problem as stated is a well-posed exercise in the numerical verification of fundamental principles of Digital Signal Processing. It is scientifically grounded, internally consistent, and complete. All provided definitions and procedures are standard and correct within this discipline. Therefore, a solution is not only possible but also serves as a direct application of established theory. We will now proceed with a systematic derivation and explanation of the solution.\n\nThe core of the problem lies in the properties of real-valued Finite Impulse Response (FIR) filters, $h[n]$, that exhibit linear phase. The phase of the Discrete-Time Fourier Transform (DTFT), $H\\!\\left(e^{j\\omega}\\right) = \\sum_{n=0}^{M-1} h[n]\\,e^{-j\\omega n}$, is a linear function of the angular frequency $\\omega$. This property arises from time-domain symmetry in the impulse response $h[n]$ of length $M$. There exist four types of such filters, classified by their symmetry and length.\n\nA sequence $h[n]$ has linear phase if it is either symmetric, $h[n] = h[M-1-n]$, or antisymmetric, $h[n] = -h[M-1-n]$. This symmetry implies that the DTFT can be expressed as:\n$$H\\!\\left(e^{j\\omega}\\right) = A(\\omega)\\,e^{-j\\omega\\tau}$$\nwhere $\\tau = \\frac{M-1}{2}$ is the group delay of the filter. The function $A(\\omega)$ is a real-valued function, often referred to as the amplitude function or zero-phase response. The properties of $A(\\omega)$ depend on the filter type:\n1.  **Type I**: Symmetric ($h[n] = h[M-1-n]$), odd length ($M$). $\\tau$ is an integer. $A(\\omega)$ is a real and even function of $\\omega$.\n2.  **Type II**: Symmetric ($h[n] = h[M-1-n]$), even length ($M$). $\\tau$ is a half-integer. $A(\\omega)$ is a real and even function of $\\omega$.\n3.  **Type III**: Antisymmetric ($h[n] = -h[M-1-n]$), odd length ($M$). $\\tau$ is an integer. $A(\\omega)$ is a purely imaginary and odd function of $\\omega$. Note that for $A(\\omega)$ to be imaginary, we can write $A(\\omega)=jB(\\omega)$, where $B(\\omega)$ is real and odd. Consequently, $H\\!\\left(e^{j\\omega}\\right) = B(\\omega) e^{-j(\\omega\\tau - \\pi/2)}$.\n4.  **Type IV**: Antisymmetric ($h[n] = -h[M-1-n]$), even length ($M$). $\\tau$ is a half-integer. $A(\\omega)$ is a purely imaginary and odd function of $\\omega$.\n\nThe problem requires a programmatic validation of these properties using the Fast Fourier Transform (FFT). The procedure is as follows.\n\n**Step 1: FFT Length and Frequency Grid**\nFor an impulse response $h[n]$ of length $M$ and a given integer padding factor $S  0$, the FFT length $N$ is chosen as the smallest power of two such that $N \\ge S \\cdot M$. This choice serves two purposes: first, powers of two are computationally efficient for the FFT algorithm; second, a large $N$ (achieved through zero-padding and a sufficiently large $S$) provides a fine-grained sampling of the underlying continuous DTFT spectrum. The FFT computes samples of the DTFT on a uniform grid of frequencies $\\omega_k = \\frac{2\\pi k}{N}$ for $k \\in \\{0, 1, \\dots, N-1\\}$. Since $h[n]$ is real, its DTFT is conjugate symmetric, $H(e^{j\\omega}) = H^*(e^{-j\\omega})$, so we only need to analyze the frequency range $[0, \\pi]$, which corresponds to indices $k \\in \\{0, 1, \\dots, \\lfloor N/2 \\rfloor\\}$.\n\n**Step 2: FFT Computation**\nThe sequence $h[n]$ is padded with zeros to a total length of $N$. The FFT is then applied to this padded sequence. This yields the discrete frequency samples $H_k = H\\!\\left(e^{j\\omega_k}\\right)$. Using an FFT optimized for real-valued inputs (such as `numpy.fft.rfft`) is more efficient, as it computes only the unique spectral points for non-negative frequencies.\n\n**Step 3: Linear Phase Correction**\nTo verify the properties of the amplitude function $A(\\omega)$, we must remove the linear phase term $e^{-j\\omega\\tau}$ from the computed spectrum $H_k$. This is achieved by computing the corrected spectrum $G_k$:\n$$G_k = H_k \\, e^{j\\omega_k\\tau}$$\nAccording to theory, for a symmetric filter ($h[n] = h[M-1-n]$), the resulting $G_k$ should be purely real, as it represents samples of the real-valued function $A(\\omega)$. For an antisymmetric filter ($h[n] = -h[M-1-n]$), the resulting $G_k$ should be purely imaginary, as it represents samples of the imaginary-valued function $A(\\omega)$. Due to finite-precision arithmetic, these values will not be perfectly real or imaginary.\n\n**Step 4: Axis Leakage Metric**\nTo quantify the deviation from the ideal real or imaginary axis, a leakage metric is defined. For a symmetric filter, where $G_k$ is expected to be real, any non-zero imaginary component $\\operatorname{Im}\\{G_k\\}$ is considered leakage. The metric is defined as the maximum absolute imaginary part, normalized by the maximum magnitude of $G_k$ to make it a relative measure:\n$$\\text{leakage}_{\\text{sym}} = \\frac{\\max_k |\\operatorname{Im}\\{G_k\\}|}{\\max_k |G_k|+\\varepsilon}$$\nConversely, for an antisymmetric filter, where $G_k$ is expected to be imaginary, any non-zero real component $\\operatorname{Re}\\{G_k\\}$ is leakage. The metric is:\n$$\\text{leakage}_{\\text{anti}} = \\frac{\\max_k |\\operatorname{Re}\\{G_k\\}|}{\\max_k |G_k|+\\varepsilon}$$\nThe small constant $\\varepsilon = 10^{-12}$ is added for numerical stability, preventing division by zero if the filter is an all-zero sequence.\n\n**Step 5: Group Delay Estimation and Error**\nThe group delay of a system is defined as $\\tau(\\omega) = -\\frac{d}{d\\omega} \\arg\\{H(e^{j\\omega})\\}$. For a linear-phase filter, the phase is approximately $\\phi(\\omega) = \\phi_0 - \\omega\\tau$, where $\\phi_0$ is a constant phase offset ($0$ or $\\pm\\pi/2$). The group delay is therefore constant, $\\tau(\\omega) = \\tau = \\frac{M-1}{2}$. We can verify this by estimating the slope of the phase response.\nFirst, we must compute the unwrapped phase of $H_k$ to remove the $2\\pi$ jumps. Then, we perform a linear least-squares fit to the unwrapped phase samples $\\phi(\\omega_k)$ versus the frequency samples $\\omega_k$, yielding a model $\\phi(\\omega) \\approx a + b\\,\\omega$. The estimated slope $b$ should be approximately equal to $-\\tau$. The slope error is then calculated as $|b+\\tau|$.\nIt is critical to perform this fit only on frequency indices where the magnitude $|H_k|$ is significant. At frequencies where $|H_k|$ is close to zero (i.e., in the filter's stopband or at spectral nulls), the phase is ill-defined and numerically unstable. Therefore, we use only indices where $|H_k| \\ge 10^{-6}\\,\\max_k |H_k|$. This procedure provides a robust estimate of the filter's true group delay.\n\nThe implementation of these steps for each test case will quantitatively confirm the theoretical properties of the four canonical types of linear-phase FIR filters.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Evaluates the properties of linear-phase FIR filters based on the problem statement.\n    \"\"\"\n    # Define the test cases from the problem statement.\n    test_cases = [\n        {'h': np.array([0.2, 0.3, 0.4, 0.5, 0.4, 0.3, 0.2]), 'symmetry': 'symmetric', 'S': 16},\n        {'h': np.array([0.1, 0.05, 0.2, 0.25, 0.25, 0.2, 0.05, 0.1]), 'symmetry': 'symmetric', 'S': 8},\n        {'h': np.array([0.3, 0.2, -0.1, 0.0, 0.1, -0.2, -0.3]), 'symmetry': 'antisymmetric', 'S': 32},\n        {'h': np.array([0.4, 0.1, -0.2, 0.3, -0.3, 0.2, -0.1, -0.4]), 'symmetry': 'antisymmetric', 'S': 4},\n    ]\n\n    results = []\n    for case in test_cases:\n        h_n = case['h']\n        symmetry = case['symmetry']\n        S = case['S']\n        \n        # FIR filter length M and group delay tau\n        M = len(h_n)\n        tau = (M - 1) / 2.0\n        \n        # Step 1: Choose FFT length N\n        min_N = S * M\n        if min_N = 0:\n            N = 1\n        else:\n            # Calculate the next power of two = min_N\n            N = 1  (min_N - 1).bit_length()\n\n        # Step 2: Compute FFT\n        # Use rfft for real-valued input, which is more efficient.\n        # It computes the transform for frequencies up to the Nyquist frequency.\n        H_k = np.fft.rfft(h_n, n=N)\n        # Corresponding angular frequencies\n        omega_k = 2 * np.pi * np.fft.rfftfreq(N)\n\n        # Step 3: Form the linear-phase-corrected spectrum G_k\n        G_k = H_k * np.exp(1j * omega_k * tau)\n\n        # Step 4: Calculate axis leakage metric\n        epsilon = 1e-12\n        max_abs_G = np.max(np.abs(G_k))\n        \n        if symmetry == 'symmetric':\n            # For symmetric filters, G_k should be real. Leakage is the imaginary part.\n            leakage = np.max(np.abs(np.imag(G_k))) / (max_abs_G + epsilon)\n        else:  # antisymmetric\n            # For antisymmetric filters, G_k should be purely imaginary. Leakage is the real part.\n            leakage = np.max(np.abs(np.real(G_k))) / (max_abs_G + epsilon)\n\n        # Step 5: Estimate slope error\n        abs_H_k = np.abs(H_k)\n        # Select indices where magnitude is significant to avoid noise in phase\n        threshold = 1e-6 * np.max(abs_H_k)\n        valid_indices = np.where(abs_H_k = threshold)[0]\n        \n        if len(valid_indices)  2:\n            # Cannot fit a line with less than 2 points; this case is unlikely with given filters\n            slope_error = float('nan') \n        else:\n            omega_filtered = omega_k[valid_indices]\n            # Unwrap phase to get a continuous phase curve\n            phase_filtered = np.unwrap(np.angle(H_k[valid_indices]))\n            \n            # Perform linear least-squares fit: phase = b*omega + a\n            # np.polyfit returns coefficients of highest power first: [slope, intercept]\n            b, a = np.polyfit(omega_filtered, phase_filtered, 1)\n            \n            # The expected slope is -tau. The error is |b - (-tau)| = |b + tau|.\n            slope_error = np.abs(b + tau)\n            \n        results.append([leakage, slope_error])\n\n    # Final print statement in the exact required format.\n    # Manually format the string to avoid extra spaces from str(list).\n    formatted_results = [f\"[{l},{s}]\" for l, s in results]\n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n```", "id": "2881267"}]}