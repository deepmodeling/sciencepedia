{"hands_on_practices": [{"introduction": "The Bilinear Transform is a cornerstone of digital filter design, offering a powerful method for converting analog prototypes into stable digital IIR filters. However, this transformation introduces a nonlinear effect known as frequency warping, which distorts the frequency axis. This practice [@problem_id:2852447] guides you through the fundamental derivation of this warping effect and demonstrates the essential technique of pre-warping to precisely control critical frequencies, such as the cutoff frequency, in your final digital filter design.", "problem": "An analog lowpass Butterworth prototype of order $N$ and cutoff (half-power) radian frequency $\\Omega_{c}$ is to be transformed into a digital Infinite Impulse Response (IIR) filter using the Bilinear Transform (BLT). The BLT is applied with sampling period $T$, and analog prewarping is used so that the resulting digital filter has an exact desired digital cutoff radian frequency $\\omega_{c,\\mathrm{des}}$ on the unit circle.\n\nStarting only from the core definitions that: (i) the BLT is a conformal mapping from the complex $s$-plane to the complex $z$-plane, and (ii) analog-to-digital frequency correspondence is evaluated by restricting $s$ to the imaginary axis $s=j\\Omega$ and $z$ to the unit circle $z=e^{j\\omega}$, do the following:\n\n1. Derive the analog-to-digital frequency mapping $\\Omega \\leftrightarrow \\omega$ induced by the BLT under the constraints $s=j\\Omega$ and $z=e^{j\\omega}$, without assuming any particular filter order. From this mapping, derive the prewarped analog cutoff $\\Omega_{p}$ that must be used so that the designed digital filterâ€™s cutoff equals a specified $\\omega_{c,\\mathrm{des}}$ exactly.\n\n2. Using the result of the derivation, determine the exact digital cutoff frequency $\\omega_{c}^{\\star}$ achieved after prewarping and BLT, expressed first symbolically in terms of $\\omega_{c,\\mathrm{des}}$ and $T$, and then evaluate it numerically for the concrete design parameters\n$\\{N=6,\\ \\Omega_{c}=1\\ \\text{rad/s},\\ T=10^{-3}\\ \\text{s},\\ \\omega_{c,\\mathrm{des}}=0.45\\pi\\ \\text{radians/sample}\\}$.\nExplain why the values of $N$ and $\\Omega_{c}$ do not alter the exactness of the achieved digital cutoff when prewarping is used.\n\nReport your final numerical answer for $\\omega_{c}^{\\star}$ in radians/sample, rounded to four significant figures.", "solution": "The problem as stated is valid. It is a well-posed, scientifically grounded problem in digital signal processing that requires the derivation and application of fundamental principles related to IIR filter design using the Bilinear Transform (BLT). All necessary information is provided, and the problem is free of contradictions or ambiguities.\n\nThe analysis proceeds in two parts as requested.\n\nPart 1: Derivation of Frequency Mapping and Prewarped Cutoff\n\nThe Bilinear Transform provides a mapping from the complex $s$-plane to the complex $z$-plane. The standard definition of the BLT, incorporating the sampling period $T$, is given by the substitution:\n$$ s = \\frac{2}{T} \\frac{1 - z^{-1}}{1 + z^{-1}} = \\frac{2}{T} \\frac{z - 1}{z + 1} $$\nTo find the relationship between the analog frequency $\\Omega$ and the digital frequency $\\omega$, we must evaluate this transformation on the imaginary axis of the $s$-plane, $s=j\\Omega$, and the unit circle of the $z$-plane, $z=e^{j\\omega}$. Substituting these into the BLT equation yields:\n$$ j\\Omega = \\frac{2}{T} \\frac{e^{j\\omega} - 1}{e^{j\\omega} + 1} $$\nTo simplify the right-hand side, we can use the identity for the hyperbolic tangent, $\\tanh(x) = \\frac{\\exp(2x)-1}{\\exp(2x)+1}$. By letting $x = j\\omega/2$, the expression becomes:\n$$ j\\Omega = \\frac{2}{T} \\tanh\\left(\\frac{j\\omega}{2}\\right) $$\nUsing the relationship between the hyperbolic tangent and the trigonometric tangent, $\\tanh(jx) = j\\tan(x)$, we have:\n$$ j\\Omega = \\frac{2}{T} j\\tan\\left(\\frac{\\omega}{2}\\right) $$\nAlternatively, without using the hyperbolic tangent identity, we can factor $e^{j\\omega/2}$ from the numerator and denominator:\n$$ j\\Omega = \\frac{2}{T} \\frac{e^{j\\omega/2} \\left( e^{j\\omega/2} - e^{-j\\omega/2} \\right)}{e^{j\\omega/2} \\left( e^{j\\omega/2} + e^{-j\\omega/2} \\right)} $$\nUsing Euler's formulas, $e^{j\\theta} - e^{-j\\theta} = 2j\\sin(\\theta)$ and $e^{j\\theta} + e^{-j\\theta} = 2\\cos(\\theta)$, with $\\theta = \\omega/2$, this simplifies to:\n$$ j\\Omega = \\frac{2}{T} \\frac{2j\\sin(\\omega/2)}{2\\cos(\\omega/2)} = \\frac{2}{T} j\\tan\\left(\\frac{\\omega}{2}\\right) $$\nCanceling the imaginary unit $j$ from both sides gives the direct nonlinear mapping between the analog frequency $\\Omega$ and the digital frequency $\\omega$:\n$$ \\Omega = \\frac{2}{T} \\tan\\left(\\frac{\\omega}{2}\\right) $$\nThis phenomenon, where the linear analog frequency axis is mapped nonlinearly onto the digital frequency axis, is known as frequency warping.\n\nThe purpose of prewarping is to counteract this effect at specific frequencies of interest. To ensure that the resulting digital filter has its cutoff frequency located exactly at a desired value $\\omega_{c,\\mathrm{des}}$, we must design the intermediate analog filter with a specially chosen cutoff frequency, which we denote as the prewarped analog cutoff $\\Omega_p$. This $\\Omega_p$ is the analog frequency that maps precisely to $\\omega_{c,\\mathrm{des}}$ under the BLT. We find it by substituting $\\omega = \\omega_{c,\\mathrm{des}}$ into the derived mapping equation:\n$$ \\Omega_{p} = \\frac{2}{T} \\tan\\left(\\frac{\\omega_{c,\\mathrm{des}}}{2}\\right) $$\nThis is the required expression for the prewarped analog cutoff frequency. An analog prototype filter with cutoff $\\Omega_c$ must be frequency-scaled to have this cutoff frequency $\\Omega_p$ before the BLT is applied.\n\nPart 2: Calculation and Explanation\n\nThe problem asks for the exact digital cutoff frequency $\\omega_{c}^{\\star}$ achieved after prewarping and applying the BLT. The prewarping step is designed precisely for this purpose. We start with an analog prototype with cutoff $\\Omega_c$. We then scale its frequency response to create a new analog filter with cutoff $\\Omega_p = \\frac{2}{T} \\tan(\\omega_{c,\\mathrm{des}}/2)$. When the BLT is applied to this prewarped analog filter, its cutoff frequency $\\Omega_p$ will, by the definition of the frequency mapping, be transformed to the digital frequency $\\omega_{c,\\mathrm{des}}$. Therefore, the achieved digital cutoff frequency $\\omega_{c}^{\\star}$ is exactly equal to the desired digital cutoff frequency $\\omega_{c,\\mathrm{des}}$.\nSymbolically, the answer is:\n$$ \\omega_{c}^{\\star} = \\omega_{c,\\mathrm{des}} $$\nUsing the given numerical parameters:\n$$ \\omega_{c,\\mathrm{des}} = 0.45\\pi\\ \\text{radians/sample} $$\nThe exact digital cutoff frequency achieved is:\n$$ \\omega_{c}^{\\star} = 0.45\\pi \\approx 1.41371669... \\ \\text{radians/sample} $$\nRounding this value to four significant figures gives $1.414$ radians/sample.\n\nThe values of the prototype filter order, $N$, and the prototype cutoff frequency, $\\Omega_c$, do not alter the exactness of the achieved digital cutoff frequency $\\omega_c^{\\star}$. The reasoning is as follows: The frequency mapping $\\Omega = \\frac{2}{T}\\tan(\\omega/2)$ is an inherent mathematical property of the Bilinear Transform itself. It describes how the frequency axis is transformed, regardless of the filter transfer function being applied to it. The prewarping step explicitly calculates the required analog cutoff $\\Omega_p$ based *only* on the desired digital cutoff $\\omega_{c,\\mathrm{des}}$ and the sampling period $T$. This step effectively decouples the final cutoff frequency location from the initial prototype's specifications ($N$ and $\\Omega_c$). The parameters $N$ and $\\Omega_c$ define the characteristics of the *prototype* filter (e.g., its magnitude response shape and transition bandwidth). While these characteristics are preserved in a warped manner in the final digital filter, the process of frequency scaling the prototype to meet the prewarped cutoff $\\Omega_p$ ensures that the half-power point of the final digital filter lands exactly at $\\omega_{c,\\mathrm{des}}$, irrespective of the prototype's original order or cutoff frequency.", "answer": "$$\n\\boxed{1.414}\n$$", "id": "2852447"}, {"introduction": "While the Bilinear Transform is widely used, it is crucial to understand its properties in comparison to other methods like Impulse Invariance. Each transformation technique preserves different characteristics of the original analog system, leading to distinct trade-offs in the resulting digital filter's performance. This exercise [@problem_id:2852396] challenges you to critically analyze and compare the step responses, pole locations, and frequency-domain behaviors of filters designed with both methods, thereby deepening your understanding of when to choose one over the other.", "problem": "Consider the continuous-time first-order low-pass prototype with transfer function $H_{a}(s)=\\dfrac{\\Omega_{c}}{s+\\Omega_{c}}$, where $\\Omega_{c}>0$. Two discrete-time, linear time-invariant (LTI) filters are designed from $H_{a}(s)$ at sampling period $T>0$ under the following transformation rules, applied in their standard forms without any additional gain normalization or frequency prewarping:\n- Impulse invariance: define the discrete-time impulse response as the sampled-and-scaled continuous-time impulse response.\n- Bilinear transform: map the complex frequency variable by the conformal warping that takes the open left-half of the $s$-plane onto the open unit disk of the $z$-plane.\n\nLet $H_{\\mathrm{II}}(z)$ and $H_{\\mathrm{BL}}(z)$ denote the resulting discrete-time transfer functions. For the unit-step input $u[n]$, let $s_{\\mathrm{II}}[n]$ and $s_{\\mathrm{BL}}[n]$ denote the corresponding step responses of $H_{\\mathrm{II}}(z)$ and $H_{\\mathrm{BL}}(z)$, respectively. Assume both designs are implemented exactly and that the input is strictly discrete-time. Which of the following statements are correct? Select all that apply.\n\nA. For any $T>0$, the steady-state value $\\lim_{n\\to\\infty}s_{\\mathrm{II}}[n]$ is strictly greater than $1$, whereas $\\lim_{n\\to\\infty}s_{\\mathrm{BL}}[n]=1$. The discrepancy arises because impulse invariance approximates the continuous-time step integral by a rectangular sum of samples, while the bilinear transform maps $z=1$ to $s=0$, exactly preserving direct current (DC) gain.\n\nB. The unique pole of $H_{\\mathrm{II}}(z)$ lies at $z=e^{-\\Omega_{c}T}$, while the unique pole of $H_{\\mathrm{BL}}(z)$ lies at $z=\\dfrac{1-\\frac{\\Omega_{c}T}{2}}{1+\\frac{\\Omega_{c}T}{2}}$. Consequently, for $\\Omega_{c}T>2$, the bilinear pole is negative and produces a non-monotone (alternating-sign) transient, whereas the impulse-invariant transient remains monotone.\n\nC. Impulse invariance is free of aliasing for all inputs, and therefore $s_{\\mathrm{II}}[n]$ exactly equals the sampled continuous-time step response for all $n\\in\\mathbb{Z}_{\\ge 0}$.\n\nD. In the limit of fast sampling, i.e., as $T\\to 0^{+}$ with fixed $\\Omega_{c}$, the dominant-exponential factors governing the transients of $s_{\\mathrm{II}}[n]$ and $s_{\\mathrm{BL}}[n]$ agree to first order in $T$ and differ only at order $T^{2}$ in the corresponding decay rates when expressed per sample.\n\nE. The bilinear transform preserves the area under the impulse response; hence, for any $T>0$, $\\lim_{n\\to\\infty}s_{\\mathrm{BL}}[n]=\\dfrac{\\Omega_{c}T}{1-e^{-\\Omega_{c}T}}$.", "solution": "The problem statement is subjected to validation.\n\n### Step 1: Extract Givens\n-   **Continuous-time prototype filter**: $H_{a}(s)=\\dfrac{\\Omega_{c}}{s+\\Omega_{c}}$, with cutoff frequency $\\Omega_{c} > 0$.\n-   **Sampling period**: $T > 0$.\n-   **Design Method 1 (Impulse Invariance)**: The discrete-time impulse response $h_{\\mathrm{II}}[n]$ is the sampled-and-scaled continuous-time impulse response $h_a(t)$.\n-   **Design Method 2 (Bilinear Transform)**: The complex frequency variable $s$ is mapped using the standard conformal warping $s \\to \\frac{2}{T}\\frac{1-z^{-1}}{1+z^{-1}}$.\n-   **Normalization**: No additional gain normalization or frequency prewarping is applied.\n-   **Discrete-time transfer functions**: $H_{\\mathrm{II}}(z)$ and $H_{\\mathrm{BL}}(z)$.\n-   **Input signal**: Unit-step sequence $u[n]$.\n-   **Output signals (step responses)**: $s_{\\mathrm{II}}[n]$ and $s_{\\mathrm{BL}}[n]$.\n\n### Step 2: Validate Using Extracted Givens\nThe problem is well-defined within the domain of digital signal processing, specifically IIR filter design.\n-   **Scientifically Grounded**: The problem uses standard, \"textbook\" concepts: a first-order low-pass filter, impulse invariance, and the bilinear transform. These are fundamental methods in DSP. The principles are sound.\n-   **Well-Posed**: The problem gives sufficient information to uniquely determine the discrete-time transfer functions $H_{\\mathrm{II}}(z)$ and $H_{\\mathrm{BL}}(z)$ from the analog prototype $H_{a}(s)$. The questions posed are specific and can be answered through direct calculation and analysis.\n-   **Objective**: The problem is stated using precise mathematical and engineering terminology. There is no ambiguity or subjective content.\n\nAll other checks for invalidity are passed. The problem is a standard exercise in comparing two common analog-to-digital filter design techniques.\n\n### Step 3: Verdict and Action\nThe problem statement is **valid**. A solution will be derived.\n\nFirst, we derive the transfer functions $H_{\\mathrm{II}}(z)$ and $H_{\\mathrm{BL}}(z)$.\n\n**Impulse Invariance Design ($H_{\\mathrm{II}}(z)$)**\n1.  The impulse response of the analog prototype $H_a(s)$ is found via the inverse Laplace transform:\n    $$h_a(t) = \\mathcal{L}^{-1}\\left\\{\\frac{\\Omega_{c}}{s+\\Omega_{c}}\\right\\} = \\Omega_{c} e^{-\\Omega_{c} t} u_a(t)$$\n    where $u_a(t)$ is the continuous-time unit step function.\n2.  The impulse invariance method with scaling defines the discrete-time impulse response as $h_{\\mathrm{II}}[n] = T \\cdot h_a(nT)$.\n    $$h_{\\mathrm{II}}[n] = T \\left( \\Omega_{c} e^{-\\Omega_{c} nT} u_a(nT) \\right) = T\\Omega_{c} (e^{-\\Omega_{c}T})^n u[n]$$\n    where $u[n]$ is the discrete-time unit step sequence.\n3.  The Z-transform of $h_{\\mathrm{II}}[n]$ gives the transfer function $H_{\\mathrm{II}}(z)$:\n    $$H_{\\mathrm{II}}(z) = \\mathcal{Z}\\{h_{\\mathrm{II}}[n]\\} = T\\Omega_{c} \\sum_{n=0}^{\\infty} (e^{-\\Omega_{c}T} z^{-1})^n = \\frac{T\\Omega_{c}}{1 - e^{-\\Omega_{c}T}z^{-1}}$$\n\n**Bilinear Transform Design ($H_{\\mathrm{BL}}(z)$)**\n1.  The bilinear transform is defined by the substitution $s = \\frac{2}{T}\\frac{1-z^{-1}}{1+z^{-1}}$.\n2.  We substitute this into $H_a(s)$:\n    $$H_{\\mathrm{BL}}(z) = H_a\\left(\\frac{2}{T}\\frac{1-z^{-1}}{1+z^{-1}}\\right) = \\frac{\\Omega_c}{\\frac{2}{T}\\frac{1-z^{-1}}{1+z^{-1}} + \\Omega_c}$$\n    Multiplying the numerator and denominator by $T(1+z^{-1})$ gives:\n    $$H_{\\mathrm{BL}}(z) = \\frac{\\Omega_c T(1+z^{-1})}{2(1-z^{-1}) + \\Omega_c T(1+z^{-1})} = \\frac{\\Omega_c T(1+z^{-1})}{(2+\\Omega_c T) - (2-\\Omega_c T)z^{-1}}$$\n    This can be written as:\n    $$H_{\\mathrm{BL}}(z) = \\frac{\\Omega_c T}{2+\\Omega_c T} \\cdot \\frac{1+z^{-1}}{1 - \\frac{2-\\Omega_c T}{2+\\Omega_c T}z^{-1}}$$\n\nNow we evaluate each statement.\n\n**A. For any $T>0$, the steady-state value $\\lim_{n\\to\\infty}s_{\\mathrm{II}}[n]$ is strictly greater than $1$, whereas $\\lim_{n\\to\\infty}s_{\\mathrm{BL}}[n]=1$. The discrepancy arises because impulse invariance approximates the continuous-time step integral by a rectangular sum of samples, while the bilinear transform maps $z=1$ to $s=0$, exactly preserving direct current (DC) gain.**\n\nThe steady-state value of the step response is found using the Final Value Theorem, which states $\\lim_{n\\to\\infty} s[n] = \\lim_{z\\to 1} (1-z^{-1})S(z)$. For a stable system with input $u[n]$, whose Z-transform is $U(z)=\\frac{1}{1-z^{-1}}$, the step response is $S(z)=H(z)U(z)$, so the steady-state value is $H(1)$.\n\n-   For impulse invariance:\n    $$s_{\\mathrm{II, ss}} = H_{\\mathrm{II}}(1) = \\frac{T\\Omega_{c}}{1 - e^{-\\Omega_{c}T}}$$\n    Let $x = \\Omega_{c}T > 0$. We must compare $\\frac{x}{1-e^{-x}}$ to $1$. Consider the function $f(x) = x - (1-e^{-x})$. At $x=0$, $f(0)=0$. The derivative is $f'(x) = 1-e^{-x}$. For $x>0$, $f'(x)>0$, so $f(x)$ is strictly increasing. Thus, for $x>0$, $f(x) > f(0) = 0$, which implies $x > 1-e^{-x}$. Since $1-e^{-x}>0$, we can divide to get $\\frac{x}{1-e^{-x}} > 1$. Therefore, $s_{\\mathrm{II, ss}} > 1$.\n-   For bilinear transform:\n    $$s_{\\mathrm{BL, ss}} = H_{\\mathrm{BL}}(1) = \\frac{\\Omega_c T(1+1)}{(2+\\Omega_c T) - (2-\\Omega_c T)(1)} = \\frac{2\\Omega_c T}{2+\\Omega_c T - 2 + \\Omega_c T} = \\frac{2\\Omega_c T}{2\\Omega_c T} = 1$$\nThe numeric parts of the statement are correct. The reasoning is also correct. Impulse invariance suffers from aliasing because the prototype filter is not band-limited. The DC gain of the resulting digital filter is $H_{II}(1) = \\sum_{k=-\\infty}^{\\infty} H_a(j \\frac{2\\pi k}{T})$, which sums the DC gain $H_a(0)=1$ with aliased components, making it greater than $1$. The bilinear transform maps the DC point $s=0$ in the analog domain to the DC point $z=1$ in the digital domain, so $H_{\\mathrm{BL}}(1) = H_a(0) = 1$, preserving the DC gain.\n\nVerdict on A: **Correct**.\n\n**B. The unique pole of $H_{\\mathrm{II}}(z)$ lies at $z=e^{-\\Omega_{c}T}$, while the unique pole of $H_{\\mathrm{BL}}(z)$ lies at $z=\\dfrac{1-\\frac{\\Omega_{c}T}{2}}{1+\\frac{\\Omega_{c}T}{2}}$. Consequently, for $\\Omega_{c}T>2$, the bilinear pole is negative and produces a non-monotone (alternating-sign) transient, whereas the impulse-invariant transient remains monotone.**\n\nThe poles are found from the denominators of the transfer functions.\n-   Pole of $H_{\\mathrm{II}}(z)$: From $1 - e^{-\\Omega_{c}T}z^{-1}=0$, we find the pole $p_{\\mathrm{II}} = e^{-\\Omega_{c}T}$.\n-   Pole of $H_{\\mathrm{BL}}(z)$: From $1 - \\frac{2-\\Omega_c T}{2+\\Omega_c T}z^{-1}=0$, we find the pole $p_{\\mathrm{BL}} = \\frac{2-\\Omega_c T}{2+\\Omega_c T} = \\frac{1-\\frac{\\Omega_{c}T}{2}}{1+\\frac{\\Omega_{c}T}{2}}$.\nThe pole locations given are correct.\n\nNow, we analyze the transient behavior. The transient part of the response is governed by terms of the form $(p)^n$.\n-   Since $\\Omega_c > 0$ and $T > 0$, the pole $p_{\\mathrm{II}} = e^{-\\Omega_{c}T}$ satisfies $0 < p_{\\mathrm{II}} < 1$. It is always real and positive. The transient term $(p_{\\mathrm{II}})^n$ decays monotonically to zero without changing sign. The step response is therefore monotone.\n-   The pole $p_{\\mathrm{BL}}$'s sign depends on its numerator, $1-\\frac{\\Omega_{c}T}{2}$.\n    -   If $\\Omega_{c}T < 2$, then $p_{\\mathrm{BL}} > 0$. The transient is monotone.\n    -   If $\\Omega_{c}T > 2$, then $p_{\\mathrm{BL}} < 0$. The transient term $(p_{\\mathrm{BL}})^n$ alternates in sign, causing the step response to oscillate around its final value. This is a non-monotone response.\nThe statement correctly describes this behavior.\n\nVerdict on B: **Correct**.\n\n**C. Impulse invariance is free of aliasing for all inputs, and therefore $s_{\\mathrm{II}}[n]$ exactly equals the sampled continuous-time step response for all $n\\in\\mathbb{Z}_{\\ge 0}$.**\n\nThe first claim, \"Impulse invariance is free of aliasing for all inputs,\" is fundamentally incorrect. The method involves sampling an analog impulse response. According to sampling theory, this process introduces aliasing unless the analog signal is strictly band-limited. The frequency response of our prototype, $|H_a(j\\Omega)| = \\frac{\\Omega_c}{\\sqrt{\\Omega^2+\\Omega_c^2}}$, has infinite support, so aliasing is unavoidable.\n\nThe second claim is a consequence of the first, and is also incorrect. Let's verify by direct comparison.\n-   The continuous-time step response is $s_a(t) = \\mathcal{L}^{-1}\\{H_a(s)/s\\} = \\mathcal{L}^{-1}\\{\\frac{1}{s} - \\frac{1}{s+\\Omega_c}\\} = (1 - e^{-\\Omega_c t})u_a(t)$.\n-   The sampled continuous-time step response is $s_a(nT) = (1 - e^{-\\Omega_c nT})u[n]$.\n-   The step response of the discrete-time filter is the accumulator of its impulse response: $s_{\\mathrm{II}}[n] = \\sum_{k=0}^n h_{\\mathrm{II}}[k] = \\sum_{k=0}^n T\\Omega_{c} (e^{-\\Omega_{c}T})^k$. This is a geometric series sum:\n    $$s_{\\mathrm{II}}[n] = T\\Omega_{c} \\frac{1 - (e^{-\\Omega_{c}T})^{n+1}}{1 - e^{-\\Omega_{c}T}}$$\nComparing $s_{\\mathrm{II}}[n]$ with $s_a(nT)$, they are clearly not equal. For instance, at $n=0$, $s_a(0) = 0$, while $s_{\\mathrm{II}}[0] = h_{\\mathrm{II}}[0] = T\\Omega_{c} \\neq 0$.\n\nVerdict on C: **Incorrect**.\n\n**D. In the limit of fast sampling, i.e., as $T\\to 0^{+}$ with fixed $\\Omega_{c}$, the dominant-exponential factors governing the transients of $s_{\\mathrm{II}}[n]$ and $s_{\\mathrm{BL}}[n]$ agree to first order in $T$ and differ only at order $T^{2}$ in the corresponding decay rates when expressed per sample.**\n\nThe \"dominant-exponential factors\" are the poles $p_{\\mathrm{II}}$ and $p_{\\mathrm{BL}}$. We analyze their Taylor series expansions for small $T$. Let $x = \\Omega_c T$.\n-   $p_{\\mathrm{II}} = e^{-x} = 1 - x + \\frac{x^2}{2} - \\frac{x^3}{6} + O(x^4) = 1 - \\Omega_c T + \\frac{(\\Omega_c T)^2}{2} - O(T^3)$.\n-   $p_{\\mathrm{BL}} = \\frac{1-x/2}{1+x/2} = (1-x/2)(1-x/2+(x/2)^2-\\dots) = 1 - x + \\frac{x^2}{2} - \\frac{x^3}{4} + O(x^4) = 1 - \\Omega_c T + \\frac{(\\Omega_c T)^2}{2} - O(T^3)$.\nBoth poles have the form $1 - \\Omega_c T + O(T^2)$. They agree to first order in $T$. The first part of the statement is correct.\n\nThe \"decay rate when expressed per sample\" can be interpreted as the equivalent continuous-time decay constant $\\gamma$ such that the pole is $p = e^{-\\gamma T}$. Thus, $\\gamma = -\\frac{\\ln p}{T}$.\n-   For impulse invariance: $\\gamma_{\\mathrm{II}} = -\\frac{\\ln(p_{\\mathrm{II}})}{T} = -\\frac{\\ln(e^{-\\Omega_c T})}{T} = \\frac{\\Omega_c T}{T} = \\Omega_c$. This rate is exact.\n-   For bilinear transform: $\\gamma_{\\mathrm{BL}} = -\\frac{\\ln(p_{\\mathrm{BL}})}{T} = -\\frac{1}{T} \\ln\\left(\\frac{1 - \\Omega_c T/2}{1 + \\Omega_c T/2}\\right) = \\frac{1}{T} \\ln\\left(\\frac{1 + \\Omega_c T/2}{1 - \\Omega_c T/2}\\right)$.\nUsing the series expansion $\\ln(\\frac{1+y}{1-y}) = 2y + \\frac{2y^3}{3} + O(y^5)$ for small $y$, with $y = \\frac{\\Omega_c T}{2}$:\n$$\\gamma_{\\mathrm{BL}} = \\frac{1}{T} \\left( 2\\left(\\frac{\\Omega_c T}{2}\\right) + \\frac{2}{3}\\left(\\frac{\\Omega_c T}{2}\\right)^3 + O(T^5) \\right) = \\frac{1}{T} \\left( \\Omega_c T + \\frac{(\\Omega_c T)^3}{12} + O(T^5) \\right) = \\Omega_c + \\frac{\\Omega_c^3}{12}T^2 + O(T^4)$$\nThe difference in decay rates is $\\gamma_{\\mathrm{BL}} - \\gamma_{\\mathrm{II}} = \\frac{\\Omega_c^3}{12}T^2 + O(T^4)$. The first non-zero term in the difference is of order $T^2$. Thus, the rates differ at order $T^2$. The second part of the statement is also correct. This analysis quantifies the well-known frequency warping effect of the bilinear transform.\n\nVerdict on D: **Correct**.\n\n**E. The bilinear transform preserves the area under the impulse response; hence, for any $T>0$, $\\lim_{n\\to\\infty}s_{\\mathrm{BL}}[n]=\\dfrac{\\Omega_{c}T}{1-e^{-\\Omega_{c}T}}$.**\n\nThe \"area under the impulse response\" for a continuous-time system is $\\int_{-\\infty}^{\\infty} h_a(t) dt = H_a(0)$. For a discrete-time system, the equivalent is the sum of its impulse response samples, $\\sum_{n=-\\infty}^{\\infty} h[n] = H(1)$. The bilinear transform ensures $H_{\\mathrm{BL}}(1) = H_a(0)$, so in this sense, it \"preserves the area\". This first part is correct.\n\nThe conclusion, \"hence, for any $T>0$, $\\lim_{n\\to\\infty}s_{\\mathrm{BL}}[n]=\\dfrac{\\Omega_{c}T}{1-e^{-\\Omega_{c}T}}$\", is incorrect. As established in the analysis of statement A, the steady-state step response for the bilinear transform is $\\lim_{n\\to\\infty}s_{\\mathrm{BL}}[n] = H_{\\mathrm{BL}}(1) = H_a(0) = 1$. The expression $\\dfrac{\\Omega_{c}T}{1-e^{-\\Omega_{c}T}}$ is the steady-state value for the impulse invariance filter, $s_{\\mathrm{II,ss}}$. The statement incorrectly equates the bilinear transform's steady state value with that of the impulse invariance filter.\n\nVerdict on E: **Incorrect**.", "answer": "$$\\boxed{ABD}$$", "id": "2852396"}, {"introduction": "A theoretically stable filter design is only the first step; real-world implementation on digital hardware introduces finite-precision errors that can shift a filter's poles and potentially render it unstable. This hands-on programming exercise [@problem_id:2852435] moves from pure theory to practical implementation by exploring the concept of root sensitivity. You will implement a method to calculate the condition number of a filter's poles, providing a quantitative measure of how robust your design is to the inevitable coefficient errors in a fixed-point system.", "problem": "Consider a single-input single-output discrete-time linear time-invariant system whose denominator after an analog-to-digital frequency transformation is represented by a monic polynomial in the complex variable $z$ in the monomial basis,\n$$\np(z) = \\sum_{k=0}^{n} a_k z^k,\\quad a_n = 1,\n$$\nwith complex roots $\\{r_i\\}_{i=1}^n$ (the poles), where $n \\in \\mathbb{N}$. Suppose the implemented coefficients $\\{\\tilde{a}_k\\}$ are subject to additive implementation errors satisfying an absolute componentwise bound\n$$\n|\\delta a_k| \\le \\varepsilon \\quad \\text{for all } k \\in \\{0,\\dots,n\\}, \\quad \\text{where } \\delta a_k := \\tilde{a}_k - a_k,\n$$\nfor a given $\\varepsilon \\ge 0$. You are to analyze first-order root sensitivity and predict potential pole migration relative to the unit circle.\n\nStarting only from the following fundamental base:\n- the definition of the polynomial and its derivative $p'(z) = \\sum_{k=1}^{n} k a_k z^{k-1}$,\n- the first-order Taylor expansion in one complex variable,\nderive and implement a method to compute, for each simple root $r_i$ with $p'(r_i) \\neq 0$, the first-order absolute condition number\n$$\n\\kappa_i := \\frac{\\sum_{k=0}^{n} |r_i|^k}{|p'(r_i)|},\n$$\nwhich provides the perturbation bound\n$$\n|\\delta r_i| \\le \\varepsilon \\,\\kappa_i,\n$$\nunder the given componentwise coefficient error model. For a multiple root (including repeated poles) where $p'(r_i) = 0$, define $\\kappa_i := +\\infty$.\n\nUse these condition numbers to predict possible pole migration across the unit circle by the conservative test\n$$\n|r_i| + \\varepsilon \\,\\kappa_i \\ge 1,\n$$\nwhich indicates that there exists a coefficient perturbation consistent with the model that can move pole $r_i$ to, or beyond, the unit circle.\n\nYour program must:\n- Accept no input and use the fixed test suite below.\n- For each test case, compute all roots $\\{r_i\\}$ of $p(z)$, the corresponding $\\{\\kappa_i\\}$ according to the formula above, the maximum condition number $\\max_i \\kappa_i$, and the boolean indicator\n$$\n\\text{any\\_cross} := \\bigvee_{i=1}^{n} \\left( |r_i| + \\varepsilon \\,\\kappa_i \\ge 1 \\right).\n$$\n- Output one result per test case as a two-element list $[\\text{kappa\\_max}, \\text{any\\_cross}]$ where $\\text{kappa\\_max}$ is the maximum condition number rounded to six decimal places, and $\\text{any\\_cross}$ is a boolean value.\n\nImplementation notes:\n- Treat $p(z)$ as given in ascending powers of $z$ as written above. If your numerical root routine expects descending powers, you must convert formats internally without changing the mathematical definition of the condition number, which uses the ascending-power representation for $p$ and $p'$.\n- For numerical robustness, detect $p'(r_i) = 0$ using a small threshold; if $|p'(r_i)|$ is numerically below a threshold, set $\\kappa_i := +\\infty$.\n- Angles, where present in the problem description, are not used directly by your program; all coefficients are provided numerically. No physical units or angle units are required.\n\nTest suite:\n- Case A (well-damped complex-conjugate poles, degree $2$):\n  - Coefficients in ascending powers $[a_0, a_1, a_2] = [\\,$0.64$, \\,$-0.9404564037$, \\,$1.0$\\,]$.\n  - Error bound $\\varepsilon = $1.0e-6$.\n- Case B (near-unit-circle complex-conjugate poles, degree $2$):\n  - Coefficients in ascending powers $[a_0, a_1, a_2] = [\\,$0.9801$, \\,$-0.3097402407$, \\,$1.0$\\,]$.\n  - Error bound $\\varepsilon = $2.0e-2$.\n- Case C (double real pole, degree $2$):\n  - Coefficients in ascending powers $[a_0, a_1, a_2] = [\\,$0.9604$, \\,$-1.96$, \\,$1.0$\\,]$.\n  - Error bound $\\varepsilon = $1.0e-6$.\n\nFinal output format:\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, with one element per test case in the same order as above. Each element must itself be a two-element list $[\\text{kappa\\_max}, \\text{any\\_cross}]$, where $\\text{kappa\\_max}$ is a floating-point number rounded to six decimal places and $\\text{any\\_cross}$ is a boolean. For example, a valid shape is\n$$\n[[\\text{float},\\ \\text{bool}],\\ [\\text{float},\\ \\text{bool}],\\ [\\text{float},\\ \\text{bool}]].\n$$", "solution": "The problem requires the derivation of a first-order perturbation bound for polynomial roots and its application to assess pole stability in a discrete-time system. The derivation proceeds from first principles of calculus.\n\nLet a polynomial be defined as $p(z) = \\sum_{k=0}^{n} a_k z^k$. A perturbation in its coefficients, $\\tilde{a}_k = a_k + \\delta a_k$, results in a perturbed polynomial $\\tilde{p}(z) = p(z) + \\delta p(z)$, where $\\delta p(z) = \\sum_{k=0}^{n} \\delta a_k z^k$. If $r$ is a simple root of $p(z)$, so $p(r)=0$ and $p'(r) \\neq 0$, the corresponding root $\\tilde{r} = r + \\delta r$ of the perturbed polynomial satisfies $\\tilde{p}(\\tilde{r})=0$. This is equivalent to the equation $p(r+\\delta r) + \\delta p(r+\\delta r) = 0$.\n\nApplying a first-order Taylor expansion for $p(z)$ around the point $z=r$ yields $p(r+\\delta r) \\approx p(r) + p'(r)\\delta r$. As $r$ is a root, $p(r)=0$, so this simplifies to $p(r+\\delta r) \\approx p'(r)\\delta r$. For the perturbation term $\\delta p(z)$, which is itself a small quantity, we make the first-order approximation $\\delta p(r+\\delta r) \\approx \\delta p(r) = \\sum_{k=0}^{n} \\delta a_k r^k$.\n\nSubstituting these approximations into the root condition gives the first-order relation:\n$$\np'(r)\\delta r + \\sum_{k=0}^{n} \\delta a_k r^k \\approx 0\n$$\nSolving for the root perturbation $\\delta r$, we obtain:\n$$\n\\delta r \\approx - \\frac{\\sum_{k=0}^{n} \\delta a_k r^k}{p'(r)}\n$$\nTo find a bound on the magnitude $|\\delta r|$, we apply the triangle inequality to the expression above:\n$$\n|\\delta r| \\approx \\left| \\frac{\\sum_{k=0}^{n} \\delta a_k r^k}{p'(r)} \\right| \\le \\frac{\\sum_{k=0}^{n} |\\delta a_k r^k|}{|p'(r)|} = \\frac{\\sum_{k=0}^{n} |\\delta a_k| |r|^k}{|p'(r)|}\n$$\nGiven the componentwise error model $|\\delta a_k| \\le \\varepsilon$, we can substitute this into the inequality to establish the final perturbation bound:\n$$\n|\\delta r| \\le \\varepsilon \\frac{\\sum_{k=0}^{n} |r|^k}{|p'(r)|} = \\varepsilon \\,\\kappa\n$$\nwhere $\\kappa_i := \\frac{\\sum_{k=0}^{n} |r_i|^k}{|p'(r_i)|}$ is the absolute condition number for the root $r_i$. This derivation confirms the formula provided in the problem statement. For a multiple root where $p'(r_i)=0$, the denominator vanishes, indicating infinite first-order sensitivity. Thus, for such cases, the condition number $\\kappa_i$ is correctly defined as $+\\infty$.\n\nThe implementation algorithm is designed based on these principles.\nFirst, for each test case, the polynomial coefficients $\\{a_k\\}$, which are provided in ascending powers of $z$, are defined. Since the numerical routines in the `numpy` library expect coefficients in descending order of powers, the coefficient list is reversed before use.\nSecond, the roots $\\{r_i\\}$ of the polynomial $p(z)$ are computed using the `numpy.roots` function.\nThird, for each root $r_i$, its condition number $\\kappa_i$ is calculated. This involves evaluating the derivative $p'(r_i)$. The derivative polynomial is obtained programmatically using `numpy.polyder`, which operates on the descending-power coefficient representation. A critical numerical consideration is the detection of multiple roots. A root $r_i$ is treated as multiple if the magnitude of its derivative, $|p'(r_i)|$, falls below a small numerical threshold, for which a value of $10^{-12}$ is chosen. In this case, $\\kappa_i$ is set to infinity (`numpy.inf`). For simple roots, $\\kappa_i$ is computed using the derived formula. The numerator, $\\sum_{k=0}^{n} |r_i|^k$, is calculated via direct summation for numerical stability, especially for roots near the unit circle.\nFourth, the potential for pole migration across the unit circle is assessed for each root using the conservative test $|r_i| + \\varepsilon \\kappa_i \\ge 1$. The result of this test is a boolean value. The overall `any_cross` flag is then determined by taking the logical OR of these individual results for all roots of the polynomial.\nFinally, the maximum condition number, $\\kappa_{\\max} = \\max_i \\kappa_i$, is identified from the set of computed condition numbers. The pair $[\\kappa_{\\max}, \\text{any\\_cross}]$ is formatted as required, with $\\kappa_{\\max}$ rounded to six decimal places. This procedure is repeated for all specified test cases to generate the final output.", "answer": "```\n[\n  [1.884735, false],\n  [1.518147, true],\n  [inf, true]\n]\n```", "id": "2852435"}]}