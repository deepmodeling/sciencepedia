{"hands_on_practices": [{"introduction": "Fast convolution methods cleverly use the efficiency of the FFT, which computes circular convolution. The crucial link to our goal of linear convolution lies in understanding and controlling time-domain aliasing. This exercise provides a concrete comparison, demonstrating how choosing a sufficiently large FFT size, $N$, yields the correct linear convolution result, while an insufficient size leads to predictable aliasing errors that you will quantify directly.[@problem_id:2870370]", "problem": "Consider fast convolution via the Discrete Fourier Transform (DFT) within the Overlap-Add (OLA) or Overlap-Save (OLS) framework. Let the finite impulse response (FIR) filter have length $M=4$ with impulse response $h[n]$ supported on $n \\in \\{0,1,2,3\\}$, and let the input block have length $L=5$ with samples $x[n]$ supported on $n \\in \\{0,1,2,3,4\\}$. You will examine how choosing the DFT length $N$ below versus at the non-aliasing threshold affects the circular convolution result.\n\nTake the specific sequences\n- $x[0]=2$, $x[1]=-1$, $x[2]=0$, $x[3]=3$, $x[4]=1$ (and $x[n]=0$ otherwise),\n- $h[0]=1$, $h[1]=-2$, $h[2]=1$, $h[3]=-1$ (and $h[n]=0$ otherwise).\n\nStarting only from the core definitions of linear convolution and circular convolution, and the fact that circular convolution of $N$-periodic extensions implements convolution modulo $N$, do the following:\n\n1) Compute the linear convolution $y_{\\text{lin}}[n]=(x*h)[n]$ for $n \\in \\{0,1,\\dots,7\\}$.\n\n2) Explain why choosing $N=8$ avoids time-domain aliasing for this pair $(x,h)$, and verify that the $N=8$ circular convolution equals $y_{\\text{lin}}[n]$ for $n \\in \\{0,1,\\dots,7\\}$.\n\n3) Compute the $N=6$ circular convolution output $y_{6}[n]$ for $n \\in \\{0,1,2,3,4,5\\}$, and, by appealing to the modulo-$N$ structure, identify exactly which linear-convolution samples are folded (aliased) and where they appear in $y_{6}[n]$.\n\n4) Define the aliasing error vector $e[n]=y_{6}[n]-y_{\\text{lin}}[n]$ for $n \\in \\{0,1,2,3,4,5\\}$, and compute its squared Euclidean norm\n$$\nE=\\sum_{n=0}^{5} \\big(e[n]\\big)^{2}.\n$$\n\nProvide as your final answer the real number $E$. No units are required. Do not round unless necessary; if rounding is necessary, round to $4$ significant figures.", "solution": "The problem as stated is scientifically grounded, self-contained, and well-posed. It is a standard exercise in digital signal processing that tests the fundamental understanding of the relationship between linear and circular convolution, which is the theoretical basis for fast convolution methods such as Overlap-Add and Overlap-Save. All necessary data and definitions are provided, and the questions are unambiguous. The problem is valid, and we may proceed to the solution.\n\nThe core principle connecting linear and circular convolution is that the $N$-point circular convolution of two finite-length sequences $x[n]$ and $h[n]$ is equivalent to the time-aliased version of their linear convolution $y_{\\text{lin}}[n]$. More formally, if $y_N[n]$ denotes the $N$-point circular convolution, its relation to the linear convolution $y_{\\text{lin}}[n] = (x*h)[n]$ is given by:\n$$\ny_N[n] = \\sum_{l=-\\infty}^{\\infty} y_{\\text{lin}}[n+lN]\n$$\nfor $n \\in \\{0, 1, \\dots, N-1\\}$.\n\n$1$) First, we compute the linear convolution $y_{\\text{lin}}[n] = (x*h)[n]$. The input sequence $x[n]$ has length $L=5$ with support on $n \\in \\{0,1,2,3,4\\}$, and the impulse response $h[n]$ has length $M=4$ with support on $n \\in \\{0,1,2,3\\}$. The resulting linear convolution $y_{\\text{lin}}[n]$ will have a length of $L+M-1 = 5+4-1 = 8$, with support on $n \\in \\{0, 1, \\dots, 7\\}$. The convolution sum is $y_{\\text{lin}}[n] = \\sum_{k=0}^{4} x[k]h[n-k]$.\n\n- For $n=0$: $y_{\\text{lin}}[0] = x[0]h[0] = (2)(1) = 2$.\n- For $n=1$: $y_{\\text{lin}}[1] = x[0]h[1] + x[1]h[0] = (2)(-2) + (-1)(1) = -4 - 1 = -5$.\n- For $n=2$: $y_{\\text{lin}}[2] = x[0]h[2] + x[1]h[1] + x[2]h[0] = (2)(1) + (-1)(-2) + (0)(1) = 2 + 2 = 4$.\n- For $n=3$: $y_{\\text{lin}}[3] = x[0]h[3] + x[1]h[2] + x[2]h[1] + x[3]h[0] = (2)(-1) + (-1)(1) + (0)(-2) + (3)(1) = -2 - 1 + 3 = 0$.\n- For $n=4$: $y_{\\text{lin}}[4] = x[1]h[3] + x[2]h[2] + x[3]h[1] + x[4]h[0] = (-1)(-1) + (0)(1) + (3)(-2) + (1)(1) = 1 - 6 + 1 = -4$.\n- For $n=5$: $y_{\\text{lin}}[5] = x[2]h[3] + x[3]h[2] + x[4]h[1] = (0)(-1) + (3)(1) + (1)(-2) = 3 - 2 = 1$.\n- For $n=6$: $y_{\\text{lin}}[6] = x[3]h[3] + x[4]h[2] = (3)(-1) + (1)(1) = -3 + 1 = -2$.\n- For $n=7$: $y_{\\text{lin}}[7] = x[4]h[3] = (1)(-1) = -1$.\n\nThus, the linear convolution sequence is $y_{\\text{lin}}[n] = \\{2, -5, 4, 0, -4, 1, -2, -1\\}$ for $n \\in \\{0, 1, \\dots, 7\\}$.\n\n$2$) For circular convolution to yield the same result as linear convolution, the DFT length $N$ must be chosen such that no time-domain aliasing occurs. This requires the length $N$ to be at least as large as the length of the linear convolution output. As computed, the length of $y_{\\text{lin}}[n]$ is $L+M-1=8$. Therefore, the condition to avoid aliasing is $N \\ge 8$. Choosing $N=8$ satisfies this minimum requirement.\n\nTo verify this, we use the aliasing formula for $N=8$:\n$$\ny_8[n] = \\sum_{l=-\\infty}^{\\infty} y_{\\text{lin}}[n+8l]\n$$\nFor $n \\in \\{0, 1, \\dots, 7\\}$, the index $n+8l$ falls within the support of $y_{\\text{lin}}[n]$ (which is $\\{0, 1, \\dots, 7\\}$) only for $l=0$. For any other integer $l$, $n+8l$ is outside this range, and $y_{\\text{lin}}[n+8l]$ will be zero. Consequently, the sum reduces to a single term for $l=0$, and we find $y_8[n] = y_{\\text{lin}}[n]$ for all $n \\in \\{0, 1, \\dots, 7\\}$. This confirms that $N=8$ avoids aliasing.\n\n$3$) We now compute the $N=6$ circular convolution, $y_6[n]$. Since $N=6 < 8$, we expect time-domain aliasing. We apply the aliasing formula for $n \\in \\{0, 1, \\dots, 5\\}$:\n$$\ny_6[n] = \\sum_{l=-\\infty}^{\\infty} y_{\\text{lin}}[n+6l]\n$$\nThe non-zero terms in $y_{\\text{lin}}[n]$ are for indices $0$ through $7$. We evaluate $y_6[n]$:\n- For $n=0$: $y_6[0] = y_{\\text{lin}}[0] + y_{\\text{lin}}[0+6] = y_{\\text{lin}}[0] + y_{\\text{lin}}[6] = 2 + (-2) = 0$. The sample $y_{\\text{lin}}[6]$ has aliased (folded) and summed with $y_{\\text{lin}}[0]$.\n- For $n=1$: $y_6[1] = y_{\\text{lin}}[1] + y_{\\text{lin}}[1+6] = y_{\\text{lin}}[1] + y_{\\text{lin}}[7] = -5 + (-1) = -6$. The sample $y_{\\text{lin}}[7]$ has aliased with $y_{\\text{lin}}[1]$.\n- For $n=2$: $y_6[2] = y_{\\text{lin}}[2] + y_{\\text{lin}}[2+6] = y_{\\text{lin}}[2] + y_{\\text{lin}}[8] = 4 + 0 = 4$.\n- For $n=3$: $y_6[3] = y_{\\text{lin}}[3] + y_{\\text{lin}}[3+6] = y_{\\text{lin}}[3] + y_{\\text{lin}}[9] = 0 + 0 = 0$.\n- For $n=4$: $y_6[4] = y_{\\text{lin}}[4] + y_{\\text{lin}}[4+6] = y_{\\text{lin}}[4] + y_{\\text{lin}}[10] = -4 + 0 = -4$.\n- For $n=5$: $y_6[5] = y_{\\text{lin}}[5] + y_{\\text{lin}}[5+6] = y_{\\text{lin}}[5] + y_{\\text{lin}}[11] = 1 + 0 = 1$.\nThe resulting $N=6$ circularly convolved sequence is $y_6[n] = \\{0, -6, 4, 0, -4, 1\\}$ for $n \\in \\{0, 1, \\dots, 5\\}$. The samples $y_{\\text{lin}}[6]$ and $y_{\\text{lin}}[7]$ are the ones that are folded, appearing at indices $6 \\pmod 6 = 0$ and $7 \\pmod 6 = 1$, respectively.\n\n$4$) The aliasing error vector is defined as $e[n] = y_6[n] - y_{\\text{lin}}[n]$ for $n \\in \\{0, 1, \\dots, 5\\}$. Using the results from above:\n- $e[0] = y_6[0] - y_{\\text{lin}}[0] = 0 - 2 = -2$.\n- $e[1] = y_6[1] - y_{\\text{lin}}[1] = -6 - (-5) = -1$.\n- $e[2] = y_6[2] - y_{\\text{lin}}[2] = 4 - 4 = 0$.\n- $e[3] = y_6[3] - y_{\\text{lin}}[3] = 0 - 0 = 0$.\n- $e[4] = y_6[4] - y_{\\text{lin}}[4] = -4 - (-4) = 0$.\n- $e[5] = y_6[5] - y_{\\text{lin}}[5] = 1 - 1 = 0$.\nThe error vector is $e[n] = \\{-2, -1, 0, 0, 0, 0\\}$. The non-zero elements of this error vector are precisely the aliased terms: $e[0] = y_{\\text{lin}}[6]$ and $e[1] = y_{\\text{lin}}[7]$.\n\nFinally, we compute the squared Euclidean norm of the error vector, $E$:\n$$\nE = \\sum_{n=0}^{5} \\big(e[n]\\big)^{2} = (e[0])^2 + (e[1])^2 + (e[2])^2 + (e[3])^2 + (e[4])^2 + (e[5])^2\n$$\n$$\nE = (-2)^2 + (-1)^2 + 0^2 + 0^2 + 0^2 + 0^2 = 4 + 1 + 0 + 0 + 0 + 0 = 5.\n$$\nThe total aliasing error energy is $5$.", "answer": "$$\\boxed{5}$$", "id": "2870370"}, {"introduction": "With the principle of aliasing control in hand, we can now implement a complete algorithm like the overlap-save method. This practice walks you through the precise mechanics of processing a single data block. By constructing the input buffer with the necessary overlap and identifying which output samples are valid, you will solidify your understanding of how the algorithm functions on a sample-by-sample basis.[@problem_id:2870379]", "problem": "A discrete-time linear time-invariant (LTI) system with impulse response length $L=5$ is to be implemented using fast convolution via the overlap-save method with a block length $N=16$. Let the impulse response be $$h[n] = \\begin{cases} 1, & n=0 \\\\ 2, & n=1 \\\\ 3, & n=2 \\\\ 2, & n=3 \\\\ 1, & n=4 \\\\ 0, & \\text{otherwise,} \\end{cases}$$ and let the input be $$x[n] = \\begin{cases} n, & n \\ge 0 \\\\ 0, & n<0. \\end{cases}$$ The first overlap-save block is formed by concatenating $L-1$ past samples (overlap) with $B$ new samples so that the total block length is $N$, where $B = N - L + 1 = 12$. The block is processed by a $16$-point circular convolution between the $N$-point sequences corresponding to $x[n]$ and $h[n]$ (as they would be formed for a Fast Fourier Transform (FFT)-based implementation). In the overlap-save method, the first $L-1$ circularly convolved outputs are discarded and the remaining $B$ outputs are saved.\n\nTasks:\n- Explicitly enumerate the overlapped input samples used for the first block and the $B=12$ new input samples appended to form the $N=16$ input block.\n- Explicitly enumerate the global time indices of the $B=12$ saved outputs produced by this block.\n- Using only the definition of linear convolution, and the equivalence of circular and linear convolution on the saved region for overlap-save, compute the value of the last saved output sample (the twelfth saved output from this block). Provide the final answer as an exact number. No rounding is required.", "solution": "The problem statement is examined and found to be valid. It is a well-posed problem in digital signal processing, providing all necessary parameters and definitions. It is scientifically grounded, objective, and internally consistent. We shall proceed with the solution.\n\nThe problem specifies a discrete-time linear time-invariant (LTI) system to be implemented using the overlap-save method for fast convolution. The key parameters are:\n- Impulse response length: $L=5$.\n- FFT/block length: $N=16$.\n- Number of new samples per block: $B = N - L + 1 = 16 - 5 + 1 = 12$.\n- Number of overlapped samples: $L-1 = 4$.\n\nThe impulse response is given as:\n$$h[n] = h[0]\\delta[n] + h[1]\\delta[n-1] + h[2]\\delta[n-2] + h[3]\\delta[n-3] + h[4]\\delta[n-4]$$\nwith coefficients $h[0]=1$, $h[1]=2$, $h[2]=3$, $h[3]=2$, and $h[4]=1$.\n\nThe input signal is a ramp function starting at $n=0$:\n$$x[n] = \\begin{cases} n, & n \\ge 0 \\\\ 0, & n < 0. \\end{cases}$$\n\nThe solution will address the three tasks in sequence.\n\nFirst task: Enumerate the input samples for the first block.\nThe overlap-save method constructs each input block of length $N$ by taking $L-1$ samples from the end of the previous input data segment and appending $B$ new samples from the input signal. For the very first block, the \"previous\" samples correspond to negative time indices of the input signal.\n\nThe first input block, let us denote it as a sequence $x_1[k]$ for $k=0, 1, \\dots, N-1$, corresponds to the global input signal $x[n]$ over the time interval from $n=-(L-1)$ to $n=B-1$.\nHere, $L-1 = 4$ and $B-1 = 11$. So, the block corresponds to $x[n]$ for $n \\in \\{-4, -3, \\dots, 11\\}$.\n\nThe overlapped samples are the first $L-1=4$ samples of this block. They correspond to global time indices $n = -4, -3, -2, -1$. The values are:\n- $x[-4] = 0$\n- $x[-3] = 0$\n- $x[-2] = 0$\n- $x[-1] = 0$\n\nThe new input samples are the subsequent $B=12$ samples. They correspond to global time indices $n = 0, 1, \\dots, 11$. The values are:\n- $x[0] = 0$\n- $x[1] = 1$\n- $x[2] = 2$\n- $x[3] = 3$\n- $x[4] = 4$\n- $x[5] = 5$\n- $x[6] = 6$\n- $x[7] = 7$\n- $x[8] = 8$\n- $x[9] = 9$\n- $x[10] = 10$\n- $x[11] = 11$\n\nSecond task: Enumerate the global time indices of the saved outputs.\nIn the overlap-save method, a circular convolution of length $N$ is performed on the input block and the zero-padded impulse response. The first $L-1$ output samples are discarded as they are corrupted by time-domain aliasing (wrap-around effects from the circular convolution). The remaining $B = N-L+1$ samples are valid and correspond exactly to the linear convolution of the input signal $x[n]$ with the impulse response $h[n]$.\n\nFor the first block, the \"new\" data starts at global time index $n=0$. The $B=12$ saved output samples correspond to the linear convolution output $y[n] = (x*h)[n]$ for the same global time indices as the new input samples. Therefore, the global time indices of the $B=12$ saved outputs from the first block are:\n$$n = 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11$$\n\nThird task: Compute the value of the last saved output sample.\nThe last saved output sample from the first block is the $12$-th one, which corresponds to the global time index $n=11$. We must compute the value of the linear convolution output $y[11]$.\n\nThe linear convolution is defined by the summation:\n$$y[n] = (x*h)[n] = \\sum_{k=-\\infty}^{\\infty} h[k]x[n-k]$$\nSince the impulse response $h[k]$ is non-zero only for $k \\in \\{0, 1, 2, 3, 4\\}$, the sum simplifies to:\n$$y[n] = \\sum_{k=0}^{4} h[k]x[n-k]$$\nWe need to calculate this for $n=11$:\n$$y[11] = \\sum_{k=0}^{4} h[k]x[11-k]$$\nExpanding the sum gives:\n$$y[11] = h[0]x[11] + h[1]x[10] + h[2]x[9] + h[3]x[8] + h[4]x[7]$$\nWe substitute the given values for the impulse response $h[k]$ and the input signal $x[n]=n$ (since all arguments $11, 10, \\dots, 7$ are non-negative):\n- $h[0]=1, h[1]=2, h[2]=3, h[3]=2, h[4]=1$\n- $x[11]=11, x[10]=10, x[9]=9, x[8]=8, x[7]=7$\n\nSubstituting these values into the expression for $y[11]$:\n$$y[11] = (1)(11) + (2)(10) + (3)(9) + (2)(8) + (1)(7)$$\nPerforming the arithmetic:\n$$y[11] = 11 + 20 + 27 + 16 + 7$$\n$$y[11] = 31 + 27 + 16 + 7$$\n$$y[11] = 58 + 16 + 7$$\n$$y[11] = 74 + 7$$\n$$y[11] = 81$$\nThe value of the last saved output sample is $81$.", "answer": "$$\\boxed{81}$$", "id": "2870379"}, {"introduction": "Beyond algorithmic correctness, the practical utility of fast convolution lies in its performance within real-world systems. This exercise challenges you to step into the role of a system designer, balancing computational costs against performance requirements. You will navigate the trade-offs between block size and FFT length to select optimal processing parameters that satisfy strict real-time throughput and latency budgets, a core task in signal processing engineering.[@problem_id:2870437]", "problem": "A causal, time-invariant finite impulse response filter of length $L$ samples is to be applied to a real-time input stream using fast convolution via the overlap-add method. The input is sampled at a real-time throughput of $R$ samples per second, and the end-to-end latency budget is $D$ seconds. In overlap-add, each block processes $B$ newly acquired samples using a zero-padded Discrete Fourier Transform (DFT) of length $N$ satisfying $N \\geq B + L - 1$. To exploit efficient radix-based implementations, the DFT length $N$ must be a power of two. The Fast Fourier Transform (FFT) and inverse FFT (IFFT) are used to compute the DFTs.\n\nAssume the following implementation and platform assumptions, which are representative of well-tested benchmark behavior:\n- The complex Fast Fourier Transform (FFT) of length $N$ has runtime $t_{\\mathrm{FFT}}(N) = \\alpha \\, N \\log_{2} N + \\beta \\, N$ seconds; the inverse FFT has the same runtime $t_{\\mathrm{IFFT}}(N) = \\alpha \\, N \\log_{2} N + \\beta \\, N$ seconds.\n- The pointwise complex multiplication of the $N$-point spectra takes $t_{\\times}(N) = \\gamma \\, N$ seconds.\n- A constant per-block overhead (buffering, windowing, and miscellaneous operations) takes $t_{0}$ seconds.\n- The filter’s DFT is precomputed once offline and does not contribute to the per-block runtime.\n\nHence, the per-block processing time for overlap-add is\n$$\nt_{\\mathrm{proc}}(N) = 2\\big(\\alpha \\, N \\log_{2} N + \\beta \\, N\\big) + \\gamma \\, N + t_{0}.\n$$\n\nReal-time feasibility requires that, for each block, the computation finishes within the time the next $B$ samples are acquired. This yields the throughput constraint\n$$\nt_{\\mathrm{proc}}(N) \\leq \\frac{B}{R}.\n$$\nA conservative and widely used upper bound on end-to-end latency in block real-time processing is obtained by summing the worst-case block buffering delay and the computation time per block, which yields the latency constraint\n$$\n\\frac{B}{R} + t_{\\mathrm{proc}}(N) \\leq D.\n$$\n\nGiven the concrete parameters\n- $R = 4.8 \\times 10^{4}$ samples per second,\n- $D = 1.0 \\times 10^{-2}$ seconds,\n- $L = 5.13 \\times 10^{2}$ samples,\n- $\\alpha = 3.2 \\times 10^{-8}$ seconds,\n- $\\beta = 2.0 \\times 10^{-9}$ seconds,\n- $\\gamma = 1.0 \\times 10^{-9}$ seconds,\n- $t_{0} = 8.0 \\times 10^{-6}$ seconds,\n\ndetermine the pair $(B^{\\star}, N^{\\star})$ that maximizes $B$ subject to\n- $N$ is a power of two,\n- $N \\geq B + L - 1$,\n- $t_{\\mathrm{proc}}(N) \\leq \\frac{B}{R}$,\n- $\\frac{B}{R} + t_{\\mathrm{proc}}(N) \\leq D$.\n\nReport your answer as the integer pair $(B^{\\star}, N^{\\star})$ with no units. If multiple pairs achieve the same maximal $B$, choose the one with the smallest $N$. Your final answer must be a single row matrix. No rounding is required beyond the integer constraints stated here.", "solution": "The objective is to determine the integer pair $(B^{\\star}, N^{\\star})$ that maximizes the block size $B$ subject to a set of constraints related to real-time fast convolution. The constraints are as follows:\n$1$. $N$ must be a power of two.\n$2$. The overlap-add structural constraint: $N \\geq B + L - 1$.\n$3$. The real-time throughput constraint: $t_{\\mathrm{proc}}(N) \\leq \\frac{B}{R}$.\n$4$. The end-to-end latency constraint: $\\frac{B}{R} + t_{\\mathrm{proc}}(N) \\leq D$.\n\nThe per-block processing time is given by\n$$t_{\\mathrm{proc}}(N) = 2\\big(\\alpha N \\log_{2} N + \\beta N\\big) + \\gamma N + t_{0}$$\nwhich can be simplified to\n$$t_{\\mathrm{proc}}(N) = (2\\alpha) N \\log_{2} N + (2\\beta + \\gamma) N + t_{0}$$\n\nThe throughput and latency constraints can be combined. From constraint $3$, we have $B \\geq R \\cdot t_{\\mathrm{proc}}(N)$. From constraint $4$, we have $B \\leq R(D - t_{\\mathrm{proc}}(N))$. For a feasible solution for $B$ to exist for a given $N$, it must be that\n$$R \\cdot t_{\\mathrm{proc}}(N) \\leq R(D - t_{\\mathrm{proc}}(N))$$\nwhich simplifies to the necessary condition\n$$2 t_{\\mathrm{proc}}(N) \\leq D$$\nThis inequality provides an upper bound on the permissible values of $N$.\n\nThe given parameters are:\n- $R = 4.8 \\times 10^{4}$\n- $D = 1.0 \\times 10^{-2}$\n- $L = 513$\n- $\\alpha = 3.2 \\times 10^{-8}$\n- $\\beta = 2.0 \\times 10^{-9}$\n- $\\gamma = 1.0 \\times 10^{-9}$\n- $t_{0} = 8.0 \\times 10^{-6}$\n\nFirst, we compute the coefficients for the processing time function:\n$$2\\alpha = 2 \\times (3.2 \\times 10^{-8}) = 6.4 \\times 10^{-8}$$\n$$2\\beta + \\gamma = 2 \\times (2.0 \\times 10^{-9}) + 1.0 \\times 10^{-9} = 5.0 \\times 10^{-9}$$\nSo, the processing time is\n$$t_{\\mathrm{proc}}(N) = (6.4 \\times 10^{-8}) N \\log_{2} N + (5.0 \\times 10^{-9}) N + 8.0 \\times 10^{-6}$$\nThe necessary condition becomes $t_{\\mathrm{proc}}(N) \\leq D/2$, or\n$$t_{\\mathrm{proc}}(N) \\leq \\frac{1.0 \\times 10^{-2}}{2} = 5.0 \\times 10^{-3}$$\n\nWe must search for values of $N$ that are powers of two and satisfy this condition. The structural constraint $N \\geq B + L - 1$ implies $N \\geq B + 513 - 1 = B + 512$. Since $B$ must be a positive integer, $B \\geq 1$, which implies $N \\geq 513$. The smallest power of two greater than or equal to $513$ is $N = 1024$.\n\nLet us test candidate values for $N$ starting from $1024$:\n\nFor $N = 1024 = 2^{10}$:\n$t_{\\mathrm{proc}}(1024) = (6.4 \\times 10^{-8})(1024)(10) + (5.0 \\times 10^{-9})(1024) + 8.0 \\times 10^{-6}$\n$t_{\\mathrm{proc}}(1024) = 6.5536 \\times 10^{-4} + 5.12 \\times 10^{-6} + 8.0 \\times 10^{-6} = 6.6848 \\times 10^{-4}$ seconds.\nChecking the necessary condition: $t_{\\mathrm{proc}}(1024) = 6.6848 \\times 10^{-4} \\leq 5.0 \\times 10^{-3}$. This is satisfied.\n\nFor $N = 2048 = 2^{11}$:\n$t_{\\mathrm{proc}}(2048) = (6.4 \\times 10^{-8})(2048)(11) + (5.0 \\times 10^{-9})(2048) + 8.0 \\times 10^{-6}$\n$t_{\\mathrm{proc}}(2048) = 1.441792 \\times 10^{-3} + 1.024 \\times 10^{-5} + 8.0 \\times 10^{-6} = 1.460032 \\times 10^{-3}$ seconds.\nChecking the necessary condition: $t_{\\mathrm{proc}}(2048) = 1.460032 \\times 10^{-3} \\leq 5.0 \\times 10^{-3}$. This is satisfied.\n\nFor $N = 4096 = 2^{12}$:\n$t_{\\mathrm{proc}}(4096) = (6.4 \\times 10^{-8})(4096)(12) + (5.0 \\times 10^{-9})(4096) + 8.0 \\times 10^{-6}$\n$t_{\\mathrm{proc}}(4096) = 3.145728 \\times 10^{-3} + 2.048 \\times 10^{-5} + 8.0 \\times 10^{-6} = 3.174208 \\times 10^{-3}$ seconds.\nChecking the necessary condition: $t_{\\mathrm{proc}}(4096) = 3.174208 \\times 10^{-3} \\leq 5.0 \\times 10^{-3}$. This is satisfied.\n\nFor $N = 8192 = 2^{13}$:\n$t_{\\mathrm{proc}}(8192) = (6.4 \\times 10^{-8})(8192)(13) + (5.0 \\times 10^{-9})(8192) + 8.0 \\times 10^{-6}$\n$t_{\\mathrm{proc}}(8192) = 6.815744 \\times 10^{-3} + 4.096 \\times 10^{-5} + 8.0 \\times 10^{-6} = 6.864704 \\times 10^{-3}$ seconds.\nChecking the necessary condition: $t_{\\mathrm{proc}}(8192) = 6.864704 \\times 10^{-3} > 5.0 \\times 10^{-3}$. This is not satisfied.\n\nThus, the only possible values for $N$ are $\\{1024, 2048, 4096\\}$. For each of these values, we must find the maximum possible integer $B$. The constraints on $B$ are:\n- $B \\leq N - L + 1 = N - 512$\n- $B \\geq R \\cdot t_{\\mathrm{proc}}(N)$\n- $B \\leq R(D - t_{\\mathrm{proc}}(N))$\n\nThis implies that for a given $N$, the maximum integer value for $B$ is\n$$B_{max}(N) = \\min\\left( N - 512, \\lfloor R(D - t_{\\mathrm{proc}}(N)) \\rfloor \\right)$$\nWe must also ensure that this value is consistent with the lower bound, i.e., $B_{max}(N) \\geq \\lceil R \\cdot t_{\\mathrm{proc}}(N) \\rceil$.\n\nWe now evaluate $B_{max}(N)$ for each valid $N$:\n\nCase $N = 1024$:\n- $B \\leq 1024 - 512 = 512$.\n- $B \\geq (4.8 \\times 10^4) \\times (6.6848 \\times 10^{-4}) = 32.08704$. So, $B \\geq 33$.\n- $B \\leq (4.8 \\times 10^4) \\times (1.0 \\times 10^{-2} - 6.6848 \\times 10^{-4}) = (4.8 \\times 10^4) \\times (9.33152 \\times 10^{-3}) = 447.91296$. So, $B \\leq 447$.\nCombining constraints, $33 \\leq B \\leq \\min(512, 447) = 447$. The maximum value is $B_{max}(1024) = 447$.\n\nCase $N = 2048$:\n- $B \\leq 2048 - 512 = 1536$.\n- $B \\geq (4.8 \\times 10^4) \\times (1.460032 \\times 10^{-3}) = 70.081536$. So, $B \\geq 71$.\n- $B \\leq (4.8 \\times 10^4) \\times (1.0 \\times 10^{-2} - 1.460032 \\times 10^{-3}) = (4.8 \\times 10^4) \\times (8.539968 \\times 10^{-3}) = 409.918464$. So, $B \\leq 409$.\nCombining constraints, $71 \\leq B \\leq \\min(1536, 409) = 409$. The maximum value is $B_{max}(2048) = 409$.\n\nCase $N = 4096$:\n- $B \\leq 4096 - 512 = 3584$.\n- $B \\geq (4.8 \\times 10^4) \\times (3.174208 \\times 10^{-3}) = 152.361984$. So, $B \\geq 153$.\n- $B \\leq (4.8 \\times 10^4) \\times (1.0 \\times 10^{-2} - 3.174208 \\times 10^{-3}) = (4.8 \\times 10^4) \\times (6.825792 \\times 10^{-3}) = 327.638016$. So, $B \\leq 327$.\nCombining constraints, $153 \\leq B \\leq \\min(3584, 327) = 327$. The maximum value is $B_{max}(4096) = 327$.\n\nComparing the maximum values of $B$ for each valid $N$:\n- For $N=1024$, $B_{max}=447$.\n- For $N=2048$, $B_{max}=409$.\n- For $N=4096$, $B_{max}=327$.\n\nThe global maximum for $B$ is $B^{\\star} = 447$, which is achieved with $N^{\\star} = 1024$. The problem states that if multiple pairs achieve the same maximal $B$, the one with smallest $N$ should be chosen. Here, the maximum $B$ is unique to a single $N$, so this tie-breaking rule is not strictly necessary but the solution is consistent with it.\n\nThe optimal pair is $(B^{\\star}, N^{\\star}) = (447, 1024)$.", "answer": "$$\\boxed{\\begin{pmatrix} 447 & 1024 \\end{pmatrix}}$$", "id": "2870437"}]}