{"hands_on_practices": [{"introduction": "Understanding group and phase delay begins with the simplest case: a pure time shift. While a theoretical time-advance system is non-causal, it serves as an invaluable conceptual tool for isolating the frequency-domain properties of delay. This practice [@problem_id:1723782] challenges you to derive the phase delay $\\tau_p(\\omega)$ and group delay $\\tau_g(\\omega)$ for such a system, revealing the fundamental connection between a linear phase response and a distortion-free signal translation in time.", "problem": "A Linear Time-Invariant (LTI) system is designed to act as a \"predictor,\" producing an output signal that is a time-advanced version of its input signal. The input-output relationship of this system is given by the equation:\n$$y(t) = x(t + t_0)$$\nwhere $x(t)$ is the input signal, $y(t)$ is the output signal, and $t_0$ is a positive real constant representing the magnitude of the time advance.\n\nThis system, while non-causal and thus not physically realizable in real-time, is a fundamental concept in signal processing theory. Your task is to analyze its behavior in the frequency domain.\n\nDetermine the expressions for the phase delay, $\\tau_p(\\omega)$, and the group delay, $\\tau_g(\\omega)$, of this system as functions of the angular frequency $\\omega$ and the time advance $t_0$.\n\nPresent your answer as a two-element row matrix, where the first element is the expression for the phase delay $\\tau_p(\\omega)$ and the second element is the expression for the group delay $\\tau_g(\\omega)$.", "solution": "To determine the phase and group delay of the system, we first need to find its frequency response, $H(\\omega)$. The frequency response is the Fourier Transform of the system's impulse response, $h(t)$.\n\nThe impulse response $h(t)$ is the output of the system when the input is the Dirac delta function, $x(t) = \\delta(t)$. Substituting this into the system's input-output relationship gives:\n$$h(t) = \\delta(t + t_0)$$\nNow, we compute the Fourier Transform of $h(t)$ to find $H(\\omega)$:\n$$H(\\omega) = \\mathcal{F}\\{h(t)\\} = \\int_{-\\infty}^{\\infty} h(t) e^{-j\\omega t} dt = \\int_{-\\infty}^{\\infty} \\delta(t + t_0) e^{-j\\omega t} dt$$\nUsing the sifting property of the Dirac delta function, which states that $\\int_{-\\infty}^{\\infty} \\delta(t - a) f(t) dt = f(a)$, we can evaluate the integral. In our case, the delta function is centered at $t = -t_0$. Therefore, we have:\n$$H(\\omega) = e^{-j\\omega(-t_0)} = e^{j\\omega t_0}$$\nThe frequency response $H(\\omega)$ can be expressed in polar form as $H(\\omega) = |H(\\omega)| e^{j\\theta(\\omega)}$, where $|H(\\omega)|$ is the magnitude response and $\\theta(\\omega)$ is the phase response.\nFor $H(\\omega) = e^{j\\omega t_0}$, the magnitude is $|H(\\omega)| = |e^{j\\omega t_0}| = 1$. The phase response is:\n$$\\theta(\\omega) = \\omega t_0$$\nThe phase delay, $\\tau_p(\\omega)$, is defined as the negative of the phase response divided by the angular frequency:\n$$\\tau_p(\\omega) = -\\frac{\\theta(\\omega)}{\\omega}$$\nSubstituting our expression for $\\theta(\\omega)$:\n$$\\tau_p(\\omega) = -\\frac{\\omega t_0}{\\omega} = -t_0$$\nThe group delay, $\\tau_g(\\omega)$, is defined as the negative of the derivative of the phase response with respect to the angular frequency:\n$$\\tau_g(\\omega) = -\\frac{d\\theta(\\omega)}{d\\omega}$$\nSubstituting our expression for $\\theta(\\omega)$ and differentiating with respect to $\\omega$:\n$$\\tau_g(\\omega) = -\\frac{d}{d\\omega}(\\omega t_0) = -t_0$$\nBoth the phase delay and the group delay are constant and equal to $-t_0$. This negative value indicates a time advance, which is consistent with the system's definition $y(t) = x(t+t_0)$. A delay of $-t_0$ is equivalent to an advance of $t_0$.\n\nThe phase delay being $-t_0$ means that every individual frequency component (sinusoid) of the input signal appears at the output $t_0$ seconds earlier. The group delay being $-t_0$ means that the envelope of a narrow band of frequencies is also advanced by $t_0$ seconds without distortion.\n\nThe final answer is a two-element row matrix containing the expressions for the phase delay and group delay.\nFirst element: $\\tau_p(\\omega) = -t_0$\nSecond element: $\\tau_g(\\omega) = -t_0$", "answer": "$$\\boxed{\\begin{pmatrix} -t_0 & -t_0 \\end{pmatrix}}$$", "id": "1723782"}, {"introduction": "In practice, most systems do not exhibit a perfectly linear phase response, leading to phase distortion where different frequency components are delayed by different amounts. All-pass filters are designed specifically to manipulate a signal's phase without altering its magnitude, making them ideal for studying these effects. This exercise [@problem_id:1723771] asks you to analyze the group delay of a first-order all-pass filter, a core component in phase equalization, and explore its frequency-dependent nature.", "problem": "In telecommunications and audio engineering, all-pass filters are crucial components used to modify the phase response of a system without altering its magnitude response. They are often employed as phase equalizers to compensate for unwanted time delays and signal distortion.\n\nConsider a first-order analog all-pass filter described by the transfer function in the Laplace domain:\n$$ H(s) = \\frac{a-s}{s+a} $$\nwhere $s$ is the complex frequency and $a$ is a positive real constant that defines the filter's characteristics. The parameter $a$ has units of radians per second.\n\nThe group delay of a filter, denoted by $\\tau_g(\\omega)$, quantifies the time delay experienced by the amplitude envelope of different frequency components of a signal. It is formally defined as the negative derivative of the filter's phase response, $\\phi(\\omega)$, with respect to the angular frequency $\\omega$. A constant group delay is essential for preserving the shape of complex signals.\n\nDetermine the positive angular frequency, $\\omega_0$, at which the group delay of this all-pass filter is exactly half of its value at DC ($\\omega=0$). Express your answer for $\\omega_0$ in terms of the parameter $a$.", "solution": "For the first-order all-pass filter with transfer function $H(s) = \\frac{a - s}{s + a}$ and $a>0$, evaluate the frequency response by substituting $s = j\\omega$ to obtain $H(j\\omega) = \\frac{a - j\\omega}{a + j\\omega}$. The phase response is the difference of the arguments of numerator and denominator:\n$$\n\\phi(\\omega) = \\arg(a - j\\omega) - \\arg(a + j\\omega) = -\\arctan\\!\\left(\\frac{\\omega}{a}\\right) - \\arctan\\!\\left(\\frac{\\omega}{a}\\right) = -2\\,\\arctan\\!\\left(\\frac{\\omega}{a}\\right).\n$$\nThe group delay is defined as $\\tau_{g}(\\omega) = -\\frac{d\\phi(\\omega)}{d\\omega}$. Differentiating using $\\frac{d}{d\\omega}\\arctan(u) = \\frac{1}{1+u^{2}}\\frac{du}{d\\omega}$ with $u = \\frac{\\omega}{a}$ and $\\frac{du}{d\\omega} = \\frac{1}{a}$ gives\n$$\n\\frac{d\\phi}{d\\omega} = -2 \\cdot \\frac{1}{1+(\\omega/a)^{2}} \\cdot \\frac{1}{a} = -\\frac{2a}{a^{2}+\\omega^{2}},\n$$\nhence\n$$\n\\tau_{g}(\\omega) = -\\frac{d\\phi}{d\\omega} = \\frac{2a}{a^{2}+\\omega^{2}}.\n$$\nAt DC, $\\tau_{g}(0) = \\frac{2a}{a^{2}} = \\frac{2}{a}$. We seek $\\omega_{0} > 0$ such that $\\tau_{g}(\\omega_{0}) = \\frac{1}{2}\\tau_{g}(0) = \\frac{1}{a}$. Set and solve:\n$$\n\\frac{2a}{a^{2}+\\omega_{0}^{2}} = \\frac{1}{a}\n\\;\\;\\Longrightarrow\\;\\;\n2a^{2} = a^{2} + \\omega_{0}^{2}\n\\;\\;\\Longrightarrow\\;\\;\n\\omega_{0}^{2} = a^{2}\n\\;\\;\\Longrightarrow\\;\\;\n\\omega_{0} = a,\n$$\nwhere the positive root is taken.", "answer": "$$\\boxed{a}$$", "id": "1723771"}, {"introduction": "While analytical derivations are crucial for understanding, modern signal processing relies heavily on computational methods to analyze systems from sampled data. This advanced practice [@problem_id:2875342] moves from pen-and-paper analysis to implementation, tasking you with writing a program to compute group and phase delay numerically. You will tackle practical challenges like phase unwrapping and finite-difference approximations, skills that are essential for analyzing real-world filters and communication systems.", "problem": "You are given the task of designing and implementing a program that computes two delay measures associated with the discrete-time frequency response of a linear time-invariant system: the phase delay and the group delay. Your program must operate on sampled values of the complex frequency response over a prescribed angular frequency grid, by extracting an unwrapped phase and numerically differentiating it with respect to angular frequency. The angular frequency unit must be radians per sample. No user input is allowed; all parameters must be defined within the program and the output must be printed in the required format.\n\nStarting point and constraints. Use only fundamental definitions from discrete-time linear time-invariant systems and the Discrete-Time Fourier Transform (DTFT). The frequency response is the DTFT of the systemâ€™s impulse response and is a complex function of angular frequency. The phase is defined as the argument of this complex function. A literal time shift in the impulse response induces a frequency-dependent complex exponential factor. Build all reasoning from these bases and avoid any shortcut formulas presented as final goals. From these bases, derive the computational procedure to obtain two delay measures from the unwrapped phase, and implement it robustly on a uniform grid of angular frequencies, taking care with the sign conventions implied by the time-shift property. Do not assume any special analytic form for the target quantities; instead, extract them from the sampled data by phase unwrapping and numerical differentiation. Ensure the numerical differentiation is consistent with angular frequency in radians per sample and is implemented with a finite-difference method that handles boundaries. Handle the special case at zero angular frequency in a mathematically consistent manner.\n\nFrequency grid. Use an evenly spaced grid of $N_\\omega = 4097$ angular frequencies $\\{\\omega_k\\}_{k=0}^{N_\\omega-1}$ over the closed interval $[0,\\pi]$ in radians per sample. That is, $\\omega_0 = 0$ and $\\omega_{N_\\omega-1} = \\pi$.\n\nProcedure to implement in code.\n- Given sampled $H(e^{j\\omega_k})$ for all $\\omega_k$, compute the principal-value phase $\\phi_{\\mathrm{pv}}(\\omega_k)$ as the argument of $H(e^{j\\omega_k})$ for each $k$, in radians.\n- Unwrap the phase to obtain a continuous $\\phi(\\omega_k)$ that removes $2\\pi$ discontinuities across $k$.\n- Numerically differentiate the unwrapped phase with respect to $\\omega$ using a centered finite difference in the interior and appropriate one-sided differences at the boundaries, to obtain a numerical derivative at all $\\omega_k$.\n- Use the standard sign convention consistent with the time-shift property of the DTFT for linear time-invariant systems to convert the phase slope to one of the delay measures.\n- Define a second delay measure directly from the unwrapped phase and the angular frequency wherever this definition is meaningful; at $\\omega_0 = 0$, use the limiting value computed from the slope-based delay to avoid division by zero.\n\nTest suite. Implement three test systems by constructing $H(e^{j\\omega})$ analytically at the sample points. For each system, compute both delay measures over the prescribed grid and then compute a single scalar diagnostic quantity to be returned in the aggregated output.\n\n- Test A (pure integer sample delay). Let $n_0 = 7$. Define $H_A(e^{j\\omega}) = e^{-j\\omega n_0}$. After computing the slope-based delay over the grid, compute the maximum absolute deviation from $n_0$ over the indices $k \\in \\{5,6,\\dots,N_\\omega-6\\}$ to avoid boundary artifacts. Report this maximum deviation as a floating-point number in samples.\n\n- Test B (first-order low-pass, stable pole strictly inside the unit circle). Let $\\alpha = 0.9$. Define $H_B(e^{j\\omega}) = \\dfrac{1-\\alpha}{1 - \\alpha e^{-j\\omega}}$. Compute both delay measures. At the smallest positive angular frequency $\\omega_1$ (that is, at index $k=1$), compute the absolute difference between the two delay measures. Report this absolute difference as a floating-point number in samples.\n\n- Test C (first-order stable all-pass). Let $a = 0.6$. Define $H_C(e^{j\\omega}) = \\dfrac{a - e^{-j\\omega}}{1 - a e^{-j\\omega}}$. Compute the slope-based delay over the entire grid and then compute its arithmetic mean over all $k$. Report the absolute difference between this mean and $1$ as a floating-point number in samples.\n\nAngle and units. All angles are in radians, all angular frequencies are in radians per sample, and the delay measures are in samples.\n\nFinal output format. Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, in the order $[\\text{Test A result}, \\text{Test B result}, \\text{Test C result}]$. For example, the output must look like $[x_A,x_B,x_C]$ with three floating-point numbers and no other text.\n\nYour solution must be implemented as a complete, runnable program adhering to the specified execution environment.", "solution": "The problem statement has been subjected to rigorous validation and is deemed to be valid. It is scientifically grounded in the principles of discrete-time signal processing, is well-posed with all necessary information provided, and is objectively formulated. We shall therefore proceed to construct the solution.\n\nThe core of the problem is the computation of two delay metrics, group delay and phase delay, for a discrete-time linear time-invariant (LTI) system. These metrics are derived from the system's frequency response, which is the Discrete-Time Fourier Transform (DTFT) of its impulse response $h(n)$.\n\nLet the frequency response be denoted by $H(e^{j\\omega})$, where $\\omega$ is the angular frequency in radians per sample. $H(e^{j\\omega})$ is a complex function which can be expressed in polar form:\n$$ H(e^{j\\omega}) = |H(e^{j\\omega})| e^{j\\phi(\\omega)} $$\nwhere $|H(e^{j\\omega})|$ is the magnitude response and $\\phi(\\omega)$ is the phase response.\n\nThe definitions of group delay and phase delay are motivated by the time-shift property of the DTFT. Consider an impulse response $h(n)$ and its delayed version $h_d(n) = h(n-n_0)$, where $n_0$ is a constant integer delay in samples. The DTFT of $h_d(n)$ is:\n$$ H_d(e^{j\\omega}) = \\sum_{n=-\\infty}^{\\infty} h(n-n_0) e^{-j\\omega n} $$\nBy a change of variable $m = n-n_0$, we obtain:\n$$ H_d(e^{j\\omega}) = \\sum_{m=-\\infty}^{\\infty} h(m) e^{-j\\omega (m+n_0)} = e^{-j\\omega n_0} \\sum_{m=-\\infty}^{\\infty} h(m) e^{-j\\omega m} = H(e^{j\\omega}) e^{-j\\omega n_0} $$\nThe phase of the delayed system is $\\phi_d(\\omega) = \\phi(\\omega) - \\omega n_0$. A constant time delay $n_0$ introduces a linear phase component with a slope of $-n_0$. This relationship establishes the sign convention for the delay definitions.\n\nThe **group delay**, $\\tau_g(\\omega)$, quantifies the delay of the envelope of a signal passing through the system and is defined as the negative rate of change of the phase with respect to frequency:\n$$ \\tau_g(\\omega) = -\\frac{d\\phi(\\omega)}{d\\omega} $$\nFor the pure delay system where $\\phi(\\omega) = - \\omega n_0$ (assuming the original system had zero phase), the group delay is $\\tau_g(\\omega) = -(-n_0) = n_0$, which correctly recovers the constant time shift.\n\nThe **phase delay**, $\\tau_p(\\omega)$, quantifies the delay of the carrier frequency of a sinusoidal signal and is defined as:\n$$ \\tau_p(\\omega) = -\\frac{\\phi(\\omega)}{\\omega} $$\nFor the pure delay system, $\\tau_p(\\omega) = -(-\\omega n_0 / \\omega) = n_0$. For a non-dispersive system like a pure delay, group delay and phase delay are identical.\n\nAt $\\omega=0$, the phase delay definition results in the indeterminate form $0/0$ since $\\phi(0)=0$ for any real-valued impulse response. The value at this point is determined by the limit, which can be evaluated using L'Hopital's rule:\n$$ \\lim_{\\omega \\to 0} \\tau_p(\\omega) = \\lim_{\\omega \\to 0} \\left( -\\frac{\\phi(\\omega)}{\\omega} \\right) = -\\left. \\frac{d\\phi(\\omega)}{d\\omega} \\right|_{\\omega=0} = \\tau_g(0) $$\nThis confirms the procedure specified in the problem for handling the $\\omega=0$ case.\n\nThe computational procedure is executed on a discrete grid of $N_\\omega = 4097$ frequencies, $\\{\\omega_k\\}_{k=0}^{N_\\omega-1}$, uniformly spaced over $[0, \\pi]$. The frequency step is $\\Delta\\omega = \\pi / (N_\\omega - 1)$.\n\n1.  **Phase Extraction**: For a given complex frequency response $H(e^{j\\omega_k})$, the principal-value phase $\\phi_{\\mathrm{pv}}(\\omega_k)$ is computed using the `atan2` function, which maps the phase to the interval $(-\\pi, \\pi]$.\n2.  **Phase Unwrapping**: The principal-value phase may contain artificial jumps of $\\pm 2\\pi$. The continuous phase function $\\phi(\\omega_k)$ is recovered by `unwrapping`, which consists of adding or subtracting integer multiples of $2\\pi$ to successive elements to remove jumps greater than a threshold (typically $\\pi$).\n3.  **Numerical Differentiation for Group Delay**: The derivative $d\\phi/d\\omega$ is approximated using finite differences.\n    - For interior points ($k=1, \\dots, N_\\omega - 2$): a second-order accurate centered difference is used:\n      $$ \\left.\\frac{d\\phi}{d\\omega}\\right|_{\\omega_k} \\approx \\frac{\\phi(\\omega_{k+1}) - \\phi(\\omega_{k-1})}{2 \\Delta\\omega} $$\n    - For boundary points ($k=0$ and $k=N_\\omega-1$): a first-order accurate one-sided difference is used:\n      $$ \\left.\\frac{d\\phi}{d\\omega}\\right|_{\\omega_0} \\approx \\frac{\\phi(\\omega_1) - \\phi(\\omega_0)}{\\Delta\\omega}, \\quad \\left.\\frac{d\\phi}{d\\omega}\\right|_{\\omega_{N_\\omega-1}} \\approx \\frac{\\phi(\\omega_{N_\\omega-1}) - \\phi(\\omega_{N_\\omega-2})}{\\Delta\\omega} $$\n    The group delay is then $\\tau_g(\\omega_k) = - (d\\phi/d\\omega)|_{\\omega_k}$.\n4.  **Phase Delay Calculation**: The phase delay is computed directly as $\\tau_p(\\omega_k) = -\\phi(\\omega_k)/\\omega_k$ for $k > 0$. At $k=0$, we set $\\tau_p(\\omega_0) = \\tau_g(\\omega_0)$.\n\nThe three test cases are analyzed as follows:\n- **Test A: Pure Integer Delay**. The system is $H_A(e^{j\\omega}) = e^{-j\\omega n_0}$ with $n_0=7$. The analytical phase is $\\phi(\\omega) = -7\\omega$, and the analytical group delay is $\\tau_g(\\omega) = 7$ for all $\\omega$. The specified diagnostic measures the maximum error of the numerical group delay calculation in the interior of the frequency range, avoiding the less accurate boundary approximations.\n- **Test B: First-Order Low-Pass Filter**. The system is $H_B(e^{j\\omega}) = \\frac{1-\\alpha}{1 - \\alpha e^{-j\\omega}}$ with $\\alpha=0.9$. This is a dispersive system, meaning its phase response is not linear with frequency. Consequently, $\\tau_g(\\omega) \\neq \\tau_p(\\omega)$ for $\\omega > 0$. The diagnostic measures the difference between these two delays at the first non-zero frequency point, $\\omega_1$, providing a quantitative measure of the system's dispersion at low frequencies.\n- **Test C: First-Order All-Pass Filter**. The system is $H_C(e^{j\\omega}) = \\frac{a - e^{-j\\omega}}{1 - a e^{-j\\omega}}$ with $a=0.6$. The magnitude response is $|H_C(e^{j\\omega})|=1$ for all $\\omega$. The group delay is not constant; its analytical form is $\\tau_g(\\omega) = \\frac{1-a^2}{1+a^2-2a\\cos\\omega}$. A key property of this system is that its average group delay over the interval $[0, \\pi]$ is exactly $1$:\n  $$ \\bar{\\tau_g} = \\frac{1}{\\pi} \\int_0^\\pi \\tau_g(\\omega) \\, d\\omega = \\frac{1-a^2}{\\pi} \\int_0^\\pi \\frac{d\\omega}{1+a^2-2a\\cos\\omega} = \\frac{1-a^2}{\\pi} \\left[ \\frac{\\pi}{1-a^2} \\right] = 1 $$\n  The diagnostic computes the arithmetic mean of the numerically calculated group delay values $\\{\\tau_g(\\omega_k)\\}$ over the grid, which is a discrete approximation of this integral. The absolute difference between this numerical mean and the theoretical value of $1$ tests the overall accuracy of the group delay computation across the entire frequency range.\n\nThe implementation will now proceed based on these principles.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes phase and group delays for three test systems and reports diagnostic quantities.\n    \"\"\"\n    N_omega = 4097\n    omega = np.linspace(0, np.pi, N_omega)\n    delta_omega = np.pi / (N_omega - 1)\n\n    def compute_delays(H, omega_grid, delta_omega_val):\n        \"\"\"\n        Computes group and phase delay from a complex frequency response.\n\n        Args:\n            H (np.ndarray): Complex frequency response samples.\n            omega_grid (np.ndarray): The angular frequency grid.\n            delta_omega_val (float): The spacing of the frequency grid.\n\n        Returns:\n            tuple[np.ndarray, np.ndarray]: A tuple containing the group delay and phase delay.\n        \"\"\"\n        # Step 1: Compute principal-value phase\n        phi_pv = np.angle(H)\n\n        # Step 2: Unwrap the phase\n        phi_uw = np.unwrap(phi_pv)\n\n        # Step 3: Numerically differentiate for group delay\n        # np.gradient uses centered differences for interior and one-sided for boundaries.\n        # This matches the problem specification.\n        # tau_g = -d(phi)/d(omega)\n        dphi_domega = np.gradient(phi_uw, delta_omega_val)\n        tau_g = -dphi_domega\n\n        # Step 4: Compute phase delay\n        # tau_p = -phi/omega\n        # To avoid division by zero at omega=0, we suppress the warning and handle it separately.\n        with np.errstate(divide='ignore', invalid='ignore'):\n            tau_p = -phi_uw / omega_grid\n        \n        # Handle the special case at omega = 0 using the limiting value, tau_g(0).\n        if omega_grid[0] == 0:\n            tau_p[0] = tau_g[0]\n\n        return tau_g, tau_p\n\n    # --- Test Cases ---\n    results = []\n\n    # Test A: Pure integer sample delay\n    n0 = 7.0\n    H_A = np.exp(-1j * omega * n0)\n    tau_g_A, _ = compute_delays(H_A, omega, delta_omega)\n    # Diagnostic: max absolute deviation from n0, avoiding boundary artifacts.\n    # The spec is k in {5, ..., N_omega-6}. In Python slicing this is [5:N_omega-5]\n    deviation_A = np.max(np.abs(tau_g_A[5:N_omega-5] - n0))\n    results.append(deviation_A)\n\n    # Test B: First-order low-pass filter\n    alpha = 0.9\n    H_B = (1 - alpha) / (1 - alpha * np.exp(-1j * omega))\n    tau_g_B, tau_p_B = compute_delays(H_B, omega, delta_omega)\n    # Diagnostic: absolute difference between the two delays at the smallest positive frequency (k=1)\n    diff_B = np.abs(tau_g_B[1] - tau_p_B[1])\n    results.append(diff_B)\n\n    # Test C: First-order stable all-pass\n    a = 0.6\n    # Note: A small epsilon is added to the denominator to prevent potential floating point issues\n    # if the denominator becomes exactly zero, although it is not expected for this H(w).\n    denominator_C = 1 - a * np.exp(-1j * omega)\n    H_C = (a - np.exp(-1j * omega)) / denominator_C\n    tau_g_C, _ = compute_delays(H_C, omega, delta_omega)\n    # Diagnostic: absolute difference between the arithmetic mean of tau_g and 1.\n    mean_tau_g_C = np.mean(tau_g_C)\n    diff_C = np.abs(mean_tau_g_C - 1.0)\n    results.append(diff_C)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2875342"}]}