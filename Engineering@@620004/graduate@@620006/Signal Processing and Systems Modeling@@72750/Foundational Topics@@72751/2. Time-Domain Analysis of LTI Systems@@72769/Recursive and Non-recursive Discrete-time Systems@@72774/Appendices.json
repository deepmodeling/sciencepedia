{"hands_on_practices": [{"introduction": "A core task in digital signal processing is translating a system's description from the frequency domain, as a transfer function $H(z)$, into a time-domain implementation. This practice will guide you through using partial fraction expansion not merely as a mathematical tool, but as a systematic method for decomposing a complex system into simpler, parallel first-order components. This exercise [@problem_id:2899361] builds a crucial bridge between abstract transfer functions and concrete, computable state-space models, which are fundamental to simulating and implementing recursive filters.", "problem": "An engineer is analyzing a causal, linear time-invariant discrete-time system with rational transfer function, known to be stable. The system is modeled in the complex $z$-domain by the ratio of the one-sided $z$-transforms of its output and input, denoted $H(z) = Y(z)/X(z)$. The one-sided $z$-transform is defined by $Z\\{x[n]\\} = \\sum_{n=0}^{\\infty} x[n] z^{-n}$ for sequences that are zero for $n  0$, and the region of convergence contains the unit circle for stable systems. The LTI (linear time-invariant) system is driven from rest, meaning all past states and outputs are zero for $n  0$.\n\nYou are given the specific transfer function\n$$\nH(z) \\;=\\; \\frac{1 + 0.5\\,z^{-1}}{1 - 1.2\\,z^{-1} + 0.32\\,z^{-2}} \\,.\n$$\n\nTasks:\n\n1) Starting from the definitions of the one-sided $z$-transform and the input-output relationship for a causal LTI system, and without assuming any pre-memorized realization formula, carry out a partial-fraction expansion in the variable $z^{-1}$ of $H(z)$ by first factorizing the denominator polynomial into first-order terms in $z^{-1}$. Use that expansion to derive a causal linear constant-coefficient difference equation relating $y[n]$ to $y[n-1]$, $y[n-2]$, $x[n]$, and $x[n-1]$.\n\n2) Using the partial-fraction expansion structure, construct a minimal-order state recursion by defining state variables as the outputs of first-order subsystems driven directly by the input. Derive explicitly the state update equation $\\mathbf{s}[n] = \\mathbf{A}\\,\\mathbf{s}[n-1] + \\mathbf{B}\\,x[n]$ and the output equation $y[n] = \\mathbf{C}\\,\\mathbf{s}[n] + D\\,x[n]$, identifying the matrices $\\mathbf{A}$, $\\mathbf{B}$, $\\mathbf{C}$, and the scalar $D$. Your derivation should be self-contained and logically follow from the expansion in $z^{-1}$.\n\n3) Now consider the specific input $x[n] = u[n]$, the unit step sequence, and initial rest. Using your derived recursion, compute the output sample $y[4]$.\n\nRound your final numerical answer to four significant figures. Report only the real number requested in part 3 as your final answer, without units.", "solution": "The problem statement has been evaluated and is deemed valid. It is scientifically grounded in the principles of linear time-invariant systems theory, well-posed, and objective. All necessary information is provided, and the tasks are standard exercises in discrete-time signal processing. We will now proceed with the solution.\n\nThe analysis begins with the given transfer function for a causal, stable LTI system:\n$$\nH(z) = \\frac{Y(z)}{X(z)} = \\frac{1 + 0.5z^{-1}}{1 - 1.2z^{-1} + 0.32z^{-2}}\n$$\n\n**1) Derivation of the Difference Equation**\n\nThe first task is to derive the linear constant-coefficient difference equation. As instructed, we will use a partial-fraction expansion (PFE) in the variable $z^{-1}$. First, the denominator polynomial, $D(z^{-1}) = 1 - 1.2z^{-1} + 0.32z^{-2}$, must be factorized. The roots of the corresponding polynomial in $z$, $P(z) = z^2 - 1.2z + 0.32$, determine the poles of the system. Using the quadratic formula:\n$$\nz = \\frac{-(-1.2) \\pm \\sqrt{(-1.2)^2 - 4(1)(0.32)}}{2(1)} = \\frac{1.2 \\pm \\sqrt{1.44 - 1.28}}{2} = \\frac{1.2 \\pm \\sqrt{0.16}}{2} = \\frac{1.2 \\pm 0.4}{2}\n$$\nThe poles are $p_1 = 0.8$ and $p_2 = 0.4$. Both poles are inside the unit circle ($|p_1|  1$, $|p_2|  1$), which is consistent with the stated stability of the causal system. The denominator can now be factored in terms of $z^{-1}$:\n$$\n1 - 1.2z^{-1} + 0.32z^{-2} = (1 - 0.8z^{-1})(1 - 0.4z^{-1})\n$$\nWe now perform a PFE of $H(z)$ with respect to the variable $z^{-1}$:\n$$\nH(z) = \\frac{1 + 0.5z^{-1}}{(1 - 0.8z^{-1})(1 - 0.4z^{-1})} = \\frac{A}{1 - 0.8z^{-1}} + \\frac{B}{1 - 0.4z^{-1}}\n$$\nThe coefficients $A$ and $B$ are found using the Heaviside cover-up method:\n$$\nA = \\left. \\frac{1 + 0.5z^{-1}}{1 - 0.4z^{-1}} \\right|_{z^{-1}=1/0.8} = \\frac{1 + 0.5(1.25)}{1 - 0.4(1.25)} = \\frac{1 + 0.625}{1 - 0.5} = \\frac{1.625}{0.5} = 3.25\n$$\n$$\nB = \\left. \\frac{1 + 0.5z^{-1}}{1 - 0.8z^{-1}} \\right|_{z^{-1}=1/0.4} = \\frac{1 + 0.5(2.5)}{1 - 0.8(2.5)} = \\frac{1 + 1.25}{1 - 2.0} = \\frac{2.25}{-1} = -2.25\n$$\nThe PFE is thus:\n$$\nH(z) = \\frac{3.25}{1 - 0.8z^{-1}} - \\frac{2.25}{1 - 0.4z^{-1}}\n$$\nTo derive the required difference equation, we use this expansion by recombining the terms, which demonstrates the validity of the factorization and coefficients:\n$$\nH(z) = \\frac{3.25(1 - 0.4z^{-1}) - 2.25(1 - 0.8z^{-1})}{(1 - 0.8z^{-1})(1 - 0.4z^{-1})} = \\frac{(3.25 - 2.25) + (-3.25 \\times 0.4 + 2.25 \\times 0.8)z^{-1}}{1 - 1.2z^{-1} + 0.32z^{-2}} = \\frac{1 + (-1.3 + 1.8)z^{-1}}{1 - 1.2z^{-1} + 0.32z^{-2}}\n$$\nThis correctly reproduces the original transfer function $H(z) = \\frac{1 + 0.5z^{-1}}{1 - 1.2z^{-1} + 0.32z^{-2}}$.\nFrom the definition $Y(z) = H(z)X(z)$, we have:\n$$\nY(z) (1 - 1.2z^{-1} + 0.32z^{-2}) = X(z) (1 + 0.5z^{-1})\n$$\nExpanding this gives:\n$$\nY(z) - 1.2z^{-1}Y(z) + 0.32z^{-2}Y(z) = X(z) + 0.5z^{-1}X(z)\n$$\nApplying the inverse one-sided $z$-transform and using the time-shifting property $Z^{-1}\\{z^{-k}W(z)\\} = w[n-k]$, we obtain the difference equation for the causal system at rest:\n$$\ny[n] - 1.2y[n-1] + 0.32y[n-2] = x[n] + 0.5x[n-1]\n$$\nRearranging for $y[n]$:\n$$\ny[n] = 1.2y[n-1] - 0.32y[n-2] + x[n] + 0.5x[n-1]\n$$\n\n**2) State-Space Representation**\n\nWe will construct a minimal-order state-space realization in parallel form, as suggested by the prompt to use the PFE structure. The transfer function is a sum of two first-order terms:\n$$\nY(z) = H(z)X(z) = \\left( \\frac{3.25}{1 - 0.8z^{-1}} - \\frac{2.25}{1 - 0.4z^{-1}} \\right) X(z)\n$$\nWe define state variables $s_1[n]$ and $s_2[n]$ as the outputs of first-order subsystems driven by the input $x[n]$. Let their $z$-transforms be $S_1(z)$ and $S_2(z)$:\n$$\nS_1(z) = \\frac{X(z)}{1 - 0.8z^{-1}} \\quad \\implies \\quad S_1(z)(1 - 0.8z^{-1}) = X(z)\n$$\n$$\nS_2(z) = \\frac{X(z)}{1 - 0.4z^{-1}} \\quad \\implies \\quad S_2(z)(1 - 0.4z^{-1}) = X(z)\n$$\nIn the time domain, these correspond to the state update equations:\n$$\ns_1[n] - 0.8s_1[n-1] = x[n] \\quad \\implies \\quad s_1[n] = 0.8s_1[n-1] + x[n]\n$$\n$$\ns_2[n] - 0.4s_2[n-1] = x[n] \\quad \\implies \\quad s_2[n] = 0.4s_2[n-1] + x[n]\n$$\nWith the state vector $\\mathbf{s}[n] = \\begin{pmatrix} s_1[n] \\\\ s_2[n] \\end{pmatrix}$, the state update equation $\\mathbf{s}[n] = \\mathbf{A}\\,\\mathbf{s}[n-1] + \\mathbf{B}\\,x[n]$ is:\n$$\n\\begin{pmatrix} s_1[n] \\\\ s_2[n] \\end{pmatrix} = \\begin{pmatrix} 0.8  0 \\\\ 0  0.4 \\end{pmatrix} \\begin{pmatrix} s_1[n-1] \\\\ s_2[n-1] \\end{pmatrix} + \\begin{pmatrix} 1 \\\\ 1 \\end{pmatrix} x[n]\n$$\nThe output $Y(z)$ is a linear combination of the intermediate subsystem outputs:\n$$\nY(z) = 3.25 S_1(z) - 2.25 S_2(z)\n$$\nIn the time domain, the output equation is:\n$$\ny[n] = 3.25s_1[n] - 2.25s_2[n]\n$$\nThis matches the required form $y[n] = \\mathbf{C}\\,\\mathbf{s}[n] + D\\,x[n]$. The matrices are therefore:\n$$\n\\mathbf{A} = \\begin{pmatrix} 0.8  0 \\\\ 0  0.4 \\end{pmatrix}, \\quad \\mathbf{B} = \\begin{pmatrix} 1 \\\\ 1 \\end{pmatrix}, \\quad \\mathbf{C} = \\begin{pmatrix} 3.25  -2.25 \\end{pmatrix}, \\quad D = 0\n$$\n\n**3) Computation of the Output Sample $y[4]$**\n\nWe compute $y[4]$ for the input $x[n] = u[n]$ (the unit step sequence, where $x[n]=1$ for $n \\ge 0$ and $x[n]=0$ for $n0$) with the system starting from rest ($\\mathbf{s}[-1] = \\mathbf{0}$). We will iterate the state and output equations.\n\nFor $n=0$:\n$s_1[0] = 0.8s_1[-1] + x[0] = 0.8(0) + 1 = 1$\n$s_2[0] = 0.4s_2[-1] + x[0] = 0.4(0) + 1 = 1$\n$y[0] = 3.25s_1[0] - 2.25s_2[0] = 3.25(1) - 2.25(1) = 1$\n\nFor $n=1$:\n$s_1[1] = 0.8s_1[0] + x[1] = 0.8(1) + 1 = 1.8$\n$s_2[1] = 0.4s_2[0] + x[1] = 0.4(1) + 1 = 1.4$\n$y[1] = 3.25s_1[1] - 2.25s_2[1] = 3.25(1.8) - 2.25(1.4) = 5.85 - 3.15 = 2.7$\n\nFor $n=2$:\n$s_1[2] = 0.8s_1[1] + x[2] = 0.8(1.8) + 1 = 1.44 + 1 = 2.44$\n$s_2[2] = 0.4s_2[1] + x[2] = 0.4(1.4) + 1 = 0.56 + 1 = 1.56$\n$y[2] = 3.25s_1[2] - 2.25s_2[2] = 3.25(2.44) - 2.25(1.56) = 7.93 - 3.51 = 4.42$\n\nFor $n=3$:\n$s_1[3] = 0.8s_1[2] + x[3] = 0.8(2.44) + 1 = 1.952 + 1 = 2.952$\n$s_2[3] = 0.4s_2[2] + x[3] = 0.4(1.56) + 1 = 0.624 + 1 = 1.624$\n$y[3] = 3.25s_1[3] - 2.25s_2[3] = 3.25(2.952) - 2.25(1.624) = 9.594 - 3.654 = 5.94$\n\nFor $n=4$:\n$s_1[4] = 0.8s_1[3] + x[4] = 0.8(2.952) + 1 = 2.3616 + 1 = 3.3616$\n$s_2[4] = 0.4s_2[3] + x[4] = 0.4(1.624) + 1 = 0.6496 + 1 = 1.6496$\n$y[4] = 3.25s_1[4] - 2.25s_2[4] = 3.25(3.3616) - 2.25(1.6496) = 10.9252 - 3.7116 = 7.2136$\n\nThe problem requires the answer to be rounded to four significant figures.\n$y[4] = 7.2136 \\approx 7.214$.", "answer": "$$\n\\boxed{7.214}\n$$", "id": "2899361"}, {"introduction": "What truly defines a \"recursive\" system, and what makes it computable in real time? This thought experiment [@problem_id:2899391] probes the subtle but critical difference between a mathematical equation and a physically realizable system. By contrasting a system with an instantaneous algebraic loop against one with a proper unit delay, we will clarify why the delay operator, corresponding to multiplication by $z^{-1}$ in the Z-domain, is essential for ensuring a well-posed, step-by-step causal update.", "problem": "In discrete-time signal processing, a system is a map from an input sequence $\\{x[n]\\}_{n\\in\\mathbb{Z}}$ to an output sequence $\\{y[n]\\}_{n\\in\\mathbb{Z}}$. A causal update law is said to be recursive if $y[n]$ depends on past outputs through at least one unit delay, that is, through terms of the form $y[n-k]$ with $k\\geq 1$. A system is well-posed if, for every admissible input and specified initial condition, the output at each time index is uniquely determined by a finite sequence of algebraic operations that do not require solving an instantaneous algebraic loop in $y[n]$. The unit delay operator is the time-shift that maps $y[n]$ to $y[n-1]$ and, in the $Z$-transform domain, corresponds to multiplication by $z^{-1}$, where the (bilateral) $Z$-transform of a sequence $\\{y[n]\\}$ is $Y(z)=\\sum_{n=-\\infty}^{\\infty} y[n] z^{-n}$.\n\nConsider the following family of single-input single-output linear time-invariant (LTI) systems parameterized by a scalar $a\\in\\mathbb{R}$:\n- System $\\mathcal{S}_0$: $y[n]=a\\,y[n]+x[n]$.\n- System $\\mathcal{S}_1$: $y[n]=a\\,y[n-1]+x[n]$.\n\nYou are asked to construct a minimal counterexample that falsifies the claim, sometimes informally stated, that “if $|a|1$ then a feedback equation with $y[n]$ on both sides is a well-posed recursive system,” and to explain the role of the unit delay operator in making feedback interconnections well-posed and implementable in time.\n\nWhich of the following statements are correct? Select all that apply.\n\nA. For $\\mathcal{S}_0$ with $a=\\tfrac{1}{2}$, the inequality $|a|1$ guarantees that the feedback is a contraction, hence $\\mathcal{S}_0$ is a well-posed recursive and causal system that can be computed online without solving any algebraic equation at each $n$.\n\nB. For $\\mathcal{S}_0$ with $a=\\tfrac{1}{2}$, the defining equation reduces to $y[n]=2\\,x[n]$, which is a memoryless, non-recursive mapping; viewing it as feedback without a unit delay reveals an instantaneous algebraic loop. This serves as a minimal counterexample: the mere fact that $|a|1$ does not make a “recursive” law with $y[n]$ on both sides well-posed as a recursive update.\n\nC. Any discrete-time system whose defining equation contains $y[n]$ on both sides is ill-posed for all inputs, regardless of coefficients or delays.\n\nD. Introducing a single unit delay in the feedback path, as in $\\mathcal{S}_1$, breaks the algebraic loop and yields a causal, truly recursive update law. Under zero initial conditions, its impulse response is $h[n]=a^{n}u[n]$, where $u[n]$ is the unit step sequence, and the impulse response is absolutely summable if and only if $|a|1$.\n\nE. Under zero initial conditions, the transfer function of $\\mathcal{S}_0$ is $H(z)=\\frac{1}{1-a z^{-1}}$, which demonstrates that feedback without an explicit unit delay still produces a recursive pole at $z=a$ and hence a truly recursive system in the time domain.", "solution": "The problem statement has been validated and found to be self-contained, scientifically grounded in the principles of discrete-time systems theory, and well-posed. The definitions provided for recursivity and well-posedness are standard, albeit the latter is a strict, computational definition. We may proceed with the solution.\n\nThe problem asks to evaluate several statements concerning two systems, $\\mathcal{S}_0$ and $\\mathcal{S}_1$, and their relation to an informal claim about feedback equations. The core of the problem lies in understanding the distinction between an instantaneous algebraic loop and a true time-domain recursion, and the role of the unit delay operator in implementable systems.\n\nFirst, we analyze the two systems.\n\n**System $\\mathcal{S}_0$: $y[n]=a\\,y[n]+x[n]$**\nThis equation establishes a relationship between the output $y[n]$ and the input $x[n]$ at the same time index $n$. To find the value of $y[n]$, one must algebraically solve for it:\n$$y[n] - a\\,y[n] = x[n]$$\n$$(1-a)y[n] = x[n]$$\nIf $a \\neq 1$, the output is uniquely determined by the input at the same instant:\n$$y[n] = \\frac{1}{1-a}x[n]$$\nThis is the equation of a memoryless, non-recursive system. The output $y[n]$ depends only on $x[n]$, not on any past outputs $y[n-k]$ for $k \\ge 1$. Therefore, according to the problem's definition, this system is **not recursive**.\n\nFurthermore, the problem defines a system as well-posed if its output can be determined \"without solving an instantaneous algebraic loop in $y[n]$\". The initial equation $y[n]=a\\,y[n]+x[n]$ is precisely such a loop. The fact that we must perform algebraic manipulation to isolate $y[n]$ means that the system, as described by this equation, is **not well-posed** under the problem's strict computational definition.\n\nIf $a=1$, the equation becomes $0 = x[n]$. If $x[n] \\neq 0$, no solution for $y[n]$ exists. If $x[n]=0$, $y[n]$ can be any value. In this case, the system is ill-posed in a more fundamental sense.\n\n**System $\\mathcal{S}_1$: $y[n]=a\\,y[n-1]+x[n]$**\nThis equation expresses the current output $y[n]$ in terms of the current input $x[n]$ and the *past* output $y[n-1]$. At time $n$, the value of $y[n-1]$ is presumed to be known from the previous time step. Thus, $y[n]$ can be computed directly without solving any algebraic equation for $y[n]$ itself. This system is **well-posed** according to the problem's definition.\n\nBecause the output $y[n]$ depends on a past output $y[n-k]$ with $k=1 \\ge 1$, this system is **recursive**. The unit delay, which distinguishes $\\mathcal{S}_1$ from $\\mathcal{S}_0$, is what breaks the instantaneous algebraic loop and makes the system a well-posed recursive update law.\n\nNow we evaluate each statement.\n\n**A. For $\\mathcal{S}_0$ with $a=\\tfrac{1}{2}$, the inequality $|a|1$ guarantees that the feedback is a contraction, hence $\\mathcal{S}_0$ is a well-posed recursive and causal system that can be computed online without solving any algebraic equation at each $n$.**\nThe system is $y[n]=\\tfrac{1}{2}\\,y[n]+x[n]$. This reduces to $y[n]=2\\,x[n]$.\n- The system is **not recursive**, as it is memoryless. The definition of a recursive system requires dependence on past outputs. This claim is false.\n- The system description $y[n]=\\tfrac{1}{2}\\,y[n]+x[n]$ represents an algebraic loop. According to the problem's definition of well-posedness, which prohibits such loops for direct computation, this representation is **not well-posed**. The claim that it can be computed \"without solving any algebraic equation\" is the exact opposite of the truth; one must solve for $y[n]$. This claim is false.\nWhile the condition $|a|  1$ is relevant for the convergence of iterative methods to solve the algebraic equation at each step (Banach fixed-point theorem), it does not change the fundamental nature of the system. The system is not recursive.\n**Verdict: Incorrect.**\n\n**B. For $\\mathcal{S}_0$ with $a=\\tfrac{1}{2}$, the defining equation reduces to $y[n]=2\\,x[n]$, which is a memoryless, non-recursive mapping; viewing it as feedback without a unit delay reveals an instantaneous algebraic loop. This serves as a minimal counterexample: the mere fact that $|a|1$ does not make a “recursive” law with $y[n]$ on both sides well-posed as a recursive update.**\nLet's analyze this statement part by part.\n- With $a=\\tfrac{1}{2}$, $\\mathcal{S}_0$ is $y[n]=\\tfrac{1}{2}\\,y[n]+x[n]$. Solving for $y[n]$ gives $(1-\\tfrac{1}{2})y[n]=x[n]$, which is $\\tfrac{1}{2}y[n]=x[n]$, or $y[n]=2\\,x[n]$. This is correct.\n- This mapping is indeed memoryless and non-recursive. This is correct.\n- The form $y[n]=a\\,y[n]+x[n]$ is an instantaneous algebraic loop created by feedback without a unit delay. This is correct.\n- This system serves as a counterexample to the claim \"if $|a|1$ then a feedback equation with $y[n]$ on both sides is a well-posed recursive system.\" Here, we have $|a|=0.51$ and an equation with $y[n]$ on both sides, but the result is neither recursive nor well-posed in the computational sense defined. The statement is entirely accurate.\n**Verdict: Correct.**\n\n**C. Any discrete-time system whose defining equation contains $y[n]$ on both sides is ill-posed for all inputs, regardless of coefficients or delays.**\nThis statement is too strong and ultimately incorrect because it conflates the properties of a *system* (a mapping) with the properties of its *representation* (an equation).\nConsider the system $\\mathcal{S}_0$ with $a \\neq 1$. Its defining equation is $y[n]=a\\,y[n]+x[n]$. This equation has $y[n]$ on both sides and, as per the problem's definition, is not a well-posed computational form. However, this equation defines the system (the mapping) $y[n] = \\frac{1}{1-a}x[n]$. This mapping is perfectly well-posed in the general mathematical sense: for every input sequence $x[n]$, a unique output sequence $y[n]$ exists and is stable. The statement claims the *system* is ill-posed. This is false. A well-posed system can be described by an equation that is not in a well-posed computational form.\n**Verdict: Incorrect.**\n\n**D. Introducing a single unit delay in the feedback path, as in $\\mathcal{S}_1$, breaks the algebraic loop and yields a causal, truly recursive update law. Under zero initial conditions, its impulse response is $h[n]=a^{n}u[n]$, where $u[n]$ is the unit step sequence, and the impulse response is absolutely summable if and only if $|a|1$.**\nLet's verify each claim for system $\\mathcal{S}_1: y[n]=a\\,y[n-1]+x[n]$.\n- The dependence on the past output $y[n-1]$ instead of the current output $y[n]$ breaks the instantaneous algebraic loop. The equation is an explicit update rule for $y[n]$. This is correct. The system is causal and, by definition, recursive. This is correct.\n- For the impulse response $h[n]$, we set $x[n]=\\delta[n]$ and assume zero initial conditions ($y[n]=0$ for $n0$).\nFor $n=0$: $h[0]=a\\,h[-1]+\\delta[0] = a(0)+1=1=a^0$.\nFor $n=1$: $h[1]=a\\,h[0]+\\delta[1] = a(1)+0=a=a^1$.\nFor $n1$: $h[n]=a\\,h[n-1]$. By induction, $h[n]=a^n$.\nFor $n0$: $h[n]=0$.\nSo, $h[n]=a^n u[n]$. This is correct.\n- The absolute summability of the impulse response is the condition for BIBO stability. We must check $\\sum_{n=-\\infty}^{\\infty} \\lvert h[n] \\rvert  \\infty$.\n$\\sum_{n=-\\infty}^{\\infty} \\lvert a^n u[n] \\rvert = \\sum_{n=0}^{\\infty} \\lvert a^n \\rvert = \\sum_{n=0}^{\\infty} (\\lvert a \\rvert)^n$. This is a geometric series which converges if and only if its ratio $\\lvert a \\rvert$ is less than $1$. This is correct.\nEvery part of the statement is accurate.\n**Verdict: Correct.**\n\n**E. Under zero initial conditions, the transfer function of $\\mathcal{S}_0$ is $H(z)=\\frac{1}{1-a z^{-1}}$, which demonstrates that feedback without an explicit unit delay still produces a recursive pole at $z=a$ and hence a truly recursive system in the time domain.**\nThis statement incorrectly identifies the transfer function of $\\mathcal{S}_0$. We take the Z-transform of the equation for $\\mathcal{S}_0$: $y[n] = a\\,y[n] + x[n]$.\n$$Y(z) = a\\,Y(z) + X(z)$$\n$$Y(z)(1-a) = X(z)$$\n$$H_0(z) = \\frac{Y(z)}{X(z)} = \\frac{1}{1-a}$$\nThis is a constant, assuming $a \\neq 1$. The transfer function $H(z)=\\frac{1}{1-a z^{-1}}$ corresponds to system $\\mathcal{S}_1$, not $\\mathcal{S}_0$. Because the premise is false, the conclusions drawn from it are invalid. System $\\mathcal{S}_0$ is memoryless (non-recursive), and its transfer function has no pole at $z=a$.\n**Verdict: Incorrect.**", "answer": "$$\\boxed{BD}$$", "id": "2899391"}, {"introduction": "In the idealized world of theory, we can perfectly cancel a system's pole with a zero, effectively transforming an Infinite Impulse Response (IIR) filter into a Finite Impulse Response (FIR) one. This exercise [@problem_id:1747721] explores what happens when this ideal design collides with the reality of finite-precision hardware. By analyzing the effects of small coefficient errors, you will quantify how an intended FIR system can retain a residual IIR \"tail\" and gain insight into the practical performance limits of pole-zero cancellation techniques.", "problem": "Consider a discrete-time Linear Time-Invariant (LTI) system designed for pole-zero cancellation. The system is formed by cascading a pre-processing Finite Impulse Response (FIR) filter with a recursive Infinite Impulse Response (IIR) filter.\n\nThe ideal IIR filter has a transfer function $H_{ideal}(z) = \\frac{1}{1-pz^{-1}}$ and the ideal FIR pre-filter has a transfer function $G_{ideal}(z) = 1-pz^{-1}$, where $p$ is a real constant satisfying $0  |p|  1$. In the ideal case, the overall system transfer function is $T_{ideal}(z) = G_{ideal}(z)H_{ideal}(z) = 1$, and its impulse response is the unit impulse $\\delta[n]$.\n\nIn a practical implementation using finite-precision arithmetic, the coefficients are perturbed. The actual IIR filter is realized with transfer function $H_{actual}(z) = \\frac{1}{1-p'z^{-1}}$, where the effective pole location is $p' = p(1+\\epsilon_p)$. The actual FIR pre-filter is realized with transfer function $G_{actual}(z) = 1-p''z^{-1}$, where the effective zero location is $p'' = p(1+\\epsilon_z)$. The quantities $\\epsilon_p$ and $\\epsilon_z$ are small, independent, real-valued relative errors.\n\nThe impulse response of this actual cascaded system, denoted by $y[n]$, will no longer be a perfect unit impulse. Due to the inexact cancellation, it will exhibit an aperiodic \"tail\" for $n > 0$.\n\nAssuming $|\\epsilon_p| \\ll 1$ and $|\\epsilon_z| \\ll 1$, derive an analytical expression for the total energy of this tail, which is defined as $E_{tail} = \\sum_{n=1}^{\\infty} |y[n]|^2$. Your final expression must be an approximation accurate up to the second order in the error terms (i.e., including terms proportional to $\\epsilon_p^2$, $\\epsilon_z^2$, and $\\epsilon_p\\epsilon_z$, while neglecting all terms of higher order).", "solution": "The actual overall transfer function is\n$$\nT_{\\text{actual}}(z)=\\frac{1-p''z^{-1}}{1-p' z^{-1}}=1+\\frac{(p'-p'')z^{-1}}{1-p' z^{-1}}.\n$$\nUsing the inverse $Z$-transform identity $\\mathcal{Z}^{-1}\\{1\\}= \\delta[n]$ and $\\mathcal{Z}^{-1}\\left\\{\\frac{z^{-1}}{1-az^{-1}}\\right\\}=a^{n-1}u[n-1]$, the impulse response is\n$$\ny[n]=\\delta[n]+(p'-p'')p'^{n-1}u[n-1].\n$$\nTherefore, the tail for $n\\geq 1$ is $y[n]=(p'-p'')p'^{n-1}$. Its energy is the geometric series\n$$\nE_{\\text{tail}}=\\sum_{n=1}^{\\infty}|y[n]|^{2}=(p'-p'')^{2}\\sum_{n=1}^{\\infty}((p')^{2})^{n-1}=\\frac{(p'-p'')^{2}}{1-(p')^{2}},\n$$\nwhich converges for $|p'|1$, satisfied here.\n\nSubstitute the perturbed coefficients $p'=p(1+\\epsilon_{p})$ and $p''=p(1+\\epsilon_{z})$:\n$$\np'-p''=p\\bigl(\\epsilon_{p}-\\epsilon_{z}\\bigr),\\qquad (p')^{2}=p^{2}(1+\\epsilon_{p})^{2}=p^{2}\\bigl(1+2\\epsilon_{p}+\\epsilon_{p}^{2}\\bigr).\n$$\nHence,\n$$\nE_{\\text{tail}}=\\frac{p^{2}\\bigl(\\epsilon_{p}-\\epsilon_{z}\\bigr)^{2}}{1-p^{2}\\bigl(1+2\\epsilon_{p}+\\epsilon_{p}^{2}\\bigr)}.\n$$\nTo obtain an expression accurate up to second order in the small errors, note that the numerator is already second order, while the denominator can be expanded about its zeroth-order part $1-p^{2}$. Writing $1-(p')^{2}=(1-p^{2})-\\bigl(2p^{2}\\epsilon_{p}+p^{2}\\epsilon_{p}^{2}\\bigr)$, the reciprocal expansion introduces only third- and higher-order corrections when multiplied by the second-order numerator. Therefore, retaining terms up to second order yields\n$$\nE_{\\text{tail}}=\\frac{p^{2}}{1-p^{2}}\\bigl(\\epsilon_{p}-\\epsilon_{z}\\bigr)^{2}+O\\bigl(\\epsilon^{3}\\bigr),\n$$\ni.e.,\n$$\nE_{\\text{tail}}\\approx \\frac{p^{2}}{1-p^{2}}\\left(\\epsilon_{p}^{2}-2\\epsilon_{p}\\epsilon_{z}+\\epsilon_{z}^{2}\\right),\n$$\nwhich includes all terms proportional to $\\epsilon_{p}^{2}$, $\\epsilon_{p}\\epsilon_{z}$, and $\\epsilon_{z}^{2}$ and neglects higher-order terms.", "answer": "$$\\boxed{\\frac{p^{2}}{1-p^{2}}\\left(\\epsilon_{p}-\\epsilon_{z}\\right)^{2}}$$", "id": "1747721"}]}