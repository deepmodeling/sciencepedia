{"hands_on_practices": [{"introduction": "We begin with a foundational exercise that demonstrates the most direct application of Castigliano's second theorem: calculating a displacement $\\delta$ at the point of an applied load $P$ via the energy derivative $\\delta = \\partial U / \\partial P$. By deriving the well-known formula for the deflection of a cantilever beam from the first principles of its strain energy $U$, this practice solidifies the core computational procedure of the method [@problem_id:2617236]. Mastering this classic problem provides the essential groundwork for tackling more complex structural analyses.", "id": "2617236", "problem": "A straight, prismatic, linearly elastic cantilever beam of length $L$ is built-in at $x=0$ and free at $x=L$. A concentrated vertical load of magnitude $P$ is applied at the free end $x=L$, producing small deflections. The beam has constant Young’s modulus $E$ and constant second moment of area $I$ along its span. Neglect shear deformation and axial deformation, and assume the classical Euler–Bernoulli beam (EBB) kinematics. \n\nUsing Castigliano’s second theorem, starting from the definition of strain energy due to bending and equilibrium of internal actions, derive the vertical tip deflection at $x=L$ produced by the load $P$. Your derivation must proceed from first principles of strain energy and internal bending moment distributions consistent with the stated assumptions. \n\nExpress your final answer as a single closed-form symbolic expression in terms of $P$, $L$, $E$, and $I$. If numerical values in the International System of Units (SI) were to be substituted, the deflection would be in meters. No numerical substitution is required, and no rounding is needed. Provide only the final symbolic expression for the tip deflection.", "solution": "The problem statement has been analyzed and is determined to be valid. It is a well-posed, scientifically grounded problem from classical solid mechanics that is free of contradiction, ambiguity, and factual error. The required derivation is a standard application of energy methods in structural analysis.\n\nThe problem asks for the vertical deflection at the free end of a cantilever beam under a concentrated load $P$ at that same end. We will use Castigliano's second theorem as stipulated. Let the coordinate $x$ originate from the fixed support ($x=0$) and extend to the free end ($x=L$). The load $P$ is applied at $x=L$ in the downward vertical direction.\n\nFirst, we must determine the internal bending moment $M(x)$ along the length of the beam as a function of the applied load $P$. We consider a free-body diagram of a segment of the beam from a section at a distance $x$ from the fixed support to the free end at $x=L$. For static equilibrium, the sum of moments about the cut section at $x$ must be zero. Adopting the sign convention that a bending moment causing tension in the bottom fibers (positive curvature) is positive, the load $P$ at $x=L$ creates a negative bending moment.\n\nThe moment equilibrium equation at section $x$ is:\n$$ M(x) + P(L-x) = 0 $$\nSolving for the internal bending moment $M(x)$ yields:\n$$ M(x) = -P(L-x) $$\nThis expression is valid for the domain $0 \\le x \\le L$.\n\nNext, we establish the expression for the strain energy $U$ stored in the beam due to bending. For a linearly elastic Euler-Bernoulli beam, this energy is given by the integral of the square of the bending moment divided by twice the flexural rigidity, $EI$, over the beam's length. Since $E$ and $I$ are constant, we have:\n$$ U = \\int_0^L \\frac{M(x)^2}{2EI} \\, dx $$\nSubstituting the expression for $M(x)$:\n$$ U = \\int_0^L \\frac{(-P(L-x))^2}{2EI} \\, dx = \\frac{P^2}{2EI} \\int_0^L (L-x)^2 \\, dx $$\n\nCastigliano's second theorem states that the displacement component at a point of application of a force, in the direction of that force, is equal to the partial derivative of the total strain energy of the structure with respect to that force. The vertical tip deflection, $\\delta$, at $x=L$ is therefore the partial derivative of the strain energy $U$ with respect to the load $P$:\n$$ \\delta = \\frac{\\partial U}{\\partial P} $$\nWe can apply this differentiation to the integral form of the strain energy. Using the Leibniz integral rule (differentiation under the integral sign), which is permissible as the limits of integration do not depend on $P$:\n$$ \\delta = \\frac{\\partial}{\\partial P} \\left( \\int_0^L \\frac{M(x)^2}{2EI} \\, dx \\right) = \\int_0^L \\frac{1}{2EI} \\frac{\\partial}{\\partial P} \\left( M(x)^2 \\right) \\, dx $$\nBy the chain rule, $\\frac{\\partial}{\\partial P}(M^2) = 2M \\frac{\\partial M}{\\partial P}$. Thus:\n$$ \\delta = \\int_0^L \\frac{M(x)}{EI} \\frac{\\partial M(x)}{\\partial P} \\, dx $$\nWe have $M(x) = -P(L-x)$. The partial derivative of $M(x)$ with respect to $P$ is:\n$$ \\frac{\\partial M(x)}{\\partial P} = -(L-x) $$\nNow, we substitute the expressions for $M(x)$ and $\\frac{\\partial M(x)}{\\partial P}$ into the integral for $\\delta$:\n$$ \\delta = \\int_0^L \\frac{[-P(L-x)]}{EI} [-(L-x)] \\, dx $$\nThe terms simplify, and the constants $P$, $E$, and $I$ can be taken outside the integral:\n$$ \\delta = \\frac{P}{EI} \\int_0^L (L-x)^2 \\, dx $$\nWe now evaluate the definite integral:\n$$ \\int_0^L (L-x)^2 \\, dx = \\int_0^L (L^2 - 2Lx + x^2) \\, dx $$\n$$ = \\left[ L^2x - 2L\\frac{x^2}{2} + \\frac{x^3}{3} \\right]_0^L $$\n$$ = \\left[ L^2x - Lx^2 + \\frac{x^3}{3} \\right]_0^L $$\nEvaluating at the limits of integration:\n$$ = \\left( L^2(L) - L(L)^2 + \\frac{L^3}{3} \\right) - (0) $$\n$$ = L^3 - L^3 + \\frac{L^3}{3} = \\frac{L^3}{3} $$\nFinally, substituting this result back into the expression for $\\delta$:\n$$ \\delta = \\frac{P}{EI} \\left( \\frac{L^3}{3} \\right) $$\nThis gives the final expression for the vertical deflection at the tip of the cantilever beam. The positive sign indicates that the deflection is in the same direction as the applied load $P$.\n$$ \\delta = \\frac{PL^3}{3EI} $$", "answer": "$$\n\\boxed{\\frac{PL^3}{3EI}}\n$$"}, {"introduction": "Energy methods truly shine when analyzing statically indeterminate systems, where equilibrium equations alone are insufficient. This practice demonstrates how to solve for an unknown redundant force $R$ by writing the strain energy $U$ as a function of both the external loads and $R$, and then applying a compatibility condition [@problem_id:2870281]. Specifically, by enforcing a known displacement (e.g., zero at a support) through the derivative $\\partial U/\\partial R = 0$, we can determine the redundant reaction, showcasing a powerful and versatile problem-solving strategy.", "id": "2870281", "problem": "A statically indeterminate planar truss is formed by five joints at coordinates $A(0,0)$, $B(L,0)$, $C(2L,0)$, $D(L/2,h)$, and $E(3L/2,h)$. The members are $AB$, $BC$, $DE$ (all horizontal), and the four diagonals $AD$, $DB$, $BE$, $EC$. The material is linear elastic, isotropic, and homogeneous with Young’s modulus $E$, and each member has the same constant cross-sectional area $A$. Let $h = L/2$. The supports are: a pin at $A$ (providing reactions in the horizontal and vertical directions), a roller at $C$ (providing a vertical reaction), and a redundant vertical roller under joint $B$ (providing an unknown vertical reaction).\n\nA single vertical load of magnitude $Q$ is applied downward at joint $B$.\n\nUsing Castigliano’s second theorem for linear elastic structures, proceed as follows:\n- Remove the redundant support at $B$ to obtain a statically determinate primary structure supported at $A$ and $C$.\n- Introduce an unknown generalized load $R$ acting vertically upward at $B$ to represent the redundant reaction.\n- Compute the total strain energy $U$ of the primary truss as a function of $Q$ and $R$, using the axial strain energy of truss members, and then evaluate $\\partial U/\\partial R$.\n- Enforce the compatibility condition that the vertical displacement of joint $B$ is zero.\n\nTake $L = 4.000\\ \\text{m}$, $h = L/2$, $E = 200.0 \\times 10^{9}\\ \\text{Pa}$, $A = 3.00 \\times 10^{-3}\\ \\text{m}^{2}$, and $Q = 64.8\\ \\text{kN}$. Express the final value of the redundant reaction at $B$ in $\\text{kN}$, and round your answer to three significant figures.\n\nYour final numerical answer must be a single real number.", "solution": "The problem as stated is subjected to validation.\n\nStep 1: Extract Givens\n- Joints: $A(0,0)$, $B(L,0)$, $C(2L,0)$, $D(L/2,h)$, $E(3L/2,h)$.\n- Members: $AB$, $BC$, $DE$, $AD$, $DB$, $BE$, $EC$.\n- Material: Linear elastic, isotropic, homogeneous with Young’s modulus $E$.\n- Cross-section: Constant area $A$ for all members.\n- Geometry: $h = L/2$.\n- Supports: Pin at $A$ (reactions $A_x, A_y$), roller at $C$ (reaction $C_y$), redundant vertical roller at $B$ (reaction $R_B$).\n- Load: Vertical downward load $Q$ at joint $B$.\n- Method: Castigliano’s second theorem.\n- Procedure: Remove redundant support at $B$, introduce unknown upward force $R$ at $B$, compute strain energy $U(Q, R)$, evaluate $\\partial U/\\partial R$, and enforce zero vertical displacement at $B$.\n- Numerical Values: $L = 4.000\\ \\text{m}$, $h = L/2 = 2.000\\ \\text{m}$, $E = 200.0 \\times 10^{9}\\ \\text{Pa}$, $A = 3.00 \\times 10^{-3}\\ \\text{m}^{2}$, $Q = 64.8\\ \\text{kN}$.\n- Required Output: Value of redundant reaction at $B$ in $\\text{kN}$, rounded to three significant figures.\n\nStep 2: Validate Using Extracted Givens\nThe problem is scientifically grounded, being a standard application of Castigliano's theorem in linear elastic structural analysis. The problem is well-posed; it describes a statically indeterminate truss of the first degree, and provides a clear and valid method for finding the redundant reaction. All necessary geometric, material, and loading data are provided and are consistent. The terminology is objective and precise. The problem is not trivial, as it requires a systematic application of the specified theorem, even if the final algebraic result simplifies significantly. The problem is valid.\n\nStep 3: Verdict and Action\nThe problem is valid. A solution will be provided.\n\nThe primary structure is obtained by removing the redundant roller support at joint $B$. The external loads on this primary structure are the applied vertical load $Q$ (downward) at $B$ and the unknown redundant reaction $R$ (upward) at $B$. The net vertical load at joint $B$ is $(Q-R)$ acting downward.\n\nThe primary structure is supported by a pin at $A$ and a roller at $C$. Due to the symmetry of the structure and the symmetric application of the net load with respect to the supports, the vertical reactions at $A$ and $C$ are equal.\nSum of vertical forces: $A_y + C_y - (Q-R) = 0$. With $A_y = C_y$, we have $2A_y = Q-R$, so $A_y = C_y = \\frac{Q-R}{2}$.\nSum of horizontal forces: $A_x = 0$, as there are no external horizontal loads.\n\nNext, we determine the lengths of the members ($L_i$).\nGiven $h=L/2$:\n$L_{AB} = L_{BC} = L_{DE} = L$.\nThe diagonal members have length $L_d = \\sqrt{(L/2)^2 + h^2} = \\sqrt{(L/2)^2 + (L/2)^2} = \\sqrt{\\frac{L^2}{2}} = \\frac{L}{\\sqrt{2}}$.\nSo, $L_{AD} = L_{DB} = L_{BE} = L_{EC} = \\frac{L}{\\sqrt{2}}$.\n\nWe now find the internal axial forces ($N_i$) in each member as a function of $Q$ and $R$ using the method of joints. Let tension be positive. The angle $\\theta$ of the diagonal members with the horizontal is such that $\\tan\\theta = h/(L/2) = (L/2)/(L/2) = 1$, so $\\theta = 45^\\circ$.\n\nAt joint $A$:\n$\\sum F_y = 0: A_y + N_{AD} \\sin(45^\\circ) = 0 \\Rightarrow \\frac{Q-R}{2} + N_{AD} \\frac{1}{\\sqrt{2}} = 0 \\Rightarrow N_{AD} = -\\frac{\\sqrt{2}}{2}(Q-R)$.\n$\\sum F_x = 0: A_x + N_{AB} + N_{AD} \\cos(45^\\circ) = 0 \\Rightarrow 0 + N_{AB} + \\left(-\\frac{\\sqrt{2}}{2}(Q-R)\\right)\\frac{1}{\\sqrt{2}} = 0 \\Rightarrow N_{AB} = \\frac{1}{2}(Q-R)$.\n\nDue to symmetry of the structure and loading:\n$N_{EC} = N_{AD} = -\\frac{\\sqrt{2}}{2}(Q-R)$.\n$N_{BC} = N_{AB} = \\frac{1}{2}(Q-R)$.\n$N_{BE} = N_{DB}$.\n\nAt joint $D$:\n$\\sum F_y = 0$: The vertical components of forces from members $AD$ and $DB$ must balance. This implies $N_{AD}\\sin(45^\\circ) + N_{DB}\\sin(-45^\\circ) = 0$, leading to $N_{DB} = N_{AD}$ if we consider the angles relative to the joint. A more careful analysis with forces directed away from the joint shows $-N_{AD}/\\sqrt{2} - N_{DB}/\\sqrt{2} = 0$, hence $N_{DB} = -N_{AD}$.\n$N_{DB} = - \\left(-\\frac{\\sqrt{2}}{2}(Q-R)\\right) = \\frac{\\sqrt{2}}{2}(Q-R)$.\n$\\sum F_x = 0: -N_{AD}\\cos(45^\\circ) + N_{DB}\\cos(45^\\circ) + N_{DE} = 0 \\Rightarrow N_{DE} = (N_{AD}-N_{DB})\\frac{1}{\\sqrt{2}}$.\n$N_{DE} = (N_{AD}-(-N_{AD}))\\frac{1}{\\sqrt{2}} = \\frac{2N_{AD}}{\\sqrt{2}} = \\sqrt{2}N_{AD} = \\sqrt{2}\\left(-\\frac{\\sqrt{2}}{2}(Q-R)\\right) = -(Q-R)$.\n\nBy symmetry, $N_{BE} = N_{DB} = \\frac{\\sqrt{2}}{2}(Q-R)$.\n\nThe total strain energy $U$ of the truss is given by $U = \\sum_i \\frac{N_i^2 L_i}{2EA}$. Since $E$ and $A$ are constant, $U = \\frac{1}{2EA} \\sum_i N_i^2 L_i$.\nLet us calculate the sum $\\sum_i N_i^2 L_i$:\n- Members $AB, BC$: $2 \\times \\left(\\frac{1}{2}(Q-R)\\right)^2 L = \\frac{1}{2}(Q-R)^2 L$.\n- Member $DE$: $\\left(-(Q-R)\\right)^2 L = (Q-R)^2 L$.\n- Members $AD, EC$: $2 \\times \\left(-\\frac{\\sqrt{2}}{2}(Q-R)\\right)^2 \\frac{L}{\\sqrt{2}} = 2 \\times \\frac{1}{2}(Q-R)^2 \\frac{L}{\\sqrt{2}} = \\frac{L}{\\sqrt{2}}(Q-R)^2$.\n- Members $DB, BE$: $2 \\times \\left(\\frac{\\sqrt{2}}{2}(Q-R)\\right)^2 \\frac{L}{\\sqrt{2}} = 2 \\times \\frac{1}{2}(Q-R)^2 \\frac{L}{\\sqrt{2}} = \\frac{L}{\\sqrt{2}}(Q-R)^2$.\n\nThe total sum is:\n$\\sum N_i^2 L_i = \\left(\\frac{1}{2} + 1 + \\frac{1}{\\sqrt{2}} + \\frac{1}{\\sqrt{2}}\\right)(Q-R)^2 L = \\left(\\frac{3}{2} + \\sqrt{2}\\right)(Q-R)^2 L$.\n\nThe strain energy is:\n$U(Q,R) = \\frac{L}{2EA}\\left(\\frac{3}{2} + \\sqrt{2}\\right)(Q-R)^2$.\n\nAccording to Castigliano's second theorem, the displacement $\\delta_R$ at joint $B$ in the direction of the redundant force $R$ (upward) is the partial derivative of the total strain energy with respect to $R$.\n$\\delta_R = \\frac{\\partial U}{\\partial R} = \\frac{\\partial}{\\partial R} \\left[ \\frac{L}{2EA}\\left(\\frac{3}{2} + \\sqrt{2}\\right)(Q-R)^2 \\right]$.\n$\\delta_R = \\frac{L}{2EA}\\left(\\frac{3}{2} + \\sqrt{2}\\right) \\cdot \\frac{\\partial}{\\partial R}(Q-R)^2$.\n$\\delta_R = \\frac{L}{2EA}\\left(\\frac{3}{2} + \\sqrt{2}\\right) \\cdot 2(Q-R)(-1) = -\\frac{L}{EA}\\left(\\frac{3}{2} + \\sqrt{2}\\right)(Q-R)$.\n\nThe compatibility condition requires that the vertical displacement at the location of the redundant roller support is zero. Therefore, $\\delta_R = 0$.\n$-\\frac{L}{EA}\\left(\\frac{3}{2} + \\sqrt{2}\\right)(Q-R) = 0$.\n\nSince the terms $\\frac{L}{EA}$ and $\\left(\\frac{3}{2} + \\sqrt{2}\\right)$ are non-zero constants, this equation implies:\n$Q-R = 0 \\implies R=Q$.\n\nThe physical interpretation is that for this symmetric structure with the load applied directly over the central redundant support, the entire load is transmitted to that support, leaving the rest of the truss unstressed.\n\nThe problem provides the numerical value for the load $Q = 64.8\\ \\text{kN}$.\nTherefore, the redundant reaction $R$ is:\n$R = Q = 64.8\\ \\text{kN}$.\n\nThe problem asks for the answer to be rounded to three significant figures. The value $64.8$ is already expressed with three significant figures.\nThe numerical values for $L$, $h$, $E$, and $A$ are not required for the determination of $R$, as it is independent of the stiffness of the structure.\nThe final value of the redundant reaction at $B$ is $64.8\\ \\text{kN}$.", "answer": "$$\\boxed{64.8}$$"}, {"introduction": "The principles of Castigliano's theorems extend beyond analytical derivations and are deeply embedded in modern computational mechanics. This advanced practice bridges theory and numerical methods by using the concept of energy derivatives to computationally verify the Maxwell-Betti reciprocity theorem within a Finite Element framework [@problem_id:2870235]. This exercise illuminates how classical energy principles, such as the relationship between displacement and the derivative of strain energy, underpin the algorithms that drive contemporary engineering simulation tools.", "id": "2870235", "problem": "Design and implement a program that validates reciprocity in a small finite element (FE) Euler–Bernoulli beam model by numerically verifying the symmetry of the global flexibility matrix through energy-based displacement calculations. Specifically, for selected pairs of generalized degrees of freedom (DOFs) indexed by $(i,j)$, compute $a_{ij}$ and $a_{ji}$ using energy derivatives with respect to generalized forces, and verify that $a_{ij}=a_{ji}$ within a specified numerical tolerance. Reciprocity here refers to Maxwell–Betti symmetry that holds for linear elastic structures.\n\nFundamental base to use:\n- Linear elasticity and small deformations.\n- Total strain energy of an Euler–Bernoulli beam under pure bending: $U = \\tfrac{1}{2}\\int_{0}^{L} \\dfrac{M(x)^2}{E I}\\,dx$, where $M(x)$ is the internal bending moment, $E$ is Young’s modulus, and $I$ is the second moment of area.\n- Discrete FE formulation leading to a global symmetric positive-definite stiffness matrix $\\mathbf{K}$ after applying essential boundary conditions, with generalized displacement vector $\\mathbf{u}$ and generalized force vector $\\mathbf{f}$ satisfying $\\mathbf{K}\\mathbf{u} = \\mathbf{f}$.\n- Total strain energy in discrete form: $U(\\mathbf{f}) = \\tfrac{1}{2}\\,\\mathbf{f}^{\\mathsf{T}}\\mathbf{K}^{-1}\\mathbf{f}$.\n\nNumerical energy-based displacement calculation:\n- For a given reduced (free-DOF) generalized force vector $\\mathbf{f}$, define the total strain energy $U(\\mathbf{f}) = \\tfrac{1}{2}\\,\\mathbf{f}^{\\mathsf{T}}\\mathbf{u}$ with $\\mathbf{K}\\mathbf{u} = \\mathbf{f}$.\n- Approximate the displacement component $u_i$ at a free DOF $i$ as the partial derivative $\\dfrac{\\partial U}{\\partial f_i}$ evaluated at a chosen base load $\\mathbf{f}_0$, using a central finite difference of step size $h$:\n$$\na_{ij} \\equiv u_i\\big|_{\\mathbf{f}=\\mathbf{f}_0} \\approx \\left.\\frac{\\partial U}{\\partial f_i}\\right|_{\\mathbf{f}_0} \\approx \\frac{U(\\mathbf{f}_0 + h\\,\\mathbf{e}_i) - U(\\mathbf{f}_0 - h\\,\\mathbf{e}_i)}{2h},\n$$\nwhere $\\mathbf{f}_0 = \\mathbf{e}_j$ is a unit generalized load at DOF $j$, $\\mathbf{e}_i$ is the $i$-th standard basis vector in the reduced force space, and $h$ is a small scalar increment in the same unit as the generalized force component $f_i$.\n- Similarly compute $a_{ji}$ by swapping the roles of $i$ and $j$.\n\nBeam finite element:\n- Use the standard two-node, planar Euler–Bernoulli beam element with transverse displacement $v$ and rotation $\\theta$ per node. Each node has two DOFs ordered as $(v_n,\\theta_n)$.\n- For an element of length $L_e$ and flexural rigidity $E I_e$, the $4\\times 4$ local stiffness matrix in the $(v_1,\\theta_1,v_2,\\theta_2)$ ordering is\n$$\n\\mathbf{k}_e = \\frac{E I_e}{L_e^3}\\begin{bmatrix}\n12 & 6 L_e & -12 & 6 L_e \\\\\n6 L_e & 4 L_e^2 & -6 L_e & 2 L_e^2 \\\\\n-12 & -6 L_e & 12 & -6 L_e \\\\\n6 L_e & 2 L_e^2 & -6 L_e & 4 L_e^2\n\\end{bmatrix}.\n$$\n- Assemble the global stiffness matrix $\\mathbf{K}$ in the standard way and apply essential boundary conditions by extracting the free-DOF submatrix $\\mathbf{K}_{ff}$.\n\nGeneralized forces and units:\n- For a DOF of type $v$ (transverse displacement), the conjugate generalized force component is a shear force with unit $\\mathrm{N}$.\n- For a DOF of type $\\theta$ (rotation), the conjugate generalized force component is a bending moment with unit $\\mathrm{N\\cdot m}$.\n- Treat rotations in radians. Radians are dimensionless. Express any physical constants and dimensions in International System of Units (SI). Displacements are in $\\mathrm{m}$ and rotations in $\\mathrm{rad}$.\n\nNumerical specifications:\n- Use a central difference step size $h = 10^{-6}$ in the same unit as the corresponding generalized force component.\n- Use a unit base load magnitude of $1$ in SI units: $1\\,\\mathrm{N}$ for a $v$-type DOF and $1\\,\\mathrm{N\\cdot m}$ for a $\\theta$-type DOF.\n- Verify reciprocity by checking whether $\\lvert a_{ij} - a_{ji}\\rvert \\le \\max(\\tau_{\\mathrm{abs}}, \\tau_{\\mathrm{rel}}\\cdot \\max(\\lvert a_{ij}\\rvert,\\lvert a_{ji}\\rvert))$ with $\\tau_{\\mathrm{abs}} = 10^{-12}$ and $\\tau_{\\mathrm{rel}} = 10^{-9}$ in SI-consistent units. The check produces a boolean result per test case.\n\nDegree-of-freedom indexing:\n- For node index $n$, the global DOF indices are $2n$ for $v_n$ and $2n+1$ for $\\theta_n$. After applying constraints, these map to reduced free-DOF indices in the natural order of the remaining DOFs.\n\nTest suite:\nImplement the four independent test cases below. In each case, define the mesh, properties, constraints, and the DOF pair $(i,j)$ to test reciprocity.\n\n- Case A (cantilever, two elements):\n  - Nodes at positions $x=[0,1,2]$ in $\\mathrm{m}$.\n  - Elements connect $(0,1)$ and $(1,2)$.\n  - Young’s modulus $E = 210\\times 10^9\\,\\mathrm{Pa}$.\n  - Second moment of area $I_1 = I_2 = 6.4\\times 10^{-6}\\,\\mathrm{m}^4$.\n  - Essential boundary conditions: at node $0$, constrain $v_0$ and $\\theta_0$.\n  - Reciprocity pair: $i=v_2$, $j=\\theta_1$.\n\n- Case B (simply supported, two elements):\n  - Nodes at positions $x=[0,1,2]$ in $\\mathrm{m}$.\n  - Elements connect $(0,1)$ and $(1,2)$.\n  - $E = 210\\times 10^9\\,\\mathrm{Pa}$.\n  - $I_1 = I_2 = 6.4\\times 10^{-6}\\,\\mathrm{m}^4$.\n  - Essential boundary conditions: constrain $v_0$ and $v_2$; rotations at nodes $0$ and $2$ are free.\n  - Reciprocity pair: $i=v_1$, $j=\\theta_2$.\n\n- Case C (non-uniform rigidity, two elements):\n  - Nodes at positions $x=[0,1.2,2.0]$ in $\\mathrm{m}$.\n  - Elements connect $(0,1)$ and $(1,2)$.\n  - $E = 210\\times 10^9\\,\\mathrm{Pa}$.\n  - $I_1 = 8.0\\times 10^{-6}\\,\\mathrm{m}^4$, $I_2 = 3.2\\times 10^{-6}\\,\\mathrm{m}^4$.\n  - Essential boundary conditions: constrain $v_0$ and $v_2$.\n  - Reciprocity pair: $i=\\theta_0$, $j=v_1$.\n\n- Case D (clamped-free with short first element):\n  - Nodes at positions $x=[0,0.2,2.0]$ in $\\mathrm{m}$.\n  - Elements connect $(0,1)$ and $(1,2)$.\n  - $E = 210\\times 10^9\\,\\mathrm{Pa}$.\n  - $I_1 = 8.0\\times 10^{-6}\\,\\mathrm{m}^4$, $I_2 = 8.0\\times 10^{-6}\\,\\mathrm{m}^4$.\n  - Essential boundary conditions: at node $0$, constrain $v_0$ and $\\theta_0$.\n  - Reciprocity pair: $i=\\theta_1$, $j=v_2$.\n\nRequired output:\n- For each case, output a boolean indicating whether reciprocity holds within the specified tolerance for the given $(i,j)$ pair.\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, for example, $[{\\rm True},{\\rm True},{\\rm True},{\\rm True}]$ if all tests pass.\n\nConstraints:\n- Implement the FE assembly and energy-based derivative calculations as specified.\n- Express all computations in SI units. Angles must be in radians.\n- No user input. The program must run as is and print the single-line result.", "solution": "The posed problem is valid as it is scientifically grounded in the principles of linear elastic structural mechanics, is well-posed with sufficient data for a unique solution, and is formulated with objective, unambiguous language. We shall proceed with the solution.\n\nThe objective is to numerically verify the Maxwell-Betti reciprocity theorem for a linear elastic structure modeled using the finite element method. The structure is a two-dimensional Euler-Bernoulli beam. The theorem implies that the flexibility matrix of the structure must be symmetric. The flexibility coefficient $a_{ij}$ represents the generalized displacement at degree of freedom (DOF) $i$ due to a unit generalized force applied at DOF $j$. Reciprocity requires that $a_{ij} = a_{ji}$. We will compute these coefficients using an energy-based method and check for their equality within a given numerical tolerance.\n\nFirst, we establish the finite element model. The beam is discretized into a series of two-node elements. Each node possesses two degrees of freedom: a transverse displacement $v$ and a rotation $\\theta$. For a beam element of length $L_e$ and constant flexural rigidity $EI_e$, the relationship between the nodal forces and displacements is described by the local $4 \\times 4$ element stiffness matrix, $\\mathbf{k}_e$. In the local coordinate system with DOFs ordered as $(v_1, \\theta_1, v_2, \\theta_2)$, this matrix is given by:\n$$\n\\mathbf{k}_e = \\frac{E I_e}{L_e^3}\\begin{bmatrix}\n12 & 6 L_e & -12 & 6 L_e \\\\\n6 L_e & 4 L_e^2 & -6 L_e & 2 L_e^2 \\\\\n-12 & -6 L_e & 12 & -6 L_e \\\\\n6 L_e & 2 L_e^2 & -6 L_e & 4 L_e^2\n\\end{bmatrix}\n$$\nThe global stiffness matrix, $\\mathbf{K}$, for the entire structure is assembled by superimposing the element stiffness matrices according to the connectivity of the mesh. The resulting global system of equations is $\\mathbf{K}\\mathbf{U} = \\mathbf{F}$, where $\\mathbf{U}$ and $\\mathbf{F}$ are the global vectors of generalized displacements and forces, respectively.\n\nEssential boundary conditions, such as fixed supports, constrain certain DOFs to zero. These constraints are applied by removing the rows and columns of $\\mathbf{K}$ and the corresponding entries in $\\mathbf{F}$ and $\\mathbf{U}$ that are associated with the constrained DOFs. This procedure yields the reduced system for the free degrees of freedom:\n$$\n\\mathbf{K}_{ff}\\mathbf{u} = \\mathbf{f}\n$$\nwhere $\\mathbf{K}_{ff}$ is the reduced stiffness matrix, which is symmetric and positive definite, thus invertible. The vectors $\\mathbf{u}$ and $\\mathbf{f}$ contain the displacements and forces for the free DOFs only.\n\nThe total strain energy, $U$, stored in a linear elastic system can be expressed in terms of the generalized forces $\\mathbf{f}$ acting on the free DOFs. The displacement vector is $\\mathbf{u} = \\mathbf{K}_{ff}^{-1}\\mathbf{f}$. The strain energy is $U = \\frac{1}{2} \\mathbf{u}^\\mathsf{T} \\mathbf{f}$. Substituting for $\\mathbf{u}$ gives the energy as a function of forces:\n$$\nU(\\mathbf{f}) = \\frac{1}{2} (\\mathbf{K}_{ff}^{-1}\\mathbf{f})^\\mathsf{T} \\mathbf{f} = \\frac{1}{2} \\mathbf{f}^\\mathsf{T} (\\mathbf{K}_{ff}^{-1})^\\mathsf{T} \\mathbf{f} = \\frac{1}{2} \\mathbf{f}^\\mathsf{T} \\mathbf{K}_{ff}^{-1} \\mathbf{f}\n$$\nThe last step relies on the symmetry of $\\mathbf{K}_{ff}$ and thus its inverse, $\\mathbf{K}_{ff}^{-1}$. The matrix $\\mathbf{A} = \\mathbf{K}_{ff}^{-1}$ is the flexibility matrix.\n\nAccording to Castigliano's second theorem, for a linear elastic structure, the partial derivative of the total strain energy with respect to a force component $f_i$ gives the displacement component $u_i$ in the direction of that force:\n$$\nu_i = \\frac{\\partial U}{\\partial f_i}\n$$\nThe flexibility coefficient $a_{ij}$ is, by definition, the displacement $u_i$ when a unit load is applied at DOF $j$, i.e., when the force vector is $\\mathbf{f} = \\mathbf{e}_j$, the $j$-th standard basis vector. Therefore, $a_{ij}$ is the $i$-th component of the displacement vector $\\mathbf{u} = \\mathbf{K}_{ff}^{-1} \\mathbf{e}_j$, which is precisely the entry $(\\mathbf{K}_{ff}^{-1})_{ij}$.\n\nTo verify reciprocity, we must show that $a_{ij} = a_{ji}$. We will compute these coefficients not by inverting $\\mathbf{K}_{ff}$, but by numerically approximating the partial derivative of the strain energy. We use a central finite difference scheme, which offers second-order accuracy. The coefficient $a_{ij}$ is approximated by evaluating the derivative $\\partial U/\\partial f_i$ at the base load $\\mathbf{f}_0 = \\mathbf{e}_j$:\n$$\na_{ij} = \\left. \\frac{\\partial U}{\\partial f_i} \\right|_{\\mathbf{f}=\\mathbf{e}_j} \\approx \\frac{U(\\mathbf{e}_j + h\\,\\mathbf{e}_i) - U(\\mathbf{e}_j - h\\,\\mathbf{e}_i)}{2h}\n$$\nwhere $h$ is a small step size, given as $h=10^{-6}$. To evaluate $U(\\mathbf{f})$ for any given force vector $\\mathbf{f}$, we first solve the linear system $\\mathbf{K}_{ff}\\mathbf{u} = \\mathbf{f}$ to find the displacement vector $\\mathbf{u}$, and then compute the energy as $U = \\frac{1}{2}\\mathbf{f}^\\mathsf{T}\\mathbf{u}$.\n\nSimilarly, the coefficient $a_{ji}$ is computed by swapping the roles of $i$ and $j$:\n$$\na_{ji} = \\left. \\frac{\\partial U}{\\partial f_j} \\right|_{\\mathbf{f}=\\mathbf{e}_i} \\approx \\frac{U(\\mathbf{e}_i + h\\,\\mathbf{e}_j) - U(\\mathbf{e}_i - h\\,\\mathbf{e}_j)}{2h}\n$$\nDue to numerical limitations such as floating-point precision and the approximation error from the finite difference, the computed values of $a_{ij}$ and $a_{ji}$ will not be exactly equal. We verify their agreement using a combined absolute and relative tolerance check: reciprocity is considered to hold if\n$$\n\\lvert a_{ij} - a_{ji}\\rvert \\le \\max(\\tau_{\\mathrm{abs}}, \\tau_{\\mathrm{rel}}\\cdot \\max(\\lvert a_{ij}\\rvert,\\lvert a_{ji}\\rvert))\n$$\nwith given tolerances $\\tau_{\\mathrm{abs}} = 10^{-12}$ and $\\tau_{\\mathrm{rel}} = 10^{-9}$.\n\nThe implementation will proceed by constructing a dedicated function for each test case. This function will define the mesh, properties, and boundary conditions. It will then assemble the global stiffness matrix, reduce it to $\\mathbf{K}_{ff}$, determine the mapping between global and reduced DOFs, and find the reduced indices for the specified reciprocity pair $(i, j)$. Finally, it will perform the energy calculations and the reciprocity check, returning a boolean value. The main program will execute all test cases and report the results.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Main function to run the test suite for verifying Maxwell's reciprocity theorem.\n    \"\"\"\n\n    def get_element_stiffness(E, I, L):\n        \"\"\"\n        Calculates the 4x4 stiffness matrix for an Euler-Bernoulli beam element.\n        \"\"\"\n        if L == 0:\n            raise ValueError(\"Element length cannot be zero.\")\n        \n        EI_L3 = E * I / (L**3)\n        return EI_L3 * np.array([\n            [12, 6*L, -12, 6*L],\n            [6*L, 4*L**2, -6*L, 2*L**2],\n            [-12, -6*L, 12, -6*L],\n            [6*L, 2*L**2, -6*L, 4*L**2]\n        ])\n\n    def run_test_case(nodes_x, elem_I, E, constrained_dofs, reciprocity_pair_global):\n        \"\"\"\n        Executes a single test case for reciprocity verification.\n        \n        Args:\n            nodes_x (list): List of x-coordinates of the nodes.\n            elem_I (list): List of second moments of area (I) for each element.\n            E (float): Young's modulus.\n            constrained_dofs (list): List of global indices of constrained DOFs.\n            reciprocity_pair_global (tuple): A tuple (i, j) of global DOF indices to test.\n        \"\"\"\n        num_nodes = len(nodes_x)\n        num_dofs_global = 2 * num_nodes\n        \n        # 1. Assemble Global Stiffness Matrix K\n        K_global = np.zeros((num_dofs_global, num_dofs_global))\n        elements = [(i, i + 1) for i in range(num_nodes - 1)]\n        \n        for idx, (n1, n2) in enumerate(elements):\n            L = nodes_x[n2] - nodes_x[n1]\n            I = elem_I[idx]\n            k_e = get_element_stiffness(E, I, L)\n            \n            dof_indices = [2*n1, 2*n1 + 1, 2*n2, 2*n2 + 1]\n            for i in range(4):\n                for j in range(4):\n                    K_global[dof_indices[i], dof_indices[j]] += k_e[i, j]\n\n        # 2. Apply Boundary Conditions to get Reduced System\n        all_dofs = list(range(num_dofs_global))\n        free_dofs = sorted(list(set(all_dofs) - set(constrained_dofs)))\n        \n        # Create a boolean mask for slicing\n        free_dofs_mask = np.ix_(free_dofs, free_dofs)\n        K_ff = K_global[free_dofs_mask]\n        \n        # 3. Map global DOF indices to reduced (free) DOF indices\n        global_to_reduced_map = {global_idx: reduced_idx for reduced_idx, global_idx in enumerate(free_dofs)}\n        \n        i_global, j_global = reciprocity_pair_global\n        if i_global not in global_to_reduced_map or j_global not in global_to_reduced_map:\n            raise ValueError(f\"Reciprocity pair DOFs {reciprocity_pair_global} must be free DOFs.\")\n        \n        i_reduced = global_to_reduced_map[i_global]\n        j_reduced = global_to_reduced_map[j_global]\n        \n        num_dofs_free = len(free_dofs)\n        \n        # 4. Define Strain Energy Function U(f)\n        K_ff_inv = np.linalg.inv(K_ff) # Pre-invert for efficiency\n        \n        def calculate_U(f_vec):\n            \"\"\"Calculates strain energy U = 0.5 * f^T * K_ff^-1 * f.\"\"\"\n            # u = np.linalg.solve(K_ff, f_vec)\n            # return 0.5 * np.dot(f_vec, u)\n            # Using pre-inverted K_ff is faster for multiple calls\n            u = K_ff_inv @ f_vec\n            return 0.5 * f_vec.T @ u\n\n        # 5. Compute Flexibility Coefficients using Finite Differences\n        h = 1.0e-6\n        tau_abs = 1.0e-12\n        tau_rel = 1.0e-9\n\n        # Calculate a_ij\n        e_i = np.zeros(num_dofs_free)\n        e_i[i_reduced] = 1.0\n        e_j = np.zeros(num_dofs_free)\n        e_j[j_reduced] = 1.0\n        \n        U_plus_h_i = calculate_U(e_j + h * e_i)\n        U_minus_h_i = calculate_U(e_j - h * e_i)\n        a_ij = (U_plus_h_i - U_minus_h_i) / (2 * h)\n\n        # Calculate a_ji\n        U_plus_h_j = calculate_U(e_i + h * e_j)\n        U_minus_h_j = calculate_U(e_i - h * e_j)\n        a_ji = (U_plus_h_j - U_minus_h_j) / (2 * h)\n        \n        # 6. Verify Reciprocity\n        diff = abs(a_ij - a_ji)\n        tolerance = max(tau_abs, tau_rel * max(abs(a_ij), abs(a_ji)))\n        \n        return diff <= tolerance\n\n    # Define test cases\n    E = 210.0e9 # Pa\n    \n    # Global DOF indices: v_n -> 2n, theta_n -> 2n+1\n    # v0:0, th0:1, v1:2, th1:3, v2:4, th2:5\n    \n    test_cases = [\n        # Case A: Cantilever\n        {\n            \"nodes_x\": [0.0, 1.0, 2.0],\n            \"elem_I\": [6.4e-6, 6.4e-6],\n            \"E\": E,\n            \"constrained_dofs\": [0, 1], # v0=0, th0=0\n            \"reciprocity_pair_global\": (4, 3) # (v2, th1)\n        },\n        # Case B: Simply Supported\n        {\n            \"nodes_x\": [0.0, 1.0, 2.0],\n            \"elem_I\": [6.4e-6, 6.4e-6],\n            \"E\": E,\n            \"constrained_dofs\": [0, 4], # v0=0, v2=0\n            \"reciprocity_pair_global\": (2, 5) # (v1, th2)\n        },\n        # Case C: Non-uniform Simply Supported\n        {\n            \"nodes_x\": [0.0, 1.2, 2.0],\n            \"elem_I\": [8.0e-6, 3.2e-6],\n            \"E\": E,\n            \"constrained_dofs\": [0, 4], # v0=0, v2=0\n            \"reciprocity_pair_global\": (1, 2) # (th0, v1)\n        },\n        # Case D: Clamped-Free, non-uniform length\n        {\n            \"nodes_x\": [0.0, 0.2, 2.0],\n            \"elem_I\": [8.0e-6, 8.0e-6],\n            \"E\": E,\n            \"constrained_dofs\": [0, 1], # v0=0, th0=0\n            \"reciprocity_pair_global\": (3, 4) # (th1, v2)\n        }\n    ]\n\n    results = []\n    for case in test_cases:\n        result = run_test_case(**case)\n        results.append(result)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```"}]}