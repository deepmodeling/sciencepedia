{"hands_on_practices": [{"introduction": "To truly master the concept of isochronous diagrams, one must first understand their mathematical genesis from the underlying principles of time-dependent material behavior. This foundational exercise guides you through the derivation of an isochronous stress-strain curve directly from the Norton-Bailey creep law, a standard model for high-temperature deformation [@problem_id:2895321]. By integrating the creep rate equation, you will translate a dynamic, time-dependent process into a static snapshot of material response at a fixed time $t_0$, thereby solidifying your understanding of how these crucial engineering diagrams are constructed from first principles.", "problem": "A polycrystalline alloy at high temperature exhibits time-dependent plastic deformation (creep) described by the Norton–Bailey law. In a uniaxial constant-stress test initiated at time $t=0^{+}$ with zero prior creep, the creep strain rate is modeled as $\\dot{\\epsilon}_{c}=A\\,\\sigma^{n}\\,t^{m-1}$ for $t>0$, where $A>0$, $n>0$, and $m>0$ are material parameters, $\\sigma$ is the applied constant uniaxial stress, and $\\epsilon_{c}$ is the creep strain. An isochronous stress–strain diagram at a fixed time $t_{0}>0$ is defined as the locus of pairs $(\\sigma,\\epsilon(t_{0}))$ obtained by conducting a family of constant-stress creep tests, each started at $t=0^{+}$, and reading off the strain at the common time $t_{0}$. Assume the instantaneous elastic strain is excluded from $\\epsilon_{c}$ and that $\\epsilon_{c}(0)=0$.\n\nStarting only from the definition of creep strain rate, the given rate law, and the definition of an isochronous curve, derive the isochronous creep strain at time $t_{0}$ as an explicit function of $\\sigma$. Then, using your derived result, discuss the power-law relationship between $\\epsilon_{c}$ and $\\sigma$ at fixed $t_{0}$, identifying the stress exponent and the time-dependent prefactor in terms of $A$, $m$, and $t_{0}$.\n\nReport your final answer as a single closed-form analytic expression for the isochronous creep strain $\\epsilon_{c}(\\sigma;t_{0})$ in terms of $A$, $m$, $n$, $\\sigma$, and $t_{0}$. Do not include units in your final expression. No numerical evaluation is required.", "solution": "The problem statement is first subjected to validation.\n\nStep 1: Extracted Givens.\n- Creep model: Norton–Bailey law.\n- Creep strain rate for $t>0$: $\\dot{\\epsilon}_{c}=A\\,\\sigma^{n}\\,t^{m-1}$.\n- Material parameters: $A>0$, $n>0$, $m>0$.\n- Applied stress $\\sigma$: constant uniaxial stress.\n- Initial condition: $\\epsilon_{c}(0)=0$ (zero prior creep).\n- Definition of isochronous curve: Locus of pairs $(\\sigma,\\epsilon(t_{0}))$ at a fixed time $t_{0}>0$.\n- Strain type: $\\epsilon_{c}$ is purely creep strain, excluding instantaneous elastic strain.\n\nStep 2: Validation.\nThe problem is scientifically grounded, as it uses the well-established Norton–Bailey creep law, a cornerstone of high-temperature materials mechanics. The concept of an isochronous stress–strain diagram is a standard method for representing creep data in engineering design. The problem is well-posed; it provides a first-order ordinary differential equation for the strain with a specified initial condition, which guarantees a unique solution. All terms are clearly defined, and the parameters have physically appropriate constraints ($A, n, m > 0$). The problem is self-contained, objective, and its solution is arrived at through rigorous mathematical derivation from the provided physical model. It is not trivial, as it requires correct application of calculus to a fundamental concept in materials science.\n\nStep 3: Verdict.\nThe problem is valid. We proceed with the derivation.\n\nThe starting point is the definition of the creep strain rate, $\\dot{\\epsilon}_{c}$, which is the time derivative of the creep strain, $\\epsilon_{c}$:\n$$\n\\dot{\\epsilon}_{c} = \\frac{d\\epsilon_{c}}{dt}\n$$\nWe are given the phenomenological law for this rate:\n$$\n\\frac{d\\epsilon_{c}}{dt} = A\\,\\sigma^{n}\\,t^{m-1}\n$$\nTo find the creep strain $\\epsilon_{c}$ as a function of time $t$, we must integrate this\nordinary differential equation. The problem specifies that for each test conducted to generate a point on the isochronous curve, the stress $\\sigma$ is held constant. Thus, during the integration with respect to time, $\\sigma$ is treated as a constant parameter.\n\nWe separate variables and integrate. The integration is performed from the initial time $t=0$, where the creep strain is $\\epsilon_{c}(0)=0$, to an arbitrary time $t$:\n$$\n\\int_{\\epsilon_{c}(0)}^{\\epsilon_{c}(t)} d\\epsilon'_{c} = \\int_{0}^{t} A\\,\\sigma^{n}\\,\\tau^{m-1} d\\tau\n$$\nHere, $\\tau$ is the dummy variable of integration for time. Substituting the initial condition $\\epsilon_{c}(0)=0$:\n$$\n\\int_{0}^{\\epsilon_{c}(t)} d\\epsilon'_{c} = \\epsilon_{c}(t)\n$$\nFor the right-hand side, since $A$ and $\\sigma$ are constants with respect to time, we have:\n$$\n\\epsilon_{c}(t) = A\\,\\sigma^{n} \\int_{0}^{t} \\tau^{m-1} d\\tau\n$$\nThe integral is a standard power function integral. Given that $m>0$, the integral is well-defined:\n$$\n\\int_{0}^{t} \\tau^{m-1} d\\tau = \\left[ \\frac{\\tau^{m}}{m} \\right]_{0}^{t} = \\frac{t^{m}}{m} - \\frac{0^{m}}{m} = \\frac{t^{m}}{m}\n$$\nSubstituting this result back into the expression for $\\epsilon_{c}(t)$, we obtain the creep strain at any time $t$ for a given constant stress $\\sigma$:\n$$\n\\epsilon_{c}(t) = A\\,\\sigma^{n} \\left( \\frac{t^{m}}{m} \\right) = \\frac{A}{m} \\sigma^{n} t^{m}\n$$\nAn isochronous stress–strain diagram represents the relationship between stress and strain at a single, fixed instant of time, which is given as $t_{0}$. To find the isochronous creep strain, we simply evaluate the general expression for $\\epsilon_{c}(t)$ at $t=t_{0}$. This yields the explicit function $\\epsilon_{c}(\\sigma; t_{0})$:\n$$\n\\epsilon_{c}(\\sigma; t_{0}) = \\frac{A}{m} \\sigma^{n} t_{0}^{m}\n$$\nThis is the required expression.\n\nNow, we discuss the power-law relationship as requested. The derived equation can be rearranged to highlight the dependency on $\\sigma$:\n$$\n\\epsilon_{c}(\\sigma; t_{0}) = \\left( \\frac{A t_{0}^{m}}{m} \\right) \\sigma^{n}\n$$\nThis equation is of the form $\\epsilon_{c} = K \\sigma^{n}$, which is a power law. By comparing the terms, we identify:\n1.  The stress exponent is $n$. This value governs the non-linearity of the relationship between isochronous strain and stress.\n2.  The time-dependent prefactor, which we may call $K(t_{0})$, is the entire term that multiplies $\\sigma^{n}$. This prefactor is given by $K(t_{0}) = \\frac{A t_{0}^{m}}{m}$. It captures the combined effects of the material's inherent creep resistance, reflected in parameters $A$ and $m$, and the duration of the creep process, $t_0$.\nThis completes the required analysis.", "answer": "$$\n\\boxed{\\frac{A \\sigma^{n} t_{0}^{m}}{m}}\n$$", "id": "2895321"}, {"introduction": "Moving from fundamental theory to advanced application, we explore how isochronous curves serve as functional components in modern computational mechanics. This practice focuses on their critical role in nonlinear finite element analysis, where solution algorithms like Newton's method require a precise material stiffness. You will derive the consistent tangent modulus, $E_t = \\partial\\sigma / \\partial\\epsilon$, from a given isochronous constitutive relation, a task that connects the abstract curve to the tangible requirements of numerical simulation codes [@problem_id:2895247]. Completing this exercise provides a direct look into the theoretical underpinnings that enable accurate modeling of complex material behavior.", "problem": "At a fixed absolute temperature $T$ and a fixed hold time $t_0$, an isochronous stress–strain curve for a high-temperature metal is modeled as a smooth mapping from axial Cauchy stress $\\sigma \\ge 0$ to total axial strain $\\epsilon(\\sigma;t_0)$, obtained from the sum of an instantaneous elastic strain and a delayed creep strain accrued by time $t_0$. To ensure differentiability for use in Newton iterations within a nonlinear finite element update, the creep strain is represented by a smoothed Norton–Bailey type regularization that avoids non-differentiability at $\\sigma=0$ while preserving the correct zero-stress limit of the creep strain. The constitutive mapping is\n$$\n\\epsilon(\\sigma;t_0) \\;=\\; \\frac{\\sigma}{E} \\;+\\; A\\, t_0^{m}\\left[\\left(\\frac{\\sigma^{2}+\\sigma_{s}^{2}}{\\sigma_{c}^{2}}\\right)^{\\frac{n}{2}} \\;-\\; \\left(\\frac{\\sigma_{s}}{\\sigma_{c}}\\right)^{n}\\right],\n$$\nwhere $E>0$ is the Young’s modulus, $A>0$, $m>0$, $n>0$ are creep material constants, $\\sigma_c>0$ is a stress scale, and $\\sigma_s>0$ is a smoothing stress. By construction, $\\epsilon(0;t_0)=0$ for all $t_0>0$.\n\nStarting from the definitions of isochronous stress–strain curves and the requirement for a consistent linearization in Newton’s method (namely, that the algorithmic or consistent tangent modulus equals the derivative of stress with respect to strain at fixed $t_0$), derive the closed-form expression for the consistent tangent modulus\n$$\nE_t(\\sigma,t_0) \\;=\\; \\frac{\\partial \\sigma}{\\partial \\epsilon}\\Big|_{t_0}\n$$\nassociated with the above smoothed isochronous curve. Your derivation must begin from the definition of the total strain as elastic plus creep at fixed $t_0$, use only standard calculus (including the inverse function theorem where needed), and explicitly show the steps leading to the final expression. Express your final result symbolically in terms of $\\sigma$, $t_0$, $E$, $A$, $m$, $n$, $\\sigma_c$, and $\\sigma_s$. Do not substitute any numerical values, and do not include units in your final expression.", "solution": "The problem asks for the consistent tangent modulus $E_t(\\sigma,t_0)=\\partial \\sigma/\\partial \\epsilon$ at fixed time $t_0$ for a given isochronous mapping $\\epsilon(\\sigma;t_0)$. The fundamental base consists of (i) the definition of the isochronous curve as the total strain at a fixed time $t_0$ under constant stress, which we represent as the sum of an instantaneous elastic strain and a creep strain accrued over time $t_0$, and (ii) the requirement for consistent linearization in Newton’s method: when the constitutive equation is given in the form $\\epsilon=\\epsilon(\\sigma;t_0)$, the algorithmic tangent modulus consistent with Newton updates written in terms of strain increments is $E_t=(\\partial \\epsilon/\\partial \\sigma)^{-1}$, provided $\\epsilon(\\sigma;t_0)$ is strictly monotone in $\\sigma$ so that local inversion is valid (inverse function theorem).\n\nWe proceed in two steps: compute $\\partial \\epsilon/\\partial \\sigma$ at fixed $t_0$, then invert it to obtain $E_t(\\sigma,t_0)$.\n\nStep $1$: Differentiate $\\epsilon(\\sigma;t_0)$ with respect to $\\sigma$ at fixed $t_0$.\n\nWe are given\n$$\n\\epsilon(\\sigma;t_0) \\;=\\; \\frac{\\sigma}{E} \\;+\\; A\\, t_0^{m}\\left[\\left(\\frac{\\sigma^{2}+\\sigma_{s}^{2}}{\\sigma_{c}^{2}}\\right)^{\\frac{n}{2}} \\;-\\; \\left(\\frac{\\sigma_{s}}{\\sigma_{c}}\\right)^{n}\\right].\n$$\nThe derivative of the elastic term is straightforward:\n$$\n\\frac{\\partial}{\\partial \\sigma}\\left(\\frac{\\sigma}{E}\\right) \\;=\\; \\frac{1}{E}.\n$$\nFor the creep term, the constant offset $-A t_0^{m}\\left(\\frac{\\sigma_s}{\\sigma_c}\\right)^{n}$ has zero derivative with respect to $\\sigma$. Focus on\n$$\ng(\\sigma) \\;=\\; A\\, t_0^{m}\\left(\\frac{\\sigma^{2}+\\sigma_{s}^{2}}{\\sigma_{c}^{2}}\\right)^{\\frac{n}{2}} \\;=\\; A\\, t_0^{m}\\, \\sigma_c^{-n}\\, \\left(\\sigma^{2}+\\sigma_{s}^{2}\\right)^{\\frac{n}{2}}.\n$$\nUsing the chain rule,\n$$\n\\frac{\\partial g}{\\partial \\sigma} \\;=\\; A\\, t_0^{m}\\, \\sigma_c^{-n}\\, \\frac{n}{2}\\left(\\sigma^{2}+\\sigma_{s}^{2}\\right)^{\\frac{n}{2}-1}\\,\\frac{\\partial}{\\partial \\sigma}\\!\\left(\\sigma^{2}+\\sigma_{s}^{2}\\right).\n$$\nNoting that $\\frac{\\partial}{\\partial \\sigma}\\!\\left(\\sigma^{2}+\\sigma_{s}^{2}\\right)=2\\sigma$, we obtain\n$$\n\\frac{\\partial g}{\\partial \\sigma} \\;=\\; A\\, t_0^{m}\\, \\sigma_c^{-n}\\, \\frac{n}{2}\\left(\\sigma^{2}+\\sigma_{s}^{2}\\right)^{\\frac{n}{2}-1}\\,(2\\sigma)\n\\;=\\; A\\, t_0^{m}\\, \\sigma_c^{-n}\\, n\\, \\sigma \\left(\\sigma^{2}+\\sigma_{s}^{2}\\right)^{\\frac{n}{2}-1}.\n$$\nTherefore,\n$$\n\\frac{\\partial \\epsilon}{\\partial \\sigma}\\Big|_{t_0}\n\\;=\\; \\frac{1}{E} \\;+\\; A\\, t_0^{m}\\, \\sigma_c^{-n}\\, n\\, \\sigma \\left(\\sigma^{2}+\\sigma_{s}^{2}\\right)^{\\frac{n}{2}-1}.\n$$\n\nStep $2$: Invert the slope to obtain the consistent tangent modulus.\n\nBy the inverse function theorem for a strictly monotone differentiable mapping $\\sigma \\mapsto \\epsilon(\\sigma;t_0)$, the derivative of the inverse mapping is the reciprocal of the derivative of the original mapping. Thus,\n$$\nE_t(\\sigma,t_0) \\;=\\; \\frac{\\partial \\sigma}{\\partial \\epsilon}\\Big|_{t_0} \\;=\\; \\left(\\frac{\\partial \\epsilon}{\\partial \\sigma}\\Big|_{t_0}\\right)^{-1}\n\\;=\\; \\left[\\frac{1}{E} \\;+\\; A\\, t_0^{m}\\, \\sigma_c^{-n}\\, n\\, \\sigma \\left(\\sigma^{2}+\\sigma_{s}^{2}\\right)^{\\frac{n}{2}-1}\\right]^{-1}.\n$$\n\nConsistency and limiting checks:\n- As $t_0 \\to 0^{+}$, the creep contribution vanishes and $E_t \\to \\left(\\frac{1}{E}\\right)^{-1}=E$, recovering the instantaneous elastic tangent.\n- As $\\sigma \\to 0^{+}$, the creep slope contribution scales as $\\sigma$ and vanishes, so $E_t \\to E$, ensuring a smooth zero-stress limit.\n- For $\\sigma>0$, $A>0$, $n>0$, $m>0$, and $\\sigma_c,\\sigma_s>0$, the increment in $\\partial \\epsilon/\\partial \\sigma$ is nonnegative, preserving monotonicity and guaranteeing the inverse exists locally for use in Newton iterations.\n\nHence the required closed-form expression for the consistent tangent modulus is\n$$\nE_t(\\sigma,t_0) \\;=\\; \\left[\\frac{1}{E} \\;+\\; \\frac{A\\, n\\, t_0^{m}}{\\sigma_c^{n}}\\, \\sigma \\left(\\sigma^{2}+\\sigma_{s}^{2}\\right)^{\\frac{n}{2}-1}\\right]^{-1}.\n$$", "answer": "$$\\boxed{\\left[\\frac{1}{E}+\\frac{A\\,n\\,t_0^{m}}{\\sigma_c^{n}}\\,\\sigma\\left(\\sigma^{2}+\\sigma_{s}^{2}\\right)^{\\frac{n}{2}-1}\\right]^{-1}}$$", "id": "2895247"}, {"introduction": "This final practice bridges the gap between theoretical models and experimental reality, placing you in the role of a materials engineer characterizing a new alloy. Often, we work backwards from measured data to determine the parameters that govern material behavior. This hands-on coding exercise [@problem_id:2895231] challenges you to fit a thermally-activated creep model to a synthetic dataset of isochronous curves measured at different temperatures. By linearizing the constitutive law and applying linear regression, you will extract key parameters such as the creep exponents and the Arrhenius activation energy $Q$, demonstrating a powerful and widely used technique for material model calibration.", "problem": "You are given discrete isochronous stress–strain data generated at several temperatures for a material that creeps under load. An isochronous curve is defined as the locus of pairs $\\left(\\sigma,\\epsilon\\right)$ at a fixed time $t$ and temperature $T$. Assume that the creep behavior is described by a separable, multiplicative constitutive model in which the strain depends on time, stress, and temperature, and that the temperature dependence arises from a thermally activated process consistent with an Arrhenius law. Specifically, adopt a time-hardening power-law form in stress and time, with an Arrhenius-type temperature factor in the prefactor. All strains are engineering strains, which are dimensionless. Stress is in $\\mathrm{MPa}$, time in $\\mathrm{s}$, and temperature in $\\mathrm{K}$. The universal gas constant is $R = 8.314\\,\\mathrm{J}\\,\\mathrm{mol}^{-1}\\,\\mathrm{K}^{-1}$. Your task is to estimate the activation energy and other model parameters by fitting the model to the provided isochronous data across temperatures and times using a principled regression approach grounded in first principles.\n\nDerive, from fundamental definitions of isochronous curves and thermally activated creep, a regression-ready formulation that allows simultaneous estimation of the time exponent, stress exponent, pre-exponential factor, and activation energy by using multiple isochronous curves collected at different times and temperatures. Then implement this estimation to produce numerical results for the test suite below.\n\nTest suite definition. For each case, data are generated on a grid of times $t$, temperatures $T$, and stresses $\\sigma$ by the same constitutive model family with unknown parameters $\\{A_0,m,n,Q\\}$, where $A_0$ is a pre-exponential factor, $m$ is the time exponent, $n$ is the stress exponent, and $Q$ is the activation energy. The strain values are computed deterministically from the model in Cases $1$ and $2$, and with controlled multiplicative noise in Case $3$. Use the following specifications:\n\n- Common units and constants for all cases: stress $\\sigma$ in $\\mathrm{MPa}$, time $t$ in $\\mathrm{s}$, temperature $T$ in $\\mathrm{K}$, strain $\\epsilon$ dimensionless, gas constant $R=8.314\\,\\mathrm{J}\\,\\mathrm{mol}^{-1}\\,\\mathrm{K}^{-1}$.\n\n- Case $1$ (happy path, moderate nonlinearity): true parameters $\\left\\{A_0,m,n,Q\\right\\} = \\left\\{2\\times 10^{-17},\\,0.33,\\,4.20,\\,230000\\right\\}$ with $A_0$ in $\\mathrm{s}^{-m}\\,\\mathrm{MPa}^{-n}$ and $Q$ in $\\mathrm{J}\\,\\mathrm{mol}^{-1}$. Use times $t\\in\\{10^{3},\\,10^{4},\\,10^{5}\\}\\,\\mathrm{s}$, temperatures $T\\in\\{600,\\,650,\\,700\\}\\,\\mathrm{K}$, and stresses $\\sigma\\in\\{90,\\,110,\\,130,\\,150\\}\\,\\mathrm{MPa}$. No noise.\n\n- Case $2$ (boundary-like time exponent near zero and low stress sensitivity): true parameters $\\left\\{A_0,m,n,Q\\right\\} = \\left\\{5\\times 10^{-10},\\,0.05,\\,1.00,\\,150000\\right\\}$ with $A_0$ in $\\mathrm{s}^{-m}\\,\\mathrm{MPa}^{-n}$ and $Q$ in $\\mathrm{J}\\,\\mathrm{mol}^{-1}$. Use times $t\\in\\{5\\times 10^{2},\\,5\\times 10^{3},\\,5\\times 10^{4}\\}\\,\\mathrm{s}$, temperatures $T\\in\\{500,\\,550,\\,600\\}\\,\\mathrm{K}$, and stresses $\\sigma\\in\\{40,\\,60,\\,80,\\,100\\}\\,\\mathrm{MPa}$. No noise.\n\n- Case $3$ (edge case with high activation energy and multiplicative noise): true parameters $\\left\\{A_0,m,n,Q\\right\\} = \\left\\{5\\times 10^{-20},\\,0.20,\\,6.00,\\,350000\\right\\}$ with $A_0$ in $\\mathrm{s}^{-m}\\,\\mathrm{MPa}^{-n}$ and $Q$ in $\\mathrm{J}\\,\\mathrm{mol}^{-1}$. Use times $t\\in\\{2\\times 10^{3},\\,2\\times 10^{4},\\,2\\times 10^{5}\\}\\,\\mathrm{s}$, temperatures $T\\in\\{700,\\,750,\\,800\\}\\,\\mathrm{K}$, and stresses $\\sigma\\in\\{80,\\,100,\\,130,\\,160\\}\\,\\mathrm{MPa}$. Contaminate the strains with multiplicative noise defined by $\\epsilon_{\\text{noisy}}=\\epsilon\\cdot \\exp(\\eta)$ where $\\eta\\sim \\mathcal{N}(0,\\sigma_{\\ln}^{2})$ with $\\sigma_{\\ln}=0.03$. Use a fixed random seed $S=7$ for reproducibility.\n\nComputation and output requirements:\n\n- Infer the parameters by fitting the model simultaneously across all given $(t,T,\\sigma)$ points within each case. Express the estimated activation energy $\\hat{Q}$ in $\\mathrm{kJ}\\,\\mathrm{mol}^{-1}$, rounded to two decimal places. Also report the estimated stress exponent $\\hat{n}$ and time exponent $\\hat{m}$, each rounded to two decimal places. The pre-exponential $\\hat{A}_0$ need not be reported.\n\n- Your program must compute and output the nine results in the following order: $\\left[\\hat{Q}_1,\\,\\hat{n}_1,\\,\\hat{m}_1,\\,\\hat{Q}_2,\\,\\hat{n}_2,\\,\\hat{m}_2,\\,\\hat{Q}_3,\\,\\hat{n}_3,\\,\\hat{m}_3\\right]$, where $\\hat{Q}_i$ is in $\\mathrm{kJ}\\,\\mathrm{mol}^{-1}$, and $\\hat{n}_i$ and $\\hat{m}_i$ are dimensionless. Each value must be printed with two digits after the decimal point.\n\n- Final output format: Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets (for example, $[\\text{result}_1,\\text{result}_2,\\ldots]$). No other text should be printed.\n\n- Angle units are not involved in this problem. All physical quantities must be handled in the specified units. The use of any other unit system is not allowed.\n\nYour implementation must be a complete, runnable program that constructs the synthetic isochronous datasets for the three cases as defined, performs the parameter estimation, and prints the results in the exact specified format.", "solution": "The problem presented is a well-posed task in parameter estimation for a materials constitutive model. It is scientifically grounded in the principles of creep mechanics and the Arrhenius law for thermally activated processes. The instructions are clear, complete, and logically consistent. No flaws are detected. We shall proceed with the derivation of the solution methodology.\n\nThe constitutive model for creep strain $\\epsilon$ is given as a separable, multiplicative function of stress $\\sigma$, time $t$, and temperature $T$. The specific form is a time-hardening power law with an Arrhenius temperature dependence:\n$$\n\\epsilon(\\sigma, t, T) = A_0 \\, t^m \\, \\sigma^n \\, \\exp\\left(-\\frac{Q}{RT}\\right)\n$$\nHere, the parameters to be determined are:\n- $A_0$: the pre-exponential factor, with units of $\\mathrm{s}^{-m}\\,\\mathrm{MPa}^{-n}$.\n- $m$: the dimensionless time exponent.\n- $n$: the dimensionless stress exponent.\n- $Q$: the activation energy for the creep process, in $\\mathrm{J}\\,\\mathrm{mol}^{-1}$.\n- $R$ is the universal gas constant, $R = 8.314\\,\\mathrm{J}\\,\\mathrm{mol}^{-1}\\,\\mathrm{K}^{-1}$.\n\nThis model is a non-linear function of its parameters. A direct non-linear regression could be employed, but a more robust and classical approach is to linearize the equation. This is achieved by taking the natural logarithm of both sides of the equation. This transformation is not merely a mathematical convenience; it aligns with the underlying statistical assumptions of the problem, particularly when considering multiplicative noise, as specified for one of the test cases. Applying the logarithm yields:\n$$\n\\ln(\\epsilon) = \\ln\\left( A_0 \\, t^m \\, \\sigma^n \\, \\exp\\left(-\\frac{Q}{RT}\\right) \\right)\n$$\nUsing the fundamental properties of the logarithm, we can separate the terms:\n$$\n\\ln(\\epsilon) = \\ln(A_0) + \\ln(t^m) + \\ln(\\sigma^n) + \\ln\\left(\\exp\\left(-\\frac{Q}{RT}\\right)\\right)\n$$\nThis simplifies to:\n$$\n\\ln(\\epsilon) = \\ln(A_0) + m \\ln(t) + n \\ln(\\sigma) - \\frac{Q}{RT}\n$$\nThis equation is now in the form of a multiple linear regression model. Let us define the components of this model explicitly. We define a response variable $y$ and a set of predictor variables $x_1, x_2, x_3$:\n- Response variable: $y = \\ln(\\epsilon)$\n- Predictor variables: $x_1 = \\ln(t)$, $x_2 = \\ln(\\sigma)$, $x_3 = -\\frac{1}{RT}$\n\nThe model can be expressed in the canonical linear form $y = \\beta_0 + \\beta_1 x_1 + \\beta_2 x_2 + \\beta_3 x_3$, where the regression coefficients $\\beta_j$ are directly related to the physical parameters of our original model:\n- Intercept: $\\beta_0 = \\ln(A_0)$\n- Coefficient $1$: $\\beta_1 = m$\n- Coefficient $2$: $\\beta_2 = n$\n- Coefficient $3$: $\\beta_3 = Q$\n\nGiven a set of $N$ experimental data points $(\\epsilon_i, t_i, \\sigma_i, T_i)$ for $i=1, \\dots, N$, we can construct a system of linear equations. This system is typically overdetermined and is represented in matrix form as $\\mathbf{y} = \\mathbf{X}\\boldsymbol{\\beta}$, where:\n$$\n\\mathbf{y} = \\begin{pmatrix} \\ln(\\epsilon_1) \\\\ \\ln(\\epsilon_2) \\\\ \\vdots \\\\ \\ln(\\epsilon_N) \\end{pmatrix},\n\\quad\n\\mathbf{X} = \\begin{pmatrix}\n1 & \\ln(t_1) & \\ln(\\sigma_1) & -1/(RT_1) \\\\\n1 & \\ln(t_2) & \\ln(\\sigma_2) & -1/(RT_2) \\\\\n\\vdots & \\vdots & \\vdots & \\vdots \\\\\n1 & \\ln(t_N) & \\ln(\\sigma_N) & -1/(RT_N)\n\\end{pmatrix},\n\\quad\n\\boldsymbol{\\beta} = \\begin{pmatrix} \\ln(A_0) \\\\ m \\\\ n \\\\ Q \\end{pmatrix}\n$$\nThe vector of estimated coefficients, $\\hat{\\boldsymbol{\\beta}}$, is found by the method of ordinary least squares (OLS), which minimizes the sum of squared residuals, $||\\mathbf{y} - \\mathbf{X}\\boldsymbol{\\beta}||^2$. The analytical solution is given by the normal equations:\n$$\n\\hat{\\boldsymbol{\\beta}} = (\\mathbf{X}^T \\mathbf{X})^{-1} \\mathbf{X}^T \\mathbf{y}\n$$\nFrom the resulting vector $\\hat{\\boldsymbol{\\beta}} = [\\hat{\\beta}_0, \\hat{\\beta}_1, \\hat{\\beta}_2, \\hat{\\beta}_3]^T$, we can directly extract the estimates for our physical parameters:\n- $\\hat{m} = \\hat{\\beta}_1$\n- $\\hat{n} = \\hat{\\beta}_2$\n- $\\hat{Q} = \\hat{\\beta}_3$\nThe estimate for the pre-exponential factor is $\\hat{A}_0 = \\exp(\\hat{\\beta}_0)$, though this is not required for the final output. The activation energy $\\hat{Q}$ will be computed in units of $\\mathrm{J}\\,\\mathrm{mol}^{-1}$ and must be converted to $\\mathrm{kJ}\\,\\mathrm{mol}^{-1}$ for reporting by dividing by $1000$.\n\nThe implementation will proceed by generating the specified synthetic datasets, constructing the design matrix $\\mathbf{X}$ and response vector $\\mathbf{y}$ for each case, and solving for $\\hat{\\boldsymbol{\\beta}}$ using a numerical linear algebra library function for least squares, which is a computationally stable approach.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves for creep model parameters from synthetic isochronous data.\n    \"\"\"\n    R = 8.314  # Universal gas constant in J mol^-1 K^-1\n\n    # Define the test cases from the problem statement.\n    test_cases = [\n        {\n            \"id\": 1,\n            \"params\": {\"A0\": 2e-17, \"m\": 0.33, \"n\": 4.20, \"Q\": 230000},\n            \"conditions\": {\n                \"t\": np.array([1e3, 1e4, 1e5]),\n                \"T\": np.array([600, 650, 700]),\n                \"sigma\": np.array([90, 110, 130, 150]),\n            },\n            \"noise\": None,\n        },\n        {\n            \"id\": 2,\n            \"params\": {\"A0\": 5e-10, \"m\": 0.05, \"n\": 1.00, \"Q\": 150000},\n            \"conditions\": {\n                \"t\": np.array([5e2, 5e3, 5e4]),\n                \"T\": np.array([500, 550, 600]),\n                \"sigma\": np.array([40, 60, 80, 100]),\n            },\n            \"noise\": None,\n        },\n        {\n            \"id\": 3,\n            \"params\": {\"A0\": 5e-20, \"m\": 0.20, \"n\": 6.00, \"Q\": 350000},\n            \"conditions\": {\n                \"t\": np.array([2e3, 2e4, 2e5]),\n                \"T\": np.array([700, 750, 800]),\n                \"sigma\": np.array([80, 100, 130, 160]),\n            },\n            \"noise\": {\"sigma_ln\": 0.03, \"seed\": 7},\n        },\n    ]\n\n    results = []\n\n    for case in test_cases:\n        # Unpack case data\n        params = case[\"params\"]\n        A0, m, n, Q = params[\"A0\"], params[\"m\"], params[\"n\"], params[\"Q\"]\n\n        conditions = case[\"conditions\"]\n        t_grid, T_grid, sigma_grid = np.meshgrid(\n            conditions[\"t\"], conditions[\"T\"], conditions[\"sigma\"], indexing='ij'\n        )\n\n        # Flatten the grids to get lists of data points\n        t_vals = t_grid.flatten()\n        T_vals = T_grid.flatten()\n        sigma_vals = sigma_grid.flatten()\n        num_points = len(t_vals)\n\n        # Generate strain data using the constitutive model\n        # epsilon = A0 * t^m * sigma^n * exp(-Q / (R * T))\n        epsilon = (\n            A0 * \n            (t_vals ** m) * \n            (sigma_vals ** n) * \n            np.exp(-Q / (R * T_vals))\n        )\n\n        # Apply multiplicative noise if specified\n        if case[\"noise\"]:\n            noise_params = case[\"noise\"]\n            rng = np.random.default_rng(seed=noise_params[\"seed\"])\n            eta = rng.normal(0, noise_params[\"sigma_ln\"], size=num_points)\n            epsilon = epsilon * np.exp(eta)\n\n        #\n        # Perform multiple linear regression on the linearized model:\n        # ln(epsilon) = ln(A0) + m*ln(t) + n*ln(sigma) - Q/(R*T)\n        #\n        # y = beta_0 + beta_1*x1 + beta_2*x2 + beta_3*x3\n        # y = ln(epsilon)\n        # x1 = ln(t), x2 = ln(sigma), x3 = -1/(R*T)\n        # beta_0 = ln(A0), beta_1 = m, beta_2 = n, beta_3 = Q\n        #\n\n        # Construct the response vector y\n        y = np.log(epsilon)\n\n        # Construct the design matrix X\n        X = np.zeros((num_points, 4))\n        X[:, 0] = 1.0  # Intercept column\n        X[:, 1] = np.log(t_vals)\n        X[:, 2] = np.log(sigma_vals)\n        X[:, 3] = -1.0 / (R * T_vals)\n        \n        # Solve the least squares problem X * beta = y\n        beta_hat, _, _, _ = np.linalg.lstsq(X, y, rcond=None)\n\n        # Extract parameter estimates from the coefficient vector\n        # beta_hat = [ln(A0_hat), m_hat, n_hat, Q_hat]\n        m_hat = beta_hat[1]\n        n_hat = beta_hat[2]\n        Q_hat = beta_hat[3]  # This is in J/mol\n\n        # Convert Q_hat to kJ/mol\n        Q_hat_kj = Q_hat / 1000.0\n\n        # Append results in the required order and format\n        results.append(Q_hat_kj)\n        results.append(n_hat)\n        results.append(m_hat)\n    \n    # Format the final output string as specified\n    formatted_results = [f\"{val:.2f}\" for val in results]\n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n```", "id": "2895231"}]}