{"hands_on_practices": [{"introduction": "Before fitting any model, a critical first step is to ensure the integrity and consistency of the experimental data. This exercise explores a common pitfall in fatigue data analysis: the confusion between life reported in cycles, $N_f$, versus reversals, $2N_f$. By working through this scenario [@problem_id:2915942], you will see how such an inconsistency can skew the results of a linear regression on the logarithmic form of the Basquin relation and learn why rigorous data validation is paramount.", "problem": "A low-alloy steel is characterized in high-cycle fatigue by a power-law relation between stress amplitude and life. Two common conventions exist for reporting life: cycles to failure, denoted by $N_f$, and stress reversals to failure, denoted by $2N_f$. A mixed dataset was compiled from two laboratories, one reporting life in cycles and the other in reversals. The dataset contains three tension–compression, fully reversed ($R=-1$) constant-amplitude tests with the following pairs of stress amplitude $S_a$ (in $\\mathrm{MPa}$) and reported life values:\n- Test $1$: $S_{a,1} = 10^{2.5}$ at a reported life of $10^{4}$.\n- Test $2$: $S_{a,2} = 10^{2.4}$ at a reported life of $10^{5}$.\n- Test $3$: $S_{a,3} = 10^{2.3}$ at a reported life of $2 \\times 10^{6}$.\n\nIt is subsequently discovered that Laboratory B reported life in stress reversals for Test $3$ but recorded the number directly without indicating the convention. Therefore, the physically correct life for Test $3$ in cycles is $10^{6}$, not $2 \\times 10^{6}$.\n\nAssume a Basquin-type stress–life power law in the cycles convention,\n$$S_a = A\\,N_f^{\\,b},$$\nwhere $A$ and $b$ are material parameters. You will fit $A$ and $b$ by ordinary least squares after taking the base-$10$ logarithm of both sides. That is, you will regress $\\log_{10}(S_a)$ on $\\log_{10}(N_f)$ to obtain the slope $b$ and intercept $\\log_{10}(A)$.\n\nTasks:\n1. Using the mixed dataset as recorded (with Test $3$ at $2 \\times 10^{6}$), determine the least-squares slope $b_{\\text{mixed}}$.\n2. Correct the dataset by converting Test $3$ to cycles ($10^{6}$) and refit to obtain the corrected slope $b_{\\text{corr}}$.\n3. Explain, based on first principles of the logarithmic transformation and the definition of reversals versus cycles, how expressing life in reversals versus cycles changes the fitted parameters, and why mixing conventions biases the slope.\n4. Report only the corrected slope $b_{\\text{corr}}$ as your final answer.\n\nRound your final answer for $b_{\\text{corr}}$ to four significant figures. The final answer is dimensionless and must be reported without units.", "solution": "The problem as stated will first be validated against criteria for scientific soundness, completeness, and objectivity.\n\n**Step 1: Extract Givens**\n- The material is a low-alloy steel.\n- The stress-life relationship is the Basquin power law: $S_a = A\\,N_f^{\\,b}$.\n- $S_a$ is the stress amplitude.\n- $N_f$ is the number of cycles to failure.\n- An alternative life convention is reversals to failure, $2N_f$.\n- The test conditions are fully reversed tension-compression, meaning the stress ratio is $R = -1$.\n- A dataset of three tests is provided:\n  - Test $1$: $S_{a,1} = 10^{2.5} \\, \\mathrm{MPa}$, reported life $= 10^{4}$.\n  - Test $2$: $S_{a,2} = 10^{2.4} \\, \\mathrm{MPa}$, reported life $= 10^{5}$.\n  - Test $3$: $S_{a,3} = 10^{2.3} \\, \\mathrm{MPa}$, reported life $= 2 \\times 10^{6}$.\n- It is specified that the reported life for Test $3$ was in reversals, and the correct life in cycles is $N_{f,3} = 10^{6}$.\n- The fitting procedure is ordinary least squares (OLS) regression on the log-transformed equation: $\\log_{10}(S_a) = \\log_{10}(A) + b \\log_{10}(N_f)$.\n- The tasks are to:\n  1. Determine the slope $b_{\\text{mixed}}$ from the uncorrected dataset.\n  2. Determine the slope $b_{\\text{corr}}$ from the corrected dataset.\n  3. Explain the effect of mixing life conventions.\n  4. Report the value of $b_{\\text{corr}}$ rounded to four significant figures.\n\n**Step 2: Validate Using Extracted Givens**\nThe problem is scientifically grounded. The Basquin relation is a standard, empirically validated model for high-cycle fatigue of metals. The distinction between cycles and reversals is a common convention in the field of fatigue analysis. The given stress and life values are physically plausible for a low-alloy steel. The problem is well-posed, providing all necessary data and a clearly defined mathematical procedure (OLS on log-transformed data) to arrive at a unique solution. The problem statement is objective and uses precise, unambiguous terminology. It does not violate any fundamental principles of mechanics, materials science, or statistics.\n\n**Step 3: Verdict and Action**\nThe problem is deemed **valid**. A full solution will be provided.\n\n**Solution**\n\nThe Basquin relation is given by $S_a = A N_f^b$. To perform a linear regression, we take the base-$10$ logarithm of both sides:\n$$ \\log_{10}(S_a) = \\log_{10}(A N_f^b) = \\log_{10}(A) + b \\log_{10}(N_f) $$\nThis equation is of the form $Y = C + bX$, where the dependent variable is $Y = \\log_{10}(S_a)$, the independent variable is $X = \\log_{10}(N_f)$, the intercept is $C = \\log_{10}(A)$, and the slope is the fatigue strength exponent $b$.\n\nFor a set of $n$ data points $(X_i, Y_i)$, the slope $b$ from an ordinary least-squares regression is calculated as:\n$$ b = \\frac{n \\sum_{i=1}^{n} X_i Y_i - \\left(\\sum_{i=1}^{n} X_i\\right) \\left(\\sum_{i=1}^{n} Y_i\\right)}{n \\sum_{i=1}^{n} X_i^2 - \\left(\\sum_{i=1}^{n} X_i\\right)^2} $$\n\n**Task 1: Determination of $b_{\\text{mixed}}$**\n\nFirst, we analyze the mixed, uncorrected dataset. Let us transform the given data into $(X, Y)$ coordinates.\n- Test $1$: $Y_1 = \\log_{10}(S_{a,1}) = \\log_{10}(10^{2.5}) = 2.5$. The life is reported as $10^4$. Assuming it is in cycles, $X_1 = \\log_{10}(10^4) = 4$.\n- Test $2$: $Y_2 = \\log_{10}(S_{a,2}) = \\log_{10}(10^{2.4}) = 2.4$. The life is reported as $10^5$. Assuming it is in cycles, $X_2 = \\log_{10}(10^5) = 5$.\n- Test $3$: $Y_3 = \\log_{10}(S_{a,3}) = \\log_{10}(10^{2.3}) = 2.3$. The life is reported as $2 \\times 10^6$. In this mixed dataset, we use this value directly: $X_3 = \\log_{10}(2 \\times 10^6) = \\log_{10}(2) + \\log_{10}(10^6) = 6 + \\log_{10}(2)$.\n\nThe dataset is: $(4, 2.5)$, $(5, 2.4)$, $(6+\\log_{10}(2), 2.3)$.\nWe have $n=3$. Let us calculate the required sums:\n- $\\sum X_i = 4 + 5 + (6 + \\log_{10}(2)) = 15 + \\log_{10}(2)$.\n- $\\sum Y_i = 2.5 + 2.4 + 2.3 = 7.2$.\n- $\\sum X_i Y_i = (4)(2.5) + (5)(2.4) + (6 + \\log_{10}(2))(2.3) = 10 + 12 + 13.8 + 2.3 \\log_{10}(2) = 35.8 + 2.3 \\log_{10}(2)$.\n- $\\sum X_i^2 = 4^2 + 5^2 + (6 + \\log_{10}(2))^2 = 16 + 25 + (36 + 12 \\log_{10}(2) + (\\log_{10}(2))^2) = 77 + 12 \\log_{10}(2) + (\\log_{10}(2))^2$.\n\nSubstitute these into the slope formula:\n$$ b_{\\text{mixed}} = \\frac{3(35.8 + 2.3 \\log_{10}(2)) - (15 + \\log_{10}(2))(7.2)}{3(77 + 12 \\log_{10}(2) + (\\log_{10}(2))^2) - (15 + \\log_{10}(2))^2} $$\n$$ b_{\\text{mixed}} = \\frac{107.4 + 6.9 \\log_{10}(2) - 108 - 7.2 \\log_{10}(2)}{231 + 36 \\log_{10}(2) + 3(\\log_{10}(2))^2 - (225 + 30 \\log_{10}(2) + (\\log_{10}(2))^2)} $$\n$$ b_{\\text{mixed}} = \\frac{-0.6 - 0.3 \\log_{10}(2)}{6 + 6 \\log_{10}(2) + 2(\\log_{10}(2))^2} $$\nUsing the approximation $\\log_{10}(2) \\approx 0.30103$:\n$$ b_{\\text{mixed}} \\approx \\frac{-0.6 - 0.3(0.30103)}{6 + 6(0.30103) + 2(0.30103)^2} = \\frac{-0.690309}{6 + 1.80618 + 0.181238} = \\frac{-0.690309}{7.987418} \\approx -0.086424 $$\n\n**Task 2: Determination of $b_{\\text{corr}}$**\n\nNext, we analyze the corrected dataset where the life for Test $3$ is properly converted to cycles, $N_{f,3} = 10^6$.\nThe transformed data points are:\n- Test $1$: $(X_1, Y_1) = (4, 2.5)$.\n- Test $2$: $(X_2, Y_2) = (5, 2.4)$.\n- Test $3$ (corrected): $(X_3, Y_3) = (\\log_{10}(10^6), 2.3) = (6, 2.3)$.\n\nThe points are $(4, 2.5)$, $(5, 2.4)$, $(6, 2.3)$.\nWe observe that these points are perfectly collinear. For any two points, the slope $\\frac{\\Delta Y}{\\Delta X}$ is constant:\n- Slope using points $1$ and $2$: $\\frac{2.4 - 2.5}{5 - 4} = \\frac{-0.1}{1} = -0.1$.\n- Slope using points $2$ and $3$: $\\frac{2.3 - 2.4}{6 - 5} = \\frac{-0.1}{1} = -0.1$.\nFor perfectly collinear data, the OLS regression line passes through all points, and its slope is simply the slope of the line.\nTherefore, $b_{\\text{corr}} = -0.1$.\nWe can verify this with the OLS formula.\n- $\\sum X_i = 4 + 5 + 6 = 15$.\n- $\\sum Y_i = 2.5 + 2.4 + 2.3 = 7.2$.\n- $\\sum X_i Y_i = (4)(2.5) + (5)(2.4) + (6)(2.3) = 10 + 12 + 13.8 = 35.8$.\n- $\\sum X_i^2 = 4^2 + 5^2 + 6^2 = 16 + 25 + 36 = 77$.\n$$ b_{\\text{corr}} = \\frac{3(35.8) - (15)(7.2)}{3(77) - (15)^2} = \\frac{107.4 - 108}{231 - 225} = \\frac{-0.6}{6} = -0.1 $$\nThe calculation is confirmed.\n\n**Task 3: Explanation of Convention-Mixing Bias**\n\nThe relationship between cycles to failure, $N_f$, and reversals to failure, $N_r$, is $N_r = 2 N_f$.\nConsider two representations of the Basquin law, one based on cycles and another on reversals:\n1. Cycles: $S_a = A N_f^b$\n2. Reversals: $S_a = A' N_r^{b'}$\n\nWe can relate these by substituting $N_r = 2 N_f$ into the second equation: $S_a = A'(2 N_f)^{b'} = A'(2^{b'})N_f^{b'}$.\nFor this to be consistent with the first equation, it must be that $b = b'$ and $A = A' 2^{b'}$. This means the fatigue strength exponent, $b$, is independent of whether life is expressed in cycles or reversals, provided the convention is applied consistently to all data. The fatigue strength coefficient, $A$, however, does depend on the convention.\n\nIn the log-transformed space:\n1. Cycles: $\\log_{10}(S_a) = \\log_{10}(A) + b \\log_{10}(N_f)$.\n2. Reversals: $\\log_{10}(S_a) = \\log_{10}(A') + b' \\log_{10}(N_r)$.\nUsing $\\log_{10}(N_r) = \\log_{10}(2 N_f) = \\log_{10}(2) + \\log_{10}(N_f)$, the second equation becomes:\n$\\log_{10}(S_a) = \\log_{10}(A') + b'(\\log_{10}(2) + \\log_{10}(N_f)) = [\\log_{10}(A') + b' \\log_{10}(2)] + b' \\log_{10}(N_f)$.\nAgain, by comparison, we find $b=b'$ and $\\log_{10}(A) = \\log_{10}(A') + b' \\log_{10}(2)$.\n\nThis analysis shows that changing the life convention from cycles to reversals for all data points corresponds to a constant horizontal shift of the entire dataset on a log-log plot. The independent variable $\\log_{10}(N_f)$ is replaced by $\\log_{10}(N_f) + \\log_{10}(2)$. Such a uniform translation of the independent variable does not change the slope of the best-fit line in a linear regression.\n\nThe problem arises when conventions are **mixed**. In the given scenario, the first two data points use $X = \\log_{10}(N_f)$, but the third point erroneously uses $X = \\log_{10}(N_r) = \\log_{10}(2 N_f)$. This is not a uniform shift. This selective misrepresentation of one data point moves it horizontally relative to the others. The correct data points $(4, 2.5)$, $(5, 2.4)$, $(6, 2.3)$ lie on a straight line with slope $b_{\\text{corr}} = -0.1$. The mixed dataset uses the points $(4, 2.5)$, $(5, 2.4)$, and $(6+\\log_{10}(2), 2.3)$. Point $3$ has been shifted to the right by $\\log_{10}(2)$ while points $1$ and $2$ remain fixed.\nTo fit a line through these three non-collinear points, the OLS procedure minimizes the sum of squared vertical errors. Since the rightmost point ($3$) has been shifted further to the right horizontally without changing its vertical position, the resulting best-fit line must become \"flatter\" to accommodate it. A flatter slope means its value is less negative, i.e., closer to zero. Our calculations confirm this: $b_{\\text{mixed}} \\approx -0.0864$ which is indeed less negative than $b_{\\text{corr}} = -0.1$. This systematic error, or bias, in the slope estimate is a direct consequence of the inconsistent data representation.\n\n**Task 4: Report Final Answer**\n\nThe corrected slope is $b_{\\text{corr}} = -0.1$. The problem requires this value to be rounded to four significant figures.", "answer": "$$ \\boxed{-0.1000} $$", "id": "2915942"}, {"introduction": "Beyond obvious data entry errors, fatigue predictions are also sensitive to more subtle systematic errors in measurement. This practice examines the consequences of a constant multiplicative error in stress amplitude, such as one might encounter from a miscalibrated load cell. This analysis [@problem_id:2915912] will demonstrate how such errors propagate through the Basquin power-law model, leading to potentially dangerous, non-conservative predictions of component life and underscoring the importance of calibration and uncertainty quantification.", "problem": "A heat-treated low-alloy steel exhibits high-cycle fatigue behavior that is well represented by a power-law Stress–Number (S–N) relation of the Basquin type between stress amplitude and cycles to failure. In a laboratory campaign, a single load cell was later found to be miscalibrated such that the reported stress amplitudes are all biased by a constant multiplicative factor $k=1.05$ relative to the true applied stresses. Tests span a wide range of lives and the S–N parameters are estimated by ordinary least squares regression after transforming the data using the natural logarithm. The Basquin exponent (slope in $\\ln$–$\\ln$ space) of this steel is known from prior evidence to be $m=0.12$.\n\nAssume that the engineer, unaware of the miscalibration, uses the fitted S–N relation to:\n- infer an endurance limit at $N_{e}=10^{6}$ cycles by evaluating the fitted S–N curve at $N=N_{e}$, and\n- design a component subjected in service to a correctly known stress amplitude $S_{\\text{app}}=200\\,\\text{MPa}$ by predicting its life from the fitted S–N relation.\n\nStarting only from the definition of a power-law S–N relation, the properties of the natural logarithm, and the ordinary least squares slope formula, first determine how a uniform multiplicative stress bias affects the estimated Basquin slope and the inferred endurance limit at $N_{e}$. Then, quantify the multiplicative error in the predicted life at the true service stress amplitude $S_{\\text{app}}$ that results from using the miscalibrated fit.\n\nWhat is the resulting multiplicative error factor in the predicted life? Round your final answer to four significant figures. Express the final factor as a dimensionless number (no units).", "solution": "The problem as stated is subjected to validation.\n\n**Step 1: Extract Givens**\n- The Stress-Number (S-N) relation is a power law of the Basquin type.\n- Reported stress amplitudes ($S'_{\\text{amp}}$) are biased by a constant multiplicative factor $k = 1.05$ relative to true stress amplitudes ($S_{\\text{amp}}$), such that $S'_{\\text{amp}} = k S_{\\text{amp}}$.\n- S-N parameters are estimated by ordinary least squares (OLS) regression on data transformed using the natural logarithm.\n- The Basquin exponent is given as $m=0.12$.\n- An endurance limit is inferred at $N_e = 10^6$ cycles.\n- A component is subjected to a correctly known service stress amplitude $S_{\\text{app}} = 200\\,\\text{MPa}$.\n\n**Step 2: Validate Using Extracted Givens**\nThe problem is scientifically grounded, as it is based on the established principles of fatigue analysis in materials science, specifically Basquin's law and standard statistical regression techniques (OLS). The scenario of a miscalibrated sensor is a practical and realistic engineering issue. The problem is well-posed, providing all necessary information ($k$, $m$) to derive a unique, quantitative answer to the question asked. The language used is objective and precise. The phrasing \"Basquin exponent (slope in ln–ln space) ... is ... $m=0.12$\" presents a minor ambiguity. A physical S-N curve shows decreasing stress for increasing life, implying a negative slope in logarithmic coordinates. The Basquin exponent, however, is conventionally a positive number. The standard form of the Basquin relation is $S N^m = C$, which upon taking logarithms becomes $\\ln(S) = \\ln(C) - m \\ln(N)$. The slope of $\\ln(S)$ versus $\\ln(N)$ is thus $-m$. Given that $m=0.12$ is positive, it must be interpreted as the exponent, making the slope $-0.12$. This interpretation is physically consistent and allows for a logical solution. Therefore, the problem is not fundamentally flawed.\n\n**Step 3: Verdict and Action**\nThe problem is valid. A rigorous solution will be provided.\n\nLet the true relationship between the stress amplitude, $S$, and the number of cycles to failure, $N$, be described by the Basquin power-law equation:\n$$S N^m = A$$\nwhere $A$ is a material constant and $m$ is the Basquin exponent, given as $m = 0.12$.\nThis relationship is linearized by taking the natural logarithm of both sides:\n$$\\ln(S) + m \\ln(N) = \\ln(A)$$\nRearranging for regression analysis of $\\ln(S)$ on $\\ln(N)$:\n$$\\ln(S) = \\ln(A) - m \\ln(N)$$\nThis is a linear equation of the form $y_i = \\beta_0 + \\beta_1 x_i$, where $y_i = \\ln(S_i)$, $x_i = \\ln(N_i)$, the true intercept is $\\beta_0 = \\ln(A)$, and the true slope is $\\beta_1 = -m$.\n\nThe load cell is miscalibrated, such that the reported stress, $S'$, is $S' = kS$, where $k = 1.05$. The engineer performs OLS regression on the miscalibrated data pairs $(S'_i, N_i)$. The transformed variable for reported stress is:\n$$y'_i = \\ln(S'_i) = \\ln(kS_i) = \\ln(k) + \\ln(S_i) = y_i + \\ln(k)$$\nThe engineer fits a linear model $y' = \\hat{\\beta}'_0 + \\hat{\\beta}'_1 x$ to the data points $(x_i, y'_i)$. The formula for the OLS slope estimator is:\n$$\\hat{\\beta}'_1 = \\frac{\\sum_{i=1}^n (x_i - \\bar{x})(y'_i - \\bar{y'})}{\\sum_{i=1}^n (x_i - \\bar{x})^2}$$\nwhere $\\bar{y'}$ is the mean of the $y'_i$ values. The mean $\\bar{y'}$ is related to the mean of the true values $\\bar{y}$ as follows:\n$$\\bar{y'} = \\frac{1}{n}\\sum_{i=1}^n y'_i = \\frac{1}{n}\\sum_{i=1}^n (y_i + \\ln(k)) = \\left(\\frac{1}{n}\\sum_{i=1}^n y_i\\right) + \\ln(k) = \\bar{y} + \\ln(k)$$\nSubstituting this into the term $(y'_i - \\bar{y'})$ in the numerator of the slope formula:\n$$y'_i - \\bar{y'} = (y_i + \\ln(k)) - (\\bar{y} + \\ln(k)) = y_i - \\bar{y}$$\nThus, the numerator for the slope estimate is identical for both the miscalibrated and the true data sets. The denominator is also identical. Consequently, the estimated slope is unaffected by the constant multiplicative bias in stress:\n$$\\hat{\\beta}'_1 = \\frac{\\sum_{i=1}^n (x_i - \\bar{x})(y_i - \\bar{y})}{\\sum_{i=1}^n (x_i - \\bar{x})^2} = \\hat{\\beta}_1 = -m$$\n**First conclusion: The estimated Basquin slope is not affected by the miscalibration.**\n\nNext, we analyze the effect on the intercept. The OLS intercept estimator is $\\hat{\\beta}'_0 = \\bar{y'} - \\hat{\\beta}'_1 \\bar{x}$.\n$$\\hat{\\beta}'_0 = (\\bar{y} + \\ln(k)) - \\hat{\\beta}_1 \\bar{x} = (\\bar{y} - \\hat{\\beta}_1 \\bar{x}) + \\ln(k) = \\hat{\\beta}_0 + \\ln(k)$$\nThe estimated intercept is biased by an amount $\\ln(k)$. The fitted S-N equation used by the engineer is therefore:\n$$\\ln(S_{\\text{eng}}) = (\\ln(A) + \\ln(k)) - m \\ln(N) = \\ln(Ak) - m \\ln(N)$$\nwhere $S_{\\text{eng}}$ is the stress variable in the engineer's erroneously fitted model. In power-law form, this is:\n$$S_{\\text{eng}} N^m = Ak$$\nNow, we consider the inferred endurance limit. The engineer evaluates their fitted curve at $N = N_e = 10^6$. Let the inferred endurance limit be $S'_e$.\n$$\\ln(S'_e) = \\ln(Ak) - m \\ln(N_e)$$\nThe true endurance limit, $S_e$, at $N_e$ is found from the true relation:\n$$\\ln(S_e) = \\ln(A) - m \\ln(N_e)$$\nComparing the two expressions:\n$$\\ln(S'_e) = (\\ln(A) - m\\ln(N_e)) + \\ln(k) = \\ln(S_e) + \\ln(k) = \\ln(kS_e)$$\nTherefore, $S'_e = k S_e$. **Second conclusion: The inferred endurance limit is overestimated by the factor $k$.**\n\nFinally, we quantify the error in the predicted life. The engineer uses the faulty relation, $S_{\\text{eng}} N^m = Ak$, to predict the life, $N_{\\text{pred}}$, of a component under a correctly known stress $S_{\\text{app}} = 200\\,\\text{MPa}$. The engineer substitutes $S_{\\text{app}}$ into their model for $S_{\\text{eng}}$:\n$$S_{\\text{app}} (N_{\\text{pred}})^m = Ak$$\nSolving for the predicted life, $N_{\\text{pred}}$:\n$$N_{\\text{pred}} = \\left( \\frac{Ak}{S_{\\text{app}}} \\right)^{1/m}$$\nThe true life, $N_{\\text{true}}$, under the stress $S_{\\text{app}}$ is determined from the true S-N relation, $S N^m = A$:\n$$S_{\\text{app}} (N_{\\text{true}})^m = A$$\nSolving for the true life, $N_{\\text{true}}$:\n$$N_{\\text{true}} = \\left( \\frac{A}{S_{\\text{app}}} \\right)^{1/m}$$\nThe multiplicative error factor in the predicted life is the ratio $N_{\\text{pred}} / N_{\\text{true}}$:\n$$\\frac{N_{\\text{pred}}}{N_{\\text{true}}} = \\frac{\\left( \\frac{Ak}{S_{\\text{app}}} \\right)^{1/m}}{\\left( \\frac{A}{S_{\\text{app}}} \\right)^{1/m}} = \\left( \\frac{Ak/S_{\\text{app}}}{A/S_{\\text{app}}} \\right)^{1/m} = (k)^{1/m}$$\nThis dimensionless error factor is independent of the applied stress level $S_{\\text{app}}$.\n\nWe now substitute the given numerical values: $k=1.05$ and $m=0.12$.\n$$\\text{Error Factor} = (1.05)^{1/0.12} = (1.05)^{1/(12/100)} = (1.05)^{100/12} = (1.05)^{25/3}$$\nCalculating this value:\n$$\\text{Error Factor} \\approx 1.501653139$$\nRounding to four significant figures, the result is $1.502$. This indicates that the engineer's prediction of the component's life is approximately $50\\%$ longer than its actual life, which represents a dangerous, non-conservative design error.", "answer": "$$\n\\boxed{1.502}\n$$", "id": "2915912"}, {"introduction": "In practice, a comprehensive fatigue assessment often requires combining data from multiple sources obtained under different conditions. This advanced, hands-on coding exercise [@problem_id:2915834] guides you through the process of unifying S-N datasets by applying standard Marin correction factors for specimen size, $k_{\\text{size}}$, and surface finish, $k_{\\text{surf}}$. You will then use a formal statistical test to determine whether a single, unified Basquin slope is justifiable, a critical step in building a robust, consolidated material property database from disparate experimental campaigns.", "problem": "You are given multiple Stress–Number (S–N) datasets measured on specimens with different diameters and surface finishes. Your task is to map the measured stress amplitudes to a common baseline using multiplicative corrections for size and surface finish, then test whether a single unified Basquin slope exponent is justified across datasets by a formal hypothesis test.\n\nUse the following fundamental base and well-tested relations.\n\n1. Basquin relation (well-tested empirical law of high-cycle fatigue): for stress amplitude $S$ (in $\\mathrm{MPa}$) and life $N$ (cycles), assume\n$$\nS = A\\,N^{-b},\n$$\nwhere $A$ and $b$ are material parameters and $b0$. Under base-$10$ logarithms, this becomes linear,\n$$\n\\log_{10} S = \\log_{10} A - b\\,\\log_{10} N.\n$$\n\n2. Multiplicative corrections to map measured stresses to a common baseline condition (polished surface and small reference diameter) are to be applied to the stress amplitude, using well-established Marin factors:\n- Surface finish factor $k_{\\mathrm{surf}}$ specified by\n$$\nk_{\\mathrm{surf}} = a_{\\mathrm{surf}}\\left(S_{\\mathrm{ut}}\\right)^{b_{\\mathrm{surf}}},\n$$\nwith $S_{\\mathrm{ut}}$ the ultimate tensile strength (in $\\mathrm{MPa}$). Use:\n  - For ground: $a_{\\mathrm{surf}} = 1.58$, $b_{\\mathrm{surf}} = -0.085$.\n  - For machined: $a_{\\mathrm{surf}} = 4.51$, $b_{\\mathrm{surf}} = -0.265$.\n  - For polished (baseline): $k_{\\mathrm{surf}} = 1$.\n- Size factor (bending) $k_{\\mathrm{size}}$ as\n$$\nk_{\\mathrm{size}} =\n\\begin{cases}\n1,  d \\le 7.62\\,\\mathrm{mm},\\\\\n\\left(\\dfrac{d}{7.62}\\right)^{-0.107},  d > 7.62\\,\\mathrm{mm},\n\\end{cases}\n$$\nwith diameter $d$ in $\\mathrm{mm}$.\n\nMap each measured stress amplitude $S_{\\mathrm{meas}}$ to a common baseline equivalent stress amplitude $S_{\\mathrm{eq}}$ by\n$$\nS_{\\mathrm{eq}} = \\dfrac{S_{\\mathrm{meas}}}{k_{\\mathrm{size}}\\,k_{\\mathrm{surf}}}.\n$$\n\n3. Statistical test for unified Basquin slope across groups:\n- Define $x = \\log_{10} N$ and $y = \\log_{10} S_{\\mathrm{eq}}$.\n- For $G$ groups (datasets), consider two linear models in $(x,y)$:\n  - Full model (separate slopes): $y_i = a_{g(i)} + m_{g(i)} x_i + \\varepsilon_i$, with group-specific intercepts $a_g$ and slopes $m_g$.\n  - Restricted model (common slope): $y_i = a_{g(i)} + m x_i + \\varepsilon_i$, with group-specific intercepts $a_g$ and a single common slope $m$.\n- Let $N_{\\mathrm{tot}}$ be the total number of observations, $G$ the number of groups. Denote the residual sum of squares of the full and restricted models by $\\mathrm{RSS}_{\\mathrm{full}}$ and $\\mathrm{RSS}_{\\mathrm{restr}}$, respectively. The $F$ statistic for testing equal slopes is\n$$\nF = \\dfrac{\\left(\\mathrm{RSS}_{\\mathrm{restr}} - \\mathrm{RSS}_{\\mathrm{full}}\\right)/(G-1)}{\\mathrm{RSS}_{\\mathrm{full}}/\\left(N_{\\mathrm{tot}} - 2G\\right)}.\n$$\nUse a significance level $\\alpha = 0.05$. The null hypothesis of a unified slope is rejected if $p \\lt \\alpha$, where $p$ is the survival-function tail probability of the $F$ distribution with $(G-1,\\,N_{\\mathrm{tot}}-2G)$ degrees of freedom evaluated at $F$. Report the unified Basquin exponent estimate $b_{\\mathrm{common}} = -m$ from the restricted model.\n\nPhysical units and numerical conventions:\n- All stresses must be treated in $\\mathrm{MPa}$.\n- All diameters must be treated in $\\mathrm{mm}$.\n- Cycle counts are dimensionless.\n- Logarithms are base-$10$ throughout.\n- The program must output numeric values without units.\n\nTest suite and data:\nFor each test case below, $S_{\\mathrm{ut}}$ is the same for both groups, and the data are measured stress amplitudes $S_{\\mathrm{meas}}$ (already in $\\mathrm{MPa}$). Apply the specified corrections before any regression.\n\n- Test Case $1$ (happy path; two groups with nearly the same true slope):\n  - Material ultimate tensile strength: $S_{\\mathrm{ut}} = 900\\,\\mathrm{MPa}$.\n  - Group $1$: diameter $d = 10\\,\\mathrm{mm}$, surface finish = ground. Cycles $N = [10^5,\\,3\\times 10^5,\\,10^6,\\,3\\times 10^6,\\,10^7]$. Measured stresses $S_{\\mathrm{meas}} = [323.5,\\,293.2,\\,261.7,\\,233.5,\\,206.1]$.\n  - Group $2$: diameter $d = 30\\,\\mathrm{mm}$, surface finish = machined. Cycles $N = [2\\times 10^5,\\,6\\times 10^5,\\,2\\times 10^6,\\,6\\times 10^6]$. Measured stresses $S_{\\mathrm{meas}} = [226.2,\\,205.0,\\,182.7,\\,162.2]$.\n\n- Test Case $2$ (different slopes; unified slope should be rejected):\n  - Material ultimate tensile strength: $S_{\\mathrm{ut}} = 900\\,\\mathrm{MPa}$.\n  - Group $1$: same $d$, surface, $N$, and $S_{\\mathrm{meas}}$ as in Test Case $1$.\n  - Group $2$: diameter $d = 30\\,\\mathrm{mm}$, surface finish = machined. Cycles $N = [2\\times 10^5,\\,6\\times 10^5,\\,2\\times 10^6,\\,6\\times 10^6]$. Measured stresses $S_{\\mathrm{meas}} = [122.6,\\,105.8,\\,88.1,\\,74.1]$.\n\n- Test Case $3$ (slightly different slopes; borderline scenario):\n  - Material ultimate tensile strength: $S_{\\mathrm{ut}} = 900\\,\\mathrm{MPa}$.\n  - Group $1$: diameter $d = 10\\,\\mathrm{mm}$, surface finish = ground. Cycles $N = [10^5,\\,3\\times 10^5,\\,10^6,\\,3\\times 10^6,\\,10^7]$. Measured stresses $S_{\\mathrm{meas}} = [288.3,\\,257.1,\\,227.9,\\,201.6,\\,174.5]$.\n  - Group $2$: diameter $d = 30\\,\\mathrm{mm}$, surface finish = machined. Cycles $N = [2\\times 10^5,\\,6\\times 10^5,\\,2\\times 10^6,\\,6\\times 10^6]$. Measured stresses $S_{\\mathrm{meas}} = [177.6,\\,157.7,\\,136.5,\\,118.2]$.\n\nRequired final output format:\nYour program must compute, for each test case, the list $[b_{\\mathrm{common}}, F, p, \\text{decision}]$, where $b_{\\mathrm{common}}$ is a float, $F$ is a float, $p$ is a float, and $\\text{decision}$ is a boolean equal to $\\text{True}$ if a unified slope is justified (i.e., $p \\ge \\alpha$) and $\\text{False}$ otherwise. Aggregate the three per-test-case lists into a single line Python-style list. For example, the output must look like\n$$\n\\big[\\,[b_1,F_1,p_1,\\mathrm{True/False}],\\,[b_2,F_2,p_2,\\mathrm{True/False}],\\,[b_3,F_3,p_3,\\mathrm{True/False}]\\,\\big]\n$$\nwith no extra text.", "solution": "We begin from the empirical Basquin relation $S = A N^{-b}$, which is a well-tested law in high-cycle fatigue. Taking base-$10$ logarithms yields a linear model in $(x,y)$ with $x = \\log_{10} N$ and $y = \\log_{10} S$, namely $y = \\log_{10} A - b\\,x$. The Basquin slope in $(x,y)$ is the coefficient multiplying $x$, which is negative. By convention we report the positive Basquin exponent $b = -m$, where $m$ is the regression slope in the log–log domain.\n\nCombining datasets from different section sizes and surface finishes requires mapping measured stresses $S_{\\mathrm{meas}}$ to a common baseline via multiplicative correction factors. The Marin-type surface finish factor $k_{\\mathrm{surf}}$ scales with ultimate tensile strength $S_{\\mathrm{ut}}$ as $k_{\\mathrm{surf}} = a_{\\mathrm{surf}} S_{\\mathrm{ut}}^{b_{\\mathrm{surf}}}$, with $(a_{\\mathrm{surf}}, b_{\\mathrm{surf}})$ depending on finish. The size factor for bending $k_{\\mathrm{size}} = (d/7.62)^{-0.107}$ for $d  7.62\\,\\mathrm{mm}$ and $k_{\\mathrm{size}} = 1$ for $d \\le 7.62\\,\\mathrm{mm}$ accounts for the increased highly stressed volume with larger diameter. Because these factors reduce the endurance strength away from the polished, small-diameter baseline, the baseline-equivalent stress amplitude consistent with combining datasets is\n$$\nS_{\\mathrm{eq}} = \\dfrac{S_{\\mathrm{meas}}}{k_{\\mathrm{size}}\\,k_{\\mathrm{surf}}}.\n$$\nThis division maps lower measured stresses from rougher/larger specimens up to the baseline.\n\nTo test whether a unified Basquin slope is justified across $G$ datasets after correction, we build two linear regression models in the $(x,y)$ domain:\n- Restricted model (common slope): $y_i = a_{g(i)} + m\\,x_i + \\varepsilon_i$ where $g(i)\\in \\{1,\\dots,G\\}$ marks the group of observation $i$. The parameters are the $G$ intercepts $\\{a_g\\}$ and one slope $m$.\n- Full model (separate slopes): $y_i = a_{g(i)} + m_{g(i)}\\,x_i + \\varepsilon_i$, with $G$ intercepts and $G$ slopes.\n\nLet $N_{\\mathrm{tot}}$ be the total number of observations across groups. Estimating both models by ordinary least squares yields residual sums of squares $\\mathrm{RSS}_{\\mathrm{restr}}$ and $\\mathrm{RSS}_{\\mathrm{full}}$. Under the null hypothesis that the group slopes are equal, the $F$ statistic\n$$\nF = \\dfrac{\\left(\\mathrm{RSS}_{\\mathrm{restr}} - \\mathrm{RSS}_{\\mathrm{full}}\\right)/(G-1)}{\\mathrm{RSS}_{\\mathrm{full}}/\\left(N_{\\mathrm{tot}} - 2G\\right)}\n$$\nhas an $F$ distribution with $(G-1, N_{\\mathrm{tot}} - 2G)$ degrees of freedom. We compute the tail probability $p$ via the survival function of the $F$ distribution. If $p \\ge \\alpha$ with $\\alpha = 0.05$, we fail to reject the null and deem a common slope justified; otherwise, we reject the null and conclude that different slopes are required. The unified Basquin exponent is reported as $b_{\\mathrm{common}} = -m$ from the restricted model.\n\nAlgorithmic procedure for each test case:\n1. For each group, compute $k_{\\mathrm{surf}}$ from the specified $S_{\\mathrm{ut}}$ and surface finish, and $k_{\\mathrm{size}}$ from the specified diameter. Compute the combined factor $k = k_{\\mathrm{size}}\\,k_{\\mathrm{surf}}$.\n2. Map $S_{\\mathrm{meas}}$ to baseline-equivalent $S_{\\mathrm{eq}} = S_{\\mathrm{meas}}/k$.\n3. Build vectors $x = \\log_{10} N$ and $y = \\log_{10} S_{\\mathrm{eq}}$ for all observations, preserving group membership.\n4. Fit the restricted model by least squares with a design matrix consisting of $G$ group intercept columns and a single common $x$ column; obtain slope $m$ and residual sum of squares $\\mathrm{RSS}_{\\mathrm{restr}}$.\n5. Fit the full model by least squares with a design matrix consisting of $G$ group intercept columns and $G$ group-specific $x$ columns; obtain $\\mathrm{RSS}_{\\mathrm{full}}$.\n6. Compute $F$ and the corresponding $p$ using the specified degrees of freedom. In the limiting case $\\mathrm{RSS}_{\\mathrm{full}} \\to 0$, interpret $F \\to \\infty$ and $p \\to 0$ when $\\mathrm{RSS}_{\\mathrm{restr}}  \\mathrm{RSS}_{\\mathrm{full}}$, and $F=0$, $p=1$ when $\\mathrm{RSS}_{\\mathrm{restr}} = \\mathrm{RSS}_{\\mathrm{full}}$.\n7. Report $b_{\\mathrm{common}} = -m$ along with $F$, $p$, and the boolean decision $p \\ge 0.05$.\n\nQualitative expectations for the provided datasets:\n- Test Case $1$ was constructed from two datasets consistent with a nearly identical exponent after correction; thus we expect $p \\ge 0.05$ and a decision of $\\mathrm{True}$ for a common slope.\n- Test Case $2$ uses Group $2$ data with a markedly steeper underlying slope after correction; thus we expect $p \\lt 0.05$ and a decision of $\\mathrm{False}$.\n- Test Case $3$ contains slightly different exponents; with the provided sample sizes and scatter, we expect $p \\ge 0.05$ and a decision of $\\mathrm{True}$.\n\nThe implementation below follows these steps exactly, producing the required single-line output with $[b_{\\mathrm{common}},F,p,\\text{decision}]$ for each test case.", "answer": "```python\nimport numpy as np\nfrom scipy.stats import f as f_dist\n\ndef k_surface(surface: str, S_ut: float) - float:\n    # S_ut in MPa\n    surface = surface.lower()\n    if surface == \"polished\":\n        return 1.0\n    elif surface == \"ground\":\n        a, b = 1.58, -0.085\n        return a * (S_ut ** b)\n    elif surface == \"machined\":\n        a, b = 4.51, -0.265\n        return a * (S_ut ** b)\n    else:\n        raise ValueError(f\"Unknown surface: {surface}\")\n\ndef k_size_bending(d_mm: float) - float:\n    if d_mm = 7.62:\n        return 1.0\n    return (d_mm / 7.62) ** (-0.107)\n\ndef design_matrix_restricted(x: np.ndarray, groups: np.ndarray, G: int) - np.ndarray:\n    # Columns: G intercepts (one-hot per group), 1 common slope column with x\n    N = x.size\n    X = np.zeros((N, G + 1))\n    for i in range(N):\n        g = groups[i]\n        X[i, g] = 1.0\n        X[i, -1] = x[i]\n    return X\n\ndef design_matrix_full(x: np.ndarray, groups: np.ndarray, G: int) - np.ndarray:\n    # Columns: G intercepts (one-hot), G slopes (x in group's slope column)\n    N = x.size\n    X = np.zeros((N, 2 * G))\n    for i in range(N):\n        g = groups[i]\n        X[i, g] = 1.0  # intercept for group g\n        X[i, G + g] = x[i]  # slope for group g\n    return X\n\ndef fit_least_squares(X: np.ndarray, y: np.ndarray):\n    beta, residuals, rank, s = np.linalg.lstsq(X, y, rcond=None)\n    # Compute RSS explicitly for numerical robustness if residuals empty\n    y_hat = X @ beta\n    rss = float(np.sum((y - y_hat) ** 2))\n    return beta, rss\n\ndef unified_slope_test(groups_data, S_ut: float, alpha: float = 0.05):\n    # groups_data: list of dicts with keys: 'd_mm', 'surface', 'N_array', 'S_meas'\n    # Apply corrections\n    x_list = []\n    y_list = []\n    g_list = []\n    for g_idx, gd in enumerate(groups_data):\n        d = gd['d_mm']\n        surf = gd['surface']\n        N_arr = np.array(gd['N_array'], dtype=float)\n        S_meas = np.array(gd['S_meas'], dtype=float)\n        k = k_size_bending(d) * k_surface(surf, S_ut)\n        S_eq = S_meas / k\n        x = np.log10(N_arr)\n        y = np.log10(S_eq)\n        x_list.append(x)\n        y_list.append(y)\n        g_list.append(np.full_like(x, g_idx, dtype=int))\n    x_all = np.concatenate(x_list)\n    y_all = np.concatenate(y_list)\n    g_all = np.concatenate(g_list)\n    G = len(groups_data)\n    N_tot = x_all.size\n\n    # Restricted model: group intercepts + common slope\n    Xr = design_matrix_restricted(x_all, g_all, G)\n    br, rss_r = fit_least_squares(Xr, y_all)\n    m_common = br[-1]\n    b_common = -m_common\n\n    # Full model: group intercepts + group slopes\n    Xf = design_matrix_full(x_all, g_all, G)\n    bf, rss_f = fit_least_squares(Xf, y_all)\n\n    # F-test\n    df1 = G - 1\n    df2 = N_tot - 2 * G\n    # Handle edge cases for zero or near-zero rss_f\n    eps = 1e-15\n    if rss_f  eps:\n        if rss_r = rss_f + eps:\n            F_stat = 0.0\n            p_val = 1.0\n        else:\n            F_stat = float('inf')\n            p_val = 0.0\n    else:\n        num = (rss_r - rss_f) / df1\n        den = rss_f / df2\n        # If numerical noise leads to negative numerator small magnitude, clamp\n        if num  0 and abs(num)  1e-14:\n            num = 0.0\n        F_stat = num / den if den  0 else float('inf')\n        # Survival function for right tail\n        p_val = float(f_dist.sf(F_stat, df1, df2)) if np.isfinite(F_stat) else 0.0\n\n    decision = (p_val = alpha)\n    return b_common, F_stat, p_val, decision\n\ndef solve():\n    # Define the three test cases exactly as specified\n    S_ut_all = 900.0  # MPa for all test cases\n\n    # Test Case 1\n    tc1_groups = [\n        {\n            'd_mm': 10.0,\n            'surface': 'ground',\n            'N_array': [1e5, 3e5, 1e6, 3e6, 1e7],\n            'S_meas': [323.5, 293.2, 261.7, 233.5, 206.1],\n        },\n        {\n            'd_mm': 30.0,\n            'surface': 'machined',\n            'N_array': [2e5, 6e5, 2e6, 6e6],\n            'S_meas': [226.2, 205.0, 182.7, 162.2],\n        },\n    ]\n\n    # Test Case 2\n    tc2_groups = [\n        {\n            'd_mm': 10.0,\n            'surface': 'ground',\n            'N_array': [1e5, 3e5, 1e6, 3e6, 1e7],\n            'S_meas': [323.5, 293.2, 261.7, 233.5, 206.1],\n        },\n        {\n            'd_mm': 30.0,\n            'surface': 'machined',\n            'N_array': [2e5, 6e5, 2e6, 6e6],\n            'S_meas': [122.6, 105.8, 88.1, 74.1],\n        },\n    ]\n\n    # Test Case 3\n    tc3_groups = [\n        {\n            'd_mm': 10.0,\n            'surface': 'ground',\n            'N_array': [1e5, 3e5, 1e6, 3e6, 1e7],\n            'S_meas': [288.3, 257.1, 227.9, 201.6, 174.5],\n        },\n        {\n            'd_mm': 30.0,\n            'surface': 'machined',\n            'N_array': [2e5, 6e5, 2e6, 6e6],\n            'S_meas': [177.6, 157.7, 136.5, 118.2],\n        },\n    ]\n\n    test_cases = [tc1_groups, tc2_groups, tc3_groups]\n\n    results = []\n    for groups in test_cases:\n        b_common, F_stat, p_val, decision = unified_slope_test(groups, S_ut=S_ut_all, alpha=0.05)\n        # Format floats with reasonable precision but keep raw values\n        results.append([b_common, F_stat, p_val, decision])\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "2915834"}]}