{"hands_on_practices": [{"introduction": "The remarkable properties of architected materials originate from their carefully designed internal geometry. This exercise provides a foundational hands-on experience in one of the most powerful methods for predicting these properties: homogenization using the direct stiffness method [@problem_id:2901571]. By deriving the stiffness matrix for a single beam element from first principles and assembling it for a complete unit cell, you will directly compute an effective macroscopic property, the shear modulus $G_{\\text{eff}}$, solidifying the link between microstructural mechanics and overall material behavior.", "problem": "A two-dimensional square lattice unit cell is a rigidly jointed frame composed of four identical slender beams forming a square of side length $L$. Each beam has Young’s modulus $E$, cross-sectional area $A$, and second moment of area $I$ about the out-of-plane axis; all beams are slender so that Euler–Bernoulli beam theory applies. The beams lie in the $x$–$y$ plane, and joints at the corners enforce continuity of planar displacements and in-plane rotations. Assume plane sections remain plane and shear deformation is negligible. Degrees of Freedom (DOF) at each node are the in-plane axial displacement $u$, the in-plane transverse displacement $v$, and the in-plane rotation $\\theta$ about the out-of-plane axis (positive counterclockwise, measured in radians).\n\nTask 1. Starting from the Euler–Bernoulli kinematics and the principle of virtual work, derive the two-node planar Euler–Bernoulli beam element stiffness matrix in the local element coordinate system, with nodal DOFs ordered as $\\left(u_{1}, v_{1}, \\theta_{1}, u_{2}, v_{2}, \\theta_{2}\\right)$, where subscripts $1$ and $2$ denote the element ends and local $x$ is along the beam axis. Your derivation must proceed from the strain energy functional and suitable interpolation (linear for axial displacement and cubic Hermite for transverse displacement), and must include axial, bending, and rotational coupling terms.\n\nTask 2. Consider the square unit cell with corner nodes labeled counterclockwise as $1:(0,0)$, $2:(L,0)$, $3:(L,L)$, and $4:(0,L)$. Assemble the $12 \\times 12$ global stiffness matrix $K_{\\text{uc}}$ for the unit cell by connecting four such elements: bottom $(1$–$2)$, right $(2$–$3)$, top $(4$–$3)$, and left $(1$–$4)$. Use appropriate direction cosine transformations to place each element stiffness in global axes $(x,y)$.\n\nTask 3. Impose a macroscopic simple shear deformation on the unit cell by prescribing nodal displacements and rotations as follows: at the bottom edge nodes $1$ and $2$, set $u=0$, $v=0$, and $\\theta=0$; at the top edge nodes $3$ and $4$, set $u=\\gamma L$, $v=0$, and $\\theta=0$, where $\\gamma$ is the applied macroscopic engineering shear strain. These boundary conditions are chosen to be compatible with periodicity along vertical edges and to eliminate rigid-body rotation of the unit cell. Using the assembled stiffness, compute the total horizontal reaction force $R$ supported by the top edge (equal to the sum of the $x$-direction reactions at nodes $3$ and $4$).\n\nDefine the homogenized effective shear modulus of the square lattice as\n$$\nG_{\\text{eff}} \\equiv \\frac{\\tau}{\\gamma}, \\quad \\text{with} \\quad \\tau \\equiv \\frac{R}{L},\n$$\nwhere $\\tau$ is the average macroscopic shear stress on the top edge. Express the final answer for $G_{\\text{eff}}$ as a single closed-form analytic expression in terms of $E$, $I$, and $L$. Express $G_{\\text{eff}}$ in Pascals. No numerical substitution is required, and no rounding is needed. Rotations are understood to be measured in radians.", "solution": "The problem as stated is scientifically grounded, well-posed, and objective. It is based on established principles of linear elasticity and structural mechanics, specifically Euler-Bernoulli beam theory and the direct stiffness method. The provided data, boundary conditions, and definitions are self-contained and sufficient to obtain a unique, meaningful solution for the effective shear modulus. The problem is a standard exercise in the mechanics of architected materials and is a valid inquiry. I will proceed with the solution.\n\nThe solution is organized into three parts, corresponding to the tasks in the problem statement.\n\nTask 1: Derivation of the Planar Beam Element Stiffness Matrix\n\nWe begin from the principle of virtual work, which equates the internal virtual work to the external virtual work. For a conservative system, the stiffness matrix can be derived from the strain energy functional $U$. The total strain energy in an Euler-Bernoulli beam element of length $L_e$ is the sum of the energy from axial deformation and bending deformation.\n$$\nU = U_{\\text{axial}} + U_{\\text{bending}} = \\frac{1}{2} \\int_{0}^{L_e} E A [\\epsilon_{xx}(x)]^2 dx + \\frac{1}{2} \\int_{0}^{L_e} E I [\\kappa(x)]^2 dx\n$$\nwhere $E$ is Young's modulus, $A$ is the cross-sectional area, $I$ is the second moment of area, $\\epsilon_{xx}$ is the axial strain, and $\\kappa$ is the curvature. The local coordinate along the beam is $x$. The nodal degrees of freedom (DOFs) for the element are given by the vector $d' = (u_1, v_1, \\theta_1, u_2, v_2, \\theta_2)^T$.\n\nFor axial deformation, the displacement field $u(x)$ is interpolated linearly between the two nodes.\n$$\nu(x) = (1 - \\frac{x}{L_e})u_1 + (\\frac{x}{L_e})u_2\n$$\nThe axial strain is the spatial derivative of the displacement:\n$$\n\\epsilon_{xx}(x) = \\frac{du}{dx} = \\frac{1}{L_e}(-u_1 + u_2)\n$$\nThe axial strain is constant along the element. The axial strain energy is:\n$$\nU_{\\text{axial}} = \\frac{1}{2} \\int_{0}^{L_e} EA \\left(\\frac{u_2 - u_1}{L_e}\\right)^2 dx = \\frac{EA}{2L_e}(u_2 - u_1)^2\n$$\n\nFor bending deformation, the transverse displacement field $v(x)$ is interpolated using cubic Hermite shape functions to ensure continuity of displacements and rotations at the nodes.\n$$\nv(x) = H_1(x)v_1 + H_2(x)\\theta_1 + H_3(x)v_2 + H_4(x)\\theta_2\n$$\nwhere the shape functions are:\n$H_1(x) = 1 - 3\\left(\\frac{x}{L_e}\\right)^2 + 2\\left(\\frac{x}{L_e}\\right)^3$\n$H_2(x) = x\\left(1 - \\frac{x}{L_e}\\right)^2 = x - 2\\frac{x^2}{L_e} + \\frac{x^3}{L_e^2}$\n$H_3(x) = 3\\left(\\frac{x}{L_e}\\right)^2 - 2\\left(\\frac{x}{L_e}\\right)^3$\n$H_4(x) = \\frac{x^2}{L_e}\\left(\\frac{x}{L_e} - 1\\right) = \\frac{x^3}{L_e^2} - \\frac{x^2}{L_e}$\nThe curvature is given by $\\kappa(x) = \\frac{d^2v}{dx^2}$.\n$$\n\\kappa(x) = \\frac{d^2H_1}{dx^2}v_1 + \\frac{d^2H_2}{dx^2}\\theta_1 + \\frac{d^2H_3}{dx^2}v_2 + \\frac{d^2H_4}{dx^2}\\theta_2\n$$\nThe bending strain energy is then $U_{\\text{bending}} = \\frac{1}{2} d_{\\text{bend}}'^T k'_{\\text{bend}} d_{\\text{bend}}'$, where $d_{\\text{bend}}' = (v_1, \\theta_1, v_2, \\theta_2)^T$ and the components of the bending stiffness matrix $k'_{\\text{bend}}$ are found by integrating the products of the second derivatives of the shape functions: $(k'_{\\text{bend}})_{ij} = \\int_0^{L_e} EI \\left(\\frac{d^2 H_i}{dx^2}\\right)\\left(\\frac{d^2 H_j}{dx^2}\\right) dx$.\n\nThe element stiffness matrix $k'$ relates the nodal forces $f'$ to the nodal displacements $d'$ by $f' = k' d'$. Its components are given by the second partial derivatives of the total strain energy with respect to the nodal DOFs: $k'_{ij} = \\frac{\\partial^2 U}{\\partial d'_i \\partial d'_j}$.\nSince $U = U_{\\text{axial}} + U_{\\text{bending}}$, and $U_{\\text{axial}}$ depends only on $u_1, u_2$ while $U_{\\text{bending}}$ depends only on $v_1, \\theta_1, v_2, \\theta_2$, there is no coupling between axial and bending behavior in the local coordinate system for a linear Euler-Bernoulli beam. The resulting $6 \\times 6$ local stiffness matrix $k'$ is block-diagonal. For a beam of length $L$, it is:\n$$\nk' = \\begin{pmatrix}\n\\frac{EA}{L} & 0 & 0 & -\\frac{EA}{L} & 0 & 0 \\\\\n0 & \\frac{12EI}{L^3} & \\frac{6EI}{L^2} & 0 & -\\frac{12EI}{L^3} & \\frac{6EI}{L^2} \\\\\n0 & \\frac{6EI}{L^2} & \\frac{4EI}{L} & 0 & -\\frac{6EI}{L^2} & \\frac{2EI}{L} \\\\\n-\\frac{EA}{L} & 0 & 0 & \\frac{EA}{L} & 0 & 0 \\\\\n0 & -\\frac{12EI}{L^3} & -\\frac{6EI}{L^2} & 0 & \\frac{12EI}{L^3} & -\\frac{6EI}{L^2} \\\\\n0 & \\frac{6EI}{L^2} & \\frac{2EI}{L} & 0 & -\\frac{6EI}{L^2} & \\frac{4EI}{L}\n\\end{pmatrix}\n$$\n\nTask 2: Assembly of the Global Stiffness Matrix $K_{\\text{uc}}$\n\nThe unit cell consists of four beams of length $L$. The global stiffness matrix $K_{\\text{uc}}$ is a $12 \\times 12$ matrix corresponding to the DOFs of the four nodes, ordered as $(u_1,v_1,\\theta_1, u_2,v_2,\\theta_2, u_3,v_3,\\theta_3, u_4,v_4,\\theta_4)^T$. To assemble $K_{\\text{uc}}$, each element's local stiffness matrix $k'$ must be transformed to the global coordinate system. The global element stiffness matrix $K^{(e)}$ is given by $K^{(e)} = T^T k' T$, where $T$ is the rotation matrix.\n$$\nT = \\begin{pmatrix} R_m & 0 \\\\ 0 & R_m \\end{pmatrix}, \\quad \\text{with} \\quad R_m = \\begin{pmatrix} c & s & 0 \\\\ -s & c & 0 \\\\ 0 & 0 & 1 \\end{pmatrix}\n$$\nHere, $c = \\cos(\\alpha)$ and $s = \\sin(\\alpha)$, where $\\alpha$ is the angle from the global $x$-axis to the element's local $x$-axis.\n\n1.  Beam 1-2 (bottom): from $(0,0)$ to $(L,0)$. $\\alpha=0$, so $c=1, s=0$. $T=I$, the identity matrix. The global stiffness matrix for this element, $K^{(1-2)}$, is simply $k'$.\n2.  Beam 2-3 (right): from $(L,0)$ to $(L,L)$. $\\alpha=\\pi/2$, so $c=0, s=1$. The transformation gives a matrix $K^{(2-3)}$ where axial and bending terms are interchanged relative to $k'$.\n3.  Beam 4-3 (top): from $(0,L)$ to $(L,L)$. $\\alpha=0$, so $c=1, s=0$. $T=I$. The global stiffness matrix for this element, $K^{(4-3)}$, is $k'$. Note the connectivity is from node 4 to node 3.\n4.  Beam 1-4 (left): from $(0,0)$ to $(0,L)$. $\\alpha=\\pi/2$, so $c=0, s=1$. The global matrix $K^{(1-4)}$ is identical in form to $K^{(2-3)}$.\n\nThe global matrix $K_{\\text{uc}}$ is assembled by summing the contributions of these four element matrices into the appropriate rows and columns corresponding to their node numbers.\n\nTask 3: Calculation of Effective Shear Modulus $G_{\\text{eff}}$\n\nThe problem specifies a macroscopic pure shear deformation. The prescribed displacement vector $d$ is:\n$$\nd^T = (u_1, v_1, \\theta_1, u_2, v_2, \\theta_2, u_3, v_3, \\theta_3, u_4, v_4, \\theta_4) = (0, 0, 0, 0, 0, 0, \\gamma L, 0, 0, \\gamma L, 0, 0)\n$$\nThe reaction force vector $F$ is given by $F = K_{\\text{uc}} d$. We seek the total horizontal reaction force $R$ on the top edge, which is the sum of the $x$-direction forces at nodes $3$ and $4$, i.e., $R = F_{3x} + F_{4x}$. These are the $7^{th}$ and $10^{th}$ components of $F$.\n$$\nF_{3x} = (K_{\\text{uc}})_{7,1} d_1 + \\dots + (K_{\\text{uc}})_{7,12} d_{12}\n$$\n$$\nF_{4x} = (K_{\\text{uc}})_{10,1} d_1 + \\dots + (K_{\\text{uc}})_{10,12} d_{12}\n$$\nGiven that only $d_7 = u_3 = \\gamma L$ and $d_{10} = u_4 = \\gamma L$ are non-zero, the expressions simplify to:\n$$\nF_{3x} = (K_{\\text{uc}})_{7,7} u_3 + (K_{\\text{uc}})_{7,10} u_4 = ((K_{\\text{uc}})_{7,7} + (K_{\\text{uc}})_{7,10}) \\gamma L\n$$\n$$\nF_{4x} = (K_{\\text{uc}})_{10,7} u_3 + (K_{\\text{uc}})_{10,10} u_4 = ((K_{\\text{uc}})_{10,7} + (K_{\\text{uc}})_{10,10}) \\gamma L\n$$\nThe required matrix components are assembled from the element contributions:\n- $(K_{\\text{uc}})_{7,7}$ is the $u_3-u_3$ stiffness. Node $3$ connects to beam 2-3 (vertical, end 2) and beam 4-3 (horizontal, end 2). $(K_{\\text{uc}})_{7,7} = (K^{(2-3)}_{22})_{11} + (K^{(4-3)}_{22})_{11} = \\frac{12EI}{L^3} + \\frac{EA}{L}$.\n- $(K_{\\text{uc}})_{10,10}$ is the $u_4-u_4$ stiffness. Node $4$ connects to beam 1-4 (vertical, end 2) and beam 4-3 (horizontal, end 1). $(K_{\\text{uc}})_{10,10} = (K^{(1-4)}_{22})_{11} + (K^{(4-3)}_{11})_{11} = \\frac{12EI}{L^3} + \\frac{EA}{L}$.\n- $(K_{\\text{uc}})_{7,10}$ is the $u_3-u_4$ coupling. This comes only from beam 4-3 connecting nodes 4 (end 1) and 3 (end 2). $(K_{\\text{uc}})_{7,10} = (K^{(4-3)}_{21})_{11} = -\\frac{EA}{L}$.\n- $(K_{\\text{uc}})_{10,7} = (K_{\\text{uc}})_{7,10}^T = -\\frac{EA}{L}$.\n\nSubstituting these into the force equations:\n$$\nF_{3x} = \\left( \\left(\\frac{12EI}{L^3} + \\frac{EA}{L}\\right) + \\left(-\\frac{EA}{L}\\right) \\right) \\gamma L = \\frac{12EI\\gamma}{L^2}\n$$\n$$\nF_{4x} = \\left( \\left(-\\frac{EA}{L}\\right) + \\left(\\frac{12EI}{L^3} + \\frac{EA}{L}\\right) \\right) \\gamma L = \\frac{12EI\\gamma}{L^2}\n$$\nCrucially, the axial stiffness terms $EA/L$ cancel out. This is physically consistent, as the imposed deformation ensures no member undergoes axial strain. The total horizontal reaction force is:\n$$\nR = F_{3x} + F_{4x} = \\frac{12EI\\gamma}{L^2} + \\frac{12EI\\gamma}{L^2} = \\frac{24EI\\gamma}{L^2}\n$$\nThe macroscopic shear stress $\\tau$ is defined as $\\tau = R/L$.\n$$\n\\tau = \\frac{1}{L} \\left( \\frac{24EI\\gamma}{L^2} \\right) = \\frac{24EI\\gamma}{L^3}\n$$\nFinally, the effective shear modulus $G_{\\text{eff}}$ is defined as $\\tau/\\gamma$.\n$$\nG_{\\text{eff}} = \\frac{\\tau}{\\gamma} = \\frac{1}{\\gamma} \\left( \\frac{24EI\\gamma}{L^3} \\right) = \\frac{24EI}{L^3}\n$$\nThe units of this expression are $(N/m^2)(m^4)/(m^3) = N/m^2$, or Pascals, as required.", "answer": "$$\n\\boxed{\\frac{24EI}{L^3}}\n$$", "id": "2901571"}, {"introduction": "While analytical models provide deep insight, the complexity of real-world metamaterials often necessitates computational tools like the Finite Element Method. However, simulations are not without their pitfalls, especially for the slender structures common in metamaterials [@problem_id:2901670]. This practical coding exercise tasks you with modeling numerical pathologies like shear locking and hourglassing, teaching you to critically assess when a chosen discretization scheme might yield non-physical results and to quantify the error in predicted effective properties.", "problem": "You must write a program that compares three common finite element discretization families used to model a periodic slender-strut lattice and determines when numerical pathologies contaminate the predicted effective stiffness. The lattice is a simple-cubic array of parallel cylindrical struts aligned with the loading axis, with unit-cell size $a$ and strut radius $r$. The constituent material has Young’s modulus $E_s$. The macroscopic effective modulus along the strut direction, denoted $E_{\\mathrm{eff,true}}$, must be derived from first principles by homogenization under uniaxial strain along the strut direction. Treat the structure as a parallel array of axially loaded bars distributed with spacing $a$ in the transverse directions.\n\nFundamental base and assumptions to use:\n- Balance of forces and definition of stress: $\\sigma = F/A$.\n- Axial stiffness of a prismatic bar: $k = E A / L$.\n- Volume fraction for a parallel array of bars of cross-sectional area $A_b$ distributed one per area $a^2$: $\\phi = A_b / a^2$.\n- Effective modulus of a composite made of parallel axially loaded bars with volume fraction $\\phi$: $E_{\\mathrm{eff,true}} = \\phi E_s$.\n- For a cylindrical strut, the cross-sectional area is $A_b = \\pi r^2$.\nFrom these bases, derive $E_{\\mathrm{eff,true}}$ in terms of $E_s$, $r$, and $a$, and compute it in gigapascals (GPa). Explicitly express $E_{\\mathrm{eff,true}}$ in GPa and use $r$ and $a$ in millimeters (mm) wherever they appear, consistently.\n\nYou must then compare three discretization families, each with a single non-dimensionalized error model for the predicted effective modulus $E_{\\mathrm{eff,pred}}$ relative to $E_{\\mathrm{eff,true}}$. A discretization is considered “contaminated” if the magnitude of the relative error exceeds a tolerance $\\varepsilon_{\\mathrm{tol}}$.\n\nDefinitions and modeling for contamination:\n- Define the strut slenderness as $\\lambda = L/t$, with $L = a$ and $t = 2 r$, so that $\\lambda = a/(2 r)$.\n- Let $n_e$ be the number of elements per strut length $L$ in the load direction for shell or solid discretizations, modeled as evenly sized elements.\n\nYou must adopt the following contamination scaling models, which are motivated by kinematic constraints and interpolation error in first-order elements:\n1. Beam discretization (Euler–Bernoulli-compatible axial bar idealization):\n   - Assumption: no parasitic shear; predicted axial response equals the axial bar response.\n   - Relative error is identically zero: $\\delta_{\\mathrm{beam}} = 0$.\n2. Shell discretization (first-order shear deformation, Mindlin–Reissner type) with low-order interpolation:\n   - Parasitic shear locking in the thin limit introduces overstiffness that scales with the square of slenderness and is mitigated by refinement:\n   - Use $\\delta_{\\mathrm{shell}} = \\min\\!\\left(\\alpha_s \\dfrac{\\lambda^2}{n_e}, \\delta_{\\mathrm{shell,max}}\\right)$, with $\\alpha_s = 2 \\times 10^{-3}$ and $\\delta_{\\mathrm{shell,max}} = 0.6$.\n3. Solid discretization:\n   - Full integration, low-order solid elements:\n     - Shear/bending locking analogue modeled as $\\delta_{\\mathrm{solid,full}} = \\min\\!\\left(\\alpha_f \\dfrac{\\lambda^2}{n_e}, \\delta_{\\mathrm{full,max}}\\right)$, with $\\alpha_f = 8 \\times 10^{-4}$ and $\\delta_{\\mathrm{full,max}} = 0.4$.\n   - Reduced integration, low-order solid elements:\n     - Hourglassing induces under-stiffness that decays with refinement:\n     - Use $\\delta_{\\mathrm{solid,red}} = - \\min\\!\\left(\\dfrac{\\gamma_h}{n_e^p}, \\delta_{\\mathrm{red,max}}\\right)$ with $\\gamma_h = 0.3$, $p = 1$, and $\\delta_{\\mathrm{red,max}} = 0.3$.\n\nFor each discretization, the predicted effective modulus is $E_{\\mathrm{eff,pred}} = E_{\\mathrm{eff,true}} \\left(1 + \\delta\\right)$. A discretization is “contaminated” if $\\left|\\delta\\right| > \\varepsilon_{\\mathrm{tol}}$, where $\\varepsilon_{\\mathrm{tol}} = 0.05$.\n\nAngle units do not apply. Physical units: express $E_s$ and $E_{\\mathrm{eff,true}}$ and $E_{\\mathrm{eff,pred}}$ in gigapascals (GPa). All geometric inputs $a$ and $r$ are in millimeters (mm). The contamination decision is dimensionless.\n\nImplement a program that, for each test case, computes:\n- $E_{\\mathrm{eff,true}}$ in GPa,\n- for each discretization family, the relative error $\\delta$ and the contamination boolean,\n- the total count of contaminated discretizations among the $4$ considered families: beam, shell, solid with full integration, and solid with reduced integration.\n\nTest suite:\nUse the following five test cases, each given as a tuple $(E_s\\ \\mathrm{[GPa]}, a\\ \\mathrm{[mm]}, r\\ \\mathrm{[mm]}, n_e)$:\n- Case $1$: $(70, 10, 0.1, 1)$\n- Case $2$: $(70, 10, 0.1, 4)$\n- Case $3$: $(70, 10, 1.0, 1)$\n- Case $4$: $(70, 10, 0.3, 2)$\n- Case $5$: $(70, 20, 0.1, 2)$\n\nFinal output format:\nYour program should produce a single line of output containing a Python-style list of integers, where each integer is the count of contaminated discretizations for the corresponding test case in the order given above. For example, your output must have the format $[c_1,c_2,c_3,c_4,c_5]$ with no spaces, where each $c_i$ is an integer.", "solution": "The problem statement undergoes validation before any solution is attempted.\n\nFirst, the givens and conditions are extracted verbatim from the problem statement.\n- Lattice geometry: A simple-cubic array of parallel cylindrical struts.\n- Unit-cell size: $a$.\n- Strut radius: $r$.\n- Constituent material Young's modulus: $E_s$.\n- Effective modulus to be determined: $E_{\\mathrm{eff,true}}$.\n- Loading condition for homogenization: Uniaxial strain along the strut direction.\n- Foundational principles: Balance of forces and stress definition, $\\sigma = F/A$; axial stiffness of a prismatic bar, $k = E A / L$; volume fraction for a parallel array of bars, $\\phi = A_b / a^2$; effective modulus based on rule of mixtures, $E_{\\mathrm{eff,true}} = \\phi E_s$.\n- Strut cross-sectional area: $A_b = \\pi r^2$.\n- Units: $E_s$ in GPa; $r$ and $a$ in mm.\n- Strut slenderness: $\\lambda = a/(2r)$.\n- Discretization density: $n_e$ elements per strut length.\n- Relative error models for predicted modulus $E_{\\mathrm{eff,pred}} = E_{\\mathrm{eff,true}}(1+\\delta)$:\n    1. Beam discretization: $\\delta_{\\mathrm{beam}} = 0$.\n    2. Shell discretization (Mindlin-Reissner type): $\\delta_{\\mathrm{shell}} = \\min(\\alpha_s \\dfrac{\\lambda^2}{n_e}, \\delta_{\\mathrm{shell,max}})$ with $\\alpha_s = 2 \\times 10^{-3}$ and $\\delta_{\\mathrm{shell,max}} = 0.6$.\n    3. Solid discretization (full integration): $\\delta_{\\mathrm{solid,full}} = \\min(\\alpha_f \\dfrac{\\lambda^2}{n_e}, \\delta_{\\mathrm{full,max}})$ with $\\alpha_f = 8 \\times 10^{-4}$ and $\\delta_{\\mathrm{full,max}} = 0.4$.\n    4. Solid discretization (reduced integration): $\\delta_{\\mathrm{solid,red}} = - \\min(\\dfrac{\\gamma_h}{n_e^p}, \\delta_{\\mathrm{red,max}})$ with $\\gamma_h = 0.3$, $p = 1$, and $\\delta_{\\mathrm{red,max}} = 0.3$.\n- Contamination criterion: A discretization is considered \"contaminated\" if the magnitude of its relative error, $|\\delta|$, exceeds a tolerance $\\varepsilon_{\\mathrm{tol}} = 0.05$.\n- Test cases $(E_s, a, r, n_e)$: Case $1$: $(70, 10, 0.1, 1)$, Case $2$: $(70, 10, 0.1, 4)$, Case $3$: $(70, 10, 1.0, 1)$, Case $4$: $(70, 10, 0.3, 2)$, Case $5$: $(70, 20, 0.1, 2)$.\n\nNext, the validity of the problem is assessed against the required criteria.\n- **Scientifically Grounded**: The problem is well-grounded in the mechanics of materials and computational mechanics. The homogenization approach for a simple parallel strut lattice via the rule of mixtures is a standard, correct elementary procedure. The error models, while phenomenological, correctly represent the qualitative behavior of common finite element pathologies: parasitic shear locking in shell and solid elements (overstiffness scaling with slenderness squared, mitigated by mesh refinement) and hourglassing in reduced integration elements (understiffness, mitigated by mesh refinement). The parameter values are given and assumed to be empirically determined, which is a valid modeling approach.\n- **Well-Posed**: The problem is fully specified. All necessary parameters, constants, and formulas are provided to compute a unique result for each test case.\n- **Objective**: The problem is stated using precise, technical terminology without subjective or ambiguous language.\n\nThe problem does not exhibit any of the enumerated invalidity flaws. It is scientifically sound, formalizable, complete, and well-posed. The data provided are physically and dimensionally consistent. The units are specified, and the conversion is trivial, as the ratio of lengths $(r/a)$ is dimensionless. Thus, if $E_s$ is in GPa, $E_{\\mathrm{eff,true}}$ will naturally be in GPa.\n\nThe verdict is that the problem is **valid**. A solution will be developed.\n\nThe solution proceeds by first principles as directed. The lattice structure is a parallel array of struts. Under uniaxial strain along the strut axis, each strut behaves as an independent axially loaded bar. The effective modulus of such a composite is given by the rule of mixtures.\n\nThe volume fraction, $\\phi$, of the struts is the ratio of the strut cross-sectional area, $A_b$, to the unit-cell cross-sectional area, $A_{cell} = a^2$.\n$$ \\phi = \\frac{A_b}{A_{cell}} = \\frac{\\pi r^2}{a^2} = \\pi \\left(\\frac{r}{a}\\right)^2 $$\nThe true effective modulus, $E_{\\mathrm{eff,true}}$, is then derived from the rule of mixtures:\n$$ E_{\\mathrm{eff,true}} = \\phi E_s = E_s \\pi \\left(\\frac{r}{a}\\right)^2 $$\nAs required, if $E_s$ is given in units of GPa, and $r$ and $a$ are in mm, the ratio $(r/a)^2$ is dimensionless, so $E_{\\mathrm{eff,true}}$ will be computed in GPa.\n\nThe strut slenderness, $\\lambda$, is defined as the ratio of its length, $L=a$, to its thickness, $t=2r$:\n$$ \\lambda = \\frac{a}{2r} $$\n\nThe contamination analysis for each of the four discretization families is based on the provided error models and the tolerance $\\varepsilon_{\\mathrm{tol}} = 0.05$. A discretization is contaminated if $|\\delta| > 0.05$.\n\nThe four error models are:\n1.  Beam: $\\delta_{\\mathrm{beam}} = 0$. Since $|\\delta_{\\mathrm{beam}}| = 0$, which is not greater than $0.05$, this model is never contaminated.\n2.  Shell: $\\delta_{\\mathrm{shell}} = \\min(0.002 \\frac{\\lambda^2}{n_e}, 0.6)$. Contamination occurs if $\\delta_{\\mathrm{shell}} > 0.05$.\n3.  Solid (full integration): $\\delta_{\\mathrm{solid,full}} = \\min(0.0008 \\frac{\\lambda^2}{n_e}, 0.4)$. Contamination occurs if $\\delta_{\\mathrm{solid,full}} > 0.05$.\n4.  Solid (reduced integration): $\\delta_{\\mathrm{solid,red}} = - \\min(\\frac{0.3}{n_e}, 0.3)$ since $p=1$. Contamination occurs if $|\\delta_{\\mathrm{solid,red}}| > 0.05$, which is equivalent to $\\min(\\frac{0.3}{n_e}, 0.3) > 0.05$.\n\nWe will now process each test case.\n\n**Case 1**: $(E_s=70\\ \\mathrm{GPa}, a=10\\ \\mathrm{mm}, r=0.1\\ \\mathrm{mm}, n_e=1)$\n- Slenderness: $\\lambda = \\frac{10}{2 \\times 0.1} = 50$.\n- Errors:\n    - $\\delta_{\\mathrm{beam}} = 0$. $|\\delta| = 0 \\ngtr 0.05$. Not contaminated.\n    - $\\delta_{\\mathrm{shell}} = \\min(0.002 \\times \\frac{50^2}{1}, 0.6) = \\min(5.0, 0.6) = 0.6$. $|\\delta| = 0.6 > 0.05$. Contaminated.\n    - $\\delta_{\\mathrm{solid,full}} = \\min(0.0008 \\times \\frac{50^2}{1}, 0.4) = \\min(2.0, 0.4) = 0.4$. $|\\delta| = 0.4 > 0.05$. Contaminated.\n    - $\\delta_{\\mathrm{solid,red}} = -\\min(\\frac{0.3}{1}, 0.3) = -0.3$. $|\\delta| = 0.3 > 0.05$. Contaminated.\n- Total contaminated: $3$.\n\n**Case 2**: $(E_s=70\\ \\mathrm{GPa}, a=10\\ \\mathrm{mm}, r=0.1\\ \\mathrm{mm}, n_e=4)$\n- Slenderness: $\\lambda = \\frac{10}{2 \\times 0.1} = 50$.\n- Errors:\n    - $\\delta_{\\mathrm{beam}} = 0$. Not contaminated.\n    - $\\delta_{\\mathrm{shell}} = \\min(0.002 \\times \\frac{50^2}{4}, 0.6) = \\min(1.25, 0.6) = 0.6$. $|\\delta| = 0.6 > 0.05$. Contaminated.\n    - $\\delta_{\\mathrm{solid,full}} = \\min(0.0008 \\times \\frac{50^2}{4}, 0.4) = \\min(0.5, 0.4) = 0.4$. $|\\delta| = 0.4 > 0.05$. Contaminated.\n    - $\\delta_{\\mathrm{solid,red}} = -\\min(\\frac{0.3}{4}, 0.3) = -0.075$. $|\\delta| = 0.075 > 0.05$. Contaminated.\n- Total contaminated: $3$.\n\n**Case 3**: $(E_s=70\\ \\mathrm{GPa}, a=10\\ \\mathrm{mm}, r=1.0\\ \\mathrm{mm}, n_e=1)$\n- Slenderness: $\\lambda = \\frac{10}{2 \\times 1.0} = 5$.\n- Errors:\n    - $\\delta_{\\mathrm{beam}} = 0$. Not contaminated.\n    - $\\delta_{\\mathrm{shell}} = \\min(0.002 \\times \\frac{5^2}{1}, 0.6) = \\min(0.05, 0.6) = 0.05$. $|\\delta| = 0.05 \\ngtr 0.05$. Not contaminated.\n    - $\\delta_{\\mathrm{solid,full}} = \\min(0.0008 \\times \\frac{5^2}{1}, 0.4) = \\min(0.02, 0.4) = 0.02$. $|\\delta| = 0.02 \\ngtr 0.05$. Not contaminated.\n    - $\\delta_{\\mathrm{solid,red}} = -\\min(\\frac{0.3}{1}, 0.3) = -0.3$. $|\\delta| = 0.3 > 0.05$. Contaminated.\n- Total contaminated: $1$.\n\n**Case 4**: $(E_s=70\\ \\mathrm{GPa}, a=10\\ \\mathrm{mm}, r=0.3\\ \\mathrm{mm}, n_e=2)$\n- Slenderness: $\\lambda = \\frac{10}{2 \\times 0.3} = \\frac{10}{0.6} \\approx 16.67$.\n- Errors:\n    - $\\delta_{\\mathrm{beam}} = 0$. Not contaminated.\n    - $\\delta_{\\mathrm{shell}} = \\min(0.002 \\times \\frac{(16.67)^2}{2}, 0.6) \\approx \\min(0.278, 0.6) = 0.278$. $|\\delta| = 0.278 > 0.05$. Contaminated.\n    - $\\delta_{\\mathrm{solid,full}} = \\min(0.0008 \\times \\frac{(16.67)^2}{2}, 0.4) \\approx \\min(0.111, 0.4) = 0.111$. $|\\delta| = 0.111 > 0.05$. Contaminated.\n    - $\\delta_{\\mathrm{solid,red}} = -\\min(\\frac{0.3}{2}, 0.3) = -0.15$. $|\\delta| = 0.15 > 0.05$. Contaminated.\n- Total contaminated: $3$.\n\n**Case 5**: $(E_s=70\\ \\mathrm{GPa}, a=20\\ \\mathrm{mm}, r=0.1\\ \\mathrm{mm}, n_e=2)$\n- Slenderness: $\\lambda = \\frac{20}{2 \\times 0.1} = 100$.\n- Errors:\n    - $\\delta_{\\mathrm{beam}} = 0$. Not contaminated.\n    - $\\delta_{\\mathrm{shell}} = \\min(0.002 \\times \\frac{100^2}{2}, 0.6) = \\min(10.0, 0.6) = 0.6$. $|\\delta| = 0.6 > 0.05$. Contaminated.\n    - $\\delta_{\\mathrm{solid,full}} = \\min(0.0008 \\times \\frac{100^2}{2}, 0.4) = \\min(4.0, 0.4) = 0.4$. $|\\delta| = 0.4 > 0.05$. Contaminated.\n    - $\\delta_{\\mathrm{solid,red}} = -\\min(\\frac{0.3}{2}, 0.3) = -0.15$. $|\\delta| = 0.15 > 0.05$. Contaminated.\n- Total contaminated: $3$.\n\nThe final list of contamination counts for the five test cases is $[3, 3, 1, 3, 3]$. The implementation will follow this logic.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes the number of contaminated finite element discretization families\n    for several test cases of a periodic slender-strut lattice.\n    \"\"\"\n\n    # Define the test cases from the problem statement.\n    # Each tuple is (E_s [GPa], a [mm], r [mm], n_e)\n    test_cases = [\n        (70, 10, 0.1, 1),\n        (70, 10, 0.1, 4),\n        (70, 10, 1.0, 1),\n        (70, 10, 0.3, 2),\n        (70, 20, 0.1, 2),\n    ]\n\n    # Constants from problem statement\n    epsilon_tol = 0.05\n\n    # Parameters for shell model\n    alpha_s = 2e-3\n    delta_shell_max = 0.6\n\n    # Parameters for full integration solid model\n    alpha_f = 8e-4\n    delta_full_max = 0.4\n\n    # Parameters for reduced integration solid model\n    gamma_h = 0.3\n    p = 1\n    delta_red_max = 0.3\n\n    results = []\n    \n    for case in test_cases:\n        E_s, a, r, n_e = case\n        \n        # Initialize counter for contaminated discretizations\n        contaminated_count = 0\n\n        # Calculate strut slenderness lambda\n        lambda_val = a / (2 * r)\n\n        # 1. Beam discretization\n        # delta_beam is always 0, so |delta| is never > epsilon_tol\n        # No contamination.\n\n        # 2. Shell discretization\n        delta_shell = min(alpha_s * (lambda_val**2) / n_e, delta_shell_max)\n        if abs(delta_shell) > epsilon_tol:\n            contaminated_count += 1\n\n        # 3. Solid discretization (full integration)\n        delta_solid_full = min(alpha_f * (lambda_val**2) / n_e, delta_full_max)\n        if abs(delta_solid_full) > epsilon_tol:\n            contaminated_count += 1\n            \n        # 4. Solid discretization (reduced integration)\n        delta_solid_red = -min(gamma_h / (n_e**p), delta_red_max)\n        if abs(delta_solid_red) > epsilon_tol:\n            contaminated_count += 1\n\n        results.append(contaminated_count)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2901670"}, {"introduction": "Beyond static stiffness, the true power of many metamaterials lies in their ability to manipulate waves. This is governed by their dynamic properties, which are captured in dispersion diagrams showing the relationship between frequency $\\omega$ and wavevector $\\mathbf{k}$ [@problem_id:2901730]. In this advanced exercise, you will implement a Bloch-periodic finite element analysis from the ground up, applying the Floquet–Bloch theorem to a unit cell to compute its phononic band structure and unlock the principles behind designing materials that control the flow of energy.", "problem": "Implement a program that computes dispersion curves for an infinite square lattice of axially deformable members using a Bloch-periodic Finite Element (FE) formulation and validates them against an analytical mass–spring surrogate derived from first principles. Use the following fundamental laws and definitions as the base: Newton’s second law $m \\ddot{u} = f$, linear elasticity for an axially deformable bar with axial stiffness $k_{e} = EA/L$, conservation of mass with lumped mass per bar $m_{e} = \\rho A L$, and the Floquet–Bloch theorem stating $u(\\mathbf{x} + \\mathbf{R}) = u(\\mathbf{x}) e^{\\mathrm{i} \\mathbf{k}\\cdot \\mathbf{R}}$ for lattice translation vector $\\mathbf{R}$ and wavevector $\\mathbf{k}$. Do not use any formula beyond what is implied by these fundamental bases; derive all needed relations.\n\nConsider the square unit cell of side length $a$ with four corner nodes at coordinates $(0,0)$, $(a,0)$, $(0,a)$, and $(a,a)$. The edges of the cell are modeled as four axially deformable bars (two horizontal, two vertical). Each node has two in-plane translational degrees of freedom $(u_x,u_y)$. Assemble the $8 \\times 8$ global stiffness and mass matrices for this four-element, four-node cell. Use lumped mass: for each bar, distribute $m_{e}/2$ to each of its end nodes for both $u_x$ and $u_y$ degrees of freedom. Impose Bloch-periodic boundary conditions by introducing a complex transformation matrix that maps all nodal degrees of freedom to the two master degrees of freedom at the reference node $(0,0)$ via phase factors $e^{\\mathrm{i} k_x a}$ and $e^{\\mathrm{i} k_y a}$ as implied by the Floquet–Bloch theorem. Reduce the system to a $2 \\times 2$ generalized Hermitian eigenvalue problem of the form\n$$\n\\left( \\mathbf{K}_B(\\mathbf{k}) - \\omega^2 \\mathbf{M}_B(\\mathbf{k}) \\right) \\mathbf{u} = \\mathbf{0},\n$$\nand compute the two nonnegative eigenfrequencies $\\omega$ for the given $\\mathbf{k} = (k_x,k_y)$.\n\nIn parallel, derive an analytical mass–spring surrogate for the same architecture by treating the two horizontal bars as axial springs contributing to $u_x$ motion and the two vertical bars as axial springs contributing to $u_y$ motion, together with lumped bar masses. Starting strictly from Newton’s second law for a lattice node interacting with its nearest neighbors and using the Floquet–Bloch relation to eliminate neighboring displacements, show how to arrive at closed-form expressions for the two dispersion branches $\\omega_x(\\mathbf{k})$ and $\\omega_y(\\mathbf{k})$ in terms of $E$, $A$, $\\rho$, and $a$.\n\nYour program must:\n- Assemble the FE stiffness and mass matrices for the described unit cell.\n- Apply the Bloch transformation to reduce the system.\n- Solve the reduced generalized eigenproblem to obtain the two FE eigenfrequencies.\n- Independently compute the two analytical eigenfrequencies for the surrogate derived from first principles.\n- For each test case, sort the two FE eigenfrequencies and the two analytical eigenfrequencies in ascending order, and compute the maximum absolute difference (in radians per second) across the two branches.\n\nExpress all frequencies in radians per second.\n\nUse the following test suite. Each test case is a tuple $(a, E, A, \\rho, k_x, k_y)$:\n1. $(0.10, 70\\times 10^9, 1.0\\times 10^{-6}, 2700, 0.0, 0.0)$\n2. $(0.20, 200\\times 10^9, 5.0\\times 10^{-6}, 7800, \\pi/a, 0.0)$\n3. $(0.30, 3.0\\times 10^9, 2.0\\times 10^{-4}, 1200, \\pi/a, \\pi/a)$\n4. $(0.05, 2.0\\times 10^{11}, 1.0\\times 10^{-8}, 8000, 10^{-3}/a, 0.0)$\n5. $(0.12, 210\\times 10^9, 3.0\\times 10^{-6}, 7850, \\pi/(2a), \\pi/(3a))$\n\nYour program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets, in the same order as the test suite above. For each test case, output the maximum absolute difference between the FE Bloch frequencies and the analytical surrogate frequencies, in radians per second, as a float. For example, the output format must be exactly like:\n\"[result1,result2,result3,result4,result5]\"\n\nAngles, if any are used internally (e.g., through trigonometric functions), must be in radians. The final numerical outputs are floats representing errors in radians per second. No other text should be printed.", "solution": "We construct the dispersion relation of a square lattice of axially deformable members by two routes: a Bloch-periodic Finite Element (FE) reduction and an analytical mass–spring surrogate, both derived from Newton’s second law and the Floquet–Bloch theorem.\n\n1) Geometry, elements, and degrees of freedom. The unit cell has four nodes at $(0,0)$, $(a,0)$, $(0,a)$, and $(a,a)$ with two translational degrees of freedom per node, $u_x$ and $u_y$. The edges are modeled as four axial bars with Young’s modulus $E$, cross-sectional area $A$, material density $\\rho$, and lengths $L=a$. For an axially deformable bar with end nodes $i$ and $j$, unit direction vector $\\mathbf{n} = (c,s)$, axial stiffness $k_e = EA/L$, the global $4 \\times 4$ element stiffness in $(u_{xi},u_{yi},u_{xj},u_{yj})$ ordering is\n$$\n\\mathbf{k}^{(e)} = \\frac{EA}{L}\n\\begin{bmatrix}\nc^2 & cs & -c^2 & -cs\\\\\ncs & s^2 & -cs & -s^2\\\\\n-c^2 & -cs & c^2 & cs\\\\\n-cs & -s^2 & cs & s^2\n\\end{bmatrix}.\n$$\nFor horizontal members, $c=1,s=0$; for vertical, $c=0,s=1$. Lumped mass is used: each element of length $L$ has mass $m_e = \\rho A L$ distributed as $m_e/2$ to each end node. For in-plane translations, the nodal mass is associated equally with $u_x$ and $u_y$, yielding a diagonal global mass matrix $\\mathbf{M}$ with identical entries per node and per direction.\n\n2) Assembly. Assembling the four elements (bottom edge, top edge, left edge, right edge) yields a global $8 \\times 8$ stiffness matrix $\\mathbf{K}$ and a diagonal $8 \\times 8$ mass matrix $\\mathbf{M}$. No constraints are applied yet.\n\n3) Floquet–Bloch reduction. For a wavevector $\\mathbf{k}=(k_x,k_y)$ and cell vectors $(a,0)$ and $(0,a)$, the Floquet–Bloch theorem imposes periodicity with complex phase factors:\n$$\n\\begin{aligned}\n\\mathbf{u}(a,0) &= \\mathbf{u}(0,0) e^{\\mathrm{i} k_x a},\\\\\n\\mathbf{u}(0,a) &= \\mathbf{u}(0,0) e^{\\mathrm{i} k_y a},\\\\\n\\mathbf{u}(a,a) &= \\mathbf{u}(0,0) e^{\\mathrm{i} (k_x + k_y) a}.\n\\end{aligned}\n$$\nWe introduce a complex transformation matrix $\\mathbf{T}$ of size $8\\times 2$ mapping the two master degrees of freedom $(u_{x0},u_{y0})$ of the reference node at $(0,0)$ to the full vector of eight degrees of freedom. If we order the global degrees of freedom as $(u_{x0},u_{y0},u_{x1},u_{y1},u_{x2},u_{y2},u_{x3},u_{y3})$ and define the node-wise phase factors $\\phi_0=1$, $\\phi_1=e^{\\mathrm{i} k_x a}$, $\\phi_2=e^{\\mathrm{i} k_y a}$, $\\phi_3=e^{\\mathrm{i} (k_x + k_y) a}$, then\n$$\n\\mathbf{T} =\n\\begin{bmatrix}\n\\phi_0 & 0\\\\\n0 & \\phi_0\\\\\n\\phi_1 & 0\\\\\n0 & \\phi_1\\\\\n\\phi_2 & 0\\\\\n0 & \\phi_2\\\\\n\\phi_3 & 0\\\\\n0 & \\phi_3\n\\end{bmatrix}.\n$$\nThe Bloch-reduced $2 \\times 2$ matrices follow from energy and work invariance:\n$$\n\\mathbf{K}_B(\\mathbf{k}) = \\mathbf{T}^\\ast \\mathbf{K}\\, \\mathbf{T}, \\quad \\mathbf{M}_B(\\mathbf{k}) = \\mathbf{T}^\\ast \\mathbf{M}\\, \\mathbf{T},\n$$\nwhere $\\ast$ denotes the conjugate transpose. Both $\\mathbf{K}_B$ and $\\mathbf{M}_B$ are Hermitian and $\\mathbf{M}_B$ is positive definite. The dispersion relation is obtained by solving the generalized Hermitian eigenproblem\n$$\n\\left( \\mathbf{K}_B(\\mathbf{k}) - \\omega^2 \\mathbf{M}_B(\\mathbf{k}) \\right) \\mathbf{u} = \\mathbf{0}.\n$$\nThere are two branches corresponding to the two polarizations.\n\n4) Analytical mass–spring surrogate. We consider a single node in the infinite lattice and write Newton's second law for it. The node is connected to four neighbors via four bars of stiffness $k = EA/a$. The mass at the node is the sum of contributions from the four incident bars, each contributing $m_e/2 = \\rho A a / 2$. Thus, the nodal mass is $m_{node} = 4 \\times (\\rho A a / 2) = 2 \\rho A a = 2m_e$.\nThe equation of motion for the $u_x$ displacement of a node at position $\\mathbf{x}$ is:\n$$ m_{node} \\ddot{u}_x(\\mathbf{x}) = k [u_x(\\mathbf{x}+a\\mathbf{\\hat{x}}) - u_x(\\mathbf{x})] + k [u_x(\\mathbf{x}-a\\mathbf{\\hat{x}}) - u_x(\\mathbf{x})] $$\nWe assume a harmonic plane wave solution (the Floquet-Bloch form) $u_x(\\mathbf{x}, t) = U_x e^{i(\\mathbf{k}\\cdot\\mathbf{x} - \\omega t)}$. Substituting this into the equation of motion gives:\n$$ -m_{node} \\omega^2 U_x = k [e^{ik_x a} - 1] U_x + k [e^{-ik_x a} - 1] U_x $$\n$$ -2m_e \\omega^2 = k (e^{ik_x a} + e^{-ik_x a} - 2) = 2k (\\cos(k_x a) - 1) $$\nSolving for $\\omega^2$ gives the dispersion relation for the x-polarized branch:\n$$ \\omega_x^2(\\mathbf{k}) = \\frac{2k}{2m_e} (1 - \\cos(k_x a)) = \\frac{k}{m_e} (1 - \\cos(k_x a)) $$\nBy symmetry, the y-polarized branch is:\n$$ \\omega_y^2(\\mathbf{k}) = \\frac{k}{m_e} (1 - \\cos(k_y a)) $$\nThese expressions are derived from first principles as requested.\n\n5) Numerical algorithm. For each test case $(a,E,A,\\rho,k_x,k_y)$:\n- Assemble $\\mathbf{K}$ and $\\mathbf{M}$ for the four-edge cell using $EA/a$ and $m_e=\\rho A a$.\n- Build $\\mathbf{T}$ from the phase factors $\\{1,e^{\\mathrm{i} k_x a},e^{\\mathrm{i} k_y a},e^{\\mathrm{i} (k_x+k_y) a}\\}$.\n- Form $\\mathbf{K}_B=\\mathbf{T}^\\ast \\mathbf{K}\\mathbf{T}$ and $\\mathbf{M}_B=\\mathbf{T}^\\ast \\mathbf{M}\\mathbf{T}$, Hermitian-symmetrize numerically, and solve the generalized Hermitian eigenproblem for $\\omega^2$.\n- Clip tiny negative eigenvalues to zero and take square roots to obtain nonnegative $\\omega$.\n- Compute analytical $\\omega_x$ and $\\omega_y$ from the derived formulas using $k=EA/a$ and $m_e=\\rho A a$.\n- Sort both sets ascending and report the maximum absolute difference $|\\omega^{\\text{FE}} - \\omega^{\\text{analytical}}|$ across the two branches, in radians per second.\n\n6) Test suite coverage. The five test cases exercise:\n- $\\mathbf{k}=\\mathbf{0}$ for zero-frequency acoustic modes.\n- Edge of the Brillouin zone along $k_x$ with $k_y=0$ to exhibit one zero and one nonzero branch.\n- Corner of the Brillouin zone $(\\pi/a,\\pi/a)$ with both branches nonzero and equal by symmetry.\n- A small but nonzero $k_x a=10^{-3}$ to check near-zero behavior and numerical stability.\n- An oblique wavevector $(\\pi/(2a),\\pi/(3a))$ to validate general anisotropic sampling.\n\nThe program outputs a single line containing a list of five floats, each the maximum absolute error in radians per second for the corresponding test case, in the specified order.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.linalg import eigh\n\ndef truss_element_stiffness(E, A, xi, yi, xj, yj):\n    dx = xj - xi\n    dy = yj - yi\n    L = np.hypot(dx, dy)\n    c = dx / L\n    s = dy / L\n    k = E * A / L\n    # 4x4 stiffness in [ux_i, uy_i, ux_j, uy_j]\n    ke = k * np.array([\n        [ c*c,  c*s, -c*c, -c*s],\n        [ c*s,  s*s, -c*s, -s*s],\n        [-c*c, -c*s,  c*c,  c*s],\n        [-c*s, -s*s,  c*s,  s*s]\n    ], dtype=float)\n    return ke, L\n\ndef assemble_cell_matrices(a, E, A, rho):\n    # Node coordinates: 0:(0,0), 1:(a,0), 2:(0,a), 3:(a,a)\n    coords = np.array([\n        [0.0, 0.0],\n        [a,   0.0],\n        [0.0, a],\n        [a,   a]\n    ], dtype=float)\n    # Elements: (node_i, node_j)\n    elements = [\n        (0, 1),  # bottom edge (horizontal)\n        (2, 3),  # top edge (horizontal)\n        (0, 2),  # left edge (vertical)\n        (1, 3)   # right edge (vertical)\n    ]\n    ndof = 4 * 2\n    K = np.zeros((ndof, ndof), dtype=float)\n    M = np.zeros((ndof, ndof), dtype=float)\n    for (ni, nj) in elements:\n        xi, yi = coords[ni]\n        xj, yj = coords[nj]\n        ke, L = truss_element_stiffness(E, A, xi, yi, xj, yj)\n        # DOF indices\n        dofs = np.array([2*ni, 2*ni+1, 2*nj, 2*nj+1], dtype=int)\n        # Assemble stiffness\n        for a_i in range(4):\n            for b_i in range(4):\n                K[dofs[a_i], dofs[b_i]] += ke[a_i, b_i]\n        # Lumped mass: m_e/2 to each node, duplicated on ux and uy\n        me = rho * A * L\n        M[2*ni,   2*ni]   += 0.5 * me\n        M[2*ni+1, 2*ni+1] += 0.5 * me\n        M[2*nj,   2*nj]   += 0.5 * me\n        M[2*nj+1, 2*nj+1] += 0.5 * me\n    return K, M\n\ndef bloch_transform(a, kx, ky):\n    # Phase factors at nodes 0:(0,0), 1:(a,0), 2:(0,a), 3:(a,a)\n    phi0 = 1.0 + 0.0j\n    phi1 = np.exp(1j * kx * a)\n    phi2 = np.exp(1j * ky * a)\n    phi3 = np.exp(1j * (kx + ky) * a)\n    phis = [phi0, phi1, phi2, phi3]\n    # Build 8x2 transformation: column 0 for ux, column 1 for uy\n    T = np.zeros((8, 2), dtype=complex)\n    for n in range(4):\n        T[2*n, 0] = phis[n]     # ux at node n\n        T[2*n+1, 1] = phis[n]   # uy at node n\n    return T\n\ndef fe_bloch_frequencies(a, E, A, rho, kx, ky):\n    # Assemble cell matrices\n    K, M = assemble_cell_matrices(a, E, A, rho)\n    # Bloch transform\n    T = bloch_transform(a, kx, ky)\n    # Reduced matrices\n    KB = T.conj().T @ K @ T\n    MB = T.conj().T @ M @ T\n    # Hermitian symmetrize to remove tiny numerical asymmetries\n    KB = 0.5 * (KB + KB.conj().T)\n    MB = 0.5 * (MB + MB.conj().T)\n    # Solve generalized Hermitian eigenproblem\n    # eigh returns eigenvalues in ascending order\n    vals, _ = eigh(KB, MB)\n    # Numerical clean-up: small negative values to zero\n    vals = np.real(vals)\n    vals[vals  0] = 0.0\n    omegas = np.sqrt(vals)\n    # Sort ascending\n    omegas.sort()\n    return omegas  # length 2\n\ndef analytical_frequencies(a, E, A, rho, kx, ky):\n    k = E * A / a\n    me = rho * A * a\n    wx2 = (k / me) * (1.0 - np.cos(kx * a))\n    wy2 = (k / me) * (1.0 - np.cos(ky * a))\n    wx = np.sqrt(max(wx2, 0.0))\n    wy = np.sqrt(max(wy2, 0.0))\n    omegas = np.array([wx, wy], dtype=float)\n    omegas.sort()\n    return omegas\n\ndef solve():\n    # Define the test cases from the problem statement.\n    # Each tuple: (a, E, A, rho, kx, ky)\n    test_cases = [\n        (0.10, 70.0e9, 1.0e-6, 2700.0, 0.0, 0.0),\n        (0.20, 200.0e9, 5.0e-6, 7800.0, np.pi/0.20, 0.0),\n        (0.30, 3.0e9, 2.0e-4, 1200.0, np.pi/0.30, np.pi/0.30),\n        (0.05, 2.0e11, 1.0e-8, 8000.0, 1.0e-3/0.05, 0.0),\n        (0.12, 210.0e9, 3.0e-6, 7850.0, np.pi/(2*0.12), np.pi/(3*0.12)),\n    ]\n\n    results = []\n    for a, E, A, rho, kx, ky in test_cases:\n        fe_omegas = fe_bloch_frequencies(a, E, A, rho, kx, ky)\n        an_omegas = analytical_frequencies(a, E, A, rho, kx, ky)\n        # Max absolute difference across two branches\n        err = float(np.max(np.abs(fe_omegas - an_omegas)))\n        results.append(f\"{err:.6e}\")\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2901730"}]}