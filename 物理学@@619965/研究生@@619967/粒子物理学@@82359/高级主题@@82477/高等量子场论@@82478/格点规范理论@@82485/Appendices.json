{"hands_on_practices": [{"introduction": "将费米子置于晶格之上并非易事。朴素的离散化方法会导致“费米子倍增问题”，即产生出许多非物理的粒子副本。威尔逊费米子（Wilson fermions）通过引入一个惩罚高动量模式的项，巧妙地解决了这个问题。这个练习将引导你深入研究威尔逊-狄拉克算符的动量空间结构，通过计算使一个非物理的“倍增子”（doubler）变为无质量所需的特定参数，从而加深对该机制的理解。[@problem_id:185447]", "problem": "在格点规范理论中，Wilson 费米子表述是一种用以离散化 Dirac 作用量的常用方法，其可以避免费米子倍增问题。这是通过添加所谓的 Wilson 项来实现的，该项赋予非物理的“倍增子”态很大的质量。这些倍增子对应于动量在布里渊区边界上的状态。\n\n在四维超立方格点上（格点间距 $a=1$），自由 Wilson-Dirac 算符在动量空间中由下式给出\n$$ \\tilde{D}(p) = 1 - \\kappa \\sum_{\\mu=1}^4 \\left[ (1-\\gamma_\\mu)e^{ip_\\mu} + (1+\\gamma_\\mu)e^{-ip_\\mu} \\right] $$\n其中 $p_\\mu$ 是动量的分量，$\\gamma_\\mu$ 是欧几里得 Dirac 矩阵，而 $\\kappa$ 是“跳跃参数”，它与裸夸克质量有关。\n\n该理论的物理态对应于费米子传播子 $\\tilde{S}(p) = [\\tilde{D}(p)]^{-1}$ 中的极点。如果一种费米子的传播子在其*相对于布里渊区位置*的零能量和零空间动量处有一个极点，则该费米子种类被认为是无质量的。对于物理费米子，此位置在 $p=(0,0,0,0)$。对于位于空间动量为 $\\vec{P}$（其中每个分量 $P_i$ 是 $0$ 或 $\\pi$）的角落处的倍增子种类，这对应于在四维动量 $p=(\\vec{P}, 0)$ 处的一个极点。\n\n考虑与空间布里渊区角落 $\\vec{P} = (\\pi, \\pi, \\pi)$ 相关联的倍增子种类。求使该倍增子种类变为无质量的跳跃参数 $\\kappa$ 的具体值。", "solution": "我们有\n$$\n\\tilde D(p)=1-\\kappa\\sum_{\\mu=1}^4\\Bigl[(1-\\gamma_\\mu)e^{ip_\\mu}+(1+\\gamma_\\mu)e^{-ip_\\mu}\\Bigr].\n$$\n合并每个 μ 的项：\n$$\n\\begin{aligned}\n(1-\\gamma_\\mu)e^{ip_\\mu}+(1+\\gamma_\\mu)e^{-ip_\\mu} = (1-\\gamma_\\mu)(\\cos p_\\mu+i\\sin p_\\mu)+(1+\\gamma_\\mu)(\\cos p_\\mu-i\\sin p_\\mu) \\\\\n= 2\\cos p_\\mu-2i\\gamma_\\mu\\sin p_\\mu.\n\\end{aligned}\n$$\n因此\n$$\n\\tilde D(p)\n=1-\\kappa\\sum_\\mu\\bigl(2\\cos p_\\mu-2i\\gamma_\\mu\\sin p_\\mu\\bigr)\n=1-2\\kappa\\sum_\\mu\\cos p_\\mu\n+2i\\kappa\\sum_\\mu\\gamma_\\mu\\sin p_\\mu.\n$$\n\n“质量”项为\n$$\nm(p)=1-2\\kappa\\sum_{\\mu=1}^4\\cos p_\\mu,\n$$\n而当 $\\sin p_\\mu=0$ 时，Dirac 项消失。对于在 $p=(\\pi,\\pi,\\pi,0)$ 处的倍增子，\n$$\n\\sum_{\\mu=1}^4\\cos p_\\mu\n=\\cos\\pi+\\cos\\pi+\\cos\\pi+\\cos0\n=-1-1-1+1=-2.\n$$\n无质量条件 $m(p)=0$ 给出\n$$\n1-2\\kappa(-2)=0\n\\quad\\Longrightarrow\\quad\n1+4\\kappa=0\n\\quad\\Longrightarrow\\quad\n\\kappa=-\\frac14.\n$$", "answer": "$$\\boxed{-\\frac14}$$", "id": "185447"}, {"introduction": "夸克禁闭是量子色动力学（QCD）最核心的特征之一，而格点规范理论为理解这一现象提供了强有力的非微扰框架。威尔逊圈（Wilson loop）是探测夸克之间相互作用势的关键工具，其期望值的行为揭示了禁闭的本质。在强耦合极限下，该练习将向你展示如何利用威尔逊圈计算沿不同晶格方向的弦张量，这不仅直观地描绘了禁闭的线性势，也揭示了离散化如何破坏连续空间的旋转对称性。[@problem_id:345608]", "problem": "考虑一个在格点间距为 $a$ 的 $d$ 维超立方格点上表述的纯 SU(N) 杨-米尔斯理论。其动力学由威尔逊作用量决定：\n$$\nS[U] = -\\frac{\\beta}{2N} \\sum_{p} \\text{Re Tr}(U_p)\n$$\n其中，求和遍及格点上所有的基本格框 $p$，$U_p$ 是围绕格框的 SU(N) 链变量 $U_\\mu(n)$ 的路径排序乘积。\n\n由空间矢量 $\\vec{R}$ 分隔开的夸克-反夸克对之间的静态势 $V(\\vec{R})$ 可以从一个矩形威尔逊圈 $W(C_{\\vec{R},T})$ 的期望值中提取。该威尔逊圈的空间边对应于间隔 $\\vec{R}$，时间延展为 $T_{phys} = Ta$：\n$$\nV(\\vec{R}) = -\\lim_{T\\to\\infty} \\frac{1}{Ta} \\log \\langle W(C_{\\vec{R},T}) \\rangle\n$$\n此处威尔逊圈定义为 $W(C) = \\frac{1}{N} \\text{Tr} \\left( P \\prod_{l \\in C} U_l \\right)$。\n\n在强耦合极限 $\\beta \\to 0$ 下，该理论表现出禁闭现象，势与距离呈线性关系，$V(\\vec{R}) = \\sigma(\\vec{R}) |\\vec{R}|$，其中 $|\\vec{R}|$ 是矢量 $\\vec{R}$ 的物理长度。弦张力 $\\sigma(\\vec{R})$ 可能依赖于 $\\vec{R}$ 的方向，因为格点破坏了连续旋转对称性。\n\n本问题旨在量化一个具有 $D=3$ 个空间维度（即 $d=4$）的理论中这种旋转对称性破缺。你的任务是计算比值 $\\frac{\\sigma_{111}}{\\sigma_{100}}$，其中：\n- $\\sigma_{100}$ 是夸克-反夸克对沿着主轴方向（例如 $\\vec{R} = (L, 0, 0)a$）分离时的弦张力。\n- $\\sigma_{111}$ 是夸克-反夸克对沿着主体对角线方向（例如 $\\vec{R} = (L, L, L)a$）分离时的弦张力。\n\n计算应在强耦合展开（$\\beta \\to 0$）的领头阶进行。最终结果应为一个实数。", "solution": "**1. 威尔逊圈的强耦合展开**\n\n在强耦合极限（$\\beta \\to 0$）下，可观测量 $\\mathcal{O}$ 的期望值通过展开玻尔兹曼因子 $e^{-S}$ 来计算。\n$$\n\\langle \\mathcal{O} \\rangle = \\frac{\\int [dU] \\mathcal{O} e^{-S}}{\\int [dU] e^{-S}} \\approx \\int [dU] \\mathcal{O} \\left(1 + S + \\frac{S^2}{2!} + \\dots \\right)\n$$\n对链变量 $U_\\mu(n)$ 的哈尔群积分具有性质 $\\int dU U = 0$。因此，要使积分为非零，每个链变量 $U$ 都必须与其共轭 $U^\\dagger$ 配对。\n\n对于一个威尔逊圈 $W(C)$，领头的非零贡献来自于 $e^{-S}$ 展开中能够“抵消”掉 $W(C)$ 中所有链变量的最低阶项。这可以通过用作用量项中的格框来铺砌由圈 $C$ 包围的最小曲面来实现。如果最小曲面可以用 $\\mathcal{A}_{min}$ 个格框来铺砌，那么对 $\\langle W(C) \\rangle$ 的领头贡献将是 $\\beta^{\\mathcal{A}_{min}}$ 阶的。\n计算得出：\n$$\n\\langle W(C) \\rangle \\approx (c_0)^{\\mathcal{A}_{min}}\n$$\n其中 $c_0$ 是一个与 $\\beta$ 成正比的常数（对于给定的归一化，具体为 $c_0 = \\beta/(2N^2)$），而 $\\mathcal{A}_{min}$ 是铺砌由圈 $C$ 界定的曲面所需的最小格框数。$c_0$ 的确切值是不需要的，因为它将在最终的比值中被抵消。\n\n**2. 一般矩形圈的最小曲面面积**\n\n让我们考虑一个在 $D$ 个空间维度和 1 个时间维度的空间中的矩形威尔逊圈 $C_{\\vec{R},T}$。该圈由一个夸克-反夸克对定义，它们由空间格点矢量 $\\vec{R} = a \\sum_{i=1}^D L_i \\hat{e}_i$ 分隔，时间延展为 $T$ 个格点单位（$T_{phys} = Ta$）。\n\n圈 C 由四段组成：\n1. 从原点到格点 $\\vec{R}$ 的空间路径。\n2. 从 $\\vec{R}$ 到 $\\vec{R}+(T,0,\\dots,0)$ 的长度为 $T$ 的时间路径。\n3. 从 $\\vec{R}+(T,0,\\dots,0)$ 回到 $(T,0,\\dots,0)$ 的空间路径。\n4. 从 $(T,0,\\dots,0)$ 回到原点的长度为 $T$ 的时间路径。\n\n为了最小化格框数量，我们必须选择格点上连接原点和 $\\vec{R}$ 的最短可能空间路径。这条“曼哈顿”路径的长度是 $\\sum_{i=1}^D |L_i|$ 个链。\n\n最小曲面是一个带状曲面，通过将此空间路径沿时间方向平移 $T$ 步而产生。该曲面由 $(x_i, t)$ 平面中的格框铺砌。格框总数是空间路径长度和时间路径长度的乘积。\n$$\n\\mathcal{A}_{min} = T \\left( \\sum_{i=1}^D |L_i| \\right)\n$$\n\n**3. 势与弦张力**\n\n使用步骤 1 和 2 的结果，威尔逊圈的期望值为：\n$$\n\\langle W(C_{\\vec{R},T}) \\rangle \\approx (c_0)^{T \\sum_{i=1}^D |L_i|}\n$$\n静态夸克势 $V(\\vec{R})$ 则为：\n$$\nV(\\vec{R}) = -\\lim_{T\\to\\infty} \\frac{1}{Ta} \\log \\left( (c_0)^{T \\sum_{i=1}^D |L_i|} \\right) = -\\lim_{T\\to\\infty} \\frac{T \\left( \\sum_{i=1}^D |L_i| \\right) \\log(c_0)}{Ta}\n$$\n$$\nV(\\vec{R}) = -\\frac{\\log(c_0)}{a} \\sum_{i=1}^D |L_i|\n$$\n弦张力 $\\sigma(\\vec{R})$ 被定义为单位物理距离上的势：\n$$\n\\sigma(\\vec{R}) = \\frac{V(\\vec{R})}{|\\vec{R}|}\n$$\n物理距离是分离矢量的欧几里得范数：$|\\vec{R}| = a \\sqrt{\\sum_{i=1}^D L_i^2}$。\n代入 $V(\\vec{R})$ 和 $|\\vec{R}|$ 的表达式：\n$$\n\\sigma(\\vec{R}) = \\frac{-\\frac{\\log(c_0)}{a} \\sum_{i=1}^D |L_i|}{a \\sqrt{\\sum_{i=1}^D L_i^2}} = \\left(-\\frac{\\log(c_0)}{a^2}\\right) \\frac{\\sum_{i=1}^D |L_i|}{\\sqrt{\\sum_{i=1}^D L_i^2}}\n$$\n\n**4. 计算弦张力之比**\n\n我们现在将这个通用公式应用于所要求的 $D=3$ 空间维度的具体情况。\n\n**a) 轴向张力 $\\sigma_{100}$：**\n分离方向沿主轴，$\\vec{R} = (L, 0, 0)a$。格点矢量分量为 $(L_1, L_2, L_3) = (L, 0, 0)$。\n$$\n\\sigma_{100} = \\left(-\\frac{\\log(c_0)}{a^2}\\right) \\frac{|L|+|0|+|0|}{\\sqrt{L^2+0^2+0^2}} = \\left(-\\frac{\\log(c_0)}{a^2}\\right) \\frac{L}{L} = -\\frac{\\log(c_0)}{a^2}\n$$\n\n**b) 离轴张力 $\\sigma_{111}$：**\n分离方向沿主体对角线，$\\vec{R} = (L, L, L)a$。格点矢量分量为 $(L_1, L_2, L_3) = (L, L, L)$。\n$$\n\\sigma_{111} = \\left(-\\frac{\\log(c_0)}{a^2}\\right) \\frac{|L|+|L|+|L|}{\\sqrt{L^2+L^2+L^2}} = \\left(-\\frac{\\log(c_0)}{a^2}\\right) \\frac{3L}{\\sqrt{3L^2}}\n$$\n$$\n\\sigma_{111} = \\left(-\\frac{\\log(c_0)}{a^2}\\right) \\frac{3L}{L\\sqrt{3}} = \\sqrt{3} \\left(-\\frac{\\log(c_0)}{a^2}\\right)\n$$\n\n**c) 比值：**\n最后，我们计算比值 $\\frac{\\sigma_{111}}{\\sigma_{100}}$：\n$$\n\\frac{\\sigma_{111}}{\\sigma_{100}} = \\frac{\\sqrt{3} \\left(-\\frac{\\log(c_0)}{a^2}\\right)}{-\\frac{\\log(c_0)}{a^2}} = \\sqrt{3}\n$$\n该比值量化了强耦合极限下旋转不变性的破缺。沿轴向形成势比沿对角线方向“更经济”，这导致当按欧几里得距离归一化时，轴向分离的弦张力小于对角线分离的有效张力。", "answer": "$$\n\\boxed{\\sqrt{3}}\n$$", "id": "345608"}, {"introduction": "从理论构想到可观测量，计算模拟是连接两者的桥梁。在格点理论中，不同的费米子离散化方案（如威尔逊费米子和交错费米子）各有优劣，它们的实际性能需要通过数值计算来检验。本练习提供了一个宝贵的实践机会，你将通过编写程序，在一个简化的二维模型中计算介子质量，从而直接比较不同费米子作用的性能差异，体验从理论公式到物理结果的完整过程。[@problem_id:2407350]", "problem": "要求您实现一个完整且可运行的程序，用于在自由场、二维欧几里得格点设定下，比较交错费米子和 Wilson 费米子从两点关联函数中提取类 pion 质量的格点离散化性能。将格距视为 $a=1$，因此所有质量和能量在格点单位下均为无量纲。所有角度必须以弧度为单位。\n\n考虑一个时间维度为 $N_t$、空间维度为 $N_x$（均为整数）的二维欧几里得格点。在两个方向上均施加周期性边界条件。离散动量为 $p_0 = \\frac{2\\pi n_0}{N_t}$ 和 $p_1 = \\frac{2\\pi n_1}{N_x}$，其中 $n_0 \\in \\{0,1,\\dots,N_t-1\\}$ 且 $n_1 \\in \\{0,1,\\dots,N_x-1\\}$。使用以下自由场动量空间狄拉克算符：\n\n- Wilson 费米子（Wilson 参数 $r=1$）在二维情况下，其 gamma 矩阵为\n  $$\n  \\gamma_0 = \\sigma_1 = \\begin{pmatrix}0  1\\\\ 1  0\\end{pmatrix},\\quad\n  \\gamma_1 = \\sigma_2 = \\begin{pmatrix}0  -i\\\\ i  0\\end{pmatrix},\\quad\n  \\gamma_5 = \\sigma_3 = \\begin{pmatrix}1  0\\\\ 0  -1\\end{pmatrix}\n  $$\n  和裸费米子质量 $m0$：\n  $$\n  D_W(p) = m + \\sum_{\\mu=0}^{1}\\left(1 - \\cos p_\\mu\\right) + i\\sum_{\\mu=0}^{1}\\gamma_\\mu \\sin p_\\mu.\n  $$\n  相应的传播子为 $S_W(p) = D_W(p)^{-1}$。\n\n- 交错费米子（单分量 Kogut-Susskind 离散化），其自由场动量空间算符为\n  $$\n  D_S(p) = m + i\\sum_{\\mu=0}^{1}\\sin p_\\mu,\n  $$\n  传播子为 $S_S(p) = \\frac{1}{D_S(p)}$。\n\n通过离散傅里叶变换定义坐标空间传播子\n$$\nS_{W}(x,t) = \\frac{1}{N_t N_x} \\sum_{n_0=0}^{N_t-1}\\sum_{n_1=0}^{N_x-1} e^{i(p_0 t + p_1 x)} S_W(p_0,p_1),\n$$\n$$\nS_{S}(x,t) = \\frac{1}{N_t N_x} \\sum_{n_0=0}^{N_t-1}\\sum_{n_1=0}^{N_x-1} e^{i(p_0 t + p_1 x)} S_S(p_0,p_1).\n$$\n此处 $S_W(x,t)$ 是一个 $2\\times 2$ 复矩阵，$S_S(x,t)$ 是一个复标量。所有求和均按上述规定对整数进行，且 $i=\\sqrt{-1}$。\n\n定义零空间动量赝标量关联函数为\n$$\nC_W(t) = \\sum_{x=0}^{N_x-1}\\operatorname{Tr}\\left[S_W(x,t)\\,S_W(x,t)^\\dagger\\right],\n\\qquad\nC_S(t) = \\sum_{x=0}^{N_x-1}\\left|S_S(x,t)\\right|^2,\n$$\n对于整数欧几里得时间间隔 $t\\in\\{0,1,\\dots,N_t-1\\}$。在具有周期性时间边界条件的自由场设定中，关联函数在较大 $t$ 时预计由 cosh 形式主导，有效质量可通过下式估算\n$$\nm_{\\text{eff}}(t) = \\operatorname{arccosh}\\left(\\frac{C(t-1) + C(t+1)}{2\\,C(t)}\\right),\n$$\n该式对整数 $t$ 成立，其中 $1 \\le t \\le N_t - 2$。所有出现的 $\\cos$、$\\sin$、$\\arccosh$ 和复指数函数都必须使用以弧度为单位的角度进行计算。所有质量均以格点单位（无量纲）表示。\n\n对以下每个测试用例，使用指定的 $(N_x, N_t, m, t_{\\min}, t_{\\max})$ 参数，计算：\n- Wilson 有效质量估计值 $m_{\\pi,W}$，即 $m_{\\text{eff},W}(t)$ 在闭区间 $[t_{\\min}, t_{\\max}]$ 内对整数 $t$ 的算术平均值。\n- 交错费米子有效质量估计值 $m_{\\pi,S}$，即 $m_{\\text{eff},S}(t)$ 在相同 $t$ 范围内的算术平均值。\n- 性能比较指标\n$$\n\\Delta = \\left|m_{\\pi,W} - 2m\\right| - \\left|m_{\\pi,S} - 2m\\right|.\n$$\n负的 $\\Delta$ 值表示 Wilson 估计值更接近连续谱自由双粒子能量 $2m$，而正的 $\\Delta$ 值表示交错费米子估计值更接近。\n\n为以下参数值测试套件提供结果，所有质量均以格点单位表示，所有角度均以弧度表示：\n- 用例 1：$(N_x, N_t, m, t_{\\min}, t_{\\max}) = (16, 32, 0.3, 6, 12)$。\n- 用例 2：$(N_x, N_t, m, t_{\\min}, t_{\\max}) = (12, 24, 0.1, 5, 10)$。\n- 用例 3：$(N_x, N_t, m, t_{\\min}, t_{\\max}) = (20, 20, 0.5, 4, 8)$。\n- 用例 4：$(N_x, N_t, m, t_{\\min}, t_{\\max}) = (8, 16, 0.8, 2, 5)$。\n\n最终输出格式：您的程序应产生单行输出，该输出包含一个列表，每个测试用例对应一个条目。每个条目本身必须是一个包含三个浮点数的列表，顺序为 $[m_{\\pi,W}, m_{\\pi,S}, \\Delta]$。例如，总输出必须采用以下形式\n$$\n\\big[\\,[m_{\\pi,W}^{(1)},\\,m_{\\pi,S}^{(1)},\\,\\Delta^{(1)}],\\ [m_{\\pi,W}^{(2)},\\,m_{\\pi,S}^{(2)},\\,\\Delta^{(2)}],\\ [m_{\\pi,W}^{(3)},\\,m_{\\pi,S}^{(3)},\\,\\Delta^{(3)}],\\ [m_{\\pi,W}^{(4)},\\,m_{\\pi,S}^{(4)},\\,\\Delta^{(4)}]\\ \\big].\n$$\n将此嵌套列表精确地打印在单行上，不带任何附加文本。所有量在格点单位下均为无量纲。", "solution": "目标是在二维自由场欧几里得格点上，计算并比较从针对 Wilson 和交错这两种不同费米子离散化方案的两点关联函数中提取的类 pion 质量。格距设为 $a=1$。\n\n通用方法包括计算作为欧几里得时间间隔 $t$ 的函数的零动量赝标量关联函数 $C(t)$。这并非通过在坐标空间中进行计算成本高昂的直接求值来实现（这将需要一个完整的二维傅里叶变换），而是通过一种源自 Parseval 定理的更高效的动量空间方法。\n\n坐标空间关联函数定义为：\n$$\nC_W(t) = \\sum_{x=0}^{N_x-1}\\operatorname{Tr}\\left[S_W(x,t)\\,S_W(x,t)^\\dagger\\right], \\qquad C_S(t) = \\sum_{x=0}^{N_x-1}\\left|S_S(x,t)\\right|^2\n$$\n通过应用傅里叶变换的性质，对空间坐标 $x$ 的求和可以转换成对空间动量 $p_1$ 的求和。令 $\\tilde{S}(p_1, t)$ 为动量空间传播子 $S(p_0, p_1)$ 相对于时间动量 $p_0$ 的部分傅里叶变换：\n$$\n\\tilde{S}(p_1, t) = \\frac{1}{N_t} \\sum_{n_0=0}^{N_t-1} e^{i p_0 t} S(p_0, p_1)\n$$\n其中 $p_0 = \\frac{2\\pi n_0}{N_t}$。该变换对每个 $p_1$ 值都等效于一次一维快速傅里叶逆变换 (IFFT)。关联函数便可表示为：\n$$\nC_W(t) = \\frac{1}{N_x} \\sum_{n_1=0}^{N_x-1} \\operatorname{Tr}\\left[\\tilde{S}_W(p_1, t)\\,\\tilde{S}_W(p_1, t)^\\dagger\\right]\n$$\n$$\nC_S(t) = \\frac{1}{N_x} \\sum_{n_1=0}^{N_x-1} |\\tilde{S}_S(p_1, t)|^2\n$$\n其中 $p_1 = \\frac{2\\pi n_1}{N_x}$。这种表述在计算上更优越，因为它只需要 $N_x$ 个大小为 $N_t$ 的一维 IFFT，而不是一个计算量更大的大小为 $N_t \\times N_x$ 的二维 IFFT。以下步骤详细说明了此策略的实现。\n\n**1. 动量空间传播子构建：**\n\n首先，我们为格点网格上的所有离散动量 $(p_0, p_1)$ 构建动量空间传播子 $S_W(p)$ 和 $S_S(p)$。\n\n对于交错费米子，传播子是由狄拉克算符的逆给出的一个标量：\n$$\nS_S(p_0, p_1) = \\left( m + i\\sum_{\\mu=0}^{1}\\sin p_\\mu \\right)^{-1} = \\frac{1}{m + i(\\sin p_0 + \\sin p_1)}\n$$\n这将为所有的 $(p_0, p_1)$ 对进行计算，形成一个大小为 $N_t \\times N_x$ 的矩阵。\n\n对于 Wilson 费米子，传播子是一个 $2\\times2$ 矩阵。狄拉克算符为：\n$$\nD_W(p) = \\left( m + \\sum_{\\mu=0}^{1}(1 - \\cos p_\\mu) \\right) I_2 + i \\sum_{\\mu=0}^{1} \\gamma_\\mu \\sin p_\\mu\n$$\n其中 $I_2$ 是 $2\\times2$ 单位矩阵，gamma 矩阵为 $\\gamma_0 = \\sigma_1$ 和 $\\gamma_1 = \\sigma_2$。传播子 $S_W(p) = D_W(p)^{-1}$ 是通过对每个动量对 $(p_0, p_1)$ 的这个 $2\\times2$ 矩阵求逆得到的。这会产生一个形状为 $(N_t, N_x, 2, 2)$ 的四维数组。像 `numpy` 这样的现代数值库允许对这些传播子网格进行高效的矢量化计算，而无需对动量进行显式循环。\n\n**2. 关联函数计算：**\n\n在获得完整网格上的动量空间传播子之后，我们开始计算关联函数。\n\n对于每个空间动量指数 $n_1 \\in \\{0, ..., N_x-1\\}$，我们取遍所有时间动量 $n_0 \\in \\{0, ..., N_t-1\\}$ 的传播子数组，并沿此时间轴执行一维快速傅里叶逆变换。这样可以高效地计算出所有 $t$ 对应的 $\\tilde{S}(p_1, t)$。\n\n对于交错费米子，这会产生一个形状为 $(N_t, N_x)$ 的矩阵 $\\tilde{S}_S(t, p_1)$。然后通过对每个元素的绝对值求平方，并对每个时间 $t$ 上的空间动量指数 $n_1$ 进行平均，来找到关联函数 $C_S(t)$。\n\n对于 Wilson 费米子，IFFT 的结果是一个形状为 $(N_t, N_x, 2, 2)$ 的数组 $\\tilde{S}_W(t, p_1)$。对于每个时间 $t$，我们为每个空间动量 $p_1$ 计算乘积 $\\tilde{S}_W(p_1, t) \\tilde{S}_W(p_1, t)^\\dagger$ 的迹，然后将这些实值迹对 $p_1$ 进行平均以得到 $C_W(t)$。矩阵运算（乘法和求迹）为了效率被矢量化，例如，使用 `numpy.einsum`。\n\n**3. 有效质量提取：**\n\n有效质量 $m_{\\text{eff}}(t)$ 使用适用于周期性边界条件系统的公式从关联函数 $C(t)$ 中提取：\n$$\nm_{\\text{eff}}(t) = \\operatorname{arccosh}\\left(\\frac{C(t-1) + C(t+1)}{2\\,C(t)}\\right)\n$$\n该公式对 $t \\in \\{1, ..., N_t-2\\}$ 有效。$\\operatorname{arccosh}$ 函数的参数预计大于或等于 1。为防止数值精度误差可能产生略小于 1 的值，在应用该函数之前，参数被裁剪到 $1.0$。\n\n最终的类 pion 质量估计值 $m_{\\pi,W}$ 和 $m_{\\pi,S}$ 是通过在指定的整数时间范围 $[t_{\\min}, t_{\\max}]$ 内计算相应有效质量 $m_{\\text{eff},W}(t)$ 和 $m_{\\text{eff},S}(t)$ 的算术平均值得到的。\n\n**4. 性能比较：**\n\n最后，性能指标 $\\Delta$ 根据其定义计算：\n$$\n\\Delta = \\left|m_{\\pi,W} - 2m\\right| - \\left|m_{\\pi,S} - 2m\\right|\n$$\n该指标直接比较了每种格点离散化方案的质量估计值与预期的连续谱自由场双粒子态能量 $2m$ 之间的偏差。负的 $\\Delta$ 值表示对于给定参数，Wilson 费米子的结果更准确，而正的 $\\Delta$ 值则表明交错费米子的结果更优。\n\n提供的 Python 代码针对所有测试用例，以矢量化的方式实现了这整个过程。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef compute_wilson_correlator(Nx, Nt, m, p0_vals, p1_vals):\n    \"\"\"\n    Computes the Wilson fermion two-point correlator.\n    \"\"\"\n    gamma0 = np.array([[0, 1], [1, 0]], dtype=complex)\n    gamma1 = np.array([[0, -1j], [1j, 0]], dtype=complex)\n    I = np.identity(2, dtype=complex)\n\n    p0_col = p0_vals[:, np.newaxis]\n    p1_row = p1_vals[np.newaxis, :]\n    \n    cos_p0 = np.cos(p0_col)\n    cos_p1 = np.cos(p1_row)\n    sin_p0 = np.sin(p0_col)\n    sin_p1 = np.sin(p1_row)\n    \n    # Construct the Dirac operator grid using broadcasting\n    DW_term1 = (m + (1 - cos_p0) + (1 - cos_p1))[..., np.newaxis, np.newaxis] * I\n    DW_term2 = (1j * sin_p0)[..., np.newaxis, np.newaxis] * gamma0\n    DW_term3 = (1j * sin_p1)[..., np.newaxis, np.newaxis] * gamma1\n\n    DW_grid = DW_term1 + DW_term2 + DW_term3 # Shape (Nt, Nx, 2, 2)\n    SW_grid = np.linalg.inv(DW_grid)\n\n    # IFFT along time axis (axis=0)\n    # Result has indices (t, n1, i, j)\n    S_tilde_W = np.fft.ifft(SW_grid, axis=0) \n\n    # Correlator calculation using einsum for efficiency\n    prod = np.einsum('tnij,tnjk-tnik', S_tilde_W, S_tilde_W.transpose(0, 1, 3, 2).conj())\n    traces = np.einsum('tnii-tn', prod).real # Shape (Nt, Nx)\n    C_W = np.sum(traces, axis=1) / Nx # Sum over n1 (axis=1)\n    \n    return C_W\n\ndef compute_staggered_correlator(Nx, Nt, m, p0_vals, p1_vals):\n    \"\"\"\n    Computes the staggered fermion two-point correlator.\n    \"\"\"\n    p0_col = p0_vals[:, np.newaxis]\n    p1_row = p1_vals[np.newaxis, :]\n    \n    # Construct the Dirac operator grid using broadcasting\n    DS_grid = m + 1j * (np.sin(p0_col) + np.sin(p1_row)) # Shape (Nt, Nx)\n    SS_grid = 1.0 / DS_grid\n    \n    # IFFT along time axis (axis=0)\n    # Result has indices (t, n1)\n    S_tilde_S = np.fft.ifft(SS_grid, axis=0)\n    \n    # Correlator calculation\n    C_S = np.sum(np.abs(S_tilde_S)**2, axis=1) / Nx # Sum over n1 (axis=1)\n    return C_S\n\ndef compute_avg_meff(C, Nt, tmin, tmax):\n    \"\"\"\n    Computes the average effective mass from a correlator.\n    \"\"\"\n    meff = np.zeros(Nt)\n    # Valid t-range for meff is [1, Nt-2]\n    t_range = np.arange(1, Nt - 1)\n    \n    C_t = C[t_range]\n    C_t_minus_1 = C[t_range - 1]\n    C_t_plus_1 = C[t_range + 1]\n    \n    # Avoid division by zero, although not expected in free field theory\n    # Create mask for safe division\n    safe_mask = C_t != 0\n    ratio = np.ones_like(C_t) # Default to 1 if C_t is 0\n    \n    if np.any(safe_mask):\n         ratio[safe_mask] = (C_t_minus_1[safe_mask] + C_t_plus_1[safe_mask]) / (2 * C_t[safe_mask])\n    \n    # Clip ratio at 1.0 to handle potential numerical precision issues\n    # before passing to arccosh.\n    ratio = np.maximum(1.0, ratio)\n    \n    meff[t_range] = np.arccosh(ratio)\n    \n    # Average over the specified fit range\n    avg_meff = np.mean(meff[tmin:tmax+1])\n    return avg_meff\n\ndef solve():\n    \"\"\"\n    Main function to run all test cases and print results.\n    \"\"\"\n    test_cases = [\n        (16, 32, 0.3, 6, 12),\n        (12, 24, 0.1, 5, 10),\n        (20, 20, 0.5, 4, 8),\n        (8, 16, 0.8, 2, 5),\n    ]\n\n    results = []\n    for case in test_cases:\n        Nx, Nt, m, tmin, tmax = case\n        \n        # Setup momentum grids\n        p1_vals = 2 * np.pi * np.arange(Nx) / Nx\n        p0_vals = 2 * np.pi * np.arange(Nt) / Nt\n\n        # Compute correlators\n        C_W = compute_wilson_correlator(Nx, Nt, m, p0_vals, p1_vals)\n        C_S = compute_staggered_correlator(Nx, Nt, m, p0_vals, p1_vals)\n        \n        # Compute average effective masses\n        m_pi_W = compute_avg_meff(C_W, Nt, tmin, tmax)\n        m_pi_S = compute_avg_meff(C_S, Nt, tmin, tmax)\n        \n        # Compute performance metric\n        delta = np.abs(m_pi_W - 2 * m) - np.abs(m_pi_S - 2 * m)\n        \n        results.append([m_pi_W, m_pi_S, delta])\n\n    # Final print statement in the exact required format.\n    print(f\"[[{results[0][0]}, {results[0][1]}, {results[0][2]}], [{results[1][0]}, {results[1][1]}, {results[1][2]}], [{results[2][0]}, {results[2][1]}, {results[2][2]}], [{results[3][0]}, {results[3][1]}, {results[3][2]}]]\")\n\nsolve()\n```", "id": "2407350"}]}