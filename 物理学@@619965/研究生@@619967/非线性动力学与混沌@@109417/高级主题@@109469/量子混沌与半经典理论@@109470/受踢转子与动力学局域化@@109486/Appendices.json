{"hands_on_practices": [{"introduction": "在深入研究量子效应之前，我们必须首先理解其经典对应系统的行为。经典踢转子的动力学由奇里科夫标准映射描述，其混沌行为源于其不动点的不稳定性。第一个练习 [@problem_id:888012] 为我们奠定了基础，你将计算出使系统最简单的平衡点失稳的临界“踢动强度” $K_c$，这是迈向广泛混沌的第一步。这个计算揭示了系统参数如何从根本上改变动力学特性。", "problem": "Chirikov标准映射是哈密顿混沌研究中的一块基石。其量子对应物，即量子踢转子，是量子混沌中的一个范式模型，用于研究诸如动力学局域化等现象，这与经典系统的扩散行为形成鲜明对比。理解其复杂动力学的一个关键首步是分析经典相空间的结构，该结构由其不动点的位置和稳定性决定。\n\n考虑定义在柱面 $(\\theta, p) \\in \\mathbb{S}^1 \\times \\mathbb{R}$ 上的保面积标准映射的一个版本，由以下离散时间演化方程给出：\n$$\np_{n+1} = p_n - K \\sin(\\theta_n)\n$$\n$$\n\\theta_{n+1} = \\theta_n + p_{n+1} \\pmod{2\\pi}\n$$\n这里，$\\theta_n$ 是角位置，$p_n$ 是角动量，$K$ 是一个称为踢力强度的正常数。映射的一个不动点 $(\\theta^*, p^*)$ 是指一个映射到自身的点，即 $(\\theta_{n+1}, p_{n+1}) = (\\theta_n, p_n)$。\n\n不动点的稳定性由在该点求值的映射的雅可比矩阵的特征值决定。如果特征值是单位圆上的一对复共轭数，则该点是稳定的（椭圆型）。如果它们是互为倒数的实数（且不为 $\\pm 1$），则该点是不稳定的（双曲型）。从稳定到不稳定行为的转变发生在特征值变为实数时。\n\n原点 $(\\theta, p) = (0, 0)$ 是此映射的一个不动点。请确定踢力强度的临界值 $K_c$，在该值下原点不动点从稳定转变为不稳定。", "solution": "1. 映射为\n$$\np_{n+1}=p_n-K\\sin\\theta_n,\\qquad\n\\theta_{n+1}=\\theta_n+p_{n+1}\\pmod{2\\pi}。\n$$\n在不动点 $(\\theta^*,p^*)$ 处，我们有\n$$p^*=p^*-K\\sin\\theta^*\\implies\\sin\\theta^*=0,\\quad\n\\theta^*=\\theta^*+p^*\\pmod{2\\pi}\\implies p^*=0。$$\n因此 $(\\theta^*,p^*)=(0,0)$。\n\n2. 计算雅可比矩阵\n$$J=\\begin{pmatrix}\n\\frac{\\partial\\theta_{n+1}}{\\partial\\theta_n}&\\frac{\\partial\\theta_{n+1}}{\\partial p_n}\\\\\n\\frac{\\partial p_{n+1}}{\\partial\\theta_n}&\\frac{\\partial p_{n+1}}{\\partial p_n}\n\\end{pmatrix}\n=\\begin{pmatrix}\n1-\\!K\\cos\\theta_n&1\\\\\n-K\\cos\\theta_n&1\n\\end{pmatrix}。$$\n在点 $(0,0)$ 处，$\\cos0=1$，所以\n$$J(0,0)=\\begin{pmatrix}1-K&1\\\\ -K&1\\end{pmatrix}。$$\n\n3. 特征方程为\n$$\\lambda^2-(\\operatorname{Tr}J)\\lambda+\\det J=0,$$ \n其中\n$$\\operatorname{Tr}J=(1-K)+1=2-K,\\quad\\det J=1。$$\n如果 $|\\operatorname{Tr}J|<2$，特征值位于单位圆上（椭圆型不动点）。\n稳定性的边界为 $|\\!2-K\\!|=2$，得出\n$$2-K=\\pm2\\implies K=0\\text{ 或 }K=4。$$\n由于 $K>0$，转变发生在\n$$K_c=4。$$", "answer": "$$\\boxed{4}$$", "id": "888012"}, {"introduction": "量子世界与经典世界的分歧点在哪里？维格纳函数为量子力学提供了一种强大的相空间表示，为我们架起了一座通往经典直觉的桥梁。在此实践中 [@problem_id:899086]，你将推导维格纳函数在一次“踢动”作用下的演化方程，并明确识别出那些包含普朗克常数 $\\hbar$ 且修正了经典映射的项。这个理论练习揭示了像动力学局域化这类量子现象的数学根源。", "problem": "量子受踢转子（QKR）描述了一个在圆环上运动、受到周期性踢力的粒子。其哈密顿量由下式给出\n$$ H(t) = \\frac{\\hat{p}^2}{2I} + V(\\hat{\\theta}) \\sum_{k=-\\infty}^{\\infty} \\delta(t - k\\tau) $$\n其中 $\\hat{\\theta}$ 是角度算符，$\\hat{p}$ 是正则角动量算符，满足 $[\\hat{\\theta}, \\hat{p}] = i\\hbar$，$I$ 是转动惯量，$\\tau$ 是两次踢力之间的时间周期。踢力势为 $V(\\hat{\\theta}) = K \\cos(\\hat{\\theta})$，其中 $K$ 是踢力强度。\n\n系统的状态可以用Wigner函数 $W(\\theta, p)$ 来描述，它定义在柱面相空间 $(\\theta, p)$ 上，是密度算符 $\\hat{\\rho}$ 的Weyl-Wigner变换：\n$$ W(\\theta, p) = \\frac{1}{2\\pi\\hbar} \\int_{-\\infty}^{\\infty} d\\eta \\, e^{-ip\\eta/\\hbar} \\langle \\theta + \\eta/2 | \\hat{\\rho} | \\theta - \\eta/2 \\rangle $$\nWigner函数在一个周期内的演化，即从第 $k-1$ 次踢力刚结束到第 $k$ 次踢力刚结束，可以由一个两步映射来描述。首先是持续时间为 $\\tau$ 的自由演化，然后是一次瞬时踢力。在本问题中，我们只关注由踢力引起的Wigner函数的变换。\n\n设 $W(\\theta, p)$ 是踢力作用前的瞬时Wigner函数。踢力将其变换为 $W'(\\theta, p)$。该变换可以由一个线性算符 $\\mathcal{K}$ 描述，使得 $W'(\\theta, p) = \\mathcal{K} W(\\theta, p)$。算符 $\\mathcal{K}$ 可以表示为动量导数算符 $\\partial_p \\equiv \\frac{\\partial}{\\partial p}$ 的形式幂级数：\n$$ \\mathcal{K} = \\sum_{j=0}^{\\infty} c_j(\\theta, K, \\hbar) \\frac{\\partial^j}{\\partial p^j} $$\n求系数 $c_3(\\theta, K, \\hbar)$，该系数包含了对超越简单对流和扩散近似的经典动力学的主要量子修正。", "solution": "我们从这样一个事实出发：由 $V(\\hat\\theta)=K\\cos\\hat\\theta$ 引起的瞬时踢力作用在Wigner函数上，其作用相当于一个Moyal型算符\n$$\nW'(\\theta,p)\n=\\exp\\!\\Bigl[\\frac{V(\\theta+\\tfrac{i\\hbar}{2}\\partial_p)-V(\\theta-\\tfrac{i\\hbar}{2}\\partial_p)}{i\\hbar}\\Bigr]\\;W(\\theta,p)\\,.\n$$\n1.  定义 \n$$D\\;=\\;V\\bigl(\\theta+\\tfrac{i\\hbar}{2}\\partial_p\\bigr)-V\\bigl(\\theta-\\tfrac{i\\hbar}{2}\\partial_p\\bigr)\n=K\\bigl[\\cos(\\theta+\\tfrac{i\\hbar}{2}\\partial_p)-\\cos(\\theta-\\tfrac{i\\hbar}{2}\\partial_p)\\bigr].$$ \n使用 $\\cos(x+a)-\\cos(x-a)=-2\\sin x\\,\\sin a$ 和 \n$\\sin\\bigl(i\\frac{\\hbar}{2}\\partial_p\\bigr)=i\\,\\sinh\\!\\bigl(\\frac{\\hbar}{2}\\partial_p\\bigr)$， \n$$\nD=-2K\\sin\\theta\\;\\sin\\!\\Bigl(\\tfrac{i\\hbar}{2}\\partial_p\\Bigr)\n=-2iK\\sin\\theta\\;\\sinh\\!\\Bigl(\\tfrac{\\hbar}{2}\\partial_p\\Bigr).\n$$\n2.  因此，踢力算符为\n$$\n\\mathcal K\n=\\exp\\!\\Bigl[\\frac{D}{i\\hbar}\\Bigr]\n=\\exp\\!\\Bigl[-\\tfrac{2K}{\\hbar}\\sin\\theta\\;\\sinh\\!\\bigl(\\tfrac{\\hbar}{2}\\partial_p\\bigr)\\Bigr].\n$$\n展开 $\\sinh(x)=\\sum_{m=0}^\\infty x^{2m+1}/(2m+1)!$ 并设 \n$$\nA=-\\tfrac{2K}{\\hbar}\\sin\\theta\\sum_{m=0}^\\infty\\frac{(\\hbar/2)^{2m+1}}{(2m+1)!}\\,\\partial_p^{2m+1}\n=\\sum_{j\\;\\mathrm{odd}}a_j\\,\\partial_p^j,\n\\qquad\na_{2m+1}=-\\frac{2K\\sin\\theta\\,\\hbar^{2m}}{2^{2m+1}(2m+1)!}\\,. \n$$\n那么 \n$$\n\\mathcal K=\\sum_{n=0}^\\infty\\frac{A^n}{n!},\n$$\n$\\partial_p^3$ 的系数 $c_3$ 有两个贡献来源：一个来自 $n=1$ 且 $A$ 中取 $j=3$ 的项，另一个来自 $n=3$ 且取三个 $j=1$ 的因子。因此\n\n$$\nc_3^{(1)}\n=a_3\n=-\\frac{2K\\sin\\theta\\,\\hbar^2}{2^3\\cdot3!}\n=-\\frac{K\\hbar^2}{24}\\,\\sin\\theta,\n$$\n\n\n$$\nc_3^{(3)}\n=\\frac{1}{3!}(a_1)^3\n=\\frac{1}{6}\\bigl(-K\\sin\\theta\\bigr)^3\n=-\\frac{K^3}{6}\\,\\sin^3\\theta.\n$$\n\n将它们相加，我们得到\n$$\nc_3(\\theta,K,\\hbar)\n=-\\frac{K\\hbar^2}{24}\\sin\\theta\\;-\\;\\frac{K^3}{6}\\sin^3\\theta.\n$$", "answer": "$$\\boxed{-\\frac{K\\hbar^2}{24}\\sin\\theta-\\frac{K^3}{6}\\sin^3\\theta}$$", "id": "899086"}, {"introduction": "在掌握了经典和理论基础之后，是时候亲眼见证量子行为了。最后一个实践 [@problem_id:2403604] 是一个计算项目，你将从第一性原理出发，构建一个量子踢转子的模拟程序。通过追踪动量方差 $\\sigma_p^2(n)$ 随时间（踢动次数 $n$）的演化，你将观察到一个在经典上表现为混沌扩散的系统如何展现出动力学局域化——一种对经典扩散的量子抑制，这是量子干涉效应的一个惊人体现。", "problem": "您将基于含时薛定谔方程和幺正演化的第一性原理，实现一个量子受踢陀的模拟，以展示动力学局域化——一种对经典混沌的量子抑制现象。目标是根据受踢陀的哈密顿量构建单周期（Floquet）演化，设计一个在离散环面上数值稳定且幺正的算法，并通过计算动量空间方差随时间的变化来验证其诊断行为。角度必须以弧度为单位，所有物理量均为无量纲。\n\n从圆上的含时薛定谔方程 $i \\hbar \\, \\partial_t \\psi(\\theta,t) = \\hat{H}(t)\\,\\psi(\\theta,t)$ 和受踢陀哈密顿量开始，\n$$\n\\hat{H}(t) = \\frac{\\hat{p}^2}{2} + K \\cos\\hat{\\theta} \\sum_{n\\in\\mathbb{Z}} \\delta(t - n \\tau),\n$$\n其中 $\\hat{\\theta}$ 是具有 $2\\pi$ 周期性的角度算符，$\\hat{p}$ 是具有整数本征值的角动量算符，$K$ 是踢力强度，$\\tau$ 是两次踢之间的时间间隔。在本次任务中，设置 $\\hbar = 1$，$\\tau = 1$，并在一个离散环面上处理该系统，该环面有 $N$ 个等间距角度格点 $\\theta_j = 2\\pi j/N$，其中 $j \\in \\{0,1,\\dots,N-1\\}$。动量指数 $m$ 遍历快速傅里叶变换（FFT）输出顺序中的 $N$ 个整数 $m \\in \\{0,1,\\dots,N-1\\}$，对于偶数 $N$，这对应于有序集合 $\\{0,1,\\dots,N/2-1,-N/2,\\dots,-1\\}$。您必须使用正交归一的离散傅里叶变换以保持幺正性。\n\n任务：\n1) 基于上述基本定律和核心定义，推导出以自由转子部分和脉冲踢相关的幺正算符乘积表示的单周期演化。展示这些算符如何分别在动量表象和角度表象中对角地作用，并解释一个在环面上的幺正且数值稳定的分步算符法如何使用离散傅里叶变换在这些表象之间交替切换而不损失模长。\n\n2) 设计一个算法，该算法：\n- 在大小为 $N$ 的角度格点上表示波函数，\n- 在角度空间中以逐点相乘的方式应用踢算符，\n- 在动量空间中以逐点相乘的方式应用自由转子算符，\n- 使用具有幺正归一化的正交归一快速傅里叶变换（FFT）在角度和动量表象之间进行转换。\n\n3) 使用动量为 $m=0$ 的动量本征态作为初始态。在角度表象中，这是一个均匀态 $\\psi(\\theta_j,0) = 1/\\sqrt{N}$。每次踢之后，计算动量空间概率分布 $P_m(n) = |\\Phi_m(n)|^2$，其中 $\\Phi_m(n)$ 是在第 $n$ 次应用单周期演化算符后瞬间的动量空间波函数。然后计算动量均值 $\\langle m\\rangle_n = \\sum_m m \\, P_m(n)$ 和方差 $\\sigma_p^2(n) = \\sum_m m^2 P_m(n) - \\langle m\\rangle_n^2$。\n\n4) 对于指定的参数，数值研究在 $n \\in \\{1,2,\\dots,M\\}$ 范围内 $\\sigma_p^2(n)$ 的时间演化，并使用 $\\sigma_p^2(n)$ 对 $n$ 的线性最小二乘拟合来估计早期和晚期斜率，作为增长或局域化的诊断指标。所有角度必须以弧度为单位。\n\n所有测试使用的全局模拟参数：\n- 希尔伯特空间大小 $N = 512$，\n- 踢的次数 $M = 600$，\n- 踢的时间间隔 $\\tau = 1$，\n- 约化普朗克常数 $\\hbar = 1$，\n- 角度格点 $\\theta_j = 2\\pi j/N$，其中 $j \\in \\{0,1,\\dots,N-1\\}$，\n- 正交归一的FFT归一化。\n\n斜率估计窗口：\n- 早期窗口：$n \\in \\{1,2,\\dots,60\\}$，\n- 晚期窗口：$n \\in \\{451,452,\\dots,600\\}$。\n\n测试套件：\n- 测试 $1$（除平凡自由相位外无动力学）：$K = 0$。输出一个布尔值，指示最终方差是否满足 $\\sigma_p^2(M) < 10^{-12}$。\n- 测试 $2$（弱踢）：$K = 0.5$。输出一个布尔值，指示最终方差是否满足 $\\sigma_p^2(M) < 1.0$。\n- 测试 $3$（经典混沌区域，早期增长）：$K = 5.0$。输出一个布尔值，指示早期斜率是否严格为正且超过 $0.01$。\n- 测试 $4$（经典混沌区域，晚期动力学局域化）：$K = 5.0$。输出一个布尔值，指示晚期斜率的绝对值是否小于 $0.05$。\n\n最终输出格式：\n您的程序应生成单行输出，其中包含用方括号括起来的逗号分隔的结果列表（例如，`[result1,result2,result3,result4]`）。四个条目必须按测试 $1$ 到 $4$ 的顺序排列，并且每个条目都必须是一个布尔值。", "solution": "问题陈述已经过验证，被认为是合理的。它具有科学依据，提法恰当，并包含了唯一解所需的所有信息。任务是模拟量子受踢陀——量子混沌研究中的一个典范模型——以展示动力学局域化现象。我们将首先从系统的哈密顿量推导单周期演化算符，然后构建一个数值稳定的算法来模拟系统动力学并计算所需的诊断指标。\n\n该系统由含时薛定谔方程 $i \\hbar \\frac{\\partial}{\\partial t} |\\psi(t)\\rangle = \\hat{H}(t) |\\psi(t)\\rangle$ 控制，其受踢陀的哈密顿量为：\n$$\n\\hat{H}(t) = \\frac{\\hat{p}^2}{2} + K \\cos\\hat{\\theta} \\sum_{n \\in \\mathbb{Z}} \\delta(t - n\\tau)\n$$\n在这里，$\\hat{p}$ 是角动量算符，我们用 $m$ 表示其本征值，$\\hat{\\theta}$ 是角度算符。问题指定了无量纲单位，其中约化普朗克常数 $\\hbar = 1$，踢的周期 $\\tau = 1$。\n\n状态向量 $|\\psi(t)\\rangle$ 在一个周期内的演化，即从一次踢之后的时间 $t_n = n\\tau$ 到下一次踢之后的时间 $t_{n+1} = (n+1)\\tau$，由 Floquet 算符 $\\hat{F}$ 描述。此演化包含两个截然不同的部分：由动能哈密顿量 $\\hat{H}_0 = \\hat{p}^2/2$ 控制的、持续时间为 $\\tau$ 的自由旋转，随后是由势 $\\hat{V}(\\theta) = K \\cos\\hat{\\theta}$ 描述的瞬时踢。\n\n自由演化一个周期 $\\tau$ 的幺正算符是：\n$$\n\\hat{U}_0 = \\exp\\left(-\\frac{i}{\\hbar} \\hat{H}_0 \\tau\\right) = \\exp\\left(-\\frac{i \\hat{p}^2 \\tau}{2\\hbar}\\right)\n$$\n在时间 $t=(n+1)\\tau$ 的踢（一个冲量）的幺正算符是：\n$$\n\\hat{U}_K = \\exp\\left(-\\frac{i}{\\hbar} \\int_{ (n+1)\\tau - \\epsilon }^{ (n+1)\\tau + \\epsilon } K \\cos\\hat{\\theta} \\, \\delta(t - (n+1)\\tau) \\, dt \\right) = \\exp\\left(-\\frac{i K \\cos\\hat{\\theta}}{\\hbar}\\right)\n$$\nFloquet 算符 $\\hat{F}$ 是这两个算符的乘积。第 $n$ 次踢之后的状态 $|\\psi_n\\rangle$ 通过 $|\\psi_{n+1}\\rangle = \\hat{F} |\\psi_n\\rangle$ 的作用演化为第 $n+1$ 次踢之后的状态 $|\\psi_{n+1}\\rangle$。代表自由演化后紧接着一次踢的正确顺序是：\n$$\n\\hat{F} = \\hat{U}_K \\hat{U}_0 = \\exp\\left(-\\frac{i K \\cos\\hat{\\theta}}{\\hbar}\\right) \\exp\\left(-\\frac{i \\hat{p}^2 \\tau}{2\\hbar}\\right)\n$$\n当 $\\hbar=1$ 和 $\\tau=1$ 时，这简化为：\n$$\n\\hat{F} = \\exp(-i K \\cos\\hat{\\theta}) \\exp\\left(-i \\frac{\\hat{p}^2}{2}\\right)\n$$\n这种结构是分步算符数值方法的理想形式。算符 $\\hat{U}_0$ 在动量基中是对角的，在该基中 $\\hat{p}$ 的作用是乘以其本征值 $m$。算符 $\\hat{U}_K$ 在角度（位置）基中是对角的，在该基中 $\\cos\\hat{\\theta}$ 的作用是乘以 $\\cos\\theta$。\n\n通过在离散格点上表示波函数 $\\psi$，并使用快速傅里叶变换（FFT）在角度和动量表象之间切换，可以构建一个数值稳定且幺正的算法。系统在一个环面上被离散化，该环面有 $N$ 个角度点 $\\theta_j = 2\\pi j/N$，其中 $j \\in \\{0, 1, \\dots, N-1\\}$。相应的离散动量本征值由整数 $m \\in \\{0, 1, \\dots, N/2-1, -N/2, \\dots, -1\\}$ 给出，这是 FFT 频率的标准顺序。正交归一的 FFT 及其逆变换（IFFT）作为角度空间表示 $\\psi_j$ 和动量空间表示 $\\Phi_m$ 之间的幺正变换。这确保了波函数的模在整个模拟过程中是守恒的，这是物理准确性和数值稳定性的关键要求。\n\n单个时间步的算法，将状态从第 $n-1$ 次踢后推进到第 $n$ 次踢后，如下所示：\n$1$. 从角度表象中的波函数 $\\psi^{(n-1)}$ 开始。\n$2$. 使用正交归一的 FFT 变换到动量表象：$\\Phi^{(n-1)} = \\text{FFT}(\\psi^{(n-1)})$。\n$3$. 应用自由转子演化算符，它在此基中是一个对角矩阵：$\\Phi' = \\exp(-i m^2/2) \\cdot \\Phi^{(n-1)}$。\n$4$. 使用正交归一的 IFFT 变换回角度表象：$\\psi' = \\text{IFFT}(\\Phi')$。\n$5$. 应用踢算符，它在此基中是一个对角矩阵：$\\psi^{(n)} = \\exp(-i K \\cos\\theta_j) \\cdot \\psi'$。结果 $\\psi^{(n)}$ 是第 $n$ 次踢后瞬间的状态。\n\n为了进行诊断，在每次踢 $n$ 之后，我们计算动量空间方差。\n$1$. 第 $n$ 次踢后的动量空间波函数是 $\\Phi^{(n)} = \\text{FFT}(\\psi^{(n)})$。\n$2$. 动量概率分布是 $P_m(n) = |\\Phi_m(n)|^2$。\n$3$. 平均动量是 $\\langle m \\rangle_n = \\sum_m m P_m(n)$。\n$4$. 方差是 $\\sigma_p^2(n) = \\langle m^2 \\rangle_n - \\langle m \\rangle_n^2 = \\sum_m m^2 P_m(n) - (\\langle m \\rangle_n)^2$。\n\n初始态是动量为 $m=0$ 的动量本征态。在角度表象中，这是一个均匀态 $\\psi(\\theta_j, 0) = 1/\\sqrt{N}$。由于初始态和踢势（余弦函数）的对称性，平均动量 $\\langle m \\rangle_n$ 预计在整个模拟过程中保持为零。因此，方差简化为动量平方的均值，$\\sigma_p^2(n) = \\langle m^2 \\rangle_n$。\n\n模拟将在大小为 $N=512$ 的希尔伯特空间中进行 $M=600$ 次踢。数值测试研究了不同踢力强度 $K$ 下 $\\sigma_p^2(n)$ 的行为：\n- 对于 $K=0$，系统只进行自由演化。由于初始态是自由转子哈密顿量的能量为 $0$ 的本征态，它是一个定态。方差 $\\sigma_p^2(n)$ 应保持为零，直到机器精度。\n- 对于小的 $K$（例如 $K=0.5$），系统处于弱混沌区域。方差应该会初始增长，然后在一个较小的值处饱和。\n- 对于大的 $K$（例如 $K=5.0$），相应的经典系统是强混沌的。量子系统最初通过动量方差的扩散式增长 $\\sigma_p^2(n) \\propto n$ 来模仿这种混沌。这对应于 $\\sigma_p^2(n)$ 早期演化中的正斜率。然而，在较晚的时刻，量子干涉效应会抑制这种扩散，导致动力学局域化。方差饱和，其增长率趋于零。这通过计算 $\\sigma_p^2(n)$ 对 $n$ 在晚期窗口中的斜率来验证。斜率通过线性最小二乘拟合确定。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Simulates the quantum kicked rotor to test for dynamical localization.\n    \"\"\"\n\n    # Global simulation parameters\n    N = 512\n    M = 600\n    TAU = 1.0\n    HBAR = 1.0\n\n    # Test suite parameters\n    test_cases = [\n        {'id': 1, 'K': 0.0, 'check': 'final_variance', 'params': {'threshold': 1e-12}},\n        {'id': 2, 'K': 0.5, 'check': 'final_variance', 'params': {'threshold': 1.0}},\n        {'id': 3, 'K': 5.0, 'check': 'early_slope', 'params': {'threshold': 0.01}},\n        {'id': 4, 'K': 5.0, 'check': 'late_slope', 'params': {'threshold': 0.05}},\n    ]\n\n    # Windows for slope estimation\n    early_time_window = np.arange(1, 61)\n    late_time_window = np.arange(451, 601)\n    \n    results = []\n\n    for case in test_cases:\n        K = case['K']\n        \n        # Discretized grids\n        theta_grid = 2 * np.pi * np.arange(N) / N\n        # Momentum eigenvalues in FFT order\n        m_grid = N * np.fft.fftfreq(N)\n\n        # Initial state: momentum eigenstate m=0\n        # This is a uniform state in the angle representation.\n        psi = np.ones(N, dtype=np.complex128) / np.sqrt(N)\n        \n        # Pre-compute evolution operators\n        kick_op = np.exp(-1j * K * np.cos(theta_grid) / HBAR)\n        free_op = np.exp(-1j * m_grid**2 * TAU / (2 * HBAR))\n\n        variances = []\n\n        for n in range(M):\n            # The one-period (Floquet) evolution: free evolution then kick.\n            # This is the split-operator method.\n            \n            # --- Free evolution part (in momentum space) ---\n            # 1. Transform to momentum space\n            phi = np.fft.fft(psi, norm='ortho')\n            # 2. Apply free evolution operator\n            phi = free_op * phi\n            # 3. Transform back to angle space\n            psi = np.fft.ifft(phi, norm='ortho')\n\n            # --- Kick part (in angle space) ---\n            # 4. Apply kick operator\n            psi = kick_op * psi\n\n            # --- Diagnostics after the kick ---\n            # Calculate momentum variance\n            phi_after_kick = np.fft.fft(psi, norm='ortho')\n            prob_dist = np.abs(phi_after_kick)**2\n            \n            # For the symmetric initial state and potential, mean momentum is zero.\n            # We calculate it for robustness.\n            mean_m = np.sum(m_grid * prob_dist)\n            mean_m_sq = np.sum(m_grid**2 * prob_dist)\n            variance = mean_m_sq - mean_m**2\n            variances.append(variance)\n\n        variances = np.array(variances)\n\n        # Perform the check required by the test case\n        check_type = case['check']\n        if check_type == 'final_variance':\n            final_variance = variances[-1]\n            threshold = case['params']['threshold']\n            # Tests 1 and 2 check if variance is below a threshold\n            result = final_variance  threshold\n        \n        elif check_type == 'early_slope':\n            var_early = variances[early_time_window - 1]\n            slope, _ = np.polyfit(early_time_window, var_early, 1)\n            threshold = case['params']['threshold']\n            # Test 3 checks for positive diffusive growth\n            result = slope > threshold\n\n        elif check_type == 'late_slope':\n            # For Test 3, we need the variances from the same run with K=5.0\n            var_late = variances[late_time_window - 1]\n            slope, _ = np.polyfit(late_time_window, var_late, 1)\n            threshold = case['params']['threshold']\n            # Test 4 checks for saturation (localization)\n            result = np.abs(slope)  threshold\n        \n        else:\n            # Should not happen\n            result = False\n\n        results.append(result)\n\n    # Format the final output as a string list of booleans\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2403604"}]}