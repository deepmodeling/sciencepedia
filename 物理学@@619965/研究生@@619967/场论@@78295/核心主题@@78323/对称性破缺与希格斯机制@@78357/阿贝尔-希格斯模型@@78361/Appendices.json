{"hands_on_practices": [{"introduction": "这项首要练习是一项关键的“纸上”推导，它揭示了希格斯机制的数学核心。通过应用欧拉-拉格朗日方程，你将看到与希格斯真空的相互作用如何改变我们熟悉的麦克斯韦方程组。这项练习将明确展示规范玻色子的质量项是如何动态产生的，使其成为理解有质量规范理论的基石。", "problem": "考虑在度规符号为 $(+,-,-,-)$ 的 $(3+1)$ 维闵可夫斯基时空中的阿贝尔-希格斯模型。该系统的动力学由以下拉格朗日密度描述：\n$$ \\mathcal{L} = -\\frac{1}{4} F_{\\mu\\nu}F^{\\mu\\nu} + (D_\\mu \\phi)^* (D^\\mu \\phi) - V(\\phi) $$\n其中 $\\phi$ 是一个复标量场，$A_\\mu$ 是一个 U(1) 规范场。场强张量为 $F_{\\mu\\nu} = \\partial_\\mu A_\\nu - \\partial_\\nu A_\\mu$，协变导数为 $D_\\mu = \\partial_\\mu + iqA_\\mu$，其中 $q$ 是耦合常数（电荷）。势能由 $V(\\phi) = -\\mu^2 |\\phi|^2 + \\lambda (|\\phi|^2)^2$ 给出，其中 $\\mu^2  0$ 且 $\\lambda  0$，这会导致自发对称性破缺。\n\n自发对称性破缺后，标量场获得一个非零的真空期望值 (VEV)。通过选择幺正规范，标量场可以用其实真空期望值 $v$ 和一个实标量涨落场 $h(x)$ 表示为：\n$$ \\phi(x) = \\frac{1}{\\sqrt{2}}(v+h(x)) $$\n从该拉格朗日量导出的规范场 $A_\\nu$ 的欧拉-拉格朗日方程，可以表示为类似于带源的麦克斯韦方程组的形式：\n$$ \\partial_\\mu F^{\\mu\\nu} = J_{\\text{eff}}^\\nu $$\n确定有效四维流 $J_{\\text{eff}}^\\nu$ 的表达式。你的答案应使用希格斯涨落场 $h(x)$、规范场 $A^\\nu(x)$、真空期望值 $v$ 和电荷 $q$ 来表示。", "solution": "1. $A_ν$ 的欧拉-拉格朗日方程：\n$$\\partial_\\mu F^{\\mu\\nu}=J_{\\text{eff}}^\\nu,\\quad\nJ_{\\text{eff}}^\\nu=-\\frac{\\partial\\mathcal{L}_{\\rm mat}}{\\partial A_\\nu}.$$\n\n2. 物质拉格朗日项：\n$$(D_\\mu\\phi)^*(D^\\mu\\phi)\n=\\partial_\\mu\\phi^*\\partial^\\mu\\phi\n+i\\,qA^\\mu(\\phi^*\\partial_\\mu\\phi-\\phi\\partial_\\mu\\phi^*)\n+q^2A_\\mu A^\\mu|\\phi|^2.$$\n\n3. 计算流：\n$$J_{\\text{eff}}^\\nu=-\\Bigl[i\\,q(\\phi^*\\partial^\\nu\\phi-\\phi\\partial^\\nu\\phi^*)\n+2q^2|\\phi|^2A^\\nu\\Bigr]\n=i\\,q(\\phi\\partial^\\nu\\phi^*-\\phi^*\\partial^\\nu\\phi)-2q^2|\\phi|^2A^\\nu.$$\n\n4. 在幺正规范 $\\phi=(v+h)/\\sqrt2\\in\\mathbb R$ 下：\n$$\\phi^*=\\phi,\\quad\\phi^*\\partial^\\nu\\phi-\\phi\\partial^\\nu\\phi^*=0,\\quad\n|\\phi|^2=\\frac{(v+h)^2}{2}.$$\n\n5. 因此\n$$J_{\\text{eff}}^\\nu=-2q^2\\frac{(v+h)^2}{2}A^\\nu=-q^2(v+h)^2A^\\nu.$$", "answer": "$$\\boxed{-\\,q^2\\,(v+h(x))^2\\,A^\\nu(x)}$$", "id": "1093426"}, {"introduction": "除了简单的真空解之外，阿贝尔-希格斯模型还支持被称为拓扑缺陷的、稳定的、类粒子的构型。本次实践聚焦于尼尔森-奥勒森涡旋（Nielsen-Olesen vortex），它是超导体中磁通管和宇宙学中宇宙弦的直接对应物。你将探索一个被称为 BPS 极限的特殊情况，在这种情况下，场之间优雅的相互作用使得对涡旋的关键性质进行精确计算成为可能。", "problem": "考虑三维时空（二维空间加一维时间）中的 Abelian-Higgs 模型。该理论描述了一个带电荷 $e$ 的复标量场 $\\phi$ 与一个 U(1) 规范场 $A_\\mu = (A_0, A_1, A_2)$ 的相互作用。我们关心的是静态场构型，其中 $\\partial_0 \\phi = 0$ 且对于 $i=1, 2$ 有 $\\partial_0 A_i = 0$。这种静态构型的能量由以下泛函给出：\n$$ E = \\int d^2x \\left[ \\frac{1}{2} |D_i \\phi|^2 + \\frac{1}{2} B^2 + V(\\phi) \\right] $$\n其中积分是在空间平面 $\\mathbb{R}^2$ 上进行的。协变导数为 $D_i \\phi = (\\partial_i - i e A_i) \\phi$，磁场为 $B = \\partial_1 A_2 - \\partial_2 A_1$，势能被设定为特定的 Bogomol'nyi-Prasad-Sommerfield (BPS) 形式：\n$$ V(\\phi) = \\frac{e^2}{8} (|\\phi|^2 - v^2)^2 $$\n其中 $v$ 是一个正常数，代表 $|\\phi|$ 的真空期望值。\n\n该理论允许存在被称为 Nielsen-Olesen 涡旋的稳定、有限能量的孤子解。这些解的特征是一个量子化的拓扑荷 $n \\in \\mathbb{Z}$，它对应于 $\\phi$ 的相位在空间无穷远处的绕数。势能的 BPS 性质意味着任何构型的能量都有一个下界，该下界与其拓扑荷成正比。对于满足一组称为 BPS 方程的一阶微分方程的构型，该界可以被饱和。\n\n对于拓扑荷为 $n=1$ 的基本涡旋，确定其中心（$r=0$）处的磁场大小 $|B|$。", "solution": "为了确定拓扑荷 $n=1$ 的 Nielsen-Olesen 涡旋中心的磁场大小 $|B|$，我们分析了从 2+1 维 Abelian-Higgs 模型的能量泛函中推导出的 Bogomol'nyi-Prasad-Sommerfield (BPS) 方程。\n\n---\n\n### **第一步：能量泛函和 BPS 分解**\n\n静态能量由下式给出：\n$$\nE = \\int d^2x \\left[ \\frac{1}{2} |D_i \\phi|^2 + \\frac{1}{2} B^2 + V(\\phi) \\right],\n$$\n其中 $ D_i \\phi = (\\partial_i - i e A_i)\\phi $，$ B = \\partial_1 A_2 - \\partial_2 A_1 $，势能为：\n$$\nV(\\phi) = \\frac{e^2}{8} (|\\phi|^2 - v^2)^2.\n$$\n\n通过 Bogomolnyi 技巧可以证明，能量泛函的最小值在场构型满足一组一阶微分方程（即 BPS 方程）时取得。这些方程为：\n$$\nD_1 \\phi \\pm i D_2 \\phi = 0, \\quad B = \\mp \\frac{e}{2}(|\\phi|^2 - v^2).\n$$\n\n---\n\n### **第二步：$n=1$ 涡旋的径向拟设**\n\n对于绕数为 $n=1$ 的静态、径向对称解，我们使用如下拟设：\n$$\n\\phi(r) = v f(r) e^{i\\theta}, \\quad A_\\theta(r) = \\frac{1 - a(r)}{e r},\n$$\n其中 $f(r)$ 和 $a(r)$ 是满足以下边界条件的实轮廓函数：\n$$\nf(0) = 0, \\quad f(\\infty) = 1, \\quad a(0) = 1, \\quad a(\\infty) = 0.\n$$\n\n磁场变为：\n$$\nB = \\frac{1}{r} \\partial_r (r A_\\theta) = -\\frac{a'(r)}{e r}.\n$$\n\n根据 BPS 方程 $ B = \\frac{e}{2}(v^2 - |\\phi|^2) $（选择一个符号），我们代入 $ |\\phi|^2 = v^2 f(r)^2 $ 得到：\n$$\nB(r) = \\frac{e v^2}{2} (1 - f(r)^2).\n$$\n\n---\n\n### **第三步：计算 $r=0$ 处的 $B$**\n\n在涡旋中心（$r=0$），由于绕数条件，标量场为零：\n$$\n|\\phi(0)| = v f(0) = 0 \\quad \\Rightarrow \\quad f(0) = 0.\n$$\n\n代入 $B(r)$ 的表达式中：\n$$\nB(0) = \\frac{e v^2}{2} (1 - f(0)^2) = \\frac{e v^2}{2}.\n$$\n\n因此，中心处的磁场大小为：\n$$\n|B(0)| = \\frac{e v^2}{2}.\n$$\n\n---\n\n### **结论**\n\n势能的 BPS 性质确保了磁场与标量场对其真空期望值的偏离直接相关。在涡旋的核心处，标量场为零，磁场达到其最大值。", "answer": "$$\\boxed{\\frac{e v^2}{2}}$$", "id": "382048"}, {"introduction": "这最后一项实践将带你从解析解走向大规模计算物理，将理论应用于宇宙学背景。你将实现一个算法，该算法模拟早期宇宙中宇宙弦网络的形成，这一过程由阿贝尔-希格斯模型主导。这个动手编程练习将让你对这些理论结构如何从随机初始条件中涌现，以及它们的统计特性（如弦密度）如何被定量测量，有一个切实的理解。", "problem": "您需要构建一个完整的、可运行的程序，该程序在一个周期性的三维立方晶格上，从阿贝尔-希格斯模型在伦敦极限下的随机初始条件出发，生成宇宙弦长度密度的规范不变估计。所有计算都应在晶格单位下进行，晶格间距设置为 $a=1$。所有角度必须以弧度为单位。最终结果必须打印为四舍五入到六位小数的实数。\n\n从以下基础且经过充分检验的基点开始：\n(1) 阿贝尔-希格斯模型具有局域1次幺正群（U(1)）规范对称性。在伦敦极限下，复标量（希格斯）场写为 $\\phi(x) = v \\exp\\{ \\mathrm{i}\\,\\theta(x) \\}$，其模 $v$ 固定，规范场在链路上由U(1)链路变量 $U_{\\mu}(x) = \\exp\\{\\mathrm{i}\\,\\alpha_{\\mu}(x)\\}$ 表示。\n(2) 链路上的规范不变相位差构建为 $\\Delta_{\\mu}\\theta(x) - \\alpha_{\\mu}(x)$ 的主支，其中 $\\Delta_{\\mu}\\theta(x) \\equiv \\theta(x+\\hat{\\mu}) - \\theta(x)$，主支函数将任意角度映射到区间 $(-\\pi,\\pi]$。\n(3) $\\phi(x)$ 在模 $2\\pi$ 意义下的单值性，加上U(1)规范不变性，意味着围绕一个基本格框 $(\\mu,\\nu)$ 的规范不变相位差的定向和等于 $2\\pi n_{p}$，其中 $n_{p}$ 为某个整数。一个非零整数 $n_{p}$ 标志着有一段局域弦段穿过该格框。\n(4) 在三维空间中，每个具有非零 $|n_{p}|$ 的格框对应于一段长度为 $a$ 的弦段，该弦段沿着与格框垂直的对偶链路。因此，当 $a=1$ 时，总弦长 $L$ 等于所有格框上 $|n_{p}|$ 的总和。于是弦长密度为 $\\rho = L / V$，其中体积 $V = N^{3}$。\n\n任务：\n使用您选择的通用编程语言实现以下算法。您的程序必须是自包含的，并且不读取任何输入。\n\n(1) 晶格与场。使用尺寸为 $N \\times N \\times N$ 的周期性立方晶格，晶格间距 $a=1$。在格点上表示标量相位场 $\\theta(\\mathbf{x})$，在链路上表示规范场链路角 $\\alpha_{\\mu}(\\mathbf{x})$，其中 $\\mu \\in \\{x,y,z\\}$。\n(2) 相关的标量相位。通过在傅里叶空间中用因子 $\\exp\\{-\\tfrac{1}{2}\\xi^{2}|\\mathbf{k}|^{2}\\}$ 过滤白噪声，生成一个均值为零的高斯随机场 $g(\\mathbf{x})$，其具有近似高斯的两点相关性，相关长度为 $\\xi$，其中 $\\mathbf{k}$ 使用周期性的离散角频率。通过 $\\theta(\\mathbf{x}) = \\mathrm{wrap}(g(\\mathbf{x}))$ 映射到相位，其中 $\\mathrm{wrap}(\\cdot)$ 映射到 $(-\\pi,\\pi]$。\n(3) 随机规范链路。对于每个链路方向 $\\mu$，从均值为 $0$、标准差为 $\\sigma_{A}$ 的正态分布中独立抽取 $\\alpha_{\\mu}(\\mathbf{x})$，然后将每个值卷绕到 $(-\\pi,\\pi]$。\n(4) 规范不变链路角。定义\n\n$$\n\\omega_{\\mu}(\\mathbf{x}) = \\mathrm{wrap}\\!\\left( \\theta(\\mathbf{x}+\\hat{\\mu}) - \\theta(\\mathbf{x}) - \\alpha_{\\mu}(\\mathbf{x}) \\right).\n$$\n\n(5) 格框卷绕整数。对于位于格点 $\\mathbf{x}$ 处 $(\\mu,\\nu)$ 平面中的每个定向格框，计算\n\n$$\ns_{\\mu\\nu}(\\mathbf{x}) = \\omega_{\\mu}(\\mathbf{x}) + \\omega_{\\nu}(\\mathbf{x}+\\hat{\\mu}) - \\omega_{\\mu}(\\mathbf{x}+\\hat{\\nu}) - \\omega_{\\nu}(\\mathbf{x}),\n$$\n\n由于周期性边界，所有格点索引都对 $N$ 取模。通过以下方式定义整数卷绕：\n\n$$\nn_{\\mu\\nu}(\\mathbf{x}) = \\mathrm{round}\\!\\left( \\frac{s_{\\mu\\nu}(\\mathbf{x})}{2\\pi} \\right).\n$$\n\n(6) 弦长密度。令\n\n$$\nL = \\sum_{\\mathbf{x}} \\sum_{\\mu\\nu} \\left| n_{\\mu\\nu}(\\mathbf{x}) \\right|, \\quad \\rho = \\frac{L}{N^{3}}.\n$$\n\n以晶格单位报告 $\\rho$ 作为一个实数。\n(7) 角度单位。所有角度均以弧度为单位。\n(8) 四舍五入。将报告的每个 $\\rho$ 四舍五入到六位小数。\n\n测试套件：\n在以下参数集上运行您的程序，其中每个元组为 $(N,\\ \\xi,\\ \\sigma_{A},\\ \\text{seed})$，$\\text{seed}$ 用于初始化伪随机数生成器以确保可复现性：\n- 案例1 (正常路径): $(16,\\ 2.5,\\ 0.2,\\ 12345)$。\n- 案例2 (短相关长度): $(16,\\ 0.5,\\ 0.2,\\ 54321)$。\n- 案例3 (长相关长度): $(16,\\ 4.0,\\ 0.2,\\ 202311)$。\n- 案例4 (强规范涨落): $(16,\\ 2.5,\\ 1.0,\\ 999)$。\n- 案例5 (小晶格边界情况): $(8,\\ 3.5,\\ 0.2,\\ 424242)$。\n\n最终输出格式：\n您的程序应产生单行输出，其中包含五个四舍五入的密度值，格式为用方括号括起来的逗号分隔列表，例如 $[\\rho_{1},\\rho_{2},\\rho_{3},\\rho_{4},\\rho_{5}]$。每个 $\\rho_{i}$ 必须四舍五入到六位小数，并以晶格单位（无单位）的标准十进制数形式打印。不得打印任何其他文本。", "solution": "该问题陈述经过严格验证并被认定为有效。它在科学上基于格点规范理论和拓扑缺陷物理学的原理，问题设定良好，具有完整且明确的算法规范，并且完全客观。任务是执行一个数值模拟，这是计算物理学中的一个标准程序。因此，提供一个解决方案。\n\n该问题要求在伦敦极限下的阿贝尔-希格斯模型的3D晶格模拟中计算宇宙弦长度密度。该解决方案通过精确遵循指定的算法来构建。\n\n步骤1：晶格与场初始化\n考虑一个维度为 $N \\times N \\times N$ 的周期性立方晶格，晶格间距设为单位1，即 $a=1$。标量场由其相位 $\\theta(\\mathbf{x})$ 表示，这是一个定义在晶格格点上的实值场。$U(1)$规范场由链路变量表示，对于此问题，它们由其相位 $\\alpha_{\\mu}(\\mathbf{x})$ 表征，其中 $\\mu \\in \\{x, y, z\\}$ 表示从格点 $\\mathbf{x}$ 出发的链路方向。这些场将以数值数组的形式表示。\n\n步骤2：生成相关的标量相位\n标量相位场 $\\theta(\\mathbf{x})$ 的初始状态被生成为具有由长度尺度 $\\xi$ 表征的空间相关性。这是模拟通过 Kibble-Zurek 机制形成缺陷的关键步骤。流程如下：\n首先，通过用从标准正态分布中抽取的随机数填充每个晶格格点，创建一个三维白噪声数组。设此场为 $w(\\mathbf{x})$。\n其次，使用三维快速傅里叶变换（FFT）将这个实空间噪声场转换到傅里叶空间，得到 $\\tilde{w}(\\mathbf{k})$。\n第三，在傅里叶空间中应用高斯滤波器 $F(\\mathbf{k}) = \\exp\\{-\\tfrac{1}{2}\\xi^{2}|\\mathbf{k}|^{2}\\}$。动量矢量 $\\mathbf{k}$ 是适用于尺寸为 $N$ 的周期性晶格的矢量，其分量为 $k_i = \\frac{2\\pi m_i}{N}$，其中 $m_i$ 为整数。该滤波器抑制高动量（高频）模式，从而在实空间中强制形成相关长度 $\\xi$。\n第四，将过滤后的场 $\\tilde{g}(\\mathbf{k}) = \\tilde{w}(\\mathbf{k}) F(\\mathbf{k})$ 使用逆FFT变换回实空间，以获得相关的高斯场 $g(\\mathbf{x})$。\n最后，通过一个卷绕函数将 $g(\\mathbf{x})$ 映射到角度区间 $(-\\pi, \\pi]$ 来获得标量相位场 $\\theta(\\mathbf{x}) = \\mathrm{wrap}(g(\\mathbf{x}))$。该映射实现为 $\\mathrm{wrap}(y) = (y + \\pi) \\pmod{2\\pi} - \\pi$。\n\n步骤3：生成随机规范链路\n规范场链路相位 $\\alpha_{\\mu}(\\mathbf{x})$ 作为完全不相关的随机变量引入。对于每个链路，从均值为 $0$、标准差为 $\\sigma_A$ 的正态分布中抽取一个值。这些值也被卷绕到区间 $(-\\pi, \\pi]$ 中。这代表一个随机、涨落的规范背景。\n\n步骤4：计算规范不变链路角\n两个相邻格点之间标量场的原始相位差 $\\Delta_{\\mu}\\theta(x) = \\theta(x+\\hat{\\mu}) - \\theta(x)$ 不是规范不变的。通过减去连接链路上的规范场相位，可以形成一个具有物理意义的规范不变的量。我们为晶格中的每个链路计算这个规范不变的链路角 $\\omega_{\\mu}(\\mathbf{x})$：\n$$\n\\omega_{\\mu}(\\mathbf{x}) = \\mathrm{wrap}\\!\\left( \\theta(\\mathbf{x}+\\hat{\\mu}) - \\theta(\\mathbf{x}) - \\alpha_{\\mu}(\\mathbf{x}) \\right)\n$$\n在周期性晶格上，位移 $\\mathbf{x}+\\hat{\\mu}$ 被实现为数组索引的循环移位。\n\n步骤5：计算格框卷绕整数\n宇宙弦是一种拓扑缺陷，是相位场中的一个奇点。在晶格上，它的存在可以通过围绕一个基本方环（即格框）的非零净相位累积来检测。围绕一个定向格框在 $(\\mu, \\nu)$ 平面上的规范不变链路角的和计算如下：\n$$\ns_{\\mu\\nu}(\\mathbf{x}) = \\omega_{\\mu}(\\mathbf{x}) + \\omega_{\\nu}(\\mathbf{x}+\\hat{\\mu}) - \\omega_{\\mu}(\\mathbf{x}+\\hat{\\nu}) - \\omega_{\\nu}(\\mathbf{x})\n$$\n在连续极限下，场的单值性条件要求此和为 $2\\pi$ 的整数倍。我们通过除以 $2\\pi$ 并四舍五入到最近的整数来提取这个整数，即格框卷绕数 $n_{\\mu\\nu}(\\mathbf{x})$：\n$$\nn_{\\mu\\nu}(\\mathbf{x}) = \\mathrm{round}\\!\\left( \\frac{s_{\\mu\\nu}(\\mathbf{x})}{2\\pi} \\right)\n$$\n一个非零整数 $|n_{\\mu\\nu}(\\mathbf{x})|$ 表示有 $|n_{\\mu\\nu}(\\mathbf{x})|$ 根弦穿过位于 $\\mathbf{x}$ 的格框。这将针对三种不同的格框方向进行计算：$(x, y)$、$(y, z)$ 和 $(z, x)$（或 $(x, z)$），以覆盖所有 $\\mu  \\nu$ 的可能性。\n\n步骤6：总弦长与密度\n在晶格间距 $a=1$ 的情况下，一个被弦穿过的格框对应于长度为 1 的弦段。宇宙弦网络总长度 $L$ 是晶格上所有格框的卷绕数绝对值的总和。\n$$\nL = \\sum_{\\mathbf{x}} \\sum_{\\mu\\nu} \\left| n_{\\mu\\nu}(\\mathbf{x}) \\right|\n$$\n弦长密度 $\\rho$ 是一个宏观量，定义为单位体积内的总长度，体积 $V = N^3$：\n$$\n\\rho = \\frac{L}{N^{3}}\n$$\n\n步骤7和8：最终报告\n对每个指定的测试案例执行完整的模拟。所得密度 $\\rho$ 四舍五入到 6 位小数，并以要求的格式呈现。使用固定的伪随机数生成器种子可确保结果的可复现性。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Main function to run the simulation for all test cases and print the results.\n    \"\"\"\n    test_cases = [\n        # (N, xi, sigma_A, seed)\n        (16, 2.5, 0.2, 12345),\n        (16, 0.5, 0.2, 54321),\n        (16, 4.0, 0.2, 202311),\n        (16, 2.5, 1.0, 999),\n        (8, 3.5, 0.2, 424242),\n    ]\n\n    results = []\n    for params in test_cases:\n        N, xi, sigma_A, seed = params\n        rho = run_simulation(N, xi, sigma_A, seed)\n        results.append(f\"{rho:.6f}\")\n\n    print(f\"[{','.join(results)}]\")\n\ndef run_simulation(N, xi, sigma_A, seed):\n    \"\"\"\n    Executes the cosmic string simulation for a single set of parameters.\n\n    Args:\n        N (int): The size of the cubic lattice (N x N x N).\n        xi (float): The correlation length of the scalar field.\n        sigma_A (float): The standard deviation for the gauge field fluctuations.\n        seed (int): The seed for the random number generator.\n\n    Returns:\n        float: The calculated string length density rho.\n    \"\"\"\n    # Initialize the random number generator for reproducibility\n    rng = np.random.default_rng(seed)\n\n    # A utility function to map angles to the interval (-pi, pi]\n    def wrap_to_pi(x):\n        return (x + np.pi) % (2 * np.pi) - np.pi\n\n    # --- Step 2: Correlated scalar phases ---\n    # Generate white noise in real space\n    white_noise = rng.standard_normal(size=(N, N, N))\n    \n    # FFT to momentum space\n    white_noise_k = np.fft.fftn(white_noise)\n    \n    # Create momentum grid\n    k_vals = np.fft.fftfreq(N) * 2 * np.pi\n    Kx, Ky, Kz = np.meshgrid(k_vals, k_vals, k_vals, indexing='ij')\n    K2 = Kx**2 + Ky**2 + Kz**2\n    \n    # Apply Gaussian filter. Avoid division by zero at k=0 if xi is infinite.\n    # The problem implies finite xi, so no special handling is needed.\n    filter_k = np.exp(-0.5 * xi**2 * K2)\n    \n    # Filter the noise and inverse FFT back to real space\n    correlated_field_g = np.fft.ifftn(white_noise_k * filter_k).real\n    \n    # Map to phases theta\n    theta = wrap_to_pi(correlated_field_g)\n\n    # --- Step 3: Random gauge links ---\n    # Generate random gauge fields alpha_mu for mu=x,y,z\n    alpha = rng.normal(loc=0.0, scale=sigma_A, size=(3, N, N, N))\n    alpha = wrap_to_pi(alpha)\n    alpha_x, alpha_y, alpha_z = alpha[0], alpha[1], alpha[2]\n\n    # --- Step 4: Gauge-invariant link angles ---\n    # theta(x+mu) is a circular shift by +1 in coordinate, which is -1 in index\n    theta_px = np.roll(theta, shift=-1, axis=0)\n    theta_py = np.roll(theta, shift=-1, axis=1)\n    theta_pz = np.roll(theta, shift=-1, axis=2)\n    \n    omega_x = wrap_to_pi(theta_px - theta - alpha_x)\n    omega_y = wrap_to_pi(theta_py - theta - alpha_y)\n    omega_z = wrap_to_pi(theta_pz - theta - alpha_z)\n\n    # --- Step 5: Plaquette winding integers ---\n    # The sum s_munu = w_mu(x) + w_nu(x+mu) - w_mu(x+nu) - w_nu(x)\n    \n    # (x,y) plaquettes\n    s_xy = (omega_x + np.roll(omega_y, shift=-1, axis=0) -\n            np.roll(omega_x, shift=-1, axis=1) - omega_y)\n    \n    # (y,z) plaquettes\n    s_yz = (omega_y + np.roll(omega_z, shift=-1, axis=1) -\n            np.roll(omega_y, shift=-1, axis=2) - omega_z)\n\n    # (z,x) plaquettes\n    s_zx = (omega_z + np.roll(omega_x, shift=-1, axis=2) -\n            np.roll(omega_z, shift=-1, axis=0) - omega_x)\n\n    # Calculate winding numbers n_munu = round(s_munu / 2pi)\n    n_xy = np.round(s_xy / (2 * np.pi))\n    n_yz = np.round(s_yz / (2 * np.pi))\n    n_zx = np.round(s_zx / (2 * np.pi))\n\n    # --- Step 6: String length density ---\n    # Total length L is the sum of absolute winding numbers\n    total_length = np.sum(np.abs(n_xy)) + np.sum(np.abs(n_yz)) + np.sum(np.abs(n_zx))\n    \n    # Volume V = N^3\n    volume = N**3\n    \n    # Density rho = L / V\n    rho = total_length / volume\n    \n    return rho\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "2407397"}]}