{"hands_on_practices": [{"introduction": "我们的第一个实践非常接地气：为一个汽车轮胎“数”分子。这个练习将理想气体定律的分子形式 $PV = N k_B T$ 应用于一个日常物品。它完美地展示了玻尔兹曼常数 $k_B$ 如何让我们仅通过测量压力、体积和温度等宏观量，就能估算出微观粒子的庞大数量，从而将一个抽象的物理常数与可触摸的现实世界联系起来。[@problem_id:1844110]", "problem": "在一个汽车制造厂中，一道质量控制工序涉及到验证注入新生产轮胎中的空气量。假设轮胎内的空气可视为理想气体。测得轮胎的内部容积为 $V = 15.0$ 升。轮胎在室温为 $T = 22.0^\\circ \\text{C}$、大气压为 $P_{\\text{atm}} = 101 \\text{ kPa}$ 的房间内充气。充气后，一个压力传感器显示轮胎的表压为 $P_{\\text{g}} = 221 \\text{ kPa}$。\n\n已知玻尔兹曼常数为 $k_B = 1.38 \\times 10^{-23} \\text{ J/K}$，计算轮胎内空气分子的总数。\n\n将您的答案以科学记数法表示，并四舍五入到三位有效数字。", "solution": "我们将空气模型化为理想气体，因此适用理想气体定律的分子形式：\n$$\nPV = N k_{B} T.\n$$\n这里的 $P$ 必须是轮胎内的绝对压力。压力传感器报告的是表压 $P_{\\text{g}}$，它满足 $P_{\\text{g}} = P - P_{\\text{atm}}$，因此内部绝对压力为\n$$\nP = P_{\\text{atm}} + P_{\\text{g}} = 101\\,\\text{kPa} + 221\\,\\text{kPa} = 322\\,\\text{kPa} = 3.22 \\times 10^{5}\\,\\text{Pa}.\n$$\n将给定的体积转换为立方米，温度转换为开尔文：\n$$\nV = 15.0\\,\\text{L} = 15.0 \\times 10^{-3}\\,\\text{m}^{3} = 1.50 \\times 10^{-2}\\,\\text{m}^{3}, \\quad T = 22.0^{\\circ}\\text{C} = 22.0 + 273.15\\,\\text{K} = 295.15\\,\\text{K}.\n$$\n求解理想气体定律以得到 $N$：\n$$\nN = \\frac{PV}{k_{B} T}.\n$$\n代入数值（其中 $k_{B} = 1.38 \\times 10^{-23}\\,\\text{J/K}$）：\n$$\nN = \\frac{\\left(3.22 \\times 10^{5}\\,\\text{Pa}\\right)\\left(1.50 \\times 10^{-2}\\,\\text{m}^{3}\\right)}{\\left(1.38 \\times 10^{-23}\\,\\text{J/K}\\right)\\left(295.15\\,\\text{K}\\right)}.\n$$\n计算分子和分母：\n$$\nPV = 4.83 \\times 10^{3}\\,\\text{J}, \\quad k_{B}T = 4.07307 \\times 10^{-21}\\,\\text{J}.\n$$\n因此\n$$\nN = \\frac{4.83 \\times 10^{3}}{4.07307 \\times 10^{-21}} \\approx 1.186 \\times 10^{24}.\n$$\n四舍五入到三位有效数字并用科学记数法表示，空气分子的总数为\n$$\nN \\approx 1.19 \\times 10^{24}.\n$$", "answer": "$$\\boxed{1.19 \\times 10^{24}}$$", "id": "1844110"}, {"introduction": "在理解了 $k_B$ 在宏观气体行为中的作用后，我们将更进一步，探索其在微观量子世界中的核心意义。这个练习构建了一个简化的双能级量子系统，让你计算在特定温度下粒子在不同能级上的布居情况。通过这个过程，你将直接与玻尔兹曼因子 $\\exp(-\\Delta E / k_B T)$ 打交道，并理解它为何是统计力学的基石——它精确地描述了温度如何决定微观粒子在不同能级上的分布概率。[@problem_id:1844091]", "problem": "考虑一种特定双原子分子的简化量子模型。在该模型中，分子的振动只能处于两种状态之一：能量为 $E_0$ 的基态和能量为 $E_1$ 的第一激发态。这两个状态之间的能量差是一个已知常数，$\\Delta E = E_1 - E_0 > 0$。一个容器中充满了大量这种分子，它们形成一种气体，在绝对温度 $T$ 下达到了热平衡。在此温度下，观测到任何给定分子处于第一激发态的概率恰好是十分之一。\n\n求该气体的平衡温度 $T$ 的表达式。你的答案应该是一个用能量差 $\\Delta E$ 和玻尔兹曼常数 $k_B$ 表示的符号表达式。", "solution": "在正则系综平衡中，占据能量为 $E_{i}$ 的状态 $i$ 的概率为\n$$\np_{i}=\\frac{\\exp\\!\\left(-\\frac{E_{i}}{k_{B}T}\\right)}{Z}, \\quad Z=\\sum_{j}\\exp\\!\\left(-\\frac{E_{j}}{k_{B}T}\\right).\n$$\n对于两个非简并能级 $E_{0}$ 和 $E_{1}$，其概率之比为\n$$\n\\frac{p_{1}}{p_{0}}=\\exp\\!\\left(-\\frac{E_{1}-E_{0}}{k_{B}T}\\right)=\\exp\\!\\left(-\\frac{\\Delta E}{k_{B}T}\\right).\n$$\n令 $r=\\frac{p_{1}}{p_{0}}$。归一化条件给出 $p_{0}+p_{1}=1$，因此\n$$\np_{0}=\\frac{1}{1+r}, \\quad p_{1}=\\frac{r}{1+r}.\n$$\n观测到 $p_{1}=\\frac{1}{10}$ 意味着\n$$\n\\frac{r}{1+r}=\\frac{1}{10}\\;\\;\\Rightarrow\\;\\;10r=1+r\\;\\;\\Rightarrow\\;\\;9r=1\\;\\;\\Rightarrow\\;\\;r=\\frac{1}{9}.\n$$\n因此，\n$$\n\\exp\\!\\left(-\\frac{\\Delta E}{k_{B}T}\\right)=\\frac{1}{9}\\;\\;\\Rightarrow\\;\\;-\\frac{\\Delta E}{k_{B}T}=\\ln\\!\\left(\\frac{1}{9}\\right)=-\\ln 9,\n$$\n所以\n$$\n\\frac{\\Delta E}{k_{B}T}=\\ln 9 \\;\\;\\Rightarrow\\;\\; T=\\frac{\\Delta E}{k_{B}\\ln 9}.\n$$", "answer": "$$\\boxed{\\frac{\\Delta E}{k_{B}\\ln 9}}$$", "id": "1844091"}, {"introduction": "最后一个练习是一项综合性的挑战，它模仿了现代物理实验的工作流程。像玻尔兹曼常数 $k_B$ 这样的基本常数并非凭空而来，而是通过精密的实验测量得出的。这个计算实践将让你通过分析电阻中的热噪声（即约翰逊-奈奎斯特噪声）信号，来反向推算出 $k_B$ 的值。这不仅能让你一窥实验物理学家如何从充满噪声的数据中提取基本信息，还能锻炼你的计算思维和信号处理能力。[@problem_id:2438143]", "problem": "考虑一个电阻为 $R$ 的理想电阻器，其绝对温度为 $T$。该电阻器上的电压热波动通过 Johnson–Nyquist 噪声进行建模。在没有电抗寄生效应的欧姆电阻器的理想化连续模型中，其单边电压功率谱密度 (Power Spectral Density (PSD)) 是频率的常数函数，等于\n$$\nS_V(f) = 4\\,k_B\\,T\\,R \\quad \\text{for all } f \\in (0,\\infty),\n$$\n其中 $k_B$ 是 Boltzmann 常数，$S_V(f)$ 的单位是 $\\mathrm{V^2/Hz}$。您将针对指定的采样参数模拟这种噪声的离散时间测量，并仅通过分析模拟数据的功率谱来推断 $k_B$。\n\n为了模拟，请使用国际单位制中定义的精确值 $k_B = 1.380649\\times 10^{-23}\\ \\mathrm{J/K}$。此值仅用于生成合成时间序列；任务是通过分析电压信号的单边 PSD 从模拟数据中估计 $k_B$。\n\n对于每组参数 $(R,T,f_s,\\tau)$，其中 $R$ 的单位是 $\\mathrm{\\Omega}$，$T$ 的单位是 $\\mathrm{K}$，$f_s$ 是采样频率（单位 $\\mathrm{Hz}$），$\\tau$ 是总采集时间（单位 $\\mathrm{s}$），执行以下操作：\n- 模拟一个包含 $N=\\lfloor f_s\\,\\tau \\rfloor$ 个样本的实数、零均值、离散时间电压序列 $\\{x[n]\\}_{n=0}^{N-1}$。该序列在统计上应与在指定 $(R,T)$ 条件下表现出 Johnson–Nyquist 噪声并经频率 $f_s$ 均匀采样而带限的理想电阻器一致。该模拟必须在正频率带 $(0,f_s/2)$ 上与上述连续模型一致。\n- 从模拟的 $\\{x[n]\\}$ 中，对 $(0,f_s/2)$ 内的正频率仓（bin）构建一个经验单边 PSD 估计值 $\\widehat{S}_V(f)$。将 $f=0$ 和 $f=f_s/2$ 视为排除的端点。\n- 令 $\\widehat{S}_0$ 为最小化离散最小二乘准则的实数\n$$\n\\sum_{k}\\left(\\widehat{S}_V(f_k)-\\widehat{S}_0\\right)^2,\n$$\n其中 $\\{f_k\\}$ 是评估 $\\widehat{S}_V$ 所在的严格正频率仓。将 Boltzmann 常数估计值定义为\n$$\n\\widehat{k}_B \\equiv \\frac{\\widehat{S}_0}{4\\,T\\,R}.\n$$\n以 $\\mathrm{J/K}$ 为单位报告 $\\widehat{k}_B$。\n\n您的程序必须对以下涵盖典型操作条件和挑战性工况的参数集测试套件执行上述操作：\n- 情况 1：$R=1000\\ \\mathrm{\\Omega}$, $T=300\\ \\mathrm{K}$, $f_s=50000\\ \\mathrm{Hz}$, $\\tau=2.0\\ \\mathrm{s}$。\n- 情况 2：$R=10000\\ \\mathrm{\\Omega}$, $T=77\\ \\mathrm{K}$, $f_s=100000\\ \\mathrm{Hz}$, $\\tau=3.0\\ \\mathrm{s}$。\n- 情况 3：$R=10\\ \\mathrm{\\Omega}$, $T=300\\ \\mathrm{K}$, $f_s=50000\\ \\mathrm{Hz}$, $\\tau=2.0\\ \\mathrm{s}$。\n- 情况 4：$R=1000\\ \\mathrm{\\Omega}$, $T=600\\ \\mathrm{K}$, $f_s=80000\\ \\mathrm{Hz}$, $\\tau=1.5\\ \\mathrm{s}$。\n- 情况 5：$R=2200\\ \\mathrm{\\Omega}$, $T=295\\ \\mathrm{K}$, $f_s=200000\\ \\mathrm{Hz}$, $\\tau=0.8\\ \\mathrm{s}$。\n\n最终输出格式：您的程序应生成单行输出，其中包含五个结果，形式为方括号内以逗号分隔的列表，每个数字均以表示 $\\mathrm{J/K}$ 的科学记数法小数形式表示。每个值必须格式化为六位有效数字。例如，输出必须具有以下形式\n$[\\widehat{k}_{B,1},\\widehat{k}_{B,2},\\widehat{k}_{B,3},\\widehat{k}_{B,4},\\widehat{k}_{B,5}]$,\n其中 $\\widehat{k}_{B,i}$ 表示按上述顺序列出的情况 $i$ 对应的估计值。", "solution": "Johnson–Nyquist 噪声源于导体中处于绝对温度 $T$ 的载流子的热骚动。对于一个无寄生效应、电阻为 $R$ 的理想电阻器，其两端的单边电压功率谱密度 (Power Spectral Density (PSD)) 是白噪声，即不随频率变化，由下式给出\n$$\nS_V(f) = 4\\,k_B\\,T\\,R,\n$$\n其中 $S_V(f)$ 的单位是 $\\mathrm{V^2/Hz}$，适用于 $f \\in (0,\\infty)$。\n\n为模拟离散时间测量，我们以速率 $f_s$ 在时长 $\\tau$ 内采样，得到 $N=\\lfloor f_s\\,\\tau \\rfloor$ 个样本。令 $x[n]$ 表示测得的电压样本。该离散时间过程应在频带 $(0,f_s/2)$ 内与连续模型一致，该频带是采样后单边谱的正频率范围。一个方便的规定是要求 $x[n]$ 是一个零均值、白色、高斯序列，其单边 PSD 在 $(0,f_s/2)$ 上等于 $S_V(f)$。这确保了任何一致的 PSD 估计量都将（在期望意义上）收敛到目标常数水平。\n\n连续 PSD 水平与离散时间方差之间的联系，可以通过将方差等同于双边 PSD 在 Nyquist 频带上的积分来获得。令 $S_0 \\equiv 4\\,k_B\\,T\\,R$ 表示单边常数。对于采样过程，Nyquist 区间内的双边 PSD 在 $(-f_s/2,f_s/2)$ 上为 $S_0/2$。因此，方差满足\n$$\n\\operatorname{var}[x[n]] \\equiv \\sigma^2\n= \\int_{-f_s/2}^{f_s/2} \\frac{S_0}{2}\\, \\mathrm{d}f\n= \\frac{S_0}{2}\\, f_s\n= \\frac{4\\,k_B\\,T\\,R}{2}\\, f_s\n= 2\\,k_B\\,T\\,R\\, f_s.\n$$\n因此，将 $x[n]$ 生成为均值为零、方差为\n$$\n\\sigma^2 = \\frac{S_0\\, f_s}{2} = 2\\,k_B\\,T\\,R\\, f_s\n$$\n的独立同分布高斯样本，可以产生一个离散时间过程，其期望单边 PSD 在 $(0,f_s/2)$ 上等于 $S_0$。\n\n从模拟的 $\\{x[n]\\}$ 中，我们在离散的正频率仓 $\\{f_k\\}$（不包括 $f=0$ 和 $f=f_s/2$）处计算经验单边 PSD $\\widehat{S}_V(f_k)$。任何对单边 PSD 的一致估计量都是可接受的；在数值实践中，对分段进行平均的周期图被广泛使用。题目要求将常数谱水平的估计值 $\\widehat{S}_0$ 定义为离散最小二乘准则\n$$\nJ(c) = \\sum_{k} \\left(\\widehat{S}_V(f_k)-c\\right)^2.\n$$\n的最小化器。通过将关于 $c$ 的导数设为零来求得最小化器：\n$$\n\\frac{\\partial J}{\\partial c} = -2 \\sum_k \\left(\\widehat{S}_V(f_k)-c\\right) = 0\n\\quad \\Longrightarrow \\quad\n\\widehat{S}_0 = \\frac{1}{K} \\sum_{k=1}^{K} \\widehat{S}_V(f_k),\n$$\n即，在严格正频率仓上对单边 PSD 估计值求算术平均。\n\n最后，Boltzmann 常数估计值为\n$$\n\\widehat{k}_B = \\frac{\\widehat{S}_0}{4\\,T\\,R}.\n$$\n单位是一致的：$\\widehat{S}_0$ 的单位是 $\\mathrm{V^2/Hz}$，$T$ 的单位是 $\\mathrm{K}$，$R$ 的单位是 $\\mathrm{\\Omega}$，所以 $\\widehat{k}_B$ 的单位是 $\\mathrm{J/K}$，因为 $\\mathrm{V^2}=\\mathrm{W}\\cdot\\mathrm{\\Omega}$ 且 $\\mathrm{W/Hz}=\\mathrm{J}$。\n\n程序实现的算法步骤：\n1. 对于每个测试用例 $(R,T,f_s,\\tau)$，设置 $N=\\lfloor f_s\\,\\tau\\rfloor$ 和 $S_0=4\\,k_B\\,T\\,R$，其中 $k_B=1.380649\\times 10^{-23}\\ \\mathrm{J/K}$ 仅用于模拟。\n2. 生成 $N$ 个独立样本 $x[n]\\sim\\mathcal{N}(0,\\sigma^2)$，其中 $\\sigma^2=S_0 f_s/2$。\n3. 计算正频率的单边 PSD 估计值 $\\widehat{S}_V(f_k)$。\n4. 将 $\\widehat{S}_0$ 计算为 $\\widehat{S}_V(f_k)$ 在严格正频率上的均值，然后计算 $\\widehat{k}_B = \\widehat{S}_0/(4TR)$。\n5. 按测试套件的顺序，将五个 $\\widehat{k}_B$ 值作为单个列表报告，使用科学记数法并保留六位有效数字。\n\n由于该估计量对多个频率仓（以及可选地对多个分段）的频谱进行平均，$\\widehat{k}_B$ 的方差随着时长 $\\tau$ 的增加以及能减少估计量方差的合理选择而减小。$\\tau$ 较短、$R$ 较小或 $T$ 较小的情况会产生较小的信号水平，从而导致较高的相对不确定性，这在所提供的测试套件的多样性中得到了体现。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.signal import welch\n\ndef simulate_johnson_noise_kB_estimate(R, T, fs, tau, rng):\n    \"\"\"\n    Simulate Johnson-Nyquist noise for a resistor R at temperature T, sampled at fs for duration tau,\n    and estimate Boltzmann's constant k_B from the one-sided PSD level.\n\n    Parameters:\n        R (float): Resistance in ohms.\n        T (float): Temperature in kelvins.\n        fs (float): Sampling frequency in Hz.\n        tau (float): Duration in seconds.\n        rng (np.random.Generator): Random number generator for reproducibility.\n\n    Returns:\n        float: Estimated k_B in J/K.\n    \"\"\"\n    # Exact SI value of Boltzmann constant used only for simulation.\n    kB_true = 1.380649e-23  # J/K\n\n    # Number of samples\n    N = int(np.floor(fs * tau))\n\n    # One-sided PSD level S0 = 4 k_B T R (V^2/Hz)\n    S0 = 4.0 * kB_true * T * R\n\n    # For a sampled white-noise process with one-sided level S0, the variance is S0*fs/2\n    sigma2 = S0 * fs / 2.0\n    sigma = np.sqrt(sigma2)\n\n    # Generate zero-mean Gaussian white noise\n    x = rng.standard_normal(N) * sigma\n\n    # Estimate the one-sided PSD using Welch's method (consistent, low-variance estimator)\n    # Choose a segment length that balances frequency resolution and variance reduction\n    # Ensure nperseg is not longer than the signal and is a power-of-two-like size\n    max_seg = 65536\n    nperseg = min(N, max_seg)\n    # Ensure a minimum reasonable length\n    if nperseg < 256:\n        nperseg = N  # fall back to the whole record if extremely short\n    noverlap = nperseg // 2\n\n    freqs, Pxx = welch(\n        x,\n        fs=fs,\n        window=\"hann\",\n        nperseg=nperseg,\n        noverlap=noverlap,\n        detrend=False,\n        return_onesided=True,\n        scaling=\"density\",\n    )\n\n    # Exclude DC (f=0) from the average; also exclude the last bin if it equals Nyquist\n    # Identify strictly positive frequency bins\n    positive_idx = np.where(freqs > 0.0)[0]\n    if positive_idx.size == 0:\n        # Degenerate case safeguard (should not happen with given test suite)\n        S0_hat = np.mean(Pxx)\n    else:\n        S0_hat = np.mean(Pxx[positive_idx])\n\n    # Estimate k_B from S0_hat = 4 k_B T R\n    kB_hat = S0_hat / (4.0 * T * R)\n    return kB_hat\n\n\ndef solve():\n    # Define the test cases from the problem statement.\n    # Each tuple is (R in ohms, T in kelvins, fs in Hz, tau in seconds).\n    test_cases = [\n        (1000.0, 300.0, 50000.0, 2.0),    # Case 1\n        (10000.0, 77.0, 100000.0, 3.0),   # Case 2\n        (10.0, 300.0, 50000.0, 2.0),      # Case 3\n        (1000.0, 600.0, 80000.0, 1.5),    # Case 4\n        (2200.0, 295.0, 200000.0, 0.8),   # Case 5\n    ]\n\n    # Fixed RNG for reproducibility\n    rng = np.random.default_rng(123456789)\n\n    results = []\n    for R, T, fs, tau in test_cases:\n        kB_hat = simulate_johnson_noise_kB_estimate(R, T, fs, tau, rng)\n        results.append(kB_hat)\n\n    # Final print statement in the exact required format: list with six significant digits in scientific notation\n    formatted = \",\".join(f\"{val:.6e}\" for val in results)\n    print(f\"[{formatted}]\")\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "2438143"}]}