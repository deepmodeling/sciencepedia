{"hands_on_practices": [{"introduction": "BCS 理论的一个核心预测是超导态的电子能谱中存在一个能量为 $2\\Delta$ 的能隙。这个能隙的大小与材料的超导临界温度 $T_c$ 密切相关。通过这个练习，你将亲手应用BCS理论给出的普适关系，将宏观可测量的临界温度与微观的库珀对结合能联系起来，从而对超导现象的能量尺度有一个定量的认识 [@problem_id:1809317]。", "problem": "在Bardeen-Cooper-Schrieffer (BCS)超导理论中，费米面附近的电子可以形成被称为库珀对的束缚对。一个库珀对的束缚能是将其拆散成两个未配对的准粒子所需的最小能量。在绝对零度（$T=0$ K）时，这个束缚能等于 $2\\Delta(0)$，其中 $\\Delta(0)$ 是超导能隙。BCS理论预言，在绝对零度时的能隙与超导体的临界温度 $T_c$ 之间存在一个普适关系，由 $2\\Delta(0) \\approx 3.53 k_B T_c$ 给出。\n\n考虑元素铌（Nb），它是一种II类超导体，广泛应用于磁共振成像（MRI）的超导磁体和粒子加速器等领域。铌的临界温度为 $T_c = 9.25$ K。\n\n使用BCS理论的预言，计算在绝对零度时铌中一个库珀对的束缚能。\n\n请以毫电子伏（meV）为单位给出你的答案。你会需要用到玻尔兹曼常数，$k_B = 8.617 \\times 10^{-5}$ eV/K。将你的最终答案保留到三位有效数字。", "solution": "在绝对零度时，一个库珀对的束缚能等于 $2\\Delta(0)$。在BCS理论中，$T=0$ K 时的普适关系是\n$$\n2\\Delta(0) \\approx 3.53\\,k_{B}T_{c}.\n$$\n因此，对于临界温度 $T_{c}=9.25\\,\\text{K}$ 的铌，其束缚能为\n$$\nE_{\\text{bind}} = 3.53\\,k_{B}T_{c}.\n$$\n代入 $k_{B} = 8.617 \\times 10^{-5}\\,\\text{eV/K}$ 和 $T_{c}=9.25\\,\\text{K}$，\n$$\nE_{\\text{bind}} = 3.53 \\times \\left(8.617 \\times 10^{-5}\\,\\text{eV/K}\\right) \\times 9.25\\,\\text{K}.\n$$\n开尔文单位相互抵消，得到以电子伏为单位的能量：\n$$\nE_{\\text{bind}} = 3.53 \\times 8.617 \\times 9.25 \\times 10^{-5}\\,\\text{eV}.\n$$\n计算乘积：\n$$\n8.617 \\times 9.25 = 79.70725,\\quad 79.70725 \\times 3.53 = 281.3665925,\n$$\n所以\n$$\nE_{\\text{bind}} = 281.3665925 \\times 10^{-5}\\,\\text{eV} = 2.813665925 \\times 10^{-3}\\,\\text{eV}.\n$$\n使用 $1\\,\\text{eV} = 10^{3}\\,\\text{meV}$ 转换单位为毫电子伏：\n$$\nE_{\\text{bind}} = 2.813665925\\,\\text{meV}.\n$$\n保留三位有效数字，得到\n$$\nE_{\\text{bind}} \\approx 2.81\\,\\text{meV}.\n$$", "answer": "$$\\boxed{2.81}$$", "id": "1809317"}, {"introduction": "理解了超导能隙与临界温度的关系后，一个自然而然的问题是：金属中的所有导电电子都参与了库珀配对吗？这其实是一个常见的误解。事实上，只有处于费米面附近一个很薄能量壳层内的电子才对超导电性有贡献。这个练习 [@problem_id:1809299] 将引导你使用一个简化但极具启发性的模型，来估算参与超导配对的电子究竟只占总数的多少比例，这个结果可能会让你感到惊讶。", "problem": "考虑一种假想金属，其导电电子表现为三维自由电子气。对于这样一个系统，费米能 $E_F$ 处的态密度可表示为 $g(E_F) = \\frac{3N}{2E_F}$，其中 $N$ 是导电电子的总数。当温度低于临界温度 $T_c$ 时，该金属成为超导体。\n\n根据一个关于超导起始的简化模型，我们假定只有占据费米能级正下方宽度为 $\\Delta E = k_B T_c$ 的能壳中的电子才与超导性质有关。已知该金属的临界温度为 $T_c = 7.20$ K，费米能为 $E_F = 9.47$ eV，请根据此模型确定参与到超导态的导电电子占总数的比例。\n\n你可以假设在所讨论的窄能壳范围内，态密度近似为常数。使用玻尔兹曼常数值 $k_B = 8.617 \\times 10^{-5}$ eV/K。\n\n请将答案表示为小数，并四舍五入到三位有效数字。", "solution": "题目要求计算参与超导的导电电子所占的比例。设 $N$ 为导电电子的总数，$\\Delta N$ 为参与超导的电子数。所求比例为 $f = \\frac{\\Delta N}{N}$。\n\n根据问题中描述的模型，参与超导的电子是那些位于费米能 $E_F$ 正下方、宽度为 $\\Delta E = k_B T_c$ 的能壳内的电子。这意味着这些电子处于能量范围 $[E_F - \\Delta E, E_F]$ 内。\n\n给定能量范围内的电子数 $\\Delta N$ 可以通过在该范围内对态密度 $g(E)$ 进行积分得到。\n$$ \\Delta N = \\int_{E_F - \\Delta E}^{E_F} g(E) \\,dE $$\n题目陈述允许我们假设在这个窄能壳内，态密度 $g(E)$ 是恒定的，并且等于其在费米能处的值 $g(E_F)$。根据这个近似，积分可以简化为：\n$$ \\Delta N \\approx g(E_F) \\times \\left(E_F - (E_F - \\Delta E)\\right) = g(E_F) \\times \\Delta E $$\n题目给出了三维自由电子气在费米能处的态密度表达式：\n$$ g(E_F) = \\frac{3N}{2E_F} $$\n能壳的宽度由下式给出：\n$$ \\Delta E = k_B T_c $$\n将这些表达式代入 $\\Delta N$ 的方程中：\n$$ \\Delta N \\approx \\left(\\frac{3N}{2E_F}\\right) (k_B T_c) $$\n现在，我们可以通过将 $\\Delta N$ 除以电子总数 $N$ 来求出比例 $f$：\n$$ f = \\frac{\\Delta N}{N} \\approx \\frac{\\left(\\frac{3N}{2E_F}\\right) (k_B T_c)}{N} $$\n电子总数 $N$ 被约去：\n$$ f \\approx \\frac{3}{2} \\frac{k_B T_c}{E_F} $$\n这个表达式给出了所涉及电子的估算比例。现在我们代入给定的数值：\n$T_c = 7.20$ K\n$E_F = 9.47$ eV\n$k_B = 8.617 \\times 10^{-5}$ eV/K\n\n首先，计算特征热能 $k_B T_c$：\n$$ k_B T_c = (8.617 \\times 10^{-5} \\text{ eV/K}) \\times (7.20 \\text{ K}) = 6.20424 \\times 10^{-4} \\text{ eV} $$\n现在，将这个值代入比例 $f$ 的表达式中：\n$$ f \\approx \\frac{3}{2} \\frac{6.20424 \\times 10^{-4} \\text{ eV}}{9.47 \\text{ eV}} $$\n$$ f \\approx 1.5 \\times (6.551467 \\times 10^{-5}) $$\n$$ f \\approx 9.8272 \\times 10^{-5} $$\n题目要求答案保留三位有效数字。\n$$ f \\approx 9.83 \\times 10^{-5} $$\n写成小数形式，即为 $0.0000983$。", "answer": "$$\\boxed{9.83 \\times 10^{-5}}$$", "id": "1809299"}, {"introduction": "前面的练习让你应用了BCS理论的结论，而这个终极实践将带你直捣理论的核心。我们将不再使用近似公式，而是直接面对BCS理论的基石——自洽能隙方程。这个复杂的非线性方程没有简单的解析解，必须通过数值方法求解，这也是现代物理研究中的一项基本功。通过这个练习 [@problem_id:2394919]，你将学习如何从第一性原理出发，建立并实现一个数值迭代方案来求解这个关键方程，从而真正深入地掌握BCS理论的精髓。", "problem": "给定来自 Bardeen–Cooper–Schrieffer (BCS) 超导理论的零温能隙自洽方程，其标准形式为\n$$\n\\frac{1}{N(0)V} \\;=\\; \\int_{0}^{\\hbar\\omega_c} \\frac{d\\epsilon}{\\sqrt{\\epsilon^2 + \\Delta^2}},\n$$\n其中，$N(0)$ 是费米能级处的态密度，$V$ 是（有效）吸引相互作用，$\\hbar\\omega_c$ 是能量截断，$\\Delta$ 是超导能隙。定义无量纲耦合常数为 $\\lambda = N(0)V$，并记 $W = \\hbar\\omega_c$。\n\n你的任务是设计并实现一个不动点迭代法，从第一性原理出发，计算非线性方程\n$$\n\\frac{1}{\\lambda} \\;=\\; \\int_{0}^{W} \\frac{d\\epsilon}{\\sqrt{\\epsilon^2 + \\Delta^2}},\n$$\n的正解 $\\Delta>0$。推导过程必须仅从不动点迭代的核心定义和积分的基本微积分性质开始，不得依赖任何非由你推导的快捷公式。你必须：\n\n- 推导一个不动点映射 $g(\\Delta)$，使得求解该方程等价于找到满足 $\\Delta = g(\\Delta)$ 的 $\\Delta$。\n- 证明参数需满足的一个充分条件，在该条件下你的映射在解的邻域内是一个压缩映射，并因此根据压缩映射定理收敛。\n- 指定一个基于明确误差度量的数值稳健的停止准则。\n\n实现要求：\n\n- 程序必须仅使用不动点迭代（不可使用求根区间法或牛顿法）计算若干测试用例的 $\\Delta$。任何辅助的加速技术都必须保持迭代的不动点特性。\n- 计算中不出现角度，因此不需要角度单位。能量必须以电子伏特 (eV) 为单位报告。\n- 结果必须以浮点数形式返回，四舍五入至 $10$ 位有效数字，单位为 eV。在适当时允许使用科学记数法。\n\n测试套件：\n\n为下列 $(\\lambda, W)$ 对计算 $\\Delta$（单位为 eV）：\n- 情况 $1$：$\\lambda = 0.3$，$W = 0.02\\ \\mathrm{eV}$。\n- 情况 $2$：$\\lambda = 0.9$，$W = 0.005\\ \\mathrm{eV}$。\n- 情况 $3$：$\\lambda = 1.5$，$W = 0.02\\ \\mathrm{eV}$。\n- 情况 $4$：$\\lambda = 0.1$，$W = 0.02\\ \\mathrm{eV}$。\n\n最终输出格式：\n\n你的程序应生成单行输出，其中包含对应于四种情况的四个结果，形式为方括号内以逗号分隔的列表。例如：\n\"[x1,x2,x3,x4]\"\n其中每个 $x_k$ 是为情况 $k$ 计算出的 $\\Delta$，单位为 eV，按上述要求四舍五入至 $10$ 位有效数字。", "solution": "### 不动点映射的推导\n\n目标是找到非线性方程的正根 $\\Delta > 0$：\n$$\n\\frac{1}{\\lambda} = \\int_{0}^{W} \\frac{d\\epsilon}{\\sqrt{\\epsilon^2 + \\Delta^2}}\n$$\n我们首先计算该积分。这是一个标准的微积分积分公式：\n$$\n\\int \\frac{dx}{\\sqrt{x^2 + a^2}} = \\operatorname{arsinh}\\left(\\frac{x}{a}\\right) + C\n$$\n将此公式应用于我们的方程，令 $x=\\epsilon$ 和 $a=\\Delta$，我们得到：\n$$\n\\int_{0}^{W} \\frac{d\\epsilon}{\\sqrt{\\epsilon^2 + \\Delta^2}} = \\left[ \\operatorname{arsinh}\\left(\\frac{\\epsilon}{\\Delta}\\right) \\right]_{0}^{W} = \\operatorname{arsinh}\\left(\\frac{W}{\\Delta}\\right) - \\operatorname{arsinh}(0) = \\operatorname{arsinh}\\left(\\frac{W}{\\Delta}\\right)\n$$\n因此，原方程简化为关于 $\\Delta$ 的超越方程：\n$$\n\\frac{1}{\\lambda} = \\operatorname{arsinh}\\left(\\frac{W}{\\Delta}\\right)\n$$\n为了构造一个形如 $\\Delta = g(\\Delta)$ 的不动点迭代，我们必须重排这个方程。虽然存在一个代数解 $\\Delta = W/\\sinh(1/\\lambda)$，但问题要求使用迭代解法。我们寻求一个映射 $g(\\Delta)$，使得其不动点 $\\Delta^*$（其中 $\\Delta^*=g(\\Delta^*)$）是该方程的解。\n\n一个合适的映射可以通过如下代数变换得到：\n$$\n1 = \\lambda \\operatorname{arsinh}\\left(\\frac{W}{\\Delta}\\right) \\implies \\Delta = \\Delta \\lambda \\operatorname{arsinh}\\left(\\frac{W}{\\Delta}\\right)\n$$\n这提供了一个非平凡的不动点映射：\n$$\ng(\\Delta) = \\Delta \\lambda \\operatorname{arsinh}\\left(\\frac{W}{\\Delta}\\right)\n$$\n于是，不动点迭代由以下序列定义：\n$$\n\\Delta_{k+1} = g(\\Delta_k) = \\Delta_k \\lambda \\operatorname{arsinh}\\left(\\frac{W}{\\Delta_k}\\right)\n$$\n\n### 收敛性分析\n\n根据压缩映射定理，如果函数 $g$ 在不动点 $\\Delta^*$ 的一个邻域上是压缩映射，则不动点迭代 $\\Delta_{k+1} = g(\\Delta_k)$ 保证收敛到该邻域内唯一的 $\\Delta^*$。$g$ 是压缩映射的一个充分条件是其导数的绝对值严格小于 $1$，即 $|g'(\\Delta)| < 1$。\n\n我们计算 $g(\\Delta)$ 的导数：\n$$\ng'(\\Delta) = \\frac{d}{d\\Delta} \\left[ \\Delta \\lambda \\operatorname{arsinh}\\left(\\frac{W}{\\Delta}\\right) \\right]\n$$\n使用乘法法则和链式法则：\n$$\ng'(\\Delta) = \\lambda \\operatorname{arsinh}\\left(\\frac{W}{\\Delta}\\right) + \\Delta \\lambda \\left( \\frac{1}{\\sqrt{1 + (W/\\Delta)^2}} \\cdot \\left(-\\frac{W}{\\Delta^2}\\right) \\right)\n$$\n$$\ng'(\\Delta) = \\lambda \\operatorname{arsinh}\\left(\\frac{W}{\\Delta}\\right) - \\frac{\\lambda W}{\\Delta \\sqrt{1 + (W/\\Delta)^2}} = \\lambda \\operatorname{arsinh}\\left(\\frac{W}{\\Delta}\\right) - \\frac{\\lambda W}{\\sqrt{\\Delta^2 + W^2}}\n$$\n为了分析收敛性，我们在不动点 $\\Delta^*$ 处计算该导数，其中 $\\operatorname{arsinh}(W/\\Delta^*) = 1/\\lambda$。\n$$\ng'(\\Delta^*) = \\lambda \\left( \\frac{1}{\\lambda} \\right) - \\frac{\\lambda W}{\\sqrt{(\\Delta^*)^2 + W^2}} = 1 - \\frac{\\lambda W}{\\sqrt{(\\Delta^*)^2 + W^2}}\n$$\n为保证收敛，我们需要 $|g'(\\Delta^*)| < 1$，即 $-1 < 1 - \\frac{\\lambda W}{\\sqrt{(\\Delta^*)^2 + W^2}} < 1$。\n这等价于 $0 < \\frac{\\lambda W}{\\sqrt{(\\Delta^*)^2 + W^2}} < 2$。\n\n对于 $\\lambda, W > 0$，项 $\\frac{\\lambda W}{\\sqrt{(\\Delta^*)^2 + W^2}}$ 总是正的。我们只需验证其上界。\n从 $\\operatorname{arsinh}(W/\\Delta^*) = 1/\\lambda$ 可得 $W/\\Delta^* = \\sinh(1/\\lambda)$。\n该项可以重写为：\n$$\n\\frac{\\lambda (W/\\Delta^*)}{\\sqrt{1 + (W/\\Delta^*)^2}} = \\frac{\\lambda \\sinh(1/\\lambda)}{\\sqrt{1 + \\sinh^2(1/\\lambda)}} = \\frac{\\lambda \\sinh(1/\\lambda)}{\\cosh(1/\\lambda)} = \\lambda \\tanh(1/\\lambda)\n$$\n因此，条件变为 $0 < \\lambda \\tanh(1/\\lambda) < 2$。\n对于 $x > 0$，函数 $f(x) = \\tanh(x)/x$ 的值总是小于等于 $1$。因此，对于 $x=1/\\lambda > 0$，我们有 $\\tanh(1/\\lambda)/(1/\\lambda) \\le 1$，这意味着 $\\lambda \\tanh(1/\\lambda) \\le 1$。\n因此，我们已经证明了 $0  \\lambda \\tanh(1/\\lambda) \\le 1$，这满足收敛条件 $0  \\frac{\\lambda W}{\\sqrt{(\\Delta^*)^2 + W^2}}  2$。\n实际上，我们已经证明了 $0 \\le g'(\\Delta^*)  1$。导数小于 $1$ 确保了局部压缩性。\n\n为了得到一个稳健的算法，我们需要一个好的初始猜测值 $\\Delta_0$。对 $g'(\\Delta)$ 的分析表明，当 $\\Delta \\to 0^+$ 时它趋向于 $+\\infty$，这表明一个非常小的初始猜测值可能导致发散。相反，当 $\\Delta \\to \\infty$ 时，$g'(\\Delta) \\to 0$。一个与能量标度 $W$ 同数量级的初始猜测值，例如 $\\Delta_0 = W$，能提供稳健的收敛。\n\n### 数值算法与停止准则\n\n迭代算法如下：\n$1$. 使用一个初始猜测值进行初始化，例如 $\\Delta_0 = W$。\n$2$. 对 $k = 0, 1, 2, \\dots$，计算下一个迭代值：\n$$\n\\Delta_{k+1} = \\Delta_k \\lambda \\operatorname{arsinh}\\left(\\frac{W}{\\Delta_k}\\right)\n$$\n$3$. 当满足收敛准则时停止迭代。一个数值稳定的选择是基于相对误差：\n$$\n\\frac{|\\Delta_{k+1} - \\Delta_k|}{|\\Delta_{k+1}|}  \\tau\n$$\n其中 $\\tau$ 是一个小的容差（例如 $\\tau=10^{-15}$），以确保有足够的精度来四舍五入到 $10$ 位有效数字。还必须强制设置最大迭代次数作为保障。\n$4$. 最终的 $\\Delta_{k+1}$ 就是计算出的能隙值。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves for the BCS superconducting gap Delta for multiple test cases\n    using a fixed-point iteration method.\n    \"\"\"\n\n    def compute_delta(lambda_val: float, W_val: float, tol: float = 1e-15, max_iter: int = 1000) - float:\n        \"\"\"\n        Computes the superconducting gap Delta using a derived fixed-point iteration.\n\n        The iteration is given by Delta_{k+1} = g(Delta_k), where\n        g(Delta) = Delta * lambda * arsinh(W / Delta).\n\n        Args:\n            lambda_val: The dimensionless coupling constant.\n            W_val: The energy cutoff in eV.\n            tol: The tolerance for the stopping criterion.\n            max_iter: The maximum number of iterations.\n\n        Returns:\n            The computed energy gap Delta in eV.\n            \n        Raises:\n            RuntimeError: If the iteration fails to converge within max_iter.\n        \"\"\"\n        # A robust initial guess, as established in the derivation.\n        # Starting too close to zero can cause divergence.\n        delta_k = W_val\n\n        for _ in range(max_iter):\n            # Handle potential division by zero, although g(delta)  0 for delta  0.\n            if delta_k == 0.0:\n                # For lambda  0, the only solution is trivial if W=0,\n                # but physically W  0. The non-trivial solution has Delta  0.\n                return 0.0\n\n            # Apply the fixed-point mapping function g(Delta).\n            delta_kplus1 = delta_k * lambda_val * np.arcsinh(W_val / delta_k)\n\n            # Use a relative error criterion for convergence.\n            # This is robust for values of different orders of magnitude.\n            if np.abs(delta_kplus1 - delta_k)  tol * np.abs(delta_kplus1):\n                return delta_kplus1\n\n            delta_k = delta_kplus1\n\n        # If the loop completes without convergence, raise an error.\n        raise RuntimeError(\n            f\"Fixed-point iteration did not converge for lambda={lambda_val}, W={W_val}\"\n        )\n\n    # Define the test cases from the problem statement.\n    # Each tuple is (lambda, W in eV).\n    test_cases = [\n        (0.3, 0.02),\n        (0.9, 0.005),\n        (1.5, 0.02),\n        (0.1, 0.02),\n    ]\n\n    results = []\n    for case in test_cases:\n        lambda_val, W_val = case\n        result = compute_delta(lambda_val, W_val)\n        \n        # Format the result to 10 significant digits.\n        # The 'g' format specifier is appropriate as it automatically\n        # chooses between fixed-point and scientific notation.\n        results.append(f\"{result:.10g}\")\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2394919"}]}