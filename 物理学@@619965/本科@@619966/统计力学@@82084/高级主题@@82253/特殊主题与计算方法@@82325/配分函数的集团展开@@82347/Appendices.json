{"hands_on_practices": [{"introduction": "迈耶$f$函数是簇展开理论的核心，它巧妙地将粒子间的相互作用势$U(r)$转化为一个数学工具。这个函数的设计使得当粒子间没有相互作用时其值为零，这使其成为从理想气体出发进行微扰展开的完美起点。通过分析一个典型的方阱势，本练习将帮助你建立对$f(r)$函数的直观和概念性理解 [@problem_id:1997848]。", "problem": "一个经典的非理想气体由粒子组成，这些粒子通过一种称为方阱势的双体势 $U(r)$ 相互作用，其中 $r$ 是两个粒子中心之间的距离。该势的定义如下：\n- 当 $r < \\sigma$ 时，$U(r) = \\infty$\n- 当 $\\sigma \\le r \\le \\lambda \\sigma$ 时，$U(r) = -\\epsilon$\n- 当 $r > \\lambda \\sigma$ 时，$U(r) = 0$\n\n在这里，$\\sigma$ 代表粒子的硬核直径，$\\epsilon > 0$ 是势阱的深度，而 $\\lambda > 1$ 是一个定义吸引相互作用范围的无量纲常数。该气体在绝对温度 $T$ 下处于热平衡状态。设 $k_B$ 为玻尔兹曼常数。\n\n在巨正则配分函数的集团展开背景下，粒子间的相互作用通常用迈耶f函数来描述，记为 $f(r)$。下列哪个选项正确地描述了此方阱势的迈耶f函数的形式？\n\n设 $\\beta = \\frac{1}{k_B T}$。\n\nA. 当 $r < \\sigma$ 时，$f(r) = -1$；当 $\\sigma \\le r \\le \\lambda \\sigma$ 时，$f(r) = \\exp(\\beta \\epsilon) - 1$；当 $r > \\lambda \\sigma$ 时，$f(r) = 0$。\n\nB. 当 $r < \\sigma$ 时，$f(r) = -1$；当 $\\sigma \\le r \\le \\lambda \\sigma$ 时，$f(r) = \\exp(-\\beta \\epsilon) - 1$；当 $r > \\lambda \\sigma$ 时，$f(r) = 0$。\n\nC. 当 $r < \\sigma$ 时，$f(r) = 0$；当 $\\sigma \\le r \\le \\lambda \\sigma$ 时，$f(r) = \\exp(\\beta \\epsilon) - 1$；当 $r > \\lambda \\sigma$ 时，$f(r) = -1$。\n\nD. 当 $r < \\sigma$ 时，$f(r) = 0$；当 $\\sigma \\le r \\le \\lambda \\sigma$ 时，$f(r) = \\exp(\\beta \\epsilon)$；当 $r > \\lambda \\sigma$ 时，$f(r) = 1$。\n\nE. 当 $r < \\sigma$ 时，$f(r) = 1$；当 $\\sigma \\le r \\le \\lambda \\sigma$ 时，$f(r) = \\exp(-\\beta \\epsilon) - 1$；当 $r > \\lambda \\sigma$ 时，$f(r) = 0$。", "solution": "在经典集团展开中，对于对势 $U(r)$，迈耶f函数的定义为\n$$\nf(r) = \\exp\\!\\left(-\\beta U(r)\\right) - 1,\n$$\n其中 $\\beta = \\frac{1}{k_{B}T}$。\n\n将此定义应用于方阱势。当 $r < \\sigma$ 时，$U(r) = \\infty$，因此 $-\\beta U(r) = -\\infty$，所以\n$$\n\\exp\\!\\left(-\\beta U(r)\\right) = \\exp(-\\infty) = 0 \\quad \\Rightarrow \\quad f(r) = -1.\n$$\n当 $\\sigma \\le r \\le \\lambda \\sigma$ 时，$U(r) = -\\epsilon$，所以\n$$\nf(r) = \\exp\\!\\left(-\\beta(-\\epsilon)\\right) - 1 = \\exp(\\beta \\epsilon) - 1.\n$$\n当 $r > \\lambda \\sigma$ 时，$U(r) = 0$，因此\n$$\nf(r) = \\exp(0) - 1 = 0.\n$$\n这种分段形式与选项A相匹配，并且与其他选项在所需的符号和极限行为上有所不同。", "answer": "$$\\boxed{A}$$", "id": "1997848"}, {"introduction": "在理解了迈耶函数之后，下一步就是用它来计算一个可观测量。本练习将引导你计算第二维里系数$B_2(T)$，它代表了对理想气体定律的一阶修正。我们将使用一个简化的“硬杆”一维模型，使计算过程清晰明了，并帮助你直观地理解排斥体积如何对$B_2(T)$产生贡献 [@problem_id:1997867]。", "problem": "考虑一个简化的蛋白质大分子与长链脱氧核糖核酸 (DNA) 结合的一维模型。DNA被视为一条直线，每个蛋白质被建模为长度为 $\\sigma$ 的硬棒。蛋白质可以结合在线上的任何位置，但不能重叠。这个不重叠条件意味着任意两个蛋白质中心之间的最小距离为 $\\sigma$。\n\n两个此类蛋白质中心相距为 $x$ 时的相互作用势能 $U(x)$ 由下式给出：\n$$U(x) = \\begin{cases} \\infty & \\text{如果 } |x| < \\sigma \\\\ 0 & \\text{如果 } |x| \\ge \\sigma \\end{cases}$$\n\n在统计力学中，相互作用系统的理想气体定律的一阶修正是通过第二维里系数 $B_2(T)$ 来体现的。对于一维系统，$B_2(T)$ 与相互作用势 $U(x)$ 之间的关系由以下表达式给出：\n$$B_2(T) = -\\frac{1}{2} \\int_{-\\infty}^{\\infty} \\left[ \\exp\\left(-\\frac{U(x)}{k_B T}\\right) - 1 \\right] dx$$\n其中 $k_B$ 是玻尔兹曼常数，$T$ 是绝对温度。\n\n对于这个 DNA 链上蛋白质的模型，计算第二维里系数 $B_2(T)$。用蛋白质长度 $\\sigma$ 表示你的答案。", "solution": "给定蛋白质中心相距为 $x$ 时的一维硬棒相互作用势：\n$$\nU(x)=\\begin{cases}\n\\infty & \\text{如果 } |x|<\\sigma \\\\\n0 & \\text{如果 } |x|\\ge \\sigma\n\\end{cases}\n$$\n一维系统中的第二维里系数为\n$$\nB_{2}(T)=-\\frac{1}{2}\\int_{-\\infty}^{\\infty}\\left[\\exp\\left(-\\frac{U(x)}{k_{B}T}\\right)-1\\right]dx.\n$$\n我们根据 $U(x)$ 的定义分段计算被积函数。\n\n1) 对于 $|x|<\\sigma$，我们有 $U(x)=\\infty$，因此 $\\exp\\!\\left(-\\frac{U(x)}{k_{B}T}\\right)=\\exp(-\\infty)=0$。所以方括号中的值为 $0-1=-1$。\n\n2) 对于 $|x|\\ge \\sigma$，我们有 $U(x)=0$，因此 $\\exp\\!\\left(-\\frac{U(x)}{k_{B}T}\\right)=\\exp(0)=1$。所以方括号中的值为 $1-1=0$。\n\n因此，被积函数仅在区间 $(-\\sigma,\\sigma)$ 上为 $-1$，在其他地方为零。积分简化为\n$$\nB_{2}(T)=-\\frac{1}{2}\\int_{-\\sigma}^{\\sigma}(-1)\\,dx=\\frac{1}{2}\\int_{-\\sigma}^{\\sigma}dx=\\frac{1}{2}\\left[ x \\right]_{-\\sigma}^{\\sigma}=\\frac{1}{2}(2\\sigma)=\\sigma.\n$$\n这个结果与 $T$ 无关，等于最小的中心间距 $\\sigma$。", "answer": "$$\\boxed{\\sigma}$$", "id": "1997867"}, {"introduction": "物理理论的最终检验标准是其预测实验结果的能力。这个高级练习要求你将$B_2(T)$的理论公式应用于真实气体——氩气，并使用一个科学上精确的分子间相互作用势模型。通过进行数值积分并将计算结果与实验数据进行比较，你将亲身体验到簇展开原理如何为物理化学和材料科学提供强大的定量分析工具 [@problem_id:2646314]。", "problem": "一种单组分氩单原子气体由球对称的 exponential-6 (exp-6) 对势模型描述。您的任务是从经典统计力学出发，以正则配分函数和可压缩性因子的集团展开为起点，推导出第二维里系数作为温度函数的、可计算的表达式，然后使用自适应求积法对氩进行数值计算。最后，您必须将计算值与在一系列温度下给定的参考实验值进行比较。\n\n使用以下科学标准基础和数据来支撑您的推导和计算：\n- 单原子气体的经典正则系综和集团展开，由此引出迈耶f函数的定义以及球对称对相互作用下的第二维里系数。\n- 氩气的 exponential-6 对势，其形式为\n$$\nu(r) \\;=\\; \\varepsilon \\left[\\frac{6}{\\alpha-6}\\,\\exp\\!\\left(\\alpha\\left(1-\\frac{r}{r_m}\\right)\\right) \\;-\\; \\frac{\\alpha}{\\alpha-6}\\left(\\frac{r_m}{r}\\right)^6\\right],\n$$\n其氩气参数为\n$$\n\\alpha = 13.2,\\quad \\frac{\\varepsilon}{k_{\\mathrm{B}}} = 143.22\\ \\mathrm{K},\\quad r_m = 3.757\\ \\text{\\AA}.\n$$\n所有计算都必须在国际单位制（SI）中执行，其中 $r$ 的单位为 $\\mathrm{m}$，$u(r)$ 的单位为 $\\mathrm{J}$，并且在转换为所需的输出单位之前，第二维里系数的结果单位为 $\\mathrm{m^3/mol}$。\n- 使用的物理常数：\n$$\nk_{\\mathrm{B}} = 1.380649\\times 10^{-23}\\ \\mathrm{J/K},\\qquad N_{\\mathrm{A}} = 6.02214076\\times 10^{23}\\ \\mathrm{mol^{-1}}.\n$$\n\n数值要求：\n- 以 $\\mathrm{cm^3/mol}$ 为单位表示第二维里系数的最终答案。\n- 为所需的径向积分 $r\\in[0,\\infty)$ 实现一个稳健的数值求积方法，使用一种自适应方案，该方案适用于一个反常积分，其被积函数在 $r\\to 0$ 时表现平滑，并在 $r\\to\\infty$ 时衰减得足够快。\n- 使用给定的势和常数来计算与温度相关的结果。请仔细处理单位换算，例如从 $\\text{\\AA}$ 到 $\\mathrm{m}$ 以及从 $\\mathrm{m^3/mol}$ 到 $\\mathrm{cm^3/mol}$ 的换算。\n\n测试套件：\n- 在以下温度 $T$（单位为 $\\mathrm{K}$）下评估您的结果：$100$、$150$、$200$、$273.15$、$300$、$400$、$500$、$1000$。\n- 为进行比较，请使用以下氩气的参考实验第二维里系数 $B_2^{\\mathrm{exp}}(T)$（单位为 $\\mathrm{cm^3/mol}$）：\n  - $T=100\\ \\mathrm{K}$：$-1600.0$\n  - $T=150\\ \\mathrm{K}$：$-380.0$\n  - $T=200\\ \\mathrm{K}$：$-170.0$\n  - $T=273.15\\ \\mathrm{K}$：$-48.0$\n  - $T=300\\ \\mathrm{K}$：$-21.7$\n  - $T=400\\ \\mathrm{K}$：$-2.5$\n  - $T=500\\ \\mathrm{K}$：$5.0$\n  - $T=1000\\ \\mathrm{K}$：$2.0$\n\n输出规格：\n- 您的程序必须为指定列表中的每个测试温度计算 $B_2(T)$，将其转换为 $\\mathrm{cm^3/mol}$，然后计算每个温度下的绝对偏差\n$$\n\\Delta(T) \\equiv \\left|\\,B_2^{\\mathrm{model}}(T) - B_2^{\\mathrm{exp}}(T)\\,\\right|\n$$\n，单位为 $\\mathrm{cm^3/mol}$。\n- 最终的程序输出必须是单行，包含一个 Python 风格的浮点数列表，每个值是对应的 $\\Delta(T)$，四舍五入到三位小数，并与测试温度的顺序相同。\n- 角度单位不适用于此问题。所有数值答案都必须以指定的物理单位表示。\n\n边缘情况与覆盖范围：\n- 包括低温 $T=100\\ \\mathrm{K}$，在该温度下，吸引相互作用很强，且势能阱附近的积分权重显著。\n- 包括接近 Boyle 区域的温度 $T=400\\ \\mathrm{K}$，在该温度下 $B_2(T)$ 接近于零，使得符号和小编量值的准确性变得重要。\n- 包括高温 $T=1000\\ \\mathrm{K}$，在该温度下，排斥作用占主导地位，且 $B_2(T)$ 是一个小的正值。\n\n您的程序应生成单行输出，其中包含一个用方括号括起来的逗号分隔列表（例如，“[x1,x2,x3,x4,x5,x6,x7,x8]”），其中每个 $x_i$ 是测试套件中对应温度下四舍五入的绝对偏差，单位为 $\\mathrm{cm^3/mol}$。", "solution": "该问题要求针对由 exponential-6 分子间对势建模的氩气，推导并随后数值计算第二维里系数 $B_2(T)$。此任务需从经典统计力学的基本原理出发执行。\n\n维里状态方程为真实气体的可压缩性因子 $Z = P\\bar{V}/(RT)$ 提供了关于摩尔体积倒数 $1/\\bar{V}$ 的幂级数系统展开：\n$$\nZ = 1 + \\frac{B_2(T)}{\\bar{V}} + \\frac{B_3(T)}{\\bar{V}^2} + \\mathcal{O}\\left(\\frac{1}{\\bar{V}^3}\\right)\n$$\n其中，$P$ 是压力，$\\bar{V}$ 是摩尔体积，$R$ 是通用气体常数，$T$ 是绝对温度，$B_n(T)$ 是与温度相关的维里系数。第二维里系数 $B_2(T)$ 量化了由成对分子相互作用引起的对理想气体行为的主导阶修正。\n\n根据统计力学正则系综中的集团展开方法，对于具有球对称对势 $u(r)$ 的流体，其 $B_2(T)$ 的表达式被明确确定为：\n$$\nB_2(T) = -\\frac{N_{\\mathrm{A}}}{2} \\int_0^{\\infty} f(r) \\, 4\\pi r^2 \\, dr\n$$\n在此表达式中，$N_{\\mathrm{A}}$ 是阿伏伽德罗常数，$r$ 是分子间分离距离，$f(r)$ 是迈耶函数，定义为：\n$$\nf(r) = \\exp\\left(-\\frac{u(r)}{k_{\\mathrm{B}}T}\\right) - 1\n$$\n其中 $k_{\\mathrm{B}}$ 是玻尔兹曼常数。将这些结合起来，得到必须求解的积分形式：\n$$\nB_2(T) = -2\\pi N_{\\mathrm{A}} \\int_0^{\\infty} \\left[ \\exp\\left(-\\frac{u(r)}{k_{\\mathrm{B}}T}\\right) - 1 \\right] r^2 \\, dr\n$$\n问题指定了氩气的 exponential-6 势，该势具有强排斥性的短程部分和长程吸引部分：\n$$\nu(r) \\;=\\; \\varepsilon \\left[\\frac{6}{\\alpha-6}\\,\\exp\\!\\left(\\alpha\\left(1-\\frac{r}{r_m}\\right)\\right) \\;-\\; \\frac{\\alpha}{\\alpha-6}\\left(\\frac{r_m}{r}\\right)^6\\right]\n$$\n氩气的参数给出为 $\\alpha = 13.2$，$\\varepsilon/k_{\\mathrm{B}} = 143.22\\ \\mathrm{K}$，以及 $r_m = 3.757\\ \\text{\\AA}$。对于所有计算，必须使用所给的 $k_{\\mathrm{B}}$ 值和换算关系 $1\\ \\text{\\AA} = 10^{-10}\\ \\mathrm{m}$，将这些参数转换为国际单位制（SI）基本单位：$\\varepsilon$ 的单位为焦耳（J），$r_m$ 的单位为米（m）。\n\n将势 $u(r)$ 代入 $B_2(T)$ 的积分中，得到完整的可计算表达式：\n$$\nB_2(T) = -2\\pi N_{\\mathrm{A}} \\int_0^{\\infty} \\left[ \\exp\\left\\{ -\\frac{\\varepsilon}{k_{\\mathrm{B}}T} \\left[\\frac{6}{\\alpha-6}\\,\\exp\\!\\left(\\alpha\\left(1-\\frac{r}{r_m}\\right)\\right) \\;-\\; \\frac{\\alpha}{\\alpha-6}\\left(\\frac{r_m}{r}\\right)^6\\right] \\right\\} - 1 \\right] r^2 \\, dr\n$$\n此积分缺少一个通用的闭合形式解析解，因此需要进行数值计算。被积函数的行为使其适合采用自适应求积方法：\n1. 在短程范围内，当 $r \\to 0$ 时，排斥项 $e^{-\\alpha r/r_m}$ 导致 $u(r) \\to \\infty$。因此，项 $\\exp(-u(r)/k_{\\mathrm{B}}T)$ 趋于零，被积函数趋近于 $-r^2$。这种行为是规则的，对原点附近的数值积分不构成困难。\n2. 在长程范围内，当 $r \\to \\infty$ 时，势能以 $u(r) \\approx -C/r^6$ 的形式衰减。对于小自变量 $x = -u(r)/(k_{\\mathrm{B}}T)$，迈耶函数 $f(r)$ 可以使用泰勒展开 $e^x - 1 \\approx x$ 来近似。因此，被积函数以 $(1/r^6) \\times r^2 = 1/r^4$ 的形式衰减，这足够快以确保在 $[0, \\infty)$ 上的反常积分收敛。\n3. 被积函数的幅值和变化在势能阱 $r=r_m$ 附近最为显著，这证明了使用自适应数值方案的合理性，该方案会将计算点集中在这个关键区域。\n\n计算工作流程必须严格执行：\n1. 以 SI 单位定义所有物理常数（$k_{\\mathrm{B}}$、$N_{\\mathrm{A}}$）和势参数（$\\varepsilon$、$\\alpha$、$r_m$）。\n2. 对于每个指定的温度 $T$，构造被积函数。必须注意防止在非常小的 $r$ 处指数项发生数值溢出，因为此时其参数会变得很大且为正。在此极限情况下，被积函数可以直接设置为其极限形式。\n3. 使用一个稳健的自适应求积程序，例如 `scipy.integrate.quad`，来计算从 $r=0$ 到 $r=\\infty$ 的定积分。\n4. 积分结果用于计算 $B_2(T)$，单位为 SI 单位 $\\mathrm{m^3/mol}$。\n5. 然后通过乘以因子 $10^6$，将此结果转换为常规单位 $\\mathrm{cm^3/mol}$。\n6. 最后，根据提供的实验数据计算绝对偏差 $\\Delta(T) = |B_2^{\\mathrm{model}}(T) - B_2^{\\mathrm{exp}}(T)|$。\n\n这种结构化的方法确保了解决方案在物理上是合理的、在数学上是一致的，并且在数值上是稳健的。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy import integrate\n\ndef solve():\n    \"\"\"\n    Derives and computes the second virial coefficient for argon using the exp-6 potential,\n    and compares the results to experimental data.\n    \"\"\"\n    # Define physical constants in SI units.\n    k_B = 1.380649e-23  # Boltzmann constant in J/K\n    N_A = 6.02214076e23  # Avogadro's number in mol^-1\n\n    # Define argon exp-6 potential parameters.\n    alpha = 13.2  # Dimensionless steepness parameter\n    epsilon_div_kB = 143.22  # Potential well depth in K\n    r_m_A = 3.757  # Position of potential minimum in Angstroms\n\n    # Convert parameters to SI units for computation.\n    epsilon = epsilon_div_kB * k_B  # J\n    r_m = r_m_A * 1e-10  # m\n\n    # Test suite: (Temperature in K, Experimental B2 in cm^3/mol)\n    test_cases = [\n        (100.0, -1600.0),\n        (150.0, -380.0),\n        (200.0, -170.0),\n        (273.15, -48.0),\n        (300.0, -21.7),\n        (400.0, -2.5),\n        (500.0, 5.0),\n        (1000.0, 2.0)\n    ]\n\n    # Pre-calculate constant factors for the potential function to optimize.\n    factor1 = 6.0 / (alpha - 6.0)\n    factor2 = alpha / (alpha - 6.0)\n\n    def u_potential(r, eps, alph, rm):\n        \"\"\"\n        Calculates the exponential-6 pair potential energy u(r).\n        Parameters are in SI units.\n        \"\"\"\n        if r == 0:\n            return np.inf\n\n        r_ratio = r / rm\n        \n        repulsive_term = factor1 * np.exp(alph * (1.0 - r_ratio))\n        attractive_term = factor2 * (rm / r)**6\n        \n        return eps * (repulsive_term - attractive_term)\n\n    def b2_integrand(r, T, eps, alph, rm, kb):\n        \"\"\"\n        Defines the integrand for the second virial coefficient B2(T).\n        Integrand is (exp(-u(r)/(k_B*T)) - 1) * 4 * pi * r^2.\n        \"\"\"\n        potential_energy = u_potential(r, eps, alph, rm)\n        beta_u = potential_energy / (kb * T)\n        \n        # To prevent overflow for very large positive beta_u (at small r),\n        # note that exp(-large_number) -> 0, so mayer_f -> -1.\n        # The threshold ~709 is where exp(-x) underflows to 0 in double precision.\n        if beta_u > 700:\n            mayer_f = -1.0\n        else:\n            mayer_f = np.exp(-beta_u) - 1.0\n            \n        return mayer_f * 4.0 * np.pi * r**2\n\n    deviations = []\n    \n    for T_val, b2_exp in test_cases:\n        # Perform the numerical integration from r=0 to infinity.\n        # quad returns the integral result and an error estimate. We need the former.\n        integral_val, _ = integrate.quad(\n            b2_integrand, 0, np.inf, \n            args=(T_val, epsilon, alpha, r_m, k_B)\n        )\n        \n        # Calculate B2(T) in SI units (m^3/mol).\n        # B2 = - (N_A / 2) * integral_of_mayer_function\n        b2_model_si = -0.5 * N_A * integral_val\n        \n        # Convert the model's B2(T) from m^3/mol to cm^3/mol.\n        b2_model_cgs = b2_model_si * 1e6\n        \n        # Calculate the absolute deviation between model and experiment.\n        deviation = abs(b2_model_cgs - b2_exp)\n        \n        deviations.append(round(deviation, 3))\n        \n    # The final output must be a single line with the specified format.\n    print(f\"[{','.join(map(str, deviations))}]\")\n\nsolve()\n```", "id": "2646314"}]}