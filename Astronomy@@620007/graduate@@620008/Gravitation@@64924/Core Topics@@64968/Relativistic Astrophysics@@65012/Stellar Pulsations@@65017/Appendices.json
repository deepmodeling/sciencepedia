{"hands_on_practices": [{"introduction": "To begin our practical exploration of stellar pulsations, we first ask a fundamental question: what determines the characteristic period of a star's oscillation? This exercise guides you through an elegant estimation using the virial theorem, connecting a star's global properties ($M$, $R_0$) and thermodynamics ($\\gamma$) to its pulsation period $\\Pi$ [@problem_id:324283]. This practice provides crucial physical intuition for the period-density relationship observed in pulsating stars.", "problem": "The radial pulsation of a star can be modeled by analyzing its small oscillations around hydrostatic equilibrium. A powerful tool for this analysis is the integral form of the equations of motion, known as the virial theorem. For a non-rotating, non-magnetic, spherical star composed of a gas with a constant adiabatic index $\\gamma$, the full dynamical virial theorem (also known as the Lagrange identity) can be written as:\n$$\n\\frac{1}{2} \\frac{d^2 I}{dt^2} = 2K_{bulk} + 3(\\gamma-1)E_{th} + U\n$$\nHere, $I$ is the moment of inertia about the star's center, $K_{bulk}$ is the bulk kinetic energy of the radial motion, $E_{th}$ is the total internal thermal energy, and $U$ is the total gravitational potential energy.\n\nConsider a star of mass $M$ and equilibrium radius $R_0$. In its equilibrium state, its gravitational potential energy is $U_0 = -\\alpha \\frac{GM^2}{R_0}$ and its moment of inertia is $I_0 = \\beta M R_0^2$, where $G$ is the gravitational constant, and $\\alpha$ and $\\beta$ are dimensionless structural constants of order unity that depend on the star's internal density distribution.\n\nNow, let the star undergo a small, homologous, radial pulsation. In a homologous pulsation, the radius $r$ of any mass shell at time $t$ is given by $r(t) = r_{eq} (1 + \\epsilon(t))$, where $r_{eq}$ is its equilibrium radius and $\\epsilon(t)$ is a small, dimensionless, time-dependent function satisfying $|\\epsilon(t)| \\ll 1$. For such a pulsation, the potential energy and internal energy scale with the overall radius change. If the pulsation is adiabatic, these quantities can be expressed in terms of their equilibrium values ($U_0$, $E_{th,0}$) and the perturbation $\\epsilon(t)$ as:\n$$\nU(t) = U_0(1+\\epsilon(t))^{-1} \\quad \\text{and} \\quad E_{th}(t) = E_{th,0} (1+\\epsilon(t))^{3(1-\\gamma)}\n$$\n\nDerive an expression for the period $\\Pi$ of the star's fundamental radial pulsation mode. Express your answer in terms of $M$, $R_0$, $G$, $\\gamma$, $\\alpha$, and $\\beta$.", "solution": "1. Moment of inertia and its perturbation. In equilibrium, $I_0=\\beta M R_0^2$. Under a homologous perturbation $r(t)=r_{eq}(1+\\epsilon(t))$, $I(t)=\\beta M R_0^2(1+\\epsilon)^2\\approx I_0(1+2\\epsilon)$, so $\\frac{1}{2}\\frac{d^2I}{dt^2}\\approx I_0\\ddot\\epsilon$.\n\n2. Bulk kinetic energy (to lowest order in $\\dot\\epsilon$). This term is $K_{bulk}=\\frac{1}{2}\\int dm\\,(r_{eq}\\dot\\epsilon)^2=\\frac{1}{2}I_0\\dot\\epsilon^2\\sim\\mathcal O(\\dot\\epsilon^2)$, which is neglected in the linearized virial.\n\n3. Thermal and gravitational energies under perturbation. The perturbed energies are $U(t)=U_0(1+\\epsilon)^{-1}\\approx U_0(1-\\epsilon)$ and $E_{th}(t)=E_{th,0}(1+\\epsilon)^{3(1-\\gamma)}\\approx E_{th,0}\\bigl[1+3(1-\\gamma)\\epsilon\\bigr]$. The equilibrium virial theorem, $0=2\\cdot0+3(\\gamma-1)E_{th,0}+U_0$, implies $U_0=-3(\\gamma-1)E_{th,0}$.\n\n4. Linearized virial theorem. Substituting the expansions into the full theorem, $\\frac{1}{2}\\frac{d^2I}{dt^2}=2K_{bulk}+3(\\gamma-1)E_{th}+U\\approx 3(\\gamma-1)E_{th,0}(1+3(1-\\gamma)\\epsilon)+U_0(1-\\epsilon)$. Subtracting the equilibrium terms and keeping only the linear order in $\\epsilon$, we get $I_0\\ddot\\epsilon=\\bigl[-9(\\gamma-1)^2E_{th,0}-U_0\\bigr]\\epsilon =(3\\gamma-4)U_0\\,\\epsilon$.\n\n5. Oscillation equation and frequency. We have the simple harmonic oscillator equation $\\ddot\\epsilon+\\omega^2\\epsilon=0$. Since $U_0=-\\alpha\\,GM^2/R_0$, the squared angular frequency is $\\omega^2=-\\frac{(3\\gamma-4)U_0}{I_0}=\\frac{(3\\gamma-4)\\alpha\\,G\\,M}{\\beta\\,R_0^3}$.\n\n6. Period of fundamental mode. The period is $\\Pi=\\frac{2\\pi}{\\omega} =2\\pi\\sqrt{\\frac{\\beta\\,R_0^3}{\\alpha\\,(3\\gamma-4)\\,G\\,M}}$.", "answer": "$$\\boxed{2\\pi\\sqrt{\\frac{\\beta\\,R_0^3}{\\alpha\\,(3\\gamma-4)\\,G\\,M}}}$$", "id": "324283"}, {"introduction": "Beyond the global period, a full description of pulsation requires understanding the mode's internal energy distribution, for which 'mode inertia' is a key concept. This exercise [@problem_id:908130] involves calculating the mode inertia for a simplified star, offering a concrete look at how this quantity is derived from the oscillation's spatial structure. Mastering this is a key step towards a more rigorous analysis of oscillation energies and stability.", "problem": "In the theory of stellar pulsations, the kinetic energy of a star oscillating in a single normal mode with angular frequency $\\omega$ can be written as $K = \\frac{1}{2} I \\omega^2$, where $I$ is the mode inertia. For spherically symmetric radial pulsations, the displacement vector is purely radial, $\\delta\\vec{r}(r,t) = \\delta r(r) e^{i\\omega t} \\hat{r}$. The mode inertia is then defined by the integral over the star's volume:\n$$I = \\int_0^R (\\delta r(r))^2 4\\pi r^2 \\rho_0(r) dr$$\nwhere $\\rho_0(r)$ is the equilibrium density profile of the star, and $R$ is its radius.\n\nConsider a simple stellar model of a non-rotating star with total mass $M$ and radius $R$, characterized by a uniform mass density $\\rho_0$. We are interested in an approximation for the fundamental radial pulsation mode. For this mode, assume the relative Lagrangian displacement, $\\xi(r) = \\delta r(r) / r$, is directly proportional to the radial coordinate $r$.\n\nThe eigenfunction is normalized such that the displacement at the surface is equal to the stellar radius, i.e., $\\delta r(R) = R$.\n\nCalculate the mode inertia $I$ for this specific pulsation mode in this star. Express your answer in terms of the total mass $M$ and radius $R$ of the star.", "solution": "1. Ansatz for displacement. From the problem statement, $\\delta r(r)/r \\propto r$, so we can write $\\delta r(r)=A\\,r^2$ for some constant $A$. The normalization condition $\\delta r(R)=R$ gives $A R^2=R$, which implies $A=1/R$. Thus, the displacement profile is $\\delta r(r) = r^2/R$.\n\n2. Mode inertia definition. The mode inertia is given by the integral $I=\\int_0^R(\\delta r)^2\\,4\\pi r^2\\,\\rho_0\\,dr$.\n\n3. Substitute $\\delta r$. Inserting the derived displacement profile into the integral:\n$I=\\int_0^R\\left(\\frac{r^2}{R}\\right)^2\\,4\\pi r^2\\,\\rho_0\\,dr =\\frac{4\\pi\\rho_0}{R^2}\\int_0^R r^6\\,dr$.\nEvaluating the integral gives:\n$I = \\frac{4\\pi\\rho_0}{R^2}\\,\\frac{R^7}{7} =\\frac{4\\pi\\rho_0\\,R^5}{7}$.\n\n4. Uniform density. For a uniform sphere, the density is $\\rho_0=\\frac{M}{V} = \\frac{M}{\\frac{4}{3}\\pi R^3}=\\frac{3M}{4\\pi R^3}$.\n\n5. Substitute $\\rho_0$. Finally, substituting the expression for the uniform density into the result for $I$:\n$I=\\frac{4\\pi}{7}R^5\\cdot\\frac{3M}{4\\pi R^3} =\\frac{3}{7}M\\,R^2$.", "answer": "$$\\boxed{\\frac{3}{7}M R^2}$$", "id": "908130"}, {"introduction": "Stellar pulsations are a primary source of noise in the search for exoplanets. This computational practice [@problem_id:2395590] immerses you in a realistic data analysis scenario, tasking you to apply Fourier filtering to remove pulsation signals from a light curve and recover a hidden planetary transit. This exercise provides invaluable hands-on experience with methods at the forefront of observational astronomy.", "problem": "You are to write a complete program that constructs synthetic, uniformly sampled light curves, applies a precisely defined frequency-domain notch filter to remove known stellar pulsation frequencies, and then computes a quantitative estimate of the exoplanet transit depth for each parameter set. The light curve is dimensionless relative flux and the independent variable is time in seconds. Your results must be reported as dimensionless decimal fractions.\n\nThe sampling is defined as follows. Let $N$ be the number of samples and $\\Delta t$ be the uniform sampling interval. The discrete times are $t_n = n \\,\\Delta t$ for $n \\in \\{0,1,\\dots,N-1\\}$. The total baseline is $T = N \\,\\Delta t$. In this problem, $N = 4096$ and $\\Delta t = 60 \\,\\mathrm{s}$, so $T = 245760 \\,\\mathrm{s}$.\n\nFor a real-valued sequence $\\{x_n\\}_{n=0}^{N-1}$, define the discrete Fourier transform (DFT) by\n$$\nX_m = \\sum_{n=0}^{N-1} x_n \\, e^{-2\\pi i \\, n m / N}, \\quad m \\in \\{0,1,\\dots,N-1\\},\n$$\nwith inverse transform\n$$\nx_n = \\frac{1}{N} \\sum_{m=0}^{N-1} X_m \\, e^{2\\pi i \\, n m / N}.\n$$\nThe cyclic frequency associated with index $m$ is $\\nu_m = \\frac{m}{T}$ measured in $\\mathrm{Hz}$.\n\nThe synthetic light curve in each test case is defined for $n \\in \\{0,1,\\dots,N-1\\}$ by\n$$\n\\ell_n = 1 + \\sum_{k=1}^{K} A_k \\, \\sin\\!\\left(2\\pi \\,\\frac{m_k}{N} \\, n + \\phi_k \\right) - d \\, \\mathbf{1}_{\\mathrm{tr}}(n),\n$$\nwhere:\n- $K$ is the number of stellar pulsation components, each exactly commensurate with the baseline, with indices $m_k \\in \\{0,1,\\dots,N-1\\}$, amplitudes $A_k$, and phases $\\phi_k$.\n- The periodic box-shaped transit indicator $\\mathbf{1}_{\\mathrm{tr}}(n)$ equals $1$ if $n \\bmod P_{\\mathrm{steps}} \\in \\{0,1,\\dots,\\tau_{\\mathrm{steps}}-1\\}$ and equals $0$ otherwise. Here $P_{\\mathrm{steps}}$ is the transit period in samples and $\\tau_{\\mathrm{steps}}$ is the transit duration in samples. The physical transit period is $P = P_{\\mathrm{steps}} \\,\\Delta t$ in seconds, and the duration is $\\tau = \\tau_{\\mathrm{steps}} \\,\\Delta t$ in seconds. The transit depth $d$ is a dimensionless decimal fraction relative to unit flux.\n- All fluxes are dimensionless; time is in seconds.\n\nDefine the frequency-domain notch filter as follows. Let $\\{ \\ell_n \\}$ have DFT $\\{ L_m \\}$. Given a set of pulsation indices $\\{ m_k \\}$ and a nonnegative integer half-width $h$, define the zeroed-index set\n$$\n\\mathcal{S} = \\bigcup_{k=1}^{K} \\left( \\{ (m_k + j) \\bmod N : j \\in \\{-h,-h+1,\\dots,h\\} \\} \\cup \\{ ( (N - m_k) + j) \\bmod N : j \\in \\{-h,-h+1,\\dots,h\\} \\} \\right).\n$$\nForm the filtered spectrum $L'_m$ by setting $L'_m = 0$ for $m \\in \\mathcal{S}$ and $L'_m = L_m$ otherwise. The filtered time series $\\ell'_n$ is obtained by the inverse DFT of $\\{ L'_m \\}$.\n\nFor each test case, estimate the transit depth by the difference between the median of the filtered flux values outside transit and the median of the filtered flux values inside transit:\n$$\n\\widehat{d} = \\mathrm{median}\\{ \\ell'_n : \\mathbf{1}_{\\mathrm{tr}}(n) = 0 \\} - \\mathrm{median}\\{ \\ell'_n : \\mathbf{1}_{\\mathrm{tr}}(n) = 1 \\}.\n$$\nReport $\\widehat{d}$ as a dimensionless decimal fraction.\n\nTest suite. Use $N = 4096$ and $\\Delta t = 60 \\,\\mathrm{s}$ for all cases. Each case specifies $(K, \\{m_k\\}, \\{A_k\\}, \\{\\phi_k\\}, h, P_{\\mathrm{steps}}, \\tau_{\\mathrm{steps}}, d)$:\n\n- Case A (general case): $K = 2$, $\\{m_k\\} = \\{300,700\\}$, $\\{A_k\\} = \\{0.01, 0.006\\}$, $\\{\\phi_k\\} = \\{0,0\\}$, $h = 1$, $P_{\\mathrm{steps}} = 512$, $\\tau_{\\mathrm{steps}} = 32$, $d = 0.0015$.\n- Case B (no pulsations): $K = 0$, $\\{m_k\\} = \\emptyset$, $\\{A_k\\} = \\emptyset$, $\\{\\phi_k\\} = \\emptyset$, $h = 0$, $P_{\\mathrm{steps}} = 512$, $\\tau_{\\mathrm{steps}} = 64$, $d = 0.002$.\n- Case C (pulsation at a transit harmonic): $K = 1$, $\\{m_k\\} = \\{16\\}$, $\\{A_k\\} = \\{0.01\\}$, $\\{\\phi_k\\} = \\{0\\}$, $h = 0$, $P_{\\mathrm{steps}} = 512$, $\\tau_{\\mathrm{steps}} = 32$, $d = 0.001$.\n- Case D (high-frequency pulsations near Nyquist): $K = 2$, $\\{m_k\\} = \\{2038, 2045\\}$, $\\{A_k\\} = \\{0.008, 0.007\\}$, $\\{\\phi_k\\} = \\{0,0\\}$, $h = 2$, $P_{\\mathrm{steps}} = 256$, $\\tau_{\\mathrm{steps}} = 16$, $d = 0.0012$.\n\nRequired output format. Your program should produce a single line of output containing the four estimated depths, in the order A, B, C, D, as a comma-separated list enclosed in square brackets. Each number must be rounded to $6$ decimal places. For example, the output must look like\n$[x_A,x_B,x_C,x_D]$\nwith each $x$ a decimal rounded to $6$ places and no additional text. The depths are dimensionless decimal fractions (no unit).", "solution": "The problem presented is a well-defined computational exercise in signal processing, specifically tailored to an application in astrophysics: the detection and characterization of exoplanet transits in the presence of stellar variability. The problem is valid as it is scientifically grounded, mathematically consistent, and all parameters and procedures are specified unambiguously. My approach will be to construct a numerical implementation of the described process.\n\nThe process for each test case involves three primary stages:\n1.  Synthesis of the time-domain signal (the light curve).\n2.  Application of a frequency-domain notch filter to suppress stellar pulsations.\n3.  Estimation of the transit depth from the filtered signal.\n\nThe analysis is performed on a uniformly sampled time series. The number of samples is $N = 4096$ and the sampling interval is $\\Delta t = 60 \\, \\mathrm{s}$. The discrete time points are $t_n = n \\Delta t$ for sample indices $n \\in \\{0, 1, \\dots, N-1 \\}$. The total duration of the observation, or baseline, is $T = N \\Delta t = 245760 \\, \\mathrm{s}$.\n\nFirst, the synthetic light curve, $\\ell_n$, is constructed based on the provided model:\n$$\n\\ell_n = 1 + \\sum_{k=1}^{K} A_k \\, \\sin\\!\\left(2\\pi \\,\\frac{m_k}{N} \\, n + \\phi_k \\right) - d \\, \\mathbf{1}_{\\mathrm{tr}}(n)\n$$\nThis model is comprised of three components:\n- A constant baseline flux, normalized to $1$.\n- A stellar variability signal, modeled as a sum of $K$ sinusoidal pulsations. Each pulsation $k$ is defined by its amplitude $A_k$, phase $\\phi_k$, and a frequency index $m_k$, which corresponds to a physical frequency of $\\nu_{m_k} = m_k / T$. The use of integer indices $m_k$ ensures that each pulsation is commensurate with the observation baseline $T$, meaning an integer number of cycles fit into the time series.\n- An exoplanet transit signal, $-d \\, \\mathbf{1}_{\\mathrm{tr}}(n)$. The function $\\mathbf{1}_{\\mathrm{tr}}(n)$ is a periodic indicator function representing the moments when the planet is transiting its star. It is equal to $1$ during transit and $0$ otherwise. The transit has a depth $d$, a period of $P_{\\text{steps}}$ samples, and a duration of $\\tau_{\\text{steps}}$ samples. This creates a periodic sequence of box-shaped dips in the light curve.\n\nSecond, a frequency-domain notch filter is applied to remove the stellar pulsation signals. This is achieved using the Discrete Fourier Transform (DFT). The light curve $\\{\\ell_n\\}$ is transformed into the frequency domain to obtain its spectrum $\\{L_m\\}$ via the DFT:\n$$\nL_m = \\sum_{n=0}^{N-1} \\ell_n \\, e^{-2\\pi i \\, n m / N}\n$$\nThe core principle of the filter is to identify the frequency bins corresponding to the known stellar pulsations and set their amplitudes to zero. For a real-valued signal like $\\{\\ell_n\\}$, its DFT exhibits Hermitian symmetry, i.e., $L_m = L_{(N-m) \\pmod N}^*$. To ensure that the filtered signal remains real-valued after the inverse transform, we must zero out coefficients symmetrically. For each pulsation index $m_k$, we must zero out the frequency components not only at $m_k$ but also at its corresponding negative frequency, which is represented by the index $(N-m_k) \\pmod N$ in the standard DFT output. The problem specifies a filter half-width $h$, which dictates that we zero out a small band of $2h+1$ frequency bins around each pulsation frequency and its conjugate. The set of indices to be zeroed, $\\mathcal{S}$, is therefore:\n$$\n\\mathcal{S} = \\bigcup_{k=1}^{K} \\left( \\{ (m_k + j) \\bmod N : j \\in \\{-h, \\dots, h\\} \\} \\cup \\{ ((N - m_k) + j) \\bmod N : j \\in \\{-h, \\dots, h\\} \\} \\right)\n$$\nA new, filtered spectrum $\\{L'_m\\}$ is created by setting $L'_m = 0$ for all $m \\in \\mathcal{S}$ and leaving other components unchanged ($L'_m = L_m$). The filtered time-domain signal $\\{\\ell'_n\\}$ is then recovered by applying the inverse DFT:\n$$\n\\ell'_n = \\frac{1}{N} \\sum_{m=0}^{N-1} L'_m \\, e^{2\\pi i \\, n m / N}\n$$\nThe resulting signal $\\{\\ell'_n\\}$ should be real-valued, although small imaginary components may arise from floating-point inaccuracies; these are discarded by taking the real part of the result.\n\nThird, the transit depth is estimated from the filtered light curve $\\{\\ell'_n\\}$. The depth is defined as the difference between the out-of-transit flux and the in-transit flux. To obtain a robust estimate, medians are used instead of means, as medians are less sensitive to outliers or residual artifacts from the filtering process. The estimated depth, $\\widehat{d}$, is calculated as:\n$$\n\\widehat{d} = \\mathrm{median}\\{ \\ell'_n : \\mathbf{1}_{\\mathrm{tr}}(n) = 0 \\} - \\mathrm{median}\\{ \\ell'_n : \\mathbf{1}_{\\mathrm{tr}}(n) = 1 \\}\n$$\nThis procedure is applied to each of the four test cases provided, and the resulting estimated depths are reported in the specified format. The algorithm is implemented in Python using the `numpy` library, which provides efficient and standard-compliant implementations of the FFT and array operations.", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Main function to solve the problem for all test cases.\n    \"\"\"\n    # Define global parameters\n    N = 4096\n    dt = 60.0  # seconds\n\n    # Define the test cases from the problem statement.\n    test_cases = [\n        {\n            \"name\": \"A\",\n            \"K\": 2, \"m_k\": [300, 700], \"A_k\": [0.01, 0.006], \"phi_k\": [0.0, 0.0],\n            \"h\": 1, \"P_steps\": 512, \"tau_steps\": 32, \"d\": 0.0015\n        },\n        {\n            \"name\": \"B\",\n            \"K\": 0, \"m_k\": [], \"A_k\": [], \"phi_k\": [],\n            \"h\": 0, \"P_steps\": 512, \"tau_steps\": 64, \"d\": 0.002\n        },\n        {\n            \"name\": \"C\",\n            \"K\": 1, \"m_k\": [16], \"A_k\": [0.01], \"phi_k\": [0.0],\n            \"h\": 0, \"P_steps\": 512, \"tau_steps\": 32, \"d\": 0.001\n        },\n        {\n            \"name\": \"D\",\n            \"K\": 2, \"m_k\": [2038, 2045], \"A_k\": [0.008, 0.007], \"phi_k\": [0.0, 0.0],\n            \"h\": 2, \"P_steps\": 256, \"tau_steps\": 16, \"d\": 0.0012\n        }\n    ]\n\n    results = []\n    for case in test_cases:\n        d_hat = calculate_filtered_depth(N, dt, case)\n        results.append(d_hat)\n\n    # Final print statement in the exact required format.\n    formatted_results = [f\"{r:.6f}\" for r in results]\n    print(f\"[{','.join(formatted_results)}]\")\n\ndef calculate_filtered_depth(N, dt, params):\n    \"\"\"\n    Calculates the estimated transit depth for a single test case.\n    \n    Args:\n        N (int): Number of samples.\n        dt (float): Sampling interval in seconds.\n        params (dict): Dictionary of parameters for the test case.\n    \n    Returns:\n        float: The estimated transit depth.\n    \"\"\"\n    # Unpack parameters\n    K = params[\"K\"]\n    m_k_list = params[\"m_k\"]\n    A_k_list = params[\"A_k\"]\n    phi_k_list = params[\"phi_k\"]\n    h = params[\"h\"]\n    P_steps = params[\"P_steps\"]\n    tau_steps = params[\"tau_steps\"]\n    d = params[\"d\"]\n\n    # 1. Generate synthetic light curve\n    n = np.arange(N)\n\n    # Pulsation component\n    pulsation_signal = np.zeros(N, dtype=float)\n    if K > 0:\n        for mk, Ak, phik in zip(m_k_list, A_k_list, phi_k_list):\n            pulsation_signal += Ak * np.sin(2.0 * np.pi * mk / N * n + phik)\n\n    # Transit component\n    transit_indicator = ((n % P_steps)  tau_steps).astype(float)\n    \n    # Full light curve\n    l_n = 1.0 + pulsation_signal - d * transit_indicator\n\n    # 2. Apply frequency-domain notch filter\n    \n    # Compute DFT\n    L_m = np.fft.fft(l_n)\n    \n    # Construct the filtered spectrum L_prime_m\n    L_prime_m = L_m.copy()\n    \n    # Determine indices to zero out\n    if K > 0:\n        indices_to_zero = set()\n        for mk in m_k_list:\n            for j in range(-h, h + 1):\n                # Positive frequency component\n                indices_to_zero.add((mk + j) % N)\n                # Negative frequency component (Hermitian symmetry)\n                indices_to_zero.add((N - mk + j) % N)\n        \n        # Apply the filter by zeroing out the specified DFT coefficients\n        L_prime_m[list(indices_to_zero)] = 0.0\n\n    # Compute inverse DFT to get the filtered time series\n    l_prime_n = np.fft.ifft(L_prime_m)\n    \n    # The result should be real; take the real part to discard negligible imaginary parts\n    l_prime_n_real = l_prime_n.real\n\n    # 3. Estimate the transit depth from the filtered curve\n    in_transit_mask = (transit_indicator == 1)\n    out_of_transit_mask = (transit_indicator == 0)\n\n    # Check if there are any in-transit points to avoid errors with median\n    if np.any(in_transit_mask):\n        median_in_transit = np.median(l_prime_n_real[in_transit_mask])\n    else:\n        # This case should not happen with given parameters but is good practice\n        median_in_transit = np.median(l_prime_n_real)\n        \n    median_out_of_transit = np.median(l_prime_n_real[out_of_transit_mask])\n    \n    d_hat = median_out_of_transit - median_in_transit\n    \n    return d_hat\n\nsolve()\n```", "id": "2395590"}]}