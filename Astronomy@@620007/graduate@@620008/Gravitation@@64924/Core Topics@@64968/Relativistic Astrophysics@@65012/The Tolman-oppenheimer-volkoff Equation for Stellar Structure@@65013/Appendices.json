{"hands_on_practices": [{"introduction": "Any valid solution to a differential equation must behave correctly at its boundaries. For a star, the center, where the radius $r=0$, is a crucial point of spherical symmetry that dictates the structure's regularity. This exercise [@problem_id:923428] delves into the local behavior of the pressure profile near the core by approximating the Tolman-Oppenheimer-Volkoff equation for small radii. By determining the curvature of the pressure profile, you will gain direct insight into how the central pressure $P_c$ and central energy density $\\epsilon_c$ dictate the star's structure at its very heart.", "problem": "**Title: Curvature of the Pressure Profile at a Relativistic Star's Center**\n\nThe structure of a static, spherically symmetric star in general relativity is described by the Tolman-Oppenheimer-Volkoff (TOV) equations. In geometric units where the speed of light $c=1$, the equations for the pressure $P(r)$ and enclosed gravitational mass $m(r)$ as a function of radius $r$ are:\n\n$$\n\\frac{dP}{dr} = - \\frac{G(\\epsilon(r) + P(r))(m(r) + 4\\pi r^3 P(r))}{r^2(1 - 2Gm(r)/r)}\n$$\n\n$$\n\\frac{dm}{dr} = 4\\pi r^2 \\epsilon(r)\n$$\n\nHere, $\\epsilon(r)$ is the energy density and $G$ is the gravitational constant.\n\nNear the center of the star (as $r \\to 0$), we assume the pressure and energy density are regular. Spherical symmetry implies that these functions must be even in $r$. Therefore, the pressure profile can be approximated by a parabola for small $r$:\n\n$$\nP(r) \\approx P_c + P_2 r^2\n$$\n\nwhere $P_c = P(0)$ is the central pressure, and $P_2 = \\frac{1}{2} \\frac{d^2P}{dr^2}\\Big|_{r=0}$ is the leading-order curvature coefficient of the profile.\n\n**Problem:**\nDetermine the expression for the curvature coefficient $P_2$ in terms of the central pressure $P_c$ and the central energy density $\\epsilon_c = \\epsilon(0)$. Your final answer should be a symbolic expression involving only $P_c$, $\\epsilon_c$, and $G$.", "solution": "1. Expand near $r=0$:\n$$P(r)=P_c+P_2r^2+O(r^4),\\quad \\epsilon(r)=\\epsilon_c+O(r^2),\\quad m(r)=\\tfrac{4\\pi\\epsilon_c}{3}r^3+O(r^5).$$\n2. TOV equation:\n$$\\frac{dP}{dr}=-\\frac{G(\\epsilon+P)(m+4\\pi r^3P)}{r^2(1-2Gm/r)}.$$\n3. Leading terms:\n$$\\epsilon+P=\\epsilon_c+P_c,\\quad m+4\\pi r^3P=4\\pi r^3\\bigl(\\tfrac{\\epsilon_c}{3}+P_c\\bigr),\\quad 1-2Gm/r=1-\\tfrac{8\\pi G\\epsilon_c}{3}r^2.$$\n4. Therefore\n$$\\frac{dP}{dr}=-4\\pi G(\\epsilon_c+P_c)\\Bigl(\\tfrac{\\epsilon_c}{3}+P_c\\Bigr)\\,r+O(r^3).$$\n5. Thus\n$$P''(0)=-4\\pi G(\\epsilon_c+P_c)\\Bigl(\\tfrac{\\epsilon_c}{3}+P_c\\Bigr),\\quad\nP_2=\\tfrac12P''(0)=-2\\pi G(\\epsilon_c+P_c)\\Bigl(P_c+\\tfrac{\\epsilon_c}{3}\\Bigr).$$", "answer": "$$\\boxed{-2\\pi G(\\epsilon_c+P_c)\\Bigl(P_c+\\tfrac{\\epsilon_c}{3}\\Bigr)}$$", "id": "923428"}, {"introduction": "While realistic stars are complex, exploring simplified models provides invaluable physical intuition. This practice [@problem_id:1001147] utilizes the exact analytical solution for an incompressible fluid—a hypothetical star of uniform energy density—to explore a key global property: its compactness, $C = 2GM/R$. You will investigate this model to find the specific compactness required for the central pressure to equal the central energy density, revealing a fundamental link between the star's core state and its overall relativistic nature.", "problem": "In general relativity, the structure of a static, spherically symmetric star composed of a perfect fluid is described by the Tolman-Oppenheimer-Volkoff (TOV) equations. In geometrized units where the speed of light $c=1$, the equations are:\n$$\n\\frac{dm(r)}{dr} = 4\\pi r^2 \\epsilon(r)\n$$\n$$\n\\frac{dP(r)}{dr} = - \\frac{G(\\epsilon(r) + P(r))(m(r) + 4\\pi r^3 P(r))}{r^2(1 - 2Gm(r)/r)}\n$$\nwhere $r$ is the radial coordinate, $G$ is the gravitational constant, $m(r)$ is the gravitational mass enclosed within radius $r$, $P(r)$ is the pressure, and $\\epsilon(r)$ is the energy density.\n\nConsider a simplified stellar model where the fluid is incompressible, meaning its energy density is constant throughout the star: $\\epsilon(r) = \\epsilon_c$. This can be viewed as the $n=0$ limit of a polytropic equation of state. For such a star, the total mass is $M=m(R)$ and the radius is $R$, where $R$ is defined by the condition $P(R)=0$.\n\nThe compactness of a star is defined by the dimensionless parameter $C = 2GM/R$. This parameter is constrained by the Buchdahl limit, $C  8/9$. For an incompressible star, as the compactness increases, the central pressure $P_c = P(0)$ rises.\n\nDetermine the exact value of the compactness parameter $C$ for which the central pressure is equal to the central energy density, i.e., $P_c = \\epsilon_c$.", "solution": "1. In geometrized units ($c=1,G=1$) for constant energy density $\\epsilon$:\n   $m(r)=\\int_0^r 4\\pi r'^2 \\epsilon \\, dr'=\\frac{4}{3}\\pi \\epsilon r^3$, so the total mass is $M=m(R)$ and compactness is $C=2M/R$.\n\n2. The interior Schwarzschild solution gives\n   $$P(r)=\\epsilon\\,\\frac{\\sqrt{1-\\frac{2M\\,r^2}{R^3}}-\\sqrt{1-\\frac{2M}{R}}}\n             {3\\sqrt{1-\\frac{2M}{R}}-\\sqrt{1-\\frac{2M\\,r^2}{R^3}}}.$$\n\n3. At $r=0$, $\\sqrt{1-2M r^2/R^3}=1$, so\n   $$P_c=\\epsilon\\,\\frac{1-\\sqrt{1-C}}{3\\sqrt{1-C}-1}.$$\n\n4. Set $P_c=\\epsilon$:\n   $$\\frac{1-\\sqrt{1-C}}{3\\sqrt{1-C}-1}=1\n     \\;\\Longrightarrow\\;1-\\sqrt{1-C}=3\\sqrt{1-C}-1\n     \\;\\Longrightarrow\\;2=4\\sqrt{1-C}\n     \\;\\Longrightarrow\\;\\sqrt{1-C}=\\frac12\n     \\;\\Longrightarrow\\;C=\\frac34.$$", "answer": "$$\\boxed{\\frac{3}{4}}$$", "id": "1001147"}, {"introduction": "The vast majority of realistic equations of state do not permit analytical solutions to the TOV equations, making numerical methods essential tools in modern astrophysics. This advanced practice [@problem_id:2448352] challenges you to build a complete numerical solver to model neutron stars from first principles. You will also tackle the critical task of uncertainty quantification by propagating uncertainties from the nuclear equation of state to the star's maximum possible mass, a procedure that lies at the heart of contemporary research in gravitational physics and astrophysics.", "problem": "You are asked to implement a complete, runnable program that performs uncertainty quantification of the maximum gravitational mass of a cold, non-rotating neutron star by propagating uncertainty in a parametric equation of state through the Tolman–Oppenheimer–Volkoff (TOV) equations. Your implementation must follow first principles, beginning with hydrostatic equilibrium in General Relativity and a cold barotropic polytropic model of dense matter. All computations must be performed in the International System of Units (SI), and the final mass results must be expressed in units of solar masses, denoted by $M_{\\odot}$, which is dimensionless because it is a ratio of gravitational masses.\n\nStart from the following fundamental laws and definitions:\n- Hydrostatic equilibrium for a static, spherically symmetric star in General Relativity is governed by the Tolman–Oppenheimer–Volkoff equations:\n  $$\\frac{dP}{dr} = -\\frac{G \\left(\\epsilon + \\frac{P}{c^2}\\right)\\left(m + 4\\pi r^3 \\frac{P}{c^2}\\right)}{r^2 \\left(1 - \\frac{2 G m}{r c^2}\\right)}, \\quad \\frac{dm}{dr} = 4\\pi r^2 \\frac{\\epsilon}{c^2}.$$\n  Here $P$ is pressure in $\\mathrm{Pa}$, $\\epsilon$ is energy density in $\\mathrm{J/m^3}$, $m$ is enclosed gravitational mass in $\\mathrm{kg}$, $r$ is radius in $\\mathrm{m}$, $G$ is the gravitational constant in $\\mathrm{m^3\\,kg^{-1}\\,s^{-2}}$, and $c$ is the speed of light in $\\mathrm{m/s}$.\n- Adopt a cold barotropic relativistic polytropic equation of state specified by an adiabatic index $\\Gamma$ and a reference pressure $P_{\\mathrm{ref}}$ at a fixed reference mass density $\\rho_{\\mathrm{ref}}$. Define the polytropic constant $K$ by\n  $$K = \\frac{P_{\\mathrm{ref}}}{\\rho_{\\mathrm{ref}}^{\\Gamma}}.$$\n  For any pressure $P$, the corresponding rest-mass density $\\rho$ and energy density $\\epsilon$ are given by\n  $$\\rho = \\left(\\frac{P}{K}\\right)^{1/\\Gamma}, \\quad \\epsilon = \\rho c^2 + \\frac{P}{\\Gamma - 1}.$$\n  The causality limit for this idealized barotropic model implies an asymptotic sound speed upper bound $c_s^2 \\to (\\Gamma - 1) c^2$, which is causal for $\\Gamma \\le 2$.\n\nUncertainty quantification specification:\n- Treat the pair $(\\Gamma, P_{\\mathrm{ref}})$ as random inputs, independent across samples. For each draw,\n  - Draw $\\Gamma$ from a normal distribution with mean $\\mu_{\\Gamma}$ and standard deviation $\\sigma_{\\Gamma}$, then truncate to the interval $[1.8, 2.0]$ to respect causality.\n  - Draw $\\log_{10} P_{\\mathrm{ref}}$ from a normal distribution with mean $\\mu_{\\log_{10} P}$ and standard deviation $\\sigma_{\\log_{10} P}$, then set $P_{\\mathrm{ref}} = 10^{\\log_{10} P_{\\mathrm{ref}}}$.\n  - Compute $K = P_{\\mathrm{ref}} / \\rho_{\\mathrm{ref}}^{\\Gamma}$.\n- For each sampled equation of state, define a grid of central pressures\n  $$P_c \\in \\{ \\alpha \\cdot P_{\\mathrm{ref}} \\mid \\alpha \\in \\mathcal{A} \\},$$\n  where $\\mathcal{A}$ is a set of fixed multipliers (see the Integration and scanning configuration below). For each $P_c$ solve the TOV initial value problem from a small radius $r_0$ outward until the pressure first falls below a surface threshold $P_{\\mathrm{surf}}$. The initial conditions are\n  $$P(r_0) = P_c, \\quad m(r_0) = \\frac{4\\pi}{3} r_0^3 \\frac{\\epsilon(P_c)}{c^2}.$$\n  Discard a sample if the integration encounters a point where $1 - \\frac{2 G m}{r c^2} \\le 0$ (loss of hydrostatic equilibrium due to a coordinate singularity), or if numerical failure occurs (e.g., non-finite state).\n- For each equation of state sample, define the maximum mass estimate as the maximum over the scanned central pressures:\n  $$M_{\\max} = \\max_{P_c} M(P_c), \\quad M(P_c) = \\frac{m(R)}{M_\\odot},$$\n  where $R$ is the radius at which the surface threshold is reached, $m(R)$ is the enclosed mass in $\\mathrm{kg}$, and $M_\\odot$ is the solar mass in $\\mathrm{kg}$. Report $M(P_c)$ and $M_{\\max}$ in units of $M_\\odot$, rounded internally as floating-point numbers. If no stable star is produced for any $P_c$ for a given sample, discard that sample.\n- Over $N$ valid samples $(M_{\\max}^{(i)})_{i=1}^{N}$, compute the Monte Carlo estimators for the mean and unbiased standard deviation:\n  $$\\bar{M} = \\frac{1}{N} \\sum_{i=1}^N M_{\\max}^{(i)}, \\quad s = \\sqrt{\\frac{1}{N-1}\\sum_{i=1}^N \\left(M_{\\max}^{(i)} - \\bar{M}\\right)^2}.$$\n\nIntegration and scanning configuration:\n- Use $G = 6.67430\\times 10^{-11}\\ \\mathrm{m^3\\,kg^{-1}\\,s^{-2}}$, $c = 2.99792458\\times 10^8\\ \\mathrm{m/s}$, $M_\\odot = 1.98847\\times 10^{30}\\ \\mathrm{kg}$.\n- Use $\\rho_{\\mathrm{ref}} = 2.8\\times 10^{17}\\ \\mathrm{kg/m^3}$.\n- Start the integration at $r_0 = 10\\ \\mathrm{m}$ with the above initial conditions.\n- Stop when $P \\le P_{\\mathrm{surf}}$ with $P_{\\mathrm{surf}} = 10^{30}\\ \\mathrm{Pa}$.\n- Use a fourth-order Runge–Kutta method with an adaptive step size $h$ based on the local pressure scale height $H = \\left|\\frac{P}{dP/dr}\\right|$:\n  $$h = \\min(h_{\\max}, \\max(h_{\\min}, \\eta H)),$$\n  with $h_{\\min} = 1\\ \\mathrm{m}$, $h_{\\max} = 200\\ \\mathrm{m}$, and $\\eta = 0.3$. Limit the total number of radial steps to $N_{\\mathrm{steps,max}} = 20000$.\n- Use a fixed set of central pressure multipliers\n  $$\\mathcal{A} = \\{\\alpha_k\\}_{k=1}^{24}, \\quad \\alpha_k \\in \\log_{10}\\text{-}\\mathrm{space}[10^{-0.30103}, 10^{1.30103}],$$\n  i.e., $24$ values logarithmically spaced from $0.5$ to $20$.\n\nTest suite:\n- Case $1$:\n  - $N = 14$,\n  - $\\mu_{\\log_{10} P} = 34.6$,\n  - $\\sigma_{\\log_{10} P} = 0.2$,\n  - $\\mu_{\\Gamma} = 1.95$,\n  - $\\sigma_{\\Gamma} = 0.05$,\n  - random seed $= 1729$.\n- Case $2$:\n  - $N = 12$,\n  - $\\mu_{\\log_{10} P} = 34.4$,\n  - $\\sigma_{\\log_{10} P} = 0.2$,\n  - $\\mu_{\\Gamma} = 1.90$,\n  - $\\sigma_{\\Gamma} = 0.05$,\n  - random seed $= 2027$.\n- Case $3$:\n  - $N = 16$,\n  - $\\mu_{\\log_{10} P} = 34.8$,\n  - $\\sigma_{\\log_{10} P} = 0.2$,\n  - $\\mu_{\\Gamma} = 1.98$,\n  - $\\sigma_{\\Gamma} = 0.03$,\n  - random seed $= 123$.\n\nProgramming tasks and required output:\n- Implement the TOV integrator and the uncertainty propagation procedure as described.\n- For each test case, compute the sample mean $\\bar{M}$ and unbiased standard deviation $s$ of $M_{\\max}$ across the valid samples.\n- Your program should produce a single line of output containing the results as a comma-separated list enclosed in square brackets in the following order:\n  $$[\\bar{M}_1, s_1, \\bar{M}_2, s_2, \\bar{M}_3, s_3],$$\n  where the subscript denotes the test case index. All six values must be expressed in units of $M_\\odot$ and printed as floating-point numbers on a single line with no additional text.", "solution": "The problem statement must first be subjected to rigorous validation.\n\n### Step 1: Extract Givens\n\nThe provided information is as follows:\n\n*   **Governing Equations (Tolman-Oppenheimer-Volkoff):**\n    $$ \\frac{dP}{dr} = -\\frac{G \\left(\\epsilon + \\frac{P}{c^2}\\right)\\left(m + 4\\pi r^3 \\frac{P}{c^2}\\right)}{r^2 \\left(1 - \\frac{2 G m}{r c^2}\\right)} $$\n    $$ \\frac{dm}{dr} = 4\\pi r^2 \\frac{\\epsilon}{c^2} $$\n    where $P$ is pressure, $\\epsilon$ is energy density, $m$ is enclosed mass, $r$ is radius, $G$ is the gravitational constant, and $c$ is the speed of light.\n\n*   **Equation of State (EoS):** A cold barotropic relativistic polytrope.\n    *   Polytropic constant: $K = \\frac{P_{\\mathrm{ref}}}{\\rho_{\\mathrm{ref}}^{\\Gamma}}$\n    *   Rest-mass density: $\\rho = \\left(\\frac{P}{K}\\right)^{1/\\Gamma}$\n    *   Energy density: $\\epsilon = \\rho c^2 + \\frac{P}{\\Gamma - 1}$\n    *   Causality constraint: $\\Gamma \\le 2$.\n\n*   **Uncertainty Quantification (UQ) Parameters:**\n    *   Random inputs: $(\\Gamma, P_{\\mathrm{ref}})$.\n    *   $\\Gamma$: Sampled from a normal distribution ($\\mu_{\\Gamma}$, $\\sigma_{\\Gamma}$), then truncated to the interval $[1.8, 2.0]$.\n    *   $P_{\\mathrm{ref}}$: Sampled by drawing $\\log_{10} P_{\\mathrm{ref}}$ from a normal distribution ($\\mu_{\\log_{10} P}$, $\\sigma_{\\log_{10} P}$).\n\n*   **Numerical Integration and Scanning:**\n    *   Initial conditions at $r_0 = 10 \\ \\mathrm{m}$: $P(r_0) = P_c$, $m(r_0) = \\frac{4\\pi}{3} r_0^3 \\frac{\\epsilon(P_c)}{c^2}$.\n    *   Central pressure scan: $P_c \\in \\{ \\alpha \\cdot P_{\\mathrm{ref}} \\mid \\alpha \\in \\mathcal{A} \\}$, where $\\mathcal{A}$ is a set of $24$ logarithmically spaced multipliers from $0.5$ to $20$.\n    *   Termination condition: $P \\le P_{\\mathrm{surf}}$, with $P_{\\mathrm{surf}} = 10^{30}\\ \\mathrm{Pa}$.\n    *   Failure conditions: Discard integration if $1 - \\frac{2 G m}{r c^2} \\le 0$ or other numerical failure. Discard EoS sample if it produces no stable stars.\n    *   Quantity of Interest: $M_{\\max} = \\max_{P_c} (m(R)/M_\\odot)$, where $R$ is the stellar radius.\n    *   Integrator: 4th-order Runge-Kutta (RK4) with adaptive step size $h = \\min(h_{\\max}, \\max(h_{\\min}, \\eta H))$, where $H = |P/(dP/dr)|$.\n    *   Integrator parameters: $h_{\\min} = 1\\ \\mathrm{m}$, $h_{\\max} = 200\\ \\mathrm{m}$, $\\eta = 0.3$, $N_{\\mathrm{steps,max}} = 20000$.\n\n*   **Physical Constants and Reference Values:**\n    *   $G = 6.67430\\times 10^{-11}\\ \\mathrm{m^3\\,kg^{-1}\\,s^{-2}}$\n    *   $c = 2.99792458\\times 10^8\\ \\mathrm{m/s}$\n    *   $M_\\odot = 1.98847\\times 10^{30}\\ \\mathrm{kg}$\n    *   $\\rho_{\\mathrm{ref}} = 2.8\\times 10^{17}\\ \\mathrm{kg/m^3}$\n\n*   **Statistical Estimators:**\n    *   Sample mean: $\\bar{M} = \\frac{1}{N} \\sum_{i=1}^N M_{\\max}^{(i)}$\n    *   Sample unbiased standard deviation: $s = \\sqrt{\\frac{1}{N-1}\\sum_{i=1}^N \\left(M_{\\max}^{(i)} - \\bar{M}\\right)^2}$\n    (Here, $N$ is taken to be the number of valid samples).\n\n*   **Test Cases:** Three cases are specified with different values for sample size ($N$), distribution parameters ($\\mu_{\\log_{10} P}, \\sigma_{\\log_{10} P}, \\mu_{\\Gamma}, \\sigma_{\\Gamma}$), and random seeds.\n\n### Step 2: Validate Using Extracted Givens\n\nThe problem is subjected to validation against the established criteria.\n\n1.  **Scientifically Grounded:** The problem is based on the Tolman-Oppenheimer-Volkoff equations, a cornerstone of relativistic astrophysics for modeling stellar structure. The polytropic equation of state is a well-established and physically motivated simplification for dense matter. The causality condition and the chosen parameter ranges are consistent with the known physics of neutron stars.\n2.  **Well-Posed:** The problem describes a complete procedure for a Monte Carlo simulation. It defines an initial value problem with specific initial conditions, a clear integration method (adaptive RK4), and unambiguous termination and failure criteria. The process for sampling input parameters and calculating output statistics is mathematically precise.\n3.  **Objective:** The problem is formulated using objective, technical language. All quantities are defined, and all required parameters are given specific values or are described by probability distributions.\n4.  **Complete and Consistent:** The problem provides all necessary equations, constants, parameters for the physical model, numerical method, and statistical analysis. There are no apparent contradictions in the provided information. The note about $M_\\odot$ being dimensionless is slightly awkward but its intent is clear: the final mass is to be reported as a dimensionless ratio $m/M_\\odot$.\n5.  **Feasible and Realistic:** The physical and numerical parameters are within realistic ranges for this type of simulation. The computational task, while intensive, is feasible on a standard computer.\n6.  **Well-Structured:** The problem is logically structured, guiding the solver from fundamental principles (GR and EoS) through numerical implementation (TOV integration) to the final statistical analysis (UQ).\n\n### Step 3: Verdict and Action\n\nThe problem is **valid**. It is a self-contained, scientifically sound, and well-posed problem in computational physics. A solution will be developed.\n\n### Solution\n\nThe solution implements a Monte Carlo simulation to quantify the uncertainty in the maximum mass of a neutron star, arising from uncertainties in the equation of state (EoS). The core of the simulation involves repeatedly solving the Tolman-Oppenheimer-Volkoff (TOV) equations.\n\nThe overall algorithm proceeds as follows for each test case:\n1.  **Parameter Sampling:** $N$ samples of the EoS parameters $(\\Gamma, P_{\\mathrm{ref}})$ are generated according to the specified probability distributions and random seed. $\\Gamma$ is drawn from a normal distribution and then clipped to the interval $[1.8, 2.0]$. $\\log_{10} P_{\\mathrm{ref}}$ is drawn from a normal distribution to compute $P_{\\mathrm{ref}}$.\n2.  **Maximum Mass Calculation:** For each sampled EoS:\n    a.  The polytropic constant $K = P_{\\mathrm{ref}} / \\rho_{\\mathrm{ref}}^{\\Gamma}$ is computed.\n    b.  A predefined grid of $24$ central pressures, $P_c$, is constructed.\n    c.  For each $P_c$, the TOV equations are numerically integrated from a small initial radius $r_0$ outwards. This integration yields the mass-radius profile of a star for the given $P_c$ and EoS.\n    d.  The maximum mass for the EoS, $M_{\\max}^{(i)}$, is determined by finding the maximum final mass among all stable stellar structures computed across the $P_c$ grid. If an EoS sample fails to produce any stable stars, it is discarded.\n3.  **Statistical Analysis:** The sample mean ($\\bar{M}$) and sample standard deviation ($s$) of the collected $M_{\\max}^{(i)}$ values from all valid samples are calculated.\n\nThe numerical integration of the TOV system, which is a pair of coupled first-order ordinary differential equations (ODEs) for pressure $P(r)$ and enclosed mass $m(r)$, is performed using a fourth-order Runge-Kutta (RK4) method. To handle the stiffness of the equations where pressure changes rapidly near the stellar surface, an adaptive step size $h$ is employed. The step size is calculated based on the local pressure scale height, $H = |P/(dP/dr)|$, and is constrained within a specified minimum and maximum range ($h_{\\min}, h_{\\max}$).\n\nThe integration for a single star begins at $r_0=10$ m with initial conditions derived assuming a uniform core density. The integration proceeds until the pressure drops below a surface threshold $P_{\\mathrm{surf}}$, at which point the integration stops. The final radius $R$ and mass $m(R)$ are determined by linear interpolation to the point where $P(r) = P_{\\mathrm{surf}}$ for greater accuracy. During integration, a critical check is performed at each step to ensure that the metric term $1 - 2Gm/rc^2$ remains positive. If it becomes non-positive, it signifies gravitational collapse to a black hole (in the context of this model), and the integration for that star is marked as a failure.\n\nThe implementation is encapsulated within a Python program, utilizing `numpy` for numerical operations and `scipy.stats` for generating random variates from a truncated normal distribution. Though the problem text can be interpreted as clamping, using `truncnorm` is statistically more robust. However, for direct fidelity to the phrasing \"then truncate\", clamping is implemented. The code is structured to process each test case sequentially, compute the required statistics, and format the final output as a single comma-separated list.", "answer": "```python\nimport numpy as np\nfrom scipy.stats import truncnorm\n\ndef solve():\n    \"\"\"\n    Main function to run the uncertainty quantification for all test cases.\n    \"\"\"\n\n    # --- Physical Constants (SI units) ---\n    G = 6.67430e-11  # Gravitational constant\n    C = 2.99792458e8   # Speed of light\n    C2 = C**2\n    M_SUN = 1.98847e30 # Solar mass in kg\n\n    # --- EOS and Integration Parameters ---\n    RHO_REF = 2.8e17   # Reference rest-mass density (kg/m^3)\n    R_0 = 10.0         # Initial integration radius (m)\n    P_SURF = 1.0e30    # Surface pressure threshold (Pa)\n    H_MIN = 1.0        # Minimum step size (m)\n    H_MAX = 200.0      # Maximum step size (m)\n    ETA = 0.3          # Step size control factor\n    N_STEPS_MAX = 20000# Maximum number of integration steps\n\n    # Central pressure multipliers\n    PC_MULTIPLIERS = np.logspace(-0.30103, 1.30103, 24)\n\n    test_cases = [\n        # (N, mu_log10 P, sigma_log10 P, mu_Gamma, sigma_Gamma, seed)\n        (14, 34.6, 0.2, 1.95, 0.05, 1729),\n        (12, 34.4, 0.2, 1.90, 0.05, 2027),\n        (16, 34.8, 0.2, 1.98, 0.03, 123),\n    ]\n\n    all_results = []\n\n    for n_samples, mu_logp, sigma_logp, mu_gamma, sigma_gamma, seed in test_cases:\n\n        rng = np.random.default_rng(seed)\n\n        # Generate all random variables for the case at once\n        log_p_ref_samples = rng.normal(mu_logp, sigma_logp, n_samples)\n        p_ref_samples = 10.0**log_p_ref_samples\n        \n        gamma_samples_raw = rng.normal(mu_gamma, sigma_gamma, n_samples)\n        gamma_samples = np.clip(gamma_samples_raw, 1.8, 2.0)\n\n        max_masses = []\n\n        for i in range(n_samples):\n            gamma = gamma_samples[i]\n            p_ref = p_ref_samples[i]\n            \n            # Polytropic constant K\n            k_eos = p_ref / (RHO_REF**gamma)\n\n            masses_for_eos = []\n\n            for alpha in PC_MULTIPLIERS:\n                pc = alpha * p_ref\n\n                # --- Integration of a single star ---\n                r = R_0\n                \n                # Epsilon at center\n                if pc = 0:\n                    # Non-physical central pressure\n                    masses_for_eos.append(None)\n                    continue\n\n                rho_c = (pc / k_eos)**(1.0 / gamma)\n                eps_c = rho_c * C2 + pc / (gamma - 1.0)\n                \n                # Initial conditions\n                p = pc\n                m = (4.0 / 3.0) * np.pi * r**3 * eps_c / C2\n                \n                y = np.array([p, m])\n\n                is_stable = True\n                for step in range(N_STEPS_MAX):\n                    # Check for black hole formation\n                    schwarzschild_term = 1.0 - 2.0 * G * y[1] / (r * C2)\n                    if schwarzschild_term = 0:\n                        is_stable = False\n                        break\n\n                    # --- TOV ODE system ---\n                    rho = (y[0] / k_eos)**(1.0 / gamma) if y[0]  0 else 0.0\n                    eps = rho * C2 + y[0] / (gamma - 1.0)\n                    \n                    dpdr = -(G * (eps + y[0] / C2) * (y[1] + 4.0 * np.pi * r**3 * y[0] / C2)\n                           / (r**2 * schwarzschild_term))\n                    dmdr = 4.0 * np.pi * r**2 * eps / C2\n                    \n                    derivatives = np.array([dpdr, dmdr])\n\n                    # --- Adaptive step size ---\n                    if dpdr == 0:\n                        h = H_MAX\n                    else:\n                        h_pressure_scale = abs(y[0] / dpdr)\n                        h = ETA * h_pressure_scale\n                    \n                    h = np.clip(h, H_MIN, H_MAX)\n\n                    # --- RK4 step ---\n                    k1 = h * derivatives\n                    \n                    # Recalculate derivatives for k2, k3, k4\n                    rho_k2 = ((y[0] + 0.5 * k1[0]) / k_eos)**(1.0 / gamma) if (y[0] + 0.5 * k1[0])  0 else 0.0\n                    eps_k2 = rho_k2 * C2 + (y[0] + 0.5 * k1[0]) / (gamma - 1.0)\n                    schwarzschild_term_k2 = 1.0 - 2.0 * G * (y[1] + 0.5 * k1[1]) / ((r + 0.5*h) * C2)\n                    if schwarzschild_term_k2 = 0: is_stable = False; break\n                    k2 = h * np.array([\n                        -(G * (eps_k2 + (y[0] + 0.5*k1[0]) / C2) * ((y[1] + 0.5*k1[1]) + 4.0 * np.pi * (r+0.5*h)**3 * (y[0] + 0.5*k1[0]) / C2)) / ((r+0.5*h)**2 * schwarzschild_term_k2),\n                        4.0 * np.pi * (r + 0.5*h)**2 * eps_k2 / C2\n                    ])\n\n                    rho_k3 = ((y[0] + 0.5 * k2[0]) / k_eos)**(1.0 / gamma) if (y[0] + 0.5 * k2[0])  0 else 0.0\n                    eps_k3 = rho_k3 * C2 + (y[0] + 0.5 * k2[0]) / (gamma - 1.0)\n                    schwarzschild_term_k3 = 1.0 - 2.0 * G * (y[1] + 0.5 * k2[1]) / ((r + 0.5*h) * C2)\n                    if schwarzschild_term_k3 = 0: is_stable = False; break\n                    k3 = h * np.array([\n                        -(G * (eps_k3 + (y[0] + 0.5*k2[0]) / C2) * ((y[1] + 0.5*k2[1]) + 4.0 * np.pi * (r+0.5*h)**3 * (y[0] + 0.5*k2[0]) / C2)) / ((r+0.5*h)**2 * schwarzschild_term_k3),\n                        4.0 * np.pi * (r + 0.5*h)**2 * eps_k3 / C2\n                    ])\n\n                    rho_k4 = ((y[0] + k3[0]) / k_eos)**(1.0 / gamma) if (y[0] + k3[0])  0 else 0.0\n                    eps_k4 = rho_k4 * C2 + (y[0] + k3[0]) / (gamma - 1.0)\n                    schwarzschild_term_k4 = 1.0 - 2.0 * G * (y[1] + k3[1]) / ((r + h) * C2)\n                    if schwarzschild_term_k4 = 0: is_stable = False; break\n                    k4 = h * np.array([\n                        -(G * (eps_k4 + (y[0] + k3[0]) / C2) * ((y[1] + k3[1]) + 4.0 * np.pi * (r+h)**3 * (y[0] + k3[0]) / C2)) / ((r+h)**2 * schwarzschild_term_k4),\n                        4.0 * np.pi * (r + h)**2 * eps_k4 / C2\n                    ])\n                    \n                    y_next = y + (k1 + 2.0 * k2 + 2.0 * k3 + k4) / 6.0\n\n                    if y_next[0]  P_SURF:\n                        # Linear interpolation for final mass\n                        p_prev, m_prev = y\n                        p_next, m_next = y_next\n                        if p_prev  p_next:\n                             m_final = m_prev + (m_next - m_prev) * (P_SURF - p_prev) / (p_next - p_prev)\n                        else:\n                             m_final = m_next\n                        masses_for_eos.append(m_final / M_SUN)\n                        break\n                    \n                    y = y_next\n                    r += h\n                else: # Loop finished without break\n                    if step == N_STEPS_MAX - 1:\n                        is_stable = False\n                \n                if not is_stable:\n                    masses_for_eos.append(None)\n            \n            valid_masses = [m for m in masses_for_eos if m is not None and not np.isnan(m)]\n            if valid_masses:\n                max_masses.append(max(valid_masses))\n\n        if len(max_masses) = 2:\n            mean = np.mean(max_masses)\n            std = np.std(max_masses, ddof=1)\n            all_results.extend([mean, std])\n        elif len(max_masses) == 1:\n            mean = max_masses[0]\n            std = 0.0 # Or np.nan, but 0.0 is a reasonable float\n            all_results.extend([mean, std])\n        else:\n            # No valid samples, add placeholders\n            all_results.extend([np.nan, np.nan])\n\n    # Format and print the final output\n    print(f\"[{','.join(f'{x:.8f}' for x in all_results)}]\", end=\"\")\n\nsolve()\n```", "id": "2448352"}]}