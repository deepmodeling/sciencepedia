{"hands_on_practices": [{"introduction": "理解相界是材料科学的核心。本练习将引导你应用克拉佩龙方程，这是相平衡理论的基石，来分析像水一样具有反常熔化行为的物质。通过计算压力 $P$ 对熔点 $T$ 的影响，你将学会如何将潜热 $L$ 和体积变化 $\\Delta V$ 等基本热力学量与 $P-T$ 相图中的共存曲线斜率直接联系起来。[@problem_id:2847059]", "problem": "一种晶体材料表现出类水熔化行为：在接近环境条件下，其液相密度高于固相密度。考虑在温度 $T_0 = 273\\,\\mathrm{K}$ 和压力 $P_0 = 1\\,\\mathrm{bar}$ 附近的固液共存，固相的摩尔体积为 $V_\\mathrm{s} = 19.6\\,\\mathrm{cm^3/mol}$，液相的摩尔体积为 $V_\\mathrm{\\ell} = 18.0\\,\\mathrm{cm^3/mol}$，在 $T_0$ 时的摩尔熔化潜热为 $L = 6.0\\,\\mathrm{kJ/mol}$。假设在 $(T_0,P_0)$ 附近的一个小区间内，这些量近似为常数。从相平衡条件 $\\mu_\\mathrm{s}(T,P) = \\mu_\\mathrm{\\ell}(T,P)$ 和热力学恒等式 $d\\mu = V\\,dP - S\\,dT$ 出发，确定在 $(T_0,P_0)$ 点 $P$-$T$ 平面上固液共存曲线斜率的符号并估算其大小。然后，说明在压力增加下熔化温度的物理含义（即所谓的反常熔化行为）。选择与符号、数量级和物理诠释最匹配的选项。\n\n选项：\n\nA. 斜率 $dP/dT$ 为负，数量级为 $10$–$20\\,\\mathrm{MPa/K}$；增加压力会降低熔化温度，因为液相的摩尔体积更小。\n\nB. 斜率 $dP/dT$ 为正，数量级为 $10$–$20\\,\\mathrm{MPa/K}$；增加压力会提高熔化温度，因为液相的摩尔体积更小。\n\nC. 斜率 $dT/dP$ 为负，数量级为 $10$–$20\\,\\mathrm{K/MPa}$；增加压力会提高熔化温度，因为熵增加了。\n\nD. 斜率 $dP/dT$ 为负但极小，约为 $10^{-2}\\,\\mathrm{MPa/K}$；在 $T_0$ 附近，增加压力对熔化温度的影响可忽略不计。", "solution": "问题陈述需经过验证。\n\n**步骤1：提取已知条件**\n- 晶体材料，在接近环境条件下液相密度大于固相密度。\n- 固液共存点：$T_0 = 273\\,\\mathrm{K}$，$P_0 = 1\\,\\mathrm{bar}$。\n- 固相的摩尔体积：$V_\\mathrm{s} = 19.6\\,\\mathrm{cm^3/mol}$。\n- 液相的摩尔体积：$V_\\mathrm{\\ell} = 18.0\\,\\mathrm{cm^3/mol}$。\n- 在 $T_0$ 时的摩尔熔化潜热：$L = 6.0\\,\\mathrm{kJ/mol}$。\n- 假设：在 $(T_0, P_0)$ 附近，$V_\\mathrm{s}$、$V_\\mathrm{\\ell}$ 和 $L$ 近似为常数。\n- 相平衡条件：$\\mu_\\mathrm{s}(T,P) = \\mu_\\mathrm{\\ell}(T,P)$。\n- 热力学恒等式：$d\\mu = V\\,dP - S\\,dT$。\n\n**步骤2：使用提取的已知条件进行验证**\n该问题具有科学依据。它描述了反常熔化现象，这种现象在水等物质中可以观察到，对于这些物质，在三相点附近，液相的密度大于固相的密度。给定的热力学数据是符合实际的，并且与水的已知值一致。该问题是基于化学热力学的基本原理构建的：平衡时化学势相等以及吉布斯-杜亥姆关系。问题提得很好，要求推导一个可求出的量（共存曲线的斜率）并给出其物理诠释。没有矛盾、歧义或信息缺失。该问题是有效的。\n\n**求解过程推导**\n固相(s)和液相($\\ell$)之间的相平衡条件是它们的化学势 $\\mu$ 相等：\n$$\n\\mu_\\mathrm{s}(T,P) = \\mu_\\mathrm{\\ell}(T,P)\n$$\n对于沿 $P$-$T$ 平面中共存曲线的任何位移 $(dT, dP)$，都必须维持此平衡。因此，两相化学势的变化必须相等：\n$$\nd\\mu_\\mathrm{s} = d\\mu_\\mathrm{\\ell}\n$$\n使用给定的化学势微分的热力学恒等式 $d\\mu = V\\,dP - S\\,dT$，其中 $V$ 是摩尔体积，$S$ 是摩尔熵，我们可以写出：\n$$\nV_\\mathrm{s}\\,dP - S_\\mathrm{s}\\,dT = V_\\mathrm{\\ell}\\,dP - S_\\mathrm{\\ell}\\,dT\n$$\n该方程可以重新整理，以求解共存曲线的斜率 $\\frac{dP}{dT}$：\n$$\n(S_\\mathrm{\\ell} - S_\\mathrm{s})\\,dT = (V_\\mathrm{\\ell} - V_\\mathrm{s})\\,dP\n$$\n$$\n\\frac{dP}{dT} = \\frac{S_\\mathrm{\\ell} - S_\\mathrm{s}}{V_\\mathrm{\\ell} - V_\\mathrm{s}} = \\frac{\\Delta S_\\mathrm{fusion}}{\\Delta V_\\mathrm{fusion}}\n$$\n摩尔熔化熵 $\\Delta S_\\mathrm{fusion}$ 与平衡温度 $T$ 下的摩尔熔化潜热 $L$ 之间的关系为 $\\Delta S_\\mathrm{fusion} = \\frac{L}{T}$。将此关系代入斜率表达式中，得到克拉佩龙方程：\n$$\n\\frac{dP}{dT} = \\frac{L}{T \\Delta V_\\mathrm{fusion}} = \\frac{L}{T(V_\\mathrm{\\ell} - V_\\mathrm{s})}\n$$\n现在我们代入给定值来估算 $(T_0, P_0)$ 处的斜率。所有数值必须使用统一的国际单位制（SI）单位。\n- 摩尔熔化潜热：$L = 6.0\\,\\mathrm{kJ/mol} = 6.0 \\times 10^3\\,\\mathrm{J/mol}$。\n- 温度：$T_0 = 273\\,\\mathrm{K}$。\n- 固相的摩尔体积：$V_\\mathrm{s} = 19.6\\,\\mathrm{cm^3/mol} = 19.6 \\times 10^{-6}\\,\\mathrm{m^3/mol}$。\n- 液相的摩尔体积：$V_\\mathrm{\\ell} = 18.0\\,\\mathrm{cm^3/mol} = 18.0 \\times 10^{-6}\\,\\mathrm{m^3/mol}$。\n\n熔化时的摩尔体积变化为：\n$$\n\\Delta V_\\mathrm{fusion} = V_\\mathrm{\\ell} - V_\\mathrm{s} = (18.0 - 19.6) \\times 10^{-6}\\,\\mathrm{m^3/mol} = -1.6 \\times 10^{-6}\\,\\mathrm{m^3/mol}\n$$\n$\\Delta V_\\mathrm{fusion}$ 的符号为负，这是类水熔化的特征。熔化潜热 $L$ 为正值（熔化是吸热过程），绝对温度 $T$ 也为正值。因此，斜率 $\\frac{dP}{dT}$ 的符号必定为负。\n\n现在，我们计算其大小：\n$$\n\\frac{dP}{dT} = \\frac{6.0 \\times 10^3\\,\\mathrm{J/mol}}{273\\,\\mathrm{K} \\times (-1.6 \\times 10^{-6}\\,\\mathrm{m^3/mol})}\n$$\n单位为 $(\\mathrm{J/mol}) / (\\mathrm{K} \\cdot \\mathrm{m^3/mol}) = \\mathrm{J} / (\\mathrm{K} \\cdot \\mathrm{m^3}) = \\mathrm{N \\cdot m} / (\\mathrm{K} \\cdot \\mathrm{m^3}) = \\mathrm{N/m^2 \\cdot K} = \\mathrm{Pa/K}$。单位正确。\n$$\n\\frac{dP}{dT} \\approx \\frac{6000}{-436.8 \\times 10^{-6}}\\,\\mathrm{Pa/K} \\approx -13.736 \\times 10^6\\,\\mathrm{Pa/K}\n$$\n为了与选项进行比较，我们使用换算关系 $1\\,\\mathrm{MPa} = 10^6\\,\\mathrm{Pa}$ 将单位从帕斯卡每开尔文（$\\mathrm{Pa/K}$）转换为兆帕斯卡每开尔文（$\\mathrm{MPa/K}$）：\n$$\n\\frac{dP}{dT} \\approx -13.7\\,\\mathrm{MPa/K}\n$$\n斜率的大小约为 $13.7\\,\\mathrm{MPa/K}$。\n\n负斜率（$\\frac{dP}{dT}  0$）的物理含义是，要保持固液平衡，压力的增加（$dP  0$）需要温度的降低（$dT  0$）。换句话说，增加对固体的压力会降低其熔化温度。这就是反常熔化的定义。其根本的物理原因是勒夏特列原理（Le Chatelier's principle）的结果：增加压力有利于体积更小（密度更高）的相，在这里即为液相。\n\n**选项评估**\n\nA. **斜率 $dP/dT$ 为负，数量级为 $10$–$20\\,\\mathrm{MPa/K}$；增加压力会降低熔化温度，因为液相的摩尔体积更小。**\n- 斜率符号：负。与我们的计算相符。\n- 斜率大小：计算值为 $\\approx -13.7\\,\\mathrm{MPa/K}$，在 $10$–$20\\,\\mathrm{MPa/K}$ 的范围内。相符。\n- 物理诠释：增加压力会降低熔化温度。这是负斜率的正确推论。\n- 原因：给出的原因是液相摩尔体积更小（$V_\\mathrm{\\ell}  V_\\mathrm{s}$），这意味着 $\\Delta V_\\mathrm{fusion}  0$。根据克拉佩龙方程，这正是斜率为负的精确原因。正确。\n- 结论：**正确**。\n\nB. **斜率 $dP/dT$ 为正，数量级为 $10$–$20\\,\\mathrm{MPa/K}$；增加压力会提高熔化温度，因为液相的摩尔体积更小。**\n- 斜率符号：正。错误。斜率为负。声称更小的液体体积导致正斜率是矛盾的。\n- 结论：**错误**。\n\nC. **斜率 $dT/dP$ 为负，数量级为 $10$–$20\\,\\mathrm{K/MPa}$；增加压力会提高熔化温度，因为熵增加了。**\n- 斜率：此选项指的是我们计算斜率的倒数 $\\frac{dT}{dP}$。$\\frac{dT}{dP} = \\frac{1}{dP/dT} \\approx \\frac{1}{-13.7\\,\\mathrm{MPa/K}} \\approx -0.073\\,\\mathrm{K/MPa}$。\n- 斜率符号：所述符号为负，正确。\n- 斜率大小：所述数量级为 $10$–$20\\,\\mathrm{K/MPa}$，这与我们计算出的值 $\\approx 0.073\\,\\mathrm{K/MPa}$ 差别巨大。数量级错误超过两个数量级。\n- 物理诠释：增加压力会提高熔化温度。错误。\n- 结论：**错误**。\n\nD. **斜率 $dP/dT$ 为负但极小，约为 $10^{-2}\\,\\mathrm{MPa/K}$；在 $T_0$ 附近，增加压力对熔化温度的影响可忽略不计。**\n- 斜率符号：负。正确。\n- 斜率大小：所述数量级约为 $10^{-2}\\,\\mathrm{MPa/K}$，即 $0.01\\,\\mathrm{MPa/K}$。我们计算出的值约为 $13.7\\,\\mathrm{MPa/K}$。所述数量级错误三个数量级。\n- 结论：**错误**。\n\n基于严谨的推导和评估，只有选项A与热力学原理和所提供的数据一致。", "answer": "$$\\boxed{A}$$", "id": "2847059"}, {"introduction": "从描述不同相之间的边界，我们转向探索单一相内部的稳定性，即为什么某些溶液会分离成两个不同的相。本练习要求你通过分析吉布斯混合自由能 $G_m$ 的曲率来确定相稳定性。你将为对称正规溶液模型推导出临界点，从而深刻理解相互作用能与混合熵之间如何竞争并最终决定材料的互溶性。[@problem_id:2847127]", "problem": "一种由组分$\\mathrm{A}$和$\\mathrm{B}$组成的二元置换合金，在随机晶格上表现出对称混合行为。假设在正规溶体模型下，其摩尔混合吉布斯自由能为\n$$\nG_m(x,T)=\\Omega\\,x(1-x)+R\\,T\\big[x\\ln x+(1-x)\\ln(1-x)\\big],\n$$\n其中，$x$是组分$\\mathrm{A}$的摩尔分数，$T$是绝对温度，$\\Omega$是一个与温度无关的相互作用参数，单位为能量/摩尔，$R$是普适气体常数。表达式$G_m(x,T)$的定义允许相差一个不影响平衡的加性常数。\n\n仅使用基于平衡热力学的原理以及根据吉布斯自由能曲率定义的相稳定性，确定此对称正规溶体液-液相分离的临界点。具体要求如下：\n\n- 推导用$G_m(x,T)$对$x$的导数所定义的临界点条件，并用这些条件获得以$\\Omega$和$R$表示的临界组分和临界温度的闭合形式表达式。\n- 指出在何种$\\Omega$条件下，会存在有限温度的临界点和相分离现象。\n\n将临界温度以$\\mathrm{K}$为单位表示，临界组分以无量纲的摩尔分数表示。不进行任何数值代入。以单行向量的形式，按$\\big(T_c,\\;x_c\\big)$的顺序提供临界温度和临界组分的最终答案。无需取整。", "solution": "所述问题具有科学依据，提法明确，并包含了获得唯一解所需的所有信息。这是材料热力学中的一个标准问题。我们着手进行推导。\n\n均相二元溶体抵抗组分无穷小涨落的稳定性，由摩尔混合吉布斯自由能$G_m$相对于摩尔分数$x$的曲率决定。当自由能曲线为凸（即其二阶导数为正）时，溶体是稳定的。当自由能曲线上出现负曲率区域时，相分离便可能发生。稳定区和非稳定区之间的边界是亚稳相分解曲线（spinodal curve），其定义条件为二阶导数等于零：\n$$\n\\frac{\\partial^2 G_m}{\\partial x^2} = 0\n$$\n临界点$(x_c, T_c)$是这条亚稳相分解曲线的顶点。它代表了可以发生相分离的最高温度。在此特定点，曲率不仅为零，而且还处于极值。这意味着吉布斯自由能对组分的三阶导数也必须为零：\n$$\n\\frac{\\partial^3 G_m}{\\partial x^3} = 0\n$$\n因此，通过求解这个关于$x$和$T$的二元联立方程组，可以唯一确定临界点。\n\n给定的摩尔混合吉布斯自由能为：\n$$\nG_m(x,T) = \\Omega\\,x(1-x)+R\\,T\\big[x\\ln x+(1-x)\\ln(1-x)\\big]\n$$\n我们计算所需对$x$的偏导数。\n\n首先，求一阶导数：\n$$\n\\frac{\\partial G_m}{\\partial x} = \\frac{\\partial}{\\partial x} \\left( \\Omega x - \\Omega x^2 + R T \\left[x \\ln x + (1-x) \\ln(1-x)\\right] \\right)\n$$\n$$\n\\frac{\\partial G_m}{\\partial x} = \\Omega - 2\\Omega x + R T \\left( \\left[ \\ln x + x \\cdot \\frac{1}{x} \\right] + \\left[ (-1)\\ln(1-x) + (1-x) \\cdot \\frac{-1}{1-x} \\right] \\right)\n$$\n$$\n\\frac{\\partial G_m}{\\partial x} = \\Omega(1 - 2x) + R T \\left( \\ln x + 1 - \\ln(1-x) - 1 \\right) = \\Omega(1 - 2x) + R T \\ln\\left(\\frac{x}{1-x}\\right)\n$$\n\n接着，我们计算二阶导数，它定义了亚稳相分解线：\n$$\n\\frac{\\partial^2 G_m}{\\partial x^2} = \\frac{\\partial}{\\partial x} \\left[ \\Omega(1 - 2x) + R T \\ln\\left(\\frac{x}{1-x}\\right) \\right]\n$$\n$$\n\\frac{\\partial^2 G_m}{\\partial x^2} = -2\\Omega + R T \\left( \\frac{1}{x} - \\frac{-1}{1-x} \\right) = -2\\Omega + R T \\left( \\frac{1}{x} + \\frac{1}{1-x} \\right)\n$$\n$$\n\\frac{\\partial^2 G_m}{\\partial x^2} = -2\\Omega + \\frac{R T}{x(1-x)}\n$$\n令该导数为零，得到临界点的第一个条件：\n$$\n-2\\Omega + \\frac{R T}{x(1-x)} = 0 \\quad \\quad (1)\n$$\n\n现在，我们计算三阶导数：\n$$\n\\frac{\\partial^3 G_m}{\\partial x^3} = \\frac{\\partial}{\\partial x} \\left[ -2\\Omega + R T \\left(x^{-1} + (1-x)^{-1}\\right) \\right]\n$$\n$$\n\\frac{\\partial^3 G_m}{\\partial x^3} = R T \\left( -x^{-2} - (-1)(1-x)^{-2} \\right) = R T \\left( -\\frac{1}{x^2} + \\frac{1}{(1-x)^2} \\right)\n$$\n$$\n\\frac{\\partial^3 G_m}{\\partial x^3} = R T \\frac{-(1-x)^2 + x^2}{x^2 (1-x)^2} = R T \\frac{-(1-2x+x^2) + x^2}{x^2 (1-x)^2} = R T \\frac{2x-1}{x^2 (1-x)^2}\n$$\n令三阶导数为零，得到临界点的第二个条件：\n$$\nR T \\frac{2x-1}{x^2 (1-x)^2} = 0 \\quad \\quad (2)\n$$\n对于一个有物理意义的解，$T  0$ 且 $x \\in (0,1)$，因此 $R T \\neq 0$ 且分母不为零。该方程成立的唯一条件是分子为零：\n$$\n2x - 1 = 0 \\implies x = \\frac{1}{2}\n$$\n此即临界组分 $x_c$。\n$$\nx_c = \\frac{1}{2}\n$$\n由于所给定的吉布斯自由能函数具有对称性，这个结果是符合预期的。\n\n为求临界温度 $T_c$，我们将临界组分 $x_c = \\frac{1}{2}$ 代入方程(1)：\n$$\n-2\\Omega + \\frac{R T_c}{x_c(1-x_c)} = 0\n$$\n$$\n-2\\Omega + \\frac{R T_c}{\\frac{1}{2}\\left(1-\\frac{1}{2}\\right)} = 0\n$$\n$$\n-2\\Omega + \\frac{R T_c}{\\frac{1}{4}} = 0\n$$\n$$\n-2\\Omega + 4 R T_c = 0\n$$\n求解 $T_c$：\n$$\n4 R T_c = 2\\Omega\n$$\n$$\nT_c = \\frac{2\\Omega}{4R} = \\frac{\\Omega}{2R}\n$$\n\n因此，临界点为 $(T_c, x_c) = \\left(\\frac{\\Omega}{2R}, \\frac{1}{2}\\right)$。\n\n最后，要使有限温度的临界点存在且相分离在物理上可能发生，临界温度 $T_c$ 必须为正。由于普适气体常数 $R$ 是一个正的物理常数（$R  0$），$T_c  0$ 的条件意味着：\n$$\n\\frac{\\Omega}{2R}  0\n$$\n这要求相互作用参数 $\\Omega$ 必须为正：\n$$\n\\Omega  0\n$$\n正的 $\\Omega$ 值表示混合焓为正，意味着同类原子（A-A和B-B）之间的键在能量上比异类原子（A-B）之间的键更有利。正是这种混合造成的焓罚（enthalpic penalty）在温度足够低时，足以克服有利的混合熵，从而驱动相分离。如果 $\\Omega \\le 0$，则溶体在所有温度和组分下都是稳定的，不发生相分离。", "answer": "$$\n\\boxed{\\begin{pmatrix} \\frac{\\Omega}{2R}  \\frac{1}{2} \\end{pmatrix}}\n$$", "id": "2847127"}, {"introduction": "理论模型在现实中的直接应用往往需要借助计算方法。最后的这个实践练习将理论与计算材料科学连接起来，处理更普遍的非对称溶液模型。你将通过编程实现一个算法，求解公切线和零曲率条件来计算双节线与旋节线，这是现代材料设计和相图计算中的一项基本技能。[@problem_id:2847129]", "problem": "给定一个二元溶液模型，其摩尔混合吉布斯自由能由组分$\\mathrm{A}$的组分$x \\in (0,1)$和绝对温度$T$定义如下：\n$$\ng(x;T,L_0,L_1) \\equiv R T \\left[x \\ln x + (1-x) \\ln(1-x)\\right] + x(1-x)\\left[L_0 + L_1\\left(2x - 1\\right)\\right],\n$$\n其中，$R$是普适气体常数，$L_0$和$L_1$是以焦耳/摩尔为单位的Redlich–Kister参数。假设压力固定，因此$g$对压力的依赖性可以忽略不计。双节线组分是使两相共存平衡的一对组分$\\{x_1,x_2\\}$，其中$0 lt; x_1 lt; x_2 lt; 1$，它们满足公切线构造（即两种组分的化学势均相等）。旋节线组分界定了局部不稳定区域，并满足不稳定性开始的二阶导数条件。\n\n从二元混合物相平衡的第一性原理出发：\n- 在固定$T$和压力下，两相平衡时两种组分的化学势相等，这等同于$g(x)$上的公切线构造。\n- 局部稳定性要求$g(x)$满足曲率条件；当关于$x$的二阶导数为零时，系统丧失局部稳定性（达到旋节线）。\n\n您的任务是实现一个数值求解器，对于给定的参数$T$、$L_0$和$L_1$，计算：\n1. 通过求解公切线平衡条件来计算双节线组分，不假设对称性。\n2. 通过求解二阶导数条件 $d^2 g/dx^2 = 0$ 来计算旋节线组分。\n\n使用的定义：\n- 双节线组分是在固定$T$下满足$g(x)$公切线构造的组分$\\{x_1,x_2\\}$，其中$0 lt; x_1 lt; x_2 lt; 1$。如果不混溶间隙不存在，则为双节线返回一个空列表。\n- 旋节线组分是方程 $d^2 g/dx^2 = 0$ 在 $x \\in (0,1)$ 区间内的根。如果有两个不同的根，按 $[x_{\\mathrm{left}}, x_{\\mathrm{right}}]$ 的顺序返回它们。如果只有一个（临界）根，返回一个单元素列表 $[x_{\\mathrm{crit}}]$。如果不存在物理旋节线（函数是严格凸的），返回一个空列表。\n\n物理常数和单位：\n- 使用 $R = 8.314462618\\,\\mathrm{J}\\,\\mathrm{mol}^{-1}\\,\\mathrm{K}^{-1}$。\n- 所有 $L_0$ 和 $L_1$ 的值单位为 $\\mathrm{J}\\,\\mathrm{mol}^{-1}$，$T$ 的单位为 $\\mathrm{K}$。\n- 所有组分均以 $(0,1)$ 区间内的无量纲数报告。\n- 将每个报告的组分四舍五入到小数点后恰好六位。\n\n数值要求：\n- 仅使用上述定义，通过公切线构造实现双节线计算。不要假设对称性，也不要线性化方程。您可以使用鲁棒的数值方法求解未知数 $\\{x_1,x_2\\}$（如果需要，还可包括切线斜率）组成的方程组。如果直接非线性求解失败，您可以退而求其次，在足够密集的网格上对$g(x)$进行凸包络构造，以识别与公切线定义一致的连接线端点。\n- 使用鲁棒的求根方法，通过求解 $d^2 g/dx^2 = 0$ 在 $x \\in (0,1)$ 上的根来实现旋节线计算。处理两个根在临界点合并的边界情况；在这种情况下，返回单个组分。如果在 $(0,1)$ 内没有实数根，则返回一个空列表。\n\n角度单位不相关。不涉及百分比。\n\n测试套件：\n计算以下四种情况的双节线和旋节线组分：\n- 情况 1：$T = 400\\,\\mathrm{K}$，$L_0 = 12000\\,\\mathrm{J}\\,\\mathrm{mol}^{-1}$，$L_1 = 0\\,\\mathrm{J}\\,\\mathrm{mol}^{-1}$。\n- 情况 2：$T = T_{\\mathrm{c}}$，其中 $T_{\\mathrm{c}} \\equiv \\dfrac{L_0}{2R}$，且 $L_0 = 12000\\,\\mathrm{J}\\,\\mathrm{mol}^{-1}$，$L_1 = 0\\,\\mathrm{J}\\,\\mathrm{mol}^{-1}$。\n- 情况 3：$T = 1000\\,\\mathrm{K}$，$L_0 = 12000\\,\\mathrm{J}\\,\\mathrm{mol}^{-_1}$，$L_1 = 0\\,\\mathrm{J}\\,\\mathrm{mol}^{-1}$。\n- 情况 4：$T = 400\\,\\mathrm{K}$，$L_0 = 12000\\,\\mathrm{J}\\,\\mathrm{mol}^{-1}$，$L_1 = 2000\\,\\mathrm{J}\\,\\mathrm{mol}^{-1}$。\n\n最终输出格式：\n您的程序应生成单行输出，其中包含一个用方括号括起来、无空格的逗号分隔列表。对于每种情况，输出一个双元素列表 $[\\mathrm{binodal},\\mathrm{spinodal}]$，其中每个元素是如上定义的空列表、单元素列表或双元素列表。因此，最终输出具有以下结构\n$$\n\\big[ [\\mathrm{binodal}_1,\\mathrm{spinodal}_1], [\\mathrm{binodal}_2,\\mathrm{spinodal}_2], [\\mathrm{binodal}_3,\\mathrm{spinodal}_3], [\\mathrm{binodal}_4,\\mathrm{spinodal}_4] \\big],\n$$\n所有组分均四舍五入到六位小数。例如，一个有效的输出可能看起来像\n$$\n[[[0.100000,0.900000],[0.250000,0.750000]],[[],[0.500000]],\\ldots].\n$$", "solution": "所提出的问题是材料热力学中的一个标准练习，具体涉及二元类正规溶体模型中的相平衡。该问题具有科学依据，提法恰当，并包含了求解所需的全部信息。因此，该问题被认为是**有效的**。\n\n求解需要确定二元混合物的双节线和旋节线组分，其摩尔混合吉布斯自由能$g(x)$由Redlich-Kister展开式给出：\n$$\ng(x;T,L_0,L_1) = R T \\left[x \\ln x + (1-x) \\ln(1-x)\\right] + x(1-x)\\left[L_0 + L_1\\left(2x - 1\\right)\\right]\n$$\n其中$x$是组分A的摩尔分数，$T$是绝对温度，$R$是普适气体常数，$L_0$和$L_1$是相互作用参数。\n\n我们从第一性原理出发。\n\n**1. 旋节线组分**\n\n如果吉布斯自由能曲线是凸的，即其关于组分的二阶导数为正，则均相对于无穷小的组分涨落是局部稳定的。这种局部稳定性的极限是旋节线，在该处曲率消失。因此，旋节线组分是以下方程的解：\n$$\n\\frac{d^2 g}{dx^2} = 0\n$$\n为求此导数，我们将$g(x)$对$x$求两次导。\n理想混合项为 $g_{id}(x) = RT[x \\ln x + (1-x) \\ln(1-x)]$。其二阶导数为：\n$$\n\\frac{d^2 g_{id}}{dx^2} = RT\\left(\\frac{1}{x} + \\frac{1}{1-x}\\right) = \\frac{RT}{x(1-x)}\n$$\n超额自由能项为 $g_{ex}(x) = x(1-x)[L_0 + L_1(2x-1)] = (x-x^2)(L_0 - L_1 + 2L_1x) = (L_0-L_1)x + (3L_1-L_0)x^2 - 2L_1x^3$。\n其二阶导数为：\n$$\n\\frac{d^2 g_{ex}}{dx^2} = 2(3L_1-L_0) - 12L_1x = -2L_0 + 6L_1 - 12L_1x = -2L_0 + 6L_1(1-2x)\n$$\n结合这些，旋节线条件是：\n$$\n\\frac{d^2 g}{dx^2} = \\frac{RT}{x(1-x)} - 2L_0 + 6L_1(1-2x) = 0\n$$\n这是一个关于$x$的非线性方程。其在物理上有意义的区间$x \\in (0,1)$内的根即为旋节线组分。根据参数$(T, L_0, L_1)$的不同，该方程在$(0,1)$内可以有零个、一个（在临界点）或两个实根。这些根将使用数值求根算法找到。一种鲁棒的方法包括细分区间$(0,1)$，并在任何符号发生变化的子区间上应用像Brent方法这样的区间法来指示根的存在。\n\n**2. 双节线组分**\n\n如果每个组分在两相中的化学势相等，那么组分为$x_1$和$x_2$的两相就处于热力学平衡。设$\\mu_A(x)$和$\\mu_B(x)$是组分A和B在组分$x$时的化学势。平衡条件是：\n$$\n\\mu_A(x_1) = \\mu_A(x_2)\n$$\n$$\n\\mu_B(x_1) = \\mu_B(x_2)\n$$\n化学势可以从摩尔混合吉布斯自由能$g(x)$作为偏摩尔量导出。对于组分A（摩尔分数为$x$）和B（摩尔分数为$1-x$）：\n$$\n\\mu_A(x) = g(x) + (1-x)\\frac{dg}{dx}\n$$\n$$\n\\mu_B(x) = g(x) - x\\frac{dg}{dx}\n$$\n（注：这些关系式由总摩尔吉布斯能量$G_m = (1-x)G^0_A + x G^0_B + g(x)$和吉布斯-杜亥姆关系推导而来，其中纯组分项$G^0_i$在平衡条件中被消去）。\n\n将这些代入平衡条件，得到两个联立方程。将第二个方程从第一个方程中减去，得到：\n$$\n\\left(\\mu_A(x_1)-\\mu_B(x_1)\\right) = \\left(\\mu_A(x_2)-\\mu_B(x_2)\\right) \\implies \\frac{dg}{dx}\\bigg|_{x_1} = \\frac{dg}{dx}\\bigg|_{x_2}\n$$\n这表明$g(x)$曲线在两个双节线组分处的斜率必须相等。\n将此结果代回到$\\mu_A$的条件中得到：\n$$\ng(x_1) + (1-x_1)\\frac{dg}{dx}\\bigg|_{x_1} = g(x_2) + (1-x_2)\\frac{dg}{dx}\\bigg|_{x_1}\n$$\n整理此式可得第二个条件：\n$$\ng(x_2) - g(x_1) = (x_2-x_1)\\frac{dg}{dx}\\bigg|_{x_1} \\quad \\text{或} \\quad \\frac{g(x_2)-g(x_1)}{x_2-x_1} = \\frac{dg}{dx}\\bigg|_{x_1}\n$$\n这两个方程代表了 “公切线构造” ：存在一条直线，同时与$g(x)$曲线在$x_1$和$x_2$处相切。只有当$g(x)$曲线不是全局凸的时，才存在不混溶间隙，从而存在一对双节线组分$\\{x_1, x_2\\}$（其中$x_1  x_2$）。这要求存在一个$d^2g/dx^2  0$的区域，这又意味着存在两个不同的旋节线组分。因此，只有在找到两个旋节线点时，才进行双节线计算。\n\n这个关于两个未知数$(x_1, x_2)$的两个非线性方程组，使用诸如信赖域或Levenberg-Marquardt方法的鲁棒算法进行数值求解，例如在`scipy.optimize.root`中的实现。可以从旋节线组分估计出求解器的良好初始猜测值，因为已知$0  x_1  x_{s1}  x_{s2}  x_2  1$。\n\n**3. 实现**\n\n数值求解使用Python中的`numpy`和`scipy`库实现。\n- 定义了$g(x)$, $dg/dx$, 和 $d^2g/dx^2$ 的函数。\n- `solve_spinodal`函数通过寻找$d^2g/dx^2=0$在区间$(0,1)$内的根来找到旋节线组分。它能处理零个、一个或两个根的情况。\n- `solve_binodal`函数首先检查是否存在两个旋节线根。如果存在，它会建立并求解公切线条件的双方程系统。它利用旋节线根来生成一个可靠的初始猜测值。如果求解器成功并且结果在物理上有效，则返回组分。\n- 一个主函数遍历测试用例，调用求解器，将结果格式化为六位小数，并按规定格式打印最终输出。", "answer": "```python\nimport numpy as np\nfrom scipy import optimize\n\ndef solve():\n    \"\"\"\n    Solves for binodal and spinodal compositions for a set of test cases\n    based on a Redlich-Kister model for the Gibbs free energy of mixing.\n    \"\"\"\n\n    # Physical Constants\n    R = 8.314462618  # J mol^-1 K^-1\n\n    # --- Thermodynamic Functions ---\n    def g(x, T, L0, L1):\n        \"\"\"Molar Gibbs free energy of mixing, g(x).\"\"\"\n        # Clamp x to avoid domain errors with log\n        x_safe = np.clip(x, 1e-12, 1 - 1e-12)\n        ideal_mixing = R * T * (x_safe * np.log(x_safe) + (1 - x_safe) * np.log(1 - x_safe))\n        excess = x * (1 - x) * (L0 + L1 * (2 * x - 1))\n        return ideal_mixing + excess\n\n    def dg_dx(x, T, L0, L1):\n        \"\"\"First derivative of g(x) with respect to x.\"\"\"\n        x_safe = np.clip(x, 1e-12, 1 - 1e-12)\n        ideal_deriv = R * T * (np.log(x_safe) - np.log(1 - x_safe))\n        excess_deriv = (1 - 2 * x) * (L0 + L1 * (2 * x - 1)) + x * (1 - x) * (2 * L1)\n        return ideal_deriv + excess_deriv\n\n    def d2g_dx2(x, T, L0, L1):\n        \"\"\"Second derivative of g(x) with respect to x.\"\"\"\n        x_safe = np.clip(x, 1e-12, 1 - 1e-12)\n        ideal_deriv2 = R * T * (1 / x_safe + 1 / (1 - x_safe))\n        excess_deriv2 = -2 * L0 + 6 * L1 * (1 - 2 * x)\n        return ideal_deriv2 + excess_deriv2\n\n    # --- Numerical Solvers ---\n    def solve_spinodal(T, L0, L1):\n        \"\"\"\n        Finds spinodal compositions by finding roots of d2g/dx2 = 0 in (0,1).\n        \"\"\"\n        f_spinodal = lambda x: d2g_dx2(x, T, L0, L1)\n        \n        roots = []\n        # Subdivide the interval to find all roots robustly\n        domain_points = np.linspace(1e-9, 1 - 1e-9, 500)\n        for i in range(len(domain_points) - 1):\n            a, b = domain_points[i], domain_points[i+1]\n            if f_spinodal(a) * f_spinodal(b)  0:\n                try:\n                    root = optimize.brentq(f_spinodal, a, b)\n                    if not any(np.isclose(root, r) for r in roots):\n                        roots.append(root)\n                except ValueError:\n                    continue\n        \n        # Handle the critical point case where d2g/dx2 just touches zero.\n        if not roots:\n            res = optimize.minimize_scalar(f_spinodal, bounds=(1e-9, 1 - 1e-9), method='bounded')\n            if res.success and np.isclose(res.fun, 0, atol=1e-7):\n                # Ensure it's a touching point, not a shallow minimum above zero\n                x_crit = res.x\n                if f_spinodal(x_crit - 1e-6)  0 and f_spinodal(x_crit + 1e-6)  0:\n                    roots.append(x_crit)\n\n        return sorted(roots)\n\n    def solve_binodal(T, L0, L1, spinodal_roots):\n        \"\"\"\n        Finds binodal compositions using the common tangent construction.\n        A solution is sought only if a miscibility gap exists (2 spinodal points).\n        \"\"\"\n        if len(spinodal_roots) != 2:\n            return []\n\n        # Define the system of 2 non-linear equations for (x1, x2)\n        def equations(v):\n            x1, x2 = v\n            # Add penalty for out-of-domain evaluation\n            if not (1e-9  x1  x2  1 - 1e-9):\n                return [1e6, 1e6]\n\n            g1, g2 = g(x1, T, L0, L1), g(x2, T, L0, L1)\n            dg1, dg2 = dg_dx(x1, T, L0, L1), dg_dx(x2, T, L0, L1)\n            \n            eq1 = dg1 - dg2\n            eq2 = g2 - g1 - (x2 - x1) * dg1\n            return [eq1, eq2]\n        \n        xs1, xs2 = spinodal_roots\n        initial_guess = [max(1e-9, xs1 * 0.5), min(1-1e-9, 0.5 * (xs2 + 1))]\n        \n        solution = optimize.root(equations, initial_guess, method='hybr', tol=1e-10)\n\n        if solution.success:\n            x1, x2 = solution.x\n            # Sanity checks on the solution\n            if 1e-9  x1  spinodal_roots[0] and spinodal_roots[1]  x2  1-1e-9 and x1  x2:\n                # Check that the Gibbs curve is above the common tangent\n                mid_point = (x1 + x2) / 2\n                g_mid = g(mid_point, T, L0, L1)\n                tangent_at_mid = g(x1, T, L0, L1) + dg_dx(x1, T, L0, L1) * (mid_point - x1)\n                if g_mid  tangent_at_mid + 1e-9: # Add tolerance for convexity check\n                    return [x1, x2]\n        return []\n\n    def calculate_phase_boundaries(T, L0, L1):\n        \"\"\"Orchestrates the calculation for one set of parameters.\"\"\"\n        spinodal = solve_spinodal(T, L0, L1)\n        binodal = solve_binodal(T, L0, L1, spinodal)\n        \n        rounded_binodal = [round(x, 6) for x in binodal]\n        rounded_spinodal = [round(x, 6) for x in spinodal]\n        \n        # Manually format lists to avoid spaces in the final output\n        bin_str = f\"[{','.join(map(str, rounded_binodal))}]\"\n        spin_str = f\"[{','.join(map(str, rounded_spinodal))}]\"\n\n        return f\"[{bin_str},{spin_str}]\"\n\n    # Test cases from the problem statement\n    L0_case123 = 12000.0\n    test_cases = [\n        # Case 1\n        (400.0, L0_case123, 0.0),\n        # Case 2\n        (L0_case123 / (2 * R), L0_case123, 0.0),\n        # Case 3\n        (1000.0, L0_case123, 0.0),\n        # Case 4\n        (400.0, 12000.0, 2000.0),\n    ]\n\n    results = []\n    for case in test_cases:\n        T, L0, L1 = case\n        result = calculate_phase_boundaries(T, L0, L1)\n        results.append(result)\n\n    # Final print statement in the exact required format\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2847129"}]}