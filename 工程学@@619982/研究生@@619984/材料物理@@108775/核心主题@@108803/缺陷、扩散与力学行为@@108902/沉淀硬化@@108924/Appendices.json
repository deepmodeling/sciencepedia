{"hands_on_practices": [{"introduction": "沉淀强化合金的强度取决于位错与析出相的相互作用方式。当析出相尺寸较小时，位错会切过它们；而当析出相尺寸较大时，位错则被迫围绕它们弯曲，这一过程称为奥罗万（Orowan）绕环。本练习将引导您完成一个关键的推导，以确定从切过机制到绕环机制转变的临界析出相半径 $r_c$，这在理论上对应于合金达到峰值强度的条件。[@problem_id:128390]", "problem": "在物理冶金学领域，沉淀硬化是强化轻合金的关键机制。该过程涉及在初生相基体中形成细小弥散的第二相沉淀物。强化效果取决于移动位错与这些沉淀物之间的相互作用。\n\n对于细小的共格沉淀物，位错会切过它们。随着沉淀物在时效过程中长大，位错以弓出并绕过它们的方式在能量上变得更有利，这个过程被称为 Orowan 绕环。合金的最大强度通常在临界沉淀物半径 $r_c$ 处达到，该半径标志着这两种机制之间的转变。\n\n您的任务是推导这个临界沉淀物半径 $r_c$ 的表达式。假设转变发生在剪切所需的临界分解剪切应力 $\\tau_{sh}$ 等于 Orowan 绕环所需的应力 $\\tau_{Or}$ 时。\n\n使用以下模型和定义：\n\n1.  **剪切应力（$\\tau_{sh}$）：** 抗剪切力来自于共格应变和新生成的沉淀物-基体界面的综合作用。半径为 $r$ 的单个球形沉淀物对位错施加的最大阻力 $F_{max}$ 由这些效应的线性叠加给出：\n    $$ F_{max} = (K_c G \\epsilon + K_s \\gamma_s)r $$\n    其中 $G$ 是基体的剪切模量，$\\epsilon$ 是沉淀物的约束晶格错配参数，$\\gamma_s$ 是新生成界面的比界面能，而 $K_c$ 和 $K_s$ 是数量级为1的无量纲常数。\n\n    剪切这些随机分布的沉淀物所需的临界分解剪切应力由 Friedel 统计描述：\n    $$ \\tau_{sh} = \\frac{F_{max}^{3/2}}{\\sqrt{2\\Gamma} b L_s} $$\n    其中 $b$ 是 Burgers 矢量的大小，$\\Gamma = \\frac{Gb^2}{2}$ 是位错线张力，而 $L_s$ 是滑移面上沉淀物的均方间距，由 $L_s = r \\sqrt{\\frac{\\pi}{f}}$ 给出，其中 $f$ 是沉淀物的体积分数。\n\n2.  **Orowan 绕环应力（$\\tau_{Or}$）：** 位错绕过不可穿透的沉淀物所需的应力由下式给出：\n    $$ \\tau_{Or} = \\frac{2\\Gamma}{b \\lambda} $$\n    其中 $\\lambda$ 是有效的边到边沉淀物间距。对于本问题，您应使用关系式 $\\lambda = L_s - 2r$。\n\n推导转变点处的临界沉淀物半径 $r_c$ 的表达式。", "solution": "1. 相关定义和方程：\n   $F_{max} = (K_c G \\epsilon + K_s \\gamma_s)r$\n   $\\Gamma = \\frac{Gb^2}{2}$\n   $L_s = r \\sqrt{\\frac{\\pi}{f}}$\n   $\\lambda = L_s - 2r = r(\\sqrt{\\frac{\\pi}{f}} - 2)$\n   $\\tau_{sh} = \\frac{F_{max}^{3/2}}{\\sqrt{2\\Gamma} b L_s}$\n   $\\tau_{Or} = \\frac{2\\Gamma}{b \\lambda}$\n\n2. 用 $r$ 表示 $\\tau_{sh}$：\n   设 $A = K_c G \\epsilon + K_s \\gamma_s$。则 $F_{max} = Ar$，所以\n   $$\\tau_{sh}=\\frac{(Ar)^{3/2}}{\\sqrt{2\\Gamma}\\,b\\,(r\\sqrt{\\pi/f})}\n     =\\frac{A^{3/2}r^{3/2}}{b\\sqrt{2\\Gamma}\\,r\\sqrt{\\pi/f}}\n     =\\frac{A^{3/2}r^{1/2}}{b\\sqrt{2\\Gamma\\,\\pi/f}}$$\n\n3. 用 $r$ 表示 $\\tau_{Or}$：\n   $$\\tau_{Or}=\\frac{2\\Gamma}{b\\lambda}\n     =\\frac{2\\Gamma}{b\\,r(\\sqrt{\\pi/f}-2)}$$\n\n4. 令 $\\tau_{sh} = \\tau_{Or}$，求解 $r$：\n   $$\\frac{A^{3/2}r^{1/2}}{b\\sqrt{2\\Gamma\\,\\pi/f}}\n     =\\frac{2\\Gamma}{b\\,r(\\sqrt{\\pi/f}-2)}$$\n   消去 $b$ 并将两边同乘以分母：\n   $$A^{3/2}r^{3/2}(\\sqrt{\\pi/f}-2)=2\\Gamma\\sqrt{2\\Gamma\\,\\pi/f}$$\n   因此\n   $$r^{3/2}\n     =\\frac{2\\Gamma\\sqrt{2\\Gamma\\,\\pi/f}}{A^{3/2}(\\sqrt{\\pi/f}-2)}$$\n   且\n   $$r_c\n     =\\left[\\frac{2\\Gamma\\sqrt{2\\Gamma\\,\\pi/f}}{A^{3/2}(\\sqrt{\\pi/f}-2)}\\right]^{2/3}$$\n\n5. 使用 $2\\Gamma = Gb^2$ 进行简化：\n   分子：$(2\\Gamma)^{1+1/2}=(2\\Gamma)^{3/2} \\Rightarrow$ 其 2/3 次方为 $2\\Gamma$；且 $(\\pi/f)^{1/2 \\cdot 2/3}=(\\pi/f)^{1/3}$。\n   分母：$A^{3/2 \\cdot 2/3}=A$, $(\\sqrt{\\pi/f}-2)^{2/3}$。\n   因此\n   $$r_c\n     =\\frac{2\\Gamma\\,(\\pi/f)^{1/3}}{A(\\sqrt{\\pi/f}-2)^{2/3}}\n     =\\frac{G\\,b^2\\,(\\pi/f)^{1/3}}{(K_c\\,G\\,ε+K_s\\,γ_s)\\,(\\sqrt{\\pi/f}-2)^{2/3}}$$", "answer": "$$\\boxed{\\frac{G\\,b^2\\left(\\frac{\\pi}{f}\\right)^{1/3}}{\\bigl(K_c\\,G\\,\\epsilon+K_s\\,\\gamma_s\\bigr)\\,\\bigl(\\sqrt{\\tfrac{\\pi}{f}}-2\\bigr)^{2/3}}}$$", "id": "128390"}, {"introduction": "达到峰值强度是热处理的主要目标，但过长的时效处理会导致析出相粗化和强度下降，即过时效现象。本练习聚焦于奥罗万（Orowan）绕环机制下的动力学过程。通过对析出相间距随时间变化的建模，您将推导出获得最大位错运动阻力所需的最佳时效时间 $t_{peak}$。[@problem_id:128450]", "problem": "在物理冶金领域，沉淀硬化是一种关键的热处理工艺，用于提高韧性材料的屈服强度，这些材料包括大多数铝、镁和钛的结构合金。其机理涉及在原始相基体中形成细小、均匀弥散的第二相质点，这些质点作为位错运动的障碍。\n\n对于强不可穿透的沉淀相，主要的强化机理是 Orowan 绕环，即位错被迫在沉淀相之间弯曲并绕过它们，从而在沉淀相周围留下一个位错环。描述 Orowan 应力（$\\tau$）——即该过程所需的分切应力——的一个精细模型由下式给出：\n$$\n\\tau = \\frac{K}{L_{eff}} \\ln\\left(\\frac{L_{eff}}{r_0}\\right)\n$$\n其中，$K$ 是一个与剪切模量和 Burgers 矢量相关的材料常数，$r_0$ 是位错核心半径（一个常数），而 $L_{eff}$ 是位错滑移面上沉淀相之间的有效间距。\n\n考虑一种形成球形沉淀相的铝合金。在时效热处理过程中，这些沉淀相会发生粗化。它们在特定滑移面上的分布可以建模为一个规则的方形阵列。对于这样的阵列，中心间距 $L$ 与滑移面上的平均沉淀相半径 $r_s$ 以及恒定的沉淀相平面面积分数 $f_A$ 之间存在如下几何关系：\n$$\nL = r_s \\sqrt{\\frac{\\pi}{f_A}}\n$$\n位错弯曲所能利用的有效间距是相邻沉淀相边缘之间的净距离，由 $L_{eff} = L - 2r_s$ 给出。\n\n平均沉淀相半径随时效时间 $t$ 的生长遵循一个简化的粗化动力学定律：\n$$\nr_s^2 = \\alpha t\n$$\n其中 $\\alpha$ 是一个与材料扩散特性相关的常数。\n\n假设在粗化阶段，沉淀相的体积分数以及相应的平面面积分数 $f_A$ 保持恒定，请推导当 Orowan 应力 $\\tau$ 达到其最大值时对应的时效时间 $t_{peak}$ 的表达式。请用常数 $K$、$r_0$、$f_A$ 和 $\\alpha$ 来表示你的答案。", "solution": "我们有 Orowan 应力\n$$\n\\tau=\\frac{K}{L_{eff}}\\ln\\!\\biggl(\\frac{L_{eff}}{r_0}\\biggr).\n$$\n沉淀相半径的生长规律为\n$$\nr_s^2=\\alpha t\\quad\\Longrightarrow\\quad r_s=\\sqrt{\\alpha t}.\n$$\n对于一个面积分数为 $f_A$ 的方形阵列，\n$$\nL=r_s\\sqrt{\\frac{\\pi}{f_A}},\\qquad\nL_{eff}=L-2r_s\n=r_s\\Bigl(\\sqrt{\\tfrac{\\pi}{f_A}}-2\\Bigr)\n=\\sqrt{\\alpha t}\\,b,\n$$\n其中 $b=\\sqrt{\\pi/f_A}-2$。因此\n$$\n\\tau\n=\\frac{K}{b\\sqrt{\\alpha t}}\n\\ln\\!\\biggl(\\frac{b\\sqrt{\\alpha t}}{r_0}\\biggr).\n$$\n令 $x=\\sqrt{\\alpha t}$，则\n$$\n\\tau(x)\n=\\frac{K}{b}\\;x^{-1}\\ln\\!\\Bigl(\\frac{b\\,x}{r_0}\\Bigr).\n$$\n对 $x$ 求导并令 $\\frac{d\\tau}{dx}=0$，可得\n$$\n-\\!x^{-2}\\ln\\!\\Bigl(\\frac{b\\,x}{r_0}\\Bigr)+x^{-2}=0\n\\quad\\Longrightarrow\\quad\n\\ln\\!\\Bigl(\\frac{b\\,x}{r_0}\\Bigr)=1\n\\quad\\Longrightarrow\\quad\nx=\\frac{r_0e}{b}.\n$$\n因此\n$$\n\\sqrt{\\alpha\\,t_{peak}}=\\frac{r_0e}{\\sqrt{\\frac{\\pi}{f_A}}-2}\n\\quad\\Longrightarrow\\quad\nt_{peak}\n=\\frac{r_0^2e^2}{\\alpha\\,\\bigl(\\sqrt{\\tfrac{\\pi}{f_A}}-2\\bigr)^2}.\n$$", "answer": "$$\\boxed{\\frac{r_0^2 e^2}{\\alpha\\bigl(\\sqrt{\\frac{\\pi}{f_A}}-2\\bigr)^2}}$$", "id": "128450"}, {"introduction": "本高级计算练习将带您超越简化的等温模型，深入体验现代材料过程模拟的实践。您将从非等温形核与长大的第一性原理出发，构建一个动力学模型，以预测在复杂热处理路径下析出相的演变。这项实践展示了如何将基础理论转化为强大的预测工具，这正是计算材料科学家在设计和优化先进合金热处理工艺中的核心工作。[@problem_id:2854069]", "problem": "要求您从形核与长大的第一性原理出发，建立、论证并实现一个非等温沉淀硬化动力学模型，并计算在指定热处理程序下随时间变化的热流信号。您的程序必须是一个完整的、可运行的脚本，能够对给定的测试套件执行所需计算，并以确切要求的格式打印结果。\n\n用作基本出发点和定义：\n- 指定了非等温温度程序 $T(t)$。假设 $T(t)$ 是分段线性的，在每个分段上具有恒定的升温或降温速率 $\\beta = dT/dt$。\n- 单位体积形核率为 $I(T) = I_{0}\\exp\\left(-\\dfrac{Q_{n}}{R\\,T}\\right)$，其中 $I_{0}$ 是指前因子，$Q_{n}$ 是形核激活能，$R$ 是普适气体常数。使用 $R = 8.314\\ \\mathrm{J\\,mol^{-1}\\,K^{-1}}$。\n- 径向界面生长速率为 $U(T) = U_{0}\\exp\\left(-\\dfrac{Q_{g}}{R\\,T}\\right)$，其中 $U_{0}$ 是指前因子，$Q_{g}$ 是生长激活能。\n- 对于在时间 $t'$ 形成的核，其在时间 $t \\ge t'$ 的半径为 $r(t',t) = \\int_{t'}^{t} U(\\tau)\\,d\\tau$。\n- 对于在 $m$ 个空间维度（$m \\in \\{1,2,3\\}$）中的生长，每个核的扩展转变“体积”为 $V_{\\mathrm{ext}}(t',t) = c_{m}\\,r(t',t)^{m}$，其中对于针状、盘状和球状，分别为 $c_{1}=2$、$c_{2}=\\pi$ 和 $c_{3}=\\dfrac{4\\pi}{3}$。\n- 扩展转变分数为\n$$\nX_{e}(t) = \\int_{0}^{t} I(t')\\,V_{\\mathrm{ext}}(t',t)\\,dt' = c_{m}\\int_{0}^{t} I(t')\\left(\\int_{t'}^{t} U(\\tau)\\,d\\tau\\right)^{m} dt'.\n$$\n- 考虑了碰撞（impingement）的实际转变分数为 $X(t) = 1 - \\exp(-X_{e}(t))$。\n- 由沉淀引起的单位质量瞬时热流率为 $\\dot{q}(t) = \\Delta H_{m}\\,\\dfrac{dX}{dt}$，其中 $\\Delta H_{m}$ 是沉淀反应的单位质量焓变。约定放热沉淀产生 $\\dot{q}(t) \\ge 0$。\n\n任务：\n1. 基于上述基础，为 $X_{e}(t)$ 的演化构建一个微分系统，该系统需适用于在一般非等温程序下的时间积分，且不借助任何闭合形式的“快捷”表达式。推导必须从给定的 $X_{e}(t)$ 积分定义开始，并仅使用已陈述的基本事实。\n2. 使用您推导的微分系统设计一个数值算法，该算法以固定的时间步长 $\\Delta t$ 在时间上推进状态，通过每个分段上指定的升温速率 $\\beta$ 更新温度，并在每一步计算 $\\dot{q}(t)$ 和 $X(t)$。使用显式时间步进法。确保每个中间量都具有一致的物理单位。您必须正确处理非等温情况，即 $I(T)$ 和 $U(T)$ 必须在瞬时温度 $T(t)$ 下进行计算。\n3. 将该算法实现为一个完整的程序，对于下述套件中的每个测试用例，计算：\n   - $t_{\\mathrm{peak}}$ (单位 $\\mathrm{s}$): $\\dot{q}(t)$ 在整个程序中达到其最大值的时间。\n   - $T_{\\mathrm{peak}}$ (单位 $\\mathrm{K}$): 峰值出现时的温度。\n   - $\\dot{q}_{\\mathrm{peak}}$ (单位 $\\mathrm{W\\,kg^{-1}}$): 单位质量的峰值热流率。\n   - $X_{\\mathrm{final}}$ (无量纲): 程序结束时的最终转变分数。\n   您的程序必须将 $t_{\\mathrm{peak}}$ 四舍五入到3位小数，将 $T_{\\mathrm{peak}}$ 四舍五入到2位小数，将 $\\dot{q}_{\\mathrm{peak}}$ 四舍五入到2位小数，并将 $X_{\\mathrm{final}}$ 四舍五入到6位小数。\n4. 最终输出格式必须是单行文本，包含一个类似Python的列表，其中含有按给定顺序排列的各个测试用例的列表，例如：$[\\,[t_{\\mathrm{peak},1},T_{\\mathrm{peak},1},\\dot{q}_{\\mathrm{peak},1},X_{\\mathrm{final},1}],\\,[...],\\,[...]\\ ]$，逗号后无空格。\n\n数值和单位约定：\n- 使用时间单位 $\\mathrm{s}$，温度单位 $\\mathrm{K}$，气体常数 $R$ 单位 $\\mathrm{J\\,mol^{-1}\\,K^{-1}}$，激活能单位 $\\mathrm{J\\,mol^{-1}}$，生长速率 $U$ 单位 $\\mathrm{m\\,s^{-1}}$，形核率 $I$ 单位 $\\mathrm{m^{-3}\\,s^{-1}}$，$c_{m}$ 按指定值，焓 $\\Delta H_{m}$ 单位 $\\mathrm{J\\,kg^{-1}}$，从而使 $\\dot{q}$ 的单位为 $\\mathrm{W\\,kg^{-1}}$。\n- 使用固定时间步长 $\\Delta t = 0.10\\ \\mathrm{s}$ 并确保精确遵守分段边界（即，缩短分段的最后一步，使其恰好在边界处结束）。\n\n测试套件：\n对于所有用例，取 $R = 8.314\\ \\mathrm{J\\,mol^{-1}\\,K^{-1}}$ 且 $m=3$，其中 $c_{3} = \\dfrac{4\\pi}{3}$。每个用例提供 $(I_{0},Q_{n},U_{0},Q_{g},\\Delta H_{m},T_{0},\\{\\text{segments}\\})$，其中每个分段为 $(\\text{duration},\\beta)$，duration 的单位为 $\\mathrm{s}$，$\\beta$ 的单位为 $\\mathrm{K\\,s^{-1}}$。\n\n- 用例 A (单段线性升温)：\n  - $I_{0} = 1.0\\times 10^{20}\\ \\mathrm{m^{-3}\\,s^{-1}}$, $Q_{n} = 1.40\\times 10^{5}\\ \\mathrm{J\\,mol^{-1}}$，\n  - $U_{0} = 1.0\\times 10^{-7}\\ \\mathrm{m\\,s^{-1}}$, $Q_{g} = 1.20\\times 10^{5}\\ \\mathrm{J\\,mol^{-1}}$，\n  - $\\Delta H_{m} = 3.0\\times 10^{4}\\ \\mathrm{J\\,kg^{-1}}$, $T_{0} = 400\\ \\mathrm{K}$，\n  - 分段: $\\left[(3600,\\ 0.1666667)\\right]$。\n\n- 用例 B (升温-保温-升温)：\n  - $I_{0} = 1.0\\times 10^{20}\\ \\mathrm{m^{-3}\\,s^{-1}}$, $Q_{n} = 1.50\\times 10^{5}\\ \\mathrm{J\\,mol^{-1}}$，\n  - $U_{0} = 5.0\\times 10^{-8}\\ \\mathrm{m\\,s^{-1}}$, $Q_{g} = 1.25\\times 10^{5}\\ \\mathrm{J\\,mol^{-1}}$，\n  - $\\Delta H_{m} = 3.0\\times 10^{4}\\ \\mathrm{J\\,kg^{-1}}$, $T_{0} = 390\\ \\mathrm{K}$，\n  - 分段: $\\left[(1800,\\ 0.0333333),\\ (600,\\ 0.0),\\ (1800,\\ 0.0333333)\\right]$。\n\n- 用例 C (中等速率升温，更高激活能)：\n  - $I_{0} = 5.0\\times 10^{21}\\ \\mathrm{m^{-3}\\,s^{-1}}$, $Q_{n} = 1.80\\times 10^{5}\\ \\mathrm{J\\,mol^{-1}}$，\n  - $U_{0} = 2.0\\times 10^{-7}\\ \\mathrm{m\\,s^{-1}}$, $Q_{g} = 1.40\\times 10^{5}\\ \\mathrm{J\\,mol^{-1}}$，\n  - $\\Delta H_{m} = 3.0\\times 10^{4}\\ \\mathrm{J\\,kg^{-1}}$, $T_{0} = 350\\ \\mathrm{K}$，\n  - 分段: $\\left[(4000,\\ 0.1)\\right]$。\n\n答案规范：\n- 对于每个用例，计算并报告元组 $\\left(t_{\\mathrm{peak}},T_{\\mathrm{peak}},\\dot{q}_{\\mathrm{peak}},X_{\\mathrm{final}}\\right)$，并按上述要求进行四舍五入。\n- 您的程序应生成单行输出，其中包含一个用方括号括起来的逗号分隔列表，该列表按顺序包含三个用例各自的列表：$[\\,[\\cdot,\\cdot,\\cdot,\\cdot],[\\cdot,\\cdot,\\cdot,\\cdot],[\\cdot,\\cdot,\\cdot,\\cdot]\\ ]$。", "solution": "在尝试解答之前，需对问题进行验证。\n\n### 步骤 1：提取已知条件\n问题提供了以下控制方程和定义：\n- 分段线性温度程序 $T(t)$，速率为 $\\beta = dT/dt$。\n- 单位体积形核率：$I(T) = I_{0}\\exp\\left(-\\dfrac{Q_{n}}{RT}\\right)$。\n- 径向界面生长速率：$U(T) = U_{0}\\exp\\left(-\\dfrac{Q_{g}}{RT}\\right)$。\n- 气体常数：$R = 8.314\\ \\mathrm{J\\,mol^{-1}\\,K^{-1}}$。\n- 在 $t'$ 时刻形成、在 $t \\ge t'$ 时刻观察到的核的半径：$r(t',t) = \\int_{t'}^{t} U(\\tau)\\,d\\tau$。\n- 在 $m$ 维空间中生长的每个核的扩展转变“体积”：$V_{\\mathrm{ext}}(t',t) = c_{m}\\,r(t',t)^{m}$，其中 $c_{1}=2$，$c_{2}=\\pi$，$c_{3}=\\dfrac{4\\pi}{3}$。\n- 扩展转变分数：$X_{e}(t) = \\int_{0}^{t} I(t')\\,V_{\\mathrm{ext}}(t',t)\\,dt' = c_{m}\\int_{0}^{t} I(t')\\left(\\int_{t'}^{t} U(\\tau)\\,d\\tau\\right)^{m} dt'$。\n- 实际转变分数（Avrami 方程）：$X(t) = 1 - \\exp(-X_{e}(t))$。\n- 单位质量热流率：$\\dot{q}(t) = \\Delta H_{m}\\,\\dfrac{dX}{dt}$，其中 $\\Delta H_{m}$ 是单位质量的相变焓。\n\n同时还提供了数值参数和测试用例，包括材料常数 $(I_{0}, Q_{n}, U_{0}, Q_{g}, \\Delta H_{m})$、初始温度 $T_{0}$、热处理分段、维度 $m=3$以及时间步长 $\\Delta t = 0.10\\ \\mathrm{s}$。\n\n### 步骤 2：使用提取的已知条件进行验证\n- **科学基础坚实**：该模型基于 Johnson-Mehl-Avrami-Kolmogorov (JMAK) 固态相变理论，这是物理冶金和材料科学的基石。使用 Arrhenius 型方程来描述形核与生长速率是一种标准且有效的物理近似。\n- **问题适定**：问题定义完全。它提供了所有必要的控制方程、材料参数、初始条件（$t=0$ 时 $T_0$，意味着 $X(0)=0$）以及定义好的热处理路径。任务是推导并数值求解一个微分方程组，预期会有唯一解。\n- **客观性**：问题使用精确的数学和物理语言陈述，没有任何主观性或模糊性。\n- **缺陷**：\n    1.  **科学上不合理**：无。该模型是对沉淀动力学的一个有效但简化的表述。\n    2.  **无法形式化或不相关**：无。该问题是材料现象建模的一个形式化练习。\n    3.  **设置不完整或矛盾**：无。所有需要的信息都已提供。\n    4.  **不切实际或不可行**：无。材料参数和热處理程序在金属合金沉淀的物理合理范围内。\n    5.  **不适定或结构不良**：无。问题结构自然地导出一个可解的常微分方程（ODEs）系统。\n    6.  **超出科学可验证范围**：无。计算可以执行和验证。\n    7.  **“伪深奥”**：无。推导需要对微积分（Leibniz 法则）进行非平凡的应用，而数值实现是一项实质性任务。\n\n### 步驟 3：結論與行動\n问题是 **有效的**。将着手制定解决方案。\n\n### 任务 1：微分系统的构建\n\n目标是将扩展分数 $X_e(t)$ 的积分定义转换为一个适合数值积分的常微分方程组（ODEs）。我们从定义开始：\n$$X_{e}(t) = c_{m}\\int_{0}^{t} I(t')\\left(\\int_{t'}^{t} U(\\tau)\\,d\\tau\\right)^{m} dt'$$\n我们定义一组粒子尺寸分布的矩，$M_k(t)$，如下：\n$$M_{k}(t) = \\int_{0}^{t} I(t')\\left(\\int_{t'}^{t} U(\\tau)\\,d\\tau\\right)^{k} dt'$$\n$k = 0, 1, \\dots, m$。根据此定义，扩展分数为 $X_e(t) = c_m M_m(t)$。我们现在推导这些矩随时间的演化。我们使用 Leibniz 积分法则对 $M_k(t)$ 关于时间 $t$ 求导，即 $\\frac{d}{dt} \\int_{a(t)}^{b(t)} f(x, t) dx = \\int_{a(t)}^{b(t)} \\frac{\\partial f}{\\partial t} dx + f(b(t), t) \\frac{db}{dt} - f(a(t), t) \\frac{da}{dt}$。\n\n对于 $M_k(t)$，积分变量为 $t'$，积分上下限为 $0$ 和 $t$，被积函数为 $f(t',t) = I(t')\\left(\\int_{t'}^{t} U(\\tau)\\,d\\tau\\right)^{k}$。\n$$ \\frac{dM_k}{dt} = \\int_{0}^{t} \\frac{\\partial}{\\partial t} \\left[ I(t')\\left(\\int_{t'}^{t} U(\\tau)\\,d\\tau\\right)^{k} \\right] dt' + I(t)\\left(\\int_{t}^{t} U(\\tau)\\,d\\tau\\right)^{k} \\cdot \\frac{d(t)}{dt} $$\n第二项的值为零，因为对于 $k > 0$，$\\int_{t}^{t} U(\\tau)\\,d\\tau = 0$。\n对于 $k=0$ 的特殊情况：\n$$M_0(t) = \\int_0^t I(t') dt' \\quad \\implies \\quad \\frac{dM_0}{dt} = I(t)$$\n该矩 $M_0(t)$ 表示到时间 $t$ 为止单位体积内形成的总核数。\n\n对于 $k > 0$，我们对被积函数关于 $t$ 求导：\n$$ \\frac{\\partial}{\\partial t} \\left[ I(t')\\left(\\int_{t'}^{t} U(\\tau)\\,d\\tau\\right)^{k} \\right] = I(t') \\cdot k \\left(\\int_{t'}^{t} U(\\tau)\\,d\\tau\\right)^{k-1} \\cdot \\frac{\\partial}{\\partial t}\\left(\\int_{t'}^{t} U(\\tau)\\,d\\tau\\right) $$\n内层积分的导数就是 $U(t)$。\n$$ \\frac{\\partial}{\\partial t} \\left[ \\dots \\right] = I(t') \\cdot k \\left(\\int_{t'}^{t} U(\\tau)\\,d\\tau\\right)^{k-1} U(t) $$\n将此代入 $\\frac{dM_k}{dt}$ 的表达式中：\n$$ \\frac{dM_k}{dt} = \\int_{0}^{t} I(t') \\cdot k \\left(\\int_{t'}^{t} U(\\tau)\\,d\\tau\\right)^{k-1} U(t) \\,dt' $$\n$$ \\frac{dM_k}{dt} = k\\,U(t) \\int_{0}^{t} I(t') \\left(\\int_{t'}^{t} U(\\tau)\\,d\\tau\\right)^{k-1} \\,dt' $$\n根据定义，右侧的积分即为 $M_{k-1}(t)$。这得出一个递归关系：\n$$ \\frac{dM_k}{dt} = k\\,U(t)\\,M_{k-1}(t) \\quad \\text{对于 } k=1, 2, \\dots, m $$\n对于 $m=3$（球状生长）的特定情况，我们得到以下四个耦合的常微分方程组：\n$$ \\begin{cases} \\dfrac{dM_0}{dt} = I(t) \\\\ \\dfrac{dM_1}{dt} = U(t) M_0(t) \\\\ \\dfrac{dM_2}{dt} = 2\\,U(t) M_1(t) \\\\ \\dfrac{dM_3}{dt} = 3\\,U(t) M_2(t) \\end{cases} $$\n在 $t=0$ 时的初始条件是 $M_0(0) = M_1(0) = M_2(0) = M_3(0) = 0$。\n\n转变分数 $X(t)$ 和热流 $\\dot{q}(t)$ 可以用这些矩来表示。\n$X_e(t) = c_3 M_3(t)$。\n$$ \\frac{dX}{dt} = \\frac{d}{dt} \\left(1 - e^{-X_e(t)}\\right) = e^{-X_e(t)} \\frac{dX_e}{dt} = e^{-c_3 M_3(t)} \\cdot c_3 \\frac{dM_3}{dt} $$\n代入 $\\frac{dM_3}{dt}$ 的表达式：\n$$ \\frac{dX}{dt} = e^{-c_3 M_3(t)} \\cdot c_3 \\cdot \\left( 3\\,U(t) M_2(t) \\right) = (1-X(t)) \\cdot 3 c_3 U(t) M_2(t) $$\n热流率则为：\n$$ \\dot{q}(t) = \\Delta H_m \\frac{dX}{dt} = \\Delta H_m (1-X(t)) \\cdot 3 c_3 U(t) M_2(t) $$\n\n### 任务 2：数值算法设计\n\n基于前向欧拉法（Forward Euler method）构建一个显式时间步进算法，以求解推导出的系统。\n1.  **状态向量**：在任意时间 $t$，系统状态由向量 $[T(t), M_0(t), M_1(t), M_2(t), M_3(t)]$ 定义。\n2.  **初始化**：在 $t=0$ 时，设置 $T = T_0$ 且 $M_k = 0$ (对于 $k \\in \\{0, 1, 2, 3\\}$)。初始化总时间 $t_{total}=0$。创建数组以存储 $t, T, \\dot{q}, X$ 的时间序列。\n3.  **时间积分循环**：通过遍历定义的热处理分段来推进模拟。对于每个持续时间为 $D$、速率为 $\\beta$ 的分段：\n    -   设置分段结束时间 $t_{end} = t_{total} + D$。\n    -   循环直到 $t_{total} < t_{end}$：\n        a.  确定当前时间步长 $\\Delta t_{curr} = \\min(\\Delta t, t_{end} - t_{total})$。\n        b.  在当前状态 $(T, M_0, M_1, M_2, M_3)$ 下，计算温度依赖的速率 $I(T)$ 和 $U(T)$。\n        c.  使用上述推导的 ODE 系统计算导数 $\\frac{dM_k}{dt}$。\n        d.  计算瞬时转变分数 $X(t) = 1 - \\exp(-c_3 M_3(t))$ 和热流 $\\dot{q}(t) = \\Delta H_m \\cdot (1-X(t)) \\cdot 3 c_3 U(t) M_2(t)$。\n        e.  存储当前值 $(t_{total}, T, \\dot{q}, X)$。\n        f.  使用前向欧拉格式更新状态变量：\n            -   $M_k(t+\\Delta t_{curr}) = M_k(t) + \\frac{dM_k}{dt} \\cdot \\Delta t_{curr}$ for $k=0,1,2,3$。\n            -   $T(t+\\Delta t_{curr}) = T(t) + \\beta \\cdot \\Delta t_{curr}$。\n        g.  推进总时间：$t_{total} = t_{total} + \\Delta t_{curr}$。\n4.  **后处理**：模拟完成后，分析存储的时间序列以找到峰值热流 $\\dot{q}_{\\mathrm{peak}}$及其对应的时间 $t_{\\mathrm{peak}}$ 和温度 $T_{\\mathrm{peak}}$。最终转变分数 $X_{\\mathrm{final}}$ 是存储的 $X$ 序列的最后一个值。\n5.  **结果格式化**：将计算值四舍五入到指定的小数位数，并按要求格式化输出。使用 NumPy 数组可以方便高效地进行存储和分析。\n\n该算法通过在每个时间步重新计算速率来正确实现非等温模型，并确保精确地到达分段边界。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the non-isothermal precipitation hardening kinetics problem.\n    \"\"\"\n    # Universal gas constant in J/(mol*K)\n    R = 8.314\n    # Time step in s\n    DT = 0.10\n    # Shape factor for spherical precipitates (m=3)\n    C3 = 4.0 * np.pi / 3.0\n\n    test_cases = [\n        # Case A (single linear heating)\n        {\n            'I0': 1.0e20,  # m^-3 s^-1\n            'Qn': 1.40e5,  # J/mol\n            'U0': 1.0e-7,  # m/s\n            'Qg': 1.20e5,  # J/mol\n            'dH': 3.0e4,   # J/kg\n            'T0': 400.0,   # K\n            'segments': [(3600.0, 0.1666667)]  # (duration_s, beta_K/s)\n        },\n        # Case B (ramp–hold–ramp)\n        {\n            'I0': 1.0e20,\n            'Qn': 1.50e5,\n            'U0': 5.0e-8,\n            'Qg': 1.25e5,\n            'dH': 3.0e4,\n            'T0': 390.0,\n            'segments': [(1800.0, 0.0333333), (600.0, 0.0), (1800.0, 0.0333333)]\n        },\n        # Case C (moderate heating, higher activation)\n        {\n            'I0': 5.0e21,\n            'Qn': 1.80e5,\n            'U0': 2.0e-7,\n            'Qg': 1.40e5,\n            'dH': 3.0e4,\n            'T0': 350.0,\n            'segments': [(4000.0, 0.1)]\n        }\n    ]\n\n    all_results = []\n\n    for case in test_cases:\n        # Unpack parameters\n        I0, Qn = case['I0'], case['Qn']\n        U0, Qg = case['U0'], case['Qg']\n        dH, T0 = case['dH'], case['T0']\n        segments = case['segments']\n\n        # Initialize state variables\n        t_current = 0.0\n        T_current = T0\n        # Moments M0, M1, M2, M3\n        M_k = np.zeros(4)\n\n        # Data storage\n        history_t = []\n        history_T = []\n        history_q_dot = []\n        history_X = []\n\n        # Simulation loop over segments\n        for duration, beta in segments:\n            t_segment_end = t_current + duration\n            \n            # Machine precision epsilon for float comparison\n            epsilon = 1e-9\n\n            while t_current  t_segment_end - epsilon:\n                # Ensure segment boundary is hit exactly\n                dt_current = min(DT, t_segment_end - t_current)\n\n                # Calculate temperature-dependent rates at current T\n                # Avoid division by zero if T is ever 0\n                if T_current = 0:\n                    I_rate = 0.0\n                    U_rate = 0.0\n                else: \n                    I_rate = I0 * np.exp(-Qn / (R * T_current))\n                    U_rate = U0 * np.exp(-Qg / (R * T_current))\n\n                # Calculate derivatives of moments\n                dM0_dt = I_rate\n                dM1_dt = U_rate * M_k[0]\n                dM2_dt = 2.0 * U_rate * M_k[1]\n                dM3_dt = 3.0 * U_rate * M_k[2]\n\n                # Calculate physical quantities\n                X_e = C3 * M_k[3]\n                # Avoid underflow in exp\n                if X_e > 700: # np.exp(-700) is close to zero\n                    X = 1.0\n                    exp_X_e = 0.0\n                else:\n                    exp_X_e = np.exp(-X_e)\n                    X = 1.0 - exp_X_e\n                \n                # dX/dt = exp(-X_e) * dX_e/dt = exp(-X_e) * C3 * dM3/dt\n                dX_dt = exp_X_e * C3 * dM3_dt\n                q_dot = dH * dX_dt\n                \n                # Store results for this step\n                history_t.append(t_current)\n                history_T.append(T_current)\n                history_q_dot.append(q_dot)\n                history_X.append(X)\n\n                # Update state variables using Forward Euler\n                M_k[0] += dM0_dt * dt_current\n                M_k[1] += dM1_dt * dt_current\n                M_k[2] += dM2_dt * dt_current\n                M_k[3] += dM3_dt * dt_current\n                T_current += beta * dt_current\n                t_current += dt_current\n\n        history_q_dot_np = np.array(history_q_dot)\n        peak_idx = np.argmax(history_q_dot_np)\n\n        t_peak = history_t[peak_idx]\n        T_peak = history_T[peak_idx]\n        q_peak = history_q_dot_np[peak_idx]\n        X_final = history_X[-1] if history_X else 0.0\n\n        # Round results to specified precision\n        t_peak_rounded = round(t_peak, 3)\n        T_peak_rounded = round(T_peak, 2)\n        q_peak_rounded = round(q_peak, 2)\n        X_final_rounded = round(X_final, 6)\n\n        all_results.append([\n            t_peak_rounded,\n            T_peak_rounded,\n            q_peak_rounded,\n            X_final_rounded\n        ])\n    \n    # Format the final output string exactly as required\n    result_str = '[' + ','.join(['[' + ','.join(map(str, res)) + ']' for res in all_results]) + ']'\n    print(result_str)\n\nsolve()\n```", "id": "2854069"}]}