{"hands_on_practices": [{"introduction": "掌握维格纳-赛兹（Wigner-Seitz）构建法的最好方法就是亲自动手实践。我们将从一个二维三角晶格的简单案例开始，通过几何作图法，一步步构建出其维格纳-赛兹原胞。这个练习将帮助你直观地理解如何通过寻找最近邻原子并作出垂直平分线来确定原胞的边界，并为你处理更复杂的三维结构打下坚实的几何基础 [@problem_id:2870601]。", "problem": "考虑一个平面中的二维三角布拉菲晶格，其晶格常数 $a$ 定义为晶格点之间的最近邻间距。设原胞基矢为 $\\mathbf{a}_{1} = a\\,(1,0)$ 和 $\\mathbf{a}_{2} = a\\,\\left(\\frac{1}{2}, \\frac{\\sqrt{3}}{2}\\right)$，并在原点处放置一个晶格点。仅使用 Wigner–Seitz 构造法的定义（即平面中比到任何其他晶格点更靠近原点的点的集合），构造围绕原点的 Wigner–Seitz 原胞，并确定其多边形形状。然后，计算此 Wigner–Seitz 原胞的面积以及其各边的长度（用 $a$ 表示）。\n\n你必须证明为何 Wigner–Seitz 原胞的面积等于布拉菲晶格中每个晶格点的平均面积，以及为何该原胞是一个正多边形。将最终结果表示为有序对 $\\left(A,\\,s\\right)$，其中 $A$ 是面积，$s$ 是边长，两者都用 $a$ 的符号形式表示。无需进行数值取整。不要包含物理单位；将面积和边长直接表示为 $a$ 的解析表达式。", "solution": "该问题要求构造一个二维三角布拉菲晶格的 Wigner-Seitz 原胞并确定其性质。我将首先验证问题陈述。\n\n### 第 1 步：提取已知条件\n- 晶格类型：二维三角布拉菲晶格。\n- 晶格常数：$a$，定义为最近邻间距。\n- 原胞基矢：$\\mathbf{a}_{1} = a(1,0)$ 和 $\\mathbf{a}_{2} = a\\left(\\frac{1}{2}, \\frac{\\sqrt{3}}{2}\\right)$。\n- 在原点 $(0,0)$ 处有一个晶格点。\n- 任务：构造围绕原点的 Wigner-Seitz 原胞。\n- 任务：确定其多边形形状。\n- 任务：计算其面积 $A$ 和边长 $s$。\n- 任务：证明为何 Wigner-Seitz 原胞的面积等于每个晶格点的平均面积。\n- 任务：证明为何该原胞是正多边形。\n- 最终结果格式：有序对 $(A, s)$。\n\n### 第 2 步：使用提取的已知条件进行验证\n该问题具有科学依据，提法恰当且客观。它使用了固态物理学中关于三角晶格和 Wigner-Seitz 构造的标准定义。给定的原胞基矢 $|\\mathbf{a}_{1}| = a$ 和 $|\\mathbf{a}_{2}| = a$ 与晶格常数 $a$ 作为最近邻距离的定义是一致的。该问题是自洽的，没有矛盾或歧义。未发现任何缺陷。\n\n### 第 3 步：结论与行动\n问题有效。下面将给出完整解答。\n\n### 解答\n围绕一个晶格点（此处为原点）的 Wigner-Seitz 原胞定义为空间中比到任何其他晶格点更靠近该晶格点的点的集合。该原胞的边界由连接中心晶格点与所有其他晶格点的矢量的垂直平分线构成。原胞本身是这些垂直平分线所围成的最小区域。\n\n首先，我们必须确定原点最近邻的晶格点。一个普遍的晶格点由矢量 $\\mathbf{R} = n_{1}\\mathbf{a}_{1} + n_{2}\\mathbf{a}_{2}$ 给出，其中 $n_{1}$ 和 $n_{2}$ 是整数。最近邻是具有最小非零模长 $|\\mathbf{R}|$ 的点的集合。\n给定的原胞基矢为 $\\mathbf{a}_{1} = a(1,0)$ 和 $\\mathbf{a}_{2} = a\\left(\\frac{1}{2}, \\frac{\\sqrt{3}}{2}\\right)$。它们的模长均为 $a$。\n让我们确定从原点指向其六个最近邻的矢量。它们是：\n$$\n\\begin{aligned}\n\\mathbf{R}_{1} &= \\mathbf{a}_{1} = a(1, 0) \\\\\n\\mathbf{R}_{2} &= \\mathbf{a}_{2} = a\\left(\\frac{1}{2}, \\frac{\\sqrt{3}}{2}\\right) \\\\\n\\mathbf{R}_{3} &= -\\mathbf{a}_{1} + \\mathbf{a}_{2} = a\\left(-\\frac{1}{2}, \\frac{\\sqrt{3}}{2}\\right) \\\\\n\\mathbf{R}_{4} &= -\\mathbf{a}_{1} = a(-1, 0) \\\\\n\\mathbf{R}_{5} &= -\\mathbf{a}_{2} = a\\left(-\\frac{1}{2}, -\\frac{\\sqrt{3}}{2}\\right) \\\\\n\\mathbf{R}_{6} &= \\mathbf{a}_{1} - \\mathbf{a}_{2} = a\\left(\\frac{1}{2}, -\\frac{\\sqrt{3}}{2}\\right)\n\\end{aligned}\n$$\n这六个矢量的模长均为 $a$。没有其他晶格点比它们更靠近原点。这六个矢量之间的夹角为 $\\frac{\\pi}{3}$ 弧度或 $60^{\\circ}$，形成一个正六边形。Wigner-Seitz 原胞由这六个矢量的垂直平分线所界定。\n\n我们来求出这些垂直平分线对应的直线方程。\n1. 对于 $\\mathbf{R}_{1} = a(1, 0)$：中点是 $\\left(\\frac{a}{2}, 0\\right)$。垂直平分线是一条竖直线：$x = \\frac{a}{2}$。\n2. 对于 $\\mathbf{R}_{4} = a(-1, 0)$：中点是 $\\left(-\\frac{a}{2}, 0\\right)$。垂直平分线是一条竖直线：$x = -\\frac{a}{2}$。\n3. 对于 $\\mathbf{R}_{2} = a\\left(\\frac{1}{2}, \\frac{\\sqrt{3}}{2}\\right)$：中点是 $\\left(\\frac{a}{4}, \\frac{a\\sqrt{3}}{4}\\right)$。直线方程由 $\\mathbf{R}_{2} \\cdot \\left(\\mathbf{r} - \\frac{\\mathbf{R}_{2}}{2}\\right) = 0$ 给出，其中 $\\mathbf{r}=(x,y)$。这可以化简为 $\\mathbf{R}_{2} \\cdot \\mathbf{r} = \\frac{|\\mathbf{R}_{2}|^2}{2}$。\n$$\na\\left(\\frac{1}{2}\\right)x + a\\left(\\frac{\\sqrt{3}}{2}\\right)y = \\frac{a^2}{2} \\implies x + \\sqrt{3}y = a\n$$\n4. 对于 $\\mathbf{R}_{3} = a\\left(-\\frac{1}{2}, \\frac{\\sqrt{3}}{2}\\right)$：类似地，$-\\frac{1}{2}x + \\frac{\\sqrt{3}}{2}y = \\frac{a}{2} \\implies -x + \\sqrt{3}y = a$。\n5. 对于 $\\mathbf{R}_{5} = a\\left(-\\frac{1}{2}, -\\frac{\\sqrt{3}}{2}\\right)$：类似地，$-\\frac{1}{2}x - \\frac{\\sqrt{3}}{2}y = \\frac{a}{2} \\implies -x - \\sqrt{3}y = a$。\n6. 对于 $\\mathbf{R}_{6} = a\\left(\\frac{1}{2}, -\\frac{\\sqrt{3}}{2}\\right)$：类似地，$\\frac{1}{2}x - \\frac{\\sqrt{3}}{2}y = \\frac{a}{2} \\implies x - \\sqrt{3}y = a$。\n\nWigner-Seitz 原胞是这六条直线所围成的区域。其形状是一个六边形。为确定它是否为正六边形，我们求出其顶点并计算边长。\n顶点是相邻直线的交点。我们通过联立 $x = \\frac{a}{2}$ 和 $x + \\sqrt{3}y = a$ 来求一个顶点：\n$$\n\\frac{a}{2} + \\sqrt{3}y = a \\implies \\sqrt{3}y = \\frac{a}{2} \\implies y = \\frac{a}{2\\sqrt{3}}\n$$\n因此，一个顶点是 $V_{1} = \\left(\\frac{a}{2}, \\frac{a}{2\\sqrt{3}}\\right)$。\n我们通过联立 $x + \\sqrt{3}y = a$ 和 $-x + \\sqrt{3}y = a$ 来求下一个顶点：\n两方程相加得 $2\\sqrt{3}y = 2a \\implies y = \\frac{a}{\\sqrt{3}}$。将此结果代回得 $x + \\sqrt{3}\\left(\\frac{a}{\\sqrt{3}}\\right) = a \\implies x+a=a \\implies x=0$。\n因此，第二个顶点是 $V_{2} = \\left(0, \\frac{a}{\\sqrt{3}}\\right)$。\n\n连接 $V_{1}$ 和 $V_{2}$ 的边长 $s$ 为：\n$$\ns = \\sqrt{\\left(\\frac{a}{2}-0\\right)^2 + \\left(\\frac{a}{2\\sqrt{3}} - \\frac{a}{\\sqrt{3}}\\right)^2} = \\sqrt{\\left(\\frac{a}{2}\\right)^2 + \\left(-\\frac{a}{2\\sqrt{3}}\\right)^2} = \\sqrt{\\frac{a^2}{4} + \\frac{a^2}{12}} = \\sqrt{\\frac{3a^2+a^2}{12}} = \\sqrt{\\frac{4a^2}{12}} = \\sqrt{\\frac{a^2}{3}}\n$$\n因此，边长为 $s = \\frac{a}{\\sqrt{3}} = \\frac{a\\sqrt{3}}{3}$。\n\n三角晶格围绕任何晶格点都具有六重旋转对称性 ($C_6$)。最近邻矢量的集合也表现出这种对称性。Wigner-Seitz 构造法基于这些矢量，因此也必须保持这种对称性。因此，得到的六边形必须是正六边形：六条边的长度都相同，为 $s = a/\\sqrt{3}$，且所有内角都等于 $120^\\circ$。\n\n接下来，我们计算这个正六边形的面积 $A$。一个边长为 $s$ 的正六边形可以分解为 6 个边长为 $s$ 的等边三角形。这样一个等边三角形的面积是 $\\frac{\\sqrt{3}}{4}s^2$。\n总面积 $A$ 是：\n$$\nA = 6 \\times \\frac{\\sqrt{3}}{4}s^2 = \\frac{3\\sqrt{3}}{2}s^2\n$$\n代入 $s = \\frac{a}{\\sqrt{3}}$：\n$$\nA = \\frac{3\\sqrt{3}}{2}\\left(\\frac{a}{\\sqrt{3}}\\right)^2 = \\frac{3\\sqrt{3}}{2} \\frac{a^2}{3} = \\frac{\\sqrt{3}}{2}a^2\n$$\n\n最后，我们必须证明为什么这个面积等于每个晶格点的平均面积。Wigner-Seitz 原胞是布拉菲晶格的一个原胞（primitive cell）。原胞是一个最小体积（在二维中是面积）的单元，当通过所有晶格矢量平移时，能够无重叠、无间隙地铺满整个空间。根据此定义，一个原胞恰好包含一个晶格点。因此，每个晶格点的平均面积就是任何一个原胞的面积。\n我们可以通过计算由原胞基矢 $\\mathbf{a}_{1}$ 和 $\\mathbf{a}_{2}$ 所张成的平行四边形定义的原胞面积来验证这一点。该面积由这些矢量构成的矩阵的行列式的绝对值给出：\n$$\nA_{\\text{primitive}} = \\left| \\det \\begin{pmatrix} a & \\frac{a}{2} \\\\ 0 & \\frac{a\\sqrt{3}}{2} \\end{pmatrix} \\right| = \\left| a \\cdot \\frac{a\\sqrt{3}}{2} - 0 \\cdot \\frac{a}{2} \\right| = \\frac{\\sqrt{3}}{2}a^2\n$$\n这个面积与我们计算出的 Wigner-Seitz 原胞的面积 $A$ 相同。这证实了我们计算的有效性，并表明 Wigner-Seitz 原胞确实是三角晶格的一个原胞。\n\n问题要求给出有序对 $(A, s)$。\n$$\nA = \\frac{\\sqrt{3}}{2}a^2\n$$\n$$\ns = \\frac{a}{\\sqrt{3}}\n$$\n最终结果是 $\\left(\\frac{\\sqrt{3}}{2}a^2, \\frac{a}{\\sqrt{3}}\\right)$。", "answer": "$$\n\\boxed{\n\\begin{pmatrix}\n\\frac{\\sqrt{3}}{2}a^2 & \\frac{a}{\\sqrt{3}}\n\\end{pmatrix}\n}\n$$", "id": "2870601"}, {"introduction": "维格纳-赛兹原胞不仅是晶格的几何表示，它还深刻地反映了晶格的对称性。在这个练习中，我们将探索一个更有趣的情景：体心四方（BCT）晶格，其晶格常数之比 $t = c/a$ 是可变的。通过分析不同晶格矢量长度随 $t$ 变化的关系，你将发现维格纳-赛兹原胞的拓扑结构会在特定 $t$ 值下发生转变，从而与体心立方（BCC）和面心立方（FCC）晶格的原胞完全等同，揭示了这些重要晶格结构之间深刻的内在联系 [@problem_id:2870593]。", "problem": "一个体心四方（BCT）布拉维格子由一个边长为 $a$、$a$ 和 $c$ 的常规四方晶胞以及一个定心矢量 $(a/2, a/2, c/2)$ 来定义。\n\n维格纳-赛兹（WS）原胞定义为实空间中的一个点集，其中每个点到原点格点的距离比到任何其他格点的距离都更近。\n\n仅使用 WS 构造的定义和欧几里得几何，考虑由比率 $t = c/a > 0$ 参数化的 BCT 格子族。令 $\\{\\mathbf{R}\\}$ 表示从原点出发的所有非零格矢的集合。WS 原胞是由垂直于 $\\{\\mathbf{R}\\}$ 中各矢量的中垂面所界定的半空间的交集。\n\n1. 找出其中垂面可以构成 WS 原胞边界面的最短格矢，并用 $a$ 和 $c$ 表示它们的长度。\n2. 通过比较这些距离，确定四方性参数 $t = c/a$ 的值，在这些值下，BCT 格子的实空间 WS 原胞与以下格子的 WS 原胞在组合上是等价的（即具有相同的面数和邻接图）：\n   - 体心立方（BCC）格子，和\n   - 面心立方（FCC）格子。\n3. 以有序对 $(t_{\\mathrm{BCC}}, t_{\\mathrm{FCC}})$ 的形式报告您的最终结果，其中 $t_{\\mathrm{BCC}}$ 和 $t_{\\mathrm{FCC}}$ 分别是 BCT WS 原胞与 BCC 和 FCC WS 原胞共享相同拓扑结构时的 $c/a$ 值。\n\n将最终答案表示为包含 $t_{\\mathrm{BCC}}$ 和 $t_{\\mathrm{FCC}}$ 的行矩阵。无需四舍五入。答案是无量纲的。", "solution": "该问题要求确定体心四方（BCT）格子的四方性参数 $t = c/a$ 的特定值，在这些值下，其维格纳-赛兹（WS）原胞在组合上与体心立方（BCC）和面心立方（FCC）格子的 WS 原胞等价。\n\n首先，我们必须确定 BCT 格子的格矢。对于一个常规晶胞边长为 $a$、$a$ 和 $c$ 的 BCT 格子，其格点位置 $\\mathbf{R}$ 的坐标 $(x,y,z)$ 满足以下条件：$x/a$、$y/a$ 和 $z/c$ 或者全部为整数，或者全部为半整数。WS 原胞是由从原点出发的格矢 $\\mathbf{R}$ 的中垂面集合构成的。WS 原胞的面由这些平面中未被其他平面冗余化的子集决定。这意味着我们必须找出最短的格矢。\n\n让我们找出最短非零格矢的长度平方 $|\\mathbf{R}|^2$。一个格矢 $\\mathbf{R}$ 可以写成 $(ia, ja, kc)$，其中 $(i,j,k)$ 或者全部为整数（不全为零），或者全部为半整数。其长度平方为 $|\\mathbf{R}|^2 = a^2(i^2+j^2) + c^2k^2 = a^2(i^2+j^2+t^2k^2)$，其中 $t=c/a$。\n\n通过考虑 $i,j,k$ 的较小值，我们确定了三族短格矢：\n1.  A 族：两个矢量 $(0, 0, \\pm c)$，对应于 $(i,j,k)=(0,0,\\pm 1)$。其长度平方为 $d_A^2 = c^2 = a^2 t^2$。\n2.  B 族：四个矢量 $(\\pm a, 0, 0)$ 和 $(0, \\pm a, 0)$，对应于 $(i,j,k)=(\\pm 1, 0, 0)$ 和 $(0, \\pm 1, 0)$。其长度平方为 $d_B^2 = a^2$。\n3.  C 族：八个矢量 $(\\pm a/2, \\pm a/2, \\pm c/2)$，对应于 $(i,j,k)=(\\pm 1/2, \\pm 1/2, \\pm 1/2)$。其长度平方为 $d_C^2 = (a/2)^2 + (a/2)^2 + (c/2)^2 = a^2/2 + c^2/4 = a^2(1/2 + t^2/4)$。\n\n其他矢量，例如长度平方为 $2a^2$ 的 $(\\pm a, \\pm a, 0)$，显然更长，通常不会定义 WS 原胞的主要面。WS 原胞的形状由这三族矢量的中垂面之间的相互作用决定。原胞的组合类型会随着定义这些面的格矢集合的改变而改变。\n\n让我们来分析每一族矢量贡献的面存在的条件。\n-   对于所有 $t>0$ 的值，B 族（例如，来自 $\\mathbf{R}=(a,0,0)$ 的平面 $x=a/2$）和 C 族贡献的面都存在。这提供了至少 $4+8=12$ 个面。\n-   对于 A 族，考虑矢量 $\\mathbf{R}_A=(0,0,c)$。其中垂面是 $z=c/2$。如果这个平面不被其他平面完全截断，它就会对原胞贡献一个面。一个关键的转变点发生在点 $\\mathbf{R}_A/2 = (0,0,c/2)$（A族中垂面的中心点）恰好位于另一族矢量（例如C族）的中垂面上。对于一个C族矢量 $\\mathbf{R}_C = (a/2,a/2,c/2)$，其中垂面方程为 $\\mathbf{x} \\cdot \\mathbf{R}_C = |\\mathbf{R}_C|^2/2$。我们将点 $\\mathbf{x} = \\mathbf{R}_A/2$ 代入，得到左边为 $(\\mathbf{R}_A/2) \\cdot \\mathbf{R}_C = (0,0,c/2) \\cdot (a/2,a/2,c/2) = c^2/4$。右边为 $|\\mathbf{R}_C|^2/2 = (a^2/2 + c^2/4)/2 = a^2/4 + c^2/8$。A族的面存在，条件是它不被C族的面截断，即 $\\mathbf{R}_A/2$ 位于C族定义的半空间内：$(\\mathbf{R}_A/2) \\cdot \\mathbf{R}_C \\le |\\mathbf{R}_C|^2/2$。代入我们计算的值，即 $c^2/4 \\le a^2/4 + c^2/8$。这可以简化为 $c^2/8 \\le a^2/4$，即 $c^2 \\le 2a^2$，或 $t^2 \\le 2$。\n\n因此，WS 原胞的组合结构依赖于 $t$，具体如下：\n-   如果 $t^2  2$ (即 $t  \\sqrt{2}$)，A族的面存在。WS 原胞由所有三族矢量对应的平面界定，产生 $2 (\\text{A}) + 4 (\\text{B}) + 8 (\\text{C}) = 14$ 个面。这个多面体是一个四方畸变的截角八面体。\n-   如果 $t^2 = 2$ (即 $t = \\sqrt{2}$)，条件变为等式。来自 A 族的两个面收缩成为 WS 原胞上的棱。最终的原胞有 $12$ 个面。\n-   如果 $t^2 > 2$ (即 $t > \\sqrt{2}$)，来自 A 族的面被完全截断。原胞有 $12$ 个面，是一个四方畸变的菱形十二面体。\n\n现在我们将这些结构与 BCC 和 FCC 的 WS 原胞进行匹配。\n1.  **BCC 格子：** BCC 格子的 WS 原胞是一个正截角八面体，它有 $14$ 个面（6个来自次近邻的四方形面和8个来自最近邻的六边形面）。这种组合类型对应于 $t  \\sqrt{2}$ 时的 BCT 情况。当 BCT 格子的常规晶胞是立方体时，即 $c=a$，它就变成了 BCC 格子，这意味着 $t=c/a=1$。在 $t=1$ 时，BCT 的 WS 原胞是一个正截角八面体。因此，$t_{\\mathrm{BCC}} = 1$。\n\n2.  **FCC 格子：** FCC 格子的 WS 原胞是一个正菱形十二面体，它有 $12$ 个面。这种组合类型对应于 $t \\ge \\sqrt{2}$ 时的 BCT 情况。在特定条件下，BCT 格子在结构上等同于 FCC 格子。通过将坐标系绕 $z$ 轴旋转 $45^\\circ$ 可以证明，当 $c/a = \\sqrt{2}$ 时，BCT 格子与 FCC 格子是相同的。在 $t = \\sqrt{2}$ 时，我们的分析表明 BCT WS 原胞转变为一个具有 $12$ 个面的多面体，它是一个正菱形十二面体。对于 $t>\\sqrt{2}$，它会发生畸变，但在组合上是等价的。BCT 格子本身*是*一个 FCC 格子时的特定值为 $t=\\sqrt{2}$。因此，$t_{\\mathrm{FCC}} = \\sqrt{2}$。\n\n最终结果是有序对 $(t_{\\mathrm{BCC}}, t_{\\mathrm{FCC}})$。", "answer": "$$\\boxed{\\begin{pmatrix} 1  \\sqrt{2} \\end{pmatrix}}$$", "id": "2870593"}, {"introduction": "在现代材料科学中，将理论概念转化为可执行的计算方法至关重要。这个最终的实践练习将指导你把维格纳-赛兹构建的几何规则，转化为一个通用的算法，用于计算任意正交晶格的原胞。通过编写一个程序来系统性地生成和筛选定义原胞的半空间，你将不仅能从第一性原理出发解决问题，还能掌握一种在计算材料学中广泛应用的强大工具 [@problem_id:2870633]。", "problem": "给定一个三维欧几里得空间中的原始正交 Bravais 晶格。该晶格由三个与坐标轴对齐且相互正交的初基矢量生成，其大小分别用 $a$、$b$ 和 $c$ 表示。晶格点位于位置 $\\mathbf{R}(u,v,w) = u\\,a\\,\\hat{\\mathbf{x}} + v\\,b\\,\\hat{\\mathbf{y}} + w\\,c\\,\\hat{\\mathbf{z}}$，其中 $u$、$v$ 和 $w$ 为整数。Wigner–Seitz 原胞是空间中所有点的集合，这些点到原点的距离比到任何其他晶格点的距离更近（或相等）。\n\n从 Wigner–Seitz 原胞作为欧几里得空间中一个 Voronoi 区域的基本定义出发，仅使用欧几里得度量和晶格结构，推导定义以原点为中心的 Wigner–Seitz 原胞的半空间不等式的数学形式。仅使用以下基本依据：\n- 欧几里得空间中的距离定义，$d(\\mathbf{x},\\mathbf{y}) = \\|\\mathbf{x}-\\mathbf{y}\\|_{2}$。\n- 由初基矢量生成的 Bravais 晶格的定义。\n- 超平面在线性代数中通过法向量和偏移量的表征。\n\n根据您的推导，构建一个算法，该算法：\n- 枚举一个候选平面集，这些平面由原点与一组有限的最短非零晶格矢量 $\\{\\mathbf{R}_i\\}$ 之间的垂直平分面给出（您不能事先假设哪些平面最终会成为边界）。\n- 形成相关半空间的交集，以生成一个凸多面体，当候选集足够丰富时，该多面体即为 Wigner–Seitz 原胞。\n- 通过检查哪些候选平面是有效的，来用算法剪除冗余平面。有效意味着在数值容差范围内，至少有一个多面体顶点位于该平面上。\n\n您的程序必须实现上述算法，仅使用晶格定义来计算由 $(a,b,c)$ 指定的正交晶格的 Wigner–Seitz 多面体。候选平面集必须由最短的非零晶格矢量壳层构成，这些壳层通过按长度递增自动选择，直到至少包含前三个不同的长度壳层。为了使问题具有通用性并纯粹是算法性的，您不能硬编码原胞的最终形状；相反，您必须通过半空间求交，从第一性原理计算它。\n\n对于下面指定的每个测试用例，计算 Wigner–Seitz 原胞的顶点列表，这些顶点是交集多面体的唯一极点，按 $(x,y,z)$ 的字典序排序，每个坐标四舍五入到恰好六位小数。每个测试用例的输出必须是一个三元组 $[x,y,z]$ 的列表。您的程序应将所有测试用例的结果汇总到单行输出中，该输出包含一个用方括号括起来的逗号分隔列表（例如，$[result_1,result_2,result_3]$），其中每个 $result_i$ 本身是第 $i$ 个测试用例的顶点三元组列表。\n\n测试套件：\n- 用例 $1$：$(a,b,c) = (2.3,1.7,3.1)$。\n- 用例 $2$：$(a,b,c) = (1.0,1.0,1.0)$。\n- 用例 $3$：$(a,b,c) = (0.5,2.0,3.0)$。\n\n您的程序必须按照上述格式生成最终的单行输出，不含任何额外文本。不涉及任何物理单位。如果在您的推导中出现任何角度，按照惯例均以弧度度量，但程序不应输出角度。", "solution": "所述问题是有效的。这是一个计算材料物理学中的适定问题，它基于已确立的科学原理，并以无歧义的数学术语表述。它要求从第一性原理出发，为原始正交晶格构建 Wigner-Seitz 原胞。\n\n解决方案分两个阶段进行。首先，从 Wigner-Seitz 原胞的基本定义推导出数学公式。其次，基于该公式构建一个计算算法，以确定给定晶格参数下原胞的顶点。\n\n以一个晶格点（原点）为中心的 Wigner-Seitz 原胞，定义为空间中所有点 $\\mathbf{x}$ 的集合，这些点到原点的距离比到任何其他晶格点 $\\mathbf{R}$ 的距离更近。这可以通过以下不等式组表示：\n$$\nd(\\mathbf{x}, \\mathbf{0}) \\le d(\\mathbf{x}, \\mathbf{R}) \\quad \\forall \\mathbf{R} \\in \\text{Lattice}, \\mathbf{R} \\neq \\mathbf{0}\n$$\n其中 $d(\\mathbf{x}, \\mathbf{y})$ 是欧几里得距离 $\\|\\mathbf{x} - \\mathbf{y}\\|$。对两边同时平方（对于非负距离，这是一个单调操作），得到：\n$$\n\\|\\mathbf{x}\\|^2 \\le \\|\\mathbf{x} - \\mathbf{R}\\|^2\n$$\n使用点积 $\\|\\mathbf{v}\\|^2 = \\mathbf{v} \\cdot \\mathbf{v}$ 展开右侧：\n$$\n\\mathbf{x} \\cdot \\mathbf{x} \\le (\\mathbf{x} - \\mathbf{R}) \\cdot (\\mathbf{x} - \\mathbf{R}) = \\mathbf{x} \\cdot \\mathbf{x} - 2\\mathbf{x} \\cdot \\mathbf{R} + \\mathbf{R} \\cdot \\mathbf{R}\n$$\n消去 $\\mathbf{x} \\cdot \\mathbf{x}$ 项并重新整理，即可得到由晶格矢量 $\\mathbf{R}$ 定义的单个半空间的不等式：\n$$\n2\\mathbf{x} \\cdot \\mathbf{R} \\le \\mathbf{R} \\cdot \\mathbf{R} = \\|\\mathbf{R}\\|^2\n$$\n$$\n\\mathbf{x} \\cdot \\mathbf{R} \\le \\frac{1}{2}\\|\\mathbf{R}\\|^2\n$$\n该不等式描述了一个闭合半空间，其边界为平面 $\\mathbf{x} \\cdot \\mathbf{R} = \\frac{1}{2}\\|\\mathbf{R}\\|^2$。这个平面是连接原点和晶格点 $\\mathbf{R}$ 的线段的垂直平分面。Wigner-Seitz 原胞是所有非零晶格矢量 $\\mathbf{R}$ 所对应的此类半空间的交集。\n\n对于指定的原始正交晶格，晶格矢量由 $\\mathbf{R}(u,v,w) = u\\,a\\,\\hat{\\mathbf{x}} + v\\,b\\,\\hat{\\mathbf{y}} + w\\,c\\,\\hat{\\mathbf{z}}$ 给出，其中 $u,v,w$ 为整数。这样一个矢量的半空间不等式为：\n$$\nx(ua) + y(vb) + z(wc) \\le \\frac{1}{2} \\left( (ua)^2 + (vb)^2 + (wc)^2 \\right)\n$$\n尽管存在无限多个这样的不等式，但通常只需要那些对应于最近邻晶格点的不等式来定义原胞。该问题要求一个通用算法，不预先假定哪些矢量是相关的。算法如下：\n\n1.  **生成候选平面集**：通过考虑有限范围内的整数组合 $(u,v,w)$（例如 $u,v,w \\in \\{-2, -1, 0, 1, 2\\}$，不包括 $(0,0,0)$），生成一个候选晶格矢量的有限集。对于每个矢量 $\\mathbf{R}$，计算其长度的平方 $\\|\\mathbf{R}\\|^2 = (ua)^2 + (vb)^2 + (wc)^2$。对这些平方长度进行排序，以识别出不同的长度壳层。根据问题说明，选择所有对应于至少前三个最短不同长度壳层的晶格矢量。对于每个选定的矢量 $\\mathbf{R}_i$，我们形成半空间不等式 $\\mathbf{R}_i \\cdot \\mathbf{x} - \\frac{1}{2}\\|\\mathbf{R}_i\\|^2 \\le 0$。注意，对于集合中的每个矢量 $\\mathbf{R}_i$，其负矢量 $-\\mathbf{R}_i$ 也存在，它定义了另一侧的边界半空间，从而确保最终的多面体是封闭的。\n\n2.  **通过半空间求交计算多面体**：Wigner-Seitz 原胞是由所有候选半空间的交集形成的凸多面体。这是计算几何学中的一个标准问题。给定一组形式为 $\\mathbf{n}_i \\cdot \\mathbf{x} + k_i \\le 0$ 的 $N$ 个半空间，任务是找到交集的顶点。我们将使用 `scipy.spatial.HalfspaceIntersection` 库函数，它是鲁棒的 Qhull 库的一个接口。此函数需要半空间集合以及一个已知位于交集内部的点。对于 Wigner-Seitz 原胞，原点 $\\mathbf{x} = (0,0,0)$ 始终是一个内点。该函数计算交集多面体的顶点，并自动处理冗余平面（即那些不构成最终多面体表面的平面）。\n\n3.  **处理和格式化顶点**：计算出的顶点是多面体的唯一极点。为了获得确定性输出，必须对这些顶点进行排序。问题指定了基于 $(x,y,z)$ 坐标的字典序排序。最后，每个顶点的每个坐标都格式化为恰好六位小数的浮点数。\n\n对于原始正交晶格，只要 $a, b, c$ 之间的关系不会使诸如 $(a, b, 0)$ 的矢量短于例如 $(0,0,c)$ 的矢量，那么最短的非零晶格矢量总是 $(\\pm a, 0, 0)$、$(0, \\pm b, 0)$ 和 $(0, 0, \\pm c)$。与这六个矢量对应的半空间是 $x \\le a/2$、$-x \\le a/2$、 $y \\le b/2$、$-y \\le b/2$、 $z \\le c/2$ 和 $-z \\le c/2$。这些半空间的交集是由 $|x| \\le a/2$、 $|y| \\le b/2$ 和 $|z| \\le c/2$ 定义的长方体。该长方体的顶点是 $8$ 个点 $(\\pm a/2, \\pm b/2, \\pm c/2)$。任何由更长的晶格矢量派生出的其他平面，都会被求交算法正确地识别为冗余，因为它们不会对该体积施加进一步的约束。我们的通用算法将为每个测试用例系统地得出此结果。", "answer": "```python\nimport numpy as np\nfrom scipy.spatial import HalfspaceIntersection\n\ndef solve_case(a, b, c):\n    \"\"\"\n    Computes the vertices of the Wigner-Seitz cell for a primitive orthorhombic lattice.\n\n    Args:\n        a, b, c (float): Magnitudes of the orthogonal primitive lattice vectors.\n\n    Returns:\n        list: A list of vertex coordinate tuples, sorted lexicographically.\n    \"\"\"\n    # Step 1: Generate a candidate set of lattice vectors.\n    # A search range of u,v,w in {-2, ..., 2} is sufficient to capture the\n    # first few shells of nearest neighbors for typical lattices.\n    vectors = []\n    # Use integer indices to generate lattice vectors R = u*a*x_hat + v*b*y_hat + w*c*z_hat\n    for u in range(-2, 3):\n        for v in range(-2, 3):\n            for w in range(-2, 3):\n                if u == 0 and v == 0 and w == 0:\n                    continue\n                vectors.append(np.array([u * a, v * b, w * c]))\n\n    # Step 2: Identify vectors from the first three distinct length shells.\n    tol = 1e-9\n    \n    # Use a dictionary to group vectors by their squared length.\n    length_map = {}\n    for vec in vectors:\n        sq_len = np.dot(vec, vec)\n        found_key = False\n        for key in length_map:\n            if abs(key - sq_len)  tol:\n                length_map[key].append(vec)\n                found_key = True\n                break\n        if not found_key:\n            length_map[sq_len] = [vec]\n\n    # Get the unique squared lengths and sort them.\n    unique_sorted_sq_lengths = sorted(length_map.keys())\n\n    # Select vectors from at least the first three shells.\n    num_shells = min(len(unique_sorted_sq_lengths), 3)\n    shortest_sq_lengths = unique_sorted_sq_lengths[:num_shells]\n    \n    candidate_vectors = []\n    for sq_len in shortest_sq_lengths:\n        candidate_vectors.extend(length_map[sq_len])\n\n    # Step 3: Form half-space inequalities for scipy.\n    # The required inequality format is n.x + d = 0.\n    # Our derived inequality is R.x - 0.5*|R|^2 = 0.\n    # So, for each vector R, the normal n is R and the offset d is -0.5*|R|^2.\n    halfspaces = []\n    for R in candidate_vectors:\n        sq_norm = np.dot(R, R)\n        # Each row is [nx, ny, nz, d]\n        halfspaces.append([R[0], R[1], R[2], -0.5 * sq_norm])\n    \n    halfspaces = np.array(halfspaces)\n\n    # Step 4: Compute the intersection of half-spaces.\n    # The origin is always an interior point for the Wigner-Seitz cell.\n    interior_point = np.array([0.0, 0.0, 0.0])\n    \n    try:\n        # This function computes the vertices of the convex polyhedron.\n        hs_intersection = HalfspaceIntersection(halfspaces, interior_point)\n    except Exception:\n        # Qhull can error on degenerate inputs, though it's designed to be robust.\n        # This case should not be reached with the symmetric set of vectors generated.\n        return []\n\n    # Step 5: Extract and sort vertices.\n    vertices = hs_intersection.intersections\n\n    # Sort the vertices lexicographically for a canonical representation.\n    # Convert to a list of tuples for robust sorting.\n    vertices_tuples = [tuple(v) for v in vertices]\n    sorted_vertices = sorted(vertices_tuples, key=lambda k: (k[0], k[1], k[2]))\n\n    return sorted_vertices\n\ndef solve():\n    \"\"\"\n    Main function to run test cases and print the final output.\n    \"\"\"\n    # Define the test cases from the problem statement.\n    test_cases = [\n        (2.3, 1.7, 3.1),\n        (1.0, 1.0, 1.0),\n        (0.5, 2.0, 3.0),\n    ]\n\n    all_results_str = []\n    for case in test_cases:\n        a, b, c = case\n        vertices = solve_case(a, b, c)\n\n        # Format the result for the current test case into a string.\n        # Each coordinate must be rounded to exactly six decimal places.\n        case_str_parts = []\n        for v in vertices:\n            v_str = f\"[{v[0]:.6f},{v[1]:.6f},{v[2]:.6f}]\"\n            case_str_parts.append(v_str)\n        # Join vertices into a string list: \"[v1,v2,...]\"\n        all_results_str.append(f\"[{','.join(case_str_parts)}]\")\n\n    # Final print statement must produce a single line in the exact required format.\n    # Join all case results: \"[result1,result2,...]\"\n    print(f\"[{','.join(all_results_str)}]\")\n\nsolve()\n```", "id": "2870633"}]}