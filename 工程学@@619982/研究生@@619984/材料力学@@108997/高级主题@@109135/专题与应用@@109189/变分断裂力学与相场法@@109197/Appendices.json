{"hands_on_practices": [{"introduction": "本练习是理解相场断裂模型的基石。我们将通过变分法，推导出一维情况下裂纹的理想相场分布。这个练习的关键在于验证一个核心思想：通过所谓的“正则化”，一个尖锐、不连续的裂纹可以用一个光滑、连续的场来近似，并且其能量能够精确地收敛到格里菲斯（Griffith）理论中的断裂能，从而证明了模型的自洽性 [@problem_id:2929068]。", "problem": "考虑在弹性驱动力为零的无限弹性体中，位于原点处的单一尖锐裂纹的一维稳态相场表示。设裂纹相场由 $d(x)$ 表示，其中 $x \\in \\mathbb{R}$，且 $d(x) \\in [0,1]$，$d(x)=1$ 表示完全断裂，$d(x)=0$ 表示材料完好。在所谓的 Ambrosio–Tortorelli (AT2) 模型中，正则化裂纹表面密度的归一化形式由以下泛函给出\n$$\n\\Gamma_{\\ell}^{+}[d] \\;=\\; \\int_{0}^{\\infty} \\left( \\frac{1}{2\\,\\ell}\\,d(x)^{2} \\;+\\; \\frac{\\ell}{2}\\,\\big(d'(x)\\big)^{2} \\right)\\,\\mathrm{d}x,\n$$\n其中 $\\ell>0$ 是一个内禀长度尺度参数，用于控制弥散裂纹区域的宽度。假设符合物理直观的边界条件为 $d(0)=1$（裂纹尖端在原点）和 $\\lim_{x\\to\\infty} d(x)=0$（远场完好）。对应于裂纹两个面的总裂纹表面测度由 $S_\\ell[d] \\coloneqq 2\\,\\Gamma_{\\ell}^{+}[d]$ 建模。\n\n仅使用变分法（欧拉-拉格朗日方程和容许边界条件）的基本原理，完成以下任务：\n\n- 推导在 $x\\in(0,\\infty)$ 上与 $\\Gamma_{\\ell}^{+}[d]$ 相关联的 $d(x)$ 的平稳性条件，并求解在边界条件 $d(0)=1$ 和 $\\lim_{x\\to\\infty} d(x)=0$ 下所得的常微分方程。\n- 计算下式的精确值：\n$$\nS_\\ell[d^{\\star}] \\;=\\; 2\\,\\Gamma_{\\ell}^{+}[d^{\\star}] \\;=\\; 2 \\int_{0}^{\\infty} \\left( \\frac{1}{2\\,\\ell}\\,d^{\\star}(x)^{2} \\;+\\; \\frac{\\ell}{2}\\,\\big(d^{\\star}{}'(x)\\big)^{2} \\right)\\,\\mathrm{d}x,\n$$\n其中 $d^{\\star}$ 表示你求得的平稳（极小化）分布。\n\n将最终答案表示为一个精确的数值。无需四舍五入。根据其构造，$S_\\ell[d^{\\star}]$ 是一个无量纲的量，因此不需要单位。", "solution": "首先对问题陈述进行验证。\n\n**第 1 步：提取已知条件**\n- 对于 $x>0$，正则化裂纹表面密度的泛函由下式给出：\n$$\n\\Gamma_{\\ell}^{+}[d] \\;=\\; \\int_{0}^{\\infty} \\left( \\frac{1}{2\\,\\ell}\\,d(x)^{2} \\;+\\; \\frac{\\ell}{2}\\,\\big(d'(x)\\big)^{2} \\right)\\,\\mathrm{d}x\n$$\n- 相场变量为 $d(x)$，其中 $d(x) \\in [0,1]$。\n- 内禀长度尺度为 $\\ell > 0$。\n- 积分域为 $x \\in [0, \\infty)$。\n- 边界条件为 $d(0)=1$ 和 $\\lim_{x\\to\\infty} d(x)=0$。\n- 总裂纹表面测度为 $S_\\ell[d] \\coloneqq 2\\,\\Gamma_{\\ell}^{+}[d]$。\n- 目标是求出平稳分布 $d^{\\star}(x)$ 并计算 $S_\\ell[d^{\\star}]$。\n\n**第 2 步：使用提取的已知条件进行验证**\n- **科学依据：** 该问题使用了 Ambrosio–Tortorelli (AT2) 模型，这是断裂相场理论中一个基础且被广泛接受的框架。它是尖锐界面裂纹问题的标准正则化方法。该泛函在数学和物理上都是合理的。\n- **适定性：** 该问题是适定的。这是一个变分法中的经典问题：在明确定义的边界条件下极小化一个凸泛函。此类问题通常有唯一且稳定的解。\n- **客观性：** 该问题使用精确的数学语言陈述，所有术语都有明确定义。\n- **结论：** 该问题在科学上有效、适定、客观且完整。它是变分力学中的一个标准练习，没有任何缺陷。\n\n**第 3 步：进行求解**\n该问题要求找到使泛函 $\\Gamma_{\\ell}^{+}[d]$ 极小化的平稳路径 $d^{\\star}(x)$，然后计算总裂纹表面测度 $S_\\ell[d^{\\star}]$。这可以通过使用欧拉-拉格朗日方程来完成。\n\n泛函的被积函数为\n$$\nL(d, d') = \\frac{1}{2\\,\\ell}\\,d^{2} + \\frac{\\ell}{2}\\,(d')^{2}\n$$\n其中 $d' \\equiv \\frac{\\mathrm{d}d}{\\mathrm{d}x}$。提供平稳性条件的欧拉-拉格朗日方程为\n$$\n\\frac{\\partial L}{\\partial d} - \\frac{\\mathrm{d}}{\\mathrm{d}x}\\left(\\frac{\\partial L}{\\partial d'}\\right) = 0\n$$\n我们计算 $L$ 所需的偏导数：\n$$\n\\frac{\\partial L}{\\partial d} = \\frac{1}{2\\,\\ell}\\,(2d) = \\frac{d}{\\ell}\n$$\n$$\n\\frac{\\partial L}{\\partial d'} = \\frac{\\ell}{2}\\,(2d') = \\ell\\,d'\n$$\n将这些表达式代入欧拉-拉格朗日方程，得到：\n$$\n\\frac{d}{\\ell} - \\frac{\\mathrm{d}}{\\mathrm{d}x}\\left(\\ell\\,d'\\right) = 0\n$$\n$$\n\\frac{d}{\\ell} - \\ell\\,d'' = 0\n$$\n整理后得到一个二阶线性齐次常系数常微分方程：\n$$\nd'' - \\frac{1}{\\ell^2}\\,d = 0\n$$\n该常微分方程的特征方程为 $r^2 - \\frac{1}{\\ell^2} = 0$。其根为 $r_{1,2} = \\pm\\frac{1}{\\ell}$。因此，通解为\n$$\nd(x) = C_1 \\exp\\left(\\frac{x}{\\ell}\\right) + C_2 \\exp\\left(-\\frac{x}{\\ell}\\right)\n$$\n其中 $C_1$ 和 $C_2$ 是待定常数，需由边界条件确定。\n\n第一个边界条件是 $\\lim_{x\\to\\infty} d(x) = 0$。当 $x \\to \\infty$ 时，项 $\\exp\\left(\\frac{x}{\\ell}\\right)$ 无界增长。为了使 $d(x)$ 的极限为零，其系数必须为零。因此，我们必须有 $C_1 = 0$。解简化为\n$$\nd(x) = C_2 \\exp\\left(-\\frac{x}{\\ell}\\right)\n$$\n第二个边界条件是 $d(0)=1$。应用此条件可得：\n$$\nd(0) = C_2 \\exp(0) = C_2 \\cdot 1 = C_2\n$$\n因此，$C_2 = 1$。满足边界条件的唯一平稳分布 $d^{\\star}(x)$ 是\n$$\nd^{\\star}(x) = \\exp\\left(-\\frac{x}{\\ell}\\right)\n$$\n现在，我们必须计算总裂纹表面测度 $S_\\ell[d^{\\star}]$：\n$$\nS_\\ell[d^{\\star}] = 2\\,\\Gamma_{\\ell}^{+}[d^{\\star}] = 2 \\int_{0}^{\\infty} \\left( \\frac{1}{2\\,\\ell}\\,(d^{\\star}(x))^{2} + \\frac{\\ell}{2}\\,\\big(d^{\\star}{}'(x)\\big)^{2} \\right)\\,\\mathrm{d}x\n$$\n我们需要 $(d^{\\star}(x))^2$ 和 $(d^{\\star}{}'(x))^2$ 这两项。首先，我们计算导数 $d^{\\star}{}'(x)$：\n$$\nd^{\\star}{}'(x) = \\frac{\\mathrm{d}}{\\mathrm{d}x}\\left(\\exp\\left(-\\frac{x}{\\ell}\\right)\\right) = -\\frac{1}{\\ell}\\exp\\left(-\\frac{x}{\\ell}\\right)\n$$\n现在我们对 $d^{\\star}(x)$ 和 $d^{\\star}{}'(x)$ 进行平方：\n$$\n(d^{\\star}(x))^2 = \\left(\\exp\\left(-\\frac{x}{\\ell}\\right)\\right)^2 = \\exp\\left(-\\frac{2x}{\\ell}\\right)\n$$\n$$\n(d^{\\star}{}'(x))^2 = \\left(-\\frac{1}{\\ell}\\exp\\left(-\\frac{x}{\\ell}\\right)\\right)^2 = \\frac{1}{\\ell^2}\\exp\\left(-\\frac{2x}{\\ell}\\right)\n$$\n将这些代入 $S_\\ell[d^{\\star}]$ 的积分中：\n$$\nS_\\ell[d^{\\star}] = 2 \\int_{0}^{\\infty} \\left( \\frac{1}{2\\,\\ell}\\,\\exp\\left(-\\frac{2x}{\\ell}\\right) + \\frac{\\ell}{2}\\,\\frac{1}{\\ell^2}\\exp\\left(-\\frac{2x}{\\ell}\\right) \\right)\\,\\mathrm{d}x\n$$\n简化被积函数：\n$$\nS_\\ell[d^{\\star}] = 2 \\int_{0}^{\\infty} \\left( \\frac{1}{2\\,\\ell}\\,\\exp\\left(-\\frac{2x}{\\ell}\\right) + \\frac{1}{2\\,\\ell}\\exp\\left(-\\frac{2x}{\\ell}\\right) \\right)\\,\\mathrm{d}x\n$$\n$$\nS_\\ell[d^{\\star}] = 2 \\int_{0}^{\\infty} \\frac{1}{\\ell}\\,\\exp\\left(-\\frac{2x}{\\ell}\\right) \\,\\mathrm{d}x\n$$\n我们可以将常数因子 $\\frac{2}{\\ell}$ 移到积分外：\n$$\nS_\\ell[d^{\\star}] = \\frac{2}{\\ell} \\int_{0}^{\\infty} \\exp\\left(-\\frac{2x}{\\ell}\\right) \\,\\mathrm{d}x\n$$\n现在我们计算这个定积分：\n$$\n\\int_{0}^{\\infty} \\exp\\left(-\\frac{2x}{\\ell}\\right) \\,\\mathrm{d}x = \\left[ -\\frac{\\ell}{2}\\exp\\left(-\\frac{2x}{\\ell}\\right) \\right]_{0}^{\\infty}\n$$\n$$\n= \\lim_{x\\to\\infty}\\left(-\\frac{\\ell}{2}\\exp\\left(-\\frac{2x}{\\ell}\\right)\\right) - \\left(-\\frac{\\ell}{2}\\exp(0)\\right)\n$$\n$$\n= 0 - \\left(-\\frac{\\ell}{2}\\right) = \\frac{\\ell}{2}\n$$\n最后，将此结果代回 $S_\\ell[d^{\\star}]$ 的表达式中：\n$$\nS_\\ell[d^{\\star}] = \\frac{2}{\\ell} \\cdot \\left(\\frac{\\ell}{2}\\right) = 1\n$$\n最优分布的正则化表面能的值恰好为 1，这与长度尺度参数 $\\ell$ 无关。这是一个基本结果，表明 Ambrosio–Tortorelli 泛函能够正确地逼近尖锐裂纹的表面能，在本问题的设置中，该表面能被归一化为 1。$S_\\ell[d^\\star]$ 代表总表面测度，计算 $2\\,\\Gamma_{\\ell}^{+}[d^{\\star}]$ 得到的结果为1是正确的。", "answer": "$$\\boxed{1}$$", "id": "2929068"}, {"introduction": "在理解了如何用相场描述裂纹之后，下一步是探究裂纹的萌生。本练习将相场理论与材料强度这一宏观工程属性联系起来，通过分析材料在无损状态下的稳定性，推导出损伤开始形成的临界应力。这揭示了相场模型的预测能力，展示了如何从模型的内在参数（如断裂韧性 $G_c$ 和正则化长度 $\\ell$）计算出材料的宏观强度 [@problem_id:2929086]。", "problem": "考虑一根长度为 $L$、单位横截面积的一维细长杆，该杆由线性弹性脆性材料制成，并承受均匀拉伸载荷，以致在小应变极限下，轴向 Green-Lagrange 应变可以等同于工程应变 $\\varepsilon$。其弹性应变能密度为 $\\psi_{e}(\\varepsilon) = \\tfrac{1}{2} E \\varepsilon^{2}$，其中 $E$ 是杨氏模量。该材料通过 Ambrosio–Tortorelli 类型（AT1）的脆性断裂变分相场模型进行建模，其中损伤变量为 $d \\in [0,1]$，退化函数为 $g(d) = (1-d)^{2}$，裂纹面密度泛函由 Griffith 临界能量释放率 $G_{c}$ 和正则化长度 $\\ell$ 表征。单位横截面积的总能量为\n$$\n\\Psi[d;\\varepsilon] \\,=\\, \\int_{0}^{L} \\left[ g(d)\\,\\psi_{e}(\\varepsilon) \\;+\\; G_{c}\\left( \\frac{d}{\\ell} \\;+\\; \\frac{\\ell}{2}\\,(d')^{2} \\right) \\right] \\,\\mathrm{d}x.\n$$\n假设 $L \\gg \\ell$ 以至于边界层可以忽略不计，并分析无损状态的均匀扰动。在单边损伤不可逆约束 $d \\ge 0$ 下，使用变分稳定性的第一性原理，确定当无损状态 $d=0$ 因无穷小均匀损伤扰动而失去局部极小性时，临界轴向 Cauchy 应力 $\\sigma_{c}$ 的显式表达式。对于一维小应变弹性，可以使用 $\\sigma = E \\varepsilon$。\n\n然后，对于 $E = 50\\ \\mathrm{GPa}$、$G_{c} = 2.4\\ \\mathrm{kJ/m^{2}}$ 和 $\\ell = 0.30\\ \\mathrm{mm}$，对 $\\sigma_{c}$ 进行数值计算。将最终应力以 $\\mathrm{MPa}$ 为单位表示，并将答案四舍五入到四位有效数字。", "solution": "该问题要求确定在一维杆中损伤起始的临界应力，该杆使用脆性断裂的相场方法进行建模。分析应在均匀损伤扰动的假设下进行。\n\n系统的单位横截面积总能量由以下泛函给出：\n$$\n\\Psi[d;\\varepsilon] \\,=\\, \\int_{0}^{L} \\left[ g(d)\\,\\psi_{e}(\\varepsilon) \\;+\\; G_{c}\\left( \\frac{d}{\\ell} \\;+\\; \\frac{\\ell}{2}\\,(d')^{2} \\right) \\right] \\,\\mathrm{d}x\n$$\n给定的本构关系为弹性应变能密度 $\\psi_{e}(\\varepsilon) = \\frac{1}{2} E \\varepsilon^{2}$ 和退化函数 $g(d) = (1-d)^{2}$。题目指定对无损状态 $d=0$ 的均匀扰动进行分析。均匀场 $d(x)$ 在空间上是常数，即 $d(x) = \\delta$（其中 $\\delta$ 为某个常数）。因此，其导数项为零，即 $d'(x) = 0$。\n\n在此简化下，被积函数沿杆长 $L$ 保持不变。我们可以为均匀应变 $\\varepsilon$ 和均匀损伤 $\\delta$ 的状态定义一个有效能量密度 $\\Phi$（单位体积的能量）：\n$$\n\\Phi(\\delta; \\varepsilon) = g(\\delta)\\psi_e(\\varepsilon) + G_c \\frac{\\delta}{\\ell}\n$$\n代入 $g(d)$ 和 $\\psi_e(\\varepsilon)$ 的给定形式，得到：\n$$\n\\Phi(\\delta; \\varepsilon) = (1-\\delta)^{2} \\left(\\frac{1}{2} E \\varepsilon^{2}\\right) + G_c \\frac{\\delta}{\\ell}\n$$\n无损状态对应于 $\\delta=0$。我们必须研究该状态的稳定性。在变分法中，如果对于任何容许的无穷小扰动，能量都增加，则该状态为一个局部极小值点。在此，损伤变量受到单边不可逆约束 $d \\ge 0$ 的限制，对于我们的均匀分析，这意味着 $\\delta \\ge 0$。\n\n为使状态 $\\delta=0$ 成为局部极小值点，能量相对于容许扰动的一阶变分必须是非负的。容许扰动的形式为 $\\delta > 0$。这要求 $\\Phi$ 在 $\\delta=0$ 处对 $\\delta$ 的方向导数是非负的。我们计算 $\\Phi$ 对 $\\delta$ 的一阶导数：\n$$\n\\frac{\\partial \\Phi}{\\partial \\delta} = -2(1-\\delta) \\left(\\frac{1}{2} E \\varepsilon^{2}\\right) + \\frac{G_c}{\\ell} = -2(1-\\delta)\\psi_e(\\varepsilon) + \\frac{G_c}{\\ell}\n$$\n在无损状态 $\\delta=0$ 处计算该导数：\n$$\n\\left. \\frac{\\partial \\Phi}{\\partial \\delta} \\right|_{\\delta=0} = -2\\psi_e(\\varepsilon) + \\frac{G_c}{\\ell}\n$$\n因此，状态 $\\delta=0$ 的局部稳定性条件是：\n$$\n\\left. \\frac{\\partial \\Phi}{\\partial \\delta} \\right|_{\\delta=0} \\ge 0 \\quad \\implies \\quad -2\\psi_e(\\varepsilon) + \\frac{G_c}{\\ell} \\ge 0\n$$\n这可以简化为：\n$$\n\\psi_e(\\varepsilon) \\le \\frac{G_c}{2\\ell}\n$$\n当该条件首次被违反时，无损状态 $d=0$ 失去其局部极小性。因此，临界点由等式定义，该等式代表了损伤驱动力恰好与抵抗力相平衡的阈值。\n$$\n\\psi_{e,c} = \\frac{G_c}{2\\ell}\n$$\n其中 $\\psi_{e,c}$ 是材料在损伤起始时储存的临界弹性应变能密度。\n\n为了求得临界应力 $\\sigma_c$，我们将弹性应变能密度 $\\psi_e$ 与 Cauchy 应力 $\\sigma$ 联系起来。对于一维线性弹性，有 $\\sigma = E\\varepsilon$，这意味着 $\\varepsilon = \\sigma/E$。将其代入 $\\psi_e$ 的表达式中：\n$$\n\\psi_e(\\sigma) = \\frac{1}{2}E \\left(\\frac{\\sigma}{E}\\right)^2 = \\frac{\\sigma^2}{2E}\n$$\n在临界条件下，我们有 $\\psi_e(\\sigma_c) = \\psi_{e,c}$：\n$$\n\\frac{\\sigma_c^2}{2E} = \\frac{G_c}{2\\ell}\n$$\n求解临界应力 $\\sigma_c$ 得到其解析表达式：\n$$\n\\sigma_c^2 = \\frac{E G_c}{\\ell} \\quad \\implies \\quad \\sigma_c = \\sqrt{\\frac{E G_c}{\\ell}}\n$$\n这就是所要求的临界应力的显式表达式。\n\n现在，我们用给定的数据对此表达式进行数值计算。首先必须将各参数转换为国际单位制（SI）的基本单位。\n杨氏模量：$E = 50\\ \\mathrm{GPa} = 50 \\times 10^9\\ \\mathrm{Pa}$。\nGriffith 临界能量释放率：$G_c = 2.4\\ \\mathrm{kJ/m^2} = 2.4 \\times 10^3\\ \\mathrm{J/m^2}$。\n正则化长度：$\\ell = 0.30\\ \\mathrm{mm} = 0.30 \\times 10^{-3}\\ \\mathrm{m}$。\n\n将这些值代入 $\\sigma_c$ 的表达式中：\n$$\n\\sigma_c = \\sqrt{\\frac{(50 \\times 10^9\\ \\mathrm{Pa}) \\cdot (2.4 \\times 10^3\\ \\mathrm{J/m^2})}{0.30 \\times 10^{-3}\\ \\mathrm{m}}}\n$$\n单位是一致的，因为 $(\\mathrm{Pa} \\cdot \\mathrm{J/m^2}) / \\mathrm{m} = (\\mathrm{N/m^2} \\cdot \\mathrm{N\\cdot m/m^2}) / \\mathrm{m} = (\\mathrm{N/m^2} \\cdot \\mathrm{N/m}) / \\mathrm{m} = \\mathrm{N^2/m^4} = \\mathrm{Pa^2}$。\n$$\n\\sigma_c = \\sqrt{\\frac{120 \\times 10^{12}}{0.30 \\times 10^{-3}}} \\ \\mathrm{Pa} = \\sqrt{400 \\times 10^{15}}\\ \\mathrm{Pa} = \\sqrt{4 \\times 10^{17}}\\ \\mathrm{Pa}\n$$\n$$\n\\sigma_c = 2 \\sqrt{10^{17}}\\ \\mathrm{Pa} = 2 \\sqrt{10 \\times 10^{16}}\\ \\mathrm{Pa} = 2 \\sqrt{10} \\times 10^8\\ \\mathrm{Pa}\n$$\n使用 $\\sqrt{10} \\approx 3.16227766$：\n$$\n\\sigma_c \\approx 2 \\times 3.16227766 \\times 10^8\\ \\mathrm{Pa} \\approx 6.32455532 \\times 10^8\\ \\mathrm{Pa}\n$$\n题目要求答案以兆帕斯卡（$\\mathrm{MPa}$）为单位，其中 $1\\ \\mathrm{MPa} = 10^6\\ \\mathrm{Pa}$。\n$$\n\\sigma_c \\approx 632.455532\\ \\mathrm{MPa}\n$$\n四舍五入到四位有效数字，我们得到：\n$$\n\\sigma_c = 632.5\\ \\mathrm{MPa}\n$$", "answer": "$$\n\\boxed{632.5}\n$$", "id": "2929086"}, {"introduction": "理论分析虽然深刻，但在解决复杂实际问题时，我们必须依赖数值计算。这个高级实践将引导你进入相场断裂力学仿真的核心，通过有限元方法（FEM）求解控制方程。你将实现一个自适应网格加密（AMR）算法，这是一种在裂纹附近自动加密网格以精确捕捉其陡峭梯度，同时在其他区域保持粗网格以节省计算资源的关键技术，它体现了现代计算力学的高效与精确 [@problem_id:2929128]。", "problem": "考虑一个定义在闭区间 $\\left[0,L\\right]$ 上的一维无量纲化相场断裂模型，其标量相场为 $d:\\left[0,L\\right]\\to\\left[0,1\\right]$。该模型源于变分形式，其中 $d$ 最小化以下泛函\n$$\n\\mathcal{E}[d] \\;=\\; \\int_{0}^{L} \\left( \\frac{l}{2}\\left(\\frac{dd}{dx}\\right)^{2} \\;+\\; \\frac{1}{2\\,l}\\,d^{2} \\;+\\; h(x)\\,\\left(1-d\\right)^{2} \\right)\\,d x,\n$$\n其中 $l>0$ 是一个正则化长度尺度，$h(x)\\ge 0$ 是一个给定的无量纲历史场，用于编码拉伸弹性能的贡献。假设在 $x=0$ 和 $x=L$ 处为自然（齐次诺伊曼）边界条件。\n\n您的任务是：\n- 从泛函 $\\mathcal{E}[d]$ 对于所有光滑检验变分的驻点性基本定义出发，推导其欧拉-拉格朗日方程和弱形式。不要假设 $d$ 有任何解析解；相反，应仅依赖变分法和积分性质（包括分部积分）来得到适用于数值近似的弱形式。\n- 在将 $\\left[0,L\\right]$ 划分为子区间的基础上，设计一个采用连续分段线性基函数的伽辽金有限元法 (FEM)，并为您推导的弱形式组装相应的线性系统。您必须使用数值积分来处理空间变化的系数。\n- 为以下形式的线性反应-扩散型偏微分方程 (PDE) 构建一个基于残差的后验误差指示子\n$$\n-\\alpha\\frac{d^2d}{dx^2} + \\beta(x)d = f(x),\n$$\n其中 $\\alpha>0$、$\\beta(x)\\ge 0$ 和 $f(x)$ 由您的弱形式导出。使用以下形式的标准单元 $L^{2}$-残差指示子\n$$\n\\eta_{e} \\;=\\; h_{e}\\,\\left\\|\\, f(x) \\,-\\, \\beta(x)\\,d_{h}(x) \\,\\right\\|_{L^{2}(e)},\n$$\n其中 $h_{e}$ 是单元长度，$d_{h}$ 是分段线性有限元解。使用高斯积分计算范数。在本次任务中，您可以忽略单元间的通量跳跃项，但必须清楚地论证为何对于一维网格上的连续分段线性近似，仅使用单元内残差是一致的。\n- 实现自适应网格加密 (AMR)，此处定义为循环：求解 $\\rightarrow$ 估计 $\\rightarrow$ 标记 $\\rightarrow$ 加密，并采用 Dörfler（体积）标记法。使用一个标记参数 $\\theta\\in\\left(0,1\\right)$，并选择一个最小的单元子集，使其指示子平方和至少达到全局指示子平方和的 $\\theta$ 分数。通过二分法加密被标记的单元。当全局估计子低于某个容差或当单元数量达到最大值时，停止加密。\n- 使用与组装过程中相同的积分法则计算离散能量 $\\mathcal{E}[d_{h}]$，并将其作为下述每个测试案例的标量输出。\n\n离散化与算法详述：\n- 在 $\\left[0,L\\right]$ 上的初始均匀网格上使用连续的分段线性基函数，该网格包含 $N_{0}$ 个单元。\n- 对于所有包含空间变化系数的单元积分，每个单元使用2点高斯积分。\n- 使用参数为 $\\theta$ 的 Dörfler 标记法。\n- 通过单元二分法（在一维空间中）进行加密，确保网格保持协调。\n- 当全局误差估计子首次满足 $\\eta \\le \\text{tol}$（其中 $\\eta := \\left(\\sum_{e}\\eta_{e}^{2}\\right)^{1/2}$），或当网格达到最大单元数 $N_{\\max}$ 时，终止 AMR，以先满足者为准。\n\n测试套件：\n- 所有测试案例的通用参数：\n  - 域长度 $L = 1$。\n  - 初始单元数 $N_{0} = 20$。\n  - 标记参数 $\\theta = 0.5$。\n  - 容差 $\\text{tol} = 10^{-4}$。\n  - 最大单元数 $N_{\\max} = 4000$。\n\n- 通过指定 $l$ 和 $h(x)$ 定义以下三个测试案例：\n  - 案例 A (局部驱动):\n    - $l = 0.02$。\n    - $h(x) = 4.0 \\,\\exp\\!\\left(-\\dfrac{\\left(x-0.5\\right)^{2}}{2\\,\\sigma^{2}}\\right)$，其中 $\\sigma = 0.07$。\n  - 案例 B (左侧加载，分段常数):\n    - $l = 0.01$。\n    - 当 $x \\in [0,0.25]$ 时 $h(x) = 3.0$，否则 $h(x) = 0$。\n  - 案例 C (平滑振荡):\n    - $l = 0.05$。\n    - $h(x) = 2.0\\,\\sin^{2}\\!\\left(\\pi x\\right)$。\n\n最终输出要求：\n- 对于每个案例，计算 AMR 终止时的离散能量 $\\mathcal{E}[d_{h}]$。\n- 您的程序应生成单行输出，其中包含一个逗号分隔的 Python 列表，内含三个能量值，每个值四舍五入到六位小数，例如 $\\left[\\text{E\\_A},\\text{E\\_B},\\text{E\\_C}\\right]$。\n- 由于模型是无量纲的，输出中不需要也不允许包含物理单位。\n\n您的最终交付物必须是一个完整、可运行的程序，该程序：\n- 实现了您用来构建求解器的推导过程（基于所述能量的弱形式）。\n- 按规定使用带有高斯积分的分段线性 FEM。\n- 实现了基于残差的 AMR 循环，包括 Dörfler 标记法、停止准则和二分加密。\n- 计算并以精确的单行格式 $\\left[\\text{E\\_A},\\text{E\\_B},\\text{E\\_C}\\right]$ 输出三个案例的能量，四舍五入到六位小数。", "solution": "所提出的问题是计算力学领域一个定义明确的练习，具体涉及使用带有自适应网格加密的有限元法 (FEM) 对一个变分问题进行数值求解。该问题在科学上以断裂相场理论为基础，在数学上是一致的，并为获得唯一解提供了所有必要信息。因此，该问题被认为是有效的。\n\n求解过程包括四个主要阶段：\n1. 从能量驻值原理推导控制方程的弱形式。\n2. 使用伽辽金有限元法和分段线性基函数对弱形式进行离散化。\n3. 构建后验误差指示子和自适应网格加密策略。\n4. 实现完整的算法以求解指定的测试案例。\n\n### 1. 弱形式与强形式的推导\n\n问题是在域 $x \\in [0, L]$ 上找到使能量泛函 $\\mathcal{E}[d]$ 最小化的函数 $d(x)$：\n$$\n\\mathcal{E}[d] = \\int_{0}^{L} \\mathcal{L}(x, d(x), d'(x)) \\,dx, \\quad \\text{其中} \\quad \\mathcal{L}(x, d, d') = \\frac{l}{2}(d')^2 + \\frac{1}{2l}d^2 + h(x)(1-d)^2.\n$$\n一个最小化子 $d(x)$ 必须满足驻点条件，即对于所有容许变分 $v(x)$，泛函的一阶变分 $\\delta\\mathcal{E}[d; v]$ 必须为零。一阶变分定义为：\n$$\n\\delta\\mathcal{E}[d; v] = \\left. \\frac{d}{d\\epsilon} \\mathcal{E}[d + \\epsilon v] \\right|_{\\epsilon=0} = 0.\n$$\n让我们计算关于 $\\epsilon$ 的导数：\n$$\n\\frac{d}{d\\epsilon} \\int_{0}^{L} \\left[ \\frac{l}{2}(d' + \\epsilon v')^2 + \\frac{1}{2l}(d + \\epsilon v)^2 + h(x)(1 - (d + \\epsilon v))^2 \\right] dx.\n$$\n在积分号下求导得到：\n$$\n\\int_{0}^{L} \\left[ l(d' + \\epsilon v') v' + \\frac{1}{l}(d + \\epsilon v) v + 2h(x)(1 - d - \\epsilon v)(-v) \\right] dx.\n$$\n令 $\\epsilon=0$，我们得到驻点条件：\n$$\n\\int_{0}^{L} \\left[ l d' v' + \\frac{1}{l} d v - 2h(x)(1 - d)v \\right] dx = 0.\n$$\n整理各项，我们得到问题的**弱形式**：找到 $d \\in H^1([0,L])$，使得对于所有检验函数 $v \\in H^1([0,L])$，\n$$\n\\int_{0}^{L} l \\frac{dd}{dx} \\frac{dv}{dx} \\,dx + \\int_{0}^{L} \\left(\\frac{1}{l} + 2h(x)\\right) d v \\,dx = \\int_{0}^{L} 2h(x) v \\,dx.\n$$\n为推导强形式，我们对弱形式的第一项进行分部积分：\n$$\n\\int_{0}^{L} l d' v' \\,dx = \\left[ l d' v \\right]_0^L - \\int_{0}^{L} l d'' v \\,dx.\n$$\n将此代入弱形式得到：\n$$\n\\left[ l d' v \\right]_0^L - \\int_{0}^{L} l d'' v \\,dx + \\int_{0}^{L} \\left(\\frac{1}{l} + 2h(x)\\right) d v \\,dx = \\int_{0}^{L} 2h(x) v \\,dx.\n$$\n合并所有积分项：\n$$\n\\int_{0}^{L} \\left[ -l d'' + \\left(\\frac{1}{l} + 2h(x)\\right)d - 2h(x) \\right] v \\,dx + \\left[ l \\frac{dd}{dx} v \\right]_0^L = 0.\n$$\n由于该方程必须对任意光滑的检验函数 $v(x)$ 成立，根据变分法基本引理，被积函数必须为零。这给出了**欧拉-拉格朗日方程**：\n$$\n-l \\frac{d^2d}{dx^2} + \\left(\\frac{1}{l} + 2h(x)\\right)d = 2h(x).\n$$\n边界项 $\\left[ l d' v \\right]_0^L = l d'(L)v(L) - l d'(0)v(0)$ 也必须消失。由于 $v(0)$ 和 $v(L)$ 是任意的，这蕴含了问题中陈述的**自然（齐次诺伊曼）边界条件**：\n$$\n\\frac{dd}{dx}(0) = 0 \\quad \\text{和} \\quad \\frac{dd}{dx}(L) = 0.\n$$\n\n### 2. 伽辽金有限元列式\n\n我们采用伽辽金方法，其中解 $d(x)$ 和检验函数 $v(x)$ 从由连续分段线性基函数 $N_i(x)$ 张成的同一有限维空间中近似。近似解为 $d_h(x) = \\sum_{j} d_j N_j(x)$，其中 $d_j$ 是未知的节点值。\n将 $d_h(x)$ 代入弱形式，并轮流选择每个基函数 $N_i(x)$ 作为 $v(x)$，我们得到一个线性方程组 $\\mathbf{K}\\mathbf{d} = \\mathbf{f}$，其中 $\\mathbf{d}$ 是节点值向量 $\\{d_j\\}$。全局刚度矩阵 $\\mathbf{K}$ 和力向量 $\\mathbf{f}$ 的各项为：\n$$\nK_{ij} = \\int_{0}^{L} l N_i' N_j' \\,dx + \\int_{0}^{L} \\left(\\frac{1}{l} + 2h(x)\\right) N_i N_j \\,dx\n$$\n$$\nf_i = \\int_{0}^{L} 2h(x) N_i \\,dx\n$$\n这些全局积分通过对每个长度为 $h_e = x_{k+1}-x_k$ 的单元 $e = [x_k, x_{k+1}]$ 的贡献求和来组装。在单元 $e$ 上，为局部基函数定义了局部刚度矩阵和质量矩阵以及局部力向量。对于分段线性形函数，导数部分可以精确积分。由于在单元上 $N_k' = -1/h_e$ 和 $N_{k+1}' = 1/h_e$，局部刚度矩阵为：\n$$\n\\mathbf{K}^e_{\\text{stiff}} = \\frac{l}{h_e} \\begin{pmatrix} 1 & -1 \\\\ -1 & 1 \\end{pmatrix}.\n$$\n包含空间变化系数 $h(x)$ 的项使用在参考单元 $\\hat{e} = [-1, 1]$ 上的2点高斯积分进行数值积分。局部质量矩阵和力向量的贡献为：\n$$\n\\mathbf{K}^e_{\\text{mass}, ab} \\approx \\frac{h_e}{2} \\sum_{q=1}^{2} w_q \\left( \\frac{1}{l} + 2h(x_q) \\right) \\hat{N}_a(\\xi_q) \\hat{N}_b(\\xi_q)\n$$\n$$\n\\mathbf{f}^e_{a} \\approx \\frac{h_e}{2} \\sum_{q=1}^{2} w_q \\left( 2h(x_q) \\right) \\hat{N}_a(\\xi_q)\n$$\n其中 $\\xi_q \\in \\{-1/\\sqrt{3}, 1/\\sqrt{3}\\}$ 是积分点，$w_q=1$ 是权重，$x_q$ 是对应的物理坐标，$\\hat{N}_{a,b}$ 是参考单元上的基函数。\n\n### 3. 后验误差指示子与AMR\n\n推导出的欧拉-拉格朗日方程 $-l d'' + (\\frac{1}{l} + 2h(x))d = 2h(x)$ 属于反应-扩散类型 $-\\alpha d'' + \\beta(x)d = f(x)$，其中 $\\alpha = l$，$\\beta(x) = \\frac{1}{l} + 2h(x)$，且 $f(x) = 2h(x)$。对于有限元解 $d_h$，该偏微分方程的残差为 $R(x) = f(x) - (-\\alpha d_h'' + \\beta(x) d_h)$。由于 $d_h$ 是分段线性的，其二阶导数 $d_h''$ 在每个单元内部为零。因此，单元残差为 $R_e(x) = f(x) - \\beta(x)d_h(x)$。指定的误差指示子是此残差的单元 $L^2$-范数，并按单元尺寸 $h_e$ 进行缩放：\n$$\n\\eta_{e} = h_{e} \\|R_e\\|_{L^2(e)} = h_{e} \\left( \\int_{e} \\left( f(x) - \\beta(x)d_{h}(x) \\right)^2 dx \\right)^{1/2}.\n$$\n完整的后验误差估计还包括单元间边界处通量跳跃 $[l d_h']$ 的项。对于一维中的连续分段线性 ($P1$) 近似，伽辽金正交性条件意味着节点处的通量跳跃由相邻单元上的单元内残差积分来平衡。因此，跳跃项的大小受单元残差控制。虽然忽略跳跃项使得该指示子作为真实误差范数的*估计子*不够精确，但它仍然是用于自适应加密的一个一致的*指示子*。它能正确识别出误差贡献大的单元，这对于指导AMR算法中的标记过程是足够的。范数的平方使用2点高斯积分计算。\n\nAMR算法如下：\n1. **求解**：在当前网格上，组装并求解线性系统，得到节点解 $\\mathbf{d}$。\n2. **估计**：为每个单元计算指示子 $\\eta_e$ 和全局估计子 $\\eta = (\\sum_e \\eta_e^2)^{1/2}$。\n3. **检查终止条件**：如果 $\\eta \\le \\text{tol}$ 或单元数超过 $N_{\\max}$，则停止。\n4. **标记**：使用Dörfler（体积）标记法。按 $\\eta_e$ 值降序对单元排序。标记一个最小的单元集，使其累积误差平方和至少占总误差平方和 $\\eta^2$ 的 $\\theta$ 分数。\n5. **加密**：将每个被标记的单元二等分，在其中心点创建一个新节点。生成一个新的协调网格，并进入下一次迭代。\n\n### 4. 离散能量计算\n\nAMR循环终止后，在最终网格上计算最终的离散能量 $\\mathcal{E}[d_h]$。该积分再次被分解为对所有单元 $e$ 的求和：\n$$\n\\mathcal{E}[d_h] = \\sum_e \\left[ \\int_e \\frac{l}{2}(d_h')^2 dx + \\int_e \\left( \\frac{1}{2l}d_h^2 + h(x)(1-d_h)^2 \\right) dx \\right].\n$$\n第一项涉及每个单元上的常数导数 $d_h' = (d_{k+1}-d_k)/h_e$，可以精确积分：$\\frac{l}{2h_e}(d_{k+1}-d_k)^2$。第二项积分使用2点高斯积分计算。这些贡献在所有单元上的总和即为总能量。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.sparse import lil_matrix, csc_matrix\nfrom scipy.sparse.linalg import spsolve\n\ndef solve():\n    \"\"\"\n    Main driver function to run the specified test cases and print the results.\n    \"\"\"\n\n    # Common parameters for all test cases\n    common_params = {\n        'L': 1.0,\n        'N0': 20,\n        'theta': 0.5,\n        'tol': 1e-4,\n        'N_max': 4000,\n    }\n\n    # Quadrature points and weights for a 2-point Gauss rule on [-1, 1]\n    quad_points = np.array([-1.0 / np.sqrt(3.0), 1.0 / np.sqrt(3.0)])\n    quad_weights = np.array([1.0, 1.0])\n    \n    # Case A: Localized driving force\n    sigma_A = 0.07\n    h_A = lambda x: 4.0 * np.exp(-(x - 0.5)**2 / (2.0 * sigma_A**2))\n    case_A_params = {'l': 0.02, 'h_func': h_A}\n\n    # Case B: Piecewise constant driving force\n    h_B = lambda x: 3.0 if np.all(x >= 0.0) and np.all(x <= 0.25) else 0.0\n    case_B_params = {'l': 0.01, 'h_func': np.vectorize(h_B)}\n\n    # Case C: Smooth oscillatory driving force\n    h_C = lambda x: 2.0 * np.sin(np.pi * x)**2\n    case_C_params = {'l': 0.05, 'h_func': h_C}\n    \n    test_cases = [case_A_params, case_B_params, case_C_params]\n    \n    results = []\n    for params in test_cases:\n        energy = adaptive_fem_solver(\n            L=common_params['L'],\n            N0=common_params['N0'],\n            l=params['l'],\n            h_func=params['h_func'],\n            theta=common_params['theta'],\n            tol=common_params['tol'],\n            N_max=common_params['N_max'],\n            quad_points=quad_points,\n            quad_weights=quad_weights\n        )\n        results.append(energy)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join([f'{r:.6f}' for r in results])}]\")\n\ndef adaptive_fem_solver(L, N0, l, h_func, theta, tol, N_max, quad_points, quad_weights):\n    \"\"\"\n    Implements the solve->estimate->mark->refine adaptive loop.\n    \"\"\"\n    # Initialize mesh\n    nodes = np.linspace(0, L, N0 + 1)\n    \n    while True:\n        num_elements = len(nodes) - 1\n        elements = np.array([[i, i + 1] for i in range(num_elements)])\n\n        # 1. Solve\n        d = assemble_and_solve(nodes, elements, l, h_func, quad_points, quad_weights)\n\n        # 2. Estimate\n        eta_e = compute_error_indicators(nodes, elements, d, l, h_func, quad_points, quad_weights)\n        eta_global = np.sqrt(np.sum(eta_e**2))\n\n        # 3. Check termination criteria\n        if eta_global <= tol or num_elements >= N_max:\n            break\n\n        # 4. Mark\n        marked_indices = mark_elements(eta_e, theta)\n        \n        # 5. Refine\n        nodes = refine_mesh(nodes, elements, marked_indices)\n\n    # Compute final energy on the terminal mesh\n    final_energy = compute_energy(nodes, elements, d, l, h_func, quad_points, quad_weights)\n    return final_energy\n\ndef assemble_and_solve(nodes, elements, l, h_func, quad_points, quad_weights):\n    \"\"\"\n    Assembles the global stiffness matrix and force vector, then solves the system.\n    \"\"\"\n    num_nodes = len(nodes)\n    K = lil_matrix((num_nodes, num_nodes))\n    f = np.zeros(num_nodes)\n    \n    # Basis functions on reference element [-1, 1]\n    N_ref = [lambda xi: (1 - xi) / 2, lambda xi: (1 + xi) / 2]\n\n    for i, elem in enumerate(elements):\n        n1, n2 = elem\n        x1, x2 = nodes[n1], nodes[n2]\n        he = x2 - x1\n\n        # Stiffness part (exact)\n        K_stiff_e = (l / he) * np.array([[1, -1], [-1, 1]])\n\n        # Mass part and force vector (using quadrature)\n        K_mass_e = np.zeros((2, 2))\n        f_e = np.zeros(2)\n\n        for q_idx, xi in enumerate(quad_points):\n            w = quad_weights[q_idx]\n            x_q = x1 + (xi + 1) * he / 2\n            h_val = h_func(x_q)\n            \n            beta_val = 1/l + 2*h_val\n            f_val = 2*h_val\n\n            for a in range(2):\n                f_e[a] += f_val * N_ref[a](xi) * w * he / 2\n                for b in range(2):\n                    K_mass_e[a, b] += beta_val * N_ref[a](xi) * N_ref[b](xi) * w * he / 2\n        \n        K_e = K_stiff_e + K_mass_e\n        \n        # Assemble into global system\n        for a in range(2):\n            f[elem[a]] += f_e[a]\n            for b in range(2):\n                K[elem[a], elem[b]] += K_e[a, b]\n\n    # Solve the linear system\n    K_csc = csc_matrix(K)\n    d = spsolve(K_csc, f)\n    return d\n\ndef compute_error_indicators(nodes, elements, d, l, h_func, quad_points, quad_weights):\n    \"\"\"\n    Computes the residual-based a posteriori error indicator for each element.\n    \"\"\"\n    num_elements = len(elements)\n    eta_e = np.zeros(num_elements)\n    \n    N_ref = [lambda xi: (1 - xi) / 2, lambda xi: (1 + xi) / 2]\n\n    for i, elem in enumerate(elements):\n        n1, n2 = elem\n        x1, x2 = nodes[n1], nodes[n2]\n        he = x2 - x1\n        d1, d2 = d[n1], d[n2]\n        \n        integral_val = 0\n        for q_idx, xi in enumerate(quad_points):\n            w = quad_weights[q_idx]\n            x_q = x1 + (xi + 1) * he / 2\n            \n            d_h_q = d1 * N_ref[0](xi) + d2 * N_ref[1](xi)\n            h_val = h_func(x_q)\n            \n            beta_val = 1/l + 2*h_val\n            f_val = 2*h_val\n            \n            residual_sq = (f_val - beta_val * d_h_q)**2\n            integral_val += residual_sq * w\n            \n        eta_e[i] = he * np.sqrt(integral_val * he / 2)\n        \n    return eta_e\n\ndef mark_elements(eta_e, theta):\n    \"\"\"\n    Performs Dörfler (bulk) marking.\n    \"\"\"\n    eta_total_sq = np.sum(eta_e**2)\n    sorted_indices = np.argsort(eta_e)[::-1]\n    \n    cumulative_sum = 0.0\n    marked_indices = []\n    \n    for idx in sorted_indices:\n        cumulative_sum += eta_e[idx]**2\n        marked_indices.append(idx)\n        if cumulative_sum >= theta * eta_total_sq:\n            break\n            \n    return marked_indices\n\ndef refine_mesh(nodes, elements, marked_indices):\n    \"\"\"\n    Refines the mesh by bisecting marked elements.\n    \"\"\"\n    midpoints_to_add = set()\n    for idx in marked_indices:\n        n1, n2 = elements[idx]\n        midpoint = (nodes[n1] + nodes[n2]) / 2\n        midpoints_to_add.add(midpoint)\n        \n    new_nodes_list = sorted(list(np.union1d(nodes, list(midpoints_to_add))))\n    return np.array(new_nodes_list)\n\ndef compute_energy(nodes, elements, d, l, h_func, quad_points, quad_weights):\n    \"\"\"\n    Computes the discrete energy of the system.\n    \"\"\"\n    total_energy = 0\n    N_ref = [lambda xi: (1 - xi) / 2, lambda xi: (1 + xi) / 2]\n\n    for i, elem in enumerate(elements):\n        n1, n2 = elem\n        x1, x2 = nodes[n1], nodes[n2]\n        he = x2 - x1\n        d1, d2 = d[n1], d[n2]\n        \n        # Stiffness energy (exact)\n        d_prime = (d2 - d1) / he\n        energy_stiff = (l / 2) * (d_prime**2) * he\n\n        # Mass/source energy (quadrature)\n        energy_mass_source = 0\n        for q_idx, xi in enumerate(quad_points):\n            w = quad_weights[q_idx]\n            x_q = x1 + (xi + 1) * he / 2\n            \n            d_h_q = d1 * N_ref[0](xi) + d2 * N_ref[1](xi)\n            h_val = h_func(x_q)\n\n            integrand = (1 / (2*l)) * d_h_q**2 + h_val * (1 - d_h_q)**2\n            energy_mass_source += integrand * w\n            \n        energy_mass_source *= he / 2\n        \n        total_energy += energy_stiff + energy_mass_source\n        \n    return total_energy\n\nsolve()\n```", "id": "2929128"}]}