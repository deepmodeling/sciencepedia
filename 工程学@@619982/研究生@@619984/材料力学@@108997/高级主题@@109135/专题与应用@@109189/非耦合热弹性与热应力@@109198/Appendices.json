{"hands_on_practices": [{"introduction": "本练习是热弹性力学的一个经典入门问题。它将引导你如何综合运用静力平衡、运动协调和本构关系，来求解约束结构中纯粹由温度变化引起的热应力。通过解决一个由两种不同材料组成的组合杆在均匀升温下的受力问题，你将掌握分析热致内力这一类静不定问题的基础方法。[@problem_id:2928446]", "problem": "一根直的等截面复合杆由两段同轴杆段端对端连接而成，置于两个间距固定的完全刚性、不可移动的支座之间。杆段1的长度为$L_{1}$，横截面积为$A_{1}$，杨氏模量为$E_{1}$，线性热膨胀系数为$\\alpha_{1}$。杆段2的长度为$L_{2}$，横截面积为$A_{2}$，杨氏模量为$E_{2}$，线性热膨胀系数为$\\alpha_{2}$。在参考温度$T_{0}$时，该组合杆处于无应力状态，并恰好安装在支座之间。随后，整个杆件承受均匀的温度升高$\\Delta T$，而支座保持固定且不发生热膨胀。假设处于非耦合线性热弹性状态：温度场是预设的（不受应力反馈影响），热应变为$\\alpha \\,\\Delta T$，总小应变等于机械应变与热应变之和。忽略体力以及连接处的任何滑移或间隙。\n\n仅使用平衡方程、变形协调条件和线性热弹性本构定律，写出控制方程并求解杆内产生的共同轴向力。报告左支座反力的大小，注意两个支座反力大小相等。使用以下数据，这些数据对应于一个科学上合理的异种材料组合体：\n- $L_{1} = 0.60\\,\\mathrm{m}$，$A_{1} = 3.0\\times 10^{-4}\\,\\mathrm{m}^{2}$，$E_{1} = 70\\times 10^{9}\\,\\mathrm{Pa}$，$\\alpha_{1} = 23\\times 10^{-6}\\,\\mathrm{K}^{-1}$。\n- $L_{2} = 0.40\\,\\mathrm{m}$，$A_{2} = 2.0\\times 10^{-4}\\,\\mathrm{m}^{2}$，$E_{2} = 200\\times 10^{9}\\,\\mathrm{Pa}$，$\\alpha_{2} = 12\\times 10^{-6}\\,\\mathrm{K}^{-1}$。\n- $\\Delta T = 60\\,\\mathrm{K}$。\n\n以千牛顿（kN）为单位表示最终答案，并四舍五入到四位有效数字。", "solution": "首先根据所需标准对问题陈述进行验证。\n\n### 步骤1：提取已知条件\n提供了以下数据和条件：\n- 对于杆段1：\n  - 长度：$L_{1} = 0.60\\,\\mathrm{m}$\n  - 横截面积：$A_{1} = 3.0 \\times 10^{-4}\\,\\mathrm{m}^{2}$\n  - 杨氏模量：$E_{1} = 70 \\times 10^{9}\\,\\mathrm{Pa}$\n  - 线性热膨胀系数：$\\alpha_{1} = 23 \\times 10^{-6}\\,\\mathrm{K}^{-1}$\n- 对于杆段2：\n  - 长度：$L_{2} = 0.40\\,\\mathrm{m}$\n  - 横截面积：$A_{2} = 2.0 \\times 10^{-4}\\,\\mathrm{m}^{2}$\n  - 杨氏模量：$E_{2} = 200 \\times 10^{9}\\,\\mathrm{Pa}$\n  - 线性热膨胀系数：$\\alpha_{2} = 12 \\times 10^{-6}\\,\\mathrm{K}^{-1}$\n- 温度变化：$\\Delta T = 60\\,\\mathrm{K}$\n- 初始条件：组合杆在参考温度$T_{0}$时无应力。\n- 边界条件：杆件被固定在完全刚性、不可移动的支座之间。\n- 假设：假设为非耦合线性热弹性。体力被忽略。连接是完美的。\n\n### 步骤2：使用提取的已知条件进行验证\n对问题进行有效性评估：\n- **科学依据：** 该问题是一维线性热弹性力学中的一个标准练习，这是连续介质力学和材料科学中的一个核心课题。热应力、应变协调和本构定律的概念是基本原理。所提供的材料属性是真实的（杆段1的性质类似于铝合金，杆段2的性质类似于钢）。\n- **良态问题：** 该问题是一个静不定系统。然而，平衡方程、变形协调条件（总位移为零）和本构关系的组合提供了足够数量的方程来确定未知内力的唯一解。所有必要的数据均已提供。\n- **客观性：** 问题陈述以精确、定量且明确的技术语言编写。它不含任何主观或非科学的主张。\n\n该问题没有表现出任何诸如科学不严谨、不完整、矛盾或模糊之类的缺陷。\n\n### 步骤3：结论与行动\n该问题是 **有效的**。将推导出解答。\n\n解决此问题需要应用材料力学的三个基本原理：静力平衡、变形协调以及热弹性材料的本构定律。\n\n1.  **平衡：** 复合杆在支座反力的作用下处于静力平衡状态。对于沿长度方向没有外力的一维问题，我们记为$P$的内部轴向力在整个杆件上必须是恒定的。我们约定，正的力$P$为拉力，负的力为压力。支座处的反力与此内力大小相等。\n\n2.  **变形协调：** 支座被定义为完全刚性且不可移动。这对系统施加了一个变形协调约束：复合杆的总长度变化（伸长量）必须为零。总伸长量$\\delta_{total}$是杆段1的伸长量($\\delta_1$)和杆段2的伸长量($\\delta_2$)之和。\n    $$ \\delta_{total} = \\delta_1 + \\delta_2 = 0 $$\n\n3.  **本构定律：** 对于线性热弹性材料，总应变$\\epsilon$是机械应变$\\epsilon_m$和热应变$\\epsilon_T$之和。机械应变遵循胡克定律，$\\epsilon_m = \\sigma / E$，其中$\\sigma$是轴向应力，E是杨氏模量。应力为$\\sigma = P / A$，其中A是横截面积。热应变由$\\epsilon_T = \\alpha \\Delta T$给出，其中$\\alpha$是线性热膨胀系数，$\\Delta T$是均匀的温度变化。长度为L的杆段的总伸长量$\\delta$为$\\delta = \\epsilon L$。将这些结合起来，得到杆段总伸长量的表达式：\n    $$ \\delta = \\left( \\frac{\\sigma}{E} + \\alpha \\Delta T \\right) L = \\left( \\frac{P}{AE} + \\alpha \\Delta T \\right) L = \\frac{PL}{AE} + \\alpha L \\Delta T $$\n\n将此本构关系应用于杆的每个部分，我们得到：\n$$ \\delta_1 = \\frac{P L_1}{A_1 E_1} + \\alpha_1 L_1 \\Delta T $$\n$$ \\delta_2 = \\frac{P L_2}{A_2 E_2} + \\alpha_2 L_2 \\Delta T $$\n\n将这些表达式代入协调方程$\\delta_1 + \\delta_2 = 0$中，得到系统的控制方程：\n$$ \\left( \\frac{P L_1}{A_1 E_1} + \\alpha_1 L_1 \\Delta T \\right) + \\left( \\frac{P L_2}{A_2 E_2} + \\alpha_2 L_2 \\Delta T \\right) = 0 $$\n我们现在可以求解内力$P$：\n$$ P \\left( \\frac{L_1}{A_1 E_1} + \\frac{L_2}{A_2 E_2} \\right) = - (\\alpha_1 L_1 + \\alpha_2 L_2) \\Delta T $$\n$$ P = - \\frac{(\\alpha_1 L_1 + \\alpha_2 L_2) \\Delta T}{\\frac{L_1}{A_1 E_1} + \\frac{L_2}{A_2 E_2}} $$\n负号证实了内力是压缩性的，因为温度升高导致杆件推向固定支座。问题要求左支座的反力大小R，它等于内力的大小，即$R = |P|$。\n$$ R = \\frac{(\\alpha_1 L_1 + \\alpha_2 L_2) \\Delta T}{\\frac{L_1}{A_1 E_1} + \\frac{L_2}{A_2 E_2}} $$\n\n现在，代入所提供的数值。分开计算分子和分母会更有条理。\n分子表示总的无约束热膨胀量：\n$$\n\\begin{aligned}\n\\text{分子} = (\\alpha_1 L_1 + \\alpha_2 L_2) \\Delta T \\\\\n= \\left( (23 \\times 10^{-6}\\,\\mathrm{K}^{-1})(0.60\\,\\mathrm{m}) + (12 \\times 10^{-6}\\,\\mathrm{K}^{-1})(0.40\\,\\mathrm{m}) \\right) (60\\,\\mathrm{K}) \\\\\n= (1.38 \\times 10^{-5}\\,\\mathrm{m} + 0.48 \\times 10^{-5}\\,\\mathrm{m}) (60) \\\\\n= (1.86 \\times 10^{-5}\\,\\mathrm{m})(60) = 1.116 \\times 10^{-3}\\,\\mathrm{m}\n\\end{aligned}\n$$\n分母表示两个杆段的机械柔度之和：\n$$ \\frac{L_1}{A_1 E_1} = \\frac{0.60\\,\\mathrm{m}}{(3.0 \\times 10^{-4}\\,\\mathrm{m}^2)(70 \\times 10^9\\,\\mathrm{Pa})} = \\frac{0.60}{2.1 \\times 10^7}\\,\\mathrm{m/N} \\approx 2.85714 \\times 10^{-8}\\,\\mathrm{m/N} $$\n$$ \\frac{L_2}{A_2 E_2} = \\frac{0.40\\,\\mathrm{m}}{(2.0 \\times 10^{-4}\\,\\mathrm{m}^2)(200 \\times 10^9\\,\\mathrm{Pa})} = \\frac{0.40}{4.0 \\times 10^7}\\,\\mathrm{m/N} = 1.0 \\times 10^{-8}\\,\\mathrm{m/N} $$\n$$ \\text{分母} = \\frac{L_1}{A_1 E_1} + \\frac{L_2}{A_2 E_2} \\approx (2.85714 + 1.0) \\times 10^{-8}\\,\\mathrm{m/N} = 3.85714 \\times 10^{-8}\\,\\mathrm{m/N} $$\n反力的大小$R$是这两个量的比值：\n$$ R = \\frac{1.116 \\times 10^{-3}\\,\\mathrm{m}}{3.85714 \\times 10^{-8}\\,\\mathrm{m/N}} \\approx 28933.3\\,\\mathrm{N} $$\n问题要求答案以千牛顿（kN）为单位，并四舍五入到4位有效数字。\n$$ R = 28.9333\\,\\mathrm{kN} \\approx 28.93\\,\\mathrm{kN} $$", "answer": "$$\\boxed{28.93}$$", "id": "2928446"}, {"introduction": "实际工程中的材料属性和温度场往往不是均匀分布的。这个练习将分析层次从分立的均质杆件提升到了连续的、属性随空间变化的非均匀介质，并考虑了线性变化的温度场。通过推导杆内轴向应力的解析表达式，你将深化对如何将热弹性力学控制方程应用于更普遍、更真实情境的理解。[@problem_id:2928462]", "problem": "一根长度为 $L$ 的细长直杆沿其轴线占据区间 $x \\in [0,L]$。该杆是非均匀的：其杨氏模量 $E(x)$ 和横截面积 $A(x)$ 是 $x$ 的光滑正函数。该杆两端由完全刚性的支座约束，因此轴向位移满足 $u(0)=0$ 和 $u(L)=0$。不存在外部机械牵引力或轴向体力。在非耦合热弹性假设下，温度场是给定的，且不受力学响应的影响。杆件承受线性温度分布 $T(x) = T_{0} + \\beta x$，其中 $T_{0}$ 和 $\\beta$是常数，无应力参考温度为 $T_{\\mathrm{ref}} = T_{0}$。线性热膨胀系数是常数，等于 $\\alpha_{0}$。假设应变为小应变，且采用适用于细长轴向受力构件的一维（1D）运动学和本构响应。\n\n从一维热弹性的基本原理出发——即无体力情况下的力学平衡、应变-位移关系和线性热弹性本构关系——推导轴向柯西应力场 $\\sigma(x)$ 关于 $x$, $L$, $\\beta$, $\\alpha_{0}$, $E(x)$ 和 $A(x)$ 的封闭形式表达式。将 $\\sigma(x)$的最终答案以帕斯卡为单位表示。不要代入任何数值；只提供符号表达式。最终答案必须是 $\\sigma(x)$ 的单一解析表达式。", "solution": "问题是要求解一根两端固定、承受线性温度分布的非均匀杆中的轴向应力场 $\\sigma(x)$。该问题使用一维（1D）细长杆热弹性力学的基本原理来求解。\n\n首先，我们建立控制方程。\n1.  **力学平衡**: 在没有轴向体力的情况下，一维平衡方程由下式给出\n    $$ \\frac{dP(x)}{dx} = 0 $$\n    其中 $P(x)$ 是位置 $x$ 处横截面的内部轴向力。该方程意味着轴向力 $P(x)$ 必须沿杆的全长保持恒定。我们用 $F$ 表示这个恒定的力，所以 $P(x) = F$。轴向力与轴向柯西应力 $\\sigma(x)$ 和横截面积 $A(x)$ 的关系为 $P(x) = \\sigma(x) A(x)$。因此，我们有\n    $$ \\sigma(x) A(x) = F $$\n    这是一个静不定问题，恒定的反作用力 $F$ 必须由协调条件和边界条件确定。根据这个关系，我们可以将应力表示为\n    $$ \\sigma(x) = \\frac{F}{A(x)} $$\n\n2.  **应变-位移关系**: 对于小变形，轴向应变 $\\epsilon(x)$ 与轴向位移 $u(x)$ 的关系为\n    $$ \\epsilon(x) = \\frac{du(x)}{dx} $$\n\n3.  **本构关系**: 一维线性热弹性本构关系表明，总应变 $\\epsilon(x)$ 是力学应变 $\\epsilon_{\\text{mech}}(x)$ 和热应变 $\\epsilon_{\\text{th}}(x)$ 的和。\n    $$ \\epsilon(x) = \\epsilon_{\\text{mech}}(x) + \\epsilon_{\\text{th}}(x) $$\n    力学应变由胡克定律给出，$\\epsilon_{\\text{mech}}(x) = \\sigma(x) / E(x)$，其中 $E(x)$ 是杨氏模量。热应变由 $\\epsilon_{\\text{th}}(x) = \\alpha_{0} \\Delta T(x)$ 给出，其中 $\\alpha_{0}$ 是线性热膨胀系数，$\\Delta T(x)$ 是相对于无应力参考温度 $T_{\\text{ref}}$ 的温度变化。\n    给定温度场 $T(x) = T_{0} + \\beta x$ 和参考温度 $T_{\\text{ref}} = T_{0}$，温度变化为\n    $$ \\Delta T(x) = T(x) - T_{\\text{ref}} = (T_{0} + \\beta x) - T_{0} = \\beta x $$\n    综合这些，总应变为\n    $$ \\epsilon(x) = \\frac{\\sigma(x)}{E(x)} + \\alpha_{0} \\beta x $$\n\n现在，我们使用边界条件来求解未知力 $F$。杆的两端由刚性支座约束，因此位移 $u(x)$ 满足 $u(0)=0$ 和 $u(L)=0$。杆的总长度变化是轴向应变在其长度上的积分：\n$$ \\Delta L = u(L) - u(0) = \\int_{0}^{L} \\epsilon(x) dx $$\n根据边界条件，总长度变化为零：\n$$ u(L) - u(0) = 0 - 0 = 0 $$\n这为本问题提供了协调方程：\n$$ \\int_{0}^{L} \\epsilon(x) dx = 0 $$\n我们将总应变的表达式代入此协调方程：\n$$ \\int_{0}^{L} \\left( \\frac{\\sigma(x)}{E(x)} + \\alpha_{0} \\beta x \\right) dx = 0 $$\n接下来，我们代入应力表达式 $\\sigma(x) = F/A(x)$：\n$$ \\int_{0}^{L} \\left( \\frac{F}{A(x)E(x)} + \\alpha_{0} \\beta x \\right) dx = 0 $$\n我们可以将积分分为两部分：\n$$ \\int_{0}^{L} \\frac{F}{A(x)E(x)} dx + \\int_{0}^{L} \\alpha_{0} \\beta x dx = 0 $$\n由于 $F$、$\\alpha_{0}$ 和 $\\beta$ 是常数，我们可以将它们移到积分符号外：\n$$ F \\int_{0}^{L} \\frac{1}{A(x)E(x)} dx + \\alpha_{0} \\beta \\int_{0}^{L} x dx = 0 $$\n计算第二个积分得到：\n$$ \\int_{0}^{L} x dx = \\left[ \\frac{x^{2}}{2} \\right]_{0}^{L} = \\frac{L^{2}}{2} $$\n将此结果代回到关于 $F$ 的方程中：\n$$ F \\int_{0}^{L} \\frac{dx}{A(x)E(x)} + \\alpha_{0} \\beta \\frac{L^{2}}{2} = 0 $$\n现在，我们可以解出恒定的反作用力 $F$：\n$$ F = - \\frac{\\alpha_{0} \\beta \\frac{L^{2}}{2}}{\\int_{0}^{L} \\frac{dx}{A(x)E(x)}} $$\n最后，为了求出应力场 $\\sigma(x)$，我们将 $F$ 的这个表达式代回到关系式 $\\sigma(x) = F/A(x)$ 中。为了避免积分变量和位置变量 $x$ 之间的混淆，我们使用哑元变量 $\\xi$ 进行积分：\n$$ \\sigma(x) = \\frac{1}{A(x)} \\left( - \\frac{\\alpha_{0} \\beta L^{2}}{2 \\int_{0}^{L} \\frac{d\\xi}{A(\\xi)E(\\xi)}} \\right) $$\n这就得到了杆中轴向应力分布的最终表达式：\n$$ \\sigma(x) = - \\frac{\\alpha_{0} \\beta L^{2}}{2 A(x) \\int_{0}^{L} \\frac{d\\xi}{A(\\xi)E(\\xi)}} $$\n该表达式代表了约束杆中由于热膨胀而产生的压应力。负号表示压缩，这在物理上是符合预期的，因为杆被加热（对于 $\\beta  0$）并且被阻止伸长。", "answer": "$$\n\\boxed{-\\frac{\\alpha_{0} \\beta L^{2}}{2 A(x) \\int_{0}^{L} \\frac{d\\xi}{A(\\xi)E(\\xi)}}}\n$$", "id": "2928462"}, {"introduction": "对于几何形状和材料属性复杂的结构，获得解析解往往是不可能的。这个动手编程练习将指导你实现一个有限元方法，以解决功能梯度材料中的热弹性问题。通过从虚功原理出发推导弱形式并将其付诸数值计算，你将打通理论与计算实践之间的壁垒，掌握一个强大的现代工程分析工具。[@problem_id:2928435]", "problem": "实现一种一维有限元方法，用于求解功能梯度材料中的非耦合热弹性问题，其中杨氏模量 $E(x)$ 和热膨胀系数 $\\alpha(x)$ 均随空间变化。目标是从第一性原理出发，演示在热载荷作用下，如何将空间变化的系数在单元层面进行一致性地整合，并组装成全局系统。仅从以下基本原理出发：运动学关系 $ \\varepsilon(x) = du/dx $，无体力的一维线性动量平衡，以及线性热弹性本构行为 $ \\sigma(x) = E(x)\\left(\\varepsilon(x) - \\alpha(x)\\Delta T\\right) $，其中 $ \\Delta T $ 是给定的温变场，且与力学解无关（非耦合热弹性）。使用虚功原理推导其弱形式以及使用线性形函数的相应有限元离散格式。请勿使用任何跳过从这些基本原理出发的推导路径的简化公式。\n\n使用数值积分实现单元刚度和热载荷的计算，在每个单元内部的积分点上计算 $E(x)$ 和 $\\alpha(x)$ 的值。组装全局刚度和热载荷，施加指定的边界条件，求解节点位移，并对轴向应力场进行后处理。在所有情况下，横截面积 $A$ 均为常数，杆为等截面杆。\n\n您的程序必须计算以下三个测试用例，并报告所要求的量。对所有积分，使用线性二节点单元，沿长度方向划分 $N = 400$ 个单元的均匀网格，以及每个单元使用 $3$ 个点的高斯积分。空间坐标 $x$ 的范围为从 $x=0$ 到 $x=L$。\n\n所有测试的通用参数：\n- 长度 $L = 1.0$ m，面积 $A = 1.0\\times 10^{-4}$ m$^2$，基准模量 $E_0 = 2.10\\times 10^{11}$ Pa，基准热膨胀系数 $\\alpha_0 = 12.0\\times 10^{-6}$ K$^{-1}$。\n\n测试用例 1 (梯度性质下的自由热膨胀):\n- 材料梯度：$E(x) = E_0\\left(1 + 0.5\\,x/L\\right)$, $\\alpha(x) = \\alpha_0\\left(1 + 0.5\\,x/L\\right)$。\n- 温变：$\\Delta T = 100.0$ K。\n- 边界条件：在 $x=0$ 处 $u(0)=0$ (固支)，在 $x=L$ 处为自由端。\n- 待验证的量：将在 $x=L$ 处为自由端的条件下，由处处应力为零所蕴含的精确值，与有限元解得到的自由端位移 $u(L)$ 进行比较。报告绝对相对误差，一个无量纲浮点数。\n\n测试用例 2 (两端固定，无外部牵引):\n- 材料梯度：$E(x) = E_0\\left(1 + 0.8\\,x/L\\right)^2$, $\\alpha(x) = \\alpha_0\\left(1 + 0.3\\,x/L\\right)$。\n- 温变：$\\Delta T = 40.0$ K。\n- 边界条件：在 $x=0$ 处 $u(0)=0$ 且在 $x=L$ 处 $u(L)=0$。\n- 待验证的量：将由平衡和相容性条件所蕴含的精确恒定应力，与有限元解得到的空间平均轴向应力 $\\bar{\\sigma} = \\frac{1}{L}\\int_{0}^{L}\\sigma(x)\\,dx$ 进行比较。报告绝对相对误差，一个无量纲浮点数。\n\n测试用例 3 (左端固支，右端施加端点牵引力):\n- 材料梯度：$E(x) = E_0\\exp\\!\\left(1.2\\,x/L\\right)$, $\\alpha(x) = \\alpha_0\\left(1 + 0.4\\,x/L\\right)$。\n- 温变：$\\Delta T = 50.0$ K。\n- 边界条件和载荷：在 $x=0$ 处 $u(0)=0$，并在 $x=L$ 处施加给定的轴向牵引力 $t = 50.0\\times 10^{6}$ Pa。\n- 待验证的量：将由平衡条件（轴向应力恒定且等于 $t$）所蕴含的精确值，与有限元解得到的自由端位移 $u(L)$ 进行比较。报告绝对相对误差，一个无量纲浮点数。\n\n需要生成的精确输出：\n- 对于测试用例 1：输出一个浮点数，其值为计算所得的 $u(L)$（单位：m）与精确参考值 $u(L)$（单位：m）之间的绝对相对误差。\n- 对于测试用例 2：输出一个浮点数，其值为计算所得的 $\\bar{\\sigma}$（单位：Pa）与精确参考值 $\\sigma$（单位：Pa）之间的绝对相对误差。\n- 对于测试用例 3：输出一个浮点数，其值为计算所得的 $u(L)$（单位：m）与精确参考值 $u(L)$（单位：m）之间的绝对相对误差。\n\n最终输出格式：\n- 您的程序应生成单行输出，其中包含三个结果，形式为方括号内的逗号分隔列表（例如，“[r1,r2,r3]”）。这三个浮点数必须按顺序分别是测试用例 1、2 和 3 的结果。每个报告的浮点数必须是无量纲的（绝对相对误差）。不应打印任何其他文本。\n\n注意：\n- 实现中的所有物理量必须使用国际单位制（SI单位）处理。位移单位必须是 m，应力单位是 Pa，温度单位是 K，长度单位是 m。报告的误差是无量纲的。\n- 本问题中不使用角度。\n- 实现不得读取任何用户输入，必须按原样运行。", "solution": "问题陈述是有效的。它以线性热弹性原理为科学基础，对于每个案例都给出了充足的数据和边界条件，问题是适定的，并且使用客观、明确的语言进行阐述。我们将继续提供完整解答。\n\n该解答需要实现一种用于功能梯度杆中非耦合热弹性问题的一维有限元方法(FEM)。这将从虚功原理出发进行推导。\n\n基本控制关系如下：\n1. 运动学关系 (应变-位移)：$\\varepsilon(x) = \\frac{du}{dx}$\n2. 静力平衡 (源于无体力的线性动量平衡)：$\\frac{d\\sigma}{dx} = 0$\n3. 本构关系 (线性热弹性)：$\\sigma(x) = E(x)(\\varepsilon(x) - \\varepsilon_{th}(x)) = E(x)(\\frac{du}{dx} - \\alpha(x)\\Delta T)$\n\n此处，$u(x)$ 是轴向位移，$\\varepsilon(x)$ 是总轴向应变，$\\sigma(x)$ 是轴向应力，$E(x)$ 是随空间变化的杨氏模量，$\\alpha(x)$ 是随空间变化的热膨胀系数，$\\Delta T$ 是给定的均匀温变。\n\n虚功原理指出，对于处于平衡状态的物体，应力在虚应变场上所做的内虚功（$\\delta W_{int}$）等于外力在相应虚位移场上所做的外虚功（$\\delta W_{ext}$）。\n$$ \\delta W_{int} = \\delta W_{ext} $$\n对于横截面积为 $A$、长度为 $L$ 的一维杆，这表示为：\n$$ \\int_0^L \\sigma(x) \\delta\\varepsilon(x) A \\, dx = (P_L \\delta u(L) + P_0 \\delta u(0)) $$\n其中 $\\delta\\varepsilon$ 是与运动许可的虚位移 $\\delta u$ 对应的虚应变，而 $P_0$ 和 $P_L$ 是在 $x=0$ 和 $x=L$ 处的外部集中力。\n\n我们将本构关系代入内虚功项中：\n$$ \\delta W_{int} = \\int_0^L E(x) \\left( \\frac{du}{dx} - \\alpha(x)\\Delta T \\right) \\frac{d(\\delta u)}{dx} A \\, dx $$\n重新整理这些项，我们得到问题的弱形式。求解满足本质边界条件的 $u(x)$，使得对于所有容许的虚位移 $\\delta u$，下式成立：\n$$ \\int_0^L A E(x) \\frac{du}{dx} \\frac{d(\\delta u)}{dx} \\, dx = \\int_0^L A E(x)\\alpha(x)\\Delta T \\frac{d(\\delta u)}{dx} \\, dx + \\delta W_{ext} $$\n\n为离散化此方程，我们将域 $[0, L]$ 划分为 $N$ 个有限元。在每个长度为 $L^{(e)}$、连接节点 $i$ 和 $j$ 的单元 $(e)$ 内，位移场 $u(x)$ 使用线性形函数 $\\mathbf{N}(x) = [N_i(x), N_j(x)]$ 来近似：\n$$ u^{(e)}(x) \\approx \\mathbf{N}(x) \\mathbf{d}^{(e)} = N_i(x) d_i + N_j(x) d_j $$\n其中 $\\mathbf{d}^{(e)} = [d_i, d_j]^T$ 是节点位移向量。则应变为：\n$$ \\varepsilon^{(e)}(x) = \\frac{du^{(e)}}{dx} = \\frac{d\\mathbf{N}}{dx} \\mathbf{d}^{(e)} = \\mathbf{B}^{(e)} \\mathbf{d}^{(e)} $$\n对于一个线性二节点单元，其应变-位移矩阵 $\\mathbf{B}^{(e)}$ 是一个常数：\n$$ \\mathbf{B}^{(e)} = \\frac{1}{L^{(e)}} [-1, 1] $$\n虚位移和虚应变也通过类似的方式近似：$\\delta u^{(e)} = \\mathbf{N}\\delta\\mathbf{d}^{(e)}$ 和 $\\delta\\varepsilon^{(e)} = \\mathbf{B}^{(e)}\\delta\\mathbf{d}^{(e)}$。\n\n将离散化后的场代入单个单元的弱形式中，得到：\n$$ (\\delta\\mathbf{d}^{(e)})^T \\int_{L^{(e)}} A (\\mathbf{B}^{(e)})^T E(x) \\mathbf{B}^{(e)} \\mathbf{d}^{(e)} \\, dx = (\\delta\\mathbf{d}^{(e)})^T \\int_{L^{(e)}} A (\\mathbf{B}^{(e)})^T E(x)\\alpha(x)\\Delta T \\, dx $$\n由于此式必须对任意的 $(\\delta\\mathbf{d}^{(e)})^T$ 都成立，我们得到单元级的矩阵方程：\n$$ \\mathbf{k}^{(e)} \\mathbf{d}^{(e)} = \\mathbf{f}_{th}^{(e)} $$\n其中 $\\mathbf{k}^{(e)}$ 是单元刚度矩阵，$\\mathbf{f}_{th}^{(e)}$ 是单元热载荷向量。\n\n其分量定义如下：\n$$ \\mathbf{k}^{(e)} = \\int_{L^{(e)}} A (\\mathbf{B}^{(e)})^T E(x) \\mathbf{B}^{(e)} \\, dx = \\frac{A}{(L^{(e)})^2} \\begin{bmatrix} 1  -1 \\\\ -1  1 \\end{bmatrix} \\int_{L^{(e)}} E(x) \\, dx $$\n$$ \\mathbf{f}_{th}^{(e)} = \\int_{L^{(e)}} A (\\mathbf{B}^{(e)})^T E(x)\\alpha(x)\\Delta T \\, dx = \\frac{A \\Delta T}{L^{(e)}} \\begin{bmatrix} -1 \\\\ 1 \\end{bmatrix} \\int_{L^{(e)}} E(x)\\alpha(x) \\, dx $$\n由于 $E(x)$ 和 $\\alpha(x)$ 随空间变化，这些积分使用高斯积分进行数值计算。对于单元上的积分，我们使用 $x(\\xi) = \\frac{x_i+x_j}{2} + \\frac{L^{(e)}}{2}\\xi$ 将域 $x \\in [x_i, x_j]$ 映射到标准域 $\\xi \\in [-1, 1]$。微分元为 $dx = \\frac{L^{(e)}}{2}d\\xi$。积分变为在 $n_p$ 个积分点上的求和：\n$$ \\int_{L^{(e)}} g(x) dx = \\int_{-1}^1 g(x(\\xi)) \\frac{L^{(e)}}{2} d\\xi \\approx \\frac{L^{(e)}}{2} \\sum_{k=1}^{n_p} w_k g(x(\\xi_k)) $$\n其中 $w_k$ 和 $\\xi_k$ 分别是积分权重和积分点。问题指定 $n_p=3$。\n\n在计算出每个单元的 $\\mathbf{k}^{(e)}$ 和 $\\mathbf{f}_{th}^{(e)}$ 后，它们被组装成一个全局方程组 $\\mathbf{K}\\mathbf{d} = \\mathbf{F}_{th} + \\mathbf{F}_{ext}$，其中 $\\mathbf{K}$ 是全局刚度矩阵，$\\mathbf{d}$ 是全局节点位移向量，$\\mathbf{F}_{th}$ 是全局热载荷向量，$\\mathbf{F}_{ext}$ 包含外部机械载荷。\n\n然后施加边界条件。对于给定的位移 $u_i = 0$，对 $\\mathbf{K}$ 的相应行和列进行修改（例如，通过消元法），并调整力向量。在求解出 $\\mathbf{d}$ 后，可以对每个单元中的应力进行后处理。由于每个单元的应变是恒定的，应力仅随材料属性变化：\n$$ \\sigma^{(e)}(x) = E(x) \\left( \\frac{d_j - d_i}{L^{(e)}} - \\alpha(x)\\Delta T \\right) $$\n\n为了验证，我们从平衡方程 $\\frac{d\\sigma}{dx}=0$ 推导每个测试用例的精确解，该方程意味着 $\\sigma(x) = \\sigma_c$（一个常数）。位移通过对本构律积分得到：\n$$ u(x) = u(0) + \\int_0^x \\left(\\frac{\\sigma_c}{E(x')} + \\alpha(x')\\Delta T\\right) dx' $$\n用例 1：$u(0)=0$ 且 $\\sigma(L)=0$ (自由端)。这意味着 $\\sigma_c=0$。\n$$ u_{exact}(L) = \\Delta T \\int_0^L \\alpha_0(1 + 0.5x/L) dx = \\alpha_0 \\Delta T [x + 0.25x^2/L]_0^L = 1.25 \\alpha_0 \\Delta T L $$\n用例 2：$u(0)=0$ 且 $u(L)=0$。使用条件 $u(L)=0$ 来求解 $\\sigma_c$。\n$$ 0 = \\sigma_c \\int_0^L \\frac{dx}{E(x)} + \\Delta T \\int_0^L \\alpha(x) dx \\implies \\bar{\\sigma}_{exact} = \\sigma_c = -\\Delta T \\frac{\\int_0^L \\alpha(x)dx}{\\int_0^L E(x)^{-1}dx} $$\n积分计算结果为 $\\int_0^L \\alpha_0(1+0.3x/L)dx = 1.15\\alpha_0 L$ 和 $\\int_0^L E_0^{-1}(1+0.8x/L)^{-2}dx = L/(1.8E_0)$。\n$$ \\bar{\\sigma}_{exact} = -\\Delta T \\frac{1.15\\alpha_0 L}{L/(1.8E_0)} = -2.07\\alpha_0 E_0 \\Delta T $$\n用例 3：$u(0)=0$ 且 $\\sigma(L)=t$。这意味着 $\\sigma_c=t$。\n$$ u_{exact}(L) = \\int_0^L \\left(\\frac{t}{E(x)} + \\alpha(x)\\Delta T\\right) dx = t \\int_0^L E_0^{-1}e^{-1.2x/L}dx + \\Delta T \\int_0^L \\alpha_0(1+0.4x/L)dx $$\n$$ u_{exact}(L) = \\frac{tL}{1.2E_0}(1-e^{-1.2}) + 1.2 \\alpha_0 \\Delta T L $$\n这些精确解将用作参考，以计算所需 FEM 实现的绝对相对误差。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Implements a 1D FEM for uncoupled thermoelasticity in FGMs.\n    \"\"\"\n    # Common parameters from problem statement\n    L = 1.0  # m\n    A = 1.0e-4  # m^2\n    E0 = 2.10e11  # Pa\n    alpha0 = 12.0e-6  # K^-1\n    N = 400  # Number of elements\n    num_gauss_points = 3\n\n    # Define material property functions for each test case\n    def E_func_1(x, L_bar, E_base):\n        return E_base * (1.0 + 0.5 * x / L_bar)\n    \n    def alpha_func_1(x, L_bar, alpha_base):\n        return alpha_base * (1.0 + 0.5 * x / L_bar)\n\n    def E_func_2(x, L_bar, E_base):\n        return E_base * (1.0 + 0.8 * x / L_bar)**2\n    \n    def alpha_func_2(x, L_bar, alpha_base):\n        return alpha_base * (1.0 + 0.3 * x / L_bar)\n\n    def E_func_3(x, L_bar, E_base):\n        return E_base * np.exp(1.2 * x / L_bar)\n    \n    def alpha_func_3(x, L_bar, alpha_base):\n        return alpha_base * (1.0 + 0.4 * x / L_bar)\n\n    test_cases = [\n        {\n            \"E_func\": E_func_1, \"alpha_func\": alpha_func_1, \"delta_T\": 100.0,\n            \"bcs\": {\"u0\": 0.0, \"uL\": None}, \"traction_L\": 0.0, \"case_id\": 1\n        },\n        {\n            \"E_func\": E_func_2, \"alpha_func\": alpha_func_2, \"delta_T\": 40.0,\n            \"bcs\": {\"u0\": 0.0, \"uL\": 0.0}, \"traction_L\": 0.0, \"case_id\": 2\n        },\n        {\n            \"E_func\": E_func_3, \"alpha_func\": alpha_func_3, \"delta_T\": 50.0,\n            \"bcs\": {\"u0\": 0.0, \"uL\": None}, \"traction_L\": 50.0e6, \"case_id\": 3\n        }\n    ]\n\n    results = []\n\n    # Get Gaussian quadrature points and weights for the canonical interval [-1, 1]\n    # This is equivalent to `scipy.integrate.quadrature` or other standard tables\n    # For num_gauss_points = 3\n    gauss_points = np.array([-np.sqrt(3.0/5.0), 0.0, np.sqrt(3.0/5.0)])\n    gauss_weights = np.array([5.0/9.0, 8.0/9.0, 5.0/9.0])\n    \n    # Generate mesh\n    nodes = np.linspace(0, L, N + 1)\n    num_nodes = N + 1\n    elem_length = L / N\n\n    for case in test_cases:\n        E_func = case[\"E_func\"]\n        alpha_func = case[\"alpha_func\"]\n        delta_T = case[\"delta_T\"]\n\n        # Initialize global matrices\n        K_global = np.zeros((num_nodes, num_nodes))\n        F_global = np.zeros(num_nodes)\n\n        # Assemble global stiffness matrix and thermal load vector\n        for e in range(N):\n            node_i, node_j = e, e + 1\n            x1, x2 = nodes[node_i], nodes[node_j]\n            \n            # Numerical integration for element stiffness and thermal load\n            k_integral = 0.0\n            f_integral = 0.0\n            \n            for i in range(num_gauss_points):\n                xi = gauss_points[i]\n                w = gauss_weights[i]\n                \n                # Map from canonical to physical coordinates\n                x_phys = (x1 + x2) / 2.0 + (elem_length / 2.0) * xi\n                \n                E_val = E_func(x_phys, L, E0)\n                alpha_val = alpha_func(x_phys, L, alpha0)\n                \n                jacobian = elem_length / 2.0\n                \n                k_integral += w * E_val * jacobian\n                f_integral += w * E_val * alpha_val * jacobian\n                \n            k_elem_scalar = (A / elem_length**2) * k_integral\n            k_elem = k_elem_scalar * np.array([[1, -1], [-1, 1]])\n\n            f_th_elem_scalar = (A * delta_T / elem_length) * f_integral\n            f_th_elem = f_th_elem_scalar * np.array([-1, 1])\n\n            # Assembly\n            K_global[node_i:node_i+2, node_i:node_i+2] += k_elem\n            F_global[node_i:node_i+2] += f_th_elem\n        \n        # Add external traction\n        if case[\"traction_L\"] != 0.0:\n            F_global[-1] += case[\"traction_L\"] * A\n\n        # Apply boundary conditions using elimination\n        if case[\"bcs\"][\"u0\"] is not None:\n            K_global[0, :] = 0\n            K_global[:, 0] = 0\n            K_global[0, 0] = 1.0\n            F_global[0] = case[\"bcs\"][\"u0\"]\n\n        if case[\"bcs\"][\"uL\"] is not None:\n            K_global[-1, :] = 0\n            K_global[:, -1] = 0\n            K_global[-1, -1] = 1.0\n            F_global[-1] = case[\"bcs\"][\"uL\"]\n        \n        # Solve for nodal displacements\n        displacements = np.linalg.solve(K_global, F_global)\n\n        # Post-process and calculate error for each case\n        if case[\"case_id\"] == 1:\n            u_fem_L = displacements[-1]\n            u_exact_L = 1.25 * alpha0 * delta_T * L\n            error = abs((u_fem_L - u_exact_L) / u_exact_L)\n            results.append(error)\n\n        elif case[\"case_id\"] == 2:\n            total_sigma_integral = 0.0\n            for e in range(N):\n                node_i, node_j = e, e + 1\n                x1, x2 = nodes[node_i], nodes[node_j]\n                \n                u_i, u_j = displacements[node_i], displacements[node_j]\n                strain = (u_j - u_i) / elem_length\n                \n                sigma_integral_elem = 0.0\n                for i in range(num_gauss_points):\n                    xi, w = gauss_points[i], gauss_weights[i]\n                    x_phys = (x1 + x2) / 2.0 + (elem_length / 2.0) * xi\n                    \n                    E_val = E_func(x_phys, L, E0)\n                    alpha_val = alpha_func(x_phys, L, alpha0)\n                    \n                    sigma_val = E_val * (strain - alpha_val * delta_T)\n                    sigma_integral_elem += w * sigma_val * (elem_length / 2.0)\n                \n                total_sigma_integral += sigma_integral_elem\n            \n            sigma_bar_fem = total_sigma_integral / L\n            sigma_bar_exact = -2.07 * alpha0 * E0 * delta_T\n            error = abs((sigma_bar_fem - sigma_bar_exact) / sigma_bar_exact)\n            results.append(error)\n\n        elif case[\"case_id\"] == 3:\n            u_fem_L = displacements[-1]\n            traction = case[\"traction_L\"]\n            \n            # Integral part 1: Mechanical displacement\n            term1 = (traction * L / (1.2 * E0)) * (1.0 - np.exp(-1.2))\n            # Integral part 2: Thermal displacement\n            term2 = 1.2 * alpha0 * delta_T * L\n            u_exact_L = term1 + term2\n            \n            error = abs((u_fem_L - u_exact_L) / u_exact_L)\n            results.append(error)\n    \n    # Final print statement in the exact required format.\n    print(f\"[{','.join(f'{r:.15e}' for r in results)}]\")\n\nsolve()\n```", "id": "2928435"}]}