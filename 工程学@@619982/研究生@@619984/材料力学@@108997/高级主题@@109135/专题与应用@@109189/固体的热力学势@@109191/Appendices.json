{"hands_on_practices": [{"introduction": "热力学势不仅仅是抽象的数学构造；它们是材料本构关系的生成函数。本练习将通过一个多孔介质的例子，让您亲手实践如何从亥姆霍兹自由能 $\\psi$ 出发，推导出关键的材料参数——Biot模量 $M$ 和Biot耦合系数 $\\alpha$。通过这个过程，您将深刻理解亥姆霍兹自由能 $\\psi$ 的二阶导数如何直接定义材料在耦合场（此处为力学-流体）下的响应，从而巩固理论与材料物理行为之间的联系 [@problem_id:2925000]。", "problem": "考虑一个均匀、各向同性、等温、小应变的多孔固体，其单位参考体积的亥姆霍兹自由能密度由 $\\,\\psi(\\varepsilon, m)\\,$ 描述，其中 $\\,\\varepsilon\\,$ 是无穷小应变张量，$\\,m\\,$ 是单位参考体积的流体含量。使用等温过程的标准热力学结构，其中与 $\\,\\varepsilon\\,$ 和 $\\,m\\,$ 共轭的热力学力通过对 $\\,\\psi\\,$ 求适当的导数得到，且 Clausius–Duhem 不等式简化为对 $\\,\\psi\\,$ 的本构约束。在参考状态 $\\,(\\varepsilon, m) = (\\mathbf{0}, 0)\\,$ 下进行分析，并考虑关于此状态的线性化增量。\n\n通过固定温度下的线性化流体含量关系，定义 Biot 耦合系数 $\\,\\alpha\\,$ 和 Biot 模量 $\\,M\\,$：\n$$\ndm \\;=\\; \\alpha\\, d(\\operatorname{tr}\\varepsilon) \\;+\\; \\frac{1}{M}\\, dp,\n$$\n其中 $\\,p\\,$ 表示孔隙压力，$\\,\\operatorname{tr}(\\cdot)\\,$ 是迹。从前述热力学结构出发，在不预先假设 $\\,\\psi\\,$ 的任何特定形式的情况下，证明 $\\,\\alpha\\,$ 和 $\\,M\\,$ 可以用在参考状态下求值的 $\\,\\psi\\,$ 的二阶导数来表示。\n\n然后，对于特定的二次自由能：\n$$\n\\psi(\\varepsilon, m)\n\\;=\\;\n\\frac{1}{2}\\,\\kappa\\,\\big(\\operatorname{tr}\\varepsilon\\big)^{2}\n\\;+\\;\n\\mu\\,\\varepsilon_{\\mathrm{dev}}:\\varepsilon_{\\mathrm{dev}}\n\\;-\\;\n\\beta\\, m\\,\\operatorname{tr}\\varepsilon\n\\;+\\;\n\\frac{1}{2}\\,n\\, m^{2},\n$$\n其中 $\\,\\varepsilon_{\\mathrm{dev}} := \\varepsilon - \\frac{1}{3}\\operatorname{tr}\\varepsilon\\,\\mathbf{I}\\,$, $\\,\\kappa>0\\,$（体积模量），$\\,\\mu>0\\,$（剪切模量），$\\,n>0\\,$，且选择 $\\,\\beta\\in\\mathbb{R}\\,$ 以使 $\\,\\psi\\,$ 是严格凸的，用 $\\,\\beta\\,$ 和 $\\,n\\,$ 显式计算 $\\,\\alpha\\,$ 和 $\\,M\\,$。将您的最终答案表示为精确的解析表达式。最终答案必须以一个行矩阵的形式给出，其中先包含 $\\,\\alpha\\,$，然后是 $\\,M\\,$。", "solution": "该问题陈述经核实具有科学依据、提法恰当且客观。这是多孔介质连续介质力学中的一个标准练习。我们开始求解。\n\n等温、小应变多孔固体的热力学框架建立在单位参考体积的亥姆霍兹自由能密度 $\\psi(\\varepsilon, m)$ 之上，其中 $\\varepsilon$ 是无穷小应变张量，而 $m$ 是单位参考体积的流体含量。功共轭的热力学力是 Cauchy 应力张量 $\\sigma$ 和流体化学势 $\\mu_f$。它们由自由能的导数给出：\n$$\n\\sigma = \\frac{\\partial \\psi}{\\partial \\varepsilon}(\\varepsilon, m), \\quad \\mu_f = \\frac{\\partial \\psi}{\\partial m}(\\varepsilon, m)\n$$\n我们考虑关于参考状态 $(\\varepsilon, m) = (\\mathbf{0}, 0)$ 的线性化增量，在该状态下，势及其一阶导数均假设为零，即 $\\psi(\\mathbf{0}, 0) = 0$，$\\sigma(\\mathbf{0}, 0) = \\mathbf{0}$，以及 $\\mu_f(\\mathbf{0}, 0) = 0$。增量（对于小量，记作 $d(\\cdot)$ 或直接用变量本身表示）的线性化本构关系由 $\\psi$ 的二阶泰勒展开得到：\n$$\nd\\sigma = \\frac{\\partial^2 \\psi}{\\partial \\varepsilon \\partial \\varepsilon}\\bigg|_{0} : d\\varepsilon + \\frac{\\partial^2 \\psi}{\\partial \\varepsilon \\partial m}\\bigg|_{0} dm\n$$\n$$\nd\\mu_f = \\frac{\\partial^2 \\psi}{\\partial m \\partial \\varepsilon}\\bigg|_{0} : d\\varepsilon + \\frac{\\partial^2 \\psi}{\\partial m^2}\\bigg|_{0} dm\n$$\n符号 $\\cdot|_0$ 表示在参考状态 $(\\varepsilon, m) = (\\mathbf{0}, 0)$ 下求值。根据二阶导数的对称性（Schwarz 定理），我们有 $\\frac{\\partial^2 \\psi}{\\partial \\varepsilon \\partial m} = \\left(\\frac{\\partial^2 \\psi}{\\partial m \\partial \\varepsilon}\\right)^T$。\n\n对于均匀各向同性材料，标量函数 $\\psi$ 必须仅通过 $\\varepsilon$ 的不变量来依赖于 $\\varepsilon$。对于小应变，这些不变量通常选择为 $\\operatorname{tr}(\\varepsilon)$ 和某个偏应变的度量，如 $\\varepsilon_{\\mathrm{dev}}:\\varepsilon_{\\mathrm{dev}}$。因此，二阶导数张量也必须是各向同性的。混合二阶导数 $\\frac{\\partial^2 \\psi}{\\partial m \\partial \\varepsilon}|_0$ 必须是一个二阶各向同性张量，这意味着它与单位张量 $\\mathbf{I}$ 成正比：\n$$\n\\frac{\\partial^2 \\psi}{\\partial m \\partial \\varepsilon}\\bigg|_{0} = B\\,\\mathbf{I}\n$$\n其中 $B$ 是一个标量常数，由 $B = \\frac{\\partial^2\\psi}{\\partial m \\partial (\\operatorname{tr}\\varepsilon)}\\big|_0$ 给出。我们再定义标量 $N = \\frac{\\partial^2 \\psi}{\\partial m^2}\\big|_0$。化学势增量的方程简化为：\n$$\nd\\mu_f = B\\, (\\mathbf{I} : d\\varepsilon) + N\\, dm = B\\, d(\\operatorname{tr}\\varepsilon) + N\\, dm\n$$\n为了得到 $dm$ 的表达式，我们重排此方程：\n$$\nN\\, dm = d\\mu_f - B\\, d(\\operatorname{tr}\\varepsilon) \\implies dm = -\\frac{B}{N}\\,d(\\operatorname{tr}\\varepsilon) + \\frac{1}{N}\\,d\\mu_f\n$$\n问题给出了 Biot 参数 $\\alpha$ 和 $M$ 的唯象定义：\n$$\ndm = \\alpha\\, d(\\operatorname{tr}\\varepsilon) + \\frac{1}{M}\\, dp\n$$\n其中 $p$ 是孔隙压力。为了使此关系与我们的热力学推导相一致，必须在孔隙压力 $p$ 和化学势 $\\mu_f$ 之间建立联系。在孔隙力学中，确保热力学稳定性的标准约定是将孔隙压力的增量直接等同于化学势的增量，即 $dp = d\\mu_f$。任何其他选择，例如 $dp = -d\\mu_f$，都将与 Biot 模量 $M$ 为正的物理要求相冲突，因为材料的稳定性要求 $N = \\frac{\\partial^2 \\psi}{\\partial m^2}|_0 > 0$。\n\n通过设 $dp = d\\mu_f$ 并比较 $dm$ 的两个表达式，我们可以确定系数：\n$$\n\\alpha = -\\frac{B}{N}, \\qquad \\frac{1}{M} = \\frac{1}{N} \\implies M = N\n$$\n代入 $B$ 和 $N$ 的定义，我们得到用亥姆霍兹自由能的二阶导数表示的 Biot 系数和 Biot 模量的表达式：\n$$\n\\alpha = -\\frac{\\frac{\\partial^2 \\psi}{\\partial m \\partial (\\operatorname{tr}\\varepsilon)}\\bigg|_{(\\mathbf{0},0)}}{\\frac{\\partial^2 \\psi}{\\partial m^2}\\bigg|_{(\\mathbf{0},0)}}, \\qquad M = \\frac{\\partial^2 \\psi}{\\partial m^2}\\bigg|_{(\\mathbf{0},0)}\n$$\n这就完成了问题的第一部分。\n\n对于第二部分，给定特定的二次自由能密度：\n$$\n\\psi(\\varepsilon, m) = \\frac{1}{2}\\,\\kappa\\,\\big(\\operatorname{tr}\\varepsilon\\big)^{2} + \\mu\\,\\varepsilon_{\\mathrm{dev}}:\\varepsilon_{\\mathrm{dev}} - \\beta\\, m\\,\\operatorname{tr}\\varepsilon + \\frac{1}{2}\\,n\\, m^{2}\n$$\n我们计算所需的二阶导数。首先，对 $m$ 求偏导：\n$$\n\\frac{\\partial \\psi}{\\partial m} = - \\beta\\,\\operatorname{tr}\\varepsilon + n\\, m\n$$\n现在，我们计算在参考状态 $(\\varepsilon, m) = (\\mathbf{0}, 0)$ 下的二阶导数：\n$$\n\\frac{\\partial^2 \\psi}{\\partial m^2}\\bigg|_{(\\mathbf{0},0)} = \\frac{\\partial}{\\partial m} \\big( - \\beta\\,\\operatorname{tr}\\varepsilon + n\\, m \\big) \\bigg|_{(\\mathbf{0},0)} = n\n$$\n$$\n\\frac{\\partial^2 \\psi}{\\partial m \\partial (\\operatorname{tr}\\varepsilon)}\\bigg|_{(\\mathbf{0},0)} = \\frac{\\partial}{\\partial (\\operatorname{tr}\\varepsilon)} \\big( - \\beta\\,\\operatorname{tr}\\varepsilon + n\\, m \\big) \\bigg|_{(\\mathbf{0},0)} = -\\beta\n$$\n将这些结果代入 $\\alpha$ 和 $M$ 的一般表达式中：\n$$\nM = \\frac{\\partial^2 \\psi}{\\partial m^2}\\bigg|_{(\\mathbf{0},0)} = n\n$$\n$$\n\\alpha = -\\frac{\\frac{\\partial^2 \\psi}{\\partial m \\partial (\\operatorname{tr}\\varepsilon)}\\big|_{(\\mathbf{0},0)}}{\\frac{\\partial^2 \\psi}{\\partial m^2}\\big|_{(\\mathbf{0},0)}} = -\\frac{-\\beta}{n} = \\frac{\\beta}{n}\n$$\n$\\psi$ 是严格凸的条件意味着 $n > 0$ 和 $\\kappa n > \\beta^2$，这确保了 $\\alpha$ 和 $M$ 都有良好定义，且 $M$ 为正。\n\nBiot 系数和 Biot 模量的最终表达式为 $\\alpha = \\beta/n$ 和 $M = n$ 。", "answer": "$$\n\\boxed{\n\\begin{pmatrix}\n\\frac{\\beta}{n} & n\n\\end{pmatrix}\n}\n$$", "id": "2925000"}, {"introduction": "平衡态热力学的核心原则之一是，在特定约束条件下（如恒温恒压），系统将演化至使相应热力学势达到最小的状态。本练习将这一基本原理应用于一个更高级的场景：从原子尺度模型出发预测宏观材料属性。您将通过数值最小化一个基于Lennard-Jones原子间势和德拜模型构建的亥姆霍兹自由能 $F(T,V)$，来确定晶体在不同温度下的平衡体积 $V^{\\star}(T)$，并进而计算出其热膨胀系数 $\\alpha(T)$。这个实践充分展示了热力学势作为连接微观机理与宏观可观测现象的桥梁所具有的强大威力 [@problem_id:2924969]。", "problem": "考虑一个各向同性的晶体固体，其模型为面心立方晶格，对相互作用由Lennard-Jones势给出。在温度 $T$ 和单位原子体积 $V$ 下，每个原子的亥姆霍兹自由能定义为 $F(T,V)=U(V)+F_{\\mathrm{vib}}(T,V)$，其中 $U(V)$ 是单位原子的静态晶格能，$F_{\\mathrm{vib}}(T,V)$ 是在准谐振德拜模型中的振动亥姆霍兹自由能。计算单位采用电子伏特（能量）、埃的三次方（体积）和开尔文（温度）。任务是设计并实现一个程序，对于指定的参数集，在每个指定温度下对 $F(T,V)$ 关于 $V$ 进行数值最小化，计算平衡体积 $V^{\\star}(T)$，然后使用温度的有限差分近似，预测由 $\\alpha(T)=\\frac{1}{V^{\\star}(T)}\\left.\\frac{\\partial V^{\\star}(T)}{\\partial T}\\right|_{P}$ 定义的体热膨胀系数 $\\alpha(T)$。将最终的 $\\alpha(T)$ 值以 $\\mathrm{K}^{-1}$ 为单位表示，并四舍五入到八位小数。\n\n使用以下基本基础和建模假设：\n\n- 对势是Lennard–Jones $12$–$6$势 $\\phi(r)=4\\varepsilon\\left[\\left(\\frac{\\sigma}{r}\\right)^{12}-\\left(\\frac{\\sigma}{r}\\right)^{6}\\right]$，其中 $\\varepsilon$（单位 $\\mathrm{eV}$）是势阱深度，$\\sigma$（单位 $\\mathrm{\\AA}$）是长度尺度。对于面心立方晶格，单位原子的静态能量为\n$$\nU(V)=\\frac{1}{2}\\sum_{j}\\phi(r_j)=2\\varepsilon\\left[S_{12}\\left(\\frac{\\sigma}{r_{\\mathrm{nn}}(V)}\\right)^{12}-S_{6}\\left(\\frac{\\sigma}{r_{\\mathrm{nn}}(V)}\\right)^{6}\\right],\n$$\n其中 $S_{6}=14.45392$ 和 $S_{12}=12.13188$ 是面心立方结构的无量纲晶格和，$r_{\\mathrm{nn}}(V)$ 是作为 $V$ 的函数的最近邻距离。对于面心立方，晶格常数为 $a(V)=(4V)^{1/3}$，最近邻距离为 $r_{\\mathrm{nn}}(V)=a(V)/\\sqrt{2}$。\n\n- 在德拜模型中，每个原子的振动亥姆霍兹自由能（包括零点能）为\n$$\nF_{\\mathrm{vib}}(T,V)=9k_{\\mathrm{B}}T\\left(\\frac{T}{\\Theta_{\\mathrm{D}}(V)}\\right)^{3}\\int_{0}^{\\Theta_{\\mathrm{D}}(V)/T}y^{2}\\ln\\left(1-e^{-y}\\right)\\,\\mathrm{d}y+\\frac{9}{8}k_{\\mathrm{B}}\\Theta_{\\mathrm{D}}(V),\n$$\n对于 $T>0$，在 $T=0$ 时简化为 $F_{\\mathrm{vib}}(0,V)=\\frac{9}{8}k_{\\mathrm{B}}\\Theta_{\\mathrm{D}}(V)$。这里 $k_{\\mathrm{B}}$ 是玻尔兹曼常数，单位为 $\\mathrm{eV/K}$，$\\Theta_{\\mathrm{D}}(V)$ 是德拜温度。假设体积依赖性为Grüneisen型，\n$$\n\\Theta_{\\mathrm{D}}(V)=\\Theta_{\\mathrm{D},0}\\left(\\frac{V}{V_{0}}\\right)^{-\\gamma},\n$$\n其中 $\\Theta_{\\mathrm{D},0}$ 是在 $T=0$ 静态晶格平衡单位原子体积 $V_{0}$ 处的德拜温度，$\\gamma$ 是（无量纲的）Grüneisen参数。\n\n- 每个温度下的平衡体积由条件 $\\frac{\\partial F(T,V)}{\\partial V}=0$ 在固定的 $T$（零外部压力）下获得，您必须通过在每个指定的 $T$ 下直接对 $F(T,V)$ 关于 $V$ 进行数值最小化来实现。\n\n- 热膨胀系数必须根据定义 $\\alpha(T)=\\frac{1}{V^{\\star}(T)}\\frac{\\mathrm{d}V^{\\star}(T)}{\\mathrm{d}T}$，使用温度的有限差分近似来计算。在可能的情况下，使用一个小的对称温度增量 $\\Delta T$。在一个温度网格点 $T_i$ 上，当 $T_i-\\Delta T$ 和 $T_i+\\Delta T$ 均为非负时，使用中心差分 $\\frac{V^{\\star}(T_i+\\Delta T)-V^{\\star}(T_i-\\Delta T)}{2\\Delta T}$；否则，使用步长为 $\\Delta T$ 的单边差分。\n\n常数和单位约定：\n\n- 使用 $k_{\\mathrm{B}}=8.617333262\\times 10^{-5}\\ \\mathrm{eV/K}$。\n- 所有能量必须以 $\\mathrm{eV}$ 为单位，体积以 $\\mathrm{\\AA}^3$ 为单位，温度以 $\\mathrm{K}$ 为单位。最终的 $\\alpha(T)$ 必须以 $\\mathrm{K}^{-1}$ 为单位。\n\n算法要求：\n\n- 对于每个测试用例，首先通过对 $U(V)$ 关于 $V$ 进行最小化来获得 $V_{0}$。\n- 然后，对于每个列出的温度 $T$，在一个围绕 $V_{0}$ 的物理上合理的区间内使用有界搜索，对 $F(T,V)$ 关于 $V$ 进行数值最小化。\n- 通过有限差分计算 $\\alpha(T)$，使用的温度增量 $\\Delta T$ 由您选择，但在解决方案中需给出理由，并在所有测试用例中保持一致的实现。\n- 将每个 $\\alpha(T)$ 值四舍五入并报告至八位小数。\n\n测试套件：\n\n为以下三个测试用例提供结果。每个案例由 $(\\varepsilon,\\sigma,\\Theta_{\\mathrm{D},0},\\gamma,\\{T\\ \\mathrm{grid}\\})$ 定义，其中 $\\varepsilon$ 的单位是 $\\mathrm{eV}$，$\\sigma$ 的单位是 $\\mathrm{\\AA}$，$\\Theta_{\\mathrm{D},0}$ 的单位是 $\\mathrm{K}$，$\\gamma$ 是无量纲的：\n\n- 案例 $1$：$(\\varepsilon, \\sigma, \\Theta_{\\mathrm{D},0}, \\gamma) = (0.0104, 3.405, 92, 2.0)$ 和温度 $\\{0, 50, 100, 200\\}$。\n- 案例 $2$：$(\\varepsilon, \\sigma, \\Theta_{\\mathrm{D},0}, \\gamma) = (0.0200, 2.800, 200, 1.5)$ 和温度 $\\{0, 300, 600, 900\\}$。\n- 案例 $3$：$(\\varepsilon, \\sigma, \\Theta_{\\mathrm{D},0}, \\gamma) = (0.0080, 3.000, 400, 0.5)$ 和温度 $\\{0, 100, 500, 1000\\}$。\n\n最终输出格式：\n\n您的程序应生成单行输出，其中包含一个列表的列表，第 $j$ 个子列表包含第 $j$ 个测试用例的 $\\alpha(T)$ 值，其顺序与为该案例指定的温度顺序相同，并四舍五入到八位小数。例如，输出必须看起来像\n\"[ [a11,a12,...], [a21,a22,...], [a31,a32,...] ]\"\n除了所示空格外没有多余空格，并且每个 $a_{ij}$ 是一个单位为 $\\mathrm{K}^{-1}$ 的十进制浮点数。", "solution": "所述问题是计算固态物理学中一个适定性良好的练习。它在科学上是合理的，依赖于标准和公认的模型：用于面心立方晶格中对相互作用的Lennard-Jones势，以及用于振动热力学的准谐振德拜模型。该问题是自洽的，提供了所有必需的物理参数、常数和数学公式。它是客观的，其要求可以算法化地形式化。因此，该问题被认为是有效的，并将构建一个完整的解决方案。\n\n方法论步骤如下。\n\n首先，我们确定单位原子的静态平衡体积， $V_0$，它对应于静态晶格在温度 $T=0\\,\\mathrm{K}$ 时能量最低的构型。该体积通过最小化静态晶格能 $U(V)$ 相对于 $V$ 来找到。$U(V)$ 的表达式为：\n$$\nU(V) = 2\\varepsilon\\left[S_{12}\\left(\\frac{\\sigma}{r_{\\mathrm{nn}}(V)}\\right)^{12}-S_{6}\\left(\\frac{\\sigma}{r_{\\mathrm{nn}}(V)}\\right)^{6}\\right]\n$$\n对于面心立方晶格，最近邻距离 $r_{\\mathrm{nn}}(V)$ 与单位原子体积 $V$ 的关系为 $r_{\\mathrm{nn}}(V)^6 = 2V^2$。将此代入能量表达式可得：\n$$\nU(V) = 2\\varepsilon\\left[S_{12}\\frac{\\sigma^{12}}{4V^4} - S_{6}\\frac{\\sigma^{6}}{2V^2}\\right]\n$$\n能量最小的条件是 $\\frac{\\mathrm{d}U}{\\mathrm{d}V} = 0$。对 $V$ 求导并求解可得到 $V_0$ 的解析表达式：\n$$\n\\frac{\\mathrm{d}U}{\\mathrm{d}V} = 2\\varepsilon \\left[ -S_{12}\\frac{\\sigma^{12}}{V^5} + S_{6}\\frac{\\sigma^{6}}{V^3} \\right] = 0\n$$\n这意味着 $S_{6}\\sigma^{6}V^{-3} = S_{12}\\sigma^{12}V^{-5}$，从而得出：\n$$\nV_0^2 = \\frac{S_{12}}{S_6}\\sigma^6 \\implies V_0 = \\sigma^3 \\sqrt{\\frac{S_{12}}{S_6}}\n$$\n这个 $V_0$ 值作为德拜温度的Grüneisen模型的参考体积。\n\n其次，我们将单位原子的总亥姆霍兹自由能 $F(T,V)$ 公式化为静态能量 $U(V)$ 和振动自由能 $F_{\\mathrm{vib}}(T,V)$ 的和：\n$$\nF(T,V) = U(V) + F_{\\mathrm{vib}}(T,V)\n$$\n在德拜模型中，振动贡献由以下公式给出：\n$$\nF_{\\mathrm{vib}}(T,V)=9k_{\\mathrm{B}}T\\left(\\frac{T}{\\Theta_{\\mathrm{D}}(V)}\\right)^{3}\\int_{0}^{\\Theta_{\\mathrm{D}}(V)/T}y^{2}\\ln\\left(1-e^{-y}\\right)\\,\\mathrm{d}y+\\frac{9}{8}k_{\\mathrm{B}}\\Theta_{\\mathrm{D}}(V)\n$$\n这里，$k_{\\mathrm{B}}=8.617333262\\times 10^{-5}\\ \\mathrm{eV/K}$ 是玻尔兹曼常数，德拜温度 $\\Theta_{\\mathrm{D}}(V)$ 由Grüneisen关系式 $\\Theta_{\\mathrm{D}}(V)=\\Theta_{\\mathrm{D},0}\\left(V/V_{0}\\right)^{-\\gamma}$ 给出。该积分是与德拜函数相关的标准形式，必须进行数值计算。对于 $T=0\\,\\mathrm{K}$ 的情况，表达式简化为零点能贡献，$F_{\\mathrm{vib}}(0,V) = \\frac{9}{8}k_{\\mathrm{B}}\\Theta_{\\mathrm{D}}(V)$。\n\n第三，对于测试套件中每个指定的温度 $T_i$，通过对总亥姆霍兹自由能 $F(T_i,V)$ 相对于 $V$ 进行数值最小化，可以找到相应的平衡体积 $V^{\\star}(T_i)$。这种最小化代表了零外部压力的物理条件。我们采用有界标量优化算法（Brent方法），在一个物理上合理的区间（例如 $[0.8V_0, 1.5V_0]$）内进行搜索，以稳健地找到最小值。\n\n第四，体热膨胀系数 $\\alpha(T)$ 是使用问题陈述中指定的有限差分近似计算的：\n$$\n\\alpha(T) = \\frac{1}{V^{\\star}(T)}\\frac{\\mathrm{d}V^{\\star}(T)}{\\mathrm{d}T}\n$$\n在任何 $T_i-\\Delta T$ 为非负的温度 $T_i$ 处，导数 $\\frac{\\mathrm{d}V^{\\star}}{\\mathrm{d}T}$ 使用对称中心差分 $\\frac{V^{\\star}(T_i+\\Delta T)-V^{\\star}(T_i-\\Delta T)}{2\\Delta T}$ 来近似。对于 $T_i=0\\,\\mathrm{K}$ 的特定情况，使用单边前向差分 $\\frac{V^{\\star}(T_i+\\Delta T)-V^{\\star}(T_i)}{\\Delta T}$。对于这些计算，选择的温度增量为 $\\Delta T = 1.0\\,\\mathrm{K}$。相对于温度网格，这个值足够小，可以提供导数的精确近似，同时又足够大，可以避免显著的浮点抵消误差。\n\n该实现将此逻辑封装在一个程序中，该程序遍历每个测试用例。为了优化计算，计算出的 $V^{\\star}(T)$ 值被缓存，因为在相邻温度点计算导数时可能需要它们。最终计算出的 $\\alpha(T)$ 值按照要求四舍五入到八位小数。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy import integrate, optimize\n\ndef solve():\n    \"\"\"\n    Main function to solve the problem for the given test cases.\n    It computes the coefficient of thermal expansion for a solid modeled with\n    a Lennard-Jones potential and the quasiharmonic Debye model.\n    \"\"\"\n\n    # Physical and model constants\n    KB = 8.617333262e-5  # Boltzmann constant in eV/K\n    S6 = 14.45392          # Lattice sum for r^-6 term\n    S12 = 12.13188         # Lattice sum for r^-12 term\n\n    class ThermalExpansionCalculator:\n        \"\"\"\n        A class to encapsulate the calculations for a single set of material parameters.\n        \"\"\"\n        def __init__(self, epsilon, sigma, theta_d0, gamma):\n            self.epsilon = epsilon\n            self.sigma = sigma\n            self.theta_d0 = theta_d0\n            self.gamma = gamma\n\n            # Analytically calculate V0, the static equilibrium volume at T=0K\n            self.v0 = self.sigma**3 * np.sqrt(S12 / S6)\n            \n            # Memoization cache for storing computed equilibrium volumes V*(T)\n            self.v_star_cache = {}\n\n        def U(self, V):\n            \"\"\"Static lattice energy per atom U(V).\"\"\"\n            if V <= 0:\n                return np.inf\n            # Expression derived from U(r_nn) and r_nn^6(V) = 2V^2\n            term_12 = S12 * (self.sigma**12) / (4 * V**4)\n            term_6 = S6 * (self.sigma**6) / (2 * V**2)\n            return 2 * self.epsilon * (term_12 - term_6)\n\n        def theta_d(self, V):\n            \"\"\"Debye temperature as a function of volume V.\"\"\"\n            return self.theta_d0 * (V / self.v0)**(-self.gamma)\n\n        @staticmethod\n        def _debye_integrand(y):\n            \"\"\"Integrand for the Debye model's thermal energy term.\"\"\"\n            if y == 0:\n                return 0.0\n            # Use approximation for large y to avoid overflow in exp(-y)\n            # and subsequent log(1), which is safe but can be slow.\n            if y > 700:\n                return -y**2 * np.exp(-y)\n            return y**2 * np.log(1 - np.exp(-y))\n\n        def F_vib(self, T, V):\n            \"\"\"Vibrational Helmholtz free energy per atom F_vib(T, V).\"\"\"\n            if V <= 0:\n                return np.inf\n            \n            theta = self.theta_d(V)\n            # Zero-point energy (ZPE)\n            zpe = (9.0 / 8.0) * KB * theta\n\n            # For T=0, only ZPE contributes\n            if T < 1e-9:\n                return zpe\n\n            integral_limit = theta / T\n            integral_val, _ = integrate.quad(self._debye_integrand, 0, integral_limit, epsabs=1e-12, epsrel=1e-12)\n            \n            thermal_term = 9 * KB * T * (T / theta)**3 * integral_val\n            \n            return thermal_term + zpe\n\n        def F_total(self, T, V):\n            \"\"\"Total Helmholtz free energy per atom F(T, V).\"\"\"\n            return self.U(V) + self.F_vib(T, V)\n\n        def get_V_star(self, T):\n            \"\"\"\n            Calculates and caches the equilibrium volume V*(T) by minimizing F(T, V).\n            \"\"\"\n            # Use a tuple for the key because floats can be tricky\n            temp_key = round(T, 6)\n            if temp_key in self.v_star_cache:\n                return self.v_star_cache[temp_key]\n\n            f_to_minimize = lambda v: self.F_total(T, v)\n\n            # Search for the minimum in a physically reasonable range around V0\n            bounds = (0.8 * self.v0, 1.5 * self.v0)\n            \n            result = optimize.minimize_scalar(f_to_minimize, bounds=bounds, method='bounded')\n            \n            v_eq = result.x\n            self.v_star_cache[temp_key] = v_eq\n            return v_eq\n\n        def calculate_alpha_for_grid(self, T_grid, delta_T=1.0):\n            \"\"\"\n            Calculates the thermal expansion coefficient alpha(T) for a grid of temperatures.\n            \"\"\"\n            alphas = []\n            for T in T_grid:\n                V_star_T = self.get_V_star(T)\n                \n                # Use a one-sided (forward) difference if T < delta_T (covers T=0)\n                if T < delta_T:\n                    V_star_plus_dT = self.get_V_star(T + delta_T)\n                    dV_dT = (V_star_plus_dT - V_star_T) / delta_T\n                else:  # Use a central difference for all other temperatures\n                    V_star_plus_dT = self.get_V_star(T + delta_T)\n                    V_star_minus_dT = self.get_V_star(T - delta_T)\n                    dV_dT = (V_star_plus_dT - V_star_minus_dT) / (2.0 * delta_T)\n                    \n                alpha = (1.0 / V_star_T) * dV_dT\n                alphas.append(alpha)\n            \n            return alphas\n\n    # Define the test cases from the problem statement.\n    test_cases = [\n        {\"params\": (0.0104, 3.405, 92, 2.0), \"T_grid\": [0.0, 50.0, 100.0, 200.0]},\n        {\"params\": (0.0200, 2.800, 200, 1.5), \"T_grid\": [0.0, 300.0, 600.0, 900.0]},\n        {\"params\": (0.0080, 3.000, 400, 0.5), \"T_grid\": [0.0, 100.0, 500.0, 1000.0]},\n    ]\n    \n    all_results = []\n    \n    for case in test_cases:\n        epsilon, sigma, theta_d0, gamma = case[\"params\"]\n        T_grid = case[\"T_grid\"]\n        \n        calculator = ThermalExpansionCalculator(epsilon, sigma, theta_d0, gamma)\n        alphas = calculator.calculate_alpha_for_grid(T_grid)\n        \n        all_results.append(alphas)\n\n    # Format the final output string exactly as specified.\n    sublist_strings = []\n    for sublist in all_results:\n        # Round each value to 8 decimal places and format to string\n        formatted_sublist = \"[\" + \",\".join([f\"{x:.8f}\" for x in sublist]) + \"]\"\n        sublist_strings.append(formatted_sublist)\n        \n    final_output = \"[\" + \", \".join(sublist_strings) + \"]\"\n    print(final_output)\n\nsolve()\n```", "id": "2924969"}]}