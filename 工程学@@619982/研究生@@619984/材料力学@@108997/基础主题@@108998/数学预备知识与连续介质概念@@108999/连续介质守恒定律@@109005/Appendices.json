{"hands_on_practices": [{"introduction": "本节的第一个练习将深入探讨作为连续介质力学基石的质量守恒定律。我们将超越简单的公式，通过具体的变形过程来观察它如何将初始构型（拉格朗日）和当前构型（欧拉）中的质量密度联系起来。通过这个练习，你将通过一个非均匀物体变形的具体例子，熟练运用 $\\rho_0(\\mathbf{X}) = J \\rho(\\mathbf{x}, t)$ 这一关系 [@problem_id:2871720]。", "problem": "一个可压缩连续体在时间 $t=0$ 时占据参考构型 $\\mathcal{B}_0=\\{ \\mathbf{X}=(X_1,X_2,X_3) \\mid 0 \\le X_1 \\le L_1,\\ 0 \\le X_2 \\le L_2,\\ 0 \\le X_3 \\le L_3 \\}$，并具有给定的参考质量密度场\n$$\n\\rho_0(\\mathbf{X}) = \\rho_{00}\\left[ 1 + \\eta \\frac{X_1}{L_1}\\frac{X_2}{L_2}\\exp\\!\\left(-\\frac{X_3}{L_3}\\right)\\right],\n$$\n其中 $\\rho_{00}>0$，$L_1>0$，$L_2>0$，$L_3>0$ 和 $\\eta>-1$ 是常数。其运动由一个光滑、一对一的变形映射 $\\boldsymbol{\\chi}:\\mathcal{B}_0\\times[0,T]\\to\\mathbb{R}^3$ 给出，形式如下\n$$\n\\begin{aligned}\nx_1 &= (1+\\alpha t)\\,X_1,\\\\\nx_2 &= (1+\\beta t^2)\\,X_2,\\\\\nx_3 &= (1+\\gamma t)\\,X_3 + \\delta t\\,X_1 X_2,\n\\end{aligned}\n$$\n其中 $\\alpha,\\beta,\\gamma,\\delta$ 是实常数，且 $t$ 满足 $1+\\alpha t>0$，$1+\\beta t^2>0$ 和 $1+\\gamma t>0$。对于该运动，变形梯度是下三角矩阵，其雅可比行列式为\n$$\nJ(\\mathbf{X},t) = (1+\\alpha t)(1+\\beta t^2)(1+\\gamma t).\n$$\n\n仅使用连续体的质量守恒和基本运动学，推导出当前质量密度场 $\\rho(\\mathbf{x},t)$ 作为 $(\\mathbf{x},t)$ 和给定数据的闭合形式函数。然后通过计算物体在时间 $t$ 的总质量 $M(t)$ 来验证总质量守恒，并证明其不依赖于 $t$，同时确定其以给定常数表示的值。\n\n请将你的最终答案以 $\\rho(\\mathbf{x},t)$ 的显式符号表达式的形式给出，单位为千克/立方米 (kg/m$^3$)。无需进行数值取整。质量守恒的验证和 $M(t)$ 的表达式应出现在您的解题过程中，但最终的方框答案应仅包含 $\\rho(\\mathbf{x},t)$ 的表达式。", "solution": "问题陈述已经过评估并被确定为有效。这是连续介质力学中的一个适定问题，没有科学或逻辑上的缺陷，并且为其求解提供了所有必要的信息。\n\n控制质量分布的基本原理是质量守恒定律。在物质描述中，该定律的形式为\n$$\n\\rho_0(\\mathbf{X}) = J(\\mathbf{X}, t) \\rho(\\boldsymbol{\\chi}(\\mathbf{X}, t), t)\n$$\n其中 $\\rho_0(\\mathbf{X})$ 是参考构型 $\\mathcal{B}_0$ 中的质量密度，$\\rho(\\mathbf{x}, t)$ 是当前构型 $\\mathcal{B}_t$ 中的质量密度，$\\boldsymbol{\\chi}$ 是从 $\\mathcal{B}_0$ 到 $\\mathcal{B}_t$ 的变形映射，使得 $\\mathbf{x} = \\boldsymbol{\\chi}(\\mathbf{X}, t)$，并且 $J = \\det(\\mathbf{F})$ 是变形梯度 $\\mathbf{F} = \\nabla_{\\mathbf{X}}\\boldsymbol{\\chi}$ 的行列式。\n\n问题要求我们将 $\\rho$ 表示为空间坐标 $\\mathbf{x} = (x_1, x_2, x_3)$ 和时间 $t$ 的显式函数。为此，我们首先重排质量守恒方程，以求解当前密度 $\\rho$：\n$$\n\\rho(\\mathbf{x}, t) = \\frac{\\rho_0(\\mathbf{X}(\\mathbf{x}, t))}{J(\\mathbf{X}(\\mathbf{x}, t), t)}\n$$\n这个表达式表明，我们必须将物质坐标 $\\mathbf{X}$ 和雅可比行列式 $J$ 用空间坐标 $\\mathbf{x}$ 和时间 $t$ 来表示。\n\n问题给出了雅可比行列式仅作为时间的函数：\n$$\nJ(t) = (1+\\alpha t)(1+\\beta t^2)(1+\\gamma t)\n$$\n这与从给定运动推导出的变形梯度 $\\mathbf{F}$（其中 $F_{ij} = \\frac{\\partial x_i}{\\partial X_j}$）的行列式计算结果一致：\n$$\n\\mathbf{F} = \\begin{pmatrix} 1+\\alpha t & 0 & 0 \\\\ 0 & 1+\\beta t^2 & 0 \\\\ \\delta t X_2 & \\delta t X_1 & 1+\\gamma t \\end{pmatrix}\n$$\n行列式确实为 $\\det(\\mathbf{F}) = (1+\\alpha t)(1+\\beta t^2)(1+\\gamma t)$，正如所给定的，它在空间上是均匀的。\n\n接下来，我们通过求解运动方程中的 $X_1, X_2, X_3$ 来找到逆映射 $\\mathbf{X} = \\boldsymbol{\\chi}^{-1}(\\mathbf{x}, t)$：\n从 $x_1 = (1+\\alpha t)X_1$，我们得到：\n$$\nX_1 = \\frac{x_1}{1+\\alpha t}\n$$\n从 $x_2 = (1+\\beta t^2)X_2$，我们得到：\n$$\nX_2 = \\frac{x_2}{1+\\beta t^2}\n$$\n从 $x_3 = (1+\\gamma t)X_3 + \\delta t X_1 X_2$，我们代入 $X_1$ 和 $X_2$ 的表达式来求解 $X_3$：\n$$\nx_3 = (1+\\gamma t)X_3 + \\delta t \\left(\\frac{x_1}{1+\\alpha t}\\right) \\left(\\frac{x_2}{1+\\beta t^2}\\right)\n$$\n$$\n(1+\\gamma t)X_3 = x_3 - \\frac{\\delta t x_1 x_2}{(1+\\alpha t)(1+\\beta t^2)}\n$$\n$$\nX_3 = \\frac{1}{1+\\gamma t}\\left(x_3 - \\frac{\\delta t x_1 x_2}{(1+\\alpha t)(1+\\beta t^2)}\\right)\n$$\n现在我们得到了完整的逆映射 $\\mathbf{X}(\\mathbf{x}, t)$。\n\n参考密度由下式给出：\n$$\n\\rho_0(\\mathbf{X}) = \\rho_{00}\\left[ 1 + \\eta \\frac{X_1}{L_1}\\frac{X_2}{L_2}\\exp\\left(-\\frac{X_3}{L_3}\\right)\\right]\n$$\n我们将 $X_1, X_2, X_3$ 的表达式代入此方程，得到 $\\rho_0(\\mathbf{X}(\\mathbf{x}, t))$：\n\\begin{align*}\n\\rho_0(\\mathbf{X}(\\mathbf{x}, t)) &= \\rho_{00}\\left[ 1 + \\eta \\frac{1}{L_1}\\left(\\frac{x_1}{1+\\alpha t}\\right)\\frac{1}{L_2}\\left(\\frac{x_2}{1+\\beta t^2}\\right) \\times \\right. \\\\\n&\\quad \\left. \\exp\\left(-\\frac{1}{L_3} \\left( \\frac{1}{1+\\gamma t}\\left(x_3 - \\frac{\\delta t x_1 x_2}{(1+\\alpha t)(1+\\beta t^2)}\\right) \\right) \\right) \\right]\n\\end{align*}\n最后，我们除以雅可比行列式 $J(t)$ 来求得当前密度 $\\rho(\\mathbf{x}, t)$：\n$$\n\\rho(\\mathbf{x},t) = \\frac{\\rho_{00}}{(1+\\alpha t)(1+\\beta t^2)(1+\\gamma t)}\\left[ 1 + \\frac{\\eta x_1 x_2}{L_1 L_2 (1+\\alpha t)(1+\\beta t^2)} \\exp\\left(-\\frac{1}{L_3(1+\\gamma t)}\\left(x_3 - \\frac{\\delta t x_1 x_2}{(1+\\alpha t)(1+\\beta t^2)}\\right)\\right)\\right]\n$$\n这是当前质量密度场的闭合形式表达式。\n\n为验证总质量守恒，我们计算当前构型 $\\mathcal{B}_t$ 中的总质量 $M(t)$：\n$$\nM(t) = \\int_{\\mathcal{B}_t} \\rho(\\mathbf{x}, t) \\, dV_{\\mathbf{x}}\n$$\n通过将积分变量更改为物质坐标 $\\mathbf{X}$，其中 $dV_{\\mathbf{x}} = J \\, dV_{\\mathbf{X}}$，积分变为：\n$$\nM(t) = \\int_{\\mathcal{B}_0} \\rho(\\boldsymbol{\\chi}(\\mathbf{X}, t), t) J(\\mathbf{X}, t) \\, dV_{\\mathbf{X}}\n$$\n使用质量守恒原理 $\\rho J = \\rho_0$，这可简化为：\n$$\nM(t) = \\int_{\\mathcal{B}_0} \\rho_0(\\mathbf{X}) \\, dV_{\\mathbf{X}} = M_0\n$$\n这表明总质量 $M(t)$ 是恒定的，等于初始质量 $M_0$。我们现在通过在参考体积 $\\mathcal{B}_0$ 上对 $\\rho_0(\\mathbf{X})$ 进行积分来计算这个值：\n$$\nM_0 = \\int_{0}^{L_3} \\int_{0}^{L_2} \\int_{0}^{L_1} \\rho_{00}\\left[ 1 + \\eta \\frac{X_1}{L_1}\\frac{X_2}{L_2}\\exp\\left(-\\frac{X_3}{L_3}\\right)\\right] \\, dX_1 dX_2 dX_3\n$$\n我们将积分分为两部分：\n$$\nM_0 = \\rho_{00} \\int_{0}^{L_3} \\int_{0}^{L_2} \\int_{0}^{L_1} dX_1 dX_2 dX_3 + \\rho_{00}\\eta \\int_{0}^{L_3} \\int_{0}^{L_2} \\int_{0}^{L_1} \\frac{X_1}{L_1}\\frac{X_2}{L_2}\\exp\\left(-\\frac{X_3}{L_3}\\right) \\, dX_1 dX_2 dX_3\n$$\n第一个积分是物体的体积乘以 $\\rho_{00}$：\n$$\n\\rho_{00} (L_1 L_2 L_3)\n$$\n第二个积分可以分离为三个一维积分的乘积：\n$$\n\\frac{\\rho_{00}\\eta}{L_1 L_2} \\left(\\int_0^{L_1} X_1 dX_1\\right) \\left(\\int_0^{L_2} X_2 dX_2\\right) \\left(\\int_0^{L_3} \\exp\\left(-\\frac{X_3}{L_3}\\right) dX_3\\right)\n$$\n计算每个积分：\n$$\n\\int_0^{L_1} X_1 dX_1 = \\left[\\frac{X_1^2}{2}\\right]_0^{L_1} = \\frac{L_1^2}{2}\n$$\n$$\n\\int_0^{L_2} X_2 dX_2 = \\left[\\frac{X_2^2}{2}\\right]_0^{L_2} = \\frac{L_2^2}{2}\n$$\n$$\n\\int_0^{L_3} \\exp\\left(-\\frac{X_3}{L_3}\\right) dX_3 = \\left[-L_3 \\exp\\left(-\\frac{X_3}{L_3}\\right)\\right]_0^{L_3} = -L_3(\\exp(-1) - \\exp(0)) = L_3(1 - \\exp(-1))\n$$\n将这些结果代回第二部分的表达式中：\n$$\n\\frac{\\rho_{00}\\eta}{L_1 L_2} \\left(\\frac{L_1^2}{2}\\right) \\left(\\frac{L_2^2}{2}\\right) \\left(L_3(1 - \\exp(-1))\\right) = \\rho_{00}\\eta \\frac{L_1 L_2 L_3}{4} (1 - \\exp(-1))\n$$\n因此，总质量 $M_0$ 为：\n$$\nM(t) = M_0 = \\rho_{00} L_1 L_2 L_3 + \\rho_{00}\\eta \\frac{L_1 L_2 L_3}{4} (1 - \\exp(-1)) = \\rho_{00} L_1 L_2 L_3 \\left[1 + \\frac{\\eta}{4}\\left(1 - \\exp(-1)\\right)\\right]\n$$\n由于该值不依赖于时间 $t$，总质量守恒得到验证。", "answer": "$$\n\\boxed{\\frac{\\rho_{00}}{(1+\\alpha t)(1+\\beta t^2)(1+\\gamma t)}\\left[ 1 + \\frac{\\eta x_1 x_2}{L_1 L_2 (1+\\alpha t)(1+\\beta t^2)} \\exp\\left(-\\frac{1}{L_3(1+\\gamma t)}\\left(x_3 - \\frac{\\delta t x_1 x_2}{(1+\\alpha t)(1+\\beta t^2)}\\right)\\right)\\right]}\n$$", "id": "2871720"}, {"introduction": "在线性动量守恒的概念基础上，我们转向其一个直接的推论：柯西应力张量($\\boldsymbol{\\sigma}$)的存在，它描述了某一点的内力状态。本问题提供了一个核心实践，让你运用此张量来计算作用在材料内任意给定平面上的真实面力矢量 $\\mathbf{t}$，并将其分解为具有清晰物理意义的正应力与剪应力分量 [@problem_id:2871778]。", "problem": "在一体积力偶可忽略的均匀、静态连续介质中的一个物质点上，相对于固定的笛卡尔基 $\\{\\mathbf{e}_{1},\\mathbf{e}_{2},\\mathbf{e}_{3}\\}$ 的柯西应力张量（单位为兆帕（MPa））为\n$$\n\\boldsymbol{\\sigma} \\;=\\;\n\\begin{pmatrix}\n80 & 30 & -20 \\\\\n30 & 50 & 10 \\\\\n-20 & 10 & 100\n\\end{pmatrix} \\;\\text{MPa}.\n$$\n考虑通过该点的一个平面，其单位法向量为\n$$\n\\mathbf{n} \\;=\\; \\left(\\frac{2}{3}\\right)\\mathbf{e}_{1} \\;-\\; \\left(\\frac{1}{3}\\right)\\mathbf{e}_{2} \\;+\\; \\left(\\frac{2}{3}\\right)\\mathbf{e}_{3}.\n$$\n从连续介质的线性动量守恒和角动量守恒出发，推导作用在定向平面上的面力矢量与应力张量之间的关系。然后，对于给定的 $\\boldsymbol{\\sigma}$ 和 $\\mathbf{n}$，计算作用在该平面上的面力矢量 $\\mathbf{t}$。将 $\\mathbf{t}$ 分解为其法向分量 $\\mathbf{t}_{n}$（平行于 $\\mathbf{n}$）和其剪切分量 $\\mathbf{t}_{s}$（与平面相切），并简要解释法向分量符号的物理意义。最后，以 MPa 为单位，给出一个精确值作为剪切面力的大小 $\\|\\mathbf{t}_{s}\\|$。以 MPa 为单位表示最终结果，要求精确值（不进行四舍五入）。最终答案中不要包含任何单位。", "solution": "所提出的问题已经过验证，是有效的。这是一个在连续介质力学领域内提法得当、有科学依据的问题，数据完整且一致。我们可以进行求解。\n\n该问题要求从连续介质的基本守恒定律推导柯西应力关系，然后将其应用于一个特定的应力状态。\n\n首先，我们推导面力矢量 $\\mathbf{t}$ 与柯西应力张量 $\\boldsymbol{\\sigma}$ 之间的关系。这个关系是线性动量守恒的直接推论。对于一个没有体积力的静态连续介质（或者为了简化，对于一个体积无限小，体积力是高阶项的微元体），其线性动量守恒的积分形式对于任意体积 $V$ 及其边界面 $\\partial V$ 表明，作用在物体上的合力为零：\n$$\n\\int_{\\partial V} \\mathbf{t} \\, dA = \\mathbf{0}\n$$\n这里，$\\mathbf{t}$ 是表面 $\\partial V$ 上的面力矢量场。某一点的面力 $\\mathbf{t}$ 取决于该点处表面的方向，该方向由其单位法向量 $\\mathbf{n}$ 指定。我们将这种依赖关系表示为 $\\mathbf{t}(\\mathbf{n})$。\n\n考虑在所研究的物质点处取一个小的四面体，其三个面位于与笛卡尔基向量 $\\{\\mathbf{e}_{1}, \\mathbf{e}_{2}, \\mathbf{e}_{3}\\}$ 正交的平面上，第四个面具有任意单位法向量 $\\mathbf{n}$。设第四个面的面积为 $dA$。其他三个面的面积为 $dA_j = (\\mathbf{n} \\cdot \\mathbf{e}_j) dA = n_j dA$，$j=1, 2, 3$。这三个面的外法线单位向量分别是 $-\\mathbf{e}_1$, $-\\mathbf{e}_2$, 和 $-\\mathbf{e}_3$。\n\n对这个四面体应用线性动量守恒，得到：\n$$\n\\mathbf{t}(\\mathbf{n}) dA + \\mathbf{t}(-\\mathbf{e}_1) dA_1 + \\mathbf{t}(-\\mathbf{e}_2) dA_2 + \\mathbf{t}(-\\mathbf{e}_3) dA_3 + (\\text{body forces}) = \\mathbf{0}\n$$\n柯西公设指出 $\\mathbf{t}(-\\mathbf{n}) = -\\mathbf{t}(\\mathbf{n})$。应用此公设，我们有 $\\mathbf{t}(-\\mathbf{e}_j) = -\\mathbf{t}(\\mathbf{e}_j)$。法向量为 $\\mathbf{e}_j$ 的表面上的面力矢量被定义为应力张量的第 $j$ 列，记为 $\\boldsymbol{\\sigma}_j$。因此，$\\mathbf{t}(\\mathbf{e}_j) = \\boldsymbol{\\sigma}_j$。\n将这些代入动量方程并使用 $dA_j = n_j dA$：\n$$\n\\mathbf{t}(\\mathbf{n}) dA - \\boldsymbol{\\sigma}_1 (n_1 dA) - \\boldsymbol{\\sigma}_2 (n_2 dA) - \\boldsymbol{\\sigma}_3 (n_3 dA) + (\\text{body forces}) = \\mathbf{0}\n$$\n体力项与四面体的体积成正比，其数量级为 $h^3$（其中 $h$ 是一个特征长度），而面力与面积成正比，数量级为 $h^2$。方程两边同除以 $dA$，并在四面体收缩到一点的极限下（$h \\to 0$），体力项消失。剩下：\n$$\n\\mathbf{t}(\\mathbf{n}) = n_1 \\boldsymbol{\\sigma}_1 + n_2 \\boldsymbol{\\sigma}_2 + n_3 \\boldsymbol{\\sigma}_3\n$$\n这可以写成分量形式。设 $\\mathbf{t} = t_i \\mathbf{e}_i$ 和 $\\boldsymbol{\\sigma}_j = \\sigma_{ij} \\mathbf{e}_i$。那么：\n$$\nt_i = n_1 \\sigma_{i1} + n_2 \\sigma_{i2} + n_3 \\sigma_{i3} = \\sum_{j=1}^{3} \\sigma_{ij} n_j\n$$\n这是矩阵-向量乘积的分量形式，被称为柯西应力关系：\n$$\n\\mathbf{t} = \\boldsymbol{\\sigma} \\mathbf{n}\n$$\n对于体力偶可忽略的连续介质，角动量守恒导出的结论是柯西应力张量必须是对称的，即 $\\boldsymbol{\\sigma} = \\boldsymbol{\\sigma}^T$。给定的应力张量确实是对称的。\n\n现在，我们根据给定的应力张量 $\\boldsymbol{\\sigma}$ 和法向量 $\\mathbf{n}$ 计算面力矢量 $\\mathbf{t}$。应力张量和法向量的分量为：\n$$\n\\boldsymbol{\\sigma} = \\begin{pmatrix} 80 & 30 & -20 \\\\ 30 & 50 & 10 \\\\ -20 & 10 & 100 \\end{pmatrix} \\;\\text{MPa} \\quad \\text{and} \\quad \\mathbf{n} = \\frac{1}{3} \\begin{pmatrix} 2 \\\\ -1 \\\\ 2 \\end{pmatrix}\n$$\n我们计算 $\\mathbf{t} = \\boldsymbol{\\sigma} \\mathbf{n}$：\n$$\n\\mathbf{t} = \\frac{1}{3} \\begin{pmatrix} 80 & 30 & -20 \\\\ 30 & 50 & 10 \\\\ -20 & 10 & 100 \\end{pmatrix} \\begin{pmatrix} 2 \\\\ -1 \\\\ 2 \\end{pmatrix} = \\frac{1}{3} \\begin{pmatrix} 80(2) + 30(-1) - 20(2) \\\\ 30(2) + 50(-1) + 10(2) \\\\ -20(2) + 10(-1) + 100(2) \\end{pmatrix}\n$$\n$$\n\\mathbf{t} = \\frac{1}{3} \\begin{pmatrix} 160 - 30 - 40 \\\\ 60 - 50 + 20 \\\\ -40 - 10 + 200 \\end{pmatrix} = \\frac{1}{3} \\begin{pmatrix} 90 \\\\ 30 \\\\ 150 \\end{pmatrix} = \\begin{pmatrix} 30 \\\\ 10 \\\\ 50 \\end{pmatrix} \\;\\text{MPa}\n$$\n所以，$\\mathbf{t} = 30\\mathbf{e}_1 + 10\\mathbf{e}_2 + 50\\mathbf{e}_3$ MPa。\n\n接下来，我们将 $\\mathbf{t}$ 分解为法向分量 $\\mathbf{t}_n$ 和剪切分量 $\\mathbf{t}_s$。法向分量是 $\\mathbf{t}$ 在 $\\mathbf{n}$ 方向上的投影。其大小为法向应力 $\\sigma_n$。\n$$\n\\sigma_n = \\mathbf{t} \\cdot \\mathbf{n} = \\begin{pmatrix} 30 \\\\ 10 \\\\ 50 \\end{pmatrix} \\cdot \\left(\\frac{1}{3} \\begin{pmatrix} 2 \\\\ -1 \\\\ 2 \\end{pmatrix}\\right) = \\frac{1}{3} (30(2) + 10(-1) + 50(2)) = \\frac{1}{3} (60 - 10 + 100) = \\frac{150}{3} = 50 \\;\\text{MPa}\n$$\n法向面力矢量为 $\\mathbf{t}_n = \\sigma_n \\mathbf{n}$：\n$$\n\\mathbf{t}_n = 50 \\left(\\frac{1}{3} \\begin{pmatrix} 2 \\\\ -1 \\\\ 2 \\end{pmatrix}\\right) = \\frac{1}{3} \\begin{pmatrix} 100 \\\\ -50 \\\\ 100 \\end{pmatrix} \\;\\text{MPa}\n$$\n法向分量 $\\sigma_n = +50$ MPa 符号的物理意义是应力为拉伸应力。正号表示面力矢量的法向分量与外法线 $\\mathbf{n}$ 方向相同，意味着平面两侧的材料正在被拉开。\n\n剪切分量 $\\mathbf{t}_s$ 是 $\\mathbf{t}$ 在平面上的切向分量。它由 $\\mathbf{t}_s = \\mathbf{t} - \\mathbf{t}_n$ 给出：\n$$\n\\mathbf{t}_s = \\begin{pmatrix} 30 \\\\ 10 \\\\ 50 \\end{pmatrix} - \\frac{1}{3} \\begin{pmatrix} 100 \\\\ -50 \\\\ 100 \\end{pmatrix} = \\begin{pmatrix} 90/3 - 100/3 \\\\ 30/3 + 50/3 \\\\ 150/3 - 100/3 \\end{pmatrix} = \\frac{1}{3} \\begin{pmatrix} -10 \\\\ 80 \\\\ 50 \\end{pmatrix} \\;\\text{MPa}\n$$\n最后，我们计算剪切面力的大小 $\\|\\mathbf{t}_s\\|$：\n$$\n\\|\\mathbf{t}_s\\|^2 = (\\mathbf{t}_s \\cdot \\mathbf{t}_s) = \\left(\\frac{1}{3}\\right)^2 ((-10)^2 + 80^2 + 50^2) = \\frac{1}{9}(100 + 6400 + 2500) = \\frac{9000}{9} = 1000\n$$\n$$\n\\|\\mathbf{t}_s\\| = \\sqrt{1000} = \\sqrt{100 \\times 10} = 10\\sqrt{10} \\;\\text{MPa}\n$$\n或者，使用正交分解 $\\mathbf{t} = \\mathbf{t}_n + \\mathbf{t}_s$，我们有 $\\|\\mathbf{t}\\|^2 = \\|\\mathbf{t}_n\\|^2 + \\|\\mathbf{t}_s\\|^2$。\n$$\n\\|\\mathbf{t}\\|^2 = 30^2 + 10^2 + 50^2 = 900 + 100 + 2500 = 3500\n$$\n$$\n\\|\\mathbf{t}_n\\|^2 = \\sigma_n^2 = 50^2 = 2500\n$$\n$$\n\\|\\mathbf{t}_s\\|^2 = \\|\\mathbf{t}\\|^2 - \\|\\mathbf{t}_n\\|^2 = 3500 - 2500 = 1000\n$$\n$$\n\\|\\mathbf{t}_s\\| = \\sqrt{1000} = 10\\sqrt{10}\n$$\n结果是一致的。剪切面力的大小为 $10\\sqrt{10}$ MPa。", "answer": "$$\\boxed{10\\sqrt{10}}$$", "id": "2871778"}, {"introduction": "我们最后的练习将弥合动量平衡的抽象理论与现代计算力学之间的鸿沟。我们将应用平衡方程的弱形式（或变分形式），这是有限元方法 (FEM) 的基础。通过构建代表每个节点上净作用力的残差向量，这个练习将挑战你实现有限元分析的核心步骤，从而将守恒定律转化为一个强大的计算工具 [@problem_id:2871735]。", "problem": "一个二维、小应变、准静态线弹性体占据了以米为单位的矩形域 $\\Omega = [0,1] \\times [0,1]$，其单位厚度为 $h = 1\\,\\mathrm{m}$。令 $\\boldsymbol{u} = (u_x,u_y)$ 表示位移场。从无惯性项的局部线性动量平衡和虚功原理出发，使用标准的 Galerkin 有限元法 (FEM) 离散化，采用双线性四边形单元，以组装与线性动量平衡弱形式相关的全局残差向量，其中包括内应力、指定的体积体力以及指定的边界牵引力的贡献。采用平面应变条件下的各向同性线弹性模型。\n\n您的程序必须为以下固定的网格和数据构建并组装全局残差向量 $\\boldsymbol{R}(\\boldsymbol{u})$，然后针对指定的测试套件对其进行求值。残差向量必须按 $\\boldsymbol{R} = [R_{0x},R_{0y},R_{1x},R_{1y},\\dots,R_{5x},R_{5y}]$ 的顺序排列，其中下标表示全局节点索引和分量 $(x,y)$。\n\n网格：\n- 节点坐标（单位：米）：\n  - 节点 $0$：$(x_0,y_0) = (0,0)$\n  - 节点 $1$：$(x_1,y_1) = (0.5,0)$\n  - 节点 $2$：$(x_2,y_2) = (1,0)$\n  - 节点 $3$：$(x_3,y_3) = (0,1)$\n  - 节点 $4$：$(x_4,y_4) = (0.5,1)$\n  - 节点 $5$：$(x_5,y_5) = (1,1)$\n- 单元（四节点双线性四边形，Q4），其局部节点顺序 $\\{1,2,3,4\\}$ 对应于所列出的全局节点索引：\n  - 单元 $0$：$[0,1,4,3]$\n  - 单元 $1$：$[1,2,5,4]$\n- Neumann 边界 $\\Gamma_t$：位于 $x=1$ 的右边界，即连接节点 $2$ 和 $5$ 的边。\n\n离散化要求：\n- 对位移使用双线性 Q4 等参插值，其标准形函数 $\\{N_i(r,s)\\}$ 定义在父单元正方形 $(r,s) \\in [-1,1]^2$ 上。有限元场必须使用张量积 Gauss 求积法进行积分，域积分使用 $2\\times 2$ 个 Gauss 点，边积分使用 $2$ 点 Gauss 求积。所有积分都必须使用基于单元 Jacobian 矩阵的从 $(r,s)$ 到物理坐标 $(x,y)$ 的映射。\n- 运动学：小应变张量 $\\boldsymbol{\\varepsilon}(\\boldsymbol{u}) = \\tfrac{1}{2}\\left(\\nabla \\boldsymbol{u} + \\nabla \\boldsymbol{u}^\\mathsf{T}\\right)$。\n- 本构律（平面应变）：$\\boldsymbol{\\sigma} = \\mathsf{D}\\,\\boldsymbol{\\varepsilon}$，其中 Young 模量为 $E$，Poisson 比为 $\\nu$；使用 Lamé 参数 $\\lambda = \\dfrac{\\nu E}{(1+\\nu)(1-2\\nu)}$ 和 $\\mu = \\dfrac{E}{2(1+\\nu)}$，以及\n  $$\n  \\mathsf{D} = \n  \\begin{bmatrix}\n  \\lambda + 2\\mu & \\lambda & 0\\\\\n  \\lambda & \\lambda + 2\\mu & 0\\\\\n  0 & 0 & \\mu\n  \\end{bmatrix}.\n  $$\n- 体力 $\\boldsymbol{b}$ 的单位是 $\\mathrm{N/m^3}$，牵引力 $\\bar{\\boldsymbol{t}}$ 的单位是 $\\mathrm{N/m^2}$。在 $\\Gamma_t$ 上的线积分必须考虑单位厚度 $h=1\\,\\mathrm{m}$。\n- 自由度 (DOF) 排序：对于每个全局节点 $i$，局部自由度对为 $(u_{ix},u_{iy})$，全局残差按 $[0x,0y,1x,1y,\\dots,5x,5y]$ 排序。\n- 不施加本质（Dirichlet）边界条件；直接对给定的节点位移向量求出残差。\n\n测试套件：\n- 您的程序必须为以下三个测试案例中的每一个组装 $\\boldsymbol{R}(\\boldsymbol{u})$，并输出三个残差向量。\n\n案例 $\\mathbf{1}$（一般载荷，零位移）：\n- 材料：$E = 2.10\\times 10^{11}\\,\\mathrm{Pa}$，$\\nu = 0.3$。\n- 厚度：$h = 1\\,\\mathrm{m}$。\n- 节点位移：所有节点上 $\\boldsymbol{u}(\\text{节点}) = \\boldsymbol{0}$。\n- 体力：$\\boldsymbol{b} = (0,\\,-\\rho g)$，其中 $\\rho = 7800\\,\\mathrm{kg/m^3}$，$g = 9.81\\,\\mathrm{m/s^2}$；将 $\\boldsymbol{b}$ 以 $\\mathrm{N/m^3}$ 表示。\n- 牵引力：在 $\\Gamma_t$ 上均匀分布，为 $\\bar{\\boldsymbol{t}} = (1.0\\times 10^6,\\,0)\\,\\mathrm{N/m^2}$。\n\n案例 $\\mathbf{2}$（刚体运动检查）：\n- 材料：$E = 7.0\\times 10^{10}\\,\\mathrm{Pa}$，$\\nu = 0.25$。\n- 厚度：$h = 1\\,\\mathrm{m}$。\n- 体力：$\\boldsymbol{b} = (0,\\,0)\\,\\mathrm{N/m^3}$。\n- 牵引力：$\\bar{\\boldsymbol{t}} = (0,\\,0)\\,\\mathrm{N/m^2}$。\n- 节点位移：施加一个刚性平移外加一个绕原点的小角度刚性转动。使用平移 $\\boldsymbol{t}_0 = (0.002,\\,-0.003)\\,\\mathrm{m}$ 和转动角 $\\omega = 0.1$ (单位为弧度)。对于以米为单位的点 $(x,y)$，定义\n  $$\n  \\boldsymbol{u}(x,y) = \\boldsymbol{t}_0 + \\begin{bmatrix} -\\omega\\,y \\\\ \\omega\\,x \\end{bmatrix}.\n  $$\n  在每个节点上计算此表达式以设置节点自由度。\n\n案例 $\\mathbf{3}$（均匀应变状态）：\n- 材料：$E = 7.0\\times 10^{10}\\,\\mathrm{Pa}$，$\\nu = 0.33$。\n- 厚度：$h = 1\\,\\mathrm{m}$。\n- 体力：$\\boldsymbol{b} = (0,\\,0)\\,\\mathrm{N/m^3}$。\n- 牵引力：$\\bar{\\boldsymbol{t}} = (0,\\,0)\\,\\mathrm{N/m^2}$。\n- 节点位移：施加一个对应于无剪切的均匀正应变的线性位移场。对于以米为单位的点 $(x,y)$，设置\n  $$\n  \\boldsymbol{u}(x,y) = \\begin{bmatrix} \\alpha\\,x \\\\ \\beta\\,y \\end{bmatrix},\\quad \\alpha = 2.0\\times 10^{-4},\\ \\beta = -1.0\\times 10^{-4}.\n  $$\n  在每个节点上计算此表达式以设置节点自由度。\n\n角度单位要求：\n- 所有角度均以弧度为单位。\n\n物理单位要求：\n- 残差分量以牛顿 $\\mathrm{N}$ 为单位表示。\n\n最终输出格式要求：\n- 您的程序应生成单行输出，其中包含三个残差向量，格式为用方括号括起来的逗号分隔列表。每个残差向量必须打印为 Python 风格的浮点数列表，并按上述规定排序。例如（仅为示例）：$[[r_{1,0},\\dots,r_{1,11}],[r_{2,0},\\dots,r_{2,11}],[r_{3,0},\\dots,r_{3,11}]]$。", "solution": "问题陈述提出了一个在计算固体力学领域使用有限元法（FEM）的标准验证练习。它要求在几种载荷和位移情景下为一个线弹性体组装全局残差向量。该问题具有科学依据，对于残差评估任务来说是适定的，并为唯一的数值解提供了所有必要的数据。其物理、数学和离散化过程与连续介质力学和有限元法的既定原则相一致。这些测试案例是有限元实现的典型检查：零位移的受载结构、刚体运动测试以及均匀应变（片）测试。因此，该问题被认为是有效的。\n\n求解过程通过实现二维、平面应变、线弹性的 Galerkin 有限元法来进行。全局残差向量 $\\boldsymbol{R}$ 定义为内力向量 $\\boldsymbol{F}_{\\text{int}}$ 与外力向量 $\\boldsymbol{F}_{\\text{ext}}$ 之差：\n$$ \\boldsymbol{R} = \\boldsymbol{F}_{\\text{int}} - \\boldsymbol{F}_{\\text{ext}} $$\n为使系统达到平衡，$\\boldsymbol{R}$ 必须为零。对于给定的（非平衡）位移状态 $\\boldsymbol{u}$，$\\boldsymbol{R}$ 的计算结果揭示了恢复平衡所需的节点力。\n\n从虚功原理推导出的平衡方程弱形式，引出了力向量的定义。对于任何容许的虚位移 $\\delta\\boldsymbol{u}$ 及其对应的虚应变 $\\delta\\boldsymbol{\\varepsilon}$，我们有：\n$$ \\delta\\boldsymbol{d}^T \\boldsymbol{R} = \\int_{\\Omega} \\delta\\boldsymbol{\\varepsilon}^T \\boldsymbol{\\sigma} \\, dV - \\left( \\int_{\\Omega} \\delta\\boldsymbol{u}^T \\boldsymbol{b} \\, dV + \\int_{\\Gamma_t} \\delta\\boldsymbol{u}^T \\bar{\\boldsymbol{t}} \\, dA_t \\right) = 0 $$\n其中 $\\boldsymbol{d}$ 是节点位移，$\\boldsymbol{\\sigma}$ 是 Cauchy 应力张量，$\\boldsymbol{b}$是单位体积的体力，$\\bar{\\boldsymbol{t}}$ 是在边界 $\\Gamma_t$ 上指定的牵引力，$dV$ 是微元体积，$dA_t$ 是牵引力边界上的微元面积。对于单位厚度 $h=1\\,\\mathrm{m}$ 的二维问题，$dV = h\\,dA$，$dA_t = h\\,dS$，其中 $dA$ 和 $dS$ 分别是二维平面中的面积元和线元。\n\n将域 $\\Omega$ 离散为有限元，全局残差向量 $\\boldsymbol{R}$ 由单元级的贡献 $\\boldsymbol{r}^e$ 组装而成：\n$$ \\boldsymbol{R} = \\sum_{e} \\boldsymbol{A}_e^T \\boldsymbol{r}^e $$\n其中 $\\boldsymbol{A}_e$ 是单元 $e$ 的组装算子。单元残差向量 $\\boldsymbol{r}^e$ 通过在单元域 $\\Omega_e$ 及其边界 $\\Gamma_t^e$ 上积分计算得出：\n$$ \\boldsymbol{r}^e = \\int_{\\Omega_e} h \\mathbf{B}^T \\boldsymbol{\\sigma} \\, dA - \\left( \\int_{\\Omega_e} h \\mathbf{N}^T \\boldsymbol{b} \\, dA + \\int_{\\Gamma_t^e} h \\mathbf{N}^T \\bar{\\boldsymbol{t}} \\, dS \\right) $$\n这里，$\\mathbf{N}$ 是插值位移场的形函数矩阵，$\\boldsymbol{u}^h = \\mathbf{N} \\boldsymbol{d}^e$；$\\mathbf{B}$ 是关联节点位移与应变的运动矩阵，$\\boldsymbol{\\varepsilon}^h = \\mathbf{B} \\boldsymbol{d}^e$。应力由平面应变的线弹性本构律给出，$\\boldsymbol{\\sigma} = \\mathsf{D} \\boldsymbol{\\varepsilon}^h$，使用所提供的材料矩阵 $\\mathsf{D}$。\n\n该问题指定了等参双线性四边形 (Q4) 单元。积分使用 Gauss 求积法进行数值计算。对于父域 $[-1,1]^2$ 上的面积分，使用 $2 \\times 2$ 规则；对于父边 $[-1,1]$ 上的线积分，使用 $2$ 点规则。\n\n对每个测试案例，执行过程如下：\n1.  **初始化**：设置材料参数（$E, \\nu$），计算 Lamé 参数（$\\lambda, \\mu$），并构建弹性矩阵 $\\mathsf{D}$。定义体力 $\\boldsymbol{b}$ 和牵引力 $\\bar{\\boldsymbol{t}}$。定义网格几何形状和连接关系。\n2.  **位移场**：对于给定的测试案例，计算网格所有自由度 (DOF) 的指定位移向量。\n3.  **组装**：将全局残差向量 $\\boldsymbol{R}$ 初始化为零。遍历网格中的每个单元：\n    a.  **内力**：遍历 $2 \\times 2$ Gauss 求积点。在每个点上，计算从父坐标到物理坐标映射的 Jacobian 矩阵、B 矩阵、由单元节点位移产生的应变，以及由此产生的应力。计算对单元内力向量的贡献，并将其添加到单元的残差中。\n    b.  **体力**：如果适用，在每个 Gauss 点上，计算体力对单元外力向量的贡献。将其从单元的残差中减去。\n    c.  **牵引力**：如果单元的某条边位于牵引力边界 $\\Gamma_t$ 上，则遍历该边上的 $2$ 个 Gauss 点。计算对单元外力向量的贡献，并将其从单元的残差中减去。\n    d.  **散布-叠加**：将计算出的单元残差向量添加到全局残差向量 $\\boldsymbol{R}$ 中的相应位置。\n4.  **输出**：存储该测试案例的最终向量 $\\boldsymbol{R}$。在处理完所有案例后，按要求格式化结果。\n\n为清晰起见，实现被结构化为多个函数：计算形函数及其导数、计算 B 矩阵，以及为每个案例协调组装过程的主例程。三个指定案例的结果被计算出来，并以要求的格式呈现。", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the FEM residual assembly problem for three test cases.\n    \"\"\"\n    \n    # ------------------ Discretization Setup ------------------\n\n    # Mesh data\n    nodes = np.array([\n        [0.0, 0.0], [0.5, 0.0], [1.0, 0.0], # Nodes 0, 1, 2\n        [0.0, 1.0], [0.5, 1.0], [1.0, 1.0]  # Nodes 3, 4, 5\n    ])\n    elements = np.array([\n        [0, 1, 4, 3],  # Element 0\n        [1, 2, 5, 4]   # Element 1\n    ], dtype=int)\n    \n    h = 1.0  # Thickness in meters\n\n    # Gauss quadrature points and weights\n    gauss_points_1d = np.array([-1.0 / np.sqrt(3.0), 1.0 / np.sqrt(3.0)])\n    gauss_weights_1d = np.array([1.0, 1.0])\n    \n    gauss_points_2d = np.array([\n        (gauss_points_1d[0], gauss_points_1d[0]),\n        (gauss_points_1d[1], gauss_points_1d[0]),\n        (gauss_points_1d[0], gauss_points_1d[1]),\n        (gauss_points_1d[1], gauss_points_1d[1])\n    ])\n    gauss_weights_2d = np.array([\n        gauss_weights_1d[0] * gauss_weights_1d[0],\n        gauss_weights_1d[1] * gauss_weights_1d[0],\n        gauss_weights_1d[0] * gauss_weights_1d[1],\n        gauss_weights_1d[1] * gauss_weights_1d[1]\n    ])\n\n    # ------------------ FEM Helper Functions ------------------\n\n    def get_shape_functions(r, s):\n        N = np.zeros(4)\n        N[0] = 0.25 * (1.0 - r) * (1.0 - s)\n        N[1] = 0.25 * (1.0 + r) * (1.0 - s)\n        N[2] = 0.25 * (1.0 + r) * (1.0 + s)\n        N[3] = 0.25 * (1.0 - r) * (1.0 + s)\n        return N\n\n    def get_shape_function_derivatives_parent(r, s):\n        grad_N_parent = np.zeros((4, 2))\n        grad_N_parent[0, :] = [-0.25 * (1.0 - s), -0.25 * (1.0 - r)]\n        grad_N_parent[1, :] = [ 0.25 * (1.0 - s), -0.25 * (1.0 + r)]\n        grad_N_parent[2, :] = [ 0.25 * (1.0 + s),  0.25 * (1.0 + r)]\n        grad_N_parent[3, :] = [-0.25 * (1.0 + s),  0.25 * (1.0 - r)]\n        return grad_N_parent\n\n    def get_B_matrix(grad_N_phys):\n        B = np.zeros((3, 8))\n        for i in range(4):\n            B[0, 2 * i] = grad_N_phys[i, 0]\n            B[1, 2 * i + 1] = grad_N_phys[i, 1]\n            B[2, 2 * i] = grad_N_phys[i, 1]\n            B[2, 2 * i + 1] = grad_N_phys[i, 0]\n        return B\n        \n    def get_N_matrix(N):\n        N_mat = np.zeros((2, 8))\n        for i in range(4):\n            N_mat[0, 2*i] = N[i]\n            N_mat[1, 2*i+1] = N[i]\n        return N_mat\n\n    # ------------------ Test Cases Setup ------------------\n\n    test_cases = [\n        {\n            \"E\": 2.10e11, \"nu\": 0.3, \"h\": 1.0,\n            \"b\": np.array([0, -7800 * 9.81]),\n            \"traction_element\": 1, \"traction_edge_local_nodes\": [1, 2],\n            \"traction\": np.array([1.0e6, 0]),\n            \"u_func\": lambda x, y: (0.0, 0.0)\n        },\n        {\n            \"E\": 7.0e10, \"nu\": 0.25, \"h\": 1.0,\n            \"b\": np.array([0, 0]),\n            \"traction_element\": -1, # No traction\n            \"u_func\": lambda x, y: (0.002 - 0.1 * y, -0.003 + 0.1 * x)\n        },\n        {\n            \"E\": 7.0e10, \"nu\": 0.33, \"h\": 1.0,\n            \"b\": np.array([0, 0]),\n            \"traction_element\": -1, # No traction\n            \"u_func\": lambda x, y: (2.0e-4 * x, -1.0e-4 * y)\n        }\n    ]\n\n    all_results = []\n\n    for case in test_cases:\n        # Material properties\n        E, nu = case[\"E\"], case[\"nu\"]\n        lame_lambda = (nu * E) / ((1 + nu) * (1 - 2 * nu))\n        lame_mu = E / (2 * (1 + nu))\n        D_matrix = np.array([\n            [lame_lambda + 2 * lame_mu, lame_lambda, 0],\n            [lame_lambda, lame_lambda + 2 * lame_mu, 0],\n            [0, 0, lame_mu]\n        ])\n\n        # Body forces\n        b_vec = case[\"b\"]\n        \n        # Displacements\n        u_global = np.zeros(nodes.shape[0] * 2)\n        u_func = case[\"u_func\"]\n        for i in range(nodes.shape[0]):\n            u_global[2*i:2*i+2] = u_func(nodes[i, 0], nodes[i, 1])\n\n        # Assembly\n        R_global = np.zeros_like(u_global)\n\n        for e_idx, conn in enumerate(elements):\n            coords_e = nodes[conn]\n            d_e = u_global[np.repeat(conn * 2, 2) + np.tile([0, 1], 4)]\n            r_e = np.zeros(8)\n            \n            # Volume integrals for internal and body forces\n            for i in range(len(gauss_points_2d)):\n                r, s = gauss_points_2d[i]\n                w = gauss_weights_2d[i]\n                \n                grad_N_parent = get_shape_function_derivatives_parent(r, s)\n                J_matrix = grad_N_parent.T @ coords_e\n                detJ = np.linalg.det(J_matrix)\n                invJ = np.linalg.inv(J_matrix)\n                \n                grad_N_phys = grad_N_parent @ invJ.T\n                \n                B_matrix = get_B_matrix(grad_N_phys)\n                strain = B_matrix @ d_e\n                stress = D_matrix @ strain\n\n                r_e += B_matrix.T @ stress * detJ * w * h\n\n                if np.any(b_vec):\n                    N_vec = get_shape_functions(r, s)\n                    N_matrix = get_N_matrix(N_vec)\n                    r_e -= N_matrix.T @ b_vec * detJ * w * h\n            \n            # Surface integral for traction forces\n            if e_idx == case.get(\"traction_element\", -1):\n                t_bar = case[\"traction\"]\n                # Edge between local nodes 1 and 2 (r=1)\n                local_node_indices = case[\"traction_edge_local_nodes\"]\n                \n                for i in range(len(gauss_points_1d)):\n                    s_gp = gauss_points_1d[i]\n                    w_gp = gauss_weights_1d[i]\n                    \n                    r, s = 1.0, s_gp\n                    \n                    N_vec = get_shape_functions(r, s)\n                    N_matrix = get_N_matrix(N_vec)\n\n                    # Jacobian for line element along r=1 edge\n                    # coords are [n1_x, n1_y] and [n2_x, n2_y] for the edge\n                    p1_coords = coords_e[local_node_indices[0]]\n                    p2_coords = coords_e[local_node_indices[1]]\n                    edge_vec = p2_coords - p1_coords\n                    detJ_line = np.linalg.norm(edge_vec) / 2.0\n\n                    r_e -= N_matrix.T @ t_bar * detJ_line * w_gp * h\n            \n            # Assemble element residual into global vector\n            for i in range(4):\n                node_idx = conn[i]\n                R_global[2*node_idx : 2*node_idx+2] += r_e[2*i : 2*i+2]\n        \n        all_results.append(R_global.tolist())\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, all_results))}]\".replace(\" \", \"\"))\n\nsolve()\n```", "id": "2871735"}]}