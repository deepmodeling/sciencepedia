{"hands_on_practices": [{"introduction": "在随机有限元方法的实际应用中，一个核心挑战是如何处理具有物理约束的随机输入。例如，泊松比等材料参数必须位于特定范围内。本练习旨在探讨如何将这些有界随机变量转换为无界标准正态变量，以便应用基于埃尔米特多项式的多项式混沌展开 (PCE)。通过掌握等概率变换这一关键技术，您将能够将随机有限元方法应用于更广泛的、具有非高斯输入的实际工程问题。[@problem_id:2687001]", "problem": "考虑一个通过随机有限元方法建模的线性各向同性弹性固体，其中，泊松比被建模为一个空间均匀的随机场 $\\nu(\\theta)$，并且为了不确定性传播的目的，可以将其视为单个随机变量。物理稳定性和材料正定性要求 $\\nu(\\theta) \\in (0,0.5)$ 几乎必然成立。您打算使用 Hermite 多项式基来构建多项式混沌展开 (PCE)，该基对于标准正态测度是正交的，因此展开的输入随机变量是一个无约束的标准高斯变量 $\\,\\xi \\sim \\mathcal{N}(0,1)\\,$。从基本概率原理（概率积分变换）出发，并考虑到 $\\nu$ 的先验分布必须支撑在 $(0,0.5)$ 上的要求，请选择一个选项，该选项为 $\\nu$ 提供了一个科学合理的有界先验，并提供了一个到无约束变量的一对一变换，该变换通过保测映射适用于基于 Hermite 的 PCE。令 $\\Phi$ 表示标准正态累积分布函数 (CDF)，并令 $F_Z$ 酌情表示随机变量 $Z$ 的 CDF。\n\nA. 选择在 $(0,1)$ 上的 $Y \\sim \\mathrm{Beta}(\\alpha,\\beta)$ 并设 $\\nu = 0.5\\,Y$。通过 $\\xi = \\Phi^{-1}\\!\\big(F_Y(\\nu/0.5)\\big)$ 定义无约束变量，并在 $\\xi$ 中构建 Hermite PCE。\n\nB. 选择 $\\nu \\sim \\mathrm{Uniform}(0,0.5)$。通过 $\\xi = \\Phi^{-1}(2\\,\\nu)$ 定义无约束变量，并在 $\\xi$ 中构建 Hermite PCE。\n\nC. 选择截断在 $(0,0.5)$ 上的 $\\nu \\sim \\mathcal{N}(\\mu,\\sigma^2)$，取 $\\xi = \\nu$，并直接在 $\\xi$ 中构建 Hermite PCE。\n\nD. 选择 $\\nu = 0.5\\,Y$，其中 $Y \\sim \\mathrm{Beta}(\\alpha,\\beta)$ 在 $(0,1)$ 上，定义 $z = \\log\\!\\big(\\nu/(0.5-\\nu)\\big)$，假设 $z \\sim \\mathcal{N}(0,1)$，并在 $z$ 中构建 Hermite PCE。\n\nE. 选择 $\\nu = 0.5\\,Y$，其中 $Y \\sim \\mathrm{Beta}(\\alpha,\\beta)$ 在 $(0,1)$ 上，并直接用 $Y$ 的 Jacobi 多项式展开，不进行任何变换。\n\n在旨在使用带有无约束标准正态输入的 Hermite 多项式，同时通过从 $\\nu$ 到 $\\xi$ 的可逆映射保持 $\\nu$ 上先验概率测度的既定目标下，选择所有正确的选项。", "solution": "我们从固体力学和不确定性量化背景下两个合适的基本依据出发：\n\n1) 线性各向同性弹性中泊松比的物理容许性要求 $-1 < \\nu < 0.5$；对于具有正体积模量和剪切模量的典型材料，我们假定 $\\nu \\in (0,0.5)$ 几乎必然成立。\n\n2) 在多项式混沌展开 (PCE) 中，正交多项式族是根据输入随机变量的概率密度函数 (PDF) 来选择的。Hermite 多项式对于 $\\xi \\sim \\mathcal{N}(0,1)$ 的标准正态测度是正交的。要在从 $\\nu$ 的有界先验出发的同时使用 Hermite 多项式，需要一个从 $\\nu$ 到无约束高斯变量 $\\xi$ 的保测、一对一的变换。\n\n其基本概率机制是概率积分变换：如果 $U \\sim \\mathrm{Uniform}(0,1)$ 且 $F_\\nu$ 是一个连续的 CDF，那么 $\\nu = F_\\nu^{-1}(U)$ 的 CDF 就是 $F_\\nu$。反之，如果 $\\nu$ 的 CDF 是 $F_\\nu$，那么 $U = F_\\nu(\\nu) \\sim \\mathrm{Uniform}(0,1)$。与标准正态 CDF $\\Phi$ 复合可得 $\\xi = \\Phi^{-1}(F_\\nu(\\nu)) \\sim \\mathcal{N}(0,1)$，这为基于 Hermite 的 PCE 提供了所需的无约束变量，其逆映射为 $\\nu = F_\\nu^{-1}(\\Phi(\\xi))$，这个过程保持了概率。\n\n基于此，我们分析每个选项。\n\n选项 A：$Y \\sim \\mathrm{Beta}(\\alpha,\\beta)$ 在 $(0,1)$ 上，$\\nu = 0.5\\,Y$，以及 $\\xi = \\Phi^{-1}\\!\\big(F_Y(\\nu/0.5)\\big)$。\n- 先验是有界的，因为 $Y \\in (0,1)$ 意味着 $\\nu \\in (0,0.5)$ 几乎必然成立。$\\mathrm{Beta}(\\alpha,\\beta)$ 族是一个灵活的有界先验，经过缩放后可以在 $(0,0.5)$ 上编码各种形状。\n- 该变换使用 $Y$ 的 CDF $F_Y$，并将 $U = F_Y(Y) \\sim \\mathrm{Uniform}(0,1)$ 映射到 $\\xi = \\Phi^{-1}(U) \\sim \\mathcal{N}(0,1)$。因为 $\\nu/0.5 = Y$，我们得到 $\\xi = \\Phi^{-1}\\!\\big(F_Y(\\nu/0.5)\\big)$，这是一个从 $\\nu$ 到 $\\xi$ 的保测、一对一映射。\n- 这直接满足了使用带有标准正态输入的 Hermite 多项式的要求，同时通过逆映射 $\\nu = 0.5\\,F_Y^{-1}(\\Phi(\\xi))$ 保持了 $\\nu$ 上的原始 $\\mathrm{Beta}$ 先验。\n结论：正确。\n\n选项 B：$\\nu \\sim \\mathrm{Uniform}(0,0.5)$ 和 $\\xi = \\Phi^{-1}(2\\,\\nu)$。\n- 先验是有界的且物理上可容许。令 $U = 2\\,\\nu$。因为 $\\nu \\sim \\mathrm{Uniform}(0,0.5)$，所以 $U \\sim \\mathrm{Uniform}(0,1)$。根据概率积分变换，$\\xi = \\Phi^{-1}(U) = \\Phi^{-1}(2\\,\\nu) \\sim \\mathcal{N}(0,1)$。\n- 该映射是从 $\\nu \\in (0,0.5)$ 到 $\\xi \\in \\mathbb{R}$ 的一对一映射，并且保持概率。逆映射为 $\\nu = 0.5\\,\\Phi(\\xi)$，它通过 $\\nu = F_\\nu^{-1}(\\Phi(\\xi))$（其中在 $(0,0.5)$ 上 $F_\\nu(\\nu) = 2\\,\\nu$）保持了均匀先验。\n- 这满足了使用带有无约束标准正态输入的 Hermite 多项式的既定目标。\n结论：正确。\n\n选项 C：$\\nu \\sim \\mathcal{N}(\\mu,\\sigma^2)$ 截断在 $(0,0.5)$ 上，并取 $\\xi = \\nu$ 用于 Hermite PCE。\n- 虽然截断强制施加了物理边界，但取 $\\xi = \\nu$ 会使 $\\xi$ 保持在 $(0,0.5)$ 内有界且非高斯（它是一个截断高斯分布）。Hermite 多项式是对于 $\\mathbb{R}$ 上的非截断高斯测度正交，而不是对于 $(0,0.5)$ 上的截断高斯测度正交。\n- 因此，直接在 $\\xi = \\nu$ 中构建 Hermite PCE 违反了正交性测度的要求，并且没有提供一个无约束变量。可以为截断高斯分布构造一个合适的多项式基，但这不是这里提出的方法。\n结论：不正确。\n\n选项 D：$\\nu = 0.5\\,Y$，其中 $Y \\sim \\mathrm{Beta}(\\alpha,\\beta)$，定义 $z = \\log\\!\\big(\\nu/(0.5-\\nu)\\big)$，并假设 $z \\sim \\mathcal{N}(0,1)$ 用于 Hermite PCE。\n- logit 映射 $z = \\log\\!\\big(\\nu/(0.5-\\nu)\\big)$ 确实是一个从 $(0,0.5)$ 到 $\\mathbb{R}$ 的一对一映射。然而，如果 $\\nu$ 上的先验是（缩放后的）$\\mathrm{Beta}$ 分布，那么 $z$ 的诱导分布不是标准正态分布；它是 Beta 分布的 logit，而不是高斯分布。假设 $z \\sim \\mathcal{N}(0,1)$ 会将 $\\nu$ 上的隐含先验从 $\\mathrm{Beta}$ 分布更改为 $(0,0.5)$ 上的 logistic-正态分布。\n- 该选项同时指定了 $\\nu$ 上的 $\\mathrm{Beta}$ 先验和 $z$ 上的高斯先验，而后者与前者在测度上不一致。因此，它没有通过变换保持所述的有界先验。\n结论：不正确。\n\n选项 E：$\\nu = 0.5\\,Y$，其中 $Y \\sim \\mathrm{Beta}(\\alpha,\\beta)$，并直接用 $Y$ 的 Jacobi 多项式展开，不进行任何变换。\n- 如果使用相对于 $\\mathrm{Beta}$ 测度的 Jacobi 多项式，这是一个有效的广义 PCE 选择；它保持了先验，并且仍在 Wiener–Askey 框架内。然而，问题明确要求一个适用于基于 Hermite 的 PCE 的无约束变量。此选项既没有提供无约束变量，也没有提供 Hermite 基；相反，它保留了一个有界变量和一个非 Hermite 基。\n结论：在旨在使用带有无约束标准正态输入的 Hermite 多项式的既定目标下，此选项不正确。\n\n因此，满足所有既定要求的正确选项是 A 和 B。", "answer": "$$\\boxed{AB}$$", "id": "2687001"}, {"introduction": "随机伽辽金有限元分析的直接输出是解场关于多项式混沌展开 (PCE) 的一组系数。为了从这些抽象的数学系数中提取有意义的物理洞察，必须进行后处理。本练习将指导您如何利用基多项式的正交性，直接从 PCE 系数中高效地计算出解的均值和方差等关键统计矩。这项技能对于将 PCE 的数学表示转化为对系统响应的预期性能和不确定性的具体理解至关重要。[@problem_id:2600487]", "problem": "考虑一个具有随机系数场的一维稳态线性椭圆边值问题，该问题通过有限元法（FEM）进行离散化。随机Galerkin近似使用了广义多项式混沌（gPC），其基于单个标准正态随机变量 $\\xi \\sim \\mathcal{N}(0,1)$ 和概率论学家的Hermite基 $\\{\\mathrm{He}_{\\alpha}(\\xi)\\}_{\\alpha=0}^{3}$。该基在 $L^{2}(\\mathbb{R},\\rho)$ 中是正交的，其中 $\\rho$ 是标准正态密度，满足 $\\mathbb{E}[\\mathrm{He}_{\\alpha}(\\xi)\\,\\mathrm{He}_{\\beta}(\\xi)]=\\alpha!\\,\\delta_{\\alpha\\beta}$，并且 $\\mathrm{He}_{0}(\\xi)\\equiv 1$，对于所有 $\\alpha \\geq 1$ 都有 $\\mathbb{E}[\\mathrm{He}_{\\alpha}(\\xi)]=0$。近似解场表示为\n$$\nu_{h}(x,\\xi)=\\sum_{m=1}^{3}\\phi_{m}(x)\\sum_{\\alpha=0}^{3}c_{m,\\alpha}\\,\\mathrm{He}_{\\alpha}(\\xi),\n$$\n在空间域 $[0,1]$ 上，该域具有一个由两个线性单元组成的均匀网格，节点基函数位于 $x=0$, $x=\\tfrac{1}{2}$ 和 $x=1$。分段线性的FEM形函数 $\\{\\phi_{m}(x)\\}_{m=1}^{3}$ 是此网格上常用的帽函数。系数矩阵 $\\boldsymbol{C}=[c_{m,\\alpha}]$ 由下式给出\n$$\n\\boldsymbol{C} \\;=\\;\n\\begin{pmatrix}\n1.0 & 0.5 & -0.3 & 0.0 \\\\\n2.0 & -0.2 & 0.4 & 0.25 \\\\\n0.0 & 0.1 & 0.0 & -0.05\n\\end{pmatrix},\n$$\n其中行索引 $m\\in\\{1,2,3\\}$ 对应空间基函数 $\\phi_{m}(x)$，列索引 $\\alpha\\in\\{0,1,2,3\\}$ 对应 $\\mathrm{He}_{\\alpha}(\\xi)$。\n\n仅使用基的正交性和统计矩的定义，计算 $u_{h}(x,\\xi)$ 在空间位置 $\\hat{x}=0.3$ 处的均值和逐点方差。\n\n将您的最终答案表示为单行矩阵 $\\begin{pmatrix}\\mu & \\sigma^{2}\\end{pmatrix}$，其中 $\\mu$ 是均值，$\\sigma^{2}$ 是在 $x=\\hat{x}$ 处的方差，四舍五入到四位有效数字。这些量是无量纲的；答案中不要包含单位。", "solution": "首先必须验证问题的科学合理性、完整性和客观性。\n\n已知条件如下：\n- 来自随机有限元法的近似解：$u_{h}(x,\\xi)=\\sum_{m=1}^{3}\\phi_{m}(x)\\sum_{\\alpha=0}^{3}c_{m,\\alpha}\\,\\mathrm{He}_{\\alpha}(\\xi)$。\n- 随机变量为标准正态：$\\xi \\sim \\mathcal{N}(0,1)$。\n- 随机基为概率论学家的Hermite基 $\\{\\mathrm{He}_{\\alpha}(\\xi)\\}_{\\alpha=0}^{3}$。\n- 基的正交性条件为 $\\mathbb{E}[\\mathrm{He}_{\\alpha}(\\xi)\\,\\mathrm{He}_{\\beta}(\\xi)]=\\alpha!\\,\\delta_{\\alpha\\beta}$。\n- 对于非常数项，基函数的均值为零：$\\mathrm{He}_{0}(\\xi)=1$ 且对于 $\\alpha \\geq 1$ 有 $\\mathbb{E}[\\mathrm{He}_{\\alpha}(\\xi)]=0$。\n- 空间域为 $[0,1]$，节点位于 $x \\in \\{0, \\frac{1}{2}, 1\\}$。\n- 空间基函数 $\\{\\phi_{m}(x)\\}_{m=1}^{3}$ 是分别对应于节点 $x=0$、$x=0.5$ 和 $x=1$ 的标准分段线性（帽）函数。\n- 系数矩阵 $\\boldsymbol{C}=[c_{m,\\alpha}]$ 如下：\n$$\n\\boldsymbol{C} \\;=\\;\n\\begin{pmatrix}\n1.0 & 0.5 & -0.3 & 0.0 \\\\\n2.0 & -0.2 & 0.4 & 0.25 \\\\\n0.0 & 0.1 & 0.0 & -0.05\n\\end{pmatrix}\n$$\n- 任务是计算 $u_{h}(x,\\xi)$ 在位置 $\\hat{x}=0.3$ 处的均值 $\\mu$ 和逐点方差 $\\sigma^{2}$。\n\n该问题是有效的。它描述了在不确定性量化中使用随机Galerkin法的一个标准场景。所有提供的信息都是一致的、科学合理的，并且足以执行所需的计算。该问题是将统计矩的定义直接应用于给定的多项式混沌展开。不存在矛盾、歧义或违反科学原理之处。因此，我们可以继续进行求解。\n\n近似解由一个广义多项式混沌（gPC）展开式给出：\n$$u_{h}(x,\\xi) = \\sum_{m=1}^{3}\\phi_{m}(x) \\left( \\sum_{\\alpha=0}^{3}c_{m,\\alpha}\\,\\mathrm{He}_{\\alpha}(\\xi) \\right)$$\n我们可以通过按随机基函数对各项进行分组来重写此表达式：\n$$u_{h}(x,\\xi) = \\sum_{\\alpha=0}^{3} \\left( \\sum_{m=1}^{3} c_{m,\\alpha}\\,\\phi_{m}(x) \\right) \\mathrm{He}_{\\alpha}(\\xi)$$\n让我们在具体的空间位置 $\\hat{x}=0.3$ 处评估此表达式。首先，我们必须确定分段线性基函数 $\\phi_{m}(x)$ 在该点的值。节点位于 $x_{1}=0$, $x_{2}=0.5$ 和 $x_{3}=1$。点 $\\hat{x}=0.3$ 位于第一个单元内，介于节点 $x_{1}=0$ 和 $x_{2}=0.5$ 之间。\n\n在区间 $[0, 0.5]$ 上，帽函数的表达式为：\n- $\\phi_{1}(x) = \\frac{x_{2}-x}{x_{2}-x_{1}} = \\frac{0.5-x}{0.5} = 1 - 2x$\n- $\\phi_{2}(x) = \\frac{x-x_{1}}{x_{2}-x_{1}} = \\frac{x-0}{0.5} = 2x$\n- $\\phi_{3}(x) = 0$ for $x \\in [0, 0.5]$\n\n在 $\\hat{x}=0.3$ 处求值：\n- $\\phi_{1}(0.3) = 1 - 2(0.3) = 1 - 0.6 = 0.4$\n- $\\phi_{2}(0.3) = 2(0.3) = 0.6$\n- $\\phi_{3}(0.3) = 0$\n\n现在，我们可以写出 $u_{h}(0.3, \\xi)$ 的具体gPC展开式：\n$$u_{h}(0.3, \\xi) = \\sum_{\\alpha=0}^{3} \\left( c_{1,\\alpha}\\,\\phi_{1}(0.3) + c_{2,\\alpha}\\,\\phi_{2}(0.3) + c_{3,\\alpha}\\,\\phi_{3}(0.3) \\right) \\mathrm{He}_{\\alpha}(\\xi)$$\n令每个Hermite多项式的总系数为 $d_{\\alpha}$：\n$$d_{\\alpha} = c_{1,\\alpha}\\,\\phi_{1}(0.3) + c_{2,\\alpha}\\,\\phi_{2}(0.3) + c_{3,\\alpha}\\,\\phi_{3}(0.3)$$\n因此，$u_{h}(0.3, \\xi) = \\sum_{\\alpha=0}^{3} d_{\\alpha} \\mathrm{He}_{\\alpha}(\\xi)$。\n\n使用值 $\\phi_{1}(0.3)=0.4$, $\\phi_{2}(0.3)=0.6$ 和 $\\phi_{3}(0.3)=0$ 以及给定的矩阵 $\\boldsymbol{C}$：\n- 对于 $\\alpha=0$: $d_{0} = c_{1,0}(0.4) + c_{2,0}(0.6) = (1.0)(0.4) + (2.0)(0.6) = 0.4 + 1.2 = 1.6$\n- 对于 $\\alpha=1$: $d_{1} = c_{1,1}(0.4) + c_{2,1}(0.6) = (0.5)(0.4) + (-0.2)(0.6) = 0.20 - 0.12 = 0.08$\n- 对于 $\\alpha=2$: $d_{2} = c_{1,2}(0.4) + c_{2,2}(0.6) = (-0.3)(0.4) + (0.4)(0.6) = -0.12 + 0.24 = 0.12$\n- 对于 $\\alpha=3$: $d_{3} = c_{1,3}(0.4) + c_{2,3}(0.6) = (0.0)(0.4) + (0.25)(0.6) = 0 + 0.15 = 0.15$\n\n$u_{h}(0.3, \\xi)$ 的均值 $\\mu$ 是其期望值 $\\mathbb{E}[u_{h}(0.3, \\xi)]$。根据期望的线性性质：\n$$\\mu = \\mathbb{E}\\left[\\sum_{\\alpha=0}^{3} d_{\\alpha} \\mathrm{He}_{\\alpha}(\\xi)\\right] = \\sum_{\\alpha=0}^{3} d_{\\alpha} \\mathbb{E}[\\mathrm{He}_{\\alpha}(\\xi)]$$\n利用性质 $\\mathbb{E}[\\mathrm{He}_{\\alpha}(\\xi)] = \\delta_{\\alpha 0}$，我们得到：\n$$\\mu = d_{0} \\mathbb{E}[\\mathrm{He}_{0}(\\xi)] + \\sum_{\\alpha=1}^{3} d_{\\alpha} \\mathbb{E}[\\mathrm{He}_{\\alpha}(\\xi)] = d_{0} \\cdot 1 + \\sum_{\\alpha=1}^{3} d_{\\alpha} \\cdot 0 = d_{0}$$\n因此，均值为 $\\mu = 1.6$。\n\n$u_{h}(0.3, \\xi)$ 的方差 $\\sigma^{2}$ 由 $\\mathbb{V}[u_{h}(0.3, \\xi)] = \\mathbb{E}[(u_{h}(0.3, \\xi) - \\mu)^2]$ 给出。\n由于 $\\mu = d_{0} \\mathrm{He}_{0}(\\xi)$（因为 $\\mathrm{He}_{0}(\\xi) = 1$），与均值的偏差为：\n$$u_{h}(0.3, \\xi) - \\mu = \\left(\\sum_{\\alpha=0}^{3} d_{\\alpha} \\mathrm{He}_{\\alpha}(\\xi)\\right) - d_{0}\\mathrm{He}_{0}(\\xi) = \\sum_{\\alpha=1}^{3} d_{\\alpha} \\mathrm{He}_{\\alpha}(\\xi)$$\n那么方差为：\n$$\\sigma^{2} = \\mathbb{E}\\left[ \\left( \\sum_{\\alpha=1}^{3} d_{\\alpha} \\mathrm{He}_{\\alpha}(\\xi) \\right)^2 \\right] = \\mathbb{E}\\left[ \\left( \\sum_{\\alpha=1}^{3} d_{\\alpha} \\mathrm{He}_{\\alpha}(\\xi) \\right) \\left( \\sum_{\\beta=1}^{3} d_{\\beta} \\mathrm{He}_{\\beta}(\\xi) \\right) \\right]$$\n$$\\sigma^{2} = \\sum_{\\alpha=1}^{3}\\sum_{\\beta=1}^{3} d_{\\alpha}d_{\\beta} \\mathbb{E}[\\mathrm{He}_{\\alpha}(\\xi)\\mathrm{He}_{\\beta}(\\xi)]$$\n使用正交性 $\\mathbb{E}[\\mathrm{He}_{\\alpha}(\\xi)\\mathrm{He}_{\\beta}(\\xi)] = \\alpha! \\delta_{\\alpha\\beta}$：\n$$\\sigma^{2} = \\sum_{\\alpha=1}^{3}\\sum_{\\beta=1}^{3} d_{\\alpha}d_{\\beta} (\\alpha! \\delta_{\\alpha\\beta}) = \\sum_{\\alpha=1}^{3} d_{\\alpha}^2 (\\alpha!)$$\n代入计算出的 $d_{\\alpha}$ 值：\n$$\\sigma^{2} = d_{1}^2(1!) + d_{2}^2(2!) + d_{3}^2(3!)$$\n$$\\sigma^{2} = (0.08)^2(1) + (0.12)^2(2) + (0.15)^2(6)$$\n$$\\sigma^{2} = 0.0064 + (0.0144)(2) + (0.0225)(6)$$\n$$\\sigma^{2} = 0.0064 + 0.0288 + 0.135$$\n$$\\sigma^{2} = 0.1702$$\n\n题目要求结果四舍五入到四位有效数字。\n均值 $\\mu=1.6$，保留四位有效数字为 $1.600$。\n方差 $\\sigma^{2}=0.1702$，已经有四位有效数字。\n\n最终答案由均值 $\\mu = 1.600$ 和方差 $\\sigma^{2} = 0.1702$ 组成。", "answer": "$$\n\\boxed{\n\\begin{pmatrix}\n1.600 & 0.1702\n\\end{pmatrix}\n}\n$$", "id": "2600487"}, {"introduction": "任何计算模型的开发都离不开严格的验证与确认 (Verification and Validation, V&V)。在随机有限元方法的背景下，这意味着我们不仅要确保代码能正确求解确定性物理问题，还要能准确地传播不确定性。这个综合性练习将引导您完成一个基于蒙特卡洛的随机有限元程序的验证全过程。您将通过将一维杆件随机弹性模量问题的数值模拟结果与解析解进行对比，来验证您代码的正确性，这是计算科学与工程领域的一项核心实践技能。[@problem_id:2686978]", "problem": "考虑一根长度为 $L$、横截面积恒为 $A$ 的平直等截面一维轴向杆。该杆承受沿其轴线作用的、单位长度上均匀分布的轴向体力 $b$。杆的两端均被固定，即位移边界条件为 $u(0)=0$ 和 $u(L)=0$。轴向位移场 $u(x)$ 满足一维力平衡和线性弹性条件，其基本出发点如下：平衡的强形式 $dN/dx + b = 0$，其中轴力 $N(x) = A \\sigma(x)$；几何关系 $\\varepsilon = du/dx$；以及 Hooke 定律 $\\sigma = E \\varepsilon$，其中 $E$ 为杨氏模量。假设为小应变和线性行为。\n\n在本问题中，杨氏模量 $E$ 是不确定的，并被建模为杆上单一的空间均匀随机变量（即 $E$ 的同一个实现适用于所有单元以及所有 $x \\in [0,L]$）。随机变量 $E$ 服从对数正态分布，其特征为均值 $\\mu_E$ 和变异系数 $c_E$。所有物理量必须采用国际单位制 (SI)：长度单位为米 (m)，面积单位为平方米 (m$^2$)，力单位为牛顿 (N)，应力单位为帕斯卡 (Pa)，位移单位为米 (m)。不涉及角度。程序的所有输出必须是无量纲的布尔值，因此没有单位。\n\n您需要通过蒙特卡洛模拟 (MCS) 来验证一个随机有限元方法 (SFEM) 的实现，方法是复现两端固定条件下跨中节点位移的解析均值和方差。使用包含 $N_e$ 个均匀两节点杆单元的标准线性有限元离散化，对均布体力 $b$ 采用协调单元荷载向量，并在两端精确施加 Dirichlet 边界条件。对于偶数个单元，跨中对应于 $x=L/2$ 处的内部节点。由于 $E$ 在空间上是均匀的，组装后的全局刚度矩阵 $K$ 与 $E$ 成线性比例关系，而对于固定的荷载向量 $f$，位移向量则与 $E$ 成反比。利用这一结构来避免重复求解：首先计算一次单位模量情况 ($E=1$) 下的确定性位移向量，然后通过缩放将 $E$ 的样本映射为位移样本。\n\n您的程序需要执行以下任务：\n- 对每个测试用例，组装 $E=1$ 的有限元模型，并计算跨中节点位移 $u_{\\text{mid}}^{(1)}$。\n- 将 $E$ 建模为均值为 $\\mu_E$、变异系数为 $c_E$ 的对数正态随机变量。仅使用对数正态分布的成熟性质，推导出以 $\\mu_E$ 和 $c_E$ 表示的解析期望 $\\mathbb{E}[1/E]$ 和方差 $\\operatorname{Var}[1/E]$，并由此获得跨中位移的解析均值和方差，其缩放关系为 $u_{\\text{mid}} = u_{\\text{mid}}^{(1)}/E$。\n- 使用固定的、确定性的种子执行蒙特卡洛模拟，以生成 $E$ 的样本并计算 $u_{\\text{mid}}$ 的样本，然后使用总体公式估算 $u_{\\text{mid}}$ 的样本均值和样本方差。\n- 对每个测试用例，使用容差规则 $\\lvert \\widehat{m} - m \\rvert \\le \\max(r_{\\text{tol}} \\lvert m \\rvert, a_{\\text{tol}})$ 和 $\\lvert \\widehat{v} - v \\rvert \\le \\max(r_{\\text{tol}} \\lvert v \\rvert, a_{\\text{tol}})$ 将蒙特卡洛估计值与解析均值和方差进行比较，其中 $\\widehat{m}$ 和 $\\widehat{v}$ 是蒙特卡洛估计值，$m$ 和 $v$ 是解析值，$r_{\\text{tol}}$ 是相对容差，$a_{\\text{tol}}$ 是绝对容差。当且仅当两个比较都通过时，测试用例的布尔结果为真。\n\n您的程序必须为以下测试套件实现此验证，所有量均以国际单位制 (SI) 提供：\n- 测试用例 1 (正常情况)：$L = 2.0$, $A = 0.01$, $b = 1.0 \\times 10^{5}$, $\\mu_E = 2.0 \\times 10^{11}$, $c_E = 0.1$, $N_e = 10$, 蒙特卡洛样本数 $N_s = 100000$, 均值相对容差 $r_{\\text{tol},m} = 0.01$, 方差相对容差 $r_{\\text{tol},v} = 0.03$, 绝对容差 $a_{\\text{tol},m} = 0$, $a_{\\text{tol},v} = 0$。\n- 测试用例 2 (零变异性的退化边界情况)：$L = 1.0$, $A = 0.005$, $b = 5.0 \\times 10^{4}$, $\\mu_E = 1.5 \\times 10^{11}$, $c_E = 0.0$, $N_e = 8$, $N_s = 5000$, $r_{\\text{tol},m} = 1.0 \\times 10^{-12}$, $r_{\\text{tol},v} = 0.0$, $a_{\\text{tol},m} = 0$, $a_{\\text{tol},v} = 1.0 \\times 10^{-24}$。\n- 测试用例 3 (高变异性情况)：$L = 3.0$, $A = 0.02$, $b = 2.0 \\times 10^{5}$, $\\mu_E = 7.0 \\times 10^{10}$, $c_E = 0.5$, $N_e = 20$, $N_s = 200000$, $r_{\\text{tol},m} = 0.015$, $r_{\\text{tol},v} = 0.03$, $a_{\\text{tol},m} = 0$, $a_{\\text{tol},v} = 0$。\n\n实现和数值要求：\n- 使用均匀网格，其中 $N_e$ 为偶数，采用线性形函数，并对均匀体力 $b$ 使用协调单元荷载向量。精确施加 $u(0)=0$ 和 $u(L)=0$。\n- 每个测试用例计算一次 $E=1$ 时的确定性跨中位移 $u_{\\text{mid}}^{(1)}$，通过有限元组装和求解完成。\n- 使用从 $\\mu_E$ 和 $c_E$ 得到的标准参数化，以及所有测试用例共用的一个固定伪随机数生成器种子，来生成 $E$ 的对数正态样本。\n- 使用总体公式估算样本均值和方差。\n- 执行上述容差检查。\n\n最终输出格式：\n- 您的程序应生成单行输出，其中包含三个测试用例的布尔结果，格式为方括号内以逗号分隔的列表（例如，“[True,False,True]”）。不允许有其他输出。", "solution": "我们从一维轴向平衡和线性弹性理论出发。轴向力平衡方程为 $dN/dx + b = 0$，其中轴力 $N(x) = A \\sigma(x)$，应变 $\\varepsilon(x) = du/dx$，Hooke 定律为 $\\sigma(x) = E \\varepsilon(x)$。消去 $\\sigma$ 和 $\\varepsilon$ 得到强形式方程\n$$\n\\frac{d}{dx} \\left( A E \\frac{du}{dx} \\right) + b = 0 \\quad \\text{on } x \\in (0,L), \\quad u(0)=0, \\quad u(L)=0.\n$$\n对于常数 $A$ 和空间均匀的 $E$，积分可得一个二次精确位移场；由于两端均为 Dirichlet 条件，该场是唯一确定的。在采用 $N_e$ 个均匀线性单元（两节点杆）的有限元方法中，Galerkin 公式法得到组装后的线性系统\n$$\nK(E) \\, \\mathbf{u} = \\mathbf{f},\n$$\n其中，在施加 $u(0)=u(L)=0$ 后，$K(E)$ 在内部自由度上是对称正定的。对于长度为 $h=L/N_e$ 区间上的一个两节点单元，其模量为 $E$ 时的单元刚度为\n$$\nk_e(E) = \\frac{A E}{h} \\begin{bmatrix} 1 & -1 \\\\ -1 & 1 \\end{bmatrix},\n$$\n对应于均匀体力 $b$ 的协调单元荷载向量为\n$$\n\\mathbf{f}_e = \\frac{b h}{2} \\begin{bmatrix} 1 \\\\ 1 \\end{bmatrix}.\n$$\n对所有单元进行组装并施加齐次 Dirichlet 边界条件，得到作用于内部节点的简化系统，从中可以求得节点位移向量 $\\mathbf{u}(E)$。由于 $k_e(E)$ 以及因此的 $K(E)$ 都与 $E$ 成线性比例关系，而 $\\mathbf{f}$ 不依赖于 $E$，我们有\n$$\nK(E) = E \\, K(1), \\quad \\Rightarrow \\quad \\mathbf{u}(E) = K(E)^{-1} \\mathbf{f} = \\frac{1}{E} K(1)^{-1} \\mathbf{f} = \\frac{1}{E} \\, \\mathbf{u}^{(1)},\n$$\n其中 $\\mathbf{u}^{(1)} := \\mathbf{u}(E=1)$ 是单位模量情况下的位移向量。因此，对于跨中节点（当 $N_e$ 为偶数时，这是一个内部节点），其位移为\n$$\nu_{\\text{mid}}(E) = \\frac{u_{\\text{mid}}^{(1)}}{E}.\n$$\n\n我们现在将不确定性从随机模量 $E$ 传播到 $u_{\\text{mid}}$。杨氏模量被建模为均值为 $\\mu_E$、变异系数为 $c_E$ 的对数正态分布。如果 $E$ 是对数正态的，那么 $\\ln E$ 服从高斯分布，其参数 $\\mu$ 和 $\\sigma^2$ 满足众所周知的关系\n$$\n\\mathbb{E}[E] = \\mu_E = e^{\\mu + \\frac{1}{2} \\sigma^2}, \\qquad \\operatorname{Var}(E) = \\mu_E^2 \\, c_E^2 = \\left(e^{\\sigma^2} - 1\\right) e^{2\\mu + \\sigma^2}.\n$$\n由此，可以求得方差参数为\n$$\n\\sigma^2 = \\ln(1 + c_E^2),\n$$\n位置参数为\n$$\n\\mu = \\ln(\\mu_E) - \\frac{1}{2} \\sigma^2.\n$$\n对数正态变量的倒数也是对数正态的：如果 $E \\sim \\text{LogNormal}(\\mu, \\sigma^2)$，那么 $Y := 1/E \\sim \\text{LogNormal}(-\\mu, \\sigma^2)$。于是，\n$$\n\\mathbb{E}\\!\\left[\\frac{1}{E}\\right] = e^{-\\mu + \\frac{1}{2} \\sigma^2}, \\qquad \\operatorname{Var}\\!\\left(\\frac{1}{E}\\right) = \\left(e^{\\sigma^2} - 1\\right) e^{-2\\mu + \\sigma^2}.\n$$\n因此，由于 $u_{\\text{mid}}(E) = u_{\\text{mid}}^{(1)} \\cdot (1/E)$，跨中位移的解析均值和方差为\n$$\nm := \\mathbb{E}[u_{\\text{mid}}] = u_{\\text{mid}}^{(1)} \\, \\mathbb{E}\\!\\left[\\frac{1}{E}\\right] = u_{\\text{mid}}^{(1)} \\, e^{-\\mu + \\frac{1}{2} \\sigma^2},\n$$\n$$\nv := \\operatorname{Var}(u_{\\text{mid}}) = \\left(u_{\\text{mid}}^{(1)}\\right)^2 \\, \\operatorname{Var}\\!\\left(\\frac{1}{E}\\right) = \\left(u_{\\text{mid}}^{(1)}\\right)^2 \\left(e^{\\sigma^2} - 1\\right) e^{-2\\mu + \\sigma^2}.\n$$\n\n算法设计：\n- 对每个测试用例，组装 $E=1$ 时的全局刚度矩阵和荷载向量，以计算 $\\mathbf{u}^{(1)}$ 并提取 $u_{\\text{mid}}^{(1)}$。此过程使用上面定义的单元矩阵 $k_e(1)$ 和 $\\mathbf{f}_e$ 以及标准组装方法。通过移除刚度矩阵的第一行和最后一列以及荷载向量中的相应条目来施加 $u(0)=u(L)=0$。求解简化后的线性系统，并用零值在边界处重构完整的位移向量。\n- 通过 $\\sigma^2 = \\ln(1+c_E^2)$ 和 $\\mu = \\ln(\\mu_E) - \\frac{1}{2}\\sigma^2$ 将 $\\mu_E$ 和 $c_E$ 转换为底层正态分布的参数 $\\mu$ 和 $\\sigma^2$。通过设置 $\\sigma=0$ 来处理 $c_E=0$ 的退化情况，这将产生一个确定性的 $E=\\mu_E$。\n- 使用上述公式计算 $u_{\\text{mid}}$ 的解析均值 $m$ 和方差 $v$。\n- 使用对数正态参数化和固定的种子（以保证可复现性）生成 $N_s$ 个独立的 $E$ 样本。通过 $u_{\\text{mid}}^{(i)} = u_{\\text{mid}}^{(1)}/E^{(i)}$ 将这些样本映射为位移样本，而无需重新求解线性系统，这是有效的，因为存在线性缩放关系 $K(E)=E K(1)$。\n- 使用总体公式（即，方差计算中使用除数 $N_s$）估算蒙特卡洛均值 $\\widehat{m}$ 和方差 $\\widehat{v}$。将估计值与每个测试用例的解析值使用容差进行比较。当且仅当均值和方差的比较都满足 $\\lvert \\widehat{m} - m \\rvert \\le \\max(r_{\\text{tol},m}\\lvert m \\rvert, a_{\\text{tol},m})$ 和 $\\lvert \\widehat{v} - v \\rvert \\le \\max(r_{\\text{tol},v}\\lvert v \\rvert, a_{\\text{tol},v})$ 时，布尔结果为真。\n\n关于数值真实性的备注：\n- 在此一维问题设定中，由于存在二次精确解，当使用均匀网格和协调荷载时，对于 $E=1$ 的确定性跨中位移等于连续问题的精确跨中值；因此，在这种荷载下，有限元解在节点处是精确的。这确保了随机验证中唯一的差异来源是蒙特卡洛抽样误差，而不是空间离散化误差。\n- 所有单位始终采用国际单位制 (SI)；最终的布尔输出根据其构造是无量纲的。\n\n程序输出单行，其中包含一个包含三个布尔值的列表，每个测试用例一个，顺序与问题陈述中列出的顺序相同。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef assemble_and_solve_unit_mid_displacement(L, A, b, Ne):\n    \"\"\"\n    Assemble 1D bar FEM with linear elements, uniform mesh, consistent body force,\n    Dirichlet BC u(0)=u(L)=0, and E=1. Return the mid-span nodal displacement.\n    \"\"\"\n    assert Ne % 2 == 0, \"Number of elements must be even to have a mid-span node.\"\n    nn = Ne + 1\n    h = L / Ne\n\n    # Global stiffness and load (use E=1 here)\n    K = np.zeros((nn, nn), dtype=float)\n    f = np.zeros(nn, dtype=float)\n\n    # Element matrices for E=1\n    ke = (A / h) * np.array([[1.0, -1.0],\n                              [-1.0, 1.0]], dtype=float)\n    fe = (b * h / 2.0) * np.array([1.0, 1.0], dtype=float)\n\n    # Assembly\n    for e in range(Ne):\n        n1 = e\n        n2 = e + 1\n        K[n1, n1] += ke[0, 0]\n        K[n1, n2] += ke[0, 1]\n        K[n2, n1] += ke[1, 0]\n        K[n2, n2] += ke[1, 1]\n        f[n1] += fe[0]\n        f[n2] += fe[1]\n\n    # Apply Dirichlet BCs: u(0)=0, u(L)=0 -> remove first and last DOFs\n    interior = np.arange(1, nn - 1)\n    K_ff = K[np.ix_(interior, interior)]\n    f_f = f[interior]\n\n    # Solve for interior DOFs\n    u_f = np.linalg.solve(K_ff, f_f)\n\n    # Reconstruct full displacement vector\n    u = np.zeros(nn, dtype=float)\n    u[interior] = u_f\n\n    # Mid-span node index\n    mid_node = Ne // 2\n    return u[mid_node]\n\ndef lognormal_params_from_mean_cov(mean, cov):\n    \"\"\"\n    Given mean and coefficient of variation of a lognormal variable,\n    return (mu, sigma) of the underlying normal distribution.\n    Handle cov=0 as the degenerate deterministic case with sigma=0.\n    \"\"\"\n    if cov == 0.0:\n        sigma2 = 0.0\n        sigma = 0.0\n        mu = np.log(mean) if mean > 0 else -np.inf  # mean should be > 0 for E\n        return mu, sigma\n    sigma2 = np.log(1.0 + cov * cov)\n    sigma = np.sqrt(sigma2)\n    mu = np.log(mean) - 0.5 * sigma2\n    return mu, sigma\n\ndef analytic_mean_var_u_mid(u_mid_unit, mean_E, cov_E):\n    \"\"\"\n    Using properties of the lognormal distribution, compute analytic mean and variance\n    of u_mid = u_mid_unit / E, given mean and cov of E.\n    \"\"\"\n    # Handle both general and degenerate case\n    mu, sigma = lognormal_params_from_mean_cov(mean_E, cov_E)\n    # E[1/E] and Var[1/E]\n    # For degenerate cov=0, sigma=0 => returns exact reciprocal\n    E_inv_mean = np.exp(-mu + 0.5 * sigma * sigma)\n    E_inv_var = (np.exp(sigma * sigma) - 1.0) * np.exp(-2.0 * mu + sigma * sigma)\n    m = u_mid_unit * E_inv_mean\n    v = (u_mid_unit ** 2) * E_inv_var\n    return m, v\n\ndef within_tolerance(estimate, truth, rtol, atol):\n    return abs(estimate - truth) <= max(rtol * abs(truth), atol)\n\ndef run_case(case, rng):\n    \"\"\"\n    Execute one test case:\n    case = (L, A, b, mean_E, cov_E, Ne, Ns, rtol_m, rtol_v, atol_m, atol_v)\n    Returns True if both mean and variance checks pass, else False.\n    \"\"\"\n    (L, A, b, mean_E, cov_E, Ne, Ns, rtol_m, rtol_v, atol_m, atol_v) = case\n\n    # Deterministic mid-span displacement for E=1 via FEM\n    u_mid_unit = assemble_and_solve_unit_mid_displacement(L, A, b, Ne)\n\n    # Analytic mean and variance\n    m_true, v_true = analytic_mean_var_u_mid(u_mid_unit, mean_E, cov_E)\n\n    # Sample E and compute u_mid samples via scaling\n    mu, sigma = lognormal_params_from_mean_cov(mean_E, cov_E)\n    if sigma == 0.0:\n        E_samples = np.full(Ns, mean_E, dtype=float)\n    else:\n        E_samples = rng.lognormal(mean=mu, sigma=sigma, size=Ns)\n\n    u_samples = u_mid_unit / E_samples\n\n    # Monte Carlo estimates (population statistics)\n    m_hat = float(np.mean(u_samples))\n    v_hat = float(np.var(u_samples))  # population variance\n\n    # Tolerance checks\n    mean_ok = within_tolerance(m_hat, m_true, rtol_m, atol_m)\n    var_ok = within_tolerance(v_hat, v_true, rtol_v, atol_v)\n\n    return bool(mean_ok and var_ok)\n\ndef solve():\n    # Define the test cases from the problem statement.\n    # (L, A, b, mean_E, cov_E, Ne, Ns, rtol_m, rtol_v, atol_m, atol_v)\n    test_cases = [\n        (2.0, 0.01, 1.0e5, 2.0e11, 0.1, 10, 100000, 0.01, 0.03, 0.0, 0.0),\n        (1.0, 0.005, 5.0e4, 1.5e11, 0.0, 8, 5000, 1.0e-12, 0.0, 0.0, 1.0e-24),\n        (3.0, 0.02, 2.0e5, 7.0e10, 0.5, 20, 200000, 0.015, 0.03, 0.0, 0.0),\n    ]\n\n    # Fixed seed for reproducibility\n    rng = np.random.default_rng(seed=123456)\n\n    results = []\n    for case in test_cases:\n        res = run_case(case, rng)\n        results.append(res)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "2686978"}]}