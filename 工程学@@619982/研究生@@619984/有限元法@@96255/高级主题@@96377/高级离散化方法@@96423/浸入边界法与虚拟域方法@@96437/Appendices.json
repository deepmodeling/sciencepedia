{"hands_on_practices": [{"introduction": "在我们深入研究复杂的数值实现之前，通过一个简化的分析模型来建立直观理解是至关重要的。这个练习旨在阐明基于罚函数法的浸入边界或虚拟区域方法的一个核心概念：一致性误差。通过分析求解一个一维稳态斯托克斯流动问题，您将推导出使用Brinkman罚函数法强制执行无滑移边界条件时所产生的速度边界层厚度和曳力误差，从而深刻理解罚函数参数$\\eta$与模型精度之间的权衡关系 [@problem_id:2567670]。", "problem": "考虑一个占据区域 $0 < y < H$ 的通道内的二维、定常、不可压缩斯托克斯流，该流体由一个恒定的流向体积力 $g$（单位为加速度）驱动，该力仅作用于流体区域。位于 $y=0$ 的底壁由一个占据 $y<0$ 区域的虚拟固体表示，并在单域公式中通过 Brinkman 罚函数法来施加。设速度是单向的，沿流向为 $u = u(y)$，并假设运动粘度为 $\\nu$，罚函数时间尺度为 $\\eta$，掩模函数为 $\\chi(y)$，其中当 $0<y<H$ 时 $\\chi(y)=0$，当 $y<0$ 时 $\\chi(y)=1$。稳态一维动量方程为\n$$\n\\nu\\,\\frac{d^2 u}{dy^2} + \\big(1-\\chi(y)\\big)\\,g - \\chi(y)\\,\\frac{1}{\\eta}\\,u = 0,\n$$\n边界条件为：顶壁 $u(H)=0$ 处为无滑移条件，当 $y\\to -\\infty$ 时速度有界，并且在 $y=0$ 处速度 $u$ 和粘性剪切 $\\nu\\,u'(y)$ 连续。\n\n任务：\n- 从上述控制方程和界面条件出发，推导在受罚（固体）区域中的边界层方程，并证明速度边界层厚度 $\\delta$ 与 $\\sqrt{\\nu \\eta}$ 成比例关系。\n- 求解分段耦合问题，以获得由 Brinkman 方法计算出的作用在虚拟固体上的力。将计算出的单位翼展阻力定义为\n$$\nF_{\\mathrm{pen}} = \\int_{-\\infty}^{0} \\frac{1}{\\eta}\\,u(y)\\,dy,\n$$\n并将斯托克斯通道中真实无滑移底壁的精确阻力定义为\n$$\nF_{\\mathrm{exact}} = \\frac{g\\,H}{2}.\n$$\n计算相对阻力误差，其定义为\n$$\n\\mathcal{E}_{\\mathrm{rel}} = \\frac{F_{\\mathrm{pen}}-F_{\\mathrm{exact}}}{F_{\\mathrm{exact}}}.\n$$\n\n答案要求：\n- 以关于 $\\mathcal{E}_{\\mathrm{rel}}$ 的单一闭式解析表达式的形式提供最终答案，该表达式仅包含 $H$、$\\nu$ 和 $\\eta$。最终答案中不要包含任何单位。", "solution": "所提出的问题是数学物理学中一个有效的、适定的问题，具体来说，是在有限元法和计算流体动力学的背景下。它在科学上基于斯托克斯流理论和 Brinkman 罚函数法。所有必要的数据、方程和条件都已给出，并且没有明显的矛盾。因此，可以推导出严谨的解。\n\n稳态单向速度剖面 $u(y)$ 的控制方程由下式给出\n$$\n\\nu\\,\\frac{d^2 u}{dy^2} + \\big(1-\\chi(y)\\big)\\,g - \\chi(y)\\,\\frac{1}{\\eta}\\,u = 0,\n$$\n其中掩模函数 $\\chi(y)$ 对区域进行划分。我们在两个独立的区域中分析该方程：流体区域（$0 < y < H$）和虚拟固体区域（$y < 0$）。\n\n1.  **在虚拟固体区域（$y < 0$）的分析**\n\n在此区域中，$\\chi(y) = 1$。控制方程简化为一个齐次二阶常微分方程：\n$$\n\\nu\\,\\frac{d^2 u}{dy^2} - \\frac{1}{\\eta}\\,u = 0\n$$\n$$\n\\frac{d^2 u}{dy^2} - \\frac{1}{\\nu\\eta}\\,u = 0\n$$\n这就是受罚固体区域的边界层方程。我们定义一个特征长度尺度 $\\delta = \\sqrt{\\nu\\eta}$。方程变为：\n$$\n\\frac{d^2 u}{dy^2} - \\frac{1}{\\delta^2}\\,u = 0\n$$\n该区域中 $u(y)$ 的通解，我们记为 $u_s(y)$，是：\n$$\nu_s(y) = C_1 \\exp\\left(\\frac{y}{\\delta}\\right) + C_2 \\exp\\left(-\\frac{y}{\\delta}\\right)\n$$\n问题指定当 $y \\to -\\infty$ 时速度必须保持有界。当 $y \\to -\\infty$ 时，项 $\\exp(-y/\\delta)$ 无界增长。为了满足有界性条件，其系数必须为零，因此 $C_2 = 0$。因此，固体区域中的速度剖面是一个指数衰减函数：\n$$\nu_s(y) = A \\exp\\left(\\frac{y}{\\delta}\\right)\n$$\n其中 $A$ 是一个常数。这种指数衰减在虚拟固体内部定义了一个速度边界层，其厚度 $\\delta$ 与 $\\sqrt{\\nu\\eta}$ 成比例关系。这就完成了第一个任务。\n\n2.  **在流体区域（$0 < y < H$）的分析**\n\n在此区域中，$\\chi(y) = 0$。控制方程简化为一个非齐次方程：\n$$\n\\nu\\,\\frac{d^2 u}{dy^2} + g = 0\n$$\n$$\n\\frac{d^2 u}{dy^2} = -\\frac{g}{\\nu}\n$$\n对该方程关于 $y$ 积分两次，得到流体区域中速度剖面的通解，我们记为 $u_f(y)$：\n$$\n\\frac{du_f}{dy} = -\\frac{g}{\\nu}y + B\n$$\n$$\nu_f(y) = -\\frac{g}{2\\nu}y^2 + By + C\n$$\n其中 $B$ 和 $C$ 是积分常数。\n\n3.  **边界和界面条件的应用**\n\n我们有三个未知常数 $A$、$B$ 和 $C$，可以使用给定的条件来确定它们：\ni.  **在 $y=0$ 处速度连续**：$u_s(0) = u_f(0)$。\n    $$\n    A \\exp(0) = -\\frac{g}{2\\nu}(0)^2 + B(0) + C \\implies A = C\n    $$\nii. **在 $y=0$ 处粘性剪切连续**：$\\nu \\frac{du_s}{dy}|_{y=0} = \\nu \\frac{du_f}{dy}|_{y=0}$，可简化为 $\\frac{du_s}{dy}|_{y=0} = \\frac{du_f}{dy}|_{y=0}$。\n    导数为：\n    $$\n    \\frac{du_s}{dy} = \\frac{A}{\\delta}\\exp\\left(\\frac{y}{\\delta}\\right) \\implies \\frac{du_s}{dy}|_{y=0} = \\frac{A}{\\delta}\n    $$\n    $$\n    \\frac{du_f}{dy} = -\\frac{g}{\\nu}y + B \\implies \\frac{du_f}{dy}|_{y=0} = B\n    $$\n    令它们相等得到：\n    $$\n    B = \\frac{A}{\\delta}\n    $$\niii. **在顶壁处的无滑移条件**：$u_f(H) = 0$。\n    $$\n    -\\frac{g}{2\\nu}H^2 + BH + C = 0\n    $$\n现在，我们求解这个关于 $A$、$B$ 和 $C$ 的三元线性方程组。将 $C=A$ 和 $B=A/\\delta$ 代入第三个方程：\n$$\n-\\frac{gH^2}{2\\nu} + \\left(\\frac{A}{\\delta}\\right)H + A = 0\n$$\n$$\nA\\left(\\frac{H}{\\delta} + 1\\right) = \\frac{gH^2}{2\\nu}\n$$\n$$\nA\\left(\\frac{H+\\delta}{\\delta}\\right) = \\frac{gH^2}{2\\nu}\n$$\n求解 $A$：\n$$\nA = \\frac{gH^2\\delta}{2\\nu(H+\\delta)}\n$$\n\n4.  **罚函数阻力的计算**\n\n由 Brinkman 方法计算的单位翼展阻力定义为：\n$$\nF_{\\mathrm{pen}} = \\int_{-\\infty}^{0} \\frac{1}{\\eta}\\,u(y)\\,dy\n$$\n代入解 $u_s(y) = A \\exp(y/\\delta)$：\n$$\nF_{\\mathrm{pen}} = \\frac{1}{\\eta} \\int_{-\\infty}^{0} A \\exp\\left(\\frac{y}{\\delta}\\right) dy = \\frac{A}{\\eta} \\left[ \\delta \\exp\\left(\\frac{y}{\\delta}\\right) \\right]_{-\\infty}^{0}\n$$\n$$\nF_{\\mathrm{pen}} = \\frac{A\\delta}{\\eta} \\left( \\exp(0) - \\lim_{y\\to-\\infty}\\exp\\left(\\frac{y}{\\delta}\\right) \\right) = \\frac{A\\delta}{\\eta} (1 - 0) = \\frac{A\\delta}{\\eta}\n$$\n使用关系式 $\\delta = \\sqrt{\\nu\\eta}$，我们有 $\\delta^2 = \\nu\\eta$，这意味着 $\\frac{\\delta}{\\eta} = \\frac{\\nu}{\\delta}$。因此：\n$$\nF_{\\mathrm{pen}} = A \\frac{\\nu}{\\delta}\n$$\n现在，代入常数 $A$ 的表达式：\n$$\nF_{\\mathrm{pen}} = \\left( \\frac{gH^2\\delta}{2\\nu(H+\\delta)} \\right) \\frac{\\nu}{\\delta} = \\frac{gH^2}{2(H+\\delta)}\n$$\n\n5.  **相对阻力误差的计算**\n\n真实无滑移壁的精确阻力由 $F_{\\mathrm{exact}} = \\frac{gH}{2}$ 给出。相对阻力误差 $\\mathcal{E}_{\\mathrm{rel}}$ 定义为：\n$$\n\\mathcal{E}_{\\mathrm{rel}} = \\frac{F_{\\mathrm{pen}}-F_{\\mathrm{exact}}}{F_{\\mathrm{exact}}} = \\frac{F_{\\mathrm{pen}}}{F_{\\mathrm{exact}}} - 1\n$$\n让我们计算比率 $\\frac{F_{\\mathrm{pen}}}{F_{\\mathrm{exact}}}$：\n$$\n\\frac{F_{\\mathrm{pen}}}{F_{\\mathrm{exact}}} = \\frac{\\frac{gH^2}{2(H+\\delta)}}{\\frac{gH}{2}} = \\frac{gH^2}{2(H+\\delta)} \\cdot \\frac{2}{gH} = \\frac{H}{H+\\delta}\n$$\n现在，将此代回相对误差的表达式中：\n$$\n\\mathcal{E}_{\\mathrm{rel}} = \\frac{H}{H+\\delta} - 1 = \\frac{H - (H+\\delta)}{H+\\delta} = \\frac{-\\delta}{H+\\delta}\n$$\n最后，通过代回 $\\delta = \\sqrt{\\nu\\eta}$，我们将结果用给定的参数 $H$、$\\nu$ 和 $\\eta$ 表示：\n$$\n\\mathcal{E}_{\\mathrm{rel}} = \\frac{-\\sqrt{\\nu\\eta}}{H+\\sqrt{\\nu\\eta}}\n$$\n该表达式表示了使用 Brinkman 罚函数法计算的阻力与固壁精确解析解相比的相对误差。负号表示罚函数法计算的阻力低估了精确阻力。当罚函数参数 $\\eta \\to 0$ 时，边界层厚度 $\\delta \\to 0$，误差 $\\mathcal{E}_{\\mathrm{rel}} \\to 0$，这正确地表明在强惩罚极限下，罚函数法收敛于精确解。", "answer": "$$\n\\boxed{\\frac{-\\sqrt{\\nu\\eta}}{H+\\sqrt{\\nu\\eta}}}\n$$", "id": "2567670"}, {"introduction": "任何可靠的数值方法的开发都离不开严格的验证过程。这个练习的任务是建立一个经典的流固耦合验证基准——黏性流体中振荡平板问题（也称为斯托克斯第二问题）。您将从第一性原理出发，推导流体速度场的振幅衰减和相位延迟的精确解析解，这些解将作为验证浸入边界或虚拟区域法数值模拟准确性的“金标准” [@problem_id:2567789]。这个过程强调了在处理更复杂的应用问题之前，确保代码能够复现已知物理现象的重要性。", "problem": "要求您为一个在粘性不可压缩流体中振荡的刚性板问题，形式化一个可复现、可通过代码验证的基准。该基准将作为有限元法 (FEM) 框架内浸入边界 (IB) 法和虚拟区域 (FD) 法的目标。目标是基于线性化非定常 Stokes 问题的精确解，计算垂直于振荡板的切向流体速度场的振幅衰减和相位滞后。这为验证数值 IB 和 FD 实现提供了参考目标，这些实现通过分布式拉格朗日乘子或在刚性极限下趋近于无滑移边界条件的罚函数法来强制施加板-流体运动学约束。\n\n考虑一个占据 $\\{ y \\ge 0 \\}$ 的无界半空间流体域，其中一个刚性的、无限延伸的板位于 $y = 0$。该板具有给定的切向速度 $u_{\\text{plate}}(t) = U_0 \\cos(\\omega t)$，其中 $U_0$ 是振幅，$\\omega$ 是角频率。假设如下：\n- 流体是牛顿流体、不可压缩的，且具有恒定的密度和粘度。\n- 运动是平面的且平行于板，因此唯一非零的速度分量是切向分量 $u(y,t)$，它仅依赖于 $y$ 和 $t$。\n- 振幅足够小，以至于对流项可以忽略不计，从而得到无背景压力梯度的线性化非定常 Stokes 方程。\n- IB/FD 强制施加的物理相关目标对应于约束在极限情况下恢复为板上无滑移边界条件的极限。\n\n从第一性原理出发，始于无压力梯度情况下切向分量 $u(y,t)$ 的线性化动量平衡方程，\n$$\n\\frac{\\partial u}{\\partial t} = \\nu \\frac{\\partial^2 u}{\\partial y^2},\n$$\n其中 $\\nu$ 是运动粘度。边界条件为\n$$\nu(0,t) = U_0 \\cos(\\omega t), \\quad \\lim_{y \\to \\infty} u(y,t) = 0.\n$$\n定义振幅比 $A(y)/U_0$ 为 $u(y,t)$ 的局部谐波振幅与板振幅 $U_0$ 的比值，并定义相位滞后 $\\phi(y)$（单位为弧度）为位置 $y$ 处的局部响应滞后于板振荡 $\\cos(\\omega t)$ 的时间相位。\n\n您的任务如下：\n1. 根据所述的控制方程和边界条件，推导振幅比 $A(y)/U_0$ 和相位滞后 $\\phi(y)$ 作为 $y$、$\\nu$ 和 $\\omega$ 的函数的闭式表达式。角度必须以弧度表示。\n2. 实现一个程序，该程序针对下面的每个测试用例，使用您推导的表达式计算数据对 $[A(y)/U_0,\\;\\phi(y)]$，将每个量四舍五入到六位小数，并按指定格式在单行上输出所有结果。您可以假设 $U_0 \\ne 0$ 并按定义用 $U_0$ 进行归一化。\n\n物理单位和报告要求：\n- 距离 $y$ 以米为单位。\n- 运动粘度 $\\nu$ 以 $\\text{m}^2/\\text{s}$ 为单位。\n- 角频率 $\\omega$ 以 $\\text{rad}/\\text{s}$ 为单位。\n- 振幅比 $A(y)/U_0$ 是无量纲的。\n- 相位滞后 $\\phi(y)$ 必须以弧度报告。\n- 将所有报告的数字四舍五入到六位小数。\n\n测试套件（五个案例）：\n- 案例 1：$(\\nu, \\omega, y) = (0.01, 2.0, 0.05)$。\n- 案例 2：$(\\nu, \\omega, y) = (0.01, 2.0, 0.0)$。\n- 案例 3：$(\\nu, \\omega, y) = (0.01, 2.0, 0.3)$。\n- 案例 4：$(\\nu, \\omega, y) = (0.001, 8.0, 0.02)$。\n- 案例 5：$(\\nu, \\omega, y) = (0.004, 0.5, 0.05)$。\n\n最终输出格式：\n- 您的程序应生成单行输出，其中包含一个长度为五的 Python 风格列表，每个条目是一个双元素列表 $[A(y)/U_0,\\;\\phi(y)]$，与上述案例一一对应。例如：\n\"[ [a1,p1],[a2,p2],[a3,p3],[a4,p4],[a5,p5] ]\"\n请勿在此列表前后打印任何额外文本。\n\n您的实现必须是完全自包含的，并且无需用户输入即可运行。角度必须以弧度返回，所有数值输出必须按规定四舍五入到六位小数。您的程序产生的数值结果将作为正确性的验收标准。", "solution": "所提出的问题是流体动力学中的一个经典练习，特别是对 Stokes 第二问题的分析，该问题描述了由振荡平板引起的流动。该问题是适定的，具有科学依据，并提供了所有必要信息来推导唯一的解析解。因此，它被认为是有效的。我们将继续进行推导。\n\n在域 $y \\ge 0$ 中，切向流体速度 $u(y,t)$ 的控制方程是一维非定常 Stokes 方程，其在数学上等同于扩散方程：\n$$\n\\frac{\\partial u}{\\partial t} = \\nu \\frac{\\partial^2 u}{\\partial y^2}\n$$\n在此，$\\nu$ 是流体的运动粘度。运动是由位于 $y=0$ 的板驱动的，该板进行切向振荡。边界条件为：\n$$\nu(0,t) = U_0 \\cos(\\omega t)\n$$\n$$\n\\lim_{y \\to \\infty} u(y,t) = 0\n$$\n第二个条件表明流体在远离板的无穷远处处于静止状态。我们寻求一个与板以相同角频率 $\\omega$ 振荡的周期性稳态解。\n\n为求解此线性偏微分方程，采用复变量是十分有利的。我们将真实速度 $u(y,t)$ 表示为复速度场 $\\tilde{u}(y,t)$ 的实部。令 $u(y,t) = \\text{Re}[\\tilde{u}(y,t)]$。板上的边界条件可以写为 $u(0,t) = \\text{Re}[U_0 e^{i\\omega t}]$，其中 $i$ 是虚数单位。因此，我们用复边界条件来构建关于 $\\tilde{u}(y,t)$ 的问题：\n$$\n\\tilde{u}(0,t) = U_0 e^{i\\omega t}\n$$\n我们假设解的形式为 $\\tilde{u}(y,t) = f(y)e^{i\\omega t}$，这将空间和时间依赖性分离开。将此试探解代入控制偏微分方程得到：\n$$\n\\frac{\\partial}{\\partial t} \\left( f(y) e^{i\\omega t} \\right) = \\nu \\frac{\\partial^2}{\\partial y^2} \\left( f(y) e^{i\\omega t} \\right)\n$$\n$$\ni\\omega f(y) e^{i\\omega t} = \\nu f''(y) e^{i\\omega t}\n$$\n两边同除以非零项 $e^{i\\omega t}$，得到关于复振幅函数 $f(y)$ 的二阶常微分方程：\n$$\nf''(y) - \\frac{i\\omega}{\\nu} f(y) = 0\n$$\n这是一个线性齐次常系数常微分方程。其特征方程为 $\\lambda^2 - i\\omega/\\nu = 0$，即 $\\lambda^2 = i\\omega/\\nu$。为了求根 $\\lambda$，我们必须计算虚数单位 $i$ 的平方根。在极坐标形式中，$i=e^{i\\pi/2}$。其平方根为 $\\pm e^{i\\pi/4} = \\pm(\\cos(\\pi/4) + i\\sin(\\pi/4)) = \\pm\\frac{1+i}{\\sqrt{2}}$。\n因此，特征根为：\n$$\n\\lambda = \\pm \\sqrt{\\frac{\\omega}{\\nu}} \\sqrt{i} = \\pm \\sqrt{\\frac{\\omega}{\\nu}} \\frac{1+i}{\\sqrt{2}} = \\pm (1+i) \\sqrt{\\frac{\\omega}{2\\nu}}\n$$\n我们定义一个特征长度尺度，$\\delta = \\sqrt{2\\nu/\\omega}$，通常称为粘性穿透深度或 Stokes 边界层厚度。使用此定义，根可简化为 $\\lambda = \\pm (1+i)/\\delta$。\n\n$f(y)$ 的通解是两个指数解的线性组合：\n$$\nf(y) = C_1 e^{(1+i)y/\\delta} + C_2 e^{-(1+i)y/\\delta}\n$$\n常数 $C_1$ 和 $C_2$ 由边界条件确定。无穷远处的条件 $\\lim_{y \\to \\infty} u(y,t) = 0$ 意味着复振幅也必须消失，即 $\\lim_{y \\to \\infty} f(y) = 0$。项 $e^{(1+i)y/\\delta} = e^{y/\\delta}e^{iy/\\delta}$ 的模 $e^{y/\\delta}$ 随 $y$ 呈指数增长。为使解保持有界并衰减至零，其系数 $C_1$ 必须为零。\n因此，解的形式简化为：\n$$\nf(y) = C_2 e^{-(1+i)y/\\delta}\n$$\n剩下的常数 $C_2$ 使用板上 $y=0$ 处的边界条件来确定。我们有 $\\tilde{u}(0,t) = f(0)e^{i\\omega t} = U_0 e^{i\\omega t}$，这要求 $f(0) = U_0$。将此应用于我们关于 $f(y)$ 的解：\n$$\nf(0) = C_2 e^0 = C_2 = U_0\n$$\n因此，复振幅的特解为：\n$$\nf(y) = U_0 e^{-(1+i)y/\\delta} = U_0 e^{-y/\\delta} e^{-iy/\\delta}\n$$\n完整的复速度场则为：\n$$\n\\tilde{u}(y,t) = f(y)e^{i\\omega t} = U_0 e^{-y/\\delta} e^{-iy/\\delta} e^{i\\omega t} = U_0 e^{-y/\\delta} e^{i(\\omega t - y/\\delta)}\n$$\n物理速度 $u(y,t)$ 是 $\\tilde{u}(y,t)$ 的实部：\n$$\nu(y,t) = \\text{Re}\\left[ U_0 e^{-y/\\delta} \\left(\\cos(\\omega t - y/\\delta) + i\\sin(\\omega t - y/\\delta)\\right) \\right]\n$$\n$$\nu(y,t) = U_0 e^{-y/\\delta} \\cos(\\omega t - y/\\delta)\n$$\n该解表示一个从板传播到流体中的阻尼横波。\n\n从这个最终表达式，我们可以直接确定我们感兴趣的量。该解的形式为 $u(y,t) = A(y) \\cos(\\omega t - \\phi(y))$，其中 $A(y)$ 是局部振幅，$\\phi(y)$ 是相对于板运动 $\\cos(\\omega t)$ 的相位滞后。\n通过比较，我们发现：\n1. 局部振幅为 $A(y) = U_0 e^{-y/\\delta}$。所要求的振幅比是：\n$$\n\\frac{A(y)}{U_0} = e^{-y/\\delta}\n$$\n2. 相位滞后为 $\\phi(y) = y/\\delta$。\n\n将 $\\delta = \\sqrt{2\\nu/\\omega}$ 的定义代入这些表达式，得到以给定物理参数为函数的最终公式：\n振幅比为：\n$$\n\\frac{A(y)}{U_0} = \\exp\\left(-y \\sqrt{\\frac{\\omega}{2\\nu}}\\right)\n$$\n以弧度为单位的相位滞后为：\n$$\n\\phi(y) = y \\sqrt{\\frac{\\omega}{2\\nu}}\n$$\n这些是计算基准值所需的闭式表达式。注意，对于 $y>0$，振幅被衰减，相位呈正滞后，这与物理直觉一致。对于 $y=0$ 的情况，这些公式正确地给出了振幅比为 $1$ 和相位滞后为 $0$ 的结果。", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes the amplitude attenuation and phase lag for an oscillating plate\n    in a viscous fluid (Stokes' second problem).\n    \"\"\"\n    # Test cases: tuples of (kinematic_viscosity, angular_frequency, distance_y)\n    # Units: nu (m^2/s), omega (rad/s), y (m)\n    test_cases = [\n        (0.01, 2.0, 0.05),\n        (0.01, 2.0, 0.0),\n        (0.01, 2.0, 0.3),\n        (0.001, 8.0, 0.02),\n        (0.004, 0.5, 0.05),\n    ]\n\n    # A list to store the formatted results for each case.\n    formatted_results = []\n\n    for case in test_cases:\n        nu, omega, y = case\n\n        # The core term y * sqrt(omega / (2 * nu)) appears in both amplitude\n        # and phase calculations.\n        # Handle the case where nu is zero to avoid division errors, although not\n        # present in the test suite.\n        if nu = 0:\n            # Physically, zero viscosity means no momentum transfer, so amplitude\n            # is zero for y > 0.\n            # However, the problem formulation implies nu > 0.\n            # In the limit nu->0, the exponent goes to infinity for y>0.\n            # Amp ratio would be 0, phase lag infinite.\n            # At y=0, the results are 1 and 0.\n            if y == 0:\n                amplitude_ratio = 1.0\n                phase_lag = 0.0\n            else:\n                # This case is physically ill-defined in the context of this problem\n                # but we handle it for robustness.\n                amplitude_ratio = 0.0\n                phase_lag = float('inf')\n        else:\n            alpha = y * np.sqrt(omega / (2 * nu))\n            amplitude_ratio = np.exp(-alpha)\n            phase_lag = alpha\n\n        # Format each number to six decimal places, ensuring trailing zeros.\n        amp_str = f\"{amplitude_ratio:.6f}\"\n        lag_str = f\"{phase_lag:.6f}\"\n\n        # Create the string representation for the pair [amplitude, phase].\n        formatted_results.append(f\"[{amp_str},{lag_str}]\")\n\n    # Combine all formatted pairs into the final output string.\n    final_output = f\"[{','.join(formatted_results)}]\"\n    print(final_output)\n\nsolve()\n```", "id": "2567789"}, {"introduction": "这个综合性练习将理论与实际应用相结合，指导您完成一个典型的计算流体动力学仿真流程。您将为低雷诺数下绕固定圆柱体的流动问题设计一个基于分布式拉格朗日乘子（DLM）的虚拟区域公式，这是一种与罚函数法不同的约束施加技术。这项任务涵盖了从推导弱形式、通过切割单元法处理复杂几何边界，到最终实现数值积分以计算曳力和升力等关键物理量的全过程 [@problem_id:2567766]。完成这项练习将使您对如何在有限元框架内模拟复杂边界问题有一个完整而实际的认识。", "problem": "使用有限元法和浸入式界面，为矩形域内嵌静止圆柱的稳态、不可压缩、低雷诺数绕流问题，设计一个数学上一致的虚构域格式。从矩形域 $\\,\\Omega \\subset \\mathbb{R}^2\\,$ 内的稳态斯托克斯方程出发，设动力粘度为 $\\,\\mu\\,$，域内包含一个半径为 $\\,R\\,$、中心为 $\\,\\boldsymbol{c}=(c_x,c_y)\\,$ 的圆形刚体 $\\,B\\subset\\Omega\\,$。流体占据区域 $\\,\\Omega_f=\\Omega\\setminus \\overline{B}\\,$，圆柱边界为 $\\,\\Gamma=\\partial B\\,$。无滑移条件 $\\,\\boldsymbol{u}=\\boldsymbol{0}\\,$ 在 $\\,\\Gamma\\,$ 上成立，且 $\\,\\boldsymbol{u}\\,$ 在 $\\,\\partial\\Omega\\,$ 上满足适当的边界条件（后续推导无需此条件）。使用以下基本出发点：\n\n- $\\,\\Omega_f\\,$ 内的稳态斯托克斯方程：\n$$\n-\\mu \\nabla^2 \\boldsymbol{u} + \\nabla p = \\boldsymbol{f}, \\quad \\nabla\\cdot \\boldsymbol{u} = 0.\n$$\n\n- 虚功原理以及边界 $\\,\\Gamma\\,$ 上的边界面力与试探函数的对偶配对。\n\nA 部分（推导）。使用分布式拉格朗日乘子 (DLM) 虚构域方法，将速度和压力场扩展到整个域 $\\,\\Omega\\,$，并引入一个定义在 $\\,\\Gamma\\,$ 上的拉格朗日乘子场 $\\,\\boldsymbol{\\lambda}\\,$，以便在弱形式下施加 $\\,\\Gamma\\,$ 上的无滑移条件 $\\,\\boldsymbol{u}=\\boldsymbol{0}\\,$。通过将动量方程和不可压缩性方程与试探函数相乘并在适当之处进行分部积分，推导出关于 $\\,(\\boldsymbol{u},p,\\boldsymbol{\\lambda})\\,$ 的耦合弱形式，并明确展示界面项 $\\,\\langle \\boldsymbol{\\lambda}, \\boldsymbol{v}\\rangle_{\\Gamma}\\,$ 是如何从施加 $\\,\\Gamma\\,$ 上的无滑移约束中产生的。然后，利用虚功率平衡和应力的定义，严格论证为何圆柱体所受的流体动力由界面牵引力的积分给出，并将阻力和升力用 $\\,\\boldsymbol{\\lambda}\\,$ 表示。请清楚地说明您所采用的所有假设和符号约定。\n\nB 部分（使用切割单元进行离散化）。考虑将方形域 $\\,\\Omega=[0,1]^2\\,$ 剖分为一个由 $\\,N\\times N\\,$ 个边长为 $\\,h=1/N\\,$ 的方形单元组成的均匀背景笛卡尔网格。根据需要对每个方格进行隐式剖分，以支持连续的分片线性速度空间和分片常数压力空间。通过水平集函数隐式地表示界面 $\\,\\Gamma\\,$：\n$$\n\\phi(\\boldsymbol{x}) = \\|\\boldsymbol{x}-\\boldsymbol{c}\\| - R.\n$$\n对于 $\\,\\Gamma\\,$ 上的数值积分，采用切割单元方法：在每个 $\\,\\phi\\,$ 值在单元边界上变号的单元中，通过在 $\\,\\phi\\,$ 值变号的边上进行线性插值来计算直线段，用这些直线段来近似 $\\,\\Gamma\\,$ 与该单元边界的交集。在每个这样的线段上使用中点法则，设计一个程序来近似 $\\,\\Gamma\\,$ 上的线积分。特别地，具体说明如何从给定的沿 $\\,\\Gamma\\,$ 的解析分布 $\\,\\boldsymbol{\\lambda}(\\boldsymbol{x})\\,$ 计算阻力和升力的近似值，包括如何用由 $\\,\\boldsymbol{x}=\\boldsymbol{c}+R(\\cos\\theta,\\sin\\theta)\\,$ 定义的极角 $\\,\\theta\\,$ 来参数化 $\\,\\boldsymbol{\\lambda}\\,$。角度必须以弧度为单位。假设为无量纲单位。\n\nC 部分（可计算的测试套件）。在 $\\,\\Omega=[0,1]^2\\,$ 中，实现您在 B 部分设计的切割单元积分方法，对以下四个测试案例（均使用 $\\,N=250\\,$）近似计算阻力和升力：\n\n- 案例 $\\,1\\,$ (一般常数乘子): $\\,\\boldsymbol{c}=(0.5,0.5)\\,$, $\\,R=0.3\\,$, 且 $\\,\\boldsymbol{\\lambda}(\\theta)=(\\alpha,\\beta)\\,$ 其中 $\\,\\alpha=1.2\\,$ 且 $\\,\\beta=-0.3\\,$.\n\n- 案例 $\\,2\\,$ (纯径向乘子): $\\,\\boldsymbol{c}=(0.33,0.65)\\,$, $\\,R=0.22\\,$, 且 $\\,\\boldsymbol{\\lambda}(\\theta)=A(\\cos\\theta,\\sin\\theta)\\,$ 其中 $\\,A=1.0\\,$.\n\n- 案例 $\\,3\\,$ (混合法向/切向加常数): $\\,\\boldsymbol{c}=(0.7,0.5)\\,$, $\\,R=0.29\\,$, 且\n$$\n\\boldsymbol{\\lambda}(\\theta)=(\\alpha,\\beta)+B(\\cos\\theta,\\sin\\theta)+C(-\\sin\\theta,\\cos\\theta),\n$$\n其中 $\\,\\alpha=0.5\\,$, $\\,\\beta=0.0\\,$, $\\,B=0.7\\,$, 且 $\\,C=-0.4\\,$.\n\n- 案例 $\\,4\\,$ (小半径常数乘子): $\\,\\boldsymbol{c}=(0.2,0.2)\\,$, $\\,R=0.05\\,$, 且 $\\,\\boldsymbol{\\lambda}(\\theta)=(\\alpha,\\beta)\\,$ 其中 $\\,\\alpha=-0.8\\,$ 且 $\\,\\beta=0.4\\,$.\n\n您的程序应使用您设计的切割线段中点积分法，为每个案例计算阻力和升力，结果为两个独立的浮点数。最终输出格式必须是包含单个列表的单行，结果按 $[\\text{阻力}_1,\\text{升力}_1,\\text{阻力}_2,\\text{升力}_2,\\text{阻力}_3,\\text{升力}_3,\\text{阻力}_4,\\text{升力}_4]$ 的顺序平铺。所有角度均使用弧度。由于该格式是无量纲的，不需要物理单位。输出列表的元素必须是浮点数。代码必须是完全自包含的，且不需要用户输入或外部文件。", "solution": "该问题在科学和数学上是合理的、适定的，并提供了一组清晰、自包含的任务。这是计算流体动力学和数值分析领域中的一个有效问题。我们开始进行解答。\n\n按照要求，解答分为两部分：A 部分，弱形式的理论推导和力的计算；B 部分，数值积分方案的设计。\n\nA 部分：虚构域格式的推导与力的计算\n\n我们从流体域 $\\Omega_f = \\Omega \\setminus \\overline{B}$ 中不可压缩流体的稳态斯托克斯方程开始，其动力粘度为 $\\mu$：\n$$-\\mu \\nabla^2 \\boldsymbol{u} + \\nabla p = \\boldsymbol{f} \\quad \\text{在 } \\Omega_f$$\n$$\\nabla\\cdot \\boldsymbol{u} = 0 \\quad \\text{在 } \\Omega_f$$\n并满足在刚体表面 $\\Gamma = \\partial B$ 上的无滑移边界条件：\n$$\\boldsymbol{u} = \\boldsymbol{0} \\quad \\text{在 } \\Gamma$$\n\n分布式拉格朗日乘子 (DLM) 虚构域方法将问题从复杂的流体域 $\\Omega_f$ 扩展到更简单的矩形域 $\\Omega$。速度场 $\\boldsymbol{u}$ 和压力场 $p$ 被扩展为在整个域 $\\Omega$ 上都有定义。刚体约束 $\\boldsymbol{u} = \\boldsymbol{0}$ 在界面 $\\Gamma$ 上不再通过构造得到满足，必须以弱形式施加。这是通过引入一个仅在界面 $\\Gamma$ 上定义的拉格朗日乘子场 $\\boldsymbol{\\lambda}$ 来实现的。\n\n为了推导弱形式，我们引入适当的函数空间。设 $V = [H^1(\\Omega)]^2$ 为速度场 $\\boldsymbol{u}$ 的空间，$Q = L^2_0(\\Omega)$ 为压力场 $p$ 的空间（在 $\\Omega$ 上均值为零的函数），$M = [H^{-1/2}(\\Gamma)]^2$ 为拉格朗日乘子 $\\boldsymbol{\\lambda}$ 的空间。相应的速度、压力和拉格朗日乘子的试探函数空间分别由 $\\boldsymbol{v} \\in V$、$q \\in Q$ 和 $\\boldsymbol{\\eta} \\in M$ 表示。\n\n弱形式是通过将控制方程与试探函数相乘，在域 $\\Omega$ 上积分，并应用分部积分法推导出来的。\n动量方程与试探函数 $\\boldsymbol{v} \\in V$ 相乘：\n$$\\int_{\\Omega} (-\\mu \\nabla^2 \\boldsymbol{u}) \\cdot \\boldsymbol{v} \\,d\\boldsymbol{x} + \\int_{\\Omega} (\\nabla p) \\cdot \\boldsymbol{v} \\,d\\boldsymbol{x} = \\int_{\\Omega} \\boldsymbol{f} \\cdot \\boldsymbol{v} \\,d\\boldsymbol{x}$$\n对拉普拉斯项和散度项应用分部积分（Green 第一恒等式），得到：\n$$\\int_{\\Omega} \\mu \\nabla\\boldsymbol{u} : \\nabla\\boldsymbol{v} \\,d\\boldsymbol{x} - \\int_{\\partial\\Omega} \\mu \\frac{\\partial\\boldsymbol{u}}{\\partial\\boldsymbol{n}} \\cdot \\boldsymbol{v} \\,ds - \\int_{\\Omega} p (\\nabla \\cdot \\boldsymbol{v}) \\,d\\boldsymbol{x} + \\int_{\\partial\\Omega} p \\boldsymbol{v} \\cdot \\boldsymbol{n} \\,ds = \\int_{\\Omega} \\boldsymbol{f} \\cdot \\boldsymbol{v} \\,d\\boldsymbol{x}$$\n$\\partial\\Omega$ 上的边界积分由外域上的边界条件处理，我们被指示忽略这些条件。虚构域方法的关键思想是如何处理内部边界 $\\Gamma$ 上的约束。$\\Gamma$ 上的约束 $\\boldsymbol{u}=\\boldsymbol{0}$ 通过拉格朗日乘子 $\\boldsymbol{\\lambda}$ 添加到系统中，这导致在动量方程的弱形式中出现一个附加项。\n\n关于三元组 $(\\boldsymbol{u}, p, \\boldsymbol{\\lambda})$ 的最终方程组是一个鞍点问题。求解 $(\\boldsymbol{u}, p, \\boldsymbol{\\lambda}) \\in V \\times Q \\times M$，使得对于所有试探函数 $(\\boldsymbol{v}, q, \\boldsymbol{\\eta}) \\in V \\times Q \\times M$，以下各式成立：\n1.  动量方程的弱形式：\n    $$\\int_{\\Omega} \\mu \\nabla\\boldsymbol{u} : \\nabla\\boldsymbol{v} \\,d\\boldsymbol{x} - \\int_{\\Omega} p (\\nabla \\cdot \\boldsymbol{v}) \\,d\\boldsymbol{x} + \\int_{\\Gamma} \\boldsymbol{\\lambda} \\cdot \\boldsymbol{v} \\,ds = \\int_{\\Omega} \\boldsymbol{f} \\cdot \\boldsymbol{v} \\,d\\boldsymbol{x}$$\n2.  不可压缩性约束的弱形式：\n    $$\\int_{\\Omega} q (\\nabla \\cdot \\boldsymbol{u}) \\,d\\boldsymbol{x} = 0$$\n3.  $\\Gamma$ 上无滑移约束的弱形式：\n    $$\\int_{\\Gamma} \\boldsymbol{\\eta} \\cdot \\boldsymbol{u} \\,ds = 0$$\n\n界面项 $\\langle \\boldsymbol{\\lambda}, \\boldsymbol{v}\\rangle_{\\Gamma} \\equiv \\int_{\\Gamma} \\boldsymbol{\\lambda} \\cdot \\boldsymbol{v} \\,ds$ 源于虚功原理。在 $\\Omega_f$ 上的物理问题中，固体通过 $\\Gamma$ 施加于流体上的接触力的虚功率将以边界积分的形式出现。在 DLM 格式中，这种物理相互作用被抽象的拉格朗日乘子项所取代。因此，乘子 $\\boldsymbol{\\lambda}$ 可以解释为约束施加于流体上的力密度。\n\n为了论证力的计算，我们将 $\\boldsymbol{\\lambda}$ 与流体动力应力张量 $\\boldsymbol{\\sigma} = -p\\boldsymbol{I} + \\mu(\\nabla\\boldsymbol{u} + (\\nabla\\boldsymbol{u})^T)$ 联系起来。流体施加在物体上的力由 $\\boldsymbol{F} = \\int_{\\Gamma} \\boldsymbol{\\sigma} \\cdot \\boldsymbol{n} \\, ds$ 给出，其中 $\\boldsymbol{n}$ 是 $\\Gamma$ 上的单位法向量，从流体域 $\\Omega_f$ 指向外部（即指向物体 $B$）。\n\n如果我们在物理域 $\\Omega_f$ 上推导弱形式，对动量方程进行分部积分会产生一个在边界 $\\partial\\Omega_f = \\partial\\Omega \\cup \\Gamma$ 上的项。在 $\\Gamma$ 上的积分将是 $\\int_{\\Gamma} \\boldsymbol{v} \\cdot (\\boldsymbol{\\sigma} \\cdot \\boldsymbol{n}) \\,ds$。将其与在 $\\Omega$ 上的 DLM 弱形式进行比较，我们发现项 $\\int_{\\Gamma} \\boldsymbol{\\lambda} \\cdot \\boldsymbol{v} \\,ds$ 扮演了 $-\\int_{\\Gamma} \\boldsymbol{v} \\cdot (\\boldsymbol{\\sigma} \\cdot \\boldsymbol{n}) \\,ds$ 的角色。对于所有容许的试探函数 $\\boldsymbol{v}$，这一识别都成立，这意味着在 $\\Gamma$ 上存在强关系 $\\boldsymbol{\\lambda} = -\\boldsymbol{\\sigma} \\cdot \\boldsymbol{n}$。\n\n因此，作用在物体上的流体动力 $\\boldsymbol{F}$ 为：\n$$\\boldsymbol{F} = \\int_{\\Gamma} \\boldsymbol{\\sigma} \\cdot \\boldsymbol{n} \\,ds = \\int_{\\Gamma} (-\\boldsymbol{\\lambda}) \\,ds = -\\int_{\\Gamma} \\boldsymbol{\\lambda} \\,ds$$\n假设平均流与 x 轴正方向对齐，阻力 $F_D$ 是 $\\boldsymbol{F}$ 的 x 分量，升力 $F_L$ 是 y 分量。令 $\\boldsymbol{\\lambda} = (\\lambda_x, \\lambda_y)$，我们有：\n$$F_D = -\\int_{\\Gamma} \\lambda_x \\,ds$$\n$$F_L = -\\int_{\\Gamma} \\lambda_y \\,ds$$\n这是从拉格朗日乘子计算力的基本结果。\n\nB 部分：切割单元积分方案\n\n我们的任务是设计一个数值程序，在域 $\\Omega=[0,1]^2$ 的均匀笛卡尔网格上近似计算力积分 $F_D$ 和 $F_L$。该网格由 $N \\times N$ 个边长为 $h=1/N$ 的方形单元组成。圆形界面 $\\Gamma$ 由水平集函数 $\\phi(\\boldsymbol{x}) = \\|\\boldsymbol{x}-\\boldsymbol{c}\\| - R = 0$ 隐式定义。\n\n积分方案的步骤如下：\n1.  **网格生成**：为 $i,j \\in \\{0, 1, \\dots, N\\}$ 定义一个由 $(N+1) \\times (N+1)$ 个顶点 $\\boldsymbol{x}_{i,j} = (i h, j h)$ 组成的网格。这些顶点定义了 $N^2$ 个单元。\n2.  **水平集评估**：在所有网格顶点上评估水平集函数 $\\phi$ 的值。\n3.  **切割单元识别**：遍历每个单元（以其左下角 $(i,j)$ 为索引，其中 $i,j \\in \\{0, \\dots, N-1\\}$）。如果一个单元四个顶点上的 $\\phi$ 值不是同号的，则该单元被识别为“切割单元”。这表明界面 $\\Gamma$ 穿过了该单元的边界。\n4.  **界面近似**：对于每个切割单元，我们用一条直线段近似穿过它的 $\\Gamma$ 曲线段。该线段是通过找到 $\\Gamma$ 与单元边的交点来确定的。\n    - 一条边由两个顶点定义，比如 $\\boldsymbol{p}_1$ 和 $\\boldsymbol{p}_2$。设其对应的水平集值为 $\\phi_1 = \\phi(\\boldsymbol{p}_1)$ 和 $\\phi_2 = \\phi(\\boldsymbol{p}_2)$。\n    - 如果 $\\phi_1 \\phi_2  0$，则界面与该边相交。交点 $\\boldsymbol{p}_{int}$ 是通过对水平集函数进行线性插值求得的，这等价于求通过点 $(\\boldsymbol{p}_1, \\phi_1)$ 和 $(\\boldsymbol{p}_2, \\phi_2)$ 的线性函数的零点。交点的坐标由下式给出：\n      $$\\boldsymbol{p}_{int} = \\frac{|\\phi_2|\\boldsymbol{p}_1 + |\\phi_1|\\boldsymbol{p}_2}{|\\phi_1| + |\\phi_2|}$$\n    - 对于任何给定的切割单元（不包含接触顶点等特殊拓扑情况，这对于光滑边界是罕见的），其边界上将恰好有两个这样的交点。我们称它们为 $\\boldsymbol{q}_1$ 和 $\\boldsymbol{q}_2$。连接 $\\boldsymbol{q}_1$ 和 $\\boldsymbol{q}_2$ 的线段就是我们在该单元内对 $\\Gamma$ 的线性近似。\n5.  **中点积分**：我们通过对每个切割单元线段的贡献求和，来近似函数 $g(\\boldsymbol{x})$ 在 $\\Gamma$ 上的线积分。对于由端点 $\\boldsymbol{q}_{1,k}$ 和 $\\boldsymbol{q}_{2,k}$ 定义的单元 $k$ 中的线段，我们使用中点法则。\n    - 计算线段的长度：$\\Delta s_k = \\|\\boldsymbol{q}_{2,k} - \\boldsymbol{q}_{1,k}\\|$。\n    - 计算线段的中点：$\\boldsymbol{m}_k = (\\boldsymbol{q}_{1,k} + \\boldsymbol{q}_{2,k}) / 2$。\n    - 此线段上的积分近似为 $g(\\boldsymbol{m}_k) \\Delta s_k$。\n6.  **力的计算**：为了计算阻力和升力，我们将此积分法应用于被积函数 $-\\lambda_x$ 和 $-\\lambda_y$。\n    - 为了计算 $\\boldsymbol{\\lambda}(\\boldsymbol{m}_k)$（其作为极角 $\\theta$ 的函数给出），我们首先计算中点 $\\boldsymbol{m}_k$ 相对于圆柱中心 $\\boldsymbol{c}$ 的角度：\n      $$\\theta_k = \\text{atan2}(m_{k,y} - c_y, m_{k,x} - c_x)$$\n      其中 $\\boldsymbol{m}_k = (m_{k,x}, m_{k,y})$ 且 $\\boldsymbol{c} = (c_x, c_y)$。\n    - 中点处的拉格朗日乘子向量为 $\\boldsymbol{\\lambda}(\\theta_k) = (\\lambda_x(\\theta_k), \\lambda_y(\\theta_k))$。\n    - 总阻力和升力通过对所有切割单元求和来近似：\n      $$F_D \\approx \\sum_{k \\in \\text{切割单元}} (-\\lambda_x(\\theta_k)) \\Delta s_k$$\n      $$F_L \\approx \\sum_{k \\in \\text{切割单元}} (-\\lambda_y(\\theta_k)) \\Delta s_k$$\n\n此过程提供了一个完整的算法，用于从拉格朗日乘子的解析表达式计算所需的力，该算法将在 C 部分的测试案例中实现。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the problem by implementing the cut-element quadrature scheme for four test cases.\n    \"\"\"\n\n    test_cases = [\n        # Case 1: General constant multiplier\n        {'id': 1, 'c': np.array([0.5, 0.5]), 'R': 0.3, 'params': {'alpha': 1.2, 'beta': -0.3}},\n        \n        # Case 2: Purely radial multiplier\n        {'id': 2, 'c': np.array([0.33, 0.65]), 'R': 0.22, 'params': {'A': 1.0}},\n        \n        # Case 3: Mixed normal/tangential plus constant\n        {'id': 3, 'c': np.array([0.7, 0.5]), 'R': 0.29, 'params': {'alpha': 0.5, 'beta': 0.0, 'B': 0.7, 'C': -0.4}},\n        \n        # Case 4: Small radius constant multiplier\n        {'id': 4, 'c': np.array([0.2, 0.2]), 'R': 0.05, 'params': {'alpha': -0.8, 'beta': 0.4}},\n    ]\n\n    N = 250\n    h = 1.0 / N\n    results = []\n\n    for case in test_cases:\n        c = case['c']\n        R = case['R']\n        params = case['params']\n        case_id = case['id']\n        \n        # Grid vertices\n        x_coords = np.linspace(0.0, 1.0, N + 1)\n        y_coords = np.linspace(0.0, 1.0, N + 1)\n        \n        # Evaluate level-set function phi on all grid vertices\n        X, Y = np.meshgrid(x_coords, y_coords)\n        phi_values = np.sqrt((X - c[0])**2 + (Y - c[1])**2) - R\n        \n        total_drag = 0.0\n        total_lift = 0.0\n\n        # Iterate over each cell in the grid\n        for j in range(N):\n            for i in range(N):\n                # Get phi values at the four corners of the cell (i, j)\n                # (i,j) -> (x_i, y_j)\n                phi00 = phi_values[j, i]\n                phi10 = phi_values[j, i+1]\n                phi01 = phi_values[j+1, i]\n                phi11 = phi_values[j+1, i+1]\n                \n                #\n                # Vertices of the cell, using (x,y) convention\n                # v00: bottom-left, v10: bottom-right, v01: top-left, v11: top-right\n                #\n                v00 = np.array([x_coords[i], y_coords[j]])\n                v10 = np.array([x_coords[i+1], y_coords[j]])\n                v01 = np.array([x_coords[i], y_coords[j+1]])\n                v11 = np.array([x_coords[i+1], y_coords[j+1]])\n\n                corners_phi = np.array([phi00, phi10, phi11, phi01])\n                \n                # Check if the cell is cut by the interface\n                if np.all(corners_phi >= 0) or np.all(corners_phi  0):\n                    continue\n\n                intersections = []\n                # Check each of the four edges for intersections\n                \n                # Bottom edge (v00 -> v10)\n                if phi00 * phi10  0:\n                    t = phi00 / (phi00 - phi10)\n                    intersect_pt = v00 + t * (v10 - v00)\n                    intersections.append(intersect_pt)\n                \n                # Right edge (v10 -> v11)\n                if phi10 * phi11  0:\n                    t = phi10 / (phi10 - phi11)\n                    intersect_pt = v10 + t * (v11 - v10)\n                    intersections.append(intersect_pt)\n\n                # Top edge (v11 -> v01)\n                if phi11 * phi01  0:\n                    t = phi11 / (phi11 - phi01)\n                    intersect_pt = v11 + t * (v01 - v11)\n                    intersections.append(intersect_pt)\n                \n                # Left edge (v01 -> v00)\n                if phi01 * phi00  0:\n                    t = phi01 / (phi01 - phi00)\n                    intersect_pt = v01 + t * (v00 - v01)\n                    intersections.append(intersect_pt)\n                \n                if len(intersections) == 2:\n                    p1, p2 = intersections[0], intersections[1]\n                    \n                    # Midpoint of the segment\n                    midpoint = (p1 + p2) / 2.0\n                    \n                    # Length of the segment\n                    ds = np.linalg.norm(p2 - p1)\n                    \n                    # Angle of the midpoint relative to the cylinder center\n                    # This angle is used to evaluate the analytical lambda function\n                    relative_pos = midpoint - c\n                    theta = np.arctan2(relative_pos[1], relative_pos[0])\n                    \n                    # Evaluate lambda(theta) based on the test case\n                    lambda_val = np.zeros(2)\n                    if case_id == 1:\n                        lambda_val[0] = params['alpha']\n                        lambda_val[1] = params['beta']\n                    elif case_id == 2:\n                        A = params['A']\n                        lambda_val[0] = A * np.cos(theta)\n                        lambda_val[1] = A * np.sin(theta)\n                    elif case_id == 3:\n                        alpha, beta, B, C = params['alpha'], params['beta'], params['B'], params['C']\n                        cos_t, sin_t = np.cos(theta), np.sin(theta)\n                        # base vector + normal component + tangential component\n                        lambda_val[0] = alpha + B * cos_t - C * sin_t\n                        lambda_val[1] = beta  + B * sin_t + C * cos_t\n                    elif case_id == 4:\n                        lambda_val[0] = params['alpha']\n                        lambda_val[1] = params['beta']\n\n                    # Add contribution to total drag and lift\n                    # Force = -integral(lambda * ds)\n                    total_drag += -lambda_val[0] * ds\n                    total_lift += -lambda_val[1] * ds\n\n        results.extend([total_drag, total_lift])\n        \n    # Format the final output string\n    output_str = \"[\" + \",\".join(f\"{res:.8f}\" for res in results) + \"]\"\n    print(output_str)\n\nsolve()\n```", "id": "2567766"}]}