{"hands_on_practices": [{"introduction": "在谱元法中，解在参考单元上由高阶多项式逼近。要用这些多项式求解偏微分方程，关键的第一步是精确且高效地计算它们的导数。本练习 [@problem_id:2597917] 将引导你从第一性原理出发，构建谱元法的核心计算工具——微分矩阵，并分析其谱特性，这对于理解方法的精度和稳定性至关重要。", "problem": "考虑在区间 $[-1,1]$ 上使用谱元法 (SEM) 的单个谱元。令 $\\{x_j\\}_{j=0}^{N}$ 为与 $N$ 次 Legendre 多项式 $P_{N}(x)$ 相关联的 Gauss–Lobatto–Legendre (GLL) 节点，即 $x_0=-1$，$x_N=1$，且 $x_1,\\dots,x_{N-1}$ 是 $P_{N}'(x)$ 的根。令 $\\{\\ell_j(x)\\}_{j=0}^{N}$ 为满足 $\\ell_j(x_i)=\\delta_{ij}$ 的 Lagrange 节点基多项式，并通过下式定义一阶和二阶微分矩阵：\n$$\nD_{ij}=\\ell_j'(x_i),\\qquad D^{(2)}_{ij}=\\ell_j''(x_i).\n$$\n从以下基本依据出发：\n- 节点多项式 $\\pi(x)=\\prod_{m=0}^{N}(x-x_m)$ （对于节点 $\\{x_m\\}$）的定义及其与 Lagrange 基 $\\ell_j(x)=\\dfrac{\\pi(x)}{\\pi'(x_j)(x-x_j)}$ 的关系。\n- GLL 节点的特征是 $(1-x^2)P_N'(x)=0$，以及 $\\pi(x)$ 在相差一个非零常数的情况下满足 $\\pi(x)\\propto (1-x^2)P_{N}'(x)$。\n- Legendre 微分方程 $(1-x^2)P_{N}''(x)-2xP_{N}'(x)+N(N+1)P_{N}(x)=0$ 及其导数。\n- 在 SEM 背景下，与 GLL 求积权重相关的分部求和性质。\n\n任务：\n1. 对非对角元 $D_{ij}$（$i \\neq j$），推导其用 $P_{N}(x)$ 和 GLL 节点表示的闭式表达式。\n2. 对所有 $i\\in\\{0,1,\\dots,N\\}$，推导对角元 $D_{ii}$ 的闭式表达式。\n3. 仅使用上述定义所衍生的恒等式，推导 $D^{(2)}_{ij}$（$i \\neq j$）用 $D_{ij}$、$x_i$、$x_j$ 和 $D_{ii}$ 表示的显式公式，然后对内部行 $i\\in\\{1,\\dots,N-1\\}$ 简化这些公式。分别对内部和端点索引推导对角元 $D^{(2)}_{ii}$ 的闭式表达式。\n4. 令 $W=\\mathrm{diag}(w_0,\\dots,w_N)$ 为 GLL 求积权重的对角矩阵。考虑 Galerkin 刚度矩阵 $K=D^{\\top}WD$ 和质量矩阵 $M=W$，并通过限制于内部自由度来施加齐次 Dirichlet 边界条件，得到 $K_{\\mathrm{int}}$ 和 $M_{\\mathrm{int}}$。分析以下算子的谱：\n   - 一阶微分矩阵 $D$（定性行为以及谱半径随 $N$ 的缩放规律）。\n   - 配置二阶微分矩阵 $D^{(2)}$（定性行为以及谱半径随 $N$ 的缩放规律）。\n   - 广义特征值问题 $K_{\\mathrm{int}}v=\\lambda M_{\\mathrm{int}}v$（特征值的实数性、定号性以及极值特征值随 $N$ 的缩放规律）。\n基于所列出的依据，包括 Legendre 方程、$\\pi(x)$ 的性质和多项式反不等式，提供严谨的论证，但避免使用任何不能从这些要素推导出来的快捷公式。\n\n您最终报告的答案必须是单个闭式表达式：非对角元 $D_{ij}$（$i \\neq j$）用 $P_N$ 和节点 $x_i,x_j$ 表示。不包含单位。不提供数值。除了所要求的表达式外，最终答案中不要包含任何附加文本。", "solution": "该问题陈述是数值分析领域中一个适定的、具有科学依据的问题，具体涉及谱元法。所有术语都是标准的，任务要求基于所提供的基本原理进行严格推导。该问题被认为是有效的，并在此给出完整解答。\n\n推导将按所列顺序逐一完成四个任务。\n\n任务1：推导非对角元 $D_{ij}$（$i \\neq j$）。\n\n一阶微分矩阵的元素定义为 $D_{ij} = \\ell_j'(x_i)$，其中 $\\{\\ell_j(x)\\}_{j=0}^{N}$ 是定义在 Gauss-Lobatto-Legendre (GLL) 节点 $\\{x_k\\}_{k=0}^N$ 上的 Lagrange 基多项式。Lagrange 基多项式 $\\ell_j(x)$ 由以下公式给出：\n$$\n\\ell_j(x) = \\prod_{m=0, m\\neq j}^{N} \\frac{x-x_m}{x_j-x_m}\n$$\n这可以用节点多项式 $\\pi(x) = \\prod_{m=0}^{N}(x-x_m)$ 表示。一个简单的变换可得 $\\pi'(x_j) = \\prod_{m=0, m\\neq j}^{N}(x_j-x_m)$，这使我们能够如问题陈述中所建议的那样写出 $\\ell_j(x)$：\n$$\n\\ell_j(x) = \\frac{\\pi(x)}{\\pi'(x_j)(x-x_j)}\n$$\n为了求得 $D_{ij}$，我们必须对 $\\ell_j(x)$ 关于 $x$ 求导，然后将结果在 $x=x_i$ 处求值。对于固定的 $j$，且当 $x \\neq x_j$ 时，使用商法则对 $\\ell_j(x)$ 求导得到：\n$$\n\\ell_j'(x) = \\frac{1}{\\pi'(x_j)} \\frac{\\pi'(x)(x-x_j) - \\pi(x)\\cdot 1}{(x-x_j)^2}\n$$\n我们要在 $x=x_i$（其中 $i \\neq j$）处对该式求值。由于 $x_i$ 是一个 GLL 节点，它是节点多项式 $\\pi(x)$ 的一个根，因此 $\\pi(x_i) = 0$。$\\ell_j'(x_i)$ 的表达式显著简化为：\n$$\nD_{ij} = \\ell_j'(x_i) = \\frac{1}{\\pi'(x_j)} \\frac{\\pi'(x_i)(x_i-x_j) - \\pi(x_i)}{(x_i-x_j)^2} = \\frac{1}{\\pi'(x_j)} \\frac{\\pi'(x_i)(x_i-x_j) - 0}{(x_i-x_j)^2} = \\frac{\\pi'(x_i)}{\\pi'(x_j)(x_i-x_j)}\n$$\n现在，我们必须使用 GLL 节点的给定性质。节点多项式 $\\pi(x)$ 与 $(1-x^2)P_N'(x)$ 成正比，其中 $P_N(x)$ 是 $N$ 次 Legendre 多项式。设此比例关系为 $\\pi(x) = c(1-x^2)P_N'(x)$，其中 $c$ 为某个非零常数。为了求 $\\pi'(x)$，我们对这个表达式求导：\n$$\n\\pi'(x) = c \\left[ -2xP_N'(x) + (1-x^2)P_N''(x) \\right]\n$$\n同样已给出的 Legendre 微分方程是 $(1-x^2)P_N''(x) - 2xP_N'(x) + N(N+1)P_N(x) = 0$。我们可以解出项 $(1-x^2)P_N''(x)$：\n$$\n(1-x^2)P_N''(x) = 2xP_N'(x) - N(N+1)P_N(x)\n$$\n将此代入 $\\pi'(x)$ 的表达式中：\n$$\n\\pi'(x) = c \\left[ -2xP_N'(x) + \\left( 2xP_N'(x) - N(N+1)P_N(x) \\right) \\right] = -c N(N+1) P_N(x)\n$$\n这为在节点 $x_k$ 处求值的 $\\pi'(x_k)$ 提供了一个简单的形式：$\\pi'(x_k) = -cN(N+1)P_N(x_k)$。将此代入我们关于 $D_{ij}$ 的公式：\n$$\nD_{ij} = \\frac{-c N(N+1) P_N(x_i)}{(-c N(N+1) P_N(x_j))(x_i-x_j)} = \\frac{P_N(x_i)}{P_N(x_j)(x_i-x_j)}\n$$\n这就是所需的一阶微分矩阵非对角元（$i \\neq j$）的闭式表达式。\n\n任务2：推导对角元 $D_{ii}$。\n\n为求对角元 $D_{ii} = \\ell_i'(x_i)$，我们可以利用常数的导数为零这一性质。所有 Lagrange 基函数的和恒等于 $1$：\n$$\n\\sum_{j=0}^{N} \\ell_j(x) = 1\n$$\n对该恒等式关于 $x$ 求导得到：\n$$\n\\sum_{j=0}^{N} \\ell_j'(x) = 0\n$$\n在节点 $x_i$ 处对该和求值，得到矩阵 $D$ 的第 $i$ 行元素之和：\n$$\n\\sum_{j=0}^{N} \\ell_j'(x_i) = \\sum_{j=0}^{N} D_{ij} = 0\n$$\n这使我们能够用非对角元来表示对角元：$D_{ii} = - \\sum_{j=0, j \\neq i}^{N} D_{ij}$。虽然这很正确，但题目要求的是闭式形式。\n\n一个更直接的推导 $D_{ii}$ 的方法是从求 $\\pi(x)$ 的二阶导数开始。根据结果 $\\ell_i'(x_i) = \\frac{\\pi''(x_i)}{2\\pi'(x_i)}$（该结果可通过对 $\\frac{\\ell_i(x)-1}{x-x_i}$ 两次使用 L'Hôpital 法则或通过 Taylor 展开推导），我们可以找到一个闭式形式。我们有 $\\pi'(x) = -c N(N+1) P_N(x)$，所以 $\\pi''(x) = -c N(N+1) P_N'(x)$。\n将这些代入 $D_{ii}$ 的公式：\n$$\nD_{ii} = \\frac{-c N(N+1) P_N'(x_i)}{2(-c N(N+1) P_N(x_i))} = \\frac{P_N'(x_i)}{2P_N(x_i)}\n$$\n我们必须在不同类型的 GLL 节点上对该式求值。\n对于内部节点 $i \\in \\{1, \\dots, N-1\\}$，节点 $x_i$ 被定义为 $P_N'(x)$ 的根，因此 $P_N'(x_i) = 0$。这得到：\n$$\nD_{ii} = 0, \\quad \\text{对于 } i = 1, \\dots, N-1\n$$\n对于端点节点 $x_0 = -1$ 和 $x_N = 1$：\n在 $x_N=1$ 处，我们使用标准值 $P_N(1) = 1$ 和 $P_N'(1) = \\frac{N(N+1)}{2}$。\n$$\nD_{NN} = \\frac{P_N'(1)}{2P_N(1)} = \\frac{N(N+1)/2}{2(1)} = \\frac{N(N+1)}{4}\n$$\n在 $x_0=-1$ 处，我们使用 $P_N(-1) = (-1)^N$ 和 $P_N'(-1) = (-1)^{N-1}\\frac{N(N+1)}{2}$。\n$$\nD_{00} = \\frac{P_N'(-1)}{2P_N(-1)} = \\frac{(-1)^{N-1}N(N+1)/2}{2(-1)^N} = -\\frac{N(N+1)}{4}\n$$\n\n任务3：推导二阶微分矩阵元素 $D^{(2)}_{ij}$。\n\n首先，我们推导非对角元 $D^{(2)}_{ij} = \\ell_j''(x_i)$（$i \\neq j$）。我们从前面推导出的 $\\ell_j'(x)$ 表达式开始：\n$$\n\\ell_j'(x) = \\frac{\\pi'(x)(x-x_j) - \\pi(x)}{\\pi'(x_j)(x-x_j)^2}\n$$\n使用商法则对此式关于 $x$ 求导得到：\n$$\n\\ell_j''(x) = \\frac{1}{\\pi'(x_j)} \\frac{d}{dx} \\left( \\frac{\\pi'(x)(x-x_j) - \\pi(x)}{(x-x_j)^2} \\right)\n$$\n分子的导数是 $\\pi''(x)(x-x_j) + \\pi'(x) - \\pi'(x) = \\pi''(x)(x-x_j)$。分母的导数是 $2(x-x_j)$。\n$$\n\\ell_j''(x) = \\frac{1}{\\pi'(x_j)} \\frac{[\\pi''(x)(x-x_j)](x-x_j)^2 - [\\pi'(x)(x-x_j)-\\pi(x)][2(x-x_j)]}{(x-x_j)^4}\n$$\n约去因子 $(x-x_j)$：\n$$\n\\ell_j''(x) = \\frac{1}{\\pi'(x_j)} \\frac{\\pi''(x)(x-x_j)^2 - 2[\\pi'(x)(x-x_j)-\\pi(x)]}{(x-x_j)^3}\n$$\n在 $x=x_i$（其中 $i \\neq j$）处求值，我们使用 $\\pi(x_i)=0$：\n$$\nD_{ij}^{(2)} = \\ell_j''(x_i) = \\frac{1}{\\pi'(x_j)} \\frac{\\pi''(x_i)(x_i-x_j)^2 - 2\\pi'(x_i)(x_i-x_j)}{(x_i-x_j)^3} = \\frac{\\pi''(x_i)(x_i-x_j) - 2\\pi'(x_i)}{\\pi'(x_j)(x_i-x_j)^2}\n$$\n我们可以将其分解为两项：\n$$\nD_{ij}^{(2)} = \\frac{\\pi''(x_i)}{\\pi'(x_j)(x_i-x_j)} - \\frac{2\\pi'(x_i)}{\\pi'(x_j)(x_i-x_j)^2}\n$$\n我们可以用 $D_{ij}$ 和 $D_{ii}$ 来表示这些项。回想一下，$D_{ij} = \\frac{\\pi'(x_i)}{\\pi'(x_j)(x_i-x_j)}$ 且 $D_{ii} = \\frac{\\pi''(x_i)}{2\\pi'(x_i)}$，这意味着 $\\pi''(x_i) = 2D_{ii}\\pi'(x_i)$。\n第二项是 $\\frac{2}{x_i-x_j} \\frac{\\pi'(x_i)}{\\pi'(x_j)(x_i-x_j)} = \\frac{2D_{ij}}{x_i-x_j}$。\n第一项是 $\\frac{2D_{ii}\\pi'(x_i)}{\\pi'(x_j)(x_i-x_j)} = 2D_{ii} \\frac{\\pi'(x_i)}{\\pi'(x_j)(x_i-x_j)} = 2D_{ii}D_{ij}$。\n将它们组合起来得到公式：\n$$\nD^{(2)}_{ij} = 2D_{ii}D_{ij} - \\frac{2D_{ij}}{x_i-x_j} = 2D_{ij}\\left(D_{ii} - \\frac{1}{x_i-x_j}\\right) \\quad \\text{对于 } i \\neq j\n$$\n对于内部行 $i \\in \\{1,\\dots,N-1\\}$，我们有 $D_{ii}=0$。该公式简化为：\n$$\nD^{(2)}_{ij} = -\\frac{2D_{ij}}{x_i-x_j}, \\quad i \\in \\{1,\\dots,N-1\\}, i \\neq j\n$$\n接下来，我们推导对角元 $D^{(2)}_{ii} = \\ell_i''(x_i)$。一个直接的公式是 $D^{(2)}_{ii} = \\frac{\\pi'''(x_i)}{3\\pi'(x_i)}$。我们有 $\\pi'(x) = -c N(N+1)P_N(x)$，因此 $\\pi'''(x) = -c N(N+1)P_N''(x)$。\n$$\nD^{(2)}_{ii} = \\frac{-c N(N+1)P_N''(x_i)}{3(-c N(N+1)P_N(x_i))} = \\frac{P_N''(x_i)}{3P_N(x_i)}\n$$\n使用 Legendre 方程，$P_N''(x_i) = \\frac{2x_iP_N'(x_i) - N(N+1)P_N(x_i)}{1-x_i^2}$。\n对于内部节点 $i \\in \\{1,\\dots,N-1\\}$，$x_i^2 \\neq 1$ 且 $P_N'(x_i)=0$。\n$$\nD^{(2)}_{ii} = \\frac{1}{3P_N(x_i)} \\frac{-N(N+1)P_N(x_i)}{1-x_i^2} = -\\frac{N(N+1)}{3(1-x_i^2)}, \\quad i \\in \\{1,\\dots,N-1\\}\n$$\n对于端点 $i=0,N$，分母 $1-x_i^2$ 为零。我们必须分开处理这些情况。如果我们能找到 $P_N''(1)$，使用恒等式 $D^{(2)}_{ii} = \\frac{P_N''(x_i)}{3P_N(x_i)}$ 会更简单。对 Legendre 方程求导可得 $(1-x^2)P_N''' - 4xP_N'' + (N(N+1)-2)P_N' = 0$。在 $x=1$ 处，这得到 $-4P_N''(1) + (N(N+1)-2)P_N'(1) = 0$。\n所以，$P_N''(1) = \\frac{N(N+1)-2}{4}P_N'(1) = \\frac{N(N+1)-2}{4} \\frac{N(N+1)}{2} = \\frac{N(N+1)(N^2+N-2)}{8}$。\n然后对于 $i=N$，由于 $P_N(1)=1$：\n$$\nD^{(2)}_{NN} = \\frac{P_N''(1)}{3P_N(1)} = \\frac{N(N+1)(N^2+N-2)}{24}\n$$\n根据 GLL 节点关于 $x=0$ 的对称性，有 $D^{(2)}_{00} = D^{(2)}_{NN}$。\n\n任务4：谱分析。\n\n- **$D$ 的谱**：$D$ 的特征值 $\\lambda$ 通常不是纯虚数。使用分部求和 (SBP) 性质 $W D + D^T W = B$，其中 $B=\\text{diag}(-1, 0, \\dots, 0, 1)$，对于特征值为 $\\lambda$ 的特征向量 $v$，我们有 $2\\text{Re}(\\lambda)v^H W v = |v_N|^2 - |v_0|^2$。因此，如果特征向量在边界处的模长不同，$\\lambda$ 的实部就非零。对于满足 $v_0=v_N=0$ 的特征向量，特征值是纯虚数。矩阵 $D$ 不是正规矩阵。谱半径 $\\rho(D) = \\max|\\lambda|$ 随多项式次数 $N$ 缩放。根据多项式反不等式 (Markov 不等式)，对于一个表示节点上多项式值的向量 $u$，有 $||Du||_{\\infty} \\leq C N^2 ||u||_{\\infty}$。这意味着 $\\rho(D) = O(N^2)$。\n\n- **$D^{(2)}$ 的谱**：$D^{(2)}$ 的特征值是实数且非正。由于 $\\sum_j D^{(2)}_{ij}=0$，所有元素均为 1 的向量是特征值为 0 的特征向量。其他特征值为负。从关系 $D^{(2)}_{ij} = (D^2)_{ij}$，我们可以推断 $D^{(2)}$ 的特征值就是 $D^2$ 的特征值，它们近似于 $D$ 的特征值的平方。鉴于 $D$ 的许多特征值都接近虚轴，它们的平方是实数且为负。谱半径 $\\rho(D^{(2)})$ 以 $O(N^4)$ 的规律缩放，这可以从相应的二阶导数的多项式反不等式推断出来：$||D^{(2)}u||_{\\infty} \\leq C N^4 ||u||_{\\infty}$。\n\n- **$K_{\\mathrm{int}}v=\\lambda M_{\\mathrm{int}}v$ 的谱**：这是对带有齐次 Dirichlet 边界条件的一维 Poisson 方程进行 Galerkin 离散化后得到的广义特征值问题。\n  - $M_{\\mathrm{int}}$ 是限制在内部节点上的质量矩阵。它是一个对角矩阵，对角元为 GLL 权重 $w_j = \\int_{-1}^1 \\ell_j(x) dx$，$j=1,\\dots,N-1$。所有的 $w_j>0$，因此 $M_{\\mathrm{int}}$ 是对称正定 (SPD) 的。\n  - $K_{\\mathrm{int}}$ 是内部节点的刚度矩阵。对于任意内部向量 $v$ （在端点补零以形成 $\\tilde{v}$），其二次型为 $v^T K_{\\mathrm{int}} v = \\tilde{v}^T D^T W D \\tilde{v} = (D\\tilde{v})^T W (D\\tilde{v}) = \\sum_{i=0}^N w_i ( (D\\tilde{v})_i )^2 \\ge 0$。该二次型仅在 $D\\tilde{v}=0$ 时为零，这意味着对应的多项式在所有节点上的导数都为零，因此是一个常数。由于多项式在边界处为零，它必须处处为零。因此，$v=0$。所以 $K_{\\mathrm{int}}$ 也是对称正定的。\n  - 具有两个 SPD 矩阵的广义特征值问题具有实数且正的特征值：$\\lambda > 0$。\n  - 特征值 $\\lambda$ 近似于连续问题 $-u''=\\mu u$ 在 $[-1,1]$ 上且满足 $u(\\pm 1)=0$ 的特征值，后者为 $\\mu_k = (k\\pi/2)^2$，$k=1,2,\\dots$。\n  - 最小特征值 $\\lambda_{\\min}$ 在 $N \\to \\infty$ 时收敛到最小的连续特征值 $\\mu_1 = (\\pi/2)^2$。因此，$\\lambda_{\\min} = O(1)$。\n  - 最大特征值 $\\lambda_{\\max}$ 与网格可分辨的最大频率有关。它与最小网格间距平方的倒数成比例缩放。对于 GLL 节点，这导致缩放规律为 $\\lambda_{\\max} = O(N^4)$。这与热方程的显式时间积分器的稳定性约束条件相符，即 $\\Delta t \\propto 1/\\lambda_{\\max}$。", "answer": "$$\\boxed{\\frac{P_{N}(x_i)}{P_{N}(x_j)(x_i-x_j)}}$$", "id": "2597917"}, {"introduction": "谱元法的强大之处不仅在于其高精度，还在于其处理复杂几何的能力。本练习 [@problem_id:2597909] 聚焦于连接理论与实践的桥梁——等参映射，它将标准的参考单元（例如 $[-1,1]$ 区间）变换为物理空间中的任意形状单元。通过推导和应用雅可比行列式，你将掌握在不同坐标系之间转换积分的关键技巧，为解决实际工程问题打下基础。", "problem": "考虑参考区间 $[-1,1]$ 上的一个一维谱元，其节点 $\\{\\xi_i\\}_{i=0}^{N}$ 选为 Gauss–Lobatto–Legendre (GLL) 节点。定义 Lagrange 插值基 $\\{\\ell_i(\\xi)\\}_{i=0}^{N}$，使其满足条件 $\\ell_i(\\xi_j)=\\delta_{ij}$。从参考坐标 $\\xi$ 到物理坐标 $x$ 的等参映射定义为 $x(\\xi)=\\sum_{i=0}^{N} X_i \\,\\ell_i(\\xi)$，其中 $\\{X_i\\}_{i=0}^{N}$ 为物理节点坐标。\n\n任务：\n1) 从节点 $\\{\\xi_i\\}_{i=0}^{N}$ 上的 Lagrange 插值多项式定义出发，推导雅可比 $J(\\xi)=\\dfrac{dx}{d\\xi}$ 关于 $\\{X_i\\}$ 和导数 $\\{\\ell_i'(\\xi)\\}$ 的显式表达式。\n\n2) 仅使用微积分中的一维换元法定理和链式法则，推导标量函数 $f(x)$ 在物理单元 $K=x([-1,1])$ 上的积分变换法则：\n$$\n\\int_{K} f(x)\\,dx \\quad \\text{in terms of} \\quad \\int_{-1}^{1} \\cdots \\, d\\xi.\n$$\n明确指出 $J(\\xi)$ 的作用。\n\n3) 对于 $N=2$ 的情况，GLL 节点为 $\\xi_0=-1$, $\\xi_1=0$, $\\xi_2=1$，物理节点坐标为 $X_0=0$, $X_1=1$, $X_2=3$。对于函数 $f(x)=x^2$，通过变换到参考区间 $[-1,1]$ 并精确计算所得表达式，来计算以下物理积分的精确值\n$$\nI \\;=\\; \\int_{x(-1)}^{x(1)} x^2\\,dx\n$$\n请以单个不带单位的实数形式给出最终答案，且不要四舍五入。", "solution": "首先对问题陈述进行严格验证，以确保其科学性和逻辑完整性。\n\n已知条件如下：\n- 一个在参考区间 $[-1,1]$ 上的一维谱元。\n- 节点为 Gauss–Lobatto–Legendre (GLL) 节点 $\\{\\xi_i\\}_{i=0}^{N}$。\n- 基函数为满足性质 $\\ell_i(\\xi_j)=\\delta_{ij}$ 的 Lagrange 插值多项式 $\\{\\ell_i(\\xi)\\}_{i=0}^{N}$。\n- 从参考坐标 $\\xi$ 到物理坐标 $x$ 的等参映射由 $x(\\xi)=\\sum_{i=0}^{N} X_i \\,\\ell_i(\\xi)$ 给出，其中 $\\{X_i\\}_{i=0}^{N}$ 是物理节点坐标。\n- 对于任务3，给定 $N=2$，GLL 节点为 $\\xi_0=-1$, $\\xi_1=0$, $\\xi_2=1$。\n- 相应的物理节点坐标为 $X_0=0$, $X_1=1$, $X_2=3$。\n- 待积分的函数是 $f(x)=x^2$。\n\n该问题具有科学依据，是有限元和谱元文献中的一个标准提法。它是一个适定问题，提供了推导所求表达式和计算最终值所需的所有信息。语言客观、精确。该问题没有逻辑矛盾、事实错误或任何其他使其无效的缺陷。因此，我们着手进行求解。\n\n任务1：推导雅可比 $J(\\xi)$ 的显式表达式。\n\n从参考坐标 $\\xi$ 到物理坐标 $x$ 的一维变换的雅可比定义为 $J(\\xi) = \\frac{dx}{d\\xi}$。该映射由等参公式给出：\n$$\nx(\\xi) = \\sum_{i=0}^{N} X_i \\, \\ell_i(\\xi)\n$$\n为了求雅可比，我们对此表达式关于 $\\xi$ 求导。物理节点坐标 $\\{X_i\\}$ 相对于参考坐标 $\\xi$ 是常数。微分运算是线性的，因此我们可以对求和项逐项求导：\n$$\nJ(\\xi) = \\frac{d}{d\\xi} \\left( \\sum_{i=0}^{N} X_i \\, \\ell_i(\\xi) \\right)\n$$\n对求和中的每一项应用导数，得到：\n$$\nJ(\\xi) = \\sum_{i=0}^{N} X_i \\, \\frac{d\\ell_i}{d\\xi}(\\xi)\n$$\n使用撇号表示导数，即 $\\ell_i'(\\xi) = \\frac{d\\ell_i}{d\\xi}(\\xi)$，雅可比的表达式为：\n$$\nJ(\\xi) = \\sum_{i=0}^{N} X_i \\, \\ell_i'(\\xi)\n$$\n\n任务2：推导标量函数 $f(x)$ 积分的变换法则。\n\n题目要求我们变换标量函数 $f(x)$ 在物理单元 $K = x([-1,1])$ 上的积分。该积分为 $\\int_{K} f(x)\\,dx$。区域 $K$ 对应于区间 $[x(-1), x(1)]$。我们使用微积分中的一维换元法定理。变换由映射 $x=x(\\xi)$ 给出。微分元 $dx$ 通过链式法则与微分元 $d\\xi$ 相关：\n$$\ndx = \\frac{dx}{d\\xi} \\, d\\xi = J(\\xi) \\, d\\xi\n$$\n当积分变量从 $x$ 变为 $\\xi$ 时，积分限也必须进行变换。物理域 $K$ 的范围从 $x_{start} = x(-1)$ 到 $x_{end} = x(1)$。这些分别对应于参考域的界限 $\\xi=-1$ 和 $\\xi=1$。将 $x=x(\\xi)$、$dx=J(\\xi)d\\xi$ 和新的积分限代入积分，得到变换法则：\n$$\n\\int_{x(-1)}^{x(1)} f(x) \\, dx = \\int_{-1}^{1} f(x(\\xi)) \\, J(\\xi) \\, d\\xi\n$$\n雅可比 $J(\\xi)$ 的作用是作为一个缩放因子，它将物理域中的长度微元 $dx$ 与参考域中的长度微元 $d\\xi$ 联系起来。它解释了映射在每个点 $\\xi$ 处的局部拉伸（$|J(\\xi)| > 1$）、压缩（$|J(\\xi)| < 1$）或方向反转（$J(\\xi) < 0$）。对于一个有效的、非退化的单元映射，雅可比在单元内部不得为零。\n\n任务3：计算指定情况下的积分精确值。\n\n我们有 $N=2$，节点为 $\\xi_0=-1$, $\\xi_1=0$, $\\xi_2=1$。我们首先构造 Lagrange 基多项式 $\\{\\ell_i(\\xi)\\}_{i=0}^{2}$：\n$$\n\\ell_0(\\xi) = \\frac{(\\xi - \\xi_1)(\\xi - \\xi_2)}{(\\xi_0 - \\xi_1)(\\xi_0 - \\xi_2)} = \\frac{(\\xi - 0)(\\xi - 1)}{(-1 - 0)(-1 - 1)} = \\frac{\\xi(\\xi-1)}{2} = \\frac{1}{2}\\xi^2 - \\frac{1}{2}\\xi\n$$\n$$\n\\ell_1(\\xi) = \\frac{(\\xi - \\xi_0)(\\xi - \\xi_2)}{(\\xi_1 - \\xi_0)(\\xi_1 - \\xi_2)} = \\frac{(\\xi - (-1))(\\xi - 1)}{(0 - (-1))(0 - 1)} = \\frac{(\\xi+1)(\\xi-1)}{-1} = 1 - \\xi^2\n$$\n$$\n\\ell_2(\\xi) = \\frac{(\\xi - \\xi_0)(\\xi - \\xi_1)}{(\\xi_2 - \\xi_0)(\\xi_2 - \\xi_1)} = \\frac{(\\xi - (-1))(\\xi - 0)}{(1 - (-1))(1 - 0)} = \\frac{(\\xi+1)\\xi}{2} = \\frac{1}{2}\\xi^2 + \\frac{1}{2}\\xi\n$$\n接下来，我们使用物理节点坐标 $X_0=0$, $X_1=1$ 和 $X_2=3$ 来构造等参映射 $x(\\xi)$：\n$$\nx(\\xi) = X_0\\ell_0(\\xi) + X_1\\ell_1(\\xi) + X_2\\ell_2(\\xi)\n$$\n$$\nx(\\xi) = (0)\\left(\\frac{1}{2}\\xi^2 - \\frac{1}{2}\\xi\\right) + (1)(1 - \\xi^2) + (3)\\left(\\frac{1}{2}\\xi^2 + \\frac{1}{2}\\xi\\right)\n$$\n$$\nx(\\xi) = 1 - \\xi^2 + \\frac{3}{2}\\xi^2 + \\frac{3}{2}\\xi = \\frac{1}{2}\\xi^2 + \\frac{3}{2}\\xi + 1\n$$\n我们在节点处验证该映射：$x(-1) = \\frac{1}{2} - \\frac{3}{2} + 1 = 0 = X_0$，$x(0) = 1 = X_1$，$x(1) = \\frac{1}{2} + \\frac{3}{2} + 1 = 3 = X_2$。映射是正确的。\n\n现在，我们计算雅可比 $J(\\xi)$：\n$$\nJ(\\xi) = \\frac{dx}{d\\xi} = \\frac{d}{d\\xi}\\left(\\frac{1}{2}\\xi^2 + \\frac{3}{2}\\xi + 1\\right) = \\xi + \\frac{3}{2}\n$$\n待计算的积分为 $I = \\int_{x(-1)}^{x(1)} x^2\\,dx = \\int_{0}^{3} x^2\\,dx$。\n我们将此积分变换到参考区间 $[-1,1]$：\n$$\nI = \\int_{-1}^{1} (x(\\xi))^2 \\, J(\\xi) \\, d\\xi\n$$\n代入 $x(\\xi)$ 和 $J(\\xi)$ 的表达式：\n$$\nI = \\int_{-1}^{1} \\left(\\frac{1}{2}\\xi^2 + \\frac{3}{2}\\xi + 1\\right)^2 \\left(\\xi + \\frac{3}{2}\\right) d\\xi\n$$\n我们注意到，项 $\\xi + \\frac{3}{2}$ 正是括号内项的导数，即 $J(\\xi) = \\frac{dx(\\xi)}{d\\xi}$。这允许进行直接代换。令 $u = x(\\xi) = \\frac{1}{2}\\xi^2 + \\frac{3}{2}\\xi + 1$。则 $du = (\\xi + \\frac{3}{2})d\\xi = J(\\xi)d\\xi$。我们还必须根据此代换改变积分限：\n- 当 $\\xi = -1$ 时，$u = x(-1) = 0$。\n- 当 $\\xi = 1$ 时，$u = x(1) = 3$。\n\n积分变换如下：\n$$\nI = \\int_{u(\\xi=-1)}^{u(\\xi=1)} u^2 \\, du = \\int_{0}^{3} u^2 \\, du\n$$\n这是一个易于计算的积分：\n$$\nI = \\left[ \\frac{u^3}{3} \\right]_{0}^{3} = \\frac{3^3}{3} - \\frac{0^3}{3} = \\frac{27}{3} = 9\n$$\n这个结果可以通过在物理空间中直接积分来验证，这证实了我们方法的正确性：\n$$\n\\int_{0}^{3} x^2 \\, dx = \\left[ \\frac{x^3}{3} \\right]_{0}^{3} = \\frac{3^3}{3} = 9\n$$\n计算过程一致且正确。", "answer": "$$\n\\boxed{9}\n$$", "id": "2597909"}, {"introduction": "在掌握了基本操作后，我们将挑战非线性偏微分方程，例如伯格斯方程（Burgers' equation），这是许多物理现象的数学描述。处理非线性项是高阶方法中的一个核心难题，不同的处理方式会直接影响解的稳定性和物理保真度。本练习 [@problem_id:2597924] 将通过一个编程实践，对比两种计算对流项残差的策略，让你亲身体验和量化“混淆误差”（aliasing error）对能量守恒的影响，从而深入理解谱元法在非线性问题中的精妙之处。", "problem": "考虑单个参考谱元上守恒形式的一维无粘性伯格斯方程，\n$$\n\\partial_t u + \\partial_x \\left(\\tfrac{1}{2} u^2\\right) = 0,\\quad x\\in[-1,1],\n$$\n及其通过谱元法 (SEM) 进行的连续伽辽金离散化。使用一个 $N=6$ 次的多项式空间，其基函数为定义在高斯-洛巴托-勒让德 (GLL) 节点上的拉格朗日基函数。设 $\\{\\ell_i(x)\\}_{i=0}^{N}$ 是与 $N+1$ 个 GLL 节点 $\\{x_i\\}_{i=0}^{N}$ 相关联的节点基。定义节点向量 $u\\in\\mathbb{R}^{N+1}$，其分量为 $u_i = u(x_i)$。物理通量为 $f(u)=\\tfrac{1}{2}u^2$。\n\n您必须使用两种策略计算和比较对流残差：\n\n1. 欠积分（配置）残差：令 $D\\in\\mathbb{R}^{(N+1)\\times(N+1)}$ 为微分矩阵，其元素为 $D_{ij} = \\ell_j'(x_i)$。定义\n$$\nr^{\\mathrm{UI}} = D\\, f(u),\n$$\n其中 $f(u)$ 逐分量计算，即 $[f(u)]_i = \\tfrac{1}{2} u_i^2$。\n\n2. 完全积分（伽辽金）残差：使用通过过积分计算的精确弱形式。令一致质量矩阵为\n$$\nM_{ij} = \\int_{-1}^{1} \\ell_i(x)\\,\\ell_j(x)\\,dx,\n$$\n并定义载荷向量\n$$\ng_i = -\\int_{-1}^{1} \\ell_i'(x)\\, f\\!\\left(u_h(x)\\right)\\,dx,\\quad u_h(x)=\\sum_{k=0}^{N} u_k \\ell_k(x).\n$$\n通过求解以下方程组获得完全积分残差 $r^{\\mathrm{FI}}\\in\\mathbb{R}^{N+1}$：\n$$\nM\\, r^{\\mathrm{FI}} = g.\n$$\n所有单元级积分必须在 $[-1,1]$ 上使用 $Q=200$ 个点的高斯-勒让德求积法进行计算；为本问题之目的，这种过积分应被视为数值上精确。在求积节点上，基函数的所有导数都必须从拉格朗日基一致地计算，而不是通过有限差分计算。\n\n能量量化。离散能量为\n$$\nE_h(u) = \\tfrac{1}{2} u^\\top M\\, u.\n$$\n对于残差 $r$，定义瞬时能量生成率（仅由对流项引起）为\n$$\n\\dot E_h(u;r) = u^\\top M\\, r.\n$$\n在周期性域上并采用精确积分时，对流项不应改变能量，因此完全积分残差应满足 $\\dot E_h(u;r^{\\mathrm{FI}})\\approx 0$。\n\n差异度量。使用质量加权的 $L^2$ 范数来量化 $r^{\\mathrm{FI}}$ 和 $r^{\\mathrm{UI}}$ 之间的差异，\n$$\n\\|r^{\\mathrm{FI}}-r^{\\mathrm{UI}}\\|_{M} = \\sqrt{(r^{\\mathrm{FI}}-r^{\\mathrm{UI}})^\\top M\\, (r^{\\mathrm{FI}}-r^{\\mathrm{UI}})}.\n$$\n\n在单个程序中实现计算，无需用户输入。使用以下初始数据测试集，以其节点值 $u_i=u(x_i)$ 表示：\n- 情况 A（三角函数，周期性）： $u(x) = \\sin(\\pi x) + \\tfrac{1}{2}\\sin(2\\pi x)$。\n- 情况 B（低次多项式）： $u(x) = x^3 - x$。\n- 情况 C（最高阶模态勒让德多项式）： $u(x) = P_6(x)$，其中 $P_6$ 是6次勒让德多项式。\n\n对于每种情况，计算并报告三个量：\n- 质量加权的差异范数 $\\|r^{\\mathrm{FI}}-r^{\\mathrm{UI}}\\|_{M}$。\n- 欠积分的能量生成率 $\\dot E_h(u;r^{\\mathrm{UI}})$。\n- 完全积分的能量生成率 $\\dot E_h(u;r^{\\mathrm{FI}})$。\n\n所有计算都是无量纲的。输出格式说明：您的程序应生成单行输出，其中包含九个结果，顺序如下\n$$\n[\\|r^{\\mathrm{FI}}-r^{\\mathrm{UI}}\\|_{M}^{(A)},\\ \\dot E_h^{(A)}(u;r^{\\mathrm{UI}}),\\ \\dot E_h^{(A)}(u;r^{\\mathrm{FI}}),\\ \\|r^{\\mathrm{FI}}-r^{\\mathrm{UI}}\\|_{M}^{(B)},\\ \\dot E_h^{(B)}(u;r^{\\mathrm{UI}}),\\ \\dot E_h^{(B)}(u;r^{\\mathrm{FI}}),\\ \\|r^{\\mathrm{FI}}-r^{\\mathrm{UI}}\\|_{M}^{(C)},\\ \\dot E_h^{(C)}(u;r^{\\mathrm{UI}}),\\ \\dot E_h^{(C)}(u;r^{\\mathrm{FI}})],\n$$\n四舍五入到 $10$ 位小数，并以逗号分隔的列表形式打印，并用方括号括起来（例如， $[0.1234567890,0.0,0.0,\\dots]$）。不应打印任何其他文本。", "solution": "用户提供了有效的问题陈述。任务是使用谱元法 (SEM) 在参考单元 $x\\in[-1,1]$上，计算和比较一维无粘性伯格斯方程 $\\partial_t u + \\partial_x (\\frac{1}{2} u^2) = 0$ 中对流项的两种不同离散化方法。问题的核心在于区分一种计算效率高但不守恒的配置格式和一种计算成本更高但守恒的伽辽金格式。该分析对于理解求解非线性偏微分方程的高阶方法中的数值稳定性和守恒性至关重要。\n\n解决方案是通过为一个 $N=6$ 次的多项式逼近实现单单元谱元法代码的必要组件来构建的。\n\n首先，我们建立离散化框架。解 $u(x,t)$ 由一个多项式 $u_h(x,t) \\in \\mathcal{P}_N$ 逼近，其中 $\\mathcal{P}_N$ 是次数最多为 $N$ 的多项式空间。在节点谱元法中，该多项式由其在一组 $N+1$ 个求积节点上的值表示。对于本问题，使用高斯-洛巴托-勒让德 (GLL) 节点 $\\{x_i\\}_{i=0}^{N}$。这些节点是多项式 $(1-x^2)P_N'(x)$ 的根，其中 $P_N(x)$ 是 $N$ 次勒让德多项式。对于 $N=6$，这在区间 $[-1,1]$ 上给出了 7 个节点。\n\n多项式逼近式 $u_h(x,t)$ 在定义于这些 GLL 节点上的拉格朗日多项式基 $\\{\\ell_j(x)\\}_{j=0}^{N}$ 中表示为：\n$$\nu_h(x,t) = \\sum_{j=0}^{N} u_j(t) \\ell_j(x)\n$$\n其中 $u_j(t) = u_h(x_j,t)$ 是解的节点值，基函数满足基数性质 $\\ell_j(x_i) = \\delta_{ij}$。\n\n两种残差计算策略定义如下：\n\n1.  **欠积分（配置）残差, $r^{\\mathrm{UI}}$**：该方法源于在 GLL 节点上配置偏微分方程的强形式。将 $u_h$ 代入 PDE，我们得到一个残差 $R(x) = \\partial_t u_h + \\partial_x f(u_h)$。我们要求对于所有节点 $i=0, \\dots, N$ 都有 $R(x_i)=0$。该方程的空间部分产生了指定的残差。空间导数 $\\partial_x$ 被替换为微分矩阵 $D$ 的作用，其元素为 $D_{ij} = \\ell_j'(x_i)$。非线性通量 $f(u) = \\frac{1}{2}u^2$ 在节点处逐点计算，即 $[f(u)]_i = f(u_i)$。半离散方程变为 $\\dot{u}_i + [D f(u)]_i = 0$。因此，对流残差定义为：\n    $$\n    r^{\\mathrm{UI}} = D f(u)\n    $$\n    该格式计算效率高，因为它只涉及矩阵向量乘积。然而，通过仅在节点 $f(u(x_i))$ 处计算非线性项 $f(u_h(x))$ 的值，实际上是隐式地使用了 GLL 求积法来对弱形式中的非线性项进行积分。由于 $f(u_h(x))$ 的次数是 $2N$，这种求积是不精确的，会引入混叠误差，通常表现为违反守恒律。\n\n2.  **完全积分（伽辽金）残差, $r^{\\mathrm{FI}}$**：该方法源自 PDE 的弱形式。我们将 PDE 乘以一个测试函数 $v_h(x) \\in \\mathcal{P}_N$（此处为基函数 $\\ell_i(x)$），并在整个域上积分：\n    $$\n    \\int_{-1}^{1} \\ell_i(x) \\partial_t u_h(x) \\,dx + \\int_{-1}^{1} \\ell_i(x) \\partial_x f(u_h(x)) \\,dx = 0\n    $$\n    第一项给出了质量矩阵的贡献：$\\sum_{j=0}^N \\dot{u}_j \\int_{-1}^1 \\ell_i(x) \\ell_j(x) \\,dx = [M \\dot{u}]_i$。第二项进行分部积分：$\\int_{-1}^1 \\ell_i \\partial_x f(u_h) \\,dx = [\\ell_i f(u_h)]_{-1}^1 - \\int_{-1}^1 \\ell_i'(x) f(u_h(x)) \\,dx$。对于全局域上的连续伽辽金方法，边界项用于施加单元间的连续性或物理边界条件。对于此处考虑的单个单元，并根据问题定义，我们关注内部积分部分，它定义了向量 $g$：\n    $$\n    g_i = -\\int_{-1}^{1} \\ell_i'(x) f(u_h(x)) \\, dx\n    $$\n    半离散系统为 $M \\dot{u} = -g$。问题通过关系式 $M r^{\\mathrm{FI}} = g$ 定义了完全积分残差 $r^{\\mathrm{FI}}$。为避免混叠，质量矩阵 $M_{ij} = \\int \\ell_i \\ell_j \\,dx$ 和载荷向量 $g_i$ 的积分都必须以足够高的精度计算。问题指定了使用 $Q=200$ 个点的高斯-勒让德求积法，对于所涉及的多项式次数，这被视为数值上精确。\n\n为分析守恒性质，我们考察离散动能 $E_h = \\frac{1}{2} u^\\top M u$ 的变化率。其时间导数为 $\\dot{E}_h = u^\\top M \\dot{u}$。在我们的情境中，如果我们忽略边界通量，空间残差 $r$ 等价于 $-\\dot{u}$。问题将与残差 $r$ 相关的能量生成率定义为 $\\dot{E}_h(u;r) = u^\\top M r$。\n对于完全积分残差，该生成率为 $\\dot{E}_h(u; r^{\\mathrm{FI}}) = u^\\top M r^{\\mathrm{FI}} = u^\\top g$。展开此式，我们得到：\n$$\n\\dot{E}_h(u; r^{\\mathrm{FI}}) = \\sum_{i=0}^N u_i g_i = \\sum_{i=0}^N u_i \\left( -\\int_{-1}^1 \\ell_i'(x) f(u_h(x)) dx \\right) = -\\int_{-1}^1 \\left( \\sum_{i=0}^N u_i \\ell_i'(x) \\right) f(u_h(x)) dx\n$$\n注意到 $\\sum_i u_i \\ell_i'(x) = u_h'(x)$ 且 $f(u_h) = \\frac{1}{2}u_h^2$，该积分变为：\n$$\n\\dot{E}_h(u; r^{\\mathrm{FI}}) = -\\int_{-1}^1 u_h'(x) \\left(\\frac{1}{2}u_h(x)^2\\right) dx = -\\int_{-1}^1 \\frac{d}{dx}\\left(\\frac{1}{6}u_h(x)^3\\right) dx = -\\left[\\frac{1}{6}u_h(x)^3\\right]_{-1}^{1} = \\frac{1}{6}\\left(u_h(-1)^3 - u_h(1)^3\\right)\n$$\n这表明能量变化仅由边界上的通量引起。对于所提供的所有三个测试案例，都有 $u_h(-1)^3 = u_h(1)^3$，因此我们预期 $\\dot{E}_h(u; r^{\\mathrm{FI}})$ 在数值精度范围内为零。相比之下，由于配置方法中固有的混叠误差，$\\dot{E}_h(u; r^{\\mathrm{UI}}) = u^\\top M r^{\\mathrm{UI}}$ 通常不为零。\n\n两个残差之间的差异通过质量加权范数 $\\|r^{\\mathrm{FI}}-r^{\\mathrm{UI}}\\|_{M} = \\sqrt{(r^{\\mathrm{FI}}-r^{\\mathrm{UI}})^\\top M (r^{\\mathrm{FI}}-r^{\\mathrm{UI}})}$ 来量化，该范数代表了在空间的自然能量范数下的差异。\n\n计算步骤如下：\n1.  计算 $N=6$ 时的 $N+1$ 个 GLL 节点。\n2.  构建谱元法微分矩阵 $D \\in \\mathbb{R}^{(N+1)\\times(N+1)}$。\n3.  建立一个具有 $Q=200$ 个点的高阶高斯-勒让德求积法则。\n4.  在 $Q$ 个求积节点上计算拉格朗日基函数 $\\ell_j(x)$ 及其导数 $\\ell_j'(x)$ 的值。\n5.  使用这些计算结果通过数值求积计算一致质量矩阵 $M$。\n6.  对每个测试案例：\n    a. 通过在 GLL 节点上计算给定函数的值来确定节点解向量 $u$。\n    b. 计算配置残差 $r^{\\mathrm{UI}} = D f(u)$。\n    c. 使用高阶法则积分 $-\\ell_i'(x)f(u_h(x))$ 来计算伽辽金载荷向量 $g$。\n    d. 求解线性系统 $M r^{\\mathrm{FI}} = g$ 以找到伽辽金残差 $r^{\\mathrm{FI}}$。\n    e. 计算三个所需量：$\\|r^{\\mathrm{FI}}-r^{\\mathrm{UI}}\\|_{M}$、$\\dot{E}_h(u;r^{\\mathrm{UI}})$ 和 $\\dot{E}_h(u;r^{\\mathrm{FI}})$。\n然后将结果收集并按指定格式输出。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.special import roots_jacobi, eval_legendre\n\ndef get_gll_nodes(n):\n    \"\"\"\n    Computes the N+1 Gauss-Lobatto-Legendre nodes on [-1, 1].\n    \"\"\"\n    if n == 0:\n        return np.array([0.0])\n    if n == 1:\n        return np.array([-1.0, 1.0])\n    \n    # Interior nodes are roots of P_n'(x), which are roots of Jacobi P_{n-1}^{(1,1)}(x)\n    interior_nodes, _ = roots_jacobi(n - 1, 1, 1)\n    nodes = np.concatenate(([-1.0], np.sort(interior_nodes), [1.0]))\n    return nodes\n\ndef get_diff_matrix(n, nodes):\n    \"\"\"\n    Computes the (N+1)x(N+1) differentiation matrix D_ij = l'_j(x_i).\n    \"\"\"\n    D = np.zeros((n + 1, n + 1))\n    pn_vals_at_nodes = eval_legendre(n, nodes)\n    \n    for i in range(n + 1):\n        for j in range(n + 1):\n            if i == j:\n                if i == 0:\n                    D[i, j] = -n * (n + 1) / 4.0\n                elif i == n:\n                    D[i, j] = n * (n + 1) / 4.0\n                else:\n                    D[i, j] = 0.0\n            else:\n                D[i, j] = pn_vals_at_nodes[i] / (pn_vals_at_nodes[j] * (nodes[i] - nodes[j]))\n    return D\n\ndef lagrange_basis_poly(nodes, j):\n    \"\"\"\n    Returns a polynomial object for the j-th Lagrange basis function l_j(x).\n    \"\"\"\n    p = np.polynomial.Polynomial([1.0])\n    for k, node_k in enumerate(nodes):\n        if k == j:\n            continue\n        p = p * np.polynomial.Polynomial([-node_k, 1.0]) / (nodes[j] - node_k)\n    return p\n\ndef evaluate_basis_at_quad_points(nodes, quad_points):\n    \"\"\"\n    Evaluates all Lagrange basis functions and their derivatives at quadrature points.\n    Returns L, L_prime where L[q,j] = l_j(z_q) and L_prime[q,j] = l'_j(z_q).\n    \"\"\"\n    n_nodes = len(nodes)\n    n_quad = len(quad_points)\n    \n    L = np.zeros((n_quad, n_nodes))\n    L_prime = np.zeros((n_quad, n_nodes))\n    \n    for j in range(n_nodes):\n        lj = lagrange_basis_poly(nodes, j)\n        lj_prime = lj.deriv()\n        L[:, j] = lj(quad_points)\n        L_prime[:, j] = lj_prime(quad_points)\n        \n    return L, L_prime\n\ndef solve():\n    \"\"\"\n    Main function to solve the problem as specified.\n    \"\"\"\n    N = 6  # Polynomial degree\n    Q = 200 # Number of quadrature points for 'exact' integration\n\n    # 1. Setup SEM components\n    gll_nodes = get_gll_nodes(N)\n    diff_matrix_D = get_diff_matrix(N, gll_nodes)\n    \n    # 2. Setup high-order quadrature\n    gl_quad_points, gl_quad_weights = np.polynomial.legendre.leggauss(Q)\n    \n    # 3. Evaluate basis functions and derivatives at quadrature points\n    L_mat, L_prime_mat = evaluate_basis_at_quad_points(gll_nodes, gl_quad_points)\n    \n    # 4. Compute consistent mass matrix M using high-order quadrature\n    # M_ij = integral(l_i * l_j dx) ~ sum_q w_q * l_i(z_q) * l_j(z_q)\n    M = (L_mat.T * gl_quad_weights) @ L_mat\n\n    # 5. Define test cases\n    test_cases = {\n        'A': lambda x: np.sin(np.pi * x) + 0.5 * np.sin(2 * np.pi * x),\n        'B': lambda x: x**3 - x,\n        'C': lambda x: eval_legendre(N, x)\n    }\n    \n    results = []\n    \n    for case_id in ['A', 'B', 'C']:\n        # Get nodal values for the current test case\n        u_func = test_cases[case_id]\n        u_nodal = u_func(gll_nodes)\n        \n        # Flux at nodes\n        f_u_nodal = 0.5 * u_nodal**2\n        \n        # Compute under-integrated (collocation) residual\n        r_UI = diff_matrix_D @ f_u_nodal\n        \n        # Compute fully integrated (Galerkin) residual\n        # Reconstruct u_h and f(u_h) at quadrature points\n        u_h_at_quad = L_mat @ u_nodal\n        f_uh_at_quad = 0.5 * u_h_at_quad**2\n        \n        # Compute load vector g\n        # g_i = - integral( l'_i * f(u_h) dx ) ~ - sum_q w_q * l'_i(z_q) * f(u_h(z_q))\n        g = -L_prime_mat.T @ (gl_quad_weights * f_uh_at_quad)\n\n        # Solve M * r_FI = g\n        r_FI = np.linalg.solve(M, g)\n        \n        # --- Compute required quantities ---\n        \n        # Mass-weighted difference norm ||r_FI - r_UI||_M\n        r_diff = r_FI - r_UI\n        diff_norm_sq = r_diff.T @ M @ r_diff\n        diff_norm = np.sqrt(diff_norm_sq)\n        \n        # Under-integrated energy production rate\n        E_dot_UI = u_nodal.T @ M @ r_UI\n        \n        # Fully integrated energy production rate\n        E_dot_FI = u_nodal.T @ M @ r_FI\n        \n        results.extend([diff_norm, E_dot_UI, E_dot_FI])\n\n    # Format output to 10 decimal places as specified\n    formatted_results = [f\"{val:.10f}\" for val in results]\n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n```", "id": "2597924"}]}