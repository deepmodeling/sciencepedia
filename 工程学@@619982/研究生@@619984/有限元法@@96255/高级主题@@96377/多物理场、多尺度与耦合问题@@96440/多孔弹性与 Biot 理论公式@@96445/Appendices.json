{"hands_on_practices": [{"introduction": "理论模型的力量在于其预测能力，而这首先依赖于准确的物理参数。本练习旨在连接毕渥理论中的抽象参数与实验室中可测量的宏观属性。通过从给定的排干和不排干压缩性以及斯肯普顿系数 $B$ 等实验数据出发，您将推导出并计算毕渥系数 $\\alpha$ 和毕渥模量 $M$。这项实践不仅能加深您对这些关键参数物理意义的理解，还展示了如何将实验结果转化为可用于模拟的有效模型参数。[@problem_id:2590014]", "problem": "一块完全饱和的各向同性岩石，在线性Biot孔隙弹性理论的框架下，于等温、小应变条件下进行测试。独立的测量提供了排水压缩系数$C_{d}$、不排水压缩系数$C_{u}$以及Skempton系数$B$（定义为不排水各向同性加载中，孔隙压力增量与平均总应力增量之比）。设排水和不排水体积模量分别为$K_{d} = 1/C_{d}$和$K_{u} = 1/C_{u}$。Biot系数用$\\alpha$表示，Biot模量用$M$表示。仅从有效应力（Terzaghi–Biot有效应力）的定义、固体骨架的线弹性体积响应以及完全饱和介质的流体质量守恒出发，推导在各向同性加载条件下联系$K_{d}$、$K_{u}$、$\\alpha$、$M$和$B$之间的关系。然后使用给定的测量值\n- $C_{d} = 6.25 \\times 10^{-10}\\ \\mathrm{Pa}^{-1}$，\n- $C_{u} = 2.50 \\times 10^{-10}\\ \\mathrm{Pa}^{-1}$，\n- $B = 0.65$，\n来计算$\\alpha$和$M$。将$\\alpha$和$M$的值均四舍五入至四位有效数字，并将$M$以$\\mathrm{GPa}$为单位表示。将您的最终答案以单行矩阵的形式给出，矩阵中首先是$\\alpha$（无量纲），然后是$M$（单位为$\\mathrm{GPa}$）。", "solution": "所述问题具有科学依据，提法恰当且客观。这是线性孔隙弹性理论中的一个标准练习。我们将着手进行推导和后续计算。\n\n该分析基于完全饱和的各向同性孔隙弹性介质在等温、小应变条件下的三个基本原理：\n$1$. Terzaghi-Biot有效应力的定义，它将骨架应变的变化与总应力和孔隙压力的变化联系起来。\n$2$. 固体骨架对该有效应力的线弹性体积响应。\n$3$. 孔隙内流体质量守恒原理。\n\n设$\\sigma$为平均总应力，p为孔隙压力。我们采用压应力和压缩应变（压实）为正的约定。多孔骨架的体积应变用$\\varepsilon_v$表示。\n\n有效应力原理与线弹性响应相结合，表明骨架的体积应变与有效平均应力$\\sigma'$的变化成正比。有效应力定义为$\\sigma' = \\sigma - \\alpha p$，其中$\\alpha$是Biot-Willis系数。比例常数是排水体积模量$K_d$的倒数。其微分形式为：\n$$d\\varepsilon_v = \\frac{1}{K_d} d\\sigma' = \\frac{1}{K_d} (d\\sigma - \\alpha dp) \\quad (\\text{Eq. } 1)$$\n该方程描述了固体骨架的体积响应。\n\n流体质量守恒通过单位总体积的流体体积增量$\\zeta$来表示。变化量$d\\zeta$由两个效应引起：固体骨架的力学压缩（这会减小孔隙体积），以及孔隙压力的变化（这会影响流体密度和孔隙体积）。本构关系为：\n$$d\\zeta = -\\alpha d\\varepsilon_v + \\frac{1}{M} dp \\quad (\\text{Eq. } 2)$$\n这里，$M$是Biot模量。项$-\\alpha d\\varepsilon_v$表示因骨架压实（$d\\varepsilon_v > 0$）而排出的流体体积。项$\\frac{1}{M} dp$表示因孔隙压力增加而储存的流体体积。\n\n这两个方程构成了我们推导的基础。现在我们分析材料在排水和不排水条件下的响应。\n\n在排水条件下，孔隙压力保持恒定，因此$dp=0$。方程1简化为$d\\varepsilon_v = \\frac{1}{K_d} d\\sigma$。排水体积模量$K_d = 1/C_d$则定义为$K_d = \\frac{d\\sigma}{d\\varepsilon_v}|_{dp=0}$，这与我们的出发点是一致的。\n\n在不排水条件下，不允许流体进入或离开材料，因此流体体积含量的净变化为零，$d\\zeta=0$。根据方程2，我们有：\n$$0 = -\\alpha d\\varepsilon_v + \\frac{1}{M} dp$$\n这就得出了诱发孔隙压力与体积应变之间的关系：\n$$dp = \\alpha M d\\varepsilon_v \\quad (\\text{Eq. } 3)$$\n将这个$dp$的表达式代入方程1：\n$$d\\varepsilon_v = \\frac{1}{K_d} (d\\sigma - \\alpha (\\alpha M d\\varepsilon_v))$$\n$$d\\varepsilon_v = \\frac{1}{K_d} d\\sigma - \\frac{\\alpha^2 M}{K_d} d\\varepsilon_v$$\n重新整理各项以求解比值$d\\sigma / d\\varepsilon_v$：\n$$d\\varepsilon_v \\left(1 + \\frac{\\alpha^2 M}{K_d}\\right) = \\frac{1}{K_d} d\\sigma$$\n$$d\\varepsilon_v \\left(\\frac{K_d + \\alpha^2 M}{K_d}\\right) = \\frac{1}{K_d} d\\sigma$$\n$$d\\sigma = (K_d + \\alpha^2 M) d\\varepsilon_v$$\n不排水体积模量$K_u = 1/C_u$定义为不排水条件下总应力变化与体积应变变化之比，$K_u = \\frac{d\\sigma}{d\\varepsilon_v}|_{d\\zeta=0}$。因此，我们得到了第一个所需的关系式：\n$$K_u = K_d + \\alpha^2 M$$\n\nSkempton系数$B$定义为不排水各向同性加载下，诱发孔隙压力增量与平均总应力增量之比：\n$$B = \\frac{dp}{d\\sigma}\\Bigg|_{d\\zeta=0}$$\n使用我们不排水分析的结果，有$dp = \\alpha M d\\varepsilon_v$（来自方程3）和$d\\sigma = K_u d\\varepsilon_v$。将它们代入$B$的定义中：\n$$B = \\frac{\\alpha M d\\varepsilon_v}{K_u d\\varepsilon_v} = \\frac{\\alpha M}{K_u}$$\n这是第二个所需的关系式。推导到此结束。\n\n现在，我们使用所提供的数据计算$\\alpha$和$M$的值。\n给定的测量值为：\n$C_{d} = 6.25 \\times 10^{-10}\\ \\mathrm{Pa}^{-1}$\n$C_{u} = 2.50 \\times 10^{-10}\\ \\mathrm{Pa}^{-1}$\n$B = 0.65$\n\n首先，计算排水和不排水体积模量：\n$$K_d = \\frac{1}{C_d} = \\frac{1}{6.25 \\times 10^{-10}\\ \\mathrm{Pa}^{-1}} = 1.6 \\times 10^9\\ \\mathrm{Pa}$$\n$$K_u = \\frac{1}{C_u} = \\frac{1}{2.50 \\times 10^{-10}\\ \\mathrm{Pa}^{-1}} = 4.0 \\times 10^9\\ \\mathrm{Pa}$$\n\n我们得到一个包含两个未知数$\\alpha$和$M$的方程组：\n$1$. $K_u - K_d = \\alpha^2 M$\n$2$. $B K_u = \\alpha M$\n\n从第二个方程，我们得到$\\alpha M = B K_u$。将其代入第一个方程：\n$$K_u - K_d = \\alpha (B K_u)$$\n现在我们可以求解Biot系数$\\alpha$：\n$$\\alpha = \\frac{K_u - K_d}{B K_u}$$\n代入数值：\n$$\\alpha = \\frac{4.0 \\times 10^9\\ \\mathrm{Pa} - 1.6 \\times 10^9\\ \\mathrm{Pa}}{0.65 \\times (4.0 \\times 10^9\\ \\mathrm{Pa})} = \\frac{2.4 \\times 10^9}{2.6 \\times 10^9} = \\frac{12}{13} \\approx 0.9230769...$$\n四舍五入到四位有效数字，我们得到$\\alpha = 0.9231$。\n\n接下来，我们求解Biot模量$M$。使用关系式$M = \\frac{B K_u}{\\alpha}$：\n$$M = \\frac{0.65 \\times (4.0 \\times 10^9\\ \\mathrm{Pa})}{\\frac{12}{13}} = \\frac{2.6 \\times 10^9}{\\frac{12}{13}}\\ \\mathrm{Pa} = \\frac{2.6 \\times 13}{12} \\times 10^9\\ \\mathrm{Pa} \\approx 2.81666...\\times 10^9\\ \\mathrm{Pa}$$\n题目要求$M$的单位为吉帕斯卡（GPa），其中$1\\ \\mathrm{GPa} = 10^9\\ \\mathrm{Pa}$。\n$$M \\approx 2.8167\\ \\mathrm{GPa}$$\n四舍五入到四位有效数字，我们得到$M = 2.817\\ \\mathrm{GPa}$。\n\n最终值为$\\alpha \\approx 0.9231$（无量纲）和$M \\approx 2.817\\ \\mathrm{GPa}$。", "answer": "$$\n\\boxed{\n\\begin{pmatrix}\n0.9231 & 2.817\n\\end{pmatrix}\n}\n$$", "id": "2590014"}, {"introduction": "在掌握了模型参数的物理意义之后，下一步是求解描述孔隙弹性行为的耦合偏微分方程。本练习将引导您完成一个一维孔隙弹性杆的完整分析过程，从建立有限元方程，到编写代码进行数值模拟。您将通过探索水力传导率 $\\kappa$ 趋于无穷时的渐进行为，亲手验证系统如何从复杂的耦合响应过渡到简单的排干弹性行为，从而将抽象的数学公式与可观察的物理极限紧密联系起来。[@problem_id:2589919]", "problem": "考虑一个长度为 $L$、承受小变形的一维饱和多孔弹性杆。令 $u(x,t)$ 表示固体位移，$p(x,t)$ 表示孔隙压力。该杆通过线性 Biot 理论进行建模，使用以下数据：杨氏模量 $E$、Biot 系数 $\\alpha$、Biot 模量 $M$ 以及水力传导系数 $\\kappa$。基本平衡定律和本构关系被作为出发点：(i) 准静态状态下混合物的线性动量守恒，(ii) 孔隙流体的质量守恒，以及 (iii) 渗流的达西定律。具体来说，在一维空间且横截面积设为单位一时，这些定律导出耦合偏微分方程\n$$\\frac{\\partial}{\\partial x}\\left(E\\,\\frac{\\partial u}{\\partial x}-\\alpha\\,p\\right)=0,$$\n$$\\alpha\\,\\frac{\\partial}{\\partial t}\\left(\\frac{\\partial u}{\\partial x}\\right)+\\frac{1}{M}\\,\\frac{\\partial p}{\\partial t}-\\frac{\\partial}{\\partial x}\\left(\\kappa\\,\\frac{\\partial p}{\\partial x}\\right)=0.$$\n杆在 $x=0$ 处被固定，满足 $u(0,t)=0$，并在 $x=L$ 处承受给定的总牵引力 $T$，因此有 $\\left(E\\,\\frac{\\partial u}{\\partial x}-\\alpha\\,p\\right)(L,t)=T$。在 $x=0$ 和 $x=L$ 处，对所有 $t\\ge 0$，孔隙压力被指定为恒定边界值 $p(x,t)=\\bar p$。初始条件为对所有 $x\\in[0,L]$，$u(x,0)=0$ 和 $p(x,0)=\\bar p$。\n\n任务 A (推导)。从上述强形式出发，对均匀网格上的 $u$ 和 $p$ 使用标准 Galerkin 有限元法 (FEM) 和线性形函数，推导其弱形式以及相应的常微分方程半离散系统。位移和压力分别使用试函数 $v$ 和 $w$，并在适当之处进行分部积分。证明包含 $N$ 个位移和 $N$ 个压力节点自由度的半离散系统可以写成如下的分块矩阵形式\n$$\\mathbf{K}_u\\,\\mathbf{u}-\\mathbf{Q}\\,\\mathbf{p}=\\mathbf{f},$$\n$$\\mathbf{C}\\,\\dot{\\mathbf{u}}+\\mathbf{S}\\,\\dot{\\mathbf{p}}+\\mathbf{K}_p\\,\\mathbf{p}=\\mathbf{0},$$\n其中 $\\mathbf{K}_u$ 是弹性刚度矩阵，$\\mathbf{Q}$ 和 $\\mathbf{C}$ 是耦合矩阵，$\\mathbf{S}$ 是存储矩阵，$\\mathbf{K}_p$ 是流动 (扩散) 矩阵，$\\mathbf{f}$ 是一致性牵引力荷载向量。对于长度为 $h$ 的双节点单元，证明其单元矩阵为\n$$\\mathbf{K}_u^{(e)}=\\frac{E}{h}\\begin{bmatrix}1 & -1\\\\ -1 & 1\\end{bmatrix},\\quad \\mathbf{Q}^{(e)}=\\alpha\\begin{bmatrix}-\\tfrac{1}{2} & -\\tfrac{1}{2}\\\\ \\tfrac{1}{2} & \\tfrac{1}{2}\\end{bmatrix},\\quad \\mathbf{S}^{(e)}=\\frac{h}{6M}\\begin{bmatrix}2 & 1\\\\ 1 & 2\\end{bmatrix},\\quad \\mathbf{K}_p^{(e)}=\\frac{\\kappa}{h}\\begin{bmatrix}1 & -1\\\\ -1 & 1\\end{bmatrix}.$$\n\n任务 B (渐近极限)。使用半离散系统，从第一性原理出发，论证为何在 $M$ 固定的情况下，当 $\\kappa\\to\\infty$ 时，在任意固定的有限时间内，孔隙压力处处趋近于边界值，即对所有 $x\\in[0,L]$，$p(x,t)\\to\\bar p$。然后，证明动量守恒方程简化为具有均匀孔隙压力的排水弹性关系，从而得到位移分布\n$$u_{\\mathrm{drained}}(x)=\\frac{T+\\alpha\\,\\bar p}{E}\\,x,$$\n该分布满足 $u(0)=0$ 和 $\\left(E\\,u_x-\\alpha\\,\\bar p\\right)(L)=T$。\n\n任务 C (数值验证)。使用在 $[0,L]$ 上的 $N$ 个等距节点的线性有限元，为上述半离散方程实现一个全离散的后向欧拉时间积分器。组装全局矩阵，并使用固定的时间步长 $\\Delta t$ 从 $t=0$ 推进到最终时间 $t_{\\mathrm{eval}}$。在每个时间步，求解耦合分块系统以获得 $(\\mathbf{u}^{n},\\mathbf{p}^{n})$。使用本质 (Dirichlet) 边界条件 $u(0,t)=0$ 和 $p(0,t)=\\bar p$、$p(L,t)=\\bar p$，以及通过一致性力向量施加的自然牵引力 $\\left(E\\,u_x-\\alpha\\,p\\right)(L,t)=T$。测试套件采用以下参数值：\n- 域与离散化：$L=1\\,\\mathrm{m}$，$N=21$，$\\Delta t=10^{-2}\\,\\mathrm{s}$，$t_{\\mathrm{eval}}=5\\times 10^{-1}\\,\\mathrm{s}$。\n- 材料与荷载：$E=2\\times 10^{7}\\,\\mathrm{Pa}$，$\\alpha=8\\times 10^{-1}$，$M=10^{9}\\,\\mathrm{Pa}$，$T=10^{5}\\,\\mathrm{Pa}$，$\\bar p=10^{5}\\,\\mathrm{Pa}$。\n- 水力传导系数测试案例：$\\kappa\\in\\{10^{-9},\\,10^{-6},\\,10^{-3}\\}\\,\\mathrm{m}^2/(\\mathrm{Pa}\\cdot\\mathrm{s})$。\n\n对于测试套件中的每个 $\\kappa$，在 $t=t_{\\mathrm{eval}}$ 时计算：\n- 最大范数压力偏差 $e_p=\\max_{i}\\left|p_i-\\bar p\\right|$，单位为 $\\mathrm{Pa}$。\n- 与排水解的最大范数位移偏差 $e_u=\\max_{i}\\left|u_i-u_{\\mathrm{drained}}(x_i)\\right|$，单位为 $\\mathrm{m}$。\n\n您的程序必须输出单行结果，该结果是所有测试案例结果的逗号分隔列表，格式为列表的列表：\n$$\\bigl[\\,[e_{p}^{(1)},e_{u}^{(1)}],\\,[e_{p}^{(2)},e_{u}^{(2)}],\\,[e_{p}^{(3)},e_{u}^{(3)}]\\,\\bigr].$$\n将 $e_p$ 以 $\\mathrm{Pa}$ 为单位、将 $e_u$ 以 $\\mathrm{m}$ 为单位表示，每个值都四舍五入到六位小数。不应打印任何其他文本。程序必须是一个完整的、可运行的实现，无需用户输入或外部文件，并且只能使用指定的库。\n\n目标是通过观察在给定测试套件中 $e_p$ 和 $e_u$ 均减小，来数值上证明当 $M$ 固定时，随着 $\\kappa$ 增加，系统趋近于排水弹性，其中 $p\\to\\bar p$ 处处成立且 $u\\to u_{\\mathrm{drained}}(x)$。", "solution": "我们从一维空间和小变形情况下的全饱和多孔介质基本平衡定律开始。准静态条件下混合物的线性动量守恒方程为\n$$\\frac{\\partial}{\\partial x}\\left(\\sigma_{\\mathrm{total}}\\right)=0,$$\n其中总应力由有效应力减去流体贡献给出，\n$$\\sigma_{\\mathrm{total}}=\\sigma^{\\prime}-\\alpha\\,p,\\qquad \\sigma^{\\prime}=E\\,\\frac{\\partial u}{\\partial x}.$$\n因此，动量方程变为\n$$\\frac{\\partial}{\\partial x}\\left(E\\,\\frac{\\partial u}{\\partial x}-\\alpha\\,p\\right)=0,$$\n其自然边界条件为 $\\left(E\\,u_x-\\alpha\\,p\\right)(L,t)=T$ 且 $u(0,t)=0$。\n\n接下来，一维流体质量守恒方程为\n$$\\frac{\\partial}{\\partial t}\\left(\\alpha\\,\\varepsilon_v+\\frac{1}{M}\\,p\\right)+\\frac{\\partial q}{\\partial x}=0,$$\n其中在一维小应变运动学中，$\\varepsilon_v=u_x$，$q$ 是达西通量。达西定律规定\n$$q=-\\kappa\\,\\frac{\\partial p}{\\partial x}.$$\n将这些代入质量守恒方程得到\n$$\\alpha\\,\\frac{\\partial}{\\partial t}\\left(\\frac{\\partial u}{\\partial x}\\right)+\\frac{1}{M}\\,\\frac{\\partial p}{\\partial t}-\\frac{\\partial}{\\partial x}\\left(\\kappa\\,\\frac{\\partial p}{\\partial x}\\right)=0.$$\n边界压力被指定为 $p(0,t)=\\bar p$ 和 $p(L,t)=\\bar p$，初始条件为 $u(x,0)=0$ 和 $p(x,0)=\\bar p$。\n\n为了推导弱形式，令 $v$ 和 $w$ 分别为位移和压力的试函数。将动量方程乘以 $v$ 并进行分部积分：\n$$\\int_0^L \\left(E\\,u_x-\\alpha\\,p\\right) v_x\\,\\mathrm{d}x - \\left[\\left(E\\,u_x-\\alpha\\,p\\right) v\\right]_0^L=0.$$\n在 $u(0,t)=0$（因此 $v(0)=0$）和自然牵引力 $\\left(E\\,u_x-\\alpha\\,p\\right)(L,t)=T$ 的条件下，动量方程的弱形式为\n$$\\int_0^L E\\,u_x\\,v_x\\,\\mathrm{d}x - \\int_0^L \\alpha\\,p\\,v_x\\,\\mathrm{d}x = \\int_0^L 0\\,\\mathrm{d}x + T\\,v(L).$$\n同样，将质量守恒方程乘以 $w$ 并进行分部积分：\n$$\\int_0^L \\alpha\\,u_{x,t}\\,w\\,\\mathrm{d}x + \\int_0^L \\frac{1}{M}\\,p_t\\,w\\,\\mathrm{d}x + \\int_0^L \\kappa\\,p_x\\,w_x\\,\\mathrm{d}x - \\left[\\kappa\\,p_x\\,w\\right]_0^L = 0.$$\n由于两端均为本质压力边界条件，边界通量项在弱形式中消失。这些弱形式是有限元离散化的基础。\n\n现在，我们在均匀网格上使用标准的线性（双节点）形函数对 $u$ 和 $p$ 进行离散化。在一个长度为 $h$ 的单元上，令 $\\mathbf{N}=[N_1\\;N_2]$ 和 $\\mathbf{B}=\\left[\\begin{smallmatrix}-1/h & 1/h\\end{smallmatrix}\\right]$ 分别表示形函数行向量和微分算子。单元级矩阵由以下双线性形式产生：\n- 弹性刚度：$\\mathbf{K}_u^{(e)}=\\int_{x_e} E\\,\\mathbf{B}^{\\mathsf{T}}\\mathbf{B}\\,\\mathrm{d}x=\\dfrac{E}{h}\\begin{bmatrix}1 & -1\\\\ -1 & 1\\end{bmatrix}$。\n- 耦合：$\\mathbf{Q}^{(e)}=\\int_{x_e} \\alpha\\,\\mathbf{B}^{\\mathsf{T}}\\mathbf{N}\\,\\mathrm{d}x=\\alpha\\begin{bmatrix}-\\tfrac{1}{2} & -\\tfrac{1}{2}\\\\ \\tfrac{1}{2} & \\tfrac{1}{2}\\end{bmatrix}$，以及 $\\mathbf{C}^{(e)}=(\\mathbf{Q}^{(e)})^{\\mathsf{T}}$。\n- 存储：$\\mathbf{S}^{(e)}=\\int_{x_e} \\dfrac{1}{M}\\,\\mathbf{N}^{\\mathsf{T}}\\mathbf{N}\\,\\mathrm{d}x=\\dfrac{h}{6M}\\begin{bmatrix}2 & 1\\\\ 1 & 2\\end{bmatrix}$。\n- 流动：$\\mathbf{K}_p^{(e)}=\\int_{x_e} \\kappa\\,\\left(\\frac{\\partial \\mathbf{N}}{\\partial x}\\right)^{\\mathsf{T}}\\left(\\frac{\\partial \\mathbf{N}}{\\partial x}\\right)\\,\\mathrm{d}x=\\dfrac{\\kappa}{h}\\begin{bmatrix}1 & -1\\\\ -1 & 1\\end{bmatrix}$。\n在所有单元上进行组装，得到全局半离散系统\n$$\\mathbf{K}_u\\,\\mathbf{u}-\\mathbf{Q}\\,\\mathbf{p}=\\mathbf{f},\\qquad \\mathbf{C}\\,\\dot{\\mathbf{u}}+\\mathbf{S}\\,\\dot{\\mathbf{p}}+\\mathbf{K}_p\\,\\mathbf{p}=\\mathbf{0}.$$\n\n对于时间离散化，我们采用时间步长为 $\\Delta t$ 的后向欧拉格式。令上标表示时间层。在第 $n$ 步的全离散系统为\n$$\\mathbf{K}_u\\,\\mathbf{u}^{n}-\\mathbf{Q}\\,\\mathbf{p}^{n}=\\mathbf{f},$$\n$$\\frac{1}{\\Delta t}\\mathbf{C}\\,\\mathbf{u}^{n}+\\left(\\frac{1}{\\Delta t}\\mathbf{S}+\\mathbf{K}_p\\right)\\mathbf{p}^{n}=\\frac{1}{\\Delta t}\\mathbf{C}\\,\\mathbf{u}^{n-1}+\\frac{1}{\\Delta t}\\mathbf{S}\\,\\mathbf{p}^{n-1}.$$\n这可以被写成一个耦合的分块线性系统，并在每个时间步进行求解。通过修改代数系统来强加本质边界条件 $u(0,t)=0$ 以及 $p(0,t)=\\bar p$、$p(L,t)=\\bar p$，并将自然牵引力 $T$ 作为节点力施加在位移方程的右端。\n\n为了分析在 $M$ 固定时 $\\kappa\\to\\infty$ 的极限，我们考虑半离散的质量守恒方程。在任意固定的有限时间步长下，方程\n$$\\mathbf{C}\\,\\dot{\\mathbf{u}}+\\mathbf{S}\\,\\dot{\\mathbf{p}}+\\mathbf{K}_p\\,\\mathbf{p}=\\mathbf{0}$$\n表明扩散算子 $\\mathbf{K}_p$ 与 $\\kappa$ 呈线性关系。当 $\\kappa\\to\\infty$ 时，除非 $\\mathbf{p}$ 几乎在 $\\mathbf{K}_p$ 的零空间中，否则项 $\\mathbf{K}_p\\,\\mathbf{p}$ 将在左侧占主导地位。因为 $\\mathbf{K}_p$ 是一个两端带有 Dirichlet 条件的二阶算子的刚度矩阵，当边界条件强制两端 $p=\\bar p$ 时，其零空间仅包含常数向量 $\\mathbf{p}=\\bar p\\,\\mathbf{1}$。因此，在固定时间下唯一的有界解是 $\\mathbf{p}\\to \\bar p\\,\\mathbf{1}$，即对所有 $x$，$p(x,t)\\to\\bar p$。将此均匀压力代入动量守恒方程得到\n$$\\frac{\\partial}{\\partial x}\\left(E\\,u_x-\\alpha\\,\\bar p\\right)=0\\;\\;\\Rightarrow\\;\\;E\\,u_x-\\alpha\\,\\bar p=\\mathrm{const}.$$\n施加条件 $\\left(E\\,u_x-\\alpha\\,\\bar p\\right)(L)=T$ 得到处处有 $E\\,u_x-\\alpha\\,\\bar p=T$，因此\n$$u_{\\mathrm{drained}}(x)=\\frac{T+\\alpha\\,\\bar p}{E}\\,x,$$\n满足 $u(0)=0$。因此，在 $M$ 固定且 $\\kappa\\to\\infty$ 的极限下，我们恢复了排水弹性解。\n\n对于数值验证，我们实现了所描述的后向欧拉混合有限元法。我们选择 $L=1\\,\\mathrm{m}$，$N=21$，$\\Delta t=10^{-2}\\,\\mathrm{s}$，$t_{\\mathrm{eval}}=5\\times 10^{-1}\\,\\mathrm{s}$，$E=2\\times 10^{7}\\,\\mathrm{Pa}$，$\\alpha=8\\times 10^{-1}$，$M=10^{9}\\,\\mathrm{Pa}$，$T=10^{5}\\,\\mathrm{Pa}$，$\\bar p=10^{5}\\,\\mathrm{Pa}$，以及三个电导率 $\\kappa\\in\\{10^{-9},\\,10^{-6},\\,10^{-3}\\}\\,\\mathrm{m}^2/(\\mathrm{Pa}\\cdot\\mathrm{s})$。初始条件为 $\\mathbf{u}^0=\\mathbf{0}$ 和 $\\mathbf{p}^0=\\bar p\\,\\mathbf{1}$。在 $t_{\\mathrm{eval}}$ 时刻，我们计算 $e_p=\\max_i|p_i-\\bar p|$（单位 Pa）和 $e_u=\\max_i|u_i-u_{\\mathrm{drained}}(x_i)|$（单位 m）。随着测试套件中 $\\kappa$ 的增加，扩散算子的主导作用更强地强制 $p\\approx\\bar p$，因此 $e_p$ 和 $e_u$ 单调减小，从而证实了渐近的排水极限。该程序输出单行，格式为 $\\bigl[\\,[e_{p}^{(1)},e_{u}^{(1)}],\\,[e_{p}^{(2)},e_{u}^{(2)}],\\,[e_{p}^{(3)},e_{u}^{(3)}]\\,\\bigr]$，每个值四舍五入到六位小数，从而为在 $M$ 固定时，随着 $\\kappa\\to\\infty$ 系统收敛到排水弹性的现象提供了一个可量化的数值证明。", "answer": "```python\n# Poroelastic 1D Biot mixed FEM with backward Euler time stepping\n# Verifies that as kappa increases (with fixed M), p -> pbar and u -> drained elasticity.\n# Python 3.12, numpy 1.23.5, scipy 1.11.4 (not used).\nimport numpy as np\n\ndef assemble_matrices(n_nodes, L, E, alpha, M, kappa):\n    \"\"\"\n    Assemble global matrices for 1D linear elements on a uniform mesh.\n    Returns Ku, Q, S, Kp (each n x n).\n    \"\"\"\n    n = n_nodes\n    Ku = np.zeros((n, n), dtype=float)\n    Q = np.zeros((n, n), dtype=float)\n    S = np.zeros((n, n), dtype=float)\n    Kp = np.zeros((n, n), dtype=float)\n\n    h = L / (n - 1)\n\n    Ku_e = (E / h) * np.array([[1.0, -1.0],\n                               [-1.0, 1.0]])\n    Q_e = alpha * np.array([[-0.5, -0.5],\n                            [ 0.5,  0.5]])\n    S_e = (h / (6.0 * M)) * np.array([[2.0, 1.0],\n                                      [1.0, 2.0]])\n    Kp_e = (kappa / h) * np.array([[1.0, -1.0],\n                                   [-1.0, 1.0]])\n\n    for e in range(n - 1):\n        idx = [e, e + 1]\n        # Assemble\n        Ku[np.ix_(idx, idx)] += Ku_e\n        Q[np.ix_(idx, idx)] += Q_e\n        S[np.ix_(idx, idx)] += S_e\n        Kp[np.ix_(idx, idx)] += Kp_e\n\n    return Ku, Q, S, Kp\n\ndef apply_dirichlet(A, b, dof_indices, values):\n    \"\"\"\n    Apply Dirichlet constraints to the linear system A x = b.\n    dof_indices: list of indices in the global DOF vector.\n    values: corresponding Dirichlet values.\n    Modifies A and b in place (dense arrays).\n    \"\"\"\n    for idx, val in zip(dof_indices, values):\n        # Shift known value to RHS for all equations\n        b -= A[:, idx] * val\n        # Zero row and column, set diagonal to 1 and RHS to value\n        A[:, idx] = 0.0\n        A[idx, :] = 0.0\n        A[idx, idx] = 1.0\n        b[idx] = val\n\ndef solve_case(kappa, params):\n    \"\"\"\n    Solve the transient Biot system for a given kappa, return (e_p_max, e_u_max).\n    \"\"\"\n    # Unpack parameters\n    L = params[\"L\"]\n    n_nodes = params[\"n_nodes\"]\n    E = params[\"E\"]\n    alpha = params[\"alpha\"]\n    M = params[\"M\"]\n    T = params[\"T\"]\n    pbar = params[\"pbar\"]\n    dt = params[\"dt\"]\n    t_eval = params[\"t_eval\"]\n\n    # Assemble matrices\n    Ku, Q, S, Kp = assemble_matrices(n_nodes, L, E, alpha, M, kappa)\n    C = Q.T\n\n    n = n_nodes\n    size = 2 * n\n\n    # Coordinates and initial conditions\n    x = np.linspace(0.0, L, n)\n    u_prev = np.zeros(n, dtype=float)\n    p_prev = np.full(n, pbar, dtype=float)\n\n    # Time stepping\n    n_steps = int(round(t_eval / dt))\n    # Consistent traction vector (only at the last node for 1D bar)\n    f_u = np.zeros(n, dtype=float)\n    f_u[-1] = T\n\n    for _ in range(n_steps):\n        # Build block matrix and RHS for backward Euler\n        A = np.zeros((size, size), dtype=float)\n        b = np.zeros(size, dtype=float)\n\n        # Top-left block: Ku\n        A[0:n, 0:n] = Ku\n        # Top-right block: -Q\n        A[0:n, n:size] = -Q\n        # Bottom-left block: (1/dt) * C\n        A[n:size, 0:n] = (1.0 / dt) * C\n        # Bottom-right block: (S/dt + Kp)\n        A[n:size, n:size] = (1.0 / dt) * S + Kp\n\n        # RHS\n        b[0:n] = f_u  # traction\n        b[n:size] = (1.0 / dt) * (C @ u_prev) + (1.0 / dt) * (S @ p_prev)\n\n        # Dirichlet boundary conditions:\n        # u(0) = 0, p(0) = pbar, p(L) = pbar\n        dir_indices = [0, n + 0, n + (n - 1)]\n        dir_values = [0.0, pbar, pbar]\n        apply_dirichlet(A, b, dir_indices, dir_values)\n\n        # Solve linear system\n        sol = np.linalg.solve(A, b)\n        u_curr = sol[0:n]\n        p_curr = sol[n:size]\n\n        # Update\n        u_prev = u_curr\n        p_prev = p_curr\n\n    # Compute errors at final time\n    e_p = float(np.max(np.abs(p_curr - pbar)))\n    u_drained = ((T + alpha * pbar) / E) * x\n    e_u = float(np.max(np.abs(u_curr - u_drained)))\n\n    return e_p, e_u\n\ndef solve():\n    # Parameters (SI units)\n    params = {\n        \"L\": 1.0,                # m\n        \"n_nodes\": 21,           # nodes\n        \"E\": 2.0e7,              # Pa\n        \"alpha\": 0.8,            # -\n        \"M\": 1.0e9,              # Pa\n        \"T\": 1.0e5,              # Pa\n        \"pbar\": 1.0e5,           # Pa\n        \"dt\": 1.0e-2,            # s\n        \"t_eval\": 5.0e-1,        # s\n    }\n\n    # Test suite for kappa (m^2 / (Pa s))\n    kappas = [1.0e-9, 1.0e-6, 1.0e-3]\n\n    results = []\n    for kappa in kappas:\n        e_p, e_u = solve_case(kappa, params)\n        # Round to six decimal places as required\n        results.append([round(e_p, 6), round(e_u, 6)])\n\n    # Print in the exact required single-line format\n    print(str(results))\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "2589919"}, {"introduction": "一维模型是理解基本物理过程的绝佳起点，但真实世界的工程问题通常需要二维或三维分析。本练习将带您深入三维有限元实现的核心，专注于构建位移场和压力场之间的耦合矩阵。通过处理线性四面体单元，您将实践等参映射、雅可比矩阵计算和形函数梯度变换等关键技术，这些都是开发通用有限元软件所必需的实践技能。[@problem_id:2589925]", "problem": "考虑准静态小应变 Biot 孔隙弹性理论弱形式中，固体位移场的体积应变与流体压力测试函数之间的耦合项，其在域 $\\Omega$ 上的积分形式写作：\n$$\n\\int_{\\Omega} \\alpha \\, \\epsilon_v(\\mathbf{u}) \\, r \\, d\\Omega,\n$$\n其中 $\\alpha$ 是 Biot 系数，$\\epsilon_v(\\mathbf{u}) = \\nabla \\cdot \\mathbf{u}$ 是位移场 $\\mathbf{u}$ 的体积应变，而 $r$ 是标量压力测试函数。使用有限元法 (FEM)，采用线性四面体单元（四个节点），并对位移和压力使用相同的线性形函数进行等参插值。\n\n从以下基本基础出发：\n- 小应变运动学：$\\epsilon_v(\\mathbf{u}) = \\nabla \\cdot \\mathbf{u}$。\n- 位移的等参插值：$\\mathbf{u}(\\mathbf{x}) = \\sum_{i=1}^{4} N_i(\\mathbf{x}) \\, \\mathbf{d}_i$，其中 $\\mathbf{d}_i \\in \\mathbb{R}^3$ 是节点位移向量。\n- 压力测试函数的等参插值：$r(\\mathbf{x}) = \\sum_{j=1}^{4} N_j(\\mathbf{x}) \\, r_j$，其中 $r_j \\in \\mathbb{R}$ 是节点测试函数系数。\n- 线性四面体的参考坐标到物理坐标的仿射映射：\n  - 参考坐标 $\\widehat{\\boldsymbol{\\xi}}=(\\xi,\\eta,\\zeta)$ 和参考形函数 $\\widehat{N}_1 = 1-\\xi-\\eta-\\zeta$, $\\widehat{N}_2=\\xi$, $\\widehat{N}_3=\\eta$, $\\widehat{N}_4=\\zeta$。\n  - 物理映射 $\\mathbf{x}(\\widehat{\\boldsymbol{\\xi}}) = \\sum_{i=1}^{4} \\mathbf{X}_i \\, \\widehat{N}_i(\\widehat{\\boldsymbol{\\xi}})$，其中 $\\mathbf{X}_i \\in \\mathbb{R}^3$ 为顶点坐标。\n  - 雅可比矩阵 $\\mathbf{J} = \\left[ \\mathbf{X}_2-\\mathbf{X}_1 \\ \\ \\mathbf{X}_3-\\mathbf{X}_1 \\ \\ \\mathbf{X}_4-\\mathbf{X}_1 \\right] \\in \\mathbb{R}^{3\\times 3}$ 和单元体积 $V = \\frac{|\\det \\mathbf{J}|}{6}$。\n  - 形函数的物理梯度 $\\nabla N_i = \\mathbf{J}^{-T} \\, \\nabla_{\\widehat{\\boldsymbol{\\xi}}} \\widehat{N}_i$，其中 $\\nabla_{\\widehat{\\boldsymbol{\\xi}}} \\widehat{N}_1 = (-1,-1,-1)^T$, $\\nabla_{\\widehat{\\boldsymbol{\\xi}}} \\widehat{N}_2 = (1,0,0)^T$, $\\nabla_{\\widehat{\\boldsymbol{\\xi}}} \\widehat{N}_3 = (0,1,0)^T$, $\\nabla_{\\widehat{\\boldsymbol{\\xi}}} \\widehat{N}_4 = (0,0,1)^T$。\n\n你的任务是：\n- 仅从上述基础出发，推导 $4 \\times 12$ 单元级耦合矩阵 $\\mathbf{Q}_e$。该矩阵将单元级的 $12$ 个位移自由度映射到 $4$ 个压力测试函数系数，使得耦合项的离散贡献为 $\\mathbf{r}_e^T \\mathbf{Q}_e \\mathbf{d}_e$，其中 $\\mathbf{r}_e = [r_1, r_2, r_3, r_4]^T$ 且 $\\mathbf{d}_e = [u_{x1},u_{y1},u_{z1},u_{x2},u_{y2},u_{z2},u_{x3},u_{y3},u_{z3},u_{x4},u_{y4},u_{z4}]^T$。\n- 你的推导必须得出用 $\\alpha$、$V$ 和 $\\nabla N_i$ 表示的 $\\mathbf{Q}_e$ 的显式公式，并且必须包括如何从映射计算 $\\nabla N_i$。\n- 实现一个程序，在给定单元顶点坐标和 $\\alpha$ 的情况下，组装 $\\mathbf{Q}_e$。\n\n物理单位：\n- 所有坐标均以米（$\\mathrm{m}$）为单位。\n- Biot 系数 $\\alpha$ 是无量纲的。\n- 耦合矩阵 $\\mathbf{Q}_e$ 的元素必须以平方米（$\\mathrm{m}^2$）表示。\n\n测试套件：\n- 对于每种情况，使用所列的节点排序 $i=1,2,3,4$ 以及上面给出的 $\\mathbf{d}_e$ 中的位移自由度排序。计算 $\\mathbf{Q}_e$ 的弗罗贝尼乌斯范数（单位为 $\\mathrm{m}^2$），对于最后一种情况，还需输出弗罗贝尼乌斯范数的比率以验证仿射缩放。\n  1. 情况 A (理想情况): $\\alpha = 0.8$, 顶点 $\\mathbf{X}_1=(0,0,0)$, $\\mathbf{X}_2=(1,0,0)$, $\\mathbf{X}_3=(0,1,0)$, $\\mathbf{X}_4=(0,0,1)$。\n  2. 情况 B (各向异性缩放和平移): $\\alpha = 1.25$, 顶点 $\\mathbf{X}_1=(1,2,3)$, $\\mathbf{X}_2=(2,2,3)$, $\\mathbf{X}_3=(1,4,3)$, $\\mathbf{X}_4=(1,2,7)$。\n  3. 情况 C (扭曲的一般四面体): $\\alpha = 0.6$, 顶点 $\\mathbf{X}_1=(0.2,-0.1,0.3)$, $\\mathbf{X}_2=(1.1,0.0,0.5)$, $\\mathbf{X}_3=(-0.3,0.9,0.2)$, $\\mathbf{X}_4=(0.4,0.2,1.4)$。\n  4. 情况 D (情况 B 的均匀缩放，$s=3$): $\\alpha = 1.25$, 顶点 $\\mathbf{X}_i^{(D)} = 3 \\, \\mathbf{X}_i^{(B)}$，$i=1,\\ldots,4$。同时报告比率 $\\|\\mathbf{Q}_e^{(D)}\\|_F / \\|\\mathbf{Q}_e^{(B)}\\|_F$（无量纲），对于仿射映射，该值应等于 $s^2 = 9$。\n\n最终输出格式：\n- 你的程序应生成单行输出，其中包含一个用方括号括起来的逗号分隔列表，结果按顺序为\n$$\n[\\ \\|\\mathbf{Q}_e^{(A)}\\|_F,\\ \\|\\mathbf{Q}_e^{(B)}\\|_F,\\ \\|\\mathbf{Q}_e^{(C)}\\|_F,\\ \\|\\mathbf{Q}_e^{(D)}\\|_F,\\ \\|\\mathbf{Q}_e^{(D)}\\|_F / \\|\\mathbf{Q}_e^{(B)}\\|_F\\ ].\n$$\n所有范数必须以 $\\mathrm{m}^2$ 表示，比率为无量纲。将数值表示为浮点数。", "solution": "所述问题在数学上是适定的，并为推导和实现所需的单元级耦合矩阵提供了足够的信息。该问题科学地植根于已建立的 Biot 孔隙弹性理论及其有限元公式。我们将着手进行推导。然而，必须指出，在测试用例 B 和 D 中提供的 Biot 系数值 $\\alpha = 1.25$，在经典孔隙力学的背景下物理上是不常见的。标准定义 $\\alpha = 1 - K_d/K_s$（其中 $K_d$ 是排水体积模量，$K_s$ 是固体颗粒体积模量）将具有正定弹性模量的材料的 $\\alpha$ 值限制在小于 1。我们将把这视为一个纯粹的数学练习，但在物理背景下，这样的值需要仔细的论证或使用扩展理论。\n\n目标是推导线性四面体单元的单元级耦合矩阵 $\\mathbf{Q}_e$ 的显式形式，该矩阵对应于弱形式项 $\\int_{\\Omega} \\alpha \\, \\epsilon_v(\\mathbf{u}) \\, r \\, d\\Omega$。该项将固体位移场 $\\mathbf{u}$ 与流体压力测试函数 $r$ 耦合起来。\n\n此积分在单个单元域 $\\Omega_e$ 上的离散形式要求为 $\\mathbf{r}_e^T \\mathbf{Q}_e \\mathbf{d}_e$，其中 $\\mathbf{r}_e$ 是节点测试函数系数的 $4 \\times 1$ 向量，$\\mathbf{d}_e$ 是节点位移自由度的 $12 \\times 1$ 向量。\n\n让我们从积分项开始：\n$$\nI_e = \\int_{\\Omega_e} \\alpha \\, r(\\mathbf{x}) \\, \\epsilon_v(\\mathbf{u}(\\mathbf{x})) \\, d\\Omega_e\n$$\n我们对压力测试函数 $r$ 和位移场 $\\mathbf{u}$ 采用给定的等参插值，使用相同的线性形函数 $N_i(\\mathbf{x})$：\n$$\nr(\\mathbf{x}) = \\sum_{j=1}^{4} N_j(\\mathbf{x}) \\, r_j\n\\quad \\text{和} \\quad\n\\mathbf{u}(\\mathbf{x}) = \\sum_{i=1}^{4} N_i(\\mathbf{x}) \\, \\mathbf{d}_i\n$$\n这里，$r_j$ 是节点 $j$ 处测试函数的标量系数，$\\mathbf{d}_i = [u_{xi}, u_{yi}, u_{zi}]^T$ 是节点 $i$ 处位移分量的向量。\n\n体积应变 $\\epsilon_v$ 是位移场的散度：\n$$\n\\epsilon_v(\\mathbf{u}) = \\nabla \\cdot \\mathbf{u} = \\frac{\\partial u_x}{\\partial x} + \\frac{\\partial u_y}{\\partial y} + \\frac{\\partial u_z}{\\partial z}\n$$\n代入 $\\mathbf{u}$ 的插值：\n$$\nu_x(\\mathbf{x}) = \\sum_{i=1}^4 N_i(\\mathbf{x}) u_{xi}, \\quad u_y(\\mathbf{x}) = \\sum_{i=1}^4 N_i(\\mathbf{x}) u_{yi}, \\quad u_z(\\mathbf{x}) = \\sum_{i=1}^4 N_i(\\mathbf{x}) u_{zi}\n$$\n则散度为：\n$$\n\\epsilon_v(\\mathbf{u}) = \\sum_{i=1}^{4} \\left( \\frac{\\partial N_i}{\\partial x} u_{xi} + \\frac{\\partial N_i}{\\partial y} u_{yi} + \\frac{\\partial N_i}{\\partial z} u_{zi} \\right)\n$$\n这可以通过将形函数 $N_i$ 的物理梯度定义为 $\\nabla N_i = [\\frac{\\partial N_i}{\\partial x}, \\frac{\\partial N_i}{\\partial y}, \\frac{\\partial N_i}{\\partial z}]^T$ 来用矩阵表示法表示。然后：\n$$\n\\epsilon_v(\\mathbf{u}) = \\sum_{i=1}^{4} (\\nabla N_i)^T \\mathbf{d}_i\n$$\n我们可以通过将节点位移向量 $\\mathbf{d}_i$ 组装成单元位移向量 $\\mathbf{d}_e = [\\mathbf{d}_1^T, \\mathbf{d}_2^T, \\mathbf{d}_3^T, \\mathbf{d}_4^T]^T \\in \\mathbb{R}^{12}$，并定义一个形函数导数矩阵 $\\mathbf{B}_v(\\mathbf{x})$，来更紧凑地书写：\n$$\n\\mathbf{B}_v(\\mathbf{x}) = \\begin{bmatrix} (\\nabla N_1)^T & (\\nabla N_2)^T & (\\nabla N_3)^T & (\\nabla N_4)^T \\end{bmatrix} = \\begin{bmatrix} \\frac{\\partial N_1}{\\partial x} & \\frac{\\partial N_1}{\\partial y} & \\frac{\\partial N_1}{\\partial z} & \\cdots & \\frac{\\partial N_4}{\\partial z} \\end{bmatrix}\n$$\n由此，体积应变为 $\\epsilon_v(\\mathbf{u}) = \\mathbf{B}_v(\\mathbf{x}) \\, \\mathbf{d}_e$。\n类似地，测试函数可以写作 $r(\\mathbf{x}) = \\mathbf{N}(\\mathbf{x}) \\, \\mathbf{r}_e$，其中 $\\mathbf{N}(\\mathbf{x}) = [N_1(\\mathbf{x}), N_2(\\mathbf{x}), N_3(\\mathbf{x}), N_4(\\mathbf{x})]$ 且 $\\mathbf{r}_e = [r_1, r_2, r_3, r_4]^T$。\n\n将这些离散形式代入积分 $I_e$：\n$$\nI_e = \\int_{\\Omega_e} \\alpha \\, (\\mathbf{N}(\\mathbf{x}) \\, \\mathbf{r}_e) \\, (\\mathbf{B}_v(\\mathbf{x}) \\, \\mathbf{d}_e) \\, d\\Omega_e\n$$\n由于 $r$ 是一个标量，我们可以将其写作 $(\\mathbf{r}_e^T \\mathbf{N}(\\mathbf{x})^T)$。因为节点系数向量 $\\mathbf{r}_e$ 和 $\\mathbf{d}_e$ 相对于空间积分是常数，所以它们可以从积分中提出：\n$$\nI_e = \\mathbf{r}_e^T \\left( \\alpha \\int_{\\Omega_e} \\mathbf{N}(\\mathbf{x})^T \\mathbf{B}_v(\\mathbf{x}) \\, d\\Omega_e \\right) \\mathbf{d}_e\n$$\n通过将其与期望形式 $I_e = \\mathbf{r}_e^T \\mathbf{Q}_e \\mathbf{d}_e$ 进行比较，我们确定了单元耦合矩阵 $\\mathbf{Q}_e$：\n$$\n\\mathbf{Q}_e = \\alpha \\int_{\\Omega_e} \\mathbf{N}(\\mathbf{x})^T \\mathbf{B}_v(\\mathbf{x}) \\, d\\Omega_e\n$$\n被积函数是一个 $4 \\times 12$ 矩阵，由 $\\mathbf{N}^T$ 和 $\\mathbf{B}_v$ 的外积给出：\n$$\n\\mathbf{N}(\\mathbf{x})^T \\mathbf{B}_v(\\mathbf{x}) = \\begin{pmatrix} N_1 \\\\ N_2 \\\\ N_3 \\\\ N_4 \\end{pmatrix} \\begin{bmatrix} (\\nabla N_1)^T & \\cdots & (\\nabla N_4)^T \\end{bmatrix} = \\begin{pmatrix}\nN_1(\\nabla N_1)^T & N_1(\\nabla N_2)^T & \\cdots \\\\\nN_2(\\nabla N_1)^T & N_2(\\nabla N_2)^T & \\cdots \\\\\n\\vdots & \\vdots & \\ddots\n\\end{pmatrix}\n$$\n对于线性四面体单元，形函数 $N_i$ 在物理坐标 $\\mathbf{x}$ 中是线性的，因此它们的梯度 $\\nabla N_i$ 在单元内是常向量。这极大地简化了积分。我们可以将常数项 $\\nabla N_i$ 从积分中提出。$\\mathbf{Q}_e$ 的第 $(j, i)$ 块是一个 $1 \\times 3$ 的矩阵，它关联压力节点 $j$ 与位移节点 $i$，其形式为：\n$$\n\\mathbf{Q}_{e,ji} = \\alpha \\int_{\\Omega_e} N_j(\\mathbf{x}) (\\nabla N_i)^T \\, d\\Omega_e = \\alpha \\, (\\nabla N_i)^T \\int_{\\Omega_e} N_j(\\mathbf{x}) \\, d\\Omega_e\n$$\n线性形函数 $N_j$ 在四面体体积上的积分是一个有限元法中的标准结果：\n$$\n\\int_{\\Omega_e} N_j(\\mathbf{x}) \\, d\\Omega_e = \\frac{V_e}{4}\n$$\n其中 $V_e$ 是单元的体积。这可以通过变换到参考单元来正式证明，在参考单元中有 $\\int_{\\widehat{\\Omega}} \\widehat{N}_j \\, d\\widehat{\\Omega} = \\widehat{V}/4$。由于 $d\\Omega_e = \\det(\\mathbf{J})d\\widehat{\\Omega}$ 且 $\\det(\\mathbf{J})$ 是常数，物理积分变为 $\\det(\\mathbf{J})\\widehat{V}/4 = V_e/4$。\n\n代入此结果，块 $\\mathbf{Q}_{e,ji}$ 变为：\n$$\n\\mathbf{Q}_{e,ji} = \\alpha \\frac{V_e}{4} (\\nabla N_i)^T\n$$\n注意，这个块与测试函数节点索引 $j$ 无关。因此，完整矩阵 $\\mathbf{Q}_e$ 的所有四行都是相同的。完整的 $4 \\times 12$ 矩阵是：\n$$\n\\mathbf{Q}_e = \\alpha \\frac{V_e}{4} \\begin{pmatrix}\n(\\nabla N_1)^T & (\\nabla N_2)^T & (\\nabla N_3)^T & (\\nabla N_4)^T \\\\\n(\\nabla N_1)^T & (\\nabla N_2)^T & (\\nabla N_3)^T & (\\nabla N_4)^T \\\\\n(\\nabla N_1)^T & (\\nabla N_2)^T & (\\nabla N_3)^T & (\\nabla N_4)^T \\\\\n(\\nabla N_1)^T & (\\nabla N_2)^T & (\\nabla N_3)^T & (\\nabla N_4)^T\n\\end{pmatrix}\n$$\n这就是 $\\mathbf{Q}_e$ 的最终显式公式。\n\n为了实现这一点，我们必须计算单元体积 $V_e$ 和物理梯度 $\\nabla N_i$。给定单元顶点坐标 $\\mathbf{X}_1, \\mathbf{X}_2, \\mathbf{X}_3, \\mathbf{X}_4$：\n1.  构建从参考单元到物理单元的仿射映射的雅可比矩阵：\n    $$\n    \\mathbf{J} = \\begin{bmatrix} \\mathbf{X}_2 - \\mathbf{X}_1 & \\mathbf{X}_3 - \\mathbf{X}_1 & \\mathbf{X}_4 - \\mathbf{X}_1 \\end{bmatrix} \\in \\mathbb{R}^{3 \\times 3}\n    $$\n2.  计算单元体积：\n    $$\n    V_e = \\frac{|\\det(\\mathbf{J})|}{6}\n    $$\n3.  使用链式法则计算物理梯度 $\\nabla N_i = \\mathbf{J}^{-T} \\nabla_{\\widehat{\\boldsymbol{\\xi}}} \\widehat{N}_i$。参考梯度 $\\nabla_{\\widehat{\\boldsymbol{\\xi}}} \\widehat{N}_i$ 是给定的常数：\n    $$\n    \\nabla_{\\widehat{\\boldsymbol{\\xi}}} \\widehat{N}_1 = \\begin{pmatrix}-1\\\\-1\\\\-1\\end{pmatrix}, \\\n    \\nabla_{\\widehat{\\boldsymbol{\\xi}}} \\widehat{N}_2 = \\begin{pmatrix}1\\\\0\\\\0\\end{pmatrix}, \\\n    \\nabla_{\\widehat{\\boldsymbol{\\xi}}} \\widehat{N}_3 = \\begin{pmatrix}0\\\\1\\\\0\\end{pmatrix}, \\\n    \\nabla_{\\widehat{\\boldsymbol{\\xi}}} \\widehat{N}_4 = \\begin{pmatrix}0\\\\0\\\\1\\end{pmatrix}\n    $$\n4.  使用推导出的公式以及计算出的 $V_e$ 和 $\\nabla N_i$ 的值来组装 $4 \\times 12$ 矩阵 $\\mathbf{Q}_e$。$\\mathbf{Q}_e$ 元素的单位将是 $\\mathrm{m}^2$，因为 $\\alpha$ 是无量纲的，$V_e$ 的单位是 $\\mathrm{m}^3$，而 $\\nabla N_i$ 的分量单位是 $\\mathrm{m}^{-1}$。\n5.  最后，计算弗罗贝尼乌斯范数 $\\|\\mathbf{Q}_e\\|_F = \\sqrt{\\sum_{j,k} |(Q_e)_{jk}|^2}$。\n对情况 D（$ \\mathbf{X}^{(D)} = s \\mathbf{X}^{(B)}$）进行的仿射缩放分析表明，$\\mathbf{J}^{(D)}=s \\mathbf{J}^{(B)}$，$V_e^{(D)} = s^3 V_e^{(B)}$，$\\nabla N_i^{(D)} = s^{-1} \\nabla N_i^{(B)}$，因此 $\\mathbf{Q}_e^{(D)} = s^2 \\mathbf{Q}_e^{(B)}$。这导致范数缩放为 $\\|\\mathbf{Q}_e^{(D)}\\|_F = s^2 \\|\\mathbf{Q}_e^{(B)}\\|_F$，所以范数之比为 $s^2$。对于 $s=3$，该比率必须为 $9$。这可作为对理论推导及其实施的严格检验。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the poroelasticity coupling matrix problem for the given test cases.\n    \"\"\"\n\n    # Define the test cases from the problem statement.\n    # Each case is a tuple: (alpha, list_of_vertices)\n    test_cases = [\n        (0.8, np.array([[0, 0, 0], [1, 0, 0], [0, 1, 0], [0, 0, 1]], dtype=float)),\n        (1.25, np.array([[1, 2, 3], [2, 2, 3], [1, 4, 3], [1, 2, 7]], dtype=float)),\n        (0.6, np.array([[0.2, -0.1, 0.3], [1.1, 0.0, 0.5], [-0.3, 0.9, 0.2], [0.4, 0.2, 1.4]], dtype=float)),\n    ]\n\n    # Case D is derived from Case B\n    alpha_B, vertices_B = test_cases[1]\n    s = 3.0\n    vertices_D = s * vertices_B\n    test_cases.append((alpha_B, vertices_D))\n\n    # Gradients of shape functions in the reference coordinate system\n    # (xi, eta, zeta). These are constant vectors.\n    grad_N_ref = np.array([\n        [-1, -1, -1],\n        [1, 0, 0],\n        [0, 1, 0],\n        [0, 0, 1]\n    ], dtype=float).T # Transpose to get 3x4 matrix of column vectors\n\n    results = []\n    \n    for alpha, vertices in test_cases:\n        # Step 1: Compute the Jacobian matrix J.\n        # The columns of J are the vectors from vertex 1 to vertices 2, 3, 4.\n        # Vertices are 0-indexed here: X0, X1, X2, X3.\n        # J = [X1-X0, X2-X0, X3-X0]\n        X = vertices\n        J = np.vstack((X[1] - X[0], X[2] - X[0], X[3] - X[0])).T\n        \n        # Step 2: Compute the element volume V.\n        det_J = np.linalg.det(J)\n        V = np.abs(det_J) / 6.0\n        \n        # Step 3: Compute the physical gradients of the shape functions.\n        # grad_N_phys = J^(-T) * grad_N_ref\n        J_inv_T = np.linalg.inv(J).T\n        \n        # This results in a 3x4 matrix where each column is the gradient\n        # vector for a shape function N_i.\n        grad_N_phys = J_inv_T @ grad_N_ref\n        \n        # Step 4: Assemble the 4x12 element coupling matrix Q_e.\n        # All rows of Q_e are identical. First, construct one row.\n        # This row is a 1x12 vector formed by concatenating the transposed\n        # gradient vectors.\n        # Note: grad_N_phys[:, i] is the gradient vector for N_{i+1}.\n        # Its transpose is a row vector.\n        q_row = np.hstack([grad_N_phys[:, i].T for i in range(4)])\n        \n        # The full Q_e matrix is constructed by vertically stacking this\n        # row 4 times and scaling by alpha * V / 4.\n        prefactor = alpha * V / 4.0\n        Q_e = prefactor * np.tile(q_row, (4, 1))\n\n        # Step 5: Compute the Frobenius norm of Q_e.\n        norm_Qe = np.linalg.norm(Q_e, 'fro')\n        results.append(norm_Qe)\n\n    # For the final part of the output, calculate the ratio of norms for\n    # Cases D and B.\n    norm_B = results[1]\n    norm_D = results[3]\n    ratio = norm_D / norm_B\n    results.append(ratio)\n        \n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2589925"}]}