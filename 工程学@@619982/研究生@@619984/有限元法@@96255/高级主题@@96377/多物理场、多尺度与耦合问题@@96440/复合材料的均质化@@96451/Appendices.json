{"hands_on_practices": [{"introduction": "本章的第一个实践将带您回归本源，进行一次“纸上谈兵”的推导。通过双尺度渐进展开方法，我们将分析一个层状复合材料的均质化过程[@problem_id:2565061]。这个练习至关重要，因为它将抽象的理论与一个具体、可解析的结果联系起来，让您亲手推导出著名的串联（调和平均）和并联（算术平均）模型，从而深刻理解微观结构如何决定宏观的各向异性响应。", "problem": "考虑一个占据有界 Lipschitz 域 $\\Omega \\subset \\mathbb{R}^{2}$ 的周期性层状复合材料中的线性弹性反平面剪切问题。面外位移 $w^{\\varepsilon} : \\Omega \\to \\mathbb{R}$ 在 $\\Omega$ 中满足平衡方程 $-\\nabla \\cdot \\left( \\mu\\left(\\frac{\\boldsymbol{x}}{\\varepsilon}\\right) \\nabla w^{\\varepsilon}(\\boldsymbol{x}) \\right) = f(\\boldsymbol{x})$，并带有齐次 Dirichlet 边界条件。其中 $\\varepsilon > 0$ 是小尺度参数，$\\mu(\\boldsymbol{y})$ 是一个 $Y$-周期的剪切模量，周期单元为 $Y = (0,1)^{2}$。该复合材料是垂直于 $x_{1}$ 轴的层状材料：在 $0 < y_{1} < \\theta$ 的层中，$\\mu(\\boldsymbol{y}) = \\mu_{1}$；在 $\\theta < y_{1} < 1$ 的层中，$\\mu(\\boldsymbol{y}) = \\mu_{2}$。其中，体积分数 $\\theta \\in (0,1)$ 为定值，$\\mu_{1} > 0$ 和 $\\mu_{2} > 0$ 为正常数。\n\n在有限元方法（FEM）均匀化框架内，使用双尺度渐近展开法，推导周期性单元问题，并计算均匀化剪切刚度张量 $\\mathbb{C}^{\\ast} \\in \\mathbb{R}^{2 \\times 2}$，使得宏观通量在均匀化极限下满足 $\\boldsymbol{q}^{\\ast} = \\mathbb{C}^{\\ast} \\nabla w_{0}$。用 $\\mu_{1}$、$\\mu_{2}$ 和 $\\theta$ 显式表示 $\\mathbb{C}^{\\ast}$。然后，通过对推导出的单元问题进行解析推理，验证 $\\mathbb{C}^{\\ast}$ 的主分量与取决于加载方向相对于层方向的精确串联和并联界限相一致。\n\n你的最终答案必须是矩阵 $\\mathbb{C}^{\\ast}$，以 $\\mu_{1}$、$\\mu_{2}$ 和 $\\theta$ 的闭式解析表达式形式给出。无需进行数值计算，最终答案中也无需单位。", "solution": "所述问题是有效的。这是一个在复合材料均匀化理论领域内适定的、有科学依据的问题，基于线性弹性和渐近分析的既定原则。所有必要的数据和定义都已提供，没有内部矛盾、歧义或事实不符之处。我们将着手进行推导。\n\n该问题描述了反平面剪切变形，由面外位移 $w^{\\varepsilon}(\\boldsymbol{x})$ 描述，它满足平衡方程：\n$$-\\nabla \\cdot \\left( \\mu\\left(\\frac{\\boldsymbol{x}}{\\varepsilon}\\right) \\nabla w^{\\varepsilon}(\\boldsymbol{x}) \\right) = f(\\boldsymbol{x}) \\quad \\text{in } \\Omega \\subset \\mathbb{R}^{2}$$\n剪切模量 $\\mu(\\boldsymbol{y})$ 是一个 $Y$-周期函数，其中 $\\boldsymbol{y} = \\boldsymbol{x}/\\varepsilon$ 是快速尺度变量，而 $Y = (0,1)^{2}$ 是单位胞元。该材料是层垂直于 $x_{1}$ 轴的层状材料，这意味着 $\\mu(\\boldsymbol{y}) = \\mu(y_1)$。\n\n我们采用双尺度渐近展开法，假设解的形式为：\n$$w^{\\varepsilon}(\\boldsymbol{x}) = w_{0}(\\boldsymbol{x}) + \\varepsilon w_{1}(\\boldsymbol{x}, \\boldsymbol{y}) + \\varepsilon^{2} w_{2}(\\boldsymbol{x}, \\boldsymbol{y}) + \\dots$$\n其中每个 $w_{i}(\\boldsymbol{x}, \\boldsymbol{y})$ 关于 $\\boldsymbol{y}$ 都是 $Y$-周期的。根据链式法则，梯度算子变换为：$\\nabla = \\nabla_{\\boldsymbol{x}} + \\frac{1}{\\varepsilon}\\nabla_{\\boldsymbol{y}}$。将此展开式代入控制方程得到：\n$$-\\left(\\nabla_{\\boldsymbol{x}} + \\frac{1}{\\varepsilon}\\nabla_{\\boldsymbol{y}}\\right) \\cdot \\left[ \\mu(\\boldsymbol{y}) \\left(\\nabla_{\\boldsymbol{x}} + \\frac{1}{\\varepsilon}\\nabla_{\\boldsymbol{y}}\\right) (w_{0} + \\varepsilon w_{1} + \\dots) \\right] = f(\\boldsymbol{x})$$\n\n我们根据 $\\varepsilon$ 的幂次展开并收集各项：\n$$O(\\varepsilon^{-2}): \\quad -\\nabla_{\\boldsymbol{y}} \\cdot (\\mu(\\boldsymbol{y}) \\nabla_{\\boldsymbol{y}} w_{0}) = 0$$\n$$O(\\varepsilon^{-1}): \\quad -\\nabla_{\\boldsymbol{y}} \\cdot (\\mu(\\boldsymbol{y}) \\nabla_{\\boldsymbol{x}} w_{0}) - \\nabla_{\\boldsymbol{y}} \\cdot (\\mu(\\boldsymbol{y}) \\nabla_{\\boldsymbol{y}} w_{1}) = 0$$\n$$O(\\varepsilon^{0}): \\quad -\\nabla_{\\boldsymbol{x}} \\cdot (\\mu(\\boldsymbol{y}) \\nabla_{\\boldsymbol{x}} w_{0}) - \\nabla_{\\boldsymbol{x}} \\cdot (\\mu(\\boldsymbol{y}) \\nabla_{\\boldsymbol{y}} w_{1}) - \\nabla_{\\boldsymbol{y}} \\cdot (\\mu(\\boldsymbol{y}) \\nabla_{\\boldsymbol{x}} w_{1}) - \\nabla_{\\boldsymbol{y}} \\cdot (\\mu(\\boldsymbol{y}) \\nabla_{\\boldsymbol{y}} w_{2}) = f(\\boldsymbol{x})$$\n\n从 $O(\\varepsilon^{-2})$ 方程可知，由于 $\\mu > 0$ 且我们寻求 $w_0$ 在 $\\boldsymbol{y}$ 上的周期解，因此 $w_0$ 必定与 $\\boldsymbol{y}$ 无关，即 $w_{0}(\\boldsymbol{x}, \\boldsymbol{y}) = w_{0}(\\boldsymbol{x})$。\n\n$O(\\varepsilon^{-1})$ 方程是关于 $w_{1}$ 在单位胞元 $Y$ 上的问题。鉴于 $w_{0}$ 与 $\\boldsymbol{y}$ 无关，我们可以将 $\\nabla_{\\boldsymbol{x}}w_0$ 作为一个因子。我们寻求一个关于 $\\nabla_{\\boldsymbol{x}}w_0$ 线性的 $w_1$ 解：\n$$w_{1}(\\boldsymbol{x}, \\boldsymbol{y}) = \\sum_{k=1}^{2} \\chi_{k}(\\boldsymbol{y}) \\frac{\\partial w_{0}}{\\partial x_{k}}(\\boldsymbol{x})$$\n其中 $\\chi_{k}(\\boldsymbol{y})$ 是未知的单元函数，也称为修正子。将此假设代入 $O(\\varepsilon^{-1})$ 方程，得到关于每个修正子 $\\chi_k$ 的一组问题：\n$$-\\nabla_{\\boldsymbol{y}} \\cdot (\\mu(\\boldsymbol{y}) \\boldsymbol{e}_{k}) - \\nabla_{\\boldsymbol{y}} \\cdot (\\mu(\\boldsymbol{y}) \\nabla_{\\boldsymbol{y}} \\chi_{k}(\\boldsymbol{y})) = 0 \\quad \\text{for } k=1, 2$$\n这就是单元问题，我们将其改写为：\n$$-\\nabla_{\\boldsymbol{y}} \\cdot (\\mu(\\boldsymbol{y}) \\nabla_{\\boldsymbol{y}} \\chi_{k}(\\boldsymbol{y})) = \\nabla_{\\boldsymbol{y}} \\cdot (\\mu(\\boldsymbol{y}) \\boldsymbol{e}_{k})$$\n求解 $Y$-周期的 $\\chi_k$，其均值为零，即 $\\int_{Y} \\chi_{k}(\\boldsymbol{y}) d\\boldsymbol{y} = 0$。\n\n接下来，我们在单位胞元 $Y$ 上对 $O(\\varepsilon^{0})$ 方程进行平均。由于周期性，$\\nabla_{\\boldsymbol{y}} \\cdot (\\dots)$ 项在积分后消失。我们剩下：\n$$-\\int_{Y} \\left[ \\nabla_{\\boldsymbol{x}} \\cdot (\\mu \\nabla_{\\boldsymbol{x}} w_{0}) + \\nabla_{\\boldsymbol{x}} \\cdot (\\mu \\nabla_{\\boldsymbol{y}} w_{1}) \\right] d\\boldsymbol{y} = \\int_{Y} f(\\boldsymbol{x}) d\\boldsymbol{y}$$\n由于 $\\nabla_x$ 作用于宏观变量，可以将其移到积分符号外。注意到 $|Y|=1$：\n$$-\\nabla_{\\boldsymbol{x}} \\cdot \\left( \\int_{Y} \\mu(\\boldsymbol{y}) (\\nabla_{\\boldsymbol{x}} w_{0} + \\nabla_{\\boldsymbol{y}} w_{1}) d\\boldsymbol{y} \\right) = f(\\boldsymbol{x})$$\n括号内的项是均匀化通量，其对应的刚度张量 $\\mathbb{C}^{\\ast}$ 由 $\\boldsymbol{q}^{\\ast} = \\mathbb{C}^{\\ast} \\nabla w_{0}$ 定义。剪切通量为 $\\boldsymbol{q} = -\\mu \\nabla w$，则均匀化刚度张量由下式给出：\n$$C_{ij}^{\\ast} = \\int_{Y} \\mu(\\boldsymbol{y}) \\left( \\delta_{ij} + \\frac{\\partial \\chi_{j}(\\boldsymbol{y})}{\\partial y_{i}} \\right) d\\boldsymbol{y}$$\n\n现在，我们针对特定的层状结构求解单元问题，其中 $\\mu(\\boldsymbol{y}) = \\mu(y_1)$。\n对于 $k=1$：\n$$-\\nabla_{\\boldsymbol{y}} \\cdot (\\mu(y_1) \\nabla_{\\boldsymbol{y}} \\chi_{1}) = \\frac{\\partial \\mu(y_1)}{\\partial y_{1}}$$\n我们假设 $\\chi_1$ 仅依赖于 $y_1$。方程变为 $-\\frac{d}{dy_1}\\left(\\mu(y_1)\\frac{d\\chi_1}{dy_1}\\right) = \\frac{d\\mu}{dy_1}$。积分一次得到 $\\mu(y_1)\\frac{d\\chi_1}{dy_1} = -\\mu(y_1) + C$，其中 $C$ 为某个常数。因此，$\\frac{d\\chi_1}{dy_1} = -1 + \\frac{C}{\\mu(y_1)}$。为使 $\\chi_1$ 是周期的，必须满足 $\\int_0^1 \\frac{d\\chi_1}{dy_1} dy_1 = 0$，这给出 $\\int_0^1 (-1 + \\frac{C}{\\mu(y_1)}) dy_1 = 0$。由此确定常数 $C = \\left(\\int_0^1 \\frac{1}{\\mu(y_1)} dy_1\\right)^{-1}$。\n\n对于 $k=2$：\n$$-\\nabla_{\\boldsymbol{y}} \\cdot (\\mu(y_1) \\nabla_{\\boldsymbol{y}} \\chi_{2}) = \\frac{\\partial \\mu(y_1)}{\\partial y_{2}} = 0$$\n对于这个齐次方程，唯一的零均值 $Y$-周期解是 $\\chi_{2}(\\boldsymbol{y}) = 0$。\n\n现在我们计算 $\\mathbb{C}^{\\ast}$ 的分量。\n$C_{12}^{\\ast} = \\int_Y \\mu(y_1) \\frac{\\partial \\chi_2}{\\partial y_1} d\\boldsymbol{y} = 0$ 因为 $\\chi_2=0$。\n$C_{21}^{\\ast} = \\int_Y \\mu(y_1) \\frac{\\partial \\chi_1}{\\partial y_2} d\\boldsymbol{y} = 0$ 因为 $\\chi_1=\\chi_1(y_1)$。\n该张量是对角阵。\n\n对于对角分量：\n$C_{11}^{\\ast} = \\int_Y \\mu(y_1) \\left(1 + \\frac{\\partial \\chi_1}{\\partial y_1}\\right) d\\boldsymbol{y} = \\int_0^1 \\mu(y_1) \\left(1 + \\left(-1 + \\frac{C}{\\mu(y_1)}\\right)\\right) dy_1 = \\int_0^1 C dy_1 = C$。\n因此，$C_{11}^{\\ast} = \\left(\\int_0^1 \\frac{1}{\\mu(y_1)} dy_1\\right)^{-1}$。这是 $\\mu$ 的调和平均值。\n\n$C_{22}^{\\ast} = \\int_Y \\mu(y_1) \\left(1 + \\frac{\\partial \\chi_2}{\\partial y_2}\\right) d\\boldsymbol{y} = \\int_0^1 \\mu(y_1) (1+0) dy_1 = \\int_0^1 \\mu(y_1) dy_1$。这是 $\\mu$ 的算术平均值。\n\n最后，我们代入给定的分段常数函数 $\\mu(y_1)$：当 $y_1 \\in (0, \\theta)$ 时 $\\mu = \\mu_1$，当 $y_1 \\in (\\theta, 1)$ 时 $\\mu = \\mu_2$。\n调和平均值为：\n$$C_{11}^{\\ast} = \\left( \\int_0^{\\theta} \\frac{1}{\\mu_1} dy_1 + \\int_{\\theta}^{1} \\frac{1}{\\mu_2} dy_1 \\right)^{-1} = \\left( \\frac{\\theta}{\\mu_1} + \\frac{1-\\theta}{\\mu_2} \\right)^{-1} = \\frac{\\mu_1 \\mu_2}{\\theta\\mu_2 + (1-\\theta)\\mu_1}$$\n算术平均值为：\n$$C_{22}^{\\ast} = \\int_0^{\\theta} \\mu_1 dy_1 + \\int_{\\theta}^{1} \\mu_2 dy_1 = \\theta\\mu_1 + (1-\\theta)\\mu_2$$\n\n因此，均匀化刚度张量为：\n$$\\mathbb{C}^{\\ast} = \\begin{pmatrix} C_{11}^{\\ast} & 0 \\\\ 0 & C_{22}^{\\ast} \\end{pmatrix} = \\begin{pmatrix} \\frac{\\mu_1 \\mu_2}{\\theta\\mu_2 + (1-\\theta)\\mu_1} & 0 \\\\ 0 & \\theta\\mu_1 + (1-\\theta)\\mu_2 \\end{pmatrix}$$\n\n这一结果与物理推理相符。分量 $C_{11}^{\\ast}$ 代表沿 $x_1$ 轴方向（垂直于层）的剪切梯度下的有效刚度。这对应于一个“串联”力学模型，其有效属性是调和平均值。分量 $C_{22}^{\\ast}$ 代表沿 $x_2$ 轴方向（平行于层）的剪切梯度下的有效刚度。这对应于一个“并联”力学模型，其有效属性是算术平均值。我们推导的单元问题和得到的均匀化系数正确地再现了层状复合材料的这些精确界限。", "answer": "$$\\boxed{\\begin{pmatrix} \\frac{\\mu_1 \\mu_2}{\\theta\\mu_2 + (1-\\theta)\\mu_1} & 0 \\\\ 0 & \\theta\\mu_1 + (1-\\theta)\\mu_2 \\end{pmatrix}}$$", "id": "2565061"}, {"introduction": "最后一个练习是一个综合性的顶石实践项目。我们将把计算方法扩展到二维，处理一个更真实的微观结构——基体中的圆形夹杂物[@problem_id:2565193]。该练习涵盖了计算微观力学的完整工作流程：对代表性体积单元（RVE）进行网格划分，施加合适的边界条件，求解边值问题，并通过后处理提取有效的弹性模量。将数值结果与经典的Hashin–Shtrikman界限进行比较，是验证模型和算法正确性的关键一步。", "problem": "给定一个二维代表性体积单元 (RVE)，其模型为一个单位正方形，包含一个半径为 $r$、中心位于 $(0.5,0.5)$ 的圆形夹杂物。该复合材料由两个各向同性相组成：基体（相 $1$）和夹杂物（相 $2$）。每个相的特征在于其三维各向同性体积模量 $K$ 和剪切模量 $G$，两者均以吉帕斯卡 (GPa) 为单位。目标是使用有限元法 (FEM)，在平面应变运动学和运动学一致边界条件 (KUBC) 下，采用双线性四边形单元，计算复合材料的有效体积模量 $K_{\\mathrm{eff}}$ 和有效剪切模量 $G_{\\mathrm{eff}}$，并将其与三维 Hashin–Shtrikman 界限进行比较。\n\n推导必须从微应变线弹性定义和 Hill–Mandel 宏观均匀性条件出发。在微应变条件下，Cauchy 应力张量满足各向同性的 Hooke 定律\n$$\n\\boldsymbol{\\sigma} = 2 G \\boldsymbol{\\varepsilon} + \\lambda \\,\\mathrm{tr}(\\boldsymbol{\\varepsilon}) \\mathbf{I},\n$$\n其中 Lamé 参数为 $\\lambda = K - \\tfrac{2}{3} G$，$\\boldsymbol{\\varepsilon}$ 是对称微应变张量。在平面应变条件下，采用 Voigt 记法和工程剪切应变 $\\gamma_{xy} = 2 \\varepsilon_{xy}$，面内应力-应变定律为\n$$\n\\begin{bmatrix}\n\\sigma_{xx} \\\\ \\sigma_{yy} \\\\ \\sigma_{xy}\n\\end{bmatrix}\n=\n\\underbrace{\n\\begin{bmatrix}\n\\lambda + 2 G & \\lambda & 0 \\\\\n\\lambda & \\lambda + 2 G & 0 \\\\\n0 & 0 & G\n\\end{bmatrix}\n}_{\\mathbf{D}(K,G)}\n\\begin{bmatrix}\n\\varepsilon_{xx} \\\\ \\varepsilon_{yy} \\\\ \\gamma_{xy}\n\\end{bmatrix}.\n$$\nHill–Mandel 条件要求宏观应力功率等于微观应力功率的体积平均值。在 KUBC 和给定的宏观应变 $\\overline{\\boldsymbol{\\varepsilon}}$ 条件下，这简化为计算由与 $\\overline{\\boldsymbol{\\varepsilon}}$ 一致的边界位移场产生的应力场的体积平均值。\n\n有限元法要求：\n- 使用 $N \\times N$ 个双线性四边形单元的均匀网格对单位正方形进行离散化（总节点数为 $(N+1) \\times (N+1)$）。\n- 根据单元形心 $(x_c,y_c)$ 逐个单元地分配相属性：如果一个单元满足 $(x_c - 0.5)^2 + (y_c - 0.5)^2 \\le r^2$，则其为相 $2$，否则为相 $1$。面积分数 $f_2$ 必须计算为相 $2$ 单元数量与总单元数量的比值；设 $f_1 = 1 - f_2$。\n- 使用平面应变运动学和上述本构矩阵 $\\mathbf{D}(K,G)$，其中 $K$ 和 $G$ 取自每个单元所属的相。\n- 每个单元使用 $2 \\times 2$ 的 Gauss 积分。\n- 通过在整个边界上指定位移场 $\\mathbf{u}(\\mathbf{x}) = \\overline{\\boldsymbol{\\varepsilon}} \\,\\mathbf{x}$ 来施加运动学一致边界条件，其中 $\\overline{\\boldsymbol{\\varepsilon}}$ 是对称的。对于工程剪切，使用 $\\gamma_{xy} = 2 \\varepsilon_{xy}$，因此 $u_x = \\varepsilon_{xx} x + \\tfrac{\\gamma_{xy}}{2} y$ 且 $u_y = \\varepsilon_{yy} y + \\tfrac{\\gamma_{xy}}{2} x$。\n- 对于下面的每个载荷工况，求解线性系统，计算 Gauss 点处的单元应力，并在单位正方形上进行体积平均以获得 $\\langle \\boldsymbol{\\sigma} \\rangle$。\n\n有效模量提取：\n- 剪切载荷：施加 $\\overline{\\varepsilon}_{xx} = 0$, $\\overline{\\varepsilon}_{yy} = 0$, $\\overline{\\gamma}_{xy} = \\gamma_0$，其中 $\\gamma_0 = 2 \\times 10^{-3}$。有效剪切模量为\n$$\nG_{\\mathrm{eff}} = \\frac{\\langle \\sigma_{xy} \\rangle}{\\gamma_0}.\n$$\n- 等双轴载荷：施加 $\\overline{\\varepsilon}_{xx} = e_0$, $\\overline{\\varepsilon}_{yy} = e_0$, $\\overline{\\gamma}_{xy} = 0$，其中 $e_0 = 10^{-3}$。假设宏观面内各向同性，从下式中确定有效 Lamé 参数\n$$\n\\langle \\sigma_{xx} \\rangle = \\left(2 \\lambda_{\\mathrm{eff}} + 2 G_{\\mathrm{eff}}\\right) e_0 \\quad \\Rightarrow \\quad \\lambda_{\\mathrm{eff}} = \\frac{\\langle \\sigma_{xx} \\rangle}{2 e_0} - G_{\\mathrm{eff}},\n$$\n然后是有效体积模量\n$$\nK_{\\mathrm{eff}} = \\lambda_{\\mathrm{eff}} + \\frac{2}{3} G_{\\mathrm{eff}}.\n$$\n所有模量必须以吉帕斯卡 (GPa) 报告。\n\n对于体积分数为 $f_1$ 和 $f_2$ 的三维各向同性两相复合材料，其 Hashin–Shtrikman 界限为\n$$\nK_{\\mathrm{HS}}^{-} = K_1 + \\frac{f_2}{\\dfrac{1}{K_2 - K_1} + \\dfrac{3 f_1}{3 K_1 + 4 G_1}}, \\quad\nK_{\\mathrm{HS}}^{+} = K_2 + \\frac{f_1}{\\dfrac{1}{K_1 - K_2} + \\dfrac{3 f_2}{3 K_2 + 4 G_2}},\n$$\n$$\nG_{\\mathrm{HS}}^{-} = G_1 + \\frac{f_2}{\\dfrac{1}{G_2 - G_1} + \\dfrac{6 f_1 (K_1 + 2 G_1)}{5 G_1 (3 K_1 + 4 G_1)}}, \\quad\nG_{\\mathrm{HS}}^{+} = G_2 + \\frac{f_1}{\\dfrac{1}{G_1 - G_2} + \\dfrac{6 f_2 (K_2 + 2 G_2)}{5 G_2 (3 K_2 + 4 G_2)}}.\n$$\n通过将上下界设为该共同值来处理模量相等的退化情况，即 $K_1 = K_2$ 或 $G_1 = G_2$。\n\n测试套件：\n实现您的程序以评估以下四种情况。在每个元组中，参数为 $(N, r, K_1, G_1, K_2, G_2)$，其中 $K$ 和 $G$ 的单位为吉帕斯卡：\n- 情况 1: $(16, 0.30, 50.0, 20.0, 150.0, 60.0)$\n- 情况 2: $(12, 0.00, 50.0, 20.0, 150.0, 60.0)$\n- 情况 3: $(14, 0.35, 80.0, 30.0, 80.0, 30.0)$\n- 情况 4: $(18, 0.40, 50.0, 20.0, 1000.0, 400.0)$\n\n您的程序必须在每种情况下，使用由单元形心分配定义的面积分数 $f_2$，计算数值解 $(K_{\\mathrm{eff}}, G_{\\mathrm{eff}})$ 和四个 Hashin–Shtrikman 界限 $(K_{\\mathrm{HS}}^{-}, K_{\\mathrm{HS}}^{+}, G_{\\mathrm{HS}}^{-}, G_{\\mathrm{HS}}^{+} )$。所有模量均以吉帕斯卡表示。不涉及角度；无需角度单位。应变为无量纲。\n\n最终输出格式：\n您的程序应生成单行输出，其中包含一个结果列表，每个结果本身是按 $[K_{\\mathrm{eff}}, G_{\\mathrm{eff}}, K_{\\mathrm{HS}}^{-}, K_{\\mathrm{HS}}^{+}, G_{\\mathrm{HS}}^{-}, G_{\\mathrm{HS}}^{+}]$ 顺序排列的六个浮点数列表，使用 Python 列表字面量表示。对于上述四种情况，最终打印的行必须如下所示\n$[[\\cdot,\\cdot,\\cdot,\\cdot,\\cdot,\\cdot],[\\cdot,\\cdot,\\cdot,\\cdot,\\cdot,\\cdot],[\\cdot,\\cdot,\\cdot,\\cdot,\\cdot,\\cdot],[\\cdot,\\cdot,\\cdot,\\cdot,\\cdot,\\cdot]]$\n其中点号位置为实际数值。", "solution": "所提出的问题是计算微观力学中一个适定且标准的练习。它要求应用有限元法 (FEM)，在平面应变的假设下，确定二维两相复合材料的有效弹性性能。问题陈述在科学上是合理的、自洽的，并为获得唯一解提供了所有必要的数据和定义。我们将继续进行推导和实现。\n\n其理论基础是微应变线弹性理论。每个各向同性相 $i$ 的本构行为由 Hooke 定律描述，它将 Cauchy 应力张量 $\\boldsymbol{\\sigma}$ 与无穷小应变张量 $\\boldsymbol{\\varepsilon}$ 联系起来：\n$$\n\\boldsymbol{\\sigma} = 2 G_i \\boldsymbol{\\varepsilon} + \\lambda_i \\mathrm{tr}(\\boldsymbol{\\varepsilon}) \\mathbf{I}\n$$\n其中 $G_i$ 是剪切模量，$\\mathbf{I}$ 是单位张量，$\\lambda_i = K_i - \\frac{2}{3} G_i$ 是第一 Lamé 参数，$K_i$ 是体积模量。对于平面应变的二维情况，其中 $\\varepsilon_{zz} = \\varepsilon_{xz} = \\varepsilon_{yz} = 0$，该关系得到简化。对面内分量使用 Voigt 记法 $\\boldsymbol{\\sigma} = [\\sigma_{xx}, \\sigma_{yy}, \\sigma_{xy}]^T$ 和 $\\boldsymbol{\\varepsilon} = [\\varepsilon_{xx}, \\varepsilon_{yy}, \\gamma_{xy}]^T$（其中工程剪切应变为 $\\gamma_{xy} = 2\\varepsilon_{xy}$），本构定律由 $\\boldsymbol{\\sigma} = \\mathbf{D}_i \\boldsymbol{\\varepsilon}$ 给出，其中平面应变刚度矩阵 $\\mathbf{D}_i$ 是：\n$$\n\\mathbf{D}_i = \\begin{bmatrix}\n\\lambda_i + 2 G_i & \\lambda_i & 0 \\\\\n\\lambda_i & \\lambda_i + 2 G_i & 0 \\\\\n0 & 0 & G_i\n\\end{bmatrix}\n$$\n\n该过程包括以下步骤：\n\n1.  **有限元离散化**：将域（单位正方形 $\\Omega = [0,1] \\times [0,1]$）离散化为 $N \\times N$ 的均匀网格，该网格由四节点双线性四边形单元组成。每个单元的面积为 $A_e = (1/N)^2$。一个节点 $(i,j)$（其中 $i,j \\in \\{0, 1, \\dots, N\\}$）的坐标为 $(i/N, j/N)$。如果单元形心坐标 $(x_c, y_c)$ 满足 $(x_c - 0.5)^2 + (y_c - 0.5)^2 \\le r^2$，则该单元被赋予相 2（夹杂物）的属性；否则，它被赋予相 1（基体）的属性。\n\n2.  **单元刚度矩阵**：对于每个单元 $e$，刚度矩阵 $\\mathbf{k}^e$（一个 $8 \\times 8$ 矩阵）将单元的 8 个节点自由度（每个节点两个）与节点力联系起来。它是通过在单元面积 $\\Omega_e$ 上积分计算得出的：\n$$\n\\mathbf{k}^e = \\int_{\\Omega_e} \\mathbf{B}^T \\mathbf{D} \\mathbf{B} \\, dA\n$$\n这里，$\\mathbf{D}$ 是单元所属相的本构矩阵。矩阵 $\\mathbf{B}$ 将应变向量 $\\boldsymbol{\\varepsilon}$ 与单元的节点位移向量 $\\mathbf{u}^e$ 联系起来。对于节点 $k$，$\\mathbf{B}$ 中的相应块为\n$$\n\\mathbf{B}_k = \\begin{bmatrix} \\frac{\\partial N_k}{\\partial x} & 0 \\\\ 0 & \\frac{\\partial N_k}{\\partial y} \\\\ \\frac{\\partial N_k}{\\partial y} & \\frac{\\partial N_k}{\\partial x} \\end{bmatrix}\n$$\n其中 $N_k(x,y)$ 是双线性形函数。该积分在单元的参考坐标系 $(\\xi, \\eta) \\in [-1,1] \\times [-1,1]$ 中，使用 $2 \\times 2$ 的 Gaussian 求积方案进行数值计算。\n$$\n\\mathbf{k}^e = \\sum_{p=1}^{4} w_p \\mathbf{B}(\\xi_p, \\eta_p)^T \\mathbf{D} \\mathbf{B}(\\xi_p, \\eta_p) \\det(\\mathbf{J})\n$$\n其中 $w_p=1$ 是 Gauss 权重，$\\mathbf{J}$ 是从参考坐标到全局坐标映射的雅可比矩阵。对于边长为 $h=1/N$ 的正方形单元，$\\det(\\mathbf{J}) = (h/2)^2 = 1/(4N^2)$。\n\n3.  **全局组装和边界条件**：将单元刚度矩阵组装成针对整个包含 $(N+1)^2$ 个节点的系统的全局刚度矩阵 $\\mathbf{K}$。控制系统为 $\\mathbf{K} \\mathbf{U} = \\mathbf{F}$，其中 $\\mathbf{U}$ 是节点位移的全局向量，$\\mathbf{F}$ 是节点力的全局向量。\n    我们通过在所有边界节点上指定位移来施加运动学一致边界条件 (KUBC)。对于宏观应变张量 $\\overline{\\boldsymbol{\\varepsilon}}$，边界点 $\\mathbf{x}=[x,y]^T$ 处的位移 $\\mathbf{u}$ 为 $\\mathbf{u} = \\overline{\\boldsymbol{\\varepsilon}} \\mathbf{x}$。使用工程剪切应变，这表示为：\n$$\nu_x(x,y) = \\overline{\\varepsilon}_{xx} x + \\frac{\\overline{\\gamma}_{xy}}{2} y, \\quad u_y(x,y) = \\overline{\\varepsilon}_{yy} y + \\frac{\\overline{\\gamma}_{xy}}{2} x\n$$\n系统被划分为对应于内部节点（未知量，下标 $I$）和边界节点（已知量，下标 $B$）的自由度：\n$$\n\\begin{bmatrix} \\mathbf{K}_{II} & \\mathbf{K}_{IB} \\\\ \\mathbf{K}_{BI} & \\mathbf{K}_{BB} \\end{bmatrix} \\begin{bmatrix} \\mathbf{U}_I \\\\ \\mathbf{U}_B \\end{bmatrix} = \\begin{bmatrix} \\mathbf{F}_I \\\\ \\mathbf{F}_B \\end{bmatrix}\n$$\n在没有体力的情况下，$\\mathbf{F}_I = \\mathbf{0}$。未知的内节点位移 $\\mathbf{U}_I$ 通过求解简化系统得到：\n$$\n\\mathbf{K}_{II} \\mathbf{U}_I = -\\mathbf{K}_{IB} \\mathbf{U}_B\n$$\n\n4.  **均匀化和有效性能**：在求解出 $\\mathbf{U}_I$ 后，完整的位移场就已知了。Hill-Mandel 条件意味着宏观应力 $\\langle \\boldsymbol{\\sigma} \\rangle$ 是微观应力场 $\\boldsymbol{\\sigma}(\\mathbf{x})$ 的体积平均值。该平均值通过数值计算得出：\n$$\n\\langle \\boldsymbol{\\sigma} \\rangle = \\frac{1}{A_{total}} \\int_{\\Omega} \\boldsymbol{\\sigma}(\\mathbf{x}) \\, dA = \\frac{1}{1} \\sum_{e=1}^{N^2} \\int_{\\Omega_e} \\mathbf{D}_e \\mathbf{B} \\mathbf{u}^e \\, dA = \\sum_{e=1}^{N^2} \\sum_{p=1}^{4} w_p \\mathbf{D}_e \\mathbf{B}_{p} \\mathbf{u}^e \\frac{\\det(\\mathbf{J})}{1}\n$$\n当 $w_p=1$ 且 $\\det(\\mathbf{J})=1/(4N^2)$ 时，这简化为对所有单元中所有 Gauss 点处计算的应力张量取算术平均值。\n$$\n\\langle \\boldsymbol{\\sigma} \\rangle = \\frac{1}{4N^2} \\sum_{e=1}^{N^2} \\sum_{p=1}^{4} \\boldsymbol{\\sigma}_p^e\n$$\n我们应用两种载荷工况来求解有效模量：\n    a) **纯剪切**：设置 $\\overline{\\varepsilon}_{xx} = \\overline{\\varepsilon}_{yy} = 0$, $\\overline{\\gamma}_{xy} = \\gamma_0 = 2 \\times 10^{-3}$。有效剪切模量为：\n$$\nG_{\\mathrm{eff}} = \\frac{\\langle \\sigma_{xy} \\rangle}{\\overline{\\gamma}_{xy}}\n$$\n    b) **等双轴应变**：设置 $\\overline{\\varepsilon}_{xx} = \\overline{\\varepsilon}_{yy} = e_0 = 10^{-3}$, $\\overline{\\gamma}_{xy} = 0$。宏观响应为 $\\langle \\sigma_{xx} \\rangle = (2\\lambda_{\\mathrm{eff}} + 2G_{\\mathrm{eff}}) e_0$。我们已经通过剪切测试得到了 $G_{\\mathrm{eff}}$。因此，可以求出 $\\lambda_{\\mathrm{eff}}$：\n$$\n\\lambda_{\\mathrm{eff}} = \\frac{\\langle \\sigma_{xx} \\rangle}{2 e_0} - G_{\\mathrm{eff}}\n$$\n最后，有效体积模量根据其定义计算得出：\n$$\nK_{\\mathrm{eff}} = \\lambda_{\\mathrm{eff}} + \\frac{2}{3} G_{\\mathrm{eff}}\n$$\n\n5.  **Hashin-Shtrikman 界限**：将计算出的有效性能与用于两相各向同性复合材料的三维 Hashin-Shtrikman (HS) 界限进行基准比较。夹杂物相的体积分数 $f_2$ 计算为相 2 单元数量与总单元数量 $N^2$ 的比值。然后 $f_1 = 1 - f_2$。体积模量 $K$ 和剪切模量 $G$ 的下界 ($-$) 和上界 ($+$) 由所提供的公式给出。需要特别注意相模量相等的情况（$K_1=K_2$ 或 $G_1=G_2$），此时相应的上下界被简单地设置为该共同的模量值。\n\n对每个测试用例实施此程序，以得出所需的数值结果。", "answer": "```python\nimport numpy as np\n\ndef get_constitutive_matrix(K, G):\n    \"\"\"Computes the plane strain constitutive matrix D.\"\"\"\n    lambda_lame = K - (2.0 / 3.0) * G\n    C11 = lambda_lame + 2 * G\n    C12 = lambda_lame\n    C33 = G\n    return np.array([\n        [C11, C12, 0],\n        [C12, C11, 0],\n        [0,   0,   C33]\n    ])\n\ndef get_element_stiffness_and_B_matrices(h):\n    \"\"\"\n    Computes the bilinear quad element stiffness matrix template and B-matrices.\n    The final stiffness matrix is obtained by k = detJ * B^T D B, summed over Gauss points.\n    We return the ingredients: B matrices for each Gauss point and detJ.\n    \"\"\"\n    gauss_points = [-1.0 / np.sqrt(3.0), 1.0 / np.sqrt(3.0)]\n    B_matrices_gp = []\n    \n    # corner_nodes_ref = [(-1,-1), (1,-1), (1,1), (-1,1)]\n    xi_coords = [-1, 1, 1, -1]\n    eta_coords = [-1, -1, 1, 1]\n\n    for eta_gp in gauss_points:\n        for xi_gp in gauss_points:\n            B = np.zeros((3, 8))\n            for i in range(4):\n                xi_i, eta_i = xi_coords[i], eta_coords[i]\n                \n                # Derivatives of shape functions w.r.t. reference coordinates\n                dN_dxi = 0.25 * xi_i * (1 + eta_i * eta_gp)\n                dN_deta = 0.25 * eta_i * (1 + xi_i * xi_gp)\n                \n                # Jacobian for a square element of side h\n                # J = [[h/2, 0], [0, h/2]]\n                # J_inv = [[2/h, 0], [0, 2/h]]\n                \n                # Derivatives of shape functions w.r.t. global coordinates\n                dN_dx = dN_dxi * (2.0 / h)\n                dN_dy = dN_deta * (2.0 / h)\n                \n                # Assemble B_i into B\n                B[0, 2 * i] = dN_dx\n                B[1, 2 * i + 1] = dN_dy\n                B[2, 2 * i] = dN_dy\n                B[2, 2 * i + 1] = dN_dx\n            B_matrices_gp.append(B)\n            \n    # For a square element, det(J) is constant\n    det_J = (h / 2.0)**2\n    \n    return B_matrices_gp, det_J\n\ndef run_fem(N, r, K1, G1, K2, G2, macro_strain):\n    \"\"\"Main FEM routine for a single load case.\"\"\"\n    h = 1.0 / N\n    num_nodes = (N + 1)**2\n    num_elements = N**2\n    total_dofs = 2 * num_nodes\n\n    # Material properties\n    D1 = get_constitutive_matrix(K1, G1)\n    D2 = get_constitutive_matrix(K2, G2)\n\n    # Pre-compute element stiffness components\n    B_matrices_gp, det_J = get_element_stiffness_and_B_matrices(h)\n\n    # Assembly\n    K_global = np.zeros((total_dofs, total_dofs))\n    element_phases = []\n    \n    for j in range(N):\n        for i in range(N):\n            elem_idx = j * N + i\n            \n            # Element phase assignment\n            xc = (i + 0.5) * h\n            yc = (j + 0.5) * h\n            is_phase2 = (xc - 0.5)**2 + (yc - 0.5)**2 <= r**2\n            D_elem = D2 if is_phase2 else D1\n            element_phases.append(2 if is_phase2 else 1)\n\n            # Element stiffness calculation\n            k_elem = np.zeros((8, 8))\n            for B_gp in B_matrices_gp:\n                k_elem += B_gp.T @ D_elem @ B_gp * det_J\n            \n            # Global assembly\n            node_0 = j * (N + 1) + i\n            node_1 = j * (N + 1) + i + 1\n            node_2 = (j + 1) * (N + 1) + i + 1\n            node_3 = (j + 1) * (N + 1) + i\n            \n            nodes = [node_0, node_1, node_2, node_3]\n            dof_indices = []\n            for node in nodes:\n                dof_indices.extend([2 * node, 2 * node + 1])\n                \n            K_global[np.ix_(dof_indices, dof_indices)] += k_elem\n\n    # Apply Boundary Conditions\n    boundary_dofs = []\n    internal_dofs = []\n    node_coords = np.zeros((num_nodes, 2))\n    \n    for j in range(N + 1):\n        for i in range(N + 1):\n            node_idx = j * (N + 1) + i\n            dof_x, dof_y = 2 * node_idx, 2 * node_idx + 1\n            node_coords[node_idx] = [i * h, j * h]\n            \n            if i == 0 or i == N or j == 0 or j == N:\n                boundary_dofs.extend([dof_x, dof_y])\n            else:\n                internal_dofs.extend([dof_x, dof_y])\n\n    U_B = np.zeros(len(boundary_dofs))\n    e_xx, e_yy, gam_xy = macro_strain\n\n    for i, dof in enumerate(boundary_dofs):\n        node_idx = dof // 2\n        x, y = node_coords[node_idx]\n        if dof % 2 == 0:  # x-dof\n            U_B[i] = e_xx * x + gam_xy / 2.0 * y\n        else: # y-dof\n            U_B[i] = e_yy * y + gam_xy / 2.0 * x\n\n    K_II = K_global[np.ix_(internal_dofs, internal_dofs)]\n    K_IB = K_global[np.ix_(internal_dofs, boundary_dofs)]\n    \n    F_I = -K_IB @ U_B\n    U_I = np.linalg.solve(K_II, F_I)\n\n    # Reconstruct full displacement vector\n    U_global = np.zeros(total_dofs)\n    U_global[internal_dofs] = U_I\n    U_global[boundary_dofs] = U_B\n\n    # Post-processing: Stress averaging\n    avg_stress = np.zeros(3)\n    for j in range(N):\n        for i in range(N):\n            elem_idx = j * N + i\n            D_elem = D2 if element_phases[elem_idx] == 2 else D1\n            \n            node_0 = j * (N + 1) + i\n            node_1 = j * (N + 1) + i + 1\n            node_2 = (j + 1) * (N + 1) + i + 1\n            node_3 = (j + 1) * (N + 1) + i\n            nodes = [node_0, node_1, node_2, node_3]\n            \n            dof_indices = []\n            for node in nodes:\n                dof_indices.extend([2 * node, 2 * node + 1])\n            u_elem = U_global[dof_indices]\n\n            for B_gp in B_matrices_gp:\n                stress_gp = D_elem @ B_gp @ u_elem\n                avg_stress += stress_gp\n\n    avg_stress /= (num_elements * 4) # Average over all Gauss points\n    f2 = sum(1 for phase in element_phases if phase == 2) / num_elements\n    \n    return avg_stress, f2\n\ndef calculate_hs_bounds(f1, f2, K1, G1, K2, G2):\n    # Equal moduli case\n    if K1 == K2:\n        K_hs_lower, K_hs_upper = K1, K1\n    else:\n        # Lower bound\n        num = f2\n        den = 1.0 / (K2 - K1) + (3 * f1) / (3 * K1 + 4 * G1)\n        K_hs_lower = K1 + num / den\n        # Upper bound\n        num = f1\n        den = 1.0 / (K1 - K2) + (3 * f2) / (3 * K2 + 4 * G2)\n        K_hs_upper = K2 + num / den\n\n    if G1 == G2:\n        G_hs_lower, G_hs_upper = G1, G1\n    else:\n        # Lower bound\n        num = f2\n        den = 1.0 / (G2 - G1) + (6 * f1 * (K1 + 2 * G1)) / (5 * G1 * (3 * K1 + 4 * G1))\n        G_hs_lower = G1 + num / den\n        # Upper bound\n        num = f1\n        den = 1.0 / (G1 - G2) + (6 * f2 * (K2 + 2 * G2)) / (5 * G2 * (3 * K2 + 4 * G2))\n        G_hs_upper = G2 + num / den\n    \n    # Ensure lower is not greater than upper due to formula differences (phase 1 vs 2)\n    return min(K_hs_lower, K_hs_upper), max(K_hs_lower, K_hs_upper), \\\n           min(G_hs_lower, G_hs_upper), max(G_hs_lower, G_hs_upper)\n\ndef process_case(N, r, K1, G1, K2, G2):\n    gamma0 = 2.0e-3\n    e0 = 1.0e-3\n    \n    # 1. Shear test\n    shear_strain = (0.0, 0.0, gamma0)\n    avg_stress_shear, f2 = run_fem(N, r, K1, G1, K2, G2, shear_strain)\n    G_eff = avg_stress_shear[2] / gamma0\n    \n    # 2. Biaxial test\n    biaxial_strain = (e0, e0, 0.0)\n    avg_stress_biaxial, _ = run_fem(N, r, K1, G1, K2, G2, biaxial_strain)\n    \n    # Assuming macroscopic isotropy, <sigma_xx> = <sigma_yy>\n    # We use <sigma_xx> as per problem\n    lambda_eff = (avg_stress_biaxial[0] / (2.0 * e0)) - G_eff\n    K_eff = lambda_eff + (2.0 / 3.0) * G_eff\n    \n    # 3. Hashin-Shtrikman bounds\n    f1 = 1.0 - f2\n    K_hs_lower, K_hs_upper, G_hs_lower, G_hs_upper = calculate_hs_bounds(f1, f2, K1, G1, K2, G2)\n    \n    return [K_eff, G_eff, K_hs_lower, K_hs_upper, G_hs_lower, G_hs_upper]\n\ndef solve():\n    test_cases = [\n        (16, 0.30, 50.0, 20.0, 150.0, 60.0),\n        (12, 0.00, 50.0, 20.0, 150.0, 60.0),\n        (14, 0.35, 80.0, 30.0, 80.0, 30.0),\n        (18, 0.40, 50.0, 20.0, 1000.0, 400.0)\n    ]\n\n    all_results = []\n    for case in test_cases:\n        N, r, K1, G1, K2, G2 = case\n        result = process_case(N, r, K1, G1, K2, G2)\n        all_results.append(result)\n    \n    print(str(all_results).replace(\" \", \"\"))\n\nsolve()\n```", "id": "2565193"}]}