{"hands_on_practices": [{"introduction": "任何有限元方法的基础都始于理解其在单元级别的贡献。第一个练习要求你为一维对流扩散问题推导GLS稳定化弱形式，并计算线性元的显式稳定化矩阵。完成此练习 [@problem_id:2561151] 能让你具体理解抽象的稳定化项如何转化为离散代数系统中一个有形的组成部分。", "problem": "考虑区间 $(0,1)$ 上的一维稳态对流扩散模型问题，\n$$- \\kappa \\, u''(x) + \\beta \\, u'(x) = f(x), \\quad x \\in (0,1),$$\n边界条件为齐次狄利克雷边界条件 $u(0)=0$ 和 $u(1)=0$，其中 $\\kappa>0$ 和 $\\beta \\in \\mathbb{R}$ 为常数。设 $V_h$ 表示一个协调、分片线性有限元空间，该空间从属于区间 $(0,1)$ 的一个划分，此划分由不重叠的开单元 $\\{K_e\\}$ 组成，节点位于单元端点，网格尺寸为 $h_e = \\operatorname{meas}(K_e)$。使用加权残差陈述和伽辽金法的标准变分形式，通过在每个单元 $K_e$ 上添加一个形式如下的稳定化项，来推导伽辽金/最小二乘稳定化 (GLS) 弱形式\n$$\\tau_e \\, \\big( \\mathcal{L} u_h, \\mathcal{L} v_h \\big)_{K_e},$$\n其中 $\\mathcal{L} := -\\kappa \\tfrac{d^2}{dx^2} + \\beta \\tfrac{d}{dx}$ 且 $\\tau_e>0$ 是一个单元稳定化参数。请明确陈述所得到的稳定化弱问题。\n\n然后，在一个泛型单元 $K_e=[x_a,x_b]$ 上，使用 $V_h$ 的局部节点基 $\\{\\varphi_1,\\varphi_2\\}$（其中 $\\varphi_1(x_a)=1$, $\\varphi_1(x_b)=0$, $\\varphi_2(x_a)=0$, $\\varphi_2(x_b)=1$），计算 $2 \\times 2$ 单元级 GLS 稳定化矩阵 $\\mathbf{K}^{(e)}_{\\text{GLS}}$，其元素为\n$$\\big(\\mathbf{K}^{(e)}_{\\text{GLS}}\\big)_{ij} \\;=\\; \\tau_e \\int_{K_e} \\big(\\mathcal{L}\\varphi_j\\big)\\,\\big(\\mathcal{L}\\varphi_i\\big)\\,dx, \\quad i,j \\in \\{1,2\\},$$\n用 $\\beta$、$\\kappa$、$\\tau_e$ 和 $h_e$ 以闭式形式表示。\n\n你的最终答案必须是单元级 GLS 稳定化矩阵的单个闭式解析表达式。不要简化为数值。不要包含单位。在最终答案块中不要提供任何中间步骤。", "solution": "所述问题在数学上是良定义的、自洽的，并且在偏微分方程有限元方法的既定理论框架内具有科学依据。所有必要的定义和参数都已提供，足以进行严谨的推导和计算。我们将直接进行求解。\n\n问题分为两部分。首先，我们推导稳定化的弱形式。其次，我们计算单元级的稳定化矩阵。\n\n第一部分：推导伽辽金/最小二乘 (GLS) 弱形式\n\n控制微分方程是一维稳态对流扩散方程：\n$$ - \\kappa \\, u''(x) + \\beta \\, u'(x) = f(x), \\quad x \\in (0,1) $$\n边界条件为齐次狄利克雷边界条件 $u(0)=0$ 和 $u(1)=0$。微分算子为 $\\mathcal{L}u = -\\kappa u'' + \\beta u'$。\n\n标准伽辽金法从加权残差陈述开始。我们在有限维空间 $V_h$ 中寻求一个近似解 $u_h$，使得对于所有测试函数 $v_h \\in V_h$：\n$$ \\int_0^1 ( - \\kappa u_h''(x) + \\beta u_h'(x) - f(x) ) \\, v_h(x) \\, dx = 0 $$\n对二阶导数项应用分部积分可得：\n$$ \\int_0^1 \\kappa u_h'(x) v_h'(x) \\, dx - [\\kappa u_h'(x) v_h(x)]_0^1 + \\int_0^1 \\beta u_h'(x) v_h(x) \\, dx = \\int_0^1 f(x) v_h(x) \\, dx $$\n测试函数 $v_h$ 需要与试探解属于同一空间，并满足本质边界条件的齐次形式。因此，对于我们的问题，$v_h(0)=0$ 且 $v_h(1)=0$，这使得边界项 $[\\kappa u_h'(x) v_h(x)]_0^1$ 为零。于是，标准的伽辽金弱形式为：求 $u_h \\in V_h$，使得对于所有 $v_h \\in V_h$，\n$$ \\int_0^1 \\left( \\kappa u_h'(x) v_h'(x) + \\beta u_h'(x) v_h(x) \\right) dx = \\int_0^1 f(x) v_h(x) \\, dx $$\n这可以紧凑地写作 $B(u_h, v_h) = L(v_h)$。\n\n伽辽金/最小二乘 (GLS) 法在标准形式上增加一个稳定化项。按照规定，要添加的项是网格中所有单元 $K_e$ 的总和：\n$$ \\sum_{e} \\tau_e \\, ( \\mathcal{L} u_h, \\mathcal{L} v_h )_{K_e} = \\sum_{e} \\tau_e \\int_{K_e} (\\mathcal{L}u_h) \\, (\\mathcal{L}v_h) \\, dx $$\n其中 $\\mathcal{L}u_h = -\\kappa u_h'' + \\beta u_h'$。将此项加到标准伽辽金形式的左侧，得到稳定化弱问题：求 $u_h \\in V_h$，使得对于所有 $v_h \\in V_h$，\n$$ \\int_0^1 \\left( \\kappa u_h'(x) v_h'(x) + \\beta u_h'(x) v_h(x) \\right) dx + \\sum_{e} \\tau_e \\int_{K_e} \\big(-\\kappa u_h'' + \\beta u_h'\\big) \\big(-\\kappa v_h'' + \\beta v_h'\\big) \\, dx = \\int_0^1 f(x) v_h(x) \\, dx $$\n这就完成了问题的第一部分。\n\n第二部分：计算单元级 GLS 稳定化矩阵\n\n我们需要为一个长度为 $h_e = x_b - x_a$ 的泛型单元 $K_e = [x_a, x_b]$ 计算 $2 \\times 2$ 的单元级稳定化矩阵 $\\mathbf{K}^{(e)}_{\\text{GLS}}$。其元素由下式给出：\n$$ \\big(\\mathbf{K}^{(e)}_{\\text{GLS}}\\big)_{ij} = \\tau_e \\int_{K_e} \\big(\\mathcal{L}\\varphi_j\\big) \\, \\big(\\mathcal{L}\\varphi_i\\big) \\, dx, \\quad i,j \\in \\{1,2\\} $$\n空间 $V_h$ 由连续分片线性函数组成。在单元 $K_e$ 上，局部基函数 $\\{\\varphi_1, \\varphi_2\\}$ 是由其节点值定义的线性多项式：\n$$ \\varphi_1(x_a)=1, \\quad \\varphi_1(x_b)=0 $$\n$$ \\varphi_2(x_a)=0, \\quad \\varphi_2(x_b)=1 $$\n具体来说，在 $K_e$ 上，这些函数是：\n$$ \\varphi_1(x) = \\frac{x_b - x}{x_b - x_a} = \\frac{x_b - x}{h_e} $$\n$$ \\varphi_2(x) = \\frac{x - x_a}{x_b - x_a} = \\frac{x - x_a}{h_e} $$\n我们计算它们关于 $x$ 的一阶和二阶导数：\n$$ \\varphi_1'(x) = -\\frac{1}{h_e}, \\quad \\varphi_1''(x) = 0 $$\n$$ \\varphi_2'(x) = \\frac{1}{h_e}, \\quad \\varphi_2''(x) = 0 $$\n现在，我们将算子 $\\mathcal{L} = -\\kappa \\frac{d^2}{dx^2} + \\beta \\frac{d}{dx}$ 应用于每个基函数。由于基函数是线性的，它们在单元 $K_e$ *内部*的二阶导数为零。\n$$ \\mathcal{L}\\varphi_1 = -\\kappa \\varphi_1'' + \\beta \\varphi_1' = -\\kappa(0) + \\beta \\left(-\\frac{1}{h_e}\\right) = -\\frac{\\beta}{h_e} $$\n$$ \\mathcal{L}\\varphi_2 = -\\kappa \\varphi_2'' + \\beta \\varphi_2' = -\\kappa(0) + \\beta \\left(\\frac{1}{h_e}\\right) = \\frac{\\beta}{h_e} $$\n一个关键的观察是，对于分片线性单元，当算子的扩散部分 $-\\kappa \\frac{d^2}{dx^2}$ 应用于单元内部的基函数时，其结果为零。因此，最终的稳定化矩阵将与扩散系数 $\\kappa$ 无关。\n\n项 $\\mathcal{L}\\varphi_1$ 和 $\\mathcal{L}\\varphi_2$ 在单元 $K_e$ 上是常数。现在我们可以计算矩阵 $\\mathbf{K}^{(e)}_{\\text{GLS}}$ 的元素了。\n\n对于 $(i,j)=(1,1)$:\n$$ \\big(\\mathbf{K}^{(e)}_{\\text{GLS}}\\big)_{11} = \\tau_e \\int_{x_a}^{x_b} (\\mathcal{L}\\varphi_1)(\\mathcal{L}\\varphi_1) \\, dx = \\tau_e \\int_{x_a}^{x_b} \\left(-\\frac{\\beta}{h_e}\\right) \\left(-\\frac{\\beta}{h_e}\\right) dx = \\tau_e \\frac{\\beta^2}{h_e^2} \\int_{x_a}^{x_b} dx = \\tau_e \\frac{\\beta^2}{h_e^2} (h_e) = \\frac{\\tau_e \\beta^2}{h_e} $$\n对于 $(i,j)=(1,2)$:\n$$ \\big(\\mathbf{K}^{(e)}_{\\text{GLS}}\\big)_{12} = \\tau_e \\int_{x_a}^{x_b} (\\mathcal{L}\\varphi_2)(\\mathcal{L}\\varphi_1) \\, dx = \\tau_e \\int_{x_a}^{x_b} \\left(\\frac{\\beta}{h_e}\\right) \\left(-\\frac{\\beta}{h_e}\\right) dx = -\\tau_e \\frac{\\beta^2}{h_e^2} \\int_{x_a}^{x_b} dx = -\\frac{\\tau_e \\beta^2}{h_e} $$\n对于 $(i,j)=(2,1)$:\n$$ \\big(\\mathbf{K}^{(e)}_{\\text{GLS}}\\big)_{21} = \\tau_e \\int_{x_a}^{x_b} (\\mathcal{L}\\varphi_1)(\\mathcal{L}\\varphi_2) \\, dx = \\tau_e \\int_{x_a}^{x_b} \\left(-\\frac{\\beta}{h_e}\\right) \\left(\\frac{\\beta}{h_e}\\right) dx = -\\tau_e \\frac{\\beta^2}{h_e^2} \\int_{x_a}^{x_b} dx = -\\frac{\\tau_e \\beta^2}{h_e} $$\n对于 $(i,j)=(2,2)$:\n$$ \\big(\\mathbf{K}^{(e)}_{\\text{GLS}}\\big)_{22} = \\tau_e \\int_{x_a}^{x_b} (\\mathcal{L}\\varphi_2)(\\mathcal{L}\\varphi_2) \\, dx = \\tau_e \\int_{x_a}^{x_b} \\left(\\frac{\\beta}{h_e}\\right) \\left(\\frac{\\beta}{h_e}\\right) dx = \\tau_e \\frac{\\beta^2}{h_e^2} \\int_{x_a}^{x_b} dx = \\frac{\\tau_e \\beta^2}{h_e} $$\n将这些元素组合成矩阵形式，我们得到单元级 GLS 稳定化矩阵：\n$$ \\mathbf{K}^{(e)}_{\\text{GLS}} = \\begin{pmatrix} \\frac{\\tau_e \\beta^2}{h_e} & -\\frac{\\tau_e \\beta^2}{h_e} \\\\ -\\frac{\\tau_e \\beta^2}{h_e} & \\frac{\\tau_e \\beta^2}{h_e} \\end{pmatrix} = \\frac{\\tau_e \\beta^2}{h_e} \\begin{pmatrix} 1 & -1 \\\\ -1 & 1 \\end{pmatrix} $$\n这就是所求的闭式表达式。", "answer": "$$\n\\boxed{\\frac{\\tau_e \\beta^2}{h_e} \\begin{pmatrix} 1 & -1 \\\\ -1 & 1 \\end{pmatrix}}\n$$", "id": "2561151"}, {"introduction": "在推导出稳定化矩阵之后，一个关键问题随之而来：稳定化参数 $ \\tau $ 应该取多大？稳定化的一个关键动机是强制实现期望的数值属性，例如满足离散最大值原理以防止伪振荡。此练习 [@problem_id:2561128] 深入探讨了这个问题，要求你确定保证系统矩阵单调性的最小 $ \\tau $ 值，从而为选择稳定化参数提供了严谨的理论基础。", "problem": "考虑区间 $[0,L]$ 上的稳态一维 ($1$D) 对流-扩散边界值问题，其 Dirichlet 边界条件为\n$$\n- \\nu\\, u''(x) + a\\, u'(x) = f(x), \\quad x \\in (0,L), \\qquad u(0)=\\alpha,\\quad u(L)=\\beta,\n$$\n其中 $a>0$ 为常数对流速度，$\\nu \\ge 0$ 为常数扩散系数，$f$ 为足够光滑的函数。使用有限元方法，在包含 $N$ 个单元、单元尺寸为 $h=L/N$ 的均匀网格上，采用连续分片线性基函数对该问题进行离散化。使用 Galerkin/最小二乘 (GLS) 方法对离散化进行稳定化处理，该方法在标准的 Galerkin 弱形式中，逐单元地增加一项由常数稳定化参数 $\\tau$ 加权的强残差最小二乘项。\n\n从标准 Galerkin 弱形式和针对此算子的 Galerkin/最小二乘 (GLS) 稳定化的基本定义出发，并仅利用均匀网格上线性形函数的性质，对内部节点 $i$ 执行以下步骤：\n$1.$ 为 GLS 稳定化离散方程推导组装后的三点格式（即乘以 $u_{i-1}$、$u_{i}$ 和 $u_{i+1}$ 的系数）。\n$2.$ 利用三点格式的单调矩阵的特性，确定参数 $\\tau$ 需满足的条件，以保证内部节点方程中的所有非对角元均为非正值，从而确保内部区域满足离散极值原理。\n$3.$ 据此，确定最小稳定化参数 $\\tau_{\\min}$（以 $a$、$\\nu$ 和 $h$ 表示的单个解析表达式），使得对于所有内部节点，GLS 稳定化矩阵在内部都是单调的。\n\n以 $\\tau_{\\min}$ 关于 $a$、$\\nu$ 和 $h$ 的闭式表达式给出你的最终答案。不要提供不等式，而应提供一个单一的解析表达式。如果你的表达式包含任何常数，请明确写出。无需进行数值舍入。", "solution": "首先将对问题的科学性和逻辑一致性进行验证。\n\n### 步骤 1：提取已知条件\n- **控制方程**: 稳态 $1$D 对流-扩散方程：$- \\nu\\, u''(x) + a\\, u'(x) = f(x)$，对于 $x \\in (0,L)$。\n- **边界条件**: Dirichlet 条件：$u(0)=\\alpha$, $u(L)=\\beta$。\n- **参数**: $a > 0$ (常数对流速度)，$\\nu \\ge 0$ (常数扩散系数)。\n- **离散化**: 采用连续分片线性基函数的有限元方法。\n- **网格**: 均匀网格，包含 $N$ 个单元，单元尺寸 $h=L/N$。\n- **稳定化**: Galerkin/最小二乘 (GLS) 方法，在标准 Galerkin 弱形式中增加一个附加项。该附加项是强残差的逐单元最小二乘项，在每个单元上由一个常数稳定化参数 $\\tau$ 加权。\n\n### 步骤 2：使用提取的已知条件进行验证\n- **有科学依据**: 该问题基于对流-扩散方程，这是物理学和工程学中的一个基本模型。有限元法 (FEM) 和 Galerkin/最小二乘 (GLS) 稳定化是偏微分方程数值分析中的标准且成熟的课题。该问题具有科学合理性。\n- **适定的**: 该问题要求基于一个明确定义的数学过程推导离散格式和稳定参数。该边界值问题是适定的，推导离散系统及其性质的任务是计算数学中的一个标准练习。\n- **客观性**: 该问题以精确、客观的数学语言陈述。\n- **完整性**: 提供了所有必要的信息。偏微分方程、边界条件、离散化类型和稳定化方法都已明确定义。虽然“强残差的最小二乘项”这一措辞可能略有歧义，但在线性元和对流-扩散算子的背景下，它有一个标准的解释，即流线迎风 Petrov-Galerkin (SUPG) 方法，这是 GLS 的一种特殊形式。采用这种标准解释使得问题完整且可解。\n\n### 步骤 3：结论与行动\n该问题被判定为 **有效**。它是偏微分方程数值分析领域中一个标准的、适定的问题。我现在将着手提供完整解答。\n\n问题的弱形式通过将偏微分方程乘以一个来自合适空间的测试函数 $v(x)$ 并在定义域 $\\Omega = (0, L)$ 上积分得到。\n$$\n\\int_0^L (- \\nu\\, u'' + a\\, u') v \\, dx = \\int_0^L f v \\, dx\n$$\n对二阶项进行分部积分，我们得到标准的 Galerkin 弱形式：求解 $u \\in H^1(0,L)$，满足 $u(0)=\\alpha, u(L)=\\beta$，使得对于所有 $v \\in H_0^1(0,L)$，\n$$\nB_{std}(u,v) \\equiv \\int_0^L (\\nu u' v' + a u' v) \\, dx = \\int_0^L f v \\, dx \\equiv L(v)\n$$\n有限元方法在分片线性函数的有限维空间 $S_h$ 中寻找满足边界条件的近似解 $u_h$。测试函数 $v_h$ 取自具有齐次边界条件的相应空间 $V_h$。\n\nGalerkin/最小二乘 (GLS) 方法在标准弱形式上增加一个稳定项。问题将其指定为“强残差的逐单元最小二乘项”。对于函数 $w$，强残差为 $R(w) = - \\nu w'' + a w' - f$。对于一个连续分片线性函数 $w_h$，其二阶导数 $w_h''$ 在每个单元内部为零。因此，单元 $K_e$ 上的残差为 $R(w_h)|_{K_e} = a w_h' - f$。标准的 GLS (或 SUPG) 格式在左手边增加了项 $\\sum_{e} \\int_{K_e} \\tau (a u_h') (a v_h') \\, dx$，并在右手边增加了项 $\\sum_{e} \\int_{K_e} \\tau f (a v_h') \\,dx$。GLS 稳定化弱形式为：求解 $u_h \\in S_h$，使得对于所有 $v_h \\in V_h$，\n$$\nB_{GLS}(u_h,v_h) = L_{GLS}(v_h)\n$$\n其中\n$$\nB_{GLS}(u_h,v_h) = \\int_0^L (\\nu u_h' v_h' + a u_h' v_h) \\, dx + \\sum_{e=1}^N \\tau \\int_{K_e} a^2 u_h' v_h' \\, dx\n$$\n而右手边对于计算格式系数来说不是必需的。\n\n**1. 推导三点格式**\n\n我们考虑位于 $x_i = i h$ 位置的内部节点 $i$。该节点的离散方程通过选择测试函数 $v_h(x) = \\phi_i(x)$ 获得，其中 $\\phi_i(x)$ 是以 $x_i$ 为中心的标准线性“帽”状基函数。$\\phi_i(x)$ 的支集是区间 $[x_{i-1}, x_{i+1}]$，该区间包含两个单元，$K_{i-1}=[x_{i-1}, x_i]$ 和 $K_i=[x_i, x_{i+1}]$。\n在这些单元上的基函数及其导数为：\n- 在 $K_{i-1}$ 上：$\\phi_{i-1}(x) = \\frac{x_i - x}{h}$，$\\phi_i(x) = \\frac{x - x_{i-1}}{h}$。导数为 $\\phi'_{i-1}(x) = -\\frac{1}{h}$，$\\phi'_i(x) = \\frac{1}{h}$。\n- 在 $K_i$ 上：$\\phi_i(x) = \\frac{x_{i+1} - x}{h}$，$\\phi_{i+1}(x) = \\frac{x - x_i}{h}$。导数为 $\\phi'_i(x) = -\\frac{1}{h}$，$\\phi'_{i+1}(x) = \\frac{1}{h}$。\n\n在 $\\phi_i(x)$ 的支集上，试探函数 $u_h(x)$ 为 $u_h(x) = u_{i-1}\\phi_{i-1}(x) + u_i\\phi_i(x) + u_{i+1}\\phi_{i+1}(x)$。其导数在每个单元上是常数：\n- 在 $K_{i-1}$ 上：$u_h'(x) = \\frac{u_i - u_{i-1}}{h}$。\n- 在 $K_i$ 上：$u_h'(x) = \\frac{u_{i+1} - u_i}{h}$。\n\n我们通过计算 $B_{GLS}(u_h, \\phi_i)$ 来组装节点 $i$ 的方程。\n扩散项的贡献为：\n$$\n\\int_0^L \\nu u_h' \\phi_i' \\, dx = \\int_{x_{i-1}}^{x_i} \\nu \\left(\\frac{u_i - u_{i-1}}{h}\\right) \\left(\\frac{1}{h}\\right) dx + \\int_{x_i}^{x_{i+1}} \\nu \\left(\\frac{u_{i+1} - u_i}{h}\\right) \\left(-\\frac{1}{h}\\right) dx\n= \\frac{\\nu}{h}(u_i - u_{i-1}) - \\frac{\\nu}{h}(u_{i+1} - u_i) = \\frac{\\nu}{h}(-u_{i-1} + 2u_i - u_{i+1})\n$$\n对流项的贡献为：\n$$\n\\int_0^L a u_h' \\phi_i \\, dx = \\int_{x_{i-1}}^{x_i} a \\left(\\frac{u_i - u_{i-1}}{h}\\right) \\left(\\frac{x - x_{i-1}}{h}\\right) dx + \\int_{x_i}^{x_{i+1}} a \\left(\\frac{u_{i+1} - u_i}{h}\\right) \\left(\\frac{x_{i+1} - x}{h}\\right) dx\n$$\n积分的计算结果为 $\\int_0^h (x/h)dx = h/2$ 和 $\\int_0^h (h-x)/h dx = h/2$（通过变换变量）。\n$$\n= a\\left(\\frac{u_i - u_{i-1}}{h}\\right)\\frac{h}{2} + a\\left(\\frac{u_{i+1} - u_i}{h}\\right)\\frac{h}{2} = \\frac{a}{2}(u_i - u_{i-1}) + \\frac{a}{2}(u_{i+1} - u_i) = \\frac{a}{2}(-u_{i-1} + u_{i+1})\n$$\n稳定项的贡献为：\n$$\n\\sum_e \\tau \\int_{K_e} a^2 u_h' \\phi_i' \\, dx = \\tau a^2 \\int_{x_{i-1}}^{x_i} \\left(\\frac{u_i - u_{i-1}}{h}\\right) \\left(\\frac{1}{h}\\right) dx + \\tau a^2 \\int_{x_i}^{x_{i+1}} \\left(\\frac{u_{i+1} - u_i}{h}\\right) \\left(-\\frac{1}{h}\\right) dx\n= \\frac{\\tau a^2}{h}(u_i - u_{i-1}) - \\frac{\\tau a^2}{h}(u_{i+1} - u_i) = \\frac{\\tau a^2}{h}(-u_{i-1} + 2u_i - u_{i+1})\n$$\n结合所有项，我们得到节点 $i$ 处的离散方程，其左侧为：\n$$\n\\left(-\\frac{\\nu}{h} - \\frac{a}{2} - \\frac{\\tau a^2}{h}\\right)u_{i-1} + \\left(\\frac{2\\nu}{h} + \\frac{2\\tau a^2}{h}\\right)u_i + \\left(-\\frac{\\nu}{h} + \\frac{a}{2} - \\frac{\\tau a^2}{h}\\right)u_{i+1} = \\text{RHS}_i\n$$\n乘以 $(u_{i-1}, u_i, u_{i+1})$ 的三点格式的系数为：\n- $u_{i-1}$ 的系数：$-\\frac{\\nu}{h} - \\frac{a}{2} - \\frac{\\tau a^2}{h}$\n- $u_i$ 的系数：$\\frac{2\\nu}{h} + \\frac{2\\tau a^2}{h}$\n- $u_{i+1}$ 的系数：$-\\frac{\\nu}{h} + \\frac{a}{2} - \\frac{\\tau a^2}{h}$\n\n**2. 保证矩阵单调性的 $\\tau$ 条件**\n\n如果一个三对角矩阵的对角元为正，非对角元为非正，且行和为非负，那么该矩阵被认为是单调的（具体来说，是 M-矩阵），这意味着满足离散极值原理。\n- **对角元**: $u_i$ 的系数是 $\\frac{2}{h}(\\nu + \\tau a^2)$。由于 $\\nu \\ge 0$，$a>0$，$h>0$，且稳定化要求 $\\tau \\ge 0$，该项总是非负的。除非 $\\nu=0$ 且 $\\tau=0$（我们忽略这种情况），否则它是严格为正的。\n- **非对角元**:\n  $u_{i-1}$ 的系数必须是非正的：\n  $$\n  -\\frac{\\nu}{h} - \\frac{a}{2} - \\frac{\\tau a^2}{h} \\le 0 \\implies \\frac{\\nu}{h} + \\frac{a}{2} + \\frac{\\tau a^2}{h} \\ge 0\n  $$\n  对于 $\\nu \\ge 0, a > 0, h > 0, \\tau \\ge 0$，该条件总是满足的。\n  $u_{i+1}$ 的系数必须是非正的：\n  $$\n  -\\frac{\\nu}{h} + \\frac{a}{2} - \\frac{\\tau a^2}{h} \\le 0\n  $$\n  这是约束 $\\tau$ 的关键条件。整理不等式：\n  $$\n  \\frac{a}{2} \\le \\frac{\\nu}{h} + \\frac{\\tau a^2}{h}\n  $$\n  乘以 $h$ 并求解 $\\tau$：\n  $$\n  \\frac{ah}{2} \\le \\nu + \\tau a^2 \\implies \\tau a^2 \\ge \\frac{ah}{2} - \\nu \\implies \\tau \\ge \\frac{h}{2a} - \\frac{\\nu}{a^2}\n  $$\n  由于稳定化参数 $\\tau$ 必须是非负的，我们必须将其与条件 $\\tau \\ge 0$ 结合起来。\n  因此，为确保所有非对角元均为非正值，$\\tau$ 需满足的条件是：\n  $$\n  \\tau \\ge \\max\\left(0, \\frac{h}{2a} - \\frac{\\nu}{a^2}\\right)\n  $$\n\n**3. 最小稳定化参数 $\\tau_{\\min}$**\n\n问题要求的是能保证所有内部节点的矩阵单调性的最小稳定化参数 $\\tau_{\\min}$。这对应于选择满足上一步推导出的条件的最小可能 $\\tau$ 值。通过取不等式的下界作为 $\\tau_{\\min}$ 的值来实现。\n\n因此，最小稳定化参数由以下单一解析表达式给出：\n$$\n\\tau_{\\min} = \\max\\left(0, \\frac{h}{2a} - \\frac{\\nu}{a^2}\\right)\n$$\n这个值确保了如果标准 Galerkin 方法已经是单调的（这在 $\\frac{h}{2a} - \\frac{\\nu}{a^2} \\le 0$ 时发生，即当单元 Péclet 数 $Pe_h = \\frac{ah}{2\\nu} \\le 1$ 时），则不添加稳定化（$\\tau_{\\min} = 0$）。如果标准 Galerkin 方法不是单调的（$Pe_h > 1$），则 $\\tau_{\\min}$ 是恢复系统矩阵单调性所需的最小正值。", "answer": "$$\\boxed{\\max\\left(0, \\frac{h}{2a} - \\frac{\\nu}{a^2}\\right)}$$", "id": "2561128"}, {"introduction": "这最后一个练习将分析和理论概念整合到一个全面的编码项目中。你将使用“制造解”方法为一个对流-扩散-反应问题实现一个完整的GLS求解器，以严格测试你的代码。此练习 [@problem_id:2561145] 将指导你完成组装全局系统、施加边界条件和分析解的精度，从而在一个实际场景中展示稳定化对数值误差的实际影响。", "problem": "考虑单位区间上的一维稳态对流-扩散-反应边值问题：\n寻找一个函数 $u : [0,1] \\to \\mathbb{R}$，使得\n$$\n-\\varepsilon\\,u''(x) + \\beta\\,u'(x) + c\\,u(x) = f(x)\\quad \\text{for } x\\in(0,1), \\qquad u(0)=0,\\; u(1)=0,\n$$\n其中 $\\varepsilon > 0$，$\\beta \\in \\mathbb{R}$ 和 $c \\ge 0$ 为给定系数。使用人工解方法，设精确解为 $u(x)=\\sin(\\pi x)$，并确定使 $u(x)$ 满足具有给定系数的微分方程的源项 $f(x)$。采用一个包含 $N$ 个单元的均匀网格（网格尺寸 $h=1/N$）上的连续分片线性有限元空间，并为此问题推导稳定化伽辽金/最小二乘 (GLS) 格式。\n\n从边值问题的弱形式和最小二乘稳定化原理的基本定义出发，进行以下推导：\n1) 写出对应于标准伽辽金方法的弱（变分）格式：寻找 $u \\in H_0^1(0,1)$，使得对于所有 $v \\in H_0^1(0,1)$，\n$$\na(u,v) = \\ell(v),\n$$\n其中 $a(\\cdot,\\cdot)$ 和 $\\ell(\\cdot)$ 分别是对应于微分算子 $-\\varepsilon \\,\\frac{d^2}{dx^2} + \\beta \\,\\frac{d}{dx} + c$ 和源项 $f$ 的双线性和线性形式。\n2) 推导伽辽金/最小二乘稳定化格式：将算子的强残差的最小二乘项加到等式两侧，即\n$$\na_{\\text{GLS}}(u,v) = \\ell_{\\text{GLS}}(v),\n$$\n其中\n$$\na_{\\text{GLS}}(u,v) := a(u,v) + \\sum_{K}\\tau_K \\int_{K} \\left( -\\varepsilon\\,u'' + \\beta\\,u' + c\\,u \\right)\\,\\left( -\\varepsilon\\,v'' + \\beta\\,v' + c\\,v \\right)\\,dx,\n$$\n$$\n\\ell_{\\text{GLS}}(v) := \\ell(v) + \\sum_{K}\\tau_K \\int_{K} f(x)\\,\\left( -\\varepsilon\\,v'' + \\beta\\,v' + c\\,v \\right)\\,dx,\n$$\n其中求和遍历所有网格单元 $K$，$\\tau_K$ 是一个依赖于 $h$ 和系数的正稳定化参数。\n3) 将上述格式具体化到连续分片线性单元。仅使用这些基函数的基本性质来论证，在每个单元 $K$ 内部，离散试探函数和检验函数的二阶导数均为零，因此 GLS 项可以简化为只包含一阶导数和函数值的表达式。推导组装所需的最终单元级代数贡献。\n4) 定义一个逐单元的稳定化参数，形式如下\n$$\n\\tau_K = \\tau_0 \\,\\frac{h_K}{2\\,|\\beta|},\n$$\n对于 $|\\beta| > 0$，其中 $\\tau_0 \\ge 0$ 是一个无量纲调节参数，$h_K$ 是单元尺寸。阐明如何处理 $|\\beta|=0$ 的退化情况。\n\n实现一个程序，该程序为节点值的离散未知向量组装稳定化线性系统，施加齐次 Dirichlet 边界条件，求解所得线性系统，并计算数值解相对于 $u(x)=\\sin(\\pi x)$ 的 $L^2$ 和 $H^1$ 范数误差：\n- $L^2$ 误差为 $\\|u - u_h\\|_{L^2(0,1)} := \\left( \\int_0^1 (u-u_h)^2 \\, dx\\right)^{1/2}$，\n- $H^1$ 误差为 $\\|u - u_h\\|_{H^1(0,1)} := \\left( \\|u-u_h\\|_{L^2(0,1)}^2 + \\|u' - u_h'\\|_{L^2(0,1)}^2 \\right)^{1/2}$。\n组装和误差评估所需的所有积分必须通过每个单元至少使用四个高斯点的高斯求积法进行数值计算。\n\n在整个过程中使用以下固定系数：$\\varepsilon = 10^{-3}$，$\\beta = 2$， $c = 0$。利用人工解 $u(x)=\\sin(\\pi x)$，以精确算术方式计算相应的源项 $f(x)$，并在组装过程中使用它。\n\n测试套件：\n评估以下九种情况的误差，其中 $N$ 是均匀单元的数量，$\\tau_0$ 是上述 $\\tau_K$ 定义中使用的无量纲稳定化参数：\n- $(N,\\tau_0) \\in \\{(20,0.0),(20,0.5),(20,1.0),(40,0.0),(40,0.5),(40,1.0),(80,0.0),(80,0.5),(80,1.0)\\}$。\n\n最终输出格式：\n你的程序应生成单行输出，其中包含一个有九个条目的列表，每个条目按上面列出的顺序对应一个测试用例。每个条目本身必须是一个四元列表，形式为 $[N,\\tau_0,L2\\_error,H1\\_error]$，其中 $L2\\_error$ 和 $H1\\_error$ 是十进制数。最后一行必须具有以下精确格式：\n[[N1,tau01,L2_error1,H1_error1],[N2,tau02,L2_error2,H1_error2],...,[N9,tau09,L2_error9,H1_error9]]", "solution": "我们从与微分算子相关的基本弱形式开始。对于给定的系数 $\\varepsilon > 0$、$\\beta \\in \\mathbb{R}$ 和 $c \\ge 0$，考虑算子 $L u := -\\varepsilon\\,u'' + \\beta\\,u' + c\\,u$。其强形式为 $L u = f$ 在 $(0,1)$ 上成立，并带有齐次 Dirichlet 边界条件 $u(0) = u(1) = 0$。标准伽辽金弱形式是通过将强形式方程乘以一个检验函数 $v \\in H_0^1(0,1)$，在 $(0,1)$ 上积分，并对二阶导数项进行一次分部积分得到的。这产生了双线性形式 $a(\\cdot,\\cdot)$ 和线性形式 $\\ell(\\cdot)$：\n$$\na(u,v) = \\int_0^1 \\varepsilon\\,u'(x)\\,v'(x)\\,dx \\;+\\; \\int_0^1 \\beta\\,u'(x)\\,v(x)\\,dx \\;+\\; \\int_0^1 c\\,u(x)\\,v(x)\\,dx,\n$$\n$$\n\\ell(v) = \\int_0^1 f(x)\\,v(x)\\,dx.\n$$\n伽辽金/最小二乘 (GLS) 稳定化通过在每个网格单元 $K$ 上添加一个涉及强残差的相容最小二乘项来增强此格式。设 $\\{\\mathcal{T}_h\\}$ 是将 $[0,1]$ 剖分为尺寸为 $h_K$ 的单元 $K$ 的一个剖分。定义 GLS 稳定化的双线性和线性形式为\n$$\na_{\\text{GLS}}(u,v) = a(u,v) + \\sum_{K \\in \\mathcal{T}_h} \\tau_K \\int_{K} (L u)\\,(L v)\\,dx,\\qquad\n\\ell_{\\text{GLS}}(v) = \\ell(v) + \\sum_{K \\in \\mathcal{T}_h} \\tau_K \\int_{K} f(x)\\,(L v)\\,dx,\n$$\n其中选择 $\\tau_K > 0$ 以在对流占优的情况下控制稳定性。\n\n我们在一个包含 $N$ 个单元的均匀网格（$h = 1/N$）上采用一个连续分片线性有限元空间 $V_h \\subset H_0^1(0,1)$。在每个单元 $K = [x_i, x_{i+1}]$ 上，局部基函数是标准的线性形函数 $N_1$ 和 $N_2$。对于任何离散函数 $w_h \\in V_h$，其二阶导数 $w_h''$ 在每个单元 $K$ 内部为零，因为 $w_h$ 在 $K$ 上是线性的。因此，对于试探函数和检验函数 $u_h, v_h \\in V_h$，\n$$\nL u_h\\big|_K = -\\varepsilon\\,u_h'' + \\beta\\,u_h' + c\\,u_h = \\beta\\,u_h' + c\\,u_h,\\quad\nL v_h\\big|_K = \\beta\\,v_h' + c\\,v_h.\n$$\n这一观察极大地简化了 GLS 项：\n$$\n\\int_{K} (L u_h)(L v_h)\\,dx = \\int_{K} (\\beta\\,u_h' + c\\,u_h)\\,(\\beta\\,v_h' + c\\,v_h)\\,dx.\n$$\n将其展开，局部的 GLS 双线性形式由以下四个贡献项组成：\n1) $\\beta^2 \\int_K u_h' v_h' \\, dx$,\n2) $\\beta c \\int_K u_h' v_h \\, dx$,\n3) $\\beta c \\int_K u_h v_h' \\, dx$,\n4) $c^2 \\int_K u_h v_h \\, dx$.\n类似地，稳定化的右端项变为\n$$\n\\int_K f(x)\\,(\\beta\\,v_h' + c\\,v_h)\\,dx = \\beta \\int_K f(x)\\,v_h'\\,dx + c \\int_K f(x)\\,v_h\\,dx.\n$$\n这些积分可以与标准的伽辽金贡献项一起，在每个单元上使用高斯求积进行组装：\n- 扩散项：$\\varepsilon \\int_K u_h' v_h' \\, dx$,\n- 对流项：$\\beta \\int_K u_h' v_h \\, dx$,\n- 反应项：$c \\int_K u_h v_h \\, dx$,\n- 载荷项：$\\int_K f(x) v_h \\, dx$。\n\n我们现在指明当 $u(x) = \\sin(\\pi x)$ 时的人工源项 $f(x)$。使用 $L u = f$，我们计算\n$$\nu'(x) = \\pi \\cos(\\pi x),\\qquad u''(x) = -\\pi^2 \\sin(\\pi x),\n$$\n因此\n$$\nf(x) = -\\varepsilon\\,u''(x) + \\beta\\,u'(x) + c\\,u(x) = \\varepsilon\\,\\pi^2 \\sin(\\pi x) + \\beta\\,\\pi \\cos(\\pi x) + c\\,\\sin(\\pi x).\n$$\n在指定的系数 $\\varepsilon = 10^{-3}$，$\\beta = 2$ 和 $c=0$ 下，这简化为\n$$\nf(x) = 10^{-3}\\,\\pi^2 \\sin(\\pi x) + 2\\pi \\cos(\\pi x).\n$$\n\n我们选择每个单元上的稳定化参数为\n$$\n\\tau_K = \\tau_0\\,\\frac{h_K}{2\\,|\\beta|},\n$$\n对于 $|\\beta|>0$。如果 $|\\beta|=0$，可以设置 $\\tau_K = \\tau_0\\,h_K/2$ 作为后备方案，不过在我们的测试套件中，我们使用 $\\beta=2$，因此适用非退化情况。\n\n算法实现细节：\n- 生成节点为 $x_i = i h$（$i=0,\\dots,N$）的均匀网格。\n- 通过遍历单元来组装全局矩阵和向量。对于数值积分，在参考单元 $[-1,1]$ 上使用四点高斯-勒让德求积，并通过仿射映射到每个物理单元。在参考坐标 $\\xi \\in [-1,1]$ 上，形函数为 $N_1(\\xi) = \\frac{1-\\xi}{2}$ 和 $N_2(\\xi) = \\frac{1+\\xi}{2}$。它们关于 $x$ 的导数在每个单元上是常数： $dN_1/dx = -1/h_K$, $dN_2/dx = 1/h_K$；等价地，通过 $dx = \\frac{h_K}{2}\\,d\\xi$ 使用 $d\\xi \\mapsto dx$ 进行计算。\n- 每个单元上的标准伽辽金双线性贡献项为：\n  - 扩散：$\\varepsilon \\int_K (dN/dx)^\\top (dN/dx)\\,dx$,\n  - 对流：$\\beta \\int_K (dN/dx)^\\top N\\,dx$,\n  - 反应：$c \\int_K N^\\top N\\,dx$,\n  其中 $N=[N_1,N_2]^\\top$ and $dN/dx=[dN_1/dx,dN_2/dx]^\\top$。\n- GLS 双线性贡献项为 $\\tau_K \\int_K (\\beta\\,dN/dx + c\\,N)\\,(\\beta\\,dN/dx + c\\,N)^\\top\\,dx$。\n- 右端项在标准载荷项 $\\int_K f(x)\\,N\\,dx$ 之外，还增加了 GLS 项 $\\tau_K \\int_K f(x)\\,(\\beta\\,dN/dx + c\\,N)\\,dx$。\n- 通过为内部自由度（节点 1 到 $N-1$）构建缩减系统，在端点施加齐次 Dirichlet 边界条件。\n- 求解所得线性系统以获得内部节点值。\n- 在每个单元上重构 $u_h$ 并使用四点高斯-勒让德求积评估误差范数：\n  - 对于每个权重为 $w_q$、雅可比行列式为 $J_K = h_K/2$ 的求积点 $x_q$，计算离散解值 $u_h(x_q)=N(x_q)\\cdot u_h^K$ 和导数 $u_h'(x_q)=dN/dx \\cdot u_h^K$。精确值为 $u(x_q)=\\sin(\\pi x_q)$ 和 $u'(x_q)=\\pi\\cos(\\pi x_q)$。累加\n    $\\int_K (u-u_h)^2\\,dx \\approx \\sum_q w_q\\,J_K\\,(u(x_q)-u_h(x_q))^2$ 和\n    $\\int_K (u'-u_h')^2\\,dx \\approx \\sum_q w_q\\,J_K\\,(u'(x_q)-u_h'(x_q))^2$。\n  - 全局 $L^2$ 误差是第一个量在所有单元上求和的平方根，而 $H^1$ 误差是两个量之和的平方根。\n\n测试套件和输出：\n使用问题中指定的九个 $(N,\\tau_0)$ 对。对于每一对，计算 $L^2$ 和 $H^1$ 误差。程序必须输出单行，其中包含一个有九个条目的列表，每个条目的形式为 $[N,\\tau_0,L2\\_error,H1\\_error]$，并按测试套件的顺序排列。这确保了对多种网格尺寸和不同稳定化强度（包括非稳定化情况 $\\tau_0=0$ 和两种稳定化情况）的覆盖。\n\n此过程基于基本弱形式和最小二乘稳定化原理，仅使用标准的有限元机制进行组装和求积，并为人工解得出可量化的误差范数，从而能够对 $h$ 和 $\\tau_0$ 对精度的影响进行有原则的研究。", "answer": "```python\nimport numpy as np\n\ndef gauss_legendre(n):\n    # Returns points and weights for Gauss-Legendre quadrature on [-1,1]\n    if n == 1:\n        pts = np.array([0.0])\n        wts = np.array([2.0])\n    elif n == 2:\n        pts = np.array([-1.0/np.sqrt(3.0), 1.0/np.sqrt(3.0)])\n        wts = np.array([1.0, 1.0])\n    elif n == 3:\n        pts = np.array([-np.sqrt(3.0/5.0), 0.0, np.sqrt(3.0/5.0)])\n        wts = np.array([5.0/9.0, 8.0/9.0, 5.0/9.0])\n    elif n == 4:\n        pts = np.array([\n            -0.8611363115940526,\n            -0.3399810435848563,\n             0.3399810435848563,\n             0.8611363115940526\n        ])\n        wts = np.array([\n            0.3478548451374538,\n            0.6521451548625461,\n            0.6521451548625461,\n            0.3478548451374538\n        ])\n    else:\n        # Fallback using numpy for general n (not required here)\n        pts, wts = np.polynomial.legendre.leggauss(n)\n    return pts, wts\n\ndef manufactured_f(x, eps, beta, c):\n    # f(x) for u = sin(pi x)\n    pi = np.pi\n    return eps * (pi**2) * np.sin(pi * x) + beta * pi * np.cos(pi * x) + c * np.sin(pi * x)\n\ndef exact_u(x):\n    return np.sin(np.pi * x)\n\ndef exact_du(x):\n    return np.pi * np.cos(np.pi * x)\n\ndef assemble_system(N, tau0, eps, beta, c):\n    # Mesh\n    nodes = np.linspace(0.0, 1.0, N + 1)\n    # Global system\n    ndof = N + 1\n    A = np.zeros((ndof, ndof))\n    b = np.zeros(ndof)\n\n    # Quadrature (use 4-point rule)\n    xi_q, w_q = gauss_legendre(4)\n\n    for e in range(N):\n        xL = nodes[e]\n        xR = nodes[e + 1]\n        h = xR - xL\n        J = h / 2.0  # Jacobian for mapping from reference [-1,1] to [xL, xR]\n        tau_e = tau0 * h / (2.0 * (abs(beta) + 1e-30))  # stabilization parameter\n\n        # Local matrices and vector\n        Ae = np.zeros((2, 2))\n        be = np.zeros(2)\n\n        # Shape functions on reference element\n        # N1 = (1 - xi)/2, N2 = (1 + xi)/2\n        # dN/dxi: dN1/dxi = -1/2, dN2/dxi = 1/2\n        # dN/dx = dN/dxi * 2/h -> constant on element\n        dNdx = np.array([-1.0 / h, 1.0 / h])  # [dN1/dx, dN2/dx] is constant\n\n        for (xi, w) in zip(xi_q, w_q):\n            # Map xi -> x\n            x = 0.5 * (xL + xR) + 0.5 * h * xi\n\n            # Shape values at xi\n            N1 = 0.5 * (1.0 - xi)\n            N2 = 0.5 * (1.0 + xi)\n            N = np.array([N1, N2])\n\n            # Standard Galerkin contributions\n            # Diffusion: eps * (dNdx^T dNdx)\n            Ae += eps * np.outer(dNdx, dNdx) * (w * J)\n            # Advection: beta * (dNdx^T N)\n            Ae += beta * np.outer(dNdx, N) * (w * J)\n            # Reaction: c * (N^T N)\n            Ae += c * np.outer(N, N) * (w * J)\n\n            # Load vector: \\int f N dx\n            fx = manufactured_f(x, eps, beta, c)\n            be += fx * N * (w * J)\n\n            # GLS contributions\n            # L(N) for P1 inside element: beta * dNdx + c * N\n            LN = beta * dNdx + c * N  # vector of size 2\n            # Bilinear GLS: tau_e * \\int (LN)(LN)^T dx\n            Ae += tau_e * np.outer(LN, LN) * (w * J)\n            # RHS GLS: tau_e * \\int f * (beta dNdx + c N) dx\n            be += tau_e * fx * LN * (w * J)\n\n        # Assemble into global system\n        dofs = np.array([e, e + 1])\n        A[np.ix_(dofs, dofs)] += Ae\n        b[dofs] += be\n\n    # Apply Dirichlet boundary conditions u(0)=0, u(1)=0 by reduction\n    interior = np.arange(1, ndof - 1)\n    A_reduced = A[np.ix_(interior, interior)]\n    b_reduced = b[interior]  # boundary values are zero\n\n    # Solve\n    uh_interior = np.linalg.solve(A_reduced, b_reduced)\n\n    # Reconstruct full solution with boundary zeros\n    uh = np.zeros(ndof)\n    uh[1:-1] = uh_interior\n\n    return nodes, uh\n\ndef compute_errors(nodes, uh):\n    # Compute L2 and H1 norm errors using 4-point Gauss quadrature\n    xi_q, w_q = gauss_legendre(4)\n    L2_int = 0.0\n    H1semi_int = 0.0\n    N = len(nodes) - 1\n    for e in range(N):\n        xL = nodes[e]\n        xR = nodes[e + 1]\n        h = xR - xL\n        J = h / 2.0\n\n        ue = np.array([uh[e], uh[e + 1]])\n        dNdx = np.array([-1.0 / h, 1.0 / h])\n\n        for (xi, w) in zip(xi_q, w_q):\n            x = 0.5 * (xL + xR) + 0.5 * h * xi\n            N1 = 0.5 * (1.0 - xi)\n            N2 = 0.5 * (1.0 + xi)\n            Nvals = np.array([N1, N2])\n\n            uh_val = Nvals @ ue\n            duh_val = dNdx @ ue\n\n            u_ex = exact_u(x)\n            du_ex = exact_du(x)\n\n            L2_int += (u_ex - uh_val) ** 2 * (w * J)\n            H1semi_int += (du_ex - duh_val) ** 2 * (w * J)\n\n    L2_err = np.sqrt(L2_int)\n    H1_err = np.sqrt(L2_int + H1semi_int)\n    return L2_err, H1_err\n\ndef solve():\n    # Coefficients\n    eps = 1e-3\n    beta = 2.0\n    c = 0.0\n\n    # Test cases: (N, tau0)\n    test_cases = [\n        (20, 0.0), (20, 0.5), (20, 1.0),\n        (40, 0.0), (40, 0.5), (40, 1.0),\n        (80, 0.0), (80, 0.5), (80, 1.0),\n    ]\n\n    results = []\n    for N, tau0 in test_cases:\n        nodes, uh = assemble_system(N, tau0, eps, beta, c)\n        L2_err, H1_err = compute_errors(nodes, uh)\n        # Append [N, tau0, L2_error, H1_error]\n        results.append([int(N), float(tau0), float(L2_err), float(H1_err)])\n\n    # Format as a single line in the required structure\n    # Use default Python list formatting for nested lists\n    print(\"[\" + \",\".join(str(entry) for entry in results) + \"]\")\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "2561145"}]}