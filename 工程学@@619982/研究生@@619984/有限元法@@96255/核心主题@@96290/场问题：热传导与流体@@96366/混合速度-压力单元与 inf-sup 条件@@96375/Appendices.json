{"hands_on_practices": [{"introduction": "inf-sup 条件的抽象概念可以通过在局部单元层面上的具体分析来深入理解。一种关键技术是“宏单元检验”（macroelement patch test），它用于检验局部速度和压力空间是否足够丰富以避免伪压力模式的出现。本练习将引导你通过从零开始的计算，亲手验证著名的“迷你元”（mini element）在一个单元上的局部稳定性，从而揭示稳定混合格式所需满足的实际条件 [@problem_id:2578113]。", "problem": "考虑在二维有界多边形区域上的不可压缩牛顿流体的稳态斯托克斯方程，其混合弱形式写作：求速度 $\\boldsymbol{u} \\in \\boldsymbol{V}$ 和压力 $p \\in Q$ 使得\n$$\na(\\boldsymbol{u},\\boldsymbol{v}) + b(\\boldsymbol{v},p) = \\ell(\\boldsymbol{v}) \\quad \\text{对所有 } \\boldsymbol{v} \\in \\boldsymbol{V}, \\qquad\nb(\\boldsymbol{u},q) = 0 \\quad \\text{对所有 } q \\in Q,\n$$\n其中 $a(\\boldsymbol{u},\\boldsymbol{v}) = \\int_{\\Omega} 2 \\nu \\, \\boldsymbol{\\varepsilon}(\\boldsymbol{u}) : \\boldsymbol{\\varepsilon}(\\boldsymbol{v}) \\, \\mathrm{d}x$, $b(\\boldsymbol{v},q) = - \\int_{\\Omega} (\\nabla \\cdot \\boldsymbol{v}) \\, q \\, \\mathrm{d}x$, 且 $\\boldsymbol{\\varepsilon}(\\boldsymbol{u}) = (\\nabla \\boldsymbol{u} + \\nabla \\boldsymbol{u}^{\\top})/2$。这里 $\\nu > 0$ 是运动粘度，$\\ell$ 是一个给定的线性泛函。对于混合有限元方法，Ladyzhenskaya–Babuška–Brezzi (LBB) inf-sup 条件要求离散耦合算子 $b(\\cdot,\\cdot)$ 从离散速度空间到离散压力空间的对偶空间是充分满射的。\n\n对所谓的 mini 单元在单个参考三角形上执行宏单元片检验。令 $K = \\{(x,y) \\in \\mathbb{R}^2 : x \\ge 0, \\, y \\ge 0, \\, x + y \\le 1\\}$ 并考虑以下局部离散空间：\n- 在 $\\partial K$ 上具有齐次狄利克雷边界条件的局部速度空间是\n$$\n\\boldsymbol{V}_M = \\left\\{ \\boldsymbol{v}_h \\in [\\mathbb{P}_1(K)]^2 \\oplus \\operatorname{span}\\{b \\boldsymbol{e}_1, b \\boldsymbol{e}_2\\} : \\boldsymbol{v}_h|_{\\partial K} = \\boldsymbol{0} \\right\\},\n$$\n其中 $\\mathbb{P}_1(K)$ 表示在 $K$ 上全次数至多为 1 的多项式，$\\boldsymbol{e}_1 = (1,0)^{\\top}$，$\\boldsymbol{e}_2 = (0,1)^{\\top}$，且 $b(x,y) = 27 \\, x \\, y \\, (1 - x - y)$ 是 $K$ 上的标准三次泡函数。由于边界条件，$\\boldsymbol{V}_M = \\operatorname{span}\\{b \\boldsymbol{e}_1, b \\boldsymbol{e}_2\\}$。\n- 带有零均值约束的局部压力空间是\n$$\nQ_M = \\left\\{ q_h \\in \\mathbb{P}_1(K) : \\int_K q_h \\, \\mathrm{d}x = 0 \\right\\}。\n$$\n\n将离散散度算子转置的局部核定义为\n$$\n\\mathcal{N}_M = \\left\\{ q_h \\in Q_M : b(\\boldsymbol{v}_h, q_h) = - \\int_K (\\nabla \\cdot \\boldsymbol{v}_h) \\, q_h \\, \\mathrm{d}x = 0 \\text{ 对所有 } \\boldsymbol{v}_h \\in \\boldsymbol{V}_M \\right\\}。\n$$\n\n从上述定义出发，不引用任何预先计算的稳定性结果，通过显式计算 $b(\\cdot,\\cdot)$ 在 $\\boldsymbol{V}_M$ 的一组基和 $Q_M$ 的一组基上的作用，来计算 $\\mathcal{N}_M$ 的维数。将最终答案表示为单个整数。无需四舍五入。", "solution": "我们从双线性形式 $b(\\boldsymbol{v},q) = - \\int_K (\\nabla \\cdot \\boldsymbol{v}) \\, q \\, \\mathrm{d}x$ 和局部空间的定义开始。在单个参考三角形 $K = \\{(x,y) \\in \\mathbb{R}^2 : x \\ge 0, \\, y \\ge 0, \\, x + y \\le 1\\}$ 上，标量泡函数 $b(x,y) = 27 \\, x \\, y \\, (1 - x - y)$ 在 $\\partial K$ 上恒为零。因为在 $\\partial K$ 上为零的 $\\boldsymbol{v}_h \\in [\\mathbb{P}_1(K)]^2$ 必须恒为零，所以局部速度空间简化为\n$$\n\\boldsymbol{V}_M = \\operatorname{span}\\{ b \\boldsymbol{e}_1, \\, b \\boldsymbol{e}_2 \\}。\n$$\n因此，$\\dim \\boldsymbol{V}_M = 2$，一组方便的基是 $\\{\\boldsymbol{\\psi}_1, \\boldsymbol{\\psi}_2\\}$，其中 $\\boldsymbol{\\psi}_1 = b \\boldsymbol{e}_1$ 且 $\\boldsymbol{\\psi}_2 = b \\boldsymbol{e}_2$。\n\n对于压力空间，$\\mathbb{P}_1(K)$ 的维数是 3，零均值约束减少了一个维度，所以 $\\dim Q_M = 2$。可以从重心坐标得到 $Q_M$ 的一组方便的基。令 $\\lambda_1 = 1 - x - y$，$\\lambda_2 = x$，且 $\\lambda_3 = y$。由于对每个 $i$ 都有 $\\int_K \\lambda_i \\, \\mathrm{d}x = |K|/3$，函数\n$$\nq_1 = \\lambda_2 - \\lambda_3 = x - y, \\qquad q_2 = \\lambda_1 - \\lambda_3 = 1 - x - 2y,\n$$\n在 $K$ 上具有零均值，并且张成了 $Q_M$。\n\n为了计算局部核\n$$\n\\mathcal{N}_M = \\left\\{ q_h \\in Q_M : - \\int_K (\\nabla \\cdot \\boldsymbol{\\psi}_i) \\, q_h \\, \\mathrm{d}x = 0 \\text{ for } i = 1,2 \\right\\},\n$$\n我们只需组装一个 $2 \\times 2$ 的耦合矩阵 $G$，其元素为\n$$\nG_{ij} = - \\int_K (\\nabla \\cdot \\boldsymbol{\\psi}_i) \\, q_j \\, \\mathrm{d}x, \\quad i,j \\in \\{1,2\\}。\n$$\n如果 $G$ 是可逆的，那么唯一满足对所有 $\\boldsymbol{v}_h \\in \\boldsymbol{V}_M$ 都有 $b(\\boldsymbol{v}_h, q_h)=0$ 的 $q_h \\in Q_M$ 即是 $q_h = 0$，因此 $\\dim \\mathcal{N}_M = 0$。如果 $G$ 是秩亏的，则 $\\dim \\mathcal{N}_M$ 将为正。\n\n我们计算 $\\nabla \\cdot \\boldsymbol{\\psi}_1 = \\partial_x b$ 和 $\\nabla \\cdot \\boldsymbol{\\psi}_2 = \\partial_y b$。使用 $b(x,y) = 27 \\, x \\, y \\, (1 - x - y)$，\n$$\n\\partial_x b = 27 \\left( y - 2 x y - y^2 \\right), \\qquad \\partial_y b = 27 \\left( x - x^2 - 2 x y \\right)。\n$$\n因此\n$$\nG = - \\begin{pmatrix}\n\\int_K (\\partial_x b) \\, q_1 \\, \\mathrm{d}x & \\int_K (\\partial_x b) \\, q_2 \\, \\mathrm{d}x \\\\\n\\int_K (\\partial_y b) \\, q_1 \\, \\mathrm{d}x & \\int_K (\\partial_y b) \\, q_2 \\, \\mathrm{d}x\n\\end{pmatrix}。\n$$\n我们使用 $K$ 上的标准单项式积分公式来精确计算这些积分：\n$$\n\\int_K x^a y^b \\, \\mathrm{d}x \\, \\mathrm{d}y = \\frac{a! \\, b!}{(a+b+2)!}, \\quad \\text{对所有整数 } a \\ge 0, \\, b \\ge 0。\n$$\n\n首先，对于 $q_1 = x - y$，\n\\begin{align*}\n\\int_K (\\partial_x b) \\, q_1 \\, \\mathrm{d}x\n&= 27 \\int_K \\left( y - 2 x y - y^2 \\right) (x - y) \\, \\mathrm{d}x \\\\\n&= 27 \\int_K \\left( x y - y^2 - 2 x^2 y + 2 x y^2 - x y^2 + y^3 \\right) \\mathrm{d}x \\\\\n&= 27 \\left( \\frac{1}{24} - \\frac{1}{12} - 2 \\cdot \\frac{1}{60} + \\frac{1}{60} + \\frac{1}{20} \\right) \\\\\n&= 27 \\left( - \\frac{1}{120} \\right) = - \\frac{27}{120} = - \\frac{9}{40}。\n\\end{align*}\n类似地，\n\\begin{align*}\n\\int_K (\\partial_x b) \\, q_2 \\, \\mathrm{d}x\n&= 27 \\int_K \\left( y - 2 x y - y^2 \\right) (1 - x - 2 y) \\, \\mathrm{d}x \\\\\n&= 27 \\int_K \\left( y - 3 x y - 3 y^2 + 2 x^2 y + 5 x y^2 + 2 y^3 \\right) \\mathrm{d}x \\\\\n&= 27 \\left( \\frac{1}{6} - 3 \\cdot \\frac{1}{24} - 3 \\cdot \\frac{1}{12} + 2 \\cdot \\frac{1}{60} + 5 \\cdot \\frac{1}{60} + 2 \\cdot \\frac{1}{20} \\right) \\\\\n&= 27 \\left( \\frac{1}{120} \\right) = \\frac{27}{120} = \\frac{9}{40}。\n\\end{align*}\n接着，对于 $\\partial_y b = 27 ( x - x^2 - 2 x y )$，\n\\begin{align*}\n\\int_K (\\partial_y b) \\, q_1 \\, \\mathrm{d}x\n&= 27 \\int_K \\left( x - x^2 - 2 x y \\right) (x - y) \\, \\mathrm{d}x \\\\\n&= 27 \\int_K \\left( x^2 - x y - x^3 - x^2 y + 2 x y^2 \\right) \\mathrm{d}x \\\\\n&= 27 \\left( \\frac{1}{12} - \\frac{1}{24} - \\frac{1}{20} - \\frac{1}{60} + 2 \\cdot \\frac{1}{60} \\right) \\\\\n&= 27 \\left( \\frac{1}{120} \\right) = \\frac{27}{120} = \\frac{9}{40}。\n\\end{align*}\n以及\n\\begin{align*}\n\\int_K (\\partial_y b) \\, q_2 \\, \\mathrm{d}x\n&= 27 \\int_K \\left( x - x^2 - 2 x y \\right) (1 - x - 2 y) \\, \\mathrm{d}x \\\\\n&= 27 \\int_K \\left( x - 2 x^2 + x^3 - 4 x y + 4 x^2 y + 4 x y^2 \\right) \\mathrm{d}x \\\\\n&= 27 \\left( \\frac{1}{6} - 2 \\cdot \\frac{1}{12} + \\frac{1}{20} - 4 \\cdot \\frac{1}{24} + 4 \\cdot \\frac{1}{60} + 4 \\cdot \\frac{1}{60} \\right) \\\\\n&= 27 \\left( \\frac{1}{60} \\right) = \\frac{27}{60} = \\frac{9}{20}。\n\\end{align*}\n因此，\n$$\nG = - \\begin{pmatrix}\n- \\frac{9}{40} & \\frac{9}{40} \\\\\n\\frac{9}{40} & \\frac{9}{20}\n\\end{pmatrix}\n= \\begin{pmatrix}\n\\frac{9}{40} & - \\frac{9}{40} \\\\\n- \\frac{9}{40} & - \\frac{9}{20}\n\\end{pmatrix}。\n$$\n未取反的耦合矩阵（等价于 $-G$）的行列式为\n$$\n\\det \\begin{pmatrix}\n- \\frac{9}{40} & \\frac{9}{40} \\\\\n\\frac{9}{40} & \\frac{9}{20}\n\\end{pmatrix}\n= \\left( - \\frac{9}{40} \\right) \\left( \\frac{9}{20} \\right) - \\left( \\frac{9}{40} \\right) \\left( \\frac{9}{40} \\right)\n= - \\frac{81}{800} - \\frac{81}{1600}\n= - \\frac{243}{1600} \\ne 0.\n$$\n因此 $G$ 是可逆的。所以，对于所有 $\\boldsymbol{v}_h \\in \\boldsymbol{V}_M$ 唯一满足 $b(\\boldsymbol{v}_h, q_h) = 0$ 的 $q_h \\in Q_M$ 是 $q_h = 0$。由此可得\n$$\n\\dim \\mathcal{N}_M = 0.\n$$\n这验证了 mini 单元通过了在单个三角形上的宏单元片检验，并且在此意义上是局部 inf-sup 稳定的。所求的整数是 $\\mathcal{N}_M$ 的维数。", "answer": "$$\\boxed{0}$$", "id": "2578113"}, {"introduction": "在完成了局部检验后，我们转向离散系统的全局特性。压力场的唯一性是一个由边界条件和区域连通性决定的全局属性，而本练习将探讨在纯 Neumann 边界条件下，压力解的非唯一性是如何在离散代数系统中体现的。你将把压力模式这一抽象概念与计算网格的连通性这一具体结构联系起来，从而理解物理问题中的不确定性如何转化为离散算子矩阵的核（nullspace）[@problem_id:2578082]。", "problem": "考虑在空间维度 $d \\in \\{2,3\\}$，粘度为 $\\mu>0$ 的有界 Lipschitz 域 $\\Omega \\subset \\mathbb{R}^{d}$ 上的稳态不可压缩 Stokes 问题。其强形式为\n$$\n-\\mu \\Delta \\boldsymbol{u} + \\nabla p = \\boldsymbol{f} \\quad \\text{in } \\Omega,\\qquad \\nabla\\cdot \\boldsymbol{u}=0 \\quad \\text{in } \\Omega,\n$$\n在整个边界 $\\partial \\Omega$ 上具有纯 Neumann 牵引边界条件：\n$$\n\\left(2\\mu \\boldsymbol{\\varepsilon}(\\boldsymbol{u}) - p \\boldsymbol{I}\\right)\\boldsymbol{n} = \\boldsymbol{t} \\quad \\text{on } \\partial \\Omega,\n$$\n其中 $\\boldsymbol{\\varepsilon}(\\boldsymbol{u}) := \\tfrac{1}{2}\\left(\\nabla \\boldsymbol{u} + \\nabla \\boldsymbol{u}^{\\top}\\right)$ 且 $\\boldsymbol{n}$ 是单位外法向量。设混合变分形式建立在空间 $V:=H^{1}(\\Omega)^{d}$ 和 $Q:=L^{2}(\\Omega)$ 上，其双线性形式为\n$$\na(\\boldsymbol{u},\\boldsymbol{v}) := \\int_{\\Omega} 2\\mu \\, \\boldsymbol{\\varepsilon}(\\boldsymbol{u}):\\boldsymbol{\\varepsilon}(\\boldsymbol{v}) \\, \\mathrm{d}x, \\qquad \nb(\\boldsymbol{v},q):= -\\int_{\\Omega} q \\, \\nabla\\cdot \\boldsymbol{v} \\, \\mathrm{d}x.\n$$\n假设离散速度-压力空间 $(V_{h},Q_{h})$ 是协调的，并在下文定义的离散零均值压力子空间上满足 Ladyzhenskaya–Babuška–Brezzi (LBB) inf-sup 条件（例如，在形状规则的单纯剖分网格上的 Taylor–Hood 单元对 $(P_{2},P_{1})$）。\n\n设 $\\Omega$ 的计算网格是单纯的，其单元集为 $\\mathcal{T}_{h}$，全局节点集为 $\\mathcal{N}_{h}$。定义网格连通图，其顶点是单元 $K\\in\\mathcal{T}_{h}$，如果单元 $K$ 和 $K'$ 共享 $\\mathcal{N}_{h}$ 中的至少一个节点，则它们之间存在一条边。假设 $\\mathcal{T}_{h}$ 是以下 6 个三角形（在 $d=2$ 时）的并集，由其节点三元组给出：\n$$\nE_{1}=(1,2,3), \\quad E_{2}=(2,3,4), \\quad E_{3}=(5,6,7), \\quad E_{4}=(8,9,10), \\quad E_{5}=(9,11,10), \\quad E_{6}=(9,11,12).\n$$\n假设没有其他单元或节点，并且每个连通的网格分量的边界都带有如上所述的纯牵引数据。\n\n定义离散零均值压力子空间\n$$\nQ_{h,0}:=\\left\\{ q_{h}\\in Q_{h} \\,:\\, \\int_{\\Omega_{c}} q_{h}\\,\\mathrm{d}x = 0 \\text{ for every connected component } \\Omega_{c} \\text{ of } \\Omega \\right\\}.\n$$\n设 $\\boldsymbol{A}\\in\\mathbb{R}^{n_{v}\\times n_{v}}$ 表示与 $a(\\cdot,\\cdot)$ 相关的速度刚度矩阵，$\\boldsymbol{B}\\in\\mathbb{R}^{n_{p}\\times n_{v}}$ 表示与 $b(\\cdot,\\cdot)$ 相关的离散散度矩阵，因此混合系统矩阵为\n$$\n\\mathsf{K}=\\begin{pmatrix}\n\\boldsymbol{A} & \\boldsymbol{B}^{\\top}\\\\\n\\boldsymbol{B} & \\boldsymbol{0}\n\\end{pmatrix}.\n$$\n仅使用散度算子的基本性质、散度定理以及在 $Q_{h,0}$ 上的 LBB inf-sup 条件，从第一性原理推导纯 Neumann 边界条件下离散压力零空间 $\\ker(\\boldsymbol{B}^{\\top})$ 的维数。然后，通过确定其连通图的连通分量数量，为给定的网格 $\\mathcal{T}_{h}$ 显式地计算该维数。\n\n将最终答案表示为整数。无需四舍五入，也不涉及单位。", "solution": "问题要求计算矩阵 $\\boldsymbol{B}^{\\top}$ 的零空间（记作 $\\ker(\\boldsymbol{B}^{\\top})$）的维数，该空间对应于具有纯 Neumann 边界条件的 Stokes 问题的离散压力模态空间。推导必须从第一性原理出发。\n\n设离散速度和压力空间分别为 $V_h \\subset H^1(\\Omega)^d$ 和 $Q_h \\subset L^2(\\Omega)$。矩阵 $\\boldsymbol{B}$ 表示与双线性形式 $b(\\boldsymbol{v},q) = -\\int_{\\Omega} q \\, \\nabla\\cdot \\boldsymbol{v} \\, \\mathrm{d}x$ 相关的离散算子。对于一个压力函数 $p_h \\in Q_h$ 的系数向量 $\\mathsf{p}$ 属于 $\\ker(\\boldsymbol{B}^{\\top})$，当且仅当对于所有测试函数 $\\boldsymbol{v}_h \\in V_h$ 都有 $b(\\boldsymbol{v}_h, p_h) = 0$。因此，离散压力模态空间是集合 $\\{p_h \\in Q_h \\mid b(\\boldsymbol{v}_h, p_h) = 0, \\forall \\boldsymbol{v}_h \\in V_h\\}$。我们需要求出这个空间的维数。\n\n设计算域 $\\Omega_h$ 由 $N_m$ 个连通分量组成，记为 $\\Omega_{h,c}$，其中 $c=1, \\dots, N_m$。问题给出的离散零均值压力子空间定义为 $Q_{h,0}:=\\left\\{ q_{h}\\in Q_{h} \\,:\\, \\int_{\\Omega_{c}} q_{h}\\,\\mathrm{d}x = 0 \\text{ for every connected component } \\Omega_{c} \\text{ of } \\Omega \\right\\}$。我们将域分量 $\\Omega_c$ 等同于网格分量 $\\Omega_{h,c}$，其数量 $N_m$ 由网格连通图确定。\n\n空间 $Q_h$ 可以分解为直和 $Q_h = Q_{h,0} \\oplus P_h$，其中 $P_h$ 是 $Q_{h,0}$ 在 $Q_h$ 中的补空间。子空间 $Q_{h,0}$ 由 $N_m$ 个独立的线性约束（每个分量一个）定义，因此其补空间 $P_h$ 的维数为 $N_m$。这个空间 $P_h$ 可以等同于在网格的每个连通分量上为常数的离散函数集合。\n\n问题的一个关键假设是 Ladyzhenskaya–Babuška–Brezzi (LBB) inf-sup 条件在子空间 $Q_{h,0}$ 上成立。该条件表明，存在一个常数 $\\beta > 0$，使得对于任何 $q_h \\in Q_{h,0}$，\n$$\n\\sup_{\\boldsymbol{v}_h \\in V_h \\setminus \\{\\boldsymbol{0}\\}} \\frac{b(\\boldsymbol{v}_h, q_h)}{\\|\\boldsymbol{v}_h\\|_{V}} \\geq \\beta \\|q_h\\|_{Q}\n$$\n其中 $\\|\\cdot\\|_V$ 和 $\\|\\cdot\\|_Q$ 分别是 $V=H^1(\\Omega)^d$ 和 $Q=L^2(\\Omega)$ 上的范数。\n\n这个 LBB 条件的一个直接且基本的推论是，离散算子 $B: V_h \\to Q'_{h,0}$ 是满射的，其伴随算子是单射的。用双线性形式来说，如果 $q_h \\in Q_{h,0}$ 对所有 $\\boldsymbol{v}_h \\in V_h$ 满足 $b(\\boldsymbol{v}_h, q_h) = 0$，那么 LBB 不等式中的上确界为零，这意味着 $\\|q_h\\|_Q = 0$，因此 $q_h = 0$。这就证明了压力零空间与零均值子空间的交集是平凡的：\n$$\n\\ker(\\boldsymbol{B}^{\\top}) \\cap Q_{h,0} = \\{\\boldsymbol{0}\\}\n$$\n这是基于所给 LBB 条件的严格推导。它证明了任何非零压力模态都不可能属于 $Q_{h,0}$。\n\n对于在 $V_h \\times Q_h$ 上的完整问题，压力仅在位于 $Q_{h,0}$ 之外的模态意义下是确定的。在纯 Neumann 问题的连续设定中，压力在每个域的连通分量上取决于一个加性常数。一个稳定且相容的有限元离散化，例如满足给定 LBB 条件的离散化，必须能正确地捕捉到这种物理上的不确定性。因此，那些未被 $Q_{h,0}$ 上的 LBB 条件消除的压力模态必须对应于这些物理模态。\n\n这些模态构成的空间正是补空间 $P_h$，它代表了离散的分片常数函数。这个空间的维数是 $N_m$。由于 LBB 条件确保不存在其他“伪”模态，零空间 $\\ker(\\boldsymbol{B}^{\\top})$ 必须恰好是这个空间 $P_h$。因此，离散压力零空间的维数等于网格的连通分量数。\n$$\n\\dim(\\ker(\\boldsymbol{B}^{\\top})) = \\dim(P_h) = N_m\n$$\n\n我们现在必须为所提供的特定网格 $\\mathcal{T}_h$ 计算这个维数。连通图的顶点集是单元集 $\\{E_1, E_2, E_3, E_4, E_5, E_6\\}$。如果两个单元共享至少一个节点，则它们之间存在一条边。每个单元的节点是：\n$E_{1}: \\{1,2,3\\}$\n$E_{2}: \\{2,3,4\\}$\n$E_{3}: \\{5,6,7\\}$\n$E_{4}: \\{8,9,10\\}$\n$E_{5}: \\{9,11,10\\}$\n$E_{6}: \\{9,11,12\\}$\n\n我们识别该图的连通分量：\n1.  从 $E_1$ 开始。其节点为 $\\{1,2,3\\}$。$E_2$ 的节点为 $\\{2,3,4\\}$。它们共享节点 2 和 3，所以 $(E_1, E_2)$ 是一条边。它们的节点并集是 $\\{1,2,3,4\\}$。没有其他单元与此集合共享节点。因此，第一个连通分量是 $\\{E_1, E_2\\}$。\n2.  考虑下一个未访问的单元 $E_3$。其节点为 $\\{5,6,7\\}$。没有其他单元与 $E_3$ 共享节点。因此，第二个连通分量是单元素集 $\\{E_3\\}$。\n3.  考虑下一个未访问的单元 $E_4$。其节点为 $\\{8,9,10\\}$。\n    -   $E_4$ 与 $E_5$（节点为 $\\{9,11,10\\}$）共享节点 $\\{9,10\\}$，所以 $(E_4, E_5)$ 是一条边。\n    -   $E_4$ 与 $E_6$（节点为 $\\{9,11,12\\}$）共享节点 $\\{9\\}$，所以 $(E_4, E_6)$ 是一条边。\n    -   $E_5$ 与 $E_6$ 共享节点 $\\{9,11\\}$，所以 $(E_5, E_6)$ 是一条边。\n    所有三个单元 $E_4, E_5, E_6$ 都是相互连接的。因此，第三个连通分量是 $\\{E_4, E_5, E_6\\}$。\n\n所有单元都已被分配到一个分量中。网格连通图的连通分量是 $\\{E_1, E_2\\}$, $\\{E_3\\}$, 和 $\\{E_4, E_5, E_6\\}$。连通分量的数量为 $N_m=3$。\n\n根据推导，离散压力零空间 $\\ker(\\boldsymbol{B}^{\\top})$ 的维数等于这个数量。", "answer": "$$\\boxed{3}$$", "id": "2578082"}, {"introduction": "理论分析可以帮助我们识别稳定的和不稳定的单元对，但计算方法能让我们对这种稳定性进行量化评估。inf-sup 常数 $\\beta_h$ 是一个衡量速度-压力耦合最差情况稳定性的数值；一个为零或接近零的 $\\beta_h$ 值预示着不稳定性。本实践将指导你编写程序，将 $\\beta_h$ 的理论定义转化为一个可执行的算法，通过求解一个广义特征值问题来计算它，让你亲眼见证稳定单元（MINI元）和不稳定单元（P1-P1元）在数值上的巨大差异 [@problem_id:2578083]。", "problem": "考虑在单位正方形域 $\\Omega = (0,1)\\times(0,1)$ 上的二维空间不可压缩 Stokes 方程，对速度施加齐次 Dirichlet 边界条件，并采用混合有限元方法进行离散。设 $V_h \\subset [H_0^1(\\Omega)]^2$ 为有限维速度空间，$Q_h \\subset L_0^2(\\Omega)$ 为带零均值约束的有限维压力空间。离散 inf-sup 常数 $\\beta_h$ 定义为\n$$\n\\beta_h \\;=\\; \\inf_{0 \\neq q_h \\in Q_h} \\; \\sup_{0 \\neq v_h \\in V_h} \\; \\frac{b(v_h,q_h)}{\\|v_h\\|_V \\, \\|q_h\\|_Q},\n$$\n其中 $b(v_h,q_h) = \\int_{\\Omega} q_h \\, \\nabla \\cdot v_h \\, dx$，$v_h\\|_V = \\left(\\int_{\\Omega} \\nabla v_h : \\nabla v_h \\, dx\\right)^{1/2}$ 是向量场上的 $H^1$ 半范数，以及 $\\|q_h\\|_Q = \\left(\\int_{\\Omega} q_h^2 \\, dx\\right)^{1/2}$ 是标量场上的 $L^2$ 范数。\n\n您的任务是，在一族协调的 $\\Omega$ 三角剖分上，为以下有限元空间对通过数值实验计算离散 inf-sup 常数 $\\beta_h$。该三角剖分通过将 $N_x \\times N_y$ 网格中的每个矩形沿左下到右上的对角线划分为两个三角形而构成。\n\n- 速度-压力对 $\\mathcal{P}_{\\text{MINI}}$：速度空间 $V_h$ 是连续分片线性向量场，并在每个三角形上增加一个标量三次泡函数（每个速度分量和每个三角形上有一个独立的泡函数系数），压力空间 $Q_h$ 是顶点上的连续分片线性标量场。这通常被称为 \"MINI\" 单元。\n- 速度-压力对 $\\mathcal{P}_{\\text{P1P1}}$：速度空间 $V_h$ 是连续分片线性向量场（无泡函数），压力空间 $Q_h$ 是相同的连续分片线性标量场。\n\n使用以下基本原理来构建一个完全可计算的步骤：\n- 混合 Galerkin 方法产生一个鞍点系统，其包含一个对称正定 (SPD) 的速度双线性形式 $a(u_h,v_h) = \\int_{\\Omega} \\nabla u_h : \\nabla v_h \\, dx$，一个通过散度耦合速度和压力的双线性形式 $b(v_h,q_h)$，以及压力上的 $L^2$ 内积。\n- 当速度空间配备由 $a(\\cdot,\\cdot)$ 诱导的范数且压力空间配备 $L^2$ 范数时，离散 inf-sup 常数 $\\beta_h$ 是离散散度算子 $V_h \\to Q_h$ 的最小正奇异值。\n\n实现要求：\n1. 网格和基函数：\n   - 基于 $\\Omega$ 上的结构化 $N_x \\times N_y$ 网格构建协调的三角形网格，将每个矩形沿左下到右上的对角线分割成两个三角形。\n   - 对于顶点坐标为 $(x_i,y_i)$ 的三角形上的连续分片线性形函数，其梯度在该三角形上是常数，并且必须使用仿射映射从第一性原理计算。\n   - 对于 MINI 单元，在每个三角形的每个速度分量上增加一个标量三次泡函数来丰富其速度空间。在一个重心坐标为 $(\\lambda_1,\\lambda_2,\\lambda_3)$ 的三角形上，标量泡函数为 $b(\\lambda) = 27 \\lambda_1 \\lambda_2 \\lambda_3$。其梯度可以用 $\\lambda$ 和重心坐标的常数梯度来表示。\n2. 数值积分：\n   - 仅涉及连续分片线性基函数及其梯度的积分可以通过常数乘以面积的公式精确计算。\n   - 涉及泡函数或其梯度的积分必须通过一个对总次数至少为 $5$ 的多项式精确的三角形求积法则来执行。您必须明确地实现一个有效的法则，并确保从参考单元到物理单元的正确几何缩放。\n3. 边界条件：\n   - 通过消除所有位于边界上的节点速度自由度来施加齐次 Dirichlet 边界条件。泡函数速度自由度根据其构造在边界上为零，并作为无约束的内部未知量保留。\n   - 不要对压力施加任何边界条件。不要通过消除法来强制零均值压力；相反，保留完整的连续压力空间，并根据离散 inf-sup 表征在谱中数值识别出最小的严格正模式。\n4. inf-sup 的数值计算：\n   - 从对应于速度半范数、散度耦合和压力 $L^2$ 内积的组装矩阵中，为每个测试用例推导出一个数学上合理的、完全离散且可计算的步骤来获得 $\\beta_h$。您的方法必须与 $\\beta_h$ 是在给定范数下离散散度算子的最小严格正奇异值这一原理相一致。推导细节应包含在您的解答报告中；代码必须实现最终的步骤。\n\n测试套件：\n按此确切顺序计算以下三个测试用例的 $\\beta_h$。\n- 用例 1（理想情况，稳定对）：在 $2 \\times 2$ 网格（即 $N_x=2, N_y=2$）上的 $\\mathcal{P}_{\\text{MINI}}$。\n- 用例 2（边界情况，不稳定对）：在相同的 $2 \\times 2$ 网格上的 $\\mathcal{P}_{\\text{P1P1}}$。\n- 用例 3（跨尺寸覆盖，稳定对）：在 $3 \\times 2$ 网格（即 $N_x=3, N_y=2$）上的 $\\mathcal{P}_{\\text{MINI}}$。\n\n答案规范：\n- 您的程序必须输出单行，其中包含一个逗号分隔的列表，内含三个计算出的离散 inf-sup 常数，四舍五入到恰好六位小数，并用方括号括起来。例如：\"[0.312345,0.000001,0.298765]\"。\n- 不涉及物理单位。不使用角度。不使用百分比。\n- 您的最终程序必须是完整的，无需修改即可完整运行，并且不得需要任何外部输入。", "solution": "所给出的问题是偏微分方程数值分析中的一个良态且标准的任务，特别是在流体动力学的有限元方法领域。它在科学上是合理的，包含了所有必要的信息，并且没有矛盾或歧义。因此，我将着手解决该问题。\n\n该问题要求计算 Stokes 问题的两种不同混合有限元对的离散 inf-sup 常数 $\\beta_h$。分析始于离散弱形式，它会导出一个鞍点线性系统。对于由系数向量 $\\mathbf{u}$ 和 $\\mathbf{p}$ 分别表示的离散速度场 $u_h \\in V_h$ 和压力场 $q_h \\in Q_h$，该系统为\n$$\n\\begin{pmatrix} A & B^T \\\\ B & 0 \\end{pmatrix}\n\\begin{pmatrix} \\mathbf{u} \\\\ \\mathbf{p} \\end{pmatrix}\n=\n\\begin{pmatrix} \\mathbf{f} \\\\ \\mathbf{g} \\end{pmatrix}\n$$\n这里，$A$ 是由双线性形式 $a(u_h, v_h)$ 导出的速度刚度矩阵，$B$ 是由双线性形式 $b(v_h, q_h)$ 导出的离散散度矩阵。指定的范数是 $\\|v_h\\|_V^2 = a(v_h,v_h) = \\mathbf{v}^T A \\mathbf{v}$ 和 $\\|q_h\\|_Q^2 = \\int_\\Omega q_h^2 dx = \\mathbf{p}^T M_p \\mathbf{p}$，其中 $M_p$ 是压力质量矩阵。\n\n离散 inf-sup 常数 $\\beta_h$ 定义为：\n$$\n\\beta_h = \\inf_{0 \\neq q_h \\in Q_h} \\sup_{0 \\neq v_h \\in V_h} \\frac{b(v_h,q_h)}{\\|v_h\\|_V \\|q_h\\|_Q}\n$$\n用矩阵表示，这变成：\n$$\n\\beta_h = \\inf_{\\mathbf{p} \\neq 0} \\sup_{\\mathbf{v} \\neq 0} \\frac{\\mathbf{p}^T B \\mathbf{v}}{\\sqrt{\\mathbf{v}^T A \\mathbf{v}} \\sqrt{\\mathbf{p}^T M_p \\mathbf{p}}}\n$$\n关于 $\\mathbf{v}$ 的内部上确界是一个最大化问题。对于一个固定的 $\\mathbf{p}$，当 $\\mathbf{v}$ 被适当地选择时，该表达式被最大化。在 $A$-内积中的 Cauchy-Schwarz 不等式表明，当 $A\\mathbf{v}$ 与 $B^T\\mathbf{p}$ 成正比时，达到上确界。具体来说，该上确界的值是 $\\sqrt{\\mathbf{p}^T B A^{-1} B^T \\mathbf{p}}$。\n\n将此代回到 $\\beta_h$ 的表达式中，我们得到：\n$$\n\\beta_h = \\inf_{\\mathbf{p} \\neq 0} \\frac{\\sqrt{\\mathbf{p}^T B A^{-1} B^T \\mathbf{p}}}{\\sqrt{\\mathbf{p}^T M_p \\mathbf{p}}}\n$$\n对该表达式平方，得到：\n$$\n\\beta_h^2 = \\inf_{\\mathbf{p} \\neq 0} \\frac{\\mathbf{p}^T (B A^{-1} B^T) \\mathbf{p}}{\\mathbf{p}^T M_p \\mathbf{p}}\n$$\n这是矩阵束 $(B A^{-1} B^T, M_p)$ 的 Rayleigh 商。其下确界对应于广义特征值问题的最小特征值 $\\lambda$：\n$$\n(B A^{-1} B^T) \\mathbf{p} = \\lambda M_p \\mathbf{p}\n$$\n根据指令，我们不显式强制零均值约束，因此压力空间 $Q_h$ 是 $L^2(\\Omega)$ 的一个子空间，而不是 $L_0^2(\\Omega)$。对于 $v_h \\in V_h \\subset [H_0^1(\\Omega)]^2$，由于 $\\int (\\nabla \\cdot v_h) c \\, dx = c \\int_{\\partial \\Omega} v_h \\cdot n \\, ds = 0$，算子 $B$ 有一个对应于常数压力的零空间。因此，矩阵 $B A^{-1} B^T$ 有一个对应于常数压力场系数向量的零空间，这导致一个零特征值。inf-sup 常数与非恒定压力模式的稳定性有关。因此，$\\beta_h^2$ 是此问题的最小严格正特征值。\n\n计算流程如下：\n1.  **网格生成和自由度管理**：在 $\\Omega = (0,1)\\times(0,1)$ 上生成一个 $N_x \\times N_y$ 的结构化矩形网格。每个矩形被划分为两个三角形。速度和压力的自由度 (DOFs) 与网格的顶点和三角形相关联。通过只保留对应于内部顶点和泡函数的自由度来施加速率的齐次 Dirichlet 边界条件。\n\n2.  **矩阵组装**：对于网格中的每个三角形 $T$，计算局部矩阵 $A_T$、$B_T$ 和 $M_{p,T}$，并组装到全局矩阵中。\n    -   **P1 单元**：对于连续分片线性基函数 $\\phi_i$，其梯度在每个三角形上是常数。像 $\\int_T \\nabla \\phi_i \\cdot \\nabla \\phi_j \\,dx$ 这样的积分可以精确计算为 $(\\nabla \\phi_i \\cdot \\nabla \\phi_j) \\cdot \\text{Area}(T)$。压力质量矩阵项 $\\int_T \\phi_i \\phi_j \\,dx$ 使用标准公式 $\\frac{\\text{Area}(T)}{12}(1+\\delta_{ij})$。\n    -   **MINI 单元**：该单元用向量值泡函数来丰富 P1 速度空间。参考单元上的标量泡函数是 $b(\\lambda_1, \\lambda_2, \\lambda_3) = 27\\lambda_1\\lambda_2\\lambda_3$。涉及泡函数或其导数的积分，例如 $\\int_T \\nabla b_k:\\nabla b_l\\,dx$ 和 $\\int_T q_h \\nabla \\cdot b_k \\,dx$，涉及最高 4 次的多项式。根据问题规范，需要一个对至少 5 次多项式精确的求积法则。为此，实现了一个对称的 7 点三角形求积法则。求积点和权重从参考三角形转换到网格中的每个物理三角形。\n\n3.  **边界条件施加**：在组装完整系统矩阵 ($A_{full}, B_{full}$) 后，从 $A_{full}$ 中移除对应于边界 $\\partial\\Omega$ 上速度自由度的行和列以形成矩阵 $A$，并从 $B_{full}$ 中移除相应的列以形成 $B$。压力矩阵 $M_p$ 保持不变。\n\n4.  **特征值问题求解**：构建好矩阵 $A$、$B$ 和 $M_p$ 后，执行以下步骤：\n    a. 对内部自由度的速度刚度矩阵 $A$ 求逆。\n    b. 显式地构造类 Schur 补矩阵 $S = B A^{-1} B^T$。考虑到问题规模较小，这在计算上是可行的。\n    c. 使用标准的对称矩阵数值库函数（例如 `scipy.linalg.eigh`）求解广义特征值问题 $S\\mathbf{p} = \\lambda M_p\\mathbf{p}$。\n    d. 对所得特征值进行排序。最小的一个在数值上应接近于零，对应于常数压力模式。下一个最小的特征值是 $\\lambda_{min, >0}$。\n    e. 计算 inf-sup 常数为 $\\beta_h = \\sqrt{\\lambda_{min,>0}}$。\n\n此流程应用于问题中指定的三个测试用例。对于不稳定的 $\\mathcal{P}_{\\text{P1P1}}$ 对，由于存在伪压力模式，预计会出现额外的接近零的特征值，但寻找最小严格正特征值的逻辑能正确识别出稳定性常数，该常数预计接近于零。", "answer": "```python\nimport numpy as np\nfrom scipy.linalg import eigh\n\ndef solve():\n    \"\"\"\n    Main solver function to compute inf-sup constants for the specified test cases.\n    \"\"\"\n    test_cases = [\n        {'Nx': 2, 'Ny': 2, 'pair': 'MINI'},\n        {'Nx': 2, 'Ny': 2, 'pair': 'P1P1'},\n        {'Nx': 3, 'Ny': 2, 'pair': 'MINI'}\n    ]\n\n    results = []\n    for case in test_cases:\n        beta_h = compute_inf_sup(case['Nx'], case['Ny'], case['pair'])\n        results.append(f\"{beta_h:.6f}\")\n\n    print(f\"[{','.join(results)}]\")\n\ndef get_quadrature_rule(degree):\n    \"\"\"\n    Returns points and weights for a symmetric triangle quadrature rule.\n    Points are in barycentric coordinates. Weights are for a triangle of area 1.\n    \"\"\"\n    if degree >= 5: # 7-point rule, exact for degree 5\n        # Ref: Dunavant, D. A. (1985). High degree efficient symmetrical Gaussian\n        # quadrature rules for the triangle. International journal for numerical\n        # methods in engineering, 21(6), 1129-1148. Scheme 7-2.\n        points = [\n            (1/3, 1/3, 1/3),\n            (0.797426985353087, 0.101286507323456, 0.101286507323456),\n            (0.101286507323456, 0.797426985353087, 0.101286507323456),\n            (0.101286507323456, 0.101286507323456, 0.797426985353087),\n            (0.059715871789770, 0.470142064105115, 0.470142064105115),\n            (0.470142064105115, 0.059715871789770, 0.470142064105115),\n            (0.470142064105115, 0.470142064105115, 0.059715871789770)\n        ]\n        weights = [\n            0.225, 0.125939180544827, 0.125939180544827, 0.125939180544827,\n            0.132394152788506, 0.132394152788506, 0.132394152788506\n        ]\n        return np.array(points), np.array(weights)\n    else:\n        raise NotImplementedError(\"Only quadrature for degree >= 5 is implemented.\")\n\ndef compute_inf_sup(Nx, Ny, pair):\n    \"\"\"\n    Computes the discrete inf-sup constant beta_h for a given grid and element pair.\n    \"\"\"\n    # 1. Mesh Generation\n    num_nodes = (Nx + 1) * (Ny + 1)\n    nodes = np.array([[i / Nx, j / Ny] for j in range(Ny + 1) for i in range(Nx + 1)])\n    \n    num_triangles = 2 * Nx * Ny\n    triangles = []\n    for j in range(Ny):\n        for i in range(Nx):\n            p0 = j * (Nx + 1) + i\n            p1 = j * (Nx + 1) + (i + 1)\n            p2 = (j + 1) * (Nx + 1) + i\n            p3 = (j + 1) * (Nx + 1) + (i + 1)\n            triangles.append([p0, p1, p3]) # Lower-left to upper-right diagonal\n            triangles.append([p0, p3, p2])\n    triangles = np.array(triangles)\n\n    # 2. DOF Management\n    is_boundary_node = np.isclose(nodes[:, 0], 0) | np.isclose(nodes[:, 0], 1) | \\\n                       np.isclose(nodes[:, 1], 0) | np.isclose(nodes[:, 1], 1)\n    \n    interior_v_nodes = np.where(~is_boundary_node)[0]\n    num_interior_v_nodes = len(interior_v_nodes)\n    \n    # Map global P1 node index to interior velocity DoF index\n    v_node_map = {node_idx: i for i, node_idx in enumerate(interior_v_nodes)}\n\n    if pair == 'MINI':\n        num_v_dofs = 2 * num_interior_v_nodes + 2 * num_triangles\n    elif pair == 'P1P1':\n        num_v_dofs = 2 * num_interior_v_nodes\n    else:\n        raise ValueError(\"Unknown element pair\")\n        \n    num_p_dofs = num_nodes\n\n    # 3. Matrix Assembly\n    A = np.zeros((num_v_dofs, num_v_dofs))\n    B = np.zeros((num_p_dofs, num_v_dofs))\n    Mp = np.zeros((num_p_dofs, num_p_dofs))\n    \n    quad_points, quad_weights = get_quadrature_rule(5)\n    \n    for tri_idx, tri_nodes in enumerate(triangles):\n        v = nodes[tri_nodes]\n        J = np.array([v[1] - v[0], v[2] - v[0]]).T\n        area = 0.5 * np.abs(np.linalg.det(J))\n        J_inv_T = np.linalg.inv(J).T\n\n        # Gradients of barycentric coordinates on reference element\n        grad_lambda_ref = np.array([[-1, -1], [1, 0], [0, 1]]).T\n        # Gradients of P1 basis functions on physical element\n        grad_phi_phys = J_inv_T @ grad_lambda_ref\n        \n        # P1-P1 stiffness and mass contributions\n        for i in range(3):\n            for j in range(3):\n                # Pressure mass matrix\n                Mp_local = area / 12 * (1 + (i == j))\n                Mp[tri_nodes[i], tri_nodes[j]] += Mp_local\n                \n                # Velocity stiffness matrix (P1 part)\n                if tri_nodes[i] in v_node_map and tri_nodes[j] in v_node_map:\n                    dof_i = v_node_map[tri_nodes[i]]\n                    dof_j = v_node_map[tri_nodes[j]]\n                    A_local_p1 = area * np.dot(grad_phi_phys[:, i], grad_phi_phys[:, j])\n                    A[dof_i, dof_j] += A_local_p1             # u-u\n                    A[dof_i + num_interior_v_nodes, dof_j + num_interior_v_nodes] += A_local_p1 # v-v\n        \n        # Divergence matrix (P1 velocity, P1 pressure)\n        for i in range(3): # local velocity node\n            if tri_nodes[i] in v_node_map:\n                dof_i_u = v_node_map[tri_nodes[i]]\n                dof_i_v = dof_i_u + num_interior_v_nodes\n                for j in range(3): # local pressure node\n                    dof_j_p = tri_nodes[j]\n                    # divergence of u-basis is grad_phi_phys[0,i]\n                    # divergence of v-basis is grad_phi_phys[1,i]\n                    B_local_u = grad_phi_phys[0, i] * area / 3.0\n                    B_local_v = grad_phi_phys[1, i] * area / 3.0\n                    B[dof_j_p, dof_i_u] += B_local_u\n                    B[dof_j_p, dof_i_v] += B_local_v\n\n        # Bubble function contributions (for MINI element)\n        if pair == 'MINI':\n            u_bubble_dof = 2 * num_interior_v_nodes + 2 * tri_idx\n            v_bubble_dof = u_bubble_dof + 1\n            \n            for q_idx in range(len(quad_weights)):\n                lmbda = quad_points[q_idx]\n                w = quad_weights[q_idx] * area\n                \n                # Bubble value and gradient on reference triangle\n                b_val = 27 * lmbda[0] * lmbda[1] * lmbda[2]\n                grad_b_ref = 27 * (lmbda[1]*lmbda[2]*grad_lambda_ref[:,0] + \n                                   lmbda[0]*lmbda[2]*grad_lambda_ref[:,1] +\n                                   lmbda[0]*lmbda[1]*grad_lambda_ref[:,2])\n                \n                grad_b_phys = J_inv_T @ grad_b_ref\n                div_b_phys = grad_b_phys[0] + grad_b_phys[1]\n\n                # Stiffness matrix: bubble-bubble\n                A_bb_local = w * np.dot(grad_b_phys, grad_b_phys)\n                A[u_bubble_dof, u_bubble_dof] += A_bb_local\n                A[v_bubble_dof, v_bubble_dof] += A_bb_local\n                \n                # Stiffness matrix: bubble-P1\n                for i in range(3):\n                    if tri_nodes[i] in v_node_map:\n                        p1_dof_u = v_node_map[tri_nodes[i]]\n                        p1_dof_v = p1_dof_u + num_interior_v_nodes\n                        \n                        A_bp_local = w * np.dot(grad_b_phys, grad_phi_phys[:,i])\n                        A[u_bubble_dof, p1_dof_u] += A_bp_local\n                        A[p1_dof_u, u_bubble_dof] += A_bp_local\n                        A[v_bubble_dof, p1_dof_v] += A_bp_local\n                        A[p1_dof_v, v_bubble_dof] += A_bp_local\n                \n                # Divergence matrix: bubble velocity - P1 pressure\n                for j in range(3):\n                    p_dof = tri_nodes[j]\n                    p_val_at_quad = lmbda[j]\n                    \n                    B_u_local = w * p_val_at_quad * grad_b_phys[0] # div u_bubble = grad_b_phys[0]\n                    B_v_local = w * p_val_at_quad * grad_b_phys[1] # div v_bubble = grad_b_phys[1]\n                    \n                    B[p_dof, u_bubble_dof] += B_u_local\n                    B[p_dof, v_bubble_dof] += B_v_local\n    \n    # 4. Eigenvalue Problem\n    if num_v_dofs == 0:\n        return 0.0\n\n    try:\n        A_inv = np.linalg.inv(A)\n    except np.linalg.LinAlgError:\n        # This can happen if A is singular, e.g. for P1-P1 on a grid with no interior nodes.\n        return 0.0\n\n    S = B @ A_inv @ B.T\n    \n    # Solve generalized eigenvalue problem: S*p = lambda*Mp*p\n    # eigh sorts eigenvalues in ascending order\n    # For symmetric positive semi-definite S and positive definite Mp\n    eigenvalues = eigh(S, Mp, eigvals_only=True)\n\n    # The smallest eigenvalue should be ~0 (constant pressure mode).\n    # The inf-sup constant is the sqrt of the smallest non-zero eigenvalue.\n    # We take the second smallest eigenvalue.\n    smallest_positive_lambda = 0.0\n    for eig in eigenvalues:\n        if eig > 1e-10: # Tolerance for zero\n            smallest_positive_lambda = eig\n            break\n            \n    beta_h = np.sqrt(smallest_positive_lambda) if smallest_positive_lambda > 0 else 0.0\n    \n    return beta_h\n\nif __name__ == '__main__':\n    solve()\n\n```", "id": "2578083"}]}