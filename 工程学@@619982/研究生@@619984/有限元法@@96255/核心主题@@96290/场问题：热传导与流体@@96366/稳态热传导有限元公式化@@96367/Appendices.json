{"hands_on_practices": [{"introduction": "理解有限元方法的精髓始于其最基本的构件：单元刚度矩阵和载荷向量。本练习将引导你从一维稳态热传导的控制微分方程出发，通过标准的伽辽金法和线性插值，亲手推导出这些核心矩阵 [@problem_id:2599170]。掌握这一过程对于理解有限元如何将连续的物理问题离散化为可解的代数方程至关重要，是后续学习和应用的基础。", "problem": "考虑一根长度为 $h$、热导率 $k$ 为常数、体积热生成 $Q$ 空间均匀的均质棱柱杆中的一维稳态热传导问题。假设横截面积为单位面积，因此所有表达式均为单位平面外厚度的量。单元上的控制方程强形式为 $-\\dfrac{d}{dx}\\!\\left(k\\,\\dfrac{dT}{dx}\\right)=Q$，在 $x\\in[0,h]$ 上成立。使用有限元法（FEM），采用标准的伽辽金法和双节点线性插值，按以下步骤进行：\n\n1. 从强形式出发，构建加权余量陈述，通过分部积分得到单元上的弱形式，并明确指出双线性形式和线性形式。\n\n2. 对于节点位于 $x=0$ 和 $x=h$ 的单元，使用线性形函数，推导常数 $k$ 和 $Q$ 情况下的单元刚度矩阵 $K_e$ 和一致单元载荷向量 $f_e$。\n\n3. 定义单元的离散能量泛函，\n$$\n\\Pi(T_e)\\;=\\;\\dfrac{1}{2}\\,T_e^{\\mathsf T}\\,K_e\\,T_e\\;-\\;T_e^{\\mathsf T}\\,f_e,\n$$\n其中 $T_e=\\begin{bmatrix}T_1 & T_2\\end{bmatrix}^{\\mathsf T}$ 集合了节点温度。计算在特定节点温度向量 $T_e=\\begin{bmatrix}0 & 1\\end{bmatrix}^{\\mathsf T}$ 下 $\\Pi(T_e)$ 的值。\n\n请以包含 $k$、$h$ 和 $Q$ 的单一闭式符号表达式给出最终答案。不要进行数值计算或四舍五入。", "solution": "所述问题具有科学依据、提法恰当、客观且自洽。这是一个将有限元法应用于二阶边值问题（具体为一维稳态热传导）的标准练习。所有必要的参数和控制方程都已给出，没有矛盾或含糊之处。因此，该问题被认为是有效的，并将构建一个解。\n\n求解过程按照问题陈述分为三个阶段进行。\n\n首先，我们推导控制方程的弱形式。长度为 $h$ 的单元的强形式为：\n$$-\\frac{d}{dx}\\left(k \\frac{dT}{dx}\\right) = Q, \\quad x \\in [0, h]$$\n通过将所有项移到一边，形成余量 $R(x)$：\n$$R(x) = -\\frac{d}{dx}\\left(k \\frac{dT}{dx}\\right) - Q$$\n根据伽辽金法，余量必须在单元域上与一组权函数 $w(x)$ 正交。这表示为加权余量陈述：\n$$\\int_{0}^{h} w(x) R(x) \\,dx = 0$$\n代入余量的表达式，我们得到：\n$$\\int_{0}^{h} w(x) \\left[ -\\frac{d}{dx}\\left(k \\frac{dT}{dx}\\right) - Q \\right] dx = 0$$\n这可以分为两项：\n$$-\\int_{0}^{h} w(x) \\frac{d}{dx}\\left(k \\frac{dT}{dx}\\right) dx - \\int_{0}^{h} w(x) Q \\,dx = 0$$\n为了降低温度场 $T(x)$ 上的导数阶数，我们对第一项应用分部积分，$\\int u \\,dv = [uv] - \\int v \\,du$。令 $u = w(x)$ 且 $dv = \\frac{d}{dx}\\left(k \\frac{dT}{dx}\\right)dx$。这得到 $du = \\frac{dw}{dx}dx$ 和 $v = k \\frac{dT}{dx}$。应用此法可得：\n$$\\int_{0}^{h} w(x) \\frac{d}{dx}\\left(k \\frac{dT}{dx}\\right) dx = \\left[ w(x) k \\frac{dT}{dx} \\right]_{0}^{h} - \\int_{0}^{h} k \\frac{dT}{dx} \\frac{dw}{dx} dx$$\n将其代回加权余量陈述并重新整理，得到弱形式：\n$$\\int_{0}^{h} k \\frac{dw}{dx} \\frac{dT}{dx} dx = \\int_{0}^{h} w(x) Q \\,dx - \\left[ w(x) k \\frac{dT}{dx} \\right]_{0}^{h}$$\n此公式的类型为 $a(w, T) = L(w)$，其中 $a(w, T)$ 是一个双线性形式，$L(w)$ 是一个线性泛函。\n双线性形式被确定为：\n$$a(w, T) = \\int_{0}^{h} k \\frac{dw}{dx} \\frac{dT}{dx} dx$$\n线性泛函为：\n$$L(w) = \\int_{0}^{h} w(x) Q \\,dx + w(h)q_{h} - w(0)q_{0}$$\n其中 $q_{h} = -k \\frac{dT}{dx}|_{x=h}$ 和 $q_{0} = -k \\frac{dT}{dx}|_{x=0}$ 是单元边界处的热通量。\n\n其次，我们推导单元刚度矩阵 $K_e$ 和一致载荷向量 $f_e$。对于节点位于 $x=0$ 和 $x=h$ 的双节点线性单元，温度场 $T(x)$ 由 $T_h(x) = N_1(x)T_1 + N_2(x)T_2$ 近似，其中 $T_1$ 和 $T_2$ 是节点温度。线性形函数为：\n$$N_1(x) = 1 - \\frac{x}{h}, \\quad N_2(x) = \\frac{x}{h}$$\n它们关于 $x$ 的导数为：\n$$\\frac{dN_1}{dx} = -\\frac{1}{h}, \\quad \\frac{dN_2}{dx} = \\frac{1}{h}$$\n单元刚度矩阵 $K_e$ 的分量为 $K_{ij} = a(N_i, N_j) = \\int_0^h k \\frac{dN_i}{dx} \\frac{dN_j}{dx} dx$。对于常数 $k$：\n$$K_{11} = \\int_{0}^{h} k \\left(-\\frac{1}{h}\\right)\\left(-\\frac{1}{h}\\right) dx = \\frac{k}{h^2} \\int_{0}^{h} dx = \\frac{k}{h}$$\n$$K_{12} = K_{21} = \\int_{0}^{h} k \\left(-\\frac{1}{h}\\right)\\left(\\frac{1}{h}\\right) dx = -\\frac{k}{h^2} \\int_{0}^{h} dx = -\\frac{k}{h}$$\n$$K_{22} = \\int_{0}^{h} k \\left(\\frac{1}{h}\\right)\\left(\\frac{1}{h}\\right) dx = \\frac{k}{h^2} \\int_{0}^{h} dx = \\frac{k}{h}$$\n因此，单元刚度矩阵为：\n$$K_e = \\frac{k}{h} \\begin{pmatrix} 1 & -1 \\\\ -1 & 1 \\end{pmatrix}$$\n由体积热源 $Q$ 引起的一致单元载荷向量 $f_e$ 的分量为 $f_{e,i} = \\int_0^h N_i(x) Q \\,dx$。对于常数 $Q$：\n$$f_{e,1} = \\int_{0}^{h} Q \\left(1 - \\frac{x}{h}\\right) dx = Q \\left[x - \\frac{x^2}{2h}\\right]_{0}^{h} = Q \\left(h - \\frac{h^2}{2h}\\right) = \\frac{Qh}{2}$$\n$$f_{e,2} = \\int_{0}^{h} Q \\left(\\frac{x}{h}\\right) dx = \\frac{Q}{h} \\left[\\frac{x^2}{2}\\right]_{0}^{h} = \\frac{Q}{h} \\frac{h^2}{2} = \\frac{Qh}{2}$$\n因此，一致单元载荷向量为：\n$$f_e = \\frac{Qh}{2} \\begin{pmatrix} 1 \\\\ 1 \\end{pmatrix}$$\n\n第三，我们计算在给定节点温度向量 $T_e = \\begin{pmatrix} 0 & 1 \\end{pmatrix}^{\\mathsf T}$ 下的离散能量泛函 $\\Pi(T_e) = \\frac{1}{2} T_e^{\\mathsf T} K_e T_e - T_e^{\\mathsf T} f_e$。\n我们首先计算二次项：\n$$T_e^{\\mathsf T} K_e T_e = \\begin{pmatrix} 0 & 1 \\end{pmatrix} \\left( \\frac{k}{h} \\begin{pmatrix} 1 & -1 \\\\ -1 & 1 \\end{pmatrix} \\right) \\begin{pmatrix} 0 \\\\ 1 \\end{pmatrix}$$\n$$= \\frac{k}{h} \\begin{pmatrix} 0 & 1 \\end{pmatrix} \\begin{pmatrix} -1 \\\\ 1 \\end{pmatrix} = \\frac{k}{h} ((0)(-1) + (1)(1)) = \\frac{k}{h}$$\n所以，泛函的二次部分为 $\\frac{1}{2} (T_e^{\\mathsf T} K_e T_e) = \\frac{k}{2h}$。\n接下来，我们计算线性项：\n$$T_e^{\\mathsf T} f_e = \\begin{pmatrix} 0 & 1 \\end{pmatrix} \\left( \\frac{Qh}{2} \\begin{pmatrix} 1 \\\\ 1 \\end{pmatrix} \\right)$$\n$$= \\frac{Qh}{2} ((0)(1) + (1)(1)) = \\frac{Qh}{2}$$\n最后，我们组合得到完整的泛函值：\n$$\\Pi(T_e) = \\frac{k}{2h} - \\frac{Qh}{2}$$\n这个表达式可以合并成一个单一的分数：\n$$\\Pi(T_e) = \\frac{k - Qh^2}{2h}$$\n这是能量泛函值的最终符号表达式。", "answer": "$$ \\boxed{\\frac{k - Qh^{2}}{2h}} $$", "id": "2599170"}, {"introduction": "在掌握了单个单元的构建方法后，下一步是将这些单元“组装”成一个全局系统，并施加实际的边界条件来求解整个结构的温度分布。本练习模拟了一个带有内部热源、一端固定温度、另一端对流散热的实际工程情景 [@problem_id:2599184]。通过解决这个问题，你将实践从单元集成到全局求解的完整有限元工作流程，并学习如何计算狄利克雷边界上的反作用热流，这是一个在工程分析中用以验证能量平衡的重要概念。", "problem": "一根长度为 $L = 0.3$ 米、均匀横截面积为 $A = 0.01 \\text{ m}^2$ 的直杆在一维稳态条件下导热。热导率是常数，$k = 200 \\text{ W/(m K)}$。杆内存在均匀的体积热生成率 $q = 1.0 \\times 10^{6} \\text{ W/m}^3$。位于 $x=0$ 的左端受指定的 (Dirichlet) 温度 $T(0)=400$ K 约束。位于 $x=L$ 的右端与环境进行对流换热，对流换热系数为 $h = 100 \\text{ W/(m}^2 \\text{ K)}$，环境温度为 $T_{\\infty} = 300$ K。\n\n使用有限元法 (FEM)，将杆划分为 $2$ 个等长的线性单元（在 $x=0$、$x=L/2$ 和 $x=L$ 处有 $3$ 个节点）：\n\n- 从稳态能量平衡和傅里叶定律 (Fourier’s law) 出发，构建适用于此问题的弱形式。\n- 从弱形式中，推导单元贡献，并组装全局系统，用全局刚度矩阵 $\\mathbf{K}$ 和全局载荷向量 $\\mathbf{F}$ 表示，包括体积热生成和 $x=L$ 处对流边界的影响。\n- 在 $x=0$ 处施加 Dirichlet 边界条件，并求解未知的节点温度。\n- 将 Dirichlet 节点的节点反作用热流率定义为在该节点平衡原始组装方程所需的量，即当计算出的温度代入该节点未修改的全局平衡方程时所产生的残差。计算在 $x=0$ 处的这个标量值，并将其符号解释为通过施加边界的净热交换。\n\n以 W 为单位，用一个热流率表示您的最终答案。将答案四舍五入到四位有效数字。", "solution": "首先对问题进行验证，以确保其具有科学依据、是适定的且客观的。\n\n步骤 1：提取已知条件\n-   杆的长度: $L = 0.3$ m\n-   横截面积: $A = 0.01 \\text{ m}^2$\n-   热导率: $k = 200 \\text{ W/(m K)}$\n-   体积热生成率: $q = 1.0 \\times 10^{6} \\text{ W/m}^3$\n-   $x=0$ 处的 Dirichlet 边界条件: $T(0) = 400$ K\n-   $x=L$ 处的对流边界条件: 对流换热系数 $h = 100 \\text{ W/(m}^2 \\text{ K)}$，环境温度 $T_{\\infty} = 300$ K\n-   有限元法离散化: $2$ 个等长的线性单元，得到 $3$ 个节点，分别位于 $x_1=0$，$x_2=L/2=0.15$ m 和 $x_3=L=0.3$ m。\n-   任务: 推导并求解有限元系统，并计算 Dirichlet 节点（$x=0$）处的反作用热流率。\n\n步骤 2：使用提取的已知条件进行验证\n-   **科学依据：** 该问题描述了一维稳态热传导，这是热工学中一个基础且成熟的课题。其控制物理原理（能量平衡和傅里叶定律）是标准的。\n-   **适定性：** 该问题是一个适定的边值问题。它指定了一个二阶常微分方程、定义域和一套完整的边界条件（一个 Dirichlet 条件，一个 Robin 条件），这保证了唯一解的存在。\n-   **客观性：** 问题陈述使用了精确、定量且无歧义的语言。所有参数都给出了具有一致物理单位的数值。\n-   **完整性：** 提供了建立和解决问题所需的所有物理属性、几何参数和边界条件。\n-   **可行性：** 给定的热导率、尺寸和热载荷值对于工程材料和应用来说是现实的。\n\n步骤 3：结论与行动\n问题被判定为 **有效**。将提供完整解答。\n\n带热源的一维稳态热传导的控制方程由微分单元上的能量平衡导出。它由下式给出：\n$$ \\frac{d}{dx} \\left( k A \\frac{dT}{dx} \\right) + qA = 0 $$\n其中 $T$ 是温度，$k$ 是热导率，$A$ 是横截面积，$q$ 是体积热生成率。\n\n为了推导弱形式，我们将控制方程乘以一个权函数 $w(x)$，并在域 $[0, L]$ 上积分：\n$$ \\int_{0}^{L} w \\left( \\frac{d}{dx} \\left( kA \\frac{dT}{dx} \\right) + qA \\right) dx = 0 $$\n对第一项应用分部积分法得到：\n$$ \\left[ w kA \\frac{dT}{dx} \\right]_{0}^{L} - \\int_{0}^{L} \\frac{dw}{dx} kA \\frac{dT}{dx} dx + \\int_{0}^{L} w qA dx = 0 $$\n整理各项，我们得到：\n$$ \\int_{0}^{L} kA \\frac{dw}{dx} \\frac{dT}{dx} dx = \\int_{0}^{L} w qA dx + \\left[ w kA \\frac{dT}{dx} \\right]_{0}^{L} $$\n右边的项 $\\left[ w kA \\frac{dT}{dx} \\right]_{0}^{L}$ 代表边界热通量。令 $Q(x) = -kA \\frac{dT}{dx}$ 为热通量。方程变为：\n$$ \\int_{0}^{L} kA \\frac{dw}{dx} \\frac{dT}{dx} dx = \\int_{0}^{L} w qA dx - w(L)Q(L) + w(0)Q(0) $$\n在右边界 ($x=L$)，存在对流：$Q(L) = hA(T(L) - T_{\\infty})$。在左边界 ($x=0$)，温度是指定的，热通量 $Q(0)$ 是一个未知的反作用力。因此，弱形式为：\n$$ \\int_{0}^{L} kA \\frac{dw}{dx} \\frac{dT}{dx} dx + w(L)hAT(L) = \\int_{0}^{L} w qA dx + w(L)hAT_{\\infty} + w(0)Q(0) $$\n在有限元法中，我们将域离散为单元。对于长度为 $l_e$ 的线性单元，单元刚度矩阵 $\\mathbf{k}^{(e)}$ 和单元源向量 $\\mathbf{f}_q^{(e)}$ 为：\n$$ \\mathbf{k}^{(e)} = \\frac{kA}{l_e} \\begin{pmatrix} 1 & -1 \\\\ -1 & 1 \\end{pmatrix}, \\quad \\mathbf{f}_q^{(e)} = \\frac{qAl_e}{2} \\begin{pmatrix} 1 \\\\ 1 \\end{pmatrix} $$\n该问题使用 $2$ 个单元，所以 $l_e = L/2 = 0.3/2 = 0.15$ m。我们计算数值：\n$$ \\frac{kA}{l_e} = \\frac{200 \\, \\text{W/(m K)} \\times 0.01 \\, \\text{m}^2}{0.15 \\, \\text{m}} = \\frac{2}{0.15} = \\frac{40}{3} \\, \\text{W/K} $$\n$$ \\frac{qAl_e}{2} = \\frac{(1.0 \\times 10^6 \\, \\text{W/m}^3) \\times 0.01 \\, \\text{m}^2 \\times 0.15 \\, \\text{m}}{2} = 750 \\, \\text{W} $$\n两个单元（$e=1$ 对应节点 $1,2$，$e=2$ 对应节点 $2,3$）的单元矩阵是相同的：\n$$ \\mathbf{k}^{(1)} = \\mathbf{k}^{(2)} = \\frac{40}{3} \\begin{pmatrix} 1 & -1 \\\\ -1 & 1 \\end{pmatrix}, \\quad \\mathbf{f}_q^{(1)} = \\mathbf{f}_q^{(2)} = \\begin{pmatrix} 750 \\\\ 750 \\end{pmatrix} $$\n组装全局刚度矩阵 $\\mathbf{K}$ 和全局源向量 $\\mathbf{F}_q$：\n$$ \\mathbf{K} = \\begin{pmatrix} \\frac{40}{3} & -\\frac{40}{3} & 0 \\\\ -\\frac{40}{3} & \\frac{40}{3}+\\frac{40}{3} & -\\frac{40}{3} \\\\ 0 & -\\frac{40}{3} & \\frac{40}{3} \\end{pmatrix} = \\frac{40}{3} \\begin{pmatrix} 1 & -1 & 0 \\\\ -1 & 2 & -1 \\\\ 0 & -1 & 1 \\end{pmatrix} $$\n$$ \\mathbf{F}_q = \\begin{pmatrix} 750 \\\\ 750+750 \\\\ 750 \\end{pmatrix} = \\begin{pmatrix} 750 \\\\ 1500 \\\\ 750 \\end{pmatrix} $$\n接下来，我们在节点 $3$ ($x=L$) 处引入对流边界条件。这将在刚度矩阵的 $(3,3)$ 项上增加一项 $hA$ ，并在力向量的第 $3$ 项上增加一项 $hAT_{\\infty}$ 。\n$hA = 100 \\, \\text{W/(m}^2 \\text{K)} \\times 0.01 \\, \\text{m}^2 = 1$ W/K。\n$hAT_{\\infty} = 1 \\, \\text{W/K} \\times 300 \\, \\text{K} = 300$ W。\n修改后的全局系统 $\\mathbf{K_{global}}\\mathbf{T} = \\mathbf{F_{global}}$ 变为：\n$$ \\mathbf{K_{global}} = \\frac{40}{3} \\begin{pmatrix} 1 & -1 & 0 \\\\ -1 & 2 & -1 \\\\ 0 & -1 & 1 \\end{pmatrix} + \\begin{pmatrix} 0 & 0 & 0 \\\\ 0 & 0 & 0 \\\\ 0 & 0 & 1 \\end{pmatrix} = \\frac{1}{3} \\begin{pmatrix} 40 & -40 & 0 \\\\ -40 & 80 & -40 \\\\ 0 & -40 & 43 \\end{pmatrix} $$\n$$ \\mathbf{F_{global}} = \\begin{pmatrix} 750 \\\\ 1500 \\\\ 750 \\end{pmatrix} + \\begin{pmatrix} 0 \\\\ 0 \\\\ 300 \\end{pmatrix} = \\begin{pmatrix} 750 \\\\ 1500 \\\\ 1050 \\end{pmatrix} $$\n完整的方程组是：\n$$ \\frac{1}{3} \\begin{pmatrix} 40 & -40 & 0 \\\\ -40 & 80 & -40 \\\\ 0 & -40 & 43 \\end{pmatrix} \\begin{pmatrix} T_1 \\\\ T_2 \\\\ T_3 \\end{pmatrix} = \\begin{pmatrix} 750 \\\\ 1500 \\\\ 1050 \\end{pmatrix} $$\n我们应用 Dirichlet 边界条件 $T_1 = 400$ K。通过求解第二个和第三个方程来找到未知温度 $T_2$ 和 $T_3$：\n2) $-\\frac{40}{3} T_1 + \\frac{80}{3} T_2 - \\frac{40}{3} T_3 = 1500 \\implies -40(400) + 80 T_2 - 40 T_3 = 4500 \\implies 80 T_2 - 40 T_3 = 20500 \\implies 2T_2-T_3 = 512.5$\n3) $-\\frac{40}{3} T_2 + \\frac{43}{3} T_3 = 1050 \\implies -40 T_2 + 43 T_3 = 3150$\n\n我们求解这个 $2 \\times 2$ 方程组。由第一个方程得，$T_3 = 2T_2 - 512.5$。代入第二个方程：\n$$ -40T_2 + 43(2T_2 - 512.5) = 3150 $$\n$$ -40T_2 + 86T_2 - 22037.5 = 3150 $$\n$$ 46T_2 = 25187.5 $$\n$$ T_2 = \\frac{25187.5}{46} = \\frac{50375}{92} \\approx 547.554 \\, \\text{K} $$\n然后，计算 $T_3$：\n$$ T_3 = 2\\left(\\frac{50375}{92}\\right) - 512.5 = \\frac{50375}{46} - \\frac{23575}{46} = \\frac{26800}{46} = \\frac{13400}{23} \\approx 582.609 \\, \\text{K} $$\n最后，我们计算 Dirichlet 节点（$x=0$）处的反作用热流率，它被定义为未修改全局系统中第一个方程的残差。反作用力 $R_1$ 由 $R_1 = (\\mathbf{K_{global}}\\mathbf{T})_1 - (\\mathbf{F_{global}})_1$ 给出。\n$$ R_1 = \\left( \\frac{40}{3} T_1 - \\frac{40}{3} T_2 \\right) - 750 $$\n代入已知的 $T_1$ 和计算出的 $T_2$ 值：\n$$ R_1 = \\frac{40}{3} \\left( 400 - \\frac{50375}{92} \\right) - 750 $$\n$$ R_1 = \\frac{40}{3} \\left( \\frac{400 \\times 92 - 50375}{92} \\right) - 750 = \\frac{40}{3} \\left( \\frac{36800 - 50375}{92} \\right) - 750 $$\n$$ R_1 = \\frac{40}{3} \\left( \\frac{-13575}{92} \\right) - 750 $$\n注意到 $40/92 = 10/23$：\n$$ R_1 = \\frac{10}{3} \\left( \\frac{-13575}{23} \\right) - 750 = \\frac{-135750}{69} - \\frac{750 \\times 69}{69} $$\n$$ R_1 = \\frac{-135750 - 51750}{69} = \\frac{-187500}{69} $$\n分子和分母都可以被 $3$ 整除：\n$$ R_1 = \\frac{-62500}{23} \\approx -2717.3913 \\, \\text{W} $$\n符号为负，表示为了将节点1的温度维持在 $400$ K，有热量从杆中被移出。这就是反作用热流率。\n四舍五入到四位有效数字，其值为 $-2717$ W。", "answer": "$$ \\boxed{-2717} $$", "id": "2599184"}, {"introduction": "对于现代工程师和研究者而言，仅仅求解有限元问题是不够的，评估数值解的可靠性同样重要。这项高级编程练习将指导你实现一个二维有限元求解器，并应用一种先进的后验误差估计技术——超收敛节点恢复（SPR）方法 [@problem_id:2599230]。这个实践不仅连接了理论知识与计算实践的鸿沟，还让你掌握了如何通过“制造解”来验证代码的正确性，并量化数值误差，这是进行严谨科学计算与工程仿真的关键能力。", "problem": "实现一个程序，为二维空间中的稳态热传导构建超收敛片修复（Superconvergent Patch Recovery, SPR），并使用它来产生改进的后验误差估计。请从以下基本原理出发：能量守恒和傅里叶定律。在稳态情况下，能量守恒定律表明热通量的散度等于源项，而傅里叶定律则将通量表示为与负温度梯度成正比。具体来说，设温度场为 $T$，对称正定电导率张量为 $\\mathbf{K}$，热通量为 $\\mathbf{q}$。控制方程为在内部区域满足 $-\\nabla \\cdot \\mathbf{q} = f$，以及 $\\mathbf{q} = -\\mathbf{K} \\nabla T$，并在边界上给定狄利克雷边界数据。请通过将守恒方程乘以一个可容许的检验函数并进行分部积分来推导弱形式，使用热通量定义以 $\\nabla T$ 表示双线性形式。然后，在三角剖分上使用由连续分片线性试探函数和检验函数构成的协调空间，得到离散线性系统。您不得使用任何绕过这些推导的快捷公式。\n\n给定在单位正方形域 $[0,1]\\times[0,1]$ 上的精确人造解 $T(x,y) = \\sin(\\pi x)\\sin(\\pi y)$，以及通过在边界上直接指定 $T$ 来施加的齐次狄利克雷边界条件，构造将 $T$ 和一个常数张量 $\\mathbf{K}$ 代入强形式所隐含的体源 $f$。您必须使用以下网格族：将单位正方形结构化地划分为 $N_x \\times N_y$ 个矩形，每个矩形沿其降对角线再细分为两个直角三角形。对于每个三角形，使用线性形函数的梯度构建单元刚度，并进行全局组装。\n\n根据精确解和数值解以及电导率张量定义以下量：\n- 精确通量 $\\mathbf{q} = -\\mathbf{K}\\nabla T$。\n- 每个单元的离散通量 $\\mathbf{q}_h$，由每个三角形上离散解 $T_h$ 的分片常数梯度计算得出。\n- 通过超收敛片修复（SPR）获得的恢复通量场 $\\tilde{\\mathbf{q}}$。在每个顶点片上，对在相邻单元形心处采样的 $\\mathbf{q}_h$ 分量进行两次独立的一阶（关于 $x$ 和 $y$）多项式局部最小二乘拟合，通过在顶点处评估拟合的多项式来返回 $\\tilde{\\mathbf{q}}$ 的节点值。如果出现欠定拟合（例如，在角点处采样点不足），则统一地回退到该片上采样通量分量的平均值。\n\n使用这些量来定量定义：\n- 精确解的能量范数 $\\lVert T \\rVert_E = \\left(\\int_{\\Omega} \\nabla T^{\\top}\\mathbf{K}\\nabla T \\, \\mathrm{d}\\Omega\\right)^{1/2}$。\n- 精确能量范数误差 $\\lVert T - T_h \\rVert_E = \\left(\\int_{\\Omega} (\\nabla T - \\nabla T_h)^{\\top}\\mathbf{K}(\\nabla T - \\nabla T_h) \\, \\mathrm{d}\\Omega\\right)^{1/2}$。\n- 基于SPR的Zienkiewicz–Zhu型估计子 $\\eta = \\left(\\int_{\\Omega} (\\tilde{\\mathbf{q}} - \\mathbf{q}_h)^{\\top}\\mathbf{K}^{-1}(\\tilde{\\mathbf{q}} - \\mathbf{q}_h) \\, \\mathrm{d}\\Omega\\right)^{1/2}$。\n\n所有积分均通过在每个三角形上使用一致的单点形心法则计算。将所有量视为无量纲；最终结果中无需物理单位。\n\n您的程序必须：\n- 为带有在边界上由 $T$ 设定的狄利克雷边界条件的人造解，建立并求解有限元法（FEM）线性系统。\n- 计算每个单元的离散通量 $\\mathbf{q}_h$。\n- 按照规定通过超收敛片修复（SPR）构建恢复通量 $\\tilde{\\mathbf{q}}$。\n- 通过形心求积法，估计全局精确能量范数误差、全局估计子 $\\eta$ 以及精确解的能量范数。\n- 对每个测试用例，报告一个三元组，包括相对精确误差 $\\lVert T - T_h \\rVert_E / \\lVert T \\rVert_E$、相对估计子 $\\eta / \\lVert T \\rVert_E$ 和有效率指数 $\\eta / \\lVert T - T_h \\rVert_E$。\n\n测试套件与覆盖范围：\n- 用例1: $N_x = 4$, $N_y = 4$，各向同性 $\\mathbf{K} = \\mathrm{diag}(1,1)$。\n- 用例2: $N_x = 8$, $N_y = 8$，各向同性 $\\mathbf{K} = \\mathrm{diag}(1,1)$。\n- 用例3: $N_x = 8$, $N_y = 8$，各向异性 $\\mathbf{K} = \\mathrm{diag}(10,1)$。\n\n角度单位不适用。所有输出均为无量纲浮点数。\n\n最终输出格式：\n- 您的程序应生成单行输出，包含一个由列表组成的逗号分隔列表，每个内部列表对应一个测试用例，每个内部列表按 $[\\lVert T - T_h \\rVert_E / \\lVert T \\rVert_E,\\ \\eta / \\lVert T \\rVert_E,\\ \\eta / \\lVert T - T_h \\rVert_E]$ 的顺序排列，并用方括号括起来。例如：$[[a_1,b_1,c_1],[a_2,b_2,c_2],[a_3,b_3,c_3]]$，其中每个 $a_i,b_i,c_i$ 都是一个浮点数。", "solution": "该问题要求实现一个用于二维稳态热传导的有限元法（FEM）求解器，然后执行超收敛片修复（SPR）过程以计算后验误差估计。分析必须从第一性原理开始。\n\n令 $\\Omega \\subset \\mathbb{R}^2$ 为一个域，其边界为 $\\partial\\Omega$。温度场表示为 $T(\\mathbf{x})$，热通量为 $\\mathbf{q}(\\mathbf{x})$，热源为 $f(\\mathbf{x})$，导热系数为一个对称正定张量 $\\mathbf{K}$。\n\n控制物理原理是：\n1.  **能量守恒（稳态）**：流出任何无穷小控制体的净热通量与内部产热相平衡。其微分形式表示为：\n    $$ -\\nabla \\cdot \\mathbf{q} = f $$\n2.  **傅里叶热传导定律**：热通量与温度梯度的负值成正比。\n    $$ \\mathbf{q} = -\\mathbf{K} \\nabla T $$\n\n结合这两个方程，得到温度的控制偏微分方程（PDE）的强形式：\n$$ -\\nabla \\cdot (-\\mathbf{K} \\nabla T) = f \\quad \\text{in } \\Omega $$\n问题指定了狄利克雷边界条件，即在边界上规定了温度：\n$$ T = g \\quad \\text{on } \\partial\\Omega $$\n\n为推导弱形式，我们将PDE乘以来自合适函数空间（这里是索博列夫空间 $H_0^1(\\Omega)$，其函数在狄利克雷边界上为零）的任意检验函数 $v$，并在域 $\\Omega$ 上积分：\n$$ \\int_{\\Omega} (-\\nabla \\cdot \\mathbf{q}) v \\, \\mathrm{d}\\Omega = \\int_{\\Omega} f v \\, \\mathrm{d}\\Omega $$\n对左侧应用散度定理（分部积分）：\n$$ \\int_{\\Omega} (-\\nabla \\cdot \\mathbf{q}) v \\, \\mathrm{d}\\Omega = \\int_{\\Omega} \\mathbf{q} \\cdot \\nabla v \\, \\mathrm{d}\\Omega - \\int_{\\partial\\Omega} (\\mathbf{q} \\cdot \\mathbf{n}) v \\, \\mathrm{d}\\Omega $$\n由于选择的检验函数 $v$ 在边界 $\\partial\\Omega$ 上为零，边界积分消失。代入傅里叶定律 $\\mathbf{q} = -\\mathbf{K} \\nabla T$，我们得到：\n$$ \\int_{\\Omega} (-\\mathbf{K} \\nabla T) \\cdot \\nabla v \\, \\mathrm{d}\\Omega = \\int_{\\Omega} f v \\, \\mathrm{d}\\Omega $$\n整理后得到标准的弱形式：寻找 $T \\in H^1(\\Omega)$，使得在 $\\partial\\Omega$ 上 $T=g$，并且对于所有 $v \\in H_0^1(\\Omega)$：\n$$ a(T, v) = L(v) $$\n其中双线性形式 $a(T,v)$ 和线性形式 $L(v)$ 定义为：\n$$ a(T,v) = \\int_{\\Omega} (\\nabla v)^{\\top} \\mathbf{K} (\\nabla T) \\, \\mathrm{d}\\Omega $$\n$$ L(v) = \\int_{\\Omega} f v \\, \\mathrm{d}\\Omega $$\n\n对于有限元法，我们将域 $\\Omega$ 离散化为三角形单元网格，并用分片多项式函数 $T_h$ 来近似温度场 $T$。使用连续分片线性（$P^1$）基函数 $N_j(\\mathbf{x})$，近似解写成线性组合：\n$$ T_h(\\mathbf{x}) = \\sum_{j=1}^{N_{nodes}} T_j N_j(\\mathbf{x}) $$\n其中 $T_j$ 是网格节点 $j$ 处的未知温度值。我们对检验函数使用相同的基函数（伽辽金法），即 $v_h = \\sum_{i=1}^{N_{nodes}} c_i N_i(\\mathbf{x})$。将这些代入弱形式，得到一个线性方程组 $\\mathbf{K}_{global} \\mathbf{T} = \\mathbf{F}$，其中 $\\mathbf{T}$ 是节点温度向量。\n\n全局刚度矩阵 $\\mathbf{K}_{global}$ 和载荷向量 $\\mathbf{F}$ 的项由单元级贡献组装而成：\n$$ (\\mathbf{K}_{global})_{ij} = a(N_j, N_i) = \\int_{\\Omega} (\\nabla N_i)^{\\top} \\mathbf{K} (\\nabla N_j) \\, \\mathrm{d}\\Omega $$\n$$ (\\mathbf{F})_i = L(N_i) = \\int_{\\Omega} f N_i \\, \\mathrm{d}\\Omega $$\n对于一个具有节点 1, 2, 3 的单个三角形单元 $\\Omega_e$，线性基函数 $N_k^e$ 在单元上具有常数梯度 $\\nabla N_k^e$。单元刚度矩阵 $\\mathbf{k}^e$ 的项为：\n$$ k_{ij}^e = \\int_{\\Omega_e} (\\nabla N_i^e)^{\\top} \\mathbf{K} (\\nabla N_j^e) \\, \\mathrm{d}\\Omega_e = ((\\nabla N_i^e)^{\\top} \\mathbf{K} (\\nabla N_j^e)) A_e $$\n其中 $A_e$ 是单元的面积。这可以写成矩阵形式 $\\mathbf{k}^e = A_e (\\mathbf{B}^e)^{\\top} \\mathbf{K} \\mathbf{B}^e$，其中 $\\mathbf{B}^e$ 是一个 $2 \\times 3$ 矩阵，其列是梯度 $\\nabla N_k^e$。\n\n问题陈述使用单点形心求积。单元载荷向量 $\\mathbf{f}^e$ 为：\n$$ f_i^e = \\int_{\\Omega_e} f N_i^e \\, \\mathrm{d}\\Omega_e \\approx f(\\mathbf{x}_c^e) N_i^e(\\mathbf{x}_c^e) A_e $$\n在线性三角形的形心 $\\mathbf{x}_c^e$ 处，对于所有三个节点 $i$，$N_i^e(\\mathbf{x}_c^e) = 1/3$。因此：\n$$ f_i^e \\approx \\frac{A_e}{3} f(\\mathbf{x}_c^e) $$\n\n人造解为 $T(x,y) = \\sin(\\pi x)\\sin(\\pi y)$，在 $\\Omega = [0,1]^2$ 上。由于在 $\\partial\\Omega$ 上 $T=0$，边界条件是齐次狄利克雷条件。源项 $f$ 是通过将 $T$ 代入强形式得到的：\n$$ \\nabla T = \\begin{pmatrix} \\pi \\cos(\\pi x)\\sin(\\pi y) \\\\ \\pi \\sin(\\pi x)\\cos(\\pi y) \\end{pmatrix} $$\n$$ f = -\\nabla \\cdot (-\\mathbf{K} \\nabla T) = \\nabla \\cdot (\\mathbf{K} \\nabla T) $$\n对于一个常数对角张量 $\\mathbf{K} = \\mathrm{diag}(K_{xx}, K_{yy})$，通量为 $\\mathbf{q} = -\\mathbf{K}\\nabla T = \\begin{pmatrix} -K_{xx} \\pi \\cos(\\pi x)\\sin(\\pi y) \\\\ -K_{yy} \\pi \\sin(\\pi x)\\cos(\\pi y) \\end{pmatrix}$。\n源项变为：\n$$ f = \\frac{\\partial}{\\partial x}(K_{xx} \\pi \\cos(\\pi x)\\sin(\\pi y)) + \\frac{\\partial}{\\partial y}(K_{yy} \\pi \\sin(\\pi x)\\cos(\\pi y)) $$\n$$ f(x,y) = -K_{xx} \\pi^2 \\sin(\\pi x)\\sin(\\pi y) - K_{yy} \\pi^2 \\sin(\\pi x)\\sin(\\pi y) = (K_{xx} + K_{yy})\\pi^2 \\sin(\\pi x)\\sin(\\pi y) $$\n此函数 $f$ 用于计算载荷向量。\n\n求解线性系统得到内部节点温度 $T_h$ 后，我们进行后处理。\n每个单元 $e$ 上的离散通量 $\\mathbf{q}_h^e$ 是常数：\n$$ \\mathbf{q}_h^e = -\\mathbf{K} \\nabla T_h^e = -\\mathbf{K} \\sum_{i=1}^3 T_i^e \\nabla N_i^e $$\n\n对于超收敛片修复（SPR），对于网格的每个顶点 $v$，我们构建一个共享该顶点的单元片。我们在片中每个单元的形心处对离散通量分量 $(\\mathbf{q}_h)_x$ 和 $(\\mathbf{q}_h)_y$ 进行采样。对于每个分量，我们找到一个线性多项式 $\\tilde{p}(x,y) = a_0 + a_1 x + a_2 y$，它在最小二乘意义下最佳拟合采样值。这涉及求解一个线性系统 $\\mathbf{A}\\mathbf{c}=\\mathbf{b}$ 来获得系数 $\\mathbf{c}=(a_0, a_1, a_2)^{\\top}$，其中 $\\mathbf{A}$ 包含在形心处求值的多项式基函数。如果此系统是欠定的（即 $\\mathrm{rank}(\\mathbf{A}) < 3$），则在顶点处的恢复值是片中采样分量值的平均值。否则，恢复值为 $\\tilde{p}(x_v, y_v)$。这在每个节点 $v$ 处给出一个恢复通量向量 $\\tilde{\\mathbf{q}}_v$。然后，使用线性基函数在每个单元上插值恢复通量场 $\\tilde{\\mathbf{q}}$：\n$$ \\tilde{\\mathbf{q}}(\\mathbf{x}) = \\sum_{i=1}^3 \\tilde{\\mathbf{q}}_i N_i^e(\\mathbf{x}) \\quad \\text{for } \\mathbf{x} \\in \\Omega_e $$\n\n最后，我们使用形心求积法计算误差量。\n1.  **精确解的能量范数**：\n    $$ \\lVert T \\rVert_E^2 = \\int_{\\Omega} \\nabla T^{\\top}\\mathbf{K}\\nabla T \\, \\mathrm{d}\\Omega \\approx \\sum_{e \\in \\mathcal{T}_h} (\\nabla T(\\mathbf{x}_c^e))^{\\top}\\mathbf{K}(\\nabla T(\\mathbf{x}_c^e)) A_e $$\n2.  **精确能量范数误差**：\n    $$ \\lVert T - T_h \\rVert_E^2 = \\int_{\\Omega} (\\nabla T - \\nabla T_h)^{\\top}\\mathbf{K}(\\nabla T - \\nabla T_h) \\, \\mathrm{d}\\Omega \\approx \\sum_{e \\in \\mathcal{T}_h} (\\nabla T(\\mathbf{x}_c^e) - \\nabla T_h^e)^{\\top}\\mathbf{K}(\\nabla T(\\mathbf{x}_c^e) - \\nabla T_h^e) A_e $$\n3.  **Zienkiewicz-Zhu 估计子**：\n    $$ \\eta^2 = \\int_{\\Omega} (\\tilde{\\mathbf{q}} - \\mathbf{q}_h)^{\\top}\\mathbf{K}^{-1}(\\tilde{\\mathbf{q}} - \\mathbf{q}_h) \\, \\mathrm{d}\\Omega \\approx \\sum_{e \\in \\mathcal{T}_h} (\\tilde{\\mathbf{q}}(\\mathbf{x}_c^e) - \\mathbf{q}_h^e)^{\\top}\\mathbf{K}^{-1}(\\tilde{\\mathbf{q}}(\\mathbf{x}_c^e) - \\mathbf{q}_h^e) A_e $$\n    对于具有顶点 $i=1,2,3$ 的单元 $e$，$\\tilde{\\mathbf{q}}(\\mathbf{x}_c^e) = \\frac{1}{3}\\sum_{i=1}^3 \\tilde{\\mathbf{q}}_i$。\n\n最终报告的值是相对误差 $\\lVert T-T_h \\rVert_E / \\lVert T \\rVert_E$、相对估计子 $\\eta / \\lVert T \\rVert_E$ 和有效率指数 $\\eta / \\lVert T-T_h \\rVert_E$。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve_fem_spr(Nx, Ny, K_tensor):\n    \"\"\"\n    Solves the 2D steady-state heat conduction problem using FEM and SPR.\n    \"\"\"\n    \n    # 1. Mesh Generation\n    num_nodes_x = Nx + 1\n    num_nodes_y = Ny + 1\n    num_nodes = num_nodes_x * num_nodes_y\n    num_rects = Nx * Ny\n    num_elems = 2 * num_rects\n\n    dx = 1.0 / Nx\n    dy = 1.0 / Ny\n    \n    nodes = np.zeros((num_nodes, 2))\n    for j in range(num_nodes_y):\n        for i in range(num_nodes_x):\n            node_idx = j * num_nodes_x + i\n            nodes[node_idx] = [i * dx, j * dy]\n\n    elements = np.zeros((num_elems, 3), dtype=int)\n    elem_idx = 0\n    for j in range(Ny):\n        for i in range(Nx):\n            n1 = j * num_nodes_x + i       # bottom-left\n            n2 = j * num_nodes_x + i + 1   # bottom-right\n            n3 = (j + 1) * num_nodes_x + i # top-left\n            n4 = (j + 1) * num_nodes_x + i + 1 # top-right\n            \n            # Triangle 1 from descending diagonal (n3 -> n2)\n            elements[elem_idx] = [n1, n2, n3]\n            elem_idx += 1\n            # Triangle 2\n            elements[elem_idx] = [n2, n4, n3]\n            elem_idx += 1\n\n    # 2. Identify boundary and interior nodes\n    boundary_nodes = set()\n    for j in range(num_nodes_y):\n        for i in range(num_nodes_x):\n            if i == 0 or i == Nx or j == 0 or j == Ny:\n                boundary_nodes.add(j * num_nodes_x + i)\n    \n    interior_nodes = sorted(list(set(range(num_nodes)) - boundary_nodes))\n    node_map = {node_idx: i for i, node_idx in enumerate(interior_nodes)}\n    \n    # 3. Assemble Global Stiffness Matrix and Load Vector\n    num_interior = len(interior_nodes)\n    K_global = np.zeros((num_interior, num_interior))\n    F_global = np.zeros(num_interior)\n\n    # Manufactured solution and source term\n    T_exact_func = lambda x, y: np.sin(np.pi * x) * np.sin(np.pi * y)\n    f_func = lambda x, y, K: (K[0,0] + K[1,1]) * np.pi**2 * T_exact_func(x,y)\n\n    for el_nodes in elements:\n        v1, v2, v3 = nodes[el_nodes]\n        \n        # Element geometry\n        area = 0.5 * np.abs(v1[0]*(v2[1] - v3[1]) + v2[0]*(v3[1] - v1[1]) + v3[0]*(v1[1] - v2[1]))\n        \n        # Gradients of shape functions (B matrix)\n        B = np.zeros((2, 3))\n        b = np.array([v2[1] - v3[1], v3[1] - v1[1], v1[1] - v2[1]])\n        c = np.array([v3[0] - v2[0], v1[0] - v3[0], v2[0] - v1[0]])\n        B[0, :] = b / (2 * area)\n        B[1, :] = c / (2 * area)\n\n        # Element stiffness matrix\n        k_elem = area * B.T @ K_tensor @ B\n\n        # Element load vector (centroid quadrature)\n        centroid = (v1 + v2 + v3) / 3.0\n        f_val = f_func(centroid[0], centroid[1], K_tensor)\n        f_elem = (area / 3.0) * f_val * np.ones(3)\n\n        # Assembly into global system for interior nodes\n        for i in range(3):\n            node_i = el_nodes[i]\n            if node_i in interior_nodes:\n                map_i = node_map[node_i]\n                F_global[map_i] += f_elem[i]\n                for j in range(3):\n                    node_j = el_nodes[j]\n                    if node_j in interior_nodes:\n                        map_j = node_map[node_j]\n                        K_global[map_i, map_j] += k_elem[i, j]\n\n    # 4. Solve system and reconstruct full solution vector\n    T_interior = np.linalg.solve(K_global, F_global)\n    T_h = np.zeros(num_nodes)\n    for i, node_idx in enumerate(interior_nodes):\n        T_h[node_idx] = T_interior[i]\n\n    # 5. Compute discrete flux q_h\n    elem_flux_h = np.zeros((num_elems, 2))\n    elem_centroids = np.zeros((num_elems, 2))\n    elem_areas = np.zeros(num_elems)\n    grad_Th_elems = np.zeros((num_elems, 2))\n\n    for i, el_nodes in enumerate(elements):\n        v1, v2, v3 = nodes[el_nodes]\n        area = 0.5 * np.abs(v1[0]*(v2[1] - v3[1]) + v2[0]*(v3[1] - v1[1]) + v3[0]*(v1[1] - v2[1]))\n        elem_areas[i] = area\n        elem_centroids[i] = (v1 + v2 + v3) / 3.0\n        \n        b = np.array([v2[1] - v3[1], v3[1] - v1[1], v1[1] - v2[1]])\n        c = np.array([v3[0] - v2[0], v1[0] - v3[0], v2[0] - v1[0]])\n        B_elem = np.vstack((b, c)) / (2 * area)\n        \n        T_h_elem = T_h[el_nodes]\n        grad_Th_elems[i] = B_elem @ T_h_elem\n        elem_flux_h[i] = -K_tensor @ grad_Th_elems[i]\n\n    # 6. Superconvergent Patch Recovery (SPR)\n    node_patches = {i: [] for i in range(num_nodes)}\n    for i, el_nodes in enumerate(elements):\n        for node_idx in el_nodes:\n            node_patches[node_idx].append(i)\n\n    q_recovered = np.zeros((num_nodes, 2))\n    for i in range(num_nodes):\n        patch_elem_indices = node_patches[i]\n        patch_fluxes = elem_flux_h[patch_elem_indices]\n        patch_centroids = elem_centroids[patch_elem_indices]\n        \n        m = len(patch_elem_indices)\n        A = np.ones((m, 3))\n        A[:, 1:] = patch_centroids\n        \n        is_underdetermined = np.linalg.matrix_rank(A) < 3\n\n        for comp in range(2): # for qx and qy\n            b = patch_fluxes[:, comp]\n            if is_underdetermined:\n                # Fallback to average\n                q_recovered[i, comp] = np.mean(b)\n            else:\n                # Least squares fit\n                coeffs, _, _, _ = np.linalg.lstsq(A, b, rcond=None)\n                node_coord = nodes[i]\n                q_recovered[i, comp] = coeffs[0] + coeffs[1]*node_coord[0] + coeffs[2]*node_coord[1]\n    \n    # 7. Error Estimation\n    grad_T_exact_func = lambda x, y: np.array([\n        np.pi * np.cos(np.pi * x) * np.sin(np.pi * y),\n        np.pi * np.sin(np.pi * x) * np.cos(np.pi * y)\n    ])\n    \n    K_inv = np.linalg.inv(K_tensor)\n    \n    exact_energy_sq = 0.0\n    error_energy_sq = 0.0\n    eta_sq = 0.0\n\n    for i, el_nodes in enumerate(elements):\n        centroid = elem_centroids[i]\n        area = elem_areas[i]\n        \n        grad_T_exact = grad_T_exact_func(centroid[0], centroid[1])\n        grad_T_h = grad_Th_elems[i]\n        \n        # Energy norm of exact solution\n        exact_energy_sq += (grad_T_exact.T @ K_tensor @ grad_T_exact) * area\n        \n        # Energy norm of error\n        error_grad = grad_T_exact - grad_T_h\n        error_energy_sq += (error_grad.T @ K_tensor @ error_grad) * area\n        \n        # ZZ Estimator\n        q_h_at_centroid = elem_flux_h[i]\n        recovered_node_fluxes = q_recovered[el_nodes]\n        q_rec_at_centroid = np.mean(recovered_node_fluxes, axis=0)\n        flux_diff = q_rec_at_centroid - q_h_at_centroid\n        eta_sq += (flux_diff.T @ K_inv @ flux_diff) * area\n        \n    exact_energy_norm = np.sqrt(exact_energy_sq)\n    error_energy_norm = np.sqrt(error_energy_sq)\n    eta = np.sqrt(eta_sq)\n    \n    rel_error = error_energy_norm / exact_energy_norm\n    rel_estimator = eta / exact_energy_norm\n    effectivity = eta / error_energy_norm if error_energy_norm > 1e-12 else 0.0\n\n    return [rel_error, rel_estimator, effectivity]\n\n\ndef solve():\n    test_cases = [\n        (4, 4, np.array([[1.0, 0.0], [0.0, 1.0]])),\n        (8, 8, np.array([[1.0, 0.0], [0.0, 1.0]])),\n        (8, 8, np.array([[10.0, 0.0], [0.0, 1.0]]))\n    ]\n\n    results = []\n    for case in test_cases:\n        Nx, Ny, K_tensor = case\n        result_triple = solve_fem_spr(Nx, Ny, K_tensor)\n        results.append(result_triple)\n\n    # Format output as a list of lists of floats\n    output_str = \"[\" + \",\".join([f\"[{r[0]},{r[1]},{r[2]}]\" for r in results]) + \"]\"\n    print(output_str)\n\nsolve()\n```", "id": "2599230"}]}