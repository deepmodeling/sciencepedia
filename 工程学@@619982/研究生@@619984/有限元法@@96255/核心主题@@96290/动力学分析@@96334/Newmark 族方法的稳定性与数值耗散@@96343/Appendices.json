{"hands_on_practices": [{"introduction": "本练习将对纽马克 (Newmark) 方法族中的一个重要成员——线性加速度法 $(\\beta=1/6, \\gamma=1/2)$——进行一次完整的分析。通过从基本定义出发，推导其频散关系、稳定性极限和相位误差，你将掌握表征时间积分算法核心性能（如频散和耗散）的基础分析技能。[@problem_id:2598061]", "problem": "考虑源于有限元法 (FEM) 的无阻尼、线性、半离散弹性动力学模型：\n$$\\mathbf{M}\\,\\ddot{\\mathbf{u}}(t) + \\mathbf{K}\\,\\mathbf{u}(t) = \\mathbf{0},$$ \n其中质量矩阵 $\\mathbf{M}$ 和刚度矩阵 $\\mathbf{K}$ 均为对称正定矩阵。根据标准模态分析，每个质量归一化模态 $q(t)$ 满足单自由度 (SDOF) 常微分方程 (ODE) \n$$\\ddot{q}(t) + \\omega^{2} q(t) = 0,$$ \n其中 $\\omega$ 是该模态的精确圆频率。将具有线性加速度参数 $(\\beta,\\gamma)=(1/6,1/2)$ 和恒定时间步长 $\\Delta t$ 的 Newmark 族方法应用于此单自由度模态方程。\n\n仅从该半离散常微分方程和 Newmark 族方法 $(\\beta,\\gamma)=(1/6,1/2)$ 的定义出发，推导由此 Newmark 格式控制的离散模态位移 $\\{q_{n}\\}_{n\\in\\mathbb{Z}}$ 的单步放大关系。然后利用该关系：\n\n- 在假设 $q_{n} \\propto \\exp(\\mathrm{i}\\, n\\, \\bar{\\rho})$ 下，推导离散色散关系，即精确无量纲频率 $\\rho := \\omega\\,\\Delta t$ 与每步的数值相位增量 $\\bar{\\rho}$ (单位为弧度) 之间的函数关系。\n- 确定该模态线性稳定性的临界时间步长 $\\Delta t_{c}$，其定义为使得单步放大映射的谱半径不超过 1 的最大 $\\Delta t$。\n- 评估当 $\\Delta t \\to 0$ 时，该方法相对于精确动力学的主阶相位误差，其定义为\n$$\\frac{\\bar{\\omega} - \\omega}{\\omega}, \\quad \\text{其中} \\quad \\bar{\\omega} := \\frac{\\bar{\\rho}}{\\Delta t},$$\n并表示为以 $\\rho$ 的幂次展开且在第一个非零项处截断的渐近级数。\n\n请将您的最终答案表示为一个包含三个元素的行矩阵，并遵循以下顺序和形式：\n(1) $\\bar{\\rho}$ 关于 $\\rho$ 的解析表达式 (单位为弧度)，\n(2) $\\Delta t_{c}$ 关于 $\\omega$ 的解析表达式 (时间单位应与 $\\Delta t$ 的单位一致)，以及\n(3) 相对相位误差关于 $\\rho$ 的主阶解析表达式 (无量纲)。最终方框内的答案不应包含单位。无需进行数值舍入。", "solution": "所给的问题陈述是结构动力学数值方法分析领域中一个标准的、适定的练习。该问题有科学依据、客观且内容自洽。所有提供的信息，包括控制常微分方程 (ODE)、特定的 Newmark 参数 $(\\beta, \\gamma)$ 以及稳定性和相位误差的定义，在计算力学领域内都是标准且正确的。因此，该问题被视为**有效**，我将着手求解。\n\n单个质量归一化模态的运动由单自由度 (SDOF) 方程控制：\n$$\n\\ddot{q}(t) + \\omega^2 q(t) = 0\n$$\n其中 $\\omega$ 是该模态的精确圆频率。我们应用 Newmark 族时间积分算法。从时间步 $n$ 到 $n+1$，位移 $q$ 和速度 $\\dot{q}$ 的一般更新规则为：\n$$\nq_{n+1} = q_n + \\Delta t \\dot{q}_n + (\\Delta t)^2 \\left[ \\left(\\frac{1}{2} - \\beta\\right) \\ddot{q}_n + \\beta \\ddot{q}_{n+1} \\right]\n$$\n$$\n\\dot{q}_{n+1} = \\dot{q}_n + \\Delta t \\left[ (1 - \\gamma) \\ddot{q}_n + \\gamma \\ddot{q}_{n+1} \\right]\n$$\n该问题指定了线性加速度法，其参数为 $(\\beta, \\gamma) = (1/6, 1/2)$。参数 $\\gamma=1/2$ 确保了该方法是二阶精度的，并且不产生数值耗散。对于 $\\gamma=1/2$ 的特殊情况，Newmark 更新可以合并为关于离散位移 $\\{q_n\\}$ 的一个单一的三项递推关系。在时间步 $n-1$, $n$ 和 $n+1$ 处评估离散运动方程 $\\ddot{q}_{n} + \\omega^2 q_{n} = 0$，并代入著名的 Newmark 方法三点差分格式，可得：\n$$\nq_{n+1} - 2q_n + q_{n-1} = (\\Delta t)^2 \\left[ \\beta \\ddot{q}_{n+1} + (1-2\\beta) \\ddot{q}_n + \\beta \\ddot{q}_{n-1} \\right]\n$$\n我们在每个时间步应用离散运动方程，即对于 $k \\in \\{n-1, n, n+1\\}$ 有 $\\ddot{q}_k = -\\omega^2 q_k$。将此代入递推关系可得：\n$$\nq_{n+1} - 2q_n + q_{n-1} = -(\\omega \\Delta t)^2 \\left[ \\beta q_{n+1} + (1-2\\beta) q_n + \\beta q_{n-1} \\right]\n$$\n引入无量纲频率 $\\rho := \\omega \\Delta t$，我们重新整理各项：\n$$\n(1 + \\beta \\rho^2) q_{n+1} - (2 - (1 - 2\\beta)\\rho^2) q_n + (1 + \\beta \\rho^2) q_{n-1} = 0\n$$\n为了求得离散色散关系，我们代入假设 $q_n = C \\exp(\\mathrm{i} n \\bar{\\rho})$，其中 $C$ 是一个常数，$\\bar{\\rho}$ 是每步的数值相位增量。\n$$\n(1 + \\beta \\rho^2) \\exp(\\mathrm{i} (n+1) \\bar{\\rho}) - (2 - (1 - 2\\beta)\\rho^2) \\exp(\\mathrm{i} n \\bar{\\rho}) + (1 + \\beta \\rho^2) \\exp(\\mathrm{i} (n-1) \\bar{\\rho}) = 0\n$$\n方程两边同除以 $C \\exp(\\mathrm{i} n \\bar{\\rho})$ 并使用欧拉公式 $\\exp(\\mathrm{i}\\bar{\\rho}) + \\exp(-\\mathrm{i}\\bar{\\rho}) = 2\\cos(\\bar{\\rho})$，我们得到：\n$$\n(1 + \\beta \\rho^2) (\\exp(\\mathrm{i}\\bar{\\rho}) + \\exp(-\\mathrm{i}\\bar{\\rho})) = 2 - (1 - 2\\beta)\\rho^2\n$$\n$$\n2(1 + \\beta \\rho^2) \\cos(\\bar{\\rho}) = 2 - (1 - 2\\beta)\\rho^2\n$$\n$$\n\\cos(\\bar{\\rho}) = \\frac{1 - (\\frac{1}{2} - \\beta)\\rho^2}{1 + \\beta \\rho^2}\n$$\n对于线性加速度法，$\\beta = 1/6$。代入此值：\n$$\n\\cos(\\bar{\\rho}) = \\frac{1 - (\\frac{1}{2} - \\frac{1}{6})\\rho^2}{1 + \\frac{1}{6}\\rho^2} = \\frac{1 - \\frac{1}{3}\\rho^2}{1 + \\frac{1}{6}\\rho^2}\n$$\n解出 $\\bar{\\rho}$ 即可得到第一个要求的结果，即离散色散关系：\n$$\n\\bar{\\rho} = \\arccos\\left(\\frac{1 - \\frac{\\rho^2}{3}}{1 + \\frac{\\rho^2}{6}}\\right)\n$$\n\n接下来，我们确定线性稳定性极限。一个无耗散方法 ($\\gamma=1/2$) 稳定的充要条件是其放大矩阵的特征值位于单位圆上。这等价于要求 $\\cos(\\bar{\\rho})$ 的值是实数且在区间 $[-1, 1]$ 内。\n$$\n-1 \\le \\frac{1 - \\frac{\\rho^2}{3}}{1 + \\frac{\\rho^2}{6}} \\le 1\n$$\n由于 $\\rho^2 = (\\omega \\Delta t)^2 \\ge 0$，分母 $1 + \\rho^2/6$ 恒为正。我们可以分别分析这两个不等式。\n右边的不等式：\n$$\n1 - \\frac{\\rho^2}{3} \\le 1 + \\frac{\\rho^2}{6} \\implies -\\frac{\\rho^2}{3} \\le \\frac{\\rho^2}{6} \\implies 0 \\le \\frac{\\rho^2}{2}\n$$\n这对任意实数 $\\rho$ 都成立。\n左边的不等式设定了稳定性极限：\n$$\n-1 \\le \\frac{1 - \\frac{\\rho^2}{3}}{1 + \\frac{\\rho^2}{6}} \\implies -(1 + \\frac{\\rho^2}{6}) \\le 1 - \\frac{\\rho^2}{3}\n$$\n$$\n-1 - \\frac{\\rho^2}{6} \\le 1 - \\frac{\\rho^2}{3} \\implies \\frac{\\rho^2}{3} - \\frac{\\rho^2}{6} \\le 2 \\implies \\frac{\\rho^2}{6} \\le 2 \\implies \\rho^2 \\le 12\n$$\n因此，稳定性极限为 $\\rho_{crit} = \\sqrt{12} = 2\\sqrt{3}$。\n临界时间步长 $\\Delta t_c$ 由 $\\rho_{crit} = \\omega \\Delta t_c$ 求得：\n$$\n\\Delta t_c = \\frac{2\\sqrt{3}}{\\omega}\n$$\n\n最后，我们评估在小时间步长下（即当 $\\rho = \\omega \\Delta t \\to 0$ 时）的主阶相位误差。相对相位误差定义为 $(\\bar{\\omega} - \\omega)/\\omega$，这等价于 $(\\bar{\\rho}/\\rho) - 1$。\n我们将色散关系 $\\cos(\\bar{\\rho}) = (1 - \\rho^2/3) / (1 + \\rho^2/6)$ 的两边在 $\\rho=0$ 附近进行泰勒级数展开。\n左边：$\\cos(\\bar{\\rho}) = 1 - \\frac{\\bar{\\rho}^2}{2} + \\frac{\\bar{\\rho}^4}{24} - O(\\bar{\\rho}^6)$。\n右边，使用几何级数 $(1+x)^{-1} = 1 - x + x^2 - \\dots$：\n$$\n\\frac{1 - \\frac{\\rho^2}{3}}{1 + \\frac{\\rho^2}{6}} = \\left(1 - \\frac{\\rho^2}{3}\\right)\\left(1 - \\frac{\\rho^2}{6} + \\frac{\\rho^4}{36} - O(\\rho^6)\\right) = 1 - \\frac{\\rho^2}{6} - \\frac{\\rho^2}{3} + \\frac{\\rho^4}{18} + \\frac{\\rho^4}{36} + O(\\rho^6)\n$$\n$$\n= 1 - \\frac{1}{2}\\rho^2 + \\frac{1}{12}\\rho^4 + O(\\rho^6)\n$$\n令两边的级数展开式相等：\n$$\n1 - \\frac{\\bar{\\rho}^2}{2} + \\frac{\\bar{\\rho}^4}{24} + O(\\bar{\\rho}^6) = 1 - \\frac{1}{2}\\rho^2 + \\frac{1}{12}\\rho^4 + O(\\rho^6)\n$$\n当 $\\rho \\to 0$ 时，我们有 $\\bar{\\rho} \\to \\rho$，因此该方法是相容的。我们来求高阶项。令 $\\rho^2$ 和 $\\bar{\\rho}^2$ 的系数相等，得到 $\\bar{\\rho}^2 \\approx \\rho^2$。我们可以将其代入 $\\bar{\\rho}^4$ 项：\n$$\n\\frac{\\bar{\\rho}^2}{2} = \\frac{1}{2}\\rho^2 - \\frac{1}{12}\\rho^4 + \\frac{\\bar{\\rho}^4}{24} + O(\\rho^6) \\approx \\frac{1}{2}\\rho^2 - \\frac{1}{12}\\rho^4 + \\frac{\\rho^4}{24} = \\frac{1}{2}\\rho^2 - \\frac{1}{24}\\rho^4\n$$\n$$\n\\bar{\\rho}^2 \\approx \\rho^2 - \\frac{1}{12}\\rho^4 = \\rho^2\\left(1 - \\frac{\\rho^2}{12}\\right)\n$$\n取平方根并对小的 $x$ 使用二项式近似 $\\sqrt{1-x} \\approx 1 - x/2$：\n$$\n\\bar{\\rho} \\approx \\rho\\sqrt{1 - \\frac{\\rho^2}{12}} \\approx \\rho\\left(1 - \\frac{1}{2} \\cdot \\frac{\\rho^2}{12}\\right) = \\rho\\left(1 - \\frac{\\rho^2}{24}\\right)\n$$\n于是，相对相位误差为：\n$$\n\\frac{\\bar{\\omega} - \\omega}{\\omega} = \\frac{\\bar{\\rho}}{\\rho} - 1 \\approx \\left(1 - \\frac{\\rho^2}{24}\\right) - 1 = -\\frac{\\rho^2}{24}\n$$\n主阶相对相位误差为 $-\\rho^2/24$。负号表示相位滞后（周期延长），这是线性加速度法的一个特征。", "answer": "$$\n\\boxed{\n\\begin{pmatrix}\n\\arccos\\left(\\frac{1 - \\frac{\\rho^2}{3}}{1 + \\frac{\\rho^2}{6}}\\right) & \\frac{2\\sqrt{3}}{\\omega} & -\\frac{\\rho^2}{24}\n\\end{pmatrix}\n}\n$$", "id": "2598061"}, {"introduction": "在掌握了基本的分析技术后，本练习将引导你探索如何主动优化算法的性能。你将要确定一个特定的纽马克 (Newmark) 参数 $\\beta$ 值，该值能够消除无耗散格式 $(\\gamma=1/2)$ 中的主导周期误差项，从而揭示理论分析如何指导我们设计出更高精度的算法。[@problem_id:2598012]", "problem": "考虑一个无阻尼线性单自由度 (SDOF) 振子，其运动由常微分方程 $m \\ddot{u}(t) + k u(t) = 0$ 控制，自振圆频率为 $\\omega = \\sqrt{k/m}$。该运动采用参数为 $\\beta$ 和 $\\gamma$ 的 Newmark 族方法、使用均匀时间步长 $\\Delta t$ 在时间上推进，其更新关系如下：\n$$\nu_{n+1} = u_n + \\Delta t\\, v_n + \\Delta t^2 \\left[\\left(\\tfrac{1}{2} - \\beta\\right) a_n + \\beta\\, a_{n+1}\\right], \\quad\nv_{n+1} = v_n + \\Delta t \\left[(1-\\gamma) a_n + \\gamma\\, a_{n+1}\\right],\n$$\n其中 $a_n = \\ddot{u}_n$。假设 $\\gamma = \\tfrac{1}{2}$ 并定义无量纲步长 $\\Omega = \\omega \\Delta t$。通过消去辅助变量，该方法导出位移的两步递推关系，其形式为\n$$\nu_{n+1} - 2 \\cos(\\Omega_{\\mathrm{num}})\\, u_n + u_{n-1} = 0,\n$$\n此式定义了离散（算法）频率 $\\Omega_{\\mathrm{num}} = \\omega_{\\mathrm{num}} \\Delta t$。请仅使用给定的定义和上述方法关系式（不使用其他专门公式），进行小 $\\Omega$ 分析，将 $\\Omega_{\\mathrm{num}}$ 展开为关于 $\\Omega$ 的级数，直至并包含 $\\Omega^3$ 阶项。确定能消除 $\\Omega_{\\mathrm{num}} - \\Omega$ 中主色散项的 $\\beta$ 值，并简要解释其对周期误差 $T_{\\mathrm{num}}/T - 1$ 主阶行为的影响，其中 $T_{\\mathrm{num}} = 2\\pi/\\omega_{\\mathrm{num}}$ 且 $T = 2\\pi/\\omega$。您的最终答案必须是 $\\beta$ 的单个值（无需单位或四舍五入）。整个过程中角度必须以弧度处理。", "solution": "对问题陈述进行验证。\n\n步骤 1：提取已知条件。\n- 控制常微分方程：$m \\ddot{u}(t) + k u(t) = 0$。\n- 自振圆频率：$\\omega = \\sqrt{k/m}$。\n- 时间步长为 $\\Delta t$ 的 Newmark 族更新关系式：\n$$u_{n+1} = u_n + \\Delta t\\, v_n + \\Delta t^2 \\left[\\left(\\tfrac{1}{2} - \\beta\\right) a_n + \\beta\\, a_{n+1}\\right]$$\n$$v_{n+1} = v_n + \\Delta t \\left[(1-\\gamma) a_n + \\gamma\\, a_{n+1}\\right]$$\n- 参数约束：$\\gamma = \\tfrac{1}{2}$。\n- 无量纲时间步长：$\\Omega = \\omega \\Delta t$。\n- 导出的位移两步递推关系形式：$u_{n+1} - 2 \\cos(\\Omega_{\\mathrm{num}})\\, u_n + u_{n-1} = 0$。\n- 离散（算法）频率的定义：$\\Omega_{\\mathrm{num}} = \\omega_{\\mathrm{num}} \\Delta t$。\n- 周期误差分析的定义：$T_{\\mathrm{num}} = 2\\pi/\\omega_{\\mathrm{num}}$ 和 $T = 2\\pi/\\omega$。\n\n步骤 2：使用提取的已知条件进行验证。\n该问题具有科学依据、提法恰当且客观。它提出了结构动力学数值方法分析中的一个标准任务：Newmark 时间积分方案的色散分析。所有定义和方程都是标准且正确的。问题是自洽的，提供了按要求从第一性原理进行推导所需的所有必要信息。没有矛盾、歧义或事实错误。该问题是应用数学和计算力学中一个可形式化且相关的练习。\n\n步骤 3：结论与行动。\n问题有效。将提供解答。\n\n任务是推导 Newmark 参数 $\\beta$ 的值，以消除无阻尼单自由度系统的主色散误差，给定条件为 $\\gamma = 1/2$。我们从已提供的 Newmark 更新法则和运动方程开始。\n\n对于线性振子，在任意时间步 $t_n$ 的加速度通过运动方程直接与位移 $u_n$ 相关：$m a_n + k u_n = 0$，这意味着 $a_n = -(k/m)u_n = -\\omega^2 u_n$。同样的关系也适用于时间步 $t_{n+1}$：$a_{n+1} = -\\omega^2 u_{n+1}$。\n\n我们在 Newmark 关系式中令 $\\gamma = 1/2$ 并代入加速度的表达式：\n$$u_{n+1} = u_n + \\Delta t\\, v_n + \\Delta t^2 \\left[ \\left(\\frac{1}{2} - \\beta\\right)(-\\omega^2 u_n) + \\beta(-\\omega^2 u_{n+1}) \\right]$$\n$$v_{n+1} = v_n + \\Delta t \\left[ \\frac{1}{2}(-\\omega^2 u_n) + \\frac{1}{2}(-\\omega^2 u_{n+1}) \\right]$$\n\n引入无量纲时间步长 $\\Omega = \\omega \\Delta t$，方程变为：\n$$u_{n+1} = u_n + \\Delta t\\, v_n - \\Omega^2 \\left[ \\left(\\frac{1}{2} - \\beta\\right) u_n + \\beta u_{n+1} \\right] \\quad (1)$$\n$$\\Delta t\\, v_{n+1} = \\Delta t\\, v_n - \\frac{\\Omega^2}{2} (u_n + u_{n+1}) \\quad (2)$$\n\n我们的目标是推导一个仅含位移 $u_n$ 的递推关系。我们必须消去速度项。从方程 $(1)$ 中，我们分离出 $\\Delta t\\, v_n$：\n$$(1 + \\beta \\Omega^2) u_{n+1} = \\left(1 - \\left(\\frac{1}{2} - \\beta\\right)\\Omega^2\\right) u_n + \\Delta t\\, v_n$$\n$$\\Delta t\\, v_n = (1 + \\beta \\Omega^2) u_{n+1} - \\left(1 - \\left(\\frac{1}{2} - \\beta\\right)\\Omega^2\\right) u_n \\quad (3)$$\n\n为了找到 $\\Delta t\\, v_{n+1}$ 的表达式，我们可以将方程 $(3)$ 中的时间下标从 $n$ 移至 $n+1$：\n$$\\Delta t\\, v_{n+1} = (1 + \\beta \\Omega^2) u_{n+2} - \\left(1 - \\left(\\frac{1}{2} - \\beta\\right)\\Omega^2\\right) u_{n+1} \\quad (4)$$\n\n我们还必须使用速度更新式，即方程 $(2)$。我们将方程 $(3)$ 中 $\\Delta t\\, v_n$ 的表达式代入方程 $(2)$：\n$$\\Delta t\\, v_{n+1} = \\left[ (1 + \\beta \\Omega^2) u_{n+1} - \\left(1 - \\left(\\frac{1}{2} - \\beta\\right)\\Omega^2\\right) u_n \\right] - \\frac{\\Omega^2}{2} (u_n + u_{n+1})$$\n合并关于 $u_n$ 和 $u_{n+1}$ 的项：\n$$\\Delta t\\, v_{n+1} = \\left(1 + \\beta \\Omega^2 - \\frac{\\Omega^2}{2}\\right) u_{n+1} - \\left(1 - \\left(\\frac{1}{2} - \\beta\\right)\\Omega^2 + \\frac{\\Omega^2}{2}\\right) u_n$$\n$$\\Delta t\\, v_{n+1} = \\left(1 + \\left(\\beta - \\frac{1}{2}\\right)\\Omega^2\\right) u_{n+1} - \\left(1 + \\beta\\Omega^2\\right) u_n \\quad (5)$$\n\n现在我们将来自 $(4)$ 和 $(5)$ 的两个关于 $\\Delta t\\, v_{n+1}$ 的表达式画上等号：\n$$(1 + \\beta \\Omega^2) u_{n+2} - \\left(1 - \\left(\\frac{1}{2} - \\beta\\right)\\Omega^2\\right) u_{n+1} = \\left(1 + \\left(\\beta - \\frac{1}{2}\\right)\\Omega^2\\right) u_{n+1} - \\left(1 + \\beta\\Omega^2\\right) u_n$$\n重新整理，按位移下标分组：\n$$(1 + \\beta \\Omega^2) u_{n+2} - \\left[ \\left(1 - \\left(\\frac{1}{2} - \\beta\\right)\\Omega^2\\right) + \\left(1 + \\left(\\beta - \\frac{1}{2}\\right)\\Omega^2\\right) \\right] u_{n+1} + (1 + \\beta \\Omega^2) u_n = 0$$\n$u_{n+1}$ 项的系数可简化为：\n$$1 - \\frac{1}{2}\\Omega^2 + \\beta\\Omega^2 + 1 + \\beta\\Omega^2 - \\frac{1}{2}\\Omega^2 = 2 + (2\\beta - 1)\\Omega^2$$\n得到的三项递推关系为：\n$$(1 + \\beta \\Omega^2) u_{n+2} - (2 + (2\\beta - 1)\\Omega^2) u_{n+1} + (1 + \\beta \\Omega^2) u_n = 0$$\n为了匹配问题中给出的形式 $u_{n+1} - 2\\cos(\\Omega_{\\mathrm{num}})\\, u_n + u_{n-1} = 0$，我们将下标减一并除以因子 $(1 + \\beta \\Omega^2)$：\n$$u_{n+1} - \\frac{2 + (2\\beta - 1)\\Omega^2}{1 + \\beta \\Omega^2} u_n + u_{n-1} = 0$$\n通过比较，我们确定：\n$$2\\cos(\\Omega_{\\mathrm{num}}) = \\frac{2 + (2\\beta - 1)\\Omega^2}{1 + \\beta \\Omega^2}$$\n$$\\cos(\\Omega_{\\mathrm{num}}) = \\frac{1 + (\\beta - 1/2)\\Omega^2}{1 + \\beta \\Omega^2}$$\n\n为了分析色散特性，我们对小 $\\Omega$ 进行泰勒级数展开。左侧 (LHS) 展开为：\n$$\\cos(\\Omega_{\\mathrm{num}}) = 1 - \\frac{\\Omega_{\\mathrm{num}}^2}{2!} + \\frac{\\Omega_{\\mathrm{num}}^4}{4!} - O(\\Omega_{\\mathrm{num}}^6)$$\n右侧 (RHS) 使用几何级数 $(1+x)^{-1} = 1 - x + x^2 - \\dots$ 展开：\n$$\\text{RHS} = \\left(1 + \\left(\\beta - \\frac{1}{2}\\right)\\Omega^2\\right) (1 + \\beta\\Omega^2)^{-1} = \\left(1 + \\left(\\beta - \\frac{1}{2}\\right)\\Omega^2\\right) \\left(1 - \\beta\\Omega^2 + \\beta^2\\Omega^4 - O(\\Omega^6)\\right)$$\n$$\\text{RHS} = 1 - \\beta\\Omega^2 + \\beta^2\\Omega^4 + \\left(\\beta - \\frac{1}{2}\\right)\\Omega^2 - \\beta\\left(\\beta - \\frac{1}{2}\\right)\\Omega^4 + O(\\Omega^6)$$\n$$\\text{RHS} = 1 + \\left(-\\beta + \\beta - \\frac{1}{2}\\right)\\Omega^2 + \\left(\\beta^2 - \\beta^2 + \\frac{\\beta}{2}\\right)\\Omega^4 + O(\\Omega^6)$$\n$$\\text{RHS} = 1 - \\frac{1}{2}\\Omega^2 + \\frac{\\beta}{2}\\Omega^4 + O(\\Omega^6)$$\n\n令两个级数展开式相等：\n$$1 - \\frac{\\Omega_{\\mathrm{num}}^2}{2} + \\frac{\\Omega_{\\mathrm{num}}^4}{24} - \\dots = 1 - \\frac{1}{2}\\Omega^2 + \\frac{\\beta}{2}\\Omega^4 + \\dots$$\n比较各项，我们看到在主阶上 $\\Omega_{\\mathrm{num}}^2 \\approx \\Omega^2$，这表明该方法是相容的。让我们找出更精确的关系：\n$$\\frac{\\Omega_{\\mathrm{num}}^2}{2} = \\frac{\\Omega^2}{2} - \\frac{\\beta}{2}\\Omega^4 + \\frac{\\Omega_{\\mathrm{num}}^4}{24} - O(\\Omega^6)$$\n乘以 $2$ 并将 $\\Omega_{\\mathrm{num}}^4 \\approx \\Omega^4$ 代入高阶项：\n$$\\Omega_{\\mathrm{num}}^2 = \\Omega^2 - \\beta\\Omega^4 + \\frac{\\Omega^4}{12} + O(\\Omega^6) = \\Omega^2 + \\left(\\frac{1}{12} - \\beta\\right)\\Omega^4 + O(\\Omega^6)$$\n现在我们取平方根以求得 $\\Omega_{\\mathrm{num}}$：\n$$\\Omega_{\\mathrm{num}} = \\sqrt{\\Omega^2 \\left(1 + \\left(\\frac{1}{12} - \\beta\\right)\\Omega^2 + O(\\Omega^4)\\right)} = \\Omega \\sqrt{1 + \\left(\\frac{1}{12} - \\beta\\right)\\Omega^2 + O(\\Omega^4)}$$\n使用展开式 $\\sqrt{1+x} = 1 + \\frac{1}{2}x + O(x^2)$：\n$$\\Omega_{\\mathrm{num}} = \\Omega \\left(1 + \\frac{1}{2}\\left(\\frac{1}{12} - \\beta\\right)\\Omega^2 + O(\\Omega^4)\\right)$$\n$$\\Omega_{\\mathrm{num}} = \\Omega + \\frac{1}{2}\\left(\\frac{1}{12} - \\beta\\right)\\Omega^3 + O(\\Omega^5)$$\n这是数值频率 $\\Omega_{\\mathrm{num}}$ 关于精确频率参数 $\\Omega$ 的展开式。\n\n数值色散由差值 $\\Omega_{\\mathrm{num}} - \\Omega$ 表征。主色散项是该差值展开式中的第一个非零项。根据我们的结果：\n$$\\Omega_{\\mathrm{num}} - \\Omega = \\frac{1}{2}\\left(\\frac{1}{12} - \\beta\\right)\\Omega^3 + O(\\Omega^5)$$\n为消除该主色散项，其系数必须为零：\n$$\\frac{1}{2}\\left(\\frac{1}{12} - \\beta\\right) = 0 \\implies \\beta = \\frac{1}{12}$$\n\n对周期误差的影响如下。周期误差定义为 $E_T = T_{\\mathrm{num}}/T - 1$。\n$$E_T = \\frac{2\\pi/\\omega_{\\mathrm{num}}}{2\\pi/\\omega} - 1 = \\frac{\\omega}{\\omega_{\\mathrm{num}}} - 1$$\n使用无量纲参数，这等价于：\n$$E_T = \\frac{\\Omega}{\\Omega_{\\mathrm{num}}} - 1$$\n使用我们关于 $\\Omega_{\\mathrm{num}}$ 的展开式：\n$$E_T = \\frac{\\Omega}{\\Omega \\left(1 + \\frac{1}{2}\\left(\\frac{1}{12} - \\beta\\right)\\Omega^2 + O(\\Omega^4)\\right)} - 1$$\n$$E_T = \\left(1 + \\frac{1}{2}\\left(\\frac{1}{12} - \\beta\\right)\\Omega^2 + O(\\Omega^4)\\right)^{-1} - 1$$\n使用展开式 $(1+x)^{-1} = 1-x+O(x^2)$：\n$$E_T = \\left(1 - \\frac{1}{2}\\left(\\frac{1}{12} - \\beta\\right)\\Omega^2 + O(\\Omega^4)\\right) - 1$$\n$$E_T = -\\frac{1}{2}\\left(\\frac{1}{12} - \\beta\\right)\\Omega^2 + O(\\Omega^4)$$\n周期误差中的主阶项是 $\\Omega^2$ 阶，这对应于周期计算的二阶精度方法。通过选择 $\\beta = 1/12$，这个主阶项被消除。周期误差则变为 $O(\\Omega^4)$，这对于小时间步长意味着更高的精度（四阶）。这意味着数值振荡周期将非常接近精确周期。\n\n所需的 $\\beta$ 值为 $1/12$。", "answer": "$$\\boxed{\\frac{1}{12}}$$", "id": "2598012"}, {"introduction": "最后的这项实践旨在连接理论分析与计算实践。你将编写一个程序，以经验方式测量不同纽马克 (Newmark) 方案的精度阶，其中包括我们之前理论分析过的方案。这个过程将使得收敛率等抽象概念变得具体可感，并为你提供验证数值算法理论属性的实践经验。[@problem_id:2598094]", "problem": "考虑由齐次常微分方程 $m \\ddot{u}(t) + c \\dot{u}(t) + k u(t) = 0$ 给出的线性单自由度二阶初值问题，其初始条件为 $u(0) = u_0$ 和 $\\dot{u}(0) = v_0$。使用由 $(\\beta,\\gamma)$ 参数化的 Newmark 单步时间积分格式族，以均匀步长 $\\Delta t$ 随时间推进求解。目标是构建一个经验性测试，通过将 $\\Delta t$ 减半并计算误差范数来验证 Newmark 格式族的理论精度阶。该测试必须基于以下基本依据进行设计：(i) 体现在控制方程 $m \\ddot{u}(t) + c \\dot{u}(t) + k u(t) = 0$ 中的牛顿第二运动定律，以及 (ii) Newmark 格式族作为将 $(u,\\dot{u},\\ddot{u})$ 从时间 $t_n$ 推进到 $t_{n+1} = t_n + \\Delta t$ 的运动学和平衡的双参数离散化的定义。\n\n为了便于测量，设 $m = 1$，$c = 0$，$k = \\omega^2$，其中角频率 $\\omega > 0$ 已知。选择初始条件 $u_0$ 和 $v_0$，使得精确解具有已知的闭式形式。当 $c = 0$ 时，精确解为 $u_{\\text{exact}}(t) = u_0 \\cos(\\omega t) + \\dfrac{v_0}{\\omega} \\sin(\\omega t)$ 和 $\\dot{u}_{\\text{exact}}(t) = -\\omega u_0 \\sin(\\omega t) + v_0 \\cos(\\omega t)$。\n\n您必须实现一个程序，该程序能够：\n- 对于给定的参数对 $(\\beta,\\gamma)$ 和时间步长 $\\Delta t$，使用 Newmark 方法将解推进到一个固定的终止时间 $T$。\n- 针对减半的时间步长 $\\Delta t$, $\\Delta t/2$, $\\Delta t/4$ 和 $\\Delta t/8$ 重复计算。\n- 在每个时间步长下，测量以下数据：\n  1. 在时间点 $t_n = n \\Delta t$（其中 $n = 0,1,\\dots,N$ 且 $N = T/\\Delta t$）的离散时间历程 $\\{u_n\\}_{n=0}^{N}$ 和 $\\{\\dot{u}_n\\}_{n=0}^{N}$。\n  2. 对应的精确值 $\\{u_{\\text{exact}}(t_n)\\}$ 和 $\\{\\dot{u}_{\\text{exact}}(t_n)\\}$。\n  3. 在终止时间 $t_N = T$ 时的绝对误差：$e_u(\\Delta t) = |u_N - u_{\\text{exact}}(T)|$ 和 $e_v(\\Delta t) = |\\dot{u}_N - \\dot{u}_{\\text{exact}}(T)|$。\n  4. （可选）整个时间区间上的时间离散范数，例如时间历程最大误差 $\\max_n |u_n - u_{\\text{exact}}(t_n)|$ 和均方根误差 $\\left(\\dfrac{1}{N+1} \\sum_{n=0}^N |u_n - u_{\\text{exact}}(t_n)|^2\\right)^{1/2}$，尽管这些不会成为最终输出的一部分。\n- 使用测量的终止时间误差，通过比较在连续减半的步长下计算出的误差来估计经验精度阶 $p$。该估计值必须基于连续 $\\Delta t$ 值的误差比率，并且必须对所有可用的连续对 $(\\Delta t,\\Delta t/2)$, $(\\Delta t/2,\\Delta t/4)$ 和 $(\\Delta t/4,\\Delta t/8)$ 的结果进行汇总，从而为位移和速度各得出一个代表性估计值。\n\n测试套件：\n使用以下三个参数集；选择它们是为了探究 Newmark 格式族中不同的精度和稳定性特征：\n\n- 情况 A（无条件稳定，经典二阶）：$\\omega = 2\\pi$, $T = 1$, $u_0 = 1$, $v_0 = 0$, $\\beta = \\dfrac{1}{4}$, $\\gamma = \\dfrac{1}{2}$, 基础时间步长 $\\Delta t_0 = \\dfrac{T}{10}$。\n- 情况 B（条件稳定成员，通常称为线性加速度法，使用足够小的时间步长以确保在测试范围内的稳定性）：$\\omega = \\sqrt{5}$, $T = 1$, $u_0 = 1$, $v_0 = 0$, $\\beta = \\dfrac{1}{6}$, $\\gamma = \\dfrac{1}{2}$, 基础时间步长 $\\Delta t_0 = \\dfrac{T}{10}$。\n- 情况 C（由于 $\\gamma \\neq \\dfrac{1}{2}$ 而具有数值耗散和降阶的无条件稳定）：$\\omega = 2\\pi$, $T = 1$, $u_0 = 1$, $v_0 = 0$, $\\beta = 0.31$, $\\gamma = 0.6$, 基础时间步长 $\\Delta t_0 = \\dfrac{T}{10}$。\n\n对于每种情况，通过将时间步长从基础值 $\\Delta t_0$ 减半至 $\\Delta t_0/8$ 来计算终止时间时位移和速度的经验精度阶，并将三个连续对的估计值汇总为每个物理量的单个代表值。\n\n最终输出格式：\n您的程序应生成单行输出，其中包含按以下顺序排列的 6 个浮点数的列表：$[p^{(A)}_u, p^{(A)}_v, p^{(B)}_u, p^{(B)}_v, p^{(C)}_u, p^{(C)}_v]$，其中 $p^{(X)}_u$ 和 $p^{(X)}_v$ 分别表示情况 $X \\in \\{A,B,C\\}$ 下位移和速度的汇总经验阶。该列表必须打印为用方括号括起来的逗号分隔列表，每个值四舍五入到三位小数。输出中不需要物理单位，因为所报告的量是无量纲的精度阶。", "solution": "该问题要求对 Newmark 时间积分格式族的理论精度阶进行经验性验证。此验证将在线性单自由度（SDOF）系统上执行。\n\nSDOF 系统的控制常微分方程（ODE）是牛顿第二运动定律：\n$$m \\ddot{u}(t) + c \\dot{u}(t) + k u(t) = 0$$\n其初始条件为 $u(0) = u_0$ 和 $\\dot{u}(0) = v_0$。对于此问题，指定的参数为质量 $m=1$、阻尼系数 $c=0$ 和刚度 $k=\\omega^2$，其中 $\\omega > 0$ 是自振角频率。方程简化为无阻尼简谐振子：\n$$ \\ddot{u}(t) + \\omega^2 u(t) = 0 $$\n对于给定的初始条件，其精确解为：\n$$ u_{\\text{exact}}(t) = u_0 \\cos(\\omega t) + \\frac{v_0}{\\omega} \\sin(\\omega t) $$\n$$ \\dot{u}_{\\text{exact}}(t) = -u_0 \\omega \\sin(\\omega t) + v_0 \\cos(\\omega t) $$\n\nNewmark 方法族提供了一种用于近似求解的时间步进算法。系统状态 $(u, \\dot{u}, \\ddot{u})$ 使用以下由 $\\beta$ 和 $\\gamma$ 参数化的运动学更新公式从时间 $t_n$ 推进到 $t_{n+1} = t_n + \\Delta t$：\n$$ u_{n+1} = u_n + \\dot{u}_n \\Delta t + \\left[ \\left(\\frac{1}{2} - \\beta\\right) \\ddot{u}_n + \\beta \\ddot{u}_{n+1} \\right] \\Delta t^2 $$\n$$ \\dot{u}_{n+1} = \\dot{u}_n + \\left[ (1-\\gamma) \\ddot{u}_n + \\gamma \\ddot{u}_{n+1} \\right] \\Delta t $$\n这些方程是隐式的，因为在时间 $t_{n+1}$ 的未知量出现在等式两侧。为了求解它们，我们在时间 $t_{n+1}$ 强制满足控制常微分方程：\n$$ \\ddot{u}_{n+1} + \\omega^2 u_{n+1} = 0 \\implies \\ddot{u}_{n+1} = -\\omega^2 u_{n+1} $$\n这种关系是线性无阻尼系统特有的，并允许直接求解。我们将 $\\ddot{u}_{n+1}$ 的表达式代入位移更新方程：\n$$ u_{n+1} = u_n + \\dot{u}_n \\Delta t + \\left(\\frac{1}{2} - \\beta\\right) \\ddot{u}_n \\Delta t^2 + \\beta (-\\omega^2 u_{n+1}) \\Delta t^2 $$\n现在，我们可以用在时间 $t_n$ 已知的量通过代数方法求解 $u_{n+1}$。整理各项可得：\n$$ u_{n+1} \\left(1 + \\beta \\omega^2 \\Delta t^2\\right) = u_n + \\dot{u}_n \\Delta t + \\left(\\frac{1}{2} - \\beta\\right) \\ddot{u}_n \\Delta t^2 $$\n这就为 $u_{n+1}$ 提供了一个显式公式：\n$$ u_{n+1} = \\frac{1}{1 + \\beta \\omega^2 \\Delta t^2} \\left[ u_n + \\dot{u}_n \\Delta t + \\left(\\frac{1}{2} - \\beta\\right) \\ddot{u}_n \\Delta t^2 \\right] $$\n一旦计算出 $u_{n+1}$，新时间步上的加速度 $\\ddot{u}_{n+1}$ 和速度 $\\dot{u}_{n+1}$ 就可以直接求出：\n$$ \\ddot{u}_{n+1} = -\\omega^2 u_{n+1} $$\n$$ \\dot{u}_{n+1} = \\dot{u}_n + (1 - \\gamma) \\ddot{u}_n \\Delta t + \\gamma \\ddot{u}_{n+1} \\Delta t $$\n时间步进过程从初始条件 $u_0$ 和 $\\dot{u}_0 = v_0$ 开始。初始加速度 $\\ddot{u}_0$ 必须与 $t=0$ 时的控制方程一致：\n$$ \\ddot{u}_0 = -\\omega^2 u_0 $$\n解被迭代推进，直到达到终止时间 $T$。\n\n为确定经验精度阶 $p$，我们分析在固定时间 $T$ 的全局误差如何随时间步长 $\\Delta t$ 变化。对于一个 $p$ 阶方法，误差预计会按 $e(\\Delta t) \\approx C (\\Delta t)^p$ 的规律变化，其中 $C$ 是一个常数。考虑两个不同的步长 $\\Delta t_1$ 和一个减半的步长 $\\Delta t_2 = \\Delta t_1/2$，它们对应误差的比值为：\n$$ \\frac{e(\\Delta t_1)}{e(\\Delta t_2)} \\approx \\frac{C (\\Delta t_1)^p}{C (\\Delta t_2)^p} = \\left(\\frac{\\Delta t_1}{\\Delta t_2}\\right)^p = 2^p $$\n对该比值取以 2 为底的对数，可以估计出 $p$：\n$$ p \\approx \\log_2 \\left( \\frac{e(\\Delta t_1)}{e(\\Delta t_2)} \\right) $$\n问题要求对位移误差 $e_u(\\Delta t) = |u_N - u_{\\text{exact}}(T)|$ 和速度误差 $e_v(\\Delta t) = |\\dot{u}_N - \\dot{u}_{\\text{exact}}(T)|$（其中 $N = T/\\Delta t$）进行此计算。该过程将对一系列减半的时间步长 $\\Delta t_0, \\Delta t_0/2, \\Delta t_0/4, \\Delta t_0/8$ 执行。这提供了三对连续的时间步长，从中计算出三个 $p$ 的估计值。最终报告的精度阶是这三个估计值的算术平均值，从而提供一个更稳健的度量。\n\n该实现将包括一个函数（用于对给定的参数集执行 Newmark 时间积分）、一个函数（用于计算精确解）以及一个主程序（用于协调问题陈述中指定的每个测试用例的误差分析）。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef exact_solution(t, omega, u0, v0):\n    \"\"\"\n    Computes the exact solution for the SDOF system u'' + omega^2 * u = 0.\n    \n    Args:\n        t (float): Time.\n        omega (float): Natural angular frequency.\n        u0 (float): Initial displacement.\n        v0 (float): Initial velocity.\n        \n    Returns:\n        tuple[float, float]: Displacement and velocity at time t.\n    \"\"\"\n    # Defensive check for omega=0, though problem statement guarantees omega > 0.\n    if omega == 0:\n        u_t = u0 + v0 * t\n        v_t = v0\n        return u_t, v_t\n        \n    u_t = u0 * np.cos(omega * t) + (v0 / omega) * np.sin(omega * t)\n    v_t = -u0 * omega * np.sin(omega * t) + v0 * np.cos(omega * t)\n    return u_t, v_t\n\ndef run_newmark_solver(omega, u0, v0, T, beta, gamma, dt):\n    \"\"\"\n    Solves the SDOF system using the Newmark method.\n    \n    Args:\n        omega (float): Natural angular frequency.\n        u0 (float): Initial displacement.\n        v0 (float): Initial velocity.\n        T (float): Final time.\n        beta (float): Newmark parameter beta.\n        gamma (float): Newmark parameter gamma.\n        dt (float): Time step size.\n        \n    Returns:\n        tuple[float, float]: Numerical displacement and velocity at time T.\n    \"\"\"\n    # Ensure number of steps is integer, using round for float precision\n    N = int(round(T / dt))\n    \n    # Initialize displacement, velocity, and acceleration\n    u, v = u0, v0\n    k = omega**2\n    a = -k * u  # Initial acceleration from EOM: m*a + k*u = 0 with m=1\n\n    # Pre-compute constant part of the denominator for efficiency\n    denom = 1.0 + beta * k * dt**2\n\n    # Time integration loop\n    for _ in range(N):\n        # Update displacement using the derived explicit formula for linear systems\n        u_next = (u + v * dt + (0.5 - beta) * a * dt**2) / denom\n        \n        # Update acceleration using the EOM at the next step\n        a_next = -k * u_next\n        \n        # Update velocity using the Newmark velocity update rule\n        v_next = v + (1.0 - gamma) * a * dt + gamma * a_next * dt\n        \n        # Advance the state\n        u, v, a = u_next, v_next, a_next\n        \n    return u, v\n\ndef compute_order_of_accuracy(params):\n    \"\"\"\n    Computes the empirical order of accuracy for a given test case.\n    \n    Args:\n        params (dict): Dictionary of parameters for the test case.\n        \n    Returns:\n        tuple[float, float]: Aggregated empirical order for displacement and velocity.\n    \"\"\"\n    omega = params['omega']\n    T = params['T']\n    u0 = params['u0']\n    v0 = params['v0']\n    beta = params['beta']\n    gamma = params['gamma']\n    dt0 = params['dt0']\n\n    # Get exact solution at the final time T\n    u_exact_T, v_exact_T = exact_solution(T, omega, u0, v0)\n\n    # Define the sequence of time steps\n    dts = [dt0 / (2**i) for i in range(4)]  # dt0, dt0/2, dt0/4, dt0/8\n\n    errors_u = []\n    errors_v = []\n\n    # Compute errors for each time step size\n    for dt in dts:\n        u_N, v_N = run_newmark_solver(omega, u0, v0, T, beta, gamma, dt)\n        errors_u.append(np.abs(u_N - u_exact_T))\n        errors_v.append(np.abs(v_N - v_exact_T))\n\n    orders_u = []\n    orders_v = []\n\n    # Compute order estimates from consecutive error pairs\n    for i in range(3):  # For pairs (dt_i, dt_{i+1})\n        # Handle cases where error is zero to avoid division by zero\n        if errors_u[i+1] > 1e-16: # Use a small tolerance for stability\n            ratio_u = errors_u[i] / errors_u[i+1]\n            orders_u.append(np.log2(ratio_u))\n        \n        if errors_v[i+1] > 1e-16:\n            ratio_v = errors_v[i] / errors_v[i+1]\n            orders_v.append(np.log2(ratio_v))\n            \n    # Aggregate (average) the order estimates. If no valid estimates, return 0.\n    p_u = np.mean(orders_u) if orders_u else 0.0\n    p_v = np.mean(orders_v) if orders_v else 0.0\n\n    return p_u, p_v\n\ndef solve():\n    # Define the test cases from the problem statement.\n    test_cases = [\n        # Case A: Unconditionally stable, 2nd order (Constant Average Acceleration)\n        {\n            'omega': 2.0 * np.pi, 'T': 1.0, 'u0': 1.0, 'v0': 0.0,\n            'beta': 1.0/4.0, 'gamma': 1.0/2.0, 'dt0': 1.0/10.0\n        },\n        # Case B: Conditionally stable, 2nd order (Linear Acceleration Method)\n        {\n            'omega': np.sqrt(5.0), 'T': 1.0, 'u0': 1.0, 'v0': 0.0,\n            'beta': 1.0/6.0, 'gamma': 1.0/2.0, 'dt0': 1.0/10.0\n        },\n        # Case C: Unconditionally stable, 1st order (with numerical dissipation)\n        {\n            'omega': 2.0 * np.pi, 'T': 1.0, 'u0': 1.0, 'v0': 0.0,\n            'beta': 0.31, 'gamma': 0.6, 'dt0': 1.0/10.0\n        },\n    ]\n\n    results = []\n    for case in test_cases:\n        p_u, p_v = compute_order_of_accuracy(case)\n        results.extend([p_u, p_v])\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join([f'{x:.3f}' for x in results])}]\")\n\nsolve()\n```", "id": "2598094"}]}