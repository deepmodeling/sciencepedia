{"hands_on_practices": [{"introduction": "当使用等参单元来模拟弯曲边界时，从参考域到物理域的积分需要一个“缩放因子”——雅可比行列式。这个练习突显了如果忽略或不恰当地简化这个因子会产生的实际误差。通过分析地推导计算边界荷载时的误差，你将深刻体会到雅可比行列式在确保计算精度中的关键作用 [@problem_id:2579730]。", "problem": "考虑有限元方法 (FEM) 中一个二维等参有限元的平面边。该边由一个从参考坐标 $ \\xi \\in [-1,1] $ 出发的二次等参映射表示，其标准二次拉格朗日形函数为 $ L_1(\\xi) = \\frac{\\xi(\\xi-1)}{2} $、$ L_2(\\xi) = 1 - \\xi^2 $ 和 $ L_3(\\xi) = \\frac{\\xi(\\xi+1)}{2} $。物理节点坐标为 $ \\mathbf{x}_1 = (0,0) $、$ \\mathbf{x}_2 = \\left(\\frac{1}{2}, a\\right) $ 和 $ \\mathbf{x}_3 = (1,0) $，其中 $ a \\in \\mathbb{R} $ 是一个控制该边曲率的标量形状参数。一个大小为 $ q $ (每单位平面外厚度) 的均布线荷载作用在此边上；该边传递的总标量荷载为线积分 $ \\int_{\\Gamma} q \\,\\mathrm{d}s $。从等参映射和线积分的定义出发，精确的总荷载等于 $ Q_{\\mathrm{exact}}(a) = \\int_{-1}^{1} q \\, J(\\xi)\\,\\mathrm{d}\\xi $，其中 $ J(\\xi) = \\left\\| \\frac{\\mathrm{d}\\mathbf{r}}{\\mathrm{d}\\xi} \\right\\| $ 是由映射 $ \\mathbf{r}(\\xi) = \\sum_{i=1}^{3} L_i(\\xi)\\,\\mathbf{x}_i $ 导出的线雅可比。\n\n然而，一位工程师应用了一种为直边设计的朴素求积方法：他/她在 $ [-1,1] $ 上使用 $2$点高斯-勒让德求积 (GLQ)，其权重为 $w_1 = w_2 = 1$，节点为 $\\xi_{1,2} = \\pm 1/\\sqrt{3}$，但他/她用常数直边雅可比 $J_0 = \\frac{\\ell_0}{2}$ 替换了真实的雅可比 $J(\\xi)$，其中弦长为 $\\ell_0 = 1$。这产生了朴素估计值 $Q_{\\mathrm{naive}} = q \\sum_{i=1}^{2} w_i J_0$。这种朴素法则忽略了曲率，并且当 $ a \\neq 0 $ 时，会低估总荷载。\n\n从第一性原理出发，推导朴素法则相对于精确曲边积分的相对低估误差的精确表达式，该误差定义为\n$$\n\\varepsilon(a) \\equiv \\frac{Q_{\\mathrm{exact}}(a) - Q_{\\mathrm{naive}}}{Q_{\\mathrm{exact}}(a)}.\n$$\n你的推导必须从等参映射、线雅可比和高斯-勒让德求积法则的定义开始。将最终答案以仅包含 $ a $ 的单个闭式解析表达式的形式给出。不需要进行数值计算，最终表达式中也不应包含单位。", "solution": "该问题已经过验证，被认为是有效的。它在科学上基于有限元方法的原理，是适定的，并提供了所有必要信息，且其表述使用客观、精确的语言。其中不存在矛盾、歧义或事实性错误。因此，我们可以进行推导。\n\n我们的目标是求出相对低估误差，其定义为 $\\varepsilon(a) = \\frac{Q_{\\mathrm{exact}}(a) - Q_{\\mathrm{naive}}}{Q_{\\mathrm{exact}}(a)}$，可表示为 $\\varepsilon(a) = 1 - \\frac{Q_{\\mathrm{naive}}}{Q_{\\mathrm{exact}}(a)}$。我们将从第一性原理出发，推导 $Q_{\\mathrm{naive}}$ 和 $Q_{\\mathrm{exact}}(a)$ 的表达式。\n\n首先，我们计算朴素荷载估计值 $Q_{\\mathrm{naive}}$。该估计基于直边的假设，即雅可比 $J(\\xi)$ 被一个常数值 $J_0$ 替代。该常数雅可比定义为 $J_0 = \\frac{\\ell_0}{2}$，其中 $\\ell_0$ 是边的弦长。弦长是起始节点 $\\mathbf{x}_1 = (0,0)$ 和终止节点 $\\mathbf{x}_3 = (1,0)$ 之间的直线距离。\n$$\n\\ell_0 = \\|\\mathbf{x}_3 - \\mathbf{x}_1\\| = \\|(1,0) - (0,0)\\| = \\sqrt{(1-0)^{2} + (0-0)^{2}} = 1\n$$\n因此，常数雅可比为 $J_0 = \\frac{1}{2}$。朴素荷载使用2点高斯-勒让德求积法则计算，权重为 $w_1 = w_2 = 1$。\n$$\nQ_{\\mathrm{naive}} = q \\sum_{i=1}^{2} w_i J_0 = q(w_1 J_0 + w_2 J_0) = q\\left(1 \\cdot \\frac{1}{2} + 1 \\cdot \\frac{1}{2}\\right) = q\n$$\n\n接下来，我们计算精确荷载 $Q_{\\mathrm{exact}}(a) = \\int_{-1}^{1} q \\, J(\\xi)\\,\\mathrm{d}\\xi$。这需要确定真实的、与位置相关的雅可比 $J(\\xi)$。\n该边的等参映射由 $\\mathbf{r}(\\xi) = \\sum_{i=1}^{3} L_i(\\xi)\\mathbf{x}_i$ 给出。代入给定的拉格朗日形函数 $L_1(\\xi) = \\frac{\\xi(\\xi-1)}{2}$、$L_2(\\xi) = 1 - \\xi^2$、$L_3(\\xi) = \\frac{\\xi(\\xi+1)}{2}$ 和节点坐标 $\\mathbf{x}_1 = (0,0)$、$\\mathbf{x}_2 = \\left(\\frac{1}{2}, a\\right)$、$\\mathbf{x}_3 = (1,0)$：\n$$\n\\mathbf{r}(\\xi) = \\frac{\\xi(\\xi-1)}{2}(0,0) + (1-\\xi^2)\\left(\\frac{1}{2}, a\\right) + \\frac{\\xi(\\xi+1)}{2}(1,0)\n$$\n设 $\\mathbf{r}(\\xi) = (x(\\xi), y(\\xi))$。我们求其分量函数：\n$$\nx(\\xi) = \\left(1-\\xi^2\\right)\\frac{1}{2} + \\frac{\\xi(\\xi+1)}{2} = \\frac{1 - \\xi^2 + \\xi^2 + \\xi}{2} = \\frac{1+\\xi}{2}\n$$\n$$\ny(\\xi) = a(1-\\xi^2)\n$$\n沿映射边的切向量为 $\\frac{\\mathrm{d}\\mathbf{r}}{\\mathrm{d}\\xi} = \\left(\\frac{\\mathrm{d}x}{\\mathrm{d}\\xi}, \\frac{\\mathrm{d}y}{\\mathrm{d}\\xi}\\right)$。\n$$\n\\frac{\\mathrm{d}x}{\\mathrm{d}\\xi} = \\frac{1}{2}\n$$\n$$\n\\frac{\\mathrm{d}y}{\\mathrm{d}\\xi} = -2a\\xi\n$$\n线雅可比 $J(\\xi)$ 是该切向量的模：\n$$\nJ(\\xi) = \\left\\| \\frac{\\mathrm{d}\\mathbf{r}}{\\mathrm{d}\\xi} \\right\\| = \\sqrt{\\left(\\frac{\\mathrm{d}x}{\\mathrm{d}\\xi}\\right)^2 + \\left(\\frac{\\mathrm{d}y}{\\mathrm{d}\\xi}\\right)^2} = \\sqrt{\\left(\\frac{1}{2}\\right)^2 + (-2a\\xi)^2} = \\sqrt{\\frac{1}{4} + 4a^2\\xi^2} = \\frac{1}{2}\\sqrt{1+16a^2\\xi^2}\n$$\n现在我们可以通过对弧长元 $q \\, J(\\xi)\\,\\mathrm{d}\\xi$ 进行积分来计算精确荷载 $Q_{\\mathrm{exact}}(a)$：\n$$\nQ_{\\mathrm{exact}}(a) = \\int_{-1}^{1} q J(\\xi)\\,\\mathrm{d}\\xi = q \\int_{-1}^{1} \\frac{1}{2}\\sqrt{1+16a^2\\xi^2}\\,\\mathrm{d}\\xi\n$$\n被积函数是 $\\xi$ 的偶函数，所以我们可以简化在对称区间 $[-1,1]$ 上的积分：\n$$\nQ_{\\mathrm{exact}}(a) = 2 \\cdot q \\int_{0}^{1} \\frac{1}{2}\\sqrt{1+16a^2\\xi^2}\\,\\mathrm{d}\\xi = q \\int_{0}^{1} \\sqrt{1+16a^2\\xi^2}\\,\\mathrm{d}\\xi\n$$\n为计算该积分，我们使用换元法，令 $u = 4a\\xi$，则 $\\mathrm{d}u = 4a\\,\\mathrm{d}\\xi$。当 $\\xi$ 从 $0$ 到 $1$ 时，$u$ 从 $0$ 到 $4a$。\n$$\nQ_{\\mathrm{exact}}(a) = q \\int_{0}^{4a} \\sqrt{1+u^2} \\frac{\\mathrm{d}u}{4a} = \\frac{q}{4a} \\int_{0}^{4a} \\sqrt{1+u^2}\\,\\mathrm{d}u\n$$\n$\\sqrt{1+u^2}$ 的标准积分是已知的：$\\int \\sqrt{1+u^2}\\,\\mathrm{d}u = \\frac{u}{2}\\sqrt{1+u^2} + \\frac{1}{2}\\arcsinh(u) + C$。\n应用从 $0$ 到 $4a$ 的积分限：\n$$\n\\int_{0}^{4a} \\sqrt{1+u^2}\\,\\mathrm{d}u = \\left[\\frac{u}{2}\\sqrt{1+u^2} + \\frac{1}{2}\\arcsinh(u)\\right]_0^{4a} = \\frac{4a}{2}\\sqrt{1+(4a)^2} + \\frac{1}{2}\\arcsinh(4a) - 0 = 2a\\sqrt{1+16a^2} + \\frac{1}{2}\\arcsinh(4a)\n$$\n将此结果代回 $Q_{\\mathrm{exact}}(a)$ 的表达式中：\n$$\nQ_{\\mathrm{exact}}(a) = \\frac{q}{4a} \\left(2a\\sqrt{1+16a^2} + \\frac{1}{2}\\arcsinh(4a)\\right) = q \\left(\\frac{\\sqrt{1+16a^2}}{2} + \\frac{\\arcsinh(4a)}{8a}\\right)\n$$\n该表达式对 $a \\neq 0$ 有效。对于 $a=0$ 的情况，路径是一条直线，且 $J(\\xi)=1/2$，所以 $Q_{\\mathrm{exact}}(0) = q \\int_{-1}^1 \\frac{1}{2} d\\xi = q$，这与 $Q_{\\mathrm{naive}}$ 相匹配。我们推导的 $Q_{\\mathrm{exact}}(a)$ 表达式在极限 $a \\to 0$ 时正确地得到了这个结果。\n\n最后，我们组合出相对误差 $\\varepsilon(a)$：\n$$\n\\varepsilon(a) = 1 - \\frac{Q_{\\mathrm{naive}}}{Q_{\\mathrm{exact}}(a)} = 1 - \\frac{q}{q \\left(\\frac{\\sqrt{1+16a^2}}{2} + \\frac{\\arcsinh(4a)}{8a}\\right)}\n$$\n化简分母：\n$$\n\\frac{\\sqrt{1+16a^2}}{2} + \\frac{\\arcsinh(4a)}{8a} = \\frac{4a\\sqrt{1+16a^2} + \\arcsinh(4a)}{8a}\n$$\n将此代回 $\\varepsilon(a)$ 的表达式中：\n$$\n\\varepsilon(a) = 1 - \\frac{1}{\\frac{4a\\sqrt{1+16a^2} + \\arcsinh(4a)}{8a}} = 1 - \\frac{8a}{4a\\sqrt{1+16a^2} + \\arcsinh(4a)}\n$$\n此表达式表示了作为形状参数 $a$ 的函数的相对低估误差。", "answer": "$$\n\\boxed{1 - \\frac{8a}{4a\\sqrt{1+16a^2} + \\arcsinh(4a)}}\n$$", "id": "2579730"}, {"introduction": "在理解了雅可比行列式的重要性之后，我们现在来探讨它对有限元方法中最核心的计算——单元刚度矩阵——的影响。这个实践将引导你探索一个根本性的理论问题：对于一个弯曲单元，我们能否使用标准方法来*精确地*积分其刚度矩阵？通过这个分析，你将揭示在等参映射背景下，基于多项式的数值积分方法的一个关键局限性 [@problem_id:2579755]。", "problem": "在有限元法 (FEM) 中，考虑一个二维平面问题，材料为均匀各向同性，因此本构矩阵 $\\mathbf{D}$ 在整个域上是常数。设域 $\\Omega$ 被一个二次等参三角形单元（一个六节点三角形）离散化，该单元的几何形状包含一条弯曲边界。从参考三角形 $\\hat{T}$ 到物理单元 $T$ 的单元映射 $\\mathbf{x}(\\xi,\\eta)$ 由等参插值 $\\mathbf{x}(\\xi,\\eta) = \\sum_{a=1}^{6} N_a(\\xi,\\eta)\\,\\mathbf{x}_a$ 定义，其中 $N_a(\\xi,\\eta)$ 是 $\\hat{T}$ 上的二次形函数，$\\mathbf{x}_a$ 是物理空间中的节点坐标，这些坐标产生了一条真正的弯曲边（因此该映射是非仿射的）。单元刚度矩阵项由下式给出\n$$\nk_{ij} \\;=\\; \\int_{T} \\left(\\nabla_{\\mathbf{x}} N_i\\right)^{\\!T} \\mathbf{D} \\left(\\nabla_{\\mathbf{x}} N_j\\right)\\, \\mathrm{d}\\Omega \\;=\\; \\int_{\\hat{T}} \\left(\\nabla_{\\mathbf{x}} N_i\\right)^{\\!T} \\mathbf{D} \\left(\\nabla_{\\mathbf{x}} N_j\\right)\\, \\det\\mathbf{J}(\\xi,\\eta)\\, \\mathrm{d}\\xi\\,\\mathrm{d}\\eta,\n$$\n其中 $\\mathbf{J}(\\xi,\\eta)$ 是等参映射的雅可比矩阵，且 $\\nabla_{\\mathbf{x}} N_i = \\mathbf{J}(\\xi,\\eta)^{-1}\\nabla_{\\xi,\\eta} N_i$。\n\n一个标准的 $p$ 阶三角形高斯求积法则被定义为对所有总次数最高为 $p$ 的二元多项式都是精确的。对于与二次等参映射一致的任意弯曲几何形状，确定精确积分该二次等参三角形单元刚度矩阵的每一个元素所需的最小求积阶数 $p_{\\min}$。请用解析表达式表示最终答案。如果没有有限的阶数能满足要求，请给出代表此结果的符号。无需四舍五入，也无需单位。", "solution": "该问题要求确定精确积分带有弯曲边界的二次等参三角形单元的刚度矩阵项所需的最小高斯求积阶数 $p_{\\min}$。首先评估问题陈述的有效性。\n\n步骤1：提取已知条件\n- 单元类型：二维、$6$ 节点二次等参三角形。\n- 材料：均匀各向同性，因此本构矩阵 $\\mathbf{D}$ 是常数。\n- 几何形状：该单元有一条真正的弯曲边，意味着等参映射是非仿射的。\n- 等参映射：$\\mathbf{x}(\\xi,\\eta) = \\sum_{a=1}^{6} N_a(\\xi,\\eta)\\,\\mathbf{x}_a$，其中 $N_a$ 是二次形函数，$\\mathbf{x}_a$ 是节点坐标。\n- 刚度矩阵项：$k_{ij} = \\int_{\\hat{T}} \\left(\\nabla_{\\mathbf{x}} N_i\\right)^{\\!T} \\mathbf{D} \\left(\\nabla_{\\mathbfx} N_j\\right)\\, \\det\\mathbf{J}(\\xi,\\eta)\\, \\mathrm{d}\\xi\\,\\mathrm{d}\\eta$。\n- 梯度转换：$\\nabla_{\\mathbf{x}} N_i = \\mathbf{J}(\\xi,\\eta)^{-1}\\nabla_{\\xi,\\eta} N_i$。\n- 求积法则：一个 $p$ 阶的法则对所有总次数最高为 $p$ 的二元多项式都是精确的。\n- 目标：找到精确积分的最小阶数 $p_{\\min}$。\n\n步骤2：使用提取的已知条件进行验证\n该问题在有限元法的背景下定义明确。所有术语，如等参映射、雅可比矩阵和刚度矩阵公式，都是标准且正确的。弯曲单元边界的前提在科学上是合理的，并且是高级有限元应用中的常见情况。该问题是客观、自洽的，并且不违反任何科学或数学原理。这是一个重要但可解的理论问题。\n\n步骤3：结论与行动\n该问题被认为是有效的。将推导解答。\n\n问题的核心是确定参考单元 $\\hat{T}$ 上刚度矩阵表达式中被积函数的性质。被积函数为 $I(\\xi, \\eta) = \\left(\\nabla_{\\mathbf{x}} N_i\\right)^{\\!T} \\mathbf{D} \\left(\\nabla_{\\mathbf{x}} N_j\\right)\\, \\det\\mathbf{J}(\\xi,\\eta)$。高斯求积法则能够精确积分一个函数，当且仅当该函数是一个次数小于或等于该法则阶数的多项式。因此，我们必须确定 $I(\\xi, \\eta)$ 的多项式次数。\n\n1.  形函数及其梯度：\n    对于一个 $6$ 节点二次三角形，形函数 $N_i(\\xi, \\eta)$ 是参考坐标 $(\\xi, \\eta)$ 中总次数为 $2$ 的多项式。因此，它们关于参考坐标的梯度，$\\nabla_{\\xi,\\eta} N_i = \\left( \\frac{\\partial N_i}{\\partial \\xi}, \\frac{\\partial N_i}{\\partial \\eta} \\right)^T$，是其分量为总次数为 $1$ 的多项式的向量。\n\n2.  映射的雅可比矩阵：\n    坐标映射由 $\\mathbf{x}(\\xi, \\eta) = (x(\\xi, \\eta), y(\\xi, \\eta))^T = \\sum_{a=1}^{6} N_a(\\xi, \\eta) \\mathbf{x}_a$ 给出。由于形函数 $N_a$ 是总次数为 $2$ 的多项式，物理坐标 $x(\\xi, \\eta)$ 和 $y(\\xi, \\eta)$ 也同样是总次数为 $2$ 的多项式。\n    此变换的雅可比矩阵为：\n    $$\n    \\mathbf{J}(\\xi, \\eta) =\n    \\begin{pmatrix}\n    \\frac{\\partial x}{\\partial \\xi} & \\frac{\\partial y}{\\partial \\xi} \\\\\n    \\frac{\\partial x}{\\partial \\eta} & \\frac{\\partial y}{\\partial \\eta}\n    \\end{pmatrix}\n    $$\n    由于 $x$ 和 $y$ 是次数为 $2$ 的多项式，雅可比矩阵 $\\mathbf{J}$ 的元素是总次数为 $1$ 的多项式。问题陈述该单元有“真正的弯曲边”，这意味着映射是非仿射的，因此 $\\mathbf{J}$ 的元素不全是常数。\n\n3.  雅可比行列式：\n    雅可比行列式为 $\\det\\mathbf{J} = \\frac{\\partial x}{\\partial \\xi} \\frac{\\partial y}{\\partial \\eta} - \\frac{\\partial y}{\\partial \\xi} \\frac{\\partial x}{\\partial \\eta}$。每一项都是两个次数为 $1$ 的多项式的乘积。因此，$\\det\\mathbf{J}(\\xi, \\eta)$ 是一个总次数为 $2$ 的多项式。由于映射是非仿射的，$\\det\\mathbf{J}$ 不是常数。\n\n4.  物理坐标系中的梯度：\n    形函数关于物理坐标 $\\mathbf{x}$ 的梯度由 $\\nabla_{\\mathbf{x}} N_i = \\mathbf{J}^{-1} \\nabla_{\\xi,\\eta} N_i$ 给出。雅可比矩阵的逆为：\n    $$\n    \\mathbf{J}^{-1} = \\frac{1}{\\det\\mathbf{J}}\n    \\begin{pmatrix}\n    \\frac{\\partial y}{\\partial \\eta} & -\\frac{\\partial y}{\\partial \\xi} \\\\\n    -\\frac{\\partial x}{\\partial \\eta} & \\frac{\\partial x}{\\partial \\xi}\n    \\end{pmatrix}\n    = \\frac{1}{\\det\\mathbf{J}} \\text{adj}(\\mathbf{J})\n    $$\n    伴随矩阵 $\\text{adj}(\\mathbf{J})$ 包含次数为 $1$ 的多项式元素。行列式 $\\det\\mathbf{J}$ 是一个次数为 $2$ 的多项式。因此，$\\mathbf{J}^{-1}$ 的元素是有理函数，具体来说是一个1次多项式与一个2次多项式的比值。\n    梯度 $\\nabla_{\\mathbf{x}} N_i$ 是 $\\mathbf{J}^{-1}$（其元素为有理函数）和 $\\nabla_{\\xi,\\eta} N_i$（其元素为1次多项式）的乘积。因此，$\\nabla_{\\mathbf{x}} N_i$ 的分量是有理函数，其形式为（1次多项式 / 2次多项式）乘以（1次多项式），结果为一个2次多项式与一个2次多项式的比值。\n\n5.  完整的被积函数：\n    现在我们组合出完整的被积函数 $I(\\xi, \\eta)$。项 $\\left(\\nabla_{\\mathbf{x}} N_i\\right)^{\\!T} \\mathbf{D} \\left(\\nabla_{\\mathbf{x}} N_j\\right)$ 涉及 $\\nabla_{\\mathbf{x}} N_i$ 和 $\\nabla_{\\mathbf{x}} N_j$ 的分量的乘积。由于 $\\mathbf{D}$ 是常数，该项是一个标量有理函数。其结构为两个形如（2次多项式 / $\\det\\mathbf{J}$）的项相乘，得到一个4次多项式与 $(\\det\\mathbf{J})^2$ 的比值。\n    完整的被积函数是该项乘以 $\\det\\mathbf{J}$：\n    $$\n    I(\\xi, \\eta) = \\frac{\\text{4次多项式}}{(\\det\\mathbf{J}(\\xi, \\eta))^2} \\times \\det\\mathbf{J}(\\xi, \\eta) = \\frac{\\text{4次多项式}}{\\det\\mathbf{J}(\\xi, \\eta)}\n    $$\n    被积函数是一个有理函数，其中分子是总次数最高为 $4$ 的多项式，分母是总次数为 $2$ 的非常数多项式 $\\det\\mathbf{J}(\\xi, \\eta)$。\n\n6.  关于求积阶数的结论：\n    一个 $p$ 阶的高斯求积法则被定义为对任何总次数最高为 $p$ 的多项式积分是精确的。但通常来说，对于分母不是常数的有理函数，它不是精确的。由于一个真正的弯曲二次等参单元的被积函数是一个有理函数，而不是多项式，因此没有有限阶的高斯求积法则能够精确地积分它。精确积分需要一种能够处理此类有理函数的方法，这超出了基于标准多项式的高斯求积的范围。在此情况下，任何高斯求积的应用都将产生一个近似值，而不是一个精确结果。\n\n因此，精确积分所需的最小求积阶数 $p_{\\min}$ 作为一个有限数是不存在的。这种情况用无穷大表示。", "answer": "$$\\boxed{\\infty}$$", "id": "2579755"}, {"introduction": "最后的这个实践将理论转向实现，聚焦于施加边界条件这一有限元分析中的普遍任务。这个练习要求你编写一个程序，以正确地将在弯曲二次边界上施加的牵引力组装成节点力。通过从第一性原理出发实现整个过程——包括映射、雅可比和法向量计算以及高斯积分——你将巩固你的理解并构建一个实用的、可重用的计算工具 [@problem_id:2579789]。", "problem": "设计并实现一个完整的可运行程序，该程序通过遍历边界边，在位于每条边上的高斯积分点处计算几何形状、法向量和形函数，从而为二维等参二次边界边组装全局边界牵引力向量。目标是根据第一性原理，编码在二阶椭圆边值问题的弱形式中（如有限元法（FEM）中所处理的）出现的边界贡献的组装过程。程序必须从弱形式中的边界项开始，并且除了标准的形函数定义和高斯积分法则外，不得假定任何预先推导的有限元表达式。\n\n您的推导和实现应基于以下基本事实：\n\n- 对全局右端向量的边界牵引力贡献由试函数与给定牵引力在诺伊曼边界上的积分给出。在 Galerkin 设置下，对于每个边界边，这产生单元贡献\n$$\n\\mathbf{f}^{e} = \\int_{\\Gamma_e} \\mathbf{N}^\\top \\, \\bar{\\mathbf{t}} \\, \\mathrm{d}\\Gamma,\n$$\n其中 $\\mathbf{N}$ 是形函数向量，$\\bar{\\mathbf{t}}$ 是单位边界长度上的给定牵引力向量。\n- 对于等参映射，一个二次三节点边界边由一个母坐标 $s \\in [-1,1]$ 参数化，其二次拉格朗日形函数 $N_1(s)$、$N_2(s)$ 和 $N_3(s)$ 分别与 $s=-1$、$s=0$ 和 $s=1$ 处的节点相关联。物理坐标 $(x(s),y(s))$ 满足\n$$\nx(s) = \\sum_{i=1}^3 N_i(s) \\, x_i, \\quad y(s) = \\sum_{i=1}^3 N_i(s) \\, y_i,\n$$\n沿边的切向量为\n$$\n\\mathbf{t}(s) = \\frac{\\mathrm{d}\\mathbf{x}}{\\mathrm{d}s} = \\left[\\frac{\\mathrm{d}x}{\\mathrm{d}s}, \\frac{\\mathrm{d}y}{\\mathrm{d}s}\\right]^\\top = \\sum_{i=1}^3 \\frac{\\mathrm{d}N_i}{\\mathrm{d}s}(s)\\, \\mathbf{x}_i.\n$$\n线映射的几何雅可比是范数 $J_{\\Gamma}(s) = \\lVert \\mathbf{t}(s) \\rVert_2$，通过切向量顺时针旋转定义的单位法向量是\n$$\n\\hat{\\mathbf{n}}(s) = \\frac{1}{\\lVert \\mathbf{t}(s) \\rVert_2}\\begin{bmatrix} t_y(s) \\\\ -t_x(s)\\end{bmatrix}.\n$$\n- 在 $[-1,1]$ 上使用 3 点 高斯-勒让德 节点和权重的高斯积分可以精确积分最高 5 次的多项式。使用 3 点 高斯-勒让德 法则，节点为 $s_1=-\\sqrt{3/5}$、$s_2=0$、$s_3=+\\sqrt{3/5}$，权重为 $w_1=5/9$、$w_2=8/9$、$w_3=5/9$。\n\n您的实现必须对每个边界边遵循以下步骤，然后组装成一个全局向量：\n\n1. 对于每个具有节点坐标 $(x_i,y_i)$（$i=1,2,3$）的边，计算二次线形函数\n$$\nN_1(s) = \\tfrac{1}{2}s(s-1), \\quad N_2(s) = 1 - s^2, \\quad N_3(s) = \\tfrac{1}{2}s(s+1),\n$$\n及其导数\n$$\n\\frac{\\mathrm{d}N_1}{\\mathrm{d}s}(s) = s - \\tfrac{1}{2}, \\quad \\frac{\\mathrm{d}N_2}{\\mathrm{d}s}(s) = -2s, \\quad \\frac{\\mathrm{d}N_3}{\\mathrm{d}s}(s) = s + \\tfrac{1}{2}.\n$$\n2. 在每个权重为 $w_g$ 的高斯点 $s_g$ 处，计算物理点 $(x(s_g),y(s_g))$、切向量 $\\mathbf{t}(s_g)$、雅可比 $J_{\\Gamma}(s_g)=\\lVert \\mathbf{t}(s_g)\\rVert_2$ 和单位法向量 $\\hat{\\mathbf{n}}(s_g) = [t_y,-t_x]^\\top/\\lVert \\mathbf{t}(s_g)\\rVert_2$。\n3. 在高斯点处计算给定的边界荷载。考虑两种荷载类型：\n   - 压力荷载：一个标量压力场 $p(x,y)$，其牵引力为 $\\bar{\\mathbf{t}}(x,y) = p(x,y)\\, \\hat{\\mathbf{n}}(s)$。\n   - 直接牵引力：一个显式给出的向量场 $\\bar{\\mathbf{t}}(x,y)$。\n4. 通过数值积分累加单元荷载，\n$$\n\\mathbf{f}^{e} \\approx \\sum_{g=1}^3 \\left( \\mathbf{N}(s_g)^\\top \\otimes \\mathbf{I}_2 \\right)\\bar{\\mathbf{t}}(x(s_g),y(s_g))\\, J_{\\Gamma}(s_g)\\, w_g,\n$$\n并通过对共享节点的贡献求和来组装到全局向量中。使用自由度排序 $[u_x^{(1)}, u_y^{(1)}, u_x^{(2)}, u_y^{(2)}, \\ldots]$，节点按全局标识符升序排列。\n\n实现该算法并为以下测试套件计算组装好的全局边界牵引力向量。在每个测试中，边以三个节点标识符的列表形式提供，其顺序使得由 $[t_y,-t_x]^\\top/\\lVert \\mathbf{t}\\rVert_2$ 定义的法向量得到一致使用。程序必须在 $[-1,1]$ 上使用 3 点高斯-勒让德积分，并且必须将每个输出分量四舍五入到 8 位小数。\n\n- 测试 1（带压力的曲线加直线边界）：节点为\n  - $1:(x,y)=(1,0)$,\n  - $2:(x,y)=(\\sqrt{2}/2,\\sqrt{2}/2)$,\n  - $3:(x,y)=(0,1)$,\n  - $4:(x,y)=(0,0.5)$,\n  - $5:(x,y)=(0,0)$.\n  边界边为 $[1,2,3]$ 和 $[3,4,5]$。压力场为 $p(x,y)=x+y$。牵引力为 $\\bar{\\mathbf{t}}=p\\,\\hat{\\mathbf{n}}$。\n- 测试 2（带恒定牵引力的直线单位段）：节点为\n  - $1:(x,y)=(0,0)$,\n  - $2:(x,y)=(0.5,0)$,\n  - $3:(x,y)=(1,0)$.\n  边界边为 $[1,2,3]$。牵引力为 $\\bar{\\mathbf{t}}(x,y)=[1,0]^\\top$，对所有 $(x,y)$ 均成立。\n- 测试 3（带恒定压力的二次参数曲线）：节点为\n  - $1:(x,y)=(0,0)$,\n  - $2:(x,y)=(0.5,0.25)$,\n  - $3:(x,y)=(1,1)$.\n  边界边为 $[1,2,3]$。压力为 $p(x,y)=2$。牵引力为 $\\bar{\\mathbf{t}}=p\\,\\hat{\\mathbf{n}}$。\n\n您的程序应生成单行输出，其中包含用方括号括起来的逗号分隔列表形式的结果。每个测试结果必须是一个包含 $2N$ 个浮点数的列表，其中 $N$ 是该测试中的节点数，按节点标识符升序排列，每个节点的组件顺序为 $[F_{x}^{(1)},F_{y}^{(1)},F_{x}^{(2)},F_{y}^{(2)},\\ldots]$。将所有条目四舍五入到 8 位小数。因此，最终输出必须是形如\n`[[...], [...], [...]]`\n的单行，没有多余的空格（例如，`[[a,b],[c,d],[e,f]]`）。条目 $a,b,c,d,e,f$ 是浮点数。必须正好有三个内部列表，每个测试一个，按上面指定的测试 1、2 和 3 的顺序排列。", "solution": "该问题要求设计并实现一个算法，用于在二维有限元分析中计算全局边界牵引力向量。具体情况涉及等参二次边界单元。该过程必须从第一性原理推导。\n\n首先，必须验证问题陈述的有效性。\n按要求逐字提取给定条件。\n- 对全局力向量的单元贡献为 $\\mathbf{f}^{e} = \\int_{\\Gamma_e} \\mathbf{N}^\\top \\, \\bar{\\mathbf{t}} \\, \\mathrm{d}\\Gamma$。\n- 试函数是形函数 $\\mathbf{N} = [N_1, N_2, N_3]$。\n- 给定牵引力为 $\\bar{\\mathbf{t}}$。$\\Gamma_e$ 是边界边。\n- 坐标的等参映射：$x(s) = \\sum_{i=1}^3 N_i(s) \\, x_i, \\quad y(s) = \\sum_{i=1}^3 N_i(s) \\, y_i$。母坐标是 $s \\in [-1,1]$。\n- 二次拉格朗日形函数：$N_1(s) = \\tfrac{1}{2}s(s-1)$, $N_2(s) = 1 - s^2$, $N_3(s) = \\tfrac{1}{2}s(s+1)$。\n- 形函数导数：$\\frac{\\mathrm{d}N_1}{\\mathrm{d}s}(s) = s - \\tfrac{1}{2}$, $\\frac{\\mathrm{d}N_2}{\\mathrm{d}s}(s) = -2s$, $\\frac{\\mathrm{d}N_3}{\\mathrm{d}s}(s) = s + \\tfrac{1}{2}$。\n- 切向量：$\\mathbf{t}(s) = \\frac{\\mathrm{d}\\mathbf{x}}{\\mathrm{d}s} = \\sum_{i=1}^3 \\frac{\\mathrm{d}N_i}{\\mathrm{d}s}(s)\\, \\mathbf{x}_i$。\n- 线雅可比：$J_{\\Gamma}(s) = \\lVert \\mathbf{t}(s) \\rVert_2$。\n- 单位法向量：$\\hat{\\mathbf{n}}(s) = \\frac{1}{\\lVert \\mathbf{t}(s) \\rVert_2}\\begin{bmatrix} t_y(s) \\\\ -t_x(s)\\end{bmatrix}$。\n- 3 点高斯-勒让德积分法则：节点 $s_g \\in \\{-\\sqrt{3/5}, 0, \\sqrt{3/5}\\}$ 和权重 $w_g \\in \\{5/9, 8/9, 5/9\\}$。\n- 荷载类型：压力 $p(x,y)$，其中 $\\bar{\\mathbf{t}}(x,y) = p(x,y)\\, \\hat{\\mathbf{n}}(s)$，以及直接牵引力 $\\bar{\\mathbf{t}}(x,y)$。\n- 提供了具有特定几何形状和荷载的测试用例。\n\n对问题进行有效性评估。它具有科学依据，是有限元法的一个标准应用。它是一个适定问题，提供了明确的目标和实现它所需的所有信息。语言是客观的，数学上是精确的。不存在科学上不健全、不完整或模糊等缺陷。因此，该问题被认为是有效的。\n\n求解过程如下。单个边界边 $\\Gamma_e$ 对全局力向量的贡献由外牵引力所做的虚功的积分表示。对于 Galerkin 公式，虚位移使用与解场相同的形函数进行插值，第 $j$个自由度（DOF）的力向量贡献是第 $j$个形函数与牵引力乘积的积分。\n对于一个二维问题，每个节点 $i$ 有两个自由度，与 $x$ 和 $y$ 方向的位移相关。单元上任意点的位移由节点位移 $\\mathbf{d}_i=[u_x^{(i)}, u_y^{(i)}]^\\top$ 插值得到: $\\mathbf{u}(s) = \\sum_{i=1}^{3} N_i(s) \\mathbf{d}_i$。牵引力 $\\bar{\\mathbf{t}}$ 所做的虚功为 $\\delta W_e = \\int_{\\Gamma_e} \\delta \\mathbf{u}^\\top \\bar{\\mathbf{t}} \\, \\mathrm{d}\\Gamma$。代入 $\\delta \\mathbf{u}$ 的插值，得到 $\\delta W_e = \\sum_{i=1}^{3} \\delta \\mathbf{d}_i^\\top \\int_{\\Gamma_e} N_i(s) \\bar{\\mathbf{t}}(s) \\, \\mathrm{d}\\Gamma$。量 $\\mathbf{f}_i^e = \\int_{\\Gamma_e} N_i(s) \\bar{\\mathbf{t}}(s) \\, \\mathrm{d}\\Gamma$ 是对节点 $i$ 的 $2 \\times 1$ 力向量贡献。完整的单元力向量 $\\mathbf{f}^e$ 是一个 $6 \\times 1$ 的向量，由节点贡献堆叠而成：$\\mathbf{f}^e = [\\mathbf{f}_1^{e\\top}, \\mathbf{f}_2^{e\\top}, \\mathbf{f}_3^{e\\top}]^\\top$。\n\n该积分定义在物理边界边 $\\Gamma_e$ 上。为了计算它，我们进行变量替换，转换到母坐标 $s \\in [-1,1]$。微分弧长元变换为 $\\mathrm{d}\\Gamma = J_{\\Gamma}(s) \\mathrm{d}s$，其中 $J_{\\Gamma}(s)$ 是从母单元到物理单元的映射的雅可比。局部节点 $i$ 的节点力向量变为：\n$$\n\\mathbf{f}_i^e = \\int_{-1}^{1} N_i(s) \\, \\bar{\\mathbf{t}}(s) \\, J_{\\Gamma}(s) \\, \\mathrm{d}s\n$$\n该积分通常无法以闭合形式求解，因此采用数值积分。使用提供的有 $M=3$ 个点 $s_g$ 和权重 $w_g$（$g=1, \\ldots, M$）的高斯积分法则：\n$$\n\\mathbf{f}_i^e \\approx \\sum_{g=1}^{M} w_g \\, N_i(s_g) \\, \\bar{\\mathbf{t}}(s_g) \\, J_{\\Gamma}(s_g)\n$$\n求和是在高斯点上进行的。对于每个高斯点 $s_g$，必须计算以下量：\n1. 形函数 $N_i(s_g)$ 的值及其关于母坐标的导数 $\\frac{\\mathrm{d}N_i}{\\mathrm{d}s}(s_g)$。\n2. 边上的物理坐标 $\\mathbf{x}(s_g) = [x(s_g), y(s_g)]^\\top$：\n$$\n\\mathbf{x}(s_g) = \\sum_{i=1}^{3} N_i(s_g) \\mathbf{x}_i\n$$\n其中 $\\mathbf{x}_i$ 是单元节点的坐标。\n3. 高斯点处的切向量 $\\mathbf{t}(s_g) = [t_x(s_g), t_y(s_g)]^\\top$：\n$$\n\\mathbf{t}(s_g) = \\frac{\\mathrm{d}\\mathbf{x}}{\\mathrm{d}s}\\bigg|_{s=s_g} = \\sum_{i=1}^{3} \\frac{\\mathrm{d}N_i}{\\mathrm{d}s}(s_g) \\mathbf{x}_i\n$$\n4. 映射的雅可比 $J_{\\Gamma}(s_g)$，即切向量的大小：\n$$\nJ_{\\Gamma}(s_g) = \\lVert \\mathbf{t}(s_g) \\rVert_2 = \\sqrt{t_x(s_g)^2 + t_y(s_g)^2}\n$$\n5. 向外的单位法向量 $\\hat{\\mathbf{n}}(s_g)$。按规定，这是通过切向量的顺时针旋转得到的：\n$$\n\\hat{\\mathbf{n}}(s_g) = \\frac{1}{J_{\\Gamma}(s_g)} \\begin{bmatrix} t_y(s_g) \\\\ -t_x(s_g) \\end{bmatrix}\n$$\n6. 物理点 $\\mathbf{x}(s_g)$ 处的给定牵引力向量 $\\bar{\\mathbf{t}}(s_g)$。如果荷载是压力 $p(x,y)$，则牵引力垂直于表面：$\\bar{\\mathbf{t}}(s_g) = p(\\mathbf{x}(s_g)) \\hat{\\mathbf{n}}(s_g)$。\n注意，对于压力荷载，力的计算得以简化。项 $\\bar{\\mathbf{t}}(s_g) J_{\\Gamma}(s_g)$ 变为 $p(\\mathbf{x}(s_g)) \\hat{\\mathbf{n}}(s_g) J_{\\Gamma}(s_g)$。代入 $\\hat{\\mathbf{n}}(s_g)$ 的表达式，雅可比 $J_{\\Gamma}(s_g)$ 被消去：\n$$\n\\mathbf{f}_i^e \\approx \\sum_{g=1}^{M} w_g \\, N_i(s_g) \\, p(\\mathbf{x}(s_g)) \\begin{bmatrix} t_y(s_g) \\\\ -t_x(s_g) \\end{bmatrix}\n$$\n这种简化在计算上是有利的。\n\n在为每个边界边计算单元力向量 $\\mathbf{f}^e$ 后，其分量被组装到全局力向量 $\\mathbf{F}$ 中。这是一个加法过程，由一个从单元的局部节点索引到网格的全局节点标识符的映射来控制。如果单元 $e$ 的局部节点 $i$ 对应于全局节点 $G$，则力向量 $\\mathbf{f}_i^e$ 被加到节点 $G$ 的全局力分量上：$\\mathbf{F}_G \\mathrel{+}= \\mathbf{f}_i^e$。\n\n此过程定义了一个待实现的完整算法。程序将遍历所提供的测试用例。对每个用例，它初始化一个零值的全局力向量。然后，它遍历每个边界边，使用所述的 3 点高斯积分计算相应的单元力向量，并将其组装到全局向量中。最后，全局向量的分量被四舍五入并按规定格式化。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes global boundary traction vectors for 2D isoparametric quadratic elements.\n    \"\"\"\n\n    # 3-point Gauss-Legendre quadrature on [-1, 1]\n    gauss_points = [-np.sqrt(3.0/5.0), 0.0, np.sqrt(3.0/5.0)]\n    gauss_weights = [5.0/9.0, 8.0/9.0, 5.0/9.0]\n\n    def N(s):\n        \"\"\"Quadratic Lagrange shape functions.\"\"\"\n        return np.array([\n            0.5 * s * (s - 1.0),\n            1.0 - s**2,\n            0.5 * s * (s + 1.0)\n        ])\n\n    def dN_ds(s):\n        \"\"\"Derivatives of quadratic Lagrange shape functions.\"\"\"\n        return np.array([\n            s - 0.5,\n            -2.0 * s,\n            s + 0.5\n        ])\n\n    # Define test cases\n    test_cases = [\n        {\n            \"nodes\": {\n                1: np.array([1.0, 0.0]),\n                2: np.array([np.sqrt(2.0)/2.0, np.sqrt(2.0)/2.0]),\n                3: np.array([0.0, 1.0]),\n                4: np.array([0.0, 0.5]),\n                5: np.array([0.0, 0.0]),\n            },\n            \"edges\": [[1, 2, 3], [3, 4, 5]],\n            \"traction_func\": lambda x, y, n_hat: (x + y) * n_hat # Pressure p(x,y)=x+y\n        },\n        {\n            \"nodes\": {\n                1: np.array([0.0, 0.0]),\n                2: np.array([0.5, 0.0]),\n                3: np.array([1.0, 0.0]),\n            },\n            \"edges\": [[1, 2, 3]],\n            \"traction_func\": lambda x, y, n_hat: np.array([1.0, 0.0]) # Constant traction\n        },\n        {\n            \"nodes\": {\n                1: np.array([0.0, 0.0]),\n                2: np.array([0.5, 0.25]),\n                3: np.array([1.0, 1.0]),\n            },\n            \"edges\": [[1, 2, 3]],\n            \"traction_func\": lambda x, y, n_hat: 2.0 * n_hat # Constant pressure p=2\n        }\n    ]\n\n    all_results = []\n\n    for case in test_cases:\n        nodes = case[\"nodes\"]\n        edges = case[\"edges\"]\n        traction_func = case[\"traction_func\"]\n        \n        num_nodes = len(nodes)\n        F_global = np.zeros(num_nodes * 2)\n\n        for edge_nodes_ids in edges:\n            # Get coordinates for the 3 nodes of the current edge\n            coords = np.array([nodes[nid] for nid in edge_nodes_ids])\n            \n            f_elemental = np.zeros(6) # Elemental force vector [fx1, fy1, fx2, fy2, fx3, fy3]\n\n            for s_g, w_g in zip(gauss_points, gauss_weights):\n                # Evaluate shape functions and their derivatives at Gauss point\n                N_g = N(s_g)\n                dN_ds_g = dN_ds(s_g)\n\n                # Compute physical coordinates at Gauss point\n                # xy_g = sum(N_i(sg) * x_i)\n                xy_g = N_g @ coords\n\n                # Compute tangent vector\n                # t_g = sum(dN_i/ds(sg) * x_i)\n                t_g = dN_ds_g @ coords\n                tx, ty = t_g\n\n                # Compute Jacobian\n                J_g = np.linalg.norm(t_g)\n                if J_g == 0:\n                    # Avoid division by zero for degenerate elements, though not expected here\n                    continue\n\n                # Compute unit normal vector\n                n_hat = np.array([ty / J_g, -tx / J_g])\n\n                # Evaluate traction vector at Gauss point\n                t_bar = traction_func(xy_g[0], xy_g[1], n_hat)\n\n                # Accumulate contribution to elemental force vector\n                for i in range(3): # Loop over 3 local nodes\n                    force_contribution = N_g[i] * t_bar * J_g * w_g\n                    f_elemental[2*i] += force_contribution[0]\n                    f_elemental[2*i+1] += force_contribution[1]\n            \n            # Assemble elemental vector into global vector\n            for i in range(3):\n                global_node_id = edge_nodes_ids[i]\n                # Map from global node ID to global vector index (0-based)\n                global_dof_idx = 2 * (global_node_id - 1)\n                F_global[global_dof_idx] += f_elemental[2*i]\n                F_global[global_dof_idx + 1] += f_elemental[2*i + 1]\n\n        # Round results and format\n        result_vector = [round(val, 8) for val in F_global]\n        all_results.append(result_vector)\n\n    # Final print statement in the exact required format\n    # Using str.replace to remove spaces for strict formatting\n    print(str(all_results).replace(\" \", \"\"))\n\nsolve()\n```", "id": "2579789"}]}