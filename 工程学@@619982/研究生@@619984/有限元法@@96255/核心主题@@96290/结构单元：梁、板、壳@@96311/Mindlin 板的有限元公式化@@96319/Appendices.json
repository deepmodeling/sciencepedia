{"hands_on_practices": [{"introduction": "将连续介质力学理论转化为离散的有限元模型，核心在于建立节点自由度与单元内部应变场之间的关系。本练习将指导你完成这一关键步骤，即为四节点四边形（Q4）单元构建应变-位移矩阵（$B$ 矩阵）。通过实践等参映射和形函数的运用，你将亲手构造出连接节点转角和位移到弯曲曲率和横向剪应变的数学桥梁 [@problem_id:2558491]。", "problem": "一个Mindlin–Reissner板单元使用有限元法（FEM）和四节点四边形（Q4）等参插值进行建模。运动学假设为：面内位移随厚度呈线性变化，该变化与转角相关；横向位移与厚度无关。位移场定义为 $u(x,y,z)=-z\\,\\theta_{x}(x,y)$、$v(x,y,z)=-z\\,\\theta_{y}(x,y)$ 和 $w(x,y)$，其中 $\\theta_{x}$ 和 $\\theta_{y}$ 分别是板围绕 $y$ 轴和 $x$ 轴的转角，而 $w$ 是横向挠度。弯曲曲率和横向剪切应变定义为 $\\kappa_{x}=\\partial \\theta_{x}/\\partial x$、$\\kappa_{y}=\\partial \\theta_{y}/\\partial y$、$\\kappa_{xy}=\\partial \\theta_{x}/\\partial y+\\partial \\theta_{y}/\\partial x$、$\\gamma_{xz}=\\partial w/\\partial x-\\theta_{x}$ 和 $\\gamma_{yz}=\\partial w/\\partial y-\\theta_{y}$。\n\n考虑一个覆盖矩形区域的 Q4 单元，其物理坐标 $(x,y)$ 下的节点位于 $(x_{1},y_{1})=(0,0)$、$(x_{2},y_{2})=(2,0)$、$(x_{3},y_{3})=(2,1)$ 和 $(x_{4},y_{4})=(0,1)$。自然坐标为 $(\\xi,\\eta)\\in[-1,1]\\times[-1,1]$。该单元对所有三个场 $(\\theta_{x},\\theta_{y},w)$ 均使用 $(\\xi,\\eta)$ 中的标准双线性等参映射和双线性形函数。\n\n任务：\n1) 为 Q4 单元构建双线性形函数 $N_{i}(\\xi,\\eta)$，$i=1,2,3,4$，并写出插值式 $\\theta_{x}(\\xi,\\eta)=\\sum_{i=1}^{4}N_{i}(\\xi,\\eta)\\,\\theta_{x,i}$、$\\theta_{y}(\\xi,\\eta)=\\sum_{i=1}^{4}N_{i}(\\xi,\\eta)\\,\\theta_{y,i}$ 和 $w(\\xi,\\eta)=\\sum_{i=1}^{4}N_{i}(\\xi,\\eta)\\,w_{i}$。\n2) 使用等参映射，解释关于 $x$ 和 $y$ 的空间导数如何进入弯曲和剪切应变-位移矩阵 $B_{b}$ 和 $B_{s}$。您的解释应将弯曲曲率 $\\kappa_{x}$、$\\kappa_{y}$、$\\kappa_{xy}$ 和横向剪切应变 $\\gamma_{xz}$、$\\gamma_{yz}$ 用关于物理坐标的形函数导数和节点自由度来表示。\n3) 对于节点值 $w_{1}=0$、$w_{2}=2$、$w_{3}=4$、$w_{4}=2$ 和 $\\theta_{x,1}=0$、$\\theta_{x,2}=0.2$、$\\theta_{x,3}=0.4$、$\\theta_{x,4}=0.2$，计算单元中心 $(\\xi,\\eta)=(0,0)$ 处的横向剪切应变 $\\gamma_{xz}$。请以精确数形式表示最终答案。量 $\\gamma_{xz}$ 是无量纲的。", "solution": "所给出的问题陈述是科学上合理的、自洽的且适定的。它概述了 Mindlin 板有限元分析中的一个标准流程，为获得完整解提供了所有必要的定义、几何形状和数据。因此，该问题是有效的。解答根据指定的三个任务构建。\n\n1) 四节点四边形单元 ($Q4$) 在自然坐标系 $(\\xi,\\eta) \\in [-1,1]\\times[-1,1]$ 中使用双线性形函数。问题中的节点编号对应于自然坐标系中的标准逆时针编号，如下所示：节点 $1$ 位于 $(\\xi,\\eta)=(-1,-1)$，节点 $2$ 位于 $(\\xi,\\eta)=(1,-1)$，节点 $3$ 位于 $(\\xi,\\eta)=(1,1)$，节点 $4$ 位于 $(\\xi,\\eta)=(-1,1)$。对于自然坐标为 $(\\xi_i, \\eta_i)$ 的节点 $i$，其形函数的通用形式为 $N_i(\\xi, \\eta) = \\frac{1}{4}(1+\\xi_i\\xi)(1+\\eta_i\\eta)$。\n\n四个形函数的具体形式是：\n$N_{1}(\\xi,\\eta) = \\frac{1}{4}(1 - \\xi)(1 - \\eta)$\n$N_{2}(\\xi,\\eta) = \\frac{1}{4}(1 + \\xi)(1 - \\eta)$\n$N_{3}(\\xi,\\eta) = \\frac{1}{4}(1 + \\xi)(1 + \\eta)$\n$N_{4}(\\xi,\\eta) = \\frac{1}{4}(1 - \\xi)(1 + \\eta)$\n\n位移场（转角 $\\theta_x, \\theta_y$ 和横向挠度 $w$）使用这些形函数从节点自由度插值得到。设节点 $i$ 的节点自由度为 $\\theta_{x,i}$、$\\theta_{y,i}$ 和 $w_i$。插值得到的场由下式给出：\n$\\theta_{x}(\\xi,\\eta) = \\sum_{i=1}^{4}N_{i}(\\xi,\\eta)\\,\\theta_{x,i} = N_{1}\\theta_{x,1} + N_{2}\\theta_{x,2} + N_{3}\\theta_{x,3} + N_{4}\\theta_{x,4}$\n$\\theta_{y}(\\xi,\\eta) = \\sum_{i=1}^{4}N_{i}(\\xi,\\eta)\\,\\theta_{y,i} = N_{1}\\theta_{y,1} + N_{2}\\theta_{y,2} + N_{3}\\theta_{y,3} + N_{4}\\theta_{y,4}$\n$w(\\xi,\\eta) = \\sum_{i=1}^{4}N_{i}(\\xi,\\eta)\\,w_{i} = N_{1}w_{1} + N_{2}w_{2} + N_{3}w_{3} + N_{4}w_{4}$\n\n2) 在等参格式中，物理坐标 $(x,y)$ 使用与位移场相同的形函数进行插值：\n$x(\\xi,\\eta) = \\sum_{i=1}^{4}N_{i}(\\xi,\\eta)\\,x_{i}$\n$y(\\xi,\\eta) = \\sum_{i=1}^{4}N_{i}(\\xi,\\eta)\\,y_{i}$\n\n应变的定义涉及对物理坐标 $(x,y)$ 的导数，但形函数是根据自然坐标 $(\\xi,\\eta)$ 定义的。使用微分链式法则来关联这些导数。该关系通过雅可比矩阵 $J$ 表示：\n$$\n\\begin{pmatrix} \\frac{\\partial}{\\partial \\xi} \\\\ \\frac{\\partial}{\\partial \\eta} \\end{pmatrix} = \\begin{pmatrix} \\frac{\\partial x}{\\partial \\xi} & \\frac{\\partial y}{\\partial \\xi} \\\\ \\frac{\\partial x}{\\partial \\eta} & \\frac{\\partial y}{\\partial \\eta} \\end{pmatrix} \\begin{pmatrix} \\frac{\\partial}{\\partial x} \\\\ \\frac{\\partial}{\\partial y} \\end{pmatrix} = J \\begin{pmatrix} \\frac{\\partial}{\\partial x} \\\\ \\frac{\\partial}{\\partial y} \\end{pmatrix}\n$$\n雅可比矩阵的分量计算如下：$J_{11} = \\frac{\\partial x}{\\partial \\xi} = \\sum_{i=1}^{4}\\frac{\\partial N_i}{\\partial\\xi}x_i$，$J_{12} = \\frac{\\partial y}{\\partial \\xi} = \\sum_{i=1}^{4}\\frac{\\partial N_i}{\\partial\\xi}y_i$，$J_{21} = \\frac{\\partial x}{\\partial \\eta} = \\sum_{i=1}^{4}\\frac{\\partial N_i}{\\partial\\eta}x_i$，$J_{22} = \\frac{\\partial y}{\\partial \\eta} = \\sum_{i=1}^{4}\\frac{\\partial N_i}{\\partial\\eta}y_i$。\n\n为了从自然导数计算物理导数，我们使用逆关系：\n$$\n\\begin{pmatrix} \\frac{\\partial}{\\partial x} \\\\ \\frac{\\partial}{\\partial y} \\end{pmatrix} = J^{-1} \\begin{pmatrix} \\frac{\\partial}{\\partial \\xi} \\\\ \\frac{\\partial}{\\partial \\eta} \\end{pmatrix}\n$$\n对于任意函数 $f(\\xi,\\eta)$，其物理导数为：\n$\\frac{\\partial f}{\\partial x} = J^{-1}_{11}\\frac{\\partial f}{\\partial \\xi} + J^{-1}_{12}\\frac{\\partial f}{\\partial \\eta}$\n$\\frac{\\partial f}{\\partial y} = J^{-1}_{21}\\frac{\\partial f}{\\partial \\xi} + J^{-1}_{22}\\frac{\\partial f}{\\partial \\eta}$\n\n因此，形函数对于物理坐标的导数可求得为：\n$$\n\\begin{pmatrix} \\frac{\\partial N_i}{\\partial x} \\\\ \\frac{\\partial N_i}{\\partial y} \\end{pmatrix} = J^{-1} \\begin{pmatrix} \\frac{\\partial N_i}{\\partial \\xi} \\\\ \\frac{\\partial N_i}{\\partial \\eta} \\end{pmatrix}\n$$\n现在，应变分量可以用节点自由度来表示。设单元的节点位移向量为 $\\mathbf{d}^e = [\\dots, w_i, \\theta_{x,i}, \\theta_{y,i}, \\dots]^T$。\n弯曲曲率为：\n$\\kappa_{x} = \\frac{\\partial \\theta_{x}}{\\partial x} = \\sum_{i=1}^{4}\\frac{\\partial N_i}{\\partial x}\\theta_{x,i}$\n$\\kappa_{y} = \\frac{\\partial \\theta_{y}}{\\partial y} = \\sum_{i=1}^{4}\\frac{\\partial N_i}{\\partial y}\\theta_{y,i}$\n$\\kappa_{xy} = \\frac{\\partial \\theta_{x}}{\\partial y} + \\frac{\\partial \\theta_{y}}{\\partial x} = \\sum_{i=1}^{4}\\left(\\frac{\\partial N_i}{\\partial y}\\theta_{x,i} + \\frac{\\partial N_i}{\\partial x}\\theta_{y,i}\\right)$\n\n这些可以写成矩阵形式 $\\boldsymbol{\\kappa} = \\mathbf{B}_b \\mathbf{d}^e$，其中弯曲应变-位移矩阵 $\\mathbf{B}_b$ 由每个节点 $i$ 的块组成：\n$\\mathbf{B}_{b,i} = \\begin{pmatrix} 0 & \\frac{\\partial N_i}{\\partial x} & 0 \\\\ 0 & 0 & \\frac{\\partial N_i}{\\partial y} \\\\ 0 & \\frac{\\partial N_i}{\\partial y} & \\frac{\\partial N_i}{\\partial x} \\end{pmatrix}$\n\n横向剪切应变为：\n$\\gamma_{xz} = \\frac{\\partial w}{\\partial x} - \\theta_{x} = \\sum_{i=1}^{4}\\frac{\\partial N_i}{\\partial x}w_i - \\sum_{i=1}^{4}N_i\\theta_{x,i} = \\sum_{i=1}^{4}\\left(\\frac{\\partial N_i}{\\partial x}w_i - N_i\\theta_{x,i}\\right)$\n$\\gamma_{yz} = \\frac{\\partial w}{\\partial y} - \\theta_{y} = \\sum_{i=1}^{4}\\frac{\\partial N_i}{\\partial y}w_i - \\sum_{i=1}^{4}N_i\\theta_{y,i} = \\sum_{i=1}^{4}\\left(\\frac{\\partial N_i}{\\partial y}w_i - N_i\\theta_{y,i}\\right)$\n\n这些可以写成矩阵形式 $\\boldsymbol{\\gamma} = \\mathbf{B}_s \\mathbf{d}^e$，其中剪切应变-位移矩阵 $\\mathbf{B}_s$ 由每个节点 $i$ 的块组成：\n$\\mathbf{B}_{s,i} = \\begin{pmatrix} \\frac{\\partial N_i}{\\partial x} & -N_i & 0 \\\\ \\frac{\\partial N_i}{\\partial y} & 0 & -N_i \\end{pmatrix}$\n\n3) 为了计算单元中心 $(\\xi,\\eta)=(0,0)$ 处的横向剪切应变 $\\gamma_{xz}$，我们必须首先计算该点的雅可比矩阵。坐标映射为：\n$x(\\xi,\\eta) = \\frac{1}{4}(1-\\xi)(1-\\eta)(0) + \\frac{1}{4}(1+\\xi)(1-\\eta)(2) + \\frac{1}{4}(1+\\xi)(1+\\eta)(2) + \\frac{1}{4}(1-\\xi)(1+\\eta)(0) = \\frac{1}{2}(1+\\xi)(1-\\eta) + \\frac{1}{2}(1+\\xi)(1+\\eta) = \\frac{1}{2}(1+\\xi)(1-\\eta+1+\\eta) = 1+\\xi$。\n$y(\\xi,\\eta) = \\frac{1}{4}(1-\\xi)(1-\\eta)(0) + \\frac{1}{4}(1+\\xi)(1-\\eta)(0) + \\frac{1}{4}(1+\\xi)(1+\\eta)(1) + \\frac{1}{4}(1-\\xi)(1+\\eta)(1) = \\frac{1}{4}(1+\\eta)(1+\\xi+1-\\xi) = \\frac{1}{2}(1+\\eta)$。\n\n用于雅可比矩阵的导数为：\n$\\frac{\\partial x}{\\partial \\xi} = 1$, $\\frac{\\partial x}{\\partial \\eta} = 0$, $\\frac{\\partial y}{\\partial \\xi} = 0$, $\\frac{\\partial y}{\\partial \\eta} = \\frac{1}{2}$.\n对于这个矩形单元，雅可比矩阵是常数： $J = \\begin{pmatrix} 1 & 0 \\\\ 0 & 1/2 \\end{pmatrix}$.\n逆雅可比矩阵为 $J^{-1} = \\begin{pmatrix} 1 & 0 \\\\ 0 & 2 \\end{pmatrix}$.\n\n剪切应变为 $\\gamma_{xz} = \\frac{\\partial w}{\\partial x} - \\theta_{x}$。我们在 $(\\xi,\\eta)=(0,0)$ 处计算每一项。\n首先，转角场 $\\theta_x$：\n在 $(\\xi,\\eta)=(0,0)$ 处，形函数为 $N_1 = N_2 = N_3 = N_4 = \\frac{1}{4}$。\n$\\theta_x(0,0) = \\sum_{i=1}^{4} N_i(0,0)\\theta_{x,i} = \\frac{1}{4}(\\theta_{x,1} + \\theta_{x,2} + \\theta_{x,3} + \\theta_{x,4})$.\n使用给定的节点值 $\\theta_{x,1}=0$、$\\theta_{x,2}=0.2$、$\\theta_{x,3}=0.4$、$\\theta_{x,4}=0.2$：\n$\\theta_x(0,0) = \\frac{1}{4}(0 + 0.2 + 0.4 + 0.2) = \\frac{0.8}{4} = 0.2$.\n\n接下来，横向挠度的导数 $\\frac{\\partial w}{\\partial x}$：\n$\\frac{\\partial w}{\\partial x} = J^{-1}_{11}\\frac{\\partial w}{\\partial \\xi} + J^{-1}_{12}\\frac{\\partial w}{\\partial \\eta} = (1)\\frac{\\partial w}{\\partial \\xi} + (0)\\frac{\\partial w}{\\partial \\eta} = \\frac{\\partial w}{\\partial \\xi}$.\n我们需要在 $(\\xi,\\eta)=(0,0)$ 处计算 $\\frac{\\partial w}{\\partial \\xi} = \\sum_{i=1}^{4}\\frac{\\partial N_i}{\\partial\\xi}w_i$。\n形函数关于 $\\xi$ 的导数为：\n$\\frac{\\partial N_1}{\\partial\\xi} = -\\frac{1}{4}(1-\\eta)$, $\\frac{\\partial N_2}{\\partial\\xi} = \\frac{1}{4}(1-\\eta)$, $\\frac{\\partial N_3}{\\partial\\xi} = \\frac{1}{4}(1+\\eta)$, $\\frac{\\partial N_4}{\\partial\\xi} = -\\frac{1}{4}(1+\\eta)$.\n在 $(\\xi,\\eta)=(0,0)$ 处求值：\n$\\frac{\\partial N_1}{\\partial\\xi}(0,0) = -\\frac{1}{4}$, $\\frac{\\partial N_2}{\\partial\\xi}(0,0) = \\frac{1}{4}$, $\\frac{\\partial N_3}{\\partial\\xi}(0,0) = \\frac{1}{4}$, $\\frac{\\partial N_4}{\\partial\\xi}(0,0) = -\\frac{1}{4}$.\n因此，\n$\\frac{\\partial w}{\\partial x}(0,0) = \\frac{\\partial w}{\\partial\\xi}(0,0) = (-\\frac{1}{4})w_1 + (\\frac{1}{4})w_2 + (\\frac{1}{4})w_3 + (-\\frac{1}{4})w_4 = \\frac{1}{4}(-w_1+w_2+w_3-w_4)$.\n使用给定的节点值 $w_{1}=0$、$w_{2}=2$、$w_{3}=4$、$w_{4}=2$：\n$\\frac{\\partial w}{\\partial x}(0,0) = \\frac{1}{4}(-0+2+4-2) = \\frac{4}{4} = 1$.\n\n最后，中心处的横向剪切应变 $\\gamma_{xz}$ 为：\n$\\gamma_{xz}(0,0) = \\frac{\\partial w}{\\partial x}(0,0) - \\theta_x(0,0) = 1 - 0.2 = 0.8$.\n结果按要求是一个精确数。", "answer": "$$\n\\boxed{0.8}\n$$", "id": "2558491"}, {"introduction": "在建立了应变-位移关系之后，下一个逻辑步骤是推导单元刚度矩阵 $K_e$，它是连接节点力与节点位移的桥梁。本练习将带你从虚功原理出发，利用之前构建的 $B$ 矩阵和材料本构关系，积分得到完整的单元刚度矩阵。通过这个过程，你不仅能理解弯曲和剪切刚度是如何贡献于总刚度的，还能深入洞察不同自由度（转角与挠度）之间相互耦合的物理机制 [@problem_id:2558477]。", "problem": "考虑一个 Reissner–Mindlin 板模型，用于描述一块厚度为 $t$、剪切模量为 $G$、泊松比为 $\\nu$ 的均质各向同性板。设剪切修正因子为 $\\kappa_s$。中面运动学由横向位移 $w(x,y)$ 以及法线分别绕 $y$ 轴和 $x$ 轴的转角 $\\theta_x(x,y)$ 和 $\\theta_y(x,y)$ 描述。弯曲曲率为 $\\kappa_x=\\partial \\theta_x/\\partial x$、$\\kappa_y=\\partial \\theta_y/\\partial y$ 和 $\\kappa_{xy}=\\partial \\theta_x/\\partial y+\\partial \\theta_y/\\partial x$，横向剪切应变为 $\\gamma_{xz}=\\partial w/\\partial x - \\theta_x$ 和 $\\gamma_{yz}=\\partial w/\\partial y - \\theta_y$。抗弯刚度为 $D=\\dfrac{E t^3}{12(1-\\nu^2)}$，其中 $E$ 是杨氏模量。\n\n使用一个四节点四边形(Q4)等参有限元，每个节点 $i$ 的节点自由度由 $\\{\\theta_{xi},\\theta_{yi},w_i\\}$ 给出。插值函数为 $\\theta_x=\\sum_{i=1}^{4} N_i \\theta_{xi}$、$\\theta_y=\\sum_{i=1}^{4} N_i \\theta_{yi}$ 和 $w=\\sum_{i=1}^{4} N_i w_i$，其中在双单位正方形 $(\\xi,\\eta)\\in[-1,1]^2$ 上的双线性形函数为\n$$\nN_1(\\xi,\\eta)=\\frac{(1-\\xi)(1-\\eta)}{4},\\quad\nN_2(\\xi,\\eta)=\\frac{(1+\\xi)(1-\\eta)}{4},\\quad\nN_3(\\xi,\\eta)=\\frac{(1+\\xi)(1+\\eta)}{4},\\quad\nN_4(\\xi,\\eta)=\\frac{(1-\\xi)(1+\\eta)}{4}.\n$$\n假设一个未扭曲的矩形物理单元，其顶点在 $(x,y)$ 平面内分别为 $(0,0)$、$(a,0)$、$(a,b)$、$(0,b)$，因此等参映射是仿射的，其雅可比矩阵为 $\\mathbf{J}=\\mathrm{diag}(a/2,b/2)$，行列式为 $|\\mathbf{J}|=ab/4$。\n\n任务：\n- 从 Reissner–Mindlin 板的虚功原理和上述运动学定义出发，推导以应变-位移矩阵和本构矩阵表示的单元弯曲-剪切刚度。确定用于各向同性板的弯曲和剪切应变-位移矩阵 $B_b$ 和 $B_s$，以及弯曲和剪切本构矩阵 $D_b$ 和 $D_s$。\n- 解释此 Q4 Mindlin 单元生成的 $12\\times 12$ 单元刚度矩阵的分块结构，说明节点集 $(\\theta_x,\\theta_y,w)$ 之间的耦合关系。\n- 针对所述的特定未扭曲矩形单元，精确计算与自由度对 $(w_1,w_1)$ 相关联的单元刚度项的剪切贡献，即仅由横向剪切产生的（节点1的 $w$，节点1的 $w$）项。将你的最终答案表示为包含 $a$、$b$、$t$、$G$ 和 $\\kappa_s$ 的闭式符号表达式。不要进行四舍五入。\n\n最终答案仅报告此单个刚度项的闭式表达式。", "solution": "所提出的问题陈述是 Reissner–Mindlin 板理论有限元列式中的一个标准练习。它具有科学依据，是适定的，并且为求解提供了所有必要信息。该问题是有效的。我们将按要求进行推导和计算。\n\n单元刚度矩阵 $\\mathbf{K}_e$ 由虚功原理推导而来，对于一个 Reissner–Mindlin 板单元，其内力虚功由下式给出：\n$$\n\\delta W_{int} = \\int_{A_e} \\left( \\delta \\boldsymbol{\\kappa}^T \\mathbf{M} + \\delta \\boldsymbol{\\gamma}_s^T \\mathbf{Q} \\right) dA\n$$\n其中 $A_e$ 是单元的面积，$\\boldsymbol{\\kappa}$ 是弯曲曲率向量，$\\boldsymbol{\\gamma}_s$ 是横向剪切应变向量，$\\mathbf{M}$ 和 $\\mathbf{Q}$ 是相应的应力合力（分别为弯矩和剪力）。\n\n均质、各向同性材料的本构关系为：\n$$\n\\mathbf{M} = \\mathbf{D}_b \\boldsymbol{\\kappa} \\quad \\text{and} \\quad \\mathbf{Q} = \\mathbf{D}_s \\boldsymbol{\\gamma}_s\n$$\n运动学变量（转角 $\\theta_x, \\theta_y$ 和位移 $w$）是使用形函数 $N_i$ 从节点自由度 $\\mathbf{d}_e$ 插值得到的。设该4节点单元的节点自由度向量为 $\\mathbf{d}_e = \\{\\mathbf{d}_1^T, \\mathbf{d}_2^T, \\mathbf{d}_3^T, \\mathbf{d}_4^T\\}^T$，其中 $\\mathbf{d}_i = \\{\\theta_{xi}, \\theta_{yi}, w_i\\}^T$。\n\n应变向量通过应变-位移矩阵 $\\mathbf{B}_b$ 和 $\\mathbf{B}_s$ 与节点自由度相关联：\n$$\n\\boldsymbol{\\kappa} = \\mathbf{B}_b \\mathbf{d}_e \\quad \\text{and} \\quad \\boldsymbol{\\gamma}_s = \\mathbf{B}_s \\mathbf{d}_e\n$$\n\n将这些关系代入虚功表达式，得到：\n$$\n\\delta W_{int} = \\int_{A_e} \\left( (\\mathbf{B}_b \\delta \\mathbf{d}_e)^T \\mathbf{D}_b (\\mathbf{B}_b \\mathbf{d}_e) + (\\mathbf{B}_s \\delta \\mathbf{d}_e)^T \\mathbf{D}_s (\\mathbf{B}_s \\mathbf{d}_e) \\right) dA\n$$\n$$\n\\delta W_{int} = \\delta \\mathbf{d}_e^T \\left( \\int_{A_e} \\mathbf{B}_b^T \\mathbf{D}_b \\mathbf{B}_b dA + \\int_{A_e} \\mathbf{B}_s^T \\mathbf{D}_s \\mathbf{B}_s dA \\right) \\mathbf{d}_e\n$$\n根据定义，$\\delta W_{int} = \\delta \\mathbf{d}_e^T \\mathbf{K}_e \\mathbf{d}_e$。因此，单元刚度矩阵 $\\mathbf{K}_e$ 是抗弯刚度矩阵 $\\mathbf{K}_b$ 和抗剪刚度矩阵 $\\mathbf{K}_s$ 的和：\n$$\n\\mathbf{K}_e = \\mathbf{K}_b + \\mathbf{K}_s = \\int_{A_e} \\mathbf{B}_b^T \\mathbf{D}_b \\mathbf{B}_b dA + \\int_{A_e} \\mathbf{B}_s^T \\mathbf{D}_s \\mathbf{B}_s dA\n$$\n\n首先，我们确定各向同性板的矩阵。弯曲曲率和剪切应变向量定义为：\n$$\n\\boldsymbol{\\kappa} = \\begin{pmatrix} \\kappa_x \\\\ \\kappa_y \\\\ \\kappa_{xy} \\end{pmatrix} = \\begin{pmatrix} \\frac{\\partial \\theta_x}{\\partial x} \\\\ \\frac{\\partial \\theta_y}{\\partial y} \\\\ \\frac{\\partial \\theta_x}{\\partial y} + \\frac{\\partial \\theta_y}{\\partial x} \\end{pmatrix}, \\quad\n\\boldsymbol{\\gamma}_s = \\begin{pmatrix} \\gamma_{xz} \\\\ \\gamma_{yz} \\end{pmatrix} = \\begin{pmatrix} \\frac{\\partial w}{\\partial x} - \\theta_x \\\\ \\frac{\\partial w}{\\partial y} - \\theta_y \\end{pmatrix}\n$$\n弯曲的本构矩阵 $\\mathbf{D}_b$ 是：\n$$\n\\mathbf{D}_b = \\frac{E t^3}{12(1-\\nu^2)} \\begin{pmatrix} 1 & \\nu & 0 \\\\ \\nu & 1 & 0 \\\\ 0 & 0 & \\frac{1-\\nu}{2} \\end{pmatrix} = D \\begin{pmatrix} 1 & \\nu & 0 \\\\ \\nu & 1 & 0 \\\\ 0 & 0 & \\frac{1-\\nu}{2} \\end{pmatrix}\n$$\n剪切的本构矩阵 $\\mathbf{D}_s$ 是：\n$$\n\\mathbf{D}_s = \\kappa_s G t \\begin{pmatrix} 1 & 0 \\\\ 0 & 1 \\end{pmatrix}\n$$\n应变-位移矩阵 $\\mathbf{B}_b$ 和 $\\mathbf{B}_s$ 是通过将运动学定义应用于插值场来构建的。对于第 $i$ 个节点，其分块矩阵 $\\mathbf{B}_{bi}$ 和 $\\mathbf{B}_{si}$ （对应节点自由度顺序 $\\{\\theta_{xi}, \\theta_{yi}, w_i\\}$）为：\n$$\n\\mathbf{B}_{bi} = \\begin{pmatrix} \\frac{\\partial N_i}{\\partial x} & 0 & 0 \\\\ 0 & \\frac{\\partial N_i}{\\partial y} & 0 \\\\ \\frac{\\partial N_i}{\\partial y} & \\frac{\\partial N_i}{\\partial x} & 0 \\end{pmatrix}, \\quad\n\\mathbf{B}_{si} = \\begin{pmatrix} -N_i & 0 & \\frac{\\partial N_i}{\\partial x} \\\\ 0 & -N_i & \\frac{\\partial N_i}{\\partial y} \\end{pmatrix}\n$$\n完整的矩阵 $\\mathbf{B}_b$ 和 $\\mathbf{B}_s$ 是连接各节点贡献的分块矩阵：$\\mathbf{B}_b = [\\mathbf{B}_{b1}, \\mathbf{B}_{b2}, \\mathbf{B}_{b3}, \\mathbf{B}_{b4}]$ 和 $\\mathbf{B}_s = [\\mathbf{B}_{s1}, \\mathbf{B}_{s2}, \\mathbf{B}_{s3}, \\mathbf{B}_{s4}]$。这样就完成了第一个任务。\n\n接下来，我们讨论生成的 $12 \\times 12$ 刚度矩阵 $\\mathbf{K}_e$ 的分块结构。自由度按节点排序为：$\\{\\theta_{x1}, \\theta_{y1}, w_1, \\theta_{x2}, \\dots, w_4\\}$。\n抗弯刚度矩阵 $\\mathbf{K}_b$ 来自于 $\\mathbf{B}_b$。从 $\\mathbf{B}_{bi}$ 的定义可以看出，对应于自由度 $w_i$ 的第三列完全为零。这是因为弯曲曲率 $\\boldsymbol{\\kappa}$ 仅依赖于转角 $\\theta_x$ 和 $\\theta_y$ 的空间导数，而与横向位移 $w$ 无关。因此，抗弯刚度矩阵 $\\mathbf{K}_b$ 仅包含耦合转动自由度 $(\\theta_{xi}, \\theta_{yi})$ 彼此的非零项。在 $\\mathbf{K}_b$ 中，所有耦合任何转角与任何横向位移，或任何两个横向位移的项均为零。\n抗剪刚度矩阵 $\\mathbf{K}_s$ 来自于 $\\mathbf{B}_s$。矩阵 $\\mathbf{B}_{si}$ 对所有三个节点自由度都包含非零项。具体来说，$N_i$ 项耦合了转动自由度，$\\partial N_i/\\partial x$ 和 $\\partial N_i/\\partial y$ 项将横向位移 $w_i$ 分别与转角 $\\theta_{xi}$ 和 $\\theta_{yi}$ 耦合，并且也耦合了横向位移自身。因此，$\\mathbf{K}_s$ 对所有类型的耦合都产生刚度贡献：转动-转动、位移-位移和转动-位移。\n总之，总刚度矩阵 $\\mathbf{K}_e = \\mathbf{K}_b + \\mathbf{K}_s$ 具有以下结构：\n- 耦合转动自由度 $(\\theta, \\theta)$ 的项同时接收来自抗弯刚度和抗剪刚度的贡献。\n- 耦合转动和位移自由度 $(\\theta, w)$ 的项仅接收来自抗剪刚度的贡献。\n- 耦合位移自由度 $(w, w)$ 的项仅接收来自抗剪刚度的贡献。\n最终的刚度矩阵是全填充的，并耦合了所有自由度。\n\n最后，我们计算自由度对 $(w_1, w_1)$ 的刚度项的剪切贡献。这对应于总刚度矩阵 $\\mathbf{K}_e$ 的第3行第3列的项。如前所述，抗弯刚度 $\\mathbf{K}_b$ 对此项的贡献为零。该贡献完全来自 $\\mathbf{K}_s$。\n该项由 $\\mathbf{B}_{s1}^T \\mathbf{D}_s \\mathbf{B}_{s1}$ 积分后的 $(3,3)$ 项给出，因为我们关注的是节点1的对角项。\n$$\n\\mathbf{B}_{s1}^T \\mathbf{D}_s \\mathbf{B}_{s1} = \\kappa_s G t \\begin{pmatrix} -N_1 & 0 \\\\ 0 & -N_1 \\\\ \\frac{\\partial N_1}{\\partial x} & \\frac{\\partial N_1}{\\partial y} \\end{pmatrix} \\begin{pmatrix} 1 & 0 \\\\ 0 & 1 \\end{pmatrix} \\begin{pmatrix} -N_1 & 0 & \\frac{\\partial N_1}{\\partial x} \\\\ 0 & -N_1 & \\frac{\\partial N_1}{\\partial y} \\end{pmatrix} = \\kappa_s G t \\begin{pmatrix} N_1^2 & \\dots & \\dots \\\\ \\dots & N_1^2 & \\dots \\\\ \\dots & \\dots & \\left(\\frac{\\partial N_1}{\\partial x}\\right)^2 + \\left(\\frac{\\partial N_1}{\\partial y}\\right)^2 \\end{pmatrix}\n$$\n所求的刚度分量，我们称之为 $K_{w_1w_1}$，是此矩阵的 $(3,3)$ 分量在单元面积上的积分：\n$$\nK_{w_1w_1} = \\int_{A_e} \\kappa_s G t \\left[ \\left(\\frac{\\partial N_1}{\\partial x}\\right)^2 + \\left(\\frac{\\partial N_1}{\\partial y}\\right)^2 \\right] dA\n$$\n为计算此积分，我们变换到母单元坐标系 $(\\xi, \\eta) \\in [-1, 1] \\times [-1, 1]$。面积微元为 $dA = |\\mathbf{J}| d\\xi d\\eta$，其中 $|\\mathbf{J}| = ab/4$。空间导数使用雅可比矩阵的逆 $\\mathbf{J}^{-1}$进行变换：\n$$\n\\begin{pmatrix} \\frac{\\partial}{\\partial x} \\\\ \\frac{\\partial}{\\partial y} \\end{pmatrix} = \\mathbf{J}^{-1} \\begin{pmatrix} \\frac{\\partial}{\\partial \\xi} \\\\ \\frac{\\partial}{\\partial \\eta} \\end{pmatrix} = \\begin{pmatrix} 2/a & 0 \\\\ 0 & 2/b \\end{pmatrix} \\begin{pmatrix} \\frac{\\partial}{\\partial \\xi} \\\\ \\frac{\\partial}{\\partial \\eta} \\end{pmatrix}\n$$\n因此，$\\frac{\\partial N_1}{\\partial x} = \\frac{2}{a} \\frac{\\partial N_1}{\\partial \\xi}$ 且 $\\frac{\\partial N_1}{\\partial y} = \\frac{2}{b} \\frac{\\partial N_1}{\\partial \\eta}$。\n节点1的形函数为 $N_1(\\xi,\\eta) = \\frac{1}{4}(1-\\xi)(1-\\eta)$。其导数为：\n$$\n\\frac{\\partial N_1}{\\partial \\xi} = -\\frac{1}{4}(1-\\eta), \\quad \\frac{\\partial N_1}{\\partial \\eta} = -\\frac{1}{4}(1-\\xi)\n$$\n将这些代入空间导数表达式中：\n$$\n\\frac{\\partial N_1}{\\partial x} = \\frac{2}{a} \\left(-\\frac{1}{4}(1-\\eta)\\right) = -\\frac{1-\\eta}{2a}\n$$\n$$\n\\frac{\\partial N_1}{\\partial y} = \\frac{2}{b} \\left(-\\frac{1}{4}(1-\\xi)\\right) = -\\frac{1-\\xi}{2b}\n$$\n现在我们构建 $K_{w_1w_1}$ 的积分：\n$$\nK_{w_1w_1} = \\kappa_s G t \\int_{-1}^{1} \\int_{-1}^{1} \\left[ \\left(-\\frac{1-\\eta}{2a}\\right)^2 + \\left(-\\frac{1-\\xi}{2b}\\right)^2 \\right] \\frac{ab}{4} d\\xi d\\eta\n$$\n$$\nK_{w_1w_1} = \\kappa_s G t \\frac{ab}{4} \\int_{-1}^{1} \\int_{-1}^{1} \\left[ \\frac{(1-\\eta)^2}{4a^2} + \\frac{(1-\\xi)^2}{4b^2} \\right] d\\xi d\\eta\n$$\n我们分别计算这两个积分项：\n$$\n\\int_{-1}^{1} \\int_{-1}^{1} \\frac{(1-\\eta)^2}{4a^2} d\\xi d\\eta = \\frac{1}{4a^2} \\left(\\int_{-1}^{1} d\\xi\\right) \\left(\\int_{-1}^{1} (1-\\eta)^2 d\\eta\\right) = \\frac{1}{4a^2} \\left[ \\xi \\right]_{-1}^1 \\left[ -\\frac{(1-\\eta)^3}{3} \\right]_{-1}^1 = \\frac{1}{4a^2} (2) \\left(0 - (-\\frac{8}{3})\\right) = \\frac{1}{4a^2} (2) \\left(\\frac{8}{3}\\right) = \\frac{4}{3a^2}\n$$\n根据对称性，第二项为：\n$$\n\\int_{-1}^{1} \\int_{-1}^{1} \\frac{(1-\\xi)^2}{4b^2} d\\xi d\\eta = \\frac{4}{3b^2}\n$$\n将这些结果代回 $K_{w_1w_1}$ 的表达式中：\n$$\nK_{w_1w_1} = \\kappa_s G t \\frac{ab}{4} \\left( \\frac{4}{3a^2} + \\frac{4}{3b^2} \\right) = \\kappa_s G t \\frac{ab}{4} \\frac{4}{3} \\left( \\frac{1}{a^2} + \\frac{1}{b^2} \\right)\n$$\n$$\nK_{w_1w_1} = \\kappa_s G t \\frac{ab}{3} \\left( \\frac{b^2 + a^2}{a^2 b^2} \\right) = \\kappa_s G t \\frac{a^2 + b^2}{3ab}\n$$\n这就是所求刚度分量的最终符号表达式。", "answer": "$$\n\\boxed{\\kappa_s G t \\frac{a^2 + b^2}{3ab}}\n$$", "id": "2558477"}, {"introduction": "理论公式的正确性最终需要通过其数值实现的可靠性来检验，尤其是在复杂的有限元编程中。本压轴练习将引导你设计和实施一套严谨的单元验证程序，这是保证计算结果准确无误的基石。你将通过编写代码来执行一系列“分片检验”（patch tests），以确保你所构建的单元在刚体运动、常曲率和常剪应变等基本工况下表现正确，从而验证你的运动学公式实现的正确性 [@problem_id:2558528]。", "problem": "您的任务是为 Reissner–Mindlin 板（Mindlin 板）的有限元列式在单元层面设计并实现一个最小但严谨的验证框架。目标是通过单元测试来验证单元级应变-位移矩阵的正确性，这些测试针对运动学和映射，独立于本构参数。您的程序必须是自包含的，并生成一个布尔结果的列表，每个结果指示一个指定的验证项是否通过。\n\n起点和基本基础：采用 Reissner–Mindlin (Mindlin) 运动学，适用于小变形下的中厚板。设主场为横向位移 $w(x,y)$ 以及中面法线分别围绕 $y$ 轴和 $x$ 轴的转角 $\\theta_x(x,y)$ 和 $\\theta_y(x,y)$（角度以弧度为单位）。Reissner–Mindlin 应变度量是弯曲曲率和横向剪切应变，定义如下：\n$$\n\\kappa_x = \\frac{\\partial \\theta_x}{\\partial x},\\quad\n\\kappa_y = \\frac{\\partial \\theta_y}{\\partial y},\\quad\n\\kappa_{xy} = \\frac{\\partial \\theta_x}{\\partial y} + \\frac{\\partial \\theta_y}{\\partial x},\n$$\n$$\n\\gamma_{xz} = \\frac{\\partial w}{\\partial x} - \\theta_x,\\quad\n\\gamma_{yz} = \\frac{\\partial w}{\\partial y} - \\theta_y.\n$$\n采用一个四节点双线性四边形单元，其节点为 $i \\in \\{1,2,3,4\\}$，自然坐标为 $(\\xi,\\eta) \\in [-1,1]^2$，双线性形函数为 $N_i(\\xi,\\eta)$ 及其导数 $\\partial N_i/\\partial \\xi$, $\\partial N_i/\\partial \\eta$。使用从 $(\\xi,\\eta)$ 到具有物理节点坐标 $(x_i,y_i)$ 和 Jacobian 矩阵 $\\mathbf{J}(\\xi,\\eta)$ 的单元的精确等参映射，使得\n$$\n\\begin{bmatrix}\n\\frac{\\partial N_i}{\\partial x} \\\\\n\\frac{\\partial N_i}{\\partial y}\n\\end{bmatrix}\n=\n\\mathbf{J}^{-T}\n\\begin{bmatrix}\n\\frac{\\partial N_i}{\\partial \\xi} \\\\\n\\frac{\\partial N_i}{\\partial \\eta}\n\\end{bmatrix}.\n$$\n在单元层面，使用形函数 $N_i(\\xi,\\eta)$ 对主场进行标准插值，不提供任何专门的减缩/选择积分方案：\n$$\nw^h(\\xi,\\eta) = \\sum_{i=1}^{4} N_i(\\xi,\\eta)\\, w_i,\\quad\n\\theta_x^h(\\xi,\\eta) = \\sum_{i=1}^{4} N_i(\\xi,\\eta)\\, \\theta_{x,i},\\quad\n\\theta_y^h(\\xi,\\eta) = \\sum_{i=1}^{4} N_i(\\xi,\\eta)\\, \\theta_{y,i}.\n$$\n仅从这些定义出发，推导出将节点自由度映射到任意点 $(\\xi,\\eta)$ 处应变度量的单元级应变-位移矩阵：\n- 弯曲矩阵 $B_b(\\xi,\\eta)$，使得\n$$\n\\begin{bmatrix}\n\\kappa_x \\\\ \\kappa_y \\\\ \\kappa_{xy}\n\\end{bmatrix}\n=\nB_b(\\xi,\\eta)\\,\n\\begin{bmatrix}\n\\theta_{x,1} \\\\ \\theta_{y,1} \\\\\n\\theta_{x,2} \\\\ \\theta_{y,2} \\\\\n\\theta_{x,3} \\\\ \\theta_{y,3} \\\\\n\\theta_{x,4} \\\\ \\theta_{y,4}\n\\end{bmatrix}.\n$$\n- 剪切矩阵 $B_s(\\xi,\\eta)$，使得\n$$\n\\begin{bmatrix}\n\\gamma_{xz} \\\\ \\gamma_{yz}\n\\end{bmatrix}\n=\nB_s(\\xi,\\eta)\\,\n\\begin{bmatrix}\nw_1 \\\\ \\theta_{x,1} \\\\ \\theta_{y,1} \\\\\nw_2 \\\\ \\theta_{x,2} \\\\ \\theta_{y,2} \\\\\nw_3 \\\\ \\theta_{x,3} \\\\ \\theta_{y,3} \\\\\nw_4 \\\\ \\theta_{x,4} \\\\ \\theta_{y,4}\n\\end{bmatrix}.\n$$\n\n设计一个验证套件，执行以下逻辑上独立的检查，所有这些检查都源于上述给定的运动学定义。对于每种情况，在每个单元内部的标准张量积 Gauss 点 $(\\xi,\\eta) = (\\pm 1/\\sqrt{3}, \\pm 1/\\sqrt{3})$ 处计算应变，并与解析目标应变值进行比较。\n\n- 单元级刚体倾斜与平移（剪切和弯曲零检验）：选择一个单元并施加一个刚体场，该场结合了恒定的横向位移和均匀的小角度倾斜，即\n  $$\n  w(x,y) = w_0 + p\\,x + q\\,y,\\quad\n  \\theta_x(x,y) = p,\\quad\n  \\theta_y(x,y) = q,\n  $$\n  其中 $w_0$，$p$ 和 $q$ 是常数。证明 $\\kappa_x = \\kappa_y = \\kappa_{xy} = 0$ 和 $\\gamma_{xz} = \\gamma_{yz} = 0$ 精确成立。如果所有 Gauss 点上计算出的所有曲率和剪应变的最大绝对值低于容差 $\\varepsilon$，则验证通过。\n- 恒定曲率弯曲小块（弯曲一致性检验）：选择一个单元。施加\n  $$\n  \\theta_x(x,y) = \\alpha\\,x,\\quad\n  \\theta_y(x,y) = 0,\\quad w(x,y) \\text{ 任意（未使用）},\n  $$\n  其中 $\\alpha$ 为常数。证明在所有 Gauss 点上 $\\kappa_x = \\alpha$，$\\kappa_y = 0$ 和 $\\kappa_{xy} = 0$。如果所有 Gauss 点上与这些目标的偏差的最大绝对值低于 $\\varepsilon$，则验证通过。\n- 恒定剪切小块（剪切一致性检验）：选择一个单元。施加\n  $$\n  w(x,y) = s_x\\,x + s_y\\,y,\\quad\n  \\theta_x(x,y) = 0,\\quad\n  \\theta_y(x,y) = 0,\n  $$\n  其中 $s_x$ 和 $s_y$ 为常数。证明在所有 Gauss 点上 $\\gamma_{xz} = s_x$ 和 $\\gamma_{yz} = s_y$，且所有弯曲曲率均为零。如果所有 Gauss 点上与这些目标的偏差的最大绝对值低于 $\\varepsilon$，则验证通过。\n- 斜映射下的几何不变性（映射鲁棒性检验）：在一个扭斜的凸四边形单元上重复刚体倾斜与平移检验，并验证计算出的应变在容差 $\\varepsilon$ 内仍为数值零。\n- 双单元小块检验（通过局部评估的单元间一致性）：将两个单元平铺成一个覆盖矩形的小块，在两个单元上一致地设置刚体倾斜与平移场，并验证两个单元中的每个 Gauss 点产生的弯曲曲率和剪切应变在容差 $\\varepsilon$ 内都等于零。\n\n测试套件规范。您的程序应使用以下具体参数值实现上述检查：\n- 容差: $\\varepsilon = 10^{-12}$。\n- Gauss 点: $(\\xi,\\eta) \\in \\{(-1/\\sqrt{3},-1/\\sqrt{3}), (-1/\\sqrt{3},+1/\\sqrt{3}), (+1/\\sqrt{3},-1/\\sqrt{3}), (+1/\\sqrt{3},+1/\\sqrt{3})\\}$。\n- 单元几何形状：\n  - 矩形单元 $\\mathcal{E}_R$，节点 $(x_i,y_i)$ 按逆时针顺序排列：$(0,0)$, $(2,0)$, $(2,1)$, $(0,1)$。\n  - 扭斜四边形单元 $\\mathcal{E}_S$，节点为：$(0,0)$, $(1.8,0.2)$, $(2.1,1.0)$, $(0,1.0)$。\n  - 双单元小块 $\\mathcal{P}$，由节点为 $(0,0)$, $(1,0)$, $(1,1)$, $(0,1)$ 的单元 $\\mathcal{E}_{L}$ 和节点为 $(1,0)$, $(2,0)$, $(2,1)$, $(1,1)$ 的单元 $\\mathcal{E}_{R}$ 组成。\n- 场参数：\n  - 刚体：$w_0 = 0.1$, $p = 0.25$, $q = -0.4$。\n  - 恒定曲率：$\\alpha = 0.75$。\n  - 恒定剪切：$s_x = 0.3$, $s_y = -0.5$。\n\n您的程序必须：\n- 直接从基本运动学和使用双线性形函数的等参映射构建 $B_b(\\xi,\\eta)$ 和 $B_s(\\xi,\\eta)$，除了通过 $\\mathbf{J}^{-T}$ 进行的标准导数变换外，不硬编码任何快捷公式。\n- 对于每个测试用例，通过在单元节点处评估指定的场来组装节点自由度。\n- 在所有 Gauss 点评估应变，并根据该测试的解析目标进行检查。\n- 按下面列出的顺序为每个测试用例返回一个布尔值，当且仅当测试在容差 $\\varepsilon$ 内通过时，值为 true：\n  1. 在 $\\mathcal{E}_R$ 上的刚体检验。\n  2. 在 $\\mathcal{E}_S$ 上的扭斜刚体检验。\n  3. 在 $\\mathcal{E}_R$ 上使用指定 $\\alpha$ 的恒定曲率检验。\n  4. 在 $\\mathcal{E}_R$ 上使用指定 $s_x$ 和 $s_y$ 的恒定剪切检验。\n  5. 在 $\\mathcal{P}$ 上的双单元小块刚体检验。\n\n最终输出格式：您的程序应生成一行输出，其中包含一个用方括号括起来的逗号分隔列表的结果（例如，“[True,False,True,True,False]”），其中每个条目是一个首字母大写的 Python 布尔值。不应打印任何其他文本。\n\n角度单位：所有旋转量均使用弧度。输出中不需要物理单位。", "solution": "所提出的问题是要求为四节点双线性四边形 Reissner-Mindlin 板理论有限元构建并实现一个验证套件。该验证必须通过执行一系列基于基本原理的测试，来确认单元运动学公式的正确性。此问题是有效的、科学上合理的且适定的。它提供了进行求解所需的所有必要定义、数据和参数。\n\n解决方案将基于以下原则进行开发：\n\n1.  **Reissner-Mindlin 板运动学**：该公式始于 Reissner-Mindlin 理论的核心运动学假设。应变度量为弯曲曲率 $\\boldsymbol{\\kappa} = [\\kappa_x, \\kappa_y, \\kappa_{xy}]^T$ 和横向剪切应变 $\\boldsymbol{\\gamma} = [\\gamma_{xz}, \\gamma_{yz}]^T$。这些应变根据问题陈述中指定的横向位移 $w$ 和转角 $\\theta_x$、$\\theta_y$ 的导数定义：\n    $$\n    \\kappa_x = \\frac{\\partial \\theta_x}{\\partial x}, \\quad \\kappa_y = \\frac{\\partial \\theta_y}{\\partial y}, \\quad \\kappa_{xy} = \\frac{\\partial \\theta_x}{\\partial y} + \\frac{\\partial \\theta_y}{\\partial x}\n    $$\n    $$\n    \\gamma_{xz} = \\frac{\\partial w}{\\partial x} - \\theta_x, \\quad \\gamma_{yz} = \\frac{\\partial w}{\\partial y} - \\theta_y\n    $$\n\n2.  **等参有限元离散化**：连续场（$w, \\theta_x, \\theta_y$）在一个四节点四边形单元上使用标准双线性形函数 $N_i(\\xi, \\eta)$ 进行近似，其中 $(\\xi, \\eta) \\in [-1, 1]^2$ 是父单元的自然坐标。对于每个场 $u$，其近似 $u^h$ 由 $u^h(\\xi, \\eta) = \\sum_{i=1}^4 N_i(\\xi, \\eta) u_i$ 给出，其中 $u_i$ 是场的节点值。对于从 $(\\xi, \\eta) = (-1, -1)$ 开始的逆时针标准节点排序，形函数为：\n    $$\n    N_i(\\xi, \\eta) = \\frac{1}{4}(1 + \\xi_i \\xi)(1 + \\eta_i \\eta)\n    $$\n    其中 $(\\xi_i, \\eta_i)$ 是节点 $i$ 的自然坐标。\n\n3.  **应变-位移矩阵（$B$-矩阵）**：通过将离散场近似代入运动学方程，我们推导出某点处的应变与单元节点自由度之间的代数关系。这种关系通过应变-位移矩阵 $B_b$ 和 $B_s$ 来表达。\n\n    对于弯曲，节点自由度是转角 $\\mathbf{d}_\\theta = [\\theta_{x,1}, \\theta_{y,1}, \\dots, \\theta_{x,4}, \\theta_{y,4}]^T$。曲率为：\n    $$\n    \\begin{bmatrix} \\kappa_x \\\\ \\kappa_y \\\\ \\kappa_{xy} \\end{bmatrix} = \\sum_{i=1}^4 \\begin{bmatrix} \\frac{\\partial N_i}{\\partial x} & 0 \\\\ 0 & \\frac{\\partial N_i}{\\partial y} \\\\ \\frac{\\partial N_i}{\\partial y} & \\frac{\\partial N_i}{\\partial x} \\end{bmatrix} \\begin{bmatrix} \\theta_{x,i} \\\\ \\theta_{y,i} \\end{bmatrix} = B_b \\mathbf{d}_\\theta\n    $$\n    矩阵 $B_b$ 是一个 $3 \\times 8$ 的矩阵，由 4 个节点的 $3 \\times 2$ 块拼接而成。\n\n    对于剪切，节点自由度是 $\\mathbf{d} = [w_1, \\theta_{x,1}, \\theta_{y,1}, \\dots, w_4, \\theta_{x,4}, \\theta_{y,4}]^T$。剪切应变为：\n    $$\n    \\begin{bmatrix} \\gamma_{xz} \\\\ \\gamma_{yz} \\end{bmatrix} = \\sum_{i=1}^4 \\begin{bmatrix} \\frac{\\partial N_i}{\\partial x} & -N_i & 0 \\\\ \\frac{\\partial N_i}{\\partial y} & 0 & -N_i \\end{bmatrix} \\begin{bmatrix} w_i \\\\ \\theta_{x,i} \\\\ \\theta_{y,i} \\end{bmatrix} = B_s \\mathbf{d}\n    $$\n    矩阵 $B_s$ 是一个 $2 \\times 12$ 的矩阵，由 4 个节点的 $2 \\times 3$ 块拼接而成。\n\n4.  **通过 Jacobian 矩阵进行坐标变换**：形函数导数很自然地是关于 $(\\xi, \\eta)$ 计算的，但应变定义需要关于物理坐标 $(x, y)$ 的导数。这种变换是使用等参映射 $x(\\xi, \\eta) = \\sum N_i x_i$，$y(\\xi, \\eta) = \\sum N_i y_i$ 的 Jacobian 矩阵实现的。根据问题的定义，Jacobian 矩阵 $\\mathbf{J}$ 通过 $\\nabla_x = \\mathbf{J}^{-T} \\nabla_\\xi$ 关联梯度算子。这个特定的 Jacobian 计算如下：\n    $$\n    \\mathbf{J} = \\begin{bmatrix} \\frac{\\partial x}{\\partial \\xi} & \\frac{\\partial y}{\\partial \\xi} \\\\ \\frac{\\partial x}{\\partial \\eta} & \\frac{\\partial y}{\\partial \\eta} \\end{bmatrix} = \\begin{bmatrix} \\sum_i \\frac{\\partial N_i}{\\partial \\xi} x_i & \\sum_i \\frac{\\partial N_i}{\\partial \\xi} y_i \\\\ \\sum_i \\frac{\\partial N_i}{\\partial \\eta} x_i & \\sum_i \\frac{\\partial N_i}{\\partial \\eta} y_i \\end{bmatrix}\n    $$\n    然后，形函数 $N_i$ 在物理坐标下的导数可以通过以下方式找到：\n    $$\n    \\begin{bmatrix} \\frac{\\partial N_i}{\\partial x} \\\\ \\frac{\\partial N_i}{\\partial y} \\end{bmatrix} = \\mathbf{J}^{-T} \\begin{bmatrix} \\frac{\\partial N_i}{\\partial \\xi} \\\\ \\frac{\\partial N_i}{\\partial \\eta} \\end{bmatrix}\n    $$\n\n5.  **验证原则（小块检验）**：任何有效的有限元的一个基本要求是它能够精确地再现恒定应变状态和刚体模式。指定的检验旨在验证此属性，此条件称为通过小块检验（Patch Test）。双线性单元可以精确表示物理坐标 $x$ 和 $y$ 中任何线性的场。测试用例设计的场要么是常数要么是线性的，确保单元内的插值场与解析场完全相同。因此，计算出的应变必须与精确的解析应变匹配，直至达到机器精度。\n\n    - **刚体运动**：场 $w(x,y) = w_0 + px + qy$, $\\theta_x = p$, $\\theta_y = q$ 对应于刚性平移和旋转。从解析上看，这种状态在任何地方都产生零应变。该检验验证单元公式也产生零应变。\n    - **恒定应变状态**：像 $\\theta_x = \\alpha x$ 这样的线性转动场产生恒定的曲率 $\\kappa_x = \\alpha$。像 $w = s_x x + s_y y$ （转角为零）这样的线性位移场产生恒定的剪切应变 $\\gamma_{xz} = s_x$ 和 $\\gamma_{yz} = s_y$。这些检验验证单元能够精确地再现这些恒定状态。\n    - **几何不变性**：在扭斜单元上重复刚体检验，验证该公式与单元的具体形状无关，这是等参方法的一个关键特征。\n    - **单元间一致性**：双单元小块检验确认当单元组装时，主场的连续性足以确保整个小块上有一致的（在这种情况下为零）应变场。\n\n实现将构建一个 Q4 单元的类，该类封装这些计算。然后一个测试框架将执行五个指定的测试用例，通过定义单元几何形状和解析场，计算节点自由度，使用推导出的 $B$-矩阵在指定的 Gauss 点计算应变，并将结果与容差为 $\\varepsilon=10^{-12}$ 的解析目标进行比较。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\n# from scipy import ... Not needed for this problem.\n\nclass MindlinQ4Element:\n    \"\"\"\n    Implements the kinematic formulation for a 4-node bilinear\n    Reissner-Mindlin plate element.\n    \"\"\"\n\n    def __init__(self, node_coords: np.ndarray):\n        \"\"\"\n        Initializes the element with its physical node coordinates.\n        Args:\n            node_coords (np.ndarray): A 4x2 array of node coordinates (x, y),\n                                      ordered counter-clockwise.\n        \"\"\"\n        if node_coords.shape != (4, 2):\n            raise ValueError(\"node_coords must be a 4x2 array.\")\n        self.node_coords = node_coords\n\n    @staticmethod\n    def get_shape_functions(xi: float, eta: float) -> tuple[np.ndarray, np.ndarray]:\n        \"\"\"\n        Computes shape functions and their derivatives in natural coordinates.\n        Node ordering: 1=(-1,-1), 2=(1,-1), 3=(1,1), 4=(-1,1).\n        \n        Args:\n            xi (float): Natural coordinate xi.\n            eta (float): Natural coordinate eta.\n\n        Returns:\n            tuple[np.ndarray, np.ndarray]:\n                - N (1x4 array): Shape function values N_i.\n                - dN_dxi_eta (2x4 array): Natural derivatives [dN/dxi; dN/deta].\n        \"\"\"\n        N = 0.25 * np.array([\n            (1 - xi) * (1 - eta),\n            (1 + xi) * (1 - eta),\n            (1 + xi) * (1 + eta),\n            (1 - xi) * (1 + eta)\n        ])\n\n        dN_dxi = 0.25 * np.array([\n            -(1 - eta),\n            (1 - eta),\n            (1 + eta),\n            -(1 + eta)\n        ])\n\n        dN_deta = 0.25 * np.array([\n            -(1 - xi),\n            -(1 + xi),\n            (1 + xi),\n            (1 - xi)\n        ])\n        \n        return N, np.vstack([dN_dxi, dN_deta])\n\n    def get_B_matrices(self, xi: float, eta: float) -> tuple[np.ndarray, np.ndarray]:\n        \"\"\"\n        Computes the strain-displacement matrices B_b and B_s at a point.\n\n        Args:\n            xi (float): Natural coordinate xi.\n            eta (float): Natural coordinate eta.\n\n        Returns:\n            tuple[np.ndarray, np.ndarray]:\n                - B_b (3x8 array): Bending strain-displacement matrix.\n                - B_s (2x12 array): Shear strain-displacement matrix.\n        \"\"\"\n        N, dN_dxi_eta = self.get_shape_functions(xi, eta)\n\n        # Jacobian matrix J based on the problem's definition\n        # J_ij = sum_k (d(N_k)/d(xi_i) * x_j_k)\n        # J = [dx/dxi dy/dxi; dx/deta dy/deta]\n        J = dN_dxi_eta @ self.node_coords\n        \n        # Cartesian derivatives dN_dx, dN_dy\n        # [dN/dx; dN/dy] = J_inv_T @ [dN/dxi; dN/deta]\n        J_inv_T = np.linalg.inv(J).T\n        dN_dxy = J_inv_T @ dN_dxi_eta\n\n        B_b = np.zeros((3, 8))\n        B_s = np.zeros((2, 12))\n\n        for i in range(4):\n            # Bending matrix Bb (3x8)\n            # Dofs order: [th_x1, th_y1, th_x2, th_y2, ...]\n            B_b[0, 2*i]     = dN_dxy[0, i]  # kappa_x from th_x\n            B_b[1, 2*i + 1] = dN_dxy[1, i]  # kappa_y from th_y\n            B_b[2, 2*i]     = dN_dxy[1, i]  # kappa_xy from th_x\n            B_b[2, 2*i + 1] = dN_dxy[0, i]  # kappa_xy from th_y\n\n            # Shear matrix Bs (2x12) for gamma = dw/dx - theta\n            # Dofs order: [w1, th_x1, th_y1, w2, ...]\n            B_s[0, 3*i]     = dN_dxy[0, i]  # gamma_xz from w\n            B_s[0, 3*i + 1] = -N[i]         # gamma_xz from th_x\n            B_s[1, 3*i]     = dN_dxy[1, i]  # gamma_yz from w\n            B_s[1, 3*i + 2] = -N[i]         # gamma_yz from th_y\n            \n        return B_b, B_s\n\ndef run_test_on_element(element, field_params, test_type, gauss_points, tolerance):\n    \"\"\"\n    Runs a single verification test on a single element.\n    \"\"\"\n    node_coords = element.node_coords\n    \n    # Assemble nodal DOFs\n    w_nodes = np.zeros(4)\n    th_x_nodes = np.zeros(4)\n    th_y_nodes = np.zeros(4)\n    \n    # Define analytical fields and targets based on test type\n    if test_type == 'rigid_body':\n        w0, p, q = field_params['w0'], field_params['p'], field_params['q']\n        for i in range(4):\n            x, y = node_coords[i]\n            w_nodes[i] = w0 + p * x + q * y\n            th_x_nodes[i] = p\n            th_y_nodes[i] = q\n        target_kappa = np.zeros(3)\n        target_gamma = np.zeros(2)\n    elif test_type == 'constant_curvature':\n        alpha = field_params['alpha']\n        for i in range(4):\n            x, y = node_coords[i]\n            th_x_nodes[i] = alpha * x\n            th_y_nodes[i] = 0.0\n        target_kappa = np.array([alpha, 0.0, 0.0])\n        # w is arbitrary, so gamma is not checked in this test\n    elif test_type == 'constant_shear':\n        sx, sy = field_params['sx'], field_params['sy']\n        for i in range(4):\n            x, y = node_coords[i]\n            w_nodes[i] = sx * x + sy * y\n            th_x_nodes[i] = 0.0\n            th_y_nodes[i] = 0.0\n        target_kappa = np.zeros(3)\n        target_gamma = np.array([sx, sy])\n    else:\n        raise ValueError(f\"Unknown test type: {test_type}\")\n\n    # Nodal DOF vectors\n    d_theta = np.ravel(np.column_stack((th_x_nodes, th_y_nodes)))\n    d_full = np.ravel(np.column_stack((w_nodes, th_x_nodes, th_y_nodes)))\n\n    max_abs_error = 0.0\n    \n    for gp in gauss_points:\n        xi, eta = gp\n        B_b, B_s = element.get_B_matrices(xi, eta)\n        \n        # Compute strains\n        kappa_computed = B_b @ d_theta\n        gamma_computed = B_s @ d_full\n        \n        # Check errors\n        if test_type in ['rigid_body', 'constant_shear', 'constant_curvature']:\n             error_kappa = np.abs(kappa_computed - target_kappa)\n             max_abs_error = max(max_abs_error, np.max(error_kappa))\n        \n        if test_type in ['rigid_body', 'constant_shear']:\n            error_gamma = np.abs(gamma_computed - target_gamma)\n            max_abs_error = max(max_abs_error, np.max(error_gamma))\n                 \n    return max_abs_error  tolerance\n\ndef solve():\n    \"\"\"\n    Main function to run the verification suite.\n    \"\"\"\n    # Test suite specification\n    tolerance = 1e-12\n    g = 1.0 / np.sqrt(3.0)\n    gauss_points = [(-g, -g), (-g, g), (g, -g), (g, g)]\n\n    # Element geometries\n    coords_E_R = np.array([[0.0, 0.0], [2.0, 0.0], [2.0, 1.0], [0.0, 1.0]])\n    coords_E_S = np.array([[0.0, 0.0], [1.8, 0.2], [2.1, 1.0], [0.0, 1.0]])\n    coords_E_L_patch = np.array([[0.0, 0.0], [1.0, 0.0], [1.0, 1.0], [0.0, 1.0]])\n    coords_E_R_patch = np.array([[1.0, 0.0], [2.0, 0.0], [2.0, 1.0], [1.0, 1.0]])\n\n    # Field parameters\n    rigid_body_params = {'w0': 0.1, 'p': 0.25, 'q': -0.4}\n    const_curv_params = {'alpha': 0.75}\n    const_shear_params = {'sx': 0.3, 'sy': -0.5}\n\n    results = []\n\n    # 1. Rigid-body test on E_R\n    elem_R = MindlinQ4Element(coords_E_R)\n    res1 = run_test_on_element(elem_R, rigid_body_params, 'rigid_body', gauss_points, tolerance)\n    results.append(res1)\n\n    # 2. Skewed rigid-body test on E_S\n    elem_S = MindlinQ4Element(coords_E_S)\n    res2 = run_test_on_element(elem_S, rigid_body_params, 'rigid_body', gauss_points, tolerance)\n    results.append(res2)\n\n    # 3. Constant curvature test on E_R\n    res3 = run_test_on_element(elem_R, const_curv_params, 'constant_curvature', gauss_points, tolerance)\n    results.append(res3)\n\n    # 4. Constant shear test on E_R\n    res4 = run_test_on_element(elem_R, const_shear_params, 'constant_shear', gauss_points, tolerance)\n    results.append(res4)\n\n    # 5. Two-element patch rigid-body test on P\n    elem_L_patch = MindlinQ4Element(coords_E_L_patch)\n    elem_R_patch = MindlinQ4Element(coords_E_R_patch)\n    \n    pass_L = run_test_on_element(elem_L_patch, rigid_body_params, 'rigid_body', gauss_points, tolerance)\n    pass_R = run_test_on_element(elem_R_patch, rigid_body_params, 'rigid_body', gauss_points, tolerance)\n    results.append(pass_L and pass_R)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n\n```", "id": "2558528"}]}