{"hands_on_practices": [{"introduction": "要真正掌握线性屈曲分析，从基本原理出发推导和求解一个典型问题是不可或缺的第一步。本练习将指导您从零开始，为一个经典的欧拉-伯努利梁手动推导单元刚度矩阵 $K_e$ 和几何刚度矩阵 $K_g$。通过用最简单的离散化（两个单元）来解决一个简支梁的屈曲问题，并将其结果与精确的欧拉临界载荷进行比较，您将深刻理解有限元方法如何逼近连续系统的物理行为，并检验您推导的正确性。[@problem_id:2574102]", "problem": "一根长度为 $L$ 的直等截面细长梁，其抗弯刚度 $EI$ 为常数，剪切变形可忽略不计。梁的两端为简支（铰接）支撑。该梁在两端承受均布轴向预压力 $P$。使用有限元法 (FEM)，将梁离散为两个等长的 Euler–Bernoulli 梁单元，并采用三次 Hermite 插值来描述横向位移场。将此问题视为通过总势能的一致线性化得到的线性特征值屈曲分析。\n\n仅从以下基本原理出发：\n- Euler–Bernoulli 运动学关系 $w(x)$，其中曲率为 $\\kappa(x)=w''(x)$，弯曲应变能为 $\\dfrac{1}{2}\\int_{0}^{L}EI\\,[w''(x)]^{2}\\,\\mathrm{d}x$。\n- 源于轴向力功的二次变分所产生的几何刚度贡献，该贡献产生一个与 $\\dfrac{P}{2}\\int_{0}^{L}[w'(x)]^{2}\\,\\mathrm{d}x$ 成正比的二次型。\n- 标准 Galerkin 法，其中一致单元矩阵是使用 $w$ 的三次 Hermite 形函数从上述能量中导出的。\n\n完成以下任务：\n1. 对于长度为 $L_e$ 的单元，推导其一致的 $4\\times 4$ 单元弹性刚度矩阵 $K_{e}$ 和单位轴向力下的一致 $4\\times 4$ 单元几何刚度矩阵 $K_{g}^{(0)}$。\n2. 针对节点位于 $x=0$、$x=L/2$ 和 $x=L$ 的双单元网格，组装全局弹性刚度矩阵 $K$ 和单位荷载下的全局几何刚度矩阵 $K_{g}^{(0)}$。通过消除两端的横向位移来施加铰接边界条件，同时保持两端转角自由。\n3. 建立广义特征值问题 $K\\,\\boldsymbol{\\phi}=\\lambda\\,K_{g}^{(0)}\\,\\boldsymbol{\\phi}$ 并计算最小特征值 $\\lambda_{\\min}$，该值代表临界荷载 $P_{\\text{cr,FE}}$ 的有限元估计值。\n4. 通过构建无量纲比值 $\\alpha=P_{\\text{cr,FE}}/P_{\\text{cr}}$，将 $P_{\\text{cr,FE}}$ 与经典 Euler 临界荷载 $P_{\\text{cr}}=\\pi^{2}EI/L^{2}$ 进行比较。\n\n以关于比值 $\\alpha$ 的单个闭式解析表达式的形式给出最终答案。无需进行数值取整，最终答案中不应包含任何单位。", "solution": "所述问题具有科学依据、提法恰当、客观且自洽。它是计算结构力学领域的一个典范问题。因此，该问题被认定为有效，并将推导出其解。\n\n分析将按要求分四部分进行：单元矩阵的推导、组装和边界条件的施加、特征值问题的求解以及与精确解的比较。\n\n**1. 单元刚度矩阵和几何刚度矩阵**\n\n一个长度为 $L_e$ 的 Euler-Bernoulli 梁单元由两个节点 $i$ 和 $j$ 定义。每个节点有两个自由度 (DOFs)：横向位移 $w$ 和转角 $\\theta = w'(x)$。单元节点位移向量为 $\\boldsymbol{d}_e = \\begin{pmatrix} w_i & \\theta_i & w_j & \\theta_j \\end{pmatrix}^T$。横向位移场 $w(x)$ 使用三次 Hermite 形函数 $\\boldsymbol{N}(\\xi)$进行插值，其中 $\\xi = x/L_e$ 是从 0 变化到 1 的自然坐标。\n$$ w(x) = \\boldsymbol{N}(\\xi(x)) \\boldsymbol{d}_e $$\n形函数为：\n$N_1(\\xi) = 1 - 3\\xi^2 + 2\\xi^3$\n$N_2(\\xi) = L_e(\\xi - 2\\xi^2 + \\xi^3)$\n$N_3(\\xi) = 3\\xi^2 - 2\\xi^3$\n$N_4(\\xi) = L_e(-\\xi^2 + \\xi^3)$\n\n单元弹性刚度矩阵 $K_e$ 由弯曲应变能 $U_e = \\frac{1}{2} \\int_{0}^{L_e} EI [w''(x)]^2 \\mathrm{d}x$ 导出。用节点自由度表示，可得 $U_e = \\frac{1}{2}\\boldsymbol{d}_e^T K_e \\boldsymbol{d}_e$。矩阵 $K_e$ 由下式给出：\n$$ K_e = \\int_{0}^{L_e} EI \\left(\\frac{d^2\\boldsymbol{N}}{dx^2}\\right)^T \\left(\\frac{d^2\\boldsymbol{N}}{dx^2}\\right) \\mathrm{d}x = \\frac{EI}{L_e^3} \\int_{0}^{1} (\\boldsymbol{N}''(\\xi))^T \\boldsymbol{N}''(\\xi) \\mathrm{d}\\xi $$\n执行积分运算可得到标准的单元弹性刚度矩阵：\n$$ K_e = \\frac{EI}{L_e^3} \\begin{pmatrix} 12 & 6L_e & -12 & 6L_e \\\\ 6L_e & 4L_e^2 & -6L_e & 2L_e^2 \\\\ -12 & -6L_e & 12 & -6L_e \\\\ 6L_e & 2L_e^2 & -6L_e & 4L_e^2 \\end{pmatrix} $$\n单元几何刚度矩阵 $K_g$ 由轴向力 $P$ 所做的功导出，该功由 $W_P = -\\frac{P}{2} \\int_{0}^{L_e} [w'(x)]^2 \\mathrm{d}x$ 给出。我们定义单位轴向力下的几何刚度矩阵 $K_g^{(0)}$，使得 $K_g = P K_g^{(0)}$。其离散形式为 $W_P = -\\frac{1}{2}\\boldsymbol{d}_e^T (P K_g^{(0)}) \\boldsymbol{d}_e$，其中：\n$$ K_g^{(0)} = \\int_{0}^{L_e} \\left(\\frac{d\\boldsymbol{N}}{dx}\\right)^T \\left(\\frac{d\\boldsymbol{N}}{dx}\\right) \\mathrm{d}x = \\frac{1}{L_e} \\int_{0}^{1} (\\boldsymbol{N}'(\\xi))^T \\boldsymbol{N}'(\\xi) \\mathrm{d}\\xi $$\n积分可得标准的单位荷载下的单元几何刚度矩阵：\n$$ K_g^{(0)} = \\frac{1}{30L_e} \\begin{pmatrix} 36 & 3L_e & -36 & 3L_e \\\\ 3L_e & 4L_e^2 & -3L_e & -L_e^2 \\\\ -36 & -3L_e & 36 & -3L_e \\\\ 3L_e & -L_e^2 & -3L_e & 4L_e^2 \\end{pmatrix} $$\n\n**2. 组装和边界条件**\n\n梁被离散为两个等长的单元，长度为 $L_e = L/2$。节点分别位于 $x=0$ (节点1)、$x=L/2$ (节点2) 和 $x=L$ (节点3)。全局自由度向量为 $\\boldsymbol{D} = \\begin{pmatrix} w_1 & \\theta_1 & w_2 & \\theta_2 & w_3 & \\theta_3 \\end{pmatrix}^T$。组装两个单元的贡献，可得到 $6 \\times 6$ 的全局矩阵 $K$ 和 $K_g^{(0)}$。\n\n简支 (铰接) 边界条件要求两端横向位移为零：$w(0)=0$ 和 $w(L)=0$。这意味着 $w_1=0$ 和 $w_3=0$。我们从全局矩阵中消去对应的行和列（第 1 行/列和第 5 行/列）。剩余的有效自由度为 $\\boldsymbol{d}_{active} = \\begin{pmatrix} \\theta_1 & w_2 & \\theta_2 & \\theta_3 \\end{pmatrix}^T$，系统被简化为一个 $4 \\times 4$ 的问题。\n\n简化后的弹性刚度矩阵 $K_{red}$ 为：\n$$ K_{red} = \\frac{EI}{L_e^3} \\begin{pmatrix} 4L_e^2 & -6L_e & 2L_e^2 & 0 \\\\ -6L_e & 24 & 0 & 6L_e \\\\ 2L_e^2 & 0 & 8L_e^2 & 2L_e^2 \\\\ 0 & 6L_e & 2L_e^2 & 4L_e^2 \\end{pmatrix} $$\n简化后的单位荷载下的几何刚度矩阵 $K_{g,red}^{(0)}$ 为：\n$$ K_{g,red}^{(0)} = \\frac{1}{30L_e} \\begin{pmatrix} 4L_e^2 & -3L_e & -L_e^2 & 0 \\\\ -3L_e & 72 & 0 & 3L_e \\\\ -L_e^2 & 0 & 8L_e^2 & -L_e^2 \\\\ 0 & 3L_e & -L_e^2 & 4L_e^2 \\end{pmatrix} $$\n其中 $L_e = L/2$。\n\n**3. 特征值问题的求解**\n\n简支梁的基本屈曲模态是关于跨中 ($x=L/2$) 对称的。这一物理洞察对自由度施加了进一步的约束：跨中转角为零 ($\\theta_2=0$)，两端转角大小相等、方向相反 ($\\theta_3 = -\\theta_1$)。有效自由度向量可以通过转换矩阵 $\\boldsymbol{T}$ 用两个广义坐标 $\\boldsymbol{q} = \\begin{pmatrix} \\theta_1 & w_2 \\end{pmatrix}^T$ 表示：\n$$ \\boldsymbol{d}_{active} = \\begin{pmatrix} \\theta_1 \\\\ w_2 \\\\ \\theta_2 \\\\ \\theta_3 \\end{pmatrix} = \\begin{pmatrix} 1 & 0 \\\\ 0 & 1 \\\\ 0 & 0 \\\\ -1 & 0 \\end{pmatrix} \\begin{pmatrix} \\theta_1 \\\\ w_2 \\end{pmatrix} = \\boldsymbol{T}\\boldsymbol{q} $$\n该 $4 \\times 4$ 的特征值问题 $K_{red}\\boldsymbol{\\phi} = \\lambda K_{g,red}^{(0)}\\boldsymbol{\\phi}$ 被简化为一个 $2 \\times 2$ 的问题 $(\\boldsymbol{T}^T K_{red} \\boldsymbol{T}) \\boldsymbol{q} = \\lambda (\\boldsymbol{T}^T K_{g,red}^{(0)} \\boldsymbol{T}) \\boldsymbol{q}$，或写作 $K_s \\boldsymbol{q} = \\lambda K_{g,s} \\boldsymbol{q}$。\n使用 $L_e=L/2$ 计算转换后的矩阵：\n$$ K_s = \\boldsymbol{T}^T K_{red} \\boldsymbol{T} = \\frac{16EI}{L^3} \\begin{pmatrix} L^2 & -3L \\\\ -3L & 12 \\end{pmatrix} $$\n$$ K_{g,s} = \\boldsymbol{T}^T K_{g,red}^{(0)} \\boldsymbol{T} = \\frac{1}{15L} \\begin{pmatrix} 2L^2 & -3L \\\\ -3L & 72 \\end{pmatrix} $$\n\n该特征值问题需要求解 $\\det(K_s - \\lambda K_{g,s}) = 0$。通过定义 $\\mu = \\frac{\\lambda L^2}{240 EI}$ 并求解 $\\det(A - \\mu B)=0$ 可以简化此问题，其中 $A = \\frac{L^3}{16EI} K_s$ 且 $B = 15L \\cdot K_{g,s}$。\n$A = \\begin{pmatrix} L^2 & -3L \\\\ -3L & 12 \\end{pmatrix}$, $B = \\begin{pmatrix} 2L^2 & -3L \\\\ -3L & 72 \\end{pmatrix}$。\n特征方程为：\n$$ \\det \\begin{pmatrix} L^2(1 - 2\\mu) & -3L(1 - \\mu) \\\\ -3L(1 - \\mu) & 12(1 - 6\\mu) \\end{pmatrix} = 0 $$\n$$ 12L^2(1 - 2\\mu)(1 - 6\\mu) - 9L^2(1 - \\mu)^2 = 0 $$\n两边同除以 $3L^2$ 并展开，得到一个关于 $\\mu$ 的二次方程：\n$$ 4(1 - 8\\mu + 12\\mu^2) - 3(1 - 2\\mu + \\mu^2) = 0 $$\n$$ 45\\mu^2 - 26\\mu + 1 = 0 $$\n方程的根为 $\\mu = \\frac{26 \\pm \\sqrt{26^2 - 4(45)(1)}}{90} = \\frac{26 \\pm \\sqrt{496}}{90} = \\frac{13 \\pm 2\\sqrt{31}}{45}$。\n最小特征值 $\\lambda_{\\min}$ 对应于最小的根 $\\mu_{\\min}$，它代表了最低屈曲荷载。\n$$ \\mu_{\\min} = \\frac{13 - 2\\sqrt{31}}{45} $$\n来自有限元分析的临界荷载为 $P_{\\text{cr,FE}} = \\lambda_{\\min}$。\n$$ P_{\\text{cr,FE}} = \\mu_{\\min} \\frac{240 EI}{L^2} = \\frac{13 - 2\\sqrt{31}}{45} \\frac{240 EI}{L^2} = \\frac{16(13 - 2\\sqrt{31})}{3} \\frac{EI}{L^2} $$\n\n**4. 与 Euler 临界荷载的比较**\n\n最后一步是计算有限元结果与经典 Euler 临界荷载 $P_{\\text{cr}} = \\frac{\\pi^2 EI}{L^2}$ 的比值 $\\alpha$。\n$$ \\alpha = \\frac{P_{\\text{cr,FE}}}{P_{\\text{cr}}} = \\frac{\\frac{16(13 - 2\\sqrt{31})}{3} \\frac{EI}{L^2}}{\\frac{\\pi^2 EI}{L^2}} $$\n$$ \\alpha = \\frac{16(13 - 2\\sqrt{31})}{3\\pi^2} $$\n这就是所要求比值的最终解析表达式。", "answer": "$$\\boxed{\\frac{16(13-2\\sqrt{31})}{3\\pi^{2}}}$$", "id": "2574102"}, {"introduction": "在掌握了欧拉-伯努利梁模型后，一个关键的进阶是理解不同物理模型的适用范围。本练习引入了考虑剪切变形的铁木辛柯 (Timoshenko) 梁理论，并将其与经典的欧拉-伯努利理论进行直接对比。通过计算一个短粗梁在两种理论下的屈曲载荷，您将亲身体会到剪切效应何时变得不可忽略，以及它如何影响结构的稳定性预测。[@problem_id:2574082]", "problem": "一根长为 $L = 0.5\\,\\mathrm{m}$ 的直棱柱梁，其矩形截面的宽度为 $b = 0.05\\,\\mathrm{m}$，高度为 $h = 0.25\\,\\mathrm{m}$，由均质、各向同性的材料制成，其杨氏模量为 $E = 210 \\times 10^{9}\\,\\mathrm{Pa}$，剪切模量为 $G = 80 \\times 10^{9}\\,\\mathrm{Pa}$。使用剪切修正因子 $\\kappa = 5/6$。梁的两端完全固支。考虑在有限元法 (FEM) 框架内进行线性特征值屈曲分析，使用沿梁轴线的均匀、受压的参考轴向力 $P_0 = 1\\,\\mathrm{N}$ 来构建几何刚度。\n\n使用两个等长的双节点梁单元对梁进行建模：\n- 一次采用欧拉-伯努利运动学（无剪切变形），\n- 一次采用铁木辛柯运动学（有剪切变形）。\n\n从静止势能原理和小应变、小转动运动学出发，推导每种理论的单元线性刚度和几何刚度，组装 2 单元的全局系统，施加固支边界条件，并建立形式如下的简化广义特征值问题\n$$\n\\left( \\mathbf{K} - \\lambda \\mathbf{K}_G \\right) \\boldsymbol{\\phi} = \\mathbf{0},\n$$\n其中 $\\lambda$ 是相对于参考轴向力 $P_0$ 的特征值乘子。最小特征值 $\\lambda$ 对应于给定离散化下的第一屈曲荷载预测值 $P_{\\mathrm{cr}} = \\lambda P_0$。\n\n计算欧拉-伯努利模型和铁木辛柯模型的第一个特征值，并进行比较。令 $r$ 为铁木辛柯预测值与欧拉-伯努利预测值之比，\n$$\nr = \\frac{P_{\\mathrm{cr}}^{\\text{Timoshenko}}}{P_{\\mathrm{cr}}^{\\text{Euler--Bernoulli}}}.\n$$\n从建模假设的基本原理出发，解释对于这种短而深的梁，剪切变形如何影响其刚度，从而影响屈曲预测。\n\n将单个数字 $r$ 作为最终结果，四舍五入到四位有效数字。由于 $r$ 是无量纲的，最终答案中不需要单位。", "solution": "恒定受压轴向力作用下梁的线性特征值屈曲问题是通过对预应力构型的总势能进行线性化得到的。对于小位移和小转动，平稳性条件得出广义特征值问题\n$$\n\\left( \\mathbf{K} - \\lambda \\mathbf{K}_G \\right) \\boldsymbol{\\phi} = \\mathbf{0},\n$$\n其中 $\\mathbf{K}$ 是弹性刚度矩阵，$\\mathbf{K}_G$ 是与所选参考轴向力 $P_0$ 相关的几何刚度矩阵，$\\lambda$ 是特征值乘子，使得 $P_{\\mathrm{cr}} = \\lambda P_0$。\n\n我们考虑绕强轴的平面弯曲，每个节点的节点自由度为横向位移 $w$ 和转角 $\\theta$。使用两个等长单元；每个单元的长度为 $l = L/2$。\n\n1) 单元弹性刚度：欧拉-伯努利与铁木辛柯\n\n- 欧拉-伯努利（无剪切变形）。对于长度为 $l$ 的双节点单元，在局部坐标 $\\{ w_1, \\theta_1, w_2, \\theta_2 \\}$ 下的标准一致弹性刚度矩阵为\n$$\n\\mathbf{k}^{\\text{EB}} = \\frac{E I}{l^{3}}\n\\begin{bmatrix}\n12 & 6l & -12 & 6l \\\\\n6l & 4l^{2} & -6l & 2l^{2} \\\\\n-12 & -6l & 12 & -6l \\\\\n6l & 2l^{2} & -6l & 4l^{2}\n\\end{bmatrix},\n$$\n其中 $I$ 是截面二次矩。\n\n- 铁木辛柯（包含剪切变形）。引入剪切参数\n$$\n\\phi = \\frac{12 E I}{\\kappa G A l^{2}},\n$$\n其中截面面积为 $A = b h$，剪切修正因子为 $\\kappa$，双节点铁木辛柯梁单元的一致弹性刚度为\n$\n\\displaystyle\n\\mathbf{k}^{\\text{T}} = \\frac{E I}{(1+\\phi) l^{3}}\n\\begin{bmatrix}\n12 & 6l & -12 & 6l \\\\\n6l & (4+\\phi) l^{2} & -6l & (2-\\phi) l^{2} \\\\\n-12 & -6l & 12 & -6l \\\\\n6l & (2-\\phi) l^{2} & -6l & (4+\\phi) l^{2}\n\\end{bmatrix}.\n$\n\n这些表达式遵循静止势能原理以及各自的运动学假设：欧拉-伯努利假设横截面在变形后仍垂直于变形后的中性轴（无横向剪切应变），而铁木辛柯允许厚度方向上存在恒定的横向剪切应变，从而通过 $\\kappa G A$ 引入剪切柔度。\n\n2) 恒定轴向力作用下的单元几何刚度\n\n对于在恒定受压参考轴向力 $P_0$ 作用下的棱柱形单元，其一致几何刚度矩阵（来自预应力虚功中的二阶项）为\n$$\n\\mathbf{k}_G = \\frac{P_0}{30\\,l}\n\\begin{bmatrix}\n36 & 3l & -36 & 3l \\\\\n3l & 4l^{2} & -3l & -l^{2} \\\\\n-36 & -3l & 36 & -3l \\\\\n3l & -l^{2} & -3l & 4l^{2}\n\\end{bmatrix}.\n$$\n这种形式源于轴向力在横向位移曲率上所做的虚功，对于此处所用的插值，欧拉-伯努利和铁木辛柯单元的该矩阵形式相同。\n\n3) 双单元组装与固支-固支边界条件\n\n我们用两个等长单元将梁离散化，节点 $1$–$2$–$3$ 分别位于 $x=0$、$x=L/2$ 和 $x=L$。梁的两端固支，因此在节点 $1$ 和 $3$ 处，我们强制 $w=\\theta=0$。唯一不受约束的节点自由度位于中间节点 $2$：$\\{ w_2, \\theta_2 \\}$。\n\n组装两个单元并消除固支端自由度，得到针对中间节点的简化 $2\\times 2$ 矩阵。根据对称性，简化的弹性刚度和几何刚度矩阵都是对角矩阵。具体来说：\n\n- 欧拉-伯努利简化弹性刚度：\n$$\n\\mathbf{K}^{\\text{EB}}_{\\text{red}} = \\frac{E I}{l^{3}}\n\\begin{bmatrix}\n24 & 0 \\\\\n0 & 8l^{2}\n\\end{bmatrix},\n$$\n通过将左侧单元的 $(3{:}4,3{:}4)$ 块与右侧单元的 $(1{:}2,1{:}2)$ 块相加得到。\n\n- 铁木辛柯简化弹性刚度：\n$$\n\\mathbf{K}^{\\text{T}}_{\\text{red}} = \\frac{E I}{(1+\\phi) l^{3}}\n\\begin{bmatrix}\n24 & 0 \\\\\n0 & 2(4+\\phi) l^{2}\n\\end{bmatrix}.\n$$\n\n- 简化几何刚度（两种理论中相同）：\n$$\n\\mathbf{K}_{G,\\text{red}} = \\frac{P_0}{30\\,l}\n\\begin{bmatrix}\n72 & 0 \\\\\n0 & 8l^{2}\n\\end{bmatrix}\n=\n\\begin{bmatrix}\n\\dfrac{12}{5}\\,\\dfrac{P_0}{l} & 0 \\\\\n0 & \\dfrac{4}{15}\\,P_0\\,l\n\\end{bmatrix}.\n$$\n\n4) 简化特征值问题与第一特征值\n\n对于每种理论，简化的广义特征值问题\n$\n(\\mathbf{K}_{\\text{red}} - \\lambda \\mathbf{K}_{G,\\text{red}})\\boldsymbol{\\phi}_{\\text{red}}=\\mathbf{0}\n$\n解耦为对应于 $w_2$ 和 $\\theta_2$ 的两个标量方程。两个特征值是对角元素之比 $K_{ii}/K_{G,ii}$。较小的比值给出了第一屈曲荷载的预测值。\n\n- 欧拉-伯努利：\n$$\n\\lambda^{\\text{EB}}_{w} = \\frac{ \\dfrac{24 E I}{l^{3}} }{ \\dfrac{12}{5}\\,\\dfrac{P_0}{l} } = 10\\,\\frac{E I}{P_0\\,l^{2}}, \n\\qquad\n\\lambda^{\\text{EB}}_{\\theta} = \\frac{ \\dfrac{8 E I}{l} }{ \\dfrac{4}{15}\\,P_0\\,l } = 30\\,\\frac{E I}{P_0\\,l^{2}}.\n$$\n因此第一个特征值为\n$$\n\\lambda_{\\min}^{\\text{EB}} = 10\\,\\frac{E I}{P_0\\,l^{2}}.\n$$\n\n- 铁木辛柯：\n$$\n\\lambda^{\\text{T}}_{w} = \\frac{ \\dfrac{24 E I}{(1+\\phi) l^{3}} }{ \\dfrac{12}{5}\\,\\dfrac{P_0}{l} } \n= \\frac{10}{1+\\phi}\\,\\frac{E I}{P_0\\,l^{2}},\n\\qquad\n\\lambda^{\\text{T}}_{\\theta} = \\frac{ \\dfrac{ 2(4+\\phi) E I }{ (1+\\phi) l } }{ \\dfrac{4}{15}\\,P_0\\,l } \n= \\frac{15}{2}\\,\\frac{4+\\phi}{1+\\phi}\\,\\frac{E I}{P_0\\,l^{2}}.\n$$\n对于正的 $\\phi$，较小的值仍然是 $\\lambda^{\\text{T}}_{w}$。因此第一个特征值为\n$$\n\\lambda_{\\min}^{\\text{T}} = \\frac{10}{1+\\phi}\\,\\frac{E I}{P_0\\,l^{2}}.\n$$\n\n因此，第一特征值（也即临界荷载）之比为\n$$\nr \\equiv \\frac{ \\lambda_{\\min}^{\\text{T}} }{ \\lambda_{\\min}^{\\text{EB}} } \n= \\frac{1}{1+\\phi}.\n$$\n\n5) 数值计算\n\n计算截面属性：\n$$\nA = b h = (0.05)\\,(0.25) = 0.0125\\,\\mathrm{m}^{2}, \\qquad\nI = \\frac{b h^{3}}{12} = \\frac{(0.05)\\,(0.25)^{3}}{12} = 6.5104166667\\times 10^{-5}\\,\\mathrm{m}^{4}.\n$$\n单元长度为 $l = L/2 = 0.25\\,\\mathrm{m}$。剪切参数为\n$$\n\\phi = \\frac{12 E I}{\\kappa G A l^{2}}\n= \\frac{12 \\,(210\\times 10^{9}) \\,(6.5104166667\\times 10^{-5})}{ \\left(\\dfrac{5}{6}\\right)\\,(80\\times 10^{9})\\,(0.0125)\\,(0.25)^{2} }.\n$$\n计算分子和分母：\n$$\nE I = 210\\times 10^{9}\\times 6.5104166667\\times 10^{-5} = 1.3671875\\times 10^{7}, \\quad\n12 E I = 1.640625\\times 10^{8},\n$$\n$$\n\\kappa G A l^{2} = \\left(\\frac{5}{6}\\right)\\,(80\\times 10^{9})\\,(0.0125)\\,(0.0625) = 5.2083333333\\times 10^{7}.\n$$\n因此\n$$\n\\phi = \\frac{1.640625\\times 10^{8}}{5.2083333333\\times 10^{7}} = 3.15.\n$$\n所以，\n$\n\\displaystyle\nr = \\frac{1}{1+\\phi} = \\frac{1}{1+3.15} = \\frac{1}{4.15} = \\frac{20}{83} \\approx 0.240963855\\dots\n$\n\n四舍五入到四位有效数字，\n$\n\\displaystyle\nr = 0.2410.\n$\n\n6) 物理诠释与剪切效应归因\n\n铁木辛柯单元通过有限的剪切刚度 $\\kappa G A$ 包含了横向剪切变形。这引入了无量纲剪切参数 $\\phi = 12 E I / (\\kappa G A l^{2})$，该参数表示弯曲刚度与按单元长度缩放的剪切刚度之比。相对于欧拉-伯努利梁，铁木辛柯单元的弹性弯曲刚度降低了因子 $1/(1+\\phi)$。因为在这种插值中，几何刚度不受剪切影响，所以第一屈曲特征值也精确地降低了相同的因子：\n$$\n\\lambda_{\\min}^{\\text{T}} = \\frac{1}{1+\\phi}\\,\\lambda_{\\min}^{\\text{EB}}.\n$$\n对于短而深的梁（大的 $I$，小的 $l$，相对适中的 $\\kappa G A$），$\\phi$ 的值相当可观，使得剪切柔度变得显著，并相对于欧拉-伯努利理想化模型降低了预测的屈曲荷载。在本例中，$\\phi=3.15$，所以铁木辛柯模型的预测值约为欧拉-伯努利模型预测值的 $24.10\\%$，这与剪切在短构件中的显著影响是一致的。", "answer": "$$\\boxed{0.2410}$$", "id": "2574082"}, {"introduction": "最后的这个实践练习将带您进入实用的计算力学世界，将您学到的概念从一维梁扩展到二维板。您将编写一个完整的有限元程序，采用考虑剪切变形的 Mindlin-Reissner 理论来分析板的屈曲。本练习的核心是进行一次网格收敛性研究，这是评估有限元模型准确性的标准工业和学术实践，能让您对数值解的可靠性有更深入的认识。[@problem_id:2574106]", "problem": "考虑一个由Mindlin-Reissner理论建模的扁平、均匀、各向同性的矩形板的线性特征值屈曲分析。设板的中面占据$x$–$y$平面中的矩形区域$[0,a] \\times [0,b]$，其厚度为常数$t$，杨氏模量为$E$，泊松比为$\\nu$。运动学变量为横向位移$w(x,y)$以及法线分别绕$y$轴和$x$轴的转角$\\theta_x(x,y)$和$\\theta_y(x,y)$。假设小应变和小转角，并存在一个沿$x$方向作用的均匀、受压面内应力合力场 $N_{xx} = N_0$（常数），$N_{yy} = 0$，$N_{xy} = 0$。板的所有边界均为固支，即在$\\partial \\Omega$上$w=0$，$\\theta_x=0$ 及 $\\theta_y=0$。\n\n出发点是板的虚功原理：在初始屈曲时，弯曲和横向剪切虚应变能等于预应力在二阶虚位移上所做的虚功。在Mindlin-Reissner板中，弯曲曲率为 $\\kappa_x = \\partial \\theta_x / \\partial x$、$\\kappa_y = \\partial \\theta_y / \\partial y$ 和 $\\kappa_{xy} = \\partial \\theta_x / \\partial y + \\partial \\theta_y / \\partial x$，横向剪应变为 $\\gamma_{xz} = \\theta_x + \\partial w / \\partial x$ 和 $\\gamma_{yz} = \\theta_y + \\partial w / \\partial y$。弯曲本构矩阵为 $D_b = D \\begin{bmatrix} 1 & \\nu & 0 \\\\ \\nu & 1 & 0 \\\\ 0 & 0 & (1-\\nu)/2 \\end{bmatrix}$，其中 $D = E t^3 / \\left(12(1-\\nu^2)\\right)$；剪切本构矩阵为 $D_s = \\kappa_s G t \\, I$，其中 $G = E /(2(1+\\nu))$ 且 $\\kappa_s = 5/6$ 为标准剪切修正因子。\n\n使用四节点等参双线性四边形单元对板进行离散化。每个节点有三个自由度：$w$、$\\theta_x$ 和 $\\theta_y$。使用以下变分构造块作为适用于该问题的基本依据：\n- 弯曲能量密度：$(\\kappa_x,\\kappa_y,\\kappa_{xy})^T D_b (\\kappa_x,\\kappa_y,\\kappa_{xy})$，在板面积分。\n- 剪切能量密度：$(\\gamma_{xz},\\gamma_{yz})^T D_s (\\gamma_{xz},\\gamma_{yz})$，在板面积分。\n- 与预应力相关的几何（应力）势能：$N_{xx} \\left(\\partial w/\\partial x\\right)^2 + 2 N_{xy} \\left(\\partial w/\\partial x\\right)\\left(\\partial w/\\partial y\\right) + N_{yy} \\left(\\partial w/\\partial y\\right)^2$，在板面积分。\n\n基于以上各项，组装全局弹性刚度矩阵 $K$（由弯曲和剪切项构成）和几何刚度矩阵 $K_g$（由预应力和面外位移梯度构成）。通过在所有边界节点上约束 $w$、$\\theta_x$ 和 $\\theta_y$ 来强施加固支边界条件。然后，构建如下形式的线性屈曲广义特征值问题\n$$\nK_g \\, \\phi = \\mu \\, K \\, \\phi,\n$$\n其中$\\mu$是与假设的单位预应力大小相关的广义特征值。相应的临界屈曲因子为$\\lambda = 1/\\mu$，它与基础面内应力合力相乘得到临界载荷合力。我们关心的是最小的正$\\lambda$值，即基本屈曲因子。所有计算都可以在一个无量纲系统中进行，其中$E$和$N_0$设为1；所要求的输出是无量纲数。\n\n你的任务是编写一个完整的程序，该程序能够：\n1. 实现所描述的四节点双线性Mindlin板单元，其中：\n   - 弯曲项采用完全$2 \\times 2$高斯积分，\n   - 剪切项采用减缩$1 \\times 1$高斯积分，\n   - 几何刚度项采用完全$2 \\times 2$高斯积分。\n2. 在结构化网格上组装全局矩阵 $K$ 和 $K_g$，并施加所有边界均为固支的边界条件。\n3. 求解广义特征值问题，得到$(K_g, K)$的最大代数特征值$\\mu_{\\max}$，并返回$\\lambda = 1/\\mu_{\\max}$作为最小屈曲因子。\n4. 对下述每个测试用例，使用三个逐次加密的网格（单元尺寸分别为 $h_1$、 $h_2 = h_1/2$ 和 $h_3 = h_2/2$）进行网格加密研究，计算三个近似值$\\lambda(h_1)$、$\\lambda(h_2)$和$\\lambda(h_3)$，并通过差商估计最小特征值的观测渐近收敛率$p$：\n$$\np \\approx \\frac{\\log\\left( \\left|\\lambda(h_2) - \\lambda(h_1)\\right| \\, / \\, \\left|\\lambda(h_3) - \\lambda(h_2)\\right|\\right)}{\\log(2)}.\n$$\n如果任何差值在数值上为零，则使用一个小的正则化项以避免除以零，但要保留估计的逻辑。\n\n使用以下测试套件。在所有情况下，设$E = 1$和$N_0 = 1$，泊松比$\\nu = 0.3$，剪切修正因子$\\kappa_s = 5/6$。板的所有侧边均为固支。对于每种情况，选择的三个网格使得单元尺寸逐级减半，其中单元尺寸$h = \\max\\{a/n_x, b/n_y\\}$，$n_x$和$n_y$分别是沿$x$和$y$方向的单元数量。\n\n- 测试用例1（方形，中等厚度）：\n  - 几何形状：$a = 1$，$b = 1$，厚度 $t = 0.10$。\n  - 面内应力合力：$N_{xx} = 1$，$N_{yy} = 0$，$N_{xy} = 0$。\n  - 网格：$(n_x,n_y) \\in \\{(4,4),(8,8),(16,16)\\}$。\n\n- 测试用例2（方形，薄板）：\n  - 几何形状：$a = 1$，$b = 1$，厚度 $t = 0.01$。\n  - 面内应力合力：$N_{xx} = 1$，$N_{yy} = 0$，$N_{xy} = 0$。\n  - 网格：$(n_x,n_y) \\in \\{(4,4),(8,8),(16,16)\\}$。\n\n- 测试用例3（矩形，中等厚度）：\n  - 几何形状：$a = 2$，$b = 1$，厚度 $t = 0.05$。\n  - 面内应力合力：$N_{xx} = 1$，$N_{yy} = 0$，$N_{xy} = 0$。\n  - 网格：$(n_x,n_y) \\in \\{(6,3),(12,6),(24,12)\\}$。\n\n你的程序必须计算这三个测试用例的估计收敛率$p$，并以下面指定的最终格式输出结果。\n\n角度单位（若有）为弧度。输出为无量纲数。你的程序应生成单行输出，其中包含一个用方括号括起来的逗号分隔列表（例如，“[p1,p2,p3]”），其中每个$p_i$是一个浮点数，对应上面列出的第$i$个测试用例的估计收敛率。", "solution": "该问题要求根据Mindlin-Reissner理论，实现一个有限元法（FEM）程序，对固支矩形板进行线性特征值屈曲分析。最终目标是计算三个不同测试用例中基本屈曲载荷因子的收敛率。\n\n问题陈述已经过验证，被认为是科学上合理、适定且完整的。它描述了计算结构力学中的一个标准问题，并为实现和分析提供了明确的指导。所有必需的物理参数、数学公式和数值程序都已给出。广义特征值问题$K_g \\, \\phi = \\mu \\, K \\, \\phi$的提法，结合屈曲因子$\\lambda = 1/\\mu_{\\max}$的关系式，是求解最小屈曲载荷的一种标准且数值稳定的方法。\n\n解决方案按以下步骤进行：\n\n1.  **单元构造**：构造一个四节点四边形Mindlin-Reissner板单元。每个节点拥有三个自由度（DOF）：一个横向位移$w$和两个转角$\\theta_x$、$\\theta_y$。每个单元的总自由度数为12。使用等参双线性形函数$N_i(\\xi, \\eta)$从节点值插值单元内的位移场。\n\n2.  **应变-位移关系**：运动学关系基于Mindlin-Reissner理论。\n    -   弯曲曲率被收集在一个向量中 $\\boldsymbol{\\kappa} = [\\kappa_x, \\kappa_y, \\kappa_{xy}]^T$，其中 $\\kappa_x = \\partial \\theta_x / \\partial x$、$\\kappa_y = \\partial \\theta_y / \\partial y$ 和 $\\kappa_{xy} = \\partial \\theta_x / \\partial y + \\partial \\theta_y / \\partial x$。这些曲率通过应变-位移矩阵$\\mathbf{B}_b$与节点自由度相关联，即$\\boldsymbol{\\kappa} = \\mathbf{B}_b \\mathbf{d}$，其中$\\mathbf{d}$是单元的节点自由度向量。\n    -   横向剪应变为$\\boldsymbol{\\gamma} = [\\gamma_{xz}, \\gamma_{yz}]^T$，其中$\\gamma_{xz} = \\theta_x + \\partial w / \\partial x$ 和 $\\gamma_{yz} = \\theta_y + \\partial w / \\partial y$。这些应变通过矩阵$\\mathbf{B}_s$与节点自由度相关联，因此$\\boldsymbol{\\gamma} = \\mathbf{B}_s \\mathbf{d}$。\n    -   横向位移的梯度$\\nabla w = [\\partial w / \\partial x, \\partial w / \\partial y]^T$用于计算几何刚度矩阵。这通过矩阵$\\mathbf{B}_g$与节点自由度相关联，即$\\nabla w = \\mathbf{B}_g \\mathbf{d}$。\n\n3.  **单元矩阵计算**：通过使用高斯积分在单元面积上对相应的能量密度进行积分来计算单元矩阵。\n    -   单元弹性刚度矩阵$\\mathbf{K}_e$是弯曲刚度$\\mathbf{K}_{e,b}$和剪切刚度$\\mathbf{K}_{e,s}$之和。\n        $$\n        \\mathbf{K}_{e,b} = \\int_{\\Omega_e} \\mathbf{B}_b^T \\mathbf{D}_b \\mathbf{B}_b \\, dA \\quad \\text{和} \\quad \\mathbf{K}_{e,s} = \\int_{\\Omega_e} \\mathbf{B}_s^T \\mathbf{D}_s \\mathbf{B}_s \\, dA\n        $$\n        这里，$\\mathbf{D}_b$和$\\mathbf{D}_s$分别是弯曲和剪切的材料本构矩阵。为防止剪切自锁（尤其是在薄板中），采用了一种选择性减缩积分方案：弯曲项使用$2 \\times 2$高斯积分，剪切项使用$1 \\times 1$高斯积分。\n    -   单元几何刚度矩阵$\\mathbf{K}_{g,e}$源于面内预应力$N_{xx} = N_0$在屈曲过程中所做的功。\n        $$\n        \\mathbf{K}_{g,e} = \\int_{\\Omega_e} \\mathbf{B}_g^T \\begin{pmatrix} N_0 & 0 \\\\ 0 & 0 \\end{pmatrix} \\mathbf{B}_g \\, dA\n        $$\n        该积分使用完全$2 \\times 2$高斯积分进行计算。\n\n4.  **全局组装与边界条件**：生成结构化单元网格。计算每个单元的单元矩阵（$\\mathbf{K}_e$和$\\mathbf{K}_{g,e}$），并将它们组装成全局弹性刚度矩阵$\\mathbf{K}$和几何刚度矩阵$\\mathbf{K}_g$。通过移除与约束自由度对应的行和列来施加固支边界条件（所有边界上$w=0, \\theta_x=0, \\theta_y=0$），得到简化的矩阵$\\mathbf{K}_{\\text{free}}$和$\\mathbf{K}_{g, \\text{free}}$。\n\n5.  **特征值问题求解**：线性屈曲分析引出广义特征值问题 $( \\mathbf{K} - \\lambda \\mathbf{K}_g ) \\boldsymbol{\\phi} = 0$。按题目要求，将其重排为$\\mathbf{K}_g \\boldsymbol{\\phi} = \\mu \\mathbf{K} \\boldsymbol{\\phi}$，其中$\\mu = 1/\\lambda$。最小正屈曲因子$\\lambda_{\\text{crit}}$对应于最大特征值$\\mu_{\\max}$。简化的系统$\\mathbf{K}_{g, \\text{free}} \\boldsymbol{\\phi}_{\\text{free}} = \\mu \\mathbf{K}_{\\text{free}} \\boldsymbol{\\phi}_{\\text{free}}$使用`scipy.linalg.eigh`求解，该函数适用于对称广义特征值问题。返回的最大特征值给出$\\mu_{\\max}$，临界屈曲因子为$\\lambda = 1/\\mu_{\\max}$。\n\n6.  **收敛率估计**：对每个测试用例，在三个逐次加密的网格（$h_1, h_2=h_1/2, h_3=h_2/2$）上重复分析。使用得到的屈曲因子$\\lambda(h_1)$、$\\lambda(h_2)$和$\\lambda(h_3)$，通过以下公式估计渐近收敛率$p$：\n    $$\n    p \\approx \\frac{\\log\\left( \\left|\\lambda(h_2) - \\lambda(h_1)\\right| \\, / \\, \\left|\\lambda(h_3) - \\lambda(h_2)\\right|\\right)}{\\log(2)}\n    $$\n    如果分母中的差值在数值上为零，则使用一个小的正则化项以避免除以零。\n\n提供的Python代码实现了这整个过程。代码被构造成多个函数，分别用于单元矩阵计算、给定网格的全局分析，以及一个处理所有测试用例并计算最终收敛率的主驱动程序。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy import linalg\n\ndef get_shape_functions(xi, eta):\n    \"\"\"\n    Computes the bilinear shape functions for a 4-node quad element.\n    \"\"\"\n    N = np.zeros(4)\n    N[0] = 0.25 * (1.0 - xi) * (1.0 - eta)\n    N[1] = 0.25 * (1.0 + xi) * (1.0 - eta)\n    N[2] = 0.25 * (1.0 + xi) * (1.0 + eta)\n    N[3] = 0.25 * (1.0 - xi) * (1.0 + eta)\n    return N\n\ndef get_shape_function_derivatives(coords, xi, eta):\n    \"\"\"\n    Computes derivatives of shape functions w.r.t. real coordinates (x, y).\n    \"\"\"\n    dNdxi = 0.25 * np.array([-(1.0 - eta), (1.0 - eta), (1.0 + eta), -(1.0 + eta)])\n    dNdeta = 0.25 * np.array([-(1.0 - xi), -(1.0 + xi), (1.0 + xi), (1.0 - xi)])\n    N_deriv_iso = np.vstack([dNdxi, dNdeta])\n\n    J = N_deriv_iso @ coords\n    detJ = np.linalg.det(J)\n    invJ = np.linalg.inv(J)\n    \n    N_deriv_real = invJ @ N_deriv_iso\n    return N_deriv_real, detJ\n\ndef get_element_matrices(coords, Db, Ds, N0):\n    \"\"\"\n    Computes the element stiffness (Ke) and geometric stiffness (Kge) matrices.\n    \"\"\"\n    Ke = np.zeros((12, 12))\n    Kge = np.zeros((12, 12))\n\n    # Gauss points and weights for 2x2 quadrature\n    gp_loc = 1.0 / np.sqrt(3.0)\n    gauss_points_2x2 = [(-gp_loc, -gp_loc), (gp_loc, -gp_loc),\n                        (gp_loc, gp_loc), (-gp_loc, gp_loc)]\n    gauss_weights_2x2 = [1.0, 1.0, 1.0, 1.0]\n\n    # Gauss point and weight for 1x1 quadrature\n    gauss_points_1x1 = [(0.0, 0.0)]\n    gauss_weights_1x1 = [4.0]\n\n    N_mat = np.array([[N0, 0.0], [0.0, 0.0]])\n\n    # Bending stiffness (Kb) using 2x2 quadrature\n    K_b = np.zeros((12, 12))\n    for gp, w_gp in zip(gauss_points_2x2, gauss_weights_2x2):\n        xi, eta = gp\n        N_deriv_real, detJ = get_shape_function_derivatives(coords, xi, eta)\n        \n        Bb = np.zeros((3, 12))\n        for i in range(4):\n            dNi_dx, dNi_dy = N_deriv_real[0, i], N_deriv_real[1, i]\n            # [w_i, th_xi, th_yi]\n            Bb[0, 3 * i + 1] = dNi_dx\n            Bb[1, 3 * i + 2] = dNi_dy\n            Bb[2, 3 * i + 1] = dNi_dy\n            Bb[2, 3 * i + 2] = dNi_dx\n        \n        K_b += Bb.T @ Db @ Bb * detJ * w_gp\n\n    # Shear stiffness (Ks) using 1x1 quadrature (Reduced Integration)\n    K_s = np.zeros((12, 12))\n    for gp, w_gp in zip(gauss_points_1x1, gauss_weights_1x1):\n        xi, eta = gp\n        N = get_shape_functions(xi, eta)\n        N_deriv_real, detJ = get_shape_function_derivatives(coords, xi, eta)\n        \n        Bs = np.zeros((2, 12))\n        for i in range(4):\n            Ni = N[i]\n            dNi_dx, dNi_dy = N_deriv_real[0, i], N_deriv_real[1, i]\n            Bs[0, 3 * i] = dNi_dx\n            Bs[0, 3 * i + 1] = Ni\n            Bs[1, 3 * i] = dNi_dy\n            Bs[1, 3 * i + 2] = Ni\n        \n        K_s += Bs.T @ Ds @ Bs * detJ * w_gp\n\n    Ke = K_b + K_s\n\n    # Geometric stiffness (Kge) using 2x2 quadrature\n    for gp, w_gp in zip(gauss_points_2x2, gauss_weights_2x2):\n        xi, eta = gp\n        N_deriv_real, detJ = get_shape_function_derivatives(coords, xi, eta)\n        \n        Bg = np.zeros((2, 12))\n        for i in range(4):\n            dNi_dx, dNi_dy = N_deriv_real[0, i], N_deriv_real[1, i]\n            Bg[0, 3*i] = dNi_dx\n            Bg[1, 3*i] = dNi_dy\n            \n        Kge += Bg.T @ N_mat @ Bg * detJ * w_gp\n\n    return Ke, Kge\n\ndef analyze_plate(a, b, t, nx, ny, E, nu, N0):\n    \"\"\"\n    Performs the full buckling analysis for a given plate and mesh.\n    \"\"\"\n    # Material properties\n    D = E * t**3 / (12.0 * (1.0 - nu**2))\n    G = E / (2.0 * (1.0 + nu))\n    kappa_s = 5.0 / 6.0\n    \n    Db = D * np.array([[1.0, nu, 0.0], [nu, 1.0, 0.0], [0.0, 0.0, (1.0 - nu) / 2.0]])\n    Ds = kappa_s * G * t * np.identity(2)\n\n    # Mesh generation\n    num_nodes = (nx + 1) * (ny + 1)\n    num_dofs = 3 * num_nodes\n    K = np.zeros((num_dofs, num_dofs))\n    Kg = np.zeros((num_dofs, num_dofs))\n    \n    nodes_coords = np.array([[i * a / nx, j * b / ny] for j in range(ny + 1) for i in range(nx + 1)])\n\n    # Assemble global matrices\n    for j in range(ny):\n        for i in range(nx):\n            n1 = i + j * (nx + 1)\n            n2 = (i + 1) + j * (nx + 1)\n            n3 = (i + 1) + (j + 1) * (nx + 1)\n            n4 = i + (j + 1) * (nx + 1)\n            \n            elem_nodes = [n1, n2, n3, n4]\n            elem_coords = nodes_coords[elem_nodes]\n            \n            Ke, Kge = get_element_matrices(elem_coords, Db, Ds, N0)\n            \n            dof_map = np.array([[3 * n, 3 * n + 1, 3 * n + 2] for n in elem_nodes]).flatten()\n            K[np.ix_(dof_map, dof_map)] += Ke\n            Kg[np.ix_(dof_map, dof_map)] += Kge\n\n    # Apply clamped boundary conditions\n    constrained_dofs = []\n    for node_idx in range(num_nodes):\n        x, y = nodes_coords[node_idx]\n        if np.isclose(x, 0.0) or np.isclose(x, a) or np.isclose(y, 0.0) or np.isclose(y, b):\n            constrained_dofs.extend([3 * node_idx, 3 * node_idx + 1, 3 * node_idx + 2])\n    \n    all_dofs = np.arange(num_dofs)\n    free_dofs = np.setdiff1d(all_dofs, constrained_dofs)\n\n    K_free = K[np.ix_(free_dofs, free_dofs)]\n    Kg_free = Kg[np.ix_(free_dofs, free_dofs)]\n    \n    # Solve generalized eigenvalue problem: Kg * v = mu * K * v\n    try:\n        eigvals = linalg.eigh(Kg_free, K_free, eigvals_only=True)\n    except linalg.LinAlgError:\n        # Fallback to a more general solver if K_free is not positive definite\n        eigvals, _ = linalg.eig(Kg_free, K_free)\n        eigvals = np.real(eigvals)\n\n    mu_max = np.max(eigvals)\n    \n    if mu_max == 0 or np.isinf(mu_max) or np.isnan(mu_max):\n        return np.nan\n\n    lambda_crit = 1.0 / mu_max\n    return lambda_crit\n\ndef solve():\n    \"\"\"\n    Main driver function to run test cases and compute convergence rates.\n    \"\"\"\n    test_cases = [\n        {'a': 1.0, 'b': 1.0, 't': 0.10, 'meshes': [(4, 4), (8, 8), (16, 16)]},\n        {'a': 1.0, 'b': 1.0, 't': 0.01, 'meshes': [(4, 4), (8, 8), (16, 16)]},\n        {'a': 2.0, 'b': 1.0, 't': 0.05, 'meshes': [(6, 3), (12, 6), (24, 12)]},\n    ]\n    \n    E = 1.0\n    nu = 0.3\n    N0 = 1.0\n    \n    results = []\n    for case in test_cases:\n        lambdas = []\n        for nx, ny in case['meshes']:\n            lambda_val = analyze_plate(case['a'], case['b'], case['t'], nx, ny, E, nu, N0)\n            lambdas.append(lambda_val)\n\n        diff1 = abs(lambdas[1] - lambdas[0])\n        diff2 = abs(lambdas[2] - lambdas[1])\n        \n        # Regularization to avoid division by zero\n        if diff2  1e-16:\n            p = np.nan # Undefined convergence\n        else:\n            p = np.log(diff1 / diff2) / np.log(2.0)\n        \n        results.append(p)\n\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n\n```", "id": "2574106"}]}