{"hands_on_practices": [{"introduction": "在深入研究复杂的多维问题之前，我们首先从最简单的一维情况入手。这个练习将引导你从更通用的格林-拉格朗日应变（Green-Lagrange strain）出发，通过线性化推导出小应变（或称无穷小应变）的定义。通过分析一个简单的线性位移场，你将学会如何区分引起材料变形的应变分量和仅导致刚体平移而不产生应变的分量，这是理解应变-位移关系的基石。[@problem_id:2601702]", "problem": "考虑在参考构型中，一维弹性杆的小变形运动学设定，其物质坐标为 $X \\in [0,L]$。其运动由映射 $x(X) = X + u(X)$ 给出，其中 $u(X)$ 是位移场。使用 Green–Lagrange 应变（一种拉格朗日应变度量）的定义，并对其在零位移梯度附近进行线性化，以求得小（无穷小）应变。然后，对于仿射位移场 $u(X) = a X + b$（其中 $a$ 和 $b$ 为常数，且满足 $|a| \\ll 1$），计算由此产生的恒定无穷小应变，并简要地从均匀应变和刚体平移的角度，对 $a$ 和 $b$ 的作用进行物理解释。将最终应变表示为无量纲量。最终报告的答案必须是仅用 $a$ 表示的恒定无穷小应变的单一符号表达式。", "solution": "提交问题陈述以进行验证。\n\n**步骤1：提取已知条件**\n-   系统：一维弹性杆。\n-   物质坐标：$X \\in [0,L]$。\n-   运动映射：$x(X) = X + u(X)$，其中 $u(X)$ 是位移场。\n-   使用的应变度量：Green–Lagrange 应变，随后在零位移梯度附近进行线性化，以得到小（无穷小）应变。\n-   指定的位移场：$u(X) = a X + b$。\n-   常数：$a$, $b$。\n-   约束条件：$|a| \\ll 1$。\n-   任务1：计算给定位移场的恒定无穷小应变。\n-   任务2：对常数 $a$ 和 $b$ 的作用提供物理解释。\n-   最终答案要求：仅用 $a$ 表示的恒定无穷小应变的单一符号表达式。\n\n**步骤2：使用提取的已知条件进行验证**\n对问题进行严格审查。\n-   **科学基础**：该问题基于连续介质力学的基本原理，特别是可变形体运动学。参考构型、位移场、Green-Lagrange 应变及其线性化为无穷小应变等概念，是固体力学和有限元理论中的标准、成熟的课题。该问题在科学上是合理的。\n-   **适定性**：问题陈述清晰。它提供了所有必要的信息：运动学关系、待使用的应变定义（通过其名称和推导方法隐式给出）以及一个特定的位移场。目标是执行标准推导，并将其应用于一个简单的说明性案例。存在唯一且有意义的解。\n-   **客观性**：语言精确，没有主观或含糊的术语。\n\n**步骤3：结论与行动**\n判定该问题有效。它是连续介质力学中一个标准的、基础的练习。开始进行求解。\n\n解答过程如下。\n\n一维物体中一个点的运动由其最终位置 $x$ 描述，该位置是其在参考构型中初始位置 $X$ 的函数。这由映射 $x(X) = X + u(X)$ 给出，其中 $u(X)$ 是位移场。\n\n首先，我们定义变形梯度 $F$。在一维情况下，这是一个标量，定义为当前位置对参考位置的导数：\n$$\nF = \\frac{dx}{dX}\n$$\n代入给定的映射 $x(X)$：\n$$\nF = \\frac{d}{dX} (X + u(X)) = 1 + \\frac{du}{dX}\n$$\n项 $\\frac{du}{dX}$ 是位移梯度。\n\n接下来，我们引入 Green–Lagrange 应变张量 $\\mathbf{E}$。在一般三维设定中，其定义为 $\\mathbf{E} = \\frac{1}{2}(\\mathbf{F}^T \\mathbf{F} - \\mathbf{I})$，其中 $\\mathbf{F}$ 是变形梯度张量，$\\mathbf{I}$ 是单位张量。对于我们的一维情况，该定义简化为一个标量方程：\n$$\nE = \\frac{1}{2}(F^2 - 1)\n$$\n该应变度量是相对于参考（拉格朗日）构型定义的，并且是几何精确的，意味着它对任意大的变形和转动都有效。\n\n将 $F$ 的表达式代入 $E$ 的方程中：\n$$\nE = \\frac{1}{2} \\left( \\left(1 + \\frac{du}{dX}\\right)^2 - 1 \\right)\n$$\n展开平方项：\n$$\nE = \\frac{1}{2} \\left( 1 + 2\\frac{du}{dX} + \\left(\\frac{du}{dX}\\right)^2 - 1 \\right)\n$$\n简化表达式得到精确的一维 Green–Lagrange 应变：\n$$\nE = \\frac{du}{dX} + \\frac{1}{2}\\left(\\frac{du}{dX}\\right)^2\n$$\n这是位移梯度的非线性函数。\n\n问题要求推导小应变或无穷小应变，此处记为 $\\epsilon$。这是在小变形假设下，通过对 Green–Lagrange 应变 $E$ 进行线性化得到的。小变形运动学意味着位移梯度的量值远小于1：\n$$\n\\left|\\frac{du}{dX}\\right| \\ll 1\n$$\n在此条件下，与线性项 $\\frac{du}{dX}$ 相比，二次项 $\\left(\\frac{du}{dX}\\right)^2$ 可以忽略不计。通过忽略此高阶项，我们得到线性化应变，也称为无穷小应变或 Cauchy 应变：\n$$\n\\epsilon \\approx \\frac{du}{dX}\n$$\n这是一维小变形的基本应变-位移关系。\n\n现在，我们将此结果应用于指定的仿射位移场：\n$$\nu(X) = aX + b\n$$\n给定常数 $a$ 和 $b$，并有约束条件 $|a| \\ll 1$。我们计算位移梯度：\n$$\n\\frac{du}{dX} = \\frac{d}{dX}(aX + b) = a\n$$\n将此结果代入无穷小应变 $\\epsilon$ 的表达式中：\n$$\n\\epsilon = a\n$$\n应变为常数 $a$，与物质坐标 $X$ 无关。这与问题要求的“恒定无穷小应变”是一致的。条件 $|a| \\ll 1$ 验证了使用小应变近似的合理性，因为它直接对应于 $|\\frac{du}{dX}| \\ll 1$。应变 $a$ 是一个无量纲量，表示单位原始长度的变化量。\n\n最后，我们对常数 $a$ 和 $b$ 提供物理解释。\n-   常数 $a$ 是无穷小应变 $\\epsilon$。它代表杆的均匀变形。如果 $a > 0$，杆发生均匀伸长（拉伸）。如果 $a  0$，杆发生均匀压缩。位移分量 $aX$ 导致了杆的长度变化。\n-   常数 $b$ 代表杆中每个物质点的均匀位移。整个杆沿轴线刚性平移了距离 $b$，其长度、形状或方向均未发生改变。这是一种刚体平移。它不引起任何应变，这一点从它对 $X$ 求导后消失的事实中可以明显看出。\n\n最终要求的答案是仅用 $a$ 表示的恒定无穷小应变的值。根据推导，该值为 $a$。", "answer": "$$\n\\boxed{a}\n$$", "id": "2601702"}, {"introduction": "在掌握了一维基础后，我们将探索更贴近实际的二维变形。这个练习以经典的纯剪切变形为例，要求你同时计算精确的格林-拉格朗日应变张量 $\\mathbf{E}$ 和近似的小应变张量 $\\boldsymbol{\\epsilon}$。通过直接比较两者并量化它们之间的误差，你将深刻理解小应变假设的适用范围及其作为一种线性近似的本质，这对于在工程应用中做出正确判断至关重要。[@problem_id:2601672]", "problem": "一个均匀平面体经历一次简单剪切，其在 Lagrange 描述下的运动映射为：一个参考坐标为 $(X,Y)$ 的物质点移动到当前坐标 $(x,y)$，其关系遵循 $x = X + u_x(X,Y)$ 和 $y = Y + u_y(X,Y)$，其中位移场为 $u_x(X,Y) = \\gamma\\,Y$ 和 $u_y(X,Y) = 0$，$\\gamma \\in \\mathbb{R}$ 是一个常数剪切参数。从基本原理出发，也即根据变形梯度 $\\mathbf{F}$、右 Cauchy–Green 张量 $\\mathbf{C}$ 和 Green–Lagrange 应变张量 $\\mathbf{E}$ 的定义，以及无穷小（小）应变张量 $\\boldsymbol{\\epsilon}$ 作为位移梯度对称部分的定义，完成以下任务：\n- 推导与给定运动相关的精确 Green–Lagrange 应变张量 $\\mathbf{E}$。\n- 推导对应于相同位移场的无穷小（小）应变张量 $\\boldsymbol{\\epsilon}$。\n- 使用 Frobenius 范数 $\\|\\cdot\\|_{F}$ 作为标量误差度量，量化 $\\boldsymbol{\\epsilon}$ 和 $\\mathbf{E}$ 之间的相对误差，其定义为\n$$\nr(\\gamma) \\equiv \\frac{\\|\\mathbf{E} - \\boldsymbol{\\epsilon}\\|_{F}}{\\|\\mathbf{E}\\|_{F}}\\,,\n$$\n并将 $r(\\gamma)$ 化简为一个仅依赖于 $\\gamma$ 的闭式表达式。\n\n将最终答案表示为关于 $\\gamma$ 的单一闭式解析表达式。无需进行数值舍入，也无需报告物理单位。", "solution": "问题陈述经过严格审查，被认定是有效的。它提出了一个连续介质力学中的标准问题，该问题有科学依据、适定、客观且自洽。所有定义和所需步骤均为该领域的标准方法。因此，将推导其解。\n\n该问题描述了一个平面体中的简单剪切状态。一个最初位于参考位置 $\\mathbf{X} = X\\mathbf{i} + Y\\mathbf{j}$ 的物质点，移动到当前位置 $\\mathbf{x} = x\\mathbf{i} + y\\mathbf{j}$。位移场 $\\mathbf{u}(\\mathbf{X}) = \\mathbf{x}(\\mathbf{X}) - \\mathbf{X}$ 由其分量给出：$u_x(X,Y) = \\gamma Y$ 和 $u_y(X,Y) = 0$，其中 $\\gamma$ 是一个实值常数参数。\n\n第一步是计算变形梯度张量 $\\mathbf{F}$。根据定义，$\\mathbf{F}$ 是当前位置矢量 $\\mathbf{x}$ 相对于参考位置矢量 $\\mathbf{X}$ 的梯度：\n$$\n\\mathbf{F} = \\frac{\\partial \\mathbf{x}}{\\partial \\mathbf{X}} = \\mathbf{I} + \\frac{\\partial \\mathbf{u}}{\\partial \\mathbf{X}}\n$$\n其中 $\\mathbf{I}$ 是二阶单位张量。位移场的梯度 $\\nabla\\mathbf{u} = \\frac{\\partial \\mathbf{u}}{\\partial \\mathbf{X}}$，由位移分量相对于参考坐标 $(X, Y)$ 的偏导数矩阵表示：\n$$\n\\nabla\\mathbf{u} =\n\\begin{pmatrix}\n\\frac{\\partial u_x}{\\partial X}  \\frac{\\partial u_x}{\\partial Y} \\\\\n\\frac{\\partial u_y}{\\partial X}  \\frac{\\partial u_y}{\\partial Y}\n\\end{pmatrix}\n=\n\\begin{pmatrix}\n\\frac{\\partial}{\\partial X}(\\gamma Y)  \\frac{\\partial}{\\partial Y}(\\gamma Y) \\\\\n\\frac{\\partial}{\\partial X}(0)  \\frac{\\partial}{\\partial Y}(0)\n\\end{pmatrix}\n=\n\\begin{pmatrix}\n0  \\gamma \\\\\n0  0\n\\end{pmatrix}\n$$\n那么，变形梯度张量 $\\mathbf{F}$ 为：\n$$\n\\mathbf{F} = \\mathbf{I} + \\nabla\\mathbf{u} =\n\\begin{pmatrix}\n1  0 \\\\\n0  1\n\\end{pmatrix}\n+\n\\begin{pmatrix}\n0  \\gamma \\\\\n0  0\n\\end{pmatrix}\n=\n\\begin{pmatrix}\n1  \\gamma \\\\\n0  1\n\\end{pmatrix}\n$$\n接下来，我们推导右 Cauchy–Green 张量 $\\mathbf{C}$，其定义为 $\\mathbf{C} = \\mathbf{F}^T \\mathbf{F}$：\n$$\n\\mathbf{C} = \\mathbf{F}^T \\mathbf{F} =\n\\begin{pmatrix}\n1  0 \\\\\n\\gamma  1\n\\end{pmatrix}\n\\begin{pmatrix}\n1  \\gamma \\\\\n0  1\n\\end{pmatrix}\n=\n\\begin{pmatrix}\n(1)(1) + (0)(0)  (1)(\\gamma) + (0)(1) \\\\\n(\\gamma)(1) + (1)(0)  (\\gamma)(\\gamma) + (1)(1)\n\\end{pmatrix}\n=\n\\begin{pmatrix}\n1  \\gamma \\\\\n\\gamma  1 + \\gamma^2\n\\end{pmatrix}\n$$\nGreen–Lagrange 应变张量 $\\mathbf{E}$ 定义为 $\\mathbf{E} = \\frac{1}{2}(\\mathbf{C} - \\mathbf{I})$。使用 $\\mathbf{C}$ 的结果：\n$$\n\\mathbf{E} = \\frac{1}{2} \\left[\n\\begin{pmatrix}\n1  \\gamma \\\\\n\\gamma  1 + \\gamma^2\n\\end{pmatrix}\n-\n\\begin{pmatrix}\n1  0 \\\\\n0  1\n\\end{pmatrix}\n\\right]\n= \\frac{1}{2}\n\\begin{pmatrix}\n0  \\gamma \\\\\n\\gamma  \\gamma^2\n\\end{pmatrix}\n=\n\\begin{pmatrix}\n0  \\frac{\\gamma}{2} \\\\\n\\frac{\\gamma}{2}  \\frac{\\gamma^2}{2}\n\\end{pmatrix}\n$$\n这便是给定简单剪切变形的精确非线性应变张量。\n\n第二个任务是推导无穷小（小）应变张量 $\\boldsymbol{\\epsilon}$。它定义为位移梯度的对称部分，$\\boldsymbol{\\epsilon} = \\frac{1}{2}(\\nabla\\mathbf{u} + (\\nabla\\mathbf{u})^T)$：\n$$\n\\boldsymbol{\\epsilon} = \\frac{1}{2} \\left[\n\\begin{pmatrix}\n0  \\gamma \\\\\n0  0\n\\end{pmatrix}\n+\n\\begin{pmatrix}\n0  0 \\\\\n\\gamma  0\n\\end{pmatrix}\n\\right]\n= \\frac{1}{2}\n\\begin{pmatrix}\n0  \\gamma \\\\\n\\gamma  0\n\\end{pmatrix}\n=\n\\begin{pmatrix}\n0  \\frac{\\gamma}{2} \\\\\n\\frac{\\gamma}{2}  0\n\\end{pmatrix}\n$$\n第三个任务是计算相对误差 $r(\\gamma) = \\frac{\\|\\mathbf{E} - \\boldsymbol{\\epsilon}\\|_{F}}{\\|\\mathbf{E}\\|_{F}}$。首先，我们求出差值张量 $\\mathbf{E} - \\boldsymbol{\\epsilon}$：\n$$\n\\mathbf{E} - \\boldsymbol{\\epsilon} =\n\\begin{pmatrix}\n0  \\frac{\\gamma}{2} \\\\\n\\frac{\\gamma}{2}  \\frac{\\gamma^2}{2}\n\\end{pmatrix}\n-\n\\begin{pmatrix}\n0  \\frac{\\gamma}{2} \\\\\n\\frac{\\gamma}{2}  0\n\\end{pmatrix}\n=\n\\begin{pmatrix}\n0  0 \\\\\n0  \\frac{\\gamma^2}{2}\n\\end{pmatrix}\n$$\n一个矩阵 $\\mathbf{A}$ 的 Frobenius 范数 $\\|\\mathbf{A}\\|_F$ 由 $\\|\\mathbf{A}\\|_F = \\sqrt{\\sum_{i,j} A_{ij}^2}$ 给出。我们应用此公式计算误差表达式的分子和分母。\n\n差值张量的范数为：\n$$\n\\|\\mathbf{E} - \\boldsymbol{\\epsilon}\\|_{F} = \\sqrt{0^2 + 0^2 + 0^2 + \\left(\\frac{\\gamma^2}{2}\\right)^2} = \\sqrt{\\frac{\\gamma^4}{4}} = \\frac{|\\gamma^2|}{2} = \\frac{\\gamma^2}{2}\n$$\nGreen–Lagrange 应变张量的范数为：\n$$\n\\|\\mathbf{E}\\|_{F} = \\sqrt{0^2 + \\left(\\frac{\\gamma}{2}\\right)^2 + \\left(\\frac{\\gamma}{2}\\right)^2 + \\left(\\frac{\\gamma^2}{2}\\right)^2} = \\sqrt{\\frac{\\gamma^2}{4} + \\frac{\\gamma^2}{4} + \\frac{\\gamma^4}{4}} = \\sqrt{\\frac{2\\gamma^2 + \\gamma^4}{4}}\n$$\n从平方根中提出因子 $\\gamma^2$：\n$$\n\\|\\mathbf{E}\\|_{F} = \\frac{\\sqrt{\\gamma^2(2 + \\gamma^2)}}{2} = \\frac{|\\gamma|\\sqrt{2 + \\gamma^2}}{2}\n$$\n最后，相对误差 $r(\\gamma)$ 是这两个范数的比值：\n$$\nr(\\gamma) = \\frac{\\|\\mathbf{E} - \\boldsymbol{\\epsilon}\\|_{F}}{\\|\\mathbf{E}\\|_{F}} = \\frac{\\frac{\\gamma^2}{2}}{\\frac{|\\gamma|\\sqrt{2 + \\gamma^2}}{2}} = \\frac{\\gamma^2}{|\\gamma|\\sqrt{2 + \\gamma^2}}\n$$\n由于对于任意 $\\gamma \\in \\mathbb{R}$ 都有 $\\gamma^2 = |\\gamma|^2$，我们可以化简该表达式：\n$$\nr(\\gamma) = \\frac{|\\gamma|^2}{|\\gamma|\\sqrt{2 + \\gamma^2}} = \\frac{|\\gamma|}{\\sqrt{2 + \\gamma^2}}\n$$\n此表达式表明，小应变张量与精确 Green–Lagrange 应变张量之间的相对误差在 $\\gamma=0$ 时为零，并随着剪切参数的量值 $|\\gamma|$ 的增长而增长，在 $|\\gamma| \\to \\infty$ 时趋近于 $1$。这是预期的行为，因为线性近似在变形较大时变得不那么准确。", "answer": "$$\\boxed{\\frac{|\\gamma|}{\\sqrt{2+\\gamma^2}}}$$", "id": "2601672"}, {"introduction": "本章的最后一个实践将理论与有限元方法的计算实践联系起来，这是有限元分析工程师的一项核心技能。你将编写一个程序来执行“分片检验”（patch test），这是一个验证单元公式能否精确再现常应变状态的基本标准。通过为四边形单元（Q4）施加一个线性位移场，你将通过编程检验离散的应变-位移关系是否能够准确无误地还原理论上的常应变，从而确保单元的可靠性。[@problem_id:2601633]", "problem": "您必须编写一个完整、可运行的程序，用于在小变形情况下，验证一个双线性阶的二维等参四边形单元（通常称为 Q4）的恒定应变分片检验。该分片由四个 Q4 单元组成，在一个矩形上形成一个 $2 \\times 2$ 的网格。规定一个均匀的位移梯度，由此可知精确应变。您的程序必须在标准高斯求积点上，从节点位移中数值计算恢复的小应变，并报告一个比较计算应变与精确恒定应变的误差度量。\n\n从以下基本原理开始：\n- 小应变运动学：对于位移场 $\\boldsymbol{u}(\\boldsymbol{x}) = [u_x(\\boldsymbol{x}), u_y(\\boldsymbol{x})]^T$，小应变张量定义为\n$$\n\\boldsymbol{\\varepsilon}(\\boldsymbol{x}) = \\frac{1}{2}\\left(\\nabla \\boldsymbol{u}(\\boldsymbol{x}) + \\nabla \\boldsymbol{u}(\\boldsymbol{x})^T\\right).\n$$\n- 对于自然坐标 $(\\xi,\\eta) \\in [-1,1]^2$ 的 Q4 单元，其等参映射使用双线性形函数\n$$\nN_1(\\xi,\\eta) = \\tfrac{1}{4}(1-\\xi)(1-\\eta),\\quad\nN_2(\\xi,\\eta) = \\tfrac{1}{4}(1+\\xi)(1-\\eta),\\quad\nN_3(\\xi,\\eta) = \\tfrac{1}{4}(1+\\xi)(1+\\eta),\\quad\nN_4(\\xi,\\eta) = \\tfrac{1}{4}(1-\\xi)(1+\\eta).\n$$\n它们关于 $(\\xi,\\eta)$ 的导数，与几何映射的雅可比矩阵一起，允许您通过链式法则获得空间导数 $\\partial N_a/\\partial x$ 和 $\\partial N_a/\\partial y$。每个单元内的位移场通过 $\\boldsymbol{u}_h(\\boldsymbol{x}) = \\sum_{a=1}^4 N_a(\\xi,\\eta)\\,\\boldsymbol{u}_a$ 进行插值，其中 $\\boldsymbol{u}_a$ 是节点位移。然后，位移梯度由 $\\nabla \\boldsymbol{u}_h = \\sum_{a=1}^4 \\boldsymbol{u}_a \\otimes \\nabla N_a$ 计算得出。\n\n您的程序必须：\n- 在一个尺寸为 $L_x \\times L_y$ 的矩形上构建一个由 Q4 单元组成的 $2 \\times 2$ 分片，节点离散化在 $x \\in \\{0, L_x/2, L_x\\}$ 和 $y \\in \\{0, L_y/2, L_y\\}$，总共有 $9$ 个节点和 $4$ 个单元。\n- 每个单元使用与 $(\\xi,\\eta)$ 角点 $(-1,-1)$、$(+1,-1)$、$(+1,+1)$、$(-1,+1)$ 相对应的局部节点排序，即左下、右下、右上、左上。\n- 规定一个均匀位移场\n$$\n\\boldsymbol{u}(\\boldsymbol{x}) = \\boldsymbol{u}_0 + \\mathbf{G}\\,\\boldsymbol{x},\n$$\n其中 $\\boldsymbol{x} = [x,y]^T$，$\\boldsymbol{u}_0 \\in \\mathbb{R}^2$ 是一个恒定的平移量，$\\mathbf{G} \\in \\mathbb{R}^{2 \\times 2}$ 是一个恒定的位移梯度。这将产生一个精确的恒定小应变张量\n$$\n\\boldsymbol{\\varepsilon}^{\\text{exact}} = \\tfrac{1}{2}\\left(\\mathbf{G} + \\mathbf{G}^T\\right).\n$$\n- 对每个单元和每个标准 $2 \\times 2$ 高斯点 $(\\xi,\\eta) \\in \\{(-\\tfrac{1}{\\sqrt{3}},-\\tfrac{1}{\\sqrt{3}}), (\\tfrac{1}{\\sqrt{3}},-\\tfrac{1}{\\sqrt{3}}), (\\tfrac{1}{\\sqrt{3}},\\tfrac{1}{\\sqrt{3}}), (-\\tfrac{1}{\\sqrt{3}},\\tfrac{1}{\\sqrt{3}})\\}$，通过以下步骤计算数值恢复的小应变张量 $\\boldsymbol{\\varepsilon}^{\\text{num}}$：\n    - 在高斯点处，通过等参雅可比计算 $\\partial N_a/\\partial x$ 和 $\\partial N_a/\\partial y$。\n    - 从节点位移计算 $\\nabla \\boldsymbol{u}_h$，然后计算 $\\boldsymbol{\\varepsilon}^{\\text{num}} = \\tfrac{1}{2}\\left(\\nabla \\boldsymbol{u}_h + \\nabla \\boldsymbol{u}_h^T\\right)$。\n- 通过数值应变与精确应变之差在所有单元的所有高斯点上的弗罗贝尼乌斯范数的均方根来量化分片检验误差，即\n$$\nE_{\\text{RMS}} = \\sqrt{\\frac{1}{N}\\sum_{q=1}^{N} \\left\\| \\boldsymbol{\\varepsilon}^{\\text{num}}(\\boldsymbol{x}_q) - \\boldsymbol{\\varepsilon}^{\\text{exact}} \\right\\|_F^2},\n$$\n其中 $\\|\\cdot\\|_F$ 是弗罗贝尼乌斯范数，$N$ 是分片中高斯点的总数。对于一个正确的分片检验，这个数值应在机器精度的数量级上。\n\n测试套件：\n实现您的程序来评估以下五个参数集的 $E_{\\text{RMS}}$。所有量均为无量纲。\n- 情况 1 (中等尺寸矩形上的一般恒定梯度):\n    - $L_x = 2$, $L_y = 1$\n    - $\\boldsymbol{u}_0 = [0.1, -0.2]^T$\n    - $\\mathbf{G} = \\begin{bmatrix} 0.02  0.01 \\\\ 0  -0.03 \\end{bmatrix}$\n- 情况 2 (纯刚体平移；零应变):\n    - $L_x = 3$, $L_y = 2$\n    - $\\boldsymbol{u}_0 = [-5.0, 7.0]^T$\n    - $\\mathbf{G} = \\begin{bmatrix} 0  0 \\\\ 0  0 \\end{bmatrix}$\n- 情况 3 (纯刚体旋转；零应变):\n    - $L_x = 1$, $L_y = 1$\n    - $\\boldsymbol{u}_0 = [0, 0]^T$\n    - $\\mathbf{G} = \\begin{bmatrix} 0  -0.2 \\\\ 0.2  0 \\end{bmatrix}$\n- 情况 4 (高纵横比矩形):\n    - $L_x = 2.5$, $L_y = 10^{-3}$\n    - $\\boldsymbol{u}_0 = [-10^{-3}, 2 \\cdot 10^{-3}]^T$\n    - $\\mathbf{G} = \\begin{bmatrix} 10^{-4}  2 \\cdot 10^{-4} \\\\ 3 \\cdot 10^{-4}  -2 \\cdot 10^{-4} \\end{bmatrix}$\n- 情况 5 (高矩形上的对称非平凡梯度):\n    - $L_x = 0.5$, $L_y = 2$\n    - $\\boldsymbol{u}_0 = [0, 0]^T$\n    - $\\mathbf{G} = \\begin{bmatrix} 0.03  0.01 \\\\ 0.01  0.005 \\end{bmatrix}$\n\n最终输出格式：\n- 您的程序应生成单行输出，其中包含一个用方括号括起来的逗号分隔列表形式的结果，其顺序与上述情况相同，每个条目是对应情况的标量 $E_{\\text{RMS}}$。例如，一个包含三个假设结果的输出应如“[$r_1$,$r_2$,$r_3$]”。不要打印任何其他文本。", "solution": "问题陈述已通过验证。\n\n### 步骤 1：提取已知条件\n\n- **问题类型**：在小变形情况下，对一个二维等参四边形单元（Q4）进行恒定应变分片检验的验证。\n- **网格**：在一个尺寸为 $L_x \\times L_y$ 的矩形上，由4个Q4单元组成的 $2 \\times 2$ 分片。该网格有9个节点，其坐标为 $x \\in \\{0, L_x/2, L_x\\}$ 和 $y \\in \\{0, L_y/2, L_y\\}$。\n- **小应变张量**：$\\boldsymbol{\\varepsilon}(\\boldsymbol{x}) = \\frac{1}{2}\\left(\\nabla \\boldsymbol{u}(\\boldsymbol{x}) + \\nabla \\boldsymbol{u}(\\boldsymbol{x})^T\\right)$。\n- **Q4 形函数**:\n  - $N_1(\\xi,\\eta) = \\tfrac{1}{4}(1-\\xi)(1-\\eta)$\n  - $N_2(\\xi,\\eta) = \\tfrac{1}{4}(1+\\xi)(1-\\eta)$\n  - $N_3(\\xi,\\eta) = \\tfrac{1}{4}(1+\\xi)(1+\\eta)$\n  - $N_4(\\xi,\\eta) = \\tfrac{1}{4}(1-\\xi)(1+\\eta)$\n- **局部节点排序**：对应于 $(\\xi,\\eta)$ 角点 $(-1,-1)$、$(+1,-1)$、$(+1,+1)$、$(-1,+1)$。\n- **位移场插值**：$\\boldsymbol{u}_h(\\boldsymbol{x}) = \\sum_{a=1}^4 N_a(\\xi,\\eta)\\,\\boldsymbol{u}_a$。\n- **规定的位移场**：$\\boldsymbol{u}(\\boldsymbol{x}) = \\boldsymbol{u}_0 + \\mathbf{G}\\,\\boldsymbol{x}$，其中 $\\boldsymbol{u}_0$ 是一个常数向量，$\\mathbf{G}$ 是一个恒定位移梯度矩阵。\n- **精确应变张量**：$\\boldsymbol{\\varepsilon}^{\\text{exact}} = \\tfrac{1}{2}\\left(\\mathbf{G} + \\mathbf{G}^T\\right)$。\n- **数值应变计算点**：标准的 $2 \\times 2$ 高斯点，位于 $(\\xi,\\eta) \\in \\{(-\\tfrac{1}{\\sqrt{3}},-\\tfrac{1}{\\sqrt{3}}), (\\tfrac{1}{\\sqrt{3}},-\\tfrac{1}{\\sqrt{3}}), (\\tfrac{1}{\\sqrt{3}},\\tfrac{1}{\\sqrt{3}}), (-\\tfrac{1}{\\sqrt{3}},\\tfrac{1}{\\sqrt{3}})\\}$。\n- **误差度量**：$E_{\\text{RMS}} = \\sqrt{\\frac{1}{N}\\sum_{q=1}^{N} \\left\\| \\boldsymbol{\\varepsilon}^{\\text{num}}(\\boldsymbol{x}_q) - \\boldsymbol{\\varepsilon}^{\\text{exact}} \\right\\|_F^2}$，其中 $N$ 是高斯点的总数。\n- **测试用例**:\n    - 情况 1: $L_x = 2$, $L_y = 1$, $\\boldsymbol{u}_0 = [0.1, -0.2]^T$, $\\mathbf{G} = \\begin{bmatrix} 0.02  0.01 \\\\ 0  -0.03 \\end{bmatrix}$。\n    - 情况 2: $L_x = 3$, $L_y = 2$, $\\boldsymbol{u}_0 = [-5.0, 7.0]^T$, $\\mathbf{G} = \\begin{bmatrix} 0  0 \\\\ 0  0 \\end{bmatrix}$。\n    - 情况 3: $L_x = 1$, $L_y = 1$, $\\boldsymbol{u}_0 = [0, 0]^T$, $\\mathbf{G} = \\begin{bmatrix} 0  -0.2 \\\\ 0.2  0 \\end{bmatrix}$。\n    - 情况 4: $L_x = 2.5$, $L_y = 10^{-3}$, $\\boldsymbol{u}_0 = [-10^{-3}, 2 \\cdot 10^{-3}]^T$, $\\mathbf{G} = \\begin{bmatrix} 10^{-4}  2 \\cdot 10^{-4} \\\\ 3 \\cdot 10^{-4}  -2 \\cdot 10^{-4} \\end{bmatrix}$。\n    - 情况 5: $L_x = 0.5$, $L_y = 2$, $\\boldsymbol{u}_0 = [0, 0]^T$, $\\mathbf{G} = \\begin{bmatrix} 0.03  0.01 \\\\ 0.01  0.005 \\end{bmatrix}$。\n\n### 步骤 2：使用提取的已知条件进行验证\n\n分析问题陈述的有效性。\n- **科学或事实上的不健全性**：该问题在科学上是合理的。它描述了分片检验，这是有限元方法中一个标准且基础的验证过程。所提供的小应变运动学、双线性形函数、等参映射和应变恢复的方程在计算力学领域都是正确且标准的。\n- **不可形式化或不相关**：该问题高度可形式化，并与有限元方法中的应变-位移关系主题直接相关。\n- **不完整或矛盾的设置**：该问题是完全自洽的。它提供了所有必要的信息：网格几何、单元类型、形函数、局部排序、规定的位移场、分析点（高斯求积）、精确的误差度量以及一套完整的测试参数。没有矛盾之处。\n- **不切实际或不可行**：这些条件对于数值测试是标准的。分片检验的设计目的就是测试代码再现一个已知的简单解的能力。这些参数对于小变形是物理上合理的。\n- **不适定或结构不良**：该问题是适定的。该过程是确定性的，并为每个测试用例产生唯一的数值结果。预期的结果（误差在机器精度数量级）是双线性形函数对于线性场具有完备性的直接推论。\n- **伪深刻、琐碎、同义反复**：虽然预期的结果是误差接近于零，但实现过程并非琐碎。它要求正确应用等参映射、导数的链式法则以及应变-位移关系的组合。这是一个实质性的计算问题，而不是一个简单的练习。\n- **超出科学可验证性范围**：该问题完全可以通过实现所描述的数值程序并执行计算来验证。\n\n### 步骤 3：结论与行动\n\n该问题是 **有效的**。这是一个来自计算固体力学领域的适定、科学上合理且完整的问题陈述。将提供一个合理的解答。\n\n---\n\n该问题要求为一个由四个 Q4 双线性等参单元组成的网格实现恒定应变分片检验。分片检验的核心原则是验证有限元公式是否能精确地（在机器精度范围内）再现一个恒定的应变状态。对于 Q4 单元，其形函数是双线性的，已知一个作为空间坐标线性函数的位移场可以被精确表示。规定的位移场 $\\boldsymbol{u}(\\boldsymbol{x}) = \\boldsymbol{u}_0 + \\mathbf{G}\\,\\boldsymbol{x}$ 确实是线性的，这意味着一个恒定的位移梯度 $\\nabla\\boldsymbol{u} = \\mathbf{G}$ 和一个恒定的应变张量 $\\boldsymbol{\\varepsilon}^{\\text{exact}} = \\frac{1}{2}(\\mathbf{G} + \\mathbf{G}^T)$。数值程序必须在所有积分点上恢复这个精确的恒定应变。\n\n该过程如下：\n\n首先，我们定义计算域和网格。一个在矩形 $[0, L_x] \\times [0, L_y]$ 上的 $2 \\times 2$ 规则网格由 $9$ 个节点和 $4$ 个单元组成。设全局节点索引排列如下：\n$$\n\\begin{matrix}\n6  -  7  -  8 \\\\\n|  E_3  |  E_4  | \\\\\n3  -  4  -  5 \\\\\n|  E_1  |  E_2  | \\\\\n0  -  1  -  2\n\\end{matrix}\n$$\n节点 $i$ 的坐标记为 $\\boldsymbol{x}_i$。遵循指定的局部节点排序（左下、右下、右上、左上），将全局节点索引映射到局部单元节点的单元连接性为：\n- 单元 1: $[0, 1, 4, 3]$\n- 单元 2: $[1, 2, 5, 4]$\n- 单元 3: $[3, 4, 7, 6]$\n- 单元 4: $[4, 5, 8, 7]$\n\n每个全局节点 $i$ 的节点位移 $\\boldsymbol{u}_i$ 通过在节点坐标处评估规定的场来计算：$\\boldsymbol{u}_i = \\boldsymbol{u}(\\boldsymbol{x}_i) = \\boldsymbol{u}_0 + \\mathbf{G} \\boldsymbol{x}_i$。\n\n计算的核心发生在每个单元内的每个指定高斯求积点 $(\\xi_q, \\eta_q)$ 处。对于 Q4 单元，空间导数与自然坐标系 $(\\xi, \\eta)$ 中导数之间的关系由链式法则给出：\n$$\n\\begin{Bmatrix} \\frac{\\partial}{\\partial \\xi} \\\\ \\frac{\\partial}{\\partial \\eta} \\end{Bmatrix} = \\begin{bmatrix} \\frac{\\partial x}{\\partial \\xi}  \\frac{\\partial y}{\\partial \\xi} \\\\ \\frac{\\partial x}{\\partial \\eta}  \\frac{\\partial y}{\\partial \\eta} \\end{bmatrix} \\begin{Bmatrix} \\frac{\\partial}{\\partial x} \\\\ \\frac{\\partial}{\\partial y} \\end{Bmatrix} = \\mathbf{J} \\begin{Bmatrix} \\frac{\\partial}{\\partial x} \\\\ \\frac{\\partial}{\\partial y} \\end{Bmatrix}\n$$\n其中 $\\mathbf{J}$ 是等参映射 $\\boldsymbol{x}(\\xi,\\eta) = \\sum_{a=1}^4 N_a(\\xi,\\eta) \\boldsymbol{x}_a$ 的雅可比矩阵。$\\mathbf{J}$ 的分量计算为 $J_{11} = \\sum_{a=1}^4 \\frac{\\partial N_a}{\\partial\\xi} x_a$， $J_{12} = \\sum_{a=1}^4 \\frac{\\partial N_a}{\\partial\\xi} y_a$ 等等。形函数 $N_a$ 关于 $(\\xi, \\eta)$ 的导数是简单的线性函数。例如，$\\frac{\\partial N_1}{\\partial\\xi} = -\\frac{1}{4}(1-\\eta)$。\n\n为了计算应变，我们需要形函数的空间导数，这可以通过反转该关系获得：\n$$\n\\begin{Bmatrix} \\frac{\\partial N_a}{\\partial x} \\\\ \\frac{\\partial N_a}{\\partial y} \\end{Bmatrix} = \\mathbf{J}^{-1} \\begin{Bmatrix} \\frac{\\partial N_a}{\\partial \\xi} \\\\ \\frac{\\partial N_a}{\\partial \\eta} \\end{Bmatrix}\n$$\n单元内数值计算的位移梯度张量则为 $\\nabla \\boldsymbol{u}_h = \\sum_{a=1}^4 \\boldsymbol{u}_a \\otimes \\nabla N_a$。其分量为：\n$$\n\\begin{aligned}\n(\\nabla \\boldsymbol{u}_h)_{11} = \\frac{\\partial u_x}{\\partial x} = \\sum_{a=1}^4 \\frac{\\partial N_a}{\\partial x} u_{ax} \\\\\n(\\nabla \\boldsymbol{u}_h)_{12} = \\frac{\\partial u_y}{\\partial x} = \\sum_{a=1}^4 \\frac{\\partial N_a}{\\partial x} u_{ay} \\\\\n(\\nabla \\boldsymbol{u}_h)_{21} = \\frac{\\partial u_x}{\\partial y} = \\sum_{a=1}^4 \\frac{\\partial N_a}{\\partial y} u_{ax} \\\\\n(\\nabla \\boldsymbol{u}_h)_{22} = \\frac{\\partial u_y}{\\partial y} = \\sum_{a=1}^4 \\frac{\\partial N_a}{\\partial y} u_{ay}\n\\end{aligned}\n$$\n其中 $\\boldsymbol{u}_a = [u_{ax}, u_{ay}]^T$ 是单元局部节点 $a$ 的位移。由此，可以找到数值小应变张量：$\\boldsymbol{\\varepsilon}^{\\text{num}} = \\frac{1}{2}\\left(\\nabla \\boldsymbol{u}_h + (\\nabla \\boldsymbol{u}_h)^T\\right)$。\n\n这个数值应变张量 $\\boldsymbol{\\varepsilon}^{\\text{num}}$ 在四个单元中每个单元的四个高斯点处进行计算。误差通过在所有 $N=16$ 个求积点上，差值 $\\boldsymbol{\\varepsilon}^{\\text{num}} - \\boldsymbol{\\varepsilon}^{\\text{exact}}$ 的弗罗贝尼乌斯范数的均方根来量化。\n$$\nE_{\\text{RMS}} = \\sqrt{\\frac{1}{16}\\sum_{q=1}^{16} \\left\\| \\boldsymbol{\\varepsilon}^{\\text{num}}(\\boldsymbol{x}_q) - \\boldsymbol{\\varepsilon}^{\\text{exact}} \\right\\|_F^2}\n$$\n对于一个成功的分片检验，这个误差必须在机器精度的数量级上，这表明代码正确地实现了单元公式。即使对于扭曲的单元（如情况 4 中所测试的），这也成立。情况 2 和 3 测试了表示刚体运动（平移和旋转）的能力，这必须导致零应变。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Verifies the constant-strain patch test for a 2x2 mesh of Q4 elements.\n    \"\"\"\n    test_cases = [\n        {\n            \"Lx\": 2.0, \"Ly\": 1.0,\n            \"u0\": np.array([0.1, -0.2]),\n            \"G\": np.array([[0.02, 0.01], [0.0, -0.03]]),\n        },\n        {\n            \"Lx\": 3.0, \"Ly\": 2.0,\n            \"u0\": np.array([-5.0, 7.0]),\n            \"G\": np.array([[0.0, 0.0], [0.0, 0.0]]),\n        },\n        {\n            \"Lx\": 1.0, \"Ly\": 1.0,\n            \"u0\": np.array([0.0, 0.0]),\n            \"G\": np.array([[0.0, -0.2], [0.2, 0.0]]),\n        },\n        {\n            \"Lx\": 2.5, \"Ly\": 1e-3,\n            \"u0\": np.array([-1e-3, 2e-3]),\n            \"G\": np.array([[1e-4, 2e-4], [3e-4, -2e-4]]),\n        },\n        {\n            \"Lx\": 0.5, \"Ly\": 2.0,\n            \"u0\": np.array([0.0, 0.0]),\n            \"G\": np.array([[0.03, 0.01], [0.01, 0.005]]),\n        },\n    ]\n\n    results = []\n    for case in test_cases:\n        Lx, Ly, u0, G = case[\"Lx\"], case[\"Ly\"], case[\"u0\"], case[\"G\"]\n\n        # 1. Define Mesh Geometry and Connectivity\n        # 9 global nodes in a 3x3 grid\n        x_coords = np.array([0.0, Lx/2.0, Lx])\n        y_coords = np.array([0.0, Ly/2.0, Ly])\n        node_coords = np.array([[x, y] for y in y_coords for x in x_coords])\n\n        # 4 elements with local node ordering: BL, BR, TR, TL -> CCW\n        connectivity = [\n            [0, 1, 4, 3],  # Element 1 (bottom-left)\n            [1, 2, 5, 4],  # Element 2 (bottom-right)\n            [3, 4, 7, 6],  # Element 3 (top-left)\n            [4, 5, 8, 7],  # Element 4 (top-right)\n        ]\n\n        # 2. Prescribe Nodal Displacements\n        # u(x) = u0 + G @ x  -->  U = u0_T + X @ G_T for all nodes\n        nodal_disps = u0 + node_coords @ G.T\n\n        # 3. Define Gauss Quadrature Points (2x2)\n        gp_coord = 1.0 / np.sqrt(3.0)\n        gauss_points = [\n            (-gp_coord, -gp_coord), (gp_coord, -gp_coord),\n            (gp_coord, gp_coord), (-gp_coord, gp_coord)\n        ]\n\n        # 4. Calculate Exact Strain Tensor (constant)\n        epsilon_exact = 0.5 * (G + G.T)\n\n        # 5. Loop over elements and Gauss points to compute numerical strain\n        total_squared_error_norm = 0.0\n        \n        for elem_nodes in connectivity:\n            elem_node_coords = node_coords[elem_nodes]\n            elem_node_disps = nodal_disps[elem_nodes]\n\n            for xi, eta in gauss_points:\n                # Derivatives of shape functions w.r.t. natural coordinates (xi, eta)\n                # N_1, N_2, N_3, N_4\n                dN_dxi = 0.25 * np.array([-(1 - eta), (1 - eta), (1 + eta), -(1 + eta)])\n                dN_deta = 0.25 * np.array([-(1 - xi), -(1 + xi), (1 + xi),  (1 - xi)])\n                \n                # Jacobian matrix of the isoparametric mapping\n                J = np.zeros((2, 2))\n                J[0, 0] = dN_dxi @ elem_node_coords[:, 0]  # dx/dxi\n                J[0, 1] = dN_dxi @ elem_node_coords[:, 1]  # dy/dxi\n                J[1, 0] = dN_deta @ elem_node_coords[:, 0] # dx/deta\n                J[1, 1] = dN_deta @ elem_node_coords[:, 1] # dy/deta\n\n                # Inverse of Jacobian to find spatial derivatives\n                J_inv = np.linalg.inv(J)\n                \n                # Derivatives of shape functions w.r.t. physical coordinates (x, y)\n                dN_dxy = J_inv @ np.vstack((dN_dxi, dN_deta))\n                dN_dx = dN_dxy[0, :]\n                dN_dy = dN_dxy[1, :]\n\n                # Numerical displacement gradient tensor\n                # (grad u)_ij = d(u_i)/d(x_j)\n                grad_u_num = np.array([\n                    [dN_dx @ elem_node_disps[:, 0], dN_dy @ elem_node_disps[:, 0]], # dux/dx, dux/dy\n                    [dN_dx @ elem_node_disps[:, 1], dN_dy @ elem_node_disps[:, 1]]  # duy/dx, duy/dy\n                ])\n\n                # Numerical strain tensor\n                epsilon_num = 0.5 * (grad_u_num + grad_u_num.T)\n\n                # Error calculation\n                error_tensor = epsilon_num - epsilon_exact\n                squared_frobenius_norm = np.sum(error_tensor**2)\n                total_squared_error_norm += squared_frobenius_norm\n\n        # 6. Compute final RMS error\n        num_gauss_points_total = len(connectivity) * len(gauss_points)\n        e_rms = np.sqrt(total_squared_error_norm / num_gauss_points_total)\n        results.append(e_rms)\n\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n\n```", "id": "2601633"}]}