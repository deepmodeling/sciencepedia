{"hands_on_practices": [{"introduction": "要真正掌握B-bar方法，我们必须从其数学基础开始。第一个练习将引导你为简单的双线性四边形单元推导其平均体积应变-位移算子 $\\bar{\\boldsymbol{B}}_{\\text{vol}}$。通过完成这个计算，你将巩固对如何将空间变化的应变算子投影为单元上的一个常数值的理解 [@problem_id:2542562]。", "problem": "考虑一个二维平面应变问题中的四节点双线性四边形 (Q4) 有限元。设物理单元在物理坐标 $(x,y)$ 中占据一个单位正方形，其顶点为 $(0,0)$、$(1,0)$、$(1,1)$、$(0,1)$。等参母坐标为 $(\\xi,\\eta)\\in[-1,1]\\times[-1,1]$，到物理单元的映射是仿射的，由 $x=\\tfrac{1}{2}(1+\\xi)$ 和 $y=\\tfrac{1}{2}(1+\\eta)$ 给出。该单元的节点位移向量排列如下\n$$\n\\boldsymbol{d}_e=\\begin{bmatrix}u_{1x} & u_{1y} & u_{2x} & u_{2y} & u_{3x} & u_{3y} & u_{4x} & u_{4y}\\end{bmatrix}^{\\mathsf{T}}.\n$$\n在平面应变中，某一点的体积应变为无穷小应变张量的迹，即 $\\epsilon_v=\\epsilon_{xx}+\\epsilon_{yy}$。相关的体积应变-位移算子行向量为 $ \\boldsymbol{B}_{\\text{vol}}(x,y)$，使得 $ \\epsilon_v(x,y)=\\boldsymbol{B}_{\\text{vol}}(x,y)\\,\\boldsymbol{d}_e$。对于 Q4 单元，\n$$\n\\boldsymbol{B}_{\\text{vol}}(x,y)=\\begin{bmatrix}N_{1,x} & N_{1,y} & N_{2,x} & N_{2,y} & N_{3,x} & N_{3,y} & N_{4,x} & N_{4,y}\\end{bmatrix},\n$$\n其中 $N_i(\\xi,\\eta)$ 是标准的双线性形函数，下标 $x, y$ 表示对物理坐标的偏导数。$B$-bar 方法将 $\\boldsymbol{B}_{\\text{vol}}(x,y)$ 替换为其单元平均值\n$$\n\\bar{\\boldsymbol{B}}_{\\text{vol}}=\\frac{1}{A_e}\\int_{\\Omega_e}\\boldsymbol{B}_{\\text{vol}}(x,y)\\,\\mathrm{d}\\Omega,\n$$\n其中 $A_e$ 是单元面积，$\\Omega_e$ 是其域。\n\n从这些定义出发，仅使用映射、在 $[-1,1]^2$ 上的标准双线性形函数以及积分的变量替换公式，推导此单位正方形单元的平均体积算子行向量 $\\bar{\\boldsymbol{B}}_{\\text{vol}}$ 的闭式表达式。请在您的推导中明确说明为什么结果在整个单元上是常数。将您的最终结果表示为一个 $1\\times 8$ 的行矩阵，使用精确有理数，并按 $\\begin{bmatrix}N_{1,x} & N_{1,y} & N_{2,x} & N_{2,y} & N_{3,x} & N_{3,y} & N_{4,x} & N_{4,y}\\end{bmatrix}$ 的顺序排列。不需要四舍五入，也不需要物理单位。", "solution": "所述问题在科学上是合理的、自洽的且适定的。这是有限元方法理论中的一个标准练习。所有提供的信息都是一致的，足以推导出唯一且可验证的解。因此，我们开始进行推导。\n\n目标是为一个特定的四节点双线性四边形 (Q4) 单元计算其平均体积应变-位移算子 $\\bar{\\boldsymbol{B}}_{\\text{vol}}$。该算子被定义为局部算子 $\\boldsymbol{B}_{\\text{vol}}(x,y)$ 的单元平均值：\n$$\n\\bar{\\boldsymbol{B}}_{\\text{vol}} = \\frac{1}{A_e}\\int_{\\Omega_e}\\boldsymbol{B}_{\\text{vol}}(x,y)\\,\\mathrm{d}\\Omega\n$$\n其中 $A_e$ 是单元 $\\Omega_e$ 的面积。局部算子由下式给出：\n$$\n\\boldsymbol{B}_{\\text{vol}}(x,y) = \\begin{bmatrix} N_{1,x} & N_{1,y} & N_{2,x} & N_{2,y} & N_{3,x} & N_{3,y} & N_{4,x} & N_{4,y} \\end{bmatrix}\n$$\n推导过程首先将形函数关于物理坐标 $(x,y)$ 的导数用关于母坐标 $(\\xi,\\eta)$ 的导数表示，然后在单元域上进行积分。\n\n首先，我们在母域 $[-1,1] \\times [-1,1]$ 上定义标准的双线性形函数 $N_i(\\xi, \\eta)$。节点编号 $1,2,3,4$ 对应于物理空间中的顶点 $(0,0), (1,0), (1,1), (0,1)$，这又依次对应于母空间中的顶点 $(-1,-1), (1,-1), (1,1), (-1,1)$。形函数为：\n$$\n\\begin{aligned}\nN_1(\\xi, \\eta) &= \\frac{1}{4}(1-\\xi)(1-\\eta) \\\\\nN_2(\\xi, \\eta) &= \\frac{1}{4}(1+\\xi)(1-\\eta) \\\\\nN_3(\\xi, \\eta) &= \\frac{1}{4}(1+\\xi)(1+\\eta) \\\\\nN_4(\\xi, \\eta) &= \\frac{1}{4}(1-\\xi)(1+\\eta)\n\\end{aligned}\n$$\n接下来，我们计算这些形函数关于母坐标 $\\xi$ 和 $\\eta$ 的导数。\n$$\n\\begin{array}{ll}\nN_{1,\\xi} = -\\frac{1}{4}(1-\\eta), & N_{1,\\eta} = -\\frac{1}{4}(1-\\xi) \\\\\nN_{2,\\xi} = \\frac{1}{4}(1-\\eta), & N_{2,\\eta} = -\\frac{1}{4}(1+\\xi) \\\\\nN_{3,\\xi} = \\frac{1}{4}(1+\\eta), & N_{3,\\eta} = \\frac{1}{4}(1+\\xi) \\\\\nN_{4,\\xi} = -\\frac{1}{4}(1+\\eta), & N_{4,\\eta} = \\frac{1}{4}(1-\\xi)\n\\end{array}\n$$\n为了将这些导数转换到物理坐标系，我们需要给定映射 $x=\\frac{1}{2}(1+\\xi)$ 和 $y=\\frac{1}{2}(1+\\eta)$ 的雅可比矩阵 $\\boldsymbol{J}$。\n$$\n\\boldsymbol{J} = \\begin{bmatrix} \\frac{\\partial x}{\\partial \\xi} & \\frac{\\partial y}{\\partial \\xi} \\\\ \\frac{\\partial x}{\\partial \\eta} & \\frac{\\partial y}{\\partial \\eta} \\end{bmatrix} = \\begin{bmatrix} \\frac{1}{2} & 0 \\\\ 0 & \\frac{1}{2} \\end{bmatrix}\n$$\n雅可比行列式为 $\\det(\\boldsymbol{J}) = (\\frac{1}{2})(\\frac{1}{2}) - (0)(0) = \\frac{1}{4}$。雅可比矩阵的逆为：\n$$\n\\boldsymbol{J}^{-1} = \\frac{1}{\\det(\\boldsymbol{J})} \\begin{bmatrix} \\frac{1}{2} & 0 \\\\ 0 & \\frac{1}{2} \\end{bmatrix} = 4 \\begin{bmatrix} \\frac{1}{2} & 0 \\\\ 0 & \\frac{1}{2} \\end{bmatrix} = \\begin{bmatrix} 2 & 0 \\\\ 0 & 2 \\end{bmatrix}\n$$\n由于映射是仿射的，$\\boldsymbol{J}$ 和 $\\boldsymbol{J}^{-1}$ 都是常数矩阵。根据导数的链式法则：\n$$\n\\begin{Bmatrix} N_{i,x} \\\\ N_{i,y} \\end{Bmatrix} = \\boldsymbol{J}^{-1} \\begin{Bmatrix} N_{i,\\xi} \\\\ N_{i,\\eta} \\end{Bmatrix} = \\begin{bmatrix} 2 & 0 \\\\ 0 & 2 \\end{bmatrix} \\begin{Bmatrix} N_{i,\\xi} \\\\ N_{i,\\eta} \\end{Bmatrix} = \\begin{Bmatrix} 2 N_{i,\\xi} \\\\ 2 N_{i,\\eta} \\end{Bmatrix}\n$$\n因此，我们得到 $\\boldsymbol{B}_{\\text{vol}}$ 的分量作为 $(\\xi,\\eta)$ 的函数：\n$$\n\\begin{array}{ll}\nN_{1,x} = 2 N_{1,\\xi} = -\\frac{1}{2}(1-\\eta), & N_{1,y} = 2 N_{1,\\eta} = -\\frac{1}{2}(1-\\xi) \\\\\nN_{2,x} = 2 N_{2,\\xi} = \\frac{1}{2}(1-\\eta), & N_{2,y} = 2 N_{2,\\eta} = -\\frac{1}{2}(1+\\xi) \\\\\nN_{3,x} = 2 N_{3,\\xi} = \\frac{1}{2}(1+\\eta), & N_{3,y} = 2 N_{3,\\eta} = \\frac{1}{2}(1+\\xi) \\\\\nN_{4,x} = 2 N_{4,\\xi} = -\\frac{1}{2}(1+\\eta), & N_{4,y} = 2 N_{4,\\eta} = \\frac{1}{2}(1-\\xi) \\\\\n\\end{array}\n$$\n物理单元是一个单位正方形，因此其面积为 $A_e = 1$。用于计算 $\\bar{\\boldsymbol{B}}_{\\text{vol}}$ 的积分被变换到母域：\n$$\n\\bar{\\boldsymbol{B}}_{\\text{vol}} = \\frac{1}{A_e} \\int_{\\Omega_e} \\boldsymbol{B}_{\\text{vol}} \\, \\mathrm{d}\\Omega = \\frac{1}{1} \\int_{-1}^1 \\int_{-1}^1 \\boldsymbol{B}_{\\text{vol}}(\\xi,\\eta) \\det(\\boldsymbol{J}) \\, \\mathrm{d}\\xi \\mathrm{d}\\eta = \\frac{1}{4} \\int_{-1}^1 \\int_{-1}^1 \\boldsymbol{B}_{\\text{vol}}(\\xi,\\eta) \\, \\mathrm{d}\\xi \\mathrm{d}\\eta\n$$\n我们对算子的每个分量计算此积分。对于任意线性函数 $f(\\xi,\\eta) = c_0 + c_1\\xi + c_2\\eta$，其在母域上的积分为：\n$$\n\\int_{-1}^1 \\int_{-1}^1 (c_0 + c_1\\xi + c_2\\eta) \\, \\mathrm{d}\\xi \\mathrm{d}\\eta = 4c_0\n$$\n因为关于 $\\xi$ 或 $\\eta$ 的线性项的积分为零。因此，对于每个作为 $\\xi$ 和 $\\eta$ 的线性函数的分量，我们只需要它的常数项。\n\n- 对于 $N_{1,x} = -\\frac{1}{2}(1-\\eta) = -\\frac{1}{2}+\\frac{1}{2}\\eta$，常数项为 $-\\frac{1}{2}$。积分为 $4(-\\frac{1}{2}) = -2$。\n- 对于 $N_{1,y} = -\\frac{1}{2}(1-\\xi) = -\\frac{1}{2}+\\frac{1}{2}\\xi$，积分为 $4(-\\frac{1}{2}) = -2$。\n- 对于 $N_{2,x} = \\frac{1}{2}(1-\\eta) = \\frac{1}{2}-\\frac{1}{2}\\eta$，积分为 $4(\\frac{1}{2}) = 2$。\n- 对于 $N_{2,y} = -\\frac{1}{2}(1+\\xi) = -\\frac{1}{2}-\\frac{1}{2}\\xi$，积分为 $4(-\\frac{1}{2}) = -2$。\n- 对于 $N_{3,x} = \\frac{1}{2}(1+\\eta) = \\frac{1}{2}+\\frac{1}{2}\\eta$，积分为 $4(\\frac{1}{2}) = 2$。\n- 对于 $N_{3,y} = \\frac{1}{2}(1+\\xi) = \\frac{1}{2}+\\frac{1}{2}\\xi$，积分为 $4(\\frac{1}{2}) = 2$。\n- 对于 $N_{4,x} = -\\frac{1}{2}(1+\\eta) = -\\frac{1}{2}-\\frac{1}{2}\\eta$，积分为 $4(-\\frac{1}{2}) = -2$。\n- 对于 $N_{4,y} = \\frac{1}{2}(1-\\xi) = \\frac{1}{2}-\\frac{1}{2}\\xi$，积分为 $4(\\frac{1}{2}) = 2$。\n\n积分后分量的向量为 $\\begin{bmatrix} -2 & -2 & 2 & -2 & 2 & 2 & -2 & 2 \\end{bmatrix}$。现在我们乘以系数 $\\frac{1}{4}$：\n$$\n\\bar{\\boldsymbol{B}}_{\\text{vol}} = \\frac{1}{4} \\begin{bmatrix} -2 & -2 & 2 & -2 & 2 & 2 & -2 & 2 \\end{bmatrix}\n$$\n这就得到了恒定的平均算子行向量的最终表达式：\n$$\n\\bar{\\boldsymbol{B}}_{\\text{vol}} = \\begin{bmatrix} -\\frac{1}{2} & -\\frac{1}{2} & \\frac{1}{2} & -\\frac{1}{2} & \\frac{1}{2} & \\frac{1}{2} & -\\frac{1}{2} & \\frac{1}{2} \\end{bmatrix}\n$$\n结果是常数，因为 $\\bar{\\boldsymbol{B}}_{\\text{vol}}$ 被定义为空间变化函数 $\\boldsymbol{B}_{\\text{vol}}(x,y)$ 在单元域 $\\Omega_e$ 上的平均值。在一个固定域上的定积分结果是一个单一的值，而不是积分变量的函数。上述推导通过执行定积分显式地计算了这个常数向量，从而证明了为什么结果与单元内的位置无关。", "answer": "$$\n\\boxed{\\begin{pmatrix} -\\frac{1}{2} & -\\frac{1}{2} & \\frac{1}{2} & -\\frac{1}{2} & \\frac{1}{2} & \\frac{1}{2} & -\\frac{1}{2} & \\frac{1}{2} \\end{pmatrix}}\n$$", "id": "2542562"}, {"introduction": "掌握了 B-bar 方法的公式之后，我们现在来探究其为何如此有效。这个实践练习聚焦于一种特定的非物理变形模式——“沙漏”模式，该模式在标准列式中会引入伪应变能。你将使用标准方法和 B-bar 方法计算该模式的体积应变能，从而具体展示 B-bar 方法如何消除这种数值伪影 [@problem_id:2542578]。", "problem": "考虑一个二维 (2D) 等参四节点双线性四边形 (Q4) 有限元，处于平面应变状态，其边长为 $L$，厚度为常数 $t$。材料是各向同性的，体积模量为 $\\kappa$，并假定对应变能进行体积-偏应力分解。体积应变为 $\\,\\operatorname{tr}(\\varepsilon)=\\partial u/\\partial x+\\partial v/\\partial y\\,$，体积能量密度为 $\\,w_{\\text{vol}}=(\\kappa/2)\\left(\\operatorname{tr}(\\varepsilon)\\right)^{2}\\,$。设单元的节点自由度按 $\\{u_{1},v_{1},u_{2},v_{2},u_{3},v_{3},u_{4},v_{4}\\}^{T}$ 排序，节点采用标准的逆时针排序，等参映射为 $x=(L/2)\\,\\xi$，$y=(L/2)\\,\\eta$，其中 $(\\xi,\\eta)\\in[-1,1]^{2}$。\n\n从体积能量泛函和体积应变的定义出发，执行以下步骤：\n- 推导单元的原始体积刚度贡献 $K_{\\text{vol}}$，并用体积应变-位移算子 $B_{\\text{vol}}$ 表示。\n- 利用将 $\\operatorname{tr}(\\varepsilon)$ 在单元上 $L^{2}$-投影到常数空间上的思想（这是B-bar方法减轻体积锁死的精髓），推导B-bar体积贡献 $\\bar{K}_{\\text{vol}}$ 和相应的投影算子 $\\bar{B}_{\\text{vol}}$。\n- 对于由 u 分量 $[u_{1},u_{2},u_{3},u_{4}]=[\\gamma,-\\gamma,\\gamma,-\\gamma]$ 和 v 分量 $[v_{1},v_{2},v_{3},v_{4}]=[0,0,0,0]$ 定义的特定节点位移模式，证明插值得到的位移场为 $u(\\xi,\\eta)=\\gamma\\,\\xi\\,\\eta$ 和 $v(\\xi,\\eta)=0$。然后用 $\\kappa$、$t$、$L$ 和 $\\gamma$ 计算标量 $v^{T}K_{\\text{vol}}v$ 和 $v^{T}\\bar{K}_{\\text{vol}}v$。\n\n定义归一化差异\n$$\\Delta R=\\frac{v^{T}K_{\\text{vol}}v-v^{T}\\bar{K}_{\\text{vol}}v}{\\kappa\\,t\\,\\gamma^{2}}.$$\n以封闭形式计算 $\\Delta R$。最终答案应为一个简化的解析值。最终答案中不要包含单位。无需四舍五入。", "solution": "问题陈述具有科学依据、提法恰当、客观且自洽。这是计算固体力学领域（特别是有限元方法）的一个标准练习。未检测到矛盾或谬误。问题有效，我将着手解答。\n\n本分析涉及一个处于平面应变条件下的二维、四节点等参四边形单元。该单元的几何形状是一个边长为 $L$ 的正方形，从 $(\\xi, \\eta)$ 坐标系（其中 $\\xi, \\eta \\in [-1, 1]$）中的一个正则母单元映射而来。映射关系为 $x=(L/2)\\xi$ 和 $y=(L/2)\\eta$。\n\n此变换的雅可比矩阵为\n$$ \\mathbf{J} = \\begin{pmatrix} \\frac{\\partial x}{\\partial \\xi} & \\frac{\\partial y}{\\partial \\xi} \\\\ \\frac{\\partial x}{\\partial \\eta} & \\frac{\\partial y}{\\partial \\eta} \\end{pmatrix} = \\begin{pmatrix} L/2 & 0 \\\\ 0 & L/2 \\end{pmatrix} $$\n雅可比行列式为 $\\det(\\mathbf{J}) = L^2/4$。面积微元为 $dA = \\det(\\mathbf{J}) d\\xi d\\eta = (L^2/4) d\\xi d\\eta$。\n\n位移场 $(u, v)$ 使用双线性形函数 $N_i(\\xi, \\eta) = \\frac{1}{4}(1+\\xi_i\\xi)(1+\\eta_i\\eta)$ 从节点位移插值得到，其中 $(\\xi_i, \\eta_i)$ 是节点 $i$ 的坐标。设节点自由度向量为 $\\mathbf{d} = \\{u_{1},v_{1},u_{2},v_{2},u_{3},v_{3},u_{4},v_{4}\\}^{T}$。问题陈述中使用符号 $v$ 表示此向量；为避免与位移的 $y$ 分量混淆，我们在推导中将使用 $\\mathbf{d}$。\n\n体积应变为 $\\operatorname{tr}(\\varepsilon) = \\frac{\\partial u}{\\partial x} + \\frac{\\partial v}{\\partial y}$。物理坐标系和母单元坐标系下的导数关系为 $\\left\\{\\frac{\\partial}{\\partial x}, \\frac{\\partial}{\\partial y}\\right\\}^T = \\mathbf{J}^{-1} \\left\\{\\frac{\\partial}{\\partial \\xi}, \\frac{\\partial}{\\partial \\eta}\\right\\}^T = \\frac{2}{L}\\mathbf{I} \\left\\{\\frac{\\partial}{\\partial \\xi}, \\frac{\\partial}{\\partial \\eta}\\right\\}^T$。\n体积应变可以表示为 $\\operatorname{tr}(\\varepsilon) = B_{\\text{vol}} \\mathbf{d}$，其中 $B_{\\text{vol}}$ 是一个 $1 \\times 8$ 的行向量，由下式给出：\n$$ B_{\\text{vol}} = \\left[ \\frac{\\partial N_1}{\\partial x}, \\frac{\\partial N_1}{\\partial y}, \\dots, \\frac{\\partial N_4}{\\partial x}, \\frac{\\partial N_4}{\\partial y} \\right] $$\n其中 $\\frac{\\partial N_i}{\\partial x} = \\frac{2}{L}\\frac{\\partial N_i}{\\partial \\xi}$ 且 $\\frac{\\partial N_i}{\\partial y} = \\frac{2}{L}\\frac{\\partial N_i}{\\partial \\eta}$。\n\n体积应变能泛函为 $W_{\\text{vol}} = \\frac{1}{2}\\int_{V} \\kappa (\\operatorname{tr}(\\varepsilon))^2 dV$。对于厚度为常数 $t$ 的单元，这变为 $W_{\\text{vol}} = \\frac{1}{2} \\mathbf{d}^T K_{\\text{vol}} \\mathbf{d}$，其中体积刚度矩阵 $K_{\\text{vol}}$ 为：\n$$ K_{\\text{vol}} = \\int_A t B_{\\text{vol}}^T \\kappa B_{\\text{vol}} dA = \\kappa t \\int_{-1}^1 \\int_{-1}^1 B_{\\text{vol}}^T(\\xi,\\eta) B_{\\text{vol}}(\\xi,\\eta) \\det(\\mathbf{J}) d\\xi d\\eta $$\n\nB-bar 方法旨在通过用单元体积内的平均体积应变 $\\overline{\\operatorname{tr}(\\varepsilon)}$ 替换局部体积应变 $\\operatorname{tr}(\\varepsilon)$ 来减轻体积锁死。这等效于将应变 $L^2$-投影到单元上的常数函数空间上。\n$$ \\overline{\\operatorname{tr}(\\varepsilon)} = \\frac{1}{V_{el}} \\int_{V_{el}} \\operatorname{tr}(\\varepsilon) dV = \\frac{1}{A_{el}} \\int_{A_{el}} \\operatorname{tr}(\\varepsilon) dA $$\n其中 $A_{el} = L^2$。\n代入 $\\operatorname{tr}(\\varepsilon) = B_{\\text{vol}} \\mathbf{d}$，我们得到 $\\overline{\\operatorname{tr}(\\varepsilon)} = \\bar{B}_{\\text{vol}} \\mathbf{d}$，其中修正的应变-位移算子 $\\bar{B}_{\\text{vol}}$ 在单元上是常数：\n$$ \\bar{B}_{\\text{vol}} = \\frac{1}{A_{el}} \\int_{A_{el}} B_{\\text{vol}} dA = \\frac{1}{L^2} \\int_{-1}^1 \\int_{-1}^1 B_{\\text{vol}}(\\xi, \\eta) \\frac{L^2}{4} d\\xi d\\eta = \\frac{1}{4} \\int_{-1}^1 \\int_{-1}^1 B_{\\text{vol}}(\\xi, \\eta) d\\xi d\\eta $$\n修正的体积刚度矩阵 $\\bar{K}_{\\text{vol}}$ 是使用这个常数算子推导出来的：\n$$ \\bar{K}_{\\text{vol}} = \\int_A t \\bar{B}_{\\text{vol}}^T \\kappa \\bar{B}_{\\text{vol}} dA = \\kappa t \\bar{B}_{\\text{vol}}^T \\bar{B}_{\\text{vol}} \\int_A dA = \\kappa t A_{el} \\bar{B}_{\\text{vol}}^T \\bar{B}_{\\text{vol}} $$\n相应的应变能为 $\\frac{1}{2} \\mathbf{d}^T \\bar{K}_{\\text{vol}} \\mathbf{d} = \\frac{1}{2} \\kappa t A_{el} (\\overline{\\operatorname{tr}(\\varepsilon)})^2$。\n\n我们现在分析具有分量 $u_1=\\gamma, u_2=-\\gamma, u_3=\\gamma, u_4=-\\gamma$ 和 $v_1=v_2=v_3=v_4=0$ 的特定节点位移向量 $\\mathbf{v}$ (为清晰起见，此处记为 $\\mathbf{d}$)。\n插值得到的位移场为 $u(\\xi, \\eta) = \\sum_{i=1}^4 N_i u_i$ 和 $v(\\xi, \\eta) = \\sum_{i=1}^4 N_i v_i$。\n$$ v(\\xi, \\eta) = N_1(0) + N_2(0) + N_3(0) + N_4(0) = 0 $$\n$$ u(\\xi, \\eta) = \\gamma(N_1 - N_2 + N_3 - N_4) $$\n使用定义式 $N_i = \\frac{1}{4}(1+\\xi_i\\xi)(1+\\eta_i\\eta)$ 及坐标 $(\\xi_1, \\eta_1)=(-1,-1)$, $(\\xi_2, \\eta_2)=(1,-1)$, $(\\xi_3, \\eta_3)=(1,1)$, $(\\xi_4, \\eta_4)=(-1,1)$：\n$$ N_1 - N_2 = \\frac{1}{4}(1-\\eta)(1-\\xi - (1+\\xi)) = -\\frac{1}{2}\\xi(1-\\eta) $$\n$$ N_3 - N_4 = \\frac{1}{4}(1+\\eta)(1+\\xi - (1-\\xi)) = \\frac{1}{2}\\xi(1+\\eta) $$\n$$ u(\\xi, \\eta) = \\gamma \\left( -\\frac{1}{2}\\xi(1-\\eta) + \\frac{1}{2}\\xi(1+\\eta) \\right) = \\gamma \\left( -\\frac{1}{2}\\xi + \\frac{1}{2}\\xi\\eta + \\frac{1}{2}\\xi + \\frac{1}{2}\\xi\\eta \\right) = \\gamma \\xi \\eta $$\n位移场确实是 $u(\\xi, \\eta) = \\gamma\\xi\\eta$ 和 $v(\\xi, \\eta)=0$。这就是众所周知的沙漏模式。\n\n接下来，我们计算由此产生的体积应变：\n$$ \\operatorname{tr}(\\varepsilon) = \\frac{\\partial u}{\\partial x} + \\frac{\\partial v}{\\partial y} = \\frac{2}{L}\\frac{\\partial u}{\\partial \\xi} + \\frac{2}{L}\\frac{\\partial v}{\\partial \\eta} = \\frac{2}{L}\\frac{\\partial}{\\partial \\xi}(\\gamma\\xi\\eta) + \\frac{2}{L}\\frac{\\partial}{\\partial \\eta}(0) = \\frac{2\\gamma\\eta}{L} $$\n标准公式的应变能为 $\\frac{1}{2} \\mathbf{v}^T K_{\\text{vol}} \\mathbf{v}$。因此，二次型 $\\mathbf{v}^T K_{\\text{vol}} \\mathbf{v}$ 为：\n$$ \\mathbf{v}^T K_{\\text{vol}} \\mathbf{v} = \\kappa t \\int_A (\\operatorname{tr}(\\varepsilon))^2 dA = \\kappa t \\int_{-1}^1 \\int_{-1}^1 \\left(\\frac{2\\gamma\\eta}{L}\\right)^2 \\frac{L^2}{4} d\\xi d\\eta $$\n$$ \\mathbf{v}^T K_{\\text{vol}} \\mathbf{v} = \\kappa t \\frac{4\\gamma^2}{L^2} \\frac{L^2}{4} \\int_{-1}^1 \\int_{-1}^1 \\eta^2 d\\xi d\\eta = \\kappa t \\gamma^2 \\left( \\int_{-1}^1 d\\xi \\right) \\left( \\int_{-1}^1 \\eta^2 d\\eta \\right) $$\n积分计算结果为 $\\int_{-1}^1 d\\xi = 2$ 和 $\\int_{-1}^1 \\eta^2 d\\eta = [\\eta^3/3]_{-1}^1 = 2/3$。\n$$ \\mathbf{v}^T K_{\\text{vol}} \\mathbf{v} = \\kappa t \\gamma^2 (2) \\left(\\frac{2}{3}\\right) = \\frac{4}{3} \\kappa t \\gamma^2 $$\n这个非零能量是伪能，因为沙漏模式理想情况下应为零体积变化的纯剪切变形。\n\n对于 B-bar 公式，我们首先计算平均体积应变：\n$$ \\overline{\\operatorname{tr}(\\varepsilon)} = \\frac{1}{A_{el}} \\int_A \\operatorname{tr}(\\varepsilon) dA = \\frac{1}{L^2} \\int_{-1}^1 \\int_{-1}^1 \\left(\\frac{2\\gamma\\eta}{L}\\right) \\frac{L^2}{4} d\\xi d\\eta $$\n$$ \\overline{\\operatorname{tr}(\\varepsilon)} = \\frac{\\gamma}{2L} \\int_{-1}^1 \\int_{-1}^1 \\eta d\\xi d\\eta = \\frac{\\gamma}{2L} \\left( \\int_{-1}^1 d\\xi \\right) \\left( \\int_{-1}^1 \\eta d\\eta \\right) $$\n积分 $\\int_{-1}^1 \\eta d\\eta = [\\eta^2/2]_{-1}^1 = 0$。因此，$\\overline{\\operatorname{tr}(\\varepsilon)} = 0$。\nB-bar 公式的应变能为：\n$$ \\mathbf{v}^T \\bar{K}_{\\text{vol}} \\mathbf{v} = \\kappa t A_{el} (\\overline{\\operatorname{tr}(\\varepsilon)})^2 = \\kappa t L^2 (0)^2 = 0 $$\nB-bar 方法正确地为此模式赋予了零体积能。\n\n最后，我们计算归一化差异 $\\Delta R$：\n$$ \\Delta R = \\frac{\\mathbf{v}^T K_{\\text{vol}} \\mathbf{v} - \\mathbf{v}^T \\bar{K}_{\\text{vol}} \\mathbf{v}}{\\kappa t \\gamma^2} = \\frac{\\frac{4}{3} \\kappa t \\gamma^2 - 0}{\\kappa t \\gamma^2} $$\n$$ \\Delta R = \\frac{4}{3} $$\n结果是一个无量纲常数。", "answer": "$$\\boxed{\\frac{4}{3}}$$", "id": "2542578"}, {"introduction": "最后一步是通过观察 B-bar 方法在完整边值问题中的影响，将理论与实践联系起来。这个练习要求你使用标准列式和 B-bar 列式，模拟一个受压的简单结构，特别是在材料接近不可压缩的情况下。通过比较最终的结构刚度，你将能够量化体积锁定的严重程度以及 B-bar 修正所带来的实际改进效果 [@problem_id:2542550]。", "problem": "一个二维小应变线性弹性问题将采用有限元法 (FEM) 求解，求解对象是一个宽度为 $L=2\\,\\mathrm{m}$、高度为 $H=1\\,\\mathrm{m}$ 的矩形域，使用双线性四边形单元 (Q4)，并处于平面应变条件下。网格由两个沿 $x$ 方向并排排列的 Q4 单元组成，具有单位平面外厚度。全局节点坐标（单位为米）为 $[(0,0),(1,0),(2,0),(0,1),(1,1),(2,1)]$，按节点 $0$ 到 $5$ 的顺序排列。两个单元由节点连接关系 $[0,1,4,3]$ 和 $[1,2,5,4]$ 定义，其局部节点排序与常规 Q4 形函数 $(\\xi,\\eta)\\in[-1,1]^2$ 一致：节点 $0$ 位于 $(-1,-1)$，节点 $1$ 位于 $(+1,-1)$，节点 $2$ 位于 $(+1,+1)$，节点 $3$ 位于 $(-1,+1)$。\n\n材料行为是线性弹性和各向同性的，其杨氏模量为 $E$（单位为 $\\mathrm{Pa}$），泊松比为 $\\nu$（无量纲）。在平面应变条件下，定义 Lamé 参数 $\\lambda = \\dfrac{E\\nu}{(1+\\nu)(1-2\\nu)}$ 和 $\\mu = \\dfrac{E}{2(1+\\nu)}$。标准的基于位移的提法对每个单元采用 $2\\times 2$ Gauss 积分来组装全局刚度矩阵\n$$\n\\mathbf{K}_\\text{std} = \\sum_{e} \\int_{\\Omega_e} \\mathbf{B}^\\top \\mathbf{D}\\, \\mathbf{B}\\, \\mathrm{d}\\Omega,\n$$\n其中 $\\mathbf{B}$ 是 Q4 单元在 Voigt 标记法下的常规应变-位移矩阵（使用工程剪应变 $\\gamma_{xy}$），$\\mathbf{D}$ 是平面应变本构矩阵。为了分离并量化体积自锁效应，使用下式将本构响应分解为偏量和体积部分\n$$\n\\mathbf{D} = \\mathbf{D}_\\text{dev} + \\mathbf{D}_\\text{vol}, \\quad \\mathbf{D}_\\text{dev} = \\mathrm{diag}(2\\mu,2\\mu,\\mu), \\quad \\mathbf{D}_\\text{vol} = \\lambda \\begin{bmatrix} 1 & 1 & 0\\\\ 1 & 1 & 0\\\\ 0 & 0 & 0 \\end{bmatrix}.\n$$\n二维体积应变度量取为 $\\varepsilon_v = \\varepsilon_x + \\varepsilon_y$，可写为 $\\varepsilon_v = \\mathbf{B}_v \\mathbf{u}$，其中 $\\mathbf{B}_v = [1,\\,1,\\,0]\\mathbf{B}$ 是一个作用于单元节点位移 $\\mathbf{u}$ 的 $1\\times n_\\text{dof}$ 行算子。\n\n为缓解体积自锁，实施 $\\bar{B}$ (B-bar) 方法，用体积应变的单元平均值替换体积能量中的逐点体积应变，\n$$\n\\bar{\\mathbf{B}}_v = \\frac{1}{|\\Omega_e|}\\int_{\\Omega_e} \\mathbf{B}_v\\, \\mathrm{d}\\Omega,\n$$\n同时保留标准的偏量贡献。在 B-bar 方法下，得到的单元刚度为\n$$\n\\mathbf{K}_e^{\\bar{B}} = \\int_{\\Omega_e} \\mathbf{B}^\\top \\mathbf{D}_\\text{dev}\\, \\mathbf{B}\\, \\mathrm{d}\\Omega \\;+\\; \\lambda\\, |\\Omega_e|\\, \\bar{\\mathbf{B}}_v^\\top \\bar{\\mathbf{B}}_v.\n$$\n\n载荷：在右边界 $x=L$ 上施加大小为 $p$（单位为 $\\mathrm{Pa}$）的均布压力，方向为沿负 $x$ 方向向内。这在该边界上产生单位厚度上的面力矢量 $\\mathbf{t} = [-p,\\,0]^\\top$。使用一致边界载荷矢量，该矢量通过沿边界边使用适当的一维 Gaussian 求积方法积分得到。边界条件：通过在节点 $0$ 和 $3$ 处施加 $\\mathbf{u}=(0,0)$ 来完全夹紧左边界。\n\n设全局未知节点位移矢量为 $\\mathbf{U} \\in \\mathbb{R}^{12}$，按 $[u_0,v_0,u_1,v_1,\\dots,u_5,v_5]^\\top$ 顺序排列。求解两个线性系统，\n$$\n\\mathbf{K}_\\text{std}\\mathbf{U}_\\text{std} = \\mathbf{F},\\qquad \\mathbf{K}_{\\bar{B}}\\mathbf{U}_{\\bar{B}} = \\mathbf{F},\n$$\n其边界条件和载荷矢量 $\\mathbf{F}$ 相同。定义 $x$ 方向的有效边界刚度为\n$$\nk_\\text{eff} = \\frac{F_\\text{tot}}{\\bar{u}_R}, \\quad \\bar{u}_R = \\frac{u_2 + u_5}{2}, \\quad F_\\text{tot} = p\\,H,\n$$\n其中 $u_2$ 和 $u_5$ 分别是节点 $2$ 和 $5$ 的 $x$ 方向位移，且 $H=1\\,\\mathrm{m}$。由于线性关系，除了数值舍入误差外，$k_\\text{eff}$ 与载荷大小无关。通过以下比率来量化自锁引起的刚度膨胀\n$$\nr = \\frac{k_{\\text{eff},\\text{std}}}{k_{\\text{eff},\\bar{B}}}.\n$$\n\n实现一个程序，为所述网格组装 $\\mathbf{K}_\\text{std}$ 和 $\\mathbf{K}_{\\bar{B}}$，并针对以下参数值测试套件（全部采用国际单位制）求解位移：\n- 测试 1 (基准可压缩): $E=1.0\\times 10^6$, $\\nu=0.3$, $p=1.0\\times 10^3$。\n- 测试 2 (近乎不可压缩): $E=1.0\\times 10^6$, $\\nu=0.4999$, $p=1.0\\times 10^3$。\n- 测试 3 (近乎不可压缩时的按比例缩放载荷和刚度): $E=2.0\\times 10^6$, $\\nu=0.4999$, $p=2.0\\times 10^3$。\n- 测试 4 (无体积耦合): $E=1.0\\times 10^6$, $\\nu=0.0$, $p=1.0\\times 10^3$。\n\n对于每个测试用例，计算如上定义的标量比率 $r$。你的程序应生成一行输出，其中包含按上述测试顺序排列的四个比率，格式为方括号内以逗号分隔的列表（例如，「[r1,r2,r3,r4]」）。这些比率是无量纲实数，必须以小数值形式报告，不带任何单位符号。", "solution": "我们从二维小应变线性弹性、平面应变运动学和虚功原理出发。该域使用双线性四边形 (Q4) 有限元进行离散化。关键目标是比较标准的全积分位移法与一种能够缓解近乎不可压缩状态下体积自锁的 $\\bar{B}$ (B-bar) 修正方法。\n\n1. 运动学及应变-位移关系。对于一个 Q4 单元，其节点位移堆叠为 $\\mathbf{u}_e \\in \\mathbb{R}^{8}$，采用 Voigt 标记法和工程剪应变的应变矢量为\n$$\n\\boldsymbol{\\varepsilon} = \\begin{bmatrix}\\varepsilon_x\\\\ \\varepsilon_y\\\\ \\gamma_{xy}\\end{bmatrix} = \\mathbf{B}(\\xi,\\eta)\\,\\mathbf{u}_e,\n$$\n其中 $\\mathbf{B}$ 集合了双线性形函数相对于物理坐标的导数。使用标准等参映射，坐标为 $(\\xi,\\eta)\\in[-1,1]^2$，通过雅可比矩阵 $\\mathbf{J}$，可由下式获得相对于 $x,y$ 的导数 $\\begin{bmatrix}\\partial N_i/\\partial x\\\\ \\partial N_i/\\partial y \\end{bmatrix} = \\mathbf{J}^{-1}\\begin{bmatrix}\\partial N_i/\\partial \\xi\\\\ \\partial N_i/\\partial \\eta \\end{bmatrix}$。\n\n2. 本构律及体积-偏量分解。在平面应变和各向同性线弹性条件下，应力-应变定律为\n$$\n\\boldsymbol{\\sigma} = \\mathbf{D}\\,\\boldsymbol{\\varepsilon},\n$$\n其中 Lamé 参数为 $\\lambda = \\dfrac{E\\nu}{(1+\\nu)(1-2\\nu)}$ 和 $\\mu = \\dfrac{E}{2(1+\\nu)}$，本构矩阵为\n$$\n\\mathbf{D} = \\begin{bmatrix}\\lambda+2\\mu & \\lambda & 0\\\\ \\lambda & \\lambda+2\\mu & 0\\\\ 0 & 0 & \\mu\\end{bmatrix}.\n$$\n为分析自锁，我们将响应分解为偏量部分和体积部分。在二维情况下，一种方便的精确分解是\n$$\n\\mathbf{D} = \\underbrace{\\mathrm{diag}(2\\mu,\\,2\\mu,\\,\\mu)}_{\\mathbf{D}_\\text{dev}} \\;+\\; \\underbrace{\\lambda\\begin{bmatrix} 1 & 1 & 0\\\\ 1 & 1 & 0\\\\ 0 & 0 & 0 \\end{bmatrix}}_{\\mathbf{D}_\\text{vol}}.\n$$\n我们作用的体积应变度量是 $\\varepsilon_v = \\varepsilon_x + \\varepsilon_y$，它可以通过一个行算子 $\\mathbf{P}_v = [1,\\,1,\\,0]$ 作用于 $\\boldsymbol{\\varepsilon}$ 来提取。在单元层面，$\\varepsilon_v = \\mathbf{B}_v \\mathbf{u}_e$，其中 $\\mathbf{B}_v = \\mathbf{P}_v \\mathbf{B}$。\n\n3. 虚功原理与标准刚度。弱形式（虚功原理）得到标准单元刚度\n$$\n\\mathbf{K}_e^\\text{std} = \\int_{\\Omega_e} \\mathbf{B}^\\top (\\mathbf{D}_\\text{dev} + \\mathbf{D}_\\text{vol})\\, \\mathbf{B}\\, \\mathrm{d}\\Omega \\;=\\; \\underbrace{\\int_{\\Omega_e} \\mathbf{B}^\\top \\mathbf{D}_\\text{dev} \\mathbf{B}\\,\\mathrm{d}\\Omega}_{\\mathbf{K}_{e,\\text{dev}}} \\;+\\; \\underbrace{\\int_{\\Omega_e} \\mathbf{B}_v^\\top \\lambda\\, \\mathbf{B}_v\\, \\mathrm{d}\\Omega}_{\\mathbf{K}_{e,\\text{vol}}}.\n$$\n在数值上，我们使用 $2\\times 2$ Gaussian 求积法在点 $(\\xi,\\eta) = (\\pm\\frac{1}{\\sqrt{3}},\\pm\\frac{1}{\\sqrt{3}})$ 处计算积分，每个点的权重为 $1$，并乘以 $\\det\\mathbf{J}$。\n\n4. B-bar 修正。当体积模量（或 $\\lambda$）很大时，体积自锁源于低阶位移场无法表示不可压缩模式。B-bar 技术通过用逐点体积应变替换为其单元平均值来对体积部分进行正则化。定义平均体积算子\n$$\n\\bar{\\mathbf{B}}_v = \\frac{1}{|\\Omega_e|} \\int_{\\Omega_e} \\mathbf{B}_v\\,\\mathrm{d}\\Omega,\n$$\n其中 $|\\Omega_e|$ 是单元面积（意味着单位厚度）。则 B-bar 体积刚度为\n$$\n\\mathbf{K}_{e,\\text{vol}}^{\\bar{B}} = \\int_{\\Omega_e} \\bar{\\mathbf{B}}_v^\\top \\lambda\\, \\bar{\\mathbf{B}}_v\\, \\mathrm{d}\\Omega = \\lambda\\, |\\Omega_e|\\, \\bar{\\mathbf{B}}_v^\\top \\bar{\\mathbf{B}}_v,\n$$\n因为 $\\bar{\\mathbf{B}}_v$ 在整个单元上是常数。偏量部分保持不变，并使用完全的 $2\\times 2$ 求积进行积分。B-bar 单元刚度为\n$$\n\\mathbf{K}_e^{\\bar{B}} = \\mathbf{K}_{e,\\text{dev}} + \\mathbf{K}_{e,\\text{vol}}^{\\bar{B}}.\n$$\n\n5. 边界条件与载荷。通过在节点 $0$ 和 $3$ 处设置 $u=v=0$ 来夹紧左边界。在右边界 $x=L$ 上，向内（负 $x$ 方向）施加均布压力 $p$，得到面力 $\\mathbf{t} = [-p,0]^\\top$。右侧单元右边界上的一致边界载荷矢量通过在 $\\xi=+1$ 处沿边参数 $\\eta\\in[-1,1]$ 进行一维 Gauss 求积来计算，\n$$\n\\mathbf{f}_e^\\text{edge} = \\int_{-1}^{1} \\mathbf{N}_\\text{edge}^\\top \\mathbf{t} \\, J_\\text{edge}\\, \\mathrm{d}\\eta,\n$$\n其中 $J_\\text{edge} = \\left\\|\\dfrac{\\partial \\mathbf{x}}{\\partial \\eta}\\right\\|$ 是边雅可比（对于线性边是物理边长的一半），$\\mathbf{N}_\\text{edge}$ 包含映射到父单元边上的边形函数。在单位厚度和 $H=1\\,\\mathrm{m}$ 的情况下，总施加载荷大小为 $F_\\text{tot} = pH$。\n\n6. 求解与度量。组装全局刚度矩阵 $\\mathbf{K}_\\text{std}$ 和 $\\mathbf{K}_{\\bar{B}}$ 以及单个全局载荷矢量 $\\mathbf{F}$。通过行/列消除法或罚函数法施加本质边界条件。求解线性系统以得到 $\\mathbf{U}_\\text{std}$ 和 $\\mathbf{U}_{\\bar{B}}$。提取右边界的平均水平位移 $\\bar{u}_R = (u_2 + u_5)/2$。定义有效边界刚度\n$$\nk_{\\text{eff},\\text{std}} = \\frac{F_\\text{tot}}{\\bar{u}_{R,\\text{std}}},\n$$\n$$\nk_{\\text{eff},\\bar{B}} = \\frac{F_\\text{tot}}{\\bar{u}_{R,\\bar{B}}},\n$$\n并计算自锁-膨胀比 $r = k_{\\text{eff},\\text{std}}/k_{\\text{eff},\\bar{B}}$。对于一个解析良好的可压缩材料（例如 $\\nu=0.3$），我们预期 $r \\approx 1$。对于近乎不可压缩的情况（例如 $\\nu=0.4999$），标准提法会表现出体积自锁，因此 $r>1$，这量化了被 B-bar 方法所缓解的刚度高估。对于 $\\nu=0$，体积和偏量部分因 $\\lambda=0$ 而解耦，因此两种方法结果一致， $r=1$。\n\n7. 程序的算法步骤。\n- 定义网格几何、连接关系以及自由度映射。\n- 对每个单元：\n  - 对每个 $2\\times 2$ Gauss 点，计算 $\\mathbf{B}$、$\\det\\mathbf{J}$，对于标准方法，使用 $\\mathbf{D}_\\text{dev}$ 累加 $\\mathbf{K}_{e,\\text{dev}}$，使用 $\\lambda$ 和 $\\mathbf{B}_v$ 累加 $\\mathbf{K}_{e,\\text{vol}}$，同时为 B-bar 方法累加 $\\int \\mathbf{B}_v \\,\\mathrm{d}\\Omega$ 和 $|\\Omega_e|$。\n  - 求积后，构建 B-bar 单元刚度的体积部分 $\\mathbf{K}_{e,\\text{vol}}^{\\bar{B}} = \\lambda |\\Omega_e|\\, \\bar{\\mathbf{B}}_v^\\top \\bar{\\mathbf{B}}_v$ 并将其加到 $\\mathbf{K}_{e,\\text{dev}}$ 上。\n- 通过在相应的全局自由度上求和单元贡献来组装全局刚度矩阵。\n- 在右侧单元的右边界 $\\xi=+1$ 处，通过一维 Gauss 求积和施加 $\\mathbf{t}=[-p,0]^\\top$，以一致性积分方式组装全局载荷矢量。\n- 在节点 $0$ 和 $3$ 施加本质边界条件 ($u=v=0$）。\n- 求解两个线性系统并为每个测试计算 $r$。\n\n8. 测试套件与输出。针对四个指定的测试用例运行此过程：\n- 测试 1：$E=1.0\\times 10^6\\,\\mathrm{Pa}$，$\\nu=0.3$，$p=1.0\\times 10^3\\,\\mathrm{Pa}$。\n- 测试 2：$E=1.0\\times 10^6\\,\\mathrm{Pa}$，$\\nu=0.4999$，$p=1.0\\times 10^3\\,\\mathrm{Pa}$。\n- 测试 3：$E=2.0\\times 10^6\\,\\mathrm{Pa}$，$\\nu=0.4999$，$p=2.0\\times 10^3\\,\\mathrm{Pa}$。\n- 测试 4：$E=1.0\\times 10^6\\,\\mathrm{Pa}$，$\\nu=0.0$，$p=1.0\\times 10^3\\,\\mathrm{Pa}$。\n\n由于线性缩放，测试2和测试3应产生几乎相同的 $r$ 值，差异仅在于数值舍入误差。最终输出为一行，包含 $[r_1,r_2,r_3,r_4]$，其中每个 $r_i$ 都是一个无量纲的小数。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef q4_shape_functions(xi, eta):\n    # Shape functions and derivatives w.r.t. xi, eta for Q4\n    N = np.array([\n        0.25*(1 - xi)*(1 - eta),  # N1\n        0.25*(1 + xi)*(1 - eta),  # N2\n        0.25*(1 + xi)*(1 + eta),  # N3\n        0.25*(1 - xi)*(1 + eta)   # N4\n    ])\n    dN_dxi = np.array([\n        -0.25*(1 - eta),\n         0.25*(1 - eta),\n         0.25*(1 + eta),\n        -0.25*(1 + eta)\n    ])\n    dN_deta = np.array([\n        -0.25*(1 - xi),\n        -0.25*(1 + xi),\n         0.25*(1 + xi),\n         0.25*(1 - xi)\n    ])\n    return N, dN_dxi, dN_deta\n\ndef b_matrix_for_element(coords, xi, eta):\n    # coords: (4,2) array of nodal coordinates [ [x1,y1],..., [x4,y4] ] in local order\n    N, dN_dxi, dN_deta = q4_shape_functions(xi, eta)\n    J = np.zeros((2,2))\n    # Assemble Jacobian J = [[dx/dxi, dx/deta],[dy/dxi, dy/deta]]\n    J[0,0] = np.dot(dN_dxi, coords[:,0])\n    J[0,1] = np.dot(dN_deta, coords[:,0])\n    J[1,0] = np.dot(dN_dxi, coords[:,1])\n    J[1,1] = np.dot(dN_deta, coords[:,1])\n    detJ = np.linalg.det(J)\n    invJ = np.linalg.inv(J)\n    # Gradients in physical coordinates\n    dN = np.zeros((4,2))\n    for i in range(4):\n        grad = invJ @ np.array([dN_dxi[i], dN_deta[i]])\n        dN[i,0] = grad[0]\n        dN[i,1] = grad[1]\n    # Build B matrix (3x8)\n    B = np.zeros((3, 8))\n    for i in range(4):\n        ix = 2*i\n        iy = ix + 1\n        B[0, ix] = dN[i,0]   # dNi/dx\n        B[1, iy] = dN[i,1]   # dNi/dy\n        B[2, ix] = dN[i,1]   # dNi/dy\n        B[2, iy] = dN[i,0]   # dNi/dx\n    return B, detJ\n\ndef element_stiffness_standard(coords, lam, mu):\n    # Standard full integration stiffness for one Q4 element with plane strain split D = D_dev + D_vol\n    # D_dev = diag(2mu, 2mu, mu), volumetric handled via Bv and lambda\n    D_dev = np.diag([2*mu, 2*mu, mu])\n    # 2x2 Gauss points\n    gp = 1.0/np.sqrt(3.0)\n    xis = [-gp, gp]\n    etas = [-gp, gp]\n    Ke = np.zeros((8,8))\n    for xi in xis:\n        for eta in etas:\n            B, detJ = b_matrix_for_element(coords, xi, eta)\n            w = 1.0\n            # Deviatoric contribution\n            Ke += B.T @ D_dev @ B * (w * detJ)\n            # Volumetric contribution via Bv = [1 1 0] B\n            Bv = np.array([1.0, 1.0, 0.0]) @ B  # shape (8,)\n            Ke += np.outer(Bv, Bv) * lam * (w * detJ)\n    return Ke\n\ndef element_stiffness_bbar(coords, lam, mu):\n    # B-bar element stiffness: deviatoric as standard; volumetric uses averaged Bv\n    D_dev = np.diag([2*mu, 2*mu, mu])\n    gp = 1.0/np.sqrt(3.0)\n    xis = [-gp, gp]\n    etas = [-gp, gp]\n    Ke_dev = np.zeros((8,8))\n    # Accumulate integral of Bv and area\n    int_Bv = np.zeros(8)\n    area = 0.0\n    for xi in xis:\n        for eta in etas:\n            B, detJ = b_matrix_for_element(coords, xi, eta)\n            w = 1.0\n            Ke_dev += B.T @ D_dev @ B * (w * detJ)\n            Bv = np.array([1.0, 1.0, 0.0]) @ B\n            int_Bv += Bv * (w * detJ)\n            area += (w * detJ)\n    Bv_bar = int_Bv / area\n    Ke_vol_bbar = lam * area * np.outer(Bv_bar, Bv_bar)\n    Ke = Ke_dev + Ke_vol_bbar\n    return Ke\n\ndef assemble_global_stiffness(nodes, elements, lam, mu, use_bbar=False):\n    ndof = 2 * len(nodes)\n    K = np.zeros((ndof, ndof))\n    for el_nodes in elements:\n        coords = np.array([nodes[i] for i in el_nodes])\n        if use_bbar:\n            Ke = element_stiffness_bbar(coords, lam, mu)\n        else:\n            Ke = element_stiffness_standard(coords, lam, mu)\n        # DOF mapping\n        edofs = []\n        for i in el_nodes:\n            edofs.extend([2*i, 2*i+1])\n        edofs = np.array(edofs, dtype=int)\n        # Assembly\n        for a in range(8):\n            A = edofs[a]\n            for b in range(8):\n                B = edofs[b]\n                K[A, B] += Ke[a, b]\n    return K\n\ndef apply_boundary_conditions(K, F, fixed_dofs):\n    # Modify K and F in place to enforce u=0 at fixed_dofs\n    for dof in fixed_dofs:\n        K[dof, :] = 0.0\n        K[:, dof] = 0.0\n        K[dof, dof] = 1.0\n        F[dof] = 0.0\n\ndef assemble_load_vector(nodes, elements, p):\n    # Assemble consistent nodal loads due to uniform pressure -p in x on right boundary of the right element\n    # Right boundary is the right edge of the second element (elements[1]) between local nodes 1->2 (global nodes 2 and 5)\n    ndof = 2 * len(nodes)\n    F = np.zeros(ndof)\n    # Edge integration on the right edge of the second element at xi=+1\n    right_el = elements[1]\n    el_coords = np.array([nodes[i] for i in right_el])\n    # Local node ordering: [n0, n1, n2, n3] corresponds to [(-1,-1),(+1,-1),(+1,+1),(-1,+1)]\n    # Right edge connects local node 1 (xi=+1, eta=-1) to local node 2 (xi=+1, eta=+1)\n    edge_local_nodes = [1, 2]\n    # 1D Gauss points for edge\n    gp = 1.0/np.sqrt(3.0)\n    etas = [-gp, gp]\n    # Traction vector (inward on right boundary)\n    tx, ty = -p, 0.0\n    for eta in etas:\n        xi = 1.0\n        N, dN_dxi, dN_deta = q4_shape_functions(xi, eta)\n        # Tangent vector along eta: x_eta = sum dN/deta * x_i, y_eta analogous\n        x_eta = np.dot(dN_deta, el_coords[:,0])\n        y_eta = np.dot(dN_deta, el_coords[:,1])\n        J_edge = np.sqrt(x_eta**2 + y_eta**2)\n        # Assemble nodal contributions: only nodes of this element get edge loads\n        for a_local, aN in enumerate(N):\n            # Only nodes on the edge receive non-zero contribution effectively (others have N=0 on this edge)\n            fa_x = aN * tx * J_edge\n            fa_y = aN * ty * J_edge\n            a_global_node = right_el[a_local]\n            F[2*a_global_node] += fa_x\n            F[2*a_global_node+1] += fa_y\n    return F\n\ndef solve_case(E, nu, p):\n    # Geometry and mesh\n    nodes = [\n        (0.0, 0.0),  # 0\n        (1.0, 0.0),  # 1\n        (2.0, 0.0),  # 2\n        (0.0, 1.0),  # 3\n        (1.0, 1.0),  # 4\n        (2.0, 1.0),  # 5\n    ]\n    elements = [\n        [0, 1, 4, 3],\n        [1, 2, 5, 4],\n    ]\n    lam = E*nu/((1+nu)*(1-2*nu)) if (1-2*nu) != 0 else 1e30  # guard against exact incompressibility\n    mu = E/(2*(1+nu))\n    ndof = 2*len(nodes)\n\n    # Assemble load\n    F = assemble_load_vector(nodes, elements, p)\n\n    # Assemble stiffness standard and bbar\n    K_std = assemble_global_stiffness(nodes, elements, lam, mu, use_bbar=False)\n    K_bbar = assemble_global_stiffness(nodes, elements, lam, mu, use_bbar=True)\n\n    # Apply boundary conditions: clamp nodes 0 and 3 (both u and v)\n    fixed_dofs = [0, 1, 6, 7]  # node 0: dofs 0,1; node 3: dofs 6,7\n    K_std_bc = K_std.copy()\n    K_bbar_bc = K_bbar.copy()\n    F_std = F.copy()\n    F_bbar = F.copy()\n    apply_boundary_conditions(K_std_bc, F_std, fixed_dofs)\n    apply_boundary_conditions(K_bbar_bc, F_bbar, fixed_dofs)\n\n    # Solve\n    U_std = np.linalg.solve(K_std_bc, F_std)\n    U_bbar = np.linalg.solve(K_bbar_bc, F_bbar)\n\n    # Compute average right-edge displacement in x at nodes 2 and 5\n    u_right_std = 0.5*(U_std[2*2] + U_std[2*5])\n    u_right_bbar = 0.5*(U_bbar[2*2] + U_bbar[2*5])\n\n    # Effective stiffnesses (use absolute values to avoid sign ambiguity)\n    H = 1.0\n    F_tot = p*H\n    k_eff_std = abs(F_tot)/max(abs(u_right_std), 1e-30)\n    k_eff_bbar = abs(F_tot)/max(abs(u_right_bbar), 1e-30)\n\n    r = k_eff_std / k_eff_bbar\n    return r\n\ndef solve():\n    # Define the test cases from the problem statement.\n    # Each tuple: (E [Pa], nu, p [Pa])\n    test_cases = [\n        (1.0e6, 0.3, 1.0e3),      # Test 1: baseline compressible\n        (1.0e6, 0.4999, 1.0e3),   # Test 2: nearly incompressible\n        (2.0e6, 0.4999, 2.0e3),   # Test 3: scaled load and stiffness\n        (1.0e6, 0.0, 1.0e3),      # Test 4: no volumetric coupling\n    ]\n\n    results = []\n    for E, nu, p in test_cases:\n        r = solve_case(E, nu, p)\n        results.append(r)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "2542550"}]}