{"hands_on_practices": [{"introduction": "第一个实践将介绍在 $C^1$ 有限元环境中施加“强”边界条件的基本代数影响。我们将使用一维埃尔米特（Hermite）单元 [@problem_id:2548386]，探讨在边界上同时指定函数值及其导数值如何直接约束节点自由度（Degrees of Freedom, DoFs），从而缩减求解空间的维度。这个练习能让你具体理解数学约束如何转化为一个更小但有效的可能解集。", "problem": "考虑在区间 $\\left[0,L\\right]$ 上的边值问题，其中标量场 $u$ 将通过一个具有 $C^{1}$ 单元间连续性的有限元空间进行逼近。使用 $\\left[0,L\\right]$ 的一个均匀剖分，将其划分为 $N$ 个子区间，节点为 $x_{0}=0,x_{1},\\dots,x_{N}=L$。在此网格上，考虑经典的一维三次 Hermite $C^{1}$ 单元，其在每个节点 $x_{i}$ 的全局自由度（Degrees of Freedom, DoF）是函数值 $u(x_{i})$ 和一阶导数值 $u^{\\prime}(x_{i})$。区间上的固支边界条件对应于在边界处 $u=\\partial_{n}u=0$，在一维情况下简化为 $u(0)=0$，$u^{\\prime}(0)=0$ 以及 $u(L)=0$，$u^{\\prime}(L)=0$。\n\n从具有单元间连续性的有限元空间的核心定义以及强加边界条件的含义（即直接约束相应的自由度值）出发，完成以下任务：\n\n1. 精确指出在这种 $C^{1}$ Hermite 设置中，为强加固支边界条件必须约束哪些节点自由度。\n2. 将这些约束抽象地表示为一个齐次线性系统 $C\\,\\mathbf{d}=0$，其中 $\\mathbf{d}$ 是所有全局自由度的向量，其排序为 $\\left(u(x_{0}),u^{\\prime}(x_{0}),u(x_{1}),u^{\\prime}(x_{1}),\\dots,u(x_{N}),u^{\\prime}(x_{N})\\right)^{\\top}$，$C$ 是一个具有常数项的约束矩阵。在不计算任何数值的情况下，从第一性原理出发解释如何确定 $\\operatorname{rank}(C)$。\n3. 使用你的秩的论证，确定受约束插值空间（即 $C$ 的零空间）的维度，并表示为 $N$ 的函数。\n\n清晰地解释强施加过程如何移除与边界相关的特定基函数，并描述这对边界附近的插值空间产生的影响。你最终报告的答案必须是受约束插值空间维度作为 $N$ 的函数的封闭形式表达式（不需要单位，也无需四舍五入）。", "solution": "审阅问题陈述后，确认其有效。这是一个适定的问题，基于有限元方法的标准理论，特别是关于 $C^1$ 连续的 Hermite 单元和边界条件的强施加。所有定义和条件都是自洽且科学上合理的。我们将进行推导。\n\n有限元离散化是在区间 $[0, L]$ 的一个均匀剖分上定义的，该剖分包含 $N$ 个子区间。此剖分涉及 $N+1$ 个节点，索引从 $i=0$ 到 $i=N$，其中 $x_0 = 0$ 且 $x_N = L$。对于一维三次 Hermite 单元，每个节点 $x_i$ 处的自由度（DoFs）是函数值 $u(x_i)$ 及其一阶导数 $u'(x_i)$。因此，每个节点有 $2$ 个自由度。对于无约束问题，全局自由度的总数是节点数乘以每个节点的自由度数，即 $2(N+1)$。全局自由度向量 $\\mathbf{d}$ 是 $\\mathbb{R}^{2(N+1)}$ 中的一个元素，其排序为 $\\mathbf{d} = (u(x_0), u'(x_0), u(x_1), u'(x_1), \\dots, u(x_N), u'(x_N))^{\\top}$。\n\n1.  识别被约束的自由度：\n固支边界条件为 $u(0)=0$，$u'(0)=0$ 以及 $u(L)=0$，$u'(L)=0$。强（或本质）施加这些边界条件意味着直接将相应的全局自由度值设为零。边界节点为 $x_0=0$ 和 $x_N=L$。\n在左边界 $x=0$ 处，条件 $u(0)=0$ 和 $u'(0)=0$ 直接约束了与节点 $x_0$ 相关的两个自由度。这些自由度正是 $u(x_0)$ 和 $u'(x_0)$。\n在右边界 $x=L$ 处，条件 $u(L)=0$ 和 $u'(L)=0$ 直接约束了与节点 $x_N$ 相关的两个自由度。这些自由度是 $u(x_N)$ 和 $u'(x_N)$。\n总共有 $4$ 个特定的自由度必须被约束为零：$u(x_0)$、$u'(x_0)$、$u(x_N)$ 和 $u'(x_N)$。\n\n2.  约束系统与约束矩阵的秩：\n全局自由度向量 $\\mathbf{d}$ 有 $2(N+1)$ 个分量。我们用 $d_j$ 表示 $\\mathbf{d}$ 的分量，其中 $j=0, 1, \\dots, 2N+1$。根据指定的排序，我们有：\n$d_0 = u(x_0)$\n$d_1 = u'(x_0)$\n...\n$d_{2i} = u(x_i)$\n$d_{2i+1} = u'(x_i)$\n...\n$d_{2N} = u(x_N)$\n$d_{2N+1} = u'(x_N)$\n\n这四个边界条件转化为四个齐次线性方程：\n$d_0 = 0$\n$d_1 = 0$\n$d_{2N} = 0$\n$d_{2N+1} = 0$\n\n这个方程组可以写成矩阵形式 $C\\mathbf{d} = \\mathbf{0}$，其中 $C$ 是约束矩阵。矩阵 $C$ 有 $4$ 行，每行对应一个约束，有 $2(N+1)$ 列，对应于总自由度数。$C$ 的行构造如下：\n第 $1$ 行对应于 $d_0 = 0$：$[1, 0, 0, \\dots, 0]$\n第 $2$ 行对应于 $d_1 = 0$：$[0, 1, 0, \\dots, 0]$\n第 $3$ 行对应于 $d_{2N} = 0$：$[0, \\dots, 0, 1, 0]$（在第 $(2N+1)$ 个位置，对应于索引 $2N$，有一个 $1$）\n第 $4$ 行对应于 $d_{2N+1} = 0$：$[0, \\dots, 0, 0, 1]$（在第 $(2N+2)$ 个位置，对应于索引 $2N+1$，有一个 $1$）\n\n为了从第一性原理确定 $C$ 的秩 $\\operatorname{rank}(C)$，我们考察其行向量的线性无关性。矩阵的秩是由其行向量张成的向量空间的维度。矩阵 $C$ 的四个行向量是 $\\mathbb{R}^{2(N+1)}$ 标准基中的向量。具体来说，它们对应于表示对 $\\mathbf{d}$ 的第 $1$、$2$、$(2N+1)$ 和 $(2N+2)$ 个分量施加约束的向量。这些向量相互正交，并且根据它们的基本定义，是线性无关的。一组标准基向量总是线性无关的。由于构成 $C$ 的行的是 $4$ 个这样的不同向量，它们构成一个线性无关集。因此，约束矩阵 $C$ 的秩恰好是 $4$。\n$\\operatorname{rank}(C) = 4$。\n\n施加这些边界条件对有限元空间的基有实际影响。无约束的近似解 $u_h(x)$ 是全局基函数 $\\phi_j(x)$ 的线性组合，$u_h(x) = \\sum_{j=0}^{2N+1} d_j \\phi_j(x)$。每个基函数 $\\phi_j$ 都唯一地与一个自由度 $d_j$ 相关联，使得它在该自由度上取单位值，而在所有其他自由度上为零。将 $d_0, d_1, d_{2N}, d_{2N+1}$ 约束为零，等同于从基中移除相应的基函数 $\\phi_0, \\phi_1, \\phi_{2N}, \\phi_{2N+1}$。这四个基函数正是与边界节点 $x_0$ 和 $x_N$ 处的函数值和导数自由度相关联的。移除这些基函数确保了所得的受约束空间中的任何函数在边界处都具有零值和零导数，因为所有剩余的基函数在 $x_0$ 和 $x_N$ 处都具有这些性质。\n\n3.  受约束插值空间的维度：\n受约束插值空间是满足线性方程组 $C\\mathbf{d} = \\mathbf{0}$ 的所有向量 $\\mathbf{d} \\in \\mathbb{R}^{2(N+1)}$ 的集合。这个空间正是矩阵 $C$ 的零空间（或核）。这个零空间的维度称为 $C$ 的零度。\n\n根据线性代数中的秩-零度定理，对于任何从向量空间 $V$ 到向量空间 $W$ 的、由矩阵 $C$ 表示的线性映射，以下关系成立：\n$\\operatorname{rank}(C) + \\operatorname{nullity}(C) = \\dim(V)$\n\n在我们的情境中，定义域 $V$ 是所有可能的全局自由度向量的空间，即 $V = \\mathbb{R}^{2(N+1)}$。因此，其维度为 $\\dim(V) = 2(N+1)$。受约束插值空间的维度是 $\\operatorname{nullity}(C)$。\n我们已经确定 $\\operatorname{rank}(C) = 4$。\n将这些值代入秩-零度定理：\n$4 + \\operatorname{dim}(\\text{受约束空间}) = 2(N+1)$\n$\\operatorname{dim}(\\text{受约束空间}) = 2(N+1) - 4$\n$\\operatorname{dim}(\\text{受约束空间}) = 2N + 2 - 4$\n$\\operatorname{dim}(\\text{受约束空间}) = 2N - 2$\n\n这个结果与基函数的观点是一致的：最初的 $2(N+1)$ 个基函数被 $4$ 个边界基函数减少，剩下 $2(N+1) - 4 = 2N-2$ 个基函数来张成受约束空间。这表示系统中自由的（或无约束的）自由度的数量。\n该表达式也可以写成 $2(N-1)$，这对应于 $N-1$ 个内部节点（$x_1, \\dots, x_{N-1}$）的自由度，每个节点有 $2$ 个自由度。", "answer": "$$\n\\boxed{2N - 2}\n$$", "id": "2548386"}, {"introduction": "在约束自由度概念的基础上，本实践将这些思想应用于一个物理模型：欧拉–伯努利（Euler–Bernoulli）梁 [@problem_id:2548427]。你将学习如何区分常见支撑类型（如固定端、简支端和自由端）的本质（几何）边界条件和自然（力）边界条件。这项练习对于正确建模真实世界的结构力学问题至关重要，并加强了数学公式与物理现实之间的联系。", "problem": "一个棱柱形细长梁通过 Euler–Bernoulli 运动学进行建模，其横向挠度场为 $w(x)$，定义在域 $x \\in [0,L]$ 上，其中 $E$ 是杨氏模量，$I$ 是面积二次矩。其强形式为 $(E I\\, w''(x))'' = q(x)$，并在 $x=0$ 和 $x=L$ 处施加适当的边界条件。通过两次分部积分得到的弱形式表明，边界项包含弯矩 $M(x) = -E I\\, w''(x)$ 乘以试函数的导数，以及剪力 $V(x) = -E I\\, w'''(x)$ 乘以试函数。在一个使用一维 Hermite 三次单元的 $C^1$ 有限元公式中，每个网格节点 $i$ 带有两个节点自由度 $w_i = w(x_i)$ 和 $\\theta_i = w'(x_i)$，因此内部的 $C^1$ 连续性通过在公共节点处共享 $w_i$ 和 $\\theta_i$ 来保证。\n\n- 仅使用这些基本事实，为三种经典的端部条件中的每一种，识别哪些量是本质的（施加在 $w$ 和/或 $w'$ 上）与自然的（施加在 $M$ 和/或 $V$ 上），并因此确定在一个 $C^1$ Hermite 离散化中，端点节点上必须约束哪些节点自由度：\n  1. 固支端，\n  2. 简支（铰接）端，\n  3. 自由端。\n\n- 考虑在 $[0,L]$ 上有一个包含 $n \\ge 2$ 个节点和 $C^1$ Hermite 单元的均匀网格。设以下三个模型建立在同一网格上：\n  - 模型 A：在 $x=0$ 处固支，在 $x=L$ 处自由，\n  - 模型 B：在 $x=0$ 处简支，在 $x=L$ 处自由，\n  - 模型 C：在 $x=0$ 处固支，在 $x=L$ 处简支。\n  在施加模型 A、B 和 C 的本质约束后，分别用 $N_A$、$N_B$ 和 $N_C$ 表示组装后的离散试验空间的维度（即自由的全局自由度数量）。\n\n从第一性原理出发，推导 $N_A$、$N_B$ 和 $N_C$，并明确说明每个模型中哪些节点自由度被约束。然后计算单一闭式表达式\n$$\n\\Delta(n) \\equiv N_A\\,N_B - N_C\n$$\n作为 $n$ 的函数。以 $n$ 的简化解析表达式形式给出你的最终答案。不需要进行数值评估或四舍五入。", "solution": "问题陈述经过了严格的验证。\n\n**第一步：提取已知条件**\n- **系统：** 棱柱形细长梁。\n- **运动学：** Euler–Bernoulli，横向挠度场 $w(x)$。\n- **域：** $x \\in [0,L]$。\n- **参数：** 杨氏模量 $E$，面积二次矩 $I$。\n- **强形式：** $(E I\\, w''(x))'' = q(x)$。\n- **边界条件：** 在 $x=0$ 和 $x=L$ 处。\n- **弱形式相关量：** 弯矩 $M(x) = -E I\\, w''(x)$，剪力 $V(x) = -E I\\, w'''(x)$。弱形式的边界项涉及 $M(x)$ 乘以试函数的导数以及 $V(x)$ 乘以试函数。\n- **有限元离散化：** 使用一维 Hermite 三次单元的 $C^1$ 公式。\n- **节点自由度 (DOFs)：** 在每个节点 $i$，自由度为挠度 $w_i = w(x_i)$ 和转角 $\\theta_i = w'(x_i)$。\n- **网格：** 包含 $n \\ge 2$ 个节点的均匀网格。\n- **模型：**\n  - 模型 A：在 $x=0$ 处固支，在 $x=L$ 处自由。\n  - 模型 B：在 $x=0$ 处简支，在 $x=L$ 处自由。\n  - 模型 C：在 $x=0$ 处固支，在 $x=L$ 处简支。\n- **目标：**\n  1. 识别固支、简支和自由端的本质条件与自然条件。\n  2. 推导三个模型的自由全局自由度数量 $N_A$、$N_B$ 和 $N_C$。\n  3. 计算 $\\Delta(n) \\equiv N_A\\,N_B - N_C$。\n\n**第二步：使用提取的已知条件进行验证**\n该问题具有科学依据，是有限元方法在 Euler-Bernoulli 梁理论中的一个标准应用。所有使用的术语——强形式、弱形式、弯矩、剪力、$C^1$ 连续性、Hermite 单元和边界条件类型——在结构力学背景下都是标准的且定义正确。该问题是适定的、客观的、自洽的，为获得唯一解提供了所有必要信息。不存在矛盾、事实错误或歧义。该问题是应用有限元方法基本原理的一个有效练习。\n\n**第三步：结论与行动**\n该问题被判定为**有效**。将提供完整的解答。\n\n**推导**\n\n分析始于对控制微分方程 $(E I\\, w''(x))'' = q(x)$ 的弱形式表述。乘以一个来自合适空间的试函数 $v(x)$，并在域 $[0,L]$ 上积分，得到：\n$$ \\int_{0}^{L} (E I\\, w'')'' v \\, dx = \\int_{0}^{L} q v \\, dx $$\n进行两次分部积分。第一次积分得到：\n$$ \\left[ (E I w'')' v \\right]_{0}^{L} - \\int_{0}^{L} (E I w'')' v' \\, dx = \\int_{0}^{L} q v \\, dx $$\n注意到剪力 $V = -(E I w'')'$，上式变为：\n$$ \\left[ -V v \\right]_{0}^{L} + \\int_{0}^{L} (E I w'') v' \\, dx = \\int_{0}^{L} q v \\, dx $$\n对剩余的积分项进行第二次分部积分，得到：\n$$ \\left[ -V v \\right]_{0}^{L} + \\left[ (E I w'') v' \\right]_{0}^{L} - \\int_{0}^{L} (E I w'') v'' \\, dx = \\int_{0}^{L} q v \\, dx $$\n注意到弯矩 $M = -E I w''$，我们得到最终的弱形式：\n$$ \\int_{0}^{L} E I w'' v'' \\, dx = \\int_{0}^{L} q v \\, dx + \\left[ V v \\right]_{0}^{L} - \\left[ M v' \\right]_{0}^{L} $$\n边界项为 $\\left[ V v - M v' \\right]_{0}^{L}$。在有限元方法中，边界条件被分为本质边界条件或自然边界条件。\n- **本质边界条件**施加在试验空间的主场变量上。对于 $C^1$ 公式，节点自由度是挠度 $w$ 及其一阶导数，即转角 $w'$。因此，任何指定在 $w$ 或 $w'$ 上的条件都是本质条件，必须通过直接约束相应的节点自由度来强制施加。\n- **自然边界条件**是那些涉及弱形式边界积分项中出现的导数的条件。在这里，关于剪力 $V = -E I w'''$（与 $v$ 共轭）和弯矩 $M = -E I w''$（与 $v'$ 共轭）的条件是自然的。如果相应的本质条件没有被施加，这些条件将由弱形式的解自动满足。\n\n**第一部分：边界条件分析**\n\n1.  **固支端：** 物理上要求挠度和转角均为零。\n    - $w=0$ (关于挠度的条件)\n    - $w'=0$ (关于转角的条件)\n    - 两者都是**本质**条件。在一个节点 $i$ 上，这要求约束两个自由度：$w_i=0$ 和 $\\theta_i=0$。\n\n2.  **简支（铰接）端：** 物理上要求零挠度和零弯矩，因为该端可以自由转动。\n    - $w=0$ (关于挠度的条件)\n    - $M = -E I w'' = 0$ (关于弯矩的条件)\n    - 条件 $w=0$ 是**本质的**。条件 $M=0$ 是**自然的**。在一个节点 $i$ 上，这要求仅约束挠度自由度 $w_i=0$。转角自由度 $\\theta_i$ 保持自由。\n\n3.  **自由端：** 没有物理约束，意味着内部剪力和弯矩都必须为零。\n    - $V = -E I w''' = 0$ (关于剪力的条件)\n    - $M = -E I w'' = 0$ (关于弯矩的条件)\n    - 两者都是**自然**条件。不施加任何本质条件。在一个节点 $i$ 上，两个自由度 $w_i$ 和 $\\theta_i$ 都保持自由。\n\n**第二部分：自由自由度的计算 ($N_A, N_B, N_C$)**\n\n一个具有 $n$ 个节点、用 $C^1$ Hermite 单元离散化的网格，每个节点有 2 个自由度 ($w_i$, $\\theta_i$)。无约束的组装系统中的总自由度数为 $2n$。自由自由度的数量是该总数减去由本质边界条件约束的自由度数量。\n\n- **模型 A：在 $x=0$ 处固支，在 $x=L$ 处自由。**\n  - 在固支端 ($x=0$)，我们施加 $2$ 个本质条件：$w(0)=0$ 和 $w'(0)=0$。\n  - 在自由端 ($x=L$)，我们施加 $0$ 个本质条件。\n  - 被约束的自由度总数为 $2+0=2$。\n  - 自由自由度的数量为 $N_A = 2n - 2$。\n\n- **模型 B：在 $x=0$ 处简支，在 $x=L$ 处自由。**\n  - 在简支端 ($x=0$)，我们施加 $1$ 个本质条件：$w(0)=0$。\n  - 在自由端 ($x=L$)，我们施加 $0$ 个本质条件。\n  - 被约束的自由度总数为 $1+0=1$。\n  - 自由自由度的数量为 $N_B = 2n - 1$。\n\n- **模型 C：在 $x=0$ 处固支，在 $x=L$ 处简支。**\n  - 在固支端 ($x=0$)，我们施加 $2$ 个本质条件：$w(0)=0$ 和 $w'(0)=0$。\n  - 在简支端 ($x=L$)，我们施加 $1$ 个本质条件：$w(L)=0$。\n  - 被约束的自由度总数为 $2+1=3$。\n  - 自由自由度的数量为 $N_C = 2n - 3$。\n\n**第三部分：$\\Delta(n)$ 的计算**\n\n问题要求计算 $\\Delta(n) = N_A N_B - N_C$。代入上面推导出的表达式：\n$$ \\Delta(n) = (2n - 2)(2n - 1) - (2n - 3) $$\n首先，展开乘积：\n$$ (2n - 2)(2n - 1) = 4n^2 - 2n - 4n + 2 = 4n^2 - 6n + 2 $$\n现在，将此结果代回 $\\Delta(n)$ 的表达式中：\n$$ \\Delta(n) = (4n^2 - 6n + 2) - (2n - 3) $$\n$$ \\Delta(n) = 4n^2 - 6n + 2 - 2n + 3 $$\n合并同类项，得到最终的简化表达式：\n$$ \\Delta(n) = 4n^2 - 8n + 5 $$\n这个多项式表达式是最终答案。", "answer": "$$\n\\boxed{4n^{2} - 8n + 5}\n$$", "id": "2548427"}, {"introduction": "从一维理论转向二维实现，最后的这个实践解决了一个在编写 $C^1$ 单元代码时的关键挑战 [@problem_id:2548393]。为了在单元边界上强制法向导数的连续性，我们需要一个对“法向”方向一致的定义，该定义必须独立于每个单元顶点的存储顺序。本练习将指导你实现一个算法来计算任意边的规范法向量（canonical normal vector），这是为板壳问题稳健地构建有限元软件的一项基本技术。", "problem": "考虑在有限元法中跨单元交界面强制施加连续性需求的必要性，特别是函数值连续性（记为 $C^0$）与法向导数连续性（记为 $C^1$）之间的差异。对于在二维三角剖分区域上定义的标量场 $u(x,y)$，跨越两个三角形 $T_1$ 和 $T_2$ 之间共享边的 $C^1$ 连续性要求可简化为要求法向导数在该边上一致。这种一致性必须独立于三角形顶点的排序和定向，也独立于每个三角形出射法线方向的选择。\n\n您的任务是实现一个程序，该程序使用独立于三角形定向的法线方向全局一致符号约定，来计算边中点处的基于边的法向导数。其目的是保证对于一条共享边，当使用相同的规范边法线进行评估时，从 $T_1$ 计算出的法向导数与从 $T_2$ 计算出的法向导数相匹配。这种规范约定使得 $C^1$ 连续性的施加没有歧义。\n\n从以下核心定义和事实出发：\n- 标量场 $u(x,y)$ 的梯度为 $\\nabla u = \\left[\\frac{\\partial u}{\\partial x}, \\frac{\\partial u}{\\partial y}\\right]$。\n- 沿单位向量 $n$ 方向的方向导数为 $D_n u = \\nabla u \\cdot n$。\n- 对于端点为 $p_a = (x_a,y_a)$ 和 $p_b = (x_b,y_b)$ 的直边，定义边中点为 $m = \\frac{1}{2}(p_a + p_b)$，单位切向量为 $t = \\frac{p_b - p_a}{\\|p_b - p_a\\|}$。\n- 平面内逆时针旋转 $90^\\circ$ 的线性算子为 $R_{90}(x,y) = (-y, x)$，它将单位切向量 $t$ 映射到单位法向量 $n = R_{90}(t)$。\n\n您必须：\n1. 使用以下字典序排序规则为每条无向边 $\\{p_a,p_b\\}$ 定义一个规范方向：将边从 $p_{\\min}$ 定向到 $p_{\\max}$，其中如果 $x_1 < x_2$ 或者 $x_1 = x_2$ 且 $y_1 < y_2$，则 $p_{\\min} = (x_1,y_1)$ 在字典序上小于 $p_{\\max} = (x_2,y_2)$。\n2. 使用此规范方向，定义边的规范单位切向量 $t$ 和规范单位法向量 $n = R_{90}(t)$。\n3. 在边中点 $m$ 处，计算 $D_n u(m) = \\nabla u(m)\\cdot n$。\n\n您的程序应实现此算法，并将其应用于以下测试套件。在所有共享边的情况下，您必须报告使用相同的规范边法线为两个三角形计算出的两个法向导数之间的绝对差，如果两边使用相同的梯度，对于光滑解析场，该差值应恒等于零。在边界边的情况下（只提供一个三角形），报告使用规范法线 $n$ 计算的带符号法向导数值 $D_n u(m)$。\n\n测试套件：\n- 情景 A（共享边，轴对齐）：\n  - $T_1$ 顶点：$(0,0)$, $(1,0)$, $(0,1)$。\n  - $T_2$ 顶点：$(1,0)$, $(0,0)$, $(1,1)$。\n  - 共享边端点：$(0,0)$ 和 $(1,0)$。\n  - 标量场：$u_1(x,y) = x^2 + 2xy + 3y^2$。其梯度为 $\\nabla u_1(x,y) = (2x + 2y, 2x + 6y)$。\n  - 输出：使用相同的规范边法线 $n$，从 $T_1$ 和 $T_2$ 计算出的 $D_n u_1(m)$ 之间的绝对差。\n\n- 情景 B（共享边，斜边）：\n  - $T_1$ 顶点：$(2.0,1.0)$, $(3.5,2.2)$, $(2.2,2.8)$。\n  - $T_2$ 顶点：$(3.5,2.2)$, $(2.0,1.0)$, $(4.0,0.5)$。\n  - 共享边端点：$(2.0,1.0)$ 和 $(3.5,2.2)$。\n  - 标量场：$u_2(x,y) = \\sin(x) + \\cos(y)$。其梯度为 $\\nabla u_2(x,y) = (\\cos x, -\\sin y)$。\n  - 输出：使用规范法线 $n$，从两个三角形计算出的 $D_n u_2(m)$ 之间的绝对差。\n\n- 情景 C（共享边，局部定向相反）：\n  - $T_1$ 顶点：$(-1.0,0.5)$, $(0.2,0.1)$, $(-0.2,-0.9)$。\n  - $T_2$ 顶点：$(0.2,0.1)$, $(-1.0,0.5)$, $(1.5,0.0)$。\n  - 共享边端点：$(-1.0,0.5)$ 和 $(0.2,0.1)$。\n  - 标量场：$u_3(x,y) = e^{x-y}$。其梯度为 $\\nabla u_3(x,y) = (e^{x-y}, -e^{x-y})$。\n  - 输出：使用规范法线 $n$，从两个三角形计算出的 $D_n u_3(m)$ 之间的绝对差。\n\n- 情景 D（边界边，斜边）：\n  - 三角形顶点：$(0,0)$, $(1,0)$, $(0,1)$。\n  - 边界边端点：$(0,1)$ 和 $(1,0)$。\n  - 标量场：$u_2(x,y) = \\sin(x) + \\cos(y)$，其梯度为 $\\nabla u_2(x,y) = (\\cos x, -\\sin y)$。\n  - 输出：使用规范法线 $n$ 计算的带符号值 $D_n u_2(m)$。\n\n- 情景 E（边界边，极短边以测试数值稳定性）：\n  - 三角形顶点：$(0.0,0.0)$, $(1.0,0.0)$, $(0.0,1.0)$。\n  - 边界边端点：$(10^{-9},0.0)$ 和 $(10^{-8},10^{-8})$。\n  - 标量场：$u_1(x,y) = x^2 + 2xy + 3y^2$，其梯度为 $\\nabla u_1(x,y) = (2x + 2y, 2x + 6y)$。\n  - 输出：使用规范法线 $n$ 计算的带符号值 $D_n u_1(m)$。\n\n实现和输出要求：\n- 您必须使用字典序定向规则和 $90^\\circ$ 逆时针旋转 $R_{90}(x,y) = (-y,x)$ 来计算规范边切向量和法向量。\n- 对于每种情况，计算给定边的中点 $m$，并评估相应的解析梯度 $\\nabla u(m)$。\n- 对 $t$ 和 $n$ 使用单位向量；在所有提供的情况下，范数 $\\|p_b - p_a\\|$ 必须严格为正。\n- 您的程序应生成单行输出，其中按顺序包含情景A到E的结果，形式为用方括号括起来的逗号分隔列表（例如 $[r_A,r_B,r_C,r_D,r_E]$）。\n- 所有输出必须是纯数字形式。对于共享边情况（A–C），结果是一个浮点数，等于 $|D_n u(m)\\big|_{T_1} - D_n u(m)\\big|_{T_2}|$；对于边界边情况（D–E），结果是一个浮点数，等于 $D_n u(m)$。", "solution": "所述问题是有效的。它在科学上基于向量微积分和有限元法的原理，是一个具有清晰确定性算法的适定问题，并使用客观、无歧义的语言进行表述。所有提供的数据和定义都是自洽的，足以推导出唯一解。问题的核心是实现一个计算边上规范法向量的程序，这对于在数值方法中无歧义地施加 $C^1$ 连续性条件至关重要。\n\n我们继续系统地应用指定的算法。基本目标是计算边中点处的方向导数 $D_n u = \\nabla u \\cdot n$，其中 $n$ 是一个规范单位法向量。这个规范法向量必须独立于局部单元的定向。\n\n对于由其端点 $p_a$ 和 $p_b$ 定义的任何给定边，该算法包括以下步骤：\n\n1.  **规范排序**：两个顶点 $p_a = (x_a, y_a)$ 和 $p_b = (x_b, y_b)$ 按字典序排序以定义一个规范方向。我们定义 $p_{\\min}$ 和 $p_{\\max}$，使得 $p_{\\min}$ 在字典序上小于 $p_{\\max}$。即，如果 $x_1 < x_2$ 或 $x_1 = x_2$ 且 $y_1 < y_2$，则 $p_{\\min} = (x_1, y_1)$ 和 $p_{\\max} = (x_2, y_2)$。\n\n2.  **规范切向量**：从 $p_{\\min}$ 到 $p_{\\max}$ 形成一个切向量：$v = p_{\\max} - p_{\\min}$。然后规范单位切向量为 $t = v / \\|v\\|$。\n\n3.  **规范法向量**：规范单位法向量 $n$ 是通过将单位切向量 $t = (t_x, t_y)$ 逆时针旋转 $90$ 度得到的。给定旋转算子 $R_{90}(x,y) = (-y, x)$，法向量为 $n = (-t_y, t_x)$。\n\n4.  **中点求值**：在边中点 $m = \\frac{1}{2}(p_a + p_b)$ 处计算标量场的梯度 $\\nabla u$。\n\n5.  **法向导数**：法向导数计算为点积 $D_n u(m) = \\nabla u(m) \\cdot n$。\n\n对于共享边的情况，问题要求使用相同的解析梯度场，计算从每个相邻三角形得出的法向导数的绝对差。由于规范法线 $n$ 是相同的，并且从解析公式求出的梯度 $\\nabla u(m)$ 也是相同的，因此两个方向导数将相等。它们的绝对差因此恒等于零。这是对规范法线构造一致性的验证。对于边界边的情况，要求的是单个计算出的法向导数的带符号值。\n\n**情景 A：共享边**\n- 边端点：$p_a = (0,0)$, $p_b = (1,0)$。\n- 规范排序：$p_{\\min} = (0,0)$, $p_{\\max} = (1,0)$，因为 $0 < 1$。\n- 规范切向量：$v = (1,0) - (0,0) = (1,0)$。单位切向量为 $t = (1,0)$。\n- 规范法向量：$n = R_{90}(1,0) = (-0, 1) = (0,1)$。\n- 标量场：$u_1(x,y) = x^2 + 2xy + 3y^2$，其梯度为 $\\nabla u_1(x,y) = (2x+2y, 2x+6y)$。\n- 对于共享该边的两个三角形，梯度和法线是使用相同的公式计算的。因此，法向导数值必然相等，其绝对差为0。\n\n**情景 B：共享边**\n- 边端点：$p_a = (2.0,1.0)$, $p_b = (3.5,2.2)$。\n- 规范排序：$p_{\\min} = (2.0,1.0)$, $p_{\\max} = (3.5,2.2)$，因为 $2.0 < 3.5$。\n- 标量场：$u_2(x,y) = \\sin(x) + \\cos(y)$，其梯度为 $\\nabla u_2(x,y) = (\\cos x, -\\sin y)$。\n- 对于三角形 $T_1$ 和 $T_2$，该过程是相同的，因为它仅依赖于边的几何形状和解析标量场。规范法线和中点处的梯度是唯一的。绝对差必须为 $0$。\n\n**情景 C：共享边**\n- 边端点：$p_a = (-1.0,0.5)$, $p_b = (0.2,0.1)$。\n- 规范排序：$p_{\\min} = (-1.0,0.5)$, $p_{\\max} = (0.2,0.1)$，因为 $-1.0 < 0.2$。三角形的局部顶点定向相反这一事实与此规范过程无关。\n- 标量场：$u_3(x,y) = e^{x-y}$，其梯度为 $\\nabla u_3(x,y) = (e^{x-y}, -e^{x-y})$。\n- 与之前的共享边情况一样，使用全局定义的规范法线和单一的解析场可保证计算出的法向导数相同。绝对差为 $0$。\n\n**情景 D：边界边**\n- 边端点：$p_a = (0,1)$, $p_b = (1,0)$。\n- 规范排序：$p_{\\min} = (0,1)$, $p_{\\max} = (1,0)$，因为 $0 < 1$。\n- 规范切向量：$v = (1,0) - (0,1) = (1,-1)$。范数为 $\\|v\\| = \\sqrt{1^2 + (-1)^2} = \\sqrt{2}$。单位切向量为 $t = \\frac{1}{\\sqrt{2}}(1, -1)$。\n- 规范法向量：$n = R_{90}(t) = \\frac{1}{\\sqrt{2}}(1, 1)$。\n- 中点：$m = \\frac{1}{2}((0,1) + (1,0)) = (0.5, 0.5)$。\n- 场和梯度：$u_2(x,y) = \\sin(x) + \\cos(y)$, $\\nabla u_2(x,y) = (\\cos x, -\\sin y)$。\n- 中点处的梯度：$\\nabla u_2(0.5, 0.5) = (\\cos(0.5), -\\sin(0.5))$。\n- 法向导数：$D_n u_2(m) = \\nabla u_2(m) \\cdot n = (\\cos(0.5), -\\sin(0.5)) \\cdot \\frac{1}{\\sqrt{2}}(1, 1) = \\frac{1}{\\sqrt{2}}(\\cos(0.5) - \\sin(0.5))$。\n- 数值上，这是 $\\frac{1}{\\sqrt{2}}(0.87758256... - 0.47942553...) \\approx 0.2815236...$。\n\n**情景 E：边界边**\n- 边端点：$p_a = (10^{-9},0)$, $p_b = (10^{-8}, 10^{-8})$。\n- 规范排序：$p_{\\min} = (10^{-9},0)$, $p_{\\max} = (10^{-8}, 10^{-8})$，因为 $10^{-9} < 10^{-8}$。\n- 规范切向量：$v = (10^{-8} - 10^{-9}, 10^{-8} - 0) = (9 \\times 10^{-9}, 10^{-8})$。让我们使用 $p_b-p_a = (0.9 \\times 10^{-8}, 1.0 \\times 10^{-8}) = 10^{-8}(0.9, 1.0)$。\n- 范数为 $\\|v\\| = 10^{-8}\\sqrt{0.9^2 + 1.0^2} = 10^{-8}\\sqrt{1.81}$。单位切向量为 $t = \\frac{1}{\\sqrt{1.81}}(0.9, 1.0)$。\n- 规范法向量：$n = R_{90}(t) = \\frac{1}{\\sqrt{1.81}}(-1.0, 0.9)$。\n- 中点：$m = \\frac{1}{2}(10^{-9} + 10^{-8}, 10^{-8}) = (5.5 \\times 10^{-9}, 5 \\times 10^{-9})$。\n- 场和梯度：$u_1(x,y) = x^2 + 2xy + 3y^2$, $\\nabla u_1(x,y) = (2x+2y, 2x+6y)$。\n- 中点处的梯度：设 $m_x = 5.5 \\times 10^{-9}$ 和 $m_y = 5 \\times 10^{-9}$。\n- $\\nabla u_1(m) = (2(m_x+m_y), 2(m_x+3m_y)) = (2(10.5 \\times 10^{-9}), 2(20.5 \\times 10^{-9})) = (21 \\times 10^{-9}, 41 \\times 10^{-9})$。\n- 法向导数：$D_n u_1(m) = \\nabla u_1(m) \\cdot n = (21 \\times 10^{-9}, 41 \\times 10^{-9}) \\cdot \\frac{1}{\\sqrt{1.81}}(-1.0, 0.9)$。\n- $D_n u_1(m) = \\frac{10^{-9}}{\\sqrt{1.81}} (-21 + 41 \\times 0.9) = \\frac{10^{-9}}{\\sqrt{1.81}} (-21 + 36.9) = \\frac{15.9 \\times 10^{-9}}{\\sqrt{1.81}}$。\n- 数值上，这是 $\\frac{15.9}{\\sqrt{1.81}} \\times 10^{-9} \\approx 11.81829... \\times 10^{-9} = 1.181829... \\times 10^{-8}$。\n\n下面的程序实现了此逻辑以计算所需的值。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef calculate_normal_derivative(edge_p1, edge_p2, grad_func, is_shared_edge):\n    \"\"\"\n    Computes the normal derivative of a scalar field at an edge midpoint\n    using a canonical normal vector definition.\n    \"\"\"\n    # Convert points to numpy arrays for vector operations\n    p1 = np.array(edge_p1, dtype=np.float64)\n    p2 = np.array(edge_p2, dtype=np.float64)\n\n    # Step 1: Define canonical orientation using lexicographic ordering\n    if p1[0] < p2[0] or (p1[0] == p2[0] and p1[1] < p2[1]):\n        p_min, p_max = p1, p2\n    else:\n        p_min, p_max = p2, p1\n\n    # Step 2: Compute canonical unit tangent\n    tangent_vec = p_max - p_min\n    norm = np.linalg.norm(tangent_vec)\n    \n    # Per problem statement, norm is strictly positive.\n    # A check for norm == 0 would be needed for a general-purpose function.\n    unit_tangent = tangent_vec / norm\n    \n    # Step 3: Compute canonical unit normal via 90-degree CCW rotation\n    # R_90(t_x, t_y) = (-t_y, t_x)\n    unit_normal = np.array([-unit_tangent[1], unit_tangent[0]])\n    \n    # Step 4: Compute edge midpoint and evaluate the gradient there\n    midpoint = (p1 + p2) / 2.0\n    gradient_at_midpoint = grad_func(midpoint[0], midpoint[1])\n    \n    # Step 5: Compute the normal derivative\n    normal_derivative = np.dot(gradient_at_midpoint, unit_normal)\n    \n    if is_shared_edge:\n        # For a shared edge with a single smooth analytic field, the gradient\n        # evaluated at the midpoint is identical for both triangles. The\n        # canonical normal is also identical. Thus, the two normal derivatives\n        # are the same, and their absolute difference is zero.\n        return 0.0\n    else:\n        # For a boundary edge, the problem requests the signed normal derivative.\n        return normal_derivative\n\ndef solve():\n    \"\"\"\n    Main solver function to run all test cases and print results.\n    \"\"\"\n    # Define the scalar fields' gradients as provided in the problem\n    def u1_grad(x, y):\n        return np.array([2*x + 2*y, 2*x + 6*y], dtype=np.float64)\n\n    def u2_grad(x, y):\n        return np.array([np.cos(x), -np.sin(y)], dtype=np.float64)\n\n    def u3_grad(x, y):\n        return np.array([np.exp(x - y), -np.exp(x - y)], dtype=np.float64)\n\n    # Define the test suite from the problem statement\n    test_cases = [\n        # Case A (shared edge)\n        {'p1': (0.0, 0.0), 'p2': (1.0, 0.0), 'grad_func': u1_grad, 'is_shared': True},\n        # Case B (shared edge)\n        {'p1': (2.0, 1.0), 'p2': (3.5, 2.2), 'grad_func': u2_grad, 'is_shared': True},\n        # Case C (shared edge)\n        {'p1': (-1.0, 0.5), 'p2': (0.2, 0.1), 'grad_func': u3_grad, 'is_shared': True},\n        # Case D (boundary edge)\n        {'p1': (0.0, 1.0), 'p2': (1.0, 0.0), 'grad_func': u2_grad, 'is_shared': False},\n        # Case E (boundary edge, short)\n        {'p1': (1e-9, 0.0), 'p2': (1e-8, 1e-8), 'grad_func': u1_grad, 'is_shared': False},\n    ]\n\n    results = []\n    for case in test_cases:\n        result = calculate_normal_derivative(\n            case['p1'], case['p2'], case['grad_func'], case['is_shared']\n        )\n        results.append(result)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2548393"}]}