{"hands_on_practices": [{"introduction": "掌握等参单元应变-位移矩阵 ($B$ 矩阵) 的推导，最好从最简单的例子入手。本练习将引导您完成一维二次杆单元的推导过程 [@problem_id:2601372]。通过在一维环境下进行推导，您可以专注于链式法则的核心逻辑以及雅可比行列式 (Jacobian) 的作用——在此它只是一个标量，从而在从母坐标系 ($ \\xi $) 到物理坐标系 ($ x $) 之间建立起一座清晰直观的桥梁。", "problem": "考虑一个处于小变形状态的直的、等截面一维弹性杆，在有限元法（FEM）中，该杆被一个三节点等参二次单元离散化。设母（参考）坐标用 $\\xi \\in [-1,1]$ 表示，节点位于 $\\xi_1=-1$、$\\xi_2=0$ 和 $\\xi_3=1$ 处。单元节点的物理坐标为 $x_1=0$、$x_2=1$ 和 $x_3=3$。节点轴向位移为 $u_1$、$u_2$ 和 $u_3$。假设在母单元上使用标准二次拉格朗日插值，并进行到物理坐标的等参映射。\n\n仅从一维小（工程）应变的定义 $\\varepsilon = \\dfrac{du}{dx}$、等参近似 $u^h(x(\\xi)) = \\sum_{i=1}^{3} N_i(\\xi)\\,u_i$ 以及等参映射 $x(\\xi) = \\sum_{i=1}^{3} N_i(\\xi)\\,x_i$ 出发，使用链式法则推导应变-位移矩阵（通常称为 $B$ 矩阵），其形式为 $B(\\xi) = \\begin{bmatrix} \\dfrac{dN_1}{dx} & \\dfrac{dN_2}{dx} & \\dfrac{dN_3}{dx} \\end{bmatrix}$，并将 $\\dfrac{dN_i}{dx}$ 用关于 $\\xi$ 的导数和雅可比 $J(\\xi) = \\dfrac{dx}{d\\xi}$ 表示。然后，对于给定的节点坐标 $x_1=0$、$x_2=1$ 和 $x_3=3$，计算在母坐标 $\\xi=0$ 处的轴向应变，并用节点位移 $u_1$、$u_2$ 和 $u_3$ 表示。\n\n将最终答案表示为 $\\varepsilon(0)$ 的一个单一简化解析表达式（无量纲，无单位）。无需四舍五入。", "solution": "目标是从基本原理出发，获得一维应变-位移关系。在一维杆的小变形运动学中，工程应变的定义为\n$$\n\\varepsilon(x) = \\frac{du}{dx}.\n$$\n在等参有限元设置中，我们使用相同的形函数来插值位移场和几何形状。对于母域 $\\xi \\in [-1,1]$ 上，节点位于 $\\xi_1=-1$、$\\xi_2=0$ 和 $\\xi_3=1$ 的三节点二次单元，位移近似为\n$$\nu^h(x(\\xi)) = \\sum_{i=1}^{3} N_i(\\xi)\\,u_i,\n$$\n几何映射为\n$$\nx(\\xi) = \\sum_{i=1}^{3} N_i(\\xi)\\,x_i.\n$$\n根据链式法则，\n$$\n\\frac{du}{dx} = \\frac{du}{d\\xi}\\,\\frac{d\\xi}{dx}.\n$$\n由于 $u^h$ 通过形函数 $N_i(\\xi)$ 依赖于 $\\xi$，其关于 $\\xi$ 的导数为\n$$\n\\frac{du}{d\\xi} = \\sum_{i=1}^{3} \\frac{dN_i}{d\\xi}(\\xi)\\,u_i.\n$$\n等参映射的雅可比为\n$$\nJ(\\xi) = \\frac{dx}{d\\xi} = \\sum_{i=1}^{3} \\frac{dN_i}{d\\xi}(\\xi)\\,x_i,\n$$\n因此\n$$\n\\frac{d\\xi}{dx} = \\frac{1}{J(\\xi)}.\n$$\n综合这些，应变可以写为\n$$\n\\varepsilon(\\xi) = \\frac{du}{dx} = \\left(\\sum_{i=1}^{3} \\frac{dN_i}{d\\xi}(\\xi)\\,u_i\\right)\\frac{1}{J(\\xi)}.\n$$\n这将应变-位移矩阵（行向量）确定为\n$$\nB(\\xi) = \\begin{bmatrix} \\dfrac{dN_1}{dx} & \\dfrac{dN_2}{dx} & \\dfrac{dN_3}{dx} \\end{bmatrix}\n= \\begin{bmatrix} \\dfrac{dN_1}{d\\xi} & \\dfrac{dN_2}{d\\xi} & \\dfrac{dN_3}{d\\xi} \\end{bmatrix}\\frac{1}{J(\\xi)}.\n$$\n为了计算特定位置的 $\\varepsilon$，我们需要显式的形函数。对于与母节点 $\\xi_1=-1$、$\\xi_2=0$ 和 $\\xi_3=1$ 相关联的二次拉格朗日多项式，形函数遵循拉格朗日构造\n$$\nN_i(\\xi) = \\prod_{\\substack{j=1 \\\\ j\\neq i}}^{3} \\frac{\\xi-\\xi_j}{\\xi_i-\\xi_j}.\n$$\n因此，\n$$\nN_1(\\xi) = \\frac{(\\xi-0)(\\xi-1)}{(-1-0)(-1-1)} = \\frac{\\xi(\\xi-1)}{2},\\quad\nN_2(\\xi) = \\frac{(\\xi+1)(\\xi-1)}{(0+1)(0-1)} = 1-\\xi^2,\\quad\nN_3(\\xi) = \\frac{(\\xi+1)(\\xi-0)}{(1+1)(1-0)} = \\frac{\\xi(\\xi+1)}{2}.\n$$\n它们关于 $\\xi$ 的导数是\n$$\n\\frac{dN_1}{d\\xi} = \\xi - \\frac{1}{2},\\quad\n\\frac{dN_2}{d\\xi} = -2\\xi,\\quad\n\\frac{dN_3}{d\\xi} = \\xi + \\frac{1}{2}.\n$$\n雅可比为\n$$\nJ(\\xi) = \\left(\\xi - \\frac{1}{2}\\right)x_1 + (-2\\xi)\\,x_2 + \\left(\\xi + \\frac{1}{2}\\right)x_3.\n$$\n对于给定的节点坐标 $x_1=0$、$x_2=1$ 和 $x_3=3$，在 $\\xi=0$ 处求值：\n$$\n\\left.\\frac{dN_1}{d\\xi}\\right|_{\\xi=0} = -\\frac{1}{2},\\quad\n\\left.\\frac{dN_2}{d\\xi}\\right|_{\\xi=0} = 0,\\quad\n\\left.\\frac{dN_3}{d\\xi}\\right|_{\\xi=0} = \\frac{1}{2},\n$$\n并且\n$$\nJ(0) = \\left(-\\frac{1}{2}\\right)x_1 + 0\\cdot x_2 + \\left(\\frac{1}{2}\\right)x_3 = -\\frac{1}{2}\\cdot 0 + 0\\cdot 1 + \\frac{1}{2}\\cdot 3 = \\frac{3}{2}.\n$$\n因此，在 $\\xi=0$ 处求得的应变-位移矩阵为\n$$\nB(0) = \\begin{bmatrix}\n\\displaystyle \\frac{-\\frac{1}{2}}{\\frac{3}{2}} & \\displaystyle \\frac{0}{\\frac{3}{2}} & \\displaystyle \\frac{\\frac{1}{2}}{\\frac{3}{2}}\n\\end{bmatrix}\n=\n\\begin{bmatrix}\n-\\frac{1}{3} & 0 & \\frac{1}{3}\n\\end{bmatrix}.\n$$\n那么在 $\\xi=0$ 处的轴向应变为\n$$\n\\varepsilon(0) = B(0)\\begin{bmatrix} u_1 \\\\ u_2 \\\\ u_3 \\end{bmatrix}\n= -\\frac{1}{3}u_1 + 0\\cdot u_2 + \\frac{1}{3}u_3\n= \\frac{u_3 - u_1}{3}.\n$$\n这是无量纲的，并且不需要四舍五入。", "answer": "$$\\boxed{\\frac{u_3 - u_1}{3}}$$", "id": "2601372"}, {"introduction": "在掌握了一维情况后，我们进入二维领域，从最基础的常应变三角形 (Constant Strain Triangle, CST) 单元开始 [@problem_id:2601319]。这个实践展示了如何直接在物理坐标系下通过线性形函数推导出 $B$ 矩阵，并阐明了为何该单元内的应变是恒定的。这是一个理解节点位移与二维应变状态 ($\\varepsilon_{xx}, \\varepsilon_{yy}, \\gamma_{xy}$) 关系的关键练习，同时它也澄清了 $B$ 矩阵的构建是纯粹的运动学关系，独立于平面应力或平面应变等材料本构假设。", "problem": "考虑一个在有限元法 (FEM) 中使用的二维 (2D) 线性三角形有限元，也称为常应变三角形 (CST)。该单元在物理 (笛卡尔) 域中占据一个区域，其节点坐标为：节点 $1$ 位于 $(0,0)$，节点 $2$ 位于 $(2,0)$，节点 $3$ 位于 $(0,3)$。设平面内位移场由线性形函数近似表示为 $u(x,y) = \\sum_{i=1}^{3} N_i(x,y)\\,u_i$ 和 $v(x,y) = \\sum_{i=1}^{3} N_i(x,y)\\,v_i$，其中 $u_i$ 和 $v_i$ 分别是节点 $i$ 在 $x$ 和 $y$ 方向上的节点位移分量。小应变张量分量定义为 $\\varepsilon_{xx} = \\partial u/\\partial x$，$\\varepsilon_{yy} = \\partial v/\\partial y$，以及 $\\gamma_{xy} = \\partial u/\\partial y + \\partial v/\\partial x$。\n\n从这些定义和在物理坐标中定义 CST 形函数的节点插值条件出发（无需等参映射），执行以下操作：\n\n1. 针对平面应变情况，推导将节点位移向量 $\\{u_1, v_1, u_2, v_2, u_3, v_3\\}^{T}$ 与应变向量 $\\{\\varepsilon_{xx}, \\varepsilon_{yy}, \\gamma_{xy}\\}^{T}$ 相关联的应变-位移矩阵（B 矩阵）。\n\n2. 针对平面应力情况重复此推导，并解释两种情况下得到的应变-位移矩阵是否不同，并说明原因。\n\n然后，使用您推导出的 B 矩阵（根据您的结论选择任一情况），计算标量\n$$\nS \\;=\\; \\det\\!\\big(B\\,B^{T}\\big).\n$$\n\n以精确有理数的形式给出 $S$。不要提供中间值；只报告 $S$ 的最终值，不带单位。无需四舍五入。", "solution": "推导过程如下。对于线性三角形单元，假定其平面内位移场 $u(x,y)$ 和 $v(x,y)$ 是空间坐标 $x$ 和 $y$ 的线性函数。\n$$\nu(x,y) = \\alpha_1 + \\alpha_2 x + \\alpha_3 y\n$$\n$$\nv(x,y) = \\alpha_4 + \\alpha_5 x + \\alpha_6 y\n$$\n六个系数 $\\alpha_i$ 通过施加单元节点处的边界条件来确定，即每个节点的位移必须等于其指定的节点位移。\n节点坐标为 $(x_1, y_1) = (0,0)$，$(x_2, y_2) = (2,0)$，以及 $(x_3, y_3) = (0,3)$。\n\n在节点 1：$u_1 = u(0,0) = \\alpha_1$，且 $v_1 = v(0,0) = \\alpha_4$。\n在节点 2：$u_2 = u(2,0) = \\alpha_1 + 2\\alpha_2$，得出 $\\alpha_2 = \\frac{1}{2}(u_2 - u_1)$。\n同样地，$v_2 = v(2,0) = \\alpha_4 + 2\\alpha_5$，得出 $\\alpha_5 = \\frac{1}{2}(v_2 - v_1)$。\n在节点 3：$u_3 = u(0,3) = \\alpha_1 + 3\\alpha_3$，得出 $\\alpha_3 = \\frac{1}{3}(u_3 - u_1)$。\n同样地，$v_3 = v(0,3) = \\alpha_4 + 3\\alpha_6$，得出 $\\alpha_6 = \\frac{1}{3}(v_3 - v_1)$。\n\n将这些系数代回位移场方程：\n$$\nu(x,y) = u_1 + \\frac{1}{2}(u_2 - u_1)x + \\frac{1}{3}(u_3 - u_1)y\n$$\n$$\nv(x,y) = v_1 + \\frac{1}{2}(v_2 - v_1)x + \\frac{1}{3}(v_3 - v_1)y\n$$\n这些表达式可以被重新整理，以识别出在单元域上对节点位移进行插值的形函数 $N_i(x,y)$。\n$$\nu(x,y) = \\left(1 - \\frac{x}{2} - \\frac{y}{3}\\right)u_1 + \\left(\\frac{x}{2}\\right)u_2 + \\left(\\frac{y}{3}\\right)u_3 = N_1 u_1 + N_2 u_2 + N_3 u_3\n$$\n$$\nv(x,y) = \\left(1 - \\frac{x}{2} - \\frac{y}{3}\\right)v_1 + \\left(\\frac{x}{2}\\right)v_2 + \\left(\\frac{y}{3}\\right)v_3 = N_1 v_1 + N_2 v_2 + N_3 v_3\n$$\n因此，形函数为：\n$N_1(x,y) = 1 - \\frac{x}{2} - \\frac{y}{3}$，$N_2(x,y) = \\frac{x}{2}$，$N_3(x,y) = \\frac{y}{3}$。\n\n应变向量 $\\boldsymbol{\\varepsilon} = \\{\\varepsilon_{xx}, \\varepsilon_{yy}, \\gamma_{xy}\\}^{T}$ 是根据小应变定义从位移场推导出来的：\n$$\n\\varepsilon_{xx} = \\frac{\\partial u}{\\partial x} = \\frac{\\partial}{\\partial x}(N_1 u_1 + N_2 u_2 + N_3 u_3) = \\frac{\\partial N_1}{\\partial x}u_1 + \\frac{\\partial N_2}{\\partial x}u_2 + \\frac{\\partial N_3}{\\partial x}u_3\n$$\n$$\n\\varepsilon_{yy} = \\frac{\\partial v}{\\partial y} = \\frac{\\partial}{\\partial y}(N_1 v_1 + N_2 v_2 + N_3 v_3) = \\frac{\\partial N_1}{\\partial y}v_1 + \\frac{\\partial N_2}{\\partial y}v_2 + \\frac{\\partial N_3}{\\partial y}v_3\n$$\n$$\n\\gamma_{xy} = \\frac{\\partial u}{\\partial y} + \\frac{\\partial v}{\\partial x} = \\left(\\frac{\\partial N_1}{\\partial y}u_1 + \\frac{\\partial N_2}{\\partial y}u_2 + \\frac{\\partial N_3}{\\partial y}u_3\\right) + \\left(\\frac{\\partial N_1}{\\partial x}v_1 + \\frac{\\partial N_2}{\\partial x}v_2 + \\frac{\\partial N_3}{\\partial x}v_3\\right)\n$$\n所需的形函数偏导数为：\n$\\frac{\\partial N_1}{\\partial x} = -\\frac{1}{2}$，$\\frac{\\partial N_1}{\\partial y} = -\\frac{1}{3}$\n$\\frac{\\partial N_2}{\\partial x} = \\frac{1}{2}$，$\\frac{\\partial N_2}{\\partial y} = 0$\n$\\frac{\\partial N_3}{\\partial x} = 0$，$\\frac{\\partial N_3}{\\partial y} = \\frac{1}{3}$\n\n应变向量 $\\boldsymbol{\\varepsilon}$ 和节点位移向量 $\\mathbf{d} = \\{u_1, v_1, u_2, v_2, u_3, v_3\\}^{T}$ 之间的关系由 $\\boldsymbol{\\varepsilon} = \\mathbf{B}\\mathbf{d}$ 给出。矩阵 $\\mathbf{B}$ 是应变-位移矩阵。通过从形函数导数组装应变分量，我们构建 $\\mathbf{B}$：\n$$\n\\mathbf{B} =\n\\begin{pmatrix}\n\\frac{\\partial N_1}{\\partial x} & 0 & \\frac{\\partial N_2}{\\partial x} & 0 & \\frac{\\partial N_3}{\\partial x} & 0 \\\\\n0 & \\frac{\\partial N_1}{\\partial y} & 0 & \\frac{\\partial N_2}{\\partial y} & 0 & \\frac{\\partial N_3}{\\partial y} \\\\\n\\frac{\\partial N_1}{\\partial y} & \\frac{\\partial N_1}{\\partial x} & \\frac{\\partial N_2}{\\partial y} & \\frac{\\partial N_2}{\\partial x} & \\frac{\\partial N_3}{\\partial y} & \\frac{\\partial N_3}{\\partial x}\n\\end{pmatrix}\n$$\n代入计算出的导数：\n$$\n\\mathbf{B} =\n\\begin{pmatrix}\n-\\frac{1}{2} & 0 & \\frac{1}{2} & 0 & 0 & 0 \\\\\n0 & -\\frac{1}{3} & 0 & 0 & 0 & \\frac{1}{3} \\\\\n-\\frac{1}{3} & -\\frac{1}{2} & 0 & \\frac{1}{2} & \\frac{1}{3} & 0\n\\end{pmatrix}\n$$\n这就是给定 CST 单元的应变-位移矩阵。\n\n关于问题的第二部分：平面应变与平面应力情况的比较。$\\mathbf{B}$ 矩阵的推导完全基于运动学关系，该关系将应变（一种描述变形几何的度量）与位移联系起来。这些关系与材料的本构律（应力-应变关系）无关。平面应变 ($\\varepsilon_{zz}=0$) 和平面应力 ($\\sigma_{zz}=0$) 之间的区别体现在将应力与应变相关联的本构矩阵 $\\mathbf{D}$ 中，而不是在应变-位移矩阵 $\\mathbf{B}$ 中。因此，两种情况的推导是完全相同的，得到的 $\\mathbf{B}$ 矩阵也是一样的。\n\n最后，我们必须计算标量 $S = \\det(\\mathbf{B}\\mathbf{B}^T)$。首先，我们计算乘积 $\\mathbf{C} = \\mathbf{B}\\mathbf{B}^T$，得到一个 $3 \\times 3$ 矩阵。\n$$\n\\mathbf{C} = \\mathbf{B}\\mathbf{B}^T =\n\\begin{pmatrix}\n\\frac{1}{2} & 0 & \\frac{1}{6} \\\\\n0 & \\frac{2}{9} & \\frac{1}{6} \\\\\n\\frac{1}{6} & \\frac{1}{6} & \\frac{13}{18}\n\\end{pmatrix}\n$$\n现在，我们计算其行列式，$S = \\det(\\mathbf{C})$。\n$$\nS = \\frac{1}{2}\\left(\\frac{2}{9} \\cdot \\frac{13}{18} - \\frac{1}{6} \\cdot \\frac{1}{6}\\right) - 0 + \\frac{1}{6}\\left(0 \\cdot \\frac{1}{6} - \\frac{2}{9} \\cdot \\frac{1}{6}\\right)\n$$\n$$\nS = \\frac{1}{2}\\left(\\frac{26}{162} - \\frac{1}{36}\\right) + \\frac{1}{6}\\left(-\\frac{2}{54}\\right)\n$$\n化简分数：$\\frac{26}{162} = \\frac{13}{81}$ 和 $\\frac{2}{54} = \\frac{1}{27}$。\n$$\nS = \\frac{1}{2}\\left(\\frac{13}{81} - \\frac{1}{36}\\right) - \\frac{1}{162}\n$$\n$81$ 和 $36$ 的最小公倍数是 $324$。\n$$\nS = \\frac{1}{2}\\left(\\frac{13 \\cdot 4}{324} - \\frac{1 \\cdot 9}{324}\\right) - \\frac{1}{162} = \\frac{1}{2}\\left(\\frac{52 - 9}{324}\\right) - \\frac{1}{162} = \\frac{1}{2}\\left(\\frac{43}{324}\\right) - \\frac{1}{162}\n$$\n$$\nS = \\frac{43}{648} - \\frac{1}{162} = \\frac{43}{648} - \\frac{4}{648} = \\frac{39}{648}\n$$\n这个分数可以通过分子分母同除以它们的最大公约数 $3$ 来化简。\n$$\nS = \\frac{39 \\div 3}{648 \\div 3} = \\frac{13}{216}\n$$\n$S$ 的值为所要求的精确有理数。", "answer": "$$\n\\boxed{\\frac{13}{216}}\n$$", "id": "2601319"}, {"introduction": "检验理解程度的最终标准是能否将理论转化为可执行的算法。这个综合性实践将指导您为四边形和三角形单元实现并验证 $B$ 矩阵 [@problem_id:2601354]。通过编写代码并执行关键的验证测试——例如确保单元能够正确地再现常应变状态和刚体运动——您将对有限元法的计算核心获得深刻且实用的见解。", "problem": "您的任务是在有限元法 (FEM) 中，为二维等参单元实现并验证应变-位移矩阵（通常称为 B 矩阵）。推导过程必须严格从以下基础出发：(i) 二维小应变运动学，(ii) 通过单元形函数插值位移，以及 (iii) 使用等参映射的链式法则。不得使用任何其他捷径或预先推导的 B 矩阵。\n\n基本原理：\n- 对于位移场 $\\mathbf{u}(x,y) = [u(x,y), v(x,y)]^{T}$，小（无穷小）应变张量定义为 $\\varepsilon = \\tfrac{1}{2}\\left(\\nabla \\mathbf{u} + \\nabla \\mathbf{u}^{T}\\right)$。在工程应变向量形式中，使用 $\\boldsymbol{\\varepsilon} = [\\varepsilon_{xx}, \\varepsilon_{yy}, \\gamma_{xy}]^{T}$，其中 $\\varepsilon_{xx} = \\partial u / \\partial x$、$\\varepsilon_{yy} = \\partial v / \\partial y$ 和 $\\gamma_{xy} = \\partial u / \\partial y + \\partial v / \\partial x$。\n- 在一个单元内，通过形函数 $N_{i}$ 和节点位移值 $\\mathbf{d}_{i} = [u_{i}, v_{i}]^{T}$ 来近似 $\\mathbf{u}(x,y)$，即 $\\mathbf{u}(x,y) = \\sum_{i=1}^{n} N_{i}(x,y)\\,\\mathbf{d}_{i}$。将单元节点位移向量堆叠为 $\\mathbf{d}_{e} = [u_{1}, v_{1}, u_{2}, v_{2}, \\dots]^{T}$，根据定义，存在一个矩阵 $\\mathbf{B}(x,y)$ 使得 $\\boldsymbol{\\varepsilon}(x,y) = \\mathbf{B}(x,y)\\,\\mathbf{d}_{e}$。\n- 对于具有自然坐标 $(\\xi,\\eta)$ 和物理坐标 $(x,y)$ 的等参单元，使用链式法则，通过雅可比矩阵 $\\mathbf{J} = \\begin{bmatrix} \\partial x / \\partial \\xi & \\partial y / \\partial \\xi \\\\ \\partial x / \\partial \\eta & \\partial y / \\partial \\eta \\end{bmatrix}$ 将关于 $(x,y)$ 的导数与关于 $(\\xi,\\eta)$ 的导数关联起来。\n\n单元族及其形函数：\n- 四节点双线性四边形 (Q4)，定义在参考正方形 $(\\xi,\\eta)\\in[-1,1]\\times[-1,1]$ 上，节点按逆时针顺序排列为 $1:(-1,-1)$、$2:(+1,-1)$、$3:(+1,+1)$、$4:(-1,+1)$，其形函数为\n  $$\n  N_{1}(\\xi,\\eta)=\\tfrac{1}{4}(1-\\xi)(1-\\eta),\\quad\n  N_{2}(\\xi,\\eta)=\\tfrac{1}{4}(1+\\xi)(1-\\eta),\\quad\n  N_{3}(\\xi,\\eta)=\\tfrac{1}{4}(1+\\xi)(1+\\eta),\\quad\n  N_{4}(\\xi,\\eta)=\\tfrac{1}{4}(1-\\xi)(1+\\eta).\n  $$\n  到物理坐标的映射使用相同的 $N_{i}$ 和节点坐标 $(x_{i},y_{i})$。\n- 三节点线性三角形 (TRI3)，具有物理节点坐标 $(x_{1},y_{1})$、$(x_{2},y_{2})$、$(x_{3},y_{3})$ 和线性形函数 $N_{1}(x,y)$、$N_{2}(x,y)$、$N_{3}(x,y)$，它们构成单位分解，并能在三角形上再现线性场。\n\n任务：\n1. 推导并实现算法，以在任意点 $(\\xi,\\eta)$ 处组装 Q4 单元的 $\\mathbf{B}$ 矩阵：\n   - 计算 $\\partial N_{i}/\\partial \\xi$ 和 $\\partial N_{i}/\\partial \\eta$。\n   - 根据节点坐标 $(x_{i},y_{i})$ 形成雅可比矩阵 $\\mathbf{J}$ 并对其求逆，以获得 $\\partial N_{i}/\\partial x$ 和 $\\partial N_{i}/\\partial y$。\n   - 按照工程应变向量的顺序组装 $\\mathbf{B}$ 矩阵，使 $\\boldsymbol{\\varepsilon} = \\mathbf{B}\\,\\mathbf{d}_{e}$ 成立。\n2. 推导并实现算法，使用上述定义以及 $N_{i}(x,y)$ 在 $(x,y)$ 中是线性的事实，直接从节点坐标 $(x_{i},y_{i})$ 组装 TRI3 单元的 $\\mathbf{B}$ 矩阵（该矩阵在单元上是常数）。\n3. 通过线性场再现进行验证：对于线性位移场\n   $$\n   u(x,y) = a_{0} + a_{1}\\,x + a_{2}\\,y,\\quad\n   v(x,y) = b_{0} + b_{1}\\,x + b_{2}\\,y,\n   $$\n   精确应变为 $\\varepsilon_{xx} = a_{1}$、$\\varepsilon_{yy} = b_{2}$、$\\gamma_{xy} = a_{2} + b_{1}$。对于下面的每个测试用例，通过在单元节点处计算 $(u,v)$ 的值来构建 $\\mathbf{d}_{e}$，并验证 $\\mathbf{B}\\,\\mathbf{d}_{e}$ 在指定计算点处与精确应变匹配。使用 $10^{-10}$ 作为差值的欧几里得范数的容差。\n4. 通过刚体模态进行验证：对于刚性平移和绕原点的无穷小转动，\n   $$\n   u(x,y) = c_{x} - \\omega\\,y,\\quad v(x,y) = c_{y} + \\omega\\,x,\n   $$\n   精确的工程应变向量恒为零。验证 $\\mathbf{B}\\,\\mathbf{d}_{e}$ 近似为零（容差 $10^{-10}$）。\n5. Q4 单元的单位分解梯度验证：验证在指定计算点处 $\\sum_{i} \\partial N_{i}/\\partial x = 0$ 和 $\\sum_{i} \\partial N_{i}/\\partial y = 0$ 成立（容差 $10^{-12}$）。\n\n测试套件：\n- 测试 $1$（Q4，内部点，线性场再现）：\n  - 节点坐标 $(x_{i},y_{i})$，$i=1,2,3,4$：\n    $$\n    (x_{1},y_{1})=(0,0),\\quad (x_{2},y_{2})=(2,0.2),\\quad (x_{3},y_{3})=(2.2,1.8),\\quad (x_{4},y_{4})=(-0.1,1.7).\n    $$\n  - 计算点 $(\\xi,\\eta)=(0.3,-0.7)$。\n  - 位移场系数：\n    $$\n    a_{0}=1.2,\\ a_{1}=0.5,\\ a_{2}=-0.3;\\quad b_{0}=-0.8,\\ b_{1}=0.4,\\ b_{2}=0.6.\n    $$\n  - 精确应变：\n    $$\n    \\varepsilon_{xx}=0.5,\\ \\varepsilon_{yy}=0.6,\\ \\gamma_{xy}=0.1.\n    $$\n  - 输出一个布尔值，表示差值的范数是否低于 $10^{-10}$。\n- 测试 $2$（Q4，角点，线性场再现）：\n  - 节点坐标与测试 $1$ 相同。\n  - 计算点 $(\\xi,\\eta)=(-1,-1)$。\n  - 位移场系数：\n    $$\n    a_{0}=-0.2,\\ a_{1}=0.9,\\ a_{2}=0.1;\\quad b_{0}=0.3,\\ b_{1}=-0.7,\\ b_{2}=0.2.\n    $$\n  - 精确应变：\n    $$\n    \\varepsilon_{xx}=0.9,\\ \\varepsilon_{yy}=0.2,\\ \\gamma_{xy}=-0.6.\n    $$\n  - 如上输出一个布尔值。\n- 测试 $3$（TRI3，线性场再现，$\\mathbf{B}$ 为常数）：\n  - 节点坐标 $(x_{1},y_{1})=(0,0)$、$(x_{2},y_{2})=(2,0.5)$、$(x_{3},y_{3})=(0.3,1.7)$。\n  - 位移场系数：\n    $$\n    a_{0}=0.0,\\ a_{1}=0.2,\\ a_{2}=-0.4;\\quad b_{0}=1.1,\\ b_{1}=-0.3,\\ b_{2}=0.8.\n    $$\n  - 精确应变：\n    $$\n    \\varepsilon_{xx}=0.2,\\ \\varepsilon_{yy}=0.8,\\ \\gamma_{xy}=-0.7.\n    $$\n  - 使用三角形内的任意计算点输出一个布尔值（由于 $\\mathbf{B}$ 是常数，点的选择无关紧要）。\n- 测试 $4$（Q4，刚体模态，零应变）：\n  - 使用与测试 $1$ 相同的 Q4 节点坐标。\n  - 刚体参数：\n    $$\n    c_{x}=0.5,\\ c_{y}=-1.2,\\ \\omega=0.05.\n    $$\n  - 计算点 $(\\xi,\\eta)=(0.0,0.0)$。\n  - 输出一个布尔值，表示 $\\|\\mathbf{B}\\,\\mathbf{d}_{e}\\|_{2} \\le 10^{-10}$ 是否成立。\n- 测试 $5$（Q4，单位分解梯度）：\n  - 使用与测试 $1$ 相同的 Q4 节点坐标。\n  - 计算点 $(\\xi,\\eta)=(0.1, -0.2)$。\n  - 输出一个布尔值，表示 $\\left|\\sum_{i=1}^{4}\\partial N_{i}/\\partial x\\right| \\le 10^{-12}$ 和 $\\left|\\sum_{i=1}^{4}\\partial N_{i}/\\partial y\\right| \\le 10^{-12}$ 是否同时成立。\n\n最终输出格式：\n- 您的程序应生成单行输出，其中包含用方括号括起来的逗号分隔的结果列表（例如，$[result_{1},result_{2},result_{3},result_{4},result_{5}]$），其中每个 $result_{k}$ 是一个布尔值，按顺序对应于测试 $k$。\n- 无需单位，因为此任务纯粹是数学问题。", "solution": "所给出的问题是有限元法计算实现中的一个标准的、适定的练习。它在科学上是合理的，内部是一致的，并包含了解决问题所需的所有信息。我们将按照规定进行推导和验证。\n\n在线性弹性静力学中，单个有限元内应变张量与节点位移向量之间的基本关系由下式给出：\n$$\n\\boldsymbol{\\varepsilon}(x,y) = \\mathbf{B}(x,y)\\,\\mathbf{d}_{e}\n$$\n这里，$\\boldsymbol{\\varepsilon}$ 是工程应变向量，$\\mathbf{d}_{e}$ 是单元的节点位移向量，$\\mathbf{B}$ 是应变-位移矩阵。我们的任务是为二维四边形和三角形单元推导并实现矩阵 $\\mathbf{B}$。\n\n首先，我们建立通用公式。工程应变向量根据位移场 $\\mathbf{u}(x,y) = [u(x,y), v(x,y)]^{T}$ 定义如下：\n$$\n\\boldsymbol{\\varepsilon} = \\begin{Bmatrix} \\varepsilon_{xx} \\\\ \\varepsilon_{yy} \\\\ \\gamma_{xy} \\end{Bmatrix} = \\begin{Bmatrix} \\partial u / \\partial x \\\\ \\partial v / \\partial y \\\\ \\partial u / \\partial y + \\partial v / \\partial x \\end{Bmatrix}\n$$\n这可以用一个微分算子矩阵 $\\mathbf{L}$ 来表示：\n$$\n\\boldsymbol{\\varepsilon} = \\begin{bmatrix} \\partial/\\partial x & 0 \\\\ 0 & \\partial/\\partial y \\\\ \\partial/\\partial y & \\partial/\\partial x \\end{bmatrix} \\begin{Bmatrix} u \\\\ v \\end{Bmatrix} = \\mathbf{L}\\,\\mathbf{u}\n$$\n在具有 $n$ 个节点的有限元内，位移场由节点位移 $\\mathbf{d}_i = [u_i, v_i]^T$ 通过形函数 $N_i$ 插值得到：\n$$\nu = \\sum_{i=1}^{n} N_i u_i \\quad \\text{和} \\quad v = \\sum_{i=1}^{n} N_i v_i\n$$\n这种插值可以写成矩阵形式 $\\mathbf{u} = \\mathbf{N}\\mathbf{d}_e$，其中 $\\mathbf{d}_e = [u_1, v_1, \\dots, u_n, v_n]^T$，$\\mathbf{N}$ 是形函数矩阵：\n$$\n\\mathbf{N} = \\begin{bmatrix} N_1 & 0 & N_2 & 0 & \\dots & N_n & 0 \\\\ 0 & N_1 & 0 & N_2 & \\dots & 0 & N_n \\end{bmatrix}\n$$\n将插值位移场代入应变定义中，得到：\n$$\n\\boldsymbol{\\varepsilon} = \\mathbf{L}(\\mathbf{N}\\mathbf{d}_e) = (\\mathbf{L}\\mathbf{N})\\mathbf{d}_e\n$$\n通过将其与定义式 $\\boldsymbol{\\varepsilon} = \\mathbf{B}\\mathbf{d}_e$ 进行比较，我们确定应变-位移矩阵为 $\\mathbf{B} = \\mathbf{L}\\mathbf{N}$。执行矩阵乘法得到：\n$$\n\\mathbf{B} = \\begin{bmatrix} \\frac{\\partial N_1}{\\partial x} & 0 & \\frac{\\partial N_2}{\\partial x} & 0 & \\dots & \\frac{\\partial N_n}{\\partial x} & 0 \\\\ 0 & \\frac{\\partial N_1}{\\partial y} & 0 & \\frac{\\partial N_2}{\\partial y} & \\dots & 0 & \\frac{\\partial N_n}{\\partial y} \\\\ \\frac{\\partial N_1}{\\partial y} & \\frac{\\partial N_1}{\\partial x} & \\frac{\\partial N_2}{\\partial y} & \\frac{\\partial N_2}{\\partial x} & \\dots & \\frac{\\partial N_n}{\\partial y} & \\frac{\\partial N_n}{\\partial x} \\end{bmatrix}\n$$\n这种通用形式可以看作是尺寸为 $3 \\times 2$ 的节点子矩阵 $\\mathbf{B}_i$ 的拼接：\n$$\n\\mathbf{B} = \\begin{bmatrix} \\mathbf{B}_1 & \\mathbf{B}_2 & \\dots & \\mathbf{B}_n \\end{bmatrix}, \\quad \\text{其中} \\quad \\mathbf{B}_i = \\begin{bmatrix} \\partial N_i/\\partial x & 0 \\\\ 0 & \\partial N_i/\\partial y \\\\ \\partial N_i/\\partial y & \\partial N_i/\\partial x \\end{bmatrix}\n$$\n\n对于等参单元，形函数 $N_i$ 是在参考（自然）坐标系 $(\\xi,\\eta)$ 中定义的，而应变定义需要相对于物理坐标 $(x,y)$ 的导数。微分的链式法则联系了这些导数：\n$$\n\\begin{Bmatrix} \\partial f / \\partial \\xi \\\\ \\partial f / \\partial \\eta \\end{Bmatrix} = \\begin{bmatrix} \\partial x / \\partial \\xi & \\partial y / \\partial \\xi \\\\ \\partial x / \\partial \\eta & \\partial y / \\partial \\eta \\end{bmatrix} \\begin{Bmatrix} \\partial f / \\partial x \\\\ \\partial f / \\partial y \\end{Bmatrix} = \\mathbf{J} \\begin{Bmatrix} \\partial f / \\partial x \\\\ \\partial f / \\partial y \\end{Bmatrix}\n$$\n矩阵 $\\mathbf{J}$ 是坐标变换的雅可比矩阵。在等参格式中，物理坐标使用与位移相同的形函数进行插值：$x(\\xi,\\eta) = \\sum_{i=1}^{n} N_i(\\xi,\\eta)x_i$ 和 $y(\\xi,\\eta) = \\sum_{i=1}^{n} N_i(\\xi,\\eta)y_i$。因此，雅可比矩阵的分量为：\n$$\nJ_{11} = \\frac{\\partial x}{\\partial \\xi} = \\sum_{i=1}^{n} \\frac{\\partial N_i}{\\partial \\xi} x_i, \\quad J_{12} = \\frac{\\partial y}{\\partial \\xi} = \\sum_{i=1}^{n} \\frac{\\partial N_i}{\\partial \\xi} y_i\n$$\n$$\nJ_{21} = \\frac{\\partial x}{\\partial \\eta} = \\sum_{i=1}^{n} \\frac{\\partial N_i}{\\partial \\eta} x_i, \\quad J_{22} = \\frac{\\partial y}{\\partial \\eta} = \\sum_{i=1}^{n} \\frac{\\partial N_i}{\\partial \\eta} y_i\n$$\n为了找到所需的形函数物理导数，我们必须对链式法则关系求逆：\n$$\n\\begin{Bmatrix} \\partial N_i / \\partial x \\\\ \\partial N_i / \\partial y \\end{Bmatrix} = \\mathbf{J}^{-1} \\begin{Bmatrix} \\partial N_i / \\partial \\xi \\\\ \\partial N_i / \\partial \\eta \\end{Bmatrix}\n$$\n\n**任务 1：四节点双线性四边形 (Q4) 单元**\n对于 Q4 单元，$n=4$。形函数关于自然坐标 $(\\xi, \\eta)$ 的导数为：\n$$\n\\frac{\\partial N_1}{\\partial\\xi} = -\\frac{1}{4}(1-\\eta), \\quad \\frac{\\partial N_2}{\\partial\\xi} = \\frac{1}{4}(1-\\eta), \\quad \\frac{\\partial N_3}{\\partial\\xi} = \\frac{1}{4}(1+\\eta), \\quad \\frac{\\partial N_4}{\\partial\\xi} = -\\frac{1}{4}(1+\\eta)\n$$\n$$\n\\frac{\\partial N_1}{\\partial\\eta} = -\\frac{1}{4}(1-\\xi), \\quad \\frac{\\partial N_2}{\\partial\\eta} = -\\frac{1}{4}(1+\\xi), \\quad \\frac{\\partial N_3}{\\partial\\eta} = \\frac{1}{4}(1+\\xi), \\quad \\frac{\\partial N_4}{\\partial\\eta} = \\frac{1}{4}(1-\\xi)\n$$\n在给定点 $(\\xi, \\eta)$ 处计算 $\\mathbf{B}$ 的算法如下：\n1.  计算形函数关于自然坐标的导数的 $4 \\times 2$ 矩阵，其中第 $i$ 行为 $[\\partial N_i/\\partial\\xi, \\partial N_i/\\partial\\eta]$。\n2.  使用节点坐标和步骤1中的导数，计算 $2 \\times 2$ 的雅可比矩阵 $\\mathbf{J}$。\n3.  计算雅可比矩阵的逆 $\\mathbf{J}^{-1}$。\n4.  对于每个节点 $i=1, \\dots, 4$，将 $\\mathbf{J}^{-1}$ 乘以节点 $i$ 的自然坐标导数向量，计算出关于物理坐标的导数 $[\\partial N_i/\\partial x, \\partial N_i/\\partial y]$。\n5.  从步骤4中获得的物理导数组装成 $3 \\times 8$ 的矩阵 $\\mathbf{B}$。\n\n**任务 2：三节点线性三角形 (TRI3) 单元**\n对于 TRI3 单元，形函数 $N_i(x,y)$ 在物理坐标中是线性的。因此，它们的一阶导数 $\\partial N_i/\\partial x$ 和 $\\partial N_i/\\partial y$ 在整个单元中是常数。因此矩阵 $\\mathbf{B}$ 也是常数。这些导数可以直接从节点坐标 $(x_i, y_i)$ 计算。设三角形的面积为 $A$。值 $2A$ 由以下行列式给出：\n$$\n2A = \\det \\begin{bmatrix} x_1 & y_1 & 1 \\\\ x_2 & y_2 & 1 \\\\ x_3 & y_3 & 1 \\end{bmatrix} = x_1(y_2 - y_3) + x_2(y_3 - y_1) + x_3(y_1 - y_2)\n$$\n常数导数由以下公式给出：\n$$\n\\frac{\\partial N_1}{\\partial x} = \\frac{y_2 - y_3}{2A}, \\quad \\frac{\\partial N_2}{\\partial x} = \\frac{y_3 - y_1}{2A}, \\quad \\frac{\\partial N_3}{\\partial x} = \\frac{y_1 - y_2}{2A}\n$$\n$$\n\\frac{\\partial N_1}{\\partial y} = \\frac{x_3 - x_2}{2A}, \\quad \\frac{\\partial N_2}{\\partial y} = \\frac{x_1 - x_3}{2A}, \\quad \\frac{\\partial N_3}{\\partial y} = \\frac{x_2 - x_1}{2A}\n$$\n然后使用这些值来组装常数 $3 \\times 6$ 矩阵 $\\mathbf{B}$。\n\n**任务 3、4、5：验证**\n验证任务测试了任何有效的有限元公式都必须满足的基本属性。\n- **线性场再现：** 等参单元必须能够精确表示恒定应变状态。如果施加的位移场是 $(x,y)$ 的线性函数，则产生的应变为常数。有限元近似 $\\boldsymbol{\\varepsilon} = \\mathbf{B}\\mathbf{d}_e$ 必须得出这个精确的常数应变向量。这是形函数构成单位分解并且能再现线性场这一事实的直接结果。\n- **刚体模态：** 对应于刚体平移和无穷小转动的位移场必须产生零应变。这对于单元在刚体运动下不产生伪内应力至关重要。\n- **单位分解梯度：** 形函数求和为一的性质，即 $\\sum_{i=1}^{n} N_i = 1$，意味着它们的梯度之和必须为零。在自然坐标系中，$\\sum_{i} \\partial N_i/\\partial \\xi = 0$ 和 $\\sum_{i} \\partial N_i/\\partial \\eta = 0$。应用链式法则变换，我们发现这个性质对于物理坐标也同样成立：\n  $$\n  \\begin{Bmatrix} \\sum_{i} \\partial N_i / \\partial x \\\\ \\sum_{i} \\partial N_i / \\partial y \\end{Bmatrix} = \\mathbf{J}^{-1} \\begin{Bmatrix} \\sum_{i} \\partial N_i / \\partial \\xi \\\\ \\sum_{i} \\partial N_i / \\partial \\eta \\end{Bmatrix} = \\mathbf{J}^{-1} \\begin{Bmatrix} 0 \\\\ 0 \\end{Bmatrix} = \\begin{Bmatrix} 0 \\\\ 0 \\end{Bmatrix}\n  $$\n这完成了理论前序部分。实现将严格遵循这些推导。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef q4_b_matrix(xi, eta, nodes):\n    \"\"\"\n    Computes the strain-displacement matrix B for a Q4 element.\n\n    Args:\n        xi (float): Natural coordinate xi.\n        eta (float): Natural coordinate eta.\n        nodes (np.ndarray): 4x2 array of nodal coordinates (x, y).\n\n    Returns:\n        tuple[np.ndarray, np.ndarray]: A tuple containing:\n            - The 3x8 strain-displacement matrix B.\n            - The 2x4 matrix of shape function derivatives w.r.t. (x, y).\n    \"\"\"\n    if nodes.shape != (4, 2):\n        raise ValueError(\"nodes must be a 4x2 array.\")\n\n    # Derivatives of shape functions w.r.t. natural coordinates (xi, eta)\n    # grad_nat is a 2x4 matrix: [[dN1/dxi, dN2/dxi, ...], [dN1/deta, dN2/deta, ...]]\n    grad_nat = 0.25 * np.array([\n        [-(1 - eta), (1 - eta), (1 + eta), -(1 + eta)],\n        [-(1 - xi), -(1 + xi), (1 + xi), (1 - xi)]\n    ])\n\n    # Jacobian matrix: J = grad_nat @ nodes\n    # J[0,0] = sum(dNi/dxi * xi), J[0,1] = sum(dNi/dxi * yi)\n    # J[1,0] = sum(dNi/deta * xi), J[1,1] = sum(dNi/deta * yi)\n    J = grad_nat @ nodes\n    det_J = np.linalg.det(J)\n    if np.isclose(det_J, 0):\n        raise np.linalg.LinAlgError(\"Jacobian matrix is singular.\")\n    J_inv = np.linalg.inv(J)\n\n    # Derivatives of shape functions w.r.t. physical coordinates (x, y)\n    # grad_phys = J_inv @ grad_nat\n    # grad_phys is a 2x4 matrix: [[dN1/dx, dN2/dx, ...], [dN1/dy, dN2/dy, ...]]\n    grad_phys = J_inv @ grad_nat\n\n    # Assemble the B matrix (3x8)\n    B = np.zeros((3, 8))\n    for i in range(4):\n        # B_i = [[dNi/dx, 0], [0, dNi/dy], [dNi/dy, dNi/dx]]\n        B[0, 2 * i]     = grad_phys[0, i]  # Strain_xx contribution from u_i\n        B[1, 2 * i + 1] = grad_phys[1, i]  # Strain_yy contribution from v_i\n        B[2, 2 * i]     = grad_phys[1, i]  # Strain_xy contribution from u_i\n        B[2, 2 * i + 1] = grad_phys[0, i]  # Strain_xy contribution from v_i\n\n    return B, grad_phys\n\ndef tri3_b_matrix(nodes):\n    \"\"\"\n    Computes the constant strain-displacement matrix B for a TRI3 element.\n\n    Args:\n        nodes (np.ndarray): 3x2 array of nodal coordinates (x, y).\n\n    Returns:\n        np.ndarray: The 3x6 constant strain-displacement matrix B.\n    \"\"\"\n    if nodes.shape != (3, 2):\n        raise ValueError(\"nodes must be a 3x2 array.\")\n\n    x1, y1 = nodes[0]\n    x2, y2 = nodes[1]\n    x3, y3 = nodes[2]\n    \n    # 2 * Area of the triangle\n    two_A = x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)\n    if np.isclose(two_A, 0):\n        raise ValueError(\"Triangle area is zero (collinear nodes).\")\n\n    # Derivatives of shape functions w.r.t. physical coordinates (x, y)\n    # These are constant for a linear triangle.\n    dN1_dx = (y2 - y3) / two_A\n    dN2_dx = (y3 - y1) / two_A\n    dN3_dx = (y1 - y2) / two_A\n    \n    dN1_dy = (x3 - x2) / two_A\n    dN2_dy = (x1 - x3) / two_A\n    dN3_dy = (x2 - x1) / two_A\n\n    # Assemble the B matrix (3x6)\n    B = np.array([\n        [dN1_dx, 0,      dN2_dx, 0,      dN3_dx, 0     ],\n        [0,      dN1_dy, 0,      dN2_dy, 0,      dN3_dy],\n        [dN1_dy, dN1_dx, dN2_dy, dN2_dx, dN3_dy, dN3_dx]\n    ])\n    \n    return B\n\ndef solve():\n    \"\"\"\n    Main function to run all verification tests.\n    \"\"\"\n    results = []\n\n    # Common data for Q4 tests\n    q4_nodes = np.array([\n        [0.0, 0.0],\n        [2.0, 0.2],\n        [2.2, 1.8],\n        [-0.1, 1.7]\n    ])\n\n    # --- Test 1 (Q4, interior point, linear reproduction) ---\n    xi, eta = 0.3, -0.7\n    a0, a1, a2 = 1.2, 0.5, -0.3\n    b0, b1, b2 = -0.8, 0.4, 0.6\n    exact_strain_1 = np.array([a1, b2, a2 + b1])\n    \n    B1, _ = q4_b_matrix(xi, eta, q4_nodes)\n    d_e1 = np.zeros(8)\n    for i in range(4):\n        x, y = q4_nodes[i]\n        d_e1[2 * i] = a0 + a1 * x + a2 * y\n        d_e1[2 * i + 1] = b0 + b1 * x + b2 * y\n    \n    num_strain_1 = B1 @ d_e1\n    results.append(np.linalg.norm(num_strain_1 - exact_strain_1)  1e-10)\n\n    # --- Test 2 (Q4, corner point, linear reproduction) ---\n    xi, eta = -1.0, -1.0\n    a0, a1, a2 = -0.2, 0.9, 0.1\n    b0, b1, b2 = 0.3, -0.7, 0.2\n    exact_strain_2 = np.array([a1, b2, a2 + b1])\n\n    B2, _ = q4_b_matrix(xi, eta, q4_nodes)\n    d_e2 = np.zeros(8)\n    for i in range(4):\n        x, y = q4_nodes[i]\n        d_e2[2 * i] = a0 + a1 * x + a2 * y\n        d_e2[2 * i + 1] = b0 + b1 * x + b2 * y\n\n    num_strain_2 = B2 @ d_e2\n    results.append(np.linalg.norm(num_strain_2 - exact_strain_2)  1e-10)\n\n    # --- Test 3 (TRI3, linear reproduction) ---\n    tri3_nodes = np.array([\n        [0.0, 0.0],\n        [2.0, 0.5],\n        [0.3, 1.7]\n    ])\n    a0, a1, a2 = 0.0, 0.2, -0.4\n    b0, b1, b2 = 1.1, -0.3, 0.8\n    exact_strain_3 = np.array([a1, b2, a2 + b1])\n    \n    B3 = tri3_b_matrix(tri3_nodes)\n    d_e3 = np.zeros(6)\n    for i in range(3):\n        x, y = tri3_nodes[i]\n        d_e3[2 * i] = a0 + a1 * x + a2 * y\n        d_e3[2 * i + 1] = b0 + b1 * x + b2 * y\n    \n    num_strain_3 = B3 @ d_e3\n    results.append(np.linalg.norm(num_strain_3 - exact_strain_3)  1e-10)\n\n    # --- Test 4 (Q4, rigid body modes) ---\n    cx, cy, omega = 0.5, -1.2, 0.05\n    xi, eta = 0.0, 0.0\n    \n    B4, _ = q4_b_matrix(xi, eta, q4_nodes)\n    d_e4 = np.zeros(8)\n    for i in range(4):\n        x, y = q4_nodes[i]\n        d_e4[2 * i] = cx - omega * y\n        d_e4[2 * i + 1] = cy + omega * x\n        \n    num_strain_4 = B4 @ d_e4\n    results.append(np.linalg.norm(num_strain_4)  1e-10)\n    \n    # --- Test 5 (Q4, partition of unity gradients) ---\n    xi, eta = 0.1, -0.2\n    _, grad_phys_5 = q4_b_matrix(xi, eta, q4_nodes)\n    sum_dN_dx = np.sum(grad_phys_5[0, :])\n    sum_dN_dy = np.sum(grad_phys_5[1, :])\n    \n    test5_passed = abs(sum_dN_dx)  1e-12 and abs(sum_dN_dy)  1e-12\n    results.append(test5_passed)\n\n    # Final print statement\n    result_str = \",\".join(map(lambda b: str(b).lower(), results))\n    print(f\"[{result_str}]\")\n\nsolve()\n```", "id": "2601354"}]}