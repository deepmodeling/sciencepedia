{"hands_on_practices": [{"introduction": "德拜屏蔽参数 $\\kappa$ 是 DLVO 理论的核心，它量化了溶液中离子屏蔽静电相互作用的效率。本练习将引导您从第一性原理出发，推导混合电解质体系中的 $\\kappa$ 值。通过这个过程，您将深刻理解离子价态和浓度如何共同决定胶体分散体系中静电相互作用的范围。[@problem_id:2766661]", "problem": "在温度 $T = 298.15\\,\\mathrm{K}$ 下，于由氯化钠 $\\mathrm{NaCl}$ 和氯化钙 $\\mathrm{CaCl}_{2}$ 组成的混合电解质中，制备了一种水中的带电胶体二氧化硅分散体。假设完全解离，并且热力学条件使得扩散层的线性响应成立。总分析盐摩尔浓度（$\\mathrm{NaCl}$ 和 $\\mathrm{CaCl}_{2}$ 的摩尔浓度之和）固定为 $M_{0} = 5.0\\,\\mathrm{mM}$。$\\mathrm{NaCl}$ 的分摩尔浓度为 $x = 2.0\\,\\mathrm{mM}$，因此 $\\mathrm{CaCl}_{2}$ 的分摩尔浓度为 $M_{0} - x = 3.0\\,\\mathrm{mM}$。溶剂的相对介电常数为 $\\varepsilon_{r} = 78.5$。使用以下基本常数：元电荷 $e = 1.602176634 \\times 10^{-19}\\,\\mathrm{C}$，Boltzmann 常数 $k_{B} = 1.380649 \\times 10^{-23}\\,\\mathrm{J\\,K^{-1}}$，Avogadro 数 $N_{A} = 6.02214076 \\times 10^{23}\\,\\mathrm{mol^{-1}}$，以及真空介电常数 $\\varepsilon_{0} = 8.8541878128 \\times 10^{-12}\\,\\mathrm{F\\,m^{-1}}$。使用换算关系 $1\\,\\mathrm{L} = 10^{-3}\\,\\mathrm{m^{3}}$。\n\n从静电学和热平衡状态下的理想离子数分布出发，推导 Debye 筛选参数 $\\kappa$ 关于 $x$、$M_{0}$、$T$、$\\varepsilon_{r}$、$\\varepsilon_{0}$、$e$、$k_{B}$ 和 $N_{A}$ 的解析表达式。然后，对给定的 $M_{0}$ 和 $x$ 进行 $\\kappa$ 的数值计算，并以 $\\mathrm{nm^{-1}}$ 为单位报告结果。将您的数值答案四舍五入到三位有效数字。\n\n尽管最终答案只需提供 $\\kappa$ 的数值，但您的推导过程也必须通过离子种类 $\\mathrm{Na}^{+}$、$\\mathrm{Ca}^{2+}$ 和 $\\mathrm{Cl}^{-}$ 在决定 $\\kappa$ 的表达式中的加权作用，来定量地确定它们在固定 $M_{0}$ 下对静电筛选的相对贡献。", "solution": "目标是从静电学第一性原理出发，结合热平衡状态下的理想离子分布，以求得 $\\kappa$。电解质中的静电势 $\\psi(\\mathbf{r})$ 满足 Poisson 方程，\n$$\n\\nabla^{2}\\psi(\\mathbf{r}) \\;=\\; -\\frac{\\rho(\\mathbf{r})}{\\varepsilon_{r}\\varepsilon_{0}} \\,,\n$$\n其中 $\\rho(\\mathbf{r})$ 是局域自由电荷密度，$\\varepsilon_{r}\\varepsilon_{0}$ 是介质的介电常数。对于一个多组分电解质，其中离子种类由 $i$ 索引，价态为 $z_{i}$，其在热平衡下的数密度 $n_{i}(\\mathbf{r})$ 遵循 Boltzmann 分布，\n$$\nn_{i}(\\mathbf{r}) \\;=\\; n_{i}^{0}\\,\\exp\\!\\left(-\\frac{z_{i} e\\, \\psi(\\mathbf{r})}{k_{B}T}\\right),\n$$\n其中 $n_{i}^{0}$ 是体相数密度。电荷密度为\n$$\n\\rho(\\mathbf{r}) \\;=\\; \\sum_{i} z_{i} e\\, n_{i}(\\mathbf{r}) \\,.\n$$\n对于足够小的电势 $\\psi$ 以至于 $\\left|z_{i} e \\psi\\right|\\ll k_{B}T$ 成立，我们对 Boltzmann 因子进行线性化：\n$$\nn_{i}(\\mathbf{r}) \\;\\approx\\; n_{i}^{0}\\left(1 - \\frac{z_{i} e\\, \\psi(\\mathbf{r})}{k_{B}T}\\right).\n$$\n这得到\n$$\n\\rho(\\mathbf{r}) \\;\\approx\\; \\sum_{i} z_{i} e\\, n_{i}^{0} \\;-\\; \\left(\\frac{e^{2}}{k_{B}T}\\right)\\!\\left(\\sum_{i} z_{i}^{2} n_{i}^{0}\\right)\\psi(\\mathbf{r}).\n$$\n体相电中性意味着 $\\sum_{i} z_{i} n_{i}^{0} = 0$，所以第一项消失，得到：\n$$\n\\rho(\\mathbf{r}) \\;\\approx\\; - \\left(\\frac{e^{2}}{k_{B}T}\\right)\\!\\left(\\sum_{i} z_{i}^{2} n_{i}^{0}\\right)\\psi(\\mathbf{r}).\n$$\n代入 Poisson 方程，\n$$\n\\nabla^{2}\\psi(\\mathbf{r}) \\;=\\; \\frac{e^{2}}{\\varepsilon_{r}\\varepsilon_{0} k_{B}T}\\left(\\sum_{i} z_{i}^{2} n_{i}^{0}\\right)\\psi(\\mathbf{r}).\n$$\n根据 Debye 筛选参数的定义，线性化方程为 $\\nabla^{2}\\psi = \\kappa^{2}\\psi$，所以\n$$\n\\kappa^{2} \\;=\\; \\frac{e^{2}}{\\varepsilon_{r}\\varepsilon_{0} k_{B}T}\\sum_{i} z_{i}^{2} n_{i}^{0}.\n$$\n\n现在我们用分析摩尔浓度来表示体相数密度 $n_{i}^{0}$。如果 $c_{i}$ 是以 $\\mathrm{mol\\,L^{-1}}$ 为单位的体相摩尔浓度，那么\n$$\nn_{i}^{0} \\;=\\; 1000\\, N_{A}\\, c_{i} \\quad \\text{单位为 } \\mathrm{m^{-3}} \\quad \\text{因为 } 1\\,\\mathrm{L}=10^{-3}\\,\\mathrm{m^{3}}。\n$$\n因此，\n$$\n\\kappa^{2} \\;=\\; \\frac{e^{2}}{\\varepsilon_{r}\\varepsilon_{0} k_{B}T}\\, 1000\\, N_{A}\\,\\sum_{i} z_{i}^{2} c_{i}.\n$$\n\n对于 $\\mathrm{NaCl}$ 盐摩尔浓度为 $x$、$\\mathrm{CaCl}_{2}$ 盐摩尔浓度为 $M_{0}-x$ 的混合电解质，并假设完全解离：\n- $\\mathrm{NaCl}\\to \\mathrm{Na}^{+} + \\mathrm{Cl}^{-}$ 给出 $c_{\\mathrm{Na}^{+}} = x$ 和一个贡献 $z^{2}c = 1^{2}x = x$。\n- $\\mathrm{CaCl}_{2}\\to \\mathrm{Ca}^{2+} + 2\\,\\mathrm{Cl}^{-}$ 给出 $c_{\\mathrm{Ca}^{2+}} = M_{0}-x$，其贡献为 $z^{2}c = 2^{2}(M_{0}-x) = 4(M_{0}-x)$，以及额外 $2(M_{0}-x)$ 的氯离子。\n- 总氯离子浓度为 $c_{\\mathrm{Cl}^{-}} = x + 2(M_{0}-x) = 2M_{0}-x$，其贡献为 $z^{2}c = 1^{2}(2M_{0}-x) = 2M_{0}-x$。\n\n因此，\n$$\n\\sum_{i} z_{i}^{2} c_{i} \\;=\\; x \\;+\\; 4(M_{0}-x) \\;+\\; (2M_{0}-x) \\;=\\; 6M_{0} - 4x.\n$$\n由此推出\n$$\n\\kappa^{2} \\;=\\; \\frac{e^{2}}{\\varepsilon_{r}\\varepsilon_{0} k_{B}T}\\, 1000\\, N_{A}\\,\\bigl(6M_{0} - 4x\\bigr).\n$$\n等效地，用离子强度 $I$（定义为 $I = \\tfrac{1}{2}\\sum_{i} z_{i}^{2} c_{i}$）来表示，我们有 $I = 3M_{0} - 2x$ 且\n$$\n\\kappa^{2} \\;=\\; \\frac{2 e^{2} N_{A} \\, 1000\\, I}{\\varepsilon_{r}\\varepsilon_{0} k_{B}T}.\n$$\n这就是所要求的用 $x$ 和 $M_{0}$ 表示的解析表达式。\n\n接下来，我们对 $M_{0} = 5.0\\,\\mathrm{mM} = 0.0050\\,\\mathrm{mol\\,L^{-1}}$ 和 $x = 2.0\\,\\mathrm{mM} = 0.0020\\,\\mathrm{mol\\,L^{-1}}$ 进行数值计算。离子强度为\n$$\nI \\;=\\; 3M_{0} - 2x \\;=\\; 3(0.0050) - 2(0.0020) \\;=\\; 0.0150 - 0.0040 \\;=\\; 0.0110\\,\\mathrm{mol\\,L^{-1}}.\n$$\n因此，\n$$\n\\kappa^{2} \\;=\\; \\frac{2\\, e^{2}\\, N_{A}\\, 1000\\, I}{\\varepsilon_{r}\\varepsilon_{0} k_{B}T}\n\\;=\\; \\frac{2\\,(1.602176634\\times 10^{-19})^{2}\\,(6.02214076\\times 10^{23})\\,(1000)\\,(0.0110)}{(78.5)\\,(8.8541878128\\times 10^{-12})\\,(1.380649\\times 10^{-23})\\,(298.15)}\\,\\mathrm{m^{-2}}.\n$$\n数值计算得出\n$$\n\\kappa^{2} \\;\\approx\\; 1.18865\\times 10^{17}\\,\\mathrm{m^{-2}}, \\quad \\text{所以} \\quad \\kappa \\;\\approx\\; 3.4486\\times 10^{8}\\,\\mathrm{m^{-1}}.\n$$\n为以 $\\mathrm{nm^{-1}}$ 为单位报告，使用 $1\\,\\mathrm{nm^{-1}} = 10^{9}\\,\\mathrm{m^{-1}}$，因此\n$$\n\\kappa \\;\\approx\\; 0.34486\\,\\mathrm{nm^{-1}}.\n$$\n四舍五入到三位有效数字，$\\kappa = 0.345\\,\\mathrm{nm^{-1}}$。\n\n最后，我们通过各项在 $\\sum_{i} z_{i}^{2} c_{i}$（或等效地在 $I$ 中）的权重，来量化在固定 $M_{0}$ 时，各离子种类对筛选的相对贡献。对于 $M_{0} = 5.0\\,\\mathrm{mM}$ 和 $x = 2.0\\,\\mathrm{mM}$：\n- $\\mathrm{Na}^{+}$: $z^{2} c = 1^{2}\\times 2.0\\,\\mathrm{mM} = 2.0\\,\\mathrm{mM}$。\n- $\\mathrm{Ca}^{2+}$: $z^{2} c = 4\\times 3.0\\,\\mathrm{mM} = 12.0\\,\\mathrm{mM}$。\n- $\\mathrm{Cl}^{-}$: $z^{2} c = 1^{2}\\times\\bigl(2.0 + 2\\times 3.0\\bigr)\\,\\mathrm{mM} = 8.0\\,\\mathrm{mM}$。\n\n$\\sum_{i} z_{i}^{2} c_{i}$ 的总和为 $22.0\\,\\mathrm{mM}$，因此对 $\\kappa^{2}$ 的贡献分数如下：\n$$\n\\text{$\\mathrm{Na}^{+}$: } \\frac{2.0}{22.0} = 0.0909,\\qquad\n\\text{$\\mathrm{Ca}^{2+}$: } \\frac{12.0}{22.0} = 0.5455,\\qquad\n\\text{$\\mathrm{Cl}^{-}$: } \\frac{8.0}{22.0} = 0.3636.\n$$\n因此，在固定的总盐摩尔浓度 $M_{0}$ 下，由于 $z_{i}^{2}$ 的加权作用，二价阳离子 $\\mathrm{Ca}^{2+}$ 在筛选中占主导地位，同时氯离子也有重要贡献，因为在相同的 $M_{0}$ 下，$\\mathrm{CaCl}_{2}$ 相较于一价盐会增加阴离子浓度。", "answer": "$$\\boxed{0.345}$$", "id": "2766661"}, {"introduction": "在理解了静电环境之后，下一步是将相互作用的能量分布与动力学稳定性联系起来。本练习探讨了福克斯稳定性因子 $W$，它将实际的聚集速率与扩散控制下的最快速率进行比较。通过将相互作用势能简化为一个方形势垒，您将推导并计算 $W$ 值，从而清晰地建立起能垒高度、宽度与胶体长期稳定性之间的定量联系。[@problem_id:2766683]", "problem": "您必须编写一个完整且可运行的程序，对于属于 Derjaguin–Landau–Verwey–Overbeek (DLVO) 类的胶体对相互作用势模型，计算 Fuchs 稳定性比以及相对于扩散控制的 Smoluchowski 极限的相应周围动力学聚集速率。预期的模型是两个半径为 $a$ 的相同球形颗粒在温度为 $T$ 的粘性流体中扩散时的吸收接触、稳态、中心相互作用，其中对相互作用势 $U(r)$ 被近似为一个在有限分离区间内局部化的分段常数能垒，在其他地方为零。您的推导必须从具有中心势和接触处吸收边界的对扩散的稳态 Smoluchowski 描述出发，并进而得到针对给定方形势垒的 Fuchs 稳定性比 $W$ 的精确表达式。不要假设或使用任何预先引用的 $W$ 的目标公式；相反，请从第一性原理出发，推导出决定聚集通量的积分表示，并从该表示中识别出 $W$。\n\n物理设置与建模假设：\n- 两个半径为 $a$ 的相同球体在球对称势 $U(r)$ 下以组合相对扩散系数 $D_{\\mathrm{rel}}$ 进行扩散。\n- 吸收边界位于颗粒-颗粒中心距 $r=2a$ 处，对应于零间隙分离。\n- 远离接触处，对分布函数弛豫到其体相值。\n- 除了对 $D_{\\mathrm{rel}}$ 的贡献外，流体动力学延迟效应被忽略，且 $D_{\\mathrm{rel}}$ 被视为不随 $r$ 变化的常数。\n- DLVO 势在间隙坐标 $h=r-2a$ 中被近似为方形势垒：存在一个在有限间隙区间内具有恒定高度的势垒，并在其他地方为零。\n\n必须实现的定义和任务：\n- 定义无量纲势垒高度 $\\beta U_{0}$ 为 $\\beta U_{0} \\equiv U_{0}/(k_{\\mathrm{B}}T)$，其中 $k_{\\mathrm{B}}$ 是 Boltzmann 常数，$T$ 是绝对温度。在此问题中，从 $U_{0}$ 中唯一需要的量是比值 $\\beta U_{0}$。\n- 设势垒占据间隙区间 $h\\in[h_{1},h_{2}]$，其中 $0 \\le h_{1} < h_{2}$，$h$ 和 $a$ 以米为单位指定。因此，$U(r)=U_{0}$ 对应于 $r\\in[2a+h_{1},2a+h_{2}]$，而在其他情况下 $U(r)=0$。\n- 从中心势下对分布的稳态 Smoluchowski 描述出发，推导出 Fuchs 稳定性比 $W$ 的表达式，该表达式为一个涉及 $U(r)$ 的径向坐标积分。然后，将其具体化为给定的分段常数势垒，并生成一个用 $a$、$h_{1}$、$h_{2}$ 和 $\\beta U_{0}$ 表示的 $W$ 的闭式表达式。\n- 使用您的 $W$ 来预测相对聚集速率 $k/k_{\\mathrm{Sm}}$，其中 $k_{\\mathrm{Sm}}$ 是两个相同球体的扩散限制 Smoluchowski 速率常数。将 $k/k_{\\mathrm{Sm}}$ 报告为无量纲浮点数。\n\n测试套件：\n- 您的程序必须为以下每个参数集计算序对 $\\big(W,\\;k/k_{\\mathrm{Sm}}\\big)$，所有长度均以米为单位，所有势垒高度 $\\beta U_{0}$ 均以无量纲量给出。\n- 所有情况均使用颗粒半径 $a=100\\times 10^{-9}\\,\\mathrm{m}$。\n- 参数集：\n  - 情况 A (中等势垒，接触附近中等宽度)：$\\beta U_{0}=5$，$h_{1}=2\\times 10^{-9}\\,\\mathrm{m}$，$h_{2}=5\\times 10^{-9}\\,\\mathrm{m}$。\n  - 情况 B (无势垒)：$\\beta U_{0}=0$，$h_{1}=1\\times 10^{-9}\\,\\mathrm{m}$，$h_{2}=10\\times 10^{-9}\\,\\mathrm{m}$。\n  - 情况 C (接触附近极窄、高势垒)：$\\beta U_{0}=20$，$h_{1}=2\\times 10^{-9}\\,\\mathrm{m}$，$h_{2}=2.1\\times 10^{-9}\\,\\mathrm{m}$。\n  - 情况 D (远离接触的势垒)：$\\beta U_{0}=10$，$h_{1}=20\\times 10^{-9}\\,\\mathrm{m}$，$h_{2}=30\\times 10^{-9}\\,\\mathrm{m}$。\n  - 情况 E (接触附近高而宽的势垒)：$\\beta U_{0}=15$，$h_{1}=1\\times 10^{-9}\\,\\mathrm{m}$，$h_{2}=10\\times 10^{-9}\\,\\mathrm{m}$。\n\n输出要求：\n- 对于每种情况，将 $W$ 和 $k/k_{\\mathrm{Sm}}$ 计算为实值浮点数。\n- 您的程序应生成单行输出，其中包含一个序对列表，每个情况一个序对，顺序为 $\\left[\\left[W_{\\mathrm{A}},R_{\\mathrm{A}}\\right],\\left[W_{\\mathrm{B}},R_{\\mathrm{B}}\\right],\\left[W_{\\mathrm{C}},R_{\\mathrm{C}}\\right],\\left[W_{\\mathrm{D}},R_{\\mathrm{D}}\\right],\\left[W_{\\mathrm{E}},R_{\\mathrm{E}}\\right]\\right]$，其中 $R\\equiv k/k_{\\mathrm{Sm}}$。\n- 将所有输出表示为四舍五入到 $6$ 位有效数字的无量纲浮点数。\n- 输出中不应出现物理单位，因为所请求的量是无量纲的。", "solution": "问题陈述在科学上是合理的、自洽的且定义明确。它提出了胶体聚集动力学中的一个标准问题，可以从第一性原理求解。我们将进行推导和求解。\n\n起点是描述对分布函数 $n(\\mathbf{r}, t)$ 演化的 Smoluchowski 方程，该函数用于通过中心势 $U(r)$ 相互作用的粒子。假设稳态（$\\partial n/\\partial t = 0$）、恒定的相对扩散系数 $D_{\\mathrm{rel}}$ 和球对称性，粒子通量矢量 $\\mathbf{J}$ 的方程简化为 $\\nabla \\cdot \\mathbf{J} = 0$。在球坐标系中，这意味着通过半径为 $r$ 的球面的总通量（我们称之为 $k$）是恒定的：\n$$ k = 4\\pi r^2 J_r(r) = \\text{constant} $$\n径向通量 $J_r(r)$ 由 Nernst-Planck 方程给出：\n$$ J_r(r) = -D_{\\mathrm{rel}} \\left( \\frac{dn(r)}{dr} + \\frac{n(r)}{k_{\\mathrm{B}}T} \\frac{dU(r)}{dr} \\right) $$\n其中 $k_{\\mathrm{B}}$ 是 Boltzmann 常数，$T$ 是绝对温度。令 $\\beta = 1/(k_{\\mathrm{B}}T)$。常数速率 $k$ 的表达式变为：\n$$ k = -4\\pi r^2 D_{\\mathrm{rel}} \\left( \\frac{dn}{dr} + \\beta n \\frac{dU}{dr} \\right) $$\n这个常微分方程可以通过识别括号中的项与 $n(r) e^{\\beta U(r)}$ 的导数相关来求解。\n$$ k = -4\\pi r^2 D_{\\mathrm{rel}} e^{-\\beta U(r)} \\frac{d}{dr} \\left( n(r) e^{\\beta U(r)} \\right) $$\n我们分离变量并准备积分：\n$$ -\\frac{k}{4\\pi D_{\\mathrm{rel}}} \\frac{e^{\\beta U(r)}}{r^2} dr = d\\left( n(r) e^{\\beta U(r)} \\right) $$\n我们将此表达式从 $r=2a$ 处的接触表面积分到远离粒子的 $r \\to \\infty$ 处。边界条件是：\n1. 接触时为吸收边界，意味着不可逆聚集：$n(2a) = 0$。\n2. 在大分离距离下，对分布函数弛豫到体相浓度 $n_0$，且势能消失：$n(r \\to \\infty) \\to n_0$ 且 $U(r \\to \\infty) \\to 0$。\n\n将这些边界条件应用于积分后的方程：\n$$ -\\frac{k}{4\\pi D_{\\mathrm{rel}}} \\int_{2a}^{\\infty} \\frac{e^{\\beta U(r)}}{r^2} dr = \\left[ n(r) e^{\\beta U(r)} \\right]_{2a}^{\\infty} $$\n$$ -\\frac{k}{4\\pi D_{\\mathrm{rel}}} \\int_{2a}^{\\infty} \\frac{e^{\\beta U(r)}}{r^2} dr = n_0e^0 - n(2a)e^{\\beta U(2a)} = n_0 - 0 = n_0 $$\n总聚集速率通常表示为 $k_{\\mathrm{agg}} n_0$。我们定义的通量 $k$ 代表了这个速率。因此，我们求解聚集速率常数 $k_{\\mathrm{agg}} = k/n_0$:\n$$ k_{\\mathrm{agg}} = \\frac{4\\pi D_{\\mathrm{rel}}}{\\int_{2a}^{\\infty} \\frac{e^{\\beta U(r)}}{r^2} dr} $$\n扩散限制的 Smoluchowski 速率常数 $k_{\\mathrm{Sm}}$ 是不存在相互作用势，即对所有 $r$ 都有 $U(r) = 0$ 时的速率。\n$$ k_{\\mathrm{Sm}} = \\frac{4\\pi D_{\\mathrm{rel}}}{\\int_{2a}^{\\infty} \\frac{e^0}{r^2} dr} = \\frac{4\\pi D_{\\mathrm{rel}}}{\\int_{2a}^{\\infty} \\frac{1}{r^2} dr} $$\n该积分计算为 $\\int_{2a}^{\\infty} r^{-2} dr = [-r^{-1}]_{2a}^{\\infty} = 1/(2a)$。\n$$ k_{\\mathrm{Sm}} = \\frac{4\\pi D_{\\mathrm{rel}}}{1/(2a)} = 8\\pi D_{\\mathrm{rel}} a $$\nFuchs 稳定性比 $W$ 定义为最大可能聚集速率（扩散限制的）与受势垒调节的实际速率之比：\n$$ W = \\frac{k_{\\mathrm{Sm}}}{k_{\\mathrm{agg}}} $$\n将我们关于 $k_{\\mathrm{Sm}}$ 和 $k_{\\mathrm{agg}}$ 的表达式代入，得到 $W$ 的积分表示：\n$$ W = \\frac{8\\pi D_{\\mathrm{rel}} a}{\\frac{4\\pi D_{\\mathrm{rel}}}{\\int_{2a}^{\\infty} \\frac{e^{\\beta U(r)}}{r^2} dr}} = 2a \\int_{2a}^{\\infty} \\frac{e^{\\beta U(r)}}{r^2} dr $$\n相对聚集速率则简单地为 $k/k_{\\mathrm{Sm}} = 1/W$。\n\n现在，我们将此结果应用于给定的分段常数（方形势垒）势：\n$$ U(r) = \\begin{cases} U_0 & \\text{for } r \\in [2a+h_1, 2a+h_2] \\\\ 0 & \\text{otherwise for } r \\ge 2a \\end{cases} $$\n$W$ 的积分被分成三个区域，对应于 $U(r)$ 的分段定义：\n$$ W = 2a \\left( \\int_{2a}^{2a+h_1} \\frac{e^0}{r^2} dr + \\int_{2a+h_1}^{2a+h_2} \\frac{e^{\\beta U_0}}{r^2} dr + \\int_{2a+h_2}^{\\infty} \\frac{e^0}{r^2} dr \\right) $$\n计算这些定积分：\n$$ \\int_{2a}^{2a+h_1} \\frac{1}{r^2} dr = \\left[-\\frac{1}{r}\\right]_{2a}^{2a+h_1} = \\frac{1}{2a} - \\frac{1}{2a+h_1} $$\n$$ e^{\\beta U_0} \\int_{2a+h_1}^{2a+h_2} \\frac{1}{r^2} dr = e^{\\beta U_0} \\left[-\\frac{1}{r}\\right]_{2a+h_1}^{2a+h_2} = e^{\\beta U_0} \\left( \\frac{1}{2a+h_1} - \\frac{1}{2a+h_2} \\right) $$\n$$ \\int_{2a+h_2}^{\\infty} \\frac{1}{r^2} dr = \\left[-\\frac{1}{r}\\right]_{2a+h_2}^{\\infty} = \\frac{1}{2a+h_2} $$\n将这些结果代回 $W$ 的表达式中：\n$$ W = 2a \\left[ \\left(\\frac{1}{2a} - \\frac{1}{2a+h_1}\\right) + e^{\\beta U_0} \\left(\\frac{1}{2a+h_1} - \\frac{1}{2a+h_2}\\right) + \\frac{1}{2a+h_2} \\right] $$\n重新整理各项，我们合并具有相同分母的系数：\n$$ W = 2a \\left[ \\frac{1}{2a} + \\frac{e^{\\beta U_0}-1}{2a+h_1} - \\frac{e^{\\beta U_0}-1}{2a+h_2} \\right] $$\n分配前因子 $2a$ 并提出公因子 $(e^{\\beta U_0}-1)$，得到最终的闭式表达式：\n$$ W = 1 + 2a (e^{\\beta U_0}-1) \\left( \\frac{1}{2a+h_1} - \\frac{1}{2a+h_2} \\right) $$\n这个公式将被实现用来计算每个测试用例的 $W$。然后，相对聚集速率 $k/k_{\\mathrm{Sm}}$ 被计算为 $1/W$。", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes the Fuchs stability ratio (W) and relative aggregation rate (R)\n    for a square-barrier potential model in colloidal aggregation.\n    \"\"\"\n\n    # Particle radius for all test cases\n    a = 100e-9  # meters\n\n    # Test cases: (dimensionless barrier height, barrier start, barrier end)\n    # Barrier locations h1 and h2 are given in meters.\n    test_cases = [\n        # Case A: Moderate barrier, moderate width near contact\n        (5.0, 2e-9, 5e-9),\n        # Case B: No barrier\n        (0.0, 1e-9, 10e-9),\n        # Case C: Very narrow, tall barrier near contact\n        (20.0, 2e-9, 2.1e-9),\n        # Case D: Barrier far from contact\n        (10.0, 20e-9, 30e-9),\n        # Case E: Tall and wide barrier near contact\n        (15.0, 1e-9, 10e-9)\n    ]\n    \n    # Number of significant figures for output\n    sf = 6\n\n    def calculate_W_and_R(particle_radius, h1, h2, beta_U0):\n        \"\"\"\n        Calculates W and R based on the derived formula.\n        \n        W = 1 + 2a * (exp(beta*U0) - 1) * (1/(2a+h1) - 1/(2a+h2))\n        R = 1/W\n        \"\"\"\n        # The case of no barrier (beta_U0 = 0) is a special case.\n        # exp(0)-1 = 0, so the second term vanishes and W = 1.\n        if beta_U0 == 0.0:\n            W = 1.0\n        else:\n            # The problem definition ensures 0 <= h1 < h2, so no division by zero\n            # or negative barrier width.\n            term1 = 2 * particle_radius\n            term2 = np.exp(beta_U0) - 1\n            term3 = (1 / (2 * particle_radius + h1)) - (1 / (2 * particle_radius + h2))\n            W = 1 + term1 * term2 * term3\n        \n        R = 1 / W\n        return W, R\n\n    def round_to_sf(value, num_sf):\n        \"\"\"\n        Rounds a float to a specified number of significant figures.\n        \"\"\"\n        if value == 0:\n            return 0.0\n        # Use format specifier 'g' which handles significant figures correctly,\n        # then convert back to float.\n        return float(f'{value:.{num_sf}g}')\n\n    results = []\n    for beta_U0, h1, h2 in test_cases:\n        W, R = calculate_W_and_R(a, h1, h2, beta_U0)\n        \n        # Round the computed values to the required number of significant figures.\n        W_rounded = round_to_sf(W, sf)\n        R_rounded = round_to_sf(R, sf)\n        \n        results.append([W_rounded, R_rounded])\n\n    # Format the final output string to be exactly as specified in the problem,\n    # specifically ensuring no spaces inside the inner lists.\n    # Ex: [[W_A,R_A],[W_B,R_B],...]\n    output_string = str(results).replace(\" \", \"\")\n    print(output_string)\n\nsolve()\n```", "id": "2766683"}, {"introduction": "从成对相互作用转向整个系统的宏观行为，本实践将挑战您模拟团簇尺寸分布随时间的演变过程。您将实现斯摩路霍夫斯基（Smoluchowski）凝聚方程，这是一个群体平衡模型，对于理解许多领域中的聚集现象至关重要。这项高级练习将为您提供模拟复杂动态系统和解读关键宏观量（如平均团簇尺寸和单体消耗）的第一手经验。[@problem_id:2766714]", "problem": "你的任务是为扩散限制条件下的不可逆团簇-团簇聚集建立并数值积分一个群体平衡方程。该系统由初始胶体颗粒组成，这些颗粒聚集成团簇，其中尺寸为$i$的团簇包含$i$个初始颗粒。其基本物理图像是团簇在粘性流体中进行布朗运动：团簇扩散并在碰撞时以单位粘附概率发生反应。你的程序必须根据给定的初始条件和物理参数，计算团簇尺寸分布的瞬态演化，并在指定的最终时间报告标量诊断值。\n\n从团簇数量守恒和双体碰撞动力学出发，构建控制尺寸为$i$的团簇的数浓度$n_i(t)$随时间演化的常微分方程组。双体聚集核函数$K_{ij}$是两个流体动力学半径分别为$R_i$和$R_j$、扩散系数分别为$D_i$和$D_j$的团簇在扩散限制下的碰撞频率。使用绝对温度为$T$、动力粘度为$\\mu$的牛顿流体中布朗扩散率的Stokes–Einstein关系式，并假设具有聚集数$i$的团簇的流体动力学半径遵循给定的分形维数$d_f$的分形标度关系。假设为具有单位粘附概率的不可逆聚集，并忽略除聚集外的所有其他过程。将系统视为空间均匀的。\n\n将团簇尺寸离散为$i \\in \\{1,2,\\dots,N_{\\max}\\}$，并将控制常微分方程组从$t=0$到指定的最终时间$t=t_{\\mathrm{end}}$进行时间积分。你可以假设$N_{\\max}$足够大，以至于在所选的$t_{\\mathrm{end}}$时刻，尺寸大于$N_{\\max}$的团簇对所报告的诊断值的影响可以忽略不计。\n\n对于下述每个测试用例，你的程序必须在$t=t_{\\mathrm{end}}$时刻计算并报告：\n- 总数浓度 $M_0(t_{\\mathrm{end}})=\\sum_{i=1}^{N_{\\max}} n_i(t_{\\mathrm{end}})$，单位为$\\mathrm{m}^{-3}$，\n- 平均聚集数 $\\langle i \\rangle (t_{\\mathrm{end}})=\\left(\\sum_{i=1}^{N_{\\max}} i\\,n_i(t_{\\mathrm{end}})\\right) \\Big/ \\left(\\sum_{i=1}^{N_{\\max}} n_i(t_{\\mathrm{end}})\\right)$，为无量纲浮点数，\n- 单体分数 $f_1(t_{\\mathrm{end}})=n_1(t_{\\mathrm{end}}) \\big/ \\left(\\sum_{i=1}^{N_{\\max}} n_i(t_{\\mathrm{end}})\\right)$，为小数，\n- 初始颗粒守恒相对误差 $\\varepsilon=\\left|\\left(\\sum_{i=1}^{N_{\\max}} i\\,n_i(t_{\\mathrm{end}})\\right)-\\left(\\sum_{i=1}^{N_{\\max}} i\\,n_i(0)\\right)\\right| \\Big/ \\left(\\sum_{i=1}^{N_{\\max}} i\\,n_i(0)\\right)$，为小数。\n\n所有物理常数和参数都必须使用国际单位制（SI）。玻尔兹曼常数是$k_{\\mathrm{B}} = 1.380649 \\times 10^{-23}\\,\\mathrm{J/K}$。初始颗粒流体动力学半径为$a_1$（单位：$\\mathrm{m}$）。流体动力学半径通过一个给定的分形维数$d_f$与聚集数$i$成标度关系。团簇的扩散系数取决于其流体动力学半径和流体性质。假设为扩散限制的团簇聚集。\n\n数值输出要求：\n- 对于每个测试用例，将上述四个诊断值以指定单位的四个实数列表形式报告。每个实数必须四舍五入到六位有效数字。\n- 将所有测试用例的结果按测试给出的顺序汇总到一个Python风格的列表的列表中，并仅打印包含此列表的一行，不含任何额外文本。\n\n测试套件：\n- 测试用例$1$（通用单分散情况）：\n  - $T = 298.15\\,\\mathrm{K}$, $\\mu = 1.0 \\times 10^{-3}\\,\\mathrm{Pa\\cdot s}$, $a_1 = 5.0 \\times 10^{-8}\\,\\mathrm{m}$, $d_f = 1.8$, $N_{\\max} = 64$。\n  - $t=0$时的初始条件：$n_1(0) = 1.0 \\times 10^{14}\\,\\mathrm{m}^{-3}$，对于所有$i \\in \\{2,\\dots,N_{\\max}\\}$，$n_i(0) = 0\\,\\mathrm{m}^{-3}$。\n  - 最终时间：$t_{\\mathrm{end}} = 0.5\\,\\mathrm{s}$。\n- 测试用例$2$（稀释极限）：\n  - $T = 298.15\\,\\mathrm{K}$, $\\mu = 1.0 \\times 10^{-3}\\,\\mathrm{Pa\\cdot s}$, $a_1 = 5.0 \\times 10^{-8}\\,\\mathrm{m}$, $d_f = 1.8$, $N_{\\max} = 64$。\n  - $t=0$时的初始条件：$n_1(0) = 1.0 \\times 10^{10}\\,\\mathrm{m}^{-3}$，对于所有$i \\in \\{2,\\dots,N_{\\max}\\}$，$n_i(0) = 0\\,\\mathrm{m}^{-3}$。\n  - 最终时间：$t_{\\mathrm{end}} = 1.0\\,\\mathrm{s}$。\n- 测试用例$3$（多分散起始和不同的分形维数）：\n  - $T = 298.15\\,\\mathrm{K}$, $\\mu = 1.0 \\times 10^{-3}\\,\\mathrm{Pa\\cdot s}$, $a_1 = 5.0 \\times 10^{-8}\\,\\mathrm{m}$, $d_f = 2.1$, $N_{\\max} = 64$。\n  - $t=0$时的初始条件：$n_1(0) = 0.6 \\times 5.0 \\times 10^{13}\\,\\mathrm{m}^{-3}$, $n_2(0) = 0.4 \\times 5.0 \\times 10^{13}\\,\\mathrm{m}^{-3}$，对于所有$i \\in \\{3,\\dots,N_{\\max}\\}$，$n_i(0) = 0\\,\\mathrm{m}^{-3}$。\n  - 最终时间：$t_{\\mathrm{end}} = 0.5\\,\\mathrm{s}$。\n\n你的程序应生成单行输出，其中包含一个逗号分隔并用方括号括起来的列表形式的结果，格式为\n$[[M_0^{(1)},\\langle i\\rangle^{(1)},f_1^{(1)},\\varepsilon^{(1)}],[M_0^{(2)},\\langle i\\rangle^{(2)},f_1^{(2)},\\varepsilon^{(2)}],[M_0^{(3)},\\langle i\\rangle^{(3)},f_1^{(3)},\\varepsilon^{(3)}]]$，\n每个实数四舍五入到六位有效数字，其中上标$^{(k)}$表示测试用例索引。", "solution": "我们对粘性流体中由布朗运动驱动的不可逆团簇-团簇聚集进行建模。目标是推导在扩散限制和单位粘附概率条件下，包含$i$个初始颗粒的团簇的数浓度$n_i(t)$随时间演化的控制方程。\n\n物理出发点是因扩散而产生的双体碰撞动力学。对于连续介质流体中的两个吸收球体，到达接触面的稳态扩散通量给出了一个取决于扩散系数之和与有效捕获距离的碰撞频率。对于流体动力学半径为$R_i$和$R_j$、扩散系数分别为$D_i$和$D_j$的团簇，扩散限制的碰撞频率（聚集核函数）$K_{ij}$是通过求解两个相距很远并在接触时反应的扩散汇周围的浓度拉普拉斯方程得到的。对流体动力学性质的依赖关系遵循已有的扩散理论和Stokes–Einstein关系式。\n\n绝对温度为$T$、动力粘度为$\\mu$的牛顿流体中，流体动力学半径为$R$的球形颗粒的布朗扩散系数由Stokes–Einstein关系式给出\n$$\nD(R) = \\frac{k_{\\mathrm{B}}\\,T}{6\\pi \\,\\mu\\, R},\n$$\n其中$k_{\\mathrm{B}}$是玻尔兹曼常数。一个聚集数为$i$的团簇被建模为一个分形体，其流体动力学半径的标度关系为\n$$\nR_i = a_1\\, i^{1/d_f},\n$$\n其中$a_1$是初始颗粒的流体动力学半径，$d_f$是分形维数。这种经验标度关系在扩散限制的团簇聚集现象中被广泛观察到。\n\n对于在碰撞时发生反应的两个团簇$i$和$j$的扩散限制聚集，其碰撞频率（聚集核函数）由到达接触处吸收边界的扩散通量之和给出。得到的核函数为\n$$\nK_{ij} = 4\\pi\\,\\left(D_i + D_j\\right)\\,\\left(R_i + R_j\\right),\n$$\n它在$i$和$j$上是对称的。将$D_i$和$D_j$的Stokes–Einstein关系式以及$R_i$和$R_j$的分形标度关系代入，即可完全用$i$、$j$、$T$、$\\mu$、$a_1$和$d_f$来表示$K_{ij}$。\n\n用于聚集的群体平衡方程假设了空间均匀性以及聚集事件中数量守恒的双体碰撞。离散的Smoluchowski凝聚方程给出了$n_k(t)$的变化率，该变化率是较小团簇合并生成尺寸为$k$的团簇与尺寸为$k$的团簇因与任何尺寸的团簇聚集而消失之间的平衡：\n$$\n\\frac{d n_k}{dt} = \\frac{1}{2}\\sum_{i=1}^{k-1} K_{i,k-i}\\, n_i\\, n_{k-i} \\;-\\; n_k \\sum_{j=1}^{\\infty} K_{k j}\\, n_j, \\quad k=1,2,\\dots.\n$$\n第一项考虑了所有产生尺寸为$k$的无序对$\\{i,k-i\\}$；因子$1/2$避免了重复计数。第二项计算了尺寸为$k$的团簇因与所有尺寸$j$的团簇碰撞而消失的数量。我们在最大尺寸$N_{\\max}$处截断该系统，用到$N_{\\max}$为止的和来近似无穷级数。如果$N_{\\max}$足够大且模拟时间范围选择得当，尺寸大于$N_{\\max}$的团簇对我们所关心的诊断值的影响可以忽略不计。我们监测初始颗粒数（一阶矩）的守恒情况作为一项诊断指标：\n$$\nM_1(t) = \\sum_{i=1}^{N_{\\max}} i\\, n_i(t),\n$$\n在没有数值截断误差的情况下，该值应保持不变。总数浓度是零阶矩\n$$\nM_0(t) = \\sum_{i=1}^{N_{\\max}} n_i(t).\n$$\n平均聚集数是$\\langle i \\rangle = M_1/M_0$，单体分数是$f_1 = n_1/M_0$。\n\n算法设计：\n1.  根据指定的$a_1$和$d_f$，预计算团簇的流体动力学半径$R_i = a_1\\, i^{1/d_f}$，其中$i \\in \\{1,\\dots,N_{\\max}\\}$。\n2.  根据指定的$T$和$\\mu$，计算扩散系数$D_i = k_{\\mathrm{B}} T / (6\\pi \\mu R_i)$。\n3.  构建对称的聚集核函数矩阵$K_{ij} = 4\\pi (D_i + D_j)(R_i + R_j)$，其中$i,j \\in \\{1,\\dots,N_{\\max}\\}$。\n4.  使用截断的Smoluchowski平衡方程，为$\\mathbf{n}(t) = [n_1(t),\\dots,n_{N_{\\max}}(t)]^\\top$定义常微分方程组的右端项：\n    -   对于每个$k$，计算生成项为$\\frac{1}{2}\\sum_{i=1}^{k-1} K_{i,k-i}\\, n_i\\, n_{k-i}$。\n    -   计算消失项为$n_k \\sum_{j=1}^{N_{\\max}} K_{k j}\\, n_j$。\n5.  使用合适的隐式方法（如后向差分公式(BDF)）对刚性系统从$t=0$到$t=t_{\\mathrm{end}}$进行积分，并选择能够平衡精度和计算成本的容差。\n6.  在$t=t_{\\mathrm{end}}$时刻，计算$M_0$、$M_1$、$\\langle i \\rangle = M_1/M_0$、$f_1 = n_1/M_0$以及初始颗粒守恒相对误差$\\varepsilon = |M_1(t_{\\mathrm{end}})-M_1(0)|/M_1(0)$。\n7.  对每个测试用例重复此过程，并将结果打印为单个列表的列表。将每个报告值四舍五入到六位有效数字。\n\n科学考量：\n- 核函数表达式源于经典扩散理论，适用于稀释体系中的扩散限制条件。\n- Stokes–Einstein关系式假设了粘附边界条件和低雷诺数，这与粘性介质中的纳米级团簇相符。\n- 分形标度关系概括了通过聚集形成的团簇的有效流体动力学尺寸；对于扩散限制的团簇聚集，$d_f$的典型值在1.7–2.1的范围内。\n- 在$N_{\\max}$处截断可能导致少量初始颗粒质量流失到大于$N_{\\max}$的尺寸中。守恒误差诊断值$\\varepsilon$量化了这一点，参数的选择是为了确保$\\varepsilon$在模拟时间内保持很小。\n\n实现细节：\n- 预先计算核函数和半径，以避免在计算右端项时进行重复计算。\n- 生成项可以通过直接求和在$\\mathcal{O}(N_{\\max}^2)$时间内计算；对于$N_{\\max}=\\,$$64$，这在计算上是廉价的。\n- 我们为ODE求解器使用绝对和相对容差，以确保数浓度的微小变化被准确捕捉。\n- 输出使用有效数字舍入函数四舍五入到六位有效数字，并打印为单个Python列表字面量，以满足所要求的输出格式。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom math import log10, floor\nfrom scipy.integrate import solve_ivp\n\nkB = 1.380649e-23  # Boltzmann constant [J/K]\npi = np.pi\n\ndef cluster_radius(i, a1, df):\n    # i is integer aggregation number, return hydrodynamic radius [m]\n    return a1 * (i ** (1.0 / df))\n\ndef diffusion_coeff(R, T, mu):\n    # Stokes-Einstein diffusion coefficient [m^2/s]\n    return kB * T / (6.0 * pi * mu * R)\n\ndef build_kernel(Nmax, T, mu, a1, df):\n    # Precompute radii and diffusion coefficients for i=1..Nmax\n    i_vals = np.arange(1, Nmax + 1, dtype=float)\n    R = a1 * np.power(i_vals, 1.0 / df)  # shape (Nmax,)\n    D = kB * T / (6.0 * pi * mu * R)     # shape (Nmax,)\n    # Build symmetric kernel: K_ij = 4*pi*(D_i + D_j)*(R_i + R_j)\n    R_sum = R.reshape(-1, 1) + R.reshape(1, -1)\n    D_sum = D.reshape(-1, 1) + D.reshape(1, -1)\n    K = 4.0 * pi * D_sum * R_sum\n    return K\n\ndef smoluchowski_rhs(t, n, K):\n    # n: vector of size Nmax\n    # K: kernel matrix NxN\n    N = n.size\n    dn = np.zeros_like(n)\n    # Precompute S_k = sum_j K_kj n_j for destruction term\n    S = K @ n  # shape (N,)\n    # Formation term: for each k, sum over i=1..k-1 of K_{i,k-i} n_i n_{k-i} with 1/2 factor\n    # Note: indices in code are 0-based; aggregation numbers are 1-based\n    for k in range(N):\n        # destruction\n        dn[k] -= n[k] * S[k]\n        # formation: only if k >= 1 in 0-based (i.e., size >= 2)\n        kk = k + 1  # actual aggregation number\n        if kk >= 2:\n            # sum i=1..kk-1 => i_idx=0..k-1; partner j_idx = k - 1 - i_idx\n            # We can loop i_idx from 0 to k-1\n            total = 0.0\n            for i_idx in range(0, k):\n                j_idx = k - 1 - i_idx\n                total += K[i_idx, j_idx] * n[i_idx] * n[j_idx]\n            dn[k] += 0.5 * total\n    return dn\n\ndef moments(n):\n    # Zeroth and first moments\n    N = n.size\n    i_vals = np.arange(1, N + 1, dtype=float)\n    M0 = float(np.sum(n))\n    M1 = float(np.dot(i_vals, n))\n    return M0, M1\n\ndef sigfig(x, s=6):\n    if x == 0 or not np.isfinite(x):\n        return float(x)\n    return round(x, s - int(floor(log10(abs(x)))) - 1)\n\ndef run_case(T, mu, a1, df, Nmax, init_counts, t_end):\n    # Build kernel\n    K = build_kernel(Nmax, T, mu, a1, df)\n    # Initial condition vector\n    n0 = np.zeros(Nmax, dtype=float)\n    for i, val in init_counts.items():\n        if 1 <= i <= Nmax:\n            n0[i - 1] = val\n    M0_0, M1_0 = moments(n0)\n    # Integrate ODE\n    # Use BDF for stiffness, with tolerances adapted to magnitude of n\n    atol = 1e-6 * max(1.0, np.max(n0)) if np.max(n0) > 0 else 1e-12\n    rtol = 1e-6\n    sol = solve_ivp(\n        fun=lambda t, y: smoluchowski_rhs(t, y, K),\n        t_span=(0.0, t_end),\n        y0=n0,\n        method='BDF',\n        atol=atol,\n        rtol=rtol,\n        t_eval=[t_end],\n        vectorized=False,\n        jac=None,\n    )\n    n_end = sol.y[:, -1]\n    # Enforce non-negativity due to potential small numerical undershoots\n    n_end = np.maximum(n_end, 0.0)\n    M0, M1 = moments(n_end)\n    mean_i = M1 / M0 if M0 > 0 else float('nan')\n    f1 = n_end[0] / M0 if M0 > 0 else float('nan')\n    eps = abs(M1 - M1_0) / M1_0 if M1_0 > 0 else 0.0\n    # Round to six significant figures\n    return [sigfig(M0, 6), sigfig(mean_i, 6), sigfig(f1, 6), sigfig(eps, 6)]\n\ndef solve():\n    # Define the test cases from the problem statement.\n    test_cases = [\n        # Test case 1\n        {\n            \"T\": 298.15,\n            \"mu\": 1.0e-3,\n            \"a1\": 5.0e-8,\n            \"df\": 1.8,\n            \"Nmax\": 64,\n            \"init_counts\": {1: 1.0e14},\n            \"t_end\": 0.5,\n        },\n        # Test case 2\n        {\n            \"T\": 298.15,\n            \"mu\": 1.0e-3,\n            \"a1\": 5.0e-8,\n            \"df\": 1.8,\n            \"Nmax\": 64,\n            \"init_counts\": {1: 1.0e10},\n            \"t_end\": 1.0,\n        },\n        # Test case 3\n        {\n            \"T\": 298.15,\n            \"mu\": 1.0e-3,\n            \"a1\": 5.0e-8,\n            \"df\": 2.1,\n            \"Nmax\": 64,\n            \"init_counts\": {1: 0.6 * 5.0e13, 2: 0.4 * 5.0e13},\n            \"t_end\": 0.5,\n        },\n    ]\n\n    results = []\n    for case in test_cases:\n        res = run_case(\n            T=case[\"T\"],\n            mu=case[\"mu\"],\n            a1=case[\"a1\"],\n            df=case[\"df\"],\n            Nmax=case[\"Nmax\"],\n            init_counts=case[\"init_counts\"],\n            t_end=case[\"t_end\"],\n        )\n        results.append(res)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "2766714"}]}