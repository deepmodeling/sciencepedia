{"hands_on_practices": [{"introduction": "现实世界中的许多动态系统本质上是非线性的，而我们掌握的大部分强大控制理论工具都是为线性系统设计的。因此，一项至关重要的技能是将非线性系统在其工作点附近的行为用线性模型来近似。本练习 [@problem_id:2723730] 以经典的单摆为例，引导你实践这一基本的线性化技术，并揭示系统的线性近似如何根据所选的平衡点（例如稳定的垂挂点和不稳定的倒立点）而发生根本性的变化。", "problem": "考虑一个刚性平面摆，其点质量为 $m$，附在一个长度为 $\\ell$ 的无质量杆上。该摆在枢轴点受到粘性旋转阻尼，阻尼系数为 $b$，并由一个控制力矩 $u$ 在枢轴点驱动。取广义坐标为角位移 $\\theta$，从垂直向下方向测量，逆时针为正。根据关于枢轴点旋转的牛顿第二定律，可导出非线性运动方程\n$$\nm \\ell^{2} \\ddot{\\theta} + b \\dot{\\theta} + m g \\ell \\sin \\theta = u,\n$$\n其可等价地写为\n$$\n\\ddot{\\theta} + \\frac{b}{m \\ell^{2}} \\dot{\\theta} + \\frac{g}{\\ell} \\sin \\theta = \\frac{1}{m \\ell^{2}} u.\n$$\n假设角度以弧度为单位。设状态为 $x = \\begin{pmatrix} \\theta \\\\ \\dot{\\theta} \\end{pmatrix}$，输入为 $u$，测量输出为物理角度 $y = \\theta$。使用第一性原理（牛顿定律和状态变量的定义），推导标准形式的线性化状态空间模型\n$$\n\\dot{x} = A x + B u,\\quad y = C x + D u\n$$\n并围绕两个开环平衡点：向下平衡点和直立平衡点进行线性化。在各自的平衡点 $(x_{e}, u_{e})$ 附近对偏差变量进行线性化处理，并报告每个平衡点对应的常数矩阵 $(A,B,C,D)$。\n\n将您的最终答案以单行矩阵的形式给出，按顺序罗列：\n- 向下平衡点处 $A$ 的四个元素，按行主序排列，\n- 向下平衡点处 $B$ 的两个元素，从上到下排列，\n- 向下平衡点处 $C$ 的两个元素，从左到右排列，\n- 向下平衡点处 $D$ 的单个元素，\n- 接着是直立平衡点对应的相同九个量。\n\n无需进行数值代入；请以包含 $m$、$\\ell$、$b$ 和 $g$ 的符号形式给出答案。最终答案必须是单个闭式解析表达式。最终答案中不要包含单位。", "solution": "所给问题是关于非线性动力系统线性化的标准练习，这是控制理论中的一个基本过程。问题陈述在科学上是合理的、良定的，并包含了获得唯一解所需的所有必要信息。这是一个有效的问题。我们现在开始进行推导。\n\n系统的动力学由以下非线性常微分方程描述：\n$$\n\\ddot{\\theta} + \\frac{b}{m \\ell^{2}} \\dot{\\theta} + \\frac{g}{\\ell} \\sin \\theta = \\frac{1}{m \\ell^{2}} u\n$$\n状态向量定义为 $x = \\begin{pmatrix} x_1 \\\\ x_2 \\end{pmatrix} = \\begin{pmatrix} \\theta \\\\ \\dot{\\theta} \\end{pmatrix}$，输入为 $u$，输出为 $y = \\theta$。我们首先将系统表示为非线性状态空间形式 $\\dot{x} = f(x, u)$ 和 $y = h(x, u)$。\n\n根据状态变量的定义，我们得到第一个状态方程：\n$$\n\\dot{x}_1 = \\dot{\\theta} = x_2\n$$\n第二个状态方程通过重新整理给定的运动方程以求解 $\\ddot{\\theta}$ 来获得：\n$$\n\\dot{x}_2 = \\ddot{\\theta} = -\\frac{g}{\\ell} \\sin \\theta - \\frac{b}{m \\ell^2} \\dot{\\theta} + \\frac{1}{m \\ell^2} u\n$$\n代入状态变量 $x_1 = \\theta$ 和 $x_2 = \\dot{\\theta}$，我们得到：\n$$\n\\dot{x}_2 = -\\frac{g}{\\ell} \\sin x_1 - \\frac{b}{m \\ell^2} x_2 + \\frac{1}{m \\ell^2} u\n$$\n因此，非线性向量函数 $f(x, u)$ 为：\n$$\nf(x, u) = \\begin{pmatrix} x_2 \\\\ -\\frac{g}{\\ell} \\sin x_1 - \\frac{b}{m \\ell^2} x_2 + \\frac{1}{m \\ell^2} u \\end{pmatrix}\n$$\n输出方程为 $y=\\theta$，用状态变量表示为 $y = x_1$。因此，非线性输出函数 $h(x, u)$ 为：\n$$\nh(x, u) = x_1\n$$\n接下来，我们通过将 $\\dot{x} = 0$ 且控制输入设为常数值（此处取 $u_e = 0$）来确定开环平衡点 $(x_e, u_e)$。\n条件 $\\dot{x} = f(x_e, u_e) = 0$ 给出：\n$$\n\\begin{cases}\nx_{2e} = 0 \\\\\n-\\frac{g}{\\ell} \\sin x_{1e} - \\frac{b}{m \\ell^2} x_{2e} + \\frac{1}{m \\ell^2} u_e = 0\n\\end{cases}\n$$\n将 $x_{2e} = 0$ 和 $u_e=0$ 代入第二个方程，得出：\n$$\n-\\frac{g}{\\ell} \\sin x_{1e} = 0\n$$\n这意味着 $\\sin x_{1e} = 0$，其解为 $x_{1e} = n\\pi$，其中 $n$ 为任意整数。问题指明了两个不同的平衡点：\n1.  向下平衡点：这对应于稳定的静止位置 $\\theta_e = 0$。平衡状态为 $x_e = \\begin{pmatrix} 0 \\\\ 0 \\end{pmatrix}$。\n2.  直立平衡点：这对应于不稳定的倒置位置 $\\theta_e = \\pi$。平衡状态为 $x_e = \\begin{pmatrix} \\pi \\\\ 0 \\end{pmatrix}$。\n在这两种情况下，平衡输入均为 $u_e = 0$。\n\n将系统围绕平衡点 $(x_e, u_e)$ 进行线性化，得到关于偏差变量 $\\delta x = x - x_e$、$\\delta u = u - u_e$ 和 $\\delta y = y - y_e$ 的线性状态空间模型。按照一种常见的符号滥用，这些偏差变量通常被重新标记为 $x, u, y$。该模型由 $\\dot{x} = Ax + Bu$ 和 $y = Cx + Du$ 给出，其中矩阵是在平衡点处求值的 $f$ 和 $h$ 的雅可比矩阵：\n$$\nA = \\frac{\\partial f}{\\partial x} \\bigg|_{(x_e, u_e)}, \\quad B = \\frac{\\partial f}{\\partial u} \\bigg|_{(x_e, u_e)}, \\quad C = \\frac{\\partial h}{\\partial x} \\bigg|_{(x_e, u_e)}, \\quad D = \\frac{\\partial h}{\\partial u} \\bigg|_{(x_e, u_e)}\n$$\n我们首先以符号形式计算这些雅可比矩阵。\n$$\nA = \\frac{\\partial f}{\\partial x} = \\begin{pmatrix} \\frac{\\partial f_1}{\\partial x_1} & \\frac{\\partial f_1}{\\partial x_2} \\\\ \\frac{\\partial f_2}{\\partial x_1} & \\frac{\\partial f_2}{\\partial x_2} \\end{pmatrix} = \\begin{pmatrix} 0 & 1 \\\\ -\\frac{g}{\\ell} \\cos x_1 & -\\frac{b}{m \\ell^2} \\end{pmatrix}\n$$\n$$\nB = \\frac{\\partial f}{\\partial u} = \\begin{pmatrix} \\frac{\\partial f_1}{\\partial u} \\\\ \\frac{\\partial f_2}{\\partial u} \\end{pmatrix} = \\begin{pmatrix} 0 \\\\ \\frac{1}{m \\ell^2} \\end{pmatrix}\n$$\n$$\nC = \\frac{\\partial h}{\\partial x} = \\begin{pmatrix} \\frac{\\partial h}{\\partial x_1} & \\frac{\\partial h}{\\partial x_2} \\end{pmatrix} = \\begin{pmatrix} 1 & 0 \\end{pmatrix}\n$$\n$$\nD = \\frac{\\partial h}{\\partial u} = 0\n$$\n矩阵 $B$、$C$ 和 $D$ 是常数，不依赖于具体的平衡点。\n\n现在，我们在两个平衡点处分别对矩阵 $A$ 进行求值。\n\n情况1：向下平衡点\n平衡点为 $(x_e, u_e) = (\\begin{pmatrix} 0 \\\\ 0 \\end{pmatrix}, 0)$。我们将 $x_{1e} = 0$ 代入 $A$ 的表达式中：\n$$\nA_{\\text{down}} = \\begin{pmatrix} 0 & 1 \\\\ -\\frac{g}{\\ell} \\cos(0) & -\\frac{b}{m \\ell^2} \\end{pmatrix} = \\begin{pmatrix} 0 & 1 \\\\ -\\frac{g}{\\ell} & -\\frac{b}{m \\ell^2} \\end{pmatrix}\n$$\n向下平衡点对应的系统矩阵为：\n$$\nA = \\begin{pmatrix} 0 & 1 \\\\ -\\frac{g}{\\ell} & -\\frac{b}{m \\ell^2} \\end{pmatrix}, \\quad B = \\begin{pmatrix} 0 \\\\ \\frac{1}{m \\ell^2} \\end{pmatrix}, \\quad C = \\begin{pmatrix} 1 & 0 \\end{pmatrix}, \\quad D = 0\n$$\n\n情况2：直立平衡点\n平衡点为 $(x_e, u_e) = (\\begin{pmatrix} \\pi \\\\ 0 \\end{pmatrix}, 0)$。我们将 $x_{1e} = \\pi$ 代入 $A$ 的表达式中：\n$$\nA_{\\text{up}} = \\begin{pmatrix} 0 & 1 \\\\ -\\frac{g}{\\ell} \\cos(\\pi) & -\\frac{b}{m \\ell^2} \\end{pmatrix} = \\begin{pmatrix} 0 & 1 \\\\ \\frac{g}{\\ell} & -\\frac{b}{m \\ell^2} \\end{pmatrix}\n$$\n直立平衡点对应的系统矩阵为：\n$$\nA = \\begin{pmatrix} 0 & 1 \\\\ \\frac{g}{\\ell} & -\\frac{b}{m \\ell^2} \\end{pmatrix}, \\quad B = \\begin{pmatrix} 0 \\\\ \\frac{1}{m \\ell^2} \\end{pmatrix}, \\quad C = \\begin{pmatrix} 1 & 0 \\end{pmatrix}, \\quad D = 0\n$$\n\n最后，我们按照问题陈述的要求，将所需的量组装成一个单行矩阵。顺序是 $A_{\\text{down}}$ 的四个元素、$B_{\\text{down}}$ 的两个元素、$C_{\\text{down}}$ 的两个元素、$D_{\\text{down}}$ 的一个元素，后面跟着直立平衡点对应的九个量。\n向下平衡点的元素为：$0$、$1$、$-\\frac{g}{\\ell}$、$-\\frac{b}{m \\ell^2}$；$0$、$\\frac{1}{m \\ell^2}$；$1$、$0$；$0$。\n直立平衡点的元素为：$0$、$1$、$\\frac{g}{\\ell}$、$-\\frac{b}{m \\ell^2}$；$0$、$\\frac{1}{m \\ell^2}$；$1$、$0$；$0$。\n推导至此完成。", "answer": "$$\n\\boxed{\\begin{pmatrix} 0 & 1 & -\\frac{g}{\\ell} & -\\frac{b}{m \\ell^{2}} & 0 & \\frac{1}{m \\ell^{2}} & 1 & 0 & 0 & 0 & 1 & \\frac{g}{\\ell} & -\\frac{b}{m \\ell^{2}} & 0 & \\frac{1}{m \\ell^{2}} & 1 & 0 & 0 \\end{pmatrix}}\n$$", "id": "2723730"}, {"introduction": "在数字时代，控制器几乎总是在微处理器上以离散时间步长执行。这就要求我们将描述物理世界的连续时间模型（微分方程，如 $\\dot{x}(t)=A x(t)+B u(t)$）转化为计算机可以处理的离散时间模型（差分方程，如 $x[k+1]=A_{d} x[k]+B_{d} u[k]$）。本练习 [@problem_id:2723716] 将指导你从第一性原理出发，为带有零阶保持器（一种标准的数模转换方式）的线性时不变系统推导其精确的离散时间表示，从而加深你对连续与离散领域之间桥梁的理解。", "problem": "考虑一个连续时间、线性、时不变的状态空间模型\n$\\dot{x}(t)=A\\,x(t)+B\\,u(t)$，\n其中 $x(t)\\in\\mathbb{R}^{n}$，$u(t)\\in\\mathbb{R}^{m}$，$A\\in\\mathbb{R}^{n\\times n}$，以及 $B\\in\\mathbb{R}^{n\\times m}$。假设输入由零阶保持器 (ZOH) 生成，即存在一个采样周期 $T_{s}>0$ 和一个序列 $\\{u[k]\\}_{k\\in\\mathbb{Z}_{\\ge 0}}$，使得对于所有 $t\\in[kT_{s},(k+1)T_{s})$，都有 $u(t)=u[k]$。仅从线性系统的基本矩阵解的定义和常数变易法出发（不得使用任何其他预先推导的离散时间公式），推导精确的离散时间模型 $x[k+1]=A_{d}\\,x[k]+B_{d}\\,u[k]$，并将 $A_{d}$ 和 $B_{d}$ 用 $A$、$B$ 和 $T_{s}$ 表示。然后，根据 $A$ 的结构特性、采样周期 $T_{s}$ 以及所使用的任何模态分解的条件数，陈述定义 $B_{d}$ 的矩阵积分存在且数值良态的精确条件。\n\n最后，对于 $A=\\begin{pmatrix}0&1\\\\-2&-3\\end{pmatrix}$，$B=\\begin{pmatrix}0\\\\1\\end{pmatrix}$ 和 $T_{s}=\\tfrac{1}{2}$ 的特定情况，使用您推导的表达式计算精确的增广矩阵 $\\begin{pmatrix}A_{d}&B_{d}\\end{pmatrix}\\in\\mathbb{R}^{2\\times 3}$。将您的最终答案表示为一个具有精确解析元素的 $2\\times 3$ 矩阵（无数值舍入）。", "solution": "所提出的问题是采样数据系统理论中的一个标准练习。它具有科学依据，提法明确，并包含解决问题所需的所有信息。因此，该问题被认为是有效的。我们将继续进行推导和计算。\n\n连续时间线性时不变 (LTI) 系统由状态方程描述：\n$$ \\dot{x}(t) = A\\,x(t) + B\\,u(t) $$\n这个一阶线性向量微分方程的解，从时间 $t_0$ 的初始状态 $x(t_0)$ 开始，由常数变易公式给出：\n$$ x(t) = \\exp(A(t-t_0))x(t_0) + \\int_{t_0}^{t} \\exp(A(t-\\tau)) B u(\\tau) d\\tau $$\n此处，$\\exp(At)$ 是状态转移矩阵，也称为矩阵指数。\n\n我们的任务是找到一个精确的离散时间模型 $x[k+1]=A_{d}\\,x[k]+B_{d}\\,u[k]$，其中对于某个采样周期 $T_s > 0$，$x[k] \\equiv x(kT_s)$。我们考虑状态在一个采样区间内的演化，从时间 $t_0 = kT_s$ 到 $t = (k+1)T_s$。将这些代入通解得到：\n$$ x((k+1)T_s) = \\exp(A((k+1)T_s - kT_s))x(kT_s) + \\int_{kT_s}^{(k+1)T_s} \\exp(A((k+1)T_s - \\tau)) B u(\\tau) d\\tau $$\n使用记号 $x[k] = x(kT_s)$，上式变为：\n$$ x[k+1] = \\exp(A T_s) x[k] + \\int_{kT_s}^{(k+1)T_s} \\exp(A((k+1)T_s - \\tau)) B u(\\tau) d\\tau $$\n问题规定输入 $u(t)$ 由零阶保持器 (ZOH) 生成，这意味着输入在每个采样区间上是分段常数。因此，对于任何 $\\tau \\in [kT_s, (k+1)T_s)$，我们有 $u(\\tau) = u(kT_s) \\equiv u[k]$。由于 $u[k]$ 在积分区间上是一个常数向量，它可以从积分中提出：\n$$ x[k+1] = \\exp(A T_s) x[k] + \\left( \\int_{kT_s}^{(k+1)T_s} \\exp(A((k+1)T_s - \\tau)) d\\tau \\right) B u[k] $$\n为了计算该积分，我们进行变量替换。令 $\\sigma = (k+1)T_s - \\tau$。其微分为 $d\\sigma = -d\\tau$。积分上下限从 $\\tau=kT_s \\to \\sigma=T_s$ 和 $\\tau=(k+1)T_s \\to \\sigma=0$ 变化。积分变为：\n$$ \\int_{T_s}^{0} \\exp(A\\sigma) (-d\\sigma) = \\int_{0}^{T_s} \\exp(A\\sigma) d\\sigma $$\n将此代回，我们得到精确的离散时间模型：\n$$ x[k+1] = \\left( \\exp(A T_s) \\right) x[k] + \\left( \\int_{0}^{T_s} \\exp(A\\sigma) d\\sigma \\, B \\right) u[k] $$\n将此与目标形式 $x[k+1]=A_{d}\\,x[k]+B_{d}\\,u[k]$ 进行比较，我们确定离散时间系统矩阵：\n$$ A_d = \\exp(A T_s) $$\n$$ B_d = \\left( \\int_{0}^{T_s} \\exp(A\\sigma) d\\sigma \\right) B $$\n\n接下来，我们讨论积分 $\\int_{0}^{T_s} \\exp(A\\sigma) d\\sigma$ 存在且数值良态的条件。\n存在性：只要 $A$ 是一个有限维矩阵，矩阵指数 $\\exp(A\\sigma)$ 对所有 $\\sigma \\in \\mathbb{R}$ 都是解析函数。解析函数在有限区间 $[0, T_s]$ 上的积分总是良定义的且存在。因此，从纯数学的角度来看，该积分总是存在的。\n数值良态性：该积分的实际计算存在几个条件数问题。\n1. 如果矩阵 $A$ 可逆，则积分可计算为 $\\int_{0}^{T_s} \\exp(A\\sigma) d\\sigma = A^{-1}(\\exp(AT_s) - I)$。如果 $A$ 是奇异或接近奇异的（病态的），则该公式会变得数值不稳定，因为 $A^{-1}$ 要么未定义，要么具有非常大的条件数。\n2. 对于较小的采样周期 $T_s$，范数 $\\|AT_s\\|$ 会变小。在这种情况下，$\\exp(AT_s) \\approx I + AT_s$。$\\exp(AT_s) - I$ 这一项涉及两个几乎相等的矩阵相减，导致灾难性的精度损失（相减抵消）。\n3. 如果使用模态分解 $A=V\\Lambda V^{-1}$（其中 $\\Lambda$ 是特征值 $\\lambda_i$ 的对角矩阵），则积分变为 $V \\left( \\int_0^{T_s} \\exp(\\Lambda \\sigma)d\\sigma \\right) V^{-1}$。内部积分的对角元素为 $\\int_0^{T_s} \\exp(\\lambda_i\\sigma)d\\sigma$。对于非零特征值 $\\lambda_i \\neq 0$，其值为 $(\\exp(\\lambda_i T_s)-1)/\\lambda_i$。对于零特征值 $\\lambda_j = 0$，其值为 $T_s$。此计算的条件数取决于两个因素：\n    a. 特征向量矩阵的条件数，$\\kappa(V) = \\|V\\|\\|V^{-1}\\|$。如果 $A$ 接近亏损矩阵（即，具有彼此接近的特征值），则 $V$ 会变得病态，计算也会数值不稳定。\n    b. 对于任何满足 $|\\lambda_i T_s| \\ll 1$ 的特征值 $\\lambda_i$，项 $(\\exp(\\lambda_i T_s)-1)/\\lambda_i$ 会遇到与第2点中描述的相同相减抵消问题。\n\n总之，该积分总是存在的，但如果 (a) $A$ 是病态的并且使用了基于逆的公式，(b) 矩阵 $A$ 接近亏损矩阵并且使用了模态分解，或者 (c) 采样周期 $T_s$ 相对于系统的特征时间非常小（即 $\\|A T_s\\| \\ll 1$），则其数值计算是病态的。在这种情况下，需要使用基于级数展开的方法或其他专门的算法（例如，使用 Padé 近似的缩放与平方算法）。\n\n最后，我们计算特定情况下的增广矩阵 $\\begin{pmatrix}A_{d}&B_{d}\\end{pmatrix}$：\n$$ A=\\begin{pmatrix}0&1\\\\-2&-3\\end{pmatrix}, \\quad B=\\begin{pmatrix}0\\\\1\\end{pmatrix}, \\quad T_{s}=\\frac{1}{2} $$\n我们必须首先计算 $A_d = \\exp(A T_s)$。我们使用 $A$ 的模态分解。特征方程为 $\\det(A-\\lambda I) = \\lambda(-\\lambda-3) - (-2)(1) = \\lambda^2+3\\lambda+2=0$，解得特征值为 $\\lambda_1 = -1$ 和 $\\lambda_2 = -2$。\n相应的特征向量通过求解 $(A-\\lambda_i I)v_i = 0$ 找到。\n对于 $\\lambda_1 = -1$：$\\begin{pmatrix}1&1\\\\-2&-2\\end{pmatrix}v_1 = 0 \\implies v_1 = \\begin{pmatrix}1\\\\-1\\end{pmatrix}$。\n对于 $\\lambda_2 = -2$：$\\begin{pmatrix}2&1\\\\-2&-1\\end{pmatrix}v_2 = 0 \\implies v_2 = \\begin{pmatrix}1\\\\-2\\end{pmatrix}$。\n模态矩阵 $V$ 及其逆矩阵 $V^{-1}$ 为：\n$$ V = \\begin{pmatrix}1&1\\\\-1&-2\\end{pmatrix}, \\quad V^{-1} = \\frac{1}{-1}\\begin{pmatrix}-2&-1\\\\1&1\\end{pmatrix} = \\begin{pmatrix}2&1\\\\-1&-1\\end{pmatrix} $$\n矩阵指数为 $A_d = \\exp(AT_s) = V \\exp(\\Lambda T_s) V^{-1}$，其中 $T_s = 1/2$。\n$$ \\exp(\\Lambda T_s) = \\begin{pmatrix}\\exp(-1 \\cdot \\frac{1}{2})&0\\\\0&\\exp(-2 \\cdot \\frac{1}{2})\\end{pmatrix} = \\begin{pmatrix}\\exp(-\\frac{1}{2})&0\\\\0&\\exp(-1)\\end{pmatrix} $$\n$$ A_d = \\begin{pmatrix}1&1\\\\-1&-2\\end{pmatrix} \\begin{pmatrix}\\exp(-\\frac{1}{2})&0\\\\0&\\exp(-1)\\end{pmatrix} \\begin{pmatrix}2&1\\\\-1&-1\\end{pmatrix} $$\n$$ A_d = \\begin{pmatrix}\\exp(-\\frac{1}{2})&\\exp(-1)\\\\-\\exp(-\\frac{1}{2})&-2\\exp(-1)\\end{pmatrix} \\begin{pmatrix}2&1\\\\-1&-1\\end{pmatrix} $$\n$$ A_d = \\begin{pmatrix} 2\\exp(-\\frac{1}{2}) - \\exp(-1) & \\exp(-\\frac{1}{2}) - \\exp(-1) \\\\ -2\\exp(-\\frac{1}{2}) + 2\\exp(-1) & -\\exp(-\\frac{1}{2}) + 2\\exp(-1) \\end{pmatrix} $$\n现在我们计算 $B_d$。由于 $A$ 是可逆的（特征值非零），我们可以使用公式 $B_d = A^{-1}(A_d - I)B$。\n$$ A^{-1} = \\frac{1}{(0)(-3)-(1)(-2)} \\begin{pmatrix}-3&-1\\\\2&0\\end{pmatrix} = \\frac{1}{2} \\begin{pmatrix}-3&-1\\\\2&0\\end{pmatrix} $$\n$$ A_d - I = \\begin{pmatrix} 2\\exp(-\\frac{1}{2}) - \\exp(-1) - 1 & \\exp(-\\frac{1}{2}) - \\exp(-1) \\\\ -2\\exp(-\\frac{1}{2}) + 2\\exp(-1) & -\\exp(-\\frac{1}{2}) + 2\\exp(-1) - 1 \\end{pmatrix} $$\n$$ (A_d - I)B = \\begin{pmatrix} 2\\exp(-\\frac{1}{2}) - \\exp(-1) - 1 & \\exp(-\\frac{1}{2}) - \\exp(-1) \\\\ -2\\exp(-\\frac{1}{2}) + 2\\exp(-1) & -\\exp(-\\frac{1}{2}) + 2\\exp(-1) - 1 \\end{pmatrix} \\begin{pmatrix}0\\\\1\\end{pmatrix} = \\begin{pmatrix} \\exp(-\\frac{1}{2}) - \\exp(-1) \\\\ -\\exp(-\\frac{1}{2}) + 2\\exp(-1) - 1 \\end{pmatrix} $$\n$$ B_d = A^{-1} (A_d - I)B = \\frac{1}{2} \\begin{pmatrix}-3&-1\\\\2&0\\end{pmatrix} \\begin{pmatrix} \\exp(-\\frac{1}{2}) - \\exp(-1) \\\\ -\\exp(-\\frac{1}{2}) + 2\\exp(-1) - 1 \\end{pmatrix} $$\n$$ B_d = \\frac{1}{2} \\begin{pmatrix} -3(\\exp(-\\frac{1}{2}) - \\exp(-1)) - 1(-\\exp(-\\frac{1}{2}) + 2\\exp(-1) - 1) \\\\ 2(\\exp(-\\frac{1}{2}) - \\exp(-1)) \\end{pmatrix} $$\n$$ B_d = \\frac{1}{2} \\begin{pmatrix} -3\\exp(-\\frac{1}{2}) + 3\\exp(-1) + \\exp(-\\frac{1}{2}) - 2\\exp(-1) + 1 \\\\ 2\\exp(-\\frac{1}{2}) - 2\\exp(-1) \\end{pmatrix} $$\n$$ B_d = \\frac{1}{2} \\begin{pmatrix} -2\\exp(-\\frac{1}{2}) + \\exp(-1) + 1 \\\\ 2\\exp(-\\frac{1}{2}) - 2\\exp(-1) \\end{pmatrix} = \\begin{pmatrix} \\frac{1}{2} - \\exp(-\\frac{1}{2}) + \\frac{1}{2}\\exp(-1) \\\\ \\exp(-\\frac{1}{2}) - \\exp(-1) \\end{pmatrix} $$\n组合 $A_d$ 和 $B_d$，最终的增广矩阵为：\n$$ \\begin{pmatrix}A_{d}&B_{d}\\end{pmatrix} = \\begin{pmatrix} 2\\exp(-\\frac{1}{2}) - \\exp(-1) & \\exp(-\\frac{1}{2}) - \\exp(-1) & \\frac{1}{2} - \\exp(-\\frac{1}{2}) + \\frac{1}{2}\\exp(-1) \\\\ -2\\exp(-\\frac{1}{2}) + 2\\exp(-1) & -\\exp(-\\frac{1}{2}) + 2\\exp(-1) & \\exp(-\\frac{1}{2}) - \\exp(-1) \\end{pmatrix} $$\n解答到此结束。", "answer": "$$ \\boxed{ \\begin{pmatrix} 2\\exp(-\\frac{1}{2}) - \\exp(-1) & \\exp(-\\frac{1}{2}) - \\exp(-1) & \\frac{1}{2} - \\exp(-\\frac{1}{2}) + \\frac{1}{2}\\exp(-1) \\\\ -2\\exp(-\\frac{1}{2}) + 2\\exp(-1) & -\\exp(-\\frac{1}{2}) + 2\\exp(-1) & \\exp(-\\frac{1}{2}) - \\exp(-1) \\end{pmatrix} } $$", "id": "2723716"}, {"introduction": "许多现代工程系统，如恒温器控制的房间或汽车的自适应巡航控制，其行为由连续的物理动态和离散的逻辑切换共同决定。本练习 [@problem_id:2723712] 引入了混合自动机这一强大形式化工具来建模此类系统。通过为一个带滞回的恒温器系统开发事件驱动的仿真程序，你将亲身体验如何分析和模拟这种无处不在的“信息物理系统”（Cyber-Physical Systems）的复杂行为。", "problem": "考虑一个带滞回的恒温器控制的单区热力系统。该系统有单一连续状态，即室内温度 $x(t)$（单位为 $\\mathrm{^\\circ C}$），以及一个二元控制输入 $m(t) \\in \\{0,1\\}$，代表加热器模式（$m(t)=1$ 表示加热器开启，$m(t)=0$ 表示加热器关闭）。环境具有恒定的环境温度 $T_a$（单位为 $\\mathrm{^\\circ C}$）。其热力学动态遵循标准的集总电容一阶模型的能量平衡：存在一个热时间常数 $\\tau = R_{\\mathrm{th}} C_{\\mathrm{th}}$（单位为 $\\mathrm{s}$）和一个等效加热速率常数 $k = P_{\\mathrm{on}}/C_{\\mathrm{th}}$（单位为 $\\mathrm{^\\circ C/s}$），使得连续时间动态为\n$$\n\\dot{x}(t) = -\\frac{1}{\\tau}\\big(x(t)-T_a\\big) + k\\, m(t).\n$$\n带滞回的恒温器跟踪一个恒定的参考设定点 $r$（单位为 $\\mathrm{^\\circ C}$），并带有一个对称死区半宽 $h>0$（单位为 $\\mathrm{^\\circ C}$）。开关逻辑如下：\n- 当 $x(t)$ 下降到下阈值 $r-h$ 时，开启加热器。\n- 当 $x(t)$ 上升到上阈值 $r+h$ 时，关闭加热器。\n\n将此系统建模为一个混合自动机 (HA)，其具有两个离散模式 $\\mathcal{M}=\\{\\mathrm{ON},\\mathrm{OFF}\\}$，连续状态 $x\\in\\mathbb{R}$，流映射由上述常微分方程确定（在 $\\mathrm{ON}$ 模式下 $m=1$，在 $\\mathrm{OFF}$ 模式下 $m=0$），不变式由滞回阈值定义，守卫集位于切换表面上，并采用恒等重置（无状态跳变）。请用 $x$、$r$ 和 $h$ 明确指定流集、不变式、守卫集和重置。\n\n仅使用基本能量平衡和混合自动机 (HA) 的定义，从第一性原理推导出一个不依赖于固定时间步长的精确事件驱动仿真方法。从每个模式下线性标量常微分方程的闭式解着手，通过求解轨迹到达相应守卫的时间来推导下一个切换时间的公式。您的推导必须从具有恒定输入 $m\\in\\{0,1\\}$ 的线性常微分方程的闭式解开始，然后进行到守卫交集条件，并阐明在有限时间内到达守卫的充要条件。您必须清楚说明如何根据初始温度 $x(0)=x_0$ 和滞回阈值选择初始模式。在特殊情况下，当某个模式下的平衡温度等于一个守卫，或者守卫位于沿运动方向超过平衡点的位置时，请阐明为什么在有限时间内不会发生切换，以及仿真应如何进行。\n\n实现一个程序，对下面的每个测试用例，在有限时间域 $T_{\\mathrm{end}}$（单位为 s）内仿真该混合系统，从给定的初始温度 $x_0$（单位为 $\\mathrm{^\\circ C}$）开始。程序必须计算：\n- 在 $[0,T_{\\mathrm{end}}]$ 上的平均占空比，定义为加热器开启时间的比例，即 $\\frac{1}{T_{\\mathrm{end}}}\\int_0^{T_{\\mathrm{end}}} m(t)\\,dt$。将此结果报告为一个四舍五入到六位小数的实数。\n- 模式切换的总次数（一个整数）。\n\n单位和数值报告要求：\n- 温度单位为 $\\mathrm{^\\circ C}$，时间单位为 $\\mathrm{s}$，占空比是 $[0,1]$ 范围内的无量纲数。\n- 平均占空比必须使用标准的四舍五入到最近值的方法，保留六位小数。\n- 切换次数必须报告为整数。\n- 选择初始模式时，请使用以下规则：如果 $x_0 \\le r-h$，选择 $\\mathrm{ON}$；如果 $x_0 \\ge r+h$，选择 $\\mathrm{OFF}$；如果 $r-h < x_0 < r+h$，选择 $\\mathrm{OFF}$。\n\n边界情况处理：\n- 如果轨迹渐近趋近一个守卫但未能在有限时间内到达（例如，当该模式下的平衡温度等于守卫时），则模式不得改变，并应在剩余的时间域内保持当前模式。\n\n测试套件：\n对于每个元组 $(\\tau,k,T_a,r,h,x_0,T_{\\mathrm{end}})$，进行仿真并返回所需的输出。\n\n- 案例 A（典型切换）：$(\\tau,k,T_a,r,h,x_0,T_{\\mathrm{end}}) = (300.0,\\,0.08,\\,15.0,\\,22.0,\\,0.5,\\,20.0,\\,3600.0)$。\n- 案例 B（即使加热器开启也无法达到设定点）：$(\\tau,k,T_a,r,h,x_0,T_{\\mathrm{end}}) = (200.0,\\,0.04,\\,0.0,\\,20.0,\\,1.0,\\,10.0,\\,1200.0)$。\n- 案例 C（环境温度高于设定点；从不需要加热器）：$(\\tau,k,T_a,r,h,x_0,T_{\\mathrm{end}}) = (300.0,\\,0.05,\\,30.0,\\,20.0,\\,0.5,\\,25.0,\\,1200.0)$。\n- 案例 D（初始温度在死区内；默认为关闭）：$(\\tau,k,T_a,r,h,x_0,T_{\\mathrm{end}}) = (400.0,\\,0.05,\\,18.0,\\,21.0,\\,0.5,\\,21.2,\\,3600.0)$。\n\n最终输出格式规范：\n- 您的程序应生成单行输出，其中包含用方括号括起来的逗号分隔的结果列表。\n- 该列表必须是按 A、B、C、D 顺序排列的各案例结果的扁平化序列。对于每个案例，首先附加四舍五入后的平均占空比（小数点后六位的浮点数），然后是切换次数（整数）。\n- 例如，语法形式必须为 $[d_A, s_A, d_B, s_B, d_C, s_C, d_D, s_D]$，其中 $d_\\cdot$ 是四舍五入到六位小数的浮点数，$s_\\cdot$ 是整数。", "solution": "该问题提法清晰，具有科学依据，并包含了获得唯一解所需的所有信息。我们着手进行推导和分析。\n\n### 1. 混合自动机规范\n\n恒温器控制的热力系统被建模为一个混合自动机 (HA)。HA 是一个用于描述兼具连续动态（流）和离散事件（跳变）的系统的形式化模型。此 HA 的组件定义如下：\n\n- **离散模式**：系统有两个离散模式，对应于加热器的状态：$\\mathcal{M} = \\{\\mathrm{ON}, \\mathrm{OFF}\\}$。\n\n- **连续状态**：单一连续状态是室内温度 $x \\in \\mathbb{R}$，单位为 ${}^\\circ\\mathrm{C}$。\n\n- **控制输入**：$m(t)$ 是一个分段常数时间函数，取值于 $\\{0, 1\\}$。我们将 $m=1$ 与 $\\mathrm{ON}$ 模式关联，将 $m=0$ 与 $\\mathrm{OFF}$ 模式关联。\n\n- **流映射（连续动态）**：在每个模式内，连续状态 $x(t)$ 的演化由给定的常微分方程 (ODE) 控制：\n$$\n\\dot{x}(t) = -\\frac{1}{\\tau}\\big(x(t)-T_a\\big) + k\\, m\n$$\n通过定义依赖于模式的平衡温度 $x_\\infty$，可以为每个模式重写此 ODE。\n在 $\\mathrm{OFF}$ 模式 ($m=0$) 下，平衡点为 $x_{\\infty, \\mathrm{OFF}} = T_a$。其动态为：\n$$\n\\dot{x} = -\\frac{1}{\\tau}(x - x_{\\infty, \\mathrm{OFF}})\n$$\n在 $\\mathrm{ON}$ 模式 ($m=1$) 下，平衡点为 $x_{\\infty, \\mathrm{ON}} = T_a + k\\tau$。其动态为：\n$$\n\\dot{x} = -\\frac{1}{\\tau}(x - x_{\\infty, \\mathrm{ON}})\n$$\n\n- **不变式（流集）**：不变集定义了连续状态空间中系统被允许保持在特定离散模式下的区域。\n  - 在 $\\mathrm{ON}$ 模式下，系统在下阈值 $r-h$ 或更低温度时被激活，并向着上阈值 $r+h$ 加热。只要温度不超过上阈值，它就保持在该模式。因此，$\\mathrm{ON}$ 模式的不变式为 $\\mathrm{Inv}(\\mathrm{ON}) = \\{x \\in \\mathbb{R} \\mid x \\le r+h\\}$。\n  - 在 $\\mathrm{OFF}$ 模式下，系统在上阈值 $r+h$ 或更高温度时被停用，并向着下阈值 $r-h$ 冷却。只要温度不低于下阈值，它就保持在该模式。因此，$\\mathrm{OFF}$ 模式的不变式为 $\\mathrm{Inv}(\\mathrm{OFF}) = \\{x \\in \\mathbb{R} \\mid x \\ge r-h\\}$。\n\n- **守卫集**：守卫集是触发模式间离散转换的连续状态条件。\n  - 从 $\\mathrm{ON}$ 到 $\\mathrm{OFF}$ 的转换发生在温度上升到上阈值时。其守卫为 $G(\\mathrm{ON} \\to \\mathrm{OFF}) = \\{x \\in \\mathbb{R} \\mid x = r+h\\}$。\n  - 从 $\\mathrm{OFF}$ 到 $\\mathrm{ON}$ 的转换发生在温度下降到下阈值时。其守卫为 $G(\\mathrm{OFF} \\to \\mathrm{ON}) = \\{x \\in \\mathbb{R} \\mid x = r-h\\}$。\n\n- **重置映射**：重置映射定义了离散转换期间连续状态的变化。在该系统中，温度是连续的，因此状态不会发生跳变。两种转换的重置映射均为恒等映射：\n  - 对于 $\\mathrm{ON} \\to \\mathrm{OFF}$：$x^+ := x$。\n  - 对于 $\\mathrm{OFF} \\to \\mathrm{ON}$：$x^+ := x$。\n\n### 2. 事件驱动仿真方法的推导\n\n事件驱动仿真计算下一个离散事件（模式切换）的精确时间，而不是使用固定的时间步长。这需要在每个模式下得到 ODE 的解析解。\n\n#### 2.1. 状态方程的闭式解\n\n每个模式中的流由形式为 $\\dot{x} = -\\frac{1}{\\tau}(x - x_\\infty)$ 的线性一阶 ODE 描述，其中 $x_\\infty$ 是该模式下的恒定平衡温度。给定初始条件 $x(t_0) = x_0$，对于 $t \\ge t_0$ 的解为：\n$$\nx(t) = x_\\infty + (x_0 - x_\\infty) e^{-(t-t_0)/\\tau}\n$$\n\n#### 2.2. 到达守卫时间的推导\n\n我们推导状态从初始温度 $x_0$ 演化到目标温度 $x_{\\mathrm{target}}$（代表一个切换守卫）所需的时间 $\\Delta t = t - t_0$。\n$$\nx_{\\mathrm{target}} = x_\\infty + (x_0 - x_\\infty) e^{-\\Delta t/\\tau}\n$$\n求解 $\\Delta t$：\n$$\n\\frac{x_{\\mathrm{target}} - x_\\infty}{x_0 - x_\\infty} = e^{-\\Delta t/\\tau}\n$$\n对方程两边取自然对数：\n$$\n\\ln\\left(\\frac{x_{\\mathrm{target}} - x_\\infty}{x_0 - x_\\infty}\\right) = -\\frac{\\Delta t}{\\tau}\n$$\n$$\n\\Delta t = -\\tau \\ln\\left(\\frac{x_{\\mathrm{target}} - x_\\infty}{x_0 - x_\\infty}\\right) = \\tau \\ln\\left(\\frac{x_0 - x_\\infty}{x_{\\mathrm{target}} - x_\\infty}\\right)\n$$\n\n#### 2.3. 有限时间内与守卫相交的条件\n\n要使 $\\Delta t$ 成为一个正的、有限的实数，必须满足两个条件：\n1. 对数的参数必须为正。这意味着 $(x_0 - x_\\infty)$ 和 $(x_{\\mathrm{target}} - x_\\infty)$ 必须同号。换言之，$x_0$ 和 $x_{\\mathrm{target}}$ 必须位于平衡点 $x_\\infty$ 的同一侧。\n2. 对数的参数必须大于 $1$（因为 $\\Delta t > 0$）。这意味着 $|x_0 - x_\\infty| > |x_{\\mathrm{target}} - x_\\infty|$。\n\n综合以上两点，状态 $x(t)$ 总是从 $x_0$ 单调地向 $x_\\infty$ 移动。因此，为了使轨迹能在有限时间内到达 $x_{\\mathrm{target}}$，$x_{\\mathrm{target}}$ 必须严格位于初始状态 $x_0$ 和平衡点 $x_\\infty$ 之间。\n\n让我们将此应用于我们的系统：\n- **在 $\\mathrm{ON}$ 模式下**：系统正在加热。轨迹从某个温度 $x_i$ 开始，向 $x_{\\infty, \\mathrm{ON}}$ 移动。守卫是 $x_{\\mathrm{target}} = r+h$。当且仅当守卫位于当前温度和平衡点之间时，即 $x_i < r+h < x_{\\infty, \\mathrm{ON}}$，系统才会在有限时间内切换到 $\\mathrm{OFF}$ 模式。由于加热周期在 $r-h$ 或以下开始，我们有 $x_i \\le r+h$。因此，未来发生切换的严格条件是 $r+h < x_{\\infty, \\mathrm{ON}}$。如果 $r+h \\ge x_{\\infty, \\mathrm{ON}}$，温度将渐近趋近 $x_{\\infty, \\mathrm{ON}}$，而永远不会到达守卫 $r+h$。切换时间为 $\\Delta t_{\\mathrm{ON}} = \\tau \\ln\\left(\\frac{x_i - x_{\\infty, \\mathrm{ON}}}{ (r+h) - x_{\\infty, \\mathrm{ON}}}\\right)$。\n\n- **在 $\\mathrm{OFF}$ 模式下**：系统正在冷却。轨迹从 $x_i$ 开始，向 $x_{\\infty, \\mathrm{OFF}}$ 移动。守卫是 $x_{\\mathrm{target}} = r-h$。当且仅当 $x_{\\infty, \\mathrm{OFF}} < r-h < x_i$ 时，系统才会在有限时间内切换到 $\\mathrm{ON}$ 模式。未来发生切换的严格条件是 $x_{\\infty, \\mathrm{OFF}} < r-h$。如果 $x_{\\infty, \\mathrm{OFF}} \\ge r-h$，温度将渐近趋近 $x_{\\infty, \\mathrm{OFF}}$，永远不会到达守卫。切换时间为 $\\Delta t_{\\mathrm{OFF}} = \\tau \\ln\\left(\\frac{x_i - x_{\\infty, \\mathrm{OFF}}}{(r-h) - x_{\\infty, \\mathrm{OFF}}}\\right)$。\n\n#### 2.4. 仿真算法的综合\n\n事件驱动的仿真算法流程如下：\n1.  初始化时间 $t=0.0$，初始状态 $x=x_0$，总开启时间 $T_{\\mathrm{on}}=0.0$，以及切换次数 $N_s=0$。\n2.  根据问题规范，基于 $x_0$、$r$ 和 $h$ 确定初始模式。\n3.  进入一个循环，只要 $t < T_{\\mathrm{end}}$ 就继续：\n   a. 确定当前模式（ON 或 OFF）、相应的平衡点（$x_{\\infty, \\mathrm{ON}}$ 或 $x_{\\infty, \\mathrm{OFF}}$）和目标守卫（$r+h$ 或 $r-h$）。\n   b. 检查是否满足有限时间切换的条件。\n   c. 如果可能发生切换，计算到达守卫的时间 $\\Delta t$。\n      i. 如果 $t + \\Delta t > T_{\\mathrm{end}}$，仿真将在当前模式下结束。如果模式为 ON，则为剩余时间 $T_{\\mathrm{end}}-t$ 更新 $T_{\\mathrm{on}}$。终止循环。\n      ii. 如果 $t + \\Delta t \\le T_{\\mathrm{end}}$，则发生切换。更新 $t \\to t+\\Delta t$，如果模式为 ON 则更新 $T_{\\mathrm{on}}$，将 $x$ 设置为守卫值，增加 $N_s$，并翻转模式。\n   d. 如果不可能发生切换（渐近趋近），系统将在仿真的剩余时间内保持当前模式。如果模式为 ON，则为剩余时间 $T_{\\mathrm{end}}-t$ 更新 $T_{\\mathrm{on}}$。终止循环。\n4.  循环结束后，计算平均占空比：$d = T_{\\mathrm{on}} / T_{\\mathrm{end}}$。\n5.  报告四舍五入后的占空比和总切换次数。\n\n#### 2.5. 初始模式选择\n根据指定规则，由初始温度 $x_0$ 确定 $t=0$ 时的初始模式：\n- 如果 $x_0 \\le r-h$，模式为 $\\mathrm{ON}$。\n- 如果 $x_0 \\ge r+h$，模式为 $\\mathrm{OFF}$。\n- 如果 $r-h < x_0 < r+h$，模式为 $\\mathrm{OFF}$。\n\n至此，完成了所需实现的理论基础。", "answer": "```python\nimport numpy as np\nimport math\n\ndef solve():\n    \"\"\"\n    Main function to run simulations for all test cases and print the results.\n    \"\"\"\n\n    test_cases = [\n        # Case A: Typical toggling\n        (300.0, 0.08, 15.0, 22.0, 0.5, 20.0, 3600.0),\n        # Case B: Unreachable setpoint\n        (200.0, 0.04, 0.0, 20.0, 1.0, 10.0, 1200.0),\n        # Case C: Ambient above setpoint\n        (300.0, 0.05, 30.0, 20.0, 0.5, 25.0, 1200.0),\n        # Case D: Initial temperature in deadband\n        (400.0, 0.05, 18.0, 21.0, 0.5, 21.2, 3600.0),\n    ]\n\n    results = []\n    for case in test_cases:\n        duty_cycle, switch_count = simulate_hybrid_system(*case)\n        # Format the duty cycle to six decimal places using standard rounding\n        # f-string formatting handles rounding appropriately for this problem's values.\n        results.append(f\"{duty_cycle:.6f}\")\n        results.append(str(switch_count))\n\n    print(f\"[{','.join(results)}]\")\n\ndef simulate_hybrid_system(tau, k, T_a, r, h, x_0, T_end):\n    \"\"\"\n    Simulates the thermostat-controlled hybrid system using an event-driven method.\n\n    Args:\n        tau (float): Thermal time constant in seconds.\n        k (float): Heating rate constant in °C/s.\n        T_a (float): Ambient temperature in °C.\n        r (float): Reference setpoint in °C.\n        h (float): Hysteresis deadband half-width in °C.\n        x_0 (float): Initial temperature in °C.\n        T_end (float): Total simulation time in seconds.\n\n    Returns:\n        tuple: A tuple containing:\n            - float: The average duty cycle [0, 1].\n            - int: The total number of mode switches.\n    \"\"\"\n    t = 0.0\n    x = float(x_0)\n    total_on_time = 0.0\n    switch_count = 0\n\n    lower_threshold = r - h\n    upper_threshold = r + h\n\n    x_inf_off = float(T_a)\n    x_inf_on = T_a + k * tau\n\n    # Determine initial mode based on the problem's rule\n    if x <= lower_threshold:\n        mode = 'ON'\n    elif x >= upper_threshold:\n        mode = 'OFF'\n    else:  # In deadband\n        mode = 'OFF'\n    \n    while t < T_end:\n        time_left_in_sim = T_end - t\n\n        if mode == 'ON':\n            # Check if a switch to OFF is possible.\n            # The temperature must be able to reach the upper threshold,\n            # which requires the ON-mode equilibrium to be above it.\n            if x_inf_on > upper_threshold:\n                # Calculate time to reach the upper guard\n                # The argument to log is (x - x_inf_on) / (upper_threshold - x_inf_on).\n                # Both numerator and denominator are negative, so the ratio is positive.\n                # If x is very close to x_inf_on (practically impossible here),\n                # log could fail, but the problem structure prevents this.\n                time_to_switch = tau * np.log((x - x_inf_on) / (upper_threshold - x_inf_on))\n\n                if time_to_switch < time_left_in_sim:\n                    total_on_time += time_to_switch\n                    t += time_to_switch\n                    x = upper_threshold\n                    mode = 'OFF'\n                    switch_count += 1\n                else:\n                    # Simulation ends while the heater is ON\n                    total_on_time += time_left_in_sim\n                    t = T_end\n            else:\n                # Temperature will asymptotically approach x_inf_on, which is at or below\n                # the upper threshold. No switch will occur.\n                total_on_time += time_left_in_sim\n                t = T_end\n        \n        else:  # mode == 'OFF'\n            # Check if a switch to ON is possible.\n            # The temperature must be able to reach the lower threshold,\n            # which requires the OFF-mode equilibrium to be below it.\n            if x_inf_off < lower_threshold:\n                # Calculate time to reach the lower guard\n                # The argument to log is (x - x_inf_off) / (lower_threshold - x_inf_off).\n                # Both numerator and denominator are positive, so the ratio is positive.\n                time_to_switch = tau * np.log((x - x_inf_off) / (lower_threshold - x_inf_off))\n\n                if time_to_switch < time_left_in_sim:\n                    # Time spent in OFF mode does not add to total_on_time\n                    t += time_to_switch\n                    x = lower_threshold\n                    mode = 'ON'\n                    switch_count += 1\n                else:\n                    # Simulation ends while the heater is OFF\n                    t = T_end\n            else:\n                # Temperature will asymptotically approach x_inf_off, which is at or above\n                # the lower threshold. No switch will occur.\n                t = T_end\n    \n    duty_cycle = total_on_time / T_end if T_end > 0 else 0.0\n    return duty_cycle, switch_count\n\nif __name__ == '__main__':\n    solve()\n```", "id": "2723712"}]}