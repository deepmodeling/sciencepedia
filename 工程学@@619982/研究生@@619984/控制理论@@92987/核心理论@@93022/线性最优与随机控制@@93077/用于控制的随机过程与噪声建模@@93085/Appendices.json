{"hands_on_practices": [{"introduction": "要理解随机控制，首先必须掌握如何对受噪声驱动的动态系统进行建模。Ornstein–Uhlenbeck 过程是描述稳定一阶系统在白噪声激励下行为的典型模型，在物理、金融和工程领域无处不在。通过这个练习，你将运用 Itô 积分的基本工具来求解这个核心的随机微分方程 (SDE)，并分析其统计特性，为你理解更复杂的随机系统打下坚实的基础。[@problem_id:2750107]", "problem": "考虑用于控制中噪声建模的连续时间线性时不变 (LTI) 随机状态模型，\n$$\ndX_t = -a\\,X_t\\,dt + \\sigma\\,dW_t,\\quad t \\ge 0,\n$$\n其中 $a>0$，$\\sigma>0$，$X_0$ 独立于维纳过程 (布朗运动) $W_t$，且 $\\mathbb{E}[X_0^2]<\\infty$。这是标准的一维 Ornstein–Uhlenbeck 过程，用于建模由过程噪声驱动的稳定一阶模态。\n\n1) 仅从 Itô 乘积法则和 Itô 积分的定义出发，推导用 $X_0$ 和 $W_t$ 表示的显式解 $X_t$。\n\n2) 利用 Itô 积分的性质和独立性假设，计算对所有 $t\\ge 0$ 的 $\\mathbb{E}[X_t]$ 和 $\\mathbb{E}[X_t^2]$。\n\n3) 确定极限\n$$\n\\lim_{t\\to\\infty}\\mathbb{E}[X_t^2],\n$$\n并解释为什么对于这个稳定的噪声驱动模态，该极限代表了宽平稳意义下的稳态方差。\n\n将您的最终答案表示为关于 $a$ 和 $\\sigma$ 的单一闭式解析表达式。无需四舍五入，也无需单位。", "solution": "我们使用 Itô 微积分的基本工具来分析给定的随机微分方程。方程\n$$\ndX_t = -a\\,X_t\\,dt + \\sigma\\,dW_t,\\quad a>0,\\ \\sigma>0,\n$$\n是线性的。求解线性随机微分方程的标准方法是使用积分因子并结合 Itô 乘积法则。定义确定性积分因子 $M_t = \\exp(a t)$。将 Itô 乘积法则应用于 $M_t X_t$，\n$$\nd\\big(M_t X_t\\big) = M_t\\,dX_t + X_t\\,dM_t + d\\langle M, X\\rangle_t.\n$$\n因为 $M_t=\\exp(a t)$ 是有界变差的，所以 $d\\langle M, X\\rangle_t=0$，且 $dM_t = a\\,M_t\\,dt$。代入 $dX_t$ 可得\n$$\nd\\big(M_t X_t\\big) = M_t\\big(-a\\,X_t\\,dt + \\sigma\\,dW_t\\big) + X_t\\,a\\,M_t\\,dt\n= \\sigma\\,M_t\\,dW_t.\n$$\n从 $0$ 到 $t$ 积分，\n$$\nM_t X_t - M_0 X_0 = \\sigma \\int_0^t M_s\\,dW_s.\n$$\n由于 $M_0=\\exp(0)=1$，我们得到显式解\n$$\nX_t = \\exp(-a t)\\,X_0 + \\sigma \\int_0^t \\exp\\big(-a (t-s)\\big)\\,dW_s.\n$$\n\n现在我们计算一阶矩和二阶矩。利用期望的线性性质以及 Itô 积分均值为零的事实，\n$$\n\\mathbb{E}[X_t] = \\exp(-a t)\\,\\mathbb{E}[X_0] + \\sigma\\,\\mathbb{E}\\!\\left[\\int_0^t \\exp\\big(-a (t-s)\\big)\\,dW_s\\right]\n= \\exp(-a t)\\,\\mathbb{E}[X_0].\n$$\n\n对于二阶矩，我们记\n$$\nX_t = A_t + B_t,\\quad A_t \\coloneqq \\exp(-a t)\\,X_0,\\quad B_t \\coloneqq \\sigma \\int_0^t \\exp\\big(-a (t-s)\\big)\\,dW_s.\n$$\n那么\n$$\n\\mathbb{E}[X_t^2] = \\mathbb{E}[A_t^2] + 2\\,\\mathbb{E}[A_t B_t] + \\mathbb{E}[B_t^2].\n$$\n我们分别处理每一项：\n\n- 对于 $A_t^2$，\n$$\n\\mathbb{E}[A_t^2] = \\exp(-2 a t)\\,\\mathbb{E}[X_0^2].\n$$\n\n- 对于交叉项，利用 $X_0$ 和 $(W_s)_{s\\ge 0}$ 的独立性，以及 Itô 积分在给定 $X_0$ 的条件下均值为零的事实：\n$$\n\\mathbb{E}[A_t B_t] = \\exp(-a t)\\,\\sigma\\,\\mathbb{E}\\!\\left[X_0 \\int_0^t \\exp\\big(-a (t-s)\\big)\\,dW_s\\right]\n= \\exp(-a t)\\,\\sigma\\,\\mathbb{E}\\!\\left[ X_0\\,\\mathbb{E}\\!\\left[\\left.\\int_0^t \\exp\\big(-a (t-s)\\big)\\,dW_s\\,\\right|\\,X_0\\right]\\right] = 0.\n$$\n\n- 对于 $B_t^2$，应用 Itô 等距性：\n$$\n\\mathbb{E}[B_t^2] = \\sigma^2\\,\\mathbb{E}\\!\\left[\\left(\\int_0^t \\exp\\big(-a (t-s)\\big)\\,dW_s\\right)^2\\right]\n= \\sigma^2 \\int_0^t \\exp\\big(-2 a (t-s)\\big)\\,ds.\n$$\n通过变量替换 $u=t-s$ 来计算该积分：\n$$\n\\int_0^t \\exp\\big(-2 a (t-s)\\big)\\,ds = \\int_0^t \\exp(-2 a u)\\,du = \\frac{1 - \\exp(-2 a t)}{2 a}.\n$$\n\n合并各项，\n$$\n\\mathbb{E}[X_t^2] = \\exp(-2 a t)\\,\\mathbb{E}[X_0^2] + \\sigma^2\\,\\frac{1 - \\exp(-2 a t)}{2 a}.\n$$\n\n现在当 $t\\to\\infty$ 时取极限。因为 $a>0$，所以 $\\exp(-2 a t)\\to 0$，因此\n$$\n\\lim_{t\\to\\infty} \\mathbb{E}[X_t^2] = \\sigma^2\\,\\frac{1}{2 a}.\n$$\n\n在控制背景下对平稳性的解释：漂移系数 $a>0$ 意味着潜在确定性模态的指数稳定性。强度为 $\\sigma$ 的加性白噪声输入驱动了持续的波动，其能量被速率为 $a$ 的耗散所限制。极限二阶矩是稳态方差，即在唯一不变高斯分布下的方差。更准确地说，该过程依分布收敛到一个均值为零、方差为 $\\sigma^2/(2 a)$ 的高斯分布，并且协方差函数变为时移不变的，其极限形式为 $\\mathrm{Cov}(X_{t},X_{t+\\tau}) = (\\sigma^2/(2 a))\\exp(-a|\\tau|)$。因此，$\\mathbb{E}[X_t^2]$ 的有限极限验证了稳态下的二阶平稳性，所求的稳态方差为 $\\sigma^2/(2 a)$。", "answer": "$$\\boxed{\\frac{\\sigma^2}{2 a}}$$", "id": "2750107"}, {"introduction": "在掌握了单个随机变量的动态后，我们将视角扩展到更广泛的线性时不变 (LTI) 系统。这个练习旨在连接系统对随机输入的响应的两种基本观点：时域观点，通过状态空间表示和李雅普诺夫方程 (Lyapunov equation)；以及频域观点，通过传递函数 $G(s)$ 和功率谱密度。你将推导并计算系统的 $H_2$ 范数，它量化了系统对白噪声输入的能量放大效应，这是评估和设计鲁棒控制器的一个关键指标。[@problem_id:2750143]", "problem": "考虑一个稳定的、严格真、单输入单输出 (SISO) 连续时间线性时不变 (LTI) 系统，其传递函数为 $G(s)$。输入 $w(t)$ 是一个零均值、宽义平稳、单位强度的白色高斯噪声。采用角频率约定，其中平稳过程 $x(t)$ 的功率谱密度 $S_{x}(\\omega)$ 是其自相关函数 $R_{x}(\\tau)$ 的傅里叶变换（无归一化因子），因此有 $R_{x}(0) = \\frac{1}{2\\pi}\\int_{-\\infty}^{\\infty} S_{x}(\\omega)\\, d\\omega$。\n\n1.  从谱量的线性时不变性定义和 Wiener–Khinchin 定理出发，当输入为给定的白噪声时，推导平稳输出方差 $\\sigma_{y}^{2}$ 关于 $G(\\mathrm{j}\\omega)$ 的表达式。利用此推导，根据 $|G(\\mathrm{j}\\omega)|^{2}$ 的积分形式，确定 $G(s)$ 的哈代空间 $H_{2}$ 范数 $\\lVert G\\rVert_{2}$，并解释在所述约定下为何有 $\\sigma_{y}^{2} = \\lVert G\\rVert_{2}^{2}$。\n\n2.  现在考虑具体的最小实现\n    $$\n    A=\\begin{bmatrix}-2 & -1\\\\ 1 & -3\\end{bmatrix},\\quad\n    B=\\begin{bmatrix}1\\\\ 2\\end{bmatrix},\\quad\n    C=\\begin{bmatrix}1 & 0\\end{bmatrix},\\quad\n    D=\\begin{bmatrix}0\\end{bmatrix},\n    $$\n    其定义了 $G(s)=C(sI-A)^{-1}B+D$。仅使用第一性原理和关于可控性格拉姆矩阵及其与稳定 LTI 系统输出能量关系的既有结论，计算单位强度白噪声输入下的平稳输出方差 $\\sigma_{y}^{2}$ 的精确值。\n\n将最终数值答案表示为一个精确的既约分数，不带单位。无需四舍五-入。", "solution": "**第 1 部分：输出方差的推导及其与 $H_2$ 范数的关系**\n\n输入 $w(t)$ 是一个单位强度的宽义平稳白噪声过程。根据定义，其自相关函数是一个狄拉克 $\\delta$ 函数：\n$$\nR_{w}(\\tau) = E[w(t+\\tau)w(t)] = 1 \\cdot \\delta(\\tau) = \\delta(\\tau)\n$$\n功率谱密度 $S_{w}(\\omega)$ 是自相关函数的傅里叶变换。所采用的约定使用角频率 $\\omega$。\n$$\nS_{w}(\\omega) = \\int_{-\\infty}^{\\infty} R_{w}(\\tau) \\exp(-\\mathrm{j}\\omega\\tau) \\,d\\tau = \\int_{-\\infty}^{\\infty} \\delta(\\tau) \\exp(-\\mathrm{j}\\omega\\tau) \\,d\\tau = 1\n$$\n对于传递函数为 $G(s)$ 的稳定 LTI 系统，输出的功率谱密度 $S_{y}(\\omega)$ 与输入的功率谱密度 $S_{w}(\\omega)$ 通过以下公式相关联：\n$$\nS_{y}(\\omega) = |G(\\mathrm{j}\\omega)|^{2} S_{w}(\\omega)\n$$\n代入 $S_{w}(\\omega) = 1$，我们得到输出功率谱密度：\n$$\nS_{y}(\\omega) = |G(\\mathrm{j}\\omega)|^{2}\n$$\n输入噪声 $w(t)$ 是零均值的。由于系统是线性的，输出 $y(t)$ 也是零均值的。因此，平稳输出方差 $\\sigma_{y}^{2}$ 等于输出的均方值 $E[y(t)^{2}]$，也就是零延迟时的输出自相关 $R_{y}(0)$。\n$$\n\\sigma_{y}^{2} = E[y(t)^{2}] = R_{y}(0)\n$$\n根据在指定约定下的 Wiener-Khinchin 定理，自相关函数是功率谱密度的反傅里叶变换，并按 $\\frac{1}{2\\pi}$ 缩放：\n$$\nR_{y}(\\tau) = \\frac{1}{2\\pi} \\int_{-\\infty}^{\\infty} S_{y}(\\omega) \\exp(\\mathrm{j}\\omega\\tau) \\,d\\omega\n$$\n令 $\\tau=0$ 得到方差：\n$$\n\\sigma_{y}^{2} = R_{y}(0) = \\frac{1}{2\\pi} \\int_{-\\infty}^{\\infty} S_{y}(\\omega) \\,d\\omega\n$$\n代入 $S_{y}(\\omega)$ 的表达式：\n$$\n\\sigma_{y}^{2} = \\frac{1}{2\\pi} \\int_{-\\infty}^{\\infty} |G(\\mathrm{j}\\omega)|^{2} \\,d\\omega\n$$\n对于一个稳定的、真的系统 $G(s)$，其哈代空间 $H_{2}$ 范数定义为：\n$$\n\\lVert G\\rVert_{2} = \\sqrt{\\frac{1}{2\\pi} \\int_{-\\infty}^{\\infty} |G(\\mathrm{j}\\omega)|^{2} \\,d\\omega}\n$$\n通过比较 $\\sigma_{y}^{2}$ 和 $\\lVert G\\rVert_{2}$ 的表达式，可以立即看出，平稳输出方差是系统传递函数 $H_{2}$ 范数的平方：\n$$\n\\sigma_{y}^{2} = \\lVert G\\rVert_{2}^{2}\n$$\n\n**第 2 部分：使用格拉姆矩阵计算输出方差**\n\n问题要求使用关于给定状态空间实现 $(A, B, C, D)$ 的可控性格拉姆矩阵的结论来计算 $\\sigma_{y}^{2} = \\lVert G\\rVert_{2}^{2}$。对于一个 $D=0$ 的稳定 LTI 系统，其 $H_{2}$ 范数的平方可以使用可控性格拉姆矩阵 $W_{c}$ 或可观测性格拉姆矩阵 $W_{o}$ 来计算。问题指定使用可控性格拉姆矩阵。相关公式为：\n$$\n\\sigma_{y}^{2} = \\lVert G\\rVert_{2}^{2} = \\mathrm{Tr}(C W_{c} C^{T})\n$$\n其中 $W_{c}$ 是可控性李雅普诺夫方程的唯一对称正定解：\n$$\nA W_{c} + W_{c} A^{T} + B B^{T} = 0\n$$\n系统矩阵为：\n$$\nA=\\begin{bmatrix}-2 & -1\\\\ 1 & -3\\end{bmatrix}, \\quad B=\\begin{bmatrix}1\\\\ 2\\end{bmatrix}, \\quad C=\\begin{bmatrix}1 & 0\\end{bmatrix}\n$$\n首先，我们计算 $B B^{T}$：\n$$\nB B^{T} = \\begin{bmatrix}1\\\\ 2\\end{bmatrix} \\begin{bmatrix}1 & 2\\end{bmatrix} = \\begin{bmatrix}1 & 2\\\\ 2 & 4\\end{bmatrix}\n$$\n令对称矩阵 $W_{c}$ 参数化为：\n$$\nW_{c} = \\begin{bmatrix}q_{1} & q_{2}\\\\ q_{2} & q_{3}\\end{bmatrix}\n$$\n代入李雅普诺夫方程：\n$$\n\\begin{bmatrix}-2 & -1\\\\ 1 & -3\\end{bmatrix} \\begin{bmatrix}q_{1} & q_{2}\\\\ q_{2} & q_{3}\\end{bmatrix} + \\begin{bmatrix}q_{1} & q_{2}\\\\ q_{2} & q_{3}\\end{bmatrix} \\begin{bmatrix}-2 & 1\\\\ -1 & -3\\end{bmatrix} + \\begin{bmatrix}1 & 2\\\\ 2 & 4\\end{bmatrix} = \\begin{bmatrix}0 & 0\\\\ 0 & 0\\end{bmatrix}\n$$\n进行矩阵乘法：\n$$\n\\begin{bmatrix}-2q_{1}-q_{2} & -2q_{2}-q_{3}\\\\ q_{1}-3q_{2} & q_{2}-3q_{3}\\end{bmatrix} + \\begin{bmatrix}-2q_{1}-q_{2} & q_{1}-3q_{2}\\\\ -2q_{2}-q_{3} & q_{2}-3q_{3}\\end{bmatrix} + \\begin{bmatrix}1 & 2\\\\ 2 & 4\\end{bmatrix} = \\begin{bmatrix}0 & 0\\\\ 0 & 0\\end{bmatrix}\n$$\n将矩阵逐元素相加：\n$$\n\\begin{bmatrix}-4q_{1}-2q_{2}+1 & q_{1}-5q_{2}-q_{3}+2\\\\ q_{1}-5q_{2}-q_{3}+2 & 2q_{2}-6q_{3}+4\\end{bmatrix} = \\begin{bmatrix}0 & 0\\\\ 0 & 0\\end{bmatrix}\n$$\n这产生了一个关于 $q_{1}$、$q_{2}$ 和 $q_{3}$ 的三元线性方程组：\n1. $-4q_{1} - 2q_{2} + 1 = 0$\n2. $q_{1} - 5q_{2} - q_{3} + 2 = 0$\n3. $2q_{2} - 6q_{3} + 4 = 0$\n\n由方程 (3)，我们简化得到 $q_{2} - 3q_{3} + 2 = 0$，即 $q_{2} = 3q_{3} - 2$。\n将此代入方程 (1)：\n$-4q_{1} - 2(3q_{3} - 2) + 1 = 0 \\implies -4q_{1} - 6q_{3} + 4 + 1 = 0 \\implies 4q_{1} + 6q_{3} = 5$。\n将 $q_{2}$ 代入方程 (2)：\n$q_{1} - 5(3q_{3} - 2) - q_{3} + 2 = 0 \\implies q_{1} - 15q_{3} + 10 - q_{3} + 2 = 0 \\implies q_{1} - 16q_{3} + 12 = 0 \\implies q_{1} = 16q_{3} - 12$。\n现在将 $q_{1}$ 的表达式代入方程 $4q_{1} + 6q_{3} = 5$：\n$4(16q_{3} - 12) + 6q_{3} = 5 \\implies 64q_{3} - 48 + 6q_{3} = 5 \\implies 70q_{3} = 53 \\implies q_{3} = \\frac{53}{70}$。\n现在我们可以求出 $q_{1}$：\n$q_{1} = 16\\left(\\frac{53}{70}\\right) - 12 = \\frac{8 \\cdot 53}{35} - 12 = \\frac{424}{35} - \\frac{420}{35} = \\frac{4}{35}$。\n我们最终的计算不需要 $q_{2}$，但为了完整性，计算 $q_{2} = 3\\left(\\frac{53}{70}\\right) - 2 = \\frac{159}{70} - \\frac{140}{70} = \\frac{19}{70}$。\n\n可控性格拉姆矩阵为 $W_{c} = \\begin{bmatrix}4/35 & 19/70\\\\ 19/70 & 53/70\\end{bmatrix}$。\n输出方差为 $\\sigma_{y}^{2} = \\mathrm{Tr}(C W_{c} C^{T})$。\n$$\nC W_{c} C^{T} = \\begin{bmatrix}1 & 0\\end{bmatrix} \\begin{bmatrix}4/35 & 19/70\\\\ 19/70 & 53/70\\end{bmatrix} \\begin{bmatrix}1\\\\ 0\\end{bmatrix} = \\begin{bmatrix}4/35 & 19/70\\end{bmatrix} \\begin{bmatrix}1\\\\ 0\\end{bmatrix} = \\frac{4}{35}\n$$\n该 $1 \\times 1$ 矩阵（一个标量）的迹就是其本身的值。\n$$\n\\sigma_{y}^{2} = \\mathrm{Tr}\\left(\\frac{4}{35}\\right) = \\frac{4}{35}\n$$\n平稳输出方差是一个精确的既约分数，符合要求。", "answer": "$$\\boxed{\\frac{4}{35}}$$", "id": "2750143"}, {"introduction": "理论上的连续时间模型必须经过离散化，才能在数字计算机上进行仿真或在卡尔曼滤波器 (Kalman filter) 等算法中实现。然而，简单的离散化方法（如 Euler–Maruyama 方法）会引入与精确解之间的系统性偏差，尤其是在过程噪声协方差的计算上。这个实践练习要求你深入研究离散化过程，量化由近似引起的误差，从而深刻理解在实现随机估计算法时，选择合适的离散化方案对于保证滤波器性能至关重要。[@problem_id:2750135]", "problem": "考虑一个关于过程 $x(t)$ 的连续时间标量线性随机微分方程 (SDE)：\n$$\ndx(t) = A\\,x(t)\\,dt + G\\,dW(t),\n$$\n其中 $A \\in \\mathbb{R}$ 是严格稳定的（即 $A < 0$），$G \\in \\mathbb{R}$ 是一个常标量输入增益，$W(t)$ 是一个标量维纳过程，其扩散强度建模为 $\\mathbb{E}[dW(t)\\,dW(t)] = q_c\\,dt$，其中 $q_c \\ge 0$ 是一个给定常数。在采样时间 $h > 0$ 内的精确离散时间等价形式为\n$$\nx_{k+1} = \\Phi\\,x_k + v_k,\\quad \\Phi = e^{A h},\\quad v_k \\sim \\mathcal{N}(0,Q_d),\n$$\n其中\n$$\nQ_d = \\int_0^h e^{A \\tau}\\,G\\,q_c\\,G\\,e^{A \\tau}\\,d\\tau = G^2\\,q_c\\,\\frac{e^{2Ah}-1}{2A}\\quad \\text{当 }A \\ne 0 \\text{ 时},\n$$\n且当 $A=0$ 时，$Q_d = G^2 q_c\\,h$。相比之下，欧拉-丸山（Euler–Maruyama）离散化方法得到\n$$\nx_{k+1} = F\\,x_k + \\sqrt{h}\\,G\\,\\eta_k,\\quad F = 1 + hA,\\quad \\eta_k \\sim \\mathcal{N}(0,q_c),\n$$\n这对应于一个离散时间过程噪声协方差\n$$\nQ_d^{\\mathrm{EM}} = h\\,G^2\\,q_c.\n$$\n对于给定的先验协方差 $P_k \\ge 0$，精确传播和欧拉-丸山传播的单步协方差传播分别为\n$$\nP_{k+1}^{\\mathrm{exact}} = \\Phi^2\\,P_k + Q_d,\\qquad P_{k+1}^{\\mathrm{EM}} = F^2\\,P_k + Q_d^{\\mathrm{EM}}.\n$$\n您的任务是，对于标量稳定系统 $A$，比较由步长为 $h$ 的欧拉-丸山离散化与精确离散化所引起的协方差传播误差，并量化 $Q_d$ 中的偏差。具体来说，对于每个具有参数 $(A,h,G,q_c,P_k)$ 的测试用例，计算：\n- 过程噪声偏差\n$$\n\\Delta Q \\equiv Q_d^{\\mathrm{EM}} - Q_d,\n$$\n- 单步协方差传播误差\n$$\n\\Delta P \\equiv P_{k+1}^{\\mathrm{EM}} - P_{k+1}^{\\mathrm{exact}} = \\left(F^2 - \\Phi^2\\right)P_k + \\Delta Q,\n$$\n- 归一化一阶偏差比\n$$\n\\rho \\equiv \\frac{\\Delta Q}{h^2\\,(-A)\\,G^2\\,q_c}\\quad \\text{当 }A \\ne 0 \\text{ 时},\n$$\n并且当 $A=0$ 时，定义 $\\rho = \\mathrm{NaN}$。比率 $\\rho$ 用于检验当 $h \\to 0$ 时的渐近偏差预测 $\\Delta Q \\approx -A\\,G^2\\,q_c\\,h^2$。\n\n仅使用此处给出的标量公式和随机微积分的标准定义。推导必须从连续时间 SDE 开始，通过严格的离散化和协方差传播进行，避免任何未经证明的捷径。\n\n测试套件：\n- 用例 1（一般正常路径）：$(A,h,G,q_c,P_k) = (-0.7,\\,0.2,\\,1.5,\\,0.8,\\,1.1)$。\n- 用例 2（小步长渐近性）：$(A,h,G,q_c,P_k) = (-0.7,\\,10^{-4},\\,1.5,\\,0.8,\\,1.1)$。\n- 用例 3（近零漂移）：$(A,h,G,q_c,P_k) = (-10^{-10},\\,0.2,\\,1.5,\\,0.8,\\,1.1)$。\n- 用例 4（刚性动力学）：$(A,h,G,q_c,P_k) = (-5.0,\\,0.05,\\,0.7,\\,2.0,\\,3.0)$。\n\n要求：\n- 实现一个程序，为每个测试用例计算三元组 $[\\Delta Q,\\,\\Delta P,\\,\\rho]$，使用精确的 $Q_d$（并安全地处理 $A \\to 0$ 的极限情况）。\n- 输出格式：您的程序应生成单行输出，其中包含一个由方括号括起来的逗号分隔列表形式的结果，每个元素对应一个测试用例，其本身是 $[\\Delta Q, \\Delta P, \\rho]$ 形式的列表。例如，一个有效的输出形式为“[[a,b,c],[d,e,f],[g,h,i],[j,k,l]]”，其中包含数值条目。\n- 在此问题中，所有量均为无量纲标量。", "solution": "此问题要求对一个标量线性随机微分方程（SDE）在两种离散化方案（精确方法和一阶欧拉-丸山方法）下的协方差传播进行定量比较。我们需要评估过程噪声协方差的差异以及由此产生的单步状态协方差传播误差。\n\n连续时间动力学由以下 SDE 给出：\n$$\ndx(t) = A\\,x(t)\\,dt + G\\,dW(t)\n$$\n其中 $A < 0$ 是一个稳定的漂移系数，$G$ 是一个输入增益，$W(t)$ 是一个维纳过程，其扩散强度为 $q_c$，使得增量方差为 $\\mathbb{E}[(dW(t))^2] = q_c\\,dt$。\n\n首先，我们考虑在时间步长 $h$ 内的精确离散化。SDE 的齐次部分 $dx(t) = A\\,x(t)\\,dt$ 的解是 $x(t) = e^{A(t-t_0)} x(t_0)$。对完整的 SDE 使用常数变易法，给定 $t_k$ 时刻的状态，在 $t_k+h$ 时刻的解为：\n$$\nx(t_k+h) = e^{Ah} x(t_k) + \\int_{t_k}^{t_k+h} e^{A(t_k+h - \\tau)} G\\,dW(\\tau)\n$$\n令 $x_k \\equiv x(t_k)$。于是我们有离散时间模型：\n$$\nx_{k+1} = \\Phi\\,x_k + v_k\n$$\n其中状态转移是 $\\Phi = e^{Ah}$，过程噪声项是 $v_k = \\int_{0}^{h} e^{A(h - s)} G\\,dW(t_k+s)$。噪声过程 $v_k$ 是一个零均值高斯随机变量，因为它是高斯过程的线性变换。其协方差 $Q_d$ 通过伊藤等距性（Itō isometry）计算得出：\n$$\nQ_d = \\mathbb{E}[v_k^2] = \\mathbb{E}\\left[\\left(\\int_0^h e^{A(h-\\tau)} G\\,dW(\\tau)\\right)^2\\right] = \\int_0^h \\left(e^{A(h-\\tau)} G\\right)^2 q_c\\,d\\tau\n$$\n由于所有项都是标量，这可以简化。令 $s = h-\\tau$，则 $ds = -d\\tau$。积分限从 $\\tau=0 \\to h$ 变为 $s=h \\to 0$。\n$$\nQ_d = G^2 q_c \\int_h^0 e^{2As} (-ds) = G^2 q_c \\int_0^h e^{2As}\\,ds\n$$\n对于 $A \\ne 0$，积分计算结果为：\n$$\nQ_d = G^2 q_c \\left[ \\frac{e^{2As}}{2A} \\right]_0^h = G^2 q_c \\frac{e^{2Ah}-1}{2A}\n$$\n在 $A \\to 0$ 的极限情况下，我们使用洛必达法则或指数的泰勒级数展开 $e^{2Ah} \\approx 1 + 2Ah$。这得到：\n$$\n\\lim_{A \\to 0} Q_d = G^2 q_c \\lim_{A \\to 0} \\frac{2h e^{2Ah}}{2} = G^2 q_c h\n$$\n这对应于随机游走积分的情况。\n\n接下来，我们分析欧拉-丸山离散化。该方法通过将系数在区间 $[t_k, t_k+h]$ 上视为常数来近似 SDE：\n$$\nx_{k+1} \\approx x_k + (A x_k) h + G (W(t_{k+1}) - W(t_k))\n$$\n这给出了离散时间模型：\n$$\nx_{k+1} = F\\,x_k + w_k^{\\mathrm{EM}}\n$$\n其中近似状态转移是 $F = 1 + Ah$，噪声项是 $w_k^{\\mathrm{EM}} = G\\,\\Delta W_k$，其中 $\\Delta W_k = W(t_{k+1}) - W(t_k)$。该噪声项的协方差 $Q_d^{\\mathrm{EM}}$ 是：\n$$\nQ_d^{\\mathrm{EM}} = \\mathbb{E}[(w_k^{\\mathrm{EM}})^2] = G^2 \\mathbb{E}[(\\Delta W_k)^2] = G^2 q_c h\n$$\n这是对真实离散过程噪声协方差的一阶近似。\n\n有了这些公式，我们就可以处理所要求的具体量。\n\n过程噪声偏差 $\\Delta Q$ 是近似和精确离散噪声协方差之间的差值：\n$$\n\\Delta Q \\equiv Q_d^{\\mathrm{EM}} - Q_d = G^2 q_c h - G^2 q_c \\frac{e^{2Ah}-1}{2A} = G^2 q_c \\left(h - \\frac{e^{2Ah}-1}{2A}\\right)\n$$\n此公式在 $A \\ne 0$ 时有效。对于 $A=0$，两个协方差均为 $G^2 q_c h$，因此 $\\Delta Q = 0$。为了在 $A$ 接近零时保持数值稳定性，必须使用能够精确计算小 $x$ 的 $e^x-1$ 的库函数。\n\n单步协方差传播误差 $\\Delta P$ 比较了使用两种方法从先验 $P_k$ 更新的状态协方差。传播方程为：\n$$\nP_{k+1}^{\\mathrm{exact}} = \\Phi^2 P_k + Q_d = (e^{Ah})^2 P_k + Q_d\n$$\n$$\nP_{k+1}^{\\mathrm{EM}} = F^2 P_k + Q_d^{\\mathrm{EM}} = (1+Ah)^2 P_k + Q_d^{\\mathrm{EM}}\n$$\n误差是这两者之差：\n$$\n\\Delta P = P_{k+1}^{\\mathrm{EM}} - P_{k+1}^{\\mathrm{exact}} = \\left( (1+Ah)^2 - (e^{Ah})^2 \\right) P_k + (Q_d^{\\mathrm{EM}} - Q_d)\n$$\n$$\n\\Delta P = \\left( F^2 - \\Phi^2 \\right) P_k + \\Delta Q\n$$\n\n最后，我们分析归一化一阶偏差比 $\\rho$。该比率的目的是验证小 $h$ 时噪声偏差 $\\Delta Q$ 的渐近行为。对 $\\Delta Q$中的指数项进行泰勒级数展开：\n$$\ne^{2Ah} = 1 + 2Ah + \\frac{(2Ah)^2}{2!} + \\frac{(2Ah)^3}{3!} + O(h^4) = 1 + 2Ah + 2A^2h^2 + \\frac{4}{3}A^3h^3 + O(h^4)\n$$\n将此代入 $Q_d$ 的表达式中：\n$$\nQ_d = G^2 q_c \\frac{(1 + 2Ah + 2A^2h^2 + O(h^3)) - 1}{2A} = G^2 q_c (h + Ah^2 + O(h^3))\n$$\n那么偏差 $\\Delta Q$ 是：\n$$\n\\Delta Q = G^2 q_c h - G^2 q_c (h + Ah^2 + O(h^3)) = -A G^2 q_c h^2 + O(h^3)\n$$\n问题指出，对于小 $h$，此偏差约为 $\\Delta Q \\approx -A\\,G^2\\,q_c\\,h^2$。我们的推导证实了这一主导项。比率 $\\rho$被定义用来归一化此偏差：\n$$\n\\rho \\equiv \\frac{\\Delta Q}{h^2\\,(-A)\\,G^2\\,q_c}\n$$\n当 $h \\to 0$ 时，我们预期 $\\rho \\to 1$。对于 $A=0$，分母为零，因此 $\\rho$ 未定义，此处指定为非数值（NaN）。\n\n实现时需要小心处理 $A \\approx 0$ 的情况，以避免在计算 $Q_d$ 时分数分子中出现灾难性抵消和除以一个小数。使用 `numpy.expm1(2*A*h)` 是正确的数值处理程序。\n\n将对每个测试用例执行以下计算：\n1.  计算 $\\Phi = e^{Ah}$ 和 $F = 1+Ah$。\n2.  计算 $Q_d^{\\mathrm{EM}} = h G^2 q_c$。\n3.  计算 $Q_d$：如果 $A=0$，$Q_d = Q_d^{\\mathrm{EM}}$；否则，$Q_d = G^2 q_c (e^{2Ah}-1)/(2A)$。\n4.  计算 $\\Delta Q = Q_d^{\\mathrm{EM}} - Q_d$。\n5.  计算 $\\Delta P = (F^2 - \\Phi^2)P_k + \\Delta Q$。\n6.  计算 $\\rho$：如果 $A=0$，$\\rho=\\text{NaN}$；否则，$\\rho = \\Delta Q / (h^2 (-A) G^2 q_c)$。\n\n这些计算将为指定的测试用例提供所需的三元组 $[\\Delta Q, \\Delta P, \\rho]$。", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes the covariance propagation error between exact and Euler-Maruyama\n    discretizations for a scalar linear SDE.\n    \"\"\"\n    test_cases = [\n        # Case 1 (general happy path): (A, h, G, q_c, P_k)\n        (-0.7, 0.2, 1.5, 0.8, 1.1),\n        # Case 2 (small-step asymptotics): (A, h, G, q_c, P_k)\n        (-0.7, 1e-4, 1.5, 0.8, 1.1),\n        # Case 3 (near-zero drift): (A, h, G, q_c, P_k)\n        (-1e-10, 0.2, 1.5, 0.8, 1.1),\n        # Case 4 (stiff dynamics): (A, h, G, q_c, P_k)\n        (-5.0, 0.05, 0.7, 2.0, 3.0),\n    ]\n\n    results = []\n    for case in test_cases:\n        A, h, G, q_c, P_k = case\n\n        # Exact discretization parameters\n        Phi = np.exp(A * h)\n\n        # Euler-Maruyama discretization parameters\n        F = 1.0 + A * h\n        Qd_EM = h * (G**2) * q_c\n\n        # Calculate exact discrete noise covariance Qd\n        # Use a safe method for A approaching zero to avoid numerical instability.\n        if A == 0.0:\n            # The limit as A approaches 0\n            Qd = h * (G**2) * q_c\n        else:\n            # Use np.expm1 for precision with small arguments\n            # expm1(x) computes exp(x) - 1\n            # Qd = G^2 * q_c * (exp(2*A*h) - 1) / (2*A)\n            Qd = (G**2) * q_c * np.expm1(2 * A * h) / (2 * A)\n\n        # 1. Compute the process noise bias\n        delta_Q = Qd_EM - Qd\n\n        # 2. Compute the one-step covariance propagation error\n        delta_P = (F**2 - Phi**2) * P_k + delta_Q\n\n        # 3. Compute the normalized first-order bias ratio\n        # Denominator for rho can be zero if A=0, G=0, or q_c=0. Problem states A  0.\n        if A == 0.0:\n            rho = np.nan\n        else:\n            denominator_rho = (h**2) * (-A) * (G**2) * q_c\n            if denominator_rho == 0:\n                # This case happens if G or qc are zero, resulting in a 0/0 form if delta_Q is also 0.\n                # If delta_Q has higher order terms, the limit might be non-trivial.\n                # Given problem constraints A != 0, h > 0, qc >= 0, G!=0 (implicitly),\n                # we consider the ratio to be undefined if the expected leading term is zero.\n                rho = np.nan\n            else:\n                rho = delta_Q / denominator_rho\n        \n        results.append([delta_Q, delta_P, rho])\n\n    # Format the final output string as specified\n    # The format \"[a,b,c]\" for each result can be achieved by f-string formatting\n    # of the inner list directly, but list-comprehension with str() is safer.\n    result_strings = [f\"[{','.join(map(str, res))}]\" for res in results]\n    final_output = f\"[{','.join(result_strings)}]\"\n    print(final_output)\n\nsolve()\n```", "id": "2750135"}]}