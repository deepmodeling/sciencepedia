{"hands_on_practices": [{"introduction": "掌握任何一种标准型，第一步都是通过一个清晰的例子来熟悉其构造过程。本练习将引导你完成从一个给定的传递函数到其可观测标准型状态空间表示的转换[@problem_id:2729169]。通过这个实践，你将直接看到传递函数的分母和分子多项式系数是如何精确地映射到状态空间矩阵 $(A_o, B, C)$ 的条目中的，从而为更高级的分析打下坚实的基础。", "problem": "考虑单输入单输出 (SISO) 线性时不变 (LTI) 传递函数\n$$\nG(s) \\;=\\; \\frac{2s^{2}+3s+5}{s^{3}+4s^{2}+6s+3}.\n$$\n使用与分母多项式相关的可观测标准型，构建一个实现 $G(s)$ 的最小状态空间实现，其矩阵为 $(A_{o},B,C,D)$，其中 $A_{o}$ 为可观测伴随形式，且由于严格真有理性，$D=0$。从基本的状态空间到传递函数的恒等式\n$$\nG(s) \\;=\\; C\\,(sI - A)^{-1} B \\;+\\; D,\n$$\n出发，从分母多项式确定 $A_{o}$，然后通过 $C\\operatorname{adj}(sI-A_{o})B$ 匹配分子多项式来显式计算输入向量 $B$。最后，通过从所实现的 $(A_{o},B,C,D)$ 直接计算 $G(s)$ 来验证你的 $B$。\n\n作为最终答案，仅报告向量 $B$ 的元素，形式为单个行矩阵 $(b_{1}\\;\\;b_{2}\\;\\;b_{3})$，元素为精确整数。无须四舍五入，不涉及物理单位。", "solution": "我们从单输入单输出 (SISO) 线性时不变 (LTI) 系统的状态空间到传递函数的恒等式开始，\n$$\nG(s) \\;=\\; C\\,(sI - A)^{-1} B \\;+\\; D,\n$$\n该恒等式是通过在状态空间描述 $\\dot{x}(t)=A x(t) + B u(t)$, $y(t)=C x(t) + D u(t)$ 中消去状态 $x(t)$，并在零初始条件下取拉普拉斯变换得到的。对于一个严格真有理传递函数，我们有 $D=0$。\n\n分母多项式为\n$$\nD(s) \\;=\\; s^{3} + 4 s^{2} + 6 s + 3 \\;=\\; s^{3} + a_{2} s^{2} + a_{1} s + a_{0},\n$$\n其系数为 $a_{2}=4$，$a_{1}=6$，$a_{0}=3$。可观测标准（伴随）形式具有\n$$\nA_{o} \\;=\\;\n\\begin{bmatrix}\n0 & 0 & -a_{0} \\\\\n1 & 0 & -a_{1} \\\\\n0 & 1 & -a_{2}\n\\end{bmatrix}\n\\;=\\;\n\\begin{bmatrix}\n0 & 0 & -3 \\\\\n1 & 0 & -6 \\\\\n0 & 1 & -4\n\\end{bmatrix},\n\\qquad\nC \\;=\\; \\begin{bmatrix} 0 & 0 & 1 \\end{bmatrix},\n\\qquad\nD \\;=\\; 0,\n$$\n以及一个待定的 $B \\in \\mathbb{R}^{3}$，它将通过分子匹配来确定。\n\n根据伴随矩阵恒等式，\n$$\n(sI - A_{o})^{-1} \\;=\\; \\frac{\\operatorname{adj}(sI - A_{o})}{\\det(sI - A_{o})},\n$$\n因此\n$$\nG(s) \\;=\\; \\frac{C\\,\\operatorname{adj}(sI - A_{o})\\,B}{\\det(sI - A_{o})}.\n$$\n首先，我们验证 $\\det(sI - A_{o})$ 是否等于给定的分母。计算\n$$\nsI - A_{o} \\;=\\;\n\\begin{bmatrix}\ns & 0 & 3 \\\\\n-1 & s & 6 \\\\\n0 & -1 & s+4\n\\end{bmatrix}.\n$$\n其行列式为\n\\begin{align*}\n\\det(sI - A_{o})\n&= s\\,\\det\\!\\begin{bmatrix} s & 6 \\\\ -1 & s+4 \\end{bmatrix}\n\\;+\\; 3\\,\\det\\!\\begin{bmatrix} -1 & s \\\\ 0 & -1 \\end{bmatrix} \\\\\n&= s\\,(s(s+4) - 6(-1)) \\;+\\; 3\\,((-1)(-1) - 0\\cdot s) \\\\\n&= s\\,(s^{2} + 4s + 6) \\;+\\; 3 \\\\\n&= s^{3} + 4 s^{2} + 6 s + 3 \\;=\\; D(s),\n\\end{align*}\n符合要求。\n\n因此 $G(s)$ 的分子必须等于 $C\\,\\operatorname{adj}(sI - A_{o})\\,B$。由于 $C=\\begin{bmatrix}0 & 0 & 1\\end{bmatrix}$，只有 $\\operatorname{adj}(sI - A_{o})$ 的第三行有贡献。因为 $\\operatorname{adj}(M)$ 是 $M$ 的代数余子式矩阵的转置，所以 $\\operatorname{adj}(sI - A_{o})$ 的第三行由 $sI - A_{o}$ 的代数余子式的第三列给出。为简洁起见，记 $M = sI - A_{o}$。相关的代数余子式为：\n\\begin{align*}\nC_{1,3} &= (-1)^{1+3}\\,\\det\\!\\begin{bmatrix} -1 & s \\\\ 0 & -1 \\end{bmatrix}\n= (+1)\\,( (-1)(-1) - s\\cdot 0 ) \\;=\\; 1, \\\\\nC_{2,3} &= (-1)^{2+3}\\,\\det\\!\\begin{bmatrix} s & 0 \\\\ 0 & -1 \\end{bmatrix}\n= (-1)\\,( s(-1) - 0\\cdot 0 ) \\;=\\; s, \\\\\nC_{3,3} &= (-1)^{3+3}\\,\\det\\!\\begin{bmatrix} s & 0 \\\\ -1 & s \\end{bmatrix}\n= (+1)\\,( s\\cdot s - 0\\cdot (-1) ) \\;=\\; s^{2}.\n\\end{align*}\n因此，\n$$\nC\\,\\operatorname{adj}(sI - A_{o}) \\;=\\; \\begin{bmatrix} C_{1,3} & C_{2,3} & C_{3,3} \\end{bmatrix}\n\\;=\\; \\begin{bmatrix} 1 & s & s^{2} \\end{bmatrix}.\n$$\n设 $B = \\begin{bmatrix} b_{1} \\\\ b_{2} \\\\ b_{3} \\end{bmatrix}$。则分子多项式为\n$$\nC\\,\\operatorname{adj}(sI - A_{o})\\,B \\;=\\; \\begin{bmatrix} 1 & s & s^{2} \\end{bmatrix}\n\\begin{bmatrix} b_{1} \\\\ b_{2} \\\\ b_{3} \\end{bmatrix} \\;=\\; b_{1} + b_{2}\\,s + b_{3}\\,s^{2}.\n$$\n与给定的分子 $2 s^{2} + 3 s + 5$ 进行匹配，可得\n$$\nb_{3} \\;=\\; 2, \\qquad b_{2} \\;=\\; 3, \\qquad b_{1} \\;=\\; 5,\n$$\n因此\n$$\nB \\;=\\; \\begin{bmatrix} 5 \\\\ 3 \\\\ 2 \\end{bmatrix}.\n$$\n\n通过直接计算进行验证：当\n$$\nA_{o} \\;=\\;\n\\begin{bmatrix}\n0 & 0 & -3 \\\\\n1 & 0 & -6 \\\\\n0 & 1 & -4\n\\end{bmatrix},\\quad\nB \\;=\\; \\begin{bmatrix} 5 \\\\ 3 \\\\ 2 \\end{bmatrix},\\quad\nC \\;=\\; \\begin{bmatrix} 0 & 0 & 1 \\end{bmatrix},\\quad\nD \\;=\\; 0,\n$$\n我们有\n\\begin{align*}\nG(s) &= \\frac{C\\,\\operatorname{adj}(sI - A_{o})\\,B}{\\det(sI - A_{o})}\n= \\frac{\\begin{bmatrix} 1 & s & s^{2} \\end{bmatrix} \\begin{bmatrix} 5 \\\\ 3 \\\\ 2 \\end{bmatrix}}{s^{3} + 4 s^{2} + 6 s + 3} \\\\\n&= \\frac{5 + 3 s + 2 s^{2}}{s^{3} + 4 s^{2} + 6 s + 3}\n= \\frac{2 s^{2} + 3 s + 5}{s^{3} + 4 s^{2} + 6 s + 3},\n\\end{align*}\n这与给定的 $G(s)$ 相匹配。这证实了 $B$ 和该实现的正确性。", "answer": "$$\\boxed{\\begin{pmatrix}5 & 3 & 2\\end{pmatrix}}$$", "id": "2729169"}, {"introduction": "状态空间模型不仅是一种数学表示，它还揭示了系统的内部结构特性。这个练习旨在深化你的理解，探讨当传递函数中出现极点-零点对消时，状态空间模型会发生什么[@problem_id:2729221]。你将通过一个具体的例子发现，这种对消如何导致可观测性的丧失，并学习区分完全可观测性与在控制设计中同样至关重要的“可检测性”概念。", "problem": "考虑一个由严格真传递函数描述的单输入单输出 (SISO) 线性时不变 (LTI) 系统。从基本定义出发，即任何具有矩阵 $A$、$B$、$C$ 和 $D$ 的状态空间实现都能导出传递函数 $G(s) = C\\,(sI - A)^{-1} B + D$。构建并分析一个例子，其中一个有限传输零点抵消了虚轴上的一个开环极点。\n\n1) 构建一个传递函数\n$$\nG(s) \\;=\\; \\frac{N(s)}{D(s)}\n$$\n其中 $D(s) = s\\,(s+1)\\,(s+3)$ 且 $N(s) = s\\,(s+2)$，并明确验证一个零点抵消了虚轴上的一个极点。将该有理函数化简为其最小形式。\n\n2) 使用第一性原理和状态空间到传递函数的映射的预解式恒等式，推导未化简的 $G(s)$ 的一个可观测标准型（观测器标准型）实现 $(A,B,C,D)$，其结构形式如下：\n- $A$ 是与首一分母 $D(s) = s^{3} + a_{2} s^{2} + a_{1} s + a_{0}$ 相关联的可控伴随矩阵的转置，\n- $C$ 选择最后一个状态，并且\n- $B$ 待求解，以使 $C\\,(sI - A)^{-1} B$ 与给定的分子 $N(s)$ 相匹配。\n\n具体来说，在符号上推导出 $C\\,(sI - A)^{-1} B$ 后，通过系数匹配来确定 $B$ 的元素。\n\n3) 使用定义，即如果一对 $(C,A)$ 的可观测性矩阵是行满秩的，则其是可观测的，计算你所推导的 $(C,A)$ 的可观测性矩阵，并确定该实现是否完全可观测。然后，使用定义，即如果一个系统的所有不可观测模态（若有）都具有严格为负的实部，则该系统是可检测的，在此案例中讨论可检测性与完全可观测性的关系，阐明哪个性质成立及其原因。\n\n4) 最后，报告在你的例子中被零点抵消的极点的实部（一个标量）。最终答案必须是一个实数，无需四舍五入，也无需单位。", "solution": "该问题要求对一个单输入单输出 (SISO) 线性时不变 (LTI) 系统进行多步分析，从其传递函数开始，接着进行特定的状态空间实现，最后分析其结构性质，如可观测性和可检测性。\n\n**第 1 部分：传递函数分析**\n指定的传递函数为 $G(s) = \\frac{N(s)}{D(s)}$。\n分母多项式为 $D(s) = s(s+1)(s+3) = s(s^2+4s+3) = s^3+4s^2+3s$。$D(s)=0$ 的根给出系统的极点，即 $p_1 = 0$、$p_2 = -1$ 和 $p_3 = -3$。\n分子多项式为 $N(s) = s(s+2) = s^2+2s$。$N(s)=0$ 的根给出系统的有限传输零点，即 $z_1 = 0$ 和 $z_2 = -2$。\n\n传递函数为：\n$$\nG(s) = \\frac{s(s+2)}{s(s+1)(s+3)}\n$$\n我们观察到分子和分母中有一个公因子 $s$。这对应于 $s=0$ 处的零点和 $s=0$ 处的极点的对消。极点 $s=0$ 位于虚轴上，在原点处。\n为了得到传递函数的最小形式，我们抵消这个公因子：\n$$\nG_{red}(s) = \\frac{s+2}{(s+1)(s+3)} = \\frac{s+2}{s^2+4s+3}\n$$\n这个最小传递函数描述了可控且可观测子系统的输入-输出行为。$s=0$ 处的极零点对消表明，原始的三阶系统在 $s=0$ 处有一个模态，该模态是不可控或不可观测的。\n\n**第 2 部分：可观测标准型实现**\n我们的任务是为未化简的三阶传递函数 $G(s) = \\frac{s^2+2s}{s^3+4s^2+3s}$ 找到一个状态空间实现 $(A,B,C,D)$。\n由于传递函数是严格真的（分子阶数小于分母阶数），直接馈通矩阵 $D$ 是零标量，即 $D=0$。\n\n分母是 $D(s) = s^3 + 4s^2 + 3s + 0$。将其与首一形式 $D(s) = s^3 + a_2 s^2 + a_1 s + a_0$ 进行比较，我们确定系数为：$a_2=4$，$a_1=3$ 和 $a_0=0$。\n\n问题指定状态矩阵 $A$ 的结构为可控伴随矩阵的转置。此分母对应的可控伴随矩阵 $A_c$ 为：\n$$\nA_c = \\begin{pmatrix} 0 & 1 & 0 \\\\ 0 & 0 & 1 \\\\ -a_0 & -a_1 & -a_2 \\end{pmatrix} = \\begin{pmatrix} 0 & 1 & 0 \\\\ 0 & 0 & 1 \\\\ 0 & -3 & -4 \\end{pmatrix}\n$$\n状态矩阵 $A$ 是其转置：\n$$\nA = A_c^T = \\begin{pmatrix} 0 & 0 & 0 \\\\ 1 & 0 & -3 \\\\ 0 & 1 & -4 \\end{pmatrix}\n$$\n这是一个三阶系统的标准可观测标准型矩阵。\n\n输出矩阵 $C$ 被指定为“选择最后一个状态”。对于一个状态向量为 $x$ 的三阶系统，这意味着 $y=x_3$，所以 $C$ 由下式给出：\n$$\nC = \\begin{pmatrix} 0 & 0 & 1 \\end{pmatrix}\n$$\n输入矩阵 $B$ 是一个未知的列向量 $B = \\begin{pmatrix} b_0 \\\\ b_1 \\\\ b_2 \\end{pmatrix}$。我们通过推导符号传递函数 $C(sI-A)^{-1}B$ 并将其与 $G(s)$ 相等来确定其元素。\n在这种可观测标准型下的实现所对应的传递函数已知为：\n$$\nG(s) = C(sI-A)^{-1}B = \\frac{b_2 s^2 + b_1 s + b_0}{s^3 + a_2 s^2 + a_1 s + a_0}\n$$\n为了验证这一点，我们计算 $C\\,\\operatorname{adj}(sI-A)$。我们有 $sI-A = \\begin{pmatrix} s & 0 & 0 \\\\ -1 & s & 3 \\\\ 0 & -1 & s+4 \\end{pmatrix}$。其伴随矩阵是：\n$$\n\\operatorname{adj}(sI-A) = \\begin{pmatrix} s^2+4s+3 & 0 & 0 \\\\ s+4 & s(s+4) & -3s \\\\ 1 & s & s^2 \\end{pmatrix}^T = \\begin{pmatrix} s^2+4s+3 & s+4 & 1 \\\\ 0 & s^2+4s & s \\\\ 0 & -3s & s^2 \\end{pmatrix}^T = \\begin{pmatrix} s^2+4s+3 & 0 & 0 \\\\ s+4 & s^2+4s & -3s \\\\ 1 & s & s^2 \\end{pmatrix}\n$$\n然后，\n$$\nC \\cdot \\operatorname{adj}(sI-A) = \\begin{pmatrix} 0 & 0 & 1 \\end{pmatrix} \\begin{pmatrix} s^2+4s+3 & 0 & 0 \\\\ s+4 & s^2+4s & -3s \\\\ 1 & s & s^2 \\end{pmatrix} = \\begin{pmatrix} 1 & s & s^2 \\end{pmatrix}\n$$\n现在，乘以 $B$：\n$$\nC \\cdot \\operatorname{adj}(sI-A) \\cdot B = \\begin{pmatrix} 1 & s & s^2 \\end{pmatrix} \\begin{pmatrix} b_0 \\\\ b_1 \\\\ b_2 \\end{pmatrix} = b_0 + b_1 s + b_2 s^2\n$$\n所以，传递函数的分子是 $b_2s^2+b_1s+b_0$。我们将其与给定的分子 $N(s) = s^2+2s = 1 \\cdot s^2 + 2 \\cdot s + 0$ 相等。\n比较系数：\n$b_2 = 1$\n$b_1 = 2$\n$b_0 = 0$\n因此，输入矩阵为：\n$$\nB = \\begin{pmatrix} 0 \\\\ 2 \\\\ 1 \\end{pmatrix}\n$$\n\n**第 3 部分：可观测性与可检测性**\n如果系统实现 $(C,A)$ 的可观测性矩阵 $\\mathcal{O}$ 是满秩的，则该实现是可观测的。对于这个三阶系统，可观测性矩阵是：\n$$\n\\mathcal{O} = \\begin{pmatrix} C \\\\ CA \\\\ CA^2 \\end{pmatrix}\n$$\n我们计算必要的组成部分：\n$C = \\begin{pmatrix} 0 & 0 & 1 \\end{pmatrix}$\n$CA = \\begin{pmatrix} 0 & 0 & 1 \\end{pmatrix} \\begin{pmatrix} 0 & 0 & 0 \\\\ 1 & 0 & -3 \\\\ 0 & 1 & -4 \\end{pmatrix} = \\begin{pmatrix} 0 & 1 & -4 \\end{pmatrix}$\n$CA^2 = (CA)A = \\begin{pmatrix} 0 & 1 & -4 \\end{pmatrix} \\begin{pmatrix} 0 & 0 & 0 \\\\ 1 & 0 & -3 \\\\ 0 & 1 & -4 \\end{pmatrix} = \\begin{pmatrix} 1 & -4 & 13 \\end{pmatrix}$\n\n可观测性矩阵为：\n$$\n\\mathcal{O} = \\begin{pmatrix} 0 & 0 & 1 \\\\ 0 & 1 & -4 \\\\ 1 & -4 & 13 \\end{pmatrix}\n$$\n为了检查是否满秩，我们计算其行列式：\n$$\n\\det(\\mathcal{O}) = 0 \\cdot \\det\\begin{pmatrix} 1 & -4 \\\\ -4 & 13 \\end{pmatrix} - 0 \\cdot \\det\\begin{pmatrix} 0 & -4 \\\\ 1 & 13 \\end{pmatrix} + 1 \\cdot \\det\\begin{pmatrix} 0 & 1 \\\\ 1 & -4 \\end{pmatrix} = 1 \\cdot (0 \\cdot (-4) - 1 \\cdot 1) = -1\n$$\n由于 $\\det(\\mathcal{O}) = -1 \\neq 0$，该矩阵满秩（秩为 3）。因此，实现 $(C,A)$ 是完全可观测的。\n\n如果一个系统的所有不可观测模态都具有严格为负的实部（即它们是稳定的），则该系统是可检测的。一个模态对应于 $A$ 的一个特征值 $\\lambda$。由于我们的实现是完全可观测的，因此没有不可观测的模态。不可观测模态的集合是空的。因此，可检测性的条件被平凡地满足了。完全可观测性是比可检测性更强的条件。在这个具体案例中，两个性质都成立。$s=0$ 处的极零点对消表明该实现必须是非最小的。由于它是可观测的，它必须是不可控的。对应于被抵消极点的模态 $\\lambda=0$，在此实现中是一个不可控模态。\n\n**第 4 部分：报告被抵消极点的实部**\n从第 1 部分可知，传递函数在 $s=0$、$s=-1$ 和 $s=-3$ 处有极点，在 $s=0$ 和 $s=-2$ 处有零点。被零点抵消的极点是 $s=0$ 处的极点。复数 $s=0$ 可以写作 $0 + j0$。该极点的实部是 $0$。", "answer": "$$\n\\boxed{0}\n$$", "id": "2729221"}, {"introduction": "理论的最终检验在于实践，对于控制系统更是如此，计算实践是连接抽象概念与工程应用的桥梁。本练习将可观测标准型与其对偶——可控标准型联系起来，要求你通过编程来构建这两种形式[@problem_id:2729219]。更重要的是，你将计算连接它们之间的相似变换矩阵 $T$，并数值验证它们的等价性，从而将状态空间理论牢固地建立在计算验证的基础之上。", "problem": "给定单输入单输出的线性时不变系统，该系统由严格真传递函数 $G(s) = \\dfrac{N(s)}{D(s)}$ 指定，其中 $D(s)$ 是一个 $n$ 次的首一多项式，$N(s)$ 的次数至多为 $n-1$。设 $D(s) = s^n + a_{n-1} s^{n-1} + \\cdots + a_1 s + a_0$ 且 $N(s) = b_0 + b_1 s + \\cdots + b_{n-1} s^{n-1}$。系数按升幂排列，在数组 $[a_0, a_1, \\ldots, a_{n-1}]$ 和 $[b_0, b_1, \\ldots, b_{n-1}]$ 中给出。\n\n从状态空间中传递函数的基本定义 $G(s) = C (s I - A)^{-1} B + D$ 以及状态空间模型的可控性和可观测性的核心定义出发，您必须：\n\n- 为每个给定的测试用例，构建可控标准型实现 $(A_c, B_c, C_c, D_c)$ 和可观测标准型实现 $(A_o, B_o, C_o, D_o)$，以实现相同的 $G(s)$。标准型实现必须与给定的多项式以及由分母多项式 $D(s)$ (首一)和分子多项式 $N(s)$ 所隐含的标准伴随矩阵结构一致，且 $D_c = 0$ 和 $D_o = 0$。\n- 计算一个相似变换矩阵 $T \\in \\mathbb{R}^{n \\times n}$，该矩阵满足最小实现之间等价性的三个定义方程：\n  1. $A_o \\, T = T \\, A_c$,\n  2. $B_o = T \\, B_c$,\n  3. $C_o = C_c \\, T^{-1}$。\n- 通过检查三个方程的残差的弗罗贝尼乌斯范数是否严格小于容差 $\\tau = 10^{-9}$，来数值验证等价性。\n- 您的程序必须为每个测试用例输出一个布尔值，表示是否在容差 $\\tau$ 内同时满足所有三个条件。\n\n测试套件和格式要求：\n\n- 使用以下测试套件，其中每一项是指定 $[a_0, a_1, \\ldots, a_{n-1}]$ 和 $[b_0, b_1, \\ldots, b_{n-1}]$ 的数组对：\n  - 用例 $1$ (正常路径，4次): $a = [4.0, 3.0, 5.0, 2.0]$, $b = [1.0, 0.0, 2.0, 3.0]$。\n  - 用例 $2$ (相对阶大于1，4次): $a = [2.0, 1.0, 0.25, 0.5]$, $b = [1.0, 1.0, 0.0, 0.0]$。\n  - 用例 $3$ (a_2 系数为零，3次): $a = [0.5, 2.0, 0.0]$, $b = [0.75, 0.0, 1.25]$。\n  - 用例 $4$ (更高阶，5次): $a = [1.0, 0.0, 3.0, 0.0, 1.0]$, $b = [0.0, 1.0, 0.0, 2.0, 1.0]$。\n  - 用例 $5$ (常数项 a_0 为零，3次): $a = [0.0, 0.5, 2.0]$, $b = [1.0, -0.5, 0.25]$。\n- 所有计算都是无量纲的；没有物理单位。\n- 最终输出格式必须是单行，包含所有用例的结果，形式为方括号内以逗号分隔的列表，例如 $[{\\tt True},{\\tt False},\\ldots]$。\n\n您的程序必须按指定顺序生成仅包含一行布尔结果的输出。不允许有任何其他输出。", "solution": "该问题要求验证一个线性时不变（LTI）系统的两种标准状态空间实现——可控标准型和可观测标准型——之间的等价性。该系统由一个严格真单输入单输出（SISO）传递函数 $G(s) = \\dfrac{N(s)}{D(s)}$ 定义。\n\n分析必须从第一性原理开始。给定分母多项式 $D(s) = s^n + \\sum_{k=0}^{n-1} a_k s^k$ 和分子多项式 $N(s) = \\sum_{k=0}^{n-1} b_k s^k$，我们构建状态空间实现。系数在数组 $[a_0, a_1, \\ldots, a_{n-1}]$ 和 $[b_0, b_1, \\ldots, b_{n-1}]$ 中给出。\n\n可控标准型实现 $(A_c, B_c, C_c, D_c)$ 定义如下。状态空间的维度是 $n$，即 $D(s)$ 的次数。矩阵为：\n$$\nA_c = \\begin{pmatrix}\n0 & 1 & 0 & \\cdots & 0 \\\\\n0 & 0 & 1 & \\cdots & 0 \\\\\n\\vdots & \\vdots & \\vdots & \\ddots & \\vdots \\\\\n0 & 0 & 0 & \\cdots & 1 \\\\\n-a_0 & -a_1 & -a_2 & \\cdots & -a_{n-1}\n\\end{pmatrix} \\in \\mathbb{R}^{n \\times n}\n$$\n$$\nB_c = \\begin{pmatrix} 0 \\\\ 0 \\\\ \\vdots \\\\ 0 \\\\ 1 \\end{pmatrix} \\in \\mathbb{R}^{n \\times 1}\n$$\n$$\nC_c = \\begin{pmatrix} b_0 & b_1 & \\cdots & b_{n-1} \\end{pmatrix} \\in \\mathbb{R}^{1 \\times n}\n$$\n由于传递函数是严格真的，直接馈通项为零，因此 $D_c = 0$。顾名思义，该实现被构造成总是可控的。\n\n可观测标准型实现 $(A_o, B_o, C_o, D_o)$ 是可控型的对偶。其矩阵为：\n$$\nA_o = A_c^T = \\begin{pmatrix}\n0 & 0 & \\cdots & 0 & -a_0 \\\\\n1 & 0 & \\cdots & 0 & -a_1 \\\\\n0 & 1 & \\cdots & 0 & -a_2 \\\\\n\\vdots & \\vdots & \\ddots & \\vdots & \\vdots \\\\\n0 & 0 & \\cdots & 1 & -a_{n-1}\n\\end{pmatrix} \\in \\mathbb{R}^{n \\times n}\n$$\n$$\nB_o = C_c^T = \\begin{pmatrix} b_0 \\\\ b_1 \\\\ \\vdots \\\\ b_{n-1} \\end{pmatrix} \\in \\mathbb{R}^{n \\times 1}\n$$\n$$\nC_o = B_c^T = \\begin{pmatrix} 0 & 0 & \\cdots & 0 & 1 \\end{pmatrix} \\in \\mathbb{R}^{1 \\times n}\n$$\n同样地，$D_o = 0$。该实现被构造成总是可观测的。\n\n如果存在一个非奇异的相似变换矩阵 $T$，使得以下条件成立，则两个状态空间实现 $(A_1, B_1, C_1)$ 和 $(A_2, B_2, C_2)$ 是等价的：\n$1. A_2 = T A_1 T^{-1} \\iff A_2 T = T A_1$\n$2. B_2 = T B_1$\n$3. C_2 = C_1 T^{-1} \\iff C_2 T = C_1$\n\n问题要求我们找到这样一个 $T$ 矩阵，它将 $(A_c, B_c, C_c)$ 变换为 $(A_o, B_o, C_o)$，并对这三个关系进行数值验证。\n\n矩阵 $T$ 可以从两个系统的可控性矩阵中确定。一对 $(A, B)$ 的可控性矩阵由 $\\mathcal{C}(A,B) = [B, AB, A^2B, \\ldots, A^{n-1}B]$ 给出。从等价关系中，我们可以推导出可控性矩阵之间的关系：\n$A_o T = T A_c$\n$B_o = T B_c$\n由此可得，$A_o B_o = A_o T B_c = T A_c B_c$，并且通常对于任意整数 $k \\ge 0$，$A_o^k B_o = T A_c^k B_c$。\n构建可控性矩阵 $\\mathcal{C}_c = \\mathcal{C}(A_c, B_c)$ 和 $\\mathcal{C}_o = \\mathcal{C}(A_o, B_o)$ 得到矩阵方程：\n$$\n\\mathcal{C}_o = [B_o, A_o B_o, \\ldots, A_o^{n-1} B_o] = [T B_c, T A_c B_c, \\ldots, T A_c^{n-1} B_c] = T [B_c, A_c B_c, \\ldots, A_c^{n-1} B_c] = T \\mathcal{C}_c\n$$\n因此，我们有 $\\mathcal{C}_o = T \\mathcal{C}_c$。\n\n对于可控标准型，矩阵 $\\mathcal{C}_c$ 总是非奇异的。因此，我们可以解出 $T$：\n$$\nT = \\mathcal{C}_o (\\mathcal{C}_c)^{-1}\n$$\n这种构造在代数上保证了前两个等价条件 $A_o T = T A_c$ 和 $B_o = T B_c$ 得到满足。第三个条件 $C_o = C_c T^{-1}$ 以及 $T$ 本身的非奇异性，仅在两个实现都是最小实现时才能得到保证。如果一个实现既是可控的又是可观测的，那么它就是最小的。如果传递函数 $G(s)$ 中存在极零点对消，即多项式 $N(s)$ 和 $D(s)$ 不互质，则会出现非最小实现。\n如果系统不是最小的，可观测实现的的可控性矩阵 $\\mathcal{C}_o$ 将变为奇异的。因此，$T = \\mathcal{C}_o (\\mathcal{C}_c)^{-1}$ 也将是奇异的。在这种情况下，$T^{-1}$ 不存在，第三个等价条件不满足。\n\n计算步骤如下：\n$1$. 对于一个给定的用例 $([a_k], [b_k])$，构建大小为 $n = \\text{length}([a_k])$ 的矩阵 $A_c, B_c, C_c, A_o, B_o, C_o$。\n$2$. 通过迭代矩阵-向量乘积来计算可控性矩阵 $\\mathcal{C}_c$ 和 $\\mathcal{C}_o$。\n$3$. 计算 $T = \\mathcal{C}_o (\\mathcal{C}_c)^{-1}$。\n$4$. 一个关键步骤是检查 $T$ 的非奇异性。一种数值上稳健的方法是检查其条件数 $\\text{cond}(T)$。如果 $\\text{cond}(T)$ 过大，则该矩阵在数值上是奇异的，这意味着非最小实现。在这种情况下，等价变换不存在，验证必定失败。\n$5$. 如果 $T$ 是非奇异的，计算其逆矩阵 $T^{-1}$。\n$6$. 通过计算残差的弗罗贝尼乌斯范数来验证三个等价条件。如果所有三个范数都低于指定的容差 $\\tau = 10^{-9}$，则结果被视为有效。\n- 残差 $R_1$: $\\| A_o T - T A_c \\|_F < \\tau$\n- 残差 $R_2$: $\\| B_o - T B_c \\|_F < \\tau$\n- 残差 $R_3$: $\\| C_o - C_c T^{-1} \\|_F < \\tau$\n每个用例的最终输出是一个布尔值，表示这三个条件是否同时满足。鉴于理论框架确定了当且仅当系统是最小时这些方程成立，并且所提供的测试用例似乎没有极零点对消，我们预计所有用例的验证都将通过。数值检验用于确认这一点，并考虑浮点运算的限制。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Main function to solve the problem for the given test cases.\n    \"\"\"\n    \n    # Test cases as specified in the problem statement\n    test_cases = [\n        # Case 1: happy path, degree 4\n        {'a': np.array([4.0, 3.0, 5.0, 2.0]), 'b': np.array([1.0, 0.0, 2.0, 3.0])},\n        # Case 2: relative degree > 1, degree 4\n        {'a': np.array([2.0, 1.0, 0.25, 0.5]), 'b': np.array([1.0, 1.0, 0.0, 0.0])},\n        # Case 3: zero coefficient in a_2, degree 3\n        {'a': np.array([0.5, 2.0, 0.0]), 'b': np.array([0.75, 0.0, 1.25])},\n        # Case 4: higher order, degree 5\n        {'a': np.array([1.0, 0.0, 3.0, 0.0, 1.0]), 'b': np.array([0.0, 1.0, 0.0, 2.0, 1.0])},\n        # Case 5: zero constant term a_0, degree 3\n        {'a': np.array([0.0, 0.5, 2.0]), 'b': np.array([1.0, -0.5, 0.25])},\n    ]\n\n    results = []\n    for case in test_cases:\n        a_coeffs = case['a']\n        b_coeffs = case['b']\n        result = verify_equivalence(a_coeffs, b_coeffs)\n        results.append(result)\n\n    # Format the final output as a comma-separated list in brackets.\n    print(f\"[{','.join(map(str, results))}]\")\n\ndef verify_equivalence(a, b, tol=1e-9):\n    \"\"\"\n    Constructs canonical forms, computes similarity transform T, and verifies equivalence.\n\n    Args:\n        a (np.ndarray): Coefficients [a_0, a_1, ..., a_{n-1}] of the denominator polynomial.\n        b (np.ndarray): Coefficients [b_0, b_1, ..., b_{n-1}] of the numerator polynomial.\n        tol (float): Tolerance for numerical checks.\n\n    Returns:\n        bool: True if the three equivalence conditions are met, False otherwise.\n    \"\"\"\n    n = len(a)\n    if n == 0:\n        return True # Trivial case\n\n    # 1. Construct Controllable Canonical Form (Ac, Bc, Cc)\n    Ac = np.diag(np.ones(n - 1), k=1)\n    Ac[-1, :] = -a\n    \n    Bc = np.zeros((n, 1))\n    Bc[-1, 0] = 1.0\n    \n    Cc = b.reshape(1, n)\n\n    # 2. Construct Observable Canonical Form (Ao, Bo, Co)\n    Ao = Ac.T\n    Bo = b.reshape(n, 1)\n    Co = Bc.T\n\n    # 3. Compute Controllability Matrices Cc_matrix and Co_matrix\n    Cc_matrix = np.zeros((n, n))\n    Co_matrix = np.zeros((n, n))\n    \n    # Initial columns\n    Cc_matrix[:, 0] = Bc.flatten()\n    Co_matrix[:, 0] = Bo.flatten()\n\n    for i in range(1, n):\n        Cc_matrix[:, i] = (Ac @ Cc_matrix[:, i-1]).flatten()\n        Co_matrix[:, i] = (Ao @ Co_matrix[:, i-1]).flatten()\n\n    # 4. Compute Transformation Matrix T\n    try:\n        Cc_inv = np.linalg.inv(Cc_matrix)\n        T = Co_matrix @ Cc_inv\n    except np.linalg.LinAlgError:\n        # Cc_matrix is always invertible for this form, so this is unlikely.\n        return False\n\n    # 5. Verify non-singularity of T\n    # A large condition number indicates numerical singularity.\n    if np.linalg.cond(T) > 1 / tol:\n        return False\n\n    # 6. Compute T_inv and verify the three conditions\n    try:\n        T_inv = np.linalg.inv(T)\n    except np.linalg.LinAlgError:\n        return False\n\n    # Condition 1: Ao*T - T*Ac = 0\n    res1 = np.linalg.norm(Ao @ T - T @ Ac, 'fro')\n    \n    # Condition 2: Bo - T*Bc = 0\n    res2 = np.linalg.norm(Bo - T @ Bc, 'fro')\n    \n    # Condition 3: Co - Cc*T_inv = 0\n    res3 = np.linalg.norm(Co - Cc @ T_inv, 'fro')\n    \n    cond1_ok = res1  tol\n    cond2_ok = res2  tol\n    cond3_ok = res3  tol\n\n    return cond1_ok and cond2_ok and cond3_ok\n\n# Execute the main function\nsolve()\n```", "id": "2729219"}]}