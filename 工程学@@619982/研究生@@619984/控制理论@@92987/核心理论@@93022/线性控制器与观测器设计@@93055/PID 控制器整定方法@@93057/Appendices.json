{"hands_on_practices": [{"introduction": "掌握PID整定方法不仅仅是记忆规则。一个关键问题是：如果我们据以整定的过程模型本身就不精确怎么办？Ziegler-Nichols开环（反应曲线）法依赖于从实验中辨识出的过程参数（增益$K$、延时$L$和时间常数$T$），而这些参数的辨识过程不可避免地会引入误差。本练习将引导你使用一阶灵敏度分析，通过解析方法推导辨识出的延时$\\Delta L$和时间常数$\\Delta T$中的微小误差，是如何传递并导致最终PID控制器参数$K_p$、$T_i$和$T_d$产生误差的。这项实践提供了对整定方法自身稳健性的基础性认识。[@problem_id:2731985]", "problem": "一个热过程可以很好地由一个一阶加纯滞后(FOPDT)模型近似，其传递函数为 $G_{p}(s)=\\dfrac{K \\exp(-L s)}{T s+1}$，其中 $K$ 是稳态增益，$L$ 是表观输入输出纯滞后时间，$T$ 是主导时间常数。控制器设计为比例-积分-微分(PID)控制器，采用基于FOPDT参数的经典Ziegler–Nichols (Z-N)反应曲线整定法。假设 $K$ 从稳态数据中精确已知，但辨识出的动态特性 $(L,T)$ 因测量和拟合误差而受到微小偏差 $(\\Delta L,\\Delta T)$ 的影响。使用一阶灵敏度分析（即全微分和线性化），推导在Z-N反应曲线PID控制方法下，由 $(\\Delta L,\\Delta T)$ 引起的整定参数 $(K_{p},T_{i},T_{d})$ 的相对误差的一阶近似。将最终结果表示为包含 $\\Delta K_{p}/K_{p}$、$\\Delta T_{i}/T_{i}$ 和 $\\Delta T_{d}/T_{d}$ 的单个行向量，并用 $L$、$T$、$\\Delta L$ 和 $\\Delta T$ 表示。最终表达式中无需进行数值计算或四舍五入，也不应包含任何单位。", "solution": "一阶加纯滞后(FOPDT)模型为 $G_{p}(s)=\\dfrac{K \\exp(-L s)}{T s+1}$，其中过程增益为 $K$，纯滞后时间为 $L$，时间常数为 $T$。在用于比例-积分-微分(PID)控制的经典Ziegler–Nichols (Z-N)反应曲线整定法下，整定后的控制器参数是辨识出的FOPDT参数的确定性函数。我们的基本假设是，这些规则将 $(K_{p},T_{i},T_{d})$ 表示为 $(K,L,T)$ 的光滑函数，并且我们假定过程增益 $K$ 是精确已知的（因此 $\\Delta K=0$）。目标是使用一阶灵敏度分析（即全微分），将微小的辨识误差 $(\\Delta L,\\Delta T)$ 传播到相应的微小变化 $(\\Delta K_{p},\\Delta T_{i},\\Delta T_{d})$ 中。\n\n对于一个平滑依赖于 $L$ 和 $T$ 的标量函数 $f(L,T)$，由微小变化 $(\\Delta L,\\Delta T)$ 引起的一阶变分由全微分给出\n$$\n\\Delta f \\approx \\frac{\\partial f}{\\partial L}\\,\\Delta L+\\frac{\\partial f}{\\partial T}\\,\\Delta T,\n$$\n而相应的相对变分是\n$$\n\\frac{\\Delta f}{f}\\approx \\frac{1}{f}\\frac{\\partial f}{\\partial L}\\,\\Delta L+\\frac{1}{f}\\frac{\\partial f}{\\partial T}\\,\\Delta T.\n$$\n\n用于FOPDT过程的PID控制器的经典Ziegler–Nichols反应曲线规则可以写成\n$$\nK_{p}=\\alpha\\,\\frac{T}{K\\,L},\\qquad T_{i}=\\beta\\,L,\\qquad T_{d}=\\gamma\\,L,\n$$\n其中 $\\alpha$、$\\beta$ 和 $\\gamma$ 是正常数。对于传统的Ziegler–Nichols PID整定，这些常数是\n$$\n\\alpha=1.2,\\qquad \\beta=2,\\qquad \\gamma=0.5.\n$$\n我们进行符号推导；在相对灵敏度计算中，除了那些仅依赖于单个变量的参数外，这些常数将会被抵消。\n\n考虑 $K_{p}(L,T)=\\alpha\\,\\dfrac{T}{K\\,L}$。其偏导数为\n$$\n\\frac{\\partial K_{p}}{\\partial T}=\\frac{\\alpha}{K\\,L}=\\frac{K_{p}}{T},\\qquad\n\\frac{\\partial K_{p}}{\\partial L}=-\\alpha\\,\\frac{T}{K\\,L^{2}}=-\\frac{K_{p}}{L}.\n$$\n因此一阶变化为\n$$\n\\Delta K_{p}\\approx \\frac{K_{p}}{T}\\,\\Delta T-\\frac{K_{p}}{L}\\,\\Delta L,\n$$\n而相对变化为\n$$\n\\frac{\\Delta K_{p}}{K_{p}}\\approx \\frac{\\Delta T}{T}-\\frac{\\Delta L}{L}.\n$$\n\n接下来，$T_{i}(L)=\\beta\\,L$ 仅依赖于 $L$，所以\n$$\n\\frac{\\partial T_{i}}{\\partial L}=\\beta=\\frac{T_{i}}{L},\n$$\n因此\n$$\n\\Delta T_{i}\\approx \\frac{T_{i}}{L}\\,\\Delta L\\quad\\Rightarrow\\quad \\frac{\\Delta T_{i}}{T_{i}}\\approx \\frac{\\Delta L}{L}.\n$$\n\n类似地，$T_{d}(L)=\\gamma\\,L$ 得出\n$$\n\\frac{\\partial T_{d}}{\\partial L}=\\gamma=\\frac{T_{d}}{L},\n$$\n所以\n$$\n\\Delta T_{d}\\approx \\frac{T_{d}}{L}\\,\\Delta L\\quad\\Rightarrow\\quad \\frac{\\Delta T_{d}}{T_{d}}\\approx \\frac{\\Delta L}{L}.\n$$\n\n综合这些结果，一阶相对误差向量为\n$$\n\\begin{pmatrix}\n\\dfrac{\\Delta K_{p}}{K_{p}} & \\dfrac{\\Delta T_{i}}{T_{i}} & \\dfrac{\\Delta T_{d}}{T_{d}}\n\\end{pmatrix}\n\\approx\n\\begin{pmatrix}\n\\dfrac{\\Delta T}{T}-\\dfrac{\\Delta L}{L} & \\dfrac{\\Delta L}{L} & \\dfrac{\\Delta L}{L}\n\\end{pmatrix}.\n$$\n只要函数依赖关系 $K_{p}\\propto T/L$，$T_{i}\\propto L$ 和 $T_{d}\\propto L$ 成立，此表达式就与 $\\alpha$、$\\beta$ 和 $\\gamma$ 的具体数值无关，而经典的Ziegler–Nichols反应曲线PID整定法确实满足这些关系。$\\Delta K=0$ 的假设对于消除由 $K$ 的不确定性带来的任何额外影响至关重要；如果 $\\Delta K\\neq 0$，则需要在 $\\Delta K_{p}/K_{p}$ 中添加 $-(\\Delta K/K)$ 这一项。", "answer": "$$\\boxed{\\begin{pmatrix}\\dfrac{\\Delta K_{p}}{K_{p}} & \\dfrac{\\Delta T_{i}}{T_{i}} & \\dfrac{\\Delta T_{d}}{T_{d}}\\end{pmatrix}=\\begin{pmatrix}\\dfrac{\\Delta T}{T}-\\dfrac{\\Delta L}{L} & \\dfrac{\\Delta L}{L} & \\dfrac{\\Delta L}{L}\\end{pmatrix}}$$", "id": "2731985"}, {"introduction": "在认识到模型不确定性的影响后，我们将从解析推导转向具体的量化分析。本练习设定了一个常见场景：一个根据标称模型整定的PI控制器，现在需要控制一个增益发生变化的实际过程。你的任务是计算这种变化发生后，闭环系统的增益裕度。增益裕度是一个关键的频域指标，它量化了在系统失稳前，过程增益还能增加多少倍。这个练习将巩固你对控制器整定、过程参数变化以及稳定性裕度之间联系的理解。[@problem_id:2731986]", "problem": "一个单输入单输出过程可以很好地用一个一阶加纯滞后 (FOPDT) 模型来近似，其传递函数为 $P(s) = \\dfrac{K \\exp(-L s)}{T s + 1}$。标称反应曲线辨识提供 $K = K_{0}$、$L = 1$ 和 $T = 4$，其中 $K_{0} = 2$。一个比例-积分 (PI) 控制器使用基于标称模型的 Ziegler–Nichols (ZN) 开环阶跃响应法进行整定。控制器实施后，过程增益增加了 $20\\%$ （即 $K$ 变为 $1.2 K_{0}$），而 $L$ 和 $T$ 保持不变。\n\n从环路传递函数、频率响应和增益裕度（定义为开环相位等于 $-\\pi$ 时的相位穿越频率处开环幅值的倒数）的定义出发，确定在增益增加的过程中，固定的PI控制器作用下闭环的最终增益裕度。假设角频率以弧度/秒为单位。将最终数值答案四舍五入到四位有效数字。最终答案表示为无单位的纯数字。", "solution": "在尝试任何解答之前，需要对问题陈述进行验证。\n\n首先，从问题陈述中逐字提取已知条件：\n- 过程模型：一阶加纯滞后 (FOPDT)。\n- 过程传递函数：$P(s) = \\dfrac{K \\exp(-L s)}{T s + 1}$。\n- 标称模型参数：$K = K_{0} = 2$，$L = 1$，$T = 4$。\n- 控制器类型：比例-积分 (PI)。\n- 整定方法：Ziegler–Nichols (ZN) 开环阶跃响应法。\n- 过程参数变化：过程增益 $K$ 增加 $20\\%$ 变为 $1.2 K_{0}$。参数 $L$ 和 $T$ 保持不变。\n- 目标：确定闭环系统的最终增益裕度 ($GM$)。\n- 增益裕度的定义：$GM$ 是开环相位等于 $-\\pi$ 时的相位穿越频率 $\\omega_{pc}$ 处开环幅值的倒数。\n- 最终答案要求：数值四舍五入到四位有效数字。\n\n该问题具有科学依据，使用了控制理论领域的标准模型 (FOPDT)、控制器 (PI) 和分析技术（频率响应、增益裕度）。问题陈述清晰，提供了所有必要信息，可以唯一地确定控制器参数并分析修正后系统的稳定性。语言客观、精确。评估控制系统对参数变化的鲁棒性是工程学中一个标准且有意义的问题。因此，该问题被认定为有效。\n\n解题过程如下。\n\n步骤 1：确定 PI 控制器参数。\n控制器使用 Ziegler-Nichols 开环方法，基于*标称*FOPDT模型参数进行整定：$K_0=2$，$L=1$ 和 $T=4$。\n对于 PI 控制器，ZN 整定规则为：\n比例增益：$K_p = \\dfrac{0.9 T}{K_0 L}$\n积分时间：$T_i = \\dfrac{L}{0.3}$\n\n代入标称值：\n$K_p = \\dfrac{0.9 \\times 4}{2 \\times 1} = \\dfrac{3.6}{2} = 1.8$\n$T_i = \\dfrac{1}{0.3} = \\dfrac{10}{3}$\n\nPI 控制器的传递函数为 $C(s) = K_p \\left(1 + \\dfrac{1}{T_i s}\\right)$。\n$C(s) = 1.8 \\left(1 + \\dfrac{1}{(10/3) s}\\right) = 1.8 \\left(1 + \\dfrac{0.3}{s}\\right) = 1.8 \\dfrac{s + 0.3}{s}$\n\n步骤 2：定义新的开环传递函数。\n控制器实施后，过程增益增加了 $20\\%$。新的增益为 $K' = 1.2 K_0 = 1.2 \\times 2 = 2.4$。参数 $L=1$ 和 $T=4$ 保持不变。\n新的过程传递函数为 $P'(s) = \\dfrac{K' \\exp(-L s)}{T s + 1} = \\dfrac{2.4 \\exp(-s)}{4s + 1}$。\n\n带有固定控制器和修正后过程的系统的开环传递函数为 $G_{OL}(s) = C(s) P'(s)$。\n$G_{OL}(s) = \\left(1.8 \\dfrac{s + 0.3}{s}\\right) \\left(\\dfrac{2.4 \\exp(-s)}{4s + 1}\\right) = \\dfrac{4.32 (s + 0.3) \\exp(-s)}{s(4s + 1)}$\n\n步骤 3：求相位穿越频率 $\\omega_{pc}$。\n相位穿越频率 $\\omega_{pc}$ 是指开环频率响应的相位等于 $-\\pi$ 弧度时的频率。\n通过令 $s = j\\omega$ 得到频率响应：\n$G_{OL}(j\\omega) = \\dfrac{4.32 (j\\omega + 0.3) \\exp(-j\\omega)}{j\\omega(4j\\omega + 1)}$\n\n$G_{OL}(j\\omega)$ 的相角是各项相位的总和：\n$\\angle G_{OL}(j\\omega) = \\angle(4.32) + \\angle(j\\omega + 0.3) + \\angle(\\exp(-j\\omega)) - \\angle(j\\omega) - \\angle(4j\\omega + 1)$\n$\\angle G_{OL}(j\\omega) = 0 + \\arctan\\left(\\dfrac{\\omega}{0.3}\\right) - \\omega - \\dfrac{\\pi}{2} - \\arctan(4\\omega)$\n\n我们将此表达式设为 $-\\pi$ 来求解 $\\omega = \\omega_{pc}$：\n$\\arctan\\left(\\dfrac{\\omega_{pc}}{0.3}\\right) - \\omega_{pc} - \\dfrac{\\pi}{2} - \\arctan(4\\omega_{pc}) = -\\pi$\n整理各项得到一个关于 $\\omega_{pc}$ 的超越方程：\n$\\dfrac{\\pi}{2} = \\omega_{pc} + \\arctan(4\\omega_{pc}) - \\arctan\\left(\\dfrac{\\omega_{pc}}{0.3}\\right)$\n此方程必须通过数值方法求解。设 $f(\\omega) = \\omega + \\arctan(4\\omega) - \\arctan(\\frac{10}{3}\\omega) - \\frac{\\pi}{2}$。我们寻求 $f(\\omega) = 0$ 的根。\n该方程的数值解为 $\\omega_{pc} \\approx 1.5387$ rad/s。\n\n步骤 4：计算相位穿越频率处的幅值。\n开环频率响应的幅值为：\n$|G_{OL}(j\\omega)| = \\dfrac{|4.32| |j\\omega + 0.3| |\\exp(-j\\omega)|}{|j\\omega| |4j\\omega + 1|} = \\dfrac{4.32 \\sqrt{\\omega^2 + 0.3^2}}{\\omega \\sqrt{(4\\omega)^2 + 1^2}}$\n$|G_{OL}(j\\omega)| = \\dfrac{4.32 \\sqrt{\\omega^2 + 0.09}}{\\omega \\sqrt{16\\omega^2 + 1}}$\n\n代入 $\\omega = \\omega_{pc} = 1.5387$：\n$|G_{OL}(j\\omega_{pc})| = \\dfrac{4.32 \\sqrt{(1.5387)^2 + 0.09}}{1.5387 \\sqrt{16(1.5387)^2 + 1}}$\n$|G_{OL}(j\\omega_{pc})| = \\dfrac{4.32 \\sqrt{2.3676 + 0.09}}{1.5387 \\sqrt{16(2.3676) + 1}} = \\dfrac{4.32 \\sqrt{2.4576}}{1.5387 \\sqrt{37.8816 + 1}}$\n$|G_{OL}(j\\omega_{pc})| = \\dfrac{4.32 \\times 1.5676}{1.5387 \\times \\sqrt{38.8816}} = \\dfrac{6.7721}{1.5387 \\times 6.2355} \\approx \\dfrac{6.7721}{9.5934}$\n$|G_{OL}(j\\omega_{pc})| \\approx 0.70591$\n\n步骤 5：计算增益裕度。\n增益裕度定义为该幅值的倒数：\n$GM = \\dfrac{1}{|G_{OL}(j\\omega_{pc})|} = \\dfrac{1}{0.70591} \\approx 1.41662$\n\n最后，根据问题陈述的要求，将结果四舍五入到四位有效数字，得到 $1.417$。", "answer": "$$\\boxed{1.417}$$", "id": "2731986"}, {"introduction": "虽然增益裕度和相位裕度提供了关于稳定性的点态信息，但最大灵敏度$M_s$为反馈系统提供了一个更全面的鲁棒性度量。在本练习中，你将编写一个程序，以实现完整的Ziegler-Nichols闭环整定流程来设计一个PID控制器，并为一系列不同的过程模型数值化地计算它们的$M_s$值。这项高阶练习将解析推断与数值方法（如求根和优化）相结合，让你能够使用一个现代化的性能指标来评估这种经典整定方法的鲁棒性。[@problem_id:2731936]", "problem": "给定一个单位反馈回路，其开环传递函数为 $L(s)=C(s)G(s)$，其中被控对象是一个一阶加纯滞后 (FOPDT) 模型 $G(s)=K \\exp(-Ls)/( \\tau s + 1)$，控制器是一个采用 Ziegler-Nichols (ZN) 闭环极限法进行整定的比例-积分-微分 (PID) 控制器。灵敏度函数为 $S(s)=1/(1+L(s))$，最大灵敏度定义为 $M_s=\\max_{\\omega \\ge 0} \\lvert S(j\\omega)\\rvert$。角度必须以弧度为单位。\n\n任务：\n- 从频率响应的定义以及一阶加纯滞后 (FOPDT) 模型和比例-积分-微分 (PID) 控制器的基本属性出发，实现一个程序，该程序能够：\n  - 对于测试套件中的每个被控对象，通过求解纯比例反馈的相角穿越条件 $\\angle G(j\\omega_u) = -\\pi$ 来计算极限频率 $\\omega_u$。\n  - 根据 $\\omega_u$ 计算极限周期 $P_u=2\\pi/\\omega_u$ 和极限增益 $K_u$，使得在纯比例控制 $C(s)=K_u$ 下，$\\omega_u$ 处的环路增益幅值为1。\n  - 使用 Ziegler-Nichols (ZN) 闭环极限整定法则，根据 $K_u$ 和 $P_u$ 为比例-积分-微分 (PID) 控制器获取控制器参数。\n  - 构建 $L(j\\omega)=C(j\\omega)G(j\\omega)$，并通过在 $\\omega \\in (0,\\infty)$ 上进行数值频域最大化来计算 $M_s=\\max_{\\omega \\ge 0}\\lvert S(j\\omega)\\rvert$，其中 $S(j\\omega)=1/(1+L(j\\omega))$。\n- 所有角度均以弧度表示，所有输出均为无量纲实数。\n\n必须使用的基本原理：\n- $G(s)$ 在虚轴上的频率响应为 $G(j\\omega)=K \\exp(-j\\omega L)/(1+j\\omega \\tau)$。\n- $G(j\\omega)$ 的相角为 $\\angle G(j\\omega)=-\\omega L - \\arctan(\\omega \\tau)$，其幅值为 $\\lvert G(j\\omega)\\rvert = K/\\sqrt{1+(\\omega \\tau)^2}$。\n- 极限频率 $\\omega_u$ 是 $\\angle G(j\\omega)=-\\pi$ 对于纯比例反馈的最小正解，即求解 $\\omega L + \\arctan(\\omega \\tau)=\\pi$，其中 $\\omega>0$。\n- 极限增益满足 $K_u \\lvert G(j\\omega_u)\\rvert = 1$，因此 $K_u=1/\\lvert G(j\\omega_u)\\rvert$。\n- 用于比例-积分-微分 (PID) 的 Ziegler-Nichols (ZN) 闭环极限整定法则：$K_p = 0.6 K_u$，$T_i=P_u/2$，$T_d=P_u/8$，$C(s)=K_p\\left(1 + \\frac{1}{T_i s} + T_d s\\right)$。\n- 灵敏度函数 $S(j\\omega)=1/(1+C(j\\omega)G(j\\omega))$ 和 $M_s=\\max_{\\omega \\ge 0} \\lvert S(j\\omega)\\rvert$。\n\n数值要求：\n- 为了在 $\\omega \\in (0,\\infty)$ 上最大化 $\\lvert S(j\\omega)\\rvert$，需要执行一个覆盖多个频率十倍程的稳健数值搜索；一个包含粗略对数网格扫描和局部优化的两阶段方法是可以接受的。$\\omega$ 使用弧度单位。\n- 每个测试案例最终报告的 $M_s$ 值必须四舍五入到四位小数。\n\n测试套件：\n- 使用以下 FOPDT 参数集 $(K,\\tau,L)$：\n  - 案例 1：$(K,\\tau,L)=(1.0,1.0,0.2)$\n  - 案例 2：$(K,\\tau,L)=(2.0,2.0,0.5)$\n  - 案例 3：$(K,\\tau,L)=(0.5,1.0,0.8)$\n  - 案例 4：$(K,\\tau,L)=(1.0,0.5,0.1)$\n  - 案例 5：$(K,\\tau,L)=(5.0,3.0,0.3)$\n  - 案例 6：$(K,\\tau,L)=(1.0,1.0,1.0)$\n\n最终输出格式：\n- 您的程序应生成单行输出，其中包含一个用方括号括起来的逗号分隔列表，结果按上述案例的顺序列出，例如 $\\left[\\text{ms}_1,\\text{ms}_2,\\dots,\\text{ms}_6\\right]$。每个 $\\text{ms}_i$ 都必须是四舍五入到四位小数的实数。", "solution": "问题陈述已经过验证，被认为是合理的。这是一个经典控制理论中的适定问题，提供了所有必要的定义、参数和明确的目标。所指定的方法和模型，即一阶加纯滞后 (FOPDT) 被控对象、比例-积分-微分 (PID) 控制器以及 Ziegler-Nichols (ZN) 极限增益整定法，都是标准的且符合事实。任务是为几个在 ZN 整定的 PID 控制下的 FOPDT 被控对象计算最大灵敏度 $M_s$。这个过程并非微不足道，需要结合解析公式和数值计算。\n\n对于 FOPDT 被控对象 $G(s) = K \\exp(-Ls)/(\\tau s + 1)$ 的每个给定参数集 $(K, \\tau, L)$，解法系统地进行。\n\n首先，我们使用 Ziegler-Nichols 闭环法确定极限增益 $K_u$ 和极限周期 $P_u$。该方法涉及找到系统在纯比例控制（即 $C(s) = K_u$）下的临界稳定点。当开环传递函数 $G(j\\omega)$ 的相角达到 $-\\pi$ 弧度，同时其幅值使得闭环极点位于虚轴上时，系统进入临界稳定状态。\n\n被控对象的频率响应由 $G(j\\omega) = K \\exp(-j\\omega L)/(1+j\\omega \\tau)$ 给出。其相角为 $\\angle G(j\\omega) = -\\omega L - \\arctan(\\omega \\tau)$。极限频率 $\\omega_u$ 是相角等于 $-\\pi$ 时的频率。因此，我们必须找到以下超越方程的最小正根：\n$$\n\\angle G(j\\omega_u) = -\\pi \\implies \\omega_u L + \\arctan(\\omega_u \\tau) = \\pi\n$$\n对于具有物理意义的被控对象（$L > 0$ 且 $\\tau > 0$），函数 $f(\\omega) = \\omega L + \\arctan(\\omega \\tau)$ 对于 $\\omega > 0$ 是连续且严格单调递增的，从 $f(0) = 0$ 开始，并随着 $\\omega \\to \\infty$ 趋向于 $\\infty$。这保证了方程 $f(\\omega) = \\pi$ 存在唯一的正解 $\\omega_u$。该方程使用稳健的求根算法（如 Brent-Dekker 方法）进行数值求解。\n\n一旦确定了 $\\omega_u$，极限周期根据其定义计算：\n$$\nP_u = \\frac{2\\pi}{\\omega_u}\n$$\n极限增益 $K_u$ 是在极限频率 $\\omega_u$ 处使环路增益幅值为1所需的增益。即 $|K_u G(j\\omega_u)| = 1$。被控对象频率响应的幅值为 $|G(j\\omega)| = K / \\sqrt{1 + (\\omega\\tau)^2}$。因此，$K_u$ 由下式给出：\n$$\nK_u = \\frac{1}{|G(j\\omega_u)|} = \\frac{\\sqrt{1 + (\\omega_u \\tau)^2}}{K}\n$$\n\n接下来，我们根据 $K_u$ 和 $P_u$，为 PID 控制器使用经典的 Ziegler-Nichols 整定法则：\n- 比例增益：$K_p = 0.6 K_u$\n- 积分时间：$T_i = P_u / 2$\n- 微分时间：$T_d = P_u / 8$\n\n理想 PID 控制器的传递函数为 $C(s) = K_p \\left(1 + \\frac{1}{T_i s} + T_d s\\right)$。通过代入 $s = j\\omega$ 可得到其频率响应：\n$$\nC(j\\omega) = K_p \\left(1 + \\frac{1}{j T_i \\omega} + j T_d \\omega \\right) = K_p \\left(1 + j\\left(T_d \\omega - \\frac{1}{T_i \\omega}\\right)\\right)\n$$\n\n完整系统的开环频率响应为 $L(j\\omega) = C(j\\omega)G(j\\omega)$。灵敏度函数 $S(s)$ 衡量扰动对输出的影响。其频率响应为 $S(j\\omega) = 1/(1+L(j\\omega))$。最大灵敏度 $M_s$ 是一个关键的鲁棒性指标，定义为灵敏度函数在所有频率上的峰值幅值：\n$$\nM_s = \\max_{\\omega \\ge 0} |S(j\\omega)| = \\max_{\\omega \\ge 0} \\frac{1}{|1 + C(j\\omega)G(j\\omega)|}\n$$\n\n$M_s$ 的计算需要数值优化。当 $\\omega=0$ 时，PID 控制器中的积分项导致 $|C(j\\omega)| \\to \\infty$，进而使得 $|L(j\\omega)| \\to \\infty$ 且 $|S(j\\omega)| \\to 0$。当 $\\omega \\to \\infty$ 时， $|L(j\\omega)| \\to 0$ 且 $|S(j\\omega)| \\to 1$。因此，预计在某个有限的非零频率处会出现最大值。为了稳健地找到这个最大值，我们实现了一个两阶段的数值程序：\n1.  在一个宽范围的对数间隔频率网格上进行粗略搜索，以确定峰值的近似位置。\n2.  然后使用一个局部的、更精确的优化算法（例如 Brent 方法），利用粗略搜索的结果定义搜索区间，来找到确切的最大值 $M_s$。\n\n这个综合程序被应用于问题陈述中指定的六个测试案例中的每一个。每个案例的最终 $M_s$ 值均四舍五入到四位小数。", "answer": "```python\nimport numpy as np\nfrom scipy.optimize import brentq, minimize_scalar\n\ndef solve():\n    \"\"\"\n    Solves the main problem by iterating through test cases and computing Ms for each.\n    \"\"\"\n    # Test suite of FOPDT parameters (K, tau, L)\n    test_cases = [\n        (1.0, 1.0, 0.2),  # Case 1\n        (2.0, 2.0, 0.5),  # Case 2\n        (0.5, 1.0, 0.8),  # Case 3\n        (1.0, 0.5, 0.1),  # Case 4\n        (5.0, 3.0, 0.3),  # Case 5\n        (1.0, 1.0, 1.0),  # Case 6\n    ]\n\n    results = []\n    for K, tau, L in test_cases:\n        ms_value = calculate_ms(K, tau, L)\n        results.append(np.round(ms_value, 4))\n    \n    # Format the final output as a comma-separated list in brackets\n    print(f\"[{','.join(map(str, results))}]\")\n\ndef calculate_ms(K, tau, L):\n    \"\"\"\n    Calculates the maximum sensitivity Ms for a given FOPDT plant.\n    \"\"\"\n    # Step 1: Find the ultimate frequency omega_u\n    # We need to solve the equation: omega * L + arctan(omega * tau) = pi\n    def phase_equation(omega):\n        return omega * L + np.arctan(omega * tau) - np.pi\n\n    # A robust bracket for the root finder. Since L > 0, the function is monotonic.\n    # Lower bound is close to zero. Upper bound can be estimated by omega * L  pi.\n    omega_u_lower_bound = 1e-9\n    omega_u_upper_bound = np.pi / L * 1.5  # Add a safety margin\n    omega_u = brentq(phase_equation, omega_u_lower_bound, omega_u_upper_bound)\n\n    # Step 2: Compute ultimate period Pu and ultimate gain Ku\n    Pu = 2 * np.pi / omega_u\n    G_mag_at_omega_u = K / np.sqrt(1 + (omega_u * tau)**2)\n    Ku = 1 / G_mag_at_omega_u\n\n    # Step 3: Compute PID parameters using Ziegler-Nichols rules\n    Kp = 0.6 * Ku\n    Ti = Pu / 2\n    Td = Pu / 8\n\n    # Step 4  5: Define sensitivity function magnitude and maximize it\n    def get_s_magnitude(omega):\n        # This function computes |S(j*omega)|\n        if omega = 0:\n            return 0.0  # Analytically, |S(j*omega)| -> 0 as omega -> 0\n\n        # G(j*omega)\n        G_jw = K * np.exp(-1j * omega * L) / (1 + 1j * omega * tau)\n        \n        # C(j*omega)\n        C_jw = Kp * (1 + 1 / (1j * Ti * omega) + 1j * Td * omega)\n        \n        # L(j*omega)\n        L_jw = C_jw * G_jw\n        \n        # S(j*omega) magnitude\n        s_mag = np.abs(1 / (1 + L_jw))\n        return s_mag\n\n    # Numerical maximization of |S(j*omega)|\n    # Stage 1: Coarse grid search for an initial guess\n    # The peak is expected around omega_u. Search a couple of decades around it.\n    omega_grid = np.logspace(np.log10(omega_u) - 1.5, np.log10(omega_u) + 1.5, 1000)\n    s_mag_values = np.array([get_s_magnitude(w) for w in omega_grid])\n    \n    # Find the frequency corresponding to the coarse maximum\n    coarse_max_idx = np.argmax(s_mag_values)\n    \n    # Create a bracket for the fine search around the coarse maximum\n    if 0  coarse_max_idx  len(omega_grid) - 1:\n        bracket = (omega_grid[coarse_max_idx - 1], omega_grid[coarse_max_idx + 1])\n    else:  # Fallback if max is at grid edge\n        bracket = (omega_grid[int(0.1 * len(omega_grid))], omega_grid[int(0.9 * len(omega_grid))])\n\n    # Stage 2: Fine optimization using minimize_scalar\n    # We minimize the negative of the magnitude to find the maximum\n    opt_result = minimize_scalar(\n        lambda w: -get_s_magnitude(w),\n        bracket=bracket,\n        method='brent'\n    )\n    \n    # The maximum sensitivity is the negative of the minimized value\n    Ms = -opt_result.fun\n    \n    return Ms\n\nif __name__ == \"__main__\":\n    solve()\n\n```", "id": "2731936"}]}