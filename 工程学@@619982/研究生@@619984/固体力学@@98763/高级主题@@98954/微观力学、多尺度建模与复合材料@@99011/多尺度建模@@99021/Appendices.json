{"hands_on_practices": [{"introduction": "理解均质化理论最直观的起点是一维层状复合材料。在这种特殊情况下，我们可以从固体力学的第一性原理出发，推导出有效模量的精确解析解。本练习将引导你完成这一推导，并要求你通过编写一个简单的有限元程序来对解析结果进行数值验证，从而将理论与计算紧密联系起来。[@problem_id:2663967]", "problem": "考虑一根长度为 $L$、横截面积为 $A$ 的一维周期性非均匀杆，其杨氏模量 $E(y)$ 随空间变化，并在快坐标 $y = x/\\ell$ 中以周期 $1$ 呈周期性，其中 $\\ell$ 可以被 $L$ 整除，因此杆中有整数个晶胞。该杆在位移控制下承受单轴拉伸载荷，使得宏观（体积平均）应变被指定为 $\\bar{\\varepsilon} = \\Delta/L$，其中 $\\Delta$ 是施加的端到端位移。假设没有体力且为小应变。从固体力学的第一性原理，即运动学、平衡和线性弹性本构关系出发，推导满足 $\\langle \\sigma \\rangle = E^{\\text{hom}} \\, \\bar{\\varepsilon}$ 的均质化模量 $E^{\\text{hom}}$，其中 $\\langle \\cdot \\rangle$ 表示在一个微观结构周期上的空间平均。\n\n您的推导必须严格从以下几点开始：\n- 运动学：$\\varepsilon(x) = \\dfrac{du}{dx}$。\n- 平衡：在无体力情况下，$\\dfrac{d\\sigma}{dx} = 0$。\n- 本构关系：$\\sigma(x) = E(y) \\, \\varepsilon(x)$，其中 $y = x/\\ell$ 且 $E(y+1) = E(y)$。\n\n请勿使用任何预先推导的均质化公式。您必须得出一个关于 $E(y)$ 的闭式表达式 $E^{\\text{hom}}$，该表达式对任何周期性的 $E(y)$ 都普遍有效。\n\n然后，通过对长度为 $L = 1$、横截面积为 $A = 1$ 的单个晶胞进行一维有限元计算来数值验证此结果。使用线性二节点单元和齐次 Dirichlet 边界条件 $u(0) = 0$，$u(1) = \\bar{\\varepsilon}$，其中 $\\bar{\\varepsilon} = 1$。使用 Gauss 积分来精确积分分段常数 $E(y)$ 的单元刚度，并高精度地积分平滑变化的 $E(y)$ 的单元刚度。从有限元模型计算均质化模量，公式为 $E^{\\text{hom}}_{\\text{FE}} = \\langle \\sigma \\rangle / \\bar{\\varepsilon}$，其中平均应力 $\\langle \\sigma \\rangle$ 可由 $x = L$ 处的节点反力除以 $A$ 得到。\n\n测试套件。使用以下五个独立指定的周期性微观结构，均在晶胞 $y \\in [0,1]$ 上定义，且 $A=1$，$L=1$：\n\n- 案例 1（双层复合材料，通用分数）：当 $y \\in [0,f_1)$ 时，$E(y) = E_1$；当 $y \\in [f_1,1)$ 时，$E(y) = E_2$。其中 $f_1 = 0.3$，$E_1 = 100 \\times 10^9$（帕斯卡），$E_2 = 200 \\times 10^9$（帕斯卡）。\n- 案例 2（双层复合材料，高对比度）：当 $y \\in [0,0.5)$ 时，$E(y) = E_1$；当 $y \\in [0.5,1)$ 时，$E(y) = E_2$。其中 $E_1 = 1 \\times 10^9$（帕斯卡），$E_2 = 1000 \\times 10^9$（帕斯卡）。\n- 案例 3（均匀介质，边界情况）：对于所有 $y \\in [0,1]$，$E(y) = E_0$。其中 $E_0 = 210 \\times 10^9$（帕斯卡）。\n- 案例 4（三层复合材料）：当 $y \\in [0,f_1)$ 时，$E(y) = E_1$；当 $y \\in [f_1,f_1+f_2)$ 时，$E(y) = E_2$；当 $y \\in [f_1+f_2,1)$ 时，$E(y) = E_3$。其中 $(f_1,f_2,f_3) = (0.2,0.5,0.3)$，$(E_1,E_2,E_3) = (100 \\times 10^9, 300 \\times 10^9, 50 \\times 10^9)$（帕斯卡）。\n- 案例 5（平滑正弦介质）：对于 $y \\in [0,1]$，$E(y) = E_0 \\, \\left(1 + a \\sin(2\\pi y)\\right)$。其中 $E_0 = 150 \\times 10^9$（帕斯卡），$a = 0.8$。\n\n对每种情况：\n- 计算从您的推导中得到的精确均质化模量 $E^{\\text{hom}}$。\n- 使用足够精细的 $N_e$ 个线性单元的均匀网格，并采用至少4阶的 Gauss 积分，计算有限元估计值 $E^{\\text{hom}}_{\\text{FE}}$。使用 $N_e = 4000$。\n- 以 $\\left|E^{\\text{hom}}_{\\text{FE}} - E^{\\text{hom}}\\right| / E^{\\text{hom}}$ 的形式报告绝对相对误差。\n\n角度单位不适用。最终报告的误差是无量纲的，因此不需要物理单位。\n\n最终输出格式。您的程序应生成单行输出，其中包含一个用方括号括起来的逗号分隔列表。列表中的每个绝对相对误差都应采用科学计数法格式，小数点后精确到 $6$ 位（例如，$[1.234000e-03,5.000000e-01]$）。该列表必须按照上面指定的案例1到5的顺序排列。", "solution": "该问题已经过验证，被认为是适定的、有科学依据且内部一致的。这是非均匀材料均质化领域的一个标准问题。我们接下来进行推导和数值验证。\n\n### 第一部分：均质化模量的解析推导\n\n推导从一维固体力学基本原理开始，针对无体力、单轴拉伸下的杆件。\n\n$1$. **平衡**：平衡的微分方程是：\n$$\n\\frac{d\\sigma}{dx} = 0\n$$\n其中 $\\sigma(x)$ 是位置 $x$ 处的轴向应力。该方程意味着应力 $\\sigma(x)$ 在整个杆件上必须是常数。我们将此常数应力记为 $\\sigma_0$。\n$$\n\\sigma(x) = \\sigma_0\n$$\n\n$2$. **均质化应力**：宏观应力或均质化应力 $\\langle \\sigma \\rangle$ 定义为微观应力场在代表性体积单元 (RVE) 上的体积平均。对于一维周期性材料，RVE 是一个长度为 $\\ell$ 的单个晶胞。其平均值为：\n$$\n\\langle \\sigma \\rangle = \\frac{1}{\\ell} \\int_0^\\ell \\sigma(x) dx\n$$\n由于 $\\sigma(x) = \\sigma_0$ 是常数，平均应力就是 $\\sigma_0$。\n$$\n\\langle \\sigma \\rangle = \\frac{1}{\\ell} \\int_0^\\ell \\sigma_0 dx = \\sigma_0 \\frac{1}{\\ell} \\int_0^\\ell dx = \\sigma_0\n$$\n\n$3$. **本构关系和运动学关系**：局部本构关系由 Hooke 定律给出：\n$$\n\\sigma(x) = E(y) \\varepsilon(x)\n$$\n其中 $\\varepsilon(x)$ 是局部应变，$E(y)$ 是杨氏模量，它随快坐标 $y = x/\\ell$ 周期性变化。应变通过运动学方程与位移场 $u(x)$ 相关联：\n$$\n\\varepsilon(x) = \\frac{du}{dx}\n$$\n将平衡结果 ($\\sigma(x) = \\sigma_0$) 与本构定律相结合，我们可以将局部应变表示为：\n$$\n\\varepsilon(x) = \\frac{\\sigma_0}{E(x/\\ell)}\n$$\n\n$4$. **均质化应变**：宏观应变 $\\bar{\\varepsilon}$ 是局部应变在 RVE 上的平均值：\n$$\n\\bar{\\varepsilon} = \\langle \\varepsilon \\rangle = \\frac{1}{\\ell} \\int_0^\\ell \\varepsilon(x) dx\n$$\n与所施加的位移边界条件一致的等效定义是 $\\bar{\\varepsilon} = \\Delta/L = (u(L)-u(0))/L$。通过对局部应变进行积分可以建立这种联系：\n$$\nu(L) - u(0) = \\int_0^L \\frac{du}{dx} dx = \\int_0^L \\varepsilon(x) dx = L \\left( \\frac{1}{L} \\int_0^L \\varepsilon(x) dx \\right) = L \\langle \\varepsilon \\rangle_{L}\n$$\n由于周期性，在总长度 $L$ 上的平均值与在单个晶胞 $\\ell$ 上的平均值相同。因此，$\\bar{\\varepsilon} = \\langle \\varepsilon \\rangle$。\n\n将第3步中 $\\varepsilon(x)$ 的表达式代入平均积分：\n$$\n\\bar{\\varepsilon} = \\frac{1}{\\ell} \\int_0^\\ell \\frac{\\sigma_0}{E(x/\\ell)} dx\n$$\n我们进行变量替换，换为无量纲的快坐标 $y = x/\\ell$，这意味着 $dx = \\ell dy$。$x$ 从 $0$ 到 $\\ell$ 的积分限对应于 $y$ 从 $0$ 到 $1$ 的积分限。\n$$\n\\bar{\\varepsilon} = \\frac{1}{\\ell} \\int_0^1 \\frac{\\sigma_0}{E(y)} (\\ell dy) = \\sigma_0 \\int_0^1 \\frac{1}{E(y)} dy\n$$\n\n$5$. **均质化模量**：均质化模量 $E^{\\text{hom}}$ 由宏观本构关系定义：\n$$\n\\langle \\sigma \\rangle = E^{\\text{hom}} \\bar{\\varepsilon}\n$$\n代入我们关于 $\\langle \\sigma \\rangle = \\sigma_0$ 和 $\\bar{\\varepsilon}$ 的表达式：\n$$\n\\sigma_0 = E^{\\text{hom}} \\left( \\sigma_0 \\int_0^1 \\frac{1}{E(y)} dy \\right)\n$$\n假设处于非平凡应力状态（$\\sigma_0 \\neq 0$），我们可以除以 $\\sigma_0$：\n$$\n1 = E^{\\text{hom}} \\int_0^1 \\frac{1}{E(y)} dy\n$$\n求解 $E^{\\text{hom}}$，我们得到闭式表达式：\n$$\nE^{\\text{hom}} = \\left( \\int_0^1 \\frac{1}{E(y)} dy \\right)^{-1}\n$$\n该结果表明，对于受拉伸的一维杆，其有效模量是局部模量在晶胞上的调和平均。这类似于串联的弹簧，其柔度（刚度的倒数）是可加的。\n\n### 第二部分：通过有限元法进行数值验证\n\n我们将长度为 $L=1$ 的单个晶胞离散为 $N_e$ 个线性二节点有限元。每个单元的长度为 $h_e = L/N_e$。\n\n连接节点 $i$ 和 $j$ 的单元的单元刚度矩阵 $\\mathbf{k}^e$ 由下式给出：\n$$\n\\mathbf{k}^e = \\int_{\\text{element}} \\mathbf{B}^T (EA) \\mathbf{B} dx\n$$\n对于线性单元，应变-位移矩阵 $\\mathbf{B}$ 为 $\\mathbf{B} = \\frac{1}{h_e} [-1, 1]$。横截面积为 $A$ 时，刚度矩阵变为：\n$$\n\\mathbf{k}^e = \\frac{A}{h_e^2} \\begin{pmatrix} 1 & -1 \\\\ -1 & 1 \\end{pmatrix} \\int_{x_i}^{x_j} E(x) dx\n$$\n如前所述，为获得高精度，单元上模量的积分 $\\int_{x_i}^{x_j} E(x) dx$ 使用4点 Gauss 积分法则进行计算。\n\n全局刚度矩阵 $\\mathbf{K}$ 由单元矩阵组装而成。方程组为 $\\mathbf{K}\\mathbf{U} = \\mathbf{F}$，其中 $\\mathbf{U}$ 是节点位移矢量，$\\mathbf{F}$ 是外部节点力矢量。\n边界条件为 $u(0)=0$ 和 $u(1)=\\bar{\\varepsilon}=1$。我们对系统进行划分以求解未知内部位移。设未知位移集为 $\\mathbf{U}_R$，给定位移集为 $\\mathbf{U}_S = [u_0, u_{N_e}]^T = [0, 1]^T$。相关子系统是：\n$$\n\\mathbf{K}_{RR}\\mathbf{U}_R = -\\mathbf{K}_{RS}\\mathbf{U}_S\n$$\n其中 $\\mathbf{K}_{RR}$ 是 $\\mathbf{K}$ 中对应于自由度的子矩阵，$\\mathbf{K}_{RS}$ 则耦合了自由度和给定的自由度。\n\n在求解出 $\\mathbf{U}_R$ 并组装完整的位移矢量 $\\mathbf{U}$ 后，反力矢量 $\\mathbf{F}_S$ 计算如下：\n$$\n\\mathbf{F}_S = \\mathbf{K}_{SR}\\mathbf{U}_R + \\mathbf{K}_{SS}\\mathbf{U}_S\n$$\n具体来说，右端（$x=1$，节点 $N_e$）的反力为 $R = (\\mathbf{K}\\mathbf{U})_{N_e}$。\n那么平均应力为 $\\langle \\sigma \\rangle = R/A$。\n\n数值计算的均质化模量定义为：\n$$\nE^{\\text{hom}}_{\\text{FE}} = \\frac{\\langle \\sigma \\rangle}{\\bar{\\varepsilon}} = \\frac{R/A}{\\bar{\\varepsilon}/L}\n$$\n根据问题参数 $L=1$，$A=1$ 和 $\\bar{\\varepsilon}=1$，上式可简化为：\n$$\nE^{\\text{hom}}_{\\text{FE}} = R\n$$\n计算测试案例的数值结果，并与从调和平均公式推导出的解析值进行比较，以确定相对误差。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.special import roots_legendre\n\ndef solve():\n    \"\"\"\n    Derives and numerically verifies the homogenized modulus for a 1D periodic bar.\n    \"\"\"\n\n    # --- Test Case Definitions ---\n    # Each tuple contains the parameters for one case.\n    test_cases = [\n        # Case 1: (f1, E1, E2)\n        (0.3, 100e9, 200e9),\n        # Case 2: (f1, E1, E2) - Note f1 is 0.5\n        (0.5, 1e9, 1000e9),\n        # Case 3: (E0,)\n        (210e9,),\n        # Case 4: (f1, f2, E1, E2, E3)\n        (0.2, 0.5, 100e9, 300e9, 50e9),\n        # Case 5: (E0, a)\n        (150e9, 0.8),\n    ]\n\n    # --- Finite Element Model Parameters ---\n    N_e = 4000\n    A = 1.0\n    L = 1.0\n    u_prescribed = 1.0 # This matches bar_epsilon = 1.0\n    quad_order = 4\n    \n    # Get Gauss points and weights for [-1, 1]\n    xi_gauss, w_gauss = roots_legendre(quad_order)\n\n    def get_analytical_Ehom(case_num, params):\n        \"\"\"Calculates the exact homogenized modulus using the derived formula.\"\"\"\n        if case_num == 1: # Two-layer\n            f1, E1, E2 = params\n            return 1.0 / (f1 / E1 + (1.0 - f1) / E2)\n        elif case_num == 2: # Two-layer high contrast\n            f1, E1, E2 = params\n            return 1.0 / (f1 / E1 + (1.0 - f1) / E2)\n        elif case_num == 3: # Uniform\n            E0, = params\n            return E0\n        elif case_num == 4: # Three-layer\n            f1, f2, E1, E2, E3 = params\n            f3 = 1.0 - f1 - f2\n            return 1.0 / (f1 / E1 + f2 / E2 + f3 / E3)\n        elif case_num == 5: # Sinusoidal\n            E0, a = params\n            # Integral of 1/(1+a*sin(2*pi*y)) from 0 to 1 is 1/sqrt(1-a^2)\n            integral_inv_E = 1.0 / (E0 * np.sqrt(1.0 - a**2))\n            return 1.0 / integral_inv_E\n        else:\n            raise ValueError(\"Invalid case number\")\n\n    def solve_fe_case(E_func):\n        \"\"\"\n        Solves the 1D FE problem for a given modulus function E_func(y).\n        Returns the numerically computed homogenized modulus.\n        \"\"\"\n        h_e = L / N_e\n        num_nodes = N_e + 1\n        nodes = np.linspace(0, L, num_nodes)\n        \n        K_global = np.zeros((num_nodes, num_nodes))\n\n        for e in range(N_e):\n            n1, n2 = e, e + 1\n            x1, x2 = nodes[n1], nodes[n2]\n            \n            # Map Gauss points from [-1, 1] to element [x1, x2]\n            x_gauss = (x1 + x2) / 2.0 + (x2 - x1) / 2.0 * xi_gauss\n            \n            # Evaluate modulus at Gauss points\n            E_at_gauss = E_func(x_gauss)\n            \n            # Numerically integrate E(x) over the element using Gauss quadrature\n            # integral(E(x) dx) from x1 to x2 is approx (h_e/2) * sum(w_i * E(x_i))\n            integral_E = (h_e / 2.0) * np.sum(w_gauss * E_at_gauss)\n            \n            # Element stiffness value k = A/h_e^2 * integral(E)\n            k_val = A / h_e**2 * integral_E\n            k_e = k_val * np.array([[1, -1], [-1, 1]])\n            \n            # Assemble into global matrix\n            K_global[n1:n2+1, n1:n2+1] += k_e\n\n        # Apply boundary conditions u(0)=0, u(L)=u_prescribed and solve\n        # Partitioning method\n        # K_rr U_r = F_r - K_rs U_s\n        # F_r = 0 (no internal forces)\n        K_reduced = K_global[1:-1, 1:-1]\n        \n        # Right hand side from prescribed displacement u(L)\n        b_vector = -K_global[1:-1, -1] * u_prescribed\n        \n        # Solve for unknown displacements\n        if K_reduced.shape[0] > 0:\n            U_reduced = np.linalg.solve(K_reduced, b_vector)\n        else: # Case N_e = 1\n            U_reduced = np.array([])\n            \n        U_global = np.zeros(num_nodes)\n        U_global[0] = 0.0\n        U_global[1:-1] = U_reduced\n        U_global[-1] = u_prescribed\n        \n        # Calculate reaction force at x=L\n        reaction_force = K_global[-1, :] @ U_global\n        \n        # E_hom_FE = (Reaction/Area) / (Displacement/Length)\n        # With A=1, L=1, displacement=1, this is just the reaction force.\n        E_hom_FE = reaction_force\n        \n        return E_hom_FE\n\n    results = []\n    for i, params in enumerate(test_cases):\n        case_num = i + 1\n        \n        # Define the E(y) function for the current case\n        if case_num == 1:\n            f1, E1, E2 = params\n            def E_func(y):\n                # np.where is vectorized\n                return np.where(y  f1, E1, E2)\n        elif case_num == 2:\n            f1, E1, E2 = params\n            def E_func(y):\n                return np.where(y  f1, E1, E2)\n        elif case_num == 3:\n            E0, = params\n            def E_func(y):\n                # E is constant, so just return it. The function must handle array input\n                return np.full_like(np.asarray(y), E0)\n        elif case_num == 4:\n            f1, f2, E1, E2, E3 = params\n            def E_func(y):\n                y = np.asarray(y)\n                conds = [y  f1, (y >= f1)  (y  f1 + f2), y >= f1 + f2]\n                vals = [E1, E2, E3]\n                return np.select(conds, vals)\n        elif case_num == 5:\n            E0, a = params\n            def E_func(y):\n                return E0 * (1.0 + a * np.sin(2.0 * np.pi * y))\n        \n        # Calculate analytical and numerical values\n        analytical_val = get_analytical_Ehom(case_num, params)\n        fe_val = solve_fe_case(E_func)\n        \n        # Compute relative error\n        error = np.abs(fe_val - analytical_val) / analytical_val\n        results.append(error)\n\n    # Format output as specified\n    formatted_results = [f\"{r:.6e}\" for r in results]\n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n```", "id": "2663967"}, {"introduction": "在一维情况的基础上，我们将问题推广到更贴近实际的二维微结构，此时解析解通常不再适用。本练习将引入代表性体积单元（$RVE$）的概念，并指导你使用有限元法这一强大的数值工具来求解。你将学习如何施加周期性边界条件（$PBCs$）来模拟无限周期性介质，并计算其宏观等效应力，这是所有计算多尺度模型的核心步骤。[@problem_id:2663973]", "problem": "考虑一个二维小应变固体力学背景，使用边长为 $1$ 的方形代表体积单元 (RVE) 和双线性四边形有限元进行计算均匀化。宏观应变是在单个宏观积分点施加的指定恒定对称张量 $E \\in \\mathbb{R}^{2 \\times 2}$。RVE 具有两个以左右分区排列的各向同性线弹性相：形心满足 $x  0.5$ 的两个单元是材料 $A$，形心满足 $x \\ge 0.5$ 的两个单元是材料 $B$。假设平面应变运动学。目标是建立具有周期性边界条件的微观有限元边值问题，求解位移场，并使用数值积分计算体积平均 Cauchy 应力 $\\Sigma = \\langle \\sigma \\rangle$。\n\n基本原理：\n- 无体力情况下的线性动量平衡：在 RVE 中 $\\nabla \\cdot \\sigma = 0$。\n- 运动学：小应变，$\\varepsilon(u) = \\tfrac{1}{2}\\left(\\nabla u + \\nabla u^{\\mathsf{T}}\\right)$。\n- 每个相 $p \\in \\{A,B\\}$ 的本构行为：各向同性、线弹性、平面应变，具有杨氏模量 $E_p$ 和泊松比 $\\nu_p$。应力 $\\sigma$ 通过局部相的材料刚度与 $\\varepsilon(u)$ 线性相关。\n- 与一阶计算均匀化一致的周期性边界条件：对于由 $\\Delta X = x^{+} - x^{-}$ 分隔的任何一对相对边界点 $x^{+}$ 和 $x^{-}$，强制执行 $u(x^{+}) - u(x^{-}) = E \\, \\Delta X$。为消除与波动场的刚体平移相关的零空间，将原点处的位移约束为零。\n\n离散化：\n- 用 $2 \\times 2$ 的结构化双线性四边形单元网格（共四个单元）对单位正方形 RVE 进行网格划分，产生 $3 \\times 3$ 个节点。使用标准等参映射、$2 \\times 2$ Gauss 积分以及标准双线性形函数及其导数。使用一致的小应变-位移矩阵，将节点位移映射到排列为 $[\\varepsilon_{xx}, \\varepsilon_{yy}, \\varepsilon_{xy}]^{\\mathsf{T}}$ 的应变向量，其中 $\\varepsilon_{xy}$ 是张量剪切应变（不是工程剪切应变）。\n- 通过单元积分组装全局刚度矩阵。通过带 Lagrange 乘子的线性多点约束来施加周期性边界条件。将原点处的位移强制为零以消除刚体平移。\n- 在求解离散位移场后，计算每个单元中 Gauss 点处的 Cauchy 应力，并通过数值积分评估体积平均值：\n$$\n\\Sigma = \\frac{1}{|\\Omega|} \\sum_{e} \\sum_{q} \\sigma^{(e)}(x_q) \\, w_q \\, \\det J^{(e)}(x_q),\n$$\n其中 $|\\Omega|$ 是 RVE 的面积，$e$ 是单元索引，$q$ 是 Gauss 点索引，$w_q$ 是积分权重，$J^{(e)}$ 是单元 Jacobian 矩阵。\n\n需遵循的实现细节：\n- 在小应变范围内，两相均为平面应变。\n- 在右-左和上-下对上施加周期性边界条件。使用差分形式 $u(x^{+}) - u(x^{-}) = E \\, \\Delta X$，对于右-左对，$\\Delta X = [1,0]^{\\mathsf{T}}$；对于上-下对，$\\Delta X = [0,1]^{\\mathsf{T}}$。为避免角点处约束的线性相关性，将右上角从上-下配对中排除，并在原点处强制位移为零。\n- 计算排列为 $[\\Sigma_{xx}, \\Sigma_{yy}, \\Sigma_{xy}]$ 的平均 Cauchy 应力分量。\n\n单位和格式：\n- 杨氏模量必须以帕斯卡（Pascals）为单位，应变为无量纲，得到的平均 Cauchy 应力必须以帕斯卡返回。将每个应力分量报告为四舍五入到 $6$ 位小数的浮点数（以帕斯卡为单位）。\n- 最终输出必须是单行，包含一个列表，其中按顺序 $[\\Sigma_{xx}^{(1)}, \\Sigma_{yy}^{(1)}, \\Sigma_{xy}^{(1)}, \\Sigma_{xx}^{(2)}, \\Sigma_{yy}^{(2)}, \\Sigma_{xy}^{(2)}, \\dots]$ 串联所有测试用例的结果。\n\n测试套件：\n使用以下五个测试用例来验证和运行实现。在所有情况下，都将 RVE 作为单位正方形，并采用指定的 $2 \\times 2$ 双线性网格。对于每个案例，将材料 $A$ 分配给左侧两个单元（$x  0.5$），将材料 $B$ 分配给右侧两个单元（$x \\ge 0.5$）。所有测试均为平面应变。\n\n- 测试 1（均匀参考）：$E_A = E_B = 70 \\times 10^9$ Pa，$\\nu_A = \\nu_B = 0.33$，宏观应变为\n$$\nE = \\begin{bmatrix}\n0.001  0.0002 \\\\\n0.0002  -0.0005\n\\end{bmatrix}.\n$$\n\n- 测试 2（混合应变下的刚度对比）：$E_A = 70 \\times 10^9$ Pa，$\\nu_A = 0.33$，$E_B = 210 \\times 10^9$ Pa，$\\nu_B = 0.30$，且\n$$\nE = \\begin{bmatrix}\n0.001  0.0002 \\\\\n0.0002  -0.0005\n\\end{bmatrix}.\n$$\n\n- 测试 3（纯剪切）：$E_A = 70 \\times 10^9$ Pa，$\\nu_A = 0.33$，$E_B = 210 \\times 10^9$ Pa，$\\nu_B = 0.30$，且\n$$\nE = \\begin{bmatrix}\n0  0.001 \\\\\n0.001  0\n\\end{bmatrix}.\n$$\n\n- 测试 4（零宏观应变边界情况）：$E_A = 70 \\times 10^9$ Pa，$\\nu_A = 0.33$，$E_B = 210 \\times 10^9$ Pa，$\\nu_B = 0.30$，且\n$$\nE = \\begin{bmatrix}\n0  0 \\\\\n0  0\n\\end{bmatrix}.\n$$\n\n- 测试 5（等双轴应变下的近不可压缩性对比）：$E_A = 2 \\times 10^9$ Pa，$\\nu_A = 0.49$，$E_B = 70 \\times 10^9$ Pa，$\\nu_B = 0.30$，且\n$$\nE = \\begin{bmatrix}\n0.001  0 \\\\\n0  0.001\n\\end{bmatrix}.\n$$\n\n您的程序必须实现上述过程，并生成单行输出，其中包含对应于五个测试的所有 15 个四舍五入分量的串联列表，顺序必须与描述完全一致。例如，输出格式必须是单行，如 $[\\Sigma_{xx}^{(1)},\\Sigma_{yy}^{(1)},\\Sigma_{xy}^{(1)},\\dots,\\Sigma_{xy}^{(5)}]$，每个条目四舍五入到 $6$ 位小数（以帕斯卡为单位），且输出中不含单位符号。", "solution": "用户提供了一个二维固体的计算均匀化问题。在继续之前，我将首先验证其有效性。\n\n### 步骤 1：提取已知条件\n- **域：** 单位正方形代表体积单元 (RVE)，$|\\Omega|=1$。\n- **离散化：** $2 \\times 2$ 的双线性四边形单元网格（9 个节点，4 个单元）。$2 \\times 2$ Gauss 积分。\n- **微观结构：** 两相复合材料。形心 $x  0.5$ 的单元为 A 相， $x \\ge 0.5$ 的为 B 相。\n- **物理：** 小应变、平面应变、线弹性各向同性。线性动量平衡 $\\nabla \\cdot \\sigma = 0$。\n- **本构律：** 对每相 $p \\in \\{A, B\\}$，$\\sigma = D_p \\varepsilon(u)$，具有杨氏模量 $E_p$ 和泊松比 $\\nu_p$。\n- **边界条件 (BCs)：** 一阶周期性边界条件：$u(x^{+}) - u(x^{-}) = E \\, \\Delta X$。原点位移固定：$u(0,0)=0$。右上角节点不直接施加约束以避免线性相关。边界条件通过 Lagrange 乘子施加。\n- **目标：** 对于给定的宏观应变张量 $E$，计算体积平均 Cauchy 应力 $\\Sigma = \\langle \\sigma \\rangle$。\n- **平均公式：** $\\Sigma = \\frac{1}{|\\Omega|} \\sum_{e} \\sum_{q} \\sigma^{(e)}(x_q) \\, w_q \\, \\det J^{(e)}(x_q)$。\n- **矢量约定：** 应变矢量为 $[\\varepsilon_{xx}, \\varepsilon_{yy}, \\varepsilon_{xy}]^{\\mathsf{T}}$（使用张量剪切应变）。应力矢量为 $[\\Sigma_{xx}, \\Sigma_{yy}, \\Sigma_{xy}]^{\\mathsf{T}}$。\n- **测试用例：** 提供了五个测试用例，包含特定的材料属性 $(E_A, \\nu_A, E_B, \\nu_B)$ 和宏观应变张量 $E$。\n- **输出：** 一个包含 15 个浮点数的列表（5 个测试，每个测试 3 个应力分量），四舍五入到 6 位小数。\n\n### 步骤 2：使用提取的已知条件进行验证\n- **科学依据：** 该问题描述了计算力学中一种称为 FE$^2$ 方法（两个尺度上的有限元）或一阶计算均匀化的标准方法。其控制方程、运动学假设、本构关系和数值程序（带周期性边界条件的有限元法）都是成熟的，并构成了材料多尺度建模的基础。该问题在科学上是合理的。\n- **适定性：** 寻找微观尺度位移场的问题是一个线性边值问题。使用周期性边界条件，并结合一个消除刚体运动的约束（固定原点位移），确保了节点位移的线性方程组有唯一解。使用 Lagrange 乘子施加约束的指定方法是一种标准且稳健的技术，它导出一个适定的鞍点问题。\n- **目标：** 该问题使用精确的数学和工程术语陈述。所有参数和目标都是定量的、无歧义的。\n\n问题陈述没有显示出任何科学上不健全、信息缺失、矛盾或含糊之处。这是一个具有挑战性但有效且定义明确的计算问题。\n\n### 步骤 3：结论与行动\n问题有效。我现在将开始求解。\n\n### 基于原理的求解设计\n\n该问题要求在代表体积单元 (RVE) 上求解一个微观边值问题，以确定其等效力学响应。这是通过有限元法 (FEM) 实现的。\n\n**1. 控制方程**\n平衡方程的强形式是线性动量守恒，在没有体力的情况下，即在 RVE 域 $\\Omega$ 内 $\\nabla \\cdot \\sigma = 0$。该问题由本构律 $\\sigma = D(\\varepsilon)$ 和运动学关系 $\\varepsilon(u) = \\frac{1}{2}(\\nabla u + (\\nabla u)^T)$ 封闭。位移场 $u$ 被分解为宏观部分和周期性波动部分：$u(x) = E x + u'(x)$，其中 $E$ 是指定的宏观应变，$u'$ 在 RVE 边界上是周期性的。\n\n**2. 有限元离散化**\nRVE 是一个单位正方形，通过 $2 \\times 2$ 的 4 节点双线性四边形单元网格进行离散化。这产生了 9 个节点和 18 个自由度 (DOFs)，因为每个节点有两个位移分量 $(u_x, u_y)$。节点坐标为 $(0,0), (0.5,0), \\dots, (1,1)$。单元根据其形心的 x 坐标进行编号并分配材料属性。单元 0 和 2（左列）是材料 A；单元 1 和 3（右列）是材料 B。\n\n平衡方程的弱形式被离散化，得到线性方程组 $K U = F_{ext}$，其中 $K$ 是全局刚度矩阵，$U$ 是节点位移矢量，$F_{ext}$ 是外部节点力，在此问题中为零。\n\n**3. 本构和刚度矩阵**\n对于每个相，其在平面应变条件下是各向同性线弹性的，应力矢量 $\\sigma = [\\sigma_{xx}, \\sigma_{yy}, \\sigma_{xy}]^T$ 通过本构矩阵 $D$ 与应变矢量 $\\varepsilon = [\\varepsilon_{xx}, \\varepsilon_{yy}, \\varepsilon_{xy}]^T$ 相关联。矩阵 $D$ 由下式给出：\n$$\nD = \\begin{bmatrix}\n\\lambda+2G  \\lambda  0 \\\\\n\\lambda  \\lambda+2G  0 \\\\\n0  0  2G\n\\end{bmatrix}\n$$\n其中 Lamé 参数为 $\\lambda = \\frac{E \\nu}{(1+\\nu)(1-2\\nu)}$ 和 $G = \\frac{E}{2(1+\\nu)}$。右下角的 $2G$ 项是由于使用了张量剪切应变 $\\varepsilon_{xy}$，因为 $\\sigma_{xy} = 2G \\varepsilon_{xy}$。\n\n单元 $\\Omega_e$ 的单元刚度矩阵 $K^e$ 通过在单元体积上积分计算：\n$$\nK^e = \\int_{\\Omega_e} B^T D B \\,d\\Omega\n$$\n其中 $B$ 是应变-位移矩阵，它将节点位移与应变联系起来：$\\varepsilon = B u^e$。该积分使用 $2 \\times 2$ Gauss 积分进行数值计算。全局刚度矩阵 $K$ 通过对所有单元刚度矩阵的贡献求和来组装。\n\n**4. 边界条件和系统求解**\n周期性边界条件和原点节点的固定被施加为对节点自由度的线性约束。总共定义了 12 个标量约束：\n- 3 对节点对的 6 个右-左周期性约束。对每对 $(i, j)$，$u_i - u_j = E \\Delta X$。\n- 2 对节点对的 4 个上-下周期性约束。\n- 2 个固定原点位移的约束，$u_0 = 0$。\n\n这些约束可以写成矩阵形式 $C U = d$。为了在这些约束下求解系统 $K U = 0$，我们采用 Lagrange 乘子法，这导致了增广鞍点系统：\n$$\n\\begin{bmatrix} K  C^T \\\\ C  0 \\end{bmatrix}\n\\begin{Bmatrix} U \\\\ \\Lambda \\end{Bmatrix} =\n\\begin{Bmatrix} 0 \\\\ d \\end{Bmatrix}\n$$\n其中 $\\Lambda$ 是 Lagrange 乘子矢量。这个 $30 \\times 30$ 的系统被求解以获得全局位移矢量 $U$ 和乘子 $\\Lambda$。\n\n**5. 应力平均**\n确定节点位移 $U$ 后，可以在每个单元内计算应变和应力场。代表宏观应力响应的体积平均应力 $\\Sigma$ 通过在 RVE 上对应力进行数值积分来计算：\n$$\n\\Sigma = \\frac{1}{|\\Omega|} \\sum_{e=1}^{N_{el}} \\int_{\\Omega_e} \\sigma(x) \\, d\\Omega = \\sum_{e=1}^{4} \\sum_{q=1}^{4} \\sigma^{(e)}(x_q) \\, w_q \\, \\det J^{(e)}(x_q)\n$$\n这里，$|\\Omega|=1$，求和遍及所有单元 e 和每个单元内的所有 Gauss 点 q。$\\sigma^{(e)}(x_q) = D^e B(x_q) u^e$ 是 Gauss 点处的应力，$w_q=1$ 是积分权重，$\\det J^{(e)}$ 是等参映射的 Jacobian 矩阵的行列式，对于每个方形单元它是一个常数，等于 $(0.5 \\times 0.5) = 0.25$。不，映射是从一个 $2 \\times 2$ 的父单元到一个 $0.5 \\times 0.5$ 的物理单元，所以 $dx = d\\xi \\cdot L/2 \\implies dx/d\\xi = L/2 = 0.25$。因此，$\\det(J) = (0.25)^2 = 0.0625$。然后收集每个测试用例计算出的分量 $[\\Sigma_{xx}, \\Sigma_{yy}, \\Sigma_{xy}]$。\n\n整个过程使用 Python 的 NumPy 库进行数值计算来实现。", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the computational homogenization problem for five test cases.\n    \"\"\"\n\n    test_cases = [\n        # Test 1 (homogeneous reference)\n        {'E_A': 70e9, 'nu_A': 0.33, 'E_B': 70e9, 'nu_B': 0.33,\n         'E_macro': np.array([[0.001, 0.0002], [0.0002, -0.0005]])},\n        # Test 2 (stiffness contrast under mixed strain)\n        {'E_A': 70e9, 'nu_A': 0.33, 'E_B': 210e9, 'nu_B': 0.30,\n         'E_macro': np.array([[0.001, 0.0002], [0.0002, -0.0005]])},\n        # Test 3 (pure shear)\n        {'E_A': 70e9, 'nu_A': 0.33, 'E_B': 210e9, 'nu_B': 0.30,\n         'E_macro': np.array([[0, 0.001], [0.001, 0]])},\n        # Test 4 (zero macro strain edge case)\n        {'E_A': 70e9, 'nu_A': 0.33, 'E_B': 210e9, 'nu_B': 0.30,\n         'E_macro': np.array([[0, 0], [0, 0]])},\n        # Test 5 (near-incompressible contrast under equi-biaxial strain)\n        {'E_A': 2e9, 'nu_A': 0.49, 'E_B': 70e9, 'nu_B': 0.30,\n         'E_macro': np.array([[0.001, 0], [0, 0.001]])},\n    ]\n\n    results = []\n    for case in test_cases:\n        stress_avg = run_fem_homogenization(case['E_A'], case['nu_A'], case['E_B'], case['nu_B'], case['E_macro'])\n        results.extend(np.round(stress_avg, 6))\n    \n    # Format the final output string exactly as required\n    print(f\"[{','.join(f'{x:.6f}' for x in results)}]\")\n\ndef run_fem_homogenization(E_A, nu_A, E_B, nu_B, E_macro):\n    \"\"\"\n    Performs a single FEM analysis for a given set of material properties and macro strain.\n    \"\"\"\n    # 1. MESH and GEOMETRY\n    nodes = np.array([\n        [0.0, 0.0], [0.5, 0.0], [1.0, 0.0],\n        [0.0, 0.5], [0.5, 0.5], [1.0, 0.5],\n        [0.0, 1.0], [0.5, 1.0], [1.0, 1.0]\n    ])\n    \n    # Element connectivity (counter-clockwise)\n    elements = np.array([\n        [0, 1, 4, 3],  # Elem 0, Mat A\n        [1, 2, 5, 4],  # Elem 1, Mat B\n        [3, 4, 7, 6],  # Elem 2, Mat A\n        [4, 5, 8, 7]   # Elem 3, Mat B\n    ])\n    \n    num_nodes = nodes.shape[0]\n    num_dofs = num_nodes * 2\n    \n    materials_props = {\n        'A': {'E': E_A, 'nu': nu_A},\n        'B': {'E': E_B, 'nu': nu_B}\n    }\n    element_materials = ['A', 'B', 'A', 'B']\n\n    # 2. FEM ASSEMBLY\n    gauss_points = [(-1/np.sqrt(3), -1/np.sqrt(3)), (1/np.sqrt(3), -1/np.sqrt(3)),\n                    (1/np.sqrt(3), 1/np.sqrt(3)), (-1/np.sqrt(3), 1/np.sqrt(3))]\n    gauss_weights = [1.0, 1.0, 1.0, 1.0]\n\n    K_global = np.zeros((num_dofs, num_dofs))\n\n    # Helper functions for FEM matrices\n    def get_shape_func_derivs(xi, eta):\n        # Derivatives of N w.r.t. parent coordinates (xi, eta)\n        # N1 = 0.25*(1-xi)*(1-eta), N2 = 0.25*(1+xi)*(1-eta), ...\n        dNdxi = 0.25 * np.array([-(1-eta), (1-eta), (1+eta), -(1+eta)])\n        dNdeta = 0.25 * np.array([-(1-xi), -(1+xi), (1+xi), (1-xi)])\n        return dNdxi, dNdeta\n\n    def get_B_matrix_and_detJ(xi, eta, elem_node_coords):\n        dNdxi, dNdeta = get_shape_func_derivs(xi, eta)\n        \n        J = np.zeros((2, 2))\n        J[0, 0] = np.dot(dNdxi, elem_node_coords[:, 0])\n        J[0, 1] = np.dot(dNdxi, elem_node_coords[:, 1])\n        J[1, 0] = np.dot(dNdeta, elem_node_coords[:, 0])\n        J[1, 1] = np.dot(dNdeta, elem_node_coords[:, 1])\n        \n        detJ = np.linalg.det(J)\n        invJ = np.linalg.inv(J)\n        \n        dNdx_dy = invJ @ np.vstack((dNdxi, dNdeta))\n        \n        B = np.zeros((3, 8))\n        for i in range(4):\n            dNdx_i = dNdx_dy[0, i]\n            dNdy_i = dNdx_dy[1, i]\n            B[0, 2*i]     = dNdx_i\n            B[1, 2*i + 1] = dNdy_i\n            # For tensorial shear strain epsilon_xy = 0.5 * (du/dy + dv/dx)\n            B[2, 2*i]     = 0.5 * dNdy_i\n            B[2, 2*i + 1] = 0.5 * dNdx_i\n        return B, detJ\n\n    def get_D_matrix(E, nu):\n        # Plane strain constitutive matrix for [exx, eyy, exy]^T (tensorial strain)\n        c1 = E / ((1 + nu) * (1 - 2 * nu))\n        D = c1 * np.array([\n            [1 - nu, nu, 0],\n            [nu, 1 - nu, 0],\n            [0, 0, 0] # Placeholder\n        ], dtype=float)\n        # For tensorial shear strain, sigma_xy = 2*G*epsilon_xy, where G = E/(2*(1+nu))\n        D[2, 2] = E / (1 + nu)\n        return D\n\n    for e_idx, elem in enumerate(elements):\n        material_key = element_materials[e_idx]\n        props = materials_props[material_key]\n        D = get_D_matrix(props['E'], props['nu'])\n        \n        elem_node_coords = nodes[elem, :]\n        K_element = np.zeros((8, 8))\n        \n        for i, (xi, eta) in enumerate(gauss_points):\n            w = gauss_weights[i]\n            B, detJ = get_B_matrix_and_detJ(xi, eta, elem_node_coords)\n            K_element += B.T @ D @ B * detJ * w\n        \n        # Assembly (scatter)\n        dof_indices = np.array([2*n for n in elem] + [2*n + 1 for n in elem]).reshape(2,4).T.flatten()\n        K_global[np.ix_(dof_indices, dof_indices)] += K_element\n\n    # 3. BOUNDARY CONDITIONS\n    num_constraints = 12\n    C = np.zeros((num_constraints, num_dofs))\n    d = np.zeros(num_constraints)\n    \n    # Constraint indices\n    c_idx = 0\n\n    # Right-Left periodicity (u(1,y) - u(0,y) = E * [1,0]^T)\n    for pair in [(2, 0), (5, 3), (8, 6)]: # (right_node, left_node)\n        rhs_vec = E_macro @ np.array([1, 0])\n        C[c_idx, 2*pair[0]] = 1; C[c_idx, 2*pair[1]] = -1; d[c_idx] = rhs_vec[0]\n        c_idx += 1\n        C[c_idx, 2*pair[0]+1] = 1; C[c_idx, 2*pair[1]+1] = -1; d[c_idx] = rhs_vec[1]\n        c_idx += 1\n\n    # Top-Bottom periodicity (u(x,1) - u(x,0) = E * [0,1]^T)\n    for pair in [(6, 0), (7, 1)]: # (top_node, bottom_node)\n        rhs_vec = E_macro @ np.array([0, 1])\n        C[c_idx, 2*pair[0]] = 1; C[c_idx, 2*pair[1]] = -1; d[c_idx] = rhs_vec[0]\n        c_idx += 1\n        C[c_idx, 2*pair[0]+1] = 1; C[c_idx, 2*pair[1]+1] = -1; d[c_idx] = rhs_vec[1]\n        c_idx += 1\n\n    # Fix origin displacement u(0,0)=0\n    C[c_idx, 0] = 1; d[c_idx] = 0; c_idx += 1\n    C[c_idx, 1] = 1; d[c_idx] = 0; c_idx += 1\n        \n    # 4. SOLVE SYSTEM\n    n_total = num_dofs + num_constraints\n    Aug_matrix = np.zeros((n_total, n_total))\n    Aug_rhs = np.zeros(n_total)\n\n    Aug_matrix[:num_dofs, :num_dofs] = K_global\n    Aug_matrix[:num_dofs, num_dofs:] = C.T\n    Aug_matrix[num_dofs:, :num_dofs] = C\n    Aug_rhs[num_dofs:] = d\n    \n    try:\n        solution = np.linalg.solve(Aug_matrix, Aug_rhs)\n    except np.linalg.LinAlgError:\n        # For singular cases like E=0, K is singular. Use lstsq for robustness.\n        solution = np.linalg.lstsq(Aug_matrix, Aug_rhs, rcond=None)[0]\n\n    U_global = solution[:num_dofs]\n\n    # 5. POST-PROCESSING: STRESS AVERAGING\n    stress_avg = np.zeros(3)\n    \n    for e_idx, elem in enumerate(elements):\n        material_key = element_materials[e_idx]\n        props = materials_props[material_key]\n        D = get_D_matrix(props['E'], props['nu'])\n        \n        elem_node_coords = nodes[elem, :]\n        dof_indices = np.array([2*n for n in elem] + [2*n + 1 for n in elem]).reshape(2,4).T.flatten()\n        u_element = U_global[dof_indices]\n        \n        for i, (xi, eta) in enumerate(gauss_points):\n            w = gauss_weights[i]\n            B, detJ = get_B_matrix_and_detJ(xi, eta, elem_node_coords)\n            \n            strain_gp = B @ u_element\n            stress_gp = D @ strain_gp\n            \n            stress_avg += stress_gp * detJ * w\n    \n    # The RVE area is 1, so no need for division.\n    return stress_avg\n\nif __name__ == '__main__':\n    solve()\n```", "id": "2663973"}, {"introduction": "掌握了理想周期性模型后，探索其局限性至关重要。当处理有限尺寸的复合材料时，边界效应会变得不可忽略。本练习将通过一个优雅的解析模型，带你探究边界层的概念，并量化不同宏观边界条件（如运动均匀边界、静态均匀边界和周期性边界）对材料“表观”属性的影响。[@problem_id:2664005]", "problem": "考虑一个二维周期性层压材料的反平面剪切问题，将其作为高对比度弹性复合材料的一个典范标量代理模型。设平面外位移为 $w(x,y)$，其中 $x$ 是垂直于宏观边界的坐标，$y$ 是沿分层方向的坐标。局部剪切模量为 $\\mu(y)$，它在 $y$ 方向上是周期的，且周期被归一化为1。小应变线性反平面弹性理论的控制方程是平衡方程和相关的能量泛函：平衡方程为 $\\partial_x(\\mu(y)\\partial_x w)+\\partial_y(\\mu(y)\\partial_y w)=0$，在域 $\\Omega$ 上的总储存能为 $\\mathcal{E}[w]=\\dfrac{1}{2}\\int_{\\Omega}\\mu(y)(|\\partial_x w|^2+|\\partial_y w|^2)\\,dx\\,dy$。假设一个层压材料，其模量在 $y\\in[0,f)$ 上为 $\\mu(y)=\\mu_1$，在 $y\\in[f,1)$ 上为 $\\mu(y)=\\mu_2$，并在 $y$ 方向上周期性延拓。其中，$f\\in(0,1)$ 是模量为 $\\mu_1$ 的相的体积分数，$\\mu_1, \\mu_20$ 是无量纲模量。宏观目标剪切状态是沿 $x$ 方向的大小为 $\\bar{\\gamma}$ 的均匀剪切，因此宏观位移为 $w_{\\text{macro}}(x,y)=\\bar{\\gamma}x$。在一个无量纲设定下进行分析，其中长度由 $y$ 方向的周期进行缩放，模量由一个任意的正参考模量进行缩放（因此不需要物理单位）。\n\n你的任务是：\n\n- 从能量泛函和平衡方程出发，对该层压材料在 $y$ 方向上进行长波均质化，以获得一个等效的均匀、各向异性反平面介质。其有效电导率（或剪切）张量为 $\\mathbf{C}^{\\ast}=\\mathrm{diag}(C_{11},C_{22})$，其中 $C_{11}$ 加权 $\\partial_x w$，$C_{22}$ 加权 $\\partial_y w$，且该张量仅用 $\\mu_1, \\mu_2, f$ 表示。然后，对 $x=0$ 处一个小的、沿 $y$ 方向周期的边界扰动进行响应线性化，并证明沿 $y$ 方向的第 $n$ 阶傅里叶模式沿 $x$ 方向呈指数衰减，衰减率 $\\kappa_n$ 满足 $C_{11}\\kappa_n^2=C_{22}k_n^2$，其中 $k_n=2\\pi n$ 是该模式的波数。将边界层厚度 $\\delta$ 定义为第一个非平凡傅里叶模式的 $1/e$ 衰减长度，即 $\\delta=1/\\kappa_1$。\n\n- 考虑在一阶计算均质化中使用的三种理想化边界条件：运动学均匀边界条件 (Kinematically Uniform Boundary Conditions, KUBC)、静力学均匀边界条件 (Static Uniform Boundary Conditions, SUBC) 和周期性边界条件 (Periodic Boundary Conditions, PBC)。\n  - 对于在 $y$ 方向具有周期性的有限条带 $[0,L]\\times[0,1]$ 上的 KUBC，施加 $w(0,y)=0$ 和 $w(L,y)=\\bar{\\gamma}L$。\n  - 对于同一条带上的 SUBC，在 $x=0$ 处施加一个均匀的宏观牵引力，其大小等于 $\\bar{t}=\\bar{\\sigma}=\\bar{\\mu}\\bar{\\gamma}$，其中 $\\bar{\\mu}$ 是 $\\mu(y)$ 的体积平均值，即算术平均值；并通过 $w(L,y)=\\bar{\\gamma}L$ 锚定位移以设定整个条带的宏观剪切；同时强制 $y$ 方向的周期性。该边界条件在 $x=0$ 处引起了局部牵引力与局部模量之间一个依赖于 $y$ 的失配，这种失配以边界层的形式松弛到体材料内部。\n  - 对于周期性单元上的 PBC，强制 $w$ 在宏观线性部分 $\\bar{\\gamma}x$ 之外，在 $x$ 和 $y$ 两个方向上都具有周期性。\n\n- 使用均质化的各向异性介质和在 SUBC 下诱导的涨落场的单模近似，获取在每种边界条件下有限条带的表观剪切模量 $C_{11}^{\\text{app}}$ 的闭式表达式，该模量由固定宏观剪切 $\\bar{\\gamma}$ 下的能量等效性定义：\n  $$C_{11}^{\\text{app}}=\\frac{2\\mathcal{E}}{\\bar{\\gamma}^2 L},$$\n  其中 $\\mathcal{E}$ 是在相应边界条件下评估的各向异性均质化介质在 $[0,L]\\times[0,1]$ 上的总储存能。证明对于 KUBC 和 PBC，有 $C_{11}^{\\text{app}}=C_{11}$，而对于 SUBC，边界层导致\n  $$C_{11}^{\\text{app}}=C_{11}\\left[1+\\frac{a_1^2}{2\\kappa_1 L}\\left(1-e^{-2\\kappa_1 L}\\right)\\right],$$\n  其中 $a_1$ 是 $x=0$ 处归一化牵引力失配的第一个余弦傅里叶系数的无量纲振幅，由下式给出\n  $$a_1=\\frac{2}{\\bar{\\gamma}}\\int_0^1\\left(\\frac{\\bar{\\mu}}{\\mu(y)}-1\\right)\\cos\\left(2\\pi y\\right)\\,dy,$$\n  其中 $\\bar{\\mu}=f\\mu_1+(1-f)\\mu_2$。\n\n- 为上述双层结构，提供一个用 $\\mu_1, \\mu_2, f$ 表示的、显式的、可用算法评估的 $a_1$ 表达式。\n\n实现一个程序，对于下面的每个测试案例，计算并输出：\n- 边界层厚度 $\\delta$。\n- KUBC下的表观剪切模量 $C_{11}^{\\text{app,KUBC}}$。\n- SUBC下的表观剪切模量 $C_{11}^{\\text{app,SUBC}}$。\n- PBC下的表观剪切模量 $C_{11}^{\\text{app,PBC}}$。\n\n使用上述单模近似。所有量都是无量纲的。您的程序必须将所有测试案例的结果汇总到单行中，以类似JSON的列表的列表形式打印，每个测试案例的顺序为 $[\\delta, C_{11}^{\\text{app,KUBC}}, C_{11}^{\\text{app,SUBC}}, C_{11}^{\\text{app,PBC}}]$，每个浮点数四舍五入到小数点后六位。\n\n测试套件（每个元组为 $(\\mu_1,\\mu_2,f,L,\\bar{\\gamma})$）：\n- 测试 1: $(1.0,50.0,0.3,5.0,0.02)$\n- 测试 2: $(1.0,1.0,0.5,2.0,0.01)$\n- 测试 3: $(0.1,100.0,0.8,3.0,0.05)$\n- 测试 4: $(1.0,100.0,0.5,0.25,0.02)$\n\n最终输出格式：您的程序应生成一个单行，其中包含结果，格式为用方括号括起来的、逗号分隔的列表的列表，例如 $[[r_{11},r_{12},r_{13},r_{14}],[r_{21},r_{22},r_{23},r_{24}],\\dots]$，其中 $r_{ij}$ 是按规定四舍五入的计算浮点数。", "solution": "我们从一个由标量剪切模量场 $\\mu(y)$ 表征的层压材料中的反平面弹性问题开始。平面外位移 $w(x,y)$ 满足从能量\n$$\\mathcal{E}[w]=\\frac{1}{2}\\int_{\\Omega}\\mu(y)\\left(|\\partial_x w|^2+|\\partial_y w|^2\\right)\\,dx\\,dy$$\n的平稳性导出的平衡方程，可得到\n$$\\partial_x\\!\\left(\\mu(y)\\,\\partial_x w\\right)+\\partial_y\\!\\left(\\mu(y)\\,\\partial_y w\\right)=0.$$\n我们关心的是相对于周期而言沿 $y$ 方向的长波特征。对于仅在 $y$ 方向变化的层状介质中的标量扩散（或反平面剪切），经典均质化方法会导出一个等效的均匀但各向异性的介质，其能量密度中作用于 $w$ 梯度上的有效张量为 $\\mathbf{C}^{\\ast}=\\mathrm{diag}(C_{11},C_{22})$：\n$$\\mathcal{E}^{\\ast}[w]=\\frac{1}{2}\\int_{\\Omega}\\left(C_{11}\\,|\\partial_x w|^2+C_{22}\\,|\\partial_y w|^2\\right)\\,dx\\,dy.$$\n有效模量可以根据串联/并联混合法则（或标准的单元问题）推导出来，因为 $x$ 方向的输运平行于分层，而 $y$ 方向的输运垂直于分层。因此，\n$$C_{11}=\\langle \\mu\\rangle = \\int_0^1 \\mu(y)\\,dy = f\\,\\mu_1+(1-f)\\,\\mu_2,$$\n$$C_{22}=\\left\\langle \\frac{1}{\\mu}\\right\\rangle^{-1}=\\left(\\int_0^1 \\frac{1}{\\mu(y)}\\,dy\\right)^{-1}=\\left(\\frac{f}{\\mu_1}+\\frac{1-f}{\\mu_2}\\right)^{-1}.$$\n为评估边界层，我们考虑一个在 $x=0$ 处具有小振幅、沿 $y$ 方向周期性扰动的半无限条带。在均质化介质中，平衡方程变为\n$$C_{11}\\,\\partial_{xx} w + C_{22}\\,\\partial_{yy} w = 0.$$\n寻找位移涨落部分形如 $w^{\\prime}(x,y)=A_n\\,e^{-\\kappa_n x}\\cos(k_n y)$（其中 $k_n=2\\pi n$）的可分离变量解，我们得到\n$$C_{11}\\,\\kappa_n^2 = C_{22}\\,k_n^2 \\quad\\Rightarrow\\quad \\kappa_n = |k_n|\\sqrt{\\frac{C_{22}}{C_{11}}}.$$\n第一个非平凡傅里叶模式（$n=1$）的 $1/e$ 衰减长度是\n$$\\delta=\\frac{1}{\\kappa_1}=\\frac{1}{2\\pi}\\sqrt{\\frac{C_{11}}{C_{22}}}.$$\n这个 $\\delta$ 作为边界层厚度的定量度量。\n\n接下来我们描述边界条件。对于运动学均匀边界条件 (KUBC)，在 $y$ 方向具有周期性的条带 $[0,L]\\times[0,1]$ 被赋予 $w(0,y)=0$ 和 $w(L,y)=\\bar{\\gamma}\\,L$。在均质化介质中，唯一的能量最小化解是 $w(x,y)=\\bar{\\gamma}\\,x$，这意味着没有涨落，因此没有边界层。对于周期性边界条件 (PBC)，在宏观位移 $w=\\bar{\\gamma}\\,x$ 下、$x$ 和 $y$ 方向具有涨落周期性的周期性单元也支持零涨落的均匀解。在这两种情况下，表观模量等于 $C_{11}$。\n\n对于静力学均匀边界条件 (SUBC)，我们在 $x=0$ 处施加一个均匀的宏观牵引力 $\\bar{t}$，其大小等于宏观应力 $\\bar{\\sigma}=\\bar{\\mu}\\,\\bar{\\gamma}$，其中 $\\bar{\\mu}=C_{11}$ 是算术平均值。在 $x=L$ 处，我们施加 $w(L,y)=\\bar{\\gamma}\\,L$ 以设定整个条带的宏观剪切并确保问题的适定性。在 $x=0$ 处，均质化描述中的局部牵引力为 $t(0,y)=C_{11}\\,\\partial_x w(0,y)\\equiv \\bar{t}$；在底层的非均匀描述中，这对应于局部梯度的归一化失配，因为实际的微观牵引力应为 $\\mu(y)\\,\\partial_x w$。为了在均质化框架内工作时编码这种失配的影响，我们通过其傅里叶级数规定了 $x=0$ 处 $x$-梯度中涨落的初始条件。定义归一化的失配函数\n$$r(y)=\\frac{\\bar{\\mu}}{\\mu(y)}-1,$$\n使得 $x=0$ 处的 $x$-梯度涨落为 $\\delta(\\partial_x w)(0,y)=\\bar{\\gamma}\\,r(y)$。$r(y)$ 的第一个余弦傅里叶系数 $a_1$ 是\n$$a_1=\\frac{2}{\\bar{\\gamma}}\\int_{0}^{1}\\delta(\\partial_x w)(0,y)\\,\\cos(2\\pi y)\\,dy=2\\int_{0}^{1}r(y)\\,\\cos(2\\pi y)\\,dy.$$\n对于在 $y\\in[0,f)$ 上 $\\mu(y)=\\mu_1$ 且在 $y\\in[f,1)$ 上 $\\mu(y)=\\mu_2$ 的双层结构，我们显式计算 $a_1$：\n\\begin{align*}\na_1=2\\left[\\int_{0}^{f}\\left(\\frac{\\bar{\\mu}}{\\mu_1}-1\\right)\\cos(2\\pi y)\\,dy+\\int_{f}^{1}\\left(\\frac{\\bar{\\mu}}{\\mu_2}-1\\right)\\cos(2\\pi y)\\,dy\\right]\\\\\n=2\\left[\\left(\\frac{\\bar{\\mu}}{\\mu_1}-1\\right)\\frac{\\sin(2\\pi f)}{2\\pi}+\\left(\\frac{\\bar{\\mu}}{\\mu_2}-1\\right)\\left(0-\\frac{\\sin(2\\pi f)}{2\\pi}\\right)\\right]\\\\\n=\\frac{\\sin(2\\pi f)}{\\pi}\\,\\bar{\\mu}\\left(\\frac{1}{\\mu_1}-\\frac{1}{\\mu_2}\\right).\n\\end{align*}\n在均质化各向异性方程下，第一模式的涨落演化为\n$$\\delta(\\partial_x w)(x,y)=\\bar{\\gamma}\\,a_1\\,e^{-\\kappa_1 x}\\cos(2\\pi y),\\qquad \\partial_y w(x,y)=\\bar{\\gamma}\\,a_1\\,\\frac{k_1}{\\kappa_1}\\,e^{-\\kappa_1 x}\\sin(2\\pi y),$$\n其中两者之间的关系源于分离变量法。超出基准均匀解的、由边界层引起的额外能量是\n\\begin{align*}\n\\Delta \\mathcal{E} = \\frac{1}{2}\\int_{0}^{L}\\int_{0}^{1}\\left[C_{11}\\left(\\delta(\\partial_x w)\\right)^2 + C_{22}\\left(\\partial_y w\\right)^2\\right]\\,dy\\,dx\\\\\n=\\frac{1}{2}\\int_{0}^{L}\\left[C_{11}\\left(\\bar{\\gamma}^2 a_1^2 e^{-2\\kappa_1 x}\\left\\langle \\cos^2(2\\pi y)\\right\\rangle\\right)+ C_{22}\\left(\\bar{\\gamma}^2 a_1^2 \\left(\\frac{k_1}{\\kappa_1}\\right)^2 e^{-2\\kappa_1 x}\\left\\langle \\sin^2(2\\pi y)\\right\\rangle\\right)\\right]dx\\\\\n=\\frac{1}{2}\\int_{0}^{L}\\left[C_{11}\\,\\bar{\\gamma}^2 a_1^2 e^{-2\\kappa_1 x}\\frac{1}{2}+ C_{22}\\,\\bar{\\gamma}^2 a_1^2 \\left(\\frac{k_1}{\\kappa_1}\\right)^2 e^{-2\\kappa_1 x}\\frac{1}{2}\\right]dx\\\\\n=\\frac{1}{4}\\bar{\\gamma}^2 a_1^2 \\int_{0}^{L} e^{-2\\kappa_1 x}\\left(C_{11}+C_{22}\\frac{k_1^2}{\\kappa_1^2}\\right)\\,dx.\n\\end{align*}\n使用色散关系 $C_{11}\\kappa_1^2=C_{22}k_1^2$，我们得到 $C_{22}\\,k_1^2/\\kappa_1^2=C_{11}$，并且括号内的项等于 $2C_{11}$。因此，\n$$\\Delta \\mathcal{E}=\\frac{1}{4}\\bar{\\gamma}^2 a_1^2\\cdot 2C_{11}\\int_{0}^{L} e^{-2\\kappa_1 x}\\,dx=\\frac{C_{11}\\,\\bar{\\gamma}^2\\,a_1^2}{2}\\cdot \\frac{1-e^{-2\\kappa_1 L}}{2\\kappa_1}.$$\n基准均匀能量是 $\\mathcal{E}_0=\\dfrac{1}{2}\\int_0^L\\int_0^1 C_{11}\\,\\bar{\\gamma}^2\\,dy\\,dx=\\dfrac{1}{2}C_{11}\\,\\bar{\\gamma}^2\\,L$。因此，在 SUBC 下，由 $C_{11}^{\\text{app}}=\\dfrac{2(\\mathcal{E}_0+\\Delta \\mathcal{E})}{\\bar{\\gamma}^2\\,L}$ 定义的表观模量为\n\\begin{align*}\nC_{11}^{\\text{app,SUBC}}=\\frac{2}{\\bar{\\gamma}^2 L}\\left(\\frac{1}{2}C_{11}\\,\\bar{\\gamma}^2\\,L+\\frac{C_{11}\\,\\bar{\\gamma}^2\\,a_1^2}{2}\\cdot \\frac{1-e^{-2\\kappa_1 L}}{2\\kappa_1}\\right)\\\\\n=C_{11}\\left[1+\\frac{a_1^2}{2\\,\\kappa_1\\,L}\\left(1-e^{-2\\kappa_1 L}\\right)\\right].\n\\end{align*}\n对于 KUBC 和 PBC，解是均匀的 $w=\\bar{\\gamma}\\,x$，因此 $C_{11}^{\\text{app,KUBC}}=C_{11}^{\\text{app,PBC}}=C_{11}$。\n\n每个测试案例 $(\\mu_1,\\mu_2,f,L,\\bar{\\gamma})$ 的算法摘要：\n- 计算 $C_{11}=f\\,\\mu_1+(1-f)\\,\\mu_2$。\n- 计算 $C_{22}=\\left(\\dfrac{f}{\\mu_1}+\\dfrac{1-f}{\\mu_2}\\right)^{-1}$。\n- 计算 $\\kappa_1=2\\pi\\sqrt{C_{22}/C_{11}}$，然后 $\\delta=1/\\kappa_1=\\dfrac{1}{2\\pi}\\sqrt{C_{11}/C_{22}}$。\n- 计算 $a_1=\\dfrac{\\sin(2\\pi f)}{\\pi}\\,C_{11}\\left(\\dfrac{1}{\\mu_1}-\\dfrac{1}{\\mu_2}\\right)$。\n- 计算 $C_{11}^{\\text{app,KUBC}}=C_{11}$ 和 $C_{11}^{\\text{app,PBC}}=C_{11}$。\n- 计算 $C_{11}^{\\text{app,SUBC}}=C_{11}\\left[1+\\dfrac{a_1^2}{2\\,\\kappa_1\\,L}\\left(1-e^{-2\\kappa_1 L}\\right)\\right]$。\n\n数值考虑：对于 $\\mu_1,\\mu_20$ 和 $f\\in(0,1)$，所有量都是无量纲的正数。当 $\\mu_1=\\mu_2$ 或 $f\\in\\{0,1\\}$ 时，$a_1$ 的表达式为零，在这些情况下 $C_{11}^{\\text{app,SUBC}}=C_{11}$。边界层厚度 $\\delta$ 仅取决于比值 $C_{11}/C_{22}$，并等于算术平均值和调和平均值的几何平均值乘以 $1/(2\\pi)$。使用标准浮点运算可以稳健地计算结果。\n\n最终程序为指定的测试套件实现了这些步骤，并打印一个包含结果列表的单行，每个结果都是一个列表 $[\\delta, C_{11}^{\\text{app,KUBC}}, C_{11}^{\\text{app,SUBC}}, C_{11}^{\\text{app,PBC}}]$，其中每个条目都四舍五入到小数点后六位。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef compute_results(mu1, mu2, f, L, gamma_bar):\n    # Effective moduli of homogenized anisotropic anti-plane medium\n    C11 = f * mu1 + (1.0 - f) * mu2  # arithmetic mean\n    C22 = 1.0 / (f / mu1 + (1.0 - f) / mu2)  # harmonic mean\n\n    # Decay rate and boundary layer thickness for first Fourier mode\n    k1 = 2.0 * np.pi\n    if C11 > 1e-12: # Avoid division by zero for pathological cases\n        kappa1 = k1 * np.sqrt(C22 / C11)\n        delta = 1.0 / kappa1 if kappa1 > 1e-12 else float('inf')\n    else:\n        kappa1 = 0\n        delta = float('inf')\n\n\n    # First cosine coefficient of normalized traction mismatch\n    # a1 = (sin(2*pi*f)/pi) * C11 * (1/mu1 - 1/mu2)\n    if abs(mu1-mu2)  1e-12:\n        a1 = 0.0\n    else:\n        a1 = (np.sin(2.0 * np.pi * f) / np.pi) * C11 * (1.0 / mu1 - 1.0 / mu2)\n\n    # Apparent modulus under KUBC and PBC\n    C11_app_KUBC = C11\n    C11_app_PBC = C11\n\n    # Apparent modulus under SUBC with single-mode boundary layer correction\n    if L > 1e-12 and kappa1 > 1e-12:\n        correction_factor = (a1 ** 2) * (1.0 - np.exp(-2.0 * kappa1 * L)) / (2.0 * kappa1 * L)\n    else:\n        correction_factor = 0.0\n    C11_app_SUBC = C11 * (1.0 + correction_factor)\n\n    return [delta, C11_app_KUBC, C11_app_SUBC, C11_app_PBC]\n\ndef solve():\n    # Define the test cases from the problem statement: (mu1, mu2, f, L, gamma_bar)\n    test_cases = [\n        (1.0, 50.0, 0.3, 5.0, 0.02),\n        (1.0, 1.0, 0.5, 2.0, 0.01),\n        (0.1, 100.0, 0.8, 3.0, 0.05),\n        (1.0, 100.0, 0.5, 0.25, 0.02),\n    ]\n\n    results = []\n    for mu1, mu2, f, L, gamma_bar in test_cases:\n        res = compute_results(mu1, mu2, f, L, gamma_bar)\n        # Round to six decimal places as required\n        res_rounded = [float(f\"{x:.6f}\") for x in res]\n        results.append(res_rounded)\n\n    # Format output as a single-line JSON-like list with no spaces\n    # Convert to string manually to ensure no spaces\n    def list_to_str(lst):\n        # Format each number to have 6 decimal places.\n        items = [f\"{x:.6f}\" for x in lst]\n        return \"[\" + \",\".join(items) + \"]\"\n    \n    output_parts = []\n    for r_list in results:\n        # Manually format each list to avoid spaces and ensure .6f for all numbers\n        str_items = [f\"{val:.6f}\" for val in r_list]\n        output_parts.append(\"[\" + \",\".join(str_items) + \"]\")\n    \n    print(\"[\" + \",\".join(output_parts) + \"]\")\n\nsolve()\n```", "id": "2664005"}]}