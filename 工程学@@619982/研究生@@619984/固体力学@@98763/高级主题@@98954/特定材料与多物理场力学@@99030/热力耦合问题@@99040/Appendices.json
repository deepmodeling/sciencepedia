{"hands_on_practices": [{"introduction": "本练习提供了从第一性原理推导解析解的基础实践。它处理一个各向异性材料的静态热弹性问题，要求你仔细应用平衡方程、运动学关系和本构方程。解决这个问题将锻炼你在热载荷下分析约束结构中应力状态的核心技能。[@problem_id:2625954]", "problem": "一根半径为 $R$、长度为 $L$ 的均匀实心圆柱杆由线性热弹性、横向各向同性固体材料制成，其材料对称轴与圆柱轴线（取为 $z$ 轴）重合。该材料的特性由以下参数表征：轴向杨氏模量 $E_{L}$、横向平面杨氏模量 $E_{T}$、泊松比 $\\nu_{TL}$（轴向应力引起的横向应变）和 $\\nu_{TT}$（一个平面内方向的应力在与之正交的平面内方向上引起的横向应变），以及热膨胀系数 $\\alpha_{L}$（轴向）和 $\\alpha_{T}$（横向）。互易条件 $\\nu_{TL}/E_{L}=\\nu_{LT}/E_{T}$ 成立，其中 $\\nu_{LT}$ 表示由横向应力引起的轴向应变。该杆从一个无应力参考状态开始经历一个均匀的温升 $\\Delta T$。不存在体力。\n\n位于 $r=R$ 的圆柱侧表面无面力。该杆受到轴向约束，使得端部支座强制其宏观轴向伸长为零。该杆足够细长，因此可以忽略端部效应，并且内部应力和应变场可以视为在轴向上是均匀的，在横截面上是轴对称的。假设小应变、小转动和线性热弹性。\n\n仅从线性动量平衡、小应变的运动学关系以及柔度形式的横向各向同性固体线性各向异性热弹性定义出发，确定内部的轴向应力 $\\sigma_{z}$ 和横截面上的径向应力 $\\sigma_{r}(r)$。将您的最终结果表示为用给定材料常数和温升表示的解析表达式。将轴向和径向应力报告为一个二元行矩阵 $\\big[\\sigma_{z}\\ \\sigma_{r}\\big]$。应力以国际单位制（SI）中的帕斯卡（Pascals）表示。如果任何简化消除了对某些给定常数的依赖，请在最终表达式中反映这一点。最终答案必须是单一的解析表达式；不要提供不等式或方程。", "solution": "问题的解决遵循以下逻辑步骤：\n\n1.  **控制方程与简化**: 根据问题的轴对称和轴向均匀假设，静态动量平衡方程在柱坐标系下简化为单一的径向平衡方程：$\\frac{d \\sigma_{rr}}{d r} + \\frac{\\sigma_{rr} - \\sigma_{\\theta\\theta}}{r} = 0$。剪切应力分量均为零。\n\n2.  **运动学与全局约束**: “零宏观轴向伸长”的全局约束意味着常数轴向应变 $\\epsilon_{zz}$ 必须为零，即 $\\epsilon_{zz} = 0$。\n\n3.  **求解横向应力**: 径向平衡方程的通解形式为经典的Lamé解。对于实心圆柱体，为了保证中心 $r=0$ 处的应力有限，解必须简化为 $\\sigma_{rr}$ 和 $\\sigma_{\\theta\\theta}$ 均为常数。再应用侧表面 $r=R$ 无面力的边界条件（$\\sigma_{rr}(R)=0$），可以确定这两个常数必须为零。因此，径向应力和环向应力在杆内处处为零：\n    $$ \\sigma_{rr}(r) = 0 \\quad \\text{和} \\quad \\sigma_{\\theta\\theta}(r) = 0 $$\n\n4.  **求解轴向应力**: 将 $\\epsilon_{zz}=0$、$\\sigma_{rr}=0$ 和 $\\sigma_{\\theta\\theta}=0$ 代入横向各向同性材料的轴向本构方程：\n    $$ \\epsilon_{zz} = \\frac{1}{E_L}\\sigma_{zz} - \\frac{\\nu_{TL}}{E_L}(\\sigma_{rr} + \\sigma_{\\theta\\theta}) + \\alpha_L \\Delta T $$\n    代入后得到：\n    $$ 0 = \\frac{1}{E_L}\\sigma_{zz} - 0 + \\alpha_L \\Delta T $$\n    解出轴向应力 $\\sigma_{zz}$：\n    $$ \\sigma_{zz} = -E_L \\alpha_L \\Delta T $$\n    该结果表明，在此特定约束和加载条件下，轴向应力为常数，且仅依赖于轴向材料属性，而径向应力为零。因此，所求的应力矩阵为 $[-E_L \\alpha_L \\Delta T \\ \\ 0]$。", "answer": "$$\n\\boxed{\n\\begin{pmatrix}\n-E_{L} \\alpha_{L} \\Delta T & 0\n\\end{pmatrix}\n}\n$$", "id": "2625954"}, {"introduction": "从静态问题转向动态现象，本练习引入了量纲分析这一强大概念。通过比较机械加载和热扩散的特征时间尺度，你将推导出一个区分绝热（高频）和等温（低频）行为的关键准则。这种分析方法对于简化复杂的动态问题和在没有进行完整数值模拟的情况下获得物理洞察至关重要。[@problem_id:2625916]", "problem": "一个特征长度为 $L$ 的均匀、各向同性的线性热弹性固体，在角频率为 $\\omega$ 的空间均匀、时谐单轴应变作用下。材料属性为热导率 $k$、质量密度 $\\rho$ 和恒定构型比热容 $c$。假设在均匀参考温度附近存在小扰动，因此线性化方法适用。\n\n从为具有傅里叶热传导的热弹性固体所写的局部能量守恒方程出发：瞬态储热与热传导之间的主导阶热平衡由形如 $\\rho c\\,\\dot{T} = k \\nabla^{2} T + \\text{(热机源)}$ 的方程控制。此处，绝热假设被定义为这样一种状态：在一个机械振荡周期内，热传导可以忽略不计，因此由机械过程引起的局部温度变化在此期间不会显著扩散。\n\n仅使用量纲分析和基于以下特征尺度：\n- 机械时间尺度 $t_{\\text{mech}} = 1/\\omega$，\n- 热扩散时间尺度 $t_{\\text{th}} = L^{2}\\rho c/k$，\n\n推导动态加载过程中绝热假设有效的判据，并通过条件 $t_{\\text{mech}} = t_{\\text{th}}$ 定义划分绝热与非绝热（扩散）行为边界的临界角频率 $\\omega_{c}$。\n\n你的最终答案必须是临界角频率 $\\omega_{c}$ 的闭式解析表达式。最终答案以弧度/秒为单位。不要在最终的方框表达式内包含单位。", "solution": "推导临界角频率 $\\omega_{c}$ 的过程如下，该频率标志着绝热和非绝热（扩散）热响应之间的转变。\n\n1.  **定义特征时间尺度**:\n    问题给出了两个关键的特征时间尺度：\n    -   **机械时间尺度** $t_{\\text{mech}}$，代表单个机械振荡周期的时间，定义为 $t_{\\text{mech}} = 1/\\omega$。\n    -   **热扩散时间尺度** $t_{\\text{th}}$，代表热量在特征长度 $L$ 上扩散所需的时间，定义为 $t_{\\text{th}} = L^{2}\\rho c/k$。\n\n2.  **绝热条件的物理意义**:\n    绝热假设适用于热扩散所需时间远长于机械振荡周期的过程。这意味着在一个周期内，由机械变形产生的热量没有足够的时间通过传导散失。数学上，这表示为：\n    $$ t_{\\text{th}} \\gg t_{\\text{mech}} \\quad \\implies \\quad \\frac{L^{2}\\rho c}{k} \\gg \\frac{1}{\\omega} \\quad \\implies \\quad \\omega \\gg \\frac{k}{L^{2}\\rho c} $$\n    因此，绝热状态对应于高频加载。\n\n3.  **定义临界频率**:\n    划分绝热与非绝热行为的边界，自然地由两个特征时间尺度相等的条件来定义：\n    $$ t_{\\text{th}} = t_{\\text{mech}} $$\n    在该边界处，角频率为临界角频率 $\\omega_{c}$。代入表达式：\n    $$ \\frac{L^{2}\\rho c}{k} = \\frac{1}{\\omega_{c}} $$\n\n4.  **求解临界频率**:\n    对上述方程进行代数重排，即可得到临界角频率 $\\omega_{c}$ 的表达式：\n    $$ \\omega_{c} = \\frac{k}{L^{2}\\rho c} $$", "answer": "$$\n\\boxed{\\frac{k}{L^{2} \\rho c}}\n$$", "id": "2625916"}, {"introduction": "最后的这项实践连接了理论与应用，指导你为一个瞬态、耦合热弹性问题开发有限元代码。你将使用后向欧拉法建立离散系统，并推导整体求解器所需的残差和雅可比矩阵。这项练习代表了现代工程师和研究人员的一项关键技能，他们依赖数值模拟来解决复杂的、真实世界的热力学挑战。[@problem_id:2625915]", "problem": "您需要为一维瞬态小应变热弹性杆，建立并实现一个整体式时间离散和空间离散方案。任务是推导、编程并验证在后向欧拉时间积分方案下，位移场和温度场的完全耦合离散残差向量及其雅可比矩阵，该系统以整体式（完全耦合）方式求解。\n\n从以下基本原理出发：\n- 线性动量守恒（准静态）：应力散度加体力为零。在一维情况下，表示为 $\\,\\partial_x \\sigma + b = 0\\,$。\n- 能量守恒（热力学第一定律），包含 Fourier 热传导和热弹性耦合：内能的变化率等于传导功率和热源。在一维情况下，对于符合 Clausius-Duhem 不等式的可逆热弹性本构选择，可以表示为 $\\,\\rho c \\,\\dot{T} + \\mathcal{B}\\,\\dot{\\varepsilon} - \\partial_x\\!\\left(k\\,\\partial_x T\\right) - r = 0\\,$，其中 $\\,\\mathcal{B}\\,$ 是您的本构拟设所蕴含的能量热弹性耦合系数（需在您的推导中明确）。\n- 小应变运动学：在一维情况下 $\\,\\varepsilon = \\partial_x u\\,$。\n- 线性热弹性本构响应，源于一个假设应变和相对于参考温度的温差呈二次关系的自由能密度。请确保您的力学本构律和能量方程中的耦合项是热力学共轭的（即，它们由同一个自由能导出，从而保证在连续介质层面上的 Maxwell 对称性）。\n\n您的空间离散必须在长度为 $\\,L\\,$、横截面积恒为 $\\,A\\,$ 的杆的均匀网格上使用标准的双节点线性有限元。在每个单元上使用等参形函数 $\\,N_1(x)\\,$ 和 $\\,N_2(x)\\,$，对于长度为 $\\,h\\,$ 的单元，$\\,\\partial_x N_a\\,$ 在单元内是常数。所有单元级积分必须精确计算（您可以利用对于所选单元，相关被积函数最多是 $\\,x\\,$ 的线性函数这一事实）。\n\n您的时间离散必须是在时间步长为 $\\,\\Delta t\\,$、从时间层 $\\,n\\,$ 到 $\\,n+1\\,$ 的后向欧拉法，并以整体式方式应用于耦合系统。将时间层 $\\,n\\,$ 和 $\\,n+1\\,$ 的节点位移和温度向量表示为 $\\,\\mathbf{u}^n\\,$, $\\,\\mathbf{u}^{n+1}\\,$, $\\,\\mathbf{T}^n\\,$ 和 $\\,\\mathbf{T}^{n+1}\\,$。采用准静态力学（无惯性项），并在能量守恒中包含一致的热弹性耦合项。\n\n您的任务是：\n1) 从给定的基本原理出发，推导一个关于参考温度 $\\,T_0\\,$ 的热力学一致的一维线性热弹性自由能密度 $\\,\\psi(\\varepsilon, T)\\,$，该自由能密度能导出一个线性力学本构律 $\\,\\sigma(\\varepsilon, T)\\,$ 和一个带有耦合项 $\\,\\mathcal{B}\\,\\dot{\\varepsilon}\\,$ 的能量方程。请明确陈述由您的选择所蕴含的 $\\,\\sigma(\\varepsilon, T)\\,$ 和耦合系数 $\\,\\mathcal{B}\\,$。\n2) 为单个时间步上的整体式问题编写有限元弱形式，并推导组合后的全局离散残差向量 $\\,\\mathbf{R}(\\mathbf{y})\\,$ 及其关于未知量堆叠向量 $\\,\\mathbf{y} = \\begin{bmatrix}\\mathbf{u}^{n+1}\\\\ \\mathbf{T}^{n+1}\\end{bmatrix}\\,$ 的雅可比矩阵 $\\,\\mathbf{J} = \\partial \\mathbf{R} / \\partial \\mathbf{y}\\,$。您的表达式必须以可以相加组合的标准单元矩阵和向量来表示。除非指定了 Dirichlet 数据，否则强制均匀力学体力 $\\,b=0\\,$、热源 $\\,r=0\\,$ 和绝热边界。对位移和温度使用下文测试套件中指定的本质（Dirichlet）边界条件。\n3) 实现一个程序，为以下测试用例组装全局残差和雅可比矩阵，通过消元法施加 Dirichlet 边界条件（即，为自由度形成缩减后的残差和雅可比矩阵），在给定的试验状态 $(\\mathbf{u}^{n+1}, \\mathbf{T}^{n+1})$ 下评估残差，并通过对缩减系统进行有限差分来数值验证雅可比矩阵。对每个测试用例，计算：\n   - 缩减残差向量的欧几里得范数（平方和的平方根）$\\,\\lVert \\mathbf{R}_\\text{red} \\rVert_2\\,$。\n   - 解析缩减雅可比矩阵与有限差分近似之间的差值的弗罗贝尼乌斯范数 $\\,\\lVert \\mathbf{J}_\\text{red} - \\mathbf{J}_\\text{FD} \\rVert_F\\,$，使用前向差分步长 $\\,h = 10^{-8}\\,$，分量式地应用于缩减未知向量。\n   在其中一个测试用例中，您还必须报告缩减雅可比矩阵的非对角耦合块的弗罗贝尼乌斯范数 $\\,\\lVert \\mathbf{J}_{uT} \\rVert_F\\,$ 和 $\\,\\lVert \\mathbf{J}_{Tu} \\rVert_F\\,$，并返回它们的组合欧几里得范数 $\\,\\sqrt{\\lVert \\mathbf{J}_{uT} \\rVert_F^2 + \\lVert \\mathbf{J}_{Tu} \\rVert_F^2}\\,$。\n\n使用以下测试套件，每个都以国际单位制（SI）给出。在每个测试用例中，所有物理参数在空间和时间上都是常数。杆具有均匀网格和恒定横截面。时间 $\\,n\\,$ 的初始条件为 $\\,\\mathbf{u}^n = \\mathbf{0}\\,$ 和 $\\,\\mathbf{T}^n = T_0 \\,\\mathbf{1}\\,$。时间 $\\,n+1\\,$ 的试验状态为 $\\,\\mathbf{u}^{n+1} = \\mathbf{0}\\,$，$\\,\\mathbf{T}^{n+1}\\,$ 等于在指定的两端温度之间进行的线性插值。对于所有情况，施加位移 Dirichlet 数据 $\\,u(0) = 0\\,\\mathrm{m}\\,$ 和 $\\,u(L) = 0\\,\\mathrm{m}\\,$，以及温度 Dirichlet 数据 $\\,T(0) = T_L\\,\\mathrm{K}\\,$ 和 $\\,T(L) = T_R\\,\\mathrm{K}\\,$。\n\n- 测试用例 A（标准情况）：$\\,L = 1\\,\\mathrm{m}\\,$, $\\,A = 1\\,\\mathrm{m}^2\\,$, $\\,N = 3\\,$ 个节点, $\\,E = 210\\times 10^9\\,\\mathrm{Pa}\\,$, $\\,\\alpha = 1.2\\times 10^{-5}\\,\\mathrm{K}^{-1}\\,$, $\\,\\rho = 7800\\,\\mathrm{kg/m^3}\\,$, $\\,c = 500\\,\\mathrm{J/(kg\\cdot K)}\\,$, $\\,k = 45\\,\\mathrm{W/(m\\cdot K)}\\,$, $\\,T_0 = 293\\,\\mathrm{K}\\,$, $\\,\\Delta t = 0.25\\,\\mathrm{s}\\,$, $\\,T_L = 300\\,\\mathrm{K}\\,$, $\\,T_R = 280\\,\\mathrm{K}\\,$。\n- 测试用例 B（解耦边界情况）：与测试用例 A 相同，但 $\\,\\alpha = 0\\,$。对于此情况，除了上述两个量之外，您还必须计算并返回缩减雅可比矩阵的非对角耦合块的组合欧几里得范数 $\\,\\sqrt{\\lVert \\mathbf{J}_{uT} \\rVert_F^2 + \\lVert \\mathbf{J}_{Tu} \\rVert_F^2}\\,$。\n- 测试用例 C（热传导受限与参数变化）：$\\,L = 1\\,\\mathrm{m}\\,$, $\\,A = 0.01\\,\\mathrm{m}^2\\,$, $\\,N = 4\\,$ 个节点, $\\,E = 70\\times 10^9\\,\\mathrm{Pa}\\,$, $\\,\\alpha = 2.0\\times 10^{-5}\\,\\mathrm{K}^{-1}\\,$, $\\,\\rho = 2700\\,\\mathrm{kg/m^3}\\,$, $\\,c = 900\\,\\mathrm{J/(kg\\cdot K)}\\,$, $\\,k = 10^{-6}\\,\\mathrm{W/(m\\cdot K)}\\,$, $\\,T_0 = 300\\,\\mathrm{K}\\,$, $\\,\\Delta t = 10\\,\\mathrm{s}\\,$, $\\,T_L = 400\\,\\mathrm{K}\\,$, $\\,T_R = 350\\,\\mathrm{K}\\,$。\n\n不涉及角度单位。数值答案应报告为不带单位字符串的实数。\n\n最终输出格式：您的程序应生成一行输出，其中包含一个用方括号括起来的逗号分隔列表的结果，顺序如下：对于测试用例 A，首先是残差范数，然后是雅可比矩阵差值范数；对于测试用例 B，首先是残差范数，然后是雅可比矩阵差值范数，然后是组合的非对角范数；对于测试用例 C，首先是残差范数，然后是雅可比矩阵差值范数。例如，输出格式必须严格为 $\\,\\left[\\text{A\\_res},\\text{A\\_jac},\\text{B\\_res},\\text{B\\_jac},\\text{B\\_off},\\text{C\\_res},\\text{C\\_jac}\\right]\\,$ 的形式，其中每个占位符是如上定义的浮点数。", "solution": "本问题的求解过程分为四个主要部分：从亥姆霍兹自由能推导热力学一致的本构关系，建立弱形式，进行时空离散，最后推导整体式求解所需的残差向量和雅可比矩阵。\n\n### 第 1 部分：热力学一致的本构模型\n\n我们首先假设一个亥姆霍兹自由能密度 $\\psi$（单位体积），它对于其状态变量，即小应变 $\\varepsilon$ 和相对于参考温度 $T_0$ 的温差 $\\Delta T = T - T_0$，是二次的。线性热弹性的一个标准选择是：\n$$ \\psi(\\varepsilon, T) = \\psi_0 - s_0(T - T_0) + \\frac{1}{2}E\\varepsilon^2 - E\\alpha\\varepsilon(T-T_0) - \\frac{1}{2}\\frac{\\rho c}{T_0}(T-T_0)^2 $$\n其中 $E$ 是杨氏模量，$\\alpha$ 是热膨胀系数，$\\rho$ 是质量密度， $c$ 是等应变比热容，$\\psi_0, s_0$ 是在参考状态 $(\\varepsilon=0, T=T_0)$ 下的自由能和熵。\n\n应力 $\\sigma$ 和熵密度 $s$ 的本构关系作为应变和温度的热力学共轭量被导出：\n$$ \\sigma = \\frac{\\partial \\psi}{\\partial \\varepsilon} \\quad , \\quad s = -\\frac{\\partial \\psi}{\\partial T} $$\n将这些定义应用于我们选择的 $\\psi$：\n$$ \\sigma(\\varepsilon, T) = E\\varepsilon - E\\alpha(T - T_0) = E(\\varepsilon - \\alpha(T-T_0)) $$\n这是 Duhamel-Neumann 形式的线性热弹性本构律。\n$$ s(\\varepsilon, T) = s_0 + E\\alpha\\varepsilon + \\frac{\\rho c}{T_0}(T-T_0) $$\n热力学第一定律与熵平衡 $T\\dot{s} = -\\partial_x q + r$（其中 $q$ 是热通量，r 是热源）相结合，给出了能量方程。通过在参考温度附近对 $T\\dot{s}$ 项进行线性化，$T\\dot{s} \\approx T_0\\dot{s}$，我们得到：\n$$ T_0 \\dot{s} = T_0 \\left( E\\alpha\\dot{\\varepsilon} + \\frac{\\rho c}{T_0}\\dot{T} \\right) = \\rho c \\dot{T} + T_0 E \\alpha \\dot{\\varepsilon} $$\n使用傅里叶热传导定律 $q = -k\\,\\partial_x T$，能量平衡方程变为：\n$$ \\rho c \\dot{T} + T_0 E \\alpha \\dot{\\varepsilon} - \\partial_x(k\\,\\partial_x T) - r = 0 $$\n将其与问题陈述的形式 $\\rho c \\dot{T} + \\mathcal{B}\\dot{\\varepsilon} - \\partial_x(k\\,\\partial_x T) - r = 0$ 相比较，我们确定热力学一致的耦合系数为：\n$$ \\mathcal{B} = T_0 E \\alpha $$\n\n### 第 2 和 3 部分：弱形式与离散化\n\n对于横截面积为 $A$ 的杆，在零体力（$b=0$）和零热源（$r=0$）的情况下，耦合系统的一维强形式为：\n1.  **动量守恒：** $\\partial_x \\sigma = 0 \\quad \\forall x \\in (0, L)$\n2.  **能量守恒：** $\\rho c \\dot{T} + T_0 E \\alpha \\dot{\\varepsilon} - \\partial_x(k\\,\\partial_x T) = 0 \\quad \\forall x \\in (0, L)$\n\n我们为相应的方程引入检验函数 $w_u$ 和 $w_T$，并在定义域上积分，应用分部积分来降低空间导数的阶数。这产生了弱形式：\n$$ \\int_0^L (\\partial_x w_u) \\sigma A \\, dx = \\left[ w_u \\sigma A \\right]_0^L $$\n$$ \\int_0^L w_T(\\rho c \\dot{T} + T_0 E \\alpha \\dot{\\varepsilon}) A \\, dx + \\int_0^L (\\partial_x w_T) k (\\partial_x T) A \\, dx = \\left[ -w_T q A \\right]_0^L $$\n边界项由本质（Dirichlet）边界条件满足，或对应于自然边界条件（牵引力和热通量）。\n\n我们使用双节点线性有限元进行空间离散。单元 $e$ 内的位移 $u$ 和温度 $T$ 场通过形函数 $\\mathbf{N}(x)$ 从节点值 $\\mathbf{u}^e$ 和 $\\mathbf{T}^e$ 插值得到：\n$$ u(x) = \\mathbf{N}(x) \\mathbf{u}^e \\quad , \\quad T(x) = \\mathbf{N}(x) \\mathbf{T}^e $$\n应变为 $\\varepsilon = \\partial_x u = (\\partial_x \\mathbf{N}) \\mathbf{u}^e = \\mathbf{B}^e \\mathbf{u}^e$。对于长度为 $h$ 的线性单元，$\\mathbf{B}^e = \\frac{1}{h}[-1, 1]$。\n\n对于时间离散，我们应用后向欧拉格式。时间导数在时间 $t_{n+1}$ 处近似为 $\\dot{f} \\approx (f^{n+1} - f^n)/\\Delta t$。\n将有限元近似代入在时间 $t_{n+1}$ 评估的弱形式，即可得到关于未知状态 $(\\mathbf{u}^{n+1}, \\mathbf{T}^{n+1})$ 的全离散方程组。\n\n### 第 4 部分：离散残差与雅可比矩阵\n\n整体式系统求解的是未知量的堆叠向量 $\\mathbf{y}^{n+1} = [\\mathbf{u}^{n+1}, \\mathbf{T}^{n+1}]^T$。我们构建残差向量 $\\mathbf{R}(\\mathbf{y}^{n+1})$，其对于一个解必须为零。全局残差是由单元级贡献组装而成的。\n\n**单元级贡献**：对于具有节点 $(1, 2)$ 的单元 $e$，残差和矩阵为：\n-   **力学残差** $\\mathbf{R}_u^e$：\n    $$ \\mathbf{R}_u^e = \\mathbf{K}_{uu}^e \\mathbf{u}^{n+1, e} + \\mathbf{K}_{uT}^e \\mathbf{T}^{n+1, e} + \\mathbf{f}_{u,th}^e $$\n    其中 $\\mathbf{K}_{uu}^e = \\frac{AE}{h}\\begin{bmatrix}1 & -1 \\\\ -1 & 1\\end{bmatrix}$ 是刚度矩阵，$\\mathbf{K}_{uT}^e = -\\frac{AE\\alpha}{2}\\begin{bmatrix}-1 & -1 \\\\ 1 & 1\\end{bmatrix}$ 是力-热耦合矩阵，$\\mathbf{f}_{u,th}^e = AE\\alpha T_0\\begin{bmatrix}-1\\\\1\\end{bmatrix}$ 是一个恒定的热力向量。\n-   **热残差** $\\mathbf{R}_T^e$：\n    $$ \\mathbf{R}_T^e = \\left(\\frac{1}{\\Delta t}\\mathbf{C}_{TT}^e + \\mathbf{K}_{TT}^e\\right)\\mathbf{T}^{n+1, e} + \\frac{1}{\\Delta t}\\mathbf{K}_{Tu}^e \\mathbf{u}^{n+1, e} - \\frac{1}{\\Delta t}\\left(\\mathbf{C}_{TT}^e\\mathbf{T}^{n, e} + \\mathbf{K}_{Tu}^e\\mathbf{u}^{n, e}\\right) $$\n    其中 $\\mathbf{C}_{TT}^e = \\frac{A\\rho c h}{6}\\begin{bmatrix}2 & 1 \\\\ 1 & 2\\end{bmatrix}$ 是热容矩阵，$\\mathbf{K}_{TT}^e = \\frac{Ak}{h}\\begin{bmatrix}1 & -1 \\\\ -1 & 1\\end{bmatrix}$ 是热传导矩阵，$\\mathbf{K}_{Tu}^e = \\frac{AT_0E\\alpha}{2}\\begin{bmatrix}-1 & 1 \\\\ -1 & 1\\end{bmatrix}$ 是热-力耦合矩阵。\n\n**雅可比矩阵**, $\\mathbf{J} = \\partial \\mathbf{R}/\\partial \\mathbf{y}^{n+1}$，对于牛顿法至关重要。它是一个由单元雅可比矩阵组装而成的 $2 \\times 2$ 分块矩阵：\n$$ \\mathbf{J} = \\begin{bmatrix} \\mathbf{J}_{uu} & \\mathbf{J}_{uT} \\\\ \\mathbf{J}_{Tu} & \\mathbf{J}_{TT} \\end{bmatrix} $$\n全局分块矩阵由这些单元级矩阵组装而成：\n-   $\\mathbf{J}_{uu}^e = \\frac{\\partial \\mathbf{R}_u^e}{\\partial \\mathbf{u}^{n+1, e}} = \\mathbf{K}_{uu}^e$\n-   $\\mathbf{J}_{uT}^e = \\frac{\\partial \\mathbf{R}_u^e}{\\partial \\mathbf{T}^{n+1, e}} = \\mathbf{K}_{uT}^e$\n-   $\\mathbf{J}_{Tu}^e = \\frac{\\partial \\mathbf{R}_T^e}{\\partial \\mathbf{u}^{n+1, e}} = \\frac{1}{\\Delta t}\\mathbf{K}_{Tu}^e$\n-   $\\mathbf{J}_{TT}^e = \\frac{\\partial \\mathbf{R}_T^e}{\\partial \\mathbf{T}^{n+1, e}} = \\frac{1}{\\Delta t}\\mathbf{C}_{TT}^e + \\mathbf{K}_{TT}^e$\n\n注意耦合矩阵的物理解释：$\\mathbf{K}_{uT}$ 表示由温度场产生的机械应力/力，而 $\\mathbf{K}_{Tu}$ 表示由机械变形速率（应变率）产生的热量。对于此标准公式，雅可比矩阵通常是非对称的（$\\mathbf{J}_{uT} \\neq \\mathbf{J}_{Tu}^T$）。\n\n实现将执行以下步骤：为每个测试用例组装全局残差 $\\mathbf{R}$ 和雅可比矩阵 $\\mathbf{J}$，通过将系统划分为自由和固定自由度来施加 Dirichlet 边界条件，并对得到的缩减系统计算所需的范数。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Main solver function to run test cases for the coupled thermoelastic problem.\n    \"\"\"\n\n    test_cases = [\n        # Test Case A (happy path)\n        {\n            'L': 1.0, 'A': 1.0, 'N_nodes': 3, 'E': 210e9, 'alpha': 1.2e-5,\n            'rho': 7800.0, 'c': 500.0, 'k': 45.0, 'T0': 293.0, 'dt': 0.25,\n            'TL': 300.0, 'TR': 280.0, 'case_id': 'A'\n        },\n        # Test Case B (decoupling edge case)\n        {\n            'L': 1.0, 'A': 1.0, 'N_nodes': 3, 'E': 210e9, 'alpha': 0.0,\n            'rho': 7800.0, 'c': 500.0, 'k': 45.0, 'T0': 293.0, 'dt': 0.25,\n            'TL': 300.0, 'TR': 280.0, 'case_id': 'B'\n        },\n        # Test Case C (conduction-limited and parameter variation)\n        {\n            'L': 1.0, 'A': 0.01, 'N_nodes': 4, 'E': 70e9, 'alpha': 2.0e-5,\n            'rho': 2700.0, 'c': 900.0, 'k': 1e-6, 'T0': 300.0, 'dt': 10.0,\n            'TL': 400.0, 'TR': 350.0, 'case_id': 'C'\n        },\n    ]\n\n    results = []\n    for params in test_cases:\n        case_results = run_case(**params)\n        results.extend(case_results)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\ndef run_case(L, A, N_nodes, E, alpha, rho, c, k, T0, dt, TL, TR, case_id):\n    \"\"\"\n    Assembles and evaluates the residual and Jacobian for a single test case.\n    \"\"\"\n    N_el = N_nodes - 1\n    h = L / N_el\n    total_dofs = 2 * N_nodes\n\n    # --- Initialize global matrices and vectors ---\n    K_uu = np.zeros((N_nodes, N_nodes))\n    K_uT = np.zeros((N_nodes, N_nodes))\n    K_Tu = np.zeros((N_nodes, N_nodes))\n    C_TT = np.zeros((N_nodes, N_nodes))\n    K_TT = np.zeros((N_nodes, N_nodes))\n    f_u_th = np.zeros(N_nodes)\n\n    # --- Assembly loop over elements ---\n    for i in range(N_el):\n        nodes = [i, i + 1]\n        \n        # Element matrices\n        K_uu_e = (A * E / h) * np.array([[1, -1], [-1, 1]])\n        K_uT_e = -(A * E * alpha / 2) * np.array([[-1, -1], [1, 1]])\n        f_u_th_e = A * E * alpha * T0 * np.array([-1, 1])\n        C_TT_e = (A * rho * c * h / 6) * np.array([[2, 1], [1, 2]])\n        K_TT_e = (A * k / h) * np.array([[1, -1], [-1, 1]])\n        K_Tu_e = (A * T0 * E * alpha / 2) * np.array([[-1, 1], [-1, 1]])\n\n        # Assemble into global matrices/vectors\n        for r_local, r_global in enumerate(nodes):\n            f_u_th[r_global] += f_u_th_e[r_local]\n            for c_local, c_global in enumerate(nodes):\n                K_uu[r_global, c_global] += K_uu_e[r_local, c_local]\n                K_uT[r_global, c_global] += K_uT_e[r_local, c_local]\n                K_Tu[r_global, c_global] += K_Tu_e[r_local, c_local]\n                C_TT[r_global, c_global] += C_TT_e[r_local, c_local]\n                K_TT[r_global, c_global] += K_TT_e[r_local, c_local]\n    \n    # --- Form global Jacobian matrix J ---\n    J = np.zeros((total_dofs, total_dofs))\n    J[0:N_nodes, 0:N_nodes] = K_uu\n    J[0:N_nodes, N_nodes:total_dofs] = K_uT\n    J[N_nodes:total_dofs, 0:N_nodes] = (1 / dt) * K_Tu\n    J[N_nodes:total_dofs, N_nodes:total_dofs] = (1 / dt) * C_TT + K_TT\n\n    # --- Define state vectors (initial and trial) ---\n    u_n = np.zeros(N_nodes)\n    T_n = np.full(N_nodes, T0)\n\n    u_n1_trial = np.zeros(N_nodes) # u(0)=0, u(L)=0\n    x_coords = np.linspace(0, L, N_nodes)\n    T_n1_trial = TL + (TR - TL) * x_coords / L\n    \n    # --- Calculate global residual vector R at trial state ---\n    R = np.zeros(total_dofs)\n    # Mechanical residual R_u\n    R[0:N_nodes] = K_uu @ u_n1_trial + K_uT @ T_n1_trial + f_u_th\n    # Thermal residual R_T\n    R[N_nodes:total_dofs] = ((1 / dt) * C_TT + K_TT) @ T_n1_trial \\\n                           + ((1 / dt) * K_Tu) @ u_n1_trial \\\n                           - ((1 / dt) * C_TT @ T_n + (1 / dt) * K_Tu @ u_n)\n\n    # --- Apply BCs by elimination to get reduced system ---\n    fixed_dofs = [0, N_nodes - 1, N_nodes, total_dofs - 1]\n    free_dofs = sorted(list(set(range(total_dofs)) - set(fixed_dofs)))\n    \n    R_red = R[free_dofs]\n    J_red = J[np.ix_(free_dofs, free_dofs)]\n\n    # --- Compute norm of the reduced residual ---\n    res_norm = np.linalg.norm(R_red)\n\n    # --- Numerically verify the reduced Jacobian using finite differences ---\n    h_fd = 1.0e-8\n    y_red_trial = np.concatenate([u_n1_trial[1:-1], T_n1_trial[1:-1]])\n    n_free = len(free_dofs)\n    J_fd = np.zeros((n_free, n_free))\n    \n    y_n1_full_trial = np.concatenate([u_n1_trial, T_n1_trial])\n    \n    def get_reduced_residual(y_f_trial):\n        y_full = np.copy(y_n1_full_trial)\n        y_full[free_dofs] = y_f_trial\n        u_f, T_f = y_full[:N_nodes], y_full[N_nodes:]\n        \n        R_full = np.zeros(total_dofs)\n        R_full[:N_nodes] = K_uu @ u_f + K_uT @ T_f + f_u_th\n        R_full[N_nodes:] = ((1 / dt) * C_TT + K_TT) @ T_f \\\n                           + ((1 / dt) * K_Tu) @ u_f \\\n                           - ((1 / dt) * C_TT @ T_n + (1 / dt) * K_Tu @ u_n)\n        return R_full[free_dofs]\n\n    for i in range(n_free):\n        y_red_pert = np.copy(y_red_trial)\n        y_red_pert[i] += h_fd\n        R_red_pert = get_reduced_residual(y_red_pert)\n        J_fd[:, i] = (R_red_pert - R_red) / h_fd\n\n    jac_diff_norm = np.linalg.norm(J_red - J_fd, 'fro')\n\n    # --- Handle case-specific outputs ---\n    output = [res_norm, jac_diff_norm]\n    if case_id == 'B':\n        # For N=3 nodes, there is 1 free u-dof and 1 free T-dof.\n        # u-dof index in reduced system is 0, T-dof is 1.\n        n_u_free = N_nodes - 2\n        n_t_free = N_nodes - 2\n        \n        J_uT_red_block = J_red[0:n_u_free, n_u_free:(n_u_free + n_t_free)]\n        J_Tu_red_block = J_red[n_u_free:(n_u_free + n_t_free), 0:n_u_free]\n        \n        norm_J_uT_F = np.linalg.norm(J_uT_red_block, 'fro')\n        norm_J_Tu_F = np.linalg.norm(J_Tu_red_block, 'fro')\n        off_diag_norm = np.sqrt(norm_J_uT_F**2 + norm_J_Tu_F**2)\n        output.append(off_diag_norm)\n\n    return output\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "2625915"}]}