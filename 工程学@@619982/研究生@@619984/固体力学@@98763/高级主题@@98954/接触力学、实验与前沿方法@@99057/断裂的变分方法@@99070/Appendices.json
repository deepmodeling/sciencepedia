{"hands_on_practices": [{"introduction": "这项练习旨在探索相场能量泛函与宏观临界能量释放率 $G_c$ 之间的基本联系。通过推导一维稳态相场分布，您将了解如何校准模型参数以匹配具有物理意义的材料属性，这是进行任何定量模拟时至关重要的第一步。[@problem_id:2709354]", "problem": "考虑一个用于脆性断裂的变分相场描述的一维、平面外单位厚度设定。令 $d(x)$ 表示一个完整性类型的相场变量，其中 $d(x)\\in[0,1]$，$d(x)=0$ 表示完全发展的裂纹，而 $d(x)\\to 1$ 表示远离裂纹的完整材料。每单位平面外厚度的断裂表面能由下式建模：\n$$\n\\mathcal{E}_{\\Gamma}[d] \\;=\\; G_{c}\\,\\int_{-\\infty}^{\\infty} \\gamma_{\\ell}\\!\\left(d(x),d'(x)\\right)\\,\\mathrm{d}x,\n$$\n其中简化的裂纹表面密度为\n$$\n\\gamma_{\\ell}(d,d') \\;=\\; \\frac{1}{c_{0}}\\,\\bigg[\\,\\frac{1}{2\\,\\ell}\\,\\big(1-d\\big)^{2} \\;+\\; \\frac{\\ell}{2}\\,\\big(d'\\big)^{2}\\,\\bigg],\n$$\n此处 $G_{c}$ 是临界能量释放率，$\\ell>0$ 是内禀长度，$c_{0}>0$ 是一个待通过校准确定的无量纲归一化常数。\n\n假设一个以 $x=0$ 为中心的稳态偶函数相场分布，其满足 $d(0)=0$ 和当 $|x|\\to\\infty$ 时 $d(x)\\to 1$，并由下式给出：\n$$\nd(x) \\;=\\; 1 - \\exp\\!\\big(-|x|/\\ell\\big).\n$$\n\n从上述泛函的变分法出发，并使用孤立裂纹在无穷远处的标准边界条件，计算与该分布相关的断裂表面能，并确定使 $\\mathcal{E}_{\\Gamma}[d]=G_{c}$ 所需的 $c_{0}$ 值，即与单个完全发展的裂纹相关的能量等于 $G_{c}$。请以 $c_{0}$ 的单个闭式解值的形式提供最终答案。无需四舍五入，也无需报告 $c_{0}$ 的物理单位。", "solution": "出发点是断裂表面能泛函\n$$\n\\mathcal{E}_{\\Gamma}[d] \\;=\\; G_{c}\\,\\int_{-\\infty}^{\\infty} \\gamma_{\\ell}(d,d')\\,\\mathrm{d}x,\n\\quad\n\\gamma_{\\ell}(d,d') \\;=\\; \\frac{1}{c_{0}}\\left[\\frac{1}{2\\,\\ell}\\,(1-d)^{2} + \\frac{\\ell}{2}\\,(d')^{2}\\right].\n$$\n稳态分布 $d(x)$ 满足与被积函数相关的欧拉-拉格朗日方程\n$$\nf(d,d') \\;=\\; \\frac{1}{2\\,\\ell}\\,(1-d)^{2} + \\frac{\\ell}{2}\\,(d')^{2}.\n$$\n计算一阶变分：\n$$\n\\frac{\\partial f}{\\partial d} \\;=\\; \\frac{1}{2\\,\\ell}\\cdot 2(1-d)\\cdot(-1) \\;=\\; -\\,\\frac{1}{\\ell}\\,(1-d),\n\\qquad\n\\frac{\\partial f}{\\partial d'} \\;=\\; \\frac{\\ell}{2}\\cdot 2\\,d' \\;=\\; \\ell\\,d'.\n$$\n因此，在 $d$ 光滑的任何区间上，欧拉-拉格朗日方程为\n$$\n\\frac{\\partial f}{\\partial d} \\;-\\; \\frac{\\mathrm{d}}{\\mathrm{d}x}\\!\\left(\\frac{\\partial f}{\\partial d'}\\right) \\;=\\; 0\n\\;\\;\\Longrightarrow\\;\\;\n-\\,\\frac{1}{\\ell}\\,(1-d) \\;-\\; \\frac{\\mathrm{d}}{\\mathrm{d}x}\\!\\left(\\ell\\,d'\\right) \\;=\\; 0,\n$$\n即，\n$$\n\\ell\\,d'' \\;+\\; \\frac{1}{\\ell}\\,(1-d) \\;=\\; 0\n\\;\\;\\Longleftrightarrow\\;\\;\nd'' \\;+\\; \\frac{1}{\\ell^{2}}\\,(1-d) \\;=\\; 0,\n$$\n该方程需分别施加于 $x>0$ 和 $x<0$ 上，且具有关于 $x=0$ 的对称性，并满足边界条件 $d(0)=0$ 和当 $|x|\\to\\infty$ 时 $d(x)\\to 1$。\n\n在 $x>0$ 上，该常微分方程为\n$$\nd'' \\;-\\; \\frac{1}{\\ell^{2}}\\,d \\;=\\; -\\,\\frac{1}{\\ell^{2}}.\n$$\n一个特解是 $d_{p}(x)=1$。齐次解是 $d_{h}(x)=A\\,\\exp(x/\\ell)+B\\,\\exp(-x/\\ell)$。当 $x\\to +\\infty$ 时的有界性要求 $A=0$。代入 $d(0)=0$ 可得 $0=1+B$，因此 $B=-1$。于是，对于 $x>0$：\n$$\nd(x) \\;=\\; 1 - \\exp(-x/\\ell).\n$$\n根据关于 $x=0$ 的偶对称性，完整的分布为\n$$\nd(x) \\;=\\; 1 - \\exp\\!\\big(-|x|/\\ell\\big),\n$$\n这与假设的稳态分布相符，因此与在 $x\\neq 0$ 上的欧拉-拉格朗日方程一致。\n\n接下来，我们计算断裂表面能积分。对于给定的 $d(x)$，我们有\n$$\n1 - d(x) \\;=\\; \\exp\\!\\big(-|x|/\\ell\\big),\n\\qquad\nd'(x) \\;=\\; \n\\begin{cases}\n\\;\\;\\;\\;\\dfrac{1}{\\ell}\\,\\exp(-x/\\ell), & x>0,\\\\\n-\\dfrac{1}{\\ell}\\,\\exp(x/\\ell), & x<0.\n\\end{cases}\n$$\n因此\n$$\n\\big(1-d(x)\\big)^{2} \\;=\\; \\exp\\!\\big(-2|x|/\\ell\\big),\n\\qquad\n\\big(d'(x)\\big)^{2} \\;=\\; \\frac{1}{\\ell^{2}}\\,\\exp\\!\\big(-2|x|/\\ell\\big).\n$$\n表面能密度变为\n$$\n\\gamma_{\\ell}(d,d') \\;=\\; \\frac{1}{c_{0}}\\left[\\frac{1}{2\\,\\ell}\\,\\exp\\!\\big(-2|x|/\\ell\\big) + \\frac{\\ell}{2}\\cdot \\frac{1}{\\ell^{2}}\\,\\exp\\!\\big(-2|x|/\\ell\\big)\\right]\n\\;=\\; \\frac{1}{c_{0}}\\left[\\frac{1}{2\\,\\ell} + \\frac{1}{2\\,\\ell}\\right]\\exp\\!\\big(-2|x|/\\ell\\big)\n\\;=\\; \\frac{1}{c_{0}}\\,\\frac{1}{\\ell}\\,\\exp\\!\\big(-2|x|/\\ell\\big).\n$$\n因此，\n$$\n\\int_{-\\infty}^{\\infty} \\gamma_{\\ell}(d,d')\\,\\mathrm{d}x\n\\;=\\;\n\\frac{1}{c_{0}}\\,\\int_{-\\infty}^{\\infty} \\frac{1}{\\ell}\\,\\exp\\!\\big(-2|x|/\\ell\\big)\\,\\mathrm{d}x.\n$$\n被积函数是偶函数，所以\n$$\n\\int_{-\\infty}^{\\infty} \\frac{1}{\\ell}\\,\\exp\\!\\big(-2|x|/\\ell\\big)\\,\\mathrm{d}x\n\\;=\\;\n2\\int_{0}^{\\infty} \\frac{1}{\\ell}\\,\\exp\\!\\big(-2x/\\ell\\big)\\,\\mathrm{d}x\n\\;=\\;\n2\\cdot \\frac{1}{\\ell}\\cdot \\left[\\,-\\frac{\\ell}{2}\\,\\exp\\!\\big(-2x/\\ell\\big)\\,\\right]_{0}^{\\infty}\n\\;=\\;\n2\\cdot \\frac{1}{\\ell}\\cdot \\frac{\\ell}{2}\n\\;=\\;\n1.\n$$\n由此可得\n$$\n\\int_{-\\infty}^{\\infty} \\gamma_{\\ell}(d,d')\\,\\mathrm{d}x \\;=\\; \\frac{1}{c_{0}}.\n$$\n因此，该稳态分布的断裂表面能为\n$$\n\\mathcal{E}_{\\Gamma}[d] \\;=\\; G_{c}\\,\\frac{1}{c_{0}}.\n$$\n对单个完全发展的裂纹进行校准要求 $\\mathcal{E}_{\\Gamma}[d]=G_{c}$，这意味着\n$$\nG_{c}\\,\\frac{1}{c_{0}} \\;=\\; G_{c}\n\\;\\;\\Longrightarrow\\;\\;\nc_{0} \\;=\\; 1.\n$$\n这个 $c_{0}$ 值确保了稳态分布的断裂表面能等于 $G_{c}$，且与内禀长度 $\\ell$ 无关。", "answer": "$$\\boxed{1}$$", "id": "2709354"}, {"introduction": "在能量概念的基础上，本实践将指导您为一个一维杆实现一个完整但简化的求解器。您将使用强大的交替最小化方案，并数值验证此变分方法的一个核心属性——总能量在求解过程中的单调递减。这能让您直接洞察数值方法的稳定性和收敛性。[@problem_id:2709351]", "problem": "考虑一个位于区间 $\\left[0,L\\right]$ 上的一维无量纲化弹性杆，其具有标量位移场 $u(x)$ 和标量相场-断裂变量 $d(x)$，其中 $d(x)$ 近似表示损伤，$d(x)=0$ 表示材料完好，$d(x)=1$ 表示材料完全断裂。断裂的变分方法旨在寻求总能量关于 $u$ 和 $d$ 的最小化子。在本问题中，您将实现一个交替最小化方案，以在数值上原则性地证明总能量在迭代过程中是非增的，并且您将使用总能量的单调递减作为停止迭代的收敛准则。\n\n基本原理和模型：\n- 最小势能原理指出，对于固定的边界条件，物理上实现的场会使总能量最小化。我们使用一维脆性断裂的标准相场正则化。无量纲化总能量泛函为\n$$\n\\mathcal{E}(u,d) \\;=\\; \\int_0^L \\left[ g(d)\\,\\frac{E}{2}\\,\\left(u'(x)\\right)^2 \\;+\\; G_c\\left(\\frac{d(x)^2}{4\\ell} \\;+\\; \\ell\\,\\left(d'(x)\\right)^2\\right) \\right]\\,\\mathrm{d}x,\n$$\n其中 $E$ 是无量纲弹性模量，$G_c$ 是无量纲化临界能量释放率，$\\ell$ 是无量纲化内禀长度尺度，$g(d)$ 是一个退化函数。令 $g(d) = \\left(1-d\\right)^2 + \\kappa$，其中 $\\kappa>0$ 是一个小的残余刚度参数，用以保持椭圆性。该杆受到狄利克雷位移边界条件 $u(0)=0$ 和 $u(L)=\\bar{U}$ 的约束。\n\n离散化与数值方案：\n- 使用 $N$ 个节点离散化区间 $\\left[0,L\\right]$，节点间距均匀，为 $h = L/(N-1)$。\n- 使用二阶有限差分（基于边的中心差分）计算梯度。将在节点 $i$ 和 $i+1$ 之间的边上的差分记为 $\\Delta u_i = u_{i+1}-u_i$ 和 $\\Delta d_i = d_{i+1}-d_i$。\n- 离散能量近似：\n  - 弹性势能近似为\n    $$\n    \\mathcal{E}_{\\text{el}}(u,d) \\approx \\sum_{i=0}^{N-2} \\frac{1}{2}\\,\\frac{E\\,g_{i+\\frac{1}{2}}}{h}\\,\\left(\\Delta u_i\\right)^2,\n    $$\n    其中 $g_{i+\\frac{1}{2}} = \\tfrac{1}{2}\\big(g(d_i)+g(d_{i+1})\\big)$。\n  - 断裂表面能近似为\n    $$\n    \\mathcal{E}_{\\text{frac}}(d) \\approx \\sum_{i=0}^{N-1} G_c\\,\\frac{d_i^2}{4\\ell}\\,h \\;+\\; \\sum_{i=0}^{N-2} G_c\\,\\ell\\,\\frac{\\left(\\Delta d_i\\right)^2}{h}.\n    $$\n  - 总能量为 $\\mathcal{E}(u,d) \\approx \\mathcal{E}_{\\text{el}}(u,d) + \\mathcal{E}_{\\text{frac}}(d)$。\n- 交替最小化（也称作块坐标下降）：\n  - 固定 $d$，在满足 $u(0)=0$ 和 $u(L)=\\bar{U}$ 的条件下，对 $u$ 最小化 $\\mathcal{E}(u,d)$。因为 $g(d)\\ge \\kappa>0$，这将得到一个具有对称正定（SPD）刚度矩阵的线性系统。\n  - 固定 $u$，对 $d$ 最小化 $\\mathcal{E}(u,d)$，无附加约束。其欧拉-拉格朗日方程离散化为一个形式为 $\\mathbf{A}_d \\mathbf{d} = \\mathbf{b}_d$ 的SPD线性系统，其中\n    $$\n    \\mathbf{A}_d \\;=\\; \\underbrace{\\mathbf{K}_{\\text{grad}}}_{\\text{源于 } \\ell(d')^2} \\;+\\; \\underbrace{\\operatorname{diag}\\!\\big(2\\,\\psi_i\\,h\\big)}_{\\text{源于 } g'(d)\\psi}\\;+\\; \\underbrace{\\operatorname{diag}\\!\\left(\\frac{G_c}{2\\ell}\\,h\\right)}_{\\text{源于 } d^2/(4\\ell)},\n    $$\n    其中 $\\psi_i$ 是弹性势能密度 $\\psi(u)=\\frac{E}{2}(u')^2$ 的节点近似值，$\\mathbf{b}_d$ 的分量为 $(\\mathbf{b}_d)_i = 2\\,\\psi_i\\,h$。\n  - 在此演示中，我们不强制施加不可逆性或边界约束，从而使得每个子问题都是一个无约束凸最小化问题，确保在精确算术下，能量在每个子步骤中都是非增的。\n- 能量密度的节点近似：计算边应变 $\\varepsilon_{i+\\frac{1}{2}}=\\Delta u_i/h$ 和边弹性势能 $\\psi_{i+\\frac{1}{2}}=\\tfrac{E}{2}\\,\\varepsilon_{i+\\frac{1}{2}}^2$，然后设置 $\\psi_0=\\psi_{\\frac{1}{2}}$，$\\psi_{N-1}=\\psi_{N-\\frac{3}{2}}$，对于内部节点 $i$，使用 $\\psi_i=\\tfrac{1}{2}\\left(\\psi_{i-\\frac{1}{2}}+\\psi_{i+\\frac{1}{2}}\\right)$。\n\n任务：\n1. 实现所述的交替最小化算法。对所有节点 $i$ 初始化 $d^{(0)}_i=0$。在每次迭代 $k$ 中：\n   - 固定 $d^{(k)}$，求解 $u^{(k+1)}$。\n   - 计算并记录总能量 $\\mathcal{E}\\big(u^{(k+1)},d^{(k)}\\big)$。\n   - 固定 $u^{(k+1)}$，求解 $d^{(k+1)}$。\n   - 计算并记录总能量 $\\mathcal{E}\\big(u^{(k+1)},d^{(k+1)}\\big)$。\n2. 在浮点容差范围内，数值上证明总能量序列在各子步骤上是非增的。使用混合容差准则：给定每个子步骤后记录的能量 $\\{E_j\\}_{j\\ge 0}$，检查是否满足 $E_{j+1}\\le E_j + \\varepsilon_{\\text{abs}} + \\varepsilon_{\\text{rel}}\\,E_j$，其中 $\\varepsilon_{\\text{abs}}=10^{-14}$ 且 $\\varepsilon_{\\text{rel}}=10^{-12}$。\n3. 使用总能量的减少作为收敛准则。在每个完整的交替最小化循环之后（即在更新 $u$ 和 $d$ 之后），计算相对减少量\n   $$\n   r_k \\;=\\; \\frac{\\mathcal{E}\\big(u^{(k)},d^{(k)}\\big) - \\mathcal{E}\\big(u^{(k+1)},d^{(k+1)}\\big)}{\\max\\!\\left(\\mathcal{E}\\big(u^{(k)},d^{(k)}\\big),\\,10^{-16}\\right)}.\n   $$\n   当 $r_k < \\text{tol}$ 或达到最大迭代次数时停止。\n\n测试套件：\n- 对于每个测试用例，所有量都是无量纲的，因此不需要物理单位。使用以下参数集：\n  - 案例 A（一般情况）：$L=1.0$, $N=101$, $E=1.0$, $G_c=0.01$, $\\ell=0.02$, $\\kappa=10^{-6}$, $\\bar{U}=0.2$, $\\text{tol}=10^{-10}$, $\\text{max\\_iter}=200$。\n  - 案例 B（近弹性，微小载荷）：$L=1.0$, $N=51$, $E=1.0$, $G_c=0.01$, $\\ell=0.02$, $\\kappa=10^{-6}$, $\\bar{U}=10^{-4}$, $\\text{tol}=10^{-12}$, $\\text{max\\_iter}=200$。\n  - 案例 C（更柔性的断裂）：$L=1.0$, $N=101$, $E=1.0$, $G_c=0.005$, $\\ell=0.05$, $\\kappa=10^{-6}$, $\\bar{U}=0.2$, $\\text{tol}=10^{-10}$, $\\text{max\\_iter}=200$。\n\n程序要求：\n- 您的程序必须为每个案例计算以下输出：\n  - 一个布尔值，表示在使用上述混合容差测试时，记录的总能量在运行的所有子步骤中是否非增。\n  - 直到收敛或达到最大迭代次数所执行的完整交替最小化迭代次数。\n  - 四舍五入到八位小数的最终总能量值。\n- 最终输出格式：您的程序应生成单行输出，其中包含一个用方括号括起来的扁平、逗号分隔的列表。该列表必须按顺序串联每个案例的三元组。具体来说，输出\n  $$\n  [\\text{mono\\_A},\\text{iter\\_A},\\text{energy\\_A},\\text{mono\\_B},\\text{iter\\_B},\\text{energy\\_B},\\text{mono\\_C},\\text{iter\\_C},\\text{energy\\_C}],\n  $$\n  其中每个 $\\text{mono\\_*}$ 是 $\\text{True}$ 或 $\\text{False}$，每个 $\\text{iter\\_*}$ 是一个整数，每个 $\\text{energy\\_*}$ 是一个四舍五入到八位小数的浮点数。", "solution": "该问题陈述提出了一个在计算固体力学领域中明确定义的任务。它在科学上基于使用标准相场模型的断裂变分理论。所有参数、方程、边界条件和数值程序都得到了充分清晰的说明，并且内部一致。该问题不违反任何物理学或数学原理；它是客观且可形式化的。因此，该问题被认为是有效的，并将提供一个解决方案。\n\n目标是为一维相场断裂问题实现一个交替最小化方案。该方案迭代求解位移场 $u(x)$ 和相场 $d(x)$，以找到总能量泛函 $\\mathcal{E}(u,d)$ 的一个最小化子。主要任务是在数值上证明总能量在最小化子步骤中是单调非增的，并使用此能量减少作为收敛准则。\n\n解决方案是通过离散化问题域和控制能量泛函，然后按交替顺序求解得到的关于 $u$ 和 $d$ 的子问题来构建的。\n\n**1. 离散化与状态变量**\n\n一维域 $[0,L]$ 被离散化为 $N$ 个节点，索引为 $i=0, 1, \\dots, N-1$。节点之间的均匀间距为 $h = L/(N-1)$。位移场和相场由节点值向量 $\\mathbf{u} = [u_0, u_1, \\dots, u_{N-1}]^T$ 和 $\\mathbf{d} = [d_0, d_1, \\dots, d_{N-1}]^T$ 表示。\n\n**2. 总能量泛函**\n\n总能量 $\\mathcal{E}(u,d)$ 是弹性势能 $\\mathcal{E}_{\\text{el}}(u,d)$ 和断裂能 $\\mathcal{E}_{\\text{frac}}(d)$ 的和。根据所提供的离散化方法：\n\n弹性势能为：\n$$\n\\mathcal{E}_{\\text{el}}(\\mathbf{u},\\mathbf{d}) = \\sum_{i=0}^{N-2} \\frac{E}{2h} g_{i+\\frac{1}{2}} (u_{i+1}-u_i)^2\n$$\n其中 $g(d) = (1-d)^2+\\kappa$，且边中心的退化值为 $g_{i+\\frac{1}{2}} = \\frac{1}{2}(g(d_i) + g(d_{i+1}))$。\n\n断裂能为：\n$$\n\\mathcal{E}_{\\text{frac}}(\\mathbf{d}) = \\sum_{i=0}^{N-1} G_c \\frac{d_i^2}{4\\ell} h + \\sum_{i=0}^{N-2} G_c \\ell \\frac{(d_{i+1}-d_i)^2}{h}\n$$\n\n**3. 交替最小化子问题**\n\n该算法的核心是交替最小化循环。在每次迭代 $k$ 中，我们首先固定 $\\mathbf{d}^{(k)}$ 求解 $\\mathbf{u}^{(k+1)}$，然后固定 $\\mathbf{u}^{(k+1)}$ 求解 $\\mathbf{d}^{(k+1)}$。\n\n**3.1. 关于位移 $u$ 的最小化**\n\n对于固定的相场 $\\mathbf{d}$，我们在边界条件 $u_0=0$ 和 $u_{N-1}=\\bar{U}$ 的约束下，对 $\\mathbf{u}$ 最小化 $\\mathcal{E}(\\mathbf{u},\\mathbf{d})$。这等效于对内部节点 $i=1, \\dots, N-2$ 求解 $\\frac{\\partial \\mathcal{E}_{\\text{el}}}{\\partial u_i} = 0$。对于内部节点 $u_i$ 的导数为：\n$$\n\\frac{\\partial \\mathcal{E}_{\\text{el}}}{\\partial u_i} = \\frac{\\partial}{\\partial u_i} \\left[ \\frac{E}{2h}g_{i-\\frac{1}{2}}(u_i-u_{i-1})^2 + \\frac{E}{2h}g_{i+\\frac{1}{2}}(u_{i+1}-u_i)^2 \\right] = 0\n$$\n这产生了一个线性方程组：\n$$\n\\frac{E}{h}g_{i-\\frac{1}{2}}(u_i-u_{i-1}) - \\frac{E}{h}g_{i+\\frac{1}{2}}(u_{i+1}-u_i) = 0\n$$\n对 $i=1, \\dots, N-2$ 重新整理得：\n$$\n-\\left(\\frac{E}{h}g_{i-\\frac{1}{2}}\\right)u_{i-1} + \\left(\\frac{E}{h}g_{i-\\frac{1}{2}} + \\frac{E}{h}g_{i+\\frac{1}{2}}\\right)u_i - \\left(\\frac{E}{h}g_{i+\\frac{1}{2}}\\right)u_{i+1} = 0\n$$\n这为未知的内部节点位移 $\\mathbf{u}_{\\text{int}} = [u_1, \\dots, u_{N-2}]^T$ 定义了一个线性系统 $\\mathbf{K}_u \\mathbf{u}_{\\text{int}} = \\mathbf{f}_u$。刚度矩阵 $\\mathbf{K}_u$ 是一个 $(N-2) \\times (N-2)$ 的对称三对角矩阵。\n对角线元素为 $(\\mathbf{K}_u)_{j,j} = \\frac{E}{h}(g_{j-\\frac{1}{2}} + g_{j+\\frac{1}{2}})$，其中 $j=1, \\dots, N-2$（使用局部矩阵索引）。\n非对角线元素为 $(\\mathbf{K}_u)_{j,j+1} = (\\mathbf{K}_u)_{j+1,j} = -\\frac{E}{h}g_{j+\\frac{1}{2}}$。\n边界条件 $u_0=0$ 和 $u_{N-1}=\\bar{U}$ 分别修改了 $i=1$ 和 $i=N-2$ 处的方程。对于 $i=1$，$u_0$ 项为零。对于 $i=N-2$，项 $-\\frac{E}{h}g_{N-\\frac{3}{2}}u_{N-1}$ 成为一个已知值并移到右侧，因此力向量 $\\mathbf{f}_u$ 的最后一个分量是 $f_{N-2} = \\frac{E}{h}g_{N-\\frac{3}{2}}\\bar{U}$。$\\mathbf{f}_u$ 的所有其他分量都为零。由于 $g(d) \\ge \\kappa > 0$，矩阵 $\\mathbf{K}_u$ 是对称正定的（SPD），保证了唯一解的存在。\n\n**3.2. 关于相场 $d$ 的最小化**\n\n对于固定的位移场 $\\mathbf{u}$，我们对 $\\mathbf{d}$ 最小化 $\\mathcal{E}(\\mathbf{u},\\mathbf{d})$。问题陈述给出了所得线性系统的形式 $\\mathbf{A}_d \\mathbf{d} = \\mathbf{b}_d$。该系统通过对所有节点 $i=0, \\dots, N-1$ 设立 $\\frac{\\partial \\mathcal{E}}{\\partial d_i} = 0$ 导出。能量在弹性驱动力周围进行二次近似，从而得到指定的系统。\n\n首先，我们计算节点弹性势能密度 $\\psi_i$。计算边应变 $\\varepsilon_{i+\\frac{1}{2}} = (u_{i+1}-u_i)/h$ 和边能量密度 $\\psi_{i+\\frac{1}{2}} = \\frac{E}{2}\\varepsilon_{i+\\frac{1}{2}}^2$。然后，按规定分配节点值：\n$$\n\\psi_0 = \\psi_{\\frac{1}{2}}, \\quad \\psi_{N-1} = \\psi_{N-\\frac{3}{2}}, \\quad \\psi_i = \\frac{1}{2}(\\psi_{i-\\frac{1}{2}} + \\psi_{i+\\frac{1}{2}}) \\text{ for } i=1, \\dots, N-2.\n$$\n线性系统为 $\\mathbf{A}_d \\mathbf{d} = \\mathbf{b}_d$，其中 $N \\times N$ 矩阵 $\\mathbf{A}_d$ 和 $N$ 维向量 $\\mathbf{b}_d$ 的构造如下。向量 $\\mathbf{b}_d$ 的分量为 $(\\mathbf{b}_d)_i = 2\\psi_i h$。对称三对角矩阵 $\\mathbf{A}_d$ 是三项贡献之和：\n1.  来自梯度项 $\\ell(d')^2$：这产生了一个离散拉普拉斯算子。对矩阵的贡献为：在索引 $i=0$ 和 $i=N-1$ 处的对角线上为 $\\frac{2G_c \\ell}{h}$，对于内部索引 $i=1, \\dots, N-2$ 的对角线上为 $\\frac{4G_c \\ell}{h}$，在次对角线和超对角线上为 $-\\frac{2G_c \\ell}{h}$。\n2.  来自应变能依赖性 $g''(d)\\psi$：$g(d)$ 的二阶导数是 $g''(d) = 2$。这为对角线元素 $(\\mathbf{A}_d)_{i,i}$ 增加了 $2\\psi_i h$。\n3.  来自表面项 $d^2/(4\\ell)$：这为对角线元素 $(\\mathbf{A}_d)_{i,i}$ 增加了 $\\frac{G_c h}{2\\ell}$。\n\n将这些项结合起来，系统矩阵 $\\mathbf{A}_d$ 是SPD的，因此可以高效地求解 $\\mathbf{d}$。\n\n**4. 算法与收敛**\n\n总体算法如下：\n1.  **初始化**：设置迭代计数器 $k=0$。将相场 $\\mathbf{d}^{(0)}$ 初始化为零向量。计算相应的线性弹性位移场 $\\mathbf{u}^{(0)}$，其分量为 $u_i^{(0)} = \\bar{U} \\cdot i / (N-1)$。计算初始总能量 $E_{\\text{prev}} = \\mathcal{E}(\\mathbf{u}^{(0)}, \\mathbf{d}^{(0)})$。\n2.  **迭代循环**：对于 $k=0, 1, \\dots, \\text{max_iter}-1$：\n    a. 使用 $\\mathbf{d}^{(k)}$ 求解 $\\mathbf{u}^{(k+1)}$。\n    b. 记录能量 $\\mathcal{E}(\\mathbf{u}^{(k+1)}, \\mathbf{d}^{(k)})$。\n    c. 使用 $\\mathbf{u}^{(k+1)}$ 求解 $\\mathbf{d}^{(k+1)}$。\n    d. 计算新的总能量 $E_{\\text{new}} = \\mathcal{E}(\\mathbf{u}^{(k+1)}, \\mathbf{d}^{(k+1)})$。记录此能量。\n    e. 通过计算相对能量减少量 $r_k = (E_{\\text{prev}} - E_{\\text{new}})/\\max(E_{\\text{prev}}, 10^{-16})$ 来检查收敛性。如果 $r_k < \\text{tol}$，则终止循环。\n    f. 为下一次迭代更新： $E_{\\text{prev}} = E_{\\text{new}}$。\n3.  **后处理**：循环结束后，在指定的数值容差范围内验证所有记录的能量序列是单调非增的：$E_{j+1} \\le E_j + \\varepsilon_{\\text{abs}} + \\varepsilon_{\\text{rel}} E_j$。\n4.  **输出**：返回单调性检查结果、执行的总迭代次数以及最终收敛的能量。\n\n此过程构成了一个完整且稳健的解决指定问题的方法。实现精确遵循这些步骤。", "answer": "```python\nimport numpy as np\nfrom scipy.linalg import solve_banded\n\ndef solve():\n    \"\"\"\n    Main function to run the test suite and print results.\n    \"\"\"\n    test_cases = [\n        # Case A (general case)\n        (1.0, 101, 1.0, 0.01, 0.02, 1e-6, 0.2, 1e-10, 200),\n        # Case B (near-elastic, tiny load)\n        (1.0, 51, 1.0, 0.01, 0.02, 1e-6, 1e-4, 1e-12, 200),\n        # Case C (more compliant fracture)\n        (1.0, 101, 1.0, 0.005, 0.05, 1e-6, 0.2, 1e-10, 200),\n    ]\n\n    all_results = []\n    for params in test_cases:\n        L, N, E, Gc, l, kappa, U_bar, tol, max_iter = params\n        is_monotonic, iters, final_energy = solve_case(L, N, E, Gc, l, kappa, U_bar, tol, max_iter)\n        all_results.extend([is_monotonic, iters, round(final_energy, 8)])\n\n    # Format and print the final output string\n    print(f\"[{','.join(map(str, all_results))}]\")\n\ndef solve_case(L, N, E, Gc, l, kappa, U_bar, tol, max_iter):\n    \"\"\"\n    Solves a single instance of the phase-field fracture problem.\n    \n    Returns:\n        tuple: (is_monotonic, iterations, final_energy)\n    \"\"\"\n    h = L / (N - 1)\n    x = np.linspace(0, L, N)\n    \n    # --- Helper Functions ---\n\n    def compute_total_energy(u, d):\n        # Elastic energy\n        g = (1 - d)**2 + kappa\n        g_mid = 0.5 * (g[:-1] + g[1:])\n        du = u[1:] - u[:-1]\n        el_energy = np.sum(0.5 * E * g_mid / h * du**2)\n        \n        # Fracture energy\n        frac_surf = np.sum(Gc * d**2 / (4 * l) * h)\n        dd = d[1:] - d[:-1]\n        frac_grad = np.sum(Gc * l * (dd**2) / h)\n        \n        return el_energy + frac_surf + frac_grad\n\n    def solve_for_u(d):\n        g = (1 - d)**2 + kappa\n        g_mid = 0.5 * (g[:-1] + g[1:])\n        k_stiff_edge = E * g_mid / h\n        \n        # System for interior nodes u_1, ..., u_{N-2}\n        num_internal_nodes = N - 2\n        diag = k_stiff_edge[:-1] + k_stiff_edge[1:]\n        off_diag = -k_stiff_edge[1:-1]\n        \n        Ku = np.zeros((3, num_internal_nodes))\n        Ku[0, 1:] = off_diag\n        Ku[1, :] = diag\n        Ku[2, :-1] = off_diag\n        \n        fu = np.zeros(num_internal_nodes)\n        fu[-1] = k_stiff_edge[-1] * U_bar\n        \n        u_internal = solve_banded((1, 1), Ku, fu)\n        \n        u = np.zeros(N)\n        u[1:-1] = u_internal\n        u[-1] = U_bar\n        return u\n\n    def solve_for_d(u):\n        # Calculate nodal elastic energy density psi\n        eps_edge = (u[1:] - u[:-1]) / h\n        psi_edge = 0.5 * E * eps_edge**2\n        \n        psi = np.zeros(N)\n        psi[0] = psi_edge[0]\n        psi[-1] = psi_edge[-1]\n        psi[1:-1] = 0.5 * (psi_edge[:-1] + psi_edge[1:])\n\n        # Assemble and solve Ad * d = bd\n        bd = 2 * psi * h\n\n        # Build Ad matrix (tridiagonal, N x N)\n        # K_grad part\n        diag_Ad = np.full(N, 4 * Gc * l / h)\n        diag_Ad[0] = 2 * Gc * l / h\n        diag_Ad[-1] = 2 * Gc * l / h\n        off_diag_Ad = np.full(N - 1, -2 * Gc * l / h)\n        \n        # Other diagonal contributions\n        diag_Ad += 2 * psi * h\n        diag_Ad += Gc * h / (2 * l)\n        \n        Ad_banded = np.zeros((3, N))\n        Ad_banded[0, 1:] = off_diag_Ad\n        Ad_banded[1, :] = diag_Ad\n        Ad_banded[2, :-1] = off_diag_Ad\n        \n        d_new = solve_banded((1, 1), Ad_banded, bd)\n        return d_new\n\n    # --- Alternate Minimization Loop ---\n    \n    # Initialization\n    d_k = np.zeros(N)\n    u_k = x * U_bar / L  # Linear elastic solution for d=0\n    \n    energy_k = compute_total_energy(u_k, d_k)\n    all_energies = [energy_k]\n    \n    iters_done = 0\n    for k in range(max_iter):\n        iters_done = k + 1\n        energy_prev_cycle = energy_k\n        \n        # Step 1: u-minimization\n        u_k_plus_1 = solve_for_u(d_k)\n        all_energies.append(compute_total_energy(u_k_plus_1, d_k))\n        \n        # Step 2: d-minimization\n        d_k_plus_1 = solve_for_d(u_k_plus_1)\n        energy_k = compute_total_energy(u_k_plus_1, d_k_plus_1)\n        all_energies.append(energy_k)\n        \n        # Update state for next iteration\n        u_k = u_k_plus_1\n        d_k = d_k_plus_1\n        \n        # Check for convergence\n        rel_decr = (energy_prev_cycle - energy_k) / max(energy_prev_cycle, 1e-16)\n        if rel_decr < tol:\n            break\n            \n    # --- Post-processing ---\n    \n    # Check for non-increasing energy property (monotonicity)\n    is_monotonic = True\n    eps_abs = 1e-14\n    eps_rel = 1e-12\n    for i in range(len(all_energies) - 1):\n        if all_energies[i+1] > all_energies[i] + eps_abs + eps_rel * all_energies[i]:\n            is_monotonic = False\n            break\n            \n    return is_monotonic, iters_done, energy_k\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "2709351"}, {"introduction": "真实世界中的材料损伤是一个不可逆的过程。最后一个练习将深入探讨这一关键的物理约束，通过推导和实现一个针对材料点损伤变量的“返回映射”（return-mapping）算法来完成。这个实践演示了如何从第一性原理出发来施加率无关耗散和不可逆性，这是稳健计算损伤力学的基石。[@problem_id:2709377]", "problem": "考虑一个单点（无空间梯度）的率无关变分相场损伤更新，该更新用标量损伤变量 $d \\in [0,1]$ 表示，它会降低弹性势能并进行不可逆演化，即 $d$ 在伪时间上是非递减的。设在当前加载步下，未损伤弹性势能密度为一个给定的非负标量 $\\psi_0 \\ge 0$，单位为焦耳/立方米。存储（可恢复）的能量密度由退化的弹性势能 $E(d) = g(d)\\,\\psi_0$ 表示，其中 $g(d) = (1-d)^2$。采用 Ambrosio-Tortorelli (AT1) 裂纹密度选择，其中裂纹耗散与损伤增量呈线性关系。将一个时间步内的率无关耗散距离建模为\n$$\n\\mathcal{R}(\\Delta d) =\n\\begin{cases}\nY_c\\,\\Delta d, & \\Delta d \\ge 0,\\\\\n+\\infty, & \\Delta d < 0,\n\\end{cases}\n$$\n其中 $Y_c = \\dfrac{G_c}{2\\,\\ell}$ 是能量驱动阈值（单位为焦耳/立方米），$G_c$ 是断裂韧性（单位为焦耳/平方米），$\\ell$ 是正则化长度（单位为米）。从旧值 $d^{\\mathrm{old}}$ 到新值 $d^{\\mathrm{new}}$ 的单个增量上的损伤不可逆约束为 $d^{\\mathrm{new}} \\in [d^{\\mathrm{old}},1]$。\n\n从率无关系统的基本变分原理出发，当前步的增量问题是找到一个 $d^{\\mathrm{new}} \\in [d^{\\mathrm{old}},1]$，它能最小化存储能量与耗散距离之和：\n$$\n\\min_{d \\in [d^{\\mathrm{old}},1]} \\;\\Phi(d) := E(d) + \\mathcal{R}(d - d^{\\mathrm{old}}) = (1-d)^2 \\,\\psi_0 \\;+\\; \\mathcal{R}(d - d^{\\mathrm{old}}).\n$$\n您的任务是：\n\n- 从第一性原理（带不等式约束和率无关耗散的能量最小化）出发，为 $d$ 推导一个类似返回映射的更新算法，该算法通过互补条件来强制实现不可逆性。推导必须从增量目标函数 $\\Phi(d)$ 的平稳性和稳定性开始，并可以利用约束最小化问题产生的 Karush-Kuhn-Tucker 条件。不要假设任何特设的演化定律；从变分问题的最优性条件推导它。\n\n- 使用您推导的算法，实现一个程序，对下面列出的每个测试用例，计算更新后的 $d^{\\mathrm{new}}$，然后验证在固定的 $\\psi_0$ 下的增量能量耗散不等式：\n$$\nE\\big(d^{\\mathrm{new}}\\big) + \\mathcal{R}\\!\\left(d^{\\mathrm{new}} - d^{\\mathrm{old}}\\right) \\;\\le\\; E\\big(d^{\\mathrm{old}}\\big).\n$$\n在数值上，如果左侧小于或等于右侧（允许一个小的非负容差），则认为不等式成立。\n\n- 所有物理量必须使用一致的单位：$\\psi_0$ 的单位为焦耳/立方米，$G_c$ 的单位为焦耳/平方米，$\\ell$ 的单位为米。损伤 $d$ 是无量纲的。每个测试的最终输出是表示不等式是否满足的布尔值。\n\n您的程序中要使用的测试套件参数：\n\n- 材料参数：$G_c = 1.0\\times 10^3$ 焦耳/平方米，$\\ell = 5.0\\times 10^{-3}$ 米。因此，$Y_c = \\dfrac{G_c}{2\\,\\ell}$，单位为焦耳/立方米。\n\n- 以下 6 个独立的测试用例，每个用例由 $(d^{\\mathrm{old}}, \\psi_0)$ 指定，其中 $\\psi_0$ 的单位为焦耳/立方米：\n    1. $(d^{\\mathrm{old}}, \\psi_0) = (0.0, 4.0\\times 10^4)$。\n    2. $(d^{\\mathrm{old}}, \\psi_0) = \\left(0.1, \\dfrac{Y_c}{2\\,(1 - 0.1)}\\right)$。\n    3. $(d^{\\mathrm{old}}, \\psi_0) = (0.0, 2.0\\times 10^5)$。\n    4. $(d^{\\mathrm{old}}, \\psi_0) = (0.5, 3.0\\times 10^4)$。\n    5. $(d^{\\mathrm{old}}, \\psi_0) = (0.9, 1.0\\times 10^8)$。\n    6. $(d^{\\mathrm{old}}, \\psi_0) = (0.0, 0.0)$。\n\n最终输出格式：\n\n- 您的程序应生成单行输出，其中包含上述六个测试用例的布尔结果，形式为逗号分隔并用方括号括起来的列表（例如，`[True,False,...]`）。不应打印任何额外的文本。\n\n角度单位不适用。不涉及百分比量。所有浮点计算应以标准双精度执行。程序必须是自包含的，且不需要任何外部输入。返回的列表长度必须为 6，并严格按照所列测试用例的顺序排列。", "solution": "对提出的问题进行验证。\n\n### 第一步：提取已知条件\n- **损伤变量**：标量 $d \\in [0,1]$。\n- **不可逆性**：$d$ 是非递减的。\n- **未损伤弹性势能密度**：$\\psi_0 \\ge 0$。\n- **存储能量密度**：$E(d) = (1-d)^2 \\,\\psi_0$。\n- **耗散距离**：当 $\\Delta d \\ge 0$ 时，$\\mathcal{R}(\\Delta d) = Y_c\\,\\Delta d$，否则为 $+\\infty$。\n- **能量驱动阈值**：$Y_c = \\dfrac{G_c}{2\\,\\ell}$。\n- **增量问题**：在 $d \\in [d^{\\mathrm{old}},1]$ 上最小化 $\\Phi(d) := E(d) + \\mathcal{R}(d - d^{\\mathrm{old}})$。\n- **任务 1**：通过最小化 $\\Phi(d)$ 推导损伤更新 $d^{\\mathrm{new}}$ 的返回映射算法。\n- **任务 2**：实现该算法并数值验证能量耗散不等式 $E(d^{\\mathrm{new}}) + \\mathcal{R}(d^{\\mathrm{new}} - d^{\\mathrm{old}}) \\le E(d^{\\mathrm{old}})$。\n- **材料参数**：$G_c = 1.0\\times 10^3$ J/m²，$\\ell = 5.0\\times 10^{-3}$ m。\n- **测试用例**：提供了 6 对 $(d^{\\mathrm{old}}, \\psi_0)$。\n\n### 第二步：使用提取的已知条件进行验证\n该问题具有科学依据，是适定且客观的。它代表了变分断裂力学领域的标准公式。目标函数 $\\Phi(d)$ 在 $d \\in [d^{\\mathrm{old}}, 1]$ 上是凸函数，这确保了存在唯一的最小化子。所有参数和函数都定义清晰，单位一致。该问题未违反任何无效性标准。\n\n### 第三步：结论与行动\n该问题有效。将提供完整解答。\n\n### 损伤更新算法的推导\n\n任务是找到更新后的损伤值，记为 $d \\equiv d^{\\mathrm{new}}$，该值是以下约束最小化问题的解：\n$$\n\\min_{d \\in \\mathbb{R}} \\;\\Phi(d) = (1-d)^2 \\,\\psi_0 \\;+\\; Y_c (d - d^{\\mathrm{old}})\n$$\n受制于不可逆性和饱和约束：\n$$\nc_1(d) = d - d^{\\mathrm{old}} \\ge 0 \\\\\nc_2(d) = 1 - d \\ge 0\n$$\n这是一个凸优化问题，其 Karush-Kuhn-Tucker (KKT) 条件是其最优性的充分必要条件。我们引入与约束 $c_1$ 和 $c_2$ 分别对应的非负拉格朗日乘子 $\\lambda_1 \\ge 0$ 和 $\\lambda_2 \\ge 0$。拉格朗日函数 $\\mathcal{L}$ 为：\n$$\n\\mathcal{L}(d, \\lambda_1, \\lambda_2) = (1-d)^2 \\,\\psi_0 \\;+\\; Y_c (d - d^{\\mathrm{old}}) - \\lambda_1 (d - d^{\\mathrm{old}}) - \\lambda_2 (1-d)\n$$\nKKT 条件是：\n1.  **平稳性 (Stationarity)**：$\\dfrac{\\partial \\mathcal{L}}{\\partial d} = 0$\n2.  **原始可行性 (Primal Feasibility)**：$d - d^{\\mathrm{old}} \\ge 0$ 且 $1 - d \\ge 0$\n3.  **对偶可行性 (Dual Feasibility)**：$\\lambda_1 \\ge 0$ 且 $\\lambda_2 \\ge 0$\n4.  **互补松弛性 (Complementarity Slackness)**：$\\lambda_1 (d - d^{\\mathrm{old}}) = 0$ 且 $\\lambda_2 (1-d) = 0$\n\n由平稳性条件得出：\n$$\n\\dfrac{\\partial \\mathcal{L}}{\\partial d} = -2(1-d)\\psi_0 + Y_c - \\lambda_1 + \\lambda_2 = 0\n$$\n让我们将与 $d$ 共轭的损伤热力学驱动力定义为能量释放率 $Y(d) = -\\dfrac{\\partial E(d)}{\\partial d} = 2(1-d)\\psi_0$。平稳性条件于是变为：\n$$\nY(d) - Y_c + \\lambda_1 - \\lambda_2 = 0\n$$\n我们现在根据约束的激活情况分析可能的场景。\n\n**情况 1：弹性响应（无损伤演化）。**\n在此情况下，$d = d^{\\mathrm{old}}$。约束 $c_1$ 是激活的。我们假设上界未激活，即 $d^{\\mathrm{old}} < 1$，这意味着 $1 - d > 0$。根据互补松弛性，$\\lambda_2(1-d)=0$ 意味着 $\\lambda_2 = 0$。\n平稳性方程简化为 $Y(d^{\\mathrm{old}}) - Y_c + \\lambda_1 = 0$，得到 $\\lambda_1 = Y_c - Y(d^{\\mathrm{old}})$。\n对偶可行性条件 $\\lambda_1 \\ge 0$ 要求 $Y_c - Y(d^{\\mathrm{old}}) \\ge 0$，即：\n$$\nY(d^{\\mathrm{old}}) \\le Y_c \\quad \\iff \\quad 2(1-d^{\\mathrm{old}})\\psi_0 \\le Y_c\n$$\n如果此条件成立，解为 $d^{\\mathrm{new}} = d^{\\mathrm{old}}$。这对应于一个弹性试探步，其中驱动力未超过材料的损伤阈值。\n\n**情况 2：损伤演化。**\n在此情况下，损伤增加，因此 $d > d^{\\mathrm{old}}$。约束 $c_1$ 是非激活的，因此根据互补性，$\\lambda_1 = 0$。我们再次假设解未完全饱和，$d<1$，意味着 $\\lambda_2 = 0$。\n平稳性方程简化为损伤演化准则：\n$$\nY(d) - Y_c = 0 \\quad \\implies \\quad 2(1-d)\\psi_0 = Y_c\n$$\n解出 $d$ 得到更新后的损伤值：\n$$\nd^{\\mathrm{new}} = 1 - \\dfrac{Y_c}{2\\psi_0}\n$$\n该解在满足假设 $d > d^{\\mathrm{old}}$ 和 $d < 1$ 时有效。对于任何有限的 $\\psi_0 > 0$，由于 $Y_c > 0$，条件 $d<1$ 总是满足的。条件 $d > d^{\\mathrm{old}}$ 意味着 $1 - \\frac{Y_c}{2\\psi_0} > d^{\\mathrm{old}}$，这简化为 $2(1-d^{\\mathrm{old}})\\psi_0 > Y_c$，或 $Y(d^{\\mathrm{old}}) > Y_c$。这恰好是弹性情况条件的相反情况。\n\n**返回映射算法总结**\n推导出的逻辑构成了一个在计算力学中常见的经典返回映射算法。\n1.  根据上一步定义一个试探状态：$d^{\\mathrm{trial}} = d^{\\mathrm{old}}$。\n2.  计算试探驱动力：$Y^{\\mathrm{trial}} = Y(d^{\\mathrm{old}}) = 2(1-d^{\\mathrm{old}})\\psi_0$。\n3.  定义一个加载函数（或屈服函数）：$f = Y^{\\mathrm{trial}} - Y_c$。\n4.  如果 $f \\le 0$，状态是弹性的。更新为 $d^{\\mathrm{new}} = d^{\\mathrm{old}}$。\n5.  如果 $f > 0$，损伤发生演化。状态被“返回”到损伤面 $Y(d)=Y_c$。更新为 $d^{\\mathrm{new}} = 1 - \\dfrac{Y_c}{2\\psi_0}$。\n\n一个特殊情况是当 $\\psi_0=0$ 时。在这种情况下，$Y(d^{\\mathrm{old}}) = 0 \\le Y_c$，属于弹性情况，得出 $d^{\\mathrm{new}} = d^{\\mathrm{old}}$。这是正确的，因为没有弹性势能，就没有损伤的驱动力。\n\n该算法可以被紧凑地表达。注意条件 $Y(d^{\\mathrm{old}}) \\le Y_c$ 等价于 $d^{\\mathrm{old}} \\ge 1 - \\frac{Y_c}{2\\psi_0}$。因此，更新后的损伤 $d^{\\mathrm{new}}$ 就是 $d^{\\mathrm{old}}$ 和势函数 $\\Phi(d)$ 的无约束最小化子之间的最大值。\n对于 $\\psi_0 > 0$：\n$$ d^{\\mathrm{new}} = \\max\\left(d^{\\mathrm{old}}, \\; 1 - \\dfrac{Y_c}{2\\psi_0}\\right) $$\n这个单一表达式正确地概括了整个逻辑。\n\n### 能量耗散不等式的验证\n问题要求验证不等式：\n$$\nE\\big(d^{\\mathrm{new}}\\big) + \\mathcal{R}\\!\\left(d^{\\mathrm{new}} - d^{\\mathrm{old}}\\right) \\;\\le\\; E\\big(d^{\\mathrm{old}}\\big)\n$$\n该不等式等价于 $\\Phi(d^{\\mathrm{new}}) \\le \\Phi(d^{\\mathrm{old}})$，因为 $\\mathcal{R}(0)=0$ 且对于 $d^{\\mathrm{new}} > d^{\\mathrm{old}}$，$\\Phi(d) = E(d) + \\mathcal{R}(d-d^{\\mathrm{old}})$。根据定义，$d^{\\mathrm{new}}$ 是在可行区间 $[d^{\\mathrm{old}}, 1]$ 上最小化 $\\Phi(d)$ 的 $d$ 值。由于 $d^{\\mathrm{old}}$ 是此可行区间内的一点，因此函数在其最小值处的函数值 $\\Phi(d^{\\mathrm{new}})$ 必然小于或等于其在任何其他可行点（包括 $\\Phi(d^{\\mathrm{old}})$）处的值。\n因此，该不等式根据其构造方法必然成立。任何数值实现都应证实这一点，直到浮点精度范围。\n\n- 如果 $d^{\\mathrm{new}} = d^{\\mathrm{old}}$，不等式变为 $E(d^{\\mathrm{old}}) + 0 \\le E(d^{\\mathrm{old}})$，等式成立。\n- 如果 $d^{\\mathrm{new}} > d^{\\mathrm{old}}$，最小化子 $d^{\\mathrm{new}}$ 在 $\\frac{d\\Phi}{dd}=0$ 处找到。由于 $\\Phi$ 是一个凸函数，其在最小值处的值严格小于在边界点 $d^{\\mathrm{old}}$ 处的值（除非 $d^{\\mathrm{old}}$ 已经是最小值）。不等式将成立。\n\n数值验证可作为对所推导算法是否正确实现的合理性检查。", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the variational damage problem for a set of test cases.\n    It derives the damage update rule from first principles and verifies\n    the energy-dissipation inequality.\n    \"\"\"\n\n    # Material and model parameters\n    G_c = 1.0e3  # Fracture toughness in J/m^2\n    ell = 5.0e-3  # Regularization length in m\n    Y_c = G_c / (2.0 * ell)  # Energetic driving threshold in J/m^3\n\n    # Define the test cases from the problem statement\n    test_cases = [\n        (0.0, 4.0e4),\n        (0.1, Y_c / (2.0 * (1.0 - 0.1))),\n        (0.0, 2.0e5),\n        (0.5, 3.0e4),\n        (0.9, 1.0e8),\n        (0.0, 0.0),\n    ]\n\n    results = []\n    # A small tolerance for floating-point comparisons\n    tolerance = 1e-9\n\n    for d_old, psi_0 in test_cases:\n        # ----------------------------------------------------------------------\n        # Damage update algorithm derived from variational principles\n        # ----------------------------------------------------------------------\n        if psi_0 <= tolerance:\n            # No elastic energy, hence no driving force for damage\n            d_new = d_old\n        else:\n            # The algorithm is equivalent to taking the max of the old value\n            # and the unconstrained minimizer of the energy potential.\n            # This implements the return-mapping logic derived in the solution.\n            # a) Elastic case: 2*(1-d_old)*psi_0 <= Y_c implies d_new = d_old\n            # b) Damage case: 2*(1-d_old)*psi_0 > Y_c implies d_new = 1 - Y_c/(2*psi_0)\n            d_new = max(d_old, 1.0 - Y_c / (2.0 * psi_0))\n\n        # Ensure d_new does not exceed 1 (due to potential floating point issues)\n        d_new = min(d_new, 1.0)\n        \n        # ----------------------------------------------------------------------\n        # Verification of the incremental energy-dissipation inequality\n        # E(d_new) + R(d_new - d_old) <= E(d_old)\n        # ----------------------------------------------------------------------\n        E_new = (1.0 - d_new)**2 * psi_0\n        Delta_d = d_new - d_old\n        \n        # The dissipation R is non-zero only if damage increases.\n        # By construction, Delta_d >= 0.\n        R_Delta_d = Y_c * Delta_d\n        \n        E_old = (1.0 - d_old)**2 * psi_0\n\n        # The left-hand side (LHS) and right-hand side (RHS) of the inequality\n        lhs = E_new + R_Delta_d\n        rhs = E_old\n\n        # Check if the inequality holds, allowing for a small numerical tolerance\n        is_satisfied = (lhs <= rhs + tolerance)\n        results.append(is_satisfied)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2709377"}]}