{"hands_on_practices": [{"introduction": "这项实践将带你跨越连续介质力学的连续世界与物质点法 (MPM) 的离散网格世界之间的鸿沟。它展示了如何运用虚功原理（动量平衡的弱形式）将基于粒子的信息（如体力）投影到背景网格节点上。通过完成这个简化一维案例下的基本推导，你将具体地理解粒子到网格 (P2G) 的映射过程，并洞悉其与广为人知的有限元法 (FEM) 之间的深刻联系。", "problem": "考虑一根笔直的一维杆，其质量密度 $\\rho$ 均匀，横截面积 $A$ 恒定，占据参考域 $\\Omega = [0,L]$。假设该杆初始无应力，并受到一个空间上均匀的单位质量体力 $b$（例如，重力加速度）的作用，边界上没有施加面力。使用物质点法（MPM），并采用在线性有限元形函数，这些形函数定义在一个均匀的背景网格上，网格节点位置为 $x_j = j\\,\\Delta x$（$j$为整数），其中 $\\Delta x$ 是均匀的单元尺寸。\n\n您需要从线性动量的弱形式平衡和伽辽金投影的定义出发。然后，做出以下与标准MPM实现一致的建模选择：\n- 使用线性（分段仿射）帽函数 $N_j(x)$ 作为背景网格上的试函数和检验函数。\n- 通过粒子求积来近似域积分，每个单元使用一个粒子，位于单元中心。每个物质点（粒子）携带的质量为 $m_p = \\rho\\,A\\,\\Delta x$，体积为 $V_p = A\\,\\Delta x$。\n\n假设在所关心的瞬时，各处的柯西应力均为零（因此只有惯性力和体力有贡献）。对于任意内部节点 $i$（即恰好有两个相邻单元的节点），从第一性原理推导弱形式如何简化为一个节点方程，该方程与通过集中质量有限元离散化得到的节点方程完全相同。特别地，确定在节点 $i$ 处由体力引起的节点右端项的闭式表达式，在没有内力的情况下，该项等于惯性项 $m_i\\,a_i$。\n\n请以单个符号表达式的形式提供您的最终答案。在答案框中不需要代入数值，也不需要单位。", "solution": "所述问题具有科学依据，提法恰当且自成体系。它呈现了计算固体力学领域，特别是关于物质点法（MPM）的一个标准推导。不存在不一致或谬误之处。因此，我们着手求解。\n\n出发点是线性动量平衡的弱形式，也称为虚功原理。对于占据域 $\\Omega$ 的一维连续体，其柯西应力为 $\\sigma$，单位质量体力为 $b$，该原理表述为：\n$$\n\\int_{\\Omega} \\rho a \\delta u \\, dV + \\int_{\\Omega} \\sigma \\frac{d(\\delta u)}{dx} \\, dV = \\int_{\\Omega} \\rho b \\delta u \\, dV + \\left[ T \\delta u \\right]_{\\partial\\Omega}\n$$\n其中 $a$ 是加速度，$\\delta u$ 是任意虚位移（检验函数），$\\rho$ 是质量密度，$dV = A dx$ 是微分体积元（$A$为横截面积），$T = \\sigma A$ 是边界 $\\partial\\Omega$ 上的面力。\n\n问题指明，杆初始无应力，并且在所关心的瞬时，各处的柯西应力均为零，因此 $\\sigma = 0$。问题还说明边界上没有施加面力，所以边界项 $\\left[ T \\delta u \\right]_{\\partial\\Omega}$ 为零。因此，弱形式显著简化为：\n$$\n\\int_{\\Omega} \\rho a \\delta u \\, dV = \\int_{\\Omega} \\rho b \\delta u \\, dV\n$$\n现在我们在背景网格上应用伽辽金方法。连续加速度场 $a(x)$ 通过节点加速度 $a_j$ 和基于网格的形函数 $N_j(x)$ 的线性组合来近似：\n$$\na(x) \\approx \\sum_{j} a_j N_j(x)\n$$\n检验函数 $\\delta u$ 从相同的形函数基中选取。为了求出特定节点 $i$ 的方程，我们设 $\\delta u(x) = N_i(x)$。将这些代入简化的弱形式，得到：\n$$\n\\int_{\\Omega} \\rho \\left( \\sum_{j} a_j N_j(x) \\right) N_i(x) \\, dV = \\int_{\\Omega} \\rho b N_i(x) \\, dV\n$$\n在物质点法中，连续体积分通过对一组由 $p$ 索引的物质点（粒子）求和来近似。一个量 $f(x)$ 的积分近似为 $\\int_{\\Omega} f(x) \\, dV \\approx \\sum_p f(x_p) V_p$，其中 $x_p$ 是粒子 $p$ 的位置，$V_p$ 是其体积。将此求积法则应用于方程两边，得到：\n$$\n\\sum_p \\rho_p \\left( \\sum_{j} a_j N_j(x_p) \\right) N_i(x_p) V_p = \\sum_p \\rho_p b N_i(x_p) V_p\n$$\n使用粒子质量的定义 $m_p = \\rho_p V_p$，并认识到体力 $b$ 是均匀的，我们可以写出：\n$$\n\\sum_j \\left( \\sum_p m_p N_i(x_p) N_j(x_p) \\right) a_j = b \\sum_p m_p N_i(x_p)\n$$\n这是离散化的运动方程。右侧项是节点 $i$ 处由体力引起的节点力，我们将其表示为 $F_i^{\\text{body}}$。问题要求该项的显式表达式。\n$$\nF_i^{\\text{body}} = b \\sum_p m_p N_i(x_p)\n$$\n问题指明，每个单元有一个粒子，位于单元中心，且每个粒子的质量为 $m_p = \\rho A \\Delta x$。网格节点位于 $x_j = j \\Delta x$。对于一个内部节点 $i$，线性“帽”形函数 $N_i(x)$ 仅在域 $[x_{i-1}, x_{i+1}]$ 上非零。其显式形式为：\n$$\nN_i(x) = \\begin{cases}\n\\frac{x - x_{i-1}}{\\Delta x} & \\text{若 } x \\in [x_{i-1}, x_{i}] \\\\\n\\frac{x_{i+1} - x}{\\Delta x} & \\text{若 } x \\in [x_{i}, x_{i+1}] \\\\\n0 & \\text{其他情况}\n\\end{cases}\n$$\n由于 $N_i(x)$ 的支集是区间 $[(i-1)\\Delta x, (i+1)\\Delta x]$，只有位于此区间内的粒子才会对 $F_i^{\\text{body}}$ 的求和有贡献。由于每个单元中心有一个粒子，相关的粒子是：\n1. 位于单元 $i-1$ 中的粒子，该单元覆盖范围为 $[x_{i-1}, x_i]$。其位置是 $x_{p,i-1} = x_{i-1} + \\frac{\\Delta x}{2} = (i-1)\\Delta x + \\frac{\\Delta x}{2} = (i - \\frac{1}{2})\\Delta x$。\n2. 位于单元 $i$ 中的粒子，该单元覆盖范围为 $[x_i, x_{i+1}]$。其位置是 $x_{p,i} = x_i + \\frac{\\Delta x}{2} = i\\Delta x + \\frac{\\Delta x}{2} = (i + \\frac{1}{2})\\Delta x$。\n\n我们在这两个粒子位置处计算形函数 $N_i(x)$ 的值：\n对于位于 $x_{p,i-1}$ 处的粒子，它在域 $[x_{i-1}, x_i]$ 内：\n$$\nN_i(x_{p,i-1}) = \\frac{(i - \\frac{1}{2})\\Delta x - (i-1)\\Delta x}{\\Delta x} = \\frac{\\frac{1}{2}\\Delta x}{\\Delta x} = \\frac{1}{2}\n$$\n对于位于 $x_{p,i}$ 处的粒子，它在域 $[x_i, x_{i+1}]$ 内：\n$$\nN_i(x_{p,i}) = \\frac{(i+1)\\Delta x - (i + \\frac{1}{2})\\Delta x}{\\Delta x} = \\frac{\\frac{1}{2}\\Delta x}{\\Delta x} = \\frac{1}{2}\n$$\n现在我们通过对这两个粒子的贡献求和来计算节点力 $F_i^{\\text{body}}$。所有其他粒子都位于 $N_i(x)$ 的支集之外，贡献为零。\n$$\nF_i^{\\text{body}} = b \\left( m_p N_i(x_{p,i-1}) + m_p N_i(x_{p,i}) \\right)\n$$\n$$\nF_i^{\\text{body}} = b \\left( m_p \\cdot \\frac{1}{2} + m_p \\cdot \\frac{1}{2} \\right) = b \\, m_p\n$$\n代入给定的粒子质量表达式 $m_p = \\rho A \\Delta x$，我们得到节点体力的最终表达式：\n$$\nF_i^{\\text{body}} = \\rho b A \\Delta x\n$$\n该表达式确实与标准集中质量有限元法中获得的节点力相同。在那种方法中，内部节点 $i$ 处的集中质量为 $m_i = \\rho A \\Delta x$（来自两个相邻单元的质量各一半），一致的节点体力为 $\\int \\rho b N_i(x) dV = \\rho b A \\int_{x_{i-1}}^{x_{i+1}} N_i(x) dx = \\rho b A \\Delta x$。每个单元中心有一个粒子的MPM公式精确地再现了集中质量有限元法的结果。在没有内力的情况下，该节点的运动方程为 $m_i a_i = F_i^{\\text{body}}$，即 $(\\rho A \\Delta x) a_i = \\rho b A \\Delta x$，从而正确地得到 $a_i=b$。所要求的量是右侧项的表达式。", "answer": "$$\n\\boxed{\\rho b A \\Delta x}\n$$", "id": "2657718"}, {"introduction": "在将信息投影到网格后，下一步是从网格更新粒子的状态。这项计算实践旨在探究不同更新方案所带来的数值效应。它对比了经典的单元内粒子更新 (PIC)，一种易于产生数值耗散的方案，与更为现代的流体隐式粒子更新 (FLIP)，一种耗散更小的方案。通过亲手实现并比较这两种方案，你将培养对数值耗散的实践直觉，并理解不同MPM变体在守恒动能等物理量方面所做的关键权衡。", "problem": "要求您定量比较在物质点法 (MPM) 中使用的粒子-网格法 (PIC) 和流体-隐式-粒子法 (FLIP) 的网格到粒子 (G2P) 速度更新，该比较通过测量一次转换周期后总动能的变化来衡量其在一个二维不可压缩涡中的数值耗散。该比较必须在没有外力、没有基于网格的时间积分的设置下进行，以便任何动能变化都完全由转换方案引起。\n\n从固体力学和连续介质力学数值方法中的以下基本和核心定义出发：\n- 牛顿第二定律和线性动量守恒。\n- 网格上的质量集中和质量加权平均。\n- 结构化网格上线性有限元形函数的单位分解特性。\n- 动能的定义。\n\n考虑一个边长为 $L$ 的方形周期性域，该域被一个包含 $N \\times N$ 个节点的均匀笛卡尔节点网格离散化，网格间距为 $h = L/N$。设粒子带有质量 $m_p$、位置 $\\mathbf{x}_p \\in [0,L)^2$ 和速度 $\\mathbf{v}_p$。使用双线性（张量积）分段线性帽子函数作为粒子到网格 (P2G) 和网格到粒子 (G2P) 转换的形函数。在一维中，帽子函数为 $\\phi(r) = \\max(1 - |r|, 0)$，在二维中，从粒子 $p$ 到位置为 $\\mathbf{x}_i$ 的节点 $i$ 的权重为 $w_{ip} = \\phi\\left(\\frac{x_i - x_p}{h}\\right)\\phi\\left(\\frac{y_i - y_p}{h}\\right)$。假设所有网格索引都进行周期性环绕处理。\n\n实现以下 P2G 和 G2P 转换：\n1) P2G 质量和动量：\n- 节点质量 $m_i = \\sum_{p} m_p w_{ip}$。\n- 节点动量 $\\mathbf{p}_i = \\sum_{p} m_p w_{ip} \\mathbf{v}_p$。\n- 对于 $m_i > 0$ 的节点，节点速度为 $\\mathbf{v}_i = \\mathbf{p}_i / m_i$；否则 $\\mathbf{v}_i = \\mathbf{0}$。\n\n2) PIC 的 G2P 速度更新：\n- $\\mathbf{v}_p^{\\text{PIC}} = \\sum_{i} w_{ip} \\mathbf{v}_i$。\n\n3) 无网格更新（无力，无时间积分）情况下 FLIP 的 G2P 速度更新：\n- 设 $\\mathbf{v}_i^{n}$ 是由 $\\mathbf{v}_p^{n}$ 通过 P2G 得到的节点速度。\n- 假设 $\\mathbf{v}_i^{n+1} = \\mathbf{v}_i^{n}$（网格上无变化）。\n- 那么 FLIP 更新为 $\\mathbf{v}_p^{\\text{FLIP}} = \\mathbf{v}_p^{n} + \\sum_{i} w_{ip}(\\mathbf{v}_i^{n+1} - \\mathbf{v}_i^{n})$，简化为 $\\mathbf{v}_p^{\\text{FLIP}} = \\mathbf{v}_p^{n}$。\n\n通过围绕域中心 $\\mathbf{c} = (L/2,L/2)$ 的刚体旋转（简单涡）定义初始粒子速度：\n- $\\mathbf{v}(\\mathbf{x}) = \\omega \\begin{bmatrix} -(y - c_y) \\\\ x - c_x \\end{bmatrix}$，\n其中 $\\omega$ 是一个指定的标量角速度。该场是无散度的，并且具有空间线性分量。\n\n对于每个测试用例，计算 PIC 和 FLIP 在一个 P2G+G2P 周期前后的总动能：\n- $E_{\\text{before}} = \\tfrac{1}{2}\\sum_{p} m_p \\|\\mathbf{v}_p\\|^2$，\n- $E_{\\text{after}}^{\\text{PIC}} = \\tfrac{1}{2}\\sum_{p} m_p \\|\\mathbf{v}_p^{\\text{PIC}}\\|^2$，\n- $E_{\\text{after}}^{\\text{FLIP}} = \\tfrac{1}{2}\\sum_{p} m_p \\|\\mathbf{v}_p^{\\text{FLIP}}\\|^2$。\n将能量比 $r_{\\text{PIC}} = E_{\\text{after}}^{\\text{PIC}}/E_{\\text{before}}$ 和 $r_{\\text{FLIP}} = E_{\\text{after}}^{\\text{FLIP}}/E_{\\text{before}}$ 作为无量纲量报告（不需要物理单位）。\n\n您的程序必须精确实现上述转换，并评估以下测试套件。对于所有测试，使用域 $[0,L)^2$（其中 $L = 1.0$）、周期性边界、双线性帽子函数，并且不进行网格求解（即 $\\mathbf{v}_i^{n+1} = \\mathbf{v}_i^{n}$）。\n\n测试套件：\n- 测试 $1$（理想情况）：$N = 32$，$\\omega = 10.0$。每个单元格使用 $4$ 个粒子，使用固定的随机种子 $123$ 在每个单元格内通过抖动采样放置。所有粒子的质量相等，为 $m_p = 1.0$。\n- 测试 $2$（边界情况：单个粒子）：$N = 16$，$\\omega = 5.0$。使用一个位于位置 $(x,y) = (0.321, 0.654)$ 的粒子，其质量为 $m_p = 1.0$。\n- 测试 $3$（粗糙网格与结构化采样）：$N = 8$，$\\omega = 20.0$。在每个单元格中心放置一个粒子，所有粒子的质量均为 $m_p = 1.0$。\n- 测试 $4$（易于抵消的配置）：$N = 16$，$\\omega = 15.0$。使用两个质量相等 ($m_p = 1.0$) 的粒子，分别位于位置 $(x,y) = (0.3, 0.5)$ 和 $(x,y) = (0.7, 0.5)$。\n\n对于每个测试，计算一个 P2G+G2P 周期后的 $r_{\\text{PIC}}$ 和 $r_{\\text{FLIP}}$。您的程序应生成单行输出，其中包含一个逗号分隔的列表，用方括号括起，结果按以下顺序排列：\n$[r_{\\text{PIC}}^{(1)}, r_{\\text{FLIP}}^{(1)}, r_{\\text{PIC}}^{(2)}, r_{\\text{FLIP}}^{(2)}, r_{\\text{PIC}}^{(3)}, r_{\\text{FLIP}}^{(3)}, r_{\\text{PIC}}^{(4)}, r_{\\text{FLIP}}^{(4)}]$。", "solution": "该问题陈述已经过严格验证，被认为是定义明确、科学上合理且内部一致的。它基于计算力学的既定原则，提出了一个清晰的定量任务。未发现任何缺陷、歧义或矛盾。因此，该问题被视为有效，解法如下。\n\n问题的核心是比较物质点法 (MPM) 中两种常见的网格到粒子 (G2P) 速度更新方案的数值耗散特性：粒子-网格法 (PIC) 和流体-隐式-粒子法 (FLIP)。此比较在简化条件下（无外力、无网格量的时间积分）进行，以分离出纯粹由粒子-网格-粒子转换周期产生的能量变化。\n\n基本转换定义如下。给定一组粒子 $p$，每个粒子具有质量 $m_p$、位置 $\\mathbf{x}_p$ 和速度 $\\mathbf{v}_p$，并位于一个由节点 $i$（其位置为 $\\mathbf{x}_i$）和形函数 $w_{ip} = w_i(\\mathbf{x}_p)$ 构成的网格上，其步骤如下：\n\n$1$. 粒子到网格 (P2G) 转换：\n通过集中粒子贡献计算节点质量 $m_i$ 和动量 $\\mathbf{p}_i$。\n$$m_i = \\sum_{p} m_p w_{ip}$$\n$$\\mathbf{p}_i = \\sum_{p} m_p w_{ip} \\mathbf{v}_p$$\n然后通过质量加权平均求得节点速度 $\\mathbf{v}_i$。\n$$\\mathbf{v}_i = \\begin{cases} \\mathbf{p}_i / m_i  \\text{if } m_i  0 \\\\ \\mathbf{0}  \\text{if } m_i = 0 \\end{cases}$$\n\n$2$. 网格到粒子 (G2P) 转换：\n通过从网格插值计算新的粒子速度。\n对于 PIC，新速度是网格速度场的绝对插值：\n$$\\mathbf{v}_p^{\\text{PIC}} = \\sum_{i} w_{ip} \\mathbf{v}_i$$\n对于 FLIP，更新是增量式的。根据问题指定的条件，不存在网格求解，因此时间步结束时的网格速度 $\\mathbf{v}_i^{n+1}$ 与时间步开始时的网格速度 $\\mathbf{v}_i^{n}$ 相同。\n$$\\mathbf{v}_p^{\\text{FLIP}} = \\mathbf{v}_p^{n} + \\sum_{i} w_{ip} (\\mathbf{v}_i^{n+1} - \\mathbf{v}_i^{n}) = \\mathbf{v}_p^{n} + \\sum_{i} w_{ip} (\\mathbf{v}_i^{n} - \\mathbf{v}_i^{n}) = \\mathbf{v}_p^{n}$$\n这一简化是问题约束的直接逻辑推论。它揭示了 FLIP 方案的一个基本属性：在没有网格级更新的情况下，粒子速度保持不变。\n\n动能变化的分析，通过能量比 $r_{\\text{PIC}} = E_{\\text{after}}^{\\text{PIC}}/E_{\\text{before}}$ 和 $r_{\\text{FLIP}} = E_{\\text{after}}^{\\text{FLIP}}/E_{\\text{before}}$ 进行衡量，正是基于这些定义。\n\n对于 FLIP 更新，由于 $\\mathbf{v}_p^{\\text{FLIP}} = \\mathbf{v}_p^{n}$，在这种情况下，动能根据其构造是完全守恒的。\n$$E_{\\text{after}}^{\\text{FLIP}} = \\frac{1}{2}\\sum_{p} m_p \\|\\mathbf{v}_p^{\\text{FLIP}}\\|^2 = \\frac{1}{2}\\sum_{p} m_p \\|\\mathbf{v}_p^{n}\\|^2 = E_{\\text{before}}$$\n因此，对于所有测试用例，$r_{\\text{FLIP}} = 1.0$。\n\n对于 PIC 更新，分析取决于粒子配置和速度场的性质。P2G-G2P 的两步过程相当于一个平滑操作。粒子的速度首先投影到网格上，在那里与来自相邻粒子的贡献进行平均。这个平均后的网格速度场随后被插值回粒子的位置。这个往返过程 $\\mathbf{v}_p \\to \\{\\mathbf{v}_i\\} \\to \\mathbf{v}_p^{\\text{PIC}}$ 通常不是一个恒等操作，并且已知具有数值耗散性。\n新的粒子速度可以表示为：\n$$\\mathbf{v}_p^{\\text{PIC}} = \\sum_{i} w_{ip} \\left( \\frac{\\sum_q m_q w_{iq} \\mathbf{v}_q}{\\sum_r m_r w_{ir}} \\right)$$\n\n我们分析四个指定的测试用例：\n\n测试 1：抖动粒子采样（每个单元格 4 个粒子）。粒子位置不规则。初始速度场 $\\mathbf{v}(\\mathbf{x}) = \\omega [-(y - c_y), x - c_x]^T$ 是线性的。然而，对不规则放置的粒子上的该线性场进行 P2G 质量加权平均，通常不会得到恰好为 $\\mathbf{v}(\\mathbf{x}_i)$ 的网格速度 $\\mathbf{v}_i$。随后的 G2P 插值会引入进一步的误差。这种通过平均导致的信息损失会产生数值耗散，我们预期 $r_{\\text{PIC}}  1.0$。这种情况需要进行完整的数值评估。\n\n测试 2：单个粒子。网格仅从这一个粒子接收质量和动量。在任何受影响的节点 $i$ 处，节点速度变为 $\\mathbf{v}_i = (m_p w_{ip} \\mathbf{v}_p) / (m_p w_{ip}) = \\mathbf{v}_p$。然后 G2P 更新得到 $\\mathbf{v}_p^{\\text{PIC}} = \\sum_i w_{ip} \\mathbf{v}_i = (\\sum_i w_{ip}) \\mathbf{v}_p$。由于形函数的单位分解性质（$\\sum_i w_{ip} = 1$），这可以简化为 $\\mathbf{v}_p^{\\text{PIC}} = \\mathbf{v}_p$。动能是守恒的。因此，$r_{\\text{PIC}} = 1.0$。\n\n测试 3：每个单元格中心有一个粒子。这种高度结构化的排列与线性速度场以一种可预测的方式相互作用。对任何节点 $i$ 的 P2G 转换都涉及对四个相邻单元格中心的粒子速度进行平均。由于 $\\mathbf{v}(\\mathbf{x})$ 的线性以及粒子位置围绕节点的对称性，所得到的节点速度恰好是速度场在该节点位置的评估值：$\\mathbf{v}_i = \\mathbf{v}(\\mathbf{x}_i)$。随后，G2P 转换将这些精确的节点速度插值回粒子位置（一个单元格中心）。同样，由于线性和对称性，该插值是精确的：$\\mathbf{v}_p^{\\text{PIC}} = \\mathbf{v}(\\mathbf{x}_p) = \\mathbf{v}_p$。P2G-G2P 周期是一个恒等操作，动能是守恒的。因此，$r_{\\text{PIC}} = 1.0$。\n\n测试 4：两个粒子位于位置 $\\mathbf{x}_{p1}=(0.3, 0.5)$ 和 $\\mathbf{x}_{p2}=(0.7, 0.5)$，网格参数为 $N=16$ 和 $h=1/16=0.0625$。归一化的 x 坐标为 $x_{p1}/h = 4.8$ 和 $x_{p2}/h = 11.2$。第一个粒子影响 x 索引为 4 和 5 的节点。第二个粒子影响 x 索引为 11 和 12 的节点。受影响的网格节点集合是不相交的。因此，粒子之间不通过网格发生相互作用。每个粒子的信息被传输到其局部的网格邻域，然后独立地传回。与测试 2 一样，这对每个粒子都导致 $\\mathbf{v}_p^{\\text{PIC}} = \\mathbf{v}_p$。动能是守恒的，因此 $r_{\\text{PIC}} = 1.0$。\n\n实现过程首先为每个测试用例生成粒子位置。然后，对每个用例，计算初始速度和动能。通过遍历所有粒子并将其对质量和动量的贡献累加到一个 $N \\times N$ 的网格上来执行 P2G 转换，其中节点索引采用周期性边界条件。然后计算节点速度。PIC 的 G2P 转换通过再次遍历粒子、插值节点速度来找到新的粒子速度来执行。最后，计算得到的动能并除以初始值以获得 $r_{\\text{PIC}}$。$r_{\\text{FLIP}}$ 的值始终为 $1.0$。收集结果并按指定格式进行格式化。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef run_simulation(N, omega, particle_positions, m_p):\n    \"\"\"\n    Performs one P2G-G2P cycle and computes kinetic energy ratios.\n    \"\"\"\n    L = 1.0\n    h = L / N\n    c = np.array([L / 2.0, L / 2.0])\n\n    num_particles = particle_positions.shape[0]\n    if num_particles == 0:\n        return 1.0, 1.0\n\n    particle_masses = np.full(num_particles, m_p)\n\n    # 1. Initial velocities and kinetic energy\n    rel_pos = particle_positions - c\n    particle_velocities = omega * np.stack([-rel_pos[:, 1], rel_pos[:, 0]], axis=1)\n\n    ke_before = 0.5 * np.sum(particle_masses * np.sum(particle_velocities**2, axis=1))\n\n    if ke_before  1e-15:\n        # If initial energy is zero, any after energy is also zero. Ratio is 1.\n        return 1.0, 1.0\n\n    # 2. P2G Transfer (Particle to Grid)\n    grid_mass = np.zeros((N, N))\n    grid_momentum = np.zeros((N, N, 2))\n\n    for p in range(num_particles):\n        pos = particle_positions[p]\n        vel = particle_velocities[p]\n        mass = particle_masses[p]\n\n        grid_coord = pos / h\n        base_node_idx = np.floor(grid_coord).astype(int)\n        frac_coord = grid_coord - base_node_idx\n        fx, fy = frac_coord[0], frac_coord[1]\n\n        # Iterate over 2x2 stencil of nodes\n        for i_off in range(2):\n            for j_off in range(2):\n                node_idx = (\n                    (base_node_idx[0] + i_off) % N,\n                    (base_node_idx[1] + j_off) % N,\n                )\n\n                if i_off == 0 and j_off == 0: weight = (1.0 - fx) * (1.0 - fy)\n                elif i_off == 1 and j_off == 0: weight = fx * (1.0 - fy)\n                elif i_off == 0 and j_off == 1: weight = (1.0 - fx) * fy\n                else: weight = fx * fy\n\n                grid_mass[node_idx[1], node_idx[0]] += mass * weight\n                grid_momentum[node_idx[1], node_idx[0], :] += mass * weight * vel\n    \n    # 3. Compute nodal velocities\n    grid_velocity = np.zeros((N, N, 2))\n    valid_nodes_mask = grid_mass  1e-15\n    grid_velocity[valid_nodes_mask] = grid_momentum[valid_nodes_mask] / grid_mass[valid_nodes_mask, np.newaxis]\n\n    # 4. G2P Transfer (Grid to Particle - PIC)\n    new_particle_velocities_pic = np.zeros_like(particle_velocities)\n\n    for p in range(num_particles):\n        pos = particle_positions[p]\n        \n        grid_coord = pos / h\n        base_node_idx = np.floor(grid_coord).astype(int)\n        frac_coord = grid_coord - base_node_idx\n        fx, fy = frac_coord[0], frac_coord[1]\n\n        # Iterate over 2x2 stencil\n        for i_off in range(2):\n            for j_off in range(2):\n                node_idx = (\n                    (base_node_idx[0] + i_off) % N,\n                    (base_node_idx[1] + j_off) % N,\n                )\n                \n                if i_off == 0 and j_off == 0: weight = (1.0 - fx) * (1.0 - fy)\n                elif i_off == 1 and j_off == 0: weight = fx * (1.0 - fy)\n                elif i_off == 0 and j_off == 1: weight = (1.0 - fx) * fy\n                else: weight = fx * fy\n                \n                vel_i = grid_velocity[node_idx[1], node_idx[0], :]\n                new_particle_velocities_pic[p, :] += weight * vel_i\n    \n    # 5. Final kinetic energy (PIC)\n    ke_after_pic = 0.5 * np.sum(particle_masses * np.sum(new_particle_velocities_pic**2, axis=1))\n    \n    # 6. Ratios\n    r_pic = ke_after_pic / ke_before\n    # As derived from the problem statement, FLIP is perfectly conservative here\n    r_flip = 1.0\n    \n    return r_pic, r_flip\n\ndef solve():\n    # Define the test cases from the problem statement.\n    test_params = [\n        # (N, omega, m_p)\n        (32, 10.0, 1.0), # Test 1\n        (16, 5.0, 1.0),  # Test 2\n        (8, 20.0, 1.0),   # Test 3\n        (16, 15.0, 1.0)  # Test 4\n    ]\n\n    # ---- Generate particle positions for each test case ----\n\n    # Test 1: Jittered sampling\n    N1 = test_params[0][0]\n    h1 = 1.0 / N1\n    rng = np.random.default_rng(123)\n    positions1 = []\n    for i in range(N1):\n        for j in range(N1):\n            random_offsets = rng.random((4, 2))\n            for k in range(4):\n                px = (i + random_offsets[k, 0]) * h1\n                py = (j + random_offsets[k, 1]) * h1\n                positions1.append([px, py])\n    positions1 = np.array(positions1)\n\n    # Test 2: Single particle\n    positions2 = np.array([[0.321, 0.654]])\n\n    # Test 3: Structured sampling (cell centers)\n    N3 = test_params[2][0]\n    h3 = 1.0 / N3\n    grid_i, grid_j = np.meshgrid(np.arange(N3), np.arange(N3))\n    positions3 = (np.stack([grid_i.ravel(), grid_j.ravel()], axis=1) + 0.5) * h3\n\n    # Test 4: Two symmetric particles\n    positions4 = np.array([[0.3, 0.5], [0.7, 0.5]])\n\n    all_positions = [positions1, positions2, positions3, positions4]\n\n    # ---- Run simulations and collect results ----\n    results = []\n    for i, params in enumerate(test_params):\n        N, omega, m_p = params\n        particle_positions = all_positions[i]\n        \n        r_pic, r_flip = run_simulation(N, omega, particle_positions, m_p)\n        \n        results.append(r_pic)\n        results.append(r_flip)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(f'{r:.8f}' for r in results)}]\")\n\nsolve()\n```", "id": "2657769"}, {"introduction": "显式物质点法 (MPM) 模拟在处理大变形问题时功能强大，但其数值稳定性严重依赖于所选时间步长 $\\Delta t$ 的大小。本练习旨在解决一个根本性问题：$\\Delta t$ 最大能取多少？它将运用冯·诺依曼稳定性分析，来确定由两种不同物理过程——弹性波传播（双曲型问题）和热传导（抛物型问题）——所施加的时间步长限制。这项实践将使你掌握分析和计算多物理场耦合模拟中最大稳定时间步长的能力，这是确保任何显式MPM程序结果有效性和计算效率的关键技能。", "problem": "一个三维物质点法（MPM）模拟，用于建模一个各向同性、均匀的热弹性固体。该模拟在一个三维方向上间距均为 $h$ 的均匀笛卡尔背景网格上，对线动量平衡和热方程进行显式、完全解耦的推进。MPM 映射在网格上使用分段三线性基函数，节点方程的时间积分采用针对力学问题的中心差分法和针对热传导问题的前向欧拉法。忽略体力与体积热源。假设无穷小应变和微小温度梯度，从而线性化的控制方程有效。\n\n从各向同性线弹性的线性动量平衡方程 $ \\rho \\,\\ddot{\\boldsymbol{u}} = \\nabla \\cdot \\boldsymbol{\\sigma} $ 和傅里叶热传导方程 $ \\rho c \\,\\dot{T} = \\nabla \\cdot (k \\nabla T) $ 出发，论证为何显式时间积分会施加两个独立的稳定性限制：一个与弹性波传播相关的柯朗类约束，以及一个与热传导相关的扩散约束。通过对均匀网格上的半离散算子进行 Von Neumann 型分析，并识别出限制最强的三维模式，推导出这些约束中与维度相关的精确常数，用材料属性和网格间距表示它们，并确定最大允许时间步长为两者中的较小值。\n\n使用类似钢的固体的以下数据：\n- 杨氏模量 $E = 210 \\times 10^{9} \\,\\mathrm{Pa}$，\n- 泊松比 $\\nu = 0.30$，\n- 质量密度 $\\rho = 7800 \\,\\mathrm{kg\\,m^{-3}}$，\n- 热导率 $k = 45 \\,\\mathrm{W\\,m^{-1}\\,K^{-1}}$，\n- 比热（定压）$c = 470 \\,\\mathrm{J\\,kg^{-1}\\,K^{-1}}$，\n- 均匀网格间距 $h = 2.0 \\times 10^{-3} \\,\\mathrm{m}$。\n\n考虑力学和热学约束，计算最大允许时间步长 $\\Delta t_{\\max}$。将您的答案四舍五入到四位有效数字，并以微秒为单位表示（如果出现角度，请使用弧度）。", "solution": "所提出的问题陈述是有效的。它在科学上基于连续介质力学、热传递和数值分析的原理。该问题是适定的，提供了所有必要的控制方程、数值方案和材料数据，以推导出最大稳定时间步长的唯一且有意义的解。该问题是客观的，没有任何矛盾或歧义。我将进行全面分析。\n\n该问题要求对一个使用显式时间积分方案求解的完全解耦的热力学系统进行稳定性分析。这种解耦方式使我们能够独立分析力学和热学部分。总的最大允许时间步长 $\\Delta t_{\\max}$ 将是力学和热学子问题各自稳定性极限的最小值。\n$$\n\\Delta t_{\\max} = \\min(\\Delta t_{mech}, \\Delta t_{therm})\n$$\n\n由线性动量平衡 $\\rho \\,\\ddot{\\boldsymbol{u}} = \\nabla \\cdot \\boldsymbol{\\sigma}$ 控制的力学问题，是一个描述弹性波传播的双曲线型系统。对此类系统的显式积分受制于 Courant-Friedrichs-Lewy (CFL) 条件。该条件确保网格点的数值依赖域包含其物理依赖域，防止信息传播速度超过数值方案所允许的速度。这导致了一个稳定性极限 $\\Delta t_{mech}$，它与网格间距 $h$ 成正比，与材料中的最大波速成反比。\n\n由 Fourier 热传导定律 $\\rho c \\,\\dot{T} = \\nabla \\cdot (k \\nabla T)$ 控制的热学问题，是一个描述扩散的抛物线型系统。对于抛物线型方程的显式格式，如指定的前向欧拉法，已知是条件稳定的。稳定性条件防止了非物理的振荡，并确保数值解保持有界。这导致了一个稳定性极限 $\\Delta t_{therm}$，它与网格间距的平方 $h^2$ 成正比，与材料的热扩散率成反比。\n\n我们现在将对三维均匀笛卡尔网格（间距为 $h$）上的每个子问题进行 Von Neumann 稳定性分析。\n\n**力学稳定性分析（柯朗类约束）**\n\n弹性动力学的控制方程为：\n$$\n\\rho \\frac{\\partial^2 \\boldsymbol{u}}{\\partial t^2} = (\\lambda + \\mu) \\nabla(\\nabla \\cdot \\boldsymbol{u}) + \\mu \\nabla^2 \\boldsymbol{u}\n$$\n其中 $\\lambda$ 和 $\\mu$ 是 Lamé 参数。该系统支持压力波（P波）和剪切波（S波）。P波速度 $c_p$ 是最快的，因此决定了稳定性极限。它由下式给出：\n$$\nc_p = \\sqrt{\\frac{\\lambda + 2\\mu}{\\rho}}\n$$\n为了稳定性分析，可以将控制方程简化为标量波方程：$\\ddot{u} = c_p^2 \\nabla^2 u$。时间导数使用二阶中心差分格式进行离散化，空间拉普拉斯算子 $\\nabla^2$ 使用标准的7点有限差分格式进行离散化。位于位置 $\\boldsymbol{x}_{IJK}$ 的网格节点的半离散方程为：\n$$\n\\frac{\\boldsymbol{u}_{IJK}^{n+1} - 2\\boldsymbol{u}_{IJK}^n + \\boldsymbol{u}_{IJK}^{n-1}}{\\Delta t^2} = c_p^2 \\mathcal{L}_h(\\boldsymbol{u}_{IJK}^n)\n$$\n其中 $\\mathcal{L}_h$ 是离散拉普拉斯算子。中心差分格式的稳定性由 $\\Delta t \\le 2/\\omega_{\\max}$ 给出，其中 $\\omega_{\\max}$ 是半离散系统的最大频率。频率 $\\omega$ 与离散空间算子的特征值有关。离散拉普拉斯算子负算子 $-\\mathcal{L}_h$ 的特征值为：\n$$\n\\lambda_{\\boldsymbol{k}} = \\frac{4}{h^2} \\left[ \\sin^2\\left(\\frac{k_x h}{2}\\right) + \\sin^2\\left(\\frac{k_y h}{2}\\right) + \\sin^2\\left(\\frac{k_z h}{2}\\right) \\right]\n$$\n其中 $\\boldsymbol{k} = (k_x, k_y, k_z)$ 是波矢量。最大特征值 $\\lambda_{\\max}$ 发生在网格可以解析的最高频率模式下，这对应于 $k_x h = \\pi$，$k_y h = \\pi$ 和 $k_z h = \\pi$。\n$$\n\\lambda_{\\max} = \\frac{4}{h^2} (\\sin^2(\\pi/2) + \\sin^2(\\pi/2) + \\sin^2(\\pi/2)) = \\frac{4}{h^2}(1+1+1) = \\frac{12}{h^2}\n$$\n系统的最大频率是 $\\omega_{\\max} = \\sqrt{c_p^2 \\lambda_{\\max}} = c_p \\sqrt{12/h^2} = \\frac{2\\sqrt{3}c_p}{h}$。\n因此，力学部分的稳定性条件为：\n$$\n\\Delta t_{mech} \\le \\frac{2}{\\omega_{\\max}} = \\frac{2}{\\frac{2\\sqrt{3}c_p}{h}} = \\frac{h}{\\sqrt{3}c_p}\n$$\n三维力学问题的与维度相关的精确常数是 $1/\\sqrt{3}$。\n\n**热学稳定性分析（扩散约束）**\n\n热传导控制方程为 $\\dot{T} = \\alpha \\nabla^2 T$，其中 $\\alpha = k/(\\rho c)$ 是热扩散率。时间导数使用前向欧拉法离散化，空间导数对拉普拉斯算子使用相同的7点格式：\n$$\n\\frac{T_{IJK}^{n+1} - T_{IJK}^n}{\\Delta t} = \\alpha \\mathcal{L}_h(T_{IJK}^n)\n$$\n我们通过代入一个通用的 Fourier 模式 $T_{IJK}^n = G^n \\exp(i \\boldsymbol{k} \\cdot \\boldsymbol{x}_{IJK})$ 来进行 Von Neumann 分析。放大因子 $G$ 可求得为：\n$$\nG = 1 + \\alpha \\Delta t \\left( - \\frac{4}{h^2} \\left[ \\sin^2\\left(\\frac{k_x h}{2}\\right) + \\sin^2\\left(\\frac{k_y h}{2}\\right) + \\sin^2\\left(\\frac{k_z h}{2}\\right) \\right] \\right)\n$$\n为了保证稳定性，我们要求 $|G| \\le 1$。由于 $G$ 是实数，且乘以 $\\alpha \\Delta t$ 的项是非正的，所以条件 $G \\le 1$ 总是满足的。条件 $G \\ge -1$ 提供了以下限制：\n$$\n1 - \\frac{4\\alpha \\Delta t}{h^2} \\left[ \\sin^2\\left(\\frac{k_x h}{2}\\right) + \\sin^2\\left(\\frac{k_y h}{2}\\right) + \\sin^2\\left(\\frac{k_z h}{2}\\right) \\right] \\ge -1\n$$\n$$\n2 \\ge \\frac{4\\alpha \\Delta t}{h^2} \\left[ \\sin^2\\left(\\frac{k_x h}{2}\\right) + \\sin^2\\left(\\frac{k_y h}{2}\\right) + \\sin^2\\left(\\frac{k_z h}{2}\\right) \\right]\n$$\n这个不等式必须对所有波矢量 $\\boldsymbol{k}$ 成立。限制最强的情况对应于方括号中项的最大值，即 $1+1+1=3$（如前所示）。\n$$\n2 \\ge \\frac{4\\alpha \\Delta t}{h^2} (3) \\implies \\Delta t \\le \\frac{2h^2}{12\\alpha}\n$$\n因此，热学部分的稳定性条件为：\n$$\n\\Delta t_{therm} \\le \\frac{h^2}{6\\alpha}\n$$\n三维热学问题的与维度相关的精确常数是 $1/6$。\n\n**数值计算**\n\n首先，我们使用所提供的数据计算稳定性约束所需的材料属性：\n$E = 210 \\times 10^{9} \\,\\mathrm{Pa}$，$\\nu = 0.30$，$\\rho = 7800 \\,\\mathrm{kg\\,m^{-3}}$，$k = 45 \\,\\mathrm{W\\,m^{-1}\\,K^{-1}}$，$c = 470 \\,\\mathrm{J\\,kg^{-1}\\,K^{-1}}$，以及 $h = 2.0 \\times 10^{-3} \\,\\mathrm{m}$。\n\nP波速度 $c_p$ 用 $E$ 和 $\\nu$ 表示为：\n$$\nc_p = \\sqrt{\\frac{E(1-\\nu)}{\\rho(1+\\nu)(1-2\\nu)}} = \\sqrt{\\frac{(210 \\times 10^9)(1-0.30)}{(7800)(1+0.30)(1-2 \\times 0.30)}} = \\sqrt{\\frac{1.47 \\times 10^{11}}{7800 \\times 1.3 \\times 0.4}} = \\sqrt{\\frac{1.47 \\times 10^{11}}{4056}} \\approx 6020.18 \\,\\mathrm{m\\,s^{-1}}\n$$\n力学时间步长限制为：\n$$\n\\Delta t_{mech} \\le \\frac{h}{\\sqrt{3}c_p} = \\frac{2.0 \\times 10^{-3}}{\\sqrt{3} \\times 6020.18} \\approx 1.9179 \\times 10^{-7} \\,\\mathrm{s}\n$$\n接下来，热扩散率 $\\alpha$ 为：\n$$\n\\alpha = \\frac{k}{\\rho c} = \\frac{45}{7800 \\times 470} = \\frac{45}{3666000} \\approx 1.2275 \\times 10^{-5} \\,\\mathrm{m^2\\,s^{-1}}\n$$\n热学时间步长限制为：\n$$\n\\Delta t_{therm} \\le \\frac{h^2}{6\\alpha} = \\frac{(2.0 \\times 10^{-3})^2}{6 \\times 1.2275 \\times 10^{-5}} = \\frac{4.0 \\times 10^{-6}}{7.365 \\times 10^{-5}} \\approx 0.05431 \\,\\mathrm{s}\n$$\n比较这两个极限：\n$$\n\\Delta t_{mech} \\approx 0.1918 \\,\\mathrm{\\mu s}\n$$\n$$\n\\Delta t_{therm} \\approx 54310 \\,\\mathrm{\\mu s}\n$$\n力学稳定性判据远比热学判据更具限制性。因此，模拟的最大允许时间步长由弹性波的 Courant 条件决定。\n$$\n\\Delta t_{\\max} = \\Delta t_{mech} \\approx 1.9179 \\times 10^{-7} \\,\\mathrm{s}\n$$\n转换为微秒并四舍五入到四位有效数字，我们得到：\n$$\n\\Delta t_{\\max} \\approx 0.1918 \\,\\mathrm{\\mu s}\n$$", "answer": "$$\n\\boxed{0.1918}\n$$", "id": "2657752"}]}