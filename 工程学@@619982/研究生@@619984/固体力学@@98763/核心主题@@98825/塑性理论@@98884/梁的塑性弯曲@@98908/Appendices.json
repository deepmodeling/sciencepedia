{"hands_on_practices": [{"introduction": "要精通塑性弯曲理论，我们必须首先理解如何分析一个完全屈服的横截面。本练习将引导您运用第一性原理计算塑性中和轴（$y_p$）的位置，其位置由压应力区和拉应力区面积相等的力平衡条件确定，这与位于几何形心的弹性中和轴不同。[@problem_id:2670368] 通过分析一个单轴对称的T形截面，您将直接体会到这一关键差异，并为计算截面的塑性极限弯矩（$M_p$）打下坚实的基础。", "problem": "一根关于其强轴单轴对称的T形截面直棱柱梁承受正弯曲，使得顶翼缘受压，底缘受拉。材料为理想弹塑性，屈服应力为 $\\sigma_{y}$，且梁中无轴向力。平截面假定成立。\n\nT形截面的几何尺寸如下：翼缘宽度 $b_{f} = 200\\,\\mathrm{mm}$，翼缘厚度 $t_{f} = 20\\,\\mathrm{mm}$，腹板厚度 $t_{w} = 20\\,\\mathrm{mm}$，翼缘下方的腹板高度 $h_{w} = 180\\,\\mathrm{mm}$。截面总高度为 $h = t_{f} + h_{w} = 200\\,\\mathrm{mm}$。\n\n对于理想弹塑性材料，从内力与内力矩平衡的基本原理出发，求解当弯矩 $M = M_{p}$ 时对应的全塑性状态下的以下参数：\n- 塑性中和轴的位置 $y_{p}$（从顶面朝下测量），以及\n- 塑性受压区和受拉区的竖向范围 $a_{c}$ 和 $a_{t}$，它们分别定义为从塑性中和轴到最外侧受压纤维（顶面）和最外侧受拉纤维（底面）的距离。\n\n所有距离以 $\\mathrm{mm}$ 为单位表示。不要使用任何未从所述原理推导出的简化公式。", "solution": "该问题陈述具有科学依据，提法明确，且无矛盾之处。这是结构塑性分析中的一个标准问题。我们可以开始求解。\n\n纯弯曲（零轴力）下全塑性截面分析的基本原理源于内力平衡。材料被指定为理想弹塑性。在全塑性状态下，截面中的每一根纤维都已屈服。这意味着应力大小均匀，等于屈服应力 $\\sigma_y$，其符号取决于纤维是受拉还是受压。\n\n设受压截面面积为 $A_c$，受拉截面面积为 $A_t$。受压区的应力为 $-\\sigma_y$，受拉区的应力为 $+\\sigma_y$。塑性中和轴（PNA）是这两个区域之间的分界线。轴力平衡要求截面上的总力为零：\n$$ \\sum F_x = \\int_A \\sigma \\, dA = 0 $$\n代入全塑性状态下的应力值：\n$$ \\int_{A_c} (-\\sigma_y) \\, dA + \\int_{A_t} (+\\sigma_y) \\, dA = 0 $$\n因为 $\\sigma_y$ 是一个非零常数，它可以被提取出来：\n$$ -\\sigma_y \\int_{A_c} dA + \\sigma_y \\int_{A_t} dA = 0 $$\n$$ -\\sigma_y A_c + \\sigma_y A_t = 0 $$\n这导出了确定塑性中和轴位置的基本条件：\n$$ A_c = A_t $$\n截面总面积为 $A = A_c + A_t$。因此，PNA必须将总面积平分为两半：\n$$ A_c = A_t = \\frac{A}{2} $$\n首先，我们计算T形截面的总面积。给定的几何尺寸为：翼缘宽度 $b_f = 200\\,\\mathrm{mm}$，翼缘厚度 $t_f = 20\\,\\mathrm{mm}$，腹板厚度 $t_w = 20\\,\\mathrm{mm}$，翼缘下方的腹板高度 $h_w = 180\\,\\mathrm{mm}$。\n翼缘面积为 $A_f = b_f \\times t_f = 200\\,\\mathrm{mm} \\times 20\\,\\mathrm{mm} = 4000\\,\\mathrm{mm}^2$。\n腹板面积为 $A_w = h_w \\times t_w = 180\\,\\mathrm{mm} \\times 20\\,\\mathrm{mm} = 3600\\,\\mathrm{mm}^2$。\n截面总面积为 $A = A_f + A_w = 4000\\,\\mathrm{mm}^2 + 3600\\,\\mathrm{mm}^2 = 7600\\,\\mathrm{mm}^2$。\n\n根据上述推导出的原理，受压区面积 $A_c$ 必须是总面积的一半：\n$$ A_c = \\frac{A}{2} = \\frac{7600\\,\\mathrm{mm}^2}{2} = 3800\\,\\mathrm{mm}^2 $$\n问题陈述顶翼缘受压。我们必须找到PNA的位置，用 $y_p$ 表示（从顶面朝下测量），使得其上方的面积为 $3800\\,\\mathrm{mm}^2$。\n我们将所需的受压面积 $A_c$ 与翼缘面积 $A_f$ 进行比较。\n$A_c = 3800\\,\\mathrm{mm}^2$ 且 $A_f = 4000\\,\\mathrm{mm}^2$。\n由于 $A_c < A_f$，塑性中和轴必定位于翼缘内部。\n\n设 $y_p$ 为从顶面到PNA的距离。由于PNA位于翼缘内（$0 \\le y_p \\le t_f$），受压区是一个宽度为 $b_f$、深度为 $y_p$ 的矩形：\n$$ A_c = b_f \\times y_p $$\n代入已知值：\n$$ 3800\\,\\mathrm{mm}^2 = 200\\,\\mathrm{mm} \\times y_p $$\n解出 $y_p$：\n$$ y_p = \\frac{3800\\,\\mathrm{mm}^2}{200\\,\\mathrm{mm}} = 19\\,\\mathrm{mm} $$\n$y_p = 19\\,\\mathrm{mm}$ 的值小于翼缘厚度 $t_f = 20\\,\\mathrm{mm}$，这证实了我们关于PNA位于翼缘内的假设。\n因此，从顶面朝下测量的塑性中和轴的位置是 $y_p = 19\\,\\mathrm{mm}$。\n\n接下来，我们确定受压区和受拉区的竖向范围 $a_c$ 和 $a_t$。\n$a_c$ 定义为从PNA到最外侧受压纤维（即梁的顶面）的距离。顶面位于 $y=0$。PNA位于 $y=y_p$。\n$$ a_c = |y_p - 0| = y_p = 19\\,\\mathrm{mm} $$\n$a_t$ 定义为从PNA到最外侧受拉纤维（即梁的底面）的距离。截面总高度为 $h = t_f + h_w = 20\\,\\mathrm{mm} + 180\\,\\mathrm{mm} = 200\\,\\mathrm{mm}$。底面位于 $y=h$。\n$$ a_t = |h - y_p| = 200\\,\\mathrm{mm} - 19\\,\\mathrm{mm} = 181\\,\\mathrm{mm} $$\n作为检验，这些范围之和必须等于梁的总高度：$a_c + a_t = 19\\,\\mathrm{mm} + 181\\,\\mathrm{mm} = 200\\,\\mathrm{mm}$，这是正确的。\n\n所求的量为塑性中和轴的位置 $y_p$，以及受压区和受拉区的范围 $a_c$ 和 $a_t$。\n计算值为：\n$y_p = 19\\,\\mathrm{mm}$\n$a_c = 19\\,\\mathrm{mm}$\n$a_t = 181\\,\\mathrm{mm}$", "answer": "$$\n\\boxed{\n\\begin{pmatrix}\n19 & 19 & 181\n\\end{pmatrix}\n}\n$$", "id": "2670368"}, {"introduction": "一旦掌握了横截面的塑性极限弯矩（$M_p$），我们就可以进而分析整个结构的倒塌行为。本练习要求您将极限分析的静力（下限）定理应用于一个静不定悬臂梁——这是塑性设计中的一个经典问题。[@problem_id:2670343] 通过构建一个满足屈服条件 $|M(x)| \\le M_p$ 的静力许可弯矩场，您将确定该结构极限承载能力的一个安全的下限估计值。", "problem": "一根长度为 $L$ 的等截面直梁，在 $x=0$ 处被嵌固，在 $x=L$ 处为简支（铰接），形成一根嵌支梁。该梁在 $0 \\le x \\le L$ 的区间上承受一个大小未知但恒定的均布荷载 $w$。材料被建模为刚-理想塑性体，其在弯曲作用下具有对称且截面恒定的塑性极限弯矩承载力 $M_p$（即弯矩屈服条件为对所有 $x$ 满足 $|M(x)| \\le M_p$）。剪切破坏被忽略，且梁在横向足够宽，以至于平截面保持平面。\n\n使用极限分析的静力（下限）定理，并仅使用梁的平衡关系，确定最大的荷载值 $w$，使得存在一个弯矩场 $M(x)$ 满足以下条件：\n- 与施加的荷载满足一维平衡，\n- 满足 $x=L$ 处铰链所施加的边界条件，\n- 并且处处满足屈服条件 $|M(x)| \\le M_p$。\n\n不要使用任何运动（上限）论证。将最终答案表示为仅包含 $M_p$ 和 $L$ 的闭式表达式。无需进行数值计算，最终表达式中不应包含单位。", "solution": "在尝试求解之前，对问题陈述进行验证。\n\n**第1步：提取已知条件**\n-   梁的几何形状：等截面直梁，长度 $L$。\n-   边界条件：在 $x=0$ 处为嵌固支座，在 $x=L$ 处为简支（铰接）支座。\n-   荷载：在整个跨度 $0 \\le x \\le L$ 上，大小恒定的均布荷载 $w$。\n-   材料模型：刚-理想塑性。\n-   屈服准则：弯矩 $M(x)$ 受塑性极限弯矩承载力 $M_p$ 的限制，即对于所有 $x \\in [0, L]$，满足 $|M(x)| \\le M_p$。\n-   方法论：极限分析的静力（下限）定理，仅使用平衡关系。\n-   目标：找到最大的荷载值 $w$，使得存在一个弯矩场 $M(x)$，该场满足平衡条件、边界条件 $M(L)=0$ 以及屈服准则。\n\n**第2步：使用提取的已知条件进行验证**\n该问题是结构塑性分析中的一个经典练习，特别是静力定理在静不定梁上的应用。所有提供的信息在固体力学领域都是标准的。\n-   **科学依据：** 该问题基于梁理论、平衡以及完善的塑性极限分析理论的基本原理。刚-理想塑性模型是一种标准的理想化模型。该问题在科学上是合理的。\n-   **适定性：** 问题要求找到满足一组约束条件的最大荷载，这是一个适定的优化问题。预计可以得到一个唯一的破坏荷载解。\n-   **客观性：** 问题使用精确、无歧义的专业术语进行陈述。\n问题设定是完整的、一致的，并且可以形式化。没有科学、逻辑或结构上的缺陷。\n\n**结论**\n问题是有效的。下面将推导解答。\n\n**求解推导**\n本题要求找到与极限分析静力定理相符的最大荷载 $w$。这需要找到一个弯矩场 $M(x)$，使其满足：\n1.  平衡：该场必须与施加的荷载 $w$ 和支反力保持平衡。\n2.  边界条件：该场必须满足任何给定的弯矩边界条件。此处为 $M(L)=0$。\n3.  屈服条件：弯矩的绝对值不得超过塑性极限弯矩承载力，即对所有 $x \\in [0, L]$，满足 $|M(x)| \\le M_p$。\n\n设 $R_L$ 为 $x=L$ 处铰支座的竖向支反力。弯矩的平衡方程为 $\\frac{d^2M}{dx^2} = -w$。\n对 $x$ 积分一次，得到剪力 $V(x) = \\frac{dM}{dx} = -wx + C_1$。\n再次积分，得到弯矩 $M(x) = -\\frac{1}{2}wx^2 + C_1x + C_2$。\n\n常数 $C_1$ 和 $C_2$ 由支反力确定。在嵌固端 $x=0$ 处，剪力为 $V(0) = R_0$，弯矩为 $M(0)=M_0$。因此，$C_1=R_0$ 且 $C_2=M_0$。\n弯矩场为 $M(x) = M_0 + R_0x - \\frac{1}{2}wx^2$。\n总的竖向力平衡方程为 $R_0+R_L=wL$。\n该问题是静不定的。静力定理允许我们通过寻找存在有效弯矩场的最大 $w$ 来找到破坏荷载。这将在形成破坏机构时发生，对于此梁，这需要形成两个塑性铰。这些铰链的可能位置在弯矩绝对值的最大点处。在均布向下的荷载作用下，负弯矩峰值出现在嵌固支座（$x=0$）处，正弯矩峰值出现在跨中的某个位置。\n\n我们以 $x=L$ 处的支反力 $R_L$ 为冗余变量，重新表示弯矩。\n$M(x) = R_L(L-x) - \\frac{w}{2}(L-x)^2$。此表达式自动满足 $M(L)=0$ 和平衡条件。\n\n关键的弯矩值是：\n1.  嵌固支座处的弯矩，即 $x=0$ 处：\n    $M(0) = R_L L - \\frac{wL^2}{2}$。这将是最大负弯矩的位置。\n2.  跨内的最大正弯矩。这发生在剪力为零处：\n    $V(x) = \\frac{dM}{dx} = -R_L + w(L-x) = 0 \\implies x_p = L - \\frac{R_L}{w}$。\n    将 $x_p$ 代入弯矩表达式，得到最大正弯矩：\n    $M_{pos,max} = M(x_p) = R_L\\left(\\frac{R_L}{w}\\right) - \\frac{w}{2}\\left(\\frac{R_L}{w}\\right)^2 = \\frac{R_L^2}{w} - \\frac{R_L^2}{2w} = \\frac{R_L^2}{2w}$。\n\n为使梁处于塑性容许状态，我们必须对所有 $x$ 有 $|M(x)| \\le M_p$。这要求：\n-   $|M(0)| \\le M_p \\implies -M_p \\le R_L L - \\frac{wL^2}{2}$。\n-   $M_{pos,max} \\le M_p \\implies \\frac{R_L^2}{2w} \\le M_p$。\n\n破坏荷载 $w$ 是指存在一个满足这些条件的 $R_L$ 值时的最大荷载。当等式成立时达到这个最大值，这标志着塑性铰的形成：\n1.  $M(0) = -M_p \\implies R_L L - \\frac{wL^2}{2} = -M_p$。\n2.  $M_{pos,max} = M_p \\implies \\frac{R_L^2}{2w} = M_p$。\n\n我们求解这个关于 $w$ 和 $R_L$ 的二元方程组。由第一个方程，我们得到 $R_L$ 的表达式：\n$R_L = \\frac{wL}{2} - \\frac{M_p}{L}$。\n将此式代入第二个方程：\n$\\frac{1}{2w}\\left(\\frac{wL}{2} - \\frac{M_p}{L}\\right)^2 = M_p$。\n展开平方项：\n$\\frac{1}{2w}\\left(\\frac{w^2L^2}{4} - 2\\frac{wL}{2}\\frac{M_p}{L} + \\frac{M_p^2}{L^2}\\right) = M_p$。\n$\\frac{w^2L^2}{4} - wM_p + \\frac{M_p^2}{L^2} = 2wM_p$。\n整理各项得到一个关于 $w$ 的二次方程：\n$\\frac{w^2L^2}{4} - 3wM_p + \\frac{M_p^2}{L^2} = 0$。\n为简化，两边乘以 $4L^2$：\n$w^2L^4 - 12wL^2M_p + 4M_p^2 = 0$。\n使用求根公式 $w = \\frac{-b \\pm \\sqrt{b^2-4ac}}{2a}$ 求解 $w$：\n$w = \\frac{12L^2M_p \\pm \\sqrt{(-12L^2M_p)^2 - 4(L^4)(4M_p^2)}}{2L^4}$。\n$w = \\frac{12L^2M_p \\pm \\sqrt{144L^4M_p^2 - 16L^4M_p^2}}{2L^4}$。\n$w = \\frac{12L^2M_p \\pm \\sqrt{128L^4M_p^2}}{2L^4} = \\frac{12L^2M_p \\pm 8\\sqrt{2}L^2M_p}{2L^4}$。\n$w = \\frac{(12 \\pm 8\\sqrt{2})M_p}{2L^2} = (6 \\pm 4\\sqrt{2})\\frac{M_p}{L^2}$。\n\n我们必须选择物理上正确的解。内部塑性铰的形成要求其位置 $x_p$ 在梁的跨度内，即 $0 < x_p < L$。\n$x_p = L - \\frac{R_L}{w} = L - \\frac{1}{w}\\left(\\frac{wL}{2} - \\frac{M_p}{L}\\right) = \\frac{L}{2} + \\frac{M_p}{wL}$。\n$x_p < L$ 的条件意味着 $\\frac{M_p}{wL} < \\frac{L}{2}$，这要求 $w > \\frac{2M_p}{L^2}$。\n关于 $w$ 的两个解是：\n$w_1 = (6 + 4\\sqrt{2})\\frac{M_p}{L^2} \\approx 11.657\\frac{M_p}{L^2}$。\n$w_2 = (6 - 4\\sqrt{2})\\frac{M_p}{L^2} \\approx 0.343\\frac{M_p}{L^2}$。\n显然，$w_1 > \\frac{2M_p}{L^2}$ 而 $w_2 < \\frac{2M_p}{L^2}$。\n较大的根 $w_1$ 对应于一个带有内部铰的有效破坏机构。较小的根 $w_2$ 对应于最大正弯矩会出现在梁跨之外的情况，这与假设的铰形成模式相矛盾。因此，可以承受的最大荷载值 $w$ 是 $w_1$。", "answer": "$$\\boxed{(6 + 4\\sqrt{2})\\frac{M_p}{L^2}}$$", "id": "2670343"}, {"introduction": "塑性弯曲的解析方法通常仅限于简单的几何形状和理想化的材料模型。这个高级实践将带您进入计算固体力学的世界，要求您编写一个“纤维模型”程序，以模拟具有复杂分层材料特性（包括不同硬化规律）的梁的响应。[@problem_id:2670335] 您将实现核心的数值技术，例如用于求解平衡的牛顿-拉弗森法和用于更新本构关系的返回映射算法，从而亲身体验现代工程软件如何分析结构非线性问题。", "problem": "要求您实现一个完整的、可运行的程序，该程序使用单轴率无关塑性与各向同性硬化的分层（纤维）数值积分方法，在指定的曲率历史下，构建叠层矩形金属梁的增量弯曲响应。\n\n在每个曲率增量步，必须通过对未知轴向应变进行标量牛顿迭代来施加轴力平衡，从而计算截面响应。同时，每一层都通过适用于其硬化法则的一维回映算法进行更新。\n\n该问题必须在以下假设和基本原则下求解：\n- 运动学：小应变假设和 Bernoulli-Euler 假说，即平截面在变形后保持为平面且垂直于中性轴。沿截面深度坐标的轴向应变分布由 $ \\varepsilon(y) = \\varepsilon_0 - \\kappa \\, y $ 给出，其中 $ \\varepsilon_0 $ 是几何形心（$ y = 0 $）处的截面轴向应变，$ \\kappa $ 是标量曲率，$ y $ 是朝向顶面为正的坐标。\n- 静力学：截面力合力为轴力 $ N = \\int_A \\sigma \\, \\mathrm{d}A $ 和弯矩 $ M = \\int_A \\sigma \\, y \\, \\mathrm{d}A $，其中 $ \\sigma $ 是轴向 Cauchy 应力。对于宽度为常数 $ b $ 的矩形截面，在分层中点积分下，这些积分简化为黎曼和 $ N \\approx \\sum_i \\sigma_i \\, b \\, t_i $ 和 $ M \\approx \\sum_i \\sigma_i \\, y_i \\, b \\, t_i $，其中 $ t_i $ 是层厚度，$ y_i $ 是其形心坐标。\n- 每层的本构响应：一维、率无关、关联塑性，与基于偏应力张量第二不变量（J2）的 von Mises 屈服准则在单轴应力下的特例一致。设应变可加性分解为 $ \\varepsilon = \\varepsilon^{\\mathrm{e}} + \\varepsilon^{\\mathrm{p}} $，其中 $ \\sigma = E \\, \\varepsilon^{\\mathrm{e}} $（胡克定律），屈服函数为 $ \\varphi(\\sigma,p) = |\\sigma| - \\sigma_{y0} - R(p) \\le 0 $，其中 $ \\sigma_{y0} $ 是初始屈服应力，$ p $ 是累积等效塑性应变，$ R(p) $ 是一个各向同性硬化函数。流动法则是 $ \\mathrm{d}\\varepsilon^{\\mathrm{p}} = \\mathrm{d}\\lambda \\, \\mathrm{sign}(\\sigma) $ 和 $ \\mathrm{d}p = \\mathrm{d}\\lambda $，并遵循 Karush-Kuhn-Tucker 加载-卸载条件。如果发生屈服，必须通过求解标量塑性一致性问题来实现层级上的单轴回映算法。\n\n您的代码必须实现：\n- 对矩形截面进行纤维离散化，将其划分为 $ N_{\\ell} $ 个等厚度的层，每层厚度为 $ t = h/N_{\\ell} $，其中 $ h $ 是截面深度。对于 $ i = 0, 1, \\dots, N_{\\ell}-1 $，各层的形心坐标为 $ y_i = -h/2 + \\left(i+\\tfrac{1}{2}\\right) t $。\n- 在每个加载步，对未知变量 $ \\varepsilon_0 $ 进行牛顿迭代，以强制满足 $ N = N_{\\mathrm{ext}} $（其中 $ N_{\\mathrm{ext}} = 0 $），而曲率 $ \\kappa $ 由加载历史指定。对于给定的迭代值 $ \\varepsilon_0 $，第 $i$ 层的总应变为 $ \\varepsilon_i = \\varepsilon_0 - \\kappa \\, y_i $。使用分层回映算法计算该状态下的应力 $ \\sigma_i $ 和算法切线 $ \\partial \\sigma_i / \\partial \\varepsilon_i $。组合残差 $ r = \\sum_i \\sigma_i \\, b \\, t - N_{\\mathrm{ext}} $ 和截面切线刚度 $ K = \\sum_i \\left(\\partial \\sigma_i / \\partial \\varepsilon_i\\right) b \\, t $，并更新 $ \\varepsilon_0 \\leftarrow \\varepsilon_0 - r/K $，直至轴力收敛。收敛后，计算弯矩 $ M = \\sum_i \\sigma_i \\, y_i \\, b \\, t $。\n- 按深度划分的各层硬化法则：\n  - 顶部三分之一（即 $ y \\in (h/6, h/2] $）：线性各向同性硬化 $ R(p) = H \\, p $。\n  - 中部三分之一（即 $ y \\in [-h/6, h/6] $）：弹性理想塑性 $ R(p) = 0 $。\n  - 底部三分之一（即 $ y \\in [-h/2, -h/6) $）：Voce 型饱和硬化 $ R(p) = Q \\left( 1 - e^{-b_{\\mathrm{V}} p} \\right) $。\n- 层级上的回映算法：\n  - 根据层的总应变和上一步的塑性应变计算弹性试探应力。\n  - 如果是弹性状态，则接受试探状态。\n  - 如果是塑性状态，则求解由 $ \\varphi(\\sigma_{n+1}, p_{n+1}) = 0 $ 产生的标量塑性一致性问题，以获得塑性乘子增量。对于线性和弹性理想塑性硬化，该标量方程存在闭式解。对于 Voce 法则，使用稳健的牛顿法求解该标量方程，并对屈服函数设置合适的停止准则。\n  - 在更新后的状态下，提供截面级牛顿迭代所需的算法一致性切线 $ \\partial \\sigma / \\partial \\varepsilon $。\n\n物理和数值单位：\n- 所有长度 $ b $ 和 $ h $ 的单位为米。弹性模量 $ E $、屈服应力 $ \\sigma_{y0} $ 以及硬化参数 $ H $ 和 $ Q $ 的单位为帕斯卡。曲率 $ \\kappa $ 的单位为米⁻¹。弯矩 $ M $ 必须以牛顿米报告。最终答案以牛顿米表示，四舍五入至三位有效数字。\n\n测试套件和要求输出：\n- 为以下三个测试用例实现计算。每个用例都使用如上所述的按深度三分之一分配的硬化法则，但具有各自的几何形状和曲率历史。截面宽度 $ b $ 沿深度保持不变。对于每个用例，在每个加载步中，轴向合力都约束为 $ N_{\\mathrm{ext}} = 0 $。使用包含端点在内的等间距曲率步。\n\n  - 用例 A（常规混合塑性，“理想路径”）：\n    - 几何参数：$ b = 0.06 \\ \\mathrm{m} $，$ h = 0.12 \\ \\mathrm{m} $，层数 $ N_{\\ell} = 120 $。\n    - 各区域材料参数：\n      - 顶部三分之一（线性硬化）：$ E = 2.10 \\times 10^{11} \\ \\mathrm{Pa} $，$ \\sigma_{y0} = 3.20 \\times 10^{8} \\ \\mathrm{Pa} $，$ H = 1.20 \\times 10^{9} \\ \\mathrm{Pa} $。\n      - 中部三分之一（理想塑性）：$ E = 2.00 \\times 10^{11} \\ \\mathrm{Pa} $，$ \\sigma_{y0} = 2.20 \\times 10^{8} \\ \\mathrm{Pa} $。\n      - 底部三分之一（Voce）：$ E = 2.10 \\times 10^{11} \\ \\mathrm{Pa} $，$ \\sigma_{y0} = 3.00 \\times 10^{8} \\ \\mathrm{Pa} $，$ Q = 1.50 \\times 10^{8} \\ \\mathrm{Pa} $，$ b_{\\mathrm{V}} = 25 $。\n    - 曲率历史：从 $ \\kappa = 0 $ 到 $ \\kappa = 0.06 \\ \\mathrm{m}^{-1} $，分为 $ 80 $ 个等增量步。\n\n  - 用例 B（纯弹性边界情况）：\n    - 几何参数：$ b = 0.06 \\ \\mathrm{m} $，$ h = 0.12 \\ \\mathrm{m} $，层数 $ N_{\\ell} = 120 $。\n    - 材料参数与用例 A 相同。\n    - 曲率历史：从 $ \\kappa = 0 $ 到 $ \\kappa = 1.0 \\times 10^{-5} \\ \\mathrm{m}^{-1} $，分为 $ 4 $ 个等增量步。\n\n  - 用例 C（反向弯曲和强塑性边缘情况）：\n    - 几何参数：$ b = 0.05 \\ \\mathrm{m} $，$ h = 0.10 \\ \\mathrm{m} $，层数 $ N_{\\ell} = 100 $。\n    - 各区域材料参数：\n      - 顶部三分之一（线性硬化）：$ E = 2.05 \\times 10^{11} \\ \\mathrm{Pa} $，$ \\sigma_{y0} = 3.00 \\times 10^{8} \\ \\mathrm{Pa} $，$ H = 1.00 \\times 10^{9} \\ \\mathrm{Pa} $。\n      - 中部三分之一（理想塑性）：$ E = 2.00 \\times 10^{11} \\ \\mathrm{Pa} $，$ \\sigma_{y0} = 2.00 \\times 10^{8} \\ \\mathrm{Pa} $。\n      - 底部三分之一（Voce）：$ E = 2.10 \\times 10^{11} \\ \\mathrm{Pa} $，$ \\sigma_{y0} = 3.20 \\times 10^{8} \\ \\mathrm{Pa} $，$ Q = 2.00 \\times 10^{8} \\ \\mathrm{Pa} $，$ b_{\\mathrm{V}} = 20 $。\n    - 曲率历史：从 $ \\kappa = 0 $ 到 $ \\kappa = -0.05 \\ \\mathrm{m}^{-1} $，分为 $ 60 $ 个等增量步。\n\n- 对于每个用例，报告其历史中最终曲率下的弯矩。您的程序应生成单行输出，其中包含一个用方括号括起来的逗号分隔列表，列表内容为三个用例的弯矩（单位：牛顿米），按 [用例 A 结果, 用例 B 结果, 用例 C 结果] 的顺序排列，并四舍五入至三位有效数字。例如，您的输出必须类似于 $ [m_A, m_B, m_C] $，其中每个 $ m_\\cdot $ 是一个以牛顿米为单位、四舍五入到三位有效数字的浮点数。\n\n科学真实性和实现约束：\n- 使用上述本构和平衡原理。除了所描述的分层数值积分和牛顿解法外，不要假设任何闭式截面响应。\n- 为层级塑性求解和截面级牛顿求解设置稳健的容差。确保算法对给定的测试套件收敛，并且轴力平衡残差相对于特征截面力尺度被驱动到一个可忽略的值。\n- 最终代码必须是自包含的，不需任何输入，并遵守稍后指定的执行环境。唯一允许使用的外部库是 Numerical Python (NumPy) 和 Python 标准库。", "solution": "所提出的问题是计算固体力学中一个适定且科学上严谨的练习。它要求实现一个数值算法来模拟叠层梁的塑性弯曲。所提供的关于几何、材料行为、加载和数值方法的细节是完整、一致的，并且基于成熟的力学原理。该问题是有效的。我们开始进行求解。\n\n任务是在净轴力 $N=0$ 的约束下，计算承受指定曲率历史 $\\kappa$ 的矩形梁截面的弯矩 $M$。该梁由具有不同材料属性的层组成，表现出带各向同性硬化的弹塑性行为。求解需要一个嵌套迭代方法：外循环对曲率进行增量加载，内循环通过 Newton-Raphson 方法确定截面的中性轴应变 $\\varepsilon_0$ 以满足轴向平衡。每个材料层的状态都使用回映算法进行更新。\n\n**1. 运动学与截面离散化**\n\n我们采用 Bernoulli-Euler 假说，即平截面保持为平面。距离截面几何形心 $y$ 处的轴向应变 $\\varepsilon$ 是线性的：\n$$ \\varepsilon(y) = \\varepsilon_0 - \\kappa y $$\n此处，$\\varepsilon_0$ 是形心（$y=0$）处的轴向应变，$\\kappa$ 是指定的曲率。坐标 $y$ 朝向梁的顶面为正。\n\n高度为 $h$、宽度为 $b$ 的矩形截面被离散为 $N_{\\ell}$ 个等厚度的层，厚度为 $t = h/N_{\\ell}$。每一层 $i$（其中 $i=0, \\dots, N_{\\ell}-1$）由其形心坐标 $y_i$ 和面积 $A_i=b \\cdot t$ 表示：\n$$ y_i = -\\frac{h}{2} + \\left(i+\\frac{1}{2}\\right)t $$\n这种离散表示将截面力合力的积分定义转换为黎曼和：\n- 轴力：$N = \\int_A \\sigma \\, \\mathrm{d}A \\approx \\sum_{i=0}^{N_{\\ell}-1} \\sigma_i \\, A_i$\n- 弯矩：$M = \\int_A \\sigma y \\, \\mathrm{d}A \\approx \\sum_{i=0}^{N_{\\ell}-1} \\sigma_i \\, y_i \\, A_i$\n其中 $\\sigma_i$ 是第 $i$ 层内的均匀轴向应力。\n\n**2. 层本构模型与回映算法**\n\n每一层都遵循一维、率无关的弹塑性本构法则。总应变 $\\varepsilon$ 被加性分解为一个弹性部分 $\\varepsilon^{\\mathrm{e}}$ 和一个塑性部分 $\\varepsilon^{\\mathrm{p}}$：\n$$ \\varepsilon = \\varepsilon^{\\mathrm{e}} + \\varepsilon^{\\mathrm{p}} $$\n应力 $\\sigma$ 通过胡克定律与弹性应变相关，$\\sigma = E \\varepsilon^{\\mathrm{e}}$，其中 $E$ 是杨氏模量。\n\n塑性变形由一个屈服函数 $\\varphi$ 控制，该函数依赖于应力 $\\sigma$ 和一个内状态变量，即累积塑性应变 $p$：\n$$ \\varphi(\\sigma, p) = |\\sigma| - (\\sigma_{y0} + R(p)) \\le 0 $$\n其中 $\\sigma_{y0}$ 是初始屈服应力，$R(p)$ 是描述屈服面扩张的硬化函数。仅当 $\\varphi = 0$ 时才会发生塑性流动。\n\n塑性应变的演化由关联流动法则描述：\n$$ \\mathrm{d}\\varepsilon^{\\mathrm{p}} = \\mathrm{d}\\lambda \\, \\mathrm{sign}(\\sigma) \\quad \\text{和} \\quad \\mathrm{d}p = |\\mathrm{d}\\varepsilon^{\\mathrm{p}}| = \\mathrm{d}\\lambda $$\n其中 $\\mathrm{d}\\lambda \\ge 0$ 是塑性乘子。Karush-Kuhn-Tucker (KKT) 条件 $\\mathrm{d}\\lambda \\ge 0$, $\\varphi \\le 0$ 和 $\\mathrm{d}\\lambda \\cdot \\varphi = 0$ 必须成立。\n\n对于给定的总应变增量，使用回映算法来找到更新后的应力和状态变量：\n1.  **弹性预测步**：假设该步是纯弹性的，计算一个试探应力：\n    $$ \\sigma^{\\mathrm{trial}} = E(\\varepsilon_{n+1} - \\varepsilon^{\\mathrm{p}}_n) $$\n    其中下标 $n$ 表示增量开始时的状态。\n2.  **屈服检查**：在试探状态下评估屈服函数：\n    $$ \\varphi^{\\mathrm{trial}} = |\\sigma^{\\mathrm{trial}}| - (\\sigma_{y0} + R(p_n)) $$\n    如果 $\\varphi^{\\mathrm{trial}} \\le 0$，则该步是弹性的。状态更新为 $\\sigma_{n+1} = \\sigma^{\\mathrm{trial}}$，$\\varepsilon^{\\mathrm{p}}_{n+1} = \\varepsilon^{\\mathrm{p}}_n$，$p_{n+1}=p_n$。材料的响应是线性的，因此算法切线模量为 $E^{\\mathrm{alg}} = E$。\n3.  **塑性修正步**：如果 $\\varphi^{\\mathrm{trial}} > 0$，则该步是塑性的。状态必须被“回映”到更新后的屈服面上。这需要求解塑性乘子增量 $\\Delta\\lambda > 0$，以满足该步结束时的一致性条件 $\\varphi(\\sigma_{n+1}, p_{n+1})=0$。代入关系式 $\\sigma_{n+1} = \\sigma^{\\mathrm{trial}} - E\\Delta\\lambda\\,\\mathrm{sign}(\\sigma^{\\mathrm{trial}})$ 和 $p_{n+1} = p_n + \\Delta\\lambda$，我们得到一个关于 $\\Delta\\lambda$ 的标量方程：\n    $$ g(\\Delta\\lambda) = |\\sigma^{\\mathrm{trial}}| - E\\Delta\\lambda - (\\sigma_{y0} + R(p_n + \\Delta\\lambda)) = 0 $$\n    $\\Delta\\lambda$ 的解取决于硬化函数 $R(p)$ 的形式：\n    - **弹性理想塑性 ($R(p)=0$):**  方程是线性的，得到一个闭式解：$\\Delta\\lambda = \\frac{|\\sigma^{\\mathrm{trial}}| - \\sigma_{y0}}{E}$。\n    - **线性硬化 ($R(p)=H p$)：** 方程同样是关于 $\\Delta\\lambda$ 的线性方程：$\\Delta\\lambda = \\frac{|\\sigma^{\\mathrm{trial}}| - (\\sigma_{y0} + H p_n)}{E+H}$。\n    - **Voce 饱和硬化 ($R(p) = Q(1-e^{-b_{\\mathrm{V}}p})$)：** 方程变为非线性，必须数值求解，为此我们实现了一个标量牛顿法。迭代公式为 $\\Delta\\lambda_{k+1} = \\Delta\\lambda_k - g(\\Delta\\lambda_k)/g'(\\Delta\\lambda_k)$，其中 $g'(\\Delta\\lambda) = -E - R'(p_n+\\Delta\\lambda)$。\n\n一旦求得 $\\Delta\\lambda$，状态就更新为：$p_{n+1}=p_n+\\Delta\\lambda$，$\\varepsilon^{\\mathrm{p}}_{n+1} = \\varepsilon^{\\mathrm{p}}_n + \\Delta\\lambda\\,\\mathrm{sign}(\\sigma^{\\mathrm{trial}})$，以及 $\\sigma_{n+1} = E(\\varepsilon_{n+1} - \\varepsilon^{\\mathrm{p}}_{n+1})$。\n\n截面级牛顿迭代需要一致性算法切线模量 $E^{\\mathrm{alg}} = \\frac{\\mathrm{d}\\sigma_{n+1}}{\\mathrm{d}\\varepsilon_{n+1}}$。对于弹性步，$E^{\\mathrm{alg}}=E$。对于塑性步，它由下式给出：\n$$ E^{\\mathrm{alg}} = \\frac{E \\, R'(p_{n+1})}{E + R'(p_{n+1})} $$\n其中 $R'(p)$ 是硬化模量。对于理想塑性，$R'=0$，因此 $E^{\\mathrm{alg}}=0$。对于线性硬化，$R'=H$，因此 $E^{\\mathrm{alg}}=\\frac{EH}{E+H}$。\n\n**3. 截面级平衡**\n\n对于每个指定的曲率 $\\kappa_{n+1}$，我们必须找到满足轴力平衡条件 $N(\\varepsilon_0) = 0$ 的轴向应变 $\\varepsilon_0$。这是一个标量求根问题，我们使用牛顿法来求解。\n从 $\\varepsilon_0$ 的一个初始猜测值开始，我们进行迭代：\n$$ \\varepsilon_0^{(k+1)} = \\varepsilon_0^{(k)} - \\frac{r^{(k)}}{K^{(k)}} $$\n残差 $r^{(k)}$ 是净轴力，切线刚度 $K^{(k)}$ 是它关于 $\\varepsilon_0$ 的导数：\n$$ r^{(k)} = N(\\varepsilon_0^{(k)}) = \\sum_{i} \\sigma_i(\\varepsilon_0^{(k)}) \\, A_i $$\n$$ K^{(k)} = \\frac{\\mathrm{d}N}{\\mathrm{d}\\varepsilon_0}\\bigg|_{\\varepsilon_0^{(k)}} = \\sum_{i} \\frac{\\mathrm{d}\\sigma_i}{\\mathrm{d}\\varepsilon_i} \\frac{\\mathrm{d}\\varepsilon_i}{\\mathrm{d}\\varepsilon_0} A_i = \\sum_{i} E^{\\mathrm{alg}}_i \\, A_i $$\n迭代持续进行，直到残差的绝对值 $|r^{(k)}|$ 小于指定的容差。\n\n**4. 模拟算法**\n\n完整的模拟过程如下：\n1.  **初始化**：离散化截面，并根据每层的形心坐标 $y_i$ 为其分配材料属性（杨氏模量、屈服应力、硬化法则）。初始化所有状态变量：所有层的塑性应变 $\\varepsilon^{\\mathrm{p}}_i = 0$ 和累积塑性应变 $p_i = 0$。\n2.  **曲率增量**：遍历指定的等间距曲率值序列，从 $\\kappa=0$ 到最终目标曲率。\n3.  **截面分析**：对于每个新的曲率值 $\\kappa_{n+1}$：\n    a.  使用上文描述的截面级 Newton-Raphson 方法求解相应的形心应变 $\\varepsilon_0$。前一个曲率步的收敛值可作为初始猜测值。\n    b.  在每次牛顿迭代中，基于当前的试探总应变 $\\varepsilon_i = \\varepsilon_0 - \\kappa_{n+1}y_i$，使用回映算法计算每层的应力 $\\sigma_i$ 和算法切线模量 $E^{\\mathrm{alg}}_i$。\n4.  **状态更新**：一旦 $\\varepsilon_0$ 收敛，计算并存储当前曲率步的最终层状态（$\\sigma_i, \\varepsilon^{\\mathrm{p}}_i, p_i$），这些状态将成为下一个增量步的“上一步”状态。\n5.  **弯矩计算**：在求解完最后一个曲率步后，使用收敛的层应力计算相应的弯矩：$M = \\sum_i \\sigma_i \\, y_i \\, A_i$。\n\n将此程序应用于问题陈述中指定的三个测试用例，以获得最终的弯矩。", "answer": "```python\nimport numpy as np\nimport math\n\n# Constants for numerical tolerances and limits\nSECTION_FORCE_TOL = 1e-6  # Tolerance for section axial force equilibrium [N]\nLAYER_CONSISTENCY_TOL = 1e-9  # Tolerance for layer consistency condition [Pa]\nMAX_SECTION_ITER = 20  # Max iterations for section Newton-Raphson\nMAX_LAYER_ITER = 20  # Max iterations for layer (Voce) Newton-Raphson\n\ndef round_to_sf(x, sf):\n    \"\"\"Rounds a number to a specified number of significant figures.\"\"\"\n    if x == 0:\n        return 0.0\n    return float(f\"{x:.{sf}g}\")\n\ndef _solve_voce_consistency(sig_trial_abs, p_n, E, sigy0, h_params):\n    \"\"\"\n    Solves the nonlinear consistency equation for Voce hardening\n    using Newton's method to find the plastic multiplier increment delta_lambda.\n    \"\"\"\n    Q, b_V = h_params\n    delta_lambda = 0.0\n\n    for _ in range(MAX_LAYER_ITER):\n        # Evaluate consistency residual g(delta_lambda)\n        p_np1 = p_n + delta_lambda\n        R_np1 = Q * (1.0 - math.exp(-b_V * p_np1))\n        g = sig_trial_abs - E * delta_lambda - (sigy0 + R_np1)\n\n        if abs(g) < LAYER_CONSISTENCY_TOL:\n            return delta_lambda\n\n        # Evaluate derivative g'(delta_lambda)\n        hardening_modulus_np1 = Q * b_V * math.exp(-b_V * p_np1)\n        g_prime = -E - hardening_modulus_np1\n        \n        # Newton update\n        delta_lambda -= g / g_prime\n\n    return delta_lambda # Return best effort if not converged\n\ndef update_layer_state(total_strain, ep_n, p_n, mat_props):\n    \"\"\"\n    Performs the return-mapping algorithm for a single layer.\n    \"\"\"\n    E, sigy0, hardening_type, h_params = mat_props\n\n    # 1. Elastic predictor\n    sig_trial = E * (total_strain - ep_n)\n    sig_trial_abs = abs(sig_trial)\n\n    # Calculate hardening at previous step\n    if hardening_type == 'perfect':\n        R_n = 0.0\n    elif hardening_type == 'linear':\n        H = h_params[0]\n        R_n = H * p_n\n    else: # Voce\n        Q, b_V = h_params\n        R_n = Q * (1.0 - math.exp(-b_V * p_n))\n\n    # 2. Yield check\n    phi_trial = sig_trial_abs - (sigy0 + R_n)\n\n    if phi_trial <= 1e-9:  # Elastic step\n        E_alg = E\n        return sig_trial, E_alg, ep_n, p_n\n    \n    # 3. Plastic corrector\n    sign_sig = np.sign(sig_trial) if sig_trial != 0 else 1.0\n    \n    # Solve for plastic multiplier increment delta_lambda\n    if hardening_type == 'perfect':\n        delta_lambda = phi_trial / E\n        hardening_modulus_np1 = 0.0\n    elif hardening_type == 'linear':\n        H = h_params[0]\n        delta_lambda = phi_trial / (E + H)\n        hardening_modulus_np1 = H\n    else: # Voce\n        delta_lambda = _solve_voce_consistency(sig_trial_abs, p_n, E, sigy0, h_params)\n        Q, b_V = h_params\n        p_np1 = p_n + delta_lambda\n        hardening_modulus_np1 = Q * b_V * math.exp(-b_V * p_np1)\n\n    # Update state variables\n    p_np1 = p_n + delta_lambda\n    ep_np1 = ep_n + delta_lambda * sign_sig\n    sig_np1 = E * (total_strain - ep_np1)\n\n    # Calculate consistent algorithmic tangent\n    E_alg = (E * hardening_modulus_np1) / (E + hardening_modulus_np1)\n    \n    return sig_np1, E_alg, ep_np1, p_np1\n\ndef run_simulation(case):\n    \"\"\"Main simulation driver for a single test case.\"\"\"\n    b, h, Nl = case['geom']\n    materials = case['materials']\n    kappa_start, kappa_end, n_steps = case['history']\n    \n    # Section discretization\n    t = h / Nl\n    layer_area = b * t\n    y_coords = -h / 2.0 + (np.arange(Nl) + 0.5) * t\n\n    # Assign material properties to layers\n    layer_mat_props = []\n    h_6 = h / 6.0\n    for y_i in y_coords:\n        if y_i > h_6:\n            layer_mat_props.append(materials['top'])\n        elif y_i < -h_6:\n            layer_mat_props.append(materials['bottom'])\n        else:\n            layer_mat_props.append(materials['middle'])\n\n    # Initialize state variables\n    ep_vals = np.zeros(Nl)  # Plastic strain\n    p_vals = np.zeros(Nl)   # Accumulated plastic strain\n    epsilon0 = 0.0\n\n    kappa_hist = np.linspace(kappa_start, kappa_end, n_steps + 1)\n\n    # Loop through curvature increments\n    for kappa_curr in kappa_hist[1:]:\n        epsilon0_guess = epsilon0  # Use previous converged value as guess\n        \n        # Section-level Newton-Raphson for epsilon0\n        for _ in range(MAX_SECTION_ITER):\n            # Store layer results for current iteration\n            sig_vals_iter = np.zeros(Nl)\n            E_alg_vals_iter = np.zeros(Nl)\n            \n            # Layer-wise update\n            total_strains_iter = epsilon0_guess - kappa_curr * y_coords\n            for i in range(Nl):\n                sig_i, E_alg_i, _, _ = update_layer_state(\n                    total_strains_iter[i], ep_vals[i], p_vals[i], layer_mat_props[i]\n                )\n                sig_vals_iter[i] = sig_i\n                E_alg_vals_iter[i] = E_alg_i\n            \n            # Assemble residual and tangent stiffness\n            residual_N = np.sum(sig_vals_iter) * layer_area\n            tangent_K = np.sum(E_alg_vals_iter) * layer_area\n            \n            # Check for convergence\n            if abs(residual_N) < SECTION_FORCE_TOL:\n                epsilon0 = epsilon0_guess\n                break\n            \n            if abs(tangent_K) < 1e-9: # Avoid division by zero\n                # This should not happen in these problems\n                epsilon0 = epsilon0_guess\n                break\n\n            # Newton update\n            epsilon0_guess -= residual_N / tangent_K\n        else:\n            # If loop finishes without break, it did not converge\n            # Use the last guess and proceed\n            epsilon0 = epsilon0_guess\n        \n        # Update state variables for the converged step\n        final_strains = epsilon0 - kappa_curr * y_coords\n        for i in range(Nl):\n            _, _, ep_np1, p_np1 = update_layer_state(\n                final_strains[i], ep_vals[i], p_vals[i], layer_mat_props[i]\n            )\n            ep_vals[i] = ep_np1\n            p_vals[i] = p_np1\n            \n    # Final calculation after all increments\n    final_strains = epsilon0 - kappa_end * y_coords\n    final_sigmas = np.zeros(Nl)\n    for i in range(Nl):\n        sig_i, _, _, _ = update_layer_state(\n            final_strains[i], ep_vals[i], p_vals[i], layer_mat_props[i]\n        )\n        final_sigmas[i] = sig_i\n\n    final_moment = np.sum(final_sigmas * y_coords) * layer_area\n    return final_moment\n\ndef solve():\n    \"\"\"Defines and runs the test cases, then prints the results.\"\"\"\n    test_cases = [\n        # Case A\n        {\n            'geom': (0.06, 0.12, 120),\n            'materials': {\n                'top':    (2.10e11, 3.20e8, 'linear', (1.20e9,)),\n                'middle': (2.00e11, 2.20e8, 'perfect', ()),\n                'bottom': (2.10e11, 3.00e8, 'voce', (1.50e8, 25.0)),\n            },\n            'history': (0.0, 0.06, 80),\n        },\n        # Case B\n        {\n            'geom': (0.06, 0.12, 120),\n            'materials': {\n                'top':    (2.10e11, 3.20e8, 'linear', (1.20e9,)),\n                'middle': (2.00e11, 2.20e8, 'perfect', ()),\n                'bottom': (2.10e11, 3.00e8, 'voce', (1.50e8, 25.0)),\n            },\n            'history': (0.0, 1.0e-5, 4),\n        },\n        # Case C\n        {\n            'geom': (0.05, 0.10, 100),\n            'materials': {\n                'top':    (2.05e11, 3.00e8, 'linear', (1.00e9,)),\n                'middle': (2.00e11, 2.00e8, 'perfect', ()),\n                'bottom': (2.10e11, 3.20e8, 'voce', (2.00e8, 20.0)),\n            },\n            'history': (0.0, -0.05, 60),\n        }\n    ]\n\n    results = []\n    for case in test_cases:\n        moment = run_simulation(case)\n        rounded_moment = round_to_sf(moment, 3)\n        results.append(rounded_moment)\n\n    print(f\"[{','.join(map(str, results))}]\")\n\nif __name__ == '__main__':\n    solve()\n```", "id": "2670335"}]}