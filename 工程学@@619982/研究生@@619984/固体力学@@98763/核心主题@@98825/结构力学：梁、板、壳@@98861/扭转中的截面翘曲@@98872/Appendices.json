{"hands_on_practices": [{"introduction": "理论学习之后，通过具体计算来巩固理解至关重要。对于某些特定的非圆形截面，我们可以求得扭转问题的精确解析解。本练习以等边三角形截面为例，这是一个经典的教科书问题，它将引导你实践如何应用普朗特应力函数 $\\Psi$ 求解泊松方程 $\\nabla^2 \\Psi = -2G\\theta$。通过构造一个满足边界条件的精确多项式解，你将能加深对翘曲截面扭转理论核心方程和求解过程的理解。", "problem": "一根直的、均匀的、各向同性的杆，其横截面为边长为 $s$ 的等边三角形，受到圣维南扭转，绕 $z$ 轴的单位长度均匀扭转角为 $\\theta$。在横截面平面内选择笛卡尔坐标系 $(x,y)$，使得三角形的一条边与 $x$ 轴上从 $(0,0)$ 到 $(s,0)$ 的线段重合，第三个顶点位于 $\\left(\\frac{s}{2}, \\frac{\\sqrt{3}}{2}s\\right)$。在经典的圣维南框架下，使用普朗特应力函数 $\\Phi(x,y)$，使得剪应力表示为\n- $\\tau_{xz} = \\frac{\\partial \\Phi}{\\partial y}$,\n- $\\tau_{yz} = - \\frac{\\partial \\Phi}{\\partial x}$,\n并且普朗特应力函数满足带有恒定源项的泊松方程，\n- $\\nabla^{2} \\Phi = -2G\\theta$ 在三角形域内，\n以及自由表面边界条件\n- $\\Phi = 0$ 在三角形的每条边上。\n\n仅从这些陈述和扭矩的定义出发，\n$$\nT \\,=\\, \\iint_{A} \\big( x\\,\\tau_{yz} \\,-\\, y\\,\\tau_{xz} \\big)\\, \\mathrm{d}A,\n$$\n其中 $A$ 是三角形区域的面积，完成以下任务：\n\n1. 构造一个 $\\Phi(x,y)$ 的显式多项式候选函数，使其在所有三条边上都满足 $\\Phi=0$，确定为使 $\\nabla^{2}\\Phi=-2G\\theta$ 在域内成立所需的唯一标量因子，并验证每条边上的边界条件 $\\Phi=0$。\n\n2. 仅使用给定的定义和基本的矢量微积分恒等式，将扭矩积分简化为仅涉及 $\\Phi$ 的面积分，并由此得到由 $T = G J \\theta$ 定义的扭转常数 $J$ 作为 $\\Phi$ 的泛函。\n\n3. 对给定的等边三角形精确计算所得的面积分，以获得 $J$ 作为 $s$ 的函数的封闭形式表达式。\n\n将最终的扭转常数 $J$ 表示为仅含 $s$ 的单个精确符号表达式。不需要进行数值舍入。最终表达式中不包含单位。", "solution": "问题陈述在科学上是合理的、适定的和完整的。它提出了弹性理论中的一个标准问题——具有等边三角形截面的棱柱杆的扭转问题，并使用普朗特应力函数进行表述。所有的控制方程和边界条件都已正确指定。我们将按要求分三部分进行求解。\n\n第1部分：应力函数 $\\Phi(x,y)$ 的构造\n\n问题要求构造一个应力函数 $\\Phi(x,y)$，使其在三角形域内满足泊松方程 $\\nabla^{2} \\Phi = -2G\\theta$ 并且在其边界上为零。该三角形的顶点位于 $(0,0)$、$(s,0)$ 和 $(\\frac{s}{2}, \\frac{\\sqrt{3}}{2}s)$。构成边界的三条直线是：\n1. $x$ 轴上的边: $L_1: y = 0$。\n2. 连接 $(s,0)$ 和 $(\\frac{s}{2}, \\frac{\\sqrt{3}}{2}s)$ 的边: $L_2: y - 0 = \\frac{\\frac{\\sqrt{3}}{2}s - 0}{\\frac{s}{2}-s}(x-s)$，简化为 $y = -\\sqrt{3}(x-s)$，或 $y + \\sqrt{3}x - \\sqrt{3}s = 0$。\n3. 连接 $(0,0)$ 和 $(\\frac{s}{2}, \\frac{\\sqrt{3}}{2}s)$ 的边: $L_3: y = \\sqrt{3}x$，或 $y - \\sqrt{3}x = 0$。\n\n一个在所有三条边界线上都为零的多项式函数可以构造成定义这些直线的线性表达式的乘积。我们提出一个形式如下的候选函数：\n$$ \\Phi(x,y) = C \\cdot y \\cdot (y - \\sqrt{3}x) \\cdot (y + \\sqrt{3}x - \\sqrt{3}s) $$\n其中 $C$ 是一个待定常数。展开这个多项式：\n$$ \\Phi(x,y) = C \\cdot (y^2 - \\sqrt{3}xy) \\cdot (y + \\sqrt{3}x - \\sqrt{3}s) $$\n$$ \\Phi(x,y) = C \\cdot [y^2(y + \\sqrt{3}x - \\sqrt{3}s) - \\sqrt{3}xy(y + \\sqrt{3}x - \\sqrt{3}s)] $$\n$$ \\Phi(x,y) = C \\cdot [y^3 + \\sqrt{3}xy^2 - \\sqrt{3}sy^2 - \\sqrt{3}xy^2 - 3x^2y + 3sxy] $$\n$$ \\Phi(x,y) = C \\cdot (y^3 - 3x^2y - \\sqrt{3}sy^2 + 3sxy) $$\n根据构造，该函数在三角形的边界上为零，因为它的一个因子在每条边上都为零。\n\n接下来，我们必须强制执行条件 $\\nabla^{2} \\Phi = -2G\\theta$。我们计算 $\\Phi(x,y)$ 的拉普拉斯算子：\n$$ \\frac{\\partial \\Phi}{\\partial x} = C \\cdot (-6xy + 3sy) $$\n$$ \\frac{\\partial^2 \\Phi}{\\partial x^2} = C \\cdot (-6y) $$\n$$ \\frac{\\partial \\Phi}{\\partial y} = C \\cdot (3y^2 - 3x^2 - 2\\sqrt{3}sy + 3sx) $$\n$$ \\frac{\\partial^2 \\Phi}{\\partial y^2} = C \\cdot (6y - 2\\sqrt{3}s) $$\n拉普拉斯算子是这些二阶偏导数的和：\n$$ \\nabla^2 \\Phi = \\frac{\\partial^2 \\Phi}{\\partial x^2} + \\frac{\\partial^2 \\Phi}{\\partial y^2} = C(-6y) + C(6y - 2\\sqrt{3}s) = -2\\sqrt{3}Cs $$\n将此等式设为 $-2G\\theta$ 得：\n$$ -2\\sqrt{3}Cs = -2G\\theta \\implies C = \\frac{G\\theta}{\\sqrt{3}s} $$\n因此，满足给定条件的唯一应力函数是：\n$$ \\Phi(x,y) = \\frac{G\\theta}{\\sqrt{3}s}(y^3 - 3x^2y - \\sqrt{3}sy^2 + 3sxy) $$\n边界条件 $\\Phi=0$ 的验证可以从乘积形式立即得出，因为对于三角形边上的任何一点，线性因子 $y$、$y-\\sqrt{3}x$ 或 $y+\\sqrt{3}x-\\sqrt{3}s$ 中的一个会变为零。\n\n第2部分：扭转常数 $J$ 的推导\n\n扭矩 $T$ 定义为：\n$$ T = \\iint_{A} (x\\,\\tau_{yz} - y\\,\\tau_{xz}) \\mathrm{d}A $$\n将应力分量用 $\\Phi$ 表示代入：\n$$ T = \\iint_{A} \\left[ x\\left(- \\frac{\\partial \\Phi}{\\partial x}\\right) - y\\left(\\frac{\\partial \\Phi}{\\partial y}\\right) \\right] \\mathrm{d}A $$\n$$ T = - \\iint_{A} \\left( x \\frac{\\partial \\Phi}{\\partial x} + y \\frac{\\partial \\Phi}{\\partial y} \\right) \\mathrm{d}A $$\n我们识别出被积函数是某个矢量场散度的一部分。考虑矢量场 $\\mathbf{F} = \\Phi\\mathbf{r}$，其中 $\\mathbf{r} = x\\mathbf{i} + y\\mathbf{j}$。其散度为：\n$$ \\nabla \\cdot \\mathbf{F} = \\nabla \\cdot (\\Phi\\mathbf{r}) = (\\nabla\\Phi) \\cdot \\mathbf{r} + \\Phi(\\nabla \\cdot \\mathbf{r}) = \\left(\\frac{\\partial \\Phi}{\\partial x}x + \\frac{\\partial \\Phi}{\\partial y}y\\right) + \\Phi(1+1) = \\left(x \\frac{\\partial \\Phi}{\\partial x} + y \\frac{\\partial \\Phi}{\\partial y}\\right) + 2\\Phi $$\n 重排这个恒等式得到：\n$$ x \\frac{\\partial \\Phi}{\\partial x} + y \\frac{\\partial \\Phi}{\\partial y} = \\nabla \\cdot (\\Phi\\mathbf{r}) - 2\\Phi $$\n将此代入扭矩的表达式中：\n$$ T = - \\iint_{A} [\\nabla \\cdot (\\Phi\\mathbf{r}) - 2\\Phi] \\mathrm{d}A = - \\left( \\iint_{A} \\nabla \\cdot (\\Phi\\mathbf{r}) \\mathrm{d}A - 2\\iint_{A} \\Phi \\mathrm{d}A \\right) $$\n根据散度定理（或平面上的格林定理），第一个积分可以转换成边界积分：\n$$ \\iint_{A} \\nabla \\cdot (\\Phi\\mathbf{r}) \\mathrm{d}A = \\oint_{\\partial A} (\\Phi\\mathbf{r}) \\cdot \\mathbf{n} \\mathrm{d}l $$\n其中 $\\partial A$ 是三角形域 $A$ 的边界。由于在边界 $\\partial A$ 上的每一点 $\\Phi = 0$，线积分为零。\n$$ \\oint_{\\partial A} (\\Phi\\mathbf{r}) \\cdot \\mathbf{n} \\mathrm{d}l = \\oint_{\\partial A} (0 \\cdot \\mathbf{r}) \\cdot \\mathbf{n} \\mathrm{d}l = 0 $$\n扭矩表达式简化为：\n$$ T = - \\left( 0 - 2\\iint_{A} \\Phi \\mathrm{d}A \\right) = 2 \\iint_{A} \\Phi \\mathrm{d}A $$\n根据定义，扭转常数 $J$ 通过 $T = G J \\theta$ 将扭矩和扭转角联系起来。将其与我们推导出的表达式进行比较，我们发现：\n$$ G J \\theta = 2 \\iint_{A} \\Phi \\mathrm{d}A \\implies J = \\frac{2}{G\\theta}\\iint_{A} \\Phi \\mathrm{d}A $$\n\n第3部分：扭转常数 $J$ 的计算\n\n现在我们使用推导出的 $\\Phi(x,y)$ 表达式来计算 $J$ 的积分：\n$$ J = \\frac{2}{G\\theta}\\iint_{A} \\frac{G\\theta}{\\sqrt{3}s}(y^3 - 3x^2y - \\sqrt{3}sy^2 + 3sxy) \\mathrm{d}A $$\n$$ J = \\frac{2}{\\sqrt{3}s} \\iint_{A} (y^3 - 3x^2y - \\sqrt{3}sy^2 + 3sxy) \\mathrm{d}A $$\n积分区域是由 $0 \\le y \\le \\frac{\\sqrt{3}}{2}s$ 和 $\\frac{y}{\\sqrt{3}} \\le x \\le s - \\frac{y}{\\sqrt{3}}$ 定义的三角形。\n$$ \\iint_A \\dots \\mathrm{d}A = \\int_{0}^{\\frac{\\sqrt{3}}{2}s} \\int_{y/\\sqrt{3}}^{s-y/\\sqrt{3}} (y^3 - \\sqrt{3}sy^2 - 3x^2y + 3sxy) \\mathrm{d}x \\mathrm{d}y $$\n首先，我们计算关于 $x$ 的内层积分：\n$$ I_x = \\int_{y/\\sqrt{3}}^{s-y/\\sqrt{3}} (y^3 - \\sqrt{3}sy^2 - 3x^2y + 3sxy) \\mathrm{d}x = \\left[ (y^3 - \\sqrt{3}sy^2)x - yx^3 + \\frac{3s}{2}yx^2 \\right]_{x=y/\\sqrt{3}}^{x=s-y/\\sqrt{3}} $$\n令 $x_R = s - y/\\sqrt{3}$ 和 $x_L = y/\\sqrt{3}$。则 $x_R - x_L = s - 2y/\\sqrt{3}$，$x_R^2 - x_L^2 = s(s - 2y/\\sqrt{3})$，以及 $x_R^3 - x_L^3 = s^3 - \\sqrt{3}s^2y + sy^2 - \\frac{2y^3}{3\\sqrt{3}}$。代入这些可得：\n$$ I_x = (y^3 - \\sqrt{3}sy^2)(s - \\frac{2y}{\\sqrt{3}}) - y(s^3 - \\sqrt{3}s^2y + sy^2 - \\frac{2y^3}{3\\sqrt{3}}) + \\frac{3s}{2}y \\cdot s(s - \\frac{2y}{\\sqrt{3}}) $$\n展开并按 $y$ 的幂次合并同类项：\n$$ I_x = \\left( sy^3 - \\frac{2}{\\sqrt{3}}y^4 - \\sqrt{3}s^2y^2 + 2sy^3 \\right) - \\left( s^3y - \\sqrt{3}s^2y^2 + sy^3 - \\frac{2y^4}{3\\sqrt{3}} \\right) + \\left( \\frac{3s^3y}{2} - \\sqrt{3}s^2y^2 \\right) $$\n$$ I_x = \\left(3s - s\\right)y^3 + \\left(-\\frac{2}{\\sqrt{3}} + \\frac{2}{3\\sqrt{3}}\\right)y^4 + \\left(-\\sqrt{3}s^2 + \\sqrt{3}s^2 - \\sqrt{3}s^2\\right)y^2 + \\left(-s^3 + \\frac{3s^3}{2}\\right)y $$\n$$ I_x = 2sy^3 - \\frac{4}{3\\sqrt{3}}y^4 - \\sqrt{3}s^2y^2 + \\frac{s^3}{2}y $$\n现在，我们进行关于 $y$ 的外层积分：\n$$ \\int_{0}^{\\frac{\\sqrt{3}}{2}s} I_x \\mathrm{d}y = \\int_{0}^{\\frac{\\sqrt{3}}{2}s} \\left( 2sy^3 - \\frac{4}{3\\sqrt{3}}y^4 - \\sqrt{3}s^2y^2 + \\frac{s^3}{2}y \\right) \\mathrm{d}y $$\n$$ = \\left[ \\frac{2s}{4}y^4 - \\frac{4}{3\\sqrt{3} \\cdot 5}y^5 - \\frac{\\sqrt{3}s^2}{3}y^3 + \\frac{s^3}{4}y^2 \\right]_{0}^{\\frac{\\sqrt{3}}{2}s} $$\n$$ = \\frac{s}{2}\\left(\\frac{9s^4}{16}\\right) - \\frac{4}{15\\sqrt{3}}\\left(\\frac{9\\sqrt{3}s^5}{32}\\right) - \\frac{\\sqrt{3}s^2}{3}\\left(\\frac{3\\sqrt{3}s^3}{8}\\right) + \\frac{s^3}{4}\\left(\\frac{3s^2}{4}\\right) $$\n$$ = \\frac{9s^5}{32} - \\frac{36s^5}{480} - \\frac{9s^5}{24} + \\frac{3s^5}{16} = \\frac{9s^5}{32} - \\frac{3s^5}{40} - \\frac{3s^5}{8} + \\frac{3s^5}{16} $$\n公分母是 $160$：\n$$ = \\left(\\frac{45 - 12 - 60 + 30}{160}\\right)s^5 = \\frac{3}{160}s^5 $$\n这是积分 $\\iint_A (y^3 - 3x^2y - \\sqrt{3}sy^2 + 3sxy) \\mathrm{d}A$ 的值。\n最后，我们将其代回 $J$ 的表达式中：\n$$ J = \\frac{2}{\\sqrt{3}s} \\left(\\frac{3}{160}s^5\\right) = \\frac{6s^4}{160\\sqrt{3}} = \\frac{3s^4}{80\\sqrt{3}} $$\n将分母有理化：\n$$ J = \\frac{3s^4 \\cdot \\sqrt{3}}{80\\sqrt{3} \\cdot \\sqrt{3}} = \\frac{3\\sqrt{3}s^4}{80 \\cdot 3} = \\frac{\\sqrt{3}}{80}s^4 $$\n这就是等边三角形截面的扭转常数。", "answer": "$$\\boxed{\\frac{\\sqrt{3}}{80}s^4}$$", "id": "2710727"}, {"introduction": "掌握了求解特定翘曲截面的方法后，一个自然而然的问题是：不同形状的截面在抗扭性能上有何差异？本练习通过比较等面积的圆形和方形截面的扭转刚度$J$，来深入探讨这一问题。通过这个对比，你不仅能练习计算不同截面的$J$值，更重要的是能从物理上理解为何圆形截面具有最高的扭转效率，以及截面翘曲如何影响结构的整体刚度。", "problem": "一根均匀、各向同性、线性弹性的棱柱杆承受圣维南扭转，单位长度扭转角为 $\\,\\theta'\\,$, 其侧面无面力。设其横截面为 (i) 半径为 $\\,R\\,$ 的圆形或 (ii) 边长为 $\\,s\\,$ 的正方形。用 $\\,J\\,$ 表示圣维南扭转常数，其定义为 $\\,T = G\\,J\\,\\theta'\\,$, 其中 $\\,T\\,$ 是施加的扭矩，$\\,G\\,$ 是剪切模量。\n\n任务：\n- 使用圣维南扭转的普朗特应力函数公式，从基本原理出发推导圆形横截面的 $\\,J\\,$。\n- 对于正方形横截面，通过精确求解圣维南边值问题（使用傅里叶级数）或使用满足无面力边界条件的容许普朗特应力函数的变分近似，求得关系式 $\\,J_{\\text{square}} = c\\,s^{4}\\,$ 中无量纲常数 $\\,c\\,$ 的一个可靠值。请清楚说明您选择了哪种方法，并阐述得到 $\\,c\\,$ 的步骤的理由。\n- 施加等面积约束 $\\,\\pi R^{2} = s^{2}\\,$，并计算比值 $\\,J_{\\text{circle}}/J_{\\text{square}}\\,$。\n- 基于控制方程或能量/变分陈述，简要物理解释为何在所有给定面积的单连通形状中，圆形使 $\\,J\\,$ 最大化。\n\n将最终比值 $\\,J_{\\text{circle}}/J_{\\text{square}}\\,$ 表示为一个无量纲数，四舍五入到四位有效数字。", "solution": "所给问题是弹性力学理论中的一个标准练习，具体涉及棱柱杆的圣维南扭转。该问题具有科学依据、提法适定，并提供了所有必要条件。因此，该问题是有效的，我将继续给出完整解答。\n\n分析基于普朗特应力函数 $\\phi(x,y)$，该函数定义在杆的横截面域 $\\Omega$ 上。对于无面力的侧面，此函数必须在域内满足泊松方程，并在边界上为常数。对于单连通域，此常数可设为零。\n\n控制方程如下：\n1.  应力函数 $\\phi$ 的泊松方程：\n    $$ \\nabla^{2}\\phi = \\frac{\\partial^{2}\\phi}{\\partial x^{2}} + \\frac{\\partial^{2}\\phi}{\\partial y^{2}} = -2G\\theta' \\quad \\text{in } \\Omega $$\n2.  周界 $\\partial\\Omega$ 上的边界条件：\n    $$ \\phi = 0 \\quad \\text{on } \\partial\\Omega $$\n3.  产生的扭矩 $T$ 通过以下关系式与应力函数相关联：\n    $$ T = 2 \\iint_{\\Omega} \\phi \\, dA $$\n4.  抗扭刚度，或称扭转常数，$J$，由关系式 $T = G J \\theta'$ 定义。结合这些可得用 $\\phi$ 表示的 $J$ 的表达式：\n    $$ J = \\frac{2}{G\\theta'} \\iint_{\\Omega} \\phi \\, dA $$\n\n我现在将按顺序处理每个任务。\n\n**任务1：推导圆形横截面的 $J$**\n\n对于半径为 $R$ 的圆形横截面，域 $\\Omega$ 由 $x^{2} + y^{2} \\le R^{2}$ 定义。由于问题的轴对称性，使用极坐标 $(r, \\vartheta)$ 最为方便，其中 $r^{2} = x^{2} + y^{2}$。极坐标下的拉普拉斯算子为 $\\nabla^{2} = \\frac{\\partial^{2}}{\\partial r^{2}} + \\frac{1}{r}\\frac{\\partial}{\\partial r} + \\frac{1}{r^{2}}\\frac{\\partial^{2}}{\\partial \\vartheta^{2}}$。假设解是轴对称的，$\\phi$ 仅为 $r$ 的函数，即 $\\phi = \\phi(r)$，因此包含 $\\frac{\\partial^{2}}{\\partial \\vartheta^{2}}$ 的项为零。\n\n控制方程简化为一个常微分方程：\n$$ \\frac{1}{r}\\frac{d}{dr}\\left(r\\frac{d\\phi}{dr}\\right) = -2G\\theta' $$\n对 $r$ 积分得到：\n$$ r\\frac{d\\phi}{dr} = -G\\theta'r^{2} + C_{1} $$\n两边同除以 $r$ 并再次积分：\n$$ \\frac{d\\phi}{dr} = -G\\theta'r + \\frac{C_{1}}{r} $$\n$$ \\phi(r) = -\\frac{1}{2}G\\theta'r^{2} + C_{1}\\ln(r) + C_{2} $$\n为确定积分常数，我们应用物理条件和边界条件。首先，应力以及应力函数 $\\phi$ 在实心轴的中心（$r=0$）必须保持有限。对数项 $\\ln(r)$ 在 $r=0$ 处是奇异的，因此其系数必须为零。故 $C_{1}=0$。\n边界条件是在周界上 $\\phi=0$，即 $\\phi(R)=0$。\n$$ \\phi(R) = -\\frac{1}{2}G\\theta'R^{2} + C_{2} = 0 \\implies C_{2} = \\frac{1}{2}G\\theta'R^{2} $$\n因此，圆形横截面的应力函数为：\n$$ \\phi(r) = \\frac{1}{2}G\\theta'(R^{2} - r^{2}) $$\n现在，我们使用其定义计算抗扭刚度 $J_{\\text{circle}}$。极坐标中的面积元为 $dA = r\\,dr\\,d\\vartheta$。\n$$ J_{\\text{circle}} = \\frac{2}{G\\theta'} \\int_{0}^{2\\pi}\\int_{0}^{R} \\frac{1}{2}G\\theta'(R^{2} - r^{2}) \\, r \\, dr \\, d\\vartheta $$\n$G\\theta'$ 项相互抵消，对 $\\vartheta$ 的积分得到一个因子 $2\\pi$。\n$$ J_{\\text{circle}} = 2 \\pi \\int_{0}^{R} (R^{2}r - r^{3}) \\, dr = 2\\pi \\left[ \\frac{R^{2}r^{2}}{2} - \\frac{r^{4}}{4} \\right]_{0}^{R} $$\n$$ J_{\\text{circle}} = 2\\pi \\left( \\frac{R^{4}}{2} - \\frac{R^{4}}{4} \\right) = 2\\pi \\left( \\frac{R^{4}}{4} \\right) = \\frac{\\pi R^{4}}{2} $$\n这就是众所周知的圆形面积的极惯性矩。\n\n**任务2：正方形横截面的扭转常数**\n\n对于边长为 $s$ 的正方形横截面，无法找到 $\\phi$ 的精确闭式解。问题要求得到关系式 $J_{\\text{square}} = c s^{4}$ 中常数 $c$ 的一个可靠值。该值是通过使用应力函数 $\\phi$ 的傅里叶级数表示来精确求解圣维南边值问题得到的。随后对 $\\phi$ 在正方形域上积分，即可得到扭矩，从而得到 $J$。推导过程冗长，因此我将明确说明我正在使用这种精确方法得出的既定结果。\n\n对于边长为 $s$ 的正方形，其扭转常数为：\n$$ J_{\\text{square}} = \\left( \\frac{1}{3} - \\frac{64}{\\pi^{5}}\\sum_{n=1,3,5,\\dots}^{\\infty} \\frac{1}{n^{5}}\\tanh\\left(\\frac{n\\pi}{2}\\right) \\right) s^{4} $$\n无量纲常数 $c$ 是括号内的表达式。我们可以计算其数值。该级数收敛得非常快。\n$$ c = \\frac{1}{3} - \\frac{64}{\\pi^{5}}\\left( \\frac{\\tanh(\\pi/2)}{1^{5}} + \\frac{\\tanh(3\\pi/2)}{3^{5}} + \\frac{\\tanh(5\\pi/2)}{5^{5}} + \\dots \\right) $$\n使用数值：$\\pi \\approx 3.14159$，$\\pi^{5} \\approx 306.02$。\n$\\tanh(\\pi/2) \\approx \\tanh(1.5708) \\approx 0.91715$。\n$\\tanh(3\\pi/2) \\approx \\tanh(4.7124) \\approx 0.99991$。\n级数的首项占绝对主导地位。\n$$ c \\approx \\frac{1}{3} - \\frac{64}{306.02} \\left( 0.91715 + \\frac{0.99991}{243} + \\dots \\right) \\approx 0.33333 - 0.20914 \\left( 0.91715 + 0.00411 \\right) $$\n$$ c \\approx 0.33333 - 0.20914 \\times 0.92126 \\approx 0.33333 - 0.19266 \\approx 0.14067 $$\n该常数的公认可靠值为 $c \\approx 0.1406$。因此，我们有 $J_{\\text{square}} = 0.1406\\,s^{4}$。\n\n**任务3：扭转常数之比**\n\n给定等面积约束：\n$$ \\text{Area}_{\\text{circle}} = \\text{Area}_{\\text{square}} \\implies \\pi R^{2} = s^{2} $$\n根据此约束，我们可以用 $s^{4}$ 表示 $R^{4}$：\n$$ R^{2} = \\frac{s^{2}}{\\pi} \\implies R^{4} = \\frac{s^{4}}{\\pi^{2}} $$\n现在，我们将其代入 $J_{\\text{circle}}$ 的表达式中：\n$$ J_{\\text{circle}} = \\frac{\\pi R^{4}}{2} = \\frac{\\pi}{2} \\left( \\frac{s^{4}}{\\pi^{2}} \\right) = \\frac{s^{4}}{2\\pi} $$\n我们现在可以计算比值 $J_{\\text{circle}} / J_{\\text{square}}$：\n$$ \\frac{J_{\\text{circle}}}{J_{\\text{square}}} = \\frac{s^{4}/(2\\pi)}{c s^{4}} = \\frac{1}{2\\pi c} $$\n代入数值 $c \\approx 0.1406$：\n$$ \\frac{J_{\\text{circle}}}{J_{\\text{square}}} \\approx \\frac{1}{2\\pi(0.1406)} \\approx \\frac{1}{0.8834} \\approx 1.13190 $$\n四舍五入到四位有效数字，比值为 $1.132$。\n\n**任务4：圆形截面最优性的物理解释**\n\n由乔治·波利亚（George Pólya）证明的圣维南猜想指出，在所有给定面积的单连通横截面形状中，圆形具有最大的抗扭刚度 $J$。可以通过考虑应力分布及其对刚度的贡献来构建一个物理解释。\n\n扭转中的剪应力由普朗特应力函数的梯度给出：$\\tau_{xz} = \\frac{\\partial\\phi}{\\partial y}$ 和 $\\tau_{yz} = -\\frac{\\partial\\phi}{\\partial x}$。抗扭能力源于这些应力。为了使横截面能有效地抵抗扭转，材料的受力应尽可能均匀。\n\n对于圆形横截面，剪应力矢量的大小 $|\\boldsymbol{\\tau}| = \\sqrt{\\tau_{xz}^{2} + \\tau_{yz}^{2}} = |\\nabla\\phi|$ 在任意给定半径 $r$ 处是恒定的，并达到其最大值 $|\\boldsymbol{\\tau}|_{\\text{max}} = G\\theta'R$，该值沿整个边界是恒定的。这表明应力分布非常高效。\n\n相比之下，对于像正方形这样的非圆形形状，应力分布是不均匀的。剪应力必须与边界相切。在正方形的角点处，此条件迫使应力为零（$|\\nabla\\phi|=0$）。最大应力出现在边的中点。这意味着角点附近的材料未被充分利用，对整体扭矩承载能力的贡献很小，而边中点的材料则承受高应力。这些应力不足的区域代表了在抵抗扭转方面对横截面积的低效利用。\n\n从能量的角度来看，对于给定面积，最大化抗扭刚度 $J$ 等效于在给定施加扭矩 $T$ 的情况下，最小化总弹性应变能。圆形截面通过更均匀地分布应力，并避免像正方形角点那样的应力集中和应力不足区域，从而在所有相同面积的形状中，为给定的扭矩达到了最低的可能应变能状态。对于相同的外部载荷，较低的能量状态意味着结构更刚硬，因此 $J$ 最大。圆的这种最优性是其几何特性的体现，即在给定周长下包围最大面积。在扭转的薄膜比拟中，这使得偏转薄膜下的体积最大，而该体积是一个与 $J$ 成正比的量。", "answer": "$$\n\\boxed{1.132}\n$$", "id": "2710728"}, {"introduction": "虽然解析方法对于理解基本原理至关重要，但它们仅适用于少数简单几何形状。对于任意形状的复杂截面，我们需要更强大的数值工具。本练习将指导你应用有限元方法（FEM）来解决圣维南扭转问题，这是一个在现代工程分析中不可或缺的技能。你将从推导控制方程的弱形式开始，到最终编写代码计算任意多边形截面的扭转常数$J$，完整地体验从理论到计算实践的全过程。", "problem": "考虑一根长度远大于其横截面尺寸的单连通等截面直杆的圣维南扭转问题，其通用多边形横截面由有界域 $\\Omega \\subset \\mathbb{R}^2$ 表示，边界 $\\partial \\Omega$ 上的单位外法向量为 $\\boldsymbol{n} = (n_x,n_y)$。设单位长度扭转角为 $\\kappa = d\\theta/dz$，剪切模量为 $G$。引入翘曲函数 $\\Phi(x,y)$，使得沿杆的局部轴向位移为 $u_z(x,y,z) = \\kappa \\, \\Phi(x,y)$。剪切应变为\n$\\gamma_{xz} = \\kappa \\left(\\partial \\Phi/\\partial x - y \\right)$ 和 $\\gamma_{yz} = \\kappa \\left(\\partial \\Phi/\\partial y + x \\right)$，根据胡克定律的线性弹性关系，剪切应力为 $\\tau_{xz} = G \\, \\gamma_{xz}$ 和 $\\tau_{yz} = G \\, \\gamma_{yz}$。在没有体力的情况下，平衡方程要求在 $\\Omega$ 内 $\\partial \\tau_{xz}/\\partial x + \\partial \\tau_{yz}/\\partial y = 0$。侧表面无面力，因此在 $\\partial \\Omega$ 上 $\\tau_{xz} n_x + \\tau_{yz} n_y = 0$。\n\n从这些基本运动学、本构关系和平衡方程出发，完成以下任务：\n\n1) 推导翘曲函数 $\\Phi(x,y)$ 在 $\\Omega$ 内的边值问题的强形式，证明其在区域内部满足齐次拉普拉斯方程，并在边界 $\\partial \\Omega$ 上满足诺伊曼型边界条件。明确写出用 $x$、$y$、$n_x$ 和 $n_y$ 表示的自然边界数据。\n\n2) 推导弱形式：求 $\\Phi \\in H^{1}(\\Omega)$（在相差一个加性常数下唯一），使得涉及 $\\nabla \\Phi$ 和检验函数梯度的双线性形式，等于一个涉及自然边界数据和检验函数的边界积分。清晰说明为消除零空间而采用的归一化条件。\n\n3) 使用有限元法（FEM）对弱形式进行离散化，在 $\\Omega$ 的一个协调三角剖分 $\\mathcal{T}_h$ 上使用连续分片线性形函数。对于顶点为 $(x_1,y_1)$、$(x_2,y_2)$、$(x_3,y_3)$ 的单个三角形单元 $e$，定义标准的线性形函数 $N_i(x,y)$（$i \\in \\{1,2,3\\}$）及其梯度 $\\nabla N_i$（在 $e$ 上为常数）。明确写出单元刚度矩阵 $K^{(e)} \\in \\mathbb{R}^{3 \\times 3}$ 和由位于 $\\partial \\Omega$ 上的单元 $e$ 的一条边界边产生的一致诺伊曼载荷向量贡献 $f^{(e,\\partial)} \\in \\mathbb{R}^{3}$。\n\n您的单元公式必须以闭合形式给出，作为三角形顶点坐标的函数；对于一个端点为 $i$ 和 $j$ 的边界边，则作为边长、单位外法向量和端点坐标的函数。对面积为 $A_e$ 的三角形单元 $e$ 使用以下定义和常规常数\n$$\nb_1 = y_2 - y_3,\\quad b_2 = y_3 - y_1,\\quad b_3 = y_1 - y_2, \\qquad\nc_1 = x_3 - x_2,\\quad c_2 = x_1 - x_3,\\quad c_3 = x_2 - x_1,\n$$\n以及 $A_e = \\tfrac{1}{2} \\left| (x_2-x_1)(y_3-y_1) - (x_3-x_1)(y_2-y_1) \\right|$。\n\n4) 实现一个程序，该程序：\n- 使用第 3 部分推导的显式单元公式，组装 $\\Phi$ 的全局刚度矩阵和载荷向量。\n- 通过将一个节点的 $\\Phi$ 值固定为零（单点狄利克雷约束）来确保唯一性。\n- 求解 $\\Phi$ 的节点值。\n- 使用以下恒等式（针对单位长度扭转角和单位剪切模量）计算扭转常数 $J$\n$$\nJ \\;=\\; \\int_{\\Omega} \\left[ \\left(\\frac{\\partial \\Phi}{\\partial x} - y \\right)^{2} + \\left(\\frac{\\partial \\Phi}{\\partial y} + x \\right)^{2} \\right] \\, dA,\n$$\n其中梯度 $\\partial \\Phi/\\partial x$ 和 $\\partial \\Phi/\\partial y$ 在每个线性三角形上是常数。对于单元上的数值积分，您必须在三角形上使用2次精确积分法则。\n\n对于数值计算，设置单位长度扭转角 $\\kappa = 1$ (弧度/米)，剪切模量 $G = 1$ (帕斯卡)。报告 $J$ 的单位为四次方米 $\\text{m}^4$。\n\n测试套件 (所有长度单位为米，角度单位为弧度):\n- 情况 A (正常情况): 正方形 $\\Omega = [0,1] \\times [0,1]$，用一个结构化网格离散化，该网格包含 $2 \\times 2$ 个矩形，每个矩形沿其左下角到右上角的对角线分割成两个三角形。\n- 情况 B (边界情况，最小网格): 顶点为 $(0,0)$, $(1,0)$, $(0,1)$ 的直角三角形，离散化为单个线性三角形。\n- 情况 C (纵横比压力测试): 薄矩形 $\\Omega = [0,2] \\times [0,0.5]$，用一个结构化网格离散化，该网格包含 $4 \\times 1$ 个矩形，每个矩形沿其左下角到右上角的对角线分割成两个三角形。\n\n角度单位：弧度。$J$ 的物理单位：$\\text{m}^4$。将输出表示为单位为 $\\text{m}^4$ 的实数。\n\n您的程序应生成单行输出，其中包含一个用方括号括起来的逗号分隔列表（例如，\"[resultA,resultB,resultC]\"），其中每个条目是按 A、B、C 顺序计算出的 $J$ 值，单位为 $\\text{m}^4$。", "solution": "我们从圣维南扭转问题的基本运动学和平衡定律出发，基于线性弹性、小应变和侧表面无面力的假设。令 $\\kappa = d\\theta/dz$ 表示单位长度扭转角。翘曲函数 $\\Phi(x,y)$ 通过轴向位移 $u_z(x,y,z) = \\kappa \\, \\Phi(x,y)$ 定义（注意：原问题定义为 $u_z = \\kappa \\Phi z$，这不影响后续的翘曲函数方程）。剪切应变为\n$$\n\\gamma_{xz} = \\kappa\\Big(\\frac{\\partial \\Phi}{\\partial x} - y \\Big), \\qquad\n\\gamma_{yz} = \\kappa\\Big(\\frac{\\partial \\Phi}{\\partial y} + x \\Big).\n$$\n根据胡克定律，剪切应力为\n$$\n\\tau_{xz} = G \\, \\gamma_{xz} = G \\kappa \\Big(\\frac{\\partial \\Phi}{\\partial x} - y \\Big), \\qquad\n\\tau_{yz} = G \\, \\gamma_{yz} = G \\kappa \\Big(\\frac{\\partial \\Phi}{\\partial y} + x \\Big).\n$$\n在没有体力的情况下的静力平衡方程为\n$$\n\\frac{\\partial \\tau_{xz}}{\\partial x} + \\frac{\\partial \\tau_{yz}}{\\partial y} = 0 \\quad \\text{在 } \\Omega \\text{ 内}.\n$$\n代入剪切应力表达式可得\n$$\nG \\kappa \\left( \\frac{\\partial^2 \\Phi}{\\partial x^2} + \\frac{\\partial^2 \\Phi}{\\partial y^2} \\right) = 0 \\quad \\Rightarrow \\quad \\nabla^2 \\Phi = 0 \\quad \\text{在 } \\Omega \\text{ 内},\n$$\n因此翘曲函数满足齐次拉普拉斯方程。侧表面上的无面力条件为\n$$\n\\tau_{xz} n_x + \\tau_{yz} n_y = 0 \\quad \\text{在 } \\partial \\Omega \\text{ 上},\n$$\n代入后可得\n$$\nG \\kappa \\left[ \\Big(\\frac{\\partial \\Phi}{\\partial x} - y \\Big) n_x + \\Big(\\frac{\\partial \\Phi}{\\partial y} + x \\Big) n_y \\right] = 0.\n$$\n对于非零的 $G$ 和 $\\kappa$，这简化为诺伊曼边界条件\n$$\n\\frac{\\partial \\Phi}{\\partial n} \\equiv \\nabla \\Phi \\cdot \\boldsymbol{n} = y \\, n_x - x \\, n_y \\quad \\text{在 } \\partial \\Omega \\text{ 上}.\n$$\n因为具有纯诺伊曼数据的拉普拉斯算子确定 $\\Phi$ 时会相差一个加性常数，我们通过归一化来确定唯一性；例如，\n$$\n\\int_{\\Omega} \\Phi \\, dA = 0,\n$$\n或者在数值上，通过将一个节点值设为零。\n\n弱形式。将 $\\nabla^2 \\Phi = 0$ 乘以任意检验函数 $v \\in H^1(\\Omega)$ 并在 $\\Omega$ 上积分：\n$$\n\\int_{\\Omega} (\\nabla^2 \\Phi) \\, v \\, dA = 0.\n$$\n应用格林第一恒等式，\n$$\n- \\int_{\\Omega} \\nabla \\Phi \\cdot \\nabla v \\, dA + \\int_{\\partial \\Omega} \\frac{\\partial \\Phi}{\\partial n} \\, v \\, ds = 0.\n$$\n使用自然边界数据 $\\partial \\Phi/\\partial n = y n_x - x n_y$，弱形式为：\n求 $\\Phi \\in H^1(\\Omega)$（在相差一个加性常数下唯一），使得\n$$\n\\int_{\\Omega} \\nabla \\Phi \\cdot \\nabla v \\, dA = \\int_{\\partial \\Omega} (y n_x - x n_y) \\, v \\, ds \\qquad \\forall v \\in H^1(\\Omega),\n$$\n并使用归一化条件来固定零空间。\n\n使用线性三角形的有限元法（FEM）离散化。令 $\\mathcal{T}_h$ 为 $\\Omega$ 的一个协调三角剖分。在一个顶点为 $(x_1,y_1)$、$(x_2,y_2)$、$(x_3,y_3)$ 且面积为 $A_e$ 的单元 $e$ 上，线性形函数为\n$$\nN_i(x,y) = \\frac{a_i + b_i x + c_i y}{2 A_e}, \\quad i \\in \\{1,2,3\\},\n$$\n其中常数为\n$$\nb_1 = y_2 - y_3,\\quad b_2 = y_3 - y_1,\\quad b_3 = y_1 - y_2, \\qquad\nc_1 = x_3 - x_2,\\quad c_2 = x_1 - x_3,\\quad c_3 = x_2 - x_1,\n$$\n梯度为\n$$\n\\nabla N_i = \\frac{1}{2 A_e}\\begin{bmatrix} b_i \\\\ c_i \\end{bmatrix},\n$$\n在单元 $e$ 上为常数。单元刚度矩阵 $K^{(e)} \\in \\mathbb{R}^{3 \\times 3}$ 的各项为\n$$\nK^{(e)}_{ij} = \\int_{e} \\nabla N_i \\cdot \\nabla N_j \\, dA = \\frac{b_i b_j + c_i c_j}{4 A_e^2} \\int_e dA = \\frac{b_i b_j + c_i c_j}{4 A_e}, \\quad i,j \\in \\{1,2,3\\}.\n$$\n边界边上的诺伊曼载荷向量。假设一个端点为 $i$ 和 $j$ 的单元边位于 $\\partial \\Omega$ 上。设边长为 $L_{ij}$，单位外法向量为 $\\boldsymbol{n} = (n_x,n_y)$（沿直边为常数）。用 $t \\in [0,1]$ 参数化该边，位置为 $\\boldsymbol{x}(t) = \\boldsymbol{x}_i + t (\\boldsymbol{x}_j - \\boldsymbol{x}_i)$，其中 $\\boldsymbol{x}_i = (x_i,y_i)$ 且 $\\Delta \\boldsymbol{x} = \\boldsymbol{x}_j - \\boldsymbol{x}_i = (\\Delta x, \\Delta y)$。限制在该边上的形函数为 $N_i(t) = 1-t$ 和 $N_j(t) = t$。自然边界数据为 $g(t) = y(t) n_x - x(t) n_y$。一致边载荷贡献为\n$$\nf_i^{(e,\\partial)} = \\int_{\\text{edge }ij} N_i \\, g \\, ds = L_{ij} \\int_0^1 (1-t)\\, [A + t B] \\, dt\n= L_{ij} \\left( \\frac{A}{2} + \\frac{B}{6} \\right),\n$$\n$$\nf_j^{(e,\\partial)} = \\int_{\\text{edge }ij} N_j \\, g \\, ds = L_{ij} \\int_0^1 t\\, [A + t B] \\, dt\n= L_{ij} \\left( \\frac{A}{2} + \\frac{B}{3} \\right),\n$$\n其中\n$$\nA = y_i n_x - x_i n_y, \\qquad B = \\Delta y \\, n_x - \\Delta x \\, n_y, \\qquad L_{ij} = \\sqrt{(\\Delta x)^2 + (\\Delta y)^2}.\n$$\n弱形式中没有体积源项，因此内部单元的载荷向量为零。\n\n全局系统和约束。对所有单元进行组装，得到一个对称半正定矩阵 $K$ 和载荷向量 $f$。为消除常数零空间，我们施加一个狄利克雷约束，例如 $\\Phi(\\text{node }1) = 0$，通过修改 $K$ 的相应行和列以及右端项 $f$ 来实现。\n\n扭转常数的后处理。在单位长度扭转角 $\\kappa = 1$ 和单位剪切模量 $G=1$ 的情况下，扭转常数 $J$ 可以从翘曲解中计算得到：\n$$\nJ \\;=\\; \\int_{\\Omega} \\left[ \\left(\\frac{\\partial \\Phi}{\\partial x} - y \\right)^{2} + \\left(\\frac{\\partial \\Phi}{\\partial y} + x \\right)^{2} \\right] \\, dA.\n$$\n在线性三角形单元上，$\\nabla \\Phi$ 是常数：\n$$\n\\nabla \\Phi|_{e} = \\sum_{i=1}^{3} \\Phi_i \\, \\nabla N_i = \\frac{1}{2 A_e} \\begin{bmatrix} \\sum_{i=1}^3 \\Phi_i b_i \\\\ \\sum_{i=1}^3 \\Phi_i c_i \\end{bmatrix}.\n$$\n在单元 $e$ 上定义常数 $p_e = \\partial \\Phi/\\partial x$ 和 $q_e = \\partial \\Phi/\\partial y$。被积函数是 $x$ 和 $y$ 的二次函数，因此在三角形上使用2次精确积分法则即可。使用三点对称法则，其重心坐标点为 $(\\tfrac{2}{3},\\tfrac{1}{6},\\tfrac{1}{6})$、$(\\tfrac{1}{6},\\tfrac{2}{3},\\tfrac{1}{6})$、$(\\tfrac{1}{6},\\tfrac{1}{6},\\tfrac{2}{3})$，权重各为 $A_e/3$。在每个坐标为 $(x_q,y_q)$ 的积分点上，计算\n$$\nI(x_q,y_q) = \\left(p_e - y_q \\right)^2 + \\left(q_e + x_q \\right)^2,\n$$\n并求和 $J_e = \\sum_{q=1}^{3} \\left( \\frac{A_e}{3} \\, I(x_q,y_q) \\right)$。全局扭转常数为 $J = \\sum_{e} J_e$。\n\n算法实现摘要：\n- 为三个测试用例生成网格。\n- 对每个网格，使用 $K^{(e)}_{ij} = (b_i b_j + c_i c_j)/(4 A_e)$ 从单元刚度矩阵组装 $K$。\n- 通过对边界边贡献 $f_i^{(e,\\partial)}$ 求和来构建诺伊曼载荷向量 $f$，使用 $A$ 和 $B$ 的闭合形式表达式以及从边几何计算出的单位外法向量。\n- 在一个节点上施加 $\\Phi$ 等于零的约束以固定常数零空间，并求解 $K \\Phi = f$。\n- 通过2次精确三角形积分法则计算 $J$。\n- 报告三个情况下的 $J$ 值，单位为 $\\text{m}^4$。\n\n程序遵循要求的单位：单位长度扭转角 $\\kappa$ 为弧度每米（设为 $\\kappa = 1$），剪切模量 $G$ 为帕斯卡（设为 $G=1$），输出的 $J$ 单位为 $\\text{m}^4$。\n\n最终输出格式为单行，包含一个用方括号括起来的逗号分隔列表，即 \"[resultA,resultB,resultC]\"。", "answer": "```python\nimport numpy as np\n\ndef triangle_area(coords):\n    x1, y1 = coords[0]\n    x2, y2 = coords[1]\n    x3, y3 = coords[2]\n    return 0.5 * abs((x2 - x1)*(y3 - y1) - (x3 - x1)*(y2 - y1))\n\ndef tri_bc_constants(coords):\n    # Returns arrays b and c for a 3-node triangle with nodes in order (1,2,3)\n    x1, y1 = coords[0]\n    x2, y2 = coords[1]\n    x3, y3 = coords[2]\n    b = np.array([y2 - y3, y3 - y1, y1 - y2], dtype=float)\n    c = np.array([x3 - x2, x1 - x3, x2 - x1], dtype=float)\n    return b, c\n\ndef tri_stiffness(coords):\n    # Linear triangle element stiffness for Laplace operator\n    A = triangle_area(coords)\n    b, c = tri_bc_constants(coords)\n    Ke = (np.outer(b, b) + np.outer(c, c)) / (4.0 * A)\n    return Ke\n\ndef edge_outward_normal(p_i, p_j, centroid):\n    # Compute outward unit normal for boundary edge ij using centroid test\n    v = p_j - p_i\n    L = np.linalg.norm(v)\n    if L == 0.0:\n        return np.array([0.0, 0.0]), 0.0\n    # Candidate normal by rotating edge vector by +90 degrees (clockwise): (vy, -vx)\n    n = np.array([v[1], -v[0]]) / L\n    mid = 0.5 * (p_i + p_j)\n    # Flip to make it point outward: dot(n, mid - centroid) should be positive\n    if np.dot(n, mid - centroid)  0.0:\n        n = -n\n    return n, L\n\ndef assemble_system(nodes, elements):\n    N = len(nodes)\n    K = np.zeros((N, N), dtype=float)\n    f = np.zeros(N, dtype=float)\n\n    # Assemble stiffness\n    for elem in elements:\n        coords = nodes[np.array(elem)]\n        Ke = tri_stiffness(coords)\n        for a_local, a_global in enumerate(elem):\n            for b_local, b_global in enumerate(elem):\n                K[a_global, b_global] += Ke[a_local, b_local]\n\n    # Identify boundary edges (edges that appear only once)\n    edge_count = {}\n    edge_dir = {}\n    for elem in elements:\n        for (i_local, j_local) in [(0,1), (1,2), (2,0)]:\n            i = elem[i_local]\n            j = elem[j_local]\n            key = tuple(sorted((i, j)))\n            if key not in edge_count:\n                edge_count[key] = 0\n                edge_dir[key] = (i, j)  # store directed edge as first seen\n            edge_count[key] += 1\n\n    # Compute domain centroid (for outward normal orientation)\n    centroid = np.mean(nodes, axis=0)\n\n    # Assemble Neumann load from boundary edges\n    for key, count in edge_count.items():\n        if count == 1:\n            i, j = edge_dir[key]\n            pi = nodes[i]\n            pj = nodes[j]\n            n, L = edge_outward_normal(pi, pj, centroid)\n            nx, ny = n\n            xi, yi = pi\n            dx, dy = pj - pi\n\n            A_val = yi * nx - xi * ny\n            B_val = dy * nx - dx * ny\n\n            fi = L * (0.5 * A_val + (1.0/6.0) * B_val)\n            fj = L * (0.5 * A_val + (1.0/3.0) * B_val)\n\n            f[i] += fi\n            f[j] += fj\n\n    return K, f\n\ndef apply_dirichlet_constraint(K, f, node_index, value=0.0):\n    # Enforce Phi(node_index) = value using the penalty method conceptually\n    K_copy, f_copy = K.copy(), f.copy()\n    n = K_copy.shape[0]\n    for i in range(n):\n        if i != node_index:\n            f_copy[i] -= K_copy[i, node_index] * value\n    K_copy[node_index, :] = 0.0\n    K_copy[:, node_index] = 0.0\n    K_copy[node_index, node_index] = 1.0\n    f_copy[node_index] = value\n    return K_copy, f_copy\n\ndef solve_system(K, f):\n    return np.linalg.solve(K, f)\n\ndef tri_grad_phi(coords, phi_local):\n    # Compute constant gradient on linear triangle: grad Phi = 1/(2A) * [sum(phi_i b_i), sum(phi_i c_i)]\n    A = triangle_area(coords)\n    b, c = tri_bc_constants(coords)\n    px = np.dot(phi_local, b) / (2.0 * A)\n    py = np.dot(phi_local, c) / (2.0 * A)\n    return px, py, A\n\ndef tri_quadrature_points(coords):\n    # Degree-2 exact symmetric quadrature: 3 points, barycentric coords\n    lams = np.array([\n        [2.0/3.0, 1.0/6.0, 1.0/6.0],\n        [1.0/6.0, 2.0/3.0, 1.0/6.0],\n        [1.0/6.0, 1.0/6.0, 2.0/3.0]\n    ])\n    pts = lams @ coords\n    return pts\n\ndef compute_J(nodes, elements, phi):\n    # Unit twist kappa=1, unit shear modulus G=1\n    J = 0.0\n    for elem in elements:\n        coords = nodes[np.array(elem)]\n        phi_local = phi[np.array(elem)]\n        px, py, A = tri_grad_phi(coords, phi_local)\n        # Quadrature\n        w = A / 3.0\n        for (xq, yq) in tri_quadrature_points(coords):\n            integrand = (px - yq)**2 + (py + xq)**2\n            J += w * integrand\n    return J\n\ndef rect_mesh(width, height, nx, ny):\n    # Structured rectangular mesh, split each cell by diagonal from (i,j) to (i+1,j+1)\n    xs = np.linspace(0.0, width, nx+1)\n    ys = np.linspace(0.0, height, ny+1)\n    nodes = np.array([(x, y) for y in ys for x in xs], dtype=float)\n    def node_id(i, j):\n        return j*(nx+1) + i\n    elements = []\n    for j in range(ny):\n        for i in range(nx):\n            n00 = node_id(i, j)\n            n10 = node_id(i+1, j)\n            n01 = node_id(i, j+1)\n            n11 = node_id(i+1, j+1)\n            # Two triangles: (n00, n10, n11) and (n00, n11, n01)\n            elements.append([n00, n10, n11])\n            elements.append([n00, n11, n01])\n    return nodes, elements\n\ndef right_triangle_mesh():\n    # Single triangle with vertices (0,0), (1,0), (0,1)\n    nodes = np.array([[0.0, 0.0],\n                      [1.0, 0.0],\n                      [0.0, 1.0]], dtype=float)\n    elements = [[0, 1, 2]]\n    return nodes, elements\n\ndef run_case(nodes, elements):\n    K, f = assemble_system(nodes, elements)\n    # Fix one node to zero (e.g., node 0)\n    Kc, fc = apply_dirichlet_constraint(K, f, node_index=0, value=0.0)\n    phi = solve_system(Kc, fc)\n    J = compute_J(nodes, elements, phi)\n    return J\n\ndef solve():\n    # Test cases:\n    # Case A: Unit square [0,1]x[0,1], 2x2 grid\n    nodes_A, elems_A = rect_mesh(1.0, 1.0, nx=2, ny=2)\n    JA = run_case(nodes_A, elems_A)\n\n    # Case B: Right triangle single element\n    nodes_B, elems_B = right_triangle_mesh()\n    JB = run_case(nodes_B, elems_B)\n\n    # Case C: Thin rectangle [0,2]x[0,0.5], 4x1 grid\n    nodes_C, elems_C = rect_mesh(2.0, 0.5, nx=4, ny=1)\n    JC = run_case(nodes_C, elems_C)\n\n    results = [JA, JB, JC]\n    print(f\"[{','.join(map(str, results))}]\")\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "2710723"}]}