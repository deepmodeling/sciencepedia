{"hands_on_practices": [{"introduction": "这是应用薄膜比拟的典型问题。其目标是从第一性原理出发，推导椭圆截面的著名扭转常数。这项练习的价值极高，因为它将引导你走过完整的解析过程：为Prandtl应力函数 $\\phi$ 建立控制泊松方程，假设一个符合几何特征的合适多项式形式，并求解未知系数。通过成功完成此推导，你将对抽象的数学框架如何转化为具体的工程结果获得扎实的理解。", "problem": "一根由均匀、各向同性材料制成的直棱杆，其剪切模量为 $G$，具有椭圆形截面，该截面由 $x^2/a^2 + y^2/b^2 \\le 1$ 定义，其中 $a$ 和 $b$ 是半轴，且 $a, b > 0$。该杆绕其纵轴承受单位长度的均布扭转角 $\\theta$。使用Saint-Venant扭转的Prandtl薄膜比拟，截面上的标量Prandtl应力函数 $\\phi(x,y)$ 满足一个带有椭圆边界上的狄利克雷边界条件的泊松方程，并且杆传递的扭矩 $T$ 可以写为 $\\phi(x,y)$ 的一个面积分。\n\n从这些基本论述出发，且不引用任何现成的扭转公式，完成以下任务：\n\n1) 推导 $\\phi(x,y)$ 的控制偏微分方程和边界条件，并论证一个与椭圆对称性及 $\\phi$ 的拉普拉斯算子在域内为常数的要求相符的最低次多项式拟设的合理性。\n\n2) 通过施行控制方程和边界条件，确定您拟设中的唯一系数，从而得到椭圆上 $\\phi(x,y)$ 的显式表达式。解释一个将椭圆映射到单位圆盘的恰当的平面内坐标线性缩放如何使解在缩放坐标下呈现径向对称。\n\n3) 仅使用由薄膜比拟得出的关系式，将扭矩 $T$ 表示为 $\\phi(x,y)$ 的函数，并通过对椭圆截面的直接积分来计算其值。从定义了扭转常数 $J$ 的本构关系 $T = G J \\theta$ 中，推导出 $J$。\n\n用 $a$ 和 $b$ 以闭合形式表示最终的扭转常数 $J$。无需进行数值计算，也无需四舍五入。您的最终答案应为一个单一的解析表达式。", "solution": "所述问题是有效的。这是一个来自固体力学领域，特别是弹性力学理论的适定的、有科学依据的问题。它要求从基本原理出发，使用既定的Prandtl薄膜比拟推导椭圆截面的扭转常数。其前提在物理上和数学上都是合理的，并且所有必要信息都已提供。我们将开始求解。\n\n直棱杆的Saint-Venant扭转分析由Prandtl应力函数 $\\phi(x,y)$ 控制，该函数必须在截面域 $A$ 上满足一个特定的泊松方程，并在其边界 $\\partial A$ 上取常数值。\n\n1) Prandtl应力函数 $\\phi(x,y)$ 的控制偏微分方程源于弹性力学的平衡方程和协调方程。对于剪切模量为 $G$、承受均布扭转角变化率 $\\theta$ 的均匀各向同性材料，该方程为：\n$$ \\nabla^2 \\phi(x,y) = \\frac{\\partial^2 \\phi}{\\partial x^2} + \\frac{\\partial^2 \\phi}{\\partial y^2} = -2 G \\theta $$\n边界条件源于杆的侧表面必须是无面力的这一要求。这意味着剪应力矢量的切向分量必须在截面边界上为零。用应力函数表示，如果 $\\phi$ 沿边界 $\\partial A$ 为常数，则该条件得到满足。不失一般性，可将此常数设为零。对于给定的椭圆截面，域 $A$ 由 $x^2/a^2 + y^2/b^2 \\le 1$ 定义，其边界 $\\partial A$ 为椭圆 $x^2/a^2 + y^2/b^2 = 1$。因此，狄利克雷边界条件为：\n$$ \\phi(x,y) = 0 \\quad \\text{for} \\quad (x,y) \\in \\partial A $$\n为寻找解，我们寻求 $\\phi(x,y)$ 的一个最低次多项式拟设。边界条件表明 $\\phi$ 的表达式必须包含因子 $\\left(\\frac{x^2}{a^2} + \\frac{y^2}{b^2} - 1\\right)$。我们假设满足此条件的最简单的非平凡形式，即一个二次多项式：\n$$ \\phi(x,y) = C \\left( \\frac{x^2}{a^2} + \\frac{y^2}{b^2} - 1 \\right) $$\n其中 $C$ 是一个待定常数。根据其构造，该形式在边界上为零。椭圆截面关于 $x$ 轴和 $y$ 轴均具有对称性。所提出的拟设是关于 $x$ 和 $y$ 的偶函数，即 $\\phi(x,y) = \\phi(-x,y) = \\phi(x,-y)$，这正确地反映了这些几何对称性。此外，我们必须检查此拟设是否与控制泊松方程一致，该方程要求 $\\phi$ 的拉普拉斯算子为常数。我们计算其二阶偏导数：\n$$ \\frac{\\partial \\phi}{\\partial x} = C \\left( \\frac{2x}{a^2} \\right) \\implies \\frac{\\partial^2 \\phi}{\\partial x^2} = \\frac{2C}{a^2} $$\n$$ \\frac{\\partial \\phi}{\\partial y} = C \\left( \\frac{2y}{b^2} \\right) \\implies \\frac{\\partial^2 \\phi}{\\partial y^2} = \\frac{2C}{b^2} $$\n因此，拉普拉斯算子为：\n$$ \\nabla^2 \\phi = \\frac{2C}{a^2} + \\frac{2C}{b^2} = 2C \\left( \\frac{1}{a^2} + \\frac{1}{b^2} \\right) = 2C \\frac{a^2 + b^2}{a^2 b^2} $$\n拉普拉斯算子确实是一个常数，这验证了所选拟设形式的正确性。其次数 $2$ 是最小的，因为任何一次多项式的拉普拉斯算子都为零，不能同时满足偏微分方程和非平凡边界条件。\n\n2) 将计算出的拉普拉斯算子代入控制方程，可以确定常数 $C$：\n$$ 2C \\frac{a^2 + b^2}{a^2 b^2} = -2 G \\theta $$\n解出 $C$ 可得：\n$$ C = -G \\theta \\frac{a^2 b^2}{a^2 + b^2} $$\n将此结果代回拟设，得到Prandtl应力函数的显式表达式：\n$$ \\phi(x,y) = -G \\theta \\frac{a^2 b^2}{a^2 + b^2} \\left( \\frac{x^2}{a^2} + \\frac{y^2}{b^2} - 1 \\right) $$\n现在，考虑由 $x' = x/a$ 和 $y' = y/b$ 定义的坐标线性缩放。此变换将 $(x,y)$-平面中的椭圆域 $x^2/a^2 + y^2/b^2 \\le 1$ 映射到 $(x',y')$-平面中的单位圆盘 $(x')^2 + (y')^2 \\le 1$。在这些缩放坐标中，应力函数变为：\n$$ \\phi(x'(x), y'(y)) = -G \\theta \\frac{a^2 b^2}{a^2 + b^2} \\left( (x')^2 + (y')^2 - 1 \\right) $$\n如果我们在缩放系统中定义径向坐标为 $r' = \\sqrt{(x')^2 + (y')^2}$，则 $\\phi$ 的表达式简化为：\n$$ \\phi(r') = -G \\theta \\frac{a^2 b^2}{a^2 + b^2} \\left( (r')^2 - 1 \\right) $$\n此函数仅取决于缩放后的径向距离 $r'$，这表明对笛卡尔坐标的线性缩放使解在变换后的空间中呈现径向对称。\n\n3) 在薄膜比拟的背景下，杆所传递的总扭矩 $T$ 等于挠曲的薄膜 $\\phi(x,y)$ 与 $z=0$ 平面所围成体积的两倍。在数学上，这表示为：\n$$ T = 2 \\iint_A \\phi(x,y) \\,dx\\,dy $$\n我们代入推导出的 $\\phi(x,y)$ 表达式：\n$$ T = 2 \\iint_A \\left[ -G \\theta \\frac{a^2 b^2}{a^2 + b^2} \\left( \\frac{x^2}{a^2} + \\frac{y^2}{b^2} - 1 \\right) \\right] dx\\,dy $$\n$$ T = -2 G \\theta \\frac{a^2 b^2}{a^2 + b^2} \\iint_A \\left( \\frac{x^2}{a^2} + \\frac{y^2}{b^2} - 1 \\right) dx\\,dy $$\n为计算此积分，我们进行变量替换，换为缩放坐标 $x' = x/a$ 和 $y' = y/b$。面积微元变换为 $dx\\,dy = |\\det(J_c)| \\,dx'\\,dy'$，其中 $J_c$ 是从 $(x',y')$ 到 $(x,y)$ 的变换的雅可比矩阵。\n$$ J_c = \\begin{pmatrix} \\frac{\\partial x}{\\partial x'} & \\frac{\\partial x}{\\partial y'} \\\\ \\frac{\\partial y}{\\partial x'} & \\frac{\\partial y}{\\partial y'} \\end{pmatrix} = \\begin{pmatrix} a & 0 \\\\ 0 & b \\end{pmatrix} $$\n其行列式为 $\\det(J_c) = ab$。因此，$dx\\,dy = ab\\,dx'\\,dy'$。积分域变为由 $(x')^2 + (y')^2 \\le 1$ 定义的单位圆盘 $D$。扭矩的积分现在为：\n$$ T = -2 G \\theta \\frac{a^2 b^2}{a^2 + b^2} (ab) \\iint_D \\left( (x')^2 + (y')^2 - 1 \\right) dx'\\,dy' $$\n计算剩余积分最方便的方法是在缩放系统中使用极坐标，$x' = r' \\cos\\alpha$ 和 $y' = r' \\sin\\alpha$，其中 $0 \\le r' \\le 1$ 且 $0 \\le \\alpha \\le 2\\pi$。面积元为 $dx'\\,dy' = r'\\,dr'\\,d\\alpha$。\n$$ \\iint_D \\left( (x')^2 + (y')^2 - 1 \\right) dx'\\,dy' = \\int_0^{2\\pi} \\int_0^1 \\left( (r')^2 - 1 \\right) r' \\,dr'\\,d\\alpha $$\n$$ = \\int_0^{2\\pi} \\left[ \\frac{(r')^4}{4} - \\frac{(r')^2}{2} \\right]_0^1 d\\alpha = \\int_0^{2\\pi} \\left( \\frac{1}{4} - \\frac{1}{2} \\right) d\\alpha = -\\frac{1}{4} \\int_0^{2\\pi} d\\alpha = -\\frac{2\\pi}{4} = -\\frac{\\pi}{2} $$\n将此结果代回扭矩 $T$ 的表达式中：\n$$ T = -2 G \\theta \\frac{a^3 b^3}{a^2 + b^2} \\left( -\\frac{\\pi}{2} \\right) = G \\theta \\frac{\\pi a^3 b^3}{a^2 + b^2} $$\n扭转常数（或称扭转刚度）$J$ 由线性本构关系 $T = G J \\theta$ 定义。通过将此定义与我们推导出的扭矩表达式进行比较，我们可以直接确定 $J$：\n$$ G J \\theta = G \\theta \\frac{\\pi a^3 b^3}{a^2 + b^2} $$\n因此，椭圆截面的扭转常数为：\n$$ J = \\frac{\\pi a^3 b^3}{a^2 + b^2} $$\n推导完成。", "answer": "$$\n\\boxed{\\frac{\\pi a^{3} b^{3}}{a^{2} + b^{2}}}\n$$", "id": "2698592"}, {"introduction": "当处理多连通截面（如空心轴）时，扭转问题会变得更加精妙。本练习探讨了环形杆的扭转，并突出了一个关键的物理要求：翘曲位移的单值性。你将发现该条件如何决定应力函数 $\\phi$ 的边界值，并导致内边界上产生一个非零的扭矩贡献。在薄膜比拟的背景下，这对应于将一张薄膜拉伸在两个不同高度的同心圆环上，从而提供了一个强有力的视觉和概念上的洞见。", "problem": "一根均质、各向同性的棱柱杆，其长度远大于其横截面尺寸，具有内半径为 $a$、外半径为 $b$ 的环形横截面。该杆承受 Saint-Venant 扭转，单位长度扭转角为给定的 $\\theta$（单位为弧度/单位长度）。令 $\\phi(x,y)$ 表示 Prandtl 应力函数，其定义使得非零剪应力由 $\\tau_{xz} = \\partial\\phi/\\partial y$ 和 $\\tau_{yz} = -\\partial\\phi/\\partial x$ 给出；相关的翘曲函数 $w(x,y)$ 通过 $\\gamma_{xz} = \\partial w/\\partial x - \\theta y$ 和 $\\gamma_{yz} = \\partial w/\\partial y + \\theta x$ 进入运动学关系，其中 $\\gamma_{ij}$ 是工程剪应变。\n\n从这些定义和剪切模量为 $G$ 的线性弹性关系 $\\tau_{ij} = G \\gamma_{ij}$ 出发，执行以下操作：\n\n1) 推导横截面内关于 $\\phi$ 的控制偏微分方程 (PDE)，以及在内、外圆形边界上的无面力边界条件。将其特殊化为极坐标 $(r,\\beta)$ 下的轴对称场 $\\phi = \\phi(r)$。\n\n2) 在 $a < r < b$ 上求解所得的关于 $\\phi(r)$ 的常微分方程，允许与 PDE 和无面力边界条件一致的最一般轴对称解。然后，利用翘曲位移 $w(x,y)$ 对于环绕孔洞的闭合路径必须是单值的要求，消除任何非物理项，并确定 $\\phi(r)$ 的物理上允许的形式。选择加法常数以使 $\\phi(b) = 0$ 并报告所得的 $\\phi(r)$。\n\n3) 使用第一性原理（角动量平衡和 Prandtl 应力函数的定义），推导一个联系施加扭矩 $T$ 与 $\\phi$ 的精确恒等式，该恒等式包括当 $\\phi$ 在并非所有边界部分上都为零时可能出现的任何边界贡献。使用此恒等式计算由 $T = G J \\theta$ 定义的扭转常数 $J$。\n\n4) 使用薄膜比拟，将 $r \\mapsto \\phi(r)$ 的图像解释为承受均布载荷的轴对称薄膜的挠曲形状。简要解释为什么对于多连通横截面，物理上允许的形状要求在两个边界上 $\\phi$ 具有不同的“高度”（常数值），以及为什么这对应于内外边缘之间的鞍状剖面。\n\n答案规格：\n- 以 $a$、$b$、$G$ 和 $\\theta$ 的精确闭式表达式形式提供 $\\phi(r)$ 和 $J$ 的最终表达式。\n- 将最终答案表示为一个单行矩阵，其中首先包含 $\\phi(r)$，然后是 $J$。\n- 无需进行数值计算或四舍五入。\n- 单位长度扭转角 $\\theta$ 的单位是弧度/单位长度。", "solution": "将对问题进行验证，如果有效，则按要求分四个部分进行求解。\n\n步骤1：提取已知条件\n- 杆：均质、各向同性、棱柱形，长度 $\\gg$ 横截面尺寸。\n- 横截面：环形，内半径 $a$，外半径 $b$。\n- 载荷：Saint-Venant 扭转，单位长度扭转角 $\\theta$。\n- Prandtl 应力函数 $\\phi(x,y)$: $\\tau_{xz} = \\partial\\phi/\\partial y$, $\\tau_{yz} = -\\partial\\phi/\\partial x$。\n- 翘曲函数 $w(x,y)$: $\\gamma_{xz} = \\partial w/\\partial x - \\theta y$, $\\gamma_{yz} = \\partial w/\\partial y + \\theta x$。\n- 本构律：$\\tau_{ij} = G \\gamma_{ij}$，其中 $G$ 是剪切模量。\n- 任务：\n  1. 推导 $\\phi$ 的 PDE 及边界条件，并特殊化为轴对称情况，$\\phi=\\phi(r)$。\n  2. 利用 $w(x,y)$ 沿环绕孔洞路径必须为单值的条件，在边界条件 $\\phi(b) = 0$ 下求解 $\\phi(r)$。\n  3. 推导扭矩-应力函数恒等式，并从 $T = G J \\theta$ 计算扭转常数 $J$。\n  4. 使用薄膜比拟解释解。\n\n步骤2：使用提取的已知条件进行验证\n该问题是弹性理论中关于多连通杆扭转的一个标准练习题。所有引用的定义和物理原理（$\\phi$、$w$、剪切胡克定律）都是标准的。该问题具有科学依据，是适定的，并以客观语言表述。“使用翘曲位移 $w(x,y)$ 必须是单值的要求”这一指令为多连通域问题提供了一个特定的、尽管是简化的封闭条件。尽管该理论的更高等处理方法表明 $w(x,y)$ 并非严格单值，但要求其单值是一个有效的简化假设，它导出一个自洽的问题表述，并且（如下所示）能为扭转常数得出正确的物理结果。因此，该问题被认定为**有效**。\n\n步骤3：结论与行动\n该问题有效。将提供完整的解答。\n\n第1部分：控制PDE和边界条件\n\n对于无体力的 Saint-Venant 扭转问题，平衡方程被 Prandtl 应力函数 $\\phi$ 的定义自动满足：\n$$ \\frac{\\partial \\tau_{xz}}{\\partial x} + \\frac{\\partial \\tau_{yz}}{\\partial y} = \\frac{\\partial}{\\partial x}\\left(\\frac{\\partial \\phi}{\\partial y}\\right) + \\frac{\\partial}{\\partial y}\\left(-\\frac{\\partial \\phi}{\\partial x}\\right) = \\frac{\\partial^2 \\phi}{\\partial x \\partial y} - \\frac{\\partial^2 \\phi}{\\partial y \\partial x} = 0 $$\n应变协调性要求从其定义关系式中消除翘曲函数 $w$。通过求偏导数，我们发现：\n$$ \\frac{\\partial \\gamma_{xz}}{\\partial y} - \\frac{\\partial \\gamma_{yz}}{\\partial x} = \\frac{\\partial}{\\partial y}\\left(\\frac{\\partial w}{\\partial x} - \\theta y\\right) - \\frac{\\partial}{\\partial x}\\left(\\frac{\\partial w}{\\partial y} + \\theta x\\right) = \\frac{\\partial^2 w}{\\partial y \\partial x} - \\theta - \\frac{\\partial^2 w}{\\partial x \\partial y} - \\theta = -2\\theta $$\n使用本构律 $\\tau_{ij} = G \\gamma_{ij}$，我们代入应变：\n$$ \\frac{1}{G}\\left(\\frac{\\partial \\tau_{xz}}{\\partial y} - \\frac{\\partial \\tau_{yz}}{\\partial x}\\right) = -2\\theta $$\n代入以 $\\phi$ 表示的应力定义：\n$$ \\frac{\\partial}{\\partial y}\\left(\\frac{\\partial \\phi}{\\partial y}\\right) - \\frac{\\partial}{\\partial x}\\left(-\\frac{\\partial \\phi}{\\partial x}\\right) = -2G\\theta $$\n这就得出了应力函数 $\\phi$ 的控制泊松方程：\n$$ \\nabla^2 \\phi = \\frac{\\partial^2 \\phi}{\\partial x^2} + \\frac{\\partial^2 \\phi}{\\partial y^2} = -2G\\theta $$\n在无面力的侧表面上的边界条件是，垂直于边界的应力分量为零。令边界曲线由弧长 $s$ 参数化，因此其切向量为 $\\mathbf{t} = (dx/ds, dy/ds)$，其外法向量为 $\\mathbf{n} = (dy/ds, -dx/ds)$。$z$ 方向的面力分量为 $t_z = \\tau_{zx} n_x + \\tau_{zy} n_y = 0$。\n$$ \\tau_{xz}\\left(\\frac{dy}{ds}\\right) + \\tau_{yz}\\left(-\\frac{dx}{ds}\\right) = 0 \\implies \\left(\\frac{\\partial \\phi}{\\partial y}\\right)\\frac{dy}{ds} + \\left(-\\frac{\\partial \\phi}{\\partial x}\\right)\\left(-\\frac{dx}{ds}\\right) = \\frac{\\partial \\phi}{\\partial x}\\frac{dx}{ds} + \\frac{\\partial \\phi}{\\partial y}\\frac{dy}{ds} = \\frac{d\\phi}{ds} = 0 $$\n这意味着 $\\phi$ 必须沿任何边界曲线为常数。对于环形域，我们有两个边界，$r=a$ 和 $r=b$。因此，$\\phi(r=a) = C_a$ 和 $\\phi(r=b) = C_b$。\n\n对于轴对称场 $\\phi = \\phi(r)$，极坐标 $(r, \\beta)$ 中的拉普拉斯算子简化为：\n$$ \\nabla^2 \\phi = \\frac{1}{r}\\frac{\\partial}{\\partial r}\\left(r\\frac{\\partial \\phi}{\\partial r}\\right) + \\frac{1}{r^2}\\frac{\\partial^2 \\phi}{\\partial \\beta^2} = \\frac{1}{r}\\frac{d}{dr}\\left(r\\frac{d\\phi}{dr}\\right) $$\n控制方程变为一个常微分方程 (ODE)：\n$$ \\frac{1}{r}\\frac{d}{dr}\\left(r\\frac{d\\phi}{dr}\\right) = -2G\\theta $$\n边界条件就是 $\\phi(a) = C_a$ 和 $\\phi(b) = C_b$。\n\n第2部分：应力函数 $\\phi(r)$ 的解\n\n我们通过对 $r$ 积分两次来求解该 ODE：\n$$ \\frac{d}{dr}\\left(r\\frac{d\\phi}{dr}\\right) = -2G\\theta r \\implies r\\frac{d\\phi}{dr} = -G\\theta r^2 + K_1 $$\n$$ \\frac{d\\phi}{dr} = -G\\theta r + \\frac{K_1}{r} $$\n$$ \\phi(r) = -\\frac{1}{2}G\\theta r^2 + K_1 \\ln(r) + K_2 $$\n这是一般的轴对称解。常数 $K_1$ 和 $K_2$ 由边界条件和翘曲函数 $w$ 的单值性确定。\n翘曲函数 $w$ 沿闭合回路 $C$ 的变化为 $\\oint_C dw$。为使 $w$ 是单值的，此积分必须为零。\n$$ \\oint_C dw = \\oint_C \\left(\\frac{\\partial w}{\\partial x}dx + \\frac{\\partial w}{\\partial y}dy\\right) = \\oint_C \\left[\\left(\\frac{\\tau_{xz}}{G} + \\theta y\\right)dx + \\left(\\frac{\\tau_{yz}}{G} - \\theta x\\right)dy\\right] $$\n$$ \\oint_C dw = \\frac{1}{G}\\oint_C \\left(\\frac{\\partial \\phi}{\\partial y}dx - \\frac{\\partial \\phi}{\\partial x}dy\\right) + \\theta\\oint_C (ydx - xdy) $$\n令 $C$ 为绕原点的半径为 $r$ 的圆形路径，所以 $x=r\\cos\\beta$，$y=r\\sin\\beta$。\n第二个积分是 $\\theta \\int_{0}^{2\\pi} (r\\sin\\beta)(-r\\sin\\beta d\\beta) - (r\\cos\\beta)(r\\cos\\beta d\\beta) = - \\theta r^2 \\int_{0}^{2\\pi} d\\beta = -2\\pi\\theta r^2$。\n对于第一个积分，我们在极坐标中表示被积函数：对于 $\\phi=\\phi(r)$，$\\partial\\phi/\\partial y = (d\\phi/dr)\\sin\\beta$ 且 $\\partial\\phi/\\partial x = (d\\phi/dr)\\cos\\beta$。\n$$ \\frac{1}{G}\\int_{0}^{2\\pi} \\left[ \\left(\\frac{d\\phi}{dr}\\sin\\beta\\right)(-r\\sin\\beta d\\beta) - \\left(\\frac{d\\phi}{dr}\\cos\\beta\\right)(r\\cos\\beta d\\beta) \\right] = -\\frac{r}{G}\\frac{d\\phi}{dr} \\int_{0}^{2\\pi} d\\beta = -\\frac{2\\pi r}{G}\\frac{d\\phi}{dr} $$\n因此，$w$ 沿环绕孔洞的路径（例如，在半径 $r=a$ 处）保持单值的条件是：\n$$ \\oint_{r=a} dw = -\\frac{2\\pi a}{G}\\left.\\frac{d\\phi}{dr}\\right|_{r=a} - 2\\pi\\theta a^2 = 0 \\implies \\left.\\frac{d\\phi}{dr}\\right|_{r=a} = -G\\theta a $$\n将导数 $\\frac{d\\phi}{dr} = -G\\theta r + \\frac{K_1}{r}$ 的一般表达式代入此条件：\n$$ -G\\theta a + \\frac{K_1}{a} = -G\\theta a \\implies \\frac{K_1}{a} = 0 \\implies K_1 = 0 $$\n应力函数简化为 $\\phi(r) = -\\frac{1}{2}G\\theta r^2 + K_2$。\n问题指定了边界条件 $\\phi(b) = 0$。应用此条件确定 $K_2$：\n$$ 0 = -\\frac{1}{2}G\\theta b^2 + K_2 \\implies K_2 = \\frac{1}{2}G\\theta b^2 $$\n在给定约束下，物理上允许的应力函数为：\n$$ \\phi(r) = \\frac{G\\theta}{2}(b^2 - r^2) $$\n\n第3部分：扭矩和扭转常数\n\n总扭矩 $T$ 是横截面 $A$ 上剪应力的合力矩：\n$$ T = \\iint_A (x\\tau_{yz} - y\\tau_{xz}) dA = \\iint_A \\left[x\\left(-\\frac{\\partial\\phi}{\\partial x}\\right) - y\\left(\\frac{\\partial\\phi}{\\partial y}\\right)\\right] dA = -\\iint_A \\left(x\\frac{\\partial\\phi}{\\partial x} + y\\frac{\\partial\\phi}{\\partial y}\\right) dA $$\n使用分部积分法（或形式为 $\\iint_A \\nabla \\cdot \\mathbf{F} dA = \\oint_{\\partial A} \\mathbf{F}\\cdot\\mathbf{n} ds$ 的格林公式）：\n$$ T = -\\iint_A \\left[ \\frac{\\partial(x\\phi)}{\\partial x} - \\phi + \\frac{\\partial(y\\phi)}{\\partial y} - \\phi \\right] dA = 2\\iint_A \\phi dA - \\oint_{\\partial A} \\phi(x n_x + y n_y) ds $$\n边界 $\\partial A$ 由外圆 $C_b$（半径 $b$）和内圆 $C_a$（半径 $a$）组成。从区域出发的单位外法向量 $\\mathbf{n}$ 在 $C_b$ 上径向向外，在 $C_a$ 上径向向内。在任何半径为 $r$ 的圆上，$x n_x + y n_y = \\pm r$。注意方向，联系 $T$ 和 $\\phi$ 的扭矩恒等式是：\n$$ T = 2\\iint_A \\phi dA - 2\\pi b^2 \\phi(b) + 2\\pi a^2 \\phi(a) $$\n这就是所要求的恒等式。使用我们确定的 $\\phi(r)$，我们有 $\\phi(b)=0$ 和 $\\phi(a) = \\frac{G\\theta}{2}(b^2-a^2)$。扭矩是：\n$$ T = 2\\iint_A \\phi dA + 2\\pi a^2 \\left(\\frac{G\\theta}{2}(b^2-a^2)\\right) = 2\\iint_A \\phi dA + \\pi G\\theta a^2(b^2-a^2) $$\n积分项计算如下：\n$$ \\iint_A \\phi dA = \\int_a^b \\phi(r) (2\\pi r) dr = 2\\pi \\int_a^b \\frac{G\\theta}{2}(b^2-r^2)r dr = \\pi G\\theta \\left[ \\frac{b^2r^2}{2} - \\frac{r^4}{4} \\right]_a^b $$\n$$ \\iint_A \\phi dA = \\pi G\\theta \\left[ \\left(\\frac{b^4}{2}-\\frac{b^4}{4}\\right) - \\left(\\frac{b^2a^2}{2}-\\frac{a^4}{4}\\right) \\right] = \\pi G\\theta \\left[ \\frac{b^4}{4} - \\frac{2b^2a^2}{4} + \\frac{a^4}{4} \\right] = \\frac{\\pi G\\theta}{4}(b^2-a^2)^2 $$\n将此代回扭矩表达式：\n$$ T = 2\\left(\\frac{\\pi G\\theta}{4}(b^2-a^2)^2\\right) + \\pi G\\theta a^2(b^2-a^2) = \\frac{\\pi G\\theta}{2}(b^2-a^2)^2 + \\pi G\\theta a^2(b^2-a^2) $$\n$$ T = \\pi G\\theta (b^2-a^2) \\left[ \\frac{b^2-a^2}{2} + a^2 \\right] = \\pi G\\theta (b^2-a^2) \\left[ \\frac{b^2+a^2}{2} \\right] = \\frac{\\pi G\\theta}{2}(b^4-a^4) $$\n扭转常数 $J$ 由 $T = G J \\theta$ 定义，因此我们得到：\n$$ J = \\frac{\\pi}{2}(b^4 - a^4) $$\n\n第4部分：薄膜比拟\n\n应力函数的控制方程 $\\nabla^2 \\phi = -2G\\theta$ 类似于在均布压力 $p$ 和均匀表面张力 $S$ 作用下弹性薄膜小挠度 $z$ 的方程：$\\nabla^2 z = -p/S$。因此我们可以建立对应关系 $\\phi \\leftrightarrow z$ 和 $2G\\theta \\leftrightarrow p/S$。\n边界条件 $\\phi = \\text{常数}$ 对应于薄膜固定在恒定高度的刚性支撑上。对于环形横截面，薄膜张在半径为 $r=a$ 和 $r=b$ 的两个同心圆形支撑上。\n从我们的解中可知，$\\phi(b)=0$ 和 $\\phi(a) = \\frac{G\\theta}{2}(b^2-a^2)$。由于 $b>a$ 并且我们假设 $G>0, \\theta>0$，因此有 $\\phi(a) > 0$。这对应于一个薄膜，其外边缘保持在高度0，而其内边缘被提升到正高度 $\\phi(a)$。均匀的“向下”压力（在负 $\\phi$ 方向）导致薄膜下凹。\n薄膜的形状由 $\\phi(r) = \\frac{G\\theta}{2}(b^2-r^2)$ 的图像给出，这是一个开口向下的旋转抛物面。边界上需要不同高度，即 $\\phi(a) \\neq \\phi(b)$，是满足多连通域物理协调条件（位移单值性）的直接结果。如果两个边界都在同一高度（例如 $\\phi(a)=\\phi(b)=0$），解将不满足此物理要求。\n“鞍状剖面”这个术语对于这个轴对称情况是不准确的。鞍状曲面的主曲率符号相反。曲面 $\\phi(r)$ 是一个旋转曲面，其主曲率沿着径向和切向方向。径向剖面 $\\phi(r)$ 是一条开口向下的抛物线，具有恒定的负二阶导数。切向（环向）的曲率也是负的（曲面在该方向上同样从切线“向下”弯曲）。由于两个主曲率符号相同，该曲面处处是椭圆点的（穹顶状），而不是双曲点的（鞍状）。该术语可能被不严格地用来描述在两个边缘之间中间下凹的形状，但这在几何上是不正确的。", "answer": "$$\n\\boxed{\n\\begin{pmatrix}\n\\frac{G\\theta}{2}(b^2 - r^2) & \\frac{\\pi}{2}(b^4 - a^4)\n\\end{pmatrix}\n}\n$$", "id": "2698665"}, {"introduction": "尽管解析解非常优美，但大多数现实世界中的工程问题都涉及无法用简单公式描述的复杂几何形状。本练习通过要求你为任意样条定义的截面实现一个扭转问题的有限差分求解器，从而在理论与计算实践之间架起了一座桥梁。你将把控制泊松方程转化为一个线性方程组，并数值求解应力函数。这项动手编程练习不仅揭开了数值分析的神秘面纱，还通过一个基于能量恒等式的内置验证步骤，加深了对理论概念的理解。", "problem": "考虑一根具有单连通横截面的长棱柱杆的扭转问题。在 Saint-Venant 扭转理论中，引入横截面域 $A$ 上的 Prandtl 应力函数 $\\phi(x,y)$，该函数满足从线性弹性力学和平衡条件推导出的边值问题：在 $A$ 内 $\\nabla^2 \\phi = -2\\,G\\,\\theta$，在边界 $\\partial A$ 上 $\\phi=0$。其中，$G$ 是剪切模量，$\\theta$ 是单位长度扭转角，单位为弧度/米。薄膜比拟断言，扭转剪应力分量为 $\\tau_{xz}=\\partial \\phi/\\partial y$ 和 $\\tau_{yz}=-\\partial \\phi/\\partial x$，扭矩为 $T=2\\int_A \\phi\\,dA$。因此，扭转常数为 $J=T/(G\\theta)=\\dfrac{2}{G\\theta}\\int_A \\phi\\,dA$。此外，根据适用于边界上值为零的函数的 Green 恒等式，以下应变能恒等式成立：$\\int_A \\lVert \\nabla \\phi \\rVert^2 \\, dA = 2\\,G\\,\\theta \\int_A \\phi \\, dA$。\n\n您的任务是在域 $A$ 内的均匀网格上对 $\\phi$ 进行数值近似，其中域 $A$ 的边界 $\\partial A$ 由通过给定有序控制点列表的周期性三次样条插值定义。然后，计算扭转常数 $J$，并在指定的容差范围内对能量恒等式进行数值验证。\n\n离散化要求：\n- 使用方形包围盒 $[-L, L]\\times[-L, L]$，其中 $L=0.06$ 米，以及一个包含 $N\\times N$ 个节点的均匀网格，其中 $N=161$。设均匀网格间距为 $h=2L/(N-1)$ 米。\n- 对位于 $A$ 内部的网格点，构建拉普拉斯算子的五点有限差分近似，并在 $A$ 外部施加齐次狄利克雷数据 $\\phi=0$。具体来说，对于每个索引为 $i$ 的内部网格节点，将拉普拉斯算子近似为 $\\phi_{i+\\hat{x}}+\\phi_{i-\\hat{x}}+\\phi_{i+\\hat{y}}+\\phi_{i-\\hat{y}}-4\\phi_i = h^2 f_i$，其中 $f_i=-2\\,G\\,\\theta$。这将为内部节点上未知节点值 $\\phi$ 构成的向量 $u$ 产生一个稀疏线性系统 $A\\,u=b$，其中 $A$ 是未缩放的图拉普拉斯模板，$b=h^2 f$。\n- 计算离散能量 $E_h = u^\\top(-A)\\,u$ 和离散薄膜积分 $I_h = h^2 \\sum_i u_i$。将 $E_h$ 与 $2\\,G\\,\\theta\\,I_h$ 进行比较，并报告相对残差 $r = \\lvert E_h - 2\\,G\\,\\theta\\,I_h\\rvert / E_h$。\n- 根据 $J \\approx \\dfrac{2}{G\\,\\theta}\\,I_h$ 计算 $J$。以 $\\mathrm{m}^4$ 为单位表示 $J$。\n\n样条边界构建：\n- 对于一组以米为单位的控制点 $\\{(x_k,y_k)\\}_{k=0}^{K-1}$，其中 $(x_0,y_0)=(x_K,y_K)$ 以强制周期性，分别为 $x$ 和 $y$ 坐标构建关于参数 $t$ 的周期性三次样条。然后，在 $M$ 个点上对样条进行密集采样，以形成 $\\partial A$ 的多边形近似。使用 $M=800$ 个样本。使用稳健的点在多边形内测试来确定哪些网格点位于 $A$ 内部。\n\n材料和加载参数：\n- 使用 $G = 26\\times 10^9$ 帕斯卡。\n- 使用 $\\theta = 0.01$ 弧度/米。\n\n测试套件：\n- 案例 1（光滑三叶形）：在基础半径 $R=0.04$ 米、振幅因子 $a=0.2$ 的三重余弦半径调制圆上，设置 $K=12$ 个控制点。对于 $k=0,1,\\dots,K-1$，令 $\\alpha_k = 2\\pi k/K$，$r_k = R\\,(1 + a\\cos(3\\alpha_k))$，以及 $(x_k,y_k) = (r_k\\cos\\alpha_k,\\; r_k\\sin\\alpha_k)$。为样条插值，在末尾重复点 $(x_0,y_0)$ 以强制周期性。\n- 案例 2（圆角矩形）：构建 $K=16$ 个控制点，这些点描绘一个宽度 $w=0.08$ 米、高度 $h_r=0.05$ 米的矩形，其名义圆角偏移量为 $\\rho=0.012$ 米。按逆时针顺序使用以下点序列\n  $(w/2-\\rho,\\,h_r/2)$,\n  $(w/2,\\,h_r/2)$,\n  $(w/2,\\,h_r/2-\\rho)$,\n  $(w/2,\\,0)$,\n  $(w/2,\\, -h_r/2+\\rho)$,\n  $(w/2,\\, -h_r/2)$,\n  $(w/2-\\rho,\\, -h_r/2)$,\n  $(0,\\, -h_r/2)$,\n  $(-w/2+\\rho,\\, -h_r/2)$,\n  $(-w/2,\\, -h_r/2)$,\n  $(-w/2,\\, -h_r/2+\\rho)$,\n  $(-w/2,\\, 0)$,\n  $(-w/2,\\, h_r/2-\\rho)$,\n  $(-w/2,\\, h_r/2)$,\n  $(-w/2+\\rho,\\, h_r/2)$,\n  $(0,\\, h_r/2)$,\n  然后重复第一个点以闭合形成周期。这些点被特意安排，以便周期性三次样条能够使角点平滑。\n- 案例 3（细长四叶草形）：设置 $K=16$ 个具有四重调制和各向异性的控制点。对于 $k=0,1,\\dots,K-1$，设 $\\alpha_k = 2\\pi k/K$，$r_k = R_c\\,(1 + b\\cos(4\\alpha_k))$，其中 $R_c=0.035$ 米，$b=0.3$，然后 $(x_k,y_k) = (s\\,r_k\\cos\\alpha_k,\\; r_k\\sin\\alpha_k)$，各向异性因子 $s=1.4$。在末尾重复第一个点。\n\n数值输出与单位：\n- 对每个案例，计算数据对 $(J,r)$，其中 $J$ 是以 $\\mathrm{m}^4$ 为单位的扭转常数，$r$ 是如上定义的相对残差。同时计算一个整数通过标志 $p$，如果 $r \\le \\tau$，则 $p$ 等于 $1$，否则为 $0$，容差 $\\tau=10^{-8}$。\n- 您的程序必须输出单行，其中包含一个 Python 风格的列表的列表，按案例 1、案例 2、案例 3 的顺序，每个案例一个。每个内部列表的形式必须为 $[J,r,p]$，其中 $J$ 和 $r$ 是浮点数，$p$ 是整数。该行不得包含空格。例如，三个案例的输出必须类似于 $[[J_1,r_1,p_1],[J_2,r_2,p_2],[J_3,r_3,p_3]]$。\n\n所有计算必须与上述离散化规则一致。以 $\\mathrm{m}^4$ 表示 $J$，以无量纲浮点数表示 $r$。角度以弧度为单位。不需要其他单位。算法必须是通用的，其编写方式应能处理三种样条定义的域中的任何一种，而无需修改除测试套件中提供的控制点之外的代码。", "solution": "问题陈述经过了严格的验证。\n\n步骤 1：提取给定条件\n- **控制方程**：在单连通域 $A$ 内 $\\nabla^2 \\phi = -2\\,G\\,\\theta$。\n- **边界条件**：在边界 $\\partial A$ 上 $\\phi=0$。\n- **控制参数**：剪切模量 $G = 26\\times 10^9$ Pa，单位长度扭转角 $\\theta = 0.01$ rad/m。\n- **派生量**：\n  - 剪应力分量：$\\tau_{xz}=\\partial \\phi/\\partial y$, $\\tau_{yz}=-\\partial \\phi/\\partial x$。\n  - 扭矩：$T=2\\int_A \\phi\\,dA$。\n  - 扭转常数：$J=T/(G\\theta)=\\dfrac{2}{G\\theta}\\int_A \\phi\\,dA$。\n- **能量恒等式**：$\\int_A \\lVert \\nabla \\phi \\rVert^2 \\, dA = 2\\,G\\,\\theta \\int_A \\phi \\, dA$。\n- **计算域**：方形包围盒 $[-L, L]\\times[-L, L]$，其中 $L=0.06$ m。\n- **离散化**：\n  - $N\\times N$ 节点的均匀网格，其中 $N=161$。\n  - 网格间距：$h=2L/(N-1)$。\n  - 五点有限差分模板：$\\phi_{i+\\hat{x}}+\\phi_{i-\\hat{x}}+\\phi_{i+\\hat{y}}+\\phi_{i-\\hat{y}}-4\\phi_i = h^2 f_i$，其中 $f_i=-2\\,G\\,\\theta$。\n  - 线性系统：$A\\,u=b$，其中 $A$ 为未缩放的图拉普拉斯模板，$b$ 为内部节点上 $h^2 f_i$ 值的向量。\n- **数值验证与后处理**：\n  - 离散能量：$E_h = u^\\top(-A)\\,u$。\n  - 离散薄膜积分：$I_h = h^2 \\sum_i u_i$。\n  - 扭转常数近似：$J \\approx \\dfrac{2}{G\\,\\theta}\\,I_h$。\n  - 相对残差：$r = \\lvert E_h - 2\\,G\\,\\theta\\,I_h\\rvert / E_h$。\n  - 通过标志：若 $r \\le \\tau$ 则 $p=1$，否则 $p=0$，容差 $\\tau=10^{-8}$。\n- **边界定义**：\n  - 通过给定有序控制点列表的周期性三次样条。\n  - 使用 $M=800$ 个采样点对样条边界进行多边形近似。\n  - 需要使用点在多边形内测试来分类网格节点。\n- **测试案例**：\n  - 案例 1：光滑三叶形，由 $K=12$ 个控制点定义，基础半径 $R=0.04$ m，调制系数 $a=0.2$。\n  - 案例 2：圆角矩形，宽度 $w=0.08$ m，高度 $h_r=0.05$ m，圆角偏移 $\\rho=0.012$ m，由 $K=16$ 个点定义。\n  - 案例 3：细长四叶草形，由 $K=16$ 个点定义，基础半径 $R_c=0.035$ m，调制系数 $b=0.3$，各向异性因子 $s=1.4$。\n- **输出格式**：单行 `[[J1,r1,p1],[J2,r2,p2],[J3,r3,p3]]`，无空格。\n\n步骤 2：使用提取的给定条件进行验证\n根据验证标准对问题进行评估。\n- **科学依据充分**：该问题植根于经典的 Saint-Venant 棱柱杆扭转理论，这是线性弹性力学的基石。控制方程是一个标准的泊松边值问题，薄膜比拟是一个成熟的概念。所有原理都是合理的。\n- **适定性**：在有界域上带有齐次狄利克雷边界条件的泊松方程是适定椭圆问题的经典示例，保证了解的唯一性和稳定性。数值公式会产生一个对称负定的线性系统 $A u = b$，该系统非奇异且有唯一解。\n- **客观性**：问题以完整且无歧义的定量数据、数学公式和算法要求进行了规定。它不含任何主观或定性语言。\n- **不完整或矛盾的设置**：模拟所需的所有参数（$G, \\theta, L, N, M, \\tau$）以及定义所有测试案例几何形状的参数都已明确提供。数值方法被足够详细地规定。不存在矛盾之处。问题是自洽的。\n- **不切实际或不可行**：材料属性、几何尺寸和加载条件在工程背景下是物理上合理的。网格尺寸 $N=161$ 会产生一个较大但在计算上可处理的线性系统。\n- **不适定或结构不良**：问题结构清晰，有明确的目标和通向解决方案的既定路径。各项术语在固体力学和数值分析的背景下有明确定义。\n- **离散能量恒等式**：问题要求将 $E_h = u^\\top(-A)u$ 与 $2G\\theta I_h$ 进行比较。根据离散系统的定义，$Au = b$，其中向量 $b$ 的元素为 $b_i = h^2(-2G\\theta)$。因此，$-Au = -b = h^2(2G\\theta)\\mathbf{1}$。能量为 $E_h = u^\\top(-Au) = u^\\top(h^2 2G\\theta \\mathbf{1}) = 2G\\theta h^2 \\sum_i u_i$。积分为 $I_h = h^2 \\sum_i u_i$。因此，恒等式 $E_h = 2G\\theta I_h$ 对于离散系统是精确成立的。因此，所要求的残差 $r$ 是衡量线性求解器数值精度的指标，而不是离散化误差的度量，这是一种对计算保真度的巧妙而有效的检验。\n\n步骤 3：结论与行动\n问题陈述是**有效的**。它在科学上是合理的，数学上是适定的，并且在计算上是具体的。将提供一个完整的解决方案。\n\n**解题方法**\n\n该问题要求对非标准横截面扭转问题中的 Prandtl 应力函数 $\\phi$ 进行数值求解，并随后计算工程量。解决方案分五个不同步骤进行。\n\n1.  **域边界构建**：每个案例的横截面边界 $\\partial A$ 由一组控制点定义。构建一条穿过这些点的周期性三次样条，从而形成一条平滑的闭合曲线。我们为 $x$ 和 $y$ 坐标分别使用独立的样条，两者均由归一化的弧长参数 $t$ 参数化。这通过使用 `scipy.interpolate.CubicSpline` 并设置 `bc_type='periodic'` 选项来实现。为了方便数值测试，这个连续的样条边界随后被密集采样成一个有 $M=800$ 个顶点的多边形，作为 $\\partial A$ 的高保真度近似。\n\n2.  **网格生成与内部节点识别**：计算域是一个方形区域 $[-L, L]^2$，被离散化为一个均匀的 $N \\times N$ 节点网格。这里的核心任务是将 $N^2$ 个网格节点中的每一个分类为多边形边界 $\\partial A$ 的“内部”或“外部”。为此，我们采用了一种稳健且高效的扫描线算法。对于每个水平网格线，计算其与多边形边的交点。这些交点按其 $x$ 坐标排序后，定义了该网格线上位于域内部的区间。落在这些区间内的网格节点被标记为内部节点。这种方法比朴素的逐点射线投射测试效率显著更高。\n\n3.  **有限差分系统构建**：控制泊松方程 $\\nabla^2 \\phi = -2G\\theta$ 在已识别的内部网格节点集上使用五点有限差分公式进行离散化。对于对应于网格位置 $(i,j)$ 的内部节点 $u_k$，方程为：\n    $$ \\phi_{i+1,j} + \\phi_{i-1,j} + \\phi_{i,j+1} + \\phi_{i,j-1} - 4\\phi_{i,j} = h^2(-2G\\theta) $$\n    如果一个相邻节点在域的外部，则强制执行齐次狄利克雷条件 $\\phi=0$，其值取为 $0$。此过程系统地应用于所有 $N_{int}$ 个内部节点，从而得到一个稀疏、对称的线性方程组 $A u = b$。这里，$u$ 是内部节点处未知 $\\phi$ 值的向量，$A$ 是 $N_{int} \\times N_{int}$ 的系数矩阵（未缩放的负拉普拉斯算子），$b$ 是右端向量，其每个元素都等于 $h^2(-2G\\theta)$。为提高计算效率，矩阵 $A$ 使用稀疏格式（如 `lil_matrix`）构建。\n\n4.  **求解线性系统**：构建的稀疏线性系统规模庞大但结构良好。矩阵 $A$ 是负定的。我们使用高性能的稀疏直接求解器，特别是 `scipy.sparse.linalg.spsolve`（它非常适合此类问题），来求解 $A u = b$ 以获得未知向量 $u$。\n\n5.  **后处理与验证**：获得解向量 $u$ 后，计算最终的物理量。\n    - 离散薄膜积分通过黎曼和计算：$I_h = h^2 \\sum_{k=1}^{N_{int}} u_k$。\n    - 扭转常数随后近似为 $J = \\dfrac{2}{G\\theta} I_h$。\n    - 对离散能量恒等式进行验证。数值能量通过二次型 $E_h = u^\\top(-A)u$ 计算。将其与项 $2G\\theta I_h$ 进行比较。计算相对残差 $r = |E_h - 2G\\theta I_h| / E_h$。如在验证中所述，该残差主要量化了线性求解器的数值精度。\n    - 如果 $r$ 低于指定的容差 $\\tau = 10^{-8}$，则将通过标志 $p$ 设置为 $1$，否则设置为 $0$。\n    \n此流程应用于三个测试案例中的每一个，每个案例的结果 $[J, r, p]$ 被汇总成指定的最终输出格式。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.interpolate import CubicSpline\nfrom scipy.sparse import lil_matrix\nfrom scipy.sparse.linalg import spsolve\n\ndef solve():\n    # Problem Parameters\n    G = 26e9  # Shear modulus in Pa\n    theta = 0.01  # Twist per unit length in rad/m\n    L = 0.06  # Bounding box half-width in m\n    N = 161  # Grid dimension\n    M = 800  # Number of spline samples for polygon\n    tau = 1e-8  # Tolerance for residual check\n\n    # Discretization setup\n    h = 2 * L / (N - 1)\n    grid_coords = np.linspace(-L, L, N)\n    xx, yy = np.meshgrid(grid_coords, grid_coords)\n    grid_points = np.vstack([xx.ravel(), yy.ravel()]).T\n\n    # --- Test Case Definitions ---\n    \n    # Case 1: Smooth trifoil\n    def get_case1_points():\n        K = 12\n        R = 0.04\n        a = 0.2\n        alphas = np.linspace(0, 2 * np.pi, K, endpoint=False)\n        radii = R * (1 + a * np.cos(3 * alphas))\n        x_pts = radii * np.cos(alphas)\n        y_pts = radii * np.sin(alphas)\n        return np.vstack([np.append(x_pts, x_pts[0]), np.append(y_pts, y_pts[0])]).T\n\n    # Case 2: Rounded rectangle\n    def get_case2_points():\n        w = 0.08\n        h_r = 0.05\n        rho = 0.012\n        w_half, h_half = w / 2, h_r / 2\n        \n        points = [\n            (w_half - rho, h_half), (w_half, h_half), (w_half, h_half - rho),\n            (w_half, 0), (w_half, -h_half + rho), (w_half, -h_half),\n            (w_half - rho, -h_half), (0, -h_half), (-w_half + rho, -h_half),\n            (-w_half, -h_half), (-w_half, -h_half + rho), (-w_half, 0),\n            (-w_half, h_r / 2 - rho), (-w_half, h_r / 2), (-w_half + rho, h_r / 2),\n            (0, h_half), (w_half - rho, h_half)\n        ]\n        return np.array(points)\n\n    # Case 3: Slender four-lobed clover\n    def get_case3_points():\n        K = 16\n        R_c = 0.035\n        b = 0.3\n        s = 1.4\n        alphas = np.linspace(0, 2 * np.pi, K, endpoint=False)\n        radii = R_c * (1 + b * np.cos(4 * alphas))\n        x_pts = s * radii * np.cos(alphas)\n        y_pts = radii * np.sin(alphas)\n        return np.vstack([np.append(x_pts, x_pts[0]), np.append(y_pts, y_pts[0])]).T\n\n    test_cases_points_gen = [get_case1_points, get_case2_points, get_case3_points]\n    \n    final_results = []\n\n    for get_points_func in test_cases_points_gen:\n        control_points = get_points_func()\n        \n        # 1. Domain Boundary Construction\n        t = np.arange(control_points.shape[0])\n        cs_x = CubicSpline(t, control_points[:, 0], bc_type='periodic')\n        cs_y = CubicSpline(t, control_points[:, 1], bc_type='periodic')\n        \n        fine_t = np.linspace(t[0], t[-1], M)\n        poly_verts = np.vstack([cs_x(fine_t), cs_y(fine_t)]).T\n\n        # 2. Grid Generation and Interior Node Identification (Scanline Algorithm)\n        is_interior = np.zeros(N * N, dtype=bool)\n        path = poly_verts\n\n        for j in range(N):\n            y = grid_coords[j]\n            intersections = []\n            for i in range(len(path) - 1):\n                p1 = path[i]\n                p2 = path[i+1]\n                if p1[1] == p2[1]: continue # Horizontal edge\n                if min(p1[1], p2[1]) < y <= max(p1[1], p2[1]):\n                    x_intersect = (y - p1[1]) * (p2[0] - p1[0]) / (p2[1] - p1[1]) + p1[0]\n                    intersections.append(x_intersect)\n            \n            intersections.sort()\n            \n            for k in range(0, len(intersections), 2):\n                if k + 1 < len(intersections):\n                    x_start, x_end = intersections[k], intersections[k+1]\n                    # Find grid indices for x_start and x_end\n                    idx_start = np.searchsorted(grid_coords, x_start, side='left')\n                    idx_end = np.searchsorted(grid_coords, x_end, side='right')\n                    start_linear_idx = j * N + idx_start\n                    end_linear_idx = j * N + idx_end\n                    is_interior[start_linear_idx:end_linear_idx] = True\n        \n        interior_indices = np.where(is_interior)[0]\n        n_interior = len(interior_indices)\n        \n        # Map from 2D grid index (as a single int) to 1D matrix index\n        map_2d_to_1d = -np.ones(N*N, dtype=int)\n        map_2d_to_1d[interior_indices] = np.arange(n_interior)\n\n        # 3. Finite Difference System Assembly\n        A = lil_matrix((n_interior, n_interior))\n        b = np.full(n_interior, h**2 * (-2 * G * theta))\n\n        for k in range(n_interior):\n            idx_2d = interior_indices[k]\n            row, col = divmod(idx_2d, N)\n\n            # Diagonal element\n            A[k, k] = -4\n\n            # Neighbors\n            neighbors = [(row, col-1), (row, col+1), (row-1, col), (row+1, col)]\n            for r_n, c_n in neighbors:\n                if 0 <= r_n < N and 0 <= c_n < N:\n                    neighbor_idx_2d = r_n * N + c_n\n                    if is_interior[neighbor_idx_2d]:\n                        idx_1d_neighbor = map_2d_to_1d[neighbor_idx_2d]\n                        A[k, idx_1d_neighbor] = 1\n\n        # 4. Solving the Linear System\n        A = A.tocsc()\n        u = spsolve(A, b)\n\n        # 5. Post-Processing and Validation\n        I_h = h**2 * np.sum(u)\n        J = (2 / (G * theta)) * I_h\n        \n        # Energy calculation E_h = u.T * (-A) * u\n        neg_A_u = -A.dot(u)\n        E_h = u.dot(neg_A_u)\n        \n        # Validation\n        V = 2 * G * theta * I_h\n        r = np.abs(E_h - V) / E_h if E_h != 0 else 0.0\n        p = 1 if r <= tau else 0\n        \n        final_results.append([J, r, p])\n\n    # Format the final output string\n    output_str = \"[\" + \",\".join([f\"[{J:.10e},{r:.10e},{p}]\" for J, r, p in final_results]) + \"]\"\n    print(output_str)\n\nsolve()\n```", "id": "2698611"}]}