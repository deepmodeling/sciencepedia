{"hands_on_practices": [{"introduction": "本练习是应用圣维南半逆法解决扭转问题的经典入门。通过从基本假设出发，您将推导出一个基础性的结果：圆形截面在扭转下不会发生翘曲。这个实践不仅能加深您对该方法的理解，还能阐明为何圆形轴在工程应用中具有独特的优势 [@problem_id:2683235]。", "problem": "一根半径为 $a$、长度为 $L$ 的均质、各向同性、线弹性固体制成的直棱柱圆形杆，其剪切模量为 $G$，绕纵向轴 $\\hat{\\boldsymbol{z}}$ 受到大小为 $T$ 的等值反向端部扭矩作用。杆上没有体力，侧向圆柱面无面力。使用 Saint-Venant 棱柱杆扭转半逆解法，仅从无体力情况下的基本线性动量平衡、小应变运动学以及剪切胡克定律出发，按以下步骤进行：\n- 假设单位长度扭转角 $\\alpha$ 为均匀值，并允许存在一个可能的纵向翘曲位移 $\\omega(x,y)$，该位移场与绕 $\\hat{\\boldsymbol{z}}$ 轴的刚性横截面旋转和沿 $\\hat{\\boldsymbol{z}}$ 轴的翘曲相一致。\n- 推导 $\\omega(x,y)$ 必须满足的控制边值问题，以及在圆形侧向表面上的无面力边界条件。\n- 使用这些关系推断 $\\omega(x,y)$ 对于圆形横截面是否恒为零。\n- 强制执行合扭矩条件，以确定剪应力分布。\n\n将您的最终结果报告为由翘曲函数和作为径向坐标 $r$ 的函数的周向剪应力分布组成的对：先是 $\\omega(x,y)$，然后是 $\\tau_{z\\theta}(r)$。您的最终答案必须是单一的闭式解析表达式。不应包含单位。如果您为 $\\omega$ 选择一个常数，请不失一般性地将其设为 $0$。", "solution": "所述问题是弹性力学理论中的一个标准练习。它自成体系、有科学依据且提法恰当。验证无误，我将继续进行求解。\n\n该问题要求使用 Saint-Venant 半逆解法求解具有圆形横截面的棱柱杆的扭转问题。杆的半径为 $a$，受到端部扭矩 $T$ 的作用。纵轴为 $z$ 轴。\n\n首先，我们建立位移场。根据 Saint-Venant 关于纯扭转的假设，点 $(x,y,z)$ 的位移被假定为由两部分组成：一是横截面绕 $z$ 轴的刚性转动，其大小与距一端的距离 $z$ 成正比；二是不依赖于 $z$ 的纵向位移或“翘曲”。对于单位长度扭转角 $\\alpha$ 很小的情况，位移分量 $(u_x, u_y, u_z)$ 为：\n$$\nu_x = -\\alpha z y \\\\\nu_y = \\alpha z x \\\\\nu_z = \\omega(x,y)\n$$\n在这里，$\\omega(x,y)$ 是翘曲函数，它描述了横截面的平面外变形。\n\n接下来，我们计算无穷小应变张量的分量，$\\varepsilon_{ij} = \\frac{1}{2}(\\frac{\\partial u_i}{\\partial x_j} + \\frac{\\partial u_j}{\\partial x_i})$。\n$$\n\\varepsilon_{xx} = \\frac{\\partial u_x}{\\partial x} = 0 \\\\\n\\varepsilon_{yy} = \\frac{\\partial u_y}{\\partial y} = 0 \\\\\n\\varepsilon_{zz} = \\frac{\\partial u_z}{\\partial z} = \\frac{\\partial \\omega(x,y)}{\\partial z} = 0 \\\\\n\\varepsilon_{xy} = \\frac{1}{2}\\left(\\frac{\\partial u_x}{\\partial y} + \\frac{\\partial u_y}{\\partial x}\\right) = \\frac{1}{2}(-\\alpha z + \\alpha z) = 0\n$$\n唯一不为零的应变分量是与 $z$ 方向相关的剪切应变：\n$$\n\\varepsilon_{xz} = \\frac{1}{2}\\left(\\frac{\\partial u_x}{\\partial z} + \\frac{\\partial u_z}{\\partial x}\\right) = \\frac{1}{2}\\left(-\\alpha y + \\frac{\\partial \\omega}{\\partial x}\\right) \\\\\n\\varepsilon_{yz} = \\frac{1}{2}\\left(\\frac{\\partial u_y}{\\partial z} + \\frac{\\partial u_z}{\\partial y}\\right) = \\frac{1}{2}\\left(\\alpha x + \\frac{\\partial \\omega}{\\partial y}\\right)\n$$\n\n对于均质、各向同性、线弹性材料，胡克定律将应力 $\\sigma_{ij}$ 与应变 $\\varepsilon_{ij}$ 联系起来。由于所有正应变分量和 $\\varepsilon_{xy}$ 均为零，应变张量的迹 $\\varepsilon_{kk} = \\varepsilon_{xx} + \\varepsilon_{yy} + \\varepsilon_{zz} = 0$。因此，所有正应力分量 $\\sigma_{xx}, \\sigma_{yy}, \\sigma_{zz}$ 也均为零，剪应力 $\\sigma_{xy}$ 也为零。唯一非零的应力分量是：\n$$\n\\sigma_{xz} = 2G\\varepsilon_{xz} = G\\left(\\frac{\\partial \\omega}{\\partial x} - \\alpha y\\right) \\\\\n\\sigma_{yz} = 2G\\varepsilon_{yz} = G\\left(\\frac{\\partial \\omega}{\\partial y} + \\alpha x\\right)\n$$\n其中 $G$ 是剪切模量。\n\n这些应力分量必须在无体力的情况下满足平衡方程 $\\frac{\\partial \\sigma_{ij}}{\\partial x_j} = 0$。前两个平衡方程（$x$ 和 $y$ 方向）恒满足，因为所有应力分量都与 $z$ 无关。第三个平衡方程（$z$ 方向）是：\n$$\n\\frac{\\partial \\sigma_{xz}}{\\partial x} + \\frac{\\partial \\sigma_{yz}}{\\partial y} + \\frac{\\partial \\sigma_{zz}}{\\partial z} = 0\n$$\n代入应力表达式：\n$$\n\\frac{\\partial}{\\partial x}\\left[G\\left(\\frac{\\partial \\omega}{\\partial x} - \\alpha y\\right)\\right] + \\frac{\\partial}{\\partial y}\\left[G\\left(\\frac{\\partial \\omega}{\\partial y} + \\alpha x\\right)\\right] = 0\n$$\n由于 $G$ 和 $\\alpha$ 是常数，这简化为：\n$$\nG\\left(\\frac{\\partial^2 \\omega}{\\partial x^2} - 0\\right) + G\\left(\\frac{\\partial^2 \\omega}{\\partial y^2} + 0\\right) = 0\n$$\n这就得到了翘曲函数在横截面域 $\\mathcal{D}$ 上的拉普拉斯方程：\n$$\n\\nabla^2 \\omega = \\frac{\\partial^2 \\omega}{\\partial x^2} + \\frac{\\partial^2 \\omega}{\\partial y^2} = 0 \\quad \\text{for } (x,y) \\in \\mathcal{D}\n$$\n\n边界条件是杆的侧向表面无面力。该表面上的面力矢量由 $\\boldsymbol{t} = \\boldsymbol{\\sigma} \\boldsymbol{n}$ 给出，其中 $\\boldsymbol{n}$ 是边界曲线 $\\partial\\mathcal{D}$ 的外法线单位向量。对于沿 $z$ 轴的面力分量，我们必须有 $t_z = 0$。\n$$\nt_z = \\sigma_{xz} n_x + \\sigma_{yz} n_y = 0\n$$\n对于半径为 $a$ 的圆形横截面，其边界是圆 $x^2 + y^2 = a^2$，外法线单位向量的分量为 $n_x = x/a$ 和 $n_y = y/a$。将此式和应力表达式代入边界条件，得到：\n$$\nG\\left(\\frac{\\partial \\omega}{\\partial x} - \\alpha y\\right)\\frac{x}{a} + G\\left(\\frac{\\partial \\omega}{\\partial y} + \\alpha x\\right)\\frac{y}{a} = 0\n$$\n$$\n\\left(\\frac{\\partial \\omega}{\\partial x}\\right)x - \\alpha yx + \\left(\\frac{\\partial \\omega}{\\partial y}\\right)y + \\alpha xy = 0\n$$\n$$\nx\\frac{\\partial \\omega}{\\partial x} + y\\frac{\\partial \\omega}{\\partial y} = 0\n$$\n这个边界条件可以用极坐标 $(r, \\theta)$ 表示为在边界 $r=a$ 上 $r\\frac{\\partial \\omega}{\\partial r} = 0$。由于 $r=a \\neq 0$，该条件简化为在 $r=a$ 时 $\\frac{\\partial \\omega}{\\partial r} = 0$。\n\n因此，关于 $\\omega$ 的控制边值问题是：\n偏微分方程(PDE): $\\nabla^2 \\omega = 0$ for $r < a$.\n边界条件(BC): $\\frac{\\partial \\omega}{\\partial r} = 0$ at $r=a$.\n\n为了推断 $\\omega$ 是否为零，我们对区域 $\\mathcal{D}$ 使用 Green 第一恒等式：\n$$\n\\iint_{\\mathcal{D}} (\\omega \\nabla^2 \\omega + |\\nabla \\omega|^2) \\,dA = \\oint_{\\partial\\mathcal{D}} \\omega \\frac{\\partial \\omega}{\\partial n} \\,ds\n$$\n在这里，$\\frac{\\partial \\omega}{\\partial n}$ 是法向导数，即 $\\frac{\\partial \\omega}{\\partial r}$。由于在 $\\mathcal{D}$ 中 $\\nabla^2 \\omega = 0$ 且在 $\\partial\\mathcal{D}$ 上 $\\frac{\\partial \\omega}{\\partial r} = 0$，该恒等式简化为：\n$$\n\\iint_{\\mathcal{D}} |\\nabla \\omega|^2 \\,dA = 0\n$$\n被积函数 $|\\nabla \\omega|^2 = (\\frac{\\partial \\omega}{\\partial x})^2 + (\\frac{\\partial \\omega}{\\partial y})^2$ 是非负的。要使其在区域上的积分为零，被积函数必须在整个区域内恒为零。因此，对于横截面中的所有 $(x,y)$，$\\nabla \\omega = 0$。这意味着 $\\omega(x,y)$ 必定是一个常数。常数翘曲代表沿 $z$ 轴的刚体平移，它不产生应力，并且可以不失一般性地设为零，正如问题陈述中所指定的。因此，对于圆形横截面：\n$$\n\\omega(x,y) = 0\n$$\n这表示圆形横截面在扭转作用下不发生翘曲。\n\n当 $\\omega=0$ 时，应力分量简化为：\n$$\n\\sigma_{xz} = -G \\alpha y \\\\\n\\sigma_{yz} = G \\alpha x\n$$\n横截面上的合扭矩 $T$ 是这些剪应力产生的力矩的积分：\n$$\nT = \\iint_{\\mathcal{D}} (x \\sigma_{yz} - y \\sigma_{xz}) \\,dA = \\iint_{\\mathcal{D}} (x(G \\alpha x) - y(-G \\alpha y)) \\,dA = G \\alpha \\iint_{\\mathcal{D}} (x^2 + y^2) \\,dA\n$$\n该积分是圆形横截面的极惯性矩 $J$。在极坐标中：\n$$\nJ = \\int_0^{2\\pi} \\int_0^a r^2 \\cdot r \\,dr \\,d\\theta = 2\\pi \\left[\\frac{r^4}{4}\\right]_0^a = \\frac{\\pi a^4}{2}\n$$\n因此，$T = G \\alpha J$，这将单位长度扭转角 $\\alpha$ 与所施加的扭矩 $T$ 联系起来：\n$$\n\\alpha = \\frac{T}{GJ} = \\frac{2T}{G\\pi a^4}\n$$\n为了求出剪应力分布，我们将应力表示为柱坐标。径向剪应力 $\\tau_{zr}$ 为：\n$$\n\\tau_{zr} = \\sigma_{xz} \\cos\\theta + \\sigma_{yz} \\sin\\theta = (-G \\alpha y) \\cos\\theta + (G \\alpha x) \\sin\\theta = -G \\alpha (r \\sin\\theta) \\cos\\theta + G \\alpha (r \\cos\\theta) \\sin\\theta = 0\n$$\n周向剪应力 $\\tau_{z\\theta}$ 为：\n$$\n\\tau_{z\\theta} = -\\sigma_{xz} \\sin\\theta + \\sigma_{yz} \\cos\\theta = -(-G \\alpha y) \\sin\\theta + (G \\alpha x) \\cos\\theta = G \\alpha (y \\sin\\theta + x \\cos\\theta)\n$$\n$$\n\\tau_{z\\theta} = G \\alpha (r \\sin^2\\theta + r \\cos^2\\theta) = G \\alpha r\n$$\n代入 $\\alpha$ 的表达式：\n$$\n\\tau_{z\\theta}(r) = G \\left(\\frac{T}{GJ}\\right) r = \\frac{T r}{J} = \\frac{T r}{\\frac{1}{2}\\pi a^4} = \\frac{2Tr}{\\pi a^4}\n$$\n最终结果是翘曲函数（为零）和作为径向坐标 $r$ 的函数的周向剪应力。\n\n解对 $(\\omega(x,y), \\tau_{z\\theta}(r))$ 为：\n第一个元素: $\\omega(x,y) = 0$。\n第二个元素: $\\tau_{z\\theta}(r) = \\frac{2Tr}{\\pi a^4}$。", "answer": "$$\n\\boxed{\n\\begin{pmatrix}\n0 & \\frac{2Tr}{\\pi a^{4}}\n\\end{pmatrix}\n}\n$$", "id": "2683235"}, {"introduction": "这个练习将引导您从求解具体载荷问题，转向分析弹性理论的一个更深层次的原理——圣维南原理。您将设计一个计算实验，以量化自平衡端部载荷所引起的应力在杆件内部的衰减规律。这个实践旨在连接抽象的理论推导与可观测的工程量，并展示如何通过特征值问题来预测衰减率 [@problem_id:2683210]。", "problem": "考虑一根长度为 $L$ 的直棱柱杆，其位于 $x$–$y$ 平面内的横截面 $\\Omega \\subset \\mathbb{R}^2$ 是单连通的，杆轴为 $z$ 轴。该杆由均匀、各向同性、线弹性材料制成，且不受体力作用。其基本载荷是一个恒定的端部扭矩，产生纯 Saint-Venant 扭转（无侧向面力），在此之上叠加一个仅作用于 $z = 0$ 端面上的局部端部面力扰动。该扰动是自平衡的（合力与合力矩均为零），且其侧向面力为零。目标是使用 Saint-Venant 半逆解法来量化此扰动随距离 $z$ 深入杆内而发生的衰减。\n\n从三维线弹性方程（无体力的平衡方程、线性运动学方程和胡克定律）以及针对棱柱杆的 Saint-Venant 半逆解法假设出发，证明任何自平衡的端部面力扰动都可以分解为像 $\\mathrm{e}^{-k z}$ 那样指数衰减的模态。证明容许的衰减率 $k$ 与横截面 $\\Omega$ 上的一个二维特征值问题相关联，该问题是针对标量拉普拉斯算子并带有齐次诺伊曼边界条件 (BC)。结论是，最慢的衰减由该问题的最小正特征值 $\\lambda_1$ 通过 $k_1 = \\sqrt{\\lambda_1}$ 决定，其中不包括刚体模态。解释在给定假设下，为什么基本扭转解不会改变叠加扰动的这些衰减率。\n\n设计一个计算实验，其中的可观测量是在距离 $z = 0$ 为 $z$ 的横截面上测得的扰动振幅。将可观测量振幅 $A(z)$ 定义为在位置 $z$ 的横截面上，扰动的剪切面力场在 $\\Omega$ 上的 $L^2$ 范数，并以其在 $z = 0$ 处的值进行归一化。在模态分解下，论证对于足够大的 $z$，振幅满足\n$$\nA(z) \\sim \\mathrm{e}^{-k_1 z},\n$$\n且在 $\\Omega$ 上积分的相应弹性应变能密度的标度关系为\n$$\n\\mathcal{E}(z) \\sim \\mathrm{e}^{-2 k_1 z}.\n$$\n因此，量化衰减率的两个直接可观测量是 $A(z)$ 和 $\\mathcal{E}(z)$，并且 $\\ln A(z)$ 相对于 $z$ 的斜率给出 $-k_1$。\n\n为了实现和可测试性，将 $\\Omega$ 限制为边长为 $a$ 和 $b$（单位：$\\mathrm{m}$）、与 $x$ 和 $y$ 轴对齐的矩形，并通过求解该矩形上诺伊曼拉普拉斯算子的最小正特征值来计算 $k_1$（您可以使用解析的变量分离法或您选择的数值方法）。然后，对于给定的距离 $z$（单位：$\\mathrm{m}$），预测可观测量\n$$\nA(z) = \\mathrm{e}^{-k_1 z}, \\quad \\mathcal{E}(z) = \\mathrm{e}^{-2 k_1 z}.\n$$\n所有距离必须以 $\\mathrm{m}$ 为单位处理，输出 $A(z)$ 和 $\\mathcal{E}(z)$ 是无量纲的。\n\n实现一个程序，对于每个测试用例 $(a,b,z)$，计算并返回序对 $[A(z), \\mathcal{E}(z)]$。\n\n测试套件：\n- 用例1（理想情况，中等尺寸）：$(a,b,z) = (\\,0.2\\,\\mathrm{m},\\,0.2\\,\\mathrm{m},\\,0.5\\,\\mathrm{m}\\,)$。\n- 用例2（横截面几何各向异性）：$(a,b,z) = (\\,0.4\\,\\mathrm{m},\\,0.2\\,\\mathrm{m},\\,0.5\\,\\mathrm{m}\\,)$。\n- 用例3（$b$ 方向细长，但深入杆内距离较长）：$(a,b,z) = (\\,1.0\\,\\mathrm{m},\\,0.1\\,\\mathrm{m},\\,1.0\\,\\mathrm{m}\\,)$。\n- 用例4（大截面，短距离）：$(a,b,z) = (\\,2.0\\,\\mathrm{m},\\,2.0\\,\\mathrm{m},\\,0.1\\,\\mathrm{m}\\,)$。\n\n您的程序应生成单行输出，其中包含一个用方括号括起来的逗号分隔列表形式的结果。每个测试用例的结果必须是 $[A(z),\\mathcal{E}(z)]$ 顺序的双元素子列表。该行中不得有任何空格。例如，输出格式必须如下所示\n$$\n[\\,[A_1,\\mathcal{E}_1],[A_2,\\mathcal{E}_2],[A_3,\\mathcal{E}_3],[A_4,\\mathcal{E}_4]\\,].\n$$", "solution": "所提出的问题是在线弹性力学框架内应用 Saint-Venant 原理于棱柱杆的一个标准练习。问题陈述的有效性得到确认，因为它是科学上成立、适定且客观的。我们将继续进行推导和后续计算。\n\n杆的力学行为由三维线弹性方程控制。在没有体力的情况下，应力张量 $\\boldsymbol{\\sigma}$ 的平衡方程为 $\\nabla \\cdot \\boldsymbol{\\sigma} = \\mathbf{0}$。材料是均匀和各向同性的，因此胡克定律通过 $\\boldsymbol{\\sigma} = \\lambda_L \\mathrm{tr}(\\boldsymbol{\\epsilon})\\mathbf{I} + 2\\mu\\boldsymbol{\\epsilon}$ 将应力与应变张量 $\\boldsymbol{\\epsilon}$ 联系起来，其中 $\\lambda_L$ 和 $\\mu$ 是拉梅参数。应变由位移场 $\\mathbf{u}$ 通过线性几何关系 $\\boldsymbol{\\epsilon} = \\frac{1}{2}(\\nabla \\mathbf{u} + (\\nabla \\mathbf{u})^T)$ 导出。\n\n该问题涉及一个叠加在纯扭转状态上的自平衡扰动。由于控制方程是线性的，叠加原理适用。基本扭转解和扰动解可以独立分析。扰动位移场 $\\mathbf{u}_p$ 必须满足控制方程，同时在杆的侧面上满足面力为零的条件，并在 $z=0$ 的端面上满足自平衡的面力分布。Saint-Venant 原理假定，这种局部的自平衡载荷所产生的效应会随着与施加点距离的增加而衰减。\n\n为将其形式化，我们寻找形式为 $\\mathbf{u}(\\mathbf{x}) = \\mathbf{v}(x,y) e^{-kz}$ 的扰动场解，这代表了一种沿杆轴（$z$轴）指数衰减的变形模态。将此拟设代入弹性力学的 Navier 方程 $\\mu \\nabla^2 \\mathbf{u} + (\\lambda_L + \\mu) \\nabla(\\nabla \\cdot \\mathbf{u}) = \\mathbf{0}$，会得到一个关于衰减率平方 $k^2$ 在横截面 $\\Omega$ 上的二维广义特征值问题。\n\n使用位移势（例如，Papkovich-Neuber 表示法）的完整推导表明，在适当条件下，寻找容许衰减率 $k$ 的问题可以简化为求解横截面 $\\Omega$ 上二维标量拉普拉斯算子的特征值问题。侧向表面上的零面力边界条件 $\\boldsymbol{\\sigma}\\mathbf{n} = \\mathbf{0}$（其中 $\\mathbf{n}$ 是 $x$-$y$ 平面内边界 $\\partial\\Omega$ 的法向量）转化为底层势函数的齐次诺伊曼边界条件。因此，我们必须求解以下特征值问题：\n$$\n-\\nabla^2 \\psi = \\lambda \\psi \\quad \\text{in } \\Omega\n$$\n$$\n\\frac{\\partial \\psi}{\\partial n} = 0 \\quad \\text{on } \\partial\\Omega\n$$\n其中 $\\nabla^2 = \\partial^2/\\partial x^2 + \\partial^2/\\partial y^2$。该问题产生一个非负特征值谱 $0 = \\lambda_0 < \\lambda_1 \\leq \\lambda_2 \\leq \\dots$。衰减率通过 $k_n = \\sqrt{\\lambda_n}$ 与这些特征值相关。\n\n特征值 $\\lambda_0=0$ 对应于一个常数特征函数，给出 $k_0=0$。这个零衰减率对应于非衰减解：四种刚体运动（三个平移和一个绕 $z$ 轴的转动）以及拉伸和弯曲这两种基本的 Saint-Venant 解。Saint-Venant 扭转解也是一个零能量模态，但通常分开处理。端部载荷扰动是自平衡的这一条件意味着其合力与合力矩为零。这个正交条件确保了端部载荷的特征函数展开式中不包含对应于 $\\lambda_0=0$ 的分量。\n\n因此，扰动解是具有正衰减率 $k_n = \\sqrt{\\lambda_n}$（$n \\ge 1$）的模态的叠加。对于离端面足够远的距离 $z$，具有最小正衰减率的模态将主导解的行为。这个最慢衰减率是 $k_1 = \\sqrt{\\lambda_1}$，其中 $\\lambda_1$ 是 $\\Omega$ 上诺伊曼-拉普拉斯算子的最小正特征值。\n\n可观测量 $A(z)$ 和 $\\mathcal{E}(z)$ 是基于扰动场定义的。$A(z)$ 是在 $z$ 处横截面上剪切面力 $(\\sigma_{xz}, \\sigma_{yz})$ 的归一化 $L^2$ 范数。对于大的 $z$，应力分量由第一模态主导，所以 $\\boldsymbol{\\sigma}_{\\text{pert}} \\sim e^{-k_1 z}$。$L^2$ 范数涉及 $\\sigma_{xz}^2 + \\sigma_{yz}^2 \\sim e^{-2k_1 z}$ 的积分。取平方根并归一化后，得到 $A(z) \\sim e^{-k_1 z}$。弹性应变能密度 $W = \\frac{1}{2}\\boldsymbol{\\sigma}:\\boldsymbol{\\epsilon}$ 涉及应力和应变分量的乘积，这两者都以 $e^{-k_1 z}$ 的形式衰减。因此，$W \\sim e^{-2k_1 z}$，其在横截面上的积分 $\\mathcal{E}(z)$ 也遵循此标度关系。问题陈述将 $A(z)$ 和 $\\mathcal{E}(z)$ 定义为极限形式 $A(z) = e^{-k_1 z}$ 和 $\\mathcal{E}(z) = e^{-2k_1 z}$，我们将使用它们进行计算。\n\n对于指定的矩形截面 $\\Omega = [0, a] \\times [0, b]$，该特征值问题可通过变量分离法求解。设 $\\psi(x,y) = X(x)Y(y)$。该边值问题分离为两个一维 Sturm-Liouville 问题：\n$X''(x) + \\lambda_x X(x) = 0$，边界条件为 $X'(0) = X'(a) = 0$。\n$Y''(y) + \\lambda_y Y(y) = 0$，边界条件为 $Y'(0) = Y'(b) = 0$。\n求解得到特征值 $\\lambda_{x,m} = (\\frac{m\\pi}{a})^2$，$m=0, 1, 2, \\dots$ 和 $\\lambda_{y,n} = (\\frac{n\\pi}{b})^2$，$n=0, 1, 2, \\dots$。二维问题的特征值是它们的和 $\\lambda_{m,n} = \\lambda_{x,m} + \\lambda_{y,n} = (\\frac{m\\pi}{a})^2 + (\\frac{n\\pi}{b})^2$。\n\n最小的特征值是 $\\lambda_{0,0} = 0$，它被排除。最小的正（非零）特征值 $\\lambda_1$ 是通过选择 $(m,n)$ 为 $(1,0)$ 或 $(0,1)$ 来找到的：\n$$\n\\lambda_1 = \\min(\\lambda_{1,0}, \\lambda_{0,1}) = \\min\\left(\\left(\\frac{\\pi}{a}\\right)^2, \\left(\\frac{\\pi}{b}\\right)^2\\right) = \\pi^2 \\min\\left(\\frac{1}{a^2}, \\frac{1}{b^2}\\right) = \\frac{\\pi^2}{(\\max(a,b))^2}\n$$\n因此，最慢的衰减率为：\n$$\nk_1 = \\sqrt{\\lambda_1} = \\frac{\\pi}{\\max(a,b)}\n$$\n这个结果在物理上是直观的：衰减的特征长度由横截面的最大尺寸决定。\n\n有了这个，我们就可以计算给定测试用例的可观测量。对于每个三元组 $(a,b,z)$，我们首先找到 $k_1 = \\pi/\\max(a,b)$，然后计算 $A(z) = e^{-k_1 z}$ 和 $\\mathcal{E}(z) = e^{-2k_1 z}$。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes the decay observables for self-equilibrated end perturbations\n    on a prismatic bar with a rectangular cross-section.\n    \"\"\"\n    # Define the test cases from the problem statement.\n    # Each case is a tuple (a, b, z) where a and b are the side lengths\n    # of the rectangular cross-section in meters, and z is the distance\n    # along the bar in meters.\n    test_cases = [\n        (0.2, 0.2, 0.5),  # Case 1\n        (0.4, 0.2, 0.5),  # Case 2\n        (1.0, 0.1, 1.0),  # Case 3\n        (2.0, 2.0, 0.1),  # Case 4\n    ]\n\n    results = []\n    for case in test_cases:\n        a, b, z = case\n\n        # The slowest decay rate k1 is determined by the largest dimension of the\n        # cross-section, according to the solution of the Neumann-Laplacian\n        # eigenvalue problem on a rectangle.\n        # k1 = sqrt(lambda1) where lambda1 = pi^2 / (max(a,b))^2.\n        # So, k1 = pi / max(a,b).\n        d_max = max(a, b)\n        k1 = np.pi / d_max\n\n        # The amplitude of the perturbation A(z) is assumed to decay as exp(-k1*z).\n        # This is the asymptotic behavior for large z, dominated by the slowest mode.\n        A_z = np.exp(-k1 * z)\n\n        # The integrated elastic energy density E(z) decays as exp(-2*k1*z) because\n        # energy density is quadratic in stress/strain fields, which themselves\n        # decay as exp(-k1*z).\n        E_z = np.exp(-2 * k1 * z)\n\n        results.append([A_z, E_z])\n\n    # Final print statement in the exact required format.\n    # The format is a single line: [[A_1,E_1],[A_2,E_2],[A_3,E_3],[A_4,E_4]]\n    # with no spaces.\n    output_str = f\"[{','.join([f'[{r[0]},{r[1]}]' for r in results])}]\"\n    print(output_str)\n\nsolve()\n```", "id": "2683210"}, {"introduction": "当解析方法难以处理复杂截面时，数值方法便成为不可或缺的工具。本练习介绍了一种基于普朗特应力函数的混合有限元法来求解任意截面的扭转问题。通过将扭矩和边界条件作为约束并引入拉格朗日乘子，您将构建并求解一个鞍点问题，这代表了计算固体力学中一种强大而通用的求解策略 [@problem_id:2683204]。", "problem": "考虑一根具有恒定截面 $\\Omega \\subset \\mathbb{R}^2$ 和剪切模量 $G$ 的直棱柱杆的圣维南扭转问题。在半逆解法中，引入 Prandtl 应力函数 $\\phi(x,y)$，使得剪应力为 $\\tau_{xz} = \\partial \\phi / \\partial y$ 和 $\\tau_{yz} = - \\partial \\phi / \\partial x$，单位长度扭转角为 $\\theta$。截面内的控制方程为泊松问题 $\\nabla^2 \\phi = - 2 G \\theta$ on $\\Omega$，同时侧表面无牵引力，这意味着 $\\phi$ 在边界 $\\Gamma = \\partial \\Omega$ 上的值为常数。绕纵轴的总扭矩 $T$ 满足 $T = 2 \\int_{\\Omega} \\phi \\, \\mathrm{d}A$。\n\n您的任务是设计并实现一种混合有限元法（在均匀矩形网格上使用双线性 $Q_1$ 单元），该方法能够：\n- 将 $\\lambda = 2 G \\theta$ 视为一个未知的拉格朗日乘子，用以强制泊松方程源项为常数，\n- 通过弱形式中的一个拉格朗日乘子来施加扭矩约束 $T = 2 \\int_{\\Omega} \\phi \\, \\mathrm{d}A$，\n- 对边界 $\\Gamma$ 上的 $\\phi$ 施加零均值条件（即 $\\int_{\\Gamma} \\phi \\, \\mathrm{d}s = 0$），以消除边界上加性常数的不确定性。\n\n从以下基本定律和核心定义开始：\n- Prandtl 应力函数的定义及其与剪应力的关系，其中平衡方程 $\\nabla \\cdot \\boldsymbol{\\tau} = \\boldsymbol{0}$ 简化为 $\\nabla^2 \\phi = - 2 G \\theta$。\n- 扭矩的定义 $T = \\int_{\\Omega} (x \\tau_{yz} - y \\tau_{xz}) \\, \\mathrm{d}A$ 以及在无牵引力边界条件下其可推导为 $T = 2 \\int_{\\Omega} \\phi \\, \\mathrm{d}A$。\n- 泊松方程的标准变分形式以及用于施加线性约束的拉格朗日乘子法。\n\n在 $H^1(\\Omega)$ 空间中使用双线性有限元，建立混合变分问题。组装全局对称鞍点系统，并求解 $\\phi$ 的离散节点值以及各乘子。从 $\\lambda = 2 G \\theta$ 中恢复单位长度扭转角 $\\theta$。在矩形 $\\Omega = (0,a) \\times (0,b)$ 上使用一个包含 $N_x \\times N_y$ 个单元的均匀网格。使用 $2\\times 2$ 高斯求积法进行单元刚度积分。对于扭矩和边界均值约束，您必须使用基函数的一致积分：\n- 对于域积分 $\\int_{\\Omega} N_i \\, \\mathrm{d}A$，通过将每个相邻单元贡献的 $\\text{面积}/4$ 累加到节点 $i$ 来进行组装，\n- 对于边界积分 $\\int_{\\Gamma} N_i \\, \\mathrm{d}s$，通过将连接到节点 $i$ 的每个相邻边界边贡献的 $\\text{边长}/2$ 累加来进行组装。\n\n将代数系统定义为未知向量为 $(\\boldsymbol{\\phi}, \\lambda, \\nu)$ 的分块形式，\n$$\n\\begin{bmatrix}\n\\mathbf{K} & -\\mathbf{f} & \\mathbf{b} \\\\\n-\\mathbf{f}^\\top & 0 & 0 \\\\\n\\mathbf{b}^\\top & 0 & 0\n\\end{bmatrix}\n\\begin{bmatrix}\n\\boldsymbol{\\phi} \\\\ \\lambda \\\\ \\nu\n\\end{bmatrix}\n=\n\\begin{bmatrix}\n\\mathbf{0} \\\\ -T/2 \\\\ 0\n\\end{bmatrix},\n$$\n其中 $\\mathbf{K}$ 是刚度矩阵，其元素为 $K_{ij} = \\int_{\\Omega} \\nabla N_i \\cdot \\nabla N_j \\, \\mathrm{d}A$；$\\mathbf{f}$ 是向量，其分量为 $f_i = \\int_{\\Omega} N_i \\, \\mathrm{d}A$；$\\mathbf{b}$ 是向量，其分量为 $b_i = \\int_{\\Gamma} N_i \\, \\mathrm{d}s$。求解后，计算单位长度扭转角 $\\theta = \\lambda / (2 G)$。同时计算恢复的扭矩 $T_{\\text{rec}} = 2 \\int_{\\Omega} \\phi \\, \\mathrm{d}A$ 并报告绝对误差 $\\lvert T_{\\text{rec}} - T \\rvert$。\n\n您的程序必须实现上述方法，并对以下测试套件进行评估。对于每种情况，单位长度扭转角以弧度/米为单位表示，扭矩误差以牛顿·米为单位表示：\n- 测试 1 (正常路径): $a = 1.0\\,\\text{m}$, $b = 1.0\\,\\text{m}$, $G = 26 \\times 10^9\\,\\text{Pa}$, $T = 1000\\,\\text{N}\\cdot\\text{m}$, $N_x = 16$, $N_y = 16$。\n- 测试 2 (各异向性/形状敏感性): $a = 2.0\\,\\text{m}$, $b = 0.5\\,\\text{m}$, $G = 79.3 \\times 10^9\\,\\text{Pa}$, $T = 500\\,\\text{N}\\cdot\\text{m}$, $N_x = 24$, $N_y = 12$。\n- 测试 3 (线性度检查): $a = 1.0\\,\\text{m}$, $b = 1.0\\,\\text{m}$, $G = 26 \\times 10^9\\,\\text{Pa}$, $T = 2000\\,\\text{N}\\cdot\\text{m}$, $N_x = 16$, $N_y = 16$。\n- 测试 4 (边界/边缘情况): $a = 1.0\\,\\text{m}$, $b = 1.0\\,\\text{m}$, $G = 26 \\times 10^9\\,\\text{Pa}$, $T = 0\\,\\text{N}\\cdot\\text{m}$, $N_x = 12$, $N_y = 12$。\n\n最终输出格式要求：您的程序应生成单行输出，其中包含一个用方括号括起来的逗号分隔列表。每个测试用例对应一个形式为 $[\\theta, \\text{torque\\_error}]$ 的子列表。例如，两个测试用例的有效输出应如 $[[\\theta_1,\\text{err}_1],[\\theta_2,\\text{err}_2]]$。报告的 $\\theta$ 以弧度/米为单位，$\\text{torque\\_error}$ 以牛顿·米为单位，两者均为浮点数。", "solution": "问题陈述经验证具有科学依据、适定、客观且完整。它为圣维南扭转问题描述了一种非标准但逻辑一致的混合有限元列式。我将开始进行详细解答。\n\n该问题要求通过求解 Prandtl 应力函数 $\\phi(x,y)$，来解决矩形域 $\\Omega = (0,a) \\times (0,b)$ 上的圣维南扭转问题。该列式是一种混合方法，其中应力函数 $\\phi$、常数源项 $\\lambda = 2G\\theta$ 以及一个常数诺伊曼边界值 $\\nu$ 均被视为未知量。这些未知量通过同时满足控制偏微分方程和两个积分约束来确定。\n\n与给定代数系统相对应的连续弱形式为：求解 $(\\phi, \\lambda, \\nu) \\in H^1(\\Omega) \\times \\mathbb{R} \\times \\mathbb{R}$，使得对于所有试探函数 $(v, \\mu, \\rho) \\in H^1(\\Omega) \\times \\mathbb{R} \\times \\mathbb{R}$ 成立：\n$$\n\\int_{\\Omega} \\nabla\\phi \\cdot \\nabla v \\, \\mathrm{d}A - \\lambda \\int_{\\Omega} v \\, \\mathrm{d}A + \\nu \\int_{\\Gamma} v \\, \\mathrm{d}s = 0\n$$\n$$\n- \\int_{\\Omega} \\phi \\, \\mathrm{d}A = -T/2\n$$\n$$\n\\int_{\\Gamma} \\phi \\, \\mathrm{d}s = 0\n$$\n第一个方程代表了具有诺伊曼边界条件 $\\partial\\phi/\\partial n = -\\nu$ 的泊松问题 $\\nabla^2 \\phi = -\\lambda$ 的弱形式。第二个方程施加了扭矩约束 $T = 2 \\int_{\\Omega} \\phi \\, \\mathrm{d}A$。第三个方程通过施加零均值条件，即 $\\int_{\\Gamma} \\phi \\, \\mathrm{d}s = 0$，来确定 $\\phi$ 边界值上的任意常数。\n\n区域 $\\Omega$ 被离散为由 $N_x \\times N_y$ 个矩形单元组成的均匀网格。应力函数 $\\phi$ 使用双线性 $Q_1$ 基函数 $N_i(x,y)$ 来近似：\n$$\n\\phi(x,y) \\approx \\phi_h(x,y) = \\sum_{i=1}^{N_{nodes}} \\phi_i N_i(x,y)\n$$\n其中 $\\phi_i$ 是应力函数的节点值，$N_{nodes} = (N_x+1)(N_y+1)$ 是网格中的节点总数。将此近似代入弱形式，并选择基函数 $N_i$ 作为试探函数，即可得到指定的矩阵系统。\n\n该代数系统的各组成部分按如下方式组装：\n\n1.  **刚度矩阵 $\\mathbf{K}$**：其元素 $K_{ij}$ 由 $K_{ij} = \\int_{\\Omega} \\nabla N_i \\cdot \\nabla N_j \\, \\mathrm{d}A$ 给出。全局矩阵 $\\mathbf{K}$ 通过对各单元刚度矩阵 $\\mathbf{K}^e$ 的贡献求和来组装。对于一个尺寸为 $h_x \\times h_y$ 的单元 $e$（其中 $h_x = a/N_x$，$h_y = b/N_y$），其局部元素 $K^e_{kl}$ 使用 $2 \\times 2$ 高斯求积法在参考单元 $[-1,1] \\times [-1,1]$ 上计算：\n    $$\n    K^e_{kl} = \\int_{e} \\nabla N_k \\cdot \\nabla N_l \\, \\mathrm{d}A = \\int_{-1}^{1}\\int_{-1}^{1} \\left( \\nabla_{\\boldsymbol{\\xi}} N_k(\\boldsymbol{\\xi}) \\right)^T \\mathbf{J}^{-T} \\mathbf{J}^{-1} \\left( \\nabla_{\\boldsymbol{\\xi}} N_l(\\boldsymbol{\\xi}) \\right) \\det(\\mathbf{J}) \\, \\mathrm{d}\\xi \\, \\mathrm{d}\\eta\n    $$\n    其中 $\\mathbf{J}$ 是从参考单元到物理单元的映射的雅可比矩阵。对于矩形单元，$\\det(\\mathbf{J}) = h_x h_y / 4$。\n\n2.  **质量向量 $\\mathbf{f}$**：其分量为 $f_i = \\int_{\\Omega} N_i \\, \\mathrm{d}A$。按照规定，该向量使用集中积分格式进行组装。对于每个节点 $i$，其分量 $f_i$ 是所有相邻单元贡献的总和。每个单元 $e$ 对其四个节点各贡献 $\\text{Area}(e)/4$。对于尺寸为 $h_x \\times h_y$ 的单元，该贡献为 $h_x h_y / 4$。\n\n3.  **边界质量向量 $\\mathbf{b}$**：其分量为 $b_i = \\int_{\\Gamma} N_i \\, \\mathrm{d}s$。该向量同样使用集中格式组装。仅当节点 $i$ 位于边界 $\\Gamma$ 上时，分量 $b_i$ 才为非零值。对于每个边界边，其长度的一半（$\\text{长度}/2$）将作为贡献累加到其两个端点节点对应的分量上。\n\n有了这些组件，即可按规定构建完整的鞍点线性系统：\n$$\n\\begin{bmatrix}\n\\mathbf{K} & -\\mathbf{f} & \\mathbf{b} \\\\\n-\\mathbf{f}^\\top & 0 & 0 \\\\\n\\mathbf{b}^\\top & 0 & 0\n\\end{bmatrix}\n\\begin{bmatrix}\n\\boldsymbol{\\phi} \\\\ \\lambda \\\\ \\nu\n\\end{bmatrix}\n=\n\\begin{bmatrix}\n\\mathbf{0} \\\\ -T/2 \\\\ 0\n\\end{bmatrix}\n$$\n其中 $\\boldsymbol{\\phi}$ 是应力函数的节点值向量，$\\lambda$ 和 $\\nu$ 是标量未知数。该系统的规模为 $(N_{nodes}+2) \\times (N_{nodes}+2)$。\n\n求解此系统得到未知向量 $(\\boldsymbol{\\phi}, \\lambda, \\nu)$ 后，即可恢复所需的物理量：\n- 单位长度扭转角由 $\\lambda$ 计算得出，即 $\\theta = \\lambda / (2G)$。\n- 恢复的扭矩根据计算出的应力函数场计算得出，即 $T_{\\text{rec}} = 2 \\int_{\\Omega} \\phi_h \\, \\mathrm{d}A = 2 \\sum_{i=1}^{N_{nodes}} \\phi_i f_i = 2 \\mathbf{f}^\\top \\boldsymbol{\\phi}$。\n- 扭矩的绝对误差则为 $\\Delta T = \\lvert T_{\\text{rec}} - T \\rvert$。\n\n实现过程将首先定义一个函数，用于为给定的一组参数 $(a, b, G, T, N_x, N_y)$ 组装并求解该系统，然后将此函数应用于每个测试用例。", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Main function to solve the Saint-Venant torsion problem for a series of test cases\n    using a mixed finite element method as specified.\n    \"\"\"\n\n    test_cases = [\n        # Test 1 (happy path)\n        {'a': 1.0, 'b': 1.0, 'G': 26e9, 'T': 1000.0, 'Nx': 16, 'Ny': 16},\n        # Test 2 (anisotropy/shape sensitivity)\n        {'a': 2.0, 'b': 0.5, 'G': 79.3e9, 'T': 500.0, 'Nx': 24, 'Ny': 12},\n        # Test 3 (linearity check)\n        {'a': 1.0, 'b': 1.0, 'G': 26e9, 'T': 2000.0, 'Nx': 16, 'Ny': 16},\n        # Test 4 (boundary/edge case)\n        {'a': 1.0, 'b': 1.0, 'G': 26e9, 'T': 0.0, 'Nx': 12, 'Ny': 12},\n    ]\n\n    results = []\n    for case in test_cases:\n        theta, torque_error = fem_torsion_solver(**case)\n        results.append(f\"[{theta},{torque_error}]\")\n    \n    # Format and print the final output as a single string.\n    print(f\"[{','.join(results)}]\")\n\ndef fem_torsion_solver(a, b, G, T, Nx, Ny):\n    \"\"\"\n    Assembles and solves the mixed finite element system for the torsion problem.\n\n    Args:\n        a (float): Width of the rectangular cross-section.\n        b (float): Height of the rectangular cross-section.\n        G (float): Shear modulus.\n        T (float): Applied torque.\n        Nx (int): Number of elements in the x-direction.\n        Ny (int): Number of elements in the y-direction.\n\n    Returns:\n        tuple: A tuple containing the calculated twist per unit length (theta)\n               and the absolute torque error.\n    \"\"\"\n    Nx_p1 = Nx + 1\n    Ny_p1 = Ny + 1\n    N_nodes = Nx_p1 * Ny_p1\n    N_sys = N_nodes + 2\n\n    hx = a / Nx\n    hy = b / Ny\n    \n    # Initialize global matrix and vectors\n    K = np.zeros((N_nodes, N_nodes))\n    f_vec = np.zeros(N_nodes)\n    b_vec = np.zeros(N_nodes)\n\n    # Gaussian quadrature points and weights for 2x2 quadrature\n    gp = 1.0 / np.sqrt(3.0)\n    gauss_points = [(-gp, -gp), (gp, -gp), (gp, gp), (-gp, gp)]\n    gauss_weights = [1.0, 1.0, 1.0, 1.0]\n\n    # Pre-compute derivatives of shape functions at Gauss points\n    # N_i(xi, eta) = 0.25 * (1 + xi_i*xi) * (1 + eta_i*eta)\n    xi_nodes = [-1, 1, 1, -1]\n    eta_nodes = [-1, -1, 1, 1]\n    \n    B_hat = np.zeros((len(gauss_points), 2, 4)) # B_hat[gp_idx,\n    for i in range(4): # Loop over shape functions\n        for q, (xi, eta) in enumerate(gauss_points):\n            # d_N_i/d_xi = 0.25 * xi_i * (1 + eta_i*eta)\n            B_hat[q, 0, i] = 0.25 * xi_nodes[i] * (1 + eta_nodes[i] * eta)\n            # d_N_i/d_eta = 0.25 * eta_i * (1 + xi_i*xi)\n            B_hat[q, 1, i] = 0.25 * eta_nodes[i] * (1 + xi_nodes[i] * xi)\n\n    # Jacobian and its determinant for a rectangular element\n    J = np.array([[hx / 2.0, 0], [0, hy / 2.0]])\n    det_J = hx * hy / 4.0\n    J_inv = np.linalg.inv(J)\n\n    # Loop over elements to assemble K and f_vec\n    elem_area = hx * hy\n    node_mass_contrib = elem_area / 4.0\n\n    for ey in range(Ny):\n        for ex in range(Nx):\n            # Global node indices for the current element\n            n_glob_idx = [\n                ey * Nx_p1 + ex,          # bottom-left\n                ey * Nx_p1 + ex + 1,        # bottom-right\n                (ey + 1) * Nx_p1 + ex + 1,  # top-right\n                (ey + 1) * Nx_p1 + ex       # top-left\n            ]\n            \n            # Assemble element stiffness matrix Ke\n            Ke = np.zeros((4, 4))\n            for q in range(len(gauss_points)):\n                B_mat = J_inv @ B_hat[q]\n                Ke += (B_mat.T @ B_mat) * gauss_weights[q] * det_J\n            \n            # Add Ke to global K and assemble f_vec\n            for i in range(4):\n                f_vec[n_glob_idx[i]] += node_mass_contrib\n                for j in range(4):\n                    K[n_glob_idx[i], n_glob_idx[j]] += Ke[i, j]\n\n    # Assemble boundary vector b_vec\n    # Horizontal edges (bottom and top)\n    for i in range(Nx):\n        # Bottom edge\n        b_vec[i] += hx / 2.0\n        b_vec[i + 1] += hx / 2.0\n        # Top edge\n        b_vec[Ny * Nx_p1 + i] += hx / 2.0\n        b_vec[Ny * Nx_p1 + i + 1] += hx / 2.0\n    \n    # Vertical edges (left and right)\n    for j in range(Ny):\n        # Left edge\n        b_vec[j * Nx_p1] += hy / 2.0\n        b_vec[(j + 1) * Nx_p1] += hy / 2.0\n        # Right edge\n        b_vec[j * Nx_p1 + Nx] += hy / 2.0\n        b_vec[(j + 1) * Nx_p1 + Nx] += hy / 2.0\n\n    # Construct the full saddle-point system matrix A and RHS vector B\n    A = np.zeros((N_sys, N_sys))\n    B = np.zeros(N_sys)\n\n    A[0:N_nodes, 0:N_nodes] = K\n    A[0:N_nodes, N_nodes] = -f_vec\n    A[N_nodes, 0:N_nodes] = -f_vec\n    A[0:N_nodes, N_nodes + 1] = b_vec\n    A[N_nodes + 1, 0:N_nodes] = b_vec\n\n    B[N_nodes] = -T / 2.0\n    \n    # Solve the system\n    if T == 0:\n        # For T=0, the solution is trivial to avoid potential numerical instability\n        # in the solver for a zero RHS, although a robust solver should handle it.\n        phi_vec = np.zeros(N_nodes)\n        lambda_sol = 0.0\n    else:\n        try:\n            X = np.linalg.solve(A, B)\n            phi_vec = X[0:N_nodes]\n            lambda_sol = X[N_nodes]\n        except np.linalg.LinAlgError:\n            # Fallback to a least-squares solver for better stability with saddle-point problems\n            # although direct solver should work for this type of problem.\n            X, _, _, _ = np.linalg.lstsq(A, B, rcond=None)\n            phi_vec = X[0:N_nodes]\n            lambda_sol = X[N_nodes]\n\n    # Post-processing\n    theta = lambda_sol / (2.0 * G)\n    T_rec = 2.0 * np.dot(f_vec, phi_vec)\n    torque_error = abs(T_rec - T)\n    \n    return theta, torque_error\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "2683204"}]}