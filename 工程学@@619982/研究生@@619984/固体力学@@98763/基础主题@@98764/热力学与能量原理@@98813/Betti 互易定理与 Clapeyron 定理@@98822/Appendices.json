{"hands_on_practices": [{"introduction": "贝蒂倒易定理的一个强大之处在于，它允许我们通过巧妙地选择一个其解已知或易于求得的辅助加载状态，来求解未知位移。这个练习将该定理应用于一根非均匀杆，展示其在超出简单均匀情况下的实用性 [@problem_id:2618422]。通过这个实践，你将巩固在贝蒂定理的原生适用领域——线弹性系统中应用该定理的技能。", "problem": "一根细长、等截面、线弹性杆占据一维域 $x \\in [0,L]$。轴向位移为 $u(x)$，轴向力为 $N(x)$，杨氏模量为 $E$，横截面积为 $A$。除在位于 $x=a$ 处传感器周围的对称凹口邻域内，这些量均为常数，在该邻域内，局部轴向刚度降低。具体来说，在区间 $x \\in [a-c,\\,a+c]$ 内，有效乘积为 $E A \\to \\eta E A$，其中 $0<\\eta<1$；而在该区间外，刚度为 $E A$。假设 $0<c<\\min\\{a,\\,L-a\\}$，以确保凹口完全位于杆的内部。杆的左端被夹紧，$u(0)=0$，右端无牵引力，$N(L)=0$。在整个区间 $[0,L]$ 上，杆承受一个沿 $+x$ 方向的均匀轴向体力密度 $b_0$（单位长度上的力）。没有施加其他外力。\n\n位于 $x=a$ 处的位移传感器记录了轴向位移 $u(a)$。要求您利用贝蒂（Betti）互易定理来确定 $u(a)$，其中辅助状态为同一带凹口杆在 $x=a$ 处沿 $+x$ 方向施加单位轴向点力时的响应。请从一维线弹性理论和平衡的基本陈述（包括定义 $N(x)=E A(x)\\,u'(x)$ 和 $N'(x) + b(x) = 0$）出发，并使用克拉佩龙（Clapeyron）总应变能定理来证明贝蒂等式所需的互易性。在不引用预先制表的影响函数的情况下，推导辅助位移场 $u^{(2)}(x)$，并评估贝蒂关系式以提取真实载荷下的 $u(a)$。\n\n请用 $L$、$a$、$c$、$\\eta$、$E$、$A$ 和 $b_0$ 表示您的最终答案，形式为单个闭式解析表达式。位移以米为单位表示。不要代入数值。", "solution": "如题所述，该问题在一维线弹性理论框架内是一个适定的探究。它是自洽的、一致的，并且有科学依据。它不违反任何基本原理，并包含了获得唯一解所需的所有信息。因此，将提供一个解答。\n\n该问题要求使用贝蒂互易定理求解非均匀杆在体力作用下 $x=a$ 点的位移。这需要为同一弹性体定义两种载荷和响应的状态。\n\n首先，按照要求，使用克拉佩龙定理建立贝蒂定理的理论基础。考虑施加于同一线弹性体上的两个独立载荷系统，用上标 $(1)$ 和 $(2)$ 表示。该物体由其刚度分布 $K(x) = E A(x)$ 定义。每个载荷系统都包含体力 $b(x)$ 和边界牵引力，从而产生位移场 $u(x)$、应变场 $\\epsilon(x) = u'(x)$ 和轴力场 $N(x) = K(x)\\epsilon(x)$。\n\n叠加状态 $(1+2)$ 的总应变能为 $U_{1+2} = \\frac{1}{2}\\int_0^L N^{(1+2)}\\epsilon^{(1+2)} dx$。根据线性性质，$N^{(1+2)} = N^{(1)} + N^{(2)}$ 且 $\\epsilon^{(1+2)} = \\epsilon^{(1)} + \\epsilon^{(2)}$。\n展开能量表达式可得：\n$$U_{1+2} = \\frac{1}{2}\\int_0^L (N^{(1)} + N^{(2)})(\\epsilon^{(1)} + \\epsilon^{(2)}) dx = U_1 + U_2 + \\int_0^L N^{(1)}\\epsilon^{(2)} dx$$\n其中 $U_1 = \\frac{1}{2}\\int_0^L N^{(1)}\\epsilon^{(1)} dx$ 和 $U_2 = \\frac{1}{2}\\int_0^L N^{(2)}\\epsilon^{(2)} dx$ 分别是单个状态的应变能。相互作用能项为 $U_{12} = \\int_0^L N^{(1)}\\epsilon^{(2)} dx$。因为本构关系是线性的，$N^{(1)} = K(x)\\epsilon^{(1)}$，相互作用能可以写成 $\\int_0^L K(x)\\epsilon^{(1)}\\epsilon^{(2)} dx$。该形式的对称性意味着 $\\int_0^L N^{(1)}\\epsilon^{(2)} dx = \\int_0^L N^{(2)}\\epsilon^{(1)} dx$。\n\n外力所做的功为 $W_{ext}$。对于叠加状态，$W_{ext}^{(1+2)} = W_{ext}^{(1)} + W_{ext}^{(2)} + W_{12} + W_{21}$，其中 $W_{12}$ 是状态 $(1)$ 的力在状态 $(2)$ 的位移上所做的功，$W_{21}$ 是状态 $(2)$ 的力在状态 $(1)$ 的位移上所做的功。\n克拉佩龙定理指出 $W_{ext} = 2U$。将此应用于状态 $(1)$、$(2)$ 和 $(1+2)$：\n$W_{ext}^{(1)} = 2U_1$，$W_{ext}^{(2)} = 2U_2$ 和 $W_{ext}^{(1+2)} = 2U_{1+2}$。\n将这些代入展开的功表达式：\n$$2U_1 + 2U_2 + W_{12} + W_{21} = 2(U_1 + U_2 + \\int_0^L N^{(1)}\\epsilon^{(2)} dx)$$\n这可以简化为 $W_{12} + W_{21} = 2 \\int_0^L N^{(1)}\\epsilon^{(2)} dx$。\n虚功原理指出，外力功等于内力功（应变能变化）。因此，$W_{12} = \\int_0^L N^{(1)}\\epsilon^{(2)} dx$。\n代入此结果可得 $W_{12} + W_{21} = 2 W_{12}$，从而导出贝蒂互易定理：$W_{12} = W_{21}$。\n\n我们为该问题定义两种状态：\n**状态1（真实状态）：**\n- 载荷：均匀体力 $b^{(1)}(x) = b_0$。\n- 边界条件：$u^{(1)}(0) = 0$，$N^{(1)}(L) = 0$。\n- 产生的场：$u^{(1)}(x)$，$N^{(1)}(x)$。待求量为 $u^{(1)}(a)$。\n\n**状态2（辅助状态）：**\n- 载荷：位于 $x=a$ 的单位点力，表示为体力 $b^{(2)}(x) = \\delta(x-a)$，其中 $\\delta$ 是狄拉克（Dirac）δ函数。\n- 边界条件：$u^{(2)}(0) = 0$，$N^{(2)}(L) = 0$。\n- 产生的场：$u^{(2)}(x)$，$N^{(2)}(x)$。\n\n功的表达式为：\n$W_{12} = \\int_0^L b^{(1)}(x) u^{(2)}(x) dx + [N^{(1)}(x) u^{(2)}(x)]_0^L$\n$W_{21} = \\int_0^L b^{(2)}(x) u^{(1)}(x) dx + [N^{(2)}(x) u^{(1)}(x)]_0^L$\n\n利用指定的条件计算这些项：\n对于 $W_{12}$：$[N^{(1)}(x) u^{(2)}(x)]_0^L = N^{(1)}(L)u^{(2)}(L) - N^{(1)}(0)u^{(2)}(0) = (0)u^{(2)}(L) - N^{(1)}(0)(0) = 0$。\n因此，$W_{12} = \\int_0^L b_0 u^{(2)}(x) dx = b_0 \\int_0^L u^{(2)}(x) dx$。\n\n对于 $W_{21}$：$\\int_0^L b^{(2)}(x) u^{(1)}(x) dx = \\int_0^L \\delta(x-a) u^{(1)}(x) dx = u^{(1)}(a)$。\n边界项为 $[N^{(2)}(x) u^{(1)}(x)]_0^L = N^{(2)}(L)u^{(1)}(L) - N^{(2)}(0)u^{(1)}(0) = (0)u^{(1)}(L) - N^{(2)}(0)(0) = 0$。\n因此，$W_{21} = u^{(1)}(a)$。\n\n令 $W_{12} = W_{21}$，得到核心关系式：\n$$u^{(1)}(a) = b_0 \\int_0^L u^{(2)}(x) dx$$\n\n问题现在简化为求解辅助位移场 $u^{(2)}(x)$ 并在全域上进行积分。\n对于状态2，轴力 $N^{(2)}(x)$ 的平衡方程为 $N^{(2)'}(x) + b^{(2)}(x) = 0$，即 $N^{(2)'}(x) = -\\delta(x-a)$。\n从 $x$ 到 $L$ 积分：$\\int_x^L N^{(2)'}(\\xi) d\\xi = -\\int_x^L \\delta(\\xi-a) d\\xi$。\n当 $x < a < L$ 时，$N^{(2)}(L) - N^{(2)}(x) = -1$；当 $a < x < L$ 时，为 $0$。\n由于 $N^{(2)}(L)=0$，我们得到当 $x<a$ 时，$N^{(2)}(x) = 1$；当 $x>a$ 时，$N^{(2)}(x)=0$。\n\n位移 $u^{(2)}(x)$ 通过对带有边界条件 $u^{(2)}(0)=0$ 的应变 $u^{(2)'}(x) = N^{(2)}(x)/K(x)$ 进行积分得到。刚度 $K(x)$ 是分段的：\n$$K(x) = \\begin{cases} EA & 0 \\le x < a-c \\\\ \\eta EA & a-c \\le x < a+c \\\\ EA & a+c \\le x \\le L \\end{cases}$$\n我们分段积分 $u^{(2)'}(x)$：\n- 对于 $0 \\le x < a-c$：$u^{(2)'}(x) = \\frac{1}{EA}$。$u^{(2)}(x) = \\frac{x}{EA}$。\n- 对于 $a-c \\le x < a$：$u^{(2)'}(x) = \\frac{1}{\\eta EA}$。$u^{(2)}(x) = u^{(2)}(a-c) + \\int_{a-c}^x \\frac{d\\xi}{\\eta EA} = \\frac{a-c}{EA} + \\frac{x-(a-c)}{\\eta EA}$。\n- 对于 $a \\le x \\le L$：$u^{(2)'}(x) = \\frac{0}{K(x)} = 0$。当 $x \\ge a$ 时，$u^{(2)}(x)$ 是一个常数，其值为 $u^{(2)}(a)$。\n$u^{(2)}(a) = u^{(2)}_{x \\to a^-} = \\frac{a-c}{EA} + \\frac{a-(a-c)}{\\eta EA} = \\frac{1}{EA}\\left(a-c + \\frac{c}{\\eta}\\right)$。因此，当 $x \\ge a$ 时，$u^{(2)}(x) = \\frac{1}{EA}\\left(a-c+\\frac{c}{\\eta}\\right)$。\n\n所需的积分 $I = \\int_0^L u^{(2)}(x) dx$ 通过叠加法计算。令 $u^{(2)}(x) = u^{(2)}_{unif}(x) + \\Delta u^{(2)}(x)$，其中 $u^{(2)}_{unif}(x)$ 是均匀杆（$\\eta=1, c=0$）的解，而 $\\Delta u^{(2)}(x)$ 是由凹口引起的附加位移。\n对于均匀杆，$u^{(2)}_{unif}(x) = \\frac{1}{EA}\\min(x,a)$。积分为：\n$I_{unif} = \\int_0^L u^{(2)}_{unif}(x) dx = \\int_0^a \\frac{x}{EA} dx + \\int_a^L \\frac{a}{EA} dx = \\frac{1}{EA}\\left[\\frac{a^2}{2} + a(L-a) \\right] = \\frac{a(2L-a)}{2EA}$。\n\n附加位移 $\\Delta u^{(2)}(x)$ 仅在 $x > a-c$ 时非零：\n- 对于 $a-c \\le x < a$：$\\Delta u^{(2)}(x) = u^{(2)}(x) - u^{(2)}_{unif}(x) = \\frac{1}{EA}\\left(a-c+\\frac{x-a+c}{\\eta} - x\\right) = \\frac{x-a+c}{EA}\\left(\\frac{1}{\\eta}-1\\right)$。\n- 对于 $x \\ge a$：$\\Delta u^{(2)}(x) = u^{(2)}(x) - u^{(2)}_{unif}(x) = \\frac{1}{EA}\\left(a-c+\\frac{c}{\\eta} - a\\right) = \\frac{c}{EA}\\left(\\frac{1}{\\eta}-1\\right)$。\n\n附加位移的积分为：\n$\\Delta I = \\int_{a-c}^a \\frac{x-a+c}{EA}\\left(\\frac{1}{\\eta}-1\\right) dx + \\int_a^L \\frac{c}{EA}\\left(\\frac{1}{\\eta}-1\\right) dx$\n$\\Delta I = \\frac{1}{EA}\\left(\\frac{1}{\\eta}-1\\right) \\left[ \\int_{a-c}^a (x-a+c) dx + \\int_a^L c \\,dx \\right]$\n$\\Delta I = \\frac{1}{EA}\\left(\\frac{1}{\\eta}-1\\right) \\left[ \\left[\\frac{(x-a+c)^2}{2}\\right]_{a-c}^a + [cx]_a^L \\right]$\n$\\Delta I = \\frac{1}{EA}\\left(\\frac{1}{\\eta}-1\\right) \\left[ \\frac{c^2}{2} + c(L-a) \\right] = \\frac{c}{EA}\\left(\\frac{1}{\\eta}-1\\right)\\left(L-a+\\frac{c}{2}\\right)$。\n\n总积分为 $I = I_{unif} + \\Delta I$：\n$$I = \\frac{1}{EA}\\left[ \\frac{a(2L-a)}{2} + c\\left(\\frac{1}{\\eta}-1\\right)\\left(L-a+\\frac{c}{2}\\right) \\right]$$\n\n最后，传感器处的位移为 $u^{(1)}(a) = u(a) = b_0 I$。该表达式的单位在量纲上是正确的长度单位，如果所有输入量均采用一致的国际单位制（SI）单位，则该位移将以米为单位表示。\n$$u(a) = \\frac{b_0}{EA}\\left[ \\frac{a(2L-a)}{2} + c\\left(\\frac{1}{\\eta}-1\\right)\\left(L-a+\\frac{c}{2}\\right) \\right]$$", "answer": "$$\\boxed{\\frac{b_0}{EA} \\left[ \\frac{a(2L-a)}{2} + c \\left( \\frac{1}{\\eta} - 1 \\right) \\left( L - a + \\frac{c}{2} \\right) \\right]}$$", "id": "2618422"}, {"introduction": "从线弹性系统过渡到非线弹性系统，我们需要更深入地审视能量原理。虽然我们熟知的克拉佩龙定理形式（$U = \\frac{1}{2} \\mathbf{P} \\cdot \\mathbf{u}$）是线性的直接结果，但倒易性的根源实则深植于能量守恒。本练习将探究一个超弹性系统，以揭示其全局功-能关系如何变化，并阐明为何增量形式的倒易性（麦克斯韦-贝蒂倒易定理）仍然成立，这与应变能势的存在密切相关 [@problem_id:2618447]。", "problem": "考虑一个一维、两自由度的弹性系统，其广义位移为$u_1$和$u_2$。每个节点通过一个刚度为$k$的线性弹簧接地，并且两个节点通过一个超弹性耦合元件连接，该元件的储存能量取决于相对位移$d = u_1 - u_2$，其表达式为$W_c(d) = \\dfrac{c}{4}\\,d^4$，其中$c>0$是一个材料参数。因此，总的内应变能为\n$$U_{\\text{int}}(u_1,u_2) = \\dfrac{k}{2}\\,u_1^2 + \\dfrac{k}{2}\\,u_2^2 + \\dfrac{c}{4}\\,(u_1 - u_2)^4.$$\n两个点荷载$P_1$和$P_2$分别作用在两个节点上，方向分别为$u_1$和$u_2$的正方向。荷载在等温、速率无关的条件下，通过以下两个连续的阶段准静态地施加：\n- 阶段$1$：$P_1$从$0$增加到$5$，同时$P_2=0$。\n- 阶段$2$：$P_2$从$0$增加到$1$，同时$P_1$保持在$5$不变。\n假设在一致的单位制（牛顿和米）下，$k=2$和$c=1$，并假设在整个过程中应变足够小，使得上述超弹性储存能表达式有效，但允许大位移，因此不采用几何线性化。\n\n任务：\n- 从总势能驻值原理和保守功的定义出发，推导阶段$2$结束时的平衡条件，并求解最终位移$u_1$和$u_2$。\n- 仅使用第一性原理（功能平衡和力-位移关系的积分），计算沿指定顺序路径施加的荷载所做的总外功$W_{\\text{seq}}$以及最终平衡状态下的内应变能$U_{\\text{int}}$。\n- 考虑诊断量\n$$U_C = \\dfrac{1}{2}\\big(P_1 u_1 + P_2 u_2\\big) \\quad \\text{在最终平衡荷载和位移下计算。}$$\n计算最终平衡状态下的标量差值$\\Delta = U_C - U_{\\text{int}}$，并结合克拉佩龙定理在此非线性情况下的适用性来解释其符号。\n- 在最终平衡构型附近，通过对内力关于$(u_1,u_2)$求导，构建对称的切线刚度矩阵，并用它来评估由单位探测试荷载产生的两个增量位移：节点$1$处单位荷载引起的$\\delta u^{(1)}_2$，以及节点$2$处单位荷载引起的$\\delta u^{(2)}_1$。讨论对于这些小扰动，麦克斯韦-贝蒂互易定理是否在此超弹性系统中成立。\n\n你最终报告的量必须是单个标量$\\Delta$，单位为焦耳。将你的答案四舍五入到$4$位有效数字，并以$\\mathrm{J}$表示。", "solution": "对问题陈述进行验证。\n\n**第1步：提取已知信息**\n- 系统：一维、两自由度弹性系统。\n- 广义位移：$u_1$, $u_2$。\n- 内应变能：$U_{\\text{int}}(u_1,u_2) = \\dfrac{k}{2}\\,u_1^2 + \\dfrac{k}{2}\\,u_2^2 + \\dfrac{c}{4}\\,(u_1 - u_2)^4$。\n- 施加荷载：$P_1$, $P_2$。\n- 加载路径：\n  - 阶段$1$：$P_1$从$0$增加到$5$，同时$P_2=0$。\n  - 阶段$2$：$P_2$从$0$增加到$1$，同时$P_1$固定为$5$。\n- 常数：在一致的国际单位制（N, m, J）下，$k=2$, $c=1$。\n- 假设：过程是准静态、等温且速率无关的。材料是超弹性的。允许大位移，但应变很小。\n- 任务：\n  1. 求最终平衡位移$(u_1, u_2)$。\n  2. 计算总外功$W_{\\text{seq}}$和最终内能$U_{\\text{int}}$。\n  3. 计算并解释$\\Delta = U_C - U_{\\text{int}}$，其中$U_C = \\dfrac{1}{2}(P_1 u_1 + P_2 u_2)$。\n  4. 分析最终平衡状态附近的增量互易性（麦克斯韦-贝蒂）。\n- 要求输出：标量值$\\Delta$。\n\n**第2步：使用提取的已知信息进行验证**\n- **科学基础**：该问题很好地基于连续介质力学和变分原理。它描述了一个具有非线性势能的超弹性系统，这是高等力学中的一个标准课题。能量函数在物理上是合理的，代表了与地相连的线性弹簧和一个非线性刚化耦合。\n- **适定性**：问题是适定的。所提供的信息足以确定一个唯一的平衡状态。势能函数的结构确保了稳定解的存在。\n- **客观性**：问题以精确、客观和定量的术语陈述。没有主观或含糊的陈述。\n\n**第3步：结论与行动**\n该问题在科学上是合理的、自洽的且适定的。这是一个有效的非线性固体力学问题。我将继续进行求解。\n\n**平衡状态的推导**\n系统的总势能$\\Pi$是内应变能$U_{\\text{int}}$和外荷载势$W_{\\text{ext}} = - (P_1 u_1 + P_2 u_2)$之和。\n$$ \\Pi(u_1, u_2) = U_{\\text{int}} - W_{\\text{ext}} = \\dfrac{k}{2}\\,u_1^2 + \\dfrac{k}{2}\\,u_2^2 + \\dfrac{c}{4}\\,(u_1 - u_2)^4 - P_1 u_1 - P_2 u_2 $$\n总势能驻值原理指出，为达到平衡，$\\Pi$的一阶变分必须为零，这意味着它对广义坐标的偏导数必须消失。\n$$ \\dfrac{\\partial \\Pi}{\\partial u_1} = k u_1 + c(u_1 - u_2)^3 - P_1 = 0 $$\n$$ \\dfrac{\\partial \\Pi}{\\partial u_2} = k u_2 - c(u_1 - u_2)^3 - P_2 = 0 $$\n这些是平衡方程，可以写成外加力的表达式：\n$$ P_1 = k u_1 + c(u_1 - u_2)^3 $$\n$$ P_2 = k u_2 - c(u_1 - u_2)^3 $$\n在阶段$2$结束时，荷载为$P_1=5$和$P_2=1$。常数为$k=2$和$c=1$。最终位移$(u_1, u_2)$的方程组为：\n$$ 5 = 2 u_1 + (u_1 - u_2)^3 $$\n$$ 1 = 2 u_2 - (u_1 - u_2)^3 $$\n这个非线性系统可以高效求解。将两个方程相加，消去三次项：\n$$ 5 + 1 = (2 u_1 + (u_1 - u_2)^3) + (2 u_2 - (u_1 - u_2)^3) $$\n$$ 6 = 2 u_1 + 2 u_2 \\implies u_1 + u_2 = 3 $$\n令相对位移为$d = u_1 - u_2$。从第一个原始方程中减去第二个：\n$$ 5 - 1 = (2 u_1 + d^3) - (2 u_2 - d^3) $$\n$$ 4 = 2(u_1 - u_2) + 2d^3 \\implies 4 = 2d + 2d^3 $$\n两边除以$2$得到一个关于$d$的三次方程：\n$$ d^3 + d - 2 = 0 $$\n通过观察可知，$d=1$是一个解：$(1)^3 + (1) - 2 = 0$。函数$f(d)=d^3+d-2$的导数为$f'(d) = 3d^2+1$，对于所有实数$d$都严格为正。因此，$f(d)$是一个严格递增函数，$d=1$是唯一的实数解。\n我们现在得到一个关于$u_1$和$u_2$的线性方程组：\n$$ u_1 + u_2 = 3 $$\n$$ u_1 - u_2 = 1 $$\n将这两个方程相加得到$2u_1 = 4$，所以$u_1 = 2$。\n将$u_1=2$代入第一个方程得到$2 + u_2 = 3$，所以$u_2 = 1$。\n最终平衡位移是$u_1 = 2\\,\\text{m}$和$u_2 = 1\\,\\text{m}$。\n\n**功和能量的计算**\n在最终平衡状态$(u_1, u_2) = (2, 1)$下的内应变能$U_{\\text{int}}$为：\n$$ U_{\\text{int}} = \\dfrac{2}{2}(2)^2 + \\dfrac{2}{2}(1)^2 + \\dfrac{1}{4}(2 - 1)^4 = 4 + 1 + \\dfrac{1}{4} = 5.25\\,\\text{J} $$\n该系统是超弹性的，意味着内力是保守的，可以从势能$U_{\\text{int}}$导出。对于保守系统中的准静态过程，外力所做的功$W_{\\text{ext}}$等于内应变能的变化。\n$$ W_{\\text{seq}} = \\int_{\\text{path}} \\mathbf{P} \\cdot d\\mathbf{u} = \\int_{\\text{path}} (\\nabla U_{\\text{int}}) \\cdot d\\mathbf{u} = U_{\\text{int, final}} - U_{\\text{int, initial}} $$\n由于系统从$u_1=u_2=0$且$U_{\\text{int, initial}}=0$的未变形状态开始，因此所做的总外功等于最终的内能，而与加载路径无关。\n$$ W_{\\text{seq}} = U_{\\text{int}} = 5.25\\,\\text{J} $$\n在这种超弹性情况下，顺序加载路径的规定与总功的计算无关，这是区别于非保守系统的一个关键特征。\n\n**克拉佩龙定理和量$\\Delta$**\n我们现在计算诊断量$U_C$：\n$$ U_C = \\dfrac{1}{2}(P_1 u_1 + P_2 u_2) = \\dfrac{1}{2}((5)(2) + (1)(1)) = \\dfrac{1}{2}(10 + 1) = \\dfrac{11}{2} = 5.5\\,\\text{J} $$\n差值$\\Delta$为：\n$$ \\Delta = U_C - U_{\\text{int}} = 5.5 - 5.25 = 0.25\\,\\text{J} $$\n为了解释这个结果，我们注意到克拉佩龙定理，$W_{ext} = U_{int} = \\frac{1}{2} \\sum P_i u_i$，仅对线性弹性系统有效。由于势能中的四次项，所考虑的系统是非线性的。$\\Delta$的非零值量化了克拉佩龙定理的失效程度。\n\n更深入的分析揭示了这种差异的来源。从平衡方程，我们可以写出：\n$$ P_1 u_1 + P_2 u_2 = (k u_1 + c d^3)u_1 + (k u_2 - c d^3)u_2 = k u_1^2 + k u_2^2 + c d^3(u_1 - u_2) = k u_1^2 + k u_2^2 + c d^4 $$\n其中$d = u_1 - u_2$。\n然后，$U_C$可以表示为位移的函数：\n$$ U_C = \\dfrac{1}{2}(k u_1^2 + k u_2^2 + c d^4) = \\dfrac{k}{2}u_1^2 + \\dfrac{k}{2}u_2^2 + \\dfrac{c}{2}d^4 $$\n因此，差值$\\Delta$为：\n$$ \\Delta = U_C - U_{\\text{int}} = \\left(\\dfrac{k}{2}u_1^2 + \\dfrac{k}{2}u_2^2 + \\dfrac{c}{2}d^4\\right) - \\left(\\dfrac{k}{2}u_1^2 + \\dfrac{k}{2}u_2^2 + \\dfrac{c}{4}d^4\\right) = \\dfrac{c}{4}d^4 $$\n这证实了我们的数值计算，因为$\\Delta = \\dfrac{1}{4}(1)^4 = 0.25$。符号为正，因为$c>0$。这表明对于这个“刚化”系统（其中力随位移的增加超过线性比例），实际储存的能量$U_{\\text{int}}$小于线性公式预测的值$U_C$。对于刚化系统，$U_C$高估了储存的能量。\n\n**麦克斯韦-贝蒂互易定理**\n对于最终平衡状态附近的小扰动$(\\delta u_1, \\delta u_2)$，增量力通过切线刚度矩阵$\\mathbf{K}_T$相关联：\n$$ \\mathbf{K}_T = \\begin{pmatrix} \\frac{\\partial^2 U_{\\text{int}}}{\\partial u_1^2} & \\frac{\\partial^2 U_{\\text{int}}}{\\partial u_1 \\partial u_2} \\\\ \\frac{\\partial^2 U_{\\text{int}}}{\\partial u_2 \\partial u_1} & \\frac{\\partial^2 U_{\\text{int}}}{\\partial u_2^2} \\end{pmatrix} = \\begin{pmatrix} k + 3c(u_1-u_2)^2 & -3c(u_1-u_2)^2 \\\\ -3c(u_1-u_2)^2 & k + 3c(u_1-u_2)^2 \\end{pmatrix} $$\n由于$U_{\\text{int}}$是一个光滑函数，微分的顺序无关紧要，因此$\\mathbf{K}_T$是对称的。这种对称性是麦克斯韦-贝蒂互易定理增量形式的数学基础。在最终状态下（$k=2$, $c=1$, $d=1$），矩阵为：\n$$ \\mathbf{K}_T = \\begin{pmatrix} 5 & -3 \\\\ -3 & 5 \\end{pmatrix} $$\n柔度矩阵为$\\mathbf{C}_T = \\mathbf{K}_T^{-1} = \\frac{1}{16}\\begin{pmatrix} 5 & 3 \\\\ 3 & 5 \\end{pmatrix}$。\n由于节点$1$处增量单位荷载引起的节点$2$处的位移是$\\delta u^{(1)}_2 = C_{T,21} = 3/16$。\n由于节点$2$处增量单位荷载引起的节点$1$处的位移是$\\delta u^{(2)}_1 = C_{T,12} = 3/16$。\n由于$\\delta u^{(1)}_2 = \\delta u^{(2)}_1$，麦克斯韦-贝蒂互易定理对于小扰动成立。这说明，虽然全局力-位移关系是非线性的，但围绕平衡点的局部行为是线性的和互易的，因为系统是超弹性的。\n\n要求的最终量是标量差$\\Delta$。\n$$ \\Delta = 0.25\\,\\text{J} $$\n按要求四舍五入到$4$位有效数字，该值为$0.2500\\,\\text{J}$。", "answer": "$$ \\boxed{0.2500} $$", "id": "2618447"}, {"introduction": "现在我们来探讨贝蒂定理的一个基本限制：非弹性材料行为。具有路径依赖性和能量耗散（如塑性）的材料，违反了存在唯一、守恒的应变能函数这一核心假设。这个计算实践将通过模拟一个弹塑性杆的行为来生动地展示这一失效过程，证明在这种情况下，倒易功能项不再相等，从而深化你对该定理适用范围的理解 [@problem_id:2618402]。", "problem": "考虑一个一维小应变轴向加载杆，离散为 $2$ 个线性轴向单元和 $3$ 个节点，节点索引为 $i \\in \\{0,1,2\\}$。节点 $i=0$ 是固定的（本质边界条件 $u_0=0$），节点 $i=1,2$ 是自由的。设单元 $e=1$ 连接节点 $(0,1)$，单元 $e=2$ 连接节点 $(1,2)$。该杆具有分段恒定的单元属性：长度 $L_e$、横截面积 $A_e$、杨氏模量 $E_e$、初始屈服应力 $\\sigma_{y0,e}$ 和线性各向同性硬化模量 $H_e$。假设小应变、准静态演化，以及一个具有线性各向同性硬化的率无关双线性弹塑性本构法则。单元 $e$ 中的应变为 $\\varepsilon_e = (u_j - u_i)/L_e$，其中 $(i,j)$ 是单元 $e$ 的端节点。柯西应力 $\\sigma_e$ 遵循加法分解 $\\varepsilon_e = \\varepsilon_{e}^e + \\varepsilon_{e}^p$，其中线性弹性关系为 $\\sigma_e = E_e \\varepsilon_{e}^e$，标准一维 $J_2$ 型屈服条件为 $f_e = |\\sigma_e| - (\\sigma_{y0,e} + H_e \\alpha_e) \\le 0$，其中 $\\alpha_e$ 是累积塑性应变。在每个载荷增量步，施加内部和外部节点力的全局平衡（虚功原理），并对局部本构方程执行一致的返回映射积分，以更新 $(\\sigma_e,\\varepsilon_{e}^p,\\alpha_e)$，同时满足 Karush–Kuhn–Tucker 条件。在每个载荷步，使用带有单元算法切线的牛顿型迭代法求解非线性平衡方程。\n\nBetti 互易定理指出，对于一个具有对称刚度的线性弹性系统，施加在同一结构上的任意两个静态容许载荷 $\\mathbf{P}^{(1)}$ 和 $\\mathbf{P}^{(2)}$，等式 $\\mathbf{P}^{(1)} \\cdot \\mathbf{u}^{(2)} = \\mathbf{P}^{(2)} \\cdot \\mathbf{u}^{(1)}$ 成立，其中 $\\mathbf{u}^{(k)}$ 是由 $\\mathbf{P}^{(k)}$ 引起的位移场。在具有路径依赖内变量的弹塑性系统中，互易性可能失效。\n\n设计并实现一个计算测试，对于施加在同一个初始杆上的两个独立载荷工况（历史），计算最终位移向量 $\\mathbf{u}^{(1)}$ 和 $\\mathbf{u}^{(2)}$，并评估每个载荷工况最终步骤的标量值 $\\mathbf{P}^{(1)} \\cdot \\mathbf{u}^{(2)}$ 和 $\\mathbf{P}^{(2)} \\cdot \\mathbf{u}^{(1)}$。此处，点积是对自由节点自由度（$i=1,2$）进行的。报告每个测试实例的差值 $\\Delta = \\mathbf{P}^{(1)} \\cdot \\mathbf{u}^{(2)} - \\mathbf{P}^{(2)} \\cdot \\mathbf{u}^{(1)}$，以量化互易性的失效程度。\n\n使用的基本原理：\n- 准静态形式下的线性动量平衡（在每一步，内部节点力之和等于外部节点力）。\n- 轴向应变协调性：$\\varepsilon_e = (u_j - u_i)/L_e$。\n- 弹性范围内的线性弹性关系：$\\sigma_e = E_e (\\varepsilon_e - \\varepsilon_{e}^p)$，其中 $\\varepsilon_{e}^p$ 是塑性应变。\n- 具有线性各向同性硬化的标准一维弹塑性，包括屈服条件 $f_e \\le 0$、一致性条件和每个增量步的返回映射。\n- 用于组装内力和算法切线刚度的虚功原理：单元内部节点力等于 $\\int_0^{L_e} \\mathbf{B}_e^\\top \\sigma_e A_e \\, dx$，其中 $\\mathbf{B}_e = [-1/L_e, 1/L_e]$，单元切线刚度等于 $\\int_0^{L_e} \\mathbf{B}_e^\\top E_{t,e} A_e \\mathbf{B}_e \\, dx$，其中 $E_{t,e}$ 是由局部本构更新给出的算法切线模量。\n\n要求的单位和输出：\n- 所有输入均采用国际单位制（SI）：长度单位为 $\\mathrm{m}$，面积单位为 $\\mathrm{m}^2$，力单位为 $\\mathrm{N}$，应力单位为 $\\mathrm{Pa}$，模量单位为 $\\mathrm{Pa}$。\n- 位移必须以 $\\mathrm{m}$ 为单位计算。\n- 报告的差值 $\\Delta$ 必须以 $\\mathrm{N}\\cdot\\mathrm{m}$（焦耳）为单位表示。\n- 你的程序必须打印一行，其中包含下面测试套件的三个 $\\Delta$ 值列表，四舍五入到六位小数，格式必须为：$[\\Delta_1,\\Delta_2,\\Delta_3]$。\n\n测试套件：\n- 所有测试的几何和材料属性：\n  - 单元 $e=1$：$L_1 = 0.6\\,\\mathrm{m}$, $A_1 = 1.0\\times 10^{-3}\\,\\mathrm{m}^2$, $E_1 = 210\\times 10^{9}\\,\\mathrm{Pa}$, $\\sigma_{y0,1} = 300\\times 10^{6}\\,\\mathrm{Pa}$, $H_1 = 1.0\\times 10^{9}\\,\\mathrm{Pa}$。\n  - 单元 $e=2$：$L_2 = 0.4\\,\\mathrm{m}$, $A_2 = 0.5\\times 10^{-3}\\,\\mathrm{m}^2$, $E_2 = 210\\times 10^{9}\\,\\mathrm{Pa}$, $\\sigma_{y0,2} = 250\\times 10^{6}\\,\\mathrm{Pa}$, $H_2 = 1.0\\times 10^{9}\\,\\mathrm{Pa}$。\n- 外部节点力按步指定为向量 $\\mathbf{P} = [P_0, P_1, P_2]$（单位为 $\\mathrm{N}$），其中 $P_0$ 对应于节点 $i=0$（此处恒为 $0$），$P_1$ 对应于节点 $i=1$，$P_2$ 对应于节点 $i=2$。每个测试包含两个施加在初始杆上的独立载荷工况：\n  - 测试 $1$（主要为弹性卸载-再加载）：\n    - 载荷工况 $(1)$：仅在节点 $i=2$ 上的力历史，步骤为 $\\mathbf{P}^{(1)}(t)$：\n      - $[0, 0, 0] \\to [0, 0, 10{,}000] \\to [0, 0, 30{,}000] \\to [0, 0, 40{,}000] \\to [0, 0, 20{,}000] \\to [0, 0, 30{,}000]$。\n    - 载荷工况 $(2)$：仅在节点 $i=1$ 上的力历史，步骤为 $\\mathbf{P}^{(2)}(t)$：\n      - $[0, 0, 0] \\to [0, 5{,}000, 0] \\to [0, 15{,}000, 0] \\to [0, 20{,}000, 0] \\to [0, 10{,}000, 0] \\to [0, 15{,}000, 0]$。\n  - 测试 $2$（单调塑性）：\n    - 载荷工况 $(1)$：仅节点 $i=2$，\n      - $[0, 0, 0] \\to [0, 0, 80{,}000] \\to [0, 0, 140{,}000] \\to [0, 0, 160{,}000]$。\n    - 载荷工况 $(2)$：仅节点 $i=1$，\n      - $[0, 0, 0] \\to [0, 150{,}000, 0] \\to [0, 300{,}000, 0] \\to [0, 320{,}000, 0]$。\n  - 测试 $3$（弹塑性卸载-再加载）：\n    - 载荷工况 $(1)$：仅节点 $i=2$，\n      - $[0, 0, 0] \\to [0, 0, 100{,}000] \\to [0, 0, 180{,}000] \\to [0, 0, 120{,}000] \\to [0, 0, 150{,}000]$。\n    - 载荷工况 $(2)$：仅节点 $i=1$，\n      - $[0, 0, 0] \\to [0, 120{,}000, 0] \\to [0, 220{,}000, 0] \\to [0, 80{,}000, 0] \\to [0, 180{,}000, 0]$。\n\n对每个测试：\n- 从初始状态（$\\varepsilon_{e}^p = 0$, $\\alpha_e = 0$, $\\mathbf{u} = \\mathbf{0}$）开始，独立地对每个载荷工况进行其完整步骤历史的积分，在每一步使用基于局部本构更新的单元算法切线的牛顿型方法来强制平衡。\n- 在每个载荷工况 $k \\in \\{1,2\\}$ 的最终步骤，记录自由节点位移向量 $\\mathbf{u}_\\mathrm{free}^{(k)} = [u_1^{(k)}, u_2^{(k)}]$ 和相应的外部节点力向量 $\\mathbf{P}_\\mathrm{free}^{(k)} = [P_1^{(k)}, P_2^{(k)}]$。\n- 计算 $\\Delta = \\mathbf{P}^{(1)}_\\mathrm{free} \\cdot \\mathbf{u}^{(2)}_\\mathrm{free} - \\mathbf{P}^{(2)}_\\mathrm{free} \\cdot \\mathbf{u}^{(1)}_\\mathrm{free}$，单位为 $\\mathrm{N}\\cdot\\mathrm{m}$，四舍五入到六位小数。\n\n你的程序应生成单行输出，其中包含一个逗号分隔的列表，用方括号括起来（例如：$[x_1,x_2,x_3]$），其中每个 $x_i$ 是测试 $i$ 的 $\\Delta$ 值（单位为 $\\mathrm{N}\\cdot\\mathrm{m}$），四舍五入到六位小数。", "solution": "所提出的问题是计算固体力学领域中一个适定且标准的练习，特别是在非线性有限元分析领域。它要求实现一个数值程序来模拟一维杆在轴向载荷下的行为，并考虑具有线性各向同性硬化的弹塑性形式的材料非线性。最终目标是计算研究 Betti 互易定理在存在路径依赖的塑性变形时的失效情况。该问题是有效的，并将按所述方式解决。\n\n解决方案是基于有限元法（FEM）构建的，用于解决一个准静态、小应变弹塑性问题。核心组成部分是平衡方程的建立、通过返回映射算法进行的本构积分，以及用于在每个载荷增量求解所得非线性系统的 Newton-Raphson 方案。\n\n**1. 系统离散化与运动学**\n\n系统由三个节点（索引为 $i=0,1,2$）和两个单元组成。节点 $0$ 是固定的，因此其位移 $u_0 = 0$。自由度（DOFs）是节点 $1$ 和 $2$ 的位移，表示为向量 $\\mathbf{u} = [u_1, u_2]^T$。\n\n每个单元 $e$ 的轴向应变 $\\varepsilon_e$ 由节点位移定义。对于这个双单元系统：\n- 单元 $1$（节点 $0, 1$）：$\\varepsilon_1 = (u_1 - u_0) / L_1 = u_1 / L_1$\n- 单元 $2$（节点 $1, 2$）：$\\varepsilon_2 = (u_2 - u_1) / L_2$\n\n**2. 虚功原理与平衡**\n\n系统的静态平衡由虚功原理控制，该原理指出，对于任何运动学上容许的虚位移场 $\\delta\\mathbf{u} = [\\delta u_1, \\delta u_2]^T$，由应力所做的内功必须等于外加载荷所做的外功。\n\n虚内功为：\n$$ \\delta W_{\\text{int}} = \\sum_{e=1}^{2} \\int_{V_e} \\sigma_e \\delta\\varepsilon_e \\, dV_e = (A_1 \\sigma_1) \\delta u_1 + (A_2 \\sigma_2)(\\delta u_2 - \\delta u_1) $$\n按虚位移重新排列各项：\n$$ \\delta W_{\\text{int}} = (A_1 \\sigma_1 - A_2 \\sigma_2) \\delta u_1 + (A_2 \\sigma_2) \\delta u_2 $$\n虚外功为 $\\delta W_{\\text{ext}} = \\mathbf{P}^T \\delta\\mathbf{u} = P_1 \\delta u_1 + P_2 \\delta u_2$，其中 $\\mathbf{P} = [P_1, P_2]^T$ 是作用在自由节点上的外力向量。\n\n对于任意的 $\\delta\\mathbf{u}$，令 $\\delta W_{\\text{int}} = \\delta W_{\\text{ext}}$，可得到平衡方程组 $\\mathbf{F}_{\\text{int}}(\\mathbf{u}) = \\mathbf{P}$，其中内力向量 $\\mathbf{F}_{\\text{int}}$ 为：\n$$ \\mathbf{F}_{\\text{int}}(\\mathbf{u}) = \\begin{pmatrix} A_1 \\sigma_1 - A_2 \\sigma_2 \\\\ A_2 \\sigma_2 \\end{pmatrix} $$\n应力 $\\sigma_1$ 和 $\\sigma_2$ 本身通过材料的本构关系是位移 $u_1$ 和 $u_2$ 的非线性函数。\n\n**3. 本构模型：带返回映射的弹塑性**\n\n材料遵循一个率无关、带线性各向同性硬化的一维双线性弹塑性模型。在从时间 $t_n$ 到 $t_{n+1}$ 的每个载荷步中，必须对本构方程进行积分，以求得与给定总应变 $\\varepsilon_{n+1}$ 对应的应力 $\\sigma_{n+1}$。这是通过使用标准的隐式弹性预测/塑性修正方案（返回映射）来实现的。对于每个单元 $e$：\n\n- **状态变量**：前一个收敛步 $n$ 的状态是已知的：应力 $\\sigma_n$、塑性应变 $\\varepsilon^p_n$ 和累积塑性应变 $\\alpha_n$。\n- **弹性预测**：假设整个应变增量是弹性的，计算一个试探应力 $\\sigma^{\\text{trial}}$：\n$$ \\sigma^{\\text{trial}} = E (\\varepsilon_{n+1} - \\varepsilon^p_n) $$\n- **屈服条件检查**：对照屈服准则检查试探状态：\n$$ f^{\\text{trial}} = |\\sigma^{\\text{trial}}| - (\\sigma_{y0} + H \\alpha_n) $$\n- **本构更新**：\n    - 如果 $f^{\\text{trial}} \\le 0$，则该步是弹性的。状态更新为：\n    $$ \\sigma_{n+1} = \\sigma^{\\text{trial}}, \\quad \\varepsilon^p_{n+1} = \\varepsilon^p_n, \\quad \\alpha_{n+1} = \\alpha_n $$\n    材料响应由杨氏模量控制，因此算法切线模量为 $E_t = E$。\n    - 如果 $f^{\\text{trial}} > 0$，则发生塑性流动。状态必须被“返回”到屈服面上。通过强制执行一致性条件 $f_{n+1}=0$ 来找到塑性一致性乘子 $\\Delta\\gamma$：\n    $$ \\Delta\\gamma = \\frac{f^{\\text{trial}}}{E + H} $$\n    然后更新（修正）状态变量：\n    $$ \\alpha_{n+1} = \\alpha_n + \\Delta\\gamma $$\n    $$ \\varepsilon^p_{n+1} = \\varepsilon^p_n + \\Delta\\gamma \\cdot \\text{sign}(\\sigma^{\\text{trial}}) $$\n    $$ \\sigma_{n+1} = E (\\varepsilon_{n+1} - \\varepsilon^p_{n+1}) = \\sigma^{\\text{trial}} - E \\cdot \\Delta\\gamma \\cdot \\text{sign}(\\sigma^{\\text{trial}}) $$\n    此塑性步的一致算法切线模量为：\n    $$ E_t = \\frac{d\\sigma_{n+1}}{d\\varepsilon_{n+1}} = \\frac{EH}{E+H} $$\n\n**4. 非线性求解器：Newton-Raphson 方法**\n\n在每个载荷步 $t_{n+1}$，目标是找到满足非线性平衡方程的位移向量 $\\mathbf{u}_{n+1}$：\n$$ \\mathbf{R}(\\mathbf{u}_{n+1}) = \\mathbf{P}_{n+1} - \\mathbf{F}_{\\text{int}}(\\mathbf{u}_{n+1}) = \\mathbf{0} $$\n这通过使用 Newton-Raphson 方法进行迭代求解。从一个初始猜测 $\\mathbf{u}^{(0)} = \\mathbf{u}_n$ 开始，在每次迭代 $k$ 时将系统线性化：\n$$ \\mathbf{K}_T^{(k)} \\Delta\\mathbf{u}^{(k)} = \\mathbf{R}^{(k)} $$\n其中 $\\mathbf{R}^{(k)} = \\mathbf{P}_{n+1} - \\mathbf{F}_{\\text{int}}(\\mathbf{u}^{(k)})$ 是残余力向量，$\\mathbf{K}_T^{(k)}$ 是迭代 $k$ 时的全局切线刚度矩阵。位移更新为：$\\mathbf{u}^{(k+1)} = \\mathbf{u}^{(k)} + \\Delta\\mathbf{u}^{(k)}$。重复此过程，直到残余力的范数低于指定的容差。\n\n切线刚度矩阵是内力向量关于位移的导数，$\\mathbf{K}_T = \\partial\\mathbf{F}_{\\text{int}}/\\partial\\mathbf{u}$。对于我们的系统：\n$$ \\mathbf{K}_T = \\begin{pmatrix} A_1 \\frac{\\partial\\sigma_1}{\\partial u_1} - A_2 \\frac{\\partial\\sigma_2}{\\partial u_1} & A_1 \\frac{\\partial\\sigma_1}{\\partial u_2} - A_2 \\frac{\\partial\\sigma_2}{\\partial u_2} \\\\ A_2 \\frac{\\partial\\sigma_2}{\\partial u_1} & A_2 \\frac{\\partial\\sigma_2}{\\partial u_2} \\end{pmatrix} $$\n使用链式法则和单元运动学：\n$\\frac{\\partial\\sigma_1}{\\partial u_1} = \\frac{d\\sigma_1}{d\\varepsilon_1} \\frac{\\partial\\varepsilon_1}{\\partial u_1} = E_{t,1} \\frac{1}{L_1}$, $\\frac{\\partial\\sigma_1}{\\partial u_2} = 0$。\n$\\frac{\\partial\\sigma_2}{\\partial u_1} = \\frac{d\\sigma_2}{d\\varepsilon_2} \\frac{\\partial\\varepsilon_2}{\\partial u_1} = E_{t,2} \\frac{-1}{L_2}$, $\\frac{\\partial\\sigma_2}{\\partial u_2} = \\frac{d\\sigma_2}{d\\varepsilon_2} \\frac{\\partial\\varepsilon_2}{\\partial u_2} = E_{t,2} \\frac{1}{L_2}$。\n代入这些可得到全局切线刚度矩阵：\n$$ \\mathbf{K}_T = \\begin{pmatrix} \\frac{A_1 E_{t,1}}{L_1} + \\frac{A_2 E_{t,2}}{L_2} & -\\frac{A_2 E_{t,2}}{L_2} \\\\ -\\frac{A_2 E_{t,2}}{L_2} & \\frac{A_2 E_{t,2}}{L_2} \\end{pmatrix} $$\n其中 $E_{t,e}$ 是单元 $e$ 的算法切线模量，由当前迭代的本构更新确定。\n\n**5. 互易性计算测试**\n\n程序实现了所描述的求解器。对于三个测试中的每一个，它都执行两次独立的模拟，每个载荷工况一次，从一个初始（无应力，无变形）状态开始。在每个载荷历史结束时，记录最终的外力向量 $\\mathbf{P}_{\\text{free}}^{(k)}$ 和最终的位移向量 $\\mathbf{u}_{\\text{free}}^{(k)}$（对于 $k=1,2$）。然后按规定计算量 $\\Delta$：\n$$ \\Delta = \\mathbf{P}_{\\text{free}}^{(1)} \\cdot \\mathbf{u}_{\\text{free}}^{(2)} - \\mathbf{P}_{\\text{free}}^{(2)} \\cdot \\mathbf{u}_{\\text{free}}^{(1)} $$\n对于测试1，两个加载路径完全保持在弹性域内，系统表现为线性。刚度矩阵是对称且恒定的，这是 Betti 定理成立的条件。因此，在数值精度范围内，$\\Delta$ 预计为零。对于测试2和测试3，至少在一条加载路径中发生塑性变形。这种路径依赖的耗散行为破坏了 Betti 定理的假设，因此预计会得到一个非零的 $\\Delta$，用以量化互易性的失效程度。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the computational mechanics problem to test Betti's reciprocal theorem\n    for an elastoplastic bar.\n    \"\"\"\n\n    class Element:\n        \"\"\"Represents a 1D axial element with bilinear elastoplastic material behavior.\"\"\"\n        def __init__(self, L, A, E, sig_y0, H):\n            self.L = L\n            self.A = A\n            self.E = E\n            self.sig_y0 = sig_y0\n            self.H = H\n            self.reset()\n\n        def reset(self):\n            \"\"\"Resets the element to a virgin state.\"\"\"\n            self.sigma = 0.0      # Stress\n            self.epsilon_p = 0.0  # Plastic strain\n            self.alpha = 0.0      # Accumulated plastic strain\n\n    def run_load_case(elements, load_history, max_iter=30, tol=1e-8):\n        \"\"\"\n        Simulates the response of the bar for a given load history using a\n        Newton-Raphson solver.\n        \n        Args:\n            elements (list): A list containing the two Element objects.\n            load_history (list): A sequence of external force vectors [P1, P2].\n            max_iter (int): Maximum number of Newton-Raphson iterations per step.\n            tol (float): Convergence tolerance for the residual norm.\n\n        Returns:\n            numpy.ndarray: The final displacement vector [u1, u2].\n        \"\"\"\n        el1, el2 = elements\n        \n        # Reset elements to virgin state before starting the simulation\n        el1.reset()\n        el2.reset()\n        \n        u_free = np.zeros(2) # [u1, u2]\n\n        for p_target in load_history[1:]: # Start from the first non-zero load step\n            P_ext = np.array(p_target, dtype=float)\n            \n            # Newton-Raphson iterations to find equilibrium at P_ext\n            u_iter = u_free.copy()\n            \n            # State at the beginning of the load increment (converged state from previous step)\n            initial_states = {\n                'el1': {'ep': el1.epsilon_p, 'alpha': el1.alpha},\n                'el2': {'ep': el2.epsilon_p, 'alpha': el2.alpha}\n            }\n\n            for i in range(max_iter):\n                # 1. Calculate trial state based on current displacement guess u_iter\n                eps1_k = u_iter[0] / el1.L\n                eps2_k = (u_iter[1] - u_iter[0]) / el2.L\n\n                # --- Element 1 properties at iteration k ---\n                sig1_trial = el1.E * (eps1_k - initial_states['el1']['ep'])\n                f1_trial = abs(sig1_trial) - (el1.sig_y0 + el1.H * initial_states['el1']['alpha'])\n                \n                if f1_trial <= 0.0: # Elastic\n                    sig1_k = sig1_trial\n                    Et1_k = el1.E\n                else: # Plastic\n                    d_gamma1 = f1_trial / (el1.E + el1.H)\n                    sig1_k = sig1_trial - el1.E * d_gamma1 * np.sign(sig1_trial)\n                    Et1_k = (el1.E * el1.H) / (el1.E + el1.H)\n\n                # --- Element 2 properties at iteration k ---\n                sig2_trial = el2.E * (eps2_k - initial_states['el2']['ep'])\n                f2_trial = abs(sig2_trial) - (el2.sig_y0 + el2.H * initial_states['el2']['alpha'])\n\n                if f2_trial <= 0.0: # Elastic\n                    sig2_k = sig2_trial\n                    Et2_k = el2.E\n                else: # Plastic\n                    d_gamma2 = f2_trial / (el2.E + el2.H)\n                    sig2_k = sig2_trial - el2.E * d_gamma2 * np.sign(sig2_trial)\n                    Et2_k = (el2.E * el2.H) / (el2.E + el2.H)\n                \n                # 2. Assemble internal force vector and calculate residual\n                F_int = np.array([el1.A * sig1_k - el2.A * sig2_k, el2.A * sig2_k])\n                R = P_ext - F_int\n\n                # 3. Check for convergence\n                norm_R = np.linalg.norm(R)\n                if norm_R < tol:\n                    break\n                if i == max_iter - 1:\n                    print(\"Warning: Newton-Raphson did not converge.\")\n\n                # 4. Assemble tangent stiffness matrix\n                k1 = el1.A * Et1_k / el1.L\n                k2 = el2.A * Et2_k / el2.L\n                K_T = np.array([[k1 + k2, -k2], [-k2, k2]])\n                \n                # 5. Solve for displacement increment and update\n                delta_u = np.linalg.solve(K_T, R)\n                u_iter += delta_u\n            \n            # After convergence, update permanent state for the next load step\n            u_free = u_iter.copy()\n            \n            # --- Update element 1 final state for this step ---\n            eps1_final = u_free[0] / el1.L\n            sig1_trial = el1.E * (eps1_final - initial_states['el1']['ep'])\n            f1_trial = abs(sig1_trial) - (el1.sig_y0 + el1.H * initial_states['el1']['alpha'])\n            if f1_trial > 0.0:\n                d_gamma1 = f1_trial / (el1.E + el1.H)\n                el1.alpha = initial_states['el1']['alpha'] + d_gamma1\n                el1.epsilon_p = initial_states['el1']['ep'] + d_gamma1 * np.sign(sig1_trial)\n            el1.sigma = el1.E * (eps1_final - el1.epsilon_p)\n\n            # --- Update element 2 final state for this step ---\n            eps2_final = (u_free[1] - u_free[0]) / el2.L\n            sig2_trial = el2.E * (eps2_final - initial_states['el2']['ep'])\n            f2_trial = abs(sig2_trial) - (el2.sig_y0 + el2.H * initial_states['el2']['alpha'])\n            if f2_trial > 0.0:\n                d_gamma2 = f2_trial / (el2.E + el2.H)\n                el2.alpha = initial_states['el2']['alpha'] + d_gamma2\n                el2.epsilon_p = initial_states['el2']['ep'] + d_gamma2 * np.sign(sig2_trial)\n            el2.sigma = el2.E * (eps2_final - el2.epsilon_p)\n            \n        return u_free\n\n    # Define common material and geometric properties\n    props1 = {'L': 0.6, 'A': 1.0e-3, 'E': 210e9, 'sig_y0': 300e6, 'H': 1.0e9}\n    props2 = {'L': 0.4, 'A': 0.5e-3, 'E': 210e9, 'sig_y0': 250e6, 'H': 1.0e9}\n\n    # Problem statement gives loads as [P0, P1, P2]. We only need free DOFs [P1, P2].\n    test_cases = [\n        # Test 1 (predominantly elastic unloading–reloading)\n        {\n            'P1_hist': [[0, 0], [0, 10000], [0, 30000], [0, 40000], [0, 20000], [0, 30000]],\n            'P2_hist': [[0, 0], [5000, 0], [15000, 0], [20000, 0], [10000, 0], [15000, 0]]\n        },\n        # Test 2 (monotonic plastic)\n        {\n            'P1_hist': [[0, 0], [0, 80000], [0, 140000], [0, 160000]],\n            'P2_hist': [[0, 0], [150000, 0], [300000, 0], [320000, 0]]\n        },\n        # Test 3 (elastoplastic unloading–reloading)\n        {\n            'P1_hist': [[0, 0], [0, 100000], [0, 180000], [0, 120000], [0, 150000]],\n            'P2_hist': [[0, 0], [120000, 0], [220000, 0], [80000, 0], [180000, 0]]\n        }\n    ]\n\n    results = []\n    \n    for case in test_cases:\n        # Instantiate elements for the current test\n        element1 = Element(**props1)\n        element2 = Element(**props2)\n        elements = [element1, element2]\n\n        # Simulate Load Case 1\n        u_final_1 = run_load_case(elements, case['P1_hist'])\n        P_final_1 = np.array(case['P1_hist'][-1])\n\n        # Simulate Load Case 2\n        u_final_2 = run_load_case(elements, case['P2_hist'])\n        P_final_2 = np.array(case['P2_hist'][-1])\n        \n        # Compute Delta to quantify reciprocity breakdown\n        delta = P_final_1 @ u_final_2 - P_final_2 @ u_final_1\n        \n        # The problem asks for rounding to six decimal places, not just formatting\n        results.append(f\"{delta:.6f}\")\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2618402"}]}