{"hands_on_practices": [{"introduction": "在焓法中，能量守恒方程求解的是包含显热和潜热的总焓 $h$。然而，为了了解材料的物理状态（例如，用于计算依赖于温度的属性或进行结果分析），我们必须能够将此焓值“解码”回温度 $T$ 和液相分数 $f_l$。本练习 [@problem_id:2482083] 将指导您为一个基础且广泛应用的相变模型推导并实现这一至关重要的、稳健的反演算法。", "problem": "您正在使用焓法对一个一维控制体中的相变过程进行建模。该控制体包含一种纯物质，其固液相变发生在一个温度区间内。在焓法中，单元的总比焓 $h$ 被存储并通过能量守恒方程进行时间推进。为了从已知的 $h$ 重构温度 $T$ 和液相质量分数 $f_l$，您必须仅使用基本原理和最小化的闭合关系来反演焓-温度映射。\n\n基本原理与建模假设：\n- 使用能量守恒以及比焓是显热贡献和潜热贡献之和的定义。\n- 假设比热容 $c_p$ 在固相和液相中是恒定的且相同。\n- 假设局部热平衡（LTE），因此控制体内部的两个相可以用单一的温度 $T$ 来表征。\n- 在糊状区内使用标准的杠杆法则闭合关系，即，在固相线温度 $T_s$ 和液相线温度 $T_l$ 之间的两相区间内，液相分数 $f_l$ 随温度 $T$ 从 $0$ 单调变化到 $1$，并且潜热 $L$ 在此区间内根据 LTE 进行分配。\n- 以固相线上无潜热贡献时的状态为参考点，即当 $T=T_s$ 且 $f_l=0$ 时，$h=0$。\n\n您的任务：\n- 从上述原理出发，推导一个从比焓 $h$ 到 $(T, f_l)$ 对的稳健的分段可逆映射，该映射既适用于 $T_l>T_s$ 的有限糊状区间情况，也适用于 $T_l=T_s$ 的等温相变极限情况。\n- 证明您的映射在温度 $T$ 上是单调的，并且其逆运算 $(h \\mapsto (T, f_l))$ 在有限精度算术下是适定且数值稳健的。\n- 将推导出的逆运算实现为一个程序，该程序在给定 $(h, T_s, T_l, c_p, L)$ 的情况下，能够恢复 $(T, f_l)$。\n- 强制施加物理约束条件 $f_l \\in [0,1]$，并且在两相区间内，$T \\in [T_s, T_l]$。如果 $T_l=T_s$，则将其解释为在 $T=T_s$ 处具有潜热平台的等温相变。\n- 明确指定单位：$T$、$T_s$ 和 $T_l$ 的单位是开尔文（K），$h$ 和 $L$ 的单位是焦耳每千克（J/kg），$c_p$ 的单位是焦耳每千克开尔文（J/(kg·K)）。温度以开尔文表示，$f_l$ 以 $[0,1]$ 区间内的小数表示。将 $T$ 和 $f_l$ 都四舍五入到六位小数。\n\n测试套件：\n对于下面的每一组参数 $(h,T_s,T_l,c_p,L)$，计算并返回指定单位和舍入要求的 $(T,f_l)$。测试套件覆盖了亚固相区、糊状区和过液相区，以及等温极限和边界条件。\n\n- 情况 A（亚固相区，有限糊状区间）：$(-100000, 300, 350, 2000, 250000)$\n- 情况 B（糊状区内部，有限糊状区间）：$(175000, 300, 350, 2000, 250000)$\n- 情况 C（液相边界，有限糊状区间）：$(350000, 300, 350, 2000, 250000)$\n- 情况 D（过液相区，有限糊状区间）：$(450000, 300, 350, 2000, 250000)$\n- 情况 E（等温潜热平台）：$(50000, 300, 300, 1000, 100000)$\n- 情况 F（等温，过液相区）：$(150000, 300, 300, 1000, 100000)$\n- 情况 G（糊状区下边界，有限糊状区间）：$(0, 300, 350, 2000, 250000)$\n\n最终输出格式：\n您的程序应生成单行输出，其中包含从情况 A 到 G 的结果，按顺序排列，形式为一个由方括号括起来的逗号分隔列表。每个元素本身必须是一个包含两个元素的列表 $[T,f_l]$，两个值都四舍五入到六位小数。例如，整体结构必须类似于：[[T_A,f_A],[T_B,f_B],...,[T_G,f_G]]（不要包含变量名；这仅是结构示例）。数字必须以小数形式打印，而不是分数，并且输出行中不含任何单位。", "solution": "问题陈述已经过分析，并被确定为有效。它在科学上是合理的、适定的，并包含了推导唯一且有意义的解所需的所有信息。该问题是计算传热学中相变焓法公式化的一个标准练习。我现在将继续进行推导和求解。\n\n比焓 $h$ 的基本关系定义为其显热和潜热分量之和。参考状态给定为在固相线温度 $T=T_s$ 下，对于完全固相的材料（即液相分数 $f_l=0$），$h=0$。\n\n对于比热容 $c_p$ 恒定的材料，相对于参考温度 $T_s$ 的显焓分量 $h_{sensible}$ 由下式给出：\n$$h_{sensible} = c_p (T - T_s)$$\n潜焓分量 $h_{latent}$ 是相变过程中吸收的能量。对于液相分数 $f_l$ 和总熔化潜热 $L$，该分量为：\n$$h_{latent} = f_l L$$\n将这两者结合，总比焓 $h$ 作为温度 $T$ 和液相分数 $f_l$ 的函数为：\n$$h(T, f_l) = c_p (T - T_s) + f_l L$$\n为了建立焓和温度之间的唯一关系，我们必须为三个热力学区域定义液相分数 $f_l$ 与温度 $T$ 的关系。\n\n1.  **固相区 ($T < T_s$)：** 材料完全是固态，因此 $f_l=0$。焓完全是显热：\n    $$h(T) = c_p (T - T_s)$$\n    对于 $T<T_s$，焓为负值。在边界 $T=T_s$ 处，我们得到 $h(T_s)=0$，我们将其定义为固相线焓 $h_s$。\n\n2.  **液相区 ($T > T_l$)：** 材料完全是液态，因此 $f_l=1$。焓为：\n    $$h(T) = c_p (T - T_s) + L$$\n    在边界 $T=T_l$ 处，焓为 $h(T_l) = c_p(T_l - T_s) + L$。我们将其定义为液相线焓 $h_l$。\n\n3.  **糊状区 ($T_s \\le T \\le T_l$)：** 两相共存。问题指定了液相分数的杠杆法则闭合关系。最简单和最标准的形式是假设 $f_l$ 随温度 $T$ 从 $T_s$ 时的 $0$ 线性变化到 $T_l$ 时的 $1$。这在糊状区宽度有限（即 $T_l > T_s$）的情况下是有效的。\n    $$f_l(T) = \\frac{T - T_s}{T_l - T_s}$$\n    将此式代入通用的焓表达式中：\n    $$h(T) = c_p(T - T_s) + \\left(\\frac{T - T_s}{T_l - T_s}\\right) L = (T - T_s) \\left( c_p + \\frac{L}{T_l - T_s} \\right)$$\n    这个表达式连接了边界上的焓值，因为 $h(T_s)=0=h_s$ 并且 $h(T_l)=c_p(T_l-T_s)+L=h_l$。\n\n对于 $T_l > T_s$ 的情况，完整的正向映射 $h(T)$ 是一个分段函数：\n$$\nh(T) =\n\\begin{cases}\nc_p (T - T_s) & \\text{if } T < T_s \\\\\n(T - T_s) \\left(c_p + \\frac{L}{T_l - T_s}\\right) & \\text{if } T_s \\le T \\le T_l \\\\\nc_p (T - T_s) + L & \\text{if } T > T_l\n\\end{cases}\n$$\n\n为了使逆运算 $h \\mapsto (T, f_l)$ 是适定的，函数 $h(T)$ 必须是严格单调的。我们通过检查每个区域的导数 $\\frac{dh}{dT}$ 来验证这一点，假设物理常数 $c_p > 0$ 和 $L > 0$。\n-   对于 $T < T_s$: $\\frac{dh}{dT} = c_p > 0$。\n-   对于 $T_s < T < T_l$: $\\frac{dh}{dT} = c_p + \\frac{L}{T_l - T_s} > c_p > 0$。这一项可以看作是一个有效热容 $c_{p,eff}$。\n-   对于 $T > T_l$: $\\frac{dh}{dT} = c_p > 0$。\n\n由于 $h(T)$ 是连续的且其导数严格为正，所以该函数是严格单调的。这保证了存在唯一的逆函数 $T(h)$，并且从 $h$ 求解 $(T, f_l)$ 的问题是适定的。\n\n**等温情况 ($T_l = T_s$)**\n在此极限下，糊状区坍缩为一个单一的温度点，$T=T_s$。相变是等温发生的。\n-   对于 $h_s=0 \\le h \\le h_l=L$，温度保持在 $T=T_s$ 不变。\n-   此范围内的焓纯粹是潜热：$h = f_l L$。\n-   因此，对于 $0 \\le h \\le L$，我们有 $T=T_s$ 和 $f_l = h/L$。\n\n**统一的逆运算算法**\n推导出的关系使我们能够构建一个稳健的算法，从给定的 $h$ 中求得 $(T, f_l)$。\n\n1.  **定义焓阈值**。固相线焓 $h_s=0$。液相线焓 $h_l$ 的计算取决于相变是等温的还是在一个有限区间内发生。\n    -   如果 $T_l = T_s$：$h_l = L$。\n    -   如果 $T_l > T_s$：$h_l = c_p (T_l - T_s) + L$。\n\n2.  **根据 $h$ 确定所在的区域**。\n    -   **亚固相区 ($h < h_s$)：** 材料为固态。\n        $$f_l = 0$$\n        $$T = T_s + h / c_p$$\n\n    -   **相变区 ($h_s \\le h \\le h_l$)：** 材料处于两相状态（糊状区或等温平台）。\n        -   如果 $T_l = T_s$（等温）：\n            $$T = T_s$$\n            $$f_l = h / L \\quad (\\text{假设 } L>0)$$\n        -   如果 $T_l > T_s$（糊状区）：为了获得更好的数值稳定性，我们首先计算 $f_l$，然后再计算 $T$。从 $h(T) = c_p(T-T_s) + f_l L$ 和 $T-T_s = f_l(T_l-T_s)$，我们代入 $T-T_s$ 得到 $h = c_p f_l(T_l-T_s) + f_l L = f_l(c_p(T_l-T_s)+L) = f_l h_l$。\n            $$f_l = h / h_l$$\n            $$T = T_s + f_l(T_l - T_s)$$\n            这种公式避免了当 $(T_l-T_s)$ 很小时，对可能很大的项（如 $L/(T_l-T_s)$）进行直接计算。\n\n    -   **过液相区 ($h > h_l$)：** 材料为液态。\n        $$f_l = 1$$\n        $$T = T_s + (h - L) / c_p$$\n\n该算法是完整的、稳健的，并以统一的方式处理了有限糊状区间和等温极限两种情况。它严格遵守物理约束，并为所需的逆运算提供了一个数值稳定的程序。实现将直接遵循这一逻辑。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves for temperature (T) and liquid fraction (f_l) from specific enthalpy (h)\n    using the enthalpy method for phase change, covering multiple test cases.\n    \"\"\"\n\n    # test_cases format: (h, T_s, T_l, c_p, L)\n    # Units: h, L [J/kg]; T_s, T_l [K]; c_p [J/(kg·K)]\n    test_cases = [\n        # Case A: Subsolidus, finite mushy interval\n        (-100000.0, 300.0, 350.0, 2000.0, 250000.0),\n        # Case B: Mushy interior, finite mushy interval\n        (175000.0, 300.0, 350.0, 2000.0, 250000.0),\n        # Case C: Liquid boundary, finite mushy interval\n        (350000.0, 300.0, 350.0, 2000.0, 250000.0),\n        # Case D: Superliquid, finite mushy interval\n        (450000.0, 300.0, 350.0, 2000.0, 250000.0),\n        # Case E: Isothermal latent plateau\n        (50000.0, 300.0, 300.0, 1000.0, 100000.0),\n        # Case F: Isothermal, superliquid\n        (150000.0, 300.0, 300.0, 1000.0, 100000.0),\n        # Case G: Mushy lower boundary, finite mushy interval\n        (0.0, 300.0, 350.0, 2000.0, 250000.0),\n    ]\n\n    results = []\n    \n    for case in test_cases:\n        h, T_s, T_l, c_p, L = case\n        \n        # Enforce physical assumptions for robustness, although test cases are well-behaved.\n        # Tolerate floating point inaccuracies for T_l == T_s comparison.\n        is_isothermal = abs(T_l - T_s) < 1e-9\n\n        if is_isothermal:\n            # Isothermal phase change at T_s\n            h_l = L\n        else:\n            # Phase change over a mushy interval [T_s, T_l]\n            h_l = c_p * (T_l - T_s) + L\n        \n        h_s = 0.0\n\n        T, f_l = 0.0, 0.0\n\n        if h < h_s:\n            # Subsolidus (solid) regime\n            f_l = 0.0\n            T = T_s + h / c_p\n        elif h > h_l:\n            # Superliquid (liquid) regime\n            f_l = 1.0\n            T = T_s + (h - L) / c_p\n        else: # h_s <= h <= h_l\n            # Phase change regime (mushy or isothermal plateau)\n            if is_isothermal:\n                T = T_s\n                # Avoid division by zero if L=0 (no phase change), though problem implies L>0.\n                f_l = h / L if L > 0 else 0.0\n            else: # Mushy zone\n                # Numerically robust calculation: find f_l first\n                # f_l = h / h_l ; T = T_s + f_l * (T_l - T_s)\n                # Avoid division by zero if h_l=0 (unphysical for L>0, T_l>T_s)\n                f_l = h / h_l if h_l > 0 else 0.0\n                T = T_s + f_l * (T_l - T_s)\n\n        # Round to six decimal places as required\n        T_rounded = round(T, 6)\n        f_l_rounded = round(f_l, 6)\n        \n        # Ensure T_rounded isn't negative zero\n        if T_rounded == -0.0:\n            T_rounded = 0.0\n            \n        results.append([T_rounded, f_l_rounded])\n\n    # Format the final output string exactly as specified, without extra spaces\n    # Example: [[T_A,f_l_A],[T_B,f_l_B]]\n    result_str = \"[\" + \",\".join([f\"[{r[0]},{r[1]}]\" for r in results]) + \"]\"\n    print(result_str)\n\nsolve()\n```", "id": "2482083"}, {"introduction": "理解了单个控制体积内的状态后，我们必须考虑这些体积如何与周围环境相互作用。本实践 [@problem_id:2482106] 聚焦于一个常见情景：对流边界。您将运用有限体积法的基本原理，推导出一个精确的数学项，该项代表了与外部流体的热量交换，这是建立实际热模拟的关键一步。", "problem": "一个相变材料 (PCM) 的一维半无限大平板占据了半空间 $x \\ge 0$。此平板采用焓法建模，其中体积焓 $H(T)$ 通过一个合适的随温度变化的关系式来同时考虑显热和潜热。固体中的主导能量守恒定律仅为热传导，且热导率 $k$ 被视为常数。位于 $x=0$ 的边界暴露于环境温度为 $T_{\\infty}$ 的外部流体中，对流换热系数为 $h_c$，因此边界上的热交换由牛顿冷却定律控制。您使用基于单元中心的有限体积法 (FVM) 对固体进行离散，考虑与边界相邻的控制体，记为 $P$，其厚度为 $\\Delta x$，横截面积为 $A$ (因此控制体体积为 $V_P = A\\,\\Delta x$)。令 $T_P$ 表示 $P$ 中的单元中心温度，令 $T_w$ 表示 $x=0$ 处边界面的温度。\n\n从第一性原理出发，不使用任何现成的离散化公式：\n\n- 使用 $V_P$ 上的能量守恒积分形式、傅里叶热传导定律和牛顿冷却定律，为单元 $P$ 建立半离散焓平衡方程，并明确定义 $x=0$ 处边界热通量 $q_w$ 的符号约定。\n- 在 $x=0$ 处，通过在 $x=0$ 的边界表面和 $x=\\Delta x/2$ 的单元中心之间进行线性重构来施加对流（Robin）边界条件，从而用 $T_P$ 和 $T_{\\infty}$ 消去 $T_w$。\n- 在得到的半离散焓平衡方程中，将边界贡献识别为一个体积源项 $S_b(T_P)$，该项仅依赖于 $k$、$h_c$、$\\Delta x$、$T_{\\infty}$ 和 $T_P$。\n\n请提供要添加到单元 $P$ 焓平衡方程右侧的体积边界源项 $S_b(T_P)$ 的精确解析表达式。将 $S_b(T_P)$ 以 $\\mathrm{W}\\,\\mathrm{m}^{-3}$ 为单位表示。最终答案必须是仅包含 $k$、$h_c$、$\\Delta x$、$T_{\\infty}$ 和 $T_P$ 的单一闭合形式表达式。", "solution": "问题陈述已经过验证，被认为是科学上可靠、适定且客观的。它构成了计算传热学领域的一个标准推导。我们将从第一性原理出发，推导所要求的表达式。\n\n控制体 $V_P$ 的能量守恒定律积分形式为：\n$$\n\\frac{d}{dt} \\int_{V_P} H(T) \\, dV = - \\oint_{\\partial V_P} \\vec{q} \\cdot d\\vec{S}\n$$\n其中 $H(T)$ 是体积焓（单位为 $\\mathrm{J}\\,\\mathrm{m}^{-3}$），$\\vec{q}$ 是热通量矢量（单位为 $\\mathrm{W}\\,\\mathrm{m}^{-2}$），$t$ 是时间，$V_P$ 是控制体，$\\partial V_P$ 是其边界面。\n\n对于所述的与边界相邻的一维单元中心控制体 $P$，其体积为 $V_P = A \\Delta x$，其中 $A$ 是横截面积，$\\Delta x$ 是厚度。该控制体从 $x=0$ 的物理边界（西侧面，w）延伸到 $x=\\Delta x$ 的内部单元面（东侧面，e）。定义温度 $T_P$ 的单元中心位于 $x_P = \\Delta x/2$。\n\n假设单元内的焓是均匀的，$H(T) \\approx H(T_P) = H_P$，则积分能量平衡简化为一个半离散的常微分方程：\n$$\nV_P \\frac{dH_P}{dt} = A q_w - A q_e\n$$\n此处，我们采用符号约定，即热通量 $q$ 在 $x$ 正方向上为正。因此，$q_w$ 是在西侧面 ($x=0$) 进入控制体的热通量，$q_e$ 是在东侧面 ($x=\\Delta x$) 离开的热通量。方程两边同除以控制体体积 $V_P = A \\Delta x$，我们得到单位体积的能量平衡方程：\n$$\n\\frac{dH_P}{dt} = \\frac{q_w}{\\Delta x} - \\frac{q_e}{\\Delta x}\n$$\n问题要求的是此平衡方程中的边界贡献，我们将其识别为体积源项 $S_b(T_P)$。该项源于西侧面上的通量 $q_w$：\n$$\nS_b(T_P) = \\frac{q_w}{\\Delta x}\n$$\n为了确定 $q_w$，我们必须施加对流边界条件。在 $x=0$ 的表面上，热通量是连续的。它由流体侧的牛顿冷却定律和固体侧的傅里叶热传导定律给出。\n$1$. 从温度为 $T_{\\infty}$ 的流体到温度为 $T_w$ 的壁面的对流通量：\n$$\nq_w = h_c (T_{\\infty} - T_w)\n$$\n$2$. 从壁面进入固体的传导通量：\n$$\nq_w = -k \\left. \\frac{\\partial T}{\\partial x} \\right|_{x=0}\n$$\n问题指定在 $x=0$ 的边界表面和 $x_P = \\Delta x/2$ 的单元中心之间使用线性重构来构建温度分布。这使我们能够近似壁面处的温度梯度：\n$$\n\\left. \\frac{\\partial T}{\\partial x} \\right|_{x=0} \\approx \\frac{T_P - T_w}{x_P - 0} = \\frac{T_P - T_w}{\\Delta x / 2}\n$$\n将此近似值代入傅里叶定律可得：\n$$\nq_w = -k \\left( \\frac{T_P - T_w}{\\Delta x / 2} \\right) = \\frac{2k}{\\Delta x} (T_w - T_P)\n$$\n通过令 $q_w$ 的对流和传导表达式相等，我们施加了边界上的通量连续性：\n$$\nh_c (T_{\\infty} - T_w) = \\frac{2k}{\\Delta x} (T_w - T_P)\n$$\n现在我们必须求解这个代数方程，用单元温度 $T_P$ 和环境温度 $T_{\\infty}$ 来表示未知的壁面温度 $T_w$：\n$$\nh_c T_{\\infty} - h_c T_w = \\frac{2k}{\\Delta x} T_w - \\frac{2k}{\\Delta x} T_P\n$$\n$$\nh_c T_{\\infty} + \\frac{2k}{\\Delta x} T_P = T_w \\left( h_c + \\frac{2k}{\\Delta x} \\right)\n$$\n$$\nT_w = \\frac{h_c T_{\\infty} + \\frac{2k}{\\Delta x} T_P}{h_c + \\frac{2k}{\\Delta x}}\n$$\n现在我们可以构建体积源项 $S_b(T_P)$ 的最终表达式。我们将 $T_w$ 的表达式代入公式 $S_b(T_P) = \\frac{h_c(T_{\\infty} - T_w)}{\\Delta x}$：\n$$\nS_b(T_P) = \\frac{h_c}{\\Delta x} \\left( T_{\\infty} - \\frac{h_c T_{\\infty} + \\frac{2k}{\\Delta x} T_P}{h_c + \\frac{2k}{\\Delta x}} \\right)\n$$\n为进行简化，我们将括号内的项通分：\n$$\nS_b(T_P) = \\frac{h_c}{\\Delta x} \\left( \\frac{T_{\\infty} \\left(h_c + \\frac{2k}{\\Delta x}\\right) - \\left(h_c T_{\\infty} + \\frac{2k}{\\Delta x} T_P\\right)}{h_c + \\frac{2k}{\\Delta x}} \\right)\n$$\n展开分子：\n$$\nS_b(T_P) = \\frac{h_c}{\\Delta x} \\left( \\frac{h_c T_{\\infty} + \\frac{2k}{\\Delta x} T_{\\infty} - h_c T_{\\infty} - \\frac{2k}{\\Delta x} T_P}{h_c + \\frac{2k}{\\Delta x}} \\right)\n$$\n$h_c T_{\\infty}$ 项相互抵消，剩下：\n$$\nS_b(T_P) = \\frac{h_c}{\\Delta x} \\left( \\frac{\\frac{2k}{\\Delta x} (T_{\\infty} - T_P)}{h_c + \\frac{2k}{\\Delta x}} \\right)\n$$\n为了消除繁分数，我们可以将内部分数的分子和分母同乘以 $\\Delta x$：\n$$\nS_b(T_P) = \\frac{h_c}{\\Delta x} \\left( \\frac{2k (T_{\\infty} - T_P)}{h_c \\Delta x + 2k} \\right)\n$$\n最后，合并各项，得到体积边界源项的完整表达式：\n$$\nS_b(T_P) = \\frac{2 k h_c}{\\Delta x (2k + h_c \\Delta x)} (T_{\\infty} - T_P)\n$$\n该表达式表示由于 $x=0$ 处的对流边界条件，单位时间内添加到第一个控制体的单位体积的净热量。", "answer": "$$\n\\boxed{\\frac{2 k h_c (T_{\\infty} - T_P)}{\\Delta x (2k + h_c \\Delta x)}}\n$$", "id": "2482106"}, {"introduction": "简单的线性模型很有用，但真实材料的热力学行为通常是复杂的非线性过程。这项高级实践 [@problem_id:2482091] 将挑战您，将焓反演技术推广到包含非线性比热和复杂相变曲线的情况。您将发现，虽然解析解不再可行，但通过使用稳健的数值求根方法，问题依然可以得到解决，这展示了焓法的强大通用性。", "problem": "使用一维焓法来模拟相变过程，该过程具有复杂的、非线性的液相分数随温度变化的特性。考虑单位质量的比焓 $h(T)$，其定义在有界温度区间 $[T_{\\min},T_{\\max}]$（单位为开尔文）上，参考点取在 $T_{\\min}$，并通过液相分数来包含潜热。所使用的本构关系如下：\n- 比热容 $c_p(T)$（单位 J/(kg·K)），由 $c_p(T)=a+b\\,(T-T_0)^2$ 给出，其中常数 $a\\ge 0$ 且 $b\\ge 0$。\n- 液相分数 $f_\\ell(T)\\in[0,1]$，定义为光滑阶跃函数的加权叠加，\n$$\nf_\\ell(T)=\\sum_{i=1}^m w_i\\,\\sigma\\!\\left(\\frac{T-T_i}{s_i}\\right),\n$$\n其中 $\\sigma(x)=\\dfrac{1}{1+e^{-x}}$ 是逻辑斯谛函数，权重 $w_i$ 满足 $\\sum_{i=1}^m w_i=1$，$T_i$ 是相变温度（单位为开尔文），$s_i>0$ 是平滑宽度（单位为开尔文）。为了数值稳定性，如果需要，$f_\\ell(T)$ 的值应被限制在区间 $[0,1]$ 内。\n- 潜热 $L$（单位 J/kg），且 $L\\ge 0$。\n\n比焓为\n$$\nh(T)=\\int_{T_{\\min}}^{T} c_p(\\theta)\\,\\mathrm{d}\\theta+L\\,f_\\ell(T),\n$$\n单位为 J/kg。注意，$h(T_{\\min})=\\int_{T_{\\min}}^{T_{\\min}} c_p(\\theta)\\,\\mathrm{d}\\theta+L\\,f_\\ell(T_{\\min})=L\\,f_\\ell(T_{\\min})$，以及 $h(T_{\\max})=\\int_{T_{\\min}}^{T_{\\max}} c_p(\\theta)\\,\\mathrm{d}\\theta+L\\,f_\\ell(T_{\\max})$。\n\n任务。设计并实现一个稳健的、全局收敛的求逆程序。给定一个目标焓值 $h^\\ast$（单位 J/kg），当存在满足 $h(T)=h^\\ast$ 的唯一 $T\\in[T_{\\min},T_{\\max}]$ 时，该程序返回这个 $T$ 值。该程序必须：\n- 按上述定义处理 $f_\\ell(T)$，它可能是非线性的，并导致 $h(T)$ 非凸，但 $c_p(T)\\ge 0$ 和 $L\\ge 0$ 确保了 $h(T)$ 在 $[T_{\\min},T_{\\max}]$ 上的单调性。\n- 对残差 $g(T)=h(T)-h^\\ast$ 使用一个基于区间法的求根器，该方法能保证收敛，而不受 $h(T)$ 局部非凸性的影响，且不假定其为凸函数或仅依赖于局部导数。如果 $h^\\ast\\le h(T_{\\min})$，它必须返回边界值 $T_{\\min}$；如果 $h^\\ast\\ge h(T_{\\max})$，则必须返回边界值 $T_{\\max}$。\n- 使用提供的本构形式计算 $h(T)$，其中积分应根据二次函数形式的 $c_p(T)$ 精确计算，即：\n$$\n\\int_{T_{\\min}}^{T} c_p(\\theta)\\,\\mathrm{d}\\theta=a\\,(T-T_{\\min})+\\frac{b}{3}\\left[(T-T_0)^3-(T_{\\min}-T_0)^3\\right].\n$$\n\n角度单位不会出现。所有温度必须以开尔文报告，最终答案必须以开尔文打印，并精确到小数点后六位。\n\n测试套件。使用以下六个案例。对于每个案例，按规定定义 $h^\\ast$，然后求逆以获得相应的温度。程序必须按顺序计算并输出这六个案例的温度列表。\n\n- 案例 1：\n  - $T_{\\min}=300$ K, $T_{\\max}=1300$ K.\n  - $a=900$ J/(kg·K), $b=0$, $T_0=0$ K.\n  - $L=2.5\\times 10^5$ J/kg.\n  - $f_\\ell(T)=\\sigma\\!\\left(\\dfrac{T-900}{15}\\right)$.\n  - 定义 $h^\\ast=h(T^\\dagger)$，其中 $T^\\dagger=920$ K。\n\n- 案例 2：\n  - $T_{\\min}=300$ K, $T_{\\max}=1400$ K.\n  - $a=1000$ J/(kg·K), $b=0$, $T_0=0$ K.\n  - $L=3.0\\times 10^5$ J/kg.\n  - $f_\\ell(T)=0.6\\,\\sigma\\!\\left(\\dfrac{T-700}{10}\\right)+0.4\\,\\sigma\\!\\left(\\dfrac{T-1000}{20}\\right)$.\n  - 定义 $h^\\ast=h(T^\\dagger)$，其中 $T^\\dagger=950$ K。\n\n- 案例 3：\n  - $T_{\\min}=300$ K, $T_{\\max}=1200$ K.\n  - $a=850$ J/(kg·K), $b=0$, $T_0=0$ K.\n  - $L=1.8\\times 10^5$ J/kg.\n  - $f_\\ell(T)=\\sigma\\!\\left(\\dfrac{T-800}{0.8}\\right)$.\n  - 定义 $h^\\ast=h(T^\\dagger)$，其中 $T^\\dagger=800.2$ K。\n\n- 案例 4：\n  - $T_{\\min}=300$ K, $T_{\\max}=1300$ K.\n  - $a=700$ J/(kg·K), $b=0.5$ J/(kg·K$^3$), $T_0=500$ K.\n  - $L=2.2\\times 10^5$ J/kg.\n  - $f_\\ell(T)=0.2\\,\\sigma\\!\\left(\\dfrac{T-600}{12}\\right)+0.5\\,\\sigma\\!\\left(\\dfrac{T-900}{25}\\right)+0.3\\,\\sigma\\!\\left(\\dfrac{T-1100}{15}\\right)$.\n  - 定义 $h^\\ast=h(T^\\dagger)$，其中 $T^\\dagger=1000$ K。\n\n- 案例 5（下限测试）：\n  - 使用与案例 2 相同的参数。\n  - 定义 $h^\\ast=h(T_{\\min})-10^4$ J/kg。\n\n- 案例 6（上限测试）：\n  - 使用与案例 1 相同的参数。\n  - 定义 $h^\\ast=h(T_{\\max})+10^4$ J/kg。\n\n最终输出格式。您的程序应生成单行输出，其中包含一个用方括号括起来的逗号分隔列表，例如 `[result1,result2,...,result6]`。每个温度都必须以开尔文报告，精确到小数点后六位，并按案例 1 到案例 6 的顺序排列。", "solution": "我们从能量守恒和相变焓法中比焓的定义出发。对于具有温度 $T$ 和液相分数 $f_\\ell(T)$ 的一维材料单元，单位质量的比焓 $h(T)$ 由于显热和潜热而变化。显热贡献由比热容 $c_p(T)$ 的积分给出，潜热贡献为 $L\\,f_\\ell(T)$，其中 $L$ 是单位质量的熔化潜热。这产生了如下本构定义\n$$\nh(T)=\\int_{T_{\\min}}^{T} c_p(\\theta)\\,\\mathrm{d}\\theta+L\\,f_\\ell(T),\n$$\n其中 $h(T_{\\min})=L\\,f_\\ell(T_{\\min})$。\n\n对于所选的参数形式 $c_p(T)=a+b\\,(T-T_0)^2$（其中 $a\\ge 0$, $b\\ge 0$），该积分存在精确的反导数，\n$$\n\\int_{T_{\\min}}^{T} c_p(\\theta)\\,\\mathrm{d}\\theta=a\\,(T-T_{\\min})+\\frac{b}{3}\\left[(T-T_0)^3-(T_{\\min}-T_0)^3\\right].\n$$\n因此，一旦给出 $a$、$b$、$T_0$、$L$ 以及液相分数曲线 $f_\\ell(T)$，模型就完全确定了。液相分数定义为逻辑斯谛阶跃的凸组合，\n$$\nf_\\ell(T)=\\sum_{i=1}^m w_i\\,\\sigma\\!\\left(\\frac{T-T_i}{s_i}\\right),\\quad \\sigma(x)=\\frac{1}{1+e^{-x}},\\quad \\sum_{i=1}^m w_i=1,\\quad s_i>0,\n$$\n为了数值稳健性，可以选择将其限制在 $[0,1]$ 区间内。$h(T)$ 的一阶导数为\n$$\n\\frac{\\mathrm{d}h}{\\mathrm{d}T}=c_p(T)+L\\,\\frac{\\mathrm{d}f_\\ell}{\\mathrm{d}T}.\n$$\n因为 $c_p(T)\\ge a\\ge 0$ 且对于基于逻辑斯谛函数的 $f_\\ell(T)$ 有 $\\frac{\\mathrm{d}f_\\ell}{\\mathrm{d}T}\\ge 0$，所以我们有 $\\frac{\\mathrm{d}h}{\\mathrm{d}T}\\ge a\\ge 0$。在我们的测试套件中，所有案例都满足 $a>0$，这保证了对于所有 $T\\in[T_{\\min},T_{\\max}]$ 都有 $\\frac{\\mathrm{d}h}{\\mathrm{d}T}>0$。因此 $h(T)$ 是严格单调递增的，从而确保了反函数 $T(h)$ 在 $[T_{\\min},T_{\\max}]$ 上的存在性和唯一性。尽管由于多重相变或随温度变化的 $c_p(T)$，$h(T)$ 可能非凸（即存在 $\\frac{\\mathrm{d}^2 h}{\\mathrm{d}T^2}$ 符号改变的区域），但单调性足以实现稳健的求逆。\n\n为了对给定的 $h^\\ast$ 求 $h(T)$ 的逆，我们将问题重构为求解残差的根\n$$\ng(T)=h(T)-h^\\ast.\n$$\n因为 $h(T)$ 在 $[T_{\\min},T_{\\max}]$ 上连续且严格单调递增，所以 $g(T)$ 也是连续且严格单调递增的，因此区间内的任何根都是唯一的。通过一个利用这种单调性的基于区间法的求根器，可以获得一个稳健的求逆程序：\n- 计算 $h_{\\min}=h(T_{\\min})$ 和 $h_{\\max}=h(T_{\\max})$。\n- 如果 $h^\\ast\\le h_{\\min}$，返回 $T_{\\min}$；如果 $h^\\ast\\ge h_{\\max}$，返回 $T_{\\max}$。\n- 否则，$g(T_{\\min})=h_{\\min}-h^\\ast<0$ 且 $g(T_{\\max})=h_{\\max}-h^\\ast>0$，因此在 $(T_{\\min},T_{\\max})$ 内存在唯一的根。使用诸如 Richard Brent 算法（该算法融合了二分法、割线法和带有区间保障措施的反二次插值法）之类的区间套法来寻找根。对于在区间端点符号相反的连续函数，Brent 方法是全局收敛的，并且对非凸性不敏感。\n\n这种设计是基于原理的：它从焓的定义出发，通过证明 $h(T)$ 的单调性来保证可逆性。所选的数值方法确保了稳健性，而不依赖于局部凸性或导数。\n\n评估的算法细节：\n- 通过逻辑斯谛定义评估 $f_\\ell(T)$。为了数值稳定性，当 $|x|$ 很大时对 $\\sigma(x)$ 进行饱和处理（例如，将 $x\\le -40$ 视为 $\\sigma(x)\\approx 0$，将 $x\\ge 40$ 视为 $\\sigma(x)\\approx 1$），并且如果需要，将最终的 $f_\\ell(T)$ 限制在 $[0,1]$ 内。\n- 使用 $c_p(T)$ 的二次多项式形式精确计算显热积分，即\n$$\n\\int_{T_{\\min}}^{T} c_p(\\theta)\\,\\mathrm{d}\\theta=a\\,(T-T_{\\min})+\\frac{b}{3}\\left[(T-T_0)^3-(T_{\\min}-T_0)^3\\right].\n$$\n- 将显热贡献和潜热贡献相加来构成 $h(T)$，并计算 $g(T)=h(T)-h^\\ast$。\n- 在 $[T_{\\min},T_{\\max}]$ 上应用区间法求根器。\n- 将最终温度四舍五入到小数点后六位，并以开尔文报告。\n\n测试套件处理：\n- 案例 1-4 定义了 $h^\\ast=h(T^\\dagger)$，其中 $T^\\dagger$ 是 $[T_{\\min},T_{\\max}]$ 内的一个指定值。由于严格的单调性，求逆必须在数值公差范围内返回 $T=T^\\dagger$。\n- 案例 5 定义了一个下限压力测试 $h^\\ast=h(T_{\\min})-10^4$ J/kg，该测试必须返回 $T_{\\min}$。\n- 案例 6 定义了一个上限压力测试 $h^\\ast=h(T_{\\max})+10^4$ J/kg，该测试必须返回 $T_{\\max}$。\n\n最终程序构建每个案例，按规定计算相应的 $h^\\ast$，使用区间套法执行求逆，并打印单行结果，其中包含六个温度值（单位为开尔文），每个值都精确到小数点后六位，用方括号括起来并以逗号分隔，如要求所示。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.optimize import root_scalar\n\ndef sigmoid(x: float) -> float:\n    # Numerically stable logistic function with saturation.\n    if x <= -40.0:\n        return 0.0\n    if x >= 40.0:\n        return 1.0\n    return 1.0 / (1.0 + np.exp(-x))\n\ndef liquid_fraction(T: float, fl_params):\n    # fl_params: list of tuples (w_i, T_i, s_i)\n    val = 0.0\n    for (w, Ti, si) in fl_params:\n        val += w * sigmoid((T - Ti) / si)\n    # Clamp to [0,1] to avoid any numerical overshoot.\n    if val < 0.0:\n        val = 0.0\n    elif val > 1.0:\n        val = 1.0\n    return val\n\ndef sensible_integral(T: float, Tmin: float, a: float, b: float, T0: float) -> float:\n    # Exact integral of c_p(T) = a + b*(T - T0)^2 from Tmin to T\n    return a * (T - Tmin) + (b / 3.0) * ((T - T0) ** 3 - (Tmin - T0) ** 3)\n\ndef enthalpy(T: float, params: dict) -> float:\n    Tmin = params[\"Tmin\"]\n    a = params[\"a\"]\n    b = params[\"b\"]\n    T0 = params[\"T0\"]\n    L = params[\"L\"]\n    fl = params[\"fl\"]\n    h_sens = sensible_integral(T, Tmin, a, b, T0)\n    f = liquid_fraction(T, fl)\n    return h_sens + L * f\n\ndef invert_temperature(params: dict, h_star: float) -> float:\n    Tmin = params[\"Tmin\"]\n    Tmax = params[\"Tmax\"]\n\n    # Compute enthalpy at bounds\n    h_min = enthalpy(Tmin, params)\n    h_max = enthalpy(Tmax, params)\n\n    # Bound handling\n    if h_star <= h_min:\n        return float(Tmin)\n    if h_star >= h_max:\n        return float(Tmax)\n\n    # Define residual g(T) = h(T) - h_star\n    def g(T):\n        return enthalpy(T, params) - h_star\n\n    # Brent's method on [Tmin, Tmax]\n    sol = root_scalar(g, bracket=[Tmin, Tmax], method=\"brentq\", xtol=1e-12, rtol=1e-12, maxiter=200)\n    if not sol.converged:\n        # As a last resort fallback, perform bisection manually\n        a_, b_ = Tmin, Tmax\n        fa, fb = g(a_), g(b_)\n        # Ensure bracketing exists (should be true due to checks above)\n        for _ in range(200):\n            m = 0.5 * (a_ + b_)\n            fm = g(m)\n            if fm == 0.0 or abs(b_ - a_) < 1e-12:\n                return m\n            if np.sign(fm) == np.sign(fa):\n                a_, fa = m, fm\n            else:\n                b_, fb = m, fm\n        return 0.5 * (a_ + b_)\n    return float(sol.root)\n\ndef solve():\n    # Define the six test cases as per the problem statement.\n    # Each case is a dict with parameters for c_p, f_l, latent heat, and T bounds.\n    # For Cases 1-4 we define probe_T from which h_star is generated.\n    # For Cases 5-6 we define offsets relative to h(Tmin) and h(Tmax).\n    cases = []\n\n    # Case 1\n    cases.append({\n        \"Tmin\": 300.0, \"Tmax\": 1300.0,\n        \"a\": 900.0, \"b\": 0.0, \"T0\": 0.0,\n        \"L\": 2.5e5,\n        \"fl\": [(1.0, 900.0, 15.0)],\n        \"probe_T\": 920.0,\n        \"offset\": None\n    })\n\n    # Case 2\n    cases.append({\n        \"Tmin\": 300.0, \"Tmax\": 1400.0,\n        \"a\": 1000.0, \"b\": 0.0, \"T0\": 0.0,\n        \"L\": 3.0e5,\n        \"fl\": [(0.6, 700.0, 10.0), (0.4, 1000.0, 20.0)],\n        \"probe_T\": 950.0,\n        \"offset\": None\n    })\n\n    # Case 3\n    cases.append({\n        \"Tmin\": 300.0, \"Tmax\": 1200.0,\n        \"a\": 850.0, \"b\": 0.0, \"T0\": 0.0,\n        \"L\": 1.8e5,\n        \"fl\": [(1.0, 800.0, 0.8)],\n        \"probe_T\": 800.2,\n        \"offset\": None\n    })\n\n    # Case 4\n    cases.append({\n        \"Tmin\": 300.0, \"Tmax\": 1300.0,\n        \"a\": 700.0, \"b\": 0.5, \"T0\": 500.0,\n        \"L\": 2.2e5,\n        \"fl\": [(0.2, 600.0, 12.0), (0.5, 900.0, 25.0), (0.3, 1100.0, 15.0)],\n        \"probe_T\": 1000.0,\n        \"offset\": None\n    })\n\n    # Case 5 (lower-bound test) - same parameters as Case 2, offset below h(Tmin)\n    cases.append({\n        \"Tmin\": 300.0, \"Tmax\": 1400.0,\n        \"a\": 1000.0, \"b\": 0.0, \"T0\": 0.0,\n        \"L\": 3.0e5,\n        \"fl\": [(0.6, 700.0, 10.0), (0.4, 1000.0, 20.0)],\n        \"probe_T\": None,\n        \"offset\": (\"low\", 1.0e4)  # h_star = h(Tmin) - 1e4\n    })\n\n    # Case 6 (upper-bound test) - same parameters as Case 1, offset above h(Tmax)\n    cases.append({\n        \"Tmin\": 300.0, \"Tmax\": 1300.0,\n        \"a\": 900.0, \"b\": 0.0, \"T0\": 0.0,\n        \"L\": 2.5e5,\n        \"fl\": [(1.0, 900.0, 15.0)],\n        \"probe_T\": None,\n        \"offset\": (\"high\", 1.0e4)  # h_star = h(Tmax) + 1e4\n    })\n\n    results = []\n    for case in cases:\n        params = {\n            \"Tmin\": case[\"Tmin\"],\n            \"Tmax\": case[\"Tmax\"],\n            \"a\": case[\"a\"],\n            \"b\": case[\"b\"],\n            \"T0\": case[\"T0\"],\n            \"L\": case[\"L\"],\n            \"fl\": case[\"fl\"],\n        }\n        if case[\"probe_T\"] is not None:\n            # Construct h_star = h(T_dagger) for the given probe temperature\n            T_probe = case[\"probe_T\"]\n            h_star = enthalpy(T_probe, params)\n        else:\n            # Construct h_star from offset relative to boundary enthalpy\n            which, mag = case[\"offset\"]\n            if which == \"low\":\n                h_star = enthalpy(params[\"Tmin\"], params) - mag\n            elif which == \"high\":\n                h_star = enthalpy(params[\"Tmax\"], params) + mag\n            else:\n                raise ValueError(\"Unknown offset specifier.\")\n\n        T_inv = invert_temperature(params, h_star)\n        # Round to exactly 6 decimals for output\n        results.append(f\"{T_inv:.6f}\")\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "2482091"}]}