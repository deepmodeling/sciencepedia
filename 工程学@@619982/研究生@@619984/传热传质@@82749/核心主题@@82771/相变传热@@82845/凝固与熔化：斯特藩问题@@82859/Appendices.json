{"hands_on_practices": [{"introduction": "分析解为我们理解复杂的物理过程提供了坚实的基础，并为验证数值算法提供了关键的基准。本练习将引导你求解一个经典的斯蒂芬问题——在一个有限厚度的平板中，从两侧同时开始的对称固化过程。通过应用相似性解的假设和在移动界面上的斯特凡能量平衡条件，你将推导出完全固化所需时间的解析表达式，从而深入掌握处理移动边界问题的核心分析技巧。[@problem_id:2523101]", "problem": "一个厚度为 $L_s$ 的有限平板，初始时完全处于其平衡熔点温度 $T_m$ 的液态。在时间 $t=0^{+}$ 时，位于 $x=0$ 和 $x=L_s$ 处的两个表面被突然置于并此后保持在均匀温度 $T_0$（其中 $T_0  T_m$）下。两个凝固前沿在两个表面上形成，并对称地向内推进。对推进的固相作如下理想化假设：一维热传导，其热物理性质（热导率 $k$、密度 $\\rho$、比热 $c$、热扩散率 $\\alpha=k/(\\rho c)$）为常数；体积热源可忽略不计；液相中的热传导和过冷可忽略不计，从而液相保持在等温状态 $T_m$。设 $\\ell$ 表示单位质量的熔化潜热。设 $s(t)$ 表示每个固液界面的位置（从其各自的冷却表面算起），因此固相在 $x=0$ 附近占据 $0\\le x \\le s(t)$ 的区域，在 $x=L_s$ 附近占据 $L_s - s(t) \\le x \\le L_s$ 的区域。\n\n仅使用移动界面处的能量守恒、固相中的热传导方程以及一个与所施加的边界条件相符的相似性拟设，推导两个界面在中面相遇（即 $s(t_f)=L_s/2$）时的凝固完成时间 $t_f$ 的解析表达式。如果有帮助，您可以在推导过程中引入无量纲斯蒂芬数 $\\mathrm{Ste}=c\\,(T_m-T_0)/\\ell$。将最终答案表示为单个符号表达式，该表达式由给定的符号和您在过程中定义的任何标准特殊函数组成。不要进行任何数值计算，最终答案也不要附带单位。", "solution": "所述问题是一个经典的单相斯蒂芬问题。它基于热传导和相变的基本原理，在数学上是适定的，在科学上是合理的。我们将着手求解该问题。\n\n凝固过程关于中面 $x = L_s/2$ 对称。因此，我们可以只分析平板一半的凝固过程，例如 $0 \\le x \\le L_s/2$ 区域。一个固相层从 $x=0$ 处的表面形成，并向液体中生长。在时间 $t$ 时，该层的厚度由 $s(t)$ 给出。\n\n在固相内部（$0 \\le x \\le s(t)$），温度分布 $T(x,t)$ 由一维热传导方程控制（假设热扩散率 $\\alpha$ 为常数）：\n$$ \\frac{\\partial T}{\\partial t} = \\alpha \\frac{\\partial^2 T}{\\partial x^2} \\quad \\text{for} \\quad 0  x  s(t), t > 0 $$\n\n温度场的边界条件如下：\n1.  在外表面 $x=0$ 处保持固定温度 $T_0$：\n    $$ T(0, t) = T_0 \\quad \\text{for} \\quad t > 0 $$\n2.  在移动的固液界面 $x=s(t)$ 处，温度为平衡熔点温度 $T_m$：\n    $$ T(s(t), t) = T_m \\quad \\text{for} \\quad t > 0 $$\n\n界面的移动由斯蒂芬条件决定，该条件是 $x=s(t)$ 处的能量平衡。从固相到界面的热通量提供了凝固所需的熔化潜热。由于假设液相处于等温状态 $T_m$，从液相到界面没有热通量。因此，斯蒂芬条件为：\n$$ k \\left. \\frac{\\partial T}{\\partial x} \\right|_{x=s(t)} = \\rho \\ell \\frac{ds}{dt} $$\n其中 $k$ 是热导率，$\\rho$ 是固相密度，$\\ell$ 是单位质量的熔化潜热。\n\n该问题存在相似解。我们引入一个无量纲相似性变量 $\\eta$：\n$$ \\eta = \\frac{x}{2\\sqrt{\\alpha t}} $$\n我们寻求一个解，其中界面位置 $s(t)$ 与 $\\sqrt{t}$ 成正比，而温度 $T(x,t)$ 仅仅是 $\\eta$ 的函数。设\n$$ s(t) = 2\\lambda\\sqrt{\\alpha t} $$\n$$ T(x,t) = G(\\eta) $$\n此处，$\\lambda$ 是一个待定的无量纲常数。$T$ 的偏导数变换如下：\n$$ \\frac{\\partial T}{\\partial t} = G'(\\eta) \\frac{\\partial \\eta}{\\partial t} = G'(\\eta) \\left( -\\frac{x}{4\\sqrt{\\alpha} t^{3/2}} \\right) = -\\frac{\\eta}{2t} G'(\\eta) $$\n$$ \\frac{\\partial T}{\\partial x} = G'(\\eta) \\frac{\\partial \\eta}{\\partial x} = G'(\\eta) \\frac{1}{2\\sqrt{\\alpha t}} $$\n$$ \\frac{\\partial^2 T}{\\partial x^2} = G''(\\eta) \\left( \\frac{\\partial \\eta}{\\partial x} \\right)^2 = G''(\\eta) \\frac{1}{4\\alpha t} $$\n将这些代入热传导方程，得到一个关于 $G(\\eta)$ 的常微分方程：\n$$ -\\frac{\\eta}{2t} G'(\\eta) = \\alpha \\left( G''(\\eta) \\frac{1}{4\\alpha t} \\right) $$\n$$ G''(\\eta) + 2\\eta G'(\\eta) = 0 $$\n这是一个二阶线性常微分方程。其通解可通过两次连续积分得到：\n$$ G'(\\eta) = C_1 \\exp(-\\eta^2) $$\n$$ G(\\eta) = C_1 \\int_0^\\eta \\exp(-\\xi^2) d\\xi + C_2 = C_1 \\frac{\\sqrt{\\pi}}{2} \\mathrm{erf}(\\eta) + C_2 $$\n其中 $\\mathrm{erf}(\\eta)$ 是误差函数。我们可以将温度分布写为：\n$$ T(x,t) = A \\, \\mathrm{erf}\\left(\\frac{x}{2\\sqrt{\\alpha t}}\\right) + B $$\n常数 $A$ 和 $B$ 由边界条件确定。\n在 $x=0$ 处，$\\eta=0$。由条件 $T(0,t)=T_0$ 可得：\n$$ T_0 = A \\, \\mathrm{erf}(0) + B \\implies B = T_0 $$\n在界面 $x=s(t)$ 处，相似性变量为 $\\eta = s(t)/(2\\sqrt{\\alpha t}) = \\lambda$。由条件 $T(s(t),t)=T_m$ 可得：\n$$ T_m = A \\, \\mathrm{erf}(\\lambda) + T_0 \\implies A = \\frac{T_m - T_0}{\\mathrm{erf}(\\lambda)} $$\n因此，固相中的温度分布为：\n$$ T(x,t) = T_0 + (T_m - T_0) \\frac{\\mathrm{erf}(x / (2\\sqrt{\\alpha t}))}{\\mathrm{erf}(\\lambda)} $$\n现在，我们应用斯蒂芬条件。温度对 $x$ 的导数为：\n$$ \\frac{\\partial T}{\\partial x} = (T_m - T_0) \\frac{1}{\\mathrm{erf}(\\lambda)} \\frac{d}{dx} \\left[ \\mathrm{erf}\\left(\\frac{x}{2\\sqrt{\\alpha t}}\\right) \\right] = (T_m - T_0) \\frac{1}{\\mathrm{erf}(\\lambda)} \\frac{2}{\\sqrt{\\pi}} \\exp\\left(-\\left(\\frac{x}{2\\sqrt{\\alpha t}}\\right)^2\\right) \\frac{1}{2\\sqrt{\\alpha t}} $$\n在界面 $x=s(t)$ 处（此时 $\\eta=\\lambda$）计算该导数：\n$$ \\left. \\frac{\\partial T}{\\partial x} \\right|_{x=s(t)} = \\frac{T_m - T_0}{\\sqrt{\\pi \\alpha t} \\, \\mathrm{erf}(\\lambda)} \\exp(-\\lambda^2) $$\n界面推进的速率可以通过对 $s(t)$ 求导得到：\n$$ \\frac{ds}{dt} = \\frac{d}{dt}(2\\lambda\\sqrt{\\alpha t}) = 2\\lambda\\sqrt{\\alpha} \\left(\\frac{1}{2} t^{-1/2}\\right) = \\lambda\\sqrt{\\frac{\\alpha}{t}} $$\n将这些表达式代入斯蒂芬条件 $k (\\partial T / \\partial x) = \\rho \\ell (ds/dt)$：\n$$ k \\left( \\frac{T_m - T_0}{\\sqrt{\\pi \\alpha t} \\, \\mathrm{erf}(\\lambda)} \\exp(-\\lambda^2) \\right) = \\rho \\ell \\left( \\lambda \\sqrt{\\frac{\\alpha}{t}} \\right) $$\n$\\sqrt{t}$ 项被消掉。我们化简并使用定义 $\\alpha = k/(\\rho c)$：\n$$ k (T_m - T_0) \\exp(-\\lambda^2) = \\rho \\ell \\lambda \\alpha \\sqrt{\\pi} \\, \\mathrm{erf}(\\lambda) $$\n$$ k (T_m - T_0) \\exp(-\\lambda^2) = \\rho \\ell \\lambda \\frac{k}{\\rho c} \\sqrt{\\pi} \\, \\mathrm{erf}(\\lambda) $$\n$$ (T_m - T_0) \\exp(-\\lambda^2) = \\frac{\\ell}{c} \\lambda \\sqrt{\\pi} \\, \\mathrm{erf}(\\lambda) $$\n重新整理得到一个关于 $\\lambda$ 的超越方程：\n$$ \\frac{c(T_m - T_0)}{\\ell} = \\sqrt{\\pi} \\lambda \\exp(\\lambda^2) \\mathrm{erf}(\\lambda) $$\n等式左边是斯蒂芬数 $\\mathrm{Ste} = c(T_m-T_0)/\\ell$。因此，$\\lambda$ 是以下方程的正根：\n$$ \\mathrm{Ste} = \\sqrt{\\pi} \\lambda \\exp(\\lambda^2) \\mathrm{erf}(\\lambda) $$\n当从 $x=0$ 和 $x=L_s$ 推进的两个界面在中面相遇时，凝固在时间 $t_f$ 完成。这意味着 $s(t_f) = L_s/2$。\n使用 $s(t)$ 的表达式：\n$$ 2\\lambda\\sqrt{\\alpha t_f} = \\frac{L_s}{2} $$\n解出完成时间 $t_f$：\n$$ \\sqrt{t_f} = \\frac{L_s}{4\\lambda\\sqrt{\\alpha}} $$\n$$ t_f = \\frac{L_s^2}{16 \\lambda^2 \\alpha} $$\n这就是完成时间的最终解析表达式。常数 $\\lambda$ 由材料性质和温度条件通过涉及斯蒂芬数的超越方程确定。", "answer": "$$\\boxed{\\frac{L_s^2}{16 \\lambda^2 \\alpha}}$$", "id": "2523101"}, {"introduction": "在实际工程应用和自然现象中，相变过程很少发生在理想的平直界面上。几何形状，特别是尖角等奇点，对局部传热速率和相变动力学有着显著影响。本练习通过分析楔形角点附近的准静态温度场，探讨几何形状如何调控热通量，让你从根本上理解为何固化过程在凸角处会减慢，而在凹角处会加速，从而建立起对复杂几何形状中相变行为的深刻物理直觉。[@problem_id:2523103]", "problem": "一个平面的单相凝固过程，由冷却两条相交形成一个角的直线边界而引发。设两条边界相交于一点，该点取为极坐标系的原点，内部张角为 $\\theta_0$，角坐标 $\\phi \\in (0, \\theta_0)$。在时间 $t=0$ 时，两个边界 $\\phi=0$ 和 $\\phi=\\theta_0$ 突然被淬冷，并保持在恒定温度 $T_m - \\Delta T$（其中 $\\Delta T > 0$），$T_m$ 为平衡熔化温度。液体初始温度为 $T_m$，并在移动的固液界面前方保持等温 $T_m$（单相近似）。假设在角点附近的局部区域，并且在足够短的时间内（使得角点附近的固相区域相对于任何外部长度尺度都保持很小），固相中的热传导可以很好地近似为准稳态，因此固相中的温度场 $T(r,\\phi)$ 满足 Laplace 方程。局部法向界面速度 $V_n$ 由 Stefan 能量平衡（涉及潜热 $L$、密度 $\\rho$ 和热导率 $k$）决定，固相中的热通量遵循傅里叶定律。\n\n关注角点附近 $r \\to 0$ 时的局部行为，并根据界面处的能量守恒控制方程以及楔形区域内 $T$ 的调和性质进行推理。下列哪个陈述是正确的？\n\nA. 在楔形区域两侧给定的 Dirichlet 冷却条件下，角点处的领先阶调和解表明，当 $r \\to 0$ 时，温度梯度大小的行为类似于 $|\\nabla T| \\sim C r^{\\pi/\\theta_0-1}$，其中常数 $C$ 由 $\\Delta T$ 和几何形状确定。\n\nB. 对于 $0  \\theta_0  \\pi$ 的凸角，界面在局部被角点所延滞：当 $r \\to 0$ 时，法向速度 $V_n$ 趋于 $0$。\n\nC. 对于 $\\pi  \\theta_0  2\\pi$ 的凹角（re-entrant corner），当 $r \\to 0$ 时，热通量大小 $|\\mathbf{q}|$ 保持有界，因此界面法向速度 $V_n$ 在角点附近保持有限。\n\nD. Stefan 平衡将 $V_n$ 与法向热通量除以 $\\rho L$ 联系起来，因此如果在此单相、准稳态模型中，局部热通量在凹角附近发散，那么当 $r \\to 0$ 时，$V_n$ 在形式上可以变为无界。\n\nE. 对于平直壁极限 $\\theta_0=\\pi$，角点退化为一条直线边界，并且当 $r \\to 0$ 时，温度梯度呈现对数发散，即 $|\\nabla T| \\sim |\\ln r|$。", "solution": "问题陈述需要进行验证。\n\n### 步骤 1：提取已知条件\n- 过程：平面单相凝固。\n- 几何：两条相交的直线边界形成一个角，内部张角为 $\\theta_0$。\n- 坐标系：极坐标 $(r, \\phi)$，原点位于角点。角域为 $\\phi \\in (0, \\theta_0)$。\n- 初始条件 ($t=0$)：液体处于平衡熔化温度 $T_m$。两个边界（$\\phi=0$ 和 $\\phi=\\theta_0$）被淬冷至 $T = T_m - \\Delta T$，其中 $\\Delta T > 0$。\n- 近似：\n    - 单相：液体在 $T_m$ 处是等温的。\n    - 固相中的准稳态热传导：温度场 $T(r, \\phi)$ 满足 Laplace 方程，$\\nabla^2 T = 0$。\n    - 局部分析：考虑 $r \\to 0$ 时的行为。\n- 控制定律：\n    - 界面处的 Stefan 能量平衡：决定了法向界面速度 $V_n$。\n    - 固相中热通量的 Fourier 定律：$\\mathbf{q} = -k \\nabla T$。\n- 物理常数：潜热 $L$，密度 $\\rho$，热导率 $k$。\n- 目标：分析 $r \\to 0$ 时的局部行为，以确定正确的陈述。\n\n### 步骤 2：使用提取的已知条件进行验证\n该问题描述了楔形几何中 Stefan 问题的一个准稳态近似。这是热传导和凝固理论领域的一个典型问题。\n- **科学依据**：该模型基于热传导的基本原理：用于稳态传导的 Laplace 方程和用于相变界面能量平衡的 Stefan 条件。准稳态假设在时间较短或材料的 Stefan 数 $Ste = c_p \\Delta T / L$ 较小（其中 $c_p$ 是比热）时有效。该问题在科学上是合理的。\n- **适定性**：该问题提供了一个偏微分方程（$\\nabla^2 T=0$）和固定壁（$\\phi=0, \\theta_0$）上的边界条件。虽然完整的自由边界问题很复杂，但问题只要求 $r \\to 0$ 时的局部渐近行为。这种局部行为主要由角点几何形状和相邻壁上的边界条件决定，并且可以使用分离变量法稳健地确定，这是求解带角点区域中椭圆方程的标准技术。\n- **客观性**：该问题使用精确、客观和标准的科学术语进行陈述。\n\n### 步骤 3：结论与行动\n问题陈述是有效的。这是一个数学物理学中定义明确的问题，可以使用既定方法进行分析。将推导解答。\n\n### 温度场及其梯度的推导\n该问题要求在楔形固相区域中求解 Laplace 方程。设固相中的温度为 $T(r, \\phi)$。冷却壁上的边界条件为 $T(r, 0) = T_m - \\Delta T$ 和 $T(r, \\theta_0) = T_m - \\Delta T$。固液界面的温度为 $T_m$。\n\n为了简化壁上的边界条件，我们定义一个平移的温度场 $u(r, \\phi) = T(r, \\phi) - (T_m - \\Delta T)$。这个新场 $u$ 也满足 Laplace 方程 $\\nabla^2 u = 0$，并且在壁上具有齐次边界条件：\n$$ u(r, 0) = 0 $$\n$$ u(r, \\theta_0) = 0 $$\n在固液界面处，温度为 $T=T_m$，因此 $u = T_m - (T_m - \\Delta T) = \\Delta T$。\n\n极坐标下的 Laplace 方程为：\n$$ \\frac{1}{r} \\frac{\\partial}{\\partial r} \\left( r \\frac{\\partial u}{\\partial r} \\right) + \\frac{1}{r^2} \\frac{\\partial^2 u}{\\partial \\phi^2} = 0 $$\n使用分离变量法，我们寻求形式为 $u(r, \\phi) = R(r) \\Phi(\\phi)$ 的解。在原点 ($r=0$) 处正则且满足齐次壁边界条件的通解是以下形式的叠加：\n$$ u(r, \\phi) = \\sum_{n=1}^{\\infty} A_n r^{n\\pi/\\theta_0} \\sin\\left(\\frac{n\\pi\\phi}{\\theta_0}\\right) $$\n其中 $A_n$ 是常数。\n\n对于 $r \\to 0$ 时的局部行为, 解由 $r$ 的最小正幂次项主导，即对应于 $n=1$ 的项：\n$$ u(r, \\phi) \\approx A_1 r^{\\pi/\\theta_0} \\sin\\left(\\frac{\\pi\\phi}{\\theta_0}\\right) $$\n因此，角点附近的温度场为：\n$$ T(r, \\phi) \\approx (T_m - \\Delta T) + A_1 r^{\\pi/\\theta_0} \\sin\\left(\\frac{\\pi\\phi}{\\theta_0}\\right) $$\n常数 $A_1$ 由全局解确定，通过在离角点某个特征距离处匹配界面条件 $u=\\Delta T$ 来得到。它将取决于 $\\Delta T$ 和一个长度尺度。\n\n温度场的梯度为 $\\nabla T = \\nabla u$。对于领先阶项：\n$$ \\nabla u = \\frac{\\partial u}{\\partial r} \\mathbf{\\hat{r}} + \\frac{1}{r} \\frac{\\partial u}{\\partial \\phi} \\mathbf{\\hat{\\phi}} $$\n$$ \\frac{\\partial u}{\\partial r} \\approx A_1 \\left(\\frac{\\pi}{\\theta_0}\\right) r^{\\pi/\\theta_0 - 1} \\sin\\left(\\frac{\\pi\\phi}{\\theta_0}\\right) $$\n$$ \\frac{1}{r} \\frac{\\partial u}{\\partial \\phi} \\approx \\frac{1}{r} A_1 r^{\\pi/\\theta_0} \\left(\\frac{\\pi}{\\theta_0}\\right) \\cos\\left(\\frac{\\pi\\phi}{\\theta_0}\\right) = A_1 \\left(\\frac{\\pi}{\\theta_0}\\right) r^{\\pi/\\theta_0 - 1} \\cos\\left(\\frac{\\pi\\phi}{\\theta_0}\\right) $$\n梯度的模为：\n$$ |\\nabla T| = |\\nabla u| \\approx \\sqrt{\\left(A_1 \\frac{\\pi}{\\theta_0} r^{\\pi/\\theta_0 - 1} \\sin\\left(\\frac{\\pi\\phi}{\\theta_0}\\right)\\right)^2 + \\left(A_1 \\frac{\\pi}{\\theta_0} r^{\\pi/\\theta_0 - 1} \\cos\\left(\\frac{\\pi\\phi}{\\theta_0}\\right)\\right)^2} $$\n$$ |\\nabla T| \\approx \\left| A_1 \\frac{\\pi}{\\theta_0} \\right| r^{\\pi/\\theta_0 - 1} \\sqrt{\\sin^2\\left(\\frac{\\pi\\phi}{\\theta_0}\\right) + \\cos^2\\left(\\frac{\\pi\\phi}{\\theta_0}\\right)} = C r^{\\pi/\\theta_0-1} $$\n其中 $C = |A_1 \\pi/\\theta_0|$ 是一个常数。\n\n界面处的 Stefan 能量平衡为 $\\rho L V_n = -k (\\nabla T \\cdot \\mathbf{n})$，其中 $\\mathbf{n}$ 是从固相指向液相的单位法向量。这可以写成 $V_n = |\\mathbf{q} \\cdot \\mathbf{n}| / (\\rho L)$，其中 $\\mathbf{q} = -k \\nabla T$。\n\n### 逐项分析\n\n**A. 在楔形区域两侧给定的 Dirichlet 冷却条件下，角点处的领先阶调和解表明，当 $r \\to 0$ 时，温度梯度大小的行为类似于 $|\\nabla T| \\sim C r^{\\pi/\\theta_0-1}$，其中常数 $C$ 由 $\\Delta T$ 和几何形状确定。**\n我的推导表明 $|\\nabla T| \\propto r^{\\pi/\\theta_0-1}$。这是在两侧具有 Dirichlet 条件的楔形区域中，调和函数梯度奇点的标准结果。比例常数 $C$ 取决于系数 $A_1$，而 $A_1$ 由界面上的边界条件（$u=\\Delta T$）和区域的几何形状（包括楔角 $\\theta_0$）确定。因此，$C$ 由 $\\Delta T$ 和几何形状设定。\n**结论：正确。**\n\n**B. 对于 $0  \\theta_0  \\pi$ 的凸角，界面在局部被角点所延滞：当 $r \\to 0$ 时，法向速度 $V_n$ 趋于 $0$。**\n对于凸角，角度 $\\theta_0$ 在范围 $(0, \\pi)$ 内。这意味着比率 $\\pi/\\theta_0 > 1$。因此，梯度标度律中的指数 $\\pi/\\theta_0 - 1$ 为正。当 $r \\to 0$ 时，项 $r^{\\pi/\\theta_0 - 1}$ 趋于 $0$。\n因此，当 $r \\to 0$ 时， $|\\nabla T| \\to 0$。热通量大小 $|\\mathbf{q}| = k |\\nabla T|$ 也趋于 $0$。\n根据 Stefan 条件，$V_n = |\\mathbf{q} \\cdot \\mathbf{n}| / (\\rho L) \\le |\\mathbf{q}| / (\\rho L)$。由于 $|\\mathbf{q}| \\to 0$，法向界面速度 $V_n$ 在 $r \\to 0$ 时也必须趋于 $0$。这表明凝固在凸角附近被延滞。\n**结论：正确。**\n\n**C. 对于 $\\pi  \\theta_0  2\\pi$ 的凹角（re-entrant corner），当 $r \\to 0$ 时，热通量大小 $|\\mathbf{q}|$ 保持有界，因此界面法向速度 $V_n$ 在角点附近保持有限。**\n对于凹角，角度 $\\theta_0$ 在范围 $(\\pi, 2\\pi)$ 内。这意味着比率 $\\pi/\\theta_0  1$。指数 $\\pi/\\theta_0 - 1$ 是负的。\n当 $r \\to 0$ 时，项 $r^{\\pi/\\theta_0-1}$ 发散到无穷大。\n因此，当 $r \\to 0$ 时 $|\\nabla T| \\to \\infty$。热通量大小 $|\\mathbf{q}| = k |\\nabla T|$ 也发散。该陈述声称热通量大小保持有界。这是错误的。凹角会汇聚热通量，在理想化模型中导致奇点。\n**结论：不正确。**\n\n**D. Stefan 平衡将 $V_n$ 与法向热通量除以 $\\rho L$ 联系起来，因此如果在此单相、准稳态模型中，局部热通量在凹角附近发散，那么当 $r \\to 0$ 时，$V_n$ 在形式上可以变为无界。**\nStefan 平衡为 $V_n = q_n / (\\rho L) = (\\mathbf{q} \\cdot \\mathbf{n}) / (\\rho L)$。如选项 C 的分析所确定，对于凹角（$\\theta_0 > \\pi$），当 $r \\to 0$ 时，热通量大小 $|\\mathbf{q}|$ 发散。除非点积 $\\mathbf{q} \\cdot \\mathbf{n}$ 恰好以抵消 $|\\mathbf{q}|$ 发散的方式趋于零（通常情况并非如此），否则法向通量 $q_n$ 也会发散。发散的法向热通量 $q_n$ 直接导致发散的或无界的界面速度 $V_n$。措辞“在形式上可以变为无界”是恰当的，因为这样的奇点预示着简化假设（如准稳态）在真实物理系统中可能失效，但它在该模型的框架内是正确的预测。\n**结论：正确。**\n\n**E. 对于平直壁极限 $\\theta_0=\\pi$，角点退化为一条直线边界，并且当 $r \\to 0$ 时，温度梯度呈现对数发散，即 $|\\nabla T| \\sim |\\ln r|$。**\n在 $\\theta_0 = \\pi$ 的情况下，角点变为一条直线。这对应于一个一维平面凝固问题。对于准稳态模型，固相中的温度分布是线性的，$T(y) = a y + b$。温度梯度是常数，$dT/dy=a$。梯度大小 $|\\nabla T| = |a|$。它不依赖于位置。\n或者，使用一般标度律 $|\\nabla T| \\propto r^{\\pi/\\theta_0-1}$，设定 $\\theta_0 = \\pi$ 得到指数为 $\\pi/\\pi - 1 = 0$。因此， $|\\nabla T| \\propto r^0 = 1$，这意味着梯度是常数，与一维分析一致。\n该陈述声称存在对数发散，这是不正确的。该 Dirichlet 边值问题的领先阶分析并未预测出对数行为。\n**结论：不正确。**", "answer": "$$\\boxed{ABD}$$", "id": "2523103"}, {"introduction": "对于大多数实际的斯蒂芬问题，由于其复杂的几何形状、边界条件或材料属性，解析解是无法获得的，因此必须依赖于数值方法。本练习将指导你实现一个强大且广泛应用的固定网格数值方法——焓法。通过将潜热包含在焓-温度关系中，该方法巧妙地避免了显式追踪移动界面的复杂性，将相变问题转化为一个非线性热传导问题来求解。完成这个编程实践将使你掌握解决复杂相变传热问题的一项关键计算技能。[@problem_id:2523100]", "problem": "考虑在固定空间区间上使用固定网格焓法求解的一维双相 Stefan 问题。设 $x \\in [0,L]$ 表示空间， $t \\ge 0$ 表示时间。温度场为 $T(x,t)$，体积焓为 $H(x,t)$。热传导遵循能量守恒和 Fourier 定律，两者共同导出焓平衡方程\n$$\n\\frac{\\partial H}{\\partial t} \\;=\\; \\frac{\\partial}{\\partial x}\\!\\left(k\\,\\frac{\\partial T}{\\partial x}\\right),\n$$\n其中 $k$ 是热导率，假定为常数且在两相中相同。焓 $H$ 与温度 $T$ 通过一个严格递增的分段线性函数相关联，该函数通过熔化温度附近一个狭窄的糊状区间来包含潜热。具体来说，固定熔化温度 $T_m$、糊状半宽度 $\\Delta T/2 > 0$、体积热容 $C$（假定为常数且在固相和液相中相同）以及单位体积潜热 $L_v > 0$。定义固相线和液相线温度\n$$\nT_s \\;=\\; T_m \\;-\\; \\frac{\\Delta T}{2},\\qquad\nT_l \\;=\\; T_m \\;+\\; \\frac{\\Delta T}{2}.\n$$\n定义焓-温度关系 $H(T)$ 如下\n$$\nH(T) \\;=\\;\n\\begin{cases}\nC\\,T,  T \\le T_s, \\\\\nC\\,T \\;+\\; L_v\\,\\dfrac{T - T_s}{\\Delta T},  T_s  T  T_l, \\\\\nC\\,T \\;+\\; L_v,  T \\ge T_l.\n\\end{cases}\n$$\n该函数是可逆的；给定 $H$，可通过对上述分段定义求逆来恢复 $T$。在 $x=0$ 处施加 Dirichlet 边界条件 $T(0,t)=T_{\\text{left}}$，在 $x=L$ 处施加绝热（法向热通量为零）的 Neumann 边界条件 $\\partial T/\\partial x \\big|_{x=L}=0$。初始温度是均匀的， $T(x,0)=T_{\\text{init}}$。\n\n你的任务是实现一个固定网格算法，在包含 $N$ 个节点的均匀网格上，对 $H$ 进行显式时间推进，并在每个时间步通过对 $H(T)$ 求逆来恢复 $T$。对空间二阶导数使用中心有限差分，对 $H$ 使用显式前向 Euler 时间积分器。通过直接设置边界温度来施加 Dirichlet 边界条件，通过零梯度条件来施加绝热边界条件。将固-液界面位置隐式地追踪为 $T(x,t)$ 从左侧穿越 $T_m$ 的位置。如果在 $[0,L]$ 内没有穿越，则当所有 $x$ 的 $T(x,t) \\ge T_m$ 时，将界面位置定义为 $0$；当所有 $x$ 的 $T(x,t) \\le T_m$ 时，定义为 $L$。当穿越位置位于节点之间时，使用相邻网格点之间的线性插值来估计该位置。\n\n从上述基本定律出发，设计你的算法以实现以下功能：\n- 通过焓平衡方程演化 $H$，\n- 通过对 $H(T)$ 进行逐点求逆来恢复 $T$，\n- 在每个时间步一致地施加边界条件，\n- 从计算出的温度场中隐式地计算界面位置 $s(t)$。\n\n将你的算法实现为一个完整的程序，运行以下测试套件。对于每个测试用例，模拟到时间 $t_{\\text{end}}$，并返回以米为单位的界面位置 $s(t_{\\text{end}})$。使用所提供的精确参数值；所有量均采用国际单位制（SI）。网格是均匀的，有 $N$ 个节点，间距为 $\\Delta x = L/(N-1)$。精确执行 $n_{\\text{steps}} = \\lfloor t_{\\text{end}}/\\Delta t \\rfloor$ 步，步长为 $\\Delta t$，因此模拟的最终时间为 $n_{\\text{steps}}\\,\\Delta t$。该测试套件涵盖一个典型的凝固案例、一个高潜热案例以及一个熔化案例：\n\n- 测试用例 A（凝固，中等潜热）：\n  - $L = 0.1$,\n  - $N = 201$,\n  - $k = 2.0$,\n  - $C = 2.0 \\times 10^{6}$,\n  - $L_v = 3.34 \\times 10^{8}$,\n  - $T_m = 0.0$,\n  - $\\Delta T = 0.2$,\n  - $T_{\\text{left}} = -10.0$,\n  - $T_{\\text{init}} = 10.0$,\n  - $t_{\\text{end}} = 200.0$,\n  - $\\Delta t = 0.05$.\n\n- 测试用例 B（凝固，极大潜热）：\n  - $L = 0.1$,\n  - $N = 201$,\n  - $k = 2.0$,\n  - $C = 2.0 \\times 10^{6}$,\n  - $L_v = 1.0 \\times 10^{9}$,\n  - $T_m = 0.0$,\n  - $\\Delta T = 0.2$,\n  - $T_{\\text{left}} = -10.0$,\n  - $T_{\\text{init}} = 10.0$,\n  - $t_{\\text{end}} = 200.0$,\n  - $\\Delta t = 0.05$.\n\n- 测试用例 C（熔化，中等潜热）：\n  - $L = 0.05$,\n  - $N = 201$,\n  - $k = 1.5$,\n  - $C = 2.0 \\times 10^{6}$,\n  - $L_v = 3.34 \\times 10^{8}$,\n  - $T_m = 0.0$,\n  - $\\Delta T = 0.2$,\n  - $T_{\\text{left}} = 10.0$,\n  - $T_{\\text{init}} = -5.0$,\n  - $t_{\\text{end}} = 100.0$,\n  - $\\Delta t = 0.02$.\n\n科学真实性要求：\n- 将 $k$、$C$ 和 $L_v$ 视为在空间和时间上恒定且在两相中相同的常数。\n- 使用上文定义的分段线性函数 $H(T)$ 及其精确的逐点逆函数从 $H$ 恢复 $T$。\n- 确保算法在每个时间步都施加边界条件。\n\n角度单位不适用。所有界面位置必须以米为单位报告。你的程序应生成单行输出，其中包含一个用方括号括起来的逗号分隔列表的结果（例如，“[resultA,resultB,resultC]”），其中每个条目都是一个等于 $s(t_{\\text{end}})$（单位为米）的浮点数，四舍五入到六位小数。", "solution": "问题已经过验证。\n\n**步骤1：提取已知条件**\n- **控制方程**：$\\frac{\\partial H}{\\partial t} = \\frac{\\partial}{\\partial x}\\!(k\\,\\frac{\\partial T}{\\partial x})$\n- **域**：空间 $x \\in [0,L]$，时间 $t \\ge 0$。\n- **常数**：热导率 $k$，体积热容 $C$，单位体积潜热 $L_v$，熔化温度 $T_m$，糊状半宽度 $\\Delta T/2$。\n- **相变温度**：$T_s = T_m - \\Delta T/2$, $T_l = T_m + \\Delta T/2$。\n- **焓-温度关系 $H(T)$**：\n$$\nH(T) = \\begin{cases}\nC\\,T,  T \\le T_s, \\\\\nC\\,T + L_v\\,\\frac{T - T_s}{\\Delta T},  T_s  T  T_l, \\\\\nC\\,T + L_v,  T \\ge T_l.\n\\end{cases}\n$$\n- **边界条件**：$T(0,t)=T_{\\text{left}}$ (Dirichlet)，$\\partial T/\\partial x \\big|_{x=L}=0$ (Neumann)。\n- **初始条件**：$T(x,0)=T_{\\text{init}}$。\n- **数值格式**：均匀网格，有 $N$ 个节点，间距为 $\\Delta x = L/(N-1)$。使用步长为 $\\Delta t$ 的显式前向 Euler 时间积分法和空间中心差分法。\n- **时间积分**：步数为 $n_{\\text{steps}} = \\lfloor t_{\\text{end}}/\\Delta t \\rfloor$，步长为 $\\Delta t$。\n- **界面位置 $s(t)$**：$T(x,t) = T_m$ 所在的位置，通过线性插值找到。若所有 $x$ 的 $T \\ge T_m$，则 $s=0$。若所有 $x$ 的 $T \\le T_m$，则 $s=L$。\n- **测试用例**：为用例 A、B 和 C 提供了所有常数和数值参数的具体值。\n\n**步骤2：使用提取的已知条件进行验证**\n该问题具有科学依据，描述了使用焓法求解的标准一维 Stefan 问题，这是计算传热学中一种成熟的技术。所有必要的方程、初始条件、边界条件和材料属性都已指定，使得该问题自成体系且完整。数值离散化方法（显式有限差分）已明确定义。稳定性分析证实，所有测试用例所选择的时间步长均满足显式热方程的 Courant-Friedrichs-Lewy (CFL) 条件，从而保证了数值稳定性。例如，在用例 A 中，稳定性极限为 $\\Delta t \\le (\\Delta x)^2 / (2\\alpha) = (5 \\times 10^{-4})^2 / (2 \\times 10^{-6}) = 0.125$ s，而选择的 $\\Delta t = 0.05$ s 远低于此极限。该问题是客观、适定且非平凡的。\n\n**步骤3：结论与行动**\n该问题被判定为**有效**。将构建一个解决方案。\n\n该问题的解决方案需要设计一个基于有限差分法的数值算法，以求解给定的焓偏微分方程。算法流程如下。\n\n**1. 控制方程的离散化**\n将域离散化为具有 $N$ 个节点的均匀网格，索引为 $i=0, 1, \\dots, N-1$。节点 $i$ 的空间坐标为 $x_i = i \\Delta x$，其中 $\\Delta x = L/(N-1)$。在节点 $i$ 和时间步 $n$ 处的温度和焓分别表示为 $T_i^n$ 和 $H_i^n$。\n\n控制方程为\n$$\n\\frac{\\partial H}{\\partial t} = k \\frac{\\partial^2 T}{\\partial x^2}\n$$\n我们对时间导数应用前向 Euler 格式，对空间二阶导数应用中心差分格式。对于内部节点 $i \\in \\{1, \\dots, N-2\\}$，离散化方程为：\n$$\n\\frac{H_i^{n+1} - H_i^n}{\\Delta t} = k \\frac{T_{i+1}^n - 2T_i^n + T_{i-1}^n}{(\\Delta x)^2}\n$$\n重新整理以获得焓的显式更新公式：\n$$\nH_i^{n+1} = H_i^n + \\frac{k \\Delta t}{(\\Delta x)^2} (T_{i+1}^n - 2T_i^n + T_{i-1}^n)\n$$\n\n**2. 焓-温度本构关系**\n焓法的核心是焓 $H$ 和温度 $T$ 之间的关系。为了推进模拟，我们首先更新 $H$，然后从更新后的 $H$ 中恢复新的温度 $T$。这需要逆函数 $T(H)$，我们从给定的分段线性函数 $H(T)$ 推导得出。\n\n首先，我们定义在固相线和液相线温度 $T_s = T_m - \\Delta T/2$ 和 $T_l = T_m + \\Delta T/2$ 处的焓值：\n$$\nH_s = H(T_s) = C T_s\n$$\n$$\nH_l = H(T_l) = C T_l + L_v\n$$\n通过对 $H(T)$ 函数的每一段求逆，我们得到 $T(H)$：\n$$\nT(H) =\n\\begin{cases}\nH/C  \\text{若 } H \\le H_s \\quad \\text{(固相)} \\\\\n\\frac{H \\Delta T + L_v T_s}{L_v + C \\Delta T}  \\text{若 } H_s  H  H_l \\quad \\text{(糊状)} \\\\\n(H - L_v)/C  \\text{若 } H \\ge H_l \\quad \\text{(液相)}\n\\end{cases}\n$$\n在每个时间步，将此函数逐点应用于焓数组 $H^{n+1}$，以获得温度数组 $T^{n+1}$。\n\n**3. 边界条件**\n边界节点 $i=0$ 和 $i=N-1$ 需要特殊处理。\n\n- **$x=0$ 处的 Dirichlet 条件**：温度是固定的，$T(0,t) = T_{\\text{left}}$。在每个时间步 $n+1$，我们通过设置 $T_0^{n+1} = T_{\\text{left}}$ 来施加此条件。为保持状态变量之间的一致性，此节点的焓也必须更新以对应此固定温度：$H_0^{n+1} = H(T_{\\text{left}})$，使用给定的 $H(T)$ 函数计算。\n\n- **$x=L$ 处的 Neumann 条件**：零通量条件 $\\partial T/\\partial x = 0$ 使用二阶精度的虚拟点方法实现。我们设想在 $x_N = x_{N-1} + \\Delta x$ 处有一个虚拟节点，使得在 $x_{N-1}$ 处的梯度中心差分为零：$\\frac{T_N^n - T_{N-2}^n}{2\\Delta x} = 0$，这意味着 $T_N^n = T_{N-2}^n$。将此代入节点 $i=N-1$ 处二阶导数的中心差分公式：\n$$\n\\frac{\\partial^2 T}{\\partial x^2}\\bigg|_{i=N-1} \\approx \\frac{T_N^n - 2T_{N-1}^n + T_{N-2}^n}{(\\Delta x)^2} = \\frac{T_{N-2}^n - 2T_{N-1}^n + T_{N-2}^n}{(\\Delta x)^2} = \\frac{2(T_{N-2}^n - T_{N-1}^n)}{(\\Delta x)^2}\n$$\n因此，最右侧节点的焓更新公式为：\n$$\nH_{N-1}^{n+1} = H_{N-1}^n + \\frac{2 k \\Delta t}{(\\Delta x)^2} (T_{N-2}^n - T_{N-1}^n)\n$$\n\n**4. 界面位置追踪**\n固-液界面位置 $s(t)$ 被定义为 $T(x,t) = T_m$ 的位置。在给定时间计算出温度分布 $T^n$ 后，我们从左侧开始搜索第一个温度穿越 $T_m$ 的网格区间 $[x_i, x_{i+1}]$。这发生在 $(T_i^n - T_m)(T_{i+1}^n - T_m) \\le 0$ 的地方。如果找到这样的区间，界面位置 $s$ 通过线性插值估算：\n$$\ns = x_i + \\Delta x \\frac{T_m - T_i^n}{T_{i+1}^n - T_i^n}\n$$\n如果不存在这样的穿越，问题规定了位置：如果所有温度 $T_i^n \\ge T_m$（完全为液相/糊状），则 $s=0$；如果所有 $T_i^n \\le T_m$（完全为固相/糊状），则 $s=L$。\n\n**5. 算法总结**\n总体算法如下：\n1.  **初始化**：定义所有物理和数值参数。创建空间网格 $x$。将温度数组 $T$ 初始化为 $T_{\\text{init}}$，然后施加边界条件 $T_0 = T_{\\text{left}}$。根据初始的 $T$ 使用 $H(T)$ 关系计算初始焓数组 $H$。\n2.  **时间推进**：循环 $n_{\\text{steps}}$ 次迭代。\n    a. 基于当前温度分布 $T^n$，使用内部节点和右边界节点的显式更新规则计算下一个焓数组 $H^{n+1}$。\n    b. 通过逐点应用逆函数 $T(H^{n+1})$ 恢复新的温度数组 $T^{n+1}$。\n    c. 施加 Dirichlet 边界条件：设置 $T_0^{n+1} = T_{\\text{left}}$ 并更新 $H_0^{n+1} = H(T_{\\text{left}})$。\n    d. 更新后的数组 $H^{n+1}$ 和 $T^{n+1}$ 成为下一次迭代的当前数组。\n3.  **最终计算**：循环结束后，根据最终的温度分布，使用插值逻辑计算最终的界面位置 $s(t_{\\text{end}})$。", "answer": "```python\nimport numpy as np\n\ndef get_H_from_T(T_arr, C, Lv, Tm, DT):\n    \"\"\"\n    Computes volumetric enthalpy H from temperature T.\n    T_arr can be a scalar or a numpy array.\n    \"\"\"\n    # Ensure T_arr is an array for consistent processing\n    T = np.atleast_1d(T_arr)\n    H = np.zeros_like(T, dtype=np.float64)\n\n    Ts = Tm - DT / 2.0\n    Tl = Tm + DT / 2.0\n\n    solid_mask = T = Ts\n    liquid_mask = T = Tl\n    mushy_mask = (~solid_mask)  (~liquid_mask)\n\n    H[solid_mask] = C * T[solid_mask]\n    H[liquid_mask] = C * T[liquid_mask] + Lv\n    H[mushy_mask] = C * T[mushy_mask] + Lv * (T[mushy_mask] - Ts) / DT\n\n    return H\n\ndef get_T_from_H(H_arr, C, Lv, Tm, DT):\n    \"\"\"\n    Computes temperature T from volumetric enthalpy H.\n    H_arr can be a scalar or a numpy array.\n    \"\"\"\n    H = np.atleast_1d(H_arr)\n    T = np.zeros_like(H, dtype=np.float64)\n\n    Ts = Tm - DT / 2.0\n    Tl = Tm + DT / 2.0\n    \n    Hs = C * Ts\n    Hl = C * Tl + Lv\n\n    solid_mask = H = Hs\n    liquid_mask = H = Hl\n    mushy_mask = (~solid_mask)  (~liquid_mask)\n\n    T[solid_mask] = H[solid_mask] / C\n    T[liquid_mask] = (H[liquid_mask] - Lv) / C\n    T[mushy_mask] = (H[mushy_mask] * DT + Lv * Ts) / (Lv + C * DT)\n\n    return T\n\ndef find_interface_position(x, T, Tm, L):\n    \"\"\"\n    Finds the interface position s where T(s) = Tm.\n    \"\"\"\n    if np.all(T = Tm):\n        return 0.0\n    if np.all(T = Tm):\n        return L\n\n    cross_indices = np.where((T[:-1] - Tm) * (T[1:] - Tm) = 0)[0]\n    \n    if len(cross_indices) == 0:\n        # Fallback, though the np.all checks should handle this.\n        return 0.0 if T[0]  Tm else L\n\n    i = cross_indices[0]\n    T_i, T_i1 = T[i], T[i+1]\n    x_i, x_i1 = x[i], x[i+1]\n    \n    if T_i == T_i1:\n        return x_i\n    \n    # Linear interpolation\n    s = x_i + (x_i1 - x_i) * (Tm - T_i) / (T_i1 - T_i)\n    return s\n\ndef run_simulation(params):\n    \"\"\"\n    Runs a single simulation case for the Stefan problem.\n    \"\"\"\n    L, N, k, C, Lv, Tm, DT, T_left, T_init, t_end, dt = params\n\n    # Discretization parameters\n    dx = L / (N - 1)\n    n_steps = int(t_end / dt)\n    x = np.linspace(0, L, N)\n    \n    # Initial conditions\n    T = np.full(N, T_init, dtype=np.float64)\n    T[0] = T_left  # Boundary condition dominates at t=0, x=0\n    H = get_H_from_T(T, C, Lv, Tm, DT)\n\n    # Pre-calculate constant factor for performance\n    prefactor = k * dt / (dx**2)\n\n    # Time-marching loop\n    for _ in range(n_steps):\n        # Create a copy of H for the update step.\n        H_new = H.copy()\n        \n        # Update enthalpy for interior nodes\n        H_new[1:-1] = H[1:-1] + prefactor * (T[2:] - 2 * T[1:-1] + T[:-2])\n        \n        # Update enthalpy for right boundary (Neumann)\n        H_new[-1] = H[-1] + 2 * prefactor * (T[-2] - T[-1])\n        \n        # Recover new temperature field from new enthalpy field\n        T_new = get_T_from_H(H_new, C, Lv, Tm, DT)\n\n        # Enforce left boundary (Dirichlet)\n        T_new[0] = T_left\n        H_new[0] = get_H_from_T(T_left, C, Lv, Tm, DT)[0]\n        \n        # Update T and H for the next iteration\n        T, H = T_new, H_new\n\n    # Calculate final interface position\n    s_final = find_interface_position(x, T, Tm, L)\n    \n    return s_final\n\ndef solve():\n    \"\"\"\n    Defines and runs the test suite, then prints the formatted results.\n    \"\"\"\n    test_cases = [\n        # Case A (solidification, moderate latent heat)\n        (0.1, 201, 2.0, 2.0e6, 3.34e8, 0.0, 0.2, -10.0, 10.0, 200.0, 0.05),\n        \n        # Case B (solidification, very large latent heat)\n        (0.1, 201, 2.0, 2.0e6, 1.0e9, 0.0, 0.2, -10.0, 10.0, 200.0, 0.05),\n        \n        # Case C (melting, moderate latent heat)\n        (0.05, 201, 1.5, 2.0e6, 3.34e8, 0.0, 0.2, 10.0, -5.0, 100.0, 0.02),\n    ]\n\n    results = []\n    for case in test_cases:\n        s = run_simulation(case)\n        results.append(f\"{s:.6f}\")\n\n    print(f\"[{','.join(results)}]\")\n\nif __name__ == \"__main__\":\n    solve()\n```", "id": "2523100"}]}