{"hands_on_practices": [{"introduction": "维恩位移定律通常作为描述黑体辐射峰值波长与温度之间反比关系的经验法则被介绍。然而，其深刻的物理根源在于普朗克辐射定律。本练习将引导你从第一性原理出发，通过对普朗克光谱辐射度函数进行数学上的最大化，来推导维恩位移定律中的常数。通过这个过程，你不仅将练习处理超越方程的数值方法，还将深入理解基本物理常数 (如 $h$, $c$, $k_{B}$) 如何决定宏观辐射特性，并探讨在现代国际单位制（SI）的定义下，这些常数的不确定性问题 [@problem_id:2538969]。", "problem": "一个温度为绝对温度 $T$ 的漫射等温黑体表面，其单位波长的光谱辐射亮度由 Planck 辐射定律给出。从表示为波长 $\\lambda$ 和温度 $T$ 的函数的光谱辐射亮度 $B_{\\lambda}(T)$ 出发，完成以下任务：\n\n1. 在固定温度 $T$ 的条件下，通过最大化 $B_{\\lambda}(T)$ 关于 $\\lambda$ 的值，推导确定无量纲最大值点 $x^{\\star}$ 的隐式超越条件。其中 $x \\equiv \\frac{h c}{\\lambda k_{B} T}$，$h$ 为 Planck 常数，$c$ 为真空中的光速，$k_{B}$ 为 Boltzmann 常数。\n2. 将由 $\\lambda_{\\text{max}} T = b$ 定义的位移常数 $b$ 用 $h$、$c$、$k_{B}$ 和 $x^{\\star}$ 表示。\n3. 使用以下国际科学理事会数据委员会 (CODATA) 为国际单位制 (SI) 提供的精确值，\n   - $h = 6.62607015\\times 10^{-34}\\ \\text{J}\\cdot\\text{s}$ (焦耳·秒),\n   - $c = 299\\,792\\,458\\ \\text{m}\\cdot \\text{s}^{-1}$ (米·秒⁻¹),\n   - $k_{B} = 1.380649\\times 10^{-23}\\ \\text{J}\\cdot \\text{K}^{-1}$ (焦耳·开尔文⁻¹),\n   通过求解 $x^{\\star}$ 并代入第2部分得到的表达式，计算 $b$ 的数值。将您的最终结果四舍五入至十位有效数字，并以 $\\text{m}\\cdot\\text{K}$ 为单位表示。\n4. 将您计算出的值与广泛使用的参考值 $b \\approx 2.897771955\\times 10^{-3}\\ \\text{m}\\cdot\\text{K}$ 进行比较，并简要评论在当前国际单位制 (SI) 中确定 $b$ 的不确定度的主要来源（或不存在不确定度的原因）。\n\n您的最终答案必须仅为 $b$ 的单个四舍五入后的数值。最终答案中不要包含中间结果。在您的解题过程中陈述所有的推理和中间结果。", "solution": "该问题要求从黑体的光谱辐射亮度的 Planck 定律出发，推导并计算 Wien 位移定律常数 $b$。对问题陈述的验证证实了其科学上的合理性、问题的良态性和客观性。我们开始解题。\n\n单位波长的光谱辐射亮度 $B_{\\lambda}(T)$ 的 Planck 定律由下式给出：\n$$B_{\\lambda}(T) = \\frac{2 h c^2}{\\lambda^5} \\frac{1}{\\exp\\left(\\frac{h c}{\\lambda k_B T}\\right) - 1}$$\n其中 $h$ 是 Planck 常数，$c$ 是光速，$k_B$ 是 Boltzmann 常数，$T$ 是绝对温度，$\\lambda$ 是波长。\n\n为了找到在固定温度 $T$ 下 $B_{\\lambda}(T)$ 达到最大值时的波长 $\\lambda_{\\text{max}}$，我们必须求解方程 $\\frac{d B_{\\lambda}(T)}{d \\lambda} = 0$。\n\n让我们引入无量纲变量 $x \\equiv \\frac{h c}{\\lambda k_B T}$。根据这个定义，我们可以将 $\\lambda$ 表示为 $\\lambda = \\frac{h c}{x k_B T}$。将此代入 $B_{\\lambda}(T)$ 的表达式中，得到：\n$$B_{\\lambda}(T) = \\frac{2 h c^2}{\\left(\\frac{h c}{x k_B T}\\right)^5} \\frac{1}{\\exp(x) - 1} = \\left(\\frac{2 k_B^5 T^5}{h^4 c^3}\\right) \\frac{x^5}{\\exp(x) - 1}$$\n为了找到 $B_{\\lambda}(T)$ 关于 $\\lambda$ 的最大值，我们可以找到其关于 $x$ 的最大值。根据链式法则，$\\frac{d B_{\\lambda}}{d \\lambda} = \\frac{d B_{\\lambda}}{d x} \\frac{d x}{d \\lambda}$。对于有限的 $\\lambda$，导数 $\\frac{d x}{d \\lambda} = -\\frac{h c}{\\lambda^2 k_B T}$ 不为零。因此，条件 $\\frac{d B_{\\lambda}}{d \\lambda} = 0$ 等价于 $\\frac{d B_{\\lambda}}{d x} = 0$。\n\n项 $\\left(\\frac{2 k_B^5 T^5}{h^4 c^3}\\right)$ 是一个关于 $x$ 的常数。因此，我们只需要最大化函数 $f(x) = \\frac{x^5}{\\exp(x) - 1}$。我们计算 $f(x)$ 关于 $x$ 的导数并将其设为零：\n$$\\frac{d f(x)}{d x} = \\frac{d}{d x} \\left( \\frac{x^5}{\\exp(x) - 1} \\right) = \\frac{5x^4(\\exp(x) - 1) - x^5(\\exp(x))}{(\\exp(x) - 1)^2} = 0$$\n对于 $x \\neq 0$ 的非平凡解，分子必须为零：\n$$5x^4(\\exp(x) - 1) - x^5\\exp(x) = 0$$\n两边同除以 $x^4$（因为 $x=0$ 对应于 $\\lambda \\to \\infty$，这是一个最小值点，而不是最大值点）：\n$$5(\\exp(x) - 1) - x\\exp(x) = 0$$\n整理各项，我们得到最大值点 $x^{\\star}$ 的隐式超越条件：\n$$5\\exp(x^{\\star}) - 5 - x^{\\star}\\exp(x^{\\star}) = 0$$\n$$(5 - x^{\\star})\\exp(x^{\\star}) = 5$$\n这可以写成几种等价形式，例如 $x^{\\star} = 5(1 - \\exp(-x^{\\star}))$ 或 $x^{\\star} + 5\\exp(-x^{\\star}) - 5 = 0$。这就完成了问题的第一部分。\n\n对于第二部分，我们将 $x^{\\star}$ 与 Wien 位移常数 $b$ 联系起来。根据定义，$\\lambda_{\\text{max}} T = b$。值 $\\lambda_{\\text{max}}$ 通过以下关系对应于值 $x^{\\star}$：\n$$x^{\\star} = \\frac{h c}{\\lambda_{\\text{max}} k_B T}$$\n将 $\\lambda_{\\text{max}} T = b$ 代入此方程，得到：\n$$x^{\\star} = \\frac{h c}{k_B b}$$\n求解 $b$，我们得到位移常数的表达式：\n$$b = \\frac{h c}{x^{\\star} k_B}$$\n这就完成了第二部分。\n\n对于第三部分，我们必须计算 $b$ 的数值。首先，必须求解超越方程 $x = 5(1 - \\exp(-x))$ 以得到 $x^{\\star}$。这可以通过使用数值求根算法（如 Newton 法）来完成。计算到足够精度的解是：\n$x^{\\star} \\approx 4.965114231744276$\n问题提供了国际单位制 (SI) 中基本常数的以下精确值：\n- $h = 6.62607015 \\times 10^{-34}\\ \\text{J}\\cdot\\text{s}$\n- $c = 299\\,792\\,458\\ \\text{m}\\cdot \\text{s}^{-1}$\n- $k_{B} = 1.380649 \\times 10^{-23}\\ \\text{J}\\cdot \\text{K}^{-1}$\n\n将这些值代入 $b$ 的表达式中：\n$$b = \\frac{(6.62607015 \\times 10^{-34}) \\times (299\\,792\\,458)}{(4.965114231744276) \\times (1.380649 \\times 10^{-23})} \\ \\text{m}\\cdot\\text{K}$$\n$$b \\approx \\frac{1.9864458571489 \\times 10^{-25}}{6.8550920555365 \\times 10^{-23}} \\ \\text{m}\\cdot\\text{K}$$\n$$b \\approx 0.002897771955185 \\ \\text{m}\\cdot\\text{K}$$\n按要求四舍五入至十位有效数字：\n$b \\approx 2.897771955 \\times 10^{-3}\\ \\text{m}\\cdot\\text{K}$\n这就完成了第三部分。\n\n对于最后一部分，我们将我们的结果与参考值 $b \\approx 2.897771955 \\times 10^{-3}\\ \\text{m}\\cdot\\text{K}$ 进行比较。我们计算出的值与参考值在所有十位有效数字上都相匹配。\n\n关于不确定度的评论如下。问题正确地指出，给定的 $h$、$c$ 和 $k_B$ 的国际单位制 (SI) 值是精确的。这反映了2019年国际单位制基本单位的重新定义，其中这些基本常数被赋予了固定的数值，因此根据定义，它们的不确定度为零。常数 $x^{\\star}$ 是一个纯数学常数，是特定超越方程的解，因此可以计算到任意精度，没有不确定度。由于 $b$ 表示为这些精确量的组合（$b = \\frac{h c}{x^{\\star} k_B}$），Wien 位移常数 $b$ 在当前的国际单位制框架内也是一个精确量。从基本原理确定 $b$ 的值不存在不确定度的来源。在2019年国际单位制重新定义之前，像 $h$ 和 $k_B$ 这样的常数是通过实验确定的，并带有测量不确定度，这些不确定度会传递到 $b$ 的计算值中。这次重新定义消除了常数值本身的不确定度来源。现在，任何实验不确定度都与单位（例如千克、开尔文）的复现有关，而不是与基本常数的值有关。", "answer": "$$\\boxed{2.897771955 \\times 10^{-3}}$$", "id": "2538969"}, {"introduction": "在光谱分析中，辐射能量可以按波长或频率等不同变量来分布。一个常见的误区是认为，在不同谱域下，辐射峰值的位置可以通过简单的反比关系 (如 $\\nu_{\\text{peak}} = c / \\lambda_{\\text{peak}}$) 直接转换。本练习旨在通过一个具体的任务——将以纳米为单位的波长谱转换为以太赫兹为单位的频率谱——来揭示这一误解的根源。你将亲手推导变量转换的雅可比行列式，并证明为何谱峰位置会因表示方式的不同而改变，从而深刻理解谱密度函数的数学本质及其在物理测量中的正确应用 [@problem_id:2539036]。", "problem": "一个温度为 $T$ 的漫射、等温黑腔，使用一台光谱仪进行观测。该光谱仪经过校准，可报告每波长增量的光谱半球发射功率 $M_{\\lambda,\\mathrm{nm}}(\\lambda_{\\mathrm{nm}},T)$，单位为 $\\mathrm{W\\, m^{-2}\\, nm^{-1}}$。一位工程师希望将同一光谱重新表示为每频率增量的形式，记作 $M_{\\nu,\\mathrm{THz}}(\\nu_{\\mathrm{THz}},T)$，单位为 $\\mathrm{W\\, m^{-2}\\, THz^{-1}}$。假设该表面行为如理想黑体，且其基本物理原理由 Planck 定律描述。真空中的光速为 $c$，Planck 常数为 $h$，Boltzmann 常数为 $k_B$。\n\n任务：\n1) 从 (i) 黑体辐射的 Planck 定律和 (ii) 在重新参数化下密度函数的变量替换基本法则出发，推导 $M_{\\nu,\\mathrm{THz}}(\\nu_{\\mathrm{THz}},T)$ 关于 $M_{\\lambda,\\mathrm{nm}}(\\lambda_{\\mathrm{nm}},T)$ 和已知常数的显式表达式。您的结果必须显式地体现出对从波长到频率变换的雅可比式（Jacobian）的依赖，以及 $\\mathrm{nm}$ 与 $\\mathrm{m}$ 之间、$\\mathrm{THz}$ 与 $\\mathrm{Hz}$ 之间的单位换算关系。\n\n2) 仅使用 Planck 定律的第一性原理和极值微积分，确定并比较当黑体光谱以波长和频率为参数时其峰值位置。显式地说明为何 $M_{\\nu}(\\nu,T)$ 达到最大值时的频率不等于 $c$ 除以 $M_{\\lambda}(\\lambda,T)$ 达到最大值时的波长，并根据由平稳性条件产生的超越方程的根，求出无量纲比率 $\\left(\\nu_{\\mathrm{peak},\\nu}\\,\\lambda_{\\mathrm{peak},\\lambda}\\right)/c$ 的闭式表达式。\n\n3) 进行数值计算，取 $T = 2500 \\ \\mathrm{K}$, $h = 6.62607015 \\times 10^{-34} \\ \\mathrm{J \\cdot s}$, $k_B = 1.380649 \\times 10^{-23} \\ \\mathrm{J/K}$, 和 $c = 2.99792458 \\times 10^{8} \\ \\mathrm{m/s}$。计算当黑体光谱表示为每频率增量时的峰值频率 $\\nu_{\\mathrm{peak},\\nu}$，并以 $\\mathrm{THz}$ 为单位报告结果。将您的答案四舍五入到四位有效数字。\n\n以 $\\mathrm{THz}$ 为单位表达最终答案。", "solution": "对所述问题进行验证。\n\n**步骤 1：提取已知条件**\n- **系统：** 一个温度为 $T$ 的漫射、等温黑腔。\n- **观测值：** 每波长增量的光谱半球发射功率，$M_{\\lambda,\\mathrm{nm}}(\\lambda_{\\mathrm{nm}},T)$，单位为 $\\mathrm{W\\, m^{-2}\\, nm^{-1}}$。\n- **目标值：** 每频率增量的光谱半球发射功率，$M_{\\nu,\\mathrm{THz}}(\\nu_{\\mathrm{THz}},T)$，单位为 $\\mathrm{W\\, m^{-2}\\, THz^{-1}}$。\n- **物理模型：** 该表面为理想黑体，由 Planck 定律描述。\n- **常数：** 真空中的光速 ($c$)，Planck 常数 ($h$)，Boltzmann 常数 ($k_B$)。\n- **任务3的数值：** $T = 2500 \\ \\mathrm{K}$，$h = 6.62607015 \\times 10^{-34} \\ \\mathrm{J \\cdot s}$，$k_B = 1.380649 \\times 10^{-23} \\ \\mathrm{J/K}$，$c = 2.99792458 \\times 10^{8} \\ \\mathrm{m/s}$。\n- **任务：**\n    1. 推导 $M_{\\nu,\\mathrm{THz}}$ 和 $M_{\\lambda,\\mathrm{nm}}$ 之间的变换法则，并显式表示雅可比式和单位换算。\n    2. 比较黑体光谱在波长和频率表示下的峰值位置，并推导无量纲比率 $(\\nu_{\\mathrm{peak},\\nu}\\,\\lambda_{\\mathrm{peak},\\lambda})/c$。\n    3. 计算给定温度下峰值频率 $\\nu_{\\mathrm{peak},\\nu}$ 的数值（以 THz 为单位）。\n\n**步骤 2：使用提取的已知条件进行验证**\n- **科学依据：** 该问题完全基于黑体辐射的 Planck 定律和密度函数变量替换的微积分原理。这些是物理学中基本且无争议的概念。该问题在科学上是合理的。\n- **适定性：** 所有任务都有明确的定义。问题提供了所有必要的理论基础和常数，以推导所要求的表达式并计算最终的数值。存在唯一且有意义的解。\n- **客观性：** 问题以精确、定量和客观的语言陈述，没有歧义或主观解释。\n\n**步骤 3：结论与行动**\n问题是有效的。这是热物理学中一个标准而严谨的练习。下面将展开解答。\n\n解答分为三部分，对应于所分配的任务。\n\n**第 1 部分：变换法则的推导**\n\n变换光谱密度函数的基本原理是在一个微分光谱区间内的能量守恒。在某一区间内单位面积辐射的能量 $dM$ 与光谱变量的选择无关。使用国际单位制（SI）中的波长（$\\lambda$，单位为米，$\\mathrm{m}$）和频率（$\\nu$，单位为赫兹，$\\mathrm{Hz}$），这表示为：\n$$dM = M_{\\lambda}(\\lambda, T) |d\\lambda| = M_{\\nu}(\\nu, T) |d\\nu|$$\n其中 $M_{\\lambda}$ 的单位是 $\\mathrm{W\\, m^{-3}}$，$M_{\\nu}$ 的单位是 $\\mathrm{W\\, m^{-2}\\, Hz^{-1}}$。\n\n然而，本问题使用了非标准单位：波长 $\\lambda_{\\mathrm{nm}}$ 以纳米（$\\mathrm{nm}$）为单位，频率 $\\nu_{\\mathrm{THz}}$ 以太赫兹（$\\mathrm{THz}$）为单位。相应的光谱发射功率为 $M_{\\lambda,\\mathrm{nm}}$ 和 $M_{\\nu,\\mathrm{THz}}$。能量守恒对这些变量也必须成立：\n$$dM = M_{\\lambda,\\mathrm{nm}}(\\lambda_{\\mathrm{nm}}, T) |d\\lambda_{\\mathrm{nm}}| = M_{\\nu,\\mathrm{THz}}(\\nu_{\\mathrm{THz}}, T) |d\\nu_{\\mathrm{THz}}|$$\n由此，我们推导出变换法则：\n$$M_{\\nu,\\mathrm{THz}}(\\nu_{\\mathrm{THz}}, T) = M_{\\lambda,\\mathrm{nm}}(\\lambda_{\\mathrm{nm}}, T) \\left| \\frac{d\\lambda_{\\mathrm{nm}}}{d\\nu_{\\mathrm{THz}}} \\right|$$\n$\\left| \\frac{d\\lambda_{\\mathrm{nm}}}{d\\nu_{\\mathrm{THz}}} \\right|$ 项是指定坐标系之间变换的雅可比式。\n\n为了计算这个雅可比式，我们必须首先建立 $\\lambda_{\\mathrm{nm}}$ 和 $\\nu_{\\mathrm{THz}}$ 之间的关系。基本的物理关系是 $\\lambda \\nu = c$，其中 $\\lambda$ 的单位是米，$\\nu$ 的单位是赫兹。单位换算如下：\n$$\\lambda = \\lambda_{\\mathrm{nm}} \\times 10^{-9} \\ \\mathrm{m}$$\n$$\\nu = \\nu_{\\mathrm{THz}} \\times 10^{12} \\ \\mathrm{Hz}$$\n将这些代入物理关系式中：\n$$(\\lambda_{\\mathrm{nm}} \\times 10^{-9}) (\\nu_{\\mathrm{THz}} \\times 10^{12}) = c$$\n$$\\lambda_{\\mathrm{nm}} \\nu_{\\mathrm{THz}} = c \\times 10^{-3}$$\n这给出了变量数值之间的关系。我们现在可以把 $\\lambda_{\\mathrm{nm}}$ 表示为 $\\nu_{\\mathrm{THz}}$ 的函数：\n$$\\lambda_{\\mathrm{nm}}(\\nu_{\\mathrm{THz}}) = \\frac{c \\times 10^{-3}}{\\nu_{\\mathrm{THz}}}$$\n雅可比式是导数的绝对值：\n$$\\left| \\frac{d\\lambda_{\\mathrm{nm}}}{d\\nu_{\\mathrm{THz}}} \\right| = \\left| -\\frac{c \\times 10^{-3}}{\\nu_{\\mathrm{THz}}^2} \\right| = \\frac{c \\times 10^{-3}}{\\nu_{\\mathrm{THz}}^2}$$\n此项明确显示了对物理常数 $c$ 以及单位体系之间换算因子的依赖关系（包含在 $10^{-3}$ 因子中），即 $\\mathrm{nm}$ vs. $\\mathrm{m}$ 和 $\\mathrm{THz}$ vs. $\\mathrm{Hz}$。\n\n因此，该变换的显式表达式为：\n$$M_{\\nu,\\mathrm{THz}}(\\nu_{\\mathrm{THz}}, T) = M_{\\lambda,\\mathrm{nm}}\\left(\\frac{c \\times 10^{-3}}{\\nu_{\\mathrm{THz}}}, T\\right) \\left(\\frac{c \\times 10^{-3}}{\\nu_{\\mathrm{THz}}^2}\\right)$$\n这里，$M_{\\lambda,\\mathrm{nm}}$ 的自变量被替换为其以 $\\nu_{\\mathrm{THz}}$ 表示的等效表达式。\n\n**第 2 部分：光谱峰值位置的比较**\n\n黑体光谱的峰值位置取决于光谱是以波长还是以频率为参数。这是在第 1 部分推导出的非线性雅可比因子的直接结果。\n\n首先，考虑单位波长的光谱发射功率（以国际单位制 SI 表示），由 Planck 定律给出：\n$$M_{\\lambda}(\\lambda, T) = \\frac{2 \\pi h c^2}{\\lambda^5 \\left[\\exp\\left(\\frac{hc}{\\lambda k_B T}\\right) - 1\\right]}$$\n为了找到 $M_{\\lambda}$ 达到最大值时的波长 $\\lambda_{\\mathrm{peak},\\lambda}$，我们将其对 $\\lambda$ 的导数设为零。这等价于求分母的最小值，或者更简单地说，求 $\\lambda^{-5} \\left[\\exp\\left(\\frac{hc}{\\lambda k_B T}\\right) - 1\\right]^{-1}$ 的极值。一个更简单的方法是取对数然后求导。令 $f(\\lambda) = \\ln(M_{\\lambda}) = \\ln(2\\pi h c^2) - 5\\ln(\\lambda) - \\ln\\left[\\exp\\left(\\frac{hc}{\\lambda k_B T}\\right) - 1\\right]$。\n$$\\frac{d f(\\lambda)}{d\\lambda} = -\\frac{5}{\\lambda} - \\frac{1}{\\exp\\left(\\frac{hc}{\\lambda k_B T}\\right) - 1} \\cdot \\exp\\left(\\frac{hc}{\\lambda k_B T}\\right) \\cdot \\left(-\\frac{hc}{\\lambda^2 k_B T}\\right) = 0$$\n令 $x = \\frac{hc}{\\lambda k_B T}$。方程简化为：\n$$-\\frac{5}{\\lambda} + \\frac{1}{\\lambda} \\frac{x \\exp(x)}{\\exp(x) - 1} = 0$$\n$$5 = \\frac{x e^x}{e^x - 1} \\implies 5(e^x - 1) = x e^x \\implies (5-x)e^x = 5$$\n这是一个关于 $x$ 的超越方程。其解，我们记作 $x_{\\lambda}$，必须通过数值方法求解：$x_{\\lambda} \\approx 4.965114$。这给出了 Wien 位移定律：\n$$\\frac{hc}{\\lambda_{\\mathrm{peak},\\lambda} k_B T} = x_{\\lambda} \\implies \\lambda_{\\mathrm{peak},\\lambda} T = \\frac{hc}{x_{\\lambda} k_B} = \\text{常数}$$\n接下来，考虑单位频率的光谱发射功率（以国际单位制 SI 表示）：\n$$M_{\\nu}(\\nu, T) = \\frac{2 \\pi h \\nu^3}{c^2 \\left[\\exp\\left(\\frac{h\\nu}{k_B T}\\right) - 1\\right]}$$\n为了找到 $M_{\\nu}$ 达到最大值时的频率 $\\nu_{\\mathrm{peak},\\nu}$，我们将其对 $\\nu$ 的导数设为零。令 $g(\\nu) = \\ln(M_{\\nu}) = \\ln(2\\pi h / c^2) + 3\\ln(\\nu) - \\ln\\left[\\exp\\left(\\frac{h\\nu}{k_B T}\\right) - 1\\right]$。\n$$\\frac{d g(\\nu)}{d\\nu} = \\frac{3}{\\nu} - \\frac{1}{\\exp\\left(\\frac{h\\nu}{k_B T}\\right) - 1} \\cdot \\exp\\left(\\frac{h\\nu}{k_B T}\\right) \\cdot \\left(\\frac{h}{k_B T}\\right) = 0$$\n令 $y = \\frac{h\\nu}{k_B T}$。方程简化为：\n$$\\frac{3}{\\nu} = \\frac{1}{\\nu} \\frac{y \\exp(y)}{\\exp(y) - 1} \\implies 3(e^y - 1) = y e^y \\implies (3-y)e^y = 3$$\n这是另一个关于 $y$ 的超越方程。其数值解，记作 $y_{\\nu}$，是 $y_{\\nu} \\approx 2.821439$。这给出了 Wien 定律的频率形式：\n$$\\frac{h\\nu_{\\mathrm{peak},\\nu}}{k_B T} = y_{\\nu} \\implies \\frac{\\nu_{\\mathrm{peak},\\nu}}{T} = \\frac{y_{\\nu} k_B}{h} = \\text{常数}$$\n$\\nu_{\\mathrm{peak},\\nu} \\neq c/\\lambda_{\\mathrm{peak},\\lambda}$ 的原因是最大化 $M_{\\lambda}$ 与最大化 $M_{\\nu}$ 并不等价。变换关系是 $M_{\\nu}(\\nu) = M_{\\lambda}(c/\\nu) \\cdot (c/\\nu^2)$。雅可比因子 $c/\\nu^2$ 的存在使最大值的位置发生偏移。最大化 $M_{\\lambda}(\\lambda)$ 是最大化函数 $F(\\lambda)$，而最大化 $M_{\\nu}(\\nu)$ 则是最大化另一个不同的函数 $G(\\nu) = F(c/\\nu) \\cdot (c/\\nu^2)$。这是两个独立的优化问题。\n\n为了求出无量纲比率，我们使用平稳性条件得到的结果：\n$$\\lambda_{\\mathrm{peak},\\lambda} = \\frac{hc}{x_{\\lambda} k_B T}$$\n$$\\nu_{\\mathrm{peak},\\nu} = \\frac{y_{\\nu} k_B T}{h}$$\n将这两个表达式相乘得到：\n$$\\nu_{\\mathrm{peak},\\nu} \\lambda_{\\mathrm{peak},\\lambda} = \\left(\\frac{y_{\\nu} k_B T}{h}\\right) \\left(\\frac{hc}{x_{\\lambda} k_B T}\\right) = \\frac{y_{\\nu}}{x_{\\lambda}} c$$\n因此，无量纲比率为：\n$$\\frac{\\nu_{\\mathrm{peak},\\nu} \\lambda_{\\mathrm{peak},\\lambda}}{c} = \\frac{y_{\\nu}}{x_{\\lambda}}$$\n其中 $y_{\\nu}$ 是 $(3-y)e^y = 3$ 的根，$x_{\\lambda}$ 是 $(5-x)e^x = 5$ 的根。由于 $y_{\\nu} \\neq x_{\\lambda}$，该比率不等于 1。\n\n**第 3 部分：峰值频率的数值计算**\n\n任务是计算当 $T = 2500 \\ \\mathrm{K}$ 时 $\\nu_{\\mathrm{peak},\\nu}$ 的值（以 THz 为单位）。从第 2 部分，我们得到关系式：\n$$\\nu_{\\mathrm{peak},\\nu} = \\frac{y_{\\nu} k_B T}{h}$$\n使用给定的常数和 $y_{\\nu} \\approx 2.821439$ 的值：\n$h = 6.62607015 \\times 10^{-34} \\ \\mathrm{J \\cdot s}$\n$k_B = 1.380649 \\times 10^{-23} \\ \\mathrm{J/K}$\n$T = 2500 \\ \\mathrm{K}$\n代入这些值：\n$$\\nu_{\\mathrm{peak},\\nu} = \\frac{(2.821439) \\times (1.380649 \\times 10^{-23} \\ \\mathrm{J/K}) \\times (2500 \\ \\mathrm{K})}{6.62607015 \\times 10^{-34} \\ \\mathrm{J \\cdot s}}$$\n$$\\nu_{\\mathrm{peak},\\nu} \\approx \\frac{9.73970 \\times 10^{-20} \\ \\mathrm{J}}{6.62607015 \\times 10^{-34} \\ \\mathrm{J \\cdot s}} \\approx 1.46986 \\times 10^{14} \\ \\mathrm{s^{-1}} \\ (\\text{或 Hz})$$\n为将此结果表示为太赫兹 (THz)，我们使用换算关系 $1 \\ \\mathrm{THz} = 10^{12} \\ \\mathrm{Hz}$：\n$$\\nu_{\\mathrm{peak},\\nu} \\approx (1.46986 \\times 10^{14} \\ \\mathrm{Hz}) \\times \\left(\\frac{1 \\ \\mathrm{THz}}{10^{12} \\ \\mathrm{Hz}}\\right) \\approx 146.986 \\ \\mathrm{THz}$$\n根据题目要求将答案四舍五入到四位有效数字，得到 $147.0 \\ \\mathrm{THz}$。", "answer": "$$\n\\boxed{147.0}\n$$", "id": "2539036"}, {"introduction": "在天体物理、遥感和材料科学等领域，我们常常面临一个逆向问题：如何从测得的辐射光谱中推断出物体的物理属性，如温度和发射率。这个高级练习将理论付诸实践，要求你构建一个完整的计算框架来解决这一问题。你将利用普朗克定律作为正向模型，并以维恩位移定律为启发来设置初始猜测，通过非线性最小二乘法来拟合含噪声的模拟数据。更进一步，你还将计算费雪信息矩阵来评估所估计参数（温度和发射率）的可辨识性与不确定性，这为你提供了评估模型拟合优度和实验设计质量的强大工具 [@problem_id:2539028]。", "problem": "给定一个辐射传热领域的基于物理的逆问题：根据光谱辐射率 $I_\\lambda(\\lambda)$ 的带噪测量值，估计一个不透明漫反射表面的绝对温度 $T$ 和光谱发射率 $\\varepsilon(\\lambda;\\boldsymbol{\\theta})$ 的参数。其模型为 $I_\\lambda(\\lambda) = \\varepsilon(\\lambda;\\boldsymbol{\\theta}) \\, L_\\lambda(\\lambda,T) + \\eta(\\lambda)$，其中 $L_\\lambda(\\lambda,T)$ 是光谱黑体辐射率，$\\eta(\\lambda)$ 是具有已知标准差的零均值高斯噪声。您的程序必须构建并求解一个加权非线性最小二乘 (NLS) 估计问题，并通过费雪信息矩阵 (FIM) 评估可辨识性和不确定性。\n\n您的推导和实现必须仅基于以下基本定律和经过充分检验的公式：\n- Planck 单位波长光谱辐射率定律：\n$$L_\\lambda(\\lambda,T) = \\frac{2 h c^2}{\\lambda^5} \\, \\frac{1}{\\exp\\!\\left(\\frac{h c}{\\lambda k_B T}\\right) - 1},$$\n其中物理常数采用国际单位制 (SI)：Planck 常数 $h = 6.62607015\\times 10^{-34}\\,\\mathrm{J\\cdot s}$，光速 $c = 2.99792458\\times 10^{8}\\,\\mathrm{m/s}$，Boltzmann 常数 $k_B = 1.380649\\times 10^{-23}\\,\\mathrm{J/K}$。\n- 发射率的定义，即作为黑体辐射率的乘法因子。\n- 假设测量噪声为具有已知方差的独立高斯噪声，其负对数似然与加权残差平方和成正比；因此，通过求解加权 NLS 问题可获得最大似然估计量。\n- Wien 黑体峰值波长位移定律：$\\lambda_{\\text{peak}} T = b$，其中 $b = 2.897771955\\times 10^{-3}\\,\\mathrm{m\\cdot K}$，用于从测量光谱构建 $T$ 的初始猜测值。\n\n您的程序必须：\n1. 实现前向模型 $I_\\lambda(\\lambda) = \\varepsilon(\\lambda;\\boldsymbol{\\theta}) \\, L_\\lambda(\\lambda,T)$，针对两种发射率参数化方案：\n   - 灰体发射率：$\\varepsilon(\\lambda;\\boldsymbol{\\theta}) = a_0$，参数为 $a_0 \\in (0,1]$。\n   - 相对于参考波长 $\\lambda_0$ 的波长线性发射率：$\\varepsilon(\\lambda;\\boldsymbol{\\theta}) = a_0 + a_1 (\\lambda - \\lambda_0)$，参数的选择应确保在指定波段内 $\\varepsilon(\\lambda;\\boldsymbol{\\theta}) \\in (0,1]$。\n2. 使用强制物理合理性的界限 $T \\in [10, 10000]$ (单位 K)，$a_0 \\in [0.01, 1.0]$，以及 $a_1 \\in [-10^6, 10^6]$ (单位 $\\mathrm{m^{-1}}$)，求解关于 $(T,\\boldsymbol{\\theta})$ 的加权 NLS 问题。使用 Wien 位移定律和测量光谱为 $T$ 提供一个合理的初始猜测值，并在适用时使用默认发射率参数 $a_0 = 0.9$，$a_1 = 0$。\n3. 在解处，根据高斯噪声模型计算费雪信息矩阵 (FIM)\n$$\\mathcal{I}(\\hat{\\boldsymbol{\\phi}}) = \\mathbf{J}(\\hat{\\boldsymbol{\\phi}})^\\top \\mathbf{W} \\, \\mathbf{J}(\\hat{\\boldsymbol{\\phi}}),$$\n其中 $\\hat{\\boldsymbol{\\phi}}$ 是估计的参数向量，$\\mathbf{J}$ 是残差关于参数的雅可比矩阵，$\\mathbf{W}$ 是噪声协方差的逆（对角矩阵，对角线元素为 $1/\\sigma^2$）。使用 FIM 的逆（必要时使用伪逆）来近似参数协方差。\n4. 使用 FIM 条件数 $\\kappa(\\mathcal{I})$ 和秩来量化可辨识性；当且仅当 FIM 是满秩且 $\\kappa(\\mathcal{I}) \\le 10^{10}$ 时，声明该参数集局部可辨识。同时，计算参数间的最大相对标准差，作为一个无量纲小数 $r_{\\max} = \\max_i \\left( \\sqrt{\\mathrm{Cov}_{ii}} / |\\hat{\\phi}_i| \\right)$，并约定如果 $|\\hat{\\phi}_i| = 0$，则在求最大值时对该参数使用绝对标准差。\n5. 使用以下合成案例的测试套件。在每个案例中，生成波长，从给定的真实参数计算无噪声的 $I_\\lambda(\\lambda)$，将噪声标准差设置为 $\\sigma = s \\cdot \\max_\\lambda I_\\lambda(\\lambda)$（其中 $s$ 已指定），然后使用指定的随机种子添加独立高斯噪声。所有波长单位必须是 $\\mathrm{m}$，温度单位必须是 $\\mathrm{K}$。光谱辐射率的单位是 $\\mathrm{W\\cdot sr^{-1}\\cdot m^{-3}}$。\n   - 案例 1（理想情况，灰体发射率）：$T_{\\text{true}} = 1800\\,\\mathrm{K}$，$a_{0,\\text{true}} = 0.82$，$\\lambda \\in [1.0, 6.0]\\,\\mu\\mathrm{m}$，在 25 个均匀间隔点上采样，噪声分数 $s = 0.01$，随机种子 $42$。\n   - 案例 2（边缘情况，类 Rayleigh–Jeans 波段，灰体发射率）：$T_{\\text{true}} = 5000\\,\\mathrm{K}$，$a_{0,\\text{true}} = 0.70$，$\\lambda \\in [40.0, 60.0]\\,\\mu\\mathrm{m}$，在 15 个均匀间隔点上采样，噪声分数 $s = 0.005$，随机种子 $123$。该波段使 $T$ 和 $a_0$ 强耦合，对可辨识性构成挑战。\n   - 案例 3（峰值附近的斜率发射率，线性发射率）：$T_{\\text{true}} = 1500\\,\\mathrm{K}$，$a_{0,\\text{true}} = 0.85$，$a_{1,\\text{true}} = -0.02\\,\\mu\\mathrm{m}^{-1}$（即 $-2.0\\times 10^{4}\\,\\mathrm{m^{-1}}$），参考波长 $\\lambda_0 = 2.0\\,\\mu\\mathrm{m}$，$\\lambda \\in [1.2, 3.6]\\,\\mu\\mathrm{m}$，在 20 个均匀间隔点上采样，噪声分数 $s = 0.01$，随机种子 $7$。\n6. 程序输出要求：\n   - 对于每个案例，按顺序计算并报告以下四个量：估计温度 $\\hat{T}$ (单位 K)，四舍五入到一位小数；FIM 条件数 $\\kappa(\\mathcal{I})$，四舍五入到三位有效数字；可辨识性判定，布尔值；以及 $r_{\\max}$，四舍五入到三位有效数字的小数（无百分号）。\n   - 您的程序应生成单行输出，其中包含一个用方括号括起来的逗号分隔列表形式的结果，顺序为案例 1、2、3。因此，该行共有 12 个条目：$[\\hat{T}_1,\\kappa_1,\\text{ident}_1,r_{\\max,1},\\hat{T}_2,\\kappa_2,\\text{ident}_2,r_{\\max,2},\\hat{T}_3,\\kappa_3,\\text{ident}_3,r_{\\max,3}]$，无空格。", "solution": "所给问题是一个辐射传热领域的适定逆问题。其科学基础是 Planck 定律和统计估计理论，所有必要的参数和步骤都已明确指定，没有歧义或矛盾。因此，我将着手提供一个完整的解决方案。\n\n问题的核心是根据一系列带噪测量值估计一组物理参数 $\\boldsymbol{\\phi}$。测量值包括在已知波长 $\\lambda_i$ 处的光谱辐射率 $I_{\\lambda,i}$。连接参数与理想无噪辐射率的物理模型由 $M(\\lambda_i, \\boldsymbol{\\phi}) = \\varepsilon(\\lambda_i;\\boldsymbol{\\theta}) \\, L_\\lambda(\\lambda_i,T)$ 给出，其中参数向量 $\\boldsymbol{\\phi}$ 包括表面温度 $T$ 和发射率参数 $\\boldsymbol{\\theta}$。测量过程由 $I_{\\lambda,i} = M(\\lambda_i, \\boldsymbol{\\phi}) + \\eta_i$ 描述，其中 $\\eta_i$ 是独立、零均值、具有已知恒定标准差 $\\sigma$ 的高斯噪声项。\n\n**1. 将问题构建为加权非线性最小二乘 (NLS) 问题**\n\n在独立同分布高斯噪声的假设下，参数 $\\boldsymbol{\\phi}$ 的最大似然估计量 (MLE) 是使测量数据与模型预测之间的残差平方和最小化的估计量。由于噪声方差 $\\sigma^2$ 已知，我们构建一个加权 NLS 问题。目标是找到使加权误差平方和 $\\chi^2$ 最小化的参数 $\\hat{\\boldsymbol{\\phi}}$：\n$$ \\chi^2(\\boldsymbol{\\phi}) = \\sum_{i=1}^{N} \\frac{(I_{\\lambda,i}^\\text{meas} - M(\\lambda_i, \\boldsymbol{\\phi}))^2}{\\sigma^2} $$\n其中 $N$ 是测量点的数量。最小化此目标函数等价于最小化加权残差的平方和，$r_i(\\boldsymbol{\\phi}) = (I_{\\lambda,i}^\\text{meas} - M(\\lambda_i, \\boldsymbol{\\phi}))/\\sigma$。这是诸如 `scipy.optimize.least_squares` 等数值优化程序所求解的标准形式。\n\n**2. 前向模型与解析雅可比矩阵**\n\n前向模型 $M(\\boldsymbol{\\phi})$ 取决于光谱发射率 $\\varepsilon(\\lambda; \\boldsymbol{\\theta})$ 的参数化形式以及黑体光谱辐射率的 Planck 定律 $L_\\lambda(\\lambda, T)$：\n$$ L_\\lambda(\\lambda,T) = \\frac{2 h c^2}{\\lambda^5} \\, \\frac{1}{\\exp\\left(\\frac{h c}{\\lambda k_B T}\\right) - 1} $$\n其中 $h$ 是 Planck 常数，$c$ 是光速，$k_B$ 是 Boltzmann 常数。\n\n为确保 NLS 求解器高效稳健地收敛，我们必须提供加权残差的解析雅可比矩阵。雅可比矩阵 $\\mathbf{J}_{\\text{LS}}$ 的元素为 $J_{\\text{LS}, ij} = \\partial r_i / \\partial \\phi_j$。\n$$ J_{\\text{LS}, ij} = \\frac{\\partial}{\\partial \\phi_j} \\left( \\frac{I_{\\lambda,i}^\\text{meas} - M(\\lambda_i, \\boldsymbol{\\phi})}{\\sigma} \\right) = - \\frac{1}{\\sigma} \\frac{\\partial M(\\lambda_i, \\boldsymbol{\\phi})}{\\partial \\phi_j} $$\n模型的偏导数 $\\partial M / \\partial \\phi_j$ 构成了灵敏度矩阵。Planck 定律对温度 $T$ 的导数至关重要：\n$$ \\frac{\\partial L_\\lambda}{\\partial T} = L_\\lambda(\\lambda, T) \\cdot \\frac{\\exp\\left(\\frac{C_2}{\\lambda T}\\right)}{\\exp\\left(\\frac{C_2}{\\lambda T}\\right) - 1} \\cdot \\frac{C_2}{\\lambda T^2} $$\n其中 $C_2 = hc/k_B$。\n\n每种发射率情况的模型导数如下：\n- **灰体发射率**：$\\boldsymbol{\\phi}=(T, a_0)$，$M = a_0 L_\\lambda(\\lambda,T)$。\n  $$ \\frac{\\partial M}{\\partial T} = a_0 \\frac{\\partial L_\\lambda}{\\partial T}, \\quad \\frac{\\partial M}{\\partial a_0} = L_\\lambda $$\n- **线性发射率**：$\\boldsymbol{\\phi}=(T, a_0, a_1)$，$M = (a_0 + a_1(\\lambda - \\lambda_0)) L_\\lambda(\\lambda,T)$。\n  $$ \\frac{\\partial M}{\\partial T} = \\varepsilon(\\lambda) \\frac{\\partial L_\\lambda}{\\partial T}, \\quad \\frac{\\partial M}{\\partial a_0} = L_\\lambda, \\quad \\frac{\\partial M}{\\partial a_1} = (\\lambda - \\lambda_0) L_\\lambda $$\n这些导数用于为 NLS 求解器构建雅可比矩阵。\n\n**3. 初始猜测策略**\n\n非线性优化中的一个关键步骤是为参数提供一个好的初始猜测值。问题为温度 $T$ 指定了一个基于物理的策略。Wien 位移定律 $\\lambda_{\\text{peak}} T = b$ 将黑体的温度与其峰值发射波长联系起来。我们将此定律应用于测量光谱：我们确定与最大测量辐射率 $I_{\\lambda,\\text{max}}$ 对应的波长 $\\lambda_{\\text{peak,meas}}$，并计算初始温度猜测值 $T_0 = b / \\lambda_{\\text{peak,meas}}$。对于发射率参数，问题指定了默认初始值 $a_0 = 0.9$ 和 $a_1 = 0$。\n\n**4. 参数估计与不确定性量化**\n\n在目标函数、雅可比矩阵、初始猜测和参数界限都已确定的情况下，我们使用 `scipy.optimize.least_squares` 函数来寻找最优参数向量 $\\hat{\\boldsymbol{\\phi}}$。\n\n收敛后，我们评估解的质量和可辨识性。费雪信息矩阵 (FIM) 提供了一种量化数据所包含的关于参数的信息的方法。对于加权 NLS 问题，在解 $\\hat{\\boldsymbol{\\phi}}$ 处的 FIM 由下式给出：\n$$ \\mathcal{I}(\\hat{\\boldsymbol{\\phi}}) = \\mathbf{S}^\\top \\mathbf{W} \\mathbf{S} $$\n其中 $\\mathbf{S}$ 是灵敏度矩阵（$\\mathbf{S}_{ij} = \\partial M_i / \\partial \\phi_j$），$\\mathbf{W}$ 是测量噪声协方差矩阵的逆。在我们的案例中，$\\mathbf{W} = \\sigma^{-2} \\mathbf{I}$，其中 $\\mathbf{I}$ 是单位矩阵。`scipy.optimize.least_squares` 返回的雅可比矩阵是 $\\mathbf{J}_{\\text{LS}} = - \\sigma^{-1} \\mathbf{S}$。代入此关系，FIM 可简化为：\n$$ \\mathcal{I} = (\\sigma \\mathbf{J}_{\\text{LS}})^\\top (\\sigma^{-2} \\mathbf{I}) (\\sigma \\mathbf{J}_{\\text{LS}}) = \\mathbf{J}_{\\text{LS}}^\\top \\mathbf{J}_{\\text{LS}} $$\n这提供了一种从优化输出直接计算 FIM 的方法。\n\n可辨识性和不确定性评估如下：\n- **可辨识性**：如果 FIM 是满秩且良态的，则参数集是局部可辨识的。我们检查 $\\mathcal{I}$ 的秩是否等于参数数量，以及其条件数 $\\kappa(\\mathcal{I}) = \\sigma_{\\max}(\\mathcal{I}) / \\sigma_{\\min}(\\mathcal{I})$ 是否低于阈值 $10^{10}$。高条件数表示参数高度相关，使其难以独立估计。案例 2 被设计用来展示这种行为，因为其测量波段位于黑体光谱的 Rayleigh-Jeans 尾部，其中 $L_\\lambda \\propto T/\\lambda^4$，导致估计的温度 $\\hat{T}$ 和发射率 $\\hat{a}_0$ 之间存在强耦合。\n- **不确定性**：FIM 的逆矩阵近似于估计参数的协方差矩阵，即 $\\text{Cov}(\\hat{\\boldsymbol{\\phi}}) \\approx \\mathcal{I}^{-1}$。该矩阵对角线元素的平方根 $\\sqrt{\\text{Cov}_{ii}}$ 给出每个参数估计 $\\hat{\\phi}_i$ 的标准差（不确定性）。我们计算最大相对标准差 $r_{\\max} = \\max_i (\\sqrt{\\text{Cov}_{ii}} / |\\hat{\\phi}_i|)$，作为一种无量纲的不确定性度量，并对 $\\hat{\\phi}_i = 0$ 的情况进行特殊处理。\n\n这个全面的流程不仅可以估计参数，还可以严格评估这些估计值的置信度。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.optimize import least_squares\nfrom scipy import constants\n\ndef solve():\n    \"\"\"\n    Solves the inverse heat transfer problem for three test cases.\n    \"\"\"\n    # Physical constants from scipy.constants in SI units\n    h = constants.h\n    c = constants.c\n    k_B = constants.k\n    b_wien = 2.897771955e-3 # Wien's displacement law constant in m.K\n\n    def planck_law(lmbd, T):\n        \"\"\"\n        Computes Planck's law for spectral radiance per unit wavelength (W sr^-1 m^-3).\n        \n        Args:\n            lmbd (np.ndarray): Wavelengths in meters.\n            T (float): Temperature in Kelvin.\n\n        Returns:\n            np.ndarray: Spectral radiance.\n        \"\"\"\n        # Numerically robust implementation of Planck's law\n        # Use np.expm1 for precision with small arguments\n        arg = h * c / (lmbd * k_B * T)\n        # Avoid overflow, exp(709.7) is near float64 max\n        # For large arg, radiance is effectively zero.\n        radiance = np.zeros_like(arg)\n        valid_mask = arg  709.0\n        \n        numerator = 2 * h * c**2\n        denominator = lmbd[valid_mask]**5 * np.expm1(arg[valid_mask])\n        \n        # Avoid division by zero if denominator is zero (can happen for T=inf)\n        # Denominator is guaranteed positive otherwise\n        radiance[valid_mask] = numerator / denominator\n        return radiance\n\n    def process_case(case_spec):\n        \"\"\"\n        Generates synthetic data, solves the NLS problem, and performs uncertainty analysis.\n        \"\"\"\n        # 1. Generate synthetic data\n        model_type = case_spec['model']\n        true_params = case_spec['true_params']\n        T_true = true_params[0]\n        \n        lmbd = np.linspace(case_spec['lambda_range_um'][0], case_spec['lambda_range_um'][1], case_spec['num_points']) * 1e-6\n        \n        if model_type == 'gray':\n            a0_true = true_params[1]\n            eps_true = a0_true\n        elif model_type == 'linear':\n            a0_true, a1_true = true_params[1], true_params[2]\n            lambda_0 = case_spec['lambda_0_um'] * 1e-6\n            eps_true = a0_true + a1_true * (lmbd - lambda_0)\n\n        I_true = eps_true * planck_law(lmbd, T_true)\n        \n        sigma = case_spec['noise_frac'] * np.max(I_true)\n        \n        rng = np.random.default_rng(case_spec['seed'])\n        noise = rng.normal(0, sigma, lmbd.shape)\n        I_meas = I_true + noise\n\n        # 2. Define residuals and Jacobian for least_squares\n        def get_residuals_and_jacobian_funcs(model_type):\n            if model_type == 'gray':\n                def residuals(params):\n                    T, a0 = params\n                    model_rad = a0 * planck_law(lmbd, T)\n                    return (I_meas - model_rad) / sigma\n\n                def jacobian(params):\n                    T, a0 = params\n                    J = np.zeros((len(lmbd), 2))\n                    \n                    L = planck_law(lmbd, T)\n                    arg = h * c / (lmbd * k_B * T)\n                    \n                    # Numerically stable derivative calculation\n                    exp_arg = np.exp(arg)\n                    expm1_arg = np.expm1(arg)\n                    # Handle arg -> 0 case, where exp_arg/expm1_arg -> inf, but arg/T -> 0\n                    # The product has a finite limit, so we handle it manually.\n                    # For small x, x*exp(x)/(exp(x)-1) ~ 1.\n                    dL_dT_factor = np.ones_like(arg)\n                    mask = expm1_arg > 1e-9 # if not, arg is very small\n                    dL_dT_factor[mask] = (arg[mask] / T) * (exp_arg[mask] / expm1_arg[mask])\n\n                    dL_dT = L * dL_dT_factor\n                    \n                    J[:, 0] = a0 * dL_dT\n                    J[:, 1] = L\n                    return -J / sigma\n\n            elif model_type == 'linear':\n                def residuals(params):\n                    T, a0, a1 = params\n                    eps = a0 + a1 * (lmbd - lambda_0)\n                    model_rad = eps * planck_law(lmbd, T)\n                    return (I_meas - model_rad) / sigma\n\n                def jacobian(params):\n                    T, a0, a1 = params\n                    J = np.zeros((len(lmbd), 3))\n                    \n                    eps = a0 + a1 * (lmbd - lambda_0)\n                    L = planck_law(lmbd, T)\n                    arg = h * c / (lmbd * k_B * T)\n\n                    exp_arg = np.exp(arg)\n                    expm1_arg = np.expm1(arg)\n                    dL_dT_factor = np.ones_like(arg)\n                    mask = expm1_arg > 1e-9\n                    dL_dT_factor[mask] = (arg[mask] / T) * (exp_arg[mask] / expm1_arg[mask])\n\n                    dL_dT = L * dL_dT_factor\n                    \n                    J[:, 0] = eps * dL_dT\n                    J[:, 1] = L\n                    J[:, 2] = (lmbd - lambda_0) * L\n                    return -J / sigma\n            \n            return residuals, jacobian\n\n        residuals_func, jacobian_func = get_residuals_and_jacobian_funcs(model_type)\n\n        # 3. Initial guess and bounds\n        lambda_peak_meas_idx = np.argmax(I_meas)\n        lambda_peak_meas = lmbd[lambda_peak_meas_idx]\n        T_initial = b_wien / lambda_peak_meas\n        \n        initial_guess = [T_initial] + case_spec['initial_emiss_params']\n        bounds = ([10, 0.01, -1e6], [10000, 1.0, 1e6])\n        if model_type == 'gray':\n            bounds = (bounds[0][:2], bounds[1][:2])\n\n        # 4. Run optimization\n        result = least_squares(residuals_func, initial_guess, jac=jacobian_func, bounds=bounds, method='trf')\n        estimated_params = result.x\n        jac_ls = result.jac\n\n        # 5. Post-processing and uncertainty analysis\n        fim = jac_ls.T @ jac_ls\n        \n        num_params = len(estimated_params)\n        fim_rank = np.linalg.matrix_rank(fim)\n        \n        is_identifiable = (fim_rank == num_params)\n        \n        if is_identifiable:\n            cond_num = np.linalg.cond(fim)\n            is_identifiable = is_identifiable and (cond_num = 1e10)\n            cov_matrix = np.linalg.inv(fim)\n        else:\n            cond_num = np.inf\n            cov_matrix = np.linalg.pinv(fim)\n\n        stds = np.sqrt(np.diag(cov_matrix))\n        \n        r_vals = []\n        for i in range(num_params):\n            if np.abs(estimated_params[i]) == 0.0:\n                r_vals.append(stds[i])\n            else:\n                r_vals.append(stds[i] / np.abs(estimated_params[i]))\n        r_max = np.max(r_vals)\n\n        # 6. Format results\n        T_hat = estimated_params[0]\n        \n        T_hat_str = f\"{T_hat:.1f}\"\n        cond_num_str = f\"{cond_num:.3g}\"\n        is_identifiable_str = str(is_identifiable)\n        r_max_str = f\"{r_max:.3g}\"\n        \n        return [T_hat_str, cond_num_str, is_identifiable_str, r_max_str]\n\n    test_cases = [\n        {\n            'model': 'gray',\n            'true_params': [1800.0, 0.82],\n            'lambda_range_um': [1.0, 6.0],\n            'num_points': 25,\n            'noise_frac': 0.01,\n            'seed': 42,\n            'initial_emiss_params': [0.9],\n        },\n        {\n            'model': 'gray',\n            'true_params': [5000.0, 0.70],\n            'lambda_range_um': [40.0, 60.0],\n            'num_points': 15,\n            'noise_frac': 0.005,\n            'seed': 123,\n            'initial_emiss_params': [0.9],\n        },\n        {\n            'model': 'linear',\n            'true_params': [1500.0, 0.85, -2.0e4],\n            'lambda_range_um': [1.2, 3.6],\n            'lambda_0_um': 2.0,\n            'num_points': 20,\n            'noise_frac': 0.01,\n            'seed': 7,\n            'initial_emiss_params': [0.9, 0.0],\n        }\n    ]\n\n    all_results = []\n    for case in test_cases:\n        case_results = process_case(case)\n        all_results.extend(case_results)\n\n    print(f\"[{','.join(all_results)}]\")\n\nsolve()\n```", "id": "2539028"}]}