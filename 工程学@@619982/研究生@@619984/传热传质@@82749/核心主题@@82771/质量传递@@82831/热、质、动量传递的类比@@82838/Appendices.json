{"hands_on_practices": [{"introduction": "工程师常常利用类比方法，将难以测量的传热或传质系数与更容易测量的摩擦系数关联起来。本练习将提供一个实践机会，让你应用著名的Chilton-Colburn类比来处理一组假设的实验数据。通过这次实践，你将学会如何检验类比在真实测量不确定度范围内的有效性，这是一个评估理论模型与实验结果是否一致的关键技能。[@problem_id:2468459]", "problem": "在一根内径为 $D = 25\\,\\mathrm{mm}$、大长径比 $L/D \\gg 100$ 的水力光滑直圆管中，建立了充分发展的高雷诺数空气湍流。在相同的主体雷诺数 $ \\mathrm{Re}_b = 1.20 \\times 10^{5} $ 下进行了两次独立的实验。主体流体性质在主体温度和组分下进行评估，且在整个截面上的变化小于 $5\\%$。在第一次（传热）实验中，使用空气，主体普朗特数为 $ \\mathrm{Pr}_b = 0.71 $。在第二次（传质）实验中，使用空气中的稀薄蒸汽组分，主体施密特数为 $ \\mathrm{Sc}_b = 0.62 $。两次实验中独立测量了范宁摩擦因子（通过压差测量和动量平衡推算得到），结果如下：\n- 传热实验：$ f_{F,H} = 3.60 \\times 10^{-3} \\pm 0.10 \\times 10^{-3} $，\n- 传质实验：$ f_{F,D} = 3.40 \\times 10^{-3} \\pm 0.12 \\times 10^{-3} $，\n其中不确定度为包含仪器和可重复性误差的单标准差估计值。\n\n从动量、能量和组分守恒方程，以及斯坦顿数和 Colburn $j$ 因子的定义出发：\n- $ f_F \\equiv \\dfrac{\\tau_w}{\\tfrac{1}{2}\\,\\rho\\,U_m^{2}} $,\n- $ \\mathrm{St}_H \\equiv \\dfrac{h}{\\rho\\,U_m\\,c_p} $, $ \\mathrm{St}_D \\equiv \\dfrac{k_c}{U_m} $,\n- $ j_H \\equiv \\mathrm{St}_H\\,\\mathrm{Pr}^{2/3} $, $ j_D \\equiv \\mathrm{St}_D\\,\\mathrm{Sc}^{2/3} $,\n并援引对数律区中标准的光滑壁、高雷诺数湍流相似性假设（包括压差阻力可忽略、粘性耗散可忽略、边界层内物性变化微弱，以及湍流普朗特数和施密特数量级为 1），以关联热、质和动量传递。仅基于这些基础，推导用测得的 $ f_F $ 计算 $ j_H $ 和 $ j_D $ 的表达式，然后根据 $ f_{F,H} $ 计算 $ j_H $，根据 $ f_{F,D} $ 计算 $ j_D $。\n\n将给定的单标准差不确定度进行线性传递，从 $ \\sigma_{f_{F,H}} $ 和 $ \\sigma_{f_{F,D}} $ 得到 $ \\sigma_{j_H} $ 和 $ \\sigma_{j_D} $。将两次实验视为独立的，因此它们差值的不确定度是各自不确定度的方和根。最后，构造标准化差异\n$$\nz \\equiv \\frac{\\left| j_H - j_D \\right|}{\\sqrt{\\sigma_{j_H}^{2} + \\sigma_{j_D}^{2}}}\n$$\n作为定量度量，用以评估在这些条件下，$ j_H = j_D $ 的等式是否在不确定度范围内成立。\n\n报告 $z$ 的单个标量值，四舍五入至三位有效数字。量 $z$ 是无量纲的，无需报告单位。", "solution": "本问题要求评估 Chilton-Colburn 类比，该类比假定传热和传质的 Colburn $j$ 因子（$j_H$ 和 $j_D$）之间存在等效关系，并且它们与范宁摩擦因子 $f_F$ 相关。任务是推导关系式 $j_H = j_D = f_F/2$，利用该关系式从提供的 $f_F$ 实验数据中计算 $j_H$ 和 $j_D$，传递实验不确定度，并最终计算标准化差异 $z$ 以检验该类比与测量结果的一致性。\n\n首先，我们从基本守恒方程出发，为该类比建立理论基础。对于管内物性恒定的充分发展湍流，近壁区（其中 $y$ 是距壁面的距离）动量、热量和质量的时间平均输运方程是相似的。\n\n总切应力 $\\tau$ 是粘性应力和湍流（雷诺）应力之和：\n$$ \\tau = \\mu \\frac{d\\overline{u}}{dy} - \\rho \\overline{u'v'} = \\rho (\\nu + \\nu_t) \\frac{d\\overline{u}}{dy} $$\n其中 $\\nu$ 是运动粘度，$\\nu_t$ 是涡粘度。对于充分发展的管流，近壁区的切应力近似恒定，等于壁面切应力 $\\tau \\approx \\tau_w$。\n\n总热通量 $q''$ 是分子（傅里叶）导热和湍流输运之和：\n$$ q'' = -k \\frac{d\\overline{T}}{dy} - \\rho c_p \\overline{v'T'} = -\\rho c_p (\\alpha + \\alpha_t) \\frac{d\\overline{T}}{dy} $$\n其中 $\\alpha$ 是热扩散率，$\\alpha_t$ 是涡热扩散率。在壁面附近，$q'' \\approx q''_w$。\n\n组分 A 的总质量通量 $j_A''$ 是分子（菲克）扩散和湍流输运之和：\n$$ j_A'' = -D_{AB} \\frac{d\\overline{c}_A}{dy} - \\overline{v'c_A'} = -(D_{AB} + D_{AB,t}) \\frac{d\\overline{c}_A}{dy} $$\n其中 $D_{AB}$ 是分子扩散系数， $D_{AB,t}$ 是涡质量扩散系数。在壁面附近，$j_A'' \\approx j_{A,w}''$。\n\n雷诺类比的核心假设是动量、热量和质量的湍流输运机理是相同的。这通过定义湍流普朗特数 $\\mathrm{Pr}_t = \\nu_t / \\alpha_t$ 和湍流施密特数 $\\mathrm{Sc}_t = \\nu_t / D_{AB,t}$，并假设它们都等于 $1$ 来形式化。问题陈述指导我们援引它们量级为 1 的标准假设。对于高雷诺数流动，在极薄的粘性底层之外的湍流核心区中，湍流输运远大于分子输运，即 $\\nu_t \\gg \\nu$、$\\alpha_t \\gg \\alpha$ 和 $D_{AB,t} \\gg D_{AB}$。\n\n在这些假设（$\\mathrm{Pr}_t = 1$、$\\mathrm{Sc}_t = 1$ 且忽略分子输运）下，方程简化为：\n$$ \\tau_w \\approx \\rho \\nu_t \\frac{d\\overline{u}}{dy} $$\n$$ q''_w \\approx -\\rho c_p \\nu_t \\frac{d\\overline{T}}{dy} $$\n$$ j_{A,w}'' \\approx -\\nu_t \\frac{d\\overline{c}_A}{dy} $$\n从这些方程中，我们可以看到梯度之间的正比关系：\n$$ \\frac{\\tau_w}{\\rho} \\ d\\overline{T} \\approx - c_p \\frac{q''_w}{\\rho c_p} \\ d\\overline{u} \\quad \\text{and} \\quad \\frac{\\tau_w}{\\rho} \\ d\\overline{c}_A \\approx - \\frac{j_{A,w}''}{\\rho} \\ d\\overline{u} $$\n从壁面（$u=0$、$T=T_w$、$c_A=c_{A,w}$）积分到主体流（平均速度为 $U_m$、温度为 $T_m$、浓度为 $c_{A,m}$）可得：\n$$ \\frac{\\tau_w}{\\rho} (T_w - T_m) \\approx \\frac{q''_w}{\\rho c_p} U_m \\quad \\text{and} \\quad \\frac{\\tau_w}{\\rho} (c_{A,w} - c_{A,m}) \\approx \\frac{j_{A,w}''}{\\rho} U_m $$\n使用传热系数 $h = q''_w / (T_w-T_m)$ 和传质系数 $k_c = j_{A,w}'' / (c_{A,w}-c_{A,m})$ 的定义，我们重新整理得到：\n$$ \\frac{h}{\\rho c_p U_m} \\approx \\frac{\\tau_w}{\\rho U_m^2} \\quad \\text{and} \\quad \\frac{k_c}{U_m} \\approx \\frac{\\tau_w}{\\rho U_m^2} $$\n回顾斯坦顿数 $\\mathrm{St}_H = h/(\\rho U_m c_p)$ 和 $\\mathrm{St}_D = k_c/U_m$ 以及范宁摩擦因子 $f_F = \\tau_w / (\\frac{1}{2}\\rho U_m^2)$ 的定义，我们得到简单的雷诺类比：\n$$ \\mathrm{St}_H \\approx \\frac{f_F}{2} \\quad \\text{and} \\quad \\mathrm{St}_D \\approx \\frac{f_F}{2} $$\n此结果仅在 $\\mathrm{Pr} = \\nu/\\alpha = 1$ 和 $\\mathrm{Sc} = \\nu/D_{AB} = 1$ 时严格成立，因为只有在这种情况下，所有三种输运过程的粘性底层阻力才相同。对于 $\\mathrm{Pr} \\neq 1$ 和 $\\mathrm{Sc} \\neq 1$ 的流体，必须对该类比进行修正。Chilton-Colburn 类比是一个成功的半经验修正，其表述如下：\n$$ j_H \\equiv \\mathrm{St}_H \\mathrm{Pr}^{2/3} = \\frac{f_F}{2} $$\n$$ j_D \\equiv \\mathrm{St}_D \\mathrm{Sc}^{2/3} = \\frac{f_F}{2} $$\n这些就是我们将用来分析实验数据的表达式。\n\n现在，我们根据两次实验测得的摩擦因子计算 Colburn $j$ 因子的值。\n对于传热实验：\n$$ j_H = \\frac{f_{F,H}}{2} = \\frac{3.60 \\times 10^{-3}}{2} = 1.80 \\times 10^{-3} $$\n对于传质实验：\n$$ j_D = \\frac{f_{F,D}}{2} = \\frac{3.40 \\times 10^{-3}}{2} = 1.70 \\times 10^{-3} $$\n\n接下来，我们传递不确定度。关系是线性的，$j = (1/2)f_F$。因此，$j$ 的标准差是 $f_F$ 的一半。\n对于传热实验：\n$$ \\sigma_{j_H} = \\frac{\\sigma_{f_{F,H}}}{2} = \\frac{0.10 \\times 10^{-3}}{2} = 0.05 \\times 10^{-3} $$\n对于传质实验：\n$$ \\sigma_{j_D} = \\frac{\\sigma_{f_{F,D}}}{2} = \\frac{0.12 \\times 10^{-3}}{2} = 0.06 \\times 10^{-3} $$\n\n最后，我们计算标准化差异 $z$，以评估 $j_H = j_D$ 的等式是否在实验不确定度范围内得到数据的支持。\n$z$ 的公式为：\n$$ z \\equiv \\frac{\\left| j_H - j_D \\right|}{\\sqrt{\\sigma_{j_H}^{2} + \\sigma_{j_D}^{2}}} $$\n分子是平均值的绝对差：\n$$ |j_H - j_D| = |1.80 \\times 10^{-3} - 1.70 \\times 10^{-3}| = 0.10 \\times 10^{-3} $$\n分母是差值的组合不确定度，由于实验是独立的，通过将各个方差相加得到：\n$$ \\sqrt{\\sigma_{j_H}^{2} + \\sigma_{j_D}^{2}} = \\sqrt{(0.05 \\times 10^{-3})^2 + (0.06 \\times 10^{-3})^2} $$\n$$ \\sqrt{\\sigma_{j_H}^{2} + \\sigma_{j_D}^{2}} = \\sqrt{(0.0025 \\times 10^{-6}) + (0.0036 \\times 10^{-6})} = \\sqrt{0.0061 \\times 10^{-6}} = \\sqrt{0.0061} \\times 10^{-3} $$\n现在我们计算 $z$：\n$$ z = \\frac{0.10 \\times 10^{-3}}{\\sqrt{0.0061} \\times 10^{-3}} = \\frac{0.10}{\\sqrt{0.0061}} \\approx \\frac{0.10}{0.0781024967...} \\approx 1.28037... $$\n按要求四舍五入到三位有效数字，我们得到：\n$$ z \\approx 1.28 $$\n这个值的量级为 1，表明观测到的 $j_H$ 和 $j_D$ 之间的差异在统计上不显著，并且在给定的实验不确定度范围内与 Chilton-Colburn 类比 ($j_H = j_D$) 一致。", "answer": "$$\\boxed{1.28}$$", "id": "2468459"}, {"introduction": "传递现象中的类比不仅是理论上的巧合，更是强大的工程工具。本练习将向你展示如何将一个领域（热传导）中成熟的解析解，通过类比应用于另一个领域（质量扩散）的建模。你将通过将该模型与实验数据进行拟合，来确定一个关键的材料物性参数——扩散系数$D$。这项任务在材料科学和化学工程中非常常见，它完美地体现了如何利用理论类比来解决实际的参数估计问题。[@problem_id:2468456]", "problem": "一种溶质扩散进入均匀固体，该过程遵循菲克第二定律 (Fick's second law)，通过与瞬态热传导类比，该定律由偏微分方程 $\\partial C/\\partial t = D \\nabla^2 C$ 给出，其中 $C$ 是溶质浓度，$D$ 是溶质扩散系数。考虑两种典型的几何形状：(i) 半厚度为 $L$ 的平板，其位于 $x = \\pm L$ 的两个表面瞬间被设置为恒定的表面浓度；(ii) 半径为 $R$ 的无限长圆柱体，其位于 $r=R$ 的侧表面瞬间被设置为恒定的表面浓度。在两种情况下，固体内部的初始浓度均为零，且表面浓度在所有后续时间里都保持恒定值，这对应于狄利克雷 (Dirichlet) 边界条件。定义分数吸收量为 $F(t) = M_t/M_\\infty$，其中 $M_t = \\int_{\\Omega} C(\\mathbf{x},t)\\, dV$ 是在时间 $t$ 物体内的总溶质量，$M_\\infty = \\int_{\\Omega} C_s\\, dV$ 是对应于恒定表面浓度 $C_s$ 的渐近总溶质量。\n\n任务：从守恒定律和菲克第二定律出发，并利用热、质和动量传递之间的经典类比，推导出每种几何形状下空间平均的瞬态响应 $F(t)$，将其表示为适用于该几何形状的傅里叶-贝塞尔 (Fourier-Bessel) 模态的本征函数展开式。你的推导必须基于以下有效基本原理：扩散方程的线性性、变量分离法、给定几何形状上本征函数的正交性，以及所得到的本征函数集的完备性。不得引入任何绕过 $F(t)$ 的本征函数级数推导的经验公式或简化公式。\n\n你的程序必须实现以下参数估计问题。给定时间戳 $\\{t_i\\}_{i=1}^N$ 和测量的分数吸收量 $\\{F_i^{\\mathrm{meas}}\\}_{i=1}^N$，对于指定的几何形状和特征长度（平板为 $L$，圆柱体为 $R$），通过最小化残差平方和来推断标量扩散系数 $D$\n$$\n\\Phi(D) = \\sum_{i=1}^N \\left(F_i^{\\mathrm{model}}(D) - F_i^{\\mathrm{meas}} \\right)^2,\n$$\n其中 $F_i^{\\mathrm{model}}(D)$ 是在时间 $t_i$ 由给定几何形状的相应本征函数级数计算出的模型预测分数吸收量。扩散系数 $D$ 必须以 $\\mathrm{m}^2/\\mathrm{s}$ 为单位报告。\n\n实现要求：\n- 你的程序必须通过带有严格证明的停止准则的截断，或使用足够多的项（你需要在解题中解释其充分性）来高精度地计算本征函数级数。你必须支持两种几何形状（平板和圆柱体）。\n- 最小化过程必须强制 $D > 0$，并作为一个一维连续有界问题求解。\n- 所有时间单位必须为 $\\mathrm{s}$，长度单位为 $\\mathrm{m}$，报告的扩散系数单位为 $\\mathrm{m}^2/\\mathrm{s}$。最终估算的扩散系数以 $\\mathrm{m}^2/\\mathrm{s}$ 为单位，用科学记数法打印，保留六位有效数字。\n\n测试套件：\n1. 平板（正常情况）：半厚度 $L = 1.5\\times 10^{-3}\\,\\mathrm{m}$，时间 $\\{t_i\\} = [300,\\,1200,\\,3600,\\,14400]\\,\\mathrm{s}$，测量分数吸收量 $\\{F_i^{\\mathrm{meas}}\\} = [0.1440,\\,0.2859,\\,0.4934,\\,0.8787]$。\n2. 圆柱体（长时边界行为）：半径 $R = 1.0\\times 10^{-3}\\,\\mathrm{m}$，时间 $\\{t_i\\} = [60,\\,300,\\,1200,\\,4800,\\,19200]\\,\\mathrm{s}$，测量分数吸收量 $\\{F_i^{\\mathrm{meas}}\\} = [0.1104,\\,0.2480,\\,0.4670,\\,0.8013,\\,0.9953]$。\n3. 圆柱体（早到中期时间）：半径 $R = 5.0\\times 10^{-4}\\,\\mathrm{m}$，时间 $\\{t_i\\} = [200,\\,800,\\,3200]\\,\\mathrm{s}$，测量分数吸收量 $\\{F_i^{\\mathrm{meas}}\\} = [0.1740,\\,0.3340,\\,0.6120]$。\n\n你的程序应生成单行输出，包含按上述三个测试用例顺序排列的三个估算扩散系数 $[D_1, D_2, D_3]$，单位为 $\\mathrm{m}^2/\\mathrm{s}$，格式为方括号内以逗号分隔的列表（例如，$[1.234000\\mathrm{e}{-10},2.345000\\mathrm{e}{-11},3.456000\\mathrm{e}{-12}]$，但打印行中不含单位）。输出中的所有浮点数都必须以科学记数法打印，并保留六位有效数字。", "solution": "在尝试求解之前，对问题陈述进行验证。\n\n**步骤 1：提取给定信息**\n\n- **控制方程：** 溶质扩散的菲克第二定律，$\\frac{\\partial C}{\\partial t} = D \\nabla^2 C$，其中 $C$ 是溶质浓度，$D$ 是溶质扩散系数，$t$ 是时间。\n- **几何形状：**\n    - (i) 半厚度为 $L$ 的平板，占据域 $x \\in [-L, L]$。\n    - (ii) 半径为 $R$ 的无限长圆柱体，占据域 $r \\in [0, R]$。\n- **初始条件 (IC)：** 在 $t=0$ 时，固体内部浓度均匀为零。对于域内的 $\\mathbf{x}$，有 $C(\\mathbf{x}, 0) = 0$。\n- **边界条件 (BC)：** 对于所有时间 $t>0$，表面浓度为常数。$C(\\text{surface}, t) = C_s$。\n- **分数吸收量：** 定义为 $F(t) = M_t/M_\\infty$，其中 $M_t = \\int_{\\Omega} C(\\mathbf{x},t)\\, dV$ 是时间 $t$ 的总溶质量，$M_\\infty = \\int_{\\Omega} C_s\\, dV$ 是平衡时的总溶质量。\n- **任务 1 (推导)：** 使用基本原理（线性性、变量分离法、正交性）推导每种几何形状的瞬态分数吸收量 $F(t)$ 的本征函数展开式。\n- **任务 2 (实现)：** 实现一个 Python 程序，通过最小化残差平方和 $\\Phi(D) = \\sum_{i=1}^N \\left(F_i^{\\mathrm{model}}(D) - F_i^{\\mathrm{meas}} \\right)^2$ 来推断扩散系数 $D$。\n- **实现约束：**\n    - 支持平板和圆柱体两种几何形状。\n    - 级数截断必须有合理解释。\n    - 最小化必须强制 $D > 0$。\n    - 单位：时间为 $\\mathrm{s}$，长度为 $\\mathrm{m}$，扩散系数为 $\\mathrm{m}^2/\\mathrm{s}$。\n- **测试套件数据：**\n    1.  平板：$L = 1.5 \\times 10^{-3}\\,\\mathrm{m}$，$t = [300, 1200, 3600, 14400]\\,\\mathrm{s}$，$F^{\\mathrm{meas}} = [0.1440, 0.2859, 0.4934, 0.8787]$。\n    2.  圆柱体：$R = 1.0 \\times 10^{-3}\\,\\mathrm{m}$，$t = [60, 300, 1200, 4800, 19200]\\,\\mathrm{s}$，$F^{\\mathrm{meas}} = [0.1104, 0.2480, 0.4670, 0.8013, 0.9953]$。\n    3.  圆柱体：$R = 5.0 \\times 10^{-4}\\,\\mathrm{m}$，$t = [200, 800, 3200]\\,\\mathrm{s}$，$F^{\\mathrm{meas}} = [0.1740, 0.3340, 0.6120]$。\n- **输出格式：** $[D_1, D_2, D_3]$，采用科学记数法，保留六位有效数字。\n\n**步骤 2：使用提取的信息进行验证**\n\n- **科学上成立：** 该问题基于菲克扩散定律，这是输运现象的基石。本征函数展开法（变量分离法）是求解此类线性偏微分方程的标准、严谨的数学技术。该问题的表述完全符合已建立的物理和数学原理。\n- **适定的：** 该问题是适定的。给出了偏微分方程以及每种几何形状明确的初始和边界条件，确保了唯一解的存在。参数估计任务也是适定的，因为它是一个连续、凸（在解的邻域内）目标函数的最小化问题。\n- **客观的：** 问题以精确、客观、无歧义的科学语言陈述。\n- **其他标准：** 问题是自洽的、可形式化的、且科学上可验证的。它并非微不足道，需要正确推导和实现解析解。\n\n**步骤 3：结论与行动**\n\n该问题被判定为**有效**。将提供解决方案。\n\n---\n\n**分数吸收量 $F(t)$ 的推导**\n\n推导过程首先对控制偏微分方程及其相关条件进行无量纲化，然后使用变量分离法求解得到的边值问题。\n\n我们定义无量纲浓度 $\\theta$ 以及无量纲空间和时间坐标。\n令 $\\theta = \\frac{C_s - C}{C_s - C_0}$。由于初始浓度 $C_0=0$，我们得到 $\\theta = 1 - \\frac{C}{C_s}$。\n扩散方程 $\\frac{\\partial C}{\\partial t} = D \\nabla^2 C$ 变换为 $\\frac{\\partial \\theta}{\\partial t} = D \\nabla^2 \\theta$。\n\n初始条件 $C(\\mathbf{x}, 0) = 0$ 变为 $\\theta(\\mathbf{x}, 0) = 1$。\n边界条件 $C(\\text{surface}, t) = C_s$ 变为 $\\theta(\\text{surface}, t) = 0$。\n\n分数吸收量为 $F(t) = \\frac{M_t}{M_\\infty} = \\frac{\\int_\\Omega C dV}{\\int_\\Omega C_s dV} = \\frac{1}{V_{total}} \\int_\\Omega \\frac{C}{C_s} dV$。\n用 $\\theta$ 表示，即为 $F(t) = \\frac{1}{V_{total}} \\int_\\Omega (1-\\theta) dV = 1 - \\frac{1}{V_{total}} \\int_\\Omega \\theta dV = 1 - \\bar{\\theta}(t)$，其中 $\\bar{\\theta}(t)$ 是体积平均的无量纲浓度。\n\n**1. 平板几何形状**\n\n对于半厚度为 $L$ 的平板，其域为 $x \\in [-L, L]$。拉普拉斯算子为 $\\nabla^2 = \\frac{\\partial^2}{\\partial x^2}$。我们引入无量纲变量 $\\xi = x/L$ 和无量纲时间（傅里叶数）$\\tau = Dt/L^2$。\n无量纲形式的控制方程为：\n$$\n\\frac{\\partial \\theta}{\\partial \\tau} = \\frac{\\partial^2 \\theta}{\\partial \\xi^2}\n$$\n初始条件 IC 为：对于 $\\xi \\in (-1, 1)$，有 $\\theta(\\xi, 0) = 1$；边界条件 BCs 为：对于 $\\tau > 0$，有 $\\theta(\\pm 1, \\tau) = 0$。\n\n我们使用变量分离法求解，设 $\\theta(\\xi, \\tau) = X(\\xi)T(\\tau)$。代入偏微分方程得到：\n$$\n\\frac{1}{T}\\frac{dT}{d\\tau} = \\frac{1}{X}\\frac{d^2 X}{d\\xi^2} = -\\lambda^2\n$$\n其中 $-\\lambda^2$ 是分离常数。这得到两个常微分方程：\n$T'(\\tau) + \\lambda^2 T(\\tau) = 0 \\implies T(\\tau) = \\exp(-\\lambda^2 \\tau)$.\n$X''(\\xi) + \\lambda^2 X(\\xi) = 0$ 及其边界条件 $X(\\pm 1) = 0$。\n\n空间问题是一个斯特姆-刘维尔 (Sturm-Liouville) 问题。通解为 $X(\\xi) = A \\cos(\\lambda \\xi) + B \\sin(\\lambda \\xi)$。初始条件 $\\theta(\\xi, 0)=1$ 是 $\\xi$ 的偶函数，因此解也必须是偶函数。这要求 $B=0$。\n将边界条件 $X(1)=0$ 应用于偶函数解 $X(\\xi) = A \\cos(\\lambda \\xi)$，得到 $\\cos(\\lambda) = 0$。\n本征值是此方程的根：对于 $n=1, 2, 3, \\dots$，$\\lambda_n = (n - 1/2)\\pi = \\frac{(2n-1)\\pi}{2}$。更常规的做法是使用从 0 开始的索引，使得对于 $n=0, 1, 2, \\dots$，有 $\\lambda_n = (n+1/2)\\pi = \\frac{(2n+1)\\pi}{2}$。我们采用此约定。\n\n$\\theta$ 的解是所有可能的本征解的叠加：\n$$\n\\theta(\\xi, \\tau) = \\sum_{n=0}^{\\infty} A_n \\cos(\\lambda_n \\xi) \\exp(-\\lambda_n^2 \\tau)\n$$\n系数 $A_n$ 由初始条件 $\\theta(\\xi, 0) = 1$ 确定：\n$$\n1 = \\sum_{n=0}^{\\infty} A_n \\cos(\\lambda_n \\xi)\n$$\n利用本征函数在 $\\xi \\in [-1, 1]$ 上的正交性：\n$$\nA_n = \\frac{\\int_{-1}^{1} 1 \\cdot \\cos(\\lambda_n \\xi) d\\xi}{\\int_{-1}^{1} \\cos^2(\\lambda_n \\xi) d\\xi}\n$$\n分子是 $\\int_{-1}^{1} \\cos(\\lambda_n \\xi) d\\xi = \\left[\\frac{\\sin(\\lambda_n \\xi)}{\\lambda_n}\\right]_{-1}^{1} = \\frac{2\\sin(\\lambda_n)}{\\lambda_n}$。由于 $\\lambda_n = (n+1/2)\\pi$，$\\sin(\\lambda_n) = (-1)^n$。分子是 $\\frac{2(-1)^n}{\\lambda_n}$。\n分母是 $\\int_{-1}^{1} \\cos^2(\\lambda_n \\xi) d\\xi = \\int_{-1}^{1} \\frac{1+\\cos(2\\lambda_n \\xi)}{2} d\\xi = 1$。\n因此，$A_n = \\frac{2(-1)^n}{\\lambda_n} = \\frac{2(-1)^n}{(n+1/2)\\pi} = \\frac{4(-1)^n}{(2n+1)\\pi}$。\n\n为求得 $F(\\tau)$，我们计算空间平均值 $\\bar{\\theta}(\\tau)$：\n$$\n\\bar{\\theta}(\\tau) = \\frac{1}{2} \\int_{-1}^{1} \\theta(\\xi, \\tau) d\\xi = \\frac{1}{2} \\int_{-1}^{1} \\sum_{n=0}^{\\infty} A_n \\cos(\\lambda_n \\xi) \\exp(-\\lambda_n^2 \\tau) d\\xi\n$$\n交换求和与积分的次序：\n$$\n\\bar{\\theta}(\\tau) = \\sum_{n=0}^{\\infty} A_n \\exp(-\\lambda_n^2 \\tau) \\left( \\frac{1}{2} \\int_{-1}^{1} \\cos(\\lambda_n \\xi) d\\xi \\right) = \\sum_{n=0}^{\\infty} A_n \\left(\\frac{\\sin(\\lambda_n)}{\\lambda_n}\\right) \\exp(-\\lambda_n^2 \\tau)\n$$\n代入 $A_n = \\frac{2\\sin(\\lambda_n)}{\\lambda_n}$：\n$$\n\\bar{\\theta}(\\tau) = \\sum_{n=0}^{\\infty} \\frac{2\\sin^2(\\lambda_n)}{\\lambda_n^2} \\exp(-\\lambda_n^2 \\tau) = \\sum_{n=0}^{\\infty} \\frac{2}{\\lambda_n^2} \\exp(-\\lambda_n^2 \\tau)\n$$\n代入 $\\lambda_n = \\frac{(2n+1)\\pi}{2}$，我们得到 $\\lambda_n^2 = \\frac{(2n+1)^2\\pi^2}{4}$。\n$$\n\\bar{\\theta}(\\tau) = \\sum_{n=0}^{\\infty} \\frac{2 \\cdot 4}{(2n+1)^2\\pi^2} \\exp\\left(-\\frac{(2n+1)^2\\pi^2}{4}\\tau\\right) = \\frac{8}{\\pi^2} \\sum_{n=0}^{\\infty} \\frac{1}{(2n+1)^2} \\exp\\left(-\\frac{(2n+1)^2\\pi^2}{4}\\tau\\right)\n$$\n最后，$F(\\tau) = 1 - \\bar{\\theta}(\\tau)$。平板的分数吸收量为：\n$$\nF_{\\text{slab}}(t) = 1 - \\frac{8}{\\pi^2} \\sum_{n=0}^{\\infty} \\frac{1}{(2n+1)^2} \\exp\\left( - \\frac{(2n+1)^2 \\pi^2 D t}{4 L^2} \\right)\n$$\n\n**2. 无限长圆柱体几何形状**\n\n对于半径为 $R$ 的圆柱体，其域为 $r \\in [0, R]$。在圆柱坐标系中（具有方位角和轴向对称性），拉普拉斯算子为 $\\nabla^2 = \\frac{1}{r}\\frac{\\partial}{\\partial r}\\left(r\\frac{\\partial}{\\partial r}\\right)$。我们使用无量纲变量 $\\rho = r/R$ 和 $\\tau = Dt/R^2$。\n无量纲形式的控制方程为：\n$$\n\\frac{\\partial \\theta}{\\partial \\tau} = \\frac{1}{\\rho}\\frac{\\partial}{\\partial \\rho}\\left(\\rho\\frac{\\partial \\theta}{\\partial \\rho}\\right)\n$$\n初始条件 IC 为：对于 $\\rho \\in [0, 1)$，有 $\\theta(\\rho, 0) = 1$；边界条件 BCs 为：$\\theta(1, \\tau) = 0$ 和 $\\frac{\\partial\\theta}{\\partial\\rho}|_{\\rho=0} = 0$（由对称性）。\n\n使用变量分离法 $\\theta(\\rho, \\tau) = P(\\rho)T(\\tau)$ 得到：\n$T'(\\tau) + \\lambda^2 T(\\tau) = 0 \\implies T(\\tau) = \\exp(-\\lambda^2 \\tau)$。\n$\\rho^2 P''(\\rho) + \\rho P'(\\rho) + \\lambda^2\\rho^2 P(\\rho) = 0$。这是零阶贝塞尔 (Bessel) 方程。\n\n通解为 $P(\\rho) = A J_0(\\lambda \\rho) + B Y_0(\\lambda \\rho)$。对称性条件要求解在 $\\rho=0$ 处是有限的。由于当 $\\rho \\to 0$ 时 $Y_0(\\rho) \\to -\\infty$，我们必须有 $B=0$。\n表面上的边界条件 $P(1)=0$ 要求 $J_0(\\lambda)=0$。本征值 $\\lambda_n$ 是零阶第一类贝塞尔函数 $J_0(x)$ 的正根。我们用 $\\alpha_n$（$n=1, 2, 3, \\dots$）表示这些根。\n\n$\\theta$ 的解是：\n$$\n\\theta(\\rho, \\tau) = \\sum_{n=1}^{\\infty} A_n J_0(\\alpha_n \\rho) \\exp(-\\alpha_n^2 \\tau)\n$$\n系数 $A_n$ 由初始条件 $\\theta(\\rho, 0) = 1$ 和贝塞尔函数族关于权重 $\\rho$ 的正交性确定：\n$$\nA_n = \\frac{\\int_{0}^{1} \\rho \\cdot 1 \\cdot J_0(\\alpha_n \\rho) d\\rho}{\\int_{0}^{1} \\rho J_0^2(\\alpha_n \\rho) d\\rho}\n$$\n分子积分使用恒等式 $\\int u J_0(u) du = u J_1(u)$ 计算，得到 $\\int_{0}^{1} \\rho J_0(\\alpha_n \\rho) d\\rho = \\frac{J_1(\\alpha_n)}{\\alpha_n}$。\n分母积分是一个标准结果：$\\int_{0}^{1} \\rho J_0^2(\\alpha_n \\rho) d\\rho = \\frac{1}{2} J_1^2(\\alpha_n)$。\n所以，$A_n = \\frac{J_1(\\alpha_n)/\\alpha_n}{\\frac{1}{2} J_1^2(\\alpha_n)} = \\frac{2}{\\alpha_n J_1(\\alpha_n)}$。\n\n为求得 $F(\\tau)$，我们计算体积平均值 $\\bar{\\theta}(\\tau)$：\n$$\n\\bar{\\theta}(\\tau) = \\frac{\\int_0^R C(r,t) 2\\pi r dr}{\\pi R^2} = \\frac{\\int_0^1 \\theta(\\rho,\\tau) 2\\pi R^2 \\rho d\\rho}{\\pi R^2} = 2 \\int_{0}^{1} \\rho \\theta(\\rho, \\tau) d\\rho\n$$\n$$\n\\bar{\\theta}(\\tau) = 2 \\int_{0}^{1} \\rho \\sum_{n=1}^{\\infty} A_n J_0(\\alpha_n \\rho) \\exp(-\\alpha_n^2 \\tau) d\\rho = 2 \\sum_{n=1}^{\\infty} A_n \\exp(-\\alpha_n^2 \\tau) \\int_{0}^{1} \\rho J_0(\\alpha_n \\rho) d\\rho\n$$\n使用前面积分的结果, $\\int_{0}^{1} \\rho J_0(\\alpha_n \\rho) d\\rho = \\frac{J_1(\\alpha_n)}{\\alpha_n}$:\n$$\n\\bar{\\theta}(\\tau) = 2 \\sum_{n=1}^{\\infty} \\left( \\frac{2}{\\alpha_n J_1(\\alpha_n)} \\right) \\left( \\frac{J_1(\\alpha_n)}{\\alpha_n} \\right) \\exp(-\\alpha_n^2 \\tau) = \\sum_{n=1}^{\\infty} \\frac{4}{\\alpha_n^2} \\exp(-\\alpha_n^2 \\tau)\n$$\n最后，$F(\\tau) = 1 - \\bar{\\theta}(\\tau)$。圆柱体的分数吸收量为：\n$$\nF_{\\text{cyl}}(t) = 1 - \\sum_{n=1}^{\\infty} \\frac{4}{\\alpha_n^2} \\exp\\left( - \\alpha_n^2 \\frac{D t}{R^2} \\right)\n$$\n\n**数值实现**\n\n对于数值实现，两种几何形状的无穷级数都将被截断。由于指数项 $\\exp(-k \\cdot n^2 \\cdot \\tau)$（其中 $k$ 为正常数且 $\\tau > 0$），这些级数的收敛速度很快。对于任何 $t > 0$ 的实际应用，随着索引 $n$ 的增加，级数项会极快地减小。在足够大的项数（例如 $N=1000$）处截断级数，可以保证远超典型实验数据精度的高数值准确性。实现将采用此方法。将通过使用有界标量优化器来最小化残差平方和 $\\Phi(D)$，以找到扩散系数 $D$，并强制施加 $D>0$ 的物理约束。", "answer": "```python\nimport numpy as np\nfrom scipy.special import jn_zeros\nfrom scipy.optimize import minimize_scalar\n\ndef solve():\n    \"\"\"\n    Derives diffusivity D from experimental uptake data for slab and cylinder geometries.\n    \"\"\"\n\n    # Pre-compute a sufficient number of Bessel function roots for the cylinder model.\n    # N_TERMS = 1000 is a safe choice as the series converges extremely rapidly.\n    N_TERMS = 1000\n    alpha_n = jn_zeros(0, N_TERMS)\n    alpha_n_sq = alpha_n**2\n\n    def calculate_F_model(times, D, length, geometry):\n        \"\"\"\n        Calculates the model-predicted fractional uptake F(t) using the eigenfunction expansion.\n\n        Args:\n            times (np.ndarray): Array of time points in seconds.\n            D (float): Diffusivity in m^2/s.\n            length (float): Characteristic length (L for slab, R for cylinder) in meters.\n            geometry (str): 'slab' or 'cylinder'.\n\n        Returns:\n            np.ndarray: Array of fractional uptake F(t) at each time point.\n        \"\"\"\n        if D <= 0:\n            # Return a large value if D is non-physical to guide the optimizer away.\n            return np.full_like(times, np.inf, dtype=float)\n\n        tau = D * times / (length**2)\n\n        if geometry == 'slab':\n            # F_slab(t) = 1 - sum_{n=0 to inf} [8/((2n+1)^2 * pi^2)] * exp(- (2n+1)^2 * pi^2 * tau / 4)\n            n = np.arange(N_TERMS)\n            coeffs = 8 / ((2 * n + 1)**2 * np.pi**2)\n            exp_arg_base = -((2 * n + 1)**2 * np.pi**2) / 4\n\n            # Use broadcasting for efficient computation over all time points.\n            # exp_arg_base is (N_TERMS,), tau is (N_times,).\n            # We need exp_arg_base[:, np.newaxis] * tau[np.newaxis, :]\n            exp_terms = np.exp(np.outer(exp_arg_base, tau))\n            series_sum = np.sum(coeffs[:, np.newaxis] * exp_terms, axis=0)\n            return 1 - series_sum\n\n        elif geometry == 'cylinder':\n            # F_cyl(t) = 1 - sum_{n=1 to inf} [4 / alpha_n^2] * exp(-alpha_n^2 * tau)\n            # alpha_n are the roots of J0(x)=0.\n            coeffs = 4 / alpha_n_sq\n            exp_arg_base = -alpha_n_sq\n            \n            # Broadcasting: exp_arg_base is (N_TERMS,), tau is (N_times,)\n            exp_terms = np.exp(np.outer(exp_arg_base, tau))\n            series_sum = np.sum(coeffs[:, np.newaxis] * exp_terms, axis=0)\n            return 1 - series_sum\n        \n        else:\n            raise ValueError(\"Geometry must be 'slab' or 'cylinder'.\")\n\n    def objective_function(D, times, F_meas, length, geometry):\n        \"\"\"\n        Objective function (sum of squared residuals) to be minimized.\n        \"\"\"\n        F_model = calculate_F_model(times, D, length, geometry)\n        if np.any(np.isinf(F_model)):\n            return np.inf\n        residuals = F_model - F_meas\n        return np.sum(residuals**2)\n\n    # Test cases defined in the problem statement.\n    test_cases = [\n        {\n            \"geometry\": \"slab\",\n            \"length\": 1.5e-3,  # L in meters\n            \"times\": np.array([300, 1200, 3600, 14400]),  # seconds\n            \"F_meas\": np.array([0.1440, 0.2859, 0.4934, 0.8787])\n        },\n        {\n            \"geometry\": \"cylinder\",\n            \"length\": 1.0e-3,  # R in meters\n            \"times\": np.array([60, 300, 1200, 4800, 19200]),  # seconds\n            \"F_meas\": np.array([0.1104, 0.2480, 0.4670, 0.8013, 0.9953])\n        },\n        {\n            \"geometry\": \"cylinder\",\n            \"length\": 5.0e-4,  # R in meters\n            \"times\": np.array([200, 800, 3200]),  # seconds\n            \"F_meas\": np.array([0.1740, 0.3340, 0.6120])\n        }\n    ]\n\n    estimated_diffusivities = []\n    \n    # Optimization bounds for D. Based on a rough estimation, D is expected\n    # to be in the range [1e-12, 1e-9]. A wider bound is used for robustness.\n    D_bounds = (1e-15, 1e-8)\n\n    for case in test_cases:\n        # Create a partial function for the optimizer\n        args = (case[\"times\"], case[\"F_meas\"], case[\"length\"], case[\"geometry\"])\n        \n        # Perform bounded scalar minimization to find the optimal D\n        result = minimize_scalar(\n            objective_function,\n            bounds=D_bounds,\n            args=args,\n            method='bounded'\n        )\n        \n        estimated_diffusivities.append(result.x)\n\n    # Format the output as specified in the problem statement.\n    # Example format: [1.234000e-10,2.345000e-11,3.456000e-12]\n    formatted_results = [f\"{d:.6e}\" for d in estimated_diffusivities]\n    print(f\"[{','.join(formatted_results)}]\")\n\nsolve()\n```", "id": "2468456"}, {"introduction": "在现代传递现象研究中，数值模拟扮演着至关重要的角色，但我们如何确保这些计算工具的可靠性呢？本练习将介绍一种专业级的技术——代码验证。你将利用热与质量传递之间的形式类比，并结合“人造解方法”(Method of Manufactured Solutions)，来严格测试一个为扩散方程编写的数值求解器并量化其精度。这项实践不仅能加深你对类比的理解，还能让你掌握验证计算代码准确性的核心方法。[@problem_id:2468425]", "problem": "要求您利用与瞬态热传导的形式类比以及使用人工解方法，来验证一个一维质量扩散求解器。目标是设计并实现一个程序，该程序能够 (i) 将热传导方程的已知解析解映射到组分质量扩散方程，以提供精确参考；(ii) 构建一个带有非零体积源项的人工解，以验证对源项的处理；以及 (iii) 通过网格加密来量化离散误差和估计的精度阶。\n\n从以下基本原理出发。\n\n- 扩散标量瞬态一维输运的守恒声明：对于定义在域 $x \\in [0,1]$ 和时间 $t \\ge 0$ 上的守恒标量场 $c(x,t)$，以及恒定的质量扩散系数 $D$，其控制方程为\n$$\n\\frac{\\partial c}{\\partial t} = D \\frac{\\partial^2 c}{\\partial x^2} + S(x,t),\n$$\n其中 $S(x,t)$ 是一个给定的单位体积的体积源项。在映射关系 $T \\leftrightarrow c$、$\\alpha \\leftrightarrow D$ 和 $(q'''/(\\rho c_p)) \\leftrightarrow S$ 下，该方程在数学上与具有热扩散系数 $\\alpha$ 和体积生热率的瞬态热传导问题是类比的。\n\n- 在以下每种情况下，指定的边界和初始数据都与精确解兼容（两端均为狄利克雷边界条件），且输出均为无量纲。\n\n您必须在均匀网格上实现一个基于无条件稳定的隐式两层方法的时空二阶有限差分求解器，并通过网格加密验证其相对于精确解的收敛性。不要将任何外部提供的离散化公式当作黑箱使用；您需要从控制方程、拉普拉斯算子的中心差分近似以及扩散项和源项的两层时间中心近似出发，推导出您的更新方程。\n\n必须实现两个验证案例。\n\n- 案例 A（将解析热传导解映射到扩散问题）：使用精确解\n$$\nc_A(x,t) = \\sin(\\pi x)\\, \\exp\\!\\big(-\\pi^2 D\\, t\\big),\n$$\n该解用于求解无源问题 $S_A(x,t) = 0$，其边界条件为齐次狄利克雷边界条件 $c_A(0,t) = 0$ 和 $c_A(1,t) = 0$，初始条件为 $c_A(x,0) = \\sin(\\pi x)$。\n\n- 案例 B（带有非零源项的人工解方法）：使用人工精确解\n$$\nc_B(x,t) = e^{-t} \\sin(\\pi x) + x\\,(1-x)\\,\\cos(2 t),\n$$\n并通过将 $c_B$ 代入控制方程并分离出 $S_B(x,t)$ 来构建相应的源项 $S_B(x,t)$，从而使 $c_B$ 精确满足该方程。其狄利克雷边界条件 $c_B(0,t)$ 和 $c_B(1,t)$ 以及初始条件 $c_B(x,0)$ 均从 $c_B$ 中获取。\n\n对两个案例，使用相同的扩散系数、计算域和加密设置。\n\n- 扩散系数：$D = 0.1$。\n- 空间域：$x \\in [0,1]$。\n- 最终时间：$t_{\\mathrm{final}} = 0.05$。\n- 空间网格尺寸（内部未知量）：$N \\in \\{20, 40, 80\\}$。\n- 时间步长选择：对每个 $N$，选择 $\\Delta x = 1/(N+1)$ 和时间步长 $\\Delta t = 0.1\\,\\Delta x$；然后取整数个时间步，通过设置步数 $M = \\lceil t_{\\mathrm{final}}/\\Delta t \\rceil$ 并重新定义 $\\Delta t = t_{\\mathrm{final}}/M$，使得最终时间恰好为 $t_{\\mathrm{final}}$。\n\n将每个网格在最终时间的误差定义如下。\n\n- 令所有节点 $i$ （包括边界）上的误差为 $e_i = c_i^{\\mathrm{num}}(t_{\\mathrm{final}}) - c^{\\mathrm{exact}}(x_i,t_{\\mathrm{final}})$，节点间距为均匀的 $\\Delta x$。\n- 离散 $L^2$ 范数：\n$$\n\\|e\\|_{2} = \\sqrt{ \\Delta x \\sum_{i=0}^{N+1} e_i^2 }.\n$$\n- 离散 $L^\\infty$ 范数：\n$$\n\\|e\\|_{\\infty} = \\max_{0 \\le i \\le N+1} |e_i|.\n$$\n\n量化连续加密之间的估计收敛阶。对于在网格尺寸 $h = \\Delta x$ 上测得的范数 $E(h)$，将 $(h_1,h_2)$ 之间的估计阶定义为\n$$\np = \\frac{\\ln\\!\\big(E(h_1)/E(h_2)\\big)}{\\ln(h_1/h_2)}.\n$$\n\n测试套件。您的程序必须针对案例 A 和案例 B，计算在 $t_{\\mathrm{final}}$ 时 $N \\in \\{20,40,80\\}$ 的以下各项：\n\n- 每个网格上的离散 $L^2$ 误差。\n- 每个网格上的离散 $L^\\infty$ 误差。\n- $N=20 \\to 40$ 和 $N=40 \\to 80$ 之间 $L^2$ 范数的估计收敛阶。\n- $N=20 \\to 40$ 和 $N=40 \\to 80$ 之间 $L^\\infty$ 范数的估计收敛阶。\n\n最终输出格式。您的程序应生成单行输出，其中包含用方括号括起来的、以逗号分隔的结果列表。条目必须严格按照此顺序排列，且均为无量纲：\n\n- 案例 A：$N=20$、$N=40$、$N=80$ 时的 $\\|e\\|_{2}$；然后是 $20 \\to 40$ 和 $40 \\to 80$ 时的两个 $L^2$ 估计阶；然后是 $N=20$、$N=40$、$N=80$ 时的 $\\|e\\|_{\\infty}$；然后是 $20 \\to 40$ 和 $40 \\to 80$ 时的两个 $L^\\infty$ 估计阶。\n- 案例 B：与案例 A 的序列相同。\n\n具体而言，输出必须按以下顺序包含20个浮点数\n$$\n\\big[ E^{A}_{2}(20), E^{A}_{2}(40), E^{A}_{2}(80), p^{A}_{2}(20\\!\\to\\!40), p^{A}_{2}(40\\!\\to\\!80), E^{A}_{\\infty}(20), E^{A}_{\\infty}(40), E^{A}_{\\infty}(80), p^{A}_{\\infty}(20\\!\\to\\!40), p^{A}_{\\infty}(40\\!\\to\\!80), E^{B}_{2}(20), E^{B}_{2}(40), E^{B}_{2}(80), p^{B}_{2}(20\\!\\to\\!40), p^{B}_{2}(40\\!\\to\\!80), E^{B}_{\\infty}(20), E^{B}_{\\infty}(40), E^{B}_{\\infty}(80), p^{B}_{\\infty}(20\\!\\to\\!40), p^{B}_{\\infty}(40\\!\\to\\!80) \\big].\n$$\n所有输出均为无量纲实数；不需要物理单位。程序必须且仅能生成这一行输出。", "solution": "所提出的问题是偏微分方程数值解领域的一个标准练习，具体来说，是验证一个用于一维瞬态扩散方程的有限差分求解器。该问题是适定的、科学上合理的，并包含了求解所需的所有必要信息。这是一个有效的问题。我们继续进行推导和实现。\n\n标量浓度 $c(x,t)$ 输运的控制方程由下式给出：\n$$\n\\frac{\\partial c}{\\partial t} = D \\frac{\\partial^2 c}{\\partial x^2} + S(x,t)\n$$\n其中 $D$ 是恒定的质量扩散系数，$S(x,t)$ 是一个体积源项。指定的域为 $x \\in [0,1]$ 和 $t \\ge 0$。\n\n为数值求解此方程，我们在均匀空间网格 $x_i = i \\Delta x$（其中 $i \\in \\{0, 1, \\dots, N+1\\}$ 且 $\\Delta x = 1/(N+1)$）和均匀时间步 $t^n = n \\Delta t$ 上采用有限差分法。令 $c_i^n$ 为 $c(x_i, t^n)$ 的数值近似值。\n\n问题要求一种在时间和空间上均为二阶精度的方法。我们选择 Crank-Nicolson 格式，该格式是无条件稳定的，并能达到这个精度阶。该格式是通过将时间和空间导数在半时间步 $t^{n+1/2} = t^n + \\Delta t/2$ 处中心化来推导的。\n\n时间导数通过关于 $t^{n+1/2}$ 的中心差分进行近似：\n$$\n\\left. \\frac{\\partial c}{\\partial t} \\right|_{i}^{n+1/2} \\approx \\frac{c_i^{n+1} - c_i^n}{\\Delta t}\n$$\n扩散项通过对时间层 $n$ 和 $n+1$ 处的空间有限差分进行平均来近似：\n$$\n\\left. D \\frac{\\partial^2 c}{\\partial x^2} \\right|_{i}^{n+1/2} \\approx \\frac{D}{2} \\left( \\left. \\frac{\\partial^2 c}{\\partial x^2} \\right|_i^{n+1} + \\left. \\frac{\\partial^2 c}{\\partial x^2} \\right|_i^n \\right)\n$$\n使用空间二阶导数的二阶中心差分近似 $\\frac{\\partial^2 c}{\\partial x^2} \\approx \\frac{c_{i+1} - 2c_i + c_{i-1}}{\\Delta x^2}$，上式变为：\n$$\n\\left. D \\frac{\\partial^2 c}{\\partial x^2} \\right|_{i}^{n+1/2} \\approx \\frac{D}{2\\Delta x^2} \\left[ (c_{i+1}^{n+1} - 2c_i^{n+1} + c_{i-1}^{n+1}) + (c_{i+1}^n - 2c_i^n + c_{i-1}^n) \\right]\n$$\n源项也在时间上中心化：\n$$\nS(x_i, t^{n+1/2}) \\approx \\frac{1}{2} \\left( S(x_i, t^{n+1}) + S(x_i, t^n) \\right) = \\frac{1}{2}(S_i^{n+1} + S_i^n)\n$$\n将这些近似代入控制方程，得到每个内部节点 $i \\in \\{1, 2, \\dots, N\\}$ 的完全离散形式：\n$$\n\\frac{c_i^{n+1} - c_i^n}{\\Delta t} = \\frac{D}{2\\Delta x^2} \\left[ (c_{i+1}^{n+1} - 2c_i^{n+1} + c_{i-1}^{n+1}) + (c_{i+1}^n - 2c_i^n + c_{i-1}^n) \\right] + \\frac{1}{2}(S_i^{n+1} + S_i^n)\n$$\n为了为时间层 $n+1$ 处的未知值创建一个线性系统，我们对各项进行分组。令无量纲参数 $\\lambda = \\frac{D \\Delta t}{2 \\Delta x^2}$。重新整理方程可得：\n$$\n-\\lambda c_{i-1}^{n+1} + (1+2\\lambda)c_i^{n+1} - \\lambda c_{i+1}^{n+1} = \\lambda c_{i-1}^n + (1-2\\lambda)c_i^n + \\lambda c_{i+1}^n + \\frac{\\Delta t}{2}(S_i^{n+1} + S_i^n)\n$$\n该方程为 $N$ 个未知的内部浓度 $c_1^{n+1}, \\dots, c_N^{n+1}$ 定义了一个包含 $N$ 个线性方程的方程组。其矩阵形式为 $\\mathbf{A} \\mathbf{c}_{\\text{int}}^{n+1} = \\mathbf{b}^n$，其中 $\\mathbf{c}_{\\text{int}}$ 是内部浓度的向量。\n\n矩阵 $\\mathbf{A}$ 是一个稀疏、对称、正定且三对角的 $N \\times N$ 矩阵：\n$$\n\\mathbf{A} = \n\\begin{pmatrix}\n1+2\\lambda & -\\lambda & 0 & \\dots & 0 \\\\\n-\\lambda & 1+2\\lambda & -\\lambda & \\dots & 0 \\\\\n\\vdots & \\ddots & \\ddots & \\ddots & \\vdots \\\\\n0 & \\dots & -\\lambda & 1+2\\lambda & -\\lambda \\\\\n0 & \\dots & 0 & -\\lambda & 1+2\\lambda\n\\end{pmatrix}\n$$\n大小为 $N$ 的右端向量 $\\mathbf{b}^n$ 的元素 $b_i^n$ 由下式给出：\n$$\nb_i^n = \\lambda c_{i-1}^n + (1-2\\lambda)c_i^n + \\lambda c_{i+1}^n + \\frac{\\Delta t}{2}(S_i^{n+1} + S_i^n)\n$$\n边值 $c_0^n, c_0^{n+1}, c_{N+1}^n, c_{N+1}^{n+1}$ 由狄利克雷条件指定。对于两个验证案例，边界条件都是齐次的：$c(0,t)=0$ 和 $c(1,t)=0$。因此，对于所有的 $n$，都有 $c_0^n=c_0^{n+1}=0$ 和 $c_{N+1}^n=c_{N+1}^{n+1}=0$。这简化了 $i=1$ 和 $i=N$ 时的方程，因为右端向量 $\\mathbf{b}^n$ 中不会出现额外的边界项。在每个时间步，这个三对角系统可以使用诸如托马斯算法（Thomas algorithm）等算法高效求解。\n\n对于案例 B（人工解方法），我们必须推导出源项 $S_B(x,t)$，它使得人工解 $c_B(x,t) = e^{-t} \\sin(\\pi x) + x(1-x)\\cos(2 t)$ 成为控制偏微分方程的一个精确解。我们将 $c_B$ 代入方程 $S = \\partial c/\\partial t - D \\partial^2 c/\\partial x^2$。\n偏导数如下：\n$$\n\\frac{\\partial c_B}{\\partial t} = -e^{-t} \\sin(\\pi x) - 2x(1-x)\\sin(2t)\n$$\n$$\n\\frac{\\partial^2 c_B}{\\partial x^2} = -\\pi^2 e^{-t} \\sin(\\pi x) - 2\\cos(2t)\n$$\n因此，源项为：\n$$\nS_B(x,t) = \\left[-e^{-t} \\sin(\\pi x) - 2x(1-x)\\sin(2t)\\right] - D \\left[-\\pi^2 e^{-t} \\sin(\\pi x) - 2\\cos(2t)\\right]\n$$\n$$\nS_B(x,t) = (\\pi^2 D - 1)e^{-t} \\sin(\\pi x) - 2x(1-x)\\sin(2t) + 2D\\cos(2t)\n$$\n数值实现将首先按规定设置网格和时间步进参数。对于每个空间分辨率 $N$，我们计算 $\\Delta x = 1/(N+1)$，一个初始时间步 $\\Delta t_{\\text{trial}}=0.1\\Delta x$，步数 $M = \\lceil t_{\\text{final}}/\\Delta t_{\\text{trial}} \\rceil$，以及最终调整后的时间步 $\\Delta t = t_{\\text{final}}/M$。\n\n模拟从网格上适当的初始条件 $c(x,0)$ 开始。在每个时间步，组装三对角矩阵 $\\mathbf{A}$ 和右端向量 $\\mathbf{b}^n$，然后求解线性系统以获得内部浓度 $\\mathbf{c}_{\\text{int}}^{n+1}$。然后将解推进到下一个时间步。\n\n到达最终时间 $t_{\\text{final}}$ 后，将数值解 $c_i^{\\text{num}}(t_{\\text{final}})$ 与精确解 $c^{\\text{exact}}(x_i, t_{\\text{final}})$ 进行比较。在所有网格节点 $i=0, \\dots, N+1$ 上计算误差 $e_i = c_i^{\\text{num}} - c_i^{\\text{exact}}$。离散 $L^2$ 和 $L^\\infty$ 误差范数计算如下：\n$$\n\\|e\\|_{2} = \\sqrt{ \\Delta x \\sum_{i=0}^{N+1} e_i^2 } \\quad \\text{和} \\quad \\|e\\|_{\\infty} = \\max_{0 \\le i \\le N+1} |e_i|\n$$\n具有特征网格尺寸 $h_1$ 和 $h_2$ 以及相应误差 $E(h_1)$ 和 $E(h_2)$ 的两次网格加密之间的估计收敛阶 $p$，由下式量化：\n$$\np = \\frac{\\ln(E(h_1)/E(h_2))}{\\ln(h_1/h_2)}\n$$\n这里，$h = \\Delta x = 1/(N+1)$。对案例 A 和案例 B，在由 $N \\in \\{20, 40, 80\\}$ 定义的网格序列上执行此过程。将得到的误差和收敛阶组装成指定的输出格式。", "answer": "```python\nimport numpy as np\nfrom scipy.linalg import solve_banded\nimport math\n\ndef solve():\n    \"\"\"\n    Main function to run the verification cases and produce the final output.\n    \"\"\"\n    D_val = 0.1\n    t_final_val = 0.05\n    N_values = [20, 40, 80]\n\n    # --- Verification Functions ---\n    # Case A: Analytical solution\n    c_exact_A = lambda x, t: np.sin(np.pi * x) * np.exp(-np.pi**2 * D_val * t)\n    S_A = lambda x, t: np.zeros_like(x)\n    ic_A = lambda x: np.sin(np.pi * x)\n    \n    # Case B: Manufactured solution\n    c_exact_B = lambda x, t: np.exp(-t) * np.sin(np.pi * x) + x * (1 - x) * np.cos(2 * t)\n    def S_B(x, t):\n        term1 = (np.pi**2 * D_val - 1) * np.exp(-t) * np.sin(np.pi * x)\n        term2 = -2 * x * (1 - x) * np.sin(2 * t)\n        term3 = 2 * D_val * np.cos(2 * t)\n        return term1 + term2 + term3\n    ic_B = lambda x: np.sin(np.pi * x) + x * (1 - x)\n\n    # Dictionary to hold functions for each case\n    cases = {\n        'A': {'c_exact': c_exact_A, 'S': S_A, 'ic': ic_A},\n        'B': {'c_exact': c_exact_B, 'S': S_B, 'ic': ic_B}\n    }\n\n    def run_simulation(N, case_type):\n        \"\"\"\n        Runs a single simulation for a given N and case type.\n        \"\"\"\n        # Grid and time step parameters\n        L = 1.0\n        dx = L / (N + 1)\n        x = np.linspace(0, L, N + 2)\n        \n        dt_trial = 0.1 * dx\n        M = math.ceil(t_final_val / dt_trial)\n        dt = t_final_val / M\n\n        # Select functions for the current case\n        case_funcs = cases[case_type]\n        c_exact_func = case_funcs['c_exact']\n        S_func = case_funcs['S']\n        ic_func = case_funcs['ic']\n        \n        # Boundary conditions are homogeneous for both cases\n        g0 = lambda t: 0.0\n        g1 = lambda t: 0.0\n\n        # Initialize solution from initial condition\n        c_current = ic_func(x)\n        \n        # Set up the Crank-Nicolson linear system A*c_new = b\n        # A is a tridiagonal matrix, constant in time.\n        lam = D_val * dt / (2 * dx**2)\n        main_diag = np.full(N, 1 + 2 * lam)\n        off_diag = np.full(N - 1, -lam)\n        # SciPy's banded format: (l+u+1, N)\n        A_banded = np.zeros((3, N))\n        A_banded[0, 1:] = off_diag\n        A_banded[1, :] = main_diag\n        A_banded[2, :-1] = off_diag\n\n        # Time-stepping loop\n        t = 0.0\n        for n in range(M):\n            t_n = n * dt\n            t_n1 = (n + 1) * dt\n            \n            c_int_current = c_current[1:-1] # Interior points\n            \n            # Construct RHS vector b\n            # Diffusion part from time t_n\n            b_diffusion = lam * (c_current[:-2] + c_current[2:]) + (1 - 2 * lam) * c_int_current\n\n            # Source term part (averaged over t_n and t_n1)\n            x_int = x[1:-1]\n            S_n = S_func(x_int, t_n)\n            S_n1 = S_func(x_int, t_n1)\n            b_source = 0.5 * dt * (S_n + S_n1)\n            \n            b = b_diffusion + b_source\n            \n            # Since BCs are homogeneous, no extra terms for boundary contributions\n\n            # Solve the tridiagonal system for interior points\n            c_int_new = solve_banded((1, 1), A_banded, b)\n            \n            # Update solution vector with new interior and boundary values\n            c_current = np.concatenate(([g0(t_n1)], c_int_new, [g1(t_n1)]))\n        \n        # After loop, c_current is the numerical solution at t_final\n        c_exact_final = c_exact_func(x, t_final_val)\n        \n        # Calculate errors over all nodes\n        error_vec = c_current - c_exact_final\n        \n        L2_error = np.sqrt(dx * np.sum(error_vec**2))\n        Linf_error = np.max(np.abs(error_vec))\n        \n        return L2_error, Linf_error\n\n    def calculate_order(errors, Ns):\n        \"\"\"Calculates estimated order of convergence.\"\"\"\n        orders = []\n        for i in range(len(Ns) - 1):\n            E1 = errors[i]\n            E2 = errors[i+1]\n            h1 = 1.0 / (Ns[i] + 1)\n            h2 = 1.0 / (Ns[i+1] + 1)\n            if E1 > 0 and E2 > 0:\n                p = np.log(E1 / E2) / np.log(h1 / h2)\n                orders.append(p)\n            else:\n                orders.append(0.0)\n        return orders\n\n    all_results = []\n    for case_id in ['A', 'B']:\n        errors_L2 = []\n        errors_Linf = []\n        for n in N_values:\n            l2, linf = run_simulation(n, case_id)\n            errors_L2.append(l2)\n            errors_Linf.append(linf)\n        \n        orders_L2 = calculate_order(errors_L2, N_values)\n        orders_Linf = calculate_order(errors_Linf, N_values)\n        \n        # Assemble results for the case in the specified order\n        case_results = errors_L2 + orders_L2 + errors_Linf + orders_Linf\n        all_results.extend(case_results)\n\n    # Format final output string as per requirements\n    print(f\"[{','.join(map(str, all_results))}]\")\n\nsolve()\n```", "id": "2468425"}]}