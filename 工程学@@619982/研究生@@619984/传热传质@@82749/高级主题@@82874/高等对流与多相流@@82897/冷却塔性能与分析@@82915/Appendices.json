{"hands_on_practices": [{"introduction": "冷却塔设计的基石是确定满足特定散热负荷所需的物理“尺寸”或“容量”。本实践将指导您从第一性原理出发，实现 Merkel 积分法，这是进行冷却塔选型的基本工具 [@problem_id:2474416]。通过对控制能量平衡方程进行数值积分，您将开发一个稳健的计算程序，以计算所需的体积传热系数乘积 $K_a a_v V$，从而将理论与实际计算联系起来。", "problem": "要求您基于默克尔积分，实现一个数值稳健的程序，用于计算逆流式蒸发冷却塔所需的总体积传质系数、单位体积界面面积和塔体积的乘积（记为 $K_a a_v V$）。该冷却塔将指定的热负荷排放到气流中。您的程序必须从守恒原理和标准湿空气性质关系出发，并且不得依赖任何预先制表的冷却塔性能关联式。所有物理输入均使用国际单位制（SI），所有输出也必须以指定的SI单位报告。\n\n物理设定使用以下建模基础和假设：\n- 微元塔片的能量守恒和稳态运行。\n- 默克尔方法，其中路易斯因子（热质传递类比系数之比）假定为1，且液-汽界面的热容可忽略不计。\n- 空气被视为干空气（DA）和水蒸气的理想混合物，在均匀总压下遵循标准湿空气性质关系。\n- 在所关注的温度范围内，水的比热容被视作常数。\n\n您的程序必须实现以下基本关系和步骤：\n\n1. 将水侧热流率定义为 $Q$（单位：瓦特, $\\mathrm{W}$），进、出口水温定义为 $T_{w,\\mathrm{in}}$ 和 $T_{w,\\mathrm{out}}$（单位：摄氏度, $^{\\circ}\\mathrm{C}$），进口空气干球温度定义为 $T_{a,\\mathrm{in}}$（单位：摄氏度, $^{\\circ}\\mathrm{C}$），进口空气相对湿度定义为 $\\phi_{\\mathrm{in}}$（小数形式，例如0.50代表百分之五十），总静压定义为 $P$（单位：帕斯卡, $\\mathrm{Pa}$），干空气质量流量定义为 $G$（单位：千克/秒, $\\mathrm{kg/s}$）。体积乘积 $K_a a_v V$ 必须以千克干空气/秒（$\\mathrm{kg/s}$）为单位报告。\n\n2. 计算水侧热容率\n$$\nL \\equiv \\dot{m}_w c_{p,w} = \\frac{Q}{\\Delta T_w}, \\quad \\Delta T_w \\equiv T_{w,\\mathrm{in}} - T_{w,\\mathrm{out}},\n$$\n其中 $c_{p,w}$ 被视为常数，并按照默克尔方法中的标准做法，根据定义被吸收到 $L$ 中。注意 $L$ 的单位是 $\\mathrm{W/K}$。\n\n3. 对微元塔片使用能量守恒和默克尔驱动势，写出\n$$\nL\\,\\mathrm{d}T_w = K_a a_v \\left(h_s(T_w) - h_a\\right)\\,\\mathrm{d}V,\n$$\n其中 $h_s(T_w)$ 是在界面温度等于局部水温 $T_w$ 时，饱和湿空气的比焓（每单位质量干空气），而 $h_a$ 是主体湿空气焓（每单位质量干空气）。相应的空气侧能量平衡为\n$$\nG\\,\\mathrm{d}h_a = K_a a_v \\left(h_s(T_w) - h_a\\right)\\,\\mathrm{d}V.\n$$\n消去 $\\mathrm{d}V$ 得到操作线斜率\n$$\n\\frac{\\mathrm{d}h_a}{\\mathrm{d}T_w} = \\frac{L}{G}.\n$$\n根据逆流边界条件（塔底的进口空气与出口水接触），塔内主体空气焓随局部水温线性变化如下\n$$\nh_a(T_w) = h_{a,\\mathrm{in}} + \\frac{L}{G}\\,\\left(T_w - T_{w,\\mathrm{out}}\\right),\n$$\n其中 $h_{a,\\mathrm{in}}$ 是进口空气焓。\n\n4. 积分微分能量平衡方程，得到计算所需体积容量的默克尔积分：\n$$\nK_a a_v V \\;=\\; L \\int_{T_{w,\\mathrm{out}}}^{T_{w,\\mathrm{in}}} \\frac{\\mathrm{d}T_w}{h_s(T_w) - h_a(T_w)}.\n$$\n该积分必须进行数值计算。\n\n5. 实现标准的湿空气性质关系式来计算 $h_{a,\\mathrm{in}}$ 和 $h_s(T_w)$：\n- 通过马格努斯型关系式计算液态水上的饱和蒸汽压（在 $T \\in [0,50]\\,^{\\circ}\\mathrm{C}$ 范围内有效）\n$$\np_{ws}(T) = 610.94\\,\\exp\\!\\left(\\frac{17.625\\,T}{T+243.04}\\right)\\quad\\text{(Pa)},\n$$\n其中 $T$ 的单位为 $^{\\circ}\\mathrm{C}$。\n- 在给定温度 $T$ 和相对湿度 $\\phi$ 下的含湿量：\n$$\nW(T,\\phi,P) = \\frac{0.62198\\,\\phi\\,p_{ws}(T)}{P - \\phi\\,p_{ws}(T)}\\quad\\text{(kg vapor/kg dry air)}.\n$$\n- 在界面温度下的饱和含湿量：\n$$\nW_s(T,P) = \\frac{0.62198\\,p_{ws}(T)}{P - p_{ws}(T)}.\n$$\n- 每单位质量干空气的湿空气比焓（在 $T=0\\,^{\\circ}\\mathrm{C}$ 且湿度为零时 $h=0$），使用广泛采用的线性化形式：\n$$\nh(T,W) = 1000\\left(1.006\\,T + W\\left(2501 + 1.86\\,T\\right)\\right)\\quad\\text{(J/kg dry air)},\n$$\n其中 $T$ 的单位为 $^{\\circ}\\mathrm{C}$。对于界面处的饱和焓，设置 $W=W_s(T,P)$ 和 $T=T_w$：\n$$\nh_s(T_w) = h\\!\\left(T_w,\\,W_s(T_w,P)\\right).\n$$\n\n6. 数值计算细节：\n- 将水温区间 $[T_{w,\\mathrm{out}},\\,T_{w,\\mathrm{in}}]$ 离散化为一个足够精细的均匀网格，在每个网格点上计算被积函数 $1/\\left(h_s(T_w)-h_a(T_w)\\right)$，并采用复合梯形法则进行积分。\n- 为保证物理真实性，确保在整个范围内 $h_s(T_w) - h_a(T_w) > 0$；否则，对于默克尔方法而言，输入是不符合物理规律的。\n\n输入单位和输出要求：\n- 每个测试用例的输入：$Q$（$\\mathrm{W}$），$T_{w,\\mathrm{in}}$（$^{\\circ}\\mathrm{C}$），$T_{w,\\mathrm{out}}$（$^{\\circ}\\mathrm{C}$），$T_{a,\\mathrm{in}}$（$^{\\circ}\\mathrm{C}$），$\\phi_{\\mathrm{in}}$（小数），$P$（$\\mathrm{Pa}$），以及 $G$（$\\mathrm{kg/s}$）。\n- 每个测试用例的输出：所需的 $K_a a_v V$（$\\mathrm{kg/s}$），四舍五入到三位小数。\n\n测试套件：\n为以下五组参数集提供结果。每组参数以有序七元组 $(Q,\\,T_{w,\\mathrm{in}},\\,T_{w,\\mathrm{out}},\\,T_{a,\\mathrm{in}},\\,\\phi_{\\mathrm{in}},\\,P,\\,G)$ 的形式给出：\n- 情况1（一般情况）： $(5.0\\times 10^{6},\\,40.0,\\,30.0,\\,25.0,\\,0.50,\\,101325.0,\\,500.0)$。\n- 情况2（潮湿的进口空气）： $(2.0\\times 10^{6},\\,35.0,\\,28.0,\\,28.0,\\,0.90,\\,101325.0,\\,300.0)$。\n- 情况3（高海拔）： $(3.0\\times 10^{6},\\,45.0,\\,32.0,\\,20.0,\\,0.40,\\,85000.0,\\,600.0)$。\n- 情况4（大空气流量，近乎平坦的操作线）： $(1.0\\times 10^{6},\\,40.0,\\,35.0,\\,20.0,\\,0.50,\\,101325.0,\\,2000.0)$。\n- 情况5（小空气流量，陡峭的操作线）： $(1.0\\times 10^{6},\\,40.0,\\,32.0,\\,25.0,\\,0.50,\\,101325.0,\\,100.0)$。\n\n程序输出格式：\n您的程序应生成单行输出，其中包含五个计算出的 $K_a a_v V$ 值，以逗号分隔的列表形式包含在方括号内，顺序与测试套件相同，并四舍五入到三位小数；例如 $[x_1,x_2,x_3,x_4,x_5]$，其中每个 $x_i$ 的单位为 $\\mathrm{kg/s}$。", "solution": "提交分析的问题陈述清晰、科学严谨且定义明确。它提出了传热传质领域中的一个标准工程任务：使用既定的默克尔方法对逆流式冷却塔进行选型计算。所有必需的物理原理、本构关系和边界条件都已提供，并且所需的数值计算过程也已明确规定。该问题没有矛盾、主观论断或事实错误，其参数均在物理上合理的范围内。因此，我认为该问题有效，并将继续进行严谨的求解。\n\n问题的核心在于默克尔积分的计算，该积分量化了冷却塔所需的“尺寸”或“容量”，由乘积 $K_a a_v V$ 表示。该量源于应用于塔内微元控制体积的能量和质量守恒基本原理。\n\n首先，我们建立能量平衡。水流释放的热量 $L\\,\\mathrm{d}T_w$ 必须传递给气流。在默克尔模型中，该传递过程由水-空气界面处的饱和空气比焓 $h_s(T_w)$ 与主体空气比焓 $h_a$ 之间的差值驱动。这导出了塔体积微元 $\\mathrm{d}V$ 的微分速率方程：\n$$\nL\\,\\mathrm{d}T_w = K_a a_v \\left(h_s(T_w) - h_a\\right)\\,\\mathrm{d}V\n$$\n此处，$L$ 是水侧热容率，$L = \\frac{Q}{T_{w,\\mathrm{in}} - T_{w,\\mathrm{out}}}$，单位为 $\\mathrm{W/K}$ 或 $\\mathrm{J/(s \\cdot K)}$。项 $K_a a_v$ 是总体积传质系数，单位为 $\\mathrm{kg/(s \\cdot m^3)}$。\n\n同时，气流流经同一微元体积时获得的能量由下式给出：\n$$\nG\\,\\mathrm{d}h_a = K_a a_v \\left(h_s(T_w) - h_a\\right)\\,\\mathrm{d}V\n$$\n其中 $G$ 是干空气的质量流量，单位为 $\\mathrm{kg/s}$。\n\n通过令这两个能量平衡方程的右侧相等，我们找到了空气焓的变化与水温变化之间的关系：\n$$\nL\\,\\mathrm{d}T_w = G\\,\\mathrm{d}h_a \\implies \\frac{\\mathrm{d}h_a}{\\mathrm{d}T_w} = \\frac{L}{G}\n$$\n这个线性关系定义了冷却塔的“操作线”。从塔底（空气在 $h_{a,\\mathrm{in}}$ 进入，水在 $T_{w,\\mathrm{out}}$ 排出）积分到塔内任意一点（局部水温为 $T_w$，空气焓为 $h_a(T_w)$），可得：\n$$\nh_a(T_w) - h_{a,\\mathrm{in}} = \\frac{L}{G} (T_w - T_{w,\\mathrm{out}})\n$$\n$$\nh_a(T_w) = h_{a,\\mathrm{in}} + \\frac{L}{G} (T_w - T_{w,\\mathrm{out}})\n$$\n该方程提供了塔内任意点的空气主体焓作为局部水温的函数。\n\n为了求得所需的塔容量，我们重排侧能量平衡方程并在整个塔高上进行积分，这对应于水温从 $T_{w,\\mathrm{out}}$ 变化到 $T_{w,\\mathrm{in}}$ 的过程：\n$$\n\\frac{\\mathrm{d}T_w}{h_s(T_w) - h_a(T_w)} = \\frac{K_a a_v}{L} \\mathrm{d}V\n$$\n假定 $K_a a_v$ 在整个塔内为常数，积分可得：\n$$\n\\int_{T_{w,\\mathrm{out}}}^{T_{w,\\mathrm{in}}} \\frac{\\mathrm{d}T_w}{h_s(T_w) - h_a(T_w)} = \\frac{K_a a_v}{L} \\int_0^V \\mathrm{d}V = \\frac{K_a a_v V}{L}\n$$\n为求得目标乘积 $K_a a_v V$ 进行整理，便得到默克尔积分：\n$$\nK_a a_v V = L \\int_{T_{w,\\mathrm{out}}}^{T_{w,\\mathrm{in}}} \\frac{\\mathrm{d}T_w}{h_s(T_w) - h_a(T_w)}\n$$\n正如问题陈述中所正确指出的，该量的单位是 $(\\mathrm{J/(s \\cdot K)}) \\cdot (\\mathrm{K} / (\\mathrm{J/kg})) = \\mathrm{kg/s}$。\n\n计算需要 $h_s(T_w)$ 和 $h_a(T_w)$ 的表达式。这必需使用标准的湿空气性质关系。计算顺序如下：\n1.  使用给定的马格努斯型公式计算在给定温度 $T$（单位 $^{\\circ}\\mathrm{C}$）下的饱和蒸汽压 $p_{ws}(T)$：\n    $$\n    p_{ws}(T) = 610.94\\,\\exp\\!\\left(\\frac{17.625\\,T}{T+243.04}\\right)\n    $$\n2.  计算含湿量 $W$。对于在压力为 $P$、相对湿度为 $\\phi$ 的非饱和空气：\n    $$\n    W(T,\\phi,P) = \\frac{0.62198\\,\\phi\\,p_{ws}(T)}{P - \\phi\\,p_{ws}(T)}\n    $$\n    对于水界面处的饱和空气，$\\phi=1$，含湿量 $W_s$ 为：\n    $$\n    W_s(T_w,P) = \\frac{0.62198\\,p_{ws}(T_w)}{P - p_{ws}(T_w)}\n    $$\n3.  给定 $T$（单位 $^{\\circ}\\mathrm{C}$）和 $W$，计算湿空气比焓 $h$（单位 $\\mathrm{J/kg}$ 干空气）：\n    $$\n    h(T,W) = 1000\\left(1.006\\,T + W\\left(2501 + 1.86\\,T\\right)\\right)\n    $$\n4.  然后，默克尔积分所需的比焓为：\n    -   $h_{a,\\mathrm{in}} = h(T_{a,\\mathrm{in}}, W(T_{a,\\mathrm{in}}, \\phi_{\\mathrm{in}}, P))$\n    -   $h_a(T_w) = h_{a,\\mathrm{in}} + \\frac{L}{G} (T_w - T_{w,\\mathrm{out}})$\n    -   $h_s(T_w) = h(T_w, W_s(T_w, P))$\n\n定积分通过数值方法计算。积分区间 $[T_{w,\\mathrm{out}}, T_{w,\\mathrm{in}}]$ 被离散化为均匀的网格点。在每个网格点上计算被积函数 $\\frac{1}{h_s(T_w) - h_a(T_w)}$ 的值。然后对这些值应用复合梯形法则来近似积分。足够多的网格点数，例如1000个或更多，可以确保高精度。\n\n实现将包括用于湿空气性质计算的辅助函数以及一个主函数，用于组织每个测试用例的计算步骤：计算 $L$，确定进口空气焓 $h_{a,\\mathrm{in}}$，在水温范围内进行数值积分，以及最终计算 $K_a a_v V$。", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the cooling tower performance problem for a suite of test cases\n    based on the Merkel integral method.\n    \"\"\"\n\n    def p_ws(T_celsius):\n        \"\"\"\n        Calculates saturation vapor pressure over liquid water.\n        :param T_celsius: Temperature in degrees Celsius.\n        :return: Saturation pressure in Pascals.\n        \"\"\"\n        return 610.94 * np.exp((17.625 * T_celsius) / (T_celsius + 243.04))\n\n    def W_hum(T_celsius, phi, P_pascal):\n        \"\"\"\n        Calculates humidity ratio for given relative humidity.\n        :param T_celsius: Dry-bulb temperature in degrees Celsius.\n        :param phi: Relative humidity as a decimal fraction.\n        :param P_pascal: Total pressure in Pascals.\n        :return: Humidity ratio in kg vapor / kg dry air.\n        \"\"\"\n        p_v = phi * p_ws(T_celsius)\n        return (0.62198 * p_v) / (P_pascal - p_v)\n\n    def W_sat(T_celsius, P_pascal):\n        \"\"\"\n        Calculates humidity ratio at saturation.\n        :param T_celsius: Temperature in degrees Celsius.\n        :param P_pascal: Total pressure in Pascals.\n        :return: Saturated humidity ratio in kg vapor / kg dry air.\n        \"\"\"\n        p_sat = p_ws(T_celsius)\n        return (0.62198 * p_sat) / (P_pascal - p_sat)\n\n    def h_air(T_celsius, W_kg_per_kg):\n        \"\"\"\n        Calculates moist air specific enthalpy.\n        :param T_celsius: Temperature in degrees Celsius.\n        :param W_kg_per_kg: Humidity ratio in kg vapor / kg dry air.\n        :return: Specific enthalpy in J / kg dry air.\n        \"\"\"\n        return 1000.0 * (1.006 * T_celsius + W_kg_per_kg * (2501.0 + 1.86 * T_celsius))\n\n    def calculate_kavV(params):\n        \"\"\"\n        Calculates the required K_a a_v V for a single cooling tower case.\n        :param params: A tuple containing (Q, Tw_in, Tw_out, Ta_in, phi_in, P, G).\n        :return: The volumetric product KaV in kg/s.\n        \"\"\"\n        Q, Tw_in, Tw_out, Ta_in, phi_in, P, G = params\n        \n        # 1. Compute water-side heat capacity rate L\n        if Tw_in = Tw_out:\n            # Physically impossible for cooling, avoids division by zero or negative\n            return float('nan') \n        L = Q / (Tw_in - Tw_out)\n\n        # 2. Compute inlet air properties\n        W_in = W_hum(Ta_in, phi_in, P)\n        h_a_in = h_air(Ta_in, W_in)\n\n        # 3. Define the integrand for the Merkel integral\n        def integrand(Tw):\n            # Enthalpy of saturated air at the interface (water) temperature\n            h_s_Tw = h_air(Tw, W_sat(Tw, P))\n            \n            # Enthalpy of bulk air from the operating line\n            h_a_Tw = h_a_in + (L / G) * (Tw - Tw_out)\n            \n            driving_force = h_s_Tw - h_a_Tw\n            if driving_force = 0:\n                # Unphysical condition, integral would diverge or be invalid.\n                # In a robust implementation, this would raise an error.\n                # For this problem, we assume valid inputs as per validation.\n                return np.inf\n                \n            return 1.0 / driving_force\n\n        # 4. Numerical integration using the composite trapezoidal rule\n        num_steps = 2000  # Number of steps for integration, ensures high accuracy\n        Tw_grid = np.linspace(Tw_out, Tw_in, num_steps + 1)\n        \n        integrand_values = np.array([integrand(T) for T in Tw_grid])\n        \n        # Use numpy.trapz for integration\n        integral_val = np.trapz(integrand_values, Tw_grid)\n\n        # 5. Compute the final result\n        KaV = L * integral_val\n        \n        return KaV\n\n    # Define the test cases from the problem statement.\n    test_cases = [\n        # (Q,      Tw_in, Tw_out, Ta_in, phi_in, P,       G)\n        (5.0e6, 40.0,  30.0,   25.0,  0.50,   101325.0, 500.0), # Case 1\n        (2.0e6, 35.0,  28.0,   28.0,  0.90,   101325.0, 300.0), # Case 2\n        (3.0e6, 45.0,  32.0,   20.0,  0.40,   85000.0,  600.0), # Case 3\n        (1.0e6, 40.0,  35.0,   20.0,  0.50,   101325.0, 2000.0),# Case 4\n        (1.0e6, 40.0,  32.0,   25.0,  0.50,   101325.0, 100.0), # Case 5\n    ]\n\n    results = []\n    for case in test_cases:\n        result = calculate_kavV(case)\n        results.append(f\"{result:.3f}\")\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2474416"}, {"introduction": "虽然一维模型对于初步设计非常有用，但实际的冷却塔常常因为非均匀性而导致性能下降。本练习通过比较简化的集总参数模型和更真实的通道解析模型，探讨了液体分布不均这一关键问题 [@problem_id:2474415]。您将量化一维假设所引入的误差，从而深刻理解理想化模型的局限性以及水流分布对于实现设计性能的重要性。", "problem": "对一个横流式引风冷却塔进行分析，分析条件为液态水在平行的垂直流动通道间出现强烈横向分布不均。你需要比较一个旨在模拟精细网格计算流体动力学（CFD）模型的通道解析预测与一个一维（1D）集总模型，并量化两者在预测冷水出口温度上的差异。水流被建模为活塞流，其轴向热传导可忽略不计。在本练习中，空气侧被建模为一个容量极大的热沉，在整个填料中保持恒定的湿球温度。每个通道具有一个有效的总传热导，该值集总了总传热系数与界面面积乘积在高度上的积分。\n\n使用的基本原理和假设：\n- 水相在流动方向上的微分形式的能量守恒，其中空气被视为处于恒定湿球温度的无限容量热沉。\n- 每个独立通道中的水为活塞流，固体填料的热容可忽略不计。\n- 对于每个通道，存在一个恒定的、高度积分的总传热导参数，我们记为 $UA_k$，单位为 $\\mathrm{W/K}$。\n- 水的比热恒定，等于 $c_{p,w}$，通道 $k$ 中的水质量流量为 $m_{w,k}=\\phi_k\\,m_{w,\\mathrm{tot}}$，其中 $\\phi_k$ 是总和为 $1$ 的非负流量分数。\n\n从第一性原理出发执行以下任务：\n1. 从能量守恒出发，根据上面给出的活塞流和恒定参数假设，为单个通道 $k$ 推导出一个控制入口水温 $T_{w,\\mathrm{in}}$、出口水温 $T_{w,\\mathrm{out},k}$、湿球温度 $T_{wb}$（视为恒定）、通道传热导 $UA_k$、通道水流量 $m_{w,k}$ 和比热 $c_{p,w}$ 之间关系的控制方程。你的推导应从适当的微分形式的能量平衡开始，通过分离变量和在控制体积上积分来进行。\n2. 将类 CFD 的出口温度定义为跨通道的质量流量加权平均值：$T_{w,\\mathrm{out}}^{\\mathrm{CFD}}=\\sum_{k=1}^{N}\\phi_k\\,T_{w,\\mathrm{out},k}$。\n3. 通过将所有通道聚合为一个总传热导为 $UA_{\\mathrm{tot}}=\\sum_{k=1}^{N}UA_k$ 且总水流量为 $m_{w,\\mathrm{tot}}$ 的等效通道，来推导一维集总对应项，并从任务 $1$ 中使用的相同基本平衡关系中获得 $T_{w,\\mathrm{out}}^{\\mathrm{1D}}$。\n4. 使用以下公式量化差异：\n   - 以开尔文为单位的绝对误差：$\\Delta T=\\left|T_{w,\\mathrm{out}}^{\\mathrm{CFD}}-T_{w,\\mathrm{out}}^{\\mathrm{1D}}\\right|$。\n   - 一个以十进制小数表示的相对误差，该误差通过类CFD预测的湿球温差进行归一化：$r=\\Delta T/\\max\\left(\\left|T_{w,\\mathrm{out}}^{\\mathrm{CFD}}-T_{wb}\\right|,\\,\\varepsilon\\right)$，其中 $\\varepsilon$ 是一个小的基准尺度。\n5. 通过以下标准评估每个测试案例的模型适用性：如果同时满足 $\\Delta T\\leq 0.5$ 和 $r\\leq 0.1$，则认为一维模型是适用的，其中所有温度单位均为开尔文，相对误差 $r$ 是十进制小数（而非百分比）。\n\n在所有案例中使用以下固定常数：\n- 水的比热：$c_{p,w}=4180\\,\\mathrm{J/(kg\\cdot K)}$。\n- 相对误差基准：$\\varepsilon=0.5\\,\\mathrm{K}$。\n\n测试套件。对于每个案例，变量包括：通道数 $N$、入口水温 $T_{w,\\mathrm{in}}$（开尔文）、湿球温度 $T_{wb}$（开尔文）、总水质量流量 $m_{w,\\mathrm{tot}}$（$\\mathrm{kg/s}$）、$k=1,\\dots,N$ 的$\\{UA_k\\}$列表（$\\mathrm{W/K}$）以及总和为 $1$ 的流量分数列表$\\{\\phi_k\\}$（无量纲）。\n- 案例A（强分布不均，中等效能）：\n  - $N=4$\n  - $T_{w,\\mathrm{in}}=313.15$\n  - $T_{wb}=298.15$\n  - $m_{w,\\mathrm{tot}}=50$\n  - $\\{UA_k\\}=\\{20000,\\,25000,\\,30000,\\,75000\\}$\n  - $\\{\\phi_k\\}=\\{0.05,\\,0.10,\\,0.15,\\,0.70\\}$\n- 案例B（无分布不均基准）：\n  - $N=5$\n  - $T_{w,\\mathrm{in}}=308.15$\n  - $T_{wb}=295.15$\n  - $m_{w,\\mathrm{tot}}=60$\n  - $\\{UA_k\\}=\\{10000,\\,10000,\\,10000,\\,10000,\\,10000\\}$\n  - $\\{\\phi_k\\}=\\{0.20,\\,0.20,\\,0.20,\\,0.20,\\,0.20\\}$\n- 案例C（极端分布不均，容量-流量比极不均匀）：\n  - $N=3$\n  - $T_{w,\\mathrm{in}}=323.15$\n  - $T_{wb}=300.15$\n  - $m_{w,\\mathrm{tot}}=40$\n  - $\\{UA_k\\}=\\{5000,\\,10000,\\,145000\\}$\n  - $\\{\\phi_k\\}=\\{0.60,\\,0.35,\\,0.05\\}$\n- 案例D（高总体效能伴随分布不均）：\n  - $N=4$\n  - $T_{w,\\mathrm{in}}=310.15$\n  - $T_{wb}=299.15$\n  - $m_{w,\\mathrm{tot}}=50$\n  - $\\{UA_k\\}=\\{50000,\\,50000,\\,50000,\\,50000\\}$\n  - $\\{\\phi_k\\}=\\{0.10,\\,0.10,\\,0.30,\\,0.50\\}$\n\n程序要求：\n- 实现该推导以计算每个通道的 $T_{w,\\mathrm{out},k}$，然后计算每个案例的 $T_{w,\\mathrm{out}}^{\\mathrm{CFD}}$ 和 $T_{w,\\mathrm{out}}^{\\mathrm{1D}}$。\n- 为每个案例计算 $(\\Delta T,\\,r)$ 对和适用性布尔值。\n- 所有温度均以开尔文表示。相对误差 $r$ 必须以十进制小数形式报告。将所有报告的浮点数输出四舍五入到小数点后六位。\n- 最终输出格式：你的程序应生成单行输出，包含一个用方括号括起来的逗号分隔列表，其中每个测试案例的结果是一个形式为 $[\\Delta T, r, \\mathrm{adequate}]$ 的列表。例如：$[[\\Delta T_1,r_1,\\mathrm{True}],[\\Delta T_2,r_2,\\mathrm{False}],\\dots]$。", "solution": "我们从单个垂直通道中水相的能量守恒出发。设 $z$ 为轴向坐标。通道 $k$ 中的水质量流量为 $m_{w,k}$，比热为 $c_{p,w}$，大块水温为 $T_w(z)$。空气侧被视作温度恒为湿球温度 $T_{wb}$ 的无限容量热沉，通道 $k$ 的高度积分传热导为 $UA_k$（单位W/K）。在稳态下，忽略轴向热传导，水在微分段内的显热能量损失率与向空气热沉的传热相平衡。微分能量平衡为\n$$\nm_{w,k}\\,c_{p,w}\\,\\frac{dT_w}{dz} \\;=\\; -\\,U a P\\,\\left(T_w(z)-T_{wb}\\right),\n$$\n其中 $U a P$ 是总传热系数、单位长度界面面积和湿周长的乘积，我们视其在通道 $k$ 内相对于 $z$ 是恒定的。在通道高度上积分，将 $U a P$ 转换为高度积分的传热导。引入高度积分参数\n$$\nUA_k \\;=\\; \\int_0^L U a P \\,dz,\n$$\n并对可分离的常微分方程从入口 $z=0$ 到出口 $z=L$ 进行积分，我们得到\n$$\n\\int_{T_{w,\\mathrm{in}}}^{T_{w,\\mathrm{out},k}} \\frac{dT_w}{T_w-T_{wb}} \\;=\\; -\\,\\int_0^L \\frac{U a P}{m_{w,k}\\,c_{p,w}}\\,dz \\;=\\; -\\,\\frac{UA_k}{m_{w,k}\\,c_{p,w}}.\n$$\n这得到了对数关系\n$$\n\\ln\\!\\left(\\frac{T_{w,\\mathrm{out},k}-T_{wb}}{T_{w,\\mathrm{in}}-T_{wb}}\\right) \\;=\\; -\\,\\frac{UA_k}{m_{w,k}\\,c_{p,w}},\n$$\n因此，单通道出口温度为\n$$\nT_{w,\\mathrm{out},k} \\;=\\; T_{wb} \\;+\\; \\left(T_{w,\\mathrm{in}}-T_{wb}\\right)\\,\\exp\\!\\left(-\\frac{UA_k}{m_{w,k}\\,c_{p,w}}\\right).\n$$\n用 $\\phi_k$ 定义水流分配，使得 $m_{w,k}=\\phi_k\\,m_{w,\\mathrm{tot}}$ 且 $\\sum_{k=1}^{N}\\phi_k=1$。那么，类 CFD（通道解析）的出口温度是质量流量加权平均值\n$$\nT_{w,\\mathrm{out}}^{\\mathrm{CFD}} \\;=\\; \\sum_{k=1}^{N}\\phi_k\\,T_{w,\\mathrm{out},k} \\;=\\; T_{wb} \\;+\\; \\left(T_{w,\\mathrm{in}}-T_{wb}\\right)\\,\\sum_{k=1}^{N}\\phi_k\\,\\exp\\!\\left(-\\frac{UA_k}{\\phi_k\\,m_{w,\\mathrm{tot}}\\,c_{p,w}}\\right).\n$$\n\n对于一维集总模型，我们将整个通道束视为一个等效通道，其总传热导为 $UA_{\\mathrm{tot}}=\\sum_{k=1}^{N}UA_k$，并具有相同的总水流量 $m_{w,\\mathrm{tot}}$。用 $UA_{\\mathrm{tot}}$ 和 $m_{w,\\mathrm{tot}}$ 重复相同的推导过程，得到\n$$\nT_{w,\\mathrm{out}}^{\\mathrm{1D}} \\;=\\; T_{wb} \\;+\\; \\left(T_{w,\\mathrm{in}}-T_{wb}\\right)\\,\\exp\\!\\left(-\\frac{UA_{\\mathrm{tot}}}{m_{w,\\mathrm{tot}}\\,c_{p,w}}\\right).\n$$\n\n差异度量定义如下。绝对误差为\n$$\n\\Delta T \\;=\\; \\left|T_{w,\\mathrm{out}}^{\\mathrm{CFD}}-T_{w,\\mathrm{out}}^{\\mathrm{1D}}\\right|.\n$$\n为了获得一个与尺度相关的相对误差，该误差在与湿球温度的温差趋近于极小时仍有良好定义，我们通过类 CFD 的温差 $A_{\\mathrm{CFD}}=\\left|T_{w,\\mathrm{out}}^{\\mathrm{CFD}}-T_{wb}\\right|$ 和一个小的基准值 $\\varepsilon$ 中的较大者进行归一化：\n$$\nr \\;=\\; \\frac{\\Delta T}{\\max\\!\\left(A_{\\mathrm{CFD}},\\,\\varepsilon\\right)}.\n$$\n根据设定的适用性标准 $\\Delta T\\leq 0.5$ 和 $r\\leq 0.1$，我们评估每个测试案例。\n\n每个测试案例的算法实现：\n- 输入: $N$, $T_{w,\\mathrm{in}}$, $T_{wb}$, $m_{w,\\mathrm{tot}}$, $c_{p,w}$, $\\{UA_k\\}_{k=1}^{N}$, $\\{\\phi_k\\}_{k=1}^{N}$。\n- 对每个通道 $k$，计算 $m_{w,k}=\\phi_k\\,m_{w,\\mathrm{tot}}$，传递单元数 $NTU_k=UA_k/(m_{w,k}\\,c_{p,w})$，然后计算 $T_{w,\\mathrm{out},k}=T_{wb}+(T_{w,\\mathrm{in}}-T_{wb})\\,e^{-NTU_k}$。\n- 计算 $T_{w,\\mathrm{out}}^{\\mathrm{CFD}}=\\sum_{k=1}^{N}\\phi_k\\,T_{w,\\mathrm{out},k}$。\n- 计算 $UA_{\\mathrm{tot}}=\\sum_{k=1}^{N}UA_k$，$NTU_{\\mathrm{tot}}=UA_{\\mathrm{tot}}/(m_{w,\\mathrm{tot}}\\,c_{p,w})$，以及 $T_{w,\\mathrm{out}}^{\\mathrm{1D}}=T_{wb}+(T_{w,\\mathrm{in}}-T_{wb})\\,e^{-NTU_{\\mathrm{tot}}}$。\n- 计算 $\\Delta T$，$A_{\\mathrm{CFD}}=\\left|T_{w,\\mathrm{out}}^{\\mathrm{CFD}}-T_{wb}\\right|$，$r=\\Delta T/\\max(A_{\\mathrm{CFD}},\\varepsilon)$（其中 $\\varepsilon=0.5$），以及适用性布尔值 $(\\Delta T\\leq 0.5)\\wedge(r\\leq 0.1)$。\n- 报告 $[\\Delta T, r, \\mathrm{adequate}]$，其中 $\\Delta T$ 和 $r$ 四舍五入到六位小数。\n\n测试套件的定性预期：\n- 案例A，具有中等总体效能和强烈但非极端的分布不均，应产生一个虽小但非零的 $\\Delta T$ 并满足适用性要求。\n- 案例B，具有均匀的传热导和均匀的流量，使得各通道的传递单元数相同，导致通道平均值等同于集总模型；因此 $\\Delta T$ 实际上为零且满足适用性要求。\n- 案例C，具有极不均匀的容量-流量比，严重违反了集总假设，应产生较大的 $\\Delta T$ 且不满足适用性要求。\n- 案例D，在高能效区域存在分布不均，出口温度对流量不均匀性表现出敏感性，可能产生中等的 $\\Delta T$，导致至少一个适用性条件不满足。\n\n随附的程序实现了这些步骤，并打印出单行的列表之列表，其中包含每个案例的 $[\\Delta T, r, \\mathrm{adequate}]$，温度单位为开尔文，相对误差为十进制小数，两者均四舍五入到六位小数。", "answer": "```python\nimport numpy as np\n\ndef compute_case(T_in, T_wb, m_w_tot, cp_w, UA_list, phi_list, eps=0.5):\n    UA = np.array(UA_list, dtype=float)\n    phi = np.array(phi_list, dtype=float)\n    # Ensure no zero-flow channels to avoid division by zero\n    # (Problem data provides strictly positive splits.)\n    m_w_k = phi * m_w_tot  # kg/s per channel\n    NTU_k = UA / (m_w_k * cp_w)\n    # Channel outlet temperatures based on plug-flow exponential cooling to wet-bulb\n    exp_terms = np.exp(-NTU_k)\n    T_out_k = T_wb + (T_in - T_wb) * exp_terms\n    # CFD-like mass-weighted outlet\n    T_out_cfd = float(np.dot(phi, T_out_k))\n    # 1D lumped outlet\n    UA_tot = float(np.sum(UA))\n    NTU_tot = UA_tot / (m_w_tot * cp_w)\n    T_out_1d = T_wb + (T_in - T_wb) * np.exp(-NTU_tot)\n    # Discrepancy metrics\n    abs_err = abs(T_out_cfd - T_out_1d)\n    approach_cfd = abs(T_out_cfd - T_wb)\n    denom = max(approach_cfd, eps)\n    rel_err = abs_err / denom\n    adequate = (abs_err = 0.5) and (rel_err = 0.1)\n    # Round floats to six decimals\n    abs_err = round(abs_err, 6)\n    rel_err = round(rel_err, 6)\n    return [abs_err, rel_err, adequate]\n\ndef solve():\n    cp_w = 4180.0  # J/(kg K)\n    eps = 0.5      # K baseline for relative error\n    test_cases = [\n        # Case A\n        {\n            \"T_in\": 313.15, \"T_wb\": 298.15, \"m_w_tot\": 50.0, \"cp_w\": cp_w,\n            \"UA_list\": [20000.0, 25000.0, 30000.0, 75000.0],\n            \"phi_list\": [0.05, 0.10, 0.15, 0.70]\n        },\n        # Case B\n        {\n            \"T_in\": 308.15, \"T_wb\": 295.15, \"m_w_tot\": 60.0, \"cp_w\": cp_w,\n            \"UA_list\": [10000.0, 10000.0, 10000.0, 10000.0, 10000.0],\n            \"phi_list\": [0.20, 0.20, 0.20, 0.20, 0.20]\n        },\n        # Case C\n        {\n            \"T_in\": 323.15, \"T_wb\": 300.15, \"m_w_tot\": 40.0, \"cp_w\": cp_w,\n            \"UA_list\": [5000.0, 10000.0, 145000.0],\n            \"phi_list\": [0.60, 0.35, 0.05]\n        },\n        # Case D\n        {\n            \"T_in\": 310.15, \"T_wb\": 299.15, \"m_w_tot\": 50.0, \"cp_w\": cp_w,\n            \"UA_list\": [50000.0, 50000.0, 50000.0, 50000.0],\n            \"phi_list\": [0.10, 0.10, 0.30, 0.50]\n        },\n    ]\n\n    results = []\n    for case in test_cases:\n        res = compute_case(\n            T_in=case[\"T_in\"],\n            T_wb=case[\"T_wb\"],\n            m_w_tot=case[\"m_w_tot\"],\n            cp_w=case[\"cp_w\"],\n            UA_list=case[\"UA_list\"],\n            phi_list=case[\"phi_list\"],\n            eps=eps\n        )\n        results.append(res)\n\n    # Final print statement in the exact required format.\n    # Ensure booleans and floats are printed as default Python representations.\n    print(f\"[{','.join(str(r) for r in results)}]\")\n\nsolve()\n```", "id": "2474415"}, {"introduction": "有效的设计和运行需要理解哪些参数对系统性能的影响最大。这最后一个实践介绍了灵敏度分析，这是一种强大的技术，用于识别冷却塔出口温度不确定性的主要驱动因素 [@problem_id:2474353]。通过推导和应用对数灵敏度系数，您将确定哪些操作参数和物理特性最为关键，从而为过程控制和优化工作提供定量依据。", "problem": "一个简化的逆流蒸发冷却塔被建模为液态水与空气进行热交换的一维活塞流。假设在填料高度范围内，以下物理理想化成立：(i) 水的物性恒定，(ii) 空气的热容相对于水可以忽略不计，因此空气侧的热力学驱动状态可以用一个均匀的湿球温度来表示，以及 (iii) 总容积传热系数为常数。从一个微分高度单元上的液态水微分能量平衡和对流传热的定义出发。在此基础上，推导出口水温作为参数函数的闭式关系，并计算局部灵敏度系数。\n\n定义、符号和单位：\n- 令 $z$ 表示沿填料的垂直坐标，$z \\in [0,H]$，填料高度 $H$ 的单位为 $\\mathrm{m}$。\n- 令 $T_w(z)$ 为水温，单位为 $\\mathrm{K}$。\n- 令 $T_{w,\\mathrm{in}} = T_w(0)$ 为水入口温度，单位为 $\\mathrm{K}$。\n- 令 $T_{w,\\mathrm{out}} = T_w(H)$ 为水出口温度，单位为 $\\mathrm{K}$。\n- 令 $T_{wb}$ 为均匀的空气湿球温度，单位为 $\\mathrm{K}$。\n- 令 $L$ 为单位横截面积的液态水质量通量，单位为 $\\mathrm{kg}\\,\\mathrm{s}^{-1}\\,\\mathrm{m}^{-2}$。\n- 令 $c_{p,w}$ 为水的比热容，单位为 $\\mathrm{J}\\,\\mathrm{kg}^{-1}\\,\\mathrm{K}^{-1}$。\n- 令 $k_v$ 为总容积传热系数，单位为 $\\mathrm{W}\\,\\mathrm{m}^{-3}\\,\\mathrm{K}^{-1}$。\n\n任务：\n1) 使用一个高度单元 $dz$ 上的水相微分能量平衡以及驱动温差为 $T_w - T_{wb}$ 的对流热交换，推导 $T_w(z)$ 的一阶常微分控制方程，并求解出 $T_{w,\\mathrm{out}}$ 关于参数 $\\theta = (k_v,H,L,c_{p,w},T_{w,\\mathrm{in}},T_{wb})$ 的表达式。\n\n2) 从您的闭式表达式中，推导每个参数 $\\theta_i \\in \\{k_v,H,L,c_{p,w},T_{w,\\mathrm{in}},T_{wb}\\}$ 的解析灵敏度 $\\partial T_{w,\\mathrm{out}} / \\partial \\theta_i$。以国际单位制报告这些导数，即，以 $\\mathrm{K}$ 每相应参数单位表示（例如，$\\partial T_{w,\\mathrm{out}}/\\partial k_v$ 的单位是 $\\mathrm{K}\\,(\\mathrm{m}^3\\,\\mathrm{K}\\,\\mathrm{W}^{-1})$）。这些导数是中间量；它们不是所要求的程序输出。\n\n3) 为以无量纲且可比较的方式识别性能不确定性的主要贡献者，定义性能度量 $\\phi := T_{w,\\mathrm{out}} - T_{wb}$（单位为 $\\mathrm{K}$）和每个 $\\theta_i$ 的对数（无量纲）灵敏度 $S_i := \\partial \\ln \\phi / \\partial \\ln \\theta_i$。假设为每个参数给定了小的、独立的分数标准不确定度 $u_i$（即 $\\ln \\theta_i$ 的标准差）。对于小的不确定度，参数 $\\theta_i$ 对 $\\ln \\phi$ 标准差的贡献量大小与 $|S_i|\\,u_i$ 成正比。对于下方的每个测试用例，确定具有最大 $|S_i|\\,u_i$ 的参数的从零开始的索引 $i^\\star$；如果出现平局，选择最小的索引。使用参数顺序 $\\theta = [k_v,H,L,c_{p,w},T_{w,\\mathrm{in}},T_{wb}]$，其从零开始的索引为 $[0,1,2,3,4,5]$。\n\n测试套件（每行为一个测试用例）：每个测试用例包含 $(k_v,H,L,c_{p,w},T_{w,\\mathrm{in}},T_{wb}; u_0,u_1,u_2,u_3,u_4,u_5)$，其中所有量均为实数。单位如上定义，不确定度 $u_i$ 是无量纲的。\n- A用例（一般运行工况）：$(k_v = $ $1500$ $, H = $ $4.0$ $, L = $ $30$ $, c_{p,w} = $ $4180$ $, T_{w,\\mathrm{in}} = $ $308$ $, T_{wb} = $ $298$ $; u = [$ $0.15$ $, $ $0.05$ $, $ $0.05$ $, $ $0.02$ $, $ $0.0002$ $, $ $0.0002$ $])$。\n- B用例（短填料，小趋近度）：$(k_v = $ $2000$ $, H = $ $0.5$ $, L = $ $25$ $, c_{p,w} = $ $4180$ $, T_{w,\\mathrm{in}} = $ $305$ $, T_{wb} = $ $300$ $; u = [$ $0.05$ $, $ $0.05$ $, $ $0.05$ $, $ $0.02$ $, $ $0.005$ $, $ $0.005$ $])$。\n- C用例（高填料，强冷却）：$(k_v = $ $6000$ $, H = $ $10$ $, L = $ $15$ $, c_{p,w} = $ $4180$ $, T_{w,\\mathrm{in}} = $ $315$ $, T_{wb} = $ $295$ $; u = [$ $0.02$ $, $ $0.10$ $, $ $0.03$ $, $ $0.03$ $, $ $0.001$ $, $ $0.001$ $])$。\n- D用例（高液体负荷）：$(k_v = $ $2500$ $, H = $ $6$ $, L = $ $60$ $, c_{p,w} = $ $4180$ $, T_{w,\\mathrm{in}} = $ $310$ $, T_{wb} = $ $299$ $; u = [$ $0.02$ $, $ $0.02$ $, $ $0.50$ $, $ $0.02$ $, $ $0.0005$ $, $ $0.0005$ $])$。\n\n最终输出规范：\n- 您的程序必须评估所有测试用例，计算每种情况下每个参数的贡献量大小 $|S_i|\\,u_i$，确定具有最大贡献的从零开始的索引 $i^\\star$（通过最小索引打破平局），并将所有用例的索引聚合到一个列表中。\n- 您的程序应生成一行输出，其中包含一个用方括号括起来的逗号分隔列表的结果，例如 $[i^\\star_{\\mathrm{A}}, i^\\star_{\\mathrm{B}}, i^\\star_{\\mathrm{C}}, i^\\star_{\\mathrm{D}}]$，其中每个 $i^\\star$ 是一个整数。", "solution": "所提出的问题是输运现象和过程分析中的一个标准练习。它是科学基础扎实、提法恰当的，并包含唯一解所需的所有信息。我们将继续进行推导和分析。\n\n分析从冷却塔填料内微分高度单元 $dz$ 上的液态水相的微分能量平衡开始。塔的横截面积设为 $A$。水以质量通量 $L$ 沿正 $z$ 方向流动。在 $z$ 处平流进入单元的能量速率为 $(L \\cdot A) c_{p,w} T_w(z)$，在 $z+dz$ 处平流出去的能量速率为 $(L \\cdot A) c_{p,w} T_w(z+dz)$。热量从水传递到空气的速率与温差 $T_w - T_{wb}$ 和单元体积 $A \\cdot dz$ 成正比。比例常数是总容积传热系数 $k_v$。\n\n稳态能量平衡为：\n$$\n\\text{能量输入} - \\text{能量输出} - \\text{传递给空气的能量} = 0\n$$\n$$\n(L A) c_{p,w} T_w(z) - (L A) c_{p,w} T_w(z+dz) - k_v (A dz) (T_w(z) - T_{wb}) = 0\n$$\n两边同除以 $A \\cdot dz$ 并重新整理得到：\n$$\n- L c_{p,w} \\frac{T_w(z+dz) - T_w(z)}{dz} = k_v (T_w(z) - T_{wb})\n$$\n取 $dz \\to 0$ 的极限，我们得到水温分布 $T_w(z)$ 的一阶常微分控制方程（ODE）：\n$$\n\\frac{dT_w}{dz} = - \\frac{k_v}{L c_{p,w}} (T_w(z) - T_{wb})\n$$\n为求解此ODE，我们为温差定义一个新变量，$\\Delta T(z) = T_w(z) - T_{wb}$。由于 $T_{wb}$ 是常数，$\\frac{d(\\Delta T)}{dz} = \\frac{dT_w}{dz}$。ODE变为：\n$$\n\\frac{d(\\Delta T)}{dz} = - \\frac{k_v}{L c_{p,w}} \\Delta T\n$$\n这是一个可分离的线性ODE。我们可以在填料高度上对其进行积分，从 $z=0$ 到 $z=H$：\n$$\n\\int_{\\Delta T(0)}^{\\Delta T(H)} \\frac{d(\\Delta T)}{\\Delta T} = - \\int_{0}^{H} \\frac{k_v}{L c_{p,w}} dz\n$$\n由于假设 $k_v$、$L$ 和 $c_{p,w}$ 是常数，积分得到：\n$$\n\\ln\\left(\\frac{\\Delta T(H)}{\\Delta T(0)}\\right) = - \\frac{k_v H}{L c_{p,w}}\n$$\n将原始温度变量代回，其中 $\\Delta T(H) = T_{w,out} - T_{wb}$ 且 $\\Delta T(0) = T_{w,in} - T_{wb}$，我们得到：\n$$\n\\ln\\left(\\frac{T_{w,out} - T_{wb}}{T_{w,in} - T_{wb}}\\right) = - \\frac{k_v H}{L c_{p,w}}\n$$\n解出出口水温 $T_{w,out}$，我们得到任务1所要求的闭式表达式：\n$$\nT_{w,out} = T_{wb} + (T_{w,in} - T_{wb}) \\exp\\left(- \\frac{k_v H}{L c_{p,w}}\\right)\n$$\n无量纲组 $\\frac{k_v H}{L c_{p,w}}$ 被认为是传质单元数，我们将其表示为 $NTU$。\n\n对于任务2和3，我们分析塔性能的灵敏度。性能度量定义为 $\\phi = T_{w,out} - T_{wb}$，即出口水温与湿球温度的“趋近度”。根据我们的解，我们有：\n$$\n\\phi = (T_{w,in} - T_{wb}) \\exp\\left(- \\frac{k_v H}{L c_{p,w}}\\right)\n$$\n我们必须找到每个参数 $\\theta_i$ 在集合 $\\theta = [k_v, H, L, c_{p,w}, T_{w,in}, T_{wb}]$ 中的对数灵敏度 $S_i = \\frac{\\partial \\ln \\phi}{\\partial \\ln \\theta_i}$。索引是 $i \\in \\{0, 1, 2, 3, 4, 5\\}$。我们首先对 $\\phi$ 取自然对数：\n$$\n\\ln \\phi = \\ln(T_{w,in} - T_{wb}) - \\frac{k_v H}{L c_{p,w}}\n$$\n灵敏度由 $S_i = \\theta_i \\frac{\\partial(\\ln \\phi)}{\\partial \\theta_i}$ 给出。\n\n1.  对于 $k_v$ (i=0)：$S_{k_v} = k_v \\frac{\\partial}{\\partial k_v} \\left( \\ln(T_{w,in} - T_{wb}) - \\frac{k_v H}{L c_{p,w}} \\right) = k_v \\left( - \\frac{H}{L c_{p,w}} \\right) = - \\frac{k_v H}{L c_{p,w}} = -NTU$。\n\n2.  对于 $H$ (i=1)：$S_{H} = H \\frac{\\partial}{\\partial H} \\left( \\ln(T_{w,in} - T_{wb}) - \\frac{k_v H}{L c_{p,w}} \\right) = H \\left( - \\frac{k_v}{L c_{p,w}} \\right) = - \\frac{k_v H}{L c_{p,w}} = -NTU$。\n\n3.  对于 $L$ (i=2)：$S_{L} = L \\frac{\\partial}{\\partial L} \\left( \\ln(T_{w,in} - T_{wb}) - \\frac{k_v H}{L c_{p,w}} \\right) = L \\left( \\frac{k_v H}{L^2 c_{p,w}} \\right) = \\frac{k_v H}{L c_{p,w}} = NTU$。\n\n4.  对于 $c_{p,w}$ (i=3)：$S_{c_{p,w}} = c_{p,w} \\frac{\\partial}{\\partial c_{p,w}} \\left( \\ln(T_{w,in} - T_{wb}) - \\frac{k_v H}{L c_{p,w}} \\right) = c_{p,w} \\left( \\frac{k_v H}{L c_{p,w}^2} \\right) = \\frac{k_v H}{L c_{p,w}} = NTU$。\n\n5.  对于 $T_{w,in}$ (i=4)：$S_{T_{w,in}} = T_{w,in} \\frac{\\partial}{\\partial T_{w,in}} \\left( \\ln(T_{w,in} - T_{wb}) - \\frac{k_v H}{L c_{p,w}} \\right) = T_{w,in} \\left( \\frac{1}{T_{w,in} - T_{wb}} \\right) = \\frac{T_{w,in}}{T_{w,in} - T_{wb}}$。\n\n6.  对于 $T_{wb}$ (i=5)：$S_{T_{wb}} = T_{wb} \\frac{\\partial}{\\partial T_{wb}} \\left( \\ln(T_{w,in} - T_{wb}) - \\frac{k_v H}{L c_{p,w}} \\right) = T_{wb} \\left( \\frac{-1}{T_{w,in} - T_{wb}} \\right) = - \\frac{T_{wb}}{T_{w,in} - T_{wb}}$。\n\n有了这些对数灵敏度 $S_i$ 的解析表达式，每个参数的不确定度对整体性能不确定度的贡献通过 $|S_i| u_i$ 来估算。最终任务是为每个测试用例中的每个参数计算此值，并确定对应于最大贡献的索引 $i^{\\star}$。这需要实现推导出的公式，并使用提供的数值数据进行评估。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the cooling tower sensitivity analysis problem.\n\n    The function processes a set of test cases, each defining the parameters\n    and uncertainties for a simplified cooling tower model. For each case, it\n    calculates the logarithmic sensitivities of the performance measure\n    (outlet temperature approach to wet-bulb) with respect to each model\n    parameter. It then determines which parameter contributes most to the\n    performance uncertainty by finding the maximum contribution magnitude,\n    defined as |S_i| * u_i, where S_i is the logarithmic sensitivity and\n    u_i is the fractional uncertainty of parameter i.\n\n    The final output is a list of zero-based indices of the dominant parameter\n    for each test case.\n    \"\"\"\n    \n    # Define the test cases from the problem statement.\n    # Each tuple contains:\n    # (k_v, H, L, c_p_w, T_w_in, T_wb)\n    # and a list of uncertainties u = [u_kv, u_H, u_L, u_cpw, u_T_win, u_T_wb]\n    test_cases = [\n        # Case A: (general operating regime)\n        (1500, 4.0, 30, 4180, 308, 298, [0.15, 0.05, 0.05, 0.02, 0.0002, 0.0002]),\n        # Case B: (short packing, small approach)\n        (2000, 0.5, 25, 4180, 305, 300, [0.05, 0.05, 0.05, 0.02, 0.005, 0.005]),\n        # Case C: (tall packing, strong cooling)\n        (6000, 10, 15, 4180, 315, 295, [0.02, 0.10, 0.03, 0.03, 0.001, 0.001]),\n        # Case D: (high liquid loading)\n        (2500, 6, 60, 4180, 310, 299, [0.02, 0.02, 0.50, 0.02, 0.0005, 0.0005]),\n    ]\n\n    dominant_indices = []\n\n    for case in test_cases:\n        k_v, H, L, c_p_w, T_w_in, T_wb, uncertainties = case\n        \n        # Calculate the Number of Transfer Units (NTU)\n        ntu = (k_v * H) / (L * c_p_w)\n        \n        # Calculate the inlet temperature difference (driving force)\n        delta_T_in = T_w_in - T_wb\n\n        # Calculate logarithmic sensitivities (S_i)\n        # S_0 for k_v, S_1 for H, S_2 for L, S_3 for c_p_w\n        s_0 = -ntu\n        s_1 = -ntu\n        s_2 = ntu\n        s_3 = ntu\n        \n        # S_4 for T_w_in\n        s_4 = T_w_in / delta_T_in\n        \n        # S_5 for T_wb\n        s_5 = -T_wb / delta_T_in\n        \n        sensitivities = np.array([s_0, s_1, s_2, s_3, s_4, s_5])\n        \n        # Calculate the contribution magnitudes |S_i| * u_i\n        contributions = np.abs(sensitivities) * np.array(uncertainties)\n        \n        # Find the index of the maximum contribution.\n        # np.argmax returns the index of the first occurrence of the maximum,\n        # which satisfies the tie-breaking rule (smallest index).\n        dominant_index = np.argmax(contributions)\n        dominant_indices.append(dominant_index)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, dominant_indices))}]\")\n\nsolve()\n```", "id": "2474353"}]}