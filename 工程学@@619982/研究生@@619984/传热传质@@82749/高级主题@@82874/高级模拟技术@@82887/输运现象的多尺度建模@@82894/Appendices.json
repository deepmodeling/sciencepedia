{"hands_on_practices": [{"introduction": "本练习是均匀化理论中的一个经典入门问题，旨在阐明如何从微观结构推导出宏观的有效输运性质。通过分析一个具有简单周期性（层状）的复合材料，我们将从第一性原理出发，推导其在平行和垂直于层流方向上的有效导热系数。这项实践清晰地展示了宏观上的各向异性是如何源于微观结构的，是理解多尺度建模核心思想的绝佳起点。[@problem_id:2508571]", "problem": "一种周期性层压复合材料由两种均匀、各向同性的材料的平直层交替构成，其热导率分别为 $k_{1}$ 和 $k_{2}$。各层之间完美粘合，在 $y$ 方向上以周期 $\\ell$ 呈空间周期性分布，并在 $x$ 和 $z$ 方向上无限延伸。在一个周期内，各层的厚度分别为 $t_{1}$ 和 $t_{2}$，材料1的体积分数为 $f = t_{1}/(t_{1}+t_{2})$。假设为稳态热传导，无内部热源，且存在清晰的尺度分离，$0 < \\epsilon = \\ell/L \\ll 1$，其中 $L$ 是施加的温度发生变化的宏观长度。\n\n仅从傅里叶热传导定律和局部能量守恒出发，使用代表性体积单元和双尺度均匀化方法或等效的体积平均法，推导平行于和垂直于该层压结构的等效热导率。阐明每种加载情况下对宏观温度梯度形式所需的任何假设。然后，简要讨论均匀化介质的各向异性类别，以及当 $k_{1}$和$k_{2}$为正值时，两种等效热导率之间的大小关系。\n\n将平行于层压结构的等效热导率 $k_{\\parallel}$ 和垂直于层压结构的等效热导率 $k_{\\perp}$ 作为 $k_{1}$、$k_{2}$ 和 $f$ 的函数，以闭合形式表示为一个数对。最终答案中不包含单位。无需进行数值四舍五入。将最终的数对表示为单行矩阵。", "solution": "所提出的问题是关于周期性介质均匀化的一个基础练习，具体涉及确定层压复合材料的等效热性能。该问题具有科学依据、是良定的，并包含了获得唯一解所需的所有信息。我们确认该问题有效，并开始进行推导。\n\n其控制物理过程是无内部热源介质中的稳态热传导。这由能量守恒方程 $\\nabla \\cdot \\mathbf{q} = 0$ 描述，其中 $\\mathbf{q}$ 是热通量矢量。联系热通量与温度场 $T$ 的本构关系是傅里叶定律，即 $\\mathbf{q} = -k \\nabla T$。热导率 $k$ 是空间坐标 $y$ 的一个分段常数函数，在各层中分别取值为 $k_{1}$ 和 $k_{2}$。\n\n目标是求出等效热导率张量 $\\mathbf{K}_{\\text{eff}}$，它通过宏观定律 $\\langle\\mathbf{q}\\rangle = -\\mathbf{K}_{\\text{eff}} \\langle\\nabla T\\rangle$ 将体积平均热通量 $\\langle\\mathbf{q}\\rangle$ 与体积平均温度梯度 $\\langle\\nabla T\\rangle$ 联系起来。平均是在一个代表性体积单元（RVE）上进行的，在本例中，它是一个在 $y$ 方向上周期为 $\\ell = t_{1} + t_{2}$、在 $x$ 和 $z$ 方向上具有任意单位长度的单元。由于其层状结构，等效性能将是各向异性的。我们分析两种主要情况，分别对应于平行于和垂直于该层压结构的热流。\n\n情况1：平行于层压结构的热流（例如，在 $x$ 方向上）。\n对于这种情况，我们施加一个沿 $x$ 轴方向的均匀宏观温度梯度，$\\langle\\nabla T\\rangle = (G_{x}, 0, 0)$，其中 $G_{x}$ 是一个常数。任意点的温度可以写为 $T(x,y) = G_{x}x + T'(x,y)$，其中 $T'$ 是一个周期性扰动。这种加载情况的一个关键假设是温度场在层间界面上是连续的。此外，由于各层在 $x$ 方向上是均匀且无限延伸的，等温面是垂直于 $x$ 轴的平面。这意味着在这种特定的加载条件下，RVE内的温度 $T$ 不随 $y$ 变化。因此，两种材料层中的温度梯度是相同的，且等于施加的宏观梯度：\n$$ \\nabla T_{1} = \\nabla T_{2} = \\langle\\nabla T\\rangle = (G_{x}, 0, 0) $$\n每个材料层内的热通量矢量由傅里叶定律给出：\n$$ \\mathbf{q}_{1} = -k_{1} \\nabla T_{1} = (-k_{1} G_{x}, 0, 0) $$\n$$ \\mathbf{q}_{2} = -k_{2} \\nabla T_{2} = (-k_{2} G_{x}, 0, 0) $$\n体积平均热通量 $\\langle\\mathbf{q}\\rangle$ 是每种材料中热通量的加权平均值，权重是它们各自的体积分数。材料1的体积分数为 $f = t_{1}/\\ell$，材料2的体积分数为 $1-f = t_{2}/\\ell$。\n$$ \\langle q_{x} \\rangle = f q_{x,1} + (1-f) q_{x,2} = f (-k_{1} G_{x}) + (1-f) (-k_{2} G_{x}) $$\n$$ \\langle q_{x} \\rangle = -[f k_{1} + (1-f) k_{2}] G_{x} $$\n根据定义，宏观关系为 $\\langle q_{x} \\rangle = -k_{\\parallel} \\langle \\nabla_{x} T \\rangle = -k_{\\parallel} G_{x}$。将其与通过体积平均推导出的表达式进行比较，我们确定了平行于层压结构的等效热导率：\n$$ k_{\\parallel} = f k_{1} + (1-f) k_{2} $$\n这个结果是热导率的算术平均值，通常称为 Voigt 界或混合法则。它类似于电路中的电阻并联。\n\n情况2：垂直于层压结构的热流（在 $y$ 方向上）。\n对于这种情况，我们沿 $y$ 轴施加一个均匀的宏观温度梯度（或热通量）。最直接的方法是假设一个恒定的热通量 $Q_{y}$ 在 $y$ 方向上流动。根据稳态能量守恒方程 $\\nabla \\cdot \\mathbf{q} = \\frac{\\partial q_{y}}{\\partial y} = 0$，垂直于界面的热通量分量必须在整个RVE中是连续且恒定的。因此，\n$$ q_{y,1} = q_{y,2} = \\langle q_{y} \\rangle = Q_{y} $$\n然后，可以根据傅里叶定律确定每个材料层内的温度梯度：\n$$ \\nabla_{y} T_{1} = -\\frac{q_{y,1}}{k_{1}} = -\\frac{Q_{y}}{k_{1}} $$\n$$ \\nabla_{y} T_{2} = -\\frac{q_{y,2}}{k_{2}} = -\\frac{Q_{y}}{k_{2}} $$\n跨越一个周期 $\\ell$ 的总温降是跨越每个层的温降之和。平均温度梯度 $\\langle\\nabla_{y} T\\rangle$ 是这个总温降除以总厚度 $\\ell$：\n$$ \\langle \\nabla_{y} T \\rangle = \\frac{\\Delta T_{\\text{total}}}{\\ell} = \\frac{(\\nabla_{y} T_{1}) t_{1} + (\\nabla_{y} T_{2}) t_{2}}{t_{1} + t_{2}} $$\n代入每个层中梯度的表达式：\n$$ \\langle \\nabla_{y} T \\rangle = \\frac{(-\\frac{Q_{y}}{k_{1}}) t_{1} + (-\\frac{Q_{y}}{k_{2}}) t_{2}}{t_{1} + t_{2}} = -Q_{y} \\left( \\frac{t_{1}/\\ell}{k_{1}} + \\frac{t_{2}/\\ell}{k_{2}} \\right) $$\n使用体积分数 $f = t_{1}/\\ell$ 和 $1-f = t_{2}/\\ell$：\n$$ \\langle \\nabla_{y} T \\rangle = -Q_{y} \\left( \\frac{f}{k_{1}} + \\frac{1-f}{k_{2}} \\right) $$\n宏观关系为 $\\langle q_{y} \\rangle = -k_{\\perp} \\langle \\nabla_{y} T \\rangle$，即 $Q_{y} = -k_{\\perp} \\langle \\nabla_{y} T \\rangle$。将此代入前一个方程，得到：\n$$ \\langle \\nabla_{y} T \\rangle = -(-k_{\\perp} \\langle \\nabla_{y} T \\rangle) \\left( \\frac{f}{k_{1}} + \\frac{1-f}{k_{2}} \\right) $$\n假设存在一个非零的温度梯度，$\\langle \\nabla_{y} T \\rangle \\neq 0$，我们可以用它来除，得到：\n$$ 1 = k_{\\perp} \\left( \\frac{f}{k_{1}} + \\frac{1-f}{k_{2}} \\right) $$\n求解垂直于层压结构的等效热导率 $k_{\\perp}$：\n$$ k_{\\perp} = \\left( \\frac{f}{k_{1}} + \\frac{1-f}{k_{2}} \\right)^{-1} $$\n这个结果是热导率的调和平均值，通常称为 Reuss 界。它类似于电路中的电阻串联。\n\n各向异性类别与大小关系：\n在与层压结构对齐的坐标系（$x, z$ 平行；$y$ 垂直）中，等效热导率张量 $\\mathbf{K}_{\\text{eff}}$ 是对角阵：\n$$ \\mathbf{K}_{\\text{eff}} = \\begin{pmatrix} k_{\\parallel} & 0 & 0 \\\\ 0 & k_{\\perp} & 0 \\\\ 0 & 0 & k_{\\parallel} \\end{pmatrix} $$\n由于 $k_{xx} = k_{zz} = k_{\\parallel}$ 且 $k_{yy} = k_{\\perp}$，并且通常情况下 $k_{\\parallel} \\neq k_{\\perp}$，因此该均匀化介质是横观各向同性（或单轴各向异性）的。旋转对称轴是垂直于各层的 $y$ 轴。\n\n关于热导率的大小关系，我们比较算术平均值（$k_{\\parallel}$）和调和平均值（$k_{\\perp}$）。对于任意一组正数，算术平均值大于或等于调和平均值。当且仅当集合中的所有数都相等时，等号成立。在我们的情况下，热导率 $k_{1}, k_{2} > 0$ 且体积分数 $0 < f < 1$，我们有 $k_{\\parallel} \\ge k_{\\perp}$。仅当材料相同（即 $k_{1} = k_{2}$）的平凡情况下，等号才成立。其物理诠释是，平行于层压结构的热流可以选择高导热路径，从而导致更高的等效热导率；而垂直于层压结构的热流则被迫穿过所有层，包括热阻最大（导热率最低）的层，这会限制总热通量，从而导致较低的等效热导率。", "answer": "$$\\boxed{\\begin{pmatrix} f k_{1} + (1-f) k_{2} & \\left(\\frac{f}{k_{1}} + \\frac{1-f}{k_{2}}\\right)^{-1} \\end{pmatrix}}$$", "id": "2508571"}, {"introduction": "这个练习将挑战提升到更复杂的层面，引入了跨尺度的多物理场耦合问题。我们将分析多孔催化剂颗粒内部的传质限制（扩散）与化学反应，并将颗粒的总反应速率与宏观尺度上的能量平衡联系起来。通过这个过程，你将掌握如何推导和运用关键的无量纲参数，如Thiele模量和有效因子，这对于分析现实世界中的反应-扩散系统至关重要。[@problem_id:2508584]", "problem": "一个半径为 $R$ 的球形多孔催化剂单颗粒被稀释的气相反应物 $A$ 穿过，在孔隙空间内发生一级本征反应 $r_{A} = k(T)\\,C_{A}$。有效扩散系数为 $D_{\\mathrm{e}} = \\varepsilon D_{m} / \\tau$，其中 $\\varepsilon$ 为孔隙率，$\\tau$ 为曲折度，$D_{m}$ 为分子扩散系数。假设颗粒内部为准稳态条件且对流可忽略不计。微观尺度的质量平衡由物种守恒和 Fickian 扩散控制。边界条件为中心处径向对称，以及在 $r=R$ 处具有给定的表面浓度 $C_{A,s}$。该反应为放热反应，反应热为 $-\\Delta H$（其中 $\\Delta H > 0$）。颗粒具有很高的内部导热系数，因此其内部在均匀的颗粒温度 $T_{p}$下是空间等温的，并通过一个外部传热系数 $h$ 与温度为 $T_{b}$ 的环境进行热交换；外部传质阻力可忽略不计，因此表面浓度等于主体浓度，$C_{A}(R)=C_{A,s}$。反应速率常数遵循 Arrhenius 定律，为便于解析处理，您可以使用在 $T_{b}$ 附近线性化的 Frank–Kamenetskii 大活化能近似，即 $k(T_{p}) \\approx k(T_{b}) \\exp\\!\\big(\\gamma\\,(T_{p}-T_{b})\\big)$，其中 $\\gamma \\equiv E/(R_{g} T_{b}^{2})$，$E$ 是活化能，$R_{g}$ 是普适气体常数。\n\n请仅使用质量和能量守恒的第一性原理以及所述的本构关系，并明确区分微观尺度（颗粒内扩散-反应）和宏观尺度（颗粒-环境热交换）的步骤：\n\n- 用 $R$、$D_{\\mathrm{e}}$ 和 $k(T)$ 推导球形颗粒的 Thiele 模数 $\\phi$ 的精确定义。\n- 求解微观尺度等温问题，以获得具有一级动力学的球形颗粒的等温有效因子 $\\eta_{\\mathrm{iso}}(\\phi)$。该因子定义为颗粒内部的实际总反应速率与假设整个颗粒在表面浓度 $C_{A,s}$ 下具有相同本征动力学时的理论总速率之比。\n- 接下来，将微观尺度的结果与宏观尺度的能量平衡耦合，以获得非等温全局有效因子 $\\eta_{\\mathrm{noniso}}$ 的闭式解析表达式。该因子定义为在颗粒温度 $T_{p}$ 下颗粒中的实际总反应速率与在环境温度 $T_{b}$ 下无内部扩散阻力时的理论总速率之比。在此宏观步骤中，假设颗粒内浓度分布形状可由在 $T_{b}$ 下计算的等温解很好地近似，因此唯一的非等温效应通过 $k(T_{p})$ 的温度依赖性及由此产生的热平衡进入。定义几何因子 $S \\equiv \\dfrac{(-\\Delta H)\\,k(T_{b})\\,C_{A,s}\\,V}{h\\,A}$，其中 $V$ 和 $A$ 分别是颗粒的体积和表面积，并在需要时使用 Lambert $W$ 函数（也称乘积对数）。\n\n请将您的最终答案以单行矩阵的形式提供，其中包含三个解析表达式，顺序为 $\\big[\\phi,\\ \\eta_{\\mathrm{iso}}(\\phi),\\ \\eta_{\\mathrm{noniso}}\\big]$。不需要进行数值计算，最终表达式内不应包含任何单位。请仅使用精确的符号形式。", "solution": "所给出的问题陈述是化学反应工程中的一个标准问题，具体来说是对非等温多孔催化剂颗粒的分析。它具有科学依据，提法恰当，并提供了所有必要的参数和本构关系。所使用的模型——Fickian 扩散、一级动力学、带有 Frank-Kamenetskii 近似的 Arrhenius 定律，以及 Thiele 模数和有效因子的概念——都是该领域的基础。该问题在逻辑上构建为多尺度分析，将颗粒内（微观尺度）现象与颗粒到环境（宏观尺度）的传热分离开来。不存在科学上的不一致、矛盾或信息缺失。因此，该问题被认为是有效的，并将提供解答。\n\n按要求，解答分三部分推导。\n\n第1部分：Thiele 模数 $\\phi$ 的推导\n\n在准稳态条件下，球形颗粒内反应物 $A$ 的微观尺度质量平衡由扩散-反应方程给出。在具有径向对称性的球坐标系中，物种 $A$ 的守恒方程为：\n$$ \\frac{1}{r^{2}} \\frac{d}{dr} \\left( r^{2} N_{A,r} \\right) + R_{A} = 0 $$\n这里，$N_{A,r}$ 是 $A$ 在径向上的摩尔通量，$R_{A}$ 是 $A$ 的体积生成速率。对于一级消耗反应 $r_{A} = k(T)C_{A}$，其生成速率为 $R_{A} = -r_{A} = -k(T)C_{A}$。对于对流可忽略的稀体系，Fick 扩散定律表明 $N_{A,r} = -D_{\\mathrm{e}} \\frac{dC_{A}}{dr}$。将这些关系代入守恒方程，得到：\n$$ \\frac{1}{r^{2}} \\frac{d}{dr} \\left( r^{2} \\left(-D_{\\mathrm{e}} \\frac{dC_{A}}{dr}\\right) \\right) - k(T)C_{A} = 0 $$\n假设有效扩散系数 $D_{\\mathrm{e}}$ 在整个颗粒内为常数，我们得到：\n$$ \\frac{d^{2}C_{A}}{dr^{2}} + \\frac{2}{r} \\frac{dC_{A}}{dr} - \\frac{k(T)}{D_{\\mathrm{e}}} C_{A} = 0 $$\n为对此方程进行无量纲化，我们引入无量纲半径 $\\rho = \\frac{r}{R}$ 和无量纲浓度 $\\psi = \\frac{C_{A}}{C_{A,s}}$。导数变换为 $\\frac{d}{dr} = \\frac{1}{R}\\frac{d}{d\\rho}$ 和 $\\frac{d^2}{dr^2} = \\frac{1}{R^2}\\frac{d^2}{d\\rho^2}$。将这些代入微分方程，可得：\n$$ \\frac{1}{R^{2}} \\frac{d^{2}\\psi}{d\\rho^{2}} + \\frac{2}{R\\rho} \\frac{1}{R} \\frac{d\\psi}{d\\rho} - \\frac{k(T)}{D_{\\mathrm{e}}} \\psi = 0 $$\n乘以 $R^{2}$ 得到无量纲形式：\n$$ \\frac{d^{2}\\psi}{d\\rho^{2}} + \\frac{2}{\\rho} \\frac{d\\psi}{d\\rho} - \\left( \\frac{k(T)R^{2}}{D_{\\mathrm{e}}} \\right) \\psi = 0 $$\nThiele 模数，通常用 $\\phi$ 表示，被定义为量化特征反应速率与特征扩散速率之比的无量纲数组的平方根。从方程中可知，这个数组是 $\\frac{k(T)R^{2}}{D_{\\mathrm{e}}}$。\n因此，Thiele 模数定义为：\n$$ \\phi = \\sqrt{\\frac{k(T)R^{2}}{D_{\\mathrm{e}}}} = R \\sqrt{\\frac{k(T)}{D_{\\mathrm{e}}}} $$\n\n第2部分：等温有效因子 $\\eta_{\\mathrm{iso}}(\\phi)$ 的推导\n\n对于温度为 $T_{p}$ 的等温颗粒，Thiele 模数为常数，$\\phi = R\\sqrt{k(T_{p})/D_{\\mathrm{e}}}$。无量纲质量平衡为：\n$$ \\frac{d^{2}\\psi}{d\\rho^{2}} + \\frac{2}{\\rho} \\frac{d\\psi}{d\\rho} - \\phi^{2} \\psi = 0 $$\n边界条件为：在 $\\rho=0$ 处 $\\frac{d\\psi}{d\\rho}=0$（对称性）和在 $\\rho=1$ 处 $\\psi=1$（表面浓度）。\n该方程可通过变量替换 $u(\\rho) = \\rho\\psi(\\rho)$ 求解，将其变换为更简单的形式：\n$$ \\frac{d^{2}u}{d\\rho^{2}} - \\phi^{2}u = 0 $$\n其通解为 $u(\\rho) = C_{1}\\sinh(\\phi\\rho) + C_{2}\\cosh(\\phi\\rho)$。则浓度分布为 $\\psi(\\rho) = \\frac{C_{1}\\sinh(\\phi\\rho) + C_{2}\\cosh(\\phi\\rho)}{\\rho}$。为使浓度在中心（$\\rho=0$）处为有限值，必须有 $C_{2}=0$，因为 $\\lim_{\\rho\\to 0} \\frac{\\cosh(\\phi\\rho)}{\\rho} \\to \\infty$。应用表面边界条件 $\\psi(1)=1$，可得 $1 = \\frac{C_{1}\\sinh(\\phi)}{1}$，所以 $C_{1} = 1/\\sinh(\\phi)$。浓度分布为：\n$$ \\psi(\\rho) = \\frac{\\sinh(\\phi\\rho)}{\\rho\\sinh(\\phi)} $$\n等温有效因子 $\\eta_{\\mathrm{iso}}$ 是实际总反应速率与假设整个颗粒都处于表面浓度 $C_{A,s}$ 时的反应速率之比。\n$$ \\eta_{\\mathrm{iso}} = \\frac{\\int_{0}^{R} k(T_p)C_{A}(r) \\, 4\\pi r^2 dr}{k(T_p)C_{A,s} \\left(\\frac{4}{3}\\pi R^3\\right)} = 3 \\int_{0}^{1} \\psi(\\rho) \\rho^2 d\\rho $$\n代入 $\\psi(\\rho)$ 的表达式：\n$$ \\eta_{\\mathrm{iso}} = 3 \\int_{0}^{1} \\frac{\\sinh(\\phi\\rho)}{\\rho\\sinh(\\phi)} \\rho^2 d\\rho = \\frac{3}{\\sinh(\\phi)} \\int_{0}^{1} \\rho\\sinh(\\phi\\rho)d\\rho $$\n分部积分得到：\n$$ \\int_{0}^{1} \\rho\\sinh(\\phi\\rho)d\\rho = \\left[\\frac{\\rho\\cosh(\\phi\\rho)}{\\phi}\\right]_0^1 - \\int_{0}^{1} \\frac{\\cosh(\\phi\\rho)}{\\phi}d\\rho = \\frac{\\cosh(\\phi)}{\\phi} - \\left[\\frac{\\sinh(\\phi\\rho)}{\\phi^2}\\right]_0^1 = \\frac{\\cosh(\\phi)}{\\phi} - \\frac{\\sinh(\\phi)}{\\phi^2} $$\n将此结果代回 $\\eta_{\\mathrm{iso}}$ 的表达式中：\n$$ \\eta_{\\mathrm{iso}}(\\phi) = \\frac{3}{\\sinh(\\phi)} \\left(\\frac{\\cosh(\\phi)}{\\phi} - \\frac{\\sinh(\\phi)}{\\phi^2}\\right) = \\frac{3}{\\phi^2}\\left(\\phi\\frac{\\cosh(\\phi)}{\\sinh(\\phi)} - 1\\right) $$\n这给出了等温有效因子的最终表达式：\n$$ \\eta_{\\mathrm{iso}}(\\phi) = \\frac{3}{\\phi^2} (\\phi \\coth(\\phi) - 1) $$\n\n第3部分：非等温全局有效因子 $\\eta_{\\mathrm{noniso}}$ 的推导\n\n全局有效因子 $\\eta_{\\mathrm{noniso}}$ 定义为在颗粒温度 $T_p$ 下的实际总速率与在环境温度 $T_b$ 下无扩散限制时的理论速率之比。\n$$ \\eta_{\\mathrm{noniso}} = \\frac{\\text{实际速率}(T_p)}{\\text{理论速率}(T_b, C_{A,s}, \\text{无扩散})} $$\n分母即为 $k(T_b) C_{A,s} V$。对于分子，问题指定使用在 $T_b$ 下的等温颗粒的浓度分布，但速率常数在实际颗粒温度 $T_p$ 下计算。\n实际总速率为：\n$$ \\text{Actual Rate}(T_p) = \\int_V k(T_p) C_A(r; T_b) dV = k(T_p) \\int_V C_A(r; T_b) dV $$\n从第2部分可知，该积分可以与在 $T_b$ 下计算的等温有效因子相关联，我们将其记为 $\\eta_{\\mathrm{iso},b}$：\n$$ \\eta_{\\mathrm{iso},b} = \\frac{\\int_V k(T_b) C_A(r; T_b) dV}{k(T_b) C_{A,s} V} = \\frac{\\int_V C_A(r; T_b) dV}{C_{A,s} V} $$\n因此，$\\int_V C_A(r; T_b) dV = \\eta_{\\mathrm{iso},b} C_{A,s} V$。则实际速率为 $k(T_p) \\eta_{\\mathrm{iso},b} C_{A,s} V$。\n全局有效因子变为：\n$$ \\eta_{\\mathrm{noniso}} = \\frac{k(T_p) \\eta_{\\mathrm{iso},b} C_{A,s} V}{k(T_b) C_{A,s} V} = \\frac{k(T_p)}{k(T_b)} \\eta_{\\mathrm{iso},b} $$\n颗粒温度 $T_p$ 由宏观尺度能量平衡确定：产生的热量等于移出的热量。\n$$ Q_{gen} = (\\text{实际速率})(-\\Delta H) = k(T_p) \\eta_{\\mathrm{iso},b} C_{A,s} V (-\\Delta H) $$\n$$ Q_{rem} = h A (T_p - T_b) $$\n令 $Q_{gen}$ 和 $Q_{rem}$ 相等，并代入 Frank-Kamenetskii 近似 $k(T_p) = k(T_b) \\exp(\\gamma(T_p-T_b))$：\n$$ k(T_b)\\exp(\\gamma(T_p - T_b)) \\eta_{\\mathrm{iso},b} C_{A,s} V (-\\Delta H) = h A (T_p - T_b) $$\n令 $\\theta = \\gamma(T_p - T_b)$。方程变为：\n$$ \\exp(\\theta) \\frac{k(T_b) \\eta_{\\mathrm{iso},b} C_{A,s} V (-\\Delta H)}{h A} = \\frac{\\theta}{\\gamma} $$\n使用定义 $S = \\frac{(-\\Delta H)k(T_b)C_{A,s}V}{hA}$：\n$$ \\theta \\exp(-\\theta) = \\gamma S \\eta_{\\mathrm{iso},b} $$\n该方程的形式为 $-x\\exp(x) = -\\gamma S \\eta_{\\mathrm{iso},b}$，其中 $x=-\\theta$。其解由 Lambert W 函数给出：$x = W(-\\gamma S \\eta_{\\mathrm{iso},b})$。\n所以，$-\\theta = W(-\\gamma S \\eta_{\\mathrm{iso},b})$，或 $\\theta = -W(-\\gamma S \\eta_{\\mathrm{iso},b})$。\n我们需要比值 $\\frac{k(T_p)}{k(T_b)} = \\exp(\\theta) = \\exp(-W(-\\gamma S \\eta_{\\mathrm{iso},b}))$。\n利用 Lambert W 函数的性质 $\\exp(-W(z)) = W(z)/z$，我们发现：\n$$ \\frac{k(T_p)}{k(T_b)} = \\frac{W(-\\gamma S \\eta_{\\mathrm{iso},b})}{-\\gamma S \\eta_{\\mathrm{iso},b}} $$\n最后，将此代入 $\\eta_{\\mathrm{noniso}}$ 的表达式中：\n$$ \\eta_{\\mathrm{noniso}} = \\left(\\frac{W(-\\gamma S \\eta_{\\mathrm{iso},b})}{-\\gamma S \\eta_{\\mathrm{iso},b}}\\right) \\eta_{\\mathrm{iso},b} = \\frac{W(-\\gamma S \\eta_{\\mathrm{iso},b})}{-\\gamma S} $$\n此处，$\\eta_{\\mathrm{iso},b}$ 是第2部分的等温有效因子，在 Thiele 模数 $\\phi_b = R\\sqrt{k(T_b)/D_e}$ 下计算。因此最终表达式为：\n$$ \\eta_{\\mathrm{noniso}} = \\frac{W\\left(-\\gamma S \\left[ \\frac{3}{\\phi_b^2}(\\phi_b \\coth(\\phi_b) - 1) \\right] \\right)}{-\\gamma S} $$\n其中 $\\phi_b = R\\sqrt{k(T_b)/D_e}$。\n\n三个所需的表达式已汇总在最终答案中。", "answer": "$$ \\boxed{ \\begin{pmatrix} R \\sqrt{\\frac{k(T)}{D_{\\mathrm{e}}}} & \\frac{3}{\\phi^{2}} (\\phi \\coth(\\phi) - 1) & \\frac{W\\left(-\\gamma S \\left[ \\frac{3}{\\phi_{b}^{2}} (\\phi_{b} \\coth(\\phi_{b}) - 1) \\right] \\right)}{-\\gamma S} \\end{pmatrix} } $$", "id": "2508584"}, {"introduction": "本练习将理论与计算实践相结合，解决多尺度建模中的一个根本性问题：代表性体积元（REV）的确定。均匀化理论的一个核心前提是REV的存在，但如何在一个给定的微观结构中确定其大小呢？这项实践提供了一种基于统计分析的计算方法，通过处理合成的微观结构数据来估计REV的尺寸，这对于将多尺度模型应用于真实材料是至关重要的一步。[@problem_id:2508640]", "problem": "您的任务是设计并实现一个计算程序，通过评估体积平均热导率的变异系数 (CV) 随采样窗口尺寸的变化，来从合成的微计算机断层扫描 (micro-CT) 图像体积中估算表观热导率的代表性单元体积 (REV)。\n\n从热传导的基本原理开始。在没有内部源的稳态条件下，能量守恒定律表述为 $\\nabla \\cdot \\mathbf{q} = 0$，其中 $\\mathbf{q}$ 是热通量。Fourier 定律指出 $\\mathbf{q} = -k(\\mathbf{x}) \\nabla T$，其中 $k(\\mathbf{x})$ 是空间变化的热导率，$T$ 是温度。对于一个尺寸为 $L \\times L \\times L$ 的足够大的采样体积 $\\Omega_L$，在尺度分离和遍历性假设下，体积平均性质 $\\bar{k}_L = \\frac{1}{|\\Omega_L|} \\int_{\\Omega_L} k(\\mathbf{x}) \\, \\mathrm{d}V$ 预计会收敛到一个与尺度无关的有效值。这种收敛的一个实用数值指标是变异系数 $\\mathrm{CV}(L) = \\frac{\\sigma_L}{\\mu_L}$，其中 $\\mu_L$ 和 $\\sigma_L$ 分别是在域内所有窗口位置上计算的局部体积平均值 $\\bar{k}_L$ 集合的均值和标准差。\n\n您的程序必须按如下方式操作化此概念：\n\n- 定义一个尺寸为 $N \\times N \\times N$ 体素的离散三维域。构建一个合成的两相微结构，并将各相映射到热导率 $k_{\\mathrm{low}}$ 和 $k_{\\mathrm{high}}$（单位为 $\\mathrm{W}\\,\\mathrm{m}^{-1}\\,\\mathrm{K}^{-1}$）。属性场为 $k[i,j,k] \\in \\{k_{\\mathrm{low}}, k_{\\mathrm{high}}\\}$。\n- 对于给定集合 $\\mathcal{L}$ 中的每个立方窗口边长 $L$（以体素为单位），使用周期性边界条件在所有体素位置计算滑动窗口体积平均值 $\\bar{k}_L$。将此操作解释为与一个尺寸为 $L \\times L \\times L$、归一化后总和为1的均匀核进行离散卷积。\n- 对于每个 $L \\in \\mathcal{L}$，计算 $\\mathrm{CV}(L) = \\sigma_L / \\mu_L$，其中 $\\mu_L$ 和 $\\sigma_L$ 是 $\\bar{k}_L$ 值在所有窗口位置上的均值和标准差。\n- 将 REV 估算值 $\\widehat{L}_{\\mathrm{REV}}$ 定义为满足 $\\max_{L' \\in \\mathcal{L},\\, L' \\ge L} \\mathrm{CV}(L') \\le \\varepsilon$ 的集合 $\\mathcal{L}$ 中最小的 $L$，其中 $\\varepsilon > 0$ 是一个给定的容差。如果在 $\\mathcal{L}$ 中不存在这样的 $L$，则返回 $-1$。\n\n在以下测试套件上实现该程序。每个测试用例指定了 $N$、微结构生成规则、相热导率、任何额外参数、窗口尺寸集合 $\\mathcal{L}$、变异系数容差 $\\varepsilon$ 以及用于可复现性的随机种子（如果适用）。所有长度必须以体素为单位进行解释和报告。将每个最终估算的 REV 表示为整数个体素数。\n\n测试套件（四个用例）：\n\n- 用例 A（不相关，低对比度）：\n  - 域尺寸：$N = 64$。\n  - 微结构：高导热相的独立伯努利场，概率 $p = 0.5$。\n  - 热导率：$k_{\\mathrm{low}} = 1.0$，$k_{\\mathrm{high}} = 2.0$，单位 $\\mathrm{W}\\,\\mathrm{m}^{-1}\\,\\mathrm{K}^{-1}$。\n  - 候选窗口尺寸：$\\mathcal{L} = [4,\\,8,\\,12,\\,16,\\,24,\\,32]$（体素）。\n  - 容差：$\\varepsilon = 0.05$。\n  - 随机种子：$r = 0$。\n\n- 用例 B（不相关，高对比度）：\n  - 域尺寸：$N = 64$。\n  - 微结构：高导热相的独立伯努利场，概率 $p = 0.5$。\n  - 热导率：$k_{\\mathrm{low}} = 0.1$，$k_{\\mathrm{high}} = 10.0$，单位 $\\mathrm{W}\\,\\mathrm{m}^{-1}\\,\\mathrm{K}^{-1}$。\n  - 候选窗口尺寸：$\\mathcal{L} = [4,\\,8,\\,12,\\,16,\\,24,\\,32]$（体素）。\n  - 容差：$\\varepsilon = 0.05$。\n  - 随机种子：$r = 1$。\n\n- 用例 C（相关斑点）：\n  - 域尺寸：$N = 64$。\n  - 微结构：由标准差为 $\\sigma = 3$ 体素的高斯滤波器平滑的零均值高斯随机场，然后在 0 处进行阈值化，以产生体积分数近似相等的两相。即，在网格上独立同分布地抽取 $X \\sim \\mathcal{N}(0,1)$，设置 $Y = G_\\sigma \\star X$，其中 $G_\\sigma$ 是标准差为 $\\sigma$ 的高斯核，并将高导热相定义为 $\\{Y \\ge 0\\}$。\n  - 热导率：$k_{\\mathrm{low}} = 1.0$，$k_{\\mathrm{high}} = 5.0$，单位 $\\mathrm{W}\\,\\mathrm{m}^{-1}\\,\\mathrm{K}^{-1}$。\n  - 候选窗口尺寸：$\\mathcal{L} = [4,\\,8,\\,12,\\,16,\\,24,\\,32]$（体素）。\n  - 容差：$\\varepsilon = 0.05$。\n  - 随机种子：$r = 2$。\n\n- 用例 D（分层介质）：\n  - 域尺寸：$N = 64$。\n  - 微结构：垂直于 $z$ 轴的完美周期性层，周期为 $T = 8$ 体素，由 4 个体素的高导热相和 4 个体素的低导热相交替组成，并沿 $z$ 轴重复。在 $x$ 和 $y$ 方向上是均匀的。\n  - 热导率：$k_{\\mathrm{low}} = 1.0$，$k_{\\mathrm{high}} = 5.0$，单位 $\\mathrm{W}\\,\\mathrm{m}^{-1}\\,\\mathrm{K}^{-1}$。\n  - 候选窗口尺寸：$\\mathcal{L} = [4,\\,8,\\,12,\\,16,\\,24,\\,32]$（体素）。\n  - 容差：$\\varepsilon = 0.05$。\n\n您的程序必须：\n\n- 完全按照规定生成每个合成微结构，并在适用时使用提供的随机种子。\n- 在计算滑动窗口平均值时使用周期性边界条件。\n- 对于每个用例，计算所有 $L \\in \\mathcal{L}$ 的序列 $\\mathrm{CV}(L)$，然后计算 $\\widehat{L}_{\\mathrm{REV}}$。\n- 生成单行输出，其中包含四个 $\\widehat{L}_{\\mathrm{REV}}$ 值，格式为逗号分隔的列表，并用方括号括起来，例如 $\\left[16,8,24,32\\right]$。\n\n以体素为单位，报告为整数。输出格式必须是与所示完全相同的一行列表字符串；不允许有任何附加文本。", "solution": "提交以供分析的问题陈述被认为是有效的。它提出了一个良态的计算任务，该任务基于非均质材料多尺度建模和均匀化理论的既定原则。其目标是估算合成微结构表观热导率的代表性单元体积 (REV)，这是连续介质力学中的一个基本概念。该方法论基于分析体积平均性质的变异系数随尺度的函数关系，是一种用于形态表征的标准且科学合理的过程。所有参数、边界条件和微结构生成规则都已足够精确地指定，以允许一个唯一且可复现的数值解。该问题不违反任何物理学或数学原理，并且与热质传递的主题直接相关。\n\n解决方案通过实施指定的计算程序来进行。该程序的核心是量化材料属性场的统计异质性如何随着平均体积的增加而减小。\n\n**1. 理论框架**\n\n在无内部热生成的稳态传热中，控制方程是热通量的散度为零，即 $\\nabla \\cdot \\mathbf{q} = 0$。Fourier 定律通过局部热导率 $k(\\mathbf{x})$ 将热通量 $\\mathbf{q}$ 与温度梯度 $\\nabla T$ 联系起来，即 $\\mathbf{q} = -k(\\mathbf{x}) \\nabla T$。对于非均质材料，$k(\\mathbf{x})$ 在空间上是变化的。\n\nREV 的概念源于这样一种期望：为了在更大尺度上进行分析，用一种由有效性质描述的等效均质材料来替代复杂的非均质材料。如果在一个特征尺寸为 $L$ 的体积 $\\Omega_L$ 上计算的体积平均性质变得与该体积的具体位置和尺寸无关，那么该体积就被认为是 REV，前提是 $L$ 相对于微观结构长度尺度足够大。\n\n该问题通过分析体积平均热导率场本身 $\\bar{k}_L = \\frac{1}{|\\Omega_L|} \\int_{\\Omega_L} k(\\mathbf{x}) \\, \\mathrm{d}V$ 的收敛性来简化此问题，而不是求解有效热导率的完整边值问题。收敛准则基于变异系数 $\\mathrm{CV}(L) = \\sigma_L / \\mu_L$。在这里，$\\mu_L$ 和 $\\sigma_L$ 是通过将平均窗口 $\\Omega_L$ 放置在较大的材料域内所有可能位置而获得的 $\\bar{k}_L$ 值集合的均值和标准差。$\\mathrm{CV}(L)$ 的减小表明材料在尺度 $L$ 上显得越来越均匀。\n\n**2. 计算实现**\n\n连续问题被离散化到 $N \\times N \\times N$ 体素的三维笛卡尔网格上。空间变化的热导率 $k(\\mathbf{x})$ 变成一个离散数组 $k[i,j,k]$。\n\n**2.1. 微结构生成**\n对于每个测试用例，会生成一个特定的 $N \\times N \\times N$ 热导率场：\n- **用例 A 和 B（不相关伯努利场）：** 用从均匀分布中抽取的随机值填充一个三维数组。如果一个体素的随机数小于概率 $p$，则为其分配高导热率值 $k_{\\mathrm{high}}$，否则分配低导热率值 $k_{\\mathrm{low}}$。这将创建一个无空间相关性的随机棋盘格状结构。通过为伪随机数生成器设置种子来确保可复现性。\n- **用例 C（相关高斯斑点）：** 生成一个具有特征尺寸的更真实的微结构。首先，创建一个独立标准正态随机变量场，$X \\sim \\mathcal{N}(0,1)$。然后，将这个“白噪声”场与一个标准差为 $\\sigma$ 的离散三维高斯核进行卷积。该滤波步骤引入了空间相关性，从而创建出光滑的“斑点”。卷积使用周期性边界条件执行，这可以由 `scipy.ndimage.gaussian_filter` 等库函数正确处理。得到的平滑场 $Y$ 在 0 处进行阈值化；$Y \\ge 0$ 的体素被分配 $k_{\\mathrm{high}}$，其余的被分配 $k_{\\mathrm{low}}$。\n- **用例 D（分层介质）：** 创建一个确定性的各向异性微结构。坐标为 $(i, j, k)$ 的体素的热导率仅取决于 $z$ 坐标 $k$。该结构沿 $z$ 轴呈周期性，周期为 $T$。对于 $k \\pmod T < T/2$，该相为高导热相；否则为低导热相。\n\n**2.2. 体积平均和 CV 计算**\n对于集合 $\\mathcal{L}$ 中的每个候选窗口尺寸 $L$，必须计算局部体积平均场 $\\bar{k}_L$。使用嵌套循环的朴素实现方式在计算上是不可行的。问题正确地指出，此操作等效于将热导率场 $k[i,j,k]$ 与一个尺寸为 $L \\times L \\times L$ 的均匀（盒式）核进行离散卷积，该核被归一化以使其总和为一。关键的是，必须应用周期性边界条件来处理跨越域边界的窗口。这可以通过使用带有 `mode='wrap'` 选项的 `scipy.ndimage.uniform_filter` 来高效实现。此操作产生一个 $N \\times N \\times N$ 的数组 $\\bar{k}_L$，其中每个元素是以该体素为中心的尺寸为 $L$ 的窗口上的平均热导率。从该数组中，计算所有 $N^3$ 个值的全局均值 $\\mu_L$ 和标准差 $\\sigma_L$。然后计算变异系数为 $\\mathrm{CV}(L) = \\sigma_L / \\mu_L$。对每个 $L \\in \\mathcal{L}$ 重复此过程。\n\n**2.3. REV 估算**\n最后一步是从计算出的 $\\mathrm{CV}(L)$ 值序列中确定估算的 REV 尺寸 $\\widehat{L}_{\\mathrm{REV}}$。根据问题的定义，我们寻找集合 $\\mathcal{L}$ 中最小的 $L$，使得其自身以及所有更大的测试尺寸的变异系数都保持在给定的容差 $\\varepsilon$ 以下。也就是说，我们找到满足 $\\max_{L' \\in \\mathcal{L}, L' \\ge L} \\mathrm{CV}(L') \\le \\varepsilon$ 的最小 $L \\in \\mathcal{L}$。如果在提供的集合 $\\mathcal{L}$ 中找不到这样的 $L$，则意味着在测试的尺度范围内未达到所需容差的收敛，并返回一个值 $-1$。\n\n以下 Python 代码为所有指定的测试用例实现了这一完整过程。", "answer": "```python\nimport numpy as np\nfrom scipy.ndimage import uniform_filter, gaussian_filter\n\ndef generate_bernoulli_microstructure(N, p, k_low, k_high, seed):\n    \"\"\"\n    Generates a 3D microstructure based on an independent Bernoulli field.\n\n    Args:\n        N (int): Domain size (N x N x N).\n        p (float): Probability of a voxel being the high-conductivity phase.\n        k_low (float): Low conductivity value.\n        k_high (float): High conductivity value.\n        seed (int): Random seed for reproducibility.\n\n    Returns:\n        np.ndarray: The 3D conductivity field.\n    \"\"\"\n    rng = np.random.default_rng(seed)\n    random_field = rng.random((N, N, N))\n    conductivity_field = np.where(random_field < p, k_high, k_low)\n    return conductivity_field\n\ndef generate_gaussian_blob_microstructure(N, sigma_filter, k_low, k_high, seed):\n    \"\"\"\n    Generates a 3D microstructure of correlated blobs.\n\n    Args:\n        N (int): Domain size (N x N x N).\n        sigma_filter (float): Standard deviation of the Gaussian filter.\n        k_low (float): Low conductivity value.\n        k_high (float): High conductivity value.\n        seed (int): Random seed for reproducibility.\n\n    Returns:\n        np.ndarray: The 3D conductivity field.\n    \"\"\"\n    rng = np.random.default_rng(seed)\n    noise_field = rng.normal(loc=0.0, scale=1.0, size=(N, N, N))\n    # Apply Gaussian filter with periodic boundary conditions ('wrap')\n    smoothed_field = gaussian_filter(noise_field, sigma=sigma_filter, mode='wrap')\n    # Threshold at 0 to create two phases\n    conductivity_field = np.where(smoothed_field >= 0, k_high, k_low)\n    return conductivity_field\n\ndef generate_layered_microstructure(N, T, k_low, k_high):\n    \"\"\"\n    Generates a 3D microstructure of periodic layers normal to the z-axis.\n\n    Args:\n        N (int): Domain size (N x N x N).\n        T (int): Period of the layers.\n        k_low (float): Low conductivity value.\n        k_high (float): High conductivity value.\n\n    Returns:\n        np.ndarray: The 3D conductivity field.\n    \"\"\"\n    # Thickness of the high-conductivity part of the period\n    high_k_thickness = T // 2\n    # Create z-coordinates array\n    z_coords = np.arange(N)\n    # Create 1D mask based on periodic condition\n    mask_1d = (z_coords % T) < high_k_thickness\n    # Broadcast the 1D mask to the full 3D domain\n    mask_3d = mask_1d.reshape(1, 1, N)\n    conductivity_field = np.where(mask_3d, k_high, k_low)\n    return np.broadcast_to(conductivity_field, (N, N, N))\n\ndef compute_rev_for_case(params):\n    \"\"\"\n    Computes the estimated REV for a single test case.\n    \"\"\"\n    N = params['N']\n    L_values = params['L_values']\n    epsilon = params['epsilon']\n    \n    #_1. Generate Microstructure\n    if params['type'] == 'bernoulli':\n        k_field = generate_bernoulli_microstructure(\n            N, params['p'], params['k_low'], params['k_high'], params['seed']\n        )\n    elif params['type'] == 'gaussian_blobs':\n        k_field = generate_gaussian_blob_microstructure(\n            N, params['sigma_filter'], params['k_low'], params['k_high'], params['seed']\n        )\n    elif params['type'] == 'layered':\n        k_field = generate_layered_microstructure(\n            N, params['T'], params['k_low'], params['k_high']\n        )\n    else:\n        raise ValueError(\"Unknown microstructure type\")\n\n    #_2. Compute CV for each window size L\n    cv_values = []\n    for L in L_values:\n        # Use uniform_filter for efficient sliding-window average with periodic BC\n        k_bar_L = uniform_filter(k_field, size=L, mode='wrap')\n        \n        mu_L = np.mean(k_bar_L)\n        sigma_L = np.std(k_bar_L)\n        \n        cv = sigma_L / mu_L if mu_L != 0 else 0.0\n        cv_values.append(cv)\n        \n    #_3. Estimate REV\n    l_rev_estimate = -1\n    for i, L in enumerate(L_values):\n        # Check condition: max of all subsequent CVs (including current) must be <= epsilon\n        max_subsequent_cv = np.max(cv_values[i:])\n        if max_subsequent_cv <= epsilon:\n            l_rev_estimate = L\n            break\n            \n    return l_rev_estimate\n\ndef solve():\n    \"\"\"\n    Main function to run all test cases and print the final result.\n    \"\"\"\n    test_cases = [\n        # Case A\n        {\n            \"type\": \"bernoulli\", \"N\": 64, \"p\": 0.5, \"k_low\": 1.0, \"k_high\": 2.0,\n            \"L_values\": [4, 8, 12, 16, 24, 32], \"epsilon\": 0.05, \"seed\": 0\n        },\n        # Case B\n        {\n            \"type\": \"bernoulli\", \"N\": 64, \"p\": 0.5, \"k_low\": 0.1, \"k_high\": 10.0,\n            \"L_values\": [4, 8, 12, 16, 24, 32], \"epsilon\": 0.05, \"seed\": 1\n        },\n        # Case C\n        {\n            \"type\": \"gaussian_blobs\", \"N\": 64, \"sigma_filter\": 3, \"k_low\": 1.0, \"k_high\": 5.0,\n            \"L_values\": [4, 8, 12, 16, 24, 32], \"epsilon\": 0.05, \"seed\": 2\n        },\n        # Case D\n        {\n            \"type\": \"layered\", \"N\": 64, \"T\": 8, \"k_low\": 1.0, \"k_high\": 5.0,\n            \"L_values\": [4, 8, 12, 16, 24, 32], \"epsilon\": 0.05\n        }\n    ]\n\n    results = []\n    for case in test_cases:\n        result = compute_rev_for_case(case)\n        results.append(result)\n\n    # Print in the required format: [res1,res2,res3,res4]\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2508640"}]}