{"hands_on_practices": [{"introduction": "直接数值模拟（DNS）要求解析所有相关的运动尺度。这项实践将深入探讨物理尺度与计算成本之间的基本关系，这是任何DNS研究者都必须考虑的关键因素。通过分析所需分辨率如何随普朗特数（$Pr$）的变化而变化，您将定量地理解为什么在像水（$Pr > 1$）这样的流体中模拟传热比在空气（$Pr  1$）中昂贵得多[@problem_id:2477540]。", "problem": "通过直接数值模拟（DNS）方法，对不可压缩牛顿流体的湍流平面槽道流进行模拟，以解析其速度场和温度场。模拟在固定的壁面摩擦雷诺数 $Re_{\\tau} = u_{\\tau}\\delta/\\nu$下进行，其中 $u_{\\tau}$ 是壁面摩擦速度，$\\delta$ 是槽道半高，$\\nu$ 是运动粘度。本研究旨在评估当普朗特数 $Pr = \\nu/\\alpha$ 从 $Pr = 0.7$ 增加到 $Pr = 7.0$ 时，计算成本的变化情况，其中 $\\alpha$ 是热扩散率。计算成本被建模为与总网格点数和在固定物理时间间隔内的总时间步数的乘积成正比，即 $C \\propto N_{x}N_{y}N_{z}N_{t}$。\n\n假设以下基于标准湍流理论的建模假设：\n- 最小的动力学相关速度尺度是 Kolmogorov 长度 $\\eta_{K}$，相应的 Kolmogorov 时间尺度 $\\tau_{\\eta}$ 满足 $\\tau_{\\eta} \\sim \\eta_{K}^{2}/\\nu$。\n- 最小的动力学相关热尺度是 Batchelor 尺度 $\\eta_{B}$，通过在粘性对流子区内，平衡尺度为 $r$ 的热扩散时间 $t_{d}(r) \\sim r^{2}/\\alpha$ 与最小的涡翻转或应变时间 $t_{s} \\sim \\tau_{\\eta}$ 得到。\n- 对于 $Pr  1$，热耗散尺度超过 $\\eta_{K}$，因此速度场的分辨率起决定性作用；对于 $Pr  1$，热耗散尺度小于 $\\eta_{K}$，因此温度场的分辨率起决定性作用。\n- 网格的选择应使每个方向的最小间距满足 $\\Delta x \\sim \\Delta y \\sim \\Delta z \\sim c\\,\\eta_{\\min}$，其中 $c$ 为一固定常数，$\\eta_{\\min}$ 是必须解析的动力学相关最小物理尺度。\n- 对于显式格式，时间步长受到与动量方程相关的 Courant–Friedrichs–Lewy (CFL) 稳定性条件的限制，$\\Delta t \\propto \\Delta x/U$，其中 $U$ 是一个特征速度尺度，在固定的 $Re_{\\tau}$ 下不随 $Pr$ 变化。\n- 您可以假设，$Pr$ 的变化仅改变热扩散率 $\\alpha$，而 $\\nu$ 和 $Re_{\\tau}$ 保持不变，并且在主导阶上，$\\eta_{K}$ 在固定的 $Re_{\\tau}$ 下不受影响。\n\n从上述定义以及用于热最小尺度的平衡关系 $r^{2}/\\alpha \\sim \\tau_{\\eta}$ 出发，推导最小热尺度 $\\eta_{B}$ 如何依赖于 $\\eta_{K}$ 和 $Pr$。然后，利用成本模型 $C \\propto N_{x}N_{y}N_{z}N_{t}$ 以及所述的网格和时间步长标度律，确定当 $Pr$ 在固定的 $Re_{\\tau}$ 下从 $Pr = 0.7$ 提高到 $Pr = 7.0$ 时，仅由于需要解析最小热尺度而导致的计算成本增加的乘法因子。请将您的最终答案表示为一个精确的无量纲因子（无单位，不进行四舍五入）。", "solution": "在尝试任何解答之前，将首先对该问题进行严格的验证程序。\n\n**第1步：提取已知条件**\n\n- **系统**：不可压缩牛顿流体的湍流平面槽道流。\n- **模拟方法**：直接数值模拟（DNS）。\n- **固定参数**：壁面摩擦雷诺数 $Re_{\\tau} = u_{\\tau}\\delta/\\nu$。\n- **变量**：$u_{\\tau}$ 是壁面摩擦速度，$\\delta$ 是槽道半高，$\\nu$ 是运动粘度，$\\alpha$ 是热扩散率。\n- **普朗特数**：问题比较了 $Pr = \\nu/\\alpha = 0.7$ 和 $Pr = 7.0$ 两种情况。\n- **成本模型**：计算成本 $C \\propto N_{x}N_{y}N_{z}N_{t}$，其中 $N_x, N_y, N_z$ 是网格点数，$N_t$ 是时间步数。\n- **假设**：\n    1.  最小速度尺度是 Kolmogorov 长度 $\\eta_{K}$；Kolmogorov 时间尺度是 $\\tau_{\\eta} \\sim \\eta_{K}^{2}/\\nu$。\n    2.  最小热尺度，即 Batchelor 尺度 $\\eta_{B}$，通过平衡热扩散时间 $t_{d}(r) \\sim r^{2}/\\alpha$ 与最小涡翻转时间 $t_{s} \\sim \\tau_{\\eta}$ 来找到。\n    3.  对于 $Pr  1$，起控制作用的尺度是 $\\eta_{K}$。对于 $Pr  1$，起控制作用的尺度是 $\\eta_{B}$。\n    4.  网格间距的标度关系为 $\\Delta x \\sim \\Delta y \\sim \\Delta z \\sim c\\,\\eta_{\\min}$，其中 $\\eta_{\\min}$ 是需要解析的最小相关尺度，c 是一个常数。\n    5.  时间步长 $\\Delta t \\propto \\Delta x/U$，其中特征速度 $U$ 是恒定的。\n    6.  $Pr$ 的变化仅影响 $\\alpha$，而 $\\nu$、$Re_{\\tau}$ 和 $\\eta_{K}$ 保持不变。\n\n**第2步：使用提取的已知条件进行验证**\n\n根据所需标准对问题陈述进行分析。\n\n- **科学依据**：该问题植根于已建立的湍流和传热理论，特别是关于耗散尺度的 Kolmogorov 和 Batchelor 标度律。这些概念是该领域的基础，并非推测性的。DNS 的背景是对此类现象进行高保真度研究的标准方法。\n- **适定性**：该问题提供了一个明确的目标和一套完整的标度假设，这些是推导出唯一解所必需的。输入（$Pr_1 = 0.7$，$Pr_2 = 7.0$）和问题（成本的乘法因子）都是明确无误的。\n- **客观性**：语言是技术性的，没有主观或基于观点的论断。这些假设虽然是模型，但被明确陈述，并代表了湍流模拟领域的标准实践。\n- **可形式化和相关性**：该问题与传热的 DNS 这一主题直接相关。标度类比是标准的，并且可以按要求进行数学形式化以求解。\n- **完整性和一致性**：该问题提供了所有必要的定义和关系。没有缺失数据或内部矛盾。在恒定的 $Re_{\\tau}$ 下 $\\eta_{K}$ 固定的假设是在这种情况下一个标准且有效的简化。\n- **可行性和现实性**：所选的普朗特数对于常见流体是现实的（例如，空气的 $Pr \\approx 0.7$，水的 $Pr \\approx 7.0$）。标度假设是 DNS 成本估算中使用的标准近似。\n- **非平凡或非病态**：该问题需要一个多步推导，涉及综合多个标度律，这是一个非平凡的推理任务。它不是同义反复或循环论证。\n\n**第3步：结论与行动**\n\n该问题具有科学依据、适定、客观且完整。因此，判定其为**有效**。将推导解答。\n\n求解过程分为四个阶段。首先，我们建立 Batchelor 尺度 $\\eta_B$ 和 Kolmogorov 尺度 $\\eta_K$ 之间的关系。其次，我们确定给定的两个普朗特数下的最小分辨率尺度 $\\eta_{\\min}$。第三，我们推导计算成本 $C$ 相对于 $\\eta_{\\min}$ 的标度律。最后，我们计算成本的比率。\n\n**1. Batchelor 尺度的推导**\n\n根据所给的假设，Batchelor 尺度 $\\eta_B$ 是这样一个长度尺度，在该尺度上，热扩散时间 $t_d(r) \\sim r^2/\\alpha$ 等于最小的涡应变时间，即 Kolmogorov 时间尺度 $t_s \\sim \\tau_\\eta$。因此，我们设 $r = \\eta_B$ 并令时间尺度相等：\n$$\n\\frac{\\eta_B^2}{\\alpha} \\sim \\tau_\\eta\n$$\n问题还给出了 Kolmogorov 时间尺度的标度律：\n$$\n\\tau_\\eta \\sim \\frac{\\eta_K^2}{\\nu}\n$$\n将此代入前一个关系式中，得到：\n$$\n\\frac{\\eta_B^2}{\\alpha} \\sim \\frac{\\eta_K^2}{\\nu}\n$$\n我们可以重新整理这个表达式，用 $\\eta_K$ 来求解 $\\eta_B$：\n$$\n\\eta_B^2 \\sim \\eta_K^2 \\left(\\frac{\\alpha}{\\nu}\\right)\n$$\n根据定义，普朗特数是 $Pr = \\nu/\\alpha$。因此，$\\alpha/\\nu = 1/Pr$。将此代入 $\\eta_B^2$ 的表达式中：\n$$\n\\eta_B^2 \\sim \\frac{\\eta_K^2}{Pr} \\implies \\eta_B \\sim \\frac{\\eta_K}{Pr^{1/2}}\n$$\n这个关系式将最小热尺度与最小速度尺度和普朗特数联系起来。\n\n**2. 分辨率尺度 $\\eta_{\\min}$ 的确定**\n\n问题指明了如何确定 DNS 网格必须解析的起控制作用的最小尺度 $\\eta_{\\min}$。\n- 设 $Pr_1 = 0.7$。由于 $Pr_1  1$，热尺度 $\\eta_B \\sim \\eta_K / (0.7)^{1/2}  \\eta_K$。起控制作用的（最小）尺度是 Kolmogorov 尺度。因此，对于第一种情况，$\\eta_{\\min, 1} = \\eta_K$。\n- 设 $Pr_2 = 7.0$。由于 $Pr_2  1$，热尺度 $\\eta_B \\sim \\eta_K / (7.0)^{1/2}  \\eta_K$。起控制作用的（最小）尺度是 Batchelor 尺度。因此，对于第二种情况，$\\eta_{\\min, 2} = \\eta_{B,2}$，其中 $\\eta_{B,2} \\sim \\eta_K / Pr_2^{1/2}$。\n\n**3. 计算成本 $C$ 的标度律**\n\n计算成本由 $C \\propto N_x N_y N_z N_t$ 给出。\n每个空间方向上的网格点数 $N_i$（其中 $i \\in \\{x, y, z\\}$）是该方向上的域长度 $L_i$ 除以网格间距 $\\Delta i$。假设域尺寸 $L_x, L_y, L_z$ 固定，则有 $N_i \\propto 1/\\Delta i$。\n所有方向的网格间距必须足够细，以解析最小尺度 $\\eta_{\\min}$。问题陈述 $\\Delta x \\sim \\Delta y \\sim \\Delta z \\sim c\\,\\eta_{\\min}$。因此：\n$$\nN_x \\propto \\frac{1}{\\eta_{\\min}}, \\quad N_y \\propto \\frac{1}{\\eta_{\\min}}, \\quad N_z \\propto \\frac{1}{\\eta_{\\min}}\n$$\n总网格点数 $N_{grid} = N_x N_y N_z$ 因此具有如下标度关系：\n$$\nN_{grid} \\propto \\frac{1}{\\eta_{\\min}^3} = \\eta_{\\min}^{-3}\n$$\n接下来，我们确定时间步数 $N_t$ 的标度律。模拟在固定的物理时间间隔 $T_{phys}$ 内运行，所以 $N_t = T_{phys} / \\Delta t \\propto 1/\\Delta t$。\n时间步长 $\\Delta t$ 受到 CFL 条件的限制，给定为 $\\Delta t \\propto \\Delta x/U$。由于 $\\Delta x \\sim \\eta_{\\min}$ 且特征速度 $U$ 假定为常数，我们有：\n$$\n\\Delta t \\propto \\eta_{\\min} \\implies N_t \\propto \\frac{1}{\\Delta t} \\propto \\eta_{\\min}^{-1}\n$$\n结合这些标度关系，总计算成本 $C$ 的标度关系为：\n$$\nC \\propto N_{grid} \\cdot N_t \\propto (\\eta_{\\min}^{-3}) \\cdot (\\eta_{\\min}^{-1}) = \\eta_{\\min}^{-4}\n$$\n\n**4. 成本比的计算**\n\n题目要求我们找出当 $Pr$ 从 $Pr_1 = 0.7$ 变为 $Pr_2 = 7.0$ 时成本增加的乘法因子。这就是比率 $C_2 / C_1$，其中 $C_1$ 是 $Pr_1$ 时的成本，$C_2$ 是 $Pr_2$ 时的成本。\n使用成本标度律 $C \\propto \\eta_{\\min}^{-4}$，该比率为：\n$$\n\\frac{C_2}{C_1} = \\left(\\frac{\\eta_{\\min, 2}}{\\eta_{\\min, 1}}\\right)^{-4}\n$$\n从第2步可知，$\\eta_{\\min, 1} = \\eta_K$ 且 $\\eta_{\\min, 2} = \\eta_{B,2} = \\eta_K / Pr_2^{1/2}$，其中 $Pr_2 = 7.0$。\n将这些代入比率中：\n$$\n\\frac{C_2}{C_1} = \\left(\\frac{\\eta_K / Pr_2^{1/2}}{\\eta_K}\\right)^{-4} = \\left(\\frac{1}{Pr_2^{1/2}}\\right)^{-4} = (Pr_2^{1/2})^4\n$$\n用 $Pr_2 = 7.0$ 计算此表达式：\n$$\n\\frac{C_2}{C_1} = ( (7.0)^{1/2} )^4 = (7.0)^{4/2} = (7.0)^2 = 49\n$$\n计算成本增加了 49 倍。值得注意的是，$Pr_1 = 0.7$ 情况下的成本由速度场的 Kolmogorov 尺度决定，而 $Pr_2 = 7.0$ 情况下显著更高的成本则由小得多的温度场的 Batchelor 尺度决定。问题中的假设正确地引导了此分析。", "answer": "$$\\boxed{49}$$", "id": "2477540"}, {"introduction": "在数值模拟能够提供可信的物理见解之前，我们必须首先验证代码是否正确地求解了其声称要解决的数学方程。本练习介绍了“制造解方法”（Method of Manufactured Solutions, MMS），这是一种用于代码验证的强大标准技术。您将推导一个自定义源项，以强制一个选定的解析函数成为对流扩散方程的精确解，这是开发和验证DNS软件的一项基本技能[@problem_id:2477527]。", "problem": "在一个三重周期性盒子中，不可压缩流体的温度场由对流-扩散方程控制。考虑使用直接数值模拟（DNS）通过人工解法（MMS）来验证一个标量输运求解器的离散精度。从不可压缩流中被动标量的局部热能守恒和傅里叶热传导定律出发。利用这些基本原理，推导出一个无量纲温度场 $T(x,y,z,t)$ 的控制偏微分方程，其中热扩散系数 $\\alpha$ 为常数，速度场 $\\boldsymbol{u}(x,y,z)$ 为无散场。区域为 $\\Omega=[0,2\\pi]^{3}$，所有边界面均为周期性边界条件。\n\n设不可压缩速度为\n$$\n\\boldsymbol{u}(x,y,z)=\\bigl(2\\sin x\\,\\cos y\\,\\cos z,\\,-2\\cos x\\,\\sin y\\,\\cos z,\\,0\\bigr),\n$$\n并设人工温度为\n$$\nT(x,y,z,t)=\\cos(3x)\\,\\cos(2y)\\,\\cos(z)\\,\\exp(\\sigma t),\n$$\n其中 $\\sigma$ 是一个非零常数，$\\alpha0$ 是常数。使用人工解法（MMS），推导必须添加到对流-扩散方程右侧的时空源项 $S(x,y,z,t)$，以使 $T(x,y,z,t)$ 在 $\\Omega$ 中对于所有 $t\\ge 0$ 都是一个精确解。陈述此构造所对应的初始条件和边界条件，并从守恒定律和本构关系出发，论证每个建模步骤的合理性。你最终报告的结果必须是 $S(x,y,z,t)$ 的显式闭式解析表达式。不需要进行数值舍入。请将你的最终答案表示为单个解析表达式。", "solution": "该问题已经过验证，被认为是科学上合理、适定、客观且自洽的。所提供的速度场可验证为无散场，证实了不可压缩性条件。该问题是人工解法（MMS）在计算流体力学中的一个标准应用，因此是有效的。\n\n求解过程从第一性原理出发。不可压缩流体中被动标量的热能守恒由对流-扩散方程控制。我们从任意控制体 $V$（其表面为 $\\partial V$）中的热能积分守恒定律推导该方程：\n$$ \\frac{d}{dt}\\int_{V} \\rho c_p T \\,dV = -\\oint_{\\partial V} \\boldsymbol{q} \\cdot d\\boldsymbol{A} - \\oint_{\\partial V} \\rho c_p T \\boldsymbol{u} \\cdot d\\boldsymbol{A} + \\int_{V} S_{v} \\,dV $$\n此处，$\\rho$ 是流体密度，$c_p$ 是定压比热容，$T$ 是温度，$\\boldsymbol{q}$ 是热通量矢量，$\\boldsymbol{u}$ 是速度场，$S_v$ 是体热源。利用散度定理，并认识到所得方程必须对任意 $V$ 均成立，我们得到其局部微分形式：\n$$ \\frac{\\partial}{\\partial t}(\\rho c_p T) + \\nabla \\cdot (\\rho c_p T \\boldsymbol{u}) = -\\nabla \\cdot \\boldsymbol{q} + S_v $$\n对于常数 $\\rho$ 和 $c_p$，该方程简化为：\n$$ \\rho c_p \\left( \\frac{\\partial T}{\\partial t} + \\nabla \\cdot (T \\boldsymbol{u}) \\right) = -\\nabla \\cdot \\boldsymbol{q} + S_v $$\n利用矢量恒等式 $\\nabla \\cdot (T \\boldsymbol{u}) = T(\\nabla \\cdot \\boldsymbol{u}) + \\boldsymbol{u} \\cdot \\nabla T$以及不可压缩性条件 $\\nabla \\cdot \\boldsymbol{u} = 0$，对流项变为 $\\boldsymbol{u} \\cdot \\nabla T$。\n热传导的本构关系是傅里叶定律，$\\boldsymbol{q} = -k \\nabla T$，其中 $k$ 是热导率。假设 $k$ 是常数，我们有 $-\\nabla \\cdot \\boldsymbol{q} = \\nabla \\cdot (k \\nabla T) = k \\nabla^2 T$。\n将这些代入守恒方程可得：\n$$ \\rho c_p \\left( \\frac{\\partial T}{\\partial t} + \\boldsymbol{u} \\cdot \\nabla T \\right) = k \\nabla^2 T + S_v $$\n两边同除以 $\\rho c_p$，并定义热扩散系数 $\\alpha = k/(\\rho c_p)$ 和归一化源项 $S(x,y,z,t) = S_v/(\\rho c_p)$，得到标准的对流-扩散方程：\n$$ \\frac{\\partial T}{\\partial t} + \\boldsymbol{u} \\cdot \\nabla T = \\alpha \\nabla^2 T + S $$\n对于人工解法，我们重排该方程来定义必须添加的源项 $S$，以迫使人工温度场成为一个精确解：\n$$ S(x,y,z,t) = \\frac{\\partial T}{\\partial t} + \\boldsymbol{u} \\cdot \\nabla T - \\alpha \\nabla^2 T $$\n我们已知人工解 $T(x,y,z,t) = \\cos(3x)\\cos(2y)\\cos(z)\\exp(\\sigma t)$ 和速度场 $\\boldsymbol{u}(x,y,z)=\\bigl(2\\sin x\\,\\cos y\\,\\cos z,\\,-2\\cos x\\,\\sin y\\,\\cos z,\\,0\\bigr)$。我们现在计算 $S$ 表达式中的每一项。\n\n1. 时间导数，$\\frac{\\partial T}{\\partial t}$：\n$$ \\frac{\\partial T}{\\partial t} = \\frac{\\partial}{\\partial t} \\left[ \\cos(3x)\\cos(2y)\\cos(z)\\exp(\\sigma t) \\right] = \\sigma \\cos(3x)\\cos(2y)\\cos(z)\\exp(\\sigma t) = \\sigma T $$\n\n2. 拉普拉斯算子，$\\nabla^2 T = \\frac{\\partial^2 T}{\\partial x^2} + \\frac{\\partial^2 T}{\\partial y^2} + \\frac{\\partial^2 T}{\\partial z^2}$：\n$$ \\frac{\\partial^2 T}{\\partial x^2} = \\frac{\\partial^2}{\\partial x^2} \\left[ \\cos(3x)\\cos(2y)\\cos(z)\\exp(\\sigma t) \\right] = -3^2 T = -9T $$\n$$ \\frac{\\partial^2 T}{\\partial y^2} = \\frac{\\partial^2}{\\partial y^2} \\left[ \\cos(3x)\\cos(2y)\\cos(z)\\exp(\\sigma t) \\right] = -2^2 T = -4T $$\n$$ \\frac{\\partial^2 T}{\\partial z^2} = \\frac{\\partial^2}{\\partial z^2} \\left[ \\cos(3x)\\cos(2y)\\cos(z)\\exp(\\sigma t) \\right] = -1^2 T = -T $$\n因此，拉普拉斯算子为：\n$$ \\nabla^2 T = (-9 - 4 - 1)T = -14T = -14\\cos(3x)\\cos(2y)\\cos(z)\\exp(\\sigma t) $$\n\n3. 对流项，$\\boldsymbol{u} \\cdot \\nabla T$：\n首先，我们求 $T$ 的梯度，$\\nabla T = \\left(\\frac{\\partial T}{\\partial x}, \\frac{\\partial T}{\\partial y}, \\frac{\\partial T}{\\partial z}\\right)$：\n$$ \\frac{\\partial T}{\\partial x} = -3\\sin(3x)\\cos(2y)\\cos(z)\\exp(\\sigma t) $$\n$$ \\frac{\\partial T}{\\partial y} = -2\\cos(3x)\\sin(2y)\\cos(z)\\exp(\\sigma t) $$\n$$ \\frac{\\partial T}{\\partial z} = -\\cos(3x)\\cos(2y)\\sin(z)\\exp(\\sigma t) $$\n现在，我们计算点积 $\\boldsymbol{u} \\cdot \\nabla T = u_x \\frac{\\partial T}{\\partial x} + u_y \\frac{\\partial T}{\\partial y} + u_z \\frac{\\partial T}{\\partial z}$：\n$$ u_x \\frac{\\partial T}{\\partial x} = (2\\sin x\\,\\cos y\\,\\cos z) \\cdot (-3\\sin(3x)\\cos(2y)\\cos(z)\\exp(\\sigma t)) \\\\ = -6 \\exp(\\sigma t) \\sin x \\sin(3x) \\cos y \\cos(2y) \\cos^2(z) $$\n$$ u_y \\frac{\\partial T}{\\partial y} = (-2\\cos x\\,\\sin y\\,\\cos z) \\cdot (-2\\cos(3x)\\sin(2y)\\cos(z)\\exp(\\sigma t)) \\\\ = 4 \\exp(\\sigma t) \\cos x \\cos(3x) \\sin y \\sin(2y) \\cos^2(z) $$\n$$ u_z \\frac{\\partial T}{\\partial z} = 0 $$\n将这些项相加得到对流项：\n$$ \\boldsymbol{u} \\cdot \\nabla T = \\exp(\\sigma t) \\cos^2(z) \\left[ -6 \\sin x \\sin(3x) \\cos y \\cos(2y) + 4 \\cos x \\cos(3x) \\sin y \\sin(2y) \\right] $$\n\n4. 组装源项 $S(x,y,z,t)$：\n将计算出的各项代入 $S$ 的表达式：\n$$ S = \\sigma T + \\boldsymbol{u} \\cdot \\nabla T - \\alpha(-14T) = (\\sigma + 14\\alpha)T + \\boldsymbol{u} \\cdot \\nabla T $$\n$$ S(x,y,z,t) = (\\sigma + 14\\alpha)\\cos(3x)\\cos(2y)\\cos(z)\\exp(\\sigma t) + \\exp(\\sigma t) \\cos^2(z) \\left[ -6 \\sin x \\sin(3x) \\cos y \\cos(2y) + 4 \\cos x \\cos(3x) \\sin y \\sin(2y) \\right] $$\n提出因子 $\\exp(\\sigma t)$，得到源项的最终表达式：\n$$ S(x,y,z,t) = \\exp(\\sigma t) \\left( (\\sigma + 14\\alpha)\\cos(3x)\\cos(2y)\\cos(z) + \\cos^2(z) \\left[ 4 \\cos x \\cos(3x) \\sin y \\sin(2y) - 6 \\sin x \\sin(3x) \\cos y \\cos(2y) \\right] \\right) $$\n\n在 $t=0$ 时的初始条件，直接从人工解导出：\n$$ T(x,y,z,0) = \\cos(3x)\\cos(2y)\\cos(z) $$\n区域 $\\Omega=[0,2\\pi]^{3}$ 的边界条件是周期性的。人工解 $T(x,y,z,t)$ 和速度场 $\\boldsymbol{u}(x,y,z)$ 由三角函数组成，其自变量是空间坐标的整数倍。这些函数在区域 $[0,2\\pi]^{3}$ 上内在地具有周期性（例如，$\\cos(3(x+2\\pi)) = \\cos(3x+6\\pi) = \\cos(3x)$）。因此，人工解内在地满足周期性边界条件。\n所有的建模步骤都从基本守恒定律出发，并导出了所需的源项，其过程是合理的。$S(x,y,z,t)$ 的最终结果是上面推导出的显式解析表达式。", "answer": "$$ \\boxed{\\exp(\\sigma t) \\left( (\\sigma + 14\\alpha)\\cos(3x)\\cos(2y)\\cos(z) + \\cos^2(z) \\left[ 4 \\cos(x) \\cos(3x) \\sin(y) \\sin(2y) - 6 \\sin(x) \\sin(3x) \\cos(y) \\cos(2y) \\right] \\right)} $$", "id": "2477527"}, {"introduction": "数值格式的选择对于实现物理保真度至关重要，尤其是在流动中存在尖锐梯度时。在这个编程练习中，您将直接比较一种简单的中心差分格式和一种复杂的通量限制总变差递减（TVD）格式在模拟尖锐热锋面平流时的表现。这种动手比较将生动地展示伪振荡问题，以及现代高分辨率格式如何被设计来防止这些问题，从而确保模拟的物理真实性[@problem_id:2477612]。", "problem": "编写一个程序，对一维恒速热平流进行直接数值模拟 (DNS)，以比较在存在陡峭热锋面的情况下，中心格式与通量限制格式的行为。其控制守恒律为线性平流方程\n$$\n\\frac{\\partial T}{\\partial t} + a \\frac{\\partial T}{\\partial x} = 0,\n$$\n该方程作用于长度为 $L$ 的周期性域，其中 $x \\in [0,L)$，平流一个无量纲温度场 $T(x,t)$。平流速度 $a$ 是一个正常数，初始条件是一个黎曼问题（陡峭锋面），由下式给出\n$$\nT(x,0) = \\begin{cases}\nT_{\\mathrm{L}},  0 \\le x  x_0,\\\\\nT_{\\mathrm{R}},  x_0 \\le x  L,\n\\end{cases}\n$$\n其中 $T_{\\mathrm{L}}=1$, $T_{\\mathrm{R}}=0$, $L=1$, $x_0 = 0.5$, 且 $a=1$。模拟直至最终时间 $t_{\\mathrm{end}}=0.2$。\n\n使用有限体积半离散更新，\n$$\nT_i^{n+1} = T_i^n - \\frac{\\Delta t}{\\Delta x}\\left(F_{i+1/2}^n - F_{i-1/2}^n\\right),\n$$\n对于两种不同的数值通量：\n- 中心格式：对线性平流使用 Lax–Wendroff 通量，\n$$\nF_{i+1/2}^n = a\\left[\\frac{T_i^n + T_{i+1}^n}{2} - \\frac{a \\Delta t}{2 \\Delta x}\\left(T_{i+1}^n - T_i^n\\right)\\right].\n$$\n- 通量限制格式：使用守恒律的单调上游中心格式 (Monotonic Upstream-centered Scheme for Conservation Laws, MUSCL) 重构，并配合 van Leer 总变差递减 (Total Variation Diminishing, TVD) 限制器。对于正的 $a$，通过以下方式计算受限斜率\n$$\nr_i = \\frac{T_i - T_{i-1}}{T_{i+1} - T_i}, \\quad\n\\phi(r) = \\frac{r + |r|}{1 + |r|},\n$$\n约定如果分母为 $0$，则 $r=0$。将面 $i+\\tfrac{1}{2}$ 处的左状态重构为\n$$\nT_{i+1/2}^{L} = T_i + \\frac{1}{2}\\,\\phi(r_i)\\,(T_{i+1} - T_i),\n$$\n并取上风 Godunov 通量\n$$\nF_{i+1/2} = a\\,T_{i+1/2}^{L}.\n$$\n使用二阶强保稳定龙格-库塔 (Strong Stability Preserving Runge–Kutta, SSP-RK2) 方法推进此通量：\n$$\nT^{(1)} = T^n - \\frac{\\Delta t}{\\Delta x}\\nabla\\cdot F(T^n), \\quad\nT^{n+1} = \\frac{1}{2} T^n + \\frac{1}{2}\\left[T^{(1)} - \\frac{\\Delta t}{\\Delta x}\\nabla\\cdot F(T^{(1)})\\right].\n$$\n\n使用 $N$ 个均匀有限体积对域进行离散化，其中心位于 $x_i$，宽度为 $\\Delta x = L/N$。施加周期性边界条件。通过 Courant–Friedrichs–Lewy (CFL) 条件选择时间步长，Courant 数 $\\mathrm{CFL}=0.8$，即，\n$$\n\\Delta t = \\frac{\\mathrm{CFL}\\,\\Delta x}{a},\n$$\n并使用一个恒定的 $\\Delta t$。该 $\\Delta t$ 的设置方法是：先将达到 $t_{\\mathrm{end}}$ 所需的步数向上取整，然后重置 $\\Delta t = t_{\\mathrm{end}}/N_t$ 以精确达到 $t_{\\mathrm{end}}$。\n\n定义在时间 $t_{\\mathrm{end}}$ 时过冲的 $L_\\infty$ 范数为对物理边界 $[T_{\\min},T_{\\max}] = [0,1]$ 的最大违反量：\n$$\n\\| \\text{overshoot} \\|_\\infty = \\max\\left(0, \\max_i(T_i - T_{\\max}), \\max_i(T_{\\min} - T_i)\\right).\n$$\n该量是无量纲的。\n\n测试套件：\n- 使用 $N \\in \\{32, 64, 128, 256\\}$，以及 $L=1$, $a=1$, $x_0=0.5$, $T_{\\mathrm{L}}=1$, $T_{\\mathrm{R}}=0$, $\\mathrm{CFL}=0.8$, 和 $t_{\\mathrm{end}}=0.2$。\n- 对于每个 $N$，计算两个浮点数：在 $t_{\\mathrm{end}}$ 时，中心 Lax–Wendroff 格式的 $L_\\infty$ 过冲值和通量限制的 MUSCL–van Leer 格式的 $L_\\infty$ 过冲值。\n- 你的程序应生成单行输出，其中包含一个用方括号括起来的逗号分隔列表形式的结果，顺序如下\n$$\n[\\text{LW}(32), \\text{MUSCL}(32), \\text{LW}(64), \\text{MUSCL}(64), \\text{LW}(128), \\text{MUSCL}(128), \\text{LW}(256), \\text{MUSCL}(256)],\n$$\n其中每个条目都是一个四舍五入到六位小数的浮点数。不应打印任何其他文本。", "solution": "所呈现的问题是计算传热传质领域中一个有效且适定的数值练习。它要求实现和比较两种不同的数值格式，以求解作为输运现象基石的一维线性平流方程。任务是模拟一个陡峭热锋面（或称黎曼问题）的平流过程，并量化每种格式所产生的非物理振荡（过冲）。该问题具有科学依据，内部一致，并提供了所有参数以供完整且无歧义地实现。\n\n该系统的控制偏微分方程 (PDE) 是关于无量纲温度场 $T(x,t)$ 的线性平流方程：\n$$\n\\frac{\\partial T}{\\partial t} + a \\frac{\\partial T}{\\partial x} = 0\n$$\n其中 $a$ 是恒为正的平流速度。空间域为 $x \\in [0,L)$，具有周期性边界条件。初始条件是一个阶跃函数，由于其无限大的梯度，给数值格式带来了显著挑战。\n\n我们将使用有限体积法，它将域离散为 $N$ 个宽度为 $\\Delta x = L/N$ 的单元。每个单元 $i$ 中的温度，记为 $T_i$，代表该单元的平均值。该控制方程的半离散形式是关于每个单元平均值的常微分方程 (ODE)：\n$$\n\\frac{dT_i}{dt} = -\\frac{1}{\\Delta x}\\left(F_{i+1/2} - F_{i-1/2}\\right)\n$$\n在这里，$F_{i+1/2}$ 是 $T$ 穿过单元 $i$ 和单元 $i+1$ 之间界面的数值通量。问题的核心在于为两种不同的格式定义这个通量。\n\n**1. 中心格式：Lax–Wendroff**\n\nLax–Wendroff 格式是一种经典方法，在空间和时间上都具有二阶精度。它通过在时间上的泰勒级数展开中包含相应项来实现这一点。对于线性平流，这会产生一个使用特殊构造通量的单步时间更新。问题直接给出了这个通量：\n$$\nF_{i+1/2}^n = a\\left[\\frac{T_i^n + T_{i+1}^n}{2} - \\frac{a \\Delta t}{2 \\Delta x}\\left(T_{i+1}^n - T_i^n\\right)\\right]\n$$\n第一项 $a(T_i^n + T_{i+1}^n)/2$ 是一个简单的中心差分通量，它在空间上是二阶的，但已知是不稳定的。第二项与 Courant 数 $\\nu = a \\Delta t / \\Delta x$ 成正比，是一个数值耗散项，它稳定了格式并将时间精度提升到二阶。虽然对于光滑解是精确的，但 Lax–Wendroff 格式在陡峭梯度或间断附近会产生虚假的、非物理的振荡（吉布斯现象），我们预计会观察到显著的过冲。\n\n**2. 通量限制格式：带 van Leer 限制器的 MUSCL**\n\n为了克服像 Lax–Wendroff 这样的高阶线性格式的振荡行为，人们开发了非线性的总变差递减 (TVD) 格式。守恒律的单调上游中心格式 (MUSCL) 是一个杰出的例子。其关键思想是在每个单元内对解进行高阶重构，然后在间断附近“限制”这种重构的梯度以防止振荡。这个过程包括三个主要步骤：\n\n*   **重构**：在每个单元 $i$ 内，使用从相邻单元平均值导出的斜率，重构数据的分段线性表示。这种重构的质量决定了精度。\n*   **限制**：将重构的斜率乘以一个限制器函数 $\\phi(r)$，该函数依赖于连续梯度的比率 $r_i = (T_i - T_{i-1}) / (T_{i+1} - T_i)$。在高变化区域，限制器会减小斜率（从而将格式的阶数局部降至一阶），以防止新极值的形成。问题指定了 van Leer 限制器：\n    $$\n    \\phi(r) = \\frac{r + |r|}{1 + |r|}\n    $$\n    该限制器是光滑的，在流动的光滑区域提供二阶精度，同时保证单调性。界面 $i+1/2$ 左侧的重构温度值为：\n    $$\n    T_{i+1/2}^{L} = T_i + \\frac{1}{2}\\,\\phi(r_i)\\,(T_{i+1} - T_i)\n    $$\n*   **通量更新**：使用重构值计算界面处的通量。对于正的平流速度 $a  0$，信息从左向右流动，因此上风或 Godunov 通量就是：\n    $$\n    F_{i+1/2} = a\\,T_{i+1/2}^{L}\n    $$\n*   **时间积分**：为了保持 TVD 属性并实现二阶时间精度，需要一个合适的多步时间推进方法。问题指定了二阶强保稳定龙格-库塔 (SSP-RK2) 方法：\n    $$\n    \\begin{align*}\n    T^{(1)} = T^n - \\frac{\\Delta t}{\\Delta x}\\left( F(T^n)_{i+1/2} - F(T^n)_{i-1/2} \\right) \\\\\n    T^{n+1} = \\frac{1}{2} T^n + \\frac{1}{2}\\left[T^{(1)} - \\frac{\\Delta t}{\\Delta x}\\left( F(T^{(1)})_{i+1/2} - F(T^{(1)})_{i-1/2} \\right) \\right]\n    \\end{align*}\n    $$\n这种 MUSCL 重构、van Leer 限制和 SSP-RK2 积分的组合，旨在对平流锋面产生清晰、无振荡的解析。\n\n**实现与分析**\n\n模拟将在具有周期性边界条件的均匀网格上进行，这在计算上通过环绕数组索引来处理（例如，使用 `numpy.roll`）。初始条件是一个阶跃函数，通过计算每个有限体积上的单元平均值进行离散化，这比简单的逐点采样提供了更精确的表示。时间步长 $\\Delta t$ 由 Courant 数为 $0.8$ 的 Courant–Friedrichs–Lewy (CFL) 条件确定，并进行调整以确保模拟在 $t_{\\mathrm{end}}$ 精确结束。\n\n用于比较的主要指标是过冲的 $L_\\infty$ 范数，它测量数值解超出物理预期范围 $[T_{\\min}, T_{\\max}] = [0, 1]$ 的最大偏差。我们预期 Lax–Wendroff 格式会表现出显著的过冲，且随着网格加密而减小，而 MUSCL/van Leer 格式将几乎不显示过冲，从而展示其 TVD 属性。", "answer": "```python\nimport numpy as np\nimport math\n\ndef setup_grid_and_ic(N, L, x0, TL, TR):\n    \"\"\"\n    Sets up the grid and initial condition using cell-averaging.\n    \"\"\"\n    dx = L / N\n    # Cell centers\n    x = np.linspace(dx / 2, L - dx / 2, N)\n    \n    T0 = np.zeros(N)\n    \n    # Cell boundaries\n    x_faces = np.linspace(0, L, N + 1)\n    \n    for i in range(N):\n        x_left = x_faces[i]\n        x_right = x_faces[i+1]\n        \n        # Portion of the cell to the left of x0\n        overlap_left = max(0, min(x_right, x0) - x_left)\n        # Portion of the cell to the right of or at x0\n        overlap_right = max(0, x_right - max(x_left, x0))\n        \n        T0[i] = (overlap_left * TL + overlap_right * TR) / dx\n        \n    return x, dx, T0\n\ndef calculate_overshoot(T, T_min, T_max):\n    \"\"\"\n    Calculates the L-infinity norm of the overshoot.\n    \"\"\"\n    overshoot = np.max([0.0, np.max(T) - T_max, T_min - np.min(T)])\n    return overshoot\n\ndef run_lax_wendroff(T0, N, L, a, cfl, t_end):\n    \"\"\"\n    Solves the 1D linear advection equation using the Lax-Wendroff scheme.\n    \"\"\"\n    dx = L / N\n    \n    # Calculate stable time step\n    dt_cfl = cfl * dx / a\n    num_steps = math.ceil(t_end / dt_cfl)\n    dt = t_end / num_steps\n    \n    T = T0.copy()\n    nu = a * dt / dx # Courant number\n\n    for _ in range(num_steps):\n        T_ip1 = np.roll(T, -1)\n        \n        # Lax-Wendroff flux F_{i+1/2}\n        flux_face = a * (0.5 * (T + T_ip1) - 0.5 * nu * (T_ip1 - T))\n        \n        flux_face_im1 = np.roll(flux_face, 1)\n        \n        # Finite volume update\n        T = T - (dt / dx) * (flux_face - flux_face_im1)\n        \n    return T\n\ndef calculate_rhs_muscl(T, dx, a):\n    \"\"\"Calculates the right-hand-side for the MUSCL scheme.\"\"\"\n    # Periodic boundary conditions via numpy.roll\n    T_im1 = np.roll(T, 1)\n    T_ip1 = np.roll(T, -1)\n    \n    # Slope ratio r_i = (T_i - T_{i-1}) / (T_{i+1} - T_i)\n    numerator = T - T_im1\n    denominator = T_ip1 - T\n    \n    r = np.zeros_like(T)\n    # Avoid division by zero\n    mask = np.abs(denominator) > 1e-12\n    r[mask] = numerator[mask] / denominator[mask]\n    \n    # van Leer limiter: phi(r) = (r + |r|) / (1 + |r|)\n    phi = (r + np.abs(r)) / (1.0 + np.abs(r))\n    \n    # Reconstructed left state at face i+1/2\n    T_L_face = T + 0.5 * phi * (T_ip1 - T)\n    \n    # Godunov flux for a > 0\n    F_face = a * T_L_face\n    \n    # Flux at face i-1/2\n    F_face_im1 = np.roll(F_face, 1)\n    \n    # RHS = -1/dx * (F_{i+1/2} - F_{i-1/2})\n    rhs = -(F_face - F_face_im1) / dx\n    return rhs\n\ndef run_muscl_vanleer(T0, N, L, a, cfl, t_end):\n    \"\"\"\n    Solves the 1D linear advection equation using the MUSCL-vanLeer TVD scheme\n    with SSP-RK2 time integration.\n    \"\"\"\n    dx = L / N\n\n    # Calculate stable time step\n    dt_cfl = cfl * dx / a\n    num_steps = math.ceil(t_end / dt_cfl)\n    dt = t_end / num_steps\n\n    T = T0.copy()\n\n    for _ in range(num_steps):\n        # SSP-RK2 Stage 1\n        rhs1 = calculate_rhs_muscl(T, dx, a)\n        T1 = T + dt * rhs1\n        \n        # SSP-RK2 Stage 2\n        rhs2 = calculate_rhs_muscl(T1, dx, a)\n        T = 0.5 * T + 0.5 * (T1 + dt * rhs2)\n        \n    return T\n\ndef solve():\n    \"\"\"\n    Main solver function to run simulations and print results.\n    \"\"\"\n    # Problem parameters\n    L = 1.0\n    a = 1.0\n    x0 = 0.5\n    TL = 1.0\n    TR = 0.0\n    cfl = 0.8\n    t_end = 0.2\n    T_min, T_max = 0.0, 1.0\n\n    # Test cases for N\n    N_values = [32, 64, 128, 256]\n    \n    results = []\n\n    for N in N_values:\n        _x, dx, T0 = setup_grid_and_ic(N, L, x0, TL, TR)\n        \n        # Run Lax-Wendroff simulation\n        T_lw = run_lax_wendroff(T0, N, L, a, cfl, t_end)\n        overshoot_lw = calculate_overshoot(T_lw, T_min, T_max)\n        results.append(round(overshoot_lw, 6))\n        \n        # Run MUSCL-vanLeer simulation\n        T_muscl = run_muscl_vanleer(T0, N, L, a, cfl, t_end)\n        overshoot_muscl = calculate_overshoot(T_muscl, T_min, T_max)\n        results.append(round(overshoot_muscl, 6))\n\n    # Format and print the final output\n    print(f\"[{','.join(f'{r:.6f}' for r in results)}]\")\n\nsolve()\n```", "id": "2477612"}]}