{"hands_on_practices": [{"introduction": "在计算流体动力学（CFD）中，准确预测湍流边界层内的传热至关重要。这要求网格在近壁区域有足够的分辨率，特别是要解析粘性子层。这个练习 [@problem_id:2506403] 将让你亲手实践一项核心技能：计算第一个网格单元的高度，以满足特定的无量纲壁面距离 $y^+$ 目标。通过这个计算，你不仅能掌握网格设置的基本方法，还能深入理解网格分辨率如何直接影响传热预测（如努塞尔数 $Nu$）的准确性。", "problem": "需要使用剪切应力输运 (SST) $k$-$\\omega$ 模型，并采用积分到壁面的方法（无壁面函数），对标准条件下空气流经光滑等温平板的湍流强制对流进行模拟。为解析粘性底层，第一个单元中心的无量纲壁面法向距离目标值为 $y^+ \\approx 1$。测得壁面摩擦速度为 $u_{\\tau} = 0.45\\,\\mathrm{m/s}$，空气的运动粘度为 $\\nu = 1.6 \\times 10^{-5}\\,\\mathrm{m^2/s}$。利用壁面单位的基本定义，且不借助壁面函数，确定对应于 $y^+ = 1$ 所需的第一个单元中心高度 $y_1$（从壁面到第一个单元形心的距离）。将您的答案四舍五入至四位有效数字，并以米为单位表示。\n\n然后，从摩擦速度 $u_{\\tau} = \\sqrt{\\tau_w/\\rho}$、壁面单位坐标 $y^+ = y u_{\\tau}/\\nu$、努塞尔数 $Nu = h L_c/k$ 以及壁面热通量关系式 $q'' = h\\,(T_w - T_\\infty) = -k\\,\\left.\\frac{\\partial T}{\\partial y}\\right|_{w}$ 的定义出发，论证当第一个单元的壁面坐标 $y_1^+$ 偏离目标值 $y_1^+ \\approx 1$ 但仍处于粘性底层内（例如 $y_1^+ \\lesssim 5$）时，预测的局部努塞尔数 $Nu$ 对此偏差的敏感性。您的讨论应基于 SST $k$-$\\omega$ 模型下雷诺平均纳维-斯托克斯 (RANS) 能量方程的近壁面标度分析，并定性地建立 $Nu$ 的误差对 $y_1^+$ 在 1 附近微小扰动的主阶依赖关系。此讨论无需数值结果。\n\n最终答案仅提供 $y_1$ 的数值，四舍五入至四位有效数字，并以米为单位表示。", "solution": "首先对问题的科学性、完整性和客观性进行验证。\n\n**问题验证**\n\n**步骤1：提取已知条件**\n- 模型：剪切应力输运 (SST) $k$-$\\omega$ 模型，积分到壁面。\n- 目标无量纲壁面法向距离：$y^+ \\approx 1$。\n- 壁面摩擦速度：$u_{\\tau} = 0.45\\,\\mathrm{m/s}$。\n- 空气运动粘度：$\\nu = 1.6 \\times 10^{-5}\\,\\mathrm{m^2/s}$。\n- 定义：$u_{\\tau} = \\sqrt{\\tau_w/\\rho}$，$y^+ = y u_{\\tau}/\\nu$，$Nu = h L_c/k$，$q'' = h\\,(T_w - T_\\infty) = -k\\,\\left.\\frac{\\partial T}{\\partial y}\\right|_{w}$。\n- 任务1：确定当 $y^+ = 1$ 时第一个单元中心的高度 $y_1$。\n- 任务2：讨论在粘性底层内（$y_1^+ \\lesssim 5$）$y_1^+$ 偏离 1 时，预测的局部努塞尔数 $Nu$ 的敏感性。\n\n**步骤2：验证**\n该问题具有科学依据，提法恰当且客观。它基于计算流体动力学和传热学中关于近壁面湍流模型的基本原理。所提供的数据在物理上是一致的，并且足以进行所需的计算。问题的第二部分是定性讨论，是该领域的标准概念性问题，定义明确。问题没有矛盾、歧义或事实性错误。\n\n**结论**\n该问题被认定为有效。将提供解答。\n\n**第1部分：计算第一个单元高度 $y_1$**\n\n无量纲壁面法向距离 $y^+$ 定义为：\n$$y^+ = \\frac{y u_{\\tau}}{\\nu}$$\n其中 $y$ 是距离壁面的物理距离，$u_{\\tau}$ 是摩擦速度，$\\nu$ 是流体的运动粘度。我们需要找到第一个单元中心的高度，记为 $y_1$，使得其对应的无量纲距离为 $y^+ = 1$。\n\n重新整理 $y_1$ 的定义式，我们得到：\n$$y_1 = \\frac{y^{+} \\nu}{u_{\\tau}}$$\n\n我们已知的数值如下：\n- $y^+ = 1$（无量纲目标值）\n- $\\nu = 1.6 \\times 10^{-5}\\,\\mathrm{m^2/s}$\n- $u_{\\tau} = 0.45\\,\\mathrm{m/s}$\n\n将这些值代入 $y_1$ 的方程中：\n$$y_1 = \\frac{(1) \\times (1.6 \\times 10^{-5}\\,\\mathrm{m^2/s})}{0.45\\,\\mathrm{m/s}}$$\n$$y_1 = \\frac{1.6}{0.45} \\times 10^{-5}\\,\\mathrm{m}$$\n$$y_1 \\approx 3.5555... \\times 10^{-5}\\,\\mathrm{m}$$\n\n根据题目要求，将结果四舍五入至四位有效数字：\n$$y_1 \\approx 3.556 \\times 10^{-5}\\,\\mathrm{m}$$\n\n**第2部分：努塞尔数预测的敏感性**\n\n第二部分要求定性讨论当第一个网格点 $y_1$ 的位置保持在粘性底层内（即 $y_1^+ \\lesssim 5$）时，预测的局部努塞尔数 $Nu$ 对该位置的敏感性。\n\n局部努塞尔数定义为 $Nu = h L_c/k$，其中传热系数为 $h = q''_w / (T_w - T_\\infty)$。因此，$Nu$ 与壁面热通量 $q''_w$ 成正比。预测的 $Nu$ 的准确性因此直接取决于计算出的壁面热通量的准确性。\n\n壁面热通量由壁面处的傅里叶定律给出：\n$$q''_w = -k \\left. \\frac{\\partial T}{\\partial y} \\right|_{y=0}$$\n在以单元为中心的有限体积法中，该梯度通常使用一阶单边差分格式来近似：\n$$q''_{w, \\text{num}} = -k \\frac{T_1 - T_w}{y_1 - 0} = k \\frac{T_w - T_1}{y_1}$$\n其中 $T_1$ 是位于 $y=y_1$ 处的第一个单元中心的温度。\n\n为分析此近似的准确性，我们必须考察非常靠近壁面处的温度分布 $T(y)$ 的行为。对于具有恒定物性的稳态不可压缩流动，雷诺平均纳维-斯托克斯 (RANS) 能量方程为：\n$$\\frac{\\partial (U_j T)}{\\partial x_j} = \\frac{\\partial}{\\partial x_j} \\left( \\alpha \\frac{\\partial T}{\\partial x_j} - \\overline{u'_j T'} \\right) + S_T$$\n其中 $\\alpha = k/(\\rho c_p)$ 是热扩散率，$-\\overline{u'_j T'}$ 是湍流热通量。对于二维边界层，在非常靠近壁面处（$y \\to 0$），对流项可以忽略不计。方程简化为壁面法向上的分子扩散和湍流扩散之间的平衡：\n$$\\frac{d}{dy} \\left( \\alpha \\frac{dT}{dy} - \\overline{v'T'} \\right) \\approx 0$$\n这意味着总热通量 $q_{total} = -k \\frac{dT}{dy} + \\rho c_p \\overline{v'T'}$ 近似为常数，且等于壁面热通量 $q''_w$。\n\n在粘性底层（$y^+ \\lesssim 5$）内，湍流脉动受到粘性效应的强烈抑制。具体来说，由于连续性方程和无滑移条件，壁面法向速度脉动 $v'$ 必须满足 $v' \\propto y^2$，而在等温壁面附近的温度脉动尺度为 $T' \\propto y$。这导致湍流热通量的尺度为 $\\overline{v'T'} \\propto y^3$ 或 $y$ 的更高次幂。因此，对于非常小的 $y$，湍流热通量与分子热通量相比可以忽略不计。\n\n于是，粘性底层中的能量方程简化为：\n$$\\frac{d}{dy}\\left( k \\frac{dT}{dy} \\right) \\approx 0 \\quad \\implies \\quad -k \\frac{dT}{dy} \\approx \\text{constant} = q''_w$$\n这表明温度分布相对于 $y$ 近似是线性的：\n$$T(y) \\approx T_w - \\frac{q''_w}{k} y$$\n如果温度分布是完全线性的，那么有限差分近似 $q''_{w, \\text{num}} = k(T_w - T_1)/y_1$ 将是精确的，因为代入线性剖面可得 $T_1 = T_w - (q''_w/k)y_1$，从而 $q''_{w, \\text{num}} = k(T_w - (T_w - (q''_w/k)y_1))/y_1 = q''_w$。\n\n数值近似的误差源于真实温度分布与理想直线的偏离。为找到主阶误差，我们使用 $T(y)$ 在 $y=0$ 点的泰勒级数展开：\n$$T(y) = T(0) + T'(0)y + \\frac{T''(0)}{2}y^2 + \\frac{T'''(0)}{6}y^3 + \\mathcal{O}(y^4)$$\n数值近似的梯度为 $\\frac{T(y_1)-T(0)}{y_1} = T'(0) + \\frac{T''(0)}{2}y_1 + \\frac{T'''(0)}{6}y_1^2 + \\mathcal{O}(y_1^3)$。\n从简化的能量方程可知，$\\frac{d^2 T}{dy^2} = \\frac{1}{\\alpha} \\frac{d}{dy}(\\overline{v'T'})$。由于 $\\overline{v'T'} \\propto y^3$，其导数 $\\frac{d}{dy}(\\overline{v'T'})$ 的尺度为 $y^2$。这意味着 $T''(y) \\propto y^2$，且重要的是，$T''(0)=0$。\n因此，泰勒级数为 $T(y) = T_w + T'(0)y + \\mathcal{O}(y^3)$。对包含 $\\overline{v'T'} \\propto y^3$ 项的能量平衡进行更仔细的分析，实际上会得出 $T'''(0)=0$ 且主导的非线性项为 $\\mathcal{O}(y^4)$。我们基于泰勒级数本身假设更一般的情况。当 $T''(0)=0$ 时，梯度计算的误差为：\n$$\\text{误差} = \\left(\\frac{T(y_1)-T_w}{y_1}\\right) - T'(0) = \\frac{T'''(0)}{6}y_1^2 + \\mathcal{O}(y_1^3)$$\n因此，计算出的壁面热通量 $q''_{w, \\text{num}}$ 的误差是关于第一个单元高度 $y_1$ 的二阶误差。\n$$\\text{Error}(q''_w) \\propto y_1^2$$\n用壁面单位表示，努塞尔数预测的相对误差与第一个单元中心的无量纲壁面距离的平方成比例：\n$$\\frac{\\Delta Nu}{Nu} \\propto (y_1^+)^2$$\n因为误差取决于 $(y_1^+)$ 的平方，所以对于 $y_1^+ \\lesssim 5$ 的值，误差仍然非常小。例如，将 $y_1^+$ 从 1 增加到 2（两者都远在粘性底层内）会使离散误差增加四倍，但绝对误差本身与一个小的平方量成正比，因此仍然很小。这表明，只要第一个网格点保持在粘性底层内，预测的传热对该点的精确位置相对不敏感。$y^+ \\approx 1$ 的严格要求通常对于精确解析速度场和湍流量（$k$ 和 $\\omega$）更为关键，因为它们的剖面在更靠近壁面的地方表现出更强的非线性。", "answer": "$$\\boxed{3.556 \\times 10^{-5}}$$", "id": "2506403"}, {"introduction": "许多工程和科学问题涉及具有不同材料属性（如导热系数）的复合区域。在这些材料界面上，数值离散格式的正确性对解的精度和物理真实性有决定性影响。这个练习 [@problem_id:2506397] 深入探讨了有限体积法的数值核心，揭示了为何简单的算术平均插值会在界面处导致非物理解，并推导了保证通量守恒的正确方法。掌握这一原理对于为多物理场问题创建可靠且精确的网格至关重要。", "problem": "考虑在位于 $x=0$ 处的材料界面上的一维稳态热传导问题，无内部热源。当 $x<0$ 时，热导率为 $k_1$；当 $x>0$ 时，热导率为 $k_2$。$k_1$ 和 $k_2$ 均为正常数。在有限体积法 (FVM) 离散化中，两个相邻的有限体积跨越该界面，其单元中心分别位于 $x=-\\delta_W$ 和 $x=+\\delta_E$，其中 $\\delta_W>0$ 且 $\\delta_E>0$。设相应的单元中心未知量为 $T_W$ 和 $T_E$，它们近似表示这些位置的温度场。假设横截面积恒定，且生成的网格使得界面与一个控制体表面重合。在网格无关性研究中，可以通过在材料界面附近进行网格加密，在保持 $\\delta_W$ 和 $\\delta_E$ 比率固定的同时对其进行细化。\n\n仅使用傅里叶定律和能量守恒，推导一个用于计算界面单位面积导热通量 $q_f$ 的守恒离散表达式。该表达式需在 $x=0$ 处满足法向热通量连续性，并且仅使用数据 $\\{T_W, T_E, \\delta_W, \\delta_E, k_1, k_2\\}$。然后，假设使用一种非守恒的替代方法，其中界面热导率取为算术平均值 $k_a=(k_1+k_2)/2$，并在跨越 $-\\delta_W$ 到 $+\\delta_E$ 的模板上应用中心差分，从而得到近似通量 $q_a$。\n\n将算术平均近似相对于守恒界面通量的相对通量误差 $\\varepsilon$ 定义为 $\\varepsilon = q_a/q_f - 1$。请提供一个仅用 $k_1$、$k_2$、$\\delta_W$ 和 $\\delta_E$ 表示的 $\\varepsilon$ 的闭式解析表达式。你的最终答案必须是这个单一的表达式。无需进行数值评估。如果你认为有帮助，可以评论其对界面附近网格细化的影响，但最终报告的答案必须是 $\\varepsilon$ 的表达式。", "solution": "问题陈述已经过严格验证，并被确定为有效。它在科学上基于传热学和数值分析的原理，是适定的、客观的，并包含获得唯一解所需的所有必要信息。我们可以继续。\n\n目标是推导材料界面处热通量的非守恒与守恒有限体积近似之间的相对误差 $\\varepsilon$ 的表达式。\n\n首先，我们推导在 $x=0$ 位置处单位面积界面热通量 $q_f$ 的守恒表达式。该推导的基础是强制热通量连续，这是无源一维稳态热传导中能量守恒的直接推论。设 $T_f$ 为界面表面（$x=0$）处的温度。\n\n将傅里叶定律 $-k \\frac{dT}{dx}$ 应用于与界面相邻的两个半控制体，我们得到两个通量表达式。\n对于区间 $x \\in [-\\delta_W, 0]$，通量近似为：\n$$\nq_f = -k_1 \\frac{T_f - T_W}{0 - (-\\delta_W)} = k_1 \\frac{T_W - T_f}{\\delta_W}\n$$\n对于区间 $x \\in [0, \\delta_E]$，通量近似为：\n$$\nq_f = -k_2 \\frac{T_E - T_f}{\\delta_E - 0} = k_2 \\frac{T_f - T_E}{\\delta_E}\n$$\n对于守恒格式，这两个通量表达式必须相等。这使我们能够求解未知的界面温度 $T_f$：\n$$\nk_1 \\frac{T_W - T_f}{\\delta_W} = k_2 \\frac{T_f - T_E}{\\delta_E}\n$$\n重新整理各项以求解 $T_f$：\n$$\n\\frac{k_1}{\\delta_W} T_W - \\frac{k_1}{\\delta_W} T_f = \\frac{k_2}{\\delta_E} T_f - \\frac{k_2}{\\delta_E} T_E\n$$\n$$\nT_f \\left( \\frac{k_1}{\\delta_W} + \\frac{k_2}{\\delta_E} \\right) = \\frac{k_1}{\\delta_W} T_W + \\frac{k_2}{\\delta_E} T_E\n$$\n$$\nT_f = \\frac{\\frac{k_1}{\\delta_W} T_W + \\frac{k_2}{\\delta_E} T_E}{\\frac{k_1}{\\delta_W} + \\frac{k_2}{\\delta_E}}\n$$\n这个 $T_f$ 的表达式是节点温度 $T_W$ 和 $T_E$ 的加权平均值，其中权重是半单元的热导。现在，我们将其代入其中一个通量表达式中。使用第一个：\n$$\nq_f = \\frac{k_1}{\\delta_W} (T_W - T_f) = \\frac{k_1}{\\delta_W} \\left( T_W - \\frac{\\frac{k_1}{\\delta_W} T_W + \\frac{k_2}{\\delta_E} T_E}{\\frac{k_1}{\\delta_W} + \\frac{k_2}{\\delta_E}} \\right)\n$$\n为简化，将括号内的项通分：\n$$\nq_f = \\frac{k_1}{\\delta_W} \\left( \\frac{T_W \\left( \\frac{k_1}{\\delta_W} + \\frac{k_2}{\\delta_E} \\right) - \\left( \\frac{k_1}{\\delta_W} T_W + \\frac{k_2}{\\delta_E} T_E \\right)}{\\frac{k_1}{\\delta_W} + \\frac{k_2}{\\delta_E}} \\right)\n$$\n$$\nq_f = \\frac{k_1}{\\delta_W} \\left( \\frac{\\frac{k_1 T_W}{\\delta_W} + \\frac{k_2 T_W}{\\delta_E} - \\frac{k_1 T_W}{\\delta_W} - \\frac{k_2 T_E}{\\delta_E}}{\\frac{k_1 \\delta_E + k_2 \\delta_W}{\\delta_W \\delta_E}} \\right) = \\frac{k_1}{\\delta_W} \\left( \\frac{\\frac{k_2}{\\delta_E}(T_W - T_E)}{\\frac{k_1 \\delta_E + k_2 \\delta_W}{\\delta_W \\delta_E}} \\right)\n$$\n$$\nq_f = \\frac{\\frac{k_1 k_2}{\\delta_W \\delta_E}(T_W - T_E)}{\\frac{k_1 \\delta_E + k_2 \\delta_W}{\\delta_W \\delta_E}} = \\frac{k_1 k_2}{k_1 \\delta_E + k_2 \\delta_W} (T_W - T_E)\n$$\n通过将分母识别为串联热阻之和 $R = \\frac{\\delta}{k}$，可以将其重写为更具物理直观性的形式：\n$$\nq_f = \\frac{T_W - T_E}{\\frac{\\delta_W}{k_1} + \\frac{\\delta_E}{k_2}}\n$$\n这是界面通量的正确、守恒的表达式，它等效于对界面热导率使用调和平均。\n\n接下来，我们构建非守恒替代通量 $q_a$。它是通过使用热导率的算术平均值 $k_a = \\frac{k_1+k_2}{2}$，并在宽度为 $\\delta_W + \\delta_E$ 的整个模板上应用标准中心差分近似来定义的：\n$$\nq_a = -k_a \\frac{T_E - T_W}{(\\delta_E) - (-\\delta_W)} = -\\left(\\frac{k_1+k_2}{2}\\right) \\frac{T_E - T_W}{\\delta_W + \\delta_E}\n$$\n$$\nq_a = \\frac{k_1+k_2}{2(\\delta_W + \\delta_E)} (T_W - T_E)\n$$\n现在，我们计算相对通量误差 $\\varepsilon$，定义为 $\\varepsilon = \\frac{q_a}{q_f} - 1$。我们首先求出比率 $\\frac{q_a}{q_f}$：\n$$\n\\frac{q_a}{q_f} = \\frac{\\frac{k_1+k_2}{2(\\delta_W + \\delta_E)} (T_W - T_E)}{\\frac{1}{\\frac{\\delta_W}{k_1} + \\frac{\\delta_E}{k_2}} (T_W - T_E)} = \\frac{k_1+k_2}{2(\\delta_W + \\delta_E)} \\left( \\frac{\\delta_W}{k_1} + \\frac{\\delta_E}{k_2} \\right)\n$$\n对温度 $(T_W - T_E)$ 的依赖性被正确地消除了。现在，我们进行代数简化：\n$$\n\\frac{q_a}{q_f} = \\frac{k_1+k_2}{2(\\delta_W + \\delta_E)} \\left( \\frac{k_2 \\delta_W + k_1 \\delta_E}{k_1 k_2} \\right) = \\frac{(k_1+k_2)(k_2 \\delta_W + k_1 \\delta_E)}{2 k_1 k_2 (\\delta_W + \\delta_E)}\n$$\n将此比率代入 $\\varepsilon$ 的定义中：\n$$\n\\varepsilon = \\frac{(k_1+k_2)(k_2 \\delta_W + k_1 \\delta_E)}{2 k_1 k_2 (\\delta_W + \\delta_E)} - 1\n$$\n将各项合并到一个公分母上：\n$$\n\\varepsilon = \\frac{(k_1+k_2)(k_2 \\delta_W + k_1 \\delta_E) - 2 k_1 k_2 (\\delta_W + \\delta_E)}{2 k_1 k_2 (\\delta_W + \\delta_E)}\n$$\n展开分子：\n$$\n\\text{Numerator} = (k_1 k_2 \\delta_W + k_1^2 \\delta_E + k_2^2 \\delta_W + k_1 k_2 \\delta_E) - (2 k_1 k_2 \\delta_W + 2 k_1 k_2 \\delta_E)\n$$\n按 $\\delta_W$ 和 $\\delta_E$ 对各项进行分组：\n$$\n\\text{Numerator} = \\delta_W (k_1 k_2 + k_2^2 - 2 k_1 k_2) + \\delta_E (k_1^2 + k_1 k_2 - 2 k_1 k_2)\n$$\n$$\n\\text{Numerator} = \\delta_W (k_2^2 - k_1 k_2) + \\delta_E (k_1^2 - k_1 k_2)\n$$\n对各项进行因式分解：\n$$\n\\text{Numerator} = k_2 \\delta_W (k_2 - k_1) + k_1 \\delta_E (k_1 - k_2)\n$$\n提取公因式 $(k_1 - k_2)$：\n$$\n\\text{Numerator} = -k_2 \\delta_W (k_1 - k_2) + k_1 \\delta_E (k_1 - k_2) = (k_1 - k_2)(k_1 \\delta_E - k_2 \\delta_W)\n$$\n将此结果代回 $\\varepsilon$ 的表达式中，得到最终的解析形式：\n$$\n\\varepsilon = \\frac{(k_1 - k_2)(k_1 \\delta_E - k_2 \\delta_W)}{2 k_1 k_2 (\\delta_W + \\delta_E)}\n$$\n值得注意的是，此误差不依赖于绝对网格尺寸，而是依赖于单元尺寸比 $\\delta_W / \\delta_E$。如果在保持该比率不变的情况下细化网格，由非守恒算术平均引起的误差 $\\varepsilon$ 不会消失。这表明这种格式是不一致的。仅当 $k_1 = k_2$（均匀介质）时，或者在非平凡的情况下，当网格构建满足 $k_1 \\delta_E = k_2 \\delta_W$（即 $\\frac{\\delta_W}{\\delta_E} = \\frac{k_1}{k_2}$）时，误差才为零。这种特定的网格间距对于这个简单问题可以消除误差，但不是一个普遍适用的解决方案。对于任何网格配置，守恒的调和平均法都是鲁棒且正确的。", "answer": "$$ \\boxed{ \\frac{(k_1 - k_2)(k_1 \\delta_E - k_2 \\delta_W)}{2 k_1 k_2 (\\delta_W + \\delta_E)} } $$", "id": "2506397"}, {"introduction": "网格独立性研究的最终目标是验证数值解是否随着网格的细化而收敛于真实的物理精确解。制造解方法（Method of Manufactured Solutions, MMS）是进行代码验证和检验收敛阶数的一种严谨而强大的技术。这个实践练习 [@problem_id:2506363] 将指导你完成一个完整的验证流程：从实现一个求解器，到系统地进行网格和时间步长加密研究，再到分析结果以确认其是否达到理论收敛精度。这项练习综合了前面所学的概念，为你提供了一个进行严谨网格收敛性分析的完整框架。", "problem": "您将通过人为解法（MMS）来验证一个一维瞬态热传导求解器的空间和时间收敛阶。考虑在单位区间上的热方程，其边界条件为齐次 Neumann 边界条件，\n$$\n\\frac{\\partial T}{\\partial t}(x,t) \\;=\\; \\alpha \\,\\frac{\\partial^2 T}{\\partial x^2}(x,t),\\quad x\\in[0,1],\\; t>0,\\quad \\frac{\\partial T}{\\partial x}(0,t)=0,\\;\\frac{\\partial T}{\\partial x}(1,t)=0,\n$$\n其人为精确解为\n$$\nT(x,t)\\;=\\;\\cos(\\pi x)\\,\\exp\\!\\big(-\\pi^2 \\alpha t\\big),\n$$\n初始条件为\n$$\nT(x,0)\\;=\\;\\cos(\\pi x).\n$$\n此处 $\\alpha$ 是热扩散系数。在本问题中，取 $\\alpha=1$（单位为 $\\mathrm{m^2/s}$），并使用 $T_f=10^{-1}$（单位为 $\\mathrm{s}$）作为最终时间。将 $T$ 视为无量纲温度，从而使误差范数和估计阶数也为无量纲。\n\n使用包含边界在内的 $N$ 个点的均匀网格对空间域 $[0,1]$ 进行离散化，因此网格间距为 $h=1/(N-1)$。对内部点，使用二阶中心差分公式来近似二阶导数。通过镜像虚点（即在 $x=0$ 处 $T_{-1}=T_{1}$，在 $x=1$ 处 $T_{N}=T_{N-2}$）来施加齐次 Neumann 边界条件，这将产生一个在边界处具有修正的次对角线元素的三对角离散拉普拉斯算子。使用 Crank–Nicolson (CN) 方法进行时间推进（Crank–Nicolson (CN) 是一种二阶、无条件稳定、隐式梯形时间积分器）。在每个时间步求解所产生的三对角线性系统。\n\n使用离散 $L^2$ 范数计算在 $t=T_f$ 时与精确解的误差\n$$\n\\|e\\|_{2,h}\\;=\\;\\Big(h\\sum_{i=0}^{N-1} \\big(T_i^{\\text{num}}-T(x_i,T_f)\\big)^2\\Big)^{1/2},\n$$\n其中 $x_i=i\\,h$。\n\n您必须通过对数-对数数据的最小二乘斜率来估计观测收敛阶。给定分辨率参数 $r_j$（$h$ 或 $\\Delta t$）和相应的误差 $E_j$，拟合\n$$\n\\log E_j \\;\\approx\\; c + p\\,\\log r_j,\n$$\n并将拟合斜率 $p$ 作为观测阶数报告。\n\n实现以下测试套件（所有运行均使用 $\\alpha=1$ 和 $T_f=10^{-1}\\,\\mathrm{s}$）：\n\n- 空间阶研究（保持时间误差可忽略不计）：使用 $\\Delta t = 10^{-3}\\,\\mathrm{s}$ 和 $N\\in\\{33,65,129,257\\}$。对于每个 $N$，计算在 $t=T_f$ 时的误差。拟合 $\\log E$ 与 $\\log h$ 的关系，以获得观测空间阶 $p_s$。同时检查空间加密误差的单调性，即验证对于连续的加密，$E(h_{j+1})<E(h_j)$ 是否成立；报告一个布尔值。\n- 时间阶研究（保持空间误差可忽略不计）：使用 $N=1025$ 和 $\\Delta t\\in\\{10^{-2},5\\cdot 10^{-3},2.5\\cdot 10^{-3},1.25\\cdot 10^{-3}\\}\\,\\mathrm{s}$。对于每个 $\\Delta t$，计算在 $t=T_f$ 时的误差。拟合 $\\log E$ 与 $\\log \\Delta t$ 的关系，以获得观测时间阶 $q_t$。\n- 边界条件检查（齐次 Neumann）：使用 $N=65$ 和 $\\Delta t=10^{-3}\\,\\mathrm{s}$，计算在 $t=T_f$ 时的最终数值解，并评估在 $x=0$ 处的单边离散梯度 $\\big| (T_1-T_0)/h \\big|$ 以及在 $x=1$ 处的单边离散梯度 $\\big| (T_{N-1}-T_{N-2})/h \\big|$。验证两者均小于 $10^{-3}$；报告一个布尔值。\n\n您的程序必须产生单行输出，其中包含一个用方括号括起来的逗号分隔列表，顺序如下：\n- $p_s$ 四舍五入到三位小数，\n- $q_t$ 四舍五入到三位小数，\n- 一个指示 $|p_s-2|\\le 2\\times 10^{-1}$ 是否成立的布尔值，\n- 一个指示 $|q_t-2|\\le 2\\times 10^{-1}$ 是否成立的布尔值，\n- 一个指示两个边界梯度是否都小于 $10^{-3}$ 的布尔值，\n- 一个指示空间误差是否随加密而严格减小的布尔值。\n\n因此，精确的输出格式为\n$$\n[\\text{p\\_s\\_rounded},\\text{q\\_t\\_rounded},\\text{bool\\_p},\\text{bool\\_q},\\text{bool\\_bc},\\text{bool\\_mono}],\n$$\n例如，$[2.000,2.001,True,True,True,True]$。所有浮点数量都是无量纲的。角度（如有）必须以弧度为单位；时间必须以秒为单位。不得打印百分比；任何比率必须是小数或分数。", "solution": "该问题要求使用人为解法（MMS）来验证一个一维瞬态热方程的数值求解器。控制方程、定义域和边界条件被指定如下：\n$$\n\\frac{\\partial T}{\\partial t}(x,t) \\;=\\; \\alpha \\,\\frac{\\partial^2 T}{\\partial x^2}(x,t), \\quad x \\in [0, 1], \\quad t > 0\n$$\n$$\n\\frac{\\partial T}{\\partial x}(0,t)=0,\\quad \\frac{\\partial T}{\\partial x}(1,t)=0\n$$\n提供了一个人为解。必须验证该函数是否满足齐次偏微分方程（PDE）、边界条件，并提供初始条件。该解是：\n$$\nT_{\\text{exact}}(x,t) \\;=\\; \\cos(\\pi x)\\,\\exp(-\\pi^2 \\alpha t)\n$$\n检验 PDE：$\\frac{\\partial T}{\\partial t} = -\\pi^2 \\alpha \\cos(\\pi x)\\exp(-\\pi^2 \\alpha t) = -\\pi^2 \\alpha T_{\\text{exact}}$ 且 $\\frac{\\partial^2 T}{\\partial x^2} = -\\pi^2 \\cos(\\pi x)\\exp(-\\pi^2 \\alpha t) = -\\pi^2 T_{\\text{exact}}$。因此，$\\frac{\\partial T}{\\partial t} = \\alpha \\frac{\\partial^2 T}{\\partial x^2}$ 成立。\n检验边界条件：$\\frac{\\partial T}{\\partial x} = -\\pi \\sin(\\pi x) \\exp(-\\pi^2 \\alpha t)$。在 $x=0$ 处，$\\sin(0)=0$。在 $x=1$ 处，$\\sin(\\pi)=0$。两个边界条件均得到满足。\n初始条件由该解在 $t=0$ 时导出：\n$$\nT(x,0)\\;=\\;\\cos(\\pi x)\n$$\n给定的常数为 $\\alpha=1 \\, \\mathrm{m^2/s}$ 且最终时间为 $T_f=0.1 \\, \\mathrm{s}$。问题陈述要求将温度 $T$ 视为无量纲量。\n\n该数值格式涉及用于空间离散化的有限差分法和用于时间积分的 Crank-Nicolson 方法。\n\n**1. 空间离散化**\n\n空间域 $[0,1]$ 使用 $N$ 个均匀分布的点 $x_i = i h$（$i=0, 1, \\dots, N-1$）进行离散化，网格间距为 $h=1/(N-1)$。对于内部点 $i=1, \\dots, N-2$，二阶空间导数使用二阶中心差分公式近似：\n$$\n\\frac{\\partial^2 T}{\\partial x^2}\\bigg|_{x_i} \\approx \\frac{T_{i-1} - 2T_i + T_{i+1}}{h^2}\n$$\n齐次 Neumann 边界条件通过涉及镜像虚点的二阶精确近似来实现。在 $x=0$ 处，中心差分 $\\frac{T_1 - T_{-1}}{2h}=0$ 意味着虚点值为 $T_{-1}=T_1$。将此代入 $i=0$ 处的中心差分公式可得：\n$$\n\\frac{\\partial^2 T}{\\partial x^2}\\bigg|_{x_0} \\approx \\frac{T_1 - 2T_0 + T_{-1}}{h^2} = \\frac{2T_1 - 2T_0}{h^2}\n$$\n类似地，在 $x=1$ 处，条件 $\\frac{T_N - T_{N-2}}{2h}=0$ 给出 $T_N=T_{N-2}$。在 $i=N-1$ 处：\n$$\n\\frac{\\partial^2 T}{\\partial x^2}\\bigg|_{x_{N-1}} \\approx \\frac{T_N - 2T_{N-1} + T_{N-2}}{h^2} = \\frac{2T_{N-2} - 2T_{N-1}}{h^2}\n$$\n这导致了一个半离散常微分方程组：\n$$\n\\frac{d\\vec{T}}{dt} = \\frac{\\alpha}{h^2} A \\vec{T}\n$$\n其中 $\\vec{T} = [T_0, T_1, \\dots, T_{N-1}]^T$ 是网格点上温度的向量，而 $A$ 是 $N \\times N$ 的离散拉普拉斯矩阵：\n$$\nA = \\begin{pmatrix}\n-2 & 2 & 0 & \\dots & 0 \\\\\n1 & -2 & 1 & \\ddots & \\vdots \\\\\n0 & \\ddots & \\ddots & \\ddots & 0 \\\\\n\\vdots & \\ddots & 1 & -2 & 1 \\\\\n0 & \\dots & 0 & 2 & -2\n\\end{pmatrix}\n$$\n\n**2. 时间离散化**\n\nCrank-Nicolson 方法，一种隐式梯形法则，被应用于该半离散系统。对于一个时间步长 $\\Delta t$，其格式为：\n$$\n\\frac{\\vec{T}^{n+1} - \\vec{T}^n}{\\Delta t} = \\frac{1}{2} \\left( \\frac{\\alpha}{h^2} A \\vec{T}^{n+1} + \\frac{\\alpha}{h^2} A \\vec{T}^n \\right)\n$$\n其中 $\\vec{T}^n$ 表示在时间 $t_n = n \\Delta t$ 的解。重新整理各项以求解未知的 $\\vec{T}^{n+1}$：\n$$\n\\left(I - \\frac{\\alpha \\Delta t}{2h^2} A\\right) \\vec{T}^{n+1} = \\left(I + \\frac{\\alpha \\Delta t}{2h^2} A\\right) \\vec{T}^n\n$$\n令无量纲参数为 $\\lambda = \\alpha \\Delta t / h^2$。方程变为：\n$$\n\\left(I - \\frac{\\lambda}{2} A\\right) \\vec{T}^{n+1} = \\left(I + \\frac{\\lambda}{2} A\\right) \\vec{T}^n\n$$\n在每个时间步，这构成一个三对角线性系统，可使用带状矩阵求解器高效求解。\n\n**3. 实现与验证测试**\n\n基于上述方法实现一个求解器。\n1.  使用初始条件 $T(x,0) = \\cos(\\pi x)$ 初始化温度场 $\\vec{T}^0$。\n2.  迭代 $N_t = \\text{round}(T_f/\\Delta t)$ 个时间步。在每一步中，我们求解线性系统以得到 $\\vec{T}^{n+1}$。\n3.  在最后一个时间步之后，计算与 $t=T_f$ 时精确解的离散 $L^2$ 误差范数：\n    $$\n    \\|e\\|_{2,h} = \\left(h \\sum_{i=0}^{N-1} (T_i^{\\text{num}} - T_{\\text{exact}}(x_i, T_f))^2\\right)^{1/2}\n    $$\n收敛阶通过对误差的对数与分辨率参数（$h$ 或 $\\Delta t$）的对数进行线性最小二乘拟合来估计。拟合线的斜率 $p$ 即为观测阶数。\n\n执行所需的测试：\n\n- **空间收敛性研究**：将时间步长固定为 $\\Delta t = 10^{-3} \\, \\mathrm{s}$，以确保时间离散误差可忽略不计。网格点数 $N$ 遍历 $\\{33, 65, 129, 257\\}$，对应于递减的网格间距 $h$。$\\log(\\|e\\|_{2,h})$ 相对于 $\\log(h)$ 的斜率得到空间阶 $p_s$。对于二阶格式，预期值为 $p_s \\approx 2$。误差的单调性得到验证。\n\n- **时间收敛性研究**：将网格点数固定为 $N=1025$，以确保空间离散误差可忽略不计。时间步长 $\\Delta t$ 遍历 $\\{10^{-2}, 5 \\cdot 10^{-3}, 2.5 \\cdot 10^{-3}, 1.25 \\cdot 10^{-3}\\} \\, \\mathrm{s}$。$\\log(\\|e\\|_{2,h})$ 相对于 $\\log(\\Delta t)$ 的斜率得到时间阶 $q_t$。对于二阶 Crank-Nicolson 方法，预期值为 $q_t \\approx 2$。\n\n- **边界条件检查**：对于 $N=65$ 和 $\\Delta t=10^{-3} \\, \\mathrm{s}$ 的一次运行，计算在 $t=T_f$ 时的数值梯度 $|(T_1-T_0)/h|$ 和 $|(T_{N-1}-T_{N-2})/h|$，并与 $10^{-3}$ 的容差进行比较检查。\n\n最后，将计算出的阶数 $p_s$ 和 $q_t$ 与理论值 $2$ 在 $0.2$ 的容差范围内进行比较检查，并按要求格式化所有结果。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.linalg import solve_banded\n\ndef solve():\n    \"\"\"\n    Solves the 1D transient heat equation to verify spatial and temporal\n    convergence orders using the Method of Manufactured Solutions.\n    \"\"\"\n    # Global parameters from the problem statement\n    alpha = 1.0\n    Tf = 0.1\n\n    def get_exact_solution(x, t, alpha_val):\n        \"\"\"Computes the manufactured exact solution.\"\"\"\n        return np.cos(np.pi * x) * np.exp(-np.pi**2 * alpha_val * t)\n\n    def run_solver(N, dt):\n        \"\"\"\n        Core PDE solver for given spatial (N) and temporal (dt) resolution.\n        \n        Args:\n            N (int): Number of grid points.\n            dt (float): Time step size.\n            \n        Returns:\n            numpy.ndarray: The numerical solution T(x, Tf) at the final time.\n        \"\"\"\n        h = 1.0 / (N - 1)\n        x = np.linspace(0.0, 1.0, N)\n        \n        # Dimensionless parameter for the CN scheme\n        lam = alpha * dt / h**2\n        \n        # --- Set up Crank-Nicolson matrices ---\n        # The LHS matrix M_lhs = (I - (lambda/2) * A) is prepared in the\n        # banded format required by scipy.linalg.solve_banded.\n        # For a tridiagonal matrix, the banded format is a 3xN array.\n        M_lhs_banded = np.zeros((3, N))\n        \n        # Main diagonal of M_lhs\n        M_lhs_banded[1, :] = 1.0 + lam\n        \n        # Super-diagonal of M_lhs\n        super_diag_lhs = np.full(N - 1, -lam / 2.0)\n        super_diag_lhs[0] = -lam  # Modified entry for the Neumann BC at x=0\n        M_lhs_banded[0, 1:] = super_diag_lhs\n        \n        # Sub-diagonal of M_lhs\n        sub_diag_lhs = np.full(N - 1, -lam / 2.0)\n        sub_diag_lhs[-1] = -lam # Modified entry for the Neumann BC at x=1\n        M_lhs_banded[2, :-1] = sub_diag_lhs\n        \n        # --- Initial condition ---\n        T = get_exact_solution(x, 0.0, alpha)\n\n        # --- Time-stepping loop ---\n        num_steps = int(round(Tf / dt))\n        for _ in range(num_steps):\n            # Build RHS vector: b = (I + (lambda/2) * A) * T\n            # This is done efficiently without forming the full matrix A.\n            v = np.zeros(N)\n            # Interior points\n            v[1:-1] = T[:-2] - 2 * T[1:-1] + T[2:]\n            # Boundary points (enforcing Neumann BCs)\n            v[0] = 2 * T[1] - 2 * T[0]\n            v[-1] = 2 * T[-2] - 2 * T[-1]\n\n            rhs_vec = T + (lam / 2.0) * v\n            \n            # Solve the tridiagonal system for the next time step\n            T = solve_banded((1, 1), M_lhs_banded, rhs_vec)\n            \n        return T\n\n    # --- 1. Spatial order study ---\n    dt_spatial = 1e-3\n    N_vals_spatial = np.array([33, 65, 129, 257])\n    h_vals_spatial = 1.0 / (N_vals_spatial - 1)\n    errors_spatial = []\n\n    for N_s in N_vals_spatial:\n        T_num = run_solver(N_s, dt_spatial)\n        h_s = 1.0 / (N_s - 1)\n        x_s = np.linspace(0.0, 1.0, N_s)\n        T_exact = get_exact_solution(x_s, Tf, alpha)\n        error = np.sqrt(h_s * np.sum((T_num - T_exact)**2))\n        errors_spatial.append(error)\n\n    # Fit for spatial order ps using least-squares on log-log data\n    log_h = np.log(h_vals_spatial)\n    log_E_s = np.log(errors_spatial)\n    ps, _ = np.polyfit(log_h, log_E_s, 1)\n\n    # Check for monotonic error decrease with spatial refinement\n    bool_mono = all(np.diff(errors_spatial) < 0)\n\n    # --- 2. Temporal order study ---\n    N_temporal = 1025\n    dt_vals_temporal = np.array([1e-2, 5e-3, 2.5e-3, 1.25e-3])\n    errors_temporal = []\n\n    h_t = 1.0 / (N_temporal - 1)\n    x_t = np.linspace(0.0, 1.0, N_temporal)\n    \n    for dt_t in dt_vals_temporal:\n        T_num = run_solver(N_temporal, dt_t)\n        T_exact = get_exact_solution(x_t, Tf, alpha)\n        error = np.sqrt(h_t * np.sum((T_num - T_exact)**2))\n        errors_temporal.append(error)\n        \n    # Fit for temporal order qt using least-squares on log-log data\n    log_dt = np.log(dt_vals_temporal)\n    log_E_t = np.log(errors_temporal)\n    qt, _ = np.polyfit(log_dt, log_E_t, 1)\n\n    # --- 3. Boundary condition check ---\n    N_bc = 65\n    dt_bc = 1e-3\n    T_final_bc = run_solver(N_bc, dt_bc)\n    h_bc = 1.0 / (N_bc - 1)\n    \n    grad_0 = np.abs((T_final_bc[1] - T_final_bc[0]) / h_bc)\n    grad_1 = np.abs((T_final_bc[-1] - T_final_bc[-2]) / h_bc)\n    \n    bool_bc = (grad_0 < 1e-3) and (grad_1 < 1e-3)\n\n    # --- 4. Final assembly of results ---\n    ps_rounded = round(ps, 3)\n    qt_rounded = round(qt, 3)\n    \n    bool_p = abs(ps - 2.0) <= 0.2\n    bool_q = abs(qt - 2.0) <= 0.2\n    \n    # Format and print the final output as a single line\n    print(f\"[{ps_rounded},{qt_rounded},{bool_p},{bool_q},{bool_bc},{bool_mono}]\")\n\n# Execute the main function to produce the result.\nsolve()\n```", "id": "2506363"}]}