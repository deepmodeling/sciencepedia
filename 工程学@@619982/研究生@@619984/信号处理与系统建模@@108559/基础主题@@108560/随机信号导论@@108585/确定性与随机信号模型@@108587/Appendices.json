{"hands_on_practices": [{"introduction": "本练习旨在巩固对确定性线性时不变 (LTI) 系统核心特性的理解。通过分析其输入输出关系，我们将探索系统的频率响应，特别是其最大增益 $|H(\\omega)|_{\\infty}$，在约束输出信号能量方面所扮演的关键角色。这个实践将理论证明与具体计算相结合，加强您对有界输入有界输出 (BIBO) 稳定性、范数以及它们在系统分析中实际应用的掌握 [@problem_id:2864797]。", "problem": "考虑一个连续时间线性时不变 (LTI) 系统，其冲激响应为 $h(t)$，频率响应为 $H(\\omega) = \\int_{-\\infty}^{\\infty} h(t)\\exp(-j \\omega t)\\,dt$，其中 $j$ 是虚数单位。假设该系统是有界输入有界输出 (BIBO) 稳定的，因此 $h \\in L^{1}(\\mathbb{R})$。对于任意确定性输入 $x \\in L^{2}(\\mathbb{R})$，其输出为 $y = h * x$，其中 $*$ 表示卷积。傅里叶变换定义为 $X(\\omega) = \\int_{-\\infty}^{\\infty} x(t)\\exp(-j \\omega t)\\,dt$，其逆变换为 $x(t) = \\frac{1}{2\\pi}\\int_{-\\infty}^{\\infty} X(\\omega)\\exp(j \\omega t)\\,d\\omega$。$L^{2}$ 范数是 $\\|x\\|_{2} = \\left(\\int_{-\\infty}^{\\infty} |x(t)|^{2} dt\\right)^{1/2}$，本性上确界范数是 $\\|H\\|_{\\infty} = \\operatorname*{ess\\,sup}_{\\omega \\in \\mathbb{R}} |H(\\omega)|$。\n\n任务：\na) 仅从上述定义以及关于 $L^{1}$ 和 $L^{2}$ 上傅里叶变换的经过充分检验的事实出发，证明 $H(\\omega) \\in L^{\\infty}(\\mathbb{R})$，并证明对于所有 $x \\in L^{2}(\\mathbb{R})$，诱导 $L^{2}$ 不等式 $\\|y\\|_{2} \\le \\|H\\|_{\\infty}\\,\\|x\\|_{2}$ 成立。\n\nb) 对于特定的稳定有理传递函数 $H(s) = \\dfrac{s + 2}{s^{2} + 2 s + 2}$，计算范数 $\\|H\\|_{\\infty} = \\sup_{\\omega \\in \\mathbb{R}} |H(j\\omega)|$ 的精确值。将最终答案表示为单一的闭式表达式。不要四舍五入。", "solution": "首先对问题陈述进行验证。\n\n第 1 步：提取已知条件。\n- 系统类型：连续时间线性时不变 (LTI)。\n- 冲激响应：$h(t)$。\n- 频率响应：$H(\\omega) = \\int_{-\\infty}^{\\infty} h(t)\\exp(-j \\omega t)\\,dt$。\n- 稳定性：有界输入有界输出 (BIBO) 稳定，这意味着 $h \\in L^{1}(\\mathbb{R})$。\n- 输入：$x \\in L^{2}(\\mathbb{R})$。\n- 输出：$y = h * x$。\n- 傅里叶变换：$X(\\omega) = \\int_{-\\infty}^{\\infty} x(t)\\exp(-j \\omega t)\\,dt$。\n- 傅里叶逆变换：$x(t) = \\frac{1}{2\\pi}\\int_{-\\infty}^{\\infty} X(\\omega)\\exp(j \\omega t)\\,d\\omega$。\n- $L^{2}$ 范数：$\\|x\\|_{2} = \\left(\\int_{-\\infty}^{\\infty} |x(t)|^{2} dt\\right)^{1/2}$。\n- $L^{\\infty}$ 范数：$\\|H\\|_{\\infty} = \\operatorname*{ess\\,sup}_{\\omega \\in \\mathbb{R}} |H(\\omega)|$。\n- 任务 (a)：证明 $H(\\omega) \\in L^{\\infty}(\\mathbb{R})$ 和 $\\|y\\|_{2} \\le \\|H\\|_{\\infty}\\,\\|x\\|_{2}$。\n- 任务 (b)：对于 $H(s) = \\frac{s + 2}{s^{2} + 2 s + 2}$，计算 $\\|H\\|_{\\infty} = \\sup_{\\omega \\in \\mathbb{R}} |H(j\\omega)|$。\n\n第 2 步：使用提取的已知条件进行验证。\n该问题在 LTI 系统和傅里叶分析的既定理论中具有坚实的科学基础。所有定义和记号在信号处理和系统理论中都是标准的。该问题是适定的；(a) 部分是关于 LTI 系统诱导 $L^2$ 范数的一个基本定理，(b) 部分是一个良定义的优化问题。语言客观、精确。通过找到 $H(s)$ 的极点（即 $s^2+2s+2=0$ 的根），可以确认 (b) 部分中滤波器的稳定性。极点是 $s = \\frac{-2 \\pm \\sqrt{4-8}}{2} = -1 \\pm j$。由于两个极点都具有负实部，因此系统确实是稳定的，这证实了前提。该问题是自洽的、一致的，并且不需要任何外部的、未说明的假设。\n\n第 3 步：结论与行动。\n问题被判定为有效。我们将继续进行解答。\n\n根据要求，解答分为两部分。\n\n(a) 部分：\n我们需要证明 $H(\\omega) \\in L^{\\infty}(\\mathbb{R})$ 且 $\\|y\\|_{2} \\le \\|H\\|_{\\infty}\\,\\|x\\|_{2}$。\n\n首先，我们证明 $H(\\omega) \\in L^{\\infty}(\\mathbb{R})$。根据定义，$H(\\omega) = \\int_{-\\infty}^{\\infty} h(t)\\exp(-j \\omega t)\\,dt$。我们对两边取绝对值：\n$$\n|H(\\omega)| = \\left| \\int_{-\\infty}^{\\infty} h(t)\\exp(-j \\omega t)\\,dt \\right|\n$$\n使用积分的三角不等式，即 $|\\int f(z) dz| \\le \\int |f(z)| dz$，我们得到：\n$$\n|H(\\omega)| \\le \\int_{-\\infty}^{\\infty} |h(t)\\exp(-j \\omega t)|\\,dt\n$$\n由于对于所有实数 $\\omega$ 和 $t$，都有 $|\\exp(-j \\omega t)| = \\sqrt{\\cos^2(-\\omega t) + \\sin^2(-\\omega t)} = 1$，因此该不等式简化为：\n$$\n|H(\\omega)| \\le \\int_{-\\infty}^{\\infty} |h(t)|\\,dt = \\|h\\|_{1}\n$$\n问题指出系统是 BIBO 稳定的，这等价于冲激响应是绝对可积的条件，即 $h \\in L^{1}(\\mathbb{R})$。这意味着 $\\|h\\|_{1}$ 是一个有限正常数。因此，对于所有 $\\omega \\in \\mathbb{R}$， $|H(\\omega)|$ 都受 $\\|h\\|_{1}$ 的限制。因此， $|H(\\omega)|$ 的本性上确界必定是有限的：\n$$\n\\|H\\|_{\\infty} = \\operatorname*{ess\\,sup}_{\\omega \\in \\mathbb{R}} |H(\\omega)| \\le \\|h\\|_{1} < \\infty\n$$\n根据定义，一个其本性上确界为有限的函数是 $L^{\\infty}(\\mathbb{R})$ 的成员。这完成了证明的第一部分。\n\n其次，我们证明不等式 $\\|y\\|_{2} \\le \\|H\\|_{\\infty}\\,\\|x\\|_{2}$。输出由卷积 $y(t) = (h * x)(t)$ 给出。应用傅里叶变换并使用卷积定理，我们得到 $Y(\\omega) = H(\\omega)X(\\omega)$。\n我们使用帕塞瓦尔定理，对于给定的傅里叶变换约定，该定理为：\n$$\n\\|f\\|_{2}^{2} = \\int_{-\\infty}^{\\infty} |f(t)|^2\\,dt = \\frac{1}{2\\pi} \\int_{-\\infty}^{\\infty} |F(\\omega)|^2\\,d\\omega\n$$\n将此定理应用于输出 $y(t)$，我们有：\n$$\n\\|y\\|_{2}^{2} = \\frac{1}{2\\pi} \\int_{-\\infty}^{\\infty} |Y(\\omega)|^2\\,d\\omega = \\frac{1}{2\\pi} \\int_{-\\infty}^{\\infty} |H(\\omega)X(\\omega)|^2\\,d\\omega = \\frac{1}{2\\pi} \\int_{-\\infty}^{\\infty} |H(\\omega)|^2 |X(\\omega)|^2\\,d\\omega\n$$\n根据本性上确界范数的定义，对于几乎所有的 $\\omega \\in \\mathbb{R}$，都有 $|H(\\omega)| \\le \\|H\\|_{\\infty}$。因此，对于几乎所有的 $\\omega \\in \\mathbb{R}$，都有 $|H(\\omega)|^2 \\le \\|H\\|_{\\infty}^2$。我们可以用此来界定该积分：\n$$\n\\|y\\|_{2}^{2} \\le \\frac{1}{2\\pi} \\int_{-\\infty}^{\\infty} \\|H\\|_{\\infty}^2 |X(\\omega)|^2\\,d\\omega\n$$\n由于 $\\|H\\|_{\\infty}$ 是一个常数，它可以从积分中提取出来：\n$$\n\\|y\\|_{2}^{2} \\le \\|H\\|_{\\infty}^2 \\left( \\frac{1}{2\\pi} \\int_{-\\infty}^{\\infty} |X(\\omega)|^2\\,d\\omega \\right)\n$$\n通过帕塞瓦尔定理，将括号中的项识别为 $\\|x\\|_{2}^2$，我们得出：\n$$\n\\|y\\|_{2}^{2} \\le \\|H\\|_{\\infty}^2 \\|x\\|_{2}^2\n$$\n由于范数是非负的，我们可以对两边取平方根，以获得所需的不等式：\n$$\n\\|y\\|_{2} \\le \\|H\\|_{\\infty} \\|x\\|_{2}\n$$\n这完成了 (a) 部分的证明。\n\n(b) 部分：\n我们被要求计算传递函数 $H(s) = \\frac{s + 2}{s^{2} + 2 s + 2}$ 的范数 $\\|H\\|_{\\infty} = \\sup_{\\omega \\in \\mathbb{R}} |H(j\\omega)|$。\n首先，我们通过代入 $s = j\\omega$ 来求频率响应 $H(j\\omega)$：\n$$\nH(j\\omega) = \\frac{j\\omega + 2}{(j\\omega)^{2} + 2(j\\omega) + 2} = \\frac{2 + j\\omega}{-\\omega^2 + 2j\\omega + 2} = \\frac{2 + j\\omega}{(2 - \\omega^2) + j(2\\omega)}\n$$\n接下来，我们确定其幅度 $|H(j\\omega)|$：\n$$\n|H(j\\omega)| = \\frac{|2 + j\\omega|}{|(2 - \\omega^2) + j(2\\omega)|} = \\frac{\\sqrt{2^2 + \\omega^2}}{\\sqrt{(2 - \\omega^2)^2 + (2\\omega)^2}} = \\frac{\\sqrt{4 + \\omega^2}}{\\sqrt{4 - 4\\omega^2 + \\omega^4 + 4\\omega^2}} = \\frac{\\sqrt{4 + \\omega^2}}{\\sqrt{\\omega^4 + 4}}\n$$\n为了找到 $|H(j\\omega)|$ 的上确界，计算其平方 $G(\\omega) = |H(j\\omega)|^2$ 的最大值在计算上更简单。令 $u = \\omega^2$。由于 $\\omega \\in \\mathbb{R}$，我们有 $u \\ge 0$。问题简化为求函数 $f(u)$ 在 $u \\ge 0$ 上的最大值：\n$$\nf(u) = \\frac{4 + u}{u^2 + 4}\n$$\n我们使用微分学来求最大值。我们用商法则计算 $f(u)$ 对 $u$ 的导数：\n$$\nf'(u) = \\frac{(1)(u^2 + 4) - (4 + u)(2u)}{(u^2 + 4)^2} = \\frac{u^2 + 4 - 8u - 2u^2}{(u^2 + 4)^2} = \\frac{-u^2 - 8u + 4}{(u^2 + 4)^2}\n$$\n为了找到临界点，我们将分子设为零：\n$$\n-u^2 - 8u + 4 = 0 \\quad \\implies \\quad u^2 + 8u - 4 = 0\n$$\n使用二次公式 $u = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a}$ 求解 $u$：\n$$\nu = \\frac{-8 \\pm \\sqrt{8^2 - 4(1)(-4)}}{2(1)} = \\frac{-8 \\pm \\sqrt{64 + 16}}{2} = \\frac{-8 \\pm \\sqrt{80}}{2} = \\frac{-8 \\pm 4\\sqrt{5}}{2} = -4 \\pm 2\\sqrt{5}\n$$\n由于 $u = \\omega^2$ 必须是非负的，我们舍弃负根 $u = -4 - 2\\sqrt{5}$。唯一有效的临界点是 $u = -4 + 2\\sqrt{5} > 0$。二阶导数检验或对 $f'(u)$ 符号的分析证实了该点是一个最大值点。\n现在我们计算 $f(u)$ 在此点的值。由方程 $u^2 + 8u - 4 = 0$, 我们有 $u^2 = 4 - 8u$。我们将其代入 $f(u)$ 的表达式中：\n$$\nf(u_{\\text{max}}) = \\frac{4 + u}{u^2 + 4} = \\frac{4 + u}{(4 - 8u) + 4} = \\frac{4 + u}{8 - 8u} = \\frac{4 + u}{8(1 - u)}\n$$\n代入 $u = -4 + 2\\sqrt{5}$:\n$$\nf(u_{\\text{max}}) = \\frac{4 + (-4 + 2\\sqrt{5})}{8(1 - (-4 + 2\\sqrt{5}))} = \\frac{2\\sqrt{5}}{8(5 - 2\\sqrt{5})} = \\frac{\\sqrt{5}}{4(5 - 2\\sqrt{5})}\n$$\n为了简化，我们将分母有理化：\n$$\nf(u_{\\text{max}}) = \\frac{\\sqrt{5}}{4(5 - 2\\sqrt{5})} \\cdot \\frac{5 + 2\\sqrt{5}}{5 + 2\\sqrt{5}} = \\frac{\\sqrt{5}(5 + 2\\sqrt{5})}{4(5^2 - (2\\sqrt{5})^2)} = \\frac{5\\sqrt{5} + 10}{4(25 - 20)} = \\frac{5\\sqrt{5} + 10}{4(5)} = \\frac{5(2 + \\sqrt{5})}{20} = \\frac{2 + \\sqrt{5}}{4}\n$$\n这是 $|H(j\\omega)|^2$ 的最大值。范数 $\\|H\\|_{\\infty}$ 是该值的平方根：\n$$\n\\|H\\|_{\\infty} = \\sup_{\\omega \\in \\mathbb{R}} |H(j\\omega)| = \\sqrt{\\frac{2 + \\sqrt{5}}{4}} = \\frac{\\sqrt{2 + \\sqrt{5}}}{2}\n$$\n这就是最终的精确闭式表达式。", "answer": "$$\n\\boxed{\\frac{\\sqrt{2 + \\sqrt{5}}}{2}}\n$$", "id": "2864797"}, {"introduction": "从确定性信号转向随机过程，一个核心任务是从观测数据中构建其数学模型。本练习将介绍自回归 (AR) 模型，这是一种重要的参数化建模方法。您将推导并应用 Durbin-Levinson 算法，这是一种用于求解 AR 模型参数的 Yule-Walker 方程组的、计算上极为高效的递归方法。通过这个练习，您将在理论推导和数值计算两方面获得宝贵的实践经验，这对于参数化信号建模至关重要 [@problem_id:2864841]。", "problem": "考虑一个由因果的、$p$阶自回归（AR）过程建模的、实值的、零均值的、宽平稳（WSS）离散时间过程。设从其过去的$p$个样本对$x[n]$进行的AR($p$)前向线性预测器为 $\\hat{x}[n] = \\sum_{i=1}^{p} a_{i}^{(p)} x[n-i]$，并定义前向预测误差为 $e_{p}[n] = x[n] - \\hat{x}[n]$。自相关函数为 $r(k) = \\mathbb{E}\\{x[n] x[n-k]\\}$，并且$p$阶预测误差方差为 $\\epsilon_{p} = \\mathbb{E}\\{e_{p}[n]^{2}\\}$。\n\n任务1：从线性最小均方误差（LMMSE）估计的正交性原理及其推导出的托普利茨（Toeplitz）Yule–Walker范式方程出发，推导Durbin–Levinson递推算法，该算法表示：\n- 反射系数$k_{p+1}$，表示为一个包含$\\{r(k)\\}$、$\\{a_{i}^{(p)}\\}$和$\\epsilon_{p}$的比率，\n- 系数更新映射 $\\{a_{i}^{(p)}\\} \\mapsto \\{a_{i}^{(p+1)}\\}$，\n- 以及误差方差更新 $\\epsilon_{p} \\mapsto \\epsilon_{p+1}$，\n通过将预测器阶数从$p$增加到$p+1$。\n\n您的推导必须从LMMSE正交性条件 $\\mathbb{E}\\{e_{p}[n]\\,x[n-k]\\}=0$（对于$k=1,\\dots,p$）以及托普利茨（Toeplitz）自相关矩阵的众所周知的性质开始，并且在推导过程中不能预先假设目标递推关系。\n\n任务2：给定从长记录中获得的延迟$k=0,1,2,3$处的经验估计自相关 $\\{\\hat{r}(k)\\}$，其中 $\\hat{r}(0) = 1$，$\\hat{r}(1) = \\tfrac{1}{2}$，$\\hat{r}(2) = \\tfrac{1}{4}$，$\\hat{r}(3) = \\tfrac{1}{8}$。使用您推导的Durbin–Levinson递推算法，用$\\hat{r}(k)$代替$r(k)$，计算$3$阶AR系数估计$\\{a_{i}^{(3)}\\}_{i=1}^{3}$和$3$阶前向预测误差方差$\\epsilon_{3}$。\n\n任务3：使用第一性原理和您的推导，分析当使用样本自相关驱动时Durbin–Levinson递推算法的数值稳定性，讨论正定性、反射系数和舍入误差如何影响稳定性和准确性。您的分析应仅引用关于对称托普利茨（Toeplitz）系统、正定性和正交性的基础事实。\n\n答案要求：仅报告$3$阶前向预测误差方差$\\epsilon_{3}$的数值作为最终答案，不带单位，四舍五入到四位有效数字。不要在最终答案中报告中间量。", "solution": "所提出的问题是关于自回归（AR）模型的统计信号处理中的一个标准练习，并且是有效的。它具有科学依据、问题适定、客观，并包含了求解所需的所有必要信息。我将按要求进行推导、计算和分析。\n\n该问题分三部分解决：\n$1$. Durbin-Levinson递推的推导。\n$2$. 应用此递推算法，从给定的自相关数据计算$3$阶AR参数和误差方差。\n$3$. 算法数值稳定性的分析。\n\n**任务1：Durbin-Levinson递推的推导**\n\n我们从线性最小均方误差（LMMSE）估计的基本原理——正交性原理开始。对于一个$p$阶前向预测器 $\\hat{x}[n] = \\sum_{i=1}^{p} a_{i}^{(p)} x[n-i]$，预测误差 $e_{p}[n] = x[n] - \\hat{x}[n]$ 必须与用于预测的数据正交。对于零均值过程，这表示为：\n$$\n\\mathbb{E}\\{e_{p}[n]\\,x[n-k]\\} = 0, \\quad \\text{for } k=1, \\dots, p\n$$\n代入$e_{p}[n]$的表达式：\n$$\n\\mathbb{E}\\left\\{\\left(x[n] - \\sum_{i=1}^{p} a_{i}^{(p)} x[n-i]\\right)x[n-k]\\right\\} = 0\n$$\n根据期望的线性性质，并使用自相关函数 $r(k) = \\mathbb{E}\\{x[n] x[n-k]\\}$ 的定义，我们得到Yule-Walker方程：\n$$\n\\mathbb{E}\\{x[n]x[n-k]\\} - \\sum_{i=1}^{p} a_{i}^{(p)} \\mathbb{E}\\{x[n-i]x[n-k]\\} = 0\n$$\n$$\nr(k) - \\sum_{i=1}^{p} a_{i}^{(p)} r(k-i) = 0, \\quad \\text{for } k=1, \\dots, p\n$$\n这是一个关于$p$个未知系数 $\\{a_i^{(p)}\\}$ 的$p$个线性方程组。预测误差方差 $\\epsilon_p$ 由 $\\epsilon_p = \\mathbb{E}\\{e_p[n]^2\\}$ 给出。使用正交性原理，这可以简化为：\n$$\n\\epsilon_p = \\mathbb{E}\\{e_p[n] (x[n] - \\hat{x}[n])\\} = \\mathbb{E}\\{e_p[n] x[n]\\}\n$$\n$$\n\\epsilon_p = \\mathbb{E}\\left\\{\\left(x[n] - \\sum_{i=1}^{p} a_{i}^{(p)} x[n-i]\\right)x[n]\\right\\} = r(0) - \\sum_{i=1}^{p} a_{i}^{(p)} r(i)\n$$\n现在，我们寻求一个递推解法，将预测器阶数从$p$增加到$p+1$。阶数为$(p+1)$的预测器的Yule-Walker方程为：\n$$\n\\sum_{i=1}^{p+1} a_{i}^{(p+1)} r(k-i) = r(k), \\quad \\text{for } k=1, \\dots, p+1\n$$\n我们可以将此系统写成矩阵形式。令 $\\mathbf{a}_{p+1} = [a_1^{(p+1)}, \\dots, a_{p+1}^{(p+1)}]^T$ 和 $\\mathbf{r}_{p+1} = [r(1), \\dots, r(p+1)]^T$。$(p+1) \\times (p+1)$ 的自相关矩阵 $\\mathbf{R}_{p+1}$ 是对称且托普利茨（Toeplitz）的。我们可以将其分块为：\n$$\n\\mathbf{R}_{p+1} = \\begin{pmatrix} \\mathbf{R}_p & \\mathbf{J} \\mathbf{r}_p \\\\ \\mathbf{r}_p^T \\mathbf{J} & r(0) \\end{pmatrix}\n$$\n其中 $\\mathbf{R}_p$ 是 $p \\times p$ 的自相关矩阵，$\\mathbf{r}_p = [r(1), \\dots, r(p)]^T$，$\\mathbf{J}$ 是交换矩阵（反对角线元素为1的矩阵）。\n\n系统 $\\mathbf{R}_{p+1} \\mathbf{a}_{p+1} = \\mathbf{r}_{p+1}$ 的结构和托普利茨（Toeplitz）矩阵的性质允许我们得出以下递推关系：\n首先，反射系数 $k_{p+1}$（即第 $p+1$ 阶的最后一个系数 $a_{p+1}^{(p+1)}$）由下式给出：\n$$\nk_{p+1} = \\frac{r(p+1) - \\sum_{i=1}^{p} a_{i}^{(p)} r(p+1-i)}{\\epsilon_p}\n$$\n其次，较高阶的系数可以从较低阶的系数和反射系数更新得到：\n$$\na_{p+1}^{(p+1)} = k_{p+1}\n$$\n$$\na_{i}^{(p+1)} = a_{i}^{(p)} - k_{p+1} a_{p-i+1}^{(p)}, \\quad \\text{for } i=1, \\dots, p\n$$\n最后，预测误差方差也以一种简单的方式更新：\n$$\n\\epsilon_{p+1} = \\epsilon_p(1 - k_{p+1}^2)\n$$\n这些方程共同构成了Durbin-Levinson递推算法。\n\n**任务2：AR(3)模型的数值计算**\n\n我们给定了样本自相关：$\\hat{r}(0) = 1$，$\\hat{r}(1) = \\frac{1}{2}$，$\\hat{r}(2) = \\frac{1}{4}$，$\\hat{r}(3) = \\frac{1}{8}$。我们应用递推算法，用 $\\hat{r}(k)$ 代替 $r(k)$。\n\n**初始化（$p=0$阶）：**\n- 误差方差：$\\epsilon_0 = \\hat{r}(0) = 1$。\n\n**步骤1：$p=1$阶**\n- 反射系数：$k_1 = \\frac{\\hat{r}(1)}{\\epsilon_0} = \\frac{1/2}{1} = \\frac{1}{2}$。\n- AR系数：$a_1^{(1)} = k_1 = \\frac{1}{2}$。\n- 误差方差：$\\epsilon_1 = \\epsilon_0(1 - k_1^2) = 1(1 - (\\frac{1}{2})^2) = 1 - \\frac{1}{4} = \\frac{3}{4}$。\n\n**步骤2：$p=2$阶**\n- $k_2$ 的分子：$\\hat{r}(2) - a_1^{(1)}\\hat{r}(1) = \\frac{1}{4} - (\\frac{1}{2})(\\frac{1}{2}) = \\frac{1}{4} - \\frac{1}{4} = 0$。\n- 反射系数：$k_2 = \\frac{0}{\\epsilon_1} = 0$。\n- AR系数：\n  $a_2^{(2)} = k_2 = 0$。\n  $a_1^{(2)} = a_1^{(1)} - k_2 a_{1}^{(1)} = \\frac{1}{2} - (0)(\\frac{1}{2}) = \\frac{1}{2}$。\n- 误差方差：$\\epsilon_2 = \\epsilon_1(1-k_2^2) = \\frac{3}{4}(1-0^2) = \\frac{3}{4}$。\n\n**步骤3：$p=3$阶**\n- $k_3$ 的分子：$\\hat{r}(3) - \\sum_{i=1}^2 a_i^{(2)} \\hat{r}(3-i) = \\hat{r}(3) - (a_1^{(2)}\\hat{r}(2) + a_2^{(2)}\\hat{r}(1))$。\n  $= \\frac{1}{8} - ((\\frac{1}{2})(\\frac{1}{4}) + (0)(\\frac{1}{2})) = \\frac{1}{8} - \\frac{1}{8} = 0$。\n- 反射系数：$k_3 = \\frac{0}{\\epsilon_2} = 0$。\n- AR系数：\n  $a_3^{(3)} = k_3 = 0$。\n  $a_1^{(3)} = a_1^{(2)} - k_3 a_2^{(2)} = \\frac{1}{2} - (0)(0) = \\frac{1}{2}$。\n  $a_2^{(3)} = a_2^{(2)} - k_3 a_1^{(2)} = 0 - (0)(\\frac{1}{2}) = 0$。\n$3$阶系数为 $\\{a_1^{(3)}, a_2^{(3)}, a_3^{(3)}\\} = \\{\\frac{1}{2}, 0, 0\\}$。\n- 误差方差：\n  $$\n  \\epsilon_3 = \\epsilon_2(1-k_3^2) = \\frac{3}{4}(1-0^2) = \\frac{3}{4}\n  $$\n$3$阶前向预测误差方差为 $\\epsilon_3 = 0.75$。\n\n**任务3：稳定性分析**\n\nDurbin-Levinson递推的数值稳定性与自相关矩阵 $\\mathbf{R}_p$ 的数学性质密不可分。\n\n$1$. **正定性**：对于一个非确定性的宽平稳过程，理论自相关矩阵 $\\mathbf{R}_p$ 对于任何阶数 $p$ 都保证是对称、托普利茨（Toeplitz）和正定的。正定性确保 $\\mathbf{R}_p$ 是可逆的，从而保证Yule-Walker方程有唯一解。当使用从有限数据记录中导出的样本自相关 $\\{\\hat{r}(k)\\}$ 时，由于估计误差，所得到的矩阵 $\\hat{\\mathbf{R}}_p$ 不保证是正定的。\n\n$2$. **反射系数**：Durbin-Levinson递推在每一步都提供了一个稳定性检查。误差方差的更新公式是 $\\epsilon_m = \\epsilon_{m-1}(1 - k_m^2)$。由于 $\\epsilon_m = \\mathbb{E}\\{e_m[n]^2\\}$ 必须是非负的，并且 $\\epsilon_0 = r(0) > 0$，通过归纳法可以得出，$\\epsilon_{m-1} > 0$ 要求 $(1 - k_m^2) \\ge 0$。这意味着对所有的 $m=1, \\dots, p$ 都有 $|k_m| \\le 1$。对所有$m$都满足 $|k_m| < 1$ 是所得AR滤波器稳定（即其极点位于单位圆内）的充要条件。这个条件等价于矩阵 $\\mathbf{R}_p$ 的正定性。如果样本自相关序列 $\\{\\hat{r}(k)\\}$ 在某个阶数 $m$ 时未能产生一个正定矩阵 $\\hat{\\mathbf{R}}_m$，则算法将产生一个$|k_m| > 1$的反射系数。这会导致一个负的、物理上无意义的误差方差估计 $\\epsilon_m < 0$，并且递推变得不稳定。\n\n$3$. **舍入误差**：与对 $\\mathbf{R}_p$ 进行直接矩阵求逆（其复杂度为 $O(p^3)$）相比，Durbin-Levinson递推（其复杂度为 $O(p^2)$）通常因其良好的数值特性而受到称赞。其原因是，只要对所有 $i \\le m$ 都有 $|k_i| \\le 1$，所有中间量，特别是AR系数 $\\{a_i^{(m)}\\}$ 和反射系数 $\\{k_m\\}$，都保持有界。这种有界性控制了舍入误差的传播。然而，该算法并非对数值问题免疫。反射系数 $k_p$ 的计算涉及分子中的一次减法：$r(p) - \\sum a_i^{(p-1)} r(p-i)$。如果过程的频谱内容集中在非常窄的频带内，自相关矩阵会变得接近奇异（病态）。在这种情况下，减法中的两项可能会非常接近，导致灾难性抵消，从而严重损失计算出的 $k_p$ 值的精度。这可能会损害所得AR参数的准确性，即使算法在形式上保持稳定（即对所有$m$都有$|k_m| \\le 1$）。\n\n总而言之，Durbin-Levinson递推的稳定性从根本上与自相关矩阵的正定性相关联，这对于理论自相关是保证的，但对于基于样本的估计则不一定。当此条件被违反时，该算法通过产生 $|k_m| > 1$ 来进行自我调节，这标志着一个无效的模型。虽然通常是稳定的，但在病态情况下，其准确性会因舍入误差而降低。", "answer": "$$\\boxed{0.7500}$$", "id": "2864841"}, {"introduction": "在学会如何为给定阶数的模型估计参数后，一个关键问题随之而来：如何确定模型的最佳复杂度或阶数？本练习通过引入赤池信息准则 (Akaike's Information Criterion, AIC) 来解决这一问题，这是一种在模型拟合优度和参数数量之间进行权衡的强大工具。通过从高斯似然函数出发推导 AIC 规则，并将其应用于合成数据，您将亲身体验构建和验证统计信号模型的完整流程，从而将理论与实际应用紧密结合起来 [@problem_id:2864830]。", "problem": "您的任务是使用赤池信息准则（Akaike’s Information Criterion, AIC）为自回归（AutoRegressive, AR）模型形式化一个模型阶数选择规则，并实现一个程序，将此规则应用于具有已知真实值的合成数据。此问题必须从核心定义出发，遵循第一性原理求解，且完全自洽。\n\n基本设定如下。一个零均值的 $k$ 阶自回归模型（AR($k$)）由以下递推公式定义：\n$$\nx_t = \\sum_{i=1}^{k} a_i\\, x_{t-i} + e_t,\n$$\n其中 $\\{e_t\\}$ 是一个独立同分布的高斯随机变量序列，均值为零，方差为 $\\sigma^2$，记作 $e_t \\sim \\mathcal{N}(0,\\sigma^2)$。对于此类模型，假定数据 $\\{x_t\\}_{t=1}^{n}$ 由一个平稳 AR 过程生成。\n\n对于一个参数矢量维度为 $p$ 且最大化似然为 $L(\\hat{\\theta})$ 的参数模型，赤池信息准则（AIC）定义为：\n$$\n\\mathrm{AIC} = 2p - 2 \\ln L(\\hat{\\theta}).\n$$\n您必须从这个定义和 AR 模型的高斯似然出发，推导出一个仅依赖于样本大小 $n$、候选阶数 $k$ 以及对 AR($k$) 模型进行数据拟合后获得的新息方差估计值 $\\hat{\\sigma}_k^2$ 的可计算阶数选择规则。您的推导必须明确指出哪些项依赖于 $k$，哪些不依赖，并且必须证明用于比较不同 $k$ 值的最终简化形式的合理性。\n\n对于每个候选阶数 $k$ 的参数估计，您必须使用通过有偏样本自相关估计求解的 Yule–Walker (YW) 方程：\n$$\n\\hat{r}(\\ell) = \\frac{1}{n}\\sum_{t=\\ell+1}^{n} x_t \\, x_{t-\\ell}, \\quad \\ell = 0,1,\\dots,k,\n$$\n来获得 AR 系数矢量 $\\hat{\\mathbf{a}}^{(k)} = [\\hat{a}_1,\\dots,\\hat{a}_k]^\\top$，该矢量是以下 Toeplitz 线性系统的解：\n$$\n\\mathbf{R}_k \\, \\hat{\\mathbf{a}}^{(k)} = \\mathbf{r}_k,\n$$\n其中 $\\mathbf{R}_k$ 是一个 $k\\times k$ 的 Toeplitz 矩阵，其元素为 $[\\mathbf{R}_k]_{i,j} = \\hat{r}(|i-j|)$，而 $\\mathbf{r}_k = [\\hat{r}(1), \\dots, \\hat{r}(k)]^\\top$。相应的新息方差的 Yule–Walker 估计值为：\n$$\n\\hat{\\sigma}_k^2 = \\hat{r}(0) - \\big(\\hat{\\mathbf{a}}^{(k)}\\big)^\\top \\mathbf{r}_k,\n$$\n并约定当 $k=0$ 时，$\\hat{\\sigma}_0^2 = \\hat{r}(0)$。\n\n您的任务：\n- 从赤池信息准则的定义和 AR 模型的高斯似然出发，推导出一个依赖于 $k$ 的选择规则，该规则能基于 $n$、$k$ 和 $\\hat{\\sigma}_k^2$ 产生一个可计算的得分 $\\mathrm{AIC}(k)$。推导过程必须从似然和 AIC 的定义开始，并说明为何可以舍弃某些不影响阶数选择的常数项。\n- 实现一个程序，该程序能够：\n  1. 根据指定的真实参数，使用高斯新息序列（方差为 $\\sigma^2$）和一段预烧期以达到平稳性，生成零均值的合成 AR($k$) 时间序列。\n  2. 使用 Yule–Walker 方法对从 $0$ 到指定最大值的候选阶数 $k$ 拟合 AR($k$) 模型，并使用您推导的规则为每个 $k$ 计算基于 AIC 的得分。\n  3. 选择使 AIC 得分最小化的阶数 $\\hat{k}$。如果出现数值容差范围内的平局，选择其中最小的 $k$。\n- 数据生成细节：\n  - AR 递推必须如上所述应用，其中 $x_t$ 根据过去的样本和独立的高斯噪声进行因果计算。\n  - 对于参数被指定为“极点” $r_1,\\dots,r_p$（其中 $|r_i|<1$）的情况，构建 AR 多项式：\n    $$\n    A(z) = \\prod_{i=1}^{p} \\big(1 - r_i z^{-1}\\big) = 1 - a_1 z^{-1} - a_2 z^{-2} - \\cdots - a_p z^{-p},\n    $$\n    并通过初等对称和提取 AR 系数，使得 $a_1 = \\sum_i r_i$， $a_2 = -\\sum_{i<j} r_i r_j$， $a_3 = \\sum_{i<j<k} r_i r_j r_k$，且符号通常交替出现，即 $a_m = (-1)^{m+1}\\,S_m$，其中 $S_m$ 是 $\\{r_i\\}$ 的第 $m$ 个初等对称和。\n- 角度单位不适用。没有物理单位；所有输出都是无单位的。\n\n测试套件和您的程序的必需输入：\n- 对于每个测试，您必须在丢弃长度为 $B$ 的预烧期段后，模拟一个长度为 $n$ 的时间序列。在所有测试中，使用 $B = 500$。\n- 为保证可复现性，每个测试使用固定的随机种子。高斯新息方差为指定的 $\\sigma^2$。除非另有说明，否则使用 $\\sigma^2 = 1$。\n- 对于每个测试，在候选阶数 $k \\in \\{0,1,2,\\dots,k_{\\max}\\}$ 上进行搜索，并报告所选的阶数 $\\hat{k}$。\n\n提供以下六个测试：\n1. 测试 A (理想情况): 真实模型为 AR($2$)，系数为 $[0.7, -0.4]$，$n=2000$，$\\sigma^2=1$，种子 $123$，$k_{\\max}=7$。\n2. 测试 B (中等样本): 真实模型为 AR($1$)，系数为 $[0.8]$，$n=300$，$\\sigma^2=1$，种子 $456$，$k_{\\max}=7$。\n3. 测试 C (白噪声): 真实模型为 AR($0$)，即 $x_t = e_t$，$n=1000$，$\\sigma^2=1$，种子 $789$，$k_{\\max}=7$。\n4. 测试 D (通过极点指定的高阶模型): 真实模型为 AR($4$)，由极点 $[0.8, 0.5, -0.3, 0.2]$ 指定（所有极点的模都严格小于 $1$），$n=4000$，$\\sigma^2=1$，种子 $101112$，$k_{\\max}=10$。AR 系数通过上述的 $A(z)=\\prod_i (1 - r_i z^{-1})$ 隐式定义。\n5. 测试 E (近边界动态, 小 $n$): 真实模型为 AR($2$)，系数为 $[0.95, -0.3]$，$n=120$，$\\sigma^2=1$，种子 $202122$，$k_{\\max}=6$。\n6. 测试 F (搜索边界情况): 真实模型为 AR($3$)，系数为 $[0.6, -0.2, 0.1]$，$n=500$，$\\sigma^2=1$，种子 $303132$，$k_{\\max}=2$。\n\n最终输出格式：\n- 您的程序应生成单行输出，其中包含一个用方括号括起来的逗号分隔列表。该列表必须按顺序包含测试 A–F 的六个所选阶数 $\\hat{k}$，每个均为整数，例如 $[2,1,0,4,2,2]$。输出必须仅包含此列表，不含任何额外文本。", "solution": "问题陈述已解析和验证。我们发现该问题具有科学依据、提法恰当且内容自洽。它提出了时间序列分析中的一个标准且严谨的任务：使用赤池信息准则（AIC）选择自回归（AR）模型的阶数。所有定义、参数和步骤都被明确无误地指定。因此，该问题被认定为**有效**。\n\n解决方案分两部分。第一部分，按要求从第一性原理对基于 AIC 的选择规则进行形式化推导。第二部分，解释遵循给定规范的数值实现方法。\n\n**第一部分：AR 模型 AIC 选择规则的推导**\n\n目标是，从 AIC 的定义和 AR 模型的统计特性出发，为 AR($k$) 模型推导出一个可计算的 AIC 公式。\n\n1.  **AR 模型与高斯对数似然**\n    一个零均值的 $k$ 阶 AR 过程由以下随机差分方程定义：\n    $$x_t = \\sum_{i=1}^{k} a_i x_{t-i} + e_t$$\n    其中 $\\{e_t\\}$ 是来自均值为零、方差为 $\\sigma^2$ 的高斯分布的独立同分布（i.i.d.）随机变量序列，记作 $e_t \\sim \\mathcal{N}(0,\\sigma^2)$。\n\n    对于一组给定的观测值 $\\{x_t\\}_{t=1}^n$，似然函数是数据的联合概率密度函数，视为模型参数 $\\theta = (\\mathbf{a}, \\sigma^2)$ 的函数，其中 $\\mathbf{a} = [a_1, \\dots, a_k]^\\top$。一种常见且实用的方法是使用条件似然，即以前 $k$ 个观测值为条件。这将 $x_1, \\dots, x_k$ 视为固定值，从而简化了问题。新息项可表示为 $e_t = x_t - \\sum_{i=1}^{k} a_i x_{t-i}$。给定过去的观测值，$x_t$ 的条件概率密度是一个均值为 $\\mu_t = \\sum_{i=1}^{k} a_i x_{t-i}$、方差为 $\\sigma^2$ 的高斯随机变量的概率密度。\n\n    观测值 $x_{k+1}, \\dots, x_n$ 的条件对数似然函数为：\n    $$\\ln L(\\mathbf{a}, \\sigma^2) = \\sum_{t=k+1}^{n} \\ln p(x_t | x_{t-1}, \\dots, x_{t-k})$$\n    $$ \\ln L(\\mathbf{a}, \\sigma^2) = \\sum_{t=k+1}^{n} \\left[ -\\frac{1}{2}\\ln(2\\pi\\sigma^2) - \\frac{\\left(x_t - \\sum_{i=1}^{k} a_i x_{t-i}\\right)^2}{2\\sigma^2} \\right] $$\n    $$ \\ln L(\\mathbf{a}, \\sigma^2) = -\\frac{n-k}{2}\\ln(2\\pi) - \\frac{n-k}{2}\\ln(\\sigma^2) - \\frac{1}{2\\sigma^2}\\sum_{t=k+1}^{n} e_t^2 $$\n    对于大样本（$n \\gg k$），通常用 $n$ 来近似有效观测数 $n-k$。这得到了大样本近似对数似然：\n    $$ \\ln L(\\mathbf{a}, \\sigma^2) \\approx -\\frac{n}{2}\\ln(2\\pi) - \\frac{n}{2}\\ln(\\sigma^2) - \\frac{1}{2\\sigma^2}\\sum_{t=1}^{n} e_t^2 $$\n\n2.  **最大化对数似然**\n    赤池准则需要最大化对数似然 $\\ln L(\\hat{\\theta})$，其中 $\\hat{\\theta}$ 代表参数的最大似然估计（MLEs）。AR($k$) 模型的参数矢量是 $\\theta = (a_1, \\dots, a_k, \\sigma^2)$，所以参数总数为 $p = k+1$。\n\n    使近似对数似然最大化的方差 MLE $\\hat{\\sigma}_k^2$ 是残差平方和的平均值：\n    $$ \\hat{\\sigma}_k^2 = \\frac{1}{n}\\sum_{t=1}^{n} \\hat{e}_t^2 = \\frac{1}{n}\\sum_{t=1}^{n} \\left(x_t - \\sum_{i=1}^{k} \\hat{a}_i x_{t-i}\\right)^2 $$\n    这里，$\\hat{a}_i$ 是估计的 AR 系数。问题规定这些参数以及随后的 $\\hat{\\sigma}_k^2$ 均通过 Yule-Walker 方程获得。将 MLE $\\hat{\\sigma}_k^2$ 代入对数似然表达式中，得到：\n    $$ \\ln L(\\hat{\\theta}) \\approx -\\frac{n}{2}\\ln(2\\pi) - \\frac{n}{2}\\ln(\\hat{\\sigma}_k^2) - \\frac{1}{2\\hat{\\sigma}_k^2} (n \\hat{\\sigma}_k^2) $$\n    $$ \\ln L(\\hat{\\theta}) \\approx -\\frac{n}{2}\\left( \\ln(2\\pi) + \\ln(\\hat{\\sigma}_k^2) + 1 \\right) $$\n\n3.  **赤池信息准则表达式**\n    AIC 的定义是 $\\mathrm{AIC} = 2p - 2\\ln L(\\hat{\\theta})$。代入 $p = k+1$ 和 $\\ln L(\\hat{\\theta})$ 的表达式：\n    $$ \\mathrm{AIC}(k) = 2(k+1) - 2 \\left[ -\\frac{n}{2}\\left( \\ln(2\\pi) + \\ln(\\hat{\\sigma}_k^2) + 1 \\right) \\right] $$\n    $$ \\mathrm{AIC}(k) = 2(k+1) + n\\ln(2\\pi) + n\\ln(\\hat{\\sigma}_k^2) + n $$\n\n4.  **阶数选择的最终可计算形式**\n    最优模型阶数 $\\hat{k}$ 是通过在一组候选阶数上最小化 $\\mathrm{AIC}(k)$ 找到的。在比较不同的 $k$ 值时，AIC 表达式中不依赖于 $k$ 的项可以舍弃，因为它们不影响最小值的位置。对于给定大小为 $n$ 的数据集，$n\\ln(2\\pi)$ 和 $n$ 是常数。舍去这些常数项，得到一个用于模型选择的简化但等价的准则，我们记为 $\\mathrm{AIC}(k)$：\n    $$ \\mathrm{AIC}(k) = n\\ln(\\hat{\\sigma}_k^2) + 2(k+1) $$\n    这是选择规则的最终可计算形式。对于给定的候选阶数 $k$，它只需要样本大小 $n$ 和估计的新息方差 $\\hat{\\sigma}_k^2$。最优阶数 $\\hat{k}$ 选择如下：\n    $$ \\hat{k} = \\arg\\min_{k \\in \\{0, 1, \\dots, k_{\\max}\\}} \\left\\{ n\\ln(\\hat{\\sigma}_k^2) + 2(k+1) \\right\\} $$\n    对于 $k=0$ 的情况（白噪声），模型为 $x_t = e_t$，唯一的参数是 $\\sigma^2$，所以 $p=1$。方差估计值为 $\\hat{\\sigma}_0^2 = \\hat{r}(0)$，该公式正确地计算出 $\\mathrm{AIC}(0) = n \\ln(\\hat{\\sigma}_0^2) + 2$。\n\n**第二部分：数值实现方法**\n\n程序通过为每个测试案例执行以下步骤来实现推导出的规则。\n\n1.  **数据生成**：\n    -   生成一个长度为 $n+B$ 的时间序列，其中 $n$ 是最终样本大小，$B=500$ 是预烧期，以确保过程达到平稳状态。\n    -   首先，使用特定的随机种子生成一个长度为 $n+B$、方差为 $\\sigma^2$ 的 i.i.d. 高斯噪声序列 $\\{e_t\\}$，以保证可复现性。\n    -   然后通过因果递推 $x_t = \\sum_{i=1}^{k} a_i x_{t-i} + e_t$ 生成 AR 时间序列 $\\{x_t\\}$。对于 $t \\le 0$ 的初始值 $x_t$ 取为零。\n    -   丢弃前 $B$ 个样本，得到最终长度为 $n$ 的时间序列。\n    -   对于 AR 参数以极点 $\\{r_i\\}$ 形式给出的测试，首先计算 AR 系数 $\\{a_m\\}$。特征多项式为 $A(z) = \\prod_i (1 - r_i z^{-1}) = 1 - \\sum_m a_m z^{-m}$。系数通过 $a_m = -c_m$ 求得，其中 $c_m$ 是多项式 $\\prod_i(z-r_i)$ 的系数（不包括首项）。这可以通过 `numpy.poly` 高效实现。\n\n2.  **Yule-Walker 参数估计**：\n    -   对于每个候选阶数 $k \\in \\{0, 1, \\dots, k_{\\max}\\}$，从合成数据中估计 AR 模型参数。\n    -   按规定计算滞后 $\\ell=0, \\dots, k$ 的有偏样本自相关 $\\hat{r}(\\ell)$：$\\hat{r}(\\ell) = \\frac{1}{n} \\sum_{t=\\ell+1}^{n} x_t x_{t-\\ell}$。\n    -   对于 $k>0$，构建 $k \\times k$ 的 Toeplitz 矩阵 $\\mathbf{R}_k$（其元素为 $[\\mathbf{R}_k]_{i,j} = \\hat{r}(|i-j|)$）和矢量 $\\mathbf{r}_k = [\\hat{r}(1), \\dots, \\hat{r}(k)]^\\top$。\n    -   解 Yule-Walker 方程组 $\\mathbf{R}_k \\hat{\\mathbf{a}}^{(k)} = \\mathbf{r}_k$ 以求得 AR 系数矢量 $\\hat{\\mathbf{a}}^{(k)}$。\n    -   使用公式 $\\hat{\\sigma}_k^2 = \\hat{r}(0) - (\\hat{\\mathbf{a}}^{(k)})^\\top \\mathbf{r}_k$ 估计新息方差。\n    -   对于基准情况 $k=0$，估计值就是 $\\hat{\\sigma}_0^2 = \\hat{r}(0)$。\n\n3.  **基于 AIC 的阶数选择**：\n    -   对于每个候选阶数 $k$，计算得分 $\\mathrm{AIC}(k) = n\\ln(\\hat{\\sigma}_k^2) + 2(k+1)$。\n    -   选择产生最小 AIC 得分的阶数 $\\hat{k}$。比较时使用严格小于号，这自然地处理了平局情况，即选择第一个达到最小值的最小阶数 $k$，因为它在对 $k$ 的升序循环中首先被遇到。\n\n这种结构化方法确保了对指定模型选择任务的正确和可复现的实现。以下是实现此逻辑的 Python 代码。\n\n```python\nimport numpy as np\nfrom scipy.linalg import toeplitz\nimport collections\n\n# Define the structure for a test case for clarity.\nTestCase = collections.namedtuple(\n    'TestCase',\n    ['name', 'params', 'n', 'sigma_sq', 'seed', 'k_max']\n)\n\ndef poles_to_coeffs(poles: list[float]) -> np.ndarray:\n    \"\"\"\n    Converts AR model poles to AR coefficients.\n    The AR polynomial is defined as A(z) = product(1 - r_i * z^-1) = 1 - sum(a_k * z^-k).\n    The roots of the polynomial P(x) = product(x - r_i) are the poles r_i.\n    np.poly(poles) returns coefficients [1, c_1, ..., c_p] of P(x).\n    It can be shown that the AR coefficients are a_k = -c_k.\n    \"\"\"\n    if not poles:\n        return np.array([])\n    poly_coeffs = np.poly(poles)\n    # The first coefficient from np.poly is 1, corresponding to the highest power.\n    # The rest are c_1, c_2, ..., c_p. We negate them to get a_1, a_2, ..., a_p.\n    return -poly_coeffs[1:]\n\ndef generate_ar_data(\n    coeffs: np.ndarray, n: int, sigma_sq: float, seed: int, B: int\n) -> np.ndarray:\n    \"\"\"\n    Generates a synthetic AR(k) time series.\n    \"\"\"\n    rng = np.random.default_rng(seed)\n    total_len = n + B\n    noise = rng.normal(loc=0.0, scale=np.sqrt(sigma_sq), size=total_len)\n    x = np.zeros(total_len)\n    \n    k = len(coeffs)\n    if k == 0:\n        x = noise\n    else:\n        for t in range(k, total_len):\n            past_values = x[t-k:t]\n            x[t] = np.dot(coeffs, past_values[::-1]) + noise[t]\n            \n    return x[B:]\n\ndef yule_walker_fit(x: np.ndarray, k: int) -> tuple[np.ndarray, float]:\n    \"\"\"\n    Fits an AR(k) model using the Yule-Walker equations with biased autocorrelation.\n    \"\"\"\n    n = len(x)\n    \n    if k == 0:\n        r0 = np.dot(x, x) / n\n        return np.array([]), r0\n        \n    r_hat = np.zeros(k + 1)\n    r_hat[0] = np.dot(x, x) / n\n    for l in range(1, k + 1):\n        r_hat[l] = np.dot(x[l:], x[:-l]) / n\n    \n    R_k_col = r_hat[:k]\n    R_k = toeplitz(R_k_col)\n    r_k_vec = r_hat[1:k+1]\n    \n    try:\n        a_hat = np.linalg.solve(R_k, r_k_vec)\n    except np.linalg.LinAlgError:\n        return np.array([np.nan]*k), np.inf\n        \n    sigma_sq_hat = r_hat[0] - np.dot(a_hat, r_k_vec)\n    \n    return a_hat, sigma_sq_hat\n\ndef select_ar_order(test_case: TestCase, B: int) -> int:\n    \"\"\"\n    Selects the best AR model order for a given test case using AIC.\n    \"\"\"\n    if 'poles' in test_case.params:\n        coeffs = poles_to_coeffs(test_case.params['poles'])\n    else:\n        coeffs = np.array(test_case.params.get('coeffs', []))\n        \n    x = generate_ar_data(\n        coeffs, test_case.n, test_case.sigma_sq, test_case.seed, B\n    )\n    \n    min_aic = np.inf\n    best_k = -1\n\n    for k in range(test_case.k_max + 1):\n        _, sigma_sq_hat = yule_walker_fit(x, k)\n        \n        if sigma_sq_hat <= 0 or not np.isfinite(sigma_sq_hat):\n            continue\n\n        aic = test_case.n * np.log(sigma_sq_hat) + 2 * (k + 1)\n\n        if aic < min_aic:\n            min_aic = aic\n            best_k = k\n            \n    return best_k\n```", "answer": "$$\n\\boxed{[2,1,0,4,2,2]}\n$$", "id": "2864830"}]}