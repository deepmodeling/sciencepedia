{"hands_on_practices": [{"introduction": "现实世界中的系统常表现出振荡行为，这在其状态空间模型中对应于共轭复数特征值。虽然特征向量本身是复数的，但我们可以利用它们的实部和虚部构建一个实数不变子空间。这项实践将引导您推导实数分块规范型，这是一个无需借助复数运算即可分析和可视化振荡动态的关键工具 [@problem_id:2905099]。", "problem": "考虑一个连续时间线性时不变 (LTI) 状态空间模型，其状态矩阵为实矩阵 $A \\in \\mathbb{R}^{n \\times n}$，其中 $n \\geq 3$。假设 $A$ 恰好有一对共轭复特征值 $\\alpha \\pm \\mathrm{j}\\beta$ (其中 $\\beta > 0$，$\\mathrm{j}^{2} = -1$)，且其余所有特征值均为实的单根。令 $v \\in \\mathbb{C}^{n}$ 是 $A$ 对应于 $\\alpha + \\mathrm{j}\\beta$ 的一个右特征向量，并写作 $v = x + \\mathrm{j} y$，其中 $x, y \\in \\mathbb{R}^{n}$，且 $x$ 和 $y$ 线性无关。\n\n仅使用特征值和特征向量、相似变换以及不变子空间的定义，完成以下任务：\n\n- 构造一个实的、可逆的相似变换矩阵 $T \\in \\mathbb{R}^{n \\times n}$，其前两列为 $x$ 和 $y$，其余列将 $\\{x, y\\}$ 扩充为 $\\mathbb{R}^{n}$ 的一个实基，使得 $T^{-1} A T$ 是一个分块上三角矩阵，并且其首部的 $2 \\times 2$ 实分块能够捕获与 $\\alpha \\pm \\mathrm{j}\\beta$ 相关的动态特性。\n- 推导出精确的 $2 \\times 2$ 实矩阵 $C \\in \\mathbb{R}^{2 \\times 2}$，使得 $A [\\, x \\;\\; y \\,] = [\\, x \\;\\; y \\,] C$。\n\n基于此构造，确定首部 $2 \\times 2$ 分块 $C$ 的首一特征多项式 $\\phi_{2}(\\lambda)$，其形式为关于 $\\alpha$ 和 $\\beta$ 的闭式表达式。请以 $\\lambda$ 的单一解析表达式形式提供最终答案，其系数仅用 $\\alpha$ 和 $\\beta$ 表示。不需要也不允许进行任何数值近似。", "solution": "我们从基本定义开始。矩阵 $A \\in \\mathbb{R}^{n \\times n}$ 的一个特征值 $\\lambda \\in \\mathbb{C}$ 和一个特征向量 $v \\in \\mathbb{C}^{n} \\setminus \\{0\\}$ 满足\n$$\nA v = \\lambda v.\n$$\n由可逆矩阵 $T \\in \\mathbb{R}^{n \\times n}$ 进行的相似变换是映射 $A \\mapsto T^{-1} A T$。如果一个子空间 $\\mathcal{V} \\subset \\mathbb{R}^{n}$ 在 $A$ 下是不变的（即 $A \\mathcal{V} \\subseteq \\mathcal{V}$），那么在一个以 $\\mathcal{V}$ 的基为起始的基底下，$A$ 的矩阵表示将变为分块上三角形式，其首部分块表示 $A$ 在子空间 $\\mathcal{V}$ 上的限制。\n\n因为 $A$ 是实矩阵且有一对共轭复特征值 $\\alpha \\pm \\mathrm{j}\\beta$（$\\beta > 0$），令 $v = x + \\mathrm{j} y$ 是对应于 $\\alpha + \\mathrm{j}\\beta$ 的一个特征向量，其中 $x, y \\in \\mathbb{R}^{n}$ 线性无关。根据特征值方程，\n$$\nA v = (\\alpha + \\mathrm{j}\\beta) v.\n$$\n将 $v = x + \\mathrm{j} y$ 代入，并利用 $A$ 在 $\\mathbb{R}$ 上的线性性质，\n$$\nA (x + \\mathrm{j} y) = A x + \\mathrm{j} A y = (\\alpha + \\mathrm{j}\\beta)(x + \\mathrm{j} y) = (\\alpha x - \\beta y) + \\mathrm{j}(\\beta x + \\alpha y).\n$$\n通过令 $\\mathbb{C}^{n}$ 中的实部和虚部分别相等，我们得到两个耦合的实数方程：\n$$\nA x = \\alpha x - \\beta y, \\qquad A y = \\beta x + \\alpha y.\n$$\n将这些关系按列组合，得到\n$$\nA \\begin{bmatrix} x & y \\end{bmatrix} = \\begin{bmatrix} A x & A y \\end{bmatrix} = \\begin{bmatrix} \\alpha x - \\beta y & \\beta x + \\alpha y \\end{bmatrix} = \\begin{bmatrix} x & y \\end{bmatrix} \\begin{bmatrix} \\alpha & \\beta \\\\ -\\beta & \\alpha \\end{bmatrix}.\n$$\n定义实矩阵\n$$\nX \\coloneqq \\begin{bmatrix} x & y \\end{bmatrix} \\in \\mathbb{R}^{n \\times 2}, \\qquad C \\coloneqq \\begin{bmatrix} \\alpha & \\beta \\\\ -\\beta & \\alpha \\end{bmatrix} \\in \\mathbb{R}^{2 \\times 2}.\n$$\n于是，上述关系可紧凑地写为\n$$\nA X = X C.\n$$\n因此，实二维子空间 $\\mathcal{V} \\coloneqq \\operatorname{span}\\{x, y\\}$ 在 $A$ 下是不变的，因为 $A X$ 是 $X$ 的列向量的线性组合。选择任意实矩阵 $W \\in \\mathbb{R}^{n \\times (n-2)}$，使其列向量能将 $\\{x, y\\}$ 扩充为 $\\mathbb{R}^{n}$ 的一个实基，并定义可逆矩阵\n$$\nT \\coloneqq \\begin{bmatrix} X & W \\end{bmatrix} \\in \\mathbb{R}^{n \\times n}.\n$$\n在此基底下，由于 $\\mathcal{V}$ 是不变子空间，$A$ 的矩阵表示变为分块上三角形式：\n$$\nT^{-1} A T = \\begin{bmatrix} C & * \\\\ 0 & A_{22} \\end{bmatrix},\n$$\n其中 $C \\in \\mathbb{R}^{2 \\times 2}$ 如上文所定义，$A_{22} \\in \\mathbb{R}^{(n-2) \\times (n-2)}$ 表示 $A$ 在由 $W$ 的列向量张成的互补不变子空间上的作用。\n\n剩下的任务是计算首部 $2 \\times 2$ 分块 $C$ 的首一特征多项式 $\\phi_{2}(\\lambda)$。根据定义，\n$$\n\\phi_{2}(\\lambda) \\coloneqq \\det(\\lambda I_{2} - C) = \\det\\!\\left(\\begin{bmatrix} \\lambda & 0 \\\\ 0 & \\lambda \\end{bmatrix} - \\begin{bmatrix} \\alpha & \\beta \\\\ -\\beta & \\alpha \\end{bmatrix}\\right) = \\det\\!\\left(\\begin{bmatrix} \\lambda - \\alpha & -\\beta \\\\ \\beta & \\lambda - \\alpha \\end{bmatrix}\\right).\n$$\n计算该行列式，得到\n$$\n\\phi_{2}(\\lambda) = (\\lambda - \\alpha)^{2} + \\beta^{2} = \\lambda^{2} - 2 \\alpha \\lambda + \\alpha^{2} + \\beta^{2}.\n$$\n该多项式是首一多项式，其系数为实数且仅用 $\\alpha$ 和 $\\beta$ 表示，符合要求。在 $\\beta \\neq 0$ 的条件下（根据假设，此条件成立），它也是 $A$ 在 $\\mathcal{V}$ 上的限制的最小多项式。\n\n因此，所求的闭式表达式为\n$$\n\\phi_{2}(\\lambda) = \\lambda^{2} - 2 \\alpha \\lambda + \\left(\\alpha^{2} + \\beta^{2}\\right).\n$$", "answer": "$$\\boxed{\\lambda^{2} - 2 \\alpha \\lambda + \\left(\\alpha^{2} + \\beta^{2}\\right)}$$", "id": "2905099"}, {"introduction": "并非所有系统都是可对角化的；具有重根的系统可能表现出更复杂的动态行为。通过广义特征向量基找到的若尔当规范形为任何线性系统提供了最终的规范表示。通过这个详细的计算练习，您将掌握构建若尔当链以及相应相似变换的完整流程，从而能够分析任何线性时不变系统 [@problem_id:2905080]。", "problem": "一位工程师正在为一个单输入单输出线性时不变 (LTI) 状态空间系统建模，该系统的状态转移矩阵有一个重极点。考虑由下式给出的实矩阵 $A \\in \\mathbb{R}^{5 \\times 5}$：\n$$\nA \\;=\\;\n\\begin{pmatrix}\n2 & 0 & 0 & 1 & 0 \\\\\n0 & 2 & 0 & 0 & 0 \\\\\n0 & 0 & 2 & 0 & 0 \\\\\n0 & 1 & 0 & 2 & 0 \\\\\n0 & 0 & 1 & 0 & 2\n\\end{pmatrix}.\n$$\n从特征值、特征向量和广义特征向量的定义，以及若尔当规范形 (JCF) 的定义出发，完成以下任务：\n\n- 确定 $A$ 的特征值及其代数和几何重数。利用根子空间，构造一个广义特征向量基，从而得到一个若尔当链分解，并由此得到 $A$ 的一个若尔当规范形 $J$。\n- 构建相似变换矩阵 $S$，其列是您构造的广义特征向量，使得 $S^{-1} A S = J$。\n- 利用相似性和矩阵指数的定义，计算 $\\exp(A)$。\n\n最后，报告 $\\exp(A)$ 在位置 $(1,2)$ 处的标量元素的值，以精确的闭式解析表达式表示。请勿四舍五入；无需单位。", "solution": "题目要求对于给定的矩阵 $A$，求出矩阵指数 $\\exp(A)$ 在位置 $(1,2)$ 的元素。解答必须通过先求出 $A$ 的若尔当规范形来推导。\n\n给定的矩阵是：\n$$\nA =\n\\begin{pmatrix}\n2 & 0 & 0 & 1 & 0 \\\\\n0 & 2 & 0 & 0 & 0 \\\\\n0 & 0 & 2 & 0 & 0 \\\\\n0 & 1 & 0 & 2 & 0 \\\\\n0 & 0 & 1 & 0 & 2\n\\end{pmatrix}\n$$\n\n首先，我们确定 $A$ 的特征值。特征方程为 $\\det(A - \\lambda I) = 0$。\n$$\nA - \\lambda I =\n\\begin{pmatrix}\n2-\\lambda & 0 & 0 & 1 & 0 \\\\\n0 & 2-\\lambda & 0 & 0 & 0 \\\\\n0 & 0 & 2-\\lambda & 0 & 0 \\\\\n0 & 1 & 0 & 2-\\lambda & 0 \\\\\n0 & 0 & 1 & 0 & 2-\\lambda\n\\end{pmatrix}\n$$\n通过沿第一行进行代数余子式展开来计算行列式：\n$$\n\\det(A - \\lambda I) = (2-\\lambda) \\det \\begin{pmatrix} 2-\\lambda & 0 & 0 & 0 \\\\ 0 & 2-\\lambda & 0 & 0 \\\\ 1 & 0 & 2-\\lambda & 0 \\\\ 0 & 1 & 0 & 2-\\lambda \\end{pmatrix} - 1 \\cdot \\det \\begin{pmatrix} 0 & 2-\\lambda & 0 & 0 \\\\ 0 & 0 & 2-\\lambda & 0 \\\\ 0 & 1 & 0 & 0 \\\\ 0 & 0 & 1 & 2-\\lambda \\end{pmatrix}\n$$\n第二个行列式为零，因为它的第一列全为零。剩下的 $4 \\times 4$ 矩阵是下三角矩阵，所以其行列式是对角元素的乘积。\n$$\n\\det(A - \\lambda I) = (2-\\lambda) (2-\\lambda)^4 = (2-\\lambda)^5\n$$\n因此，存在单一特征值 $\\lambda = 2$，其代数重数为 $m_a = 5$。\n\n接下来，我们求几何重数 $m_g$，即特征空间 $E_2 = \\ker(A - 2I)$ 的维数。\n$$\nA - 2I = \\begin{pmatrix}\n0 & 0 & 0 & 1 & 0 \\\\\n0 & 0 & 0 & 0 & 0 \\\\\n0 & 0 & 0 & 0 & 0 \\\\\n0 & 1 & 0 & 0 & 0 \\\\\n0 & 0 & 1 & 0 & 0\n\\end{pmatrix}\n$$\n一个特征向量 $v = (x_1, x_2, x_3, x_4, x_5)^T$ 满足 $(A-2I)v = 0$，这给出了方程组 $x_4=0$，$x_2=0$ 和 $x_3=0$。变量 $x_1$ 和 $x_5$ 是自由变量。特征空间由向量 $(1, 0, 0, 0, 0)^T$ 和 $(0, 0, 0, 0, 1)^T$ 张成。特征空间的维数是 $2$，所以几何重数是 $m_g=2$。\n由于 $m_g < m_a$，矩阵 $A$ 不可对角化。对应于 $\\lambda=2$ 的若尔当块的数量是 $m_g=2$。\n\n为了确定这两个若尔当块的大小，我们分析 $(A-2I)$ 的幂的零度。令 $N = A-2I$。\n$d_1 = \\dim(\\ker(N)) = 2$。\n$$\nN^2 = (A-2I)^2 = \\begin{pmatrix}\n0 & 0 & 0 & 1 & 0 \\\\\n0 & 0 & 0 & 0 & 0 \\\\\n0 & 0 & 0 & 0 & 0 \\\\\n0 & 1 & 0 & 0 & 0 \\\\\n0 & 0 & 1 & 0 & 0\n\\end{pmatrix}\n\\begin{pmatrix}\n0 & 0 & 0 & 1 & 0 \\\\\n0 & 0 & 0 & 0 & 0 \\\\\n0 & 0 & 0 & 0 & 0 \\\\\n0 & 1 & 0 & 0 & 0 \\\\\n0 & 0 & 1 & 0 & 0\n\\end{pmatrix}\n= \\begin{pmatrix}\n0 & 1 & 0 & 0 & 0 \\\\\n0 & 0 & 0 & 0 & 0 \\\\\n0 & 0 & 0 & 0 & 0 \\\\\n0 & 0 & 0 & 0 & 0 \\\\\n0 & 0 & 0 & 0 & 0\n\\end{pmatrix}\n$$\n$N^2$ 的零空间由 $x_2=0$ 定义，其维数为 4。所以，$d_2 = \\dim(\\ker(N^2)) = 4$。\n$$\nN^3 = N^2 N = \\begin{pmatrix}\n0 & 1 & 0 & 0 & 0 \\\\\n0 & 0 & 0 & 0 & 0 \\\\\n0 & 0 & 0 & 0 & 0 \\\\\n0 & 0 & 0 & 0 & 0 \\\\\n0 & 0 & 0 & 0 & 0\n\\end{pmatrix}\n\\begin{pmatrix}\n0 & 0 & 0 & 1 & 0 \\\\\n0 & 0 & 0 & 0 & 0 \\\\\n0 & 0 & 0 & 0 & 0 \\\\\n0 & 1 & 0 & 0 & 0 \\\\\n0 & 0 & 1 & 0 & 0\n\\end{pmatrix} = 0_{5 \\times 5}\n$$\n$N^3$ 的零空间是 $\\mathbb{R}^5$。所以，$d_3 = \\dim(\\ker(N^3))=5$。大小为 $k$ 的若尔当块的数量由公式 $N_k = (d_k - d_{k-1}) - (d_{k+1} - d_k) = 2d_k - d_{k-1} - d_{k+1}$ 给出。\n$N_3 = 2d_3 - d_2 - d_4 = 2(5) - 4 - 5 = 1$。（因为 $d_4=5$）\n$N_2 = 2d_2 - d_1 - d_3 = 2(4) - 2 - 5 = 1$。\n$N_1 = 2d_1 - d_0 - d_2 = 2(2) - 0 - 4 = 0$。\n所以有一个大小为 3 的块和一个大小为 2 的块。若尔当规范形 $J$ 是：\n$$\nJ = \\begin{pmatrix}\n2 & 1 & 0 & 0 & 0 \\\\\n0 & 2 & 1 & 0 & 0 \\\\\n0 & 0 & 2 & 0 & 0 \\\\\n0 & 0 & 0 & 2 & 1 \\\\\n0 & 0 & 0 & 0 & 2\n\\end{pmatrix}\n$$\n现在，我们构造广义特征向量基。我们需要一个长度为 3 的链和一个长度为 2 的链。\n对于长度为 3 的链，我们需要一个向量 $u_3 \\in \\ker(N^3) \\setminus \\ker(N^2)$。$\\ker(N^2)$ 由 $x_2=0$ 的向量组成。我们可以选择 $u_3 = (0,1,0,0,0)^T = e_2$。\n该链为 $\\{u_1, u_2, u_3\\}$，其中 $u_2 = N u_3$ 且 $u_1 = N u_2 = N^2 u_3$。\n$u_2 = N u_3 = (A-2I)e_2 = (0,0,0,1,0)^T = e_4$。\n$u_1 = N u_2 = (A-2I)e_4 = (1,0,0,0,0)^T = e_1$。\n第一个链是 $\\{e_1, e_4, e_2\\}$。\n\n对于长度为 2 的链，我们需要一个向量 $w_2 \\in \\ker(N^2) \\setminus \\ker(N)$，它与第一个链中已有的向量在 $\\ker(N^2)/\\ker(N)$ 上的投影线性无关。$\\ker(N^2)$ 的一组基是 $\\{e_1, e_3, e_4, e_5\\}$。$\\ker(N)$ 的一组基是 $\\{e_1, e_5\\}$。来自第一个链的向量 $u_2=e_4$ 属于 $\\ker(N^2) \\setminus \\ker(N)$。我们可以选择 $w_2=e_3=(0,0,1,0,0)^T$，它也属于 $\\ker(N^2) \\setminus \\ker(N)$ 并且与 $e_4$ 模 $\\ker(N)$ 线性无关。\n该链为 $\\{w_1, w_2\\}$，其中 $w_1 = N w_2$。\n$w_1 = N w_2 = (A-2I)e_3 = (0,0,0,0,1)^T = e_5$。\n第二个链是 $\\{e_5, e_3\\}$。\n\n相似变换矩阵 $S$ 由这些广义特征向量作为列构成，按链的顺序排列：$S = [u_1 | u_2 | u_3 | w_1 | w_2]$。\n$$\nS = [e_1 | e_4 | e_2 | e_5 | e_3] = \\begin{pmatrix}\n1 & 0 & 0 & 0 & 0 \\\\\n0 & 0 & 1 & 0 & 0 \\\\\n0 & 0 & 0 & 0 & 1 \\\\\n0 & 1 & 0 & 0 & 0 \\\\\n0 & 0 & 0 & 1 & 0\n\\end{pmatrix}\n$$\n这是一个置换矩阵，因此它是正交的，并且它的逆是它的转置：$S^{-1} = S^T$。\n$$\nS^{-1} = S^T = \\begin{pmatrix}\n1 & 0 & 0 & 0 & 0 \\\\\n0 & 0 & 0 & 1 & 0 \\\\\n0 & 1 & 0 & 0 & 0 \\\\\n0 & 0 & 0 & 0 & 1 \\\\\n0 & 0 & 1 & 0 & 0\n\\end{pmatrix}\n$$\n我们要计算 $\\exp(A) = S \\exp(J) S^{-1}$。首先计算 $\\exp(J)$。\n$J$ 是块对角矩阵，所以 $\\exp(J) = \\text{diag}(\\exp(J_3(2)), \\exp(J_2(2)))$。\n对于一个若尔当块 $J_k(\\lambda)$，$\\exp(J_k(\\lambda)) = \\exp(\\lambda t) \\sum_{i=0}^{k-1} \\frac{t^i}{i!} N_k^i$ 在 $t=1$ 时的值。\n$$\n\\exp(J_3(2)) = \\exp(2) \\left(I + N_3 + \\frac{1}{2}N_3^2\\right) = \\exp(2) \\begin{pmatrix} 1 & 1 & 1/2 \\\\ 0 & 1 & 1 \\\\ 0 & 0 & 1 \\end{pmatrix}\n$$\n$$\n\\exp(J_2(2)) = \\exp(2) \\left(I + N_2\\right) = \\exp(2) \\begin{pmatrix} 1 & 1 \\\\ 0 & 1 \\end{pmatrix}\n$$\n因此，\n$$\n\\exp(J) = \\exp(2) \\begin{pmatrix}\n1 & 1 & 1/2 & 0 & 0 \\\\\n0 & 1 & 1 & 0 & 0 \\\\\n0 & 0 & 1 & 0 & 0 \\\\\n0 & 0 & 0 & 1 & 1 \\\\\n0 & 0 & 0 & 0 & 1\n\\end{pmatrix}\n$$\n接下来，我们计算 $S \\exp(J)$：\n$$\nS \\exp(J) = \\exp(2) \\begin{pmatrix}\n1 & 0 & 0 & 0 & 0 \\\\\n0 & 0 & 1 & 0 & 0 \\\\\n0 & 0 & 0 & 0 & 1 \\\\\n0 & 1 & 0 & 0 & 0 \\\\\n0 & 0 & 0 & 1 & 0\n\\end{pmatrix}\n\\begin{pmatrix}\n1 & 1 & 1/2 & 0 & 0 \\\\\n0 & 1 & 1 & 0 & 0 \\\\\n0 & 0 & 1 & 0 & 0 \\\\\n0 & 0 & 0 & 1 & 1 \\\\\n0 & 0 & 0 & 0 & 1\n\\end{pmatrix}\n= \\exp(2) \\begin{pmatrix}\n1 & 1 & 1/2 & 0 & 0 \\\\\n0 & 0 & 1 & 0 & 0 \\\\\n0 & 0 & 0 & 0 & 1 \\\\\n0 & 1 & 1 & 0 & 0 \\\\\n0 & 0 & 0 & 1 & 1\n\\end{pmatrix}\n$$\n最后，我们计算 $\\exp(A) = (S \\exp(J)) S^{-1}$。我们只需要元素 $(\\exp(A))_{1,2}$。它等于 $(S \\exp(J))$ 的第一行与 $(S^{-1})$ 的第二列的点积。\n- $(S \\exp(J))$ 的第一行是 $\\exp(2) \\cdot (1, 1, 1/2, 0, 0)$。\n- $(S^{-1})$ 的第二列是 $S^T$ 的第二列，也就是 $S$ 的第二行。$S$ 的第二行是 $(0, 0, 1, 0, 0)$。因此 $(S^{-1})$ 的第二列是 $(0, 0, 1, 0, 0)^T$。\n\n点积为：\n$$\n(\\exp(A))_{1,2} = \\exp(2) \\cdot \\left( 1 \\cdot 0 + 1 \\cdot 0 + \\frac{1}{2} \\cdot 1 + 0 \\cdot 0 + 0 \\cdot 0 \\right) = \\frac{1}{2}\\exp(2)\n$$\n作为检验，由于 $A=2I+N$ 且 $N=A-2I$，并且 $2I$ 与 $N$ 可交换，我们有 $\\exp(A) = \\exp(2I+N)=\\exp(2I)\\exp(N) = \\exp(2) \\exp(N)$。\n$\\exp(N) = I + N + \\frac{1}{2}N^2$，因为 $N^3=0$。\n$$\n\\exp(N) = \\begin{pmatrix} 1 & 0 & 0 & 0 & 0 \\\\ 0 & 1 & 0 & 0 & 0 \\\\ 0 & 0 & 1 & 0 & 0 \\\\ 0 & 0 & 0 & 1 & 0 \\\\ 0 & 0 & 0 & 0 & 1 \\end{pmatrix} + \\begin{pmatrix} 0 & 0 & 0 & 1 & 0 \\\\ 0 & 0 & 0 & 0 & 0 \\\\ 0 & 0 & 0 & 0 & 0 \\\\ 0 & 1 & 0 & 0 & 0 \\\\ 0 & 0 & 1 & 0 & 0 \\end{pmatrix} + \\frac{1}{2} \\begin{pmatrix} 0 & 1 & 0 & 0 & 0 \\\\ 0 & 0 & 0 & 0 & 0 \\\\ 0 & 0 & 0 & 0 & 0 \\\\ 0 & 0 & 0 & 0 & 0 \\\\ 0 & 0 & 0 & 0 & 0 \\end{pmatrix} = \\begin{pmatrix} 1 & 1/2 & 0 & 1 & 0 \\\\ 0 & 1 & 0 & 0 & 0 \\\\ 0 & 0 & 1 & 0 & 0 \\\\ 0 & 1 & 0 & 1 & 0 \\\\ 0 & 0 & 1 & 0 & 1 \\end{pmatrix}\n$$\n所以 $\\exp(A) = \\exp(2) \\exp(N)$，并且元素 $(\\exp(A))_{1,2}$ 是 $\\exp(2) \\cdot (\\exp(N))_{1,2} = \\exp(2) \\cdot \\frac{1}{2}$。结果得到验证。", "answer": "$$\\boxed{\\frac{1}{2}\\exp(2)}$$", "id": "2905080"}, {"introduction": "在实践中，系统模型可能来自不同的实验或使用不同的辨识算法，从而得到数值上不同的矩阵表示。通过将相似性问题重构为一个线性方程组并以最小二乘法求解，我们可以对这个抽象概念进行数值检验。这项编码练习将理论与实践联系起来，为您提供一种稳健的计算方法，以确定两个状态空间实现是否描述了相同的底层系统动态 [@problem_id:2905067]。", "problem": "给定两个具有相同维度的离散时间线性时不变 (LTI) 状态空间实现，由四元组 $(A,B,C,D)$ 表示，其中 $A \\in \\mathbb{R}^{n \\times n}$，$B \\in \\mathbb{R}^{n \\times m}$，$C \\in \\mathbb{R}^{p \\times n}$，以及 $D \\in \\mathbb{R}^{p \\times m}$。两个实现 $(A_1,B_1,C_1,D_1)$ 和 $(A_2,B_2,C_2,D_2)$ 被认为是相似的（即状态空间等价），当且仅当存在一个可逆矩阵 $T \\in \\mathbb{R}^{n \\times n}$ 使得以下等式成立：\n$$\nA_2 = T A_1 T^{-1}, \\quad B_2 = T B_1, \\quad C_2 = C_1 T^{-1}, \\quad D_2 = D_1.\n$$\n您的任务是编写一个完整的程序，对每个提供的测试用例，通过从相似性关系所蕴含的矩阵等式中以最小二乘法求解 $T$，来判断两个给定的实现是否相似。请按如下方式处理该问题：\n\n- 根据等式 $A_2 T - T A_1 = 0$、$B_2 - T B_1 = 0$ 和 $C_2 T - C_1 = 0$ 建立一个关于 $T$ 的未知元素的线性方程组，并以最小二乘法求解 $T$。使用任何数学上合理的方法将这些矩阵等式转换为关于 $T$ 的未知元素的线性系统。\n- 通过计算以下 Frobenius 范数残差来评估拟合优度：\n  - $r_A = \\|A_2 T - T A_1\\|_F$，\n  - $r_B = \\|B_2 - T B_1\\|_F$，\n  - $r_C = \\|C_2 T - C_1\\|_F$，\n  - $r_D = \\|D_2 - D_1\\|_F$。\n- 当且仅当以下所有条件都满足时，判定两个实现是相似的：\n  - $r_A \\le \\tau_{\\text{res}}$，$r_B \\le \\tau_{\\text{res}}$，$r_C \\le \\tau_{\\text{res}}$，以及 $r_D \\le \\tau_{\\text{res}}$，\n  - $T$ 的最小奇异值至少为 $\\tau_{\\sigma}$（以证明 $T$ 是数值可逆的）。\n- 使用数值阈值 $\\tau_{\\text{res}} = 1\\times 10^{-6}$ 和 $\\tau_{\\sigma} = 1\\times 10^{-8}$。\n\n本问题不涉及物理单位。所有可能出现的角度，都应被视为无量纲实数。\n\n测试套件：\n\n对于下文的每个案例，您必须应用上述决策规则并输出一个布尔结果。这五个案例旨在覆盖精确相似、小扰动下的近似相似、不相似、一个亏损但相似的案例，以及一个欠定边界案例。\n\n- 案例 1（精确相似，$n=3$, $m=1$, $p=1$）：给定\n$$\nA_1^{(1)}=\\begin{bmatrix}0 & 1 & 0\\\\ -2 & -3 & 0\\\\ 0 & 0.5 & -1\\end{bmatrix},\\;\nB_1^{(1)}=\\begin{bmatrix}0\\\\ 1\\\\ 1\\end{bmatrix},\\;\nC_1^{(1)}=\\begin{bmatrix}1 & 0 & 1\\end{bmatrix},\\;\nD_1^{(1)}=\\begin{bmatrix}0\\end{bmatrix},\n$$\n和\n$$\nT^{(1)}=\\begin{bmatrix}2 & 0 & 0\\\\ 0 & 1 & 1\\\\ 0 & 0 & 1\\end{bmatrix}.\n$$\n构造\n$$\nA_2^{(1)} = T^{(1)} A_1^{(1)} \\left(T^{(1)}\\right)^{-1},\\quad\nB_2^{(1)} = T^{(1)} B_1^{(1)},\\quad\nC_2^{(1)} = C_1^{(1)} \\left(T^{(1)}\\right)^{-1},\\quad\nD_2^{(1)} = D_1^{(1)}.\n$$\n\n- 案例 2（小扰动下的近似相似）：从案例 1 出发，通过以下方式扰动第二个实现\n$$\nE_A=\\begin{bmatrix}0 & 0 & 0\\\\ 1\\times 10^{-7} & -1\\times 10^{-7} & 2\\times 10^{-7}\\\\ 0 & 0 & -1\\times 10^{-7}\\end{bmatrix},\\;\nE_B=\\begin{bmatrix}1\\times 10^{-7}\\\\ 0\\\\ 0\\end{bmatrix},\\;\nE_C=\\begin{bmatrix}0 & -1\\times 10^{-7} & 0\\end{bmatrix}.\n$$\n使用\n$$\nA_2^{(2)} = A_2^{(1)} + E_A,\\quad B_2^{(2)} = B_2^{(1)} + E_B,\\quad C_2^{(2)} = C_2^{(1)} + E_C,\\quad D_2^{(2)} = D_2^{(1)}.\n$$\n保持 $(A_1^{(2)},B_1^{(2)},C_1^{(2)},D_1^{(2)})=(A_1^{(1)},B_1^{(1)},C_1^{(1)},D_1^{(1)})$ 完全不变。\n\n- 案例 3（不相似，$n=2$，$m=1$，$p=1$）：定义\n$$\nA_1^{(3)}=\\begin{bmatrix}0 & 0\\\\ 0 & 1\\end{bmatrix},\\;\nB_1^{(3)}=\\begin{bmatrix}1\\\\ 0\\end{bmatrix},\\;\nC_1^{(3)}=\\begin{bmatrix}1 & 1\\end{bmatrix},\\;\nD_1^{(3)}=\\begin{bmatrix}0\\end{bmatrix},\n$$\n和\n$$\nA_2^{(3)}=\\begin{bmatrix}0 & 0\\\\ 0 & 2\\end{bmatrix},\\;\nB_2^{(3)}=\\begin{bmatrix}1\\\\ 0\\end{bmatrix},\\;\nC_2^{(3)}=\\begin{bmatrix}1 & 1\\end{bmatrix},\\;\nD_2^{(3)}=\\begin{bmatrix}0\\end{bmatrix}.\n$$\n\n- 案例 4（亏损但相似，$n=3$，$m=1$，$p=1$）：给定\n$$\nA_1^{(4)}=\\begin{bmatrix}2 & 1 & 0\\\\ 0 & 2 & 0\\\\ 0 & 0 & 3\\end{bmatrix},\\;\nB_1^{(4)}=\\begin{bmatrix}1\\\\ 0\\\\ 1\\end{bmatrix},\\;\nC_1^{(4)}=\\begin{bmatrix}0 & 1 & 1\\end{bmatrix},\\;\nD_1^{(4)}=\\begin{bmatrix}0\\end{bmatrix},\n$$\n和\n$$\nT^{(4)}=\\begin{bmatrix}1 & 1 & 0\\\\ 0 & 1 & 0\\\\ 1 & 0 & 1\\end{bmatrix}.\n$$\n构造\n$$\nA_2^{(4)} = T^{(4)} A_1^{(4)} \\left(T^{(4)}\\right)^{-1},\\quad\nB_2^{(4)} = T^{(4)} B_1^{(4)},\\quad\nC_2^{(4)} = C_1^{(4)} \\left(T^{(4)}\\right)^{-1},\\quad\nD_2^{(4)} = D_1^{(4)}.\n$$\n\n- 案例 5（欠定边界案例；实现相同但变换不唯一，$n=2$，$m=1$，$p=1$）：定义\n$$\nA_1^{(5)}=A_2^{(5)}=\\begin{bmatrix}1 & 0\\\\ 0 & 1\\end{bmatrix},\\;\nB_1^{(5)}=B_2^{(5)}=\\begin{bmatrix}0\\\\ 0\\end{bmatrix},\\;\nC_1^{(5)}=C_2^{(5)}=\\begin{bmatrix}0 & 0\\end{bmatrix},\\;\nD_1^{(5)}=D_2^{(5)}=\\begin{bmatrix}0\\end{bmatrix}.\n$$\n注意，在这种欠定场景中，最小化残差的最小二乘解可能返回一个奇异的 $T$。根据上述决策规则，这种情况必须被判定为不相似，因为恢复出的 $T$ 未能证明其为一个数值上可逆的变换。\n\n程序要求：\n\n- 实现一个求解器，该求解器为每个案例构建并求解关于 $T$ 的最小二乘问题，计算 $r_A$、$r_B$、$r_C$、$r_D$，检查 $T$ 的最小奇异值，并使用阈值 $\\tau_{\\text{res}} = 1\\times 10^{-6}$ 和 $\\tau_{\\sigma} = 1\\times 10^{-8}$ 为每个案例返回一个布尔决策。\n- 您的程序应生成单行输出，其中包含案例 1 到 5 的五个布尔结果，格式为方括号内以逗号分隔的列表，不含空格，并使用精确的字面量 $\\texttt{True}$ 和 $\\texttt{False}$（例如：$\\texttt{[True,False,True,False,True]}$）。", "solution": "所提出的问题是计算线性系统理论中一个定义明确的练习，特别涉及状态空间相似性的概念。它具有科学依据、客观，并包含了进行唯一、可验证求解所需的所有必要信息。因此，这是一个有效的问题。\n\n问题的核心是确定两个离散时间 LTI 状态空间实现 $(A_1, B_1, C_1, D_1)$ 和 $(A_2, B_2, C_2, D_2)$ 是否相似。如果存在一个可逆变换矩阵 $T \\in \\mathbb{R}^{n \\times n}$ 使得以下等式成立，则两个实现被定义为相似：\n$$\nA_2 = T A_1 T^{-1}, \\quad B_2 = T B_1, \\quad C_2 = C_1 T^{-1}, \\quad D_2 = D_1\n$$\n这里，$A \\in \\mathbb{R}^{n \\times n}$，$B \\in \\mathbb{R}^{n \\times m}$，$C \\in \\mathbb{R}^{p \\times n}$ 以及 $D \\in \\mathbb{R}^{p \\times m}$。问题要求我们通过为矩阵 $T$ 的未知元素建立并求解一个线性方程组来验证这些条件。\n\n相似性条件必须首先被重排为一组关于 $T$ 的线性方程。通过对方程进行变换，我们得到待求解的系统：\n1.  $A_2 T - T A_1 = 0$\n2.  $T B_1 = B_2$\n3.  $C_2 T = C_1$\n\n这些是矩阵方程，必须被转换为 $\\mathcal{A} \\vec{t} = \\vec{b}$ 形式的标准向量-矩阵线性系统，其中 $\\vec{t}$ 包含 $T$ 的所有元素。这可以通过使用向量化算子 $\\text{vec}(\\cdot)$ 来实现，该算子将矩阵的各列堆叠成单个列向量。令 $\\vec{t} = \\text{vec}(T) \\in \\mathbb{R}^{n^2 \\times 1}$。\n\n我们使用克罗内克积 ($\\otimes$) 的基本恒等式：$\\text{vec}(AXB) = (B^T \\otimes A)\\text{vec}(X)$。将此恒等式应用于每个方程可得：\n\n1.  对于 $A_2 T - T A_1 = 0$：\n    这是一个 Sylvester 方程。我们可以将其写作 $A_2 T I_n - I_n T A_1 = 0$。向量化后得到：\n    $$\n    \\text{vec}(A_2 T I_n) - \\text{vec}(I_n T A_1) = \\vec{0}\n    $$\n    $$\n    (I_n^T \\otimes A_2)\\text{vec}(T) - (A_1^T \\otimes I_n)\\text{vec}(T) = \\vec{0}\n    $$\n    $$\n    \\underbrace{(I_n \\otimes A_2 - A_1^T \\otimes I_n)}_{\\mathcal{A}_A} \\vec{t} = \\vec{0}_{n^2 \\times 1}\n    $$\n    这给出了一个 $n^2 \\times n^2$ 的系数矩阵 $\\mathcal{A}_A$。\n\n2.  对于 $T B_1 = B_2$：\n    这可以写作 $I_n T B_1 = B_2$。向量化后得到：\n    $$\n    \\text{vec}(I_n T B_1) = \\text{vec}(B_2)\n    $$\n    $$\n    \\underbrace{(B_1^T \\otimes I_n)}_{\\mathcal{A}_B} \\vec{t} = \\underbrace{\\text{vec}(B_2)}_{\\vec{b}_B}\n    $$\n    这给出了一个 $nm \\times n^2$ 的系数矩阵 $\\mathcal{A}_B$ 和一个 $nm \\times 1$ 的向量 $\\vec{b}_B$。\n\n3.  对于 $C_2 T = C_1$：\n    这可以写作 $C_2 T I_n = C_1$。向量化后得到：\n    $$\n    \\text{vec}(C_2 T I_n) = \\text{vec}(C_1)\n    $$\n    $$\n    \\underbrace{(I_n \\otimes C_2)}_{\\mathcal{A}_C} \\vec{t} = \\underbrace{\\text{vec}(C_1)}_{\\vec{b}_C}\n    $$\n    这给出了一个 $pn \\times n^2$ 的系数矩阵 $\\mathcal{A}_C$ 和一个 $pn \\times 1$ 的向量 $\\vec{b}_C$。\n\n这三个系统通过堆叠系数矩阵和右侧向量，被组合成一个单一的、可能超定的系统 $\\mathcal{A} \\vec{t} = \\vec{b}$：\n$$\n\\mathcal{A} = \\begin{bmatrix} \\mathcal{A}_A \\\\ \\mathcal{A}_B \\\\ \\mathcal{A}_C \\end{bmatrix}, \\quad \\vec{b} = \\begin{bmatrix} \\vec{0}_{n^2 \\times 1} \\\\ \\vec{b}_B \\\\ \\vec{b}_C \\end{bmatrix}\n$$\n最终得到的矩阵 $\\mathcal{A}$ 的维度为 $(n^2 + nm + pn) \\times n^2$。\n\n因为问题可能涉及不相似的系统或数值噪声，我们不期望得到精确解。因此，我们以最小二乘意义上求解该系统，找到最小化欧几里得范数 $\\|\\mathcal{A} \\vec{t} - \\vec{b}\\|_2$ 的向量 $\\vec{t}$。得到的向量 $\\vec{t}$ 随后被重塑为候选变换矩阵 $T \\in \\mathbb{R}^{n \\times n}$。\n\n相似性的最终判定基于两个标准：\n1.  **残差分析**：所获得的矩阵 $T$ 必须近似满足原始的相似性方程。我们计算残差的 Frobenius 范数：\n    - $r_A = \\|A_2 T - T A_1\\|_F$\n    - $r_B = \\|B_2 - T B_1\\|_F$\n    - $r_C = \\|C_2 T - C_1\\|_F$\n    - $r_D = \\|D_2 - D_1\\|_F$\n    所有四个残差必须小于或等于一个指定的容差，$r_i \\le \\tau_{\\text{res}} = 1 \\times 10^{-6}$。\n\n2.  **可逆性检查**：相似变换必须是可逆的。我们通过计算 $T$ 的奇异值来数值地验证这一点，并确保最小奇异值 $\\sigma_{\\min}(T)$ 高于某个阈值：$\\sigma_{\\min}(T) \\ge \\tau_{\\sigma} = 1 \\times 10^{-8}$。这个条件证明了矩阵 $T$ 是良态的并且在数值上不是奇异的。\n\n当且仅当残差和可逆性标准都得到满足时，一对状态空间实现才被宣告为相似。这个鲁棒的程序能正确处理精确情况、带有小数值扰动的情况以及根本不相似的情况，包括那些最小二乘问题是欠定的并产生奇异变换矩阵的情况。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Main function to solve the problem for all test cases.\n    \"\"\"\n    TAU_RES = 1e-6\n    TAU_SIGMA = 1e-8\n\n    def check_similarity(A1, B1, C1, D1, A2, B2, C2, D2):\n        \"\"\"\n        Checks if two state-space realizations are similar based on the problem's criteria.\n\n        Args:\n            A1, B1, C1, D1: Matrices for the first realization.\n            A2, B2, C2, D2: Matrices for the second realization.\n\n        Returns:\n            A boolean indicating whether the systems are deemed similar.\n        \"\"\"\n        n = A1.shape[0]\n        m = B1.shape[1]\n        p = C1.shape[0]\n        \n        # Identity matrix of size n\n        In = np.identity(n)\n\n        # 1. Formulate the linear system A_ls @ t_vec = b_ls\n        # Equation from A2*T - T*A1 = 0\n        A_A = np.kron(In, A2) - np.kron(A1.T, In)\n        \n        # Equation from T*B1 = B2\n        A_B = np.kron(B1.T, In)\n        b_B = B2.flatten(order='F')\n        \n        # Equation from C2*T = C1\n        A_C = np.kron(In, C2)\n        b_C = C1.flatten(order='F')\n        \n        # Stack the matrices and vectors to form the full system\n        A_ls = np.vstack([A_A, A_B, A_C])\n        b_ls = np.concatenate([np.zeros(n * n), b_B, b_C])\n\n        # 2. Solve for t_vec in the least-squares sense\n        t_vec, _, _, _ = np.linalg.lstsq(A_ls, b_ls, rcond=None)\n        \n        # Reshape the solution vector t_vec into the matrix T\n        T = t_vec.reshape((n, n), order='F')\n\n        # 3. Evaluate the fit and invertibility\n        # Compute residuals\n        r_A = np.linalg.norm(A2 @ T - T @ A1, 'fro')\n        r_B = np.linalg.norm(B2 - T @ B1, 'fro')\n        r_C = np.linalg.norm(C2 @ T - C1, 'fro')\n        r_D = np.linalg.norm(D2 - D1, 'fro')\n        \n        # Compute the smallest singular value of T\n        s = np.linalg.svd(T, compute_uv=False)\n        min_sv = np.min(s)\n\n        # 4. Make the decision\n        is_similar = (r_A <= TAU_RES and\n                      r_B <= TAU_RES and\n                      r_C <= TAU_RES and\n                      r_D <= TAU_RES and\n                      min_sv >= TAU_SIGMA)\n                      \n        return is_similar\n\n    results = []\n\n    # Case 1: Exact similarity\n    A1_1 = np.array([[0, 1, 0], [-2, -3, 0], [0, 0.5, -1]])\n    B1_1 = np.array([[0], [1], [1]])\n    C1_1 = np.array([[1, 0, 1]])\n    D1_1 = np.array([[0]])\n    T_1 = np.array([[2, 0, 0], [0, 1, 1], [0, 0, 1]])\n    T_1_inv = np.linalg.inv(T_1)\n    A2_1 = T_1 @ A1_1 @ T_1_inv\n    B2_1 = T_1 @ B1_1\n    C2_1 = C1_1 @ T_1_inv\n    D2_1 = D1_1\n    results.append(check_similarity(A1_1, B1_1, C1_1, D1_1, A2_1, B2_1, C2_1, D2_1))\n\n    # Case 2: Approximately similar under small perturbations\n    E_A = np.array([[0, 0, 0], [1e-7, -1e-7, 2e-7], [0, 0, -1e-7]])\n    E_B = np.array([[1e-7], [0], [0]])\n    E_C = np.array([[0, -1e-7, 0]])\n    A2_2 = A2_1 + E_A\n    B2_2 = B2_1 + E_B\n    C2_2 = C2_1 + E_C\n    D2_2 = D2_1\n    results.append(check_similarity(A1_1, B1_1, C1_1, D1_1, A2_2, B2_2, C2_2, D2_2))\n\n    # Case 3: Not similar\n    A1_3 = np.array([[0, 0], [0, 1]])\n    B1_3 = np.array([[1], [0]])\n    C1_3 = np.array([[1, 1]])\n    D1_3 = np.array([[0]])\n    A2_3 = np.array([[0, 0], [0, 2]])\n    B2_3 = np.array([[1], [0]])\n    C2_3 = np.array([[1, 1]])\n    D2_3 = np.array([[0]])\n    results.append(check_similarity(A1_3, B1_3, C1_3, D1_3, A2_3, B2_3, C2_3, D2_3))\n\n    # Case 4: Defective but similar\n    A1_4 = np.array([[2, 1, 0], [0, 2, 0], [0, 0, 3]])\n    B1_4 = np.array([[1], [0], [1]])\n    C1_4 = np.array([[0, 1, 1]])\n    D1_4 = np.array([[0]])\n    T_4 = np.array([[1, 1, 0], [0, 1, 0], [1, 0, 1]])\n    T_4_inv = np.linalg.inv(T_4)\n    A2_4 = T_4 @ A1_4 @ T_4_inv\n    B2_4 = T_4 @ B1_4\n    C2_4 = C1_4 @ T_4_inv\n    D2_4 = D1_4\n    results.append(check_similarity(A1_4, B1_4, C1_4, D1_4, A2_4, B2_4, C2_4, D2_4))\n\n    # Case 5: Underdetermined boundary case\n    A1_5 = np.array([[1, 0], [0, 1]])\n    B1_5 = np.array([[0], [0]])\n    C1_5 = np.array([[0, 0]])\n    D1_5 = np.array([[0]])\n    A2_5 = A1_5\n    B2_5 = B1_5\n    C2_5 = C1_5\n    D2_5 = D1_5\n    results.append(check_similarity(A1_5, B1_5, C1_5, D1_5, A2_5, B2_5, C2_5, D2_5))\n    \n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n\n```", "id": "2905067"}]}