{"hands_on_practices": [{"introduction": "快速傅里叶变换 (FFT) 的核心优势在于其计算效率远超朴素的离散傅里叶变换 (DFT)。本练习旨在通过一个具体实例，让你亲手验证这一优势的来源。通过为长度为 $N=8$ 的序列详细分解基-2 FFT 的蝶形运算阶段，你将精确计算其所需的复数乘法和加法次数，并与 DFT 的 $O(N^2)$ 复杂度进行直接对比，从而对 FFT 的 $O(N \\log N)$ 效率建立直观且深刻的理解。[@problem_id:2859618]", "problem": "考虑长度为 $N$ 的离散傅里叶变换 (DFT)，其对于序列 $x[n]$ ($0 \\leq n \\leq N-1$) 的定义如下：\n$$\nX[k] \\triangleq \\sum_{n=0}^{N-1} x[n]\\, W_{N}^{kn}, \\quad 0 \\leq k \\leq N-1,\n$$\n其中 $W_{N} \\triangleq \\exp\\!\\left(-\\mathrm{j}\\,\\frac{2\\pi}{N}\\right)$ 是单位的 $N$ 次主根，且 $\\mathrm{j}^2=-1$。假设采用标准算术成本模型，其中每次复数加法计为一次复数加法，每次复数与复常数（包括任何整数 $m$ 的旋转因子 $W_{N}^{m}$）的乘法计为一次复数乘法；不利用任何简化，例如 $W_{N}^{0}=1$、$W_{N}^{N/2}=-1$ 或像 $\\pm \\mathrm{j}$ 这样的特殊值。\n\n对于 $N=8$ 的情况，使用基-$2$ 时域抽取 (decimation-in-time) 快速傅里叶变换 (FFT)，其蝶形运算是原位进行的，且在每个连续阶段中合并的索引之间的步长减半。请完成以下任务：\n\n- 对于三个阶段中的每一个阶段，明确列出所有被组合的时间索引的蝶形对 $(p,q)$ 以及相应的旋转因子指数 $e$，使得蝶形运算在适当的分支上使用 $W_{8}^{e}$。\n- 根据第一性原理和以上定义，推导当 $N=8$ 时，该基-$2$ 时域抽取 FFT 所执行的复数加法和复数乘法的总次数。\n- 使用上面给出的 DFT 定义和相同的算术成本模型，推导当 $N=8$ 时，通过朴素的直接计算 DFT 所需的复数加法和复数乘法的总次数。\n- 通过一并报告所有四个计数值来比较这两个总数。\n\n最终答案以 LaTeX $\\texttt{pmatrix}$ 环境中的单行矩阵形式报告，顺序为 $\\big(A_{\\text{FFT}}, M_{\\text{FFT}}, A_{\\text{DFT}}, M_{\\text{DFT}}\\big)$，其中 $A$ 表示复数加法的总次数，$M$ 表示复数乘法的总次数。无需四舍五入，答案无单位。", "solution": "问题陈述经过验证，被认为是科学上可靠、适定、客观且自洽的。它提出了一个数字信号处理领域的标准问题，涉及离散傅里叶变换 (DFT) 和快速傅里叶变换 (FFT) 的计算复杂度。所有定义、常数和约束都已提供，因此可以得到一个唯一且可验证的解。我们开始进行分析。\n\n该问题要求推导两种计算长度为 $N=8$ 的序列的DFT的方法的计算成本，并详细分解基-$2$ 时域抽取 (DIT) FFT 算法。\n\n成本模型明确定义如下：\n1.  一次复数加法或减法计为 $1$ 次复数加法。\n2.  一次复数与任何旋转因子 $W_N^m$ 的乘法计为 $1$ 次复数乘法，不论 $m$ 的值如何。禁止对 $m=0$ 或其他特殊情况进行简化。\n\n令 $A$ 表示复数加法总次数，$M$ 表示复数乘法总次数。\n\n**第1部分：直接DFT计算成本**\n\nDFT的定义如下：\n$$\nX[k] = \\sum_{n=0}^{N-1} x[n] W_{N}^{kn}\n$$\n对于一个固定的输出索引 $k$，$X[k]$ 的计算涉及 $N$ 项之和。\n每一项 $x[n]W_N^{kn}$ 都需要一次复数乘法。在严格的成本模型下，即使对于 $kn=0$ 或 $N$ 的其他整数倍，这一点也成立。因此，对于每个 $k$ 值，都有 $N$ 次复数乘法。\n这 $N$ 个复数项的求和需要 $N-1$ 次复数加法。\n\n由于 $k$ 的取值范围是从 $0$ 到 $N-1$，因此需要计算 $N$ 个这样的输出值。所以，直接DFT计算的总成本为：\n- 复数乘法总次数：$M_{\\text{DFT}} = N \\times N = N^2$。\n- 复数加法总次数：$A_{\\text{DFT}} = N \\times (N-1)$。\n\n对于 $N=8$：\n$$\nM_{\\text{DFT}} = 8^2 = 64\n$$\n$$\nA_{\\text{DFT}} = 8 \\times (8-1) = 8 \\times 7 = 56\n$$\n\n**第2部分：基-2 DIT FFT 分析**\n\n基-$2$ FFT 算法递归地将一个大小为 $N$ 的DFT分解为两个大小为 $N/2$ 的DFT。对于 $N=2^v$ 的情况，这将产生 $v = \\log_2(N)$ 个计算阶段。当 $N=8$ 时，我们有 $\\log_2(8) = 3$ 个阶段。\n\n每个阶段的核心计算是“蝶形”运算，它将两个中间值 (例如 $A$ 和 $B$) 组合起来，生成两个新值 $A'$ 和 $B'$：\n$$\nA' = A + W_N^e B\n$$\n$$\nB' = A - W_N^e B\n$$\n其中 $W_N^e$ 是相应的旋转因子。此计算可以通过先计算乘积 $P = W_N^e B$ (成本为 $1$ 次复数乘法)，然后计算 $A' = A + P$ 和 $B' = A - P$ (成本为 $2$ 次复数加法) 来实现。因此，在指定的成本模型下，每次蝶形运算恰好需要 $1$ 次复数乘法和 $2$ 次复数加法。\n\n在一个大小为 $N$ 的基-$2$ FFT 中，$\\log_2(N)$ 个阶段中的每一阶段都包含 $N/2$ 次这样的蝶形运算。\n\n**$N=8$ DIT-FFT 的蝶形运算细节**\n\nDIT-FFT 算法要求输入序列 $x[n]$ 通过对索引进行位反转来重新排序。然后计算通过 $3$ 个阶段原位进行。在蝶形运算中组合的一对索引 $(p,q)$ 由阶段和步长决定。\n\n**阶段1：** 计算四个 $2$ 点 DFT。步长为 $1$。旋转因子为 $W_2^0 = W_8^0$。\n- 蝶形对 $(p,q)$：$(0,1), (2,3), (4,5), (6,7)$。\n- 旋转因子指数 $e$：对于所有四对，指数均为 $e=0$。\n\n**阶段2：** 计算两个 $4$ 点 DFT。步长为 $2$。\n- 第一个 $4$ 点 DFT 组合来自蝶形运算 $(0,1)$和 $(2,3)$ 的输出。索引对为 $(0,2)$ 和 $(1,3)$。\n  - 对 $(0,2)$：使用旋转因子 $W_4^0 = W_8^0$。指数 $e=0$。\n  - 对 $(1,3)$：使用旋转因子 $W_4^1 = W_8^2$。指数 $e=2$。\n- 第二个 $4$ 点 DFT 组合来自蝶形运算 $(4,5)$ 和 $(6,7)$ 的输出。索引对为 $(4,6)$ 和 $(5,7)$。\n  - 对 $(4,6)$：使用旋转因子 $W_4^0 = W_8^0$。指数 $e=0$。\n  - 对 $(5,7)$：使用旋转因子 $W_4^1 = W_8^2$。指数 $e=2$。\n- 阶段2总结：索引对为 $(0,2), (1,3), (4,6), (5,7)$。对应的指数为 $e \\in \\{0, 2, 0, 2\\}$。\n\n**阶段3：** 计算一个 $8$ 点 DFT。步长为 $4$。此阶段组合两个 $4$ 点 DFT 的结果。索引对为 $(0,4), (1,5), (2,6), (3,7)$。\n- 对 $(0,4)$：使用旋转因子 $W_8^0$。指数 $e=0$。\n- 对 $(1,5)$：使用旋转因子 $W_8^1$。指数 $e=1$。\n- 对 $(2,6)$：使用旋转因子 $W_8^2$。指数 $e=2$。\n- 对 $(3,7)$：使用旋转因子 $W_8^3$。指数 $e=3$。\n- 阶段3总结：索引对为 $(0,4), (1,5), (2,6), (3,7)$。对应的指数为 $e \\in \\{0, 1, 2, 3\\}$。\n\n**FFT 计算成本**\n\n对于 $N=8$，有 $\\log_2(8) = 3$ 个阶段。每个阶段有 $N/2 = 8/2 = 4$ 个蝶形运算。\n- 蝶形运算总次数 = (阶段数) $\\times$ (每阶段蝶形运算次数) = $3 \\times 4 = 12$。\n\n每次蝶形运算需要 $1$ 次复数乘法和 $2$ 次复数加法。\n- FFT 的复数乘法总次数：$M_{\\text{FFT}} = 12 \\times 1 = 12$。这与通用公式 $M_{\\text{FFT}} = \\frac{N}{2} \\log_2(N) = \\frac{8}{2} \\log_2(8) = 4 \\times 3 = 12$ 一致。\n\n- FFT 的复数加法总次数：$A_{\\text{FFT}} = 12 \\times 2 = 24$。这与通用公式 $A_{\\text{FFT}} = N \\log_2(N) = 8 \\log_2(8) = 8 \\times 3 = 24$ 一致。\n\n**第3部分：总数比较**\n\n所要求的四个计数值如下：\n- FFT 加法次数：$A_{\\text{FFT}} = 24$\n- FFT 乘法次数：$M_{\\text{FFT}} = 12$\n- 直接DFT加法次数：$A_{\\text{DFT}} = 56$\n- 直接DFT乘法次数：$M_{\\text{DFT}} = 64$\n\n最终答案以行矩阵 $(A_{\\text{FFT}}, M_{\\text{FFT}}, A_{\\text{DFT}}, M_{\\text{DFT}})$ 的形式呈现。", "answer": "$$\n\\boxed{\n\\begin{pmatrix}\n24 & 12 & 56 & 64\n\\end{pmatrix}\n}\n$$", "id": "2859618"}, {"introduction": "理论上的算法复杂度只是起点，真正的性能优化往往需要根据输入数据的特性对算法进行裁剪。当输入信号末尾包含大量零时（例如在进行快速卷积时），标准 FFT 算法中的许多计算都是不必要的。本练习将引导你设计一个“剪枝”FFT，通过分析基-2 时间抽取 (DIT) FFT 的数据流，精确识别并跳过那些因输入为零而变得冗余的蝶形运算，并最终推导出所节省的运算量。[@problem_id:2859641]", "problem": "考虑一个长度为 $N$ 的离散傅里叶变换 (DFT)，其中 $N = 2^{m}$，$m \\in \\mathbb{N}$。设输入序列为 $x[0], x[1], \\ldots, x[N-1]$，并假设存在一个整数 $p$（$0 \\leq p \\leq m$），使得对于所有 $n \\geq 2^{p}$，都有 $x[n] = 0$；也就是说，最后的 $N - 2^{p}$ 个采样点恒为零。你需要计算 DFT 的所有 $N$ 个频域输出 $X[k]$，其定义为\n$$\nX[k] \\triangleq \\sum_{n=0}^{N-1} x[n] \\exp\\!\\left(-2\\pi \\mathrm{i}\\,\\frac{n k}{N}\\right), \\quad k=0,1,\\ldots,N-1.\n$$\n假设使用基-2 时间抽取快速傅里叶变换 (FFT)（快速傅里叶变换 (FFT)，时间抽取 (DIT)），这是标准的 Cooley–Tukey 二进制分解算法。在该算法中，计算过程被组织为 $m$ 个连续的蝶形运算级。每个蝶形运算合并两个复数输入，并通过恰好一次与级相关的旋转因子的复数乘法和两次复数加法，产生两个复数输出。在完整的、未剪枝的实现中，每一级的每一个蝶形运算都会被执行，并且每一次这样的乘法和加法都会被计入总数。在本问题中，算术运算次数被定义为复数乘法总次数与复数加法总次数之和。内存移动和索引置换不计入运算次数。\n\n设计一个截断FFT，利用 $x[n]=0$（对于所有 $n \\geq 2^{p}$）这一事实，来避免执行任何因其一个或两个输入已知为零而导致其算术运算在数学上是多余的蝶形运算。仅使用 DFT 定义和基-2 时间抽取分解的结构特性，推导出一个用 $m$ 和 $p$ 表示的精确闭式表达式，该表达式表示这种截断 FFT 相对于在长度 $N$ 上运行的完整、未剪枝的基-2 FFT 所节省的算术运算次数。\n\n你的最终答案必须是一个只依赖于 $m$ 和 $p$ 的单一闭式解析表达式。不要包含单位。不需要进行数值取整。", "solution": "我们从 DFT 定义开始\n$$\nX[k] = \\sum_{n=0}^{N-1} x[n] \\exp\\!\\left(-2\\pi \\mathrm{i}\\,\\frac{n k}{N}\\right),\n$$\n其中 $N=2^{m}$ 且对于 $n \\geq 2^{p}$ 有 $x[n]=0$。一个基-2 时间抽取 (DIT) 快速傅里叶变换 (FFT) 通过递归地将输入划分为偶数和奇数索引的子序列，并在 $m$ 个蝶形运算级中将它们组合起来，来计算这个和。每一级都包含通过蝶形运算对中间值进行的成对组合，其中每个蝶形运算执行一次复数乘法（与一个形式为 $\\exp(-2\\pi \\mathrm{i}\\,\\ell/N)$ 的旋转因子相乘）和两次复数加法。在完整的基-2 FFT中，每级有 $N/2$ 个蝶形运算，共 $m$ 级，因此如果我们将每次复数乘法和每次复数加法都计为一次运算，那么每个蝶形运算恰好贡献 3 次运算。因此，完整 FFT 的总算术运算次数为\n$$\nC_{\\text{full}} = 3 \\cdot \\frac{N}{2} \\cdot m = 3 \\cdot 2^{m-1} \\cdot m.\n$$\n\n为了量化由尾随零点带来的节省，我们来描述一个蝶形运算何时真正需要进行算术运算。在一个基-2 DIT 流程中，给定级的蝶形运算的两个输入是由原始输入样本的不相交子集构成的。如果一个蝶形运算的两个输入都为零，则其输出也为零，该蝶形运算不执行任何有用的算术运算。如果恰好一个输入为零，那么非零输入将传递到两个输出（可能仅有已知的平凡符号变化或路由），同样不需要复数乘法或加法来确定输出；可以绕过算术运算，直接路由该值。因此，在一个利用零值的截断实现中，一个蝶形运算仅当其两个输入都非零时才产生算术运算。\n\n现在，我们在 $x[n]\\neq 0$ 仅对 $n \\in \\{0,1,\\ldots,2^{p}-1\\}$ 成立的假设下，逐级计算有多少个蝶形运算的两个输入都非零。在基-2 DIT FFT中，第 $s$ 级（$s \\in \\{1,2,\\ldots,m\\}$）将索引分组为大小为 $2^{s}$ 的连续块，并且在每个块内，每个蝶形运算将块前半部分的一个元素与块后半部分的相应元素连接起来。因此，在第 $s$ 级，一个蝶形运算的两个输入都非零，当且仅当对应的位置对都位于非零前缀 $\\{0,1,\\ldots,2^{p}-1\\}$ 内。\n\n令 $L \\triangleq 2^{p}$。在第 $s$ 级，完全包含在 $\\{0,\\ldots,L-1\\}$ 中的大小为 $2^{s}$ 的完整块的数量是 $\\left\\lfloor L / 2^{s} \\right\\rfloor$。每个完整块贡献了 $2^{s-1}$ 个两个输入都非零的蝶形运算。此外，还有一个大小为 $r \\triangleq L \\bmod 2^{s}$ 的部分块，它贡献了 $\\max\\{r - 2^{s-1}, 0\\}$ 个两个输入都非零的蝶形运算（因为在部分块内，一个蝶形运算连接位置 $j$ 和 $j+2^{s-1}$，而这两个位置都小于 $r$ 的充要条件是 $j < r - 2^{s-1}$）。因此，在第 $s$ 级，两个输入都非零的蝶形运算数量为\n$$\nB_{s} \\;=\\; \\left\\lfloor \\frac{L}{2^{s}} \\right\\rfloor \\cdot 2^{s-1} \\;+\\; \\max\\!\\left\\{ \\left(L \\bmod 2^{s}\\right) - 2^{s-1},\\, 0 \\right\\}.\n$$\n\n将 $L=2^{p}$ 代入可得到简化。对于 $s \\leq p$，我们有 $L/2^{s} = 2^{p-s}$（一个整数）且 $L \\bmod 2^{s} = 0$，所以\n$$\nB_{s} \\;=\\; 2^{p-s} \\cdot 2^{s-1} + 0 \\;=\\; 2^{p-1}.\n$$\n对于 $s \\geq p+1$，我们有 $\\left\\lfloor L/2^{s} \\right\\rfloor = 0$ 且 $L \\bmod 2^{s} = L = 2^{p}$，所以\n$$\nB_{s} \\;=\\; 0 \\cdot 2^{s-1} + \\max\\{2^{p} - 2^{s-1}, 0\\} \\;=\\; 0,\n$$\n因为对于 $s \\geq p+1$ 有 $2^{s-1} \\geq 2^{p}$。因此，\n$$\n\\sum_{s=1}^{m} B_{s} \\;=\\; \\sum_{s=1}^{p} 2^{p-1} \\;=\\; p \\cdot 2^{p-1}.\n$$\n\n在对所有两个输入不都为非零的蝶形运算进行剪枝的截断 FFT 中，执行的蝶形运算总数为 $\\sum_{s=1}^{m} B_{s} = p \\cdot 2^{p-1}$。每个被执行的蝶形运算仍然需要恰好一次复数乘法和两次复数加法，即 3 次运算。因此，截断 FFT 的算术运算次数为\n$$\nC_{\\text{trunc}} \\;=\\; 3 \\sum_{s=1}^{m} B_{s} \\;=\\; 3 \\, p \\, 2^{p-1}.\n$$\n\n相对于完整 FFT，节省的精确运算次数是两者之差\n$$\nC_{\\text{save}} \\;=\\; C_{\\text{full}} - C_{\\text{trunc}} \\;=\\; 3 \\cdot 2^{m-1} \\cdot m \\;-\\; 3 \\cdot p \\cdot 2^{p-1}.\n$$\n\n该表达式仅依赖于 $m$ 和 $p$，并给出了当输入有尾随零，以致只有前 $2^{p}$ 个样本非零时的精确算术节省量。", "answer": "$$\\boxed{3\\left(2^{m-1} m - 2^{p-1} p\\right)}$$", "id": "2859641"}, {"introduction": "算法的理论运算次数并不能完全决定其在真实硬件上的执行速度，内存访问模式等架构相关因素同样至关重要。对于混合基 FFT，不同的运算顺序（即“方案”）会产生不同的内存访问“步长”，从而显著影响性能。本练习要求你扮演一个性能工程师的角色：基于给定的、包含计算成本和内存访问惩罚的性能模型，你将利用一组假设的测量数据来拟合模型参数，并用它来预测新变换长度下的最优执行方案与时间。[@problem_id:2859656]", "problem": "一个实验室团队正在一个固定架构上，探索用于一维离散傅里叶变换 (DFT) 的混合基 Cooley–Tukey 快速傅里叶变换 (FFT) 算法的规划空间，其变换长度可分解为基 $2$、$3$ 和 $5$。该算法是时域抽取 (decimation-in-time) 并且是非原地 (out-of-place) 实现的。该团队假设以下有科学依据的事实作为建模基础：(i) 每个 FFT 级执行的蝶形运算次数与变换长度 $N$ 成正比，(ii) 级数等于 $N$ 的素数分解中各指数的和，以及 (iii) 在时域抽取过程中，第 $t$ 级之前的步幅（以元素为单位）等于前 $t-1$ 个所选基的乘积，这会影响内存局部性。\n\n采用以下简单的、级可加的成本模型，该模型捕捉了计算和步幅驱动的内存惩罚。对于应用于长度为 $N$ 且素数分解为 $N=2^{s_{2}} 3^{s_{3}} 5^{s_{5}}$ 的一个方案（即基级的排序），总执行时间为\n$$\nT(N,\\text{plan}) \\;=\\; c \\;+\\; N\\big(a_{2}\\,s_{2} \\;+\\; a_{3}\\,s_{3} \\;+\\; a_{5}\\,s_{5}\\big) \\;+\\; N\\,b\\,m(N,\\text{plan};S_{0}),\n$$\n其中 $c$ 是仿射开销，$a_{2}$、$a_{3}$、$a_{5}$ 分别是基-2、基-3 和基-5 级的每元素、每级的计算系数，$b$ 是每元素的惩罚系数，而 $m(N,\\text{plan};S_{0})$ 是其级前步幅严格超过一个固定阈值 $S_{0}$ 的级数，该阈值代表一个与架构相关的局部性限制。第 $t$ 级的级前步幅等于前面 $(t-1)$ 个级的基的乘积。定义 $S_{0}=16$（以元素为单位）。\n\n给定此架构上几次 FFT 的无噪声测量执行时间（单位：微秒）。每次测量都指明了 $N$、使用的有序基序列（从第一级到最后一级）以及测量到的时间 $T$：\n- $N=120=2^{3}\\cdot 3^{1}\\cdot 5^{1}$，顺序 $\\langle 2,2,2,3,5\\rangle$，$T=3.74$。\n- $N=120=2^{3}\\cdot 3^{1}\\cdot 5^{1}$，顺序 $\\langle 5,3,2,2,2\\rangle$，$T=4.10$。\n- $N=90=2^{1}\\cdot 3^{2}\\cdot 5^{1}$，顺序 $\\langle 2,3,3,5\\rangle$，$T=2.63$。\n- $N=150=2^{1}\\cdot 3^{1}\\cdot 5^{2}$，顺序 $\\langle 2,3,5,5\\rangle$，$T=4.97$。\n- $N=180=2^{2}\\cdot 3^{2}\\cdot 5^{1}$，顺序 $\\langle 2,2,3,3,5\\rangle$，$T=5.96$。\n\n仅使用上述模型和 Cooley–Tukey FFT 级结构与步幅的基本属性，执行以下任务：\n1. 根据 $N=120$ 的两次测量，通过利用排序如何改变计数 $m(N,\\text{plan};S_{0})$ 而计算项保持不变的特点，确定 $b$。\n2. 使用剩余的测量数据以及 $N=120$ 的一次测量数据，精确拟合 $a_{2}$、$a_{3}$、$a_{5}$ 和 $c$。\n3. 对于新的变换长度 $N_{\\text{new}}=360=2^{3}\\cdot 3^{2}\\cdot 5^{1}$，确定使 $m(N_{\\text{new}},\\text{plan};S_{0})$ 最小化的方案（6个级的排序），并使用拟合的模型预测可实现的最小时间 $T_{\\min}(360)$。\n\n将你的最终答案表示为预测的最小执行时间（单位：微秒），四舍五入到四位有效数字。请勿在最终答案框中包含单位。", "solution": "所述问题经验证有效。\n\n**步骤 1：提取已知条件**\n- 总执行时间模型：$T(N,\\text{plan}) = c + N(a_{2}s_{2} + a_{3}s_{3} + a_{5}s_{5}) + Nbm(N,\\text{plan};S_{0})$\n- 变换长度分解：$N=2^{s_{2}} 3^{s_{3}} 5^{s_{5}}$\n- $c$：仿射开销\n- $a_{2}$, $a_{3}$, $a_{5}$：每元素、每级的计算系数\n- $b$：每元素内存惩罚系数\n- $m(N,\\text{plan};S_{0})$：级前步幅超过 $S_{0}$ 的级数\n- 步幅阈值：$S_{0}=16$\n- 第 $t$ 级的级前步幅：前 $t-1$ 个级的基的乘积。\n- 测量数据（时间 $T$ 单位为微秒）：\n    1. $N=120=2^{3}\\cdot 3^{1}\\cdot 5^{1}$，顺序 $\\langle 2,2,2,3,5\\rangle$，$T=3.74$。\n    2. $N=120=2^{3}\\cdot 3^{1}\\cdot 5^{1}$，顺序 $\\langle 5,3,2,2,2\\rangle$，$T=4.10$。\n    3. $N=90=2^{1}\\cdot 3^{2}\\cdot 5^{1}$，顺序 $\\langle 2,3,3,5\\rangle$，$T=2.63$。\n    4. $N=150=2^{1}\\cdot 3^{1}\\cdot 5^{2}$，顺序 $\\langle 2,3,5,5\\rangle$，$T=4.97$。\n    5. $N=180=2^{2}\\cdot 3^{2}\\cdot 5^{1}$，顺序 $\\langle 2,2,3,3,5\\rangle$，$T=5.96$。\n\n**步骤 2：使用提取的已知条件进行验证**\n该问题具有科学依据，植根于已建立的 Cooley-Tukey FFT 算法理论和标准性能建模技术。该模型是计算和内存访问成本的一个简化但物理上合理的表示。该问题是适定的，提供了五次测量来确定五个未知模型参数（$c, a_{2}, a_{3}, a_{5}, b$），这构成了一个可解的方程组。该问题以精确的定义和定量数据客观陈述。它不违反任何无效性标准。\n\n**步骤 3：结论与行动**\n问题有效。将推导解答。\n\n**解答推导**\n\n解答按指定的三个任务进行。\n\n**任务 1：确定参数 $b$**\n模型为 $T = c + N(\\sum_{r} a_{r}s_{r}) + Nbm$。对于固定的 $N$，无论方案（级的排序）如何，项 $C_{\\text{compute}} = c + N(\\sum_{r} a_{r}s_{r})$ 都是恒定的。$N=120$ 的两次测量仅在方案上有所不同，这会影响内存惩罚项 $Nbm$。设 $T_{1}$、$m_{1}$ 对应方案 $\\langle 2,2,2,3,5\\rangle$，而 $T_{2}$、$m_{2}$ 对应方案 $\\langle 5,3,2,2,2\\rangle$。\n我们有：\n$T_{1} = C_{\\text{compute}} + 120 b m_{1}$\n$T_{2} = C_{\\text{compute}} + 120 b m_{2}$\n两式相减得到 $T_{2} - T_{1} = 120 b (m_{2} - m_{1})$。\n\n我们通过检查级前步幅与阈值 $S_{0}=16$ 的关系来计算 $m_{1}$ 和 $m_{2}$。\n对于方案 1：$\\langle 2,2,2,3,5\\rangle$。步幅为：\n- 第 2 级 (基 2): 步幅 = $2$\n- 第 3 级 (基 2): 步幅 = $2 \\cdot 2 = 4$\n- 第 4 级 (基 3): 步幅 = $2 \\cdot 2 \\cdot 2 = 8$\n- 第 5 级 (基 5): 步幅 = $2 \\cdot 2 \\cdot 2 \\cdot 3 = 24 > 16$。产生惩罚。\n初始步幅为 $1$，不大于 $16$。只有最后一级的步幅超过 $16$。因此，$m_{1}=1$。\n\n对于方案 2：$\\langle 5,3,2,2,2\\rangle$。步幅为：\n- 第 2 级 (基 3): 步幅 = $5$\n- 第 3 级 (基 2): 步幅 = $5 \\cdot 3 = 15$\n- 第 4 级 (基 2): 步幅 = $5 \\cdot 3 \\cdot 2 = 30 > 16$。产生惩罚。\n- 第 5 级 (基 2): 步幅 = $5 \\cdot 3 \\cdot 2 \\cdot 2 = 60 > 16$。产生惩罚。\n因此，$m_{2}=2$。\n\n代入数值：\n$4.10 - 3.74 = 120 \\cdot b \\cdot (2 - 1)$\n$0.36 = 120 b$\n$b = \\frac{0.36}{120} = 0.003$。\n\n**任务 2：确定参数 $c, a_{2}, a_{3}, a_{5}$**\n我们使用已知的 $b$ 值和四次测量数据来构建一个四元线性方程组。模型可以写为 $T - Nbm = c + N \\sum_{r} a_{r}s_{r}$。\n\n1. $N=120$，顺序 $\\langle 2,2,2,3,5\\rangle$：$s_2=3, s_3=1, s_5=1$, $m=1$, $T=3.74$。\n$3.74 - 120(0.003)(1) = c + 120(3a_{2} + a_{3} + a_{5})$\n$3.38 = c + 360a_{2} + 120a_{3} + 120a_{5}$ (I)\n\n2. $N=90$，顺序 $\\langle 2,3,3,5\\rangle$：$s_2=1, s_3=2, s_5=1$, $T=2.63$。步幅：$2$, $2\\cdot3=6$, $2\\cdot3\\cdot3=18 > 16$。所以 $m=1$。\n$2.63 - 90(0.003)(1) = c + 90(a_{2} + 2a_{3} + a_{5})$\n$2.36 = c + 90a_{2} + 180a_{3} + 90a_{5}$ (II)\n\n3. $N=150$，顺序 $\\langle 2,3,5,5\\rangle$：$s_2=1, s_3=1, s_5=2$, $T=4.97$。步幅：$2$, $2\\cdot3=6$, $2\\cdot3\\cdot5=30 > 16$。所以 $m=1$。\n$4.97 - 150(0.003)(1) = c + 150(a_{2} + a_{3} + 2a_{5})$\n$4.52 = c + 150a_{2} + 150a_{3} + 300a_{5}$ (III)\n\n4. $N=180$，顺序 $\\langle 2,2,3,3,5\\rangle$：$s_2=2, s_3=2, s_5=1$, $T=5.96$。步幅：$2$, $2\\cdot2=4$, $2\\cdot2\\cdot3=12$, $2\\cdot2\\cdot3\\cdot3=36 > 16$。所以 $m=1$。\n$5.96 - 180(0.003)(1) = c + 180(2a_{2} + 2a_{3} + a_{5})$\n$5.42 = c + 360a_{2} + 360a_{3} + 180a_{5}$ (IV)\n\n我们解这个方程组。将 (I) 从 (IV) 中减去：\n$(c + 360a_{2} + 360a_{3} + 180a_{5}) - (c + 360a_{2} + 120a_{3} + 120a_{5}) = 5.42 - 3.38$\n$240a_{3} + 60a_{5} = 2.04 \\implies 4a_{3} + a_{5} = 0.034$。 (A)\n\n将 (II) 从 (I)、(III) 和 (IV) 中减去以消去 $c$：\n(I)-(II): $270a_{2} - 60a_{3} + 30a_{5} = 1.02 \\implies 9a_{2} - 2a_{3} + a_{5} = 0.034$。 (B)\n(IV)-(II): $270a_{2} + 180a_{3} + 90a_{5} = 3.06 \\implies 3a_{2} + 2a_{3} + a_{5} = 0.034$。 (C)\n\n由 (B) 和 (C) 得：$9a_{2} - 2a_{3} + a_{5} = 3a_{2} + 2a_{3} + a_{5} \\implies 6a_{2} = 4a_{3} \\implies a_{3} = 1.5 a_{2}$。\n将 $a_{3}=1.5a_2$ 代入 (A)：$4(1.5a_{2}) + a_{5} = 0.034 \\implies 6a_{2} + a_{5} = 0.034 \\implies a_{5} = 0.034 - 6a_{2}$。\n将 $a_3$ 和 $a_5$ 代入 (C)：\n$3a_{2} + 2(1.5a_{2}) + (0.034 - 6a_{2}) = 0.034$\n$3a_{2} + 3a_{2} - 6a_{2} + 0.034 = 0.034$，得到 $0=0$。这意味着这些方程不是独立的，表明我必须使用第三个方程。我们用 (III)-(II)：\n(III)-(II): $60a_{2} - 30a_{3} + 210a_{5} = 2.16 \\implies 2a_{2} - a_{3} + 7a_{5} = 0.072$。(D)\n\n现在将 $a_3=1.5a_2$ 和 $a_5=0.034-6a_2$ 代入 (D)：\n$2a_{2} - (1.5a_{2}) + 7(0.034 - 6a_{2}) = 0.072$\n$0.5a_{2} + 0.238 - 42a_{2} = 0.072$\n$-41.5a_{2} = 0.072 - 0.238 = -0.166$\n$a_{2} = \\frac{0.166}{41.5} = 0.004$。\n\n由此，我们求得：\n$a_{3} = 1.5 \\cdot a_{2} = 1.5 \\cdot 0.004 = 0.006$。\n$a_{5} = 0.034 - 6 \\cdot a_{2} = 0.034 - 6 \\cdot 0.004 = 0.034 - 0.024 = 0.010$。\n\n最后，将这些值代入 (II) 以求出 $c$：\n$2.36 = c + 90(0.004) + 180(0.006) + 90(0.010)$\n$2.36 = c + 0.36 + 1.08 + 0.90$\n$2.36 = c + 2.34 \\implies c = 0.02$。\n\n拟合的参数为：$c=0.02$, $a_{2}=0.004$, $a_{3}=0.006$, $a_{5}=0.010$, 以及 $b=0.003$。\n\n**任务 3：预测 $N_{\\text{new}}=360$ 的最小时间**\n对于 $N_{\\text{new}}=360=2^{3} \\cdot 3^{2} \\cdot 5^{1}$，我们有 $s_2=3, s_3=2, s_5=1$。\n总执行时间由下式给出：\n$T(360, \\text{plan}) = c + 360(3a_{2} + 2a_{3} + a_{5}) + 360 b m(360, \\text{plan}; 16)$。\n\n要获得最小时间 $T_{\\min}(360)$，我们必须选择使 $m(360, \\text{plan}; 16)$ 最小化的方案。每一级的步幅是所有前面级的基的乘积。为了让这个乘积在尽可能多的级中保持尽可能小，必须将基从小到大排序。\n可用的基是三个 $2$、两个 $3$ 和一个 $5$。最优方案是 $\\langle 2,2,2,3,3,5 \\rangle$。\n我们为这个方案计算 $m$：\n- 第 1 级 (基 2): 步幅 = $1$\n- 第 2 级 (基 2): 步幅 = $2$\n- 第 3 级 (基 2): 步幅 = $2 \\cdot 2 = 4$\n- 第 4 级 (基 3): 步幅 = $2 \\cdot 2 \\cdot 2 = 8$\n- 第 5 级 (基 3): 步幅 = $2 \\cdot 2 \\cdot 2 \\cdot 3 = 24 > 16$。产生惩罚。\n- 第 6 级 (基 5): 步幅 = $2 \\cdot 2 \\cdot 2 \\cdot 3 \\cdot 3 = 72 > 16$。产生惩罚。\n受惩罚的步幅的最小级数是 $m_{\\min}=2$。\n\n现在，我们使用拟合的参数和 $m_{\\min}=2$ 来计算 $T_{\\min}(360)$：\n$T_{\\min}(360) = 0.02 + 360(3 \\cdot 0.004 + 2 \\cdot 0.006 + 1 \\cdot 0.010) + 360 \\cdot 0.003 \\cdot 2$\n$T_{\\min}(360) = 0.02 + 360(0.012 + 0.012 + 0.010) + 1.08 \\cdot 2$\n$T_{\\min}(360) = 0.02 + 360(0.034) + 2.16$\n$T_{\\min}(360) = 0.02 + 12.24 + 2.16$\n$T_{\\min}(360) = 14.42$。\n\n预测的最小执行时间是 $14.42$ 微秒。该值按要求保留了四位有效数字。", "answer": "$$\\boxed{14.42}$$", "id": "2859656"}]}