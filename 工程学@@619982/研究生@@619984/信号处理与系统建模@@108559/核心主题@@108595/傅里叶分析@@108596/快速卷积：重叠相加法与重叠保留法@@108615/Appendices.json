{"hands_on_practices": [{"introduction": "基于快速傅里叶变换 (FFT) 的快速卷积算法，其核心在于利用循环卷积来计算线性卷积。这一过程的正确性严重依赖于所选的离散傅里叶变换 (DFT) 长度 $N$。本练习将通过一个具体的计算示例，让您亲身体验当 $N$ 过小时产生的时域混叠效应，并量化由此带来的误差，从而深刻理解为何必须满足 $N \\ge L+M-1$ 这一条件 [@problem_id:2870370]。这对掌握重叠相加法和重叠保留法的设计原则至关重要。", "problem": "考虑在重叠相加法 (OLA) 或重叠保留法 (OLS) 框架下，通过离散傅里叶变换 (DFT) 实现快速卷积。设有限冲激响应 (FIR) 滤波器长度为 $M=4$，其冲激响应 $h[n]$ 定义在 $n \\in \\{0,1,2,3\\}$ 上；设输入数据块长度为 $L=5$，其样本 $x[n]$ 定义在 $n \\in \\{0,1,2,3,4\\}$ 上。你将研究选择低于无混叠阈值与等于无混叠阈值的 DFT 长度 $N$ 会如何影响循环卷积的结果。\n\n给定具体序列如下\n- $x[0]=2$, $x[1]=-1$, $x[2]=0$, $x[3]=3$, $x[4]=1$ (其他情况下 $x[n]=0$)，\n- $h[0]=1$, $h[1]=-2$, $h[2]=1$, $h[3]=-1$ (其他情况下 $h[n]=0$)。\n\n仅从线性卷积和循环卷积的核心定义，以及 $N$ 周期延拓的循环卷积实现的是模 $N$ 卷积这一事实出发，完成以下任务：\n\n1) 计算线性卷积 $y_{\\text{lin}}[n]=(x*h)[n]$，其中 $n \\in \\{0,1,\\dots,7\\}$。\n\n2) 解释为什么对于这对 $(x,h)$，选择 $N=8$ 可以避免时域混叠，并验证当 $n \\in \\{0,1,\\dots,7\\}$ 时，$N=8$ 的循环卷积等于 $y_{\\text{lin}}[n]$。\n\n3) 计算 $N=6$ 的循环卷积输出 $y_{6}[n]$，其中 $n \\in \\{0,1,2,3,4,5\\}$，并根据模 $N$ 结构，精确指出哪些线性卷积样本发生了折叠（混叠），以及它们出现在 $y_{6}[n]$ 的什么位置。\n\n4) 定义混叠误差向量 $e[n]=y_{6}[n]-y_{\\text{lin}}[n]$，其中 $n \\in \\{0,1,2,3,4,5\\}$，并计算其欧几里得范数的平方\n$$\nE=\\sum_{n=0}^{5} \\big(e[n]\\big)^{2}.\n$$\n\n将实数 $E$ 作为你的最终答案。无需单位。除非必要，不要四舍五入；如需四舍五入，保留 $4$ 位有效数字。", "solution": "所述问题具有科学依据、内容自洽且提法适定。这是一个数字信号处理中的标准练习，旨在检验对线性卷积和循环卷积之间关系的基本理解，而这种关系是重叠相加法和重叠保留法等快速卷积方法的理论基础。所有必要的数据和定义均已提供，问题清晰明确。该问题有效，我们可以着手求解。\n\n连接线性卷积和循环卷积的核心原理是：两个有限长度序列 $x[n]$ 和 $h[n]$ 的 $N$ 点循环卷积，等价于它们线性卷积 $y_{\\text{lin}}[n]$ 的时域混叠版本。更正式地，如果用 $y_N[n]$ 表示 $N$ 点循环卷积，其与线性卷积 $y_{\\text{lin}}[n] = (x*h)[n]$ 的关系由下式给出：\n$$\ny_N[n] = \\sum_{l=-\\infty}^{\\infty} y_{\\text{lin}}[n+lN]\n$$\n其中 $n \\in \\{0, 1, \\dots, N-1\\}$。\n\n1) 首先，我们计算线性卷积 $y_{\\text{lin}}[n] = (x*h)[n]$。输入序列 $x[n]$ 的长度为 $L=5$，支撑集为 $n \\in \\{0,1,2,3,4\\}$，冲激响应 $h[n]$ 的长度为 $M=4$，支撑集为 $n \\in \\{0,1,2,3\\}$。得到的线性卷积 $y_{\\text{lin}}[n]$ 的长度将是 $L+M-1 = 5+4-1 = 8$，支撑集为 $n \\in \\{0, 1, \\dots, 7\\}$。卷积和为 $y_{\\text{lin}}[n] = \\sum_{k=0}^{4} x[k]h[n-k]$。\n\n- 当 $n=0$ 时：$y_{\\text{lin}}[0] = x[0]h[0] = (2)(1) = 2$。\n- 当 $n=1$ 时：$y_{\\text{lin}}[1] = x[0]h[1] + x[1]h[0] = (2)(-2) + (-1)(1) = -4 - 1 = -5$。\n- 当 $n=2$ 时：$y_{\\text{lin}}[2] = x[0]h[2] + x[1]h[1] + x[2]h[0] = (2)(1) + (-1)(-2) + (0)(1) = 2 + 2 = 4$。\n- 当 $n=3$ 时：$y_{\\text{lin}}[3] = x[0]h[3] + x[1]h[2] + x[2]h[1] + x[3]h[0] = (2)(-1) + (-1)(1) + (0)(-2) + (3)(1) = -2 - 1 + 3 = 0$。\n- 当 $n=4$ 时：$y_{\\text{lin}}[4] = x[1]h[3] + x[2]h[2] + x[3]h[1] + x[4]h[0] = (-1)(-1) + (0)(1) + (3)(-2) + (1)(1) = 1 - 6 + 1 = -4$。\n- 当 $n=5$ 时：$y_{\\text{lin}}[5] = x[2]h[3] + x[3]h[2] + x[4]h[1] = (0)(-1) + (3)(1) + (1)(-2) = 3 - 2 = 1$。\n- 当 $n=6$ 时：$y_{\\text{lin}}[6] = x[3]h[3] + x[4]h[2] = (3)(-1) + (1)(1) = -3 + 1 = -2$。\n- 当 $n=7$ 时：$y_{\\text{lin}}[7] = x[4]h[3] = (1)(-1) = -1$。\n\n因此，线性卷积序列为 $y_{\\text{lin}}[n] = \\{2, -5, 4, 0, -4, 1, -2, -1\\}$，其中 $n \\in \\{0, 1, \\dots, 7\\}$。\n\n2) 为使循环卷积得到与线性卷积相同的结果，所选的 DFT 长度 $N$ 必须能确保不发生时域混叠。这要求长度 $N$ 至少不小于线性卷积输出的长度。根据计算， $y_{\\text{lin}}[n]$ 的长度为 $L+M-1=8$。因此，避免混叠的条件是 $N \\ge 8$。选择 $N=8$ 满足此最低要求。\n\n为验证这一点，我们使用 $N=8$ 的混叠公式：\n$$\ny_8[n] = \\sum_{l=-\\infty}^{\\infty} y_{\\text{lin}}[n+8l]\n$$\n对于 $n \\in \\{0, 1, \\dots, 7\\}$，仅当 $l=0$ 时，索引 $n+8l$ 才落在 $y_{\\text{lin}}[n]$ 的支撑集 $\\{0, 1, \\dots, 7\\}$ 内。对于任何其他整数 $l$，$n+8l$ 都在此范围之外，此时 $y_{\\text{lin}}[n+8l]$ 将为零。因此，求和式简化为 $l=0$ 的单个项，我们得到对所有 $n \\in \\{0, 1, \\dots, 7\\}$ 都有 $y_8[n] = y_{\\text{lin}}[n]$。这证实了 $N=8$ 可以避免混叠。\n\n3) 现在我们计算 $N=6$ 的循环卷积 $y_6[n]$。由于 $N=6 < 8$，我们预期会发生时域混叠。我们对 $n \\in \\{0, 1, \\dots, 5\\}$ 应用混叠公式：\n$$\ny_6[n] = \\sum_{l=-\\infty}^{\\infty} y_{\\text{lin}}[n+6l]\n$$\n$y_{\\text{lin}}[n]$ 的非零项在索引 0 到 7 之间。我们计算 $y_6[n]$：\n- 当 $n=0$ 时：$y_6[0] = y_{\\text{lin}}[0] + y_{\\text{lin}}[0+6] = y_{\\text{lin}}[0] + y_{\\text{lin}}[6] = 2 + (-2) = 0$。样本 $y_{\\text{lin}}[6]$ 发生混叠（折叠）并与 $y_{\\text{lin}}[0]$ 相加。\n- 当 $n=1$ 时：$y_6[1] = y_{\\text{lin}}[1] + y_{\\text{lin}}[1+6] = y_{\\text{lin}}[1] + y_{\\text{lin}}[7] = -5 + (-1) = -6$。样本 $y_{\\text{lin}}[7]$ 与 $y_{\\text{lin}}[1]$ 发生混叠。\n- 当 $n=2$ 时：$y_6[2] = y_{\\text{lin}}[2] + y_{\\text{lin}}[2+6] = y_{\\text{lin}}[2] + y_{\\text{lin}}[8] = 4 + 0 = 4$。\n- 当 $n=3$ 时：$y_6[3] = y_{\\text{lin}}[3] + y_{\\text{lin}}[3+6] = y_{\\text{lin}}[3] + y_{\\text{lin}}[9] = 0 + 0 = 0$。\n- 当 $n=4$ 时：$y_6[4] = y_{\\text{lin}}[4] + y_{\\text{lin}}[4+6] = y_{\\text{lin}}[4] + y_{\\text{lin}}[10] = -4 + 0 = -4$。\n- 当 $n=5$ 时：$y_6[5] = y_{\\text{lin}}[5] + y_{\\text{lin}}[5+6] = y_{\\text{lin}}[5] + y_{\\text{lin}}[11] = 1 + 0 = 1$。\n得到的 $N=6$ 循环卷积序列是 $y_6[n] = \\{0, -6, 4, 0, -4, 1\\}$，其中 $n \\in \\{0, 1, \\dots, 5\\}$。发生折叠的样本是 $y_{\\text{lin}}[6]$ 和 $y_{\\text{lin}}[7]$，它们分别出现在索引 $6 \\pmod 6 = 0$ 和 $7 \\pmod 6 = 1$ 的位置。\n\n4) 混叠误差向量定义为 $e[n] = y_6[n] - y_{\\text{lin}}[n]$，其中 $n \\in \\{0, 1, \\dots, 5\\}$。使用以上结果：\n- $e[0] = y_6[0] - y_{\\text{lin}}[0] = 0 - 2 = -2$。\n- $e[1] = y_6[1] - y_{\\text{lin}}[1] = -6 - (-5) = -1$。\n- $e[2] = y_6[2] - y_{\\text{lin}}[2] = 4 - 4 = 0$。\n- $e[3] = y_6[3] - y_{\\text{lin}}[3] = 0 - 0 = 0$。\n- $e[4] = y_6[4] - y_{\\text{lin}}[4] = -4 - (-4) = 0$。\n- $e[5] = y_6[5] - y_{\\text{lin}}[5] = 1 - 1 = 0$。\n误差向量为 $e[n] = \\{-2, -1, 0, 0, 0, 0\\}$。该误差向量的非零元素恰好是混叠项：$e[0] = y_{\\text{lin}}[6]$ 和 $e[1] = y_{\\text{lin}}[7]$。\n\n最后，我们计算误差向量的欧几里得范数平方 $E$：\n$$\nE = \\sum_{n=0}^{5} \\big(e[n]\\big)^{2} = (e[0])^2 + (e[1])^2 + (e[2])^2 + (e[3])^2 + (e[4])^2 + (e[5])^2\n$$\n$$\nE = (-2)^2 + (-1)^2 + 0^2 + 0^2 + 0^2 + 0^2 = 4 + 1 + 0 + 0 + 0 + 0 = 5.\n$$\n总混叠误差能量为 $5$。", "answer": "$$\\boxed{5}$$", "id": "2870370"}, {"introduction": "在理解了时域混叠的原理后，我们将注意力转向一种具体的快速卷积算法——重叠保留法 (Overlap-Save Method) 的实际操作。本练习将引导您将该算法应用于一个给定的信号和滤波器，通过一步步构建输入数据块、执行循环卷积并识别有效输出段，来巩固您对该方法如何将短时循环卷积结果无缝拼接成最终线性卷积输出的理解 [@problem_id:2870379]。这是一个将抽象算法与具体数值计算相结合的绝佳实践。", "problem": "一个冲激响应长度为 $L=5$ 的离散时间线性时不变 (LTI) 系统将采用重叠保留法实现快速卷积，块长度设定为 $N=16$。设冲激响应为 $$h[n] = \\begin{cases} 1, & n=0 \\\\ 2, & n=1 \\\\ 3, & n=2 \\\\ 2, & n=3 \\\\ 1, & n=4 \\\\ 0, & \\text{其它} \\end{cases}$$ 并且输入为 $$x[n] = \\begin{cases} n, & n \\ge 0 \\\\ 0, & n<0. \\end{cases}$$ 第一个重叠保留块由 $L-1$ 个过去的样本（重叠部分）与 $B$ 个新的样本拼接而成，使得总块长度为 $N$，其中 $B = N - L + 1 = 12$。该块通过 $x[n]$ 和 $h[n]$ 对应的 $N$ 点序列之间的 $16$ 点循环卷积进行处理（这两个序列是为基于快速傅里叶变换 (FFT) 的实现而构建的）。在重叠保留法中，前 $L-1$ 个循环卷积的输出被丢弃，而剩余的 $B$ 个输出被保留。\n\n任务：\n- 明确列出用于第一个块的重叠输入样本，以及为构成 $N=16$ 的输入块而附加的 $B=12$ 个新输入样本。\n- 明确列出此块产生的 $B=12$ 个保留输出的全局时间索引。\n- 仅使用线性卷积的定义，以及重叠保留法中循环卷积与线性卷积在保留区域的等效性，计算最后一个保留输出样本的值（即此块的第十二个保留输出）。提供最终答案的精确数值，无需四舍五入。", "solution": "经审阅，该问题陈述是有效的。这是一个定义明确的数字信号处理问题，提供了所有必要的参数和定义。它具有科学依据，客观且内部一致。我们将开始求解。\n\n问题指定了一个离散时间线性时不变 (LTI) 系统，该系统将使用重叠保留法进行快速卷积实现。关键参数如下：\n- 冲激响应长度：$L=5$。\n- FFT/块长度：$N=16$。\n- 每块新样本数：$B = N - L + 1 = 16 - 5 + 1 = 12$。\n- 重叠样本数：$L-1 = 4$。\n\n给定的冲激响应为：\n$$h[n] = h[0]\\delta[n] + h[1]\\delta[n-1] + h[2]\\delta[n-2] + h[3]\\delta[n-3] + h[4]\\delta[n-4]$$\n其系数为 $h[0]=1$，$h[1]=2$，$h[2]=3$，$h[3]=2$ 和 $h[4]=1$。\n\n输入信号是一个从 $n=0$ 开始的斜坡函数：\n$$x[n] = \\begin{cases} n, & n \\ge 0 \\\\ 0, & n < 0. \\end{cases}$$\n\n本解答将按顺序处理这三个任务。\n\n第一个任务：列出第一个块的输入样本。\n重叠保留法通过从前一个输入数据段的末尾取 $L-1$ 个样本，并附加来自输入信号的 $B$ 个新样本，来构建每个长度为 $N$ 的输入块。对于第一个块，“先前”的样本对应于输入信号的负时间索引。\n\n第一个输入块，我们将其表示为序列 $x_1[k]$，$k=0, 1, \\dots, N-1$，对应于全局输入信号 $x[n]$ 在时间区间 $n=-(L-1)$ 到 $n=B-1$ 上的部分。\n这里，$L-1 = 4$ 且 $B-1 = 11$。因此，该块对应于 $n \\in \\{-4, -3, \\dots, 11\\}$ 的 $x[n]$。\n\n重叠样本是该块的前 $L-1=4$ 个样本。它们对应于全局时间索引 $n = -4, -3, -2, -1$。其值为：\n- $x[-4] = 0$\n- $x[-3] = 0$\n- $x[-2] = 0$\n- $x[-1] = 0$\n\n新的输入样本是随后的 $B=12$ 个样本。它们对应于全局时间索引 $n = 0, 1, \\dots, 11$。其值为：\n- $x[0] = 0$\n- $x[1] = 1$\n- $x[2] = 2$\n- $x[3] = 3$\n- $x[4] = 4$\n- $x[5] = 5$\n- $x[6] = 6$\n- $x[7] = 7$\n- $x[8] = 8$\n- $x[9] = 9$\n- $x[10] = 10$\n- $x[11] = 11$\n\n第二个任务：列出保留输出的全局时间索引。\n在重叠保留法中，对输入块和补零的冲激响应执行长度为 $N$ 的循环卷积。前 $L-1$ 个输出样本因受到时域混叠（循环卷积的回绕效应）的干扰而被丢弃。剩余的 $B = N-L+1$ 个样本是有效的，并精确对应于输入信号 $x[n]$ 与冲激响应 $h[n]$ 的线性卷积。\n\n对于第一个块，“新”数据从全局时间索引 $n=0$ 开始。$B=12$ 个保留的输出样本对应于与新输入样本相同的全局时间索引上的线性卷积输出 $y[n] = (x*h)[n]$。因此，第一个块产生的 $B=12$ 个保留输出的全局时间索引为：\n$$n = 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11$$\n\n第三个任务：计算最后一个保留输出样本的值。\n第一个块的最后一个保留输出样本是第 $12$ 个，它对应于全局时间索引 $n=11$。我们必须计算线性卷积输出 $y[11]$ 的值。\n\n线性卷积由以下求和定义：\n$$y[n] = (x*h)[n] = \\sum_{k=-\\infty}^{\\infty} h[k]x[n-k]$$\n由于冲激响应 $h[k]$ 仅在 $k \\in \\{0, 1, 2, 3, 4\\}$ 时非零，该求和简化为：\n$$y[n] = \\sum_{k=0}^{4} h[k]x[n-k]$$\n我们需要计算 $n=11$ 时的值：\n$$y[11] = \\sum_{k=0}^{4} h[k]x[11-k]$$\n展开求和得到：\n$$y[11] = h[0]x[11] + h[1]x[10] + h[2]x[9] + h[3]x[8] + h[4]x[7]$$\n我们将给定的冲激响应 $h[k]$ 和输入信号 $x[n]=n$ 的值代入（因为所有参数 $11, 10, \\dots, 7$ 都是非负的）：\n- $h[0]=1, h[1]=2, h[2]=3, h[3]=2, h[4]=1$\n- $x[11]=11, x[10]=10, x[9]=9, x[8]=8, x[7]=7$\n\n将这些值代入 $y[11]$ 的表达式中：\n$$y[11] = (1)(11) + (2)(10) + (3)(9) + (2)(8) + (1)(7)$$\n进行算术运算：\n$$y[11] = 11 + 20 + 27 + 16 + 7$$\n$$y[11] = 31 + 27 + 16 + 7$$\n$$y[11] = 58 + 16 + 7$$\n$$y[11] = 74 + 7$$\n$$y[11] = 81$$\n最后一个保留输出样本的值是 $81$。", "answer": "$$\\boxed{81}$$", "id": "2870379"}, {"introduction": "从理论基础与算法机制，我们现在转向一个更高级的实际工程设计问题。在音频处理或实时通信等实际应用中，选择快速卷积的参数不仅仅是为了确保计算的正确性，更关键的是要在严格的性能约束下取得平衡。本练习模拟了一个真实的场景，要求您在给定的吞吐量和延迟预算下，对系统的计算时间和延迟进行建模，并寻找最优的块大小 $B$ 与FFT长度 $N$，以最大化系统性能 [@problem_id:2870437]。", "problem": "一个长度为 $L$ 个样本的因果、时不变有限冲激响应滤波器，将通过重叠相加法中的快速卷积，应用于一个实时输入流。输入以每秒 $R$ 个样本的实时吞吐量进行采样，端到端的延迟预算为 $D$ 秒。在重叠相加法中，每个数据块处理 $B$ 个新采集的样本，使用长度为 $N$ 的补零离散傅里叶变换 (DFT)，其中 $N$ 满足 $N \\geq B + L - 1$。为利用高效的基于基数的实现，DFT 长度 $N$ 必须是 2 的幂。快速傅里叶变换 (FFT) 和逆快速傅里叶变换 (IFFT) 用于计算 DFT。\n\n假设以下实现和平台前提，这些前提代表了经过充分测试的基准行为：\n- 长度为 $N$ 的复数快速傅里叶变换 (FFT) 的运行时间为 $t_{\\mathrm{FFT}}(N) = \\alpha \\, N \\log_{2} N + \\beta \\, N$ 秒；逆 FFT 的运行时间相同，为 $t_{\\mathrm{IFFT}}(N) = \\alpha \\, N \\log_{2} N + \\beta \\, N$ 秒。\n- $N$ 点频谱的逐点复数乘法耗时 $t_{\\times}(N) = \\gamma \\, N$ 秒。\n- 每块的固定开销（缓冲、加窗及其他杂项操作）耗时 $t_{0}$ 秒。\n- 滤波器的 DFT 在离线状态下一次性预计算，不计入每块的运行时间。\n\n因此，重叠相加法的每块处理时间为\n$$\nt_{\\mathrm{proc}}(N) = 2\\big(\\alpha \\, N \\log_{2} N + \\beta \\, N\\big) + \\gamma \\, N + t_{0}.\n$$\n\n实时可行性要求，对于每个数据块，其计算必须在采集下 $B$ 个样本所需的时间内完成。这得出了吞吐量约束\n$$\nt_{\\mathrm{proc}}(N) \\leq \\frac{B}{R}.\n$$\n在分块实时处理中，一个保守且广泛使用的端到端延迟上界是通过将最坏情况下的块缓冲延迟与每块的计算时间相加得到的，这得出了延迟约束\n$$\n\\frac{B}{R} + t_{\\mathrm{proc}}(N) \\leq D.\n$$\n\n给定具体参数\n- $R = 4.8 \\times 10^{4}$ 样本/秒，\n- $D = 1.0 \\times 10^{-2}$ 秒，\n- $L = 5.13 \\times 10^{2}$ 样本，\n- $\\alpha = 3.2 \\times 10^{-8}$ 秒，\n- $\\beta = 2.0 \\times 10^{-9}$ 秒，\n- $\\gamma = 1.0 \\times 10^{-9}$ 秒，\n- $t_{0} = 8.0 \\times 10^{-6}$ 秒，\n\n确定使 $B$ 最大化的数对 $(B^{\\star}, N^{\\star})$，需满足以下条件\n- $N$ 是 2 的幂，\n- $N \\geq B + L - 1$，\n- $t_{\\mathrm{proc}}(N) \\leq \\frac{B}{R}$，\n- $\\frac{B}{R} + t_{\\mathrm{proc}}(N) \\leq D$。\n\n以无单位的整数对 $(B^{\\star}, N^{\\star})$ 的形式报告你的答案。如果多个数对达到相同的最大值 $B$，选择其中 $N$ 最小的那个。你的最终答案必须是一个单行矩阵。除了此处说明的整数约束外，不需要进行四舍五入。", "solution": "目标是确定整数对 $(B^{\\star}, N^{\\star})$，以在与实时快速卷积相关的一系列约束条件下，最大化块大小 $B$。约束条件如下：\n$1$. $N$ 必须是 2 的幂。\n$2$. 重叠相加法的结构约束：$N \\geq B + L - 1$。\n$3$. 实时吞吐量约束：$t_{\\mathrm{proc}}(N) \\leq \\frac{B}{R}$。\n$4$. 端到端延迟约束：$\\frac{B}{R} + t_{\\mathrm{proc}}(N) \\leq D$。\n\n每块的处理时间由下式给出\n$$t_{\\mathrm{proc}}(N) = 2\\big(\\alpha N \\log_{2} N + \\beta N\\big) + \\gamma N + t_{0}$$\n可简化为\n$$t_{\\mathrm{proc}}(N) = (2\\alpha) N \\log_{2} N + (2\\beta + \\gamma) N + t_{0}$$\n\n吞吐量和延迟约束可以合并。根据约束条件 $3$，我们有 $B \\geq R \\cdot t_{\\mathrm{proc}}(N)$。根据约束条件 $4$，我们有 $B \\leq R(D - t_{\\mathrm{proc}}(N))$。对于给定的 $N$，要使 $B$ 存在可行解，必须满足\n$$R \\cdot t_{\\mathrm{proc}}(N) \\leq R(D - t_{\\mathrm{proc}}(N))$$\n这可以简化为必要条件\n$$2 t_{\\mathrm{proc}}(N) \\leq D$$\n这个不等式给出了 $N$ 的允许值的上界。\n\n给定参数为：\n- $R = 4.8 \\times 10^{4}$\n- $D = 1.0 \\times 10^{-2}$\n- $L = 513$\n- $\\alpha = 3.2 \\times 10^{-8}$\n- $\\beta = 2.0 \\times 10^{-9}$\n- $\\gamma = 1.0 \\times 10^{-9}$\n- $t_{0} = 8.0 \\times 10^{-6}$\n\n首先，我们计算处理时间函数的系数：\n$$2\\alpha = 2 \\times (3.2 \\times 10^{-8}) = 6.4 \\times 10^{-8}$$\n$$2\\beta + \\gamma = 2 \\times (2.0 \\times 10^{-9}) + 1.0 \\times 10^{-9} = 5.0 \\times 10^{-9}$$\n因此，处理时间为\n$$t_{\\mathrm{proc}}(N) = (6.4 \\times 10^{-8}) N \\log_{2} N + (5.0 \\times 10^{-9}) N + 8.0 \\times 10^{-6}$$\n必要条件变为 $t_{\\mathrm{proc}}(N) \\leq D/2$，即\n$$t_{\\mathrm{proc}}(N) \\leq \\frac{1.0 \\times 10^{-2}}{2} = 5.0 \\times 10^{-3}$$\n\n我们必须搜索是 2 的幂且满足此条件的 $N$ 值。结构约束 $N \\geq B + L - 1$ 意味着 $N \\geq B + 513 - 1 = B + 512$。由于 $B$ 必须是正整数，因此 $B \\geq 1$，这意味着 $N \\geq 513$。大于或等于 $513$ 的最小的 2 的幂是 $N = 1024$。\n\n让我们从 $1024$ 开始测试 $N$ 的候选值：\n\n对于 $N = 1024 = 2^{10}$：\n$t_{\\mathrm{proc}}(1024) = (6.4 \\times 10^{-8})(1024)(10) + (5.0 \\times 10^{-9})(1024) + 8.0 \\times 10^{-6}$\n$t_{\\mathrm{proc}}(1024) = 6.5536 \\times 10^{-4} + 5.12 \\times 10^{-6} + 8.0 \\times 10^{-6} = 6.6848 \\times 10^{-4}$ 秒。\n检查必要条件：$t_{\\mathrm{proc}}(1024) = 6.6848 \\times 10^{-4} \\leq 5.0 \\times 10^{-3}$。此条件满足。\n\n对于 $N = 2048 = 2^{11}$：\n$t_{\\mathrm{proc}}(2048) = (6.4 \\times 10^{-8})(2048)(11) + (5.0 \\times 10^{-9})(2048) + 8.0 \\times 10^{-6}$\n$t_{\\mathrm{proc}}(2048) = 1.441792 \\times 10^{-3} + 1.024 \\times 10^{-5} + 8.0 \\times 10^{-6} = 1.460032 \\times 10^{-3}$ 秒。\n检查必要条件：$t_{\\mathrm{proc}}(2048) = 1.460032 \\times 10^{-3} \\leq 5.0 \\times 10^{-3}$。此条件满足。\n\n对于 $N = 4096 = 2^{12}$：\n$t_{\\mathrm{proc}}(4096) = (6.4 \\times 10^{-8})(4096)(12) + (5.0 \\times 10^{-9})(4096) + 8.0 \\times 10^{-6}$\n$t_{\\mathrm{proc}}(4096) = 3.145728 \\times 10^{-3} + 2.048 \\times 10^{-5} + 8.0 \\times 10^{-6} = 3.174208 \\times 10^{-3}$ 秒。\n检查必要条件：$t_{\\mathrm{proc}}(4096) = 3.174208 \\times 10^{-3} \\leq 5.0 \\times 10^{-3}$。此条件满足。\n\n对于 $N = 8192 = 2^{13}$：\n$t_{\\mathrm{proc}}(8192) = (6.4 \\times 10^{-8})(8192)(13) + (5.0 \\times 10^{-9})(8192) + 8.0 \\times 10^{-6}$\n$t_{\\mathrm{proc}}(8192) = 6.815744 \\times 10^{-3} + 4.096 \\times 10^{-5} + 8.0 \\times 10^{-6} = 6.864704 \\times 10^{-3}$ 秒。\n检查必要条件：$t_{\\mathrm{proc}}(8192) = 6.864704 \\times 10^{-3} > 5.0 \\times 10^{-3}$。此条件不满足。\n\n因此，$N$ 唯一可能的值是 $\\{1024, 2048, 4096\\}$。对于这些值中的每一个，我们都必须找到最大可能的整数 $B$。$B$ 的约束条件是：\n- $B \\leq N - L + 1 = N - 512$\n- $B \\geq R \\cdot t_{\\mathrm{proc}}(N)$\n- $B \\leq R(D - t_{\\mathrm{proc}}(N))$\n\n这意味着对于给定的 $N$，$B$ 的最大整数值为\n$$B_{max}(N) = \\min\\left( N - 512, \\lfloor R(D - t_{\\mathrm{proc}}(N)) \\rfloor \\right)$$\n我们还必须确保该值与下界一致，即 $B_{max}(N) \\geq \\lceil R \\cdot t_{\\mathrm{proc}}(N) \\rceil$。\n\n我们现在为每个有效的 $N$ 计算 $B_{max}(N)$：\n\n情况 $N = 1024$：\n- $B \\leq 1024 - 512 = 512$。\n- $B \\geq (4.8 \\times 10^4) \\times (6.6848 \\times 10^{-4}) = 32.08704$。因此，$B \\geq 33$。\n- $B \\leq (4.8 \\times 10^4) \\times (1.0 \\times 10^{-2} - 6.6848 \\times 10^{-4}) = (4.8 \\times 10^4) \\times (9.33152 \\times 10^{-3}) = 447.91296$。因此，$B \\leq 447$。\n合并约束条件，$33 \\leq B \\leq \\min(512, 447) = 447$。最大值为 $B_{max}(1024) = 447$。\n\n情况 $N = 2048$：\n- $B \\leq 2048 - 512 = 1536$。\n- $B \\geq (4.8 \\times 10^4) \\times (1.460032 \\times 10^{-3}) = 70.081536$。因此，$B \\geq 71$。\n- $B \\leq (4.8 \\times 10^4) \\times (1.0 \\times 10^{-2} - 1.460032 \\times 10^{-3}) = (4.8 \\times 10^4) \\times (8.539968 \\times 10^{-3}) = 409.918464$。因此，$B \\leq 409$。\n合并约束条件，$71 \\leq B \\leq \\min(1536, 409) = 409$。最大值为 $B_{max}(2048) = 409$。\n\n情况 $N = 4096$：\n- $B \\leq 4096 - 512 = 3584$。\n- $B \\geq (4.8 \\times 10^4) \\times (3.174208 \\times 10^{-3}) = 152.361984$。因此，$B \\geq 153$。\n- $B \\leq (4.8 \\times 10^4) \\times (1.0 \\times 10^{-2} - 3.174208 \\times 10^{-3}) = (4.8 \\times 10^4) \\times (6.825792 \\times 10^{-3}) = 327.638016$。因此，$B \\leq 327$。\n合并约束条件，$153 \\leq B \\leq \\min(3584, 327) = 327$。最大值为 $B_{max}(4096) = 327$。\n\n比较每个有效 $N$ 对应的 $B$ 的最大值：\n- 对于 $N=1024$，$B_{max}=447$。\n- 对于 $N=2048$，$B_{max}=409$。\n- 对于 $N=4096$，$B_{max}=327$。\n\n$B$ 的全局最大值是 $B^{\\star} = 447$，这是在 $N^{\\star} = 1024$ 时实现的。问题说明，如果多个数对达到相同的最大值 $B$，则应选择 $N$ 最小的那个。在这里，最大值 $B$ 对于单个 $N$ 是唯一的，因此这个决胜规则并非严格必要，但解决方案与其一致。\n\n最优数对是 $(B^{\\star}, N^{\\star}) = (447, 1024)$。", "answer": "$$\\boxed{\\begin{pmatrix} 447 & 1024 \\end{pmatrix}}$$", "id": "2870437"}]}