{"hands_on_practices": [{"introduction": "我们首先从一个开环不稳定的系统开始实践。这个练习将挑战你对奈奎斯特稳定性判据完整形式 $N=Z-P$ 的理解，特别是当开环系统自身不稳定时（即 $P>0$）的情形。通过确定稳定闭环系统所必需的对临界点 $-1$ 的环绕数，你将学会如何运用奈奎斯特图来指导不稳定对象的设计，这在控制实践中至关重要。[@problem_id:2728471]", "problem": "考虑一个单位反馈环路，其开环传递函数为 $L(s)=\\dfrac{K}{(s-1)(s+3)}$，其中 $K \\in \\mathbb{R}$，且开环系统在 $s=1$ 处有一个右半平面极点。请使用奈奎斯特稳定性判据 (NSC)，根据幅角原理和映射 $s \\mapsto L(s)$ 的基本原理进行推断，以确定为实现 $Z=0$（即 $1+L(s)$ 没有右半平面零点）时，奈奎斯特图需要对点 $-1$ 的净包围圈数。然后，分析参数频率响应 $L(\\mathrm{j}\\omega)$，以找到使奈奎斯特图穿过 $-1$ 点的精确临界增益 $K^{\\star}>0$，从而区分稳定的与不稳定的闭环行为。请给出 $K^{\\star}$ 的精确值，无需四舍五入。仅报告 $K^{\\star}$ 作为您的最终答案。", "solution": "该问题要求使用奈奎斯特稳定性判据分析单位反馈闭环系统的稳定性。开环传递函数为 $L(s) = \\dfrac{K}{(s-1)(s+3)}$，其中 $K \\in \\mathbb{R}$ 且 $K>0$。\n\n奈奎斯特稳定性判据是柯西（Cauchy）幅角原理的直接应用。它表明 $Z = N + P$，其中：\n$P$ 是开环传递函数 $L(s)$ 在开右半平面 (RHP) 内的极点数量。\n$Z$ 是特征方程 $1+L(s)=0$ 在 RHP 内的零点数量。这些也就是闭环系统在 RHP 内的极点。\n$N$ 是 $L(s)$ 的奈奎斯特图对临界点 $-1+j0$ 的净逆时针 (CCW) 包围圈数。顺时针 (CW) 包围算作负值。\n\n首先，我们必须验证给定条件并确定判据的参数。\n开环传递函数 $L(s)$ 的极点位于 $s=1$ 和 $s=-3$。极点 $s=1$ 位于 RHP 内。因此，不稳定的开环极点数量为 $P=1$。\n\n为使闭环系统稳定，其在 RHP 内必须没有极点。这对应于条件 $Z=0$。\n将 $Z=0$ 和 $P=1$ 代入奈奎斯特方程，我们得到系统稳定所需的包围圈数：\n$$0 = N + 1 \\implies N = -1$$\n因此，为使闭环系统稳定，$L(s)$ 的奈奎斯特图必须顺时针方向精确包围点 $-1+j0$ 一圈。\n\n接下来，我们分析奈奎斯特图，它是 $L(s)$ 沿标准奈奎斯特 D-等高线求值的轨迹。为方便起见，我们首先考察虚轴 $s=j\\omega$（其中 $\\omega \\in (-\\infty, \\infty)$）的映射。频率响应为：\n$$L(j\\omega) = \\frac{K}{(j\\omega-1)(j\\omega+3)}$$\n为了找到曲线与实轴的交点，我们必须找到使 $L(j\\omega)$ 的虚部为零的频率 $\\omega$。我们对表达式进行有理化：\n$$L(j\\omega) = \\frac{K}{(j\\omega-1)(j\\omega+3)} = \\frac{K}{-\\omega^2 - 3 + j(2\\omega)}$$\n$$L(j\\omega) = \\frac{K}{(-\\omega^2 - 3) + j(2\\omega)} \\cdot \\frac{(-\\omega^2 - 3) - j(2\\omega)}{(-\\omega^2 - 3) - j(2\\omega)} = \\frac{K(-\\omega^2 - 3) - j(2K\\omega)}{(-\\omega^2 - 3)^2 + (2\\omega)^2}$$\n实部和虚部分别为：\n$$\\text{Re}[L(j\\omega)] = \\frac{K(-\\omega^2 - 3)}{(\\omega^2+3)^2 + 4\\omega^2}$$\n$$\\text{Im}[L(j\\omega)] = \\frac{-2K\\omega}{(\\omega^2+3)^2 + 4\\omega^2}$$\n为了让曲线位于实轴上，$\\text{Im}[L(j\\omega)]$ 必须为零。鉴于 $K>0$，条件 $\\text{Im}[L(j\\omega)]=0$ 仅在 $\\omega=0$ 时满足。这意味着对于 $\\omega \\in (-\\infty, \\infty)$，奈奎斯特图仅在频率 $\\omega=0$ 处穿过实轴。\n\n我们计算函数在此穿越频率处的值：\n$$L(j0) = \\frac{K}{(-1)(3)} = -\\frac{K}{3}$$\n当 $\\omega \\to \\infty$ 时，幅值 $|L(j\\omega)| \\approx |\\frac{K}{(j\\omega)^2}| = \\frac{K}{\\omega^2} \\to 0$。当 $\\omega \\to \\pm\\infty$ 时，曲线趋近于原点。\n当 $\\omega>0$ 时，$\\text{Re}[L(j\\omega)] < 0$ 且 $\\text{Im}[L(j\\omega)] < 0$。对于 $\\omega \\in (0, \\infty)$，曲线位于第三象限。\n当 $\\omega<0$ 时，$\\text{Re}[L(j\\omega)] < 0$ 且 $\\text{Im}[L(j\\omega)] > 0$。对于 $\\omega \\in (-\\infty, 0)$，曲线位于第二象限。\n完整的奈奎斯特图，包括映射到原点的 RHP 大半圆弧，形成一个闭合环路，该环路从原点开始，穿过第二象限到达实轴上的点 $-\\frac{K}{3}$，然后穿过第三象限返回原点。它是一个圆，其直径在实轴上介于 $0$ 和 $-K/3$ 之间。\n\n系统的稳定性取决于点 $-1$ 相对于该图的位置。\n如果点 $-1$ 被曲线包围，则包围圈数 $N=-1$（一次顺时针包围），这导致 $Z = -1 + P = -1 + 1 = 0$。系统是稳定的。这种情况发生在曲线的最左点 $-K/3$ 位于 $-1$ 的左侧时。\n$$- \\frac{K}{3} < -1 \\implies K > 3$$\n如果点 $-1$ 未被包围，则包围圈数 $N=0$，这导致 $Z = 0 + P = 1$。系统是不稳定的。这种情况发生在点 $-K/3$ 位于 $-1$ 的右侧时。\n$$- \\frac{K}{3} > -1 \\implies 0 < K < 3$$\n临界增益 $K^{\\star}$ 对应于奈奎斯特图恰好穿过点 $-1+j0$ 的边界情况。这发生在与实轴的交点恰好为 $-1$ 时。\n$$L(j0) = -\\frac{K^{\\star}}{3} = -1$$\n求解 $K^{\\star}$ 得：\n$$K^{\\star} = 3$$\n在此增益下，系统处于临界稳定状态，其闭环极点位于 $s=j\\omega=j0$，即 $s=0$。对于任何 $K>3$，系统都是稳定的。使曲线穿过 $-1$ 的临界增益恰好是 $3$。", "answer": "$$\\boxed{3}$$", "id": "2728471"}, {"introduction": "接下来，我们探讨一个在实际工程中常见且具有挑战性的情况：包含纯时间延迟的系统。时间延迟项 $e^{-sT}$ 使得传递函数成为非有理函数，奈奎斯特图能够优雅地处理此类问题，展现了其相对于根轨迹等方法的优越性。这个练习将引导你分析增益 $K$ 和延迟 $T$ 如何共同影响稳定性，并让你推导出导致系统发生霍普夫分岔（Hopf bifurcation）的临界条件。[@problem_id:2888094]", "problem": "一个单输入单输出单位反馈的线性时不变 (LTI) 回路，其开环传递函数（包含输入到输出的延迟）由下式给出\n$$\nL(s) = \\frac{K \\exp(-s T)}{s(s+1)},\n$$\n其中 $K \\gt 0$ 是静态回路增益，$T \\ge 0$ 是纯时间延迟。闭环特征方程为 $1 + L(s) = 0$。当一对共轭复特征根穿过虚轴时，闭环系统中会发生霍普夫分岔，根据奈奎斯特稳定性判据，这等效于 $L(j\\omega)$ 的奈奎斯特轨迹穿过复平面中的点 $-1$。\n\n仅使用奈奎斯特稳定性判据的基本定义以及有理函数和纯延迟的频率响应的基本性质，确定能使 $L(j\\omega)$ 的奈奎斯特轨迹穿过 $-1$ 的最小正延迟 $T = T_c(K)$。请提供一个仅用 $K$ 表示的 $T_c(K)$ 的精确闭式表达式。所有角度均使用弧度。将您的最终答案表示为一个精确的符号表达式；无需进行数值舍入。为明确起见，假设 $s$ 的单位是 $\\text{s}^{-1}$，$T$ 的单位是 $\\text{s}$，请以秒为单位报告 $T_c(K)$。", "solution": "问题要求找到最小的正延迟 $T = T_c(K)$，使得开环传递函数 $L(s)$ 的奈奎斯特轨迹穿过复平面中的临界点 $-1$。该条件由方程 $L(j\\omega) = -1$ 表示，其中频率 $\\omega > 0$。\n\n开环传递函数为：\n$$\nL(s) = \\frac{K \\exp(-s T)}{s(s+1)}\n$$\n我们将 $s = j\\omega$（其中 $j = \\sqrt{-1}$）代入方程 $L(s) = -1$：\n$$\n\\frac{K \\exp(-j\\omega T)}{j\\omega(j\\omega+1)} = -1\n$$\n通过考虑等式两边的幅值和相位，这个复数方程可以分解为两个实数方程。\n\n首先，我们分析幅值方程：\n$$\n\\left| \\frac{K \\exp(-j\\omega T)}{j\\omega(j\\omega+1)} \\right| = |-1|\n$$\n左侧的幅值计算如下：\n$$\n\\frac{|K| |\\exp(-j\\omega T)|}{|j\\omega| |j\\omega+1|} = 1\n$$\n鉴于 $K > 0$，我们有 $|K| = K$。复指数的幅值为 $|\\exp(-j\\omega T)| = 1$。分母项的幅值为 $|j\\omega| = \\omega$（对于 $\\omega > 0$）和 $|j\\omega+1| = \\sqrt{1^2 + \\omega^2} = \\sqrt{1+\\omega^2}$。因此，幅值方程简化为：\n$$\n\\frac{K}{\\omega \\sqrt{1+\\omega^2}} = 1\n$$\n我们记满足此条件的特定频率为 $\\omega_c$。\n$$\nK = \\omega_c \\sqrt{1+\\omega_c^2}\n$$\n为了用 $K$ 解出 $\\omega_c$，我们将两边平方：\n$$\nK^2 = \\omega_c^2 (1+\\omega_c^2) = \\omega_c^4 + \\omega_c^2\n$$\n这是一个关于 $\\omega_c^2$ 的二次方程。令 $x = \\omega_c^2$。\n$$\nx^2 + x - K^2 = 0\n$$\n使用二次公式 $x = \\frac{-b \\pm \\sqrt{b^2-4ac}}{2a}$，其中 $a=1$，$b=1$，$c=-K^2$：\n$$\n\\omega_c^2 = \\frac{-1 \\pm \\sqrt{1^2 - 4(1)(-K^2)}}{2(1)} = \\frac{-1 \\pm \\sqrt{1+4K^2}}{2}\n$$\n由于 $\\omega_c$ 是一个实数频率，$\\omega_c^2$ 必须为正。因为 $K>0$，$\\sqrt{1+4K^2} > 1$，所以我们必须选择正根：\n$$\n\\omega_c^2 = \\frac{-1 + \\sqrt{1+4K^2}}{2}\n$$\n因此，穿越频率 $\\omega_c$ 由 $K$ 唯一确定：\n$$\n\\omega_c = \\sqrt{\\frac{\\sqrt{1+4K^2} - 1}{2}}\n$$\n\n接下来，我们分析相位方程：\n$$\n\\arg(L(j\\omega_c)) = \\arg(-1)\n$$\n左侧的相位是：\n$$\n\\arg(L(j\\omega_c)) = \\arg(K) + \\arg(\\exp(-j\\omega_c T)) - \\arg(j\\omega_c) - \\arg(j\\omega_c+1)\n$$\n由于 $K > 0$，$\\arg(K) = 0$。其他项的相位是：\n$\\arg(\\exp(-j\\omega_c T)) = -\\omega_c T$\n$\\arg(j\\omega_c) = \\frac{\\pi}{2}$\n$\\arg(j\\omega_c+1) = \\arctan\\left(\\frac{\\omega_c}{1}\\right) = \\arctan(\\omega_c)$\n$-1$ 的相位是 $(2n+1)\\pi$，其中 $n \\in \\mathbb{Z}$ 是任意整数。所以，相位方程是：\n$$\n-\\omega_c T - \\frac{\\pi}{2} - \\arctan(\\omega_c) = (2n+1)\\pi\n$$\n我们求解 $T$：\n$$\nT = -\\frac{1}{\\omega_c} \\left( (2n+1)\\pi + \\frac{\\pi}{2} + \\arctan(\\omega_c) \\right)\n$$\n我们正在寻找最小的正延迟 $T_c(K) > 0$。由于 $\\omega_c > 0$，括号中的项必须为负。反正切函数对于正参数的取值范围是 $\\arctan(\\omega_c) \\in (0, \\frac{\\pi}{2})$。因此，$\\frac{\\pi}{2} + \\arctan(\\omega_c) \\in (\\frac{\\pi}{2}, \\pi)$。\n让我们检验对于不同的整数 $n$，括号内项的符号：\n对于 $n \\ge 0$，$(2n+1)\\pi$ 项为正，使得括号内的整个表达式为正，这将导致 $T < 0$。\n对于 $n = -1$，该项为 $-\\pi + \\frac{\\pi}{2} + \\arctan(\\omega_c) = -\\frac{\\pi}{2} + \\arctan(\\omega_c)$。由于 $\\arctan(\\omega_c) < \\frac{\\pi}{2}$，此项为负，从而得到一个正的 $T$ 值。\n对于 $n = -2$，该项为 $-3\\pi + \\frac{\\pi}{2} + \\arctan(\\omega_c) = -\\frac{5\\pi}{2} + \\arctan(\\omega_c)$，这个值更负，从而得到一个更大的正 $T$ 值。\n$T$ 的最小正值在 $n=-1$ 时获得，对应于 $-\\pi$ 的总相移。\n$$\n-\\omega_c T - \\frac{\\pi}{2} - \\arctan(\\omega_c) = -\\pi\n$$\n求解 $T=T_c$：\n$$\n\\omega_c T_c = \\pi - \\frac{\\pi}{2} - \\arctan(\\omega_c)\n$$\n$$\n\\omega_c T_c = \\frac{\\pi}{2} - \\arctan(\\omega_c)\n$$\n$$\nT_c(K) = \\frac{\\frac{\\pi}{2} - \\arctan(\\omega_c)}{\\omega_c}\n$$\n为了仅用 $K$ 表示，我们代入之前推导出的 $\\omega_c$ 的表达式：\n$$\n\\omega_c = \\sqrt{\\frac{\\sqrt{1+4K^2} - 1}{2}}\n$$\n将此代入 $T_c$ 的方程，得到最小正临界延迟 $T_c(K)$ 的最终表达式。\n$$\nT_c(K) = \\frac{\\frac{\\pi}{2} - \\arctan\\left(\\sqrt{\\frac{\\sqrt{1+4K^2} - 1}{2}}\\right)}{\\sqrt{\\frac{\\sqrt{1+4K^2} - 1}{2}}}\n$$\n此表达式即为所要求的精确闭式解。", "answer": "$$\n\\boxed{\\frac{\\frac{\\pi}{2} - \\arctan\\left(\\sqrt{\\frac{\\sqrt{1+4K^2} - 1}{2}}\\right)}{\\sqrt{\\frac{\\sqrt{1+4K^2} - 1}{2}}}}\n$$", "id": "2888094"}, {"introduction": "最后，我们将理论付诸实践，从解析推导转向计算实现。这个练习要求你设计一个算法，根据采样的频率响应数据 $L(j\\omega)$ 来稳健地计算奈奎斯特环绕数 $N$。这项任务不仅能加深你对环绕数作为相位累积的物理解释，还能让你掌握在现代控制工程中，如何利用数值方法来分析无法轻易手绘其奈奎斯特图的复杂系统。[@problem_id:2888095]", "problem": "给定一个环路传递函数 $L(j\\omega)$ 沿正虚轴的采样值，要求计算奈奎斯特环绕数 $N$，该数定义为标准奈奎斯特围线在 $L(s)$ 映射下的完整奈奎斯特图像对临界点 $-1$ 的顺时针环绕净圈数。假设 $L(s)$ 是一个真有理、实系数传递函数，且在虚轴上没有极点。你的方法必须仅依赖于 $L(j\\omega)$ 的采样值，并且必须是鲁棒的，即在你明确形式化的采样假设下，能产生正确的整数 $N$。\n\n从第一性原理出发，设计并实现一种计算 $N$ 的方法，将其解释为 $F(j\\omega) = 1 + L(j\\omega)$ 关于原点的卷绕数。你的推导必须从核心定义开始，不得包含任何奈奎斯特稳定性判据的陈述或任何计算 $N$ 的捷径公式。你必须阐明采样假设，在这些假设下，多边形近似的离散卷绕数收敛于连续卷绕数，从而得到正确的整数 $N$。算法必须包含安全措施，通过自适应地细化采样来强制满足你的假设。\n\n你的程序必须：\n- 构造一条闭合复曲线，该曲线使用 $\\omega \\in [0,\\omega_{\\max}]$ 范围内 $L(j\\omega)$ 的采样值以及复共轭来表示负频率分支，从而近似标准奈奎斯特围线的完整奈奎斯特图像。通过在复平面上的 $F(j\\omega_{\\max})$ 与其复共轭之间插入一座短桥，来显式地模拟跨越无穷大半圆的连接。如果 $\\omega = 0$ 可取（即原点处无极点），则直接包含该点。\n- 通过沿闭合多边形累加包裹的辐角增量（以弧度为单位），计算 $F(j\\omega)$ 关于 $0$ 的离散卷绕数。使用此结果返回带符号的整数 $N$，其中顺时针环绕计数为正。\n- 在正频率分支上实现自适应细化，以确保以下两个采样假设均成立：\n  1. $F(j\\omega)$ 的辐角在每段上的最大变化量严格小于 $\\pi$ 弧度。\n  2. $F(j\\omega)$ 的多边形近似的任何线性段到原点的最小距离由你选择的正容差作为下界，确保多边形不会在采样点之间穿过原点。\n- 选择足够大的 $\\omega_{\\max}$，使得 $\\lvert L(j\\omega_{\\max}) \\rvert$ 足够小，以致无穷大圆弧的贡献可以忽略不计，并使用一个容差对此进行数值验证。如果不满足，则自动增加 $\\omega_{\\max}$。\n\n所有角度必须以弧度处理。本问题不涉及物理单位。\n\n测试套件：\n对于以下四个传递函数，计算并输出如上定义的整数 $N$。每个传递函数由其分子和分母系数（按 $s$ 的降幂排列）指定。\n\n- 案例 1（稳定，低增益）：$L(s) = \\dfrac{1}{(s+1)(s+2)}$，即分子系数 $[\\,1\\,]$，分母系数 $[\\,1,\\,3,\\,2\\,]$。\n- 案例 2（稳定，较高增益）：$L(s) = \\dfrac{20}{(s+1)(s+2)}$，即分子系数 $[\\,20\\,]$，分母系数 $[\\,1,\\,3,\\,2\\,]$。\n- 案例 3（开环不稳定，但由于无虚轴极点，奈奎斯特方法适用）：$L(s) = \\dfrac{0.8}{(s-0.5)(s+1)(s+2)}$，即分子系数 $[\\,0.8\\,]$，分母系数 $[\\,1,\\,2.5,\\,0.5,\\,-1\\,]$。\n- 案例 4（带有一个零点，可能接近临界点）：$L(s) = \\dfrac{3(s+1)}{(s+0.2)(s+0.3)}$，即分子系数 $[\\,3,\\,3\\,]$，分母系数 $[\\,1,\\,0.5,\\,0.06\\,]$。\n\n你的程序应生成单行输出，其中包含一个用方括号括起来的逗号分隔列表的结果（例如，“[n1,n2,n3,n4]”），其中每个 $n_k$ 是按上述顺序为相应案例计算出的整数 $N$。", "solution": "设 $L(s)$ 是一个真有理、实系数传递函数，且在虚轴上没有极点。奈奎斯特图是标准奈奎斯特围线 $\\mathcal{D}$ 在映射 $s \\mapsto L(s)$ 下的像。围线 $\\mathcal{D}$ 由整个虚轴 $s=j\\omega$（其中 $\\omega \\in (-\\infty, \\infty)$）以及闭合于复平面右半部分的一个无穷大半径半圆组成。\n\n奈奎斯特图 $\\gamma_L = L(\\mathcal{D})$ 对点 $z_c = -1+j0$ 的环绕数 $N$ 由曲线 $\\gamma_L$ 关于 $z_c$ 的卷绕数定义。卷绕数 $W(\\gamma, z_0)$ 的标准定义将逆时针环绕计数为正。问题指定 $N$ 为 *顺时针* 环绕数，因此我们有 $N = -W(\\gamma_L, -1)$。\n\n$\\gamma_L$ 关于 $-1$ 的卷绕数等价于曲线 $\\gamma_F = 1 + \\gamma_L$ 关于原点 $0+j0$ 的卷绕数。设 $F(s) = 1 + L(s)$。那么，该曲线是 $\\mathcal{D}$ 在 $F(s)$ 映射下的像，且 $N = -W(F(\\mathcal{D}), 0)$。\n\n卷绕数 $W$ 由 $s$ 遍历围线 $\\mathcal{D}$ 时 $F(s)$ 的总辐角变化量除以 $2\\pi$ 给出。\n$$\nW(F(\\mathcal{D}), 0) = \\frac{1}{2\\pi} \\Delta_{\\mathcal{D}} \\arg(F(s))\n$$\n因此，需要计算的量是：\n$$\nN = -\\frac{1}{2\\pi} \\left[ \\oint_{\\mathcal{D}} d(\\arg(F(s))) \\right]\n$$\n\n为了进行数值计算，我们将奈奎斯特围线 $\\mathcal{D}$ 离散化，并用一个闭合多边形来近似曲线 $F(\\mathcal{D})$。围线 $\\mathcal{D}$ 分为三个部分：\n1. 正虚轴：$s=j\\omega$，其中 $\\omega$ 从 $0$ 到 $\\omega_{\\max}$。\n2. 大半圆：在右半平面中 $|s| \\to \\infty$。由于 $L(s)$ 是真的，当 $|s| \\to \\infty$ 时，$L(s) \\to k$，其中 $k$ 是一个常数（如果 $L(s)$ 是严格真的，则 $k=0$，如所有提供的例子所示）。因此，$F(s) = 1+L(s)$ 将整个半圆映射到一个点 $1+k$ 或其周围的一个小区域。只要 $|1+k|$ 不为零，其对关于原点的卷绕数的贡献为零。我们必须选择足够大的 $\\omega_{\\max}$，使得 $|L(j\\omega_{\\max})|$ 足够小，从而使得在无穷远处的行为可以通过点 $F(j\\omega_{\\max})$ 得到很好的近似。\n3. 负虚轴：$s=j\\omega$，其中 $\\omega$ 从 $-\\omega_{\\max}$ 到 $0$。由于 $L(s)$ 是一个具有实系数的传递函数，所以 $L(-j\\omega) = \\overline{L(j\\omega)}$。因此，$F(-j\\omega) = 1 + \\overline{L(j\\omega)} = \\overline{F(j\\omega)}$。这意味着负频率对应的曲线是正频率对应曲线的复共轭。\n\n我们的数值过程构造一条近似 $F(\\mathcal{D})$ 的闭合多边形路径：\n1. 为一个有序的频率集合 $0 = \\omega_0 < \\omega_1 < \\dots < \\omega_M = \\omega_{\\max}$ 生成一系列复数点 $P_k = F(j\\omega_k) = 1 + L(j\\omega_k)$。这构成了多边形的正频率分支。\n2. 按照问题描述，我们用一条直线段连接端点 $P_M = F(j\\omega_{\\max})$ 与其共轭点 $\\overline{P_M} = F(-j\\omega_{\\max})$。\n3. 通过从 $\\overline{P_M}$ 沿共轭路径追溯回起点来完成路径。顶点依次是 $\\overline{P_{M-1}}, \\overline{P_{M-2}}, \\dots, \\overline{P_1}, \\overline{P_0}$。因为对于实系数有理函数，$L(0)$ 是实数，所以 $P_0 = F(0)$ 也是实数，因此 $\\overline{P_0} = P_0$，多边形是闭合的。\n\n我们多边形的完整顶点序列是 $Z = [P_0, \\dots, P_M, \\overline{P_M}, \\dots, \\overline{P_1}, P_0]$。总辐角变化通过对连续顶点之间的辐角变化求和来计算。对于构成闭合多边形（$z_K = z_0$）的顶点序列 $z_0, z_1, \\dots, z_K$，总角度变化为：\n$$\n\\Delta\\theta_{total} = \\sum_{k=0}^{K-1} \\arg\\left(\\frac{z_{k+1}}{z_k}\\right)\n$$\n其中 $\\arg(z)$ 是辐角在 $(-\\pi, \\pi]$ 内的主值。当且仅当任意两个连续顶点 $z_k$ 和 $z_{k+1}$ 之间的真实角度变化量在量级上小于 $\\pi$ 时，此求和才有效。这引出了我们的第一个关键采样假设。\n\n**自适应采样假设与策略：**\n为了确保离散和收敛到真实的连续积分，我们的多边形近似的每一段都必须满足两个条件。我们将使用自适应采样算法来强制满足它们。从一个粗略的频率网格开始，我们递归地细分任何频率区间 $[\\omega_k, \\omega_{k+1}]$，直到其对应的线段 $[F(j\\omega_k), F(j\\omega_{k+1})]$ 满足：\n\n1. **角度变化条件：** 沿线段的辐角变化量级必须小于 $\\pi$。我们使用顶点来检查这一点：$|\\arg(F(j\\omega_{k+1}) / F(j\\omega_k))| < \\pi$。在实践中会使用一个小的容差，与 $\\pi - \\epsilon$ 进行比较。这可以防止卷绕数的混叠，即在两个间距较宽的采样点之间可能漏掉一次环绕。\n\n2. **原点邻近条件：** 多边形不得穿过原点。我们强制要求从原点到任意线段 $[F(j\\omega_k), F(j\\omega_{k+1})]$ 的最小欧几里得距离大于一个小的正容差 $\\delta > 0$。如果一条线段离原点过近，卷绕数将变得不确定且数值上不稳定。细分会精化路径，如果路径不穿过原点，则将其拉离原点；如果确实穿过，则检测到一次真正的穿越（这被关于 $L(s)$ 的问题假设所禁止）。\n\n算法流程如下：\n- 选择一个 $\\omega_{\\max}$ 的初始值，并不断增加它，直到 $|L(j\\omega_{\\max})|$ 低于预设容差，确保无穷远弧的闭合是有效的。\n- 在 $[0, \\omega_{\\max}]$ 上定义一个初始的粗略频率网格。\n- 这个网格被迭代地细化。在每一次遍历中，测试每个区间是否满足角度和距离条件。任何不满足的区间都会被二等分，然后重复此过程，直到对所有区间的完整遍历不再需要进一步的细化。\n- 利用最终为正频率分支精化出的顶点集，构造完整的闭合多边形。\n- 累加总角度变化，并计算环绕数 $N$：\n$$\nN = -\\text{round}\\left( \\frac{1}{2\\pi} \\Delta\\theta_{total} \\right)\n$$\n四舍五入到最接近的整数是合适的，因为结果必须是整数，任何偏差都源于数值精度误差。\n这个严谨的自适应过程保证了对整数 $N$ 的正确和鲁棒的计算。", "answer": "```python\nimport numpy as np\nfrom scipy.signal import TransferFunction\n\ndef _calculate_segment_dist_to_origin(z1: complex, z2: complex) -> float:\n    \"\"\"Calculates the minimum distance from the origin to the line segment [z1, z2].\"\"\"\n    if z1 == z2:\n        return abs(z1)\n\n    v = z2 - z1\n    v_norm_sq = v.real**2 + v.imag**2\n    if v_norm_sq < 1e-20:\n        return abs(z1)\n\n    # Project z1 onto the line defined by the segment\n    # t = -Re(conj(v) * z1) / |v|^2\n    t = -(v.real * z1.real + v.imag * z1.imag) / v_norm_sq\n\n    if 0 <= t <= 1:\n        # Closest point is on the segment\n        closest_point = z1 + t * v\n        return abs(closest_point)\n    elif t < 0:\n        # Closest point on segment is z1\n        return abs(z1)\n    else: # t > 1\n        # Closest point on segment is z2\n        return abs(z2)\n\ndef _compute_n(num: list, den: list) -> int:\n    \"\"\"\n    Computes the Nyquist encirclement number N for a given transfer function.\n    \"\"\"\n    # --- 1. Setup ---\n    L_tf = TransferFunction(num, den)\n\n    def L_jw(w_vals):\n        \"\"\"Helper to evaluate L(jw) for an array of frequencies.\"\"\"\n        # freqresp returns H(jw) and w. We only need H(jw).\n        # It handles w=0 correctly even though it warns about it sometimes.\n        _, H_jw = L_tf.freqresp(w=w_vals)\n        return H_jw\n\n    # --- 2. Determine adequate omega_max ---\n    w_max_tol = 1e-3\n    omega_max = 100.0  # Initial guess\n    while abs(L_jw(np.array([omega_max]))[0]) > w_max_tol:\n        omega_max *= 10\n        if omega_max > 1e8: # Safety break\n            raise RuntimeError(\"omega_max search did not converge.\")\n\n    # --- 3. Adaptive Sampling of the Positive Frequency Branch ---\n    # Start with a logarithmic grid, including 0.\n    initial_omegas = np.concatenate(([0], np.logspace(-3, np.log10(omega_max), 200)))\n    omegas = sorted(list(set(initial_omegas)))\n    \n    angle_limit = np.pi - 1e-9\n    dist_tol = 1e-6\n    \n    while True:\n        refined = False\n        new_omegas_to_add = []\n        \n        # Evaluate F(jw) = 1 + L(jw) for the current omega set\n        F_vals = 1 + L_jw(np.array(omegas))\n        omega_map = {w: f for w, f in zip(omegas, F_vals)}\n\n        for i in range(len(omegas) - 1):\n            w1, w2 = omegas[i], omegas[i+1]\n            F1, F2 = omega_map[w1], omega_map[w2]\n\n            # Condition 1: Check angle change\n            angle_change = np.angle(F2 / F1) if abs(F1) > 1e-9 else 0\n            \n            # Condition 2: Check distance to origin\n            min_dist = _calculate_segment_dist_to_origin(F1, F2)\n\n            if abs(angle_change) > angle_limit or min_dist < dist_tol:\n                # Subdivide the interval using geometric mean for log-spaced data\n                w_mid = np.sqrt(w1 * w2) if w1 > 0 else (w1 + w2) / 2.0\n                if w_mid > w1 and w_mid < w2:\n                  new_omegas_to_add.append(w_mid)\n                  refined = True\n        \n        if not refined:\n            break\n        \n        # Add new points and re-sort\n        omegas.extend(new_omegas_to_add)\n        omegas = sorted(list(set(omegas)))\n        if len(omegas) > 20000: # Safety break\n            raise RuntimeError(\"Adaptive sampling generated too many points.\")\n\n    # --- 4. Construct the Full Nyquist Contour and Compute Winding Number ---\n    # Final F(jw) points for the refined positive frequency range\n    F_pos = 1 + L_jw(np.array(omegas))\n    \n    # Construct the full closed polygon Z representing F(D)\n    # Path: F(0)...F(w_max), then conj(F(w_max))...conj(F(w_next_to_0)), back to F(0)\n    # The path is F_pos followed by the conjugate path in reverse.\n    # The sequence of vertices is [F_0, ..., F_M, bar(F_M), ..., bar(F_1), F_0]\n    # np.conj(F_pos[::-1]) creates [bar(F_M), ..., bar(F_0)]\n    full_contour_z = np.concatenate([F_pos, np.conj(F_pos[::-1])[1:]])\n\n    # Calculate total argument change by summing arg(z_{k+1}/z_k)\n    # This correctly computes the unwrapped angle change if |angle_change| < pi for all steps\n    delta_thetas = np.angle(full_contour_z[1:] / full_contour_z[:-1])\n    total_angle = np.sum(delta_thetas)\n    \n    # Winding number (CCW is positive)\n    w = total_angle / (2 * np.pi)\n    \n    # N is clockwise encirclements\n    N = -w\n    \n    # Return the nearest integer\n    return int(np.round(N))\n\ndef solve():\n    \"\"\"\n    Solves the problem for the given test suite of transfer functions.\n    \"\"\"\n    test_cases = [\n        # Case 1: L(s) = 1 / ((s+1)(s+2))\n        {'num': [1], 'den': [1, 3, 2]},\n        # Case 2: L(s) = 20 / ((s+1)(s+2))\n        {'num': [20], 'den': [1, 3, 2]},\n        # Case 3: L(s) = 0.8 / ((s-0.5)(s+1)(s+2))\n        {'num': [0.8], 'den': [1, 2.5, 0.5, -1]},\n        # Case 4: L(s) = 3(s+1) / ((s+0.2)(s+0.3))\n        {'num': [3, 3], 'den': [1, 0.5, 0.06]},\n    ]\n    \n    results = []\n    for case in test_cases:\n        try:\n            n_val = _compute_n(case['num'], case['den'])\n            results.append(n_val)\n        except Exception as e:\n            # In a real scenario, handle errors for specific cases\n            print(f\"Error computing for case {case}: {e}\")\n            results.append(None)\n    \n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2888095"}]}