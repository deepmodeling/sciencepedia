{"hands_on_practices": [{"introduction": "本练习将探讨气泡如何对其环境的突然变化做出瞬时响应。通过分析初始时刻 $t=0$ 的受力情况，我们将学习如何利用平衡态条件来确定气泡的初始加速度，这是掌握瑞利-普莱赛特方程动态应用的基础。[@problem_id:1739170]", "problem": "一个球形气泡被固定在一大体积的不可压缩的理想（非粘性）液体中。该液体的密度为常数 $\\rho_L$，在气液界面处的表面张力为 $\\sigma$。\n\n在初始时刻 $t  0$ 时，气泡具有恒定半径 $R_0$，并与周围压力为均匀恒定值 $P_{ext}$ 的液体处于力学平衡状态。\n\n气泡壁的径向运动 $R(t)$ 由以下简化的 Rayleigh-Plesset 方程决定：\n$$ R(t)\\ddot{R}(t) + \\frac{3}{2}\\dot{R}(t)^2 = \\frac{1}{\\rho_L} \\left( P_g(t) - P_\\infty(t) - \\frac{2\\sigma}{R(t)} \\right) $$\n此处，$P_g(t)$ 是气泡内部的气体压力，$P_\\infty(t)$ 是远离气泡的液体中的压力，$\\dot{R}$ 和 $\\ddot{R}$ 分别表示气泡壁的径向速度和径向加速度。内部气体压力遵循多方定律 $P_g(t) = P_{g0}(R_0/R(t))^{3\\gamma}$，其中 $P_{g0}$ 是 $t0$ 时的气体压力，$\\gamma$ 是多方指数。\n\n在 $t=0$ 时刻，外部压力瞬时降为零，即对于所有 $t \\ge 0$，$P_\\infty(t) = 0$。\n\n求气泡壁的初始径向加速度 $\\ddot{R}(0)$ 的表达式。", "solution": "我们从给定的简化 Rayleigh-Plesset 方程出发\n$$\nR(t)\\ddot{R}(t) + \\frac{3}{2}\\dot{R}(t)^{2} = \\frac{1}{\\rho_{L}}\\left(P_{g}(t) - P_{\\infty}(t) - \\frac{2\\sigma}{R(t)}\\right).\n$$\n当 $t0$ 时，气泡是静止的，半径为常数 $R_{0}$，远场压力为 $P_{\\infty}=P_{ext}$。力学平衡意味着 $\\dot{R}=0$ 和 $\\ddot{R}=0$，因此将 $R=R_{0}$、$\\dot{R}=0$、$\\ddot{R}=0$ 和 $P_{\\infty}=P_{ext}$ 代入可得\n$$\n0 = \\frac{1}{\\rho_{L}}\\left(P_{g0} - P_{ext} - \\frac{2\\sigma}{R_{0}}\\right),\n$$\n因此\n$$\nP_{g0} = P_{ext} + \\frac{2\\sigma}{R_{0}}.\n$$\n在 $t=0^{+}$ 时，远场压力瞬时设为 $P_{\\infty}(t)=0$。由于变化是瞬时的，界面位置和速度在 $t=0$ 时是连续的，所以\n$$\nR(0)=R_{0}, \\quad \\dot{R}(0)=0.\n$$\n气体压力遵循多方定律 $P_{g}(t)=P_{g0}\\left(\\frac{R_{0}}{R(t)}\\right)^{3\\gamma}$，所以在 $t=0$ 时，\n$$\nP_{g}(0) = P_{g0}\\left(\\frac{R_{0}}{R_{0}}\\right)^{3\\gamma} = P_{g0} = P_{ext} + \\frac{2\\sigma}{R_{0}}.\n$$\n将 $R(0)=R_{0}$、$\\dot{R}(0)=0$ 和 $P_{\\infty}(0)=0$ 代入 $t=0$ 时的 Rayleigh-Plesset 方程：\n$$\nR_{0}\\ddot{R}(0) + \\frac{3}{2}\\cdot 0^{2} = \\frac{1}{\\rho_{L}}\\left(P_{g}(0) - 0 - \\frac{2\\sigma}{R_{0}}\\right).\n$$\n化简可得\n$$\n\\ddot{R}(0) = \\frac{1}{\\rho_{L}R_{0}}\\left(P_{g}(0) - \\frac{2\\sigma}{R_{0}}\\right).\n$$\n代入 $P_{g}(0)=P_{ext} + \\frac{2\\sigma}{R_{0}}$ 可得\n$$\n\\ddot{R}(0) = \\frac{1}{\\rho_{L}R_{0}}\\left(P_{ext} + \\frac{2\\sigma}{R_{0}} - \\frac{2\\sigma}{R_{0}}\\right) = \\frac{P_{ext}}{\\rho_{L}R_{0}}.\n$$\n因此，初始径向加速度为\n$$\n\\ddot{R}(0) = \\frac{P_{ext}}{\\rho_{L}R_{0}}.\n$$", "answer": "$$\\boxed{\\frac{P_{ext}}{\\rho_{L}R_{0}}}$$", "id": "1739170"}, {"introduction": "在复杂的物理过程中，识别主导力是关键。本练习将引导你使用标度分析（scaling analysis）来判断在气泡剧烈坍缩时，是液体惯性还是表面张力起主导作用。这项技能对于建立简化模型和获得深刻的物理直觉至关重要。[@problem_id:1739111]", "problem": "在一个无限、不可压缩、无粘性液体中，一个球形气泡的动力学行为由简化的瑞利-普莱赛特方程描述：\n$$ p_{B}(t) - p_{\\infty} = \\rho \\left( R(t)\\frac{d^2R(t)}{dt^2} + \\frac{3}{2}\\left(\\frac{dR(t)}{dt}\\right)^2 \\right) + \\frac{2\\sigma}{R(t)} $$\n此处，$R(t)$ 是气泡的瞬时半径，$p_{B}(t)$ 是气泡内气体的压力，$p_{\\infty}$ 是远离气泡的液体中的恒定环境压力，$\\rho$ 是液体的恒定密度，$\\sigma$ 是气液界面处的恒定表面张力。\n\n项 $\\rho \\left( R \\ddot{R} + \\frac{3}{2} \\dot{R}^2 \\right)$ 代表了气泡周围加速运动的液体的惯性效应，其中点表示对时间的导数。项 $\\frac{2\\sigma}{R}$ 代表了由表面张力引起的压力贡献。\n\n考虑一个气泡经历剧烈坍塌的情景。更详细的分析（你可以假定其是正确的）表明，在此坍塌的最后时刻，当半径 $R$ 变得非常小时，气泡壁速度的平方遵循标度律 $\\left(\\frac{dR}{dt}\\right)^2 \\propto R^{-3}$。\n\n设 $\\mathcal{R}_{ratio}$ 为瑞利-普莱赛特方程中表面张力压力项的量值与主导惯性项量值的比率。基于对所提供标度律的分析，确定在坍塌过程中当 $R \\to 0$ 时，该比率的行为。然后，判断在以下两个阶段中的哪一个阶段，忽略表面张力项在物理上更为合理：(I) 从一个非常小的初始半径开始的缓慢扩张的最初阶段，或 (II) 剧烈坍塌的最后时刻。\n\n下列哪个陈述是正确的？\n\nA. 当 $R \\to 0$ 时，比率 $\\mathcal{R}_{ratio}$ 趋近于零。因此，在最终的剧烈坍塌期间忽略表面张力更为合理。\n\nB. 当 $R \\to 0$ 时，比率 $\\mathcal{R}_{ratio}$ 趋近于无穷大。因此，在初始的缓慢扩张期间忽略表面张力更为合理。\n\nC. 当 $R \\to 0$ 时，比率 $\\mathcal{R}_{ratio}$ 保持不变。因此，表面张力的相对重要性在两个阶段是相同的。\n\nD. 当 $R \\to 0$ 时，比率 $\\mathcal{R}_{ratio}$ 趋近于零。因此，在初始的缓慢扩张期间忽略表面张力更为合理。\n\nE. 当 $R \\to 0$ 时，比率 $\\mathcal{R}_{ratio}$ 趋近于无穷大。因此，在最终的剧烈坍塌期间忽略表面张力更为合理。", "solution": "我们从简化的瑞利-普莱赛特方程开始：\n$$\np_{B}(t) - p_{\\infty} = \\rho \\left( R \\ddot{R} + \\frac{3}{2}\\dot{R}^{2} \\right) + \\frac{2\\sigma}{R}.\n$$\n将我们感兴趣的比率定义为表面张力压力项的量值除以主导惯性项的量值：\n$$\n\\mathcal{R}_{ratio} \\equiv \\frac{\\left|\\frac{2\\sigma}{R}\\right|}{\\left|\\rho\\left(R\\ddot{R} + \\frac{3}{2}\\dot{R}^{2}\\right)\\right|}.\n$$\n在剧烈坍塌的最后时刻，我们已知标度律为\n$$\n\\dot{R}^{2} \\propto R^{-3}.\n$$\n引入 $V(t) \\equiv \\dot{R}(t)$。那么 $V^{2} \\propto R^{-3}$ 意味着 $|V| \\propto R^{-3/2}$。使用链式法则，\n$$\n\\ddot{R} = \\frac{dV}{dt} = \\frac{dV}{dR}\\frac{dR}{dt} = \\frac{dV}{dR}\\,V.\n$$\n因为 $V \\propto R^{-3/2}$，我们有\n$$\n\\frac{dV}{dR} \\propto R^{-5/2} \\quad \\Longrightarrow \\quad \\ddot{R} \\propto R^{-5/2}\\cdot R^{-3/2} = R^{-4}.\n$$\n因此，\n$$\nR\\ddot{R} \\propto R \\cdot R^{-4} = R^{-3}, \\qquad \\dot{R}^{2} \\propto R^{-3}.\n$$\n因此，两个惯性项都与 $R^{-3}$ 成比例，它们的和也是如此：\n$$\n\\left| \\rho\\left(R\\ddot{R} + \\frac{3}{2}\\dot{R}^{2}\\right) \\right| \\propto \\rho\\,R^{-3}.\n$$\n表面张力项的标度为\n$$\n\\left| \\frac{2\\sigma}{R} \\right| \\propto \\sigma\\,R^{-1}.\n$$\n因此该比率的标度为\n$$\n\\mathcal{R}_{ratio} \\propto \\frac{\\sigma R^{-1}}{\\rho R^{-3}} = \\frac{\\sigma}{\\rho}\\,R^{2}.\n$$\n当 $R \\to 0$ 时，我们有 $\\mathcal{R}_{ratio} \\to 0$。因此，在最终的剧烈坍塌期间，惯性项占主导地位，忽略表面张力更为合理。\n\n相比之下，在从一个非常小的半径开始的缓慢扩张的最初阶段，界面速度和加速度都很小，使得惯性项很小，而表面张力项 $\\propto R^{-1}$ 在 $R$ 很小时很大。因此，在这种情况下忽略表面张力就不那么合理了。\n\n因此，正确的陈述是，当 $R \\to 0$ 时，该比率趋近于零，并且在最终的剧烈坍塌期间忽略表面张力更为合理。", "answer": "$$\\boxed{A}$$", "id": "1739111"}, {"introduction": "许多现实世界的气泡动力学问题需要借助计算机来解决。本练习将理论与实践相结合，指导你通过数值模拟方法求解完整的瑞利-普莱赛特方程。你将学习如何为声场中气泡的非线性脉动建模，这是声化学和医学超声等前沿应用的核心。[@problem_id:2395994]", "problem": "您的任务是编写一个完整、可运行的程序，使用经典的四阶 Runge–Kutta 方法来模拟一个在不可压缩粘性液体中的球形气泡的非线性径向脉动，该过程由 Rayleigh–Plesset 方程控制。该模型基于应用于球形控制体的牛顿第二定律以及气体的多方压缩。控制常微分方程为 Rayleigh–Plesset 方程，如下所示：\n$$\n\\rho\\left(R\\,\\ddot{R}+\\frac{3}{2}\\dot{R}^{2}\\right)=P_{g}(R,t)-P_{\\infty}(t)-\\frac{2\\sigma}{R}-\\frac{4\\mu\\dot{R}}{R},\n$$\n其中 $R$ 是气泡半径，$\\dot{R}$ 是其时间导数，$\\ddot{R}$ 是其二阶时间导数，$\\rho$ 是液体密度，$\\sigma$ 是表面张力，$\\mu$ 是液体的动力粘度。周围压力场为\n$$\nP_{\\infty}(t)=P_{0}+P_{A}\\sin(2\\pi f t),\n$$\n其中 $P_{0}$ 是环境压力，$P_{A}$ 是声驱动振幅，$f$ 是驱动频率，单位为赫兹（正弦函数参数的单位为弧度）。气泡内的气体被建模为一个多方过程，\n$$\nP_{g}(R,t)=P_{g0}\\left(\\frac{R_{0}}{R}\\right)^{3\\gamma},\n$$\n其中 $P_{g0}=P_{0}+\\frac{2\\sigma}{R_{0}}$，$R_{0}$ 是平衡半径，$\\gamma$ 是多方指数。\n\n初始条件为\n$$\nR(0)=R_{0},\\quad \\dot{R}(0)=0.\n$$\n\n通过定义 $x_{1}=R$ 和 $x_{2}=\\dot{R}$ 将二阶方程转换为一阶系统，并使用经典的四阶 Runge–Kutta 方法以固定时间步长进行时间上的向前积分。您必须为每个指定的测试用例计算在模拟窗口内达到的最大半径。\n\n除非在测试用例中另有说明，否则请使用以下水的物理常数：\n- 液体密度: $\\rho=1000\\,\\mathrm{kg/m^{3}}$。\n- 动力粘度: $\\mu=1.0\\times 10^{-3}\\,\\mathrm{Pa\\cdot s}$。\n- 表面张力: $\\sigma=0.072\\,\\mathrm{N/m}$。\n- 环境压力: $P_{0}=101325\\,\\mathrm{Pa}$。\n- 气体多方指数: $\\gamma=1.4$。\n\n时间离散化：\n- 对于驱动频率 $f$，每个周期使用 $S$ 个时间步，其中 $S=4000$。\n- 时间步长为 $\\Delta t=\\frac{1}{f S}$。\n- 对于 $C$ 个周期，总步数为 $N=C S$，最终时间为 $T=\\frac{C}{f}$。\n\n对于下面的每个测试用例，模拟从 $t=0$ 到 $t=T$ 的过程，并记录最大半径 $\\max_{t\\in[0,T]}R(t)$。最终答案以微米表示，并精确到 $6$ 位小数。\n\n测试套件：\n- 用例 A (正常路径，中等驱动): $R_{0}=5.0\\times 10^{-6}\\,\\mathrm{m}$, $f=25000\\,\\mathrm{Hz}$, $P_{A}=50000\\,\\mathrm{Pa}$, $C=8$, 默认 $\\mu$。\n- 用例 B (边界情况，无驱动): $R_{0}=5.0\\times 10^{-6}\\,\\mathrm{m}$, $f=25000\\,\\mathrm{Hz}$, $P_{A}=0\\,\\mathrm{Pa}$, $C=8$, 默认 $\\mu$。\n- 用例 C (更小气泡，更高频率): $R_{0}=3.0\\times 10^{-6}\\,\\mathrm{m}$, $f=100000\\,\\mathrm{Hz}$, $P_{A}=20000\\,\\mathrm{Pa}$, $C=12$, 默认 $\\mu$。\n- 用例 D (增加粘度): $R_{0}=5.0\\times 10^{-6}\\,\\mathrm{m}$, $f=25000\\,\\mathrm{Hz}$, $P_{A}=50000\\,\\mathrm{Pa}$, $C=8$, $\\mu=5.0\\times 10^{-3}\\,\\mathrm{Pa\\cdot s}$。\n\n数值要求：\n- 针对一阶系统，按照规定使用固定的 $\\Delta t$ 实现经典的四阶 Runge–Kutta 时间积分器。\n- 确保函数评估使用给定的 Rayleigh–Plesset 方程，其中 $P_{g0}=P_{0}+\\frac{2\\sigma}{R_{0}}$ 且 $P_{g}(R,t)=P_{g0}\\left(\\frac{R_{0}}{R}\\right)^{3\\gamma}$。\n- 在整个模拟过程中使用国际单位制 (SI)。在最后输出时，将报告的最大半径转换为微米。\n\n最终输出格式：\n- 您的程序应生成一行输出，其中包含一个用方括号括起来的逗号分隔列表。列表中的每个条目分别为用例 A、B、C 和 D 的最大半径（单位为微米），并精确到 $6$ 位小数，例如 $[a,b,c,d]$，其中 $a$、$b$、$c$ 和 $d$ 是以微米为单位的小数。", "solution": "此问题已经过验证，被认为是有效的。它构成了一个基于流体动力学既定原则的适定初值问题，并且在科学和数学上都表述严谨。所有必要的参数、初始条件和常数都已提供，确保了计算任务是可解且无歧义的。\n\n解决方案涉及使用经典的四阶 Runge-Kutta (RK4) 方法对二阶常微分方程 (ODE) —— Rayleigh-Plesset 方程进行数值积分。第一步是将单个二阶常微分方程转换为一个包含两个一阶常微分方程的系统。设状态向量为 $\\mathbf{x}(t) = [x_1(t), x_2(t)]^T$，其中 $x_1 = R$ 是气泡半径，$x_2 = \\dot{R}$ 是径向速度。那么，导数如下：\n$$\n\\frac{dx_1}{dt} = \\dot{R} = x_2\n$$\n$$\n\\frac{dx_2}{dt} = \\ddot{R}\n$$\n径向加速度 $\\ddot{R}$ 的表达式可以通过重新排列给定的 Rayleigh-Plesset 方程得到：\n$$\n\\rho\\left(R\\,\\ddot{R}+\\frac{3}{2}\\dot{R}^{2}\\right)=P_{g}(R,t)-P_{\\infty}(t)-\\frac{2\\sigma}{R}-\\frac{4\\mu\\dot{R}}{R}\n$$\n分离出 $\\ddot{R}$ 可得：\n$$\n\\ddot{R} = \\frac{1}{R} \\left[ \\frac{1}{\\rho} \\left( P_{g}(R,t)-P_{\\infty}(t)-\\frac{2\\sigma}{R}-\\frac{4\\mu\\dot{R}}{R} \\right) - \\frac{3}{2}\\dot{R}^{2} \\right]\n$$\n用 $x_1$ 替换 $R$，$x_2$ 替换 $\\dot{R}$，并代入内部气体压力 $P_g(R,t)$ 和外部声场 $P_\\infty(t)$ 的给定表达式，我们将该常微分方程系统定义为 $\\dot{\\mathbf{x}} = \\mathbf{F}(t, \\mathbf{x})$：\n$$\n\\mathbf{F}(t, \\mathbf{x}) = \n\\begin{pmatrix} f_1(t, \\mathbf{x}) \\\\ f_2(t, \\mathbf{x}) \\end{pmatrix} = \n\\begin{pmatrix}\nx_2 \\\\\n\\frac{1}{x_1} \\left[ \\frac{1}{\\rho} \\left( \\left(P_0 + \\frac{2\\sigma}{R_0}\\right) \\left(\\frac{R_0}{x_1}\\right)^{3\\gamma} - \\left(P_0 + P_A\\sin(2\\pi f t)\\right) - \\frac{2\\sigma}{x_1} - \\frac{4\\mu x_2}{x_1} \\right) - \\frac{3}{2}x_2^{2} \\right]\n\\end{pmatrix}\n$$\n初始条件为 $R(0)=R_0$ 和 $\\dot{R}(0)=0$，这转换为初始状态向量 $\\mathbf{x}(0) = [R_0, 0]^T$。\n\n该初值问题使用经典的四阶 Runge-Kutta 方法求解。对于一个时间步长 $\\Delta t$，在时间 $t_{n+1} = t_n + \\Delta t$ 的状态可由在时间 $t_n$ 的状态通过以下公式计算得出：\n$$\n\\mathbf{x}_{n+1} = \\mathbf{x}_n + \\frac{\\Delta t}{6} (\\mathbf{k}_1 + 2\\mathbf{k}_2 + 2\\mathbf{k}_3 + \\mathbf{k}_4)\n$$\n其中，中间增量计算如下：\n$$\n\\begin{aligned}\n\\mathbf{k}_1 = \\mathbf{F}(t_n, \\mathbf{x}_n) \\\\\n\\mathbf{k}_2 = \\mathbf{F}(t_n + \\frac{\\Delta t}{2}, \\mathbf{x}_n + \\frac{\\Delta t}{2}\\mathbf{k}_1) \\\\\n\\mathbf{k}_3 = \\mathbf{F}(t_n + \\frac{\\Delta t}{2}, \\mathbf{x}_n + \\frac{\\Delta t}{2}\\mathbf{k}_2) \\\\\n\\mathbf{k}_4 = \\mathbf{F}(t_n + \\Delta t, \\mathbf{x}_n + \\Delta t\\,\\mathbf{k}_3)\n\\end{aligned}\n$$\n此方法在精度和计算效率之间提供了良好的平衡，适合此类问题。\n\n模拟在从 $t=0$ 到 $t=T$ 的时间窗口内进行，其中 $T = C/f$。时间步长固定为 $\\Delta t = 1/(fS)$，每个声学周期有 $S=4000$ 步，总步数为 $N=CS$。算法流程如下：\n1. 对于每个测试用例，定义具体参数（$R_0, f, P_A, C, \\mu$）和固定的物理常数（$\\rho, \\sigma, P_0, \\gamma$）。预先计算平衡气体压力 $P_{g0} = P_0 + 2\\sigma/R_0$。\n2. 设置初始状态 $\\mathbf{x}_0 = [R_0, 0]^T$ 和初始时间 $t_0=0$。将变量 `max_radius` 初始化为 $R_0$。\n3. 一个循环从 $n=0$ 迭代到 $N-1$，在每次迭代中执行一个 RK4 步骤，从 $\\mathbf{x}_n$ 计算 $\\mathbf{x}_{n+1}$。\n4. 在循环内部，每次更新后，将新状态向量的第一个分量 $x_{1,n+1}$ 与 `max_radius` 进行比较，如果找到新的最大值，则更新 `max_radius`。\n5. 循环完成后，将最终的 `max_radius` 值（单位为国际单位制中的米）乘以 $10^6$ 转换为微米。\n6. 然后按要求将此结果四舍五入到 $6$ 位小数。对四个指定的测试用例中的每一个重复整个过程。收集结果并格式化为单个字符串。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves the Rayleigh-Plesset equation for bubble pulsation using the RK4 method\n    for a series of test cases and reports the maximum bubble radius.\n    \"\"\"\n    \n    # Define globally fixed physical constants\n    RHO = 1000.0  # Liquid density [kg/m^3]\n    SIGMA = 0.072  # Surface tension [N/m]\n    P0 = 101325.0  # Ambient pressure [Pa]\n    GAMMA = 1.4    # Polytropic exponent\n\n    def F(t, x, params):\n        \"\"\"\n        Computes the derivative vector d(x)/dt for the Rayleigh-Plesset system.\n        x is the state vector [R, R_dot].\n        params is a dictionary containing all physical and simulation parameters.\n        \"\"\"\n        R, R_dot = x\n        \n        # Unpack parameters for clarity\n        rho = params['rho']\n        mu = params['mu']\n        sigma = params['sigma']\n        P0 = params['P0']\n        gamma = params['gamma']\n        R0 = params['R0']\n        f = params['f']\n        P_A = params['P_A']\n        P_g0 = params['P_g0']\n        \n        # Avoid division by zero if R collapses, though not expected in these cases.\n        if R = 1e-12:\n            return np.array([0.0, 0.0])\n\n        # Gas pressure inside the bubble (polytropic process)\n        P_g = P_g0 * (R0 / R)**(3 * gamma)\n        \n        # External pressure field\n        P_inf = P0 + P_A * np.sin(2 * np.pi * f * t)\n        \n        # Expression for R_ddot (rearranged Rayleigh-Plesset equation)\n        term_in_parenthesis = P_g - P_inf - (2 * sigma / R) - (4 * mu * R_dot / R)\n        R_ddot = (1 / R) * ((1 / rho) * term_in_parenthesis - 1.5 * R_dot**2)\n        \n        return np.array([R_dot, R_ddot])\n\n    def run_simulation(case_config):\n        \"\"\"\n        Runs a single simulation for a given configuration using the RK4 method.\n        \"\"\"\n        # Unpack case-specific parameters\n        R0 = case_config['R0']\n        f = case_config['f']\n        P_A = case_config['P_A']\n        C = case_config['C']\n        mu = case_config['mu']\n        \n        # Calculate derived parameters\n        P_g0 = P0 + (2 * SIGMA / R0)\n        \n        params = {\n            'rho': RHO, 'mu': mu, 'sigma': SIGMA, 'P0': P0, 'gamma': GAMMA,\n            'R0': R0, 'f': f, 'P_A': P_A, 'P_g0': P_g0\n        }\n        \n        # Time discretization settings\n        S = 4000  # Steps per cycle\n        dt = 1.0 / (f * S)\n        num_steps = int(C * S)\n        \n        # Initial conditions\n        t = 0.0\n        # State vector x = [R, R_dot]\n        x = np.array([R0, 0.0])\n        \n        max_radius = R0\n        \n        # RK4 integration loop\n        for _ in range(num_steps):\n            k1 = F(t, x, params)\n            k2 = F(t + 0.5 * dt, x + 0.5 * dt * k1, params)\n            k3 = F(t + 0.5 * dt, x + 0.5 * dt * k2, params)\n            k4 = F(t + dt, x + dt * k3, params)\n            \n            x = x + (dt / 6.0) * (k1 + 2 * k2 + 2 * k3 + k4)\n            t = t + dt\n            \n            # Update the maximum radius observed\n            if x[0]  max_radius:\n                max_radius = x[0]\n                \n        # Convert result from meters to micrometers\n        max_radius_micrometers = max_radius * 1e6\n        return max_radius_micrometers\n\n    # Define the test cases from the problem statement.\n    test_cases = [\n        # Case A: happy path, moderate drive\n        {'R0': 5.0e-6, 'f': 25000, 'P_A': 50000, 'C': 8, 'mu': 1.0e-3},\n        # Case B: boundary, no drive\n        {'R0': 5.0e-6, 'f': 25000, 'P_A': 0, 'C': 8, 'mu': 1.0e-3},\n        # Case C: smaller bubble, higher frequency\n        {'R0': 3.0e-6, 'f': 100000, 'P_A': 20000, 'C': 12, 'mu': 1.0e-3},\n        # Case D: increased viscosity\n        {'R0': 5.0e-6, 'f': 25000, 'P_A': 50000, 'C': 8, 'mu': 5.0e-3},\n    ]\n\n    results = []\n    for case in test_cases:\n        # Run simulation and get the max radius in micrometers\n        max_r_um = run_simulation(case)\n        # Format the result to exactly 6 decimal places\n        results.append(f\"{max_r_um:.6f}\")\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "2395994"}]}