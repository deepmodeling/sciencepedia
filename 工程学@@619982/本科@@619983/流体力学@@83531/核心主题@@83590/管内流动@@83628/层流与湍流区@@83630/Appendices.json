{"hands_on_practices": [{"introduction": "在分析任何管道流动问题时，第一步是判断流动是层流还是湍流。无量纲的雷诺数 $Re$ 是我们进行此分类的主要工具。本练习提供了一个涉及现代CPU冷却系统的实际场景，让您能够直接应用雷诺数公式，并使用标准的临界值来识别流动状态，这是所有后续分析的基础技能。", "problem": "在一个用于高性能中央处理器（CPU）的先进液体冷却系统中，一种特殊的介电冷却剂被泵送通过一个微观通道网络。考虑一个单一的、笔直的微通道，它可以被建模为一个内径为 $0.500$ mm 的圆柱形管道。冷却剂以 $1.20$ m/s 的平均速度流过这个通道。在其工作温度下，冷却剂的特性为密度 $\\rho = 1050$ kg/m$^3$ 和动力粘度 $\\mu = 8.00 \\times 10^{-4}$ Pa·s。\n\n为了表征流动，工程师使用雷诺数，$Re$。流动状态通常分类如下：\n- 层流，当 $Re < 2300$\n- 过渡流，当 $2300 \\le Re \\le 4000$\n- 湍流，当 $Re > 4000$\n\n根据这些参数，计算微通道中流动的雷诺数，并确定相应的流动状态。选择正确标识了雷诺数和流动状态的选项。将计算出的雷诺数四舍五入到三位有效数字。\n\nA. 雷诺数约为 788，流动为层流。\n\nB. 雷诺数约为 788，流动为湍流。\n\nC. 雷诺数约为 1575，流动为层流。\n\nD. 雷诺数约为 3150，流动为过渡流。\n\nE. 雷诺数约为 7875，流动为湍流。", "solution": "圆形管道内部流动的雷诺数由无量纲比率定义\n$$\nRe=\\frac{\\rho v D}{\\mu},\n$$\n其中 $\\rho$ 是流体密度，$v$ 是平均流速，$D$ 是管道直径，$\\mu$ 是动力粘度。\n\n将直径转换为米：\n$$\nD=0.500\\ \\text{mm}=0.500\\times 10^{-3}\\ \\text{m}=5.00\\times 10^{-4}\\ \\text{m}.\n$$\n代入给定值：\n$$\nRe=\\frac{(1050)\\,(1.20)\\,(5.00\\times 10^{-4})}{8.00\\times 10^{-4}}.\n$$\n分步计算分子：\n$$\n(1050)(1.20)=1260,\\quad 1260\\,(5.00\\times 10^{-4})=6.30\\times 10^{-1}.\n$$\n然后除以分母：\n$$\nRe=\\frac{6.30\\times 10^{-1}}{8.00\\times 10^{-4}}=\\left(\\frac{6.30}{8.00}\\right)\\times 10^{(-1)-(-4)}=0.7875\\times 10^{3}=7.875\\times 10^{2}=787.5.\n$$\n四舍五入到三位有效数字，雷诺数为 $788$。\n\n使用提供的标准对流动进行分类。由于 $Re=788$ 且 $788<2300$，因此流动是层流。\n\n因此，正确选项是 A。", "answer": "$$\\boxed{A}$$", "id": "1769671"}, {"introduction": "在学会分析给定流动之后，一个常见的工程任务是设计一个在特定流动状态下运行的系统。本练习在前一个练习的基础上，将问题反向设置：您不再是根据已知速度计算雷诺数，而是要确定为保持理想的层流状态所允许的最大速度。这项技能在精密流体输送或必须避免湍流引发振动的系统中至关重要。", "problem": "在设计用于高性能计算集群的液体冷却系统时，工程师必须确保介电冷却剂的流动保持为层流，以防止振动和不可预测的热性能。冷却剂通过一个光滑的圆形管道网络进行泵送。\n\n考虑该系统中的一根内径为 $D = 5.00 \\text{ mm}$ 的管道。在系统的工作温度下，该介电冷却剂的密度为 $\\rho = 1.76 \\times 10^3 \\text{ kg/m}^3$，动力粘度为 $\\mu = 1.45 \\times 10^{-3} \\text{ Pa}\\cdot\\text{s}$。\n\n针对这种特定冷却剂和管道几何形状的实验数据表明，当雷诺数超过临界值 $Re_{crit} = 2320$ 时，流动开始从稳定的层流向不稳定的湍流转变。\n\n在确保流动严格保持为层流的情况下，管道中可以维持的冷却剂的最大平均速度是多少？请以米每秒 (m/s) 为单位给出您的答案，并四舍五入到三位有效数字。", "solution": "对于光滑圆形管道中的不可压缩流动，基于平均速度的雷诺数为\n$$\n\\mathrm{Re}=\\frac{\\rho v D}{\\mu}.\n$$\n为确保流动严格保持为层流，当流态转变始于 $\\mathrm{Re}$ 超过 $Re_{\\text{crit}}$ 时，所允许的最大平均速度对应于\n$$\nv_{\\max}=\\frac{Re_{\\text{crit}}\\mu}{\\rho D}.\n$$\n将所有量转换为国际单位制 (SI) 单位：$D=5.00\\times 10^{-3}\\,\\text{m}$，$\\rho=1.76\\times 10^{3}\\,\\text{kg}\\,\\text{m}^{-3}$，以及 $\\mu=1.45\\times 10^{-3}\\,\\text{kg}\\,\\text{m}^{-1}\\,\\text{s}^{-1}$。代入得，\n$$\nv_{\\max}=\\frac{(2320)\\left(1.45\\times 10^{-3}\\right)}{\\left(1.76\\times 10^{3}\\right)\\left(5.00\\times 10^{-3}\\right)}.\n$$\n计算分子和分母：\n$$\n\\text{分子}=2320\\times 1.45\\times 10^{-3}=3.364,\n\\qquad\n\\text{分母}=1.76\\times 10^{3}\\times 5.00\\times 10^{-3}=8.80.\n$$\n因此，\n$$\nv_{\\max}=\\frac{3.364}{8.80}=0.3822727\\ldots\\ \\text{m}\\,\\text{s}^{-1}.\n$$\n四舍五入到三位有效数字，最大平均速度为 $0.382\\ \\text{m}\\,\\text{s}^{-1}$。", "answer": "$$\\boxed{0.382}$$", "id": "1769681"}, {"introduction": "这项综合性练习整合了流态分类和摩擦力的概念，以解决一个核心工程问题：预测管道中的压力损失。您将实施一个完整的工作流程，包括计算雷诺数，选择正确的摩擦系数关联式——无论是用于层流的简单解析公式，还是用于湍流的复杂的、隐式的Colebrook-White方程——并应用Darcy-Weisbach方程。通过以计算方式构建此逻辑，您将把理论与现代数值实践联系起来，从而全面理解管道流动分析。", "problem": "要求您构建一个程序，用于计算圆形管道内充分发展的、稳态的、不可压缩的、等温的、单相内部流动中的流向压降。程序必须仅以第一性原理定义和经过充分检验的公式作为起点。您的程序必须实现对 Colebrook 和 White 提出的隐式湍流摩擦系数关联式的迭代求解，且不得使用任何预先制表的数据。程序逻辑必须从核心定义出发，根据雷诺数对流态进行分类，并计算适用于该流态的达西摩擦系数。\n\n使用的基本原理：\n- 使用质量守恒定义总体平均速度 $U_b$ 和雷诺数 $Re$，其公式为 $Re = \\dfrac{\\rho U_b D}{\\mu}$。\n- 使用适用于充分发展管流的达西-魏斯巴赫关系式计算压降，其中包含达西摩擦系数 $f$。\n- 使用适用于充分发展圆形管流的层流摩擦系数关系式。\n- 使用由 Colebrook 和 White 引入的隐式湍流摩擦系数关联式，并对其进行迭代求解。\n\n定义和要求输出：\n1. 计算每个测试案例的雷诺数 $Re$。\n2. 使用以下阈值对流态进行分类：\n   - 若 $Re < 2300$，则为层流。\n   - 若 $2300 \\le Re \\le 4000$，则为过渡流。\n   - 若 $Re > 4000$，则为湍流。\n3. 确定用于计算压降的达西摩擦系数 $f_\\star$：\n   - 若为层流，使用层流圆形管道的结果。\n   - 若为湍流，迭代求解 Colebrook–White 隐式关联式以获得达西摩擦系数。\n   - 若为过渡流，同时计算层流摩擦系数和 Colebrook–White 湍流摩擦系数，并选择导致较大压降（等效于在固定工作点下选择较大的摩擦系数）的值作为保守估计。\n4. 使用达西-魏斯巴赫方程和选定的摩擦系数 $f_\\star$ 计算压降 $\\Delta p_\\star$。\n5. 对每个测试案例，按以下顺序输出一个包含四个条目的列表：\n   - $\\Delta p_\\star$，单位为 $\\mathrm{Pa}$，四舍五入到一位小数。\n   - $f_\\star$，无量纲的达西摩擦系数，四舍五入到八位小数。\n   - $Re$，无量纲量，四舍五入到一位小数。\n   - 流态代码，一个整数，其中 $0$ 表示层流，$1$ 表示过渡流，$2$ 表示湍流。\n6. 最终输出格式：您的程序应生成单行输出，其中包含一个由方括号括起来的逗号分隔列表，每个元素是对应一个测试案例的列表。例如，两个案例的输出格式应为 $[[\\dots],[\\dots]]$。\n\n控制量：\n- 管道直径 $D$（单位 $\\mathrm{m}$），长度 $L$（单位 $\\mathrm{m}$）。\n- 流体密度 $\\rho$（单位 $\\mathrm{kg/m^3}$），动力粘度 $\\mu$（单位 $\\mathrm{Pa\\cdot s}$）。\n- 总体平均速度 $U_b$（单位 $\\mathrm{m/s}$）。\n- 相对粗糙度 $\\varepsilon/D$（无量纲数）。\n\n迭代要求：\n- Colebrook–White 湍流摩擦系数必须通过应用于隐式关联式的显式迭代求解器计算。使用数值稳定的不动点或 Newton–Raphson 公式，并配有适定的初始猜测值、严格的收敛容差和最大迭代次数保护。\n\n测试套件：\n使用以下五个测试案例，每个案例定义为一个元组 $([\\varepsilon/D], D, L, \\rho, \\mu, U_b)$，所有数值均按给定值表示。请确保您的程序精确实现这些值。\n\n- 案例1（给定情景）： $([0.001], 0.1\\ \\mathrm{m}, 50\\ \\mathrm{m}, 1000\\ \\mathrm{kg/m^3}, 1.0\\times 10^{-3}\\ \\mathrm{Pa\\cdot s}, 2.0\\ \\mathrm{m/s})$。\n- 案例2（水力光滑对比项）： $([0.0], 0.1\\ \\mathrm{m}, 50\\ \\mathrm{m}, 1000\\ \\mathrm{kg/m^3}, 1.0\\times 10^{-3}\\ \\mathrm{Pa\\cdot s}, 2.0\\ \\mathrm{m/s})$。\n- 案例3（层流）： $([0.001], 0.1\\ \\mathrm{m}, 50\\ \\mathrm{m}, 1000\\ \\mathrm{kg/m^3}, 1.0\\times 10^{-3}\\ \\mathrm{Pa\\cdot s}, 0.01\\ \\mathrm{m/s})$。\n- 案例4（过渡流边界）： $([0.001], 0.1\\ \\mathrm{m}, 50\\ \\mathrm{m}, 1000\\ \\mathrm{kg/m^3}, 1.0\\times 10^{-3}\\ \\mathrm{Pa\\cdot s}, 0.023\\ \\mathrm{m/s})$。\n- 案例5（高粗糙度，高速度）： $([0.005], 0.1\\ \\mathrm{m}, 50\\ \\mathrm{m}, 1000\\ \\mathrm{kg/m^3}, 1.0\\times 10^{-3}\\ \\mathrm{Pa\\cdot s}, 5.0\\ \\mathrm{m/s})$。\n\n计算说明：\n- 始终使用达西摩擦系数（而不是范宁摩擦系数）。\n- 只考虑由壁面摩擦引起的压降；忽略静水压头、加速度、管件以及入口/出口损失。\n- 按照上述规定，将 $\\Delta p_\\star$ 以 $\\mathrm{Pa}$ 为单位表示，四舍五入到一位小数；$f_\\star$ 四舍五入到八位小数；$Re$ 四舍五入到一位小数。\n\n您的程序必须只生成一行输出：\n- 一个包含五个内部列表的单一列表，每个内部列表按上述顺序列出，对应一个测试案例。", "solution": "所提出的问题是基础流体动力学中一个适定的练习，具体涉及管道内部流动。它要求通过正确识别流态并应用适当的摩擦系数关联式来计算压降。问题陈述具有科学依据，逻辑一致，并为获得唯一解提供了所有必要的数据。因此，该问题被认为是**有效的**。\n\n解决方案首先建立理论框架，然后遵循系统的算法步骤进行计算。\n\n**1. 基本原理与控制方程**\n\n对充分发展的、稳态的、不可压缩的、等温的管流分析是建立在质量和动量守恒原理之上的。\n\n**1.1. 雷诺数与流态**\n流动的性质——层流、过渡流或湍流——由雷诺数 $Re$ 决定，这是一个代表惯性力与粘性力之比的无量纲量。其定义为：\n$$\nRe = \\dfrac{\\rho U_b D}{\\mu}\n$$\n其中 $\\rho$ 是流体密度，$U_b$ 是总体平均速度，$D$ 是管道直径，$\\mu$ 是流体的动力粘度。\n\n根据管流的实验证据，流态根据以下标准阈值进行分类：\n- **层流**：$Re < 2300$。其特征是平滑、有序的流体运动。\n- **过渡流**：$2300 \\le Re \\le 4000$。这是一个不稳定的流态，流动可能同时表现出层流和湍流的特征。\n- **湍流**：$Re > 4000$。其特征是混乱、随机的流体运动，伴有涡旋和脉动。\n\n**1.2. 达西-魏斯巴赫方程**\n在长度为 $L$ 的直圆形管道中，由壁面摩擦引起的压降 $\\Delta p$ 由达西-魏斯巴赫方程给出：\n$$\n\\Delta p = f \\frac{L}{D} \\frac{\\rho U_b^2}{2}\n$$\n这里，$f$ 是达西摩擦系数，一个用于说明管壁摩擦损失的无量纲参数。确定 $f$ 的值是核心任务，因为它取决于流态。\n\n**2. 摩擦系数的确定 ($f_\\star$)**\n\n问题指定了在每种流态下确定摩擦系数（表示为 $f_\\star$）的方法。\n\n**2.1. 层流态 ($Re < 2300$)**\n对于圆形管道中的层流，摩擦系数可以从 Navier-Stokes 方程中解析推导出来。其精确解为：\n$$\nf_\\star = f_{\\text{laminar}} = \\frac{64}{Re}\n$$\n\n**2.2. 湍流态 ($Re > 4000$)**\n对于湍流，摩擦系数同时取决于雷诺数和管壁的相对粗糙度 $\\varepsilon/D$。问题强制要求使用隐式的 Colebrook-White 关联式：\n$$\n\\frac{1}{\\sqrt{f}} = -2.0 \\log_{10} \\left( \\frac{\\varepsilon/D}{3.7} + \\frac{2.51}{Re \\sqrt{f}} \\right)\n$$\n该方程是关于 $f$ 的隐式方程，无法解析求解。需要使用迭代数值方法。一种稳健的方法是不动点迭代法。我们可以将方程重排为 $f = g(f)$ 的形式。令 $x = 1/\\sqrt{f}$，则方程为 $x = -2.0 \\log_{10}(\\frac{\\varepsilon/D}{3.7} + \\frac{2.51}{Re}x)$。然而，通过如下方式重排原方程可以获得更稳定的不动点格式：\n$$\nf_{k+1} = \\left[ -2.0 \\log_{10} \\left( \\frac{\\varepsilon/D}{3.7} + \\frac{2.51}{Re \\sqrt{f_k}} \\right) \\right]^{-2}\n$$\n其中 $k$ 是迭代指数。步骤如下：\n1.  用一个猜测值 $f_0$ 进行初始化。对于大多数工程应用，$f_0 = 0.02$ 是一个合理的起点。\n2.  使用上述公式进行迭代，直到变化量 $|f_{k+1} - f_k|$ 小于指定的容差（例如，$10^{-8}$）。\n3.  必须设置最大迭代次数，以防止在不收敛的情况下出现无限循环。\n\n最终收敛的值即为湍流摩擦系数，$f_\\star = f_{\\text{turbulent}}$。\n\n**2.3. 过渡流态 ($2300 \\le Re \\le 4000$)**\n过渡流态很复杂，缺乏一个单一、普遍接受的预测性关联式。按照规定，将采用一种保守的工程方法。这包括计算层流和湍流两种假设下的摩擦系数，并选择两者中较大的一个。\n1.  计算层流摩擦系数：$f_{\\text{laminar}} = 64/Re$。\n2.  通过迭代求解 Colebrook-White 方程，计算湍流摩擦系数 $f_{\\text{turbulent}}$，如同流动是完全湍流一样。\n3.  所选的摩擦系数是两者中的较大者：\n    $$\n    f_\\star = \\max(f_{\\text{laminar}}, f_{\\text{turbulent}})\n    $$\n这种方法确保了预测的压降是一个保守的上限，这是工程设计中的常见做法，以确保安全和性能裕度。\n\n**3. 算法步骤**\n\n对于每个给定了参数 $(\\varepsilon/D, D, L, \\rho, \\mu, U_b)$ 的测试案例，计算步骤如下：\n\n1.  **计算雷诺数**：使用其定义计算 $Re$。\n2.  **流态分类**：\n    - 若 $Re < 2300$，流态为层流（代码 $0$）。\n    - 若 $2300 \\le Re \\le 4000$，流态为过渡流（代码 $1$）。\n    - 若 $Re > 4000$，流态为湍流（代码 $2$）。\n3.  **计算摩擦系数 $f_\\star$**：\n    - 对于层流，使用 $f_\\star = 64/Re$。\n    - 对于湍流，迭代求解 Colebrook-White 方程得到 $f_\\star$。\n    - 对于过渡流，计算 $f_{\\text{laminar}}$ 和 $f_{\\text{turbulent}}$（通过 Colebrook-White 方程），并设 $f_\\star = \\max(f_{\\text{laminar}}, f_{\\text{turbulent}})$。\n4.  **计算压降 $\\Delta p_\\star$**：使用达西-魏斯巴赫方程和已确定的 $f_\\star$。\n5.  **格式化输出**：按照指定的四舍五入规则，组合成一个列表 $[\\text{四舍五入的} \\Delta p_\\star, \\text{四舍五入的} f_\\star, \\text{四舍五入的} Re, \\text{流态代码}]$。\n6.  **聚合结果**：将所有测试案例的输出列表收集到一个最终列表中。\n\n这个结构化的步骤确保了每个案例都根据流体力学的既定原则和问题陈述的精确要求进行处理。实现将封装在一个 Python 程序中，使用 `numpy` 进行数学运算。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve_colebrook(Re, eps_over_D, tol=1e-8, max_iter=100):\n    \"\"\"\n    Solves the Colebrook-White equation for the Darcy friction factor 'f'\n    using fixed-point iteration.\n\n    Args:\n        Re (float): Reynolds number.\n        eps_over_D (float): Relative roughness.\n        tol (float): Convergence tolerance.\n        max_iter (int): Maximum number of iterations.\n\n    Returns:\n        float: The Darcy friction factor 'f'.\n    \"\"\"\n    # Initial guess for f. 0.02 is a robust starting point for most turbulent flows.\n    f = 0.02\n\n    for _ in range(max_iter):\n        f_old = f\n        # Right-hand side of the Colebrook equation, rearranged for iteration.\n        # This form is known to be stable for fixed-point iteration.\n        term1 = eps_over_D / 3.7\n        term2 = 2.51 / (Re * np.sqrt(f_old))\n        rhs_log = -2.0 * np.log10(term1 + term2)\n        \n        # Avoid division by zero if rhs_log becomes zero (highly unlikely).\n        if rhs_log == 0:\n            return np.inf\n\n        f = (1.0 / rhs_log)**2\n\n        if np.abs(f - f_old) < tol:\n            return f\n\n    return f # Return last value if max_iter is reached\n\ndef compute_flow_properties(eps_over_D_list, D, L, rho, mu, U_b):\n    \"\"\"\n    Computes pressure drop and other flow properties for internal pipe flow.\n    \"\"\"\n    eps_over_D = eps_over_D_list[0]\n\n    # Step 1: Compute Reynolds number\n    Re = (rho * U_b * D) / mu\n\n    # Step 2 & 3: Classify flow and determine friction factor f_star\n    if Re < 2300.0:\n        # Laminar flow\n        regime_code = 0\n        f_star = 64.0 / Re\n    elif Re > 4000.0:\n        # Turbulent flow\n        regime_code = 2\n        f_star = solve_colebrook(Re, eps_over_D)\n    else: # 2300 <= Re <= 4000\n        # Transitional flow\n        regime_code = 1\n        # Calculate both laminar and turbulent friction factors\n        f_laminar = 64.0 / Re\n        f_turbulent = solve_colebrook(Re, eps_over_D)\n        # Select the larger one for a conservative estimate\n        f_star = max(f_laminar, f_turbulent)\n\n    # Step 4: Compute pressure drop\n    delta_p_star = f_star * (L / D) * 0.5 * rho * U_b**2\n\n    # Step 5: Format output with specified rounding\n    # Note: str() is used on rounded values to prevent scientific notation for small numbers.\n    dp_rounded = round(delta_p_star, 1)\n    f_rounded = round(f_star, 8)\n    Re_rounded = round(Re, 1)\n\n    return [dp_rounded, f_rounded, Re_rounded, regime_code]\n\ndef solve():\n    # Define the test cases from the problem statement.\n    # Format: ([eps/D], D, L, rho, mu, U_b)\n    test_cases = [\n        # Case 1 (given scenario)\n        ([0.001], 0.1, 50, 1000, 1.0e-3, 2.0),\n        # Case 2 (hydraulically smooth comparator)\n        ([0.0], 0.1, 50, 1000, 1.0e-3, 2.0),\n        # Case 3 (laminar)\n        ([0.001], 0.1, 50, 1000, 1.0e-3, 0.01),\n        # Case 4 (transitional boundary)\n        ([0.001], 0.1, 50, 1000, 1.0e-3, 0.023),\n        # Case 5 (high roughness, high speed)\n        ([0.005], 0.1, 50, 1000, 1.0e-3, 5.0),\n    ]\n\n    results = []\n    for case in test_cases:\n        result = compute_flow_properties(*case)\n        results.append(result)\n\n    # Final print statement in the exact required format.\n    # The string conversion is handled to produce a pure JSON-like list string.\n    result_str = str(results).replace(\" \", \"\")\n    print(result_str)\n\nsolve()\n```", "id": "2499744"}]}