{"hands_on_practices": [{"introduction": "要掌握如何在数字系统中使用字符，第一步是理解它们如何被编码和存储。这个练习将带你完成一个基础但至关重要的任务：将熟悉的字符“OK”转换为其十六进制表示，并根据字节序（大端格式）将其存入内存寄存器。这个实践练习将 ASCII 码的抽象概念与计算机内存的物理现实联系起来，是理解数据表示的基础。 [@problem_id:1909396]", "problem": "在一个遗留的控制系统中，一个16位的内存寄存器用于存储一个双字符的状态码。该系统遵循大端格式，其中第一个字符存储在高位字节（第15位到第8位），第二个字符存储在低位字节（第7位到第0位）。字符使用标准的7位美国信息交换标准代码（ASCII）方案进行编码，其中每个8位字节的最高有效位被设置为0。\n\n为了诊断目的，您需要读取该寄存器的内容。如果该寄存器存储的状态码是“OK”，请确定其作为一个单独的4位十六进制数的值。\n\n为供参考，这些字符的十进制ASCII值如下：\n- 'O': 79\n- 'K': 75\n\n请提供得到的4位十六进制字符串。", "solution": "该系统使用大端存储方式，每个8位字节承载一个7位的ASCII字符，且最高有效位设置为零。提供的ASCII值为：'O'是 $79$；'K'是 $75$。将每个十进制代码转换为十六进制：\n- 对于 'O'：$79 = 4 \\times 16 + 15 \\implies \\text{字节} = \\text{0x}4\\text{F}$。\n- 对于 'K'：$75 = 4 \\times 16 + 11 \\implies \\text{字节} = \\text{0x}4\\text{B}$。\n\n在大端格式中，第一个字符占据高位字节，第二个字符占据低位字节，因此16位寄存器值 $R$ 为\n$$R = (\\text{0x}4\\text{F} \\ll 8) + \\text{0x}4\\text{B} = \\text{0x}4\\text{F}00 + \\text{0x}4\\text{B} = \\text{0x}4\\text{F}4\\text{B}。$$\n\n等效地，用十进制形式表示，\n$$R = 79 \\times 2^{8} + 75$$\n其对应于相同的十六进制值 $\\text{0x}4\\text{F}4\\text{B}$。\n\n因此，所需的4位十六进制字符串是 $4\\text{F}4\\text{B}$。", "answer": "$$\\boxed{4F4B}$$", "id": "1909396"}, {"introduction": "在我们了解了字符如何被正确编码后，一个自然而然的问题是：如果存储或传输过程出现错误会发生什么？本练习模拟了一个在现实世界通信系统中常见的硬件故障——特定数据位的翻转。通过解决这个问题，你将深入理解单个比特的变化如何改变一个字符的身份，从而体会到数据在比特层面的脆弱性以及数据完整性的重要性。 [@problem_id:1909443]", "problem": "一个数字通信系统设计用于使用7位美国信息交换标准代码（ASCII）传输文本数据。该系统中的一个特定通信信道存在持久的硬件故障。这个故障导致每个通过它的7位字符的第2位的值被反转（从0翻转为1，或从1翻转为0）。位的索引从0到6，其中第0位代表最低有效位（LSB）。\n\n已知数字字符'0'的7位ASCII码等效于十进制值48。后续数字'1'、'2'、...、'9'的代码按顺序十进制值排列。\n\n如果从源端发送字符'6'，那么在目的端最终会收到以下哪个字符？\n\nA. '2'\n\nB. '4'\n\nC. ''\n\nD. ':'\n\nE. '6'", "solution": "字符'0'的7位ASCII码给定为十进制值$48$。由于'1'、'2'、...、'9'的代码是顺序排列的，因此'6'的ASCII码是\n$$48 + 6 = 54。$$\n将$54$表示为$2$的幂次方，以确定其位模式，其中第$0$位为最低有效位：\n$$54 = 32 + 16 + 4 + 2 = 2^{5} + 2^{4} + 2^{2} + 2^{1}。$$\n因此，在7位表示中，第$2$位初始为$1$。\n\n信道会对每个字符的第$2$位进行翻转。翻转第$2$位会切换$2^{2}$位的值。由于它初始值为$1$，将其翻转为$0$会使值减少$2^{2}$：\n$$54 - 2^{2} = 54 - 4 = 50。$$\n现在，$50$对应于ASCII码$48 + 2$，即字符'2'。\n\n因此，接收到的字符是'2'，与选项A相符。", "answer": "$$\\boxed{A}$$", "id": "1909443"}, {"introduction": "将 ASCII 编码的知识从理论推向实践，是数字逻辑设计的核心能力。这个练习要求你设计一个能够自动识别特定 ASCII 字符（小写元音）的组合逻辑电路。你需要分析这些字符二进制编码的共同模式，并推导出最小化的布尔表达式，这正是将字符集理论应用于硬件功能的绝佳范例。 [@problem_id:1909416]", "problem": "一个数字控制系统负责解析使用7位美国信息交换标准代码（ASCII）编码的字符流。该系统的一个关键功能是实现一个组合逻辑电路，该电路能够检测输入字符是否为小写元音字母（'a'、'e'、'i'、'o'、'u'）。\n\n该电路接受一个7位输入，由变量 $A_6, A_5, A_4, A_3, A_2, A_1, A_0$ 表示，其中 $A_6$ 是最高有效位（MSB）。电路必须产生一个单位输出 $V$，如果输入字符是五个小写元音字母之一，则其逻辑值为'1'，否则为'0'。\n\n小写元音字母的7位ASCII码（二进制，位 $A_6$ 在左侧）如下所示：\n- 'a': `1100001`\n- 'e': `1100101`\n- 'i': `1101001`\n- 'o': `1101111`\n- 'u': `1110101`\n\n您的任务是根据输入位，推导出输出逻辑函数 $V$ 的最小化积之和（SOP）布尔表达式。在您的最终表达式中，使用撇号（例如，$A_0'$）表示逻辑非运算，并列（例如，$A_1 A_0$）表示逻辑与运算，加号（`+`）表示逻辑或运算。", "solution": "给定一个7位ASCII输入 $(A_{6},A_{5},A_{4},A_{3},A_{2},A_{1},A_{0})$，当且仅当输入为小写元音字母时，输出 $V=1$：\n- a: $1100001$\n- e: $1100101$\n- i: $1101001$\n- o: $1101111$\n- u: $1110101$\n\n从这些代码中，可以观察到对于所有五个元音字母，$A_{6}=1$、$A_{5}=1$ 且 $A_{0}=1$。根据布尔代数的因式分解规则（提取公因子），该函数可以写作\n$$\nV \\;=\\; A_{6}A_{5}A_{0}\\,f(A_{4},A_{3},A_{2},A_{1}),\n$$\n其中，对于与所列元音字母对应的四位组合，$f$ 的值为1：\n- a: $(A_{4},A_{3},A_{2},A_{1})=0000$\n- e: $0010$\n- i: $0100$\n- o: $0111$\n- u: $1010$\n\n我们现在通过对相邻的最小项进行分组（使用卡诺图或邻接推理），将 $f$ 最小化为积之和形式：\n- 将 a $(0000)$ 与 i $(0100)$ 配对：它们仅在 $A_{3}$ 位上不同。蕴含项是 $A_{4}'A_{2}'A_{1}'$（因为 $A_{4}=0$, $A_{2}=0$, $A_{1}=0$ 是固定的，而 $A_{3}$ 是自由的）。这覆盖了 a 和 i。\n- 将 e $(0010)$ 与 u $(1010)$ 配对：它们仅在 $A_{4}$ 位上不同。蕴含项是 $A_{3}'A_{2}A_{1}'$（因为 $A_{3}=0$, $A_{2}=1$, $A_{1}=0$ 是固定的，而 $A_{4}$ 是自由的）。这覆盖了 e 和 u。\n- 最小项 o $(0111)$ 在给定的五个1中没有相邻项，因此它形成一个必需的单项蕴含项 $A_{4}'A_{3}A_{2}A_{1}$。\n\n因此，$f$ 的最小积之和形式为\n$$\nf \\;=\\; A_{4}'A_{2}'A_{1}' \\;+\\; A_{3}'A_{2}A_{1}' \\;+\\; A_{4}'A_{3}A_{2}A_{1}.\n$$\n重新引入公因子 $A_{6}A_{5}A_{0}$ 并将整个函数写成SOP形式，得到\n$$\nV \\;=\\; A_{6}A_{5}A_{0}A_{4}'A_{2}'A_{1}' \\;+\\; A_{6}A_{5}A_{0}A_{3}'A_{2}A_{1}' \\;+\\; A_{6}A_{5}A_{0}A_{4}'A_{3}A_{2}A_{1}.\n$$\n每个乘积项对应于一个从有效邻接中导出的质蕴含项，其中 o 的单项是必需的。无法进一步化简，因为 o 没有相邻的元音最小项，并且移除这三项中的任何一项都会导致至少一个元音未被覆盖。", "answer": "$$\\boxed{A_{6}A_{5}A_{0}A_{4}'A_{2}'A_{1}' + A_{6}A_{5}A_{0}A_{3}'A_{2}A_{1}' + A_{6}A_{5}A_{0}A_{4}'A_{3}A_{2}A_{1}}$$", "id": "1909416"}]}