{"hands_on_practices": [{"introduction": "理论是基础，但真正的理解来自于实践。让我们从最基本的操作开始：二进制加法。这个练习将向您展示补码表示法的核心优势——它如何让计算机使用相同的加法电路来处理正数和负数，从而大大简化硬件设计。通过这个练习，您将亲手实践将十进制数转换为补码并执行加法运算。[@problem_id:1973785]", "problem": "一个用于专用低温系统的微控制器使用6位架构来处理传感器数据。它使用补码表示法来表示围绕一个稳定设定点的温度波动的有符号整数值。系统初始状态下，记录的温度波动为十进制值$+12$。在一次实验过程中，施加了一个冷却脉冲，系统将其记录为相同单位下的$-25$的变化量。该微控制器通过将初始值与记录的变化量相加来计算新的温度波动值。\n\n代表存储在微控制器寄存器中新的温度波动的最终6位二进制值是什么？\n\nA. $\\mathtt{110011}$\n\nB. $\\mathtt{001101}$\n\nC. $\\mathtt{110010}$\n\nD. $\\mathtt{011011}$\n\nE. $\\mathtt{100111}$", "solution": "一个6位补码系统表示的整数范围为$-2^{5}$到$2^{5}-1$，即从$-32$到$31$。初始值为$+12$，变化量为$-25$。更新后的值通过加法计算：\n$$12+(-25)=-13.$$\n由于$-13$位于可表示范围内，我们将$-13$转换为6位补码。首先，用6位二进制写出$13$。因为$13=8+4+1$，其二进制形式是\n$$13 \\rightarrow 001101.$$\n要获得$-13$的补码，将所有位取反然后加$1$：\n$$\\text{invert}(001101)=110010,$$\n$$110010+1=110011.$$\n我们可以通过计算补码的加权和来验证该值：对于$110011$，其值为\n$$-2^{5}+2^{4}+2^{1}+2^{0}=-32+16+2+1=-13,$$\n这与计算结果相符。因此，最终的6位寄存器值是$110011$，对应于选项A。", "answer": "$$\\boxed{A}$$", "id": "1973785"}, {"introduction": "在掌握了加法之后，下一个关键操作是求反。一个数的相反数在补码中是如何表示的？这个练习将引导您探索补码求反的标准算法：“先按位取反，再加一”。理解这个过程及其对称性（即一个数的相反数的相反数等于其自身）对于构建更复杂的算术逻辑单元至关重要。[@problem_id:1973839]", "problem": "在数字计算中，带符号整数通常使用二进制补码系统来表示。考虑一个8位处理器，其中存储着一个用符号 $X$ 表示的整数变量。该处理器计算 $X$ 的相反数，即 $-X$，并将其8位二进制补码表示形式存储在一个寄存器中。在该寄存器中找到的二进制值为 `01001100`。原始整数 $X$ 的8位二进制补码表示是什么？", "solution": "在8位二进制补码算术中，求反运算将一个整数的8位表示映射为其加法逆元的8位表示，方法是先进行按位取反，然后加上 $1$（模 $2^{8}$）。具体来说，如果 $T(x)$ 表示整数 $x$ 的8位二进制补码表示，那么\n$$\nT(-x) = \\overline{T(x)} + 1 \\pmod{2^{8}}.\n$$\n等价地，\n$$\nT(x) = \\overline{T(-x)} + 1 \\pmod{2^{8}}.\n$$\n我们已知寄存器中存有 $T(-X) = 01001100$。因此，$X$ 的8位二进制补码表示可以通过对这个值求二进制补码来计算：\n1) 按位取反：\n$$\n\\overline{01001100} = 10110011.\n$$\n2) 加 $1$：\n$$\n10110011 + 00000001 = 10110100.\n$$\n因此，原始整数 $X$ 的8位二进制补码表示是 $10110100$。", "answer": "$$\\boxed{10110100}$$", "id": "1973839"}, {"introduction": "我们已经练习了加法和求反，但当计算结果超出了可用比特位所能表示的范围时会发生什么呢？这个最后的练习将探讨一个关键但常常被误解的概念：算术溢出。您将通过一个具体的例子发现，在有限位数的系统中，两个正数相加的结果可能是一个负数，这个看似矛盾的现象揭示了计算机算术的内在局限性。[@problem_id:1973830]", "problem": "一位计算机工程专业的学生正在设计一个带有最小算术逻辑单元 (MALU) 的简单自定义处理器。这个 MALU 被设计用于对固定大小的寄存器进行操作。MALU 中的每个寄存器都是 4 位宽，并且所有有符号整数都使用补码表示法进行存储。\n\n该学生希望通过执行操作 $A + B$ 来测试加法器电路，其中操作数 A 的十进制值为 5，操作数 B 的十进制值也为 5。该加法以二进制形式执行，其 4 位结果被存储在一个目标寄存器中。由于寄存器大小有限，最终存储的位模式可能不代表真实的数学和。\n\n在此操作之后，目标寄存器中存储的 4 位模式所表示的十进制整数值是多少？", "solution": "一个 4-bit 补码寄存器表示范围为 $[-2^{3}, 2^{3}-1] = [-8, 7]$ 的有符号整数。一个 4-bit 字 $b_{3}b_{2}b_{1}b_{0}$ 的值为\n$$\nV(b_{3}b_{2}b_{1}b_{0}) = -b_{3}2^{3} + b_{2}2^{2} + b_{1}2^{1} + b_{0}2^{0}.\n$$\n十进制值 $5$ 在此范围内，其 4-bit 补码表示为 $0101_{2}$。使用一个 4-bit 加法器对 $A=B=5$ 进行相加，产生模 $2^{4}$ 的和：\n$$\n(5 + 5) \\bmod 2^{4} = 10 \\bmod 16 = 10,\n$$\n其 4-bit 二进制模式为 $1010_{2}$。将这个存储的模式解释为一个补码数，得到\n$$\nV(1010) = -1 \\cdot 2^{3} + 0 \\cdot 2^{2} + 1 \\cdot 2^{1} + 0 \\cdot 2^{0} = -8 + 2 = -6.\n$$\n这反映了有符号溢出（真实的和 $10$ 超出了范围 $[-8, 7]$），但目标寄存器中保存的模式是 $1010_{2}$，它表示十进制值 $-6$。", "answer": "$$\\boxed{-6}$$", "id": "1973830"}]}