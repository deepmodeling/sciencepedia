{"hands_on_practices": [{"introduction": "在数字系统中，任何计算的第一步都是正确地解释二进制数据。这个练习将带你掌握原码表示法的基础——从二进制模式解码为其对应的十进制数值。通过这个实践，你将学会如何区分符号位和数值位，并将它们组合起来得到最终的数值，这是理解和使用原码进行更复杂操作的必备技能。[@problem_id:1960350]", "problem": "一个数字系统使用一个10位寄存器，以符号-数值表示法存储有符号整数。在这种格式中，最高有效位（最左边的位）被指定为符号位，其中 `0` 表示正数，`1` 表示负数。其余的9位以标准二进制格式表示该数的数值。若存储在寄存器中的二进制模式为 `1001101001`，请求出其对应的十进制整数值。", "solution": "在10位寄存器的符号-数值表示法中，最左边的位是符号位，其余9位以二进制形式给出数值。设位模式写作 $s\\,b_{8}b_{7}b_{6}b_{5}b_{4}b_{3}b_{2}b_{1}b_{0}$，其中 $s$ 是符号位，$b_{k}$ 是数值位，其权重为 $2^{k}$。\n\n给定模式 $1001101001$，我们有：\n- 符号位：$s=1$ (表示这是一个负数)。\n- 数值位：$b_{8}b_{7}b_{6}b_{5}b_{4}b_{3}b_{2}b_{1}b_{0}=001101001$。\n\n计算数值部分：\n$$\nM=b_{8}2^{8}+b_{7}2^{7}+b_{6}2^{6}+b_{5}2^{5}+b_{4}2^{4}+b_{3}2^{3}+b_{2}2^{2}+b_{1}2^{1}+b_{0}2^{0}\n$$。\n根据各位数 $0,0,1,1,0,1,0,0,1$，我们得到：\n$$\nM=0\\cdot 2^{8}+0\\cdot 2^{7}+1\\cdot 2^{6}+1\\cdot 2^{5}+0\\cdot 2^{4}+1\\cdot 2^{3}+0\\cdot 2^{2}+0\\cdot 2^{1}+1\\cdot 2^{0}=64+32+8+1=105\n$$。\n\n因为符号位 $s=1$，所以该值为负：\n$$\nV=-M=-105.\n$$", "answer": "$$\\boxed{-105}$$", "id": "1960350"}, {"introduction": "掌握了解码之后，我们来尝试进行算术运算。一个看似简单的“加一”操作，在原码表示中却揭示了其固有的复杂性。这个练习将挑战你对负数进行增量操作，你会发现，简单的二进制加法器无法直接应用于原码，这凸显了为什么工程师们需要为原码设计更复杂的算术逻辑单元（ALU）。[@problem_id:1960346]", "problem": "在一个老式的8位计算系统中，整数值使用8位符号数值表示法存储在寄存器中。在这种格式中，最高有效位（MSB）作为符号位（其中0表示正数，1表示负数），其余7位表示数值的大小。\n\n该系统的算术逻辑单元（ALU）中的一个寄存器当前存储的二进制值为 $10000110_2$。执行一条指令，将此寄存器中存储的十进制值加一。\n\n此操作完成后，寄存器中存储的新的8位符号数值二进制数是什么？\n\nA. $10000101_2$\n\nB. $10000111_2$\n\nC. $00000101_2$\n\nD. $11111011_2$\n\nE. $00000110_2$", "solution": "在8位符号数值格式中，设 $s$ 为最高有效位，$m$ 为7位的大小部分。其表示的值为\n$$\nx=\\begin{cases}\nm, & s=0,\\\\\n-m, & s=1\n\\end{cases}\n$$。\n给定的寄存器内容是 $10000110_{2}$，所以 $s=1$ 且 $m=(0000110)_{2}=6$。因此，\n$$\nx=-6.\n$$\n加一得到\n$$\nx' = x + 1 = -6 + 1 = -5.\n$$\n要以符号数值表示法存储 $-5$，需设置 $s'=1$ 且 $m'=5=(0000101)_{2}$。因此，新的8位符号数值二进制数是\n$$\n1\\,0000101_{2}=10000101_{2}.\n$$\n这对应于选项A。", "answer": "$$\\boxed{A}$$", "id": "1960346"}, {"introduction": "既然原码的加法如此复杂，为什么它在历史上仍被使用呢？这个关于乘法的练习将给出部分答案。与加法不同，原码的乘法在概念上异常直观：符号位和数值位可以分开处理。这个实践将帮助你理解不同算术运算在不同数值表示法下的复杂度差异，体会数字系统设计中无处不在的权衡与折衷。[@problem_id:1960340]", "problem": "在数字系统中，数字通常用原码（sign-magnitude）格式表示。在这种表示法中，最高有效位（MSB）作为符号位，其中“0”表示正数，“1”表示负数。其余的位表示该数的绝对值。\n\n考虑两个4位二进制数 $N_1$ 和 $N_2$，它们都用原码表示。设 $N_1$ 对应的十进制值为 $-3$，$N_2$ 对应的十进制值为 $+2$。\n\n你的任务是计算这两个数的乘积 $P = N_1 \\times N_2$。你必须将最终乘积 $P$ 表示为一个8位二进制数，且同样采用原码表示。", "solution": "在4位原码表示中，每个数有1位符号位和3位数值位。对于 $N_{1}=-3$，符号位是 $s_{1}=1$，其绝对值为 $\\lvert -3\\rvert=3=(011)_{2}$，所以 $N_{1}=(1\\ 011)_{2}=(1011)_{2}$。对于 $N_{2}=+2$，符号位是 $s_{2}=0$，其绝对值为 $\\lvert +2\\rvert=2=(010)_{2}$，所以 $N_{2}=(0\\ 010)_{2}=(0010)_{2}$。\n\n对于原码乘法，乘积的符号是操作数符号位的异或（XOR）结果，乘积的绝对值是操作数绝对值的乘积：\n$$\ns = s_{1} \\oplus s_{2} = 1 \\oplus 0 = 1\n$$，\n$$\nm = \\lvert N_{1}\\rvert \\cdot \\lvert N_{2}\\rvert = 3 \\cdot 2 = 6\n$$。\n\n因此，乘积为 $P=-6$。在8位原码格式（1位符号位和7位数值位）中，绝对值 $6$ 写为\n$6=(110)_{2}=(0000110)_{2}\\ \\text{(填充至7位)}$，\n所以8位的结果是\n$P=(1\\ 0000110)_{2}=(10000110)_{2}$。", "answer": "$$\\boxed{10000110}$$", "id": "1960340"}]}