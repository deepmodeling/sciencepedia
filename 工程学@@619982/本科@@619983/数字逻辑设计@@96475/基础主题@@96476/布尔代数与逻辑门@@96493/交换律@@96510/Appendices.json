{"hands_on_practices": [{"introduction": "交换律是简化布尔表达式和优化数字电路的基石。本练习提供了一个基础实践，通过直接应用与（AND）和或（OR）运算的交换律，来验证两个看似不同的逻辑表达式实际上是等效的。这个练习将帮助你建立使用代数方法进行电路分析和简化的信心。[@problem_id:1923754]", "problem": "在一门数字系统设计课程中，学生们需要分析为一个安全监控系统提出的两种不同逻辑表达式。该系统有三个二进制输入：$A$、$B$ 和 $C$。两个提议的函数 $F_1$ 和 $F_2$ 用于生成最终的输出信号。这些函数的表达式如下：\n\n-   $F_1 = (A + B) \\cdot C$\n-   $F_2 = C \\cdot (B + A)$\n\n在这里，`+` 符号代表逻辑或运算，`·` 符号代表逻辑与运算。你的任务是通过应用布尔代数的基本公理来确定函数 $F_1$ 和 $F_2$ 之间的逻辑关系。\n\n下列哪个陈述正确描述了 $F_1$ 和 $F_2$ 之间的关系？\n\nA. $F_1$ 和 $F_2$ 在逻辑上不等价。\n\nB. $F_1$ 和 $F_2$ 互为逻辑非。\n\nC. 如果没有真值表，无法确定 $F_1$ 和 $F_2$ 之间的逻辑关系。\n\nD. $F_1$ 和 $F_2$ 在逻辑上等价。", "solution": "我们使用布尔代数的基本公理，特别是逻辑或的交换律和逻辑与的交换律。\n\n从 $F_{1}$ 开始：\n$$F_{1}=(A+B)\\cdot C.$$\n根据逻辑或的交换律，$A+B=B+A$，因此\n$$F_{1}=(B+A)\\cdot C.$$\n根据逻辑与的交换律，对于任何 $X,Y$，都有 $X\\cdot Y=Y\\cdot X$，因此，当 $X=(B+A)$ 且 $Y=C$ 时，\n$$(B+A)\\cdot C=C\\cdot (B+A).$$\n而 $C\\cdot (B+A)$ 正好是 $F_{2}$。所以，\n$$F_{1}=F_{2},$$\n因此这两个表达式在逻辑上是等价的。正确选项是 D。", "answer": "$$\\boxed{D}$$", "id": "1923754"}, {"introduction": "将我们的视野从抽象的布尔表达式转向具体的多门电路。这个练习挑战你识别一个系统中哪些部分是符合交换律的。通过分析一个既包含标准可交换门（如与门、或门、异或门）又包含一个自定义的非交换门的电路，你将学会区分运算本身的属性和整个系统的属性，并理解交换律是针对具体操作而言的。[@problem_id:1923766]", "problem": "在一个数字信号处理单元的设计中，一个组合逻辑电路的规格如下所述。该电路有四个主输入，标记为 A、B、C 和 D，并产生一个最终输出 F。该电路由四个相互连接的双输入逻辑门构成，标记为 G1、G2、G3 和 G4。\n\n连接方式如下：\n-   **门 G1** 是一个标准与门。其两个输入连接到主输入 A 和 B。\n-   **门 G2** 是一个标准异或门 (XOR)。其两个输入连接到主输入 C 和 D。\n-   **门 G3** 是一个自定义的“非对称蕴含”门。其输入被指定为一个“主”输入 P 和一个“次”输入 S。该门的输出由布尔表达式 $P' + S$ 定义，其中 $P'$ 表示 P 的逻辑非。G3 的主输入 P 连接到 G1 的输出，G3 的次输入 S 连接到 G2 的输出。\n-   **门 G4** 是一个标准或门。其两个输入连接到 G3 的输出和主输入 D。\n\n整个电路的最终输出 F 是门 G4 的输出。\n\n任务是确定对于哪些门（G1、G2、G3、G4），交换其两个直接输入连接不会对电路的最终输出函数 F 产生影响。请对每个门进行独立分析。\n\n选择正确列出所有此类门的选项。\n\nA. 仅 G1\n\nB. 仅 G3 和 G4\n\nC. 仅 G1 和 G2\n\nD. G1、G2 和 G4\n\nE. 所有门（G1、G2、G3 和 G4）", "solution": "使用标准布尔代数逐个定义中间信号：\n- 门 G1 (与门): $X_1 = AB$。\n- 门 G2 (异或门): $X_2 = C \\oplus D$。\n- 门 G3 (非对称蕴含门): 主输入 $P = X_1$，次输入 $S = X_2$，输出 $Y = P' + S = (AB)' + (C \\oplus D)$。\n- 门 G4 (或门): $F = Y + D = (AB)' + (C \\oplus D) + D$。\n\n使用布尔恒等式简化 $F$。使用德摩根定律 $(AB)' = A' + B'$ 以及异或与或的恒等式 $(X \\oplus Y) + Y = X + Y$。则\n$$\nF = (AB)' + (C \\oplus D) + D = (A' + B') + (C \\oplus D) + D = A' + B' + C + D.\n$$\n\n现在逐个分析每个门的输入交换情况，每个门单独考虑，判断 $F$ 是否改变。\n\n1) 门 G1：与门具有交换律，所以交换 A 和 B 不会改变 $X_1 = AB$，因此 Y 和 F 也保持不变。所以，交换 G1 的输入没有影响。\n\n2) 门 G2：异或门具有交换律，所以交换 C 和 D 不会改变 $X_2 = C \\oplus D$，因此 Y 和 F 也保持不变。所以，交换 G2 的输入没有影响。\n\n3) 门 G3：该门在其输入上不是对称的，因为 $Y = P' + S$。交换其输入会使 $P = X_2$ 和 $S = X_1$，因此其输出变为\n$$\nY_{\\text{swap}} = (X_2)' + X_1 = (C \\oplus D)' + AB.\n$$\n那么最终输出将是\n$$\nF_{\\text{swap}} = Y_{\\text{swap}} + D = (C \\oplus D)' + AB + D.\n$$\n使用 $(X \\oplus Y)' = XY + X'Y'$ 和吸收律进行化简：\n$$\nF_{\\text{swap}} = (CD + C'D') + AB + D = D + C'D' + AB = C' + D + AB.\n$$\n将此与原始的 $F = A' + B' + C + D$ 进行比较。这两个函数并不完全相等；例如，当 $A = 1$, $B = 1$, $C = 0$, $D = 0$ 时，原始的 $F = 0$，而 $F_{\\text{swap}} = 1$。因此，交换 G3 的输入会改变函数。\n\n4) 门 G4：或门具有交换律，所以交换其两个输入 Y 和 D 不会改变 $F = Y + D$。因此，交换 G4 的输入没有影响。\n\n综合以上结果，仅对 G1、G2 和 G4 交换输入没有影响。这对应于选项 D。", "answer": "$$\\boxed{D}$$", "id": "1923766"}, {"introduction": "现在，让我们将范围从单个逻辑门扩展到一个完整的功能系统。这个练习介绍了一个优先级仲裁器，这是一种常见的数字电路元件，其输入的顺序至关重要。通过这个思想实验，你将理解非交换性并非总是设计缺陷，而常常是创建处理优先级和层级逻辑的系统时一种刻意且必要的设计选择。[@problem_id:1923741]", "problem": "在一个多核处理器的简化模型中，“资源仲裁器”是一个数字逻辑电路，旨在管理对单个共享内存总线的访问。仲裁器有四条输入线，表示为 $R_3, R_2, R_1, R_0$，其中输入 $R_i$ 为逻辑“1”表示其对应的处理器核心 $C_i$ 请求内存总线。\n\n仲裁器的操作逻辑是固定且明确的：如果一个或多个请求处于活动状态，它将访问权限授予具有最高索引 $i$ 的请求核心。仲裁器的主要输出是一个2位二进制数 $Y_1Y_0$，代表被授予访问权限的核心的索引。例如，如果核心 $C_2$ 和 $C_1$ 同时发出请求（即 $R_2=1$ 且 $R_1=1$，而 $R_3=0$ 且 $R_0=0$），仲裁器将授予 $C_2$ 访问权限，因为 $2 > 1$，其输出将为 $Y_1Y_0 = 10$。如果没有核心发出请求，仲裁器的输出为 $00$。\n\n为了形式化地分析仲裁器的逻辑，我们可以定义一个概念性的二元关系，称为“优先级”(precedence)，用符号 $\\succ$ 表示。我们说“请求 $R_i$ 优先于请求 $R_j$”，记作 $R_i \\succ R_j$，当且仅当，在只有输入 $R_i$ 和 $R_j$ 处于活动状态的情况下，仲裁器将访问权限授予核心 $C_i$。\n\n基于此定义和资源仲裁器的指定行为，以下哪个陈述最准确地描述了仲裁器的基本操作原则？\n\nA. 优先级关系 $\\succ$ 是可交换的（即，对于任何 $i \\neq j$，如果 $R_i \\succ R_j$ 为真，则 $R_j \\succ R_i$ 也必须为真），这表明仲裁器的逻辑对称地对待其所有输入。\n\nB. 优先级关系 $\\succ$ 是不可交换的（即，对于任何 $i \\neq j$，$R_i \\succ R_j$ 并不意味着 $R_j \\succ R_i$），这是固定优先级系统的决定性特征，其中输入是分层排序的。\n\nC. 仲裁器的操作是可交换的，因为最终输出仅取决于活动输入的集合，而不取决于请求发出的时间顺序。\n\nD. 优先级关系 $\\succ$ 是可结合的。例如，$(R_3 \\succ R_2) \\succ R_1$ 等价于 $R_3 \\succ (R_2 \\succ R_1)$，意味着仲裁器可以一致地处理三个或更多输入之间的冲突。\n\nE. 二元优先级关系 $\\succ$ 的概念不适用于此仲裁器，因为该电路旨在处理多达四个同时输入，而不仅仅是成对的输入。", "solution": "仲裁器实现了一个固定优先级的选择：在所有活动请求中，它将访问权限授予索引最大的那个。形式上，对于任何不同的索引 $i$ 和 $j$，在只有 $R_{i}$ 和 $R_{j}$ 处于活动状态的情况下，仲裁器当且仅当 $i>j$ 时授予 $C_{i}$ 访问权限。根据优先级关系的定义，\n$$R_{i} \\succ R_{j} \\iff i>j.$$\n基于此特性，我们分析其属性：\n\n1.  不可交换性：对于 $i \\neq j$，如果 $i>j$，则 $R_{i} \\succ R_{j}$ 为真，而 $R_{j} \\succ R_{i}$ 为假。因此，\n$$R_{i} \\succ R_{j} \\not\\Rightarrow R_{j} \\succ R_{i},$$\n所以该关系是不可交换的。这正是具有分层输入顺序的固定优先级系统的标志。\n\n2.  选项A是错误的，因为可交换性要求对于 $i \\neq j$，$R_{i} \\succ R_{j}$ 蕴含 $R_{j} \\succ R_{i}$，这与 $i>j$ 蕴含 $j>i$ 相矛盾。\n\n3.  选项C混淆了与时间顺序无关性和二元关系的可交换性。虽然输出仅取决于活动输入的集合（这是组合逻辑的一个属性），但这并不使优先级关系具有可交换性。\n\n4.  选项D的写法是无效的，因为 $\\succ$ 是一个产生真值的二元关系，而不是一个对请求进行操作并返回另一个请求的二元运算。像 $(R_{3} \\succ R_{2}) \\succ R_{1}$ 这样的表达式在此上下文中是类型不匹配且无意义的。这里正确的结构属性是 $\\succ$ 对应于一个严格全序（非自反、可传递和三分性），而不是结合性。\n\n5.  选项E是错误的，因为二元优先级关系完全适用：仲裁器对多个同时输入的行为由索引所引出的全序决定，并且成对的优先级 $i>j$ 自然地扩展到在任何有限活动集合上选择最大索引。\n\n因此，最准确的描述是优先级关系是不可交换的，这体现了固定优先级的层次结构。", "answer": "$$\\boxed{B}$$", "id": "1923741"}]}