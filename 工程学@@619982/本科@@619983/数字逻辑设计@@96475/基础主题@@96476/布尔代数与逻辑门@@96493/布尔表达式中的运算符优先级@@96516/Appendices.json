{"hands_on_practices": [{"introduction": "在数字逻辑设计中，编写正确的布尔表达式只是第一步；同样重要的是能够正确地简化它们。这个练习模拟了一个常见的设计陷阱：由于忽略了运算符优先级，一个看似合理的简化步骤导致了完全错误的设计结果。通过这个练习，你将扮演一个设计审查员的角色，需要精确地定位出一系列逻辑推导中的根本性错误。[@problem_id:1949923]", "problem": "一位初级数字系统设计师的任务是为一个安全关键的泵控制器创建逻辑。泵由输出 `P` 表示，应在以下条件下开启（`P=1`）：系统的主传感器指示水位低（`L=0`），或者主传感器指示水位正常（`L=1`）且操作员发出手动超控指令（`M=1`）。设计师使用 `L'` 来表示水位低的情况。\n\n设计师记录了以下四步控制逻辑的简化过程：\n1.  **初始表达式构建**：根据文字描述，逻辑可表示为 `P = L' + L · M`。\n2.  **项分组**：设计师重新组合各项，以优先处理变量 `L` 和 `L'` 的运算，将表达式重写为 `P = (L' + L) · M`。\n3.  **互补律应用**：设计师将分组的项 `(L' + L)` 简化为 `1`，得到表达式 `P = 1 · M`。\n4.  **同一律应用**：设计师进行最终简化，得出结论 `P = M`。\n\n最终简化后的逻辑 `P = M` 意味着泵的运行完全依赖于手动超控指令，这与泵在水位低时也应开启的初始要求相矛盾。设计师的简化过程中哪一步包含了导致这个错误结论的根本逻辑错误？\n\nA. 步骤1：初始表达式 `P = L' + L · M` 没有正确地为系统需求的文字描述建模。\nB. 步骤2：将 `L' + L · M` 重组为 `(L' + L) · M` 是基于对代数定律的错误应用。\nC. 步骤3：将项 `(L' + L)` 简化为 `1` 在布尔代数中是无效操作。\nD. 步骤4：将项 `1 · M` 简化为 `M` 在布尔代数中是无效操作。", "solution": "将需求转换为布尔代数。当水位低时，或者当水位正常且有手动超控时，泵的输出为开启状态。使用 $L'$ 表示低水位（$L$ 的补），自然的表达式是\n$$\nP=L'+L\\cdot M.\n$$\n这与规范相符：如果 $L=0$，则 $L'=1$，所以第一项强制 $P=1$；如果 $L=1$，则 $L'=0$，表达式简化为 $P=M$，因此只有当 $M=1$ 时泵才会开启。\n\n评估每个简化步骤：\n- 步骤1是正确的，如刚才所示。\n- 步骤2将 $L' + L\\cdot M$ 重写为 $(L' + L)\\cdot M$。这不是一个有效的布尔代数变换。正确的分配律是\n$$\nX + YZ = (X+Y)(X+Z),\n$$\n而不是 $(X+Y)Z$。应用正确的定律，令 $X=L'$, $Y=L$, $Z=M$，可得\n$$\nL' + L\\cdot M = (L'+L)(L'+M) = 1\\cdot(L'+M) = L'+M,\n$$\n这在通常情况下不等于 $(L'+L)\\cdot M = 1\\cdot M = M$。因此，步骤2是根本的逻辑错误：它错误地应用了分配律。\n- 步骤3使用了互补律 $L'+L=1$，这是有效的。\n- 步骤4使用了同一律 $1\\cdot M=M$， এটাও有效的。\n\n因此，错误的结论源于步骤2中的无效重组。原始表达式的正确简化是 $P=L'+M$，这与需求一致，但步骤2中所采取的路径是无效的。", "answer": "$$\\boxed{B}$$", "id": "1949923"}, {"introduction": "现在，让我们从抽象的代数世界走向数字电路的物理实现。这个练习生动地展示了布尔表达式的结构与逻辑门连线方式之间的直接对应关系。它强调了正确理解运算符优先级对于将一个数学公式（如 $F = X + Y \\cdot Z$）准确地转化为硬件电路是多么关键。[@problem_id:1949937]", "problem": "一位初级工程师的任务是构建一个实现布尔函数 $F_{target} = X + Y \\cdot Z$ 的数字逻辑电路。在布尔代数中，与运算 ($\\cdot$) 的优先级高于或运算 (+)，这意味着它应该被首先计算。\n\n该工程师使用一个双输入或门和一个双输入与门来构建电路。电路的接线方式如下：\n- 主输入 $X$ 和 $Y$ 连接到或门的两个输入端。\n- 该或门的输出连接到与门的一个输入端。\n- 主输入 $Z$ 连接到与门的另一个输入端。\n- 整个电路的最终输出是与门的输出。\n\n确定该工程师的电路所实现的实际布尔函数 $F_{actual}$。\n\nA) $X + Y \\cdot Z$\nB) $X \\cdot Y + Z$\nC) $(X + Z) \\cdot Y$\nD) $X \\cdot (Y + Z)$\nE) $(X + Y) \\cdot Z$", "solution": "我们根据布尔代数的惯例来解释这些逻辑门：一个双输入或门输出其输入的布尔和，一个双输入与门输出其输入的布尔积。与运算的优先级高于或运算，但接线方式明确地决定了运算的组合顺序。\n\n设或门的输出为 $O$。当输入 $X$ 和 $Y$ 连接到或门时，或门的输出为：\n$$\nO = X + Y.\n$$\n这个输出 $O$ 接着连接到与门的一个输入端，另一个输入端为 $Z$。因此，电路的最终输出为：\n$$\nF_{\\text{actual}} = O \\cdot Z = (X + Y) \\cdot Z.\n$$\n根据布尔代数的分配律，也可以写成：\n$$\n(X + Y) \\cdot Z = X \\cdot Z + Y \\cdot Z,\n$$\n这通常不等同于 $X + Y \\cdot Z$。因此，所实现的函数对应于选项 E。", "answer": "$$\\boxed{E}$$", "id": "1949937"}, {"introduction": "最后，我们来挑战一个更高级且极为实用的应用：设计验证。这个练习将带你超越“判断是否存在错误”的层面，去系统性地找出所有能够揭示该错误的输入条件。通过比较一个正确的设计规约（$F_{spec}$）和一个有缺陷的实现（$F_{impl}$），你将实践硬件设计质量保证中的一项核心技能——生成最小完备的测试向量集。[@problem_id:1949905]", "problem": "在硬件设计验证中，一项关键任务是确保综合电路与其规范相匹配。考虑一个场景，其中一个逻辑函数被指定为 $F_{spec} = A + B \\cdot C$。然而，由于综合工具在处理算符优先级时存在一个错误，制造的电路错误地实现了函数 $F_{impl} = (A + B) \\cdot C$。\n\n你的任务是找出能够检测到此实现错误的完整且最小的输入测试向量集。如果对于某个输入向量 $(A, B, C)$，指定函数 $F_{spec}$ 的输出与实现函数 $F_{impl}$ 的输出不同，那么该向量就被认为是一个区分性测试向量。\n\n确定所有此类区分性输入向量的集合。假设输入顺序为 $(A, B, C)$ 且 $A$ 是最高有效位 (MSB)，用每个向量对应的最小项十进制值来表示它。按升序提供这些十进制值。", "solution": "设指定的和实现的布尔函数分别为 $F_{\\text{spec}}=A+B\\cdot C$ 和 $F_{\\text{impl}}=(A+B)\\cdot C$，其中 $A,B,C\\in\\{0,1\\}$。我们寻求所有使得 $F_{\\text{spec}}\\neq F_{\\text{impl}}$ 的输入向量 $(A,B,C)$。\n\n使用标准的布尔恒等式：$X\\cdot 0=0$，$X\\cdot 1=X$，$X+0=X$ 和 $X+1=1$。\n\n根据 $C$ 的值，考虑两种穷举情况。\n\n当 $C=0$ 时，计算每个函数：\n$$F_{\\text{spec}}=A+B\\cdot 0=A,$$\n$$F_{\\text{impl}}=(A+B)\\cdot 0=0.$$\n因此，当 $C=0$ 时，输出仅在 $A=1$ 时不同，而与 $B$ 的值无关。相应的输入向量是 $(1,0,0)$ 和 $(1,1,0)$。\n\n当 $C=1$ 时，计算每个函数：\n$$F_{\\text{spec}}=A+B\\cdot 1=A+B,$$\n$$F_{\\text{impl}}=(A+B)\\cdot 1=A+B.$$\n因此，当 $C=1$ 时，对于所有的 $(A,B)$，输出都相等，不存在区分性向量。\n\n因此，完整的区分性向量集合由 $(1,0,0)$ 和 $(1,1,0)$ 组成。使用输入顺序为 $(A,B, C)$ 且 $A$ 作为最高有效位的最小项索引，$(A,B,C)$ 的十进制最小项为 $m=4A+2B+C$。因此：\n$$(1,0,0)\\mapsto 4\\cdot 1+2\\cdot 0+0=4,\\quad (1,1,0)\\mapsto 4\\cdot 1+2\\cdot 1+0=6.$$\n这些是全部且唯一的区分性输入向量，按升序排列。", "answer": "$$\\boxed{\\begin{pmatrix} 4 & 6 \\end{pmatrix}}$$", "id": "1949905"}]}