{"hands_on_practices": [{"introduction": "要掌握边界扫描，我们首先需要理解其基本组成部分：边界扫描寄存器 ($BSR$)。本练习要求您根据一个集成电路的引脚配置来计算其 $BSR$ 的长度。通过这个过程，您将具体地理解不同类型的引脚——输入、输出和双向引脚——是如何被整合进 JTAG 测试架构中的 [@problem_id:1917086]。", "id": "1917086", "problem": "一个工程团队正在为一种专门的信号处理应用设计一款定制集成电路 (IC)。为确保该 IC 在制造后是可测试的，它将集成符合联合测试行动组 (JTAG) 标准 IEEE 1149.1 的边界扫描逻辑。该 IC 的引脚配置定义如下：\n\n*   32 个专用数字输入引脚。\n*   16 个专用数字输出引脚。\n*   8 个双向数字 I/O 引脚。\n*   4 个三态数字输出引脚。\n*   4 个用于测试接入端口 (TAP) 的专用引脚：TDI、TDO、TCK 和 TMS。\n*   2 个专用电源和接地引脚 (VCC, GND)。\n\n边界扫描寄存器 (BSR) 是通过将边界扫描单元与 IC 的功能引脚相关联来构建的。此特定实现的规则如下：\n1.  每个专用数字输入引脚与一个边界扫描单元相关联。\n2.  每个专用数字输出引脚与一个边界扫描单元相关联。\n3.  每个双向 I/O 引脚需要两个单元：一个用于输入/输出值的数据单元和一个用于确定引脚方向（输入或输出）的控制单元。\n4.  每个三态输出引脚需要两个单元：一个用于输出值的数据单元和一个用于启用或禁用输出驱动器（即，使引脚处于高阻态）的控制单元。\n5.  专用于 TAP 控制器以及电源/接地的引脚不属于边界扫描寄存器链的一部分。\n\n根据此规范，边界扫描寄存器的总长度（以比特为单位）是多少？\n\nA. 60\nB. 64\nC. 72\nD. 76\nE. 78", "solution": "边界扫描寄存器 (BSR) 的长度等于分配给功能引脚的边界扫描单元的总数，因为每个单元为 BSR 贡献一位。根据给定的实现规则：\n\n- 每个专用数字输入引脚贡献一个单元：\n$$32 \\times 1 = 32 \\text{ 个单元}。$$\n\n- 每个专用数字输出引脚贡献一个单元：\n$$16 \\times 1 = 16 \\text{ 个单元}。$$\n\n- 每个双向 I/O 引脚贡献两个单元（一个数据单元和一个方向控制单元）：\n$$8 \\times 2 = 16 \\text{ 个单元}。$$\n\n- 每个三态数字输出引脚贡献两个单元（一个数据单元和一个使能控制单元）：\n$$4 \\times 2 = 8 \\text{ 个单元}。$$\n\n- TAP 引脚（TDI、TDO、TCK、TMS）和电源/接地引脚（VCC、GND）不包括在内，其贡献为：\n$$0 \\text{ 个单元}。$$\n\n将所有贡献相加，得到 BSR 的长度（以比特为单位）：\n$$32 + 16 + 16 + 8 = 72。$$\n\n因此，正确选项是 C。", "answer": "$$\\boxed{C}$$"}, {"introduction": "理解了数据寄存器之后，下一步是学习如何控制它们。这种控制由测试访问端口 ($TAP$) 控制器管理，它是 JTAG 标准核心的状态机。本问题要求您确定正确的 $TMS$ 信号序列以将 $TAP$ 控制器导航到特定状态，从而提供对协调所有 JTAG 操作的基本机制的动手实践经验 [@problem_id:1917058]。", "id": "1917058", "problem": "一位数字设计工程师的任务是调试一块新制造的印刷电路板 (PCB)。该工程师计划使用联合测试行动组 (JTAG) 标准，特别是 IEEE 1149.1 边界扫描测试，来验证组件之间连接的完整性。JTAG 接口由测试访问端口 (TAP) 控制器内部的一个状态机控制。该控制器的状态转换由测试时钟 (TCK) 每个上升沿上的测试模式选择 (TMS) 信号的值决定。\n\n为了将测试向量加载到边界扫描数据寄存器中，TAP 控制器必须被导航至 `Shift-DR` 状态。与此任务相关的状态转换描述如下：\n\n- TAP 控制器在上电后，或通过将 TMS 信号保持高电平至少五个 TCK 周期，保证会进入 `Test-Logic-Reset` 状态。\n- 从 `Test-Logic-Reset` 状态，TMS 值为 `0` 时控制器转换到 `Run-Test/Idle` 状态。TMS 值为 `1` 时，控制器保持在 `Test-Logic-Reset` 状态。\n- 从 `Run-Test/Idle` 状态，TMS 值为 `1` 时转换到 `Select-DR-Scan` 状态。TMS 值为 `0` 时，控制器保持在 `Run-Test/Idle` 状态。\n- 从 `Select-DR-Scan` 状态，TMS 值为 `0` 时转换到 `Capture-DR` 状态。TMS 值为 `1` 时转换到 `Select-IR-Scan` 状态（指令寄存器的路径）。\n- 从 `Capture-DR` 状态，TMS 值为 `0` 时转换到 `Shift-DR` 状态。TMS 值为 `1` 时转换到 `Exit1-DR` 状态。\n- 一旦进入 `Shift-DR` 状态，TMS 值为 `0` 将使控制器保持在 `Shift-DR` 状态，从而允许进行串行数据移位。\n\n假设 TAP 控制器起始于 `Test-Logic-Reset` 状态，在 TCK 的四个连续上升沿上采样的下列哪个 TMS 值序列，能将控制器正确地导航至 `Shift-DR` 状态？\n\nA. 0100\nB. 1100\nC. 0110\nD. 0101\nE. 0010", "solution": "我们将 TAP 控制器建模为一个确定性有限状态机，其状态更新发生在 TCK 的每个上升沿，并完全由当前状态和采样的 TMS 值决定，这与给定的转换规则一致。控制器起始于 Test-Logic-Reset 状态。要通过数据寄存器路径到达 Shift-DR，最小转换路径是：\nTest-Logic-Reset --TMS=$0$--> Run-Test/Idle --TMS=$1$--> Select-DR-Scan --TMS=$0$--> Capture-DR --TMS=$0$--> Shift-DR。\n这对应于 TMS 序列 $0,1,0,0$。\n\n我们现在用给定的 TMS 序列，通过模拟 TCK 的四个连续上升沿来验证每个选项：\n\n选项 A: $0,1,0,0$\n- 从 Test-Logic-Reset 开始；TMS 值为 $0$ 时进入 Run-Test/Idle。\n- 从 Run-Test/Idle；TMS 值为 $1$ 时进入 Select-DR-Scan。\n- 从 Select-DR-Scan；TMS 值为 $0$ 时进入 Capture-DR。\n- 从 Capture-DR；TMS 值为 $0$ 时进入 Shift-DR。\n结果：Shift-DR。这是正确的。\n\n选项 B: $1,1,0,0$\n- 从 Test-Logic-Reset 开始；TMS 值为 $1$ 时保持在 Test-Logic-Reset。\n- 从 Test-Logic-Reset；TMS 值为 $1$ 时保持在 Test-Logic-Reset。\n- 从 Test-Logic-Reset；TMS 值为 $0$ 时进入 Run-Test/Idle。\n- 从 Run-Test/Idle；TMS 值为 $0$ 时保持在 Run-Test/Idle。\n结果：Run-Test/Idle。不是 Shift-DR。\n\n选项 C: $0,1,1,0$\n- 从 Test-Logic-Reset 开始；TMS 值为 $0$ 时进入 Run-Test/Idle。\n- 从 Run-Test/Idle；TMS 值为 $1$ 时进入 Select-DR-Scan。\n- 从 Select-DR-Scan；TMS 值为 $1$ 时进入 Select-IR-Scan。\n- 从 Select-IR-Scan；TMS 值为 $0$ 时进入 Capture-IR。\n结果：Capture-IR。不是 Shift-DR。\n\n选项 D: $0,1,0,1$\n- 从 Test-Logic-Reset 开始；TMS 值为 $0$ 时进入 Run-Test/Idle。\n- 从 Run-Test/Idle；TMS 值为 $1$ 时进入 Select-DR-Scan。\n- 从 Select-DR-Scan；TMS 值为 $0$ 时进入 Capture-DR。\n- 从 Capture-DR；TMS 值为 $1$ 时进入 Exit1-DR。\n结果：Exit1-DR。不是 Shift-DR。\n\n选项 E: $0,0,1,0$\n- 从 Test-Logic-Reset 开始；TMS 值为 $0$ 时进入 Run-Test/Idle。\n- 从 Run-Test/Idle；TMS 值为 $0$ 时保持在 Run-Test/Idle。\n- 从 Run-Test/Idle；TMS 值为 $1$ 时进入 Select-DR-Scan。\n- 从 Select-DR-Scan；TMS 值为 $0$ 时进入 Capture-DR。\n结果：Capture-DR。不是 Shift-DR。\n\n因此，从指定的起始状态开始，只有选项 A 能在四个 TCK 边沿内到达 Shift-DR 状态。", "answer": "$$\\boxed{A}$$"}, {"introduction": "JTAG 的实际应用涉及测试连接在串行扫描链中的多个设备。本练习通过模拟一个其中一个组件存在故障的多设备链，提升了问题的复杂性。通过分析从链中移出的数据，您将了解到 JTAG 的内置特性（例如在 $Capture-IR$ 状态下的强制捕获模式）如何被用于在板级诊断问题 [@problem_id:1917044]。", "id": "1917044", "problem": "一个数字电路板正在使用联合测试行动组 (JTAG) IEEE 1149.1 标准进行测试。该电路板包含一个由两个串联的集成电路 U1 和 U2 组成的 JTAG 链。该链的配置方式是，U2 的测试数据输出 (TDO) 连接到 U1 的测试数据输入 (TDI)，而 U1 的 TDO 作为整个链的主 TDO。链的主 TDI 连接到 U2 的 TDI。\n\n器件 U1 的指令寄存器 (IR) 长度为 4 位。\n器件 U2 的指令寄存器 (IR) 长度为 5 位。\n\n器件 U2 完全符合 IEEE 1149.1 标准。根据该标准，当测试访问端口 (TAP) 控制器进入 `Capture-IR` 状态时，器件的 IR 必须并行加载一个其两个最低有效位 (LSB) 为 `01` 的模式。\n器件 U1 有一个制造缺陷。其 IR 在所有方面的行为都像一个合规的器件，除了在进入 `Capture-IR` 状态时，它会并行加载一个其两个 LSB 为 `10` 的模式。\n对于这两个器件，你可以假设在 `Capture-IR` 状态下，IR 中除了指定的两个 LSB 之外的所有位都捕获值为 `0`。\n\n一个外部测试仪驱动测试模式选择 (TMS) 和测试时钟 (TCK) 线，以将两个器件的 TAP 控制器同步地移入 `Shift-IR` 状态。在 TAP 控制器处于 `Shift-IR` 状态的整个期间，主 TDI 线保持在恒定的逻辑 `0`。\n\n在 TAP 控制器进入 `Shift-IR` 状态后的前九个 TCK 周期内，在主 TDO 引脚上观察到的 9 位二进制序列是什么？序列中的第一个位对应 `Shift-IR` 状态下第一个 TCK 周期的输出，最后一个位对应第九个 TCK 周期的输出。\n\nA. `100001000`\nB. `000010010`\nC. `100100001`\nD. `010010000`\nE. `001000010`", "solution": "此题要求确定由两个器件组成的 JTAG 链在测试数据输出 (TDO) 端的位序列，其中一个器件有故障。我们需要遵循通过器件的指令寄存器 (IR) 捕获和移位数据的过程。\n\n步骤 1：确定在 `Capture-IR` 状态之后每个指令寄存器的状态。\nTAP 控制器经过其状态转换并进入 `Capture-IR`。在导致从 `Capture-IR` 转换出来（在本例中是到 `Shift-IR`）的时钟沿，IR 并行加载它们的捕获值。\n\n- 器件 U2 (合规): IR 长度为 5 位。标准要求两个最低有效位 (LSB) 为 `01`。所有其他更高有效位被指定捕获 `0`。LSB 是最右边的位。因此，U2 的 IR 捕获的 5 位模式是 `00001`。\n- 器件 U1 (有故障): IR 长度为 4 位。该故障导致其两个 LSB 被加载为 `10`。所有其他更高有效位捕获 `0`。因此，U1 的 IR 捕获的 4 位模式是 `0010`。\n\n步骤 2：理解串行扫描链的结构。\n题目说明了链的配置是 `主 TDI -> U2 的 TDI -> U2 的 TDO -> U1 的 TDI -> U1 的 TDO -> 主 TDO`。\n当 TAP 控制器处于 `Shift-IR` 状态时，链中器件的各个 IR 串联起来，形成一个长的移位寄存器。此链中寄存器的顺序与从 TDI 到 TDO 的物理路径相同。\n\n总移位寄存器由 U2 的 IR 后跟 U1 的 IR 串联而成。\n总链: `[U2_IR] [U1_IR]`\n链的总长度是各个 IR 长度之和：5 位 (U2) + 4 位 (U1) = 9 位。\n\n步骤 3：确定串联移位寄存器的初始内容。\n在捕获操作之后，这个 9 位移位寄存器包含来自 U2 和 U1 的串联值。\n内容 = `[U2_IR 中的值] [U1_IR 中的值]`\n内容 = `[00001] [0010]`\n因此，在 `Shift-IR` 状态开始时，链的完整 9 位状态是 `000010010`。\n\n步骤 4：模拟移位过程。\n在 `Shift-IR` 状态下，在测试时钟 (TCK) 的每个上升沿，整个链向 TDO 方向移位一个位置。链中最后一个器件 (U1) 的 LSB 位的比特被移出到主 TDO 引脚上。一个新比特从主 TDI 引脚移入链中第一个器件 (U2) 的 MSB 位。题目指明 TDI 保持在逻辑 `0`。\n\n串联寄存器的内容是 `b8 b7 b6 b5 b4 b3 b2 b1 b0`，其中 `b0` 是 U1 寄存器的 LSB，`b8` 是 U2 寄存器的 MSB。\n初始状态: `0 0 0 0 1 0 0 1 0`\n\n- TCK 周期 1：LSB，`b0 = 0`，被移出到 TDO。内容向右移位。一个来自 TDI 的 `0` 从 MSB 进入。\n  - TDO 输出: `0`\n  - 链状态: `0 0 0 0 0 1 0 0 1`\n- TCK 周期 2：新的 LSB，`b1 = 1`，被移出。\n  - TDO 输出: `1`\n  - 链状态: `0 0 0 0 0 0 1 0 0`\n- TCK 周期 3：新的 LSB，`b2 = 0`，被移出。\n  - TDO 输出: `0`\n- TCK 周期 4：新的 LSB，`b3 = 0`，被移出。\n  - TDO 输出: `0`\n- TCK 周期 5：新的 LSB，`b4 = 1`，被移出。这是 U2 原始数据的 LSB。\n  - TDO 输出: `1`\n- TCK 周期 6：新的 LSB，`b5 = 0`，被移出。\n  - TDO 输出: `0`\n- TCK 周期 7：新的 LSB，`b6 = 0`，被移出。\n  - TDO 输出: `0`\n- TCK 周期 8：新的 LSB，`b7 = 0`，被移出。\n  - TDO 输出: `0`\n- TCK 周期 9：新的 LSB，`b8 = 0`，被移出。\n  - TDO 输出: `0`\n\n一个更简单的理解方式是，TDO 将观察到串联寄存器 `000010010` 的比特从右到左（LSB 优先）被读出。\n\n因此，在前 9 个时钟周期内，在 TDO 上观察到的比特序列是：`010010000`。\n\n步骤 5：将结果与给定选项匹配。\n计算出的序列是 `010010000`。这对应于选项 D。", "answer": "$$\\boxed{D}$$"}]}