{"hands_on_practices": [{"introduction": "Espresso算法的核心在于其迭代改进的过程，而`EXPAND`（扩展）操作是其中的关键步骤之一。该阶段的目标是通过从乘积项中删除文字来“扩展”蕴含项，使其覆盖尽可能多的最小项，从而形成素蕴含项。这个练习将带你亲手执行`EXPAND`操作，在一个具体的布尔函数上，体验如何系统地将一个初始蕴含项扩展为素蕴含项，同时确保不覆盖任何OFF集中的最小项 [@problem_id:1933417]。", "problem": "在数字电路启发式逻辑最小化的背景下，考虑一个包含三个变量$A$、$B$和$C$的布尔函数$F$。该函数由其ON集$F_{ON} = \\sum m(1, 5, 7)$和无关项集$F_{DC} = \\sum m(4)$定义。符号$A'$表示$A$的逻辑非。\n\n该函数的一个初始、未最小化的覆盖为$C_{initial} = \\{ A'B'C, AB'C, ABC \\}$。Espresso启发式逻辑最小化算法被应用于此覆盖。在算法的EXPAND阶段，蕴含项$p = A'B'C$被选中进行扩展。EXPAND过程试图通过从$p$中一次一个地移除尽可能多的文字来创建一个更大的蕴含项（素蕴含项），同时确保得到的乘积项仍然是该函数的有效蕴含项。一个乘积项是有效蕴含项，当且仅当其所覆盖的最小项集合是ON集与无关项集之并集（$F_{ON} \\cup F_{DC}$）的子集。\n\n确定将EXPAND过程应用于蕴含项$p = A'B'C$后得到的素蕴含项。", "solution": "给定一个关于变量$A,B,C$的布尔函数，其ON集为$F_{ON}=\\sum m(1,5,7)$，无关项集为$F_{DC}=\\sum m(4)$。因此，一个蕴含项允许覆盖的最小项集合是$F_{ON}\\cup F_{DC}=\\{1,4,5,7\\}$。我们将EXPAND阶段应用于$p=A'B'C$。\n\n首先，确定$p$所覆盖的最小项：由于$A=0$，$B=0$，$C=1$，我们可知$p$恰好覆盖最小项$1$。为了进行扩展，我们一次移除一个文字，并检查得到的乘积项是否只覆盖$F_{ON}\\cup F_{DC}$中的最小项。\n\n- 移除$A'$：得到$B'C$。它覆盖$B=0$，$C=1$的最小项，即$\\{1,5\\}$。由于$\\{1,5\\}\\subseteq\\{1,4,5,7\\}$，这是一个有效的蕴含项。\n\n- 移除$B'$：得到$A'C$。它覆盖$A=0$，$C=1$的最小项，即$\\{1,3\\}$。由于$3\\notin\\{1,4,5,7\\}$，这是无效的。\n\n- 移除$C$：得到$A'B'$。它覆盖$A=0$，$B=0$的最小项，即$\\{0,1\\}$。由于$0\\notin\\{1,4,5,7\\}$，这是无效的。\n\n因此，从$p$出发唯一有效的扩展是$B'C$。现在测试$B'C$是否可以被进一步扩展：\n\n- 移除$B'$：得到$C$，它覆盖$\\{1,3,5,7\\}$。由于$3\\notin\\{1,4,5,7\\}$，无效。\n\n- 移除$C$：得到$B'$，它覆盖$\\{0,1,4,5\\}$。由于$0\\notin\\{1,4,5,7\\}$，无效。\n\n因此，$B'C$的任何文字都不能在不覆盖一个OFF最小项的情况下被移除，所以$B'C$是一个素蕴含项。因此，EXPAND过程从$p=A'B'C$产生了素蕴含项$B'C$。", "answer": "$$\\boxed{B'C}$$", "id": "1933417"}, {"introduction": "在`EXPAND`阶段生成一系列素蕴含项后，并非所有这些项都是最终简化表达式所必需的。Espresso算法的`IRREDUNDANT_COVER`（无关冗余覆盖）阶段旨在识别并移除多余的蕴含项，找到一个覆盖函数的最小蕴含项子集。这个练习将让你分析一个经典的冗余情况，你将运用“完全冗余”的定义来证明一个蕴含项可以被其他蕴含项完全覆盖，从而揭示逻辑化简中的共识思想 [@problem_id:1933414]。", "problem": "在数字逻辑设计领域，像Espresso这样的启发式算法被用于最小化复杂的布尔函数。这个过程中的一个关键步骤是为函数创建一个无冗余覆盖。一个覆盖是一组乘积项（蕴含项）的集合，它们的逻辑和表示该函数。在一个覆盖中，如果一个蕴含项所覆盖的最小项集合完全包含在覆盖中其他蕴含项的逻辑和之内，则该蕴含项被认为是 **完全冗余** 的。如果一个蕴含项覆盖了至少一个该覆盖中没有其他蕴含项能覆盖的最小项，则该蕴含项是 **相对必要** 的。\n\n考虑一个三变量布尔函数 $F(A, B, C)$，它由覆盖 $C = \\{p_1, p_2, p_3\\}$ 表示，其中蕴含项定义如下：\n- $p_1 = AB$\n- $p_2 = A'C$\n- $p_3 = BC$\n\nEspresso算法的 `IRREDUNDANT` 过程会分析每个蕴含项以确定其状态。您的任务是在给定覆盖 $C$ 的背景下分析蕴含项 $p_3 = BC$。以下哪个陈述正确地描述了 $p_3$ 的状态？\n\nA. $p_3$ 是相对必要的，因为它所覆盖的最小项集合不是覆盖中任何其他单个蕴含项所覆盖的最小项集合的子集。\n\nB. $p_3$ 是完全冗余的，因为它不是函数 $F$ 的素蕴含项。\n\nC. 如果不知道函数 $F$ 的完整最小项列表，就不可能确定 $p_3$ 的状态。\n\nD. $p_3$ 是相对必要的，因为它覆盖了最小项 $ABC$（$p_2$ 未覆盖），以及最小项 $A'BC$（$p_1$ 未覆盖）。\n\nE. $p_3$ 是完全冗余的，因为它所覆盖的最小项集合完全包含在 $p_1$ 和 $p_2$ 所覆盖的最小项的并集之内。", "solution": "给定函数 $F(A,B,C)$ 的覆盖 $C=\\{p_{1},p_{2},p_{3}\\}$，其中 $p_{1}=AB$，$p_{2}=A'C$，$p_{3}=BC$。对于任何蕴含项 $q$，令 $\\mathrm{cov}(q)$ 表示 $q$ 所覆盖的最小项集合。\n\n计算最小项覆盖集合：\n- $\\mathrm{cov}(AB)=\\{ABC',\\,ABC\\}$ 因为当 $A=1$ 且 $B=1$ 时，$AB$ 为真，这适用于 $C$ 的两种取值。\n- $\\mathrm{cov}(A'C)=\\{A'B'C,\\,A'BC\\}$ 因为当 $A=0$ 且 $C=1$ 时，$A'C$ 为真，这适用于 $B$ 的两种取值。\n- $\\mathrm{cov}(BC)=\\{A'BC,\\,ABC\\}$ 因为当 $B=1$ 且 $C=1$ 时，$BC$ 为真，这适用于 $A$ 的两种取值。\n\n检查 $p_{3}$ 是否是相对必要的。根据定义，如果一个蕴含项覆盖了至少一个该覆盖中没有其他蕴含项能覆盖的最小项，则该蕴含项是相对必要的。在这里，$p_{3}$ 覆盖了 $ABC$ 和 $A'BC$，但是：\n- $ABC\\in \\mathrm{cov}(AB)$,\n- $A'BC\\in \\mathrm{cov}(A'C)$.\n因此，$p_{3}$ 没有唯一覆盖任何最小项，所以它不是相对必要的。\n\n检查 $p_{3}$ 是否是完全冗余的。根据定义，如果 $\\mathrm{cov}(p_{3})\\subseteq \\mathrm{cov}(p_{1})\\cup \\mathrm{cov}(p_{2})$，则一个蕴含项是完全冗余的。我们有\n$$\n\\mathrm{cov}(p_{1})\\cup \\mathrm{cov}(p_{2})=\\{ABC',\\,ABC,\\,A'B'C,\\,A'BC\\},\n$$\n且\n$$\n\\mathrm{cov}(p_{3})=\\{A'BC,\\,ABC\\}\\subseteq \\mathrm{cov}(p_{1})\\cup \\mathrm{cov}(p_{2}).\n$$\n因此，$p_{3}$ 是完全冗余的。\n\n评估选项：\n- A 是错误的：$p_3$ 的覆盖范围不是任何单个蕴含项覆盖范围的子集，这并不能使其成为相对必要的；唯一性必须是相对于其他蕴含项的并集而言，而这一点在这里不成立。\n- B 是错误的：完全冗余不是由是否为素蕴含项决定的；此外，$BC$ 是 $F$ 的一个素蕴含项，但在当前这个覆盖中仍然是冗余的。\n- C 是错误的：该覆盖为这些蕴含项定义了函数；其状态可以从该覆盖中确定。\n- D 是错误的：$p_3$ 覆盖的每个最小项都被其他某个蕴含项所覆盖，所以它不是相对必要的。\n- E 是正确的：$\\mathrm{cov}(p_{3})$ 包含在并集 $\\mathrm{cov}(p_{1})\\cup \\mathrm{cov}(p_{2})$ 中。\n\n因此，正确选项是 E。", "answer": "$$\\boxed{E}$$", "id": "1933414"}, {"introduction": "Espresso之所以被称为“启发式”算法，是因为它采用“经验法则”来快速寻找一个高质量的解，但并不保证该解是绝对最优的。这个高级练习通过一个精心设计的“循环素蕴含项表”来揭示启发式策略的固有局限性。通过分析这个特殊情况，你将发现一个简单的贪心选择策略（例如，优先选择覆盖最多未覆盖最小项的素蕴含项）会如何导向一个次优解，从而深刻理解算法设计中效率与最优性之间的权衡 [@problem_id:1933398]。", "problem": "在启发式逻辑最小化（例如 Espresso 算法）的背景下，`IRREDUNDANT_COVER` 步骤旨在寻找一个能够覆盖布尔函数全部 ON集 的最小质蕴涵项（PI）子集。此步骤一个常见的贪心启发式算法是迭代选择能覆盖最多尚未被覆盖的 ON集 最小项的质蕴涵项。\n\n考虑一个4变量布尔函数 $F(w,x,y,z)$，其完整的质蕴涵项表已经确定。ON集 由六个最小项组成，符号化表示为 $M = \\{m_1, m_2, m_3, m_4, m_5, m_6\\}$。该函数总共有七个质蕴涵项，表示为 $P = \\{P_A, P_B, P_C, P_D, P_E, P_F, P_G\\}$。\n\n覆盖关系如下：\n- $P_A$ 覆盖最小项集 $\\{m_1, m_2\\}$。\n- $P_B$ 覆盖最小项集 $\\{m_2, m_3\\}$。\n- $P_C$ 覆盖最小项集 $\\{m_3, m_4\\}$。\n- $P_D$ 覆盖最小项集 $\\{m_4, m_5\\}$。\n- $P_E$ 覆盖最小项集 $\\{m_5, m_6\\}$。\n- $P_F$ 覆盖最小项集 $\\{m_6, m_1\\}$。\n- $P_G$ 覆盖最小项集 $\\{m_2, m_4, m_6\\}$。\n\n您的任务是确定函数 $F$ 的一个真正最小的“积之和”表达式的大小，以质蕴涵项的数量来衡量。", "solution": "我们将不可冗余覆盖步骤形式化为一个集合覆盖问题。需要覆盖的全集是 ON集 $M=\\{m_{1},m_{2},m_{3},m_{4},m_{5},m_{6}\\}$。可用的子集是质蕴涵项：\n$$\nP_{A}=\\{m_{1},m_{2}\\},\\quad\nP_{B}=\\{m_{2},m_{3}\\},\\quad\nP_{C}=\\{m_{3},m_{4}\\},\\quad\nP_{D}=\\{m_{4},m_{5}\\},\\quad\nP_{E}=\\{m_{5},m_{6}\\},\\quad\nP_{F}=\\{m_{6},m_{1}\\},\\quad\nP_{G}=\\{m_{2},m_{4},m_{6}\\}.\n$$\n\n首先，确立一个基数下界。每个被选中的质蕴涵项至多覆盖三个最小项，并且只有一个这样大小为三的蕴涵项，即 $P_{G}$。使用两个蕴涵项，最大总覆盖范围至多为\n$$\n|P_{G}\\cup P_{X}|\\leq |P_{G}|+|P_{X}|\\leq 3+2=5<6,\n$$\n对于任何第二个蕴涵项 $P_{X}\\in\\{P_{A},P_{B},P_{C},P_{D},P_{E},P_{F}\\}$。如果两个蕴涵项都不是 $P_{G}$，那么它们的大小都为二，其并集至多覆盖四个元素。因此，没有哪两个蕴涵项能覆盖所有六个最小项，任何有效的覆盖都必须使用至少三个质蕴涵项。\n\n接下来，通过显式构造来证明用三个蕴涵项是可实现的。例如，选择每隔一个的大小为二的蕴涵项：\n$$\nP_{A}\\cup P_{C}\\cup P_{E}=\\{m_{1},m_{2}\\}\\cup\\{m_{3},m_{4}\\}\\cup\\{m_{5},m_{6}\\}=M.\n$$\n因此，三个质蕴涵项就足够了。此外，任何使用 $P_{G}$ 且大小为三的覆盖仍然需要用大小为二的蕴涵项来覆盖奇数下标的最小项 $\\{m_{1},m_{3},m_{5}\\}$，而且没有一个大小为二的蕴涵项能同时覆盖其中的两个。因此 $P_{G}$ 迫使至少需要三个额外的大小为二的蕴涵项，总共至少需要四个蕴涵项；它无法改进已经展示的三蕴涵项解。\n\n结合下界与显式的三蕴涵项覆盖，积之和实现中的最小质蕴涵项数量恰好为三。", "answer": "$$\\boxed{3}$$", "id": "1933398"}]}