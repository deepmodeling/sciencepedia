{"hands_on_practices": [{"introduction": "第一个动手实践将可编程阵列逻辑（PAL）的抽象概念置于一个实际场景中。你需要将一个系统的操作要求翻译成布尔表达式，然后将其转换为“与或”结构PAL可以直接实现的“积之和”（SOP）形式。这项基本技能是在PAL器件上实现任何逻辑功能的第一步。[@problem_id:1954538]", "problem": "我们正在为一个简化的工业冲压机设计一个控制系统。该系统依赖于三个二进制输入信号：\n-   `A`：一个表示工件已正确定位的传感器（`1` 表示已定位，`0` 表示未定位）。\n-   `B`：一个表示安全笼已锁定的传感器（`1` 表示已锁定，`0` 表示未锁定）。\n-   `C`：一个用于维护和测试目的的手动激活开关（`1` 表示激活，`0` 表示未激活）。\n\n当且仅当工件已正确定位（`A=1`）**并且**（安全笼已锁定（`B=1`）**或**手动激活开关已激活（`C=1`））时，冲压机才允许运行，对应于高电平输出信号 `F`（即 `F=1`）。\n\n您的任务是使用标准的可编程阵列逻辑（PAL）器件来实现这一逻辑。这种器件由一个可编程的“与”阵列和一个固定的“或”阵列组成，使其非常适合以“积之和”形式实现函数。为了配置PAL，您必须首先确定“与”阵列所需的最小乘积项集合。\n\n以下哪个集合代表了实现函数 `F` 时，“与”阵列必须生成的完整且最小的乘积项集合？\n\nA. {$A$, $B$, $C$}\n\nB. {$A+B$, $A+C$}\n\nC. {$AB$, $AC$}\n\nD. {$A$, $B+C$}\n\nE. {$A'B$, $AC'$}\n\nF. {$ABC$, $A'B'C$}", "solution": "我们将文字描述直接转化为布尔代数。当且仅当工件已定位，并且安全笼已锁定或手动激活开关已激活时，冲压机才会运行。使用 $+$ 表示逻辑“或”，并列表示逻辑“与”，$'$ 表示逻辑“非”，该函数为\n$$\nF = A(B + C).\n$$\nPAL器件实现的是一种“积之和”（SOP）形式，这意味着 $F$ 必须表示为由可编程“与”阵列生成的多个乘积项的“或”运算。应用布尔代数的分配律：\n$$\nA(B + C) = AB + AC.\n$$\n因此，代数上最简的“积之和”形式是\n$$\nF = AB + AC.\n$$\n“与”阵列所需的乘积项正是 $AB$ 和 $AC$。这个集合是最小的，因为：\n- 单个乘积项无法表示 $A(B + C)$；例如，仅 $AB$ 在 $A=1$ 且 $C=1$ 时不成立，而仅 $AC$ 在 $A=1$ 且 $B=1$ 时不成立。\n- 任何额外乘积项的加入都将是冗余的，因为根据规范，$AB$ 和 $AC$ 已经覆盖了所有且仅有的 $F=1$ 的情况。\n此外，其他列出的集合要么包含和项（不是乘积项，因此无法由“与”阵列实现），要么对应于不同的逻辑。因此，“与”阵列所需的完整且最小的乘积项集合是 $\\{AB, AC\\}$，与选项C相符。", "answer": "$$\\boxed{C}$$", "id": "1954538"}, {"introduction": "实际的硬件组件通常具有设计者必须适应的特定特性。本练习将介绍PAL器件的一个常见特征：“低电平有效”输出，其最终输出是内部逻辑的反相。为实现所需的功能，你必须首先计算出目标逻辑的反函数，应用德摩根定律来推导内部“与或”阵列需要生成的表达式。[@problem_id:1954564]", "problem": "一位数字系统工程师的任务是使用可编程阵列逻辑 (PAL) 器件为一台机械设备实现一个安全逻辑功能。可用的 PAL 器件有三个输入（表示为 $A$、$B$ 和 $C$）和一个输出。该 PAL 的内部结构由一个可编程与阵列和一个固定的或门组成。关键在于，该器件的最终输出由一个反相缓冲器驱动，使其成为一个“低电平有效”输出。这意味着，如果内部的与或阵列产生一个逻辑值 $G$，器件的最终输出将是其补数 $\\bar{G}$。\n\n需要在 PAL 器件最终输出端实现的安全函数 $F(A, B, C)$ 由以下布尔表达式定义：\n$$F = \\bar{A}B + C$$\n\n为了正确配置 PAL，工程师必须确定内部可编程与或阵列需要生成的布尔函数，我们称之为 $G(A, B, C)$。\n\n求 $G(A, B, C)$ 的表达式。您的最终答案应以最小积之和 (SOP) 范式表示。", "solution": "问题指出，该可编程阵列逻辑 (PAL) 器件具有低电平有效输出。这意味着内部与或逻辑生成的函数（我们称之为 $G$）在作为器件最终输出 $F$ 出现之前被反相。这个关系可以表示为：\n$$F = \\bar{G}$$\n\n我们已知所需的最终输出函数为：\n$$F = \\bar{A}B + C$$\n\n为了找到内部与或阵列必须生成的函数 $G$，我们需要在第一个方程中求解 $G$。通过对两边求补，我们得到：\n$$\\bar{F} = \\bar{\\bar{G}}$$\n$$\\bar{F} = G$$\n因此，内部逻辑函数 $G$ 必须是所需输出函数 $F$ 的补函数。\n\n现在，我们计算 $F$ 的补函数：\n$$G = \\bar{F} = \\overline{(\\bar{A}B + C)}$$\n\n为了简化此表达式并将其转换为积之和 (SOP) 范式，我们应用德摩根定律。第一定律指出 $\\overline{(X+Y)} = \\bar{X} \\cdot \\bar{Y}$。将其应用于我们的表达式，我们令 $X = \\bar{A}B$ 和 $Y = C$：\n$$G = \\overline{(\\bar{A}B)} \\cdot \\bar{C}$$\n\n接下来，我们将德摩根第二定律（即 $\\overline{(X \\cdot Y)} = \\bar{X} + \\bar{Y}$）应用于项 $\\overline{(\\bar{A}B)}$：\n$$G = (\\overline{\\bar{A}} + \\bar{B}) \\cdot \\bar{C}$$\n\n我们简化双重补数 $\\overline{\\bar{A}}$，它等于 $A$：\n$$G = (A + \\bar{B}) \\cdot \\bar{C}$$\n\n这个表达式是和之积 (POS) 范式。问题要求的是最小积之和 (SOP) 范式。为了将其转换为 SOP，我们使用分配律 $X \\cdot (Y+Z) = XY + XZ$：\n$$G = A\\bar{C} + \\bar{B}\\bar{C}$$\n\n这个表达式是积之和范式。我们检查它是否是最小的。两个乘积项是 $A\\bar{C}$ 和 $\\bar{B}\\bar{C}$。通过吸收律或合并项无法进行进一步简化。因此，这是内部 PAL 逻辑必须实现的函数 $G$ 的最小 SOP 表达式。", "answer": "$$\\boxed{A\\bar{C} + \\bar{B}\\bar{C}}$$", "id": "1954564"}, {"introduction": "一个稳健的数字系统设计不仅涉及正确的实现，还包括对潜在故障模式的理解。这个高级练习将挑战你分析物理硬件故障——输入线上的“固定型”错误——对PAL行为的影响。通过模拟此故障如何改变内部信号，你将预测由此产生的错误输出函数，从而深入了解可编程逻辑系统的可靠性和诊断方法。[@problem_id:1954541]", "problem": "一个数字系统使用一个可编程阵列逻辑（PAL）器件来实现一组布尔函数。该PAL有四个输入（标记为A、B、C和D）和两个输出（产生函数 $F_1$ 和 $F_2$）。在内部，每个输入变量都通过一个缓冲器，该缓冲器同时产生原变量线和反变量线。反变量线是通过对原变量线进行反相来创建的。该器件被编程以实现以下两个函数，以积之和的形式给出（其中 $X'$ 表示 $X$ 的补）：\n\n$$F_1 = A'BC' + AB'D + ACD'$$\n$$F_2 = A'B'C + BC'D' + A'CD$$\n\n在生产后测试期间，发现PAL内部存在一个特定的硬件故障。输入变量 $B$ 的输入缓冲器的原变量输出线永久固定为1。此故障会影响任何使用 $B$ 输入的原变量线或反变量线的逻辑门。\n\n请确定新的故障输出函数（我们称之为 $F_{1,faulty}$ 和 $F_{2,faulty}$）的化简布尔表达式。所得表达式应为积之和形式，并且仅依赖于未受影响的输入变量。请将你的答案表示为一个 1x2 的行矩阵，按顺序包含 $F_{1,faulty}$ 和 $F_{2,faulty}$ 的最终表达式。", "solution": "我们使用组合逻辑的标准固定型故障模型，其中输入缓冲通过对原变量线进行反相来产生原变量线和反变量线。给定的故障是输入 $B$ 的原变量输出线永久固定在逻辑 $1$。由于反变量线是通过对原变量线反相生成的，因此在故障条件下，对于所有外部输入条件，内部信号均为 $B=1$ 和 $B'=0$。因此，任何使用 $B$ 的乘积项的行为都如同 $B=1$，而任何使用 $B'$ 的乘积项的计算结果都为 $0$。\n\n首先从 $F_{1}$ 开始：\n$$\nF_{1} = A'BC' + AB'D + ACD'\n$$\n逐项应用由故障引起的代换 $B=1$ 和 $B'=0$：\n$$\nA'BC' \\to A'\\cdot 1 \\cdot C' = A'C', \\quad AB'D \\to A\\cdot 0 \\cdot D = 0, \\quad ACD' \\to ACD' \\text{（不变）}.\n$$\n因此，\n$$\nF_{1,\\text{faulty}} = A'C' + 0 + ACD' = A'C' + ACD'.\n$$\n$A'C'$ 和 $ACD'$ 之间不适用进一步的吸收律或共识律化简，因为一个要求 $C'=1$而另一个要求 $C=1$，所以这两项是不相交的。\n\n现在来看 $F_{2}$：\n$$\nF_{2} = A'B'C + BC'D' + A'CD\n$$\n应用 $B=1$ 和 $B'=0$：\n$$\nA'B'C \\to A'\\cdot 0 \\cdot C = 0, \\quad BC'D' \\to 1 \\cdot C' \\cdot D' = C'D', \\quad A'CD \\to A'CD \\text{（不变）}.\n$$\n因此，\n$$\nF_{2,\\text{faulty}} = 0 + C'D' + A'CD = C'D' + A'CD.\n$$\n同样，$C'D'$ 和 $A'CD$ 之间不适用吸收律或共识律化简，因为一个要求 $C'=1$ 和 $D'=1$，而另一个要求 $C=1$ 和 $D=1$ 且 $A'=1$，所以它们是不相交的乘积项。\n\n两个结果表达式都符合要求，均为积之和形式，并且仅依赖于未受影响的变量 $A$、$C$ 和 $D$。", "answer": "$$\\boxed{\\begin{pmatrix} A'C' + ACD' & C'D' + A'CD \\end{pmatrix}}$$", "id": "1954541"}]}