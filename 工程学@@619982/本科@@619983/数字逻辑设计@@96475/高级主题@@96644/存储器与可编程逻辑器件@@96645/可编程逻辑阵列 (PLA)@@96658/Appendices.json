{"hands_on_practices": [{"introduction": "要利用可编程逻辑阵列（PLA），第一步是将目标布尔函数正确地转换成设备的硬件配置。为了高效实现，通常需要先将函数简化为其最小化的“和之积”形式。本练习将引导您将一个由最小项定义的函数，例如 $F(A, B, C)$，转换为PLA特性表中的一个优化行，从而巩固逻辑“无关项”在物理上是如何实现的。[@problem_id:1954864]", "problem": "一位数字逻辑设计师的任务是使用可编程逻辑阵列 (PLA) 实现一个简单的三变量布尔函数 $F(A, B, C)$。变量的顺序是 A 为最高有效位，C 为最低有效位。当最小项为 $m_0, m_2, m_4,$ 和 $m_6$ 时，函数 $F$ 的值为真（即为 1）。\n\n该 PLA 的个性表 (personality table) 由定义乘积项的行组成。每一行由代表输入 $A, B, C$ 和输出 $F$ 的字符串表示。在该行的输入部分：\n- '1' 表示变量以其原变量形式使用（例如，$A$）。\n- '0' 表示变量以其反变量形式使用（例如，$A'$）。\n- '-'（破折号）表示该变量不是该乘积项的一部分（即为无关项）。\n\n在输出部分，'1' 表示该行定义的乘积项包含在函数 $F$ 的“积之和”表达式中。\n\n以下哪一行正确表示了函数 $F$ 在 PLA 个性表中的完整且最小化的实现？\n\nA. `0-01`\n\nB. `--11`\n\nC. `--01`\n\nD. `-001`\n\nE. `0001`", "solution": "变量按 A 为最高有效位、C 为最低有效位的顺序排列，因此最小项索引对应于二进制赋值 $(A,B,C)$：\n$$\nm_{0}:(0,0,0),\\quad m_{2}:(0,1,0),\\quad m_{4}:(1,0,0),\\quad m_{6}:(1,1,0).\n$$\n因此，当且仅当 $C=0$ 时，函数 $F=1$，这与 $A$ 和 $B$ 无关。写出最小项之和并进行因式分解可以证实这一点：\n$$\nF=A'B'C'+A'BC'+AB'C'+ABC' = C'(A'B'+A'B+AB'+AB).\n$$\n使用两次分配律 $(X+X')=1$：\n$$\nA'B'+A'B+AB'+AB=(A'+A)(B'+B)=1\\cdot 1=1,\n$$\n所以\n$$\nF=\\overline{C}.\n$$\n在 PLA 行中，破折号表示无关项输入，0 表示反变量，输出位置的 1 表示该乘积项被包含在 $F$ 中。因为 $F=\\overline{C}$ 仅以反变量形式使用 $C$，并且不依赖于 $A$ 或 $B$，所以单个最小化乘积项被编码为 $A=-$，$B=-$，$C=0$，输出 $F=1$，即该行为\n$$\n\\text{--01}.\n$$\n这与选项 C 相符。", "answer": "$$\\boxed{C}$$", "id": "1954864"}, {"introduction": "一个逻辑上正确的设计在实际应用中仍可能因时序问题而失败，导致短暂的错误输出，即“冒险”。本练习提出了一个PLA实现，它在特定的输入转换期间容易出现静态-1冒险。您将学习如何识别这种脆弱性，并应用共识定理来添加一个冗余的乘积项，以确保输出的稳定与可靠。[@problem_id:1954919]", "problem": "可编程逻辑阵列 (PLA) 是一种用于实现组合逻辑函数的数字元件。它由一个可编程的与平面和一个可编程的或平面组成。考虑一个具有三个输入 $A$、$B$、$C$ 和一个输出 $F$ 的PLA。该器件被编程以实现布尔函数 $F(A,B,C)$，其形式为两个乘积项 $P_1$ 和 $P_2$ 之和。与平面被配置为生成 $P_1 = A'C$ 和 $P_2 = BC'$，其中撇号 (') 表示逻辑非操作。或平面被配置为组合这些项，从而得到输出函数 $F = P_1 + P_2$。\n\n已知该实现在两个相邻输入状态之间的特定输入转换中，容易出现静态1险象。为确保可靠运行，必须向函数中添加第三个乘积项 $P_3$，使得新函数 $F_{new} = P_1 + P_2 + P_3$ 没有静态险象。请确定为解决此险象，必须由与平面生成并包含在或平面的求和中的乘积项 $P_3$ 的最简布尔表达式。", "solution": "给定一个PLA实现布尔函数\n$$F(A,B,C)=P_{1}+P_{2}=A'C+BC'.$$\n当卡诺图中两个相邻的1-单元被不同的乘积项覆盖，且输入转换是单个变量变化时，就可能发生静态1险象。在这里，发生单变量变化的相邻状态是 $(A,B,C)=(0,1,1)$ 和 $(0,1,0)$，它们仅在 $C$ 上不同。在 $(0,1,1)$ 处，项 $A'C$ 为真；在 $(0,1,0)$ 处，项 $BC'$ 为真。如果两个与项具有不相等的延迟，在 $A'=1$ 和 $B=1$ 的条件下，当输入 $C$ 从 $1$ 转换到 $0$ ($C:1\\to 0$) 期间，输出可能会瞬间降至 $0$，从而产生静态1险象。\n\n为了消除两个仅因一个变量的取反/不取反而异的项之间的静态1险象，我们需添加共识项。根据共识定理，\n$$XY+X'Z=XY+X'Z+YZ,$$\n将 $X=C$，$Y=A'$，$Z=B$ 进行映射，我们得到\n$$P_{1}=A'C=YX,\\quad P_{2}=BC'=ZX'.$$\n因此，所需的共识项是\n$$P_{3}=YZ=A'B.$$\n\n这个项在逻辑上是冗余的（它不改变函数功能），因为\n$$A'B=A'B(C+C')=A'BC+A'BC'\\leq A'C+BC',$$\n所以 $F_{new}=A'C+BC'+A'B$ 对所有输入都与原函数相等，同时用一个在 $C$ 转换期间保持为真的蕴含项覆盖了存在险象的相邻区域。因此，需要添加的最简乘积项是\n$$P_{3}=A'B.$$", "answer": "$$\\boxed{A'B}$$", "id": "1954919"}, {"introduction": "现实世界的工程设计常常需要在现有组件的约束下进行。本问题解决了一个常见场景：所需逻辑函数 $F(A, B, C, D)$ 因乘积项数量过多而无法在单个PLA中实现。您的任务是设计一个策略，将该函数划分到两个PLA上来实现，这展示了一种模块化设计和资源管理的实用方法。[@problem_id:1954876]", "problem": "一位数字系统工程师的任务是实现一个特定的4输入布尔函数 $F(A, B, C, D)$，但他受限于可用的硬件。唯一可用的逻辑模块是若干个相同的可编程逻辑阵列 (PLA)。每个 PLA 有4个输入、1个输出，其内部的“与”平面最多可以实现4个乘积项。所需的目标函数已被最小化为以下“积之和”表达式：\n\n$$F(A, B, C, D) = A'BC' + AB'C' + ABC + A'B'C'D + AB'CD'$$\n\n你的任务是设计一种方法，使用恰好两个这样的 PLA 来实现该函数。如有必要，你可以使用一个外部的2输入“或”门来组合 PLA 的输出。请定义应分别编程到第一个和第二个 PLA 中的具体布尔函数 $F_1(A, B, C, D)$ 和 $F_2(A, B, C, D)$。该解决方案应构成对目标函数 $F$ 的有效且完整的实现。\n\n请将你的最终答案以 $F_1$ 和 $F_2$ 的表达式对的形式呈现。", "solution": "我们已知目标布尔函数的最小化“积之和”形式为：\n$$F(A,B,C,D)=A'BC' + AB'C' + ABC + A'B'C'D + AB'CD'.$$\n每个可用的 PLA 有4个输入、1个输出，且其“与”平面限制为最多4个乘积项。因此，单个 PLA 可以实现任意包含最多4个乘积项的和。由于 $F$ 包含5个不同的乘积项，在给定的约束条件下，它无法用单个 PLA 实现。\n\n为了使用恰好两个 PLA 和一个外部2输入“或”门来实现 $F$，我们将乘积项集合划分为两个不相交的子集，每个子集包含不超过4个乘积项。定义：\n$$F_{1}(A,B,C,D)=A'BC' + AB'C' + ABC + A'B'C'D,$$\n$$F_{2}(A,B,C,D)=AB'CD'.$$\n$F_{1}$ 和 $F_{2}$ 都是有效的“积之和”形式，分别包含4个和1个乘积项，满足了每个 PLA 的“与”平面限制。将第一个 PLA 编程以实现 $F_{1}$，第二个 PLA 编程以实现 $F_{2}$；然后使用一个外部的2输入“或”门来计算\n$$F=F_{1}+F_{2}.$$\n根据构造，\n$$F_{1}+F_{2}=(A'BC' + AB'C' + ABC + A'B'C'D) + (AB'CD')=A'BC' + AB'C' + ABC + A'B'C'D + AB'CD',$$\n这正是所要求的函数 $F$。这样就得到了一个使用恰好两个 PLA 和一个外部“或”门（如题目所允许）的完整且有效的实现。\n\n因此，要编程到两个 PLA 中的具体函数就是上面定义的函数对 $(F_{1},F_{2})$。", "answer": "$$\\boxed{\\begin{pmatrix}\nA'BC' + AB'C' + ABC + A'B'C'D & AB'CD'\n\\end{pmatrix}}$$", "id": "1954876"}]}