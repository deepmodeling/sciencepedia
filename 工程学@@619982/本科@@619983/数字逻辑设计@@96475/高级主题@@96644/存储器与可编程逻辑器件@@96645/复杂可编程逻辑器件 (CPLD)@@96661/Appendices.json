{"hands_on_practices": [{"introduction": "在分析复杂的时序电路之前，我们必须首先掌握一个基本技能：计算信号通过CPLD内部组合逻辑所需的时间。这个练习将CPLD的内部结构分解为几个关键的延迟部分，如输入缓冲、可编程互连阵列(PIA)和逻辑阵列块(LAB)。通过将这些部分的延迟相加，你将学会估算一个简单组合逻辑功能的总传播延迟 $t_{PD}$，这是所有时序分析的基础。[@problem_id:1924368]", "problem": "一名工程专业的学生正在一个项目中使用一种特定的复杂可编程逻辑器件(CPLD)。为确保其设计满足时序要求，他们必须计算一个关键组合逻辑函数的最坏情况传播延迟。该 CPLD 的架构包括输入引脚，信号通过输入引脚馈入中央可编程互连阵列 (PIA)，再由 PIA 将信号路由到各个逻辑阵列块 (LAB)。LAB 的输出随后被路由到一个输出引脚。\n\n该 CPLD 的数据手册为单通组合路径提供了以下最坏情况时序参数：\n- $t_{IN}$：从外部输入引脚，经过输入缓冲器，到 PIA 的延迟。值：1.5 ns。\n- $t_{PIA}$：信号从 PIA 路由到单个 LAB 输入端的延迟。值：3.0 ns。\n- $t_{LAB}$：在单个 LAB 内计算标准积之和表达式的内部组合逻辑延迟。值：5.2 ns。\n- $t_{OUT}$：从 LAB 输出端到外部输出引脚的延迟。值：2.3 ns。\n\n该学生需要实现逻辑函数 $Y = (A \\cdot B) + (C \\cdot \\neg D)$，其中 $A, B, C, D$ 是输入，$Y$ 是输出。假设整个函数在单个 LAB 内实现，并且信号遵循从输入引脚到输出引脚的直接路径，没有任何反馈。\n\n计算最坏情况下的传播延迟 $t_{PD}$，即从任何输入信号（$A, B, C,$ 或 $D$）发生变化到相应变化出现在输出 $Y$ 的时刻。答案以纳秒 (ns) 为单位表示，并四舍五入到三位有效数字。", "solution": "题目要求我们计算从任意输入引脚（$A, B, C,$ 或 $D$）到输出引脚 $Y$ 的最坏情况传播延迟。该组合逻辑函数完全在单个 LAB 中实现，并遵循设备中的单通路径：输入引脚 $\\rightarrow$ 输入缓冲器 $\\rightarrow$ PIA $\\rightarrow$ LAB $\\rightarrow$ 输出引脚。\n\n根据给定的单通组合路径时序参数的定义，总的最坏情况传播延迟是该路径上各连续部分延迟的总和：\n- $t_{IN}$：输入引脚到 PIA，\n- $t_{PIA}$：PIA 到 LAB 输入端，\n- $t_{LAB}$：LAB 内部的组合逻辑延迟（对于一个标准的积之和实现，这包括了必要的反相以及如 $A\\cdot B$ 和 $C\\cdot \\neg D$ 之类的“与-或”结构），\n- $t_{OUT}$：LAB 输出端到输出引脚。\n\n因此，最坏情况传播延迟满足\n$$\nt_{PD} = t_{IN} + t_{PIA} + t_{LAB} + t_{OUT}.\n$$\n\n使用给定的最坏情况值，\n$$\nt_{PD} = 1.5 + 3.0 + 5.2 + 2.3 = 12.0.\n$$\n\n这个总和已经反映了任何单个输入跃迁通过 $Y = (A \\cdot B) + (C \\cdot \\neg D)$ 的单 LAB 实现进行传播的最坏情况，并且已按要求四舍五入到三位有效数字。", "answer": "$$\\boxed{12.0}$$", "id": "1924368"}, {"introduction": "在掌握了传播延迟的计算方法后，我们现在引入寄存器来构建一个同步系统。这个实践将探讨设计的最高性能，即其能可靠运行的最大时钟频率。你将学习如何将寄存器的时钟到输出时间 $t_{CO}$ 和建立时间 $t_{SU}$ 与我们之前计算的逻辑传播延迟 $t_{PD}$ 结合起来，从而确定整个设计的关键时序路径和性能瓶颈。[@problem_id:1924348]", "problem": "一位数字系统工程师正在一个复杂可编程逻辑器件（CPLD）内设计一个同步状态机。该设计的关键时序路径由信号从源寄存器的输出端，经过组合逻辑块和内部布线，传播到目标寄存器的数据输入端所决定。两个寄存器均由相同的全局时钟驱动。\n\n该 CPLD 制造商的数据手册为所使用的器件系列提供了以下时序参数：\n- 任意寄存器的时钟到输出时间（$t_{CO}$）为 4.2 纳秒。\n- 任意寄存器数据输入的建立时间要求（$t_{SU}$）为 2.7 纳秒。\n\n根据该特定设计的综合与布局布线报告，此关键路径上通过组合逻辑和布线结构的总结点传播延迟（$t_{PD}$）为 7.1 纳秒。\n\n为确保可靠运行并避免亚稳态，设计必须满足目标寄存器上的建立时间约束。计算此设计的最大安全工作时钟频率。\n\n以兆赫兹（MHz）为单位表示您的答案，并四舍五入到三位有效数字。", "solution": "对于由同一时钟驱动且时钟偏斜可忽略不计的两个寄存器之间的同步路径，其建立时间约束为\n$$\nT_{\\text{clk}} \\geq t_{CO} + t_{PD} + t_{SU}.\n$$\n给定 $t_{CO} = 4.2 \\times 10^{-9} \\text{ s}$，$t_{PD} = 7.1 \\times 10^{-9} \\text{ s}$，以及 $t_{SU} = 2.7 \\times 10^{-9} \\text{ s}$，最小允许时钟周期为\n$$\nT_{\\text{clk,min}} = \\left(4.2 + 7.1 + 2.7\\right) \\times 10^{-9} \\text{ s} = 14.0 \\times 10^{-9} \\text{ s}.\n$$\n最大时钟频率是最小周期的倒数：\n$$\nf_{\\text{max}} = \\frac{1}{T_{\\text{clk,min}}} = \\frac{1}{14.0 \\times 10^{-9} \\text{ s}} = \\frac{1}{14.0} \\times 10^{9} \\text{ Hz} = 71.4286 \\times 10^{6} \\text{ Hz}.\n$$\n以兆赫兹表示并四舍五入到三位有效数字，结果为 $71.4$ MHz。", "answer": "$$\\boxed{71.4}$$", "id": "1924348"}, {"introduction": "虽然建立时间决定了电路能跑多快，但保持时间 $t_H$ 确保了电路的数据稳定性，是保证功能正确的另一个关键因素。最后一个练习将深入探讨一个微妙但至关重要的问题：保持时间违例。你将分析时钟歪斜（clock skew）如何导致数据在被目标寄存器正确锁存前就发生变化，即使在数据路径延迟很短的情况下也会导致设计失败。掌握这个概念对于创建可靠的数字系统至关重要。[@problem_id:1924330]", "problem": "一位工程师正在对一个复杂可编程逻辑器件 (CPLD) 内的关键路径进行静态时序分析。该 CPLD 架构由多个逻辑阵列块 (LABs) 组成，这些 LABs 包含带有触发器和组合逻辑的宏单元，并通过一个中央可编程互连矩阵 (PIM) 互连。\n\n待分析的路径涉及两个正边沿触发的 D 型触发器 `source_FF` 和 `dest_FF`，它们都由同一个全局时钟信号 `gclk` 驱动。由于一个旨在最小化数据路径延迟的特定布局规划选择，`source_FF`、`dest_FF` 以及连接 `source_FF` 的 Q 输出到 `dest_FF` 的 D 输入的纯组合逻辑都被放置在了同一个 LAB 内。这使得数据路径非常短且快速。\n\n然而，全局时钟分配网络在将 `gclk` 传输到芯片不同部分时，会引入显著且不均匀的延迟（时钟偏斜）。在这个特定的布局中，`gclk` 到达 `source_FF` 的时间显著早于它到达 `dest_FF` 的时间。给出所涉及组件的以下时序参数：\n\n-   触发器的时钟到输出延迟：$t_{CO} = 0.75 \\text{ ns}$\n-   触发器 D 输入的保持时间要求：$t_{H} = 0.40 \\text{ ns}$\n-   LAB 内部组合逻辑路径的传播延迟：$t_{LOGIC} = 0.95 \\text{ ns}$\n-   从 CPLD 输入引脚到 `source_FF` 时钟输入的时钟路径延迟：$t_{CLK\\_S} = 1.10 \\text{ ns}$\n-   从 CPLD 输入引脚到 `dest_FF` 时钟输入的时钟路径延迟：$t_{CLK\\_D} = 2.80 \\text{ ns}$\n\n计算 `dest_FF` 输入端数据信号的保持时间裕量。正裕量表示时序余量得到满足，而负裕量表示存在保持时间违例。最终答案以纳秒 (ns) 为单位表示，并四舍五入到三位有效数字。", "solution": "我们在两个由相同时钟驱动但时钟到达时间不同的正边沿触发的触发器之间进行保持时间检查。进行保持时间检查时，数据到达目的输入端的最早时间，不得早于目的时钟边沿到达时间加上保持时间。\n\n将源时钟到达时间定义为 $C_{S} = t_{CLK\\_S}$，目的时钟到达时间定义为 $C_{D} = t_{CLK\\_D}$。目的输入端的最早数据到达时间为\n$$\nt_{\\text{arrival,min}} = C_{S} + t_{CO} + t_{LOGIC}.\n$$\n为满足保持时间要求，数据在目的输入端需要保持稳定的时刻边界是\n$$\nt_{\\text{required,hold}} = C_{D} + t_{H}.\n$$\n保持时间裕量 (hold slack) 是最早数据到达时间与保持时间要求边界之差：\n$$\n\\text{slack}_{\\text{hold}} = t_{\\text{arrival,min}} - t_{\\text{required,hold}} = \\left(C_{S} + t_{CO} + t_{LOGIC}\\right) - \\left(C_{D} + t_{H}\\right).\n$$\n等效地，用时钟偏斜 $t_{\\text{skew}} = C_{D} - C_{S}$ 来表示，\n$$\n\\text{slack}_{\\text{hold}} = t_{CO} + t_{LOGIC} - t_{H} - t_{\\text{skew}}.\n$$\n代入给定值：\n$$\nC_{S} = 1.10\\ \\text{ns},\\quad C_{D} = 2.80\\ \\text{ns},\\quad t_{CO} = 0.75\\ \\text{ns},\\quad t_{LOGIC} = 0.95\\ \\text{ns},\\quad t_{H} = 0.40\\ \\text{ns}.\n$$\n计算最早到达时间：\n$$\nt_{\\text{arrival,min}} = 1.10 + 0.75 + 0.95 = 2.80\\ \\text{ns}.\n$$\n计算保持时间要求边界：\n$$\nt_{\\text{required,hold}} = 2.80 + 0.40 = 3.20\\ \\text{ns}.\n$$\n因此，保持时间裕量为\n$$\n\\text{slack}_{\\text{hold}} = 2.80 - 3.20 = -0.40\\ \\text{ns}.\n$$\n以纳秒为单位，并四舍五入到三位有效数字，保持时间裕量为 $-0.400$。", "answer": "$$\\boxed{-0.400}$$", "id": "1924330"}]}