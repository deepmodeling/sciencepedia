{"hands_on_practices": [{"introduction": "要真正掌握可编程只读存储器（PROM）的强大功能，最好的方法就是亲自动手实践。我们将从一个基本但至关重要的应用开始：将 PROM 用作一个可编程的逻辑真值表。这个练习将帮助你巩固 PROM 的核心概念，即任何组合逻辑函数都可以通过将其输出结果预先存储在内存中来实现，其中输入作为地址，存储的数据作为输出 [@problem_id:1955523]。", "problem": "一个数字系统正在使用一块小型可编程只读存储器（PROM）进行设计。该PROM有一个3位地址输入，记为 $A_2A_1A_0$，其中 $A_2$ 为最高有效位，以及一个1位数据输出 $D$。该PROM必须被编程以实现一个特定的逻辑功能：当且仅当表示地址的3位二进制数中恰好包含一个“1”时，输出 $D$ 才为逻辑“1”。对于所有其他地址输入，输出 $D$ 必须为逻辑“0”。\n\n这块8x1 PROM的全部内容可以用一个8位二进制字符串表示，其中第一位对应于地址0（二进制000）处存储的数据，第二位对应于地址1（二进制001），依此类推，直到最后一位对应于地址7（二进制111）。\n\n下列哪个选项正确表示了应编程写入该PROM的8位数据字符串？\n\nA. 01111111\n\nB. 01101000\n\nC. 01101001\n\nD. 00010110\n\nE. 00110101", "solution": "要求是：当且仅当地址位中恰好包含一个1时，PROM输出 $D$ 为逻辑1。设输入为二进制变量 $A_{2},A_{1},A_{0} \\in \\{0,1\\}$。定义和 $S = A_{2} + A_{1} + A_{0}$。则逻辑条件为：\n$$\nD = 1 \\;\\;\\text{当且仅当}\\;\\; S = 1,\n$$\n其他情况下$D=0$。等效地，以积之和范式表示为：\n$$\nD = \\overline{A_{2}}\\,\\overline{A_{1}}\\,A_{0} \\;+\\; \\overline{A_{2}}\\,A_{1}\\,\\overline{A_{0}} \\;+\\; A_{2}\\,\\overline{A_{1}}\\,\\overline{A_{0}}.\n$$\n\nPROM在每个地址存储一位数据。题目说明8位字符串是按照从$000$（地址0）到$111$（地址7）的地址递增顺序列出数据的。为每个地址计算 $S$ 的值，并由此确定 $D$ 的值：\n\n- 地址 $0$ ($000$): $S=0 \\Rightarrow D=0$。\n- 地址 $1$ ($001$): $S=1 \\Rightarrow D=1$。\n- 地址 $2$ ($010$): $S=1 \\Rightarrow D=1$。\n- 地址 $3$ ($011$): $S=2 \\Rightarrow D=0$。\n- 地址 $4$ ($100$): $S=1 \\Rightarrow D=1$。\n- 地址 $5$ ($101$): $S=2 \\Rightarrow D=0$。\n- 地址 $6$ ($110$): $S=2 \\Rightarrow D=0$。\n- 地址 $7$ ($111$): $S=3 \\Rightarrow D=0$。\n\n因此，从地址0到7的数据位依次为$0,1,1,0,1,0,0,0$，构成了8位字符串$01101000$。与选项比较，该结果对应于选项B。", "answer": "$$\\boxed{B}$$", "id": "1955523"}, {"introduction": "在理解了 PROM如何实现基本逻辑功能后，我们可以进一步探索其在算术运算中的应用。通过将数学函数（如平方运算）的结果预先计算并存储在 PROM 中，我们可以创建一个高效的硬件查找表（Lookup Table, LUT）。这个练习不仅展示了 PROM 在加速计算方面的能力，还引入了一个重要的实际问题：当计算结果超出 PROM 的输出位宽时，如何通过截断（即模运算）来处理 [@problem_id:1955541]。", "problem": "一个数字系统需要一个可以计算3位无符号整数平方的组件。该功能将使用一个具有8个存储单元和4位数据字长（即一个 $8 \\times 4$ PROM）的可编程只读存储器（PROM）来实现。这个3位输入数作为PROM的地址，而4位输出数据字即为所需的结果。\n在每个存储地址上编程存入的值是该地址的十进制等价值的平方。如果计算出的平方需要超过4位来表示（即值大于或等于16），则存储的值必须是将完整的二进制表示截断为其最低有效的4位所得的结果。\n将PROM中存储的八个4位字均视为无符号整数，这八个整数值的总和是多少？", "solution": "3位地址 $a$ 的取值范围是集合 $\\{0,1,2,3,4,5,6,7\\}$。在每个地址上，PROM存储的是该地址的平方值并截断为最低有效的4位。提取一个整数 $x$ 的最低有效4位等效于计算 $x$ 模 $16$ 的余数，因此在地址 $a$ 处存储的值为\n$$\nv(a) = a^{2} \\pmod{16}.\n$$\n计算每个地址的 $v(a)$：\n$$\n\\begin{aligned}\na=0:&\\quad 0^{2}=0\\;\\Rightarrow\\;v(0)=0,\\\\\na=1:&\\quad 1^{2}=1\\;\\Rightarrow\\;v(1)=1,\\\\\na=2:&\\quad 2^{2}=4\\;\\Rightarrow\\;v(2)=4,\\\\\na=3:&\\quad 3^{2}=9\\;\\Rightarrow\\;v(3)=9,\\\\\na=4:&\\quad 4^{2}=16\\equiv 0 \\pmod{16}\\;\\Rightarrow\\;v(4)=0,\\\\\na=5:&\\quad 5^{2}=25\\equiv 9 \\pmod{16}\\;\\Rightarrow\\;v(5)=9,\\\\\na=6:&\\quad 6^{2}=36\\equiv 4 \\pmod{16}\\;\\Rightarrow\\;v(6)=4,\\\\\na=7:&\\quad 7^{2}=49\\equiv 1 \\pmod{16}\\;\\Rightarrow\\;v(7)=1.\n\\end{aligned}\n$$\n将每个4位字视为无符号整数，所求的和为\n$$\nS=\\sum_{a=0}^{7}v(a)=0+1+4+9+0+9+4+1=(0+0)+(1+1)+(4+4)+(9+9)=0+2+8+18=28.\n$$", "answer": "$$\\boxed{28}$$", "id": "1955541"}, {"introduction": "除了实现逻辑和算术功能，PROM 在处理不同数据格式和表示方面也极为有效。这个练习将带你探讨一个在处理器设计中非常常见的任务：符号扩展。你将学习如何利用 PROM 来实现一个查找表，将一个3位的二进制补码数转换为其等效的4位表示，这对于理解计算机如何处理带符号数的运算至关重要 [@problem_id:1955515]。", "problem": "一个数字系统需要一个组件，用于将一个3位有符号整数转换为其等效的4位有符号整数表示。这种转换称为符号扩展，将使用可编程只读存储器（PROM）来实现。PROM用作查找表，其中输入数字作为内存地址，输出是存储在该地址的数据。\n\nPROM有3条地址线，$A_2, A_1, A_0$，它们接收以二进制补码格式表示的3位输入数，其中$A_2$是最高有效位（符号位）。它有4条数据线，$D_3, D_2, D_1, D_0$，它们输出以二进制补码格式表示的相应的4位数，其中$D_3$是符号位。\n\n存储在与输入`101`相对应的内存地址处的4位二进制数据字是什么？\n\nA. `0101`\n\nB. `1100`\n\nC. `1101`\n\nD. `1011`\n\nE. `0011`", "solution": "在$n$位的二进制补码表示法 $b_{n-1}\\ldots b_{0}$中，所表示的整数为\n$$\n- b_{n-1} 2^{n-1} + \\sum_{k=0}^{n-2} b_{k} 2^{k}.\n$$\n对于3位输入 $A_{2}A_{1}A_{0} = 101$，我们有 $b_{2}=1$, $b_{1}=0$, $b_{0}=1$，所以其值为\n$$\n-1\\cdot 2^{2} + 0\\cdot 2^{1} + 1\\cdot 2^{0} = -4 + 0 + 1 = -3.\n$$\n从3位到4位的符号扩展将符号位复制到新的最高有效位。如果3位字是 $b_{2}b_{1}b_{0}$，则4位符号扩展后的字是 $b_{2}b_{2}b_{1}b_{0}$。这样做可以保持其值不变，因为\n$$\n- d_{3} 2^{3} + d_{2} 2^{2} + d_{1} 2^{1} + d_{0} 2^{0}\n= - b_{2} 2^{3} + b_{2} 2^{2} + b_{1} 2^{1} + b_{0} 2^{0}\n= - b_{2} (2^{3}-2^{2}) + b_{1} 2^{1} + b_{0} 2^{0}\n= - b_{2} 2^{2} + b_{1} 2^{1} + b_{0} 2^{0},\n$$\n这与原始的3位数值公式相匹配。\n\n将此应用于`101`将得到4位输出`1101`，这对应于选项C。", "answer": "$$\\boxed{C}$$", "id": "1955515"}]}