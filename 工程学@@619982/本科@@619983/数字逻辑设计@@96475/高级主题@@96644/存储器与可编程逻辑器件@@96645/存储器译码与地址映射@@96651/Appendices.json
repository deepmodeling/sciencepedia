{"hands_on_practices": [{"introduction": "在内存映射中，最基础的任务是创建一个能唯一识别特定地址范围的电路。本练习将引导你将一个十六进制地址范围转化为布尔逻辑表达式，并仅使用通用的或非门（`NOR` gate）来实现它 [@problem_id:1946694]。这不仅巩固了你对地址解码的理解，还锻炼了数字逻辑设计中的基本综合技能。", "problem": "一个微处理器系统使用一个16位地址总线，地址线从 $A_{15}$（最高有效位）到 $A_0$（最低有效位）进行标记。一个存储芯片需要集成到该系统中，并且只有当总线上的地址落在十六进制范围 $0x9000$ 到 $0x9FFF$（含两端）内时，该芯片才必须被使能。\n\n该存储芯片有一个低电平有效的片选输入，记为 $\\overline{CS}$。这意味着当 $\\overline{CS}=0$ 时芯片被选中，而当 $\\overline{CS}=1$ 时芯片未被选中。您的任务是为该片选信号设计译码逻辑。您的设计必须*仅*使用双输入或非门来实现。\n\n创建此地址译码电路所需的最少双输入或非门数量是多少？", "solution": "地址范围从 $0x9000$ 到 $0x9FFF$ 对应于最高的四位地址位 $A_{15}A_{14}A_{13}A_{12}=1001$，而 $A_{11}\\dots A_{0}$ 为无关项。因此，该地址块的高电平有效检测信号为\n$$\nD = A_{15}\\,A_{12}\\,\\overline{A_{14}}\\,\\overline{A_{13}}.\n$$\n因为该存储芯片具有低电平有效的片选，所以所需的片选输入为\n$$\n\\overline{CS}=\\overline{D}=\\overline{A_{15}A_{12}\\,\\overline{A_{14}}\\,\\overline{A_{13}}}.\n$$\n根据德摩根定律，这也可以写成\n$$\n\\overline{CS}=\\overline{A_{15}}+\\overline{A_{12}}+A_{14}+A_{13}.\n$$\n\n我们必须仅使用双输入或非门来实现 $\\overline{CS}$。以下仅使用或非门的实现方法采用了标准恒等式：\n- 反相器：$\\overline{x}=\\operatorname{NOR}(x,x)$。\n- 使用或非门实现与门：$x y=\\operatorname{NOR}\\big(\\operatorname{NOR}(x,x),\\operatorname{NOR}(y,y)\\big)$。\n- 此外，$\\operatorname{NOR}(x,y)=\\overline{x+y}$，所以 $\\operatorname{NOR}(A_{14},A_{13})=\\overline{A_{14}+A_{13}}=\\overline{A_{14}}\\,\\overline{A_{13}}$。\n\n一个门数最少的实现过程如下：\n\n1) 使用仅或非门的与逻辑构成 $t_{1}=A_{15}A_{12}$：\n$$\nn_{15}=\\operatorname{NOR}(A_{15},A_{15}),\\quad n_{12}=\\operatorname{NOR}(A_{12},A_{12}),\\quad t_{1}=\\operatorname{NOR}(n_{15},n_{12}).\n$$\n这需要3个或非门。\n\n2) 直接用一个或非门构成 $t_{2}=\\overline{A_{14}}\\,\\overline{A_{13}}$：\n$$\nt_{2}=\\operatorname{NOR}(A_{14},A_{13}).\n$$\n这需要1个或非门。\n\n3) 使用仅或非门的与逻辑构成 $D=t_{1}t_{2}$，然后反相得到 $\\overline{CS}=\\overline{D}$：\n$$\nu=\\operatorname{NOR}(t_{1},t_{1}),\\quad v=\\operatorname{NOR}(t_{2},t_{2}),\\quad D=\\operatorname{NOR}(u,v),\\quad \\overline{CS}=\\operatorname{NOR}(D,D).\n$$\n这个阶段需要 $3+1=4$ 个或非门。\n\n使用的或非门总数：$3+1+4=8$。\n\n为了论证其最小性，注意到 $\\overline{CS}$ 依赖于 $A_{15}$ 和 $A_{12}$ 的反相形式，因此至少需要两次反相。要仅用双输入或非门实现所需的四变量组合，还需要至少六次额外的或非运算，以正确的极性组合四个输入（等效于构建两个双输入或门和一个最终的或门，每个或门由两个或非门实现），从而得出一个 $2+6=8$ 的下界。上述构造达到了这个下界，因此8是最小数量。", "answer": "$$\\boxed{8}$$", "id": "1946694"}, {"introduction": "在某些系统中，为了节约成本，工程师可能会采用“不完全解码”方案，但这会引发一种称为“地址混叠”（address aliasing）的意外现象。本练习通过一个假设的设计疏忽，清晰地展示了一个内存芯片如何在地址空间中出现在多个位置 [@problem_id:1946720]。掌握这一概念对于诊断嵌入式系统中常见的寻址问题至关重要。", "problem": "一位数字系统工程师正在将一个存储芯片与一个微处理器进行接口连接。该微处理器拥有 16 KB (千字节) 的总地址空间，其中 1 KB 定义为 $2^{10}$ 字节。该存储芯片是一个容量为 1 KB 的随机存取存储器 (RAM) 设备。\n\n为了选择该存储芯片，使用了一个译码电路。然而，由于一项设计疏忽，其片选逻辑并不完整。当且仅当来自微处理器的两条最高有效地址线 $A_{13}$ 和 $A_{12}$ 分别为 1 和 0 时，该芯片才被选中。所有其他不用于芯片*内部*寻址的高位地址线都未连接到片选逻辑，这实际上使其对于片选而言成为“无关”位。\n\n这种不完整的译码方案导致该存储芯片会响应微处理器地址空间中的多个不同地址范围，这一现象被称为地址混叠。“基地址”定义为一个存储块的起始地址。你的任务是确定这个 1 KB 存储芯片的所有混叠基地址的完整集合。\n\n请将你的答案以一组十六进制值的形式给出，并按数值升序排列。答案中不要包含任何前缀（如 `0x`）或后缀（如 `h`）。", "solution": "微处理器的地址空间为 16 KB，即 $2^{14}$ 字节，因此地址总线有 $14$ 条线，标记为 $A_{13}$ (最高有效位) 到 $A_{0}$ (最低有效位)。RAM 的容量为 1 KB，即 $2^{10}$ 字节，因此需要 $10$ 条地址线（$A_{9}$ 到 $A_{0}$）用于芯片内部寻址。\n\n为了在 $2^{14}$ 字节的空间中选择一个特定的 1 KB 块，必须由高位地址线 $A_{13}$ 到 $A_{10}$ 来决定寻址的是哪个块。在给定的不完整译码方案中，当且仅当 $A_{13}=1$ 且 $A_{12}=0$ 时，芯片才被选中，而 $A_{11}$ 和 $A_{10}$ 则作为无关位。因此，芯片会对所有满足以下条件的地址作出响应：\n$$A_{13}=1,\\quad A_{12}=0,\\quad A_{11}\\in\\{0,1\\},\\quad A_{10}\\in\\{0,1\\}.$$\n基地址是 1 KB 块的起始地址，这要求 $A_{9}=\\cdots=A_{0}=0$。因此，混叠基地址正是那些具有上述位模式且 $A_{9}=\\cdots=A_{0}=0$ 的地址。\n\n将基地址值以 2 的幂次形式表示：\n$$\\text{Base} = A_{13}2^{13} + A_{12}2^{12} + A_{11}2^{11} + A_{10}2^{10},$$\n其中 $A_{13}=1$，$A_{12}=0$，且 $A_{11},A_{10}\\in\\{0,1\\}$。枚举这四种组合：\n- $A_{11}=0$, $A_{10}=0$: $\\text{Base}=2^{13}=0x2000$。\n- $A_{11}=0$, $A_{10}=1$: $\\text{Base}=2^{13}+2^{10}=0x2000+0x0400=0x2400$。\n- $A_{11}=1$, $A_{10}=0$: $\\text{Base}=2^{13}+2^{11}=0x2000+0x0800=0x2800$。\n- $A_{11}=1$, $A_{10}=1$: $\\text{Base}=2^{13}+2^{11}+2^{10}=0x2000+0x0800+0x0400=0x2C00$。\n\n按升序排列，混叠基地址为 $2000$、$2400$、$2800$ 和 $2C00$（十六进制，无前缀或后缀）。", "answer": "$$\\boxed{\\begin{pmatrix}2000 & 2400 & 2800 & 2C00\\end{pmatrix}}$$", "id": "1946720"}, {"introduction": "理论设计是基础，但实际的系统调试能力是衡量工程师水平的关键。本练习模拟了一个真实的布线错误：地址线被错误地连接到了读/写控制信号 $R/\\overline{W}$ 上 [@problem_id:1946715]。你需要分析这一故障对系统读写操作和内存映射产生的复杂连锁反应，从而将你的问题分析能力从单个组件提升到整个系统层面。", "problem": "一位数字系统设计师正在将八片1千字节（KB）的静态RAM芯片与一个微处理器连接，该微处理器拥有16位地址总线（$A_{15}$到$A_0$）和一条读/写控制线（$R/\\overline{W}$）。在读操作时，$R/\\overline{W}$线为逻辑高电平，在写操作时为逻辑低电平。\n\n设计目标是将这八片RAM芯片映射到从地址0x8000开始的一个连续的8KB内存块中。为实现这一目标，使用一个74LS138 3-8译码器进行芯片选择。74LS138有一个高电平有效的使能输入（$G_1$）和两个低电平有效的使能输入（$G_{2A}$和$G_{2B}$）。为了使译码器被激活，使能输入必须满足$G_1=1$，$G_{2A}=0$和$G_{2B}=0$。\n\n译码器的预期连接方式如下：\n-   **使能输入：** $G_1$ 连接到 $A_{15}$，$G_{2A}$ 连接到 $A_{14}$，而 $G_{2B}$ 连接到 $A_{13}$。\n-   **选择输入：** 选择线 $C$、$B$ 和 $A$ 分别连接到 $A_{12}$、$A_{11}$ 和 $A_{10}$。\n-   **输出：** 低电平有效的输出端 $\\overline{Y_0}$ 到 $\\overline{Y_7}$ 分别连接到 RAM 芯片 0 到 7 的低电平有效片选（$\\overline{CS}$）输入端。\n\n制造后，发现了一个故障：$G_1$使能输入的导线被错误地连接到了CPU的$R/\\overline{W}$线上，而不是$A_{15}$地址线上。$A_{15}$线不再连接到译码器。\n\n下列哪个陈述最准确地描述了在这种接线故障下RAM的操作行为？\n\nA. RAM可以写入，但不能读取。有效地址范围仍为0x8000-0x9FFF。\n\nB. RAM功能完全正常（可读可写），但它现在出现在两个地址范围：0x0000-0x1FFF和0x8000-0x9FFF。\n\nC. RAM可以读取，但不能写入。用于读取的有效地址范围现在被复制，同时出现在0x0000-0x1FFF和0x8000-0x9FFF。\n\nD. 系统完全按预期运行，因为在读周期中$R/\\overline{W}$线为高电平（逻辑1），这满足了$G_1$的使能输入，就像$A_{15}=1$一样。", "solution": "为了确定存在故障时系统的行为，我们必须分析错误的接线如何影响译码器的使能逻辑，并由此分析其对内存系统读/写操作响应及其地址映射的影响。\n\n**步骤1：分析预期的（正确的）译码逻辑**\n\n在原始设计中，当74LS138译码器的使能输入满足条件 $G_1=1$、$G_{2A}=0$ 和 $G_{2B}=0$ 时，它被使能。连接方式为：\n-   $G_1 \\leftarrow A_{15}$\n-   $G_{2A} \\leftarrow A_{14}$\n-   $G_{2B} \\leftarrow A_{13}$\n\n因此，译码器当且仅当 $A_{15}=1$、$A_{14}=0$ 和 $A_{13}=0$ 时被使能。在二进制中，这对应于地址前缀 `100...`。\n具有此前缀的内存地址范围从 `1000 0000 0000 0000` (0x8000) 到 `1001 1111 1111 1111` (0x9FFF)。这是一个8KB的地址块。选择线 $A_{12}, A_{11}, A_{10}$ 用于选择此块内的八个1KB芯片之一。此配置将8KB的RAM正确地映射到预期的地址范围。\n\n**步骤2：分析故障的译码逻辑**\n\n在故障配置中，$G_1$输入连接到了$R/\\overline{W}$线，而不是$A_{15}$。译码器的使能逻辑现在变为：\n-   $G_1 = (R/\\overline{W})$\n-   $G_{2A} = A_{14}$\n-   $G_{2B} = A_{13}$\n\n译码器被使能的条件现在是：$(R/\\overline{W})=1$ 且 $A_{14}=0$ 且 $A_{13}=0$。\n\n**步骤3：分析对读写操作的影响**\n\n我们检查CPU读写周期的新使能条件。\n\n-   **写周期：** 在写操作期间，CPU将$R/\\overline{W}$线置为低电平（逻辑0）。译码器的使能条件是 $(0)=1$ 且 $A_{14}=0$ 且 $A_{13}=0$。这个逻辑与运算的第一部分 `(0)=1` 永远为假。因此，在任何写周期内，无论总线上的地址是什么，译码器都不能被使能。由于译码器永远不会被使能，其输出 $\\overline{Y_0}-\\overline{Y_7}$ 将永远不会被断言（变为低电平）。这意味着没有RAM芯片会被选中（因为它们的$\\overline{CS}$输入保持高电平）。因此，**不可能向任何RAM芯片写入数据。**\n\n-   **读周期：** 在读操作期间，CPU将$R/\\overline{W}$线置为高电平（逻辑1）。译码器的使能条件变为 $(1)=1$ 且 $A_{14}=0$ 且 $A_{13}=0$。这可以简化为条件：$A_{14}=0$ 且 $A_{13}=0$。如果满足这个地址条件，译码器将被使能，其输出之一将选择一个RAM芯片。因此，**可以从RAM芯片中读取数据。**\n\n综合这些发现，我们得出结论：RAM可以被读取，但不能被写入。\n\n**步骤4：分析对地址映射的影响（地址混叠）**\n\n故障的使能逻辑仅在读取时有效，它取决于 $A_{14}=0$ 和 $A_{13}=0$。关键是，它现在与$A_{15}$地址线无关。这意味着只要地址前缀是 `X00...`（其中X代表$A_{15}$的“无关”状态），译码器就会在读操作期间响应。\n\n让我们找出满足此条件的地址范围：\n-   **情况1：$A_{15}=0$。** 地址前缀为 `000...`。这对应于 $A_{15}=0, A_{14}=0, A_{13}=0$ 的地址。8KB的RAM块（由$A_{12}, A_{11}, A_{10}$选择）将出现在从 `0000 0000 0000 0000` 到 `0001 1111 1111 1111` 的地址范围内，即 **0x0000到0x1FFF**。\n-   **情况2：$A_{15}=1$。** 地址前缀为 `100...`。这对应于 $A_{15}=1, A_{14}=0, A_{13}=0$ 的地址。8KB的RAM块也将出现在从 `1000 0000 0000 0000` 到 `1001 1111 1111 1111` 的地址范围内，即 **0x8000到0x9FFF**。这是最初预期的范围。\n\n由于RAM在这两个范围内都对读请求作出响应，内存被称为“混叠”或“镜像”。对地址0x0100的读取将访问与对地址0x8100的读取完全相同的存储单元。\n\n**步骤5：评估选项**\n\n-   A. “RAM可以写入，但不能读取……” - 不正确。我们的分析表明情况正好相反。\n-   B. “RAM功能完全正常（可读可写）……” - 不正确。写操作会失败。\n-   C. “RAM可以读取，但不能写入。用于读取的有效地址范围现在被复制，同时出现在0x0000-0x1FFF和0x8000-0x9FFF。” - **正确。** 这个陈述准确地总结了我们的发现：写操作失败，读操作正常，并且有效地址范围被混叠，同时出现在0x0000-0x1FFF和0x8000-0x9FFF。\n-   D. “系统完全按预期运行……” - 不正确。这忽略了两个主要问题：所有写操作的失败以及地址混叠的产生，后者可能导致严重的系统不稳定。", "answer": "$$\\boxed{C}$$", "id": "1946715"}]}