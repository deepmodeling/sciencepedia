{"hands_on_practices": [{"introduction": "在深入研究如何构建时钟门控电路之前，理解我们为什么要使用它至关重要。本练习提供了一个涉及智能手机片上系统（SoC）中神经处理单元（NPU）的现实场景，旨在帮助您量化通过时钟门控技术所能实现的实际功耗节省。通过将功耗降低这一抽象概念置于具体的数值计算中，您将更深刻地体会到时钟门控在现代低功耗设计中的关键价值 [@problem_id:1920661]。", "problem": "一部现代智能手机的系统级芯片（SoC）包含一个专门的神经网络处理单元（NPU），用于加速机器学习计算。\n\n在所有SoC部件都持续工作的满载基准测试条件下，NPU占SoC总动态功耗的18%。\n\n在典型的日常使用场景中，该NPU仅有35%的时间处于活动状态，其余65%的时间处于空闲状态。为了节省电池寿命，工程师们在NPU上实现了时钟门控技术。通过停止其时钟信号，该技术在NPU的空闲期间完全消除了其动态功耗。\n\n假设用于时钟门控的逻辑是理想的（即其自身不消耗功率），计算在典型的日常使用场景下，因实施此时钟门控方案而导致的整个SoC的*平均总动态功耗*的分数减少量。将您的答案表示为保留三位有效数字的小数值。", "solution": "设 $P_{\\text{tot}}$ 表示SoC在满载基准测试下的总动态功耗，并设该条件下NPU的动态功耗为 $P_{\\text{NPU}}=fP_{\\text{tot}}$，其中 $f=0.18$。在典型的使用场景中，NPU有 $\\alpha=0.35$ 的时间比例处于活动状态，有 $\\beta=1-\\alpha=0.65$ 的时间比例处于空闲状态。理想的时钟门控在空闲期间消除了NPU的动态功耗，因此节省的时间平均功率是NPU在空闲时的动态功耗：\n$$\n\\langle P_{\\text{save}}\\rangle=\\beta\\,P_{\\text{NPU}}=\\beta f P_{\\text{tot}}.\n$$\nSoC平均总动态功耗的分数减少量是节省的功率除以参考总动态功耗：\n$$\n\\frac{\\langle P_{\\text{save}}\\rangle}{P_{\\text{tot}}}=\\beta f=(1-\\alpha)f.\n$$\n代入给定值，\n$$\n(1-0.35)\\times 0.18=0.65\\times 0.18=0.117.\n$$\n保留三位有效数字，分数减少量为 $0.117$。", "answer": "$$\\boxed{0.117}$$", "id": "1920661"}, {"introduction": "任何时钟门控电路的核心都是其使能（`enable`）信号，它如同一个智能开关，精确控制着时钟的通断。本练习将挑战您将一组关于微处理器寄存器加载操作的文字描述要求，转化为一个清晰、简洁的布尔逻辑表达式 [@problem_id:1920641]。熟练掌握这种从功能需求到逻辑实现转换的能力，是设计任何复杂数字控制系统的基础。", "problem": "微处理器执行单元内部的一个专用寄存器 `R_X` 可以从两个来源之一加载操作数：主内存总线或本地数据缓存。该加载操作由一个使能信号 `E` 控制，`E` 是一个时钟门控电路的一部分，该电路旨在通过仅在存在待处理的有效写操作时才激活寄存器来降低功耗。\n\n使能信号的行为由四个输入信号决定：\n- `B_R`：一个逻辑信号，当主内存总线请求向 `R_X` 写入数据时，该信号为高电平（逻辑 1）。\n- `B_G`：一个逻辑信号，当总线仲裁器授予主内存总线的写请求时，该信号为高电平（逻辑 1）。\n- `C_R`：一个逻辑信号，当本地数据缓存请求向 `R_X` 写入数据时，该信号为高电平（逻辑 1）。\n- `C_B`：一个逻辑信号，当本地数据缓存因内部操作而繁忙且无法满足写请求时，该信号为高电平（逻辑 1）。\n\n如果以下任一组条件被完全满足，使能信号 `E` 必须被置位（设置为高电平）以加载寄存器 `R_X`：\n1. 主内存总线请求写入，且该请求同时被仲裁器授予。\n2. 本地数据缓存请求写入，且缓存不繁忙。\n\n请根据输入信号 `B_R`、`B_G`、`C_R` 和 `C_B`，确定使能信号 `E` 的最简布尔逻辑表达式。最终答案应为积之和形式的布尔表达式。使用 `\\cdot` 表示与操作，`+` 表示或操作，上划线表示非操作（例如 `\\overline{X}`）。", "solution": "当主内存总线请求写入并被授予，或者当本地缓存请求写入且不繁忙时，使能信号必须被置位。将每个条件转换为布尔项：\n- 当 $B_{R}$ 和 $B_{G}$ 同时为高电平时，满足主内存总线的条件，得到积项 $B_{R} \\cdot B_{G}$。\n- 当 $C_{R}$ 为高电平且 $C_{B}$ 为低电平时，满足本地缓存的条件，得到积项 $C_{R} \\cdot \\overline{C_{B}}$。\n\n因为任一条件均可满足要求，所以使能信号是这两个积项的逻辑或：\n$$E = B_{R} \\cdot B_{G} + C_{R} \\cdot \\overline{C_{B}}.$$\n\n该表达式已经是积之和形式。它是最简的，因为每一项都对应于其各自来源的一个必要的且充分的双文字合取，并且由于 $B_{R} \\cdot B_{G}$ 和 $C_{R} \\cdot \\overline{C_{B}}$ 不共享任何允许化简的变量或其补元，它们之间不存在吸收律或共识律化简。", "answer": "$$\\boxed{B_{R}\\cdot B_{G} + C_{R}\\cdot \\overline{C_{B}}}$$", "id": "1920641"}, {"introduction": "简单的与门时钟门控方案存在产生时钟毛刺的风险，这会对系统稳定性构成威胁。为解决此问题，工业界广泛采用基于锁存器的无毛刺时钟门控电路。本练习将引导您对这种更安全的电路进行一次关键的时序分析，计算其使能逻辑的最大允许延迟，以确保在严格的时序约束下电路依然能够可靠工作 [@problem_id:1920633]。", "problem": "在低功耗数字信号处理器的设计中，使用了一种基于锁存器的时钟门控技术来禁用到一个空闲浮点运算单元 (FPU) 的时钟。该时钟门控电路由一个负电平敏感的透明锁存器和一个与门构成。控制信号 `ENABLE` 被馈入锁存器的数据输入端。锁存器的输出随后与系统时钟 `CLK` 进行与运算，以产生供给 FPU 的门控时钟。该锁存器仅在 `CLK` 为低电平时是透明的（即其输出跟随其输入），并在 `CLK` 的上升沿捕获 `ENABLE` 信号的状态。\n\n`ENABLE` 信号本身由一个组合逻辑块生成，该逻辑块的输入来自一组控制寄存器。这些控制寄存器在同一个系统时钟 `CLK` 的**下降沿**被更新。\n\n给定以下用于最坏情况分析的时序参数：\n- 时钟低电平相位的最小保证持续时间为 $T_{\\text{low}} = 600$ ps。\n- 下降沿触发的控制寄存器的时钟到Q端延迟为 $T_{\\text{c2q}} = 45$ ps。\n- 时钟门控锁存器数据输入的建立时间要求为 $T_{\\text{su,latch}} = 35$ ps。\n- 必须包含 $T_{\\text{margin}} = 50$ ps 的强制性安全时序裕量，以确保稳健运行。\n\n计算生成 `ENABLE` 信号的组合逻辑块的最大允许传播延迟 $T_{\\text{prop,max}}$。答案以皮秒 (ps) 表示。", "solution": "用于时钟门控的负电平敏感锁存器仅在 $CLK$ 为低电平时是透明的，并在 $CLK$ 的上升沿关闭。锁存器的数据输入 $ENABLE$ 必须在 $CLK$ 上升沿之前的至少 $T_{\\text{su,latch}}$ 保持稳定，并且还必须包含一个额外的安全裕量 $T_{\\text{margin}}$。\n\n驱动组合逻辑的控制寄存器在 $CLK$ 的下降沿被触发，其输出在一个时钟到Q端延迟 $T_{\\text{c2q}}$ 后变得有效。组合逻辑随后产生一个传播延迟 $T_{\\text{prop}}$，以在锁存器输入端生成 $ENABLE$。\n\n考虑到最短低电平持续时间 $T_{\\text{low}}$，从下降沿到信号允许稳定到达锁存器输入端的最新总可用时间为 $T_{\\text{low}} - T_{\\text{su,latch}} - T_{\\text{margin}}$。因此，为保证安全操作的时序不等式为\n$$\nT_{\\text{c2q}} + T_{\\text{prop}} \\leq T_{\\text{low}} - T_{\\text{su,latch}} - T_{\\text{margin}}.\n$$\n求解最大允许传播延迟，\n$$\nT_{\\text{prop,max}} = T_{\\text{low}} - T_{\\text{c2q}} - T_{\\text{su,latch}} - T_{\\text{margin}}.\n$$\n代入给定值 $T_{\\text{low}} = 600\\ \\text{ps}$、$T_{\\text{c2q}} = 45\\ \\text{ps}$、$T_{\\text{su,latch}} = 35\\ \\text{ps}$ 和 $T_{\\text{margin}} = 50\\ \\text{ps}$，\n$$\nT_{\\text{prop,max}} = 600 - 45 - 35 - 50 = 470\\ \\text{ps}.\n$$\n因此，组合逻辑的最大允许传播延迟为 $470\\ \\text{ps}$。", "answer": "$$\\boxed{470}$$", "id": "1920633"}]}