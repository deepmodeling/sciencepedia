{"hands_on_practices": [{"introduction": "静态时序分析（STA）工具默认会分析电路中的所有结构化路径，但并非所有路径在逻辑上都是有效的。本练习将帮助您区分物理存在的路径和逻辑上可被激活的路径（即可敏化路径），这是识别伪路径和精确计算电路真实性能的关键一步。通过分析一个包含冗余逻辑的电路，您将亲自计算出其真实的临界路径延迟 [@problem_id:1947998]。", "problem": "一个数字电路被设计用来实现一个具有三个输入 A、B、C 和一个输出 Y 的逻辑函数。该电路的结构由以下相互连接的逻辑门描述：\n\n- 一个标记为 G1 的双输入与门，其输入为主输入 A 和 B。\n- 一个标记为 G2 的非门，其输入为主输入 A。\n- 一个标记为 G3 的三输入与门，其输入为主输入 C、主输入 A 和门 G2 的输出。\n- 一个标记为 G4 的双输入或门，其输入为门 G1 和 G3 的输出。门 G4 的输出作为最终电路输出 Y。\n\n每种类型门的传播延迟表征如下：\n- 非门：55 ps\n- 双输入与门：82 ps\n- 三输入与门：115 ps\n- 双输入或门：93 ps\n\n电路的“关键路径延迟”定义为在任何输入端的信号变化沿逻辑可敏化路径传播到输出所需的最长时间。如果存在允许信号跳变沿某条路径从输入传输到输出的条件，则该路径是逻辑可敏化的。假设所有主输入（A、B 和 C）在时间 $t=0$ 时同时可用，计算该电路的真实关键路径延迟。\n\n以皮秒（ps）为单位表示您的最终答案。将最终答案四舍五入到三位有效数字。", "solution": "该电路由以下门组成：G1 是一个输入为 $A$ 和 $B$ 的双输入与门，G2 是一个输入为 $A$ 的非门，G3 是一个输入为 $C$、$A$ 和 $\\overline{A}$（G2 的输出）的三输入与门，G4 是一个双输入或门，它组合 G1 和 G3 的输出以产生 $Y$。\n\n首先，写出所实现的布尔函数：\n$$\nY = (A \\cdot B) + \\big(C \\cdot A \\cdot \\overline{A}\\big)\n$$\n使用互补律 $A \\cdot \\overline{A} = 0$，该表达式在功能上简化为\n$$\nY = A \\cdot B\n$$\n然而，就时序而言，物理门 G1 和 G4 仍然构成从输入到输出的数据路径，而 G3 的输出始终为 $0$，这是或门的非控制值。因此，从 G1 经 G4 到 $Y$ 的路径是逻辑可敏化的，而任何经过 G3 的路径则不是。\n\n为确定可敏化路径：\n- 从 $C$ 经 G3 的路径：要使一个三输入与门对 $C$ 敏化，其他输入必须为 $1$。这将要求 $A=1$ 和 $\\overline{A}=1$ 同时成立，这是不可能的。因此，$C \\rightarrow \\text{G3} \\rightarrow \\text{G4}$ 路径不是逻辑可敏化的。\n- 从 $A$ 经 G3 的路径（直接或通过 G2）：要对 $A$ 敏化，G3 的其他输入必须保持为 $1$，包括 $\\overline{A}=1$，这再次与 $A$ 的变化相冲突。因此，$A \\rightarrow \\text{G3} \\rightarrow \\text{G4}$ 是不可敏化的。由于不相等的延迟而产生的任何表观瞬态都不能产生有效的可敏化路径，因为在任何静态赋值下 $A$ 和 $\\overline{A}$ 不能同时为 $1$，并且在惯性延迟模型下，小于门延迟的脉冲不会传播。\n- 因此，到 $Y$ 的唯一可敏化路径是经过 G1 和 G4：\n  - $A \\rightarrow \\text{G1} \\rightarrow \\text{G4} \\rightarrow Y$，\n  - $B \\rightarrow \\text{G1} \\rightarrow \\text{G4} \\rightarrow Y$。\n\n门延迟给出如下：非门 $55$ ps，双输入与门 $82$ ps，三输入与门 $115$ ps，双输入或门 $93$ ps。\n\n计算可敏化路径的延迟：\n- 从 $A$（或 $B$）经 G1 和 G4：\n$$\nt_{\\text{path}} = t_{\\text{AND2}} + t_{\\text{OR2}} = 82\\ \\text{ps} + 93\\ \\text{ps} = 175\\ \\text{ps}\n$$\n\n由于经过 G3 的路径不是逻辑可敏化的，它们对关键路径没有贡献。因此，真实关键路径延迟是可敏化路径延迟的最大值，即 $175$ ps。四舍五入到三位有效数字，结果仍然是 $175$。", "answer": "$$\\boxed{175}$$", "id": "1947998"}, {"introduction": "在我们学会识别并忽略无效的伪路径后，接下来将探讨另一类重要的时序例外：多周期路径。在实际设计中，出于对性能或面积的权衡，某些组合逻辑单元的延迟可能过长，无法在一个时钟周期内完成。本练习模拟了一个数字信号处理器（DSP）中的真实场景，您将学习如何使用标准的Synopsys设计约束（SDC）命令，来正确地告知STA工具这一设计意图 [@problem_id:1948033]。", "problem": "在一个定制的数字信号处理器（DSP）的设计中，一个关键的数据路径部分包含一个大型的64位组合桶形移位器。该移位器在设计中被实例化，其层次化名称为 `U_BARREL_SHIFTER`。该移位器的输入来自一组名为 `data_src_reg[*]` 的触发器，其输出被另一组名为 `data_dest_reg[*]` 的触发器捕获。这两组寄存器都由同一个系统时钟 `sys_clk` 驱动。\n\n`sys_clk` 的目标时钟周期为2.5纳秒。综合与布局布线的结果表明，通过 `U_BARREL_SHIFTER` 的组合逻辑路径的最大传播延迟（即从 `data_src_reg[*]` 的时钟到Q端延迟到 `data_dest_reg[*]` 的D引脚）为3.5纳秒。\n\n为了在不降低时钟频率的情况下适应这个长延迟，DSP的控制逻辑被专门设计为将此路径作为两周期操作来处理。当一个移位操作被启动时，目标寄存器 `data_dest_reg` 的使能信号在数据从 `data_src_reg` 发出两个时钟周期后被置为有效。\n\n设计者现在必须向静态时序分析（STA）工具提供一个时序例外，以反映这一架构意图。下列哪个 Synopsys 设计约束（SDC）命令能正确指示STA工具，将此特定路径的*建立时间检查*从默认的单周期要求放宽到预期的两周期要求？\n\nA. `set_multicycle_path 2 -setup -from [get_cells data_src_reg[*]] -to [get_cells data_dest_reg[*]]`\n\nB. `set_multicycle_path 1 -hold -from [get_cells data_src_reg[*]] -to [get_cells data_dest_reg[*]]`\n\nC. `set_false_path -from [get_cells data_src_reg[*]] -to [get_cells data_dest_reg[*]]`\n\nD. `set_multicycle_path 1 -setup -from [get_cells data_src_reg[*]] -to [get_cells data_dest_reg[*]]`\n\nE. `set_max_delay 5.0 -from [get_cells data_src_reg[*]] -to [get_cells data_dest_reg[*]]`", "solution": "该路径是同步路径，从 `data_src_reg[*]` (发射) 到 `data_dest_reg[*]` (捕获)，两者都由周期为 $T=2.5$ ns 的时钟 `sys_clk` 驱动。在默认的单周期STA中，建立时间要求是在一个有效时钟边沿发射的数据必须在下一个有效时钟边沿之前到达并保持稳定，即需求时间为 $T$。给定的最大数据路径延迟（包括从时钟到Q端，经过组合桶形移位器，直到目标D引脚的延迟）是 $3.5$ ns。在单周期时序下，这违反了建立时间，因为 $3.5 > T=2.5$。\n\n从架构上讲，该操作被设计为两周期：目标寄存器的使能在数据发射两个周期后被置为有效。对于一个两周期路径，建立时间检查的需求时间变为 $2T$，在此例中为 $2 \\times 2.5 = 5.0$ ns，因此 $3.5$ ns 的数据路径满足时序要求。为了告知STA工具该特定路径的建立时间检查应基于两个周期进行评估，正确的约束是在指定的起始点和结束点之间设置一个系数为 $2$ 的建立时间多周期路径：\n`set_multicycle_path 2 -setup -from [get_cells data_src_reg[*]] -to [get_cells data_dest_reg[*]]`\n这直接将指定路径的建立时间检查从一个周期放宽到两个周期，与架构意图相匹配。\n\n选项分析：\n- A 对该路径应用了正确的2周期多周期建立时间设置；这是放宽建立时间要求的预期方式。\n- B 仅将保持时间的多周期路径设置为1，这是默认的保持时间检查位置，并不会放宽建立时间；它没有解决建立时间的要求。\n- C 将路径声明为伪路径，这会移除建立时间和保持时间检查，这是不正确的，因为该路径在功能上是必需的，只是一个多周期路径。\n- D 将建立时间多周期路径设置为1，这是默认的单周期设置，不会放宽任何约束。\n- E 设置了一个数值为 $5.0$ ns 的最大延迟。虽然在这里 $5.0=2T$，但这并不是对同步多周期行为进行建模的规范方法，并且它没有捕捉时钟边沿关系或相关的保持时间调整；因此，它不是“将建立时间检查放宽到两个周期”的正确答案。\n\n因此，正确选项是A。（注意：在实践中，通常还会用一个单独的命令将其与一个$N-1=1$的保持时间多周期路径配对，以维持正确的保持时间检查，但问题明确询问的是如何放宽建立时间检查。）", "answer": "$$\\boxed{A}$$", "id": "1948033"}, {"introduction": "简单地声明一个多周期设置（setup）路径通常并不足够，尤其是在处理可变延迟或追求稳健性时。本练习将带您深入探讨一个更高级的场景，其中数据路径具有两种不同的计算延迟。您将学习如何通过约束最坏情况的延迟来确保时序收敛，同时必须正确调整保持时间（hold time）的检查，以避免工具报告虚假的违例，这是编写专业且可靠的时序约束的关键一步 [@problem_id:1948011]。", "problem": "一个数字信号处理核心包含一个特定的数据路径，该路径用于执行可变延迟的计算。该数据路径起始于一个名为 `D_reg[*]` 的寄存器组，终止于一个名为 `Z_reg[*]` 的结果寄存器组。两个寄存器组都由同一个系统时钟 `clk` 驱动，其周期为 10 ns。一个同样由 `clk` 驱动的控制有限状态机 (FSM) 负责启动计算，并在正确的时钟周期使能 `Z_reg` 寄存器以捕获结果。\n\n根据一个输入模式位的不同，`D_reg` 和 `Z_reg` 之间的组合逻辑有两种不同的行为：\n1.  **短路径**：如果模式位为 0，计算需要 2 个时钟周期。此路径的组合逻辑延迟为 15 ns。FSM 在第 2 个周期结束时使能 `Z_reg` 捕获结果。\n2.  **长路径**：如果模式位为 1，计算更为复杂，需要 4 个时钟周期。此路径的组合逻辑延迟为 35 ns。FSM 在第 4 个周期结束时使能 `Z_reg` 捕获结果。\n\n该设计必须使用 Synopsys 设计约束 (SDC) 为静态时序分析 (STA) 进行约束。目标是为从 `D_reg[*]` 到 `Z_reg[*]` 的路径创建一套单一、鲁棒的约束，这套约束需要能正确反映电路的多周期特性，覆盖最坏情况的延迟，并避免因不恰当的多周期路径定义而引发错误的保持时间违例。\n\n在此场景下，下列哪组 SDC 命令能够正确且鲁棒地约束从 `D_reg[*]` 到 `Z_reg[*]` 的数据路径？\n\nA.\n```sdc\nset_multicycle_path 4 -setup -from [get_cells D_reg[*]] -to [get_cells Z_reg[*]]\n```\n\nB.\n```sdc\nset_multicycle_path 4 -setup -from [get_cells D_reg[*]] -to [get_cells Z_reg[*]]\nset_multicycle_path 4 -hold -from [get_cells D_reg[*]] -to [get_cells Z_reg[*]]\n```\n\nC.\n```sdc\nset_multicycle_path 4 -setup -from [get_cells D_reg[*]] -to [get_cells Z_reg[*]]\nset_multicycle_path 3 -hold -from [get_cells D_reg[*]] -to [get_cells Z_reg[*]]\n```\n\nD.\n```sdc\nset_false_path -from [get_cells D_reg[*]] -to [get_cells Z_reg[*]]\n```\n\nE.\n```sdc\nset_multicycle_path 2 -setup -from [get_cells D_reg[*]] -to [get_cells Z_reg[*]]\nset_multicycle_path 1 -hold -from [get_cells D_reg[*]] -to [get_cells Z_reg[*]]\n```", "solution": "设系统时钟周期为 $T$，控制器允许数据路径使用的最大时钟周期数为 $N_{\\max}=4$，两种模式下的数据路径延迟分别为 $D_{\\text{short}}$（2周期模式）和 $D_{\\text{long}}$（4周期模式）。对于一个被约束为 $N$ 个周期的多周期路径，其 STA 建立时间检查的形式为\n$$\nt_{\\text{clk}\\_q} + D \\leq N T - t_{\\text{setup}}\n$$\n因此，为了用单一约束鲁棒地覆盖最坏情况的延迟，建立时间多周期约束必须使用 $N=N_{\\max}=4$。这确保了当 FSM 在第四个时钟沿使能捕获时，条件 $D_{\\text{long}} \\leq 4T - (t_{\\text{setup}}+t_{\\text{clk}\\_q})$ 能够被满足，并且它也自然地覆盖了2周期模式，因为提前捕获是由 FSM 的功能控制的，而不是由 STA 控制的。\n\n然而，仅仅应用建立时间多周期约束会将建立时间检查的捕获沿移动到 $NT$，并且默认情况下，会将保持时间检查移动到该捕获沿紧邻的前一个时钟沿，即 $(N-1)T$。这种默认行为会对快路径产生过于严苛且通常不正确的保持时间要求，因为它实际上要求数据在发起后的 $(N-1)T$ 时间之前不能到达。为了避免产生人为的保持时间违例，并将保持时间检查恢复到原始的同沿关系，必须同时指定一个值为 $N-1$ 的保持时间多周期约束。在 SDC 格式中，对于一个 N 周期路径，正确的配对是：\n- 使用 `-setup N` 将建立时间检查移动到第 N 个时钟沿。\n- 使用 `-hold (N-1)` 保持保持时间检查与原始的同沿保持要求对齐。\n\n评估各个选项：\n- A 只使用了 `-setup 4`，省略了相应的 `-hold` 例外；这会导致不正确的保持时间检查。\n- B 使用了 `-hold 4`，这会使保持时间检查错位，可能掩盖真实的保持时间问题或创建不正确的约束。\n- C 使用了 `-setup 4` 和 `-hold 3`，这是针对 4 周期多周期路径的标准、正确配对。\n- D 将路径声明为伪路径（false path），这会禁用建立时间和保持时间检查，对于一个真实的、需要时序分析的数据路径来说是错误的。\n- E 将路径约束为 2 个周期；这没有覆盖 4 周期模式，因此是错误的。\n\n因此，正确且鲁棒的 SDC 是 ` -setup 4` 和 ` -hold 3` 的组合，对应于选项 C。", "answer": "$$\\boxed{C}$$", "id": "1948011"}]}