{"hands_on_practices": [{"introduction": "要真正掌握米利型有限状态机，我们必须首先理解其基本运作机制。本练习将引导您逐步模拟一个简单的米利机。通过手动追踪给定输入序列下的状态转换及相应输出，您将对机器行为如何随时间演变建立起直观的理解，这是进行所有有限状态机分析与设计的基础技能。[@problem_id:1968925]", "problem": "米利机是一种有限状态机，其输出值由当前状态和当前输入共同决定。考虑一个特定的米利机，它有两个状态 $S_0$ 和 $S_1$，一个输入字母表 $\\{0, 1\\}$，以及一个输出字母表 $\\{0, 1\\}$。该机器的行为由以下规则定义：\n\n**转移规则：**\n1.  如果输入为 '0'，机器保持在当前状态。\n2.  如果输入为 '1'，机器转换到另一个状态（从 $S_0$ 到 $S_1$，或从 $S_1$ 到 $S_0$）。\n\n**输出规则：**\n1.  如果输入为 '0'，无论当前状态如何，机器的输出始终为 '1'。\n2.  如果输入为 '1'，当从状态 $S_0$ 转换出时，机器的输出为 '0'。\n3.  如果输入为 '1'，当从状态 $S_1$ 转换出时，机器的输出为 '1'。\n\n已知机器从状态 $S_0$ 开始，确定对于输入序列 '10011' 所生成的输出序列。\n\nA. 10101\n\nB. 01100\n\nC. 11101\n\nD. 01110\n\nE. 10011", "solution": "我们需要找出给定输入序列下，一个米利机所产生的输出序列。该机器从状态 $S_0$ 开始，逐位处理输入序列 `10011`。我们将跟踪每个输入符号对应的状态和输出。\n\n初始状态为 $S_{current} = S_0$。\n\n**步骤 1：处理第一个输入'1'。**\n- 当前状态：$S_0$\n- 输入：'1'\n- 根据输入'1'的转移规则，机器转换到另一个状态。因此，下一个状态是 $S_1$。\n- 根据从状态 $S_0$ 开始、输入为'1'的输出规则，输出为'0'。\n- 目前为止的输出：`0`\n- 新状态：$S_1$\n\n**步骤 2：处理第二个输入'0'。**\n- 当前状态：$S_1$\n- 输入：'0'\n- 根据输入'0'的转移规则，机器保持在当前状态。因此，下一个状态是 $S_1$。\n- 根据输入'0'的输出规则，输出为'1'。\n- 目前为止的输出：`01`\n- 新状态：$S_1$\n\n**步骤 3：处理第三个输入'0'。**\n- 当前状态：$S_1$\n- 输入：'0'\n- 根据输入'0'的转移规则，机器保持在当前状态。因此，下一个状态是 $S_1$。\n- 根据输入'0'的输出规则，输出为'1'。\n- 目前为止的输出：`011`\n- 新状态：$S_1$\n\n**步骤 4：处理第四个输入'1'。**\n- 当前状态：$S_1$\n- 输入：'1'\n- 根据输入'1'的转移规则，机器转换到另一个状态。因此，下一个状态是 $S_0$。\n- 根据从状态 $S_1$ 开始、输入为'1'的输出规则，输出为'1'。\n- 目前为止的输出：`0111`\n- 新状态：$S_0$\n\n**步骤 5：处理第五个输入'1'。**\n- 当前状态：$S_0$\n- 输入：'1'\n- 根据输入'1'的转移规则，机器转换到另一个状态。因此，下一个状态是 $S_1$。\n- 根据从状态 $S_0$ 开始、输入为'1'的输出规则，输出为'0'。\n- 最终输出序列：`01110`\n- 最终状态：$S_1$\n\n机器为输入 `10011` 生成的完整输出序列是 `01110`。这对应于选项D。", "answer": "$$\\boxed{D}$$", "id": "1968925"}, {"introduction": "除了分析给定的机器，数字设计师的一项关键技能是创建能解决特定问题的机器。本实践将挑战您设计一个用作序列检测器的米利机——这是通信协议和模式匹配等领域中的常见应用。您将学习如何根据输入历史来定义状态，并指定能够正确识别目标序列的转换规则。[@problem_id:1968914]", "problem": "一个数字控制器正在被设计用于监控一个串行二进制数据流。该控制器必须实现为一个 Mealy 型有限状态机。Mealy 机是一种有限状态机，其输出是当前状态和当前输入的函数。\n\n该状态机有一个二进制输入 `X` 和一个二进制输出 `Z`。该状态机的功能是检测一个特定的输入序列。输出 `Z` 必须为 '1' 且仅持续一个时钟周期，并与目标序列的最后一个输入同时出现。目标序列是三个连续的 '1' (`111`)。\n\n一个关键的设计约束是，已检测到的序列不能与新序列的开头重叠。例如，如果输入流是 `111111`，状态机应该检测到第一个 `111` 序列并输出一个 `1`，然后检测到第二个 `111` 序列并输出另一个 `1`。对于这个输入，输出序列将是 `001001`。当检测到 `111` 序列且输出 `Z` 置为 `1` 后，状态机必须完全重置其计数，并开始寻找一个全新的、完全独立的三个 `1` 的序列。\n\n完成此任务所需的最小 Mealy 机的状态可以根据接收到的连续 '1' 的历史来定义：\n- `S_0`: 初始或'重置'状态。没有看到连续的 '1'，或者序列刚刚被一个 '0' 输入打断。\n- `S_1`: 该状态表示上一个输入是潜在序列中的第一个 '1' (即，输入历史以 `...01` 结尾)。\n- `S_2`: 该状态表示最后两个输入是连续的 '1' (即，输入历史以 `...011` 结尾)。\n\n假定状态机当前处于状态 `S_2`，如果下一个输入 `X` 是 '1'，确定其下一个状态和相应的输出 `Z`。\n\nA) 下一状态：`S_0`，输出：`0`\n\nB) 下一状态：`S_1`，输出：`1`\n\nC) 下一状态：`S_2`，输出：`1`\n\nD) 下一状态：`S_0`，输出：`1`\n\nE) 下一状态：`S_2`，输出：`0`", "solution": "Mealy 机由一个下一状态函数 $\\delta(\\text{state},X)$ 和一个输出函数 $\\lambda(\\text{state},X)$ 定义，两者都取决于当前状态和当前输入 $X \\in \\{0,1\\}$。\n\n根据状态的定义：\n- $S_{2}$ 表示最后两个输入是连续的1。如果下一个输入是 $X=1$，那么最后三个输入就是 $111$。\n- 设计规范要求，在检测到 $111$ 时，输出 $Z$ 必须在第三个 $1$ 出现的那个时钟周期恰好为 $1$。在 Mealy 机中，这意味着 $\\lambda(S_{2},1)=1$。\n- 不重叠约束要求在检测后完全重置，因此下一个状态必须是 $S_{0}$，即 $\\delta(S_{2},1)=S_{0}$。\n\n因此，当处于状态 $S_{2}$ 且输入为 $X=1$ 时，状态转移到 $S_{0}$，同时输出 $Z=1$，这与选项 D 相符。\n\n这也重现了输入为 $111111$ 时的示例轨迹：从 $S_{0}$ 开始，第三个 $1$ 导致 $(S_{2},1)\\to(S_{0},Z=1)$，接下来的三个 $1$ 重复同样的过程，产生规范中指定的输出 $001001$。", "answer": "$$\\boxed{D}$$", "id": "1968914"}, {"introduction": "米利机是许多复杂数字系统中的基础构件。最后的这个实践将探讨其在密码学中的一个高级应用，其中一个米利机被用作一个简单流密码的模型。您将看到状态逻辑（通过线性反馈移位寄存器，即 $LFSR$ 实现）如何为加密生成伪随机序列，这展示了数字设计与信息安全之间的强大联系。[@problem_id:1968900]", "problem": "考虑一个设计为简单流密码的同步数字系统，该系统可以建模为一个米利机（Mealy machine）。该机器有一个单一的二进制输入 `P`，代表明文位，以及一个单一的二进制输出 `C`，代表密文位。\n\n该机器的内部状态由一个4位移位寄存器定义，状态向量表示为 `(S_3, S_2, S_1, S_0)`。机器的操作由一个系统时钟控制。在每个时钟沿，根据当前状态和输入会发生两个动作：\n\n1.  **输出生成**：生成密文输出位 `C`。它是当前输入位 `P` 与当前状态的最低有效位 `S_0` 进行异或（XOR）运算的结果。即 $C = P \\oplus S_0$。\n\n2.  **状态更新**：为下一个周期更新状态。寄存器执行一次右移，新的最高有效位 `S_3` 使用基于当前状态的反馈函数计算得出。该反馈由本原多项式 $G(x) = x^4 + x + 1$ 确定。此多项式规定了新的 `S_3` 是当前 `S_1` 和 `S_0` 的异或。完整的状态转换定义如下，其中带撇的变量表示下一状态的值：\n    - $S'_3 = S_1 \\oplus S_0$\n    - $S'_2 = S_3$\n    - $S'_1 = S_2$\n    - $S'_0 = S_1$\n\n该机器的初始状态为 `(S_3, S_2, S_1, S_0) = (1, 0, 0, 0)`。一个输入明文流 `P = 11010` 被顺序应用，最左边的位在第一个时钟周期被首先处理。\n\n在处理完输入流的第5个也是最后一个位之后，机器的4位状态向量 `(S_3, S_2, S_1, S_0)` 是什么？请以行矩阵的形式提供你的答案。", "solution": "我们将该机器建模为一个状态向量为 $(S_{3},S_{2},S_{1},S_{0})$ 的米利机。在每个时钟周期，输出位为 $C=P \\oplus S_{0}$，这不影响状态，而下一状态仅由当前状态通过给定的多项式 $G(x)=x^{4}+x+1$ 的反馈决定。状态更新方程为：\n$$\nS_{3}'=S_{1}\\oplus S_{0},\\quad S_{2}'=S_{3},\\quad S_{1}'=S_{2},\\quad S_{0}'=S_{1}.\n$$\n该机器的初始状态为\n$$\n(S_{3},S_{2},S_{1},S_{0})=(1,0,0,0).\n$$\n我们对状态更新进行五个时钟周期（每个输入位一个周期）的迭代。异或运算即模2加法。\n\n周期1（从 $(1,0,0,0)$ 开始）：\n$$\nS_{3}'=0\\oplus 0=0,\\quad S_{2}'=1,\\quad S_{1}'=0,\\quad S_{0}'=0 \\;\\Rightarrow\\; (0,1,0,0).\n$$\n\n周期2（从 $(0,1,0,0)$ 开始）：\n$$\nS_{3}'=0\\oplus 0=0,\\quad S_{2}'=0,\\quad S_{1}'=1,\\quad S_{0}'=0 \\;\\Rightarrow\\; (0,0,1,0).\n$$\n\n周期3（从 $(0,0,1,0)$ 开始）：\n$$\nS_{3}'=1\\oplus 0=1,\\quad S_{2}'=0,\\quad S_{1}'=0,\\quad S_{0}'=1 \\;\\Rightarrow\\; (1,0,0,1).\n$$\n\n周期4（从 $(1,0,0,1)$ 开始）：\n$$\nS_{3}'=0\\oplus 1=1,\\quad S_{2}'=1,\\quad S_{1}'=0,\\quad S_{0}'=0 \\;\\Rightarrow\\; (1,1,0,0).\n$$\n\n周期5（从 $(1,1,0,0)$ 开始）：\n$$\nS_{3}'=0\\oplus 0=0,\\quad S_{2}'=1,\\quad S_{1}'=1,\\quad S_{0}'=0 \\;\\Rightarrow\\; (0,1,1,0).\n$$\n\n因此，在处理完第五个输入位后，状态向量为 $(0,1,1,0)$。", "answer": "$$\\boxed{\\begin{pmatrix}0 & 1 & 1 & 0\\end{pmatrix}}$$", "id": "1968900"}]}