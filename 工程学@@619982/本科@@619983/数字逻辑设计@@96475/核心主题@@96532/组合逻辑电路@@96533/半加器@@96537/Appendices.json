{"hands_on_practices": [{"introduction": "理论知识的魅力在于其应用。第一个练习将挑战你使用数字逻辑中的“通用积木”——与非门 (NAND gate) ——来从零开始构建一个半加器。这个练习不仅能巩固你对布尔代数和德摩根定律的理解，还能让你体会到仅用一种基础逻辑门如何搭建出更复杂功能电路的工程智慧。[@problem_id:1940533]", "problem": "在数字逻辑设计中，半加器是一种基本的组合电路，用于执行两个单个二进制位的算术加法。该电路有两个输入 (我们称之为 $A$ 和 $B$)，并产生两个输出：一个和位 $S$ 和一个进位位 $C$。这些输出的逻辑运算由以下布尔表达式定义：\n\n$S = A \\oplus B$ (即 $A$ 和 $B$ 的异或)\n$C = A \\cdot B$ (即 $A$ 和 $B$ 的逻辑与)\n\n一位逻辑设计师的任务是在一个严格的设计约束下构建这个半加器电路：实现必须只使用双输入与非门。两个输入 $X$ 和 $Y$ 的与非运算由表达式 $(X \\cdot Y)'$ 给出。\n\n请确定要构建一个能从输入 $A$ 和 $B$ 正确生成和位 ($S$) 与进位位 ($C$) 两个输出的完整半加器，所需双输入与非门的绝对最小数量。", "solution": "我们必须仅用双输入与非门来实现一个半加器。输出由 $S = A \\oplus B$ 和 $C = A \\cdot B$ 定义，而双输入与非门是 $(X \\cdot Y)'$。\n\n使用标准的4个与非门实现异或门来构造 $S$，并进行排列，以便我们可以重用一个内部节点，再用一个与非门来获得 $C$：\n1) 计算共享的中间结果\n$$\nN_{1} = \\text{NAND}(A,B) = (A \\cdot B)'\n$$\n2) 形成接下来的两个中间结果\n$$\nN_{2} = \\text{NAND}(A,N_{1}) = (A \\cdot N_{1})' = \\bar{A} + N_{1}' = \\bar{A} + A B\n$$\n$$\nN_{3} = \\text{NAND}(B,N_{1}) = (B \\cdot N_{1})' = \\bar{B} + N_{1}' = \\bar{B} + A B\n$$\n在每种情况下，我们都使用了德摩根定律 $(X \\cdot Y)' = \\bar{X} + \\bar{Y}$ 和 $N_{1}' = ((A \\cdot B)')' = A \\cdot B$。\n3) 生成和\n$$\nS = \\text{NAND}(N_{2},N_{3}) = (N_{2} \\cdot N_{3})'\n$$\n验证这等于 $A \\oplus B$：\n$$\nN_{2} \\cdot N_{3} = (\\bar{A} + A B)(\\bar{B} + A B)\n= \\bar{A}\\bar{B} + \\bar{A}AB + AB\\bar{B} + ABAB\n= \\bar{A}\\bar{B} + 0 + 0 + AB\n= \\bar{A}\\bar{B} + AB\n$$\n所以\n$$\nS = (\\bar{A}\\bar{B} + AB)' = (\\bar{A}\\bar{B})' \\cdot (AB)' = (A + B) \\cdot (\\bar{A} + \\bar{B}) = \\bar{A}B + A\\bar{B}\n$$\n这确实是 $A \\oplus B$。这使用了4个与非门。\n\n通过重用 $N_{1} = (A \\cdot B)'$ 并用一个额外的与非门 (接线为反相器) 将其反相来获得进位：\n$$\nC = \\text{NAND}(N_{1},N_{1}) = (N_{1} \\cdot N_{1})' = N_{1}' = ((A \\cdot B)')' = A \\cdot B\n$$\n这增加了一个与非门，总共需要5个与非门。\n\n为了论证其最小性：\n- 一个标准结论是，仅用双输入与非门实现双输入异或门至少需要4个与非门。因此，任何正确的半加器都必须至少使用4个与非门来实现 $S = A \\oplus B$。\n- 进位 $C = A \\cdot B$ 无法从这4个门直接以正确的极性获得；然而，$(A \\cdot B)'$ 作为 $N_{1}$ 自然地出现了。从 $(A \\cdot B)'$ 生成 $C$ 至少需要一次额外的反相，在仅使用与非门的实现中，这恰好需要再多一个双输入与非门 (输入端连接在一起)。因此，至少需要 $4 + 1 = 5$ 个与非门。\n- 上述的明确构造实现了5个门，所以5是绝对最小值。\n\n因此，实现一个半加器所需的最小双输入与非门数量是5个。", "answer": "$$\\boxed{5}$$", "id": "1940533"}, {"introduction": "在实际的工程场景中，我们常常需要验证未知或未标记组件的功能。这个思想实验模拟了一个典型的“黑盒测试”情境：你只有一个已知是半加器的芯片，如何仅通过一次输入测试，就明确区分出哪个输出引脚是和 (Sum)，哪个是进位 (Carry)？这个练习旨在锻炼你的逻辑推理和高效测试策略设计能力，让你学会通过分析电路的真值表来找到其独特的行为特征。[@problem_id:1940512]", "problem": "一个未知的集成电路具有两个输入引脚 (标记为 A 和 B) 和两个输出引脚 (标记为 O1 和 O2)，已知它是一个半加器。半加器是一种数字逻辑电路，用于计算两个单比特输入的二进制和。其结果由两个输出位表示：一个和位 (S) 和一个进位输出位 (C)。您的任务是通过对输入 A 和 B 应用*单一*、固定的二进制值对并观察输出来确定哪个输出引脚 (O1 或 O2) 对应和位，哪个对应进位输出位。\n\n下列哪种输入配置 (如果有的话) 可以实现这种无歧义的确定？\n\nA. A=0, B=0\n\nB. A=1, B=1\n\nC. A=0, B=1\n\nD. 配置 (A=1, B=1) 和配置 (A=0, B=1) 都可行。\n\nE. 使用单一、固定的输入对无法做出确定。", "solution": "半加器的输出由以下逻辑方程给出\n$$S = A \\oplus B,$$\n$$C = A \\cdot B,$$\n其中 $S$ 是和，$C$ 是进位输出。要使用单一输入对来确定哪个输出引脚对应 $S$，哪个对应 $C$，我们需要一个使 $S$ 和 $C$ 取值不同的输入；这样，等于已知 $S$ 值的观测输出就确定了和引脚，等于已知 $C$ 值的观测输出就确定了进位引脚。\n\n评估所列的输入配置：\n\n- 对于 $A=0$, $B=0$：\n$$S = 0 \\oplus 0 = 0,\\quad C = 0 \\cdot 0 = 0.$$\n两个输出均为 $0$，因此观察到 $(O1,O2)=(0,0)$ 无法区分哪个是 $S$，哪个是 $C$。此方法不可行。\n\n- 对于 $A=1$, $B=1$：\n$$S = 1 \\oplus 1 = 0,\\quad C = 1 \\cdot 1 = 1.$$\n输出是不同的：一个引脚的读数必须为 $0$ (和)，另一个为 $1$ (进位)。观察哪个引脚是 $0$，哪个是 $1$，就可以无歧义地标记引脚。此方法可行。\n\n- 对于 $A=0$, $B=1$：\n$$S = 0 \\oplus 1 = 1,\\quad C = 0 \\cdot 1 = 0.$$\n输出同样是不同的：一个引脚读数为 $1$ (和)，另一个为 $0$ (进位)。观察哪个引脚是 $1$，哪个是 $0$，就可以无歧义地标记引脚。此方法可行。\n\n因此，配置 $A=1,B=1$ 和 $A=0,B=1$ 都允许使用单一、固定的输入对进行无歧义的确定。\n\n因此，正确选项是 D。", "answer": "$$\\boxed{D}$$", "id": "1940512"}, {"introduction": "现代数字电路设计已从手动连接逻辑门转向使用硬件描述语言 (HDL) 进行高级抽象。本练习将带你进入 Verilog 的世界，要求你用一种简洁而高效的行为级建模方式——三元条件运算符——来实现半加器。完成这个任务，你将学会如何将逻辑功能精确地转换为代码，并理解这种抽象描述如何为后续的自动化综合工具奠定基础。[@problem_id:1940514]", "problem": "一位嵌入式系统工程师正在为数字信号处理器 (DSP) 设计一个高度优化的核心。所需的一个基本构建块是半加器。为了满足严格的综合和时序约束，强制要求使用一种特定的行为建模风格。\n\n半加器有两个单比特输入 `A` 和 `B`，并产生一个两位输出向量 `Y`。设计规范规定如下：\n1.  输出 `Y` 必须是一个2位向量，其中最高有效位 (MSB) `Y[1]` 代表进位输出，最低有效位 (LSB) `Y[0]` 代表和。\n2.  计算 `Y` 的全部逻辑必须在单个连续赋值语句中实现，该语句利用 Verilog 的三元条件运算符 (`? :`)。\n\n下列哪个 Verilog 模块根据*所有*设计规范正确地实现了半加器？\n\nA.\n```verilog\nmodule half_adder(input A, input B, output [1:0] Y);\n  assign Y = (A == 1'b1) ? {B, ~B} : {1'b0, B};\nendmodule\n```\n\nB.\n```verilog\nmodule half_adder(input A, input B, output [1:0] Y);\n  assign Y = (A == 1'b1) ? {1'b0, B} : {B, ~B};\nendmodule\n```\n\nC.\n```verilog\nmodule half_adder(input A, input B, output [1:0] Y);\n  assign Y = {A  B, A ^ B};\nendmodule\n```\n\nD.\n```verilog\nmodule half_adder(input A, input B, output [1:0] Y);\n  assign Y = (A == 1'b1) ? {~B, B} : {B, 1'b0};\nendmodule\n```\n\nE.\n```verilog\nmodule half_adder(input A, input B, output [1:0] Y);\n  assign Y = A + B;\nendmodule\n```", "solution": "一个具有单比特输入 $A$ 和 $B$ 的半加器必须产生一个两位输出向量 $Y=\\{Y[1],Y[0]\\}$，其中进位输出为 $Y[1]$，和为 $Y[0]$。其规范的布尔表达式为：\n$$\nY[1]=C=A \\land B,\\quad Y[0]=S=A \\oplus B\n$$\n所以\n$$\nY=\\{A \\land B, A \\oplus B\\}\n$$\n该规范还额外要求，全部逻辑必须使用 Verilog 三元运算符在单个连续赋值中实现。\n\n根据功能行为和建模风格约束来评估每个选项：\n\n- 选项 C: \n$$\nY=\\{A \\land B, A \\oplus B\\}\n$$\n这个在功能上是正确的，但它没有使用三元运算符，违反了强制的建模风格。\n\n- 选项 E:\n$$\nY=A+B\n$$\n对于单比特的 $A$ 和 $B$，两位和等于 $\\{A \\land B, A \\oplus B\\}$，因此它在功能上是正确的。然而，它也没有使用三元运算符，违反了建模风格。\n\n- 选项 B 和 D 在功能上是不正确的。例如，当 $A=1$ 且 $B=1$ 时，期望的输出是 $\\{1,0\\}$，但选项 B 产生 $\\{0,1\\}$，选项 D 也产生 $\\{0,1\\}$，两者都是错误的。\n\n- 选项 A:\n$$\nY=(A==1)\\ ?\\ \\{B, \\neg B\\}\\ :\\ \\{0, B\\}\n$$\n通过以 $A$ 为条件，可以证明其与规范形式等价：\n1) 如果 $A=1$，那么期望的输出是 $C=A \\land B=B$ 和 $S=A \\oplus B=1 \\oplus B=\\neg B$，所以 $Y=\\{B, \\neg B\\}$。\n2) 如果 $A=0$，那么期望的输出是 $C=A \\land B=0$ 和 $S=A \\oplus B=0 \\oplus B=B$，所以 $Y=\\{0, B\\}$。\n因此，选项 A 使用带有三元运算符的单个连续赋值，精确地实现了 $Y=\\{A \\land B, A \\oplus B\\}$，满足了所有规范。", "answer": "$$\\boxed{A}$$", "id": "1940514"}]}