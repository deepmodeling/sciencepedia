{"hands_on_practices": [{"introduction": "掌握先行进位加法器的第一步，是理解其核心构件——“传递”信号（$P_i$）和“生成”信号（$G_i$）。这个练习将通过一个具体的计算任务，帮助你牢固掌握如何从两个输入数中派生出这些关键信号。这是构建所有高速进位逻辑的基础 [@problem_id:1918440]。", "problem": "在设计快速二进制加法器（例如超前进位加法器）的背景下，会为每个比特位 $i$ 计算两个关键的中间信号。它们是**传播信号** ($P_i$) 和**生成信号** ($G_i$)。对于两个n位二进制数 $A = A_{n-1}...A_1A_0$ 和 $B = B_{n-1}...B_1B_0$ 的加法，这些信号由对应的输入位 $A_i$ 和 $B_i$ 的以下逻辑运算定义：\n\n-   传播信号由异或运算给出：$P_i = A_i \\oplus B_i$。\n-   生成信号由逻辑与运算给出：$G_i = A_i \\cdot B_i$。\n\n考虑以下两个4位无符号二进制数的加法：\n$A = 1011_2$\n$B = 0110_2$\n\n首先，确定4位传播字 $P = P_3P_2P_1P_0$ 和4位生成字 $G = G_3G_2G_1G_0$。在这些字中，索引为3的位是最高有效位（MSB），索引为0的位是最低有效位（LSB）。\n\n接下来，将 $P$ 和 $G$ 视为无符号4位二进制数，并将它们转换为等效的十进制整数，我们分别称之为 $P_{dec}$ 和 $G_{dec}$。\n\n提供最终得到的两个十进制整数。", "solution": "给定4位输入 $A=1011_{2}$ 和 $B=0110_{2}$，其比特索引从3（MSB）到0（LSB），因此\n$$A_{3}=1,\\ A_{2}=0,\\ A_{1}=1,\\ A_{0}=1,\\quad B_{3}=0,\\ B_{2}=1,\\ B_{1}=1,\\ B_{0}=0.$$\n根据定义，对于每个比特位 $i$，\n$$P_{i}=A_{i}\\oplus B_{i},\\quad G_{i}=A_{i}\\cdot B_{i}.$$\n计算每一对：\n- 对于 $i=0$：$P_{0}=1\\oplus 0=1$，$G_{0}=1\\cdot 0=0$。\n- 对于 $i=1$：$P_{1}=1\\oplus 1=0$，$G_{1}=1\\cdot 1=1$。\n- 对于 $i=2$：$P_{2}=0\\oplus 1=1$，$G_{2}=0\\cdot 1=0$。\n- 对于 $i=3$：$P_{3}=1\\oplus 0=1$，$G_{3}=1\\cdot 0=0$。\n因此，这两个4位字是\n$$P=P_{3}P_{2}P_{1}P_{0}=1101_{2},\\quad G=G_{3}G_{2}G_{1}G_{0}=0010_{2}.$$\n将它们视为无符号4位二进制数，其十进制值为\n$$P_{\\text{dec}}=1\\cdot 2^{3}+1\\cdot 2^{2}+0\\cdot 2^{1}+1\\cdot 2^{0}=8+4+0+1=13,$$\n$$G_{\\text{dec}}=0\\cdot 2^{3}+0\\cdot 2^{2}+1\\cdot 2^{1}+0\\cdot 2^{0}=0+0+2+0=2.$$\n因此，得到的十进制整数为 $P_{\\text{dec}}=13$ 和 $G_{\\text{dec}}=2$。", "answer": "$$\\boxed{\\begin{pmatrix}13 & 2\\end{pmatrix}}$$", "id": "1918440"}, {"introduction": "学习了如何计算 $P$ 和 $G$ 信号后，一个自然而然的问题是：为什么要使用这种方法？本练习将揭示先行进位逻辑的关键优势——速度。通过分析 4 位先行进位生成器的传播延迟，你将亲眼见证，进位信号都可以在几乎固定的时间内产生，这突破了传统波纹进位加法器中延迟随位数线性增长的瓶颈 [@problem_id:1918438]。", "problem": "在一个定制的4位微处理器核的设计中，一个关键部件是超前进位生成器（CLG）。该电路用于快速计算算术运算所需的进位信号。CLG接收进位传递信号（$P_0, P_1, P_2, P_3$）、进位生成信号（$G_0, G_1, G_2, G_3$）和初始输入进位信号（$C_0$）作为输入。\n\n输出进位信号（$C_1, C_2, C_3, C_4$）的逻辑是使用以下标准积之和表达式直接根据这些输入实现的：\n$$C_1 = G_0 + P_0 C_0$$\n$$C_2 = G_1 + P_1 G_0 + P_1 P_0 C_0$$\n$$C_3 = G_2 + P_2 G_1 + P_2 P_1 G_0 + P_2 P_1 P_0 C_0$$\n$$C_4 = G_3 + P_3 G_2 + P_3 P_2 G_1 + P_3 P_2 P_1 G_0 + P_3 P_2 P_1 P_0 C_0$$\n\n假设该电路由基本的与门和或门构成。任何单个逻辑门（无论其输入数量如何）的传播延迟是一个恒定值 $\\tau$。此外，假设所有CLG的输入信号（$P_0, P_1, P_2, P_3$、$G_0, G_1, G_2, G_3$ 和 $C_0$）在时间 $t=0$ 时是稳定且可用的。\n\n确定CLG为最终输出进位信号 $C_4$ 产生稳定输出所需的总传播延迟。用含 $\\tau$ 的闭式解析表达式表示你的答案。", "solution": "所有输入 $P_{i}$、$G_{i}$ 和 $C_{0}$ 在 $t=0$ 时是稳定的。进位 $C_{4}$ 是通过一个两级积之和电路实现的：\n$$C_{4} = G_{3} + (P_{3}G_{2}) + (P_{3}P_{2}G_{1}) + (P_{3}P_{2}P_{1}G_{0}) + (P_{3}P_{2}P_{1}P_{0}C_{0}).$$\n假设任意扇入，每个独立门产生延迟 $\\tau$，则每个乘积项由一个与门形成（除了作为直接输入的 $G_{3}$），然后所有项由一个或门组合。\n\n定义中间乘积项：\n- $T_{0} = G_{3}$，直接生成，门延迟为 $0$，\n- $T_{1} = P_{3}G_{2}$，由一个与门在时间 $\\tau$ 内生成，\n- $T_{2} = P_{3}P_{2}G_{1}$，由一个与门在时间 $\\tau$ 内生成，\n- $T_{3} = P_{3}P_{2}P_{1}G_{0}$，由一个与门在时间 $\\tau$ 内生成，\n- $T_{4} = P_{3}P_{2}P_{1}P_{0}C_{0}$，由一个与门在时间 $\\tau$ 内生成。\n\n这些项随后由一个或门组合：\n$$C_{4} = T_{0} + T_{1} + T_{2} + T_{3} + T_{4}.$$\n\n从输入到 $C_{4}$ 的传播时间：\n- 经过 $T_{0}$ 的路径：从 $G_{3}$ 只通过或门，延迟为 $\\tau$。\n- 经过 $T_{1}$、$T_{2}$、$T_{3}$、$T_{4}$ 的路径：一个与门（$\\tau$）后接一个或门（$\\tau$），总延迟为 $2\\tau$。\n\n因此，为使 $C_{4}$ 达到稳定状态，其最坏情况（也就是必需的）总传播延迟为\n$$2\\tau.$$", "answer": "$$\\boxed{2\\tau}$$", "id": "1918438"}, {"introduction": "在数字逻辑设计中，同一个功能常常有多种逻辑等效的实现方式。这个练习将挑战你像设计师一样思考，比较“传递”信号 ($P_i$) 的两种不同定义。通过分析这个看似不同的设计选择，你将更深刻地理解其背后的布尔逻辑，并明白为何某些设计在表面上不同，却能得到完全相同的正确结果 [@problem_id:1918445]。", "problem": "在标准的n位先行进位加法器（CLA）设计中，每个位片 $i$ 根据其输入 $A_i$ 和 $B_i$ 计算一个“生成”信号 $G_i$ 和一个“传播”信号 $P_i$。这些信号随后被先行进位生成器用来计算下一级的进位输入 $C_{i+1}$。标准定义如下：\n- 生成 (Generate): $G_i = A_i \\cdot B_i$\n- 传播 (Propagate): $P_i = A_i \\oplus B_i$\n\n然后使用递归公式计算进位输出：$C_{i+1} = G_i + P_i \\cdot C_i$，其中‘+’表示逻辑或（OR）运算，‘$\\cdot$’表示逻辑与（AND）运算。\n\n假设一位数字逻辑设计师为传播信号提出了一个替代定义，使用或门（OR gate）代替异或门（XOR gate），同时保持生成信号的定义不变：\n- 生成 (Generate): $G_i = A_i \\cdot B_i$\n- 替代传播 (Alternative Propagate): $P'_i = A_i + B_i$\n\n下列哪个陈述准确地描述了在先行进位逻辑中使用这个替代传播信号 $P'_i$ 的后果？\n\nA. 进位逻辑必须完全重新设计。使用 $P'_i = A_i + B_i$ 会为 $C_{i+1}$ 产生不正确的结果，因为 $P'_i$ 并不代表传播的互斥条件。\n\nB. 进位逻辑保持不变，$C_{i+1} = G_i + P'_i \\cdot C_i$。使用 $P'_i$ 是有效的，因为在 $P_i$ 和 $P'_i$ 产生不同输出的唯一情况（当 $A_i=1$ 且 $B_i=1$ 时），生成信号 $G_i$ 变为1，这使得 $P'_i \\cdot C_i$ 项与最终的或运算无关。\n\nC. 进位逻辑保持不变（$C_{i+1} = G_i + P'_i \\cdot C_i$），但这仅仅是因为和位（sum bit）计算 $S_i = A_i \\oplus B_i \\oplus C_i$ 隐式地纠正了使用 $P'_i$ 引入的错误。\n\nD. 为了使替代传播信号 $P'_i$ 有效，生成信号也必须修改为 $G'_i = A_i \\oplus B_i$，以维持生成和传播条件之间的互斥性。\n\nE. 替代传播信号 $P'_i$ 是有效的。但是，进位逻辑必须简化为 $C_{i+1} = P'_i \\cdot C_i$，因为 $G_i$ 项现在是冗余的，并完全被 $P'_i$ 中的条件所覆盖。", "solution": "我们从使用原始传播信号的标准进位方程开始：\n$$\nC_{i+1} = G_i + P_i \\cdot C_i, \\quad G_i = A_i \\cdot B_i,\\quad P_i = A_i \\oplus B_i.\n$$\n使用所提出的替代传播信号 $P'_i = A_i + B_i$，进位表达式变为\n$$\nC'_{i+1} = G_i + P'_i \\cdot C_i = A_i B_i + (A_i + B_i) C_i.\n$$\n我们使用布尔代数来证明 $C'_{i+1}$ 与标准形式相同。首先展开和因式分解：\n$$\nC'_{i+1} = A_i B_i + A_i C_i + B_i C_i = A_i B_i + C_i (A_i + B_i).\n$$\n使用恒等式 $A_i + B_i = (A_i \\oplus B_i) + A_i B_i$ 进行代入：\n$$\nC'_{i+1} = A_i B_i + C_i \\big[(A_i \\oplus B_i) + A_i B_i\\big] = A_i B_i + C_i (A_i \\oplus B_i) + C_i A_i B_i.\n$$\n由于 $A_i B_i + C_i A_i B_i = A_i B_i(1 + C_i) = A_i B_i$，我们得到\n$$\nC'_{i+1} = A_i B_i + C_i (A_i \\oplus B_i),\n$$\n这正是标准进位表达式 $C_{i+1} = G_i + P_i \\cdot C_i$。因此，使用 $P'_i$ 不会改变进位递归关系。\n\n为进一步确认，考虑 $(A_i,B_i)$ 的所有输入模式：\n- 如果 $(A_i,B_i)=(0,0)$，则 $G_i=0$, $P_i=0$, $P'_i=0$，所以 $C_{i+1}=0$ 且 $C'_{i+1}=0$。\n- 如果 $(A_i,B_i)=(0,1)$ 或 $(1,0)$，则 $G_i=0$, $P_i=1$, $P'_i=1$，所以 $C_{i+1}=C_i$ 且 $C'_{i+1}=C_i$。\n- 如果 $(A_i,B_i)=(1,1)$，则 $G_i=1$, $P_i=0$, $P'_i=1$，所以真实进位输出为 $1$。使用 $P'_i$ 的表达式得到 $C'_{i+1}=1 + 1 \\cdot C_i = 1$，结果一致。在这个 $P_i \\neq P'_i$ 的唯一情况下，$G_i=1$ 使得 $P'_i \\cdot C_i$ 项变得无关紧要。\n\n因此，使用 $P'_i = A_i + B_i$ 会使先行进位逻辑保持不变且正确，因为 $P_i$ 和 $P'_i$ 之间的差异仅在 $G_i=1$ 已经保证了进位生成时发生。这与陈述B完全一致，而基于上述原因，陈述A，C，D和E都是错误的。", "answer": "$$\\boxed{B}$$", "id": "1918445"}]}