{"hands_on_practices": [{"introduction": "我们的第一个练习旨在澄清组合逻辑和时序逻辑之间的一个核心区别。一个电路的分类取决于其输出与输入的关系，而不是我们用来解决问题的抽象数学算法。这个练习 [@problem_id:1959207] 探讨了一个看似需要逐步计算（如长除法）的问题，但当所有输入同时可用时，其最直接的实现方式其实是纯粹的组合逻辑。通过这个实践，您将学会如何根据输入输出的瞬时依赖关系来准确判断电路的基本类型。", "problem": "需要设计一个数字逻辑电路，用于检查一个4位无符号二进制数的特定属性。该数由输入 $B_3 B_2 B_1 B_0$ 表示，其中 $B_3$ 是最高有效位。该电路有一个单一输出 $Y$，如果输入数字的十进制等效值能被3整除，则输出逻辑'1'；否则输出逻辑'0'。假设所有4个输入位同时（并行）可用。\n\n基于逻辑电路类型的基本定义，考虑最直接的实现方式，以下哪个陈述是对该电路最准确的描述？\n\nA. 该电路必须是时序电路，因为检查可除性是一个算术过程，其本质上涉及一系列步骤，类似于长除法，需要保持状态。\n\nB. 该电路最好归类为组合电路，因为对于任何给定的4位输入模式，输出是固定的，并且仅取决于输入位的当前值，而不取决于任何过去的输入或状态。\n\nC. 该电路可以实现为组合电路或时序电路，但时序实现会更高效，因为它可以逐位处理，从而减少所需的逻辑门数量。\n\nD. 该电路必须是时序电路，因为判断一个二进制数是否能被3整除需要知道前面比特位的余数，这必须存储在像触发器这样的存储元件中。\n\nE. 该电路最好归类为组合电路，但前提是允许输出有传播延迟。如果要求瞬时输出，则需要时序电路。", "solution": "将由并行输入表示的4位无符号整数定义为 $N = B_{3}2^{3} + B_{2}2^{2} + B_{1}2^{1} + B_{0}2^{0}$，其中每个 $B_{i} \\in \\{0,1\\}$ 且 $B_{3}$ 是最高有效位。所需的输出是布尔函数 $Y$，由下式给出\n$$\nY = \\begin{cases}\n1, & \\text{if } 3 \\text{ divides } N,\\\\\n0, & \\text{otherwise}.\n\\end{cases}\n$$\n根据数字逻辑的基本定义，组合电路的输出仅是当前输入的函数，不依赖于过去的输入或内部存储的状态；而时序电路的输出则依赖于当前输入以及编码了过去输入的内部状态（如锁存器或触发器等存储元件）。\n\n由于所有四个输入位是同时（并行）提供的，因此 $N$ 在当前时刻完全由 $(B_{3},B_{2},B_{1},B_{0})$ 决定。因此 $Y$ 是一个函数 $f:\\{0,1\\}^{4} \\to \\{0,1\\}$，可以实现为一个纯粹的组合网络。通过列举出0到15范围内3的倍数的4位二进制值，可以得到一个明确的构造：\n$$\n\\{0,3,6,9,12,15\\}。\n$$\n在二进制中，这些值对应于输入模式 $(B_{3}B_{2}B_{1}B_{0})$ 等于 $0000, 0011, 0110, 1001, 1100, 1111$。使用规范的最小项之和形式（其中 $+$ 表示或，并列表示与，$\\overline{\\cdot}$ 表示非），纯组合电路的实现为\n$$\nY = \\overline{B_{3}}\\overline{B_{2}}\\overline{B_{1}}\\overline{B_{0}}\n+ \\overline{B_{3}}\\overline{B_{2}}B_{1}B_{0}\n+ \\overline{B_{3}}B_{2}B_{1}\\overline{B_{0}}\n+ B_{3}\\overline{B_{2}}\\overline{B_{1}}B_{0}\n+ B_{3}B_{2}\\overline{B_{1}}\\overline{B_{0}}\n+ B_{3}B_{2}B_{1}B_{0}.\n$$\n这个表达式仅依赖于 $B_{3},B_{2},B_{1},B_{0}$ 的当前值；它不使用任何存储器，也没有过去输入的概念，因此是组合电路。等价地，使用模算术来进一步证明其组合实现的可行性，注意到\n$$\n2^{0} \\equiv 1 \\pmod{3},\\quad 2^{1} \\equiv 2 \\pmod{3},\\quad 2^{2} \\equiv 1 \\pmod{3},\\quad 2^{3} \\equiv 2 \\pmod{3},\n$$\n所以\n$$\nN \\bmod 3 \\equiv B_{0} + 2B_{1} + B_{2} + 2B_{3} \\pmod{3},\n$$\n其中等式右边是当前输入位的算术和。因此，谓词“$N \\bmod 3 = 0$”可以通过一个由加法器和简单逻辑门构成的纯组合网络来检验，这再次证实了不需要状态。\n\n评估各个选项：\n- A是错误的：尽管长除法是一个时序算法，但当输入是并行可用时，硬件不必模仿该过程；如上所示，存在一个直接的组合函数。\n- B是正确的：对于任何给定的4位输入，输出是固定的，并且仅依赖于那些当前位；真值表或规范的积之和形式给出了一个组合实现。\n- C在这种情况下具有误导性：虽然可以设计一个时序机来串行读取位并跟踪模$3$的余数，但对于并行输入而言，这并非最直接的分类，并且它会引入状态、时钟和延迟；对于4位并行输入，最自然和最直接的实现是组合电路。\n- D对于并行输入是错误的：“前面比特位的余数”这一论点适用于串行处理；当所有位同时存在时，不需要存储器。\n- E是错误的：所有实际电路（组合电路和时序电路）都有传播延迟；组合电路的分类并不要求零延迟，时序电路同样不能提供瞬时输出。\n\n因此，最准确的描述是，该电路最好归类为组合电路，因为其输出仅取决于当前的输入位。", "answer": "$$\\boxed{B}$$", "id": "1959207"}, {"introduction": "与上一个所有输入并行可用的练习不同，这个场景 [@problem_id:1959211] 引入了时间维度，这是数字系统中一个常见的情况。当数据以串行方式一位一位地到达时，电路必须“记住”之前的信息才能做出正确的判断。这个练习完美地展示了为什么时序逻辑及其核心组件——存储元件——是处理顺序数据的基石，并强调了“状态”在数字设计中的关键作用。", "problem": "一个数字系统需要监视一条串行数据线 `X`，数据位在该线上逐个到达，并与时钟脉冲同步。该系统必须设计一个电路，该电路产生一个输出 `Z`。当在输入数据流中检测到特定的3比特序列'101'时，输出 `Z` 会立即变为逻辑'1'，并仅持续一个时钟周期。例如，如果输入流是 `...011010...`，那么输出 `Z` 应该是 `...000010...`。\n\n对于完成此任务所需的逻辑电路类型，下列哪个陈述提供了最准确的分类和理由？\n\nA. 电路必须是组合电路，因为输出 `Z` 是最近三个输入比特的布尔函数。这三个比特可以被视为逻辑门的3比特并行输入。\n\nB. 电路必须是时序电路，因为它需要至少记住输入流中的前两个比特，以判断当前比特是否完成了目标序列。这需要状态保持元件。\n\nC. 电路可以是组合电路也可以是时序电路。组合电路方法更简单，但时序电路方法可能更节能。\n\nD. 电路必须是时序电路，因为根据定义，任何使用时钟信号的电路都是时序电路。\n\nE. 电路必须是组合电路，因为它不需要产生一个输出序列，只需要在找到该模式时产生一个单个的'1'。", "solution": "设在时钟时间索引 $n$ 时的串行输入为 $X_{n} \\in \\{0,1\\}$，输出为 $Z_{n} \\in \\{0,1\\}$。“在检测到3比特序列101时立即将 $Z$ 置为有效，并仅持续一个时钟周期”这一规范意味着\n$$\nZ_{n} = 1 \\;\\;\\Longleftrightarrow\\;\\; (X_{n-2},\\,X_{n-1},\\,X_{n}) = (1,\\,0,\\,1),\n$$\n否则 $Z_{n}=0$。等价地，作为布尔表达式，\n$$\nZ_{n} = X_{n-2}\\,\\overline{X_{n-1}}\\,X_{n}.\n$$\n\n为了在时间 $n$ 计算 $Z_{n}$，电路必须能够访问到来自之前时钟周期的值 $X_{n-1}$ 和 $X_{n-2}$。纯组合电路的输出仅取决于其当前输入；它没有机制来保留过去的输入。因此，除非之前的比特可以作为同时的输入被提供，否则函数 $Z_{n}$ 无法仅由组合逻辑实现。\n\n要在时间 $n$ 提供 $X_{n-1}$ 和 $X_{n-2}$，就需要存储过去的输入值，这正是状态保持元件（例如，移位寄存器中的触发器）所提供的功能。此类存储元件的存在和使用定义了时序电路。因此，正确的分类是该电路必须是时序电路，因为它必须记住至少前两个比特，以判断当前比特是否完成了模式$101$。\n\n评估各个选项：\n- A 是不正确的，因为将“最近的三个比特”视为并行输入已经假定了需要存储（时序元件）来捕获过去的比特；仅靠组合逻辑无法从单个串行流中创建这些输入。\n- B 是正确的：电路必须是时序电路，其理由——需要记住至少前两个比特——是准确的。\n- C 是不正确的，因为对于串行输入，如果没有额外的存储器，纯组合的实现是不可能的，而添加存储器就使其成为时序电路。\n- D 的理由是不正确的：仅仅使用时钟本身并不会使电路成为时序电路；对存储（状态）的需求才会。\n- E 是不正确的：即使期望的输出是一个单周期脉冲，在串行流上生成它也需要存储过去的比特，因此需要时序逻辑。\n\n因此，最准确的分类和理由在选项B中给出。", "answer": "$$\\boxed{B}$$", "id": "1959211"}, {"introduction": "掌握了组合电路和时序电路的定义后，我们来探讨一个更高级的工程问题：对于一个给定的复杂功能，哪种实现方式更好？这个练习 [@problem_id:1959219] 要求我们为一个函数设计电路，并比较两种截然不同的架构。通过分析纯组合逻辑方案（速度快但可能占用大量资源）和时序逻辑方案（资源高效但需要多个时钟周期），我们可以学习到在性能、面积和复杂性之间进行权衡的宝贵经验，这是数字系统设计中的核心技能。", "problem": "一位工程师的任务是设计一个专用的数字电路，用于计算一个4位无符号整数输入 $N$ 的阶乘 $F = N!$。输入 $N$ 的范围可以从0到15。电路的输出必须是 $F$ 完整的、未截断的二进制表示形式。根据定义，$0! = 1$。\n\n该工程师正在考虑两种不同的架构方法来完成此任务：\n\n1.  **纯组合逻辑设计：** 该电路被概念化为一个单片逻辑块。实现此类功能的一种常用方法是使用只读存储器 (ROM)，其中4位输入 $N$ 作为地址，对应的输出是预先计算好的 $N!$ 的值。\n\n2.  **时序设计：** 该电路使用一个由有限状态机 (FSM) 控制的数据通路。计算过程通过多个时钟周期迭代执行。例如，该电路可以将一个累加器初始化为1，然后在后续周期中，将累加器的值依次乘以2、3，依此类推，直到乘以 $N$。假设此设计每个乘法步骤需要一个时钟周期。\n\n为了做出明智的决策，需要进行比较分析。首先，确定输出总线表示所有可能的有效输入的阶乘值所需的最少位数 $W$。然后，评估两种设计方法的主要特性和资源需求。\n\n对于这一特定应用，以下哪个陈述对这两种设计进行了最准确的比较？\n\nA. 基于ROM的组合逻辑设计需要一个大小为 $2^{15} \\times W$ 位的存储器，这使其不切实际。时序设计速度明显更快，因为它在高频时钟下运行。\n\nB. 输出需要 $W=32$ 位。对于任何给定的输入，组合逻辑设计通常更快，而时序设计由于共享乘法器等硬件资源，通常面积效率更高。\n\nC. 输出需要 $W=41$ 位。基于ROM的组合逻辑设计总大小为 $16 \\times 41$ 位，并且其延迟（计算速度）低于时序设计，时序设计所需的时钟周期数与输入 $N$ 成正比。\n\nD. 输出需要 $W=41$ 位。时序设计是唯一可行的选择，因为阶乘函数的超指数增长使得组合逻辑实现逻辑上是不可能的。\n\nE. 组合逻辑设计的复杂度主要由对一个 $W \\times 4$ 位乘法器的需求决定。相比之下，时序设计更简单，因为它只需要一个FSM控制器和寄存器。", "solution": "输出宽度必须能容纳输入范围 $N \\in \\{0,1,\\dots,15\\}$ 内的最大阶乘值。最大值为 $15!$，因此所需的位数为\n$$\nW=\\left\\lfloor \\log_{2}\\!\\left(15!\\right) \\right\\rfloor + 1.\n$$\n通过连续乘法计算 $15!$：\n$$\n10!=3628800,\\quad 11!=39916800,\\quad 12!=479001600,\\quad 13!=6227020800,\\quad 14!=87178291200,\\quad 15!=1307674368000.\n$$\n与2的幂进行比较：\n$$\n2^{40}=1099511627776,\\quad 2^{41}=2199023255552,\n$$\n并观察到\n$$\n2^{40}<15!=1307674368000<2^{41}.\n$$\n因此，\n$$\nW=\\left\\lfloor \\log_{2}\\!\\left(15!\\right) \\right\\rfloor + 1=41.\n$$\n\n现在比较这两种架构。\n\n对于一个基于ROM的组合逻辑设计，一个4位输入用于寻址一个具有 $2^{4}=16$ 个条目的ROM。每个条目必须存储完整的阶乘值，所以ROM的大小是\n$$\n16 \\times W = 16 \\times 41 \\text{ bits}.\n$$\n延迟是输入到输出的一个组合逻辑传播延迟，对于 $N \\geq 2$ 的情况，这比任何多周期的时序方法都要低。\n\n对于一个使用FSM控制的数据通路、通过将累加器与从2到$N$的整数进行迭代相乘的时序设计，其延迟（以时钟周期计）与 $N$ 成正比（每个周期一次乘法），最坏情况下约为15个周期。数据通路至少需要一个 $W$ 位的累加器和一个能够将 $W$ 位值与最大为 $N \\leq 15$ 的整数相乘的乘法器（即，每步进行一次 $W \\times 4$ 位的乘法），外加控制逻辑和寄存器。虽然硬件可以在不同周期之间共享，但在典型的技术假设下，其延迟高于单周期的组合逻辑ROM。\n\n评估各个陈述：\n- A是错误的：一个4位输入的ROM有 $2^{4}=16$ 个地址，而不是 $2^{15}$ 个，并且时序设计的延迟不会比单周期ROM更快。\n- B是错误的：$W \\neq 32$；它必须是41位。\n- C是正确的：$W=41$，ROM的大小为 $16 \\times 41$ 位，并且组合逻辑设计的延迟低于时序设计，后者的周期数与 $N$ 成正比。\n- D是错误的：在这里，组合逻辑实现是可行的；阶乘函数的增长率并不妨碍对 $N \\leq 15$ 使用ROM。\n- E是错误的：基于ROM的组合逻辑设计不需要 $W \\times 4$ 位的乘法器；那是时序方法所需要的。\n\n因此，最准确的比较由选项C给出。", "answer": "$$\\boxed{C}$$", "id": "1959219"}]}