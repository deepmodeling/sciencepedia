{"hands_on_practices": [{"introduction": "在求解整个恒星的结构之前，我们可以通过研究其核心来获得深刻的见解。此练习将引导你使用泰勒展开在恒星中心（$r \\to 0$）附近分析 Tolman-Oppenheimer-Volkoff (TOV) 方程。通过这个实践，你将揭示中心压力 $P_c$ 和中心能量密度 $\\epsilon_c$ 如何决定压力分布的初始曲率，这是任何数值积分求解的必要起点 [@problem_id:923428]。", "problem": "**标题：相对论性星体中心的压强分布曲率**\n\n在广义相对论中，一个静态、球对称星体的结构由托尔曼-奥本海默-沃尔科夫（TOV）方程描述。在光速 $c=1$ 的几何单位制中，压强 $P(r)$ 和包围的引力质量 $M(r)$ 作为半径 $r$ 的函数的方程为：\n\n$$\n\\frac{dP}{dr} = - \\frac{G(\\epsilon(r) + P(r))(M(r) + 4\\pi r^3 P(r))}{r^2(1 - 2GM(r)/r)}\n$$\n\n$$\n\\frac{dM}{dr} = 4\\pi r^2 \\epsilon(r)\n$$\n\n此处，$\\epsilon(r)$ 是能量密度，而 $G$ 是引力常数。\n\n在星体中心附近（当 $r \\to 0$ 时），我们假设压强和能量密度是正则的。球对称性意味着这些函数必须是关于 $r$ 的偶函数。因此，对于小的 $r$，压强分布可以近似为一条抛物线：\n\n$$\nP(r) \\approx P_c + P_2 r^2\n$$\n\n其中 $P_c = P(0)$ 是中心压强，而 $P_2 = \\frac{1}{2} \\frac{d^2P}{dr^2}\\Big|_{r=0}$ 是该分布的主阶曲率系数。\n\n**问题：**\n请确定曲率系数 $P_2$ 的表达式，用中心压强 $P_c$ 和中心能量密度 $\\epsilon_c = \\epsilon(0)$ 表示。你的最终答案应该是一个只包含 $P_c$、$\\epsilon_c$ 和 $G$ 的符号表达式。", "solution": "1. 在 $r=0$ 附近展开：\n$$P(r)=P_c+P_2r^2+O(r^4),\\quad \\epsilon(r)=\\epsilon_c+O(r^2),\\quad M(r)=\\tfrac{4\\pi\\epsilon_c}{3}r^3+O(r^5).$$\n2. TOV 方程：\n$$\\frac{dP}{dr}=-\\frac{G(\\epsilon+P)(M+4\\pi r^3P)}{r^2(1-2GM/r)}.$$\n3. 主导项：\n$$\\epsilon+P=\\epsilon_c+P_c,\\quad M+4\\pi r^3P=4\\pi r^3\\bigl(\\tfrac{\\epsilon_c}{3}+P_c\\bigr),\\quad 1-2GM/r=1-\\tfrac{8\\pi G\\epsilon_c}{3}r^2.$$\n4. 因此\n$$\\frac{dP}{dr}=-4\\pi G(\\epsilon_c+P_c)\\Bigl(\\tfrac{\\epsilon_c}{3}+P_c\\Bigr)\\,r+O(r^3).$$\n5. 所以\n$$P''(0)=-4\\pi G(\\epsilon_c+P_c)\\Bigl(\\tfrac{\\epsilon_c}{3}+P_c\\Bigr),\\quad\nP_2=\\tfrac12P''(0)=-2\\pi G(\\epsilon_c+P_c)\\Bigl(P_c+\\tfrac{\\epsilon_c}{3}\\Bigr).$$", "answer": "$$\\boxed{-2\\pi G(\\epsilon_c+P_c)\\Bigl(P_c+\\tfrac{\\epsilon_c}{3}\\Bigr)}$$", "id": "923428"}, {"introduction": "在理解了恒星核心的行为之后，我们现在来构建一个完整的恒星模型。通过假设一个简化的、不可压缩流体（即恒定能量密度），我们可以解析地求解 TOV 方程。这个练习将展示如何在一个极端条件下（当中心压力等于中心能量密度时），推导出恒星的“致密性”参数 $C$ 的精确值，从而深刻理解物质状态方程在对抗引力坍缩中的决定性作用 [@problem_id:1001147]。", "problem": "在广义相对论中，由理想流体构成的静态球对称恒星的结构由托尔曼-奥本海默-沃尔科夫（Tolman-Oppenheimer-Volkoff, TOV）方程描述。在几何化单位制中，光速 $c=1$，这些方程为：\n$$\n\\frac{dm(r)}{dr} = 4\\pi r^2 \\epsilon(r)\n$$\n$$\n\\frac{dP(r)}{dr} = - \\frac{G(\\epsilon(r) + P(r))(m(r) + 4\\pi r^3 P(r))}{r^2(1 - 2Gm(r)/r)}\n$$\n其中 $r$ 是径向坐标，$G$ 是引力常数，$m(r)$ 是半径 $r$ 内包含的引力质量，$P(r)$ 是压力，而 $\\epsilon(r)$ 是能量密度。\n\n考虑一个简化的恒星模型，其中流体是不可压缩的，意味着其能量密度在整个恒星中是恒定的：$\\epsilon(r) = \\epsilon_c$。这可以被看作是多方物态方程在 $n=0$ 时的极限情况。对于这样的恒星，总质量为 $M=m(R)$，半径为 $R$，其中 $R$ 由条件 $P(R)=0$ 定义。\n\n恒星的致密度由无量纲参数 $C = 2GM/R$ 定义。该参数受到布赫达尔（Buchdahl）极限的约束，$C  8/9$。对于不可压缩的恒星，随着致密度的增加，中心压力 $P_c = P(0)$ 会升高。\n\n确定当中心压力等于中心能量密度时，即 $P_c = \\epsilon_c$ 时，致密度参数 $C$ 的精确值。", "solution": "1. 在几何化单位制（c=1, G=1）下，对于恒定能量密度 ε：\n   m(r)=∫0r4πr′2ε dr′=(4/3)π ε r3,  M=m(R),  C=2M/R.\n\n2. 内部史瓦西解给出\n   $$P(r)=ε\\,\\frac{\\sqrt{1-\\frac{2M\\,r^2}{R^3}}-\\sqrt{1-\\frac{2M}{R}}}\n             {3\\sqrt{1-\\frac{2M}{R}}-\\sqrt{1-\\frac{2M\\,r^2}{R^3}}}.$$\n\n3. 在 r=0 处，√(1−2M r^2/R^3)=1，所以\n   $$P_c=ε\\,\\frac{1-\\sqrt{1-C}}{3\\sqrt{1-C}-1}.$$\n\n4. 令 P_c=ε：\n   $$\\frac{1-\\sqrt{1-C}}{3\\sqrt{1-C}-1}=1\n     \\;\\Longrightarrow\\;1-\\sqrt{1-C}=3\\sqrt{1-C}-1\n     \\;\\Longrightarrow\\;2=4\\sqrt{1-C}\n     \\;\\Longrightarrow\\;\\sqrt{1-C}=\\frac12\n     \\;\\Longrightarrow\\;C=\\frac34.$$", "answer": "$$\\boxed{\\frac{3}{4}}$$", "id": "1001147"}, {"introduction": "解析解仅适用于最简单的物质状态方程，而真实恒星物质的复杂性远超于此。此练习将带你进入现代计算天体物理学的领域，通过数值积分方法求解适用于更真实状态方程的 TOV 方程。更重要的是，我们将探索不确定性量化的关键概念，学习天体物理学家如何处理极端密度下物质属性知识的不完备性，并评估其对恒星最大质量等宏观性质的影响 [@problem_id:2448352]。", "problem": "你的任务是实现一个完整的、可运行的程序，通过在参数化物态方程中传播不确定性，并利用 Tolman–Oppenheimer–Volkoff (TOV) 方程，对一颗冷的、非旋转中子星的最大引力质量进行不确定性量化。你的实现必须遵循第一性原理，从广义相对论中的流体静力平衡和致密物质的冷正压多方模型开始。所有计算都必须使用国际单位制 (SI) 进行，最终的质量结果必须以太阳质量为单位表示，记作 $M_{\\odot}$，这是一个无量纲的量，因为它是引力质量之比。\n\n从以下基本定律和定义开始：\n- 广义相对论中，静态球对称恒星的流体静力平衡由 Tolman–Oppenheimer–Volkoff 方程描述：\n  $$\\frac{dP}{dr} = -\\frac{G \\left(\\epsilon + \\frac{P}{c^2}\\right)\\left(m + 4\\pi r^3 \\frac{P}{c^2}\\right)}{r^2 \\left(1 - \\frac{2 G m}{r c^2}\\right)}, \\quad \\frac{dm}{dr} = 4\\pi r^2 \\frac{\\epsilon}{c^2}.$$\n  这里，$P$ 是压强，单位为 $\\mathrm{Pa}$；$\\epsilon$ 是能量密度，单位为 $\\mathrm{J/m^3}$；$m$ 是包围的引力质量，单位为 $\\mathrm{kg}$；$r$ 是半径，单位为 $\\mathrm{m}$；$G$ 是引力常数，单位为 $\\mathrm{m^3\\,kg^{-1}\\,s^{-2}}$；$c$ 是光速，单位为 $\\mathrm{m/s}$。\n- 采用一个由绝热指数 $\\Gamma$ 和在固定参考质量密度 $\\rho_{\\mathrm{ref}}$ 下的参考压强 $P_{\\mathrm{ref}}$ 指定的冷正压相对论多方物态方程。定义多方常数 $K$ 为\n  $$K = \\frac{P_{\\mathrm{ref}}}{\\rho_{\\mathrm{ref}}^{\\Gamma}}.$$\n  对于任意压强 $P$，对应的静止质量密度 $\\rho$ 和能量密度 $\\epsilon$ 由下式给出\n  $$\\rho = \\left(\\frac{P}{K}\\right)^{1/\\Gamma}, \\quad \\epsilon = \\rho c^2 + \\frac{P}{\\Gamma - 1}.$$\n  该理想化正压模型的因果性极限意味着一个渐近声速上限 $c_s^2 \\to (\\Gamma - 1) c^2$，这在 $\\Gamma \\le 2$ 时是符合因果性的。\n\n不确定性量化规范：\n- 将参数对 $(\\Gamma, P_{\\mathrm{ref}})$ 视为随机输入，样本间独立。对于每次抽样：\n  - 从均值为 $\\mu_{\\Gamma}$、标准差为 $\\sigma_{\\Gamma}$ 的正态分布中抽取 $\\Gamma$，然后截断到区间 $[1.8, 2.0]$ 以满足因果性。\n  - 从均值为 $\\mu_{\\log_{10} P}$、标准差为 $\\sigma_{\\log_{10} P}$ 的正态分布中抽取 $\\log_{10} P_{\\mathrm{ref}}$，然后设置 $P_{\\mathrm{ref}} = 10^{\\log_{10} P_{\\mathrm{ref}}}$。\n  - 计算 $K = P_{\\mathrm{ref}} / \\rho_{\\mathrm{ref}}^{\\Gamma}$。\n- 对于每个采样的物态方程，定义一个中心压强网格\n  $$P_c \\in \\{ \\alpha \\cdot P_{\\mathrm{ref}} \\mid \\alpha \\in \\mathcal{A} \\},$$\n  其中 $\\mathcal{A}$ 是一组固定的乘子（参见下面的“积分与扫描配置”）。对于每个 $P_c$，从一个小的半径 $r_0$ 开始向外求解 TOV 初值问题，直到压强首次低于表面阈值 $P_{\\mathrm{surf}}$。初始条件为\n  $$P(r_0) = P_c, \\quad m(r_0) = \\frac{4\\pi}{3} r_0^3 \\frac{\\epsilon(P_c)}{c^2}.$$\n  如果积分遇到 $1 - \\frac{2 G m}{r c^2} \\le 0$ 的点（因坐标奇点导致流体静力平衡丧失），或发生数值计算失败（例如，非有限状态），则丢弃该样本。\n- 对于每个物态方程样本，将最大质量估计值定义为在扫描的中心压强范围内的最大值：\n  $$M_{\\max} = \\max_{P_c} M(P_c), \\quad M(P_c) = \\frac{m(R)}{M_\\odot},$$\n  其中 $R$ 是达到表面阈值时的半径，$m(R)$ 是包围的质量（单位为 $\\mathrm{kg}$），$M_\\odot$ 是太阳质量（单位为 $\\mathrm{kg}$）。以 $M_\\odot$ 为单位报告 $M(P_c)$ 和 $M_{\\max}$，在内部作为浮点数进行舍入。如果对于给定样本，任何 $P_c$ 都不能产生稳定的恒星，则丢弃该样本。\n- 对 $N$ 个有效样本 $(M_{\\max}^{(i)})_{i=1}^{N}$，计算均值和无偏标准差的蒙特卡洛估计量：\n  $$\\bar{M} = \\frac{1}{N} \\sum_{i=1}^N M_{\\max}^{(i)}, \\quad s = \\sqrt{\\frac{1}{N-1}\\sum_{i=1}^N \\left(M_{\\max}^{(i)} - \\bar{M}\\right)^2}.$$\n\n积分与扫描配置：\n- 使用 $G = 6.67430\\times 10^{-11}\\ \\mathrm{m^3\\,kg^{-1}\\,s^{-2}}$，$c = 2.99792458\\times 10^8\\ \\mathrm{m/s}$，$M_\\odot = 1.98847\\times 10^{30}\\ \\mathrm{kg}$。\n- 使用 $\\rho_{\\mathrm{ref}} = 2.8\\times 10^{17}\\ \\mathrm{kg/m^3}$。\n- 从 $r_0 = 10\\ \\mathrm{m}$ 处使用上述初始条件开始积分。\n- 当 $P \\le P_{\\mathrm{surf}}$ 时停止，其中 $P_{\\mathrm{surf}} = 10^{30}\\ \\mathrm{Pa}$。\n- 使用四阶 Runge–Kutta 方法，步长 $h$ 根据局域压强标高 $H = \\left|\\frac{P}{dP/dr}\\right|$ 自适应调整：\n  $$h = \\min(h_{\\max}, \\max(h_{\\min}, \\eta H)),$$\n  其中 $h_{\\min} = 1\\ \\mathrm{m}$，$h_{\\max} = 200\\ \\mathrm{m}$，$\\eta = 0.3$。将总径向步数限制为 $N_{\\mathrm{steps,max}} = 20000$。\n- 使用一组固定的中心压强乘子\n  $$\\mathcal{A} = \\{\\alpha_k\\}_{k=1}^{24}, \\quad \\alpha_k \\in \\log_{10}\\text{-}\\mathrm{space}[10^{-0.30103}, 10^{1.30103}],$$\n  即，24 个从 $0.5$ 到 $20$ 呈对数等距分布的值。\n\n测试套件：\n- 案例 1：\n  - $N = 14$,\n  - $\\mu_{\\log_{10} P} = 34.6$,\n  - $\\sigma_{\\log_{10} P} = 0.2$,\n  - $\\mu_{\\Gamma} = 1.95$,\n  - $\\sigma_{\\Gamma} = 0.05$,\n  - 随机种子 $= 1729$。\n- 案例 2：\n  - $N = 12$,\n  - $\\mu_{\\log_{10} P} = 34.4$,\n  - $\\sigma_{\\log_{10} P} = 0.2$,\n  - $\\mu_{\\Gamma} = 1.90$,\n  - $\\sigma_{\\Gamma} = 0.05$,\n  - 随机种子 $= 2027$。\n- 案例 3：\n  - $N = 16$,\n  - $\\mu_{\\log_{10} P} = 34.8$,\n  - $\\sigma_{\\log_{10} P} = 0.2$,\n  - $\\mu_{\\Gamma} = 1.98$,\n  - $\\sigma_{\\Gamma} = 0.03$,\n  - 随机种子 $= 123$。\n\n编程任务和要求输出：\n- 按照描述实现 TOV 积分器和不确定性传播过程。\n- 对于每个测试案例，计算有效样本中 $M_{\\max}$ 的样本均值 $\\bar{M}$ 和无偏标准差 $s$。\n- 你的程序应生成单行输出，其中包含一个用方括号括起来的逗号分隔列表，结果按以下顺序排列：\n  $$[\\bar{M}_1, s_1, \\bar{M}_2, s_2, \\bar{M}_3, s_3],$$\n  其中下标表示测试案例索引。所有六个值都必须以 $M_\\odot$ 为单位表示，并作为浮点数打印在单行上，不得有额外文本。", "solution": "首先必须对问题陈述进行严格验证。\n\n### 步骤1：提取给定信息\n\n提供的信如下：\n\n*   **控制方程 (Tolman-Oppenheimer-Volkoff):**\n    $$ \\frac{dP}{dr} = -\\frac{G \\left(\\epsilon + \\frac{P}{c^2}\\right)\\left(m + 4\\pi r^3 \\frac{P}{c^2}\\right)}{r^2 \\left(1 - \\frac{2 G m}{r c^2}\\right)} $$\n    $$ \\frac{dm}{dr} = 4\\pi r^2 \\frac{\\epsilon}{c^2} $$\n    其中 $P$ 是压强，$\\epsilon$ 是能量密度，$m$ 是包围质量，$r$ 是半径，$G$ 是引力常数，$c$ 是光速。\n\n*   **物态方程 (EoS):** 冷正压相对论多方模型。\n    *   多方常数: $K = \\frac{P_{\\mathrm{ref}}}{\\rho_{\\mathrm{ref}}^{\\Gamma}}$\n    *   静止质量密度: $\\rho = \\left(\\frac{P}{K}\\right)^{1/\\Gamma}$\n    *   能量密度: $\\epsilon = \\rho c^2 + \\frac{P}{\\Gamma - 1}$\n    *   因果性约束: $\\Gamma \\le 2$。\n\n*   **不确定性量化 (UQ) 参数:**\n    *   随机输入: $(\\Gamma, P_{\\mathrm{ref}})$。\n    *   $\\Gamma$: 从正态分布（$\\mu_{\\Gamma}$, $\\sigma_{\\Gamma}$）中采样，然后截断到区间 $[1.8, 2.0]$。\n    *   $P_{\\mathrm{ref}}$: 通过从正态分布（$\\mu_{\\log_{10} P}$, $\\sigma_{\\log_{10} P}$）中抽取 $\\log_{10} P_{\\mathrm{ref}}$ 来采样。\n\n*   **数值积分与扫描:**\n    *   在 $r_0 = 10 \\ \\mathrm{m}$ 处的初始条件: $P(r_0) = P_c$, $m(r_0) = \\frac{4\\pi}{3} r_0^3 \\frac{\\epsilon(P_c)}{c^2}$。\n    *   中心压强扫描: $P_c \\in \\{ \\alpha \\cdot P_{\\mathrm{ref}} \\mid \\alpha \\in \\mathcal{A} \\}$，其中 $\\mathcal{A}$ 是一个包含 24 个从 0.5 到 20 对数等距分布的乘子集合。\n    *   终止条件: $P \\le P_{\\mathrm{surf}}$，其中 $P_{\\mathrm{surf}} = 10^{30}\\ \\mathrm{Pa}$。\n    *   失败条件: 如果 $1 - \\frac{2 G m}{r c^2} \\le 0$ 或出现其他数值失败，则丢弃积分。如果一个 EoS 样本未产生任何稳定恒星，则丢弃该样本。\n    *   关注量: $M_{\\max} = \\max_{P_c} (m(R)/M_\\odot)$，其中 $R$ 是恒星半径。\n    *   积分器: 四阶 Runge-Kutta (RK4)，采用自适应步长 $h = \\min(h_{\\max}, \\max(h_{\\min}, \\eta H))$，其中 $H = |P/(dP/dr)|$。\n    *   积分器参数: $h_{\\min} = 1\\ \\mathrm{m}$, $h_{\\max} = 200\\ \\mathrm{m}$, $\\eta = 0.3$, $N_{\\mathrm{steps,max}} = 20000$。\n\n*   **物理常数与参考值:**\n    *   $G = 6.67430\\times 10^{-11}\\ \\mathrm{m^3\\,kg^{-1}\\,s^{-2}}$\n    *   $c = 2.99792458\\times 10^8\\ \\mathrm{m/s}$\n    *   $M_\\odot = 1.98847\\times 10^{30}\\ \\mathrm{kg}$\n    *   $\\rho_{\\mathrm{ref}} = 2.8\\times 10^{17}\\ \\mathrm{kg/m^3}$\n\n*   **统计估计量:**\n    *   样本均值: $\\bar{M} = \\frac{1}{N} \\sum_{i=1}^N M_{\\max}^{(i)}$\n    *   样本无偏标准差: $s = \\sqrt{\\frac{1}{N-1}\\sum_{i=1}^N \\left(M_{\\max}^{(i)} - \\bar{M}\\right)^2}$\n    (此处，$N$ 取为有效样本的数量。)\n\n*   **测试案例:** 指定了三个案例，具有不同的样本大小 ($N$)、分布参数 ($\\mu_{\\log_{10} P}, \\sigma_{\\log_{10} P}, \\mu_{\\Gamma}, \\sigma_{\\Gamma}$) 和随机种子。\n\n### 步骤2：使用提取的给定信息进行验证\n\n根据既定标准对问题进行验证。\n\n1.  **科学依据:** 该问题基于 Tolman-Oppenheimer-Volkoff 方程，这是相对论天体物理学中用于模拟恒星结构的基石。多方物态方程是对致密物质的一种公认且有物理动机的简化。因果性条件和所选参数范围与已知的中子星物理学相符。\n2.  **适定性:** 该问题描述了一个完整的蒙特卡洛模拟过程。它定义了一个具有特定初始条件的初值问题，一个清晰的积分方法（自适应 RK4），以及明确的终止和失败标准。对输入参数进行采样和计算输出统计量的过程在数学上是精确的。\n3.  **客观性:** 问题使用客观、技术性的语言表述。所有量都已定义，所有必需的参数都给定了特定值或由概率分布描述。\n4.  **完整性与一致性:** 该问题为物理模型、数值方法和统计分析提供了所有必要的方程、常数和参数。所提供的信息中没有明显的矛盾。关于 $M_\\odot$ 是无量纲的说明略显别扭，但其意图是明确的：最终质量应报告为无量纲比值 $m/M_\\odot$。\n5.  **可行性与现实性:** 对于此类模拟，物理和数值参数都在现实范围内。计算任务虽然密集，但在标准计算机上是可行的。\n6.  **结构良好:** 该问题结构逻辑清晰，引导求解者从基本原理（广义相对论和物态方程）到数值实现（TOV 积分），再到最终的统计分析（不确定性量化）。\n\n### 步骤3：结论与行动\n\n该问题是**有效的**。这是一个独立的、科学上合理且适定性良好的计算物理问题。将据此开发解决方案。\n\n### 解决方案\n\n该解决方案实现了一个蒙特卡洛模拟，用以量化由物态方程 (EoS) 不确定性引起的中子星最大质量的不确定性。模拟的核心是重复求解 Tolman-Oppenheimer-Volkoff (TOV) 方程。\n\n对于每个测试案例，总体算法流程如下：\n1.  **参数采样:** 根据指定的概率分布和随机种子，生成 EoS 参数 $(\\Gamma, P_{\\mathrm{ref}})$ 的 $N$ 个样本。$\\Gamma$ 从正态分布中抽取，然后裁剪到区间 $[1.8, 2.0]$。$\\log_{10} P_{\\mathrm{ref}}$ 从正态分布中抽取，以计算 $P_{\\mathrm{ref}}$。\n2.  **最大质量计算:** 对于每个采样的 EoS：\n    a. 计算多方常数 $K = P_{\\mathrm{ref}} / \\rho_{\\mathrm{ref}}^{\\Gamma}$。\n    b. 构建一个包含 24 个中心压强 $P_c$ 的预定义网格。\n    c. 对于每个 $P_c$，从一个小的初始半径 $r_0$ 开始向外数值积分 TOV 方程。此积分得出给定 $P_c$ 和 EoS 下恒星的质量-半径剖面。\n    d. 通过在 $P_c$ 网格上计算的所有稳定恒星结构中找到最终质量的最大值，来确定该 EoS 的最大质量 $M_{\\max}^{(i)}$。如果某个 EoS 样本未能产生任何稳定的恒星，则将其丢弃。\n3.  **统计分析:** 计算从所有有效样本中收集到的 $M_{\\max}^{(i)}$ 值的样本均值 ($\\bar{M}$) 和样本标准差 ($s$)。\n\nTOV 系统（关于压强 $P(r)$ 和包围质量 $m(r)$ 的一对耦合一阶常微分方程(ODEs)）的数值积分采用四阶 Runge-Kutta (RK4) 方法。为了处理在恒星表面附近压强急剧变化时方程的刚性问题，采用了自适应步长 $h$。步长根据局域压强标高 $H = |P/(dP/dr)|$ 计算，并被限制在指定的最小和最大范围 ($h_{\\min}, h_{\\max}$) 内。\n\n单个恒星的积分始于 $r_0=10$ m，其初始条件是基于均匀核心密度的假设推导出来的。积分一直进行到压强降至表面阈值 $P_{\\mathrm{surf}}$ 以下，此时积分停止。为提高精度，最终半径 $R$ 和质量 $m(R)$ 通过线性插值到 $P(r) = P_{\\mathrm{surf}}$ 的点来确定。在积分过程中，每一步都会进行关键检查，以确保度规项 $1 - 2Gm/rc^2$ 保持为正。如果它变为非正，则表示（在此模型下）引力坍缩成黑洞，该恒星的积分被标记为失败。\n\n该实现封装在一个 Python 程序中，利用 `numpy`进行数值运算，并使用 `scipy.stats` 从截断正态分布中生成随机变量。尽管问题文本可以被解释为钳位操作，但使用 `truncnorm` 在统计上更为稳健。然而，为了直接忠实于“然后截断”的措辞，此处实现了钳位操作。代码的结构是按顺序处理每个测试案例，计算所需的统计数据，并将最终输出格式化为单个逗号分隔的列表。", "answer": "```python\nimport numpy as np\nfrom scipy.stats import truncnorm\n\ndef solve():\n    \"\"\"\n    Main function to run the uncertainty quantification for all test cases.\n    \"\"\"\n\n    # --- Physical Constants (SI units) ---\n    G = 6.67430e-11  # Gravitational constant\n    C = 2.99792458e8   # Speed of light\n    C2 = C**2\n    M_SUN = 1.98847e30 # Solar mass in kg\n\n    # --- EOS and Integration Parameters ---\n    RHO_REF = 2.8e17   # Reference rest-mass density (kg/m^3)\n    R_0 = 10.0         # Initial integration radius (m)\n    P_SURF = 1.0e30    # Surface pressure threshold (Pa)\n    H_MIN = 1.0        # Minimum step size (m)\n    H_MAX = 200.0      # Maximum step size (m)\n    ETA = 0.3          # Step size control factor\n    N_STEPS_MAX = 20000# Maximum number of integration steps\n\n    # Central pressure multipliers\n    PC_MULTIPLIERS = np.logspace(-0.30103, 1.30103, 24)\n\n    test_cases = [\n        # (N, mu_log10 P, sigma_log10 P, mu_Gamma, sigma_Gamma, seed)\n        (14, 34.6, 0.2, 1.95, 0.05, 1729),\n        (12, 34.4, 0.2, 1.90, 0.05, 2027),\n        (16, 34.8, 0.2, 1.98, 0.03, 123),\n    ]\n\n    all_results = []\n\n    for n_samples, mu_logp, sigma_logp, mu_gamma, sigma_gamma, seed in test_cases:\n\n        rng = np.random.default_rng(seed)\n\n        # Generate all random variables for the case at once\n        log_p_ref_samples = rng.normal(mu_logp, sigma_logp, n_samples)\n        p_ref_samples = 10.0**log_p_ref_samples\n        \n        gamma_samples_raw = rng.normal(mu_gamma, sigma_gamma, n_samples)\n        gamma_samples = np.clip(gamma_samples_raw, 1.8, 2.0)\n\n        max_masses = []\n\n        for i in range(n_samples):\n            gamma = gamma_samples[i]\n            p_ref = p_ref_samples[i]\n            \n            # Polytropic constant K\n            k_eos = p_ref / (RHO_REF**gamma)\n\n            masses_for_eos = []\n\n            for alpha in PC_MULTIPLIERS:\n                pc = alpha * p_ref\n\n                # --- Integration of a single star ---\n                r = R_0\n                \n                # Epsilon at center\n                if pc = 0:\n                    # Non-physical central pressure\n                    masses_for_eos.append(None)\n                    continue\n\n                rho_c = (pc / k_eos)**(1.0 / gamma)\n                eps_c = rho_c * C2 + pc / (gamma - 1.0)\n                \n                # Initial conditions\n                p = pc\n                m = (4.0 / 3.0) * np.pi * r**3 * eps_c / C2\n                \n                y = np.array([p, m])\n\n                is_stable = True\n                for step in range(N_STEPS_MAX):\n                    # Check for black hole formation\n                    schwarzschild_term = 1.0 - 2.0 * G * y[1] / (r * C2)\n                    if schwarzschild_term = 0:\n                        is_stable = False\n                        break\n\n                    # --- TOV ODE system ---\n                    rho = (y[0] / k_eos)**(1.0 / gamma) if y[0]  0 else 0.0\n                    eps = rho * C2 + y[0] / (gamma - 1.0)\n                    \n                    dpdr = -(G * (eps + y[0] / C2) * (y[1] + 4.0 * np.pi * r**3 * y[0] / C2)\n                           / (r**2 * schwarzschild_term))\n                    dmdr = 4.0 * np.pi * r**2 * eps / C2\n                    \n                    derivatives = np.array([dpdr, dmdr])\n\n                    # --- Adaptive step size ---\n                    if dpdr == 0:\n                        h = H_MAX\n                    else:\n                        h_pressure_scale = abs(y[0] / dpdr)\n                        h = ETA * h_pressure_scale\n                    \n                    h = np.clip(h, H_MIN, H_MAX)\n\n                    # --- RK4 step ---\n                    k1 = h * derivatives\n                    \n                    # Recalculate derivatives for k2, k3, k4\n                    rho_k2 = ((y[0] + 0.5 * k1[0]) / k_eos)**(1.0 / gamma) if (y[0] + 0.5 * k1[0])  0 else 0.0\n                    eps_k2 = rho_k2 * C2 + (y[0] + 0.5 * k1[0]) / (gamma - 1.0)\n                    schwarzschild_term_k2 = 1.0 - 2.0 * G * (y[1] + 0.5 * k1[1]) / ((r + 0.5*h) * C2)\n                    if schwarzschild_term_k2 = 0: is_stable = False; break\n                    k2 = h * np.array([\n                        -(G * (eps_k2 + (y[0] + 0.5*k1[0]) / C2) * ((y[1] + 0.5*k1[1]) + 4.0 * np.pi * (r+0.5*h)**3 * (y[0] + 0.5*k1[0]) / C2)) / ((r+0.5*h)**2 * schwarzschild_term_k2),\n                        4.0 * np.pi * (r + 0.5*h)**2 * eps_k2 / C2\n                    ])\n\n                    rho_k3 = ((y[0] + 0.5 * k2[0]) / k_eos)**(1.0 / gamma) if (y[0] + 0.5 * k2[0])  0 else 0.0\n                    eps_k3 = rho_k3 * C2 + (y[0] + 0.5 * k2[0]) / (gamma - 1.0)\n                    schwarzschild_term_k3 = 1.0 - 2.0 * G * (y[1] + 0.5 * k2[1]) / ((r + 0.5*h) * C2)\n                    if schwarzschild_term_k3 = 0: is_stable = False; break\n                    k3 = h * np.array([\n                        -(G * (eps_k3 + (y[0] + 0.5*k2[0]) / C2) * ((y[1] + 0.5*k2[1]) + 4.0 * np.pi * (r+0.5*h)**3 * (y[0] + 0.5*k2[0]) / C2)) / ((r+0.5*h)**2 * schwarzschild_term_k3),\n                        4.0 * np.pi * (r + 0.5*h)**2 * eps_k3 / C2\n                    ])\n\n                    rho_k4 = ((y[0] + k3[0]) / k_eos)**(1.0 / gamma) if (y[0] + k3[0])  0 else 0.0\n                    eps_k4 = rho_k4 * C2 + (y[0] + k3[0]) / (gamma - 1.0)\n                    schwarzschild_term_k4 = 1.0 - 2.0 * G * (y[1] + k3[1]) / ((r + h) * C2)\n                    if schwarzschild_term_k4 = 0: is_stable = False; break\n                    k4 = h * np.array([\n                        -(G * (eps_k4 + (y[0] + k3[0]) / C2) * ((y[1] + k3[1]) + 4.0 * np.pi * (r+h)**3 * (y[0] + k3[0]) / C2)) / ((r+h)**2 * schwarzschild_term_k4),\n                        4.0 * np.pi * (r + h)**2 * eps_k4 / C2\n                    ])\n                    \n                    y_next = y + (k1 + 2.0 * k2 + 2.0 * k3 + k4) / 6.0\n\n                    if y_next[0]  P_SURF:\n                        # Linear interpolation for final mass\n                        p_prev, m_prev = y\n                        p_next, m_next = y_next\n                        if p_prev  p_next:\n                             m_final = m_prev + (m_next - m_prev) * (P_SURF - p_prev) / (p_next - p_prev)\n                        else:\n                             m_final = m_next\n                        masses_for_eos.append(m_final / M_SUN)\n                        break\n                    \n                    y = y_next\n                    r += h\n                else: # Loop finished without break\n                    if step == N_STEPS_MAX - 1:\n                        is_stable = False\n                \n                if not is_stable:\n                    masses_for_eos.append(None)\n            \n            valid_masses = [m for m in masses_for_eos if m is not None and not np.isnan(m)]\n            if valid_masses:\n                max_masses.append(max(valid_masses))\n\n        if len(max_masses) = 2:\n            mean = np.mean(max_masses)\n            std = np.std(max_masses, ddof=1)\n            all_results.extend([mean, std])\n        elif len(max_masses) == 1:\n            mean = max_masses[0]\n            std = 0.0 # Or np.nan, but 0.0 is a reasonable float\n            all_results.extend([mean, std])\n        else:\n            # No valid samples, add placeholders\n            all_results.extend([np.nan, np.nan])\n\n    # Format and print the final output\n    print(f\"[{','.join(f'{x:.8f}' for x in all_results)}]\", end=\"\")\n\nsolve()\n```", "id": "2448352"}]}