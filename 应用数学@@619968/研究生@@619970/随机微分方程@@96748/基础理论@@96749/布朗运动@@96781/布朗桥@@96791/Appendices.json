{"hands_on_practices": [{"introduction": "本节的第一个练习将带领我们熟悉布朗桥最常见的构造方式之一。通过将一个标准的维纳过程 $W(t)$ 变换为 $B(t) = W(t) - tW(1)$，我们强制该过程在 $t=0$ 和 $t=1$ 时为零。这个练习的核心是计算布朗桥在不同时间点的协方差和相关性，这是理解其时间依赖结构和随机行为的关键第一步。[@problem_id:1286123]", "problem": "一个标准的维纳过程，记为 $W(t)$（其中 $t \\geq 0$），是一个具有以下性质的随机过程：\n1. $W(0) = 0$。\n2. 该过程具有独立增量。\n3. 对任意 $s < t$，增量 $W(t) - W(s)$ 服从均值为 0、方差为 $t-s$ 的正态分布。\n由这些性质可得，该过程的均值为 $\\mathbb{E}[W(t)] = 0$，协方差为 $\\text{Cov}(W(s), W(t)) = \\min(s, t)$。\n\n一个在时间区间 $[0, 1]$ 上的标准布朗桥，记为 $B(t)$，是由一个标准维纳过程 $W(t)$ 按如下方式构造的：\n$$B(t) = W(t) - t W(1), \\quad \\text{for } t \\in [0, 1].$$\n该过程在两端“钉住”，即 $B(0) = 0$ 且 $B(1) = 0$。\n\n考虑标准布朗桥在两个特定时间点 $t_1 = 1/3$ 和 $t_2 = 2/3$ 的值。计算这两个随机变量之间的相关系数 $\\rho(B(1/3), B(2/3))$。将您的答案表示为单个分数。", "solution": "我们从布朗桥的定义 $B(t)=W(t)-tW(1)$（其中 $t\\in[0,1]$）开始，其中 $W$ 是一个标准维纳过程，满足 $\\mathbb{E}[W(t)]=0$ 和 $\\text{Cov}(W(s),W(t))=\\min(s,t)$。\n\n对于 $0\\leq s\\leq t\\leq 1$，计算协方差：\n$$\n\\text{Cov}(B(s),B(t))=\\text{Cov}(W(s)-sW(1),\\,W(t)-tW(1)).\n$$\n利用协方差的双线性和维纳过程的协方差，\n$$\n\\text{Cov}(B(s),B(t))\n=\\text{Cov}(W(s),W(t)) - t\\,\\text{Cov}(W(s),W(1)) - s\\,\\text{Cov}(W(1),W(t)) + st\\,\\text{Var}(W(1)).\n$$\n代入 $\\text{Cov}(W(s),W(t))=s$ (因为 $s \\le t$)，$\\text{Cov}(W(s),W(1))=s$，$\\text{Cov}(W(1),W(t))=t$ (因为 $t \\le 1$) 和 $\\text{Var}(W(1))=1$：\n$$\n\\text{Cov}(B(s),B(t))=s - ts - st + st = s - st = s(1-t).\n$$\n特别地，方差为\n$$\n\\text{Var}(B(u))=\\text{Cov}(B(u),B(u))=u(1-u), \\quad u\\in[0,1].\n$$\n\n令 $s=\\frac{1}{3}$ 和 $t=\\frac{2}{3}$。那么\n$$\n\\text{Cov}\\big(B(\\tfrac{1}{3}),B(\\tfrac{2}{3})\\big)= \\frac{1}{3}\\left(1-\\frac{2}{3}\\right)=\\frac{1}{9},\n$$\n并且\n$$\n\\text{Var}\\big(B(\\tfrac{1}{3})\\big)=\\tfrac{1}{3}\\big(1-\\tfrac{1}{3}\\big)=\\tfrac{2}{9}, \\qquad \\text{Var}\\big(B(\\tfrac{2}{3})\\big)=\\tfrac{2}{3}\\big(1-\\tfrac{2}{3}\\big)=\\tfrac{2}{9}.\n$$\n因此，相关系数为\n$$\n\\rho\\big(B(\\tfrac{1}{3}),B(\\tfrac{2}{3})\\big)\n=\\frac{\\text{Cov}\\big(B(\\tfrac{1}{3}),B(\\tfrac{2}{3})\\big)}{\\sqrt{\\text{Var}\\big(B(\\tfrac{1}{3})\\big)\\,\\text{Var}\\big(B(\\tfrac{2}{3})\\big)}}\n=\\frac{\\tfrac{1}{9}}{\\sqrt{\\tfrac{2}{9}\\cdot\\tfrac{2}{9}}}\n=\\frac{\\tfrac{1}{9}}{\\tfrac{2}{9}}\n=\\frac{1}{2}.\n$$", "answer": "$$\\boxed{\\frac{1}{2}}$$", "id": "1286123"}, {"introduction": "除了作为变换后的维纳过程，布朗桥也可以被更抽象地定义为一个条件过程——即一个在终点被“钉住”的维纳过程。这个练习要求我们利用多维高斯分布的条件概率性质，从这一定义出发，直接推导出布朗桥在任意时刻 $t$ 的边缘分布。完成这个推导将加深我们对布朗桥统计特性的理解，并揭示其方差为何会呈现出先增大后减小的独特形态。[@problem_id:3000082]", "problem": "设 $(W_{s})_{0 \\leq s \\leq T}$ 是一个标准布朗运动，其定义为 $W_{0} = 0$，具有平稳独立增量和高斯增量，且对于所有 $s, u \\in [0, T]$，满足 $\\mathbb{E}[W_{s}] = 0$ 和 $\\operatorname{Cov}(W_{s}, W_{u}) = \\min\\{s, u\\}$。将在区间 $[0, T]$ 上从 $0$ 到 $0$ 的布朗桥 $(X_{s})_{0 \\leq s \\leq T}$ 定义为将布朗运动在终点值 $W_{T} = 0$ 的条件下得到的过程，即在给定 $W_T = 0$ 的条件下，$X_s$ 的分布与 $W_s$ 的分布相同。请仅使用联合高斯随机变量的性质和布朗运动的协方差结构，推导在固定的 $t \\in (0, T)$ 时 $X_{t}$ 的边际分布。将您的最终答案表示为单个闭式分布表达式。无需四舍五入，也无单位。", "solution": "该问题要求推导在固定时间 $t \\in (0, T)$ 时，布朗桥过程 $X_t$ 的边际分布。根据定义，$X_t$ 的分布是在事件 $W_T = 0$ 条件下，标准布朗运动 $W_t$ 的分布。推导过程必须基于联合高斯随机变量的性质。\n\n标准布朗运动 $(W_s)_{s \\geq 0}$ 是一个高斯过程，这意味着对于任意有限的时间点集合，相应的随机变量服从一个多元正态分布。为了确定给定 $W_T=0$ 时 $W_t$ 的分布，我们考虑对于一个固定的时间 $t$（满足 $0 < t < T$）的随机向量 $(W_t, W_T)^T$。这个向量服从二元正态分布。\n\n首先，我们确定此二元正态分布的参数，即均值向量 $\\boldsymbol{\\mu}$ 和协方差矩阵 $\\boldsymbol{\\Sigma}$。\n\n标准布朗运动在任意时间 $s$ 的均值为零，即 $\\mathbb{E}[W_s] = 0$。因此，向量 $(W_t, W_T)^T$ 的均值向量是零向量：\n$$\n\\boldsymbol{\\mu} = \\begin{pmatrix} \\mathbb{E}[W_t] \\\\ \\mathbb{E}[W_T] \\end{pmatrix} = \\begin{pmatrix} 0 \\\\ 0 \\end{pmatrix}.\n$$\n\n协方差矩阵 $\\boldsymbol{\\Sigma}$ 的元素由布朗运动的协方差函数 $\\operatorname{Cov}(W_s, W_u) = \\min\\{s, u\\}$ 给出。$\\boldsymbol{\\Sigma}$ 的分量是：\n$$\n\\boldsymbol{\\Sigma} = \\begin{pmatrix} \\operatorname{Cov}(W_t, W_t) & \\operatorname{Cov}(W_t, W_T) \\\\ \\operatorname{Cov}(W_T, W_t) & \\operatorname{Cov}(W_T, W_T) \\end{pmatrix}.\n$$\n使用给定的协方差函数，我们计算每一项：\n- $W_t$的方差是 $\\operatorname{Var}(W_t) = \\operatorname{Cov}(W_t, W_t) = \\min\\{t, t\\} = t$。\n- $W_T$的方差是 $\\operatorname{Var}(W_T) = \\operatorname{Cov}(W_T, W_T) = \\min\\{T, T\\} = T$。\n- 在 $t<T$ 的条件下，$W_t$ 和 $W_T$ 之间的协方差是 $\\operatorname{Cov}(W_t, W_T) = \\min\\{t, T\\} = t$。\n- 协方差矩阵是对称的，所以 $\\operatorname{Cov}(W_T, W_t) = t$。\n\n因此，协方差矩阵是：\n$$\n\\boldsymbol{\\Sigma} = \\begin{pmatrix} t & t \\\\ t & T \\end{pmatrix}.\n$$\n因此，随机向量 $(W_t, W_T)^T$ 服从以下分布：\n$$\n\\begin{pmatrix} W_t \\\\ W_T \\end{pmatrix} \\sim \\mathcal{N}\\left( \\begin{pmatrix} 0 \\\\ 0 \\end{pmatrix}, \\begin{pmatrix} t & t \\\\ t & T \\end{pmatrix} \\right).\n$$\n\n我们现在利用多元高斯随机变量条件分布的标准结果。对于一个均值为 $(\\mu_1, \\mu_2)^T$、协方差矩阵分量为 $\\sigma_{ij}$ 的一般二元正态向量 $(Y_1, Y_2)^T$，在给定 $Y_2 = y_2$ 的条件下，$Y_1$ 的条件分布是一个正态分布，其均值 $\\mu_{1|2}$ 和方差 $\\sigma_{1|2}^2$ 由以下公式给出：\n$$\n\\mu_{1|2} = \\mu_1 + \\sigma_{12} \\sigma_{22}^{-1} (y_2 - \\mu_2)\n$$\n$$\n\\sigma_{1|2}^2 = \\sigma_{11} - \\sigma_{12} \\sigma_{22}^{-1} \\sigma_{21}\n$$\n在我们的具体情况下，我们有 $Y_1 = W_t$，$Y_2 = W_T$，并且我们以事件 $y_2 = W_T = 0$ 为条件。从我们的二元分布中得到的参数是：$\\mu_1 = 0$，$\\mu_2 = 0$，$\\sigma_{11} = t$，$\\sigma_{22} = T$，以及 $\\sigma_{12} = \\sigma_{21} = t$。\n\n将这些值代入公式，我们求出 $X_t$ 的均值和方差，它们分别是给定 $W_T=0$ 时 $W_t$ 的条件均值和条件方差。\n\n条件均值是：\n$$\n\\mathbb{E}[X_t] = \\mathbb{E}[W_t | W_T = 0] = 0 + t \\cdot T^{-1} \\cdot (0 - 0) = 0.\n$$\n条件方差是：\n$$\n\\operatorname{Var}(X_t) = \\operatorname{Var}(W_t | W_T = 0) = t - t \\cdot T^{-1} \\cdot t = t - \\frac{t^2}{T}.\n$$\n这个方差表达式可以写成更紧凑的形式：\n$$\n\\operatorname{Var}(X_t) = \\frac{tT - t^2}{T} = \\frac{t(T-t)}{T}.\n$$\n由于高斯分布的条件分布总是高斯分布，所以布朗桥 $X_t$ 在时间 $t$ 的边际分布是一个正态分布。我们已经求出其均值为 $0$，方差为 $\\frac{t(T-t)}{T}$。\n\n因此，对于一个固定的 $t \\in (0, T)$，$X_t$ 的边际分布由正态分布 $\\mathcal{N}\\left(0, \\frac{t(T-t)}{T}\\right)$ 给出。", "answer": "$$\\boxed{\\mathcal{N}\\left(0, \\frac{t(T-t)}{T}\\right)}$$", "id": "3000082"}, {"introduction": "理论的最终目的是付诸实践。这个综合性练习将我们从静态属性的计算推向对完整过程路径的动态模拟。您需要推导出布朗桥的转移核 (transition kernel)——即过程从一个点移动到下一个点的条件概率——并据此设计一个精确的模拟算法。这项技能在计算金融、物理和统计学中都有着重要的应用，它将理论知识转化为了强大的计算工具。[@problem_id:3000113]", "problem": "考虑一个标准布朗运动 $B_t$，满足 $B_0=0$，以及一个固定的时间范围 $T>0$。将区间 $[0,T]$ 上的布朗桥 $X_t$ 定义为通过对布朗运动 $B_t$ 施加条件使其满足 $X_0=a$ 和 $X_T=b$ 而得到的高斯过程，其中 $a$ 和 $b$ 为给定的实数。仅从布朗运动的基本性质（独立增量、高斯性、增量平稳性以及 $\\mathrm{Var}(B_t)=t$）和多元高斯分布的条件化定义出发，推导布朗桥的条件高斯结构。利用此结构，在给定状态 $X_s$ 和终点 $X_T=b$ 的条件下，求出 $X_t$ 从任意时间 $s$ 到稍后时间 $t$（其中 $0\\le s < t < T$）的精确单步转移核。据此，设计一个精确的模拟算法，通过在给定 $X_{t_k}$ 和 $X_T=b$ 的情况下序贯抽样 $X_{t_{k+1}}$，在任意严格递增的时间网格 $0=t_0<t_1<\\cdots<t_n=T$ 上模拟 $X_t$。\n\n您必须在一个程序中实现该算法，该程序针对每个指定的测试用例，使用推导出的精确转移核在所提供的网格上生成 $N$ 条独立的布朗桥样本路径。为验证与转移密度的一致性，请使用概率积分变换：对于在选定的转移 $(s\\to t)$ 处模拟的每一对 $(X_s,X_t)$，计算累积分布函数值 $U=\\Phi\\big((X_t-m)/\\sqrt{v}\\big)$，其中 $\\Phi$ 是标准正态累积分布函数，而 $m$ 和 $v$ 是在给定 $X_s$ 和 $X_T=b$ 的条件下推导出的 $X_t$ 的条件均值和方差。在正确的条件高斯模拟下，这些 $U$ 值是独立同分布于 $[0,1]$ 上的均匀分布。通过 Kolmogorov-Smirnov (KS) 统计量来量化其均匀性，该统计量定义为经验分布函数与 $[0,1]$ 上均匀分布函数之间绝对差的上确界。此外，请使用相同的概率积分变换以及推导出的布朗桥的边际均值和方差，在选定的内部时间 $t^\\ast<T$ 处验证 $X_{t^\\ast}$ 的边际分布；变换后的值也应均匀分布于 $[0,1]$ 上，您应当计算相应的 KS 统计量。\n\n您的程序必须：\n- 为保证可复现性，使用固定的蒙特卡洛样本量 $N=20000$ 和固定的伪随机数生成器种子 $123456$。\n- 对每个测试用例，计算两个 KS 统计量：一个用于指定转移 $(s\\to t)$ 处的转移概率积分变换，另一个用于指定时间 $t^\\ast$ 处的边际概率积分变换。\n- 当且仅当两个 KS 统计量均小于阈值 $\\delta=0.03$ 时，才将该测试用例声明为通过。\n- 生成一行输出，其中包含所有测试用例的通过/失败结果，格式为方括号内以逗号分隔的布尔值列表，例如 $[{\\tt True},{\\tt False},\\dots]$。\n\n该测试套件包含四个用例，共同涵盖了一般情况、接近终端的行为、非均匀网格和非单位时间范围以及极小时间步长。在每个用例中，所有时间和参数都是以时间和状态的自然单位表示的实数，没有物理单位：\n\n- 用例 1 (一般情况)：\n  - 参数：$T=1.0$, $a=0.0$, $b=0.8$。\n  - 网格：$[0.0,0.2,0.5,0.9,1.0]$。\n  - 转移测试：$s=0.5$, $t=0.9$。\n  - 边际测试：$t^\\ast=0.5$。\n\n- 用例 2 (接近终端的行为)：\n  - 参数：$T=1.0$, $a=0.5$, $b=-0.5$。\n  - 网格：$[0.0,0.95,0.99,1.0]$。\n  - 转移测试：$s=0.95$, $t=0.99$。\n  - 边际测试：$t^\\ast=0.99$。\n\n- 用例 3 (非均匀网格，非单位时间范围)：\n  - 参数：$T=2.5$, $a=-1.0$, $b=0.5$。\n  - 网格：$[0.0,0.1,0.4,1.3,2.0,2.5]$。\n  - 转移测试：$s=1.3$, $t=2.0$。\n  - 边际测试：$t^\\ast=2.0$。\n\n- 用例 4 (极小时间步长)：\n  - 参数：$T=1.0$, $a=0.2$, $b=0.0$。\n  - 网格：$[0.0,0.4,0.4005,1.0]$。\n  - 转移测试：$s=0.4$, $t=0.4005$。\n  - 边际测试：$t^\\ast=0.4005$。\n\n您的程序应生成一行输出，其中包含结果，格式为方括号内以逗号分隔的列表，例如 $[{\\tt True},{\\tt True},{\\tt True},{\\tt True}]$。", "solution": "该问题要求推导并实现一个用于布朗桥的精确模拟算法，并通过统计检验进行验证。推导将基于布朗运动的基本性质和多元高斯分布的条件化法则。\n\n一个从 $B_0=0$ 开始的标准一维布朗运动 $\\{B_t\\}_{t \\ge 0}$ 是一个高斯过程，其特征如下：\n1.  $B_0 = 0$。\n2.  对所有 $t \\ge 0$，$\\mathbb{E}[B_t] = 0$。\n3.  对所有 $s, t \\ge 0$，$\\mathrm{Cov}(B_s, B_t) = \\min(s, t)$。\n4.  它具有独立增量：对于 $0 \\le t_1 < t_2 < \\dots < t_n$，随机变量 $(B_{t_2}-B_{t_1}), (B_{t_3}-B_{t_2}), \\dots, (B_{t_n}-B_{t_{n-1}})$ 是相互独立的。\n5.  它具有平稳高斯增量：对于 $s < t$，$B_t - B_s \\sim \\mathcal{N}(0, t-s)$。\n\n一个从 $a \\in \\mathbb{R}$ 开始的布朗运动可以定义为 $W_t = a + B_t$。它是一个高斯过程，其均值函数为 $\\mathbb{E}[W_t] = a$，协方差为 $\\mathrm{Cov}(W_s, W_t) = \\mathrm{Cov}(B_s, B_t) = \\min(s, t)$。\n\n布朗桥 $\\{X_t\\}_{0 \\le t \\le T}$ 定义为在时刻 $T$ 的值为 $b$ 这一事件下对过程 $W_t$ 施加条件。也就是说，$X_t = (W_t | W_T = b)$，其边界条件为 $X_0=a$ 和 $X_T=b$。由于 $W_t$ 是一个高斯过程，条件化后的过程 $X_t$ 也是一个高斯过程。我们的首要任务是确定其条件高斯结构，特别是其均值和方差。\n\n**1. 布朗桥的边际分布**\n\n为了执行边际验证测试，我们需要在任意时间 $t \\in (0, T)$ 处 $X_t$ 的分布。这对应于在 $W_T = b$ 条件下 $W_t$ 的分布。我们考虑二元随机向量 $(W_t, W_T)$。该向量是联合高斯分布的。\n\n其均值向量为 $\\mathbb{E}[(W_t, W_T)^T] = (a, a)^T$。\n对于 $0 < t < T$，其协方差矩阵为：\n$$\n\\Sigma = \\begin{pmatrix} \\mathrm{Var}(W_t) & \\mathrm{Cov}(W_t, W_T) \\\\ \\mathrm{Cov}(W_T, W_t) & \\mathrm{Var}(W_T) \\end{pmatrix} = \\begin{pmatrix} t & \\min(t,T) \\\\ \\min(t,T) & T \\end{pmatrix} = \\begin{pmatrix} t & t \\\\ t & T \\end{pmatrix}\n$$\n对于一个均值为 $(\\mu_1, \\mu_2)^T$、分块协方差矩阵为 $\\begin{pmatrix} \\Sigma_{11} & \\Sigma_{12} \\\\ \\Sigma_{21} & \\Sigma_{22} \\end{pmatrix}$ 的一般分块高斯向量 $(Y_1, Y_2)^T$，给定 $Y_2=y_2$ 时 $Y_1$ 的条件分布是高斯分布，其：\n均值：$\\mu_{1|2} = \\mu_1 + \\Sigma_{12} \\Sigma_{22}^{-1} (y_2 - \\mu_2)$\n方差：$\\Sigma_{11|2} = \\Sigma_{11} - \\Sigma_{12} \\Sigma_{22}^{-1} \\Sigma_{21}$\n\n在我们的例子中，$Y_1 = W_t$，$Y_2 = W_T$，$y_2 = b$。我们有 $\\mu_1 = a$, $\\mu_2 = a$, $\\Sigma_{11} = t$, $\\Sigma_{12} = t$, $\\Sigma_{21} = t$ 和 $\\Sigma_{22} = T$。\n\n布朗桥 $X_t$ 的边际均值为：\n$$\n\\mathbb{E}[X_t] = \\mathbb{E}[W_t | W_T=b] = a + t T^{-1} (b - a) = a \\left(1 - \\frac{t}{T}\\right) + b \\frac{t}{T} = a\\frac{T-t}{T} + b\\frac{t}{T}\n$$\n布朗桥 $X_t$ 的边际方差为：\n$$\n\\mathrm{Var}(X_t) = \\mathrm{Var}(W_t | W_T=b) = t - t T^{-1} t = t - \\frac{t^2}{T} = \\frac{t(T-t)}{T}\n$$\n因此，在时间 $t \\in (0, T)$ 处，布朗桥的边际分布为：\n$$\nX_t \\sim \\mathcal{N}\\left(a\\frac{T-t}{T} + b\\frac{t}{T}, \\frac{t(T-t)}{T}\\right)\n$$\n\n**2. 单步转移核**\n\n对于模拟算法，我们需要在给定先前时间 $s$ 的值 $x_s$ 的情况下，在时间 $t$ 处 $X_t$ 的分布，其中 $0 \\le s < t < T$。这对应于在 $W_s = x_s$ 和 $W_T = b$ 两个条件下的 $W_t$ 分布。我们分析三元高斯向量 $(W_s, W_t, W_T)$。为应用条件化公式，我们将其分块为 $(Y_1, Y_2)$，其中 $Y_1 = W_t$，$Y_2 = (W_s, W_T)^T$。\n\n联合均值向量为 $(a, a, a)^T$。对于时间 $0 \\le s < t < T$，协方差矩阵为：\n$$\n\\mathrm{Cov}((W_s, W_t, W_T)) = \\begin{pmatrix} s & s & s \\\\ s & t & t \\\\ s & t & T \\end{pmatrix}\n$$\n我们根据 $Y_1$ 和 $Y_2$ 对该矩阵进行分块：\n$\\Sigma_{11} = t$\n$\\Sigma_{12} = \\begin{pmatrix} s & t \\end{pmatrix}$\n$\\Sigma_{21} = \\begin{pmatrix} s \\\\ t \\end{pmatrix}$\n$\\Sigma_{22} = \\begin{pmatrix} s & s \\\\ s & T \\end{pmatrix}$\n\n我们需要 $\\Sigma_{22}$ 的逆（对于 $s>0$）：\n$$\n\\Sigma_{22}^{-1} = \\frac{1}{\\det(\\Sigma_{22})} \\begin{pmatrix} T & -s \\\\ -s & s \\end{pmatrix} = \\frac{1}{sT - s^2} \\begin{pmatrix} T & -s \\\\ -s & s \\end{pmatrix} = \\frac{1}{s(T-s)} \\begin{pmatrix} T & -s \\\\ -s & s \\end{pmatrix}\n$$\n给定 $X_s=x_s$ (以及 $X_T=b$) 时 $X_t$ 的条件均值为：\n$$\n\\mathbb{E}[X_t | X_s=x_s, X_T=b] = a + \\Sigma_{12} \\Sigma_{22}^{-1} \\begin{pmatrix} x_s - a \\\\ b - a \\end{pmatrix}\n= a + \\frac{(T-t)(x_s-a) + (t-s)(b-a)}{T-s}\n$$\n展开并化简：\n$$\n= \\frac{a(T-s) + (T-t)x_s - a(T-t) + (t-s)b - a(t-s)}{T-s}\n$$\n$$\n= \\frac{a(T-s - (T-t) - (t-s)) + (T-t)x_s + (t-s)b}{T-s}\n$$\n由于 $T-s - (T-t) - (t-s) = 0$， $a$ 项被消去，剩下：\n$$\n= \\frac{(T-t)x_s + (t-s)b}{T-s} = x_s\\frac{T-t}{T-s} + b\\frac{t-s}{T-s}\n$$\n条件方差为：\n$$\n\\mathrm{Var}(X_t | X_s=x_s, X_T=b) = \\Sigma_{11} - \\Sigma_{12} \\Sigma_{22}^{-1} \\Sigma_{21}\n= t - \\frac{1}{s(T-s)} \\begin{pmatrix} s & t \\end{pmatrix} \\begin{pmatrix} T & -s \\\\ -s & s \\end{pmatrix} \\begin{pmatrix} s \\\\ t \\end{pmatrix}\n$$\n$$\n= t - \\frac{1}{s(T-s)} \\begin{pmatrix} sT-st & st-s^2 \\end{pmatrix} \\begin{pmatrix} s \\\\ t \\end{pmatrix} = t - \\frac{s(sT-st) + t(st-s^2)}{s(T-s)}\n$$\n$$\n= t - \\frac{s^2 T - s^2 t + s t^2 - s^2 t}{s(T-s)} = t - \\frac{s T - 2st + t^2}{T-s}\n$$\n$$\n= \\frac{t(T-s) - (sT - 2st + t^2)}{T-s} = \\frac{tT-ts-sT+2st-t^2}{T-s} = \\frac{tT-sT+st-t^2}{T-s}\n$$\n$$\n= \\frac{T(t-s) - t(t-s)}{T-s} = \\frac{(t-s)(T-t)}{T-s}\n$$\n通过取极限，或者以 $W_0=a$ 为确定值重新推导，这些公式对于 $s=0$ 也成立。因此，条件分布（即转移核）为：\n$$\n(X_t | X_s=x_s, X_T=b) \\sim \\mathcal{N}\\left(x_s\\frac{T-t}{T-s} + b\\frac{t-s}{T-s}, \\frac{(t-s)(T-t)}{T-s}\\right)\n$$\n\n**3. 精确模拟算法**\n\n给定一个严格递增的时间网格 $0=t_0 < t_1 < \\dots < t_n = T$，一条样本路径 $(X_{t_0}, \\dots, X_{t_n})$ 可以按如下方式序贯生成：\n1.  初始化：设 $X_{t_0} = a$。\n2.  对 $k = 0, 1, \\dots, n-1$ 进行迭代：\n    - 状态 $X_{t_k}$ 是已知的。\n    - 从上面推导的条件分布中抽样 $X_{t_{k+1}}$，其中 $s=t_k$，$t=t_{k+1}$，$x_s=X_{t_k}$。\n    - 令 $s=t_k$ 和 $t=t_{k+1}$。条件均值为 $m_k = X_{t_k}\\frac{T-t}{T-s} + b\\frac{t-s}{T-s}$。条件方差为 $v_k = \\frac{(t-s)(T-t)}{T-s}$。\n    - 抽取一个标准正态随机变量 $Z \\sim \\mathcal{N}(0,1)$。\n    - 设 $X_{t_{k+1}} = m_k + \\sqrt{v_k} Z$。\n3.  最终值 $X_{t_n}$ 将恰好为 $b$，因为在最后一步（$k=n-1$）中，$s=t_{n-1}$ 且 $t=t_n=T$，这使得 $m_{n-1}=b$，$v_{n-1}=0$。\n\n**4. 验证方法**\n\n模拟的正确性通过概率积分变换 (PIT) 进行评估。如果一个连续随机变量 $Y$ 的累积分布函数 (CDF) 为 $F_Y$，那么随机变量 $U = F_Y(Y)$ 在 $[0,1]$ 上均匀分布。我们利用此性质来检验转移分布和边际分布。\n\n-   **转移检验**：对于从 $s$ 到 $t$ 的指定转移，我们生成 $N=20000$ 条样本路径。对于每条路径 $i$，我们得到一对 $(X_s^{(i)}, X_t^{(i)})$。给定 $X_s^{(i)}$ 时 $X_t^{(i)}$ 的条件 CDF 是一个正态分布，其均值为 $m^{(i)} = X_s^{(i)}\\frac{T-t}{T-s} + b\\frac{t-s}{T-s}$，方差为 $v = \\frac{(t-s)(T-t)}{T-s}$。我们计算 PIT 值 $U_{trans}^{(i)} = \\Phi\\left( (X_t^{(i)} - m^{(i)})/\\sqrt{v} \\right)$，其中 $\\Phi$ 是标准正态 CDF。\n\n-   **边际检验**：对于指定的时间 $t^\\ast \\in (0, T)$，我们提取模拟值 $X_{t^\\ast}^{(i)}$，其中 $i=1, \\dots, N$。理论边际分布为 $\\mathcal{N}(m_{marg}, v_{marg})$，此处 $m_{marg} = a\\frac{T-t^\\ast}{T} + b\\frac{t^\\ast}{T}$，$v_{marg} = \\frac{t^\\ast(T-t^\\ast)}{T}$。我们计算 PIT 值 $U_{marg}^{(i)} = \\Phi\\left( (X_{t^\\ast}^{(i)} - m_{marg})/\\sqrt{v_{marg}} \\right)$。\n\n对于两组变换后的值 $\\{U_{trans}^{(i)}\\}$ 和 $\\{U_{marg}^{(i)}\\}$，我们检验它们是从 $[0,1]$ 上的均匀分布中抽取的这一假设。这通过 Kolmogorov-Smirnov (KS) 检验完成，该检验计算统计量 $D_N = \\sup_x |F_N(x) - F(x)|$，其中 $F_N$ 是样本的经验分布函数，$F$ 是均匀分布的 CDF，$F(x)=x$。如果转移 KS 统计量和边际 KS 统计量都低于给定阈值 $\\delta = 0.03$，则测试用例通过。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\nfrom scipy.stats import norm, kstest\n\ndef solve():\n    \"\"\"\n    Implements the Brownian bridge simulation and verification as per the problem statement.\n    \"\"\"\n    # Define constants from the problem statement.\n    N = 20000\n    SEED = 123456\n    DELTA = 0.03\n\n    # Define the test cases from the problem statement.\n    test_cases = [\n        # (T, a, b, grid, s_test, t_test, t_star_test)\n        (1.0, 0.0, 0.8, [0.0, 0.2, 0.5, 0.9, 1.0], 0.5, 0.9, 0.5),\n        (1.0, 0.5, -0.5, [0.0, 0.95, 0.99, 1.0], 0.95, 0.99, 0.99),\n        (2.5, -1.0, 0.5, [0.0, 0.1, 0.4, 1.3, 2.0, 2.5], 1.3, 2.0, 2.0),\n        (1.0, 0.2, 0.0, [0.0, 0.4, 0.4005, 1.0], 0.4, 0.4005, 0.4005),\n    ]\n\n    results = []\n\n    for case in test_cases:\n        T, a, b, grid, s_test, t_test, t_star_test = case\n        \n        time_grid = np.array(grid, dtype=float)\n        n_points = len(time_grid)\n        \n        # Find indices for verification points\n        s_idx = np.where(np.isclose(time_grid, s_test))[0][0]\n        t_idx = np.where(np.isclose(time_grid, t_test))[0][0]\n        t_star_idx = np.where(np.isclose(time_grid, t_star_test))[0][0]\n\n        # Initialize pseudorandom number generator for reproducibility.\n        rng = np.random.default_rng(SEED)\n\n        # Array to store all N paths.\n        x_paths = np.zeros((N, n_points))\n        x_paths[:, 0] = a\n\n        # Sequentially generate points for each path.\n        for k in range(n_points - 1):\n            s_k = time_grid[k]\n            t_k_plus_1 = time_grid[k+1]\n            \n            # This check handles the final step where t_k_plus_1 = T, which has 0 variance.\n            # In this case, mean is b and variance is 0.\n            if np.isclose(T - s_k, 0):\n                x_paths[:, k+1] = b\n                continue\n\n            prev_x = x_paths[:, k]\n            \n            # Derived one-step transition kernel parameters\n            # Mean: x_s * (T-t)/(T-s) + b * (t-s)/(T-s)\n            # Var: (t-s)*(T-t)/(T-s)\n            mean_trans = prev_x * (T - t_k_plus_1) / (T - s_k) + b * (t_k_plus_1 - s_k) / (T - s_k)\n            var_trans = (t_k_plus_1 - s_k) * (T - t_k_plus_1) / (T - s_k)\n            \n            # Ensure variance is non-negative due to potential float inaccuracies\n            if var_trans  0:\n                var_trans = 0.0\n\n            std_trans = np.sqrt(var_trans)\n            \n            # Generate standard normal samples\n            z = rng.standard_normal(N)\n\n            # Sample the next point in the paths\n            x_paths[:, k+1] = mean_trans + std_trans * z\n            \n        # --- Verification ---\n\n        # 1. Transition probability integral transform test\n        x_s_samples = x_paths[:, s_idx]\n        x_t_samples = x_paths[:, t_idx]\n        \n        # Theoretical conditional mean and variance for the test transition (s_test -> t_test)\n        m_cond = x_s_samples * (T - t_test) / (T - s_test) + b * (t_test - s_test) / (T - s_test)\n        v_cond = (t_test - s_test) * (T - t_test) / (T - s_test)\n        s_cond = np.sqrt(v_cond)\n\n        u_trans = norm.cdf((x_t_samples - m_cond) / s_cond)\n        ks_stat_trans, _ = kstest(u_trans, 'uniform')\n\n        # 2. Marginal probability integral transform test\n        x_t_star_samples = x_paths[:, t_star_idx]\n\n        # Theoretical marginal mean and variance at t_star_test\n        m_marg = a * (T - t_star_test) / T + b * t_star_test / T\n        v_marg = t_star_test * (T - t_star_test) / T\n        \n        # Failsafe for t_star=0 or t_star=T, though problem states t_star is interior.\n        if v_marg > 0:\n            s_marg = np.sqrt(v_marg)\n            u_marg = norm.cdf((x_t_star_samples - m_marg) / s_marg)\n            ks_stat_marg, _ = kstest(u_marg, 'uniform')\n        else: # If variance is 0, the distribution is a Dirac delta. KS test is not applicable.\n              # Assign a failing stat. This case should not be reached with valid inputs.\n            ks_stat_marg = 1.0\n\n        # Check if both KS statistics are below the threshold.\n        passed = (ks_stat_trans  DELTA) and (ks_stat_marg  DELTA)\n        results.append(str(passed))\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n```", "id": "3000113"}]}