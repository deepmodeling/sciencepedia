{"hands_on_practices": [{"introduction": "奥恩斯坦-乌伦贝克（OU）过程是随机过程理论的基石，它为模拟从物理学中的布朗运动到金融学中的利率动态等各种现象提供了一个线性框架。此练习旨在将细致平衡的抽象定义与这类过程的具体、可验证的代数条件联系起来。通过从第一性原理出发，你将推导出可逆性的核心条件，将系统的 drift 矩阵 $B$ 和 noise 协方差 $Q$ 联系起来，此过程将 Fokker-Planck 方程、平稳协方差矩阵和 Lyapunov 方程等关键工具紧密地结合在一起 [@problem_id:2994321]。", "problem": "考虑由以下随机微分方程定义的 $d$ 维奥恩斯坦-乌伦贝克 (OU) 过程\n$$\n\\mathrm{d}X_{t} \\,=\\, - B X_{t} \\,\\mathrm{d}t \\,+\\, \\sqrt{2}\\, \\sigma \\,\\mathrm{d}W_{t},\n$$\n其中 $B \\in \\mathbb{R}^{d \\times d}$ 的特征值具有严格为正的实部（因此该过程存在唯一的不变测度），$\\sigma \\in \\mathbb{R}^{d \\times m}$ 是一个常数矩阵，$W_{t}$ 是一个标准的 $m$ 维维纳过程，且 $Q := \\sigma \\sigma^{\\top} \\in \\mathbb{R}^{d \\times d}$ 是对称正定矩阵。令 $S \\in \\mathbb{R}^{d \\times d}$ 表示 $X_{t}$ 的不变高斯测度的协方差矩阵。\n\n从随机微分方程和统计力学的第一性原理出发，即：\n- 具有常数扩散矩阵的扩散过程的稳态福克-普朗克方程，\n- 将细致平衡定义为稳态概率流为零，以及\n- 通过连续时间李雅普诺夫方程对 OU 过程的 $S$ 进行的刻画，\n推导在该 OU 过程对其不变高斯测度可逆的条件下，矩阵对 $(B,Q)$ 所需满足的充分必要条件。您的推导必须明确地将可逆性与一个涉及 $B$ 和 $Q$ 的对称性条件联系起来，并将其与关于 $S$ 的李雅普诺夫方程关联。\n\n然后，在这些条件下，确定不变协方差 $S$ 关于 $B$ 和 $Q$ 的闭式表达式。\n\n请以单个 $S$ 的闭式解析矩阵表达式的形式提供您的最终答案（不含方程或不等式，也无单位）。请勿对答案进行四舍五入。", "solution": "该问题陈述经核实具有科学依据，并且是适定、客观和完整的。它提出了一个随机过程理论中标准的、可解的问题。\n\n奥恩斯坦-乌伦贝克 (OU) 过程由以下随机微分方程 (SDE) 描述：\n$$\n\\mathrm{d}X_{t} \\,=\\, -B X_{t} \\,\\mathrm{d}t \\,+\\, \\sqrt{2} \\sigma \\,\\mathrm{d}W_{t}\n$$\n这是一个形式为 $\\mathrm{d}X_t = b(X_t) \\mathrm{d}t + \\Sigma(X_t) \\mathrm{d}W_t$ 的线性 SDE，其中漂移向量为 $b(x) = -Bx$，扩散矩阵为 $\\Sigma(x) = \\sqrt{2}\\sigma$。问题指明 $\\sigma$ 是一个常数矩阵。\n\n相应的稳态福克-普朗克方程描述了该过程概率密度函数 $p(x)$ 的时间演化。在稳态下，$\\frac{\\partial p}{\\partial t} = 0$，方程简化为概率流 $J(x)$ 的散度为零的陈述：$\\nabla \\cdot J(x) = 0$。概率流由下式给出：\n$$\nJ(x) = b(x)p(x) - \\nabla \\cdot (D p(x))\n$$\n其中 $D$ 是扩散张量，定义为 $D = \\frac{1}{2} \\Sigma \\Sigma^{\\top}$。对于此过程，我们有：\n$$\nD = \\frac{1}{2} (\\sqrt{2}\\sigma)(\\sqrt{2}\\sigma)^{\\top} = \\frac{1}{2} (2 \\sigma\\sigma^{\\top}) = \\sigma\\sigma^{\\top} = Q\n$$\n由于 $Q$ 是一个常数矩阵，梯度项简化为 $\\nabla \\cdot (Q p(x)) = Q \\nabla p(x)$。因此，概率流为：\n$$\nJ(x) = -B x p(x) - Q \\nabla p(x)\n$$\n\n可逆性（或称细致平衡）的条件比稳态性更强。它要求稳态概率流对所有 $x$ 恒为零：$J(x)=0$。将此应用于我们的概率流表达式，得到：\n$$\n-B x p(x) - Q \\nabla p(x) = 0\n$$\n\n问题陈述该过程存在一个唯一的不变高斯测度。此测度的概率密度函数 $p(x)$ 的形式为：\n$$\np(x) = C \\exp\\left(-\\frac{1}{2} x^{\\top} S^{-1} x\\right)\n$$\n其中 $S$ 是稳态分布的对称正定协方差矩阵，$C$ 是归一化常数。为了使用细致平衡条件，我们需要求 $p(x)$ 的梯度：\n$$\n\\nabla p(x) = p(x) \\nabla \\left(-\\frac{1}{2} x^{\\top} S^{-1} x\\right)\n$$\n利用二次型梯度的恒等式 $\\nabla(x^{\\top} A x) = (A+A^{\\top})x$，以及 $S^{-1}$ 是对称的这一事实，我们发现：\n$$\n\\nabla(x^{\\top} S^{-1} x) = 2 S^{-1} x\n$$\n因此，对数概率的梯度为 $\\nabla \\left(-\\frac{1}{2} x^{\\top} S^{-1} x\\right) = -S^{-1}x$。这给出：\n$$\n\\nabla p(x) = -p(x) S^{-1} x\n$$\n\n现在，我们将 $\\nabla p(x)$ 的这个表达式代回细致平衡条件 $J(x) = 0$ 中：\n$$\n-B x p(x) - Q(-p(x) S^{-1} x) = 0\n$$\n对于任何使得 $p(x) > 0$ 的 $x$，我们可以除以 $p(x)$ 得到：\n$$\n-B x + Q S^{-1} x = 0 \\quad \\implies \\quad (Q S^{-1} - B)x = 0\n$$\n由于该方程必须对所有 $x \\in \\mathbb{R}^d$ 成立，因此矩阵因子必须是零矩阵：\n$$\nQ S^{-1} - B = 0 \\quad \\implies \\quad B = Q S^{-1}\n$$\n假设 $B$ 是可逆的（这一点由其所有特征值的实部都严格为正所保证），我们可以用 $B$ 和 $Q$ 来表示 $S$。右乘 $S$ 得到用 $B$、$Q$ 和 $S$ 表示的可逆性条件：\n$$\nBS = Q\n$$\n\n这个条件必须与稳态协方差矩阵 $S$ 的一般方程相协调。对于任何给定形式的 OU 过程，稳态协方差矩阵 $S$ 是以下连续时间李雅普诺夫方程的唯一、对称、正定解：\n$$\nBS + SB^{\\top} = 2Q\n$$\n无论过程是否可逆，该方程都成立。\n\n为了使过程可逆，其协方差矩阵 $S$ 必须同时满足可逆性条件 $BS = Q$ 和李雅普诺夫方程。将 $BS=Q$ 代入李雅普诺夫方程，得到：\n$$\nQ + SB^{\\top} = 2Q \\quad \\implies \\quad SB^{\\top} = Q\n$$\n因此，在可逆的情况下，李雅普诺夫方程实际上可以分解为两个更简单的条件：\n$$\nBS = Q \\quad \\text{和} \\quad SB^{\\top} = Q\n$$\n令这两个 $Q$ 的表达式相等，得到 $BS = SB^{\\top}$。这是一个关于矩阵 $B$ 相对于由 $S$ 定义的内积的对称性条件。为了获得一个仅基于给定矩阵 $B$ 和 $Q$ 的条件，我们可以使用 $S = B^{-1}Q$（来自 $BS=Q$）。将此代入第二个方程 $SB^{\\top}=Q$ 中，得到：\n$$\n(B^{-1}Q)B^{\\top} = Q\n$$\n左乘 $B$ 给出可逆性的必要条件：\n$$\nQB^{\\top} = BQ\n$$\n该条件表明 $B$ 和 $Q$ 必须以一种特定的方式对易。这可以解释为 $B$ 相对于由 $Q^{-1}$ 导出的内积是自伴的。\n\n为了证明这个条件也是充分的，我们假设 $BQ = QB^{\\top}$ 并证明该过程是可逆的。稳态协方差 $S$ 是李雅普诺夫方程 $BS + SB^{\\top} = 2Q$ 的唯一对称正定解。我们必须证明，如果 $BQ = QB^{\\top}$，这个解 $S$ 也满足可逆性条件 $BS=Q$。\n我们提出候选解 $S_{p} = B^{-1}Q$。\n首先，在 $BQ = QB^{\\top}$ 的假设下，我们检查 $S_{p}$ 是否对称：\n$$\nS_{p}^{\\top} = (B^{-1}Q)^{\\top} = Q^{\\top}(B^{-1})^{\\top} = Q(B^{\\top})^{-1}\n$$\n要使 $S_{p}$ 对称，我们需要 $B^{-1}Q = Q(B^{\\top})^{-1}$。左乘 $B$ 并右乘 $B^{\\top}$ 表明，这等价于我们的假设条件 $QB^{\\top} = BQ$。因此，$S_p$ 是对称的。\n其次，我们检查在我们的假设下 $S_{p}$ 是否是李雅普诺夫方程的解：\n$$\nBS_{p} + S_{p}B^{\\top} = B(B^{-1}Q) + (B^{-1}Q)B^{\\top} = Q + B^{-1}(QB^{\\top})\n$$\n使用假设 $QB^{\\top}=BQ$，表达式变为：\n$$\nQ + B^{-1}(BQ) = Q + (B^{-1}B)Q = Q + IQ = 2Q\n$$\n所以，$S_{p} = B^{-1}Q$ 确实是李雅普诺夫方程的唯一对称解。因此，实际的协方差矩阵是 $S = B^{-1}Q$。\n最后，对于这个 $S$，我们检查可逆性条件 $BS=Q$：\n$$\nBS = B(B^{-1}Q) = Q\n$$\n条件得到满足。因此，$BQ = QB^{\\top}$ 是 OU 过程可逆的充分必要条件。\n\n问题的第二部分要求在这些条件下给出不变协方差 $S$ 的闭式表达式。如上面的充分性证明所示，当可逆性条件 $BQ = QB^{\\top}$ 成立时，解李雅普诺夫方程得到的稳态协方差矩阵 $S$ 由下式给出：\n$$\nS = B^{-1}Q\n$$\n这就是所要求的闭式表达式。", "answer": "$$\n\\boxed{B^{-1}Q}\n$$", "id": "2994321"}, {"introduction": "在确定了线性系统的可逆性条件后，一个自然而然的问题是：当该条件不满足时会发生什么？本练习将探讨一个经典的非可逆平稳过程案例：一个二维 OU 过程中包含了一个固有的旋转分量。你将证实该过程是平稳的，但由于存在持续的概率流而并非可逆的。此实践通过将系统的生成元分解为其可逆（对称）和不可逆（反对称）部分，加深了你对不可逆性的理解，并为“非可逆性”的程度提供了一个定量度量 [@problem_id:2994291]。", "problem": "考虑一个由随机微分方程 (SDE) 定义的二维 Ornstein–Uhlenbeck 扩散过程\n$$\n\\mathrm{d}X_{t} \\;=\\; - B \\, X_{t} \\,\\mathrm{d}t \\;+\\; \\sqrt{2} \\, \\mathrm{d}W_{t},\n$$\n其中 $X_{t} \\in \\mathbb{R}^{2}$，$W_{t}$ 是一个标准的二维布朗运动，而 $B \\in \\mathbb{R}^{2 \\times 2}$ 是常数漂移矩阵\n$$\nB \\;=\\; \\begin{pmatrix} 1 & -\\omega \\\\ \\omega & 1 \\end{pmatrix}\n$$\n参数 $\\omega \\in \\mathbb{R} \\setminus \\{0\\}$。作用于二次连续可微函数 $f \\colon \\mathbb{R}^{2} \\to \\mathbb{R}$ 的生成元 $\\mathcal{L}$ 为\n$$\n\\mathcal{L} f(x) \\;=\\; - (B x) \\cdot \\nabla f(x) \\;+\\; \\Delta f(x),\n$$\n其中 $\\Delta$ 是拉普拉斯算子。设 $\\pi$ 为该过程的一个候选稳态密度，并回想一下，稳态性由稳态 Fokker–Planck 方程 $\\mathcal{L}^{*} \\pi = 0$ 定义，其中 $\\mathcal{L}^{*}$ 是关于勒贝格测度的伴随算子；而可逆性（细致平衡）由 $\\mathcal{L}$ 在 $L^{2}(\\pi)$ 中关于内积 $\\langle f, g \\rangle_{\\pi} = \\int_{\\mathbb{R}^{2}} f g \\, \\pi$ 的自伴性定义。\n\n基于这些基础：\n- 确定一个高斯形式的稳态密度 $\\pi(x) \\propto \\exp\\!\\big(-\\tfrac{1}{2} x^{\\top} \\Sigma^{-1} x\\big)$，并找出满足稳态条件的协方差 $\\Sigma$。\n- 使用细致平衡的定义，通过证明相应对称条件的失效来验证该过程是稳态但不可逆的，并解释这如何与扩散矩阵 $Q = I$ 时的非对易性 $B Q \\neq Q B^{\\top}$ 相关联。\n- 将生成元 $\\mathcal{L}$ 分解为关于 $L^{2}(\\pi)$ 内积的对称部分和反对称部分之和，并提取由漂移产生的反对称分量。通过计算其系数矩阵的 Frobenius 范数来量化该反对称部分。\n\n你的最终答案必须是反对称部分系数矩阵的 Frobenius 范数的精确符号表达式，表示为参数 $\\omega$ 的函数。无需四舍五入。最终答案中不应提供单位。", "solution": "该问题是有效的，因为它具有科学依据、提法明确且客观。它涉及一个标准的二维 Ornstein-Uhlenbeck 过程，并且所有概念，如生成元、Fokker-Planck 方程和细致平衡，在随机微分方程理论中都有明确的定义。\n\n问题分三部分解决：首先，确定稳态密度；其次，分析其可逆性；第三，分解生成元以量化反对称分量。\n\n**1. 稳态密度**\n\n给定的随机微分方程 (SDE) 是一个线性的 Ornstein-Uhlenbeck 过程：\n$$\n\\mathrm{d}X_{t} = -B X_{t} \\mathrm{d}t + \\sqrt{2} \\mathrm{d}W_{t}\n$$\n其中 $X_{t} \\in \\mathbb{R}^{2}$，$B = \\begin{pmatrix} 1 & -\\omega \\\\ \\omega & 1 \\end{pmatrix}$，$W_{t}$ 是一个标准的二维布朗运动。该 SDE 的形式为 $\\mathrm{d}X_{t} = b(X_t)\\mathrm{d}t + \\sigma \\mathrm{d}W_{t}$，其中漂移为 $b(x) = -Bx$，扩散矩阵为 $\\sigma = \\sqrt{2}I$。与扩散项相关的矩阵 $Q$ 由 $2Q = \\sigma \\sigma^{\\top}$ 定义。此处，$\\sigma \\sigma^{\\top} = (\\sqrt{2}I)(\\sqrt{2}I)^{\\top} = 2I$，这意味着 $Q=I$。\n\n如果漂移矩阵 $B$ 是稳定的，即其所有特征值的实部均为正，则该过程存在一个稳态高斯分布 $\\pi(x) \\propto \\exp(-\\frac{1}{2} x^{\\top} \\Sigma^{-1} x)$。$B$ 的特征方程是 $\\det(B - \\lambda I) = 0$，这给出 $(1-\\lambda)^2 - (-\\omega)(\\omega) = (1-\\lambda)^2 + \\omega^2 = 0$。特征值为 $\\lambda = 1 \\pm i\\omega$。两个特征值的实部都是 $1 > 0$，因此存在一个唯一的稳态分布。\n\n这个稳态分布的协方差矩阵 $\\Sigma$ 是连续时间 Lyapunov 方程的唯一对称正定解：\n$$\nB \\Sigma + \\Sigma B^{\\top} = 2Q\n$$\n代入 $B$ 和 $Q=I$，我们得到：\n$$\n\\begin{pmatrix} 1 & -\\omega \\\\ \\omega & 1 \\end{pmatrix} \\Sigma + \\Sigma \\begin{pmatrix} 1 & \\omega \\\\ -\\omega & 1 \\end{pmatrix} = 2 \\begin{pmatrix} 1 & 0 \\\\ 0 & 1 \\end{pmatrix}\n$$\n设 $\\Sigma = \\begin{pmatrix} a & c \\\\ c & b \\end{pmatrix}$ 是一个对称矩阵。Lyapunov 方程变为：\n$$\n\\begin{pmatrix} 1 & -\\omega \\\\ \\omega & 1 \\end{pmatrix} \\begin{pmatrix} a & c \\\\ c & b \\end{pmatrix} + \\begin{pmatrix} a & c \\\\ c & b \\end{pmatrix} \\begin{pmatrix} 1 & \\omega \\\\ -\\omega & 1 \\end{pmatrix} = \\begin{pmatrix} 2 & 0 \\\\ 0 & 2 \\end{pmatrix}\n$$\n$$\n\\begin{pmatrix} a - c\\omega & c - b\\omega \\\\ a\\omega + c & c\\omega + b \\end{pmatrix} + \\begin{pmatrix} a - c\\omega & a\\omega + c \\\\ c - b\\omega & c\\omega + b \\end{pmatrix} = \\begin{pmatrix} 2 & 0 \\\\ 0 & 2 \\end{pmatrix}\n$$\n$$\n\\begin{pmatrix} 2(a - c\\omega) & (a-b)\\omega + 2c \\\\ (a-b)\\omega + 2c & 2(c\\omega + b) \\end{pmatrix} = \\begin{pmatrix} 2 & 0 \\\\ 0 & 2 \\end{pmatrix}\n$$\n这产生了一个关于 $a, b, c$ 的线性方程组：\n1. $a - c\\omega = 1$\n2. $(a-b)\\omega + 2c = 0$\n3. $c\\omega + b = 1$\n\n从 (1) 和 (3)，我们得到 $a = 1 + c\\omega$ 和 $b = 1 - c\\omega$。将它们代入 (2)：\n$$\n((1+c\\omega) - (1-c\\omega))\\omega + 2c = (2c\\omega)\\omega + 2c = 2c\\omega^2 + 2c = 2c(\\omega^2 + 1) = 0\n$$\n因为问题陈述 $\\omega \\in \\mathbb{R} \\setminus \\{0\\}$，我们有 $\\omega^2+1 > 0$。因此，$c=0$。将 $c=0$ 代回 $a$ 和 $b$ 的表达式，得到 $a=1$ 和 $b=1$。\n因此，协方差矩阵是 $\\Sigma = \\begin{pmatrix} 1 & 0 \\\\ 0 & 1 \\end{pmatrix} = I$。稳态密度是一个标准的二维高斯分布：\n$$\n\\pi(x) = \\frac{1}{2\\pi} \\exp\\left(-\\frac{1}{2} x^{\\top} x\\right)\n$$\n\n**2. 稳态性与非可逆性**\n\nLyapunov 方程存在唯一解 $\\Sigma=I$，这证实了该过程对于所确定的高斯密度 $\\pi(x)$ 是稳态的。\n\n一个扩散过程关于其稳态测度 $\\pi$ 是可逆的（满足细致平衡），当且仅当其生成元 $\\mathcal{L}$ 在希尔伯特空间 $L^2(\\pi)$ 中是自伴的。对于具有稳态协方差 $\\Sigma$ 的 Ornstein-Uhlenbeck 过程，这个条件简化为矩阵方程：\n$$\nB\\Sigma = (B\\Sigma)^{\\top} = \\Sigma^{\\top}B^{\\top}\n$$\n因为 $\\Sigma$ 是对称的 ($\\Sigma = \\Sigma^{\\top}$)，这等价于 $B\\Sigma = \\Sigma B^{\\top}$。在我们的例子中，当 $\\Sigma=I$ 时，可逆性的条件变为 $B = B^{\\top}$。\n让我们检查这个条件：\n$$\nB = \\begin{pmatrix} 1 & -\\omega \\\\ \\omega & 1 \\end{pmatrix}, \\quad B^{\\top} = \\begin{pmatrix} 1 & \\omega \\\\ -\\omega & 1 \\end{pmatrix}\n$$\n为了使 $B = B^{\\top}$，我们必须有 $-\\omega = \\omega$，这意味着 $2\\omega=0$，所以 $\\omega=0$。然而，问题规定了 $\\omega \\in \\mathbb{R} \\setminus \\{0\\}$。因此，$B \\neq B^{\\top}$，该过程是不可逆的。这种非对称性与问题中提到的非对易性质直接相关，因为对于 $Q=I$，可逆性条件 $B Q = Q B^{\\top}$ 显然就是 $B=B^{\\top}$。\n\n**3. 生成元的分解**\n\n该过程的生成元是 $\\mathcal{L}f(x) = - (Bx) \\cdot \\nabla f(x) + \\Delta f(x)$。我们可以将 $\\mathcal{L}$ 分解为关于 $L^2(\\pi)$ 内积的对称部分 $\\mathcal{L}_S$ 和反对称部分 $\\mathcal{L}_A$。这种分解基于将漂移向量 $b(x)$ 分裂为一个可逆（梯度）部分和一个不可逆（螺线）部分。\n$$\nb(x) = D \\nabla \\ln \\pi(x) + j(x)\n$$\n其中 $D = \\frac{1}{2}\\sigma\\sigma^{\\top} = I$ 是扩散张量，$D \\nabla \\ln \\pi$ 是可逆漂移，$j(x)$ 是不可逆漂移。于是生成元为 $\\mathcal{L}f = (D \\nabla \\ln \\pi + j(x)) \\cdot \\nabla f + \\Delta f$。各分量为：\n- 对称部分：$\\mathcal{L}_S f = \\frac{1}{\\pi} \\nabla \\cdot (\\pi D \\nabla f) = (D \\nabla \\ln \\pi) \\cdot \\nabla f + \\Delta f$ (因为 $\\text{tr}(D)=2, \\nabla \\cdot (D \\nabla f) = \\Delta f$)\n- 反对称部分：$\\mathcal{L}_A f = j(x) \\cdot \\nabla f$\n\n对于我们的过程，我们有 $b(x) = -Bx$ 和 $\\nabla \\ln \\pi(x) = -x$。不可逆漂移 $j(x)$ 是：\n$$\nj(x) = b(x) - D \\nabla \\ln \\pi(x) = -Bx - I(-x) = -Bx + x = (I-B)x\n$$\n因此，由漂移产生的生成元的反对称部分是 $\\mathcal{L}_A f(x) = ((I-B)x) \\cdot \\nabla f(x)$。这个反对称分量的“系数矩阵”是满足 $j(x) = Ax$ 的矩阵 $A$。\n$$\nA = I - B = \\begin{pmatrix} 1 & 0 \\\\ 0 & 1 \\end{pmatrix} - \\begin{pmatrix} 1 & -\\omega \\\\ \\omega & 1 \\end{pmatrix} = \\begin{pmatrix} 0 & \\omega \\\\ -\\omega & 0 \\end{pmatrix}\n$$\n这是一个反对称矩阵，正如对不可逆漂移所预期的那样。为了量化这一部分，我们计算其 Frobenius 范数 $\\|A\\|_F$。\n$$\n\\|A\\|_F = \\sqrt{\\sum_{i=1}^{2}\\sum_{j=1}^{2} |A_{ij}|^2} = \\sqrt{0^2 + \\omega^2 + (-\\omega)^2 + 0^2} = \\sqrt{2\\omega^2}\n$$\n由于 $\\omega$ 是一个实数，这可以简化为：\n$$\n\\|A\\|_F = \\sqrt{2}|\\omega|\n$$\n这个值度量了动力学中不可逆部分的强度。", "answer": "$$\\boxed{\\sqrt{2}|\\omega|}$$", "id": "2994291"}, {"introduction": "这项最终实践将挑战从理论分析转向实际工程设计：我们如何设计一个随机动态，使其具有我们预先指定的可逆测度？这在计算统计学（如马尔可夫链蒙特卡洛）和分子动力学等领域是一项至关重要的任务。该练习将理论推导与计算验证相结合，要求你首先为具有状态依赖扩散系数的通用一维过程找到确保可逆性的漂移项，然后编写代码来数值验证所产生的动力学在短时演化尺度上是否近似满足细致平衡条件 [@problem_id:2994264]。", "problem": "考虑一维 Itô 随机微分方程 (SDE)\n$$\ndX_t = b(X_t)\\,dt + \\sqrt{2\\,a(X_t)}\\,dW_t,\n$$\n其中 $W_t$ 是一个标准布朗运动（BM），$a(x) > 0$ 是一个给定的二次连续可微的扩散系数，$b(x)$ 是一个待定的漂移项。令 $\\pi(x)$ 为 $\\mathbb{R}$ 上的一个严格为正的连续可微的目标密度，并令 $\\mathsf{L}$ 为作用于光滑函数 $f$ 的无穷小生成元，\n$$\n\\mathsf{L} f(x) = a(x)\\,f''(x) + b(x)\\,f'(x).\n$$\n如果细致平衡条件成立，我们称 $\\pi(x)\\,dx$ 是对于生成元为 $\\mathsf{L}$ 的扩散过程的一个可逆测度。这等价于 $\\mathsf{L}$ 在一个合适的定义域上于 $L^2(\\pi)$ 中是自伴的，意即\n$$\n\\int_{\\mathbb{R}} f(x)\\,\\mathsf{L}g(x)\\,\\pi(x)\\,dx = \\int_{\\mathbb{R}} g(x)\\,\\mathsf{L}f(x)\\,\\pi(x)\\,dx\n$$\n对于足够光滑的紧支集函数 $f$ 和 $g$ 成立。\n\n你的任务是：\n\n1. 从 $\\mathsf{L}$ 在 $L^2(\\pi)$ 中是自伴的要求出发，推导出漂移项 $b(x)$ 关于 $a(x)$ 和 $\\pi(x)$ 的显式表达式，该表达式确保了可逆性。除了上述声明之外，不要对 $a(x)$ 或 $\\pi(x)$ 作任何特殊形式的假设。\n\n2. 将问题特化到以下显式的非恒定扩散系数\n$$\na(x) = 1 + \\alpha x^2,\n$$\n其中 $\\alpha > 0$ 是一个参数，以及目标密度\n$$\n\\pi(x) \\propto e^{-V(x)}, \\quad V(x) = \\tfrac{1}{2}x^2.\n$$\n利用你在第1部分得到的结果，计算在此选定的 $a(x)$ 和 $\\pi(x)$ 下 $b(x)$ 的闭式表达式。\n\n3. 对于小的时间步长 $\\Delta t > 0$，使用高斯密度近似短时转移核\n$$\np_{\\Delta t}(x,y) \\approx \\frac{1}{\\sqrt{4\\pi\\,a(x)\\,\\Delta t}}\\exp\\!\\left(-\\frac{\\big(y - x - b(x)\\,\\Delta t\\big)^2}{4\\,a(x)\\,\\Delta t}\\right),\n$$\n这是由 Euler–Maruyama 局部近似得到的结果。定义在 $(x,y)$ 处，时间步长为 $\\Delta t$ 的细致平衡对数比率误差为\n$$\n\\varepsilon_{\\mathrm{db}}(x,y;\\Delta t) = \\log \\pi(x) + \\log p_{\\Delta t}(x,y) - \\log \\pi(y) - \\log p_{\\Delta t}(y,x).\n$$\n对于下述每个测试用例，计算最大绝对误差\n$$\nE_{\\max} = \\max_{x \\in \\mathcal{X}} \\max_{k \\in \\{-2,-1,0,1,2\\}} \\left| \\varepsilon_{\\mathrm{db}}\\big(x, x + k\\,\\sigma(x);\\Delta t\\big) \\right|,\n$$\n其中 $\\sigma(x) = \\sqrt{2\\,a(x)\\,\\Delta t}$，$\\mathcal{X}$ 是 $[-X_{\\max},X_{\\max}]$ 上一个包含 $N$ 个点的均匀间隔网格，且 $N \\ge 201$。该度量捕捉了短时高斯核相对于 $\\pi$ 近似满足细致平衡的程度。对每个测试用例，将 $E_{\\max}$ 作为浮点数报告。\n\n科学真实性要求：使用所述的近似，不要引入边界条件；定义域为 $\\mathbb{R}$，且高斯核按其书面形式采用。不涉及物理单位。\n\n测试套件和输出规格：\n- 使用以下五个测试用例，每个由 $(\\alpha,\\Delta t,X_{\\max})$ 指定：\n    1. $(0.5, 10^{-3}, 3)$,\n    2. $(0.5, 10^{-4}, 3)$,\n    3. $(1.0, 10^{-3}, 3)$,\n    4. $(0.1, 10^{-3}, 3)$,\n    5. $(0.5, 5\\cdot 10^{-3}, 6)$.\n- 对每个测试用例，如上所述计算 $E_{\\max}$，使用 $N=401$ 个网格点。\n- 你的程序应生成单行输出，其中包含一个用方括号括起来的逗号分隔列表（例如，“[result1,result2,result3,result4,result5]”），结果的顺序与上述测试用例的顺序一致。每个“result”是对应的 $E_{\\max}$ 浮点数值。\n\n最终答案必须是一个完整的、可运行的程序，该程序执行所述的依赖于推导的计算，并以指定的格式输出结果。", "solution": "该问题被评估为有效。它在随机微分方程理论方面有科学依据，是适定的、客观的，并包含了得出完整解所需的所有必要信息。\n\n解答过程按要求分为三个部分。\n\n### 第1部分：可逆性漂移项的推导\n\n我们的任务是找到漂移系数 $b(x)$，使得无穷小生成元 $\\mathsf{L}$ 在空间 $L^2(\\pi)$ 中是自伴的。该生成元由\n$$ \\mathsf{L} f(x) = a(x)f''(x) + b(x)f'(x) $$\n给出，自伴性（即关于测度 $\\pi(x)dx$ 的可逆性）的条件是\n$$ \\int_{\\mathbb{R}} f(x)\\,\\mathsf{L}g(x)\\,\\pi(x)\\,dx = \\int_{\\mathbb{R}} g(x)\\,\\mathsf{L}f(x)\\,\\pi(x)\\,dx $$\n对所有具有紧支集的足够光滑的函数 $f$ 和 $g$ 成立。\n\n让我们分析自伴条件的左侧 (LHS)：\n$$ \\text{LHS} = \\int_{\\mathbb{R}} f(x)\\,(a(x)g''(x) + b(x)g'(x))\\,\\pi(x)\\,dx $$\n$$ \\text{LHS} = \\int_{\\mathbb{R}} f(x)a(x)\\pi(x)\\,g''(x)\\,dx + \\int_{\\mathbb{R}} f(x)b(x)\\pi(x)\\,g'(x)\\,dx $$\n我们对两项都使用分部积分。由于 $f$ 和 $g$ 具有紧支集，所有在 $\\pm\\infty$ 处的边界项都为零。\n\n对于第一项，我们进行两次分部积分：\n$$ \\int_{\\mathbb{R}} [f(x)a(x)\\pi(x)]\\,g''(x)\\,dx = - \\int_{\\mathbb{R}} [f(x)a(x)\\pi(x)]'\\,g'(x)\\,dx = \\int_{\\mathbb{R}} [f(x)a(x)\\pi(x)]''\\,g(x)\\,dx $$\n对于第二项，我们进行一次分部积分：\n$$ \\int_{\\mathbb{R}} [f(x)b(x)\\pi(x)]\\,g'(x)\\,dx = - \\int_{\\mathbb{R}} [f(x)b(x)\\pi(x)]'\\,g(x)\\,dx $$\n将它们合并，LHS 变为：\n$$ \\text{LHS} = \\int_{\\mathbb{R}} \\left( [f(x)a(x)\\pi(x)]'' - [f(x)b(x)\\pi(x)]' \\right) g(x)\\,dx $$\n自伴条件的右侧 (RHS) 是：\n$$ \\text{RHS} = \\int_{\\mathbb{R}} g(x)\\,\\mathsf{L}f(x)\\,\\pi(x)\\,dx = \\int_{\\mathbb{R}} g(x)\\,(a(x)f''(x) + b(x)f'(x))\\,\\pi(x)\\,dx $$\n为了使积分等式对任意（具有紧支集的光滑）函数 $g(x)$ 都成立，被积函数必须相等：\n$$ [f(x)a(x)\\pi(x)]'' - [f(x)b(x)\\pi(x)]' = (a(x)f''(x) + b(x)f'(x))\\,\\pi(x) $$\n让我们展开左侧的导数，使用撇号表示对 $x$ 的微分：\n$$ ( (fa\\pi)' )' - (fb\\pi)' = (f'a\\pi + f(a\\pi)')' - (f'b\\pi + f(b\\pi)') $$\n$$ = (f''a\\pi + f'(a\\pi)' + f'(a\\pi)' + f(a\\pi)'') - (f'b\\pi + f(b\\pi)') $$\n$$ = f''a\\pi + 2f'(a\\pi)' + f(a\\pi)'' - f'b\\pi - f(b\\pi)' $$\n$$ = (a\\pi)f'' + (2(a\\pi)' - b\\pi)f' + ((a\\pi)'' - (b\\pi)')f $$\n现在我们将其与 RHS $(a\\pi)f'' + (b\\pi)f'$ 相等。这个等式必须对任意 $f$ 成立，这意味着我们可以令 $f''$、$f'$ 和 $f$ 的系数相等：\n\\begin{itemize}\n    \\item $f''$ 的系数：$a\\pi = a\\pi$。这是一致的。\n    \\item $f'$ 的系数：$2(a\\pi)' - b\\pi = b\\pi \\implies 2(a\\pi)' = 2b\\pi \\implies b\\pi = (a\\pi)'$。\n    \\item $f$ 的系数：$(a\\pi)'' - (b\\pi)' = 0$。\n\\end{itemize}\n从 $f'$ 的系数得到的条件给出 $b(x)\\pi(x) = (a(x)\\pi(x))'$。如果我们将其代入 $f$ 的系数得到的条件中，我们得到 $(a\\pi)'' - ((a\\pi)')' = 0$，这是一个恒等式。因此，自伴性所需的唯一条件是 $b\\pi = (a\\pi)'$。\n\n解出 $b(x)$，我们得到：\n$$ b(x) = \\frac{(a(x)\\pi(x))'}{\\pi(x)} = \\frac{a'(x)\\pi(x) + a(x)\\pi'(x)}{\\pi(x)} = a'(x) + a(x)\\frac{\\pi'(x)}{\\pi(x)} $$\n由于 $\\pi(x) > 0$，我们可以使用对数导数 $(\\log \\pi(x))' = \\pi'(x)/\\pi(x)$ 来表示最后一项。漂移项的最终表达式是：\n$$ b(x) = a'(x) + a(x)(\\log \\pi(x))' $$\n\n### 第2部分：特化到给定形式\n\n我们被给予了特定的扩散系数和目标密度：\n$$ a(x) = 1 + \\alpha x^2, \\quad \\text{其中 } \\alpha > 0 $$\n$$ \\pi(x) \\propto e^{-V(x)}, \\quad \\text{其中 } V(x) = \\tfrac{1}{2}x^2 $$\n首先，我们计算所需的导数。$a(x)$ 的导数是：\n$$ a'(x) = \\frac{d}{dx}(1 + \\alpha x^2) = 2\\alpha x $$\n对于目标密度，我们有 $\\pi(x) = C e^{-x^2/2}$，其中 $C$ 是某个归一化常数。我们需要对数导数：\n$$ \\log \\pi(x) = \\log(C e^{-x^2/2}) = \\log C - \\frac{1}{2}x^2 $$\n$$ (\\log \\pi(x))' = \\frac{d}{dx}\\left(\\log C - \\frac{1}{2}x^2\\right) = -x $$\n现在，我们将这些表达式代入第1部分推导出的 $b(x)$ 公式中：\n$$ b(x) = a'(x) + a(x)(\\log \\pi(x))' $$\n$$ b(x) = (2\\alpha x) + (1 + \\alpha x^2)(-x) $$\n$$ b(x) = 2\\alpha x - x - \\alpha x^3 $$\n$$ b(x) = (2\\alpha - 1)x - \\alpha x^3 $$\n这就是在给定的 $a(x)$ 和 $\\pi(x)$ 下，确保可逆性的漂移项 $b(x)$ 的闭式表达式。\n\n### 第3部分：数值计算方案\n\n任务是为 SDE 的 Euler-Maruyama 近似计算最大绝对细致平衡对数比率误差 $E_{\\max}$。误差度量定义为：\n$$ E_{\\max} = \\max_{x \\in \\mathcal{X}} \\max_{k \\in \\{-2,-1,0,1,2\\}} \\left| \\varepsilon_{\\mathrm{db}}\\big(x, x + k\\,\\sigma(x);\\Delta t\\big) \\right| $$\n其中 $\\sigma(x) = \\sqrt{2a(x)\\Delta t}$，$\\mathcal{X}$ 是 $[-X_{\\max}, X_{\\max}]$ 上的一个包含 $N=401$ 个点的网格。对数比率误差为：\n$$ \\varepsilon_{\\mathrm{db}}(x,y;\\Delta t) = \\log \\pi(x) + \\log p_{\\Delta t}(x,y) - \\log \\pi(y) - \\log p_{\\Delta t}(y,x) $$\n使用 $\\log \\pi(x) = -x^2/2 + \\text{const}$ 和给定的转移核 $p_{\\Delta t}$ 的高斯近似，误差可以显式地写为：\n$$ \\varepsilon_{\\mathrm{db}}(x,y;\\Delta t) = \\left(-\\frac{x^2}{2}\\right) - \\left(-\\frac{y^2}{2}\\right) + \\left(-\\frac{1}{2}\\log(4\\pi a(x)\\Delta t) - \\frac{(y - x - b(x)\\Delta t)^2}{4a(x)\\Delta t}\\right) - \\left(-\\frac{1}{2}\\log(4\\pi a(y)\\Delta t) - \\frac{(x - y - b(y)\\Delta t)^2}{4a(y)\\Delta t}\\right) $$\n对数中包含 $4\\pi\\Delta t$ 的项相互抵消。重新整理剩余项，得到要实现的表达式：\n$$ \\varepsilon_{\\mathrm{db}}(x,y;\\Delta t) = \\frac{y^2 - x^2}{2} + \\frac{1}{2}\\log\\left(\\frac{a(y)}{a(x)}\\right) - \\frac{(y - x - b(x)\\Delta t)^2}{4a(x)\\Delta t} + \\frac{(x - y - b(y)\\Delta t)^2}{4a(y)\\Delta t} $$\n对每个测试用例 $(\\alpha, \\Delta t, X_{\\max})$ 的算法如下：\n1.  定义函数 $a(x) = 1 + \\alpha x^2$ 和 $b(x) = (2\\alpha - 1)x - \\alpha x^3$。\n2.  创建一个从 $-X_{\\max}$ 到 $X_{\\max}$，包含 $N=401$ 个点的均匀网格 $\\mathcal{X}$。\n3.  初始化变量 `max_error` 为 $0$。\n4.  遍历网格 $\\mathcal{X}$ 中的每个点 $x$。\n5.  对每个 $x$，遍历 $k \\in \\{-2, -1, 1, 2\\}$ （注意当 $k=0$ 时，$y=x$ 且 $\\varepsilon_{\\mathrm{db}}=0$，因此可以跳过）。\n6.  计算 $\\sigma(x) = \\sqrt{2a(x)\\Delta t}$ 和相邻点 $y = x + k\\sigma(x)$。\n7.  使用上述公式计算 $\\varepsilon_{\\mathrm{db}}(x,y;\\Delta t)$。\n8.  更新 `max_error = max(max_error, abs(epsilon_db))`。\n9.  循环结束后，`max_error` 的值即为该测试用例的结果 $E_{\\max}$。\n以下 Python 代码为指定的测试套件实现了此过程。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes the maximum detailed-balance log-ratio error for a set of test cases.\n    \"\"\"\n    \n    # Test suite: each case is (alpha, delta_t, X_max)\n    test_cases = [\n        (0.5, 1e-3, 3.0),\n        (0.5, 1e-4, 3.0),\n        (1.0, 1e-3, 3.0),\n        (0.1, 1e-3, 3.0),\n        (0.5, 5e-3, 6.0),\n    ]\n\n    # Grid parameters\n    N = 401\n    k_values = [-2, -1, 1, 2] # k=0 gives trivial zero error\n\n    results = []\n\n    for alpha, dt, X_max in test_cases:\n        \n        # Define the specialized functions a(x) and b(x)\n        def a(x, alpha_val=alpha):\n            return 1.0 + alpha_val * x**2\n\n        def b(x, alpha_val=alpha):\n            return (2.0 * alpha_val - 1.0) * x - alpha_val * x**3\n\n        # Create the spatial grid\n        x_grid = np.linspace(-X_max, X_max, N)\n        \n        max_abs_error_case = 0.0\n\n        for x in x_grid:\n            # Calculate a(x) and b(x) at the grid point\n            a_x = a(x)\n            b_x = b(x)\n            \n            # The standard deviation of the local Gaussian approximation step\n            sigma_x = np.sqrt(2.0 * a_x * dt)\n\n            for k in k_values:\n                y = x + k * sigma_x\n                \n                # Calculate a(y) and b(y) at the neighbor point\n                a_y = a(y)\n                b_y = b(y)\n\n                # Calculate the detailed-balance log-ratio error epsilon_db\n                # epsilon_db = log(pi(x) p(x,y)) - log(pi(y) p(y,x))\n                # log pi(z) = -z^2/2 + const. The constants cancel.\n                \n                # Term 1: log(pi(x)/pi(y)) = (y^2 - x^2)/2\n                term1 = (y**2 - x**2) / 2.0\n                \n                # The log of the ratio of normalization factors from p(x,y) and p(y,x)\n                # log(sqrt(4*pi*a(y)*dt) / sqrt(4*pi*a(x)*dt)) = 0.5 * log(a(y)/a(x))\n                term2 = 0.5 * np.log(a_y / a_x)\n                \n                # Exponent from p(x,y)\n                term3 = -((y - x - b_x * dt)**2) / (4.0 * a_x * dt)\n                \n                # Exponent from p(y,x)\n                term4 = -((x - y - b_y * dt)**2) / (4.0 * a_y * dt)\n                \n                # The total error is the sum of terms\n                # Note the minus sign from the problem definition: log(A) - log(B)\n                # So we have (term1 - term_1_y) + (log_p_xy) - (log_p_yx)\n                # My 'term1' is already combined. My term2 is the log of norms.\n                # My term3 and term4 come from the exponents.\n                # The formula is: term1 + term2 + term3 - (-term4), where term4 is the exponent of p(y,x)\n                # A common error is a sign flip. Let's re-verify:\n                # err = log(pi_x p_xy) - log(pi_y p_yx)\n                #     = (log pi_x - log pi_y) + (log p_xy - log p_yx)\n                #     = (-x^2/2 - (-y^2/2)) + (log_norm_xy - log_norm_yx) + (exp_xy - exp_yx)\n                #     = (y^2-x^2)/2 + (-0.5log(a_x) - (-0.5log(a_y))) + term3 - term4\n                #     = (y^2-x^2)/2 + 0.5log(a_y/a_x) + term3 - (-(x - y - b_y * dt)^2 / (4*a_y*dt))\n                #     = term1 + term2 + term3 + ((x - y - b_y * dt)^2) / (4.0 * a_y * dt)\n                # Final check confirms the '+' before the last term in the code.\n                \n                epsilon_db = term1 + term2 + term3 + ((x - y - b_y * dt)**2) / (4.0 * a_y * dt)\n\n                if np.abs(epsilon_db) > max_abs_error_case:\n                    max_abs_error_case = np.abs(epsilon_db)\n        \n        results.append(max_abs_error_case)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(f'{r:.10f}' for r in results)}]\")\n\nsolve()\n```", "id": "2994264"}]}