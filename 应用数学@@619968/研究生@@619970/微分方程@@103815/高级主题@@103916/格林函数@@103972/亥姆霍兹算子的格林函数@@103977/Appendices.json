{"hands_on_practices": [{"introduction": "第一个练习是基础性的，它将指导你为一个简单的一维算符在无限定义域上构建格林函数。通过求解齐次方程并应用适当的连续性和导数跳变条件，你将对格林函数的基本构成和物理意义有更深刻的理解 [@problem_id:1108519]。", "problem": "考虑由下式定义的一维线性微分算子 $L$\n$$\nL = \\frac{d^2}{dx^2} + 2\\alpha \\frac{d}{dx} - \\beta^2\n$$\n其中 $\\alpha$ 和 $\\beta$ 为正常数。\n\n该算子在无穷定义域 $x \\in (-\\infty, \\infty)$ 上的格林函数 $G(x, x')$ 是微分方程\n$$\nL[G(x, x')] = -\\delta(x - x')\n$$\n的解，并服从边界条件，即解在 $x \\to \\pm\\infty$ 时保持有界，具体而言 $\\lim_{x\\to\\pm\\infty} G(x, x') = 0$。此处，$\\delta(x-x')$ 是 Dirac delta 函数。\n\n推导格林函数 $G(x, x')$ 的解析表达式。", "solution": "我们求解满足下式的 $G(x,x')$\n$$L\\,G(x,x')=-\\delta(x-x'),\\quad L=\\frac{d^2}{dx^2}+2\\alpha\\frac{d}{dx}-\\beta^2,$$\n且当 $x\\to\\pm\\infty$ 时，$G\\to0$。\n\n1.  齐次解：假设 $G\\propto e^{rx}$，则特征方程为\n$$r^2+2\\alpha r-\\beta^2=0\\;\\Longrightarrow\\;r_{1,2}=-\\alpha\\pm\\sqrt{\\alpha^2+\\beta^2}\\equiv -\\alpha\\pm\\gamma.$$\n\n2.  对于 $x<x'$ 的情况，为使解在 $x\\to-\\infty$ 时有界，我们采用 $e^{r_1 x}$，因为 $r_1>0$；对于 $x>x'$ 的情况，为使解在 $x\\to+\\infty$ 时有界，我们采用 $e^{r_2 x}$，因为 $r_2<0$。因此\n$$G(x,x')=\\begin{cases}\nA\\,e^{r_1 x},&x<x',\\\\\nB\\,e^{r_2 x},&x>x'.\n\\end{cases}$$\n\n3.  在 $x=x'$ 处的连续性要求：\n$$A\\,e^{r_1 x'}=B\\,e^{r_2 x'}.$$\n\n4.  对 $L\\,G=-\\delta$ 积分得到的导数跳变条件为\n$$\\bigl.\\partial_x G\\bigr|_{x'=+}-\\bigl.\\partial_x G\\bigr|_{x'=-}=-1,$$\n即\n$$B\\,r_2\\,e^{r_2 x'}-A\\,r_1\\,e^{r_1 x'}=-1.$$\n\n5.  求解 $A, B$ 可得\n$$A=-\\frac1{r_2-r_1}e^{-r_1 x'},\\;B=-\\frac1{r_2-r_1}e^{-r_2 x'}.$$\n因为 $r_2-r_1=-2\\gamma$，可得\n$$\nG(x,x')=\\frac1{2\\gamma}\n\\begin{cases}\ne^{r_1(x-x')},&x<x',\\\\\ne^{r_2(x-x')},&x>x'.\n\\end{cases}\n$$\n\n6.  代入 $r_{1,2}=-\\alpha\\pm\\gamma$ 并合并：\n$$\nG(x,x')=\\frac1{2\\sqrt{\\alpha^2+\\beta^2}}\n\\exp\\bigl[-\\alpha(x-x')-\\sqrt{\\alpha^2+\\beta^2}\\,\\lvert x-x'\\rvert\\bigr].\n$$", "answer": "$$\\boxed{\\frac{1}{2\\sqrt{\\alpha^2+\\beta^2}}\\exp\\bigl[-\\alpha(x-x')-\\sqrt{\\alpha^2+\\beta^2}\\,\\lvert x-x'\\rvert\\bigr]}$$", "id": "1108519"}, {"introduction": "现实世界的问题常常涉及边界，本练习将介绍一种优雅的处理方法——镜像法。你将为一个直角导体楔角内的波源构建格林函数，并学习如何通过策略性地放置“镜像”源来满足边界条件 [@problem_id:1108693]。该技巧为在受限几何中求解波和势问题提供了强大的物理直觉。", "problem": "考虑一个由标量亥姆霍兹方程 $(\\nabla^2 + k^2)\\psi(\\mathbf{r}) = -f(\\mathbf{r})$ 描述的二维物理系统，该系统位于一个直角楔形所定义的域内。该楔形占据笛卡尔平面的第一象限，即 $x \\ge 0$ 且 $y \\ge 0$ 的区域。位于 $x=0$ 和 $y=0$ 的楔形壁面满足狄利克雷边界条件，这意味着场 $\\psi$ 在这些壁面上必须为零。\n\n该问题的解可利用格林函数 $G(\\mathbf{r}, \\mathbf{r}_0)$ 构建，它满足以下方程：\n$$(\\nabla^2 + k^2)G(\\mathbf{r}, \\mathbf{r}_0) = -\\delta(\\mathbf{r} - \\mathbf{r}_0)$$\n并满足相同的狄利克雷边界条件：对 $y \\ge 0$ 有 $G(0, y; x_0, y_0) = 0$，对 $x \\ge 0$ 有 $G(x, 0; x_0, y_0) = 0$。此处，$\\mathbf{r} = (x, y)$ 为观测点，$\\mathbf{r}_0 = (x_0, y_0)$ 为源点，严格位于楔形内部（$x_0 > 0, y_0 > 0$）。\n\n格林函数可以分解为一个奇异部分和一个正则部分：$G(\\mathbf{r}, \\mathbf{r}_0) = G_0(\\mathbf{r}, \\mathbf{r}_0) + G_{reg}(\\mathbf{r}, \\mathbf{r}_0)$。奇异部分 $G_0$ 是自由空间格林函数，在二维情况下由下式给出：\n$$G_0(\\mathbf{r}, \\mathbf{r}_0) = \\frac{i}{4} H_0^{(1)}(k|\\mathbf{r} - \\mathbf{r}_0|)$$\n其中 $H_0^{(1)}$ 是零阶第一类汉克尔函数。正则部分 $G_{reg}$ 是齐次亥姆霍兹方程的一个解，该解强制满足边界条件，并在域内处处非奇异。\n\n你的任务是推导格林函数的正则部分 $G_{reg}(\\mathbf{r}, \\mathbf{r}_0)$ 在源点位置的表达式，即 $G_{reg}(\\mathbf{r}_0, \\mathbf{r}_0)$。请用源点坐标 $(x_0, y_0)$、波数 $k$ 和适当的特殊函数表示你的答案。", "solution": "我们对直角楔形（在 $x=0, y=0$ 上为狄利克雷边界条件）使用镜像法。二维自由空间格林函数为\n$$G_0(\\mathbf r,\\mathbf r_0)=\\frac{i}{4}H_0^{(1)}\\bigl(k|\\mathbf r-\\mathbf r_0|\\bigr)\\,.$$\n为在 $x=0, y=0$ 上强制 $G=0$，我们需要引入三个镜像源，分别位于 $\\mathbf{r}_1=(-x_0,y_0)$, $\\mathbf{r}_2=(x_0,-y_0)$ 和 $\\mathbf{r}_3=(-x_0,-y_0)$。对于狄利克雷边界条件，源的符号在每次反射时反转，因此这三个镜像源的相对符号分别为 -1, -1 和 +1。正则部分不包括奇异的原始源项，由这三个镜像源的贡献组成：\n$$G_{reg}(\\mathbf r,\\mathbf r_0)=\\frac{i}{4}\\Bigl[-H_0^{(1)}\\bigl(k|\\mathbf r-\\mathbf r_1|\\bigr)-H_0^{(1)}\\bigl(k|\\mathbf r-\\mathbf r_2|\\bigr)+H_0^{(1)}\\bigl(k|\\mathbf r-\\mathbf r_3|\\bigr)\\Bigr].$$\n在 $\\mathbf r=\\mathbf r_0$ 处求值可得\n$$|\\mathbf r_0-\\mathbf r_1|=2x_0,\\quad|\\mathbf r_0-\\mathbf r_2|=2y_0,\\quad|\\mathbf r_0-\\mathbf r_3|=2\\sqrt{x_0^2+y_0^2},$$\n所以\n$$G_{reg}(\\mathbf r_0,\\mathbf r_0)\n=\\frac{i}{4}\\Bigl[-H_0^{(1)}(2kx_0)-H_0^{(1)}(2ky_0)+H_0^{(1)}\\bigl(2k\\sqrt{x_0^2+y_0^2}\\bigr)\\Bigr].$$", "answer": "$$\\boxed{\\frac{i}{4}\\bigl[-H_0^{(1)}(2kx_0)-H_0^{(1)}(2ky_0)+H_0^{(1)}\\bigl(2k\\sqrt{x_0^2+y_0^2}\\bigr)\\bigr]}$$", "id": "1108693"}, {"introduction": "虽然解析方法能提供深刻的洞察，但许多现代问题需要数值求解。最后一个练习将理论与计算相结合，展示了如何使用强大的离散傅里叶变换（DFT）在离散网格上计算格林函数 [@problem_id:2431131]。这个练习不仅巩固了亥姆霍兹算符的性质，还为你提供了适用于各种物理和工程挑战的实用计算技能。", "problem": "要求您使用离散傅里叶变换 (DFT) 计算二维亥姆霍兹算子的离散周期格林函数。请在纯数学和算法的背景下进行，除了此处提供的无量纲规范外，不涉及物理单位。\n\n考虑一个定义在域 $[0,L_x) \\times [0,L_y)$ 上的矩形周期性网格，其尺寸为 $N_x$ 和 $N_y$，均匀间距为 $h_x = L_x / N_x$ 和 $h_y = L_y / N_y$。设离散亥姆霍兹算子通过带周期性边界条件的二阶中心差分离散拉普拉斯算子作用于网格函数 $u[i,j]$，其形式如下：\n$$\n\\mathcal{L} u[i,j] = \\alpha^2 u[i,j] - \\left(\\frac{u[i+1,j] - 2u[i,j] + u[i-1,j]}{h_x^2} + \\frac{u[i,j+1] - 2u[i,j] + u[i,j-1]}{h_y^2}\\right),\n$$\n其中 $i \\in \\{0,\\dots,N_x-1\\}$ 且 $j \\in \\{0,\\dots,N_y-1\\}$，指数分别按 $N_x$ 和 $N_y$ 取模以实现周期性。这里 $\\alpha \\ge 0$ 是一个常数。\n\n令 $\\delta[i,j]$ 为离散德尔塔函数，满足 $\\delta[0,0] = 1$ 且在其他位置 $\\delta[i,j] = 0$。$\\mathcal{L}$ 的离散周期格林函数 $G[i,j]$ 在 $\\alpha > 0$ 时定义为满足\n$$\n\\mathcal{L} G = \\delta\n$$\n对于退化情况 $\\alpha = 0$（周期域中的离散泊松方程），零空间频率模式是不可逆的；在这种情况下，定义 $G$ 满足修正后的方程\n$$\n\\mathcal{L} G = \\delta - \\frac{1}{N_x N_y},\n$$\n这强制了零均值，并使问题可解。\n\n使用离散傅里叶变换 (DFT) 对角化 $\\mathcal{L}$。网格函数 $u[i,j]$ 的 DFT 及其逆变换定义如下：\n$$\n\\widehat{u}[k,\\ell] = \\sum_{i=0}^{N_x-1} \\sum_{j=0}^{N_y-1} u[i,j] \\exp\\left(-2\\pi \\mathrm{i}\\left(\\frac{k i}{N_x} + \\frac{\\ell j}{N_y}\\right)\\right),\n$$\n$$\nu[i,j] = \\frac{1}{N_x N_y} \\sum_{k=0}^{N_x-1} \\sum_{\\ell=0}^{N_y-1} \\widehat{u}[k,\\ell] \\exp\\left(2\\pi \\mathrm{i}\\left(\\frac{k i}{N_x} + \\frac{\\ell j}{N_y}\\right)\\right).\n$$\n所有角度均以弧度为单位。使用这些定义，推导 $\\mathcal{L}$ 的傅里叶表示，并通过在傅里叶域中运算来构造 $G$，同时按照上述规定处理 $\\alpha=0$ 时 $(k,\\ell)=(0,0)$ 模式。\n\n您的程序必须：\n- 通过计算 $\\mathcal{L}$ 的傅里叶符号的倒数的逆 DFT 来构造 $G$。\n- 在实空间中验证，将 $\\mathcal{L}$ 应用于 $G$ 能否使用给定的有限差分模板和周期性边界条件，再现目标右侧项（对于 $\\alpha>0$ 是 $\\delta$，对于 $\\alpha=0$ 是 $\\delta - 1/(N_x N_y)$）。\n- 对每个测试用例量化三个诊断指标：\n  1. 最大绝对残差 $e_{\\mathrm{res}} = \\max_{i,j} \\left| (\\mathcal{L} G)[i,j] - \\text{target}[i,j] \\right|$。\n  2. 实部的最大偶对称偏差 $e_{\\mathrm{sym}} = \\max_{i,j} \\left| \\Re(G[i,j]) - \\Re(G[-i \\bmod N_x, -j \\bmod N_y]) \\right|$。\n  3. 最大虚部大小 $e_{\\mathrm{imag}} = \\max_{i,j} \\left| \\Im(G[i,j]) \\right|$。\n\n所有案例均使用 $L_x = 1$ 和 $L_y = 1$。所有三角函数中的角度均以弧度为单位。\n\n为以下参数值的测试套件实现上述要求：\n- 案例 A (一般良态)：$N_x=16$, $N_y=16$, $\\alpha=1.0$。\n- 案例 B (非方形网格)：$N_x=12$, $N_y=8$, $\\alpha=2.5$。\n- 案例 C (近退化的小参数)：$N_x=10$, $N_y=9$, $\\alpha=10^{-3}$。\n- 案例 D (带零均值约束的退化泊松情况)：$N_x=9$, $N_y=7$, $\\alpha=0$。\n\n您的程序应生成单行输出，其中包含一个用方括号括起来的逗号分隔列表形式的结果，顺序如下：\n$$\n[e_{\\mathrm{res}}^{A}, e_{\\mathrm{sym}}^{A}, e_{\\mathrm{imag}}^{A}, e_{\\mathrm{res}}^{B}, e_{\\mathrm{sym}}^{B}, e_{\\mathrm{imag}}^{B}, e_{\\mathrm{res}}^{C}, e_{\\mathrm{sym}}^{C}, e_{\\mathrm{imag}}^{C}, e_{\\mathrm{res}}^{D}, e_{\\mathrm{sym}}^{D}, e_{\\mathrm{imag}}^{D}].\n$$\n所有输出必须是实数（浮点数）。除了上述无量纲规范外，不需要任何物理单位，并且所有角度均以弧度为单位。", "solution": "对问题陈述进行验证。\n\n**第一步：提取已知条件**\n- **域**：一个在 $[0,L_x) \\times [0,L_y)$ 上的尺寸为 $N_x \\times N_y$ 的矩形周期性网格。\n- **网格间距**：$h_x = L_x / N_x$, $h_y = L_y / N_y$。所有案例均使用 $L_x = L_y = 1$。\n- **离散亥姆霍兹算子**：\n$$\n\\mathcal{L} u[i,j] = \\alpha^2 u[i,j] - \\left(\\frac{u[i+1,j] - 2u[i,j] + u[i-1,j]}{h_x^2} + \\frac{u[i,j+1] - 2u[i,j] + u[i,j-1]}{h_y^2}\\right)\n$$\n其中指数按 $N_x$ 和 $N_y$ 取模。\n- **格林函数方程**：\n  - 对于 $\\alpha > 0$：$\\mathcal{L} G = \\delta$，其中 $\\delta[i,j]$ 是离散德尔塔函数（$\\delta[0,0]=1$, 其他地方为零）。\n  - 对于 $\\alpha = 0$：$\\mathcal{L} G = \\delta - \\frac{1}{N_x N_y}$。\n- **离散傅里叶变换 (DFT)**：\n$$\n\\widehat{u}[k,\\ell] = \\sum_{i=0}^{N_x-1} \\sum_{j=0}^{N_y-1} u[i,j] \\exp\\left(-2\\pi \\mathrm{i}\\left(\\frac{k i}{N_x} + \\frac{\\ell j}{N_y}\\right)\\right)\n$$\n- **逆离散傅里叶变换 (IDFT)**：\n$$\nu[i,j] = \\frac{1}{N_x N_y} \\sum_{k=0}^{N_x-1} \\sum_{\\ell=0}^{N_y-1} \\widehat{u}[k,\\ell] \\exp\\left(2\\pi \\mathrm{i}\\left(\\frac{k i}{N_x} + \\frac{\\ell j}{N_y}\\right)\\right)\n$$\n- **所需诊断指标**：\n  1. $e_{\\mathrm{res}} = \\max_{i,j} \\left| (\\mathcal{L} G)[i,j] - \\text{target}[i,j] \\right|$\n  2. $e_{\\mathrm{sym}} = \\max_{i,j} \\left| \\Re(G[i,j]) - \\Re(G[-i \\bmod N_x, -j \\bmod N_y]) \\right|$\n  3. $e_{\\mathrm{imag}} = \\max_{i,j} \\left| \\Im(G[i,j]) \\right|$\n- **测试用例**：\n  - A: $N_x=16$, $N_y=16$, $\\alpha=1.0$\n  - B: $N_x=12$, $N_y=8$, $\\alpha=2.5$\n  - C: $N_x=10$, $N_y=9$, $\\alpha=10^{-3}$\n  - D: $N_x=9$, $N_y=7$, $\\alpha=0$\n\n**第二步：使用提取的已知条件进行验证**\n该问题是计算物理学中一个明确定义的练习。它在科学上基于有限差分法和离散傅里叶变换的既定理论。算子、边界条件和求解方法都是标准的。通过修改源项来特殊处理退化情况 $\\alpha=0$ 是一种确保问题适定（满足弗雷德霍姆择一性）的标准技术。所有必需的常数和定义都已提供，内部没有矛盾。该问题是可形式化的、客观的，其解是可通过计算验证的。\n\n**第三步：结论与行动**\n此问题是**有效的**。将提供一个解决方案。\n\n**基于原理的解决方案**\n\n解决此问题的基本原理是，离散傅里叶变换 (DFT) 可以对角化线性移位不变算子，例如在周期性网格上指定的离散亥姆霍兹算子 $\\mathcal{L}$。这将偏微分方程转换为傅里叶域中的简单代数方程，可以对每个傅里叶模式进行简单求解。\n\n**1. 算子的傅里叶表示**\n我们首先推导算子 $\\mathcal{L}$ 的傅里叶符号，它代表了其在傅里叶基下的特征值。位移函数 $u[i-a, j-b]$ 的 DFT 与 $u[i,j]$ 的 DFT 通过位移定理相关联：\n$$\n\\text{DFT}\\{u[i-a, j-b]\\} = \\widehat{u}[k,\\ell] \\exp\\left(-2\\pi \\mathrm{i} \\left(\\frac{ka}{N_x} + \\frac{\\ell b}{N_y}\\right)\\right)\n$$\n将 DFT应用于 $x$ 方向的中心差分项：\n$$\n\\text{DFT}\\left\\{ u[i+1,j] - 2u[i,j] + u[i-1,j] \\right\\} = \\left(e^{2\\pi \\mathrm{i} k/N_x} - 2 + e^{-2\\pi \\mathrm{i} k/N_x}\\right) \\widehat{u}[k,\\ell]\n$$\n使用欧拉公式 $e^{\\mathrm{i}\\theta} + e^{-\\mathrm{i}\\theta} = 2\\cos(\\theta)$，上式可简化为：\n$$\n= \\left(2\\cos\\left(\\frac{2\\pi k}{N_x}\\right) - 2\\right) \\widehat{u}[k,\\ell]\n$$\n使用恒等式 $1 - \\cos(2\\theta) = 2\\sin^2(\\theta)$：\n$$\n= -4\\sin^2\\left(\\frac{\\pi k}{N_x}\\right) \\widehat{u}[k,\\ell]\n$$\n对于 $y$ 方向也存在类似的结果。将 DFT 应用于整个算子方程 $\\mathcal{L}u = f$ 得到：\n$$\n\\left(\\alpha^2 + \\frac{4}{h_x^2}\\sin^2\\left(\\frac{\\pi k}{N_x}\\right) + \\frac{4}{h_y^2}\\sin^2\\left(\\frac{\\pi \\ell}{N_y}\\right)\\right) \\widehat{u}[k,\\ell] = \\widehat{f}[k,\\ell]\n$$\n括号中的项是算子 $\\mathcal{L}$ 对于模式 $(k,\\ell)$ 的傅里叶符号，或称特征值：\n$$\n\\widehat{\\mathcal{L}}[k,\\ell] = \\alpha^2 + \\frac{4}{h_x^2}\\sin^2\\left(\\frac{\\pi k}{N_x}\\right) + \\frac{4}{h_y^2}\\sin^2\\left(\\frac{\\pi \\ell}{N_y}\\right)\n$$\n\n**2. 求解格林函数**\n问题是求解 $\\mathcal{L}G = S$，其中 $S$ 是源项。在傅里叶空间中，这表示为 $\\widehat{\\mathcal{L}}[k,\\ell] \\widehat{G}[k,\\ell] = \\widehat{S}[k,\\ell]$，这给出了傅里叶变换后的格林函数的解：\n$$\n\\widehat{G}[k,\\ell] = \\frac{\\widehat{S}[k,\\ell]}{\\widehat{\\mathcal{L}}[k,\\ell]}\n$$\n我们必须确定两种情况下 $\\widehat{S}[k,\\ell]$ 的值。\n- **情况 1：$\\alpha > 0$**。源是 $S[i,j] = \\delta[i,j]$。其 DFT 是：\n  $$\n  \\widehat{\\delta}[k,\\ell] = \\sum_{i,j} \\delta[i,j] e^{-2\\pi \\mathrm{i}(\\dots)} = \\delta[0,0] \\cdot e^0 = 1\n  $$\n  由于 $\\alpha^2 > 0$ 并且正弦平方项非负，符号 $\\widehat{\\mathcal{L}}[k,\\ell]$ 对所有 $(k,\\ell)$ 都是严格为正的。因此，除法总是明确定义的。\n  $$\n  \\widehat{G}[k,\\ell] = \\frac{1}{\\widehat{\\mathcal{L}}[k,\\ell]}\n  $$\n- **情况 2：$\\alpha = 0$**。符号变为 $\\widehat{\\mathcal{L}}[k,\\ell] = \\frac{4}{h_x^2}\\sin^2(\\frac{\\pi k}{N_x}) + \\frac{4}{h_y^2}\\sin^2(\\frac{\\pi \\ell}{N_y})$。在零频率模式 $(k,\\ell)=(0,0)$ 处，$\\widehat{\\mathcal{L}}[0,0]=0$，使得算子不可逆。为解决此问题，源被修改为 $S[i,j] = \\delta[i,j] - \\frac{1}{N_x N_y}$，这是一个零均值源。此源的 DFT 为：\n  $$\n  \\widehat{S}[k,\\ell] = \\widehat{\\delta}[k,\\ell] - \\text{DFT}\\left\\{\\frac{1}{N_x N_y}\\right\\} = 1 - \\delta_{k,0}\\delta_{\\ell,0}\n  $$\n  其中 $\\delta_{k,0}$ 是克罗内克 δ。在 $(k,\\ell)=(0,0)$ 处，$\\widehat{S}[0,0]$ 和 $\\widehat{\\mathcal{L}}[0,0]$ 均为零。这种不确定形式通过强制解 $G$ 也具有零均值来解决，这在傅里叶空间中意味着将其零频率分量设置为零，即 $\\widehat{G}[0,0] = 0$。对于所有其他模式 $(k,\\ell) \\neq (0,0)$，$\\widehat{S}[k,\\ell]=1$ 并且 $\\widehat{\\mathcal{L}}[k,\\ell] \\neq 0$。解是：\n  $$\n  \\widehat{G}[k,\\ell] = \\begin{cases} 0 & \\text{若 } (k,\\ell) = (0,0) \\\\ \\frac{1}{\\widehat{\\mathcal{L}}[k,\\ell]} & \\text{若 } (k,\\ell) \\neq (0,0) \\end{cases}\n  $$\n\n**3. 实空间解与诊断**\n一旦构造了 $\\widehat{G}[k,\\ell]$，就可以通过应用逆 DFT 获得实空间格林函数 $G[i,j]$。\n$$\nG[i,j] = \\text{IDFT}\\{\\widehat{G}[k,\\ell]\\}\n$$\n然后计算诊断指标：\n- 残差 $e_{\\mathrm{res}}$ 是通过使用周期性位移将实空间算子 $\\mathcal{L}$ 数值地应用于计算出的 $G[i,j]$，并将结果与目标源 $S[i,j]$ 进行比较得到的。这直接验证了解的正确性，直至数值精度。\n- 符号 $\\widehat{\\mathcal{L}}[k,\\ell]$ 是实数且表现出偶对称性，即 $\\widehat{\\mathcal{L}}[k,\\ell] = \\widehat{\\mathcal{L}}[-k \\bmod N_x, -\\ell \\bmod N_y]$，因为 $\\sin^2(x)$ 是一个偶函数。因此，其倒数 $\\widehat{G}[k,\\ell]$ 也是实偶函数。实偶谱的 IDFT 是一个纯实偶函数。因此，理论上 $G[i,j]$ 必须是实数并且满足 $G[i,j] = G[-i \\bmod N_x, -j \\bmod N_y]$。诊断指标 $e_{\\mathrm{imag}}$ 和 $e_{\\mathrm{sym}}$ 衡量了由于 FFT 算法中的有限精度算术而导致的与这些理论性质的偏差。\n\n**算法步骤**\n1. 对于每个测试用例 $(N_x, N_y, \\alpha)$，定义网格间距 $h_x = 1/N_x$, $h_y = 1/N_y$。\n2. 构造与 2D FFT 例程输出相对应的整数傅里叶模式索引 $k$ 和 $\\ell$ 的二维数组。\n3. 计算符号 $\\widehat{\\mathcal{L}}[k,\\ell]$ 的二维数组。\n4. 根据 $\\alpha$ 的值计算 $\\widehat{G}[k,\\ell]$ 的二维数组，并如上所述处理 $(k,\\ell)=(0,0)$ 模式。\n5. 通过对 $\\widehat{G}[k,\\ell]$ 进行 2D 逆 FFT 计算 $G[i,j]$。\n6. 将算子 $\\mathcal{L}$ 数值地应用于 $G[i,j]$ 以获得 $(\\mathcal{L}G)[i,j]$。\n7. 根据给定的 $\\alpha$ 构建目标源数组 $S[i,j]$。\n8. 从 $G$ 和 $\\mathcal{L}G$ 计算三个所需的诊断指标：$e_{\\mathrm{res}}$、$e_{\\mathrm{sym}}$ 和 $e_{\\mathrm{imag}}$。\n9. 整理所有测试用例的结果。\n\n此过程为所提出的问题提供了一个完整且可验证的解决方案。", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes the discrete periodic Green's function for the 2D Helmholtz operator\n    using the DFT and verifies its properties.\n    \"\"\"\n    test_cases = [\n        (16, 16, 1.0),   # Case A\n        (12, 8, 2.5),    # Case B\n        (10, 9, 1e-3),   # Case C\n        (9, 7, 0.0),     # Case D\n    ]\n\n    results = []\n    for nx, ny, alpha in test_cases:\n        lx, ly = 1.0, 1.0\n        hx, hy = lx / nx, ly / ny\n        \n        # 1. Construct the operator symbol in Fourier space.\n        # Integer wavenumbers k and l corresponding to numpy's FFT conventions.\n        k_vals = np.fft.fftfreq(nx) * nx\n        l_vals = np.fft.fftfreq(ny) * ny\n        \n        # Broadcasting k and l to form 2D arrays for term calculation.\n        # Shape (ny, nx) matches numpy's array indexing (row, col).\n        k_grid = k_vals.reshape(1, nx)\n        l_grid = l_vals.reshape(ny, 1)\n\n        sin_k_term = np.sin(np.pi * k_grid / nx)**2\n        sin_l_term = np.sin(np.pi * l_grid / ny)**2\n        \n        laplacian_symbol = (4 / hx**2) * sin_k_term + (4 / hy**2) * sin_l_term\n        helmholtz_symbol = alpha**2 + laplacian_symbol\n\n        # 2. Compute the Green's function in Fourier space (G_hat).\n        if alpha == 0.0:\n            # For the Poisson case, the (0,0) mode is singular.\n            # We set its inverse to 0, which corresponds to a zero-mean solution.\n            with np.errstate(divide='ignore', invalid='ignore'):\n                g_hat = 1.0 / helmholtz_symbol\n            g_hat[0, 0] = 0.0\n        else:\n            # For the Helmholtz case, the operator is always invertible.\n            g_hat = 1.0 / helmholtz_symbol\n            \n        # 3. Compute the real-space Green's function G via Inverse DFT.\n        # numpy's ifft2 includes the 1/(nx*ny) normalization.\n        g = np.fft.ifft2(g_hat)\n\n        # 4. Verification and computation of diagnostics.\n        \n        # 4a. Apply the discrete operator L to the computed G in real space.\n        # Use np.roll for periodic boundary conditions.\n        # Axis 0 corresponds to j (rows, ny), Axis 1 corresponds to i (columns, nx).\n        lap_x = (np.roll(g, -1, axis=1) - 2 * g + np.roll(g, 1, axis=1)) / hx**2\n        lap_y = (np.roll(g, -1, axis=0) - 2 * g + np.roll(g, 1, axis=0)) / hy**2\n        lg = alpha**2 * g - (lap_x + lap_y)\n        \n        # 4b. Construct the target source term S.\n        target_s = np.zeros((ny, nx), dtype=float)\n        target_s[0, 0] = 1.0\n        if alpha == 0.0:\n            target_s -= 1.0 / (nx * ny)\n\n        # 4c. Compute the residual error e_res.\n        # Since lg may be complex due to numerical error, take its real part for comparison.\n        e_res = np.max(np.abs(lg.real - target_s))\n        \n        # 4d. Compute the symmetry deviation e_sym.\n        # G[-i, -j] can be computed by flipping both axes and rolling by 1.\n        g_symmetric_check = np.roll(g[::-1, ::-1], shift=(1, 1), axis=(0, 1))\n        # The theoretical G is real, so we check the symmetry of the real part.\n        e_sym = np.max(np.abs(g.real - g_symmetric_check.real))\n        \n        # 4e. Compute the maximum imaginary magnitude e_imag.\n        # The theoretical G should be purely real.\n        e_imag = np.max(np.abs(g.imag))\n        \n        results.extend([e_res, e_sym, e_imag])\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2431131"}]}