{"hands_on_practices": [{"introduction": "要真正掌握指数映射，最直接的方法就是亲手计算它。这个练习将指导你对于一个给定的黎曼度量，通过求解测地线方程来直接计算指数映射的结果。这个实践将在一个非欧几里得的二维流形上进行，从而加深你对指数映射定义为测地线在参数时间 $t=1$ 处的终点的理解 [@problem_id:1044091]。", "problem": "设 $(M, g)$ 是一个二维黎曼流形，其中 $M = \\mathbb{R}^2$，其笛卡尔坐标为 $(x, y)$。度量张量 $g$ 由下式给出\n$$ds^2 = g_{ij} dx^i dx^j = (1+x^2)dx^2 + dy^2.$$\n在点 $p \\in M$ 处的指数映射，记为 $\\exp_p: T_p M \\to M$，将切向量 $v \\in T_p M$ 映射到流形上的点 $\\gamma(1)$，其中 $\\gamma(t)$ 是初始位置为 $\\gamma(0) = p$、初始速度为 $\\dot{\\gamma}(0) = v$ 的唯一测地线。\n\n考虑一条从原点 $p=(0,0)$ 出发，初始速度向量为 $v = a \\frac{\\partial}{\\partial x}|_p$ 的测地线，其中 $a$ 是一个正实数常数。该测地线在参数时间 $t=1$ 时到达点 $q = (\\sinh(u_0), 0)$，其中 $u_0$ 为某个正常数。即 $\\exp_p(v) = q$。\n\n推导出常数 $a$ 用 $u_0$ 表示的值。", "solution": "1. 度量为 \n$$ds^2=(1+x^2)\\,dx^2+dy^2.$$ \n由于 $y$ 是循环坐标且 $y'(0)=0$，测地线保持在 $y(t)=0$ 上。$x(t)$ 的拉格朗日量为 \n$$L=\\tfrac12\\,(1+x^2)\\,x'^2.$$ \n由于不显含 $t$，能量\n$$E=(1+x^2)\\,x'^2=a^2$$\n是常数，其中 $a=x'(0)$。\n\n2. 因此\n$$x'^2=\\frac{a^2}{1+x^2},\\qquad x'\\ge0,$$\n所以\n$$\\sqrt{1+x^2}\\,dx=a\\,dt.$$ \n\n3. 从 $t=0$, $x=0$ 积分到 $t=1$, $x=\\sinh(u_0)$:\n$$\\int_0^{\\sinh(u_0)}\\sqrt{1+x^2}\\,dx\n=a\\int_0^1dt=a.$$\n\n4. 使用标准积分公式\n$$\\int\\sqrt{1+x^2}\\,dx\n=\\tfrac12\\Bigl(x\\sqrt{1+x^2}+\\ln(x+\\sqrt{1+x^2})\\Bigr)+C.$$\n计算得出\n$$a\n=\\tfrac12\\Bigl[\\sinh(u_0)\\cosh(u_0)+\\ln\\bigl(\\sinh(u_0)+\\cosh(u_0)\\bigr)\\Bigr]\n-\\tfrac12\\ln1\n=\\tfrac12\\bigl(\\sinh(u_0)\\cosh(u_0)+u_0\\bigr).$$", "answer": "$$\\boxed{\\frac{1}{2}\\bigl(\\sinh(u_0)\\cosh(u_0)+u_0\\bigr)}$$", "id": "1044091"}, {"introduction": "在理解了指数映射的基本计算之后，一个更深层次的问题是：指数映射是如何“扭曲”切空间的？指数映射的微分 $d(\\exp_p)$ 精确地捕捉了这种扭曲，而它的奇点（称为共轭点）则揭示了流形全局结构的关键信息。这个练习 [@problem_id:3035049] 将引导你使用雅可比场 (Jacobi fields) 这一基本工具，在单位球面上推导共轭点的位置，这是一个黎曼几何中的经典结论。", "problem": "设 $\\left(S^{n}, g\\right)$ 为 $n$ 维单位球面，其上配备有常截面曲率为 $1$ 的标准度量。固定一点 $p \\in S^{n}$ 和一个单位向量 $u \\in T_{p}S^{n}$。对于 $r \\in (0,\\pi]$，考虑测地线 $\\Gamma(t) = \\exp_{p}(t u)$ 和单参数族 $\\sigma_{r}(s) = \\exp_{p}(s r u)$，$s \\in [0,1]$，使得 $\\sigma_{r}(1) = \\exp_{p}(r u)$。\n\n仅使用以下基本事实来推导你的结果：\n- 指数映射 $\\exp_{p}: T_{p}S^{n} \\to S^{n}$ 将 $T_{p}S^{n}$ 中的直线射线 $t \\mapsto t u$ 映为 $S^{n}$ 中的测地线 $t \\mapsto \\Gamma(t)$。\n- 指数映射在点 $v \\in T_{p}S^{n}$ 沿方向 $w \\in T_{p}S^{n}$ 的微分，由沿 $s \\mapsto \\exp_{p}(s v)$ 的、满足 $J(0)=0$ 和 $J'(0)=w$ 的唯一雅可比场 $J$ 所刻画，具体关系为 $d(\\exp_{p})_{v}(w) = J(1)$。\n- 沿测地线 $\\gamma$ 的雅可比场 $J$ 满足雅可比方程 $J'' + R(J,\\gamma')\\gamma' = 0$，其中 $R$ 是黎曼曲率张量。\n- 在常截面曲率为 $1$ 的流形上，对所有切向量 $X,Y,Z$，曲率张量为 $R(X,Y)Z = \\langle Y,Z \\rangle X - \\langle X,Z \\rangle Y$。\n\n仅基于以上事实，分析沿 $\\sigma_{r}$ 的、与初始数据 $J(0)=0$ 和 $J'(0)=w$（其中 $w \\perp u$）相关联的法雅可比场，并确定在 $r=\\pi$ 时，$d(\\exp_{p})_{r u}: T_{p}S^{n} \\to T_{\\exp_{p}(r u)}S^{n}$ 的核的维数。\n\n你的最终答案必须是一个关于 $n$ 的单一封闭形式表达式。无需四舍五入，也不涉及任何单位。角度应以弧度解释。", "solution": "问题要求在线性映射 $d(\\exp_{p})_{r u}: T_{p}S^{n} \\to T_{\\exp_{p}(r u)}S^{n}$ 中，$r=\\pi$ 的特定情况下的核的维数。令 $v = \\pi u \\in T_pS^n$。我们需要求 $\\dim(\\ker(d(\\exp_p)_v))$。\n\n根据问题陈述，指数映射的微分由雅可比场刻画。具体来说，对于一个向量 $w \\in T_pS^n$，它在微分 $d(\\exp_p)_v$ 下的像由 $d(\\exp_p)_v(w) = J(1)$ 给出，其中 $J$ 是沿曲线 $\\alpha(s) = \\exp_p(sv)$（对于 $s \\in [0,1]$）的唯一雅可比场，并满足初始条件 $J(0)=0$ 和 $J'(0) = \\nabla_{s}J(0) = w$。\n\n曲线 $\\alpha(s) = \\exp_p(s\\pi u)$ 是一条测地线。由于 $u$ 是一个单位向量，这条测地线的速率为 $|\\alpha'(s)| = |\\pi u| = \\pi$，这是一个不等于 $1$ 的常数。雅可比方程 $J'' + R(J, \\gamma')\\gamma' = 0$ 对于弧长参数化的测地线 $\\gamma$ 表达最为方便。让我们将 $\\alpha(s)$ 重新参数化为弧长测地线 $\\gamma(t)$。设弧长参数为 $t$。那么 $t = |\\alpha'(s)| s = \\pi s$，因此 $s = t/\\pi$。弧长参数化的测地线是 $\\gamma(t) = \\alpha(t/\\pi) = \\exp_p(tu)$，其中 $t \\in [0, \\pi]$。设 $\\tilde{J}(t)$ 是沿 $\\gamma(t)$ 的雅可比场，对应于沿 $\\alpha(s)$ 的 $J(s)$，即 $\\tilde{J}(t) = J(s) = J(t/\\pi)$。我们需要变换初始条件和雅可比方程。\n\n关于 $s$ 的协变导数是 $\\nabla_s = \\nabla_{\\alpha'(s)}$，关于 $t$ 的协变导数是 $\\nabla_t = \\nabla_{\\gamma'(t)}$。由于 $\\alpha'(s) = \\pi \\gamma'(t)$，我们有 $\\nabla_s = \\pi \\nabla_t$。\n$J$ 的一阶导数是 $J'(s) = \\nabla_s J(s) = \\pi \\nabla_t \\tilde{J}(t)$。\n二阶导数是 $J''(s) = \\nabla_s(\\pi \\nabla_t \\tilde{J}(t)) = \\pi^2 \\nabla_t(\\nabla_t \\tilde{J}(t)) = \\pi^2 \\tilde{J}''(t)$。\n$J(s)$ 的雅可比方程是 $J'' + R(J, \\alpha')\\alpha' = 0$。代入这些关系可得：\n$\\pi^2 \\tilde{J}''(t) + R(\\tilde{J}(t), \\pi\\gamma'(t))(\\pi\\gamma'(t)) = 0$\n$\\pi^2 \\tilde{J}''(t) + \\pi^2 R(\\tilde{J}(t), \\gamma'(t))\\gamma'(t) = 0$\n$\\tilde{J}''(t) + R(\\tilde{J}(t), \\gamma'(t))\\gamma'(t) = 0$。\n所以，$\\tilde{J}(t)$ 满足沿单位速率测地线 $\\gamma(t)$ 的标准雅可比方程。\n\n现在我们变换 $\\tilde{J}(t)$ 的初始条件：\n$J(0)=0 \\implies \\tilde{J}(0)=0$。\n$J'(0)=w \\implies \\pi \\nabla_t \\tilde{J}(0) = w \\implies \\tilde{J}'(0) = w/\\pi$。\n我们要求的值是 $d(\\exp_p)_v(w) = J(1) = \\tilde{J}(\\pi)$。\n因此，我们需要找到所有 $w \\in T_pS^n$，使得沿 $\\gamma(t)=\\exp_p(tu)$ 的、具有初始条件 $\\tilde{J}(0)=0$ 和 $\\tilde{J}'(0)=w/\\pi$ 的雅可比场 $\\tilde{J}(t)$ 满足 $\\tilde{J}(\\pi)=0$。\n\n让我们将初始速度向量 $w/\\pi$ 分解为平行于 $u$ 和正交于 $u$ 的分量。令 $w' = w/\\pi$。$w' = w'_{\\parallel} + w'_{\\perp}$，其中 $w'_{\\parallel} = \\langle w', u \\rangle u$ 且 $w'_{\\perp} = w' - w'_{\\parallel}$。根据线性性，雅可比场 $\\tilde{J}(t)$ 是对应于这两个分量的雅可比场之和：$\\tilde{J}(t) = \\tilde{J}_{\\parallel}(t) + \\tilde{J}_{\\perp}(t)$。\n\n情况1：切向分量 $w'_{\\parallel}$。\n雅可比场沿测地线 $\\gamma(t)$ 演化。设 $U(t) = \\gamma'(t)$ 为切向量场。$U(0)=u$。一个始终与测地线相切的雅可比场形式为 $\\tilde{J}_{\\parallel}(t) = f(t)U(t)$。在任何黎曼流形上，这类场的雅可比方程为 $\\tilde{J}_{\\parallel}''(t)=0$。\n其解为 $\\tilde{J}_{\\parallel}(t) = (At+B)U(t)$（此处，$U(t)$ 是平行移动的，因此其协变导数为零）。\n初始条件：\n$\\tilde{J}_{\\parallel}(0) = f(0)U(0)=0 \\implies f(0)=0 \\implies B=0$。\n$\\tilde{J}_{\\parallel}'(0) = f'(0)U(0) = w'_{\\parallel} = \\langle w', u \\rangle u$。由于 $U(0)=u$，我们有 $f'(0) = \\langle w', u \\rangle = \\frac{\\langle w, u \\rangle}{\\pi}$。\n由 $f(t)=At$ 可得 $f'(t)=A$，所以 $A = \\frac{\\langle w, u \\rangle}{\\pi}$。\n因此，切向雅可比场为 $\\tilde{J}_{\\parallel}(t) = \\frac{\\langle w, u \\rangle}{\\pi} t U(t)$。\n我们在 $t=\\pi$ 处计算此值：\n$\\tilde{J}_{\\parallel}(\\pi) = \\frac{\\langle w, u \\rangle}{\\pi} \\pi U(\\pi) = \\langle w, u \\rangle U(\\pi)$。\n\n情况2：法向分量 $w'_{\\perp}$。\n设 $\\tilde{J}_{\\perp}(t)$ 是具有初始条件 $\\tilde{J}_{\\perp}(0)=0$ 和 $\\tilde{J}_{\\perp}'(0) = w'_{\\perp}$ 的雅可比场。由于 $\\langle w'_{\\perp}, u \\rangle=0$，雅可比场 $\\tilde{J}_{\\perp}(t)$ 将对所有 $t$ 都与 $\\gamma(t)$ 正交，即 $\\langle \\tilde{J}_{\\perp}(t), U(t) \\rangle = 0$。\n雅可比方程为 $\\tilde{J}_{\\perp}'' + R(\\tilde{J}_{\\perp}, U)U = 0$。\n对于常截面曲率为 $1$ 的流形，曲率张量为 $R(X,Y)Z = \\langle Y,Z \\rangle X - \\langle X,Z \\rangle Y$。\n$R(\\tilde{J}_{\\perp}, U)U = \\langle U,U \\rangle \\tilde{J}_{\\perp} - \\langle \\tilde{J}_{\\perp},U \\rangle U$。\n由于 $U$ 是单位向量场且 $\\tilde{J}_{\\perp}$ 与 $U$ 正交，我们有 $\\langle U,U \\rangle = 1$ 和 $\\langle \\tilde{J}_{\\perp},U \\rangle = 0$。\n曲率项简化为 $R(\\tilde{J}_{\\perp}, U)U = \\tilde{J}_{\\perp}$。\n法向场的雅可比方程变为 $\\tilde{J}_{\\perp}'' + \\tilde{J}_{\\perp} = 0$。\n设 $W'_{\\perp}(t)$ 是将 $w'_{\\perp}$ 沿 $\\gamma(t)$ 平行移动所获得的向量场。那么解可以写成 $\\tilde{J}_{\\perp}(t) = (\\cos(t)) A + (\\sin(t)) B$，其中 $A$ 和 $B$ 是由初始条件决定的平行向量场。\n$\\tilde{J}_{\\perp}(0)=0 \\implies A=0$。\n$\\tilde{J}_{\\perp}'(0)=w'_{\\perp} \\implies B=w'_{\\perp}$。\n所以，$\\tilde{J}_{\\perp}(t) = \\sin(t) W'_{\\perp}(t)$。\n我们在 $t=\\pi$ 处计算此值：\n$\\tilde{J}_{\\perp}(\\pi) = \\sin(\\pi) W'_{\\perp}(\\pi) = 0 \\cdot W'_{\\perp}(\\pi) = 0$。\n\n综合结果：\n微分的总结果是 $d(\\exp_p)_{\\pi u}(w) = \\tilde{J}(\\pi) = \\tilde{J}_{\\parallel}(\\pi) + \\tilde{J}_{\\perp}(\\pi) = \\langle w, u \\rangle U(\\pi) + 0 = \\langle w, u \\rangle U(\\pi)$。\n我们要求这个映射的核，也就是所有满足 $d(\\exp_p)_{\\pi u}(w)=0$ 的 $w \\in T_pS^n$ 的集合。\n$\\langle w, u \\rangle U(\\pi) = 0$。\n向量 $U(\\pi) = \\gamma'(\\pi)$ 是点 $\\exp_p(\\pi u)$ 处的切向量，该点是 $p$ 的对跖点。这是一个非零向量。因此，要使表达式为零，其标量系数必须为零：\n$\\langle w, u \\rangle = 0$。\n这正是在 $T_pS^n$ 中定义 $u$ 的正交补的条件，记为 $u^{\\perp}$。\n所以，$d(\\exp_p)_{\\pi u}$ 的核恰好是子空间 $u^{\\perp} \\subset T_pS^n$。\n\n空间 $T_pS^n$ 是一个 $n$ 维向量空间。向量 $u$ 是该空间中的一个非零向量。子空间 $u^{\\perp}$ 由所有与 $u$ 正交的向量组成。该子空间的维数是 $\\dim(T_pS^n) - 1 = n-1$。\n\n因此，$d(\\exp_{p})_{\\pi u}$ 的核的维数是 $n-1$。", "answer": "$$\\boxed{n-1}$$", "id": "3035049"}, {"introduction": "现在，我们将理论付诸实践，从纯粹的分析转向计算应用。寻找两点之间最短路径的问题，本质上是求解指数映射的逆（即计算黎曼对数），但这通常没有封闭解，必须依赖数值方法。这个练习 [@problem_id:3035044] 要求你实现一个“打靶法” (shooting method) 算法，它利用牛顿法，并同时需要指数映射及其微分——这正是前面练习中探讨的核心概念——来构建一个强大而实用的工具。", "problem": "考虑单位二维球面 $S^2 \\subset \\mathbb{R}^3$，其上赋有由欧几里得内积诱导的标准黎曼度量。对于球面上的一个点 $p \\in S^2$，其切空间 $T_p S^2$ 是与 $p$ 正交的二维平面。$S^2$ 上的一条测地线 $\\gamma$，若其满足 $\\gamma(0)=p$ 和 $\\dot{\\gamma}(0)=v \\in T_p S^2$，则它具有恒定速率并且是一个大圆。指数映射 $\\exp_p : T_p S^2 \\to S^2$ 将一个初始速度 $v$ 映射到具有初始条件 $(p,v)$ 的唯一测地线在时间 $t=1$ 时的终点。\n\n您的任务是，从第一性原理出发，实现一个基于指数映射 $\\exp_p$ 和雅可比场的数值打靶法，以解决 $S^2$ 上的两点边值测地线问题：给定 $p,q \\in S^2$，找到一个 $v \\in T_p S^2$ 使得 $\\exp_p(v) = q$。该方法必须对 $v$ 使用牛顿法，其中雅可比矩阵由微分 $D(\\exp_p)_v$ 给出，该微分通过沿由 $(p,v)$ 决定的测地线的雅可比场计算得到。\n\n您必须仅使用以下允许的基础来推导您的算法：\n- 基本定义：测地线是其速度的协变导数为零的曲线，指数映射 $\\exp_p$ 是初始数据为 $(p,v)$ 的测地线在时间为1时的终点，以及雅可比场是沿测地线求解雅可比方程的变分向量场。\n- 仅限于 $S^2$ 的已验证事实：在具有常截面曲率 $K=1$ 的 $S^2$ 上，沿着单位速率测地线的雅可比场 $J$ 的法向分量满足标量常微分方程（ODE）$J'' + J = 0$；测地线是大圆；且指数映射是光滑的。\n\n实现与数值程序的具体要求：\n1. 将 $p,q \\in S^2$ 表示为 $\\mathbb{R}^3$ 中的单位向量。完全在 $\\mathbb{R}^3$ 中使用诱导度量进行操作。\n2. 使用从上述原理获得的 $S^2$ 上测地线方程的闭式解来实现指数映射 $\\exp_p$。在需要时，使用稳定的级数展开来谨慎处理小范数极限情况。\n3. 通过对 $\\exp_p$ 的公式进行微分，并通过雅可比场解释得到的一阶变分，来实现微分 $D(\\exp_p)_v$ 在切向扰动 $w \\in T_p S^2$ 上的作用。您的实现必须在 $\\|v\\|$ 很小时保持数值稳定。\n4. 实现一个牛顿打靶迭代来求解 $v \\in T_p S^2$ 以满足 $\\exp_p(v)=q$：\n   - 在 $T_p S^2$ 的一个标准正交基中参数化 $v$，使得未知量是两个实数。\n   - 在每一步牛顿迭代中，构造一个 $3 \\times 2$ 的雅可比矩阵，其列是 $D(\\exp_p)_v$ 作用于 $T_p S^2$ 基向量的结果，然后求解最小二乘线性系统以计算更新量。\n   - 使用回溯线搜索以确保残差范数 $\\|\\exp_p(v)-q\\|$ 的减小。\n   - 通过监控正规方程的条件数和检查与对跖点情况的接近程度来检测割迹附近的病态问题。\n5. 收敛与失败：\n   - 如果 $\\|\\exp_p(v)-q\\| \\leq 10^{-10}$，则宣布成功。\n   - 如果超过最大迭代次数、线搜索中的步长下溢、系统变得过于病态，或者 $q$ 在数值上是 $p$ 的对跖点，则宣布失败。\n6. 输出规格：\n   - 对于每个测试用例，按如下方式返回一个实数：\n     - 如果方法收敛，返回计算出的初始速率 $\\|v\\|$，该值需规约到 $S^2$ 上的主测地距离，以弧度表示且位于区间 $[0,\\pi]$ 内。使用 $S^2$ 上的距离恒等式将 $\\|v\\|$ 模 $2\\pi$ 进行规约。\n     - 如果方法失败，返回浮点数 $-1.0$。\n   - 角度必须以弧度为单位。\n   - 您的程序应产生单行输出，其中包含一个用方括号括起来的逗号分隔列表，每个浮点数四舍五入到 $10$ 位小数。\n\n测试套件（每个项目为 $(p,q)$，两者均以 $\\mathbb{R}^3$ 中单位向量的形式给出）：\n- 案例1（顺利路径，四分之一大圆）：$p=(0,0,1)$，$q=(0,1,0)$。\n- 案例2（边界情况，零位移）：$p=(0,0,1)$，$q=(0,0,1)$。\n- 案例3（边界情况，对跖且不唯一；预期失败）：$p=(0,0,1)$，$q=(0,0,-1)$。\n- 案例4（通用情况，斜交对）：$p=\\frac{1}{\\sqrt{3}}(1,1,1)$，$q=\\frac{1}{\\sqrt{2}}(1,0,1)$。\n\n最终输出格式：\n- 单行包含一个Python列表，内含按上述测试用例顺序排列的四个浮点数，例如，“[a,b,c,d]”。角度必须以弧度为单位并四舍五入到 $10$ 位小数，失败情况必须显示为-1.0。", "solution": "用户希望解决单位球面 $S^2$ 上的两点边值测地线问题。这等同于计算黎曼对数，即对于给定的点 $p, q \\in S^2$，找到一个切向量 $v \\in T_p S^2$ 使得 $\\exp_p(v) = q$。指定的方法是一种牛顿-拉夫逊型打靶算法。\n\n### 步骤 1：数学公式\n\n设 $p, q$ 是单位球面 $S^2 \\subset \\mathbb{R}^3$ 上的点。切空间 $T_p S^2$ 是 $\\mathbb{R}^3$ 中与 $p$ 正交的向量集合。$S^2$ 上从 $p$ 点出发、初始速度为 $v \\in T_p S^2$ 的测地线 $\\gamma(t)$ 沿大圆运动。其闭式表达式为：\n$$ \\gamma(t) = \\cos(\\|v\\|t) p + \\sin(\\|v\\|t) \\frac{v}{\\|v\\|} $$\n指数映射 $\\exp_p(v)$ 定义为 $\\gamma(1)$。令 $\\theta = \\|v\\|$ 且 $\\hat{v} = v/\\theta$，我们有：\n$$ \\exp_p(v) = \\cos(\\theta) p + \\frac{\\sin(\\theta)}{\\theta} v $$\n该公式在 $\\theta \\to 0$ 时是良定义的，因为 $\\lim_{\\theta\\to 0} \\frac{\\sin(\\theta)}{\\theta} = 1$。为了在 $\\theta$ 较小时保持数值稳定性，我们使用泰勒级数展开。\n\n### 步骤 2：牛顿-拉夫逊法\n我们的目标是找到函数 $F(v) = \\exp_p(v) - q = 0$ 的一个根。牛顿-拉夫逊法使用以下更新规则迭代地改进估计值 $v_k$：\n$$ v_{k+1} = v_k - [D F(v_k)]^{-1} F(v_k) $$\n此处，微分 $D F(v_k)$ 即为 $D(\\exp_p)_{v_k}$。$F$ 的定义域是二维切空间 $T_p S^2$，而残差 $F(v_k)$ 的值域是 $\\mathbb{R}^3$。我们在寻找一个校正量 $\\delta v_k = v_{k+1} - v_k$，它在最小二乘意义下解以下线性系统：\n$$ D(\\exp_p)_{v_k}(\\delta v_k) = -F(v_k) = q - \\exp_p(v_k) $$\n\n### 步骤 3：指数映射的微分\n微分 $D(\\exp_p)_v$ 在向量 $w \\in T_p S^2$ 上的作用是其方向导数：$D(\\exp_p)_v(w) = \\frac{d}{d\\epsilon}|_{\\epsilon=0} \\exp_p(v+\\epsilon w)$。通过对 $\\exp_p(v)$ 的公式进行微分，我们得到：\n$$ D(\\exp_p)_v(w) = \\frac{\\sin\\theta}{\\theta} w + \\left(\\frac{\\theta\\cos\\theta - \\sin\\theta}{\\theta^3}\\right) \\langle v, w \\rangle v - \\frac{\\sin\\theta}{\\theta} \\langle v, w \\rangle p $$\n其中 $\\theta = \\|v\\|$。此公式可通过直接微分或通过雅可比场理论推导得出。对于 $S^2$（一个常截面曲率 $K=1$ 的空间），沿单位速率测地线 $\\sigma(s)$ 且满足 $J(0)=0$ 和 $J'(0)=w$ 的雅可比场 $J(t)$ 由 $J(s) = s w_{\\parallel}(s) + \\sin(s) w_{\\perp}(s)$ 给出。经过适当的速度缩放后，微分即为 $D(\\exp_p)_{v}(w) = J(1)$。直接微分的结果与此理论一致。\n\n为保证数值稳定性，当 $\\theta$ 接近零时，我们对系数使用泰勒级数展开：\n- $c_1(\\theta) = \\frac{\\sin\\theta}{\\theta} \\approx 1 - \\frac{\\theta^2}{6} + \\frac{\\theta^4}{120}$\n- $c_3(\\theta) = \\frac{\\theta\\cos\\theta - \\sin\\theta}{\\theta^3} \\approx -\\frac{1}{3} + \\frac{\\theta^2}{30} - \\frac{\\theta^4}{840}$\n\n微分则计算为 $D(\\exp_p)_v(w) = c_1(\\theta) w + c_3(\\theta) \\langle v, w \\rangle v - c_1(\\theta) \\langle v, w \\rangle p$。\n\n### 步骤 4：线性系统\n为了求解更新量 $\\delta v_k$，我们在 $T_p S^2$ 的一个标准正交基 $\\{e_1, e_2\\}$ 中表示 $v$，使得 $v = x_1 e_1 + x_2 e_2$。更新量为 $\\delta v_k = \\Delta x_1 e_1 + \\Delta x_2 e_2$。线性系统变为：\n$$ J \\begin{pmatrix} \\Delta x_1 \\\\ \\Delta x_2 \\end{pmatrix} = r $$\n其中 $J$ 是一个 $3 \\times 2$ 矩阵，其列为 $J_1 = D(\\exp_p)_{v_k}(e_1)$ 和 $J_2 = D(\\exp_p)_{v_k}(e_2)$，且 $r = q - \\exp_p(v_k)$。这通过正规方程求解：\n$$ (J^T J) \\begin{pmatrix} \\Delta x_1 \\\\ \\Delta x_2 \\end{pmatrix} = J^T r $$\n\n### 步骤 5：算法实现细节\n1.  **初始猜测**：一个好的 $v$ 的初始猜测至关重要。我们将弦 $q-p$ 投影到 $T_p S^2$ 上以获得方向，并将其乘以估计的测地距离 $\\arccos(\\langle p, q \\rangle)$ 进行缩放。令 $v_{proj} = q - \\langle p, q \\rangle p$。初始猜测为 $v_0 = \\frac{\\arccos(\\langle p, q \\rangle)}{\\|v_{proj}\\|} v_{proj}$。\n2.  **失败条件**：如果 $q$ 是 $p$ 的对跖点（$\\|p+q\\| \\approx 0$），迭代会失败，因为解不唯一（割迹）。这种情况也会导致矩阵 $J^T J$ 变为奇异。我们监控 $J^T J$ 的条件数，如果超过阈值，则中止计算，这表明接近共轭点。\n3.  **线搜索**：为确保收敛，采用回溯线搜索。更新公式为 $v_{k+1} = v_k + \\alpha \\delta v_k$，其中 $\\alpha$ 从 1 开始，并不断减小，直到残差范数 $\\|\\exp_p(v_{k+1}) - q\\|$ 减小为止。\n4.  **收敛与输出**：当 $\\|\\exp_p(v) - q\\| \\le 10^{-10}$ 时，方法收敛。返回的值是计算出的范数 $\\|v\\|$，通过模 $2\\pi$ 并将大于 $\\pi$ 的值进行反射（即，如果 $\\theta' = \\|v\\| \\pmod{2\\pi} > \\pi$，则结果为 $2\\pi - \\theta'$），将其调整到主值区间 $[0, \\pi]$ 内。\n\n该算法为球面上的测地边值问题提供了一个稳健的数值解，其基础是黎曼几何的基本原理。", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Main function to solve the geodesic boundary value problem for the given test cases.\n    \"\"\"\n\n    # --- Solver Configuration --- #\n    MAX_ITER = 50\n    CONVERGENCE_TOL = 1e-10\n    LINESEARCH_ALPHA = 1.0\n    LINESEARCH_BETA = 0.5\n    LINESEARCH_MIN_ALPHA = 1e-8\n    COND_TOL = 1e12\n    SMALL_THETA = 1e-8 # Threshold for using Taylor series\n\n    def exponential_map(p: np.ndarray, v: np.ndarray) -> np.ndarray:\n        \"\"\"\n        Computes the exponential map on S^2, mapping v in T_p S^2 to S^2.\n        Formula: exp_p(v) = cos(||v||) * p + sin(||v||)/||v|| * v\n        \"\"\"\n        theta = np.linalg.norm(v)\n        if theta < SMALL_THETA:\n            theta2 = theta * theta\n            # Taylor expansion for cos(theta) and sin(theta)/theta\n            cos_theta = 1.0 - theta2 / 2.0 + theta2 * theta2 / 24.0\n            sinc_theta = 1.0 - theta2 / 6.0 + theta2 * theta2 / 120.0\n            return cos_theta * p + sinc_theta * v\n        else:\n            return np.cos(theta) * p + (np.sin(theta) / theta) * v\n\n    def diff_exponential_map(p: np.ndarray, v: np.ndarray, w: np.ndarray) -> np.ndarray:\n        \"\"\"\n        Computes the action of the differential of the exponential map D(exp_p)_v(w).\n        \"\"\"\n        theta = np.linalg.norm(v)\n        v_dot_w = np.dot(v, w)\n\n        if theta < SMALL_THETA:\n            theta2 = theta * theta\n            # Taylor series for coefficients\n            # c1 = sin(theta)/theta\n            c1 = 1.0 - theta2 / 6.0 + theta2 * theta2 / 120.0\n            # c3 = (theta*cos(theta) - sin(theta))/theta^3\n            c3 = -1.0 / 3.0 + theta2 / 30.0 - theta2 * theta2 / 840.0\n            return c1 * w + c3 * v_dot_w * v - c1 * v_dot_w * p\n        else:\n            theta2 = theta * theta\n            theta3 = theta2 * theta\n            cos_theta = np.cos(theta)\n            sin_theta = np.sin(theta)\n            \n            c1 = sin_theta / theta\n            c3 = (theta * cos_theta - sin_theta) / theta3\n            return c1 * w + c3 * v_dot_w * v - c1 * v_dot_w * p\n\n    def build_orthonormal_basis(p: np.ndarray) -> tuple[np.ndarray, np.ndarray]:\n        \"\"\"\n        Constructs a robust orthonormal basis for the tangent space T_p S^2.\n        \"\"\"\n        if abs(p[0]) > 0.9:  # if p is aligned mostly with x-axis\n            ref_vec = np.array([0.0, 1.0, 0.0]) # Use y-axis\n        else:\n            ref_vec = np.array([1.0, 0.0, 0.0]) # Use x-axis\n        \n        e1 = np.cross(p, ref_vec)\n        e1 /= np.linalg.norm(e1)\n        \n        e2 = np.cross(p, e1)\n        return e1, e2\n\n    def solve_bvp_for_case(p: np.ndarray, q: np.ndarray) -> float:\n        \"\"\"\n        Solves the BVP for a single (p, q) pair using a Newton shooting method.\n        \"\"\"\n        # Ensure vectors are normalized numpy arrays of floats\n        p = np.array(p, dtype=float)\n        p /= np.linalg.norm(p)\n        q = np.array(q, dtype=float)\n        q /= np.linalg.norm(q)\n\n        # Handle trivial/failure cases\n        if np.linalg.norm(p - q) < 1e-12:\n            return 0.0\n        if np.linalg.norm(p + q) < 1e-12:\n            return -1.0\n\n        e1, e2 = build_orthonormal_basis(p)\n\n        # Initial guess for v\n        v_proj = q - np.dot(p, q) * p\n        v_proj_norm = np.linalg.norm(v_proj)\n        \n        if v_proj_norm < 1e-12:\n            # This can happen if p and q are collinear, handled by prior checks.\n            return -1.0\n            \n        dist_guess = np.arccos(np.clip(np.dot(p, q), -1.0, 1.0))\n        v = dist_guess * v_proj / v_proj_norm\n\n        for _ in range(MAX_ITER):\n            exp_v = exponential_map(p, v)\n            residual = exp_v - q\n            res_norm_sq = np.dot(residual, residual)\n\n            if np.sqrt(res_norm_sq) <= CONVERGENCE_TOL:\n                theta = np.linalg.norm(v)\n                theta_rem = theta % (2 * np.pi)\n                if theta_rem > np.pi:\n                    return 2 * np.pi - theta_rem\n                else:\n                    return theta_rem\n\n            # Jacobian matrix of the residual function F(v) = exp_p(v) - q\n            J1 = diff_exponential_map(p, v, e1)\n            J2 = diff_exponential_map(p, v, e2)\n            J = np.stack([J1, J2], axis=1)\n\n            # Solve the least-squares normal equations: (J^T J) dx = -J^T F(v)\n            JTJ = J.T @ J\n            \n            if np.linalg.cond(JTJ) > COND_TOL:\n                return -1.0 # Ill-conditioned system (near conjugate point)\n            \n            JTr = J.T @ (q - exp_v)\n            \n            try:\n                delta_x = np.linalg.solve(JTJ, JTr)\n            except np.linalg.LinAlgError:\n                return -1.0 # Singular matrix\n\n            delta_v = delta_x[0] * e1 + delta_x[1] * e2\n\n            # Backtracking line search to ensure decrease in residual norm\n            alpha = LINESEARCH_ALPHA\n            while alpha > LINESEARCH_MIN_ALPHA:\n                v_new = v + alpha * delta_v\n                exp_v_new = exponential_map(p, v_new)\n                new_res_norm_sq = np.dot(exp_v_new - q, exp_v_new - q)\n\n                if new_res_norm_sq < res_norm_sq:\n                    v = v_new\n                    break\n                alpha *= LINESEARCH_BETA\n            else: # Line search failed to find a step reduction\n                return -1.0\n                \n        return -1.0 # Max iterations exceeded\n\n    # --- Test Suite ---\n    test_cases = [\n        ((0, 0, 1), (0, 1, 0)),\n        ((0, 0, 1), (0, 0, 1)),\n        ((0, 0, 1), (0, 0, -1)),\n        ((1/np.sqrt(3), 1/np.sqrt(3), 1/np.sqrt(3)), (1/np.sqrt(2), 0, 1/np.sqrt(2)))\n    ]\n\n    results = []\n    for p, q in test_cases:\n        result = solve_bvp_for_case(p, q)\n        results.append(f\"{result:.10f}\")\n\n    print(f\"[{','.join(results)}]\")\n\nsolve()\n\n```", "id": "3035044"}]}