{"hands_on_practices": [{"introduction": "理解黎曼曲率张量的最佳方式之一就是亲手计算它。这个练习将带我们回到最基本的概念：平直空间。此练习旨在揭示一个关键点：一个空间的度规张量是否具有对角形式，并不能判断该空间是否弯曲。通过为一个具有常数但非对角分量的度规计算黎曼张量的分量，你将亲自验证内在曲率是一个不依赖于坐标系选择的几何属性。[@problem_id:1495580]", "problem": "考虑一个由坐标 $(x^1, x^2)$ 描述的二维空间。该空间的几何由度规张量定义，其给出的微分线元为：\n$$ ds^2 = 5(dx^1)^2 + 6dx^1dx^2 + 2(dx^2)^2 $$\n使用黎曼几何中的标准定义，计算全协变黎曼曲率张量的分量 $R_{1212}$。你的最终答案应该是一个数字。", "solution": "我们从线元中确定度规分量\n$$\nds^{2} = 5\\,(dx^{1})^{2} + 6\\,dx^{1}dx^{2} + 2\\,(dx^{2})^{2},\n$$\n这意味着\n$$\ng_{11} = 5,\\quad g_{12} = g_{21} = 3,\\quad g_{22} = 2.\n$$\n这些分量是常数，因此对于所有指标 $i,j,k$，我们有\n$$\n\\partial_{k} g_{ij} = 0.\n$$\nLevi-Civita 联络系数由下式给出\n$$\n\\Gamma^{i}_{\\;jk} = \\frac{1}{2} g^{i\\ell}\\left(\\partial_{j} g_{k\\ell} + \\partial_{k} g_{j\\ell} - \\partial_{\\ell} g_{jk}\\right).\n$$\n因为所有度规分量都是常数，$g_{ij}$ 的每个偏导数都为零，因此\n$$\n\\Gamma^{i}_{\\;jk} = 0 \\quad \\text{对所有的 } i,j,k.\n$$\n黎曼曲率张量的混合形式为\n$$\nR^{i}{}_{jkl} = \\partial_{k}\\Gamma^{i}_{\\;jl} - \\partial_{l}\\Gamma^{i}_{\\;jk} + \\Gamma^{i}_{\\;km}\\Gamma^{m}_{\\;jl} - \\Gamma^{i}_{\\;lm}\\Gamma^{m}_{\\;jk}.\n$$\n由于所有的 $\\Gamma^{i}_{\\;jk} = 0$，可得\n$$\nR^{i}{}_{jkl} = 0 \\quad \\text{对所有的 } i,j,k,l.\n$$\n使用度规降低第一个指标，\n$$\nR_{ijkl} = g_{im} R^{m}{}_{jkl},\n$$\n我们得出结论\n$$\nR_{ijkl} = 0 \\quad \\text{对所有的 } i,j,k,l,\n$$\n特别是\n$$\nR_{1212} = 0.\n$$", "answer": "$$\\boxed{0}$$", "id": "1495580"}, {"introduction": "在确认了平直空间的特性后，我们自然会问：曲率从何而来？许多弯曲空间是通过在平直度规上乘以一个与位置相关的函数（即共形因子）来构造的。这个练习将引导你计算这样一个共形平直度规在某一点的曲率，让你能够亲身体验度规分量的导数如何直接产生非零的曲率，并将曲率的大小与共形因子的具体形式联系起来。[@problem_id:1495547]", "problem": "考虑一个由坐标 $(x^1, x^2)$ 描述的二维黎曼流形。该流形的几何由度规张量 $g_{ij}$ 通过线元 $ds^2 = g_{ij} dx^i dx^j$ 定义。对于这个特定的流形，线元由下式给出：\n$$ds^2 = \\left(1 + a(x^1)^2 + b(x^2)^2\\right) \\left( (dx^1)^2 + (dx^2)^2 \\right)$$\n其中 $a$ 和 $b$ 是实常数。\n\n使用黎曼曲率张量的标准定义，计算在坐标系原点，即点 $(x^1, x^2) = (0, 0)$ 处的分量 $R_{1212}$。将您的答案表示为用 $a$ 和 $b$ 表示的符号表达式。", "solution": "本题要求计算给定度规在原点处的黎曼曲率张量分量 $R_{1212}$。我们将首先确定度规张量分量，然后计算必要的 Christoffel 符号及其导数，最后将它们代入黎曼张量的公式中。\n\n线元由 $ds^2 = \\left(1 + a(x^1)^2 + b(x^2)^2\\right) \\left( (dx^1)^2 + (dx^2)^2 \\right)$ 给出。\n我们定义一个共形因子 $\\Omega^2(x^1, x^2) = 1 + a(x^1)^2 + b(x^2)^2$。\n度规张量分量 $g_{ij}$ 是：\n$$g_{11} = \\Omega^2, \\quad g_{22} = \\Omega^2, \\quad g_{12} = g_{21} = 0$$\n该度规是对角的。逆度规分量 $g^{ij}$ 是：\n$$g^{11} = \\frac{1}{\\Omega^2}, \\quad g^{22} = \\frac{1}{\\Omega^2}, \\quad g^{12} = g^{21} = 0$$\n\n分量 $R_{1212}$ 与黎曼张量的混合指标形式通过降低第一个指标相关联：\n$$R_{1212} = g_{1m} R^m{}_{212} = g_{11} R^1{}_{212} + g_{12} R^2{}_{212}$$\n由于 $g_{12}=0$，上式简化为 $R_{1212} = g_{11} R^1{}_{212}$。\n在原点 $(x^1, x^2)=(0,0)$ 处，共形因子为 $\\Omega^2(0,0) = 1 + a(0)^2 + b(0)^2 = 1$。\n因此，$g_{11}(0,0) = 1$，并且在原点处，$R_{1212}|_0 = R^1{}_{212}|_0$。\n\n黎曼曲率张量的公式为：\n$$R^\\rho{}_{\\sigma\\mu\\nu} = \\partial_\\mu \\Gamma^\\rho_{\\nu\\sigma} - \\partial_\\nu \\Gamma^\\rho_{\\mu\\sigma} + \\Gamma^\\rho_{\\mu\\lambda} \\Gamma^\\lambda_{\\nu\\sigma} - \\Gamma^\\rho_{\\nu\\lambda} \\Gamma^\\lambda_{\\mu\\sigma}$$\n第二类 Christoffel 符号由 $\\Gamma^k_{ij} = \\frac{1}{2}g^{kl}(\\partial_i g_{lj} + \\partial_j g_{li} - \\partial_l g_{ij})$ 给出。\n我们来计算在原点处的 Christoffel 符号。我们需要度规分量的一阶导数：\n$\\partial_1 g_{11} = \\partial_1 g_{22} = 2ax^1$\n$\\partial_2 g_{11} = \\partial_2 g_{22} = 2bx^2$\n在原点 $(x^1, x^2) = (0,0)$ 处，度规分量的所有一阶导数都为零。这意味着所有的 Christoffel 符号 $\\Gamma^k_{ij}$ 在原点处都为零。\n因此，$R^\\rho{}_{\\sigma\\mu\\nu}$ 表达式中的二次项 $\\Gamma\\Gamma$ 在原点处为零。\n所以，在原点处，黎曼张量简化为：\n$$R^\\rho{}_{\\sigma\\mu\\nu}|_0 = (\\partial_\\mu \\Gamma^\\rho_{\\nu\\sigma} - \\partial_\\nu \\Gamma^\\rho_{\\mu\\sigma})|_0$$\n我们需要计算 $R^1{}_{212}|_0$：\n$$R^1{}_{212}|_0 = (\\partial_1 \\Gamma^1_{22} - \\partial_2 \\Gamma^1_{12})|_0$$\n\n我们来计算必要的 Christoffel 符号的表达式：\n$\\Gamma^1_{22} = \\frac{1}{2}g^{1m}(\\partial_2 g_{m2} + \\partial_2 g_{m2} - \\partial_m g_{22}) = \\frac{1}{2}g^{11}(2\\partial_2 g_{12} - \\partial_1 g_{22})$。\n由于 $g_{12}=0$，这得到：\n$$\\Gamma^1_{22} = -\\frac{1}{2} g^{11} (\\partial_1 g_{22}) = -\\frac{1}{2} \\frac{1}{\\Omega^2} (2ax^1) = -\\frac{ax^1}{\\Omega^2} = -\\frac{ax^1}{1 + a(x^1)^2 + b(x^2)^2}$$\n\n$\\Gamma^1_{12} = \\frac{1}{2}g^{1m}(\\partial_1 g_{m2} + \\partial_2 g_{m1} - \\partial_m g_{12}) = \\frac{1}{2}g^{11}(\\partial_1 g_{12} + \\partial_2 g_{11} - \\partial_1 g_{12})$。\n这得到：\n$$\\Gamma^1_{12} = \\frac{1}{2}g^{11}(\\partial_2 g_{11}) = \\frac{1}{2} \\frac{1}{\\Omega^2} (2bx^2) = \\frac{bx^2}{\\Omega^2} = \\frac{bx^2}{1 + a(x^1)^2 + b(x^2)^2}$$\n\n现在我们计算所需的导数，并在原点 $(0,0)$ 处求值。\n对于 $\\partial_1 \\Gamma^1_{22}$：\n$$\\partial_1 \\Gamma^1_{22} = \\partial_1 \\left( -\\frac{ax^1}{1 + a(x^1)^2 + b(x^2)^2} \\right)$$\n使用商法则 $\\left(\\frac{f}{g}\\right)' = \\frac{f'g - fg'}{g^2}$：\n$$\\partial_1 \\Gamma^1_{22} = - \\frac{a(1 + a(x^1)^2 + b(x^2)^2) - ax^1(2ax^1)}{\\left(1 + a(x^1)^2 + b(x^2)^2\\right)^2}$$\n在 $(x^1, x^2) = (0,0)$ 处求值：\n$$(\\partial_1 \\Gamma^1_{22})|_0 = - \\frac{a(1) - 0}{(1)^2} = -a$$\n\n对于 $\\partial_2 \\Gamma^1_{12}$：\n$$\\partial_2 \\Gamma^1_{12} = \\partial_2 \\left( \\frac{bx^2}{1 + a(x^1)^2 + b(x^2)^2} \\right)$$\n使用商法则：\n$$\\partial_2 \\Gamma^1_{12} = \\frac{b(1 + a(x^1)^2 + b(x^2)^2) - bx^2(2bx^2)}{\\left(1 + a(x^1)^2 + b(x^2)^2\\right)^2}$$\n在 $(x^1, x^2) = (0,0)$ 处求值：\n$$(\\partial_2 \\Gamma^1_{12})|_0 = \\frac{b(1) - 0}{(1)^2} = b$$\n\n最后，我们将这些结果代回到在原点处的 $R^1{}_{212}$ 表达式中：\n$$R^1{}_{212}|_0 = (\\partial_1 \\Gamma^1_{22})|_0 - (\\partial_2 \\Gamma^1_{12})|_0 = -a - b = -(a+b)$$\n如前所述，$R_{1212}|_0 = R^1{}_{212}|_0$。因此，在原点处的分量 $R_{1212}$ 是 $-(a+b)$。", "answer": "$$\\boxed{-(a+b)}$$", "id": "1495547"}, {"introduction": "对于复杂的度规，手动的解析计算会变得极其繁琐甚至不切实际，这时计算方法就显得至关重要。本练习是一个综合性实践，要求你将联络系数和黎曼张量的抽象数学定义转化为一个可以工作的计算机程序。通过用数值方法实现这些公式，你不仅能以一种操作性的方式巩固理论知识，还将获得一个强大的工具，用以探索任何二维度规的几何特性，这是现代物理学家和工程师的一项核心技能。[@problem_id:2442461]", "problem": "要求您实现一个数值程序，该程序使用标准指标约定和爱因斯坦求和约定，为一个在二维流形上给定的度规张量 $g_{ij}(x^{1},x^{2})$ 计算黎曼曲率张量 $R^{i}_{\\; jkl}$ 的分量。计算必须基于微分几何的基本定义，不得使用这些定义之外的任何预先制定的恒等式。所有导数都必须使用下面指定的固定步长 $h$，通过二阶中心有限差分格式进行数值近似。您的程序必须足够通用，能够接受定义为坐标函数的度规，并且必须在指定的坐标点上计算曲率。\n\n然后，您必须将您的程序应用于以下度规和计算点的测试套件，并为每种情况报告通过对数值计算出的黎曼曲率张量进行缩并得到的高斯曲率 $K$。角度（如适用）必须以弧度为单位。本问题不涉及物理单位。\n\n使用以下测试套件：\n- 测试用例 $1$（笛卡尔坐标 $(x^{1},x^{2})$ 中的平坦欧几里得平面）：\n  $$g_{ij}(x^{1},x^{2}) = \\begin{pmatrix} 1 & 0 \\\\ 0 & 1 \\end{pmatrix}, \\quad \\text{在 } (x^{1},x^{2}) = (0.1,0.2) \\text{ 处计算。}$$\n- 测试用例 $2$（半径为 $a$ 的球面，使用标准球面坐标 $(\\theta,\\phi)$，角度以弧度为单位）：\n  $$a = 2, \\quad g_{ij}(\\theta,\\phi) = \\begin{pmatrix} a^{2} & 0 \\\\ 0 & a^{2}\\sin^{2}\\theta \\end{pmatrix}, \\quad \\text{在 } (\\theta,\\phi) = (1.0,0.3) \\text{ 处计算。}$$\n- 测试用例 $3$（Poincaré 半平面模型中的双曲平面，坐标为 $(x,y)$，$y>0$）：\n  $$g_{ij}(x,y) = \\frac{1}{y^{2}}\\begin{pmatrix} 1 & 0 \\\\ 0 & 1 \\end{pmatrix}, \\quad \\text{在 } (x,y) = (0.5,1.3) \\text{ 处计算。}$$\n- 测试用例 $4$（坐标 $(u,v)$ 中具有常数非对角元素的平坦度规）：\n  $$g_{ij}(u,v) = \\begin{pmatrix} 1 & 0.3 \\\\ 0.3 & 1.2 \\end{pmatrix}, \\quad \\text{在 } (u,v) = (0.0,0.0) \\text{ 处计算。}$$\n\n实现要求：\n- 使用坐标 $(x^{1},x^{2})$，指标 $i,j,k,l,m \\in \\{1,2\\}$，并遵循爱因斯坦求和约定。\n- 使用与 $g_{ij}$ 相关联的唯一的无挠、度规相容的 Levi-Civita 联络来定义曲率。\n- 在每个坐标方向上，使用固定步长 $h = 10^{-6}$ 的二阶中心有限差分来近似所有必需的偏导数。\n- 从数值计算出的 $R^{i}_{\\; jkl}$ 出发，通过在二维空间中缩并指标，以获得计算点的高斯曲率 $K$，仅使用从定义中导出的标准恒等式。\n\n最终输出规范：\n- 您的程序必须输出一行，其中包含按顺序 1 到 4 的四个测试用例的高斯曲率值，每个值四舍五入到 6 位小数，格式为用方括号括起来的逗号分隔列表。例如，格式必须严格为 $[K_{1},K_{2},K_{3},K_{4}]$。", "solution": "问题陈述经过严格审查，被认定是有效的。它以微分几何原理为科学基础，提供了所有必要的数据和条件，是良构的，并且以客观、无歧义的方式表述。该任务是计算张量微积分中的一个标准练习。因此，我们将着手提供一个完整的解决方案。\n\n目标是为一个由其度规张量 $g_{ij}(x^1, x^2)$ 指定的二维流形计算高斯曲率 $K$。计算必须从第一性原理出发，利用数值微分。逻辑计算链如下：从度规张量 $g_{ij}$ 及其导数，我们计算 Christoffel 符号 $\\Gamma^k_{ij}$。从 Christoffel 符号及其导数，我们计算黎曼曲率张量 $R^i_{\\;jkl}$。最后，通过缩并黎曼张量，我们得到 Ricci 标量曲率 $R$，并由此确定高斯曲率 $K$。\n\n设该流形由坐标 $(x^1, x^2)$ 描述，其中指标 $i, j, k, l, m$ 的取值范围为 $\\{1, 2\\}$。假设遵循爱因斯坦求和约定。\n\n首先，我们定义第二类 Christoffel 符号 $\\Gamma^k_{ij}$。这些是唯一的无挠、度规相容的 Levi-Civita 联络的联络系数。它们完全由度规张量及其一阶偏导数定义：\n$$\n\\Gamma^{k}_{ij} = \\frac{1}{2} g^{kl} \\left( \\frac{\\partial g_{li}}{\\partial x^{j}} + \\frac{\\partial g_{lj}}{\\partial x^{i}} - \\frac{\\partial g_{ij}}{\\partial x^{l}} \\right)\n$$\n这里，$g^{kl}$ 是逆度规张量，满足 $g^{ki}g_{il} = \\delta^k_l$。度规分量的偏导数 $\\frac{\\partial g_{ij}}{\\partial x^k}$ 必须进行数值计算。问题指定了步长为 $h$ 的二阶中心有限差分格式：\n$$\n\\frac{\\partial f(x^1, x^2)}{\\partial x^k} \\approx \\frac{f(\\dots, x^k+h, \\dots) - f(\\dots, x^k-h, \\dots)}{2h}\n$$\n\n接下来，我们根据 Christoffel 符号及其一阶偏导数来定义黎曼曲率张量 $R^i_{\\;jkl}$：\n$$\nR^{i}_{\\;jkl} = \\frac{\\partial \\Gamma^{i}_{jl}}{\\partial x^{k}} - \\frac{\\partial \\Gamma^{i}_{jk}}{\\partial x^{l}} + \\Gamma^{m}_{jl} \\Gamma^{i}_{mk} - \\Gamma^{m}_{jk} \\Gamma^{i}_{ml}\n$$\nChristoffel 符号的导数 $\\frac{\\partial \\Gamma^i_{jk}}{\\partial x^l}$ 使用相同的中心有限差分格式计算。这需要在相邻点上计算 Christoffel 符号，而这又需要在主计算点周围的一组模板点上计算度规及其导数。\n\n一旦黎曼张量 $R^i_{\\;jkl}$ 的分量在给定点被数值计算出来，我们通过一系列张量缩并来获得高斯曲率 $K$。首先，我们通过对黎曼张量的第一个和第三个指标进行缩并来计算 Ricci 张量 $R_{jl}$：\n$$\nR_{jl} = R^{i}_{\\;jil}\n$$\n接下来，我们通过将 Ricci 张量与逆度规张量进行缩并来计算 Ricci 标量 $R$（或称标量曲率）：\n$$\nR = g^{jl} R_{jl}\n$$\n对于任何二维流形，高斯曲率 $K$ 通过一个简单的恒等式与 Ricci 标量相关联：\n$$\nK = \\frac{R}{2}\n$$\n\n数值实现将封装这一系列操作。对于每个测试用例，我们为度规张量 $g_{ij}(x)$ 定义一个函数。然后一个主函数协调以下步骤：\n1. 在指定的计算点，使用中心差分计算度规分量的一阶偏导数 $\\frac{\\partial g_{ij}}{\\partial x^k}$。\n2. 使用这些导数和逆度规，计算在计算点处的 Christoffel 符号 $\\Gamma^k_{ij}$。\n3. 再次使用中心差分计算 Christoffel 符号分量的一阶偏导数 $\\frac{\\partial \\Gamma^i_{jl}}{\\partial x^k}$。这涉及到在邻近点重复步骤 1 和 2。\n4. 使用其定义组装黎曼张量 $R^i_{\\;jkl}$ 的分量。\n5. 缩并黎曼张量以求得 Ricci 张量，然后是 Ricci 标量，最后是高斯曲率 $K$。\n\n所提供的测试用例是其解析曲率已知的典型例子：平坦空间为 $0$（用例 1 和 4），半径为 $a$ 的球面为 $1/a^2$（用例 2），Poincaré 半平面为 $-1$（用例 3）。实现的数值程序应该能高精度地复现这些值，其精度受限于与 $h^2$ 成比例的有限差分近似误差。当 $h = 10^{-6}$ 时，预期结果将非常接近理论值。", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes the Gaussian curvature for a set of 2D metrics using numerical differentiation.\n    \"\"\"\n    h = 1.0e-6\n    dim = 2\n\n    def get_christoffel(g_func, x):\n        \"\"\"\n        Computes Christoffel symbols of the second kind, Gamma^k_{ij}, at point x.\n        Returns a (dim, dim, dim) array Gamma[k, i, j].\n        \"\"\"\n        try:\n            g = g_func(x)\n            g_inv = np.linalg.inv(g)\n        except np.linalg.LinAlgError:\n            # Handle potential singularity, e.g., at poles of spherical coordinates\n            # For this problem, evaluation points avoid singularities.\n            return np.zeros((dim, dim, dim))\n\n        # dg[i, j, k] = partial derivative of g_ij with respect to x^k\n        dg = np.zeros((dim, dim, dim))\n        for k in range(dim):\n            x_plus_h = x.copy()\n            x_plus_h[k] += h\n            g_plus = g_func(x_plus_h)\n            \n            x_minus_h = x.copy()\n            x_minus_h[k] -= h\n            g_minus = g_func(x_minus_h)\n            \n            dg[:, :, k] = (g_plus - g_minus) / (2 * h)\n\n        # Christoffel symbols of the first kind: C_{lij}\n        # C_{lij} = 0.5 * (d_j g_li + d_i g_lj - d_l g_ij)\n        # Using indexing: C1[l, i, j]\n        chris1 = np.zeros((dim, dim, dim))\n        for l in range(dim):\n            for i in range(dim):\n                for j in range(dim):\n                    # dg[a,b,c] = d(g_ab)/d(x^c)\n                    d_j_g_li = dg[l, i, j]\n                    d_i_g_lj = dg[l, j, i]\n                    d_l_g_ij = dg[i, j, l]\n                    chris1[l, i, j] = 0.5 * (d_j_g_li + d_i_g_lj - d_l_g_ij)\n\n        # Gamma^k_{ij} = g^{kl} * C_{lij}\n        Gamma = np.einsum('kl,lij->kij', g_inv, chris1)\n        return Gamma\n\n    def compute_K_for_case(g_func, x):\n        \"\"\"\n        Computes the Gaussian curvature K for a given metric function and evaluation point.\n        \"\"\"\n        # 1. Compute derivatives of Christoffel symbols\n        # dGamma[i, j, l, k] = d(Gamma^i_{jl}) / d(x^k)\n        dGamma = np.zeros((dim, dim, dim, dim))\n        for k in range(dim):\n            x_plus_h = x.copy()\n            x_plus_h[k] += h\n            Gamma_plus = get_christoffel(g_func, x_plus_h)\n            \n            x_minus_h = x.copy()\n            x_minus_h[k] -= h\n            Gamma_minus = get_christoffel(g_func, x_minus_h)\n            \n            dGamma[:, :, :, k] = (Gamma_plus - Gamma_minus) / (2 * h)\n\n        # 2. Get Christoffel symbols at the point x\n        Gamma = get_christoffel(g_func, x)\n\n        # 3. Compute Riemann tensor R^i_{jkl} -> R[i, j, k, l]\n        # R^i_{jkl} = d_k Gamma^i_{jl} - d_l Gamma^i_{jk} + Gamma^m_{jl}Gamma^i_{mk} - Gamma^m_{jk}Gamma^i_{ml}\n        \n        # Derivatives part:\n        # term1: d_k Gamma^i_{jl} -> corresponds to dGamma[i,j,l,k]\n        # term2: d_l Gamma^i_{jk} -> corresponds to dGamma[i,j,k,l]\n        # We need to assemble R[i,j,k,l]\n        term1_dG = np.transpose(dGamma, (0, 1, 3, 2))\n        term2_dG = dGamma\n        \n        # Gamma-Gamma products part:\n        term3_GG = np.einsum('mjl,imk->ijkl', Gamma, Gamma)\n        term4_GG = np.einsum('mjk,iml->ijkl', Gamma, Gamma)\n        \n        R = term1_dG - term2_dG + term3_GG - term4_GG\n\n        # 4. Compute Gaussian Curvature K\n        g_inv = np.linalg.inv(g_func(x))\n        # Ricci tensor: R_jl = R^i_{jil}\n        R_ricci = np.einsum('ijil->jl', R)\n        # Ricci scalar: R = g^{jl} R_jl\n        R_scalar = np.sum(g_inv * R_ricci)\n        # Gaussian curvature: K = R / 2\n        K = R_scalar / 2.0\n        \n        return K\n\n    # --- Test Suite ---\n    test_cases = [\n        # Case 1: Flat Euclidean plane\n        (lambda x: np.array([[1.0, 0.0], [0.0, 1.0]]), np.array([0.1, 0.2])),\n        # Case 2: Sphere of radius a=2.0\n        (lambda x: np.array([[4.0, 0.0], [0.0, 4.0 * np.sin(x[0])**2]]), np.array([1.0, 0.3])),\n        # Case 3: Poincaré half-plane\n        (lambda x: (1/x[1]**2) * np.array([[1.0, 0.0], [0.0, 1.0]]), np.array([0.5, 1.3])),\n        # Case 4: Constant off-diagonal flat metric\n        (lambda x: np.array([[1.0, 0.3], [0.3, 1.2]]), np.array([0.0, 0.0]))\n    ]\n    \n    results = []\n    for g_func, x_eval in test_cases:\n        K = compute_K_for_case(g_func, x_eval)\n        results.append(K)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(f'{r:.6f}' for r in results)}]\")\n\nsolve()\n```", "id": "2442461"}]}