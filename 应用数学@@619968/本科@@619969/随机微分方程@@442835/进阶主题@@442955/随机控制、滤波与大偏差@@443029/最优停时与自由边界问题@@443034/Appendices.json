{"hands_on_practices": [{"introduction": "掌握最优停时问题的第一步是学会在已知的“等待区域”（连续区域）内求解价值函数所满足的常微分方程。本练习旨在分离并强化这项核心技能。通过给定一个固定的停时边界 [@problem_id:3069066]，你可以专注于求解由几何布朗运动的无穷小生成元导出的二阶常微分方程，为后续处理更复杂的自由边界问题奠定坚实的数学基础。", "problem": "考虑一个一维扩散过程，该过程被建模为几何布朗运动 (GBM)，定义为随机微分方程 (SDE) $$dX_{t}=\\mu X_{t}\\,dt+\\sigma X_{t}\\,dW_{t},$$ 的解，其中 $W_{t}$ 是标准布朗运动，$\\mu,\\sigma>0$ 是常数。该过程的无穷小生成元 $\\mathcal{L}$ 作用于二次连续可微函数 $f$ 的方式如下：$$\\mathcal{L}f(x)=\\mu x f^{\\prime}(x)+\\frac{1}{2}\\sigma^{2}x^{2}f^{\\prime\\prime}(x).$$ 在一个折扣率为 $r>0$ 的永久最优停时问题的持有区域 $(b,\\infty)$ 中，价值函数 $V$ 解以下常微分方程：$$\\left(\\mathcal{L}-r\\right)V(x)=0\\quad\\text{for }x\\in(b,\\infty).$$ 假设以下边界条件，其与边界处的看跌式停止收益及无穷远处消失的持有价值相一致：$$V(b)=K-b,\\qquad \\lim_{x\\to\\infty}V(x)=0,$$ 其中 $K>b>0$ 是固定常数。取模型参数为：$$\\mu=0.02,\\qquad \\sigma=0.4,\\qquad r=0.05.$$ 从生成元的定义以及在持有区域内折扣后的价值是鞅的原理出发，推导并求解 $V$ 在 $(b,\\infty)$ 上的边界值问题，不使用任何预先记忆的解形式。为 $x>b$ 的情况提供一个关于 $x$、$K$ 和 $b$ 的 $V(x)$ 的单一闭式表达式。无需进行数值四舍五入。", "solution": "首先对问题陈述进行严格的验证过程。\n\n### 步骤 1：提取已知条件\n-   **随机过程**：一个一维几何布朗运动 (GBM) $X_t$，解随机微分方程 $dX_{t}=\\mu X_{t}\\,dt+\\sigma X_{t}\\,dW_{t}$，其中 $W_{t}$ 是标准布朗运动。\n-   **参数**：漂移率 $\\mu$ 和波动率 $\\sigma$ 是正常数。折扣率 $r>0$。\n-   **无穷小生成元**：该过程的生成元 $\\mathcal{L}$ 由 $\\mathcal{L}f(x)=\\mu x f^{\\prime}(x)+\\frac{1}{2}\\sigma^{2}x^{2}f^{\\prime\\prime}(x)$ 给出。\n-   **控制方程**：在持有区域 $(b,\\infty)$ 内，价值函数 $V(x)$ 满足常微分方程 (ODE) $(\\mathcal{L}-r)V(x)=0$。\n-   **边界条件**：\n    1.  在有限边界 $x=b$ 处：$V(b)=K-b$。\n    2.  在无穷远处：$\\lim_{x\\to\\infty}V(x)=0$。\n-   **常数**：$K$ 和 $b$ 是固定的正常数，满足 $K>b>0$。\n-   **数值**：具体的模型参数为 $\\mu=0.02$，$\\sigma=0.4$ 和 $r=0.05$。\n\n### 步骤 2：使用提取的已知条件进行验证\n1.  **科学依据**：该问题牢固地建立在随机微积分和最优停时问题的理论之上，这些是金融数学和随机控制等领域的核心。使用 GBM、无穷小生成元以及由此产生的价值函数二阶常微分方程是标准且成熟的形式体系。该陈述在科学和数学上是合理的。\n2.  **适定性**：该问题描述了一个二阶线性齐次常微分方程（欧拉-柯西类型）。它提供了两个边界条件。这构成了一个适定的边界值问题，只要特征方程有不同的实根（这一条件将在求解过程中得到验证），预计它将有唯一且稳定的解。\n3.  **客观性**：问题以精确、客观的数学语言陈述，没有任何主观或模糊的术语。\n4.  **完整性和一致性**：问题提供了所有必要的信息：微分方程、一套完整的二阶常微分方程边界条件，以及所有参数的值。条件 $K>b>0$ 和 $\\mu, \\sigma, r > 0$ 对于此类问题（例如，为永久美式看跌期权定价）是一致且标准的。\n5.  **现实性**：所提供的 $\\mu$、$\\sigma$ 和 $r$ 的数值在金融建模的背景下是现实的。\n\n### 步骤 3：结论与行动\n该问题在科学上是合理的、自洽的、适定的和客观的。它不包含任何可辨别的缺陷。因此，该问题被视为**有效的**，并将提供完整的解答。\n\n问题要求解价值函数 $V(x)$ 在持有区域 $x \\in (b, \\infty)$ 上的边界值问题。控制常微分方程由 $(\\mathcal{L}-r)V(x) = 0$ 给出。代入无穷小生成元 $\\mathcal{L}$ 的定义，我们得到：\n$$ \\mu x V^{\\prime}(x)+\\frac{1}{2}\\sigma^{2}x^{2}V^{\\prime\\prime}(x) - rV(x) = 0 $$\n将各项重新整理成二阶常微分方程的标准形式，得到：\n$$ \\frac{1}{2}\\sigma^{2}x^{2}V^{\\prime\\prime}(x) + \\mu x V^{\\prime}(x) - rV(x) = 0 $$\n这是一个欧拉-柯西类型的二阶线性齐次微分方程。我们寻求形式为 $V(x) = x^{\\beta}$ 的解。其一阶和二阶导数分别为 $V^{\\prime}(x) = \\beta x^{\\beta-1}$ 和 $V^{\\prime\\prime}(x) = \\beta(\\beta-1)x^{\\beta-2}$。将这些代入常微分方程得到：\n$$ \\frac{1}{2}\\sigma^{2}x^{2}\\left(\\beta(\\beta-1)x^{\\beta-2}\\right) + \\mu x \\left(\\beta x^{\\beta-1}\\right) - r\\left(x^{\\beta}\\right) = 0 $$\n提出公因子 $x^{\\beta}$（对于 $x>0$ 非零）：\n$$ \\frac{1}{2}\\sigma^{2}\\beta(\\beta-1) + \\mu\\beta - r = 0 $$\n这是关于指数 $\\beta$ 的基本（或特征）二次方程。展开并重新整理得到：\n$$ \\frac{1}{2}\\sigma^{2}\\beta^{2} + \\left(\\mu - \\frac{1}{2}\\sigma^{2}\\right)\\beta - r = 0 $$\n此二次方程的根 $\\beta_{1}$ 和 $\\beta_{2}$ 由二次求根公式给出：\n$$ \\beta = \\frac{-\\left(\\mu - \\frac{1}{2}\\sigma^{2}\\right) \\pm \\sqrt{\\left(\\mu - \\frac{1}{2}\\sigma^{2}\\right)^{2} - 4\\left(\\frac{1}{2}\\sigma^{2}\\right)(-r)}}{2\\left(\\frac{1}{2}\\sigma^{2}\\right)} $$\n$$ \\beta = \\frac{-\\left(\\mu - \\frac{1}{2}\\sigma^{2}\\right) \\pm \\sqrt{\\left(\\mu - \\frac{1}{2}\\sigma^{2}\\right)^{2} + 2r\\sigma^{2}}}{\\sigma^{2}} $$\n由于 $r>0$ 和 $\\sigma>0$，判别式 $D = \\left(\\mu - \\frac{1}{2}\\sigma^{2}\\right)^{2} + 2r\\sigma^{2}$ 严格为正。因此，存在两个不同的实根。我们来分析根的符号。根的乘积是 $\\beta_1 \\beta_2 = \\frac{-r}{\\frac{1}{2}\\sigma^2} = -\\frac{2r}{\\sigma^2} < 0$。这意味着一个根是正的，另一个是负的。设 $\\beta_1 > 0$ 和 $\\beta_2 < 0$。\n\n$V(x)$ 的通解是两个基解的线性组合：\n$$ V(x) = C_{1}x^{\\beta_{1}} + C_{2}x^{\\beta_{2}} $$\n其中 $C_{1}$ 和 $C_{2}$ 是由边界条件决定的常数。\n\n第一个边界条件是 $\\lim_{x\\to\\infty}V(x)=0$。我们考察通解的极限：\n$$ \\lim_{x\\to\\infty}\\left(C_{1}x^{\\beta_{1}} + C_{2}x^{\\beta_{2}}\\right) $$\n由于 $\\beta_{1}>0$，当 $x \\to \\infty$ 时，项 $x^{\\beta_{1}} \\to \\infty$。为了使总极限为 $0$，其系数必须为零，所以 $C_{1}=0$。带有负根 $\\beta_{2}$ 的项 $x^{\\beta_{2}}$，由于 $\\beta_{2}<0$，当 $x \\to \\infty$ 时趋近于 $0$。这与边界条件一致。\n因此，解必须是以下形式：\n$$ V(x) = C_{2}x^{\\beta_{2}} $$\n第二个边界条件是 $V(b) = K-b$。应用这个条件，我们得到：\n$$ C_{2}b^{\\beta_{2}} = K-b $$\n解出常数 $C_{2}$：\n$$ C_{2} = (K-b)b^{-\\beta_{2}} $$\n将其代回 $V(x)$ 的表达式中：\n$$ V(x) = (K-b)b^{-\\beta_{2}}x^{\\beta_{2}} = (K-b)\\left(\\frac{x}{b}\\right)^{\\beta_{2}} $$\n为了得到最终表达式，我们必须使用给定的参数计算负根 $\\beta_{2}$ 的值：$\\mu=0.02$，$\\sigma=0.4$，$r=0.05$。\n首先，计算中间量：\n$\\sigma^{2} = 0.4^{2} = 0.16$\n$\\frac{1}{2}\\sigma^{2} = 0.08$\n$\\mu - \\frac{1}{2}\\sigma^{2} = 0.02 - 0.08 = -0.06$\n$2r\\sigma^{2} = 2(0.05)(0.16) = 0.1 \\times 0.16 = 0.016$\n\n特征方程是：\n$$ 0.08\\beta^{2} - 0.06\\beta - 0.05 = 0 $$\n为清晰起见，乘以 $100$：$8\\beta^{2} - 6\\beta - 5 = 0$。\n我们求解根：\n$$ \\beta = \\frac{-(-6) \\pm \\sqrt{(-6)^{2} - 4(8)(-5)}}{2(8)} = \\frac{6 \\pm \\sqrt{36 + 160}}{16} = \\frac{6 \\pm \\sqrt{196}}{16} = \\frac{6 \\pm 14}{16} $$\n两个根是：\n$$ \\beta_{1} = \\frac{6+14}{16} = \\frac{20}{16} = 1.25 $$\n$$ \\beta_{2} = \\frac{6-14}{16} = \\frac{-8}{16} = -0.5 $$\n负根是 $\\beta_{2} = -0.5$。\n将这个值代入 $V(x)$ 的解中：\n$$ V(x) = (K-b)\\left(\\frac{x}{b}\\right)^{-0.5} $$\n$$ V(x) = (K-b)\\left(\\frac{b}{x}\\right)^{0.5} $$\n$$ V(x) = (K-b)\\sqrt{\\frac{b}{x}} $$\n这是按要求从第一性原理推导出的，在持有区域 $x > b$ 内价值函数 $V(x)$ 的最终闭式表达式。", "answer": "$$\\boxed{(K-b)\\sqrt{\\frac{b}{x}}}$$", "id": "3069066"}, {"introduction": "在掌握了求解固定边界问题的基础上，我们将挑战一个完整的自由边界问题，其中最优停时边界本身是未知的。这个经典练习 [@problem_id:3069076] 模拟了永续美式看跌期权的定价，它不仅要求解微分方程，更关键的是要运用“价值匹配”和“平滑粘贴”这两个核心条件来确定最优边界。通过解决这个问题，你将能够完整地体验和理解最优停时问题解析解的核心逻辑。", "problem": "考虑一个随机过程 $X = \\{X_{t}\\}_{t \\ge 0}$，它在一个带滤概率空间 $(\\Omega, \\mathcal{F}, \\{\\mathcal{F}_{t}\\}_{t \\ge 0}, \\mathbb{P})$ 上满足随机微分方程 $dX_{t} = \\mu X_{t}\\,dt + \\sigma X_{t}\\,dW_{t}$，其中 $W$ 是一个标准布朗运动，$\\mu \\in \\mathbb{R}$ 且 $\\sigma > 0$。设 $r > 0$ 和 $K > 0$ 为固定常数，考虑一个永久最优停时问题，其报酬为 $G(x) = (K - x)^{+}$，并以常数率 $r$ 进行贴现。其价值函数定义为 $V(x) = \\sup_{\\tau \\in \\mathcal{T}} \\mathbb{E}_{x}\\!\\left[\\exp(-r \\tau)\\,G(X_{\\tau})\\right]$，其中 $\\mathcal{T}$ 表示所有关于 $\\{\\mathcal{F}_{t}\\}$ 的停时集合。\n\n仅使用随机微分方程和最优停时理论的基本原理，包括伊藤公式、无穷小生成元、源于动态规划原理的上鞅性质，以及与连续样本路径相容的正则性条件，完成以下任务：\n\n- 在继续区域 $\\{x : x > b^{*}\\}$ 中，推导价值函数所满足的微分方程，其中 $b^{*}$ 是最优停时边界。\n- 陈述并论证在最优边界上由价值函数的连续性和平滑拼接条件产生的边界条件。\n- 求解所得的自由边界问题，以获得当 $x > b^{*}$ 时的价值函数 $V(x)$ 和最优边界 $b^{*}$。结果用继续区域中常微分方程对应的特征二次方程的两个根 $\\alpha_{+}$ 和 $\\alpha_{-}$ 表示。假设在无穷远处存在任何必要的标准增长条件，以筛选出具有经济意义的解。\n\n将你的最终答案表示为一个行矩阵，按顺序包含：在 $x > b^{*}$ 时有效的 $V(x)$ 的表达式，以及 $b^{*}$ 的表达式，均以精确的符号形式给出。不要在最终的方框答案中包含等号，也不要包含单位。如果你引入了 $\\alpha_{+}$ 和 $\\alpha_{-}$，它们必须被定义为你推导过程中出现的特征方程的两个根。", "solution": "该问题要求解决一个经典的永续美式看跌期权定价问题，这本质上是一个最优停时问题。我们将遵循问题中概述的步骤，推导并解决相应的自由边界问题。\n\n### 1. 区域划分与微分方程\n\n状态空间 $(0, \\infty)$ 被划分为两个区域：\n- **停止区域 (Stopping Region) $\\mathcal{S}$**：立即行使期权是最优选择的区域。在此区域，$V(x) = G(x) = (K - x)^{+} = \\max(K-x, 0)$。由于只有在 $x < K$ 时行权才有正收益，停止区域必然是区间 $(0, b^{*}]$ 的一部分，其中 $b^{*}$ 是待求解的最优行权边界。\n- **继续区域 (Continuation Region) $\\mathcal{C}$**：继续持有期权是最优选择的区域。我们预期这是一个形如 $(b^{*}, \\infty)$ 的区间。\n\n在继续区域 $\\mathcal{C}$ 中，价值函数 $V(x)$ 必须满足贝尔曼方程，对于这个时间无关的问题，该方程简化为常微分方程 (ODE)：\n$$ (\\mathcal{L} - r)V(x) = 0 $$\n其中 $\\mathcal{L}$ 是几何布朗运动的无穷小生成元，$\\mathcal{L}f(x) = \\mu x f'(x) + \\frac{1}{2}\\sigma^2 x^2 f''(x)$。代入后得到 ODE：\n$$ \\frac{1}{2}\\sigma^2 x^2 V''(x) + \\mu x V'(x) - rV(x) = 0, \\quad \\text{for } x \\in (b^{*}, \\infty) $$\n这是一个欧拉-柯西方程。我们假设解的形式为 $V(x) = x^{\\alpha}$，代入 ODE 得到特征二次方程：\n$$ \\frac{1}{2}\\sigma^2 \\alpha(\\alpha-1) + \\mu\\alpha - r = 0 \\implies \\frac{1}{2}\\sigma^2 \\alpha^2 + (\\mu - \\frac{1}{2}\\sigma^2)\\alpha - r = 0 $$\n该方程有两个实根，记为 $\\alpha_{-}$ 和 $\\alpha_{+}$。由于方程的常数项 $-r$ 为负，且 $\\alpha^2$ 项的系数为正，根据韦达定理，两根之积 $\\alpha_{-}\\alpha_{+} = -2r/\\sigma^2 < 0$，因此必有一正根和一负根。我们定义 $\\alpha_{-} < 0 < \\alpha_{+}$。\n\n因此，在继续区域内的通解为：\n$$ V(x) = A x^{\\alpha_{+}} + B x^{\\alpha_{-}} $$\n\n### 2. 边界条件\n\n我们需要三个条件来确定两个待定常数 $A, B$ 和自由边界 $b^{*}$。\n1.  **无穷远处条件**：当股价 $x \\to \\infty$ 时，股票价格远高于行权价 $K$，期权变得毫无价值。因此，我们要求 $\\lim_{x \\to \\infty} V(x) = 0$。由于 $\\alpha_{+} > 0$，项 $x^{\\alpha_{+}} \\to \\infty$ 当 $x \\to \\infty$。为满足此边界条件，其系数必须为零，即 $A=0$。因此，解的形式简化为：\n    $$ V(x) = B x^{\\alpha_{-}} $$\n2.  **价值匹配条件 (Value Matching)**：在最优边界 $b^{*}$ 处，继续持有的价值必须等于立即行权的价值，以保证价值函数的连续性。\n    $$ V(b^{*}) = G(b^{*}) = K - b^{*} $$\n3.  **平滑拼接条件 (Smooth Pasting)**：为了排除套利机会，价值函数的一阶导数在边界处也必须连续。\n    $$ V'(b^{*}) = G'(b^{*}) $$\n    由于 $G(x) = K - x$ 在停止区域内，其导数为 $G'(x) = -1$。因此，该条件为：\n    $$ V'(b^{*}) = -1 $$\n\n### 3. 求解自由边界问题\n\n现在我们利用价值匹配和平滑拼接条件来求解常数 $B$ 和边界 $b^{*}$。\n\n首先，将简化后的解 $V(x) = B x^{\\alpha_{-}}$ 代入两个边界条件：\n- 从价值匹配：\n  $$ B(b^{*})^{\\alpha_{-}} = K - b^{*} \\quad (*)$$\n- 从平滑拼接（首先求导 $V'(x) = B \\alpha_{-} x^{\\alpha_{-} - 1}$）：\n  $$ B \\alpha_{-} (b^{*})^{\\alpha_{-} - 1} = -1 \\quad (**) $$\n\n我们现在有一个关于 $B$ 和 $b^{*}$ 的方程组。从方程 $(**)$ 解出 $B$：\n$$ B = -\\frac{(b^{*})^{1 - \\alpha_{-}}}{\\alpha_{-}} $$\n将这个 $B$ 的表达式代入方程 $(*)$：\n$$ \\left(-\\frac{(b^{*})^{1 - \\alpha_{-}}}{\\alpha_{-}}\\right) (b^{*})^{\\alpha_{-}} = K - b^{*} $$\n$$ -\\frac{b^{*}}{\\alpha_{-}} = K - b^{*} $$\n现在，我们解出 $b^{*}$：\n$$ -b^{*} = \\alpha_{-}(K - b^{*}) $$\n$$ -b^{*} = K\\alpha_{-} - b^{*}\\alpha_{-} $$\n$$ b^{*}\\alpha_{-} - b^{*} = K\\alpha_{-} $$\n$$ b^{*}(\\alpha_{-} - 1) = K\\alpha_{-} $$\n$$ b^{*} = \\frac{\\alpha_{-}}{\\alpha_{-} - 1} K $$\n这是最优行权边界的表达式。\n\n接下来，我们求解价值函数 $V(x)$。从方程 $(*)$，我们可以解出 $B = (K - b^{*})(b^{*})^{-\\alpha_{-}}$。将其代入 $V(x) = B x^{\\alpha_{-}}$：\n$$ V(x) = (K - b^{*})(b^{*})^{-\\alpha_{-}} x^{\\alpha_{-}} $$\n$$ V(x) = (K - b^{*}) \\left(\\frac{x}{b^{*}}\\right)^{\\alpha_{-}} $$\n这就是在继续区域 $x > b^{*}$ 内的价值函数表达式。\n\n综上所述，我们得到了价值函数 $V(x)$ 和最优边界 $b^{*}$ 的符号解。\n\n-   当 $x > b^{*}$ 时，$V(x) = (K - b^{*}) \\left(\\frac{x}{b^{*}}\\right)^{\\alpha_{-}}$\n-   最优边界 $b^{*} = \\frac{\\alpha_{-}}{\\alpha_{-} - 1} K$", "answer": "$$ \\boxed{ \\begin{pmatrix} (K - b^{*}) \\left(\\frac{x}{b^{*}}\\right)^{\\alpha_{-}} & \\frac{\\alpha_{-}}{\\alpha_{-} - 1} K \\end{pmatrix} } $$", "id": "3069076"}, {"introduction": "解析解在现实中往往难以求得，尤其对于有限期限的问题。因此，从理论转向计算是至关重要的一步。本练习 [@problem_id:3069078] 将引导你通过编程实现“投影逐次超松弛”（PSOR）算法，来数值求解最优停时问题离散化后产生的变分不等式。这提供了一个宝贵的动手实践机会，让你掌握在实际中广泛用于期权定价和解决各类最优停时问题的强大数值方法。", "problem": "考虑一个由随机微分方程 $dX_t = \\sqrt{2 \\nu} \\, dW_t$ 描述的一维扩散的最优停时问题，其中 $\\nu>0$ 是扩散系数，$W_t$ 是一个标准维纳过程。设 $r>0$ 为贴现率，收益（障碍）为 $\\phi(x) = \\max(K - x, 0)$，行权价为 $K>0$。在反向时间公式中，价值函数 $V(x,t)$ 相关的变分不等式是障碍问题\n$$\n\\min\\left\\{ -\\left(\\partial_t + \\nu \\partial_{xx} - r\\right) V(x,t), \\; V(x,t) - \\phi(x) \\right\\} = 0,\n$$\n在截断的空间域 $x \\in [0,S_{\\max}]$ 上，边界条件为 $V(0,t) = K$ 和 $V(S_{\\max}, t) = 0$，对于给定的到期日 $T>0$，终端条件为 $V(x,T) = \\phi(x)$。\n\n在具有 $N$ 个节点 $x_i = i h$（$i=0,1,\\dots,N-1$，其中 $h = S_{\\max}/(N-1)$）的均匀网格上，采用时间步长为 $\\Delta t>0$ 的标准隐式时间离散和空间上的二阶中心差分离散，在每个反向时间步长上，为内部未知数 $\\mathbf{v} \\in \\mathbb{R}^{N-2}$ 导出一个离散线性互补问题：\n$$\n\\mathbf{v} \\ge \\boldsymbol{\\phi}, \\quad A \\mathbf{v} - \\mathbf{b} \\ge \\mathbf{0}, \\quad (\\mathbf{v} - \\boldsymbol{\\phi})^\\top (A \\mathbf{v} - \\mathbf{b}) = 0,\n$$\n其中 $A \\in \\mathbb{R}^{(N-2)\\times(N-2)}$ 是三对角的，由反向欧拉矩阵 $A = I - \\Delta t \\, L_h$ 给出，离散空间算子为\n$$\nL_h = \\nu D - r I,\n$$\n且 $D$ 是标准的二阶差分矩阵，对于内部索引，其元素为 $(D\\mathbf{v})_i = \\frac{\\mathbf{v}_{i-1} - 2 \\mathbf{v}_i + \\mathbf{v}_{i+1}}{h^2}$。右端项 $\\mathbf{b}$ 来自前一时间步的值（此处设置为 $\\boldsymbol{\\phi}$ 以便从到期日执行单个反向步骤）以及在 $x=0$ 和 $x=S_{\\max}$ 的边界贡献。\n\n你需要实现投影逐次超松弛（PSOR）迭代法，以在单个反向时间步求解此离散变分不等式。带有松弛参数 $\\omega \\in \\mathbb{R}$ 的PSOR迭代法执行带有超松弛的高斯-赛德尔扫描，并逐分量投影到障碍上：\n$$\ny_i^{(k)} = \\frac{1}{a_{ii}} \\left( b_i - \\sum_{j<i} a_{ij} v_j^{(k)} - \\sum_{j>i} a_{ij} v_j^{(k-1)} \\right) \\\\\nv_i^{\\text{new}} = (1-\\omega) v_i^{(k-1)} + \\omega y_i^{(k)} \\\\\nv_i^{(k)} = \\max\\left( v_i^{\\text{new}}, \\phi_i \\right)\n$$\n编写一个 Python 函数 `solve()`，该函数执行上述 PSOR 迭代，以解决由以下四种参数组合定义的四个不同测试用例的线性互补问题。对于所有情况，使用初始猜测 $\\mathbf{v}^{(0)} = \\boldsymbol{\\phi}$，并迭代直到两次连续迭代之间的 $L_{\\infty}$ 范数小于 $\\epsilon = 10^{-10}$ 或达到最大迭代次数 $3000$ 次。该函数应返回一个 NumPy 数组，其中包含每个测试用例的最终 $L_{\\infty}$ 范数。此外，实现一个检查，以确保迭代是单调的，即对于所有 $i$ 和 $k$，有 $v_i^{(k)} \\ge v_i^{(k-1)}$；如果违反此条件，则应将该测试用G case 的结果设为 `-1.0`。\n- **A**: `omega = 1.0`\n- **B**: `omega = 1.5`\n- **C**: `omega = 1.95`\n- **D**: `omega = 2.10`\n所有其他参数对所有情况都是固定的：`N=101`, `S_max=2.0`, `K=1.0`, `nu=0.2`, `r=0.05`, `dt=0.02`，除了情况 **C**，其中 `dt=0.50`。", "solution": "该问题要求实现投影逐次超松弛（PSOR）算法来求解一个离散化的最优停时问题（具体为美式看跌期权定价）。下面是求解思路和对最终 Python 代码的解释。\n\n### 1. 从连续问题到离散线性互补问题 (LCP)\n\n首先，我们理解如何从给定的变分不等式（VI）得到离散的线性互补问题（LCP）。\n- **时间离散化**：VI 为 $\\min\\left\\{ -\\partial_t V - (\\mathcal{L} - r) V, V - \\phi \\right\\} = 0$。我们使用隐式（反向）欧拉方法对时间进行离散化。设时间步长为 $\\Delta t$，当前时间步的值为 $\\mathbf{v}^{n}$，前一时间步的值为 $\\mathbf{v}^{n-1}$。时间导数近似为 $\\partial_t V \\approx (V^n - V^{n-1}) / (-\\Delta t)$（注意负号，因为我们是反向求解）。\n- **空间离散化**：空间算子 $\\mathcal{L} = \\nu \\partial_{xx}$ 用中心差分近似为离散算子 $L_h = \\nu D$，其中 $D$ 是二阶差分矩阵。\n- **组合**：将离散化代入 VI 的第一部分，我们得到在每个时间步需要求解的不等式：\n$$ \\frac{\\mathbf{v}^n - \\mathbf{v}^{n-1}}{\\Delta t} - (\\nu D - r I) \\mathbf{v}^n \\ge 0 $$\n重新整理得到：\n$$ (I - \\Delta t (\\nu D - r I)) \\mathbf{v}^n \\ge \\mathbf{v}^{n-1} $$\n令 $A = I - \\Delta t (\\nu D - r I) = I - \\Delta t L_h$，$\\mathbf{v} = \\mathbf{v}^n$，$\\mathbf{b} = \\mathbf{v}^{n-1}$。这样我们就得到了 LCP 的第一部分：$A \\mathbf{v} \\ge \\mathbf{b}$。结合障碍条件 $\\mathbf{v} \\ge \\boldsymbol{\\phi}$ 和互补松弛条件，我们得到了问题中给出的完整 LCP 形式。\n\n### 2. 构造矩阵 A 和向量 b\n\n我们需要为内部节点（$i=1, \\dots, N-2$）显式地构造矩阵 $A$ 和向量 $\\mathbf{b}$。\n- **矩阵 A**：$A = I - \\Delta t (\\nu D - rI) = (1+r\\Delta t)I - \\nu\\Delta t D$。\n  - **对角元素** $a_{ii}$: 来自 $(1+r\\Delta t)v_i$ 和 $- \\nu\\Delta t (\\frac{-2v_i}{h^2})$。所以 $a_{ii} = 1 + r\\Delta t + \\frac{2\\nu\\Delta t}{h^2}$。\n  - **非对角元素** $a_{i, i\\pm 1}$: 来自 $- \\nu\\Delta t (\\frac{v_{i\\pm 1}}{h^2})$。所以 $a_{i, i\\pm 1} = -\\frac{\\nu\\Delta t}{h^2}$。\n- **向量 b**：$\\mathbf{b}$ 是前一时间步的解向量。对于从到期日 $T$ 开始的第一个时间步，$\\mathbf{b} = \\mathbf{v}(T) = \\boldsymbol{\\phi}$。\n- **边界条件处理**：\n  - 在 $x_0=0$ 处，$V(0,t)=K$。对于第一个内部节点 $i=1$，其方程中包含 $v_0$ 项：$a_{1,0}v_0 = (-\\frac{\\nu\\Delta t}{h^2}) K$。这个已知项需要移到右边，所以在 $b_1$ 上加上 $-a_{1,0}K = \\frac{\\nu\\Delta t}{h^2} K$。\n  - 在 $x_{N-1}=S_{\\max}$ 处，$V(S_{\\max},t)=0$。对于最后一个内部节点 $i=N-2$，其方程中包含 $v_{N-1}$ 项，但由于 $v_{N-1}=0$，所以对 $b_{N-2}$ 没有贡献。\n\n### 3. PSOR 算法实现\n\nPython 代码严格按照问题描述的 PSOR 迭代公式实现。\n1.  **初始化**：设置网格参数，构造矩阵 $A$ 和向量 $\\mathbf{b}$。初始解 $\\mathbf{v}$ 被设置为障碍 $\\boldsymbol{\\phi}$。\n2.  **迭代循环**：对于每个内部节点 $i=1, \\dots, N-2$：\n    - **高斯-赛德尔步骤** ($y_i^{(k)}$ 的计算)：计算如果这是一个标准的线性系统 $A\\mathbf{v}=\\mathbf{b}$ 时 $v_i$ 的新值。注意求和项中，对于 $j<i$，使用当前迭代步已更新的 $v_j^{(k)}$；对于 $j>i$，使用上一迭代步的 $v_j^{(k-1)}$。\n    - **松弛步骤** ($v_i^{\\text{new}}$ 的计算)：将高斯-赛德尔更新值与旧值进行加权平均，权重为松弛参数 $\\omega$。\n    - **投影步骤** ($v_i^{(k)}$ 的计算)：将松弛后的值与障碍 $\\phi_i$ 比较，取较大者，以确保解始终不低于收益。\n3.  **终止条件**：\n    - 迭代在 $L_{\\infty}$ 范数（即向量元素的最大绝对差）小于 $\\epsilon=10^{-10}$ 时停止。\n    - 如果达到最大迭代次数（3000次），也停止。\n    - **单调性检查**：在每次迭代后，检查新解 $\\mathbf{v}^{(k)}$ 是否逐点大于等于旧解 $\\mathbf{v}^{(k-1)}$。如果违反此条件，则认为迭代不稳定或发散，设置该案例结果为 `-1.0`。这对于 $\\omega \\ge 2$ 的情况是预料之中的。\n\n### 4. 案例分析\n- **A ($\\omega=1.0$)**: 这是投影高斯-赛德尔法。预期会收敛，但速度可能不快。\n- **B ($\\omega=1.5$)**: 这是标准的超松弛。对于此类问题，$\\omega \\in (1, 2)$ 通常能加速收敛。\n- **C ($\\omega=1.95$)**: 接近收敛区间的上界，可能会非常快，但也接近不稳定。使用更大的时间步长 `dt` 会使矩阵的对角占优性变弱，这对迭代方法的收敛性是一个挑战。\n- **D ($\\omega=2.10$)**: 松弛参数超出了理论收敛范围 $[0, 2]$。预计算法会发散，单调性检查应该会失败。\n\n最终的代码将这些逻辑整合，对每个案例运行 PSOR 迭代，并收集最终的 $L_{\\infty}$ 范数或 `-1.0` 标志。", "answer": "```python\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves a discrete variational inequality for an optimal stopping problem\n    using the Projected Successive Over-Relaxation (PSOR) method.\n    \"\"\"\n\n    test_cases = [\n        # Case A (baseline Gauss-Seidel projection)\n        {'omega': 1.0, 'dt': 0.02},\n        # Case B (moderate over-relaxation)\n        {'omega': 1.5, 'dt': 0.02},\n        # Case C (borderline over-relaxation with larger time step)\n        {'omega': 1.95, 'dt': 0.50},\n        # Case D (outside stable range)\n        {'omega': 2.10, 'dt': 0.02},\n    ]\n\n    # Fixed parameters for all cases\n    N = 101\n    S_max = 2.0\n    K = 1.0\n    nu = 0.2\n    r = 0.05\n    \n    all_results = []\n    \n    # Constants for the iteration\n    epsilon = 1e-10\n    K_max = 3000\n    monotonicity_tol = -1e-12\n\n    for case in test_cases:\n        omega = case['omega']\n        dt = case['dt']\n        \n        # 1. Grid setup\n        h = S_max / (N - 1)\n        x = np.linspace(0, S_max, N)\n        \n        # We only solve for the interior nodes\n        x_interior = x[1:-1]\n        N_int = N - 2\n\n        # 2. Construct matrix A, vector b, and obstacle phi\n        \n        # Obstacle for interior nodes\n        phi_interior = np.maximum(K - x_interior, 0)\n        \n        # Matrix A\n        diag_val = 1.0 + r * dt + 2.0 * nu * dt / (h * h)\n        off_diag_val = -nu * dt / (h * h)\n        \n        A = np.zeros((N_int, N_int))\n        A += np.diag(np.full(N_int, diag_val))\n        A += np.diag(np.full(N_int - 1, off_diag_val), k=1)\n        A += np.diag(np_full(N_int - 1, off_diag_val), k=-1)\n        \n        # Right-hand side vector b\n        # \"previous\" values are from terminal condition, i.e., phi_interior\n        b = phi_interior.copy()\n        \n        # Add boundary condition contributions\n        # V(0, t) = K for x=0\n        b[0] -= off_diag_val * K  # which is b[0] += nu * dt / (h*h) * K\n        # V(S_max, t) = 0 for x=S_max, so no contribution to b[N_int-1]\n\n        # 3. PSOR Iteration\n        v = phi_interior.copy()\n        monotonicity_flag = True\n        \n        final_norm = 0.0\n        for k in range(K_max):\n            v_old = v.copy()\n            \n            # Gauss-Seidel sweep with over-relaxation and projection\n            for i in range(N_int):\n                # Sum over j  i using new values v\n                sum_j_lt_i = A[i, :i] @ v[:i]\n                # Sum over j > i using old values v_old\n                sum_j_gt_i = A[i, i+1:] @ v_old[i+1:]\n                \n                y_i = (b[i] - sum_j_lt_i - sum_j_gt_i) / A[i, i]\n                \n                v_new = (1 - omega) * v_old[i] + omega * y_i\n                \n                v[i] = max(v_new, phi_interior[i])\n\n            # Check for monotonicity\n            if np.any((v - v_old)  monotonicity_tol):\n                monotonicity_flag = False\n                break\n            \n            # Check for convergence\n            final_norm = np.max(np.abs(v - v_old))\n            if final_norm  epsilon:\n                break\n        \n        if not monotonicity_flag:\n            all_results.append(-1.0)\n        else:\n            all_results.append(final_norm)\n\n    return np.array(all_results)\n```", "id": "3069078"}]}