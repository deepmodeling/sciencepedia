{"hands_on_practices": [{"introduction": "我们从随机过程研究中的一个基本问题开始：确定一个粒子在到达另一个边界之前先到达某个特定边界的概率。这个练习将指导你如何建立并求解相关的倒向科尔莫戈罗夫方程，其中狄利克雷边界条件（Dirichlet boundary conditions）对应于吸收壁。通过这个计算，你可以清晰地看到理论与实际问题之间的联系。[@problem_id:3041824]", "problem": "设 $\\{X_{t}\\}_{t \\ge 0}$ 求解一维随机微分方程 (SDE) $\\,\\mathrm{d}X_{t}=\\mu\\,\\mathrm{d}t+\\sigma\\,\\mathrm{d}W_{t}\\,$，其漂移系数 $\\mu \\in \\mathbb{R}\\setminus\\{0\\}$ 和波动率系数 $\\sigma>0$ 为常数，其中 $\\{W_{t}\\}_{t \\ge 0}$ 是标准布朗运动 (BM)。考虑开区间（域）$D=(0,1)$ 和边界子集 $\\Gamma=\\{1\\}\\subset\\partial D=\\{0,1\\}$。对于初始点 $x\\in(0,1)$，定义首次出时 $\\tau=\\inf\\{t\\ge 0: X_{t}\\notin(0,1)\\}$ 和触及事件 $A=\\{X_{\\tau}=1\\}$。\n \n从 $\\{X_{t}\\}_{t \\ge 0}$ 的无穷小生成元和如 Dynkin 公式（或生成元的调和函数的鞅刻画）等基本结果出发，推导函数 $u(x)=\\mathbb{P}_{x}(A)$ 在 $(0,1)$ 上的相应后向边值问题（带 $\\partial D$ 上的边界条件），然后求解以显式得到 $u(x)$。最后，在特定初始条件 $x=\\tfrac{1}{3}$ 处计算该概率。\n \n请以仅含 $\\mu$ 和 $\\sigma$ 的单一闭式解析表达式形式给出最终答案。不要对答案进行近似或四舍五入；无需进行数值计算。", "solution": "该问题要求计算一维Itô过程的触及概率 $u(x) = \\mathbb{P}_{x}(A)$，其中过程由随机微分方程 $\\mathrm{d}X_{t} = \\mu\\,\\mathrm{d}t + \\sigma\\,\\mathrm{d}W_{t}$ 控制，区域为 $D=(0,1)$。\n\n根据随机微分方程理论，触及概率 $u(x)$ 是过程 $\\{X_{t}\\}_{t \\ge 0}$ 的无穷小生成元 $\\mathcal{L}$ 的调和函数，即在域 $D$ 上有 $\\mathcal{L}u(x)=0$。\n\n对于一般的 Itô 过程 $\\mathrm{d}X_t = b(X_t)\\,\\mathrm{d}t + s(X_t)\\,\\mathrm{d}W_t$，作用于二次连续可微函数 $f(x)$ 的无穷小生成元 $\\mathcal{L}$ 定义为：\n$$\n\\mathcal{L}f(x) = b(x) \\frac{\\mathrm{d}f}{\\mathrm{d}x} + \\frac{1}{2} s(x)^2 \\frac{\\mathrm{d}^2f}{\\mathrm{d}x^2}\n$$\n对于给定的 SDE，漂移系数为 $b(x)=\\mu$，扩散系数为 $s(x)=\\sigma$。因此生成元为：\n$$\n\\mathcal{L} = \\mu \\frac{\\mathrm{d}}{\\mathrm{d}x} + \\frac{1}{2}\\sigma^2 \\frac{\\mathrm{d}^2}{\\mathrm{d}x^2}\n$$\n条件 $\\mathcal{L}u(x) = 0$ 提供了 $u(x)$ 的控制常微分方程 (ODE)：\n$$\n\\frac{1}{2}\\sigma^2 u''(x) + \\mu u'(x) = 0, \\quad \\text{for } x \\in (0,1)\n$$\n边界条件由 $u(x)$ 在边界 $\\partial D = \\{0,1\\}$ 上的定义确定：\n1. 如果过程从 $x=1$ 开始，它已经到达目标边界，事件 $A$ 以概率 1 发生。因此，$u(1)=1$。\n2. 如果过程从 $x=0$ 开始，它已经到达另一个边界，事件 $A$ 不可能发生。因此，$u(0)=0$。\n\n完整的边值问题是：\n$$\n\\begin{cases}\n\\frac{1}{2}\\sigma^2 u''(x) + \\mu u'(x) = 0,  x \\in (0,1) \\\\\nu(0) = 0 \\\\\nu(1) = 1\n\\end{cases}\n$$\n这是一个二阶、线性、齐次、常系数的常微分方程。我们假设解的形式为 $u(x) = \\exp(rx)$，这导出特征方程：\n$$\n\\frac{1}{2}\\sigma^2 r^{2} + \\mu r = 0 \\implies r\\left(\\frac{1}{2}\\sigma^2 r + \\mu\\right) = 0\n$$\n由于 $\\mu \\neq 0$ 和 $\\sigma > 0$，特征根是不同的：\n$$\nr_1 = 0 \\quad \\text{and} \\quad r_2 = -\\frac{2\\mu}{\\sigma^2}\n$$\n该 ODE 的通解是基本解的线性组合：\n$$\nu(x) = C_1 + C_2 \\exp\\left(-\\frac{2\\mu}{\\sigma^2}x\\right)\n$$\n我们通过应用边界条件来确定常数 $C_1$ 和 $C_2$。\n由 $u(0)=0$ 可得：\n$$\n0 = C_1 + C_2 \\implies C_1 = -C_2\n$$\n由 $u(1)=1$ 可得：\n$$\n1 = C_1 + C_2 \\exp\\left(-\\frac{2\\mu}{\\sigma^2}\\right)\n$$\n将 $C_1 = -C_2$ 代入第二个方程：\n$$\n1 = -C_2 + C_2 \\exp\\left(-\\frac{2\\mu}{\\sigma^2}\\right) = C_2 \\left(\\exp\\left(-\\frac{2\\mu}{\\sigma^2}\\right) - 1\\right)\n$$\n解出 $C_2$ 和 $C_1$：\n$$\nC_2 = \\frac{1}{\\exp\\left(-\\frac{2\\mu}{\\sigma^2}\\right) - 1}, \\quad C_1 = \\frac{1}{1 - \\exp\\left(-\\frac{2\\mu}{\\sigma^2}\\right)}\n$$\n将这些常数代回通解，得到 $u(x)$ 的显式形式：\n$$\nu(x) = \\frac{1}{1 - \\exp\\left(-\\frac{2\\mu}{\\sigma^2}\\right)} - \\frac{\\exp\\left(-\\frac{2\\mu}{\\sigma^2}x\\right)}{1 - \\exp\\left(-\\frac{2\\mu}{\\sigma^2}\\right)} = \\frac{1 - \\exp\\left(-\\frac{2\\mu}{\\sigma^2}x\\right)}{1 - \\exp\\left(-\\frac{2\\mu}{\\sigma^2}\\right)}\n$$\n最后，我们在指定的初始条件 $x=\\frac{1}{3}$ 处计算该概率：\n$$\nu\\left(\\frac{1}{3}\\right) = \\frac{1 - \\exp\\left(-\\frac{2\\mu}{\\sigma^2} \\cdot \\frac{1}{3}\\right)}{1 - \\exp\\left(-\\frac{2\\mu}{\\sigma^2}\\right)} = \\frac{1 - \\exp\\left(-\\frac{2\\mu}{3\\sigma^2}\\right)}{1 - \\exp\\left(-\\frac{2\\mu}{\\sigma^2}\\right)}\n$$\n这就是以参数 $\\mu$ 和 $\\sigma$ 表示的概率的最终表达式。", "answer": "$$\n\\boxed{\\frac{1 - \\exp\\left(-\\frac{2\\mu}{3\\sigma^{2}}\\right)}{1 - \\exp\\left(-\\frac{2\\mu}{\\sigma^{2}}\\right)}}\n$$", "id": "3041824"}, {"introduction": "在确定了粒子是否会到达某个边界之后，下一个自然的问题是它*何时*会到达。本练习将探讨如何计算一个随机过程离开给定区域的期望时间。你会发现，这个问题的求解需要引入倒向方程的一种重要变体，即非齐次方程 $\\mathcal{L}v(x) = -1$。[@problem_id:3041857]", "problem": "考虑一个在 $\\mathbb{R}^{n}$ 中的时间齐次扩散过程 $X=(X_t)_{t \\geq 0}$，其无穷小生成元 $\\mathcal{L}$ 通过标准定义 $\\mathcal{L} f(x) = \\lim_{t \\downarrow 0} \\frac{\\mathbb{E}_{x}[f(X_{t})] - f(x)}{t}$ 作用于二次连续可微函数 $f \\in C^{2}(\\mathbb{R}^{n})$，其中 $\\mathbb{E}_{x}[\\cdot]$ 表示在 $X_{0} = x$ 条件下的期望。令 $D \\subset \\mathbb{R}^{n}$ 为一个有界开区域，其边界 $\\partial D$ 足够正则。定义首次出时为 $\\tau_{D} = \\inf\\{t \\geq 0 : X_{t} \\notin D\\}$。考虑期望出时函数 $v(x) = \\mathbb{E}_{x}[\\tau_{D}]$，其中 $x \\in D$。\n\n从基本原理出发——即强马尔可夫性、无穷小生成元的定义以及 Itô 公式——推导 $v$ 在 $D$ 中满足的边值问题。特别地，证明 $v$ 是倒向方程 $\\mathcal{L} v(x) = -1$ 在 $D$ 内的唯一解，并满足狄利克雷边界条件 $v|_{\\partial D} = 0$。\n\n然后，将问题特化到一维情况，令 $X$ 为一个标准布朗运动（BM），对于固定的 $a > 0$，在区间 $(0,a)$ 上满足随机微分方程（SDE） $dX_{t} = dW_{t}$。使用布朗运动对应的生成元，在边界条件 $v(0) = v(a) = 0$ 下，计算 $v(x)$ 对于 $x \\in (0,a)$ 的显式闭式表达式。\n\n你的最终答案必须是 $v(x)$ 关于 $x$ 和 $a$ 的单个闭式解析表达式。不需要数值近似。", "solution": "### 边值问题的推导\n\n我们需要推导期望出时 $v(x) = \\mathbb{E}_{x}[\\tau_{D}]$ 所满足的边值问题。这包括建立在区域 $D$ 内的控制偏微分方程（PDE）以及在其边界 $\\partial D$ 上的条件。\n\n#### 边界条件\n\n令 $x \\in \\partial D$。首次出时 $\\tau_D$ 定义为 $\\tau_{D} = \\inf\\{t \\geq 0 : X_{t} \\notin D\\}$。由于 $D$ 是一个开集，其边界 $\\partial D$ 不属于 $D$。因此，如果过程从 $X_0 = x \\in \\partial D$ 开始，它在时间 $t=0$ 时就已经在 $D$ 之外了。因此，这个下确界是 $0$。所以，对于任意 $x \\in \\partial D$，我们有 $\\tau_D = 0$，其期望值则为 $v(x) = \\mathbb{E}_{x}[0] = 0$。这给出了狄利克雷边界条件：\n$$v(x) = 0 \\quad \\text{对于 } x \\in \\partial D$$\n\n#### 微分方程\n\n为了推导区域 $D$ 内部的方程，我们假设 $v(x)$ 足够光滑（即 $v \\in C^2(D)$），并使用扩散过程 $X_t$ 的强马尔可夫性。对于一个微小的时间增量 $h > 0$，我们可以通过对截至时间 $h$ 的过程取条件来表达总出时 $\\tau_D$。根据条件期望的塔式性质和在停时 $h \\wedge \\tau_D$ 的强马尔可夫性，我们可以写出：\n$$v(x) = \\mathbb{E}_{x}[\\tau_D] = \\mathbb{E}_{x}[h \\wedge \\tau_D + v(X_{h \\wedge \\tau_D})]$$\n当 $h \\downarrow 0$ 时，对于不在边界上的 $x$，$\\tau_D > h$ 的概率接近 1。因此，我们可以近似得到：\n$$v(x) \\approx \\mathbb{E}_{x}[h + v(X_h)] = h + \\mathbb{E}_{x}[v(X_h)]$$\n整理并取极限，我们得到：\n$$ \\lim_{h \\downarrow 0} \\frac{\\mathbb{E}_{x}[v(X_h)] - v(x)}{h} = -1 $$\n左边恰好是无穷小生成元 $\\mathcal{L}$ 作用于函数 $v$ 在点 $x$ 的定义。因此，我们得到了偏微分方程：\n$$ \\mathcal{L}v(x) = -1 \\quad \\text{对于 } x \\in D $$\n这个椭圆边值问题的解的唯一性是偏微分方程理论中的一个标准结果。因此，$v(x) = \\mathbb{E}_x[\\tau_D]$ 是该边值问题的唯一解。\n\n### 特化到一维标准布朗运动\n\n现在，我们特化到 $X_t$ 是一维标准布朗运动的情况，满足随机微分方程 $dX_t = dW_t$。区域是区间 $D = (0,a)$，其中 $a>0$。\n\n#### 布朗运动的生成元\n\n对于标准布朗运动，漂移系数为 $b(x) = 0$，扩散系数为 $\\sigma(x)=1$。其无穷小生成元 $\\mathcal{L}$ 作用于函数 $f$ 上为：\n$$ \\mathcal{L}f(x) = b(x) \\frac{df}{dx}(x) + \\frac{1}{2}\\sigma(x)^2 \\frac{d^2f}{dx^2}(x) = \\frac{1}{2} \\frac{d^2f}{dx^2}(x) $$\n所以，生成元是 $\\mathcal{L} = \\frac{1}{2}\\frac{d^2}{dx^2}$。\n\n#### 求解边值问题\n\n我们必须求解的边值问题是在 $(0,a)$ 内的 $\\mathcal{L}v(x) = -1$ 以及边界条件 $v(0)=0$ 和 $v(a)=0$。代入具体的生成元，我们得到常微分方程：\n$$ \\frac{1}{2} v''(x) = -1 \\implies v''(x) = -2 $$\n我们通过两次积分来解这个常微分方程。对 $x$ 积分一次，得到一阶导数：\n$$ v'(x) = -2x + C_1 $$\n其中 $C_1$ 是一个积分常数。再次积分，得到 $v(x)$ 的通解：\n$$ v(x) = -x^2 + C_1 x + C_2 $$\n其中 $C_2$ 是第二个积分常数。我们利用边界条件来确定常数 $C_1$ 和 $C_2$。\n\n第一个边界条件是 $v(0)=0$：\n$$ v(0) = -(0)^2 + C_1(0) + C_2 = 0 \\implies C_2 = 0 $$\n这将解简化为 $v(x) = -x^2 + C_1 x$。\n\n第二个边界条件是 $v(a)=0$：\n$$ v(a) = -a^2 + C_1 a = 0 $$\n因为 $a>0$，我们可以将方程两边除以 $a$：\n$$ -a + C_1 = 0 \\implies C_1 = a $$\n将 $C_1=a$ 和 $C_2=0$ 的值代回通解，我们得到期望出时的显式闭式表达式：\n$$ v(x) = -x^2 + ax $$\n这也可以写成 $v(x) = x(a-x)$。这表示一个开口向下的抛物线，其根在 $x=0$ 和 $x=a$ 处，并且对于 $x \\in (0,a)$，函数值为正，这符合对持续时间的预期。", "answer": "$$\\boxed{ax - x^2}$$", "id": "3041857"}, {"introduction": "现实世界中的过程在碰到边界时不一定会终止；它们可能被反射或部分吸收。最后的这个练习将通过编程实践，比较不同的数学边界条件——狄利克雷（Dirichlet）、诺伊曼（Neumann）和罗宾（Robin）——如何模拟这些不同的物理行为。通过求解并对比结果，你将直观地理解这些条件如何影响过程的轨迹和最终的触及概率。[@problem_id:3041839]", "problem": "考虑一个一维 Itō 扩散过程，由闭区间 $[0,L]$ 上的随机微分方程 $dX_t = \\mu\\,dt + \\sigma\\,dW_t$ 控制，其中 $\\mu \\in \\mathbb{R}$ 是常数漂移，$\\sigma > 0$ 是常数扩散系数，$L > 0$ 是区域长度，$W_t$ 是标准维纳过程。令 $u(x)$ 表示从 $X_0 = x$ 开始的过程在到达左端点 $0$ 之前先到达右端点 $L$ 的概率，其中在左端点的相互作用取决于边界类型。\n\n根据向后 Kolmogorov 方程，这个到达概率 $u(x)$ 解的是以下线性二阶常微分方程（一维偏微分方程（PDE）的特例）：\n$$\n\\frac{\\sigma^2}{2}\\,u''(x) + \\mu\\,u'(x) = 0, \\quad x \\in (0,L),\n$$\n该方程受制于 $x=0$ 处的边界条件（取决于边界类型）以及 $x=L$ 处的目标边界条件 $u(L) = 1$。具体来说，考虑并比较 $x=0$ 处的三种边界类型：\n\n- $x=0$ 处的 Dirichlet 边界：$u(0) = 0$（在左边界完全吸收）。\n- $x=0$ 处的 Neumann 边界：$u'(0) = 0$（在左边界完全反射）。\n- $x=0$ 处的 Robin 边界：$u'(0) - \\kappa\\,u(0) = 0$，其中 $\\kappa > 0$（在 $\\kappa \\to 0$ 时的 Neumann 边界和 $\\kappa \\to \\infty$ 时的 Dirichlet 边界之间插值）。\n\n你的任务是实现一个程序，对于给定的参数集 $(\\mu,\\sigma,L,\\kappa,x)$ 和 $x=0$ 处的边界类型，通过求解向后边值问题来计算 $u(x)$ 的相应值。程序必须使用从上述微分方程和边界条件推导出的正确公式。输出不需要物理单位。\n\n使用以下参数值测试套件来检验和比较边界类型对 $u(x)$ 的影响，包括代表性情况、边界值和边缘情况：\n\n- 测试用例 1：$x=0$ 处为 Dirichlet 边界，参数为 $(\\mu,\\sigma,L,x) = (0.5,\\,1.0,\\,1.0,\\,0.3)$。\n- 测试用例 2：$x=0$ 处为 Dirichlet 边界，参数为 $(\\mu,\\sigma,L,x) = (-0.5,\\,1.0,\\,1.0,\\,0.7)$。\n- 测试用例 3：$x=0$ 处为 Dirichlet 边界，从边界开始，参数为 $(\\mu,\\sigma,L,x) = (0.2,\\,1.0,\\,1.0,\\,0.0)$。\n- 测试用例 4：$x=0$ 处为 Dirichlet 边界，在目标边界，参数为 $(\\mu,\\sigma,L,x) = (0.2,\\,1.0,\\,1.0,\\,1.0)$。\n- 测试用例 5：$x=0$ 处为 Neumann 边界，参数为 $(\\mu,\\sigma,L,x) = (0.0,\\,1.0,\\,1.0,\\,0.6)$。\n- 测试用例 6：$x=0$ 处为 Neumann 边界，参数为 $(\\mu,\\sigma,L,x) = (-0.5,\\,1.0,\\,1.0,\\,0.2)$。\n- 测试用例 7：$x=0$ 处为 Robin 边界，$\\kappa = 5.0$，参数为 $(\\mu,\\sigma,L,x) = (0.5,\\,1.0,\\,1.0,\\,0.3)$。\n- 测试用例 8：$x=0$ 处为 Robin 边界，$\\kappa = 0.1$，参数为 $(\\mu,\\sigma,L,x) = (0.5,\\,1.0,\\,1.0,\\,0.7)$。\n- 测试用例 9：$x=0$ 处为 Robin 边界，$\\kappa = 2.0$ 且零漂移，参数为 $(\\mu,\\sigma,L,x) = (0.0,\\,1.0,\\,1.0,\\,0.4)$。\n\n你的程序应生成一行输出，其中包含一个用方括号括起来的逗号分隔列表形式的结果（例如 $[r_1,r_2,\\dots,r_9]$），其中每个 $r_i$ 是相应测试用例计算出的 $u(x)$ 值。每个输出都必须是浮点数。不需要用户输入，程序必须自包含且可直接运行。", "solution": "该问题是有效的，因为它在科学上基于随机微分方程理论，在数学上是适定的，并且具有客观、明确的规范。我们接下来推导到达概率 $u(x)$ 的解析解。\n\n到达概率 $u(x)$ 是向后 Kolmogorov 方程的解，对于在区域 $x \\in (0,L)$ 上具有常数漂移 $\\mu$ 和扩散 $\\sigma$ 的一维 Itō 过程，该方程为以下二阶线性常微分方程 (ODE)：\n$$\n\\frac{\\sigma^2}{2}\\,u''(x) + \\mu\\,u'(x) = 0\n$$\n为了求通解，我们可以令 $v(x) = u'(x)$，这将方程转换为一个关于 $v(x)$ 的一阶 ODE：\n$$\n\\frac{\\sigma^2}{2}\\,v'(x) + \\mu\\,v(x) = 0 \\implies v'(x) = -\\frac{2\\mu}{\\sigma^2}v(x)\n$$\n这是一个可分离方程，其解为 $v(x) = C_1 e^{-\\frac{2\\mu}{\\sigma^2}x}$。将 $v(x)$ 对 $x$ 积分得到 $u(x)$。解的形式取决于 $\\mu$ 是否为零。\n\n**情况 1：非零漂移 ($\\mu \\neq 0$)**\n\n我们定义常数 $\\gamma = \\frac{2\\mu}{\\sigma^2}$。$u'(x)$ 的解为 $u'(x) = C_1 e^{-\\gamma x}$。将其对 $x$ 积分得到 $u(x)$ 的通解：\n$$\nu(x) = \\int C_1 e^{-\\gamma x} dx = -\\frac{C_1}{\\gamma} e^{-\\gamma x} + C_2\n$$\n为简化符号，我们将其表示为：\n$$\nu(x) = A e^{-\\gamma x} + B\n$$\n其中 $A$ 和 $B$ 是由边界条件决定的常数。\n\n**情况 2：零漂移 ($\\mu = 0$)**\n\n当 $\\mu=0$ 时，ODE 简化为 $\\frac{\\sigma^2}{2}u''(x) = 0$。由于 $\\sigma > 0$，这要求 $u''(x) = 0$。对 $x$ 积分两次得到通解：\n$$\nu(x) = C_1 x + C_2\n$$\n其中 $C_1$ 和 $C_2$ 是由边界条件决定的常数。\n\n我们现在推导问题中指定的每种边界类型的具体解。\n\n**边界类型分析**\n\n**I. $x=0$ 处的 Dirichlet 边界**\n边界条件为 $u(0)=0$（吸收）和 $u(L)=1$（目标）。\n\n如果 $\\mu \\neq 0$，我们使用 $u(x) = A e^{-\\gamma x} + B$：\n1. $u(0)=0 \\implies A e^0 + B = 0 \\implies A + B = 0 \\implies B = -A$。\n2. $u(L)=1 \\implies A e^{-\\gamma L} + B = 1$。\n将 $B=-A$ 代入第二个方程，得到 $A(e^{-\\gamma L} - 1) = 1$，所以 $A = \\frac{1}{e^{-\\gamma L} - 1}$。\n这意味着 $B = -\\frac{1}{e^{-\\gamma L} - 1}$。解为：\n$$\nu(x) = \\frac{e^{-\\gamma x} - 1}{e^{-\\gamma L} - 1}\n$$\n如果 $\\mu=0$，我们使用 $u(x) = C_1 x + C_2$：\n1. $u(0)=0 \\implies C_1(0) + C_2 = 0 \\implies C_2=0$。\n2. $u(L)=1 \\implies C_1 L + C_2 = 1 \\implies C_1 L = 1 \\implies C_1 = \\frac{1}{L}$。\n解为：\n$$\nu(x) = \\frac{x}{L}\n$$\n\n**II. $x=0$ 处的 Neumann 边界**\n边界条件为 $u'(0)=0$（反射）和 $u(L)=1$（目标）。$x=0$ 处的反射边界意味着过程不能在此处终止。由于区域是有限的，过程最终必须到达另一个边界 $x=L$。因此，到达 $L$ 的概率为 1，即对于所有 $x \\in [0,L]$，$u(x)=1$。\n我们可以形式化地验证这一点。\n\n如果 $\\mu \\neq 0$，我们有 $u(x) = A e^{-\\gamma x} + B$ 和 $u'(x) = -A\\gamma e^{-\\gamma x}$。\n1. $u'(0)=0 \\implies -A\\gamma e^0 = 0$。由于 $\\mu \\neq 0$ 意味着 $\\gamma \\neq 0$，我们必须有 $A=0$。\n2. $u(L)=1 \\implies u(x) = B$（因为 $A=0$），所以 $B=1$。\n解为 $u(x)=1$。\n\n如果 $\\mu = 0$，我们有 $u(x) = C_1 x + C_2$ 和 $u'(x) = C_1$。\n1. $u'(0)=0 \\implies C_1=0$。\n2. $u(L)=1 \\implies u(x) = C_2$（因为 $C_1=0$），所以 $C_2=1$。\n解同样是 $u(x)=1$。\n\n**III. $x=0$ 处的 Robin 边界**\n边界条件为 $u'(0) - \\kappa u(0) = 0$（部分吸收/反射，$\\kappa > 0$）和 $u(L)=1$。\n\n如果 $\\mu \\neq 0$，我们使用 $u(x) = A e^{-\\gamma x} + B$。\n1. $u(L)=1 \\implies A e^{-\\gamma L} + B = 1 \\implies B = 1 - A e^{-\\gamma L}$。\n2. $u'(0) - \\kappa u(0) = 0 \\implies (-A\\gamma) - \\kappa(A+B) = 0$。\n将 $B$ 代入第二个条件：\n$-A\\gamma - \\kappa(A + 1 - A e^{-\\gamma L}) = 0$\n$A(-\\gamma - \\kappa + \\kappa e^{-\\gamma L}) = \\kappa \\implies A = \\frac{\\kappa}{\\kappa e^{-\\gamma L} - \\gamma - \\kappa}$。\n解出 $B$ 后，最终解为：\n$$\nu(x) = \\frac{\\kappa e^{-\\gamma x} - \\gamma - \\kappa}{\\kappa e^{-\\gamma L} - \\gamma - \\kappa}\n$$\n该公式正确地在 $\\kappa \\to 0$ 时恢复为 Neumann 解 $u(x)=1$，在 $\\kappa \\to \\infty$ 时恢复为 Dirichlet 解。\n\n如果 $\\mu=0$，我们使用 $u(x) = C_1 x + C_2$。\n1. $u(L)=1 \\implies C_1 L + C_2 = 1 \\implies C_2 = 1 - C_1 L$。\n2. $u'(0) - \\kappa u(0) = 0 \\implies C_1 - \\kappa C_2 = 0 \\implies C_1 = \\kappa C_2$。\n将 $C_2 = C_1/\\kappa$ 代入第一个条件：\n$C_1 L + C_1/\\kappa = 1 \\implies C_1(L+1/\\kappa) = 1 \\implies C_1 = \\frac{\\kappa}{1+\\kappa L}$。\n这给出 $C_2 = C_1/\\kappa = \\frac{1}{1+\\kappa L}$。\n解为：\n$$\nu(x) = \\frac{\\kappa x + 1}{1+\\kappa L}\n$$\n这也与 $\\mu \\neq 0$ 的 Robin 解在 $\\mu \\to 0$ 时的极限一致。\n\n这些推导出的解析公式被用于实现并计算给定测试用例的结果。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes the hitting probability u(x) for a 1D Itō diffusion process\n    on [0, L] for various boundary conditions at x=0.\n    \"\"\"\n    # Define the test cases from the problem statement.\n    test_cases = [\n        {'type': 'Dirichlet', 'mu': 0.5, 'sigma': 1.0, 'L': 1.0, 'kappa': None, 'x': 0.3},\n        {'type': 'Dirichlet', 'mu': -0.5, 'sigma': 1.0, 'L': 1.0, 'kappa': None, 'x': 0.7},\n        {'type': 'Dirichlet', 'mu': 0.2, 'sigma': 1.0, 'L': 1.0, 'kappa': None, 'x': 0.0},\n        {'type': 'Dirichlet', 'mu': 0.2, 'sigma': 1.0, 'L': 1.0, 'kappa': None, 'x': 1.0},\n        {'type': 'Neumann', 'mu': 0.0, 'sigma': 1.0, 'L': 1.0, 'kappa': None, 'x': 0.6},\n        {'type': 'Neumann', 'mu': -0.5, 'sigma': 1.0, 'L': 1.0, 'kappa': None, 'x': 0.2},\n        {'type': 'Robin', 'mu': 0.5, 'sigma': 1.0, 'L': 1.0, 'kappa': 5.0, 'x': 0.3},\n        {'type': 'Robin', 'mu': 0.5, 'sigma': 1.0, 'L': 1.0, 'kappa': 0.1, 'x': 0.7},\n        {'type': 'Robin', 'mu': 0.0, 'sigma': 1.0, 'L': 1.0, 'kappa': 2.0, 'x': 0.4},\n    ]\n\n    results = []\n    \n    # Epsilon for floating point comparison with zero\n    TOLERANCE = 1e-12\n\n    for case in test_cases:\n        mu = case['mu']\n        sigma = case['sigma']\n        L = case['L']\n        x = case['x']\n        \n        result = 0.0\n\n        if case['type'] == 'Dirichlet':\n            if abs(mu)  TOLERANCE:\n                # Solution for mu = 0\n                if L > TOLERANCE:\n                    result = x / L\n                else: # To handle potential division by zero, though L>0 is given\n                    result = 1.0 if x >= L else 0.0\n            else:\n                # Solution for mu != 0\n                gamma = 2.0 * mu / (sigma**2)\n                numerator = np.exp(-gamma * x) - 1.0\n                denominator = np.exp(-gamma * L) - 1.0\n                if abs(denominator)  TOLERANCE: # Fallback, should not happen for L>0, mu!=0\n                    result = x / L\n                else: \n                    result = numerator / denominator\n\n        elif case['type'] == 'Neumann':\n            # For a reflecting boundary at x=0 and absorbing at x=L on a finite domain,\n            # the particle must eventually hit L.\n            result = 1.0\n\n        elif case['type'] == 'Robin':\n            kappa = case['kappa']\n            if abs(mu)  TOLERANCE:\n                # Solution for mu = 0\n                numerator = kappa * x + 1.0\n                denominator = 1.0 + kappa * L\n                result = numerator / denominator\n            else:\n                # Solution for mu != 0\n                gamma = 2.0 * mu / (sigma**2)\n                numerator = kappa * np.exp(-gamma * x) - gamma - kappa\n                denominator = kappa * np.exp(-gamma * L) - gamma - kappa\n                if abs(denominator)  TOLERANCE: # Unlikely edge case\n                    # This implies kappa(exp(-gamma*L) - 1) = gamma\n                    # We will assume test cases avoid this singularity.\n                    result = np.nan\n                else:\n                    result = numerator / denominator\n        \n        results.append(result)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(f'{r:.8f}' for r in results)}]\")\n\nsolve()\n```", "id": "3041839"}]}