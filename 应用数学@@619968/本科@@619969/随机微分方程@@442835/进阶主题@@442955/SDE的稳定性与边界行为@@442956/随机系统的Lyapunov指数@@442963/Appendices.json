{"hands_on_practices": [{"introduction": "几何布朗运动是随机系统中乘性噪声的典型范例。本练习将引导你使用伊藤引理 (Itô's lemma)，一步步推导出其李雅普诺夫指数 (Lyapunov exponent)。这个基础计算清晰地揭示了系统的长期指数增长率是如何由漂移项和噪声强度共同决定的，这是理解随机稳定性的第一步 [@problem_id:3064458]。", "problem": "考虑在一个带滤概率空间 $(\\Omega, \\mathcal{F}, (\\mathcal{F}_t)_{t \\geq 0}, \\mathbb{P})$ 上的标量随机微分方程 (SDE) $dX_t = a X_t \\, dt + \\sigma X_t \\, dW_t$，其中 $W_t$ 是一个标准布朗运动（也称为维纳过程），$a \\in \\mathbb{R}$ 和 $\\sigma \\in \\mathbb{R}$ 是常数，且 $X_0 \\in \\mathbb{R} \\setminus \\{0\\}$ 是确定性的。仅使用伊藤引理和基本鞅性质等基础工具，计算 $\\mathbb{P}$-几乎必然 (a.s.) 极限 $\\lim_{t \\to \\infty} \\frac{1}{t} \\ln |X_t|$。你的最终答案必须是关于 $a$ 和 $\\sigma$ 的单一封闭形式解析表达式。", "solution": "本题要求计算几乎必然极限 $\\lim_{t \\to \\infty} \\frac{1}{t} \\ln |X_t|$，其中 $X_t$ 是标量随机微分方程 (SDE) 的解：\n$$dX_t = a X_t \\, dt + \\sigma X_t \\, dW_t$$\n初始条件为 $X_0 \\in \\mathbb{R} \\setminus \\{0\\}$，一个确定性常数。参数 $a$ 和 $\\sigma$ 是实常数，$W_t$ 是标准一维布朗运动。该 SDE 是几何布朗运动的一个经典例子。\n\n为了找到 $\\ln|X_t|$ 的表达式，我们对函数 $f(x) = \\ln|x|$ 应用伊藤引理。对于 $x \\neq 0$，函数 $f(x)$ 的一阶和二阶导数分别为 $f'(x) = \\frac{1}{x}$ 和 $f''(x) = -\\frac{1}{x^2}$。给定 SDE 的解从一个非零值 $X_0$ 出发，对于 $t > 0$ 几乎必然不会达到 $0$，因此 $f(X_t)$ 是良定义的。\n\n令 $Y_t = f(X_t) = \\ln|X_t|$。根据伊藤引理，微分 $dY_t$ 由下式给出：\n$$dY_t = f'(X_t) \\, dX_t + \\frac{1}{2} f''(X_t) \\, (dX_t)^2$$\n我们代入 $dX_t$、$f'(X_t)$ 和 $f''(X_t)$ 的表达式：\n$$dY_t = \\frac{1}{X_t} (a X_t \\, dt + \\sigma X_t \\, dW_t) + \\frac{1}{2} \\left(-\\frac{1}{X_t^2}\\right) (dX_t)^2$$\n二次变差项 $(dX_t)^2$ 使用伊藤微积分的法则计算：$(dt)^2 = 0$，$dt \\, dW_t = 0$，以及 $(dW_t)^2 = dt$。\n$$(dX_t)^2 = (a X_t \\, dt + \\sigma X_t \\, dW_t)^2 = (\\sigma X_t)^2 (dW_t)^2 = \\sigma^2 X_t^2 \\, dt$$\n我们将其代回到 $dY_t$ 的表达式中：\n$$dY_t = \\frac{1}{X_t} (a X_t \\, dt + \\sigma X_t \\, dW_t) - \\frac{1}{2} \\frac{1}{X_t^2} (\\sigma^2 X_t^2 \\, dt)$$\n化简各项，我们得到：\n$$dY_t = (a \\, dt + \\sigma \\, dW_t) - \\frac{1}{2} \\sigma^2 \\, dt$$\n$$dY_t = \\left(a - \\frac{1}{2} \\sigma^2\\right) dt + \\sigma \\, dW_t$$\n这是 $Y_t = \\ln|X_t|$ 的一个 SDE。我们可以通过从 $s=0$ 到 $s=t$ 积分来求解 $Y_t$：\n$$\\int_0^t dY_s = \\int_0^t \\left(a - \\frac{1}{2} \\sigma^2\\right) ds + \\int_0^t \\sigma \\, dW_s$$\n这得出：\n$$Y_t - Y_0 = \\left(a - \\frac{1}{2} \\sigma^2\\right) t + \\sigma (W_t - W_0)$$\n已知 $Y_t = \\ln|X_t|$ 并且按照惯例 $W_0=0$，我们有：\n$$\\ln|X_t| - \\ln|X_0| = \\left(a - \\frac{1}{2} \\sigma^2\\right) t + \\sigma W_t$$\n整理各项可得 $\\ln|X_t|$ 的显式解：\n$$\\ln|X_t| = \\ln|X_0| + \\left(a - \\frac{1}{2} \\sigma^2\\right) t + \\sigma W_t$$\n现在我们可以计算所求的极限。我们将整个表达式除以 $t$：\n$$\\frac{1}{t} \\ln|X_t| = \\frac{\\ln|X_0|}{t} + a - \\frac{1}{2} \\sigma^2 + \\sigma \\frac{W_t}{t}$$\n我们取 $t \\to \\infty$ 时的极限：\n$$\\lim_{t \\to \\infty} \\frac{1}{t} \\ln|X_t| = \\lim_{t \\to \\infty} \\left( \\frac{\\ln|X_0|}{t} + a - \\frac{1}{2} \\sigma^2 + \\sigma \\frac{W_t}{t} \\right)$$\n我们分别计算每一项的极限。极限运算是在 $\\mathbb{P}$-几乎必然的意义下进行的。\n$1$. 项 $\\frac{\\ln|X_0|}{t}$：由于 $X_0$ 是一个非零的确定性常数，$\\ln|X_0|$ 是一个有限常数。因此，$\\lim_{t \\to \\infty} \\frac{\\ln|X_0|}{t} = 0$。\n$2$. 项 $a - \\frac{1}{2} \\sigma^2$：这是一个常数，所以其极限就是它本身。\n$3$. 项 $\\sigma \\frac{W_t}{t}$：关键部分是标准布朗运动 $W_t$ 的渐近行为。布朗运动的强大数定律指出 $\\lim_{t \\to \\infty} \\frac{W_t}{t} = 0$ 几乎必然。由于 $\\sigma$ 是一个常数，我们有 $\\lim_{t \\to \\infty} \\sigma \\frac{W_t}{t} = \\sigma \\cdot 0 = 0$ 几乎必然。\n\n综合这些结果，我们得到几乎必然极限：\n$$\\lim_{t \\to \\infty} \\frac{1}{t} \\ln|X_t| = 0 + \\left(a - \\frac{1}{2} \\sigma^2\\right) + 0 = a - \\frac{1}{2} \\sigma^2$$\n该极限被称为由 SDE 定义的随机动力系统的顶李雅普诺夫指数。它刻画了解的长期平均指数增长或衰减率。", "answer": "$$\\boxed{a - \\frac{1}{2}\\sigma^2}$$", "id": "3064458"}, {"introduction": "与上一个乘性噪声的例子形成对比，本练习探讨了带有加性噪声的奥恩斯坦-乌伦贝克过程 (Ornstein–Uhlenbeck process)。这个实践旨在阐明一个关键原则：为何衡量两条轨迹分离速率的李雅普诺夫指数对加性噪声不敏感 [@problem_id:3064437]。通过分析两条路径之差的演化，你将发现其背后隐藏的确定性规律。", "problem": "考虑由随机微分方程（SDE）描述的一维 Ornstein–Uhlenbeck 过程，定义如下：\n$$\ndX_t = -\\gamma X_t\\,dt + \\sigma\\,dW_t,\n$$\n其中 $\\gamma>0$ 和 $\\sigma\\ge 0$ 是常数，$(W_t)_{t\\ge 0}$ 是一个标准 Wiener 过程（Brownian motion）。两个解 $X_t^{(1)}$ 和 $X_t^{(2)}$ 由同一个 Brownian motion 的实现驱动，但具有不同的初始条件 $X_0^{(1)}\\neq X_0^{(2)}$。该随机动力系统的最大李雅普诺夫指数 $\\lambda$ 由长期分离率定义：\n$$\n\\lambda \\equiv \\lim_{t\\to\\infty}\\frac{1}{t}\\ln\\left(\\frac{|X_t^{(1)}-X_t^{(2)}|}{|X_0^{(1)}-X_0^{(2)}|}\\right),\n$$\n当该极限几乎必然存在时。\n\n从随机微积分的核心定义和经过充分检验的结果出发，计算该系统的李雅普诺夫指数 $\\lambda$，并从第一性原理出发，证明为何加性噪声不改变 $\\lambda$ 的值。将最终答案表示为关于 $\\gamma$ 和 $\\sigma$ 的单个闭式解析表达式。无需四舍五入，且不涉及物理单位。[@problem_id:481]", "solution": "问题要求计算一维 Ornstein-Uhlenbeck 过程的最大李雅普诺夫指数 $\\lambda$，并证明为何加性噪声不影响其值。\n\n控制该过程的随机微分方程（SDE）如下所示：\n$$\ndX_t = -\\gamma X_t\\,dt + \\sigma\\,dW_t\n$$\n其中 $\\gamma > 0$ 和 $\\sigma \\ge 0$ 是常数，而 $(W_t)_{t \\ge 0}$ 是一个标准 Wiener 过程。\n\n让我们考虑源于不同初始条件 $X_0^{(1)} \\neq X_0^{(2)}$ 的两个解 $X_t^{(1)}$ 和 $X_t^{(2)}$。关键的是，两个解都由 Wiener 过程 $W_t$ 的同一个实现驱动。它们各自的 SDE 分别为：\n$$\ndX_t^{(1)} = -\\gamma X_t^{(1)}\\,dt + \\sigma\\,dW_t\n$$\n$$\ndX_t^{(2)} = -\\gamma X_t^{(2)}\\,dt + \\sigma\\,dW_t\n$$\n为了分析这两条轨迹的分离情况，我们定义一个新过程 $\\Delta X_t$ 来代表它们之间的差值：\n$$\n\\Delta X_t \\equiv X_t^{(1)} - X_t^{(2)}\n$$\n初始差值为 $\\Delta X_0 = X_0^{(1)} - X_0^{(2)}$，根据题设，该值非零。\n\n我们将第二个 SDE 从第一个 SDE 中减去，以推导 $\\Delta X_t$ 的微分方程。利用微分算子 $d$ 的线性性质，我们得到：\n$$\nd(\\Delta X_t) = d(X_t^{(1)} - X_t^{(2)}) = dX_t^{(1)} - dX_t^{(2)}\n$$\n将 $dX_t^{(1)}$ 和 $dX_t^{(2)}$ 的表达式代入，得到：\n$$\nd(\\Delta X_t) = (-\\gamma X_t^{(1)}\\,dt + \\sigma\\,dW_t) - (-\\gamma X_t^{(2)}\\,dt + \\sigma\\,dW_t)\n$$\n我们可以将各项重新整理如下：\n$$\nd(\\Delta X_t) = (-\\gamma X_t^{(1)} + \\gamma X_t^{(2)})\\,dt + (\\sigma - \\sigma)\\,dW_t\n$$\n$$\nd(\\Delta X_t) = -\\gamma (X_t^{(1)} - X_t^{(2)})\\,dt + 0 \\cdot dW_t\n$$\n通过代入定义 $\\Delta X_t = X_t^{(1)} - X_t^{(2)}$，我们得到描述分离情况的控制方程：\n$$\nd(\\Delta X_t) = -\\gamma \\Delta X_t\\,dt\n$$\n这个方程是一个确定性的线性常微分方程（ODE）。随机项完全消失了。这就从第一性原理上证明了，为何由项 $\\sigma\\,dW_t$ 所代表的加性噪声，不影响两条轨迹之间差值的演化。噪声项与状态 $X_t$ 无关，这意味着它在每一时刻都对两条轨迹施加相同的随机脉冲。因此，虽然轨迹本身是随机的，但它们的差值 $\\Delta X_t$ 的演化是确定性的。\n\n我们可以用分离变量法求解这个 ODE：\n$$\n\\frac{d(\\Delta X_t)}{\\Delta X_t} = -\\gamma\\,dt\n$$\n将两边从初始时间 $t=0$ 积分到稍后的时间 $t$，得到：\n$$\n\\int_{\\Delta X_0}^{\\Delta X_t} \\frac{1}{u}\\,du = \\int_0^t -\\gamma\\,ds\n$$\n$$\n\\ln|\\Delta X_t| - \\ln|\\Delta X_0| = -\\gamma t\n$$\n整理各项，我们得到分离量大小的显式解：\n$$\n\\ln\\left(\\frac{|\\Delta X_t|}{|\\Delta X_0|}\\right) = -\\gamma t\n$$\n对两边取指数，得到分离量本身的解：\n$$\n|\\Delta X_t| = |\\Delta X_0| \\exp(-\\gamma t)\n$$\n现在，我们可以使用李雅普诺夫指数 $\\lambda$ 的定义来计算它：\n$$\n\\lambda \\equiv \\lim_{t\\to\\infty}\\frac{1}{t}\\ln\\left(\\frac{|X_t^{(1)}-X_t^{(2)}|}{|X_0^{(1)}-X_0^{(2)}|}\\right)\n$$\n代入 $|\\Delta X_t|$ 和 $|\\Delta X_0|$：\n$$\n\\lambda = \\lim_{t\\to\\infty}\\frac{1}{t}\\ln\\left(\\frac{|\\Delta X_t|}{|\\Delta X_0|}\\right)\n$$\n使用我们关于分离量演化的解，我们得到：\n$$\n\\lambda = \\lim_{t\\to\\infty}\\frac{1}{t}\\ln\\left(\\frac{|\\Delta X_0| \\exp(-\\gamma t)}{|\\Delta X_0|}\\right)\n$$\n因为 $\\Delta X_0 \\neq 0$，我们可以消去项 $|\\Delta X_0|$：\n$$\n\\lambda = \\lim_{t\\to\\infty}\\frac{1}{t}\\ln(\\exp(-\\gamma t))\n$$\n自然对数和指数函数互为逆运算，所以：\n$$\n\\lambda = \\lim_{t\\to\\infty}\\frac{1}{t}(-\\gamma t)\n$$\n$$\n\\lambda = \\lim_{t\\to\\infty}(-\\gamma)\n$$\n常数的极限是其本身。因此，李雅普诺夫指数为：\n$$\n\\lambda = -\\gamma\n$$\n这个结果与 $\\sigma$ 无关，这正式地证实了加性噪声的大小不改变该线性系统的李雅普诺夫指数。该指数仅由确定性的、恢复性的漂移项 $-\\gamma X_t$ 决定。条件 $\\gamma > 0$ 确保了 $\\lambda$ 为负，这对应于一个随机稳定系统，其中初始分离的轨迹会随时间呈指数级收敛。$\\lambda$ 定义中的“几乎必然”条件在这里是平凡满足的，因为分离量的演化是完全确定性的。", "answer": "$$\n\\boxed{-\\gamma}\n$$", "id": "3064437"}, {"introduction": "对于高维或复杂的随机系统，解析解往往难以求得。本练习旨在连接理论与实际应用，介绍一种基于QR分解的强大数值算法来估算最大李雅普诺夫指数 [@problem_id:3064480]。这种方法是计算动力学中的标准工具，适用于处理那些无法通过纸笔推导解决的复杂系统，让你能够亲手探索非平凡随机系统的稳定性。", "problem": "考虑$\\mathbb{R}^d$空间中带有乘性噪声的线性随机微分方程，\n$$\ndY_t \\;=\\; A\\,Y_t\\,dt \\;+\\; \\sum_{i=1}^{m} B_i\\,Y_t\\,dW_t^{(i)},\n$$\n其中 $A \\in \\mathbb{R}^{d\\times d}$ 是一个常数漂移矩阵，每个 $B_i \\in \\mathbb{R}^{d\\times d}$ 是一个常数扩散（噪声）矩阵，而 $W_t^{(i)}$ 是独立的标准布朗运动（维纳过程）。此随机线性流的最大李雅普诺夫指数 $\\lambda_1$ 由以下极限定义\n$$\n\\lambda_1 \\;=\\; \\lim_{t\\to\\infty} \\frac{1}{t}\\,\\ln \\,\\frac{\\|Y_t\\|}{\\|Y_0\\|},\n$$\n对于典型的初始条件 $Y_0 \\neq 0$，其中 $\\|\\cdot\\|$ 表示 $\\mathbb{R}^d$ 上的欧几里得范数。\n\n编写一个完整、可运行的程序，使用一种数值算法来估计 $\\lambda_1$。该算法通过演化多个切向量，并利用正交三角（QR）分解进行周期性再正交化。您的程序必须：\n- 使用步长 $\\Delta t$ 对时间进行离散化，并对线性系统使用欧拉-丸山（Euler–Maruyama）更新。在每个时间步中，通过独立的高斯随机变量 $\\Delta W^{(i)} \\sim \\mathcal{N}(0,\\Delta t)$ 来近似布朗增量，并使用以下矩阵更新流\n$$\nM_k \\;=\\; I_d \\;+\\; A\\,\\Delta t \\;+\\; \\sum_{i=1}^{m} B_i\\,\\Delta W_k^{(i)},\n$$\n其中 $I_d$ 是 $d\\times d$ 的单位矩阵，$k$ 是时间步索引。\n- 同时演化 $d$ 个切向量，这些向量作为矩阵 $Q_k \\in \\mathbb{R}^{d\\times d}$ 的列，从一个标准正交基（例如，$Q_0 = I_d$）开始。在一个包含 $p$ 个时间步的块上，累积乘积 $V = M_{k+p-1}\\cdots M_{k} Q_k$。\n- 每隔 $p$ 个时间步，对 $V$ 进行 QR 分解，得到 $V = Q\\,R$，其中 $Q \\in \\mathbb{R}^{d\\times d}$ 是正交矩阵，$R \\in \\mathbb{R}^{d\\times d}$ 是上三角矩阵。记录第一个对角线元素绝对值的对数 $\\ln|R_{11}|$。用 $Q$ 替换 $Q_k$ 并继续。如果模拟在两次再正交化之间结束，则执行最后一次 QR 步骤以记录剩余的增长。\n- 通过将所有 QR 步骤中累积的 $\\ln|R_{11}|$ 之和除以总模拟时间 $T$，来估计最大李雅普诺夫指数。\n\n您的程序必须实现此算法，并为以下测试套件生成结果。在有噪声的情况下，使用给定的随机种子以确保可复现性。在所有情况下，将初始标准正交矩阵设置为 $Q_0 = I_d$。\n\n测试套件：\n1. 一维解析基准：\n   - 维度：$d=1$。\n   - 噪声分量数量：$m=1$。\n   - 漂移：$A = [0.3]$。\n   - 扩散矩阵：$B_1 = [0.8]$。\n   - 总时间：$T = 50.0$。\n   - 时间步长：$\\Delta t = 10^{-3}$。\n   - 再正交化周期（步数）：$p = 10$。\n   - 随机种子：$42$。\n\n2. 二维确定性基准：\n   - 维度：$d=2$。\n   - 噪声分量数量：$m=0$。\n   - 漂移：$A = \\mathrm{diag}(0.1,\\,-0.5)$。\n   - 扩散矩阵：无。\n   - 总时间：$T = 50.0$。\n   - 时间步长：$\\Delta t = 10^{-3}$。\n   - 再正交化周期（步数）：$p = 10$。\n   - 随机种子：$123$（未使用，但为保持接口一致性而包含）。\n\n3. 二维稳定漂移与各向同性乘性噪声：\n   - 维度：$d=2$。\n   - 噪声分量数量：$m=1$。\n   - 漂移：$A = \\mathrm{diag}(-0.2,\\,-0.3)$。\n   - 扩散矩阵：$B_1 = \\mathrm{diag}(0.7,\\,0.7)$。\n   - 总时间：$T = 50.0$。\n   - 时间步长：$\\Delta t = 10^{-3}$。\n   - 再正交化周期（步数）：$p = 10$。\n   - 随机种子：$2023$。\n\n4. 三维非对易漂移与噪声：\n   - 维度：$d=3$。\n   - 噪声分量数量：$m=2$。\n   - 漂移：\n     $$\n     A \\;=\\; \\begin{bmatrix}\n     0.0  1.0  0.0 \\\\\n     -2.0  -0.1  0.0 \\\\\n     0.0  0.0  -0.2\n     \\end{bmatrix}.\n     $$\n   - 扩散矩阵：\n     $$\n     B_1 \\;=\\; \\begin{bmatrix}\n     0.3  0.0  0.0 \\\\\n     0.0  0.3  0.0 \\\\\n     0.0  0.0  0.0\n     \\endbmatrix}, \\quad\n     B_2 \\;=\\; \\begin{bmatrix}\n     0.0  0.5  0.0 \\\\\n     -0.5  0.0  0.0 \\\\\n     0.0  0.0  0.0\n     \\end{bmatrix}.\n     $$\n   - 总时间：$T = 50.0$。\n   - 时间步长：$\\Delta t = 10^{-3}$。\n   - 再正交化周期（步数）：$p = 5$。\n   - 随机种子：$7$。\n\n最终输出格式：\n您的程序应生成单行输出，其中包含一个用方括号括起来的逗号分隔列表（例如，$[r_1,r_2,r_3,r_4]$），其中 $r_j$ 是测试用例 $j$ 的最大李雅普诺夫指数估计值。不应打印任何其他文本。由于不涉及物理单位，请将每个 $r_j$ 报告为普通数值形式的浮点数。", "solution": "问题陈述已经过分析，并被确定为有效。它在科学上是合理的，问题提法是适定的，并且包含了实现指定数值算法以估计线性随机微分方程（SDE）最大李雅普诺夫指数所需的所有信息。\n\n### 方法原理\n\n该问题要求对一个线性随机系统的最大李雅普诺夫指数 $\\lambda_1$进行数值估计。动力学系统的李雅普诺夫指数量化了状态空间中相邻轨迹发散或收敛的平均指数率。对于线性系统 $dY_t = F(Y_t) dt + G(Y_t) dW_t$，无穷小扰动向量 $\\delta Y_t$ 的演化由线性化方程控制，在本例中，由于系统本身是线性的，该方程就是原始的 SDE：\n$$\nd(\\delta Y_t) \\;=\\; A\\,(\\delta Y_t)\\,dt \\;+\\; \\sum_{i=1}^{m} B_i\\,(\\delta Y_t)\\,dW_t^{(i)}\n$$\n最大李雅普诺夫指数 $\\lambda_1$ 对应于解向量范数 $\\|\\delta Y_t\\|$ 的最大平均指数增长率。\n\n对单个向量直接进行该方程的数值模拟，将导致其方向迅速与最大增长方向对齐，从而无法分辨其他较小的指数。此外，其大小会爆炸或消失，导致数值上溢或下溢。\n\n为克服此问题，标准算法（也是问题中指定的算法）基于追踪一组 $d$ 个切向量构成的完整标准正交基的演化。该基被周期性地再正交化，以保持方向信息和数值稳定性。\n\n### 算法步骤\n\n1.  **离散化：**使用欧拉-丸山（Euler-Maruyama）格式，将连续时间 SDE 近似为离散时间映射。在微小时间间隔 $\\Delta t$ 内，状态 $Y_t$ 的变化近似为：\n    $$\n    \\Delta Y_t \\;\\approx\\; A\\,Y_t\\,\\Delta t \\;+\\; \\sum_{i=1}^{m} B_i\\,Y_t\\,\\Delta W_t^{(i)}\n    $$\n    其中，连续布朗运动增量 $dW_t^{(i)}$ 被离散随机变量 $\\Delta W_k^{(i)} \\sim \\mathcal{N}(0, \\Delta t)$ 替代。这给出了更新规则 $Y_{k+1} = Y_k + \\Delta Y_k$，可以写成 $Y_{k+1} = M_k Y_k$，其中 $M_k$ 是随机更新矩阵：\n    $$\n    M_k \\;=\\; I_d \\;+\\; A\\,\\Delta t \\;+\\; \\sum_{i=1}^{m} B_i\\,\\Delta W_k^{(i)}\n    $$\n    这里，$I_d$ 是 $d \\times d$ 的单位矩阵。\n\n2.  **切向量演化与再正交化：**我们不演化单个向量，而是演化一组 $d$ 个标准正交向量，它们构成一个正交矩阵 $Q_k \\in \\mathbb{R}^{d\\times d}$ 的列。我们从一个标准正交基开始，通常是 $Q_0 = I_d$。\n    该算法以 $p$ 步为块进行。\n    - 在块的开始，我们有一个标准正交矩阵 $Q_{\\text{start}}$。\n    - 我们计算接下来的 $p$ 个随机更新矩阵与 $Q_{\\text{start}}$ 的乘积：\n      $$\n      V \\;=\\; (M_{k+p-1} \\cdots M_{k+1} M_k) \\, Q_{\\text{start}}\n      $$\n    - $V$ 的列代表演化后的（通常不再是标准正交的）基向量。为了提取它们的增长和新方向，我们进行 QR 分解：$V = QR$。\n    - 矩阵 $Q \\in \\mathbb{R}^{d\\times d}$ 是正交的，其列构成了下一个块的新标准正交基。\n    - 矩阵 $R \\in \\mathbb{R}^{d\\times d}$ 是上三角矩阵。其对角元素 $R_{ii}$ 表示参考系中相应向量的伸缩因子。具体来说，$R_{11}$ 衡量了第一个向量的增长，该向量在该块上演化后与最大增长方向对齐。\n\n3.  **李雅普诺夫指数估计：**最大李雅普诺夫指数是增长最快方向的对数增长的平均速率。在一个包含 $p$ 步（持续时间 $p\\,\\Delta t$）的块上，第一个向量的对数增长为 $\\ln|R_{11}|$。为了求出在总时间 $T$ 内的平均速率，我们将所有再正交化步骤中的这些对数增长相加，然后除以 $T$。\n    $$\n    \\lambda_1 \\;\\approx\\; \\frac{1}{T} \\sum_{j=1}^{N_{\\text{blocks}}} \\ln|R_{11}^{(j)}|\n    $$\n    其中 $R^{(j)}$ 是第 $j$ 次 QR 分解得到的 R 矩阵。这个过程是稳健的，并且当 $T \\to \\infty$ 时收敛到真实的指数。该实现将通过对剩余步骤累积的乘积执行最后一次 QR 分解来处理最后一个不完整的块。\n\n### 实现细节\n\n一个单一函数将针对一组给定的参数（$d, m, A, \\{B_i\\}, T, \\Delta t, p$ 和一个随机种子）实现所描述的算法。\n- 使用一个现代的随机数生成器（`numpy.random.default_rng`）来保证可复现性。\n- 总步数计算为 $N = \\text{round}(T/\\Delta t)$。\n- 一个 `while` 循环遍历所有时间步，以最多 $p$ 为大小的块进行处理。这种结构自然地处理了任何最后不完整的块。\n- 在每个块内，计算乘积 $V = M_{k+\\text{steps\\_in\\_block}-1}\\cdots M_k Q_{start}$。\n- 使用 `numpy.linalg.qr` 执行 QR 分解。\n- 累加 $\\ln|R_{11}|$ 的和。\n- 通过将这个和除以总时间 $T$ 来计算 $\\lambda_1$ 的最终估计值。\n- 对问题陈述中提供的每个测试用例重复此过程。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef calculate_top_lyapunov_exponent(d, m, A, B_list, T, dt, p, seed):\n    \"\"\"\n    Estimates the top Lyapunov exponent for a linear SDE using QR reorthonormalization.\n\n    Args:\n        d (int): Dimension of the system.\n        m (int): Number of noise components.\n        A (np.ndarray): Drift matrix (d x d).\n        B_list (list of np.ndarray): List of diffusion matrices (each d x d).\n        T (float): Total simulation time.\n        dt (float): Time step for discretization.\n        p (int): Number of steps between reorthonormalizations.\n        seed (int): Seed for the random number generator.\n\n    Returns:\n        float: The estimated top Lyapunov exponent.\n    \"\"\"\n    rng = np.random.default_rng(seed)\n    \n    n_steps = int(round(T / dt))\n    \n    # Initialize the orthonormal basis Q and the sum of log-growths.\n    Q = np.identity(d)\n    log_growth_sum = 0.0\n\n    step_idx = 0\n    while step_idx  n_steps:\n        # Determine the number of steps for the current block.\n        # This handles the final partial block automatically.\n        steps_in_block = min(p, n_steps - step_idx)\n        \n        # Start the accumulation with the current orthonormal basis.\n        V = np.copy(Q)\n        \n        # Evolve over the steps in the block.\n        for _ in range(steps_in_block):\n            # Generate Brownian increments for this time step.\n            # dW ~ N(0, dt), so standard normal scaled by sqrt(dt).\n            dW = rng.normal(0.0, np.sqrt(dt), size=m)\n\n            # Construct the Euler-Maruyama update matrix M_k.\n            M = np.identity(d) + A * dt\n            if m > 0:\n                noise_term = sum(B * dW_i for B, dW_i in zip(B_list, dW))\n                M += noise_term\n            \n            # Apply the update matrix.\n            V = M @ V\n        \n        # Perform QR decomposition on the evolved matrix V.\n        # V = Q_new * R\n        Q, R = np.linalg.qr(V)\n        \n        # Accumulate the log of the growth factor for the first vector.\n        # The problem asks for ln|R_11|.\n        log_growth_sum += np.log(np.abs(R[0, 0]))\n\n        # Increment step_idx by the number of steps processed.\n        step_idx += steps_in_block\n\n    # The Lyapunov exponent is the time-average of the log-growth.\n    lambda_1_estimate = log_growth_sum / T\n    \n    return lambda_1_estimate\n\ndef solve():\n    \"\"\"\n    Runs the test suite and prints the results in the required format.\n    \"\"\"\n    test_cases = [\n        # 1. Analytic baseline in one dimension\n        {\n            \"d\": 1, \"m\": 1,\n            \"A\": np.array([[0.3]]),\n            \"B_list\": [np.array([[0.8]])],\n            \"T\": 50.0, \"dt\": 1e-3, \"p\": 10, \"seed\": 42\n        },\n        # 2. Deterministic baseline in two dimensions\n        {\n            \"d\": 2, \"m\": 0,\n            \"A\": np.diag([0.1, -0.5]),\n            \"B_list\": [],\n            \"T\": 50.0, \"dt\": 1e-3, \"p\": 10, \"seed\": 123\n        },\n        # 3. Stable drift with isotropic multiplicative noise in two dimensions\n        {\n            \"d\": 2, \"m\": 1,\n            \"A\": np.diag([-0.2, -0.3]),\n            \"B_list\": [np.diag([0.7, 0.7])],\n            \"T\": 50.0, \"dt\": 1e-3, \"p\": 10, \"seed\": 2023\n        },\n        # 4. Non-commuting drift and noise in three dimensions\n        {\n            \"d\": 3, \"m\": 2,\n            \"A\": np.array([\n                [0.0, 1.0, 0.0],\n                [-2.0, -0.1, 0.0],\n                [0.0, 0.0, -0.2]\n            ]),\n            \"B_list\": [\n                np.array([\n                    [0.3, 0.0, 0.0],\n                    [0.0, 0.3, 0.0],\n                    [0.0, 0.0, 0.0]\n                ]),\n                np.array([\n                    [0.0, 0.5, 0.0],\n                    [-0.5, 0.0, 0.0],\n                    [0.0, 0.0, 0.0]\n                ])\n            ],\n            \"T\": 50.0, \"dt\": 1e-3, \"p\": 5, \"seed\": 7\n        }\n    ]\n\n    results = []\n    for case_params in test_cases:\n        result = calculate_top_lyapunov_exponent(**case_params)\n        results.append(result)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "3064480"}]}