{"hands_on_practices": [{"introduction": "多层蒙特卡罗（MLMC）方法的核心在于通过巧妙的“耦合”技术来显著降低估计量的方差。本练习将通过一个简单的随机微分方程，引导你从第一性原理出发，推导正确耦合与独立模拟两种策略下的层间差分方差 $\\mathrm{Var}(P_\\ell - P_{\\ell-1})$。通过对比，你将深刻理解耦合是如何成为MLMC方法降低计算复杂度的关键机制 [@problem_id:3068034]。", "problem": "考虑时间区间 $[0,T]$ 上的标量随机微分方程 (SDE) $dX_t = \\sigma\\, dW_t$，其中 $X_0 = 0$，$W_t$ 是标准维纳过程，$\\sigma > 0$ 是一个常数。令 $P_\\ell$ 表示在层级 $\\ell$ 上使用 $N_\\ell$ 个步长为 $h_\\ell = T/N_\\ell$ 的步计算出的 $X_T$ 的 Euler–Maruyama 终端近似，令 $P_{\\ell-1}$ 表示在层级 $\\ell-1$ 上使用 $N_{\\ell-1} = N_\\ell/2$ 个步长为 $h_{\\ell-1} = 2 h_\\ell$ 的步计算出的相应近似。在这两种情况下，Euler–Maruyama 格式定义为 $X_{n+1} = X_n + \\sigma\\, \\Delta W_n$，其中每个布朗增量 $\\Delta W_n$ 服从分布 $\\mathcal{N}(0,h)$，$h$ 等于相应的步长。定义 $P_\\ell = \\sum_{n=1}^{N_\\ell} \\sigma\\, \\Delta W^{(\\ell)}_n$ 及 $P_{\\ell-1} = \\sum_{m=1}^{N_{\\ell-1}} \\sigma\\, \\Delta W^{(\\ell-1)}_m$。在多层级蒙特卡洛 (MLMC) 方法中，使用跨层级的耦合来减小层级差异的方差。\n\n考虑两种耦合策略：\n- 正确耦合：对于每个 $m \\in \\{1,\\dots,N_{\\ell-1}\\}$，设置 $\\Delta W^{(\\ell-1)}_m = \\Delta W^{(\\ell)}_{2m-1} + \\Delta W^{(\\ell)}_{2m}$，其中细层级增量 $\\{\\Delta W^{(\\ell)}_n\\}_{n=1}^{N_\\ell}$ 是独立同分布的，服从 $\\mathcal{N}(0,h_\\ell)$ 分布。\n- 不正确耦合：生成 $\\{\\Delta W^{(\\ell-1)}_m\\}_{m=1}^{N_{\\ell-1}}$ 作为独立同分布的 $\\mathcal{N}(0,h_{\\ell-1})$ 增量，这些增量独立于细层级增量 $\\{\\Delta W^{(\\ell)}_n\\}_{n=1}^{N_\\ell}$。\n\n仅从布朗运动的独立高斯增量性质和独立随机变量的方差可加性出发，推导每种耦合策略下的 $\\mathrm{Var}(P_\\ell - P_{\\ell-1})$。然后，将不正确耦合的方差 $\\mathrm{Var}(P_\\ell - P_{\\ell-1})$ 表示为以 $\\sigma$ 和 $T$ 表示的简化闭式解析表达式。您的最终答案必须是这个表达式。无需四舍五入。", "solution": "该问题要求在两种不同的耦合策略下，针对随机微分方程 (SDE) $dX_t = \\sigma\\, dW_t$（其中 $X_0 = 0$），推导细层级和粗层级 Euler-Maruyama 近似之差的方差 $\\mathrm{Var}(P_\\ell - P_{\\ell-1})$。最终答案是在不正确耦合策略下该方差的具体表达式。\n\n令 $P_\\ell$ 和 $P_{\\ell-1}$ 分别为表示在层级 $\\ell$（细层级）和层级 $\\ell-1$（粗层级）上终端时刻 $T$ 的数值近似的随机变量。两个随机变量之差的方差的一般公式为：\n$$\n\\mathrm{Var}(P_\\ell - P_{\\ell-1}) = \\mathrm{Var}(P_\\ell) + \\mathrm{Var}(P_{\\ell-1}) - 2 \\mathrm{Cov}(P_\\ell, P_{\\ell-1})\n$$\n我们通过首先计算各自的方差 $\\mathrm{Var}(P_\\ell)$ 和 $\\mathrm{Var}(P_{\\ell-1})$，然后评估协方差项，来分析每种耦合策略。\n\n细层级的近似由 $P_\\ell = \\sum_{n=1}^{N_\\ell} \\sigma\\, \\Delta W^{(\\ell)}_n$ 给出，其中 $\\{\\Delta W^{(\\ell)}_n\\}_{n=1}^{N_\\ell}$ 是服从分布 $\\mathcal{N}(0,h_\\ell)$ 的独立同分布 (i.i.d.) 随机变量。$P_\\ell$ 的方差使用独立随机变量的方差可加性性质和缩放性质 $\\mathrm{Var}(aZ) = a^2 \\mathrm{Var}(Z)$ 来计算：\n$$\n\\mathrm{Var}(P_\\ell) = \\mathrm{Var}\\left(\\sigma \\sum_{n=1}^{N_\\ell} \\Delta W^{(\\ell)}_n\\right) = \\sigma^2 \\mathrm{Var}\\left(\\sum_{n=1}^{N_\\ell} \\Delta W^{(\\ell)}_n\\right)\n$$\n由于增量 $\\Delta W^{(\\ell)}_n$ 是独立的，它们的和的方差是它们方差的和：\n$$\n\\mathrm{Var}(P_\\ell) = \\sigma^2 \\sum_{n=1}^{N_\\ell} \\mathrm{Var}(\\Delta W^{(\\ell)}_n) = \\sigma^2 \\sum_{n=1}^{N_\\ell} h_\\ell = \\sigma^2 N_\\ell h_\\ell\n$$\n鉴于步长为 $h_\\ell = T/N_\\ell$，我们有 $N_\\ell h_\\ell = T$。因此，细层级近似的方差是：\n$$\n\\mathrm{Var}(P_\\ell) = \\sigma^2 T\n$$\n类似地，粗层级的近似由 $P_{\\ell-1} = \\sum_{m=1}^{N_{\\ell-1}} \\sigma\\, \\Delta W^{(\\ell-1)}_m$ 给出，其中增量 $\\Delta W^{(\\ell-1)}_m$ 是独立同分布的 $\\mathcal{N}(0,h_{\\ell-1})$。遵循相同的逻辑：\n$$\n\\mathrm{Var}(P_{\\ell-1}) = \\sigma^2 \\sum_{m=1}^{N_{\\ell-1}} \\mathrm{Var}(\\Delta W^{(\\ell-1)}_m) = \\sigma^2 \\sum_{m=1}^{N_{\\ell-1}} h_{\\ell-1} = \\sigma^2 N_{\\ell-1} h_{\\ell-1}\n$$\n鉴于 $h_{\\ell-1} = T/N_{\\ell-1}$，我们有 $N_{\\ell-1} h_{\\ell-1} = T$。因此，粗层级近似的方差是：\n$$\n\\mathrm{Var}(P_{\\ell-1}) = \\sigma^2 T\n$$\n我们现在对每种耦合策略评估 $\\mathrm{Var}(P_\\ell - P_{\\ell-1})$。\n\n**1. 不正确耦合策略**\n\n在此策略下，粗层级增量集合 $\\{\\Delta W^{(\\ell-1)}_m\\}_{m=1}^{N_{\\ell-1}}$ 与细层级增量集合 $\\{\\Delta W^{(\\ell)}_n\\}_{n=1}^{N_\\ell}$ 是独立生成的。由于 $P_\\ell$ 仅是细层级增量的函数，而 $P_{\\ell-1}$ 仅是粗层级增量的函数，因此随机变量 $P_\\ell$ 和 $P_{\\ell-1}$ 是独立的。对于独立随机变量，协方差为零：\n$$\n\\mathrm{Cov}(P_\\ell, P_{\\ell-1}) = 0\n$$\n将此代入通用方差公式，得到：\n$$\n\\mathrm{Var}(P_\\ell - P_{\\ell-1}) = \\mathrm{Var}(P_\\ell) + \\mathrm{Var}(P_{\\ell-1})\n$$\n使用先前推导的 $P_\\ell$ 和 $P_{\\ell-1}$ 的方差：\n$$\n\\mathrm{Var}(P_\\ell - P_{\\ell-1}) = \\sigma^2 T + \\sigma^2 T = 2 \\sigma^2 T\n$$\n这就是不正确耦合下的方差。\n\n**2. 正确耦合策略**\n\n在此策略下，粗层级增量由细层级增量构造：$\\Delta W^{(\\ell-1)}_m = \\Delta W^{(\\ell)}_{2m-1} + \\Delta W^{(\\ell)}_{2m}$。我们直接计算差值 $P_\\ell - P_{\\ell-1}$：\n$$\nP_\\ell - P_{\\ell-1} = \\sum_{n=1}^{N_\\ell} \\sigma\\, \\Delta W^{(\\ell)}_n - \\sum_{m=1}^{N_{\\ell-1}} \\sigma\\, \\Delta W^{(\\ell-1)}_m\n$$\n将耦合定义代入第二项：\n$$\n\\sum_{m=1}^{N_{\\ell-1}} \\sigma\\, \\Delta W^{(\\ell-1)}_m = \\sigma \\sum_{m=1}^{N_{\\ell-1}} \\left( \\Delta W^{(\\ell)}_{2m-1} + \\Delta W^{(\\ell)}_{2m} \\right)\n$$\n这个和涵盖了从 $n=1$到 $n=2N_{\\ell-1}$ 的所有细层级增量。由于 $N_\\ell = 2N_{\\ell-1}$，这个和恰好是所有细层级增量的和：\n$$\n\\sigma \\sum_{m=1}^{N_{\\ell-1}} \\left( \\Delta W^{(\\ell)}_{2m-1} + \\Delta W^{(\\ell)}_{2m} \\right) = \\sigma \\sum_{n=1}^{N_\\ell} \\Delta W^{(\\ell)}_n = P_\\ell\n$$\n因此，对于这个特定的 SDE，当使用正确耦合时，粗层级近似 $P_{\\ell-1}$ 与细层级近似 $P_\\ell$ 是相同的。差值为：\n$$\nP_\\ell - P_{\\ell-1} = P_\\ell - P_\\ell = 0\n$$\n常数的方差为零：\n$$\n\\mathrm{Var}(P_\\ell - P_{\\ell-1}) = \\mathrm{Var}(0) = 0\n$$\n这一结果凸显了通过正确耦合实现的先验方差减小，这是多层级蒙特卡洛方法的基本原理。对于这个简单的 SDE，方差减小是最大的。\n\n问题要求给出不正确耦合方差以 $\\sigma$ 和 $T$ 表示的简化闭式解析表达式。如上所述，这个表达式是 $2 \\sigma^2 T$。", "answer": "$$\n\\boxed{2 \\sigma^{2} T}\n$$", "id": "3068034"}, {"introduction": "理解了耦合能够有效降低方差后，下一个关键问题是如何在不同精度层级上最优地分配计算资源。本练习要求你基于典型的方差 $V_{\\ell}$ 与成本 $C_{\\ell}$ 缩放关系，运用拉格朗日乘数法推导出在给定精度目标下最小化总成本所需的最优样本数 $N_{\\ell}$。这个推导是MLMC理论的基石，它揭示了该方法为何能够在许多应用中达到最优的计算效率 [@problem_id:3067970]。", "problem": "考虑一个形式为 $dX_{t}=a(X_{t})\\,dt+b(X_{t})\\,dW_{t}$ 的标量随机微分方程 (SDE)，其中 $a$ 和 $b$ 足够正则以保证强解的存在性和唯一性，且 $W_{t}$ 是一个标准布朗运动。目标是使用多层蒙特卡洛 (MLMC) 方法来近似计算一个 Lipschitz 收益函数 $\\varphi$ 的期望值 $\\mathbb{E}[\\varphi(X_{T})]$。设层级由 $\\ell\\in\\{0,1,\\dots,L\\}$ 索引，时间步长为 $h_{\\ell}=h_{0}\\,2^{-\\ell}$，其中 $h_{0}>0$ 且 $L\\in\\mathbb{N}$ 的选择是为了控制偏差。假设相邻层级之间采用 Euler–Maruyama 耦合，并且层级差估计量的方差和每个耦合样本的期望成本具有如下缩放关系\n$$V_{\\ell}=k_{v}\\,h_{\\ell}\\quad\\text{和}\\quad C_{\\ell}=k_{c}\\,h_{\\ell}^{-1},$$\n对所有 $\\ell\\in\\{0,1,\\dots,L\\}$ 成立，其中 $k_{v}>0$ 和 $k_{c}>0$ 且与 $\\ell$ 无关。假设均方误差 (MSE) 容差为 $\\varepsilon>0$，且层级 $L$ 已被选定，使得偏差的平方至多为 $\\varepsilon^{2}/2$。你需要选择每层的样本数量 $N_{\\ell}\\in\\mathbb{R}_{>0}$，以最小化总期望成本，其约束条件为方差预算等于 MSE 容差剩下的一半：\n$$\\text{最小化 }\\sum_{\\ell=0}^{L} C_{\\ell}\\,N_{\\ell}\\quad\\text{约束为}\\quad \\sum_{\\ell=0}^{L} \\frac{V_{\\ell}}{N_{\\ell}}=\\frac{\\varepsilon^{2}}{2}。$$\n仅从这些假设和优化问题的基本要素出发，推导出以下各项的精确解析表达式：\n- 最优 $N_{\\ell}$，表示为 $\\varepsilon$、$L$、$h_{\\ell}$、$k_{v}$ 和 $k_{c}$ 的函数，\n- 层级 $\\ell$ 上对期望成本的相应贡献，即 $C_{\\ell}\\,N_{\\ell}$，\n- 层级 $\\ell$ 对估计量方差的相应贡献，即 $V_{\\ell}/N_{\\ell}$。\n\n将你的最终结果表示为三个依赖于 $\\ell$ 的解析表达式，用 $\\varepsilon$、$L$、$h_{\\ell}$、$k_{v}$ 和 $k_{c}$ 来表示。你的最终答案必须是包含三个条目的单行，每个条目是这些表达式之一。不要引入任何未定义的符号。不要在最终表达式中消去 $L$ 或 $h_{\\ell}$。不需要进行数值取整。", "solution": "用户希望我解决一个源于随机微分方程 (SDE) 的多层蒙特卡洛 (MLMC) 方法的约束优化问题。\n\n### 第 1 步：提取已知条件\n- SDE: $dX_{t}=a(X_{t})\\,dt+b(X_{t})\\,dW_{t}$\n- 目标：近似 $\\mathbb{E}[\\varphi(X_{T})]$\n- 层级：$\\ell \\in \\{0, 1, \\dots, L\\}$\n- 时间步长：$h_{\\ell} = h_{0}\\,2^{-\\ell}$，其中 $h_{0} > 0$\n- 方差缩放：$V_{\\ell} = k_{v}\\,h_{\\ell}$，其中 $k_{v} > 0$\n- 成本缩放：$C_{\\ell} = k_{c}\\,h_{\\ell}^{-1}$，其中 $k_{c} > 0$\n- 均方误差 (MSE) 容差：$\\varepsilon > 0$\n- 偏差约束：偏差的平方至多为 $\\varepsilon^{2}/2$，通过选择 $L$ 实现。\n- 优化问题：\n    - 最小化：$\\sum_{\\ell=0}^{L} C_{\\ell}\\,N_{\\ell}$\n    - 约束条件：$\\sum_{\\ell=0}^{L} \\frac{V_{\\ell}}{N_{\\ell}} = \\frac{\\varepsilon^{2}}{2}$\n    - 变量：$N_{\\ell} \\in \\mathbb{R}_{>0}$，其中 $\\ell = 0, \\dots, L$。\n- 要求输出：$N_{\\ell}$、$C_{\\ell}N_{\\ell}$ 和 $V_{\\ell}/N_{\\ell}$ 的解析表达式，作为 $\\varepsilon$、$L$、$h_{\\ell}$、$k_{v}$ 和 $k_{c}$ 的函数。\n\n### 第 2 步：使用提取的已知条件进行验证\n1.  **有科学依据：** 该问题牢固地植根于 SDE 的数值方法理论，特别是 MLMC 方法。所假设的方差（$V_{\\ell} \\propto h_{\\ell}$）和计算成本（$C_{\\ell} \\propto h_{\\ell}^{-1}$）的缩放关系，对于应用于具有全局 Lipschitz 系数的 SDE 的 Euler-Maruyama 离散化格式是标准的。该问题在科学上和数学上都是合理的。\n2.  **适定的：** 该问题是一个经典的约束优化任务：在凸约束下最小化一个线性目标函数。变量 $N_{\\ell}$ 的定义域是正实数集，这使得可以使用微积分（例如，拉格朗日乘子法）直接求解。存在一个唯一、稳定且有意义的解。\n3.  **客观性：** 该问题以精确的数学语言陈述，没有任何主观性或歧义。\n4.  **完整且一致：** 该问题为解决优化问题提供了所有必要的信息：目标函数、约束条件、变量以及所有相关术语的定义。没有矛盾之处。\n5.  **并非不切实际：** 该设置是用于分析 MLMC 方法复杂性的一个标准理论模型。它是一个有效且被广泛使用的简化。\n\n### 第 3 步：结论与行动\n该问题是有效的。我将继续推导解答。\n\n### 推导过程\n问题是在总方差约束 $\\sum_{\\ell=0}^{L} V_{\\ell}/N_{\\ell} = \\varepsilon^{2}/2$ 下，最小化总成本 $J = \\sum_{\\ell=0}^{L} C_{\\ell} N_{\\ell}$。我们可以使用拉格朗日乘子法来解决这个问题。拉格朗日函数 $\\mathcal{L}$ 是：\n$$ \\mathcal{L}(N_0, \\dots, N_L, \\lambda) = \\sum_{\\ell=0}^{L} C_{\\ell} N_{\\ell} + \\lambda \\left( \\sum_{\\ell=0}^{L} \\frac{V_{\\ell}}{N_{\\ell}} - \\frac{\\varepsilon^{2}}{2} \\right) $$\n其中 $\\lambda$ 是拉格朗日乘子。为了找到 $N_{\\ell}$ 的最优值，我们对 $\\mathcal{L}$ 关于每个 $N_{k}$（其中 $k \\in \\{0, \\dots, L\\}$）求偏导，并将其设为零：\n$$ \\frac{\\partial \\mathcal{L}}{\\partial N_{k}} = C_{k} - \\lambda \\frac{V_{k}}{N_{k}^{2}} = 0 $$\n解出 $N_{k}$，我们得到：\n$$ C_{k} N_{k}^{2} = \\lambda V_{k} \\implies N_{k} = \\sqrt{\\lambda} \\sqrt{\\frac{V_{k}}{C_{k}}} $$\n注意，由于 $N_{k}$ 必须为正，我们取正平方根。\n\n现在，我们将 $N_{\\ell}$ 的这个表达式代回方差约束中，以确定 $\\lambda$ 的值。\n首先，我们找出项 $V_{\\ell}/N_{\\ell}$ 的表达式：\n$$ \\frac{V_{\\ell}}{N_{\\ell}} = \\frac{V_{\\ell}}{\\sqrt{\\lambda} \\sqrt{V_{\\ell}/C_{\\ell}}} = \\frac{1}{\\sqrt{\\lambda}} \\sqrt{V_{\\ell} C_{\\ell}} $$\n接下来，我们代入给定的缩放关系 $V_{\\ell} = k_{v} h_{\\ell}$ 和 $C_{\\ell} = k_{c} h_{\\ell}^{-1}$：\n$$ \\sqrt{V_{\\ell} C_{\\ell}} = \\sqrt{(k_{v} h_{\\ell}) (k_{c} h_{\\ell}^{-1})} = \\sqrt{k_{v} k_{c}} $$\n这表明乘积 $\\sqrt{V_{\\ell} C_{\\ell}}$ 是一个常数，与层级 $\\ell$ 无关。\n方差约束变为：\n$$ \\sum_{\\ell=0}^{L} \\frac{\\sqrt{k_{v} k_{c}}}{\\sqrt{\\lambda}} = \\frac{\\varepsilon^{2}}{2} $$\n由于求和项对所有 $\\ell$ 都是常数，因此对 $L+1$ 个层级的求和结果是：\n$$ (L+1) \\frac{\\sqrt{k_{v} k_{c}}}{\\sqrt{\\lambda}} = \\frac{\\varepsilon^{2}}{2} $$\n解出 $\\sqrt{\\lambda}$：\n$$ \\sqrt{\\lambda} = \\frac{2 (L+1) \\sqrt{k_{v} k_{c}}}{\\varepsilon^{2}} $$\n现在我们已经确定了拉格朗日乘子，可以找到所需量的显式表达式。\n\n**1. 最优样本数量 $N_{\\ell}$**\n将 $\\sqrt{\\lambda}$ 的表达式代入 $N_{\\ell}$ 的方程中：\n$$ N_{\\ell} = \\sqrt{\\lambda} \\sqrt{\\frac{V_{\\ell}}{C_{\\ell}}} = \\left( \\frac{2 (L+1) \\sqrt{k_{v} k_{c}}}{\\varepsilon^{2}} \\right) \\sqrt{\\frac{k_{v} h_{\\ell}}{k_{c} h_{\\ell}^{-1}}} $$\n$$ N_{\\ell} = \\left( \\frac{2 (L+1) \\sqrt{k_{v} k_{c}}}{\\varepsilon^{2}} \\right) \\left( \\sqrt{\\frac{k_{v}}{k_{c}}} h_{\\ell} \\right) $$\n$$ N_{\\ell} = \\frac{2 (L+1)}{\\varepsilon^{2}} \\left( \\sqrt{k_{v}k_{c}} \\sqrt{\\frac{k_{v}}{k_{c}}} \\right) h_{\\ell} = \\frac{2 (L+1)}{\\varepsilon^{2}} \\sqrt{k_{v}^{2}} h_{\\ell} $$\n由于 $k_{v} > 0$，我们有 $\\sqrt{k_{v}^2} = k_v$。因此，层级 $\\ell$ 上的最优样本数量为：\n$$ N_{\\ell} = \\frac{2 (L+1) k_{v}}{\\varepsilon^{2}} h_{\\ell} $$\n\n**2. 层级 $\\ell$ 上的成本贡献，$C_{\\ell} N_{\\ell}$**\n使用 $N_{\\ell}$ 的表达式和给定的 $C_{\\ell} = k_{c} h_{\\ell}^{-1}$：\n$$ C_{\\ell} N_{\\ell} = (k_{c} h_{\\ell}^{-1}) \\left( \\frac{2 (L+1) k_{v}}{\\varepsilon^{2}} h_{\\ell} \\right) $$\n项 $h_{\\ell}^{-1}$ 和 $h_{\\ell}$ 相互抵消，得到一个与层级无关的恒定成本：\n$$ C_{\\ell} N_{\\ell} = \\frac{2 (L+1) k_{c} k_{v}}{\\varepsilon^{2}} $$\n\n**3. 层级 $\\ell$ 的方差贡献，$V_{\\ell}/N_{\\ell}$**\n使用 $N_{\\ell}$ 的表达式和给定的 $V_{\\ell} = k_{v} h_{\\ell}$：\n$$ \\frac{V_{\\ell}}{N_{\\ell}} = \\frac{k_{v} h_{\\ell}}{\\frac{2 (L+1) k_{v}}{\\varepsilon^{2}} h_{\\ell}} $$\n项 $k_{v}$ 和 $h_{\\ell}$ 相互抵消，得到一个与层级无关的恒定方差贡献：\n$$ \\frac{V_{\\ell}}{N_{\\ell}} = \\frac{1}{\\frac{2(L+1)}{\\varepsilon^{2}}} = \\frac{\\varepsilon^{2}}{2 (L+1)} $$\n作为一致性检验，总方差为 $\\sum_{\\ell=0}^{L} V_{\\ell}/N_{\\ell} = \\sum_{\\ell=0}^{L} \\frac{\\varepsilon^{2}}{2(L+1)} = (L+1) \\frac{\\varepsilon^{2}}{2(L+1)} = \\frac{\\varepsilon^{2}}{2}$，满足约束条件。\n\n所需的三个表达式是：\n1. $N_{\\ell} = \\frac{2 (L+1) k_{v}}{\\varepsilon^{2}} h_{\\ell}$\n2. $C_{\\ell} N_{\\ell} = \\frac{2 (L+1) k_{c} k_{v}}{\\varepsilon^{2}}$\n3. $\\frac{V_{\\ell}}{N_{\\ell}} = \\frac{\\varepsilon^{2}}{2(L+1)}$", "answer": "$$ \\boxed{ \\begin{pmatrix} \\frac{2 (L+1) k_{v}}{\\varepsilon^{2}} h_{\\ell}  \\frac{2 (L+1) k_{c} k_{v}}{\\varepsilon^{2}}  \\frac{\\varepsilon^{2}}{2(L+1)} \\end{pmatrix} } $$", "id": "3067970"}, {"introduction": "本练习将理论付诸实践，要求你编写一个完整的程序来实现MLMC方法的核心算法。你将通过试点模拟（pilot simulation）来估计各层级估计量的方差 $V_{\\ell}$，并结合成本模型 $C_{\\ell}$，最终应用前述练习中得到的优化公式来计算出最优的样本分配方案 $[N_0, N_1, \\dots, N_L]$。这个综合性练习将帮助你掌握从理论到代码实现的完整MLMC工作流程 [@problem_id:3067973]。", "problem": "考虑由 $dX_t = \\mu X_t \\, dt + \\sigma X_t \\, dW_t$ 定义的几何布朗运动随机微分方程（SDE），其初始条件为 $X_0 = x_0$，时间范围为 $T$。令 $P_\\ell$ 表示在层级 $\\ell$ 上，使用均匀时间步长 $h_\\ell = T / M_\\ell$ 计算得到的收益 $\\phi(X_T)$ 的欧拉-丸山近似，其中 $M_\\ell = M_0 \\cdot 2^\\ell$，$M_0$ 是给定的基础步数。在多层蒙特卡洛（MLMC）估计量中，定义 $Y_0 = P_0$，且对于 $\\ell \\geq 1$，定义 $Y_\\ell = P_\\ell - P_{\\ell-1}$，其计算使用强耦合，其中粗层级的布朗增量是通过对细层级增量块求和形成的，从而通过伸缩结构降低方差。对于给定的 $Y_\\ell$ 引导样本，目标是估计方差 $V_\\ell = \\operatorname{Var}(Y_\\ell)$ 和每样本计算成本 $C_\\ell$，并利用这些估计值来确定每个层级 $\\ell$ 的最优样本数 $N_\\ell$，以在固定的目标抽样方差预算下最小化总计算成本。\n\n您必须从核心定义和经过充分检验的事实出发。SDE $dX_t = \\mu X_t \\, dt + \\sigma X_t \\, dW_t$ 的欧拉-丸山格式由递推关系 $X_{k+1} = X_k + \\mu X_k h + \\sigma X_k \\Delta W_k$ 定义，其中 $\\Delta W_k \\sim \\mathcal{N}(0, h)$ 是独立的高斯增量，$h$ 是时间步长。对于 MLMC 耦合，当从最细层级的增量构建 $P_\\ell$ 和 $P_{\\ell-1}$ 时，粗略增量通过对 $r = 2^{L-\\ell}$ 个精细增量求和形成，使得 $\\Delta W^{(\\ell)}_j = \\sum_{k=1}^{r} \\Delta W^{(L)}_{(j-1)r + k}$ 的方差为 $r \\cdot h_L = h_\\ell$，从而确保兼容性。基于 $m$ 个引导样本 $\\{Y_\\ell^{(i)}\\}_{i=1}^m$ 的 $V_\\ell$ 的无偏样本方差估计量是 $\\widehat{V}_\\ell = \\frac{1}{m-1} \\sum_{i=1}^{m} \\left(Y_\\ell^{(i)} - \\overline{Y}_\\ell\\right)^2$，其中 $\\overline{Y}_\\ell$ 是样本均值。对于计算成本，使用欧拉步数作为代理：设置 $C_0 = M_0$，对于 $\\ell \\geq 1$，设置 $C_\\ell = M_\\ell + M_{\\ell-1}$，因为 $Y_\\ell$ 的一个样本需要同时模拟层级 $\\ell$ 和层级 $\\ell-1$ 的近似。$N_\\ell$ 的分配应通过最小化总成本推导得出，其约束条件是总抽样方差 $\\sum_{\\ell=0}^L V_\\ell / N_\\ell$ 等于一个指定预算，取为 $V_{\\text{target}} = \\varepsilon^2 / 2$，其中 $\\varepsilon$ 是给定的精度容差。如果 $\\sum_{\\ell=0}^L \\sqrt{V_\\ell C_\\ell} = 0$，则将所有 $\\ell$ 的 $N_\\ell$ 设置为 $0$。\n\n您的任务是实现一个完整的程序，该程序能够：\n- 使用从最细层级布朗增量构建的强耦合欧拉-丸山方法，为层级 $\\ell = 0, 1, \\dots, L$ 模拟引导样本 $\\{Y_\\ell^{(i)}\\}$。\n- 使用无偏样本方差公式估计 $V_\\ell$。\n- 设置成本 $C_\\ell$ 作为步数代理：$C_0 = M_0$，且对于 $\\ell \\geq 1$，$C_\\ell = M_\\ell + M_{\\ell-1}$。\n- 推导 $N_\\ell$ 以最小化总成本，其约束条件是总抽样方差 $\\sum_{\\ell=0}^L V_\\ell / N_\\ell$ 等于一个指定预算，取为 $V_{\\text{target}} = \\varepsilon^2 / 2$，其中 $\\varepsilon$ 是给定的精度容差。如果 $\\sum_{\\ell=0}^L \\sqrt{V_\\ell C_\\ell} = 0$，则将所有 $\\ell$ 的 $N_\\ell$ 设置为 $0$。\n- 生成最终输出为单行，包含一个列表的列表，每个内部列表包含一个测试用例的整数 $[N_0, N_1, \\dots, N_L]$。\n\n使用收益函数 $\\phi(x) = x$ 以将重点放在 MLMC 分配上。通过最细时间步长的增量求和来耦合各层级，确保科学真实性。\n\n测试套件和要求的输出格式：\n- 实现以下测试用例。为保证可复现性，请使用指定的随机种子。对于每个用例，计算引导估计值并返回向量 $[N_0, N_1, \\dots, N_L]$。\n    - 用例 1：$\\mu = 0.05$, $\\sigma = 0.2$, $T = 1$, $x_0 = 1$, $L = 3$, $M_0 = 8$, 引导样本数 $m = 200$, $\\varepsilon = 0.05$, 种子 $= 42$。\n    - 用例 2：$\\mu = 0.05$, $\\sigma = 0.2$, $T = 1$, $x_0 = 1$, $L = 4$, $M_0 = 8$, 引导样本数 $m = 300$, $\\varepsilon = 0.01$, 种子 $= 123$。\n    - 用例 3：$\\mu = 0.05$, $\\sigma = 0.05$, $T = 1$, $x_0 = 1$, $L = 3$, $M_0 = 8$, 引导样本数 $m = 200$, $\\varepsilon = 0.05$, 种子 $= 7$。\n    - 用例 4（只有一个层级的边界情况）：$\\mu = 0.1$, $\\sigma = 0.3$, $T = 1$, $x_0 = 1$, $L = 0$, $M_0 = 16$, 引导样本数 $m = 200$, $\\varepsilon = 0.1$, 种子 $= 99$。\n- 您的程序应生成单行输出，其中包含用方括号括起来的逗号分隔列表形式的结果。外部列表对应于上述顺序的测试用例，每个内部列表包含该用例的整数样本分配 $[N_0, N_1, \\dots, N_L]$。例如，输出必须具有以下形式：$[[N_0^{(1)},N_1^{(1)},\\dots],[N_0^{(2)},N_1^{(2)},\\dots],\\dots]$。\n\n不涉及物理单位，所有角度（如果出现）均以弧度解释。最终输出必须是仅包含整数值的上述指定单行。", "solution": "用户提供了一个问题，要求为几何布朗运动 (GBM) 随机微分方程 (SDE) 实现多层蒙特卡洛 (MLMC) 参数化算法。任务是确定 MLMC 层次结构中每个层级 $\\ell$ 的最优样本数 $N_\\ell$，以在给定目标方差下最小化总计算成本。\n\n### **问题验证**\n\n首先，对问题陈述进行严谨的验证。\n\n**步骤 1：提取给定条件**\n- **SDE 模型**：几何布朗运动，$dX_t = \\mu X_t \\, dt + \\sigma X_t \\, dW_t$，在时间区间 $[0, T]$ 上的初始条件为 $X_0 = x_0$。\n- **收益函数**：$\\phi(x) = x$。\n- **数值方案**：欧拉-丸山法，$X_{k+1} = X_k(1 + \\mu h + \\sigma \\Delta W_k)$，其中 $\\Delta W_k \\sim \\mathcal{N}(0, h)$。\n- **MLMC 层次结构**：\n    - 离散化层级 $\\ell = 0, 1, \\dots, L$。\n    - 时间步数 $M_\\ell = M_0 \\cdot 2^\\ell$。\n    - 时间步长 $h_\\ell = T / M_\\ell$。\n- **MLMC 估计量变量**：\n    - $P_\\ell$：层级 $\\ell$ 上的 $\\phi(X_T)$ 的近似值。\n    - $Y_0 = P_0$。\n    - $Y_\\ell = P_\\ell - P_{\\ell-1}$，对于 $\\ell \\geq 1$。\n- **强耦合**：粗层级的布朗增量通过对一个包含 $r = 2^{L-\\ell}$ 个最细层级增量的块求和来构建。\n- **引导模拟**：\n    - 使用 $m$ 个引导样本来估计方差。\n    - 方差估计量：使用无偏样本方差公式 $\\frac{1}{m-1} \\sum_{i=1}^{m} (Y_\\ell^{(i)} - \\overline{Y}_\\ell)^2$ 来估计 $\\widehat{V}_\\ell = \\operatorname{Var}(Y_\\ell)$。\n- **成本模型**：\n    - $C_0 = M_0$。\n    - $C_\\ell = M_\\ell + M_{\\ell-1}$，对于 $\\ell \\geq 1$。\n- **优化目标**：最小化总成本 $\\sum_{\\ell=0}^L N_\\ell C_\\ell$，约束条件为总抽样方差 $\\sum_{\\ell=0}^L V_\\ell / N_\\ell = \\varepsilon^2 / 2$。\n- **特殊条件**：如果 $\\sum_{\\ell=0}^L \\sqrt{V_\\ell C_\\ell} = 0$，则将所有 $N_\\ell$ 设置为 $0$。\n- **测试用例**：提供了四组具体的参数集 ($\\mu, \\sigma, T, x_0, L, M_0, m, \\varepsilon, \\text{seed}$)。\n- **输出格式**：一个包含整数列表的列表的单行，例如 `[[N_0, ...], [N_0, ...]]`。\n\n**步骤 2：使用提取的给定条件进行验证**\n- **科学基础**：该问题基于随机微积分、SDE 数值分析和蒙特卡洛方法的基石性原理。GBM 模型、欧拉-丸山方案和 MLMC 框架都是标准的且被严格定义。\n- **适定性**：该问题是适定的。目标是实现一个明确指定的算法。寻找 $N_\\ell$ 的优化问题是一个标准的约束问题，具有唯一的解析解（在整数舍入之前）。提供了所有必要的参数，包括随机种子，确保可以获得唯一且可复现的输出。\n- **客观性**：问题以精确、客观和数学化的术语陈述。没有歧义或主观语言。\n- **完整性和一致性**：问题陈述是自洽的。所有变量、常数和函数关系都已明确定义。所提供的信息中没有矛盾之处。\n- **可行性**：测试用例的参数是现实的，所需的计算在标准计算环境中是可行的。\n\n**步骤 3：结论和行动**\n该问题是**有效的**。它是一个定义明确、科学合理且可验证的计算任务。现在可以开始开发解决方案。\n\n### **方法论与实现**\n\n解决方案首先推导最优样本数 $N_\\ell$ 的公式，然后基于此推导实现一个算法。\n\n**1. 最优样本分配 $N_\\ell$ 的推导**\n\n目标是最小化总计算成本 $C_{total} = \\sum_{\\ell=0}^L N_\\ell C_\\ell$，其约束条件是总抽样方差 $\\operatorname{Var}[\\hat{Y}] = \\sum_{\\ell=0}^L \\frac{V_\\ell}{N_\\ell} = K$，其中 $K = \\varepsilon^2 / 2$。这是一个经典的优化问题，可以使用拉格朗日乘子法求解。\n\n拉格朗日函数 $\\mathcal{L}$ 为：\n$$ \\mathcal{L}(N_0, \\dots, N_L, \\lambda) = \\sum_{\\ell=0}^L N_\\ell C_\\ell + \\lambda \\left( \\sum_{\\ell=0}^L \\frac{V_\\ell}{N_\\ell} - K \\right) $$\n\n对每个 $N_k$ 求偏导并令其为零，得到：\n$$ \\frac{\\partial \\mathcal{L}}{\\partial N_k} = C_k - \\lambda \\frac{V_k}{N_k^2} = 0 \\implies N_k^2 = \\lambda \\frac{V_k}{C_k} \\implies N_k = \\sqrt{\\lambda} \\sqrt{\\frac{V_k}{C_k}} $$\n在这里，我们使用估计的方差 $\\widehat{V}_\\ell$ 来代替真实的方差 $V_\\ell$。\n\n为了找到拉格朗日乘子 $\\lambda$，我们将 $N_k$ 的表达式代入方差约束中：\n$$ \\sum_{\\ell=0}^L \\frac{\\widehat{V}_\\ell}{\\sqrt{\\lambda} \\sqrt{\\widehat{V}_\\ell/C_\\ell}} = K \\implies \\frac{1}{\\sqrt{\\lambda}} \\sum_{\\ell=0}^L \\sqrt{\\widehat{V}_\\ell C_\\ell} = K $$\n$$ \\sqrt{\\lambda} = \\frac{1}{K} \\sum_{\\ell=0}^L \\sqrt{\\widehat{V}_\\ell C_\\ell} $$\n\n将 $\\sqrt{\\lambda}$ 代回 $N_k$ 的方程中：\n$$ N_k = \\left( \\frac{1}{K} \\sum_{\\ell=0}^L \\sqrt{\\widehat{V}_\\ell C_\\ell} \\right) \\sqrt{\\frac{\\widehat{V}_\\ell}{C_k}} $$\n\n给定 $K = \\varepsilon^2 / 2$，则 $N_k$ 的最终公式为：\n$$ N_k = \\frac{2}{\\varepsilon^2} \\left( \\sum_{\\ell=0}^L \\sqrt{\\widehat{V}_\\ell C_\\ell} \\right) \\sqrt{\\frac{\\widehat{V}_\\ell}{C_k}} $$\n\n由于样本数必须是整数，并且为了确保满足方差约束，我们对结果取上整：$N_k = \\lceil \\dots \\rceil$。\n\n**2. 算法实现**\n\n构建一个 Python 程序来为每个测试用例执行以下步骤：\n\n- **初始化**：使用指定的种子设置随机数生成器以保证可复现性。\n- **引导样本生成**：\n    - 对于 $m$ 个引导样本中的每一个，在最细的分辨率（$L$）上生成布朗运动路径的一个实现。该路径由 $M_L = M_0 \\cdot 2^L$ 个增量组成。\n    - 对于每个层级 $\\ell \\in \\{0, \\dots, L\\}$，使用欧拉-丸山方案模拟 SDE 路径 $X^{(\\ell)}$。层级 $\\ell$ 所需的布朗增量是通过对细分辨率路径中连续的 $2^{L-\\ell}$ 个增量块求和得到的。这确保了所有层级都是强耦合的。\n    - 计算所有层级的最终值 $P_\\ell = X_T^{(\\ell)}$。\n    - 根据收益计算差值：$Y_0 = P_0$ 和 $Y_\\ell = P_\\ell - P_{\\ell-1}$（对于 $\\ell  0$）。存储这 $m$ 个向量 $(Y_0^{(i)}, \\dots, Y_L^{(i)})$。\n- **方差和成本估计**：\n    - 使用无偏样本方差公式对 $m$ 个 $Y_\\ell$ 的引导样本计算估计的方差 $\\widehat{V}_\\ell$。\n    - 使用给定的公式计算计算成本 $C_\\ell$：$C_0=M_0$ 和 $C_\\ell=M_\\ell+M_{\\ell-1}$。\n- **最优分配计算**：\n    - 使用计算出的 $\\widehat{V}_\\ell$ 和 $C_\\ell$ 应用推导出的 $N_\\ell$ 公式。\n    - 最终的 $N_\\ell$ 值向上取整为最接近的整数。\n    - 对每个测试用例重复此过程，并汇总结果。\n- **输出格式化**：将所有测试用例的最终整数分配列表格式化为问题陈述中指定的单个字符串。\n\n这个分步过程确保了问题的所有要求都得到满足，提供了一个正确且可复现的解决方案。", "answer": "```python\nimport numpy as np\n\ndef compute_mlmc_allocations(mu, sigma, T, x0, L, M0, m, epsilon, seed):\n    \"\"\"\n    Computes optimal multilevel Monte Carlo sample allocations N_l.\n\n    This function performs a pilot simulation to estimate the variance and cost\n    at each level of the MLMC hierarchy for a geometric Brownian motion SDE.\n    It then calculates the optimal number of samples N_l per level to minimize\n    total cost for a given target accuracy.\n\n    Args:\n        mu (float): The drift coefficient of the GBM.\n        sigma (float): The volatility coefficient of the GBM.\n        T (float): The time horizon.\n        x0 (float): The initial value of the SDE.\n        L (int): The maximum level for the MLMC hierarchy.\n        M0 (int): The base number of time steps for level 0.\n        m (int): The number of pilot samples for variance estimation.\n        epsilon (float): The target root-mean-square error.\n        seed (int): The seed for the random number generator.\n\n    Returns:\n        list[int]: A list of integers [N_0, N_1, ..., N_L] representing the\n                   optimal number of samples for each level.\n    \"\"\"\n    rng = np.random.default_rng(seed)\n\n    M_L = M0 * (2**L)\n    h_L = T / M_L\n\n    Y_samples = np.zeros((m, L + 1))\n\n    # Generate m pilot samples\n    for i in range(m):\n        # Generate the single path of finest-level Brownian increments\n        dW_L = rng.normal(0.0, np.sqrt(h_L), size=M_L)\n\n        P_vals = np.zeros(L + 1)\n\n        # Simulate paths and compute payoffs for all levels from the same Brownian path\n        for l in range(L + 1):\n            M_l = M0 * (2**l)\n            h_l = T / M_l\n            step_ratio = 2**(L - l)\n            X_l = float(x0)\n\n            for j in range(M_l):\n                start_idx = j * step_ratio\n                end_idx = (j + 1) * step_ratio\n                sum_dW = np.sum(dW_L[start_idx:end_idx])\n                X_l *= (1.0 + mu * h_l + sigma * sum_dW)\n            \n            P_vals[l] = X_l\n\n        # Compute the Y_l values (P_0, P_1-P_0, ..., P_L-P_{L-1})\n        Y_samples[i, 0] = P_vals[0]\n        for l in range(1, L + 1):\n            Y_samples[i, l] = P_vals[l] - P_vals[l-1]\n\n    # Estimate variances V_l using unbiased sample variance (ddof=1)\n    V_hat = np.var(Y_samples, axis=0, ddof=1)\n    # Ensure variances are non-negative due to potential floating point errors\n    V_hat[np.isnan(V_hat)] = 0.0\n    V_hat = np.maximum(V_hat, 0.0)\n\n    # Calculate costs C_l\n    C = np.zeros(L + 1)\n    M = M0 * (2**np.arange(L + 1))\n    C[0] = M[0]\n    for l in range(1, L + 1):\n        C[l] = M[l] + M[l-1]\n\n    # Calculate optimal number of samples N_l\n    N = np.zeros(L + 1, dtype=int)\n    \n    sqrt_V = np.sqrt(V_hat)\n    sqrt_C = np.sqrt(C)\n    \n    sum_sqrt_VC = np.sum(sqrt_V * sqrt_C)\n    \n    if sum_sqrt_VC > 0:\n        # Variance budget K = epsilon^2 / 2\n        # N_l = (1/K) * sum(sqrt(V_k*C_k)) * sqrt(V_l/C_l)\n        multiplier = (2.0 / epsilon**2) * sum_sqrt_VC\n        with np.errstate(divide='ignore', invalid='ignore'):\n             N_float = multiplier * sqrt_V / sqrt_C\n        \n        N_float[np.isnan(N_float)] = 0.0\n        \n        # Round up to meet the variance constraint\n        N = np.ceil(N_float).astype(int)\n\n    return N.tolist()\n\n\ndef solve():\n    \"\"\"\n    Main function to run the test suite and print the results in the required format.\n    \"\"\"\n    test_cases = [\n        {'mu': 0.05, 'sigma': 0.2, 'T': 1, 'x0': 1, 'L': 3, 'M0': 8, 'm': 200, 'epsilon': 0.05, 'seed': 42},\n        {'mu': 0.05, 'sigma': 0.2, 'T': 1, 'x0': 1, 'L': 4, 'M0': 8, 'm': 300, 'epsilon': 0.01, 'seed': 123},\n        {'mu': 0.05, 'sigma': 0.05, 'T': 1, 'x0': 1, 'L': 3, 'M0': 8, 'm': 200, 'epsilon': 0.05, 'seed': 7},\n        {'mu': 0.1, 'sigma': 0.3, 'T': 1, 'x0': 1, 'L': 0, 'M0': 16, 'm': 200, 'epsilon': 0.1, 'seed': 99}\n    ]\n\n    all_results = []\n    for params in test_cases:\n        result = compute_mlmc_allocations(\n            params['mu'], params['sigma'], params['T'], params['x0'],\n            params['L'], params['M0'], params['m'], params['epsilon'], params['seed']\n        )\n        all_results.append(result)\n\n    # Format the output string as [[N0,N1,...],[N0,N1,...],...]\n    # without any spaces within the inner lists.\n    result_strings = []\n    for res_list in all_results:\n        inner_str = \",\".join(map(str, res_list))\n        result_strings.append(f\"[{inner_str}]\")\n    \n    final_output = f\"[{','.join(result_strings)}]\"\n    print(final_output)\n\nsolve()\n```", "id": "3067973"}]}