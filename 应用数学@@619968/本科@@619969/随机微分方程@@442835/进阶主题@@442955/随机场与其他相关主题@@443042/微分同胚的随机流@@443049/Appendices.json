{"hands_on_practices": [{"introduction": "这项练习为理解随机流提供了一个具体的起点。通过求解一个简单的线性随机微分方程，你将显式地构建出流映射并计算其雅可比矩阵。[@problem_id:2997492] 这项实践至关重要，因为它将随机微分方程的解与体积保持这一几何概念直接联系起来，展示了生成向量场的性质如何决定流的宏观行为。", "problem": "考虑$\\mathbb{R}^{2}$中的平面 Stratonovich 随机微分方程，\n$$\n\\mathrm{d}X_{t} \\;=\\; b(X_{t})\\,\\mathrm{d}t \\;+\\; \\sigma_{1}(X_{t}) \\circ \\mathrm{d}W_{t}^{1} \\;+\\; \\sigma_{2}(X_{t}) \\circ \\mathrm{d}W_{t}^{2},\n$$\n其中 $b(x)=-\\lambda x$（$\\lambda \\in \\mathbb{R}$），$\\sigma_{1}(x)=\\sqrt{2\\nu}\\,e_{1}$，$\\sigma_{2}(x)=\\sqrt{2\\nu}\\,e_{2}$（$\\nu>0$），且 $e_{1},e_{2}$ 是 $\\mathbb{R}^{2}$ 中的标准基向量。此处 $\\{W_{t}^{1}\\}_{t\\ge 0}$ 和 $\\{W_{t}^{2}\\}_{t\\ge 0}$ 是相互独立的标准布朗运动，且随机积分是 Stratonovich 意义下的。令 $\\varphi_{0,t}(x)$ 表示此方程在时间 $0$ 从 $x$ 出发，在时间 $t$ 生成的微分同胚随机流。\n\n从线性随机微分方程和微分同胚随机流的定义及基本性质出发，完成以下任务：\n\n- 推导流映射 $\\varphi_{0,t}(x)$ 的显式表达式。\n- 计算雅可比矩阵 $\\mathrm{D}_{x}\\varphi_{0,t}(x)$ 及其行列式，并证明它几乎必然与 $x$ 无关。\n- 使用你的表达式验证当 $\\lambda=0$ 时，该流几乎必然保持勒贝格测度（等价于保持体积）。\n\n将 $\\det\\big(\\mathrm{D}_{x}\\varphi_{0,t}(x)\\big)$ 作为 $\\lambda$ 和 $t$ 的函数，以单个闭式解析表达式的形式给出最终答案。无需四舍五入。在最终答案中仅输出此表达式。", "solution": "该问题要求分析一个平面 Stratonovich 随机微分方程（SDE）生成的随机流。我们将首先推导该流的显式形式，然后计算其雅可比矩阵和行列式，最后对一个特定的参数值验证一个特殊性质。\n\n给定的 SDE 为：\n$$\n\\mathrm{d}X_{t} \\;=\\; b(X_{t})\\,\\mathrm{d}t \\;+\\; \\sigma_{1}(X_{t}) \\circ \\mathrm{d}W_{t}^{1} \\;+\\; \\sigma_{2}(X_{t}) \\circ \\mathrm{d}W_{t}^{2}\n$$\n其中 $X_t \\in \\mathbb{R}^2$，$\\{W_t^1\\}_{t \\ge 0}$ 和 $\\{W_t^2\\}_{t \\ge 0}$ 是独立的标准布朗运动。系数由 $b(x)=-\\lambda x$（$\\lambda \\in \\mathbb{R}$），$\\sigma_{1}(x)=\\sqrt{2\\nu}\\,e_{1}$ 和 $\\sigma_{2}(x)=\\sqrt{2\\nu}\\,e_{2}$（$\\nu > 0$）给出，其中 $e_1 = (1, 0)^T$ 和 $e_2 = (0, 1)^T$ 是标准基向量。\n\n我们可以将该 SDE 写成向量形式：\n$$\n\\mathrm{d}X_{t} = -\\lambda X_{t} \\mathrm{d}t + \\sqrt{2\\nu} e_{1} \\circ \\mathrm{d}W_{t}^{1} + \\sqrt{2\\nu} e_{2} \\circ \\mathrm{d}W_{t}^{2}\n$$\n这是一个线性 SDE。随机积分是 Stratonovich 意义下的。为了求解它，我们可以将其转换为 Itô SDE。SDE $\\mathrm{d}X_t^i = b^i(X_t) \\mathrm{d}t + \\sum_{j=1}^m \\sigma_j^i(X_t) \\circ \\mathrm{d}W_t^j$ 的转换公式为：\n$$\n\\mathrm{d}X_t^i = \\left( b^i(X_t) + \\frac{1}{2} \\sum_{j=1}^m \\sum_{k=1}^d \\frac{\\partial \\sigma_j^i}{\\partial x_k}(X_t) \\sigma_j^k(X_t) \\right) \\mathrm{d}t + \\sum_{j=1}^m \\sigma_j^i(X_t) \\mathrm{d}W_t^j\n$$\n在我们的例子中，扩散向量场为 $\\sigma_1(x) = (\\sqrt{2\\nu}, 0)^T$ 和 $\\sigma_2(x) = (0, \\sqrt{2\\nu})^T$。这些是常数向量，因此它们的偏导数为零：\n$$\n\\frac{\\partial \\sigma_j^i}{\\partial x_k}(x) = 0 \\quad \\forall i,j,k \\in \\{1, 2\\}\n$$\n这意味着 Itô 修正项为零，并且 Stratonovich SDE 与其对应的 Itô SDE 相同：\n$$\n\\mathrm{d}X_{t} = -\\lambda X_{t} \\mathrm{d}t + \\sqrt{2\\nu} e_{1} \\mathrm{d}W_{t}^{1} + \\sqrt{2\\nu} e_{2} \\mathrm{d}W_{t}^{2}\n$$\n令 $W_t = (W_t^1, W_t^2)^T$ 为向量布朗运动，$I$ 为 $2 \\times 2$ 单位矩阵。SDE 简化为：\n$$\n\\mathrm{d}X_{t} = -\\lambda X_{t} \\mathrm{d}t + \\sqrt{2\\nu} I \\mathrm{d}W_{t}\n$$\n这是一个标准的向量 Ornstein-Uhlenbeck 过程。我们使用积分因子 $e^{\\lambda t}$ 来求解它。令 $Y_t = e^{\\lambda t} X_t$。使用 Itô 乘积法则：\n$$\n\\mathrm{d}Y_t = \\mathrm{d}(e^{\\lambda t} X_t) = (\\lambda e^{\\lambda t} X_t) \\mathrm{d}t + e^{\\lambda t} \\mathrm{d}X_t\n$$\n代入 $\\mathrm{d}X_t$ 的表达式：\n$$\n\\mathrm{d}Y_t = \\lambda e^{\\lambda t} X_t \\mathrm{d}t + e^{\\lambda t} (-\\lambda X_t \\mathrm{d}t + \\sqrt{2\\nu} \\mathrm{d}W_t) = e^{\\lambda t} \\sqrt{2\\nu} \\mathrm{d}W_t\n$$\n从 $s=0$ 积分到 $s=t$，我们得到：\n$$\nY_t - Y_0 = \\int_0^t e^{\\lambda s} \\sqrt{2\\nu} \\mathrm{d}W_s\n$$\n代回 $Y_t = e^{\\lambda t} X_t$ 和 $Y_0 = X_0$：\n$$\ne^{\\lambda t} X_t - X_0 = \\sqrt{2\\nu} \\int_0^t e^{\\lambda s} \\mathrm{d}W_s\n$$\n求解 $X_t$：\n$$\nX_t = e^{-\\lambda t} X_0 + \\sqrt{2\\nu} e^{-\\lambda t} \\int_0^t e^{\\lambda s} \\mathrm{d}W_s\n$$\n随机流 $\\varphi_{0,t}(x)$ 定义为从 $X_0 = x$ 出发在时间 $t$ 的解。因此，我们已经推导出了流映射的显式表达式：\n$$\n\\varphi_{0,t}(x) = e^{-\\lambda t} x + \\sqrt{2\\nu} e^{-\\lambda t} \\int_0^t e^{\\lambda s} \\mathrm{d}W_s\n$$\n这完成了任务的第一部分。\n\n接下来，我们计算雅可比矩阵 $\\mathrm{D}_{x}\\varphi_{0,t}(x)$。流映射是 $x$ 的仿射函数。我们写出 $\\varphi_{0,t}(x) = (\\varphi_{0,t}^{(1)}, \\varphi_{0,t}^{(2)})^T$ 和 $x=(x_1, x_2)^T$ 的分量：\n$$\n\\varphi_{0,t}^{(1)}(x_1, x_2) = e^{-\\lambda t} x_1 + \\sqrt{2\\nu} e^{-\\lambda t} \\int_0^t e^{\\lambda s} \\mathrm{d}W_s^1\n$$\n$$\n\\varphi_{0,t}^{(2)}(x_1, x_2) = e^{-\\lambda t} x_2 + \\sqrt{2\\nu} e^{-\\lambda t} \\int_0^t e^{\\lambda s} \\mathrm{d}W_s^2\n$$\n雅可比矩阵由偏导数矩阵 $\\mathrm{D}_{x}\\varphi_{0,t}(x) = \\left[\\frac{\\partial \\varphi_{0,t}^{(i)}}{\\partial x_j}\\right]$ 给出。随机积分项与 $x$ 无关，因此它们在对 $x$ 的任何分量求导时消失。\n$$\n\\frac{\\partial \\varphi_{0,t}^{(1)}}{\\partial x_1} = e^{-\\lambda t}, \\quad \\frac{\\partial \\varphi_{0,t}^{(1)}}{\\partial x_2} = 0\n$$\n$$\n\\frac{\\partial \\varphi_{0,t}^{(2)}}{\\partial x_1} = 0, \\quad \\frac{\\partial \\varphi_{0,t}^{(2)}}{\\partial x_2} = e^{-\\lambda t}\n$$\n所以，雅可比矩阵是：\n$$\n\\mathrm{D}_{x}\\varphi_{0,t}(x) = \\begin{pmatrix} e^{-\\lambda t} & 0 \\\\ 0 & e^{-\\lambda t} \\end{pmatrix} = e^{-\\lambda t} I\n$$\n其中 $I$ 是 $2 \\times 2$ 单位矩阵。\n\n雅可比矩阵的行列式是：\n$$\n\\det(\\mathrm{D}_{x}\\varphi_{0,t}(x)) = \\det(e^{-\\lambda t} I) = (e^{-\\lambda t})^{2} = e^{-2\\lambda t}\n$$\n这个表达式是 $\\lambda$ 和 $t$ 的确定性函数。它不依赖于起始点 $x$ 或布朗运动的实现。因此，该行列式几乎必然与 $x$ 无关。\n\n最后，我们验证当 $\\lambda=0$ 时，该流保持勒贝格测度。如果一个流的雅可比行列式恒等于 $1$，则该流是保体积的。在我们推导的行列式表达式中令 $\\lambda=0$：\n$$\n\\det(\\mathrm{D}_{x}\\varphi_{0,t}(x)) \\Big|_{\\lambda=0} = e^{-2(0)t} = e^0 = 1\n$$\n由于当 $\\lambda=0$ 时，对所有 $t \\ge 0$，雅可比行列式都为 $1$，所以流 $\\varphi_{0,t}(x)$ 保持体积，或者等价地说，保持勒贝格测度。这与随机流的 Liouville 定理一致，因为当 $\\lambda=0$ 时，生成向量场 $b(x)=0$、$\\sigma_1(x)$ 和 $\\sigma_2(x)$ 都是无散度的。漂移项的散度是 $\\nabla \\cdot b = \\frac{\\partial}{\\partial x_1}(-\\lambda x_1) + \\frac{\\partial}{\\partial x_2}(-\\lambda x_2) = -2\\lambda$。通用公式 $\\det(\\mathrm{D}_x \\varphi_{0,t}(x)) = \\exp(\\int_0^t (\\nabla \\cdot b)(\\varphi_{0,s}(x)) \\mathrm{d}s)$（对于无散度的扩散场）得出 $\\exp(\\int_0^t -2\\lambda \\mathrm{d}s) = \\exp(-2\\lambda t)$，这证实了我们的结果。\n\n要求的最终答案是 $\\det(\\mathrm{D}_{x}\\varphi_{0,t}(x))$ 的闭式解析表达式。", "answer": "$$\\boxed{\\exp(-2\\lambda t)}$$", "id": "2997492"}, {"introduction": "在了解了如何计算雅可比矩阵之后，我们现在来探讨一个更深层次的问题：随机流在坐标变换下如何表现？[@problem_id:2997449] 这项实践揭示了Itô积分和Stratonovich积分之间的一个关键区别，并阐明了为何后者在几何情境中通常更为自然。通过使用两种方法显式地变换一个随机微分方程，你将亲身体验到Itô积分的非协变性，并领会到Stratonovich链式法则的优越性。", "problem": "考虑由一维布朗运动（BM）驱动的二维伊藤随机微分方程（SDE）\n$$\n\\mathrm{d}X_{t}^{1} \\,=\\, X_{t}^{2}\\,\\mathrm{d}t + \\sin\\!\\big(X_{t}^{1}\\big)\\,\\mathrm{d}W_{t}, \n\\qquad\n\\mathrm{d}X_{t}^{2} \\,=\\, -\\,X_{t}^{1}\\,\\mathrm{d}t + \\cos\\!\\big(X_{t}^{1}\\big)\\,\\mathrm{d}W_{t},\n$$\n其初始条件为 $X_{0}=x\\in\\mathbb{R}^{2}$，其中 $W$ 是标准一维布朗运动。所有系数均为 $C^{\\infty}$ 且全局利普希茨。令 $\\phi:\\mathbb{R}^{2}\\to\\mathbb{R}^{2}$ 为非线性微分同胚\n$$\n\\phi(x_{1},x_{2}) \\,=\\, \\big(x_{1},\\, x_{2} + x_{1}^{2}\\big),\n$$\n并定义变量变换 $Z_{t}=\\phi(X_{t})$，其分量为 $Z_{t}^{1}=X_{t}^{1}$ 和 $Z_{t}^{2}=X_{t}^{2}+(X_{t}^{1})^{2}$。记原始的漂移项和扩散项分别为 $b(x)=\\big(x_{2},-x_{1}\\big)$ 和 $\\sigma(x)=\\big(\\sin(x_{1}),\\cos(x_{1})\\big)$。\n\n任务：\n- 仅使用基本的伊藤微积分，显式计算 $Z_{t}$ 所满足的 SDE 的变换后的伊藤漂移和扩散系数。\n- 将原始的伊藤 SDE 转换为其斯特拉托诺维奇形式，并仅使用斯特拉托诺维奇链式法则和由 $\\phi$ 引起的前推，显式计算 $Z_{t}$ 所满足的 SDE 的变换后的斯特拉托诺维奇漂移和扩散系数。\n- 从第一性原理出发，解释为何斯特拉托诺维奇公式在 $\\phi$ 变换下是坐标协变的，并与伊藤公式进行比较，通过以 $Z$ 变量表示的标准伊藤-斯特拉托诺维奇修正项，关联 $Z$ 坐标系下的两个变换后的漂移项。\n\n令 $g(z)$ 表示在 $Z$ 坐标系下乘以布朗增量的变换后的扩散向量场。定义伊藤和斯特拉托诺维奇变换后的漂移项之差为\n$$\n\\Delta(z)\\,=\\, b_{\\mathrm{It\\hat{o}}}^{Z}(z)\\,-\\, b_{\\mathrm{Strat}}^{Z}(z).\n$$\n显式计算 $\\Delta(z)$，结果应为关于 $z=(z_{1},z_{2})\\in\\mathbb{R}^{2}$ 的封闭形式表达式。你的最终答案必须是 $\\Delta(z)$ 的解析表达式，写成一个单行向量。无需四舍五入。", "solution": "该问题陈述是随机微积分中一个标准的、适定的练习，因此被认为是有效的。它给出了一个二维伊藤随机微分方程（SDE），并要求使用伊藤和斯特拉托诺维奇微积分，在非线性微分同胚下对其进行变换，并比较结果。\n\n在 $X$ 坐标系下的原始 SDE 由下式给出\n$$ \\mathrm{d}X_t = b(X_t)\\,\\mathrm{d}t + \\sigma(X_t)\\,\\mathrm{d}W_t $$\n其漂移项为 $b(x_1, x_2) = (x_2, -x_1)$，扩散项为 $\\sigma(x_1, x_2) = (\\sin(x_1), \\cos(x_1))$。变量变换为 $Z_t = \\phi(X_t)$，其中 $\\phi(x_1, x_2) = (x_1, x_2 + x_1^2)$。其分量为 $Z_t^1 = X_t^1$ 和 $Z_t^2 = X_t^2 + (X_t^1)^2$。逆变换为 $X_t^1=Z_t^1$ 和 $X_t^2 = Z_t^2 - (Z_t^1)^2$。\n\n**1. 通过伊藤微积分变换SDE**\n\n我们应用伊藤公式来求 $Z_t = \\phi(X_t)$ 所满足的 SDE。\n\n对于第一个分量 $Z_t^1 = X_t^1$，SDE 最初保持不变：\n$$ \\mathrm{d}Z_t^1 = \\mathrm{d}X_t^1 = X_t^2\\,\\mathrm{d}t + \\sin(X_t^1)\\,\\mathrm{d}W_t $$\n用 $Z_t$ 表示系数：\n$$ \\mathrm{d}Z_t^1 = (Z_t^2 - (Z_t^1)^2)\\,\\mathrm{d}t + \\sin(Z_t^1)\\,\\mathrm{d}W_t $$\n\n对于第二个分量 $Z_t^2 = f(X_t^1, X_t^2)$，其中 $f(x_1, x_2) = x_2 + x_1^2$。我们使用针对单个布朗运动的二维伊藤公式：\n$$ \\mathrm{d}f(X_t) = \\sum_{i=1}^{2} \\frac{\\partial f}{\\partial x_i} \\mathrm{d}X_t^i + \\frac{1}{2} \\sum_{i,j=1}^{2} \\frac{\\partial^2 f}{\\partial x_i \\partial x_j} \\sigma^i(X_t) \\sigma^j(X_t) \\,\\mathrm{d}t $$\n$f$ 的偏导数为：\n$$ \\frac{\\partial f}{\\partial x_1} = 2x_1, \\quad \\frac{\\partial f}{\\partial x_2} = 1, \\quad \\frac{\\partial^2 f}{\\partial x_1^2} = 2, \\quad \\frac{\\partial^2 f}{\\partial x_1 \\partial x_2} = 0, \\quad \\frac{\\partial^2 f}{\\partial x_2^2} = 0 $$\n应用该公式：\n$$ \\mathrm{d}Z_t^2 = \\frac{\\partial f}{\\partial x_1}\\mathrm{d}X_t^1 + \\frac{\\partial f}{\\partial x_2}\\mathrm{d}X_t^2 + \\frac{1}{2}\\frac{\\partial^2 f}{\\partial x_1^2}(\\sigma^1)^2\\,\\mathrm{d}t $$\n$$ \\mathrm{d}Z_t^2 = 2X_t^1 \\mathrm{d}X_t^1 + \\mathrm{d}X_t^2 + \\frac{1}{2}(2)(\\sin(X_t^1))^2\\,\\mathrm{d}t $$\n代入 $\\mathrm{d}X_t^1$ 和 $\\mathrm{d}X_t^2$ 的表达式：\n$$ \\mathrm{d}Z_t^2 = 2X_t^1(X_t^2\\,\\mathrm{d}t + \\sin(X_t^1)\\,\\mathrm{d}W_t) + (-X_t^1\\,\\mathrm{d}t + \\cos(X_t^1)\\,\\mathrm{d}W_t) + \\sin^2(X_t^1)\\,\\mathrm{d}t $$\n将 $\\mathrm{d}t$ 和 $\\mathrm{d}W_t$ 项分组：\n$$ \\mathrm{d}Z_t^2 = (2X_t^1 X_t^2 - X_t^1 + \\sin^2(X_t^1))\\,\\mathrm{d}t + (2X_t^1\\sin(X_t^1) + \\cos(X_t^1))\\,\\mathrm{d}W_t $$\n用 $Z_t$ 表示系数：\n$$ \\mathrm{d}Z_t^2 = (2Z_t^1(Z_t^2 - (Z_t^1)^2) - Z_t^1 + \\sin^2(Z_t^1))\\,\\mathrm{d}t + (2Z_t^1\\sin(Z_t^1) + \\cos(Z_t^1))\\,\\mathrm{d}W_t $$\n$$ \\mathrm{d}Z_t^2 = (2Z_t^1 Z_t^2 - 2(Z_t^1)^3 - Z_t^1 + \\sin^2(Z_t^1))\\,\\mathrm{d}t + (2Z_t^1\\sin(Z_t^1) + \\cos(Z_t^1))\\,\\mathrm{d}W_t $$\n在 $Z$ 坐标系下的伊藤漂移项和扩散项为：\n$$ b_{\\mathrm{It\\hat{o}}}^{Z}(z) = \\big(z_2 - z_1^2, \\, 2z_1 z_2 - 2z_1^3 - z_1 + \\sin^2(z_1)\\big) $$\n$$ g(z) = \\big(\\sin(z_1), \\, 2z_1\\sin(z_1) + \\cos(z_1)\\big) $$\n\n**2. 通过斯特拉托诺维奇微积分变换SDE**\n\n首先，将 $X_t$ 的原始伊藤 SDE 转换为其斯特拉托诺维奇形式，$dX_t = b_{\\mathrm{Strat}}^{X}(X_t)\\,\\mathrm{d}t + \\sigma(X_t)\\circ\\mathrm{d}W_t$。伊藤漂移项和斯特拉托诺维奇漂移项通过 $b_{\\mathrm{It\\hat{o}}}^i = b_{\\mathrm{Strat}}^i + \\frac{1}{2} \\sum_j \\sigma^j \\frac{\\partial \\sigma^i}{\\partial x_j}$ 相关联。\n漂移项的修正项为 $K_X^i(x) = \\frac{1}{2} \\sum_j \\sigma^j(x) \\frac{\\partial \\sigma^i(x)}{\\partial x_j}$。\n对于 $\\sigma(x) = (\\sin(x_1), \\cos(x_1))$，其雅可比矩阵为 $\\nabla\\sigma = \\begin{pmatrix} \\cos(x_1) & 0 \\\\ -\\sin(x_1) & 0 \\end{pmatrix}$。\n修正向量为 $K_X(x) = \\frac{1}{2}(\\nabla\\sigma)\\sigma = \\frac{1}{2}\\begin{pmatrix} \\cos(x_1) & 0 \\\\ -\\sin(x_1) & 0 \\end{pmatrix}\\begin{pmatrix} \\sin(x_1) \\\\ \\cos(x_1) \\end{pmatrix} = \\frac{1}{2}\\begin{pmatrix} \\sin(x_1)\\cos(x_1) \\\\ -\\sin^2(x_1) \\end{pmatrix}$。\n$X$ 坐标系下的斯特拉托诺维奇漂移项为 $b_{\\mathrm{Strat}}^{X}(x) = b(x) - K_X(x)$：\n$$ b_{\\mathrm{Strat}}^{X}(x) = \\begin{pmatrix} x_2 \\\\ -x_1 \\end{pmatrix} - \\frac{1}{2}\\begin{pmatrix} \\sin(x_1)\\cos(x_1) \\\\ -\\sin^2(x_1) \\end{pmatrix} = \\begin{pmatrix} x_2 - \\frac{1}{2}\\sin(x_1)\\cos(x_1) \\\\ -x_1 + \\frac{1}{2}\\sin^2(x_1) \\end{pmatrix} $$\n斯特拉托诺维奇链式法则与普通链式法则相同。变换后的向量场是原始向量场在 $\\phi$ 作用下的前推。\n变换 $\\phi$ 的雅可比矩阵为 $D\\phi(x) = \\begin{pmatrix} 1 & 0 \\\\ 2x_1 & 1 \\end{pmatrix}$。\n变换后的斯特拉托诺维奇漂移项为 $b_{\\mathrm{Strat}}^{Z}(z) = (D\\phi)_{\\phi^{-1}(z)} b_{\\mathrm{Strat}}^{X}(\\phi^{-1}(z))$：\n$$ b_{\\mathrm{Strat}}^{Z}(\\phi(x)) = \\begin{pmatrix} 1 & 0 \\\\ 2x_1 & 1 \\end{pmatrix} \\begin{pmatrix} x_2 - \\frac{1}{2}\\sin(x_1)\\cos(x_1) \\\\ -x_1 + \\frac{1}{2}\\sin^2(x_1) \\end{pmatrix} = \\begin{pmatrix} x_2 - \\frac{1}{2}\\sin(x_1)\\cos(x_1) \\\\ 2x_1x_2 - x_1\\sin(x_1)\\cos(x_1) - x_1 + \\frac{1}{2}\\sin^2(x_1) \\end{pmatrix} $$\n在 $Z$ 坐标系下：\n$$ b_{\\mathrm{Strat}}^{Z}(z) = \\big(z_2 - z_1^2 - \\frac{1}{2}\\sin(z_1)\\cos(z_1), \\, 2z_1(z_2 - z_1^2) - z_1\\sin(z_1)\\cos(z_1) - z_1 + \\frac{1}{2}\\sin^2(z_1) \\big) $$\n变换后的扩散项为 $g(z) = (D\\phi)_{\\phi^{-1}(z)} \\sigma(\\phi^{-1}(z))$，这与伊藤情形下的 $g(z)$ 相同。\n\n**3. 比较与解释**\n\n斯特拉托诺维奇公式是坐标协变的，因为斯特拉托诺维奇积分被定义为中点黎曼和的极限。这个定义确保了它遵循普通的微积分链式法则，$d\\phi(X_t) = D\\phi(X_t) \\circ dX_t$。因此，漂移和扩散向量场通过坐标变换的雅可比矩阵的前推，像几何向量一样进行变换。这就是协变性的本质。\n\n伊藤公式不是坐标协变的。伊藤积分是通过左端点黎曼和定义的，这导致了伊藤-泰勒公式，其中包含一个源于布朗运动非零二次变分（$\\mathrm{d}W_t^2 = \\mathrm{d}t$）的二阶项。$Z_t = \\phi(X_t)$ 的伊藤公式为：\n$$ \\mathrm{d}Z_t^i = \\sum_j \\frac{\\partial \\phi^i}{\\partial x_j}\\mathrm{d}X_t^j + \\frac{1}{2}\\sum_{j,k} \\frac{\\partial^2 \\phi^i}{\\partial x_j\\partial x_k}\\sigma^j\\sigma^k \\mathrm{d}t $$\n变换后的漂移项包含一个涉及 $\\phi$ 的二阶导数的附加项，这意味着漂移项不像几何向量场那样变换。\n\n在任何坐标系中，伊藤漂移项和斯特拉托诺维奇漂移项都通过一个修正项相关联。在 $Z$ 坐标系中，此关系为 $b_{\\mathrm{It\\hat{o}}}^{Z}(z) = b_{\\mathrm{Strat}}^{Z}(z) + K_Z(z)$，其中 $K_Z^i(z) = \\frac{1}{2}\\sum_k g^k(z) \\frac{\\partial g^i(z)}{\\partial z_k}$。所求的差值为 $\\Delta(z) = b_{\\mathrm{It\\hat{o}}}^{Z}(z) - b_{\\mathrm{Strat}}^{Z}(z) = K_Z(z)$。\n让我们直接计算这个修正项 $K_Z(z)$。\n$Z$ 坐标系下的扩散项为 $g(z) = (\\sin(z_1), \\, 2z_1\\sin(z_1) + \\cos(z_1))$。\n其雅可比矩阵为 $\\nabla_z g(z) = \\begin{pmatrix} \\frac{\\partial g^1}{\\partial z_1} & \\frac{\\partial g^1}{\\partial z_2} \\\\ \\frac{\\partial g^2}{\\partial z_1} & \\frac{\\partial g^2}{\\partial z_2} \\end{pmatrix} = \\begin{pmatrix} \\cos(z_1) & 0 \\\\ \\sin(z_1) + 2z_1\\cos(z_1) & 0 \\end{pmatrix}$。\n修正项为 $K_Z(z) = \\frac{1}{2}(\\nabla_z g)g$：\n$$ K_Z(z) = \\frac{1}{2} \\begin{pmatrix} \\cos(z_1) & 0 \\\\ \\sin(z_1) + 2z_1\\cos(z_1) & 0 \\end{pmatrix} \\begin{pmatrix} \\sin(z_1) \\\\ 2z_1\\sin(z_1) + \\cos(z_1) \\end{pmatrix} $$\n$$ K_Z(z) = \\frac{1}{2} \\begin{pmatrix} \\sin(z_1)\\cos(z_1) \\\\ (\\sin(z_1) + 2z_1\\cos(z_1))\\sin(z_1) \\end{pmatrix} = \\begin{pmatrix} \\frac{1}{2}\\sin(z_1)\\cos(z_1) \\\\ \\frac{1}{2}\\sin^2(z_1) + z_1\\sin(z_1)\\cos(z_1) \\end{pmatrix} $$\n这个向量就是 $\\Delta(z)$。让我们通过减去我们计算出的漂移项来进行验证。\n$$ \\Delta^1(z) = b_{\\mathrm{It\\hat{o}}}^{Z,1}(z) - b_{\\mathrm{Strat}}^{Z,1}(z) = (z_2 - z_1^2) - (z_2 - z_1^2 - \\frac{1}{2}\\sin(z_1)\\cos(z_1)) = \\frac{1}{2}\\sin(z_1)\\cos(z_1) $$\n$$ \\Delta^2(z) = b_{\\mathrm{It\\hat{o}}}^{Z,2}(z) - b_{\\mathrm{Strat}}^{Z,2}(z) $$\n$$ = (2z_1 z_2 - 2z_1^3 - z_1 + \\sin^2(z_1)) - (2z_1(z_2 - z_1^2) - z_1\\sin(z_1)\\cos(z_1) - z_1 + \\frac{1}{2}\\sin^2(z_1)) $$\n$$ = (2z_1 z_2 - 2z_1^3 - z_1 + \\sin^2(z_1)) - (2z_1 z_2 - 2z_1^3 - z_1\\sin(z_1)\\cos(z_1) - z_1 + \\frac{1}{2}\\sin^2(z_1)) $$\n$$ = \\sin^2(z_1) - \\frac{1}{2}\\sin^2(z_1) + z_1\\sin(z_1)\\cos(z_1) = \\frac{1}{2}\\sin^2(z_1) + z_1\\sin(z_1)\\cos(z_1) $$\n结果完全匹配。变换后的伊藤漂移项和斯特拉托诺维奇漂移项之间的差值，恰好是在目标 $Z$ 坐标系中计算的伊藤-斯特拉托诺维奇修正项。\n\n**4. $\\Delta(z)$的最终计算**\n\n所求的量为 $\\Delta(z) = b_{\\mathrm{It\\hat{o}}}^{Z}(z) - b_{\\mathrm{Strat}}^{Z}(z)$。根据上述计算，其分量为：\n$$ \\Delta^1(z) = \\frac{1}{2}\\sin(z_1)\\cos(z_1) $$\n$$ \\Delta^2(z) = z_1\\sin(z_1)\\cos(z_1) + \\frac{1}{2}\\sin^2(z_1) $$\n将其写成一个单行向量即为最终答案。\n$$ \\Delta(z) = \\left( \\frac{1}{2}\\sin(z_1)\\cos(z_1), \\quad z_1\\sin(z_1)\\cos(z_1) + \\frac{1}{2}\\sin^2(z_1) \\right) $$", "answer": "$$ \\boxed{ \\begin{pmatrix} \\frac{1}{2}\\sin(z_1)\\cos(z_1) & z_1\\sin(z_1)\\cos(z_1) + \\frac{1}{2}\\sin^2(z_1) \\end{pmatrix} } $$", "id": "2997449"}, {"introduction": "解析计算能提供深刻的洞察，但理解这些概念在实践中如何表现同样重要。[@problem_id:3077283] 这项练习将我们的重点转移到数值模拟上，这是探索无法获得精确解的复杂随机微分方程的重要工具。你将实现Euler-Maruyama方法来模拟一个随机流及其雅可比矩阵，并利用该模拟来数值验证诸如保序性以及雅可比矩阵定义等基本理论性质。", "problem": "考虑由布朗运动 (BM) 驱动的一维随机微分方程 (SDE)\n$$\ndX_t = -V'(X_t)\\,dt + \\sigma\\,dW_t, \\quad X_0 = x,\n$$\n其中 $V:\\mathbb{R}\\to\\mathbb{R}$ 是一个二次连续可微的势函数，$V'$ 表示 $V$ 的一阶导数，$\\sigma \\ge 0$ 是噪声强度，而 $\\{W_t\\}_{t\\ge 0}$ 是一个标准布朗运动 (BM)。在保证强解存在且唯一的标准正则性和增长条件下，相关的随机流 $\\{\\phi_t\\}_{t\\ge 0}$ 由映射 $x \\mapsto \\phi_t(x)$ 定义，其中 $\\phi_t(x)$ 是从 $x$ 出发在时间 $t$ 的解。一维随机流的雅可比定义为\n$$\nJ_t(x) := \\frac{\\partial}{\\partial x}\\phi_t(x),\n$$\n它根据沿轨迹对SDE进行线性化所得到的变分方程演化。\n\n考虑两种势函数：\n- 单阱二次势：$V(x) = \\tfrac{1}{2}x^2$，因此 $V'(x) = x$ 且 $V''(x) = 1$。\n- 双阱四次势：$V(x) = \\tfrac{1}{4}x^4 - \\tfrac{a}{2}x^2$，参数 $a>0$，因此 $V'(x)=x^3 - a x$ 且 $V''(x)=3x^2 - a$。\n\n您的任务是编写一个完整、可运行的程序，该程序：\n1. 使用欧拉-丸山法模拟SDE，时间步长为 $\\Delta t$，并使用指定的伪随机种子值生成的固定高斯增量 $\\Delta W_n \\sim \\mathcal{N}(0,\\Delta t)$ 以确保可复现性。\n2. 使用从加性噪声情况的变分方程推导出的乘法更新，沿相同路径同时演化雅可比 $J_t(x)$。\n3. 对以下测试套件执行计算，并生成指定的输出。所有布朗增量必须使用给定的种子生成，当比较两个或多个轨迹时，它们必须由完全相同的布朗路径实现（相同的增量数组）驱动。\n\n测试套件（每一项都是一个独立的测试用例）：\n- 测试 $1$：单阱势，参数为 $\\sigma = 0$，$T = 1$，$\\Delta t = 10^{-3}$，初始条件 $x = 0.3$，种子 $12345$。输出一个浮点数，其值为绝对差\n$$\n\\left|J_T(x) - e^{-T}\\right|.\n$$\n- 测试 $2$：单阱势，参数为 $\\sigma = 0.7$，$T = 2$，$\\Delta t = 10^{-3}$，初始条件 $x_1 = -1$，$x_2 = 1$，种子 $67890$。输出一个布尔值，表示是否\n$$\n\\phi_T(x_1)  \\phi_T(x_2).\n$$\n- 测试 $3$：双阱势，参数 $a = 1$，$\\sigma = 0.5$，$T = 3$，$\\Delta t = 10^{-3}$，初始条件 $x = 0.1$，种子 $24680$。令 $\\varepsilon = 10^{-6}$。使用相同的布朗增量计算从 $x$ 和 $x+\\varepsilon$ 开始的两条轨迹，并计算在时间 $T$ 时流导数的有限差分近似：\n$$\nD_{\\mathrm{FD}}(x) = \\frac{\\phi_T(x+\\varepsilon) - \\phi_T(x)}{\\varepsilon}.\n$$\n输出一个布尔值，表示是否\n$$\n\\left|D_{\\mathrm{FD}}(x) - J_T(x)\\right|  5\\times 10^{-3}.\n$$\n- 测试 $4$：单阱势，参数为 $\\sigma = 1$，$T = 0$，$\\Delta t = 10^{-3}$，初始条件 $x = 0.5$，种子 $13579$。输出一个浮点数，其值为绝对差\n$$\n\\left|J_T(x) - 1\\right|.\n$$\n\n数值过程要求：\n- 对状态变量使用欧拉-丸山格式：\n$$\nX_{n+1} = X_n + b(X_n)\\,\\Delta t + \\sigma\\,\\Delta W_n, \\quad b(x) := -V'(x),\n$$\n步数为 $N = T/\\Delta t$。\n- 使用乘法更新来演化雅可比\n$$\nJ_{n+1} = J_n \\exp\\left(b'(X_n)\\,\\Delta t\\right),\n$$\n其中 $b'(x)$ 是 $b(x)$ 的空间导数，等于 $-V''(x)$。初始化 $J_0 = 1$。\n- 对于每个测试用例，确保 $T/\\Delta t$ 是一个整数，并且BM增量 $\\Delta W_n$ 是通过 $\\sqrt{\\Delta t}\\,Z_n$ 生成的，其中 $Z_n \\sim \\mathcal{N}(0,1)$，使用指定的种子。\n\n最终输出格式：\n- 您的程序应生成一行输出，其中包含所有测试用例的结果，结果为逗号分隔的列表，并用方括号括起来，顺序为测试 $1$ 到测试 $4$。例如，一个包含两个浮点数和两个布尔值的输出将如下所示\n$$\n[\\text{float}_1,\\text{boolean}_2,\\text{boolean}_3,\\text{float}_4].\n$$", "solution": "该问题要求对一个一维Itô随机微分方程（SDE）及其对应的流雅可比演化进行数值模拟。该SDE的形式为：\n$$\ndX_t = -V'(X_t)\\,dt + \\sigma\\,dW_t, \\quad X_0 = x\n$$\n其中 $X_t$ 是系统在时间 $t \\ge 0$ 的状态，$V(x)$ 是一个势函数，$b(x) = -V'(x)$ 是漂移系数，$\\sigma \\ge 0$ 是恒定的噪声强度，$\\{W_t\\}_{t\\ge 0}$ 是一个标准的一维布朗运动。\n\n在时间 $t=0$ 从 $x$ 开始的此SDE的解记为 $\\phi_t(x)$。映射集合 $\\{\\phi_t\\}_{t \\ge 0}$ 构成了随机流。此流的雅可比 $J_t(x) = \\frac{\\partial}{\\partial x}\\phi_t(x)$，量化了在时间 $t$ 的解对初始条件 $x$ 的无穷小变化的敏感性。它的演化由一阶变分方程控制。对于具有加性噪声的SDE（即 $\\sigma$ 是常数），该方程是沿 $X_t(x)$ 随机路径的一个常微分方程（ODE）：\n$$\ndJ_t(x) = b'(X_t(x)) J_t(x) \\,dt, \\quad J_0(x) = 1\n$$\n其中 $b'(x) = \\frac{d}{dx}b(x) = -V''(x)$。此ODE的解是\n$$\nJ_t(x) = \\exp\\left(\\int_0^t b'(X_s(x)) \\,ds\\right).\n$$\n\n我们的任务是为两种特定的势函数模拟这些动力学，并验证某些理论性质。\n\n数值积分使用指定的方法进行：\n1.  **状态变量 $X_t$**：使用欧拉-丸山格式。对于时间步长 $\\Delta t$，离散时间更新规则是：\n    $$\n    X_{n+1} = X_n + b(X_n)\\,\\Delta t + \\sigma\\,\\Delta W_n\n    $$\n    其中 $X_n \\approx X_{t_n}$ 且 $t_n=n\\Delta t$，$\\Delta W_n = W_{t_{n+1}} - W_{t_n}$ 是均值为 $0$、方差为 $\\Delta t$ 的独立高斯增量。它们通过 $\\Delta W_n = Z_n \\sqrt{\\Delta t}$ 生成，其中 $Z_n \\sim \\mathcal{N}(0,1)$。\n\n2.  **雅可比 $J_t$**：雅可比的更新规则是通过离散化其精确解中的积分得到的。在一个时间步内，\n    $$\n    J_{t_{n+1}} = J_{t_n} \\exp\\left(\\int_{t_n}^{t_{n+1}} b'(X_s) \\,ds\\right).\n    $$\n    使用左点法则近似积分，$\\int_{t_n}^{t_{n+1}} b'(X_s) \\,ds \\approx b'(X_{t_n})\\,\\Delta t = b'(X_n)\\,\\Delta t$，我们得到指定的乘法更新格式，该格式保持了雅可比的正性：\n    $$\n    J_{n+1} = J_n \\exp\\left(b'(X_n)\\,\\Delta t\\right), \\quad J_0 = 1.\n    $$\n\n两种势函数定义了漂移 $b(x)$ 及其导数 $b'(x)$：\n1.  **单阱势**：$V(x) = \\frac{1}{2}x^2$。\n    其导数为 $V'(x)=x$ 和 $V''(x)=1$。\n    这给出 $b(x) = -V'(x) = -x$ 和 $b'(x) = -V''(x) = -1$。\n\n2.  **双阱势**：$V(x) = \\frac{1}{4}x^4 - \\frac{a}{2}x^2$ 对于 $a  0$。\n    其导数为 $V'(x)=x^3 - ax$ 和 $V''(x)=3x^2 - a$。\n    这给出 $b(x) = -(x^3 - ax) = ax - x^3$ 和 $b'(x) = -(3x^2 - a) = a - 3x^2$。\n\n实现将包括一个主脚本，该脚本按顺序执行四个测试用例。定义辅助函数以提供势函数的导数 $b(x)$ 和 $b'(x)$，并在给定初始条件、参数和预先生成的布朗增量路径的情况下执行核心模拟循环。使用指定的种子一次性生成整个噪声路径可确保可复现性，并允许相同的噪声实现驱动不同的轨迹进行比较，正如测试2和测试3所要求的。\n\n这四个测试用例旨在探究系统的不同方面：\n- **测试 1**：这是一个确定性情况（$\\sigma=0$），其中SDE变为ODE $dX_t = -X_t\\,dt$。流为 $\\phi_t(x) = x e^{-t}$，真实的雅可比为 $J_t(x) = e^{-t}$。将 $T=1$ 时雅可比的数值模拟与精确值 $e^{-1}$ 进行比较。由于雅可比的数值格式对于常数 $b'$ 是一个精确的离散化，计算出的值应与真实值在机器精度范围内接近。\n\n- **测试 2**：此测试验证了一维随机流的一个基本性质：它们几乎必然是保序的。也就是说，如果 $x_1  x_2$，那么对于所有 $t  0$，都有 $\\phi_t(x_1)  \\phi_t(x_2)$。该测试检查对于从 $x_1 = -1$ 和 $x_2 = 1$ 开始并由相同噪声驱动的两条轨迹，在最终时间 $T=2$ 时这个不等式是否成立。\n\n- **测试 3**：此测试通过将其输出 $J_T(x)$ 与流导数的有限差分近似 $D_{\\mathrm{FD}}(x) = (\\phi_T(x+\\varepsilon) - \\phi_T(x))/\\varepsilon$ 进行比较，直接验证了实现的雅可比演化。对于足够小的扰动 $\\varepsilon$，此近似应接近真实导数，因此也应接近模拟的雅可比值。\n\n- **测试 4**：这是一个边界情况，总模拟时间 $T=0$。在这种情况下，不进行任何步骤。状态保持在其初始条件 $\\phi_0(x) = x$，雅可比保持在其初始值 $J_0(x) = \\frac{\\partial x}{\\partial x} = 1$。该测试验证了实现是否正确处理了这个平凡情况。\n\n最终程序为每个测试计算结果，并按指定格式将它们格式化为单个逗号分隔的字符串。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef _get_potential_funcs(p_type, a=None):\n    \"\"\"\n    Returns the drift b(x) = -V'(x) and its derivative b'(x) = -V''(x)\n    for a given potential type.\n    \"\"\"\n    if p_type == 'single_well':\n        # V(x) = 0.5 * x^2 = V'(x) = x, V''(x) = 1\n        # b(x) = -x, b'(x) = -1\n        b = lambda x: -x\n        b_prime = lambda x: -1.0\n    elif p_type == 'double_well':\n        # V(x) = 0.25*x^4 - 0.5*a*x^2 = V'(x) = x^3 - ax, V''(x) = 3x^2 - a\n        # b(x) = ax - x^3, b'(x) = a - 3x^2\n        if a is None:\n            raise ValueError(\"Parameter 'a' must be provided for double_well potential.\")\n        b = lambda x: a * x - x**3\n        b_prime = lambda x: a - 3 * x**2\n    else:\n        raise ValueError(f\"Unknown potential type: {p_type}\")\n    return b, b_prime\n\ndef _perform_simulation(x0, T, dt, sigma, dW_path, b, b_prime):\n    \"\"\"\n    Performs the simulation of the SDE and its Jacobian.\n    \"\"\"\n    # Handle the T=0 case\n    if T == 0:\n        return x0, 1.0\n\n    num_steps = int(T / dt)\n    \n    # Ensure the noise path has the correct length\n    if len(dW_path) != num_steps:\n        raise ValueError(\"Length of dW_path does not match the number of simulation steps.\")\n\n    X = x0\n    J = 1.0\n    \n    for i in range(num_steps):\n        # Update Jacobian using the state at the beginning of the interval\n        J = J * np.exp(b_prime(X) * dt)\n        \n        # Update state using Euler-Maruyama\n        X = X + b(X) * dt + sigma * dW_path[i]\n        \n    return X, J\n\ndef solve():\n    \"\"\"\n    Main function to run all test cases and print the results.\n    \"\"\"\n    results = []\n\n    # --- Test 1 ---\n    # Single-well potential, deterministic case sigma = 0\n    # Expected Jacobian is exp(-T)\n    seed, T, dt, x0, sigma = 12345, 1.0, 1e-3, 0.3, 0.0\n    \n    num_steps = int(T / dt)\n    np.random.seed(seed)\n    Z = np.random.randn(num_steps)\n    dW = np.sqrt(dt) * Z\n    \n    b, b_prime = _get_potential_funcs('single_well')\n    \n    _, final_J = _perform_simulation(x0, T, dt, sigma, dW, b, b_prime)\n    result1 = abs(final_J - np.exp(-T))\n    results.append(result1)\n\n    # --- Test 2 ---\n    # Single-well potential, stochastic case.\n    # Check if flow is order-preserving: phi_T(x1)  phi_T(x2) for x1  x2\n    seed, T, dt, sigma = 67890, 2.0, 1e-3, 0.7\n    x1, x2 = -1.0, 1.0\n    \n    num_steps = int(T / dt)\n    np.random.seed(seed)\n    Z = np.random.randn(num_steps)\n    dW = np.sqrt(dt) * Z\n\n    b, b_prime = _get_potential_funcs('single_well')\n\n    final_X1, _ = _perform_simulation(x1, T, dt, sigma, dW, b, b_prime)\n    final_X2, _ = _perform_simulation(x2, T, dt, sigma, dW, b, b_prime)\n    result2 = final_X1  final_X2\n    results.append(result2)\n\n    # --- Test 3 ---\n    # Double-well potential.\n    # Compare simulated Jacobian with finite-difference approximation.\n    seed, a, sigma, T, dt, x0, eps = 24680, 1.0, 0.5, 3.0, 1e-3, 0.1, 1e-6\n    \n    num_steps = int(T / dt)\n    np.random.seed(seed)\n    Z = np.random.randn(num_steps)\n    dW = np.sqrt(dt) * Z\n    \n    b, b_prime = _get_potential_funcs('double_well', a=a)\n    \n    phi_T_x, J_T_x = _perform_simulation(x0, T, dt, sigma, dW, b, b_prime)\n    phi_T_x_eps, _ = _perform_simulation(x0 + eps, T, dt, sigma, dW, b, b_prime)\n    \n    D_FD = (phi_T_x_eps - phi_T_x) / eps\n    result3 = abs(D_FD - J_T_x)  5e-3\n    results.append(result3)\n    \n    # --- Test 4 ---\n    # Single-well potential, T=0 case.\n    # Expected Jacobian is 1.\n    seed, sigma, T, dt, x0 = 13579, 1.0, 0.0, 1e-3, 0.5\n    \n    # For T=0, num_steps is 0, so the noise path is empty.\n    # The seed is set for consistency but won't be used.\n    np.random.seed(seed)\n    dW = np.array([])\n    \n    b, b_prime = _get_potential_funcs('single_well')\n    \n    _, final_J = _perform_simulation(x0, T, dt, sigma, dW, b, b_prime)\n    result4 = abs(final_J - 1.0)\n    results.append(result4)\n\n    # Final print statement in the exact required format.\n    # str(True) - 'True', str(False) - 'False'\n    print(f\"[{','.join(str(r).capitalize() if isinstance(r, bool) else str(r) for r in results)}]\")\n\nsolve()\n```", "id": "3077283"}]}