{"hands_on_practices": [{"introduction": "本节的第一个练习是掌握费曼-卡茨公式的基石。我们将从一个随机过程的期望表达式出发，显式地计算出其解析解。然后，通过直接求导，我们将验证这个解确实满足对应的偏微分方程（PDE）。这个练习旨在通过具体计算，加深你对期望表示与PDE解之间核心等价关系的理解。[@problem_id:3039047]", "problem": "考虑一个在带域概率空间上由随机微分方程 (SDE) $dX_{s}=\\mu\\,ds+\\sigma\\,dW_{s}$ 定义的 Itô 扩散，其中 $s\\in[t,T]$，初始条件为 $X_{t}=x$，$\\mu\\in\\mathbb{R}$，$\\sigma0$，且 $\\{W_{s}\\}_{s\\ge 0}$ 是一个标准布朗运动。设 $\\lambda\\in\\mathbb{R}$ 为一个常数，终端收益为 $\\phi(x)=\\exp(\\alpha x)$，其中 $\\alpha\\in\\mathbb{R}$ 为一个固定的常数。定义\n$$\nu(t,x)\\equiv \\exp\\!\\big(-\\lambda\\,(T-t)\\big)\\,\\mathbb{E}_{x}\\!\\left[\\phi\\!\\left(X_{T}\\right)\\right],\n$$\n其中 $\\mathbb{E}_{x}[\\cdot]$ 表示给定 $X_{t}=x$ 的条件期望。\n\n1) 以闭合形式显式计算函数 $u(t,x)$，使其表示为关于 $t$、$x$ 以及参数 $\\mu$、$\\sigma$、$\\lambda$ 和 $\\alpha$ 的函数。\n\n2) 仅使用 SDE 解的基本性质和标准微分法，直接验证您所获得的函数 $u(t,x)$ 满足线性抛物型偏微分方程 (PDE)\n$$\nu_{t}(t,x)+\\mu\\,u_{x}(t,x)+\\frac{1}{2}\\sigma^{2}\\,u_{xx}(t,x)-\\lambda\\,u(t,x)=0,\\quad t\\in[0,T),\\ x\\in\\mathbb{R},\n$$\n以及终端条件 $u(T,x)=\\phi(x)=\\exp(\\alpha x)$。\n\n请以 $u(t,x)$ 的一个单一简化的解析表达式形式给出您的最终答案。不需要进行数值舍入。", "solution": "该问题陈述是自洽的，其科学基础在于随机微积分理论及其通过 Feynman-Kac 公式与偏微分方程的联系，并且是适定的。所有参数和函数都已明确定义，目标清晰无歧义。因此，该问题是有效的，我们着手进行求解。解题过程按要求分为两部分呈现。\n\n首先，我们计算函数 $u(t,x)$ 的显式形式。\n随机微分方程 (SDE) 由 $dX_{s}=\\mu\\,ds+\\sigma\\,dW_{s}$ 给出，其中 $s \\in [t,T]$，初始条件为 $X_{t}=x$。这是一个算术布朗运动。\n为了找到该过程在时刻 $T$ 的值，我们将 SDE 从 $t$到 $T$ 进行积分：\n$$\n\\int_{t}^{T} dX_{s} = \\int_{t}^{T} \\mu\\,ds + \\int_{t}^{T} \\sigma\\,dW_{s}\n$$\n这得到：\n$$\nX_{T} - X_{t} = \\mu(T-t) + \\sigma(W_{T}-W_{t})\n$$\n代入初始条件 $X_{t}=x$，我们得到 $X_{T}$ 的解：\n$$\nX_{T} = x + \\mu(T-t) + \\sigma(W_{T}-W_{t})\n$$\n项 $W_{T}-W_{t}$ 表示标准布朗运动在区间 $[t,T]$ 上的增量。该增量是一个正态分布的随机变量，其均值为 $0$，方差为 $T-t$。我们将其记为 $W_{T}-W_{t} \\sim N(0, T-t)$。\n因此，$X_{T}$ 作为正态随机变量的线性变换，也服从正态分布。我们可以如下计算其均值和方差：\n在 $X_t=x$ 的条件下，$X_{T}$ 的均值为：\n$$\n\\mathbb{E}_{x}[X_{T}] = \\mathbb{E}_{x}[x + \\mu(T-t) + \\sigma(W_{T}-W_{t})] = x + \\mu(T-t) + \\sigma\\mathbb{E}[W_{T}-W_{t}] = x + \\mu(T-t)\n$$\n$X_{T}$ 的方差为：\n$$\n\\text{Var}(X_{T}) = \\text{Var}(x + \\mu(T-t) + \\sigma(W_{T}-W_{t})) = \\sigma^{2}\\text{Var}(W_{T}-W_{t}) = \\sigma^{2}(T-t)\n$$\n因此，在给定 $X_{t}=x$ 的条件下，$X_{T}$ 的分布为 $X_{T} \\sim N(x+\\mu(T-t), \\sigma^{2}(T-t))$。\n\n接下来，我们计算 $u(t,x)$ 所需的期望。终端收益为 $\\phi(x)=\\exp(\\alpha x)$。我们需要计算 $\\mathbb{E}_{x}[\\phi(X_{T})] = \\mathbb{E}_{x}[\\exp(\\alpha X_{T})]$。\n这个期望恰好是正态随机变量 $X_{T}$ 的矩生成函数 (MGF) 在 $\\alpha$ 点的值。一个服从 $N(m,v)$ 分布的正态随机变量 $Y$ 的 MGF 由 $M_{Y}(k) = \\mathbb{E}[\\exp(kY)] = \\exp(km + \\frac{1}{2}k^{2}v)$ 给出。\n在我们的例子中，随机变量是 $X_T$，其均值为 $m = x + \\mu(T-t)$，方差为 $v = \\sigma^{2}(T-t)$，并且我们在 $k=\\alpha$ 处求值。\n将这些值代入 MGF 公式，得到：\n$$\n\\mathbb{E}_{x}[\\exp(\\alpha X_{T})] = \\exp\\left(\\alpha(x + \\mu(T-t)) + \\frac{1}{2}\\alpha^{2}\\sigma^{2}(T-t)\\right)\n$$\n现在我们可以根据其定义来构建函数 $u(t,x)$：\n$$\nu(t,x) = \\exp(-\\lambda(T-t))\\,\\mathbb{E}_{x}[\\phi(X_{T})] = \\exp(-\\lambda(T-t)) \\exp\\left(\\alpha x + \\alpha\\mu(T-t) + \\frac{1}{2}\\alpha^{2}\\sigma^{2}(T-t)\\right)\n$$\n合并指数项，我们得到 $u(t,x)$ 的闭合形式解：\n$$\nu(t,x) = \\exp\\left(\\alpha x - \\lambda(T-t) + \\mu\\alpha(T-t) + \\frac{1}{2}\\sigma^{2}\\alpha^{2}(T-t)\\right)\n$$\n在指数中提取公因式 $(T-t)$，得到最终的简化表达式：\n$$\nu(t,x) = \\exp\\left(\\alpha x + (T-t)\\left(\\mu\\alpha + \\frac{1}{2}\\sigma^{2}\\alpha^{2} - \\lambda\\right)\\right)\n$$\n这就完成了问题的第一部分。\n\n第二，我们验证这个函数 $u(t,x)$ 是否满足给定的偏微分方程 (PDE) 和终端条件。\n该 PDE 为 $u_{t}(t,x)+\\mu\\,u_{x}(t,x)+\\frac{1}{2}\\sigma^{2}\\,u_{xx}(t,x)-\\lambda\\,u(t,x)=0$。\n我们的函数是 $u(t,x) = \\exp\\left(\\alpha x + (T-t)K\\right)$，其中为了记法方便，我们定义常数 $K = \\mu\\alpha + \\frac{1}{2}\\sigma^{2}\\alpha^{2} - \\lambda$。\n\n我们计算 $u(t,x)$ 所需的偏导数：\n关于 $t$ 的偏导数为：\n$$\nu_{t}(t,x) = \\frac{\\partial}{\\partial t} \\exp\\left(\\alpha x + (T-t)K\\right) = \\exp\\left(\\alpha x + (T-t)K\\right) \\cdot (-K) = -K\\,u(t,x)\n$$\n关于 $x$ 的一阶偏导数为：\n$$\nu_{x}(t,x) = \\frac{\\partial}{\\partial x} \\exp\\left(\\alpha x + (T-t)K\\right) = \\exp\\left(\\alpha x + (T-t)K\\right) \\cdot \\alpha = \\alpha\\,u(t,x)\n$$\n关于 $x$ 的二阶偏导数为：\n$$\nu_{xx}(t,x) = \\frac{\\partial}{\\partial x}(\\alpha\\,u(t,x)) = \\alpha\\,u_{x}(t,x) = \\alpha(\\alpha\\,u(t,x)) = \\alpha^{2}\\,u(t,x)\n$$\n现在，将这些导数代入 PDE 的左侧：\n$$\nu_{t} + \\mu u_{x} + \\frac{1}{2}\\sigma^{2}u_{xx} - \\lambda u = (-K\\,u) + \\mu(\\alpha\\,u) + \\frac{1}{2}\\sigma^{2}(\\alpha^{2}\\,u) - \\lambda u\n$$\n提取出恒为正的 $u(t,x)$，我们得到：\n$$\nu(t,x) \\left(-K + \\mu\\alpha + \\frac{1}{2}\\sigma^{2}\\alpha^{2} - \\lambda\\right)\n$$\n将 $K$ 的表达式代回：\n$$\nu(t,x) \\left(-\\left(\\mu\\alpha + \\frac{1}{2}\\sigma^{2}\\alpha^{2} - \\lambda\\right) + \\mu\\alpha + \\frac{1}{2}\\sigma^{2}\\alpha^{2} - \\lambda\\right)\n$$\n$$\n= u(t,x) \\left(-\\mu\\alpha - \\frac{1}{2}\\sigma^{2}\\alpha^{2} + \\lambda + \\mu\\alpha + \\frac{1}{2}\\sigma^{2}\\alpha^{2} - \\lambda\\right)\n$$\n括号内的所有项都相互抵消，剩下：\n$$\n= u(t,x) \\cdot 0 = 0\n$$\n这证实了我们的函数 $u(t,x)$ 对所有 $(t,x) \\in [0,T) \\times \\mathbb{R}$ 都满足该 PDE。\n\n最后，我们检验终端条件 $u(T,x)=\\phi(x)=\\exp(\\alpha x)$。\n我们计算解在 $t=T$ 时的值：\n$$\nu(T,x) = \\exp\\left(\\alpha x + (T-T)\\left(\\mu\\alpha + \\frac{1}{2}\\sigma^{2}\\alpha^{2} - \\lambda\\right)\\right) = \\exp\\left(\\alpha x + 0\\right) = \\exp(\\alpha x)\n$$\n这与给定的终端条件吻合。直接验证完成且成功。显式函数 $u(t,x)$ 是最终答案。", "answer": "$$\n\\boxed{\\exp\\left(\\alpha x + (T-t)\\left(\\mu\\alpha + \\frac{1}{2}\\sigma^{2}\\alpha^{2} - \\lambda\\right)\\right)}\n$$", "id": "3039047"}, {"introduction": "在处理实际问题时，随机微分方程中的漂移项常常使分析变得复杂。这个练习将探讨两种强大的处理技巧——Girsanov定理和积分因子法——它们可以将问题转化为更易于处理的形式。理解何时以及如何应用这些方法，是成为一名高级从业者的关键技能。[@problem_id:3039049]", "problem": "考虑一维Ornstein–Uhlenbeck随机微分方程（SDE）\n$$\n\\mathrm{d}X_t = -\\kappa X_t\\,\\mathrm{d}t + \\sigma\\,\\mathrm{d}W_t,\\qquad X_0 = x,\\qquad \\kappa0,\\ \\sigma0,\n$$\n其中 $W_t$ 是标准布朗运动。令 $u(x,t)$ 表示后向偏微分方程（PDE）的解\n$$\n\\partial_t u(x,t) + \\frac{1}{2}\\sigma^2\\,\\partial_{xx}u(x,t) - \\kappa x\\,\\partial_x u(x,t) - q(x)\\,u(x,t) = 0,\\qquad u(x,T)=g(x),\n$$\n其中给定有界连续的终端条件 $g:\\mathbb{R}\\to\\mathbb{R}$ 和非负的扼杀率 $q:\\mathbb{R}\\to\\mathbb{R}$。Feynman–Kac公式将此类PDE与带扼杀的SDE路径上的期望联系起来。处理生成元中的线性漂移项 $-\\kappa x$ 有两种常用方法：\n- 通过Girsanov定理实施概率测度变换，以消除SDE中的漂移项。\n- 对PDE应用一个依赖于 $x$ 的积分因子，从而消除一阶空间导数，并将其影响吸收到位势项 $q$ 中。\n\n下列哪个陈述正确地解释了这两种方法的区别以及它们各自的适用情况？\n\nA. 通过Girsanov定理进行测度变换可以消除SDE中的漂移项，并在路径期望中引入一个指数鞅权重（Radon–Nikodym导数）；扼杀率 $q$ 保持不变。当可积性条件（如Novikov条件）得到满足，并且将 $u$ 表示为在无漂移扩散下的期望可以简化分析，而无需改变边界或终端数据时，这种方法是合适的。\n\nB. 通过一个依赖于 $x$ 的积分因子将漂移吸收到位势中，当漂移是一个梯度场（此处为关于 $x$ 的线性函数）时，该因子可以消除PDE中的一阶项，从而产生一个Schrödinger类型的算子，其修正位势 $q_{\\mathrm{eff}}(x)$ 包含了来自漂移和扩散的贡献。当希望保留原始概率测度并利用自伴性或谱方法时，这种方法是合适的。\n\nC. 对于任何漂移，Girsanov测度变换和积分因子方法总是等价的，并且不需要任何附加条件；两者都产生相同的位势和边界数据。\n\nD. 对于任何漂移，将漂移吸收到位势中会保持扩散系数和终端条件不变，因此它适用于所有应用Feynman–Kac公式的情况。\n\nE. 在Girsanov测度变换下，SDE中的扩散系数被改变以解释被移除的漂移，而期望则不受任何Radon–Nikodym导数的加权。", "solution": "问题陈述描述了Feynman–Kac公式的一个标准设定，该公式将一个线性抛物型偏微分方程（PDE）与一个随机微分方程（SDE）联系起来。该问题具有科学依据，提法恰当且客观。不存在会使其前提失效的矛盾、模糊之处或缺失信息。因此，可以进行全面分析。\n\n问题的核心是对后向PDE的解 $u(x,t)$ 的Feynman–Kac表示：\n$$\n\\partial_t u(x,t) + \\frac{1}{2}\\sigma^2\\,\\partial_{xx}u(x,t) - \\kappa x\\,\\partial_x u(x,t) - q(x)\\,u(x,t) = 0,\\qquad u(x,T)=g(x)\n$$\n解由以下期望给出：\n$$\nu(x,t) = \\mathbb{E} \\left[ e^{-\\int_t^T q(X_s) ds} g(X_T) \\bigg| X_t = x \\right]\n$$\n其中过程 $X_s$ 服从Ornstein–Uhlenbeck SDE：\n$$\n\\mathrm{d}X_s = -\\kappa X_s\\,\\mathrm{d}s + \\sigma\\,\\mathrm{d}W_s\n$$\n初始条件为 $X_t=x$。我们将与此过程相关的概率测度记为 $\\mathbb{P}$。问题要求比较分析该系统的两种标准技术。\n\n**方法1：通过Girsanov定理进行概率测度变换**\n\n此方法的目的是通过移除漂移项来简化SDE。我们寻求一个新的概率测度 $\\mathbb{Q}$，在该测度下，过程 $X_s$ 演化为无漂移的扩散，即一个缩放的布朗运动：\n$$\n\\mathrm{d}X_s = \\sigma\\,\\mathrm{d}\\tilde{W}_s\n$$\n其中 $\\tilde{W}_s$ 是在测度 $\\mathbb{Q}$ 下的标准布朗运动。\n\n根据Girsanov定理，只要某个技术条件（Novikov条件）成立，我们就可以通过一个Radon–Nikodym导数过程 $M_s$ 来定义这样一个测度 $\\mathbb{Q}$。漂移的变化由一个过程 $\\theta_s$ 决定。$\\mathbb{P}$-布朗运动 $W_s$ 和 $\\mathbb{Q}$-布朗运动 $\\tilde{W}_s$ 之间的关系是 $\\mathrm{d}W_s = \\theta_s \\mathrm{d}s + \\mathrm{d}\\tilde{W}_s$。为了消除漂移 $-\\kappa X_s$，我们必须有：\n$$\n-\\kappa X_s \\mathrm{d}s + \\sigma \\mathrm{d}W_s = \\sigma \\mathrm{d}\\tilde{W}_s \\implies -\\kappa X_s \\mathrm{d}s + \\sigma (\\theta_s \\mathrm{d}s + \\mathrm{d}\\tilde{W}_s) = \\sigma \\mathrm{d}\\tilde{W}_s \\implies \\theta_s = \\frac{\\kappa}{\\sigma} X_s\n$$\nNovikov条件 $\\mathbb{E}^{\\mathbb{P}}\\left[ \\exp\\left(\\frac{1}{2} \\int_t^T \\theta_s^2 ds \\right)\\right]  \\infty$ 必须满足。对于高斯过程Ornstein-Uhlenbeck过程，此条件成立。\n\n定义从 $\\mathbb{P}$ 到 $\\mathbb{Q}$ 的测度变换的Radon–Nikodym导数由Doléans-Dade指数给出：\n$$\nM_s = \\frac{\\mathrm{d}\\mathbb{Q}}{\\mathrm{d}\\mathbb{P}} \\bigg|_{\\mathcal{F}_s} = \\exp\\left(\\int_t^s \\theta_r \\mathrm{d}W_r - \\frac{1}{2} \\int_t^s \\theta_r^2 \\mathrm{d}r\\right)\n$$\n然后，对于一个随机变量 $Y$，可以使用抽象的贝叶斯法则 $\\mathbb{E}^{\\mathbb{P}}[Y] = \\mathbb{E}^{\\mathbb{Q}}[Y M_T^{-1}]$，在新测度 $\\mathbb{Q}$ 下重写期望。Feynman-Kac解变为：\n$$\nu(x,t) = \\mathbb{E}^{\\mathbb{Q}} \\left[ M_T^{-1} e^{-\\int_t^T q(X_s) ds} g(X_T) \\bigg| X_t = x \\right]\n$$\n在这里，$X_s$ 的SDE更简单（无漂移），但期望被指数鞅项 $M_T^{-1}$ 加权。扼杀率 $q(x)$ 和终端条件 $g(x)$ 的函数形式没有改变。该技术将计算带漂移过程的期望问题转化为计算无漂移过程的加权期望问题。\n\n**方法2：积分因子（基态变换）**\n\n此方法直接作用于PDE，旨在消除一阶空间导数项 $-\\kappa x\\,\\partial_x u$。这是通过寻找形如 $u(x,t) = \\phi(x) v(x,t)$ 的解来实现的，其中 $\\phi(x)$ 是某个函数。将此代入PDE，我们得到：\n$$\n\\phi \\partial_t v + \\frac{1}{2}\\sigma^2 (\\phi'' v + 2\\phi' v_x + \\phi v_{xx}) - \\kappa x (\\phi' v + \\phi v_x) - q \\phi v = 0\n$$\n除以 $\\phi(x)$（假设 $\\phi(x) \\neq 0$）并根据 $v$ 的导数重新整理各项：\n$$\n\\partial_t v + \\frac{1}{2}\\sigma^2 v_{xx} + \\left( \\sigma^2 \\frac{\\phi'}{\\phi} - \\kappa x \\right) v_x + \\left( \\frac{1}{2}\\sigma^2 \\frac{\\phi''}{\\phi} - \\kappa x \\frac{\\phi'}{\\phi} - q \\right) v = 0\n$$\n为了消除 $v_x$ 项，我们将其系数设为零：\n$$\n\\sigma^2 \\frac{\\phi'}{\\phi} - \\kappa x = 0 \\implies \\frac{\\phi'(x)}{\\phi(x)} = \\frac{\\kappa x}{\\sigma^2}\n$$\n对此积分得到 $\\ln(\\phi(x)) = \\frac{\\kappa x^2}{2\\sigma^2} + C$，因此我们可以选择“积分因子”为 $\\phi(x) = \\exp\\left(\\frac{\\kappa x^2}{2\\sigma^2}\\right)$。\n通过这个选择，$v$ 的PDE变为：\n$$\n\\partial_t v + \\frac{1}{2}\\sigma^2 v_{xx} - q_{\\mathrm{eff}}(x) v = 0\n$$\n其中有效位势 $q_{\\mathrm{eff}}(x)$ 由下式给出：\n$$\nq_{\\mathrm{eff}}(x) = q(x) - \\left( \\frac{1}{2}\\sigma^2 \\frac{\\phi''}{\\phi} - \\kappa x \\frac{\\phi'}{\\phi} \\right)\n$$\n计算导数：$\\phi' = \\frac{\\kappa x}{\\sigma^2} \\phi$ 和 $\\phi'' = \\left(\\frac{\\kappa}{\\sigma^2} + \\frac{\\kappa^2 x^2}{\\sigma^4}\\right) \\phi$。\n代入这些可得：\n$$\nq_{\\mathrm{eff}}(x) = q(x) - \\frac{1}{2}\\sigma^2\\left(\\frac{\\kappa}{\\sigma^2} + \\frac{\\kappa^2 x^2}{\\sigma^4}\\right) + \\kappa x\\left(\\frac{\\kappa x}{\\sigma^2}\\right) = q(x) - \\frac{\\kappa}{2} + \\frac{\\kappa^2 x^2}{2\\sigma^2}\n$$\n变换后的PDE是Schrödinger类型的：$\\partial_t v = -(\\frac{1}{2}\\sigma^2 \\partial_{xx} - q_{\\mathrm{eff}})v$。空间算子 $-\\frac{1}{2}\\sigma^2 \\partial_{xx} + q_{\\mathrm{eff}}$ 在合适的函数空间上是自伴的，这使得可以通过谱方法（例如，特征函数展开）求解。该变换要求漂移项是一个梯度场，这在一维情况下总是成立的。$v$ 的终端条件也被变换：$v(x,T) = u(x,T)/\\phi(x) = g(x) \\exp\\left(-\\frac{\\kappa x^2}{2\\sigma^2}\\right)$。这种方法保持了底层的概率测度 $\\mathbb{P}$ 和 $X_s$ 的SDE不变，但修改了PDE算子、位势项和终端数据。\n\n**选项评估**\n\nA. **正确**。该陈述准确地描述了Girsanov定理方法。它正确地指出，漂移从SDE中被移除，期望中引入了一个指数鞅权重（Radon-Nikodym导数），并且扼杀率函数 $q$ 保持不变。它正确地指出了像Novikov条件这样的可积性条件的必要性，以及其主要动机：在不改变终端函数 $g$ 或位势 $q$ 的情况下简化SDE过程以便于分析。\n\nB. **正确**。该陈述准确地描述了积分因子/基态变换方法。它正确地指出了使用一个依赖于 $x$ 的因子来消除PDE中的一阶空间导数，这在漂移是梯度场的情况下是可能的（如此处所示）。它正确地注意到，这会产生一个Schrödinger类型的算子，其修正位势 $q_{\\mathrm{eff}}(x)$ 包含了来自漂移（$-\\kappa x$）和扩散（$\\sigma$）的项。最后，它正确地说明了当希望保留原始概率测度并利用所得自伴算子来使用谱方法时，此方法非常有用。\n\nC. **不正确**。该陈述在多个方面都是错误的。这两种方法在根本上是不同的，并不等价。Girsanov变换改变了测度和SDE动力学，而积分因子方法改变了PDE及其相关函数（$q$ 和 $g$）。Girsanov变换要求满足Novikov条件。声称它们产生相同的位势和边界数据与上面的推导直接矛盾。\n\nD. **不正确**。该陈述声称将漂移吸收到位势中会保持终端条件不变。如推导所示，变换后函数 $v$ 的终端条件变为 $v(x,T) = g(x)/\\phi(x)$，这是对原始终端条件 $g(x)$ 的修改。因此，该陈述在事实上是不正确的。\n\nE. **不正确**。该陈述对Girsanov测度变换提出了两个错误的论断。首先，它声称扩散系数（$\\sigma$）被改变了。如推导所示，SDE变为 $\\mathrm{d}X_s = \\sigma \\mathrm{d}\\tilde{W}_s$；扩散系数仍然是 $\\sigma$。其次，它声称期望保持未加权。引入Radon-Nikodym导数作为权重是测度变换期望公式的核心特征。", "answer": "$$\\boxed{AB}$$", "id": "3039049"}, {"introduction": "最后的练习将理论与计算融为一体。你不仅需要推导出问题的解析解，还需要设计并实现一个蒙特卡洛模拟来数值地估计同一个量。在计算金融和科学领域，这种通过与已知解析解进行比较的验证方法至关重要，它能确保我们的数值模型被正确地实现。[@problem_id:3039066]", "problem": "考虑一个与一维扩散和常数终止率相关的函数 $u(t,x)$ 的倒向偏微分方程，该方程定义在时间区间 $[t,T]$ 上：\n$$\nu_t(t,x) + \\tfrac{1}{2}\\sigma^2 u_{xx}(t,x) - c\\,u(t,x) = 0,\\quad t \\in [0,T),\\ x \\in \\mathbb{R},\n$$\n其终端条件为\n$$\nu(T,x) = \\exp(\\beta x),\n$$\n其中 $\\sigma \\ge 0$ 是常数波动率，$c \\ge 0$ 是常数终止率，$\\beta \\in \\mathbb{R}$ 是终端函数中的一个常数参数。假设扩散过程 $X_s$ 满足随机微分方程 (SDE)\n$$\ndX_s = \\sigma\\, dW_s,\\quad s \\in [t,T], \\quad X_t = x,\n$$\n其中 $W_s$ 是标准布朗运动。经典的 Feynman-Kac 公式指出，上述终端值问题的唯一有界解可以表示为关于 $X_s$ 定律的期望，即：\n$$\nu(t,x) = \\mathbb{E}\\!\\left[\\exp\\!\\left(-\\int_t^T c(X_s)\\, ds\\right) f(X_T)\\,\\middle|\\, X_t=x\\right],\n$$\n对于一个合适的终端函数 $f$ 和终止率 $c(\\cdot)$。在本题中，取 $c(X_s) \\equiv c$（常数）和 $f(y) = \\exp(\\beta y)$。\n\n你的任务是：\n- 从 Feynman-Kac 表示、标准布朗运动的定义性质以及高斯随机变量的矩生成函数出发，推导出 $u(t,x)$ 的一个仅依赖于 $(\\sigma,\\beta,c,x,t,T)$ 的显式公式。\n- 设计一个蒙特卡洛估计器，该估计器在给定的SDE下模拟 $X_T$，并通过期望表示来估计 $u(t,x)$。你的估计器必须使用对偶变量：模拟 $N/2$ 次独立的标准正态抽样，并同时使用 $+Z$ 和 $-Z$ 来减少方差。总共使用 $N=300000$ 个样本（即 $N/2=150000$ 次独立抽样及其对偶对应项），并将伪随机数生成器的种子固定为一个常数值以确保可复现性。\n- 实现一个程序，对于下方的每个测试用例，计算显式解析解和蒙特卡洛估计值，然后报告两者之间的绝对误差是否在规定的容差范围内。\n\n使用以下测试套件，每个用例由 $(\\sigma,\\beta,c,x,t,T,\\text{tol})$ 描述：\n- 用例 1：$(\\sigma,\\beta,c,x,t,T,\\text{tol}) = (0.7,\\,0.3,\\,0.1,\\,0.2,\\,0.0,\\,0.8,\\,5\\times 10^{-3})$。\n- 用例 2：$(\\sigma,\\beta,c,x,t,T,\\text{tol}) = (0.6,\\,0.5,\\,0.0,\\,-0.1,\\,0.0,\\,1.0,\\,5\\times 10^{-3})$。\n- 用例 3：$(\\sigma,\\beta,c,x,t,T,\\text{tol}) = (1.5,\\,-0.4,\\,0.3,\\,1.1,\\,0.5,\\,0.5,\\,5\\times 10^{-3})$ (注意这里 $t=T$)。\n- 用例 4：$(\\sigma,\\beta,c,x,t,T,\\text{tol}) = (0.0,\\,0.9,\\,0.2,\\,0.4,\\,0.1,\\,0.6,\\,5\\times 10^{-3})$ (注意这里 $\\sigma=0$)。\n- 用例 5：$(\\sigma,\\beta,c,x,t,T,\\text{tol}) = (1.3,\\,0.8,\\,0.4,\\,-0.5,\\,0.0,\\,0.3,\\,5\\times 10^{-3})$。\n\n最终输出规范：\n- 你的程序应产生单行输出，其中包含一个用方括号括起来的逗号分隔列表的结果，列表中的每个条目都是一个布尔值，指示相应测试用例的绝对误差是否小于或等于指定的容差（例如，`[True,False,True,True,True]`）。不应打印任何其他文本。\n\n本题不涉及物理单位。所有角度（如果出现）必须以弧度为单位，但这里不要求。", "solution": "该问题被评估为有效。它具有科学依据、适定、客观且自洽。它提出了 Feynman-Kac 公式在线性抛物型偏微分方程 (PDE) 及常系数扩散过程中的一个标准应用。所有参数和条件都已明确定义。\n\n验证过程如下：\n\n### 步骤 1：提取已知条件\n- **PDE**：$u_t(t,x) + \\tfrac{1}{2}\\sigma^2 u_{xx}(t,x) - c\\,u(t,x) = 0$，对于 $t \\in [0,T),\\ x \\in \\mathbb{R}$。\n- **终端条件**：$u(T,x) = \\exp(\\beta x)$。\n- **参数**：$\\sigma \\ge 0$ (波动率)，$c \\ge 0$ (终止率)，$\\beta \\in \\mathbb{R}$。\n- **SDE**：$dX_s = \\sigma\\, dW_s$，对于 $s \\in [t,T]$，初始条件为 $X_t = x$。$W_s$ 是标准布朗运动。\n- **Feynman-Kac 表示**：$u(t,x) = \\mathbb{E}\\!\\left[\\exp\\!\\left(-\\int_t^T c(X_s)\\, ds\\right) f(X_T)\\,\\middle|\\, X_t=x\\right]$，其中 $c(X_s) = c$ 且 $f(y) = \\exp(\\beta y)$。\n- **蒙特卡洛规范**：使用对偶变量，总样本数 $N=300000$，并使用固定种子。\n- **测试用例**：\n    1. $(\\sigma,\\beta,c,x,t,T,\\text{tol}) = (0.7,\\,0.3,\\,0.1,\\,0.2,\\,0.0,\\,0.8,\\,5\\times 10^{-3})$。\n    2. $(\\sigma,\\beta,c,x,t,T,\\text{tol}) = (0.6,\\,0.5,\\,0.0,\\,-0.1,\\,0.0,\\,1.0,\\,5\\times 10^{-3})$。\n    3. $(\\sigma,\\beta,c,x,t,T,\\text{tol}) = (1.5,\\,-0.4,\\,0.3,\\,1.1,\\,0.5,\\,0.5,\\,5\\times 10^{-3})$。\n    4. $(\\sigma,\\beta,c,x,t,T,\\text{tol}) = (0.0,\\,0.9,\\,0.2,\\,0.4,\\,0.1,\\,0.6,\\,5\\times 10^{-3})$。\n    5. $(\\sigma,\\beta,c,x,t,T,\\text{tol}) = (1.3,\\,0.8,\\,0.4,\\,-0.5,\\,0.0,\\,0.3,\\,5\\times 10^{-3})$。\n\n### 步骤 2：使用提取的已知条件进行验证\n基于 Feynman-Kac 定理所体现的随机微分方程和偏微分方程之间的既定联系，该问题是适定且科学上合理的。所提供的参数和条件是完整且一致的。给出的特殊情况（$\\sigma=0$ 和 $t=T$）是该普遍问题的有效且定义明确的极限，而非矛盾的来源。所有术语在数学和科学上都是可以形式化的。\n\n### 步骤 3：结论与行动\n问题被判定为**有效**。将提供完整解答。\n\n### 解析解推导\n解 $u(t,x)$ 由 Feynman-Kac 公式给出。我们代入终止率 $c(X_s)=c$ 和终端函数 $f(y) = \\exp(\\beta y)$ 的具体形式：\n$$\nu(t,x) = \\mathbb{E}\\!\\left[\\exp\\!\\left(-\\int_t^T c\\, ds\\right) \\exp(\\beta X_T)\\,\\middle|\\, X_t=x\\right].\n$$\n由于 $c$ 是常数，指数中的积分是确定性的：\n$$\n\\int_t^T c\\, ds = c(T-t).\n$$\n这个确定性项可以从期望中提出：\n$$\nu(t,x) = \\exp(-c(T-t)) \\, \\mathbb{E}\\!\\left[\\exp(\\beta X_T)\\,\\middle|\\, X_t=x\\right].\n$$\n剩下的任务是计算期望项，这是随机变量 $X_T$ (在 $X_t=x$ 条件下) 的矩生成函数在 $\\beta$ 处的值。该随机过程由 SDE $dX_s = \\sigma\\, dW_s$ 和初始条件 $X_t=x$ 定义。对此 SDE 从 $t$ 到 $T$ 积分可得：\n$$\nX_T - X_t = \\int_t^T \\sigma\\, dW_s = \\sigma (W_T - W_t).\n$$\n$$\nX_T = x + \\sigma (W_T - W_t).\n$$\n标准布朗运动的增量 $W_T - W_t$ 是一个均值为 $0$、方差为 $T-t$ 的正态分布随机变量。因此，$W_T - W_t \\sim \\mathcal{N}(0, T-t)$。\n因此，$X_T$ 在给定 $X_t=x$ 的条件下的条件分布也是正态的：\n$$\nX_T \\,\\middle|\\, X_t=x \\sim \\mathcal{N}\\big(x, \\sigma^2(T-t)\\big).\n$$\n一个一般正态随机变量 $Y \\sim \\mathcal{N}(\\mu, \\nu^2)$ 的矩生成函数由 $M_Y(k) = \\mathbb{E}[\\exp(kY)] = \\exp(\\mu k + \\tfrac{1}{2}\\nu^2 k^2)$ 给出。\n将此公式应用于 $X_T$，其中参数为 $\\beta$，均值为 $\\mu=x$，方差为 $\\nu^2=\\sigma^2(T-t)$，我们得到：\n$$\n\\mathbb{E}\\!\\left[\\exp(\\beta X_T)\\,\\middle|\\, X_t=x\\right] = \\exp\\left(\\beta x + \\tfrac{1}{2}\\sigma^2(T-t)\\beta^2\\right).\n$$\n将此代回 $u(t,x)$ 的表达式中：\n$$\nu(t,x) = \\exp(-c(T-t)) \\exp\\left(\\beta x + \\tfrac{1}{2}\\sigma^2(T-t)\\beta^2\\right).\n$$\n合并指数项，我们得到显式解析解：\n$$\nu(t,x) = \\exp\\left(\\beta x + \\left(\\tfrac{1}{2}\\sigma^2\\beta^2 - c\\right)(T-t)\\right).\n$$\n\n### 蒙特卡洛估计器设计\n蒙特卡洛方法通过对样本路径求平均来估计期望 $u(t,x)$。单条路径的 $X_T$ 值可以使用积分后的 SDE 进行模拟：\n$$\nX_T = x + \\sigma\\sqrt{T-t}\\,Z,\n$$\n其中 $Z \\sim \\mathcal{N}(0,1)$ 是一个标准正态随机变量。要估计的量是：\n$$\nu(t,x) = \\mathbb{E}\\!\\left[ \\exp(-c(T-t)) \\exp(\\beta(x + \\sigma\\sqrt{T-t}\\,Z)) \\right].\n$$\n该问题要求使用对偶变量来减少方差。该技术利用了标准正态分布的对称性。对于每次随机抽样 $Z_i$，我们也使用其对偶对应项 $-Z_i$。该估计器由成对的模拟值构成。令 $g(Z) = \\exp(-c(T-t)) \\exp(\\beta X_T)$ 为我们寻求其期望的函数。对偶估计器使用成对的求值，对 $g(Z_i)$ 和 $g(-Z_i)$ 进行平均：\n$$\n\\hat{u}_i = \\frac{g(Z_i) + g(-Z_i)}{2} = \\frac{1}{2} \\left[ e^{-c(T-t)}e^{\\beta(x + \\sigma\\sqrt{T-t}Z_i)} + e^{-c(T-t)}e^{\\beta(x - \\sigma\\sqrt{T-t}Z_i)} \\right].\n$$\n提出公因子：\n$$\n\\hat{u}_i = e^{-c(T-t)} e^{\\beta x} \\left[ \\frac{e^{\\beta\\sigma\\sqrt{T-t}Z_i} + e^{-\\beta\\sigma\\sqrt{T-t}Z_i}}{2} \\right].\n$$\n使用恒等式 $\\cosh(y) = \\frac{e^y+e^{-y}}{2}$，上式可简化为：\n$$\n\\hat{u}_i = e^{-c(T-t) + \\beta x} \\cosh\\left(\\beta\\sigma\\sqrt{T-t}Z_i\\right).\n$$\n最终的蒙特卡洛估计值 $\\hat{u}_N(t,x)$ 是 $N/2 = 150000$ 个这样成对估计的平均值：\n$$\n\\hat{u}_N(t,x) = \\frac{1}{N/2} \\sum_{i=1}^{N/2} \\hat{u}_i = e^{-c(T-t) + \\beta x} \\frac{1}{N/2} \\sum_{i=1}^{N/2} \\cosh\\left(\\beta\\sigma\\sqrt{T-t}Z_i\\right).\n$$\n对于 $\\sigma=0$ 或 $t=T$ 的特殊情况，随机部分消失。过程变为确定性的（对于所有 $s \\in [t,T]$，$X_s = x$），蒙特卡洛估计器应无需任何模拟即可得出精确的解析解，因此误差为零。对于 $\\sigma=0$，$u(t,x) = \\exp(\\beta x - c(T-t))$。对于 $t=T$，$u(T,x) = \\exp(\\beta x)$。实现将直接处理这些情况。固定的种子确保每次运行时伪随机数 $Z_i$ 的序列都是相同的，从而使模拟具有可复现性。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes analytical and Monte Carlo solutions for a PDE, and compares them.\n    \"\"\"\n\n    def analytic_solution(sigma, beta, c, x, t, T):\n        \"\"\"\n        Calculates the exact analytic solution to the PDE.\n\n        The formula is u(t,x) = exp(beta*x + (0.5*sigma^2*beta^2 - c)*(T-t)).\n        \"\"\"\n        if t > T:\n            # Physically not meaningful for a backward equation, but handled for robustness.\n            return np.nan\n        \n        exponent = beta * x + (0.5 * sigma**2 * beta**2 - c) * (T - t)\n        return np.exp(exponent)\n\n    def monte_carlo_estimate(sigma, beta, c, x, t, T, N, seed):\n        \"\"\"\n        Estimates the solution using a Monte Carlo simulation with antithetic variates.\n        \"\"\"\n        # For the deterministic cases, the MC estimate is exact and equals the analytic solution.\n        # This avoids unnecessary computation and potential floating-point inaccuracies.\n        if t == T:\n            # Terminal condition: u(T,x) = exp(beta*x)\n            return np.exp(beta * x)\n\n        if sigma == 0:\n            # No diffusion: X_s = x. The PDE is u_t - c*u = 0, with solution u(t,x) = exp(beta*x - c*(T-t)).\n            return np.exp(beta * x - c * (T - t))\n\n        # Use the modern recommended way to handle random number generation\n        rng = np.random.default_rng(seed)\n        \n        # We generate N/2 random numbers for N total antithetic samples.\n        num_draws = N // 2\n        dt = T - t\n\n        # Generate N/2 i.i.d. standard normal random variates\n        Z = rng.standard_normal(size=num_draws)\n\n        # Antithetic variate estimator using the cosh identity for efficiency and clarity.\n        # E[f(Z)] is estimated by avg( (f(Z_i) + f(-Z_i))/2 )\n        # Here, f(Z) corresponds to the full expression inside the expectation.\n        # After simplification, the pair average becomes:\n        # exp(-c*dt + beta*x) * cosh(beta*sigma*sqrt(dt)*Z)\n        \n        k = beta * sigma * np.sqrt(dt)\n        \n        # np.mean computes the average of the N/2 paired estimates\n        mean_cosh_term = np.mean(np.cosh(k * Z))\n        \n        # The final estimate combines the deterministic part with the averaged stochastic part\n        mc_val = np.exp(-c * dt + beta * x) * mean_cosh_term\n        \n        return mc_val\n\n    # Test cases defined in the problem statement\n    test_cases = [\n        # (sigma, beta, c, x, t, T, tol)\n        (0.7, 0.3, 0.1, 0.2, 0.0, 0.8, 5e-3),\n        (0.6, 0.5, 0.0, -0.1, 0.0, 1.0, 5e-3),\n        (1.5, -0.4, 0.3, 1.1, 0.5, 0.5, 5e-3),  # t=T case\n        (0.0, 0.9, 0.2, 0.4, 0.1, 0.6, 5e-3),  # sigma=0 case\n        (1.3, 0.8, 0.4, -0.5, 0.0, 0.3, 5e-3)\n    ]\n    \n    # Monte Carlo parameters\n    N = 300000\n    seed = 123  # A fixed seed for reproducibility as required\n\n    results = []\n    for case in test_cases:\n        sigma, beta, c, x, t, T, tol = case\n        \n        analytic_val = analytic_solution(sigma, beta, c, x, t, T)\n        mc_val = monte_carlo_estimate(sigma, beta, c, x, t, T, N, seed)\n        \n        absolute_error = np.abs(analytic_val - mc_val)\n        \n        results.append(absolute_error = tol)\n\n    # Format the final output exactly as specified.\n    # str() on a Python boolean gives \"True\" or \"False\", which is the desired format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "3039066"}]}