{"hands_on_practices": [{"introduction": "要解决旅行商问题，最直观的方法之一是采用启发式算法，它能在合理的时间内找到一个足够好的解，而非寻找完美的最佳解。最近邻算法（Nearest Neighbor algorithm）就是一种经典的“贪心”策略，即在每一步都选择当前看来最优的选项——前往最近的未访问城市。这个练习将让你在一个具体的行星探测车任务中，一步步应用该算法，从而为你理解启发式算法的实际操作打下坚实的基础。[@problem_id:1547148]", "problem": "一个机器人行星探测车的任务是在一颗小行星上的五个不同的科学站点执行样本采集任务，这五个站点分别命名为 Alpha ($\\text{A}$)、Beta ($\\text{B}$)、Gamma ($\\text{C}$)、Delta ($\\text{D}$) 和 Epsilon ($\\text{E}$)。探测车必须从站点 Alpha 出发，访问其他每个站点恰好一次，然后返回 Alpha 以完成其巡回。任意两个站点之间的旅行时间（单位：分钟）由下表给出：\n\n| 出发/到达 | Alpha ($\\text{A}$) | Beta ($\\text{B}$) | Gamma ($\\text{C}$) | Delta ($\\text{D}$) | Epsilon ($\\text{E}$) |\n|:---------:|:----------:|:----------:|:-----------:|:----------:|:-------------:|\n| Alpha ($\\text{A}$) |     0      |     12     |      25     |     18     |       30      |\n| Beta ($\\text{B}$)  |     12     |      0     |      15     |     22     |       19      |\n| Gamma ($\\text{C}$) |     25     |     15     |       0     |     28     |       11      |\n| Delta ($\\text{D}$) |     18     |     22     |      28     |      0     |       20      |\n| Epsilon ($\\text{E}$)|     30     |     19     |      11     |     20     |        0      |\n\n为了确定其路径，探测车使用了最近邻算法。从站点 Alpha 出发，探测车重复地前往最近的未访问站点，直到访问完所有站点，然后返回 Alpha。\n\n计算该算法生成的巡回路线的总旅行时间。请以分钟为单位给出答案。", "solution": "最近邻算法在每一步选择从当前站点出发、旅行时间最短的未访问站点。从 Alpha (A) 出发，初始未访问站点的集合为 $\\{ \\text{B}, \\text{C}, \\text{D}, \\text{E} \\}$。\n\n从 A 出发，旅行时间分别为 $A \\to B: 12$、$A \\to C: 25$、$A \\to D: 18$、$A \\to E: 30$。最小值为 $12$，因此前往 B。第一次移动后的累计时间为\n$$\nT_{1} = 12.\n$$\n\n从 B 出发，未访问站点的集合为 $\\{ \\text{C}, \\text{D}, \\text{E} \\}$，旅行时间分别为 $B \\to C: 15$、$B \\to D: 22$、$B \\to E: 19$。最小值为 $15$，因此前往 C。累计时间变为\n$$\nT_{2} = T_{1} + 15 = 12 + 15 = 27.\n$$\n\n从 C 出发，未访问站点的集合为 $\\{ \\text{D}, \\text{E} \\}$，旅行时间分别为 $C \\to D: 28$、$C \\to E: 11$。最小值为 $11$，因此前往 E。累计时间变为\n$$\nT_{3} = T_{2} + 11 = 27 + 11 = 38.\n$$\n\n从 E 出发，唯一剩下的未访问站点是 D，旅行时间为 $E \\to D: 20$。前往 D。累计时间变为\n$$\nT_{4} = T_{3} + 20 = 38 + 20 = 58.\n$$\n\n所有站点都已访问完毕；返回起点 A，旅行时间为 $D \\to A: 18$。总巡回时间为\n$$\nT = T_{4} + 18 = 58 + 18 = 76.\n$$", "answer": "$$\\boxed{76}$$", "id": "1547148"}, {"introduction": "在我们学会了如何使用像最近邻这样的快速启发式算法后，一个关键问题随之而来：它给出的解决方案究竟有多好？这个练习旨在挑战“贪心”选择总是最优的直观想法，让你亲自验证启发式算法的局限性。通过计算最近邻算法生成的路径长度，并将其与绝对最短路径（最优解）进行比较，你将能够量化算法的性能，并对求解速度与解的质量之间的权衡形成更深刻的理解。[@problem_id:1411136]", "problem": "一家物流公司正在使用自动驾驶无人机优化其配送路线。在一次测试运行中，一架无人机需要访问四个地点，分别标记为 P、Q、R 和 S。无人机的基地位于地点 P。这四个地点在二维平面中的笛卡尔坐标（以任意距离单位表示）如下：\n- P: (0, 0)\n- Q: (6, 0)\n- R: (12, 0)\n- S: (3, 2)\n\n任意两点之间的行进距离为标准欧几里得距离。无人机被编程使用一种简单的“最近邻贪心算法”来确定其路径。该算法的工作方式如下：从当前位置出发，无人机总是飞往最近的未访问过的地点。此过程重复进行，直到所有地点都被访问完毕，然后无人机返回其起始基地 P。如果到最近的未访问地点存在距离相同的情况，无人机被编程为选择按字母顺序排在前面的地点 (P < Q < R < S)。\n\n设 $L_{greedy}$ 是该算法从 P 点出发生成的路径总长度。设 $L_{opt}$ 是访问所有四个地点并返回 P 点的绝对最短可能路径的长度。\n\n计算性能比 $\\frac{L_{greedy}}{L_{opt}}$。将您的最终答案四舍五入到四位有效数字。", "solution": "点 $A(x_{1},y_{1})$ 和点 $B(x_{2},y_{2})$ 之间的欧几里得距离为\n$$\nd(A,B)=\\sqrt{(x_{2}-x_{1})^{2}+(y_{2}-y_{1})^{2}}.\n$$\n计算所需距离：\n$$\nd(P,Q)=\\sqrt{(6-0)^{2}+(0-0)^{2}}=6,\\quad d(P,R)=\\sqrt{(12-0)^{2}+(0-0)^{2}}=12,\\quad d(P,S)=\\sqrt{(3-0)^{2}+(2-0)^{2}}=\\sqrt{13},\n$$\n$$\nd(S,Q)=\\sqrt{(6-3)^{2}+(0-2)^{2}}=\\sqrt{13},\\quad d(S,R)=\\sqrt{(12-3)^{2}+(0-2)^{2}}=\\sqrt{85},\\quad d(Q,R)=\\sqrt{(12-6)^{2}+(0-0)^{2}}=6.\n$$\n\n从 $P$ 开始的最近邻贪心算法：\n- 从 $P$ 出发：最近的未访问地点是 $S$，因为 $\\sqrt{13}<6<12$，所以 $P\\to S$。\n- 从 $S$ 出发：在未访问地点 $\\{Q,R\\}$ 中，最近的是 $Q$，因为 $\\sqrt{13}<\\sqrt{85}$，所以 $S\\to Q$。\n- 从 $Q$ 出发：只剩下 $R$，所以 $Q\\to R$。\n- 返回 $P$：$R\\to P$。\n\n因此，\n$$\nL_{greedy}=d(P,S)+d(S,Q)+d(Q,R)+d(R,P)=\\sqrt{13}+\\sqrt{13}+6+12=18+2\\sqrt{13}.\n$$\n\n为求得 $L_{opt}$，评估所有从 P 出发并返回 P 的路径：\n$$\n\\begin{aligned}\nP\\to Q\\to R\\to S\\to P &: 6+6+\\sqrt{85}+\\sqrt{13}=12+\\sqrt{85}+\\sqrt{13},\\\\\nP\\to Q\\to S\\to R\\to P &: 6+\\sqrt{13}+\\sqrt{85}+12=18+\\sqrt{13}+\\sqrt{85},\\\\\nP\\to R\\to Q\\to S\\to P &: 12+6+\\sqrt{13}+\\sqrt{13}=18+2\\sqrt{13},\\\\\nP\\to R\\to S\\to Q\\to P &: 12+\\sqrt{85}+\\sqrt{13}+6=18+\\sqrt{85}+\\sqrt{13},\\\\\nP\\to S\\to Q\\to R\\to P &: \\sqrt{13}+\\sqrt{13}+6+12=18+2\\sqrt{13},\\\\\nP\\to S\\to R\\to Q\\to P &: \\sqrt{13}+\\sqrt{85}+6+6=12+\\sqrt{85}+\\sqrt{13}.\n\\end{aligned}\n$$\n最小值为\n$$\nL_{opt}=12+\\sqrt{85}+\\sqrt{13}.\n$$\n\n因此，性能比为\n$$\n\\frac{L_{greedy}}{L_{opt}}=\\frac{18+2\\sqrt{13}}{12+\\sqrt{85}+\\sqrt{13}}.\n$$\n使用 $\\sqrt{13}\\approx 3.605551275$ 和 $\\sqrt{85}\\approx 9.219544457$ 可得\n$$\nL_{greedy}\\approx 25.211102551,\\quad L_{opt}\\approx 24.825095733,\\quad \\frac{L_{greedy}}{L_{opt}}\\approx 1.015549056,\n$$\n四舍五入到四位有效数字为 $1.016$。", "answer": "$$\\boxed{1.016}$$", "id": "1411136"}, {"introduction": "除了从头构建路径，我们还可以通过改进现有路径来寻找更好的解，这引出了局部搜索（local search）的概念。本练习将介绍一种强大的改进方法——2-opt 启发式算法，它通过交换路径中的两条边来尝试优化整个行程。你将探索局部最优与全局最优这两个核心概念，并学会识别一个陷入“局部最优陷阱”（即一个不错但非最佳）的解，这是解决许多复杂优化问题时都会遇到的共同挑战。[@problem_id:1411108]", "problem": "新一代自主送货无人机在一个城市中运行，该城市有五个关键配送中心，分别标记为 A、B、C、D 和 E。为了优化电池寿命，无人机必须遵循一条巡回路径，该路径从一个中心出发，访问其他每个中心恰好一次，然后返回起点。任意两个中心之间的旅行时间（单位：分钟）是固定的，由以下对称矩阵给出：\n\n$$\n\\begin{pmatrix}\n & \\text{A} & \\text{B} & \\text{C} & \\text{D} & \\text{E} \\\\\n\\text{A} & 0 & 10 & 10 & 10 & 10 \\\\\n\\text{B} & 10 & 0 & 10 & 30 & 15 \\\\\n\\text{C} & 10 & 10 & 0 & 10 & 30 \\\\\n\\text{D} & 10 & 30 & 10 & 0 & 10 \\\\\n\\text{E} & 10 & 15 & 30 & 10 & 0\n\\end{pmatrix}\n$$\n\n一条巡回路径的路线可以通过“路径交换”(path-swap)操作来改进。该操作包括在当前巡回路径中选择两条不相邻的飞行路径，例如从中心 $X_1$ 到 $X_2$ 和从 $Y_1$ 到 $Y_2$，并将它们替换为从 $X_1$ 到 $Y_1$ 和从 $X_2$ 到 $Y_2$ 的新路径。为了形成一条新的有效巡回路径，中心 $X_2$ 和 $Y_1$ 之间的中心序列将被反转。如果没有任何一次路径交换操作能够减少其总旅行时间，则该巡回路径被认为是局部最优的。\n\n全局最优巡回路径是总旅行时间绝对最短的巡回路径，但可能存在其他局部最优巡回路径。您的任务是确定以下哪条巡回路径是局部最优但**不是**全局最优的巡回路径。\n\nA. A → B → C → D → E → A\n\nB. A → C → B → E → D → A\n\nC. D → A → C → E → B → D\n\nD. A → B → D → C → E → A", "solution": "令 $w(X,Y)$ 表示中心 $X$ 和 $Y$ 之间的旅行时间。对于在巡回路径中以 $x_{1}-x_{2}-\\dots-y_{1}-y_{2}$ 形式出现的两条不相邻的边 $(x_{1},x_{2})$ 和 $(y_{1},y_{2})$，一次 $2$-opt（路径交换）操作会将它们替换为 $(x_{1},y_{1})$ 和 $(x_{2},y_{2})$；当且仅当满足以下条件时，该操作是改进的：\n$$\nw(x_{1},x_{2})+w(y_{1},y_{2})>w(x_{1},y_{1})+w(x_{2},y_{2}).\n$$\n\n首先，任何巡回路径都包含5条边，每条边的旅行时间至少为10，因此总时间至少为50。巡回路径 A 是\n$$\nA\\to B\\to C\\to D\\to E\\to A,\n$$\n其长度为\n$$\nw(A,B)+w(B,C)+w(C,D)+w(D,E)+w(E,A)=10+10+10+10+10=50,\n$$\n因此 $50$ 是全局最优值。\n\n现在为其余的巡回路径测试局部最优性。\n\n巡回路径 B: $A\\to C\\to B\\to E\\to D\\to A$ 有边 $(A,C),(C,B),(B,E),(E,D),(D,A)$。五个不相邻的边对产生以下 $2$-opt 测试（使用巡回路径的顺序来确定重新连接的方式）：\n1. $(A,C)$ 与 $(B,E)$:\n$$\nw(A,C)+w(B,E)\\stackrel{?}{>}w(A,B)+w(C,E)\\;\\Longleftrightarrow\\;10+15\\stackrel{?}{>}10+30,\n$$\n不成立。\n2. $(C,B)$ 与 $(E,D)$:\n$$\n10+10\\stackrel{?}{>}30+30,\n$$\n不成立。\n3. $(B,E)$ 与 $(D,A)$:\n$$\n15+10\\stackrel{?}{>}30+10,\n$$\n不成立。\n4. $(E,D)$ 与 $(A,C)$:\n$$\n10+10\\stackrel{?}{>}10+10,\n$$\n不成立（等式）。\n5. $(D,A)$ 与 $(C,B)$:\n$$\n10+10\\stackrel{?}{>}10+10,\n$$\n不成立（等式）。\n不存在严格改进的 $2$-opt 操作，因此巡回路径 B 是局部最优的。其总长度为\n$$\n10+10+15+10+10=55>50,\n$$\n因此它不是全局最优的。\n\n巡回路径 C: $D\\to A\\to C\\to E\\to B\\to D$ 包含边 $(C,E)$ 和 $(B,D)$，它们在巡回路径顺序中不相邻。测试 $2$-opt 交换：\n$$\nw(C,E)+w(B,D)>w(C,B)+w(E,D)\\;\\Longleftrightarrow\\;30+30>10+10,\n$$\n成立，因此巡回路径 C 不是局部最优的。\n\n巡回路径 D: $A\\to B\\to D\\to C\\to E\\to A$ 包含不相邻的边 $(B,D)$ 和 $(C,E)$。测试：\n$$\nw(B,D)+w(C,E)>w(B,C)+w(D,E)\\;\\Longleftrightarrow\\;30+30>10+10,\n$$\n成立，因此巡回路径 D 不是局部最优的。\n\n因此，在给定的选项中，唯一局部最优但非全局最优的巡回路径是巡回路径 B。", "answer": "$$\\boxed{B}$$", "id": "1411108"}]}