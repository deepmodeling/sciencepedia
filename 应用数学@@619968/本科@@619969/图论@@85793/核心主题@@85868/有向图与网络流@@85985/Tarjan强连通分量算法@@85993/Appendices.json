{"hands_on_practices": [{"introduction": "简单环是展示 Tarjan 算法核心思想的最基本结构。通过这个练习 [@problem_id:1537554]，你将亲手追踪在深度优先搜索（DFS）中，一条“返祖边”如何更新一个顶点的 `low` 值，以及这个信息如何通过递归调用向上传播，最终将整个环识别为一个强连通分量。这个过程将帮助你直观地理解算法的关键机制。", "problem": "考虑一个有向图 $G = (V, E)$，它由一个长度为 $n$ 的简单环路构成，其中 $n \\ge 2$。顶点集为 $V = \\{v_0, v_1, \\ldots, v_{n-1}\\}$。边集为 $E = \\{(v_i, v_{(i+1) \\pmod{n}}) \\mid i = 0, 1, \\ldots, n-1\\}$。\n\n我们对这个图应用 Tarjan 算法来寻找强连通分量 (SCCs)。该算法从顶点 $v_0$ 开始进行深度优先搜索 (DFS)。在遍历过程中，算法为每个顶点 $v$ 维护和计算两个值：\n\n1.  **发现时间**，记为 $\\text{disc}[v]$。这是一个从 0 开始的全局计数器的整数值。当一个顶点 $v$ 首次被访问时，$\\text{disc}[v]$ 被设置为计数器的当前值，然后计数器递增。\n2.  **低链接值**，记为 $\\text{low}[v]$。该值被初始化为 $\\text{low}[v] = \\text{disc}[v]$。然后，顶点 $u$ 的低链接值会通过取其当前 $\\text{low}[u]$ 值与它在 DFS 树中后继节点的 $\\text{low}$ 值的最小值来进行更新。此外，如果一条边 $(u, w)$ 指向一个已被访问过且当前仍在 DFS 递归堆栈上的顶点 $w$，那么 $\\text{low}[u]$ 会通过取其当前值与 $\\text{disc}[w]$ 的最小值来进行更新。\n\n在算法完成从 $v_0$ 开始的遍历且所有递归调用都返回之后，对于任意顶点 $v_i$（其中 $0 \\le i \\le n-1$），$\\text{disc}[v_i]$ 和 $\\text{low}[v_i]$ 的最终值是什么？\n\n请用一对关于 $i$ 的符号表达式来表示你的答案。第一个表达式应为 $\\text{disc}[v_i]$ 的值，第二个表达式应为 $\\text{low}[v_i]$ 的值。", "solution": "我们分析 Tarjan 算法在单个简单环路有向图 $v_{0} \\to v_{1} \\to \\cdots \\to v_{n-1} \\to v_{0}$ 上的执行过程，其中 DFS 从 $v_{0}$ 开始。用于发现时间的全局计数器从 0 开始，当一个顶点首次被访问时，它被赋予计数器的当前值，然后计数器递增。\n\n首先，由于每个顶点只有一条出边，DFS 的顺序是固定的：从 $v_{0}$ 开始，算法将依次访问 $v_{1}$、 $v_{2}$，……，直到 $v_{n-1}$。因此，发现时间是按顺序分配的：\n$$\n\\text{disc}[v_{0}] = 0,\\ \\text{disc}[v_{1}] = 1,\\ \\ldots,\\ \\text{disc}[v_{i}] = i,\\ \\ldots,\\ \\text{disc}[v_{n-1}] = n-1.\n$$\n因此，对于 $0 \\leq i \\leq n-1$ 范围内的任意 $i$，\n$$\n\\text{disc}[v_{i}] = i.\n$$\n\n接下来，当顶点 $v$ 首次被访问时，其低链接值被初始化为 $\\text{low}[v] = \\text{disc}[v]$。随后它们按如下规则更新：对于一条边 $(u, w)$，\n- 如果 $w$ 未被访问，则在递归访问 $w$ 之后，设置 $\\text{low}[u] = \\min(\\text{low}[u], \\text{low}[w])$；\n- 如果 $w$ 已被访问且当前在 DFS 栈上，则设置 $\\text{low}[u] = \\min(\\text{low}[u], \\text{disc}[w])$。\n\n当探索 $v_{n-1}$ 时，它的后继是 $v_{0}$，该顶点已被访问过，并且仍在递归栈上（因为还没有强连通分量被弹出）。根据第二条更新规则，\n$$\n\\text{low}[v_{n-1}] = \\min(\\text{low}[v_{n-1}], \\text{disc}[v_{0}]) = \\min(n-1, 0) = 0,\n$$\n其中使用了条件 $n \\geq 2$，因此 $n-1 \\geq 1$。\n\n现在，在递归中返回到 $v_{n-2}$，它的树子节点是 $v_{n-1}$。应用第一条更新规则：\n$$\n\\text{low}[v_{n-2}] = \\min(\\text{low}[v_{n-2}], \\text{low}[v_{n-1}]) = \\min(n-2, 0) = 0.\n$$\n对从 $n-3$ 到 $0$ 的每个 $k$ 进行类似地向上回溯，\n$$\n\\text{low}[v_{k}] = \\min(\\text{low}[v_{k}], \\text{low}[v_{k+1}]) = \\min(k, 0) = 0.\n$$\n因此，对于 $0 \\leq i \\leq n-1$ 范围内的每个 $i$，\n$$\n\\text{low}[v_{i}] = 0.\n$$\n\n综合两个结果，对于任意顶点 $v_{i}$，\n$$\n\\text{disc}[v_{i}] = i,\\quad \\text{low}[v_{i}] = 0.\n$$\n这些值与以下事实相符：所有顶点都属于同一个强连通分量，其根是 $v_{0}$，且具有最小发现时间 $0$。", "answer": "$$\\boxed{\\begin{pmatrix} i & 0 \\end{pmatrix}}$$", "id": "1537554"}, {"introduction": "看过了算法如何处理环结构，理解它在无环图上的行为同样重要。这个关于有向无环图（DAG）的练习 [@problem_id:1537552] 将巩固你对强连通分量定义的理解。它会向你展示，当图中不存在任何环时，Tarjan 算法如何正确地将每个独立的顶点识别为一个平凡的强连通分量。", "problem": "考虑一个有向图 $G = (V, E)$，其顶点集为 $V = \\{0, 1, 2, 3, 4, 5, 6, 7\\}$，边集 $E$ 由以下邻接表表示，其中条目 `u: [v, w]` 表示存在从顶点 `u` 到顶点 `v` 和从 `u` 到 `w` 的有向边。\n\n0: [1, 2]\n1: [3]\n2: [3, 4]\n3: [5]\n4: [5, 6]\n5: [7]\n6: [7]\n7: []\n\n在此图上运行一个算法以找出其所有的强连通分量（SCCs）。如果对于一个顶点集合中的每一对顶点 $u$ 和 $v$，都存在一条从 $u$ 到 $v$ 的有向路径和一条从 $v$ 到 $u$ 的有向路径，则该顶点集合构成一个强连通分量。\n\n设 $N$ 为在图 $G$ 中找到的不同SCC的总数，并设 $S_{max}$ 为最大SCC中的顶点数（即包含最多顶点的SCC）。\n\n以下哪个选项正确地指出了 $N$ 和 $S_{max}$ 的值？\n\nA. $N = 1, S_{max} = 8$\n\nB. $N = 2, S_{max} = 4$\n\nC. $N = 3, S_{max} = 3$\n\nD. $N = 8, S_{max} = 1$\n\nE. $N = 4, S_{max} = 2$", "solution": "我们分析有向图 $G=(V,E)$，其顶点集为 $V=\\{0,1,2,3,4,5,6,7\\}$，边由以下邻接表给出：\n$0: [1,2],\\ 1:[3],\\ 2:[3,4],\\ 3:[5],\\ 4:[5,6],\\ 5:[7],\\ 6:[7],\\ 7:[]$。\n从此列表中，每条边的形式均为 $(u,v)$，且满足 $u<v$。明确地，有向边集合为\n$$\n(0,1),\\ (0,2),\\ (1,3),\\ (2,3),\\ (2,4),\\ (3,5),\\ (4,5),\\ (4,6),\\ (5,7),\\ (6,7).\n$$\n因此，对于所有 $(u,v)\\in E$，我们有 $u<v$。所以，$G$ 中没有有向环；$G$ 是一个有向无环图（DAG）。\n\n根据定义，一个强连通分量（SCC）是一个极大的顶点集合，使得对于集合中的任意一对顶点 $u,v$，都存在有向路径 $u\\leadsto v$ 和 $v\\leadsto u$。在一个有向无环图中，假设两个不同的顶点 $u\\neq v$ 处于同一个SCC中。那么就将存在路径 $u\\leadsto v$ 和 $v\\leadsto u$，它们一起构成一个有向环，这与无环性相矛盾。因此，在一个有向无环图中，每个SCC都必须是单个顶点。\n\n因此，每个顶点自身构成一个SCC。由此得出，SCC的总数是\n$$\nN=|V|=8,\n$$\n并且最大SCC的大小是\n$$\nS_{\\max}=1.\n$$\n与给定的选项匹配，这对应于选项D。", "answer": "$$\\boxed{D}$$", "id": "1537552"}, {"introduction": "现在，让我们从简单的追踪转向结构性的预测。这个问题 [@problem_id:1537538] 挑战你预测在图中引入一条新边后，强连通分量的结构会如何变化。通过为一条线性路径添加一条“返祖边”，你将探索一个新形成的环如何将一系列顶点“坍缩”成一个更大的强连通分量，这标志着你对图连通性的理解已进入更深的层次。", "problem": "设一个有向图 $G_0 = (V, E_0)$ 由一个包含 $n$ 个顶点的集合 $V = \\{v_1, v_2, \\ldots, v_n\\}$ 和一个边的集合 $E_0 = \\{(v_k, v_{k+1}) \\mid 1 \\le k < n\\}$ 定义。该图构成一条简单的有向路径。\n\n通过向 $G_0$ 中添加一条边 $e = (v_i, v_j)$ 来创建一个新图 $G = (V, E)$，其中索引 $i$ 和 $j$ 是满足条件 $1 \\le j < i \\le n$ 的整数。\n\n有向图的强连通分量 (SCC) 是一个极大子图，对于该子图中的任意两个顶点 $u$ 和 $w$，都存在一条从 $u$ 到 $w$ 的有向路径和一条从 $w$ 到 $u$ 的有向路径。\n\n确定最终图 $G$ 中强连通分量的总数。请用一个关于 $n$、$i$ 和 $j$ 的闭式表达式给出你的答案。", "solution": "在顶点为 $v_{1} \\to v_{2} \\to \\cdots \\to v_{n}$ 的有向路径图 $G_{0}$ 中，对于任意 $u<w$，都存在一条从 $v_{u}$到 $v_{w}$ 的有向路径，但不存在从 $v_{w}$ 返回到 $v_{u}$ 的路径。因此，在 $G_{0}$ 中，每个顶点自身都构成一个强连通分量 (SCC)。\n\n添加边 $e=(v_{i},v_{j})$，其中 $1 \\leq j < i \\leq n$。考虑索引从 $j$ 到 $i$ 的顶点集合。对于任意满足 $j \\leq a,b \\leq i$ 的 $a,b$，存在一条从 $v_{a}$ 到 $v_{b}$ 的有向路径，其构造如下：沿着路径从 $v_{a}$ 向前走到 $v_{i}$，穿过添加的边到达 $v_{j}$，然后沿着路径从 $v_{j}$ 向前走到 $v_{b}$。根据对称性，使用相同的机制也存在一条从 $v_{b}$到 $v_{a}$ 的路径。因此，$\\{v_{j},v_{j+1},\\ldots,v_{i}\\}$ 是一个单独的强连通分量。\n\n索引小于 $j$ 的顶点不能属于这个强连通分量：对于 $k<j$，虽然存在路径 $v_{k} \\to \\cdots \\to v_{j}$，但不存在从 $v_{j}$（或 $\\{v_{j},\\ldots,v_{i}\\}$ 中的任何顶点）返回到 $v_{k}$ 的有向路径，因为除了添加的边之外，所有边都只从较低索引指向较高索引。因此，$v_{1},\\ldots,v_{j-1}$ 中的每一个都仍然是单点强连通分量。\n\n索引大于 $i$ 的顶点不能属于这个强连通分量：从 $\\{v_{j},\\ldots,v_{i}\\}$ 出发，可以沿着向前的边到达任何 $k>i$ 的 $v_{k}$，但由于原始路径只有前向结构，不存在从这样的 $v_{k}$ 返回到任何索引 $\\leq i$ 的顶点的路径。此外，对于 $i<k<\\ell \\leq n$，存在路径 $v_{k} \\to \\cdots \\to v_{\\ell}$ 但不能返回，所以 $v_{i+1},\\ldots,v_{n}$ 中的每一个也都是单点强连通分量。\n\n因此，$G$ 中强连通分量的总数是由 $\\{v_{j},\\ldots,v_{i}\\}$ 形成的一个强连通分量、$v_{j}$ 前面的 $(j-1)$ 个单点强连通分量以及 $v_{i}$ 后面的 $(n-i)$ 个单点强连通分量的数量之和：\n$$\n(j-1) + 1 + (n - i) = n - i + j.\n$$\n该表达式已经是关于 $n$，$i$ 和 $j$ 的闭式形式。", "answer": "$$\\boxed{n - i + j}$$", "id": "1537538"}]}