{"hands_on_practices": [{"introduction": "流网络中的流量守恒原则是其核心支柱之一，它规定对于除源点 $s$ 和汇点 $t$ 之外的任何中间节点，流入的总流量必须等于流出的总流量。这个练习将让你扮演一名网络审计员的角色，通过对一个假设的数据流场景进行直接计算，来检验流量守恒是否得到满足。这不仅是验证网络流有效性的基本功，也是理解更复杂流动问题的第一步。[@problem_id:1504829]", "problem": "一家名为 DataStream Inc. 的科技公司正在对其内部服务器网络中的数据流进行审计。该网络被建模为一个有向图，其中服务器是顶点，网络连接是有向边。公司有一个主数据中心，作为源点 $s$；还有一个主备份存档，作为汇点 $t$。\n\n该网络包含顶点集 $V = \\{s, v_1, v_2, v_3, v_4, t\\}$。一名实习生测量了网络中每个活动连接 $(u,v)$ 的当前数据流速率，记作 $f(u,v)$。流速率以太比特每秒 (Tb/s) 为单位。记录的流量如下：\n\n- $f(s, v_1) = 12$\n- $f(s, v_2) = 15$\n- $f(v_1, v_2) = 5$\n- $f(v_1, v_3) = 7$\n- $f(v_2, v_3) = 9$\n- $f(v_2, v_4) = 11$\n- $f(v_3, v_4) = 8$\n- $f(v_3, t) = 5$\n- $f(v_4, t) = 18$\n\n对于任何既不是源点也不是汇点的顶点 $v$，流量守恒原则要求流入 $v$ 的总流量必须等于流出 $v$ 的总流量。顶点 $v$ 的净流量定义为流入 $v$ 的总流量减去流出 $v$ 的总流量。你的任务是通过计算顶点 $v_3$ 所代表的服务器的净流量来验证实习生的测量结果。\n\n将 $v_3$ 处的净流量答案表示为一个以 Tb/s 为单位的数字。", "solution": "根据流量守恒原则，一个顶点 $v$（非源点或汇点）的净流量定义为总流入量减去总流出量：\n$$\\text{net}(v) = \\sum_{u} f(u,v) - \\sum_{w} f(v,w).$$\n对于 $v_{3}$，流入边是 $(v_{1},v_{3})$ 和 $(v_{2},v_{3})$，流出边是 $(v_{3},v_{4})$ 和 $(v_{3},t)$。因此，\n$$\\text{net}(v_{3}) = f(v_{1},v_{3}) + f(v_{2},v_{3}) - f(v_{3},v_{4}) - f(v_{3},t).$$\n代入给定的值：\n$$\\text{net}(v_{3}) = 7 + 9 - 8 - 5 = 16 - 13 = 3.$$\n因此，$v_{3}$ 处的净流量为 $3$ Tb/s；由于此值不为零，给定的测量值在 $v_{3}$ 处违反了流量守恒原则。", "answer": "$$\\boxed{3}$$", "id": "1504829"}, {"introduction": "理解了流量守恒后，我们自然会问：一个网络最多能传输多少流量？这个问题引出了流网络理论中的核心概念——最大流。这项实践将带你从理论走向应用，通过计算增加一条新路径对整个网络最大流量的影响，来量化一次网络升级的实际效益。你将运用最大流最小割定理这一强大工具，来评估网络结构变化所带来的性能提升。[@problem_id:1504814]", "problem": "一个数据中心的内部网络被建模为一个有向图，其中节点表示服务器，边表示数据链路。每条链路的容量以吉比特每秒（Gbps）为单位，它决定了最大的数据传输速率。目标是将数据从指定的源服务器 $s$ 传输到汇服务器 $t$。\n\n当前的网络配置由顶点集 $V = \\{s, a, b, t\\}$ 和以下具有各自容量的有向边定义：\n- 边 $(s, a)$，容量为 10 Gbps。\n- 边 $(a, b)$，容量为 5 Gbps。\n- 边 $(b, t)$，容量为 10 Gbps。\n- 边 $(s, t)$，容量为 5 Gbps。\n\n为了提升网络的吞吐量，一位工程师提议从源服务器 $s$ 到服务器 $b$ 添加一条新的直接链路。这条新链路 $(s, b)$ 的指定容量为 3 Gbps。\n\n计算这次修改后，从 $s$ 到 $t$ 的最大流所增加的量。请以 Gbps 为单位，用一个数字表示你的答案。", "solution": "我们将网络建模为一个有向图，其边 $(u,v)$ 上的容量函数为 $c(u,v)$。根据最大流最小割定理，最大 $s$–$t$ 流的值等于所有 $s$–$t$ 割 $(S,T)$ 中的最小容量，其中 $S \\subset V$ 包含 $s$ 且 $t \\in T = V \\setminus S$。一个割的容量为\n$$\nc(S,T) = \\sum_{u \\in S}\\sum_{v \\in T} c(u,v).\n$$\n\n原始网络（不含 $(s,b)$）：\n- 可能的 $s$–$t$ 割由选择 $S \\subset \\{s,a,b\\}$ 且 $s \\in S$ 来决定。枚举如下：\n1) $S=\\{s\\}$, $T=\\{a,b,t\\}$:\n$$\nc(S,T)=c(s,a)+c(s,t)=10+5=15.\n$$\n2) $S=\\{s,a\\}$, $T=\\{b,t\\}$:\n$$\nc(S,T)=c(a,b)+c(s,t)=5+5=10.\n$$\n3) $S=\\{s,b\\}$, $T=\\{a,t\\}$:\n$$\nc(S,T)=c(s,a)+c(b,t)+c(s,t)=10+10+5=25.\n$$\n4) $S=\\{s,a,b\\}$, $T=\\{t\\}$:\n$$\nc(S,T)=c(b,t)+c(s,t)=10+5=15.\n$$\n因此最小割容量为 $\\min\\{15,10,25,15\\}=10$。所以，原始最大流的值为 $10$。\n\n修改后的网络（添加 $c(s,b)=3$ 的边 $(s,b)$）：\n重新计算相同的割容量，在适用的情况下现在包括 $c(s,b)$。\n1) $S=\\{s\\}$, $T=\\{a,b,t\\}$:\n$$\nc(S,T)=c(s,a)+c(s,b)+c(s,t)=10+3+5=18.\n$$\n2) $S=\\{s,a\\}$, $T=\\{b,t\\}$:\n$$\nc(S,T)=c(a,b)+c(s,b)+c(s,t)=5+3+5=13.\n$$\n3) $S=\\{s,b\\}$, $T=\\{a,t\\}$:\n$$\nc(S,T)=c(s,a)+c(b,t)+c(s,t)=10+10+5=25.\n$$\n4) $S=\\{s,a,b\\}$, $T=\\{t\\}$:\n$$\nc(S,T)=c(b,t)+c(s,t)=10+5=15.\n$$\n因此新的最小割容量为 $\\min\\{18,13,25,15\\}=13$。所以，新的最大流的值为 $13$。\n\n最大流的增量是新的最大流与原始最大流之间的差值：\n$$\n\\Delta = 13 - 10 = 3.\n$$\n以给定单位衡量，增量为 $3$ Gbps。", "answer": "$$\\boxed{3}$$", "id": "1504814"}, {"introduction": "现实世界中的网络往往比单源单汇的理想模型更复杂，例如数据可能从多个数据中心同时发出。这个练习模拟了这样一个多源场景，并提出了一个独特的挑战：在不添加“超级源点”来简化图结构的前提下，求解最大流问题。这要求你深入思考增广路径算法的内部机制，通过直接调整其搜索过程来适应多源情况，从而培养超越“套用公式”的、更深层次的算法设计与分析能力。[@problem_id:1504817]", "problem": "一家名为 QuantumLeap Dynamics 的数据物流公司，需要将其冗余存储设施中的一个大型科学数据集传输到一台中央超级计算机进行处理。该公司的网络可以建模为一个有向图，其中节点代表数据中心、路由器和超级计算机，边代表具有特定最大数据传输速率的光纤链路。\n\n该网络包含以下节点：\n- 两个源数据中心：`DC1` 和 `DC2`。\n- 两个网络路由器：`R1` 和 `R2`。\n- 一个汇点超级计算机：`SC`。\n\n有向链路及其对应的容量（单位为太字节/小时，即 TB/h）如下：\n- `(DC1, R1)`: 10 TB/h\n- `(DC1, R2)`: 5 TB/h\n- `(DC2, R1)`: 6 TB/h\n- `(DC2, R2)`: 8 TB/h\n- `(R1, R2)`: 4 TB/h\n- `(R1, SC)`: 12 TB/h\n- `(R2, SC)`: 9 TB/h\n\n您的任务是确定从两个数据中心（`DC1` 和 `DC2`）合并到超级计算机（`SC`）的最大可能总数据传输速率。\n\n为解决此问题，您必须使用一种基于增广路径的算法，例如 Edmonds-Karp 算法。但是，题目明确禁止您修改网络拓扑，例如添加一个连接到 `DC1` 和 `DC2` 的整合“超级源”节点。您的方法必须转而调整算法路径寻找搜索的初始化过程，以直接处理这两个不同的源点。\n\n请用一个以 TB/h 为单位的单一数值来表示最大流的最终答案。", "solution": "该问题要求计算一个多源单汇网络中的最大流。解决此类问题的标准方法是创建一个“超级源”节点 `S*`，从 `S*` 向每个真实源点（`DC1`、`DC2`）添加容量无限的有向边，然后计算从 `S*` 到汇点 `SC` 的最大流。然而，问题明确禁止对图进行这种修改。\n\n因此，我们必须调整一种增广路径算法（如 Edmonds-Karp 算法）来处理多个源点。Edmonds-Karp 算法使用广度优先搜索 (BFS) 在残留图中重复寻找一条最短增广路径（就边的数量而言），并沿此路径增加流量。所需的调整在于 BFS 的初始化过程。我们不是从单个源节点开始搜索，而是用所有源节点（`DC1` 和 `DC2`）来初始化 BFS 队列。这实际上是在搜索一条从*任意*源点到汇点的路径。\n\n设流函数为 `f(u, v)`，容量为 `c(u, v)`。从节点 `u` 到 `v` 的残留容量为 `c_f(u, v) = c(u, v) - f(u, v)`。最初，各处的流量均为零，因此残留图与原图相同。总流量 `F = 0`。\n\n**第 1 轮迭代：**\n我们在残留图中搜索一条从 `{DC1, DC2}` 到 `SC` 的增广路径。\n初始化 BFS 队列：`Q = [DC1, DC2]`。\nBFS 将会探索路径。存在两条长度为 2 的最短路径：`DC1 -> R1 -> SC` 和 `DC1 -> R2 -> SC`。第三条路径 `DC2 -> R1 -> SC` 的长度也为 2。算法可以选择其中任意一条。我们选择 `DC1 -> R1 -> SC`。\n该路径上的残留容量为 `c_f(DC1, R1) = 10` 和 `c_f(R1, SC) = 12`。\n瓶颈容量是 `min(10, 12) = 10`。\n我们将流量增加 10。`F = 0 + 10 = 10`。\n更新残留容量：\n- `c_f(DC1, R1)` 减小到 `10 - 10 = 0`。创建一条反向边 `(R1, DC1)`，其容量为 `c_f(R1, DC1) = 10`。\n- `c_f(R1, SC)` 减小到 `12 - 10 = 2`。创建一条反向边 `(SC, R1)`，其容量为 `c_f(SC, R1) = 10`。\n\n**第 2 轮迭代：**\n搜索一条新的增广路径。初始化 BFS 队列：`Q = [DC1, DC2]`。\n现在的最短路径是 `DC2 -> R2 -> SC`，长度为 2。\n残留容量为 `c_f(DC2, R2) = 8` 和 `c_f(R2, SC) = 9`。\n瓶颈容量是 `min(8, 9) = 8`。\n我们将流量增加 8。`F = 10 + 8 = 18`。\n更新残留容量：\n- `c_f(DC2, R2)` 减小到 `8 - 8 = 0`。反向边 `c_f(R2, DC2) = 8`。\n- `c_f(R2, SC)` 减小到 `9 - 8 = 1`。反向边 `c_f(SC, R2) = 8`。\n\n**第 3 轮迭代：**\n搜索一条新的增广路径。初始化 BFS 队列：`Q = [DC1, DC2]`。\n一条最短路径是 `DC1 -> R2 -> SC`，长度为 2。\n残留容量为 `c_f(DC1, R2) = 5` 和 `c_f(R2, SC) = 1`。\n瓶颈容量是 `min(5, 1) = 1`。\n我们将流量增加 1。`F = 18 + 1 = 19`。\n更新残留容量：\n- `c_f(DC1, R2)` 减小到 `5 - 1 = 4`。`c_f(R2, DC1)` 增加到 1。\n- `c_f(R2, SC)` 减小到 `1 - 1 = 0`。`c_f(SC, R2)` 增加到 `8 + 1 = 9`。\n\n**第 4 轮迭代：**\n搜索一条新的增广路径。初始化 BFS 队列：`Q = [DC1, DC2]`。\n一条最短路径是 `DC2 -> R1 -> SC`，长度为 2。\n残留容量为 `c_f(DC2, R1) = 6` 和 `c_f(R1, SC) = 2`。\n瓶颈容量是 `min(6, 2) = 2`。\n我们将流量增加 2。`F = 19 + 2 = 21`。\n更新残留容量：\n- `c_f(DC2, R1)` 减小到 `6 - 2 = 4`。`c_f(R1, DC2)` 变为 2。\n- `c_f(R1, SC)` 减小到 `2 - 2 = 0`。`c_f(SC, R1)` 增加到 `10 + 2 = 12`。\n\n**第 5 轮迭代：**\n搜索一条新的增广路径。初始化 BFS 队列：`Q = [DC1, DC2]`。\n我们来追踪从 `{DC1, DC2}` 可达的节点。\n- 从 `DC1`，我们可以到达 `R2`（残留容量为 4）。\n- 从 `DC2`，我们可以到达 `R1`（残留容量为 4）和 `R2`（残留容量为 0，无法使用）。\n- 因此，从源点我们可以到达 `R1` 和 `R2`。\n- 从 `R1`，我们能到达 `SC` 吗？不能，`c_f(R1, SC) = 0`。我们能去别处吗？我们可以去 `R2`（`c_f(R1, R2) = 4`）。\n- 从 `R2`，我们能到达 `SC` 吗？不能，`c_f(R2, SC) = 0`。\n- 我们检查路径 `DC2 -> R1 -> R2`。从 `R2`，我们无法到达 `SC`。所以这条路径不能通向汇点。\nBFS 将会探索可达节点的集合：`{DC1, DC2, R1, R2}`。由于在当前残留图中，无法从这些节点中的任何一个到达 `SC`，搜索终止。不再存在增广路径。\n\n算法终止。最大流是所有增广量之和。\n`F_max = 10 + 8 + 1 + 2 = 21`。\n\n这个结果可以通过最大流最小割定理来验证。考虑一个割 `C = ({DC1, DC2, R1, R2}, {SC})`。这个割将源点与汇点分开。该割的容量是从源点侧划分到汇点侧划分的所有边的容量之和。\n割的容量(C) = `c(R1, SC) + c(R2, SC) = 12 + 9 = 21`。\n因为我们找到了一个流量为 21 的流和一个容量为 21 的割，根据最大流最小割定理，这必定是最大流。\n\n最大总数据传输速率是 21 TB/h。", "answer": "$$\\boxed{21}$$", "id": "1504817"}]}