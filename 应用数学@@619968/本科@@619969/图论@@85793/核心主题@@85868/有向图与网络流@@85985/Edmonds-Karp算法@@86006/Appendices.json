{"hands_on_practices": [{"introduction": "理论学习之后，最好的巩固方式莫过于亲手实践。本节将引导您完成一系列精心设计的练习，从基础到进阶，逐步深化您对 Edmonds-Karp 算法的理解。第一个练习将带您手动模拟算法的最初几个步骤，这对于掌握算法的核心机制至关重要。通过在残差图上执行宽度优先搜索（BFS）来寻找增广路径，并更新流量，您将建立起对算法运作方式的直观感受。[@problem_id:1540089]", "problem": "一个情报机构正在分析一个由有向图表示的通信网络。节点是特工，有向边代表安全的单向通信信道。每个信道的容量为每个时间单位恰好一个数据包。该机构希望确定从源特工 'HQ' 到目标特工 'Target' 的数据流。\n\n该网络由以下信道（边）定义：\n- HQ 到 Alpha\n- HQ 到 Bravo\n- Alpha 到 Charlie\n- Alpha 到 Delta\n- Bravo 到 Alpha\n- Bravo 到 Delta\n- Charlie 到 Target\n- Delta 到 Echo\n- Echo 到 Charlie\n- Echo 到 Target\n\n您的任务是使用 Edmonds-Karp 算法分析该流，该算法通过在残差图上进行广度优先搜索 (BFS) 来寻找增广路径。假设当 BFS 必须在距离源点相同距离的多个节点中选择加入队列时，它会按字典序（字母顺序）将它们加入。\n\n计算在完成前两次路径增广后，从 HQ 到 Target 的总流量。", "solution": "我们将此问题建模为一个单位容量的有向网络，并应用 Edmonds-Karp 算法。该算法通过在残差图上进行 BFS 重复寻找从源点到汇点的最短增广路径，并按字典序解决距离相等节点的选择冲突。\n\n所有容量均为 $1$，因此对于残差图中的任何简单 $s$–$t$ 路径，其瓶颈（路径上的最小残差容量）都为 $1$。我们用 $c_{r}(\\cdot,\\cdot)$ 表示残差容量。\n\n初始残差图等于给定的图。从 HQ 开始执行第一次 BFS：\n- 从队列中的 HQ 开始。从 HQ 出发，残差邻居是 Alpha 和 Bravo；按字母顺序将它们入队：先 Alpha，后 Bravo。设置父节点：$\\text{parent}(\\text{Alpha})=\\text{HQ}$，$\\text{parent}(\\text{Bravo})=\\text{HQ}$。\n- Alpha 出队。其残差邻居是 Charlie 和 Delta；将 Charlie 和 Delta 入队。设置 $\\text{parent}(\\text{Charlie})=\\text{Alpha}$，$\\text{parent}(\\text{Delta})=\\text{Alpha}$。\n- Bravo 出队。其邻居 Alpha 和 Delta 已被发现；无变化。\n- Charlie 出队。其残差邻居 Target 被发现；设置 $\\text{parent}(\\text{Target})=\\text{Charlie}$ 并停止 BFS。\n\n第一条增广路径是 HQ → Alpha → Charlie → Target。增广量为\n$$\n\\Delta f_{1}=\\min\\{c_{r}(\\text{HQ},\\text{Alpha}),\\,c_{r}(\\text{Alpha},\\text{Charlie}),\\,c_{r}(\\text{Charlie},\\text{Target})\\}=1.\n$$\n沿这些边更新残差图：每条使用的正向边的残差容量变为 $0$，并创建一条容量为单位值的反向边。\n\n在更新后的残差图上执行第二次 BFS：\n- 从 HQ 出发，只有 Bravo 有正的残差容量；将 Bravo 入队。设置 $\\text{parent}(\\text{Bravo})=\\text{HQ}$。\n- Bravo 出队。其残差邻居是 Alpha 和 Delta；将 Alpha 和 Delta 入队。设置 $\\text{parent}(\\text{Alpha})=\\text{Bravo}$，$\\text{parent}(\\text{Delta})=\\text{Bravo}$。\n- Alpha 出队。其残差邻居包括 Delta（正向）和 HQ（反向），但 Delta 已被发现且 HQ 是源点；没有新节点入队。\n- Delta 出队。其残差邻居 Echo 入队。设置 $\\text{parent}(\\text{Echo})=\\text{Delta}$。\n- Echo 出队。其残差邻居是 Charlie 和 Target；将 Charlie 和 Target 入队。在发现 Target 时，设置 $\\text{parent}(\\text{Target})=\\text{Echo}$ 并停止 BFS。\n\n第二条增广路径是 HQ → Bravo → Delta → Echo → Target。增广量为\n$$\n\\Delta f_{2}=\\min\\{c_{r}(\\text{HQ},\\text{Bravo}),\\,c_{r}(\\text{Bravo},\\text{Delta}),\\,c_{r}(\\text{Delta},\\text{Echo}),\\,c_{r}(\\text{Echo},\\text{Target})\\}=1.\n$$\n\n完成这两次增广后，从 HQ 到 Target 的总流量值为\n$$\n|f|=\\Delta f_{1}+\\Delta f_{2}=1+1=2.\n$$", "answer": "$$\\boxed{2}$$", "id": "1540089"}, {"introduction": "掌握了基本步骤后，下一个练习将揭示 Edmonds-Karp 算法一个更精妙的方面：利用反向边来“撤销”或“重路由”已有的流量。这个思想实验巧妙地构建了一个场景，其中算法找到的第一条增广路径必须经过一条反向边。完成这个练习将帮助您深刻理解，增广路径不仅仅是简单地增加前向流量，更是对整个网络流量分配的优化调整过程。[@problem_id:1540106]", "problem": "考虑一个由有向图 $G = (V, E)$ 表示的流网络，其中顶点集为 $V = \\{s, t, a, b\\}$。顶点 $s$ 是源点，$t$ 是汇点。该网络有五条有向边，其整数容量如下：\n- $c(s, a) = 20$\n- $c(s, b) = 20$\n- $c(b, a) = 20$\n- $c(a, t) = 20$\n- $c(b, t) = 20$\n\n网络中建立了一个初始的非零流 $f$。该流包含沿路径 $s \\rightarrow b \\rightarrow a \\rightarrow t$ 发送的 20 个单位。即 $f(s, b) = 20$，$f(b, a) = 20$，$f(a, t) = 20$。所有其他边上的流量均为零。此初始流的总值为 $|f|=20$。\n\n从这个初始流 $f$ 开始，应用 Edmonds-Karp 算法来寻找从 $s$ 到 $t$ 的最大流。该算法的第一步是使用从源点 $s$ 开始的广度优先搜索 (BFS) 在残差图 $G_f$ 中找到一条增广路径。\n\n确定将沿着这条第一条增广路径发送的流量。以整数形式表示你的答案。", "solution": "对于容量图 $(G,c)$ 上的流 $f$，我们使用标准的残差网络构造方法。对于每条容量为 $c(u,v)$、当前流量为 $f(u,v)$ 的有向边 $(u,v)\\in E$，残差容量定义如下：\n- 正向残差容量 $r_{f}(u,v) = c(u,v) - f(u,v)$。\n- 反向残差容量 $r_{f}(v,u) = f(u,v)$。\n\n给定的容量和初始流为：\n- $c(s,a)=20$, $f(s,a)=0$。\n- $c(s,b)=20$, $f(s,b)=20$。\n- $c(b,a)=20$, $f(b,a)=20$。\n- $c(a,t)=20$, $f(a,t)=20$。\n- $c(b,t)=20$, $f(b,t)=0$。\n\n计算残差容量：\n- 从 $s$：$r_{f}(s,a)=20-0=20$, $r_{f}(s,b)=20-20=0$。\n- 从 $a$：$r_{f}(a,t)=20-20=0$，到 $b$ 的反向残差为 $r_{f}(a,b)=f(b,a)=20$；同样 $r_{f}(a,s)=f(s,a)=0$。\n- 从 $b$：$r_{f}(b,t)=20-0=20$, $r_{f}(b,a)=20-20=0$，到 $s$ 的反向残差为 $r_{f}(b,s)=f(s,b)=20$。\n- 从 $t$：$r_{f}(t,a)=f(a,t)=20$, $r_{f}(t,b)=f(b,t)=0$。\n\nEdmonds-Karp 算法从 $s$ 开始，对具有正残差容量的边运行广度优先搜索 (BFS)。从 $s$ 开始，唯一具有正残差的邻居是通过 $s \\rightarrow a$ 的 $a$。从 $a$ 开始，唯一具有正容量的出向残差边是通过反向边 $a \\rightarrow b$ 到达 $b$ 的。从 $b$ 开始，有一条具有正容量的正向残差边 $b \\rightarrow t$ 到达 $t$。因此，通过 BFS 找到的最短增广路径是：\n$$\ns \\rightarrow a \\rightarrow b \\rightarrow t.\n$$\n增广量是沿此路径的瓶颈（最小残差容量）：\n$$\n\\Delta = \\min\\{r_{f}(s,a),\\, r_{f}(a,b),\\, r_{f}(b,t)\\} = \\min\\{20,\\, 20,\\, 20\\} = 20.\n$$\n因此，第一条增广路径承载了 $20$ 个单位的额外流量。", "answer": "$$\\boxed{20}$$", "id": "1540106"}, {"introduction": "最后一个练习将带您进入一个更具挑战性和现实意义的场景：当网络状况发生变化时，如何高效地更新最大流。这个问题模拟了网络中某条边的容量突然下降的情况，要求您利用残差图的概念来“修复”流量，而不是从头重新计算。这个高级应用不仅展示了最大流理论的强大威力，也体现了算法在动态网络管理中的实际价值，帮助您将理论知识应用于解决复杂问题。[@problem_id:1540154]", "problem": "一个分布式计算网络被建模为一个有向图，其中节点是服务器，边是通信链路。每条链路的容量以太比特每秒 (Tbps) 为单位，表示其最大数据传输速率。一项关键的数据同步任务需要从源服务器 $S$ 向目标服务器 $T$ 发送最大可能的数据速率。\n\n该网络由六个服务器组成：$S, A, B, C, D, T$。链路及其容量定义如下：\n- $c(S, A) = 10$\n- $c(S, B) = 10$\n- $c(A, B) = 1$\n- $c(A, C) = 7$\n- $c(B, D) = 6$\n- $c(C, D) = 4$\n- $c(C, T) = 9$\n- $c(D, T) = 12$\n\n使用 Edmonds-Karp 算法的初步分析确定，从 $S$ 到 $T$ 的最大流（数据速率）为 13 Tbps。此最大流下每条链路上的具体流量值 $f(u, v)$ 如下：\n- $f(S, A) = 7$\n- $f(S, B) = 6$\n- $f(A, C) = 7$\n- $f(B, D) = 6$\n- $f(C, T) = 7$\n- $f(D, T) = 6$\n所有其他链路（如 $(A,B)$ 和 $(C,D)$）上的流量为 0。\n\n突然，服务器 $B$ 和 $D$ 之间的主链路遭到物理损坏，其容量 $c(B, D)$ 从 6 Tbps 灾难性地降至 0 Tbps。为了避免从头开始重新运行整个资源密集型的最大流计算，您需要设计一种更有效的方法来确定新的最大流。\n\n当链路 $(B,D)$ 的容量减少后，从 $S$ 到 $T$ 的新最大流值是多少？以 Tbps 为单位表示您的答案。", "solution": "该问题要求计算网络中单条边容量减少后的新最大流。我们已知初始网络、其容量以及一个值为 $|f| = 13$ Tbps 的特定最大流分布 $f$。\n\n**步骤 1：识别流量违规**\n边 $(u, v) = (B, D)$ 的容量从 $c(B, D) = 6$ 减少到 $c'(B, D) = 0$。\n这条边上的初始流量为 $f(B, D) = 6$。\n新容量小于当前分配给它的流量，这使得流 $f$ 变得无效。违规量，即需要移除或重新路由的超额流量为：\n$$ \\Delta = f(B, D) - c'(B, D) = 6 - 0 = 6 \\text{ Tbps} $$\n\n**步骤 2：理解更新算法**\n处理容量减少的标准高效算法包括调整流量以恢复有效性，然后确定新的最大流值。当我们将边 $(u,v)$ 上的流量减少 $\\Delta$ 以匹配新容量时，我们破坏了流守恒。\n我们定义一个新的（无效）流函数 $f'$，设置 $f'(B,D) = c'(B,D) = 0$，对于所有其他边，则有 $f'(x,y) = f(x,y)$。\n让我们检查节点 $B$ 和 $D$ 的流守恒。节点 $w$ 的净流量为 $E(w) = \\sum_{x} f(x,w) - \\sum_{y} f(w,y)$。对于一个有效的流，所有 $w \\ne S, T$ 的节点都有 $E(w)=0$。\n- 在节点 $B$：总流入量为 $f(S,B) + f(A,B) = 6+0 = 6$。原始流出量为 $f(B,D)=6$。新的流出量为 $f'(B,D)=0$。现在节点 $B$ 的净流量为 $6 - 0 = 6$。这是一个 6 的超额。\n- 在节点 $D$：原始流入量为 $f(B,D) + f(C,D) = 6+0 = 6$。新的流入量为 $f'(B,D) + f'(C,D) = 0+0 = 0$。流出量为 $f(D,T)=6$。现在节点 $D$ 的净流量为 $0-6 = -6$。这是一个 6 的亏空。\n\n为了恢复有效流，我们必须解决这种不平衡。节点 $B$ 处的 $\\Delta=6$ 的超额必须“返回”到源点 $S$。节点 $D$ 处的 $\\Delta=6$ 的亏空必须从汇点 $T$ “填充”。网络中 $S-T$ 流的总减少量将由能够成功解决的这种不平衡的数量决定。\n\n算法如下：\n1. 通过设置 $f'(u,v) = c'(u,v)$ 创建一个“不平衡”流 $f'$。这在 $u$ 处产生 $\\Delta$ 的超额，在 $v$ 处产生 $\\Delta$ 的亏空。\n2. 在对应于这个不平衡流的残留图 $G_{f'}$ 中，计算可以从超额节点 $u$ 发送回源点 $S$ 的最大流量。设此值为 $\\delta_{u \\to S}$。\n3. 在同一个残留图 $G_{f'}$ 中，计算可以从汇点 $T$ 发送到亏空节点 $v$ 的最大流量。设此值为 $\\delta_{T \\to v}$。\n4. 可以成功抵消的流量不平衡量 $\\Delta$ 是 $\\min(\\delta_{u \\to S}, \\delta_{T \\to v})$。网络总流量的真实减少量是 $\\Delta$ 中 *无法* 通过这些局部调整来抵消的部分。然而，问题可以简化：总流量值必须精确地减少从系统中移除的流量。这个量是我们从超额节点路由回源点的流量。我们可以移除的流量受到亏空节点可以从汇点获取的流量的限制。因此，减少量是 $\\min(\\Delta, \\delta_{u \\to S}, \\delta_{T \\to v}) = \\Delta$。在我们的案例中，超额和亏空都是 $\\Delta$，因此减少量是 $\\min(\\Delta, \\delta_{u \\to S}, \\delta_{T \\to v}) = \\Delta$。我们只需要检查从 $u \\to S$ 发送 $\\Delta$ 和从 $T \\to v$ 发送 $\\Delta$ 是否可能。\n\n因此，总最大流值的减少量是 $\\Delta_{reduction} = \\Delta=6$，前提是我们能将 6 个单位从 $B \\to S$ 推送，并将 6 个单位从 $T \\to D$ 推送。如果不能，则减少量更小。让我们为这两个子问题找到最大流。\n\n**步骤 3：构建残留图**\n残留图 $G_f$ 是根据原始流 $f$ 构建的。不平衡流 $f'$ 与 $f$ 相同，除了 $f(B,D)$ 变为 0。残留图的容量对于前向边是 $c_f(x,y) = c(x,y) - f(x,y)$，对于后向边是 $c_f(y,x) = f(x,y)$。\n- **前向残留容量：**\n  $c_f(S, A) = 10-7=3$\n  $c_f(S, B) = 10-6=4$\n  $c_f(A, B) = 1-0=1$\n  $c_f(A, C) = 7-7=0$\n  $c_f(B, D) = 6-6=0$ (这是对于原始 $f$。对于 $f'$，这变为 $0-0=0$)\n  $c_f(C, D) = 4-0=4$\n  $c_f(C, T) = 9-7=2$\n  $c_f(D, T) = 12-6=6$\n- **后向残留容量：**\n  $c_f(A, S) = 7$\n  $c_f(B, S) = 6$\n  $c_f(C, A) = 7$\n  $c_f(D, B) = 6$\n  $c_f(T, C) = 7$\n  $c_f(T, D) = 6$\n\n**步骤 4：计算重路由流量**\n我们在节点 $B$ 有 $\\Delta=6$ 的超额，在节点 $D$ 有 $\\Delta=6$ 的亏空。\n\n**子问题 1：在 $G_f$ 中从 B 到 S 的最大流。**\n我们需要找到从 $B$ 到 $S$ 的路径及其容量。\n- 路径 1：一条直接的后向边 $B \\to S$。其容量为 $c_f(B, S) = f(S, B) = 6$。\n- 还有其他路径吗？让我们检查从 $B$ 开始的路径。\n  - $B \\to A$：这是一条后向边。容量 $c_f(B,A) = f(A,B) = 0$。此路径被阻塞。\n  - $B \\to D$：容量 $c_f(B,D) = 0$。被阻塞。\n没有其他从 $B$ 到 $S$ 的简单路径。从 $B$ 到 $S$ 的最大流是 $\\delta_{B \\to S} = 6$。\n\n**子问题 2：在 $G_f$ 中从 T 到 D 的最大流。**\n我们需要找到从 $T$ 到 $D$ 的路径及其容量。\n- 路径 1：一条直接的后向边 $T \\to D$。其容量为 $c_f(T, D) = f(D, T) = 6$。\n- 路径 2：$T \\to C \\to D$。\n  - 边 $T \\to C$ 是一条后向边，容量为 $c_f(T, C) = f(C, T) = 7$。\n  - 边 $C \\to D$ 是一条前向边，容量为 $c_f(C, D) = c(C, D) - f(C, D) = 4 - 0 = 4$。\n  - 此路径的瓶颈容量为 $\\min(7, 4) = 4$。\n- 路径 $T \\to D$ 和 $T \\to C \\to D$ 是边不相交的。我们可以将它们的容量相加来找到最大流。\n- 从 $T$ 到 $D$ 的最大流是 $\\delta_{T \\to D} = 6 + 4 = 10$。\n\n**步骤 5：计算新最大流值**\n我们在节点 $B$ 有 $\\Delta=6$ 的超额流量需要路由到 $S$。我们发现可以从 $B$ 向 $S$ 路由多达 $\\delta_{B \\to S}=6$ 的流量。由于 $6 \\le 6$，我们可以完全解决 $B$ 处的超额问题。\n我们在节点 $D$ 有 $\\Delta=6$ 的流量亏空需要从 $T$ 填充。我们发现可以从 $T$ 向 $D$ 提供多达 $\\delta_{T \\to D}=10$ 的流量。由于 $6 \\le 10$，我们可以完全填补 $D$ 处的亏空。\n\n因为我们可以完全解决 $\\Delta=6$ 的不平衡，所以网络总流量必须精确地减少这个数量。\n- 原始最大流值：$|f| = 13$ Tbps。\n- 减少量：$\\Delta_{reduction} = \\Delta = 6$ Tbps。\n- 新最大流值：$|f'| = |f| - \\Delta_{reduction} = 13 - 6 = 7$ Tbps。\n\n其逻辑是，先前通过 S-B-D-T 路径的 6 个单位流量现在被阻塞了。我们能够将 6 个单位从 B “返回”到源点 S，并从汇点 T “拉取” 6 个单位到 D，从而有效地抵消了该路径的贡献。新的最大流将是剩下的部分，这主要是通过 S-A-C-T 路径的流量，其值为 7。\n\n最终答案检查：S-A-C-T 路径的流量为 7。S-B-D-T 路径已中断。新的最大流为 7 是合理的。我们应该检查是否创建了任何新的增广路径。从 S-B-D-T 路径移除 6 个单位流量后，残留容量会发生变化，但 S-A-C-T 路径已经在瓶颈容量 $c(A,C)=7$ 处饱和。不太可能出现具有显著容量的新路径，因此预期答案是 7。", "answer": "$$\\boxed{7}$$", "id": "1540154"}]}