{"hands_on_practices": [{"introduction": "我们从一个基础练习开始，这个练习旨在检验你对拓扑排序核心定义的理解。在实际项目中，我们常常需要验证一个给定的任务序列是否满足所有的前置依赖关系。通过解决这个问题，你将练习如何系统地检查一个序列，确保对于图中的每一条有向边 $(u, v)$，顶点 $u$ 都出现在顶点 $v$ 之前。[@problem_id:1549706]", "problem": "一个软件项目被划分为七个不同的模块：Setup (S)、Core (C)、User Interface (UI)、Networking (N)、Database (D)、Analytics (A) 和 Logging (L)。由于存在编译依赖关系，一些模块必须在其他模块之前编译。完整的直接依赖关系如下所示：\n- `Core` 模块依赖于 `Setup` 模块。\n- `UI` 模块依赖于 `Core` 模块。\n- `Networking` 模块依赖于 `Core` 模块。\n- `Database` 模块同时依赖于 `UI` 和 `Networking` 模块。\n- `Analytics` 模块依赖于 `Networking` 模块。\n- `Logging` 模块同时依赖于 `Database` 和 `Analytics` 模块。\n\n一个构建序列是所有七个模块的一种线性排序。一个构建序列是有效的，当且仅当对于每个依赖关系，被依赖的模块都出现在依赖它的模块之前。\n\n你的任务是确定下列提议的构建序列中哪些是有效的。\n\nA. `Setup, Core, UI, Networking, Analytics, Database, Logging`\n\nB. `Setup, Core, Database, UI, Networking, Analytics, Logging`\n\nC. `Setup, Core, Networking, UI, Analytics, Database, Logging`\n\nD. `Setup, Core, UI, Networking, Logging, Database, Analytics`\n\nE. `Setup, Networking, Core, UI, Analytics, Database, Logging`", "solution": "设各模块分别由 $S$ (Setup)、$C$ (Core)、$UI$ (User Interface)、$N$ (Networking)、$D$ (Database)、$A$ (Analytics) 和 $L$ (Logging) 表示。依赖约束可以写成以下严格不等式：\n$$S<C,$$\n$$C<UI,\\quad C<N,$$\n$$UI<D,\\quad N<D,$$\n$$N<A,$$\n$$D<L,\\quad A<L.$$\n一个构建序列是有效的，当且仅当所有这些不等式相对于序列中各模块的位置都成立。对于一个给定的提议序列，我们将模块 $X$ 在该序列中的位置索引定义为 $p(X)$（$p(X)$ 的值越小，表示在顺序中越靠前）。该序列是有效的，当且仅当每个列出的不等式都由相应的 $p(\\cdot)$ 值满足。\n\n序列 A: Setup, Core, UI, Networking, Analytics, Database, Logging。\n因此 $p(S)=1$, $p(C)=2$, $p(UI)=3$, $p(N)=4$, $p(A)=5$, $p(D)=6$, $p(L)=7$。检查：\n$$p(S)<p(C):\\ 1<2,$$\n$$p(C)<p(UI):\\ 2<3,\\quad p(C)<p(N):\\ 2<4,$$\n$$p(UI)<p(D):\\ 3<6,\\quad p(N)<p(D):\\ 4<6,$$\n$$p(N)<p(A):\\ 4<5,$$\n$$p(D)<p(L):\\ 6<7,\\quad p(A)<p(L):\\ 5<7.$$\n所有约束都成立，所以A是有效的。\n\n序列 B: Setup, Core, Database, UI, Networking, Analytics, Logging。\n因此 $p(S)=1$, $p(C)=2$, $p(D)=3$, $p(UI)=4$, $p(N)=5$, $p(A)=6$, $p(L)=7$。检查 $p(UI)<p(D)$ 要求 $4<3$，这是错误的。因此B违反了 $UI<D$（也违反了 $N<D$），所以B是无效的。\n\n序列 C: Setup, Core, Networking, UI, Analytics, Database, Logging。\n因此 $p(S)=1$, $p(C)=2$, $p(N)=3$, $p(UI)=4$, $p(A)=5$, $p(D)=6$, $p(L)=7$。检查：\n$$p(S)<p(C):\\ 1<2,$$\n$$p(C)<p(UI):\\ 2<4,\\quad p(C)<p(N):\\ 2<3,$$\n$$p(UI)<p(D):\\ 4<6,\\quad p(N)<p(D):\\ 3<6,$$\n$$p(N)<p(A):\\ 3<5,$$\n$$p(D)<p(L):\\ 6<7,\\quad p(A)<p(L):\\ 5<7.$$\n所有约束都成立，所以C是有效的。\n\n序列 D: Setup, Core, UI, Networking, Logging, Database, Analytics。\n因此 $p(S)=1$, $p(C)=2$, $p(UI)=3$, $p(N)=4$, $p(L)=5$, $p(D)=6$, $p(A)=7$。检查 $p(D)<p(L)$ 要求 $6<5$，这是错误的；并且 $p(A)<p(L)$ 要求 $7<5$，这也是错误的。因此D是无效的。\n\n序列 E: Setup, Networking, Core, UI, Analytics, Database, Logging。\n因此 $p(S)=1$, $p(N)=2$, $p(C)=3$, $p(UI)=4$, $p(A)=5$, $p(D)=6$, $p(L)=7$。检查 $p(C)<p(N)$ 要求 $3<2$，这是错误的。因此E是无效的。\n\n因此，选项中有效的构建序列是A和C。", "answer": "$$\\boxed{AC}$$", "id": "1549706"}, {"introduction": "在验证了一个序列的有效性之后，下一步是学习如何主动构建一个序列。当有多个任务可以同时执行时，我们需要一个明确的规则来选择下一个任务。本练习引入了“字典序最小”这一常见规则，它要求你在任何决策点选择字母顺序最靠前的任务，这能帮助你模拟 Kahn 算法的执行过程，并理解如何通过特定标准从多个可能的拓扑排序中选出唯一的一个。[@problem_id:1549700]", "problem": "一个项目经理正在规划建立一个新的数据分析环境的任务序列。为确保安装顺利，某些任务必须在其他任务之前完成。团队希望遵循一个字典序最小的执行计划，这意味着在任何一步，如果存在多个可以执行的任务，他们将选择按字母顺序排在最前面的那个。\n\n任务由单个大写字母标识：\n- (A) 安装 Pandas\n- (G) 安装 Git\n- (J) 安装 Jupyter Notebook\n- (M) 安装 Matplotlib\n- (N) 安装 NumPy\n- (P) 安装 Python\n- (S) 安装 Scikit-learn\n- (V) 建立虚拟环境\n\n先决条件约束如下：\n1.  安装 Python (P) 必须在建立虚拟环境 (V) 之前完成。\n2.  安装 Python (P) 必须在安装 Jupyter Notebook (J) 之前完成。\n3.  建立虚拟环境 (V) 必须在安装 NumPy (N) 之前完成。\n4.  建立虚拟环境 (V) 必须在安装 Pandas (A) 之前完成。\n5.  建立虚拟环境 (V) 必须在安装 Matplotlib (M) 之前完成。\n6.  安装 NumPy (N) 必须在安装 Scikit-learn (S) 之前完成。\n7.  安装 Pandas (A) 必须在安装 Scikit-learn (S) 之前完成。\n\n没有其他依赖关系。“安装 Git” (G) 没有任何先决条件，也不是任何其他任务的先决条件。\n\n以下哪个序列代表了正确的字典序最小的任务顺序？\n\nA. G, P, J, V, A, M, N, S\n\nB. P, G, J, V, N, A, S, M\n\nC. G, P, V, J, A, M, N, S\n\nD. P, G, V, A, N, S, J, M\n\nE. G, P, J, V, M, N, A, S", "solution": "我们将任务建模为一个有向无环图，并寻找字典序最小的拓扑排序。在每一步中，从所有没有未满足先决条件的任务中，我们选择按字母顺序排在最前面的任务。\n\n依赖关系：\n- P 在 V 和 J 之前。\n- V 在 N、A、M 之前。\n- N 和 A 都在 S 之前。\n- G 是独立的（没有先决条件，也不是其他任务的先决条件）。\n\n初始可用任务（没有先决条件）：G 和 P。字典序最小的是 G，所以首先选择 G。\n完成 G 后，可用的任务仍然是 P。接着选择 P。\n完成 P 后，新的可用任务是 J 和 V（都需要 P）。字典序最小的是 J。接着选择 J。\n完成 J 后，可用任务包括 V。接着选择 V。\n完成 V 后，新的可用任务是 A、M、N（都需要 V）。字典序最小的是 A。接着选择 A。\n完成 A 后，可用任务是 M 和 N。字典序最小的是 M。接着选择 M。\n完成 M 后，可用任务是 N。接着选择 N。\n完成 N 后，由于 A 和 N 都已完成，S 变为可用。最后选择 S。\n\n这得出的序列是：G, P, J, V, A, M, N, S。检查约束条件：\n- P 在 V 和 J 之前：满足。\n- V 在 N、A、M 之前：满足。\n- N 在 S 之前和 A 在 S 之前：满足。\n- G 不受约束：放在开头是有效的。\n该序列与选项 A 匹配。", "answer": "$$\\boxed{A}$$", "id": "1549700"}, {"introduction": "最后，我们将超越构建单一序列，深入探索有向无环图 (DAG) 的内在结构属性。一个图可能存在多种有效的拓扑排序，但哪些节点可以作为起点，哪些节点可以作为终点呢？这个问题挑战你识别出所有可能的起始节点和结束节点，这直接关联到“源节点”（入度为零）和“汇节点”（出度为零）的核心概念，加深你对图结构如何限制求解空间的理解。[@problem_id:1549724]", "problem": "考虑一个有向无环图 (DAG)，它由一组顶点 $V = \\{A, B, C, D, E, F, G, H\\}$ 和一组有向边 $E = \\{(A, B), (A, C), (B, D), (C, D), (D, F), (E, C), (E, G), (G, H)\\}$ 定义。一个 DAG 的拓扑排序是其顶点的一种线性排序，使得对于每条从顶点 $u$ 到顶点 $v$ 的有向边，顶点 $u$ 都在排序中位于顶点 $v$ 之前。\n\n设 $S_{first}$ 是在给定图的至少一个有效拓扑排序中可以出现在第一位的所有顶点的集合。设 $S_{last}$ 是在至少一个有效拓扑排序中可以出现在最后一位的所有顶点的集合。\n\n从以下选项中确定正确的 $S_{first}$ 和 $S_{last}$ 集合。\n\nA. $S_{first} = \\{A, E\\}$ and $S_{last} = \\{F, H\\}$\n\nB. $S_{first} = \\{A\\}$ and $S_{last} = \\{H\\}$\n\nC. $S_{first} = \\{A, E\\}$ and $S_{last} = \\{D, F, H\\}$\n\nD. $S_{first} = \\{E\\}$ and $S_{last} = \\{F\\}$\n\nE. $S_{first} = \\{A, B, E\\}$ and $S_{last} = \\{D, F, H\\}$", "solution": "拓扑排序是与所有有向边一致的线性顺序。这里使用了两个基本属性：\n1) 在任何拓扑排序中，第一个顶点必须是源点，即没有入边的顶点。形式上，如果一个顶点 $v$ 出现在第一位，并且存在一条边 $(u,v)$，那么 $u$ 必须出现在 $v$ 之前，这是不可能的。因此，只有入度为 $\\deg^{-}(v)=0$ 的顶点才能排在第一位。\n2) 在任何拓扑排序中，最后一个顶点必须是汇点，即没有出边的顶点。如果一个顶点 $v$ 出现在最后一位，并且存在一条边 $(v,w)$，那么 $v$ 必须出现在 $w$ 之前，这是不可能的。因此，只有出度为 $\\deg^{+}(v)=0$ 的顶点才能排在最后一位。\n\n使用 $E=\\{(A,B),(A,C),(B,D),(C,D),(D,F),(E,C),(E,G),(G,H)\\}$ 计算入度：\n- $\\deg^{-}(A)=0$ 因为没有边进入 $A$。\n- $\\deg^{-}(B)=1$ 来自 $(A,B)$。\n- $\\deg^{-}(C)=2$ 来自 $(A,C)$ 和 $(E,C)$。\n- $\\deg^{-}(D)=2$ 来自 $(B,D)$ 和 $(C,D)$。\n- $\\deg^{-}(E)=0$ 因为没有边进入 $E$。\n- $\\deg^{-}(F)=1$ 来自 $(D,F)$。\n- $\\deg^{-}(G)=1$ 来自 $(E,G)$。\n- $\\deg^{-}(H)=1$ 来自 $(G,H)$。\n\n因此，源点恰好是 $\\{A,E\\}$，所以 $S_{first}=\\{A,E\\}$。每个源点都可以出现在第一位，方法是在 Kahn 算法中将它选为初始顶点。\n\n计算出度：\n- $\\deg^{+}(A)=2$ 指向 $B$ 和 $C$。\n- $\\deg^{+}(B)=1$ 指向 $D$。\n- $\\deg^{+}(C)=1$ 指向 $D$。\n- $\\deg^{+}(D)=1$ 指向 $F$。\n- $\\deg^{+}(E)=2$ 指向 $C$ 和 $G$。\n- $\\deg^{+}(F)=0$。\n- $\\deg^{+}(G)=1$ 指向 $H$。\n- $\\deg^{+}(H)=0$。\n\n因此，汇点恰好是 $\\{F,H\\}$，所以 $S_{last}=\\{F,H\\}$。任何汇点都可以放在最后，因为对于一个汇点 $s$，对 $V\\setminus\\{s\\}$ 的任何拓扑排序，在其后附加 $s$ 仍然是有效的（因为没有从 $s$ 出发的边会违反排序）。\n\n与选项比较，这对应于选项 A。", "answer": "$$\\boxed{A}$$", "id": "1549724"}]}