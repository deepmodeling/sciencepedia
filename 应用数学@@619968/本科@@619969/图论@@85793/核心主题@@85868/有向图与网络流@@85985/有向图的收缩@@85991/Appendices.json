{"hands_on_practices": [{"introduction": "理论学习之后，最好的巩固方式就是亲自动手。这个基础练习将引导你完成一个完整的浓缩图构建过程。从一个给定的具体有向图开始，你将首先识别出其所有的强连通分量（SCCs），然后根据这些分量之间的连接关系，构建出最终的浓缩图，从而直观地理解浓缩的核心思想。[@problem_id:1491380]", "problem": "考虑一个有向图（digraph）$G$，其顶点集为 $V = \\{v_1, v_2, v_3, v_4, v_5\\}$，边集为 $E = \\{(v_1, v_2), (v_2, v_3), (v_3, v_1), (v_1, v_4), (v_4, v_5), (v_2, v_5)\\}$。\n\n有向图的强连通分量 (SCC) 是一个极大子图，其中对于子图中的每一对有序顶点 $(u, w)$，都存在一条从 $u$ 到 $w$ 的有向路径。\n\n$G$ 的浓缩图，记为 $G^{SCC}$，是按如下方式构造的一个有向图：\n1. $G^{SCC}$ 的每个顶点代表 $G$ 的一个强连通分量。\n2. 在 $G^{SCC}$ 中，从代表强连通分量 $C_i$ 的顶点到代表强连通分量 $C_j$ 的顶点（当 $i \\neq j$ 时）存在一条边，当且仅当在 $G$ 中存在至少一条从 $C_i$ 中的一个顶点到 $C_j$ 中的一个顶点的边。\n\n求浓缩图 $G^{SCC}$ 中的总边数。", "solution": "我们首先根据定义来确定 $G$ 的强连通分量 (SCCs)：一个子图是强连通的，如果对于其中的每一对有序顶点 $(u,w)$，都存在一条从 $u$ 到 $w$ 的有向路径，并且该子图是满足此性质的极大子图。\n\n考虑顶点 $v_{1}, v_{2}, v_{3}$ 和边 $(v_{1},v_{2})$, $(v_{2},v_{3})$, $(v_{3},v_{1})$。它们构成一个有向环，因此对于任意 $u,w \\in \\{v_{1},v_{2},v_{3}\\}$，都存在一条从 $u$ 到 $w$ 的有向路径。所以，\n$$\nC_{1}=\\{v_{1},v_{2},v_{3}\\}\n$$\n是强连通的。它是极大的，因为 $v_{4}$ 和 $v_{5}$ 都无法到达 $v_{1},v_{2},v_{3}$ 中的任何一个顶点（$v_5$ 没有出边，$v_4$ 只有边 $(v_4, v_5)$），所以加入 $v_{4}$ 或 $v_{5}$ 会破坏强连通性。\n\n接下来，考察 $v_4$ 和 $v_5$。存在一条边 $(v_4,v_5)$，所以 $v_4$ 可以到达 $v_5$，但不存在从 $v_5$ 到 $v_4$ 的边或任何路径。此外，$v_5$ 没有任何出边。因此，$\\{v_{4},v_{5}\\}$、$\\{v_{4}\\}\\cup C_{1}$ 和 $\\{v_{5}\\}\\cup C_{1}$ 都不是强连通的。所以剩下的强连通分量是单元素集合：\n$$\nC_{2}=\\{v_{4}\\}, \\quad C_{3}=\\{v_{5}\\}.\n$$\n\n因此浓缩图的顶点集是\n$$\nV^{SCC}=\\{C_{1},C_{2},C_{3}\\}.\n$$\n\n根据浓缩图边的定义，对于 $i \\neq j$，当且仅当存在 $(u,w) \\in E$ 且 $u \\in C_i$ 和 $w \\in C_j$ 时，在 $G^{SCC}$ 中才存在一条边 $(C_i, C_j)$。我们检查 $G$ 中所有分量间的边：\n- 从 $C_{1}$ 到 $C_{2}$：存在边 $(v_{1},v_{4})$，所以 $(C_{1},C_{2}) \\in E^{SCC}$。\n- 从 $C_{1}$ 到 $C_{3}$：存在边 $(v_{2},v_{5})$，所以 $(C_{1},C_{3}) \\in E^{SCC}$。\n- 从 $C_{2}$ 到 $C_{3}$：存在边 $(v_{4},v_{5})$，所以 $(C_{2},C_{3}) \\in E^{SCC}$。\n- 不存在从 $C_{2}$ 到 $C_{1}$、从 $C_{3}$ 到 $C_{1}$ 或从 $C_{3}$ 到 $C_{2}$ 的边，因为在 $E$ 中不存在这样的边。\n\n因此，\n$$\nE^{SCC}=\\{(C_{1},C_{2}),\\,(C_{1},C_{3}),\\,(C_{2},C_{3})\\},\n$$\n浓缩图 $G^{SCC}$ 的总边数为\n$$\n|E^{SCC}|=3.\n$$", "answer": "$$\\boxed{3}$$", "id": "1491380"}, {"introduction": "掌握了从一个图得到其浓缩图的方法后，让我们来挑战一个逆向工程问题。这个练习要求你像一个系统设计师一样思考：不再是分析一个已有的图，而是从一个期望的浓缩结构——一个具有单一源头（source）和两个汇点（sink）的“V”形结构——出发，去构造一个满足条件的原始图。这个任务将深化你对强连通分量内部结构及其相互连接如何决定最终浓缩形态的理解。[@problem_id:1491379]", "problem": "在图论中，一个有向图（digraph）$G$ 由一个顶点集 $V$ 和一个称为边 $E$ 的顶点有序对集合组成。有向图的一个强连通分量（SCC）是一个极大的顶点集合 $C \\subseteq V$，使得对于 $C$ 中的每一对顶点 $u, v \\in C$，都存在一条从 $u$ 到 $v$ 的有向路径，以及一条从 $v$ 到 $u$ 的有向路径。\n\n有向图 $G$ 的浓缩图（condensation）是一个新的有向图 $G_{SCC}$，它是通过将 $G$ 的每个强连通分量收缩（contract）成单个顶点来构建的。具体来说，如果 $C_1, C_2, \\dots, C_k$ 是 $G$ 的强连通分量，那么 $G_{SCC}$ 的顶点是 $\\{v_1, v_2, \\dots, v_k\\}$，其中 $v_i$ 对应于 $C_i$。在 $G_{SCC}$ 中，从 $v_i$ 到 $v_j$（对于 $i \\neq j$）存在一条有向边，当且仅当在原图 $G$ 中存在一条边 $(u,w)$，其中 $u \\in C_i$ 且 $w \\in C_j$。\n\n考虑一个有向图 $G = (V, E)$，其顶点集为 $V = \\{1, 2, 3, 4, 5, 6, 7\\}$。下列哪个边集 $E$ 会构成一个有向图，其浓缩图恰好有三个顶点，其中一个顶点是源点（没有入边），另外两个顶点是汇点（没有出边）？\n\nA. $E = \\{(1,2), (2,3), (3,1), (4,5), (5,4), (6,7), (7,6), (1,4), (2,6)\\}$\n\nB. $E = \\{(1,2), (2,3), (3,4), (4,5), (5,6), (6,7), (7,1)\\}$\n\nC. $E = \\{(1,2), (2,3), (3,1), (4,5), (5,4), (6,7), (7,6), (1,4), (4,6)\\}$\n\nD. $E = \\{(1,2), (1,3), (4,5), (5,4), (6,7), (7,6), (2,4), (3,6)\\}$", "solution": "我们需要一个有向图，其浓缩图恰好有三个顶点，其中一个是源点（没有来自其他强连通分量的入边），另外两个是汇点（没有指向其他强连通分量的出边）。这要求原图 $G=(V,E)$ 恰好有三个强连通分量（SCC），并且在这些强连通分量之间，仅有的跨分量边是从一个强连通分量分别指向另外两个，而没有其他跨分量边。\n\n通过识别强连通分量和跨分量边来分析每个选项。\n\n选项A：$E=\\{(1,2),(2,3),(3,1),(4,5),(5,4),(6,7),(7,6),(1,4),(2,6)\\}$。\n- 边 $(1,2),(2,3),(3,1)$ 在 $\\{1,2,3\\}$ 上构成一个有向环，因此 $C_{1}=\\{1,2,3\\}$ 是一个强连通分量。\n- 边 $(4,5),(5,4)$ 构成强连通分量 $C_{2}=\\{4,5\\}$。\n- 边 $(6,7),(7,6)$ 构成强连通分量 $C_{3}=\\{6,7\\}$。\n- 跨分量边：$(1,4)$ 产生 $C_{1}\\to C_{2}$；$(2,6)$ 产生 $C_{1}\\to C_{3}$。没有从 $C_{2}$ 或 $C_{3}$ 指向任何其他强连通分量的边，也没有从其他强连通分量进入 $C_{1}$ 的边。\n- 因此，浓缩图 $G_{SCC}$ 有三个顶点 $v_{1},v_{2},v_{3}$，分别对应 $C_{1},C_{2},C_{3}$，边为 $v_{1}\\to v_{2}$ 和 $v_{1}\\to v_{3}$。于是，$v_{1}$ 的入度为 $0$（一个源点），$v_{2},v_{3}$ 的出度为 $0$（汇点）。这符合要求。\n\n选项B：$E=\\{(1,2),(2,3),(3,4),(4,5),(5,6),(6,7),(7,1)\\}$。\n- 这些边在所有顶点 $\\{1,2,3,4,5,6,7\\}$ 上构成一个单一的有向环，所以整个图是一个强连通分量。\n- 浓缩图只有一个顶点，而不是三个。这不符合要求。\n\n选项C：$E=\\{(1,2),(2,3),(3,1),(4,5),(5,4),(6,7),(7,6),(1,4),(4,6)\\}$。\n- 强连通分量与选项A中相同：$C_{1}=\\{1,2,3\\}$，$C_{2}=\\{4,5\\}$，$C_{3}=\\{6,7\\}$。\n- 跨分量边：$(1,4)$ 产生 $C_{1}\\to C_{2}$；$(4,6)$ 产生 $C_{2}\\to C_{3}$。\n- 浓缩图是一条路径 $v_{1}\\to v_{2}\\to v_{3}$，产生恰好一个源点（$v_{1}$）和一个汇点（$v_{3}$），而 $v_{2}$ 既不是源点也不是汇点。这不符合要求里的两个汇点。\n\n选项D：$E=\\{(1,2),(1,3),(4,5),(5,4),(6,7),(7,6),(2,4),(3,6)\\}$。\n- $(4,5),(5,4)$ 得到强连通分量 $C_{2}=\\{4,5\\}$。\n- $(6,7),(7,6)$ 得到强连通分量 $C_{3}=\\{6,7\\}$。\n- 顶点 $1$ 只有指向 $2$ 和 $3$ 的出边，没有路径返回；因此 $1$ 自成一个强连通分量 $C_{1}=\\{1\\}$。\n- 顶点 $2$ 有一条指向 $4$ 的边，没有路径返回；因此 $2$ 自成一个强连通分量 $C_{4}=\\{2\\}$。\n- 顶点 $3$ 有一条指向 $6$ 的边，没有路径返回；因此 $3$ 自成一个强连通分量 $C_{5}=\\{3\\}$。\n- 因此，共有五个强连通分量，而不是三个。这不符合要求。\n\n只有选项A能产生恰好三个强连通分量，其浓缩图有一个源点和两个汇点。", "answer": "$$\\boxed{A}$$", "id": "1491379"}, {"introduction": "在真实世界的应用中，例如分析大型代码库的依赖关系或网页链接网络时，算法的效率至关重要。这个问题将我们的焦点从图的结构转移到计算的实践层面。你将比较使用两种常见数据结构——邻接矩阵和邻接表——来表示图时，构建其浓缩图的渐近时间复杂度，从而将图论的理论概念与软件工程的实际考量联系起来。[@problem_id:1491385]", "problem": "一个软件工程团队正在设计一个系统，用于分析大型代码库中的依赖层次结构。依赖结构被建模为一个有向图 $G = (V, E)$，其中顶点集合 $V$ 代表软件模块，一条有向边 $(u, v) \\in E$ 表示模块 $u$ 对模块 $v$ 有依赖关系。模块的数量为 $n = |V|$，依赖关系的数量为 $m = |E|$。\n\n为了简化整体结构并识别相互依赖的模块组，该团队计划计算 $G$ 的浓缩图（condensation graph）。浓缩图是通过将 $G$ 的每个强连通分量（Strongly Connected Components, SCCs）视为单个顶点来形成的。如果在原图 $G$ 中，存在至少一条从第一个 SCC 中的模块到第二个 SCC 中的模块的边，那么在浓缩图中，这两个 SCC 对应的顶点之间就存在一条边。\n\n两名初级工程师提出了不同的实现方法。\n-   **提案1**：使用邻接矩阵表示图 $G$。\n-   **提案2**：使用邻接表表示图 $G$。\n\n你的任务是，对于每种提案，使用标准算法（例如，用于寻找 SCC 的 Tarjan 算法或 Kosaraju 算法）来确定构建浓缩图的最紧的最坏情况渐近时间复杂度。设 $T_{matrix}$ 为提案1的时间复杂度，$T_{list}$ 为提案2的时间复杂度。\n\n以下哪个选项正确地表示了复杂度对 $(T_{matrix}, T_{list})$？\n\nA. $(T_{matrix} = O(n^2), T_{list} = O(n+m))$\n\nB. $(T_{matrix} = O(n+m), T_{list} = O(n^2))$\n\nC. $(T_{matrix} = O(n^3), T_{list} = O(nm))$\n\nD. $(T_{matrix} = O(n^2), T_{list} = O(n \\log n + m))$", "solution": "设 $G=(V,E)$，其中 $|V|=n$ 且 $|E|=m$。构建浓缩图包含两个主要阶段：(i) 使用标准的基于 DFS 的算法（如 Tarjan 算法或 Kosaraju 算法）计算强连通分量 (SCC)，以及 (ii) 将每个 SCC 收缩为单个顶点，并根据 $G$ 中的边在 SCC 顶点之间创建边。\n\n对于邻接表表示法：\n- 一个基于 DFS 的 SCC 算法会访问每个顶点一次，并精确地扫描每个邻接表一次。因此，计算 SCC 的总时间为 $O(n+m)$。\n- 为了构建浓缩图的边，需要遍历 $E$ 中的所有边 $(u,v)$。如果 $\\operatorname{comp}(u)\\neq \\operatorname{comp}(v)$，则在浓缩图中添加一条从 $\\operatorname{comp}(u)$ 到 $\\operatorname{comp}(v)$ 的边。使用哈希或通过分量标识符索引的标记结构，可以对每个候选边以 $O(1)$ 的均摊时间来去除平行边。因此，这个阶段是 $O(m)$，总时间复杂度仍然是 $O(n+m)$。\n- 因此 $T_{list}=O(n+m)$，这个界是紧的，因为在最坏情况下，仅仅读取输入就需要 $\\Omega(n+m)$ 的时间。\n\n对于邻接矩阵表示法：\n- 在一个基于 DFS 的 SCC 算法中，探索一个顶点的出边需要扫描其在邻接矩阵中的整行，这对于每个被探索的顶点都耗费 $O(n)$ 的时间。对所有顶点进行操作，总共产生 $O(n^{2})$ 的复杂度。Tarjan 算法执行一次这样的遍历；Kosaraju 算法执行两次，复杂度仍然是 $O(n^{2})$。\n- 要构建浓缩图的边，必须枚举所有存在的边。使用邻接矩阵时，这需要检查矩阵的条目；在最坏情况下，这需要扫描所有 $n^{2}$ 个条目以找到所有值为 1 的项。因此，这个阶段的时间复杂度是 $O(n^{2})$。\n- 因此 $T_{matrix}=O(n^{2})$，这个界是紧的，因为对于 $m=\\Theta(n^{2})$ 的稠密图，任何算法都必须至少读取 $\\Theta(n^{2})$ 的输入位来枚举所有的边。\n\n综合这些分析，得到复杂度对 $(T_{matrix},T_{list})=(O(n^{2}),O(n+m))$，这对应于选项A。", "answer": "$$\\boxed{A}$$", "id": "1491385"}]}