{"hands_on_practices": [{"introduction": "Dijkstra 算法是解决非负权重图中单源最短路径问题的基石。这个练习将我们带入一个数据中心网络的实际场景，要求我们计算从中心路由器到各个服务器的最低延迟。通过手动执行 Dijkstra 算法，你将亲身体验其贪心策略的运作方式——即在每一步选择距离源点最近的未访问顶点，并“松弛”其邻接边，从而加深对“暂定距离”和“松弛”操作等核心概念的理解。[@problem_id:1532819]", "problem": "一个小型数据中心的网络由一个标记为 `R` 的中央路由器和五个标记为 `S1`、`S2`、`S3`、`S4` 和 `S5` 的服务器组成。数据包可以在某些设备对之间传输，每个连接都有一个相关的延迟，以毫秒 (ms) 为单位。网络拓扑和延迟如下：\n\n- `R` 与 `S1` 连接，延迟为 10 毫秒。\n- `R` 与 `S2` 连接，延迟为 3 毫秒。\n- `R` 与 `S3` 连接，延迟为 8 毫秒。\n- `S1` 与 `S2` 连接，延迟为 4 毫秒。\n- `S1` 与 `S4` 连接，延迟为 2 毫秒。\n- `S2` 与 `S3` 连接，延迟为 2 毫秒。\n- `S2` 与 `S4` 连接，延迟为 9 毫秒。\n- `S3` 与 `S5` 连接，延迟为 5 毫秒。\n- `S4` 与 `S5` 连接，延迟为 1 毫秒。\n\n所有连接都是双向的，意味着两个方向的延迟相同。请确定一个数据包从中央路由器 `R` 传输到五个服务器中每一个的最小可能延迟。\n\n请按 `S1`、`S2`、`S3`、`S4` 和 `S5` 的特定顺序提供最终延迟。最终答案应该是一组以毫秒表示的数字。", "solution": "题目要求我们在一个无向加权网络中，找到从源节点 $R$ 到目标节点 $S_{1},S_{2},S_{3},S_{4},S_{5}$ 的最低延迟路径。所有延迟都是非负的，因此可以应用 Dijkstra 算法。设 $d(X)$ 表示从 $R$ 到节点 $X$ 的当前已知最低延迟。初始化 $d(R)=0$ 且对所有 $i$，$d(S_{i})=\\infty$，然后在每一步中，从具有最小临时距离的已确定节点出发，沿着其边进行松弛操作。\n\n使用从 $R$ 出发的边进行初始化：\n- 从 $R$ 到 $S_{1}$：$d(S_{1})=\\min(\\infty,10)=10$。\n- 从 $R$ 到 $S_{2}$：$d(S_{2})=\\min(\\infty,3)=3$。\n- 从 $R$ 到 $S_{3}$：$d(S_{3})=\\min(\\infty,8)=8$。\n- 从 $R$ 到 $S_{4}$ 或 $S_{5}$ 没有直接边：$d(S_{4})=\\infty$，$d(S_{5})=\\infty$。\n\n确定具有最小临时距离的节点 $S_{2}$ (其 $d(S_{2})=3$)，并对其邻居进行松弛操作：\n- 边 $S_{2}$–$S_{1}$，权重为 $4$：$d(S_{1})=\\min(10,3+4)=7$。\n- 边 $S_{2}$–$S_{3}$，权重为 $2$：$d(S_{3})=\\min(8,3+2)=5$。\n- 边 $S_{2}$–$S_{4}$，权重为 $9$：$d(S_{4})=\\min(\\infty,3+9)=12$。\n\n现在临时距离为 $d(S_{1})=7$，$d(S_{3})=5$，$d(S_{4})=12$，$d(S_{5})=\\infty$。确定 $S_{3}$ (其 $d(S_{3})=5$)，并对其邻居进行松弛操作：\n- 边 $S_{3}$–$S_{5}$，权重为 $5$：$d(S_{5})=\\min(\\infty,5+5)=10$。\n- 边 $S_{3}$–$S_{2}$ 提供的路径长为 $5+2=7$，这并未改善 $d(S_{2})=3$。\n\n现在临时距离为 $d(S_{1})=7$，$d(S_{4})=12$，$d(S_{5})=10$。确定 $S_{1}$ (其 $d(S_{1})=7$)，并对其邻居进行松弛操作：\n- 边 $S_{1}$–$S_{4}$，权重为 $2$：$d(S_{4})=\\min(12,7+2)=9$。\n- 边 $S_{1}$–$S_{2}$ 提供的路径长为 $7+4=11$，这并未改善 $d(S_{2})=3$。\n\n现在临时距离为 $d(S_{4})=9$，$d(S_{5})=10$。确定 $S_{4}$ (其 $d(S_{4})=9$)，并对其邻居进行松弛操作：\n- 边 $S_{4}$–$S_{5}$，权重为 $1$：$d(S_{5})=\\min(10,9+1)=10$ (无变化)。\n\n最后，确定 $S_{5}$，其 $d(S_{5})=10$。所有节点都已确定，最终得到的最小延迟为：\n- $d(S_{1})=7$\n- $d(S_{2})=3$\n- $d(S_{3})=5$\n- $d(S_{4})=9$\n- $d(S_{5})=10$\n\n这些值的单位是毫秒，正如问题陈述所要求的；最终答案按指定顺序列出了这些数值。", "answer": "$$\\boxed{\\begin{pmatrix}7  3  5  9  10\\end{pmatrix}}$$", "id": "1532819"}, {"introduction": "在许多现实世界的问题中，例如金融套利，边的权重可能为负，这时 Dijkstra 算法将不再适用。本练习介绍能够处理负权重的 Bellman-Ford 算法，它通过对所有边进行 $|V|-1$ 轮系统性的松弛操作来保证找到正确的最短路径。通过追踪前两轮完整的迭代过程，你将观察到距离估计值是如何逐步优化并最终收敛到正确解的，即使图中存在负权重边。[@problem_id:1532774]", "problem": "考虑一个有向加权图，其顶点集为 $V = \\{S, A, B, C, D\\}$，并有一组带有相应权重的指定有向边。任务是找出从源顶点 $S$ 到所有其他顶点的最短路径成本估算值。\n\n对于任意顶点 $v \\in V$，其初始成本估算值 $d(v)$ 为 $d(S) = 0$，且对于所有 $v \\neq S$，有 $d(v) = \\infty$。\n\n我们将执行一个迭代过程来更新这些成本估算值。该过程的单次“轮”（pass）操作包括按照一个特定的、固定的顺序对图的边进行松弛操作。对于序列中每条权重为 $w(u,v)$ 的边 $(u, v)$，到顶点 $v$ 的成本估算值根据规则 $d(v) = \\min(d(v), d(u) + w(u,v))$ 进行更新。\n\n在每一轮中，图的边以及进行松弛操作的固定顺序如下：\n1. 边 $(A, B)$，权重为 $-4$。\n2. 边 $(S, C)$，权重为 $2$。\n3. 边 $(B, D)$，权重为 $3$。\n4. 边 $(C, D)$，权重为 $7$。\n5. 边 $(S, A)$，权重为 $5$。\n6. 边 $(C, A)$，权重为 $-1$。\n\n在完成正好两轮完整的松弛过程后，确定成本估算值 $d(A)$、$d(B)$、$d(C)$ 和 $d(D)$。请将你的答案表示为一个包含四个数字的列表，按顺序分别对应顶点 A、B、C 和 D 的最终成本。", "solution": "我们从 $d(S)=0$ 和 $d(A)=d(B)=d(C)=d(D)=\\infty$ 开始，按照固定顺序对每条权重为 $w(u,v)$ 的有向边 $(u,v)$ 应用松弛规则 $d(v) \\leftarrow \\min\\!\\left(d(v),\\, d(u)+w(u,v)\\right)$。\n\n第1轮开始时，$d(A)=\\infty$，$d(B)=\\infty$，$d(C)=\\infty$，$d(D)=\\infty$。对权重为 $-4$ 的边 $(A,B)$ 进行松弛，得到 $d(B)=\\min\\!\\left(\\infty,\\, \\infty-4\\right)=\\infty$。对权重为 $2$ 的边 $(S,C)$ 进行松弛，得到 $d(C)=\\min\\!\\left(\\infty,\\, 0+2\\right)=2$。对权重为 $3$ 的边 $(B,D)$ 进行松弛，得到 $d(D)=\\min\\!\\left(\\infty,\\, \\infty+3\\right)=\\infty$。对权重为 $7$ 的边 $(C,D)$ 进行松弛，得到 $d(D)=\\min\\!\\left(\\infty,\\, 2+7\\right)=9$。对权重为 $5$ 的边 $(S,A)$ 进行松弛，得到 $d(A)=\\min\\!\\left(\\infty,\\, 0+5\\right)=5$。对权重为 $-1$ 的边 $(C,A)$ 进行松弛，得到 $d(A)=\\min\\!\\left(5,\\, 2-1\\right)=1$。在第1轮结束时，估算值为 $d(A)=1$，$d(B)=\\infty$，$d(C)=2$，$d(D)=9$。\n\n第2轮从 $d(A)=1$，$d(B)=\\infty$，$d(C)=2$，$d(D)=9$ 开始。对权重为 $-4$ 的边 $(A,B)$ 进行松弛，得到 $d(B)=\\min\\!\\left(\\infty,\\, 1-4\\right)=-3$。对权重为 $2$ 的边 $(S,C)$ 进行松弛，得到 $d(C)=\\min\\!\\left(2,\\, 0+2\\right)=2$。对权重为 $3$ 的边 $(B,D)$ 进行松弛，得到 $d(D)=\\min\\!\\left(9,\\, -3+3\\right)=0$。对权重为 $7$ 的边 $(C,D)$ 进行松弛，得到 $d(D)=\\min\\!\\left(0,\\, 2+7\\right)=0$。对权重为 $5$ 的边 $(S,A)$ 进行松弛，得到 $d(A)=\\min\\!\\left(1,\\, 0+5\\right)=1$。对权重为 $-1$ 的边 $(C,A)$ 进行松弛，得到 $d(A)=\\min\\!\\left(1,\\, 2-1\\right)=1$。因此，在完成正好两轮完整的松弛过程后，按 $(A,B,C,D)$ 顺序排列的最终成本估算值为 $1$、$-3$、$2$ 和 $0$。", "answer": "$$\\boxed{\\begin{pmatrix}1  -3  2  0\\end{pmatrix}}$$", "id": "1532774"}, {"introduction": "有时，我们的目标不仅仅是从单一源点出发，而是要了解网络中任意两个节点之间的最短路径。这个练习将我们的视角从“单源”转向“所有顶点对”，并引导你完成 Floyd-Warshall 算法的初始几次迭代。该算法展示了动态规划的精妙之处：它通过逐步允许使用更多的中间顶点来系统地优化路径，让你深入理解如何构建一张完整的网络距离图。[@problem_id:1504965]", "problem": "考虑一个有4个顶点的加权有向图，顶点编号为1, 2, 3, 4。任意两个顶点之间直接路径的代价由一个初始距离矩阵 $D^{(0)}$ 给出。在这个矩阵中，元素 $D^{(0)}_{ij}$ 表示从顶点 $i$ 到顶点 $j$ 的有向边的权重。如果从 $i$ 到 $j$ 不存在直接边，则权重被视为无穷大 ($\\infty$)。对于所有顶点，到自身的距离 $D^{(0)}_{ii}$ 为 0。\n\n初始距离矩阵 $D^{(0)}$ 如下所示：\n$$ D^{(0)} = \\begin{pmatrix} 0  4  \\infty  7 \\\\ \\infty  0  1  \\infty \\\\ 6  \\infty  0  2 \\\\ 3  -2  \\infty  0 \\end{pmatrix} $$\n\nFloyd-Warshall 算法通过迭代更新该矩阵来计算所有顶点对之间的最短路径。在第 $k$ 次迭代中（对于 $k=1, 2, \\dots, 4$），该算法会考虑使用顶点 $k$ 作为中间顶点的路径，以寻找任意两个顶点 $i$ 和 $j$ 之间可能存在的更短路径。\n\n从给定的矩阵 $D^{(0)}$ 开始，执行 Floyd-Warshall 算法的前两次迭代，以计算矩阵 $D^{(1)}$ (使用 $k=1$) 和 $D^{(2)}$ (使用 $k=2$) 。你的任务是确定第二次迭代后的距离矩阵的最终状态 $D^{(2)}$。", "solution": "我们使用 Floyd-Warshall 更新规则：对于每次迭代 $k$ 和所有的 $i,j$，\n$$\nD^{(k)}_{ij}=\\min\\left(D^{(k-1)}_{ij},\\,D^{(k-1)}_{ik}+D^{(k-1)}_{kj}\\right).\n$$\n已知\n$$\nD^{(0)}=\\begin{pmatrix}\n0  4  \\infty  7\\\\\n\\infty  0  1  \\infty\\\\\n6  \\infty  0  2\\\\\n3  -2  \\infty  0\n\\end{pmatrix},\n$$\n我们执行第一次迭代（$k=1$），使用 $D^{(1)}_{ij}=\\min\\left(D^{(0)}_{ij},\\,D^{(0)}_{i1}+D^{(0)}_{1j}\\right)$。\n\n对于 $i=1$：\n- $j=1$: $\\min(0,\\,0+0)=0$。\n- $j=2$: $\\min(4,\\,0+4)=4$。\n- $j=3$: $\\min(\\infty,\\,0+\\infty)=\\infty$。\n- $j=4$: $\\min(7,\\,0+7)=7$。\n\n对于 $i=2$ (由于 $D^{(0)}_{21}=\\infty$，所有经由顶点1的路径长度均为 $\\infty$)：\n- $j=1$: $\\min(\\infty,\\,\\infty)=\\infty$。\n- $j=2$: $\\min(0,\\,\\infty)=0$。\n- $j=3$: $\\min(1,\\,\\infty)=1$。\n- $j=4$: $\\min(\\infty,\\,\\infty)=\\infty$。\n\n对于 $i=3$ (其中 $D^{(0)}_{31}=6$)：\n- $j=1$: $\\min(6,\\,6+0)=6$。\n- $j=2$: $\\min(\\infty,\\,6+4)=10$。\n- $j=3$: $\\min(0,\\,6+\\infty)=0$。\n- $j=4$: $\\min(2,\\,6+7)=2$。\n\n对于 $i=4$ (其中 $D^{(0)}_{41}=3$)：\n- $j=1$: $\\min(3,\\,3+0)=3$。\n- $j=2$: $\\min(-2,\\,3+4)=-2$。\n- $j=3$: $\\min(\\infty,\\,3+\\infty)=\\infty$。\n- $j=4$: $\\min(0,\\,3+7)=0$。\n\n因此\n$$\nD^{(1)}=\\begin{pmatrix}\n0  4  \\infty  7\\\\\n\\infty  0  1  \\infty\\\\\n6  10  0  2\\\\\n3  -2  \\infty  0\n\\end{pmatrix}.\n$$\n\n接下来，执行第二次迭代（$k=2$），使用 $D^{(2)}_{ij}=\\min\\left(D^{(1)}_{ij},\\,D^{(1)}_{i2}+D^{(1)}_{2j}\\right)$。\n\n对于 $i=1$ (其中 $D^{(1)}_{12}=4$)：\n- $j=1$: $\\min(0,\\,4+\\infty)=0$。\n- $j=2$: $\\min(4,\\,4+0)=4$。\n- $j=3$: $\\min(\\infty,\\,4+1)=5$。\n- $j=4$: $\\min(7,\\,4+\\infty)=7$。\n\n对于 $i=2$ (其中 $D^{(1)}_{22}=0$)：\n- $j=1$: $\\min(\\infty,\\,0+\\infty)=\\infty$。\n- $j=2$: $\\min(0,\\,0+0)=0$。\n- $j=3$: $\\min(1,\\,0+1)=1$。\n- $j=4$: $\\min(\\infty,\\,0+\\infty)=\\infty$。\n\n对于 $i=3$ (其中 $D^{(1)}_{32}=10$)：\n- $j=1$: $\\min(6,\\,10+\\infty)=6$。\n- $j=2$: $\\min(10,\\,10+0)=10$。\n- $j=3$: $\\min(0,\\,10+1)=0$。\n- $j=4$: $\\min(2,\\,10+\\infty)=2$。\n\n对于 $i=4$ (其中 $D^{(1)}_{42}=-2$)：\n- $j=1$: $\\min(3,\\, -2+\\infty)=3$。\n- $j=2$: $\\min(-2,\\, -2+0)=-2$。\n- $j=3$: $\\min(\\infty,\\, -2+1)=-1$。\n- $j=4$: $\\min(0,\\, -2+\\infty)=0$。\n\n因此，第二次迭代后的矩阵为\n$$\nD^{(2)}=\\begin{pmatrix}\n0  4  5  7\\\\\n\\infty  0  1  \\infty\\\\\n6  10  0  2\\\\\n3  -2  -1  0\n\\end{pmatrix}.\n$$", "answer": "$$\\boxed{\\begin{pmatrix}0  4  5  7 \\\\ \\infty  0  1  \\infty \\\\ 6  10  0  2 \\\\ 3  -2  -1  0\\end{pmatrix}}$$", "id": "1504965"}]}