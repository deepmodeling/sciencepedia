{"hands_on_practices": [{"introduction": "掌握任何算法的第一步都是通过具体实例来理解其核心机制。Floyd-Warshall 算法的精髓在于其迭代更新过程，即通过逐一引入中间节点来逐步优化路径。这个练习将引导你手动模拟算法的前两次迭代，通过计算来亲身体验距离矩阵是如何演变的。这不仅能帮助你熟悉算法的更新规则，还能为理解其动态规划思想打下坚实的基础。", "problem": "考虑一个有4个顶点的带权有向图，顶点标记为 1、2、3 和 4。任意两个顶点之间的直接路径成本由一个初始距离矩阵 $D^{(0)}$ 给出。在此矩阵中，元素 $D^{(0)}_{ij}$ 表示从顶点 $i$ 到顶点 $j$ 的有向边的权重。如果从 $i$ 到 $j$ 不存在直接边，则权重视为无穷大 ($\\infty$)。对于所有顶点，自环距离 $D^{(0)}_{ii}$ 均为 0。\n\n初始距离矩阵 $D^{(0)}$ 如下所示：\n$$ D^{(0)} = \\begin{pmatrix} 0  4  \\infty  7 \\\\ \\infty  0  1  \\infty \\\\ 6  \\infty  0  2 \\\\ 3  -2  \\infty  0 \\end{pmatrix} $$\n\nFloyd-Warshall 算法通过迭代更新此矩阵来计算所有顶点对之间的最短路径。在第 $k$ 次迭代中（其中 $k=1, 2, \\dots, 4$），算法考虑使用顶点 $k$ 作为中间顶点的路径，以寻找任意两个顶点 $i$ 和 $j$ 之间可能存在的更短路径。\n\n从给定的矩阵 $D^{(0)}$ 开始，执行 Floyd-Warshall 算法的前两次迭代，以计算矩阵 $D^{(1)}$（使用 $k=1$）和 $D^{(2)}$（使用 $k=2$）。你的任务是确定在第二次迭代之后距离矩阵的最终状态 $D^{(2)}$。", "solution": "我们使用 Floyd-Warshall 更新规则：对于每次迭代 $k$ 以及所有的 $i,j$，\n$$\nD^{(k)}_{ij}=\\min\\left(D^{(k-1)}_{ij},\\,D^{(k-1)}_{ik}+D^{(k-1)}_{kj}\\right).\n$$\n给定\n$$\nD^{(0)}=\\begin{pmatrix}\n0  4  \\infty  7\\\\\n\\infty  0  1  \\infty\\\\\n6  \\infty  0  2\\\\\n3  -2  \\infty  0\n\\end{pmatrix},\n$$\n我们执行第一次迭代，$k=1$，使用 $D^{(1)}_{ij}=\\min\\left(D^{(0)}_{ij},\\,D^{(0)}_{i1}+D^{(0)}_{1j}\\right)$。\n\n对于 $i=1$：\n- $j=1$: $\\min(0,\\,0+0)=0$。\n- $j=2$: $\\min(4,\\,0+4)=4$。\n- $j=3$: $\\min(\\infty,\\,0+\\infty)=\\infty$。\n- $j=4$: $\\min(7,\\,0+7)=7$。\n\n对于 $i=2$（由于 $D^{(0)}_{21}=\\infty$，所有经过 1 的路径均为 $\\infty$）：\n- $j=1$: $\\min(\\infty,\\,\\infty)=\\infty$。\n- $j=2$: $\\min(0,\\,\\infty)=0$。\n- $j=3$: $\\min(1,\\,\\infty)=1$。\n- $j=4$: $\\min(\\infty,\\,\\infty)=\\infty$。\n\n对于 $i=3$（其中 $D^{(0)}_{31}=6$）：\n- $j=1$: $\\min(6,\\,6+0)=6$。\n- $j=2$: $\\min(\\infty,\\,6+4)=10$。\n- $j=3$: $\\min(0,\\,6+\\infty)=0$。\n- $j=4$: $\\min(2,\\,6+7)=2$。\n\n对于 $i=4$（其中 $D^{(0)}_{41}=3$）：\n- $j=1$: $\\min(3,\\,3+0)=3$。\n- $j=2$: $\\min(-2,\\,3+4)=-2$。\n- $j=3$: $\\min(\\infty,\\,3+\\infty)=\\infty$。\n- $j=4$: $\\min(0,\\,3+7)=0$。\n\n因此\n$$\nD^{(1)}=\\begin{pmatrix}\n0  4  \\infty  7\\\\\n\\infty  0  1  \\infty\\\\\n6  10  0  2\\\\\n3  -2  \\infty  0\n\\end{pmatrix}.\n$$\n\n接着，执行第二次迭代，$k=2$，使用 $D^{(2)}_{ij}=\\min\\left(D^{(1)}_{ij},\\,D^{(1)}_{i2}+D^{(1)}_{2j}\\right)$。\n\n对于 $i=1$（其中 $D^{(1)}_{12}=4$）：\n- $j=1$: $\\min(0,\\,4+\\infty)=0$。\n- $j=2$: $\\min(4,\\,4+0)=4$。\n- $j=3$: $\\min(\\infty,\\,4+1)=5$。\n- $j=4$: $\\min(7,\\,4+\\infty)=7$。\n\n对于 $i=2$（其中 $D^{(1)}_{22}=0$）：\n- $j=1$: $\\min(\\infty,\\,0+\\infty)=\\infty$。\n- $j=2$: $\\min(0,\\,0+0)=0$。\n- $j=3$: $\\min(1,\\,0+1)=1$。\n- $j=4$: $\\min(\\infty,\\,0+\\infty)=\\infty$。\n\n对于 $i=3$（其中 $D^{(1)}_{32}=10$）：\n- $j=1$: $\\min(6,\\,10+\\infty)=6$。\n- $j=2$: $\\min(10,\\,10+0)=10$。\n- $j=3$: $\\min(0,\\,10+1)=0$。\n- $j=4$: $\\min(2,\\,10+\\infty)=2$。\n\n对于 $i=4$（其中 $D^{(1)}_{42}=-2$）：\n- $j=1$: $\\min(3,\\, -2+\\infty)=3$。\n- $j=2$: $\\min(-2,\\, -2+0)=-2$。\n- $j=3$: $\\min(\\infty,\\, -2+1)=-1$。\n- $j=4$: $\\min(0,\\, -2+\\infty)=0$。\n\n因此，第二次迭代后的矩阵为\n$$\nD^{(2)}=\\begin{pmatrix}\n0  4  5  7\\\\\n\\infty  0  1  \\infty\\\\\n6  10  0  2\\\\\n3  -2  -1  0\n\\end{pmatrix}.\n$$", "answer": "$$\\boxed{\\begin{pmatrix}0  4  5  7 \\\\ \\infty  0  1  \\infty \\\\ 6  10  0  2 \\\\ 3  -2  -1  0\\end{pmatrix}}$$", "id": "1504965"}, {"introduction": "在掌握了算法的基本操作后，下一步是探索其在特殊情况下的行为，以加深概念理解。本练习提出一个关于“孤立顶点”的思想实验，即一个没有任何传入或传出边的顶点。通过分析在这种极端情况下算法会产生什么样的结果，你可以更深刻地理解算法如何处理图中不连通的部分，以及无穷大（$\\infty$）在路径计算中的确切含义和作用。", "problem": "考虑一个带权有向图 $G = (V, E)$，其顶点集为 $V = \\{v_1, v_2, \\dots, v_n\\}$，包含 $n$ 个顶点，其边权重可正可负，但图中没有负权重环。如果图中没有任何其他顶点指向顶点 $v_i$ 的入边，也没有从 $v_i$ 指向任何其他顶点的出边，则称顶点 $v_i$ 是**孤立的**。\n\nFloyd-Warshall 算法用于计算所有顶点对之间的最短路径。该算法按如下方式初始化距离矩阵 $D^{(0)}$：\n-   对所有的 $j = k$，$D^{(0)}_{j,k} = 0$。\n-   如果存在一条从 $v_j$ 到 $v_k$ 的权重为 $w(v_j, v_k)$ 的有向边，则 $D^{(0)}_{j,k} = w(v_j, v_k)$。\n-   如果 $j \\neq k$ 且不存在从 $v_j$到 $v_k$ 的直接边，则 $D^{(0)}_{j,k} = \\infty$。\n\n该算法随后迭代地优化这个矩阵，生成最终的距离矩阵 $D^{(n)}$，其中 $D^{(n)}_{j,k}$ 是从顶点 $v_j$到顶点 $v_k$ 的最短路径长度。\n\n假设图中一个特定的顶点 $v_i$ 是孤立的。下列哪个陈述准确地描述了最终距离矩阵 $D^{(n)}$ 的第 $i$ 行和第 $i$ 列？\n\nA. 第 $i$ 行和第 $i$ 列的所有条目都将填充为 $\\infty$，但对角线元素 $D^{(n)}_{i,i}$ 将为 0。\n\nB. 第 $i$ 行和第 $i$ 列将完全填充为 0。\n\nC. 第 $i$ 行和第 $i$ 列将完全填充为 $\\infty$，包括对角线元素 $D^{(n)}_{i,i}$。\n\nD. 第 $i$ 行将填充为 $\\infty$（除了 $D^{(n)}_{i,i} = 0$），但如果其他顶点的路径可以经过 $v_i$，则第 $i$ 列可能包含有限值。\n\nE. 第 $i$ 行和第 $i$ 列的内容取决于算法主循环中顶点的具体处理顺序。", "solution": "设 $G=(V,E)$ 是一个没有负权重环的带权有向图，且设 $v_{i}$ 是孤立的，意味着对于所有 $j \\neq i$，不存在边 $(v_{i},v_{j})$ 和边 $(v_{j},v_{i})$。\n\nFloyd-Warshall 算法维护矩阵 $D^{(r)}$，其中 $r=0,1,\\dots,n$，$D^{(0)}$ 的初始化方式为\n- 如果 $j=k$，则 $D^{(0)}_{j,k}=0$，\n- 如果 $(v_{j},v_{k}) \\in E$，则 $D^{(0)}_{j,k}=w(v_{j},v_{k})$，\n- 否则 $D^{(0)}_{j,k}=\\infty$。\n\n对于 $r=1,2,\\dots,n$ 的更新规则是\n$$\nD^{(r)}_{p,q}=\\min\\!\\big(D^{(r-1)}_{p,q},\\,D^{(r-1)}_{p,r}+D^{(r-1)}_{r,q}\\big).\n$$\n\n因为 $v_{i}$ 是孤立的，所以 $D^{(0)}$ 的第 $i$ 行和第 $i$ 列的初始化为\n$$\nD^{(0)}_{i,i}=0,\\quad D^{(0)}_{i,j}=\\infty\\ \\text{for}\\ j\\neq i,\\quad D^{(0)}_{j,i}=\\infty\\ \\text{for}\\ j\\neq i.\n$$\n\n我们对 $r$ 使用数学归纳法证明，对于所有 $r=0,1,\\dots,n$，\n$$\nD^{(r)}_{i,i}=0,\\qquad D^{(r)}_{i,j}=\\infty\\ \\text{for all}\\ j\\neq i,\\qquad D^{(r)}_{j,i}=\\infty\\ \\text{for all}\\ j\\neq i.\n$$\n\n根据初始化，当 $r=0$ 时为基本情况，成立。假设该陈述对于某个 $r-1\\geq 0$ 成立。固定 $j\\neq i$。那么\n$$\nD^{(r)}_{i,j}=\\min\\!\\big(D^{(r-1)}_{i,j},\\,D^{(r-1)}_{i,r}+D^{(r-1)}_{r,j}\\big).\n$$\n根据归纳假设，$D^{(r-1)}_{i,j}=\\infty$。如果 $r\\neq i$，则 $D^{(r-1)}_{i,r}=\\infty$，所以 $D^{(r-1)}_{i,r}+D^{(r-1)}_{r,j}=\\infty$。如果 $r=i$，则 $D^{(r-1)}_{i,i}=0$ 且 $D^{(r-1)}_{i,j}=\\infty$，因此 $D^{(r-1)}_{i,i}+D^{(r-1)}_{i,j}=\\infty$。在这两种情况下，$D^{(r)}_{i,j}=\\min(\\infty,\\,\\infty)=\\infty$。\n\n类似地，\n$$\nD^{(r)}_{j,i}=\\min\\!\\big(D^{(r-1)}_{j,i},\\,D^{(r-1)}_{j,r}+D^{(r-1)}_{r,i}\\big).\n$$\n根据归纳假设，$D^{(r-1)}_{j,i}=\\infty$。如果 $r\\neq i$，则 $D^{(r-1)}_{r,i}=\\infty$，所以和为 $\\infty$。如果 $r=i$，则 $D^{(r-1)}_{i,i}=0$ 且 $D^{(r-1)}_{j,i}=\\infty$，所以和为 $\\infty$。因此 $D^{(r)}_{j,i}=\\infty$。\n\n对于对角线元素，\n$$\nD^{(r)}_{i,i}=\\min\\!\\big(D^{(r-1)}_{i,i},\\,D^{(r-1)}_{i,r}+D^{(r-1)}_{r,i}\\big).\n$$\n如果 $r\\neq i$，根据归纳假设，$D^{(r-1)}_{i,r}=\\infty$ 或 $D^{(r-1)}_{r,i}=\\infty$，所以和为 $\\infty$，且 $D^{(r)}_{i,i}=\\min(D^{(r-1)}_{i,i},\\infty)=D^{(r-1)}_{i,i}$。如果 $r=i$，则 $D^{(r-1)}_{i,i}=0$，所以 $D^{(r)}_{i,i}=\\min(0,0+0)=0$。因此对于所有的 $r$，$D^{(r)}_{i,i}=0$。\n\n因此，在最终矩阵 $D^{(n)}$ 中，第 $i$ 行和第 $i$ 列在所有非对角线位置上的值均为 $\\infty$，在对角线上的值为 $0$，这与选项 A 一致。不会出现处理顺序依赖性，并且由于不存在出入边，因此不可能通过经过 $v_{i}$ 的路径出现有限值。", "answer": "$$\\boxed{A}$$", "id": "1504983"}, {"introduction": "这个练习将挑战你从执行算法转向分析其根本性质。它提出了一个深刻的问题：如果图中所有边的权重都增加一个正常数 $c$，最短路径会发生什么变化？这个问题并不像表面看起来那么简单，它揭示了路径的总权重与构成路径的边数之间的复杂关系。通过解决这个问题，你将学会不把算法看作一个黑箱，而是去分析其输出如何对输入图的结构性变化做出响应。", "problem": "考虑一个加权有向图 $G = (V, E)$，其边的权重函数为 $w: E \\to \\mathbb{R}$。该图中没有负权重环。该图的所有顶点对之间的最短路径距离矩阵包含所有顶点对 $(u, v) \\in V \\times V$ 的元素 $d(u, v)$，表示从 $u$ 到 $v$ 的路径上边权重之和的最小值。\n\n现在，在相同的顶点集和边集上构建一个新图 $G'$，其权重函数为一个新的函数 $w'$。对于给定的正常数 $c  0$，每条边的新权重定义为 $w'(u, v) = w(u, v) + c$。令 $d'(u, v)$ 为这个新图 $G'$ 中从 $u$ 到 $v$ 的最短路径距离。\n\n此外，我们定义 $d_k(u, v)$ 为在原始图 $G$ 中，从顶点 $u$ 到顶点 $v$ 的包含*恰好* $k$ 条边的最短路径的权重。如果在 $u$ 和 $v$ 之间不存在恰好包含 $k$ 条边的路径，我们认为 $d_k(u, v)$ 为无穷大。\n\n下列哪个表达式正确地将新的最短路径距离 $d'(u, v)$ 与原始图 $G$ 的属性联系起来？\n\nA. $d'(u, v) = d(u, v) + c$\n\nB. $d'(u, v) = d(u, v) \\cdot (1 + c)$\n\nC. $d'(u, v) = d(u, v) + k_{uv} \\cdot c$，其中 $k_{uv}$ 是原始图 $G$ 中从 $u$ 到 $v$ 的一条最短路径上的边数。\n\nD. $G'$ 中的最短路径集合与 $G$ 中的相同，只是它们的总权重增加了。\n\nE. $d'(u, v) = \\min_{k \\ge 1} \\{ d_k(u,v) + k \\cdot c \\}$", "solution": "设 $P$ 是 $G$ 中从 $u$ 到 $v$ 的任意一条恰好使用 $k$ 条边 $e_{1},\\dots,e_{k}$ 的有向路径。它在 $G$ 中的总权重是\n$$\nw(P)=\\sum_{i=1}^{k} w(e_{i}).\n$$\n在 $G'$ 中，每条边的权重都增加了 $c0$，所以同一条路径 $P$ 在 $G'$ 中的总权重是\n$$\nw'(P)=\\sum_{i=1}^{k} \\big(w(e_{i})+c\\big)=\\sum_{i=1}^{k} w(e_{i})+kc=w(P)+kc.\n$$\n\n根据定义，$G'$ 中的最短路径距离是\n$$\nd'(u,v)=\\min_{P:u\\to v} w'(P)=\\min_{P:u\\to v} \\big(w(P)+k(P)\\,c\\big),\n$$\n其中 $k(P)$ 表示 $P$ 上的边数。将路径按边数 $k$ 进行分组，并利用 $d_k(u, v)$ 的定义（即从 $u$ 到 $v$ 的恰好包含 $k$ 条边的路径的最小权重，若无此类路径则为 $d_k(u, v) = \\infty$），我们得到\n$$\nd'(u,v)=\\min_{k\\ge 1}\\left(\\min_{P:u\\to v,\\ |P|=k} w(P)+k\\,c\\right)=\\min_{k\\ge 1}\\big(d_{k}(u,v)+k\\,c\\big).\n$$\n这就证明了选项 E。\n\n我们现在评估其他选项：\n\n- A: $d'(u,v)=d(u,v)+c$ 会忽略对边数的依赖；由于每条边都会产生 $c$ 的额外权重，总增量取决于 $k$，所以 A 在一般情况下是错误的。\n\n- B: $d'(u,v)=d(u,v)\\cdot(1+c)$ 是一种乘法缩放，而该变换是对每条边进行加法操作；因此 B 是错误的。\n\n- C: $d'(u,v)=d(u,v)+k_{uv}\\,c$，其中 $k_{uv}$ 是 $G$ 中一条 $u \\to v$ 最短路径的边数。这个公式可能不成立，因为在每条边上加上 $c$ 之后，一条具有不同边数的不同路径可能会成为最优路径；因此 C 在一般情况下是错误的。\n\n- D: 最短路径的集合不一定保持不变，因为在每条边上加上 $c$ 会倾向于选择边数更少的路径；因此 D 在一般情况下是错误的。\n\n因此，只有 E 正确地描述了 $d'(u,v)$。", "answer": "$$\\boxed{E}$$", "id": "1504949"}]}