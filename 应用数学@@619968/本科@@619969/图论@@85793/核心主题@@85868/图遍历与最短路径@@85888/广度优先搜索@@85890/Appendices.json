{"hands_on_practices": [{"introduction": "这个首个练习将带你深入广度优先搜索（BFS）算法的底层机制。通过在一个给定的图上手动追踪遍历过程，你将直观地感受到队列（queue）结构如何引导算法逐层探索图的节点。这个实践对于在你着手解决更复杂的应用问题之前，建立一个坚实的理论基础至关重要。[@problem_id:1485198]", "problem": "在一个小型、隔离的数据中心中，一个由8台服务器（编号从1到8）组成的网络相互连接。该网络拓扑是双向的，由一个 $8 \\times 8$ 的邻接矩阵 $A$ 表示，其中如果服务器 $i$ 和服务器 $j$ 之间有直接链接，则 $A_{ij} = 1$，否则 $A_{ij} = 0$。矩阵 $A$ 如下所示：\n$$\nA = \\begin{pmatrix}\n0 & 1 & 1 & 1 & 0 & 0 & 0 & 0 \\\\\n1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\\n1 & 0 & 0 & 0 & 1 & 1 & 0 & 0 \\\\\n1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \\\\\n0 & 0 & 1 & 0 & 0 & 0 & 0 & 1 \\\\\n0 & 0 & 1 & 0 & 0 & 0 & 1 & 0 \\\\\n0 & 0 & 0 & 0 & 0 & 1 & 0 & 0 \\\\\n0 & 0 & 0 & 0 & 1 & 0 & 0 & 0\n\\end{pmatrix}\n$$\n为了将一个关键更新从源服务器分发到网络中的所有其他服务器，启动了一个广播协议。该协议使用广度优先搜索 (BFS) 算法来确定服务器被访问的顺序。遍历从服务器3开始。在探索一个服务器的邻居时，如果发现多个未访问过的邻居，则按照它们服务器编号的升序将它们添加到访问队列中（例如，服务器2将在服务器4之前入队）。\n\n确定在BFS遍历期间，服务器编号按照其首次被发现（即被标记为“已访问”）的顺序所形成的序列。", "solution": "将对称邻接矩阵 $A$ 解释为一个无向图。从矩阵的行中读取的邻居集合如下：\n$$\nN(1)=\\{2,3,4\\},\\quad N(2)=\\{1\\},\\quad N(3)=\\{1,5,6\\},\\quad N(4)=\\{1\\},\n$$\n$$\nN(5)=\\{3,8\\},\\quad N(6)=\\{3,7\\},\\quad N(7)=\\{6\\},\\quad N(8)=\\{5\\}.\n$$\n从服务器 $3$ 开始使用BFS。原理：将起始节点入队并标记为已访问；然后迭代地使一个节点出队，按升序扫描其邻居，并在发现任何未访问的邻居时立即将其入队（同时标记为已访问）。发现顺序即节点首次入队的顺序。\n\n初始化：队列 $Q=[\\,]$，已访问序列为空。将 $3$ 入队并标记为已访问。到目前为止的发现顺序：$3$；队列 $Q=[3]$。\n\n将 $3$ 出队。其按升序排列的邻居是 $1,5,6$。它们都未被访问，因此按该顺序将它们入队，并在入队时标记为已访问。发现顺序：$3,1,5,6$；队列 $Q=[1,5,6]$。\n\n将 $1$ 出队。其按升序排列的邻居是 $2,3,4$。其中，$3$ 已被访问；先将 $2$ 入队，然后将 $4$ 入队。发现顺序：$3,1,5,6,2,4$；队列 $Q=[5,6,2,4]$。\n\n将 $5$ 出队。其邻居是 $3,8$。节点 $3$ 已被访问；将 $8$ 入队。发现顺序：$3,1,5,6,2,4,8$；队列 $Q=[6,2,4,8]$。\n\n将 $6$ 出队。其邻居是 $3,7$。节点 $3$ 已被访问；将 $7$ 入队。发现顺序：$3,1,5,6,2,4,8,7$；队列 $Q=[2,4,8,7]$。\n\n将 $2$ 出队。邻居 $1$ 已被访问；无变化。队列 $Q=[4,8,7]$。\n\n将 $4$ 出队。邻居 $1$ 已被访问；无变化。队列 $Q=[8,7]$。\n\n将 $8$ 出队。邻居 $5$ 已被访问；无变化。队列 $Q=[7]$。\n\n将 $7$ 出队。邻居 $6$ 已被访问；无变化。队列为空；BFS完成。\n\n因此，首次发现的顺序是 $3,1,5,6,2,4,8,7$。", "answer": "$$\\boxed{\\begin{pmatrix}3 & 1 & 5 & 6 & 2 & 4 & 8 & 7\\end{pmatrix}}$$", "id": "1485198"}, {"introduction": "广度优先搜索的一个核心特性是它能够在无权图中找到最短路径。这个问题将挑战你以一种创新的方式应用这一特性，通过将一个关于最短环路的问题巧妙地转化为一个标准的最短路径问题来求解。这个练习重在培养你分解问题和调整基础算法以解决新问题的能力。[@problem_id:1485215]", "problem": "一个城市新建的地铁系统连接了几个关键区域。该系统可以建模为一个无权无向图，其中车站由节点表示，它们之间的直达轨道由边表示。该系统有8个车站，用0到7的整数标记。\n\n轨道网络由以下边集定义：\n`{(0, 1), (0, 2), (1, 3), (2, 4), (2, 5), (3, 6), (4, 6), (5, 7)}`\n\n连接车站0和车站1的轨道需要进行一次特殊的维护检查。一辆检查列车必须完成一个完整的循环，该循环包括穿过这条特定的轨道。列车从车站0出发，沿指定轨道直接行驶到车站1，然后必须通过一系列其他可用轨道返回车站0。\n\n要完成这趟往返行程，检查列车必须行驶的最小轨道总数是多少？", "solution": "将地铁建模为一个无权无向图，其顶点集为 $\\{0,1,2,3,4,5,6,7\\}$，边集为 $\\{(0,1),(0,2),(1,3),(2,4),(2,5),(3,6),(4,6),(5,7)\\}$。检查列车必须从 0 到 1 穿过边 $(0,1)$，然后从 1 返回 0，且不使用同一条轨道 $(1,0)$。因此，最小轨道总数等于边 $(0,1)$ 的长度 1，加上在移除边 $(0,1)$ 后的图中从 1 到 0 的最短路径长度。\n\n移除 $(0,1)$ 并从 1 开始执行广度优先搜索：\n- 从 1 出发，唯一的邻居是 3，所以 $\\operatorname{dist}(1,3)=1$。\n- 从 3 出发，唯一的新邻居是 6，所以 $\\operatorname{dist}(1,6)=2$。\n- 从 6 出发，唯一的新邻居是 4，所以 $\\operatorname{dist}(1,4)=3$。\n- 从 4 出发，唯一的新邻居是 2，所以 $\\operatorname{dist}(1,2)=4$。\n- 从 2 出发，一个邻居是 0，所以 $\\operatorname{dist}(1,0)=5$。\n\n根据广度优先搜索在无权图上的性质，这是可能的最短返回路径长度。因此，行驶的最小轨道总数为\n$$1+\\operatorname{dist}_{G\\setminus\\{(0,1)\\}}(1,0)=1+5=6.$$", "answer": "$$\\boxed{6}$$", "id": "1485215"}, {"introduction": "广度优先搜索不仅能找到最短路径的长度，还可以被扩展来计算存在多少条不同的最短路径。这个问题要求你在标准BFS算法的基础上进行扩充，以便在探索图的同时记录路径的数量。这展示了BFS框架在收集关于图结构的更丰富信息方面的强大功能和灵活性。[@problem_id:1485209]", "problem": "在一个小型实验性分布式计算网络中，任务在不同的计算节点之间进行路由。该网络由10个节点组成，分别标记为0到9。这些节点之间的连接是双向的，形成一个无权图，其中每个连接代表一次跳跃。网络拓扑由以下直接通信链路定义：\n(0, 1), (0, 2), (0, 3)\n(1, 4)\n(2, 4), (2, 5)\n(3, 5), (3, 6)\n(4, 7)\n(5, 7), (5, 8)\n(6, 8)\n(7, 9)\n(8, 9)\n\n一个任务需要从主节点（即节点0）发送到一个特定的执行节点（即节点9）。为了进行弹性和负载均衡分析，有必要确定节点0和节点9之间的不同最优传输路径的数量。一条最优路径被定义为具有最少可能跳跃数的路径。\n\n计算从节点0到节点9的不同最优路径的总数。", "solution": "我们将网络建模为一个无向无权图，因此最优路径就是以跳跃数计算的最短路径。设 $D(v)$ 表示从节点 $0$ 到节点 $v$ 的最小跳跃数，设 $C(v)$ 表示从节点 $0$ 到节点 $v$ 的最短路径数量。初始化 $D(0)=0$ 和 $C(0)=1$。\n\n根据直接链路，$0$ 的邻居是 $1$、$2$ 和 $3$，所以\n$$D(1)=D(2)=D(3)=1,\\quad C(1)=C(2)=C(3)=1.$$\n\n接下来，确定距离为 $2$ 的节点。根据给定的边：\n- 节点 $4$ 与 $1$ 和 $2$ 相邻，因此 $D(4)=2$ 并且\n$$C(4)=C(1)+C(2)=1+1=2.$$\n- 节点 $5$ 与 $2$ 和 $3$ 相邻，因此 $D(5)=2$ 并且\n$$C(5)=C(2)+C(3)=1+1=2.$$\n- 节点 $6$ 与 $3$ 相邻，因此 $D(6)=2$ 并且\n$$C(6)=C(3)=1.$$\n\n接下来，确定距离为 $3$ 的节点。根据边：\n- 节点 $7$ 与 $4$ 和 $5$ 相邻，两者距离都为 $2$，所以 $D(7)=3$ 并且\n$$C(7)=C(4)+C(5)=2+2=4.$$\n- 节点 $8$ 与 $5$ 和 $6$ 相邻，两者距离都为 $2$，所以 $D(8)=3$ 并且\n$$C(8)=C(5)+C(6)=2+1=3.$$\n\n最后，节点 $9$ 与 $7$ 和 $8$ 相邻，两者距离都为 $3$，所以 $D(9)=4$ 并且不同最优（最短）路径的数量是\n$$C(9)=C(7)+C(8)=4+3=7.$$\n\n因此，从节点 $0$ 到节点 $9$ 的不同最优路径总数为 $7$。", "answer": "$$\\boxed{7}$$", "id": "1485209"}]}