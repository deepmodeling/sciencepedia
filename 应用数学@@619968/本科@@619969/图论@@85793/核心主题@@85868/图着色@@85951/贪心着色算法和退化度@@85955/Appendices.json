{"hands_on_practices": [{"introduction": "让我们从一个熟悉的三维结构——立方体开始，将图论概念付诸实践。通过计算代表立方体顶点和边的图的退化度，我们可以掌握确定这一重要图属性的基本方法。这个练习将帮助你理解如何通过分析图的最小度来为退化度建立上下界。[@problem_id:1509687]", "problem": "在网络理论中，一个连接图的结构可以通过一种称为退化度（degeneracy）的性质来刻画。考虑一个为模拟点对点网络而构建的简单无向图 $G=(V, E)$。其顶点集 $V$ 对应于一个物理立方体的八个角。当且仅当立方体上对应的两个角由立方体的一条棱连接时，边集 $E$ 中才存在连接这两个顶点的边。\n\n如果一个图的每个导出子图都至少有一个度不大于 $k$ 的顶点，则称该图是 $k$-退化的。一个图的退化度是使其成为 $k$-退化图的最小整数 $k$。\n\n确定图 $G$ 的退化度。", "solution": "设 $G$ 是表示立方体顶点和棱的图。我们需要求出 $G$ 的退化度。退化度是最小的整数 $k$，使得 $G$ 的每一个导出子图都有一个度至多为 $k$ 的顶点。\n\n首先，我们来描述图 $G$ 的特征。立方体有8个顶点和12条棱。在对应的图 $G$ 中，有 $|V|=8$ 个顶点。立方体的每个顶点（角）都通过棱与其他恰好三个顶点（角）相连。因此，图 $G$ 中的每个顶点的度都是3。一个图中若所有顶点的度都相同，则称之为正则图。在这种情况下，$G$ 是一个3-正则图。\n\n我们来确定 $G$ 的退化度的一个下界。设 $G$ 的退化度为 $k_{deg}$。根据定义，$G$ 的每个导出子图都必须有一个度至多为 $k_{deg}$ 的顶点。图 $G$ 本身是 $G$ 的一个导出子图（由所有顶点 $V$ 导出）。$G$ 中任意顶点的最小度为 $\\delta(G) = 3$。由于 $G$ 必须包含一个度至多为 $k_{deg}$ 的顶点，必然有 $k_{deg} \\ge \\delta(G)$。\n因此，我们有 $k_{deg} \\ge 3$。这意味着立方体图的退化度至少为3。\n\n接下来，我们来确定退化度的一个上界。退化度的一个有用性质是：对于任何有限图 $G$，其退化度等于 $G$ 的所有导出子图 $H$ 的最小度 $\\delta(H)$ 中的最大值。一个等价的刻画是基于顶点排序。一个图是 $k$-退化的，当且仅当存在其顶点的一个排序 $v_1, v_2, \\ldots, v_n$，使得每个顶点 $v_i$ 在排序中位于其后的顶点集 $\\{v_{i+1}, v_{i+2}, \\ldots, v_n\\}$ 中至多有 $k$ 个邻居。\n\n让我们考虑我们的图 $G$ 中8个顶点的任意一个排序。对于此排序中的任意顶点 $v_i$，其在该序列中排在后面的邻居数量，即 $|\\{v_j \\mid j>i \\text{ and } (v_i, v_j) \\in E\\}|$，根据定义，小于或等于它在图 $G$ 中的总度数，即 $\\deg_G(v_i)$。\n由于 $G$ 是一个3-正则图，每个顶点的度都是3。因此，对于任何排序中的任何顶点 $v_i$，它在排序中至多有3个邻居位于其后。\n这意味着对于任意的顶点排序，3-退化的条件都得到满足。因此，$G$ 的退化度至多为3。所以，$k_{deg} \\le 3$。\n\n结合我们的两个结果，我们已经确定了 $k_{deg} \\ge 3$ 和 $k_{deg} \\le 3$。满足这两个不等式的唯一整数是3。\n\n因此，由立方体的顶点和棱构成的图的退化度是3。", "answer": "$$\\boxed{3}$$", "id": "1509687"}, {"introduction": "图的退化度不仅是一个抽象的数学概念，它在网络分析等实际场景中也有具体的应用。这个练习将退化度与一个模拟数据中心退役的迭代过程联系起来，其中网络结构是一个完全二分图 $K_{m,n}$。通过解决这个问题，你将看到退化度如何描述一个网络在逐步拆解过程中的“鲁棒性”或“复杂性”。[@problem_id:1509708]", "problem": "一家科技公司正在退役一个遗留数据中心。该中心的架构由两种不同类型的机器组成：一组 $m$ 台主服务器和一组 $n$ 台辅助存储单元。该系统为高冗余而设计，因此每台主服务器都连接到每台辅助存储单元。任意两台主服务器之间或任意两台辅助存储单元之间没有直接连接。对于此特定系统，已知主服务器的数量小于或等于辅助存储单元的数量，即 $m \\le n$，并且每种类型的机器至少有三台（$m \\ge 3$ 且 $n \\ge 3$）。\n\n退役协议是一个迭代过程。在每一步中，技术人员必须从当前仍在运行的机器中，选出与其它运行机器的活动连接数最少的那一台。然后，这台选定的机器将被关机并从网络中移除。\n\n“退役复杂度”是用于量化此过程风险的一个度量标准。它被定义为，在整个关机过程中，任何单台机器在被选中关机那一刻所拥有的最大活动连接数。\n\n确定此系统的退役复杂度。请用一个关于 $m$ 和 $n$ 的解析表达式来表示你的答案。", "solution": "将网络建模为完全二分图 $K_{m,n}$，其两部分分别为 $P$（大小为 $m$）和 $S$（大小为 $n$）。$P$ 中的每个顶点的度为 $n$，$S$ 中的每个顶点的度为 $m$。移除规则是：在每一步中，移除当前度数最小的顶点。因此，任何被选中的顶点在被移除时刻的度，都等于剩余图的当前最小度 $\\delta$。\n\n最初，由于 $m \\le n$，最小度为\n$$\n\\delta\\big(K_{m,n}\\big)=\\min\\{m,n\\}=m,\n$$\n所以第一个被移除的顶点必位于 $S$ 中，且移除时的度为 $m$。\n\n从 $S$ 中移除 $k$ 个顶点后（对于某个满足 $0 \\le k \\le n$ 的 $k$），剩余图为 $K_{m,n-k}$，其最小度为\n$$\n\\delta\\big(K_{m,n-k}\\big)=\\min\\{m,n-k\\}。\n$$\n只要 $n-k \\ge m$，即对于所有满足 $0 \\le k \\le n-m$ 的 $k$，我们有\n$$\n\\delta\\big(K_{m,n-k}\\big)=m,\n$$\n所以在这些步骤中移除的每个顶点在移除时的度都为 $m$。\n\n当 $k=n-m$ 时，图为 $K_{m,m}$，最小度仍为 $\\delta=m$，所以下一个被移除的顶点的度为 $m$。再移除一个顶点后，图变为 $K_{m,m-1}$（或对称地变为 $K_{m-1,m}$），此时最小度降至\n$$\n\\delta\\big(K_{m,m-1}\\big)=m-1。\n$$\n从此点开始，随着后续的移除，最小度会进一步减小。\n\n因此，在整个过程中，任何被选中的顶点在被移除时刻所具有的最大度数（即退役复杂度）是\n$$\n\\max\\{\\delta\\text{ over the process}\\}=m.\n$$\n等价地，这等于 $K_{m,n}$ 的退化度，在给定条件 $m \\le n$ 下，其值为 $\\min\\{m,n\\}=m$。", "answer": "$$\\boxed{m}$$", "id": "1509708"}, {"introduction": "贪心着色算法的效率在很大程度上取决于顶点处理的顺序，一个糟糕的顺序可能会导致使用远超必要数量的颜色。本练习通过一个色数 $\\chi(G)$ 仅为 2 的简单二分图来揭示这一点，你将探索不同的顶点排序如何导致算法使用 $\\Delta(G)+1=3$ 种颜色。这个实践凸显了寻找一个好的顶点排序（例如退化排序）对于优化贪心算法结果的重要性。[@problem_id:1509672]", "problem": "考虑一个图 $G$，其顶点集为 $V = \\{a_1, a_2, a_3, b_1, b_2, b_3\\}$。图 $G$ 的边集定义如下：顶点 $a_i$ 和顶点 $b_j$ 之间存在一条边，当且仅当它们的下标不同，即 $i \\neq j$。集合 $\\{a_1, a_2, a_3\\}$ 中的任意两个顶点之间没有边相连，集合 $\\{b_1, b_2, b_3\\}$ 中的任意两个顶点之间也没有边相连。该图中任意顶点的最大度为 $\\Delta(G) = 2$。\n\n贪心着色算法是一种对图的顶点进行着色的算法。它按照一个指定的顺序处理顶点。对于每个顶点，它会分配一个尚未被其任何已着色邻居使用过的最小正整数颜色。\n\n这个图的色数 $\\chi(G)$ 为 2。然而，对于某些顶点排序，贪心算法可能会使用超过 2 种颜色。您的任务是确定下列哪种顶点排序会使贪心算法使用 $\\Delta(G)+1 = 3$ 种颜色。请选择所有适用的选项。\n\nA. $(a_1, a_2, a_3, b_1, b_2, b_3)$\n\nB. $(a_1, b_1, a_2, b_2, a_3, b_3)$\n\nC. $(b_3, a_3, b_2, a_2, b_1, a_1)$\n\nD. $(a_1, a_3, b_2, b_1, a_2, b_3)$", "solution": "我们有一个二分图，其二分划分为 $\\{a_{1},a_{2},a_{3}\\}$ 和 $\\{b_{1},b_{2},b_{3}\\}$，其中 $a_{i}$ 恰好与所有 $j \\neq i$ 的 $b_{j}$ 相邻，类似地，$b_{j}$ 恰好与所有 $i \\neq j$ 的 $a_{i}$ 相邻。因此，每个顶点的度都为 $2$，所以 $\\Delta(G)=2$，且 $\\chi(G)=2$。贪心算法会对一个顶点 $v$ 使用颜色 3，当且仅当它的两个邻居都已被着色，并且它们使用了颜色 1 和 2。\n\n通过模拟贪心算法来检查每种排序：\n\n选项 A: $(a_{1},a_{2},a_{3},b_{1},b_{2},b_{3})$。\n- $a_{1}\\to 1$；$a_{2}\\to 1$；$a_{3}\\to 1$（$\\{a_{i}\\}$ 内部没有边）。\n- $b_{1}$ 的邻居是 $a_{2},a_{3}$，颜色都为 $1$，所以 $b_{1}\\to 2$。\n- $b_{2}$ 的邻居是 $a_{1},a_{3}$，颜色都为 $1$，所以 $b_{2}\\to 2$。\n- $b_{3}$ 的邻居是 $a_{1},a_{2}$，颜色都为 $1$，所以 $b_{3}\\to 2$。\n只使用了颜色 $1$ 和 $2$；没有使用颜色 $3$。\n\n选项 B: $(a_{1},b_{1},a_{2},b_{2},a_{3},b_{3})$。\n- $a_{1}\\to 1$。\n- $b_{1}$ 与 $a_{1}$ 不相邻，所以 $b_{1}\\to 1$。\n- $a_{2}$ 与 $b_{1}$（颜色 $1$）相邻，所以 $a_{2}\\to 2$。\n- $b_{2}$ 与 $a_{1}$（颜色 $1$）相邻，所以 $b_{2}\\to 2$。\n- $a_{3}$ 与 $b_{1}$（颜色 $1$）和 $b_{2}$（颜色 $2$）相邻，所以 $a_{3}\\to 3$。\n- $b_{3}$ 与 $a_{1}$（颜色 $1$）和 $a_{2}$（颜色 $2$）相邻，所以 $b_{3}\\to 3$。\n因此使用了颜色 $3$。\n\n选项 C: $(b_{3},a_{3},b_{2},a_{2},b_{1},a_{1})$。\n- $b_{3}\\to 1$。\n- $a_{3}$ 与 $b_{3}$ 不相邻，所以 $a_{3}\\to 1$。\n- $b_{2}$ 与 $a_{3}$（颜色 $1$）相邻，所以 $b_{2}\\to 2$。\n- $a_{2}$ 与 $b_{3}$（颜色 $1$）相邻，所以 $a_{2}\\to 2$。\n- $b_{1}$ 与 $a_{3}$（颜色 $1$）和 $a_{2}$（颜色 $2$）相邻，所以 $b_{1}\\to 3$。\n- $a_{1}$ 与 $b_{3}$（颜色 $1$）和 $b_{2}$（颜色 $2$）相邻，所以 $a_{1}\\to 3$。\n因此使用了颜色 $3$。\n\n选项 D: $(a_{1},a_{3},b_{2},b_{1},a_{2},b_{3})$。\n- $a_{1}\\to 1$；$a_{3}\\to 1$。\n- $b_{2}$ 与 $a_{1},a_{3}$（颜色都为 $1$）相邻，所以 $b_{2}\\to 2$。\n- $b_{1}$ 与 $a_{3}$（颜色 $1$）相邻，所以 $b_{1}\\to 2$。\n- $a_{2}$ 与 $b_{1}$（颜色 $2$）相邻，所以 $a_{2}\\to 1$。\n- $b_{3}$ 与 $a_{1},a_{2}$（颜色都为 $1$）相邻，所以 $b_{3}\\to 2$。\n只使用了颜色 $1$ 和 $2$；没有使用颜色 $3$。\n\n因此，迫使贪心算法使用 $\\Delta(G)+1=3$ 种颜色的排序是 B 和 C。", "answer": "$$\\boxed{BC}$$", "id": "1509672"}]}