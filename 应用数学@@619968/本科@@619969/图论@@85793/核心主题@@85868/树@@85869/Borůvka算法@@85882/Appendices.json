{"hands_on_practices": [{"introduction": "掌握 Borůvka 算法的第一步是理解其独特的“并行”性质，这与 Kruskal 或 Prim 等其他经典算法有根本的不同。这个练习通过一个精心设计的网络场景，直接比较了 Borůvka 算法的第一次迭代和 Kruskal 算法的第一个选择。通过解决这个有特定打破僵局规则的问题 [@problem_id:1484776]，你将亲身体会到 Borůvka 算法从图的每个角落同时开始构建最小生成树的“局部到整体”策略，而不是像 Kruskal 算法那样采用“全局最优”的策略。", "problem": "一家科技初创公司正计划建立一个小型专用网络，以连接其四个主服务器，分别标记为 A、B、C 和 D。在任意两台服务器之间建立直接高速链接的成本已经计算出来。该网络必须是连通的，即任意两台服务器之间都存在路径，并且链接的总成本必须最小化。这是一个经典的最小生成树（MST）问题。服务器（顶点）和可能链接（带权边）的图定义如下：\n\n-   顶点：$\\{A, B, C, D\\}$\n-   边和成本：\n    -   (A, C) 成本为 10 个单位。\n    -   (B, D) 成本为 10 个单位。\n    -   (C, D) 成本为 10 个单位。\n    -   (A, B) 成本为 20 个单位。\n\n为了构建最小生成树，考虑了两种算法：Kruskal 算法和 Borůvka 算法。为了确保每种算法都能得到唯一的解，规定了以下确定性的平局打破规则：\n\n1.  **Kruskal 算法的平局打破规则：**当多条边具有相同的最小成本时，算法必须处理其规范表示 `(U, V)`（其中标签 `U` 在字典序上小于 `V`）在字典序（字母顺序）中排在**最后**的边。\n2.  **Borůvka 算法的平局打破规则：**在一次迭代中，如果一个连通分量有多条成本最低的边连接到外部连通分量，算法必须选择连接到字典序**最小**的顶点的边。\n\n以下哪个选项正确地指出了 Kruskal 算法选择的第一条边，以及 Borůvka 算法第一次迭代中选择的所有唯一边的集合？\n\nA. Kruskal 算法选择的第一条边：`(A, C)`；Borůvka 算法第一次迭代的集合：`{ (A, C), (B, D), (C, D) }`\nB. Kruskal 算法选择的第一条边：`(C, D)`；Borůvka 算法第一次迭代的集合：`{ (A, C), (B, D) }`\nC. Kruskal 算法选择的第一条边：`(A, C)`；Borůvka 算法第一次迭代的集合：`{ (A, C), (B, D) }`\nD. Kruskal 算法选择的第一条边：`(C, D)`；Borůvka 算法第一次迭代的集合：`{ (C, A), (D, B), (C, D) }`\nE. Kruskal 算法选择的第一条边：`(B, D)`；Borůvka 算法第一次迭代的集合：`{ (A, C), (B, D) }`", "solution": "我们将网络建模为一个带权的无向图，其顶点集为 $\\{A,B,C,D\\}$，边的成本如下：$(A,C)$、$(B,D)$、$(C,D)$ 的成本均为 $10$，$(A,B)$ 的成本为 $20$。最小生成树（MST）是一个连通的、无环的子图，它跨越所有顶点并且总边权成本最小。\n\nKruskal 算法按权值非递减的顺序选择边，并跳过会形成环的边。这里的平局打破规则规定：在多条具有相同最小成本的边中，处理其规范表示 $(U,V)$（其中 $U<V$）在字典序上排在最后的边。对于成本为 $10$ 的边，其规范对是 $(A,C)$、$(B,D)$ 和 $(C,D)$。由于 $A<B<C$，这些对的字典升序为\n$$(A,C) \\prec (B,D) \\prec (C,D)$$。\n根据规定的规则，Kruskal 算法将处理这些边中字典序最后的边，即 $(C,D)$，作为第一条边。\n\nBoruvka 算法开始时将每个顶点视为其自身的连通分量，在一次迭代中，每个连通分量选择其最便宜的出边；如果一个连通分量存在多条最便宜的边，则平局打破规则是选择连接到字典序最小的顶点的边。初始连通分量为 $\\{A\\}, \\{B\\}, \\{C\\}, \\{D\\}$，我们发现：\n- 对于 $A$：最便宜的关联边是成本为 $10$ 的 $(A,C)$ 和成本为 $20$ 的 $(A,B)$。唯一最便宜的是 $(A,C)$。\n- 对于 $B$：最便宜的关联边是成本为 $10$ 的 $(B,D)$ 和成本为 $20$ 的 $(A,B)$。唯一最便宜的是 $(B,D)$。\n- 对于 $C$：最便宜的关联边是 $(C,A)$ 和 $(C,D)$，成本均为 $10$。根据平局打破规则，选择连接到字典序较小的邻居的边，即 $A$，因此选择 $(C,A)$，这与无向边 $(A,C)$ 是同一条边。\n- 对于 $D$：最便宜的关联边是 $(D,B)$ 和 $(D,C)$，成本均为 $10$。根据平局打破规则，选择连接到字典序较小的邻居的边，即 $B$，因此选择 $(D,B)$，这与无向边 $(B,D)$ 是同一条边。\n\n因此，在 Boruvka 算法的第一次迭代中选择的所有唯一边的集合是 $\\{(A,C),(B,D)\\}$。\n\n综合这些结果：Kruskal 算法的第一条边是 $(C,D)$，Boruvka 算法的第一次迭代集合是 $\\{(A,C),(B,D)\\}$。这与选项 B 相符。", "answer": "$$\\boxed{B}$$", "id": "1484776"}, {"introduction": "Borůvka 算法的核心在于其迭代过程，即不断合并连通分量，直到整个图合而为一。为了清晰地揭示这一过程，我们设计了一个具有分层权重结构的特殊图 [@problem_id:1484797]。通过追踪算法在这个“分层连接星形图”上的执行步骤，你将能够清晰地观察到连通分量是如何在一轮又一轮的迭代中逐步合并的，从而将抽象的算法逻辑转化为具体的计算步骤，加深对算法多阶段合并本质的理解。", "problem": "考虑一个我们称之为“分层连接星形图”的特殊无向加权图。该图由参数 $n$ 定义，其中 $n = 2^k + 1$，$k$ 为某个正整数。该图有 $n$ 个顶点，标记为 $v_0, v_1, \\ldots, v_{n-1}$。\n\n边及其对应的权重定义如下：\n\n1.  **中心连接：** 对于每个 $i \\in \\{1, 2, \\ldots, n-1\\}$，有一条连接中心顶点 $v_0$ 和外围顶点 $v_i$ 的边。这些边的权重均为 $W = n-1$。\n\n2.  **外围连接：** 对于每个 $i \\in \\{1, 2, \\ldots, n-2\\}$，有一条连接顶点 $v_i$ 和 $v_{i+1}$ 的边。边 $(v_i, v_{i+1})$ 的权重由公式 $w(v_i, v_{i+1}) = 2^p$ 给出，其中 $p$ 是使 $i$ 能被 $2^p$ 整除的最大的非负整数。\n\n假设在该图上执行 Borůvka 算法以寻找最小生成树 (MST)。当多条边具有相同的最小权重时，算法通过选择连接到索引最小的顶点的边来打破平局。\n\n确定最终得到的 MST 的总权重。将你的答案表示为关于 $n$ 的封闭形式解析表达式。", "solution": "问题要求计算在特定图上通过 Borůvka 算法找到的最小生成树 (MST) 的总权重。该图有 $n$ 个顶点，$v_0, v_1, \\ldots, v_{n-1}$，其中 $n = 2^k + 1$，$k$ 为某个整数且 $k \\ge 1$。令 $N = n-1 = 2^k$。\n\n权重为：\n-   对 $i=1, \\ldots, N$ 有 $w(v_0, v_i) = N$。\n-   对 $i=1, \\ldots, N-1$ 有 $w(v_i, v_{i+1}) = 2^p$，其中 $p$ 是使 $2^p$ 整除 $i$ 的最大整数。\n\nBorůvka 算法是迭代进行的。在每次迭代中，每个连通分量找到其权重最小的出边，所有这些边都被添加到 MST 森林中。\n\n**初始状态：**\n算法开始时有 $n$ 个连通分量，每个顶点自成一个分量：$C_0=\\{v_0\\}, C_1=\\{v_1\\}, \\ldots, C_{N}=\\{v_{n-1}\\}$。\n\n**迭代 1：**\n我们为每个连通分量找到权重最小的出边。\n-   对于连通分量 $\\{v_0\\}$：其出边为 $(v_0, v_i)$（$i=1, \\ldots, N$），权重均为 $N=2^k$。根据平局打破规则，选择 $(v_0, v_1)$。\n-   对于任何外围连通分量 $\\{v_i\\}$（$i \\in \\{1, \\ldots, N\\}$）：其出边为 $(v_i, v_0)$（权重为 $N$）以及可能的 $(v_i, v_{i-1})$ 和 $(v_i, v_{i+1})$。这些外围连接边的权重为 $w(v_{i-1},v_i) = 2^{p(i-1)}$ 和 $w(v_i,v_{i+1}) = 2^{p(i)}$。外围边的最小可能权重对应于 $p=0$，即权重为 $2^0=1$。当索引 $i$ 或 $i-1$ 为奇数时会出现这种情况。由于 $k \\ge 1$，因此 $N=2^k \\ge 2$，所以任何权重为 1 的外围边都比任何中心连接的权重小。\n-   我们来分析权重为 1 的外围边。这些是满足 $p(i)=0$ 的边 $(v_i, v_{i+1})$，即 $i$ 是奇数。所以，边 $(v_1, v_2), (v_3, v_4), \\ldots, (v_{N-1}, v_N)$ 的权重都为 1。\n-   对于一个奇数索引的连通分量 $C_i$：其权重最小的边是 $(v_i, v_{i+1})$，权重为 1。\n-   对于一个偶数索引的连通分量 $C_i$：其权重最小的边是 $(v_i, v_{i-1})$，权重为 1。\n-   结果，通过添加权重为 1 的边，形成了连通分量 $\\{v_1, v_2\\}, \\{v_3, v_4\\}, \\dots, \\{v_{N-1}, v_N\\}$。这样的边有 $N/2$ 条。中心连通分量 $\\{v_0\\}$ 保持独立，因为它选择的边 $(v_0,v_1)$ 权重为 $N$，而 $C_1$ 找到了一个权重更小的边，所以这条边尚未被添加。\n-   迭代 1 结束后，我们有 $N/2$ 个大小为 2 的连通分量，外加孤立的连通分量 $\\{v_0\\}$。总连通分量数：$N/2+1$。\n-   在迭代 1 中增加的权重：$\\frac{N}{2} \\times 1 = \\frac{N}{2}$。\n\n**迭代 2：**\n-   现在的连通分量形式为 $C'_{j} = \\{v_{2j-1}, v_{2j}\\}$，其中 $j=1, \\ldots, N/2$。\n-   这样一个连通分量的权重最小的出边将把它连接到一个相邻的连通分量 $C'_{j-1}$ 或 $C'_{j+1}$。连接边是 $(v_{2j-2}, v_{2j-1})$ 和 $(v_{2j}, v_{2j+1})$。\n-   边 $(v_{2j}, v_{2j+1})$ 的索引为 $i=2j$，因此 $p(2j) \\ge 1$。最小的非零 $p(i)$ 是 1，所以下一个级别的边权重是 $2^1=2$。这种情况发生在边 $(v_2, v_3), (v_6, v_7), \\ldots$ 上。然而，连接我们两个新连通分量的边，例如 $(v_2, v_3)$，它连接了 $\\{v_1,v_2\\}$ 和 $\\{v_3,v_4\\}$。其索引为 $i=2$，所以 $p(2)=1$，权重为 $2^1=2$。\n-   一般来说，离开连通分量 $\\{v_{2j-1}, v_{2j}\\}$ 的权重最小的边将是 $(v_{2j-2}, v_{2j-1})$ 或 $(v_{2j}, v_{2j+1})$。索引 $2j-2$ 和 $2j$ 都是偶数。算法会选择权重较小的那个。权重分别是 $w(v_{2j-2}, v_{2j-1}) = 2^{p(2j-2)}$ 和 $w(v_{2j}, v_{2j+1}) = 2^{p(2j)}$。其中一个的 $p$ 将为 1，权重为 2。只要 $k \\ge 2$，这个权重就比任何中心连接（权重为 $N=2^k$）的权重小。\n-   大小为 2 的连通分量合并成大小为 4 的连通分量。例如，$\\{v_1, v_2\\}$ 和 $\\{v_3, v_4\\}$ 通过权重为 $2^{p(2)}=2$ 的边 $(v_2, v_3)$ 合并。这样的合并边有 $N/4$ 条。\n-   迭代 2 结束后，我们有 $N/4$ 个大小为 4 的连通分量，外加 $\\{v_0\\}$。总连通分量数：$N/4+1$。\n-   在迭代 2 中增加的权重：$\\frac{N}{4} \\times 2 = \\frac{N}{2}$。\n\n**迭代 $m$ (其中 $1 \\le m \\le k$)：**\n-   在迭代 $m$ 开始时，我们有 $N/2^{m-1}$ 个大小为 $2^{m-1}$ 的连通分量（外加 $\\{v_0\\}$）。\n-   连接两个这样分量（例如 $\\{v_1, \\ldots, v_{2^{m-1}}\\}$ 和 $\\{v_{2^{m-1}+1}, \\ldots, v_{2^m}\\}$）的权重最小的边是 $(v_{2^{m-1}}, v_{2^{m-1}+1})$。\n-   其索引为 $i=2^{m-1}$，所以 $p(i) = m-1$。这条边的权重是 $2^{m-1}$。\n-   对于 $m-1 < k$（即 $m \\le k$），这个权重小于中心连接的权重 $N=2^k$。\n-   大小为 $2^{m-1}$ 的连通分量合并成大小为 $2^m$ 的连通分量。这样的合并有 $\\frac{N/2^{m-1}}{2} = N/2^m$ 个。\n-   在迭代 $m$ 中增加的权重：$\\frac{N}{2^m} \\times 2^{m-1} = \\frac{N}{2}$。\n\n**迭代 $k$ 之后：**\n-   所有的外围顶点 $v_1, \\ldots, v_N$ 已经合并成一个大的连通分量 $C_{path} = \\{v_1, \\ldots, v_N\\}$。\n-   现在的总连通分量数为 2：$\\{v_0\\}$ 和 $C_{path}$。\n-   从迭代 1 到 $k$ 累积增加的总权重是 $\\sum_{m=1}^{k} \\frac{N}{2} = k \\times \\frac{N}{2}$。\n\n**最终迭代 ($k+1$)：**\n-   剩下的两个连通分量，$\\{v_0\\}$ 和 $C_{path}=\\{v_1, \\ldots, v_N\\}$，现在必须连接起来。\n-   从 $C_{path}$ 出发的权重最小的出边是其中一条中心连接 $(v_i, v_0)$，它们的权重都是 $N$。\n-   类似地，从 $\\{v_0\\}$ 出发的权重最小的出边也是一条中心连接，权重为 $N$。\n-   算法添加其中一条边（例如，根据平局打破规则选择 $(v_0, v_1)$）来连接这两个连通分量。\n-   在迭代 $k+1$ 中增加的权重：$N$。\n-   此时只剩下一个连通分量，算法终止。\n\n**总权重计算：**\nMST 的总权重是所有迭代中增加的权重之和。\n总权重 = (从迭代 1 到 $k$ 的权重) + (从迭代 $k+1$ 的权重)\n总权重 = $\\left(k \\times \\frac{N}{2}\\right) + N$\n\n现在，我们代入 $N = n-1$ 和 $k = \\log_2(N) = \\log_2(n-1)$。\n总权重 = $\\log_2(n-1) \\times \\frac{n-1}{2} + (n-1)$\n\n这可以进行因式分解：\n总权重 = $(n-1) \\left(\\frac{\\log_2(n-1)}{2} + 1\\right)$", "answer": "$$\\boxed{(n-1) \\left(\\frac{\\log_{2}(n-1)}{2} + 1\\right)}$$", "id": "1484797"}, {"introduction": "在掌握了算法的执行方式后，一个自然而然的进阶问题是：它的性能极限在哪里？这个练习将引导你像算法设计师一样思考，通过为一个轮图 $W_n$ 精心设计边权重，来探索 Borůvka 算法的最坏情况性能 [@problem_id:1484805]。这项挑战的目标是最大化算法的迭代次数，这不仅能让你深入理解算法收敛速度的关键因素，还能揭示其迭代次数与顶点数的对数关系 $\\left\\lfloor \\log_{2} n \\right\\rfloor$，这是其并行计算优势的理论基础。", "problem": "Borůvka 算法是一种在具有不同边权的连通无向图中寻找最小生成树 (MST) 的方法。该算法以迭代方式进行。开始时，图的每个顶点都被视为一个独立的连通分量，形成一个连通分量森林。在每次迭代中，每个连通分量都会找出连接其某个顶点到*另一个不同*连通分量中某个顶点的最小权重边。然后，所有这些最小权重边都被添加到 MST 森林中。随着边的加入，连通分量会合并。当只剩下一个连通分量，即 MST 本身时，算法终止。\n\n考虑一个轮图，记为 $W_n$（其中 $n \\ge 3$）。该图由一个中心“轴”顶点（我们称之为 $v_0$）和一组 $n-1$ 个“轮辐”顶点 $v_1, v_2, \\ldots, v_{n-1}$ 组成。轮辐顶点连接成一个圈图 $C_{n-1}$，即在 $v_i$ 和 $v_{i+1}$ 之间（对于 $i=1, \\ldots, n-2$）以及在 $v_{n-1}$ 和 $v_1$ 之间存在边。此外，轴顶点 $v_0$ 通过“辐条”边连接到每个轮辐顶点 $v_i$（对于 $i=1, \\ldots, n-1$）。\n\n你的任务是分析 Borůvka 算法在此类图上的最坏情况性能。设计一个为 $W_n$ 的边分配唯一正整数权重的通用策略，以最大化 Borůvka 算法必须执行的迭代次数。\n\nBorůvka 算法在轮图 $W_n$ 上寻找 MST 所需的最大可能迭代次数是多少？请表示为 $n$ 的函数。", "solution": "设 $W_{n}$ 的轴顶点为 $v_{0}$，轮辐顶点为 $v_{1},\\ldots,v_{n-1}$，它们连接成一个圈。Borůvka 算法分阶段进行；在有 $c$ 个连通分量的阶段开始时，每个连通分量选择其最轻的出边，所有这些边都被加入，然后将形成的连通块进行收缩。\n\n关键的一般性事实（用于上界）：在任何阶段，如果当前的连通分量数量为 $c$，则该阶段结束后的连通分量数量最多为\n$$\n\\left\\lfloor \\frac{c}{2} \\right\\rfloor\n$$。\n原因：将每个连通分量选择的边定向为出边。在这个有向图中，每个弱连通分量都包含至少两个原始连通分量（因为每个节点的出度为 $1$ 且没有选择的边是自环），因此最终生成的连通分量数量最多为 $\\lfloor c/2 \\rfloor$。\n\n因此，经过 $t$ 个阶段后，\n$$\nc_{t} \\le \\left\\lfloor \\frac{n}{2^{t}} \\right\\rfloor\n$$。\n为了在达到单个连通分量前强制实现最大可能的阶段数，我们希望每一步都满足等式，即 $c_{i+1}=\\left\\lfloor c_{i}/2 \\right\\rfloor$。如果从 $c_{0}=n$ 开始的所有阶段都能实现这一点，那么算法将在\n$$\n\\left\\lfloor \\frac{n}{2^{t}} \\right\\rfloor = 1\n$$，\n时终止，这等价于 $1 \\le \\frac{n}{2^{t}} < 2$，即 $2^{t} \\le n < 2^{t+1}$。因此，最大可能的阶段数是\n$$\nt = \\left\\lfloor \\log_{2} n \\right\\rfloor\n$$。\n\n我们现在给出一个 $W_{n}$ 的权重分配策略，该策略能在每个阶段都实现 $c_{i+1}=\\left\\lfloor c_{i}/2 \\right\\rfloor$。\n\n权重分配策略（唯一的正整数，每个阶段严格划分为不同的权重“带”）：\n1) 将初始圈的轮辐边沿圈划分为两个交替的集合。为其中一个集合（称之为“1级边”）分配严格递增的小整数权重，这些权重都小于任何其他边的权重。为所有辐条和其他轮辐边分配严格更大的整数权重，使得对于每个轮辐顶点，其最小关联边是其指定的1级轮辐边（而不是辐条）。同时，选择轴顶点最轻的辐条，使其权重既大于所有1级边（这样就不会干扰轮辐顶点的选择），又轻于其他辐条，从而使轴顶点只选择一条辐条。\n\n步骤1的后果：沿着轮辐，每条被选中的1级轮辐边都被其两个端点同时选中，从而形成不相交的轮辐顶点对；如果轮辐的长度为奇数，则恰好有一个轮辐顶点未被匹配。轴顶点选择一条辐条。此阶段后的连通分量计数：\n- 如果当前连通分量数 $c$ 是偶数（轮辐顶点数为奇数），轴顶点选择的唯一辐条会连接到那个唯一的未匹配轮辐分量，因此 $c$ 减半：$c_{1} = c/2$。\n- 如果 $c$ 是奇数（轮辐顶点数为偶数），轴顶点的辐条会连接到新形成的轮辐对之一，形成一个大小为3的连通分量，而其余的轮辐对保持独立；同样有 $c_{1} = (c-1)/2 = \\lfloor c/2 \\rfloor$。\n\n因此，在任何一种情况下都有 $c_{1}=\\left\\lfloor \\frac{n}{2} \\right\\rfloor$。\n\n2) 归纳延续：收缩后，连通分量图再次成为一个轮图：一个轴连通分量和一个由 $c_{1}-1$ 个连通分量组成的轮辐圈。预先分配剩余（尚未选择）的轮辐边的权重，使得在“2级”时，一个交替的轮辐边子集的权重严格大于所有1级权重，但严格小于任何其他与轮辐分量关联的剩余边的权重。确保每个轮辐分量的两条辐条（连接到轴分量）都比其指定的2级轮辐边重，而在轴分量的辐条中，有一条是该权重带中最小的，这样轴分量就只选择一条辐条。这迫使2级的轮辐分量也表现出相同的配对行为，从而得到\n$$\nc_{2}=\\left\\lfloor \\frac{c_{1}}{2} \\right\\rfloor\n$$。\n\n3) 对第 $3, 4, \\ldots$ 级重复这种分层分配，使得在第 $j$ 级，指定的轮辐边的权重都在一个权重带内，该权重带严格高于之前所有级别，并严格低于在该级别必须避开的任何边的权重。通过在每个权重带内选择不同的整数来保证权重的唯一性。这确保了在每个阶段 $i$，选择模式完全相同：轮辐分量沿圈配对；轴分量恰好选择一条辐条；并且连通分量计数满足等式\n$$\nc_{i+1}=\\left\\lfloor \\frac{c_{i}}{2} \\right\\rfloor\n$$。\n\n根据归纳法，经过 $t$ 个阶段后，我们有 $c_{t}=\\left\\lfloor \\frac{n}{2^{t}} \\right\\rfloor$，因此，直到只剩下一个连通分量时，Borůvka 算法的最大可能迭代次数是满足 $2^{t} \\le n < 2^{t+1}$ 的唯一整数 $t$，即\n$$\n\\left\\lfloor \\log_{2} n \\right\\rfloor\n$$。\n\n因此，在轮图 $W_{n}$ 上，Borůvka 算法在最坏情况下（在所有不同正整数权重分配中最大化）的迭代次数恰好是 $\\left\\lfloor \\log_{2} n \\right\\rfloor$。", "answer": "$$\\boxed{\\left\\lfloor \\log_{2} n \\right\\rfloor}$$", "id": "1484805"}]}