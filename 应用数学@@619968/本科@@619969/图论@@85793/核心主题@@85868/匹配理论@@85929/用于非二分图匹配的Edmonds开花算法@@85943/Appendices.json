{"hands_on_practices": [{"introduction": "掌握Edmonds开花算法的第一步是观察它的实际运作。本练习将引导你完成一次寻找增广路径的搜索迭代，最终发现算法得名的关键结构——“花”。通过遵循一个确定性的搜索过程，你将亲眼见证遍历交错树是如何自然地揭示出奇数长度的环的。[@problem_id:1500635]", "problem": "考虑在一个一般非二分图中寻找最大匹配的问题。给定一个图 $G=(V, E)$ 和一个初始匹配 $M \\subset E$。你将使用 Edmonds 花朵算法的核心原理，执行一轮寻找增广路径的搜索。\n\n该图由顶点集 $V = \\{1, 2, 3, 4, 5, 6, 7\\}$ 和边集 $E = \\{(1,2), (1,5), (2,3), (3,4), (3,6), (4,5), (6,7)\\}$ 定义。\n\n当前匹配为 $M = \\{(1,2), (3,4), (6,7)\\}$。\n\n寻找增广路径的搜索从暴露点 $r=5$ 开始。该搜索通过标记顶点来构建一棵交错树。根节点 $r$ 被标记为“外点”。搜索从一个未扫描的“外点” $u$ 继续进行。对于 $u$ 的每个邻居 $v$：\n1.  如果 $v$ 在树中且被标记为“内点”，则边 $(u,v)$ 是树结构的一部分，应被忽略。\n2.  如果 $v$ 不在树中且是一个已匹配顶点（即存在某条边 $(v,w) \\in M$），则将路径 $u-v-w$ 添加到交错树中。顶点 $v$ 被标记为“内点”，顶点 $w$ 被标记为“外点”。\n3.  如果 $v$ 在树中且也被标记为“外点”，则检测到了一个奇数长度的环，称为“花朵”。\n\n为确保搜索过程的确定性，当从一个“外点”进行探索时，你必须按其邻居顶点标号的升序来考虑它们。同样地，当选择下一个要探索的“外点”时，应在所有未扫描的“外点”中选择顶点标号最小的那个。\n\n你的任务是从暴露点 $r=5$ 开始执行此搜索过程。找出构成该算法检测到的第一个花朵的顶点集。\n\n下列哪个顶点集合构成了花朵？\n\nA. $\\{3, 6, 7\\}$\nB. $\\{1, 5, 4, 3, 6, 7\\}$\nC. $\\{1, 2, 3, 4, 5\\}$\nD. $\\{1, 5, 4\\}$\nE. $\\{1, 2, 3\\}$", "solution": "给定图 $G=(V,E)$，其中 $V=\\{1,2,3,4,5,6,7\\}$，$E=\\{(1,2),(1,5),(2,3),(3,4),(3,6),(4,5),(6,7)\\}$，以及一个初始匹配 $M=\\{(1,2),(3,4),(6,7)\\}$。暴露点是 $r=5$，因为 $5$ 不与 $M$ 中的任何边相关联。我们从标记为外点的 $r=5$ 开始 Edmonds 搜索，并根据给定规则构建交错树，即按标号升序探索邻居，并按标号升序扫描外点。\n\n初始化树，根节点 $5$ 被标记为外点。未扫描的外点集合是 $\\{5\\}$。\n\n扫描外点 $u=5$。其邻居按升序排列为 $1$ 和 $4$。\n- 考虑 $v=1$。顶点 $1$ 不在树中，且在 $M$ 中与 $2$ 匹配。根据规则2，将路径 $5-1-2$ 添加到树中：$5-1$ 是非匹配边，$1-2$ 是匹配边。将 $1$ 标记为内点，$2$ 标记为外点。\n- 考虑 $v=4$。顶点 $4$ 不在树中，且在 $M$ 中与 $3$ 匹配。根据规则2，将路径 $5-4-3$ 添加到树中：$5-4$ 是非匹配边，$4-3$ 是匹配边。将 $4$ 标记为内点，$3$ 标记为外点。\n\n扫描完 $5$ 后，树中的外点为 $\\{5,2,3\\}$。未扫描的外点是 $\\{2,3\\}$。根据确定性规则，选择最小的，即 $u=2$。\n\n扫描外点 $u=2$。其邻居按升序排列为 $1$ 和 $3$。\n- 考虑 $v=1$。顶点 $1$ 已经在树中并被标记为内点。根据规则1，忽略边 $(2,1)$。\n- 考虑 $v=3$。顶点 $3$ 已经在树中并被标记为外点。根据规则3，这发现了一个花朵。\n\n要确定这个花朵，我们找到在以 $5$ 为根的交错树中，从 $u=2$ 和 $v=3$ 到它们最近公共祖先的唯一路径，并加上边 $(2,3)$。树中的父节点关系如下：\n- $2$ 通过匹配边 $(1,2)$ 的父节点是 $1$，$1$ 通过非匹配边 $(5,1)$ 的父节点是 $5$，所以从 $2$ 到根的路径是 $2-1-5$。\n- $3$ 通过匹配边 $(4,3)$ 的父节点是 $4$，$4$ 通过非匹配边 $(5,4)$ 的父节点是 $5$，所以从 $3$ 到根的路径是 $3-4-5$。\n最近公共祖先是 $5$。因此，形成的环是\n$$\n2-3-4-5-1-2\n$$\n它有 $5$ 条边，因此是奇数环。这个花朵中的顶点集是 $\\{1,2,3,4,5\\}$。\n\n与选项比较，这对应于选项 C。", "answer": "$$\\boxed{C}$$", "id": "1500635"}, {"introduction": "见证了“花”的形成之后，我们不禁要问：连接交错树中两个“外部”顶点的边究竟有何特别之处？本练习旨在深入探讨“花”检测背后的理论基础。通过分析不同类型的非树边，你将巩固对算法核心逻辑的理解——为何某些连接能形成“花”而另一些则不能。[@problem_id:1500580]", "problem": "在图算法的研究中，于一般（非二分）图中寻找最大匹配是一个经典问题。Edmonds开花算法提供了一个高效的解决方案。该算法通过从一个未匹配的顶点出发，使用一种称为交错树的结构来搜索增广路径。在这棵树中，顶点被标记为“外点”（距离根为偶数）或“内点”（距离根为奇数）。\n\n考虑一个图 $G=(V, E)$，其顶点集为 $V = \\{A, B, C, D, E, F, G, H, I\\}$，边集为 $E$。给定一个非最大匹配 $M = \\{(B,C), (D,E), (F,G), (H,I)\\}$。算法从未匹配的顶点 $A$ 开始构建一棵交错树。\n\n树的生长过程如下：\n1.  顶点 $A$ 是根（0层，外点）。\n2.  探索边 $(A,B) \\in E \\setminus M$。顶点 $B$ 被添加到树中（1层，内点）。\n3.  探索边 $(B,C) \\in M$。顶点 $C$ 被添加（2层，外点）。\n4.  探索边 $(C,D) \\in E \\setminus M$。顶点 $D$ 被添加（3层，内点）。\n5.  探索边 $(D,E) \\in M$。顶点 $E$ 被添加（4层，外点）。\n6.  探索边 $(E,F) \\in E \\setminus M$。顶点 $F$ 被添加（5层，内点）。\n7.  探索边 $(F,G) \\in M$。顶点 $G$ 被添加（6层，外点）。\n\n此时，算法检查了原始图 $G$ 中两条尚未用于生长树的额外边：边 $(B, F)$ 和边 $(C, G)$。\n\n基于Edmonds开花算法的原理，以下哪个陈述最准确地描述了算法的下一个直接步骤？\n\nA. 算法识别出连接两个外点的边 $(C,G)$，发现形成的奇数长度圈（花），并将该圈收缩成一个伪顶点以继续搜索。\nB. 算法识别出连接两个内点的边 $(B,F)$，发现形成的奇数长度圈，并将该圈收缩成一个伪顶点以继续搜索。\nC. 算法发现边 $(C,G)$ 创建了一条从 $A$ 到图中未匹配部分的直接增广路径，并立即使用它来增广匹配 $M$。\nD. 算法忽略边 $(B,F)$ 和 $(C,G)$，因为它们连接了交错树中已存在的顶点，并继续探索树中顶点的其他未访问邻居。\nE. 算法发现边 $(B,F)$ 创建了一个偶数长度的交错圈，并用它来重新配置圈内的匹配，然后继续搜索。", "solution": "我们使用Edmonds开花算法的标准不变量，在从一个自由根开始搜索以构建交错树的过程中：距离根为偶数距离的顶点被标记为外点，奇数距离的顶点被标记为内点；从外点出发探索非匹配边，从内点出发沿着匹配边行进。如果一条非树边连接了同一棵树中的两个外点，它会形成一个奇圈（一个“花”），随后该圈被收缩。如果一条边连接了一个外点和一个树外的自由顶点，它就给出一条增广路径。连接两个内点的边不会产生增广路径或花，因此被忽略。\n\n根据所述的生长过程：\n- $A$ 是根，0层（外点）。\n- $B$ 是1层（内点），$C$ 是2层（外点），$D$ 是3层（内点），$E$ 是4层（外点），$F$ 是5层（内点），$G$ 是6层（外点）。\n\n考虑边 $(C,G)$。$C$ 和 $G$ 都是外点。设 $P$ 为从 $C$ 到 $G$ 的唯一树路径。其长度为\n$$\nL_{P} = 4 \\quad (\\text{via } C-D-E-F-G)\n$$\n这是一个偶数。添加非树边 $(C,G)$ 会形成一个长度为\n$$\nL_{P} + 1 = 5\n$$\n的圈，该长度为奇数。根据Edmonds的规则，在同一棵交错树中，连接两个外点的非树边揭示了一个奇数长度的圈（一个“花”）。因此，算法将这个圈收缩成一个单一的伪顶点，并在收缩后的图中继续搜索。这正是一个“开花”事件。\n\n现在考虑边 $(B,F)$。$B$ 和 $F$ 都是内点。它们之间的树路径长度也为偶数4，添加 $(B,F)$ 将创建一个长度为5的圈。然而，算法的“花”检测是由连接两个外点的非树边触发的；连接两个内点的边不用于形成“花”，并且在此次搜索中出于增广目的而被忽略。因此 $(B,F)$ 并不决定算法的下一个直接步骤。\n\n此外，$(C,G)$ 并未创建增广路径，因为它的两个端点都在同一棵交错树内，且都是外点；正确的操作是收缩，而不是增广。\n\n因此，下一个直接步骤是识别由 $(C,G)$ 形成的花并将其收缩。", "answer": "$$\\boxed{A}$$", "id": "1500580"}, {"introduction": "搜索交错路径、识别并收缩“花”的最终目的是找到一条增广路径。这最后一个练习聚焦于算法的“收获”环节：一旦找到增广路径 $P$，我们如何利用它来增加匹配 $M$ 的大小？本练习将通过计算对称差 $M \\oplus E_P$ 来生成一个更大的新匹配 $M'$，从而巩固你对匹配算法终极目标的理解。[@problem_id:1500643]", "problem": "考虑一个无向图 $G=(V, E)$，其顶点集为 $V = \\{1, 2, 3, 4, 5, 6, 7, 8, 9, 10\\}$，边集为 $E = \\{(1,2), (2,3), (3,4), (4,5), (5,6), (6,7), (7,3), (6,8), (8,9), (9,10)\\}$。\n\n此图中的一个初始匹配 $M$ 由边集 $M = \\{(2,3), (4,5), (6,7), (8,9)\\}$ 给出。\n\n在寻找最大匹配的过程中，找到了一条增广路径 $P$。增广路径是图中的一条路径，它在不属于匹配的边和属于匹配的边之间交替，并以未匹配的顶点开始和结束。找到的具体增广路径由顶点序列 $P = (1, 2, 3, 7, 6, 8, 9, 10)$ 给出。设 $E_P$ 为该路径中的边集。\n\n通过取 $M$ 与路径 $P$ 中边集的对称差，可以将匹配 $M$ 增广成一个新的、更大的匹配 $M'$。对称差运算定义为 $M' = M \\oplus E_P = (M \\setminus E_P) \\cup (E_P \\setminus M)$。\n\n确定新的匹配 $M'$。下列哪个边集代表 $M'$？\n\nA. $\\{(1,2), (3,7), (6,8), (9,10)\\}$\nB. $\\{(1,2), (4,5), (6,7), (8,9)\\}$\nC. $\\{(1,2), (3,7), (4,5), (6,8), (9,10)\\}$\nD. $\\{(1,2), (2,3), (3,7), (6,7), (6,8), (8,9), (9,10)\\}$\nE. $\\{(2,3), (4,5), (6,7), (8,9)\\}$", "solution": "我们已知一个初始匹配 $M=\\{(2,3),(4,5),(6,7),(8,9)\\}$ 和一条增广路径 $P=(1,2,3,7,6,8,9,10)$。路径上的边集由 $P$ 中的连续顶点对得到：\n$$\nE_{P}=\\{(1,2),(2,3),(3,7),(7,6),(6,8),(8,9),(9,10)\\}\n$$\n根据增广路径的定义，沿路径 $P$ 的边在不属于 $M$ 的边和属于 $M$ 的边之间交替，并以不属于 $M$ 的边开始和结束。确实，沿路径 $P$ 我们有 $(1,2)\\notin M$、$(2,3)\\in M$、$(3,7)\\notin M$、$(7,6)\\in M$、$(6,8)\\notin M$、$(8,9)\\in M$、$(9,10)\\notin M$。\n\n增广后的匹配由对称差定义：\n$$\nM' = M \\oplus E_{P} = (M \\setminus E_{P}) \\cup (E_{P} \\setminus M)\n$$\n我们计算这两个部分。首先，\n$M \\setminus E_{P} = \\{(4,5)\\}$，\n因为 $(2,3)$、$(6,7)$ 和 $(8,9)$ 均在 $E_{P}$ 中，而 $(4,5)$ 不在。其次，\n$E_{P} \\setminus M = \\{(1,2),(3,7),(6,8),(9,10)\\}$，\n即从 $E_{P}$ 中移除属于 $M$ 的边。因此，\n$$\nM' = \\{(4,5)\\} \\cup \\{(1,2),(3,7),(6,8),(9,10)\\} = \\{(1,2),(3,7),(4,5),(6,8),(9,10)\\}\n$$\n这对应于选项 C。", "answer": "$$\\boxed{C}$$", "id": "1500643"}]}