{"hands_on_practices": [{"introduction": "在无权图中计算最短路径是图论中的一个基本问题。广度优先搜索 (BFS) 是解决此类问题的标准算法，它通过逐层探索图的节点来保证找到最短的路径（以边的数量衡量）。通过这个练习，你将亲手应用 BFS 算法来解决一个具体的网络问题，从而巩固对该算法核心机制的理解。[@problem_id:1497489]", "problem": "一位系统工程师正在分析一个小型数据中心的网络拓扑。该数据中心由8台服务器组成，标号从0到7。如果两台服务器之间有直接通信链路，数据包就可以通过一次“跳跃”在它们之间传输。该网络是无向的，意味着如果服务器A可以通过一次跳跃将数据包发送到服务器B，那么服务器B也可以通过一次跳跃将数据包发送到服务器A。\n\n网络连接描述如下：\n- 服务器0连接到服务器1、3和4。\n- 服务器1连接到服务器0和2。\n- 服务器2连接到服务器1、5和6。\n- 服务器3连接到服务器0和5。\n- 服务器4连接到服务器0。\n- 服务器5连接到服务器2、3和7。\n- 服务器6连接到服务器2。\n- 服务器7连接到服务器5。\n\n服务器0被指定为日常备份过程的主源。该工程师需要确定一个数据包从服务器0传输到网络中其他每一台服务器所需的最少跳跃次数。\n\n您的任务是找到从服务器0到服务器1、2、3、4、5、6和7的最小跳跃次数（也称为距离）。请将您的最终答案表示为一个由七个整数组成的序列，按此确切顺序对应于距离d(0,1)、d(0,2)、d(0,3)、d(0,4)、d(0,5)、d(0,6)和d(0,7)。", "solution": "该问题要求计算从源服务器（顶点）到网络（图）中所有其他服务器的最小跳跃次数。这等同于在无权图中寻找最短路径距离。解决这个问题的标准算法是广度优先搜索（BFS）。\n\n我们将网络表示为一个图 $G=(V, E)$，其中顶点集为 $V = \\{0, 1, 2, 3, 4, 5, 6, 7\\}$，边由连接定义。源顶点是 $s = 0$。我们需要找到对于所有 $v \\in V \\setminus \\{s\\}$ 的距离 $d(s, v)$。\n\n我们将使用一个队列来管理待访问的顶点，并使用一个数组 `dist` 来存储从源到每个顶点的最小距离。我们初始化 `dist[0] = 0`，对于所有其他顶点 $v$，初始化 `dist[v] = \\infty$。\n\n1.  **初始化：**\n    -   初始化一个队列 `Q`。\n    -   初始化一个大小为8的距离数组 `dist`，其中 `dist[0] = 0`，所有其他条目为 $\\infty$。\n    -   将源顶点0入队到 `Q`。\n    -   初始状态：`Q = [0]`，`dist = [0, \\infty, \\infty, \\infty, \\infty, \\infty, \\infty, \\infty]`。\n\n2.  **迭代 1 (层级 0)：**\n    -   顶点0出队。`Q` 现在为空。\n    -   探索0的邻居：{1, 3, 4}。\n    -   对于每个邻居 `v`，如果 `dist[v]` 是 $\\infty$，我们更新它的距离并将其入队。\n        -   邻居1：`dist[1]` 是 $\\infty$。设置 `dist[1] = dist[0] + 1 = 1`。将1入队。\n        -   邻居3：`dist[3]` 是 $\\infty$。设置 `dist[3] = dist[0] + 1 = 1`。将3入队。\n        -   邻居4：`dist[4]` 是 $\\infty$。设置 `dist[4] = dist[0] + 1 = 1`。将4入队。\n    -   处理完顶点0后的状态：`Q = [1, 3, 4]`，`dist = [0, 1, \\infty, 1, 1, \\infty, \\infty, \\infty]`。\n\n3.  **迭代 2 (层级 1)：**\n    -   顶点1出队。`Q` 现在是 `[3, 4]`。\n    -   探索1的邻居：{0, 2}。\n        -   邻居0：`dist[0]` 是 0 (不是 $\\infty$)，所以我们不执行任何操作。\n        -   邻居2：`dist[2]` 是 $\\infty$。设置 `dist[2] = dist[1] + 1 = 2`。将2入队。\n    -   状态：`Q = [3, 4, 2]`，`dist = [0, 1, 2, 1, 1, \\infty, \\infty, \\infty]`。\n\n4.  **迭代 3 (层级 1)：**\n    -   顶点3出队。`Q` 现在是 `[4, 2]`。\n    -   探索3的邻居：{0, 5}。\n        -   邻居0：`dist[0]` 是 0，不执行任何操作。\n        -   邻居5：`dist[5]` 是 $\\infty$。设置 `dist[5] = dist[3] + 1 = 2`。将5入队。\n    -   状态：`Q = [4, 2, 5]`，`dist = [0, 1, 2, 1, 1, 2, \\infty, \\infty]`。\n\n5.  **迭代 4 (层级 1)：**\n    -   顶点4出队。`Q` 现在是 `[2, 5]`。\n    -   探索4的邻居：{0}。\n        -   邻居0：`dist[0]` 是 0，不执行任何操作。\n    -   状态保持不变：`Q = [2, 5]`，`dist = [0, 1, 2, 1, 1, 2, \\infty, \\infty]`。\n\n6.  **迭代 5 (层级 2)：**\n    -   顶点2出队。`Q` 现在是 `[5]`。\n    -   探索2的邻居：{1, 5, 6}。\n        -   邻居1：`dist[1]` 是 1，不执行任何操作。\n        -   邻居5：`dist[5]` 是 2，不执行任何操作。\n        -   邻居6：`dist[6]` 是 $\\infty$。设置 `dist[6] = dist[2] + 1 = 3`。将6入队。\n    -   状态：`Q = [5, 6]`，`dist = [0, 1, 2, 1, 1, 2, 3, \\infty]`。\n\n7.  **迭代 6 (层级 2)：**\n    -   顶点5出队。`Q` 现在是 `[6]`。\n    -   探索5的邻居：{2, 3, 7}。\n        -   邻居2：`dist[2]` 是 2，不执行任何操作。\n        -   邻居3：`dist[3]` 是 1，不执行任何操作。\n        -   邻居7：`dist[7]` 是 $\\infty$。设置 `dist[7] = dist[5] + 1 = 3`。将7入队。\n    -   状态：`Q = [6, 7]`，`dist = [0, 1, 2, 1, 1, 2, 3, 3]`。\n\n8.  **迭代 7 (层级 3)：**\n    -   顶点6出队。`Q` 现在是 `[7]`。\n    -   探索6的邻居：{2}。\n        -   邻居2：`dist[2]` 是 2，不执行任何操作。\n    -   `dist` 没有变化。\n\n9.  **迭代 8 (层级 3)：**\n    -   顶点7出队。`Q` 现在为空。\n    -   探索7的邻居：{5}。\n        -   邻居5：`dist[5]` 是 2，不执行任何操作。\n    -   `dist` 没有变化。\n\n队列 `Q` 现在为空，算法终止。最终的 `dist` 数组包含从顶点0到所有其他顶点的最短路径距离。\n\n最终距离：`dist` = `[0, 1, 2, 1, 1, 2, 3, 3]`。\n\n问题要求按顺序给出从服务器0到服务器1、2、3、4、5、6和7的距离。这些距离对应于 `dist[1]`, `dist[2]`, ..., `dist[7]`。\n\n-   $d(0, 1) = 1$\n-   $d(0, 2) = 2$\n-   $d(0, 3) = 1$\n-   $d(0, 4) = 1$\n-   $d(0, 5) = 2$\n-   $d(0, 6) = 3$\n-   $d(0, 7) = 3$\n\n所需的整数序列是 (1, 2, 1, 1, 2, 3, 3)。", "answer": "$$\n\\boxed{\\begin{pmatrix} 1 & 2 & 1 & 1 & 2 & 3 & 3 \\end{pmatrix}}\n$$", "id": "1497489"}, {"introduction": "当我们从无权图转向加权图时，边的“成本”（如延迟、距离或费用）变得至关重要，此时我们需要更通用的算法。Dijkstra 算法是寻找总权重最小路径的经典方法，它通过优先探索当前已知距离最短的节点来实现这一目标。这个练习将帮助你掌握 Dijkstra 算法的核心思想，并将其应用于一个模拟真实世界网络延迟的场景中。[@problem_id:1497507]", "problem": "为了连接南极洲的五个研究站，一个全新的高速数据网络正在建设中。这些研究站的名称分别是 IceBase、PolarPoint、GlacierHub、DeepField 和 AuroraStation。由于环境极端，仅在某些研究站对之间建立了直接光纤链路。数据包沿直接链路传输所需的时间称为延迟。\n\n网络拓扑及其相关的延迟描述如下：\n- IceBase 和 PolarPoint 之间存在链路，延迟为 4 毫秒 (ms)。\n- IceBase 和 GlacierHub 之间存在链路，延迟为 10 毫秒 (ms)。\n- PolarPoint 和 GlacierHub 之间存在链路，延迟为 3 毫秒 (ms)。\n- PolarPoint 和 DeepField 之间存在链路，延迟为 18 毫秒 (ms)。\n- GlacierHub 和 DeepField 之间存在链路，延迟为 7 毫秒 (ms)。\n- GlacierHub 和 AuroraStation 之间存在链路，延迟为 2 毫秒 (ms)。\n- DeepField 和 AuroraStation 之间存在链路，延迟为 1 毫秒 (ms)。\n\n所有链路都是双向的，这意味着数据可以以相同的延迟在任一方向上传输。数据包可以通过中间站进行中继以到达其目的地。\n\n计算一个数据包从 IceBase 传输到 DeepField 所需的最小总延迟。请以毫秒为单位，用一个整数表示您的答案。", "solution": "将该网络建模为一个无向加权图，其顶点为 $V=\\{\\text{IceBase},\\text{PolarPoint},\\text{GlacierHub},\\text{DeepField},\\text{AuroraStation}\\}$，边权重 $w(u,v)$ 等于给定的延迟（单位为毫秒）。该问题要求计算从 IceBase 到 DeepField 的最小总延迟，这是一个最短路径问题：最小化一条路径上的边权重之和。由于所有边权重均为非负值，因此可以应用 Dijkstra 算法。\n\n设 $d(x)$ 表示从 IceBase 到节点 $x$ 的当前已知最短距离，初始化为 $d(\\text{IceBase})=0$，而其他节点则为 $d(x)=+\\infty$。从未访问节点中选择 $d$ 值最小的节点，并对其边进行松弛。\n\n初始化：\n$d(\\text{IceBase})=0$, $d(\\text{PolarPoint})=+\\infty$, $d(\\text{GlacierHub})=+\\infty$, $d(\\text{DeepField})=+\\infty$, $d(\\text{AuroraStation})=+\\infty$。\n\n从 IceBase 出发，松弛其邻居节点：\n- $d(\\text{PolarPoint})=\\min\\{+\\infty,\\,0+w(\\text{IceBase},\\text{PolarPoint})\\}=\\min\\{+\\infty,\\,0+4\\}=4$。\n- $d(\\text{GlacierHub})=\\min\\{+\\infty,\\,0+w(\\text{IceBase},\\text{GlacierHub})\\}=\\min\\{+\\infty,\\,0+10\\}=10$。\n\n选择具有最小暂定距离的未访问节点：PolarPoint，其 $d=4$。松弛其邻居节点：\n- 经由 PolarPoint 到达 GlacierHub: $d(\\text{GlacierHub})=\\min\\{10,\\,4+w(\\text{PolarPoint},\\text{GlacierHub})\\}=\\min\\{10,\\,4+3\\}=7$。\n- 经由 PolarPoint 到达 DeepField: $d(\\text{DeepField})=\\min\\{+\\infty,\\,4+w(\\text{PolarPoint},\\text{DeepField})\\}=\\min\\{+\\infty,\\,4+18\\}=22$。\n\n选择下一个 $d$ 值最小的节点：GlacierHub，其 $d=7$。松弛其邻居节点：\n- 经由 GlacierHub 到达 DeepField: $d(\\text{DeepField})=\\min\\{22,\\,7+w(\\text{GlacierHub},\\text{DeepField})\\}=\\min\\{22,\\,7+7\\}=14$。\n- 经由 GlacierHub 到达 AuroraStation: $d(\\text{AuroraStation})=\\min\\{+\\infty,\\,7+w(\\text{GlacierHub},\\text{AuroraStation})\\}=\\min\\{+\\infty,\\,7+2\\}=9$。\n\n选择下一个 $d$ 值最小的节点：AuroraStation，其 $d=9$。松弛其邻居节点 DeepField：\n- 经由 AuroraStation 到达 DeepField: $d(\\text{DeepField})=\\min\\{14,\\,9+w(\\text{AuroraStation},\\text{DeepField})\\}=\\min\\{14,\\,9+1\\}=10$。\n\n选择下一个 $d$ 值最小的节点：DeepField，其 $d=10$。由于这是目的地，算法可以终止，求得最小总延迟为 $d(\\text{DeepField})=10$。一个对应的最短路径是 IceBase $\\to$ PolarPoint $\\to$ GlacierHub $\\to$ AuroraStation $\\to$ DeepField，总延迟为 $4+3+2+1=10$。", "answer": "$$\\boxed{10}$$", "id": "1497507"}, {"introduction": "图的直径是衡量网络性能的一个关键指标，它代表了网络中的“最长最短路径”。虽然暴力计算直径通常效率低下，但对于树这种特殊的图结构，我们可以采用一种巧妙高效的两步法。这个练习不仅能让你实践在树中计算距离，还能让你了解如何利用图的结构特性来设计更智能的算法。[@problem_id:1497476]", "problem": "一个研究机构建立了一个连接多个服务器的分布式数据网络。为防止数据回路并确保任意两台服务器之间存在唯一路径，该网络被配置为树形结构。服务器由从0到11的整数标签标识。两台服务器之间的直接连接称为一条链路。任意两台服务器之间的数据传输时间延迟与它们之间唯一路径上的链路数量成正比，该数量被称为跳数。\n\n网络拓扑由以下链路集合定义，其中每一对`(a, b)`代表服务器`a`和服务器`b`之间的一条直接链路：\n`{(0, 1), (1, 2), (1, 5), (2, 3), (2, 6), (3, 4), (3, 8), (4, 9), (6, 7), (6, 11), (9, 10)}`\n\n一名系统分析师需要找出网络中的最坏情况通信延迟。这对应于任意一对服务器之间的最大可能跳数。这个最大跳数是多少？", "solution": "将该网络建模为一棵树 $G=(V,E)$，其顶点集为 $V=\\{0,1,\\dots,11\\}$，边集为\n$$E=\\{(0,1),(1,2),(1,5),(2,3),(2,6),(3,4),(3,8),(4,9),(6,7),(6,11),(9,10)\\}.$$\n对于顶点 $u,v\\in V$，跳数是图距离 $d(u,v)$，即 $u$ 和 $v$ 之间唯一路径上的边数。所求的最坏情况延迟是树的直径\n$$D=\\max_{u,v\\in V} d(u,v).$$\n树的一个标准性质是其直径的端点必定是叶节点（度为一的顶点）。计算各顶点的度以找出叶节点：\n- $\\deg(0)=1$, $\\deg(1)=3$, $\\deg(2)=3$, $\\deg(3)=3$, $\\deg(4)=2$, $\\deg(5)=1$, $\\deg(6)=3$, $\\deg(7)=1$, $\\deg(8)=1$, $\\deg(9)=2$, $\\deg(10)=1$, $\\deg(11)=1$。\n因此，叶节点集合为 $L=\\{0,5,7,8,10,11\\}$。\n\n通过枚举唯一路径并计算边数，来计算从叶节点 $10$ 到其他叶节点的距离：\n- $d(10,0)$ 途经 $10\\to 9\\to 4\\to 3\\to 2\\to 1\\to 0$：$6$ 条边。\n- $d(10,5)$ 途经 $10\\to 9\\to 4\\to 3\\to 2\\to 1\\to 5$：$6$ 条边。\n- $d(10,7)$ 途经 $10\\to 9\\to 4\\to 3\\to 2\\to 6\\to 7$：$6$ 条边。\n- $d(10,11)$ 途经 $10\\to 9\\to 4\\to 3\\to 2\\to 6\\to 11$：$6$ 条边。\n- $d(10,8)$ 途经 $10\\to 9\\to 4\\to 3\\to 8$：$4$ 条边。\n因此 $\\max_{v\\in L} d(10,v)=6$，所以 $D\\geq 6$。\n\n为了证明不存在更长的距离，注意到顶点 $3$ 位于从 $10$ 到树中其余部分的唯一路径上。从 $3$ 出发经过 $4$ 到达叶节点的最长路径是 $3\\to 4\\to 9\\to 10$，有 $3$ 条边；从 $3$ 出发经过 $2$ 到达叶节点的最长路径最多有 $3$ 条边（例如，$3\\to 2\\to 1\\to 0$，$3\\to 2\\to 6\\to 7$，或 $3\\to 2\\to 6\\to 11$）。因此，任何经过顶点 $3$ 的路径长度最多为 $3+3=6$。由于从 $10$ 到任何其他叶节点的每条路径都经过 $3$，并且我们已经找到了长度为 $6$ 的路径，因此直径满足 $D=6$。\n\n因此，网络中的最大跳数是 $6$。", "answer": "$$\\boxed{6}$$", "id": "1497476"}]}