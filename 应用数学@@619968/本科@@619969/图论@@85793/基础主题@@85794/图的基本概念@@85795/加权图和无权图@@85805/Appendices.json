{"hands_on_practices": [{"introduction": "在加权图中，最基本的操作之一是计算特定路径的总权重。这个练习提供了一个具体的场景，让你在一个假设的城市气动管道网络中，通过累加各段路径的成本来计算总行程时间。通过这个实践，你将掌握计算路径成本这一基本技能，为后续更复杂的路径寻找问题打下坚实的基础。[@problem_id:1555066]", "problem": "一座未来城市 Aethelburg 使用气动管道运营一个配送网络。包裹穿过一段管道所需的时间 $T$ 由公式 $T = \\alpha L$ 计算，其中 $L$ 是管道段的长度（单位为公里），$\\alpha$ 是时间系数（单位为分钟/公里）。$\\alpha$ 的值取决于管道的压力梯度等级：1级管道的 $\\alpha = 2.5$ 分钟/公里，2级管道的 $\\alpha = 3.5$ 分钟/公里。\n\n该网络包含几个节点，包括 Central Hub (CH)、North Station (NS)、West District (WD)、East Plaza (EP) 和 South Terminal (ST)。一个包裹必须从 Central Hub 发送到 South Terminal。正在考虑两条可能的路线：\n\n-   **路线 Alpha**：从 Central Hub 到 North Station，然后再到 South Terminal 的路径。\n-   **路线 Beta**：从 Central Hub 到 West District，再到 East Plaza，最后到 South Terminal 的路径。\n\n构成这些路线的管道段的属性如下：\n-   从 Central Hub 到 North Station 的管道段长度为 4.0 公里，是1级。\n-   从 North Station 到 South Terminal 的管道段长度为 6.2 公里，是2级。\n-   从 Central Hub 到 West District 的管道段长度为 3.5 公里，是2级。\n-   从 West District 到 East Plaza 的管道段长度为 2.0 公里，是1级。\n-   从 East Plaza 到 South Terminal 的管道段长度为 4.8 公里，是1级。\n\n确定两条路线中较快者的总行程时间。答案以分钟为单位，并四舍五入到三位有效数字。", "solution": "穿过一段管道的时间由线性关系 $T=\\alpha L$ 给出，其中 $L$ 的单位是公里，$\\alpha$ 的单位是分钟/公里。对于1级管道，$\\alpha=2.5$，对于2级管道，$\\alpha=3.5$。\n\n对于路线 Alpha (Central Hub $\\to$ North Station $\\to$ South Terminal)，分段计算时间并求和：\n$$T_{\\text{CH}\\to\\text{NS}}=\\alpha_{1}L=2.5\\times 4.0=10.0\\ \\text{min}$$\n$$T_{\\text{NS}\\to\\text{ST}}=\\alpha_{2}L=3.5\\times 6.2=21.7\\ \\text{min}$$\n$$T_{\\text{Alpha}}=10.0+21.7=31.7\\ \\text{min}$$\n\n对于路线 Beta (Central Hub $\\to$ West District $\\to$ East Plaza $\\to$ South Terminal)，计算时间并求和：\n$$T_{\\text{CH}\\to\\text{WD}}=\\alpha_{2}L=3.5\\times 3.5=12.25\\ \\text{min}$$\n$$T_{\\text{WD}\\to\\text{EP}}=\\alpha_{1}L=2.5\\times 2.0=5.0\\ \\text{min}$$\n$$T_{\\text{EP}\\to\\text{ST}}=\\alpha_{1}L=2.5\\times 4.8=12.0\\ \\text{min}$$\n$$T_{\\text{Beta}}=12.25+5.0+12.0=29.25\\ \\text{min}$$\n\n比较总时间，$T_{\\text{Beta}}=29.25\\ \\text{min}$ 小于 $T_{\\text{Alpha}}=31.7\\ \\text{min}$，因此路线 Beta 更快。四舍五入到三位有效数字：\n$$29.25\\ \\text{min}\\to 29.3\\ \\text{min}.$$", "answer": "$$\\boxed{29.3}$$", "id": "1555066"}, {"introduction": "知道了如何计算给定路径的成本后，下一个自然的问题是如何找到成本最低的路径。本练习将引导你逐步执行 Dijkstra 算法的前几个迭代，这是解决单源最短路径问题的基石算法。通过手动追踪，你将深入理解该算法如何系统性地探索图，以保证找到最优路径。[@problem_id:1414565]", "problem": "考虑一个由带权无向图 $G=(V, E)$ 表示的数据中心网络，其中顶点是数据中心，边上的权重表示数据包在双向连接之间传输的延迟（以毫秒为单位）。\n\n数据中心集合为 $V = \\{S, T, U, V, W, X, Y\\}$。\n\n网络连接及其对应的延迟以带权重边的列表形式给出：\n- (S, T)，权重为 6\n- (S, U)，权重为 2\n- (T, U)，权重为 5\n- (T, V)，权重为 1\n- (U, V)，权重为 4\n- (U, W)，权重为 8\n- (V, W)，权重为 3\n- (V, X)，权重为 7\n- (W, Y)，权重为 2\n- (X, Y)，权重为 4\n\n您的任务是追踪 Dijkstra 算法的执行过程，以找到从源顶点 $S$ 到所有其他顶点的最短路径。算法的“一次迭代”定义为：从未访问过的顶点集合中选择一个顶点，并最终确定其最短路径距离的过程。当多个未访问顶点具有相同的最小暂定距离时，应选择按字母顺序排在最前面的顶点。\n\n在恰好三次迭代之后，会有一组顶点从 $S$ 出发的最短路径距离被最终确定。请计算这些最终最短路径距离之和。", "solution": "题目要求我们模拟在给定的图上，从源顶点 $S$ 开始的 Dijkstra 算法的前三次迭代。我们将维护一个已访问（其最短路径已被最终确定）的顶点集合，以及一个从 $S$ 到其他每个顶点的暂定最短距离的记录。\n\n设 $d(v)$ 为从源点 $S$ 到顶点 $v$ 已找到的最短距离。\n设 $P$ 为未访问顶点的优先队列，按其距离 $d(v)$ 排序。\n设 $K$ 为已访问顶点的集合。\n\n**初始化：**\n- 已访问顶点集合为空：$K = \\emptyset$。\n- 初始距离设置为 $d(S) = 0$，对于所有其他顶点 $v \\in V \\setminus \\{S\\}$，其距离为 $d(v) = \\infty$。\n- 距离状态为：\n  $d(S) = 0$, $d(T) = \\infty$, $d(U) = \\infty$, $d(V) = \\infty$, $d(W) = \\infty$, $d(X) = \\infty$, $d(Y) = \\infty$。\n\n**第 1 次迭代：**\n1.  选择距离最小的未访问顶点。该顶点是 $S$，其距离为 $d(S) = 0$。\n2.  将 $S$ 添加到已访问顶点集合中。$K = \\{S\\}$。距离 $d(S)=0$ 现在是最终距离。\n3.  更新 $S$ 的邻居（即 $T$ 和 $U$）的距离。\n    - 对于邻居 $T$：新的潜在距离是 $d(S) + \\text{weight}(S, T) = 0 + 6 = 6$。由于 $6 < d(T) = \\infty$，我们更新 $d(T) = 6$。\n    - 对于邻居 $U$：新的潜在距离是 $d(S) + \\text{weight}(S, U) = 0 + 2 = 2$。由于 $2 < d(U) = \\infty$，我们更新 $d(U) = 2$。\n4.  第一次迭代后，距离为：\n    $d(S) = 0$, $d(T) = 6$, $d(U) = 2$, $d(V) = \\infty$, $d(W) = \\infty$, $d(X) = \\infty$, $d(Y) = \\infty$。\n    已访问顶点集合为 $K = \\{S\\}$。\n\n**第 2 次迭代：**\n1.  选择暂定距离最小的未访问顶点。未访问的顶点是 $\\{T, U, V, W, X, Y\\}$。它们的距离是 $\\{6, 2, \\infty, \\infty, \\infty, \\infty\\}$。最小值是 $d(U) = 2$。因此，我们选择 $U$。\n2.  将 $U$ 添加到已访问顶点集合中。$K = \\{S, U\\}$。距离 $d(U)=2$ 现在是最终距离。\n3.  更新 $U$ 的邻居（即 $S, T, V, W$）的距离。\n    - 邻居 $S$ 已被访问，因此忽略。\n    - 对于邻居 $T$：新的潜在距离是 $d(U) + \\text{weight}(U, T) = 2 + 5 = 7$。当前距离是 $d(T)=6$。由于 $7 \\not< 6$，我们不更新 $d(T)$。\n    - 对于邻居 $V$：新的潜在距离是 $d(U) + \\text{weight}(U, V) = 2 + 4 = 6$。由于 $6 < d(V) = \\infty$，我们更新 $d(V) = 6$。\n    - 对于邻居 $W$：新的潜在距离是 $d(U) + \\text{weight}(U, W) = 2 + 8 = 10$。由于 $10 < d(W) = \\infty$，我们更新 $d(W) = 10$。\n4.  第二次迭代后，距离为：\n    $d(S) = 0$, $d(T) = 6$, $d(U) = 2$, $d(V) = 6$, $d(W) = 10$, $d(X) = \\infty$, $d(Y) = \\infty$。\n    已访问顶点集合为 $K = \\{S, U\\}$。\n\n**第 3 次迭代：**\n1.  选择暂定距离最小的未访问顶点。未访问的顶点是 $\\{T, V, W, X, Y\\}$。它们的距离是 $\\{6, 6, 10, \\infty, \\infty\\}$。在 $T$ 和 $V$ 之间出现平局，两者的距离都为 6。根据题目要求，按字母顺序打破平局，所以我们选择 $T$。\n2.  将 $T$ 添加到已访问顶点集合中。$K = \\{S, U, T\\}$。距离 $d(T)=6$ 现在是最终距离。\n3.  更新 $T$ 的邻居（即 $S, U, V$）的距离。\n    - 邻居 $S$ 和 $U$ 已被访问，因此忽略。\n    - 对于邻居 $V$：新的潜在距离是 $d(T) + \\text{weight}(T, V) = 6 + 1 = 7$。当前距离是 $d(V)=6$。由于 $7 \\not< 6$，我们不更新 $d(V)$。\n4.  第三次迭代后，距离保持不变：\n    $d(S) = 0$, $d(T) = 6$, $d(U) = 2$, $d(V) = 6$, $d(W) = 10$, $d(X) = \\infty$, $d(Y) = \\infty$。\n    已访问顶点集合为 $K = \\{S, U, T\\}$。\n\n**最终计算：**\n三次迭代后，最短路径距离被最终确定的顶点集合是 $K = \\{S, U, T\\}$。\n这些顶点的最终最短路径距离为：\n- $d(S) = 0$\n- $d(U) = 2$\n- $d(T) = 6$\n\n这些距离的总和是 $0 + 2 + 6 = 8$。", "answer": "$$\\boxed{8}$$", "id": "1414565"}, {"introduction": "我们为什么需要像 Dijkstra 这样复杂的算法？难道不能总是选择局部最优的选项吗？这个练习通过比较一个简单的“朴素贪心”策略与真正的最优路径，直接解决了这个问题。这个实践对于培养算法的批判性思维至关重要，它强调了局部最优选择与全局最优解之间的重要区别。[@problem_id:1414580]", "problem": "一个小型的实验性计算机网络由六个节点组成：A、B、C、D、E 和 F。在任意两个直接连接的节点之间发送数据包的成本是一个表示延迟的正整数值。网络拓扑和相关成本由以下连接描述：\n- A与B连接，成本为2；与C连接，成本为4。\n- B与C连接，成本为3；与D连接，成本为7。\n- C与E连接，成本为1。\n- D与E连接，成本为2；与F连接，成本为1。\n- E与F连接，成本为2。\n所有连接都是双向的。\n\n一位程序员实现了一种“朴素贪心路由”（NGR）算法，用于确定数据包从源节点到目标节点的路径。NGR算法的工作方式如下：从当前节点，数据包总是被转发到具有最低成本链路的、未访问过的直接连接节点。如果最低成本出现平局，则数据包被发送到按字母顺序排在最前面的节点。重复此过程，直到数据包到达目标节点。路径不能多次访问同一节点。\n\n您的任务是将此NGR算法生成的路径与真正的最优路径进行比较。请使用两种不同的方法确定数据包从起始节点A到目标节点F的总成本：\n1. 由朴素贪心路由（NGR）算法确定的路径。\n2. 具有绝对最小可能总成本的路径。\n\n请以行矩阵 $[C_{\\mathrm{NGR}}, C_{\\mathrm{min}}]$ 的形式提供您的答案，其中 $C_{\\mathrm{NGR}}$ 是NGR路径的总成本，$C_{\\mathrm{min}}$ 是绝对最短路径的总成本。", "solution": "我们将网络建模为一个无向加权图，节点为 $A,B,C,D,E,F$，边的成本如下：$A$-$B$ 成本为 $2$，$A$-$C$ 成本为 $4$，$B$-$C$ 成本为 $3$，$B$-$D$ 成本为 $7$，$C$-$E$ 成本为 $1$，$D$-$E$ 成本为 $2$，$D$-$F$ 成本为 $1$，$E$-$F$ 成本为 $2$。\n\n从 $A$到$F$ 的朴素贪心路由（NGR）：在每一步中，从未访问过的邻居中选择成本最小的边；如果出现平局，则选择字母顺序在前的邻居。从 $A$ 出发，未访问的邻居是 $B$（成本 $2$）和 $C$（成本 $4$）；选择 $B$。从 $B$ 出发，未访问的邻居是 $C$（成本 $3$）和 $D$（成本 $7$）；选择 $C$。从 $C$ 出发，唯一未访问的邻居是 $E$（成本 $1$）；选择 $E$。从 $E$ 出发，未访问的邻居是 $D$（成本 $2$）和 $F$（成本 $2$）；按字母顺序打破平局，选择 $D$。从 $D$ 出发，唯一未访问的邻居是 $F$（成本 $1$）。因此，NGR路径为 $A \\to B \\to C \\to E \\to D \\to F$，总成本为\n$$\nC_{\\mathrm{NGR}}=2+3+1+2+1=9.\n$$\n\n从 $A$ 到 $F$ 的绝对最短路径：应用 Dijkstra 算法。初始化 $d(A)=0$；邻居节点距离为 $d(B)=2$，$d(C)=4$，其他节点为无穷大。接下来确定 $B$：更新 $d(D)=\\min(\\infty,2+7)=9$，$d(C)$ 保持为 $\\min(4,2+3)=4$。确定 $C$：更新 $d(E)=\\min(\\infty,4+1)=5$。确定 $E$：更新 $d(D)=\\min(9,5+2)=7$，$d(F)=\\min(\\infty,5+2)=7$。确定 $D$：更新 $d(F)=\\min(7,7+1)=7$。确定 $F$，距离为 $d(F)=7$。一条对应的最短路径是 $A \\to C \\to E \\to F$，成本为\n$$\nC_{\\min}=4+1+2=7.\n$$\n\n因此，所求的行矩阵是 $\\begin{pmatrix}C_{\\mathrm{NGR}} & C_{\\min}\\end{pmatrix}=\\begin{pmatrix}9 & 7\\end{pmatrix}$。", "answer": "$$\\boxed{\\begin{pmatrix} 9 & 7 \\end{pmatrix}}$$", "id": "1414580"}]}