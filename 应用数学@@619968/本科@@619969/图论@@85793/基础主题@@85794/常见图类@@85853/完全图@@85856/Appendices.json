{"hands_on_practices": [{"introduction": "图论中的一个基本技能是识别和量化网络中的特定子结构。本练习将从最基础的非平凡完全图——三角形（$K_3$）——入手，它是在社交网络、通信系统和生物网络中常见的模式。通过这个练习，你将学习如何运用组合数学的原理，来计算一个完全图 $K_n$ 中包含的三角形总数，从而深化对完全图密集连接特性的理解 [@problem_id:1491069]。", "problem": "在一个去中心化安全消息系统中，有 $n$ 台服务器。为了实现最大的弹性和数据完整性，每台服务器都与系统中的其他所有服务器保持直接的加密通信信道。这种网络拓扑等价于一个完全图 $K_n$，其中服务器是顶点，通信信道是边。\n\n一项称为“三方验证”的关键安全操作，需要一个由三个不同服务器组成的小组，其中小组中的每台服务器都能与另外两台直接通信。\n\n请推导出在一个拥有 $n$ 台服务器（其中 $n \\geq 3$）的系统中，可以形成的所有唯一三方验证小组总数的通用公式。请将您的答案表示为 $n$ 的函数。", "solution": "问题要求计算在一个拥有 $n$ 台服务器且每台服务器都与其他所有服务器相连的系统中，唯一的“三方验证小组”的总数。用图论的语言来说，该系统由一个完全图 $K_n$ 表示，其中服务器是顶点，通信信道是边。\n\n一个“三方验证小组”被定义为一组三个不同的服务器，它们之间都相互连接。在图 $K_n$ 中，这对应于一个由三个顶点组成的集合，使得该集合中任意一对顶点之间都存在一条边。这种结构恰好是一个三角形，也被称为包含3个顶点的完全子图，或 $K_3$。\n\n因此，该问题等价于在 $K_n$ 中寻找与 $K_3$ 同构的不同子图的总数。\n\n在一个完全图 $K_n$ 中，任意两个不同的顶点之间都存在一条边。这意味着，如果我们选择任意三个顶点，它们将自动形成一个三角形，因为连接它们的所有三条可能的边都保证存在。\n\n因此，计算三角形数量的任务简化为计算从总共 $n$ 个顶点中选取一个包含3个顶点的子集的方法数。我们选择三个顶点的顺序无关紧要，因为小组 {Server A, Server B, Server C} 与 {Server B, Server A, Server C} 是相同的。这是一个经典的组合学中的组合问题。\n\n从一个包含 $n$ 个不同元素的集合中选择 $k$ 个元素的方法数由二项式系数给出，记作 $\\binom{n}{k}$，其计算方式如下：\n$$ \\binom{n}{k} = \\frac{n!}{k!(n-k)!} $$\n对于我们的具体问题，我们是从 $n$ 个顶点中选择 $k=3$ 个顶点。将这些值代入公式，我们得到：\n$$ \\text{Number of triads} = \\binom{n}{3} = \\frac{n!}{3!(n-3)!} $$\n我们可以展开阶乘项来简化表达式：\n$$ \\frac{n!}{3!(n-3)!} = \\frac{n \\times (n-1) \\times (n-2) \\times (n-3)!}{(3 \\times 2 \\times 1) \\times (n-3)!} $$\n分子和分母中的 $(n-3)!$ 项相互抵消：\n$$ \\binom{n}{3} = \\frac{n(n-1)(n-2)}{3!} $$\n由于 $3! = 3 \\times 2 \\times 1 = 6$，最终的公式是：\n$$ \\frac{n(n-1)(n-2)}{6} $$\n这个表达式给出了对于任何 $n \\geq 3$ 的情况下，唯一三方验证小组的总数。", "answer": "$$\\boxed{\\frac{n(n-1)(n-2)}{6}}$$", "id": "1491069"}, {"introduction": "在掌握了子图计数后，我们转向分析图的整体属性，特别是图的着色数。一个 $n$ 阶完全图 $K_n$ 的着色数是 $n$，这是其定义的直接推论，但更有趣的问题是当我们对图的结构进行微小改变时会发生什么。这个练习模拟了一个在完全连接的网络中解除单个冲突的场景，要求你确定调度所有任务所需的最少时间槽数量，从而将图着色理论与现实世界中的资源分配问题联系起来 [@problem_id:1491134]。", "problem": "一个项目管理系统用于协调一组 $n$ 个不同的、资源密集型的任务，其中 $n \\geq 3$。在初始项目计划中，每个任务都与所有其他任务相冲突，这意味着任意两个任务都不能在同一时间槽内同时执行。\n\n经过一次系统优化后，应用了一个“兼容性补丁”，该补丁解决了恰好一对任务之间的冲突。我们将这对任务称为任务 A 和任务 B。这个补丁允许任务 A 和任务 B 在需要时可以被安排在同一时间槽内。所有其他任务对之间仍然相互冲突。例如，任务 A 仍然与除任务 B 之外的所有任务相冲突，而任务 C 仍然与所有其他任务相冲突。\n\n确定在这些新条件下，安排所有 $n$ 个任务所需的最少不同时间槽数量。将你的答案表示为关于 $n$ 的函数。", "solution": "将任务和冲突建模为一个简单图：每个任务是一个顶点，两个顶点之间的一条边表示一个阻止同时调度的冲突。所需的最少时间槽数量等于该冲突图的色数，记为 $\\chi$。\n\n最初，冲突图是完全图 $K_{n}$，其色数为 $\\chi(K_{n})=n$。应用补丁后，恰好一个冲突（任务 A 和任务 B 之间的边）被移除，因此新图为 $G=K_{n}-e$，其中 $e$ 是边 $\\{A,B\\}$。\n\n下界：团数 $\\omega(G)$ 至少为 $n-1$，因为移除顶点 A 或 B 后剩下的 $n-1$ 个顶点仍然构成一个完全子图 $K_{n-1}$。因此，\n$$\n\\chi(G) \\geq \\omega(G) = n-1.\n$$\n\n上界：可以通过为 A 和 B 分配相同的颜色（这是允许的，因为它们在图 G 中不相邻），并为其余的 $n-2$ 个顶点各自分配一种不同的新颜色，来构造一个使用 $n-1$ 种颜色的正常着色。此方法恰好使用了 $n-1$ 种颜色，并且是正常着色。\n\n综合上下界，\n$$\n\\chi(G)=n-1.\n$$\n\n因此，所需的最少不同时间槽数量为 $n-1$。", "answer": "$$\\boxed{n-1}$$", "id": "1491134"}, {"introduction": "最后，我们将注意力从子图和属性转移到支撑整个网络骨架的生成结构上。生成树是一个包含所有顶点的最小连通子图，它在网络设计中代表了最高效的连接方案。这个练习将引导你思考如何在一个节点完全互联的环境中，计算所有可能的“最小可行网络设计”的数量，并借此机会引入图论中一个著名且优美的定理——用于计算 $K_n$ 中生成树数量的凯莱公式 (Cayley's formula) [@problem_id:1491108]。", "problem": "一所大学正在建立一个新的高性能计算集群，该集群由四个主服务器节点组成。为了确保数据一致性和快速通信，必须在这些节点之间建立专用的光纤链路。该基础设施允许在任意两个不同的服务器节点之间创建直接链路。\n\n一个网络配置如果满足以下两个特定标准，则被认为是“可行的”：\n1.  **连通性**：任何节点都必须能够将数据发送到任何其他节点，即使路径是间接的并使用其他节点作为中继。\n2.  **最小性**：配置必须使用满足连通性标准所需的最少数量的直接链路。\n\n一个“设计”由已建立的特定链路集合定义。确定可以为这个四节点集群实现的不同可行网络设计的总数。", "solution": "将这四个不同的服务器节点标记为一个完全标记图 $K_{4}$ 的顶点。一个可行的配置必须是连通的，并使用满足连通性所需的最少链路数。对于一个有 $n$ 个顶点的任何连通简单图，其最小边数为 $n-1$，达到 $n-1$ 条边意味着该图是一棵树；反之，任何树都是连通的，并且恰好有 $n-1$ 条边。因此，可行的设计恰好是在这4个标记顶点上的生成树。\n\n具有 $n$ 个标记顶点的树的数量由 Cayley 公式给出：\n$$\nT(n)=n^{n-2}.\n$$\n代入 $n=4$ 得\n$$\nT(4)=4^{4-2}=4^{2}=16.\n$$\n\n作为一种按类型验证的方法：在4个顶点上的两种无标记树类型是星形图 $K_{1,3}$ 和路径图 $P_{4}$。标记的星形图数量为4（选择中心点），标记的路径图数量为 $\\frac{4!}{2}=12$（四个标签沿路径的所有排序，除去反向重复）。因此总数为 $4+12=16$，与 Cayley 公式的结果一致。", "answer": "$$\\boxed{16}$$", "id": "1491108"}]}