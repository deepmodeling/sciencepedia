{"hands_on_practices": [{"introduction": "检验一个度数序列是否可图是网络设计中的基础步骤。本练习提供了一个具体情景，要求你综合运用图序列的判别准则——从基本的握手引理到更完备的 Erdős-Gallai 定理，来找到满足条件的最小参数值。[@problem_id:1509390] 通过这个过程，你将熟练掌握如何系统性地验证一个序列的可图性。", "problem": "一个系统架构师正在设计一个连接7台服务器的小规模直接通信网络。一个简单图将用于对此网络建模，其中服务器是顶点，直接通信链路是边。顶点的度表示一台服务器拥有的直接链路数量。为这7台服务器提议的度序列是 $(k, 4, 4, 1, 1, 1, 1)$，其中 $k$ 是一个可配置参数，代表一台主服务器的连接数。该架构师必须为 $k$ 选择一个非负整数值，使得生成的序列是可图的，即可由一个简单图实现。为了最小化成本，该架构师希望使用 $k$ 的最小可能值。$k$ 的这个最小值是多少？", "solution": "设度序列为 $\\left(k,4,4,1,1,1,1\\right)$，作用于 $n=7$ 个顶点。对于一个有 $n$ 个顶点的简单图，每个度必须在 $\\{0,1,\\ldots,n-1\\}$ 内，因此 $0 \\leq k \\leq 6$。根据握手引理，度数之和必须是偶数。和为\n$$\nk+4+4+1+1+1+1=k+12,\n$$\n所以 $k$ 必须是偶数。因此，最小的候选值是 $k=0$；如果该情况不成立，则尝试 $k=2$。\n\n测试 $k=0$。将序列按非递增顺序排序以应用 Erdős-Gallai 准则：$\\left(4,4,1,1,1,1,0\\right)$。和为 $12$，是偶数。Erdős-Gallai 不等式要求对每个 $r \\in \\{1,\\ldots,7\\}$：\n$$\n\\sum_{i=1}^{r} d_{i} \\leq r(r-1)+\\sum_{i=r+1}^{7} \\min\\!\\left(d_{i},r\\right).\n$$\n对于 $r=1$，\n$$\n\\sum_{i=1}^{1} d_{i}=4,\\quad r(r-1)=0,\\quad \\sum_{i=2}^{7} \\min\\!\\left(d_{i},1\\right)=1+1+1+1+1+0=5,\n$$\n所以 $4 \\leq 5$ 成立。对于 $r=2$，\n$$\n\\sum_{i=1}^{2} d_{i}=8,\\quad r(r-1)=2,\\quad \\sum_{i=3}^{7} \\min\\!\\left(d_{i},2\\right)=1+1+1+1+0=4,\n$$\n所以右边等于 $2+4=6$，而 $8 \\leq 6$ 不成立。因此 $k=0$ 不是可图的。\n\n接下来测试 $k=2$。排序后的序列是 $\\left(4,4,2,1,1,1,1\\right)$，和为 14（偶数）。检查所有 $r$ 的 Erdős-Gallai 不等式：\n对于 $r=1$，\n$$\n\\sum_{i=1}^{1} d_{i}=4,\\quad r(r-1)=0,\\quad \\sum_{i=2}^{7} \\min\\!\\left(d_{i},1\\right)=1+1+1+1+1+1=6,\\quad 4 \\leq 6.\n$$\n对于 $r=2$，\n$$\n\\sum_{i=1}^{2} d_{i}=8,\\quad r(r-1)=2,\\quad \\sum_{i=3}^{7} \\min\\!\\left(d_{i},2\\right)=2+1+1+1+1=6,\\quad 8 \\leq 2+6=8.\n$$\n对于 $r=3$，\n$$\n\\sum_{i=1}^{3} d_{i}=10,\\quad r(r-1)=6,\\quad \\sum_{i=4}^{7} \\min\\!\\left(d_{i},3\\right)=1+1+1+1=4,\\quad 10 \\leq 6+4=10.\n$$\n对于 $r=4$，\n$$\n\\sum_{i=1}^{4} d_{i}=11,\\quad r(r-1)=12,\\quad \\sum_{i=5}^{7} \\min\\!\\left(d_{i},4\\right)=1+1+1=3,\\quad 11 \\leq 12+3=15.\n$$\n对于 $r=5$，\n$$\n\\sum_{i=1}^{5} d_{i}=12,\\quad r(r-1)=20,\\quad \\sum_{i=6}^{7} \\min\\!\\left(d_{i},5\\right)=1+1=2,\\quad 12 \\leq 20+2=22.\n$$\n对于 $r=6$，\n$$\n\\sum_{i=1}^{6} d_{i}=13,\\quad r(r-1)=30,\\quad \\sum_{i=7}^{7} \\min\\!\\left(d_{i},6\\right)=1,\\quad 13 \\leq 30+1=31.\n$$\n对于 $r=7$，\n$$\n\\sum_{i=1}^{7} d_{i}=14,\\quad r(r-1)=42,\\quad \\text{RHS}=42,\\quad 14 \\leq 42.\n$$\n所有不等式都成立，所以当 $k=2$ 时，该序列是可图的。\n\n因为 $k$ 必须是偶数，且 $k=0$ 的情况不成立而 $k=2$ 的情况成立，所以 $k$ 的最小可行值是 $2$。", "answer": "$$\\boxed{2}$$", "id": "1509390"}, {"introduction": "知道一个序列可图后，下一个自然的问题就是如何构建出对应的图。这个练习将引导你探索 Havel-Hakimi 构造算法，并揭示一个重要的微妙之处：算法生成的图只是众多可能实现中的一个。[@problem_id:1509393] 通过这个实践，你将理解为何一个可图序列可以同时存在连通和不连通的图实现，以及算法的确定性选择如何影响最终结果。", "problem": "在图论中，一个非负整数的有限序列如果能成为某个简单图的度序列，则称其为“可图序列”。Havel-Hakimi 算法是一个递归过程，它不仅可以判断一个序列是否为可图序列，而且在序列可图时，还能构造出具有该度序列的图。该算法的构造性版本通过反复将当前度数最高的顶点与一组其他可用度数最高的顶点相连接来工作。\n\n我们将“标准构造性 Havel-Hakimi 算法”定义如下：\n1. 从一个包含 $n$ 个顶点的集合开始，其初始度由序列 $D = (d_1, d_2, ..., d_n)$ 给出。\n2. 如果所有度数都为零，则构造完成。\n3. 选择一个当前度数最大的顶点 $v$。如果存在度数相同的情况，则选择索引最小的顶点。\n4. 设 $v$ 的度为 $k$。选择 $k$ 个（除 $v$ 之外）当前度数最高的顶点。如果存在度数相同的情况，则选择索引最小的顶点。添加连接 $v$ 与这 $k$ 个顶点的边。\n5. 更新受影响顶点的度数，并对余下的子问题从步骤 2 开始重复。\n\n虽然一个可图序列通常既可以实现为连通图，也可以实现为非连通图，但由这个确定性算法生成的特定图要么是连通的，要么是非连通的。你的任务是分析以下针对 6 个顶点的图的度序列。\n\n下列哪个序列是可图序列，已知至少有一个连通实现，但在使用上述标准构造性 Havel-Hakimi 算法构造时，却会产生一个**非连通**图？\n\nA. $(4, 3, 2, 1, 1, 0)$\n\nB. $(2, 2, 1, 1, 1, 1)$\n\nC. $(3, 2, 2, 2, 2, 1)$\n\nD. $(3, 3, 3, 3, 1, 1)$", "solution": "我们针对每个选项分析三个属性：可图性（通过握手引理和 Havel-Hakimi 算法判断），是否存在至少一个连通实现，以及标准构造性 Havel-Hakimi 算法（使用给定的确定性打破平局规则）的结果，检查构造出的图是连通的还是非连通的。\n\n根据握手引理，一个序列只有在其各项之和为偶数时才可能是可图的。\n\n选项 A: $(4, 3, 2, 1, 1, 0)$。度数和为 $4+3+2+1+1+0=11$，是奇数。因此这个序列不是可图的，不能满足要求。\n\n选项 B: $(2, 2, 1, 1, 1, 1)$。度数和为 $2+2+1+1+1+1=8$，是偶数，因此它可能是可图的。一个有 $n$ 个顶点的连通图至少有 $n-1$ 条边，因此在 6 个顶点上它必须至少有 5 条边，即度数和至少为 $10$。这里的和是 $8$，所以不存在连通实现。为完整起见，我们运行标准构造性 Havel-Hakimi 算法：\n- 从度为 $(2,2,1,1,1,1)$ 的顶点 $v_{1},\\dots,v_{6}$ 开始。选择 $k=2$ 的顶点 $v_{1}$，将其连接到其他顶点中度数最高的两个：$v_{2}$ (度为 2) 和 $v_{3}$ (在度为 1 的顶点中，索引最小的)。添加边 $(1,2)$ 和 $(1,3)$ 后，更新后的度为 $(0,1,0,1,1,1)$。\n- 接着选择 $k=1$ 的顶点 $v_{2}$，将其连接到可用的度数最高者（度为 1 且索引最小的），即 $v_{4}$。添加边 $(2,4)$ 后，度变为 $(0,0,0,0,1,1)$。\n- 接着选择 $k=1$ 的顶点 $v_{5}$，连接到 $v_{6}$。添加边 $(5,6)$ 后，所有度都为零。\n构造出的边是 $(1,2),(1,3),(2,4),(5,6)$，这产生两个连通分量 $\\{1,2,3,4\\}$ 和 $\\{5,6\\}$，即一个非连通的实现。然而，由于该序列不存在连通实现，它不满足题目的要求。\n\n选项 C: $(3, 2, 2, 2, 2, 1)$。度数和为 $3+2+2+2+2+1=12$，是偶数。运行标准构造性 Havel-Hakimi 算法：\n- 从 $(3,2,2,2,2,1)$ 开始。选择 $k=3$ 的顶点 $v_{1}$，将其连接到其他顶点中度数最高的三个：$v_{2},v_{3},v_{4}$。添加边 $(1,2),(1,3),(1,4)$ 后，度更新为 $(0,1,1,1,2,1)$。\n- 接着选择 $k=2$ 的顶点 $v_{5}$，将其连接到其他顶点中度数最高的两个：$v_{2}$ 和 $v_{3}$。添加边 $(5,2),(5,3)$ 后，度更新为 $(0,0,0,1,0,1)$。\n- 接着选择 $k=1$ 的顶点 $v_{4}$，连接到 $v_{6}$。添加边 $(4,6)$ 后，所有度都变为零。\n构造出的边是 $(1,2),(1,3),(1,4),(5,2),(5,3),(4,6)$。这个图是连通的（例如，路径 $5\\text{--}2\\text{--}1\\text{--}4\\text{--}6$ 连接了所有顶点），所以选项 C 不满足要求。\n\n选项 D: $(3, 3, 3, 3, 1, 1)$。度数和为 $3+3+3+3+1+1=14$，是偶数。运行标准构造性 Havel-Hakimi 算法：\n- 从 $(3,3,3,3,1,1)$ 开始。选择 $k=3$ 的顶点 $v_{1}$，将其连接到 $v_{2},v_{3},v_{4}$。添加边 $(1,2),(1,3),(1,4)$ 后，度更新为 $(0,2,2,2,1,1)$。\n- 接着选择 $k=2$ 的顶点 $v_{2}$，将其连接到 $v_{3}$ 和 $v_{4}$。添加边 $(2,3),(2,4)$ 后，度更新为 $(0,0,1,1,1,1)$。\n- 接着选择 $k=1$ 的顶点 $v_{3}$，将其连接到 $v_{4}$。添加边 $(3,4)$ 后，度更新为 $(0,0,0,0,1,1)$。\n- 接着选择 $k=1$ 的顶点 $v_{5}$，将其连接到 $v_{6}$。添加边 $(5,6)$ 后，所有度都变为零。\n构造出的边是 $(1,2),(1,3),(1,4),(2,3),(2,4),(3,4),(5,6)$，即在 $\\{1,2,3,4\\}$ 上的一个 $K_4$（完全图）加上边 $(5,6)$，这是非连通的。\n\n我们还必须验证选项 D 至少有一个连通实现。显式构造如下：取顶点 $A,B,C,D$ 上的一个 4-圈，边为 $(A,B),(B,C),(C,D),(D,A)$，这样每个顶点的度都为 2；将叶顶点 $E$ 连接到 $A$，叶顶点 $F$ 连接到 $C$，以将 $A$ 和 $C$ 的度提高到 3；然后添加边 $(B,D)$ 以将 $B$ 和 $D$ 的度提高到 3。最终的度为 $(3,3,3,3,1,1)$，并且该图是连通的。因此，选项 D 满足所有标准：它是可图的，有一个连通实现，而标准构造性 Havel-Hakimi 算法却产生一个非连通图。\n\n因此，正确选项是 D。", "answer": "$$\\boxed{D}$$", "id": "1509393"}, {"introduction": "真正的掌握意味着能够超越简单地应用算法，而去理解其内在机制。这个富有挑战性的练习要求你反向思考，构建一个能让 Havel-Hakimi 算法执行次数达到最多的特殊图序列。[@problem_id:1509388] 解决这个问题需要你对算法的每一步进行“逆向工程”，这不仅能加深你对算法的理解，更是一种在计算机科学和数学中都极为宝贵的问题解决技巧。", "problem": "一个非负整数序列 $S = (d_1, d_2, \\ldots, d_n)$ 被称为**可图的** (graphic)，如果它能作为某个具有 $n$ 个顶点的简单图的度序列。简单图是指没有自环或任意两顶点之间没有重边的图。\n\nHavel-Hakimi 算法是用于判断一个给定序列是否为可图序列的过程。该算法的步骤如下：\n\n设 $S$ 为一个包含 $k$ 个非负整数的序列。\n1.  将序列 $S$ 按非递增顺序排序。如果在此过程中的任何时刻，序列中某个元素变为负数，则原始序列不是可图的，算法终止。\n2.  如果序列中所有元素均为零，则该序列是可图的，算法终止。\n3.  设排序后的序列为 $(d_1, d_2, \\ldots, d_k)$。如果 $d_1 \\ge k$，则该序列不是可图的，算法终止。\n4.  如果算法尚未终止，则移除 $d_1$，并将序列中接下来的 $d_1$ 个元素分别减 1，从而创建一个新的长度为 $k-1$ 的序列 $S'$。\n5.  用 $S'$ 替换 $S$，并返回步骤 1。\n\n算法的一次“迭代”定义为步骤 4 的单次应用。对于给定的顶点数 $n$，一个序列终止所需的迭代次数是可变的。\n\n你的任务是找出一个有 $n=8$ 个顶点的可图序列 $S = (d_1, d_2, \\ldots, d_8)$，该序列在 Havel-Hakimi 算法终止前需要尽可能多的迭代次数。请将你的答案表示为一个包含八个整数的序列，并按非递增顺序排序。", "solution": "设初始序列为 $S_0$，长度为 $n$。Havel-Hakimi 算法的每次迭代都会将序列的长度减一。具体来说，一个长度为 $k$ 的序列会被转化为一个长度为 $k-1$ 的序列。当序列变为全零时，算法终止。\n\n对于一个长度为 $n=8$ 的序列，算法执行期间序列长度的变化将是 $8 \\to 7 \\to 6 \\to 5 \\to 4 \\to 3 \\to 2 \\to 1$。一个长度为 1 的序列要成为可图序列，必须是 $(0)$。从一个长度为 8 的序列变为一个长度为 1 的序列需要 $8-1=7$ 次迭代。这是可能的最大迭代次数，因为任何更少的次数都意味着过程提前终止（例如，达到了一个长度大于 1 的全零序列）。\n\n我们希望构造一个长度为 8 的序列 $S_0$，它需要恰好 7 次迭代。我们可以从最终状态逆向推导。设 $S_k$ 是经过 $k$ 次迭代后的序列。$S_k$ 的长度将为 $n-k = 8-k$。\n\n该过程必须以一个可图序列结束。经过 7 次迭代后，我们得到一个长度为 $8-7=1$ 的序列 $S_7$。要使其成为可图序列，它必须是 $S_7=(0)$。\n\n现在，我们找出长度为 2 的序列 $S_6$，它在一次迭代后能简化为 $S_7=(0)$。设 $S_6=(d_1, d_2)$ 已按非递增顺序排序。根据算法，$d_1$ 必须小于序列长度，因此 $d_1  2$，这意味着 $d_1 \\le 1$。由于序列非全零，所以 $d_1=1$。算法通过移除 $d_1$ 并从接下来的 $d_1=1$ 个项中减 1 来形成新序列。新序列是 $(d_2-1)$。我们要求这个序列是 $S_7=(0)$，所以 $d_2-1=0 \\implies d_2=1$。由于序列是排序的，我们必须有 $d_1 \\ge d_2$，这个条件得到满足（$1 \\ge 1$）。因此，$S_6=(1,1)$。\n\n接下来，我们找出长度为 3 的序列 $S_5$，它能简化为 $S_6=(1,1)$。设 $S_5=(d_1, d_2, d_3)$ 已排序。我们有 $d_1  3$，所以 $d_1 \\in \\{1, 2\\}$。\n- 如果 $d_1=1$，新序列是 $(d_2-1, d_3)$。我们要求它在排序后为 $(1,1)$。这意味着 $\\{d_2-1, d_3\\}=\\{1,1\\}$，得出 $(d_2, d_3)=(2,1)$。因此，$S_5$ 将是 $(1,2,1)$，排序后为 $(2,1,1)$。如果我们对 $(2,1,1)$ 应用算法，我们得到 $(1-1, 1-1)=(0,0)$，而不是 $(1,1)$。所以这种情况不成立。\n- 如果 $d_1=2$，新序列是 $(d_2-1, d_3-1)$。我们要求它在排序后为 $(1,1)$。这意味着 $\\{d_2-1, d_3-1\\}=\\{1,1\\}$，所以 $d_2=2$ 且 $d_3=2$。该序列为 $S_5=(2,2,2)$。这个序列是排好序的，并且 $d_1=2  3$。应用算法得到 $(2-1, 2-1)=(1,1)$，即 $S_6$。所以 $S_5=(2,2,2)$。\n\n一个清晰的模式浮现出来：要保证后续迭代次数最多，长度为 $k$ 的序列 $S_{n-k}$ 应该是每个元素都为 $k-1$ 的正则序列。我们将这个序列表示为 $R_k = (k-1, k-1, \\ldots, k-1)$。\n我们已经证明了 $S_7=R_1=(0)$，$S_6=R_2=(1,1)$，以及 $S_5=R_3=(2,2,2)$。\n让我们来验证这个一般步骤。假设在第 $k-1$ 步的序列为 $S_{k-1} = R_{n-(k-1)} = R_{8-k+1}$。我们想要找到可以简化为它的 $S_{k-2}$。我们假设 $S_{k-2} = R_{8-k+2}$。\n让我们对长度为 $m$ 的序列 $R_m = (m-1, m-1, \\ldots, m-1)$ 应用该算法。\n首个元素是 $d_1 = m-1$。这满足 $d_1  m$。算法移除 $d_1$，并从接下来的 $d_1=m-1$ 个项中各减 1。由于剩下的项正好有 $m-1$ 个，我们从所有这些项中减 1。\n新序列的所有元素都等于 $(m-1)-1 = m-2$，其长度为 $m-1$。这个新序列恰好是 $R_{m-1}$。\n这证实了经过 $k$ 次迭代后的序列是 $S_k = R_{8-k}$。\n\n我们要找的是初始序列 $S_0$。根据这个模式，$S_0 = R_{8-0} = R_8$。\n序列 $R_8$ 是一个长度为 8 的序列，其中每个元素都是 $8-1=7$。\n因此，所求的序列是 $S_0 = (7,7,7,7,7,7,7,7)$。\n\n让我们正向检验这个序列：\n$S_0 = (7,7,7,7,7,7,7,7)$。长度为 8，$d_1=7$。有效。第 1 次迭代得到 $S_1=(6,6,6,6,6,6,6)$。\n$S_1 = (6,6,6,6,6,6,6)$。长度为 7，$d_1=6$。有效。第 2 次迭代得到 $S_2=(5,5,5,5,5,5)$。\n...\n$S_5 = (2,2,2)$。长度为 3，$d_1=2$。有效。第 6 次迭代得到 $S_6=(1,1)$。\n$S_6 = (1,1)$。长度为 2，$d_1=1$。有效。第 7 次迭代得到 $S_7=(0)$。\n$S_7 = (0)$。终止。\n整个过程耗时 7 次迭代，即 $n-1$，是可能的最大次数。该序列是完全图 $K_8$ 的度序列。", "answer": "$$\\boxed{\\begin{pmatrix} 7  7  7  7  7  7  7  7 \\end{pmatrix}}$$", "id": "1509388"}]}