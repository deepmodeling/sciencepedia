{"hands_on_practices": [{"introduction": "理论知识的最终目的是解决实际问题。给定一个度序列，我们如何确定它是否可以构成一个简单的图？这个练习将引导你使用哈维尔-哈基米算法 (Havel-Hakimi algorithm) 这一强大工具，系统地检验一个序列是否“可图化”。通过这个基础练习 [@problem_id:1495677]，你将掌握将抽象度序列与具体图结构联系起来的关键技能。", "problem": "在网络架构领域，一个基本问题是设计节点（如服务器或路由器）之间连接的物理布局。一个提议的设计可以用一个数字序列来表示，其中每个数字是对应节点所需的直接连接数。这在图论中被称为度序列。\n\n一个非负整数序列被称为**可图的**（graphical），如果存在一个简单图，其顶点度数恰好是该序列中的数字。简单图是指没有自环（连接顶点到其自身的边）且任意一对顶点之间最多只有一条边的图。\n\n一个网络工程团队正在评估一个新型小规模网络的四种不同设计方案。您的任务是确定以下提议的度序列中哪些是可图的，即它们对应于物理上可实现的简单网络。请找出所有正确选项。\n\nA. $(5, 3, 3, 3, 3, 3)$\n\nB. $(5, 5, 4, 2, 1, 1)$\n\nC. $(6, 5, 4, 3, 2, 1)$\n\nD. $(4, 4, 3, 3, 2, 2)$", "solution": "要确定一个度序列是否是可图的，我们可以使用Havel-Hakimi算法。该算法基于这样一个原理：一个按非递增顺序排序的序列 $S = (d_1, d_2, \\dots, d_n)$ 是可图的，当且仅当将约化序列 $S' = (d_2-1, d_3-1, \\dots, d_{d_1+1}-1, d_{d_1+2}, \\dots, d_n)$ 排序后是可图的。我们重复这个过程，直到我们得到一个显然是可图的序列（例如，所有元素都为零），或者一个显然不是可图的序列（例如，包含负数或某个度数大于剩余顶点的数量）。\n\n我们还使用任何图的一个必要条件：所有顶点的度数之和必须是一个偶数，因为每条边都对两个顶点的度数有贡献。\n\n让我们分析每个选项。\n\n**A. 序列 $(5, 3, 3, 3, 3, 3)$**\n该序列已经排序。\n$S_0 = (5, 3, 3, 3, 3, 3)$。\n第一项是 $d_1 = 5$。我们移除它，并从接下来的5项中各减去1。\n新序列为 $(3-1, 3-1, 3-1, 3-1, 3-1) = (2, 2, 2, 2, 2)$。\n我们称之为 $S_1$。\n$S_1 = (2, 2, 2, 2, 2)$。这个序列是已知的可图序列；它代表一个5-循环图（$C_5$）的度序列。由于 $S_1$ 是可图的，原始序列 $S_0$ 也是可图的。因此，A是一个可图序列。\n\n**B. 序列 $(5, 5, 4, 2, 1, 1)$**\n该序列已经排序。\n$S_0 = (5, 5, 4, 2, 1, 1)$。\n第一项是 $d_1 = 5$。我们移除它，并从接下来的5项中各减去1。\n新序列为 $(5-1, 4-1, 2-1, 1-1, 1-1) = (4, 3, 1, 0, 0)$。\n排序后称之为 $S_1$，此处无需排序因为它已经排好。\n$S_1 = (4, 3, 1, 0, 0)$。\n现在对 $S_1$ 应用该算法。第一项是 $d_1 = 4$。我们移除它，并从接下来的4项中各减去1。\n新序列为 $(3-1, 1-1, 0-1, 0-1) = (2, 0, -1, -1)$。\n由于该序列包含负数，因此它不是可图的。所以，原始序列 $S_0$ 不是可图的。因此，B不是一个可图序列。\n\n**C. 序列 $(6, 5, 4, 3, 2, 1)$**\n在应用Havel-Hakimi算法之前，我们可以检查度数之和。\n和 = $6 + 5 + 4 + 3 + 2 + 1 = 21$。\n在任何图中，度数之和必须是偶数（根据握手引理）。由于和是21（一个奇数），因此不可能存在这样的简单图。因此，C不是一个可图序列。\n\n**D. 序列 $(4, 4, 3, 3, 2, 2)$**\n该序列已经排序。\n$S_0 = (4, 4, 3, 3, 2, 2)$。\n第一项是 $d_1 = 4$。我们移除它，并从接下来的4项中各减去1。\n新序列为 $(4-1, 3-1, 3-1, 2-1)$，最后一项（2）保持不变。得到 $(3, 2, 2, 1, 2)$。\n我们必须对这个序列重新排序：$S_1 = (3, 2, 2, 2, 1)$。\n现在对 $S_1$ 应用该算法。第一项是 $d_1 = 3$。我们移除它，并从接下来的3项中各减去1。\n新序列为 $(2-1, 2-1, 2-1)$，最后一项（1）保持不变。得到 $(1, 1, 1, 1)$。\n我们称之为 $S_2$。\n$S_2 = (1, 1, 1, 1)$。这个序列是可图的；它代表一个有4个顶点和2条不相交边的图。由于 $S_2$ 是可图的，所以 $S_1$ 是可图的，因此原始序列 $S_0$ 也是可图的。因此，D是一个可图序列。\n\n根据分析，序列A和D是可图的。", "answer": "$$\\boxed{AD}$$", "id": "1495677"}, {"introduction": "在验证一个序列是否可图化之后，一个更具挑战性的任务是修正一个不可图化的序列。这个练习 [@problem_id:1495664] 模拟了这样一个场景：你需要在满足特定约束（最小化度之和）的前提下，对一个无效的度序列进行最小的改动，使其变得有效。这不仅考验你对可图化条件的理解，更能锻炼你的优化思维和解决问题的能力。", "problem": "在图论中，一个非负整数序列 $d = (d_1, d_2, \\ldots, d_n)$ 被称为度序列，如果存在一个有 $n$ 个顶点的简单图，其顶点度数恰好是该序列中的整数。如果存在这样的图，则称该序列是“可图化的”(graphical)。\n\n考虑整数序列 $S = (4, 4, 3, 2, 1)$。这个序列不是可图化的。你的任务是修改 $S$ 中的恰好一个整数，以形成一个新序列 $S'$，使其成为可图化的。在所有可能的有效修改中，你必须选择使新序列 $S'$ 中整数之和最小的那一种。\n\n满足此条件的被修改整数的新值是多少？", "solution": "一个有 $n$ 个顶点的简单图，其度数在 $\\{0,1,\\ldots,n-1\\}$ 范围内，并且必须满足握手引理(Handshake Lemma)：所有顶点的度数之和为偶数。此处 $n=5$，因此所有度数必须在 $\\{0,1,2,3,4\\}$ 集合中。原始序列的和为 $4+4+3+2+1=14$，是偶数。将其中恰好一项 $d_{i}$ 更改为 $d_{i}'$ 后，新的和必须保持为偶数，因此 $d_{i}-d_{i}'$ 必须是偶数。为了使和最小化，我们尝试将某一项减去一个偶数，同时保持该值在 $\\{0,1,2,3,4\\}$ 范围内。\n\n对于序列 $S=(4,4,3,2,1)$ 中的各项，可能的偶数减量有：\n- $4 \\to 2$ 或 $4 \\to 0$，\n- $3 \\to 1$，\n- $2 \\to 0$，\n- $1$ 在此范围内没有有效的偶数减量。\n\n最大的减量是 $4 \\to 0$，这将得到一个和为 $10$ 的新序列。然而，任何在 5 个顶点上同时包含度为 $4$ 和度为 $0$ 的度序列都是不可能的：一个度为 $4$ 的顶点必须与所有其他 $4$ 个顶点相邻，这与存在一个度为 $0$ 的孤立顶点相矛盾。因此，任何使和为 $10$ 的修改都得不到可图化的序列。\n\n因此，可能的最小和是 $12$（即减量为 $2$）。我们现在测试所有这样的减量情况：\n1) $4 \\to 2$ 得到多重集 $\\{4,3,2,2,1\\}$。应用 Havel-Hakimi 算法：\n$$\n(4,3,2,2,1)\\ \\to\\ (2,1,1,0)\\ \\to\\ (0,0,0),\n$$\n这是有效的，因此该序列是可图化的。\n\n2) $3 \\to 1$ 得到 $\\{4,4,2,1,1\\}$。应用 Havel-Hakimi 算法得到：\n$$\n(4,4,2,1,1)\\ \\to\\ (3,1,0,0),\n$$\n而下一步需要从三项 $(1,0,0)$ 中分别减去 $1$，这会产生负项，所以该序列不是可图化的。\n\n3) $2 \\to 0$ 得到 $\\{4,4,3,1,0\\}$，该序列同样包含 $4$ 和 $0$，根据前面的论证，它不是可图化的。\n\n因此，能得到可图化序列且使和最小的唯一修改是通过将一个 $4$ 改为 $2$ 实现的，被修改整数的新值为 $2$。", "answer": "$$\\boxed{2}$$", "id": "1495664"}, {"introduction": "掌握一个算法不仅意味着知道如何使用它，更意味着理解它的能力边界。哈维尔-哈基米算法能可靠地判断一个序列是否可图化，但它是否会保持原图的其他重要属性，如连通性？这个练习 [@problem_id:1542652] 将引导你通过寻找一个反例，来深入探究该算法的一个微妙之处，从而培养对算法性质的批判性思维。", "problem": "在图论中，一个有限非负整数序列如果可以作为某个简单图的度序列，则称其为可图的。Havel-Hakimi算法提供了一种判断一个序列是否可图的方法。该算法基于以下递归原理：\n\n令 $D = (d_1, d_2, \\dots, d_n)$ 是一个按非增序排列的整数序列 ($d_1 \\ge d_2 \\ge \\dots \\ge d_n$)。序列 $D$ 是可图的，当且仅当将较短的序列 $D' = (d_2-1, d_3-1, \\dots, d_{d_1+1}-1, d_{d_1+2}, \\dots, d_n)$ 重新排序后，该序列也是可图的。重复此过程，直到生成一个显然可图的序列（例如，全为零）或显然不可图的序列（例如，包含负数）。\n\n一个已知的性质是，如果序列 $D$ 是可图的，那么经过一步Havel-Hakimi算法后得到的序列 $D'$ 也是可图的。然而，其他性质并不总是被保留。考虑连通性这一性质。Havel-Hakimi定理不保证如果 $D$ 是一个连通图的度序列，那么规约后的序列 $D'$ 也必须对应一个连通图。\n\n你的任务是找出一个反例。以下每个序列都保证是至少一个简单连通图的度序列。下列哪个序列，在经过一步Havel-Hakimi算法后，产生的新序列 $D'$ *只能*由一个非连通图实现？\n\nA. $(3, 3, 3, 3)$\nB. $(3, 3, 2, 2)$\nC. $(3, 2, 2, 1)$\nD. $(4, 3, 3, 2, 2, 2)$\nE. $(2, 2, 2, 2, 2, 2)$", "solution": "我们对每个已排序的序列应用一步Havel-Hakimi规约，并检验规约后的序列 $D'$ 是否可以由一个连通图实现。\n\n使用的关键事实：\n- Havel-Hakimi步骤：对于 $D=(d_{1},d_{2},\\dots,d_{n})$ 且 $d_{1}\\geq d_{2}\\geq \\dots \\geq d_{n}$，去掉 $d_{1}$ 并将其后的 $d_{1}$ 个项各减1，然后重新排序。\n- 如果 $D'$ 中既有0又有正度数，则任何实现都必须是非连通的（存在一个孤立顶点）。\n- 对于有 $n$ 个顶点的图，其连通的一个必要条件是度数之和至少为 $2(n-1)$。如果等式成立且序列是可图的，它通常可以实现为一棵树。\n\n分析每个选项：\n\nA. $D=(3,3,3,3)$。Havel-Hakimi：去掉3，规约接下来的3项：\n$$\n(3,3,3)\\longrightarrow(2,2,2)\\,,\n$$\n所以 $D'=(2,2,2)$。这是 $K_{3}$ 的度序列，而 $K_{3}$ 是连通的。不是所求情况。\n\nB. $D=(3,3,2,2)$。去掉3，规约接下来的3项：\n$$\n(3,2,2)\\longrightarrow(2,1,1)\\,,\n$$\n所以 $D'=(2,1,1)$（已排序）。这可以由路径图 $P_{3}$ 实现，而 $P_{3}$ 是连通的。不是所求情况。\n\nC. $D=(3,2,2,1)$。去掉3，规约接下来的3项：\n$$\n(2,2,1)\\longrightarrow(1,1,0)\\,,\n$$\n所以 $D'=(1,1,0)$。任何实现都有一个孤立顶点和一条连接两个度为1的顶点的边；因此每个实现都是非连通的。这是所求情况。\n\nD. $D=(4,3,3,2,2,2)$。去掉4，规约接下来的4项：\n$$\n(3,3,2,2)\\longrightarrow(2,2,1,1)\\,,\n$$\n剩下的一个2保持不变，所以重新排序后 $D'=(2,2,2,1,1)$。度数之和为 $8=2(5-1)$。该序列可以由一个四边形环附加一条悬挂边来实现，是连通的。不是所求情况。\n\nE. $D=(2,2,2,2,2,2)$。去掉2，规约接下来的2项：\n$$\n(2,2)\\longrightarrow(1,1)\\,,\n$$\n剩下的三个2保持不变，所以重新排序后 $D'=(2,2,2,1,1)$。与D选项一样，该序列可以由一个连通图（例如，一个四边形环附加一条悬挂边）实现。不是所求情况。\n\n因此，只有选项C产生了一个只能由非连通图实现的 $D'$。", "answer": "$$\\boxed{C}$$", "id": "1542652"}]}