{"hands_on_practices": [{"introduction": "贪心算法因其简单直观而常被用作解决优化问题的起点。本练习旨在揭示贪心着色算法的一个关键特性：其性能高度依赖于顶点处理的顺序。通过一个精心构造的例子，你将亲眼见证一个“糟糕”的排序如何导致着色所用的颜色数量远超理论最小值 $\\chi(G)$，从而深入理解算法性能与输入顺序之间的关系。[@problem_id:1479819]", "problem": "贪心着色算法是一种为图的顶点分配颜色的方法。它按一个指定的序列（比如说 $(w_1, w_2, \\dots, w_n)$）来处理顶点。对于此序列中的每个顶点 $w_i$，该算法为其分配一个最小的正整数（代表一种颜色），该颜色未被其任何在序列中位置更靠前的邻接点（即，其在集合 $\\{w_1, w_2, \\dots, w_{i-1}\\}$ 中的邻接点）所使用。\n\n考虑一个简单图 $G$，其构造如下。顶点集由两个不相交的顶点集合 $U = \\{u_1, u_2, u_3, u_4, u_5\\}$ 和 $V = \\{v_1, v_2, v_3, v_4, v_5\\}$ 组成。边集 $E$ 的定义为：顶点 $u_i \\in U$ 和顶点 $v_j \\in V$ 之间存在一条边，当且仅当它们的整数下标不同（即 $i \\neq j$）。集合 $U$ 内部的任意两个顶点之间没有边相连，集合 $V$ 内部的任意两个顶点之间也没有边相连。\n\n假设贪心着色算法使用特定的顶点顺序 $\\sigma = (u_1, v_1, u_2, v_2, u_3, v_3, u_4, v_4, u_5, v_5)$ 应用于该图 $G$。\n\n算法为图中所有顶点着色所使用的不同颜色的总数是多少？", "solution": "令 $c(w)$ 表示分配给顶点 $w$ 的颜色。贪心规则为 $w_{i}$ 分配其位置靠前的邻接点未使用的最小正整数。\n\n图 $G$ 是一个二分图，其两个部分为 $U=\\{u_{1},u_{2},u_{3},u_{4},u_{5}\\}$ 和 $V=\\{v_{1},v_{2},v_{3},v_{4},v_{5}\\}$。边仅存在于 $U$ 和 $V$ 之间，其中 $u_{i}$ 与 $v_{j}$ 邻接当且仅当 $i\\neq j$。在 $U$ 内部或 $V$ 内部没有边。顺序为 $\\sigma=(u_{1},v_{1},u_{2},v_{2},u_{3},v_{3},u_{4},v_{4},u_{5},v_{5})$。\n\n逐步应用贪心规则：\n1) $u_{1}$ 没有在它之前的邻接点，所以 $c(u_{1})=1$。\n2) $v_{1}$ 不与 $u_{1}$ 邻接（因为 $1=1$），所以它没有在它之前的邻接点；因此 $c(v_{1})=1$。\n3) $u_{2}$ 与 $v_{1}$ 邻接（因为 $1\\neq 2$），但不与 $u_{1}$ 邻接。禁用颜色集合为 $\\{c(v_{1})\\}=\\{1\\}$，所以 $c(u_{2})=2$。\n4) $v_{2}$ 与 $u_{1}$ 邻接（因为 $1\\neq 2$），但不与 $u_{2}$ 邻接。禁用颜色集合为 $\\{c(u_{1})\\}=\\{1\\}$，所以 $c(v_{2})=2$。\n5) $u_{3}$ 与 $v_{1}$ 和 $v_{2}$ 邻接，所以禁用颜色集合为 $\\{c(v_{1}),c(v_{2})\\}=\\{1,2\\}$，因此 $c(u_{3})=3$。\n6) $v_{3}$ 与 $u_{1}$ 和 $u_{2}$ 邻接，所以禁用颜色集合为 $\\{c(u_{1}),c(u_{2})\\}=\\{1,2\\}$，因此 $c(v_{3})=3$。\n7) $u_{4}$ 与 $v_{1},v_{2},v_{3}$ 邻接，所以禁用颜色集合为 $\\{1,2,3\\}$，因此 $c(u_{4})=4$。\n8) $v_{4}$ 与 $u_{1},u_{2},u_{3}$ 邻接，所以禁用颜色集合为 $\\{1,2,3\\}$，因此 $c(v_{4})=4$。\n9) $u_{5}$ 与 $v_{1},v_{2},v_{3},v_{4}$ 邻接，所以禁用颜色集合为 $\\{1,2,3,4\\}$，因此 $c(u_{5})=5$。\n10) $v_{5}$ 与 $u_{1},u_{2},u_{3},u_{4}$ 邻接，所以禁用颜色集合为 $\\{1,2,3,4\\}$，因此 $c(v_{5})=5$。\n\n因此，使用的不同颜色为 $\\{1,2,3,4,5\\}$，总计 $5$ 种。", "answer": "$$\\boxed{5}$$", "id": "1479819"}, {"introduction": "在了解了基本贪心算法的局限性后，我们来探索一种改进其性能的启发式策略。Welsh-Powell 算法提供了一个简单而有效的思路：优先为更“难”着色的顶点（即度数更高的顶点）分配颜色。本练习将引导你逐步应用这一结构化算法，展示一个简单的启发式规则如何引导贪心过程，从而找到一个更高效的着色方案。[@problem_id:1479781]", "problem": "考虑一个无向图 $G = (V, E)$，其顶点集为 $V = \\{a, b, c, d, v_1, v_2, v_3, v_4, v_5\\}$，边集 $E$ 包含以下边：\n$(v_1, v_2)$、$(v_2, v_3)$、$(v_3, v_4)$、$(v_4, v_5)$、$(v_5, v_1)$、\n$(c, v_1)$、$(c, v_2)$、$(c, v_3)$、$(c, v_4)$、$(c, v_5)$、\n$(a, v_1)$、$(a, v_2)$、\n$(b, v_3)$、$(b, v_4)$、\n$(d, v_5)$、$(d, v_1)$ 和 $(d, c)$。\n\n图的正常着色是指为每个顶点分配一种颜色，使得任意两个相邻顶点的颜色都不同。Welsh-Powell 算法是一种用于寻找正常着色的贪心算法。该算法的步骤如下：\n\n1.  计算图中每个顶点的度。\n2.  按顶点的度对顶点进行降序排列。如果度数相同，则按顶点名称的字母顺序打破平局（例如，$c$ 排在 $v_1$ 之前）。\n3.  初始化第一种颜色，记为颜色1。遍历排好序的顶点列表。将颜色1分配给列表中第一个未着色的顶点。然后，继续沿列表向下，将颜色1分配给所有不与任何已分配颜色1的顶点相邻的未着色顶点。\n4.  如果仍有未着色的顶点，则初始化下一个颜色（颜色2，然后是颜色3，依此类推）。对新颜色重复步骤3中描述的过程，仅考虑仍未着色的顶点。\n5.  当所有顶点都被着色后，算法终止。\n\n将 Welsh-Powell 算法应用于给定的图 $G$。确定所得正常着色中使用的颜色总数。", "solution": "我们首先根据给定的边集计算所有顶点的度。对于每个顶点，$\\deg(\\cdot)$ 等于其关联边的数量：\n- $\\deg(c)=5$（与 $v_{1},v_{2},v_{3},v_{4},v_{5}$ 相连）加上 $1$（与 $d$ 相连），因此 $\\deg(c)=6$。\n- $\\deg(v_{1})=2$（与 $v_{2},v_{5}$ 相连）加上 $1$（与 $c$ 相连）加上 $1$（与 $a$ 相连）加上 $1$（与 $d$ 相连），因此 $\\deg(v_{1})=5$。\n- $\\deg(v_{2})=2$（与 $v_{1},v_{3}$ 相连）加上 $1$（与 $c$ 相连）加上 $1$（与 $a$ 相连），因此 $\\deg(v_{2})=4$。\n- $\\deg(v_{3})=2$（与 $v_{2},v_{4}$ 相连）加上 $1$（与 $c$ 相连）加上 $1$（与 $b$ 相连），因此 $\\deg(v_{3})=4$。\n- $\\deg(v_{4})=2$（与 $v_{3},v_{5}$ 相连）加上 $1$（与 $c$ 相连）加上 $1$（与 $b$ 相连），因此 $\\deg(v_{4})=4$。\n- $\\deg(v_{5})=2$（与 $v_{4},v_{1}$ 相连）加上 $1$（与 $c$ 相连）加上 $1$（与 $d$ 相连），因此 $\\deg(v_{5})=4$。\n- $\\deg(d)=1$（与 $v_{5}$ 相连）加上 $1$（与 $v_{1}$ 相连）加上 $1$（与 $c$ 相连），因此 $\\deg(d)=3$。\n- $\\deg(a)=2$（与 $v_{1},v_{2}$ 相连），因此 $\\deg(a)=2$。\n- $\\deg(b)=2$（与 $v_{3},v_{4}$ 相连），因此 $\\deg(b)=2$。\n\n按度的降序排列顶点，度数相同时按名称的字母顺序排序：$c$ (6)，$v_{1}$ (5)，$v_{2},v_{3},v_{4},v_{5}$ (均为4，排序为 $v_{2},v_{3},v_{4},v_{5}$)，然后是 $d$ (3)，然后是 $a,b$ (均为2，排序为 $a,b$)。因此，Welsh-Powell 顺序为\n$$\nc,\\ v_{1},\\ v_{2},\\ v_{3},\\ v_{4},\\ v_{5},\\ d,\\ a,\\ b.\n$$\n\n贪心地进行着色：\n\n颜色1：\n- 分配给 $c$（顺序中第一个）。\n- $v_{1},v_{2},v_{3},v_{4},v_{5},d$ 均与 $c$ 相邻，所以都不能使用颜色1。\n- $a$ 不与 $c$ 相邻，所以将颜色1分配给 $a$。\n- $b$ 不与 $c$ 或 $a$ 相邻，所以将颜色1分配给 $b$。\n因此，颜色1：$\\{c,a,b\\}$。\n\n颜色2：\n- $v_{1}$ 未着色且尚无颜色2的邻居；将颜色2分配给 $v_{1}$。\n- $v_{2}$ 与 $v_{1}$ 相邻，所以跳过颜色2。\n- $v_{3}$ 不与 $v_{1}$ 相邻；将颜色2分配给 $v_{3}$。\n- $v_{4}$ 与 $v_{3}$ 相邻；跳过。\n- $v_{5}$ 与 $v_{1}$ 相邻；跳过。\n- $d$ 与 $v_{1}$ 相邻；跳过。\n因此，颜色2：$\\{v_{1},v_{3}\\}$。\n\n颜色3：\n- $v_{2}$ 尚无颜色3的邻居；将颜色3分配给 $v_{2}$。\n- $v_{4}$ 不与 $v_{2}$ 相邻；将颜色3分配给 $v_{4}$。\n- $v_{5}$ 与 $v_{4}$ 相邻；跳过。\n- $d$ 不与 $v_{2}$ 或 $v_{4}$ 相邻；将颜色3分配给 $d$。\n因此，颜色3：$\\{v_{2},v_{4},d\\}$。\n\n颜色4：\n- 唯一剩下的未着色顶点是 $v_{5}$；将颜色4分配给 $v_{5}$。\n因此，颜色4：$\\{v_{5}\\}$。\n\n所有顶点均已着色。Welsh-Powell 算法在此图上使用的颜色总数为 $4$。", "answer": "$$\\boxed{4}$$", "id": "1479781"}, {"introduction": "现实世界中的着色问题往往带有额外的约束。本练习引入了列表着色（list coloring）的概念，其中每个顶点都有自己特定的可用颜色“列表”，这模拟了例如课程表安排中某些时间段对特定课程不可用的情景。这个实践挑战你在这些更严格的限制下寻找一个有效的着色方案，这通常需要仔细的案例分析和逻辑推理。[@problem_id:1479827]", "problem": "一所大学正在为五门课程安排期末考试：算法（A）、生物（B）、化学（C）、数据结构（D）和英语（E）。部分课程对之间有大量的学生重叠，因此它们的考试不能安排在同一时间。考试时间安排的冲突如下：\n- 英语（E）与所有其他四门课程都有冲突。\n- 算法（A）与生物（B）和数据结构（D）有冲突。\n- 生物（B）与算法（A）和化学（C）有冲突。\n- 化学（C）与生物（B）和数据结构（D）有冲突。\n- 数据结构（D）与化学（C）和算法（A）有冲突。\n\n此外，由于教室可用性的限制，每门课程只有有限的可用时间段列表，用整数表示。每门课程的可用时间段列表如下：\n- $L(E) = \\{1, 2, 3\\}$\n- $L(A) = \\{1, 2\\}$\n- $L(B) = \\{1, 3\\}$\n- $L(C) = \\{2, 3\\}$\n- $L(D) = \\{1, 2\\}$\n\n一个有效的考试安排是指为每门课程从其可用时间段列表中分配一个时间段，且任意两门有冲突的课程不能被分配到相同的时间段。可能有多少种不同的有效考试安排？请以整数形式提供答案。", "solution": "我们将此问题建模为一个图的列表着色问题。顶点是课程 $A,B,C,D,E$。冲突边为：\n- $E$ 与 $A,B,C,D$ 中的每一个都相邻，\n- $A$ 与 $B$ 和 $D$ 相邻，\n- $B$ 与 $A$ 和 $C$ 相邻，\n- $C$ 与 $B$ 和 $D$ 相邻，\n- $D$ 与 $C$ 和 $A$ 相邻。\n因此，$A,B,C,D$ 构成一个4-圈 $(A\\text{-}B\\text{-}C\\text{-}D\\text{-}A)$，并且 $E$ 与这四个顶点都相连。\n\n可用的时间段（列表）是：\n$$L(E)=\\{1,2,3\\},\\quad L(A)=\\{1,2\\},\\quad L(B)=\\{1,3\\},\\quad L(C)=\\{2,3\\},\\quad L(D)=\\{1,2\\}.$$\n\n我们以 $E$ 的时间段选择为条件，计算在导出的删减列表下，该4-圈的有效列表着色数量。设 $N_{s}$ 为当 $E$ 被分配到时间段 $s\\in\\{1,2,3\\}$ 时，$A,B,C,D$ 的有效分配数量。有效安排的总数为\n$$N_{\\text{total}}=N_{1}+N_{2}+N_{3}.$$\n\n情况 $E=1$：从 $A,B,D$ 的列表中移除 $1$（$C$ 的列表不变）。删减后的列表为\n$$L'(A)=\\{2\\},\\quad L'(B)=\\{3\\},\\quad L'(C)=\\{2,3\\},\\quad L'(D)=\\{2\\}.$$\n由于 $A$ 和 $D$ 相邻且都被强制选择 $2$，边 $A\\text{-}D$ 无法被满足。因此\n$$N_{1}=0.$$\n\n情况 $E=2$：从 $A,C,D$ 的列表中移除 $2$（$B$ 的列表不变）。删减后的列表为\n$$L'(A)=\\{1\\},\\quad L'(B)=\\{1,3\\},\\quad L'(C)=\\{3\\},\\quad L'(D)=\\{1\\}.$$\n由于 $A$ 和 $D$ 相邻且都被强制选择 $1$，边 $A\\text{-}D$ 无法被满足。因此\n$$N_{2}=0.$$\n\n情况 $E=3$：从 $B,C$ 的列表中移除 $3$（$A,D$ 的列表不变）。删减后的列表为\n$$L'(A)=\\{1,2\\},\\quad L'(B)=\\{1\\},\\quad L'(C)=\\{2\\},\\quad L'(D)=\\{1,2\\}.$$\n现在 $B=1$ 和 $C=2$ 是强制的。边 $A\\text{-}B$ 强制 $A\\neq 1$，所以 $A=2$。边 $C\\text{-}D$ 强制 $D\\neq 2$，所以 $D=1$。剩下的边 $D\\text{-}A$ 是被满足的，因为 $1\\neq 2$。因此，在这种情况下，恰好只有一个有效分配：\n$$N_{3}=1.$$\n\n将三种情况相加得到\n$$N_{\\text{total}}=0+0+1=1.$$", "answer": "$$\\boxed{1}$$", "id": "1479827"}]}