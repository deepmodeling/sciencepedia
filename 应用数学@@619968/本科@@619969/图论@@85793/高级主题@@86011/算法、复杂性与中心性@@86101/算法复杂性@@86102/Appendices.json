{"hands_on_practices": [{"introduction": "我们从一个基本问题开始：我们选择的图表示法如何从根本上决定算法的效率？本练习将通过一个在社交网络中寻找最具影响力用户的场景，来探讨这一核心问题。当网络结构以邻接矩阵的形式给出时，即使是计算节点度数这样看似简单的任务，其时间复杂度也直接受制于矩阵的规模。通过这个练习，你将深入理解为何在进行复杂度分析时，必须首先考虑底层的数据结构。[@problem_id:1480504]", "problem": "一位计算机科学家正在分析一个社交网络，以找出最具影响力的用户。该网络被建模为一个简单无向图，其中每个用户是一个顶点，两个用户之间的相互连接是一条边。整个网络结构由 $V$ 个用户组成，以邻接矩阵 $A$ 的形式给出。该矩阵是一个 $V \\times V$ 的网格，其中如果用户 $i$ 和用户 $j$ 之间有连接，则条目 $A_{ij}$ 为 $1$，否则为 $0$。由于连接是相互的，该矩阵是对称的（$A_{ij} = A_{ji}$）。一个用户拥有的连接数称为其度。目标是设计一个算法来找到度数最高的用户。\n\n设 $V$ 是图中的顶点（用户）数，$E$ 是边（连接）数。在给定邻接矩阵表示的情况下，找到度数最高顶点的确定性算法的最紧确的大O时间复杂度是多少？\n\nA. $O(V)$\n\nB. $O(E)$\n\nC. $O(V+E)$\n\nD. $O(V \\log E)$\n\nE. $O(V^2)$\n\nF. $O(V \\cdot E)$", "solution": "我们给定一个包含 $V$ 个顶点的无向简单图，其由邻接矩阵 $A \\in \\{0,1\\}^{V \\times V}$ 表示，且满足 $A_{ij} = A_{ji}$。顶点 $i$ 的度定义为 $\\deg(i) = \\sum_{j=1}^{V} A_{ij}$。要确定性地找到度数最大的顶点，我们必须为每个 $i \\in \\{1,\\dots,V\\}$ 计算 $\\deg(i)$ 并追踪最大值。\n\n一个直接的算法会扫描 $A$ 的每一行 $i$，通过对 $V$ 个条目求和来计算 $\\deg(i)$。这需要每行进行 $V$ 次加法，共有 $V$ 行，因此总工作量是 $V \\cdot V = V^{2}$ 次条目检查和加法，即 $O(V^{2})$。\n\n我们可以利用对称性，通过只扫描满足 $1 \\leq i < j \\leq V$ 的严格上三角条目 $(i,j)$ 来避免重复计数。对于每个这样的条目，如果 $A_{ij} = 1$，我们同时增加 $\\deg(i)$ 和 $\\deg(j)$ 的计数器。被检查的条目数量为 $\\binom{V}{2} = \\frac{V(V-1)}{2}$，即 $\\Theta(V^{2})$。因此，存在一个时间复杂度为 $O(V^{2})$ 的算法。\n\n为了论证其紧确性，考虑任何一个在最坏情况下不检查某个条目 $A_{ij}$ 的确定性算法。一个对手（adversary）可以修改那个未被检查的条目，将 $\\deg(i)$ 和 $\\deg(j)$ 改变 $1$，这可能会改变哪个顶点具有最大度。因此，为了在最坏情况下保证正确性，算法必须检查数量级为 $\\Omega(V^{2})$ 的条目。由于我们既有上界 $O(V^{2})$，又有与之匹配的下界 $\\Omega(V^{2})$，所以紧确界为 $\\Theta(V^{2})$。\n\n在给定的选项中，这对应于 $O(V^{2})$，即选项E。", "answer": "$$\\boxed{E}$$", "id": "1480504"}, {"introduction": "邻接矩阵并非表示图的唯一方式；对于连接相对稀疏的网络，邻接表往往是更高效的选择。这个练习将场景切换到微服务架构，要求你找出所有“独立”的服务，即那些无任何传入或传出连接的节点。在解决这个问题的过程中，你将亲手实践和理解 $O(N+M)$ 这一图算法中至关重要的时间复杂度，它是分析许多基于邻接表的遍历算法的基石。[@problem_id:1480481]", "problem": "一位系统架构师正在分析一个大规模微服务网络。该网络由 $N$ 个不同的微服务组成，这些微服务由从 $0$ 到 $N-1$ 的整数标识。这些服务之间的通信是通过 $M$ 个单向、有向的通信信道实现的。一个从服务 $u$ 到服务 $v$ 的信道允许 $u$ 向 $v$ 发送数据，但反之则不行。\n\n整个网络拓扑以邻接表格式提供给您。它由一个包含 $N$ 个列表的数组组成，其中第 $i$ 个列表包含服务 $i$ 可以直接向其发送数据的所有服务的标识符。所有这些列表的长度之和等于 $M$。\n\n您的任务是找出所有“独立”的微服务。一个微服务被定义为独立的，当且仅当它的总度数为零，这意味着它既不向任何其他服务发送数据，也不从任何其他服务接收数据。\n\n找出所有独立服务的最有效算法的、作为 $N$ 和 $M$ 的函数的最紧最坏情况时间复杂度是多少？\n\nA) $O(N)$\n\nB) $O(M)$\n\nC) $O(N+M)$\n\nD) $O(N \\cdot M)$\n\nE) $O(N \\log N + M)$\n\nF) $O(N^2)$", "solution": "我们给定一个以邻接表形式表示的、具有 $N$ 个顶点和 $M$ 条边的有向图。一个顶点是独立的，如果其总度数为零，即入度和出度都为零。为了高效地找到所有这样的顶点，可以按以下步骤进行。\n\n初始化两个用于记录度数的数组：对于每个顶点 $i \\in \\{0,\\dots,N-1\\}$，设置 $\\text{indeg}[i]=0$，并通过读取顶点 $i$ 的列表来计算 $\\text{outdeg}[i]=|\\text{Adj}[i]|$。在扫描邻接表时，对于遇到的每条边，例如 $(i \\rightarrow v)$（其中 $v$ 出现在 $\\text{Adj}[i]$ 中），将 $\\text{indeg}[v]$ 增加 $1$。完成扫描后，当且仅当 $\\text{indeg}[i]=0$ 且 $\\text{outdeg}[i]=0$ 时，声明顶点 $i$ 为独立的；这需要最后再遍历一次所有 $N$ 个顶点。\n\n该算法的正确性源于定义：出度等于邻接表的长度，而入度是入边的数量，我们通过精确地访问每条边一次并增加其目标顶点的入度来计算入度值。\n\n令 $T(N,M)$ 表示运行时间。扫描所有 $N$ 个邻接表以获得出度，所需时间与列表头部的总数加上其元素的总数成正比，即 $O(N+M)$。在扫描过程中，我们处理 $M$ 条边中的每一条一次以累加入度，这需要 $O(M)$ 的时间。最后遍历所有 $N$ 个顶点以收集独立顶点，需要 $O(N)$ 的时间。因此，\n$$\nT(N,M)=O(N)+O(M)+O(N)=O(N+M).\n$$\n\n这在最坏情况下是紧的。任何算法都必须至少检查每个邻接表以确定其是否为空（这需要 $\\Omega(N)$ 的时间），并且还必须考虑所有 $M$ 条边来确定入度（这需要 $\\Omega(M)$ 的时间）。因此存在一个下界\n$$\nT(N,M)=\\Omega(N+M),\n$$\n结合上界，最优的最坏情况复杂度为\n$$\nT(N,M)=\\Theta(N+M).\n$$\n\n在给定的选项中，这对应于 $O(N+M)$。", "answer": "$$\\boxed{C}$$", "id": "1480481"}, {"introduction": "优秀的算法设计往往是将现有工具巧妙组合并利用问题内在的结构特性。本练习将向你展示一个求解树的直径的经典两步算法，这在网络设计中是评估最大通信延迟的关键步骤。你需要运用广度优先搜索（BFS）的知识，并结合树这种特殊图结构（其中边数 $E$ 与顶点数 $V$ 的关系为 $E=V-1$）的性质，来推导出整个过程的最终时间复杂度。这个过程完美地体现了如何通过理论洞察来简化和优化复杂度分析。[@problem_id:1480548]", "problem": "在一个容错的去中心化计算网络的设计中，节点被连接成一个树形结构。这种拓扑结构在确保连通性的同时没有冗余的链接。该网络的一个关键性能指标是其“通信直径”，定义为任意两个节点之间最短路径上的最大跳数（边数）。\n\n为了确定该直径，执行以下两步过程：\n1.  一个任意的起始节点 `s` 执行一个全网范围的查询，以找到离它最远的节点 `u`。此查询通过广度优先搜索（BFS）实现，其中“最远”由最大跳数定义。\n2.  找到的节点 `u` 接着启动自己的BFS，以找到离它最远的节点 `v`。`u` 和 `v` 之间的距离即为该网络的通信直径。\n\n该网络被建模为一个拥有 $V$ 个节点和 $E$ 条边的连通无权图。给定该图是一棵树，请确定这整个两步过程的最紧凑的最坏情况时间复杂度。请用大O表示法将答案表示为 $V$ 和/或 $E$ 的函数。", "solution": "我们将该网络建模为一个具有 $V$ 个节点和 $E$ 条边的连通无权树。对于任何树，根据其定义（连通且无环），结构恒等式 $E=V-1$ 成立。\n\n使用邻接表实现的广度优先搜索（BFS），对每个顶点和每条边最多访问一次。因此，单次BFS的时间复杂度为\n$$\nT_{\\text{BFS}}(V,E)=\\Theta(V+E)=O(V+E).\n$$\n步骤1从 $s$ 开始执行一次BFS以找到最远节点 $u$，其成本为 $O(V+E)$。步骤2从 $u$ 开始执行另一次BFS以找到最远节点 $v$，成本同样为 $O(V+E)$。因此，总时间为\n$$\nT_{\\text{total}}(V,E)=T_{\\text{BFS}}(V,E)+T_{\\text{BFS}}(V,E)=O\\big((V+E)+(V+E)\\big)=O(V+E).\n$$\n因为该图是一棵树，我们代入 $E=V-1$ 得到\n$$\nT_{\\text{total}}(V,E)=O\\big(V+(V-1)\\big)=O(2V-1)=O(V).\n$$\n这个 $O(V)$ 的界是给定在树上执行的两步过程的最紧凑的最坏情况复杂度。", "answer": "$$\\boxed{O(V)}$$", "id": "1480548"}]}