{"hands_on_practices": [{"introduction": "贪心算法是算法设计中的一个基本策略，它在每一步都做出局部最优的选择。这个练习将探讨一个简单的贪心算法在最大割问题上的表现 [@problem_id:1481522]。通过在简单路径图上的分析，你将深入理解这种局部最优策略的运作方式，并发现它在特定图结构下如何能够达到全局最优解。", "problem": "一位计算机科学家正在研究一个用于解决最大割问题的简单贪心算法。该问题旨在将图 $G=(V, E)$ 的顶点划分到两个不相交的集合 $S_1$ 和 $S_2$ 中，使得连接 $S_1$ 中顶点与 $S_2$ 中顶点的边数得到最大化。\n\n所考虑的图是一个有 $n$ 个顶点的路径图 $P_n$，其顶点标记为 $v_1, v_2, \\ldots, v_n$。$P_n$ 中的边连接连续的顶点，因此其边集为 $E = \\{(v_i, v_{i+1}) \\mid 1 \\le i < n\\}$。\n\n这个名为 `SEQUENTIAL-PARTITION` 的算法按照顶点的下标顺序，从 $i=1$ 到 $n$ 逐个处理顶点。对于每个顶点 $v_i$，算法会根据哪种放置方式能最大化与已放置顶点（$v_1, \\ldots, v_{i-1}$）连接的新形成的割边数量，来决定将其放入 $S_1$ 还是 $S_2$。\n\n`SEQUENTIAL-PARTITION` 算法的详细步骤如下：\n1.  初始化两个空集 $S_1$ 和 $S_2$。\n2.  对于从 $i=1$到 $n$ 的每个顶点 $v_i$：\n    a.  设 $N_{i-1} = \\{v_j \\in V \\mid j < i\\}$ 为已经被分配到某个划分中的顶点集合。\n    b.  计算 $c_1$，即连接 $v_i$ 与 $S_2 \\cap N_{i-1}$ 中顶点的边数。这是将 $v_i$ 放入 $S_1$ 时形成的新割边的数量。\n    c.  计算 $c_2$，即连接 $v_i$ 与 $S_1 \\cap N_{i-1}$ 中顶点的边数。这是将 $v_i$ 放入 $S_2$ 时形成的新割边的数量。\n    d.  如果 $c_1 > c_2$，则将 $v_i$ 放入 $S_1$。\n    e.  如果 $c_2 > c_1$，则将 $v_i$ 放入 $S_2$。\n    f.  如果出现平局（$c_1 = c_2$），则默认将 $v_i$ 放入 $S_1$。\n\n在所有顶点都被划分后，割的大小即为 $S_1$ 和 $S_2$ 之间的总边数。\n\n请确定 `SEQUENTIAL-PARTITION` 算法在路径图 $P_n$ 上生成的割的大小。请将答案表示为关于 $n$ 的函数，并假设 $n \\ge 2$。", "solution": "我们来分析该算法在路径图 $P_{n}$ 上的执行过程，该图的顶点为 $v_{1},\\ldots,v_{n}$，边集为 $E=\\{(v_{i},v_{i+1}) \\mid 1 \\leq i < n\\}$。在第 $i$ 步，算法会比较 $c_{1}$ 和 $c_{2}$。这两个值分别表示当 $v_{i}$ 被放入 $S_{1}$ 或 $S_{2}$ 时，与 $v_{i}$ 关联的新增割边数量，这里只考虑 $v_i$ 在 $N_{i-1}=\\{v_{j} \\mid j<i\\}$ 中的邻居。\n\n在路径图 $P_{n}$ 中，对于 $i \\geq 2$，$v_{i}$ 在 $N_{i-1}$ 内的唯一邻居是 $v_{i-1}$；而当 $i=1$ 时，$v_1$ 在 $N_{0}$ 中没有邻居。因此：\n- 对于 $i=1$，$N_{0}=\\emptyset$，因此 $c_{1}=0$ 且 $c_{2}=0$。根据平局规则，$v_{1}$ 被放入 $S_{1}$。\n- 对于 $i \\geq 2$，唯一可能与 $v_i$ 关联且连接到 $N_{i-1}$ 的割边是 $(v_{i},v_{i-1})$。于是：\n  - 如果 $v_{i-1} \\in S_{1}$，那么将 $v_{i}$ 放入 $S_{2}$ 会产生一条割边，而放入 $S_{1}$ 则不会；这等价于 $c_{2}=1$ 和 $c_{1}=0$，因此算法将 $v_{i}$ 放入 $S_{2}$。\n  - 如果 $v_{i-1} \\in S_{2}$，那么 $c_{1}=1$ 和 $c_{2}=0$，因此算法将 $v_{i}$ 放入 $S_{1}$。\n\n从 $v_{1} \\in S_{1}$ 开始，并应用“对于 $i \\geq 2$，$v_{i}$ 总是被放置在与 $v_{i-1}$ 相反的集合中”这一规则，通过对 $i$ 进行归纳，我们得到如下的交替划分：\n$$\nv_{i} \\in S_{1} \\iff i \\text{ is odd}, \\quad v_{i} \\in S_{2} \\iff i \\text{ is even}.\n$$\n对于每一条边 $(v_{i},v_{i+1})$（$1 \\leq i < n$），其两个端点的下标 $i$ 和 $i+1$ 的奇偶性不同，因此它们分属于不同的集合，所以每条边都是一条割边。因此，该算法产生的割的大小等于 $P_{n}$ 中的总边数：\n$$\n|E|=n-1.\n$$\n所以，对于所有 $n \\geq 2$，该算法返回的割的大小是 $n-1$。", "answer": "$$\\boxed{n-1}$$", "id": "1481522"}, {"introduction": "当确定性算法难以找到高效解时，随机化往往能提供一种出人意料的简单而有效的思路。本实践将介绍一个基本的随机化算法，它通过为每个顶点“抛硬币”来决定其划分 [@problem_id:1481517]。通过在星形图上分析该算法，你将掌握随机化方法的核心思想，并学会计算其找到最优解的精确概率，从而体会到它的简洁性与潜在的局限性。", "problem": "考虑一个星形图，记为 $S_n$，其中整数 $n \\geq 3$。该图由 $n$ 个顶点组成：一个中心顶点和 $n-1$ 个外围“叶”顶点。中心顶点与 $n-1$ 个叶顶点中的每一个都通过一条边相连，图中没有其他边。\n\n图的一个割（cut）是将其顶点划分为两个不相交的集合，我们可以称之为 $U$ 和 $W$。割的大小定义为其中一个端点在 $U$ 中而另一个端点在 $W$ 中的边的数量。最大割（Max-Cut）问题的目标是找到一个能使此大小最大化的划分。\n\n现在，考虑一个用于寻找割的简单随机算法。对于 $S_n$ 中的每个顶点，该算法以 $1/2$ 的概率将其分配给集合 $U$，或以 $1/2$ 的概率将其分配给集合 $W$，且每次分配都与所有其他分配相互独立。\n\n你的任务是求出两个量。首先，确定星形图 $S_n$ 的最大可能割（Max-Cut）的大小。其次，计算所述随机算法产生这个最大尺寸的割的精确概率。\n\n请按顺序以关于 $n$ 的两个表达式的形式给出你的最终答案：最大割的大小和计算出的概率。", "solution": "在星形图 $S_n$ 中，有 $n-1$ 条边，每条边都与唯一的中心顶点邻接。对于任何割 $(U,W)$，当且仅当一条边的两个端点被分到不同的集合时，该边才会对割的大小有贡献。因此，割的大小等于被放置在与中心顶点相对的另一侧的叶顶点的数量。当中心顶点被置于一个部分，而所有 $n-1$ 个叶顶点被置于另一部分时，这个数量达到最大。由于总边数为 $n-1$，这个上界是可以达到的，因此最大割的大小是\n$$\nn-1.\n$$\n\n对于该随机算法，每个顶点独立地以 $\\frac{1}{2}$ 的概率进入 $U$，并以 $\\frac{1}{2}$ 的概率进入 $W$。最大割恰好在所有叶顶点都位于与中心顶点相对的一侧时发生。存在两种不相交的有利配置：中心顶点在 $U$ 中且所有叶顶点在 $W$ 中，或者中心顶点在 $W$ 中且所有叶顶点在 $U$ 中。第一种配置的概率是\n$$\n\\frac{1}{2}\\left(\\frac{1}{2}\\right)^{n-1}=\\left(\\frac{1}{2}\\right)^{n},\n$$\n第二种配置具有相同的概率。根据不相交事件的加法性，该算法产生最大割的总概率是\n$$\n2\\left(\\frac{1}{2}\\right)^{n}=2^{1-n}.\n$$", "answer": "$$\\boxed{\\begin{pmatrix} n-1 & 2^{1-n} \\end{pmatrix}}$$", "id": "1481517"}, {"introduction": "随机算法虽然能提供良好的期望性能，但在实践中我们常常需要一个具有确定性保障的算法。条件期望法就是一种将随机算法“去随机化”的强大技术。这个练习将带你完成去随机化过程中的关键第一步计算 [@problem_id:1481479]。你将学习如何通过一系列确定的选择，来保证最终得到的解至少不劣于随机算法的期望值，从而具体地感受这一巧妙技术的威力。", "problem": "考虑一个无向图 $G=(V, E)$，其中 $V$ 是顶点集，$E$ 是边集。最大割 (MAX-CUT) 问题是寻找顶点集 $V$ 的一个划分为两个不相交的集合 $S_1$ 和 $S_2$，使得跨越 $S_1$ 和 $S_2$ 的边的数量最大化。\n\n一个简单的MAX-CUT随机化算法将每个顶点以相等的概率独立地分配到 $S_1$ 或 $S_2$ 中。这种随机化方法可以使用条件期望法进行去随机化。去随机化过程按照一个固定的顺序，例如 $v_1, v_2, \\dots, v_n$，逐一考虑顶点。对于每个顶点 $v_i$ ($i=1, \\dots, n$)，算法会做出一个确定性的选择，将其放入 $S_1$ 或 $S_2$ 中。做出该选择是为了最大化最终总割大小的条件期望。此期望以已确定的顶点 $v_1, \\dots, v_{i-1}$ 的分配和顶点 $v_i$ 的试探性分配为条件，并对后续顶点 $v_{i+1}, \\dots, v_n$ 的所有可能随机分配取平均值。\n\n假设给定一个图，其顶点集为 $V=\\{v_1, v_2, v_3, v_4, v_5\\}$，边集为 $E = \\{(v_1, v_2), (v_1, v_4), (v_2, v_3), (v_2, v_5), (v_3, v_4), (v_4, v_5)\\}$。\n\n您的任务是执行此去随机化过程中的第一步计算。计算在顶点 $v_1$ 被放入划分 $S_1$ 的条件下，割的条件期望大小。将您的答案表示为单个实数。", "solution": "令 $X$ 表示总割的大小，对于每条边 $e \\in E$，定义指示变量 $X_{e}$，如果边 $e$ 被切割，则 $X_e = 1$，否则 $X_e = 0$。那么\n$$\n\\mathbb{E}[X \\mid v_{1} \\in S_{1}] \\;=\\; \\sum_{e \\in E} \\mathbb{E}[X_{e} \\mid v_{1} \\in S_{1}] \\;=\\; \\sum_{e \\in E} \\mathbb{P}(e\\ \\text{is cut} \\mid v_{1} \\in S_{1}).\n$$\n考虑与 $v_{1}$ 邻接的边：$(v_{1},v_{2})$ 和 $(v_{1},v_{4})$。给定 $v_{1} \\in S_{1}$， $v_{2}$ 和 $v_{4}$ 各自独立地以 $\\frac{1}{2}$ 的概率进入 $S_{1}$ 或 $S_{2}$，因此\n$$\n\\mathbb{P}((v_{1},v_{2})\\ \\text{is cut} \\mid v_{1} \\in S_{1}) \\;=\\; \\mathbb{P}(v_{2} \\in S_{2}) \\;=\\; \\frac{1}{2},\n$$\n对 $(v_{1},v_{4})$ 的情况也类似。对于不与 $v_{1}$ 邻接的边，即 $(v_{2},v_{3}), (v_{2},v_{5}), (v_{3},v_{4}), (v_{4},v_{5})$，其两个端点均以 $\\frac{1}{2}$ 的概率被独立地分配到 $S_{1}$ 或 $S_{2}$，因此\n$$\n\\mathbb{P}((u,w)\\ \\text{is cut} \\mid v_{1} \\in S_{1}) \\;=\\; \\mathbb{P}(u \\in S_{1}, w \\in S_{2}) + \\mathbb{P}(u \\in S_{2}, w \\in S_{1}) \\;=\\; 2 \\cdot \\frac{1}{2} \\cdot \\frac{1}{2} \\;=\\; \\frac{1}{2}.\n$$\n总共有 $6$ 条边，每条边对期望的贡献是 $\\frac{1}{2}$，所以\n$$\n\\mathbb{E}[X \\mid v_{1} \\in S_{1}] \\;=\\; 6 \\cdot \\frac{1}{2} \\;=\\; 3.\n$$", "answer": "$$\\boxed{3}$$", "id": "1481479"}]}