{"hands_on_practices": [{"introduction": "让我们从一个直观的例子开始，这个例子展示了如何将现实世界中的资源分配问题建模为“划分拟阵”（partition matroid）。在这个练习中，你将为一个项目组建一个团队，团队成员的选择受到不同部门的人数限制。这个场景完美地诠释了划分拟阵的结构，并让你通过应用贪心算法，亲身体验如何高效地找到最优解 [@problem_id:1542053]。这个练习旨在帮助你理解拟阵的基本概念，并掌握在带权重的划分拟阵上寻找最大权重基的贪心策略。", "problem": "一家科技初创公司正在为一个新项目组建一个精英研发团队。现有专家来自三个不同领域：量子计算 ($E_1$)、机器学习 ($E_2$) 和密码学 ($E_3$)。团队的构成必须遵守特定的部门限制：最多一名量子计算专家，最多两名机器学习专家，以及最多一名密码学专家。\n\n现有专家及其相关的“生产力分数”如下：\n\n**领域 $E_1$：量子计算**\n*   Alice: 8\n*   Bob: 5\n\n**领域 $E_2$：机器学习**\n*   Carol: 10\n*   David: 9\n*   Eve: 7\n*   Frank: 4\n\n**领域 $E_3$：密码学**\n*   Grace: 11\n*   Heidi: 6\n\n该初创公司旨在组建一个满足部门限制且成员数量最多的团队。在所有达到此最大规模的团队中，目标是选择总生产力分数最高的那个团队。这个可能的最大总生产力分数是多少？\n\nA. 33\n\nB. 35\n\nC. 37\n\nD. 38\n\nE. 39", "solution": "这个问题可以用划分拟阵 (partition matroid) 来建模。设基础集 $E$ 为所有可用专家的集合。该集合被划分为三个不相交的子集：$E_1$ (量子计算)，$E_2$ (机器学习) 和 $E_3$ (密码学)。\n\n部门限制定义了拟阵的结构。如果一个专家集合（一个团队）$I \\subseteq E$ 满足以下条件，它就被认为是一个“独立集”：\n*   $|I \\cap E_1| \\leq d_1 = 1$\n*   $|I \\cap E_2| \\leq d_2 = 2$\n*   $|I \\cap E_3| \\leq d_3 = 1$\n\n问题要求组建一个“成员数量最多的团队”，这对应于找到拟阵的一个“基”(basis)。“基”是极大的独立集。对于划分拟阵，所有的基都具有相同的大小，这个大小被称为拟阵的秩 (rank)，由 $r(M) = \\sum_i d_i$ 给出。\n在本例中，秩为 $r(M) = d_1 + d_2 + d_3 = 1 + 2 + 1 = 4$。因此，最优团队将恰好有4名成员。\n\n目标是找到一个具有最大总权重（生产力分数）的基。这可以通过使用贪心算法 (greedy algorithm) 来实现，该算法保证能为任何拟阵找到一个最优基。\n\n**步骤1：对专家进行排序**\n我们首先将基础集 $E$ 中的所有专家按其生产力分数降序排列。\n\n| 专家   | 部门         | 分数  |\n| :---   | :---         | :---  |\n| Grace  | 密码学 ($E_3$) | 11    |\n| Carol  | 机器学习 ($E_2$) | 10  |\n| David  | 机器学习 ($E_2$) | 9   |\n| Alice  | 量子计算 ($E_1$) | 8   |\n| Eve    | 机器学习 ($E_2$) | 7   |\n| Heidi  | 密码学 ($E_3$) | 6   |\n| Bob    | 量子计算 ($E_1$) | 5   |\n| Frank  | 机器学习 ($E_2$) | 4   |\n\n**步骤2：应用贪心算法**\n我们初始化一个空团队（解集）$A = \\emptyset$。我们还为每个部门选定的成员数量初始化计数器：$c_1 = 0$, $c_2 = 0$, $c_3 = 0$。然后，我们遍历排序后的专家列表，当且仅当将某位专家加入团队 $A$ 不违反部门限制时，才将其加入。\n\n1.  **考虑 Grace** (分数 11，部门 $E_3$)：当前密码学部门的计数为 $c_3=0$。由于 $0 < d_3=1$，我们可以添加 Grace。\n    *   $A = \\{\\text{Grace}\\}$。\n    *   更新计数：$c_3=1$。\n\n2.  **考虑 Carol** (分数 10，部门 $E_2$)：当前机器学习部门的计数为 $c_2=0$。由于 $0 < d_2=2$，我们可以添加 Carol。\n    *   $A = \\{\\text{Grace, Carol}\\}$。\n    *   更新计数：$c_2=1$。\n\n3.  **考虑 David** (分数 9，部门 $E_2$)：当前机器学习部门的计数为 $c_2=1$。由于 $1 < d_2=2$，我们可以添加 David。\n    *   $A = \\{\\text{Grace, Carol, David}\\}$。\n    *   更新计数：$c_2=2$。\n\n4.  **考虑 Alice** (分数 8，部门 $E_1$)：当前量子计算部门的计数为 $c_1=0$。由于 $0 < d_1=1$，我们可以添加 Alice。\n    *   $A = \\{\\text{Grace, Carol, David, Alice}\\}$。\n    *   更新计数：$c_1=1$。\n\n此时，我们团队 $A$ 的大小为 4，等于拟阵的秩。我们已经找到了一个基，并且由于我们使用的是贪心算法，它必然是一个最大权重的基。算法终止。\n\n**步骤3：计算总分数**\n最优团队由专家 {Grace, Carol, David, Alice} 组成。我们将他们的生产力分数相加，以找到可能的最大总分数：\n总分数 = 分数(Grace) + 分数(Carol) + 分数(David) + 分数(Alice)\n总分数 = $11 + 10 + 9 + 8 = 38$。\n\n这对应于选项 D。", "answer": "$$\\boxed{D}$$", "id": "1542053"}, {"introduction": "接下来，我们将探讨拟阵理论中最经典和最直观的应用之一：图拟阵（graphic matroid）与最大生成树问题。此练习要求你为一组数据中心设计一个成本最高的通信网络，这本质上是在一个带权图中寻找最大权重的生成树。通过这个练习，你会发现著名的Kruskal算法实际上就是贪心算法在图拟阵上的一个特例 [@problem_id:1542085]。此外，这个问题还引入了一个有趣的变数——当存在多个权重相同的边时，可能会产生多个不同的最优解，这有助于加深你对最优解唯一性的理解。", "problem": "一家公司正在设计一个通信网络，用以连接其5个数据中心，分别标记为$V_1$、$V_2$、$V_3$、$V_4$和$V_5$。在任意两个中心之间建立直接链路都关联着一个成本，该成本代表了战略价值和工程投入的组合。公司的目标是建立一个总成本尽可能大的主干网络。该网络必须满足两个条件：它必须连接所有数据中心（确保任意两个中心之间都存在通信路径），并且它必须是最小化的（不包含冗余链路，冗余链路是指在网络中形成闭环的链路）。\n\n可用的链路及其相关成本如下：\n- ($V_1, V_2$): 5\n- ($V_1, V_3$): 5\n- ($V_2, V_3$): 5\n- ($V_1, V_4$): 4\n- ($V_1, V_5$): 3\n- ($V_4, V_5$): 2\n- ($V_2, V_4$): 1\n- ($V_3, V_5$): 1\n\n确定能达到最大可能成本的不同主干网络的总数。", "solution": "我们将所需的主干网络建模为给定加权图的一个最大权重生成树（连通、无环、覆盖所有五个顶点）。根据求解最大生成树的Kruskal算法，我们按非递增顺序对边进行排序，如果某条边连接了两个不同的连通分量，就将其加入；这样可以得到一个总权重最大的树。我们还使用切割性质：对于任意切割，跨越该切割的唯一最大权重边必须属于每一个最大权重生成树。\n\n按权重等级列出各边：\n- 权重 $5$：($V_1, V_2$), ($V_1, V_3$), ($V_2, V_3$)（这些边在 $\\{V_1, V_2, V_3\\}$ 上构成一个 $K_3$）。\n- 权重 $4$：($V_1, V_4$)。\n- 权重 $3$：($V_1, V_5$)。\n- 权重 $2$：($V_4, V_5$)。\n- 权重 $1$：($V_2, V_4$), ($V_3, V_5$)。\n\n按权重降序处理：\n1) 对于权重为 $5$ 的边，在 $\\{V_1, V_2, V_3\\}$ 中，为避免形成环，我们只能选择 $3$ 条边中的 $2$ 条，从而在这三个顶点上形成一棵树。任意选择两条边都能得到相同的权重贡献 $5+5$ 并保持无环性。这里的选择数量等于 $K_3$ 的生成树数量，即 $3$（等价于选择三条边中舍弃哪一条）。\n\n2) 考虑切割 $\\{V_4\\}$ 与其补集。跨越该切割的边是权重为 $4$ 的 ($V_1, V_4$)、权重为 $1$ 的 ($V_2, V_4$) 和权重为 $2$ 的 ($V_4, V_5$)。其中唯一的最大权重边是 ($V_1, V_4$)，因此根据切割性质，它必须被包含在每个最大权重生成树中。\n\n3) 考虑切割 $\\{V_5\\}$ 与其补集。跨越该切割的边是权重为 $3$ 的 ($V_1, V_5$)、权重为 $1$ 的 ($V_3, V_5$) 和权重为 $2$ 的 ($V_4, V_5$)。其中唯一的最大权重边是 ($V_1, V_5$)，因此根据切割性质，它必须被包含在每个最大权重生成树中。\n\n经过步骤1)–3)，我们已经选择了 $4$ 条边：两条权重为 $5$ 的边，加上权重为 $4$ 的 ($V_1, V_4$) 和权重为 $3$ 的 ($V_1, V_5$)。这 $4$ 条边连接了所有 $5$ 个顶点并形成了一棵树（从 $\\{V_1, V_2, V_3\\}$ 上的一棵树开始，($V_1, V_4$) 和 ($V_1, V_5$) 各自连接了一个新的叶子节点），因此不能再添加任何边，否则会产生环。总权重为\n$$\n5+5+4+3=17.\n$$\n将任何一条强制选择的边替换为权重较低的边都会严格地减少总权重，因此这是可能的最大成本。唯一的自由在于从三条可用的权重为$5$的边中选择两条，正好有$3$种选择。因此，不同的最大成本主干网络总数为$3$个。", "answer": "$$\\boxed{3}$$", "id": "1542085"}, {"introduction": "我们已经看到，在拟阵结构上，简单的贪心算法能够保证找到全局最优解。但如果一个系统不满足拟阵的公理，会发生什么呢？这个练习将引导你探索贪心策略的边界 [@problem_id:1542039]。你将分析一个“单交换局部改进”算法在一个不一定是拟阵的独立系统上的表现，并发现它可能会陷入局部最优解而无法自拔。通过计算局部最优解与全局最优解的比值，你将深刻体会到拟阵结构对于保证贪心算法最优性的关键作用，从而更好地理解这一理论的深刻内涵。", "problem": "在组合优化中，贪心算法通常能为具有称为拟阵的特殊结构的问题提供最优解。然而，对于更一般的独立系统，或当使用不同的算法方法时，可能会得到次优解。\n\n考虑一个“单交换局部改进”算法。该算法从一个任意的基（一个极大独立集）开始，并重复寻求改进。改进步骤包括找到一个非基元素 $y$ 和一个基元素 $x$，使得用 $y$ 替换 $x$ 后得到的新集合也是一个基，并且总权重严格更大。当不存在任何能增加总权重的单元素交换时，算法终止并输出其当前基。这个终止状态是一个局部最优解。\n\n请分析该算法在一个特定的加权独立系统上的性能。该系统定义在全集 $E = E_1 \\cup E_2$ 上，其中划分为 $E_1 = \\{a_1, a_2\\}$ 和 $E_2 = \\{b_1, b_2, b_3, b_4\\}$。各元素的权重如下：\n- $w(a_1) = 6$\n- $w(a_2) = 5$\n- $w(b_1) = 4$\n- $w(b_2) = 4$\n- $w(b_3) = 4$\n- $w(b_4) = 1$\n\n如果一个子集 $I \\subseteq E$ 满足以下所有规则，则它被定义为**独立的**：\n1. $I$ 中来自 $E_1$ 的元素数量至多为一个：$|I \\cap E_1| \\leq 1$。\n2. $I$ 中来自 $E_2$ 的元素数量至多为两个：$|I \\cap E_2| \\leq 2$。\n3. 一个特殊条件：如果 $a_1 \\in I$，那么 $I$ 不能包含超过一个来自集合 $\\{b_1, b_2, b_3\\}$ 的元素。形式上，如果 $a_1 \\in I$，则 $|I \\cap \\{b_1, b_2, b_3\\}| \\leq 1$。\n\n“单交换局部改进”算法从初始基 $B_{start} = \\{a_1, b_1, b_4\\}$ 开始。\n\n令 $W_{local}$ 为算法终止时的基的总权重，令 $W_{opt}$ 为该独立系统的真正全局最优基的总权重。计算比值 $\\frac{W_{local}}{W_{opt}}$。将你的最终答案四舍五入到四位有效数字。", "solution": "我们首先刻画该独立系统的基。对于任意独立集 $I$，根据规则1和规则2，我们有\n$$\n|I| = |I \\cap E_1| + |I \\cap E_2| \\leq 1 + 2 = 3.\n$$\n由于集合 $\\{a_2, b_1, b_2\\}$ 是独立的且大小为 $3$，因此最大可能的大小为 $3$，所以基就是大小为 $3$ 的独立集。\n\n枚举所有的基及其权重：\n- 包含 $a_1$ 的基：根据规则3，与 $a_1$ 一起我们最多可以从 $\\{b_1, b_2, b_3\\}$ 中取一个元素，并且根据规则2，我们最多可以从 $E_2$ 中取两个元素；因此，唯一的大小为3的可能性是 $\\{a_1, b_4, b_i\\}$，其中 $i \\in \\{1,2,3\\}$。每个基的总权重为 $w(a_1) + w(b_4) + w(b_i) = 6 + 1 + 4 = 11$。\n- 包含 $a_2$ 的基：没有特殊限制，因此可以从 $E_2$ 中任选两个不同的元素。有两种类型：\n  - 两个来自 $\\{b_1, b_2, b_3\\}$：权重 $w(a_2) + 4 + 4 = 5 + 4 + 4 = 13$。\n  - 一个来自 $\\{b_1, b_2, b_3\\}$ 和 $b_4$：权重 $w(a_2) + 4 + 1 = 10$。\n因此，全局最优基的权重是\n$$\nW_{\\mathrm{opt}} = 13.\n$$\n\n现在我们从初始基 $B_{\\mathrm{start}} = \\{a_1, b_1, b_4\\}$ 分析单交换局部改进算法，其权重为\n$$\nW(B_{\\mathrm{start}}) = w(a_1) + w(b_1) + w(b_4) = 6 + 4 + 1 = 11.\n$$\n$y \\in E \\setminus B_{\\mathrm{start}}$ 的候选元素是 $\\{a_2, b_2, b_3\\}$。对于每个 $y$，我们尝试所有 $x \\in B_{\\mathrm{start}}$，并要求 $(B_{\\mathrm{start}} \\setminus \\{x\\}) \\cup \\{y\\}$ 是一个基（即大小为3的独立集）且具有严格更大的权重。\n\n- $y = a_2$：\n  - $x = a_1$ 得到 $\\{a_2, b_1, b_4\\}$，权重为 $5 + 4 + 1 = 10 < 11$，不是一个改进。\n  - $x \\in \\{b_1, b_4\\}$ 会导致产生两个来自 $E_1$ 的元素，违反了 $|I \\cap E_1| \\leq 1$，因此无效。\n\n- $y = b_2$：\n  - $x = b_1$ 得到 $\\{a_1, b_2, b_4\\}$，权重为 $6 + 4 + 1 = 11$，没有严格更大。\n  - $x = b_4$ 得到 $\\{a_1, b_1, b_2\\}$，这违反了规则3，因为它与 $a_1$ 一起包含了两个来自 $\\{b_1, b_2, b_3\\}$ 的元素，因此无效。\n  - $x = a_1$ 得到 $\\{b_1, b_4, b_2\\}$，其中有三个来自 $E_2$ 的元素，违反了 $|I \\cap E_2| \\leq 2$，因此无效。\n\n- $y = b_3$：根据与 $b_2$ 的对称性，唯一有效的交换是 $x = b_1$，得到 $\\{a_1, b_3, b_4\\}$，权重为11，没有严格更大；另外两个交换因与上述相同的原因而无效。\n\n因此，没有任何单次交换能产生严格更高的权重。算法在初始基处终止，其权重为\n$$\nW_{\\mathrm{local}} = 11.\n$$\n因此，\n$$\n\\frac{W_{\\mathrm{local}}}{W_{\\mathrm{opt}}} = \\frac{11}{13} \\approx 0.8461538\\ldots\n$$\n四舍五入到四位有效数字，结果是 $0.8462$。", "answer": "$$\\boxed{0.8462}$$", "id": "1542039"}]}