{"hands_on_practices": [{"introduction": "本练习为分析马尔可夫链提供了基础性实践。通过为一个简单的两状态气候模型计算极限矩阵，你将直接应用平稳分布的概念，它描述了系统无论从哪个状态开始的长期概率。这项技能是理解许多现实世界系统可预测的长期行为的基础。[@problem_id:1314745]", "problem": "考虑一个区域的简化气候模型，其每年的气候可以用两种状态之一来描述：“干旱”或“湿润”。我们将“干旱”状态标记为状态1，“湿润”状态标记为状态2。气候的演变被建模为一个离散时间马尔可夫链，其中任何一年的状态仅取决于其前一年的状态。\n\n转移概率如下：\n- 如果某一年是干旱的（状态1），则下一年仍然是干旱的概率为 $2/3$。\n- 如果某一年是湿润的（状态2），则下一年是干旱的概率为 $1/4$。\n\n一步转移概率矩阵 $P$ 是一个 $2 \\times 2$ 矩阵，其中元素 $P_{ij}$ 表示在一年内从状态 $i$ 转移到状态 $j$ 的概率。\n\n设 $P^n$ 为 $n$ 步转移矩阵。求极限矩阵 $L = \\lim_{n \\to \\infty} P^n$。在你的最终答案中，将该极限矩阵的四个元素 $L_{11}, L_{12}, L_{21}, L_{22}$ 以 $\\begin{pmatrix} L_{11} & L_{12} & L_{21} & L_{22} \\end{pmatrix}$ 形式的单行矩阵呈现。答案应为精确的分数形式。", "solution": "该马尔可夫链有两个状态，其转移概率为：\n- 从状态1（干旱）到状态1的概率为 $\\frac{2}{3}$，因此到状态2的概率为 $\\frac{1}{3}$。\n- 从状态2（湿润）到状态1的概率为 $\\frac{1}{4}$，因此到状态2的概率为 $\\frac{3}{4}$。\n\n因此，一步转移矩阵为\n$$\nP=\\begin{pmatrix}\n\\frac{2}{3} & \\frac{1}{3} \\\\\n\\frac{1}{4} & \\frac{3}{4}\n\\end{pmatrix}.\n$$\n每行之和为 $1$，因此 $P$ 是一个随机矩阵。因为 $P_{11}>0$ 且 $P_{22}>0$，所以该链是非周期的，又因为两个非对角线元素都为正，所以该链是不可约的。对于一个有限、不可约、非周期的马尔可夫链，存在唯一的平稳分布 $\\boldsymbol{\\pi}$ 满足 $\\boldsymbol{\\pi}=\\boldsymbol{\\pi}P$ 和 $\\pi_{1}+\\pi_{2}=1$，并且\n$$\n\\lim_{n\\to\\infty}P^{n}=\\begin{pmatrix} 1 \\\\ 1 \\end{pmatrix}\\boldsymbol{\\pi}.\n$$\n因此极限矩阵的每一行都等于 $\\boldsymbol{\\pi}$。\n\n从 $\\boldsymbol{\\pi}=\\boldsymbol{\\pi}P$ 和 $\\pi_{1}+\\pi_{2}=1$ 计算 $\\boldsymbol{\\pi}=(\\pi_{1},\\pi_{2})$。从第一个分量来看，\n$$\n\\pi_{1}=\\frac{2}{3}\\pi_{1}+\\frac{1}{4}\\pi_{2}\n\\;\\Rightarrow\\;\n\\pi_{1}-\\frac{2}{3}\\pi_{1}=\\frac{1}{4}\\pi_{2}\n\\;\\Rightarrow\\;\n\\frac{1}{3}\\pi_{1}=\\frac{1}{4}\\pi_{2}\n\\;\\Rightarrow\\;\n4\\pi_{1}=3\\pi_{2}\n\\;\\Rightarrow\\;\n\\pi_{1}=\\frac{3}{4}\\pi_{2}.\n$$\n使用 $\\pi_{1}+\\pi_{2}=1$ 可得\n$$\n\\frac{3}{4}\\pi_{2}+\\pi_{2}=\\frac{7}{4}\\pi_{2}=1\n\\;\\Rightarrow\\;\n\\pi_{2}=\\frac{4}{7},\\quad \\pi_{1}=\\frac{3}{7}.\n$$\n因此极限矩阵 $L=\\lim_{n\\to\\infty}P^{n}$ 的各行相同，均等于 $(\\frac{3}{7},\\frac{4}{7})$，所以\n$$\nL=\\begin{pmatrix}\n\\frac{3}{7} & \\frac{4}{7} \\\\\n\\frac{3}{7} & \\frac{4}{7}\n\\end{pmatrix}.\n$$\n因此，这些元素是 $L_{11}=\\frac{3}{7}$，$L_{12}=\\frac{4}{7}$，$L_{21}=\\frac{3}{7}$，$L_{22}=\\frac{4}{7}$。", "answer": "$$\\boxed{\\begin{pmatrix} \\frac{3}{7} & \\frac{4}{7} & \\frac{3}{7} & \\frac{4}{7} \\end{pmatrix}}$$", "id": "1314745"}, {"introduction": "这个问题将我们的视野从有限系统扩展到无限系统，探讨了整数上的随机游走。你需要判断一个状态是常返的还是暂留的，这是研究长期行为的一个关键区别。这个基于简化资产价格模型的思想实验，突出了一个微小的偏置（$p > 1/2$）如何导致方向性漂移，从而阻止系统返回其起点，这是从金融到物理等领域的关键概念。[@problem_id:1314739]", "problem": "考虑一个高波动性资产价格每日波动的简化模型，该模型表示为整数集 $\\mathbb{Z}$ 上的离散时间随机游走。设 $X_n$ 为第 $n$ 天结束时的资产价格水平，从某个初始价格水平 $X_0 = i$ 开始。每一天，价格水平以概率 $p$ 增加一个单位（即 $X_{n+1} = X_n + 1$），并以概率 $1-p$ 减少一个单位（即 $X_{n+1} = X_n - 1$）。假设市场具有正漂移，这意味着 $p > 1/2$。\n\n马尔可夫链中的一个状态被定义为**常返**的 (recurrent)，如果从该状态出发，最终返回该状态的概率恰好为 1。如果此概率小于 1，则该状态被定义为**暂留**的 (transient)。\n\n基于此模型，以下关于状态 $i$ 的陈述哪一项是正确的？\n\nA. 状态 $i$ 是常返的。\n\nB. 状态 $i$ 是暂留的。\n\nC. 如果 $1/2 < p < 3/4$，状态 $i$ 是常返的；如果 $p \\ge 3/4$，状态 $i$ 是暂留的。\n\nD. 状态 $i$ 被分类为常返还是暂留取决于 $i$ 的具体数值。", "solution": "设 $X_{n}$ 是在 $\\mathbb{Z}$ 上的最近邻随机游走，其转移概率为 $\\mathbb{P}(X_{n+1}=x+1 \\mid X_{n}=x)=p$ 和 $\\mathbb{P}(X_{n+1}=x-1 \\mid X_{n}=x)=1-p$，其中 $p> \\frac{1}{2}$。一个状态 $i$ 是常返的，如果返回概率\n$$\nR:=\\mathbb{P}_{i}\\big(T_{i}^{+}<\\infty\\big)=1,\\quad T_{i}^{+}:=\\inf\\{n\\geq 1: X_{n}=i\\},\n$$\n为1，而如果 $R<1$，则该状态是暂留的。\n\n对从 $i$ 出发的第一步进行条件分析。设\n$$\nh_{+}:=\\mathbb{P}_{i+1}(\\text{hit } i),\\qquad h_{-}:=\\mathbb{P}_{i-1}(\\text{hit } i).\n$$\n根据马尔可夫性质，\n$$\nR=p\\,h_{+}+(1-p)\\,h_{-}.\n$$\n\n计算 $h_{+}$。对于 $k\\geq 1$，定义 $h(k):=\\mathbb{P}_{i+k}(\\text{hit } i)$。那么 $h(0)=1$，并且对于 $k\\geq 1$，该函数是调和的：\n$$\nh(k)=p\\,h(k+1)+(1-p)\\,h(k-1).\n$$\n寻找形如 $h(k)=r^{k}$ 的解。特征方程为\n$$\np r^{2}-r+(1-p)=0,\n$$\n其根为\n$$\nr=\\frac{1\\pm\\sqrt{1-4p(1-p)}}{2p}=\\frac{1\\pm(2p-1)}{2p},\n$$\n因为 $p>\\frac{1}{2}$ 蕴含 $|2p-1|=2p-1$。因此 $r_{1}=\\frac{1-p}{p}$ 且 $r_{2}=1$。当 $k\\to\\infty$ 时，有界解要求 $r_{2}^{k}$ 的系数为零，所以\n$$\nh(k)=\\left(\\frac{1-p}{p}\\right)^{k},\\quad \\text{因此 } h_{+}=h(1)=\\frac{1-p}{p}.\n$$\n\n计算 $h_{-}$。由于 $p>\\frac{1}{2}$，增量具有正均值 $2p-1>0$，并且根据强大数定律，$X_{n}\\to +\\infty$ 几乎必然成立。因此，从 $i-1$ 出发，游走几乎必然会穿过水平 $i$，所以\n$$\nh_{-}=1.\n$$\n\n结合这些可得\n$$\nR=p\\,\\frac{1-p}{p}+(1-p)\\cdot 1=(1-p)+(1-p)=2(1-p).\n$$\n因为 $p>\\frac{1}{2}$，我们有 $2(1-p)<1$，因此 $R<1$ 且状态 $i$ 是暂留的。\n\n因此，正确选项是B。", "answer": "$$\\boxed{B}$$", "id": "1314739"}, {"introduction": "在这个计算练习中，理论与实践相结合，你将实现幂迭代法来寻找平稳分布。通过处理不同类型的转移矩阵——遍历的、可约的和周期的——你将对马尔可夫链收敛到稳态的条件有更深刻、更具体的理解。这项实践培养了关键的计算技能，并让你洞察到分析马尔可夫链模型时的实际挑战和细微差别。[@problem_id:2393833]", "problem": "给定一个有限状态时间齐次马尔可夫链，其行随机转移矩阵为 $P \\in \\mathbb{R}^{n \\times n}$，平稳分布是任意满足不动点方程 $\\pi = \\pi P$ 的行向量 $\\pi \\in \\mathbb{R}^{1 \\times n}$，其分量非负且总和为 $1$。定义映射 $T(\\pi) = \\pi P$。对于下方的每个测试用例，设 $\\pi_0$ 为指定的初始行概率向量。通过 $\\pi_{n+1} = T(\\pi_n)$ 构建序列 $(\\pi_n)_{n \\ge 0}$，并使用 $\\ell_1$-范数检查收敛性：在第一个满足 $\\|\\pi_{n+1} - \\pi_n\\|_1 < \\varepsilon$ 的索引 $n$ 处停止，或在最多 $N_{\\max}$ 次迭代后停止，以先发生者为准。如果发生收敛，报告近似平稳分布 $\\pi_{n+1}$，其每个分量四舍五入到 $8$ 位小数。如果在 $N_{\\max}$ 次迭代内未满足停止准则，则为该测试用例报告整数 $-1$。所有算术均为实值运算。不涉及角度。没有物理单位。使用的范数是 $\\ell_1$-范数。\n\n使用以下测试套件，其中每个测试用例指定了转移矩阵 $P$、初始分布 $\\pi_0$、容差 $\\varepsilon$ 和最大迭代次数 $N_{\\max}$。\n\n- 测试用例 $1$ (严格为正，遍历)：\n  - $P = \\begin{bmatrix}\n  0.6 & 0.3 & 0.1 \\\\\n  0.2 & 0.5 & 0.3 \\\\\n  0.25 & 0.25 & 0.5\n  \\end{bmatrix}$\n  - $\\pi_0 = \\left[\\dfrac{1}{3}, \\dfrac{1}{3}, \\dfrac{1}{3}\\right]$\n  - $\\varepsilon = 10^{-10}$\n  - $N_{\\max} = 10^6$\n\n- 测试用例 $2$ (吸收态)：\n  - $P = \\begin{bmatrix}\n  0.5 & 0.5 & 0.0 \\\\\n  0.0 & 1.0 & 0.0 \\\\\n  0.1 & 0.0 & 0.9\n  \\end{bmatrix}$\n  - $\\pi_0 = \\left[\\dfrac{1}{3}, \\dfrac{1}{3}, \\dfrac{1}{3}\\right]$\n  - $\\varepsilon = 10^{-10}$\n  - $N_{\\max} = 10^6$\n\n- 测试用例 $3$ (多个闭类；极限依赖于 $\\pi_0$)：\n  - $P = \\begin{bmatrix}\n  1.0 & 0.0 & 0.0 & 0.0 \\\\\n  1.0 & 0.0 & 0.0 & 0.0 \\\\\n  0.0 & 0.0 & 0.0 & 1.0 \\\\\n  0.0 & 0.0 & 0.0 & 1.0\n  \\end{bmatrix}$\n  - $\\pi_0 = \\left[\\dfrac{1}{4}, \\dfrac{1}{4}, \\dfrac{1}{4}, \\dfrac{1}{4}\\right]$\n  - $\\varepsilon = 10^{-12}$\n  - $N_{\\max} = 10^6$\n\n- 测试用例 $4$ (从给定的 $\\pi_0$ 出发不收敛的周期为2的链)：\n  - $P = \\begin{bmatrix}\n  0.0 & 1.0 \\\\\n  1.0 & 0.0\n  \\end{bmatrix}$\n  - $\\pi_0 = \\left[1.0, 0.0\\right]$\n  - $\\varepsilon = 10^{-12}$\n  - $N_{\\max} = 10^5$\n\n最终输出格式：您的程序应生成单行输出，其中包含用方括号括起来的逗号分隔的结果列表，顺序与测试用例相同。对于收敛的情况，输出四舍五入后的分量列表；对于不收敛的情况，输出整数 $-1$。例如，一个有四个结果的输出必须是 $[\\text{result}_1,\\text{result}_2,\\text{result}_3,\\text{result}_4]$ 的形式，行内任何地方都没有空格。每个分量列表的每个条目都必须四舍五入到 $8$ 位小数。", "solution": "问题陈述经过验证。\n\n### 步骤1：提取给定条件\n- **模型**：有限状态时间齐次马尔可夫链。\n- **转移矩阵**：一个行随机矩阵 $P \\in \\mathbb{R}^{n \\times n}$。\n- **平稳分布**：一个行向量 $\\pi \\in \\mathbb{R}^{1 \\times n}$，其分量非负且总和为 $1$，是不动点方程 $\\pi = \\pi P$ 的一个解。\n- **迭代映射**：$T(\\pi) = \\pi P$。\n- **迭代序列**：该序列由 $\\pi_{n+1} = T(\\pi_n)$ 定义，从给定的初始概率向量 $\\pi_0$ 开始。\n- **停止准则**：当连续迭代项之差的 $\\ell_1$-范数小于容差 $\\varepsilon$ 时，即 $\\|\\pi_{n+1} - \\pi_n\\|_1 < \\varepsilon$，迭代在第一个满足此条件的索引 $n$ 处停止。\n- **最大迭代次数**：迭代次数的硬性上限 $N_{\\max}$。\n- **收敛时的输出**：向量 $\\pi_{n+1}$，每个分量四舍五入到 $8$ 位小数。\n- **不收敛时的输出**：整数 $-1$。\n- **测试用例 1**：$P = \\begin{bmatrix} 0.6 & 0.3 & 0.1 \\\\ 0.2 & 0.5 & 0.3 \\\\ 0.25 & 0.25 & 0.5 \\end{bmatrix}$, $\\pi_0 = \\left[\\frac{1}{3}, \\frac{1}{3}, \\frac{1}{3}\\right]$, $\\varepsilon = 10^{-10}$, $N_{\\max} = 10^6$。\n- **测试用例 2**：$P = \\begin{bmatrix} 0.5 & 0.5 & 0.0 \\\\ 0.0 & 1.0 & 0.0 \\\\ 0.1 & 0.0 & 0.9 \\end{bmatrix}$, $\\pi_0 = \\left[\\frac{1}{3}, \\frac{1}{3}, \\frac{1}{3}\\right]$, $\\varepsilon = 10^{-10}$, $N_{\\max} = 10^6$。\n- **测试用例 3**：$P = \\begin{bmatrix} 1.0 & 0.0 & 0.0 & 0.0 \\\\ 1.0 & 0.0 & 0.0 & 0.0 \\\\ 0.0 & 0.0 & 0.0 & 1.0 \\\\ 0.0 & 0.0 & 0.0 & 1.0 \\end{bmatrix}$, $\\pi_0 = \\left[\\frac{1}{4}, \\frac{1}{4}, \\frac{1}{4}, \\frac{1}{4}\\right]$, $\\varepsilon = 10^{-12}$, $N_{\\max} = 10^6$。\n- **测试用例 4**：$P = \\begin{bmatrix} 0.0 & 1.0 \\\\ 1.0 & 0.0 \\end{bmatrix}$, $\\pi_0 = \\left[1.0, 0.0\\right]$, $\\varepsilon = 10^{-12}$, $N_{\\max} = 10^5$。\n\n### 步骤2：使用提取的给定条件进行验证\n根据所需标准对问题进行评估。\n\n- **科学性**：该问题涉及计算马尔可夫链的平稳分布。这是随机过程理论中的一个基本概念。所提出的迭代方法 $\\pi_{k+1} = \\pi_k P$ 是用于寻找与特征值 $\\lambda=1$ 相关联的左特征向量的标准幂法。在各种条件下（遍历性、可约性），此类分布的存在性和唯一性是公认的数学事实。该问题在科学和数学上是合理的。\n\n- **良态性**：问题被完全指定。对于每个测试用例，所有必要的输入——转移矩阵 $P$、初始向量 $\\pi_0$、收敛容差 $\\varepsilon$ 和最大迭代次数 $N_{\\max}$——都已提供。算法被确定性地定义，并且报告收敛结果或失败的条件是明确的。\n\n- **客观性**：问题使用精确、形式化的数学语言陈述。所有量都有定义，没有主观或基于观点的断言。\n\n### 步骤3：结论与行动\n问题是**有效的**。它具有科学性、良态性和客观性。将构建一个解决方案。\n\n### 解决方案\n该问题要求实现一个不动点迭代算法，以找到有限状态马尔可夫链的平稳分布 $\\pi$。平稳分布满足方程 $\\pi = \\pi P$，其中 $P$ 是行随机转移矩阵。此方程将 $\\pi$ 识别为对应于特征值 $\\lambda=1$ 的 $P$ 的左特征向量。针对随机矩阵的 Perron-Frobenius 定理保证了这样的特征向量存在，并且 $\\lambda=1$ 是模最大的特征值。\n\n迭代过程由 $\\pi_{k+1} = \\pi_k P$（对于 $k=0, 1, 2, \\ldots$）给出，从初始概率分布 $\\pi_0$ 开始。这被称为幂法。迭代在以下两个条件之一满足时终止：\n$1$. 收敛：连续迭代项之差的 $\\ell_1$-范数小于给定的容差 $\\varepsilon$。向量 $\\mathbf{x} = [x_1, \\ldots, x_n]$ 的 $\\ell_1$-范数是 $\\|\\mathbf{x}\\|_1 = \\sum_{i=1}^n |x_i|$。条件是 $\\|\\pi_{k+1} - \\pi_k\\|_1 < \\varepsilon$。\n$2$. 不收敛：迭代次数超过指定的最大值 $N_{\\max}$。\n\n序列 $(\\pi_k)_{k \\ge 0}$ 的行为取决于矩阵 $P$ 的性质。\n- **情况 1**：矩阵 $P$ 是严格为正的，这意味着相应的马尔可夫链是遍历的（不可约且非周期的）。对于这样的链，幂法保证收敛到唯一的平稳分布，而与初始概率向量 $\\pi_0$ 无关。\n- **情况 2**：矩阵 $P$ 是可约的。状态 2（索引为 1）是一个吸收态，因为 $P_{1,1}=1.0$（使用0-based索引）。从任何初始状态，最终都有非零概率到达该吸收态。迭代将收敛到一个将所有概率质量集中在吸收态上的分布。在这种特定情况下，极限将是 $[0, 1, 0]$。\n- **情况 3**：矩阵 $P$ 是可约的，具有两个分别对应于状态 $\\{1\\}$ 和 $\\{4\\}$ 的常返闭类。极限分布取决于初始分布 $\\pi_0$。最初在可以到达状态 $1$ 的状态中的总概率质量最终将聚集在状态 $1$。状态 $4$ 的情况类似。此处，状态 $1$ 和 $2$（索引 $0,1$）导向状态 $1$，状态 $3$ 和 $4$（索引 $2,3$）导向状态 $4$。因此，状态 $1$ 的最终质量将是 $\\pi_{0,0} + \\pi_{0,1}$，状态 $4$ 的最终质量将是 $\\pi_{0,2} + \\pi_{0,3}$。对于 $\\pi_0 = [0.25, 0.25, 0.25, 0.25]$，极限预计为 $[0.5, 0, 0, 0.5]$。迭代将迅速收敛。\n- **情况 4**：矩阵 $P$ 对应于一个周期为 $2$ 的周期链。对于初始分布 $\\pi_0 = [1.0, 0.0]$，分布序列将是 $\\pi_0 = [1.0, 0.0]$，$\\pi_1 = [0.0, 1.0]$，$\\pi_2 = [1.0, 0.0]$，依此类推。序列会振荡，不会收敛到单一极限。差值 $\\|\\pi_{k+1} - \\pi_k\\|_1$ 将始终为 $2$，因此收敛准则将永远不会被满足。该过程将在 $N_{\\max}$ 次迭代后终止，结果必须是 $-1$。\n\n要实现的算法将对每个测试用例进行迭代，执行向量-矩阵乘法 $\\pi_{k+1} = \\pi_k P$，并在每一步检查停止准则。如果达到收敛，则将结果向量 $\\pi_{k+1}$ 四舍五入到 $8$ 位小数。否则，报告 $-1$。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Solves for the stationary distribution of Markov chains using fixed-point iteration.\n    \"\"\"\n\n    test_cases = [\n        # Test case 1 (strictly positive, ergodic)\n        {\n            \"P\": np.array([\n                [0.6, 0.3, 0.1],\n                [0.2, 0.5, 0.3],\n                [0.25, 0.25, 0.5]\n            ]),\n            \"pi0\": np.array([1/3, 1/3, 1/3]),\n            \"epsilon\": 1e-10,\n            \"N_max\": 10**6\n        },\n        # Test case 2 (absorbing state)\n        {\n            \"P\": np.array([\n                [0.5, 0.5, 0.0],\n                [0.0, 1.0, 0.0],\n                [0.1, 0.0, 0.9]\n            ]),\n            \"pi0\": np.array([1/3, 1/3, 1/3]),\n            \"epsilon\": 1e-10,\n            \"N_max\": 10**6\n        },\n        # Test case 3 (multiple closed classes)\n        {\n            \"P\": np.array([\n                [1.0, 0.0, 0.0, 0.0],\n                [1.0, 0.0, 0.0, 0.0],\n                [0.0, 0.0, 0.0, 1.0],\n                [0.0, 0.0, 0.0, 1.0]\n            ]),\n            \"pi0\": np.array([0.25, 0.25, 0.25, 0.25]),\n            \"epsilon\": 1e-12,\n            \"N_max\": 10**6\n        },\n        # Test case 4 (period-2 chain)\n        {\n            \"P\": np.array([\n                [0.0, 1.0],\n                [1.0, 0.0]\n            ]),\n            \"pi0\": np.array([1.0, 0.0]),\n            \"epsilon\": 1e-12,\n            \"N_max\": 10**5\n        }\n    ]\n\n    results = []\n    for case in test_cases:\n        P = case[\"P\"]\n        pi_current = case[\"pi0\"]\n        epsilon = case[\"epsilon\"]\n        N_max = case[\"N_max\"]\n        \n        converged = False\n        pi_next = None\n\n        for _ in range(N_max):\n            pi_next = np.dot(pi_current, P)\n            \n            # Check for convergence using the l1-norm\n            if np.linalg.norm(pi_next - pi_current, ord=1) < epsilon:\n                converged = True\n                break\n            \n            pi_current = pi_next\n\n        if converged:\n            # Round to 8 decimal places as per problem statement\n            final_pi = np.round(pi_next, 8)\n            results.append(final_pi)\n        else:\n            results.append(-1)\n\n    # Format the final output string to have no spaces\n    def format_result(res):\n        if isinstance(res, int) and res == -1:\n            return str(res)\n        # Convert list of floats to a string representation '[f1,f2,...]'\n        # without spaces.\n        return '[' + ','.join(map(str, res)) + ']'\n\n    formatted_results = [format_result(res) for res in results]\n    final_output_string = '[' + ','.join(formatted_results) + ']'\n    \n    # Final print statement in the exact required format.\n    print(final_output_string)\n\nsolve()\n```", "id": "2393833"}]}