{"hands_on_practices": [{"introduction": "掌握数学归纳法的关键在于熟练执行其核心步骤。本次练习将引导你聚焦于归纳步骤中最精巧的部分：代数变形。通过这个练习，你将不再是简单地完成一个完整的证明，而是需要精确地识别并构建从归纳假设 $P(m)$ 推导出 $P(m+1)$ 的关键桥梁，这对于深化理解归纳推理的内在机制至关重要。[@problem_id:1404091]", "problem": "一位计算机科学专业的学生正在学习数学归纳法证明，并遇到了以下命题 $P(n)$：对于任意整数 $n \\ge 1$，和 $S_n = \\sum_{k=1}^{n} k \\cdot k!$ 等于 $(n+1)! - 1$。\n\n该学生验证了 $n=1$ 时的基础步骤。在归纳步骤中，该学生假设对于某个任意整数 $m \\ge 1$，归纳假设 $P(m)$ 为真。也就是说，该学生假设：\n$$ \\sum_{k=1}^{m} k \\cdot k! = (m+1)! - 1 $$\n目标是证明 $P(m+1)$ 也为真，即 $S_{m+1} = (m+2)! - 1$。为此，该学生首先用 $S_m$ 来表示和 $S_{m+1}$，然后应用归纳假设，最后化简所得的表达式。在应用归纳假设并重新组合项之后，该学生得到了一个关于 $S_{m+1}$ 的中间表达式，其形式如下：\n$$ S_{m+1} = G(m) \\cdot (m+1)! - 1 $$\n你的任务是确定函数 $G(m)$。你的答案应该是一个用 $m$ 表示的封闭形式表达式。", "solution": "我们从定义 $S_{n}=\\sum_{k=1}^{n} k \\cdot k!$ 和对于任意 $m \\ge 1$ 的归纳假设出发：\n$$\nS_{m}=\\sum_{k=1}^{m} k \\cdot k!=(m+1)!-1.\n$$\n为了用 $S_m$ 表示 $S_{m+1}$，我们写出\n$$\nS_{m+1}=\\sum_{k=1}^{m+1} k \\cdot k!=\\left(\\sum_{k=1}^{m} k \\cdot k!\\right)+(m+1)\\cdot (m+1)!.\n$$\n应用归纳假设可得\n$$\nS_{m+1}=(m+1)!-1+(m+1)\\cdot (m+1)!.\n$$\n通过提取公因子 $(m+1)!$ 来重新组合各项，得到\n$$\nS_{m+1}=\\bigl(1+(m+1)\\bigr)\\,(m+1)!-1=(m+2)\\,(m+1)!-1.\n$$\n这与给定的中间形式 $S_{m+1}=G(m)\\cdot (m+1)!-1$ 相匹配，从中我们可以确定\n$$\nG(m)=m+2.\n$$", "answer": "$$\\boxed{m+2}$$", "id": "1404091"}, {"introduction": "许多数学命题并非从 $n=1$ 开始就成立，而是在达到某个阈值后才表现出规律性。这个练习挑战了“归纳基础必须是最小整数”的思维定式，要求你找到一个不等式开始成立的最小整数 $n_0$。这个过程不仅能让你体会到寻找正确归纳起点的灵活性，也模拟了在算法分析等领域中确定性质生效范围的实际问题。[@problem_id:1404154]", "problem": "在算法分析和函数增长率的研究中，通常会将阶乘函数 $f(n) = n!$ 与指数函数 $g(n) = A^n$ (其中基数 $A$ 为某个常数) 进行比较。这些比较通常会引出一些不等式，而这些不等式仅对足够大的整数 $n$ 成立。\n\n考虑具体不等式 $n! > 3^n$。你的任务是找到一个最小的正整数，我们称之为 $n_0$，使得对于所有整数 $n \\ge n_0$，该不等式都成立。", "solution": "我们必须找到最小的正整数 $n_{0}$，使得对于所有整数 $n \\geq n_{0}$，不等式 $n! > 3^{n}$ 都成立。\n\n首先，检验一些较小的整数，来找出不等式从何处开始成立：\n$1! = 1 < 3 = 3^{1}$，不成立。\n$2! = 2 < 9 = 3^{2}$，不成立。\n$3! = 6 < 27 = 3^{3}$，不成立。\n$4! = 24 < 81 = 3^{4}$，不成立。\n$5! = 120 < 243 = 3^{5}$，不成立。\n$6! = 720 < 729 = 3^{6}$，不成立。\n$7! = 5040 > 2187 = 3^{7}$，成立。\n\n因此，该不等式在 $n=7$ 时首次成立。为证明它对所有 $n \\geq 7$ 都成立，我们定义\n$$\nh(n) = \\frac{n!}{3^{n}}.\n$$\n那么，连续项的比值为\n$$\n\\frac{h(n+1)}{h(n)} = \\frac{(n+1)!/3^{n+1}}{n!/3^{n}} = \\frac{n+1}{3}.\n$$\n对于所有 $n \\geq 7$，我们有\n$$\n\\frac{n+1}{3} \\geq \\frac{8}{3} > 1,\n$$\n所以对于所有 $n \\geq 7$，$h(n)$ 是严格递增的。由于 $h(7) = \\frac{7!}{3^{7}} > 1$，可得对于所有 $n \\geq 7$ 都有 $h(n) > 1$，即对于所有 $n \\geq 7$ 都有 $n! > 3^{n}$。\n\n最后，因为不等式在 $n=6$ 时不成立，所以满足条件的最小整数是 $n_{0} = 7$。", "answer": "$$\\boxed{7}$$", "id": "1404154"}, {"introduction": "在面对某些问题时，仅依赖前一项的假设是不够的，我们需要更强大的工具——强归纳法。这个问题以数据传输为背景，巧妙地揭示了强归纳法的威力，即证明第 $k+1$ 种情况时，我们可能需要依赖比第 $k$ 项更早的某一项。你的任务是确定为了让归纳逻辑“启动”并覆盖所有情况，需要验证多少个初始基础案例，这将加深你对强归纳法证明结构独特之处的理解。[@problem_id:1404129]", "problem": "一种特殊的数据传输协议只允许两种固定大小的数据包：7千字节（KB）和11千字节（KB）。通过组合每种大小数据包的非负整数个，可以传输各种总数据量。根据数论可知，任何满足 $N \\ge 60$ 的整数数据量 $N$（单位为KB）都可以通过这种组合形成。\n\n一位计算机科学家正在使用强归纳法原理，为所有整数 $N \\ge 60$ 编写该性质的形式化证明。令 $P(N)$ 为可以形成 $N$ KB 数据量的陈述。该证明的归纳步骤通过假设 $P((k+1)-7)$ 为真来证明 $P(k+1)$ 为真。这个论证对于任何满足 $(k+1)-7 \\ge 60$ 的整数 $k$ 都有效。为了完成对所有 $N \\ge 60$ 的证明，必须单独验证一组从 $N=60$ KB开始的连续整数数据量的基础情形。\n\n对于此证明结构，所有需要的基础情形的数据量（单位为KB）之和是多少？", "solution": "令 $P(N)$ 为一个陈述，表示可以使用7 KB和11 KB数据包的非负整数组合形成 $N$ KB的数据量。归纳步骤通过增加一个7 KB的数据包，在假设 $P((k+1)-7)$ 成立的条件下，推断出 $P(k+1)$ 成立。令 $N=k+1$，此步骤适用于所有满足 $N-7 \\ge 60$ 的情况，即对所有 $N \\ge 67$ 均适用。因此，为了覆盖所有 $N \\ge 60$ 的情况，只需验证连续的基础情形 $N=60,61,62,63,64,65,66$，这样每个模7的剩余类在60或60以上都有一个代表；然后对于所有 $N \\ge 67$，$P(N)$ 可由 $P(N-7)$ 推出。\n\n我们通过给出7和11的显式组合来验证每个基础情形：\n$60=7\\cdot 7+11\\cdot 1$， $61=7\\cdot 4+11\\cdot 3$， $62=7\\cdot 1+11\\cdot 5$， $63=7\\cdot 9+11\\cdot 0$， $64=7\\cdot 6+11\\cdot 2$， $65=7\\cdot 3+11\\cdot 4$， $66=7\\cdot 0+11\\cdot 6$。\n因此，$P(N)$ 对于 $N=60,61,62,63,64,65,66$ 成立。\n\n所需的基础情形恰好是从60到66（含）的连续整数。它们的和是一个有7项、首项为60、末项为66的等差数列的和，等于\n$$\n\\text{Sum} = 7 \\cdot \\frac{60+66}{2} = 7 \\cdot 63 = 441.\n$$\n因此，所有需要的基础情形的数据量之和是 $441$。", "answer": "$$\\boxed{441}$$", "id": "1404129"}]}