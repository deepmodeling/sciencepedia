{"hands_on_practices": [{"introduction": "本次练习将逻辑推理应用于我们熟悉的数论领域。我们将利用一个关于整除性的基本定理，通过应用“否定后件”（Modus Tollens）来得出一个必然的结论，这清楚地展示了如何利用一个蕴含命题的逆否命题进行有效的推理。[@problem_id:1386026]", "problem": "在数论研究中，我们将以下定理视为一个真命题：“如果一个整数能被 10 整除，那么它的十进制表示一定以 0 结尾。”\n\n现在，考虑一个特定的整数 $k$。我们所知的关于 $k$ 的唯一事实是，它的十进制表示以数字 5 结尾。\n\n仅根据所给的定理和事实，以下哪个陈述是逻辑上的必然结论？\n\nA. $k$ 能被 10 整除。\nB. $k$ 不能被 10 整除。\nC. 如果一个整数的十进制表示以 0 结尾，那么它能被 10 整除。\nD. 无法得出关于 $k$ 是否能被 10 整除的结论。\nE. 任何不能被 10 整除的整数都必须以 5 结尾。", "solution": "设 $P(n)$ 为命题“整数 $n$ 能被 $10$ 整除”，设 $Q(n)$ 为命题“$n$ 的十进制表示以 $0$ 结尾”。给定的定理是一个全称蕴含式\n$$\\forall n \\in \\mathbb{Z}, P(n) \\rightarrow Q(n).$$\n一个基本的逻辑等价关系是，蕴含式 $P \\rightarrow Q$ 与其逆否命题 $\\neg Q \\rightarrow \\neg P$ 是逻辑等价的。因此，根据该定理我们也有\n$$\\forall n \\in \\mathbb{Z}, \\neg Q(n) \\rightarrow \\neg P(n).$$\n\n我们已知事实是 $k$ 以 $5$ 结尾。这意味着 $\\neg Q(k)$，即 $k$ 不以 $0$ 结尾。将此逆否命题应用于 $n = k$ 可得\n$$\\neg Q(k) \\rightarrow \\neg P(k),$$\n因此可得 $\\neg P(k)$，即命题“$k$ 不能被 $10$ 整除”。\n\n因此，必然结论是 $k$ 不能被 $10$ 整除，这对应于选项 B。选项 A 和 D 与此推论不符，C 是给定定理的逆命题，不能由该定理推导出，而 E 则提出了一个没有前提支持的、毫无根据的全称论断。", "answer": "$$\\boxed{B}$$", "id": "1386026"}, {"introduction": "这个问题超越了纯数学，展示了逻辑推演在软件工程等技术领域中如何成为一项关键技能。你的任务是扮演一名侦探，根据一组系统规则和一个观察到的结果，来追溯错误的原因，这突显了否定后件在解决实际问题中的威力。[@problem_id:1386013]", "problem": "一位初级软件开发人员正在调试一个复杂的遗留系统。该系统的行为受原始程序员记录的一套严格的逻辑规则所支配。开发人员必须使用这些规则来确定特定会话失败的原因。\n\n规则如下：\n1. 如果数据库连接成功，系统则会继续验证用户的凭据。\n2. 如果用户的凭据无效，系统会记录一条“访问被拒绝”的错误消息。\n3. 如果系统没有记录“访问被拒绝”的错误消息，则用户被授予访问主仪表板的权限。\n\n在分析一次特定的失败会话时，开发人员检查了系统的最终状态，并确认用户**未**被授予访问主仪表板的权限。\n\n假设系统完全遵循这些规则，从这一观察中可以绝对确定地逻辑推断出以下哪个陈述？\n\nA. 数据库连接未成功。\nB. 用户的凭据有效。\nC. 系统记录了“访问被拒绝”的错误消息。\nD. 数据库连接成功。\nE. 数据库连接成功，但用户的凭据无效。", "solution": "我们将命题定义如下： $D$ 表示数据库连接成功；$V$ 表示系统继续验证用户的凭据；$C$ 表示用户的凭据有效；$A$ 表示系统记录“访问被拒绝”的错误消息；$G$ 表示用户被授予访问主仪表板的权限。\n\n将规则转换为命题蕴含式：\n1. 根据规则1：$D \\rightarrow V$。\n2. 根据规则2：$\\neg C \\rightarrow A$。\n3. 根据规则3：$\\neg A \\rightarrow G$。\n\n观察到的最终状态是用户未被授予访问主仪表板的权限，即 $\\neg G$。\n\n使用逆否命题定律：对于任何蕴含式 $p \\rightarrow q$，其逆否命题为 $\\neg q \\rightarrow \\neg p$，并且它们在逻辑上是等价的。将此定律应用于规则3，其中 $p = \\neg A$ 且 $q = G$，得到逆否命题：\n$$\\neg G \\rightarrow A$$\n\n根据肯定前件（Modus Ponens），从观察到的 $\\neg G$ 以及逆否命题 $\\neg G \\rightarrow A$ 可推导出：\n$A$。\n\n评估还能推导出什么：\n- 根据规则2我们有 $\\neg C \\rightarrow A$，其逆否命题为 $\\neg A \\rightarrow C$。仅凭 $A$ 或这些蕴含式，无法推导出 $C$ 或 $\\neg C$，因此 $C$ 和 $\\neg C$ 都不确定。\n- 规则1，$D \\rightarrow V$，与 $A$ 和 $G$ 无关；从 $A$ 或 $\\neg G$ 我们无法推断出 $D$ 或 $\\neg D$。\n- 因此，唯一可以确定地得出的陈述是系统记录了“访问被拒绝”的错误消息，即 $A$。\n\n将其对应回选项，这与选项C相符。", "answer": "$$\\boxed{C}$$", "id": "1386013"}, {"introduction": "这项最终挑战展示了像“肯定前件”（Modus Ponens）这样简单的推理规则，如何在高度复杂的论证中扮演最后且关键的一步。你需要综合来自多个信息源的信息，应用一个强大的数学定理（Dilworth定理），然后将你得出的结论作为前提，进行最终的逻辑跳跃，这体现了基础逻辑是如何支撑高级问题解决的。[@problem_id:1386029]", "problem": "在一个大规模数据处理流水线的设计中，所有计算任务的集合构成一个偏序集（poset），记作 $(P, \\preceq)$。对于两个任务 $t_1$ 和 $t_2$，$t_1 \\preceq t_2$ 意味着任务 $t_1$ 必须在任务 $t_2$ 开始之前完成。\n\n该流水线将在一个由相同处理器核心组成的集群上执行。单个处理器核心只能执行一系列任务 $c_1, c_2, \\dots, c_k$，当且仅当它们构成一个**链 (chain)**，即 $c_1 \\preceq c_2 \\preceq \\dots \\preceq c_k$。为了运行整个流水线，所有任务的集合 $P$ 必须被划分为若干这样的链，每条链分配给一个不同的处理器核心。因此，所需的最小核心数就是划分 $P$ 所需的最小链数。\n\n**反链 (antichain)** 是一组任务的集合，其中任意两个不同的任务之间都不存在 $\\preceq$ 关系；也就是说，它们都是相互独立的，原则上可以并发运行。该领域的一个关键成果是 Dilworth 定理，该定理指出，对于任何有限偏序集，将其划分为链所需的最小链数等于其最大可能反链的大小。\n\n考虑负责该项目的团队所做的以下陈述：\n1.  **系统分析师：**「我已经确定了一个由五个关键任务组成的集合 $\\{T_A, T_B, T_C, T_D, T_E\\}$，并且我已经正式验证，对于该集合中的任意两个不同任务 $T_i, T_j$，既不成立 $T_i \\preceq T_j$ 也不成立 $T_j \\preceq T_i$。」\n2.  **首席架构师：**「根据我对依赖图的理论分析，任何超过五个任务的集合都不可能是相互独立的。」\n3.  **首席开发人员：**「如果此流水线所需的最小处理器核心数恰好是五个，那么我们的新资源分配软件就得到了验证。」\n4.  **项目经理：**「如果我们的新资源分配软件没有得到验证，我们必须退回到旧的、效率较低的系统。」\n\n基于这四个陈述，以下哪个结论可以毫无歧义地被逻辑推导出来？\n\nA. 项目必须退回到旧的、效率较低的系统。\nB. 系统分析师和首席架构师的陈述是矛盾的。\nC. 新的资源分配软件得到了验证。\nD. 运行该流水线至少需要六个处理器核心。\nE. 从给定的信息中无法确定所需的最小处理器核心数。", "solution": "我们为偏序集 $(P,\\preceq)$ 的相关概念形式化如下：\n- 链是在 $\\preceq$ 关系下的一个全序子集。\n- 反链是一个由两两不可比较的元素组成的子集。\n- 令 $w(P)$ 表示 $P$ 的宽度，即最大反链的大小。\n- 令 $c(P)$ 表示划分 $P$ 所需的最小链数。\n\n根据有限偏序集的 Dilworth 定理，其关键的结构性原理是：\n$$c(P) = w(P)$$\n对各项陈述的解读：\n1. 系统分析师：存在一个大小为 $5$ 的反链 $\\{T_{A},T_{B},T_{C},T_{D},T_{E}\\}$。因此，\n$$w(P) \\ge 5$$\n2. 首席架构师：没有反链的元素个数超过 $5$。因此，\n$$w(P) \\le 5$$\n综合这两点，\n$$w(P) = 5$$\n应用 Dilworth 定理，\n$$c(P) = w(P) = 5$$\n因此，所需的最小处理器核心数恰好是 $5$。\n\n3. 首席开发人员陈述：「如果此流水线所需的最小处理器核心数恰好是五个，那么我们的新资源分配软件就得到了验证。」 这是一个逻辑蕴含：如果 $c(P)=5$，那么该软件得到验证。由于已经确定 $c(P)=5$，根据肯定前件 (Modus Ponens)，该软件得到验证。\n\n4. 项目经理陈述：「如果我们的新资源分配软件没有得到验证，我们必须退回到旧的系统。」 这个蕴含关系的前件「没有得到验证」，根据上面的结论是假的；因此，无法得出关于退回系统的结论，逻辑上并不必然导致退回。\n\n现在评估各个选项：\n- A 不成立，因为验证成立，所以不必然要退回。\n- B 是错误的；系统分析师陈述中存在一个大小为5的反链，与首席架构师陈述中（反链大小）上界为5是一致的，它们共同蕴含了 $w(P)=5$。\n- C 是正确的，根据首席开发人员的蕴含关系以及 $c(P)=5$。\n- D 是错误的，因为 $c(P)=5$，而不是至少 $6$。\n- E 是错误的，因为我们已经确定了所需核心数的最小确切值。\n\n因此，唯一可以毫无歧义地推导出的结论是 C。", "answer": "$$\\boxed{C}$$", "id": "1386029"}]}