{"hands_on_practices": [{"introduction": "第一个练习将引导你运用模运算来简化复杂的计算。我们将探讨如何求解一个大型等差数列的和对特定数取余的结果，这在数据校验和生成等领域非常常见。此实践的核心原则是模运算对于加法和乘法具有分配律，这让我们可以在计算的每一步都处理更小、更易于管理的数字 [@problem_id:1385205]。", "problem": "一个分布式计算系统中的主节点负责向工作节点分配任务。在某个特定的调度周期中，主节点按顺序分派任务：第一秒分派1个任务，第二秒分派2个任务，第三秒分派3个任务，以此类推，总共持续120秒。系统协议要求为下一个周期生成一个验证密钥，其计算方式为当前调度周期内分派的任务总数除以13的余数。请计算该验证密钥。", "solution": "在第 $k$ 秒分派的任务数量为 $k$，其中 $k=1,2,\\dots,120$。任务总数是前 $120$ 个正整数的和：\n$$\nT=\\sum_{k=1}^{120} k=\\frac{120\\cdot 121}{2}.\n$$\n我们需要求 $T$ 除以 $13$ 的余数，即 $T \\pmod{13}$。根据模运算的性质：\n$$\n120 \\equiv 3 \\pmod{13}, \\quad 121 \\equiv 4 \\pmod{13}.\n$$\n因此，\n$$\nT \\equiv \\frac{3\\cdot 4}{2} \\pmod{13}.\n$$\n由于 $2$ 对模 $13$ 的乘法逆元是 $7$（因为 $2\\cdot 7=14\\equiv 1 \\pmod{13}$），我们有：\n$$\nT \\equiv (3\\cdot 4)\\cdot 7 \\equiv 12\\cdot 7 \\equiv 84 \\equiv 6 \\pmod{13}.\n$$\n因此，该验证密钥是余数 $6$。", "answer": "$$\\boxed{6}$$", "id": "1385205"}, {"introduction": "在处理单个同余方程的基础上，这个问题引入了一个需要同时满足多个条件的场景。你将着手解决一个同步两个独立周期的经典问题，该问题可以转化为求解一个线性同余方程组。这个练习将让你亲手实践求解此类方程组的核心技术，即中国剩余定理的基本思想 [@problem_id:1385199]。", "problem": "一个专用的嵌入式系统被设计用于监控两个独立的周期性进程。第一个进程，即进程A，在一组编号为0、1、2的状态中循环。该进程每小时前进到下一个状态，在状态2之后返回到状态0。第二个进程，即进程B，在一组编号为0、1、2、3、4的状态中循环。该进程也每小时前进到下一个状态，在状态4之后返回到状态0。\n\n在时间 $t = 0$ 小时，两个进程都被初始化到各自的状态0。当进程A处于状态2且进程B处于状态3的瞬间，系统会触发一个特殊的诊断程序。\n\n第一次触发诊断程序需要经过的最小正数小时数 $t$ 是多少？", "solution": "每个进程每小时前进一个状态，并按其周期长度取模。由于两个进程在 $t=0$ 时都从状态0开始，因此在 $t$ 小时后，进程A的状态为 $A(t) \\equiv t \\pmod{3}$，进程B的状态为 $B(t) \\equiv t \\pmod{5}$。诊断程序在 $A(t)=2$ 且 $B(t)=3$ 时触发，因此 $t$ 必须满足以下同余方程组：\n$$\nt \\equiv 2 \\pmod{3}, \\quad t \\equiv 3 \\pmod{5}.\n$$\n设 $t=2+3k$，其中 $k$ 为某一整数。将其代入第二个同余方程，可得：\n$$\n2+3k \\equiv 3 \\pmod{5} \\;\\;\\Rightarrow\\;\\; 3k \\equiv 1 \\pmod{5}.\n$$\n3 模 5 的乘法逆元是 2，因为 $3 \\cdot 2 \\equiv 6 \\equiv 1 \\pmod{5}$。因此，\n$$\nk \\equiv 2 \\cdot 1 \\equiv 2 \\pmod{5},\n$$\n所以 $k=2+5m$，其中 $m$ 为某一整数。那么\n$$\nt=2+3k=2+3(2+5m)=2+6+15m=8+15m.\n$$\n因此，所有解为 $t \\equiv 8 \\pmod{15}$，当 $m=0$ 时获得最小正整数解，即 $t=8$。", "answer": "$$\\boxed{8}$$", "id": "1385199"}, {"introduction": "我们最后的实践问题聚焦于处理模运算中大指数的计算效率问题。直接计算一个数的高次幂在计算上是不可行的。这个练习将指导你使用一种优雅而强大的算法——模幂运算（也称作快速幂或平方求幂法）——来高效地求解结果，这项技术是现代密码学（如 $RSA$ 算法）的基石 [@problem_id:1385192]。", "problem": "一个简化的伪随机数生成器（PRNG）被用于在一个计算物理模拟中为非确定性过程建模。在给定的离散时间步 $n$，模拟的状态表示为 $S_n$，它由前一个时间步的状态 $S_{n-1}$ 根据乘法同余关系确定：\n$$S_n \\equiv (G \\cdot S_{n-1}) \\pmod{M}$$\n其中 $G$ 是一个称为生成数的固定整数，$M$ 是一个称为模数的大素数。这个递归定义意味着，任何时间步 $k$ 的状态都可以从初始状态 $S_0$ 直接计算得出：$S_k \\equiv (G^k \\cdot S_0) \\pmod{M}$。\n\n在一个特定的量子隧穿模拟中，参数设置如下：模数 $M = 101$，生成数 $G = 7$，初始状态 $S_0 = 1$。模拟中的一个关键事件预计发生在时间步 $k = 185$。\n\n你的任务是计算系统状态 $S_{185}$ 的精确数值。你的最终答案应该是一个介于0和100之间（含两端）的整数。", "solution": "我们使用乘法同余关系及其闭合形式：对于模数 $M$、生成数 $G$ 和初始状态 $S_{0}$，在时间步 $k$ 的状态为\n$$\nS_{k} \\equiv G^{k} S_{0} \\pmod{M}.\n$$\n对于 $M=101$、$G=7$ 和 $S_{0}=1$，我们需要计算\n$$\nS_{185} \\equiv 7^{185} \\pmod{101}.\n$$\n由于 $101$ 是素数且 $\\gcd(7,101)=1$，根据费马小定理可得\n$$\n7^{100} \\equiv 1 \\pmod{101}.\n$$\n因此，\n$$\n7^{185} \\equiv 7^{185 \\bmod 100} \\equiv 7^{85} \\pmod{101}.\n$$\n通过重复平方计算 $7^{85} \\pmod{101}$：\n$$\n7^{2} \\equiv 49 \\pmod{101},\\quad\n7^{4} \\equiv 49^{2} = 2401 \\equiv 78 \\pmod{101},\n$$\n$$\n7^{8} \\equiv 78^{2} = 6084 \\equiv 24 \\pmod{101},\\quad\n7^{16} \\equiv 24^{2} = 576 \\equiv 71 \\pmod{101},\n$$\n$$\n7^{32} \\equiv 71^{2} = 5041 \\equiv 92 \\pmod{101},\\quad\n7^{64} \\equiv 92^{2} = 8464 \\equiv 81 \\pmod{101}.\n$$\n因为 $85 = 64+16+4+1$，我们有\n$$\n7^{85} \\equiv 7^{64}\\cdot 7^{16}\\cdot 7^{4}\\cdot 7 \\equiv 81 \\cdot 71 \\cdot 78 \\cdot 7 \\pmod{101}.\n$$\n以 $101$ 为模逐步相乘：\n$$\n81 \\cdot 71 \\equiv 95 \\pmod{101},\\quad 95 \\cdot 78 \\equiv 37 \\pmod{101},\\quad 37 \\cdot 7 \\equiv 57 \\pmod{101}.\n$$\n于是，\n$$\nS_{185} \\equiv 7^{185} \\equiv 7^{85} \\equiv 57 \\pmod{101}.\n$$\n因此，介于 $0$ 和 $100$ 之间的精确数值是 $57$。", "answer": "$$\\boxed{57}$$", "id": "1385192"}]}