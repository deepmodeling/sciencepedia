{"hands_on_practices": [{"introduction": "一个确定性有限自动机（DFA）的精髓在于其状态，这些状态是其有限“记忆”的体现。本练习将引导你通过分析一个给定的 $DFA$ 的状态转换，来反向推导出它所识别的语言的内在属性。这是一种核心技能，它不仅能加深你对自动机工作原理的理解，也是调试和验证复杂计算系统的基础。[@problem_id:1370394]", "problem": "考虑一个确定性有限自动机 (DFA)，记作 $M$，它在字母表 $\\Sigma = \\{0, 1\\}$ 上的二进制字符串上运行。该自动机旨在根据其符号计数的奇偶性来识别一类特定的字符串。\n\n自动机 $M$ 由以下部分形式化定义：\n- 状态集合为 $Q = \\{S_0, S_1, S_2, S_3\\}$。\n- 起始状态为 $q_{start} = S_0$。\n- 接受状态集合为 $F = \\{S_1\\}$。\n- 转移函数 $\\delta: Q \\times \\Sigma \\to Q$ 由下表定义：\n  - $\\delta(S_0, 0) = S_2$\n  - $\\delta(S_0, 1) = S_1$\n  - $\\delta(S_1, 0) = S_3$\n  - $\\delta(S_1, 1) = S_0$\n  - $\\delta(S_2, 0) = S_0$\n  - $\\delta(S_2, 1) = S_3$\n  - $\\delta(S_3, 0) = S_1$\n  - $\\delta(S_3, 1) = S_2$\n\n一个二进制字符串被 $M$ 接受，当且仅当从起始状态 $S_0$ 开始处理该字符串后，最终停在接受状态 $S_1$。一个二进制字符串要被该自动机接受，必须具备什么性质？\n\nA. 字符串包含奇数个 0 和偶数个 1。\n\nB. 字符串包含偶数个 0 和奇数个 1。\n\nC. 字符串包含奇数个 0 和奇数个 1。\n\nD. 字符串包含偶数个 0 和偶数个 1。\n\nE. 字符串中符号的总数为奇数。\n\nF. 字符串非空且只包含 1。", "solution": "我们将 DFA 的状态解释为对目前为止所见符号计数的奇偶性进行编码。对于一个字符串 $w \\in \\{0,1\\}^{*}$，令 $n_{0}(w)$ 和 $n_{1}(w)$ 分别表示 $w$ 中 0 和 1 的数量，并定义奇偶性向量\n$$\np(w) = \\left(n_{0}(w) \\bmod 2,\\; n_{1}(w) \\bmod 2\\right) \\in \\{0,1\\} \\times \\{0,1\\}.\n$$\n断言：从 $S_{0}$ 开始读取字符串 $w$ 后，自动机处于唯一的状态 $S$，该状态通过以下映射对应于 $p(w)$：\n$$\nS_{0} \\leftrightarrow (0,0),\\quad S_{1} \\leftrightarrow (0,1),\\quad S_{2} \\leftrightarrow (1,0),\\quad S_{3} \\leftrightarrow (1,1).\n$$\n基本情况：对于空字符串 $\\epsilon$，$p(\\epsilon)=(0,0)$，根据定义，DFA 处于状态 $S_{0}$，与映射相符。\n\n归纳步骤：假设在处理完 $w$ 后，DFA 处于对应于 $p(w)=(a,b)$ 的状态。读取一个符号 $0$ 会翻转 0 的奇偶性并保持 1 的奇偶性，得到 $p(w0)=(a+1 \\bmod 2,b)$。读取一个符号 $1$ 会翻转 1 的奇偶性并保持 0 的奇偶性，得到 $p(w1)=(a,b+1 \\bmod 2)$。给定的转移函数恰好匹配这些翻转：\n- $\\delta(S_{0},0)=S_{2}$ 和 $\\delta(S_{2},0)=S_{0}$ 在 $(0,0)$ 和 $(1,0)$ 之间切换；$\\delta(S_{1},0)=S_{3}$ 和 $\\delta(S_{3},0)=S_{1}$ 在 $(0,1)$ 和 $(1,1)$ 之间切换。\n- $\\delta(S_{0},1)=S_{1}$ 和 $\\delta(S_{1},1)=S_{0}$ 在 $(0,0)$ 和 $(0,1)$ 之间切换；$\\delta(S_{2},1)=S_{3}$ 和 $\\delta(S_{3},1)=S_{2}$ 在 $(1,0)$ 和 $(1,1)$ 之间切换。\n因此，根据数学归纳法，该断言对所有 $w$ 都成立。\n\n由于接受集合为 $F=\\{S_{1}\\}$ 且 $S_{1}$ 对应于奇偶性向量 $(0,1)$，一个字符串被接受当且仅当它包含偶数个 0 和奇数个 1。\n\n在所有选项中，这正是选项 B。", "answer": "$$\\boxed{B}$$", "id": "1370394"}, {"introduction": "对 $DFA$ 的结构进行简单的修改，有时会对其所接受的语言产生深刻且可预测的影响。这个练习将探讨 $DFA$ 最优雅的特性之一：补集运算的封闭性。通过简单地翻转接受状态和非接受状态，我们将看到如何构建一个识别原始语言精确补集的全新自动机。[@problem_id:1370388]", "problem": "考虑一个确定性有限自动机 (DFA)，记作 $M$，它被形式化地定义为一个五元组 $M = (Q, \\Sigma, \\delta, q_0, F)$。该自动机的各组成部分规定如下：\n- 状态集合为 $Q = \\{S_0, S_1\\}$。\n- 字母表为 $\\Sigma = \\{a, b\\}$。\n- 起始状态为 $q_0 = S_0$。\n- 最终（或接受）状态集合为 $F = \\{S_0\\}$。\n- 转移函数 $\\delta: Q \\times \\Sigma \\to Q$ 由以下规则定义：\n    - $\\delta(S_0, a) = S_1$\n    - $\\delta(S_0, b) = S_0$\n    - $\\delta(S_1, a) = S_0$\n    - $\\delta(S_1, b) = S_1$\n\n现在，我们从 $M$ 构建一个新的自动机 $M'$。自动机 $M'$ 具有与 $M$ 相同的状态集合 $Q$、字母表 $\\Sigma$、转移函数 $\\delta$ 和起始状态 $q_0$。唯一的区别是其最终状态集合 $F'$，它被定义为 $F$ 相对于 $Q$ 的补集。即 $F' = Q \\setminus F$。\n\n设 $L(M')$ 是新自动机 $M'$ 所接受的语言。对于一个字符串 $w$，设 $|w|_a$ 表示符号 'a' 在 $w$ 中出现的次数，设 $|w|_b$ 表示符号 'b' 在 $w$ 中出现的次数。下列哪个描述准确地刻画了语言 $L(M')$？\n\nA. 所有字符串 $w \\in \\Sigma^*$ 的集合，其中 $|w|_a$ 是奇数。\n\nB. 所有字符串 $w \\in \\Sigma^*$ 的集合，其中 $|w|_a$ 是偶数。\n\nC. 所有字符串 $w \\in \\Sigma^*$ 的集合，其中 $|w|_b$ 是奇数。\n\nD. 所有字符串 $w \\in \\Sigma^*$ 的集合，其中 $|w|_b$ 是偶数。\n\nE. 空语言 $\\emptyset$。\n\nF. 所有字符串的集合 $\\Sigma^*$。", "solution": "我们分析 DFA $M=(Q,\\Sigma,\\delta,q_{0},F)$，其中 $Q=\\{S_{0},S_{1}\\}, \\Sigma=\\{a,b\\}, q_{0}=S_{0}, F=\\{S_{0}\\}$，转移函数为 $\\delta(S_{0},a)=S_{1}, \\delta(S_{0},b)=S_{0}, \\delta(S_{1},a)=S_{0}, \\delta(S_{1},b)=S_{1}$。定义扩展转移函数 $\\hat{\\delta}:Q\\times\\Sigma^{*}\\to Q$。我们断言，对于所有 $w\\in\\Sigma^{*}$，\n$$\n\\hat{\\delta}(S_{0},w)=\\begin{cases}\nS_{0} & \\text{当且仅当 } |w|_{a}\\text{ 是偶数}，\\\\\nS_{1} & \\text{当且仅当 } |w|_{a}\\text{ 是奇数}。\n\\end{cases}\n$$\n这可以通过对 $w$ 的长度进行归纳来证明。对于基本情况 $w=\\epsilon$，我们有 $\\hat{\\delta}(S_{0},\\epsilon)=S_{0}$ 且 $|\\epsilon|_{a}=0$，是偶数。对于归纳步骤，假设该论断对 $x\\in\\Sigma^{*}$ 成立。考虑 $xa$ 和 $xb$。对于 $xa$，根据 $\\hat{\\delta}$ 和 $\\delta$ 的定义，\n$$\n\\hat{\\delta}(S_{0},xa)=\\delta(\\hat{\\delta}(S_{0},x),a),\n$$\n与 $\\hat{\\delta}(S_{0},x)$ 相比，这会将状态在 $S_{0}$ 和 $S_{1}$ 之间翻转，而 $|xa|_{a}=|x|_{a}+1$ 也改变了奇偶性；因此等价关系得以保持。对于 $xb$\n$$\n\\hat{\\delta}(S_{0},xb)=\\delta(\\hat{\\delta}(S_{0},x),b)=\\hat{\\delta}(S_{0},x),\n$$\n并且 $|xb|_{a}=|x|_{a}$ 保持了奇偶性；因此等价关系得以保持。因此，$M$ 恰好接受那些 $|w|_{a}$ 为偶数的字符串 $w$：\n$$\nL(M)=\\{w\\in\\Sigma^{*}\\mid |w|_{a}\\text{ 是偶数}\\}。\n$$\n自动机 $M'$ 有相同的 $Q,\\Sigma,\\delta,q_{0}$，但其最终状态集为 $F'=Q\\setminus F=\\{S_{1}\\}$。因此，$L(M')$ 是 $L(M)$ 相对于 $\\Sigma^{*}$ 的补集，即\n$$\nL(M')=\\{w\\in\\Sigma^{*}\\mid |w|_{a}\\text{ 是奇数}\\}。\n$$\n在选项中，这对应于 A。", "answer": "$$\\boxed{A}$$", "id": "1370388"}, {"introduction": "掌握了分析之后，我们转向设计。这个经典的练习要求你构建一个 $DFA$ 来检测输入字符串中的特定模式，这是文本处理和网络协议分析中的常见任务。此处的挑战不仅在于创建一个能正常工作的自动机，更在于找到状态数最少的*极小化*自动机，这对于构建高效的计算系统至关重要。[@problem_id:1370396]", "problem": "在数字系统和网络协议的设计中，一个常见的任务是监控比特流以寻找特定模式。考虑一个定义在二进制字母表 $\\Sigma = \\{0, 1\\}$ 上的语言 $L$。该语言由所有包含 `00` 或 `11` 作为子串的二进制字符串组成。\n\n确定性有限自动机（DFA）是一种计算的数学模型，它由一组状态、一个起始状态、一组接受（或终止）状态以及一个根据当前状态和输入符号确定下一状态的转移函数定义。给定语言的最小DFA是识别该语言且状态数最少的DFA。\n\n识别语言 $L$ 的最小确定性有限自动机有多少个状态？\n\nA. 3\n\nB. 4\n\nC. 5\n\nD. 6\n\nE. 8", "solution": "给定语言 $L \\subseteq \\Sigma^{*}$，它定义在 $\\Sigma=\\{0,1\\}$ 上，由所有包含子串 \"00\" 或 \"11\" 的二进制字符串组成。等价地，$L$ 是严格交替字符串（即没有相邻相同比特的字符串）集合的补集。\n\n为了用DFA识别 $L$，我们只需跟踪是否已经出现两个连续相同的比特。一个自然的DFA具有以下状态：\n- $q_{s}$：起始状态，尚未看到任何符号，非接受状态。\n- $q_{0}$：最后看到的符号是 $0$，且尚未看到任何相邻相同的比特对，非接受状态。\n- $q_{1}$：最后看到的符号是 $1$，且尚未看到任何相邻相同的比特对，非接受状态。\n- $q_{\\text{acc}}$：已经看到了一个相邻相同的比特对（\"00\" 或 \"11\"），是接受陷阱状态。\n\n转移函数 $\\delta$ 如下：\n- $\\delta(q_{s},0)=q_{0}$, $\\delta(q_{s},1)=q_{1}$.\n- $\\delta(q_{0},0)=q_{\\text{acc}}$, $\\delta(q_{0},1)=q_{1}$.\n- $\\delta(q_{1},1)=q_{\\text{acc}}$, $\\delta(q_{1},0)=q_{0}$.\n- $\\delta(q_{\\text{acc}},0)=q_{\\text{acc}}$, $\\delta(q_{\\text{acc}},1)=q_{\\text{acc}}$.\n\n这个DFA有 $4$ 个状态，并且能够识别 $L$。\n\n为了证明其最小性，我们使用 Myhill–Nerode 定理，通过展示至少 $4$ 个两两可区分的剩余语言。对于一个前缀 $u \\in \\Sigma^{*}$，定义其剩余语言为 $L_{u}=\\{w \\in \\Sigma^{*} : uw \\in L\\}$。考虑以下四个前缀\n$$\nu_{1}=\\epsilon,\\quad u_{2}=0,\\quad u_{3}=1,\\quad u_{4}=00.\n$$\n我们通过找到区分后缀来证明这些前缀导出不同的剩余语言：\n- $L_{u_{1}} \\neq L_{u_{2}}$ 因为当 $w=0$ 时，我们有 $u_{1}w=0 \\notin L$ 但 $u_{2}w=00 \\in L$。\n- $L_{u_{1}} \\neq L_{u_{3}}$ 因为当 $w=1$ 时，我们有 $u_{1}w=1 \\notin L$ 但 $u_{3}w=11 \\in L$。\n- $L_{u_{2}} \\neq L_{u_{3}}$ 因为当 $w=0$ 时，我们有 $u_{2}w=00 \\in L$ 但 $u_{3}w=10 \\notin L$。\n- 对于每个 $i \\in \\{1,2,3\\}$，$L_{u_{4}} \\neq L_{u_{i}}$，这是因为当 $w=\\epsilon$ 时：$u_{4}\\epsilon=00 \\in L$，而对于 $i \\in \\{1,2,3\\}$，$u_{i}\\epsilon \\notin L$。\n\n因此，至少存在 $4$ 个不同的 Myhill–Nerode 等价类，所以任何识别 $L$ 的DFA都必须至少有 $4$ 个状态。既然一个 $4$ 状态的DFA存在（如上所构造），那么最小DFA恰好有 $4$ 个状态。\n\n因此，正确选项是B。", "answer": "$$\\boxed{B}$$", "id": "1370396"}]}