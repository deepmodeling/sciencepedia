{"hands_on_practices": [{"introduction": "掌握推导是理解形式语言的核心技能。本练习将引导你为一个给定的算术表达式，系统地找出其最左推导过程，这不仅能巩固你对产生式规则应用的理解，也是编译器如何逐步解析代码的简化模拟。通过这个练习，你将亲手体验从一个起始符号到一个具体字符串的生成之旅。[@problem_id:1362640]", "problem": "考虑以下上下文无关文法 $G$，它用于生成完全括号化的算术表达式。该文法有一个终结符集合 $T = \\{ '(', ')', \\text{v}, '+', '*', '-' \\}$，一个非终结符（或变元）集合 $N = \\{ E, \\mathrm{Op} \\}$，以及一个开始符号 $S = E$。产生式规则被标记以便引用：\n\n-   P1: $E \\to (E\\ \\mathrm{Op}\\ E)$\n-   P2: $E \\to \\text{v}$\n-   P3: $\\mathrm{Op} \\to +$\n-   P4: $\\mathrm{Op} \\to *$\n-   P5: $\\mathrm{Op} \\to -$\n\n最左推导是一个规则应用序列，在每一步中，当前字符串中最左边的非终结符会根据某条产生式规则被替换。\n\n以下哪个产生式规则标签序列表示了对字符串 `(((v+v)*v)-v)` 的正确最左推导？\n\nA. `P1, P2, P5, P1, P2, P4, P1, P2, P3, P2`\n\nB. `P1, P2, P3, P1, P2, P4, P1, P2, P5, P2`\n\nC. `P1, P1, P1, P2, P3, P2, P4, P2, P5, P2`\n\nD. `P1, P1, P1, P2, P5, P2, P4, P2, P3, P2`\n\nE. `P1, P1, P2, P3, P2, P4, P2, P5, P2, P1`", "solution": "给定文法的产生式为\n$P1: E \\to (E\\ \\mathrm{Op}\\ E)$, $P2: E \\to \\text{v}$, $P3: \\mathrm{Op} \\to +$, $P4: \\mathrm{Op} \\to *$, $P5: \\mathrm{Op} \\to -$,\n我们必须通过最左推导生成字符串 $(((v+v)*v)-v)$，即总是展开最左边的非终结符。\n\n观察到目标字符串的最外层结构是 $(\\ \\cdot\\ -\\ \\text{v})$，所以第一次展开必须是 $P1$，且顶层的 $\\mathrm{Op}$ 必须是 $-$。这个顶层 $-$ 的左操作数是 $((v+v)*v)$，其本身的形式是 $(\\ (v+v)\\ *\\ \\text{v}\\ )$，而最内层的 $(v+v)$ 则确定了其内部的 $\\mathrm{Op}$ 为 $+$。\n\n逐步执行最左推导：\n\n开始: $E$\n\n1) 对最左边的 $E$ 应用 $P1$：\n$$E \\Rightarrow (E\\ \\mathrm{Op}\\ E).$$\n\n2) 用 $P1$ 展开最左边的 $E$（左操作数），以匹配所需的嵌套形式：\n$$(E\\ \\mathrm{Op}\\ E) \\Rightarrow ((E\\ \\mathrm{Op}\\ E)\\ \\mathrm{Op}\\ E).$$\n\n3) 再次用 $P1$ 展开最左边的 $E$（以构建最内层的 $(v+v)$）：\n$$((E\\ \\mathrm{Op}\\ E)\\ \\mathrm{Op}\\ E) \\Rightarrow (((E\\ \\mathrm{Op}\\ E)\\ \\mathrm{Op}\\ E)\\ \\mathrm{Op}\\ E).$$\n\n4) 用 $P2$ 将最左边的 $E$ 展开为一个终结符：\n$$(((E\\ \\mathrm{Op}\\ E)\\ \\mathrm{Op}\\ E)\\ \\mathrm{Op}\\ E) \\Rightarrow (((\\text{v}\\ \\mathrm{Op}\\ E)\\ \\mathrm{Op}\\ E)\\ \\mathrm{Op}\\ E).$$\n\n5) 用 $P3$ 选择最内层的运算符为 $+$：\n$$(((\\text{v}\\ \\mathrm{Op}\\ E)\\ \\mathrm{Op}\\ E)\\ \\mathrm{Op}\\ E) \\Rightarrow (((\\text{v} + E)\\ \\mathrm{Op}\\ E)\\ \\mathrm{Op}\\ E).$$\n\n6) 用 $P2$ 将下一个最左边的 $E$ 展开为 $\\text{v}$：\n$$(((\\text{v} + E)\\ \\mathrm{Op}\\ E)\\ \\mathrm{Op}\\ E) \\Rightarrow (((\\text{v} + \\text{v})\\ \\mathrm{Op}\\ E)\\ \\mathrm{Op}\\ E).$$\n\n7) 用 $P4$ 选择下一个运算符（在 $(v+v)$ 和下一个 $E$ 之间）为 $*$：\n$$(((\\text{v} + \\text{v})\\ \\mathrm{Op}\\ E)\\ \\mathrm{Op}\\ E) \\Rightarrow (((\\text{v} + \\text{v}) * E)\\ \\mathrm{Op}\\ E).$$\n\n8) 用 $P2$ 将下一个最左边的 $E$ 展开为 $\\text{v}$：\n$$(((\\text{v} + \\text{v}) * E)\\ \\mathrm{Op}\\ E) \\Rightarrow (((\\text{v} + \\text{v}) * \\text{v})\\ \\mathrm{Op}\\ E).$$\n\n9) 用 $P5$ 选择顶层运算符为 $-$：\n$$(((\\text{v} + \\text{v}) * \\text{v})\\ \\mathrm{Op}\\ E) \\Rightarrow (((\\text{v} + \\text{v}) * \\text{v}) - E).$$\n\n10) 最后，用 $P2$ 将最后一个 $E$ 展开为 $\\text{v}$：\n$$(((\\text{v} + \\text{v}) * \\text{v}) - E) \\Rightarrow (((\\text{v} + \\text{v}) * \\text{v}) - \\text{v}).$$\n\n使用的产生式标签序列是\n$P1, P1, P1, P2, P3, P2, P4, P2, P5, P2$,\n这与选项 C 匹配。\n在原始解决方案中，字符串`v`在多处被错误地渲染。为了确保一致性和准确性，这些实例已被更正为`\\text{v}`。", "answer": "$$\\boxed{C}$$", "id": "1362640"}, {"introduction": "从分析现有文法到从零开始设计文法，是一个重要的能力飞跃。本练习挑战你为一个具有非平凡约束的语言——即字符串中 $x$ 的数量恰好是 $y$ 的两倍——构建一个上下文无关文法。解决这个问题需要你运用递归思想，巧妙地设计产生式规则来精确地维持符号间的数量关系。[@problem_id:1362645]", "problem": "在一种新颖的数据编码方案设计中，消息由一个字母表构建，该字母表由两种类型的脉冲组成：长脉冲，用符号 'x' 表示；以及短脉冲，用 'y' 表示。当且仅当长脉冲的总数恰好是短脉冲总数的两倍时，一条消息才被视为有效。令 $n_c(w)$ 表示符号 $c$ 在字符串 $w$ 中出现的次数。所有有效消息的语言 $L$ 被形式化定义为 $L = \\{w \\in \\{x, y\\}^* \\mid n_x(w) = 2n_y(w)\\}$。\n\n上下文无关文法 (CFG) 由一组产生式规则描述，包含非终端符号（例如 $S, A, B$）、终端符号（这里是 $x$ 和 $y$）和一个开始符号（这里是 $S$）。符号 $\\lambda$ 代表空字符串。\n\n下列哪个上下文无关文法能生成语言 $L$？\n\nA. 具有产生式规则的文法：\n$S \\to SS$\n$S \\to xxSy$\n$S \\to xSySx$\n$S \\to ySxSx$\n$S \\to \\lambda$\n\nB. 具有产生式规则的文法：\n$S \\to xxyS$\n$S \\to yxxS$\n$S \\to xyxS$\n$S \\to \\lambda$\n\nC. 具有产生式规则的文法：\n$S \\to xS_1x \\mid \\lambda$\n$S_1 \\to ySy \\mid \\lambda$\n\nD. 具有产生式规则的文法：\n$S \\to SS$\n$S \\to xSyx$\n$S \\to \\lambda$\n\nE. 具有产生式规则的文法：\n$S \\to xS_1S_2$\n$S_1 \\to x$\n$S_2 \\to yS \\mid \\lambda$", "solution": "定义不变量函数 $f(w) = n_{x}(w) - 2 n_{y}(w)$。目标语言为 $L = \\{ w \\in \\{x,y\\}^{*} \\mid f(w) = 0 \\}$。\n\n首先，分析选项 A 的产生式：\n- $S \\to SS$\n- $S \\to xxSy$\n- $S \\to xSySx$\n- $S \\to ySxSx$\n- $S \\to \\lambda$\n\n健全性（只生成 $L$ 中的字符串）：\n- 基础情况：$S \\to \\lambda$ 得出 $f(\\lambda)=0$。\n- 连接运算的封闭性：如果 $u,v \\in L$，则 $f(uv) = f(u) + f(v) = 0 + 0 = 0$。因此 $S \\to SS$ 保持 $f=0$ 的性质。\n- 规则 $S \\to xxSy$：如果 $S \\Rightarrow^{*} w$ 且 $f(w)=0$，那么派生出的字符串是 $xxwy$。其计数满足 $f(xxwy) = (n_{x}(w)+2) - 2(n_{y}(w)+1) = f(w) + 2 - 2 = 0$。\n- 规则 $S \\to xSySx$：如果 $S \\Rightarrow^{*} u$ 和 $S \\Rightarrow^{*} v$ 且 $f(u)=f(v)=0$，那么派生出的字符串是 $xuyvx$，并且 $f(xuyvx) = (n_{x}(u)+n_{x}(v)+2) - 2(n_{y}(u)+n_{y}(v)+1) = f(u)+f(v)+2-2 = 0$。\n- 规则 $S \\to ySxSx$：类似地，如果 $S \\Rightarrow^{*} u$ 和 $S \\Rightarrow^{*} v$ 且 $f(u)=f(v)=0$，那么派生出的字符串是 $yuxvx$，并且 $f(yuxvx) = (n_{x}(u)+n_{x}(v)+2) - 2(n_{y}(u)+n_{y}(v)+1) = f(u)+f(v)=0$。\n\n因此，由 A 生成的每个字符串都满足 $f=0$，所以该文法对于 $L$ 是健全的。\n\n完备性（$L$ 中的所有字符串都能被生成）：\n对 $|w|$ 进行归纳。如果 $|w|=0$，$w=\\lambda$ 可被生成。假设 $|w|>0$ 且 $w \\in L$。\n\n- 如果 $w$ 存在一个非空真前缀 $u$ 使得 $f(u)=0$，则可写作 $w=uv$。那么 $f(v)=0$。根据归纳假设，$u$ 和 $v$ 都可以从 $S$ 派生，并且 $S \\Rightarrow SS \\Rightarrow^{*} uv$ 可以派生出 $w$。\n\n- 否则，$w$ 的任何真前缀都不满足 $f=0$。考虑 $w$ 的最后一个符号。\n\n  1. 如果最后一个符号是 $y$，考察沿 $w$ 的 $f$ 函数的前缀和。由于总和为 $0$ 且最后一步的贡献为 $-2$，所以在最后一个符号之前，和为 $2$。令 $i$ 为累加和首次等于 $2$ 的位置。那么到 $i$ 为止的前缀必定是 $xx$（因为在此之前和不为零，且 $x$ 的步长为 $+1$，$y$ 的步长为 $-2$），并且我们可以将 $w$ 写成 $w = xx \\, u \\, y$ 的形式，其中 $f(u)=0$。根据归纳法，$u$ 是可派生的，而规则 $S \\to xxSy$ 会生成 $w$。\n\n  2. 如果最后一个符号是 $x$，那么前面必然有 $y$ 存在。令 $j$ 为结束前累加和等于 $1$ 的最后一个位置（这个位置存在，因为最后的 $x$ 加了 $+1$ 才从 $-1$ 达到 $0$，或者对称地通过步长结构）。根据第一个符号的不同，可以将 $w$ 分解为 $w = x \\, u \\, y \\, v \\, x$ 或 $w = y \\, u \\, x \\, v \\, x$，其中 $f(u)=f(v)=0$（这可以由对步长 $+1$ 和 $-2$ 的标准投票类前缀和分解得出，即分离出围绕一个 $y$ 首次回到高度1的部分和最后的闭合 $x$）。根据归纳法，$u$ 和 $v$ 是可派生的，相应的规则 $S \\to xSySx$ 或 $S \\to ySxSx$ 会生成 $w$。\n\n因此，$L$ 中的每个 $w$ 都能由 A 生成。所以，A 精确地生成了语言 $L$。\n\n现在，我们来检查其他选项以排除它们。\n\n选项 B：\n产生式：$S \\to xxyS \\mid yxxS \\mid xyxS \\mid \\lambda$。该文法生成的字符串是长度为3的块的串联，每个块恰好包含两个 $x$ 和一个 $y$。尽管每个这样的字符串都满足 $f=0$，但并非 $L$ 中的每个字符串都能被划分为连续的、每个都包含两个 $x$ 和一个 $y$ 的长度为3的块。例如，字符串 yyyxxxxxx 在 $L$ 中（因为 $n_{x}=6$，$n_{y}=3$，所以 $f=0$），但它的前3个符号是 yyy，这不属于任何允许的块，所以它无法被派生。因此，B 是不完备且不正确的。\n\n选项 C：\n产生式：$S \\to xS_{1}x \\mid \\lambda$, $S_{1} \\to ySy \\mid \\lambda$。该文法通过 $S \\to xS_{1}x$ 和 $S_{1} \\to \\lambda$ 可以派生出 $xx$。但对于 $xx$，我们有 $n_{x}=2, n_{y}=0$，所以 $f=2 \\neq 0$。因此 C 生成了不在 $L$ 中的字符串，是不正确的。\n\n选项 D：\n产生式：$S \\to SS \\mid xSyx \\mid \\lambda$。每个派生出的非空字符串都以 $x$ 开头，所以 $L$ 中以 $y$ 开头的字符串（例如 yxx）无法被生成。因此 D 是不完备且不正确的。\n\n选项 E：\n产生式：$S \\to xS_{1}S_{2}$, $S_{1} \\to x$, $S_{2} \\to yS \\mid \\lambda$。消去 $S_{1}$ 得到 $S \\to xx(yS \\mid \\lambda)$，所以 $S$ 派生出形如 $(xxy)^{n}xx$（其中 $n \\geq 0$）的字符串。对于这些字符串，$n_{x}=2n+2$ 且 $n_{y}=n$，因此 $f=2n+2-2n=2 \\neq 0$。因此，E 不生成 $L$ 中的任何字符串（当然也无法生成整个 $L$），所以它是不正确的。\n\n因此，唯一正确的选项是 A。", "answer": "$$\\boxed{A}$$", "id": "1362645"}, {"introduction": "当一个字符串可以有多种生成方式时，会发生什么？这个问题引出了“歧义性”这一关键概念，即一个字符串可以对应多个不同的分析树，从而导致不同的解释。本练习将通过一个经典的歧义算术表达式文法，让你计算一个给定字符串有多少种可能的分析树，从而深刻理解歧义性带来的挑战及其在编程语言设计中的重要性。[@problem_id:1362657]", "problem": "考虑一个上下文无关文法 $G$，该文法用于解析简单的算术表达式。该文法有一个非终结符 $E$（代表表达式），两个代表运算符的终结符 `+` 和 `*`，以及一个代表标识符或数字的终结符 `id`。文法 $G$ 的产生式规则如下：\n\n1.  $E \\to E + E$\n2.  $E \\to E * E$\n3.  $E \\to \\text{id}$\n\n该文法是二义性的，因为它没有强制规定任何运算符优先级或结合性。因此，一个字符串可以有多种有效的推导，每种推导都对应一棵不同的语法分析树。\n\n你的任务是确定字符串 `id+id*id+id*id` 的不同语法分析树的总数。", "solution": "我们将输入字符串编码为 $a_{1}\\,o_{1}\\,a_{2}\\,o_{2}\\,a_{3}\\,o_{3}\\,a_{4}\\,o_{4}\\,a_{5}$，其中 $a_{i}$ 是五次出现的 $\\text{id}$，而 $(o_{1},o_{2},o_{3},o_{4})=(+,*,+,*)$。对于文法 $E \\rightarrow E+E \\mid E*E \\mid \\text{id}$，要获得此固定词元序列的一棵语法分析树，可以在某个运算符位置 $o_{k}$ 选择一个二元划分，使其成为根运算符，然后递归地解析左子串 $a_{1}\\,o_{1}\\,\\dots,\\,a_{k}$ 和右子串 $a_{k+1}\\,o_{k+1}\\,\\dots,\\,a_{5}$。因为运算符词元的位置是固定的，一旦选择了划分位置 $k$，根部的运算符就必然是 $o_{k}$；因此，语法分析树的数量仅取决于对五个操作数进行完全加括号的方式有多少种，而与具体的运算符符号无关。\n\n设 $T(m)$ 为包含 $m$ 个操作数（因此有 $m-1$ 个运算符）的子串的语法分析树数量。基本情况是 $T(1)=1$。当 $m \\geq 2$ 时，每个解析都是通过在第 $k$ 个操作数之后选择一个划分点得到的，其中 $k \\in \\{1,\\dots,m-1\\}$，这会产生以下递推关系\n$$\nT(m)=\\sum_{k=1}^{m-1} T(k)\\,T(m-k).\n$$\n这就是卡特兰递推关系，所以 $T(m)=C_{m-1}$，其中\n$$\nC_{r}=\\frac{1}{r+1}\\binom{2r}{r}.\n$$\n对于我们的字符串，有 $m=5$ 个操作数，因此不同语法分析树的数量为\n$$\nT(5)=C_{4}=\\frac{1}{5}\\binom{8}{4}=\\frac{1}{5}\\cdot 70=14.\n$$\n因此，不同语法分析树的总数是 $14$。", "answer": "$$\\boxed{14}$$", "id": "1362657"}]}