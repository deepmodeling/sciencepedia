{"hands_on_practices": [{"introduction": "停机问题对于任意图灵机在任意步数下都是著名的不可判定问题。第一个练习 [@problem_id:1457071] 邀请你思考一个关键的修改：如果我们对计算时间施加一个有限的限制会怎样？通过探索这个场景，你将构建一个具体的算法，并理解“不可判定性”源于无限计算的可能性，而不仅仅是长时间的计算。", "problem": "在可计算性理论的研究中，一个核心概念是图灵机 (Turing Machine, TM)，它是一种计算的数学模型。一个标准的单带确定性图灵机由其状态集、输入字母表和带字母表、转移函数、起始状态、接受状态以及拒绝状态来正式定义。如果一台图灵机的计算最终进入接受状态或拒绝状态，则称该图灵机在给定的输入串上“停机”。\n\n著名的停机问题旨在判断一个给定的图灵机 $M$ 是否会在一个给定的输入串 $w$ 上停机。与此问题对应的语言，通常表示为 $A_{TM} = \\{\\langle M, w \\rangle \\mid M \\text{ 是一台图灵机且 } M \\text{ 接受 } w \\}$，是众所周知的不可判定问题。\n\n我们来考虑这个问题的修改版本。定义一个新语言 $HALT_{\\text{bounded}}$，它是所有三元组 $\\langle M, w, k \\rangle$ 的集合，其中 $M$ 是一台图灵机，$w$ 是一个输入串，且 $M$ 在输入 $w$ 上最多经过 $k$ 步计算后停机。这里，$k$ 是一个以一元制表示的非负整数（例如，数字 3 表示为字符串 '111'）。\n\n下列哪个陈述正确地分类了语言 $HALT_{\\text{bounded}}$？\n\nA. $HALT_{\\text{bounded}}$ 是可判定的。\n\nB. $HALT_{\\text{bounded}}$ 是不可判定的，但它是图灵可识别的。\n\nC. $HALT_{\\text{bounded}}$ 不是图灵可识别的。\n\nD. $HALT_{\\text{bounded}}$ 的可判定性是理论计算机科学中的一个开放问题。\n\nE. $HALT_{\\text{bounded}}$ 是可判定的，当且仅当图灵机 $M$ 除了停机状态外只有一个状态。", "solution": "给定语言 $HALT_{\\text{bounded}} = \\{\\langle M, w, k \\rangle \\mid \\text{$M$ 在输入 $w$ 上最多经过 $k$ 步后停机}\\}$，其中 $k$ 以一元制编码。我们需要对其可判定性状态进行分类。\n\n关键原理：一台通用图灵机 (universal Turing machine) 可以逐步模拟任意一台图灵机。对于任意图灵机 $M$、输入 $w$ 和整数 $k \\geq 0$，我们可以显式地模拟 $M$ 在 $w$ 上的前 $k$ 步计算。这种模拟是有效的，因为 $M$ 的转移函数是有限且可计算的，所以每个模拟步骤都是将转移规则机械地应用于当前格局 (configuration)。\n\n算法（判定器）构造：\n- 对于输入 $\\langle M, w, k \\rangle$，从其一元制表示中解析 $k$ 以获得整数值，我们将其记为 $|k|$（符号‘1’的数量）。\n- 将模拟格局 $C_{0}$ 初始化为 $M$ 在输入 $w$ 上的起始格局。\n- 令 $t$ 从 $1$ 遍历到 $|k|$：\n  - 如果当前格局 $C_{t-1}$ 处于 $M$ 的接受或拒绝状态，则停机并接受（因为 $M$ 在最多 $t-1 \\leq |k|$ 步内停机）。\n  - 否则，通过将 $M$ 的转移函数应用于 $C_{t-1}$ 来计算下一个格局 $C_{t}$。\n- 循环结束后（即在模拟了恰好 $|k|$ 步但未进入停机状态后），如果尚未达到接受或拒绝状态，则停机并拒绝。\n\n停机性：上述机器总是停机，因为它执行一个恰好 $|k|$ 次迭代的循环，并且在每次迭代中执行有限且有效的计算。因此，它是一个判定器。\n\n正确性：\n- 可靠性 (Soundness)：如果该算法接受，则在某个迭代 $t \\leq |k|$ 时，它观察到 $M$ 在 $w$ 上已进入接受或拒绝状态，这意味着 $M$ 在最多 $k$ 步内于输入 $w$ 上停机。因此，$\\langle M, w, k \\rangle \\in HALT_{\\text{bounded}}$。\n- 完备性 (Completeness)：如果 $\\langle M, w, k \\rangle \\in HALT_{\\text{bounded}}$，则存在一个 $t \\leq k$ 使得 $M$ 在输入 $w$ 上恰好经过 $t$ 步后停机。模拟过程将在第 $t$ 次迭代或之前检测到这一情况并接受。\n\n因此，$HALT_{\\text{bounded}}$ 是可判定的。$k$ 的一元制编码确保此判定器在输入长度的多项式时间内运行，但即使 $k$ 用二进制编码，上述判定器仍然会终止（尽管可能需要相对于 $k$ 的长度呈指数级的时间），因此无论采用何种编码，可判定性都成立。由此可知，正确的分类是该语言是可判定的，这使得声称其不可判定或不可识别的选项是错误的，并且它也不是一个开放问题。选项 E 中的附加条件对于可判定性而言是不必要的。\n\n因此，正确选项是 A。", "answer": "$$\\boxed{A}$$", "id": "1457071"}, {"introduction": "我们已经看到，限制步数可以使停机问题变得可判定。下一个练习 [@problem_id:1408272] 探讨了另一个基本约束：如果图灵机的纸带是有限的会怎样？这个思想实验迫使我们量化机器的整个“状态空间”，并揭示了为什么无限纸带是造成停机问题不可判定性的关键因素。", "problem": "考虑一个称为有限带图灵机 (FTTM) 的理论计算模型。一个 FTTM 由一个有限的内部状态集 $Q$（其大小为 $|Q| = s$）、一个有限的带字母表 $\\Gamma$（其大小为 $|\\Gamma| = k$ 个符号）以及一条严格有限的、由固定数量 $n$ 个单元格组成的带定义。该机器有一个读写头，可以一次读取或写入一个符号，并向左或向右移动，但不能移出带外。该机器的行为由一个确定性的转移函数控制。\n\n在任何时刻，FTTM 的一个完整“配置”由其当前内部状态、其读写头的位置以及其带上写入的整个符号序列定义。由于可能配置的数量是有限的，任何不停止的 FTTM 最终都必须重复一个配置，从而进入无限循环。这意味着对于任何 FTTM，其停机问题都是可判定的。\n\n给定一个具有 $s$ 个状态、长度为 $n$ 的带和包含 $k$ 个符号的字母表的 FTTM，可能存在的不同配置的最大数量是多少？这个值也代表了最大的计算步数，在此步数之后，我们可以通过简单地模拟它并检查它是否已经停机来确定该机器是停机还是循环。\n\n选择表示此最大步数的正确表达式。\n\nA. $s \\cdot n \\cdot k^{n}$\n\nB. $s + n + k$\n\nC. $k^{s \\cdot n}$\n\nD. $s \\cdot k \\cdot n$\n\nE. $n \\cdot s^{k}$\n\nF. $(s \\cdot k)^{n}$", "solution": "一个完整的配置由以下部分指定：\n- 内部状态 $q \\in Q$，其中 $|Q|=s$，\n- 读写头在长度为 $n$ 的带上的位置 $i$（因此有 $n$ 个可能的位置），\n- 完整的带内容，这是一个在字母表 $\\Gamma$（$|\\Gamma|=k$）上长度为 $n$ 的字符串，因此有 $k^{n}$ 种可能性。\n\n根据计数的乘法法则，不同配置的总数为\n$$\nN=\\underbrace{s}_{\\text{状态}}\\cdot\\underbrace{n}_{\\text{读写头位置}}\\cdot\\underbrace{k^{n}}_{\\text{带内容}}=s\\cdot n\\cdot k^{n}.\n$$\n\n因为转移函数是确定性的，并且只有 $N$ 种配置，根据鸽巢原理，在 $N$ 步之后，除非机器已经提前停机，否则一个配置必然会重复。因此，模拟最多 $N$ 步就足以判断机器是停机还是循环。在给出的选项中，这与选项 A 相匹配：$s \\cdot n \\cdot k^{n}$。", "answer": "$$\\boxed{A}$$", "id": "1408272"}, {"introduction": "理解停机问题的不可判定性是一回事，而将其作为工具使用则是更高层次的掌握。最后一个练习 [@problem_id:1457099] 提出了一个与图灵机在多个输入上的停机行为相关的新问题。你的任务是判断其可判定性，这将需要你应用归约等技巧，并展示最初的停机问题如何作为证明其他计算局限性的基石。", "problem": "在计算理论中，我们研究抽象计算模型的基本能力和局限性。图灵机（TM）是这样一种机器的主要模型，它根据一张规则表在一条带子上操作符号。对于任意给定的图灵机和输入字符串，该机器要么最终停机（通过进入接受或拒绝状态），要么无限循环。\n\n一个语言是一个字符串的集合。如果存在一个图灵机（称为判定器），对于任意给定的输入字符串，它总能停机并正确判断该字符串是否属于语言$L$，那么我们称语言$L$是**可判定的**（或递归的）。如果存在一个图灵机，对于任何属于语言$L$的字符串，它会停机并接受；但对于不属于$L$的字符串，它可能停机并拒绝，也可能无限循环，那么我们称语言$L$是**可识别的**（或递归可枚举的）。\n\n考虑以下语言，我们称之为 $L_{DH}$（代表双重停机）：\n$$L_{DH} = \\{ \\langle M \\rangle \\mid M \\text{ 是一台图灵机，它在输入 '0' 和输入 '1' 上都会停机} \\}$$\n这里，$\\langle M \\rangle$ 表示图灵机 $M$ 的字符串编码。\n\n下列哪个陈述正确地分类了语言 $L_{DH}$？\n\nA. $L_{DH}$ 是可判定的。\n\nB. $L_{DH}$ 是可识别的，但不是可判定的。\n\nC. $L_{DH}$ 不是可识别的，但它的补集 $\\overline{L_{DH}}$ 是可识别的（即 $L_{DH}$ 是余-可识别的但不是可判定的）。\n\nD. $L_{DH}$ 既不是可识别的，也不是余-可识别的。", "solution": "我们通过标准的停机问题构造来分析 $L_{DH}$。\n\n首先，对于每个固定的输入符号 $x \\in \\{0,1\\}$，定义语言\n$$\nH_{x}=\\{\\langle M \\rangle \\mid M \\text{ 在输入 } x \\text{ 上停机}\\}.\n$$\n众所周知，$H_{x}$ 是可识别的：一个识别器可以在输入 $x$ 上逐步模拟 $M$，并且当且仅当模拟停机时接受。形式上，设 $R_{x}$ 是一台图灵机，它在输入 $\\langle M \\rangle$ 时模拟 $M(x)$；如果 $M(x)$ 停机，$R_{x}$ 就接受；否则它将永远运行。因此 $H_{x}$ 是可识别的。\n\n观察可知\n$$\nL_{DH}=H_{0} \\cap H_{1}.\n$$\n可识别语言族在交集运算下是封闭的。要明确地看到这一点，给定 $H_{0}$ 的识别器 $R_{0}$ 和 $H_{1}$ 的识别器 $R_{1}$，我们可以为 $L_{DH}$ 构建一个识别器 $R$。它在输入 $\\langle M \\rangle$ 时，交错模拟 $R_{0}$ 在 $\\langle M \\rangle$ 上的计算和 $R_{1}$ 在 $\\langle M \\rangle$ 上的计算（例如，在第 $t$ 阶段，对每个模拟各执行 $t$ 步）。如果两个模拟都接受，则 $R$ 接受。如果其中任何一个永不接受，$R$ 可能会永远运行。因此 $L_{DH}$ 是可识别的。\n\n接下来，我们证明 $L_{DH}$ 不是可判定的。我们将固定输入的停机问题 $H_{0}$ 归约到 $L_{DH}$。我们如下定义一个作用于图灵机编码上的可计算映射 $f$：对于输入 $\\langle M \\rangle$，构造一个机器 $M'$，它\n- 在输入为 $0$ 时，模拟 $M$ 在输入 $0$ 上的行为，当且仅当 $M$ 在 $0$ 上停机时，它也停机；\n- 在输入为 $1$ 时，立即停机（例如，在一步之内接受）。\n这个构造是有效的，所以 $f$ 是一个映射归约。根据构造，\n$$\n\\langle M \\rangle \\in H_{0} \\iff \\langle M' \\rangle \\in L_{DH}.\n$$\n因此 $H_{0} \\leq_{m} L_{DH}$。由于 $H_{0}$ 是不可判定的（这可以由一般停机问题的不可判定性通过标准编码方法得出：给定 $\\langle N,w \\rangle$，构造一个忽略其输入并模拟 $N$ 在 $w$ 上的机器 $M_{N,w}$，从而得到 $\\langle N,w \\rangle \\in H \\iff \\langle M_{N,w} \\rangle \\in H_{0}$），因此 $L_{DH}$ 不可能是可判定的。\n\n最后，我们证明 $\\overline{L_{DH}}$ 不是可识别的。使用与上面相同的映射 $f$，注意到\n$$\n\\langle M \\rangle \\in \\overline{H_{0}} \\iff \\langle M' \\rangle \\in \\overline{L_{DH}}.\n$$\n因此 $\\overline{H_{0}} \\leq_{m} \\overline{L_{DH}}$。由于 $\\overline{H_{0}}$ 不是可识别的（固定输入停机问题的补集是不可识别的），因此 $\\overline{L_{DH}}$ 也不是可识别的。所以 $L_{DH}$ 不是余-可识别的。\n\n综合这些事实，$L_{DH}$ 是可识别的但不是可判定的，并且它的补集不是可识别的。在这些选项中，这正是选项 B。", "answer": "$$\\boxed{B}$$", "id": "1457099"}]}