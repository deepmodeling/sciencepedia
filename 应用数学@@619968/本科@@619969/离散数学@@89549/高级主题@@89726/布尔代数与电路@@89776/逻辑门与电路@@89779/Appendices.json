{"hands_on_practices": [{"introduction": "在我们构建复杂电路之前，必须掌握其基本构建模块的性质。第一个练习 [@problem_id:1382099] 旨在解决一个常见的陷阱：想当然地认为所有逻辑运算都像普通加法或乘法一样具有结合律。通过探究与非（NAND）运算是否满足结合律，你将培养一种审慎的眼光，理解运算顺序如何彻底改变电路的功能——这是任何数字设计师都必须掌握的关键一课。", "problem": "一位工程师正在测试一个定制的处理单元。该设计依赖于链接双输入与非门（NAND门）来处理三个二进制信号 $A$、$B$ 和 $C$。工程师注意到运算顺序很重要，具体来说，对于某些输入，电路配置 `(A NAND B) NAND C` 与电路配置 `A NAND (B NAND C)` 会产生不同的输出。与非（NAND）运算在布尔代数中定义为 $X \\text{ NAND } Y = (X \\cdot Y)'$，其中 `·` 代表逻辑与，`'` 代表逻辑非（例如，$1' = 0$ 和 $0' = 1$）。\n\n您的任务是从下面的列表中找出所有使得这两种电路配置产生不同结果的输入组合。一个输入组合以有序三元组 $(A, B, C)$ 的形式给出。\n\n选择所有满足 $(A \\text{ NAND } B) \\text{ NAND } C \\neq A \\text{ NAND } (B \\text{ NAND } C)$ 的输入组合 $(A, B, C)$。\n\nA. (0, 0, 1)\n\nB. (0, 1, 0)\n\nC. (1, 1, 1)\n\nD. (1, 0, 1)\n\nE. (1, 1, 0)", "solution": "我们使用与非（NAND）的布尔定义：对于任意布尔值 $X,Y$，$X \\text{ NAND } Y = (X \\cdot Y)'$，其中 $\\cdot$ 是逻辑与，而 $'$ 是逻辑非。我们还使用德摩根定律 $(X \\cdot Y)' = X' + Y'$，其中 $+$ 表示逻辑或，以及对合律 $(X')' = X$。\n\n首先，对这两个表达式进行符号化简。\n\n左侧表达式：\n设 $D = A \\text{ NAND } B = (A \\cdot B)'$。则\n$$(A \\text{ NAND } B) \\text{ NAND } C = D \\text{ NAND } C = (D \\cdot C)' = ((A \\cdot B)' \\cdot C)'.$$\n根据德摩根定律，\n$$((A \\cdot B)' \\cdot C)' = ((A \\cdot B)')' + C' = A \\cdot B + C'.$$\n\n右侧表达式：\n设 $E = B \\text{ NAND } C = (B \\cdot C)'$。则\n$$A \\text{ NAND } (B \\text{ NAND } C) = A \\text{ NAND } E = (A \\cdot E)' = (A \\cdot (B \\cdot C)')'.$$\n根据德摩根定律，\n$$(A \\cdot (B \\cdot C)')' = A' + ((B \\cdot C)')' = A' + B \\cdot C.$$\n\n因此，\n$$(A \\text{ NAND } B) \\text{ NAND } C = A \\cdot B + C', \\quad A \\text{ NAND } (B \\text{ NAND } C) = A' + B \\cdot C.$$\n我们必须找到使得 $A \\cdot B + C' \\neq A' + B \\cdot C$ 成立的输入。\n\n对每个列出的选项进行评估：\n\nA. $(A,B,C) = (0,0,1)$:\n$$A \\cdot B + C' = 0 \\cdot 0 + 1' = 0 + 0 = 0,$$\n$$A' + B \\cdot C = 0' + 0 \\cdot 1 = 1 + 0 = 1.$$\n结果不同 ⇒ 选择 A。\n\nB. $(A,B,C) = (0,1,0)$:\n$$A \\cdot B + C' = 0 \\cdot 1 + 0' = 0 + 1 = 1,$$\n$$A' + B \\cdot C = 0' + 1 \\cdot 0 = 1 + 0 = 1.$$\n结果相同 ⇒ 不选择 B。\n\nC. $(A,B,C) = (1,1,1)$:\n$$A \\cdot B + C' = 1 \\cdot 1 + 1' = 1 + 0 = 1,$$\n$$A' + B \\cdot C = 1' + 1 \\cdot 1 = 0 + 1 = 1.$$\n结果相同 ⇒ 不选择 C。\n\nD. $(A,B,C) = (1,0,1)$:\n$$A \\cdot B + C' = 1 \\cdot 0 + 1' = 0 + 0 = 0,$$\n$$A' + B \\cdot C = 1' + 0 \\cdot 1 = 0 + 0 = 0.$$\n结果相同 ⇒ 不选择 D。\n\nE. $(A,B,C) = (1,1,0)$:\n$$A \\cdot B + C' = 1 \\cdot 1 + 0' = 1 + 1 = 1,$$\n$$A' + B \\cdot C = 1' + 1 \\cdot 0 = 0 + 0 = 0.$$\n结果不同 ⇒ 选择 E。\n\n因此，产生不同结果的输入是 A 和 E。", "answer": "$$\\boxed{AE}$$", "id": "1382099"}, {"introduction": "在真实的工程实践中，设计师常常面临各种约束，例如只能使用特定类型的逻辑门。这个实践问题 [@problem_id:1382064] 模拟了这样一个场景，挑战你仅使用或非（NOR）门来构建一个同或（XNOR）门——一个用于比较相等性的关键组件。这个练习不仅展示了通用门（如 NOR 门）的强大功能，还能磨练你利用布尔代数将所需功能转化为可行电路的能力。", "problem": "一位硬件工程师的任务是为一个旧式控制系统设计一个简单的模块。该模块用作“兼容性检查器”。它接收两个单比特数字信号，我们将其表示为 $A$ 和 $B$。该模块的规格要求它在且仅在输入 $A$ 和 $B$ 相同时（即，两者都为 ‘0’ 或都为 ‘1’）产生高逻辑输出（表示 ‘1’）。否则，该模块必须产生低逻辑输出（表示 ‘0’）。由于元件库存有富余，工程师必须仅使用双输入或非门来构建此模块。一个输入为 $X$ 和 $Y$ 的双输入或非门所产生的输出是其输入的或运算的逻辑非。\n\n构建此兼容性检查器模块所需的双输入或非门的绝对最小数量是多少？", "solution": "我们需要一个当且仅当 $A$ 和 $B$ 相等时输出为高的函数，即逻辑等价（XNOR）函数：\n$$\nF = A \\odot B = (A \\oplus B)' = (A'B + AB')' = (A + B')(A' + B).\n$$\n我们被限制只能使用双输入或非门。一个双输入或非门实现\n$$\n\\operatorname{NOR}(X,Y) = (X + Y)'.\n$$\n\n使用四个双输入或非门构建 $F$：\n1) 令 $p = \\operatorname{NOR}(A,B) = (A + B)' = A'B'$ （根据德摩根定律）。\n\n2) 令 $q = \\operatorname{NOR}(A,p) = (A + p)'$。代入 $p = A'B'$ 来简化括号内的和式：\n$$\nA + p = A + A'B' = (A + A')(A + B') = 1 \\cdot (A + B') = A + B',\n$$\n所以\n$$\nq = (A + B')' = A'B.\n$$\n\n3) 令 $r = \\operatorname{NOR}(B,p) = (B + p)' = (B + A'B')'$。类似地进行简化：\n$$\nB + A'B' = (B + A')(B + B') = (A' + B)\\cdot 1 = A' + B,\n$$\n因此\n$$\nr = (A' + B)' = AB'.\n$$\n\n4) 最后，取\n$$\nF = \\operatorname{NOR}(q,r) = (q + r)' = (A'B + AB')' = A \\odot B.\n$$\n\n因此，该电路恰好使用四个双输入或非门并实现了函数 $F$。\n\n为什么少于四个或非门是不可能的：\n- 实现XNOR函数需要组合原始输入 ($A, B$) 及其反相形式 ($A', B'$)。\n- 在仅使用或非门的情况下，生成反相信号本身就需要门，而后续的组合也需要额外的门。\n- 尽管严格的证明很复杂，但可以表明，一个由3个或更少的或非门组成的电路无法提供足够的逻辑层次来构建XNOR函数。\n- 因此，我们展示的4门结构是已知的最优解，4是所需的最小门数。", "answer": "$$\\boxed{4}$$", "id": "1382064"}, {"introduction": "逻辑电路不仅能实现简单的与/或运算，还可以被设计成基于加权输入进行“决策”。这个高级问题 [@problem_id:1382082] 将你引入阈值逻辑的世界，这一概念在数字电路和神经网络原理之间架起了一座桥梁。你将为一个特殊函数推导其最简布尔表达式，该函数仅在输入的加权和超过特定阈值时才激活，从而展示如何运用布尔代数来设计复杂的决策系统。", "problem": "一个专用的处理单元使用一个四输入阈值逻辑门。该门有四个二进制输入 $x_1, x_2, x_3, x_4$，其值可以为 0 (假) 或 1 (真)。该门的输出由布尔函数 $f(x_1, x_2, x_3, x_4)$ 表示，其值为 1 当且仅当其输入的加权和大于或等于某个阈值。对于这个特定的门，输入的权重为 $w_1=2, w_2=1, w_3=1, w_4=1$，阈值为 $T=3$。因此，该函数定义如下：\n$$\nf(x_1, x_2, x_3, x_4) = \\begin{cases} 1 & \\text{if } 2x_1 + x_2 + x_3 + x_4 \\ge 3 \\\\ 0 & \\text{otherwise} \\end{cases}\n$$\n确定此函数 $f$ 的唯一最小积之和 (SOP) 表达式。使用并置表示逻辑与，使用 `+` 符号表示逻辑或。变量为 $x_1, x_2, x_3, x_4$。", "solution": "给定的阈值逻辑门输出定义为\n$$\nf(x_{1},x_{2},x_{3},x_{4})=\\begin{cases}\n1 & \\text{if } 2x_{1}+x_{2}+x_{3}+x_{4}\\ge 3\\\\\n0 & \\text{otherwise}\n\\end{cases}\n$$\n我们通过对 $x_1$ 进行分情况讨论来推导最小积之和。\n\n情况 $x_1=1$：不等式变为 $2+(x_{2}+x_{3}+x_{4})\\ge 3$，化简为 $x_{2}+x_{3}+x_{4}\\ge 1$。因此，当 $x_1=1$ 时，只要 $x_2, x_3, x_4$ 中至少有一个为 1，函数值就为 1。这种情况产生了三个质蕴涵项：$x_1x_2$, $x_1x_3$, 和 $x_1x_4$。当 $x_1=1$ 且 $x_2, x_3, x_4$ 至少有一个为1时，这些项覆盖了所有为真的最小项。\n\n情况 $x_1=0$：不等式变为 $x_{2}+x_{3}+x_{4}\\ge 3$，这意味着 $x_{2}=x_{3}=x_{4}=1$。这对应于最小项 $x_1'x_2x_3x_4$。这个最小项不能被任何更简单的项（如 $x_2x_3$）所覆盖，因为那些项会错误地包含 $x_1=0$ 时函数值为0的其他情况（例如 $x_1'x_2x_3x_4'$）。因此，质蕴涵项是 $x_2x_3x_4$。\n\n综合两种情况，得到候选的SOP表达式：\n$$\nf=x_{1}x_{2}+x_{1}x_{3}+x_{1}x_{4}+x_{2}x_{3}x_{4}.\n$$\n这个表达式中的每一项都是必需的（即它们都是本质质蕴涵项）：\n- 最小项 $1100$ ($2\\cdot1+1+0+0=3 \\ge 3$) 仅被 $x_1x_2$ 覆盖。\n- 最小项 $1010$ ($2\\cdot1+0+1+0=3 \\ge 3$) 仅被 $x_1x_3$ 覆盖。\n- 最小项 $1001$ ($2\\cdot1+0+0+1=3 \\ge 3$) 仅被 $x_1x_4$ 覆盖。\n- 最小项 $0111$ ($0+1+1+1=3 \\ge 3$) 仅被 $x_2x_3x_4$ 覆盖。\n由于所有质蕴涵项都是本质的，这个SOP表达式是最小且唯一的。", "answer": "$$\\boxed{x_{1}x_{2}+x_{1}x_{3}+x_{1}x_{4}+x_{2}x_{3}x_{4}}$$", "id": "1382082"}]}