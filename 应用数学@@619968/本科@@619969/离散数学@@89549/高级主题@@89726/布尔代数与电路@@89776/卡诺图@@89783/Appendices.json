{"hands_on_practices": [{"introduction": "掌握卡诺图的第一步是学会如何简化最基本的布尔表达式。这个练习提供了一个理想的起点，它要求你处理一个简单的三变量函数。通过识别卡诺图上的相邻“1”并将其组合，你将亲身体验如何消除一个变量，从而将逻辑表达式简化为最简形式。这个过程是数字逻辑设计中从功能需求转向高效电路实现的核心技能。[@problem_id:1379353]", "problem": "一个数字逻辑电路正在设计中，其有三个输入变量，表示为 $X$、$Y$ 和 $Z$。该电路的输出 $F(X,Y,Z)$ 最初被定义为对于所有可能的输入组合，其值始终为0。根据一项新规范，输出必须修改为仅在对应于最小项 $m_2$（二进制010）和 $m_6$（二进制110）的输入组合时为1。在此约定中，$X$ 是最高有效位，$Z$ 是最低有效位。\n\n使用卡诺图 (K-map)，一种用于简化布尔代数表达式的图形方法，确定输出函数 $F(X,Y,Z)$ 的最小乘积和 (SOP) 形式的简化布尔表达式。", "solution": "函数被指定仅在最小项 $m_{2}$ 和 $m_{6}$ 处为1，其中变量为 $(X,Y,Z)$ 且 $X$ 为最高有效位。将最小项转换为乘积项：\n- $m_{2}$ 对应于 $(0,1,0)$，因此其乘积项为 $\\overline{X}Y\\overline{Z}$。\n- $m_{6}$ 对应于 $(1,1,0)$，因此其乘积项为 $XY\\overline{Z}$。\n\n因此，规范乘积和 (SOP) 为\n$$F(X,Y,Z)=\\overline{X}Y\\overline{Z}+XY\\overline{Z}.$$\n\n使用布尔代数（分配律）提取公共因子，\n$$F=Y\\overline{Z}(\\overline{X}+X).$$\n\n根据互补律 $\\overline{X}+X=1$，我们得到\n$$F=Y\\overline{Z}.$$\n\n通过卡诺图来解释：位于 $m_{2}$ 和 $m_{6}$ 处的1在 $X$ 维度上是相邻的，因此它们形成一个大小为2的组合，从而消去了变量 $X$ 并保留了 $Y=1$ 和 $Z=0$ 的条件，得到相同的最小乘积和 $Y\\overline{Z}$。", "answer": "$$\\boxed{Y\\overline{Z}}$$", "id": "1379353"}, {"introduction": "在逻辑设计中，能够发现并纠正错误与自己能正确设计同样重要。这个练习将你置于一个“设计审查员”的角色，要求你分析一个已经完成但并非最优的卡诺图简化方案。通过找出为什么所选的“1”组合不是最简的，你将加深对“最大化组合”原则的理解，这是获得最简“积之和”（SOP）形式的关键。这项练习旨在培养批判性思维，确保你不仅知道如何应用规则，更理解其背后的原理。[@problem_id:1379411]", "problem": "一位名叫 Alex 的初级数字逻辑设计师，其任务是将一个4变量布尔函数 $F(A, B, C, D)$ 化简为其最简“积之和”(SOP)形式。该函数由其输出为真的最小项定义：$F(A, B, C, D) = \\sum m(0, 2, 5, 7, 8, 10, 13, 15)$。\n\nAlex 使用了一个卡诺图 (K-map)，其中行对应变量 AB 按格雷码顺序 (00, 01, 11, 10) 的取值，列对应变量 CD 也按格雷码顺序 (00, 01, 11, 10) 的取值。在对值为1的项进行分组后，Alex 得到了一个由以下三个乘积项导出的“积之和”表达式：\n- $P_1 = BD$\n- $P_2 = A'B'D'$\n- $P_3 = AB'D'$\n\n提出的化简后函数是 $F_{Alex} = BD + A'B'D' + AB'D'$。经检查后，你发现这个表达式并非最简“积之和”形式。下列哪项陈述最好地解释了为什么 Alex 的结果不是最简的？\n\nA. 乘积项 $BD$ 是无效的，因为卡诺图分组不能包含超过两个1，除非它们覆盖了整行或整列。\nB. 对应于乘积项 $A'B'D'$ 和 $AB'D'$ 的分组应该被合并成一个更大的单一分组。\nC. 不可能仅用三个分组就覆盖所有指定的最小项；至少需要四个分组。\nD. 产生乘积项 $BD$ 的分组是冗余的，因为它的所有最小项都已经被其他本质主蕴含项所覆盖。\nE. 应该使用“和之积”(POS)化简法，因为0的数量等于1的数量。", "solution": "给定函数 $F(A,B,C,D)=\\sum m(0,2,5,7,8,10,13,15)$ 以及 Alex 根据卡诺图分组提出的方案 $F_{Alex}=BD+A'B'D'+AB'D'$。\n\n首先，验证 Alex 的乘积项对最小项的覆盖情况：\n- $BD$ 对应 $B=1$ 和 $D=1$，而 $A$ 和 $C$ 是自由变量。这覆盖了最小项 $m5\\,(0101)$、$m7\\,(0111)$、$m13\\,(1101)$ 和 $m15\\,(1111)$，所有这些都在给定的集合中。\n- $A'B'D'$ 对应 $A=0$、$B=0$、$D=0$，而 $C$ 是自由变量，覆盖了 $m0\\,(0000)$ 和 $m2\\,(0010)$。\n- $AB'D'$ 对应 $A=1$、$B=0$、$D=0$，而 $C$ 是自由变量，覆盖了 $m8\\,(1000)$ 和 $m10\\,(1010)$。\n\n因此，$F_{Alex}$ 确实恰好覆盖了所有指定的最小项。然而，这个表达式不是最简的。使用布尔代数合并仅在变量 $A$ 上有差异的项：\n$$\nA'B'D' + AB'D' = (A' + A)B'D' = 1\\cdot B'D' = B'D'.\n$$\n因此，\n$$\nF_{Alex} = BD + A'B'D' + AB'D' = BD + B'D'.\n$$\n从卡诺图的角度来看，对应于 $A'B'D'$ 和 $AB'D'$ 的两个分组应合并成一个包含四个单元格的更大分组，从而得到 $B'D'$。剩下的分组 $BD$ 已经是一个包含四个单元格的最大分组。因此，最简“积之和”形式为 $F=BD+B'D'$，与 Alex 的表达式相比，它使用了更少的乘积项和更少的字面量。\n\n因此，最好的解释是，用于 $A'B'D'$ 和 $AB'D'$ 的分组本应合并成一个，得到 $B'D'$。", "answer": "$$\\boxed{B}$$", "id": "1379411"}, {"introduction": "从理论走向实践，我们将探讨一个更贴近真实世界工程挑战的高级问题。在复杂的数字系统中，通常需要同时实现多个功能，而这正是可编程逻辑阵列（PLA）等器件的用武之地。这个练习要求你为三个独立的布尔函数寻找一个共享的、最小化的乘积项集合，从而优化整个系统的资源使用。通过解决这个问题，你将学会如何进行多输出逻辑优化，这是实现高效、低成本集成电路设计的关键一步。[@problem_id:1379385]", "problem": "在设计定制的专用集成电路（ASIC）时，一个逻辑综合工具的任务是优化一组将在可编程逻辑阵列（PLA）上实现的布尔函数。PLA是一种可编程逻辑器件，具有可编程的与平面和可编程的或平面。为了最小化芯片面积，关键在于找到实现所有输出函数可以共享的唯一乘积项（与平面的输出）的最小数量。\n\n给定一个由三个3变量布尔函数 $F_1, F_2, F_3$ 组成的系统，其输入变量为 $A, B, C$。这些函数由其开集（使函数为真的最小项集合）指定：\n- $F_1(A,B,C) = \\sum m(2, 3, 5, 7)$\n- $F_2(A,B,C) = \\sum m(3, 5, 6, 7)$\n- $F_3(A,B,C) = \\sum m(0, 1, 2, 6)$\n\n你的任务是确定同时实现这三个函数所需的最小乘积项集合。基于这个最小集合，从下面的选项中选择正确的PLA编程表。\n\nPLA表的结构如下：\n- `Term`（乘积项）列列出了每个唯一乘积项的逻辑表达式。\n- `A`、`B`、`C` 列描述了与平面的编程。`1` 表示变量以原形式包含，`0` 表示其补形式（例如 $A'$），而 `-`（破折号）表示该变量不在此项中。\n- `F1`、`F2`、`F3` 列描述了或平面的编程。`1` 表示该行的乘积项包含在该函数的积之和表达式中。`.`（点）表示不包含。\n\n以下哪个表代表了最小的正确实现？\n\n**A.**\n| 乘积项 | A | B | C | F1| F2| F3|\n|:----:|:-:|:-:|:-:|:-:|:-:|:-:|\n| $A'B$ | 0 | 1 | - | 1 | . | . |\n| $AC$ | 1 | - | 1 | 1 | 1 | . |\n| $AB$ | 1 | 1 | - | . | 1 | . |\n| $BC$ | - | 1 | 1 | . | 1 | . |\n| $A'B'$| 0 | 0 | - | . | . | 1 |\n| $BC'$ | - | 1 | 0 | . | . | 1 |\n\n**B.**\n| 乘积项 | A | B | C | F1| F2| F3|\n|:----:|:-:|:-:|:-:|:-:|:-:|:-:|\n| $A'B'$| 0 | 0 | - | . | . | 1 |\n| $BC'$ | - | 1 | 0 | 1 | . | 1 |\n| $BC$ | - | 1 | 1 | 1 | 1 | . |\n| $AC$ | 1 | - | 1 | 1 | 1 | . |\n| $AB$ | 1 | 1 | - | . | 1 | . |\n\n**C.**\n| 乘积项 | A | B | C | F1| F2| F3|\n|:----:|:-:|:-:|:-:|:-:|:-:|:-:|\n| $A'B$ | 0 | 1 | - | 1 | 1 | . |\n| $AC$ | 1 | - | 1 | 1 | 1 | 1 |\n| $AB$ | 1 | 1 | - | . | 1 | . |\n| $BC$ | - | 1 | 1 | . | 1 | . |\n| $A'B'$| 0 | 0 | - | . | . | 1 |\n| $BC'$ | - | 1 | 0 | . | . | 1 |\n\n**D.**\n| 乘积项 | A | B | C | F1| F2| F3|\n|:----:|:-:|:-:|:-:|:-:|:-:|:-:|\n| $A'B$ | 0 | 1 | - | 1 | . | . |\n| $AC$ | 1 | - | 1 | 1 | . | . |\n| $AB$ | 1 | 1 | - | . | 1 | . |\n| $BC$ | - | 1 | 1 | . | 1 | . |\n| $AC_2$| 1 | - | 1 | . | 1 | . |\n| $A'B'$| 0 | 0 | - | . | . | 1 |\n| $BC'$ | - | 1 | 0 | . | . | 1 |", "solution": "我们首先使用标准索引 $m(A,B,C)=4A+2B+C$ 将每个开集转换为二进制最小项：\n$$\n\\begin{aligned}\nF_{1}&:\\{2,3,5,7\\}=\\{010,011,101,111\\},\\\\\nF_{2}&:\\{3,5,6,7\\}=\\{011,101,110,111\\},\\\\\nF_{3}&:\\{0,1,2,6\\}=\\{000,001,010,110\\}.\n\\end{aligned}\n$$\n\n通过质蕴含项分组，单独最小化每个函数。\n\n对于 $F_{1}$，对相邻的最小项进行分组：\n- $010$ 和 $011$ 合并为 $A'B$。\n- $101$ 和 $111$ 合并为 $AC$。\n因此，一个最小SOP（积之和）表达式为\n$$\nF_{1}=A'B+AC.\n$$\n没有更大的蕴含项可以替代 $A'B$ 而不同时覆盖 $110$（$F_{1}$ 的关项），也没有更大的蕴含项可以替代 $AC$ 而不同时覆盖 $100$ 或 $001$（均为 $F_{1}$ 的关项），因此这两项都是必要的。\n\n对于 $F_{2}$，其开集的四个最小项是围绕 $111$ 的三个相邻项加上 $111$ 本身。三个质蕴含项是：\n- $011$ 和 $111$ 合并为 $BC$。\n- $101$ 和 $111$ 合并为 $AC$。\n- $110$ 和 $111$ 合并为 $AB$。\n$\\{AB,AC,BC\\}$ 中的任意两项都会遗漏一个所需的最小项，因此最小覆盖为\n$$\nF_{2}=AB+AC+BC.\n$$\n\n对于 $F_{3}$，对相邻的最小项进行分组：\n- $000$ 和 $001$ 合并为 $A'B'$。\n- $010$ 和 $110$ 合并为 $BC'$。\n因此，一个最小SOP表达式为\n$$\nF_{3}=A'B'+BC'.\n$$\n\n收集所有三个最小化表达式所需的唯一乘积项：\n$$\n\\{A'B,\\ AC,\\ AB,\\ BC,\\ A'B',\\ BC'\\}.\n$$\n这总共有 $6$ 个乘积项。我们现在论证少于 $6$ 个唯一项是不可能的。仅函数 $F_{2}$ 就需要至少 $3$ 个不同的双文字蕴含项 $\\{AB,AC,BC\\}$；$F_{3}$ 需要至少 $2$ 个不同的蕴含项（例如 $A'B'$ 和 $BC'$）以避免激活关项。对于 $F_{1}$，最小项 $010$ 无法被 $\\{AB,AC,BC,A'B',BC'\\}$ 中的任何一项正确覆盖而不同时错误地覆盖 $110$（例如，$BC'$ 同时覆盖了 $010$ 和 $110$），因此额外需要 $A'B$。由于 $AC$ 已经包含在 $F_{2}$ 的项中，$F_{1}$ 在这些项之外只需要再增加一个唯一项，从而得出一个下界 $3+2+1=6$ 个唯一乘积项。因此，$6$ 是最小数量。\n\n最后，我们将其与给定的PLA表进行匹配。最小集和正确的或平面连接是：\n- $F_{1}=A'B+AC$,\n- $F_{2}=AB+AC+BC$,\n- $F_{3}=A'B'+BC'$,\n这与选项A完全匹配。选项B和C将乘积项连接到输出的方式会产生不正确的最小项（例如，B中的 $F_{1}$ 包含了 $BC'$ 和 $BC$，结果产生 $B$ 并激活了 $110$；C将 $A'B$ 连接到 $F_{2}$ 并将 $AC$ 连接到 $F_{3}$，两者都是不正确的）。选项D将 $AC$ 复制为一个单独的行，使总数增加到 $7$，因此不是最小的。\n\n因此，最小的正确实现是A。", "answer": "$$\\boxed{A}$$", "id": "1379385"}]}