{"hands_on_practices": [{"introduction": "理论学习之后，最好的消化方式便是动手实践。第一个练习旨在帮助你直观地理解 Dilworth 定理的核心思想。我们将通过一个简单的系统配置场景，构建一个偏序集。在这个具体的例子中，你可以轻松地识别出链和反链，并通过直接构造来找到最大反链和最小链划分，从而亲手验证定理的对偶关系。[@problem_id:1363688]", "id": "1363688", "problem": "考虑一个由两个独立组件（组件1和组件2）组成的系统。每个组件的运行状态可以设置为三个等级之一：低（L）、中（M）或高（H）。系统的一个完整配置由一个有序对 $(s_1, s_2)$ 描述，其中 $s_1$ 是组件1的状态，$s_2$ 是组件2的状态。\n\n所有可能配置的集合构成一个偏序集。该序是基于状态的自然递进关系定义的，我们定义 L < M < H。一个配置 $C_a = (s_{a1}, s_{a2})$ 被认为“小于等于”另一个配置 $C_b = (s_{b1}, s_{b2})$（记作 $C_a \\preceq C_b$），当且仅当根据状态排序规则有 $s_{a1} \\le s_{b1}$ 和 $s_{a2} \\le s_{b2}$。\n\n在这个偏序集中：\n- **链** 是配置的一个子集，其中对于子集中的任意两个配置，一个小于等于另一个。\n- **反链** 是配置的一个子集，其中任意两个不同的配置都不可比（即，对于子集中的任意两个不同配置 $C_x$ 和 $C_y$，既不是 $C_x \\preceq C_y$ 也不是 $C_y \\preceq C_x$）。\n\n您的任务是确定该系统配置偏序集的两个值：\n1. 最大反链的大小（即包含元素数量最多的反链）。\n2. 最小链划分的大小（即将整个配置集划分为最少数量的不相交链的划分）。", "solution": "我们通过映射 $L \\mapsto 0$，$M \\mapsto 1$ 和 $H \\mapsto 2$ 来形式化这些状态。那么，配置的偏序集为 $P=\\{0,1,2\\}\\times\\{0,1,2\\}$，其上的乘积序定义为：$(i,j)\\preceq (i',j')$ 当且仅当 $i\\leq i'$ 且 $j\\leq j'$。\n\n为了确定反链大小的上限，设 $A\\subseteq P$ 是一个反链。第一个坐标只有 $3$ 个可能的值，因此如果 $|A|\\geq 4$，根据鸽巢原理，必定存在 $A$ 中两个不同的元素具有相同的第一个坐标，记为 $(i,j_{1})$ 和 $(i,j_{2})$。由于 $\\{j_{1},j_{2}\\}\\subseteq\\{0,1,2\\}$ 且 $j_{1}\\neq j_{2}$，必然有 $j_{1}<j_{2}$ 或 $j_{2}<j_{1}$，这使得这两个元素是可比的，与 $A$ 是一个反链的假设相矛盾。因此，任何反链的大小最多为 $3$。\n\n为了证明这个界是紧的，考虑集合 $\\{(0,2),(1,1),(2,0)\\}$。对于该集合中任意两个不同的元素，其中一个的第一个坐标比另一个小，而第二个坐标比另一个大，因此任意两个元素都不可比。因此，存在一个大小为 $3$ 的反链，最大反链的大小恰好为 $3$。\n\n对于链划分，在 $P$ 的任何到链的划分中，每条链最多包含任何一个反链中的一个元素。因此，任何链划分中的链数至少是最大反链的大小，即 $3$。\n\n为了证明 $3$ 条链是足够的，我们构造一个显式的划分为 $3$ 条链：\n- $C_{1}: (0,0)\\preceq(0,1)\\preceq(0,2)$,\n- $C_{2}: (1,0)\\preceq(1,1)\\preceq(1,2)$,\n- $C_{3}: (2,0)\\preceq(2,1)\\preceq(2,2)$.\n这些链是不相交的，并且覆盖了 $P$ 的所有 $9$ 个元素，因此存在一个恰好有 $3$ 条链的链划分。结合下界和上界，最小链划分的大小为 $3$。\n\n因此，最大反链的大小是 $3$，最小链划分的大小也是 $3$。", "answer": "$$\\boxed{\\begin{pmatrix}3 & 3\\end{pmatrix}}$$"}, {"introduction": "掌握了基本概念后，让我们来挑战一个更复杂的问题。这个问题以数论中的整除关系为背景，构建了一个规模更大的偏序集。当穷举法不再适用时，我们需要更巧妙的策略。这个练习将引导你利用偏序集的代数结构（链的直积）和秩函数（rank function）的概念，通过计算来确定最大反链的大小，进而根据 Dilworth 定理推断出最小链划分数，这展示了理论在解决复杂问题时的威力。[@problem_id:1363660]", "id": "1363660", "problem": "偏序集 (partially ordered set, or poset) 是一个偶对 $(S, R)$，其中 $S$ 是一个集合，$R$ 是 $S$ 上的一个二元关系，该关系是自反的、反对称的和传递的。偏序集的一个经典例子是正整数集合与“整除”关系。\n\n如果对于 $S$ 的任意子集 $C$ 中的任意两个不同元素 $x, y \\in C$，要么 $x$ 与 $y$ 相关，要么 $y$ 与 $x$ 相关（即，$C$ 中的所有元素都相互可比），那么 $C$ 被称为一个链 (chain)。集合 $S$ 的一个划分 (partition) 是 $S$ 的一组非空、不相交的子集，其并集为 $S$。\n\n考虑集合 $D$，它包含数字 $360$ 的所有正整数因子。设该集合由整除关系排序，记作 $|$，其中 $a|b$ 意为“$a$ 整除 $b$”。这就构成了偏序集 $(D, |)$。\n\n将集合 $D$ 划分所需的最少链数是多少？", "solution": "我们将 $360$ 分解质因数为 $360=2^{3}\\cdot 3^{2}\\cdot 5^{1}$。每个因子 $d\\in D$ 唯一对应一个指数向量 $(i,j,k)$，其中 $0\\leq i\\leq 3$，$0\\leq j\\leq 2$，$0\\leq k\\leq 1$，使得 $d=2^{i}3^{j}5^{k}$。整除关系对应于这些指数向量上的积序：$(i,j,k)\\leq (i',j',k')$ 当且仅当 $i\\leq i'$，$j\\leq j'$ 且 $k\\leq k'$。因此，$(D,|)$ 与链的积 $C_{4}\\times C_{3}\\times C_{2}$同构。\n\n根据 Dilworth 定理，划分一个有限偏序集的最小链数等于其宽度（最大反链的大小）。因此，我们只需计算 $(D,|)$ 中最大反链的大小。\n\n定义一个秩函数 $r(i,j,k)=i+j+k$。对于任意固定的 $t$，层 $L_{t}=\\{(i,j,k):i+j+k=t\\}$ 是一个反链：如果 $(i,j,k)\\leq (i',j',k')$ 且 $i+j+k=i'+j'+k'$，那么和相等的逐坐标不等式将迫使 $(i,j,k)=(i',j',k')$。$L_{t}$ 的大小等于生成函数\n$$\n(1+x+x^{2}+x^{3})(1+x+x^{2})(1+x).\n$$\n中 $x^{t}$ 的系数。\n我们逐步计算这个乘积。首先，\n$$\n(1+x+x^{2})(1+x)=1+2x+2x^{2}+x^{3}.\n$$\n然后\n\\begin{align*}\n(1+x+x^{2}+x^{3})(1+2x+2x^{2}+x^{3})\n&=1(1+2x+2x^{2}+x^{3})\\\\\n&\\quad +x(1+2x+2x^{2}+x^{3})\\\\\n&\\quad +x^{2}(1+2x+2x^{2}+x^{3})\\\\\n&\\quad +x^{3}(1+2x+2x^{2}+x^{3})\\\\\n&=1+3x+5x^{2}+6x^{3}+5x^{4}+3x^{5}+x^{6}.\n\\end{align*}\n因此，各层的大小分别为 $1,3,5,6,5,3,1$，其中最大的是 $6$。所以，$(D,|)$ 的宽度为 $6$，根据 Dilworth 定理，划分 $D$ 所需的最小链数为 $6$。", "answer": "$$\\boxed{6}$$"}, {"introduction": "Dilworth 定理不仅是组合数学中的优美结论，在计算机科学等领域也有着重要的应用。最后一个练习将带你进入软件工程的真实场景——任务依赖与调度。你会发现，一个无环依赖图（DAG）的调度问题可以完全对应到一个偏序集上，其中“可并行处理的任务集”就是反链，而“构建序列”则对应于路径（一种特殊的链）。这个问题清晰地揭示了 Dilworth 定理是如何将寻找最大并行度（最大反链）和优化任务流（最小路径覆盖）这两个核心问题联系起来的。[@problem_id:1481071]", "id": "1481071", "problem": "在开发一个复杂的科学软件时，构建系统必须管理不同模块之间的依赖关系。如果模块 `B` 必须在模块 `A` 开始编译之前成功编译，则称模块 `A` 对模块 `B` 有直接依赖关系。这种依赖关系是可传递的：如果 `A` 依赖于 `B`，`B` 依赖于 `C`，那么也认为 `A` 依赖于 `C`。系统保证没有循环依赖。\n\n考虑一个包含八个模块的系统：`M1, M2, M3, M4, M5, M6, M7, M8`。直接依赖关系如下：\n- `M2` 依赖于 `M1`\n- `M3` 依赖于 `M1`\n- `M4` 依赖于 `M2`\n- `M4` 依赖于 `M3`\n- `M5` 依赖于 `M3`\n- `M6` 依赖于 `M4`\n- `M7` 依赖于 `M5`\n- `M8` 依赖于 `M6`\n- `M8` 依赖于 `M7`\n\n我们对优化构建过程的两个关键指标感兴趣。\n\n首先，“并行工作负载”是一组模块的集合，其中集合内的任何模块都不（直接或间接）依赖于同一集合中的任何其他模块。这代表了一组原则上可以同时编译的模块。令 `P` 为最大可能并行工作负载的大小。\n\n其次，“构建序列”是一个模块序列 `(m_1, m_2, ..., m_k)`，其中每个模块 `m_{i+1}` 都直接依赖于其前一个模块 `m_i`。要构建整个系统，我们可以将所有八个模块划分成若干个这样的构建序列。令 `C` 为划分并覆盖所有八个模块所需的构建序列的最小数量。\n\n计算表达式 `8P + 11C` 的值。", "solution": "将给定的依赖数据解释为一个有向无环图，其顶点是模块，其边从前置模块指向依赖模块。这些边是\n$$\nM1 \\to M2,\\quad M1 \\to M3,\\quad M2 \\to M4,\\quad M3 \\to M4,\\quad M3 \\to M5,\\quad M4 \\to M6,\\quad M5 \\to M7,\\quad M6 \\to M8,\\quad M7 \\to M8.\n$$\n当且仅当 `y` 对 `x` 存在（可能是传递的）依赖关系时，定义一个偏序关系 $x \\prec y$。并行工作负载是此偏序集中的一个反链；其最大大小即为宽度 $P$。\n\n为了确定 $P$ 的上界，我们将模块划分为两条关于关系 $\\prec$ 的链：\n- 链 $C_{1}$：$M1 \\prec M3 \\prec M5 \\prec M7 \\prec M8$（所有关系都由直接依赖给出）。\n- 链 $C_{2}$：$M2 \\prec M4 \\prec M6$（同样都是直接依赖）。\n这两个链不相交且覆盖了所有八个模块，因此根据 Dilworth 定理，宽度满足 $P \\leq 2$。存在一个大小为2的反链，例如 $\\{M2, M3\\}$ （两者互不依赖），所以 $P \\geq 2$。因此\n$$\nP = 2.\n$$\n\n接下来，构建序列是沿着直接依赖边的一条有向路径。将所有模块划分为最小数量的此类序列是此 DAG 中的最小路径覆盖问题；将这个最小数量记为 $C$。\n\n我们给出一个包含两个序列的覆盖：\n- $(M1, M3, M5, M7, M8)$ 使用了边 $M1 \\to M3 \\to M5 \\to M7 \\to M8$。\n- $(M2, M4, M6)$ 使用了边 $M2 \\to M4 \\to M6$。\n因此 $C \\leq 2$。不可能 $C = 1$，因为这需要一条同时包含 `M2` 和 `M3` 的单一有向路径。然而，`M2` 和 `M3` 之间双向均无直接边，并且图结构决定了如果没有这样的边，就不可能将它们包含在同一条有向路径中。因此\n$$\nC = 2.\n$$\n\n最后，计算\n$$\n8P + 11C = 8 \\cdot 2 + 11 \\cdot 2 = 16 + 22 = 38.\n$$", "answer": "$$\\boxed{38}$$"}]}