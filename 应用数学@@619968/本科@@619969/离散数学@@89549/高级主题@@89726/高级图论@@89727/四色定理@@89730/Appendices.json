{"hands_on_practices": [{"introduction": "我们首先来探讨为何“四”这个数字如此特殊。这个练习将引导你构思一个无法用三种颜色完成着色的简单地图，从而让你直观地理解为何四色是必要的[@problem_id:1407441]。通过这个具体案例，你可以亲自验证为何四色定理的下限是四，而不是三。", "problem": "一位平面设计师受托为一家新成立的环境联盟设计一个标志，该联盟由四个组织组成：一个森林组织（F）、一个海洋组织（O）、一个山脉组织（M）和一个沙漠组织（D）。设计纲要规定，标志必须由四个不同的、相互毗连的区域组成，每个组织一个区域。一个关键的约束条件是，每个组织的区域都必须与其他三个区域相邻，以象征它们相互关联和协作的性质。为了区分这些区域，它们必须用不同的颜色填充。根据着色规则，任何两个相邻区域都必须使用不同的颜色。根据这些规范，设计师完成这个标志所需的最少颜色数量是多少？", "solution": "将标志建模为一个平面地图，并将其邻接关系建模为一个图：为每个区域 $F, O, M, D$ 分配一个顶点，如果相应的区域共享一个边界段，则用一条边连接两个顶点。每个区域都与另外三个区域相邻的要求意味着邻接图是四顶点的完全图，即 $G \\cong K_{4}$。\n\n标志的有效着色对应于图 $G$ 的一个正常顶点着色，即为顶点分配颜色，使得相邻的顶点获得不同的颜色。所需的最少颜色数量是色数 $\\chi(G)$。\n\n由于 $G \\cong K_{4}$ 有一个大小为 $4$ 的团，其团数是 $\\omega(G)=4$，因此\n$$\n\\chi(G) \\geq \\omega(G) = 4.\n$$\n这个下界也可以直接看出：如果只用 $3$ 种颜色对 $4$ 个区域进行着色，根据鸽巢原理，会有两个区域共享同一种颜色；但是在 $K_{4}$ 中，任意一对区域都是相邻的，所以任何两个颜色相同的区域都会违反邻接规则。因此，至少需要 $4$ 种颜色。\n\n反之，$4$ 种颜色是足够的，只需为四个相互邻接的区域各自分配一种不同的颜色，即可得到一个正常着色。因此\n$$\n\\chi(K_{4})=4.\n$$\n\n所以，所需的最少颜色数量为 $4$。", "answer": "$$\\boxed{4}$$", "id": "1407441"}, {"introduction": "四色定理的证明对象并非地理地图本身，而是被称为“平面图”的数学结构。这个练习将指导你完成一个关键的转换过程：将一个给定的地图转化为其“对偶图”，这是图论学家实际分析的对象[@problem_id:1541737]。掌握这一转换是理解定理证明和应用的核心步骤。", "problem": "在图论中，地理地图可以被建模为一个平面图。一个重要的相关结构是对偶图。对于一个给定的地图，其对偶图的构建方法是：为地图的每个区域（包括无界的外部区域）创建一个顶点，并且当且仅当两个对应的区域有公共边界时，在这两个顶点之间添加一条边。\n\n考虑一个虚构的岛屿 Cartographia，它被 Great Ocean 所环绕。该岛屿被划分为六个国家：Aethelgard、Brynnland、Cyrendale、Drakenheim、Eldoria 和 Faelands。其布局由各国之间的共享边界描述如下：\n- Aethelgard 与 Brynnland 和 Faelands 共享边界。\n- Brynnland 与 Aethelgard 和 Cyrendale 共享边界。\n- Cyrendale 与 Brynnland 和 Drakenheim 共享边界。\n- Drakenheim 是一个内陆国，其所有边界都与 Cyrendale、Eldoria 和 Faelands 接壤。\n- Eldoria 与 Drakenheim 和 Faelands 共享边界。\n- Faelands 与 Aethelgard、Drakenheim 和 Eldoria 共享边界。\n\n所有未被指定为内陆国的国家都是沿海国家，这意味着它们都与周围的 Great Ocean 共享边界。\n\nCartographia 地图的对偶图中的总边数是多少？", "solution": "问题要求计算给定地图的对偶图中的总边数。根据所提供的定义，对偶图的顶点对应于地图的区域，而对偶图的边则对应于这些区域之间的共享边界。因此，要找到对偶图中的总边数，我们需要计算地图上边界段的总数。\n\n首先，让我们确定地图上的所有区域。有六个国家和一个外部区域：\n1.  Aethelgard (A)\n2.  Brynnland (B)\n3.  Cyrendale (C)\n4.  Drakenheim (D)\n5.  Eldoria (E)\n6.  Faelands (F)\n7.  Great Ocean (O)\n\n这7个区域将成为对偶图的顶点。\n\n接下来，我们计算边界的数量。我们可以将边界分为两类：内部边界（两国之间）和海岸边界（一国与 Great Ocean 之间）。\n\n让我们通过系统地梳理描述来列出内部边界。我们只列出每对相邻国家一次。\n1.  Aethelgard 和 Brynnland 之间的边界：1条边。\n2.  Aethelgard 和 Faelands 之间的边界：1条边。\n3.  Brynnland 和 Cyrendale 之间的边界：1条边。（与 Aethelgard 的边界已经计算在内）。\n4.  Cyrendale 和 Drakenheim 之间的边界：1条边。（与 Brynnland 的边界已经计算在内）。\n5.  Drakenheim 和 Eldoria 之间的边界：1条边。（与 Cyrendale 的边界已经计算在内）。\n6.  Drakenheim 和 Faelands 之间的边界：1条边。\n7.  Eldoria 和 Faelands 之间的边界：1条边。（与 Drakenheim 的边界已经计算在内）。\n\n我们来验证一下是否遗漏了描述中的任何边界。\n- A 与 B, F 接壤：已计算。\n- B 与 A, C 接壤：已计算。\n- C 与 B, D 接壤：已计算。\n- D 与 C, E, F 接壤：已计算。\n- E 与 D, F 接壤：已计算。\n- F 与 A, D, E 接壤：已计算。\n内部边界的总数是7。\n\n现在，我们来计算海岸边界。问题说明，所有未被指定为内陆国的国家都是沿海国家。Drakenheim被明确指出是内陆国。因此，沿海国家是 Aethelgard、Brynnland、Cyrendale、Eldoria 和 Faelands。这5个国家中的每一个都与 Great Ocean 共享一条边界。\n1.  Aethelgard 和 Ocean 之间的边界：1条边。\n2.  Brynnland 和 Ocean 之间的边界：1条边。\n3.  Cyrendale 和 Ocean 之间的边界：1条边。\n4.  Eldoria 和 Ocean 之间的边界：1条边。\n5.  Faelands 和 Ocean 之间的边界：1条边。\n海岸边界的总数是5。\n\n对偶图中的总边数是内部边界和海岸边界的总和。\n总边数 = (内部边界数) + (海岸边界数)\n总边数 = $7 + 5 = 12$。\n\n作为检验，我们可以对对偶图使用握手引理。对偶图中一个顶点的度是地图上与相应区域相邻的区域数量。\n- $\\deg(A) = $ 与 B, F, O 的边界 = 3。\n- $\\deg(B) = $ 与 A, C, O 的边界 = 3。\n- $\\deg(C) = $ 与 B, D, O 的边界 = 3。\n- $\\deg(D) = $ 与 C, E, F 的边界 = 3。\n- $\\deg(E) = $ 与 D, F, O 的边界 = 3。\n- $\\deg(F) = $ 与 A, D, E, O 的边界 = 4。\n- $\\deg(O) = $ 与 A, B, C, E, F 的边界 = 5。\n度的总和是 $3 + 3 + 3 + 3 + 3 + 4 + 5 = 24$。\n根据握手引理，度的总和是边数的两倍（$2|E|$）。\n$2|E| = 24$，所以 $|E| = 12$。\n结果得到证实。", "answer": "$$\\boxed{12}$$", "id": "1541737"}, {"introduction": "四色定理保证了任何平面图都*存在*一个四色染色方案，但这并不意味着寻找方案的过程很简单。本练习将揭示一个关键点：即使对于一个已知的可四色图，一个简单直观的“贪心”算法也可能在特定条件下“犯错”，并使用超过四种颜色[@problem_id:1407388]。这个思想实验揭示了定理优雅结论背后所隐藏的算法复杂性。", "problem": "在图论研究中，四色定理保证任何平面图都可以用至多四种颜色进行着色，使得没有两个相邻顶点共享相同的颜色。然而，找到这样一种着色并非总是直接的。简单的算法，如贪心着色算法，有时可能无法找到最优着色，并可能使用比必要数量更多的颜色。\n\n本题探讨了这样一种情景。考虑一个平面图 $G=(V, E)$，其顶点集为 $V = \\{a_1, a_2, a_3, b_1, b_2, b_3, c, d\\}$。边集 $E$ 由以下邻接关系定义：\n- 顶点 $\\{a_1, a_2, a_3\\}$ 构成一个完全子图（一个三角形）。\n- 顶点 $\\{b_1, b_2, b_3\\}$ 构成一个完全子图（一个三角形）。\n- 顶点 $c$ 与 $a_1, a_2,$ 和 $a_3$ 相邻。\n- 顶点 $d$ 与 $b_1, b_2,$ 和 $b_3$ 相邻。\n- 顶点 $c$ 与顶点 $d$ 相邻。\n\n一个贪心着色算法被应用于此图。该算法按照指定的顺序依次处理顶点。对于每个顶点，它会分配一个尚未被其任何已着色邻居使用的最小正整数（代表颜色索引，例如 1, 2, 3, ...）。\n\n顶点按以下特定顺序处理：\n$a_1, b_1, a_2, b_2, a_3, b_3, c, d$\n\n你的任务是确定该算法分配给序列中最后一个顶点 $d$ 的颜色索引。", "solution": "问题要求我们找出贪心着色算法分配给顶点 $d$ 的颜色索引。我们将按照给定的顶点顺序 $a_1, b_1, a_2, b_2, a_3, b_3, c, d$ 一步步模拟该算法。颜色由最小的可用正整数 $\\{1, 2, 3, \\ldots\\}$ 表示。令 $c(v)$ 表示分配给顶点 $v$ 的颜色。\n\n1.  **处理 $a_1$**：这是第一个顶点。它没有已着色的邻居。算法分配最小的可用颜色。\n    $c(a_1) = 1$。\n\n2.  **处理 $b_1$**：$b_1$ 的邻居是 $\\{b_2, b_3, d\\}$。这些邻居都尚未着色。算法分配最小的可用颜色。\n    $c(b_1) = 1$。\n\n3.  **处理 $a_2$**：$a_2$ 的邻居是 $\\{a_1, a_3, c\\}$。唯一已着色的邻居是 $a_1$。其邻居已使用的颜色是 $\\{c(a_1)\\} = \\{1\\}$。不在此集合中的最小颜色是 2。\n    $c(a_2) = 2$。\n\n4.  **处理 $b_2$**：$b_2$ 的邻居是 $\\{b_1, b_3, d\\}$。唯一已着色的邻居是 $b_1$。其邻居已使用的颜色是 $\\{c(b_1)\\} = \\{1\\}$。不在此集合中的最小颜色是 2。\n    $c(b_2) = 2$。\n\n5.  **处理 $a_3$**：$a_3$ 的邻居是 $\\{a_1, a_2, c\\}$。已着色的邻居是 $a_1$ 和 $a_2$。这些邻居使用的颜色集合是 $\\{c(a_1), c(a_2)\\} = \\{1, 2\\}$。不在此集合中的最小颜色是 3。\n    $c(a_3) = 3$。\n\n6.  **处理 $b_3$**：$b_3$ 的邻居是 $\\{b_1, b_2, d\\}$。已着色的邻居是 $b_1$ 和 $b_2$。这些邻居使用的颜色集合是 $\\{c(b_1), c(b_2)\\} = \\{1, 2\\}$。不在此集合中的最小颜色是 3。\n    $c(b_3) = 3$。\n\n7.  **处理 $c$**：$c$ 的邻居是 $\\{a_1, a_2, a_3, d\\}$。已着色的邻居是 $a_1, a_2,$ 和 $a_3$。这些邻居使用的颜色集合是 $\\{c(a_1), c(a_2), c(a_3)\\} = \\{1, 2, 3\\}$。不在此集合中的最小颜色是 4。\n    $c(c) = 4$。\n\n8.  **处理 $d$**：这是最后一个顶点。$d$ 的邻居是 $\\{b_1, b_2, b_3, c\\}$。所有这些邻居都已在前面的步骤中着色。其邻居使用的颜色集合是 $\\{c(b_1), c(b_2), c(b_3), c(c)\\} = \\{1, 2, 3, 4\\}$。不在此集合中的最小正整数是 5。因此，算法必须分配一种新颜色。\n    $c(d) = 5$。\n\n分配给最后一个顶点 $d$ 的颜色索引是 5。这表明，尽管该图是 4-可着色的（这是一个由四色定理保证的事实，因为它是平面图，并且可以独立验证），但贪心算法的这种特定应用导致了 5-着色。", "answer": "$$\\boxed{5}$$", "id": "1407388"}]}