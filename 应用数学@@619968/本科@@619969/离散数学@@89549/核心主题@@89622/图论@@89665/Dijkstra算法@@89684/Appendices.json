{"hands_on_practices": [{"introduction": "要真正掌握Dijkstra算法，没有什么比亲手执行一遍更有效了。本练习将引导你逐一完成算法的每一步，在一个小而具体的网络中，追踪从源点到各服务器的距离估值如何被迭代更新。通过这个过程，你将对算法的核心机制——选择最小距离节点并“松弛”其邻居——建立起直观而深刻的理解。[@problem_id:1363296]", "id": "1363296", "problem": "一位网络管理员正在分析一个小型数据中心中的路由路径。该网络由六台服务器组成，分别标记为 A、B、C、D、E 和 F。直接相连的服务器之间的延迟（单位为毫秒）由以下无向连接给出：\n- A 到 B: 4\n- A 到 C: 2\n- B 到 C: 5\n- B 到 D: 10\n- C 到 E: 3\n- D 到 E: 4\n- D 到 F: 11\n- E 到 F: 1\n\n从源服务器 A 运行一个标准的单源最短路径算法，以找到到所有其他服务器的最小延迟路径。该算法维护一个从 A 到每个服务器的当前最短路径估计值数组。最初，A 的估计值为 0，所有其他服务器的估计值为无穷大。该算法在所有未确定的服务器中，迭代地确定当前估计值最小的服务器，然后更新其邻居的估计值。\n\n你的任务是追踪这个估计值数组的状态。提供一个由六个数组组成的序列，其中第 k 个数组显示在第 k 个服务器被确定后的即时估计值。在你的答案中，按 (A, B, C, D, E, F) 的顺序列出服务器的估计值。将此数组序列表示为一个矩阵，其中每一行对应一个服务器被确定后的估计值状态。使用符号 `\\infty` 来表示无穷大的估计值。", "solution": "我们从源 $A$ 开始应用 Dijkstra 算法。令 $d(X)$ 表示从 $A$ 到服务器 $X$ 的最短距离的当前估计值。最初，$d(A)=0$ 且 $d(B)=d(C)=d(D)=d(E)=d(F)=\\infty$。在每一步中，确定 $d(\\cdot)$ 值最小的未确定服务器，并对已确定的服务器 $u$ 的每个相邻顶点 $v$ 使用 $d(v) \\leftarrow \\min\\{d(v), d(u)+w(u,v)\\}$ 对其邻居进行松弛操作。\n\n步骤 1：确定 $A$，其 $d(A)=0$。松弛其邻居：\n- $d(B) \\leftarrow \\min(\\infty, 0+4)=4$，\n- $d(C) \\leftarrow \\min(\\infty, 0+2)=2$。\n第一次确定后的状态 (A,B,C,D,E,F)：\n$$\n\\begin{pmatrix}\n0 & 4 & 2 & \\infty & \\infty & \\infty\n\\end{pmatrix}\n$$\n\n步骤 2：确定 $C$，其 $d(C)=2$。松弛其邻居：\n- $d(B) \\leftarrow \\min(4, 2+5)=4$ (无变化)，\n- $d(E) \\leftarrow \\min(\\infty, 2+3)=5$。\n第二次确定后的状态：\n$$\n\\begin{pmatrix}\n0 & 4 & 2 & \\infty & 5 & \\infty\n\\end{pmatrix}\n$$\n\n步骤 3：确定 $B$，其 $d(B)=4$。松弛其邻居：\n- $d(D) \\leftarrow \\min(\\infty, 4+10)=14$。\n第三次确定后的状态：\n$$\n\\begin{pmatrix}\n0 & 4 & 2 & 14 & 5 & \\infty\n\\end{pmatrix}\n$$\n\n步骤 4：确定 $E$，其 $d(E)=5$。松弛其邻居：\n- $d(D) \\leftarrow \\min(14, 5+4)=9$，\n- $d(F) \\leftarrow \\min(\\infty, 5+1)=6$。\n第四次确定后的状态：\n$$\n\\begin{pmatrix}\n0 & 4 & 2 & 9 & 5 & 6\n\\end{pmatrix}\n$$\n\n步骤 5：确定 $F$，其 $d(F)=6$。松弛其邻居：\n- $d(D) \\leftarrow \\min(9, 6+11)=9$ (无变化)。\n第五次确定后的状态：\n$$\n\\begin{pmatrix}\n0 & 4 & 2 & 9 & 5 & 6\n\\end{pmatrix}\n$$\n\n步骤 6：确定 $D$，其 $d(D)=9$。没有进一步的改进。\n第六次确定后的状态：\n$$\n\\begin{pmatrix}\n0 & 4 & 2 & 9 & 5 & 6\n\\end{pmatrix}\n$$\n\n按确定顺序将这六个数组作为行收集起来，得到：\n$$\n\\begin{pmatrix}\n0 & 4 & 2 & \\infty & \\infty & \\infty \\\\\n0 & 4 & 2 & \\infty & 5 & \\infty \\\\\n0 & 4 & 2 & 14 & 5 & \\infty \\\\\n0 & 4 & 2 & 9 & 5 & 6 \\\\\n0 & 4 & 2 & 9 & 5 & 6 \\\\\n0 & 4 & 2 & 9 & 5 & 6\n\\end{pmatrix}\n$$", "answer": "$$\\boxed{\\begin{pmatrix}\n0 & 4 & 2 & \\infty & \\infty & \\infty \\\\\n0 & 4 & 2 & \\infty & 5 & \\infty \\\\\n0 & 4 & 2 & 14 & 5 & \\infty \\\\\n0 & 4 & 2 & 9 & 5 & 6 \\\\\n0 & 4 & 2 & 9 & 5 & 6 \\\\\n0 & 4 & 2 & 9 & 5 & 6\n\\end{pmatrix}}$$"}, {"introduction": "在许多现实场景中，找到一条最短路径固然重要，但了解有多少条同样最优的路径也同样关键。此问题挑战你扩展Dijkstra算法的标准应用，不仅要计算最小成本，还要统计达到该成本的独立路径数量。这需要你修改算法的松弛步骤以处理路径长度相等的情况，从而揭示该算法在解决更复杂问题时的适应性和强大功能。[@problem_id:1363329]", "id": "1363329", "problem": "一家新的无人机配送公司正在一个城市中建立网络。该网络由几个枢纽组成，这些枢纽通过单向飞行路径相连。穿越每条路径的成本以抽象的“能量单位”来衡量。这些枢纽是一个始发仓库 (S)、一个终点枢纽 (T)，以及三个中间站：Alpha (A)、Bravo (B) 和 Charlie (C)。\n\n可用的单向路线及其相应的能量成本如下：\n- 从始发仓库 (S)：到 Alpha (A) 成本为 2；到 Bravo (B) 成本为 4；到 Charlie (C) 成本为 1。\n- 从 Alpha (A)：到终点枢纽 (T) 成本为 5。\n- 从 Bravo (B)：到终点枢纽 (T) 成本为 3。\n- 从 Charlie (C)：到 Alpha (A) 成本为 1；到 Bravo (B) 成本为 3。\n\n所有其他枢纽对之间没有直接连接。\n\n你的任务是确定两个值：\n1. 将一个包裹从始发仓库 (S) 运输到终点枢纽 (T) 的最低可能能量成本。\n2. 实现此最低成本的不同路径的数量。\n\n请以一对整数的形式提供你的答案。第一个整数应为最低成本，第二个整数为不同最低成本路径的数量。", "solution": "我们将该网络建模为一个有向图，其顶点为 $V=\\{S,A,B,C,T\\}$，并在有向边上定义了边成本函数 $w(u,v)$：\n$$\nw(S,A)=2,\\quad w(S,B)=4,\\quad w(S,C)=1,\\quad w(A,T)=5,\\quad w(B,T)=3,\\quad w(C,A)=1,\\quad w(C,B)=3.\n$$\n所有其他有序对之间没有边。任务是找到从 $S$ 到 $T$ 的最低成本路径，以及达到该最低成本的不同路径的数量。\n\n对每个顶点 $v$ 定义：\n- $d(v)$ = 从 $S$ 到 $v$ 的最低成本，\n- $c(v)$ = 达到成本 $d(v)$ 的不同 $S \\to v$ 路径的数量。\n\n初始化：\n$$\nd(S)=0,\\quad c(S)=1;\\qquad d(A)=d(B)=d(C)=d(T)=+\\infty,\\quad c(A)=c(B)=c(C)=c(T)=0.\n$$\n对有向边 $(u,v)$ 使用标准的松弛规则：\n- 如果 $d(v) > d(u) + w(u,v)$，则设置 $d(v) \\leftarrow d(u)+w(u,v)$ 并且 $c(v) \\leftarrow c(u)$。\n- 如果 $d(v) = d(u) + w(u,v)$，则设置 $c(v) \\leftarrow c(v) + c(u)$。\n\n从 $S$ 开始处理：\n从 $S$ 出发：\n$$\nd(A) \\leftarrow 0+2=2,\\ c(A)\\leftarrow 1;\\quad d(B) \\leftarrow 0+4=4,\\ c(B)\\leftarrow 1;\\quad d(C)\\leftarrow 0+1=1,\\ c(C)\\leftarrow 1.\n$$\n\n接下来，对从 $C$ 出发的边进行松弛（C 是当前未确定节点中 $d$ 值最小的）：\n经由 $C$ 到 $A$：\n$$\nd(C)+w(C,A)=1+1=2 = d(A)\\ \\Rightarrow\\ c(A)\\leftarrow c(A)+c(C)=1+1=2.\n$$\n经由 $C$ 到 $B$：\n$$\nd(C)+w(C,B)=1+3=4 = d(B)\\ \\Rightarrow\\ c(B)\\leftarrow c(B)+c(C)=1+1=2.\n$$\n\n接下来，对从 $A$ 出发的边进行松弛：\n经由 $A$ 到 $T$：\n$$\nd(A)+w(A,T)=2+5=7 < d(T)\\ \\Rightarrow\\ d(T)\\leftarrow 7,\\ c(T)\\leftarrow c(A)=2.\n$$\n\n接下来，对从 $B$ 出发的边进行松弛：\n经由 $B$ 到 $T$：\n$$\nd(B)+w(B,T)=4+3=7 = d(T)\\ \\Rightarrow\\ c(T)\\leftarrow c(T)+c(B)=2+2=4.\n$$\n\n没有其他边可以通过松弛来改善这些值。因此，\n$$\nd(T)=7,\\qquad c(T)=4.\n$$\n这与显式枚举的最低成本路径相匹配：\n$$\nS\\to A\\to T:\\ 2+5=7;\\quad S\\to B\\to T:\\ 4+3=7;\\quad S\\to C\\to A\\to T:\\ 1+1+5=7;\\quad S\\to C\\to B\\to T:\\ 1+3+3=7.\n$$\n因此，最低成本是 $7$，并且有 $4$ 条不同的路径可以达到该成本。", "answer": "$$\\boxed{\\begin{pmatrix}7 & 4\\end{pmatrix}}$$"}, {"introduction": "真实世界的网络是动态变化的——链路可能会升级，从而降低延迟。此时，从头重新运行Dijkstra算法是一种效率低下的应对方法。本练习将向你介绍一种更高效的动态更新策略，即当一条边的权重减少时，如何仅在受影响的图部分传播这一变化。通过追踪这一系列连锁更新，你将学会如何利用已有的计算结果进行增量计算，这是高级算法设计中的一个核心思想。[@problem_id:1496504]", "id": "1496504", "problem": "考虑一个小型企业网络，它被表示为一个有向图，其中服务器是顶点，网络链接是加权边。边的权重表示通信延迟，单位为毫秒（ms）。该网络由六个服务器组成：一个源服务器 `S`、一个汇服务器 `T`，以及四个中间服务器 `A`、`B`、`C` 和 `D`。\n\n网络拓扑和初始延迟由以下有向边及其权重定义：\n- (S, A) 权重为 3\n- (S, B) 权重为 5\n- (A, B) 权重为 1\n- (A, C) 权重为 2\n- (B, C) 权重为 2\n- (B, D) 权重为 6\n- (C, D) 权重为 1\n- (C, T) 权重为 8\n- (D, T) 权重为 3\n\n一位网络管理员已经运行了 Dijkstra 算法，找到了从源服务器 `S` 到网络中所有其他服务器的最短路径延迟。结果如下：\n- `d[S] = 0`\n- `d[A] = 3`\n- `d[B] = 4`\n- `d[C] = 5`\n- `d[D] = 6`\n- `d[T] = 9`\n\n现在，假设从服务器 `S` 到服务器 `B` 的网络链接升级为新的光纤电缆，其延迟从 5 毫秒减少到 1 毫秒。\n\n为了更新整个网络的最短路径延迟，可以避免完全重新运行 Dijkstra 算法。取而代之的是，可以使用一种更高效的更新过程，该过程从被修改的边开始传播改进。这个过程会识别出那些最短路径距离可以被改进的顶点，并依次对它们的出边进行松弛操作。对一条边 `(x, y)` 的松弛操作是检查通过 `x` 到达 `y` 的路径是否可以被缩短，即评估条件 `d[x] + weight(x, y) < d[y]`。\n\n计算在这个高效更新过程中执行的松弛操作的总次数。你的计数应只包括在因边权重变化而导致顶点 `B` 的最短路径距离被初次更新*之后*所发生的松弛操作。", "solution": "我们从给定的图开始，其初始最短路径距离为 $d[S]=0$，$d[A]=3$，$d[B]=4$，$d[C]=5$，$d[D]=6$，$d[T]=9$。边 $(S,B)$ 的权重从 $5$ 减少到 $1$。对 $(x,y)$ 的一次松弛操作会检查是否有 $d[x]+\\text{weight}(x,y)<d[y]$；如果是，我们更新 $d[y]$，然后通过对 $y$ 的出边进行松弛来传播更新。\n\n首先，考虑修改后的边 $(S,B)$。由于 $d[S]+1=1<d[B]=4$，我们更新 $d[B]\\leftarrow 1$。根据题目要求，我们不计算导致 $B$ 更新的这次松弛操作；我们只计算在这次更新之后执行的松弛操作。\n\n从这一点开始，我们通过对任何距离得到改进的顶点的出边进行松弛来传播改进。设 $R$ 表示在 $d[B]$ 更新后所计数的松弛操作总数。\n\n1) 处理 $B$（出边为 $(B,C)$ 和 $(B,D)$），执行两次松弛操作：\n$$d[C]\\stackrel{?}{>}d[B]+w(B,C)\\;\\Longleftrightarrow\\;5\\stackrel{?}{>}1+2=3\\;\\Rightarrow\\;d[C]\\leftarrow 3,$$\n$$d[D]\\stackrel{?}{>}d[B]+w(B,D)\\;\\Longleftrightarrow\\;6\\stackrel{?}{>}1+6=7\\;\\Rightarrow\\;\\text{不更新}。$$\n目前计数：$R=2$。对 $C$ 的改进触发了对 $C$ 的处理。\n\n2) 处理 $C$（出边为 $(C,D)$ 和 $(C,T)$），执行两次松弛操作：\n$$d[D]\\stackrel{?}{>}d[C]+w(C,D)\\;\\Longleftrightarrow\\;6\\stackrel{?}{>}3+1=4\\;\\Rightarrow\\;d[D]\\leftarrow 4,$$\n$$d[T]\\stackrel{?}{>}d[C]+w(C,T)\\;\\Longleftrightarrow\\;9\\stackrel{?}{>}3+8=11\\;\\Rightarrow\\;\\text{不更新}。$$\n计数更新：$R=2+2=4$。对 $D$ 的改进触发了对 $D$ 的处理。\n\n3) 处理 $D$（出边为 $(D,T)$），执行一次松弛操作：\n$$d[T]\\stackrel{?}{>}d[D]+w(D,T)\\;\\Longleftrightarrow\\;9\\stackrel{?}{>}4+3=7\\;\\Rightarrow\\;d[T]\\leftarrow 7.$$\n计数更新：$R=4+1=5$。对 $T$ 的改进不会导致进一步的松弛，因为 $T$ 没有出边。\n\n因此，在 $d[B]$ 被初次更新后，松弛操作的总次数为 $R=5$。", "answer": "$$\\boxed{5}$$"}]}