{"hands_on_practices": [{"introduction": "Prim 算法通过从一个指定的起始顶点开始，逐步“生长”出一棵树来找到最小生成树。这个过程类似于在一个地图上扩张领土，总是选择连接当前领土与外部区域的最短路径。这个练习将引导你手动追踪 Prim 算法的初始步骤，帮助你深入理解其贪心策略和迭代过程 [@problem_id:1534169]。", "problem": "考虑一个无向加权图，其顶点集为 $V = \\{A, B, C, D, E, F, G\\}$，边集及对应的权重如下所示：\n(A, B) 权重为 7\n(A, C) 权重为 4\n(A, D) 权重为 5\n(B, C) 权重为 6\n(B, D) 权重为 3\n(B, E) 权重为 5\n(C, F) 权重为 8\n(D, E) 权重为 2\n(D, F) 权重为 9\n(E, G) 权重为 4\n(F, G) 权重为 1\n\n使用一个按以下方式运行的算法为此图构建一个最小生成树 (MST)：该算法从一个仅包含一个指定起始顶点的树开始。然后，在随后的每一步中，它会找出权重最小的、连接一个当前在树中的顶点和一个在树外的顶点的边，并将该边和新顶点添加到树中。重复此过程，直到所有顶点都在树中。\n\n如果算法从顶点 A 开始，按添加顺序，添加到树中的前三条边是哪些？\n\nA. [(A, C), (A, D), (D, E)]\n\nB. [(F, G), (D, E), (B, D)]\n\nC. [(A, C), (A, D), (D, B)]\n\nD. [(A, C), (C, B), (B, D)]\n\nE. [(A, B), (B, D), (D, E)]", "solution": "我们从顶点 $A$ 开始应用 Prim 算法。设 $T_{k}$ 表示在添加了 $k$ 条边后树中的顶点集合，并设 $\\delta(T)$ 表示恰好有一个端点在 $T$ 中的边的集合。\n\n初始化：$T_{0}=\\{A\\}$。候选边是 $\\delta(T_{0})=\\{(A,B),(A,C),(A,D)\\}$，其权重分别为 $7,4,5$。权重最小的边是 $(A,C)$，其权重为 $4$。添加 $(A,C)$，因此 $T_{1}=\\{A,C\\}$。\n\n下一步：候选边是 $\\delta(T_{1})=\\{(A,B),(A,D),(B,C),(C,F)\\}$，其权重分别为 $7,5,6,8$。权重最小的边是 $(A,D)$，其权重为 $5$。添加 $(A,D)$，因此 $T_{2}=\\{A,C,D\\}$。\n\n下一步：候选边是 $\\delta(T_{2})=\\{(A,B),(B,C),(C,F),(B,D),(D,E),(D,F)\\}$，其权重分别为 $7,6,8,3,2,9$。权重最小的边是 $(D,E)$，其权重为 $2$。添加 $(D,E)$，因此 $T_{3}=\\{A,C,D,E\\}$。\n\n因此，按顺序添加的前三条边是 $(A,C)$、$(A,D)$ 和 $(D,E)$，这与选项 A 相符。", "answer": "$$\\boxed{A}$$", "id": "1534169"}, {"introduction": "与 Prim 算法不同，Kruskal 算法采用一种“自下而上”的方法，它首先将图中的所有边按权重从小到大排序。然后，算法按顺序检查每条边，只要这条边不会形成环路，就将其加入到生成树中。这个练习将让你实践 Kruskal 算法的核心思想，即边的排序和环路检测，这对于理解全局最优解是如何通过一系列局部最优选择构建起来的至关重要 [@problem_id:1401674]。", "problem": "考虑完全图 $K_4$，其顶点集为 $V = \\{1, 2, 3, 4\\}$。任意两个不同顶点 $u$ 和 $v$ 之间边的权重由函数 $w(u,v) = u+v$ 给出。\n\n使用 Kruskal 算法来寻找该图的最小生成树 (MST)。该算法迭代地将边添加到一个不断增长的森林中，从尚未考虑的边集合中选择权重最低的边，条件是添加该边不会形成环。如果边的权重出现相同的情况，则首先考虑 $\\min(u,v)$ 值较小的边 $(u,v)$。如果仍然相同，则首先考虑 $\\max(u,v)$ 值较小的边。\n\n确定 Kruskal 算法添加到森林中的前三条边的有序序列。以下哪个选项代表了这个序列？\n\nA. $((1,2), (1,3), (1,4))$\n\nB. $((1,2), (1,3), (2,3))$\n\nC. $((1,4), (1,2), (1,3))$\n\nD. $((3,4), (2,4), (2,3))$\n\nE. $((1,2), (2,3), (3,4))$", "solution": "给定顶点集为 $V=\\{1,2,3,4\\}$ 的完全图，其边的权重定义为 $w(u,v)=u+v$，对于不同的 $u,v\\in V$。Kruskal 算法按权重的非递减顺序选择边，条件是不产生环，并使用指定的打破平局规则：对于权重相等的边，首先比较 $\\min(u,v)$（较小者优先），若仍然相同，则比较 $\\max(u,v)$（较小者优先）。\n\n使用 $w(u,v)=u+v$ 列出所有边及其权重：\n- 边 $(1,2)$，权重 $w(1,2)=1+2=3$，\n- 边 $(1,3)$，权重 $w(1,3)=1+3=4$，\n- 边 $(1,4)$，权重 $w(1,4)=1+4=5$，\n- 边 $(2,3)$，权重 $w(2,3)=2+3=5$，\n- 边 $(2,4)$，权重 $w(2,4)=2+4=6$，\n- 边 $(3,4)$，权重 $w(3,4)=3+4=7$。\n\n按权重递增排序，对权重相等的边应用打破平局规则。唯一的权重相等情况发生在权重为 $5$ 的边 $(1,4)$ 和 $(2,3)$ 之间。比较 $\\min(1,4)=1$ 和 $\\min(2,3)=2$，因此 $(1,4)$ 在 $(2,3)$ 之前。于是，考虑边的顺序是：\n$$(1,2),\\ (1,3),\\ (1,4),\\ (2,3),\\ (2,4),\\ (3,4).$$\n\n运行 Kruskal 算法：\n- 考虑 $(1,2)$：它连接了两个不同的连通分量，因此添加它。\n- 考虑 $(1,3)$：它连接了两个不同的连通分量，因此添加它。此时的森林包含边 $(1,2)$ 和 $(1,3)$；连通分量为 $\\{1,2,3\\}$ 和 $\\{4\\}$。\n- 考虑 $(1,4)$：它连接了 $\\{1,2,3\\}$ 和 $\\{4\\}$，因此不会形成环；添加它。\n\n添加这三条边后，我们得到了一个生成树（因为 $|V|-1=3$），所添加的前三条边的有序序列是 $((1,2),(1,3),(1,4))$，这对应于选项 A。", "answer": "$$\\boxed{A}$$", "id": "1401674"}, {"introduction": "掌握了构建最小生成树的算法后，一个自然而然的问题是：一个图的最小生成树总是唯一的吗？这个练习将你置于一个网络设计的实际场景中，其中一个连接的成本是可变的。通过解决这个问题，你将发现边权重在决定最小生成树唯一性中的关键作用，并将此概念与前两个练习中的算法选择过程联系起来 [@problem_id:1401635]。", "problem": "一家名为“InnovateNet”的科技公司正在设计一个新的网络骨干，以连接位于城市 A、B、C 和 D 的四个主要数据中心枢纽。目标是建立一组连接，使得所有枢纽都成为单个网络的一部分，并且连接的总成本最小化。这种成本效益最高的布局对应于网络图的一个最小生成树（MST）。\n\n在枢纽对之间铺设直连光纤电缆的成本以“成本单位”给出，如下所示：\n- A 和 B 之间的成本是 10。\n- C 和 D 之间的成本是 10。\n- A 和 C 之间的成本是 20。\n- A 和 D 之间的成本是 30。\n- B 和 C 之间的成本是 30。\n- B 和 D 之间的连接成本是可变的，因为它取决于一种新的部署技术。设这个成本由变量 $x$ 表示。\n\n网络工程师们已经确定，对于 $x$ 的一个特定值，存在恰好两种不同的网络布局（即，两组不同的电缆），它们都能达到相同的最小总成本。\n\n确定 $x$ 的这个特定值。用成本单位表示您的答案。", "solution": "我们将这四个枢纽建模为顶点，其边成本为：$w(AB)=10$，$w(CD)=10$，$w(AC)=20$，$w(AD)=30$，$w(BC)=30$，$w(BD)=x$。一个在 $4$ 个顶点上的最小生成树（MST）恰好有 $3$ 条边，并使总权重最小化。\n\n根据切割性质：对于任何切割，每个MST都必须包含至少一条跨越该切割的最小权重边。考虑将 $A$ 与 $\\{B,C,D\\}$ 分开的切割。跨越该切割的边是 $AB$（成本 $10$）、$AC$（成本 $20$）、$AD$（成本 $30$）。$AB$ 是唯一的最小值，所以 $AB$ 存在于每个 MST 中。同样，对于将 $C$ 与 $\\{A,B,D\\}$ 分开的切割，跨越该切割的边是 $CD$（成本 $10$）、$AC$（成本 $20$）、$BC$（成本 $30$）。$CD$ 是唯一的最小值，所以 $CD$ 存在于每个 MST 中。\n\n在包含 $AB$ 和 $CD$ 之后，剩下的两个连通分量是 $\\{A,B\\}$ 和 $\\{C,D\\}$。第三条边必须连接这两个连通分量。在 $\\{A,B\\}$ 和 $\\{C,D\\}$ 之间的切割被 $AC$（成本 $20$）、$AD$（成本 $30$）、$BC$（成本 $30$）和 $BD$（成本 $x$）跨越。根据切割性质，任何 MST 都必须使用这些边中权重最小的一条。\n\n- 如果 $x<20$，那么 $\\min\\{20,30,30,x\\}=x$，是唯一的。因此唯一的 MST 使用 $BD$，从而得到唯一的布局。\n- 如果 $x>20$，那么 $\\min\\{20,30,30,x\\}=20$，是唯一的（边 $AC$）。因此唯一的 MST 使用 $AC$，从而得到唯一的布局。\n- 如果 $x=20$，那么跨越切割的最小值由成本同为 $20$ 的 $AC$ 和 $BD$ 同时达到。在这种情况下，恰好存在两个 MST：$\\{AB,CD,AC\\}$ 和 $\\{AB,CD,BD\\}$，它们的总成本都是 $10+10+20=40$。\n\n因此，恰好在 $x=20$ 时，会出现两个不同的 MST。", "answer": "$$\\boxed{20}$$", "id": "1401635"}]}