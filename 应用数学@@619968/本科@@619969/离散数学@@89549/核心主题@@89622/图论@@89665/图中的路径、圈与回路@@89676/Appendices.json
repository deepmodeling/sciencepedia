{"hands_on_practices": [{"introduction": "掌握图论中路径概念的第一步，是能够准确地识别并计数它们。这个练习将带你进入一个直观的场景——一个公园的路径网络——来实践系统性地枚举两点之间所有简单路径的基本技能。通过这个具体的计数任务[@problem_id:1390185]，你将为后续更复杂的图分析打下坚实的基础。", "problem": "垂柳溪公园（Willow Creek Park）有一个连接各个景点的步道网络。公园管理层想要分析其布局的连通性。这些景点分别是：公园入口 (A)、一棵古老的橡树 (B)、一个鸭子池塘 (C)、一个玫瑰花园 (D)、一个野餐区 (E) 和一个喷泉 (F)。\n\n所有步道都是双向的，连接方式如下：\n- 一条步道连接公园入口 (A) 和古老的橡树 (B)。\n- 一条步道连接公园入口 (A) 和鸭子池塘 (C)。\n- 一条步道连接古老的橡树 (B) 和鸭子池塘 (C)。\n- 一条步道连接古老的橡树 (B) 和玫瑰花园 (D)。\n- 一条步道连接鸭子池塘 (C) 和玫瑰花园 (D)。\n- 一条步道连接鸭子池塘 (C) 和野餐区 (E)。\n- 一条步道连接玫瑰花园 (D) 和野餐区 (E)。\n- 一条步道连接玫瑰花园 (D) 和喷泉 (F)。\n- 一条步道连接野餐区 (E) 和喷泉 (F)。\n\n如果一条路径不重复访问任何地点，则该路径被认为是“简单”的。您的任务是确定从公园入口 (A) 到喷泉 (F) 的不同简单路径的总数。", "solution": "将公园建模为一个无向图，其顶点为 $A,B,C,D,E,F$，边为 $\\{A B, A C, B C, B D, C D, C E, D E, D F, E F\\}$。简单路径不重复经过顶点。任何从 $A$ 到 $F$ 的简单路径都必须以边 $D F$ 或 $E F$ 结尾。因此，$A\\to F$ 的简单路径总数等于不经过 $F$ 的 $A\\to D$ 简单路径数量加上不经过 $F$ 的 $A\\to E$ 简单路径数量。这将计数问题简化为在 $\\{A,B,C,D,E\\}$ 上的导出子图，其边为 $\\{A B, A C, B C, B D, C D, C E, D E\\}$。\n\n在此子图中计算从 $A$ 到 $D$ 的简单路径。从 $A\\to B$ 开始，有效的延续路径是 $A\\to B\\to D$、$A\\to B\\to C\\to D$ 和 $A\\to B\\to C\\to E\\to D$。从 $A\\to C$ 开始，有效的延续路径是 $A\\to C\\to D$、$A\\to C\\to B\\to D$ 和 $A\\to C\\to E\\to D$。因此，$A\\to D$ 的简单路径数量为\n$$\nN_{A\\to D}=6.\n$$\n\n在同一个子图中计算从 $A$ 到 $E$ 的简单路径。从 $A\\to B$ 开始，有效的延续路径是 $A\\to B\\to C\\to E$、$A\\to B\\to C\\to D\\to E$、$A\\to B\\to D\\to E$ 和 $A\\to B\\to D\\to C\\to E$。从 $A\\to C$ 开始，有效的延续路径是 $A\\to C\\to E$、$A\\to C\\to D\\to E$ 和 $A\\to C\\to B\\to D\\to E$。因此，$A\\to E$ 的简单路径数量为\n$$\nN_{A\\to E}=7.\n$$\n\n因此，从 $A$ 到 $F$ 的不同简单路径总数为\n$$\nN_{A\\to F}=N_{A\\to D}+N_{A\\to E}=6+7=13.\n$$", "answer": "$$\\boxed{13}$$", "id": "1390185"}, {"introduction": "从简单的路径出发，我们现在来关注一种重要的图结构——圈 (cycle)，即闭合的路径。这个练习[@problem_id:1390204]将以一个社交网络为背景，让你在其中寻找长度为$3$的圈，也就是我们常说的“三人小团体”或“派系”(clique)。这不仅能让你看到图论如何模型化并揭示现实世界的关系，还能让你熟练地从邻接矩阵中解读图的信息。", "problem": "一位计算机科学家正在分析一个由五个个体（标记为 1, 2, 3, 4, 和 5）组成的小型社交网络的结构。这些关系被建模为一个简单无向图，其中两个个体之间的边表示他们相互认识。该网络的结构由以下邻接矩阵 $A$ 表示，其中如果个体 $i$ 和个体 $j$ 相互认识，则矩阵项 $A_{ij}$ 为 1，否则为 0。\n\n$$\nA = \\begin{pmatrix}\n0 & 1 & 1 & 0 & 1 \\\\\n1 & 0 & 1 & 1 & 0 \\\\\n1 & 1 & 0 & 1 & 0 \\\\\n0 & 1 & 1 & 0 & 0 \\\\\n1 & 0 & 0 & 0 & 0\n\\end{pmatrix}\n$$\n\n一个三人“团”（clique）是指一个由三个不同个体组成的小组，其中小组中的每个人都与另外两人相互认识。根据所提供的邻接矩阵，确定这个社交网络中不同的三人团的总数。", "solution": "一个三人团对应于一个由三个不同顶点组成的集合，这三个顶点之间两两都有边相连。从对角线元素为零的对称邻接矩阵中，可以得出各个顶点的邻居集合为：\n$$\nN(1)=\\{2,3,5\\},\\quad N(2)=\\{1,3,4\\},\\quad N(3)=\\{1,2,4\\},\\quad N(4)=\\{2,3\\},\\quad N(5)=\\{1\\}.\n$$\n因此，无向边集合（每条边只计数一次）为：\n$$\nE=\\{\\{1,2\\},\\{1,3\\},\\{1,5\\},\\{2,3\\},\\{2,4\\},\\{3,4\\}\\}.\n$$\n共有 $\\binom{5}{3}=10$ 个顶点三元组需要检查是否构成团。对每个三元组，我们要求其所有三条两两之间的边都属于集合 $E$：\n- $\\{1,2,3\\}$ 需要 $\\{1,2\\},\\{1,3\\},\\{2,3\\}$；都在 $E$ 中，所以这是一个团。\n- $\\{1,2,4\\}$ 需要 $\\{1,2\\},\\{1,4\\},\\{2,4\\}$；$\\{1,4\\}\\notin E$，所以不是一个团。\n- $\\{1,2,5\\}$ 需要 $\\{1,2\\},\\{1,5\\},\\{2,5\\}$；$\\{2,5\\}\\notin E$，所以不是一个团。\n- $\\{1,3,4\\}$ 需要 $\\{1,3\\},\\{1,4\\},\\{3,4\\}$；$\\{1,4\\}\\notin E$，所以不是一个团。\n- $\\{1,3,5\\}$ 需要 $\\{1,3\\},\\{1,5\\},\\{3,5\\}$；$\\{3,5\\}\\notin E$，所以不是一个团。\n- $\\{1,4,5\\}$ 需要 $\\{1,4\\},\\{1,5\\},\\{4,5\\}$；$\\{1,4\\}\\notin E$，所以不是一个团。\n- $\\{2,3,4\\}$ 需要 $\\{2,3\\},\\{2,4\\},\\{3,4\\}$；都在 $E$ 中，所以这是一个团。\n- $\\{2,3,5\\}$ 需要 $\\{2,3\\},\\{2,5\\},\\{3,5\\}$；$\\{2,5\\}\\notin E$，所以不是一个团。\n- $\\{2,4,5\\}$ 需要 $\\{2,4\\},\\{2,5\\},\\{4,5\\}$；$\\{2,5\\}\\notin E$，所以不是一个团。\n- $\\{3,4,5\\}$ 需要 $\\{3,4\\},\\{3,5\\},\\{4,5\\}$；$\\{3,5\\}\\notin E$，所以不是一个团。\n\n恰好有两个三元组，即 $\\{1,2,3\\}$ 和 $\\{2,3,4\\}$，构成了三人团。因此，不同的三人团的总数是 $2$。", "answer": "$$\\boxed{2}$$", "id": "1390204"}, {"introduction": "现在，我们将路径和连通性的概念提升到一个关键的应用层面：网络可靠性分析。这个练习[@problem_id:1390215]要求你识别一个网络中的“割点”(cut-vertex)——即单一故障点。通过运用你对路径如何连接整个图的理解，你将学会分析网络的弹性，并发现其潜在的薄弱环节。", "problem": "一个高安全性的企业网络由两个主要部门组成：研发部（R&D）和一个中央管理节点。其网络拓扑结构如下：\n\n- R&D部有四台服务器：`Alpha`、`Beta`、`Gamma` 和 `Delta`。为确保数据完整性和持续正常运行时间，该部门中的每台服务器都与同部门中的其他所有服务器直接连接。\n- Development部也有四台服务器：`Epsilon`、`Zeta`、`Eta` 和 `Theta`。它们遵循相同的高可用性协议，该部门中的每台服务器都相互连接。\n- 一台中央路由服务器 `Nexus` 管理着两个部门之间的流量。为了实现冗余，`Nexus` 连接到每个部门的两台服务器：它连接到R&D部的 `Alpha` 和 `Beta`，以及Development部的 `Epsilon` 和 `Zeta`。\n\n除了涉及 `Nexus` 服务器的连接外，两个部门之间没有其他连接。一位网络架构师发现了一台代表着关键漏洞的服务器。如果这台服务器发生故障，R&D部和Development部将无法相互通信，从而有效地将网络分割开来。\n\n哪台服务器是这个单点故障？\n\nA) Alpha\n\nB) Gamma\n\nC) Epsilon\n\nD) Nexus\n\nE) Beta", "solution": "将网络建模为一个无向图 $G=(V,E)$，其中\n$V=\\{\\text{Alpha},\\text{Beta},\\text{Gamma},\\text{Delta},\\text{Epsilon},\\text{Zeta},\\text{Eta},\\text{Theta},\\text{Nexus}\\}$。\n在每个部门内部，四台服务器构成一个完全子图：R\\&D部在 $\\{\\text{Alpha},\\text{Beta},\\text{Gamma},\\text{Delta}\\}$ 上导出一个 $K_{4}$，Development部在 $\\{\\text{Epsilon},\\text{Zeta},\\text{Eta},\\text{Theta}\\}$ 上导出一个 $K_{4}$。唯一的部门间连接是通过 $\\text{Nexus}$，其边为 $(\\text{Nexus},\\text{Alpha})$、$(\\text{Nexus},\\text{Beta})$、$(\\text{Nexus},\\text{Epsilon})$ 和 $(\\text{Nexus},\\text{Zeta})$。\n\n一个顶点 $v$ 是一个割点（关节点），如果移除它会增加连通分量的数量：即 $k(G-v)>k(G)$。最初 $G$ 是连通的，所以 $k(G)=1$。\n\n考虑移除 $\\text{Nexus}$。在 $G-\\text{Nexus}$ 中，R\\&D的 $K_{4}$ 和Development的 $K_{4}$ 之间没有边，因为所有部门间的边都涉及 $\\text{Nexus}$。因此 $G-\\text{Nexus}$ 恰好有两个连通分量（每个部门一个），所以 $k(G-\\text{Nexus})=2>1$。因此 $\\text{Nexus}$ 是一个割点。\n\n现在考虑移除任何其他单台服务器：\n- 移除 `Alpha` 或 `Beta`。R\\&D子图保持连通（在剩下的三台服务器上变成一个 $K_{3}$），并且 `Nexus` 仍然至少有一个到R\\&D的连接（连接到 $\\{\\text{Alpha},\\text{Beta}\\}$ 中剩下的那台服务器）和两个到Development的连接。因此，任何R\\&D服务器和任何Development服务器之间仍然存在通过 `Nexus` 的路径，所以 $G-\\text{Alpha}$ 和 $G-\\text{Beta}$ 是连通的。\n- 移除 `Gamma` 或 `Delta`。R\\&D子图保持连通（在 $\\{\\text{Alpha},\\text{Beta},\\text{另一台}\\}$ 上仍为一个 $K_{3}$），并且 `Nexus` 保留了到R\\&D和到Development的所有连接，因此整个图保持连通。\n- 移除 `Epsilon`（如果 `Zeta` 是一个选项，情况类似）。Development子图保持连通（在剩下的三台服务器上构成一个 $K_{3}$），并且 `Nexus` 仍然至少有一个到Development的连接和两个到R\\&D的连接，因此图保持连通。\n\n因此，唯一能断开两个部门连接的单点故障是 $\\text{Nexus}$，对应选项D。", "answer": "$$\\boxed{D}$$", "id": "1390215"}]}