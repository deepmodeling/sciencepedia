{"hands_on_practices": [{"introduction": "本练习是掌握 Kruskal 算法的基础。通过逐步追踪算法的初始步骤，你将练习其核心机制：按权重对边进行排序，并逐一添加不会形成环路的最低成本边。这个过程能帮助你牢固理解算法的贪心策略是如何构建最小生成森林的。[@problem_id:1517280]", "problem": "一家科技公司正在设计一个私有的加密广域网（WAN），用于连接其八个主要数据中心，标记为 DC1 到 DC8。其目标是建立一个网络拓扑，以最低的年度光纤链路租赁成本，直接或间接地连接所有数据中心。可用的点对点链路及其相关的年租费（单位：千美元）如下所列。该列表是根据另一项内部指标预先排序的，而不是按成本排序。\n\n*   (DC5, DC7) - 成本: 17\n*   (DC1, DC2) - 成本: 11\n*   (DC3, DC8) - 成本: 20\n*   (DC5, DC6) - 成本: 13\n*   (DC1, DC5) - 成本: 18\n*   (DC2, DC4) - 成本: 15\n*   (DC7, DC8) - 成本: 16\n*   (DC1, DC3) - 成本: 14\n*   (DC3, DC4) - 成本: 12\n*   (DC2, DC6) - 成本: 19\n\n网络工程团队决定应用 Kruskal 算法来确定要租赁的最优链路集合。根据该算法成功添加前五条链路后，构成网络的链路集合是什么？\n\nA. `{(DC1, DC2), (DC3, DC4), (DC5, DC6), (DC1, DC3), (DC7, DC8)}`\n\nB. `{(DC1, DC2), (DC3, DC4), (DC5, DC6), (DC1, DC3), (DC2, DC4)}`\n\nC. `{(DC1, DC2), (DC3, DC4), (DC1, DC3), (DC5, DC7), (DC1, DC5)}`\n\nD. `{(DC3, DC8), (DC2, DC6), (DC1, DC5), (DC5, DC7), (DC7, DC8)}`", "solution": "Kruskal 算法通过迭代地从所有可用边的列表中选择权重最低的边来构建一个最小生成树（MST），前提是添加该边不会与已选择的边形成环。\n\n首先，我们必须将所有可用链路（边）按其成本（权重）进行非递减排序。\n\n提供的列表是：\n*   (DC5, DC7), 成本: 17\n*   (DC1, DC2), 成本: 11\n*   (DC3, DC8), 成本: 20\n*   (DC5, DC6), 成本: 13\n*   (DC1, DC5), 成本: 18\n*   (DC2, DC4), 成本: 15\n*   (DC7, DC8), 成本: 16\n*   (DC1, DC3), 成本: 14\n*   (DC3, DC4), 成本: 12\n*   (DC2, DC6), 成本: 19\n\n按成本对这些链路进行排序，得到以下有序列表：\n1.  (DC1, DC2), 成本: 11\n2.  (DC3, DC4), 成本: 12\n3.  (DC5, DC6), 成本: 13\n4.  (DC1, DC3), 成本: 14\n5.  (DC2, DC4), 成本: 15\n6.  (DC7, DC8), 成本: 16\n7.  (DC5, DC7), 成本: 17\n8.  (DC1, DC5), 成本: 18\n9.  (DC2, DC6), 成本: 19\n10. (DC3, DC8), 成本: 20\n\n接下来，我们追踪算法的执行过程。初始时，每个数据中心都位于其自身的不相交集中，形成一个由八个连通分量组成的森林：$\\{\\{\\text{DC1}\\}, \\{\\text{DC2}\\}, \\{\\text{DC3}\\}, \\{\\text{DC4}\\}, \\{\\text{DC5}\\}, \\{\\text{DC6}\\}, \\{\\text{DC7}\\}, \\{\\text{DC8}\\}\\}$。已选择的边集合为空。\n\n**第 1 步 (第一次成功添加):**\n我们考虑成本最低的边：(DC1, DC2)，成本为 11。数据中心 DC1 和 DC2 位于不同的集合中（$\\{\\text{DC1}\\}$ 和 $\\{\\text{DC2}\\}$）。添加这条边不会产生环。因此，我们添加它。\n*   已选中的边: `{(DC1, DC2)}`\n*   现在的集合为: $\\{\\{\\text{DC1}, \\text{DC2}\\}, \\{\\text{DC3}\\}, \\{\\text{DC4}\\}, \\{\\text{DC5}\\}, \\{\\text{DC6}\\}, \\{\\text{DC7}\\}, \\{\\text{DC8}\\}\\}$\n\n**第 2 步 (第二次成功添加):**\n下一个成本最低的边是 (DC3, DC4)，成本为 12。DC3 和 DC4 位于不同的集合中（$\\{\\text{DC3}\\}$ 和 $\\{\\text{DC4}\\}$）。我们添加这条边。\n*   已选中的边: `{(DC1, DC2), (DC3, DC4)}`\n*   现在的集合为: $\\{\\{\\text{DC1}, \\text{DC2}\\}, \\{\\text{DC3}, \\text{DC4}\\}, \\{\\text{DC5}\\}, \\{\\text{DC6}\\}, \\{\\text{DC7}\\}, \\{\\text{DC8}\\}\\}$\n\n**第 3 步 (第三次成功添加):**\n下一条边是 (DC5, DC6)，成本为 13。DC5 和 DC6 位于不同的集合中（$\\{\\text{DC5}\\}$ 和 $\\{\\text{DC6}\\}$）。我们添加这条边。\n*   已选中的边: `{(DC1, DC2), (DC3, DC4), (DC5, DC6)}`\n*   现在的集合为: $\\{\\{\\text{DC1}, \\text{DC2}\\}, \\{\\text{DC3}, \\text{DC4}\\}, \\{\\text{DC5}, \\text{DC6}\\}, \\{\\text{DC7}\\}, \\{\\text{DC8}\\}\\}$\n\n**第 4 步 (第四次成功添加):**\n下一条边是 (DC1, DC3)，成本为 14。DC1 位于集合 $\\{\\text{DC1}, \\text{DC2}\\}$ 中，而 DC3 位于集合 $\\{\\text{DC3}, \\text{DC4}\\}$ 中。由于它们位于不同的集合中，添加这条边不会产生环。我们添加它并合并这两个集合。\n*   已选中的边: `{(DC1, DC2), (DC3, DC4), (DC5, DC6), (DC1, DC3)}`\n*   现在的集合为: $\\{\\{\\text{DC1}, \\text{DC2}, \\text{DC3}, \\text{DC4}\\}, \\{\\text{DC5}, \\text{DC6}\\}, \\{\\text{DC7}\\}, \\{\\text{DC8}\\}\\}$\n\n**第 5 步 (检测到环):**\n下一条边是 (DC2, DC4)，成本为 15。我们检查 DC2 和 DC4 属于哪个集合。DC2 位于 $\\{\\text{DC1}, \\text{DC2}, \\text{DC3}, \\text{DC4}\\}$ 中，DC4 也位于 $\\{\\text{DC1}, \\text{DC2}, \\text{DC3}, \\text{DC4}\\}$ 中。由于它们在同一个集合中，添加这条边会形成一个环（具体来说是 DC1-DC2-DC4-DC3-DC1）。因此，我们**拒绝**这条边。\n\n**第 6 步 (第五次成功添加):**\n我们处理排序列表中的下一条边：(DC7, DC8)，成本为 16。DC7 位于 $\\{\\text{DC7}\\}$ 中，DC8 位于 $\\{\\text{DC8}\\}$ 中。它们是不同的集合，所以我们添加这条边。这是我们成功添加的第五条边。\n*   已选中的边: `{(DC1, DC2), (DC3, DC4), (DC5, DC6), (DC1, DC3), (DC7, DC8)}`\n*   现在的集合为: $\\{\\{\\text{DC1}, \\text{DC2}, \\text{DC3}, \\text{DC4}\\}, \\{\\text{DC5}, \\text{DC6}\\}, \\{\\text{DC7}, \\text{DC8}\\}\\}$\n\n由于题目要求我们找出成功添加的前五条边的集合，因此过程到此为止。得到的集合是 `{(DC1, DC2), (DC3, DC4), (DC5, DC6), (DC1, DC3), (DC7, DC8)}`。\n\n将此结果与给定的选项进行比较，我们发现它与选项 A 相匹配。", "answer": "$$\\boxed{A}$$", "id": "1517280"}, {"introduction": "Kruskal 算法不仅在于添加边，理解何时拒绝一条边同样关键。这个练习专注于算法中至关重要的一步——环路检测。通过找出第一条因形成环路而必须被舍弃的边，你将能更好地掌握算法如何确保最终生成的是一棵树。[@problem_id:1379932]", "problem": "一家电信公司计划铺设一个光纤电缆网络来连接一组数据中心。该公司确定了7个数据中心，分别标记为A、B、C、D、E、F和G。这些中心之间可能的电缆链路及其相关的安装成本（以千美元为单位）已经确定。为了在确保所有中心都连接的情况下最小化总安装成本，工程团队使用Kruskal算法来寻找一个最小生成树（MST）。\n\n所有可能的电缆链路列表已按成本非递减顺序排序。您的任务是对这个列表应用Kruskal算法，并找出算法会因为加入后会形成环路而丢弃的第一个电缆链路。\n\n排序后的可能链路列表，标记为 $e_1$ 到 $e_9$，如下所示：\n- $e_1$: (A, B), 成本 2\n- $e_2$: (C, D), 成本 3\n- $e_3$: (E, F), 成本 4\n- $e_4$: (A, C), 成本 5\n- $e_5$: (G, A), 成本 6\n- $e_6$: (B, D), 成本 7\n- $e_7$: (F, G), 成本 8\n- $e_8$: (E, G), 成本 9\n- $e_9$: (D, F), 成本 10\n\nKruskal算法会丢弃的第一个链路是下列哪一个？\n\nA. $e_3$: (E, F), 成本 4\n\nB. $e_4$: (A, C), 成本 5\n\nC. $e_5$: (G, A), 成本 6\n\nD. $e_6$: (B, D), 成本 7\n\nE. $e_7$: (F, G), 成本 8", "solution": "Kruskal算法按权重的非递减顺序处理边，当且仅当一条边的两个端点位于不同的连通分量中时，才会添加该边；当一条边的两个端点已经位于同一个连通分量中时，该边将被丢弃，因为添加它会形成一个环路。\n\n初始化时，所有顶点都是孤立的：连通分量为 $\\{\\{A\\}, \\{B\\}, \\{C\\}, \\{D\\}, \\{E\\}, \\{F\\}, \\{G\\}\\}$。\n\n按照给定的排序顺序处理各条边：\n1) $e_{1} = (A,B)$: $A$和$B$在不同的连通分量中，所以加入$e_{1}$。连通分量变为 $\\{\\{A,B\\}, \\{C\\}, \\{D\\}, \\{E\\}, \\{F\\}, \\{G\\}\\}$。\n2) $e_{2} = (C,D)$: $C$和$D$在不同的连通分量中，所以加入$e_{2}$。连通分量变为 $\\{\\{A,B\\}, \\{C,D\\}, \\{E\\}, \\{F\\}, \\{G\\}\\}$。\n3) $e_{3} = (E,F)$: $E$和$F$在不同的连通分量中，所以加入$e_{3}$。连通分量变为 $\\{\\{A,B\\}, \\{C,D\\}, \\{E,F\\}, \\{G\\}\\}$。\n4) $e_{4} = (A,C)$: $A \\in \\{A,B\\}$ 且 $C \\in \\{C,D\\}$，它们在不同的连通分量中，所以加入$e_{4}$。连通分量合并为 $\\{\\{A,B,C,D\\}, \\{E,F\\}, \\{G\\}\\}$。\n5) $e_{5} = (G,A)$: $G \\in \\{G\\}$ 且 $A \\in \\{A,B,C,D\\}$，它们在不同的连通分量中，所以加入$e_{5}$。连通分量变为 $\\{\\{A,B,C,D,G\\}, \\{E,F\\}\\}$。\n6) $e_{6} = (B,D)$: $B, D \\in \\{A,B,C,D,G\\}$，它们已在同一个连通分量中。添加$e_{6}$会创建一个环路，所以$e_{6}$是Kruskal算法丢弃的第一条边。\n\n因此，第一个被丢弃的链路是$e_{6}$，对应选项D。", "answer": "$$\\boxed{D}$$", "id": "1379932"}, {"introduction": "这个练习将你的理解从简单地执行算法，提升到在动态场景中应用其核心原理。你将探索最小生成树（$MST$）强大的环路性质，学习在网络发生变化时如何高效地更新解，从而揭示算法最优性的更深层原因。[@problem_id:1379918]", "problem": "一家科技公司管理着一个由六个数据中心组成的网络，分别标记为 A、B、C、D、E 和 F。为了实现冗余和性能，所有数据中心必须通过形成树状结构的网络拓扑连接起来。在任意两个中心之间维护一条直连光纤链路的成本以抽象的“成本点”来表示。\n\n初步分析确定，以最小可能总成本连接所有六个数据中心的最小生成树（MST）由以下链路及其相关成本构成：\n- (A, D)，成本为 8\n- (B, D)，成本为 3\n- (C, D)，成本为 4\n- (C, E)，成本为 6\n- (E, F)，成本为 9\n\n由于新的硬件升级，现在可以在中心 B 和 F 之间建立一条新的潜在链路，其成本显著降低至 5 个成本点。所有其他链路的成本保持不变。\n\n您的任务是确定在新的链路 (B, F) 可用后，该网络的新最小生成树的总成本。请用一个整数表示您的答案。", "solution": "给定一个现有顶点集 $\\{A,B,C,D,E,F\\}$ 上的最小生成树（MST），由以下边构成：\n$$(A,D):8,\\quad (B,D):3,\\quad (C,D):4,\\quad (C,E):6,\\quad (E,F):9.$$\n这棵最小生成树的总成本为\n$$8+3+4+6+9=30.$$\n\n增加一条新边 $e=(B,F)$，其权重为 $w(e)=5$，所有其他边的权重保持不变。根据最小生成树的环属性：如果向一棵树 $T$ 中添加一条边 $e$ ，它会与树 $T$ 中连接 $e$ 的两个端点的路径形成一个唯一的环 $C$。如果 $w(e)$ 小于环 $C$ 上的最大权重边的权重，那么用边 $e$ 替换那条最大权重的边，将得到一棵总权重严格更小的生成树，并且这棵新树就是一棵最小生成树。\n\n在给定的最小生成树中，B 和 F 之间的唯一路径是\n$$B \\xleftrightarrow{3} D \\xleftrightarrow{4} C \\xleftrightarrow{6} E \\xleftrightarrow{9} F,$$\n因此，通过添加 $(B,F)$ 形成的环的边权重集合为 $\\{3,4,6,9,5\\}$，原始路径上的最大权重是 $9$，对应于边 $(E,F)$。由于 $59$，我们用 $(B,F):5$ 替换 $(E,F):9$。\n\n因此，新的最小生成树的总成本是\n$$30-9+5=26.$$\n根据环属性，这棵树是最优的。", "answer": "$$\\boxed{26}$$", "id": "1379918"}]}