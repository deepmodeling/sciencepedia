{"hands_on_practices": [{"introduction": "让我们从一个实际的工程问题开始，为网格状分布的传感器节点设计一个通信网络。这个练习将直观地展示普林算法在一个结构化环境中的运作方式 [@problem_id:1392208]。通过观察算法如何优先选择成本较低的水平连接，你将亲身体会到其“贪心”策略如何一步步构建出最小生成树，并理解边权重的相对大小如何塑造最终的网络拓扑。", "problem": "一家工程公司受托为一座新建的研究设施设计通信网络。该设施有9个传感器节点，排列成一个均匀的 $3 \\times 3$ 网格。我们可以用坐标 $(i, j)$ 来标记每个节点，其中 $i$ 是行号，$j$ 是列号，且 $i, j \\in \\{1, 2, 3\\}$。\n\n任何两个相邻节点之间都可以建立通信链路。相邻节点是指在水平方向（同一行）或垂直方向（同一列）上彼此相邻的节点。在两个节点之间建立一条水平链路的成本是2千美元。建立一条垂直链路的成本是3千美元。\n\n为确保所有节点都连接起来，该公司采用了一种顺序构建算法。他们从一个单一的活动节点，即位于 $(1, 1)$ 的节点开始。在随后的每一步中，他们识别出唯一一条最便宜的可用链路，该链路将一个已在活动网络中的节点连接到一个网络外的节点。然后将这条链路添加到网络中。这个过程一直持续到所有9个节点都连接起来。\n\n计算完整网络的总成本。你的答案应以千美元为单位。", "solution": "我们将此过程建模为从 $(1,1)$ 处的单个节点开始的 Prim 算法，其中每一步都会添加连接当前活动集与非活动节点的最便宜的唯一边。所有水平边的成本为 $2$，所有垂直边的成本为 $3$。根据 Prim 算法的贪心选择性质和切割性质，只要存在任何跨越当前切割（活动集与非活动集）的水平边，算法就必须选择一条水平边，因为 $2<3$。\n\n从活动集 $A_{0}=\\{(1,1)\\}$ 开始。仅有的邻接边是到 $(1,2)$ 成本为 $2$ 的水平边和到 $(2,1)$ 成本为 $3$ 的垂直边，所以算法添加水平边 $(1,1)$–$(1,2)$，得到 $A_{1}=\\{(1,1),(1,2)\\}$。从 $A_{1}$ 出发，可用的切割边是成本为 $2$ 的水平边 $(1,2)$–$(1,3)$ 以及到第 $2$ 行成本为 $3$ 的垂直边，所以算法添加 $(1,2)$–$(1,3)$ 并完成第 $1$ 行，得到 $A_{2}=\\{(1,1),(1,2),(1,3)\\}$。\n\n此时，由于第 $1$ 行中的所有节点都已是活动的，没有跨越切割的水平边；最便宜的可用切割边是从第 $1$ 行到第 $2$ 行成本为 $3$ 的垂直边。算法添加一条这样的垂直边（任意一列），比如说 $(1,2)$–$(2,2)$，并激活 $(2,2)$。现在，从 $(2,2)$ 到 $(2,1)$ 和 $(2,3)$ 有成本均为 $2$ 的水平切割边，这些边比任何剩余的垂直切割边都便宜。算法添加这两条水平边，完成第 $2$ 行。\n\n同样地，没有水平边跨越切割，所以最便宜的可用边是从第 $2$ 行到第 $3$ 行成本为 $3$ 的垂直边。算法添加一条这样的垂直边，比如说 $(2,2)$–$(3,2)$，然后添加第 $3$ 行中从 $(3,2)$ 到 $(3,1)$ 和 $(3,3)$ 的两条水平边，每条成本为 $2$。\n\n根据切割性质，至少有一条垂直边必须跨越分隔第 $1$ 行和第 $2$ 行的切割，并且至少有一条必须跨越分隔第 $2$ 行和第 $3$ 行的切割，因此恰好使用了两条成本为 $3$ 的垂直边。根据贪心排序，所有可能的水平切割边总是在添加任何垂直边之前被选择，所以恰好使用了六条成本为 $2$ 的水平边（每行两条，将三个节点连接成一条路径）。该生成树总共有 $8$ 条边。\n\n因此，总成本为\n$$\nC=6\\cdot 2+2\\cdot 3=12+6=18\n$$\n千美元。", "answer": "$$\\boxed{18}$$", "id": "1392208"}, {"introduction": "这个练习旨在澄清一个关于最小生成树的关键概念性误区。虽然最小生成树（MST）的目标是最小化连接所有节点的“总成本”，但这并不意味着树中任意两点之间的路径就是原始图中它们之间的“最短路径” [@problem_id:1392177]。通过计算并比较这两种路径的成本，你将深刻理解 MST 的全局最优性与局部路径最优性之间的区别，这是掌握图算法时必须避免的一个常见陷阱。", "problem": "一个市政府正计划安装一个光纤网络，以连接六个关键的行政大楼，分别标记为 A、B、C、D、E 和 F。在任意两座大楼之间铺设直连光缆的成本已经计算出来，单位为万美元。为了确保所有大楼以最低的安装成本相连，该市将建立一个与潜在连接的最小生成树 (MST) 相对应的网络。\n\n所有可能连接构成的图 $G$ 包含顶点 $V = \\{A, B, C, D, E, F\\}$，其带权无向边如下所示：\n- (A, B)，权重为 3\n- (A, E)，权重为 10\n- (A, F)，权重为 14\n- (B, C)，权重为 2\n- (B, D)，权重为 5\n- (C, D)，权重为 8\n- (C, E)，权重为 4\n- (E, F)，权重为 6\n\n一旦 MST 网络建成，我们关心的是大楼 A 和大楼 F 之间的通信路径。\n设 $W_{MST}$ 为*仅使用已建成的 MST 网络内的路径*时，A 和 F 之间路径的总成本。\n设 $W_{SP}$ 为在原始图 $G$ 中（考虑所有可用边），A 和 F 之间的绝对最短路径的成本。\n\n计算 $W_{MST}$ 和 $W_{SP}$ 的值。请以有序对 $(W_{MST}, W_{SP})$ 的形式提供您的答案。", "solution": "题目要求计算两个量：给定图 $G$ 的最小生成树 (MST) 中顶点 A 和 F 之间路径的权重，记为 $W_{MST}$；以及原始图 $G$ 中 A 和 F 之间最短路径的权重，记为 $W_{SP}$。\n\n**第一部分：寻找最小生成树 (MST)**\n\n我们可以使用 Prim 算法来找到图 $G$ 的最小生成树。让我们从顶点 A 开始该算法。我们将维护一个已在 MST 中的顶点集合 $S$。初始时，$S = \\emptyset$。我们还将记录 MST 中的边。\n\n1.  **初始化**：从一个任意顶点开始。我们选择 A。设已访问的顶点集合为 $S = \\{A\\}$。MST 中的边集合为空。\n\n2.  **迭代 1**：找到连接 $S$ 中顶点与 $S$ 外顶点的最便宜的边。从 A 出发的边有 (A, B) 权重为 3，(A, E) 权重为 10，以及 (A, F) 权重为 14。权重最小的边是 (A, B)，权重为 3。\n    - 将边 (A, B) 添加到 MST 中。\n    - 将顶点 B 添加到 $S$ 中。现在 $S = \\{A, B\\}$。\n    - MST 边集： `{(A, B)}`\n\n3.  **迭代 2**：找到连接 $\\{A, B\\}$ 中顶点与 $\\{C, D, E, F\\}$ 中顶点的最便宜的边。候选边有：\n    - 从 A 出发：(A, E) 权重 10, (A, F) 权重 14。\n    - 从 B 出发：(B, C) 权重 2, (B, D) 权重 5。\n    权重最小的边是 (B, C)，权重为 2。\n    - 将边 (B, C) 添加到 MST 中。\n    - 将顶点 C 添加到 $S$ 中。现在 $S = \\{A, B, C\\}$。\n    - MST 边集： `{(A, B), (B, C)}`\n\n4.  **迭代 3**：找到从 $\\{A, B, C\\}$ 到 $\\{D, E, F\\}$ 的最便宜的边。候选边有：\n    - 从 A 出发：(A, E) 权重 10, (A, F) 权重 14。\n    - 从 B 出发：(B, D) 权重 5。\n    - 从 C 出发：(C, D) 权重 8, (C, E) 权重 4。\n    权重最小的边是 (C, E)，权重为 4。\n    - 将边 (C, E) 添加到 MST 中。\n    - 将顶点 E 添加到 $S$ 中。现在 $S = \\{A, B, C, E\\}$。\n    - MST 边集： `{(A, B), (B, C), (C, E)}`\n\n5.  **迭代 4**：找到从 $\\{A, B, C, E\\}$ 到 $\\{D, F\\}$ 的最便宜的边。候选边有：\n    - 从 A 出发：(A, F) 权重 14。\n    - 从 B 出发：(B, D) 权重 5。\n    - 从 C 出发：(C, D) 权重 8。\n    - 从 E 出发：(E, F) 权重 6。\n    权重最小的边是 (B, D)，权重为 5。\n    - 将边 (B, D) 添加到 MST 中。\n    - 将顶点 D 添加到 $S$ 中。现在 $S = \\{A, B, C, E, D\\}$。\n    - MST 边集： `{(A, B), (B, C), (C, E), (B, D)}`\n\n6.  **迭代 5**：找到从 $\\{A, B, C, E, D\\}$ 到 $\\{F\\}$ 的最便宜的边。候选边有：\n    - 从 A 出发：(A, F) 权重 14。\n    - 从 E 出发：(E, F) 权重 6。\n    权重最小的边是 (E, F)，权重为 6。\n    - 将边 (E, F) 添加到 MST 中。\n    - 将顶点 F 添加到 $S$ 中。现在 $S = \\{A, B, C, D, E, F\\}$。所有顶点都已在集合中。\n    - MST 边集： `{(A, B), (B, C), (C, E), (B, D), (E, F)}`\n\n算法终止。MST 中的边是 (A, B)、(B, C)、(C, E)、(B, D) 和 (E, F)。\n\n**第二部分：计算 $W_{MST}$**\n\n现在我们仅使用 MST 的边来找到 A 和 F 之间的路径。通过检查 MST 的边，从 A 到 F 的唯一路径是 A $\\rightarrow$ B $\\rightarrow$ C $\\rightarrow$ E $\\rightarrow$ F。\n这条路径的总权重是其各边权重之和：\n$W_{MST} = \\text{weight}(A, B) + \\text{weight}(B, C) + \\text{weight}(C, E) + \\text{weight}(E, F)$\n$W_{MST} = 3 + 2 + 4 + 6 = 15$。\n\n**第三部分：计算 $W_{SP}$**\n\n接下来，我们在原始图 $G$ 中找到 A 和 F 之间的最短路径。我们可以使用 Dijkstra 算法或直接检查可能的路径。\n\n让我们列出从 A 到 F 的相关路径及其权重：\n-   **路径 1**：直连边 (A, F)。权重 = 14。\n-   **路径 2**：在 MST 中找到的路径： A $\\rightarrow$ B $\\rightarrow$ C $\\rightarrow$ E $\\rightarrow$ F。权重 = 15。\n-   **路径 3**：另一条经过顶点 E 的路径：A $\\rightarrow$ E $\\rightarrow$ F。权重 = weight(A, E) + weight(E, F) = 10 + 6 = 16。\n\n比较这些路径的权重（14, 15, 16），最小权重是 14。任何其他路径，例如涉及顶点 D 的路径，都会更长。例如，路径 A $\\rightarrow$ B $\\rightarrow$ D $\\rightarrow$ C $\\rightarrow$ E $\\rightarrow$ F 的权重为 $3+5+8+4+6 = 26$。\n因此，原始图中的最短路径是直连边 (A, F)。\n最短路径的权重是 $W_{SP} = 14$。\n\n**结论**\n\n我们已经计算出两个值：\n-   MST 中路径的成本是 $W_{MST} = 15$。\n-   原始图中最短路径的成本是 $W_{SP} = 14$。\n\n最终答案是有序对 $(15, 14)$。", "answer": "$$\\boxed{\\begin{pmatrix}15 & 14\\end{pmatrix}}$$", "id": "1392177"}, {"introduction": "准备好迎接一个更深层次的挑战了吗？在这个练习中，你将不再是简单地执行算法，而是要扮演侦探的角色 [@problem_id:1392220]。我们将利用普林算法的执行结果——已知的顶点添加顺序和最终的最小生成树——来反向推断原始图中某些边权必须满足的条件。这个过程将迫使你深入思考算法每一步决策背后的根本依据，即“切割属性”（cut property），从而真正掌握普林算法正确性的精髓。", "problem": "考虑一个无向加权图 $G=(V, E)$，其顶点集为 $V = \\{A, B, C, D, E, F\\}$。使用Prim算法从顶点 A 开始寻找一个最小生成树 (MST)。该算法按以下顺序将顶点添加到正在生长的树中：A, C, B, D, F, E。\n\n最终得到的MST由边 (A, C), (C, B), (C, D), (D, F) 和 (F, E) 组成，其对应的权重分别为 2, 3, 5, 1, 和 4。\n\n图 $G$ 还包含另外三条边：(A, B) 的权重为 $w_{AB}$，(B, D) 的权重为 $w_{BD}$，以及 (A, F) 的权重为 $w_{AF}$。$G$ 中完整的边集是MST的边与这三条额外边的并集。已知图 $G$ 中所有边的权重都是互不相同的正整数。\n\n根据Prim算法的执行过程，确定和 $w_{AB} + w_{BD} + w_{AF}$ 的最小可能值。最终答案应为一个整数。", "solution": "设 $G=(V,E)$，其中 $V=\\{A,B,C,D,E,F\\}$。MST的边及其权重为：边 (A,C) 权重为 2，边 (C,B) 权重为 3，边 (C,D) 权重为 5，边 (D,F) 权重为 1，以及边 (F,E) 权重为 4。仅有的额外边是 (A,B) 权重为 $w_{AB}$，(B,D) 权重为 $w_{BD}$，以及 (A,F) 权重为 $w_{AF}$。$G$ 中所有边的权重都是互不相同的正整数。\n\n从 A 开始，按照给定的添加顺序 $A,C,B,D,F,E$ 运行Prim算法。在每一步中，被选择的边必须是跨越当前树与剩余顶点之间切割的唯一的最小权重边。\n\n初始时，从 A 出发，横切边是权重为 2 的 (A,C)，权重为 $w_{AB}$ 的 (A,B)，以及权重为 $w_{AF}$ 的 (A,F)。首先通过(A,C)选择C，这要求\n$$\n2<\\min\\{w_{AB},w_{AF}\\}.\n$$\n\n添加 C 之后，横切边是权重为 3 的 (C,B)，权重为 5 的 (C,D)，权重为 $w_{AB}$ 的 (A,B)，以及权重为 $w_{AF}$ 的 (A,F)。接着通过(C,B)选择B，这要求\n$$\n3<\\min\\{w_{AB},w_{AF},5\\}\\quad\\Longrightarrow\\quad w_{AB}>3,\\;w_{AF}>3.\n$$\n\n添加 B 之后，横切边是权重为 5 的 (C,D)，权重为 $w_{AF}$ 的 (A,F)，以及权重为 $w_{BD}$ 的 (B,D)。接着通过(C,D)选择D，这要求\n$$\n5<\\min\\{w_{AF},w_{BD}\\}\\quad\\Longrightarrow\\quad w_{AF}>5,\\;w_{BD}>5.\n$$\n\n添加 D 之后，横切边是权重为 1 的 (D,F) 和权重为 $w_{AF}$ 的 (A,F)。通过(D,F)选择F只需要 $1<w_{AF}$，而 $w_{AF}>5$ 已经蕴含了这一点。最后，权重为 4 的 (F,E) 是添加 E 的唯一横切边。\n\n因此，充要不等式 (这也与给定MST的环属性相符) 是\n$$\nw_{AB}>3,\\quad w_{BD}>5,\\quad w_{AF}>5.\n$$\n由于 G 中所有边的权重必须是互不相同的正整数，且MST已经使用了权重 $1,2,3,4,5$，因此最小的可行选择是\n$$\nw_{AB}\\in\\{6,7,8,\\dots\\},\\quad w_{BD}\\in\\{6,7,8,\\dots\\},\\quad w_{AF}\\in\\{6,7,8,\\dots\\},\n$$\n其中 $w_{AB},w_{BD},w_{AF}$ 两两不同。为了最小化和 $w_{AB}+w_{BD}+w_{AF}$，我们选择满足要求且不小于所需下限的三个最小的互不相同的整数，即 6, 7, 8 (顺序任意)。因此，\n$$\n\\min\\{w_{AB}+w_{BD}+w_{AF}\\}=6+7+8=21.\n$$\n这种赋值与Prim算法的运行过程和权重互不相同的约束是一致的。", "answer": "$$\\boxed{21}$$", "id": "1392220"}]}