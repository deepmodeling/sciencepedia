{"hands_on_practices": [{"introduction": "在分析网络结构时，我们能否仅通过计算其节点和连接数量就对其连通性和冗余性做出基本判断？这个练习探讨了图论中一个最基本的定量关系，它揭示了顶点数 $V$、边数 $E$ 和环路存在性之间的深刻联系。通过这个思想实验，你将学会如何利用这一简单准则来快速评估一个网络是否必然包含冗余路径。[@problem_id:1495017]", "problem": "一个市政工程团队正在分析一个新的供水管网的设计。该管网可被建模为一个简单图，其中管道交汇或终止的每个节点都是一个顶点，而连接两个节点的每个连续管段都是一条边。一个郊区的初步设计总共包含 $V$ 个节点和 $E$ 条管道。经过审查，主管工程师注意到管道的数量严格大于节点的数量减一，即 $E > V - 1$。\n\n仅根据这一信息，关于该供水管网的图结构，以下哪个陈述必定为真？\n\nA. 该管网是连通的，意味着可以从任何一个节点到达任何其他节点。\n\nB. 该管网必须包含至少一个环，意味着存在至少一条路径，水分子可以沿着该路径从同一个节点出发并回到该节点，而不立即反向。\n\nC. 该管网不可能是非连通的；它必须形成单个连通分量。\n\nD. 管网中的每个节点都必须至少有两条管道与之相连。\n\nE. 该管网形成一个单一的连通分量，且包含冗余路径。", "solution": "设 $G$ 是一个有 $V$ 个顶点和 $E$ 条边的简单无向图，并且假设 $E>V-1$。设 $c$ 表示 $G$ 的连通分量的数量，因此 $c\\geq 1$。\n\n关于无环图（森林）的一个关键事实：如果 $G$ 是无环的，那么每个含有 $v_{i}$ 个顶点的连通分量正好有 $v_{i}-1$ 条边。对所有连通分量求和，\n$$\nE=\\sum_{i=1}^{c}(v_{i}-1)=\\left(\\sum_{i=1}^{c}v_{i}\\right)-c=V-c\\leq V-1,\n$$\n等号成立当且仅当 $c=1$（即 $G$ 是一棵树）。\n\n取其逆否命题，如果 $E>V-1$，那么 $G$ 不可能是无环的。因此 $G$ 必须包含至少一个环。这使得陈述 B 必定为真。\n\n我们现在检验其他陈述，并说明它们并非由 $E>V-1$ 必然导致。\n\n连通性 (A, C, E)：不等式 $E>V-1$ 并不保证连通性。例如，设 $m\\geq 4$，取一个连通分量为完全图 $K_{m}$（它有 $\\binom{m}{2}$ 条边），并添加一个孤立顶点。那么\n$$\nV=m+1,\\quad E=\\binom{m}{2}=\\frac{m(m-1)}{2}>m=V-1,\n$$\n但这个图是非连通的。因此 A、C 和 E 都不一定成立。\n\n最小度条件 (D)：不等式 $E>V-1$ 并不强制要求每个顶点的度数都至少为 $2$。例如，从 $r\\geq 3$ 的星形图 $K_{1,r}$ 开始，它有 $V=r+1$ 个顶点和 $E=r=V-1$ 条边。在两个不同的叶顶点之间添加一条额外的边。新图有\n$$\nE'=E+1=V>V-1,\n$$\n但未被新添加的边连接的叶顶点的度数仍然为 $1$。因此 D 不一定成立。\n\n因此，唯一必定为真的陈述是 B。", "answer": "$$\\boxed{B}$$", "id": "1495017"}, {"introduction": "对于一个连通的网络，我们总能找到一个无环的“骨架”结构——生成树——来连接所有节点。那么，网络中其余的边扮演什么角色呢？这个练习将引导你从任意连通图 $G$ 中分离出一个生成树，并精确计算构成树的“树边”和引入环路的“非树边”的数量，让你对网络的核心结构与冗余设计有更清晰的认识。[@problem_id:1483535]", "problem": "考虑一个大型的连通无向图 $G$，它代表了一个复杂的基础设施网络。该图由 $n$ 个节点（连接点）和 $m$ 条边（连接）组成。为了建立一个核心的、无环的通信骨干，从一个任意节点开始，在该图上运行诸如广度优先搜索 (BFS) 或深度优先搜索 (DFS) 之类的算法。在连通图上进行此类遍历的输出是一棵生成树。\n\n对于这棵生成的生成树，原始图 $G$ 中的每条边都可以被分为两类之一：“树边”（属于生成树的边）和“非树边”（根据算法和上下文，也称为返祖边、前向边或横向边），即不包含在生成树中的 $G$ 的边。\n\n请确定，无论起始节点是什么，也无论使用的是 BFS 还是 DFS，将会找到的树边数量和非树边数量。请分别用 $n$ 和 $m$ 来表示树边的数量和非树边的数量。", "solution": "设 $G=(V,E)$ 是一个连通无向图，其中 $|V|=n$ 且 $|E|=m$。从任意起始节点运行 BFS 或 DFS 都会构建一棵生成树 $T$，因为：\n- 遍历会访问所有 $n$ 个顶点（连通性）。\n- 每当首次发现一个新顶点时，都恰好有一条边（通往其在遍历中的父节点的边）被添加到 $T$ 中。\n- 根据构造过程，$T$ 中不会形成环。\n\n在一棵有 $n$ 个顶点的树中，边的数量是 $n-1$。因此，树边的数量是\n$$\n|E_{T}|=n-1.\n$$\n图 $G$ 的边可划分为树边和非树边，所以\n$$\nm=|E|=|E_{T}|+|E_{\\text{non-tree}}|.\n$$\n因此，非树边的数量是\n$$\n|E_{\\text{non-tree}}|=m-|E_{T}|=m-(n-1)=m-n+1.\n$$\n这些数量与起始节点无关，也与使用的是 BFS 还是 DFS 无关，因为任何一棵包含 $n$ 个顶点的生成树都恰好有 $n-1$ 条边。", "answer": "$$\\boxed{\\begin{pmatrix} n-1 & m-n+1 \\end{pmatrix}}$$", "id": "1483535"}, {"introduction": "我们已经理解了非树边是环路形成的关键，但如何在复杂的网络中通过程序自动地发现它们呢？本练习将广度优先搜索 (BFS) 算法置于实践中，要求你识别在遍历过程中标志着环路存在的明确信号。这不仅是关于路径查找，更是关于如何利用图遍历算法来诊断和理解图的拓扑特性。[@problem_id:1354171]", "problem": "一家名为“CloudConnect”的初创公司的网络工程团队正在为其数据中心实施一种新的路由协议。该服务器网络被建模为一个连通无向图，其中服务器是顶点，直接的数据链路是边。该协议的一个关键组成部分是一个检查冗余路径的例程，这些冗余路径在图中表现为环。为了执行此检查，该协议从一个任意的源服务器启动广度优先搜索（BFS）。\n\nBFS算法系统地逐层探索图。它使用一个队列来管理待访问的服务器，为每个服务器设置一个 `visited` 标记来跟踪发现状态，并为每个服务器设置一个 `parent` 指针来重构发现路径（即 `parent[v]` 是首先发现 `v` 的服务器 `u`）。\n\n您的任务是确定在此BFS遍历执行期间遇到的何种精确条件，能够明确无误地表明网络图中至少包含一个环。\n\n假设BFS在一个连通无向图上运行。设 `u` 是当前正在处理的服务器（即刚从队列前端移除的服务器），设 `v` 是根据图的邻接表 `u` 的一个邻居。\n\n以下哪个事件是检测到环的充要条件？\n\nA. 在处理服务器 `u` 时，算法发现一个邻居服务器 `v` 已经被标记为 `visited`。\n\nB. 在处理服务器 `u` 时，算法发现一个邻居服务器 `v` 已经被标记为 `visited`，并且是 `u` 在BFS树中的 `parent`。\n\nC. 在BFS遍历完成后，`parent` 数组中设置了父节点的节点总数不等于图中的服务器总数。\n\nD. 在处理服务器 `u` 时，算法发现一个邻居服务器 `v` 已经被标记为 `visited`，但不是 `u` 在BFS树中的 `parent`。\n\nE. BFS队列变空，但已访问的服务器数量少于图中的服务器总数。", "solution": "我们将网络建模为一个连通无向图，并从某个源点运行BFS。对于BFS发现的每个顶点 $w \\neq s$，边 $(\\mathrm{parent}[w], w)$ 属于BFS树 $T$。结构 $T$ 是该图的一棵生成树（因为图是连通的且BFS会到达每个顶点），因此在 $T$ 中任意两个顶点之间存在唯一的简单路径。\n\nD的充分性：假设在处理顶点 $u$ 时，我们检查到一个相邻顶点 $v$，该顶点 $v$ 已被标记为 $\\mathrm{visited}$ 且 $v \\neq \\mathrm{parent}[u]$。考虑在BFS树 $T$ 中从 $u$ 到 $v$ 的唯一路径，记为 $P_{T}(u,v)$。因为 $T$ 是一棵树，所以 $P_{T}(u,v)$ 是简单且唯一的。将非树边 $(u,v)$ 添加到 $P_{T}(u,v)$ 中会形成一个简单环：\n$$\n\\text{cycle} = P_{T}(u,v) \\cup \\{(u,v)\\}.\n$$\n因此，遇到一个已被访问且不是 `parent[u]` 的邻居 `v`，可以保证图中存在一个环。\n\nD的必要性：假设图中包含一个环。设 $T$ 是由 `parent` 指针定义的BFS树。因为图中有环，所以至少存在一条原始边 $e = (a,b)$ 不在 $T$ 中（在相同顶点集上的任何树都不能包含环的所有边）。由于 $T$ 跨越所有顶点，所以在 $T$ 中 $a$ 和 $b$ 之间存在一条唯一路径。在BFS期间，设 $x$ 是边 $e$ 中较后被处理的端点，而 $y$ 是另一个端点。当处理 $x$ 时，$y$ 已经被标记为 `visited`，并且因为 $e \\notin T$，所以我们有 $\\mathrm{parent}[x] \\neq y$。当从 $x$ 的邻接表中检查边 $(x,y)$ 时，算法会发现一个邻居 $y$，它已被 `visited` 并且不是 $x$ 的 `parent`。因此，如果图中存在环，则D中的事件必然发生。\n\n所以，D是一个充要条件。\n\n为什么其他选项不成立：\n- A不充分：在任何连通无环图（一棵树）中，当处理顶点 `u` 时，其邻居 $v = \\mathrm{parent}[u]$ 已被 `visited`，但图中没有环。\n- B不充分且无信息量：在任何BFS树中，对于每个非根顶点，遇到已被 `visited` 的父节点是系统性发生的，无论是否存在环。\n- C不相关：`parent` 数组的大小是一个固定的实现细节；在连通图中，无论是否存在环，BFS都会访问所有顶点并为所有 $w \\neq s$ 填充 $\\mathrm{parent}[w]$。\n- E与连通性矛盾：在连通图中，BFS会访问所有顶点，因此队列只有在访问完整个顶点集后才会变空；这种情况不可能发生，也无法说明环的存在。\n\n因此，精确的充要条件是选项D。", "answer": "$$\\boxed{D}$$", "id": "1354171"}]}