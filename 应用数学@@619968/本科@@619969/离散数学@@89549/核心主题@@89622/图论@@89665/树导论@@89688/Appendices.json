{"hands_on_practices": [{"introduction": "在我们研究树的结构时，一个常见的类型是“满 $m$ 叉树”，其中每个内部节点（或“父节点”）都有固定的 $m$ 个子节点。这种结构在计算机科学的文件系统、组织结构图和某些数据结构中非常普遍。通过这个练习，你将推导出一个基础而关键的公式，它将树中内部节点的数量与树的总大小联系起来，这对于网络设计和资源估算至关重要 [@problem_id:1378419]。", "problem": "在图论中，一个有根树如果其每个父节点（一个内部顶点）都恰好有 $m$ 个子节点，则称其为**满 $m$ 元树**。没有子节点的顶点称为叶节点。\n\n考虑一种新型分布式加密账本的拟议架构。其数据结构是一棵满 $m$ 元树，其中内部顶点代表交易中心，叶节点代表单个交易记录。在这种特定的账本设计中，规定每个交易中心必须分支出恰好 $m=5$ 个其他节点（可以是其他交易中心或交易记录）。\n\n如果该账本的某个特定实例恰好包含 121 个交易中心，那么这个树结构中的节点总数（交易中心和交易记录的总和）是多少？", "solution": "令 $m$ 表示元数，$i$ 表示内部顶点（交易中心）的数量，$l$ 表示叶节点（交易记录）的数量，$n$ 表示节点总数。\n\n在任何树中，边的数量等于 $n-1$。在一棵满 $m$ 元树中，每个内部顶点都恰好有 $m$ 个子节点，因此总边数也为\n$$\nE = m i.\n$$\n将两者相等可得\n$$\nm i = n - 1 \\quad \\Rightarrow \\quad n = m i + 1.\n$$\n代入 $m=5$ 和 $i=121$ 得\n$$\nn = 5 \\cdot 121 + 1 = 606.\n$$\n作为一致性检验，叶节点的数量为\n$$\nl = (m-1)i + 1 = 4 \\cdot 121 + 1 = 485,\n$$\n并且 $i + l = 121 + 485 = 606$，这与上面的结果一致。", "answer": "$$\\boxed{606}$$", "id": "1378419"}, {"introduction": "并非所有树都具有规则的结构。在更一般的情况下，节点的度（即连接到该节点的边的数量）可能会有很大差异。这个练习将引导你超越特定类型的树，应用图论中最基本的定理之一——握手引理——来解决一个关于任意树的问题。你将学习如何仅通过内部节点的度数之和与总节点数，来精确确定叶子节点的数量，这展示了基本原理在分析复杂网络时的强大威力 [@problem_id:1378393]。", "problem": "一家科技公司正在为一个新的分布式计算集群设计网络架构。设计规定，网络拓扑必须是一棵树，以防止数据回路，并确保任意两个节点之间有且仅有一条唯一路径。网络中的节点分为两类：“边缘节点”和“核心路由器”。\n\n边缘节点是度恰好为一的计算节点，作为网络中的入口或终端点。核心路由器是度大于一的内部计算节点，负责在网络的不同部分之间路由流量。\n\n整个网络（包括边缘节点和核心路由器）中的节点总数用 $n$ 表示。网络中所有核心路由器的度之和为 $S$。\n\n根据这些信息，推导出一个用 $n$ 和 $S$ 表示网络中边缘节点总数的通用表达式。", "solution": "设 $L$ 表示边缘节点（度恰好为 $1$）的数量，设 $I$ 表示核心路由器（度大于 $1$）的数量。则 $n = L + I$。\n\n在任何有 $n$ 个节点的树中，边的数量为 $n - 1$。根据握手引理，所有顶点的度之和等于边数的两倍，因此总度数为 $2(n - 1)$。\n\n所有节点的度之和等于核心路由器的度之和加上边缘节点的度之和。根据定义，核心路由器的度之和为 $S$，每个边缘节点的度为 $1$，所以所有边缘节点的度之和为 $L$。因此，\n$$\nS + L = 2(n - 1).\n$$\n求解 $L$ 可得\n$$\nL = 2(n - 1) - S = 2n - 2 - S.\n$$\n这就得出了用 $n$ 和 $S$ 表示的边缘节点总数的表达式。", "answer": "$$\\boxed{2n-2-S}$$", "id": "1378393"}, {"introduction": "除了分析树的性质，我们如何能够唯一地表示或从压缩信息中重建一棵树呢？这个实践练习将向你介绍一个优美而强大的工具：Prüfer 序列。通过一个具体的算法，你将亲手从一个简单的数字序列中重建出整个带标签树的拓扑结构。这个过程不仅能加深你对树的结构的理解，还揭示了组合数学中一个关于树的计数和编码的深刻结果 [@problem_id:1378435]。", "problem": "一位系统管理员正在尝试重建一个由 $n=8$ 台服务器组成的网络拓扑，这些服务器用从 $1$ 到 $8$ 的唯一整数进行标记。原始网络是一个树形结构。在退役之前，一个诊断工具通过重复应用以下过程生成了一个长度为 $n-2$ 的序列，直到只剩下两台服务器相连：\n1. 找到作为叶节点（即只与一个其他服务器相连）且具有最小整数标签的服务器。\n2. 记录这个最小叶节点所连接的服务器的标签。\n3. 从网络中移除这个最小叶节点及其连接。\n\n该工具记录的诊断序列为 $S = (4, 4, 5, 5, 6, 6)$。\n您的任务是确定定义该网络树形拓扑的原始边集。以下哪个边集代表了原始网络？边表示为服务器标签的无序对。\n\nA. $\\{(1,4), (2,4), (3,5), (4,5), (5,6), (6,7), (6,8)\\}$\n\nB. $\\{(1,2), (2,3), (3,4), (4,5), (5,6), (6,7), (7,8)\\}$\n\nC. $\\{(1,8), (2,8), (3,8), (4,8), (5,8), (6,8), (7,8)\\}$\n\nD. $\\{(1,4), (2,4), (3,5), (4,5), (5,6), (6,7), (7,8)\\}", "solution": "我们识别出所描述的诊断序列是一个在 $n=8$ 个顶点上的带标签树的 Prüfer 序列，它是通过重复移除最小标签的叶节点并记录其邻居而产生的。给定 Prüfer 序列 $S=(4,4,5,5,6,6)$，我们使用标准的 Prüfer 解码算法来重建这棵树。\n\n首先，使用以下公式计算每个顶点 $v\\in\\{1,2,\\dots,8\\}$ 的度 $d(v)$：\n$$d(v) = 1 + (\\text{v 在 S 中出现的次数})$$\n统计序列 $S$ 可得：$4$ 出现 $2$ 次，$5$ 出现 $2$ 次，$6$ 出现 $2$ 次，其他所有数字出现 $0$ 次。因此，\n$$\\begin{aligned}\n&d(1)=1,\\quad d(2)=1,\\quad d(3)=1,\\quad d(4)=3,\\\\\n&d(5)=3,\\quad d(6)=3,\\quad d(7)=1,\\quad d(8)=1.\n\\end{aligned}$$\n\n将度为 $1$ 的顶点初始化为当前叶节点集合：$\\{1,2,3,7,8\\}$。从左到右遍历序列 $S$；在每一步中，将最小的叶节点连接到当前序列元素，将两者对应的度减 $1$，然后移除该叶节点（其度变为 $0$），并继续。\n\n处理 $S_{1}=4$：最小的叶节点是 $1$。添加边 $(1,4)$。更新\n$$d(1): 1 \\to 0, \\quad d(4): 3 \\to 2$$\n当前叶节点：$\\{2,3,7,8\\}$。\n\n处理 $S_{2}=4$：最小的叶节点是 $2$。添加边 $(2,4)$。更新\n$$d(2): 1 \\to 0, \\quad d(4): 2 \\to 1$$\n当前叶节点：$\\{3,4,7,8\\}$。\n\n处理 $S_{3}=5$：最小的叶节点是 $3$。添加边 $(3,5)$。更新\n$$d(3): 1 \\to 0, \\quad d(5): 3 \\to 2$$\n当前叶节点：$\\{4,7,8\\}$。\n\n处理 $S_{4}=5$：最小的叶节点是 $4$。添加边 $(4,5)$。更新\n$$d(4): 1 \\to 0, \\quad d(5): 2 \\to 1$$\n当前叶节点：$\\{5,7,8\\}$。\n\n处理 $S_{5}=6$：最小的叶节点是 $5$。添加边 $(5,6)$。更新\n$$d(5): 1 \\to 0, \\quad d(6): 3 \\to 2$$\n当前叶节点：$\\{7,8\\}$。\n\n处理 $S_{6}=6$：最小的叶节点是 $7$。添加边 $(7,6)$。更新\n$$d(7): 1 \\to 0, \\quad d(6): 2 \\to 1$$\n序列已用尽；剩下的两个度为 $1$ 的顶点是 $6$ 和 $8$。连接它们：\n$(6,8)$.\n\n收集所有边，重建的树的边集为\n$$\n\\{(1,4),\\,(2,4),\\,(3,5),\\,(4,5),\\,(5,6),\\,(6,7),\\,(6,8)\\},\n$$\n这与选项 A 一致。", "answer": "$$\\boxed{A}$$", "id": "1378435"}]}