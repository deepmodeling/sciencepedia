{"hands_on_practices": [{"introduction": "镜像法是求解具有简单边界的域中泊松方程的一种关键技巧。其核心思想是在求解域外部放置虚拟的“镜像”源，使得原始源和所有镜像源叠加产生的场精确地满足边界条件。第一个练习 [@problem_id:2108820] 为二维拉普拉斯算子在第一象限内的情形提供了一个具体的应用，这是一个在静电学和热流问题中常见的经典场景。通过计算格林函数的值，您将亲身体验这种优雅方法的基本原理。", "problem": "考虑一个大的薄导电板，其形状占据笛卡尔平面的第一象限（$x \\ge 0, y \\ge 0$）。板在正x轴和正y轴上的边界保持恒定温度为零。在坐标 $\\mathbf{x'} = (a, b)$ 处有一个单一的稳态点热源，其中 $a > 0$ 且 $b > 0$。\n\n板中的稳态温度分布 $T(\\mathbf{x})$ 由二维泊松方程描述，在此情况下，该方程由格林函数 $G(\\mathbf{x}, \\mathbf{x'})$ 控制。该系统的格林函数是方程 $\\nabla^2 G(\\mathbf{x}, \\mathbf{x'}) = \\delta(\\mathbf{x} - \\mathbf{x'})$ 在第一象限内的解，并满足齐次狄利克雷边界条件 $G(x, 0) = 0$ (对于 $x > 0$) 和 $G(0, y) = 0$ (对于 $y > 0$)。在无界域中，二维拉普拉斯方程的基本解与 $\\frac{1}{2\\pi}\\ln(|\\mathbf{r}|)$ 成正比，其中 $|\\mathbf{r}|$ 是到源的距离。\n\n假设热源位于 $\\mathbf{x'} = (1, 2)$。计算格林函数 $G(\\mathbf{x}, \\mathbf{x'})$ 在测量点 $\\mathbf{x} = (3, 1)$ 处的值。\n\n用包含 $\\pi$ 和自然对数的单个、精确、闭式解析表达式来表示你的答案。", "solution": "我们使用镜像法求解在第一象限内、在正坐标轴上满足齐次狄利克雷边界条件的格林函数。对于二维拉普拉斯算子，按照惯例 $\\nabla^{2}G(\\mathbf{x},\\mathbf{x}')=\\delta(\\mathbf{x}-\\mathbf{x}')$，其自由空间基本解为 $\\Phi(\\mathbf{x},\\mathbf{x}')=\\frac{1}{2\\pi}\\ln|\\mathbf{x}-\\mathbf{x}'|$。为了强制满足 $G(x,0)=0$ (对于 $x>0$) 和 $G(0,y)=0$ (对于 $y>0$)，我们在 $\\mathbf{x}'=(a,b)$ 关于坐标轴的反射点处放置三个符号交替的镜像源。这给出\n$$\nG(\\mathbf{x},\\mathbf{x}')=\\frac{1}{2\\pi}\\Big[\\ln|\\mathbf{x}-(a,b)|-\\ln|\\mathbf{x}-(-a,b)|-\\ln|\\mathbf{x}-(a,-b)|+\\ln|\\mathbf{x}-(-a,-b)|\\Big].\n$$\n对于给定的点 $\\mathbf{x}'=(1,2)$ 和 $\\mathbf{x}=(3,1)$，计算四个距离：\n$$\nR_{1}=|\\mathbf{x}-(1,2)|=\\sqrt{(3-1)^{2}+(1-2)^{2}}=\\sqrt{5},\\quad\nR_{2}=|\\mathbf{x}-(-1,2)|=\\sqrt{(3+1)^{2}+(1-2)^{2}}=\\sqrt{17},\n$$\n$$\nR_{3}=|\\mathbf{x}-(1,-2)|=\\sqrt{(3-1)^{2}+(1+2)^{2}}=\\sqrt{13},\\quad\nR_{4}=|\\mathbf{x}-(-1,-2)|=\\sqrt{(3+1)^{2}+(1+2)^{2}}=\\sqrt{25}=5.\n$$\n代入 $G$ 的表达式，\n$$\nG(\\mathbf{x},\\mathbf{x}')=\\frac{1}{2\\pi}\\big[\\ln R_{1}-\\ln R_{2}-\\ln R_{3}+\\ln R_{4}\\big]\n=\\frac{1}{2\\pi}\\ln\\!\\left(\\frac{R_{1}R_{4}}{R_{2}R_{3}}\\right)\n=\\frac{1}{2\\pi}\\ln\\!\\left(\\frac{5\\sqrt{5}}{\\sqrt{221}}\\right).\n$$\n使用对数性质，\n$$\n\\frac{1}{2\\pi}\\ln\\!\\left(\\frac{5\\sqrt{5}}{\\sqrt{221}}\\right)\n=\\frac{1}{4\\pi}\\big(3\\ln 5-\\ln 221\\big)\n=\\frac{1}{4\\pi}\\ln\\!\\left(\\frac{125}{221}\\right).\n$$\n这就是用 $\\pi$ 和自然对数表示的精确闭式表达式。", "answer": "$$\\boxed{\\frac{1}{4\\pi}\\ln\\!\\left(\\frac{125}{221}\\right)}$$", "id": "2108820"}, {"introduction": "镜像法的威力远不止于处理简单的狄利克雷（Dirichlet）边界条件，它同样能有效处理诺依曼（Neumann）边界条件（边界上法向导数为零）甚至是混合边界条件。这个练习 [@problem_id:1157220] 将挑战您在相同的象限几何中构造一个格林函数，但这次边界上同时存在狄利克雷和诺依曼条件。这要求您更深刻地理解如何选择镜像电荷的符号与位置以满足不同的物理约束，从而极大地提升您解决问题的灵活性。", "problem": "在区域 $\\Omega$ 中，二维拉普拉斯算子 $\\nabla^2 = \\frac{\\partial^2}{\\partial x^2} + \\frac{\\partial^2}{\\partial y^2}$ 的格林函数 $G(\\mathbf{r}, \\mathbf{r}')$ 是方程 $\\nabla^2 G(\\mathbf{r}, \\mathbf{r}') = \\delta(\\mathbf{r} - \\mathbf{r}')$ 在边界 $\\partial\\Omega$ 上满足特定边界条件下的解，其中源点 $\\mathbf{r}'$ 和场点 $\\mathbf{r}$ 均在 $\\Omega$ 内。在无界二维空间中，这就是自由空间格林函数，$G_0(\\mathbf{r}, \\mathbf{r}') = \\frac{1}{2\\pi} \\ln|\\mathbf{r} - \\mathbf{r}'|$。\n\n镜像法是在具有简单平面边界的区域中构造格林函数的一种强大技巧。该方法涉及在区域 $\\Omega$ 外部放置一组虚拟的“镜像”源。选择这些镜像源的位置和强度，使得原始源和所有镜像源产生的叠加势满足给定的边界条件。\n- 对于平面上的狄利克雷边界条件 ($G=0$)，在源点关于该平面的镜像位置处放置一个强度相反的镜像源。\n- 对于平面上的诺伊曼边界条件 ($\\frac{\\partial G}{\\partial n}=0$，其中 $\\mathbf{n}$ 是法向量)，在镜像位置处放置一个强度相同的镜像源。\n\n考虑二维笛卡尔平面的第一象限，定义为 $\\Omega = \\{(x, y) \\mid x > 0, y > 0 \\}$。该区域的边界是 x 轴正半轴和 y 轴正半轴。一个点源位于该象限内的 $\\mathbf{r}' = (x', y')$ 处。\n\n你的任务是推导该区域中二维拉普拉斯算子的格林函数 $G(x, y; x', y')$，其须满足以下混合边界条件：\n1. 在 x 轴正半轴上的狄利克雷条件：对于所有 $x > 0$，有 $G(x, 0; x', y') = 0$。\n2. 在 y 轴正半轴上的诺伊曼条件：对于所有 $y > 0$，有 $\\frac{\\partial G}{\\partial x}(0, y; x', y') = 0$。\n\n请以简化的闭合形式给出 $G(x, y; x', y')$ 的最终表达式。", "solution": "我们寻求 $G(x,y;x',y')$ 满足\n$$\\nabla^2 G=\\delta(x-x')\\delta(y-y')\\,,\\quad x>0,\\;y>0,$$\n且满足\n$$G(x,0;x',y')=0\\quad(\\text{y=0 上的狄利克雷条件}),$$ \n$$\\frac{\\partial G}{\\partial x}(0,y;x',y')=0\\quad(\\text{x=0 上的诺伊曼条件}).$$\n\n1. 二维自由空间格林函数：\n$$G_0(r,r')=\\frac1{2\\pi}\\ln\\bigl|\\,\\mathbf r-\\mathbf r'\\bigr|.$$\n\n2. 引入镜像源：\n- $y=0$ 处为狄利克雷条件：在 $(x',-y')$ 处放置电荷为 -1 的镜像源。\n- $x=0$ 处为诺伊曼条件：在 $(-x',y')$ 处放置电荷为 +1 的镜像源。\n- 组合反射得到在 $(-x',-y')$ 处电荷为 -1 的镜像源。\n\n3. 叠加：\n$$G=\\frac1{2\\pi}\\Bigl[\\ln r_1-\\ln r_2+\\ln r_3-\\ln r_4\\Bigr],$$\n其中\n$$r_1=\\sqrt{(x-x')^2+(y-y')^2},\\quad\nr_2=\\sqrt{(x-x')^2+(y+y')^2},$$\n$$r_3=\\sqrt{(x+x')^2+(y-y')^2},\\quad\nr_4=\\sqrt{(x+x')^2+(y+y')^2}.$$\n\n4. 合并对数项：\n$$G=\\frac1{4\\pi}\\ln\\!\\frac{r_1^2\\,r_3^2}{r_2^2\\,r_4^2}\n=\\frac1{4\\pi}\\ln\\frac{[(x-x')^2+(y-y')^2]\\,[ (x+x')^2+(y-y')^2 ]}\n{[(x-x')^2+(y+y')^2]\\,[ (x+x')^2+(y+y')^2]}\\,. $$", "answer": "$$\\boxed{\\frac{1}{4\\pi}\\ln\\!\\left(\\frac{[(x-x')^2+(y-y')^2]\\,[ (x+x')^2+(y-y')^2 ]}{[(x-x')^2+(y+y')^2]\\,[ (x+x')^2+(y+y')^2]}\\right)}$$", "id": "1157220"}, {"introduction": "尽管镜像法非常巧妙，但其适用性局限于高度对称的几何形状。对于具有复杂形状的现实世界问题，数值方法是不可或缺的。本练习 [@problem_id:2392716] 将引导您使用有限差分法（一种计算物理的基石）来计算一个“离散”格林函数。您将把连续的拉普拉斯算子 $ \\nabla^2 $ 转化为一个矩阵，并看到格林函数如何作为该矩阵的逆出现，这为您在连续解析理论和实际计算机实现之间架起了一座至关重要的桥梁。", "problem": "本题要求您在齐次狄利克雷边界条件下，使用适合计算物理学高等本科课程的有限差分方法离散化，计算二维拉普拉斯算子的离散格林函数。您的任务是设计并实现一个程序，该程序能从第一性原理构建离散算子，并在小尺寸网格上评估离散格林函数的特定定量性质。\n\n连续问题的基础是标量场的泊松方程，其中在有界域 $\\Omega \\subset \\mathbb{R}^2$ 上，满足齐次狄利克雷边界条件的负拉普拉斯算子的格林函数 $G$ 满足：\n\n$$\n-\\nabla^2 G(\\mathbf{x};\\mathbf{x}_0) = \\delta(\\mathbf{x}-\\mathbf{x}_0) \\quad \\text{in } \\Omega, \n\\qquad \nG(\\mathbf{x};\\mathbf{x}_0)=0 \\quad \\text{on } \\partial\\Omega,\n$$\n\n其中 $\\delta$ 是狄拉克 $\\delta$ 分布。\n\n以此为基础，在单位正方形 $\\Omega = (0,1)\\times(0,1)$ 上，对负拉普拉斯算子推导其在均匀笛卡尔网格上的中心差分有限差分近似，边界条件为 $\\partial \\Omega$ 上的齐次狄利克雷边界条件。考虑一个每个空间坐标方向有 $M$ 个内部点的均匀网格，索引为 $i \\in \\{1,\\dots,M\\}$ 和 $j \\in \\{1,\\dots,M\\}$，网格间距为 $h = \\frac{1}{M+1}$。用 $v_{i,j}$ 表示位于内部节点 $(x_i,y_j)=(ih,jh)$ 处的网格函数值。通过将所有虚拟值或边界值设为 $0$ 来施加齐次狄利克雷边界条件。\n\n令 $L_h$表示近似负拉普拉斯算子 $-\\nabla^2$ 的有限差分算子。与内部节点 $(i_0,j_0)$ 处的源相关联的离散格林函数 $G^{(i_0,j_0)}$ 由以下线性系统定义：\n\n$$\n(L_h G^{(i_0,j_0)})_{i,j} = \\delta_{i,i_0}\\,\\delta_{j,j_0}\n$$\n\n对于所有内部索引 $i \\in \\{1,\\dots,M\\}$，$j \\in \\{1,\\dots,M\\}$，其中 $\\delta_{i,i_0}$ 和 $\\delta_{j,j_0}$ 是克罗内克 $\\delta$ 符号。此处，右侧表示离散情况下选定内部节点处的单位源。算子 $L_h$ 必须通过关于 $(x_i,y_j)$ 的二阶泰勒展开推导得出，并且必须对二阶导数使用一致的中心差分近似。最终的离散算子应表示为一个稀疏、对称、正定的线性系统 $A \\in \\mathbb{R}^{M^2 \\times M^2}$，作用于向量化的内部网格函数，其右侧是对应于源位置的标准欧几里得基向量 $e_k$。使用行主序，线性索引为：\n\n$$\np(i,j) = (j-1)M + (i-1),\n$$\n\n使得 $p \\in \\{0,1,\\dots,M^2-1\\}$。\n\n您的程序必须：\n- 使用负拉普拉斯算子与齐次狄利克雷边界条件的中心差分方法离散化，从第一性原理构建矩阵 $A$。\n- 对于每个指定的测试用例，组装与指定源节点相对应的单位源向量 $e_k$，求解线性系统 $A\\,g = e_k$ 以获得离散格林函数向量 $g \\in \\mathbb{R}^{M^2}$，并提取所要求的定量输出。\n\n本问题中没有物理单位；所有量均为无量纲。所有角度（如果在您的推导中出现）必须以弧度为单位，但此处不需要角度。\n\n测试套件：\n实现以下 $4$ 个用例。对于所有要求输出的浮点数，请四舍五入到指定的小数位数。\n\n- 测试用例 1 (一般情况):\n  - $M=4$, 源 $(i_0, j_0)=(2, 3)$, 观测点 $(i_*, j_*)=(1, 1)$。\n  - 输出: 标量值 $G^{(2,3)}_{1,1}$，以浮点数形式表示，四舍五入到 $10$ 位小数。\n\n- 测试用例 2 (近边界源和自身值):\n  - $M=3$, 源 $(i_0, j_0)=(1, 2)$, 观测点 $(i_*, j_*)=(1, 2)$。\n  - 输出: 标量值 $G^{(1,2)}_{1,2}$，以浮点数形式表示，四舍五入到 $10$ 位小数。\n\n- 测试用例 3 (离散格林函数的对称性检验):\n  - $M=4$, 源 $(i_0, j_0)=(1, 3)$, 观测点 $(i_*, j_*)=(3, 1)$。\n  - 计算 $G^{(1,3)}_{3,1}$ 和 $G^{(3,1)}_{1,3}$。如果 $|G^{(1,3)}_{3,1} - G^{(3,1)}_{1,3}| < 10^{-12}$，则输出布尔值 $\\text{True}$，否则输出 $\\text{False}$。\n\n- 测试用例 4 (离散方程残差):\n  - $M=5$, 源 $(i_0, j_0)=(3, 2)$。\n  - 令 $g$ 为 $A\\,g = e_k$ 的解。构建残差 $r = A\\,g - e_k$ 并输出 $\\|r\\|_\\infty = \\max_\\ell |r_\\ell|$，四舍五入到 $12$ 位小数。\n\n最终输出格式：\n您的程序应生成单行输出，其中包含以上 $4$ 个测试用例的结果，结果为逗号分隔的列表，并用方括号括起来。例如，输出必须具有以下形式：\n\n$$\n[\\text{float},\\text{float},\\text{boolean},\\text{float}]\n$$\n\n其中浮点数四舍五入到其要求的小数位数，布尔值打印为 $\\text{True}$ 或 $\\text{False}$。不应打印其他任何文本。", "solution": "所提出的问题是计算物理中一个标准的、适定的练习，涉及二维拉普拉斯算子格林函数的数值近似。所有提供的信息都是自洽的、科学上合理的且无歧义的。因此，该问题是有效的，我们可以继续进行求解。\n\n问题的核心是找到离散格林函数，即网格上泊松方程的解。连续问题由下式给出：\n$$\n-\\nabla^2 G(\\mathbf{x};\\mathbf{x}_0) = \\delta(\\mathbf{x}-\\mathbf{x}_0)\n$$\n在单位正方形 $\\Omega = (0,1)\\times(0,1)$ 上，并带有齐次狄利克雷边界条件。我们将使用二阶精确的中心有限差分格式来离散化此方程。\n\n首先，让我们推导负拉普拉斯算子 $-\\nabla^2$ 的离散近似。考虑一个标量场 $v(x,y)$。$v$ 在 $x$ 方向上围绕点 $(x,y)$ 的泰勒级数展开为：\n$$\nv(x+h, y) = v(x,y) + h\\frac{\\partial v}{\\partial x} + \\frac{h^2}{2}\\frac{\\partial^2 v}{\\partial x^2} + \\frac{h^3}{6}\\frac{\\partial^3 v}{\\partial x^3} + \\frac{h^4}{24}\\frac{\\partial^4 v}{\\partial x^4} + O(h^5)\n$$\n$$\nv(x-h, y) = v(x,y) - h\\frac{\\partial v}{\\partial x} + \\frac{h^2}{2}\\frac{\\partial^2 v}{\\partial x^2} - \\frac{h^3}{6}\\frac{\\partial^3 v}{\\partial x^3} + \\frac{h^4}{24}\\frac{\\partial^4 v}{\\partial x^4} - O(h^5)\n$$\n将这两个展开式相加并对二阶导数进行整理，得到中心差分公式：\n$$\n\\frac{\\partial^2 v}{\\partial x^2} = \\frac{v(x+h, y) - 2v(x,y) + v(x-h, y)}{h^2} - \\frac{h^2}{12}\\frac{\\partial^4 v}{\\partial x^4} + O(h^4)\n$$\n该近似是二阶精确的，误差项为 $O(h^2)$。关于 $y$ 的偏导数也存在类似的公式。\n\n在间距为 $h$ 的均匀笛卡尔网格上，令 $v_{i,j}$ 表示节点 $(x_i, y_j) = (ih, jh)$ 处的函数值。该节点的二阶偏导数近似为：\n$$\n\\frac{\\partial^2 v}{\\partial x^2}\\bigg|_{(i,j)} \\approx \\frac{v_{i+1,j} - 2v_{i,j} + v_{i-1,j}}{h^2}\n$$\n$$\n\\frac{\\partial^2 v}{\\partial y^2}\\bigg|_{(i,j)} \\approx \\frac{v_{i,j+1} - 2v_{i,j} + v_{i,j-1}}{h^2}\n$$\n因此，负拉普拉斯算子 $-\\nabla^2 v = -(\\frac{\\partial^2 v}{\\partial x^2} + \\frac{\\partial^2 v}{\\partial y^2})$ 可由离散算子 $L_h$ 近似：\n$$\n(L_h v)_{i,j} = \\frac{-(v_{i+1,j} - 2v_{i,j} + v_{i-1,j}) - (v_{i,j+1} - 2v_{i,j} + v_{i,j-1})}{h^2} = \\frac{4v_{i,j} - v_{i+1,j} - v_{i-1,j} - v_{i,j-1} - v_{i,j+1}}{h^2}\n$$\n这就是著名的负拉普拉斯算子的五点差分格式。\n\n本问题要求在每个维度有 $M$ 个内部点的网格上求解离散格林函数 $G^{(i_0,j_0)}$，其中 $i,j \\in \\{1, \\dots, M\\}$。网格间距为 $h = 1/(M+1)$。齐次狄利克雷边界条件意味着如果 $i$ 或 $j$ 为 $0$ 或 $M+1$，则 $v_{i,j} = 0$。根据问题陈述，离散格林函数的定义方程是：\n$$\n(L_h G^{(i_0,j_0)})_{i,j} = \\delta_{i,i_0}\\,\\delta_{j,j_0}\n$$\n这必须转换成一个矩阵系统。我们有 $M^2$ 个未知数，对应于 $M^2$ 个内部网格点上的格林函数值。我们将网格函数 $G_{i,j}$ 向量化为一个大小为 $M^2$ 的单列向量 $\\mathbf{g}$。问题指定了行主序，节点 $(i,j)$ 的线性索引由 $p(i,j) = (j-1)M + (i-1)$ 给出，其中 $p \\in \\{0, 1, \\dots, M^2-1\\}$。\n\n使用此索引方式，算子 $L_h$ 对网格函数的作用可以表示为矩阵-向量乘法 $A\\mathbf{g}$。矩阵 $A \\in \\mathbb{R}^{M^2 \\times M^2}$ 是离散拉普拉斯矩阵。矩阵系统的第 $p$ 行（其中 $p=p(i,j)$）的方程由五点差分格式推导得出：\n$$\n(A\\mathbf{g})_p = \\frac{1}{h^2} \\left(4g_p - g_{p(i-1,j)} - g_{p(i+1,j)} - g_{p(i,j-1)} - g_{p(i,j+1)}\\right)\n$$\n使用指定的索引方案，我们有 $p(i \\pm 1, j) = p \\pm 1$ 和 $p(i, j \\pm 1) = p \\pm M$。这使我们能够确定矩阵 $A$ 的结构：\n- 对角线元素，$A_{p,p} = 4/h^2$。\n- 对于 $x$ 方向的相邻元素，$A_{p, p \\pm 1} = -1/h^2$，前提是相邻元素不跨越边界（即，对于 $p-1$ 有 $i \\neq 1$，对于 $p+1$ 有 $i \\neq M$）。\n- 对于 $y$ 方向的相邻元素，$A_{p, p \\pm M} = -1/h^2$。\n\n离散方程的右侧 $\\delta_{i,i_0}\\delta_{j,j_0}$ 表示位于单个节点 $(i_0, j_0)$ 处的单位源。在向量化形式中，这是一个所有分量都为 $0$ 的向量，只有对应于源节点的分量为 $1$。这就是标准欧几里得基向量 $\\mathbf{e}_k$，其中 $k = p(i_0, j_0)$。\n\n因此，问题简化为求解以下线性方程组：\n$$\nA\\mathbf{g} = \\mathbf{e}_k\n$$\n解向量 $\\mathbf{g}$ 包含了在所有内部节点上评估的、源位于 $(i_0, j_0)$ 处的离散格林函数的值。矩阵 $A$ 是稀疏、对称和正定的，这保证了唯一解的存在。\n\n对于每个测试用例，程序将实现以下过程：\n1.  给定 $M$，计算网格间距 $h = 1/(M+1)$ 和系统大小 $N=M^2$。\n2.  根据五点差分格式和边界条件构建 $N \\times N$ 矩阵 $A$。\n3.  确定源节点 $(i_0, j_0)$ 的线性索引 $k$。\n4.  构建右侧向量 $\\mathbf{e}_k$。\n5.  求解线性系统 $A\\mathbf{g} = \\mathbf{e}_k$ 以获得向量 $\\mathbf{g}$。\n6.  从 $\\mathbf{g}$ 中提取所需值或按规定执行进一步计算。\n\n对于测试用例 3，我们必须验证格林函数的对称性，即 $G^{(i_0,j_0)}_{i_\\star,j_\\star} = G^{(i_\\star,j_\\star)}_{i_0,j_0}$。在矩阵表示法中，这是矩阵 $A$ 对称性的一个推论。解 $\\mathbf{g} = A^{-1}\\mathbf{e}_k$ 是逆矩阵 $A^{-1}$ 的第 $k$ 列。在观测点 $p$ 处的值是 $g_p = (A^{-1})_{p,k}$。因为 $A$ 是对称的，它的逆矩阵 $A^{-1}$ 也是对称的。因此，$(A^{-1})_{p,k} = (A^{-1})_{k,p}$，这证实了离散格林函数的互易原理。\n\n对于测试用例 4，在找到数值解 $\\mathbf{g}$ 后，我们计算残差 $\\mathbf{r} = A\\mathbf{g} - \\mathbf{e}_k$。无穷范数 $\\|\\mathbf{r}\\|_\\infty = \\max_\\ell |r_\\ell|$ 衡量了最大的逐分量误差，并可作为线性求解器精度的检验。对于一个稳定的数值方法，这个值应该接近于机器精度。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef get_linear_index(i, j, M):\n    \"\"\"\n    Converts 1-based (i,j) grid coordinates to a 0-based linear index.\n    The grid indices i, j run from 1 to M.\n    \"\"\"\n    if not (1 <= i <= M and 1 <= j <= M):\n        raise ValueError(\"Grid indices must be between 1 and M.\")\n    return (j - 1) * M + (i - 1)\n\ndef construct_laplacian_matrix(M):\n    \"\"\"\n    Constructs the sparse matrix for the 2D negative Laplacian operator\n    on an M x M grid with homogeneous Dirichlet boundary conditions.\n    \"\"\"\n    N = M * M\n    h = 1.0 / (M + 1)\n    h_sq_inv = 1.0 / h**2\n    A = np.zeros((N, N))\n\n    for j in range(1, M + 1):  # y-index from 1 to M\n        for i in range(1, M + 1):  # x-index from 1 to M\n            p = get_linear_index(i, j, M)\n            \n            # Diagonal entry from the central '4u_ij' term\n            A[p, p] = 4.0 * h_sq_inv\n            \n            # Off-diagonal entries for neighbors\n            # West neighbor (i-1, j)\n            if i > 1:\n                A[p, p - 1] = -1.0 * h_sq_inv\n            # East neighbor (i+1, j)\n            if i < M:\n                A[p, p + 1] = -1.0 * h_sq_inv\n            # South neighbor (i, j-1)\n            if j > 1:\n                A[p, p - M] = -1.0 * h_sq_inv\n            # North neighbor (i, j+1)\n            if j < M:\n                A[p, p + M] = -1.0 * h_sq_inv\n                \n    return A\n\ndef solve_green_function_system(M, source_coords):\n    \"\"\"\n    Solves the linear system Ag = e_k for the discrete Green's function.\n    Returns the solution vector g and the matrix A.\n    \"\"\"\n    A = construct_laplacian_matrix(M)\n    N = M * M\n    k = get_linear_index(source_coords[0], source_coords[1], M)\n    \n    e_k = np.zeros(N)\n    e_k[k] = 1.0\n    \n    g = np.linalg.solve(A, e_k)\n    return g, A\n\ndef solve():\n    \"\"\"\n    Main function to run all test cases and print the results.\n    \"\"\"\n    results = []\n\n    # Test case 1: general case\n    M1, source1, obs1 = 4, (2, 3), (1, 1)\n    g1, _ = solve_green_function_system(M1, source1)\n    p_star1 = get_linear_index(obs1[0], obs1[1], M1)\n    result1 = round(g1[p_star1], 10)\n    results.append(result1)\n\n    # Test case 2: near-boundary source and self-value\n    M2, source2, obs2 = 3, (1, 2), (1, 2)\n    g2, _ = solve_green_function_system(M2, source2)\n    p_star2 = get_linear_index(obs2[0], obs2[1], M2)\n    result2 = round(g2[p_star2], 10)\n    results.append(result2)\n\n    # Test case 3: symmetry check\n    M3, s3_1, o3_1, s3_2, o3_2 = 4, (1, 3), (3, 1), (3, 1), (1, 3)\n    \n    # First computation: source at (1,3), observe at (3,1)\n    g3_1, _ = solve_green_function_system(M3, s3_1)\n    p3_1_star = get_linear_index(o3_1[0], o3_1[1], M3)\n    val1 = g3_1[p3_1_star]\n    \n    # Second computation: source at (3,1), observe at (1,3)\n    g3_2, _ = solve_green_function_system(M3, s3_2)\n    p3_2_star = get_linear_index(o3_2[0], o3_2[1], M3)\n    val2 = g3_2[p3_2_star]\n\n    result3 = abs(val1 - val2) < 1e-12\n    results.append(result3)\n\n    # Test case 4: discrete equation residual\n    M4, source4 = 5, (3, 2)\n    g4, A4 = solve_green_function_system(M4, source4)\n    N4 = M4 * M4\n    k4 = get_linear_index(source4[0], source4[1], M4)\n    e_k4 = np.zeros(N4)\n    e_k4[k4] = 1.0\n    \n    residual = A4 @ g4 - e_k4\n    residual_norm_inf = np.max(np.abs(residual))\n    result4 = round(residual_norm_inf, 12)\n    results.append(result4)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2392716"}]}