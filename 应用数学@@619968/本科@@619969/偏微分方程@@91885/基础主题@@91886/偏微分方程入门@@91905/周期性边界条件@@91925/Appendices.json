{"hands_on_practices": [{"introduction": "要理解周期性系统，第一步是找出其“固有”的振动模式。这个练习将引导你通过求解一个基本的常微分方程 $y'' + \\lambda y = 0$ 来确定一个周期性区间上允许存在哪些解。这些被称为特征函数 (eigenfunctions) 的特殊解，构成了描述该系统任何状态的基本构建块，就像乐器发出的基频和泛音一样。完成这个练习将为使用傅里叶级数解决更复杂的偏微分方程问题奠定坚实的数学基础 [@problem_id:2124821]。", "problem": "考虑一个周长为 $L$ 的薄的、完全弹性的圆环。环上任意一点相对于其平衡圆形的微小、横向、不依赖于时间的位移 $y(x)$，可以用一个从 $0$ 到 $L$ 的坐标 $x$ 来描述。描述这些位移的控制方程由以下微分方程给出：\n$$y''(x) + \\lambda y(x) = 0$$\n其中 $\\lambda$ 是一个实常数，其值取决于环的物理性质和振动模式。\n\n由于该环是一个连续的圆，位移和位移的斜率在坐标区间的起点和终点必须相同。这一物理要求施加了以下周期性边界条件：\n$$y(0) = y(L) \\quad \\text{and} \\quad y'(0) = y'(L)$$\n为了使环呈现一个稳定的、非平凡的位移模式（即，对于一个 $y(x)$ 不恒等于零的解），常数 $\\lambda$ 只能取一组特定的离散值。\n\n下列哪个表达式正确地描述了所有存在非平凡解的可能的 $\\lambda$ 的非负值？在以下选项中，$n$ 是一个整数。\n\nA. $\\lambda_n = \\left(\\frac{n\\pi}{L}\\right)^2$, for $n=1, 2, 3, \\ldots$\n\nB. $\\lambda_n = \\left(\\frac{(2n-1)\\pi}{2L}\\right)^2$, for $n=1, 2, 3, \\ldots$\n\nC. $\\lambda_n = \\left(\\frac{2n\\pi}{L}\\right)^2$, for $n=0, 1, 2, \\ldots$\n\nD. $\\lambda_n = \\left(\\frac{n\\pi}{L}\\right)^2$, for $n=0, 1, 2, \\ldots$\n\nE. $\\lambda_n = \\left(\\frac{2n\\pi}{L}\\right)^2$, for $n=1, 2, 3, \\ldots$", "solution": "为找到允许边值问题有非平凡解的 $\\lambda$ 值，我们必须针对 $\\lambda$ 的不同情况分析该微分方程的通解。该微分方程为 $y''(x) + \\lambda y(x) = 0$，其周期性边界条件为 $y(0) = y(L)$ 和 $y'(0) = y'(L)$。\n\n情况 1：$\\lambda > 0$\n令 $\\lambda = k^2$，其中 $k > 0$。微分方程变为 $y''(x) + k^2 y(x) = 0$。其通解为：\n$$y(x) = C_1 \\cos(kx) + C_2 \\sin(kx)$$\n其导数为：\n$$y'(x) = -C_1 k \\sin(kx) + C_2 k \\cos(kx)$$\n现在，我们应用边界条件。\n由 $y(0) = y(L)$ 可得：\n$$C_1 \\cos(0) + C_2 \\sin(0) = C_1 \\cos(kL) + C_2 \\sin(kL)$$\n$$C_1 = C_1 \\cos(kL) + C_2 \\sin(kL)$$\n$$(1 - \\cos(kL))C_1 - \\sin(kL)C_2 = 0 \\quad (1)$$\n由 $y'(0) = y'(L)$ 可得：\n$$-C_1 k \\sin(0) + C_2 k \\cos(0) = -C_1 k \\sin(kL) + C_2 k \\cos(kL)$$\n$$C_2 k = -C_1 k \\sin(kL) + C_2 k \\cos(kL)$$\n假设 $k \\neq 0$，我们可以两边同除以 $k$：\n$$C_2 = -C_1 \\sin(kL) + C_2 \\cos(kL)$$\n$$\\sin(kL)C_1 + (1 - \\cos(kL))C_2 = 0 \\quad (2)$$\n我们得到了一个关于 $C_1$ 和 $C_2$ 的二元线性方程组。为了存在非平凡解（即 $C_1$ 和 $C_2$ 不全为零），系数矩阵的行列式必须为零。\n$$\n\\det \\begin{pmatrix} 1-\\cos(kL) & -\\sin(kL) \\\\ \\sin(kL) & 1-\\cos(kL) \\end{pmatrix} = 0\n$$\n$$(1-\\cos(kL))^2 - (-\\sin(kL))(\\sin(kL)) = 0$$\n$$(1 - 2\\cos(kL) + \\cos^2(kL)) + \\sin^2(kL) = 0$$\n$$1 - 2\\cos(kL) + (\\cos^2(kL) + \\sin^2(kL)) = 0$$\n$$1 - 2\\cos(kL) + 1 = 0$$\n$$2 - 2\\cos(kL) = 0$$\n$$\\cos(kL) = 1$$\n当 $kL = 2n\\pi$（其中 $n$ 为任意整数）时，此条件得到满足。由于我们假设了 $k > 0$ 和 $L > 0$，因此必须有 $n = 1, 2, 3, \\ldots$。\n所以，$k_n = \\frac{2n\\pi}{L}$，其中 $n = 1, 2, 3, \\ldots$。$\\lambda$ 的对应值为 $\\lambda_n = k_n^2 = \\left(\\frac{2n\\pi}{L}\\right)^2$，其中 $n = 1, 2, 3, \\ldots$。\n\n情况 2：$\\lambda = 0$\n微分方程变为 $y''(x) = 0$。其通解为：\n$$y(x) = C_1 x + C_2$$\n其导数为：\n$$y'(x) = C_1$$\n应用边界条件：\n由 $y(0) = y(L)$ 可得：\n$$C_1(0) + C_2 = C_1 L + C_2$$\n$$C_2 = C_1 L + C_2 \\implies C_1 L = 0$$\n由于 $L \\neq 0$，我们必须有 $C_1 = 0$。\n由 $y'(0) = y'(L)$ 可得：\n$$C_1 = C_1$$\n这个条件恒成立，不提供任何新信息。\n第一个条件使得 $C_1=0$。解变为 $y(x) = C_2$。这是一个常数函数。对于任何 $C_2 \\neq 0$ 的选择，这都是一个非平凡解。\n因此，$\\lambda = 0$ 是一个允许非平凡解的有效值。\n\n情况 3：$\\lambda < 0$\n令 $\\lambda = -k^2$，其中 $k > 0$。微分方程变为 $y''(x) - k^2 y(x) = 0$。其通解为：\n$$y(x) = C_1 \\cosh(kx) + C_2 \\sinh(kx)$$\n其导数为：\n$$y'(x) = C_1 k \\sinh(kx) + C_2 k \\cosh(kx)$$\n应用边界条件 $y(0) = y(L)$ 和 $y'(0) = y'(L)$，我们得到一个关于 $C_1$ 和 $C_2$ 的线性方程组。为使解非平凡，系数矩阵的行列式必须为零：\n$$ \\det \\begin{pmatrix} 1-\\cosh(kL) & -\\sinh(kL) \\\\ -\\sinh(kL) & 1-\\cosh(kL) \\end{pmatrix} = 0 $$\n$$(1-\\cosh(kL))^2 - \\sinh^2(kL) = 0$$\n$$1 - 2\\cosh(kL) + \\cosh^2(kL) - \\sinh^2(kL) = 0$$\n使用恒等式 $\\cosh^2(kL) - \\sinh^2(kL) = 1$，我们得到：\n$$1 - 2\\cosh(kL) + 1 = 0$$\n$$2 - 2\\cosh(kL) = 0$$\n$$\\cosh(kL) = 1$$\n由于 $k > 0$ 和 $L > 0$，我们有 $kL > 0$。函数 $\\cosh(x) = 1$ 仅在 $x=0$ 时成立。因此，不存在满足此条件的 $k>0$。这意味着唯一的解是 $C_1=C_2=0$ 的平凡解。对于 $\\lambda < 0$ 不存在非平凡解。\n\n综合结果：\n从情况 2，我们得到 $\\lambda_0 = 0$。\n从情况 1，我们得到 $\\lambda_n = \\left(\\frac{2n\\pi}{L}\\right)^2$，其中 $n=1, 2, 3, \\ldots$。\n我们可以通过让整数 $n$ 取非负整数，也即 $n=0, 1, 2, \\ldots$，将这两组结果统一为一个表达式。如果我们将 $n=0$ 代入情况 1 的公式，我们得到 $\\lambda_0 = \\left(\\frac{2(0)\\pi}{L}\\right)^2 = 0$，这与情况 2 的结果相匹配。\n因此，所有可能的 $\\lambda$ 的非负值由下式给出：\n$$\\lambda_n = \\left(\\frac{2n\\pi}{L}\\right)^2, \\quad \\text{for } n=0, 1, 2, \\ldots$$\n这对应于选项 C。", "answer": "$$\\boxed{C}$$", "id": "2124821"}, {"introduction": "在我们掌握了周期系统的基本模式之后，便可以应用它们来解决实际的物理问题。这个练习将带你求解一个圆环上的热传导问题，这是一个周期性边界条件的经典应用场景。你将看到如何利用叠加原理，将初始的温度分布分解为一系列基本模式，并观察每个模式如何以其特有的速率随时间衰减。这个过程直观地展示了傅里叶级数在求解演化型偏微分方程中的威力 [@problem_id:2111482]。", "problem": "一根细的导热圆丝构成一个周长为 $2\\pi$ 单位的环。该圆丝侧向绝热，因此热量只能沿着其周长流动。我们可以用一个长度为 $2\\pi$ 的区间来模拟该圆丝。令 $x$ 为参数化圆丝上位置的空间坐标，其中 $x$ 的取值范围可以从 $-\\pi$ 到 $\\pi$。圆丝中的温度分布，记为 $u(x, t)$，由以下一维热方程控制：\n$$\n\\frac{\\partial u}{\\partial t} = \\kappa \\frac{\\partial^2 u}{\\partial x^2}\n$$\n其中 $t$ 代表时间，材料的热扩散系数给定为 $\\kappa=4$。\n\n在初始时刻 $t=0$ 时，沿圆丝的温度分布由以下函数给出：\n$$\nu(x, 0) = 5 + \\cos(2x) - 3\\sin(x)\n$$\n假设圆丝形成一个完美的、连续的圆环，求出对于所有时刻 $t \\ge 0$ 的温度分布 $u(x, t)$。请将您的答案表示为关于 $x$ 和 $t$ 的单一解析函数。", "solution": "我们将该圆丝建模为一个具有周期为 $2\\pi$ 的周期性边界条件的一维区域。温度 $u(x,t)$ 满足热方程\n$$\n\\frac{\\partial u}{\\partial t}=\\kappa\\frac{\\partial^{2}u}{\\partial x^{2}}, \\quad \\kappa=4,\n$$\n其初始条件为\n$$\nu(x,0)=5+\\cos(2x)-3\\sin(x).\n$$\n在一个 $2\\pi$ 周期区域上，我们通过寻找空间算子 $\\frac{\\partial^{2}}{\\partial x^{2}}$ 的 $2\\pi$ 周期本征函数来使用分离变量法。周期性本征函数是 $X_{n}(x)=\\cos(nx)$ 和 $X_{n}(x)=\\sin(nx)$（对于整数 $n\\ge 1$），以及 $X_{0}(x)=1$。对于每个 $n\\ge 1$，代入 $u_{n}(x,t)=T_{n}(t)X_{n}(x)$ 可得\n$$\n\\frac{T_{n}'(t)}{T_{n}(t)}=\\kappa\\frac{X_{n}''(x)}{X_{n}(x)}=-\\kappa n^{2},\n$$\n因为 $X_{n}''(x)=-n^{2}X_{n}(x)$。因此\n$$\nT_{n}(t)=C_{n}\\exp(-\\kappa n^{2}t).\n$$\n对于零阶模 $X_{0}(x)=1$，我们有 $X_{0}''(x)=0$，所以 $T_{0}'(t)=0$，因此常数模不随时间变化。\n\n因此，一般的 $2\\pi$ 周期解是一个各项模态呈指数衰减的傅里叶级数：\n$$\nu(x,t)=\\frac{a_{0}}{2}+\\sum_{n=1}^{\\infty}\\left[a_{n}\\exp(-\\kappa n^{2}t)\\cos(nx)+b_{n}\\exp(-\\kappa n^{2}t)\\sin(nx)\\right].\n$$\n初始条件 $u(x,0)=5+\\cos(2x)-3\\sin(x)$ 直接确定了傅里叶系数：\n- 常数项给出 $\\frac{a_{0}}{2}=5$。\n- 余弦项仅有 $\\cos(2x)$，其系数为 $a_{2}=1$，而对于 $n\\ne 2$ 有 $a_{n}=0$。\n- 正弦项仅有 $\\sin(x)$，其系数为 $b_{1}=-3$，而对于 $n\\ne 1$ 有 $b_{n}=0$。\n\n当 $\\kappa=4$ 时，这些模态的时间依赖性为\n$$\n\\cos(2x)\\text{ 模态: } \\exp(-\\kappa\\cdot 2^{2} t)=\\exp(-16 t), \\quad \\sin(x)\\text{ 模态: } \\exp(-\\kappa\\cdot 1^{2} t)=\\exp(-4 t).\n$$\n因此，\n$$\nu(x,t)=5+\\exp(-16 t)\\cos(2x)-3\\exp(-4 t)\\sin(x).\n$$\n该解满足热方程，是 $2\\pi$ 周期的，并且在 $t=0$ 时与给定的初始条件相匹配。", "answer": "$$\\boxed{5+\\exp(-16 t)\\cos(2x)-3\\exp(-4 t)\\sin(x)}$$", "id": "2111482"}, {"introduction": "对于许多科学计算问题，直接在物理空间求解微分方程可能非常耗时，而在“模式空间”（即傅里叶空间）中操作则会大大提高效率。本练习将向你介绍一种强大的数值技术——使用快速傅里叶变换 (FFT) 来求解泊松方程 $\\nabla^2 \\phi = \\rho$。通过这种方法，一个复杂的偏微分方程在傅里叶变换后变成了一个简单的代数方程，从而可以被快速求解。此练习不仅能让你掌握一项重要的计算工具，还能让你理解在周期性系统上求解泊松方程所需满足的一个关键物理约束条件 [@problem_id:2426531]。", "problem": "考虑一个在具有周期性边界条件的矩形域上的二维泊松方程，\n$$\\nabla^2 \\phi(x,y) = \\rho(x,y),$$ \n该方程定义在一个边长为 $L_x$ 和 $L_y$ 的环面上。函数 $\\phi(x,y)$ 的确定可相差一个任意的相加常数；通过要求 $\\phi(x,y)$ 在整个域上的空间平均值为零来固定规范。在一个均匀网格上进行计算，该网格在 $x$ 方向有 $N_x$ 个点，在 $y$ 方向有 $N_y$ 个点，坐标为\n$$x_i = \\frac{i\\,L_x}{N_x},\\quad i=0,1,\\dots,N_x-1,$$ \n$$y_j = \\frac{j\\,L_y}{N_y},\\quad j=0,1,\\dots,N_y-1.$$ \n所有三角函数的参数必须以弧度为单位。对于网格函数 $f_{i,j} = f(x_i,y_j)$ 的离散空间平均，使用\n$$\\langle f \\rangle = \\frac{1}{N_x N_y}\\sum_{i=0}^{N_x-1}\\sum_{j=0}^{N_y-1} f_{i,j}.$$\n\n你的任务是编写一个程序，对下面指定的每个测试用例，在网格上构建电荷密度 $\\rho(x,y)$，计算出满足方程、周期性边界条件和零平均值规范的相应数值解 $\\phi_{\\text{comp}}(x,y)$，然后按如下方式为每个测试用例生成一个标量结果：\n- 如果离散空间平均值 $\\langle \\rho \\rangle$ 在容差范围内为零，则计算在同一网格上，计算解与给定解析解 $\\phi_{\\text{true}}(x,y)$ 之间的最大逐点绝对误差：\n$$E_{\\infty} = \\max_{0\\le i \\le N_x-1,\\;0\\le j \\le N_y-1} \\left| \\phi_{\\text{comp}}(x_i,y_j) - \\phi_{\\text{true}}(x_i,y_j) \\right|.$$\n- 如果离散空间平均值 $\\langle \\rho \\rangle$ 在容差范围内非零，则不存在周期解；在这种情况下，输出诊断标量\n$$D = \\left| \\langle \\rho \\rangle \\right|.$$\n\n使用零均值检测容差 $\\varepsilon = 10^{-12}$，即如果 $\\left| \\langle \\rho \\rangle \\right| < \\varepsilon$，则将 $\\langle \\rho \\rangle$ 视为零，否则视为非零。\n\n测试套件（每一项定义了 $N_x$、$N_y$、$L_x$、$L_y$、电荷密度 $\\rho(x,y)$，以及在适用情况下的解析解 $\\phi_{\\text{true}}(x,y)$）：\n1. 用例A（理想路径，具有不同频率的混合模式）：$N_x=64$，$N_y=48$，$L_x=2\\pi$，$L_y=2\\pi$，\n   $\\rho(x,y) = 2\\sin(x) + 3\\cos(2y),\\quad \\phi_{\\text{true}}(x,y) = -2\\sin(x) - \\frac{3}{4}\\cos(2y).$\n2. 用例B（复合模式，测试组合波数）：$N_x=60$，$N_y=45$，$L_x=2\\pi$，$L_y=2\\pi$，\n   $\\rho(x,y) = \\cos(3x)\\cos(2y),\\quad \\phi_{\\text{true}}(x,y) = -\\frac{1}{3^2+2^2}\\cos(3x)\\cos(2y) = -\\frac{1}{13}\\cos(3x)\\cos(2y).$\n3. 用例C（周期性边界条件下的不一致性）：$N_x=50$，$N_y=50$，$L_x=2\\pi$，$L_y=2\\pi$，\n   $\\rho(x,y) = 1 + \\sin(x).$ 在这种情况下，由于 $\\langle \\rho \\rangle \\ne 0$，不存在周期解；报告 $D = \\left| \\langle \\rho \\rangle \\right|$。\n\n最终输出格式：你的程序应生成单行输出，其中包含用例A、B和C的三个标量结果，形式为用方括号括起来的逗号分隔列表，例如 $[r_A,r_B,r_C]$。每个元素必须是浮点数。", "solution": "所提出的问题是在具有周期性边界条件的矩形域上求解二维泊松方程，这是数学物理学中的一个基本方程。该方程由下式给出\n$$\n\\nabla^2 \\phi(x,y) = \\rho(x,y)\n$$\n其中 $\\phi(x,y)$ 是待确定的势，而 $\\rho(x,y)$ 是给定的源密度。该域是一个由边长 $L_x$ 和 $L_y$ 定义的环面，这意味着解必须满足周期性边界条件：\n$$\n\\phi(x+L_x, y) = \\phi(x,y) \\\\\n\\phi(x, y+L_y) = \\phi(x,y)\n$$\n该问题在一个 $N_x \\times N_y$ 点的均匀网格上被离散化。解决此类问题最高效且最准确的数值方法是利用快速傅里叶变换 (FFT) 的伪谱法。\n\n该方法的理论基础在于周期函数的傅里叶级数表示的性质。在域 $[0, L_x) \\times [0, L_y)$ 上的周期函数 $f(x,y)$ 可以表示为傅里叶级数：\n$$\nf(x,y) = \\sum_{m=-\\infty}^{\\infty} \\sum_{n=-\\infty}^{\\infty} \\tilde{f}_{m,n} e^{i(k_m x + k_n y)}\n$$\n其中波矢因周期性而被量子化：$k_m = \\frac{2\\pi m}{L_x}$ 和 $k_n = \\frac{2\\pi n}{L_y}$。当拉普拉斯算子 $\\nabla^2 = \\frac{\\partial^2}{\\partial x^2} + \\frac{\\partial^2}{\\partial y^2}$ 应用于这样的级数时，每一项都简单地乘以一个因子：\n$$\n\\nabla^2 \\left( e^{i(k_m x + k_n y)} \\right) = \\left( (ik_m)^2 + (ik_n)^2 \\right) e^{i(k_m x + k_n y)} = -(k_m^2 + k_n^2) e^{i(k_m x + k_n y)}\n$$\n因此，泊松偏微分方程在傅里叶空间中被转换为一个简单的代数方程：\n$$\n-(k_m^2 + k_n^2) \\tilde{\\phi}_{m,n} = \\tilde{\\rho}_{m,n}\n$$\n其中 $\\tilde{\\phi}_{m,n}$ 和 $\\tilde{\\rho}_{m,n}$ 分别是 $\\phi(x,y)$ 和 $\\rho(x,y)$ 的傅里叶系数。\n\n该方程的一个关键方面出现在零频模式下，即 $m=0$ 和 $n=0$ 时。对于此模式，波矢 $k_0$ 和 $k_0$ 均为零，从而得到表达式：\n$$\n0 \\cdot \\tilde{\\phi}_{0,0} = \\tilde{\\rho}_{0,0}\n$$\n傅里叶系数 $\\tilde{\\rho}_{0,0}$ 对应于源密度的空间平均值，因为 $\\tilde{\\rho}_{0,0} = \\frac{1}{L_x L_y} \\int_0^{L_y} \\int_0^{L_x} \\rho(x,y) \\,dx\\,dy$。由于归一化不同，它与平均值 $\\langle \\rho \\rangle$ 成正比。为了使解存在，必须有 $\\tilde{\\rho}_{0,0} = 0$，这意味着域上的净电荷必须为零。这是闭合流形上泊松方程的一个基本相容性条件。如果 $\\langle \\rho \\rangle \\neq 0$，则不存在周期解，问题正确地指定应报告诊断量 $D = |\\langle \\rho \\rangle|$。\n\n如果满足相容性条件 $\\langle \\rho \\rangle = 0$，则零频模式的方程变为 $0 \\cdot \\tilde{\\phi}_{0,0} = 0$。这意味着 $\\tilde{\\phi}_{0,0}$，即势的平均值，不由该方程确定。这反映了势仅在相差一个任意相加常数的意义下才被定义的物理现实。问题通过施加一个规范条件来解决这个模糊性：$\\phi(x,y)$ 的空间平均值必须为零，$\\langle \\phi \\rangle = 0$。这等效于将零频傅里叶系数 $\\tilde{\\phi}_{0,0}$ 设为零。\n\n在规范固定后，势的傅里叶系数可以被唯一确定：\n$$\n\\tilde{\\phi}_{m,n} = \\begin{cases} 0 & \\text{if } m=0, n=0 \\\\ -\\frac{\\tilde{\\rho}_{m,n}}{k_m^2 + k_n^2} & \\text{otherwise} \\end{cases}\n$$\n\n数值算法遵循此理论框架，使用通过 FFT 算法实现的离散傅里叶变换 (DFT)：\n\n1.  **网格和源生成**：对于每个测试用例，通过坐标 $x_i = \\frac{i L_x}{N_x}$（$i=0, \\dots, N_x-1$）和 $y_j = \\frac{j L_y}{N_y}$（$j=0, \\dots, N_y-1$）定义一个均匀网格。在每个网格点 $(x_i, y_j)$ 对源密度 $\\rho(x,y)$ 求值，以形成矩阵 $\\rho_{i,j}$。\n\n2.  **相容性检查**：计算离散空间平均值 $\\langle \\rho \\rangle = \\frac{1}{N_x N_y} \\sum_{i=0}^{N_x-1} \\sum_{j=0}^{N_y-1} \\rho_{i,j}$。如果其绝对值大于或等于容差 $\\varepsilon = 10^{-12}$，则解不存在，结果为 $D = |\\langle \\rho \\rangle|$。\n\n3.  **傅里叶空间中的解**：如果 $|\\langle \\rho \\rangle| < \\varepsilon$，则继续求解。\n    a. 使用二维 FFT 计算源密度矩阵的二维 DFT，$\\hat{\\rho}_{k,l} = \\mathcal{F}(\\rho_{i,j})$。\n    b. 构建一个对应的离散波数平方网格，$K^2_{k,l} = k_{x,k}^2 + k_{y,l}^2$。离散波数 $k_{x,k}$ 和 $k_{y,l}$ 是从 FFT 库返回的标准频率派生出来的，并通过因子 $2\\pi$ 以及域大小 $L_x$ 和 $L_y$ 进行适当缩放。\n    c. 对于所有非零频率模式，通过将 $\\hat{\\rho}_{k,l}$ 除以 $-K^2_{k,l}$ 来计算势的 DFT $\\hat{\\phi}_{k,l}$。将零频模式 $\\hat{\\phi}_{0,0}$ 设为 0 以强制执行规范条件。一个实际的实现方法是将 $K^2_{k,l}$ 矩阵的 $(0,0)$ 元素设置为一个非零值以避免除以零，然后显式地将 $\\hat{\\phi}_{0,0}$ 设为 0。\n\n4.  **实空间解与误差**：通过对 $\\hat{\\phi}_{k,l}$ 应用二维逆 DFT 来获得网格上的势 $\\phi_{\\text{comp}, i,j}$。由于源密度 $\\rho$ 是一个实值函数，计算出的势 $\\phi$ 也必须是实数；任何残余的虚部都是由浮点数不精确性引起的，并应被丢弃。对于提供了解析解 $\\phi_{\\text{true}}(x,y)$ 的用例，该解在网格上求值，最终结果是最大逐点绝对误差 $E_{\\infty} = \\max_{i,j} \\left| \\phi_{\\text{comp}}(x_i,y_j) - \\phi_{\\text{true}}(x_i,y_j) \\right|$。这提供了数值解准确性的度量。", "answer": "```python\n# The complete and runnable Python 3 code goes here.\n# Imports must adhere to the specified execution environment.\nimport numpy as np\n\ndef solve():\n    \"\"\"\n    Computes solutions to the 2D Poisson equation with periodic boundary conditions\n    for a suite of test cases using a Fourier pseudo-spectral method.\n    \"\"\"\n\n    def compute_case(Nx, Ny, Lx, Ly, rho_func, phi_true_func=None):\n        \"\"\"\n        Solves the Poisson equation for a single test case.\n\n        Args:\n            Nx (int): Number of grid points in the x-direction.\n            Ny (int): Number of grid points in the y-direction.\n            Lx (float): Length of the domain in the x-direction.\n            Ly (float): Length of the domain in the y-direction.\n            rho_func (callable): Function defining the charge density rho(x, y).\n            phi_true_func (callable, optional): Function for the analytic solution.\n\n        Returns:\n            float: The maximum absolute error E_inf if a solution exists,\n                   or the diagnostic scalar D if no solution exists.\n        \"\"\"\n        epsilon = 1e-12\n\n        # 1. Create spatial grid\n        x_coords = (np.arange(Nx) * Lx) / Nx\n        y_coords = (np.arange(Ny) * Ly) / Ny\n        x, y = np.meshgrid(x_coords, y_coords, indexing='ij')\n\n        # 2. Construct the charge density rho on the grid\n        rho_grid = rho_func(x, y)\n\n        # 3. Compute the discrete spatial average of rho\n        avg_rho = np.mean(rho_grid)\n\n        # 4. Check for compatibility: if avg_rho is non-zero, no periodic solution exists\n        if np.abs(avg_rho) >= epsilon:\n            return np.abs(avg_rho)\n\n        # 5. Solve using the FFT-based pseudo-spectral method\n        # 5a. Compute 2D FFT of the charge density\n        rho_hat = np.fft.fft2(rho_grid)\n\n        # 5b. Define wavenumbers in x and y directions\n        kx_vals = 2 * np.pi * np.fft.fftfreq(Nx, d=Lx/Nx)\n        ky_vals = 2 * np.pi * np.fft.fftfreq(Ny, d=Ly/Ny)\n        kx, ky = np.meshgrid(kx_vals, ky_vals, indexing='ij')\n\n        # 5c. Compute squared wavenumber magnitude. Handle k=0 singularity.\n        ksq = kx**2 + ky**2\n        # Set ksq[0, 0] to a non-zero value to avoid division by zero.\n        # The result for this mode will be overridden anyway.\n        ksq[0, 0] = 1.0\n\n        # 5d. Compute the FFT of the potential phi\n        phi_hat = -rho_hat / ksq\n        \n        # 5e. Enforce the zero-average gauge condition by setting the DC component to zero\n        phi_hat[0, 0] = 0.0\n\n        # 5f. Compute the inverse 2D FFT to get the solution in real space.\n        # Discard small imaginary part from numerical noise.\n        phi_comp = np.real(np.fft.ifft2(phi_hat))\n\n        # 6. Compute the maximum absolute error against the true solution\n        # This branch is taken as avg_rho is near zero.\n        if phi_true_func is None:\n            # This should not be reached given the problem structure, but is good practice\n            raise ValueError(\"phi_true_func must be provided for cases with zero-mean rho.\")\n\n        phi_true_grid = phi_true_func(x, y)\n        error_inf = np.max(np.abs(phi_comp - phi_true_grid))\n\n        return error_inf\n\n    # Define the test cases from the problem statement.\n    test_cases = [\n        # Case A: Happy path, mixed modes\n        {\n            \"params\": (64, 48, 2*np.pi, 2*np.pi),\n            \"rho\": lambda x, y: 2*np.sin(x) + 3*np.cos(2*y),\n            \"phi_true\": lambda x, y: -2*np.sin(x) - 3/4*np.cos(2*y)\n        },\n        # Case B: Composite mode\n        {\n            \"params\": (60, 45, 2*np.pi, 2*np.pi),\n            \"rho\": lambda x, y: np.cos(3*x)*np.cos(2*y),\n            \"phi_true\": lambda x, y: -1/13*np.cos(3*x)*np.cos(2*y)\n        },\n        # Case C: Inconsistent source, no periodic solution\n        {\n            \"params\": (50, 50, 2*np.pi, 2*np.pi),\n            \"rho\": lambda x, y: 1 + np.sin(x),\n            \"phi_true\": None\n        }\n    ]\n\n    results = []\n    for case in test_cases:\n        Nx, Ny, Lx, Ly = case[\"params\"]\n        rho_func = case[\"rho\"]\n        phi_true_func = case[\"phi_true\"]\n        \n        result = compute_case(Nx, Ny, Lx, Ly, rho_func, phi_true_func)\n        results.append(result)\n\n    # Final print statement in the exact required format.\n    print(f\"[{','.join(map(str, results))}]\")\n\nsolve()\n```", "id": "2426531"}]}