{"hands_on_practices": [{"introduction": "Understanding the boundaries between different classes of languages often begins by challenging our initial intuitions. This first exercise explores the relationship between a language and its subsets, asking a fundamental question: if a language is computationally \"simple\" (decidable), must all of its component parts also be simple? As you will see, the answer reveals a crucial subtlety about the nature of decidability and lays the groundwork for more complex analyses [@problem_id:1444595].", "problem": "In the theory of computation, we classify languages based on the capabilities of abstract machines required to recognize them. A **language** is defined as a set of strings over a finite alphabet $\\Sigma$. A **Turing Machine (TM)** is a mathematical model of computation that manipulates symbols on a strip of tape according to a table of rules.\n\nWe define two important classes of languages:\n- A language $L$ is **Turing-decidable** (or simply, decidable) if there exists a TM that halts on every input string, accepting those in $L$ and rejecting those not in $L$.\n- A language $L$ is **Turing-recognizable** (or simply, recognizable) if there exists a TM that halts and accepts every input string in $L$, but for strings not in $L$, it may either halt and reject or loop forever.\n\nEvery decidable language is also recognizable, but the reverse is not true. There exist languages that are recognizable but not decidable.\n\nConsider the following claim: \"It is possible for a non-empty, recognizable but undecidable language to be a subset of a decidable language.\"\n\nEvaluate the validity of this claim by selecting the most accurate statement from the options below.\n\nA. The claim is true. A simple example is when the decidable language is the set of all possible strings, $\\Sigma^*$.\n\nB. The claim is false. If a language $L_R$ is a subset of a decidable language $L_D$, which has a decider $M_D$, one could use $M_D$ to decide $L_R$. This would imply $L_R$ is decidable, a contradiction.\n\nC. The claim is false. Any subset of a decidable language must also be decidable.\n\nD. The claim is true, but this is only possible if the recognizable but undecidable language is finite.", "solution": "We use the given definitions. A language $L$ is decidable if some Turing machine halts on every input and decides membership in $L$. A language $L$ is recognizable if some Turing machine halts and accepts exactly the strings in $L$, possibly looping on strings not in $L$. It is known that there exist languages that are recognizable but not decidable.\n\nTo evaluate the claim, construct the following argument:\n1. Existence step: There exists a non-empty language $L_{R}$ that is recognizable but not decidable. For example, any standard halting-type language serves, but its specific identity is not required; only existence is needed.\n2. Decidable superset step: The language $\\Sigma^{*}$ (the set of all strings over the alphabet $\\Sigma$) is decidable because a Turing machine can halt and accept every input, thereby deciding $\\Sigma^{*}$.\n3. Subset relation step: For any language $L_{R}$ over $\\Sigma$, we have $L_{R} \\subseteq \\Sigma^{*}$ by definition.\n4. Conclusion: Combining the above, there is a non-empty, recognizable but undecidable language $L_{R}$ that is a subset of the decidable language $\\Sigma^{*}$. Hence, the claim is true.\n\nNow evaluate the options:\n- Option A states exactly the construction above: choose $L_{D} = \\Sigma^{*}$, which is decidable, and any non-empty recognizable but undecidable $L_{R} \\subseteq \\Sigma^{*}$. This is correct.\n- Option B is incorrect because having a decider $M_{D}$ for a superset $L_{D}$ does not by itself decide a proper subset $L_{R} \\subseteq L_{D}$; $M_{D}$ only decides membership in $L_{D}$, not in $L_{R}$.\n- Option C is false because not every subset of a decidable language is decidable; the counterexample above shows a non-decidable subset of $\\Sigma^{*}$.\n- Option D is false because any finite language is decidable, so a recognizable but undecidable language cannot be finite.\n\nTherefore, the most accurate statement is Option A.", "answer": "$$\\boxed{A}$$", "id": "1444595"}, {"introduction": "A key way to characterize a class of languages is by studying its closure properties—that is, whether applying certain operations to languages in the class will always produce another language within the same class. This practice focuses on the reversal operation and the class of recognizable languages. By working through this problem, you will practice the essential skill of constructing a new Turing Machine based on an existing one to formally prove such a property [@problem_id:1444555].", "problem": "In the theory of computation, we classify languages based on the computational power required to process them. A language is a set of strings over some alphabet. A **Turing Machine (TM)** is a mathematical model of computation that defines an abstract machine which manipulates symbols on a strip of tape according to a table of rules.\n\nA language $L$ is called **recognizable** (or recursively enumerable) if there exists a Turing Machine $M$ that, for any input string $w$:\n- If $w \\in L$, then $M$ halts and accepts.\n- If $w \\notin L$, then $M$ either halts and rejects, or it loops forever.\n\nA language $L$ is called **decidable** (or recursive) if there exists a Turing Machine $M$ that halts on all inputs, such that for any input string $w$:\n- If $w \\in L$, then $M$ halts and accepts.\n- If $w \\notin L$, then $M$ halts and rejects.\n\nNote that every decidable language is also recognizable, but not all recognizable languages are decidable.\n\nThe **reversal** of a string $w = w_1w_2...w_n$ is the string written backwards, denoted as $w^R = w_nw_{n-1}...w_1$. The reversal of a language $L$, denoted $L_R$, is the set of all reversed strings from $L$: $L_R = \\{w^R \\mid w \\in L\\}$.\n\nConsider the properties of these language classes under the reversal operation. Which one of the following statements is always true?\n\nA. If a language $L$ is recognizable, then its reversal $L_R$ is also recognizable.\n\nB. If a language $L$ is recognizable, then its reversal $L_R$ is always decidable.\n\nC. A language $L$ is recognizable if and only if its reversal $L_R$ is decidable.\n\nD. If a language $L$ is decidable, its reversal $L_R$ is recognizable but not necessarily decidable.\n\nE. The class of recognizable languages is not closed under the reversal operation.", "solution": "We consider the reversal function $r:\\Sigma^{*}\\to\\Sigma^{*}$ defined by $r(w)=w^{R}$. This function is a total computable bijection with computable inverse $r^{-1}=r$. For any language $L \\subseteq \\Sigma^{*}$, its reversal is $L_{R}=\\{w^{R}\\mid w\\in L\\}=\\{x\\mid r(x)\\in L\\}$.\n\nTo analyze closure properties:\n\n1) If $L$ is recognizable, there exists a Turing machine $M$ such that for all $w$:\n- If $w\\in L$, then $M$ halts and accepts $w$.\n- If $w\\notin L$, then $M$ either halts and rejects $w$ or does not halt.\n\nConstruct a Turing machine $N$ to recognize $L_{R}$:\n- On input $x$, compute $r(x)=x^{R}$ (this always halts).\n- Run $M$ on input $r(x)$.\n- If $M$ accepts, accept; if $M$ rejects, reject; if $M$ does not halt, do not halt.\n\nCorrectness: If $x\\in L_{R}$, then $r(x)\\in L$, so $M$ accepts $r(x)$ and $N$ accepts $x$. If $x\\notin L_{R}$, then $r(x)\\notin L$, so $M$ either rejects or does not halt on $r(x)$, and accordingly $N$ either rejects or does not halt on $x$. Therefore $L_{R}$ is recognizable. Hence statement A is true.\n\n2) Statement B is false. There exist recognizable languages that are not decidable, for example the halting language $HALT=\\{\\langle M,w\\rangle \\mid M \\text{ halts on } w\\}$, which is recognizable and not decidable. If $L=HALT$, then $L_{R}$ cannot be decidable because, since $r$ is a computable bijection with computable inverse, $L$ would be decidable if and only if $L_{R}$ were decidable. Thus recognizability of $L$ does not imply decidability of $L_{R}$.\n\n3) Statement C is false. Taking any recognizable but undecidable $L$ (such as $HALT$), $L$ is recognizable while $L_{R}$ is not decidable, contradicting the “if and only if” claim.\n\n4) Statement D is false. If $L$ is decidable by a decider $D$, construct a decider $D_{R}$ for $L_{R}$ by computing $r(x)$ and running $D$ on $r(x)$. Since $D$ halts on all inputs and $r$ is total computable, $D_{R}$ halts on all inputs, so $L_{R}$ is decidable. Therefore the qualifier “but not necessarily decidable” is incorrect; it is always decidable.\n\n5) Statement E is false because, as shown in item 1, recognizable languages are closed under reversal.\n\nTherefore, the only always true statement among the options is A.", "answer": "$$\\boxed{A}$$", "id": "1444555"}, {"introduction": "This final practice serves as a synthesis of the core concepts: decidability, recognizability, and co-recognizability. By constructing a new language from two others with differing properties, you are challenged to apply the full suite of analytical tools you've learned. This exercise directly engages with the central theorem that a language is decidable if and only if it is both recognizable and co-recognizable, demonstrating how these properties interact in a concrete example [@problem_id:1444558].", "problem": "In the theory of computation, languages are classified based on the capabilities of abstract machines required to recognize them. A language is called **decidable** if a Turing Machine (TM) exists that halts on every input string, accepting those in the language and rejecting those not in it. A language is called **recognizable** (or recursively enumerable) if a TM exists that halts and accepts every string in the language, and for strings not in the language, it either halts and rejects or loops forever. A language is **co-recognizable** if its complement is recognizable.\n\nLet $D$ and $L$ be two languages over the binary alphabet $\\Sigma = \\{0, 1\\}$. Suppose that $D$ is a decidable language, and $L$ is a recognizable but undecidable language.\n\nConsider a new language, $J$, formed by the \"join\" of $D$ and $L$, defined as:\n$$J = \\{0w \\mid w \\in D\\} \\cup \\{1w \\mid w \\in L\\}$$\nwhere $0w$ denotes the string obtained by prepending the symbol '0' to the string $w$, and $1w$ denotes the string obtained by prepending the symbol '1' to the string $w$.\n\nHow would you classify the language $J$?\n\nA. $J$ is decidable.\n\nB. $J$ is recognizable and co-recognizable.\n\nC. $J$ is recognizable, but not co-recognizable.\n\nD. $J$ is co-recognizable, but not recognizable.\n\nE. $J$ is neither recognizable nor co-recognizable.", "solution": "We use the standard definitions from computability theory. A language is decidable if there exists a Turing machine that halts and correctly decides membership for every input. A language is recognizable if there exists a Turing machine that halts and accepts exactly the strings in the language (and may reject or loop otherwise). A language is co-recognizable if its complement is recognizable. It is a standard theorem that a language is decidable if and only if it is both recognizable and co-recognizable.\n\nFirst, we show that $J$ is recognizable. Since $D$ is decidable, there exists a decider $M_{D}$ for $D$. Since $L$ is recognizable, there exists a recognizer $M_{L}$ for $L$. Construct a recognizer $M_{J}$ for $J$ as follows: On input $x$, if $x$ does not begin with $0$ or $1$, reject. If $x = 0w$, run $M_{D}$ on $w$ and accept iff $M_{D}$ accepts (otherwise reject). If $x = 1w$, simulate $M_{L}$ on $w$ and accept iff $M_{L}$ accepts (and otherwise continue simulating). This machine halts and accepts exactly those strings in $J$, and on nonmembers starting with $1$ it may run forever. Therefore $J$ is recognizable.\n\nNext, we show $J$ is not decidable. Suppose, for contradiction, that $J$ were decidable. Then the decider for $J$ would decide $L$ by mapping any $w$ to $1w$ and deciding whether $1w \\in J$. This would decide $L$, contradicting that $L$ is undecidable. Hence $J$ is not decidable.\n\nFinally, we show that $J$ is not co-recognizable. A language is co-recognizable if its complement is recognizable. The complement of $J$ is $\\overline{J} = \\{\\epsilon\\} \\cup \\{0w \\mid w \\notin D\\} \\cup \\{1w \\mid w \\notin L\\}$. Suppose, for the sake of contradiction, that $\\overline{J}$ is recognizable. Since the class of recognizable languages is closed under intersection with decidable languages, the intersection of $\\overline{J}$ with the decidable language $\\{1w \\mid w \\in \\Sigma^*\\}$ must also be recognizable. This intersection is exactly the language $\\{1w \\mid w \\notin L\\}$. If we have a recognizer for $\\{1w \\mid w \\notin L\\}$, we can easily construct a recognizer for $\\overline{L}$: on input $w$, we construct $1w$ and run the recognizer for $\\{1w \\mid w \\notin L\\}$. This would mean $\\overline{L}$ is recognizable. However, we know that a language is decidable if and only if it is both recognizable and co-recognizable. Since $L$ is given as recognizable but undecidable, its complement $\\overline{L}$ cannot be recognizable. This is a contradiction. Therefore, $\\overline{J}$ is not recognizable, and $J$ is not co-recognizable.\n\nCombining the conclusions: $J$ is recognizable, not decidable, and not co-recognizable. Thus the correct classification is that $J$ is recognizable but not co-recognizable.", "answer": "$$\\boxed{C}$$", "id": "1444558"}]}