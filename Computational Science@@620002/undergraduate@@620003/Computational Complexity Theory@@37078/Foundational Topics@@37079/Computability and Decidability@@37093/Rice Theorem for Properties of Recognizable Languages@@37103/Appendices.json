{"hands_on_practices": [{"introduction": "Rice's Theorem is a cornerstone of computability theory, proving that many questions about program behavior are fundamentally unanswerable. This first exercise [@problem_id:1446128] provides a clear application by asking if a Turing machine's language consists solely of strings with even length. You will practice identifying if a property is \"semantic\" and \"non-trivial,\" the two crucial preconditions for using Rice's Theorem to establish undecidability.", "problem": "In the field of theoretical computer science, a Turing machine (TM) is a mathematical model of computation. The set of all input strings that a given Turing machine $M$ accepts is called the language of $M$, denoted as $L(M)$. A language $L$ is said to be decidable if there exists a Turing machine that halts on every input string and accepts strings in $L$ while rejecting strings not in $L$. A problem is called decidable if the language corresponding to its \"yes\" instances is decidable.\n\nConsider the following problem: Given the description of an arbitrary Turing machine $\\langle M \\rangle$, determine whether its language $L(M)$ has the property that every string $w \\in L(M)$ has an even length. In other words, we want to know if $|w|$ is even for all $w \\in L(M)$. Let's call this property $P_{\\text{even}}$.\n\nWhich of the following statements correctly describes the decidability of this problem?\n\nA. The problem is decidable, and a general algorithm can be constructed to solve it for any given Turing machine.\n\nB. The problem is undecidable, meaning no general algorithm can exist to solve it for all possible Turing machines.\n\nC. The problem is decidable only for the subset of Turing machines that are guaranteed to halt on all inputs (i.e., deciders).\n\nD. The problem is decidable, but any algorithm that solves it is known to require a time complexity that is at least exponential in the size of the description of the Turing machine.", "solution": "We formalize the property as follows. Let $E = \\{ w \\mid |w| \\text{ is even} \\}$. The property in question is\n$$\nP_{\\text{even}}(M) \\iff L(M) \\subseteq E.\n$$\nThis property is semantic: it depends only on the language $L(M)$ recognized by $M$, not on the particular description of $M$.\n\nWe first show $P_{\\text{even}}$ is nontrivial. There exists a Turing machine $M_{\\emptyset}$ with $L(M_{\\emptyset}) = \\emptyset$, hence $L(M_{\\emptyset}) \\subseteq E$ and $P_{\\text{even}}(M_{\\emptyset})$ holds. There also exists a Turing machine $M_{1}$ with $L(M_{1}) = \\{1\\}$, so $L(M_{1}) \\nsubseteq E$ and $P_{\\text{even}}(M_{1})$ fails. Therefore $P_{\\text{even}}$ is neither true for all languages nor false for all languages; it is nontrivial.\n\nBy Rice's theorem, any nontrivial semantic property of the language recognized by a Turing machine is undecidable. Since $P_{\\text{even}}$ is such a property, the problem of deciding, given $\\langle M \\rangle$, whether $L(M) \\subseteq E$ is undecidable. This rules out options A and D and establishes option B.\n\nTo address option C, we consider the restriction to inputs that are guaranteed to be deciders (halt on every input). We show that $P_{\\text{even}}$ remains undecidable even under this promise by reducing the halting problem to it. Given an arbitrary Turing machine $N$ and input $y$, construct a total Turing machine $D_{N,y}$ defined on input $w$ by:\n- If $|w|$ is even, reject.\n- If $|w|$ is odd, simulate $N$ on $y$ for exactly $|w|$ steps; accept if $N$ halts within those $|w|$ steps, otherwise reject.\n\nThis $D_{N,y}$ halts on all inputs by construction (bounded simulation), so it is a decider. Moreover,\n$$\nN \\text{ halts on } y \\iff \\exists w \\text{ with } |w| \\text{ odd and } w \\in L(D_{N,y}) \\iff L(D_{N,y}) \\nsubseteq E.\n$$\nEquivalently,\n$$\n\\neg\\big(P_{\\text{even}}(D_{N,y})\\big) \\iff N \\text{ halts on } y.\n$$\nThus, if we could decide $P_{\\text{even}}$ for deciders, we could decide the halting problem, a contradiction. Therefore option C is false.\n\nConsequently, the correct statement is that the problem is undecidable, which is option B.", "answer": "$$\\boxed{B}$$", "id": "1446128"}, {"introduction": "After establishing a problem is undecidable, we can ask if we can at least create a semi-algorithm to accept \"yes\" instances, a concept known as recognizability. This exercise [@problem_id:1446110] moves beyond a simple application of Rice's Theorem by analyzing whether a language's strings all begin with a '1'. You will learn how to determine if a property is not just undecidable but also not recognizable by examining its complement, introducing a finer distinction in the landscape of undecidable problems.", "problem": "A computer science student is designing a static analysis tool for verifying properties of programs. In this simplified model, a program is represented by a Turing Machine (TM) description, $\\langle M \\rangle$, and its behavior is defined by the language it accepts, $L(M)$. The alphabet for all strings is $\\Sigma = \\{0, 1\\}$.\n\nThe student wants the tool to perform a specific safety check: for any given Turing Machine $M$, the tool must determine whether every string accepted by $M$ begins with the character '1'. Note that if the language $L(M)$ is the empty set (i.e., $M$ accepts no strings), this property is considered to be true by vacuous satisfaction.\n\nConsider the computational problem of deciding whether an arbitrary Turing Machine $\\langle M \\rangle$ satisfies this property. Which of the following statements correctly classifies this problem?\n\nA. The problem is decidable.\n\nB. The problem is undecidable, but it is recognizable.\n\nC. The problem is undecidable, and it is not recognizable.\n\nD. The problem is decidable if and only if $L(M)$ is a regular language.", "solution": "Let $\\Sigma=\\{0,1\\}$ and define the property $P$ on Turing machines by\n$$P(\\langle M\\rangle)\\ \\text{holds} \\iff L(M)\\subseteq 1\\Sigma^{*},$$\nwith the understanding that $L(M)=\\emptyset$ satisfies $P$ vacuously.\n\nFirst, $P$ is a semantic language property that depends only on $L(M)$, not on the syntactic description of $M$. It is nontrivial because:\n- There exists a Turing machine $M_{\\emptyset}$ with $L(M_{\\emptyset})=\\emptyset$, hence $P(\\langle M_{\\emptyset}\\rangle)$ holds.\n- There exists a Turing machine $M_{0}$ with $L(M_{0})=\\{0\\}$, and since $0\\notin 1\\Sigma^{*}$, $P(\\langle M_{0}\\rangle)$ fails.\n\nBy Rice’s theorem, every nontrivial semantic property of recursively enumerable languages is undecidable. Therefore, deciding $P$ is undecidable.\n\nNext, consider the complement property $\\overline{P}$:\n$$\\overline{P}=\\{\\langle M\\rangle \\mid \\exists w\\in\\{\\epsilon\\}\\cup 0\\Sigma^{*}\\ \\text{such that}\\ M\\ \\text{accepts}\\ w\\}.$$\nThis language is recognizable: on input $\\langle M\\rangle$, enumerate all $w\\in\\{\\epsilon\\}\\cup 0\\Sigma^{*}$ and dovetail simulations of $M$ on each $w$; accept $\\langle M\\rangle$ as soon as any simulation accepts. If no such $w$ is accepted by $M$, the procedure runs forever, which is consistent with recognizability.\n\nIf $P$ were also recognizable, then both $P$ and $\\overline{P}$ would be recognizable, which implies decidability by running the two recognizers in parallel and accepting when one accepts. This contradicts undecidability from Rice’s theorem. Hence $P$ is not recognizable.\n\nTherefore, the correct classification is that the problem is undecidable and not recognizable.", "answer": "$$\\boxed{C}$$", "id": "1446110"}, {"introduction": "Some properties are so strict that they lie beyond even the partial verification offered by recognizers. This final exercise [@problem_id:1446112] tackles one such case: determining if a Turing machine's language is *precisely* equal to the specific context-free language $S = \\{0^k 1^k \\mid k \\ge 0\\}$. This problem demonstrates a profound consequence of computability theory, showing that properties based on language equality are neither recognizable nor co-recognizable, placing them in a higher tier of undecidability.", "problem": "In the study of computability theory, a Turing Machine is a mathematical model of computation that defines an abstract machine which manipulates symbols on a strip of tape according to a table of rules. The set of input strings that a Turing Machine $M$ accepts is called the language of $M$, denoted as $L(M)$.\n\nConsider the specific language $S = \\{0^k1^k \\mid k \\geq 0\\}$. This is the set of strings consisting of some number of 0s followed by an equal number of 1s. Now, consider the following language, which consists of the encodings of Turing Machines:\n$$L_{eq} = \\{ \\langle M \\rangle \\mid M \\text{ is a Turing Machine and } L(M) = S \\}$$\nHere, $\\langle M \\rangle$ denotes a string representation of the Turing Machine $M$.\n\nWhich of the following statements about the language $L_{eq}$ is correct?\n\nA. $L_{eq}$ is decidable.\n\nB. $L_{eq}$ is undecidable but recognizable.\n\nC. $L_{eq}$ is undecidable but co-recognizable.\n\nD. $L_{eq}$ is undecidable, and it is neither recognizable nor co-recognizable.\n\nE. The status of $L_{eq}$ depends on the specific encoding scheme used for $\\langle M \\rangle$ and cannot be determined from the information given.", "solution": "We are given the fixed decidable language $S = \\{0^{k}1^{k} \\mid k \\geq 0\\}$ and the index set\n$$\nL_{eq} = \\{\\langle M \\rangle \\mid L(M)=S\\}.\n$$\nWe analyze decidability, recognizability, and co-recognizability of $L_{eq}$.\n\nFirst, undecidability follows from Rice’s theorem. Consider the semantic property\n$$\nP(L) \\equiv (L = S).\n$$\nThis is a property of the language recognized by a Turing Machine, not of its syntactic description. It is nontrivial because there exists at least one machine $M_{S}$ with $L(M_{S})=S$, and there exists a machine $M_{\\emptyset}$ with $L(M_{\\emptyset})=\\emptyset \\neq S$. By Rice’s theorem, the index set of machines whose recognized language satisfies a nontrivial semantic property is undecidable. Hence $L_{eq}$ is undecidable.\n\nNext, we show $L_{eq}$ is neither recognizable nor co-recognizable. Define the classic equivalence problem\n$$\nEQ_{TM} = \\{\\langle M_{1},M_{2} \\rangle \\mid L(M_{1}) = L(M_{2})\\}.\n$$\nIt is known that $EQ_{TM}$ is neither recognizable nor co-recognizable. We give a many-one reduction $EQ_{TM} \\leq_{m} L_{eq}$ to transfer both non-recognizability and non-co-recognizability.\n\nFix a decider $D_{S}$ for $S$. For any input pair $\\langle M_{1},M_{2} \\rangle$, compute an index $\\langle N \\rangle$ of a Turing Machine $N$ defined as follows on input $w$:\n1) Run $D_{S}$ on $w$. If $D_{S}$ accepts, then accept.\n2) Otherwise (so $w \\notin S$), dovetail over all pairs $(x,t)$ where $x \\in \\{0,1\\}^{*}$ and $t \\in \\mathbb{N}$, and simulate $M_{1}$ and $M_{2}$ on $x$ for $t$ steps. If during this search there exists $(x,t)$ such that within $t$ steps exactly one of $M_{1},M_{2}$ accepts $x$, then accept $w$. If no such witness exists, run forever (do not accept).\n\nWe verify correctness:\n- If $L(M_{1})=L(M_{2})$, then for all $x$ and all $t$ the dovetail never finds a disagreement witness. Thus $N$ accepts exactly those $w$ for which $w \\in S$, hence $L(N)=S$.\n- If $L(M_{1}) \\neq L(M_{2})$, then there exists $x$ and some finite $t$ at which exactly one of $M_{1},M_{2}$ accepts $x$. The dovetail finds such a witness and therefore accepts every $w \\notin S$, while step 1 accepts every $w \\in S$. Hence $L(N) = \\Sigma^{*} \\neq S$.\n\nTherefore,\n$$\n\\langle M_{1},M_{2} \\rangle \\in EQ_{TM} \\iff \\langle N \\rangle \\in L_{eq}.\n$$\nThis is a computable many-one reduction $EQ_{TM} \\leq_{m} L_{eq}$. If $L_{eq}$ were recognizable, then $EQ_{TM}$ would be recognizable; if $L_{eq}$ were co-recognizable, then $EQ_{TM}$ would be co-recognizable. Since $EQ_{TM}$ is neither, $L_{eq}$ is neither recognizable nor co-recognizable.\n\nThus the correct choice is that $L_{eq}$ is undecidable and neither recognizable nor co-recognizable. The status does not depend on the particular reasonable encoding $\\langle M \\rangle$.\n\nHence the correct option is D.", "answer": "$$\\boxed{D}$$", "id": "1446112"}]}