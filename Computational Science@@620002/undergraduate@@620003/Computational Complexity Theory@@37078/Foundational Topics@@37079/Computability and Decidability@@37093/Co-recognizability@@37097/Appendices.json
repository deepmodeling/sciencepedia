{"hands_on_practices": [{"introduction": "A powerful technique for classifying languages is to check for violations rather than verifying compliance. This first practice demonstrates this principle by examining a simple, observable behavior of a Turing Machine. We will prove a language is co-recognizable by designing a recognizer for its complementâ€”a machine that simply needs to witness a single forbidden action to confirm a string is in that complement [@problem_id:1416140].", "problem": "In the theory of computation, we often analyze the properties of languages related to the behavior of Turing Machines (TMs). Let $\\langle M \\rangle$ denote the string encoding of a Turing Machine $M$. The tape of a TM is infinite in both directions, but computation begins at a specific designated starting cell.\n\nWe define a language $L_{NML}$ as the set of all TM encodings $\\langle M \\rangle$ that satisfy a specific condition: when the TM $M$ is run with the empty string, $\\epsilon$, as its input, it never moves its tape head to a cell to the left of its starting cell.\n\nRecall the following standard definitions from computability theory:\n- A language is **decidable** if there exists a TM that halts on all inputs, accepting strings in the language and rejecting strings not in the language.\n- A language is **recognizable** (or Turing-recognizable) if there exists a TM that halts and accepts all strings in the language, but for strings not in the language, it may either halt and reject or loop forever.\n- A language is **co-recognizable** if its complement is recognizable.\n\nBased on these definitions, which of the following statements correctly classifies the language $L_{NML}$?\n\nA. $L_{NML}$ is decidable.\n\nB. $L_{NML}$ is recognizable but not co-recognizable.\n\nC. $L_{NML}$ is co-recognizable but not decidable.\n\nD. $L_{NML}$ is neither recognizable nor co-recognizable.", "solution": "Let the starting tape cell be indexed by $0$, with cells to its right indexed by positive integers and cells to its left indexed by negative integers. Define\n$$\nL_{NML}=\\{\\langle M\\rangle:\\text{ when run on }\\epsilon,\\text{ the head of }M\\text{ never visits any cell with index }<0\\}.\n$$\n\nFirst, show that $\\overline{L_{NML}}$ is recognizable. Construct a Turing machine $R$ that, on input $\\langle M\\rangle$, simulates $M$ on $\\epsilon$ step by step while maintaining an integer counter $p$ for the simulated head position relative to the start cell, initialized to $p=0$. Each simulated right move sets $p\\leftarrow p+1$, each simulated left move sets $p\\leftarrow p-1$. If at any step $p=-1$, $R$ accepts. If the simulated run halts without ever making $p=-1$, $R$ rejects; if the simulated run never halts and never makes $p=-1$, then $R$ runs forever. Thus $R$ recognizes $\\overline{L_{NML}}$, so $L_{NML}$ is co-recognizable.\n\nSecond, show $L_{NML}$ is undecidable by a mapping reduction from the Halting Problem. Let\n$$\nH=\\{\\langle M,w\\rangle: M\\text{ halts on input }w\\}.\n$$\nGiven $\\langle M,w\\rangle$, effectively construct a Turing machine $M'$ (with no input) that operates as follows:\n- $M'$ has $w$ hardwired in its finite control and writes $w$ onto its tape to the right of the start cell (never moving left of index $0$ during this setup).\n- $M'$ then simulates $M$ on input $w$ using only cells with indices $\\geq 0$, so that during the simulation the physical head of $M'$ never moves left of index $0$.\n- If the simulation of $M$ on $w$ halts, $M'$ moves its head to index $0$ (which it already maintains $\\geq 0$) and then executes one left move to index $-1$ and halts.\n\nBy construction, if $\\langle M,w\\rangle\\in H$, then $M'$ eventually moves left of the start cell, so $\\langle M'\\rangle\\in\\overline{L_{NML}}$. If $\\langle M,w\\rangle\\notin H$, then $M'$ never moves left of the start cell, so $\\langle M'\\rangle\\in L_{NML}$. Hence we have a computable function $f$ with\n$$\n\\langle M,w\\rangle\\in H\\iff f(\\langle M,w\\rangle)=\\langle M'\\rangle\\in\\overline{L_{NML}},\n$$\nthat is, $H\\leq_{m}\\overline{L_{NML}}$. Since $H$ is undecidable, $\\overline{L_{NML}}$ is undecidable, and therefore $L_{NML}$ is undecidable.\n\nFinally, because $\\overline{L_{NML}}$ is recognizable and $L_{NML}$ is undecidable, $L_{NML}$ cannot be recognizable. If it were, then both $L_{NML}$ and $\\overline{L_{NML}}$ would be recognizable, which would imply $L_{NML}$ is decidable, a contradiction.\n\nTherefore, $L_{NML}$ is co-recognizable but not decidable.", "answer": "$$\\boxed{C}$$", "id": "1416140"}, {"introduction": "Beyond building recognizers from first principles, we can often deduce properties of a language class through more abstract, structural arguments. This exercise explores the closure properties of co-recognizable languages, specifically under the operation of inverse homomorphism. You will see how a property of co-recognizable languages can be elegantly proven by leveraging a known closure property of their complements, the recognizable languages [@problem_id:1416131].", "problem": "In computability theory, we study different classes of languages and their properties. A language $L$ over an alphabet $\\Sigma$ is called **co-recognizable** if its complement, $\\bar{L} = \\Sigma^* \\setminus L$, is recognizable by a Turing Machine. A Turing Machine is said to recognize a language if it accepts every string in that language and does not accept any string not in the language (meaning it either rejects or loops forever).\n\nLet $\\Sigma_1$ and $\\Sigma_2$ be two alphabets. A function $h: \\Sigma_1^* \\to \\Sigma_2^*$ is a **homomorphism** if for any two strings $x, y \\in \\Sigma_1^*$, it satisfies the property $h(xy) = h(x)h(y)$. Given a homomorphism $h$ and a language $L_2 \\subseteq \\Sigma_2^*$, the **inverse homomorphism** of $L_2$ is the language $h^{-1}(L_2) = \\{w \\in \\Sigma_1^* \\mid h(w) \\in L_2 \\}$.\n\nConsider the following claim:\n_\"The class of co-recognizable languages is closed under the operation of inverse homomorphism.\"_\n\nWhich of the following statements provides the correct evaluation of this claim and the most accurate reasoning?\n\nA. The claim is true. Let $L$ be a co-recognizable language and $h$ be a homomorphism. By definition, the complement of $h^{-1}(L)$ is the set $\\{w \\mid h(w) \\notin L\\}$, which is equivalent to $h^{-1}(\\bar{L})$. Since $L$ is co-recognizable, its complement $\\bar{L}$ is recognizable. The class of recognizable languages is known to be closed under inverse homomorphism, which means $h^{-1}(\\bar{L})$ is recognizable. Therefore, the complement of $h^{-1}(L)$ is recognizable, so $h^{-1}(L)$ must be co-recognizable.\n\nB. The claim is false. The operation of inverse homomorphism can increase the complexity of a language. For instance, let $L$ be the context-free language $\\{a^n b^n \\mid n \\geq 0 \\}$, which is decidable and thus co-recognizable. It is possible to construct a homomorphism $h$ such that the language $h^{-1}(L)$ is a known non-co-recognizable language. Therefore, the class is not closed under this operation.\n\nC. The claim is false. The class of co-recognizable languages is known not to be closed under (direct) homomorphism. Since inverse homomorphism is a structurally similar string operation, closure is not expected to hold for it either. A standard technique to prove non-closure for homomorphism can be adapted to show that applying an inverse homomorphism can transform a co-recognizable language into one that is not co-recognizable.\n\nD. The claim is true, but the reasoning is flawed. A common but incorrect argument is as follows: To construct a Turing Machine $M_{new}$ for $h^{-1}(L)$, a student might suggest that on input $w$, $M_{new}$ computes $z = h(w)$ and then simulates a recognizer for $L$ itself, let's call it $M_L$, on input $z$. The problem is that if $L$ is co-recognizable but not decidable, a recognizer $M_L$ for $L$ is not guaranteed to exist, so this construction fails.\n\nE. The claim is true only if the language $L$ is decidable (i.e., both recognizable and co-recognizable). If $L$ is merely co-recognizable but not decidable, then the Turing machine for its complement $\\bar{L}$ is only a recognizer, not a decider. The simulation required to check membership in $h^{-1}(\\bar{L})$ may not halt on all inputs, and this non-halting behavior prevents the construction of a valid machine to co-recognize $h^{-1}(L)$.", "solution": "We begin with definitions. A language $L \\subseteq \\Sigma^{*}$ is co-recognizable if and only if its complement $\\overline{L} = \\Sigma^{*} \\setminus L$ is recognizable. Given alphabets $\\Sigma_{1}, \\Sigma_{2}$ and a homomorphism $h : \\Sigma_{1}^{*} \\to \\Sigma_{2}^{*}$, the inverse homomorphism of a language $L_{2} \\subseteq \\Sigma_{2}^{*}$ is $h^{-1}(L_{2}) = \\{ w \\in \\Sigma_{1}^{*} \\mid h(w) \\in L_{2} \\}$.\n\nA fundamental set-theoretic property of inverse images under any function (in particular, under a homomorphism) is:\n$$\nh^{-1}(\\Sigma_{2}^{*} \\setminus S) \\;=\\; \\Sigma_{1}^{*} \\setminus h^{-1}(S)\n$$\nfor every $S \\subseteq \\Sigma_{2}^{*}$. This follows directly: for any $w \\in \\Sigma_{1}^{*}$,\n$$\nw \\in h^{-1}(\\Sigma_{2}^{*} \\setminus S)\n\\;\\Leftrightarrow\\;\nh(w) \\in \\Sigma_{2}^{*} \\setminus S\n\\;\\Leftrightarrow\\;\nh(w) \\notin S\n\\;\\Leftrightarrow\\;\nw \\notin h^{-1}(S)\n\\;\\Leftrightarrow\\;\nw \\in \\Sigma_{1}^{*} \\setminus h^{-1}(S).\n$$\nApplying this with $S = L$, we obtain:\n$$\n\\overline{h^{-1}(L)} \\;=\\; \\Sigma_{1}^{*} \\setminus h^{-1}(L) \\;=\\; h^{-1}(\\Sigma_{2}^{*} \\setminus L) \\;=\\; h^{-1}(\\overline{L}).\n$$\n\nNext, we use a standard closure property: the class of recognizable languages is closed under inverse homomorphism. To justify this, let $M$ be a Turing machine that recognizes a language $A \\subseteq \\Sigma_{2}^{*}$. Define a Turing machine $M'$ that, on input $w \\in \\Sigma_{1}^{*}$, computes $h(w)$ and then simulates $M$ on $h(w)$; $M'$ accepts exactly when $M$ accepts. Since a fixed homomorphism $h$ is a total computable function (obtained by per-symbol substitution and concatenation), $M'$ recognizes $h^{-1}(A)$. Hence, if $A$ is recognizable, then $h^{-1}(A)$ is recognizable.\n\nNow let $L$ be co-recognizable. Then $\\overline{L}$ is recognizable. By the closure just established, $h^{-1}(\\overline{L})$ is recognizable. Using the set-theoretic identity above,\n$$\n\\overline{h^{-1}(L)} \\;=\\; h^{-1}(\\overline{L})\n$$\nis recognizable. Therefore $h^{-1}(L)$ is co-recognizable. This proves the claim.\n\nEvaluating the options:\n- Option A states exactly this argument: it identifies $\\overline{h^{-1}(L)} = h^{-1}(\\overline{L})$, uses that $\\overline{L}$ is recognizable, and invokes closure of recognizable languages under inverse homomorphism. This is correct.\n- Option B is incorrect because if $\\overline{L}$ is recognizable, then $h^{-1}(\\overline{L})$ is recognizable for any homomorphism $h$, so $h^{-1}(L)$ must be co-recognizable; the counterexample described cannot exist.\n- Option C is incorrect because non-closure under direct homomorphism does not imply non-closure under inverse homomorphism; moreover, the claim actually holds as shown.\n- Option D observes a flawed construction that tries to use a recognizer for $L$ itself; while that critique is valid, it does not give the correct reasoning. The correct reasoning uses a recognizer for $\\overline{L}$ and closure of recognizable languages under inverse homomorphism. Thus A is superior.\n- Option E is incorrect because the argument does not require decidability of $L$, only recognizability of $\\overline{L}$.\n\nTherefore, the correct choice is A.", "answer": "$$\\boxed{A}$$", "id": "1416131"}, {"introduction": "Our final practice connects the theory of computability with computational complexity by introducing resource constraints. Here, we analyze languages defined by a Turing Machine's adherence to a universal performance guaranteeâ€”halting within a specific time bound for all inputs. The task is to prove co-recognizability by designing a machine that searches for a single input on which the main machine fails to meet its performance contract, illustrating a key method for analyzing algorithms with bounded resources [@problem_id:1416184].", "problem": "In the theory of computation, we classify languages based on the capabilities of abstract machines to solve them. A language is **decidable** if a Turing Machine (TM) can halt on any input, accepting strings in the language and rejecting strings not in it. A language $L$ is **Turing-recognizable** (or simply recognizable) if there exists a TM that halts and accepts for every string in $L$, but may reject or loop forever for strings not in $L$. A language $L$ is **co-Turing-recognizable** (or co-recognizable) if its complement, $\\bar{L}$, is Turing-recognizable.\n\nLet $\\langle M \\rangle$ represent the standard encoding of a Turing machine $M$, and let $\\langle M, w \\rangle$ represent the encoding of a pair consisting of a TM $M$ and an input string $w$. Consider a fixed polynomial $p(n) = n^4 + 3n^2 + 100$.\n\nWhich of the following languages is co-Turing-recognizable but **not** decidable?\n\nA. $L_A = \\{ \\langle M \\rangle \\mid \\text{For every input string } w, M \\text{ halts in at most } p(|w|) \\text{ steps} \\}$.\n\nB. $L_B = \\{ \\langle M \\rangle \\mid M \\text{ halts on the empty string } \\epsilon \\text{ within } 100 \\text{ steps} \\}$.\n\nC. $L_C = \\{ \\langle M \\rangle \\mid \\text{There exists an input string } w \\text{ such that } M \\text{ accepts } w \\text{ in at most } p(|w|) \\text{ steps} \\}$.\n\nD. $L_D = \\{ \\langle M \\rangle \\mid \\text{The language accepted by } M, L(M), \\text{ is a regular language} \\}$.\n\nE. $L_E = \\{ \\langle M, w \\rangle \\mid M \\text{ writes a non-blank symbol on its tape when run on input } w \\text{ for at most } |w| \\text{ steps} \\}$.", "solution": "We are asked to identify which language among the options is co-Turing-recognizable (co-RE) but not decidable. I analyze each option precisely, constructing recognizers or deciders where appropriate, and proving undecidability by reduction where needed.\n\nFirst recall definitions. A language $L$ is decidable if there exists a Turing machine that halts on all inputs and decides membership in $L$. A language $L$ is Turing-recognizable (RE) if there exists a Turing machine that halts and accepts exactly the strings in $L$ (may loop otherwise). A language $L$ is co-Turing-recognizable (co-RE) if its complement $\\overline{L}$ is RE.\n\nLet $p(n)=n^{4}+3n^{2}+100$, which satisfies $p(n)\\geq n$ for all $n\\in\\mathbb{N}$.\n\nAnalyze each option:\n\nA. $L_{A}=\\{\\langle M\\rangle\\mid\\forall w,\\ M(w)\\text{ halts in at most }p(|w|)\\text{ steps}\\}$.\n\n1) Show $L_{A}$ is co-RE by showing $\\overline{L_{A}}$ is RE. The complement is\n$$\n\\overline{L_{A}}=\\{\\langle M\\rangle\\mid \\exists w\\text{ such that }M(w)\\text{ does not halt within }p(|w|)\\text{ steps}\\}.\n$$\nA recognizer for $\\overline{L_{A}}$ works as follows: on input $\\langle M\\rangle$, dovetail over all strings $w$ and simulate $M(w)$ for exactly $p(|w|)+1$ steps; if any simulation has not halted by step $p(|w|)$, accept. If no such $w$ exists, the machine runs forever. Hence $\\overline{L_{A}}$ is RE, so $L_{A}$ is co-RE.\n\n2) Show $L_{A}$ is not decidable by a mapping reduction from the Halting problem $H=\\{\\langle M,x\\rangle\\mid M\\text{ halts on }x\\}$ to $\\overline{L_{A}}$. Given $\\langle M,x\\rangle$, construct a Turing machine $N$ defined as follows:\nOn input $w$, first simulate $M(x)$ for exactly $|w|$ steps. If $M(x)$ halts within those $|w|$ steps, then enter an infinite loop (never halt). Otherwise, halt immediately.\nCorrectness:\n- If $M(x)$ does not halt, then for all $w$, $M(x)$ does not halt within $|w|$ steps, so $N$ halts immediately on every $w$. Thus $N$ halts within $|w|$ steps on every $w$, and since $|w|\\leq p(|w|)$, $N$ halts within $p(|w|)$ steps on every $w$. Hence $\\langle N\\rangle\\in L_{A}$.\n- If $M(x)$ halts in $s$ steps, then for any $w$ with $|w|\\geq s$, $M(x)$ halts within $|w|$ steps, so $N$ loops forever on such $w$. Therefore there exists $w$ such that $N(w)$ does not halt within $p(|w|)$ steps, and thus $\\langle N\\rangle\\in\\overline{L_{A}}$.\nTherefore $\\langle M,x\\rangle\\in H$ if and only if $\\langle N\\rangle\\in\\overline{L_{A}}$, giving a many-one reduction $H\\leq_{m}\\overline{L_{A}}$. Since $H$ is undecidable and $\\overline{L_{A}}$ is RE, $\\overline{L_{A}}$ is RE-complete and $L_{A}$ is co-RE-complete, hence $L_{A}$ is not decidable.\n\nThus A is co-RE but not decidable.\n\nB. $L_{B}=\\{\\langle M\\rangle\\mid M\\text{ halts on }\\epsilon\\text{ within }100\\text{ steps}\\}$. This is decidable by direct simulation of $M$ on $\\epsilon$ for $100$ steps and checking if it halts within that bound. Hence B is decidable, not the target.\n\nC. $L_{C}=\\{\\langle M\\rangle\\mid \\exists w\\text{ such that }M\\text{ accepts }w\\text{ in at most }p(|w|)\\text{ steps}\\}$. This is RE: dovetail over $w$ and simulate $M(w)$ for $p(|w|)$ steps; accept if any such run accepts within that bound. If $M$ never accepts within the bound for any $w$, the recognizer runs forever. If $L_{C}$ were also co-RE, then $L_{C}$ would be decidable. But one can reduce $H$ to $L_{C}$ by mapping $\\langle M,x\\rangle$ to a machine $N$ that on input $w$ simulates $M(x)$ for $p(|w|)$ steps and accepts iff $M(x)$ halts within those steps; then $\\langle N\\rangle\\in L_{C}$ if and only if $\\langle M,x\\rangle\\in H$. Hence $L_{C}$ is undecidable; because it is RE and undecidable, it cannot be co-RE. So C is not the target.\n\nD. $L_{D}=\\{\\langle M\\rangle\\mid L(M)\\text{ is regular}\\}$. By Riceâ€™s theorem this property is nontrivial and hence undecidable. Moreover, by Riceâ€“Shapiro, this language is neither RE nor co-RE. In particular it is not co-RE, so not the target.\n\nE. $L_{E}=\\{\\langle M,w\\rangle\\mid M\\text{ writes a non-blank symbol on its tape when run on }w\\text{ for at most }|w|\\text{ steps}\\}$. This is decidable by simulating $M$ on $w$ for exactly $|w|$ steps and checking whether any write of a non-blank symbol occurs during those steps. Hence E is decidable, not the target.\n\nTherefore the unique language that is co-Turing-recognizable but not decidable is A.", "answer": "$$\\boxed{A}$$", "id": "1416184"}]}