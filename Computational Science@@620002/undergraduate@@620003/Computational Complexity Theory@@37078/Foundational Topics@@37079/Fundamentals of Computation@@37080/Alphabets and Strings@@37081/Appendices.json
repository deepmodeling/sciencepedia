{"hands_on_practices": [{"introduction": "The foundation of all computation and formal language theory rests on the concepts of alphabets and strings. This first exercise invites you to explore the most fundamental relationship between them: how the size of an alphabet dramatically influences the number of unique strings you can create. By comparing a unary alphabet to a binary one, you will gain a concrete understanding of the exponential power that even a small increase in symbols provides, a principle that underpins modern digital computing [@problem_id:1411661].", "problem": "In the theory of computation, an alphabet is a non-empty finite set of symbols. A string over an alphabet is a finite sequence of symbols from that alphabet. The length of a string is the number of symbols it contains.\n\nConsider two distinct alphabets:\n1.  A unary alphabet, denoted by $\\Sigma_1$, which contains exactly one symbol. Let this alphabet be $\\Sigma_1 = \\{a\\}$.\n2.  A binary alphabet, denoted by $\\Sigma_2$, which contains exactly two distinct symbols. Let this alphabet be $\\Sigma_2 = \\{b, c\\}$.\n\nLet $U(n)$ represent the total number of unique strings of length $n$ that can be constructed using symbols from the unary alphabet $\\Sigma_1$. Similarly, let $B(n)$ represent the total number of unique strings of length $n$ that can be constructed using symbols from the binary alphabet $\\Sigma_2$.\n\nYour task is to find a function $F(n)$ that gives the ratio of the number of binary strings of length $n$ to the number of unary strings of length $n$. Express $F(n)$ as a closed-form analytic expression in terms of the integer $n$, where $n \\geq 1$.", "solution": "An alphabet of size $k$ yields $k$ choices for each position in a string. For strings of length $n$, the total number of strings is given by the multiplication principle as $k^{n}$, since choices are independent and order matters.\n\nFor the unary alphabet $\\Sigma_{1}=\\{a\\}$, we have $\\lvert\\Sigma_{1}\\rvert=1$, hence\n$$\nU(n)=1^{n}=1 \\quad \\text{for } n\\geq 1.\n$$\nFor the binary alphabet $\\Sigma_{2}=\\{b,c\\}$, we have $\\lvert\\Sigma_{2}\\rvert=2$, hence\n$$\nB(n)=2^{n}.\n$$\nTherefore, the desired ratio is\n$$\nF(n)=\\frac{B(n)}{U(n)}=\\frac{2^{n}}{1}=2^{n}.\n$$", "answer": "$$\\boxed{2^{n}}$$", "id": "1411661"}, {"introduction": "While knowing how many strings are possible is a great start, many applications in computer science, from protocol design to bioinformatics, impose specific rules on what constitutes a 'valid' string. This practice moves beyond simple counting to explore string construction under constraints, challenging you to count sequences where no two adjacent symbols are the same. Mastering this type of combinatorial reasoning is a key skill for analyzing algorithms and designing structured data formats [@problem_id:1411643].", "problem": "Consider an alphabet $\\Sigma$ that contains $k$ distinct symbols, where $k \\ge 2$. We are interested in forming strings of length $n$, where $n \\ge 1$, by selecting characters from this alphabet.\n\nYour task is to determine the total number of possible strings of length $n$ that can be formed under the strict condition that no two consecutive characters in the string are identical.\n\nProvide your answer as a closed-form analytic expression in terms of $n$ and $k$.", "solution": "We must count the number of length-$n$ strings over an alphabet $\\Sigma$ with $|\\Sigma|=k$, under the constraint that no two consecutive characters are identical.\n\nBy the multiplication principle (rule of product):\n- For the first position, there are $k$ choices, since any symbol from $\\Sigma$ is allowed.\n- For each subsequent position $i$ with $2 \\leq i \\leq n$, the character must differ from the character at position $i-1$. Since there are $k$ total symbols and one is forbidden (the immediately preceding symbol), there are $k-1$ choices for each such position.\n\nTherefore, the total number of valid strings is the product of the number of choices at each position:\n$$\nk \\times (k-1)^{n-1}.\n$$\nThis expression is valid for all $k \\geq 2$ and $n \\geq 1$. It also correctly reduces to $k$ when $n=1$.", "answer": "$$\\boxed{k(k-1)^{n-1}}$$", "id": "1411643"}, {"introduction": "We now shift our focus from counting individual strings to analyzing the properties of entire collections of strings, known as 'languages'. This exercise uses the familiar concept of a palindrome to introduce the formal property of 'closure', a central idea in the study of computational models. You will investigate whether concatenating two palindromic strings always results in another palindrome, learning how to use counterexamples to rigorously prove or disprove properties of languages [@problem_id:1411669].", "problem": "In formal language theory, we study the properties of sets of strings, known as languages. Let $\\Sigma$ be a finite, non-empty set of symbols, called an alphabet. A string is a finite sequence of symbols from $\\Sigma$. The concatenation of two strings $u$ and $v$ is the string $uv$ formed by appending $v$ to the end of $u$. The reverse of a string $w$, denoted $w^R$, is the string written in reverse order.\n\nA string $w$ is called a palindrome if it reads the same forwards and backwards, meaning $w = w^R$. Let $L_{pal}$ be the language consisting of all palindromic strings over an alphabet $\\Sigma$ that contains at least two distinct symbols.\n\nA language $L$ is said to be closed under an operation if applying that operation to any members of the language always produces a result that is also a member of the language. For concatenation, this means that for any two strings $u \\in L$ and $v \\in L$, their concatenation $uv$ must also be in $L$.\n\nWhich of the following statements most accurately and generally describes the closure property of the language $L_{pal}$ under the operation of concatenation?\n\nA. $L_{pal}$ is closed under concatenation because concatenating two strings that are identical to their reverses will always produce a new string that is also identical to its reverse.\n\nB. $L_{pal}$ is not closed under concatenation. For instance, consider an alphabet $\\Sigma = \\{s, t\\}$. The strings $u = \\text{\"s\"}$ and $v = \\text{\"t\"}$ are both in $L_{pal}$, but their concatenation $uv = \\text{\"st\"}$ is not in $L_{pal}$.\n\nC. $L_{pal}$ is not closed under concatenation. For instance, consider an alphabet $\\Sigma = \\{s, t\\}$. The strings $u = \\text{\"st\"}$ and $v = \\text{\"ts\"}$ are not in $L_{pal}$, but their concatenation $uv = \\text{\"stts\"}$ is in $L_{pal}$.\n\nD. $L_{pal}$ is closed under concatenation, but only if the alphabet $\\Sigma$ contains exactly one symbol.\n\nE. $L_{pal}$ is not closed under concatenation. For instance, consider an alphabet $\\Sigma = \\{s, t\\}$. The strings $u = \\text{\"sts\"}$ and $v = \\text{\"s\"}$ are both in $L_{pal}$, and their concatenation $uv = \\text{\"stss\"}$ is also in $L_{pal}$.", "solution": "We formalize the definitions. For an alphabet $\\Sigma$, the set of palindromes is $L_{pal} = \\{ w \\in \\Sigma^{*} : w = w^{R} \\}$. Closure of $L_{pal}$ under concatenation would mean\n$$\n\\forall u,v \\in L_{pal},\\; uv \\in L_{pal}.\n$$\nAssume $|\\Sigma| \\ge 2$ as stated. Choose distinct symbols $a,b \\in \\Sigma$ with $a \\neq b$. Consider $u = a$ and $v = b$. Since single symbols equal their reverse, we have $u = u^{R}$ and $v = v^{R}$, hence $u,v \\in L_{pal}$. Now compute the reverse of their concatenation:\n$$\n(uv)^{R} = (ab)^{R} = ba.\n$$\nBecause $a \\neq b$, we have $ab \\neq ba$, hence $uv \\neq (uv)^{R}$ and therefore $uv \\notin L_{pal}$. This provides a counterexample, proving that for $|\\Sigma| \\ge 2$, $L_{pal}$ is not closed under concatenation.\n\nEvaluating the options:\n- A is false because the counterexample above shows concatenation of palindromes need not be a palindrome.\n- B is correct: it asserts non-closure and gives an instance with $u = \\text{\"s\"}$, $v = \\text{\"t\"}$, for which $uv = \\text{\"st\"}$ is not a palindrome.\n- C does not address closure: it uses $u,v \\notin L_{pal}$ and shows their concatenation can be a palindrome, which is irrelevant to closure of $L_{pal}$.\n- D is true as a general statement across alphabets (for $|\\Sigma| = 1$, every string is a palindrome and closure holds), but the problem explicitly fixes $|\\Sigma| \\ge 2$, under which non-closure holds; thus it does not answer the posed setting as directly as B.\n- E is incorrect: the concatenation $\\text{\"stss\"}$ is not a palindrome, and even if it were, a single example of a palindromic concatenation would not prove closure.\n\nTherefore, under the given assumption that $\\Sigma$ has at least two symbols, the accurate statement is B.", "answer": "$$\\boxed{B}$$", "id": "1411669"}]}