{"hands_on_practices": [{"introduction": "Beyond truth tables and logical circuits, Boolean functions can be expressed algebraically as polynomials. This powerful perspective, known as the Algebraic Normal Form (ANF), allows us to analyze functions using tools from algebra, revealing properties like their degree of non-linearity. This exercise [@problem_id:1413987] provides hands-on practice in converting a fundamental Boolean function, the 3-variable majority function, into its unique polynomial representation over the finite field $GF(2)$.", "problem": "In the study of computational complexity, Boolean functions are often analyzed by representing them as polynomials over the finite field with two elements, $GF(2)=\\{0, 1\\}$. In this algebraic structure, addition corresponds to the logical exclusive OR (XOR) operation, and multiplication corresponds to the logical AND operation. All arithmetic is performed modulo 2. Consequently, for any variable $v \\in \\{0, 1\\}$, we have $v+v = 0$ and $v^2 = v$. These properties imply that any Boolean function $f(x_1, \\dots, x_n)$ has a unique representation as a multilinear polynomial over $GF(2)$, also known as its algebraic normal form.\n\nWe consider the 3-variable majority function, denoted as $\\text{MAJ}_3(x, y, z)$. This function takes three Boolean inputs $x, y, z \\in \\{0, 1\\}$ and evaluates to 1 if two or more of the inputs are 1, and evaluates to 0 otherwise.\n\nDetermine the unique multilinear polynomial representation for $\\text{MAJ}_3(x, y, z)$ over $GF(2)$, and find the degree of this polynomial. The degree of a polynomial is defined as the largest number of variables multiplied together in any of its terms.\n\nProvide your answer as a two-element row matrix, where the first element is the polynomial expression and the second element is its integer degree. In your polynomial expression, use the variable names $x$, $y$, and $z$, use `+` to denote addition (XOR), and use juxtaposition for multiplication (AND).", "solution": "We work over $GF(2)$ where addition is XOR and multiplication is AND, all arithmetic modulo $2$. Any Boolean function in three variables has a unique multilinear polynomial (algebraic normal form, ANF):\n$$\nf(x,y,z)=c_{0}+c_{1}x+c_{2}y+c_{3}z+c_{4}xy+c_{5}xz+c_{6}yz+c_{7}xyz,\n$$\nwith coefficients $c_{i}\\in\\{0,1\\}$ determined by the function values via the MÃ¶bius transform over the Boolean cube. For $\\text{MAJ}_{3}(x,y,z)$, we use its truth values:\n- $\\text{MAJ}_{3}(0,0,0)=0$,\n- $\\text{MAJ}_{3}(1,0,0)=\\text{MAJ}_{3}(0,1,0)=\\text{MAJ}_{3}(0,0,1)=0$,\n- $\\text{MAJ}_{3}(1,1,0)=\\text{MAJ}_{3}(1,0,1)=\\text{MAJ}_{3}(0,1,1)=1$,\n- $\\text{MAJ}_{3}(1,1,1)=1$.\n\nCoefficients are computed as follows (all sums are in $GF(2)$, so subtraction equals addition):\n$$\nc_{0}=\\text{MAJ}_{3}(0,0,0)=0.\n$$\n$$\nc_{1}=\\text{MAJ}_{3}(1,0,0)+c_{0}=0,\\quad\nc_{2}=\\text{MAJ}_{3}(0,1,0)+c_{0}=0,\\quad\nc_{3}=\\text{MAJ}_{3}(0,0,1)+c_{0}=0.\n$$\n$$\nc_{4}=\\text{MAJ}_{3}(1,1,0)+c_{1}+c_{2}+c_{0}=1,\\quad\nc_{5}=\\text{MAJ}_{3}(1,0,1)+c_{1}+c_{3}+c_{0}=1,\\quad\nc_{6}=\\text{MAJ}_{3}(0,1,1)+c_{2}+c_{3}+c_{0}=1.\n$$\n$$\nc_{7}=\\text{MAJ}_{3}(1,1,1)+c_{1}+c_{2}+c_{3}+c_{4}+c_{5}+c_{6}+c_{0}=1+0+0+0+1+1+1+0=0.\n$$\nTherefore,\n$$\n\\text{MAJ}_{3}(x,y,z)=xy+xz+yz,\n$$\nwhich has degree $2$ because the highest-order monomials are pairwise products.", "answer": "$$\\boxed{\\begin{pmatrix} xy + xz + yz  2 \\end{pmatrix}}$$", "id": "1413987"}, {"introduction": "Many computational problems, from system verification to artificial intelligence, involve satisfying a set of logical constraints. A particularly important and widely applicable class of constraints is the Horn clause. This practice [@problem_id:1413994] explores a key structural property of the set of solutions for a Horn formula, demonstrating that it is closed under intersection. Understanding this property is crucial as it forms the basis for the efficient algorithms that solve Horn-satisfiability problems.", "problem": "A distributed computing system consists of five services, represented by Boolean variables $v_1, v_2, v_3, v_4, v_5$. A variable $v_i$ is true if the corresponding service is active and false otherwise. A system configuration is an assignment of truth values to these five variables. For the system to be stable, a configuration must satisfy a set of rules expressed as a single Boolean formula in Conjunctive Normal Form (CNF), which is a logical AND of clauses, where each clause is a logical OR of variables or their negations. The rules are as follows:\n1.  Service $v_1$ must be active.\n2.  If services $v_1$ and $v_2$ are both active, then service $v_3$ must also be active.\n3.  If services $v_1$ and $v_4$ are both active, then service $v_5$ must also be active.\n\nLet a system configuration be represented by a vector of truth values $(v_1, v_2, v_3, v_4, v_5)$, where 1 represents true and 0 represents false. Suppose we are given two different stable configurations, Configuration A = $(1, 1, 1, 0, 0)$ and Configuration B = $(1, 0, 0, 1, 1)$. We define a new configuration, Configuration C, by taking the component-wise logical AND of A and B. That is, if A = $(a_1, a_2, a_3, a_4, a_5)$ and B = $(b_1, b_2, b_3, b_4, b_5)$, then C = $(a_1 \\land b_1, a_2 \\land b_2, a_3 \\land b_3, a_4 \\land b_4, a_5 \\land b_5)$.\n\nWhich of the following statements about Configuration C is correct?\n\nA. Configuration C is identical to Configuration A.\n\nB. Configuration C is identical to Configuration B.\n\nC. Configuration C is a stable configuration, but it is different from both A and B.\n\nD. Configuration C is not a stable configuration.\n\nE. There is not enough information to determine if Configuration C is stable.", "solution": "We are given Boolean variables $v_{1},v_{2},v_{3},v_{4},v_{5}$ and constraints expressed as CNF clauses corresponding to the rules:\n1. Service $v_{1}$ must be active, which is the unit clause $v_{1}$.\n2. If $v_{1}$ and $v_{2}$ are both active, then $v_{3}$ must be active, which is logically $(v_{1} \\land v_{2}) \\Rightarrow v_{3}$ and equivalently $\\lnot(v_{1} \\land v_{2}) \\lor v_{3}$, i.e., $\\lnot v_{1} \\lor \\lnot v_{2} \\lor v_{3}$.\n3. If $v_{1}$ and $v_{4}$ are both active, then $v_{5}$ must be active, which is $(v_{1} \\land v_{4}) \\Rightarrow v_{5}$ and equivalently $\\lnot v_{1} \\lor \\lnot v_{4} \\lor v_{5}$.\n\nThe given stable configurations are $A=(1,1,1,0,0)$ and $B=(1,0,0,1,1)$. Define $C$ component-wise by $c_{i}=a_{i} \\land b_{i}$ for $i \\in \\{1,2,3,4,5\\}$. Compute each component:\n- $c_{1}=1 \\land 1=1$,\n- $c_{2}=1 \\land 0=0$,\n- $c_{3}=1 \\land 0=0$,\n- $c_{4}=0 \\land 1=0$,\n- $c_{5}=0 \\land 1=0$.\nThus $C=(1,0,0,0,0)$.\n\nCheck whether $C$ equals $A$ or $B$:\n- $C \\neq A$ because $c_{2}=0 \\neq a_{2}=1$.\n- $C \\neq B$ because $c_{4}=0 \\neq b_{4}=1$.\nTherefore, $C$ is different from both $A$ and $B$.\n\nVerify that $C$ satisfies all CNF clauses:\n- Clause $v_{1}$ evaluates to $1$, since $v_{1}=1$ in $C$.\n- Clause $\\lnot v_{1} \\lor \\lnot v_{2} \\lor v_{3}$ evaluates to $\\lnot 1 \\lor \\lnot 0 \\lor 0 = 0 \\lor 1 \\lor 0 = 1$.\n- Clause $\\lnot v_{1} \\lor \\lnot v_{4} \\lor v_{5}$ evaluates to $\\lnot 1 \\lor \\lnot 0 \\lor 0 = 0 \\lor 1 \\lor 0 = 1$.\nAll clauses are true, so $C$ is a stable configuration.\n\nSince $C$ is stable and different from both $A$ and $B$, the correct choice is option C.", "answer": "$$\\boxed{C}$$", "id": "1413994"}, {"introduction": "A core skill in logic and computer science is not just analyzing existing formulas, but constructing new ones for specific purposes. This problem [@problem_id:1413986] challenges you to act as a logic designer, engineering a 3-CNF formula that has exactly one satisfying assignment. This exercise will sharpen your problem-solving intuition by making you think of clauses as precise tools for \"ruling out\" unwanted truth valuations, giving you a deeper, constructive grasp of Boolean satisfiability.", "problem": "A computer scientist is designing a logic circuit whose behavior is modeled by a Boolean formula in 3-Conjunctive Normal Form (3-CNF) over four variables: $x_1, x_2, x_3, x_4$. A formula is in 3-CNF if it is a conjunction (AND) of clauses, where each clause is a disjunction (OR) of exactly three literals (a variable or its negation). The final formula, denoted by $\\Phi$, must have exactly one satisfying truth assignment.\n\nThe formula $\\Phi$ is constructed by conjoining two sub-formulas: $\\Phi = \\Phi_{equiv} \\land \\Psi$.\n\nThe first sub-formula, $\\Phi_{equiv}$, is designed to establish logical equivalences among a subset of the variables. Specifically, it enforces $x_1 \\leftrightarrow x_2$ and $x_2 \\leftrightarrow x_3$. This is achieved by converting the 2-CNF representation of equivalence into 3-CNF. The method for converting a 2-literal clause $(l_1 \\lor l_2)$ to a set of 3-literal clauses using an auxiliary variable $x_k$ is to replace it with the pair of clauses $(l_1 \\lor l_2 \\lor x_k) \\land (l_1 \\lor l_2 \\lor \\neg x_k)$.\nIn this specific construction:\n- To enforce $x_1 \\leftrightarrow x_2$, which is equivalent to $(\\neg x_1 \\lor x_2) \\land (x_1 \\lor \\neg x_2)$, the variable $x_4$ is used as the auxiliary variable for both 2-literal clauses.\n- To enforce $x_2 \\leftrightarrow x_3$, which is equivalent to $(\\neg x_2 \\lor x_3) \\land (x_2 \\lor \\neg x_3)$, the variable $x_1$ is used as the auxiliary variable for both 2-literal clauses.\n\nThe second sub-formula, $\\Psi$, consists of an additional set of 3-CNF clauses that must also be satisfied.\n\nAfter combining both parts, the complete formula $\\Phi$ is known to be satisfied by exactly one assignment of truth values to the four variables, which is $(x_1, x_2, x_3, x_4) = (\\text{false, false, false, true})$.\n\nGiven this design, what is the minimum number of clauses that the sub-formula $\\Psi$ must contain?", "solution": "By construction, each 2-literal clause is converted to two 3-literal clauses with an auxiliary variable via the identity\n$$(A \\lor z) \\land (A \\lor \\neg z) \\equiv A.$$\nThis follows from distributivity: $(A \\lor z) \\land (A \\lor \\neg z) \\equiv A \\lor (z \\land \\neg z) \\equiv A \\lor \\bot \\equiv A$. Therefore $\\Phi_{equiv}$ is logically equivalent to the 2-CNF\n$$(\\neg x_{1} \\lor x_{2}) \\land (x_{1} \\lor \\neg x_{2}) \\land (\\neg x_{2} \\lor x_{3}) \\land (x_{2} \\lor \\neg x_{3}),$$\nwhich enforces $x_{1} \\leftrightarrow x_{2}$ and $x_{2} \\leftrightarrow x_{3}$, i.e., $x_{1}=x_{2}=x_{3}$. The variable $x_{4}$ is unconstrained by $\\Phi_{equiv}$. Hence the satisfying assignments of $\\Phi_{equiv}$ are exactly\n$$(0,0,0,0),\\quad (0,0,0,1),\\quad (1,1,1,0),\\quad (1,1,1,1),$$\nwhere we write $0$ for false and $1$ for true. The target unique model for $\\Phi=\\Phi_{equiv}\\land\\Psi$ is $(0,0,0,1)$, so $\\Psi$ must eliminate the other three assignments while remaining true on $(0,0,0,1)$.\n\nA single 3-literal clause $C=(\\ell_{1}\\lor \\ell_{2}\\lor \\ell_{3})$ is false on an assignment precisely when all three literals are false. Consider whether one clause can rule out all three undesired assignments:\n- No clause can be false simultaneously on $(0,0,0,0)$ and $(1,1,1,1)$, because for each variable $x_{i}$, exactly one of $x_{i}$ or $\\neg x_{i}$ is false at $(0,0,0,0)$ and the other is false at $(1,1,1,1)$, so there is no literal that is false in both assignments.\n- No clause can be false simultaneously on $(0,0,0,0)$ and $(1,1,1,0)$ for the same reason on $x_{1},x_{2},x_{3}$; the only common false literal is $x_{4}$, which is insufficient since a 3-clause needs three literals all false.\n- A clause can be false simultaneously on $(1,1,1,0)$ and $(1,1,1,1)$ by choosing literals $\\neg x_{1},\\neg x_{2},\\neg x_{3}$, which are all false when $x_{1}=x_{2}=x_{3}=1$ regardless of $x_{4}$.\n\nTherefore any single 3-literal clause can eliminate at most two of the three undesired assignments, so $|\\Psi|\\geq 2$.\n\nIt remains to show that two clauses suffice. Take\n$$C_{1}=(\\neg x_{1}\\lor \\neg x_{2}\\lor \\neg x_{3}),\\qquad C_{2}=(x_{4}\\lor x_{1}\\lor x_{2}).$$\nThen:\n- At $(0,0,0,1)$, $C_{1}$ is true (since $\\neg x_{1}$ is true) and $C_{2}$ is true (since $x_{4}$ is true).\n- At $(0,0,0,0)$, $C_{1}$ is true but $C_{2}$ is false (all three literals are false), so it is eliminated.\n- At $(1,1,1,0)$ and $(1,1,1,1)$, $C_{1}$ is false (all three literals are false), so both are eliminated.\n\nThus $\\Psi=\\{C_{1},C_{2}\\}$ eliminates exactly the three non-target assignments while keeping the target, and together with $\\Phi_{equiv}$ yields a unique satisfying assignment. Hence the minimum number of clauses in $\\Psi$ is $2$.", "answer": "$$\\boxed{2}$$", "id": "1413986"}]}