{"hands_on_practices": [{"introduction": "The heart of kernelization lies in applying \"reduction rules\" that safely simplify a problem. This first practice introduces a fundamental type of rule, the dominance principle, using the familiar context of the knapsack problem. By analyzing two items where one is strictly better than the other across all metrics, you will learn how to formally prove that a simplification is \"safe\" and will not prevent you from finding an optimal solution [@problem_id:1429663].", "problem": "A project manager at a consulting firm is tasked with selecting a portfolio of client projects for the upcoming quarter. The firm has a list of available projects. For each project $i$, there is an associated workload in person-hours, denoted by $w_i$, and an expected profit, denoted by $v_i$.\n\nThe firm's resources are constrained in two ways:\n1.  The total workload of all selected projects cannot exceed a total budget of $W$ person-hours.\n2.  Due to management and coordination limits, the total number of projects selected cannot be greater than $k$.\n\nThe objective is to choose a subset of projects that maximizes the total profit while respecting both the workload budget and the project count limit.\n\nWhile analyzing the list, the manager identifies two specific projects, Project A and Project B. She notes that Project A is strictly more profitable than Project B ($v_A > v_B$), and its workload is less than or equal to that of Project B ($w_A \\le w_B$).\n\nBased only on this relationship between Project A and Project B, which of the following statements about an optimal selection of projects is guaranteed to be true?\n\nA. Project B can be immediately eliminated from consideration, as there will always exist an optimal selection of projects that does not include it.\n\nB. Any optimal selection of projects must include Project A.\n\nC. Any optimal selection of projects must contain either Project A or Project B, but not both.\n\nD. An optimal selection of projects cannot contain Project B unless it also contains Project A.\n\nE. No universally true statement can be made about Projects A and B in an optimal solution without knowing the parameters ($v_i, w_i, W, k$) of all other available projects.", "solution": "Model the selection problem as a 0-1 optimization. For each project $i$, define a decision variable $x_{i} \\in \\{0,1\\}$ indicating whether project $i$ is selected. The objective and constraints are:\n$$\n\\max \\sum_{i} v_{i} x_{i} \\quad \\text{subject to} \\quad \\sum_{i} w_{i} x_{i} \\le W,\\quad \\sum_{i} x_{i} \\le k,\\quad x_{i} \\in \\{0,1\\}.\n$$\nWe are given two projects $A$ and $B$ with $v_{A}  v_{B}$ and $w_{A} \\le w_{B}$.\n\nWe now analyze which statements are guaranteed to be true about an optimal solution.\n\nTo test statement D, consider any optimal solution $x^{*}$ and suppose $x^{*}_{B} = 1$ and $x^{*}_{A} = 0$. Construct a new solution $y$ by setting $y_{A} = 1$, $y_{B} = 0$, and $y_{i} = x^{*}_{i}$ for all other $i$. Then:\n- The total number of selected projects is preserved because $y_{A} + y_{B} = x^{*}_{A} + x^{*}_{B} = 1$, hence $\\sum_{i} y_{i} = \\sum_{i} x^{*}_{i} \\le k$.\n- The total workload does not increase because\n$$\n\\sum_{i} w_{i} y_{i} = \\sum_{i \\ne A,B} w_{i} x^{*}_{i} + w_{A} \\le \\sum_{i \\ne A,B} w_{i} x^{*}_{i} + w_{B} = \\sum_{i} w_{i} x^{*}_{i} \\le W,\n$$\nusing $w_{A} \\le w_{B}$.\n- The objective strictly improves because\n$$\n\\sum_{i} v_{i} y_{i} = \\sum_{i \\ne A,B} v_{i} x^{*}_{i} + v_{A}  \\sum_{i \\ne A,B} v_{i} x^{*}_{i} + v_{B} = \\sum_{i} v_{i} x^{*}_{i},\n$$\nusing $v_{A}  v_{B}$.\n\nThis contradicts the optimality of $x^{*}$. Therefore, in any optimal solution, if $B$ is included, then $A$ must also be included. Hence statement D is guaranteed true.\n\nNext, we show the other statements are not guaranteed:\n\n- Statement A claims $B$ can be eliminated. Consider an instance with only projects $A$ and $B$, with $W \\ge w_{A} + w_{B}$ and $k \\ge 2$. Then the selection containing both $A$ and $B$ is feasible with profit $v_{A} + v_{B}$, which strictly exceeds the profit of any selection that excludes $B$ (which is at most $v_{A}$). Thus every optimal solution includes $B$, so A is not guaranteed.\n\n- Statement B claims every optimal solution must include $A$. If $w_{A}  W$, then $A$ is infeasible, so an optimal solution need not include $A$. Hence B is not guaranteed.\n\n- Statement C claims any optimal solution must contain exactly one of $A$ or $B$. The previous counterexample (feasible $A$ and $B$ together) shows an optimal solution may contain both. Also, if $w_{A}  W$ and $w_{B}  W$, an optimal solution contains neither. Hence C is not guaranteed.\n\n- Statement E claims no universally true statement can be made, but D is universally true, so E is false.\n\nTherefore, the only guaranteed statement is D.", "answer": "$$\\boxed{D}$$", "id": "1429663"}, {"introduction": "The concept of dominance is not limited to numerical values; it is equally powerful in structural problems like Set Cover. In this exercise, we translate the idea of \"being better\" into the language of sets, where one employee's skill set might be a subset of another's. This practice [@problem_id:1429664] will solidify your understanding of reduction rules by applying them to this new, common scenario, a key step in simplifying complex resource-allocation problems.", "problem": "In computational complexity, kernelization is a preprocessing technique used to reduce the size of a problem instance. Consider the following decision problem, which we will call **MINIMUM TEAM COVER**:\n\nGiven a set of available employees $E$, where each employee $e \\in E$ has a specific set of skills $S_e$, a target set of required skills $S_{req}$, and an integer $k$, can we select a team of at most $k$ employees such that every skill in $S_{req}$ is covered by at least one team member?\n\nA consulting firm is analyzing a small instance of this problem to decide which preprocessing rules are valid. The goal of a valid rule is to simplify the instance by removing employees from consideration, without changing the answer to the MINIMUM TEAM COVER problem for any possible $k$ and $S_{req}$. In other words, if an optimal (smallest) team exists, it should still be possible to find an optimal team from the reduced pool of employees.\n\nThe current pool of candidates and their skills are:\n*   **Liam**: {'Version Control', 'API Design'}\n*   **Mia**: {'Database', 'UI/UX'}\n*   **Noah**: {'Version Control'}\n*   **Olivia**: {'Version Control', 'API Design', 'Testing'}\n*   **Ethan**: {'Database'}\n\nWhich of the following statements describe a valid preprocessing step that can be applied to this candidate pool? Select all that apply.\n\nA. Remove Liam, as his skill set is a strict subset of Olivia's.\n\nB. Remove Olivia, as her skill set strictly contains Liam's.\n\nC. Remove Noah, as his skill set is a strict subset of Liam's.\n\nD. Remove Ethan, as his skill set is a strict subset of Mia's.\n\nE. No employee can be removed without potentially affecting the ability to find an optimal solution.", "solution": "We formalize a standard dominance (subset) reduction rule for set coverâ€“type problems. For employees $x$ and $y$ with skill sets $S_{x}$ and $S_{y}$, if $S_{x} \\subset S_{y}$, then $x$ is dominated by $y$ and can be safely removed without changing the answer to the decision problem for any target $S_{req}$ and any $k$.\n\nProof of safety: Fix arbitrary $S_{req}$ and $k$. Consider any feasible team $T$ with $|T| \\leq k$. If $x \\notin T$, then removing $x$ from the pool has no effect. If $x \\in T$, define $T' = (T \\setminus \\{x\\}) \\cup \\{y\\}$. Then $|T'| = |T| \\leq k$, and the set of skills covered by $T'$ contains all skills covered by $T$ because $S_{x} \\subset S_{y}$. Hence $T'$ is also feasible. If $T$ is a minimum-size feasible team, then $T'$ has the same size, so there exists an optimal team that does not use $x$. Therefore removing $x$ preserves feasibility and optimality for all $S_{req}$ and $k$. Conversely, removing $y$ is not safe in general because $y$ may possess skills not in $S_{x}$ that could be required by some $S_{req}$.\n\nApply the rule to the given pool:\n- Liam vs. Olivia: $S_{\\text{Liam}} = \\{\\text{Version Control}, \\text{API Design}\\}$ and $S_{\\text{Olivia}} = \\{\\text{Version Control}, \\text{API Design}, \\text{Testing}\\}$. We have $S_{\\text{Liam}} \\subset S_{\\text{Olivia}}$, so removing Liam is valid. This validates option A.\n- Removing Olivia because she strictly contains Liam (option B) is invalid in general: if $S_{req}$ contains Testing, only Olivia provides it, so removing Olivia may change the answer.\n- Noah vs. Liam (and also Olivia): $S_{\\text{Noah}} = \\{\\text{Version Control}\\} \\subset S_{\\text{Liam}}$ and $S_{\\text{Noah}} \\subset S_{\\text{Olivia}}$. Hence removing Noah is valid by the dominance rule. This validates option C.\n- Ethan vs. Mia: $S_{\\text{Ethan}} = \\{\\text{Database}\\} \\subset S_{\\text{Mia}} = \\{\\text{Database}, \\text{UI/UX}\\}$. Hence removing Ethan is valid. This validates option D.\n- Since A, C, and D are valid removals, statement E is false.\n\nTherefore, the valid preprocessing steps are A, C, and D.", "answer": "$$\\boxed{ACD}$$", "id": "1429664"}, {"introduction": "To truly master reduction rules, we must understand how they behave in different, yet related, contexts. The Hitting Set problem is the classic dual of the Set Cover problem, and this exercise challenges you to adapt your reasoning. While your intuition from the previous problem might suggest one answer, you will discover that the correct simplification rule inverts when we switch from a \"covering\" to a \"hitting\" objective [@problem_id:1429634], deepening your insight into problem structure.", "problem": "In computational complexity theory, the $d$-Hitting Set problem is a classic decision problem. An instance of the problem is defined by a tuple $(U, \\mathcal{S}, k)$, where $U$ is a universe of elements, $\\mathcal{S} = \\{S_1, S_2, \\ldots, S_m\\}$ is a collection of subsets of $U$ with each set $S_i$ having a size of at most $d$ (i.e., $|S_i| \\le d$), and $k$ is a positive integer. The question is whether there exists a \"hitting set\" $H \\subseteq U$ with size at most $k$ (i.e., $|H| \\le k$) that has a non-empty intersection with every set in the collection $\\mathcal{S}$ (i.e., $H \\cap S_i \\neq \\emptyset$ for all $i=1, \\ldots, m$).\n\nAs a preprocessing step for solving this problem, we often look for simplification rules that can reduce the size of the instance without changing the answer to the decision problem. Consider an instance of $d$-Hitting Set where for two distinct sets in the collection, $S_i \\in \\mathcal{S}$ and $S_j \\in \\mathcal{S}$, it is known that $S_j$ is a proper subset of $S_i$ (i.e., $S_j \\subset S_i$).\n\nWhich of the following statements describes a valid simplification that can be made to the instance while guaranteeing that the simplified instance has a \"yes\" answer if and only if the original instance does?\n\nA. The set $S_i$ can be removed from the collection $\\mathcal{S}$.\n\nB. The set $S_j$ can be removed from the collection $\\mathcal{S}$.\n\nC. Both sets $S_i$ and $S_j$ can be removed from the collection $\\mathcal{S}$.\n\nD. All elements in the set difference $S_i \\setminus S_j$ can be removed from the universe $U$ and, consequently, from any set in $\\mathcal{S}$ that contains them.\n\nE. Any valid hitting set for the instance must contain at least one element from the set difference $S_i \\setminus S_j$.", "solution": "The problem asks for a valid reduction rule for the $d$-Hitting Set problem when one set in the input collection, $S_j$, is a proper subset of another, $S_i$. A reduction rule is valid if the modified instance is a \"yes\" instance if and only if the original instance is a \"yes\" instance. Let the original instance be $I = (U, \\mathcal{S}, k)$ and the proposed simplified instance be $I'$. We need to show that $I$ has a hitting set of size at most $k$ if and only if $I'$ does.\n\nLet's analyze each option.\n\n**Analysis of Option A: The set $S_i$ can be removed from the collection $\\mathcal{S}$.**\n\nLet the new instance be $I' = (U, \\mathcal{S}', k)$, where $\\mathcal{S}' = \\mathcal{S} \\setminus \\{S_i\\}$. We need to prove that a hitting set $H$ of size at most $k$ exists for $I$ if and only if a hitting set $H'$ of size at most $k$ exists for $I'$.\n\nFirst, assume a hitting set $H$ of size at most $k$ exists for the original instance $I$.\nBy definition, $H$ intersects every set in $\\mathcal{S}$. This includes every set in the sub-collection $\\mathcal{S}' = \\mathcal{S} \\setminus \\{S_i\\}$. Therefore, $H$ is also a valid hitting set for the instance $I'$. So, if $I$ is a \"yes\" instance, then $I'$ is also a \"yes\" instance.\n\nNext, assume a hitting set $H'$ of size at most $k$ exists for the simplified instance $I'$.\nBy definition, $H'$ intersects every set in $\\mathcal{S}'$. To show that $H'$ is also a hitting set for the original instance $I$, we only need to verify that $H'$ intersects the one set that was removed: $S_i$.\nSince $S_j \\in \\mathcal{S}$ and $S_j \\neq S_i$, it follows that $S_j \\in \\mathcal{S}'$. Because $H'$ is a hitting set for $I'$, it must intersect $S_j$. This means there is an element $x$ such that $x \\in H'$ and $x \\in S_j$.\nWe are given the condition that $S_j \\subset S_i$. By the definition of a subset, every element in $S_j$ is also in $S_i$. Since $x \\in S_j$, it must be that $x \\in S_i$.\nTherefore, $x \\in H' \\cap S_i$, which means $H'$ has a non-empty intersection with $S_i$.\nSince $H'$ intersects every set in $\\mathcal{S}'$ and also intersects $S_i$, it intersects every set in $\\mathcal{S}$. Thus, $H'$ is a valid hitting set for the original instance $I$. So, if $I'$ is a \"yes\" instance, then $I$ is also a \"yes\" instance.\n\nSince the existence of a solution is equivalent for both instances, this simplification is valid. The constraint imposed by $S_i$ is redundant because any set that \"hits\" the stricter constraint $S_j$ will automatically hit the looser constraint $S_i$.\n\n**Analysis of Option B: The set $S_j$ can be removed from the collection $\\mathcal{S}$.**\n\nThis is an invalid simplification. Consider a counterexample:\nLet the universe be $U = \\{a, b\\}$. Let the collection of sets be $\\mathcal{S} = \\{S_i, S_j\\}$ where $S_i = \\{a, b\\}$ and $S_j = \\{a\\}$, and let $k=1$. We have $S_j \\subset S_i$.\nThe simplified instance according to this rule would be $I' = (U, \\{S_i\\}, k)$, which is $(U, \\{\\{a, b\\}\\}, 1)$. A valid hitting set for $I'$ is $H' = \\{b\\}$.\nHowever, $H'=\\{b\\}$ is not a valid hitting set for the original instance $I$, because it does not intersect $S_j = \\{a\\}$.\nThe only valid hitting set for the original instance is $H=\\{a\\}$. By removing $S_j$, we changed the problem such that a new, incorrect solution appeared.\n\n**Analysis of Option C: Both sets $S_i$ and $S_j$ can be removed from the collection $\\mathcal{S}$.**\n\nThis is also invalid. If removing just $S_j$ is invalid (as shown above), then removing both $S_j$ and $S_i$ must also be invalid, as it removes a necessary constraint ($S_j$) from the problem. For instance, in the counterexample for Option B, removing both $\\{a,b\\}$ and $\\{a\\}$ leaves an empty collection of sets, for which the empty set is a valid hitting set of size 0. This is clearly not a solution to the original problem.\n\n**Analysis of Option D: All elements in the set difference $S_i \\setminus S_j$ can be removed from the universe $U$.**\n\nThis is an invalid simplification. Removing elements from the universe can eliminate valid solutions.\nConsider a counterexample:\nLet $U = \\{a, b, c\\}$. Let the collection be $\\mathcal{S} = \\{S_1, S_2\\}$ where $S_1 = \\{a, c\\}$ and $S_2 = \\{b\\}$. Also, let $S_i = \\{a,b\\}$ and $S_j=\\{a\\}$. The full collection is $\\mathcal{S}_{full} = \\{ \\{a,c\\}, \\{b\\}, \\{a,b\\}, \\{a\\} \\}$. Let $k=2$.\nThe set difference is $S_i \\setminus S_j = \\{a,b\\} \\setminus \\{a\\} = \\{b\\}$. The rule suggests removing the element $b$ from the universe.\nThe original instance has a valid hitting set $H = \\{b, c\\}$ of size 2. $H$ hits $\\{a,c\\}$ with $c$, and it hits $\\{b\\}$, $\\{a,b\\}$, and $\\{a\\}$ with $b$.\nLet's apply the rule. We remove $b$ from $U$. The new universe is $U'=\\{a,c\\}$. The sets become:\n$S_1' = \\{a, c\\}$\n$S_2' = \\emptyset$ (Problematic! A hitting set cannot intersect an empty set. Many definitions of Hitting Set require sets to be non-empty. Let's assume non-empty sets to avoid this degeneracy and refine the example).\n\nRefined counterexample:\nLet $U=\\{a,b,c\\}$ and $\\mathcal{S} = \\{ \\{a, b\\}, \\{a\\}, \\{b, c\\} \\}$. Let $k=1$.\nHere, $S_i = \\{a,b\\}$ and $S_j = \\{a\\}$. The set difference is $S_i \\setminus S_j = \\{b\\}$. The rule suggests removing $b$ from the universe $U$.\nThe original problem asks for a hitting set of size 1 for $\\{\\{a,b\\}, \\{a\\}, \\{b,c\\}\\}$. The only solution is $H=\\{b\\}$. It hits $\\{a,b\\}$ and $\\{b,c\\}$ with $b$, and is not required to hit $\\{a\\}$ as per our analysis of option A (we could remove $\\{a,b\\}$). The actual sets to hit are $\\{a\\}$ and $\\{b,c\\}$. This has no hitting set of size 1. Let's change $k=2$. A solution is $\\{a,b\\}$.\nLet's try a clearer example. $U=\\{a,b,d\\}$, $\\mathcal{S} = \\{\\{a,d\\}, \\{b,d\\}\\}$. $k=1$. Solution: $H=\\{d\\}$.\nNow, add $S_i=\\{a,c\\}$ and $S_j=\\{a\\}$. The instance is $\\mathcal{S}' = \\{\\{a,d\\}, \\{b,d\\}, \\{a,c\\}, \\{a\\}\\}$. $S_i \\setminus S_j = \\{c\\}$. The rule says to remove $c$ from $U$.\nNew instance: $U'=\\{a,b,d\\}$, $\\mathcal{S}'' = \\{\\{a,d\\}, \\{b,d\\}, \\{a\\}, \\{a\\}\\}$. The problem is to hit $\\{\\{a,d\\},\\{b,d\\},\\{a\\}\\}$. A hitting set of size 2 is $\\{a,d\\}$.\nOriginal instance: $\\mathcal{S}' = \\{\\{a,d\\}, \\{b,d\\}, \\{a,c\\}, \\{a\\}\\}$. A hitting set of size 2 could be $\\{c,d\\}$. By removing $c$, this valid solution is destroyed. Thus, this rule is invalid.\n\n**Analysis of Option E: Any valid hitting set for the instance must contain at least one element from the set difference $S_i \\setminus S_j$.**\n\nThis is false. A hitting set must intersect $S_j$. If it does so by picking an element $x \\in S_j$, then it has also intersected $S_i$ (since $x \\in S_j \\implies x \\in S_i$). There is no necessity to pick an element from $S_i \\setminus S_j$ to satisfy the constraints related to $S_i$ or $S_j$. For example, let $U=\\{a, b, c\\}$, $\\mathcal{S}=\\{\\{a, b\\}, \\{a\\}, \\{c\\}\\}$, and $k=2$. Here $S_i=\\{a,b\\}$ and $S_j=\\{a\\}$. The set difference is $\\{b\\}$. A valid hitting set is $H=\\{a,c\\}$. This set does not contain any element from the set difference $S_i \\setminus S_j = \\{b\\}$. Therefore, the statement is false.\n\nBased on the analysis, only Option A describes a valid simplification.", "answer": "$$\\boxed{A}$$", "id": "1429634"}]}