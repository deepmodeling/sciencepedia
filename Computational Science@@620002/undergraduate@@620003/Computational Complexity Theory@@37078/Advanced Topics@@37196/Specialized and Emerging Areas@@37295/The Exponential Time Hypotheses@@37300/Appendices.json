{"hands_on_practices": [{"introduction": "The Exponential Time Hypothesis (ETH) provides a formal basis for the belief that NP-hard problems like 3-SAT require exponential time. This first practice is a direct check on your understanding of the precise mathematical statement of ETH, which hinges on the concept of \"sub-exponential\" time, often written as $2^{o(n)}$. By analyzing a hypothetical algorithm's runtime, you will learn to distinguish between runtimes that are merely exponential and those that would be fast enough to contradict the hypothesis [@problem_id:1456514].", "problem": "In computational complexity theory, the satisfiability problem (SAT) is a cornerstone for understanding the limits of efficient computation. The 3-Satisfiability problem (3-SAT) is a specific version where one must determine if a given Boolean formula, in conjunctive normal form with exactly three literals per clause, can be made true by some assignment of truth values to its variables.\n\nTwo important conjectures related to the worst-case complexity of solving SAT are:\n1.  The **Exponential Time Hypothesis (ETH)**: This hypothesis states that there is no algorithm that can solve 3-SAT for a formula with $n$ variables in time $O(2^{o(n)})$. An algorithm runs in time $O(2^{o(n)})$ if its time complexity $T(n)$ is bounded by $C \\cdot 2^{f(n)}$ for some constant $C$ and some function $f(n)$ such that $\\lim_{n \\to \\infty} \\frac{f(n)}{n} = 0$. Essentially, ETH posits that there is some fundamental constant $\\delta > 0$ such that any algorithm for 3-SAT requires $\\Omega(2^{\\delta n})$ time in the worst case.\n2.  The **Strong Exponential Time Hypothesis (SETH)**: This is a stronger assumption which implies ETH. One of its key consequences is that for any constant $\\epsilon > 0$, general Boolean satisfiability (CNF-SAT) cannot be solved in $O(2^{(1-\\epsilon)n})$ time.\n\nNow, imagine a researcher in theoretical computer science announces a breakthrough: a novel algorithm that correctly solves any instance of 3-SAT on $n$ variables in a worst-case time of $O(2^{n/\\log_{2} n})$.\n\nAssuming this researcher's claim is mathematically sound and verified, which of the following statements represents the most direct and certain consequence?\n\nA. The claim implies that P = NP.\n\nB. The claim refutes the Exponential Time Hypothesis.\n\nC. The claim refutes the Strong Exponential Time Hypothesis, but is consistent with the Exponential Time Hypothesis.\n\nD. The claim is consistent with both the Exponential Time Hypothesis and the Strong Exponential Time Hypothesis.\n\nE. The claim proves that the Halting Problem is decidable.", "solution": "Let the claimed worst-case running time for 3-SAT on instances with $n$ variables be\n$$\nT(n)=O\\!\\left(2^{\\,n/\\log_{2} n}\\right).\n$$\nDefine $f(n)=\\frac{n}{\\log_{2} n}$. Then\n$$\n\\frac{f(n)}{n}=\\frac{1}{\\log_{2} n}\\to 0 \\quad \\text{as } n\\to \\infty,\n$$\nso $f(n)=o(n)$. Hence\n$$\nT(n)=O\\!\\left(2^{\\,o(n)}\\right).\n$$\nBy the Exponential Time Hypothesis (ETH), there is no algorithm solving 3-SAT in time $O\\!\\left(2^{\\,o(n)}\\right)$. Therefore, the existence of the claimed algorithm directly contradicts ETH, so ETH is refuted.\n\nSince the Strong Exponential Time Hypothesis (SETH) implies ETH, if ETH is false then SETH cannot be true. Thus the claim also refutes SETH. Among the provided choices, the most direct and certain stated consequence is that ETH is refuted.\n\nIt does not imply $P=\\text{NP}$, because $2^{n/\\log_{2} n}$ is superpolynomial, and it has no bearing on decidability of the Halting Problem.", "answer": "$$\\boxed{B}$$", "id": "1456514"}, {"introduction": "After grasping the basic definition of ETH, a common point of confusion arises from the parameters used in runtime analysis, as ETH is specifically about the dependence on the number of variables, $n$. This exercise challenges you to think critically about an algorithm whose exponential complexity depends on the number of clauses, $m$, rather than variables. Correctly analyzing this scenario is crucial for avoiding misinterpretations and for appreciating the precision required in fine-grained complexity arguments [@problem_id:1456534].", "problem": "The 3-Satisfiability (3-SAT) problem asks whether a given Boolean formula, expressed in 3-Conjunctive Normal Form (3-CNF), has a satisfying assignment of truth values to its variables. A formula is in 3-CNF if it is a conjunction (AND) of clauses, where each clause is a disjunction (OR) of exactly three literals (a variable or its negation).\n\nThe Exponential Time Hypothesis (ETH) is a conjecture in computational complexity theory that makes a statement about the worst-case runtime required to solve 3-SAT. Specifically, ETH states that there exists a constant $\\delta > 0$ such that no algorithm can solve 3-SAT in $O(2^{\\delta n})$ time, where $n$ is the number of variables in the formula. This is often stated as: there is no algorithm for 3-SAT that runs in time $2^{o(n)} \\cdot \\text{poly}(L)$, where $n$ is the number of variables and $L$ is the length of the input formula.\n\nSuppose a computer scientist develops a new algorithm for 3-SAT. They prove that for any 3-SAT instance with $n$ variables and $m$ clauses, their algorithm correctly determines satisfiability in a time complexity of $O(n^5 \\cdot 2^m)$.\n\nWhich of the following statements correctly analyzes the relationship between this new algorithm and the Exponential Time Hypothesis?\n\nA. The algorithm contradicts ETH because any algorithm for 3-SAT with an exponential term in its runtime complexity supports the hypothesis.\n\nB. The algorithm contradicts ETH because, for some instances, the number of clauses $m$ can be a polynomial in the number of variables $n$, resulting in an overall runtime that is exponential in $n$.\n\nC. The algorithm does not contradict ETH because the polynomial factor $n^5$ is considered small in the context of exponential time complexity.\n\nD. The algorithm does not contradict ETH because the Exponential Time Hypothesis is a statement about the runtime's dependence on the number of variables, whereas this algorithm's exponential component depends on the number of clauses.\n\nE. The algorithm does not contradict ETH because ETH only applies to algorithms with a running time strictly of the form $O(c^n)$ for some constant $c$, without any polynomial factors or dependence on other parameters.", "solution": "We restate the relevant ETH formulation precisely: ETH asserts that there is no algorithm that solves 3-SAT on instances with $n$ variables in time $2^{o(n)} \\cdot \\text{poly}(L)$, where $L$ is the input length. Equivalently (as stated in the problem), ETH is often phrased as the existence of a constant $\\delta>0$ such that no algorithm runs in time $O(2^{\\delta n})$ on all instances.\n\nThe proposed algorithm has running time\n$$\nT(n,m)=O\\!\\left(n^{5}\\cdot 2^{m}\\right),\n$$\nwhere $n$ is the number of variables and $m$ is the number of clauses. For a 3-CNF instance, the input length $L$ satisfies $L=\\Theta(n+m)$ up to logarithmic factors depending on encoding; in any case $m\\leq L$ and thus $2^{m}$ is exponential in the input size and at least as large as an exponential in $n$ when $m=\\Theta(n)$.\n\nTo check whether this contradicts ETH, we must ask whether the algorithm achieves a subexponential (in $n$) running time bound on all instances, i.e., whether there exists a function $f(n)=o(n)$ such that for all instances with $n$ variables,\n$$\nT(n,m) \\leq 2^{f(n)}\\cdot \\text{poly}(L).\n$$\nThis fails because for many natural families of 3-CNF formulas one has $m=\\Theta(n)$ (for example, bounded-density instances). On such families,\n$$\nT(n,m)=O\\!\\left(n^{5}\\cdot 2^{\\Theta(n)}\\right)=2^{\\Theta(n)}\\cdot \\text{poly}(n),\n$$\nwhich is not $2^{o(n)}\\cdot \\text{poly}(L)$. Therefore the algorithm is not subexponential in $n$ in the worst case and thus does not contradict ETH. Moreover, the fact that the exponential dependence is on $m$ rather than $n$ is exactly why there is no conflict with ETH; the polynomial factor $n^{5}$ is irrelevant to this conclusion.\n\nNow evaluate the options:\n\n- A is incorrect: having an exponential term does not contradict ETH; ETH rules out too-fast (subexponential-in-$n$) algorithms, not exponential ones.\n- B is incorrect: being exponential in $n$ does not contradict ETH; ETH forbids $2^{o(n)}$, not $2^{\\Theta(n)}$.\n- C is incorrect reasoning: while the conclusion is true, the justification focuses on the polynomial factor $n^{5}$, which is not the relevant issue for ETH.\n- D is correct: ETH concerns dependence on $n$, and here the exponential term depends on $m$; in particular, when $m=\\Theta(n)$ the algorithm runs in $2^{\\Theta(n)}\\cdot \\text{poly}(n)$ time, consistent with ETH.\n- E is incorrect: ETH explicitly allows polynomial factors and is typically stated as ruling out $2^{o(n)}\\cdot \\text{poly}(L)$ algorithms.\n\nThus the correct choice is D.", "answer": "$$\\boxed{D}$$", "id": "1456534"}, {"introduction": "The power of ETH lies not just in what it says about 3-SAT, but in what it allows us to conclude about thousands of other computational problems through reductions. This practice demonstrates the fundamental technique of using a polynomial-time reduction to translate the assumed hardness of 3-SAT into a concrete, conditional time lower bound for a different problem. Mastering this process of \"transferring\" hardness is the key skill for applying ETH to prove that no significantly faster algorithms are likely to exist for many problems of interest [@problem_id:1456504].", "problem": "Two computational complexity theorists, Alice and Bob, are investigating a problem known as \"Stellar Alignment\". The complexity of a Stellar Alignment instance is measured by a single positive integer parameter $N$. Their discussion revolves around the Exponential Time Hypothesis (ETH), which posits that there exists a universal constant $\\delta > 0$ such that the 3-Satisfiability (3-SAT) problem for a formula with $n$ variables cannot be solved in worst-case time $O(2^{\\delta n})$.\n\nBob claims a major breakthrough. He has designed a polynomial-time reduction that transforms any 3-SAT instance with $n$ variables into a Stellar Alignment instance of size $N$, where the size is given by the relation $N = k \\cdot n^2 \\ln(n)$. Here, $k$ is a fixed positive constant and $\\ln$ denotes the natural logarithm. Based on this reduction, Bob asserts that Stellar Alignment must require $2^{\\Omega(\\sqrt{N})}$ time to solve, assuming ETH is true.\n\nAlice is skeptical of his conclusion and decides to re-evaluate the implications of the reduction. Which of the following statements provides the correct analysis of Bob's claim?\n\nA. Bob is correct. The reduction is sufficient to prove a $2^{\\Omega(\\sqrt{N})}$ time lower bound for Stellar Alignment.\n\nB. Bob is incorrect. His reduction only proves that Stellar Alignment is NP-hard, which does not imply any specific exponential time lower bound.\n\nC. Bob is incorrect. The time lower bound implied by his reduction is $2^{\\Omega(\\sqrt{N \\ln N})}$.\n\nD. Bob is incorrect. The time lower bound implied by his reduction is $2^{\\Omega(\\sqrt{N / \\ln N})}$.\n\nE. Bob is incorrect. The time lower bound implied by his reduction is $2^{\\Omega(N^{1/3})}$.", "solution": "We are given a polynomial-time reduction from 3-SAT on $n$ variables to Stellar Alignment of size\n$$\nN = k n^{2} \\ln n,\n$$\nwith a fixed constant $k > 0$. Under ETH, there exists a constant $\\delta > 0$ such that no algorithm solves 3-SAT in time $O\\!\\left(2^{\\delta n}\\right)$. A standard contrapositive use of ETH is: if we could solve Stellar Alignment significantly faster than $2^{\\Theta(n)}$ after the reduction from 3-SAT, then we would obtain a $2^{o(n)}$-time algorithm for 3-SAT, which would imply an $O\\!\\left(2^{\\delta n}\\right)$ algorithm for some $\\delta>0$, contradicting ETH.\n\nTo translate the ETH lower bound from $n$ to $N$, we relate $n$ and $N$. Taking logarithms in $N = k n^{2} \\ln n$ yields\n$$\n\\ln N = \\ln k + 2 \\ln n + \\ln \\ln n.\n$$\nSince $\\ln \\ln n = o(\\ln n)$, it follows that $\\ln N = \\Theta(\\ln n)$, hence $\\ln n = \\Theta(\\ln N)$. From $N = k n^{2} \\ln n$ we obtain\n$$\nn^{2} = \\frac{N}{k \\ln n} = \\Theta\\!\\left(\\frac{N}{\\ln N}\\right),\n$$\nand therefore\n$$\nn = \\Theta\\!\\left(\\sqrt{\\frac{N}{\\ln N}}\\right).\n$$\n\nNow suppose, for contradiction, that Stellar Alignment could be solved in time\n$$\n2^{o\\!\\left(\\sqrt{N / \\ln N}\\right)}.\n$$\nComposing with the reduction, a 3-SAT instance with $n$ variables (mapping to size $N = k n^{2} \\ln n$) could then be solved in time\n$$\n2^{o\\!\\left(\\sqrt{N / \\ln N}\\right)} = 2^{o(n)},\n$$\nusing $n = \\Theta\\!\\left(\\sqrt{N / \\ln N}\\right)$. Any $2^{o(n)}$-time algorithm is, for sufficiently large $n$, bounded by $2^{\\delta n}$ for some fixed $\\delta>0$, hence would be an $O\\!\\left(2^{\\delta n}\\right)$ algorithm for 3-SAT, contradicting ETH. Therefore, under ETH, Stellar Alignment requires time at least\n$$\n2^{\\Omega\\!\\left(\\sqrt{N / \\ln N}\\right)}.\n$$\n\nComparing with the options, the correct implication of the reduction is option D.", "answer": "$$\\boxed{D}$$", "id": "1456504"}]}