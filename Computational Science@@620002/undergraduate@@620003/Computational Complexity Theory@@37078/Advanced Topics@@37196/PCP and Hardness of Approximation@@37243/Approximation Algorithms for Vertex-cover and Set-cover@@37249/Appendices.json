{"hands_on_practices": [{"introduction": "This first practice exercise provides a concrete entry point into approximation algorithms for Vertex Cover. The method of constructing a vertex cover from a maximal matching is a classic 2-approximation algorithm. This problem [@problem_id:1412472] asks you to execute the final step of this algorithm—translating a given maximal matching into the corresponding vertex cover—reinforcing the fundamental mechanics of this important procedure.", "problem": "Consider an undirected graph $G = (V, E)$ defined by a set of vertices $V$ and a set of edges $E$.\nThe set of vertices is $V = \\{v_1, v_2, v_3, v_4, v_5, v_6, v_7, v_8, v_9\\}$.\nThe set of edges is $E = \\{(v_1, v_2), (v_1, v_4), (v_2, v_3), (v_3, v_6), (v_4, v_5), (v_4, v_7), (v_5, v_6), (v_7, v_8), (v_8, v_9)\\}$.\n\nA maximal matching $M$ for this graph is given as the set of edges:\n$M = \\{(v_1, v_2), (v_3, v_6), (v_4, v_5), (v_7, v_8)\\}$.\n\nA vertex cover is a subset of vertices $C \\subseteq V$ such that every edge in $E$ has at least one of its endpoints in $C$. One method to construct a vertex cover is to form a set containing every vertex that is an endpoint of at least one edge in the given maximal matching $M$.\n\nWhich of the following sets represents the vertex cover generated by this specific procedure?\n\nA. $\\{v_1, v_2, v_3, v_4, v_5, v_6, v_7, v_8\\}$\n\nB. $\\{v_2, v_4, v_6, v_8\\}$\n\nC. $\\{v_2, v_5, v_6, v_8\\}$\n\nD. $\\{v_1, v_3, v_4, v_7, v_9\\}$\n\nE. $\\{v_1, v_2, v_3, v_4, v_5, v_6, v_7, v_8, v_9\\}$", "solution": "We are given an undirected graph $G=(V,E)$ with $V=\\{v_1,v_2,v_3,v_4,v_5,v_6,v_7,v_8,v_9\\}$ and a maximal matching $M=\\{(v_1,v_2),(v_3,v_6),(v_4,v_5),(v_7,v_8)\\}$. The procedure described constructs a vertex cover by taking all endpoints of edges in $M$. Formally, define\n$$\nC=\\bigcup_{(u,v)\\in M}\\{u,v\\}.\n$$\nApplying this to the given $M$,\n$$\nC=\\{v_1,v_2\\}\\cup\\{v_3,v_6\\}\\cup\\{v_4,v_5\\}\\cup\\{v_7,v_8\\}=\\{v_1,v_2,v_3,v_4,v_5,v_6,v_7,v_8\\}.\n$$\nTo confirm $C$ is a vertex cover, take any edge $(x,y)\\in E$. If $(x,y)\\in M$, then both $x$ and $y$ are in $C$ by construction. If $(x,y)\\notin M$, the maximality of $M$ implies that at least one of $x$ or $y$ is incident to an edge in $M$ (otherwise $(x,y)$ could be added to $M$), hence at least one endpoint lies in $C$. Therefore every edge in $E$ has an endpoint in $C$, so $C$ is a vertex cover. The computed set matches option A.", "answer": "$$\\boxed{A}$$", "id": "1412472"}, {"introduction": "We now turn to the Set Cover problem, a generalization of Vertex Cover with numerous real-world applications. This exercise [@problem_id:1412448] simulates the decision-making process of the standard greedy algorithm for Set Cover. By tracing the algorithm's first few steps in a relatable scenario, you will gain hands-on experience with the greedy strategy of making locally optimal choices to build a globally effective solution.", "problem": "A computer science student, Alex, is looking for a set of smartphone applications to cover a list of desired features. The total universe of desired features is given by the set $U$:\n$U = \\{ \\text{Photo Editing, Video Trimming, Cloud Sync, Task Management, Calendar Integration, Note Taking, File Sharing, Dark Mode} \\}$.\n\nAlex has found six potential apps. The features provided by each app are listed below:\n- $A_1$ (Creative Suite): $\\{ \\text{Photo Editing, Video Trimming, Dark Mode} \\}$\n- $A_2$ (Organizer Pro): $\\{ \\text{Task Management, Calendar Integration, Note Taking} \\}$\n- $A_3$ (SyncSphere): $\\{ \\text{Cloud Sync, File Sharing, Note Taking, Dark Mode} \\}$\n- $A_4$ (QuickTools): $\\{ \\text{Video Trimming, Task Management, File Sharing} \\}$\n- $A_5$ (Notes & Cloud): $\\{ \\text{Note Taking, Cloud Sync} \\}$\n- $A_6$ (ProjectFlow): $\\{ \\text{Task Management, Calendar Integration, File Sharing} \\}$\n\nAlex wants to select the minimum number of apps that provide all the features in $U$. This is an instance of the Set Cover problem, which is known to be computationally difficult. To find an approximate solution, Alex decides to use a standard greedy algorithm.\n\nThe greedy algorithm works as follows: at each step, select the app that covers the greatest number of features that have not yet been covered by previously selected apps. If there is a tie for the greatest number of newly covered features, select the app with the smallest subscript index (e.g., choose $A_i$ over $A_j$ if $i < j$).\n\nFollowing this greedy algorithm, what are the first and second apps that Alex selects? Your answer should be an ordered pair of the form (First App, Second App).\n\nA. ($A_3$, $A_1$)\n\nB. ($A_3$, $A_2$)\n\nC. ($A_1$, $A_4$)\n\nD. ($A_3$, $A_4$)\n\nE. ($A_2$, $A_6$)\n\nF. ($A_4$, $A_3$)", "solution": "Denote the features by symbols: PE (Photo Editing), VT (Video Trimming), CS (Cloud Sync), TM (Task Management), CI (Calendar Integration), NT (Note Taking), FS (File Sharing), DM (Dark Mode). Then\n$$U=\\{ \\text{PE}, \\text{VT}, \\text{CS}, \\text{TM}, \\text{CI}, \\text{NT}, \\text{FS}, \\text{DM} \\}.$$\nThe apps are\n$$A_{1}=\\{\\text{PE},\\text{VT},\\text{DM}\\},\\quad A_{2}=\\{\\text{TM},\\text{CI},\\text{NT}\\},\\quad A_{3}=\\{\\text{CS},\\text{FS},\\text{NT},\\text{DM}\\},$$\n$$A_{4}=\\{\\text{VT},\\text{TM},\\text{FS}\\},\\quad A_{5}=\\{\\text{NT},\\text{CS}\\},\\quad A_{6}=\\{\\text{TM},\\text{CI},\\text{FS}\\}.$$\nThe greedy rule selects at each step an $A_{i}$ maximizing the number of newly covered features, i.e., maximizing $|A_{i}\\setminus S|$ where $S$ is the set already covered.\n\nStep 1: Initially $S=\\varnothing$, so $|A_{i}\\setminus S|=|A_{i}|$. Compute sizes:\n$|A_{1}|=3,\\ |A_{2}|=3,\\ |A_{3}|=4,\\ |A_{4}|=3,\\ |A_{5}|=2,\\ |A_{6}|=3.$\nThe maximum is $4$, achieved uniquely by $A_{3}$, so the first selection is $A_{3}$. Now\n$S_{1}=A_{3}=\\{\\text{CS},\\text{FS},\\text{NT},\\text{DM}\\},\\quad U\\setminus S_{1}=\\{\\text{PE},\\text{VT},\\text{TM},\\text{CI}\\}.$\n\nStep 2: For each remaining app, compute newly covered features relative to $S_{1}$:\n$A_{1}\\setminus S_{1}=\\{\\text{PE},\\text{VT}\\} \\Rightarrow |A_{1}\\setminus S_{1}|=2,$\n$A_{2}\\setminus S_{1}=\\{\\text{TM},\\text{CI}\\} \\Rightarrow |A_{2}\\setminus S_{1}|=2,$\n$A_{4}\\setminus S_{1}=\\{\\text{VT},\\text{TM}\\} \\Rightarrow |A_{4}\\setminus S_{1}|=2,$\n$A_{5}\\setminus S_{1}=\\varnothing \\Rightarrow |A_{5}\\setminus S_{1}|=0,$\n$A_{6}\\setminus S_{1}=\\{\\text{TM},\\text{CI}\\} \\Rightarrow |A_{6}\\setminus S_{1}|=2.$\nThe maximum newly covered count is $2$, tied among $A_{1},A_{2},A_{4},A_{6}$. By the tie-break rule (smallest subscript), select $A_{1}$ as the second app.\n\nThus, the first two selections are $(A_{3},A_{1})$, corresponding to option A.", "answer": "$$\\boxed{A}$$", "id": "1412448"}, {"introduction": "This final practice problem introduces a powerful and versatile technique for designing approximation algorithms: Linear Programming (LP) relaxation followed by rounding. You will be given the fractional solution from an LP relaxation for a weighted Set Cover instance [@problem_id:1412479]. Your task is to apply a deterministic rounding scheme to obtain a valid integer solution and, critically, to evaluate its performance by calculating the approximation ratio against the true optimal solution for this specific instance.", "problem": "A cybersecurity firm is tasked with deploying a minimal-cost set of analysis tools to ensure complete coverage against a new family of five related software vulnerabilities, denoted by the set $U = \\{v_1, v_2, v_3, v_4, v_5\\}$. The firm has four proprietary analysis tools available for deployment, each with a specific deployment cost and a specific subset of vulnerabilities it can detect.\n\nThe tools and their attributes are as follows:\n- **Tool 1 ($T_1$)**: Covers the vulnerability set $\\{v_1, v_2, v_5\\}$. The deployment cost is $c_1 = 3$ units.\n- **Tool 2 ($T_2$)**: Covers the vulnerability set $\\{v_2, v_3, v_4\\}$. The deployment cost is $c_2 = 4$ units.\n- **Tool 3 ($T_3$)**: Covers the vulnerability set $\\{v_1, v_4\\}$. The deployment cost is $c_3 = 2$ units.\n- **Tool 4 ($T_4$)**: Covers the vulnerability set $\\{v_3, v_5\\}$. The deployment cost is $c_4 = 2$ units.\n\nThis problem is an instance of the SET-COVER problem. To find an approximate solution, the firm first solves the standard Linear Programming (LP) relaxation of the problem, where a variable $x_j$ represents the fractional deployment of tool $T_j$. For this specific instance, the LP solver returned the optimal fractional solution $x^* = (x_1^*, x_2^*, x_3^*, x_4^*)$, where $x_1^* = \\frac{1}{2}$, $x_2^* = \\frac{1}{2}$, $x_3^* = \\frac{1}{2}$, and $x_4^* = \\frac{1}{2}$.\n\nTo convert this fractional plan into a concrete deployment, the company uses a deterministic rounding rule: a tool $T_j$ is selected for full deployment if its fractional value $x_j^*$ is greater than or equal to $\\frac{1}{2}$. Otherwise, it is not deployed.\n\nYour task is to calculate the approximation ratio of the solution obtained by this rounding algorithm for this specific problem instance. The approximation ratio is defined as the ratio of the cost of the algorithm's solution to the cost of the true optimal solution.\n\nProvide your final answer as a fraction in simplest form.", "solution": "We are given the universe $U=\\{v_1,v_2,v_3,v_4,v_5\\}$ and four tools with cover sets and costs: $T_1=\\{v_1,v_2,v_5\\}$ with $c_1=3$, $T_2=\\{v_2,v_3,v_4\\}$ with $c_2=4$, $T_3=\\{v_1,v_4\\}$ with $c_3=2$, and $T_4=\\{v_3,v_5\\}$ with $c_4=2$. The LP relaxation returns $x^*=(\\tfrac{1}{2},\\tfrac{1}{2},\\tfrac{1}{2},\\tfrac{1}{2})$, and the deterministic rounding rule selects $T_j$ if $x_j^*\\ge \\tfrac{1}{2}$. Since each $x_j^*=\\tfrac{1}{2}$, all four tools are selected. The resulting cost is\n$$\nC_{\\text{alg}}=c_1+c_2+c_3+c_4=3+4+2+2=11.\n$$\n\nTo compute the approximation ratio, we need the true optimal integer solution cost $C_{\\text{opt}}$. We check minimal-cost covers. No single tool covers all elements. Check pairs:\n- $T_1\\cup T_2=\\{v_1,v_2,v_5\\}\\cup\\{v_2,v_3,v_4\\}=\\{v_1,v_2,v_3,v_4,v_5\\}$, with cost $3+4=7$.\n- $T_1\\cup T_3=\\{v_1,v_2,v_4,v_5\\}$, missing $v_3$.\n- $T_1\\cup T_4=\\{v_1,v_2,v_3,v_5\\}$, missing $v_4$.\n- $T_2\\cup T_3=\\{v_1,v_2,v_3,v_4\\}$, missing $v_5$.\n- $T_2\\cup T_4=\\{v_2,v_3,v_4,v_5\\}$, missing $v_1$.\n- $T_3\\cup T_4=\\{v_1,v_3,v_4,v_5\\}$, missing $v_2$.\n\nThus the only 2-tool full cover is $T_1 \\cup T_2$ with cost $7$. Any 3-tool cover cannot be cheaper than $7$ because the cheapest three-tool combination cost is $2+2+3=7$ (e.g., $T_1+T_3+T_4$), and other three-tool combinations cost at least $8$. Therefore the optimal integer solution cost is\n$$\nC_{\\text{opt}}=7.\n$$\n\nThe approximation ratio is the ratio of the algorithm’s solution cost to the optimal cost:\n$$\n\\rho=\\frac{C_{\\text{alg}}}{C_{\\text{opt}}}=\\frac{11}{7}.\n$$\nThis fraction is already in simplest form.", "answer": "$$\\boxed{\\frac{11}{7}}$$", "id": "1412479"}]}