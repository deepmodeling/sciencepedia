{"hands_on_practices": [{"introduction": "To begin our hands-on exploration, we'll start with a problem that closely mirrors a classic in computational theory. The SUBSET PRODUCT problem is a multiplicative variation of the famous SUBSET SUM problem. This exercise provides a foundational opportunity to construct a pseudo-polynomial time algorithm using dynamic programming, a crucial technique for number-based problems. By solving this, you will gain direct experience with the core characteristic that defines a problem as weakly NP-complete: the existence of a solution that is efficient in terms of the numerical value of the input, but not necessarily its bit-length [@problem_id:1469327].", "problem": "In a computational complexity theory course, a student is tasked with classifying a decision problem known as SUBSET PRODUCT. The problem is defined as follows:\n\n**Instance:** A finite set of positive integers $S = \\{a_1, a_2, \\ldots, a_n\\}$ and a target positive integer $K$.\n**Question:** Does there exist a non-empty subset $S' \\subseteq S$ such that the product of the elements in $S'$ is exactly equal to $K$?\n\nThe student has already established that SUBSET PRODUCT is NP-complete. The next step is to determine whether it is weakly or strongly NP-complete. To aid in this classification, recall the following standard definitions in complexity theory:\n\n- An algorithm's runtime is **pseudo-polynomial** if it is polynomial in the numeric value of the input, but not necessarily in the length of the input (i.e., the number of bits required to represent it). For an instance of SUBSET PRODUCT, the numeric values include the integers in $S$ and the target $K$, while the input length is related to $n$ and the logarithms of these numbers.\n- A Nondeterministic Polynomial-time (NP)-complete problem is **weakly NP-complete** if it can be solved by a pseudo-polynomial time algorithm.\n- An NP-complete problem is **strongly NP-complete** if it cannot be solved by a pseudo-polynomial time algorithm unless P=NP. A common way to prove this is to show that the problem remains NP-complete even when all of its numerical parameters are bounded by a polynomial in the input size $n$.\n\nBased on an analysis of the SUBSET PRODUCT problem, which of the following statements is the most accurate classification?\n\nA. SUBSET PRODUCT is weakly NP-complete. This is because an algorithm exists (for example, based on dynamic programming) with a time complexity that is polynomial in the number of integers $n$ and the target value $K$.\n\nB. SUBSET PRODUCT is strongly NP-complete. This is because the problem remains NP-complete even when all input numbers, including the target $K$, are restricted to be bounded by a polynomial in $n$.\n\nC. SUBSET PRODUCT is strongly NP-complete. This is because it is reducible from 3-SAT, which is a strongly NP-complete problem.\n\nD. SUBSET PRODUCT can be solved in polynomial time. This can be achieved by taking the prime factorization of each number and the target $K$, and then solving the resulting system of linear equations over the exponents.", "solution": "We are given SUBSET PRODUCT: for a finite set of positive integers $S=\\{a_{1},\\ldots,a_{n}\\}$ and a target positive integer $K$, decide whether there exists a non-empty subset $S' \\subseteq S$ whose product equals $K$. The problem is already known to be NP-complete. To classify it as weakly or strongly NP-complete, we use the standard definitions:\n\n- A pseudo-polynomial time algorithm is one whose runtime is polynomial in the numeric value of the input (here, the magnitudes of the $a_{i}$ and $K$), but not necessarily in the input length (which is on the order of $n$ and the $\\ln$ of the numeric values).\n- An NP-complete problem is weakly NP-complete if it admits a pseudo-polynomial time algorithm.\n- An NP-complete problem is strongly NP-complete if it remains NP-complete even when all numeric parameters are bounded by a polynomial in $n$; equivalently, it does not admit a pseudo-polynomial time algorithm unless $\\mathrm{P}=\\mathrm{NP}$.\n\nTo determine whether SUBSET PRODUCT is weakly or strongly NP-complete, it suffices to show the existence or non-existence of a pseudo-polynomial time algorithm.\n\nWe present a dynamic programming algorithm whose time is polynomial in $n$ and $K$:\n\n1. Observation: Any $a_{i}$ with $a_{i} > K$ can be discarded immediately, since no product of positive integers including $a_{i}$ can equal $K$. This preprocessing is linear in $n$.\n\n2. Define a sequence of reachable-product sets $R_{i} \\subseteq \\{1,2,\\ldots,K\\}$ for $i=0,1,\\ldots,n$, where $R_{i}$ captures all products that can be formed using some (possibly empty) subset of the first $i$ integers. To enforce the non-empty subset requirement cleanly, we can either:\n   - Track emptiness separately, or\n   - Initialize without the empty product and explicitly add singletons. We take the latter approach.\n\n   We set $R_{0}=\\varnothing$ (no non-empty subset using zero items). For each $i \\in \\{1,\\ldots,n\\}$, define the recurrence:\n   $$\n   R_{i} \\;=\\; R_{i-1} \\;\\cup\\; \\{\\,a_{i} \\mid a_{i} \\leq K\\,\\} \\;\\cup\\; \\{\\,t \\cdot a_{i} \\mid t \\in R_{i-1},\\; t \\cdot a_{i} \\leq K\\,\\}.\n   $$\n   This recurrence uses each $a_{i}$ at most once, because every product in the last set multiplies an element of $R_{i-1}$ by exactly one copy of $a_{i}$.\n\n3. Implementation via a boolean array: Maintain a boolean array $B$ indexed by $t \\in \\{1,\\ldots,K\\}$ where $B[t]$ indicates $t \\in R_{i}$. For each $i$, compute a new array $B'$ from $B$ as follows:\n   - Initialize $B'=B$.\n   - If $a_{i} \\leq K$, set $B'[a_{i}]=\\text{true}$.\n   - For each $t \\in \\{1,\\ldots,K\\}$ with $B[t]=\\text{true}$, if $t \\cdot a_{i} \\leq K$ then set $B'[t \\cdot a_{i}]=\\text{true}$.\n   - Set $B \\leftarrow B'$ and proceed to the next $i$.\n   At the end, answer \"yes\" iff $B[K]=\\text{true}$.\n\n4. Correctness: By construction, $B$ after processing $i$ items encodes exactly $R_{i}$, because $B'$ adds precisely the singletons $\\{a_{i}\\}$ if feasible and all products formed by multiplying any previously reachable product by $a_{i}$ once, capped at $K$. Since we never use $B'$ values to generate further values within the same iteration, no item is reused.\n\n5. Complexity: For each $i$, the update scans $t=1$ to $K$ once and performs constant-time checks and assignments per $t$. The singletons step is constant time. Therefore, the time per item is $O(K)$, and the total time is $O(nK)$. The space usage is $O(K)$. This runtime is polynomial in $n$ and the numeric value $K$, but not necessarily polynomial in the input length (which depends on $\\ln K$). Hence it is pseudo-polynomial.\n\nConsequences for classification:\n- Since SUBSET PRODUCT has a pseudo-polynomial time algorithm, it is weakly NP-complete.\n- It is not strongly NP-complete (unless $\\mathrm{P}=\\mathrm{NP}$), because if all input numbers, including $K$, are bounded by a polynomial in $n$, then the above algorithm runs in time polynomial in $n$ (specifically $O(n \\cdot \\mathrm{poly}(n))$), placing the restricted problem in $\\mathrm{P}$ and contradicting strong NP-completeness.\n- Regarding the provided options:\n  - A is correct: a dynamic programming algorithm with time polynomial in $n$ and $K$ exists, establishing weak NP-completeness.\n  - B is incorrect: the problem does not remain NP-complete when all numbers are polynomially bounded; then it is solvable in polynomial time by the DP above.\n  - C is incorrect: reducibility from 3-SAT does not imply strong NP-completeness, and 3-SAT is not a numeric problem used to certify strong NP-completeness in the sense of bounded numerical parameters.\n  - D is incorrect: computing prime factorizations is not known to be polynomial-time; moreover, even with factorizations given, one obtains a 0-1 integer linear feasibility problem over exponent vectors, which remains NP-hard in general.\n\nTherefore, the most accurate classification among the options is that SUBSET PRODUCT is weakly NP-complete.", "answer": "$$\\boxed{A}$$", "id": "1469327"}, {"introduction": "Many computational challenges in the real world do not immediately present themselves as familiar textbook problems. This practice, the BALANCED RATIO PARTITION problem, hones the essential skill of algebraic transformation to uncover the underlying computational core. Your task is to look past the ratios and partitions to reveal a familiar structure. This problem is particularly insightful because it explicitly asks you to consider how the problem's complexity changes based on whether the input numbers are polynomially bounded, directly engaging with the dividing line between what makes a problem weakly NP-complete versus what can be solved in true polynomial time [@problem_id:1469322].", "problem": "Consider the following decision problem, which we will call `BALANCED_RATIO_PARTITION`.\n\n**Input:** A set $S$ of $n$ items, where each item $i \\in \\{1, \\dots, n\\}$ is characterized by a positive integer weight $w_i$ and a positive integer value $v_i$.\n\n**Question:** Does there exist a partition of the set $S$ into two non-empty subsets, $S_1$ and $S_2$, such that the ratio of the total value to the total weight is the same for both subsets? That is, if $V_k = \\sum_{i \\in S_k} v_i$ and $W_k = \\sum_{i \\in S_k} w_i$ for $k \\in \\{1, 2\\}$, the condition is $\\frac{V_1}{W_1} = \\frac{V_2}{W_2}$.\n\nNow, consider two classes of instances for this problem:\n- **Class 1:** Instances where there exists a fixed polynomial $p(n)$ such that for all items $i$, their weight $w_i$ and value $v_i$ are bounded by $p(n)$. In other words, $\\max(w_i, v_i) \\le p(n)$.\n- **Class 2:** General instances, where the weights $w_i$ and values $v_i$ can be any positive integers (practically, a number whose binary representation's length is polynomial in $n$).\n\nWhich of the following statements most accurately describes the computational complexity of the `BALANCED_RATIO_PARTITION` problem?\n\nA. The problem is solvable in polynomial time for Class 1 instances but is NP-hard for Class 2 instances.\n\nB. The problem is solvable in polynomial time for both Class 1 and Class 2 instances.\n\nC. The problem is NP-hard for both Class 1 and Class 2 instances.\n\nD. The problem is NP-hard for Class 1 instances but is solvable in polynomial time for Class 2 instances.\n\nE. The complexity of the problem is solvable in polynomial time if and only if all initial weights $w_i$ and values $v_i$ are powers of 2.\n\nF. The problem is undecidable for Class 2 instances.", "solution": "Let $S$ be the set of items, with $V = \\sum_{i \\in S} v_{i}$ and $W = \\sum_{i \\in S} w_{i}$. For a non-empty proper subset $S_{1} \\subset S$, write $V_{1} = \\sum_{i \\in S_{1}} v_{i}$ and $W_{1} = \\sum_{i \\in S_{1}} w_{i}$. Then the condition for a balanced ratio partition is\n$$\n\\frac{V_{1}}{W_{1}} = \\frac{V_{2}}{W_{2}},\n$$\nwhere $S_{2} = S \\setminus S_{1}$, $V_{2} = V - V_{1}$, and $W_{2} = W - W_{1}$. Cross-multiplying gives\n$$\nV_{1} W_{2} = V_{2} W_{1}.\n$$\nSubstituting $V_{2} = V - V_{1}$ and $W_{2} = W - W_{1}$ yields\n$$\nV_{1} (W - W_{1}) = (V - V_{1}) W_{1} \\iff V_{1} W = V W_{1}.\n$$\nEquivalently, the condition is\n$$\n\\frac{V_{1}}{W_{1}} = \\frac{V}{W}.\n$$\nThus the problem asks whether there exists a non-empty proper subset $S_{1}$ such that the subset ratio equals the global ratio.\n\nDefine constants (depending only on the instance)\n$$\na_{i} := v_{i} W - w_{i} V \\quad \\text{for all } i \\in \\{1,\\dots,n\\}.\n$$\nThen\n$$\n\\sum_{i \\in S_{1}} a_{i} = \\sum_{i \\in S_{1}} (v_{i} W - w_{i} V) = W \\sum_{i \\in S_{1}} v_{i} - V \\sum_{i \\in S_{1}} w_{i} = W V_{1} - V W_{1}.\n$$\nTherefore the balanced ratio condition $V_{1} W = V W_{1}$ is equivalent to\n$$\n\\sum_{i \\in S_{1}} a_{i} = 0.\n$$\nWe also have $\\sum_{i \\in S} a_{i} = V W - W V = 0$. The decision problem is therefore equivalent to: does there exist a non-empty proper subset with zero sum among the $a_{i}$.\n\nMembership in NP for Class 2 follows because, given a candidate subset $S_{1}$, we can compute $V_{1}$, $W_{1}$, $V$, $W$ in time polynomial in the input size and verify $V_{1} W = V W_{1}$ by integer arithmetic with polynomially many bits.\n\nClass 1 (polynomially bounded weights and values): Let $W = \\sum_{i} w_{i}$ and $V = \\sum_{i} v_{i}$. Under the assumption that $\\max(w_{i}, v_{i}) \\le p(n)$ for some fixed polynomial $p$, we have $W \\le n p(n)$ and $V \\le n p(n)$. Define a dynamic program $D(k, x, y)$ that is true if there exists a subset of the first $k$ items with total weight $x$ and total value $y$, and false otherwise. The recurrence is\n$$\nD(0, 0, 0) = \\text{true}, \\quad D(0, x, y) = \\text{false} \\text{ for } (x,y) \\neq (0,0),\n$$\nand for $k \\ge 1$,\n$$\nD(k, x, y) = D(k-1, x, y) \\;\\text{ or }\\; \\bigl(x \\ge w_{k},\\, y \\ge v_{k},\\, D(k-1, x - w_{k}, y - v_{k})\\bigr).\n$$\nThe state space has size $O(n W V)$ and transitions are constant time per state, so the total time is polynomial in $n$, $W$, and $V$, hence polynomial in $n$ under the Class 1 bounds. After filling $D(n, \\cdot, \\cdot)$, we check whether there exists $(x, y)$ with $1 \\le x \\le W - 1$ and $1 \\le y \\le V - 1$ such that $D(n, x, y)$ is true and\n$$\ny W = x V,\n$$\nwhich is exactly $V_{1} W = V W_{1}$ for a non-empty proper subset. Therefore Class 1 is solvable in polynomial time.\n\nClass 2 (general binary-encoded integers): We show NP-hardness by reduction from a known NP-hard problem. Consider the following algebraic transformation. Given any multiset of positive integers $a_{1}, \\dots, a_{n}$, choose an integer $M$ strictly larger than $\\max_{i} a_{i}$ and define an instance of BALANCED_RATIO_PARTITION by setting, for each $i$,\n$$\nv_{i} := M - a_{i}, \\quad w_{i} := M + a_{i}.\n$$\nFor any subset $S_{1}$ of size $m$, let $A_{1} := \\sum_{i \\in S_{1}} a_{i}$ and let $A := \\sum_{i=1}^{n} a_{i}$. Then\n$$\nV_{1} = m M - A_{1}, \\quad W_{1} = m M + A_{1}, \\quad V_{2} = (n - m) M - (A - A_{1}), \\quad W_{2} = (n - m) M + (A - A_{1}).\n$$\nThe ratio equality condition\n$$\n\\frac{V_{1}}{W_{1}} = \\frac{V_{2}}{W_{2}}\n$$\nis equivalent, by direct expansion and cancellation of the $M^{2}$ and lower-order mixed terms, to\n$$\nn A_{1} = m A \\quad \\iff \\quad \\frac{A_{1}}{m} = \\frac{A}{n}.\n$$\nThus BALANCED_RATIO_PARTITION on the constructed $(v_{i}, w_{i})$ is equivalent to the equal-average subset problem for the $a_{i}$, namely: does there exist a non-empty proper subset with average equal to the global average. The equal-average subset problem is NP-hard for general binary-encoded integers via standard reductions (for example, from PARTITION or from 3-PARTITION by a padding and base-amplification argument that fixes the subset size $m$ and forces $A_{1} = \\frac{m}{n} A$, which specializes to equal-sum when $m = \\frac{n}{2}$). Because the above mapping is computable in time polynomial in the input size and preserves solutions, BALANCED_RATIO_PARTITION is NP-hard for Class 2. Since verification is polynomial, the problem is NP-complete for Class 2.\n\nCombining these, the most accurate statement is that the problem is solvable in polynomial time for Class 1 instances but is NP-hard for Class 2 instances.\n\nTherefore the correct option is A.", "answer": "$$\\boxed{A}$$", "id": "1469322"}, {"introduction": "This final exercise serves as a capstone, directly contrasting the two concepts at the heart of this topic. The best way to solidify your understanding of weak versus strong NP-completeness is to analyze two seemingly similar problems that fall on opposite sides of the divide. Here, you will investigate a pair of problems based on finding properties in subsets of polynomials [@problem_id:1469353]. By examining their complexity under the \"polynomially-bounded magnitude\" constraint, you will see precisely why one problem (a variant of SUBSET SUM) becomes tractable while the other (a variant of 3-PARTITION) remains hard, thereby illustrating the very definition of a strongly NP-complete problem.", "problem": "Consider two decision problems related to finding specific properties in subsets of univariate polynomials with integer coefficients. For both problems, the input consists of a set of $N$ polynomials, $S = \\{p_1(x), \\dots, p_N(x)\\}$, and an integer $r$.\n\n**Problem 1: POLYNOMIAL-ZERO-SUBSET-SUM (PZSS)**\nDoes there exist a non-empty subset $S' \\subseteq S$ such that the sum of the polynomials in $S'$, denoted $P_{S'}(x) = \\sum_{p_i \\in S'} p_i(x)$, satisfies the condition $P_{S'}(r) = 0$?\n\n**Problem 2: POLYNOMIAL-3-PARTITION (P3P)**\nAssume the number of polynomials is $N=3n$ for some integer $n$. For each polynomial $p_i(x)$ in the set $S$, let us define the integer value $v_i = p_i(r)$. Furthermore, let $T = \\frac{1}{n} \\sum_{i=1}^{3n} v_i$. Assuming that $T$ is an integer, can the set $S$ be partitioned into $n$ disjoint subsets $S_1, \\dots, S_n$, where each subset contains exactly 3 polynomials, such that for every subset $S_j$, the sum of its polynomials evaluated at $r$ is equal to $T$? That is, for each $j \\in \\{1, \\dots, n\\}$, does the equality $\\left( \\sum_{p_i \\in S_j} p_i(x) \\right)\\bigg|_{x=r} = T$ hold?\n\nNow, consider a special case for both problems, which we will call the \"polynomially-bounded magnitude\" (PBM) case. An instance of a problem is in the PBM case if the degree of every polynomial is bounded by a fixed constant, and all numerical values given in the input (i.e., all coefficients of all polynomials, as well as the integer $r$) are bounded in absolute value by some polynomial function of $N$, the total number of polynomials.\n\nWhich of the following statements correctly describes the computational complexity of the PBM versions of these two problems? You may assume that P $\\ne$ NP.\n\nA. Both PZSS and P3P can be solved in polynomial time in the PBM case.\n\nB. PZSS can be solved in polynomial time in the PBM case, but P3P remains NP-complete.\n\nC. P3P can be solved in polynomial time in the PBM case, but PZSS remains NP-complete.\n\nD. Both PZSS and P3P remain NP-complete in the PBM case.", "solution": "We analyze both PBM problems by first reducing the polynomial inputs to integer values and then using known complexity facts about subset-sum-type and 3-partition-type problems under polynomial bounds.\n\nFor each polynomial $p_i(x)$ of degree at most a fixed constant $d$, write $p_i(x) = \\sum_{k=0}^{d} a_{ik} x^{k}$ with all coefficients $a_{ik} \\in \\mathbb{Z}$. In the PBM case there exists a polynomial $q$ such that $|a_{ik}| \\leq q(N)$ for all $i,k$ and $|r| \\leq q(N)$, and $d$ is a constant independent of $N$. Define $v_i = p_i(r)$. Then\n$$\n|v_i| = \\left| \\sum_{k=0}^{d} a_{ik} r^{k} \\right| \\leq \\sum_{k=0}^{d} |a_{ik}|\\, |r|^{k} \\leq \\sum_{k=0}^{d} q(N)\\, q(N)^{k} = \\sum_{k=0}^{d} q(N)^{k+1}.\n$$\nBecause $d$ is a fixed constant, the upper bound $\\sum_{k=0}^{d} q(N)^{k+1}$ is bounded by a polynomial in $N$. Hence there exists a polynomial $Q$ such that $|v_i| \\leq Q(N)$ for all $i$.\n\nProblem 1 (PZSS): After computing $v_i = p_i(r)$ in time polynomial in the input size by standard evaluation (e.g., Horner’s rule), the question becomes: does there exist a non-empty subset $I \\subseteq \\{1,\\dots,N\\}$ such that $\\sum_{i \\in I} v_i = 0$? This is a special case of SUBSET SUM with target zero and integer inputs that may be positive or negative. Let $W = \\sum_{i=1}^{N} |v_i|$. From $|v_i| \\leq Q(N)$ we have $W \\leq N Q(N)$, which is polynomial in $N$. A standard dynamic programming over all achievable sums in the integer interval $[-W, W]$ decides whether zero is achievable. To exclude the empty subset, one can initialize the DP without setting the empty sum as feasible or, equivalently, track whether at least one element is used. The DP has $O(N)$ stages and $O(W)$ states with $O(1)$ transition time per state, so it runs in $O(N W)$ time, which is polynomial in $N$ under PBM. Therefore, PZSS is solvable in polynomial time in the PBM case.\n\nProblem 2 (P3P): After computing $v_i = p_i(r)$ and $T = \\frac{1}{n} \\sum_{i=1}^{3n} v_i$ (assumed to be an integer), the question is whether the multiset $\\{v_1,\\dots,v_{3n}\\}$ can be partitioned into $n$ triples each summing to $T$. This is precisely the 3-PARTITION structure: partition into $n$ triples of equal sum. The classical 3-PARTITION problem is strongly NP-complete, which means it remains NP-complete even when all integers are bounded by a polynomial in the number of items. To reduce a strongly NP-complete instance of 3-PARTITION in the polynomially bounded regime to P3P under PBM, map each integer $a_i$ to a constant polynomial $p_i(x) = a_i$ and set $r = 0$. Then $v_i = p_i(0) = a_i$, and $T = \\frac{1}{n} \\sum_{i=1}^{3n} a_i$ equals the target sum per triple from the 3-PARTITION instance. All PBM conditions hold: degrees are zero, coefficients are the $a_i$ (polynomially bounded), and $r=0$. The P3P instance is a yes-instance if and only if the original 3-PARTITION instance is a yes-instance. Hence P3P remains NP-hard under PBM. P3P is in $NP$ because a partition certificate can be verified in polynomial time by summing each triple and checking equality to $T$. Therefore, P3P remains NP-complete in the PBM case.\n\nCombining both results, in the PBM case PZSS is in $P$, while P3P remains NP-complete. Hence the correct choice is B.", "answer": "$$\\boxed{B}$$", "id": "1469353"}]}