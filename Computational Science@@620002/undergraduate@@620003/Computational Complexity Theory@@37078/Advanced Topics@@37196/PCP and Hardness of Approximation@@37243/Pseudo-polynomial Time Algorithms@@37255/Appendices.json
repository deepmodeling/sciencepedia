{"hands_on_practices": [{"introduction": "Often, a complex-sounding problem is a classic computational challenge in disguise. This first exercise asks you to partition a set of masses based on a differential constraint, a scenario that initially seems unique [@problem_id:1438926]. The key to solving this is to translate the problem's requirements into algebraic relationships, which elegantly reduces it to the famous Subset Sum problem, a foundational case study for pseudo-polynomial time algorithms. This practice hones your ability to look past narrative details and identify the underlying mathematical structure of a problem.", "problem": "A deep-space observation mission is mapping a newly discovered system of rogue planets. For navigational stability, the probe's guidance system requires a precise gravitational balance. The planets, with known integer masses, must be partitioned into two conceptual groups, Group A and Group B. The stability requirement is that the absolute difference between the total mass of Group A and the total mass of Group B must be exactly equal to a given differential parameter, $D$.\n\nYou are given the set of planet masses, $M = \\{3, 5, 6, 8, 11, 14, 15, 18\\}$, and the required mass differential, $D = 4$.\n\nIf it is possible to partition the set of planets $M$ into two such groups, determine the total mass of the group with the smaller total mass. If no such partition exists, your answer should be -1.", "solution": "The problem asks for a partition of the set of masses $M$ into two disjoint subsets, let's call them $A$ and $B$, such that they cover all of $M$ ($A \\cup B = M$ and $A \\cap B = \\emptyset$). Let $S_A$ be the sum of masses in group $A$, and $S_B$ be the sum of masses in group $B$. The condition is that $|S_A - S_B| = D$. We need to find $\\min(S_A, S_B)$ if such a partition exists, otherwise return -1.\n\nFirst, let's establish the relationship between $S_A$, $S_B$, the total sum of masses, and the difference $D$.\nLet $S_{total}$ be the sum of all masses in $M$.\n$$S_{total} = \\sum_{m \\in M} m = S_A + S_B$$\n\nWe are given the condition $|S_A - S_B| = D$. This implies two possibilities:\n1. $S_A - S_B = D$\n2. $S_B - S_A = D$\n\nLet's analyze the first case, $S_A - S_B = D$. We have a system of two linear equations:\n(i) $S_A + S_B = S_{total}$\n(ii) $S_A - S_B = D$\n\nAdding (i) and (ii) gives $2S_A = S_{total} + D$, which means $S_A = \\frac{S_{total} + D}{2}$.\nSubtracting (ii) from (i) gives $2S_B = S_{total} - D$, which means $S_B = \\frac{S_{total} - D}{2}$.\n\nIf we analyzed the second case ($S_B - S_A = D$), we would find the same two values for the sums, just assigned to the opposite groups: $S_B = \\frac{S_{total} + D}{2}$ and $S_A = \\frac{S_{total} - D}{2}$.\n\nIn any valid partition, the sums of the two groups must be $\\frac{S_{total} + D}{2}$ and $\\frac{S_{total} - D}{2}$.\nThe group with the smaller total mass will have a sum of $S_{small} = \\frac{S_{total} - D}{2}$, provided a valid partition exists.\n\nBefore proceeding, we must check if a solution is even possible. Since the masses are integers, the sums $S_A$ and $S_B$ must be integers. This imposes two conditions:\na) $S_{total} - D$ must be non-negative, which means $S_{total} \\ge D$.\nb) $S_{total} + D$ (and $S_{total} - D$) must be an even number. This is true if and only if $S_{total}$ and $D$ have the same parity (both are even or both are odd).\n\nLet's apply this to the given values:\n$M = \\{3, 5, 6, 8, 11, 14, 15, 18\\}$\n$D = 4$\n\nFirst, calculate $S_{total}$:\n$S_{total} = 3 + 5 + 6 + 8 + 11 + 14 + 15 + 18 = 80$.\n\nNow, check the feasibility conditions:\na) Is $S_{total} \\ge D$? $80 \\ge 4$. Yes.\nb) Do $S_{total}$ and $D$ have the same parity? $S_{total} = 80$ is even, and $D = 4$ is even. Yes.\nSince the conditions are met, a solution might exist.\n\nThe problem is now transformed into finding if there exists a subset of $M$ whose elements sum to one of the target values. Let's calculate the smaller sum:\n$$S_{small} = \\frac{S_{total} - D}{2} = \\frac{80 - 4}{2} = \\frac{76}{2} = 38$$\n\nSo, the original problem is equivalent to the following: Does there exist a subset of $M$ that sums to exactly 38? This is a classic instance of the Subset Sum Problem. If such a subset exists, the answer is 38. If not, the answer is -1.\n\nWe can solve the Subset Sum Problem using dynamic programming. Let's define a boolean array `dp` of size $S_{small} + 1$, where `dp[j]` is true if a sum of `j` can be formed using a subset of the masses from $M$, and false otherwise. The array is indexed from 0 to 38.\n\nWe initialize `dp[0] = true` (an empty set has a sum of 0) and all other `dp[j] = false`.\nThen, we iterate through each mass $m$ in the set $M$. For each mass, we update the `dp` array. To avoid using the same mass multiple times in a single subset, we iterate the sum `j` downwards from $S_{small}$ to $m$:\nFor each $m \\in M$:\n  For `j` from $S_{small}$ down to $m$:\n    `dp[j] = dp[j] or dp[j - m]`\n\nLet's trace this for our set $M$ and target sum 38.\n`dp` has size 39. `dp[0]=true`.\nReachable sums start as `{0}`.\n\n- For $m=3$: New reachable sums are `{3}`. Total reachable: `{0, 3}`.\n- For $m=5$: New reachable sums `{0+5, 3+5}` = `{5, 8}`. Total: `{0, 3, 5, 8}`.\n- For $m=6$: New reachable sums `{0+6, 3+6, 5+6, 8+6}` = `{6, 9, 11, 14}`. Total: `{0, 3, 5, 6, 8, 9, 11, 14}`.\n- For $m=8$: New sums from previous totals: `{8, 11, 13, 14, 16, 17, 19, 22}`. Total reachable (unioned and sorted): `{0, 3, 5, 6, 8, 9, 11, 13, 14, 16, 17, 19, 22}`.\n- For $m=11$: New sums include $22+11=33$, $19+11=30$, $17+11=28$, $16+11=27$, $14+11=25$, $13+11=24$, `...`.\n- For $m=14$: We check if a sum $j-14$ was previously possible. For our target $j=38$, we check `dp[38-14] = dp[24]`. Was a sum of 24 possible with the masses processed so far: `{3, 5, 6, 8, 11}`? Let's check: $5+8+11 = 24$. Yes. Since `dp[24]` would be true, processing $m=14$ would make `dp[38]` true (`dp[38] = dp[38] or dp[24]`).\n\nSince we have found that a sum of 24 is possible with the subset `{5, 8, 11}`, by including the mass 14, we can form the sum $24 + 14 = 38$ with the subset `{5, 8, 11, 14}`.\nTherefore, `dp[38]` is true.\n\nA partition that satisfies the condition exists. The smaller of the two subset sums is 38.\nThe two subsets are:\n- $A = \\{5, 8, 11, 14\\}$ with sum $S_A = 38$.\n- $B = \\{3, 6, 15, 18\\}$ with sum $S_B = 42$.\nThe absolute difference is $|S_A - S_B| = |38 - 42| = 4$, which matches the required differential $D$.\nThe smaller sum is 38.", "answer": "$$\\boxed{38}$$", "id": "1438926"}, {"introduction": "Not all problems are naturally formulated in terms of sums, yet the dynamic programming techniques for Subset Sum are incredibly powerful. This practice demonstrates how to extend these techniques by transforming a problem from one domain to another using a mathematical map [@problem_id:1438913]. By applying the logarithm function, which turns products into sums ($ \\ln(a \\times b) = \\ln(a) + \\ln(b) $), you will convert a Subset Product problem into an approximate Subset Sum problem. This exercise highlights a versatile problem-solving strategy and shows how familiar algorithms can be adapted to novel challenges.", "problem": "A cryptographer is analyzing a set of public numerical parameters, $S$, used in a cryptographic protocol. The security of the protocol relies on the difficulty of finding a subset of $S$ whose elements multiply to a secret target value, $P$. To analyze potential vulnerabilities, the cryptographer devises an approximation algorithm based on dynamic programming.\n\nThe algorithm transforms the subset product problem into an integer subset sum problem. The steps are as follows:\n1. For each parameter $s_k$ in the set $S$, compute its transformed weight $w_k = \\text{round}(M \\cdot \\ln(s_k))$, where $M$ is a predefined scaling factor and $\\ln$ is the natural logarithm.\n2. Compute the transformed target weight $W = \\text{round}(M \\cdot \\ln(P))$.\n3. Using the set of integer weights $\\{w_1, w_2, \\ldots, w_n\\}$, find the subset of weights whose sum is the largest possible value, let's call it $W_{\\text{max}}$, such that $W_{\\text{max}} \\le W$.\n4. The final result is the product of the original parameters from $S$ that correspond to the weights chosen in the previous step.\n\nYour task is to execute this algorithm for the following inputs and find the resulting product.\n- The set of parameters is $S = \\{2, 3, 5, 7, 11\\}$.\n- The target product is $P = 100$.\n- The scaling factor is $M = 100$.\n- The `round()` function rounds a real number to the nearest integer. Numbers with a fractional part of exactly 0.5 are rounded up (e.g., `round(2.5)` is 3, while `round(2.49)` is 2).\n\nCalculate the product of the original parameters identified by this method.", "solution": "We are given $S=\\{2,3,5,7,11\\}$, $P=100$, $M=100$, and the rounding rule described. The algorithm defines integer weights $w_{k}=\\operatorname{round}(M\\ln(s_{k}))$ and target $W=\\operatorname{round}(M\\ln(P))$, then finds a subset of the $w_{k}$ whose sum is maximized without exceeding $W$, and finally returns the product of the corresponding original $s_{k}$.\n\nFirst compute the transformed weights using $w_{k}=\\operatorname{round}(100\\ln(s_{k}))$:\n$$100\\ln(2) \\approx 69.31 \\Rightarrow w_{2}=\\operatorname{round}(69.31) = 69$$\n$$100\\ln(3) \\approx 109.86 \\Rightarrow w_{3}=\\operatorname{round}(109.86) = 110$$\n$$100\\ln(5) \\approx 160.94 \\Rightarrow w_{5}=\\operatorname{round}(160.94) = 161$$\n$$100\\ln(7) \\approx 194.59 \\Rightarrow w_{7}=\\operatorname{round}(194.59) = 195$$\n$$100\\ln(11) \\approx 239.79 \\Rightarrow w_{11}=\\operatorname{round}(239.79) = 240$$\nCompute the transformed target:\n$$W=\\operatorname{round}(100\\ln(100)) = \\operatorname{round}(460.52) = 461$$\n\nWe must choose a subset of $\\{69,110,161,195,240\\}$ with maximum sum not exceeding $461$. Evaluate feasible sums by considering combinations:\n- With $240$: $240+195=435$ (valid), $240+161=401$ (valid), $240+110=350$ (valid), $240+69=309$ (valid), any three with $240$ exceed $461$ except $240+110+69=419$ (valid).\n- Without $240$: $195+161=356$ (valid), $195+110=305$ (valid), $195+69=264$ (valid), $161+110=271$ (valid), $161+69=230$ (valid), $110+69=179$ (valid). Among triples, $195+161+110=466$ (too large), $195+161+69=425$ (valid), $195+110+69=374$ (valid), $161+110+69=340$ (valid).\n\nThe largest sum not exceeding $461$ among these is $435=240+195$. Therefore, the selected weights correspond to $s=11$ and $s=7$. By step 4, the resulting product is\n$$11 \\times 7 = 77$$", "answer": "$$\\boxed{77}$$", "id": "1438913"}, {"introduction": "The principles of pseudo-polynomial time extend far beyond simple sets, finding critical applications in complex systems like graphs and networks. This final practice presents a constrained pathfinding problem on a directed graph, where a valid path must satisfy limits on both total time and a fluctuating energy resource that cannot fall below zero [@problem_id:1438964]. Solving this requires you to reason about a state space that depends not just on the number of nodes, but also on the numerical magnitude of the constraints. Tackling this challenge will solidify your understanding of what truly defines a pseudo-polynomial algorithm—its dependence on the numeric values of its inputs.", "problem": "In a distant future, a courier named Spark must navigate a sector of deep space using a network of stargates connecting various star systems, which are represented as nodes in a directed graph. The mission is to travel from the starting system, node `S`, to the destination system, node `T`.\n\nEach stargate jump, represented by a directed edge from a node `U` to a node `V`, has two associated integer properties:\n1.  A non-negative time `cost(U, V)` in hours.\n2.  An energy `gain(U, V)`, which can be positive (energy is generated), negative (energy is consumed), or zero.\n\nSpark's ship begins at node `S` with an initial energy reserve of $P_0$. The ship is equipped with a sensitive reactor that will fail if its energy reserve ever becomes negative. The energy level is checked upon arrival at each node. Specifically, for any path $v_0, v_1, \\dots, v_k$ where $v_0=S$, the energy level upon arriving at node $v_j$ is given by $P_j = P_0 + \\sum_{i=0}^{j-1} \\text{gain}(v_i, v_{i+1})$. The mission constraint is that $P_j \\ge 0$ for all $j=1, \\dots, k$.\n\nThe entire mission must be completed within a total time of $C$ hours. That is, the sum of the costs of all jumps in the path must not exceed $C$.\n\nConsider the following specific mission parameters:\n- The network consists of four nodes: `S` (start), `A`, `B`, and `T` (destination).\n- The ship's initial energy is $P_0 = 5$ units.\n- The maximum allowed mission time is $C = 10$ hours.\n- The available stargate jumps are:\n    - `S` to `A`: `cost = 3`, `gain = -2`\n    - `A` to `B`: `cost = 0`, `gain = +3`\n    - `B` to `A`: `cost = 0`, `gain = -1`\n    - `B` to `T`: `cost = 5`, `gain = -10`\n\nIs it possible for Spark to find a path from `S` to `T` that satisfies both the time limit and the non-negative energy constraint at every node visited?\n\nSelect the correct statement from the options below.\n\nA. Yes, a valid path from `S` to `T` exists.\n\nB. No, no path of any kind exists from `S` to `T`.\n\nC. No, paths from `S` to `T` exist that are within the time limit, but none of them satisfy the energy constraint.\n\nD. The problem is ill-posed because some paths allow for an arbitrarily large energy level, making the energy constraint trivial.", "solution": "We formalize the path feasibility conditions. For any path $v_{0},v_{1},\\dots,v_{k}$ with $v_{0}=S$, energy upon arrival at $v_{j}$ is\n$$\nP_{j}=P_{0}+\\sum_{i=0}^{j-1}\\text{gain}(v_{i},v_{i+1}),\n$$\nand we require $P_{j}\\ge 0$ for all $j=1,\\dots,k$. The total time is\n$$\n\\sum_{i=0}^{k-1}\\text{cost}(v_{i},v_{i+1})\\le C.\n$$\nGiven $P_{0}=5$ and $C=10$, the edges are:\n- $S\\to A$: cost $3$, gain $-2$.\n- $A\\to B$: cost $0$, gain $+3$.\n- $B\\to A$: cost $0$, gain $-1$.\n- $B\\to T$: cost $5$, gain $-10$.\n\nFirst, consider the direct route $S\\to A\\to B\\to T$:\n- Arrival at $A$: $P_{A}=5+(-2)=3\\ge 0$, time so far $3$.\n- Arrival at $B$: $P_{B}=3+3=6\\ge 0$, time so far $3$.\n- Arrival at $T$: $P_{T}=6+(-10)=-4  0$, time total $3+0+5=8\\le 10$.\nThis path violates the energy constraint at $T$.\n\nNext, observe the cycle $A\\to B\\to A$ has total cost $0+0=0$ and net gain $3+(-1)=2$. Thus, each full $A\\to B\\to A$ cycle increases energy by $2$ without increasing time. Let $k \\in \\mathbb{Z}_{\\ge 0}$ be the number of such cycles performed after first reaching $A$ and before heading to $T$.\n\nCompute energies and times step by step:\n1. $S\\to A$: arrival energy\n$$\nP_{A}^{(0)}=5-2=3\\ge 0,\n$$\ntime $3$.\n2. After $k$ cycles $A\\to B\\to A$, the arrival energy at $A$ is\n$$\nP_{A}^{(k)}=P_{A}^{(0)}+2k=3+2k\\ge 0,\n$$\nand total time remains $3$ because each cycle costs $0$.\n3. Proceed $A\\to B$ to approach $T$: arrival energy at $B$\n$$\nP_{B}^{\\text{final}}=P_{A}^{(k)}+3=(3+2k)+3=6+2k\\ge 0,\n$$\ntime still $3$.\n4. Finally $B\\to T$: arrival energy at $T$\n$$\nP_{T}=P_{B}^{\\text{final}}-10=(6+2k)-10=-4+2k.\n$$\nTo satisfy $P_{T}\\ge 0$, we require\n$$\n-4+2k\\ge 0\\quad\\Longleftrightarrow\\quad k\\ge 2.\n$$\nChoose the minimal integer $k=2$. Then all intermediate arrival energies are non-negative:\n- After $S\\to A$: $3$.\n- Within each cycle: arrivals at $B$ are $P_{A}^{(m)}+3=6+2m\\ge 6$, and returns to $A$ are $5+2m\\ge 5$ for $m=0,1$.\n- After the final $A\\to B$: $10$.\n- After $B\\to T$: $0$.\nThe total time is\n$$\n3 \\text{ (for } S \\to A) + 0 \\text{ (cycles)} + 0 \\text{ (final } A \\to B) + 5 \\text{ (for } B \\to T) = 8 \\le 10.\n$$\nTherefore, a valid path exists. Options B and C are false. Although there exists a zero-time, positive-gain cycle allowing arbitrarily large energy, the question is about existence under the given constraints, which is well-posed; thus D is not the correct choice for this query. The correct statement is A.", "answer": "$$\\boxed{A}$$", "id": "1438964"}]}