{"hands_on_practices": [{"introduction": "Understanding any complex concept begins with mastering its fundamental definition. This first exercise invites you to explore the basic components of a Unique Game. By evaluating simple two-variable systems, you will learn to distinguish a valid, perfectly satisfiable Unique Game from other types of constraint problems, a crucial first step before tackling more complex scenarios in computational complexity.", "problem": "In computational complexity theory, the Unique Games Conjecture (UGC) is a central open problem concerning the hardness of approximation algorithms. The conjecture is based on a specific type of constraint satisfaction problem called a Unique Game.\n\nA **Unique Game** is defined by a tuple $(V, E, [k], \\{\\pi_e\\}_{e \\in E})$, where:\n1.  $V$ is a set of vertices (variables).\n2.  $E$ is a set of edges on $V$, representing constraints between pairs of variables.\n3.  $[k] = \\{0, 1, \\dots, k-1\\}$ is a set of labels (the alphabet).\n4.  For each edge $e = \\{u, v\\} \\in E$, $\\pi_e: [k] \\to [k]$ is a constraint, which must be a **permutation** (a bijection).\n\nA **labeling** of the game is a function $L: V \\to [k]$ that assigns a label from the alphabet to each vertex. An edge constraint $e = \\{u, v\\}$ is said to be **satisfied** by a labeling $L$ if $L(v) = \\pi_e(L(u))$. The game is **perfectly satisfiable** if there exists at least one labeling that satisfies all constraints simultaneously.\n\nConsider a system with a vertex set $V = \\{v_1, v_2\\}$ and an alphabet $[2] = \\{0, 1\\}$. Which of the following options describes a system that constitutes a perfectly satisfiable Unique Game with this vertex set and alphabet?\n\nA. A single constraint on the edge $\\{v_1, v_2\\}$ given by the permutation $\\pi(x) = 1-x$.\n\nB. A single constraint on the edge $\\{v_1, v_2\\}$ given by the function $\\phi(x) = 0$.\n\nC. A single constraint on the self-loop edge $\\{v_1, v_1\\}$ given by the permutation $\\pi(x) = 1-x$.\n\nD. A single constraint on the edge $\\{v_1, v_2\\}$ over the alphabet $\\{0, 1, 2\\}$, given by the permutation $\\pi(x) = (x+1) \\pmod 3$.", "solution": "By definition, a Unique Game instance $(V,E,[k],\\{\\pi_{e}\\}_{e \\in E})$ must have each edge constraint $\\pi_{e}:[k]\\to[k]$ be a permutation (bijection). A labeling is a function $L:V\\to[k]$. An edge $e=\\{u,v\\}$ is satisfied if $L(v)=\\pi_{e}(L(u))$. The instance is perfectly satisfiable if there exists a labeling $L$ that satisfies every edge constraint.\n\nWe test each option against these requirements for $V=\\{v_{1},v_{2}\\}$ and $[2]=\\{0,1\\}$.\n\nA. The constraint on $e=\\{v_{1},v_{2}\\}$ is $\\pi(x)=1-x$. Over $[2]$, $\\pi(0)=1$ and $\\pi(1)=0$, so $\\pi$ is a bijection and hence a valid permutation. To check perfect satisfiability, define a labeling $L$ by picking any $a\\in[2]$ and setting $L(v_{1})=a$ and $L(v_{2})=\\pi(a)$. Then the satisfaction condition $L(v_{2})=\\pi(L(v_{1}))$ holds by construction. Therefore, this is a valid Unique Game instance and it is perfectly satisfiable.\n\nB. The constraint on $e=\\{v_{1},v_{2}\\}$ is $\\phi(x)=0$. Over $[2]$, $\\phi(0)=0$ and $\\phi(1)=0$, which is not injective and hence not a bijection. Therefore, $\\phi$ is not a permutation, so this does not define a Unique Game and cannot qualify.\n\nC. The constraint is on the self-loop $e=\\{v_{1},v_{1}\\}$ with $\\pi(x)=1-x$. Even if we consider such an edge, satisfaction requires $L(v_{1})=\\pi(L(v_{1}))$, i.e., $L(v_{1})=1-L(v_{1})$. For $L(v_{1})\\in\\{0,1\\}$, this would imply $2L(v_{1})=1$, which has no solution in $[2]$. Thus there is no labeling satisfying this constraint, so it is not perfectly satisfiable.\n\nD. The constraint uses the alphabet $\\{0,1,2\\}$ with $\\pi(x)=(x+1)\\bmod 3$. Although this is a permutation on a 3-element set, it does not match the specified alphabet $[2]=\\{0,1\\}$ of the system. Therefore, it does not satisfy the given instance requirements.\n\nHence, only option A describes a system that is both a valid Unique Game (permutation constraint on the given alphabet) and perfectly satisfiable (there exists a labeling satisfying the constraint).", "answer": "$$\\boxed{A}$$", "id": "1465393"}, {"introduction": "While some systems can be perfectly optimized, many interesting computational problems arise when constraints are in conflict with one another. This practice [@problem_id:1465354] demonstrates how a simple cycle in the constraint graph can make it impossible to satisfy all conditions simultaneously. Your task will be to determine the \"value\" of the game—the maximum fraction of constraints that can be satisfied—which introduces the core idea of approximation that is central to the Unique Games Conjecture.", "problem": "In computational complexity theory, a Unique Game is a type of labeling problem used to study the limits of approximation algorithms. A Unique Game instance is defined by a tuple $(G, \\Sigma, \\{\\pi_e\\})$, where:\n1.  $G = (V, E)$ is a directed graph with a set of vertices $V$ and a set of edges $E$. For every directed edge $(u,v) \\in E$, its reversal $(v,u)$ is also in $E$.\n2.  $\\Sigma$ is a finite set of labels, called the alphabet.\n3.  For each edge $e = (u,v) \\in E$, $\\pi_e: \\Sigma \\to \\Sigma$ is a permutation (a bijective function). The constraints are paired such that if $e'=(v,u)$ is the reverse of $e=(u,v)$, then $\\pi_{e'} = \\pi_e^{-1}$.\n\nA labeling is a function $L: V \\to \\Sigma$ that assigns a label from the alphabet to each vertex. A constraint for an edge $e = (u,v)$ is satisfied by a labeling $L$ if $\\pi_e(L(u)) = L(v)$. The *value* of a Unique Game instance is the maximum possible fraction of satisfied constraints over all possible labelings.\n\nConsider a simple Unique Game instance constructed on an undirected triangle graph, which we can represent with directed edges for the constraints. Let the vertices be $V = \\{v_1, v_2, v_3\\}$ and the alphabet be $\\Sigma = \\{0, 1\\}$. The constraints are defined for the directed edges $(v_1, v_2)$, $(v_2, v_3)$, and $(v_3, v_1)$ as follows:\n-   For the edge $(v_1, v_2)$, the constraint is the identity permutation, $\\pi_{(v_1,v_2)}(x) = x$.\n-   For the edge $(v_2, v_3)$, the constraint is also the identity permutation, $\\pi_{(v_2,v_3)}(x) = x$.\n-   For the edge $(v_3, v_1)$, the constraint is the negation permutation, $\\pi_{(v_3,v_1)}(x) = 1 - x$.\n\nCalculate the value of this Unique Game instance. Express your answer as a fraction in simplest form.", "solution": "Let $L(v_{1})=x_{1}$, $L(v_{2})=x_{2}$, and $L(v_{3})=x_{3}$ with $x_{i}\\in\\{0,1\\}$. The three given constraints translate to:\n- For $(v_{1},v_{2})$ with identity: $x_{2}=x_{1}$.\n- For $(v_{2},v_{3})$ with identity: $x_{3}=x_{2}$.\n- For $(v_{3},v_{1})$ with negation: $x_{1}=1-x_{3}$.\n\nFrom the first two constraints, $x_{3}=x_{2}=x_{1}$, so $x_{1}=x_{3}$. Substituting into the third gives $x_{1}=1-x_{1}$, which has no solution in $\\{0,1\\}$, showing that not all three constraints can be satisfied simultaneously.\n\nTherefore, at most two of the three constraints can be satisfied. This bound is achievable, for example, by $x_{1}=0$, $x_{2}=0$, $x_{3}=0$, which satisfies the first two constraints and violates the third. Hence the maximum number of satisfied constraints is $2$ out of $3$, so the value of the instance is\n$$\n\\frac{2}{3}.\n$$", "answer": "$$\\boxed{\\frac{2}{3}}$$", "id": "1465354"}, {"introduction": "The abstract principles of Unique Games have concrete applications in fields like network design and distributed computing. This final practice [@problem_id:1465349] frames a Unique Game as a network synchronization task, where the goal is to maximize agreement between connected nodes under certain pre-set conditions. Solving this requires you to analyze the graph's structure and develop a strategy to find the globally optimal state assignment, bridging the gap between theoretical concepts and practical problem-solving.", "problem": "A team of engineers is designing a synchronization protocol for a distributed computing network. The network consists of a set of $N$ processing nodes. Each node must be configured to be in one of $K$ possible operational states. The states are labeled with integers from $1$ to $K$.\n\nThe network's communication topology is represented by an undirected graph $G=(V, E)$, where $V$ is the set of nodes and $E$ is the set of bidirectional communication links between pairs of nodes. For the system to function correctly, a communication link $(u, v) \\in E$ is considered \"synchronized\" if and only if node $u$ and node $v$ are assigned the same state. The team's objective is to find an assignment of states to all nodes that maximizes the total number of synchronized links.\n\nConsider a specific small-scale deployment with the following characteristics:\n- The number of nodes is $N=8$, with the set of nodes being $V = \\{1, 2, 3, 4, 5, 6, 7, 8\\}$.\n- The number of available states is $K=3$, with the states being $\\{1, 2, 3\\}$.\n- The set of communication links is $E = \\{(1,2), (1,3), (2,3), (2,5), (3,4), (4,5), (5,6), (6,7), (6,8), (7,8)\\}$.\n- Due to special hardware requirements, two of the nodes have their states pre-determined and fixed: node 1 must be in state 1, and node 8 must be in state 2.\n\nGiven these conditions, what is the maximum possible number of synchronized links that can be achieved in the network?", "solution": "Let each node $i$ be assigned a state $s_{i} \\in \\{1,2,3\\}$ with the constraints $s_{1}=1$ and $s_{8}=2$. For an assignment $s$, the number of synchronized links is\n$$\nS(s)=\\sum_{(u,v)\\in E}\\mathbf{1}\\{s_{u}=s_{v}\\}.\n$$\nThe edge set splits as\n$$\nE_{\\text{left}}=\\{(1,2),(1,3),(2,3),(2,5),(3,4),(4,5)\\},\\quad E_{\\text{right}}=\\{(6,7),(6,8),(7,8)\\},\n$$\nand the bridge edge $(5,6)$. Thus, for fixed $s_{5}$ and $s_{6}$,\n$$\n\\max S=\\max_{s_{5},s_{6}}\\Big(L(s_{5})+R(s_{6})+\\mathbf{1}\\{s_{5}=s_{6}\\}\\Big),\n$$\nwhere $L(s_{5})$ is the maximum number of synchronized edges in $E_{\\text{left}}$ given $s_{1}=1$ and $s_{5}$ fixed, and $R(s_{6})$ is the maximum number in $E_{\\text{right}}$ given $s_{8}=2$ and $s_{6}$ fixed.\n\nRight subgraph computation. For nodes $\\{6,7,8\\}$ with $s_{8}=2$ and fixed $s_{6}$:\n- If $s_{6}=2$, choose $s_{7}=2$ to make all three equal, yielding $R(2)=3$.\n- If $s_{6}\\neq 2$, the best choice is $s_{7}=s_{6}$ or $s_{7}=2$, yielding exactly one synchronized edge, so $R(s_{6})=1$ for $s_{6}\\neq 2$.\n\nHence\n$$\nR(s_{6})=\\begin{cases}3, & s_{6}=2 \\\\ 1, & s_{6}\\neq 2 \\end{cases}\n$$\n\nLeft subgraph computation. For nodes $\\{1,2,3,4,5\\}$ with $s_{1}=1$ and fixed $s_{5}$, maximize over $s_{2},s_{3},s_{4}$. The left edges are the triangle on $\\{1,2,3\\}$ plus the path $(3,4),(4,5)$ and edge $(2,5)$.\n\n- Case $s_{5}=1$. Choose $s_{2}=s_{3}=s_{4}=1$. Then every edge in $E_{\\text{left}}$ is synchronized, so\n$$\nL(1)=6.\n$$\n\n- Case $s_{5}=2$. Write the total as the sum of\n$$\nT_{1}(s_{2},s_{3})=\\mathbf{1}\\{s_{2}=1\\}+\\mathbf{1}\\{s_{3}=1\\}+\\mathbf{1}\\{s_{2}=s_{3}\\}\n$$\nfor the triangle $(1,2,3)$, plus $\\mathbf{1}\\{s_{2}=2\\}$ for $(2,5)$, plus the optimal contribution from $(3,4)$ and $(4,5)$, which for fixed $s_{3}$ and $s_{5}=2$ equals\n$$\nF(s_{3})=\\max_{s_{4}}\\big(\\mathbf{1}\\{s_{3}=s_{4}\\}+\\mathbf{1}\\{s_{4}=2\\}\\big)=\\begin{cases}2, & s_{3}=2 \\\\ 1, & s_{3}\\neq 2 \\end{cases}\n$$\nEnumerating $s_{3}$ and $s_{2}$:\n- If $s_{3}=1$, then $T_{1}=1+2\\mathbf{1}\\{s_{2}=1\\}$, yielding totals $4$ for $s_{2}=1$, $3$ for $s_{2}=2$, and $2$ for $s_{2}=3$.\n- If $s_{3}=2$, then $T_{1}=\\mathbf{1}\\{s_{2}=1\\}+\\mathbf{1}\\{s_{2}=2\\}$ and $F=2$, yielding totals $3$ for $s_{2}=1$, $4$ for $s_{2}=2$, and $2$ for $s_{2}=3$.\n- If $s_{3}=3$, then $T_{1}=\\mathbf{1}\\{s_{2}=1\\}+\\mathbf{1}\\{s_{2}=3\\}$ and $F=1$, yielding totals $2$ for any $s_{2}$.\nThus\n$$\nL(2)=4.\n$$\n\n- Case $s_{5}=3$. By symmetry of the above computation (interchanging the role of color $2$ with $3$ in the edges touching node $5$), the analogous evaluation gives\n$$\nL(3)=4.\n$$\n\nCombining, we have\n$$\nL(1)=6,\\quad L(2)=4,\\quad L(3)=4,\\qquad R(2)=3,\\quad R(1)=R(3)=1.\n$$\n\nOptimizing over $s_{5},s_{6}$:\n- If $s_{5}=1$, then the best choice is $s_{6}=2$, giving $L(1)+R(2)+\\mathbf{1}\\{1=2\\}=6+3+0=9$.\n- If $s_{5}=2$, then the best choice is $s_{6}=2$, giving $4+3+1=8$.\n- If $s_{5}=3$, then the best choice is $s_{6}=2$, giving $4+3+0=7$.\n\nTherefore the maximum possible number of synchronized links is $9$. One optimal assignment is $s_{1}=s_{2}=s_{3}=s_{4}=s_{5}=1$ and $s_{6}=s_{7}=s_{8}=2$, which synchronizes all edges in $E_{\\text{left}}$ (6 edges) and $E_{\\text{right}}$ (3 edges), with only the bridge $(5,6)$ unsynchronized. It is impossible to reach $10$ because synchronizing the bridge requires either $s_{5}=s_{6}=1$ (forcing at most $R(1)=1$ on the right) or $s_{5}=s_{6}=2$ (forcing at most $L(2)=4$ on the left), both yielding totals at most $8$.", "answer": "$$\\boxed{9}$$", "id": "1465349"}]}