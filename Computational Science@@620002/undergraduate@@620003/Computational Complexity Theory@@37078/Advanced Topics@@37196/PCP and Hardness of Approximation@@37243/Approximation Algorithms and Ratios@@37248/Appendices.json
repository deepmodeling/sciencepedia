{"hands_on_practices": [{"introduction": "Understanding the formal definition of an approximation ratio is the first step toward analyzing complex algorithms. This practice problem [@problem_id:1412176] provides a foundational exercise in manipulating these guarantees. By considering a simple \"hybrid\" strategy that combines two existing algorithms, you can explore how to derive a tight approximation ratio for the combined approach, a common task in practical algorithm design.", "problem": "In computational optimization, many problems are so difficult that finding the absolute best solution is thought to be computationally infeasible. For such problems, computer scientists develop approximation algorithms. For a minimization problem, an algorithm is said to be a $\\rho$-approximation algorithm if, for any input instance, the cost of the solution it produces, $C_{alg}$, is guaranteed to be no more than $\\rho$ times the cost of the true optimal solution, $C_{opt}$. That is, $C_{alg} \\leq \\rho \\cdot C_{opt}$. The value $\\rho \\geq 1$ is called the approximation ratio.\n\nA software company is working on a complex network routing minimization problem. They have developed two different heuristic algorithms:\n1.  Algorithm `Alpha`, which is a $2$-approximation algorithm.\n2.  Algorithm `Beta`, which is a $3$-approximation algorithm.\n\nAn engineer proposes a new hybrid strategy: for any given routing problem, run both `Alpha` and `Beta` independently and then select the solution that has the lower cost. Let's call this new algorithm `Hybrid`.\n\nWhat is the tightest (smallest) approximation ratio that can be guaranteed for the `Hybrid` algorithm across all possible problem instances?\n\nA. $1.5$\n\nB. $2$\n\nC. $2.5$\n\nD. $3$\n\nE. $5$", "solution": "Let $C_{\\text{opt}}$ denote the optimal cost for an instance. Let $C_{\\alpha}$ and $C_{\\beta}$ be the costs returned by algorithms Alpha and Beta, respectively. By their guarantees,\n$$\nC_{\\alpha} \\leq 2\\,C_{\\text{opt}}, \\qquad C_{\\beta} \\leq 3\\,C_{\\text{opt}}.\n$$\nThe Hybrid algorithm returns\n$$\nC_{\\text{H}}=\\min\\{C_{\\alpha},C_{\\beta}\\}.\n$$\nUsing the bounds,\n$$\nC_{\\text{H}} \\leq \\min\\{2\\,C_{\\text{opt}},3\\,C_{\\text{opt}}\\}=2\\,C_{\\text{opt}}.\n$$\nTherefore, Hybrid is a $2$-approximation algorithm, so its approximation ratio is at most $2$.\n\nTo see tightness, suppose there exists an instance on which Alpha attains its worst-case bound, i.e., $C_{\\alpha}=2\\,C_{\\text{opt}}$, and Beta is no better on that instance, i.e., $C_{\\beta} \\geq 2\\,C_{\\text{opt}}$. Then\n$$\nC_{\\text{H}}=\\min\\{C_{\\alpha},C_{\\beta}\\}=2\\,C_{\\text{opt}}.\n$$\nHence no guarantee strictly better than $2$ can hold across all instances. Thus the tightest guaranteed approximation ratio for Hybrid is $2$.", "answer": "$$\\boxed{B}$$", "id": "1412176"}, {"introduction": "Greedy algorithms are among the most intuitive and widely used heuristics for NP-hard problems like the Set Cover problem. This exercise demonstrates the step-by-step execution of the canonical greedy algorithm where the goal is to cover all required elements with the minimum number of sets. By working through a concrete instance [@problem_id:1412212], you will see firsthand how a greedy strategy makes its choices and how its performance can be compared to the optimal solution, highlighting why these methods are effective yet not always perfect.", "problem": "A city is planning to install a new public Wi-Fi network and wants to ensure that all of its 7 key landmarks are covered. Several technology companies have submitted proposals. Each proposal covers a specific subset of landmarks, and all proposals are considered to have an equal cost. The city wants to accept the minimum number of proposals to achieve full coverage. This is an instance of the Set Cover problem.\n\nThe universe of landmarks to be covered is $U = \\{L_1, L_2, L_3, L_4, L_5, L_6, L_7\\}$.\n\nThere are five proposals available, from companies Alpha, Beta, Gamma, Delta, and Epsilon. The sets of landmarks covered by each proposal are as follows:\n- Proposal Alpha ($P_A$): $\\{L_1, L_2, L_3, L_4\\}$\n- Proposal Beta ($P_B$): $\\{L_5, L_6\\}$\n- Proposal Gamma ($P_G$): $\\{L_7\\}$\n- Proposal Delta ($P_D$): $\\{L_1, L_2, L_5, L_7\\}$\n- Proposal Epsilon ($P_E$): $\\{L_3, L_4, L_6\\}$\n\nThe city decides to use the standard greedy algorithm for Set Cover. At each step, the algorithm chooses the proposal that covers the greatest number of landmarks that have not yet been covered. In case of a tie in the number of newly covered landmarks, the algorithm chooses the proposal that appears earliest in the alphabetical list: (Alpha, Beta, Gamma, Delta, Epsilon).\n\nYour task is to analyze the performance of this greedy approach for this specific instance. Calculate the approximation ratio, which is defined as the ratio of the number of proposals chosen by the greedy algorithm to the number of proposals in an optimal solution (the true minimum). Express your answer as a single real number.", "solution": "We formalize the greedy set cover process and compute the approximation ratio defined as the number of proposals chosen by the greedy algorithm divided by the number in an optimal solution.\n\nLet the proposals be:\n$$P_{A}=\\{L_{1},L_{2},L_{3},L_{4}\\},\\quad P_{B}=\\{L_{5},L_{6}\\},\\quad P_{G}=\\{L_{7}\\},\\quad P_{D}=\\{L_{1},L_{2},L_{5},L_{7}\\},\\quad P_{E}=\\{L_{3},L_{4},L_{6}\\}.$$\nThe universe is $U=\\{L_{1},L_{2},L_{3},L_{4},L_{5},L_{6},L_{7}\\}$.\n\nGreedy algorithm execution:\n1) Initially, uncovered set $U_{0}=U$. Compute newly covered counts:\n$$|P_{A}\\cap U_{0}|=4,\\quad |P_{B}\\cap U_{0}|=2,\\quad |P_{G}\\cap U_{0}|=1,\\quad |P_{D}\\cap U_{0}|=4,\\quad |P_{E}\\cap U_{0}|=3.$$\nThere is a tie between $P_{A}$ and $P_{D}$ with value $4$; by alphabetical tie-breaking, choose $P_{A}$. Covered becomes $\\{L_{1},L_{2},L_{3},L_{4}\\}$ and uncovered becomes $U_{1}=\\{L_{5},L_{6},L_{7}\\}$.\n\n2) Compute newly covered counts with respect to $U_{1}$:\n$$|P_{B}\\cap U_{1}|=2,\\quad |P_{G}\\cap U_{1}|=1,\\quad |P_{D}\\cap U_{1}|=2\\ (\\text{since }P_{D}\\cap U_{1}=\\{L_{5},L_{7}\\}),\\quad |P_{E}\\cap U_{1}|=1.$$\nThere is a tie between $P_{B}$ and $P_{D}$ with value $2$; by alphabetical tie-breaking, choose $P_{B}$. Now uncovered becomes $U_{2}=\\{L_{7}\\}$.\n\n3) With $U_{2}=\\{L_{7}\\}$, compute:\n$$|P_{G}\\cap U_{2}|=1,\\quad |P_{D}\\cap U_{2}|=1,\\quad |P_{E}\\cap U_{2}|=0.$$\nThere is a tie between $P_{G}$ and $P_{D}$; by alphabetical tie-breaking, choose $P_{G}$. All elements are now covered.\n\nThus, the greedy algorithm selects $P_{A},P_{B},P_{G}$, totaling $3$ proposals.\n\nOptimal solution size:\nNo single proposal covers all $7$ landmarks, since $\\max|P|=47$. We exhibit a cover of size $2$:\n$$P_{D}\\cup P_{E}=\\{L_{1},L_{2},L_{5},L_{7}\\}\\cup\\{L_{3},L_{4},L_{6}\\}=U.$$\nTherefore, the optimal number of proposals is $2$.\n\nApproximation ratio:\n$$\\rho=\\frac{\\text{number chosen by greedy}}{\\text{number in optimal solution}}=\\frac{3}{2}=1.5.$$", "answer": "$$\\boxed{1.5}$$", "id": "1412212"}]}