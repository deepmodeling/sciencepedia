{"hands_on_practices": [{"introduction": "To truly understand an algorithm, there's no substitute for walking through it by hand. This first practice invites you to do just that with a Fully Polynomial-Time Approximation Scheme (FPTAS) for the knapsack problem. By manually calculating the scaled values and applying a simplified dynamic programming approach on a small, manageable dataset [@problem_id:1425023], you will demystify the core mechanics of value scaling and see firsthand how an approximate solution is constructed. This exercise provides a concrete foundation for the more conceptual topics that follow.", "problem": "A network engineer is tasked with optimizing the selection of data packets to be sent in a single transmission burst. The goal is to maximize the total \"importance\" of the packets without exceeding the transmission buffer's capacity. To do this efficiently, the engineer uses a specific instance of a Fully Polynomial-Time Approximation Scheme (FPTAS) that works by scaling down the importance values.\n\nThe steps of the value scaling algorithm are defined as follows:\n1.  You are given a set of $n$ items, where each item $i$ has a weight $w_i$ and a value $v_i$. You are also given a total weight capacity $W$ and an error tolerance parameter $\\epsilon$.\n2.  First, identify the maximum value among all items, $V_{\\text{max}} = \\max_i(v_i)$.\n3.  Calculate a scaling factor $K = \\frac{\\epsilon V_{\\text{max}}}{n}$.\n4.  For each item $i$, create a new scaled value $v'_i = \\lfloor \\frac{v_i}{K} \\rfloor$, where $\\lfloor \\cdot \\rfloor$ is the floor function. The original weights $w_i$ are kept.\n5.  Using dynamic programming, determine for every possible total scaled value $V'$ the minimum total weight required to achieve it. Let's denote this as $W_{\\text{min}}(V')$.\n6.  From all achievable scaled values $V'$, find the largest one, let's call it $V'_{\\text{best}}$, for which the corresponding minimum weight is within the capacity, i.e., $W_{\\text{min}}(V'_{\\text{best}}) \\le W$.\n7.  Identify the combination of items that corresponds to achieving $V'_{\\text{best}}$ with weight $W_{\\text{min}}(V'_{\\text{best}})$ and calculate the sum of their **original** values. This sum is the result of the approximation.\n\nYou are given the following four data packets, with their size (weight) and importance score (value):\n-   Packet 1: size = 2, importance = 60\n-   Packet 2: size = 3, importance = 70\n-   Packet 3: size = 4, importance = 90\n-   Packet 4: size = 5, importance = 120\n\nThe transmission buffer's capacity is $W = 8$. The error tolerance is $\\epsilon = 0.5$.\n\nBy carefully executing the described algorithm on this data, determine the total importance score of the set of packets selected for transmission.", "solution": "We are given $n=4$ items with weights and values: $(w_{1},v_{1})=(2,60)$, $(w_{2},v_{2})=(3,70)$, $(w_{3},v_{3})=(4,90)$, $(w_{4},v_{4})=(5,120)$, capacity $W=8$, and error tolerance $\\epsilon=0.5$. The value scaling algorithm proceeds as follows.\n\nCompute the maximum value and scaling factor:\n$$\nV_{\\max}=\\max\\{60,70,90,120\\}=120,\\qquad K=\\frac{\\epsilon V_{\\max}}{n}=\\frac{0.5 \\cdot 120}{4}=15.\n$$\nScale values by $v'_{i}=\\left\\lfloor \\frac{v_{i}}{K}\\right\\rfloor$ while keeping the same weights:\n$$\nv'_{1}=\\left\\lfloor \\frac{60}{15}\\right\\rfloor=4,\\quad v'_{2}=\\left\\lfloor \\frac{70}{15}\\right\\rfloor=4,\\quad v'_{3}=\\left\\lfloor \\frac{90}{15}\\right\\rfloor=6,\\quad v'_{4}=\\left\\lfloor \\frac{120}{15}\\right\\rfloor=8.\n$$\n\nDefine $W_{\\min}(V')$ as the minimum total weight to achieve total scaled value $V'$. Initialize $W_{\\min}(0)=0$ and $W_{\\min}(V')=\\infty$ otherwise, then update item by item.\n\nAfter item 1 $(w_{1}=2,v'_{1}=4)$:\n$$\nW_{\\min}(0)=0,\\quad W_{\\min}(4)=2.\n$$\n\nAfter item 2 $(w_{2}=3,v'_{2}=4)$, combining with previous states yields new candidates $(V',w)$: $(4,3)$ and $(8,5)$. Taking minima:\n$$\nW_{\\min}(0)=0,\\quad W_{\\min}(4)=\\min\\{2,3\\}=2,\\quad W_{\\min}(8)=5.\n$$\n\nAfter item 3 $(w_{3}=4,v'_{3}=6)$, add to existing states $(0,0)$, $(4,2)$, $(8,5)$ to get $(6,4)$, $(10,6)$, $(14,9)$, and take minima:\n$$\nW_{\\min}(0)=0,\\quad W_{\\min}(4)=2,\\quad W_{\\min}(6)=4,\\quad W_{\\min}(8)=5,\\quad W_{\\min}(10)=6,\\quad W_{\\min}(14)=9.\n$$\n\nAfter item 4 $(w_{4}=5,v'_{4}=8)$, add to existing states to get new candidates $(8,5)$, $(12,7)$, $(14,9)$, $(16,10)$, $(18,11)$, $(22,14)$, and take minima:\n$$\nW_{\\min}(0)=0,\\quad W_{\\min}(4)=2,\\quad W_{\\min}(6)=4,\\quad W_{\\min}(8)=5,\\quad W_{\\min}(10)=6,\\quad W_{\\min}(12)=7,\\quad W_{\\min}(14)=9,\\quad W_{\\min}(16)=10,\\quad W_{\\min}(18)=11,\\quad W_{\\min}(22)=14.\n$$\n\nSelect the largest scaled value $V'_{\\text{best}}$ with $W_{\\min}(V'_{\\text{best}})\\leq W=8$. The feasible values are $V'\\in\\{0,4,6,8,10,12\\}$ with weights $\\{0,2,4,5,6,7\\}$; the largest is\n$$\nV'_{\\text{best}}=12\\quad \\text{with}\\quad W_{\\min}(12)=7\\leq 8.\n$$\n\nReconstructing the achieving combination for $V'=12$ at weight $7$ gives items $1$ and $4$ (since $v'_{1}+v'_{4}=4+8=12$ and $w_{1}+w_{4}=2+5=7$). The sum of their original values is\n$$\nv_{1}+v_{4}=60+120=180.\n$$\n\nTherefore, the algorithm selects packets with total original importance equal to $180$.", "answer": "$$\\boxed{180}$$", "id": "1425023"}, {"introduction": "Now that you have seen *how* the FPTAS works, let's explore the strategic heart of any approximation scheme: the trade-off between precision and computational cost. This practice [@problem_id:1425003] focuses on the role of the approximation parameter, $\\epsilon$. By comparing the outcomes of using a large $\\epsilon$ for a quick estimate versus a small $\\epsilon$ for a more accurate result, you will gain an intuitive and quantitative understanding of the fundamental compromise that practitioners face when solving NP-hard problems.", "problem": "An operations team is tasked with loading a cargo spacecraft for a mission. They have a manifest of $n$ available scientific instruments, each with a specific mass and a scientific value score. The goal is to select a subset of these instruments that maximizes the total scientific value without exceeding the spacecraft's maximum payload mass. This is a classic 0-1 knapsack problem.\n\nSince the 0-1 knapsack problem is NP-hard and the number of instruments $n$ is large, the team decides to use a Fully Polynomial-Time Approximation Scheme (FPTAS). The specific FPTAS they employ has the following characteristics:\n1.  **Time Complexity**: The worst-case running time to find a solution is given by the function $T(n, \\epsilon) = C \\cdot \\frac{n^3}{\\epsilon}$, where $C$ is a hardware-dependent constant, $n$ is the number of instruments, and $\\epsilon$ is a user-chosen approximation parameter ($0  \\epsilon  1$).\n2.  **Performance Guarantee**: The algorithm guarantees that the total scientific value of its solution, $V_{\\text{sol}}$, is within a factor of $(1-\\epsilon)$ of the true optimal value, $V_{\\text{opt}}$. That is, $V_{\\text{sol}} \\ge (1-\\epsilon)V_{\\text{opt}}$.\n\nThe team considers two different strategies for the same set of $n$ instruments:\n-   **Strategy A**: A quick, rough estimate using an approximation parameter $\\epsilon_A = 0.60$.\n-   **Strategy B**: A more careful, precise calculation using an approximation parameter $\\epsilon_B = 0.15$.\n\nCalculate the following two ratios to compare the strategies:\n1.  The ratio of the worst-case running time of Strategy B to Strategy A, i.e., $\\frac{T_B}{T_A}$.\n2.  The ratio of the minimum guaranteed scientific value from Strategy B to the minimum guaranteed scientific value from Strategy A. Let's call this ratio $R_V$.\n\nExpress your final answer as a pair of numbers $(\\frac{T_B}{T_A}, R_V)$. Round each number in your final answer to two significant figures.", "solution": "The problem asks us to calculate two ratios related to the performance of a Fully Polynomial-Time Approximation Scheme (FPTAS) for the knapsack problem under two different approximation parameters, $\\epsilon_A$ and $\\epsilon_B$.\n\n**Part 1: Ratio of Running Times**\n\nThe worst-case running time of the FPTAS is given by the formula:\n$$T(n, \\epsilon) = C \\frac{n^3}{\\epsilon}$$\nwhere $n$ is the number of items and $C$ is a constant. We are given two strategies with different $\\epsilon$ values:\n-   Strategy A: $\\epsilon_A = 0.60$\n-   Strategy B: $\\epsilon_B = 0.15$\n\nThe running time for Strategy A, $T_A$, is:\n$$T_A = T(n, \\epsilon_A) = C \\frac{n^3}{\\epsilon_A}$$\n\nThe running time for Strategy B, $T_B$, is:\n$$T_B = T(n, \\epsilon_B) = C \\frac{n^3}{\\epsilon_B}$$\n\nWe need to find the ratio $\\frac{T_B}{T_A}$.\n$$\\frac{T_B}{T_A} = \\frac{C \\frac{n^3}{\\epsilon_B}}{C \\frac{n^3}{\\epsilon_A}}$$\n\nThe terms $C$ and $n^3$ cancel out, as they are the same for both strategies.\n$$\\frac{T_B}{T_A} = \\frac{1/\\epsilon_B}{1/\\epsilon_A} = \\frac{\\epsilon_A}{\\epsilon_B}$$\n\nNow, we substitute the given numerical values for $\\epsilon_A$ and $\\epsilon_B$:\n$$\\frac{T_B}{T_A} = \\frac{0.60}{0.15} = 4$$\n\nSo, the worst-case running time for Strategy B is 4 times that of Strategy A.\n\n**Part 2: Ratio of Minimum Guaranteed Values**\n\nThe performance guarantee of the FPTAS states that the value of the solution, $V_{\\text{sol}}$, is at least $(1-\\epsilon)$ times the optimal value, $V_{\\text{opt}}$:\n$$V_{\\text{sol}} \\ge (1-\\epsilon)V_{\\text{opt}}$$\n\nThe minimum guaranteed value is therefore $(1-\\epsilon)V_{\\text{opt}}$.\n\nFor Strategy A, the minimum guaranteed value, which we can call $V_{\\text{min},A}$, is:\n$$V_{\\text{min},A} = (1-\\epsilon_A)V_{\\text{opt}}$$\n\nFor Strategy B, the minimum guaranteed value, $V_{\\text{min},B}$, is:\n$$V_{\\text{min},B} = (1-\\epsilon_B)V_{\\text{opt}}$$\n\nThe problem asks for the ratio of these minimum guaranteed values, $R_V = \\frac{V_{\\text{min},B}}{V_{\\text{min},A}}$.\n$$R_V = \\frac{(1-\\epsilon_B)V_{\\text{opt}}}{(1-\\epsilon_A)V_{\\text{opt}}}$$\n\nThe term $V_{\\text{opt}}$ is the true optimal value for the given problem instance and is the same in both cases, so it cancels out.\n$$R_V = \\frac{1-\\epsilon_B}{1-\\epsilon_A}$$\n\nSubstituting the numerical values for $\\epsilon_A$ and $\\epsilon_B$:\n$$R_V = \\frac{1 - 0.15}{1 - 0.60} = \\frac{0.85}{0.40}$$\n$$R_V = 2.125$$\n\nThe problem requires rounding to two significant figures.\nThe first ratio, 4, can be written as $4.0$ to show two significant figures.\nThe second ratio, $2.125$, rounded to two significant figures is $2.1$.\n\nTherefore, the final answer as a pair $(\\frac{T_B}{T_A}, R_V)$ is $(4.0, 2.1)$.", "answer": "$$\\boxed{\\begin{pmatrix} 4.0  2.1 \\end{pmatrix}}$$", "id": "1425003"}, {"introduction": "A deep understanding of a concept involves knowing not just where it works, but also where its guarantees might break down or become meaningless. This final practice poses a thought-provoking question: what happens if we use the FPTAS with an error parameter $\\epsilon$ outside its typical range of $(0, 1)$? By analyzing the theoretical consequences of setting $\\epsilon \\ge 1$ [@problem_id:1425012], you will solidify your grasp of the approximation guarantee $V_{ALG} \\ge (1-\\epsilon)V_{OPT}$ and the true meaning of a \"polynomial-time approximation scheme.\"", "problem": "Consider the 0-1 Knapsack problem: we are given a set of $n$ items, where item $i$ has a positive integer value $v_i$ and a positive integer weight $w_i$. We are also given a knapsack with a maximum weight capacity $W$. The goal is to select a subset of items that maximizes the total value without exceeding the weight capacity $W$.\n\nSince this problem is NP-hard, approximation algorithms are often used. A common algorithm is a Fully Polynomial-Time Approximation Scheme (FPTAS). For any given error parameter $\\epsilon > 0$, this FPTAS finds a solution with a total value $V_{ALG}$ that satisfies the guarantee $V_{ALG} \\geq (1-\\epsilon)V_{OPT}$, where $V_{OPT}$ is the value of the optimal solution. The running time of this FPTAS is polynomial in the input size $n$ and in $1/\\epsilon$, specifically given by $T(n, \\epsilon) = O(n^3 / \\epsilon)$.\n\nA student is experimenting with this FPTAS and, contrary to standard practice, decides to run it with an error parameter $\\epsilon$ that is greater than or equal to 1. Which of the following statements best describes the theoretical consequences of this choice?\n\nA. The algorithm will run in time polynomial in $n$ (specifically, $O(n^3)$ or faster) but the approximation guarantee $V_{ALG} \\geq (1-\\epsilon)V_{OPT}$ becomes trivial, providing no assurance about the quality of the solution relative to the optimum.\n\nB. The algorithm's running time will decrease, and the approximation guarantee will become stronger, ensuring the solution is closer to the optimal value $V_{OPT}$ than when $\\epsilon  1$.\n\nC. The algorithm will produce a solution with a guaranteed value of at least 0, but its running time will become exponential in $n$ because the parameter $\\epsilon$ is outside its intended range of $(0, 1)$.\n\nD. The algorithm is not guaranteed to terminate or produce a valid solution (i.e., a solution that respects the weight capacity $W$) because the theoretical underpinnings of the FPTAS rely on $\\epsilon$ being a small positive fraction.\n\nE. The approximation guarantee becomes void, but the algorithm's running time remains unchanged from the case where $\\epsilon$ is a small fraction, as the complexity is dominated by the $n^3$ term.", "solution": "We are given an FPTAS for 0-1 Knapsack with the guarantee and running time:\n$$\nV_{ALG} \\geq (1-\\epsilon) V_{OPT}, \\quad T(n,\\epsilon) = O\\!\\left(\\frac{n^{3}}{\\epsilon}\\right).\n$$\nConsider the student’s choice $\\epsilon \\geq 1$.\n\nFirst, analyze the approximation bound. For $\\epsilon \\geq 1$,\n$$\n1 - \\epsilon \\leq 0.\n$$\nSince item values are positive integers, any feasible solution has nonnegative total value, and in particular the empty set yields value $0$, so\n$$\nV_{ALG} \\geq 0.\n$$\nBecause $V_{OPT} \\geq 0$, we have\n$$\n(1-\\epsilon) V_{OPT} \\leq 0.\n$$\nThus the formal guarantee\n$$\nV_{ALG} \\geq (1-\\epsilon) V_{OPT}\n$$\nreduces to the trivial statement $V_{ALG} \\geq$ a nonpositive number, which provides no meaningful assurance about proximity to $V_{OPT}$. Therefore, the approximation guarantee becomes trivial when $\\epsilon \\geq 1$.\n\nSecond, analyze the running time. The stated running time is\n$$\nT(n,\\epsilon) = O\\!\\left(\\frac{n^{3}}{\\epsilon}\\right).\n$$\nFor $\\epsilon \\geq 1$, we have $\\frac{1}{\\epsilon} \\leq 1$, hence\n$$\nT(n,\\epsilon) = O\\!\\left(\\frac{n^{3}}{\\epsilon}\\right) \\subseteq O(n^{3}).\n$$\nTherefore, the algorithm still runs in time polynomial in $n$, at most $O(n^{3})$, and potentially faster as $\\epsilon$ increases.\n\nThe algorithm’s feasibility and termination properties do not rely on $\\epsilon  1$; the FPTAS construction continues to produce a feasible solution that respects the knapsack capacity, with the only consequence being the loss of a meaningful approximation factor when $\\epsilon \\geq 1$.\n\nCombining these, the correct description is that the running time is polynomial in $n$ (no worse than $O(n^{3})$, possibly faster), and the approximation guarantee becomes trivial.\n\nThis corresponds to option A.", "answer": "$$\\boxed{A}$$", "id": "1425012"}]}