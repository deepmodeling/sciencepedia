{"hands_on_practices": [{"introduction": "Understanding the hardness of a problem like CLIQUE often begins by relating it to other known hard problems. This practice guides you through the foundational reduction from 3-Satisfiability (3-SAT) to CLIQUE, a cornerstone of complexity theory. By manually constructing the graph and identifying the clique that corresponds to a satisfying assignment, you will gain a tangible understanding of how logical constraints can be encoded into a graphical structure, revealing why finding large cliques is fundamentally difficult.", "problem": "In computational complexity theory, many problems are studied by transforming them into other problems. Consider the standard transformation from a Boolean satisfiability problem to a graph problem. A Boolean formula is in 3-Conjunctive Normal Form (3-CNF) if it is a conjunction (AND, denoted by $\\land$) of clauses, where each clause is a disjunction (OR, denoted by $\\lor$) of exactly three literals. A literal is either a variable (e.g., $x_i$) or its negation (e.g., $\\neg x_i$).\n\nGiven the following 3-CNF formula $\\phi$ with three variables ($x_1, x_2, x_3$) and three clauses:\n$$ \\phi = (x_1 \\lor \\neg x_2 \\lor x_3) \\land (\\neg x_1 \\lor x_2 \\lor \\neg x_3) \\land (x_1 \\lor x_2 \\lor \\neg x_3) $$\n\nA graph $G=(V, E)$ is constructed from $\\phi$ according to the following rules:\n1.  The set of vertices $V$ is formed by creating one vertex for each literal in each clause. A vertex is represented by a pair $(l, i)$, where $l$ is the literal and $i \\in \\{1, 2, 3\\}$ is the index of the clause containing it. For example, the literal $\\neg x_2$ in the first clause corresponds to the vertex $(\\neg x_2, 1)$.\n2.  The set of edges $E$ is formed by connecting two vertices $(l, i)$ and $(l', j)$ with an edge if and only if both of the following conditions are met:\n    a. The vertices are from different clauses (i.e., $i \\neq j$).\n    b. The literals are not contradictory (i.e., $l$ is not the negation of $l'$).\n\nA $k$-clique in a graph is a set of $k$ vertices where every two distinct vertices in the set are adjacent (connected by an edge). Which of the following sets of vertices forms a 3-clique in the graph $G$ constructed from the formula $\\phi$?\n\nA. $\\{(x_1, 1), (\\neg x_1, 2), (x_2, 3)\\}$\n\nB. $\\{(x_1, 1), (x_2, 2), (\\neg x_3, 3)\\}$\n\nC. $\\{(x_1, 1), (\\neg x_2, 1), (x_2, 3)\\}$\n\nD. $\\{(\\neg x_2, 1), (x_2, 2), (\\neg x_3, 2)\\}$\n\nE. $\\{(x_3, 1), (\\neg x_3, 2), (x_1, 3)\\}$", "solution": "The problem asks us to identify which of the given sets of three vertices forms a 3-clique in a graph constructed from a specific 3-CNF formula $\\phi$.\n\nThe formula is given as $\\phi = (x_1 \\lor \\neg x_2 \\lor x_3) \\land (\\neg x_1 \\lor x_2 \\lor \\neg x_3) \\land (x_1 \\lor x_2 \\lor \\neg x_3)$.\nClause 1: $(x_1 \\lor \\neg x_2 \\lor x_3)$\nClause 2: $(\\neg x_1 \\lor x_2 \\lor \\neg x_3)$\nClause 3: $(x_1 \\lor x_2 \\lor \\neg x_3)$\n\nThe vertices of the graph correspond to the literals in these clauses. A vertex is denoted as $(l, i)$, where $l$ is the literal and $i$ is the clause number.\nThe vertices are:\nFrom Clause 1: $(x_1, 1), (\\neg x_2, 1), (x_3, 1)$\nFrom Clause 2: $(\\neg x_1, 2), (x_2, 2), (\\neg x_3, 2)$\nFrom Clause 3: $(x_1, 3), (x_2, 3), (\\neg x_3, 3)$\n\nAn edge exists between two vertices $(l, i)$ and $(l', j)$ if and only if:\n1.  They are in different clauses: $i \\neq j$.\n2.  They are not contradictory: $l \\neq \\neg l'$.\n\nA set of three vertices $\\{v_1, v_2, v_3\\}$ forms a 3-clique if there is an edge between $v_1$ and $v_2$, between $v_1$ and $v_3$, and between $v_2$ and $v_3$. We will now examine each option.\n\n**A. $\\{(x_1, 1), (\\neg x_1, 2), (x_2, 3)\\}$**\nLet's check the pair of vertices $(x_1, 1)$ and $(\\neg x_1, 2)$.\n1.  Are they in different clauses? Yes, $1 \\neq 2$.\n2.  Are they contradictory? The literal $x_1$ is the negation of the literal $\\neg x_1$. So, yes, they are contradictory.\nSince the second condition for an edge is not met, there is no edge between $(x_1, 1)$ and $(\\neg x_1, 2)$. Therefore, this set of vertices does not form a 3-clique.\n\n**B. $\\{(x_1, 1), (x_2, 2), (\\neg x_3, 3)\\}$**\nWe must check all three pairs of vertices.\n1.  Pair: $(x_1, 1)$ and $(x_2, 2)$\n    a. Different clauses? Yes, $1 \\neq 2$.\n    b. Contradictory? $x_1$ and $x_2$ are not negations of each other. Not contradictory.\n    An edge exists between $(x_1, 1)$ and $(x_2, 2)$.\n2.  Pair: $(x_1, 1)$ and $(\\neg x_3, 3)$\n    a. Different clauses? Yes, $1 \\neq 3$.\n    b. Contradictory? $x_1$ and $\\neg x_3$ are not negations of each other. Not contradictory.\n    An edge exists between $(x_1, 1)$ and $(\\neg x_3, 3)$.\n3.  Pair: $(x_2, 2)$ and $(\\neg x_3, 3)$\n    a. Different clauses? Yes, $2 \\neq 3$.\n    b. Contradictory? $x_2$ and $\\neg x_3$ are not negations of each other. Not contradictory.\n    An edge exists between $(x_2, 2)$ and $(\\neg x_3, 3)$.\nSince an edge exists between every pair of vertices in this set, this set forms a 3-clique.\n\n**C. $\\{(x_1, 1), (\\neg x_2, 1), (x_2, 3)\\}$**\nLet's check the pair of vertices $(x_1, 1)$ and $(\\neg x_2, 1)$.\n1.  Are they in different clauses? No, both are in clause 1 ($1 = 1$).\nSince the first condition for an edge is not met, there is no edge between $(x_1, 1)$ and $(\\neg x_2, 1)$. Therefore, this set of vertices does not form a 3-clique.\n\n**D. $\\{(\\neg x_2, 1), (x_2, 2), (\\neg x_3, 2)\\}$**\nLet's check the pair of vertices $(x_2, 2)$ and $(\\neg x_3, 2)$.\n1.  Are they in different clauses? No, both are in clause 2 ($2 = 2$).\nSince the first condition for an edge is not met, there is no edge between $(x_2, 2)$ and $(\\neg x_3, 2)$. Therefore, this set of vertices does not form a 3-clique.\n\n**E. $\\{(x_3, 1), (\\neg x_3, 2), (x_1, 3)\\}$**\nLet's check the pair of vertices $(x_3, 1)$ and $(\\neg x_3, 2)$.\n1.  Are they in different clauses? Yes, $1 \\neq 2$.\n2.  Are they contradictory? The literal $x_3$ is the negation of the literal $\\neg x_3$. So, yes, they are contradictory.\nSince the second condition for an edge is not met, there is no edge between $(x_3, 1)$ and $(\\neg x_3, 2)$. Therefore, this set of vertices does not form a 3-clique.\n\nBased on the analysis, only the set of vertices in option B satisfies the conditions for a 3-clique.", "answer": "$$\\boxed{B}$$", "id": "1427960"}, {"introduction": "When designing algorithms for optimization problems, it's easy to fall into the trap of confusing local optimality with global optimality. This exercise explores that exact pitfall by examining the difference between a *maximal* clique and a *maximum* clique. You will analyze a specific graph where finding a maximal clique is trivial, yet this clique is significantly smaller than the maximum one, demonstrating why simple greedy strategies can fail to approximate the true solution effectively.", "problem": "In graph theory, a **clique** is a subset of vertices in an undirected graph where every two distinct vertices in the subset are connected by an edge. A clique is called **maximal** if it cannot be extended by adding any other vertex from the graph; that is, there is no vertex outside the clique that is connected to every vertex within the clique. The **maximum clique** is a clique of the largest possible size in the graph.\n\nConsider a family of graphs, denoted by $G_k$ for each integer $k \\ge 3$. Each graph $G_k$ is constructed as the disjoint union of two simpler graphs:\n1. A complete graph $K_k$ with $k$ vertices.\n2. A path graph $P_3$ with 3 vertices.\n\nA disjoint union means that the two components, $K_k$ and $P_3$, coexist in $G_k$ but have no edges connecting them. The total number of vertices in $G_k$ is thus $n = k+3$.\n\nThis construction demonstrates a key challenge in finding the maximum clique. While the size of the maximum clique in $G_k$ grows linearly with the total number of vertices $n$, it is possible to find maximal cliques that are very small.\n\nFor any graph $G_k$ in this family (where $k \\ge 3$), what is the size of the smallest possible maximal clique?", "solution": "We analyze the maximal cliques in the graph $G_k$, which is the disjoint union of a complete graph $K_k$ and a path graph $P_3$, denoted $G_k = K_k \\sqcup P_3$, for $k \\ge 3$.\n\nIn a disjoint union of graphs, a clique must be entirely contained within one of the components. This is because any set of vertices containing nodes from different components cannot form a clique (of size 2 or more) as there are no edges between the components.\n\nTherefore, the maximal cliques of $G_k$ are simply the maximal cliques of its individual components, $K_k$ and $P_3$.\n\n1.  **Maximal cliques in $K_k$**: A complete graph $K_k$ has only one maximal clique: the set of all its $k$ vertices. Any proper subset of vertices is not maximal because any vertex not in the subset is connected to all vertices in the subset and can be added to extend it. Thus, the only maximal clique in $K_k$ has size $k$.\n\n2.  **Maximal cliques in $P_3$**: Let the path graph $P_3$ have vertices $v_1, v_2, v_3$ and edges $(v_1, v_2)$ and $(v_2, v_3)$.\n    *   The cliques in $P_3$ are the individual vertices $\\{v_1\\}, \\{v_2\\}, \\{v_3\\}$ and the vertex sets corresponding to the edges, $\\{v_1, v_2\\}$ and $\\{v_2, v_3\\}$.\n    *   Single-vertex cliques are not maximal. For example, $\\{v_1\\}$ is not maximal because we can add $v_2$ to it, and $\\{v_1, v_2\\}$ is still a clique. The same logic applies to $\\{v_2\\}$ and $\\{v_3\\}$.\n    *   The edge-cliques $\\{v_1, v_2\\}$ and $\\{v_2, v_3\\}$ are maximal. For example, $\\{v_1, v_2\\}$ cannot be extended by adding $v_3$, because $v_3$ is not connected to $v_1$. Similarly, $\\{v_2, v_3\\}$ cannot be extended by adding $v_1$.\n    *   Therefore, the maximal cliques in $P_3$ are of size 2.\n\nCombining these findings, the sizes of the maximal cliques in $G_k$ are $k$ (from the $K_k$ component) and 2 (from the $P_3$ component).\n\nSince the problem specifies that $k \\ge 3$, the smallest of these possible sizes is 2. Thus, for any graph $G_k$ in this family, the size of the smallest possible maximal clique is 2.", "answer": "$$\\boxed{2}$$", "id": "1427989"}, {"introduction": "In computational complexity, a powerful algorithmic technique is \"self-reducibility,\" which allows us to turn a decision algorithm (a \"yes/no\" oracle) into a construction algorithm that finds a solution. This thought experiment demonstrates how to use a hypothetical oracle that can distinguish between graphs with a large clique and those with a small one to iteratively build a large clique. This practice reveals the deep connection between deciding if a solution exists and actually finding it, a key concept in the study of approximation algorithms.", "problem": "You are tasked with analyzing a large communication network, which can be modeled as a simple undirected graph $G=(V, E)$. A key functional unit in this network is a \"processing core,\" which corresponds to a clique in the graph. A clique is a subset of vertices where every two distinct vertices are connected by an edge. The size of the largest such core is called the clique number of the graph, denoted $\\omega(G)$.\n\nTo aid your analysis, you have access to a special subroutine, `CoreDetector(H, k)`, which operates on a graph $H$ and an integer $k$. The `CoreDetector` is built on a principle of gapped detection; it is only guaranteed to work correctly if its input $(H, k)$ satisfies a \"gap promise\". The promise is that either the input graph's clique number $\\omega(H)$ is large or it is small, but not in between. Specifically, for a given slack parameter $s>1$, the promise is that either $\\omega(H) \\ge k$ or $\\omega(H) < k/s$.\n\nThe `CoreDetector` you have uses a slack parameter $s=2$. Its behavior is as follows:\n- If an input $(H, k)$ satisfies the promise $\\omega(H) \\ge k$, the detector is guaranteed to return `YES`.\n- If an input $(H, k)$ satisfies the promise $\\omega(H) < k/2$, the detector is guaranteed to return `NO`.\n- If the input does not satisfy the promise, i.e., if $k/2 \\le \\omega(H) < k$, the detector's behavior is undefined and its output is unreliable.\n\nYou are analyzing a specific large graph $G$ using the following algorithm to find a sizeable clique:\n\n**Algorithm: Find-Approx-Core**\n\n**Phase 1: Estimate Core Size**\n1.  Find the largest integer $k_{est}$ that is a power of 2 (i.e., $k_{est} = 2^j$ for some integer $j \\ge 0$) for which `CoreDetector(G, k_{est})` returns `YES`. If no such value exists, the algorithm returns an empty set.\n\n**Phase 2: Reconstruct Core**\n1.  Initialize an empty set of vertices $C = \\emptyset$.\n2.  Initialize a set of candidate vertices $V_{cand} = V$.\n3.  Iterate through the vertices of the graph $v_1, v_2, \\dots, v_n$ according to a fixed, arbitrary ordering.\n4.  For each vertex $v_i$:\n    a. If $v_i$ is in the current candidate set $V_{cand}$:\n        i. Construct a new temporary candidate set $V'_{cand} = V_{cand} \\cap N(v_i)$, where $N(v_i)$ is the set of neighbors of $v_i$ in the original graph $G$.\n        ii. Construct a test graph $H_{test}$ which is the subgraph of $G$ induced by the vertices in $V'_{cand}$.\n        iii. Call the detector: `verdict = CoreDetector(H_{test}, k_{est})`.\n        iv. If the `verdict` is `YES`:\n            - Add the vertex $v_i$ to the clique: $C \\leftarrow C \\cup \\{v_i\\}$.\n            - Update the main candidate set: $V_{cand} \\leftarrow V'_{cand}$.\n\nThe algorithm returns the set $C$ after iterating through all vertices. Let $\\omega(G)$ be the true size of the maximum clique in the graph $G$. Assuming $\\omega(G)$ is large, the described algorithm is guaranteed to find a clique $C$ of a certain minimum size. What is this minimum guaranteed size of $C$ relative to $\\omega(G)$?\n\nA. $\\frac{\\omega(G)}{2}$\n\nB. $\\frac{\\omega(G)}{4}$\n\nC. $\\frac{\\omega(G)}{8}$\n\nD. $\\frac{\\omega(G)}{16}$", "solution": "Let $t = \\omega(G)$ be the size of the maximum clique in the input graph $G$. The solution process involves two main stages of analysis.\n\n**Phase 1: Bounding the true clique size**\n\nThe algorithm first determines the largest power of two, $k_{\\text{est}}$, for which `CoreDetector(G, k_{\\text{est}})` returns `YES`.\n*   The `YES` verdict for $k_{\\text{est}}$ implies that the condition for a guaranteed `NO` was not met, i.e., we cannot have $t  k_{\\text{est}}/2$. Therefore, we must have $t \\ge k_{\\text{est}}/2$.\n*   The fact that $k_{\\text{est}}$ is the *largest* such power of two means that the call `CoreDetector(G, 2k_{\\text{est}})` did not return `YES`. This implies that the condition for a guaranteed `YES` was not met for the parameter $2k_{\\text{est}}$, i.e., we cannot have $t \\ge 2k_{\\text{est}}$. Therefore, we must have $t  2k_{\\text{est}}$.\n\nCombining these two bounds, we have established a relationship between the true maximum clique size $t$ and the estimate $k_{\\text{est}}$:\n$$ \\frac{k_{\\text{est}}}{2} \\le t  2k_{\\text{est}} $$\n\n**Phase 2: Bounding the constructed clique size**\n\nPhase 2 is a self-reduction algorithm that uses the `CoreDetector` to build a clique $C$. When the algorithm adds a vertex to $C$, it is based on a `YES` verdict from `CoreDetector(H_{test}, k_{est})`. A `YES` verdict provides a guarantee that the clique number of the tested subgraph, $\\omega(H_{\\text{test}})$, is at least $k_{\\text{est}}/2$. The algorithm maintains the invariant that the current candidate set always induces a subgraph containing a clique of at least this size.\n\nThis type of self-reduction procedure, using a gapped oracle with parameter $k_{\\text{est}}$ and slack $s=2$, is guaranteed to construct a solution (a clique $C$) of size at least $k_{\\text{est}}/s$. In our case, $s=2$, so the algorithm is guaranteed to find a clique $C$ of size:\n$$ |C| \\ge \\frac{k_{\\text{est}}}{2} $$\nA rigorous proof shows this guarantee holds by demonstrating that as long as the constructed clique $C$ has fewer than $k_{\\text{est}}/2$ vertices, there must be a vertex in the remaining hidden clique (of size $\\ge k_{\\text{est}}/2$) that can be added to $C$ and pass the detector's test (even with an adversarial detector).\n\n**Combining the Results**\n\nWe have two key inequalities:\n1.  From Phase 2: $|C| \\ge \\frac{k_{\\text{est}}}{2}$\n2.  From Phase 1: $t  2k_{\\text{est}}$, which can be rewritten as $k_{\\text{est}} > \\frac{t}{2}$\n\nSubstituting the second inequality into the first gives us the lower bound on the size of the constructed clique $C$ in terms of the true maximum clique size $t$:\n$$ |C| \\ge \\frac{k_{\\text{est}}}{2} > \\frac{(t/2)}{2} = \\frac{t}{4} $$\n\nTherefore, the algorithm is guaranteed to find a clique $C$ of size at least $\\omega(G)/4$.", "answer": "$$\\boxed{B}$$", "id": "1427944"}]}