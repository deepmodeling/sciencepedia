{"hands_on_practices": [{"introduction": "The permanent of a matrix is not just an abstract mathematical function; it possesses a powerful combinatorial interpretation that is central to its role in complexity theory. This exercise provides a foundational link between the algebraic definition of the permanent and a concrete problem in graph theory: counting perfect matchings. By identifying the specific matrix whose permanent equals the number of perfect matchings in a complete bipartite graph, you will gain a hands-on understanding of how the permanent functions as a counting tool, a concept that underpins the entire #P complexity class. [@problem_id:1469032]", "problem": "The permanent of an $n \\times n$ matrix $A=(a_{ij})$ is defined by the formula:\n$$ \\text{perm}(A) = \\sum_{\\sigma \\in S_n} \\prod_{i=1}^n a_{i, \\sigma(i)} $$\nwhere the sum is over all permutations $\\sigma$ of the set $\\{1, 2, \\dots, n\\}$. This quantity is closely related to counting problems in graph theory, forming a basis for the complexity class #P.\n\nConsider a complete bipartite graph, denoted $K_{n,n}$. This graph has two sets of vertices, $U = \\{u_1, u_2, \\dots, u_n\\}$ and $V = \\{v_1, v_2, \\dots, v_n\\}$, and an edge exists between every vertex in $U$ and every vertex in $V$. A perfect matching in $K_{n,n}$ is a set of $n$ edges such that no two edges share a vertex. This configuration pairs each vertex from set $U$ with a unique vertex from set $V$.\n\nYour task is to identify an $n \\times n$ matrix $A$ such that its permanent, $\\text{perm}(A)$, is exactly equal to the number of distinct perfect matchings in the graph $K_{n,n}$.\n\nWhich of the following matrices satisfies this condition for any integer $n \\ge 1$? Let $J_n$ be the $n \\times n$ matrix where every entry is 1, let $I_n$ be the $n \\times n$ identity matrix, and let $\\delta_{ij}$ be the Kronecker delta.\n\nA. The matrix $A$ with entries $a_{ij} = n$.\n\nB. The matrix $A$ with entries $a_{ij} = 1 - \\delta_{ij}$.\n\nC. The matrix $A = I_n$.\n\nD. The matrix $A = J_n$.\n\nE. The matrix $A$ with entries $a_{ij} = ij$.", "solution": "We first relate perfect matchings in the complete bipartite graph $K_{n,n}$ to permutations. A perfect matching corresponds to a bijection $f: U \\to V$, which can be identified with a permutation $\\sigma \\in S_{n}$ via $f(u_{i}) = v_{\\sigma(i)}$. Hence, the number of perfect matchings in $K_{n,n}$ is the number of permutations of $n$ elements, which is $n!$.\n\nWe require a matrix $A$ whose permanent equals this count:\n$$\n\\text{perm}(A) = \\sum_{\\sigma \\in S_{n}} \\prod_{i=1}^{n} a_{i,\\sigma(i)} = n!.\n$$\n\nEvaluate each option:\n\n- Option D: $A = J_{n}$ with $a_{ij} = 1$ for all $i,j$.\nFor any $\\sigma \\in S_{n}$,\n$$\n\\prod_{i=1}^{n} a_{i,\\sigma(i)} = \\prod_{i=1}^{n} 1 = 1.\n$$\nTherefore,\n$$\n\\text{perm}(J_{n}) = \\sum_{\\sigma \\in S_{n}} 1 = |S_{n}| = n!,\n$$\nwhich matches the number of perfect matchings in $K_{n,n}$.\n\n- Option A: $a_{ij} = n$.\nFor any $\\sigma$,\n$$\n\\prod_{i=1}^{n} a_{i,\\sigma(i)} = \\prod_{i=1}^{n} n = n^{n},\n$$\nso\n$$\n\\text{perm}(A) = \\sum_{\\sigma \\in S_{n}} n^{n} = n! \\, n^{n} \\neq n! \\quad \\text{for } n \\ge 2.\n$$\n\n- Option B: $a_{ij} = 1 - \\delta_{ij}$ (zeros on the diagonal, ones off-diagonal).\nFor any $\\sigma$,\n$$\n\\prod_{i=1}^{n} a_{i,\\sigma(i)} = \\prod_{i=1}^{n} (1 - \\delta_{i,\\sigma(i)}) =\n\\begin{cases}\n1, & \\text{if } \\sigma(i) \\ne i \\text{ for all } i, \\\\\n0, & \\text{otherwise}.\n\\end{cases}\n$$\nThus $\\text{perm}(A)$ counts derangements of $n$, commonly denoted $!n$, and\n$$\n\\text{perm}(A) = !n \\neq n! \\quad \\text{for } n \\ge 2.\n$$\n\n- Option C: $A = I_{n}$.\nFor any $\\sigma$,\n$$\n\\prod_{i=1}^{n} a_{i,\\sigma(i)} = \\prod_{i=1}^{n} \\delta_{i,\\sigma(i)} =\n\\begin{cases}\n1, & \\sigma = \\text{id}, \\\\\n0, & \\text{otherwise},\n\\end{cases}\n$$\nso\n$$\n\\text{perm}(I_{n}) = 1 \\neq n! \\quad \\text{for } n \\ge 2.\n$$\n\n- Option E: $a_{ij} = i j$.\nFor any $\\sigma$,\n$$\n\\prod_{i=1}^{n} a_{i,\\sigma(i)} = \\prod_{i=1}^{n} (i \\, \\sigma(i)) = \\left( \\prod_{i=1}^{n} i \\right)\\left( \\prod_{i=1}^{n} \\sigma(i) \\right) = (n!)^{2},\n$$\nindependent of $\\sigma$, hence\n$$\n\\text{perm}(A) = \\sum_{\\sigma \\in S_{n}} (n!)^{2} = n! \\, (n!)^{2} = (n!)^{3} \\neq n! \\quad \\text{for } n \\ge 2.\n$$\n\nOnly option D yields $\\text{perm}(A) = n!$ for all integers $n \\ge 1$, matching the number of perfect matchings in $K_{n,n}$.", "answer": "$$\\boxed{D}$$", "id": "1469032"}, {"introduction": "Valiant's theorem proves the permanent is #P-complete by demonstrating its ability to solve other difficult counting problems, most notably #SAT. The ingenious bridge between logical satisfiability and matrix algebra is a technique known as \"arithmetization,\" which converts a Boolean formula into a multivariate polynomial. This exercise walks you through the first crucial step of this process, challenging you to build the polynomial representation for a single logical clause, thereby revealing the core mechanism that connects the discrete world of logic to the continuous world of algebraic functions. [@problem_id:1469070]", "problem": "In a new model of computation, logical variables are represented by numerical counterparts. Specifically, a Boolean variable $x_i$ is mapped to a numerical variable $v_i$, where $v_i=1$ if $x_i$ is TRUE, and $v_i=0$ if $x_i$ is FALSE. Consequently, the logical negation $\\neg x_i$ is represented by the expression $1-v_i$.\n\nYour task is to design an arithmetic representation for a specific logical clause. Consider the clause $C = (x_1 \\lor \\neg x_2 \\lor x_3)$. Construct a multivariate polynomial $P(v_1, v_2, v_3)$ with the following property: for any assignment of values from the set $\\{0, 1\\}$ to the variables $v_1, v_2, v_3$, the polynomial $P$ evaluates to 1 if the corresponding truth assignment satisfies the clause $C$, and evaluates to 0 otherwise.\n\nExpress your answer as a polynomial in terms of $v_1$, $v_2$, and $v_3$.", "solution": "We encode Boolean variables with $v_{i} \\in \\{0,1\\}$, where a literal evaluates to $1$ when true and $0$ when false. The clause $C=(x_{1} \\lor \\neg x_{2} \\lor x_{3})$ consists of three literals:\n- $L_{1}=x_{1}$ maps to $v_{1}$,\n- $L_{2}=\\neg x_{2}$ maps to $1 - v_{2}$,\n- $L_{3}=x_{3}$ maps to $v_{3}$.\n\nFor literals $L_{1},L_{2},L_{3} \\in \\{0,1\\}$, the logical disjunction satisfies the identity\n$$\nL_{1} \\lor L_{2} \\lor L_{3} \\;=\\; 1 - (1 - L_{1})(1 - L_{2})(1 - L_{3}),\n$$\nsince the disjunction is false if and only if all three literals are false, and for $\\{0,1\\}$ variables, conjunction corresponds to multiplication.\n\nSubstituting $L_{1}=v_{1}$, $L_{2}=1 - v_{2}$, and $L_{3}=v_{3}$ gives\n$$\nP(v_{1},v_{2},v_{3}) \\;=\\; 1 - \\bigl(1 - v_{1}\\bigr)\\bigl(1 - (1 - v_{2})\\bigr)\\bigl(1 - v_{3}\\bigr)\n\\;=\\; 1 - \\bigl(1 - v_{1}\\bigr) v_{2} \\bigl(1 - v_{3}\\bigr).\n$$\nExpanding to obtain a polynomial,\n$$\n\\bigl(1 - v_{1}\\bigr) v_{2} \\bigl(1 - v_{3}\\bigr)\n= v_{2}\\bigl(1 - v_{1}\\bigr)\\bigl(1 - v_{3}\\bigr)\n= v_{2}\\bigl(1 - v_{1} - v_{3} + v_{1} v_{3}\\bigr)\n= v_{2} - v_{1} v_{2} - v_{2} v_{3} + v_{1} v_{2} v_{3}.\n$$\nTherefore,\n$$\nP(v_{1},v_{2},v_{3}) = 1 - \\bigl(v_{2} - v_{1} v_{2} - v_{2} v_{3} + v_{1} v_{2} v_{3}\\bigr)\n= 1 - v_{2} + v_{1} v_{2} + v_{2} v_{3} - v_{1} v_{2} v_{3}.\n$$\nFor any $v_{1},v_{2},v_{3} \\in \\{0,1\\}$, this polynomial equals $1$ exactly when at least one of $x_{1}$, $\\neg x_{2}$, or $x_{3}$ is true, and equals $0$ otherwise.", "answer": "$$\\boxed{1 - v_{2} + v_{1} v_{2} + v_{2} v_{3} - v_{1} v_{2} v_{3}}$$", "id": "1469070"}, {"introduction": "A key lesson in computational complexity is that a problem's difficulty is not always absolute; it often depends on the structure of the input. While Valiant's theorem establishes the immense difficulty of computing the permanent for a general matrix, this \"hardness\" can vanish when we consider specific, structured cases. This practice problem explores such a scenario, asking you to determine the complexity of computing the permanent for a triangular matrix. You will discover how imposing this simple structure makes an otherwise intractable problem efficiently solvable, illustrating the critical distinction between general-case hardness and the potential for tractable special cases. [@problem_id:1469075]", "problem": "The permanent of an $n \\times n$ matrix $A$ with entries $a_{ij}$ is defined by the formula:\n$$ \\text{perm}(A) = \\sum_{\\sigma \\in S_n} \\prod_{i=1}^n a_{i, \\sigma(i)} $$\nHere, $S_n$ denotes the set of all permutations of the set $\\{1, 2, \\dots, n\\}$. While the definition of the permanent is similar to that of the determinant, its computational properties are vastly different. Valiant's theorem states that the general problem of computing the permanent is #P-complete, meaning it is among the hardest counting problems.\n\nNow, consider a restricted version of this problem, which we will call TRI-PERM. In TRI-PERM, the input matrix $A$ is guaranteed to be an upper triangular matrix. An $n \\times n$ matrix $A$ is upper triangular if all of its entries below the main diagonal are zero; that is, $a_{ij} = 0$ for all pairs of indices $(i, j)$ where $i > j$.\n\nGiven your understanding of computational complexity, which of the following classes best classifies the TRI-PERM problem? Assume familiarity with the definitions of standard complexity classes.\n\nA. P\n\nB. NP-complete\n\nC. #P-complete\n\nD. L (Logarithmic Space)\n\nE. PSPACE-complete", "solution": "We recall the definition of the permanent:\n$$\n\\operatorname{perm}(A)=\\sum_{\\sigma\\in S_{n}}\\prod_{i=1}^{n}a_{i,\\sigma(i)}.\n$$\nSuppose $A$ is upper triangular, so $a_{ij}=0$ whenever $i>j$. Consider any permutation $\\sigma\\in S_{n}$. If there exists an index $i$ such that $\\sigma(i)<i$, then $a_{i,\\sigma(i)}=0$ by the upper triangularity of $A$, and hence the corresponding product term $\\prod_{i=1}^{n}a_{i,\\sigma(i)}$ equals $0$. Therefore, only those permutations with $\\sigma(i)\\geq i$ for all $i$ can contribute nonzero terms.\n\nWe now show that the only permutation satisfying $\\sigma(i)\\geq i$ for all $i$ is the identity permutation. Indeed, summing the inequalities gives\n$$\n\\sum_{i=1}^{n}\\sigma(i)\\geq \\sum_{i=1}^{n}i.\n$$\nBut since $\\sigma$ is a permutation of $\\{1,\\dots,n\\}$, we have\n$$\n\\sum_{i=1}^{n}\\sigma(i)=\\sum_{i=1}^{n}i.\n$$\nThus equality must hold in each inequality $\\sigma(i)\\geq i$, implying $\\sigma(i)=i$ for all $i$. Therefore, only the identity permutation contributes, and hence\n$$\n\\operatorname{perm}(A)=\\prod_{i=1}^{n}a_{ii}.\n$$\n\nConsequently, TRI-PERM reduces to computing the product of the $n$ diagonal entries. This can be done by a straightforward algorithm that reads the diagonal entries and multiplies them, which runs in time polynomial in the input size. Hence TRI-PERM is in class P. (In fact, it can be computed even more efficiently in very low resource classes, but among the provided options, the appropriate classification is P.)", "answer": "$$\\boxed{A}$$", "id": "1469075"}]}