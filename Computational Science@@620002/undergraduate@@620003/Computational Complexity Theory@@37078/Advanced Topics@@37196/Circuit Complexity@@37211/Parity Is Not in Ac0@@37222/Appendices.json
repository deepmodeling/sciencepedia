{"hands_on_practices": [{"introduction": "A powerful technique in circuit complexity is to reframe boolean functions as polynomials over the field of two elements, $\\mathbb{F}_2$. This algebraic perspective is the first step in applying powerful analytical tools to circuit limitations. This exercise provides fundamental practice in this translation, a skill you will need to understand the algebraic proof that PARITY is not in AC⁰. [@problem_id:1434577]", "problem": "In computational complexity theory, it is often useful to represent Boolean functions as multivariate polynomials over a finite field. This algebraic perspective provides powerful tools for analyzing the properties of these functions.\n\nConsider Boolean variables $x_i$ which can take values in $\\{0, 1\\}$, where $0$ corresponds to FALSE and $1$ to TRUE. These variables can be viewed as elements of the finite field with two elements, denoted $\\mathbb{F}_2$. In this field, addition is equivalent to the Exclusive OR (XOR) operation, and multiplication is equivalent to the AND ($\\land$) operation. Any Boolean function $f: \\{0,1\\}^n \\to \\{0,1\\}$ can be uniquely represented by a multilinear polynomial $P(x_1, \\dots, x_n)$ over $\\mathbb{F}_2$.\n\nYour task is to find this polynomial representation for a specific function. Determine the unique multilinear polynomial $P(x_1, x_2, x_3)$ over the field $\\mathbb{F}_2$ that represents the Boolean function $f(x_1, x_2, x_3) = (\\neg x_1 \\lor x_2) \\land (x_1 \\lor \\neg x_3)$.", "solution": "We work over the field $\\mathbb{F}_2$, where Boolean variables take values in $\\{0,1\\}$ and satisfy $x_{i}^{2}=x_{i}$. In $\\mathbb{F}_2$, addition corresponds to XOR, multiplication to AND, and negation is $\\neg x = 1 + x$. Disjunction (OR) satisfies $a \\lor b = a + b + ab$.\n\nTranslate each clause. For the first clause,\n$$(\\neg x_{1} \\lor x_{2}) = (1 + x_{1}) \\lor x_{2} = (1 + x_{1}) + x_{2} + (1 + x_{1})x_{2}.$$\nCompute $(1 + x_{1})x_{2} = x_{2} + x_{1}x_{2}$, so\n$$(\\neg x_{1} \\lor x_{2}) = (1 + x_{1}) + x_{2} + x_{2} + x_{1}x_{2} = 1 + x_{1} + x_{1}x_{2}.$$\nFor the second clause,\n$$(x_{1} \\lor \\neg x_{3}) = x_{1} \\lor (1 + x_{3}) = x_{1} + (1 + x_{3}) + x_{1}(1 + x_{3}).$$\nCompute $x_{1}(1 + x_{3}) = x_{1} + x_{1}x_{3}$, so\n$$(x_{1} \\lor \\neg x_{3}) = x_{1} + 1 + x_{3} + x_{1} + x_{1}x_{3} = 1 + x_{3} + x_{1}x_{3}.$$\n\nThe function is the conjunction (AND) of these clauses, which is multiplication in $\\mathbb{F}_2$:\n$$f(x_{1},x_{2},x_{3}) = (1 + x_{1} + x_{1}x_{2})(1 + x_{3} + x_{1}x_{3}).$$\nExpand and reduce using $x_{i}^{2} = x_{i}$ and cancellation in $\\mathbb{F}_2$:\n\\begin{align*}\n(1 + x_{1} + x_{1}x_{2})(1 + x_{3} + x_{1}x_{3})\n&= (1 + x_{1} + x_{1}x_{2}) + (1 + x_{1} + x_{1}x_{2})x_{3} + (1 + x_{1} + x_{1}x_{2})x_{1}x_{3} \\\\\n&= (1 + x_{1} + x_{1}x_{2}) + (x_{3} + x_{1}x_{3} + x_{1}x_{2}x_{3}) \\\\\n&\\quad + (x_{1}x_{3} + x_{1}^{2}x_{3} + x_{1}^{2}x_{2}x_{3}) \\\\\n&= (1 + x_{1} + x_{1}x_{2}) + (x_{3} + x_{1}x_{3} + x_{1}x_{2}x_{3}) \\\\\n&\\quad + (x_{1}x_{3} + x_{1}x_{3} + x_{1}x_{2}x_{3}) \\\\\n&= 1 + x_{1} + x_{1}x_{2} + x_{3} + x_{1}x_{3},\n\\end{align*}\nsince pairs of identical terms cancel in $\\mathbb{F}_2$. Specifically, the two $x_1x_2x_3$ terms cancel out, and two of the three $x_1x_3$ terms cancel, leaving one. Therefore, the unique multilinear polynomial (algebraic normal form) representing $f$ is\n$$P(x_{1},x_{2},x_{3}) = 1 + x_{1} + x_{3} + x_{1}x_{2} + x_{1}x_{3}.$$", "answer": "$$\\boxed{1 + x_{1} + x_{3} + x_{1}x_{2} + x_{1}x_{3}}$$", "id": "1434577"}, {"introduction": "With the ability to convert functions to polynomials, we can now use their algebraic properties, like degree, to characterize them. This exercise explores the degrees of the fundamental AND and OR functions, revealing a surprisingly high complexity in their polynomial form. Understanding this is key to appreciating why the PARITY function, despite its simple polynomial form, is so difficult for shallow circuits. [@problem_id:1434571]", "problem": "In the study of computational complexity, it is often useful to represent Boolean functions, which map inputs from $\\{0, 1\\}^n$ to an output in $\\{0, 1\\}$, as multivariate polynomials over the finite field with two elements, $\\mathbb{F}_2 = \\{0, 1\\}$. In this field, addition is defined as the exclusive OR (XOR) operation, and multiplication is defined as the logical AND operation. Specifically, for any $a, b \\in \\mathbb{F}_2$, $a+b = a \\oplus b$ and $a \\cdot b = a \\land b$.\n\nAny Boolean function $f: \\{0, 1\\}^n \\to \\{0, 1\\}$ has a unique polynomial representation $p(x_1, \\dots, x_n)$ such that $f(b_1, \\dots, b_n) = p(b_1, \\dots, b_n)$ for all input bit strings $(b_1, \\dots, b_n) \\in \\{0, 1\\}^n$. The degree of this polynomial is defined as the maximum degree of any of its monomials. The degree of a monomial is the sum of the exponents of its variables. Note that in $\\mathbb{F}_2$, any variable $x_i$ satisfies $x_i^k = x_i$ for any integer $k \\ge 1$, so we only need to consider polynomials where each variable appears with an exponent of at most 1 (i.e., square-free polynomials).\n\nConsider two fundamental $n$-variable Boolean functions for $n \\ge 2$:\n1. The AND function: $f_{\\text{AND}}(x_1, \\dots, x_n) = x_1 \\land x_2 \\land \\dots \\land x_n$\n2. The OR function: $f_{\\text{OR}}(x_1, \\dots, x_n) = x_1 \\lor x_2 \\lor \\dots \\lor x_n$\n\nLet $d_{\\text{AND}}$ be the degree of the unique polynomial representing $f_{\\text{AND}}$ over $\\mathbb{F}_2$, and let $d_{\\text{OR}}$ be the degree of the unique polynomial representing $f_{\\text{OR}}$ over $\\mathbb{F}_2$.\n\nWhich of the following statements correctly identifies these degrees?\n\nA. $d_{\\text{AND}} = 1, d_{\\text{OR}} = 1$\n\nB. $d_{\\text{AND}} = n, d_{\\text{OR}} = 1$\n\nC. $d_{\\text{AND}} = 1, d_{\\text{OR}} = n$\n\nD. $d_{\\text{AND}} = n, d_{\\text{OR}} = n$\n\nE. $d_{\\text{AND}} = n, d_{\\text{OR}} = n-1$", "solution": "To solve this problem, we must find the polynomial representation for both the AND and OR functions over the field $\\mathbb{F}_2$ and then determine their degrees. The operations in $\\mathbb{F}_2$ are addition (XOR, $\\oplus$) and multiplication (AND, $\\land$).\n\nFirst, let's find the polynomial for the $n$-variable AND function, $f_{\\text{AND}}(x_1, \\dots, x_n) = x_1 \\land x_2 \\land \\dots \\land x_n$.\nThe logical AND operation corresponds directly to multiplication in $\\mathbb{F}_2$. Therefore, the polynomial representation $p_{\\text{AND}}$ is simply the product of the variables:\n$$p_{\\text{AND}}(x_1, \\dots, x_n) = x_1 \\cdot x_2 \\cdot \\dots \\cdot x_n$$\nThis polynomial consists of a single monomial, $x_1x_2\\dots x_n$. The degree of a monomial is the sum of the exponents of its variables. In this case, each variable $x_i$ has an implicit exponent of 1. So, the degree of this monomial is the sum of $n$ ones:\n$$\\text{degree}(x_1x_2\\dots x_n) = 1 + 1 + \\dots + 1 = n$$\nSince this is the only monomial in the polynomial, the degree of the entire polynomial $p_{\\text{AND}}$ is $n$. Thus, $d_{\\text{AND}} = n$.\n\nNext, let's find the polynomial for the $n$-variable OR function, $f_{\\text{OR}}(x_1, \\dots, x_n) = x_1 \\lor x_2 \\lor \\dots \\lor x_n$.\nThere is no single arithmetic operation in $\\mathbb{F}_2$ that corresponds to the logical OR. We must construct the polynomial using the available operations. A useful identity is De Morgan's Law, which states that an OR expression can be written in terms of AND and NOT:\n$$A_1 \\lor A_2 \\lor \\dots \\lor A_n = \\neg(\\neg A_1 \\land \\neg A_2 \\land \\dots \\land \\neg A_n)$$\nIn the field $\\mathbb{F}_2 = \\{0, 1\\}$, the negation operation $\\neg A$ is equivalent to adding 1. Let's check: if $A=0$, $\\neg A = 1$, and $A+1 = 0+1=1$. If $A=1$, $\\neg A=0$, and $A+1=1+1=0$ (since addition is XOR). So, $\\neg A = 1+A$ in $\\mathbb{F}_2$.\nNow we can translate the De Morgan's expression for OR into the algebra of $\\mathbb{F}_2$:\n\\begin{align*} f_{\\text{OR}}(x_1, \\dots, x_n) &= \\neg(\\neg x_1 \\land \\neg x_2 \\land \\dots \\land \\neg x_n) \\\\ &= 1 + ( (1+x_1) \\land (1+x_2) \\land \\dots \\land (1+x_n) ) \\end{align*}\nReplacing the logical AND with multiplication in $\\mathbb{F}_2$, we get the polynomial $p_{\\text{OR}}$:\n$$p_{\\text{OR}}(x_1, \\dots, x_n) = 1 + (1+x_1)(1+x_2)\\dots(1+x_n)$$\nTo find the degree of this polynomial, we must expand the product term. Let's expand $\\prod_{i=1}^n (1+x_i)$:\n$$\\prod_{i=1}^n (1+x_i) = 1 + \\sum_{1 \\le i \\le n} x_i + \\sum_{1 \\le i < j \\le n} x_i x_j + \\dots + x_1 x_2 \\dots x_n$$\nThis expansion includes terms for all non-empty subsets of variables.\nNow, substitute this expanded form back into the expression for $p_{\\text{OR}}$:\n$$p_{\\text{OR}}(x_1, \\dots, x_n) = 1 + \\left(1 + \\sum_{i} x_i + \\sum_{i<j} x_i x_j + \\dots + x_1 x_2 \\dots x_n \\right)$$\nSince we are in $\\mathbb{F}_2$, addition is XOR, and $1+1=0$. The initial `1+` cancels with the `1` from the expansion:\n$$p_{\\text{OR}}(x_1, \\dots, x_n) = (1+1) + \\sum_{i} x_i + \\sum_{i<j} x_i x_j + \\dots + x_1 x_2 \\dots x_n$$\n$$p_{\\text{OR}}(x_1, \\dots, x_n) = \\sum_{i} x_i + \\sum_{i<j} x_i x_j + \\dots + x_1 x_2 \\dots x_n$$\nThe degree of this polynomial is the degree of its highest-degree monomial. The monomials in this sum are of all degrees from 1 up to $n$. The highest-degree monomial is the term $x_1 x_2 \\dots x_n$, which has degree $n$.\nTherefore, the degree of the polynomial $p_{\\text{OR}}$ is $n$. Thus, $d_{\\text{OR}} = n$.\n\nWe have found that $d_{\\text{AND}} = n$ and $d_{\\text{OR}} = n$. This corresponds to option D.", "answer": "$$\\boxed{D}$$", "id": "1434571"}, {"introduction": "We now arrive at the quantitative heart of the proof that PARITY is not in AC⁰. The proof uses a technique that ultimately yields a mathematical formula for the minimum circuit size required as a function of input size and circuit depth. This advanced exercise gives you a hands-on feel for this powerful result by asking you to optimize a key parameter to find the tightest possible lower bound, demonstrating just how explosively the required circuit size for PARITY grows. [@problem_id:1434555]", "problem": "**Background:** The question of whether the PARITY function can be computed efficiently by circuits of constant depth is a cornerstone of computational complexity theory. The class of circuits with constant depth, polynomial size, and unbounded fan-in AND, OR, and NOT gates is known as AC⁰. It has been proven that for any constant depth $d$, any circuit computing the $n$-variable PARITY function requires a size that grows super-polynomially in $n$. Thus, PARITY is not in AC⁰.\n\nThe proof of this fact involves showing that any function computed by a small, constant-depth circuit can be well-approximated by a low-degree polynomial, or alternatively, can be drastically simplified by randomly fixing some of its inputs. The PARITY function, defined as $f(x_1, \\dots, x_n) = x_1 \\oplus \\dots \\oplus x_n$ (where $\\oplus$ is addition modulo 2), is famously resistant to such simplification.\n\n**Problem Scenario:** A central part of the proof involves a trade-off. To simplify a depth-$d$ circuit on $n$ variables, a parameter $t$ is chosen that represents a target \"complexity\" for an intermediate simplification step. The analysis yields a lower bound on the circuit size $S$ that depends on $n$, $d$, and this parameter $t$. This lower bound, which we will call $S_{bound}(t)$, is given as:\n$$S_{bound}(t) = \\left( \\frac{n}{t^{d-1}} \\right)^{\\frac{t}{d-1}}$$\nFor the overall proof to be as strong as possible, one must choose the parameter $t$ to maximize this lower bound. Your task is to find this tightest possible lower bound.\n\n**Your Task:**\nBy treating $t$ as a positive real variable, find the value of $t$ that maximizes $S_{bound}(t)$. Substitute this optimal value of $t$ back into the expression for $S_{bound}(t)$ to find the best possible size lower bound, $S(n, d)$. Express your final answer for $S(n, d)$ as a function of $n$ and $d$.", "solution": "We are given, for fixed depth $d$ and input size $n$, the lower bound as a function of a positive real parameter $t$:\n$$\nS_{bound}(t)=\\left(\\frac{n}{t^{d-1}}\\right)^{\\frac{t}{d-1}},\n$$\nwith the goal of maximizing it over $t>0$. We assume $d>1$ (the constant-depth setting of interest).\n\nTo maximize $S_{bound}(t)$, consider its natural logarithm (which preserves maximizers):\n$$\nh(t)=\\ln S_{bound}(t)=\\frac{t}{d-1}\\left(\\ln n-(d-1)\\ln t\\right)=\\frac{t}{d-1}\\ln n - t\\ln t.\n$$\nDifferentiate with respect to $t$:\n$$\nh'(t)=\\frac{1}{d-1}\\ln n - \\left(\\ln t + 1\\right).\n$$\nSet $h'(t)=0$ to find the critical point:\n$$\n\\frac{1}{d-1}\\ln n - \\ln t - 1=0 \\quad \\Longrightarrow \\quad \\ln t=\\frac{1}{d-1}\\ln n - 1.\n$$\nExponentiating gives the unique critical point\n$$\nt^{\\ast}=\\exp\\!\\left(\\frac{1}{d-1}\\ln n - 1\\right)=\\frac{n^{\\frac{1}{d-1}}}{\\exp(1)}.\n$$\nThe second derivative is\n$$\nh''(t)=-\\frac{1}{t}<0 \\quad \\text{for all } t>0,\n$$\nso $t^{\\ast}$ is the global maximizer.\n\nSubstitute $t^{\\ast}$ back into $S_{bound}(t)$:\nFirst compute\n$$\n\\left(t^{\\ast}\\right)^{d-1}=\\left(\\frac{n^{\\frac{1}{d-1}}}{\\exp(1)}\\right)^{d-1}=\\frac{n}{\\exp(d-1)},\n$$\nhence\n$$\n\\frac{n}{\\left(t^{\\ast}\\right)^{d-1}}=\\exp(d-1).\n$$\nAlso,\n$$\n\\frac{t^{\\ast}}{d-1}=\\frac{n^{\\frac{1}{d-1}}}{\\exp(1)(d-1)}.\n$$\nTherefore,\n$$\nS(n,d)=S_{bound}\\!\\left(t^{\\ast}\\right)=\\left(\\exp(d-1)\\right)^{\\frac{n^{\\frac{1}{d-1}}}{\\exp(1)(d-1)}}=\\exp\\!\\left(\\frac{n^{\\frac{1}{d-1}}}{\\exp(1)}\\right).\n$$\nThis yields the optimal lower bound as a function of $n$ and $d$.", "answer": "$$\\boxed{\\exp\\!\\left(\\frac{n^{\\frac{1}{d-1}}}{\\exp(1)}\\right)}$$", "id": "1434555"}]}