{"hands_on_practices": [{"introduction": "Building a strong foundation in circuit lower bounds begins with understanding how to reason about the most basic circuits. This first exercise [@problem_id:1414757] provides a perfect entry point by asking you to prove a tight lower bound for a simple function, the logical AND, within the restricted model of monotone circuits. By analyzing how information from the inputs must propagate to the output, you will develop a fundamental proof technique that serves as a building block for more complex arguments.", "problem": "A hardware designer is building a custom Very-Large-Scale Integration (VLSI) chip. A core component of this chip must compute the logical conjunction (the AND function) of $n$ distinct input signals, $x_1, x_2, \\ldots, x_n$. Due to specific design constraints, the designer is restricted to using 'monotone' logic. A monotone circuit is one constructed exclusively from AND and OR gates; it contains no NOT gates. The available building blocks for the designer are standard gates with a fan-in of two (i.e., each gate takes exactly two inputs). The circuit must output the value '1' if and only if all $n$ input signals are '1'. The designer's goal is to minimize the total number of gates used to implement this function, as this directly impacts the cost and power consumption of the chip. While a simple chain of AND gates provides one possible implementation, it is not immediately obvious if this is the most efficient one, especially since OR gates are also available and inputs can be fanned out to multiple gates. Determine the absolute minimum number of two-input gates required to construct a monotone circuit that computes the logical AND of $n$ variables. Express your answer as a function of $n$.", "solution": "We are to compute $f(x_{1},\\ldots,x_{n})=x_{1}\\wedge x_{2}\\wedge\\cdots\\wedge x_{n}$ using only two-input monotone gates (AND and OR), and we must minimize the total number of gates.\n\nDefine, for every node $v$ in the circuit, its support set $S(v)\\subseteq\\{x_{1},\\ldots,x_{n}\\}$ as the set of input variables on which the Boolean function computed at $v$ actually depends; equivalently, $S(v)$ is the set of inputs that have a directed path to $v$. For an input node $x_{i}$, we have $S(x_{i})=\\{x_{i}\\}$. For any two-input monotone gate $w=u_{1}\\circ u_{2}$ with $\\circ\\in\\{\\wedge,\\vee\\}$, the support satisfies\n$$\nS(w)=S(u_{1})\\cup S(u_{2}),\n$$\nbecause the function at $w$ depends on a variable if and only if at least one of its inputs depends on that variable.\n\nLet $d(v)=|S(v)|$ denote the number of distinct input variables influencing $v$. Then $d(x_{i})=1$ for inputs, and for any gate $w=u_{1}\\circ u_{2}$ we have\n$$\nd(w)=|S(u_{1})\\cup S(u_{2})|\\leq d(u_{1})+d(u_{2}).\n$$\n\nLet $g(v)$ denote the number of gates in the transitive fan-in (the subcircuit) of node $v$. For an input, $g(x_{i})=0$. For a gate $w=u_{1}\\circ u_{2}$, the subcircuit gate count satisfies\n$$\ng(w)=g(u_{1})+g(u_{2})+1.\n$$\nWe claim that for every node $v$,\n$$\ng(v)\\geq d(v)-1.\n$$\nWe prove this by structural induction. For an input $x_{i}$, $g(x_{i})=0$ and $d(x_{i})=1$, so $0\\geq 1-1$ holds. For a gate $w=u_{1}\\circ u_{2}$,\n$$\ng(w)=g(u_{1})+g(u_{2})+1\\geq (d(u_{1})-1)+(d(u_{2})-1)+1=d(u_{1})+d(u_{2})-1\\geq d(w)-1,\n$$\nusing the induction hypothesis and $d(w)\\leq d(u_{1})+d(u_{2})$. This proves the claim.\n\nApply this to the output node $o$ of a circuit computing $f(x_{1},\\ldots,x_{n})=x_{1}\\wedge\\cdots\\wedge x_{n}$. This function depends on all $n$ inputs, so $d(o)=n$. Therefore,\n$$\ng(o)\\geq n-1.\n$$\nThis is a universal lower bound for any two-input monotone circuit computing the $n$-ary AND.\n\nAn upper bound of $n-1$ gates is achieved by a binary tree (or chain) of AND gates that combines the $n$ inputs pairwise until a single output is produced, which uses exactly $n-1$ AND gates. OR gates cannot reduce this count: the lower bound above holds for any mixture of AND and OR gates, since it only uses the fact that supports union under two-input monotone gates.\n\nHence, the absolute minimum number of two-input gates required is $n-1$. For $n=1$, this yields $0$, which is also correct since the output can be wired directly to $x_{1}$ with no gates.", "answer": "$$\\boxed{n-1}$$", "id": "1414757"}, {"introduction": "Having established a basic lower bound technique, we now turn to a more complex and computationally significant problem: detecting a clique in a graph. This practice [@problem_id:1431925] challenges you to construct a monotone formula for a small instance of the CLIQUE problem, revealing a deep connection between the circuit's structure and the underlying graph-theoretic properties of the function. This hands-on construction provides a glimpse into the sophisticated combinatorial arguments used in famous lower bounds for monotone circuits.", "problem": "In the study of computational complexity, the $CLIQUE_{k,n}$ boolean function is a central object of investigation. This function models the problem of finding a $k$-clique (a complete subgraph of size $k$) within a larger graph of $n$ vertices.\n\nConsider a graph with 4 vertices, labeled $\\{1, 2, 3, 4\\}$. The structure of this graph is described by a set of boolean input variables $x_{i,j}$ for $1 \\le i < j \\le 4$. The variable $x_{i,j}$ is 1 if an edge connects vertices $i$ and $j$, and 0 otherwise.\n\nLet $f$ be the boolean function $CLIQUE_{3,4}$, which outputs 1 if and only if the graph defined by the inputs contains a 3-clique (a triangle). A function is said to be monotone if changing any input from 0 to 1 can only change the output from 0 to 1, never from 1 to 0. All $CLIQUE$ functions are monotone. Monotone functions can be represented by formulas using only AND ($\\land$) and OR ($\\lor$) operations, with no NOT ($\\neg$) operations.\n\nA crucial property for graphs on 4 vertices is that such a graph contains a 3-clique if and only if it is not 2-colorable. A graph is defined as 2-colorable (or bipartite) if its set of vertices can be partitioned into two disjoint non-empty subsets, $V_1$ and $V_2$, such that there are no edges connecting any two vertices within $V_1$, and no edges connecting any two vertices within $V_2$.\n\nYour task is to derive the minimal monotone Product-of-Sums (POS) formula for the function $f = CLIQUE_{3,4}$. A POS formula, also known as a Conjunctive Normal Form (CNF) formula, is a conjunction (AND) of clauses, where each clause is a disjunction (OR) of variables. A minimal monotone POS formula is one that correctly represents the function and from which no variable can be removed from any clause, and no clause can be removed from the formula, without changing the function it computes.\n\nBased on your derived formula, determine the total number of literal occurrences. A literal occurrence is a single appearance of a variable in the formula. For example, the formula $(x_{1,2} \\lor x_{1,3}) \\land (x_{1,2})$ has 3 literal occurrences.", "solution": "We label the six edge variables as $x_{i,j}$ for $1 \\leq i < j \\leq 4$, with $x_{i,j}=1$ meaning the edge $\\{i,j\\}$ is present. The function $f=CLIQUE_{3,4}$ is monotone and outputs $1$ exactly when the graph contains a triangle. For graphs on $4$ vertices, a graph contains a triangle if and only if it is not $2$-colorable. Therefore, a monotone POS (CNF) for $f$ can be obtained by forbidding $2$-colorability: for every unordered bipartition $V=V_{1}\\cup V_{2}$ with $V_{1},V_{2}\\neq \\emptyset$, we require at least one edge internal to $V_{1}$ or to $V_{2}$ to be present. Each such bipartition yields the clause\n$$\n\\bigvee_{\\{i,j\\}\\subseteq V_{1}} x_{i,j}\\ \\lor\\ \\bigvee_{\\{i,j\\}\\subseteq V_{2}} x_{i,j}.\n$$\n\nFor $V=\\{1,2,3,4\\}$ there are exactly $7$ unordered bipartitions with nonempty parts: four of type $1\\text{-}3$ and three of type $2\\text{-}2$. Writing out the corresponding clauses gives the minimal monotone POS:\n$$\n\\begin{aligned}\nf \\equiv\\ & (x_{1,2} \\lor x_{1,3} \\lor x_{2,3}) \\land (x_{1,2} \\lor x_{1,4} \\lor x_{2,4}) \\\\\n& \\land (x_{1,3} \\lor x_{1,4} \\lor x_{3,4}) \\land (x_{2,3} \\lor x_{2,4} \\lor x_{3,4}) \\\\\n& \\land (x_{1,2} \\lor x_{3,4}) \\land (x_{1,3} \\lor x_{2,4}) \\land (x_{1,4} \\lor x_{2,3}).\n\\end{aligned}\n$$\n\nCorrectness: If the graph satisfies all clauses, then for every bipartition at least one internal edge exists, so the graph is not $2$-colorable. On $4$ vertices, not $2$-colorable implies the graph contains a triangle, hence $f=1$. Conversely, if the graph contains a triangle on vertices $\\{a,b,c\\}$, then in any bipartition of the vertex set, two of $a,b,c$ must lie in the same part, so at least one of $x_{a,b},x_{a,c},x_{b,c}$ appears in the corresponding clause and is $1$. Therefore all clauses are satisfied and the formula outputs $1$.\n\nMinimality of clauses: No clause can be removed. For a $1\\text{-}3$ clause, say $(x_{1,2} \\lor x_{1,3} \\lor x_{2,3})$, consider the bipartite graph that is the star $K_{1,3}$ with center $4$: set $x_{1,4}=x_{2,4}=x_{3,4}=1$ and $x_{1,2}=x_{1,3}=x_{2,3}=0$. This assignment falsifies that clause and satisfies all others, and $f=0$. Removing the clause would incorrectly accept this input. For a $2\\text{-}2$ clause, e.g., $(x_{1,2} \\lor x_{3,4})$, consider the complete bipartite graph $K_{2,2}$ across $\\{1,2\\}\\mid\\{3,4\\}$: set $x_{1,3}=x_{1,4}=x_{2,3}=x_{2,4}=1$ and $x_{1,2}=x_{3,4}=0$. This falsifies that clause, satisfies all others, and $f=0$. Hence every clause is necessary.\n\nMinimality of literals within clauses: Removing a literal from a clause makes the formula stronger, so to show necessity of each literal it suffices to exhibit a triangle-containing graph for which that clause is satisfied only by that literal. For example, in $(x_{1,2} \\lor x_{1,3} \\lor x_{2,3})$, the graph consisting of triangle $\\{1,2,4\\}$ only (set $x_{1,2}=x_{1,4}=x_{2,4}=1$ and the other three edges $0$) satisfies this clause solely via $x_{1,2}$. Removing $x_{1,2}$ would cause the clause, and therefore the formula, to be false on a true input. Analogous witnesses exist for each literal in every clause (e.g., triangles $\\{1,3,4\\}$ or $\\{2,3,4\\}$ for the other literals, and for a $2\\text{-}2$ clause $(x_{a,b}\\lor x_{c,d})$, triangles containing $\\{a,b\\}$ or $\\{c,d\\}$ witness necessity). Hence no literal can be removed.\n\nCounting literal occurrences: There are four $1\\text{-}3$ clauses, each with $3$ literals, contributing $4 \\times 3 = 12$ occurrences, and three $2\\text{-}2$ clauses, each with $2$ literals, contributing $3 \\times 2 = 6$ occurrences. The total number of literal occurrences is $12+6=18$.", "answer": "$$\\boxed{18}$$", "id": "1431925"}, {"introduction": "We now shift our focus from the specialized world of monotone circuits to the broader class of shallow, general-purpose circuits. The PARITY function is a classic benchmark in complexity theory; it is simple to describe but notoriously difficult for circuits of limited depth. This exercise [@problem_id:1414708] makes this abstract \"hardness\" concrete by guiding you through a calculation of the exponential number of terms required to express PARITY in a depth-2 Disjunctive Normal Form (DNF), a foundational result in circuit complexity.", "problem": "A standard strategy for designing circuits for symmetric Boolean functions is \"divide and conquer.\" For the $n$-bit PARITY function, this involves partitioning the $n$ input variables into $k$ disjoint blocks, each of size $m=n/k$. Let $p_i$ be a boolean variable representing the parity of the $i$-th block of inputs. The overall $n$-bit parity is then equivalent to the $k$-bit parity of these intermediate variables, i.e., $p_1 \\oplus p_2 \\oplus \\cdots \\oplus p_k$.\n\nTo realize this strategy as a single large Disjunctive Normal Form (DNF), which is a type of $\\Sigma_2$ circuit (an OR of ANDs), one can perform the following steps:\n1.  Write the DNF for the $k$-bit parity function using the variables $p_1, \\dots, p_k$.\n2.  For each block $i$, write the DNF for the $m$-bit parity function $p_i$ and its negation $\\neg p_i$ using the original input variables from that block.\n3.  Substitute these block-level DNFs into the main DNF from step 1 and distribute the logical operations to get one final, large DNF over the original input variables $x_1, \\dots, x_n$.\n\nConsider this construction for the $n=12$ bit PARITY function, using a partition into $k=4$ blocks of size $m=3$. Your task is to calculate the total number of literals in the final DNF circuit. The total number of literals is defined as the sum of the lengths of all minterms in this final DNF.", "solution": "Let $n=km$ with $k$ blocks of size $m$. The DNF for the $k$-bit parity over variables $p_{1},\\dots,p_{k}$ has one minterm for each odd-weight assignment, hence the number of top-level minterms is\n$$\nN_{\\text{top}}=2^{k-1},\n$$\nand each top-level minterm has $k$ literals (each $p_{i}$ or $\\neg p_{i}$).\n\nFor each block $i$, the DNF for the $m$-bit parity $p_{i}$ has $2^{m-1}$ minterms, each of length $m$, and the same holds for $\\neg p_{i}$. Therefore, after substituting the block-level DNFs into any fixed top-level minterm (a conjunction of $k$ literals), distributing yields\n$$\nN_{\\text{per top}}=(2^{m-1})^{k}=2^{(m-1)k}\n$$\nfinal minterms, each formed by concatenating one $m$-literal minterm from each block. Hence each final minterm has\n$$\nL_{\\text{final term}}=k\\cdot m=n\n$$\nliterals.\n\nThus the total number of final minterms is\n$$\nN_{\\text{final}}=N_{\\text{top}}\\cdot N_{\\text{per top}}=2^{k-1}\\cdot 2^{(m-1)k}=2^{mk-1}=2^{n-1},\n$$\nand the total number of literals in the final DNF is\n$$\nL_{\\text{total}}=N_{\\text{final}}\\cdot n=n\\cdot 2^{n-1}.\n$$\n\nFor $n=12$ with $k=4$ and $m=3$,\n$$\nL_{\\text{total}}=12\\cdot 2^{11}=12\\cdot 2048=24576.\n$$", "answer": "$$\\boxed{24576}$$", "id": "1414708"}]}