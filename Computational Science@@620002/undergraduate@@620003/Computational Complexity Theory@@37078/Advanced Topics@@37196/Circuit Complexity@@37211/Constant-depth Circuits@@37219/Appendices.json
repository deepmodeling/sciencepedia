{"hands_on_practices": [{"introduction": "Let's begin our hands-on exploration by constructing a circuit for a fundamental symmetric function. This first exercise, [@problem_id:1418868], will guide you through translating a simple, intuitive property—whether all input bits are identical— into the formal structure of a constant-depth circuit. Mastering this process is the first step toward understanding how the unbounded fan-in of AC⁰ gates allows for powerful parallel computation on a simple logical condition.", "problem": "In computational complexity theory, the class AC⁰ represents problems solvable by families of Boolean circuits with constant depth and polynomial size. These circuits are constructed using unbounded fan-in AND gates, unbounded fan-in OR gates, and NOT gates.\n\nConsider the \"Unanimity\" function, $U_n$, which takes an $n$-bit input string $x = x_1x_2...x_n$ and outputs 1 if and only if all input bits are identical (either all 0s or all 1s), and 0 otherwise.\n\nYou are to design an AC⁰ circuit for the Unanimity function $U_n$. For the purpose of this problem, we define the circuit properties as follows:\n- The **size** of a circuit is the total number of gates (AND, OR, and NOT gates combined).\n- The **depth** of a circuit is the maximum number of AND and OR gates on any path from an input variable to the final output gate. NOT gates applied directly to the inputs do not add to the depth.\n\nWhich of the following pairs, representing a (Size, Depth) for your circuit, is correct for any $n \\ge 2$?\n\nA. (Size = $n+3$, Depth = 2)\n\nB. (Size = 3, Depth = 2)\n\nC. (Size = $n+3$, Depth = 3)\n\nD. (Size = $O(n)$, Depth = $O(\\log n)$)\n\nE. (Size = $2n+1$, Depth = 2)", "solution": "We want a Boolean circuit that outputs $1$ if and only if all $n$ input bits are identical. This condition is equivalent to “all bits are $1$” or “all bits are $0$.” In Boolean algebra, for inputs $x_{1},\\dots,x_{n}$, this is expressed as\n$$\nU_{n}(x_{1},\\dots,x_{n})=\\left(\\bigwedge_{i=1}^{n} x_{i}\\right)\\lor\\left(\\bigwedge_{i=1}^{n} \\neg x_{i}\\right).\n$$\nUsing unbounded fan-in AND and OR gates and allowing NOT gates on inputs, we implement:\n- One fan-in-$n$ AND gate computing $\\bigwedge_{i=1}^{n} x_{i}$,\n- One fan-in-$n$ AND gate computing $\\bigwedge_{i=1}^{n} \\neg x_{i}$, which requires $n$ input negations,\n- One fan-in-$2$ OR gate combining the two conditions.\n\nBy the given depth definition (counting only AND/OR gates on any input-to-output path and ignoring NOTs on inputs), the depth is $2$: from an input to the corresponding fan-in-$n$ AND is one AND/OR gate, and to the final OR is a second AND/OR gate. NOT gates on inputs do not add to depth by definition.\n\nThe size counts all gates, including NOT gates. There are $n$ NOT gates (one per input feeding the second AND), $2$ AND gates, and $1$ OR gate. Hence the total size is $n+3$.\n\nTherefore, a correct (Size, Depth) pair for this circuit for any $n \\ge 2$ is $(n+3, 2)$, which corresponds to option A.", "answer": "$$\\boxed{A}$$", "id": "1418868"}, {"introduction": "Having built a circuit for a unanimity condition, we now move to a slightly more complex task involving a basic form of counting. The Threshold-2 function, which we explore in this practice [@problem_id:1418903], checks if at least two inputs are active. This problem requires a shift in thinking from a single global property to checking a multitude of local conditions in parallel, demonstrating how AC⁰ circuits can efficiently compute simple threshold functions.", "problem": "In computational complexity theory, the class **AC⁰** (Alternating Circuits, constant depth) consists of families of circuits $\\{C_n\\}_{n \\in \\mathbb{N}}$, one for each input size $n$, that satisfy two conditions: the size of $C_n$ is bounded by a polynomial in $n$, and the depth of $C_n$ is a constant, independent of $n$. These circuits are built from AND and OR gates with unbounded fan-in (i.e., they can have any number of inputs) and NOT gates which are only applied directly to the circuit inputs. The size of a circuit is its total number of gates, and its depth is the length of the longest path from any input variable to the output gate.\n\nConsider the threshold-2 function, denoted $T_2^n(x_1, \\dots, x_n)$, which takes $n$ boolean inputs and outputs 1 if and only if at least two of the inputs are 1. Your task is to design a family of circuits $\\{C_n\\}_{n \\in \\mathbb{N}}$ within the class AC⁰ that computes the $T_2^n$ function.\n\nDetermine the exact size and depth of your proposed circuit $C_n$. Express the size as a simplified polynomial in $n$ and the depth as an integer. Provide your answer as an ordered pair (Size, Depth).", "solution": "We want a constant-depth, polynomial-size circuit over unbounded fan-in AND/OR gates (and NOT gates allowed only on inputs) that computes the threshold-2 function $T_{2}^{n}(x_{1},\\dots,x_{n})$, which is $1$ if and only if at least two inputs are $1$.\n\nDefine the following circuit family. For each $n$, introduce, for every unordered pair of distinct indices $(i,j)$ with $1 \\leq i < j \\leq n$, an AND gate\n$$\nA_{i,j} \\;=\\; x_{i} \\wedge x_{j}.\n$$\nFeed all these $A_{i,j}$ into a single OR gate at the output:\n$$\nC_{n}(x_{1},\\dots,x_{n}) \\;=\\; \\bigvee_{1 \\leq i < j \\leq n} \\left(x_{i} \\wedge x_{j}\\right).\n$$\n\nCorrectness: If at least two inputs are $1$, then there exist indices $i<j$ with $x_{i}=1$ and $x_{j}=1$, which makes $A_{i,j}=1$ and hence the final OR outputs $1$. Conversely, if the final OR outputs $1$, then some $A_{i,j}=1$, implying $x_{i}=x_{j}=1$, so there are at least two $1$’s among the inputs. If there are fewer than two $1$’s, then every conjunction $x_{i}\\wedge x_{j}$ is $0$, and the OR outputs $0$. Therefore\n$$\nC_{n}(x_{1},\\dots,x_{n}) \\;=\\; T_{2}^{n}(x_{1},\\dots,x_{n}).\n$$\n\nDepth: Each input $x_{k}$ feeds into some AND gate $A_{i,j}$ (depth $1$), and all $A_{i,j}$ feed directly into the single OR output gate (depth $2$). Because fan-in is unbounded, no additional layers are needed. Thus the depth is exactly $2$, a constant independent of $n$.\n\nSize: The number of AND gates equals the number of unordered pairs of inputs, which is $\\binom{n}{2}$. There is one additional OR gate at the top. Hence the total number of gates is\n$$\nS(n) \\;=\\; \\binom{n}{2} + 1 \\;=\\; \\frac{n(n-1)}{2} + 1 \\;=\\; \\frac{n^{2}-n+2}{2}.\n$$\nThis is a polynomial in $n$, as required. No NOT gates are used beyond inputs, satisfying the AC⁰ model.\n\nTherefore, the circuit family $\\{C_{n}\\}$ lies in AC⁰ with exact size $\\frac{n^{2}-n+2}{2}$ and exact depth $2$.", "answer": "$$\\boxed{\\begin{pmatrix}\\frac{n^{2}-n+2}{2} & 2\\end{pmatrix}}$$", "id": "1418903"}, {"introduction": "After successfully building circuits for specific functions, it is crucial to understand the inherent limitations of a computational model. This final practice explores the PARITY function, which seems deceptively simple but reveals a fundamental barrier for shallow circuits. In this exercise, [@problem_id:1418880], you will not build a circuit but rather prove that any simple depth-2 representation for PARITY must be exponentially large, uncovering one of the most celebrated results in circuit complexity.", "problem": "In computational complexity theory, a Boolean function can be represented by various logical formulas. A formula is in Disjunctive Normal Form (DNF) if it is an OR of one or more clauses, where each clause is an AND of one or more literals. A literal is either a variable $x_i$ or its negation $\\neg x_i$. For example, if we have variables $x_1, x_2, x_3$, the expression $(x_1 \\land \\neg x_2) \\lor (\\neg x_3)$ is a DNF with two clauses. The size of a DNF formula is commonly measured by the number of clauses it contains.\n\nConsider the $n$-variable PARITY function, denoted $\\text{PARITY}_n(x_1, \\dots, x_n)$, which outputs $1$ if the number of input variables with the value $1$ is odd, and outputs $0$ otherwise.\n\nWhat is the minimum number of clauses required for any DNF formula that correctly represents the $\\text{PARITY}_n$ function for $n \\ge 1$? Express your answer as a function of $n$.", "solution": "Let $f=\\text{PARITY}_{n}$, where for any $x=(x_{1},\\dots,x_{n})\\in\\{0,1\\}^{n}$,\n$$\nf(x)=\\left(\\sum_{i=1}^{n} x_{i}\\right)\\bmod 2.\n$$\nA DNF clause on variables $x_{1},\\dots,x_{n}$ has the form\n$$\nC=\\bigwedge_{i\\in P} x_{i}\\ \\wedge\\ \\bigwedge_{j\\in N} \\neg x_{j},\n$$\nfor some disjoint index sets $P,N\\subseteq [n]$, and it fixes $k=|P|+|N|$ variables, leaving $n-k$ variables free. The satisfying assignments of $C$ form a subcube of dimension $n-k$.\n\nKey property of parity: flipping any single variable toggles the parity. Formally, for any $\\ell\\in[n]$ and any assignment $x$, letting $x^{(\\ell)}$ be $x$ with the $\\ell$th bit flipped, we have\n$$\nf\\bigl(x^{(\\ell)}\\bigr)=f(x)+1 \\pmod{2}.\n$$\nTherefore, any subcube of dimension at least $1$ (i.e., any clause with $k<n$ literals) contains two satisfying assignments $x$ and $x^{(\\ell)}$ with opposite parity values. Hence such a clause is satisfied by at least one negative example of $f$, and including it in a DNF would force the DNF to output $1$ on that negative example, contradicting correctness.\n\nIt follows that every clause in any correct DNF for $f$ must have $k=n$, i.e., be a minterm fixing all variables. Each such clause corresponds to exactly one assignment. To output $1$ exactly on the odd-parity assignments, the DNF must include a distinct clause for each odd-parity assignment. The number of odd-parity assignments is\n$$\n\\sum_{\\substack{t=0 \\\\ t\\ \\text{odd}}}^{n} \\binom{n}{t}=\\frac{(1+1)^{n}-(1-1)^{n}}{2}=2^{n-1}.\n$$\nA DNF achieving this bound is the disjunction of all $2^{n-1}$ minterms corresponding to odd Hamming-weight assignments. Therefore, the minimum number of clauses required is exactly $2^{n-1}$ for all $n\\ge 1$.", "answer": "$$\\boxed{2^{n-1}}$$", "id": "1418880"}]}