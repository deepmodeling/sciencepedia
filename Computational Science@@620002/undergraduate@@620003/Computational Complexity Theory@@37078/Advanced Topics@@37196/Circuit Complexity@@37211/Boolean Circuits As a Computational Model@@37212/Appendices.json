{"hands_on_practices": [{"introduction": "The foundation of digital computation lies in representing and manipulating numbers using logic gates. This first exercise provides a concrete starting point by tasking you with designing a circuit that performs a familiar arithmetic operation: squaring a number. By translating the input-output behavior of this function into a truth table and then deriving the corresponding Boolean expressions, you will practice the fundamental skill of converting an abstract function into a tangible logic blueprint [@problem_id:1413466].", "problem": "Consider a digital circuit designed to compute the square of a 2-bit non-negative integer. The input is a 2-bit binary number, represented by the bits $x_1x_0$, which corresponds to the integer value $V = 2x_1 + x_0$. The circuit's output is a 4-bit binary number, represented by the bits $y_3y_2y_1y_0$, which corresponds to the integer value $V^2 = 8y_3 + 4y_2 + 2y_1 + y_0$.\n\nEach output bit $y_i$ can be expressed as a Boolean function of the input bits $x_1$ and $x_0$. Your task is to find the minimal representation for each of these four functions. Specifically, you must determine the minimal Disjunctive Normal Form (DNF) for each function $y_3, y_2, y_1,$ and $y_0$. A minimal DNF is defined as a DNF expression that contains the minimum possible total number of literals. A literal is a variable or its negation (e.g., $x_1$ and $\\neg x_0$ are both literals).\n\nCalculate the total number of literals present in the minimal DNF representations for all four output functions combined.", "solution": "Let the input bits be $x_{1},x_{0}\\in\\{0,1\\}$ with $V=2x_{1}+x_{0}$. The output bits $y_{3}y_{2}y_{1}y_{0}$ encode $V^{2}$ with $V^{2}=8y_{3}+4y_{2}+2y_{1}+y_{0}$. Evaluate $V^{2}$ for all four input combinations:\n- For $(x_{1},x_{0})=(0,0)$, $V=0$ so $V^{2}=0\\Rightarrow y_{3}y_{2}y_{1}y_{0}=0000$.\n- For $(x_{1},x_{0})=(0,1)$, $V=1$ so $V^{2}=1\\Rightarrow y_{3}y_{2}y_{1}y_{0}=0001$.\n- For $(x_{1},x_{0})=(1,0)$, $V=2$ so $V^{2}=4\\Rightarrow y_{3}y_{2}y_{1}y_{0}=0100$.\n- For $(x_{1},x_{0})=(1,1)$, $V=3$ so $V^{2}=9\\Rightarrow y_{3}y_{2}y_{1}y_{0}=1001$.\n\nRead off each output bit as a Boolean function of $x_{1},x_{0}$ and minimize to DNF (disjunction of conjunctions of literals):\n1. For $y_{0}$: values are $0,1,0,1$ for inputs $(00,01,10,11)$, respectively. This equals the parity of $V$, which is exactly $x_{0}$. The minimal DNF is\n$$\ny_{0}=x_{0},\n$$\nwhich has $1$ literal.\n\n2. For $y_{1}$: values are always $0$. The minimal DNF is the constant\n$$\ny_{1}=0,\n$$\nwhich uses $0$ literals.\n\n3. For $y_{2}$: it is $1$ only for $(x_{1},x_{0})=(1,0)$. The unique prime implicant is the minterm\n$$\ny_{2}=x_{1}\\land\\lnot x_{0},\n$$\nwhich has $2$ literals and cannot be reduced further because it covers a single isolated $1$.\n\n4. For $y_{3}$: it is $1$ only for $(x_{1},x_{0})=(1,1)$. The unique prime implicant is the minterm\n$$\ny_{3}=x_{1}\\land x_{0},\n$$\nwhich has $2$ literals and is already minimal.\n\nSumming the numbers of literals in the minimal DNFs: $1+0+2+2=5$.", "answer": "$$\\boxed{5}$$", "id": "1413466"}, {"introduction": "While abstract designs often use a variety of gates like AND, OR, and NOT, real-world electronics frequently rely on a single \"universal\" gate type for simplicity in manufacturing. This practice challenges you to implement a 2-to-1 multiplexer, a fundamental building block in computing, using only 2-input NAND gates. Beyond mere implementation, this problem pushes you to think about optimization by finding the absolute minimum number of gates required, introducing the concepts of functional completeness and circuit minimization [@problem_id:1413448].", "problem": "In digital logic design and computational theory, a set of logic gates is called \"functionally complete\" if any arbitrary Boolean function can be expressed using only gates from that set. The 2-input NAND gate, defined as $x \\text{ NAND } y = \\neg(x \\land y)$, forms one such functionally complete set.\n\nConsider the 2-to-1 Multiplexer (MUX), a fundamental component in digital circuits. A MUX selects one of several analog or digital input signals and forwards the selected input into a single line. A 2-to-1 MUX has two data inputs, $a$ and $b$, one selector input, $s$, and one output, $f$. The logical behavior is defined by the Boolean function:\n$$f(s, a, b) = (\\neg s \\land a) \\lor (s \\land b)$$\nThis means if $s=0$, the output is $a$; if $s=1$, the output is $b$.\n\nYour task is to determine the minimum number of 2-input NAND gates required to implement this 2-to-1 MUX function $f(s, a, b)$.\n\nWhich of the following represents the minimum number of gates?\n\nA. 3\n\nB. 4\n\nC. 5\n\nD. 6\n\nE. 7", "solution": "We want to realize the 2-to-1 MUX function\n$$\nf(s,a,b)=(\\neg s \\land a)\\lor(s\\land b)\n$$\nusing only 2-input NAND gates, where $\\operatorname{NAND}(x,y)=\\neg(x\\land y)$.\n\nSynthesis with four NAND gates (showing it suffices):\n1) Generate the complement of the select input using the self-NAND identity:\n$$\n\\neg s=\\operatorname{NAND}(s,s)=\\neg(s\\land s).\n$$\n2) Form the two product terms in complemented (NAND) form:\n$$\nx=\\operatorname{NAND}(a,\\neg s)=\\neg(a\\land\\neg s),\\qquad y=\\operatorname{NAND}(b,s)=\\neg(b\\land s).\n$$\n3) Combine them with a final NAND:\n$$\nf=\\operatorname{NAND}(x,y)=\\neg(x\\land y)=\\neg\\big(\\neg(a\\land\\neg s)\\land\\neg(b\\land s)\\big).\n$$\nUsing De Morganâ€™s law $\\neg(\\neg P\\land\\neg Q)=P\\lor Q$, this becomes\n$$\nf=(a\\land\\neg s)\\lor(b\\land s),\n$$\nwhich is exactly the desired MUX function. The construction uses four NAND gates: one for $\\neg s$, one for $x$, one for $y$, and one final gate for $f$.\n\nProof of minimality (why three NAND gates are insufficient):\nAssume, for contradiction, that $f$ is implementable with only three 2-input NAND gates. Then the output must be the NAND of the outputs of the other two gates:\n$$\nf=\\operatorname{NAND}(X,Y)=\\neg(X\\land Y).\n$$\nBecause $f$ depends on both $a$ and $b$, without loss of generality each of the two predecessor gates must include $a$ in one and $b$ in the other. Hence there exist signals $u$ and $v$ (functions of $s,a,b$) such that\n$$\nX=\\operatorname{NAND}(a,u)=\\neg(a\\land u),\\qquad Y=\\operatorname{NAND}(b,v)=\\neg(b\\land v).\n$$\nTherefore,\n$$\nf=\\neg\\big(\\neg(a\\land u)\\land\\neg(b\\land v)\\big)=(a\\land u)\\lor(b\\land v).\n$$\nNow enforce equality with the MUX for all inputs:\n- Set $a=1$ and $b=0$. The MUX gives $f=\\neg s$. The expression above reduces to $f=u$. Hence $u=\\neg s$.\n- Set $a=0$ and $b=1$. The MUX gives $f=s$. The expression reduces to $f=v$. Hence $v=s$.\nThus the two predecessor gates must effectively compute $\\operatorname{NAND}(a,\\neg s)$ and $\\operatorname{NAND}(b,s)$, requiring both $s$ and $\\neg s$ to be available. Since only $s$ is a primary input, producing $\\neg s$ needs at least one NAND gate (specifically, $\\operatorname{NAND}(s,s)$). With only three gates total, one gate is the final NAND, one gate must invert $s$, leaving only one gate to produce both $\\operatorname{NAND}(a,\\neg s)$ and $\\operatorname{NAND}(b,s)$, which is impossible with 2-input NANDs. This contradiction shows three NAND gates do not suffice.\n\nTherefore, the minimum number of 2-input NAND gates required is four, which corresponds to option B.", "answer": "$$\\boxed{B}$$", "id": "1413448"}, {"introduction": "As we move from designing small components to analyzing larger systems, efficiency becomes paramount. This practice demonstrates that the choice of architecture can lead to vastly different circuit sizes for the same function. You will analyze and compare two implementations of the $n$-bit parity function: one derived directly from its canonical Disjunctive Normal Form (DNF) and another using a clever tree of XOR gates. This comparison vividly illustrates the power of structured design and provides a crucial insight into why circuit complexity is a critical field of study [@problem_id:1413469].", "problem": "In the study of computational complexity, Boolean circuits provide a formal model for digital logic. Consider the design of circuits to compute the $n$-bit parity function, $\\text{PARITY}_n(x_1, \\dots, x_n)$, which outputs 1 if the number of 1s in the input string is odd, and 0 otherwise.\n\nAll circuits are to be constructed using a basis of 2-input AND gates and 2-input OR gates. The size of a circuit is defined as the total number of these gates. For the purpose of circuit construction, you may assume that for each input variable $x_i$, its negation $\\neg x_i$ is also available as an input at no cost (i.e., NOT gates for inputs are not counted towards the circuit size).\n\nWe will compare the size of two different implementations for the parity function. Let $S_{\\text{XOR}}(n)$ be the size of the first implementation and $S_{\\text{DNF}}(n)$ be the size of the second.\n\n1.  **XOR Tree Implementation:** The parity function is equivalent to the chained exclusive OR (XOR) of its inputs: $x_1 \\oplus x_2 \\oplus \\dots \\oplus x_n$. This structure can be realized using a balanced binary tree of $n-1$ two-input XOR gates. Each two-input XOR gate, $a \\oplus b$, can be built from the standard basis using the identity $a \\oplus b \\equiv (a \\land \\neg b) \\lor (\\neg a \\land b)$.\n\n2.  **Canonical DNF Implementation:** The function is implemented by first expressing it in its canonical Disjunctive Normal Form (DNF). The canonical DNF is the logical OR of all minterms that cause the function to evaluate to 1. A minterm is a logical AND of all $n$ input literals (e.g., $x_1 \\land \\neg x_2 \\land \\dots \\land x_n$ for $n>2$). The circuit is then constructed to realize this DNF expression using trees of AND and OR gates.\n\nDetermine the ratio of the circuit sizes, $\\frac{S_{\\text{DNF}}(n)}{S_{\\text{XOR}}(n)}$, for $n \\ge 2$. Express your answer as a closed-form analytic expression in terms of $n$.", "solution": "The problem asks for the ratio of circuit sizes for two different implementations of the $n$-bit parity function, $S_{\\text{DNF}}(n) / S_{\\text{XOR}}(n)$. We need to calculate the size of each circuit separately. The circuit size is the total count of 2-input AND gates and 2-input OR gates. We assume input variables $x_i$ and their negations $\\neg x_i$ are available for free.\n\n**Step 1: Calculate the size of the XOR Tree Implementation, $S_{\\text{XOR}}(n)$**\n\nThe first implementation uses a balanced binary tree of $n-1$ two-input XOR gates to compute $x_1 \\oplus x_2 \\oplus \\dots \\oplus x_n$. We need to find the size of a single 2-input XOR gate, $a \\oplus b$, built from our basis gates.\n\nThe problem gives the identity: $a \\oplus b \\equiv (a \\land \\neg b) \\lor (\\neg a \\land b)$.\nTo implement this expression, we need:\n- One AND gate for the term $(a \\land \\neg b)$.\n- One AND gate for the term $(\\neg a \\land b)$.\n- One OR gate to combine the two terms: $(a \\land \\neg b) \\lor (\\neg a \\land b)$.\n\nThe inputs $a$, $\\neg a$, $b$, and $\\neg b$ are available without cost. Thus, a single 2-input XOR gate requires 2 AND gates and 1 OR gate, for a total of 3 gates.\n\nThe entire circuit consists of $n-1$ of these XOR gates. Therefore, the total size of the XOR tree implementation is:\n$$S_{\\text{XOR}}(n) = (n-1) \\times (\\text{size of one XOR gate}) = 3(n-1)$$\n\n**Step 2: Calculate the size of the Canonical DNF Implementation, $S_{\\text{DNF}}(n)$**\n\nThe DNF implementation is built from the canonical Disjunctive Normal Form of the parity function. This form consists of an OR of all minterms corresponding to inputs for which the function is 1.\n\nFirst, we must determine the number of such minterms. The parity function is 1 if and only if the number of 1s in the input string $(x_1, \\dots, x_n)$ is odd. The number of $n$-bit strings with exactly $k$ ones is given by the binomial coefficient $\\binom{n}{k}$. The total number of minterms, $N_{\\text{minterms}}$, is the sum of these counts over all odd values of $k$:\n$$N_{\\text{minterms}} = \\binom{n}{1} + \\binom{n}{3} + \\binom{n}{5} + \\dots$$\n\nTo evaluate this sum, we use the binomial expansion of $(1+x)^n$:\n$$(1+x)^n = \\sum_{k=0}^{n} \\binom{n}{k} x^k = \\binom{n}{0} + \\binom{n}{1}x + \\binom{n}{2}x^2 + \\dots$$\nSetting $x=1$ gives: $2^n = \\binom{n}{0} + \\binom{n}{1} + \\binom{n}{2} + \\dots$\nSetting $x=-1$ gives: $0^n = \\binom{n}{0} - \\binom{n}{1} + \\binom{n}{2} - \\dots$ (for $n \\ge 1$)\n\nSubtracting the second equation from the first:\n$$2^n - 0 = \\left(\\binom{n}{0} + \\binom{n}{1} + \\dots\\right) - \\left(\\binom{n}{0} - \\binom{n}{1} + \\dots\\right)$$\n$$2^n = 2\\binom{n}{1} + 2\\binom{n}{3} + 2\\binom{n}{5} + \\dots = 2 \\times N_{\\text{minterms}}$$\nTherefore, the number of minterms is $N_{\\text{minterms}} = 2^{n-1}$.\n\nNow we calculate the number of gates required to implement this DNF. The DNF is an OR of $2^{n-1}$ minterms. Each minterm is an AND of $n$ literals.\n- **AND gates for minterms:** Each minterm is a conjunction of $n$ literals. To compute an $n$-input AND using 2-input AND gates, we need a binary tree of $n-1$ gates. Since there are $N_{\\text{minterms}} = 2^{n-1}$ such minterms, the total number of AND gates is:\n$$(\\text{gates per minterm}) \\times (\\text{number of minterms}) = (n-1) \\times 2^{n-1}$$\n- **OR gates for the final disjunction:** The DNF is a disjunction of $N_{\\text{minterms}} = 2^{n-1}$ terms (the outputs of the AND sub-circuits). To compute an OR of $2^{n-1}$ inputs using 2-input OR gates, we need a binary tree of $2^{n-1}-1$ gates.\n\nThe total size of the DNF circuit is the sum of the AND gates and OR gates:\n$$S_{\\text{DNF}}(n) = (n-1)2^{n-1} + (2^{n-1}-1)$$\nWe can simplify this expression:\n$$S_{\\text{DNF}}(n) = n \\cdot 2^{n-1} - 2^{n-1} + 2^{n-1} - 1 = n \\cdot 2^{n-1} - 1$$\n\n**Step 3: Calculate the Ratio**\n\nFinally, we compute the ratio $\\frac{S_{\\text{DNF}}(n)}{S_{\\text{XOR}}(n)}$.\n$$ \\frac{S_{\\text{DNF}}(n)}{S_{\\text{XOR}}(n)} = \\frac{n \\cdot 2^{n-1} - 1}{3(n-1)} $$\nThis expression is valid for $n \\ge 2$.", "answer": "$$\\boxed{\\frac{n \\cdot 2^{n-1} - 1}{3(n-1)}}$$", "id": "1413469"}]}