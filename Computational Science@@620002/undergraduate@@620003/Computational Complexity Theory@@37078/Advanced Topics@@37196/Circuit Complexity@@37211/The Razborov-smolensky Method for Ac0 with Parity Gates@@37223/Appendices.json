{"hands_on_practices": [{"introduction": "The first step in applying algebraic methods to circuit complexity is to translate the behavior of Boolean gates into the language of polynomials. By mapping Boolean values `FALSE` and `TRUE` to the field elements $0$ and $1$, we can find a polynomial that perfectly mimics a gate's input-output behavior. This exercise [@problem_id:1461830] provides a foundational starting point for this powerful technique by asking you to find the unique, simple polynomial that represents the logical NOT gate over any prime field.", "problem": "In theoretical computer science, a powerful technique for analyzing the complexity of Boolean functions involves representing them as polynomials over finite fields. This algebraic approach provides insights into the limitations of certain computational models.\n\nConsider the finite field $F_p$, which consists of the set of integers $\\{0, 1, 2, \\dots, p-1\\}$ with addition and multiplication performed modulo a prime number $p$. We can represent the Boolean values `FALSE` and `TRUE` by the field elements 0 and 1, respectively.\n\nYour task is to find the unique polynomial $P(x)$ of degree at most 1, with integer coefficients, that correctly represents the Boolean NOT gate for any prime $p$. This means the polynomial must satisfy the following conditions for any input $x \\in \\{0, 1\\}$:\n- $P(0) = 1$ (representing NOT `FALSE` = `TRUE`)\n- $P(1) = 0$ (representing NOT `TRUE` = `FALSE`)\n\nDetermine the expression for this polynomial $P(x)$. Your answer should be a polynomial in the variable $x$.", "solution": "We seek a polynomial of degree at most 1 with integer coefficients that represents the Boolean NOT over every finite field $F_{p}$. Let $P(x)=ax+b$ with $a,b\\in \\mathbb{Z}$. The required truth table constraints are:\n$$\nP(0)=1,\\quad P(1)=0.\n$$\nEvaluating $P(0)$ gives:\n$$\nP(0)=b.\n$$\nThe requirement $P(0)=1$ in $F_{p}$ for every prime $p$ means $b\\equiv 1 \\pmod{p}$ for all primes $p$. The only integer that is congruent to $1$ modulo every prime is $b=1$. Thus,\n$$\nb=1.\n$$\nNext, evaluate $P(1)$:\n$$\nP(1)=a+b=a+1.\n$$\nThe requirement $P(1)=0$ in $F_{p}$ for every prime $p$ means $a+1\\equiv 0 \\pmod{p}$ for all primes $p$. The only integer divisible by every prime is $0$, hence\n$$\na+1=0 \\quad \\Rightarrow \\quad a=-1.\n$$\nTherefore,\n$$\nP(x)=1-x.\n$$\nVerification over any $F_{p}$: for $x\\in\\{0,1\\}$, $P(0)=1$ and $P(1)=0$, as required. Uniqueness follows because a degree-at-most-1 polynomial is determined by its values at two distinct points; the above congruence conditions across all primes force $a=-1$ and $b=1$ uniquely in $\\mathbb{Z}$.", "answer": "$$\\boxed{1-x}$$", "id": "1461830"}, {"introduction": "When combining polynomials to represent larger circuits, we often generate expressions with variables raised to powers greater than one, such as $x_1^2$ or $x_2^3$. However, since the inputs to our original Boolean functions are restricted to $\\{0, 1\\}$, any power of a variable $x^k$ (for $k \\ge 1$) behaves identically to $x$ itself. This exercise [@problem_id:1461881] introduces the essential simplification technique of multilinearization, which allows us to convert any polynomial into a unique, equivalent form where no variable has a power greater than one. Mastering this process is crucial for managing the complexity of polynomials in this context and for defining their degree in a meaningful way.", "problem": "In the study of computational complexity, particularly in proving circuit lower bounds, boolean functions are often represented by polynomials over finite fields. Consider polynomials in variables $x_1, x_2, x_3$ over the finite field $F_3 = \\{0, 1, 2\\}$, where arithmetic is performed modulo 3. These polynomials are evaluated on inputs from the boolean cube, meaning for any input vector $v = (v_1, v_2, v_3)$, each component $v_i$ is in $\\{0, 1\\}$.\n\nA polynomial is called multilinear if in every monomial (term), the power of each variable is at most one. For example, $x_1x_2 + 2x_3$ is multilinear, but $x_1^2 + x_2$ is not. For any polynomial $P$ over $F_3$, there exists a unique equivalent multilinear polynomial $P'$ such that $P(v) = P'(v)$ for all $v \\in \\{0, 1\\}^3$.\n\nGiven the polynomial $P(x_1, x_2, x_3) = 2x_1^3x_2 + x_1^2x_2x_3^2 + 2x_2^2 + x_3$, determine its equivalent multilinear polynomial $P'(x_1, x_2, x_3)$. Your answer should be an expression for $P'$ with coefficients written as elements of $F_3$.", "solution": "We work over the field $F_{3}$ and evaluate polynomials on inputs from $\\{0,1\\}^{3}$. For any Boolean variable $x \\in \\{0,1\\}$, one has $x^{2} = x$. By induction, this implies $x^{m} = x$ for every integer $m \\geq 1$. Therefore, to obtain the unique multilinear representative of a polynomial on the Boolean cube, we replace every power $x_{i}^{m}$ with $x_{i}$ for $m \\geq 1$ and reduce coefficients modulo $3$.\n\nApply this reduction term by term to\n$$\nP(x_{1},x_{2},x_{3})=2x_{1}^{3}x_{2}+x_{1}^{2}x_{2}x_{3}^{2}+2x_{2}^{2}+x_{3}.\n$$\nUsing $x_{1}^{3}=x_{1}$, $x_{1}^{2}=x_{1}$, $x_{3}^{2}=x_{3}$, and $x_{2}^{2}=x_{2}$ on $\\{0,1\\}^{3}$, we obtain\n$$\n2x_{1}^{3}x_{2} \\equiv 2x_{1}x_{2},\\qquad\nx_{1}^{2}x_{2}x_{3}^{2} \\equiv x_{1}x_{2}x_{3},\\qquad\n2x_{2}^{2} \\equiv 2x_{2},\\qquad\nx_{3} \\equiv x_{3}.\n$$\nTherefore, the unique equivalent multilinear polynomial is\n$$\nP'(x_{1},x_{2},x_{3})=2x_{1}x_{2}+x_{1}x_{2}x_{3}+2x_{2}+x_{3},\n$$\nwith all coefficients in $F_{3}$.", "answer": "$$\\boxed{2x_{1}x_{2}+x_{1}x_{2}x_{3}+2x_{2}+x_{3}}$$", "id": "1461881"}, {"introduction": "While simple gates can have exact low-degree polynomial representations, more complex functions often do not. The power of the Razborov-Smolensky method comes from using polynomials that *approximate* a target function with high probability. In this exercise [@problem_id:1461880], you will construct such a probabilistic polynomial for the AND gate. By creatively applying De Morgan's laws and composing the known polynomial representations for the NOT and OR gates, you will gain hands-on experience with the probabilistic constructions that are central to proving modern circuit lower bounds.", "problem": "In the study of circuit lower bounds using the Razborov-Smolensky method, boolean functions are approximated by low-degree polynomials over a finite field. Consider computations over the finite field $F_3 = \\{0, 1, 2\\}$, which consists of integers modulo 3. In this context, the boolean values `False` and `True` are encoded as the field elements $0$ and $1$, respectively. The negation of a boolean variable $x \\in \\{0, 1\\}$ is represented by the polynomial $1-x$.\n\nA probabilistic polynomial used to approximate the 2-input OR function ($x_1 \\lor x_2$) is given by:\n$$P_{OR}(x_1, x_2; r_1, r_2) = 1 - (1 - r_1 x_1 - r_2 x_2)^2$$\nwhere $x_1, x_2 \\in \\{0, 1\\}$ are the inputs and $r_1, r_2$ are random coefficients chosen independently and uniformly from $F_3$.\n\nYour task is to construct the corresponding probabilistic polynomial, $P_{AND}(x_1, x_2; s_1, s_2)$, that approximates the 2-input AND function ($x_1 \\land x_2$). To do this, you must use De Morgan's Law, $x_1 \\land x_2 = \\neg(\\neg x_1 \\lor \\neg x_2)$, applied to the given polynomial structures for OR and negation. For the new polynomial, use a fresh set of independent random coefficients $s_1, s_2$, also chosen uniformly from $F_3$.\n\nProvide the resulting polynomial $P_{AND}(x_1, x_2; s_1, s_2)$ in its fully expanded form as a polynomial in the variables $x_1$ and $x_2$. All numerical coefficients in your final expression must be reduced modulo 3 and represented by elements in $\\{0, 1, 2\\}$.", "solution": "We work over the field $F_{3}$ with boolean encoding $0,1$ and negation $\\neg x=1-x$. The given probabilistic polynomial for OR is\n$$\nP_{OR}(x_{1},x_{2};r_{1},r_{2})=1-\\bigl(1-r_{1}x_{1}-r_{2}x_{2}\\bigr)^{2}.\n$$\nBy De Morganâ€™s Law, $x_{1}\\land x_{2}=\\neg(\\neg x_{1}\\lor\\neg x_{2})$, so using fresh independent $s_{1},s_{2}\\in F_{3}$ we define\n$$\nP_{AND}(x_{1},x_{2};s_{1},s_{2}) \\;=\\; 1 - P_{OR}(1-x_{1},\\,1-x_{2};\\,s_{1},s_{2})\n\\;=\\; \\bigl(1 - s_{1}(1-x_{1}) - s_{2}(1-x_{2})\\bigr)^{2}.\n$$\nLet $c_{0}=1-s_{1}-s_{2}$, so the inner linear form is $c_{0}+s_{1}x_{1}+s_{2}x_{2}$. Then\n$$\nP_{AND}=(c_{0}+s_{1}x_{1}+s_{2}x_{2})^{2}\n= c_{0}^{2} + s_{1}^{2}x_{1}^{2} + s_{2}^{2}x_{2}^{2} + 2c_{0}s_{1}x_{1} + 2c_{0}s_{2}x_{2} + 2s_{1}s_{2}x_{1}x_{2}.\n$$\nSince inputs are boolean, we use $x_{i}^{2}=x_{i}$ on $\\{0,1\\}$ to multilinearize:\n$$\nP_{AND} = c_{0}^{2} + (s_{1}^{2} + 2c_{0}s_{1})x_{1} + (s_{2}^{2} + 2c_{0}s_{2})x_{2} + (2s_{1}s_{2})x_{1}x_{2}.\n$$\nNow expand $c_{0}$ and reduce all numerical coefficients modulo $3$. First,\n$$\nc_{0}^{2}=(1-s_{1}-s_{2})^{2} = 1 + s_{1}^{2} + s_{2}^{2} + s_{1} + s_{2} + 2s_{1}s_{2},\n$$\nbecause $-2\\equiv 1 \\pmod{3}$. Next,\n$$\n2c_{0}s_{1} = 2s_{1}(1-s_{1}-s_{2}) = 2s_{1} + s_{1}^{2} + s_{1}s_{2},\n$$\nand similarly\n$$\n2c_{0}s_{2} = 2s_{2}(1-s_{1}-s_{2}) = 2s_{2} + s_{2}^{2} + s_{1}s_{2}.\n$$\nTherefore the coefficients of $x_{1}$ and $x_{2}$ are\n$$\ns_{1}^{2} + 2c_{0}s_{1} = 2s_{1}^{2} + 2s_{1} + s_{1}s_{2}, \\qquad\ns_{2}^{2} + 2c_{0}s_{2} = 2s_{2}^{2} + 2s_{2} + s_{1}s_{2},\n$$\nand the coefficient of $x_{1}x_{2}$ is $2s_{1}s_{2}$. Collecting terms, the fully expanded polynomial over $F_{3}$ is\n$$\nP_{AND}(x_{1},x_{2};s_{1},s_{2})\n= \\bigl(1 + s_{1} + s_{2} + s_{1}^{2} + s_{2}^{2} + 2s_{1}s_{2}\\bigr)\n+ \\bigl(2s_{1}^{2} + 2s_{1} + s_{1}s_{2}\\bigr)x_{1}\n+ \\bigl(2s_{2}^{2} + 2s_{2} + s_{1}s_{2}\\bigr)x_{2}\n+ \\bigl(2s_{1}s_{2}\\bigr)x_{1}x_{2},\n$$\nwith all numerical coefficients in $\\{0,1,2\\}$ modulo $3$ as required.", "answer": "$$\\boxed{1 + s_{1} + s_{2} + s_{1}^{2} + s_{2}^{2} + 2s_{1}s_{2} + \\left(2s_{1}^{2} + 2s_{1} + s_{1}s_{2}\\right)x_{1} + \\left(2s_{2}^{2} + 2s_{2} + s_{1}s_{2}\\right)x_{2} + 2s_{1}s_{2}\\,x_{1}x_{2}}$$", "id": "1461880"}]}