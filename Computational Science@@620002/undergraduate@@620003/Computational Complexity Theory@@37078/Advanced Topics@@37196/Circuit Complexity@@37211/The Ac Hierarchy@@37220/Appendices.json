{"hands_on_practices": [{"introduction": "The core of circuit complexity lies in translating logical statements into an arrangement of gates. This first practice exercise provides a direct, hands-on opportunity to see this translation in action by converting a standard 3-Conjunctive Normal Form (3-CNF) formula into its equivalent constant-depth circuit [@problem_id:1449580]. By building this circuit, you will solidify your understanding of how logical structures map to a two-level AND-OR architecture, a characteristic feature of many problems in $AC^0$.", "problem": "A Boolean circuit is a member of the complexity class $AC^0$ if it has a constant depth and a size that is polynomial in the number of inputs, and is constructed using AND, OR, and NOT gates. The AND and OR gates are permitted to have unbounded fan-in (i.e., they can accept any number of inputs). For the purpose of calculating depth, it is a standard convention to assume that NOT gates can only be applied directly to the input variables, and this layer of NOT gates does not contribute to the circuit's overall depth. The depth is therefore the maximum number of AND and OR gates on any path from an input (or its negation) to the output.\n\nConsider the following Boolean formula $\\Phi$ in 3-Conjunctive Normal Form (3-CNF), which is a conjunction (AND) of clauses, where each clause is a disjunction (OR) of three literals:\n$$ \\Phi = (x_1 \\lor \\neg x_2 \\lor x_3) \\land (\\neg x_1 \\lor x_2 \\lor x_4) \\land (x_2 \\lor \\neg x_3 \\lor \\neg x_4) $$\nThe formula is defined over the four input variables $x_1, x_2, x_3, x_4$. A literal is a variable or its negation.\n\nYour task is to model this formula as a circuit that adheres to the $AC^0$ structural principles. Construct a circuit for $\\Phi$ that directly reflects its structure as a conjunction of disjunctions. Determine the depth, $D$, of this circuit and the total number of gates, $G$, required. The total gate count should include all AND, OR, and NOT gates necessary to implement the formula, starting from the base inputs $x_1, x_2, x_3, x_4$.\n\nExpress your answer as a row matrix containing the two integers $D$ and $G$ in that order.", "solution": "We are to construct an $AC^{0}$ circuit for the 3-CNF formula\n$$\\Phi=(x_{1}\\lor\\neg x_{2}\\lor x_{3})\\land(\\neg x_{1}\\lor x_{2}\\lor x_{4})\\land(x_{2}\\lor\\neg x_{3}\\lor\\neg x_{4}).$$\nBy the standard $AC^{0}$ convention, NOT gates may appear only at the inputs and do not contribute to depth; depth is the number of AND/OR layers from an input or its negation to the output. We implement $\\Phi$ directly as a conjunction of three disjunctions.\n\nFirst, create a NOT gate for each variable that appears negated: $\\neg x_{1}$, $\\neg x_{2}$, $\\neg x_{3}$, and $\\neg x_{4}$. This yields $4$ NOT gates. Each NOT output can fan out to any clause that needs it; in this formula, each is used once.\n\nNext, build one OR gate per clause, each with fan-in $3$:\n- One OR gate computing $(x_{1}\\lor\\neg x_{2}\\lor x_{3})$,\n- One OR gate computing $(\\neg x_{1}\\lor x_{2}\\lor x_{4})$,\n- One OR gate computing $(x_{2}\\lor\\neg x_{3}\\lor\\neg x_{4})$.\nThis contributes $3$ OR gates.\n\nFinally, connect the outputs of these three OR gates into a single AND gate that computes their conjunction, contributing $1$ AND gate.\n\nThe depth $D$ of this circuit counts only AND/OR layers: inputs (or their negations via the input NOT layer) feed the OR layer (depth $1$), which feeds the top AND layer (depth $2$). Therefore $D=2$.\n\nThe total number of gates $G$ includes all NOT, OR, and AND gates used. We counted $4$ NOT gates, $3$ OR gates, and $1$ AND gate, giving\n$$G=4+3+1=8.$$\n\nThus the required row matrix of depth and gate count is $\\begin{pmatrix}2 & 8\\end{pmatrix}$.", "answer": "$$\\boxed{\\begin{pmatrix}2 & 8\\end{pmatrix}}$$", "id": "1449580"}, {"introduction": "Beyond simple logical formulas, $AC^0$ circuits are powerful enough to check specific structural properties in combinatorial objects like graphs. In this exercise, you will design a constant-depth circuit to determine if a given graph is a complete graph, $K_k$ [@problem_id:1449560]. This task requires you to first articulate the definition of a complete graph in precise Boolean logic and then devise an optimal circuit, giving you practice in both problem formalization and circuit optimization within the constraints of $AC^0$.", "problem": "In the study of Boolean circuit complexity, circuits are constructed from logic gates. For this problem, we consider circuits built from AND, OR, and NOT gates. The AND and OR gates are permitted to have unbounded fan-in (i.e., any number of inputs), while NOT gates have a fan-in of one. The **size** of a circuit is the total number of gates it contains. The **depth** of a circuit is the length of the longest path from any input variable to the output gate. By convention, any NOT gates applied directly to the input variables are considered to be at the input level and do not contribute to the circuit's depth.\n\nA graph with $k$ vertices can be represented by a $k \\times k$ adjacency matrix $A$, where the entry $a_{ij}$ (for $1 \\le i, j \\le k$) is 1 if there is an edge from vertex $i$ to vertex $j$, and 0 otherwise. For an undirected graph, this matrix is symmetric, meaning $a_{ij} = a_{ji}$.\n\nA graph is defined as a **complete graph**, denoted $K_k$, if and only if for every pair of distinct vertices, there is exactly one edge connecting them. By standard definition, complete graphs do not have self-loops (i.e., no edges from a vertex to itself).\n\nFor a fixed integer $k \\ge 2$, your task is to design a Boolean circuit that takes the $k^2$ entries of the adjacency matrix $A$ as input and outputs 1 if the graph represents $K_k$, and 0 otherwise. You should aim for a circuit with the minimum possible depth, and among those, the minimum possible size.\n\nWhat is the sum of the minimum depth and minimum size of such a circuit? Express your answer as a function of $k$.", "solution": "We are given $k^{2}$ Boolean inputs $\\{a_{ij}\\}_{1 \\le i,j \\le k}$ encoding the adjacency matrix $A$ of a graph on $k$ labeled vertices. The output should be $1$ if and only if the graph is exactly $K_{k}$ (no self-loops and every pair of distinct vertices adjacent). In terms of $A$, this means:\n- For each $i$, $a_{ii} = 0$ (no self-loops).\n- For each $i \\ne j$, $a_{ij} = 1$ (all off-diagonal entries are $1$). Requiring all $a_{ij}$ for $i \\ne j$ to be $1$ automatically enforces the needed symmetry for $K_{k}$ as both $a_{ij}$ and $a_{ji}$ must be $1$.\n\nA depth-1 realization with unbounded fan-in is the single conjunction of the relevant literals:\n$$\nF(A) \\;=\\; \\bigwedge_{i=1}^{k} \\neg a_{ii} \\;\\wedge\\; \\bigwedge_{\\substack{1 \\le i,j \\le k \\\\ i \\ne j}} a_{ij}.\n$$\nImplementation:\n- Place a NOT gate on each $a_{ii}$ to obtain $\\neg a_{ii}$ directly at the input level. By the given convention, these NOT gates do not increase depth.\n- Feed all $k$ negated diagonal literals and all $k(k-1)$ off-diagonal positive literals into one unbounded fan-in AND gate.\n\nDepth analysis:\n- The only gate above input level is the single AND gate, so the circuit has depth $1$.\n- No circuit of depth $0$ can compute this nontrivial function (depth $0$ would be a projection or constant), so the minimum depth is $1$.\n\nSize analysis:\n- There are exactly $k$ NOT gates (one per diagonal input) and one AND gate, so the size is $k+1$.\n- This is optimal among depth-1 circuits. Any depth-1 circuit consists of a single AND or OR of input literals (possibly negated at the input level). It cannot be a single OR, since an OR of literals cannot be $1$ on exactly the unique assignment defining $K_{k}$ while being $0$ on nearby assignments. Therefore, the top gate must be an AND. For each $i$, to reject the assignment that equals $K_{k}$ except with $a_{ii}=1$, the conjunction must include the literal $\\neg a_{ii}$. Hence at least $k$ input negations are necessary, plus the AND gate, totaling at least $k+1$ gates. This matches the construction, so the minimum size (subject to minimum depth) is $k+1$.\n\nTherefore, the minimum depth is $1$ and, among such circuits, the minimum size is $k+1$. The requested sum is\n$$\n1 + (k+1) \\;=\\; k+2.\n$$", "answer": "$$\\boxed{k+2}$$", "id": "1449560"}, {"introduction": "This final practice problem explores the remarkable expressive power of $AC^0$ by tackling a seemingly complex pattern-recognition task. You will analyze the complexity of determining if the positions of '1's in a binary string form an arithmetic progression [@problem_id:1449552]. Successfully classifying this problem requires a clever logical decomposition of the property, revealing how constant-depth circuits can decide non-trivial languages by leveraging massive parallelism.", "problem": "In computational complexity theory, the AC hierarchy (for Alternating Class) is a collection of complexity classes. The class `$AC^k$` is the set of languages decidable by a family of Boolean circuits with a number of gates polynomial in the input size $n$, depth $O(\\log^k n)$, and where the AND and OR gates have unbounded fan-in. The class `$AC^0$` corresponds to constant depth, i.e., depth $O(1)$.\n\nConsider the language `AP-INDICES`. A binary string $x = x_1x_2...x_n$ of length $n$ is a member of `AP-INDICES` if the set of indices $\\{i \\in \\{1, 2, ..., n\\} \\mid x_i = 1\\}$, when sorted in increasing order, forms an arithmetic progression. A sequence of numbers is an arithmetic progression if the difference between consecutive terms is constant. By definition, if the number of '1's in the string is zero or one, the condition is considered satisfied.\n\nFor example, for $n=7$, the string `0101010` is in `AP-INDICES` because its set of '1'-indices is $\\{2, 4, 6\\}$, which is an arithmetic progression. In contrast, for $n=5$, the string `11010` is not in `AP-INDICES` as its '1'-indices, $\\{1, 2, 4\\}$, do not form an arithmetic progression.\n\nDetermine the most precise classification for the `AP-INDICES` language. From the options below, what is the smallest class that contains `AP-INDICES`?\n\nA. `$AC^0$`\n\nB. `$AC^1$`\n\nC. `$AC^2$`\n\nD. `PSPACE`\n\nE. The language is undecidable.", "solution": "Let $x \\in \\{0,1\\}^{n}$ and let $S(x) = \\{i \\in \\{1,\\dots,n\\} : x_{i} = 1\\}$. By definition, $x \\in \\text{AP-INDICES}$ if and only if either $|S(x)| \\leq 1$ or there exist integers $a$ and $d$ with $1 \\leq a \\leq n$ and $1 \\leq d \\leq n$ such that $S(x)$, when listed in increasing order, is exactly $\\{a, a+d, \\dots, a+(m-1)d\\}$ for some $m \\geq 2$.\n\nWe express the property “$S(x)$ is an arithmetic progression” by the following equivalent existential condition over $(a,d)$:\nThere exist $a,d$ with $1 \\leq a \\leq n$ and $1 \\leq d \\leq n$ such that\n(i) for every $i \\in \\{1,\\dots,n\\}$ with $i \\not\\equiv a \\pmod{d}$, we have $x_{i} = 0$, and\n(ii) for every $i \\in \\{1,\\dots,n\\}$ with $i \\equiv a \\pmod{d}$, and for all integers $t$ and $s$ with $t \\geq 1$, $0 < s < t$, and $i+td \\leq n$, the implication\n$$\nx_{i} \\wedge x_{i+td} \\;\\Rightarrow\\; x_{i+sd}\n$$\nholds.\n\nProof of equivalence:\n- If $S(x)$ is an arithmetic progression $S(x) = \\{a, a+d, \\dots, a+(m-1)d\\}$, then (i) holds because every element of $S(x)$ is congruent to $a \\pmod{d}$ and no other indices carry a $1$. Also (ii) holds because whenever $x_{i} = 1$ and $x_{i+td} = 1$ with $0 < s < t$, the intermediate positions $i+sd$ are also in $S(x)$, hence $x_{i+sd} = 1$.\n- Conversely, suppose (i) and (ii) hold for some $(a,d)$. Condition (i) implies that all $1$-positions lie in the single residue class $i \\equiv a \\pmod{d}$. Within this residue class, condition (ii) enforces “no holes”: if two positions $i$ and $i+td$ in the class are $1$, then all intermediate positions $i+sd$ with $0 < s < t$ must also be $1$. Hence the $1$-positions within that residue class form a single contiguous block of the form $\\{a+ud, a+(u+1)d, \\dots, a+vd\\}$ for some integers $u \\leq v$, which is exactly an arithmetic progression. If $|S(x)| \\leq 1$, the condition is vacuously satisfied (choose any $(a,d)$ with $a$ equal to the unique $1$-position if it exists).\n\nTo decide membership by constant-depth circuits, we convert condition (ii) into clauses. The implication\n$$\nx_{i} \\wedge x_{i+td} \\;\\Rightarrow\\; x_{i+sd}\n$$\nis equivalent to the $3$-literal clause\n$$\n(\\neg x_{i}) \\;\\vee\\; x_{i+sd} \\;\\vee\\; (\\neg x_{i+td}).\n$$\nFor fixed $(a,d)$, define the subcircuit $C(a,d)$ as the conjunction of:\n- all literals $(\\neg x_{i})$ for $i \\in \\{1,\\dots,n\\}$ with $i \\not\\equiv a \\pmod{d}$ (enforcing condition (i)),\n- all clauses $(\\neg x_{i}) \\vee x_{i+sd} \\vee (\\neg x_{i+td})$ for $i \\equiv a \\pmod{d}$, $t \\geq 1$, $0 < s < t$, and $i+td \\leq n$ (enforcing condition (ii)).\n\nThen $x \\in \\text{AP-INDICES}$ if and only if\n$$\n\\bigvee_{d=1}^{n} \\;\\bigvee_{a=1}^{d} \\; C(a,d)\n$$\nevaluates to true. This is an OR over $O(n^{2})$ choices of $(a,d)$ of conjunctions of input literals and $3$-literal ORs. With unbounded fan-in AND/OR and input negations, this yields a depth-$3$ circuit: inputs feed into $3$-input ORs for the clauses, all such outputs together with the necessary negated literals feed into a single AND gate for each $(a,d)$, and a top-level OR collects all $(a,d)$ candidates.\n\nThe size is polynomial. For each $(a,d)$:\n- enforcing $i \\not\\equiv a \\pmod{d}$ contributes $O(n)$ literals;\n- enforcing no holes contributes, for each $i \\equiv a \\pmod{d}$, $O((n/d)^{2})$ clauses (since $t$ ranges up to $O(n/d)$ and $s$ ranges over $1,\\dots,t-1$), and there are $O(n/d)$ such $i$, totaling $O((n/d)^{3})$ clauses per $(a,d)$. Summing over $d$ and $a$ gives\n$$\n\\sum_{d=1}^{n} d \\cdot \\left(\\frac{n}{d}\\right)^{3} \\;=\\; n^{3} \\sum_{d=1}^{n} \\frac{1}{d^{2}} \\;=\\; O(n^{3}).\n$$\nHence the circuit family has polynomial size and constant depth with unbounded fan-in AND/OR gates, so the language lies in $AC^{0}$.\n\nAmong the given options, $AC^{0} \\subseteq AC^{1} \\subseteq AC^{2} \\subseteq \\text{PSPACE}$, and undecidable is strictly larger than all. Therefore the smallest class containing $\\text{AP-INDICES}$ is $AC^{0}$.", "answer": "$$\\boxed{A}$$", "id": "1449552"}]}