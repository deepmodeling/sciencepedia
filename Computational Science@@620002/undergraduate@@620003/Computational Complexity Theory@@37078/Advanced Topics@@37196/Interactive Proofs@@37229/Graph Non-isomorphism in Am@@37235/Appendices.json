{"hands_on_practices": [{"introduction": "Before deploying a powerful interactive protocol, a verifier should always perform any simple checks available. This exercise explores a fundamental aspect of graph theory—graph invariants—to show how Arthur can sometimes decide Graph Non-Isomorphism on his own, without Merlin's help. Understanding these preliminary checks is key to appreciating why and when the full Arthur-Merlin protocol is truly necessary. [@problem_id:1426148]", "problem": "In computational complexity theory, an interactive proof system involves a powerful, untrustworthy prover (Merlin) trying to convince a computationally limited, probabilistic verifier (Arthur) of the truth of a statement. The Graph Non-Isomorphism (GNI) problem is a classic example of a problem with an efficient interactive proof. GNI is the problem of determining if two graphs, $G_0$ and $G_1$, are *not* isomorphic.\n\nConsider the standard Arthur-Merlin (AM) protocol for GNI for two graphs $G_0 = (V, E_0)$ and $G_1 = (V, E_1)$ with the same set of $n$ vertices, $V$:\n\n1.  Arthur (the verifier) receives the pair of graphs $(G_0, G_1)$.\n2.  Arthur randomly and secretly chooses an index $i \\in \\{0, 1\\}$.\n3.  Arthur generates a random permutation $\\pi$ of the vertex set $V$.\n4.  Arthur computes a new graph $H$ by applying the permutation $\\pi$ to the vertices of his chosen graph $G_i$. That is, $H = \\pi(G_i)$, meaning an edge $(u, v)$ is in $H$ if and only if the edge $(\\pi^{-1}(u), \\pi^{-1}(v))$ is in $G_i$.\n5.  Arthur sends the graph $H$ to Merlin (the prover).\n6.  Merlin must reply with an index $j \\in \\{0, 1\\}$, indicating which of the original graphs he believes $H$ is isomorphic to.\n7.  Arthur accepts the proof of non-isomorphism if Merlin's answer is correct (i.e., if $j=i$). Otherwise, Arthur rejects.\n\nA student implementing Arthur's algorithm decides to add a preliminary check: before starting the interactive protocol, the student's program first computes the number of edges in $G_0$ and $G_1$, denoted $|E_0|$ and $|E_1|$ respectively. If $|E_0| \\neq |E_1|$, the program immediately decides that the graphs are non-isomorphic and halts without ever interacting with Merlin.\n\nWhich of the following statements provides the most accurate and fundamental reason why this preliminary check is a correct and sufficient method for Arthur to solve the GNI problem for this specific case?\n\nA. This check is valid because if $|E_0| \\neq |E_1|$, Merlin can count the edges of $H$ and compare the count to $|E_0|$ and $|E_1|$ to determine the correct index $i$ with 100% certainty, thereby always convincing Arthur.\n\nB. This check is valid because the number of edges is a graph invariant. If two graphs have a different number of edges, they cannot be isomorphic, and Arthur can compute this property in polynomial time without any interaction.\n\nC. This check is valid because a random permutation $\\pi$ applied to $G_i$ has a non-zero probability of changing the number of edges in the resulting graph $H$, thus revealing the non-isomorphism to Merlin.\n\nD. This check is valid because the GNI problem is known to be in the complexity class co-NP, which requires that any simple polynomial-time checks must be performed by the verifier before an interactive protocol begins.", "solution": "We begin by recalling the definition of graph isomorphism: graphs $G_{0}=(V,E_{0})$ and $G_{1}=(V,E_{1})$ are isomorphic if there exists a bijection $\\varphi:V\\to V$ such that for every pair $(u,v)\\in V\\times V$, the edge $(u,v)\\in E_{0}$ if and only if $(\\varphi(u),\\varphi(v))\\in E_{1}$. Any isomorphism induces a bijection between edges, hence preserves the number of edges. Formally, if $G_{1}\\cong G_{0}$, then there exists a bijection between $E_{0}$ and $E_{1}$, so $|E_{0}|=|E_{1}|$.\n\nNext, consider Arthur’s permutation step in the AM protocol. For any graph $G=(V,E)$ and any permutation $\\pi$ of $V$, the graph $\\pi(G)$ has edge set $E'=\\{(\\pi(u),\\pi(v)):(u,v)\\in E\\}$. The map $(u,v)\\mapsto(\\pi(u),\\pi(v))$ is a bijection from $E$ to $E'$, hence\n$$\n|E(\\pi(G))|=|E(G)|.\n$$\nTherefore, permutations preserve the number of edges. In particular, if $H=\\pi(G_{i})$, then $|E(H)|=|E_{i}|$.\n\nFrom these facts, the contrapositive yields the fundamental criterion: if $|E_{0}|\\neq|E_{1}|$, then $G_{0}$ and $G_{1}$ cannot be isomorphic. This is a direct consequence of edge-count being a graph isomorphism invariant. Moreover, Arthur can compute $|E_{0}|$ and $|E_{1}|$ in polynomial time (e.g., in time $O(|V|^{2})$ from an adjacency matrix or $O(|E|)$ from an adjacency list), so for this specific case, Arthur can decide non-isomorphism deterministically without any interaction with Merlin. This explains why the preliminary check is both correct and sufficient.\n\nWe now assess the options:\n\n- Option B states precisely the invariant-based reason: the number of edges is preserved under isomorphism, so different edge counts imply non-isomorphism, and Arthur can check this in polynomial time without interaction. This is the most accurate and fundamental reason.\n\n- Option A describes a true phenomenon within the interactive protocol (Merlin can identify $i$ with certainty when $|E_{0}|\\neq|E_{1}|$ by counting edges of $H$), but this is not the fundamental justification for Arthur’s preliminary check being sufficient; the sufficiency comes from the invariant allowing Arthur to decide without Merlin at all.\n\n- Option C is incorrect because applying a permutation never changes the number of edges; $|E(\\pi(G))|=|E(G)|$ always.\n\n- Option D is incorrect in its rationale; there is no requirement stemming from membership in a particular complexity class that mandates such preliminary checks, and the claim given does not justify the correctness of the method.\n\nTherefore, the correct choice is B.", "answer": "$$\\boxed{B}$$", "id": "1426148"}, {"introduction": "The strength of an interactive proof lies in its resistance to deception. This practice examines the protocol's soundness, which is its ability to reject false claims, in this case, when the graphs are actually isomorphic. By calculating the maximum probability of success for a \"cheating\" Merlin, you will gain a quantitative understanding of the protocol's security guarantee and see why the verifier's randomness is so crucial. [@problem_id:1426161]", "problem": "In computational complexity theory, an Arthur-Merlin (AM) protocol describes a class of interactive proof systems. Consider the following two-round protocol designed to solve the Graph Non-Isomorphism (GNI) problem. The protocol involves two parties: Arthur, a verifier with access to a source of random bits, and Merlin, a computationally all-powerful prover.\n\nThe protocol takes as input two simple, undirected graphs, $G_0 = (V, E_0)$ and $G_1 = (V, E_1)$, which share the same set of $n$ vertices, $V$.\n\nThe protocol proceeds as follows:\n1.  Arthur secretly and uniformly at random selects an index $i \\in \\{0, 1\\}$.\n2.  Arthur generates a permutation $\\pi$ of the vertex set $V$, chosen uniformly at random from the set of all $n!$ possible permutations.\n3.  Arthur constructs a new graph $H$ by applying the permutation $\\pi$ to the graph $G_i$. The vertex set of $H$ is $V$, and an edge $(u, v)$ exists in $H$ if and only if the edge $(\\pi^{-1}(u), \\pi^{-1}(v))$ exists in $G_i$.\n4.  Arthur sends only the graph $H$ to Merlin.\n5.  Merlin, upon receiving $H$, must determine which of the original graphs, $G_0$ or $G_1$, served as the template for $H$. Merlin sends back his proposed index, $j \\in \\{0, 1\\}$, to Arthur.\n6.  Arthur accepts if Merlin's response $j$ is identical to Arthur's secret index $i$. Otherwise, Arthur rejects.\n\nNow, consider the specific scenario where the input graphs $G_0$ and $G_1$ are isomorphic to each other. In this case, Merlin is considered to be \"cheating,\" as he attempts to convince Arthur to accept even though the input pair $(G_0, G_1)$ is not a \"yes\" instance of the GNI problem.\n\nAssuming Merlin uses an optimal strategy to maximize his probability of success, what is the exact probability that Arthur will accept Merlin's response? Express your answer as a decimal.", "solution": "Let $G_{0}$ and $G_{1}$ be isomorphic. Then there exists a permutation $\\varphi$ of $V$ such that $G_{1} = \\varphi(G_{0})$. Let $I \\in \\{0,1\\}$ be Arthur’s secret bit chosen uniformly at random, let $\\Pi$ be a uniformly random permutation of $V$, and let $H = \\Pi(G_{I})$ be the graph sent to Merlin.\n\nWe first show that the distribution of $H$ does not depend on $I$. For any labeled graph $h$ on $V$,\n$$\n\\Pr(H = h \\mid I = 1) \\;=\\; \\Pr(\\Pi(G_{1}) = h) \\;=\\; \\Pr(\\Pi(\\varphi(G_{0})) = h) \\;=\\; \\Pr((\\Pi \\circ \\varphi)(G_{0}) = h).\n$$\nDefine $\\Pi' = \\Pi \\circ \\varphi$. Since composition with the fixed bijection $\\varphi$ is a bijection on the set of all permutations, $\\Pi'$ is uniformly distributed over all permutations whenever $\\Pi$ is. Hence\n$$\n\\Pr(H = h \\mid I = 1) \\;=\\; \\Pr(\\Pi'(G_{0}) = h) \\;=\\; \\Pr(H = h \\mid I = 0).\n$$\nTherefore, $H$ has the same distribution under $I=0$ and $I=1$, implying that $I$ and $H$ are independent and, by Bayes’ rule, for any $h$ with $\\Pr(H=h)>0$,\n$$\n\\Pr(I = 0 \\mid H = h) \\;=\\; \\Pr(I = 1 \\mid H = h) \\;=\\; \\frac{1}{2}.\n$$\n\nMerlin’s goal is to output $J \\in \\{0,1\\}$ maximizing $\\Pr(J = I)$. Any (possibly randomized) strategy for Merlin maps $H$ to a distribution over $\\{0,1\\}$. Given that $\\Pr(I = j \\mid H = h) = \\frac{1}{2}$ for both $j$, the optimal choice (deterministic or randomized) achieves\n$$\n\\Pr(J = I \\mid H = h) \\;=\\; \\max_{j \\in \\{0,1\\}} \\Pr(I = j \\mid H = h) \\;=\\; \\frac{1}{2}.\n$$\nAveraging over $H$ yields\n$$\n\\Pr(\\text{Arthur accepts}) \\;=\\; \\mathbb{E}_{H}\\!\\left[\\Pr(J = I \\mid H)\\right] \\;=\\; \\frac{1}{2}.\n$$\n\nThus, even under an optimal strategy, when $G_{0}$ and $G_{1}$ are isomorphic, Merlin’s success probability is exactly one half, which as a decimal is $0.5$.", "answer": "$$\\boxed{0.5}$$", "id": "1426161"}, {"introduction": "Abstract concepts become clear through concrete application. This practice moves beyond theoretical properties and asks you to step into the role of the all-powerful prover, Merlin. Given a specific set of graphs and Arthur's choices, you will perform the core computational task of the protocol: identifying the origin of a permuted graph. This exercise will solidify your understanding of how graph permutations and isomorphisms work in practice. [@problem_id:61686]", "problem": "The Graph Non-Isomorphism (GNI) problem is the problem of deciding whether two given graphs are non-isomorphic. It belongs to the complexity class co-NP. An important result in complexity theory shows that GNI has an interactive proof system, placing it in the class IP, and in fact in the smaller class AM (Arthur-Merlin).\n\nAn interactive proof system for GNI involves a powerful Prover (Merlin) who wants to convince a probabilistic polynomial-time Verifier (Arthur) that two graphs, $G_0$ and $G_1$, are indeed non-isomorphic. The protocol is as follows:\n1.  Arthur receives the two graphs, $G_0$ and $G_1$, on a vertex set $V$.\n2.  Arthur chooses a bit $b \\in \\{0, 1\\}$ uniformly at random.\n3.  Arthur generates a permutation $\\pi$ of the vertices in $V$ uniformly at random.\n4.  Arthur computes the graph $H$ by applying the permutation $\\pi$ to the vertices of $G_b$. That is, the edge set of $H$ is $E_H = \\{(\\pi(u), \\pi(v)) \\mid (u, v) \\in E_{G_b}\\}$.\n5.  Arthur sends the challenge graph $H$ to Merlin.\n6.  Merlin, with his unlimited computational power, must determine which of the original graphs is isomorphic to $H$.\n\nFor this problem, consider two specific graphs on the vertex set $V = \\{1, 2, 3, 4, 5, 6\\}$.\n-   $G_0$ is the cycle graph $C_6$. Its edges are $E_0 = \\{(1,2), (2,3), (3,4), (4,5), (5,6), (6,1)\\}$.\n-   $G_1$ is the graph consisting of two disjoint 3-cycles (triangles). Its edges are $E_1 = \\{(1,2), (2,3), (3,1), (4,5), (5,6), (6,4)\\}$.\n\nSuppose Arthur chooses the bit $b=1$ and the permutation $\\pi$ given in cycle notation as $\\pi = (1 \\ 3 \\ 5 \\ 2)(4 \\ 6)$. He constructs the challenge graph $H = \\pi(G_1)$ and sends it to Merlin.\n\nMerlin's task is to prove which graph $H$ came from. He does this by finding an isomorphism $\\sigma$ from one of the original graphs to $H$. In this case, since $G_0$ and $G_1$ are non-isomorphic, $H$ will be isomorphic to $G_1$ but not to $G_0$.\n\nYour task is to find the specific isomorphism $\\sigma: V \\to V$ that maps $G_1$ to $H$ (i.e., $(\\sigma(u), \\sigma(v))$ is an edge in $H$ if and only if $(u,v)$ is an edge in $G_1$) and is lexicographically smallest. A permutation $\\sigma$ is defined to be lexicographically smaller than another permutation $\\tau$ if the sequence $(\\sigma(1), \\sigma(2), \\sigma(3), \\sigma(4), \\sigma(5), \\sigma(6))$ is lexicographically smaller than $(\\tau(1), \\tau(2), \\tau(3), \\tau(4), \\tau(5), \\tau(6))$.\n\nWhat is this lexicographically smallest isomorphism $\\sigma$, expressed in cycle notation?", "solution": "1. The challenge graph is \n   $$H=\\pi(G_1)\\,,\\qquad \\pi=(1\\ 3\\ 5\\ 2)(4\\ 6)\\,,$$ \n   so in one-line form \n   $$\\pi=\\begin{pmatrix}1&2&3&4&5&6\\\\3&1&5&6&2&4\\end{pmatrix}.$$\n2.  Under $\\pi$, the two triangles of $G_1$,\n   $$T_1=\\{1,2,3\\},\\;T_2=\\{4,5,6\\},$$ \n   become the triangles \n   $$\\pi(T_1)=\\{1,3,5\\},\\;\\pi(T_2)=\\{2,4,6\\}$$ \n   in $H$.\n3.  Any isomorphism $\\sigma:G_1\\to H$ must map $\\{1,2,3\\}$ onto $\\{1,3,5\\}$ and $\\{4,5,6\\}$ onto $\\{2,4,6\\}$ preserving adjacency.\n4.  To minimize lex $(\\sigma(1),\\dots,\\sigma(6))$, choose \n   $$\\sigma(1)=1$$ \n   (the smallest possible), forcing $\\sigma(\\{2,3\\})=\\{3,5\\}$.  Then \n   $$\\sigma(2)=3,\\;\\sigma(3)=5.$$\n5.  The remaining values lie in $\\{2,4,6\\}$; to minimize,\n   $$\\sigma(4)=2,\\;\\sigma(5)=4,\\;\\sigma(6)=6.$$\n6.  In one-line form,\n   $$\\sigma=\\begin{pmatrix}1&2&3&4&5&6\\\\1&3&5&2&4&6\\end{pmatrix}$$\n   which in cycle notation (omitting fixed points $1,6$) is\n   $$(2\\ 3\\ 5\\ 4)\\,. $$", "answer": "$$\\boxed{(2\\ 3\\ 5\\ 4)}$$", "id": "61686"}]}