{"hands_on_practices": [{"introduction": "The best way to grasp arithmetization is by applying it to a familiar concept. This first exercise focuses on the 2-to-1 multiplexer, a fundamental component in digital logic that selects one of two inputs based on a control signal. By translating its well-known boolean expression into a polynomial, you will practice the direct mapping of `NOT`, `AND`, and `OR` operations to their arithmetic counterparts, revealing the elegant simplicity of this powerful technique.", "problem": "In the study of computational complexity, particularly in the context of interactive proof systems, it is often useful to translate boolean formulas into multivariate polynomials. This process, known as arithmetization, allows algebraic techniques to be applied to logical problems.\n\nConsider a translation scheme where boolean variables $x, y, \\dots$ which take values in $\\{0, 1\\}$ are treated as integer variables over the same set. The logical operations are mapped to polynomials as follows:\n- The negation `NOT x` is translated to the polynomial $1 - x$.\n- The conjunction `x AND y` is translated to the polynomial $xy$.\n- The disjunction `x OR y` is translated to the polynomial $x + y - xy$.\n\nA 2-to-1 multiplexer is a standard digital logic component with two data inputs, $x_1$ and $x_2$, and a select input, $s$. The output of the multiplexer is $x_1$ if the select line $s$ is false (0), and $x_2$ if $s$ is true (1). The boolean expression describing the output, $M$, of this device is:\n\n$$M(x_1, x_2, s) = (\\text{NOT } s \\text{ AND } x_1) \\text{ OR } (s \\text{ AND } x_2)$$\n\nYour task is to apply the arithmetization rules to this boolean expression. Determine the multivariate polynomial $P(x_1, x_2, s)$ that is equivalent to the multiplexer's output function. Present your answer as a fully simplified polynomial in terms of $x_1$, $x_2$, and $s$.", "solution": "We apply the arithmetization rules: for boolean variables taking values in $\\{0,1\\}$, $\\text{NOT } s$ maps to $1 - s$, conjunction maps to multiplication, and disjunction maps to $a + b - ab$. The multiplexer output\n$$M(x_{1}, x_{2}, s) = (\\text{NOT } s \\text{ AND } x_{1}) \\text{ OR } (s \\text{ AND } x_{2})$$\ntranslates to\n$$P(x_{1}, x_{2}, s) = \\big((1 - s)x_{1}\\big) + (s x_{2}) - \\big((1 - s)x_{1}\\big)(s x_{2}).$$\nCompute the product term:\n$$\\big((1 - s)x_{1}\\big)(s x_{2}) = (1 - s)s\\,x_{1}x_{2} = (s - s^{2})x_{1}x_{2}.$$\nUsing the multilinearization identity valid on $\\{0,1\\}$, namely $s^{2} = s$, we obtain $(s - s^{2})x_{1}x_{2} = 0$. Therefore the polynomial simplifies to\n$$P(x_{1}, x_{2}, s) = (1 - s)x_{1} + s x_{2}.$$\nEquivalently, $P(x_{1}, x_{2}, s) = x_{1} + s(x_{2} - x_{1})$, which is multilinear and agrees with the boolean function on all inputs in $\\{0,1\\}^{3}$.", "answer": "$$\\boxed{(1 - s)x_{1} + s x_{2}}$$", "id": "1412660"}, {"introduction": "Building on the basics, we now tackle a more structured boolean formula. This problem introduces a key concept in arithmetization: any boolean function has a unique representation as a multilinear polynomial. You will arithmetize a formula composed of multiple logical clauses and then perform the crucial step of simplifying the result into its unique multilinear form, reinforcing why this canonical representation is so valuable in computational complexity.", "problem": "In the study of computational complexity, Boolean formulas can be converted into polynomials, a process known as arithmetization. This is done over the rational numbers, where Boolean variables $x_i$ that can be TRUE or FALSE are mapped to integer variables that take values in $\\{1, 0\\}$, with 1 representing TRUE and 0 representing FALSE. The logical connectives are mapped to arithmetic operations as follows:\n- `NOT` $a$, denoted $\\neg a$, is represented by the polynomial $1-p_a(x_1, \\dots, x_n)$.\n- $a$ `AND` $b$, denoted $a \\land b$, is represented by the polynomial $p_a(x_1, \\dots, x_n) \\cdot p_b(x_1, \\dots, x_n)$.\n- $a$ `OR` $b$, denoted $a \\lor b$, is represented by the polynomial $p_a(x_1, \\dots, x_n) + p_b(x_1, \\dots, x_n) - p_a(x_1, \\dots, x_n) \\cdot p_b(x_1, \\dots, x_n)$.\nHere, $p_a$ and $p_b$ are the polynomials representing the sub-formulas $a$ and $b$, respectively.\n\nConsider the Boolean formula $\\Phi$ over three variables $x_1, x_2, x_3$:\n$$ \\Phi(x_1, x_2, x_3) = (\\neg x_1 \\lor x_2) \\land (\\neg x_2 \\lor x_3) $$\n\nA given Boolean function can be represented by many different polynomials. However, for any Boolean function on $n$ variables, there exists a unique *multilinear* polynomial that represents it. A polynomial is multilinear if the highest power of any variable in any of its terms is one. For example, $x_1x_2 + x_3$ is multilinear, but $x_1^2 + x_2$ is not.\n\nFind the unique multilinear polynomial in the variables $x_1, x_2,$ and $x_3$ that represents the Boolean function defined by $\\Phi$.", "solution": "We arithmetize over $\\{0,1\\}$ with $x_{i}^{2}=x_{i}$ for Boolean variables, and use the mappings $\\neg a \\mapsto 1-p_{a}$, $a \\lor b \\mapsto p_{a}+p_{b}-p_{a}p_{b}$, and $a \\land b \\mapsto p_{a}p_{b}$.\n\nFirst arithmetize each clause of $\\Phi(x_{1},x_{2},x_{3})=(\\neg x_{1} \\lor x_{2}) \\land (\\neg x_{2} \\lor x_{3})$.\n\nFor the first clause,\n$$\np_{1}=(1-x_{1})+x_{2}-(1-x_{1})x_{2}\n=(1-x_{1})+x_{2}-x_{2}+x_{1}x_{2}\n=1-x_{1}+x_{1}x_{2}.\n$$\n\nFor the second clause,\n$$\np_{2}=(1-x_{2})+x_{3}-(1-x_{2})x_{3}\n=1-x_{2}+x_{3}-x_{3}+x_{2}x_{3}\n=1-x_{2}+x_{2}x_{3}.\n$$\n\nCombine the clauses with AND:\n$$\np=p_{1}p_{2}=(1-x_{1}+x_{1}x_{2})(1-x_{2}+x_{2}x_{3}).\n$$\n\nExpand:\n$$\n\\begin{aligned}\np&=(1)(1-x_{2}+x_{2}x_{3})+(-x_{1})(1-x_{2}+x_{2}x_{3})+(x_{1}x_{2})(1-x_{2}+x_{2}x_{3}) \\\\\n&=1-x_{2}+x_{2}x_{3}-x_{1}+x_{1}x_{2}-x_{1}x_{2}x_{3}+x_{1}x_{2}-x_{1}x_{2}^{2}+x_{1}x_{2}^{2}x_{3}.\n\\end{aligned}\n$$\n\nReduce to the unique multilinear representative using $x_{2}^{2}=x_{2}$:\n$$\n-x_{1}x_{2}^{2}=-x_{1}x_{2},\\quad x_{1}x_{2}^{2}x_{3}=x_{1}x_{2}x_{3}.\n$$\nSubstituting and combining like terms,\n$$\np=1-x_{1}-x_{2}+x_{2}x_{3}+2x_{1}x_{2}-x_{1}x_{2}x_{3}-x_{1}x_{2}+x_{1}x_{2}x_{3}\n=1-x_{1}-x_{2}+x_{1}x_{2}+x_{2}x_{3}.\n$$\n\nThis polynomial is multilinear and, by uniqueness of the multilinear representation over $\\{0,1\\}^{n}$, it is the desired polynomial for $\\Phi$.", "answer": "$$\\boxed{1-x_{1}-x_{2}+x_{1}x_{2}+x_{2}x_{3}}$$", "id": "1412618"}, {"introduction": "This final practice challenges you to think in reverse, moving from a desired logical property to its polynomial representation. Instead of translating an existing formula, your task is to construct a polynomial that identifies when exactly one of its inputs is true. This exercise develops a deeper intuition for how to engineer polynomials that encode specific combinatorial conditions, a skill essential for designing and analyzing advanced protocols like interactive proofs.", "problem": "Arithmetization is a key technique in theoretical computer science, particularly in the study of interactive proof systems. It involves converting a boolean formula into a low-degree polynomial that agrees with the formula on boolean inputs (i.e., inputs from the set $\\{0, 1\\}$). This allows logical properties to be checked using algebraic tools.\n\nConsider a system with three boolean inputs, represented by variables $x_1, x_2, x_3$, where each variable can take a value of either 0 (representing false) or 1 (representing true). Your task is to construct a single multilinear polynomial $P(x_1, x_2, x_3)$ over the real numbers that serves as an arithmetic representation of the logical condition \"exactly one of the inputs is true.\"\n\nThe polynomial must satisfy the following conditions:\n1. If the assignment of values to $(x_1, x_2, x_3)$ has exactly one variable equal to 1, then $P(x_1, x_2, x_3)$ must evaluate to 1.\n2. For any other valid assignment of boolean values to $(x_1, x_2, x_3)$, the polynomial must evaluate to 0.\n\nExpress your answer as a fully expanded multilinear polynomial in terms of $x_1, x_2,$ and $x_3$.", "solution": "For boolean variables, the arithmetic encodings are: $x_{i}$ represents the condition \"$x_{i}$ is true\" and $(1 - x_{i})$ represents \"$x_{i}$ is false.\" The condition “exactly one of $x_{1}, x_{2}, x_{3}$ is true” can be written as the disjoint sum of three mutually exclusive cases:\n$$\nP(x_{1}, x_{2}, x_{3}) = x_{1}(1 - x_{2})(1 - x_{3}) + x_{2}(1 - x_{1})(1 - x_{3}) + x_{3}(1 - x_{1})(1 - x_{2}).\n$$\nEach term is multilinear, and the sum is multilinear. Expanding each product:\n$$\nx_{1}(1 - x_{2})(1 - x_{3}) = x_{1} - x_{1}x_{2} - x_{1}x_{3} + x_{1}x_{2}x_{3},\n$$\n$$\nx_{2}(1 - x_{1})(1 - x_{3}) = x_{2} - x_{1}x_{2} - x_{2}x_{3} + x_{1}x_{2}x_{3},\n$$\n$$\nx_{3}(1 - x_{1})(1 - x_{2}) = x_{3} - x_{1}x_{3} - x_{2}x_{3} + x_{1}x_{2}x_{3}.\n$$\nSumming and combining like terms gives the fully expanded multilinear polynomial:\n$$\nP(x_{1}, x_{2}, x_{3}) = x_{1} + x_{2} + x_{3} - 2x_{1}x_{2} - 2x_{1}x_{3} - 2x_{2}x_{3} + 3x_{1}x_{2}x_{3}.\n$$\nFor any boolean assignment, if exactly one variable equals $1$, exactly one of the three product terms equals $1$ and the others equal $0$, so $P=1$. Otherwise, either all terms are $0$ (no true variables) or the inclusion-exclusion in the expansion ensures cancellation to $0$ (two or three true variables), satisfying the required conditions.", "answer": "$$\\boxed{x_{1}+x_{2}+x_{3}-2x_{1}x_{2}-2x_{1}x_{3}-2x_{2}x_{3}+3x_{1}x_{2}x_{3}}$$", "id": "1412637"}]}