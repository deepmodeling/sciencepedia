{"hands_on_practices": [{"introduction": "The sum-check protocol's elegance lies in its recursive structure, boiling down a complex multi-variable sum into a series of simple single-variable checks. This first exercise [@problem_id:1463894] focuses on the crucial opening move: constructing the first polynomial message, $p_1(X_1)$. By working through this calculation, you will gain a concrete understanding of how the prover bundles the contributions of all subsequent variables into a single, verifiable polynomial.", "problem": "Consider the sum-check protocol, an interactive proof system used to verify the claimed value of the sum of a multivariate polynomial over a Boolean hypercube. A prover, Peggy, wants to convince a verifier, Victor, of the value of the following sum:\n$$ S = \\sum_{x_1 \\in \\{0, 1\\}} \\sum_{x_2 \\in \\{0, 1\\}} g(x_1, x_2) $$\nwhere the polynomial is defined as $g(x_1, x_2) = x_1 x_2 + x_1$. The variables $x_1$ and $x_2$ are defined over a field $\\mathbb{F}$ whose characteristic is not 2.\n\nIn the first round of the protocol, the prover must compute and send a univariate polynomial in a new variable $X_1$, which we will call $p_1(X_1)$. This polynomial is constructed by substituting the indeterminate $X_1$ for the first variable $x_1$ in $g(x_1, x_2)$, and then summing over all possible Boolean assignments for the remaining variable, $x_2$.\n\nDetermine the polynomial $p_1(X_1)$ that an honest prover must send to the verifier in the first round. Express your answer as a polynomial in the variable $X_1$.", "solution": "In the sum-check protocol, the first-round polynomial is defined by substituting an indeterminate $X_{1}$ for $x_{1}$ and summing over all Boolean values of the remaining variable. Therefore,\n$$\np_{1}(X_{1})=\\sum_{x_{2}\\in\\{0,1\\}} g(X_{1},x_{2}).\n$$\nGiven $g(x_{1},x_{2})=x_{1}x_{2}+x_{1}$, we compute\n$$\np_{1}(X_{1})=\\sum_{x_{2}\\in\\{0,1\\}} \\left(X_{1}x_{2}+X_{1}\\right).\n$$\nUsing linearity of summation and distributivity in the field $\\mathbb{F}$,\n$$\np_{1}(X_{1})=X_{1}\\sum_{x_{2}\\in\\{0,1\\}} x_{2}+X_{1}\\sum_{x_{2}\\in\\{0,1\\}} 1.\n$$\nEvaluating the sums over the Boolean set,\n$$\n\\sum_{x_{2}\\in\\{0,1\\}} x_{2}=0+1=1,\\qquad \\sum_{x_{2}\\in\\{0,1\\}} 1=1+1=2.\n$$\nHence,\n$$\np_{1}(X_{1})=X_{1}\\cdot 1+X_{1}\\cdot 2=3X_{1},\n$$\nwhere the coefficient $3$ denotes $1_{\\mathbb{F}}+1_{\\mathbb{F}}+1_{\\mathbb{F}}$ in the field (the assumption that the characteristic is not $2$ ensures $2\\neq 0$).", "answer": "$$\\boxed{3X_{1}}$$", "id": "1463894"}, {"introduction": "A key feature of the sum-check protocol is its soundness—the property that a verifier will almost always reject a false claim. This practice problem [@problem_id:1463865] puts you in the role of an analyst examining a fraudulent prover. You will discover the specific, rare condition under which a verifier's random check might accidentally pass, illustrating why the size of the field $\\mathbb{F}$ is critical for the protocol's security.", "problem": "In the context of the sum-check protocol, a Prover (P) aims to convince a Verifier (V) of a claimed sum over a Boolean hypercube. All arithmetic is performed in the finite field $\\mathbb{F}_{29}$.\n\nThe Prover considers the bivariate polynomial $g(x_1, x_2) = x_1 x_2 + 2x_1 + 3x_2$. The Prover makes the claim that the total sum of this polynomial over the Boolean hypercube $\\{0, 1\\}^2$ is equal to $C=10$. That is, P claims $\\sum_{x_1 \\in \\{0, 1\\}} \\sum_{x_2 \\in \\{0, 1\\}} g(x_1, x_2) = 10$.\n\nTo begin the interactive protocol, the Prover sends the Verifier a polynomial for the first variable, $X_1$. However, the Prover is dishonest and, instead of sending the correct polynomial, sends the fraudulent polynomial $p_1(X_1) = 5$.\n\nThe Verifier first performs a basic consistency check on the claimed sum $C$ using the received polynomial $p_1(X_1)$. Since this initial check passes, the Verifier proceeds by selecting a random value $r_1 \\in \\mathbb{F}_{29}$ to send to the Prover for the next round of the protocol.\n\nThere is exactly one value of $r_1$ for which the Verifier would fail to detect the Prover's deception at this stage, because for this specific $r_1$, the Prover's fraudulent claim $p_1(r_1)$ accidentally matches the true value of the corresponding sub-summation. Determine this specific value of $r_1$ in $\\mathbb{F}_{29}$.", "solution": "We work over the finite field $\\mathbb{F}_{29}$. The honest first-round polynomial that should be sent is the sub-sum\n$$\ns_{1}(X_{1})=\\sum_{x_{2}\\in\\{0,1\\}} g(X_{1},x_{2}) .\n$$\nGiven $g(x_{1},x_{2})=x_{1}x_{2}+2x_{1}+3x_{2}$, compute\n$$\ng(X_{1},0)=X_{1}\\cdot 0+2X_{1}+3\\cdot 0=2X_{1},\\qquad g(X_{1},1)=X_{1}\\cdot 1+2X_{1}+3\\cdot 1=3X_{1}+3,\n$$\nso\n$$\ns_{1}(X_{1})=g(X_{1},0)+g(X_{1},1)=2X_{1}+(3X_{1}+3)=5X_{1}+3 \\quad \\text{in } \\mathbb{F}_{29}.\n$$\nThe cheating prover sent $p_{1}(X_{1})=5$. The unique value $r_{1}\\in\\mathbb{F}_{29}$ for which the verifier would not detect the cheating at this stage is characterized by\n$$\np_{1}(r_{1})=s_{1}(r_{1}) \\quad \\Longleftrightarrow \\quad 5=5r_{1}+3 \\pmod{29}.\n$$\nRearranging,\n$$\n5r_{1}\\equiv 2 \\pmod{29}.\n$$\nSince $\\gcd(5,29)=1$, $5$ has a multiplicative inverse modulo $29$. Using the extended Euclidean algorithm,\n$$\n29=5\\cdot 5+4,\\quad 5=4\\cdot 1+1 \\;\\Rightarrow\\; 1=5-4=5-(29-5\\cdot 5)=6\\cdot 5-29,\n$$\nhence $5^{-1}\\equiv 6 \\pmod{29}$. Multiplying both sides by $6$ gives\n$$\nr_{1}\\equiv 6\\cdot 2\\equiv 12 \\pmod{29}.\n$$\nAs a check,\n$$\ns_{1}(12)\\equiv 5\\cdot 12+3\\equiv 60+3\\equiv 63\\equiv 5 \\pmod{29}=p_{1}(12),\n$$\nso $r_{1}=12$ indeed makes the fraudulent and honest sub-sums coincide, and by linearity there is exactly one such $r_{1}$ in $\\mathbb{F}_{29}$.", "answer": "$$\\boxed{12}$$", "id": "1463865"}, {"introduction": "The sum-check protocol relies on a chain of consistency checks, where each step's validity depends on the previous one. In this final exercise [@problem_id:1463887], we'll trace the entire protocol from a faulty starting assumption—an incorrect total sum $C'$. This will demonstrate the protocol's robustness, showing precisely how and when the verifier's checks unravel a lie, culminating in a failed final evaluation against the ground-truth polynomial $g(x_1, \\dots, x_n)$.", "problem": "Consider the sum-check protocol, an interactive proof system used to verify the sum of a multivariate polynomial over a finite Boolean hypercube. A verifier wants to check the following summation claim over the finite field $\\mathbb{F}_{13}$ (the integers modulo 13):\n$$ \\sum_{x_1 \\in \\{0,1\\}} \\sum_{x_2 \\in \\{0,1\\}} g(x_1, x_2) = C' $$\nwhere the polynomial is given by $g(x_1, x_2) = x_1 x_2 + 2x_1 + 3x_2$ and the claimed sum is $C' = 10$.\n\nThe protocol proceeds in rounds. In round $i$, the prover provides a single-variable polynomial $S_i(z_i)$, and the verifier performs checks and then picks a random challenge $r_i$. For this problem, assume a specific prover strategy and a deterministic verifier.\n\nThe prover's strategy is as follows: In each round $i$, when required to provide a polynomial $S_i(z_i)$ that satisfies the consistency check $S_i(0) + S_i(1) = C_{i-1}$ (where $C_0 = C'$), the prover will first compute the true value of the partial sum corresponding to $S_i(0)$. It will then determine the value for $S_i(1)$ that is needed to satisfy the consistency check, even if this value is incorrect. The prover then sends the unique, lowest-degree polynomial $S_i(z_i)$ that interpolates these two points.\n\nThe verifier, after its checks in each round, uses a predetermined sequence of challenges. For this two-variable polynomial, the challenges are $r_1 = 5$ for the first round and $r_2 = 7$ for the second round.\n\nThe verifier performs the following checks in order. If any check fails, the verifier rejects immediately.\n1.  **Round 1 Checks:**\n    a. Verifies that the degree of the received polynomial $S_1(z_1)$ is at most the individual degree of $g$ in $x_1$.\n    b. Verifies that $S_1(0) + S_1(1) = C'$.\n2.  **Round 2 Checks:**\n    a. Verifies that the degree of the received polynomial $S_2(z_2)$ is at most the individual degree of $g$ in $x_2$.\n    b. Verifies that $S_2(0) + S_2(1) = C_1$, where $C_1 = S_1(r_1)$.\n3.  **Final Check:**\n    a. Verifies that $g(r_1, r_2) = C_2$, where $C_2 = S_2(r_2)$.\n\nWhich of the following is the first check that fails?\n\nA. The degree check for $S_1(z_1)$.\n\nB. The consistency check $S_1(0) + S_1(1) = C'$.\n\nC. The consistency check $S_2(0) + S_2(1) = C_1$.\n\nD. The final evaluation check $g(r_1, r_2) = C_2$.", "solution": "Work over the field $\\mathbb{F}_{13}$. The polynomial is $g(x_{1}, x_{2}) = x_{1} x_{2} + 2 x_{1} + 3 x_{2}$, with individual degrees $\\deg_{x_{1}} g = 1$ and $\\deg_{x_{2}} g = 1$. The claimed total is $C' = 10$.\n\nRound 1: By the prover’s strategy, compute the true partial sum at $z_{1} = 0$:\n$$\nS_{1}(0) = \\sum_{x_{2} \\in \\{0,1\\}} g(0, x_{2}) = g(0,0) + g(0,1) = 0 + 3 = 3 \\mod 13.\n$$\nTo satisfy $S_{1}(0) + S_{1}(1) = C'$, set\n$$\nS_{1}(1) = C' - S_{1}(0) = 10 - 3 = 7 \\mod 13.\n$$\nInterpolate the unique lowest-degree polynomial through $(0,3)$ and $(1,7)$:\n$$\nS_{1}(z_{1}) = 4 z_{1} + 3.\n$$\nChecks in Round 1:\n- Degree check: $\\deg S_{1} = 1 \\leq \\deg_{x_{1}} g = 1$; passes.\n- Consistency: $S_{1}(0) + S_{1}(1) = 3 + 7 = 10 = C'$; passes.\nSet $r_{1} = 5$, so\n$$\nC_{1} = S_{1}(r_{1}) = 4 \\cdot 5 + 3 = 20 + 3 = 23 \\equiv 10 \\mod 13.\n$$\n\nRound 2: With $r_{1} = 5$, the prover computes the true value at $z_{2} = 0$:\n$$\nS_{2}(0) = g(5, 0) = 5 \\cdot 0 + 2 \\cdot 5 + 3 \\cdot 0 = 10 \\mod 13.\n$$\nTo satisfy $S_{2}(0) + S_{2}(1) = C_{1}$, set\n$$\nS_{2}(1) = C_{1} - S_{2}(0) = 10 - 10 = 0 \\mod 13.\n$$\nInterpolate through $(0,10)$ and $(1,0)$:\n$$\nS_{2}(z_{2}) = 3 z_{2} + 10.\n$$\nChecks in Round 2:\n- Degree check: $\\deg S_{2} = 1 \\leq \\deg_{x_{2}} g = 1$; passes.\n- Consistency: $S_{2}(0) + S_{2}(1) = 10 + 0 = 10 = C_{1}$; passes.\nSet $r_{2} = 7$, so\n$$\nC_{2} = S_{2}(r_{2}) = 3 \\cdot 7 + 10 = 21 + 10 = 31 \\equiv 5 \\mod 13.\n$$\n\nFinal check:\n$$\ng(r_{1}, r_{2}) = g(5,7) = 5 \\cdot 7 + 2 \\cdot 5 + 3 \\cdot 7 = 35 + 10 + 21 = 66 \\equiv 1 \\mod 13,\n$$\nwhile $C_{2} = 5$. Therefore $g(r_{1}, r_{2}) \\neq C_{2}$, so the first failing check is the final evaluation check.", "answer": "$$\\boxed{D}$$", "id": "1463887"}]}