{"hands_on_practices": [{"introduction": "Let's begin with a tangible problem to see the core concepts of communication complexity in action. This exercise [@problem_id:1421116] asks us to find the minimum communication needed for two parties to determine if their nodes are adjacent on a simple cycle graph. By solving this, you will practice the fundamental two-step process: establishing an upper bound by designing a straightforward protocol, and then proving a matching lower bound using the powerful fooling set argument.", "problem": "Two parties, Alice and Bob, are tasked with a computational problem related to a network structure. The network is a cycle graph with 10 vertices, labeled consecutively as 0, 1, 2, ..., 9. In this graph, any vertex $i$ is connected by an edge only to vertex $(i-1) \\pmod{10}$ and vertex $(i+1) \\pmod{10}$.\n\nAlice is privately given a vertex label $x \\in \\{0, 1, ..., 9\\}$, and Bob is privately given a vertex label $y \\in \\{0, 1, ..., 9\\}$. Alice does not know Bob's vertex, and Bob does not know Alice's vertex. Their goal is to determine if their vertices are adjacent in the graph. They can communicate by sending bits to each other over a channel, following a pre-arranged protocol.\n\nWhat is the absolute minimum number of bits that must be exchanged between them in the worst-case input scenario to guarantee that Alice learns whether her vertex is adjacent to Bob's?\n\nA. 3\n\nB. 4\n\nC. 5\n\nD. 10", "solution": "Let the set of vertices be $V = \\{0, 1, \\dots, 9\\}$. Alice's input is $x \\in V$ and Bob's input is $y \\in V$. They want to compute the function $ADJ(x, y)$, where $ADJ(x, y) = 1$ if vertices $x$ and $y$ are adjacent, and $ADJ(x, y) = 0$ otherwise. According to the problem description, adjacency in the 10-vertex cycle graph means $y = (x+1) \\pmod{10}$ or $y = (x-1) \\pmod{10}$. The final result must be known to Alice.\n\nFirst, we establish an upper bound on the number of bits required. An upper bound can be found by constructing a valid communication protocol.\n\nConsider the following protocol:\n1. Bob sends his input vertex, $y$, to Alice.\n2. Alice receives $y$. Since she knows her own input, $x$, she now has both inputs.\n3. Alice computes $ADJ(x, y)$ by checking if $y$ is equal to $(x+1) \\pmod{10}$ or $(x-1) \\pmod{10}$. Since she now knows the result, the protocol is complete.\n\nLet's analyze the number of bits required for this protocol. Bob's input $y$ can be any of the 10 values in $\\{0, 1, \\dots, 9\\}$. To encode one of 10 possibilities, a minimum of $\\lceil \\log_2(10) \\rceil$ bits are required.\n$\\log_2(8) = 3$ and $\\log_2(16) = 4$, so $\\log_2(10)$ is between 3 and 4. Thus, $\\lceil \\log_2(10) \\rceil = 4$.\nBob can send a 4-bit binary representation of his number $y$ to Alice. This protocol requires a total of 4 bits of communication. This establishes an upper bound: the minimum number of bits required is at most 4.\n\nNext, we establish a lower bound on the number of bits. To show that 4 bits is the minimum, we must prove that no protocol with 3 or fewer bits can solve the problem. We will use a \"fooling set\" argument. Any deterministic protocol with $k$ bits of communication can have at most $2^k$ different communication transcripts (the sequence of messages exchanged). If two different input pairs $(x_1, y_1)$ and $(x_2, y_2)$ produce the same communication transcript, the protocol cannot distinguish between them. This implies that the \"crossed\" pairs $(x_1, y_2)$ and $(x_2, y_1)$ must also produce that same transcript. For a correct protocol, all four of these input pairs must result in the same output value (this is known as a monochromatic rectangle). If we can find a set of $M$ input pairs, all of which must have different communication transcripts in any valid protocol, then we need at least $M$ different transcripts. This implies $2^k \\ge M$, or $k \\ge \\lceil \\log_2(M) \\rceil$.\n\nLet's construct such a set of pairs. Consider the set $S$ of 10 input pairs where the vertices are adjacent:\n$S = \\{ (0,1), (1,2), (2,3), (3,4), (4,5), (5,6), (6,7), (7,8), (8,9), (9,0) \\}$.\nFor every pair $(x,y) \\in S$, the function value is $ADJ(x,y) = 1$.\n\nLet's take any two distinct pairs from $S$: $(x_1, y_1) = (i, (i+1)\\pmod{10})$ and $(x_2, y_2) = (j, (j+1)\\pmod{10})$, where $i \\neq j$.\nSuppose, for the sake of contradiction, that these two pairs could produce the same communication transcript. This would imply that the crossed pairs $(x_1, y_2) = (i, (j+1)\\pmod{10})$ and $(x_2, y_1) = (j, (i+1)\\pmod{10})$ must also have the value $ADJ=1$.\nLet's check this condition.\n$ADJ(i, (j+1)\\pmod{10}) = 1$ implies $(j+1) \\equiv i \\pm 1 \\pmod{10}$.\nThis gives two possibilities:\n1a) $j+1 \\equiv i+1 \\pmod{10} \\implies j \\equiv i \\pmod{10}$. This is not possible as we chose distinct pairs, $i \\ne j$.\n1b) $j+1 \\equiv i-1 \\pmod{10} \\implies j \\equiv i-2 \\pmod{10}$.\n\n$ADJ(j, (i+1)\\pmod{10}) = 1$ implies $(i+1) \\equiv j \\pm 1 \\pmod{10}$.\nThis gives two possibilities:\n2a) $i+1 \\equiv j+1 \\pmod{10} \\implies i \\equiv j \\pmod{10}$. Again, not possible.\n2b) $i+1 \\equiv j-1 \\pmod{10} \\implies i \\equiv j-2 \\pmod{10}$.\n\nSo, for both crossed pairs to have an output of 1, we must satisfy both $j \\equiv i-2 \\pmod{10}$ and $i \\equiv j-2 \\pmod{10}$.\nSubstituting the first congruence into the second gives:\n$i \\equiv (i-2) - 2 \\pmod{10}$\n$i \\equiv i-4 \\pmod{10}$\n$0 \\equiv -4 \\pmod{10}$, which implies $4 \\equiv 0 \\pmod{10}$.\nThis is false, since 10 is not a divisor of 4.\n\nThis contradiction shows that for any two distinct pairs from our set $S$, it is impossible for them to be part of the same monochromatic rectangle with value 1. Therefore, any correct protocol must produce a unique communication transcript for each of the 10 pairs in $S$.\nTo have at least 10 different transcripts, the number of bits exchanged, $k$, must satisfy $2^k \\ge 10$.\nThe smallest integer $k$ that satisfies this inequality is $k=4$, since $2^3=8  10$ and $2^4=16 \\ge 10$.\nThis establishes a lower bound: the minimum number of bits is at least 4.\n\nSince we have found an upper bound of 4 bits and a lower bound of 4 bits, the minimum number of bits required is exactly 4.\nComparing this with the given options:\nA. 3 - Incorrect, less than the lower bound.\nB. 4 - Correct.\nC. 5 - Incorrect, this is a valid number of bits for a simple protocol, but not the minimum.\nD. 10 - Incorrect.\n\nThe minimum number of bits is 4.", "answer": "$$\\boxed{B}$$", "id": "1421116"}, {"introduction": "Real-world problems often involve large inputs, but the communication required may depend only on a small, distilled piece of information. This practice [@problem_id:1421146] exemplifies this through a scenario with long bitstrings, where the goal is to compare the number of '1's. This exercise will guide you through the critical skill of problem reduction, showing how to boil a complex task down to the fundamental `EQUALITY` problem and determine its precise communication cost.", "problem": "Two distributed sensors, let's call them Alice and Bob, are monitoring a certain environmental parameter. Over a one-hour period, each sensor takes $n=1000$ independent binary measurements, resulting in an $n$-bit string for each sensor. Let $x$ be the string held by Alice and $y$ be the string held by Bob. A '1' in a measurement signifies an event of interest, and a '0' signifies no event.\n\nTo ensure their counting mechanisms are synchronized, they need to determine if they have detected the same total number of events. They want to compute the function $f(x, y)$, which is defined to be $1$ if the number of '1's in string $x$ is equal to the number of '1's in string $y$, and $0$ otherwise.\n\nAlice and Bob can communicate by exchanging bits over a channel. A deterministic protocol is a predefined set of rules that they follow to exchange messages. A protocol is considered to have computed the function for a given input pair $(x, y)$ once at least one of the parties knows the correct value of $f(x,y)$. The cost of a protocol for a specific pair of inputs $(x, y)$ is the total number of bits exchanged. The deterministic communication complexity of the function $f$ is the minimum possible cost for the worst-case input pair $(x, y)$, achieved by the most efficient protocol.\n\nWhat is the exact deterministic communication complexity for this synchronization-check function $f$ with $n=1000$? Provide your answer as an integer.", "solution": "Let $n$ be the string length and define the Hamming weights $a=|x|$ and $b=|y|$. Then $a,b \\in \\{0,1,\\dots,n\\}$, so there are $m=n+1$ possible values for each. The function is\n$$\nf(x,y)=1 \\;\\;\\Longleftrightarrow\\;\\; a=b.\n$$\nThus the problem reduces to computing equality on an $m$-element domain.\n\nUpper bound: Alice can compute $a$ locally and send its binary encoding to Bob using\n$$\nL=\\lceil \\log_{2} m \\rceil=\\lceil \\log_{2} (n+1) \\rceil\n$$\nbits, which suffices to uniquely identify one of $m$ possibilities. Bob computes $b$ locally and outputs $1$ if and only if the received value equals $b$. Hence there is a deterministic protocol with worst-case cost $L=\\lceil \\log_{2} (n+1) \\rceil$ bits.\n\nLower bound: Consider the set\n$$\nS=\\{(i,i): i\\in\\{0,1,\\dots,n\\}\\},\n$$\nwhich has size $|S|=m=n+1$. For any distinct $(i,i),(j,j)\\in S$ with $i\\neq j$, we have $f(i,i)=1$ and $f(i,j)=f(j,i)=0$, so $S$ is a $1$-fooling set. By the fooling set lower bound, the deterministic communication complexity $D(f)$ satisfies\n$$\nD(f)\\geq \\log_{2} |S|=\\log_{2} (n+1).\n$$\nSince $D(f)$ is an integer, this implies\n$$\nD(f)\\geq \\lceil \\log_{2} (n+1) \\rceil.\n$$\nCombining the upper and lower bounds yields the exact value\n$$\nD(f)=\\lceil \\log_{2} (n+1) \\rceil.\n$$\nFor $n=1000$, we have $m=1001$ and $2^{9}=5121001\\leq 1024=2^{10}$, hence\n$$\nD(f)=\\lceil \\log_{2} 1001 \\rceil=10.\n$$", "answer": "$$\\boxed{10}$$", "id": "1421146"}, {"introduction": "Proving a lower bound—showing that no protocol can be better than a certain cost—is often the most challenging part of communication complexity. The fooling set method is our primary tool for this, and this exercise [@problem_id:1421154] provides a direct workout for mastering it. Your task is to construct the largest possible \"distinguishing set\" for the one's complement function, which will directly lead you to the tightest possible lower bound and deepen your understanding of this foundational technique.", "problem": "Two separated computing agents, Alice and Bob, are tasked with a collaborative calculation. Alice receives a bitstring $x = x_1x_2...x_n$ of length $n$, and Bob receives a bitstring $y = y_1y_2...y_n$ of the same length $n$. Their goal is to determine if $y$ is the one's complement of $x$. The one's complement of a bitstring is found by flipping all of its bits (changing 0s to 1s and 1s to 0s). Formally, they want to compute a function $f(x, y)$ which equals 1 if $y_i = 1 - x_i$ for all $i$ from 1 to $n$, and equals 0 otherwise.\n\nTo analyze the 'hardness' of this problem, we are interested in constructing a special kind of set. Consider a set of input pairs $S = \\{(x_1, y_1), (x_2, y_2), \\dots, (x_k, y_k)\\}$. This set is called a \"distinguishing set\" if it satisfies the following two criteria:\n\n1.  **Success Criterion:** For every pair $(x_i, y_i)$ in the set $S$, the function value must be 1. That is, $f(x_i, y_i) = 1$ for all $i=1, \\dots, k$.\n2.  **Fooling Criterion:** For any two *distinct* pairs $(x_i, y_i)$ and $(x_j, y_j)$ from the set $S$ (where $i \\neq j$), the function value for the \"crossed\" pair $(x_i, y_j)$ must be 0. That is, $f(x_i, y_j) = 0$.\n\nYour task is to determine the maximum possible size, $k$, of such a distinguishing set $S$. Express your answer as a function of $n$.", "solution": "Let $f:\\{0,1\\}^{n}\\times\\{0,1\\}^{n}\\to\\{0,1\\}$ be defined by $f(x,y)=1$ if and only if $y$ is the bitwise complement of $x$, i.e., $y=\\overline{x}$ where $(\\overline{x})_{i}=1-x_{i}$ for all $i\\in\\{1,\\dots,n\\}$.\n\nLower bound (explicit construction):\nConsider the set\n$$\nS^{\\ast}=\\{(x,\\overline{x}) : x\\in\\{0,1\\}^{n}\\}.\n$$\nSuccess criterion: For every $(x,\\overline{x})\\in S^{\\ast}$, by definition $f(x,\\overline{x})=1$.\nFooling criterion: Take any two distinct pairs $(x,\\overline{x})$ and $(x',\\overline{x'})$ in $S^{\\ast}$ with $x\\neq x'$. Then\n$$\nf(x,\\overline{x'})=1 \\iff \\overline{x'}=\\overline{x} \\iff x'=x,\n$$\nwhich is false because $x\\neq x'$. Hence $f(x,\\overline{x'})=0$. Therefore $S^{\\ast}$ is a distinguishing set of size $|S^{\\ast}|=2^{n}$, giving $k\\geq 2^{n}$.\n\nUpper bound (necessity):\nLet $S=\\{(x_{i},y_{i})\\}_{i=1}^{k}$ be any distinguishing set. By the success criterion, for each $i$ we must have $y_{i}=\\overline{x_{i}}$. Thus the map $(x_{i},y_{i})\\mapsto x_{i}$ is injective on $S$ because if $x_{i}=x_{j}$ then $y_{i}=\\overline{x_{i}}=\\overline{x_{j}}=y_{j}$, implying $(x_{i},y_{i})=(x_{j},y_{j})$, which contradicts distinctness when $i\\neq j$. Since there are exactly $2^{n}$ possible $x\\in\\{0,1\\}^{n}$, it follows that $k\\leq 2^{n}$.\n\nCombining the lower and upper bounds yields the maximum possible size\n$$\nk_{\\max}=2^{n}.\n$$", "answer": "$$\\boxed{2^{n}}$$", "id": "1421154"}]}