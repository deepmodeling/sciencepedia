{"hands_on_practices": [{"introduction": "Often in data science, a high-level question can be simplified to a core computational problem. This exercise explores such a reduction, transforming the task of comparing the average of two large vectors into the fundamental problem of determining which of two numbers is larger. This practice is designed to highlight the immense power of randomized protocols, which can solve this \"Greater-Than\" problem with surprisingly little communication, showcasing an exponential advantage over any deterministic method [@problem_id:1440940].", "problem": "Two data analysts, Alice and Bob, are working on a massive distributed user database. The database contains engagement scores for $n$ distinct users. Alice possesses a vector of scores $x = (x_1, x_2, \\dots, x_n)$ representing user engagement before a new feature launch. Bob possesses a second vector of scores $y = (y_1, y_2, \\dots, y_n)$ for the same set of users after the feature launch. Each score $x_i$ and $y_i$ is an integer from the set $\\{1, 2, \\dots, M\\}$, where $M$ and $n$ are large positive integers.\n\nAlice and Bob need to determine if the average engagement score after the launch is strictly lower than the average score before the launch. That is, they wish to compute the function $f(x, y) = 1$ if $\\frac{1}{n}\\sum_{i=1}^{n} y_i  \\frac{1}{n}\\sum_{i=1}^{n} x_i$, and $f(x, y)=0$ otherwise. *Note: The original question has been edited to match the provided solution.*\n\nThey are connected by a communication channel and their goal is to minimize the total number of bits exchanged. They have access to a shared string of unbiased random bits that they can both read at no cost. They are willing to accept a protocol that gives the correct answer with a probability of at least $2/3$ for every possible pair of input vectors $(x, y)$.\n\nLet $C(n, M)$ be the minimum number of bits that must be communicated in the worst case to compute $f(x, y)$ under these conditions. Which of the following best describes the asymptotic communication complexity $C(n, M)$?\n\nA. $O(1)$\n\nB. $O(\\log(\\log(nM)))$\n\nC. $O(\\log(nM))$\n\nD. $O(n \\log M)$\n\nE. $O(n M)$", "solution": "We first rewrite the task in terms of a two-party comparison problem. Define the sums\n$$\nS_{x}=\\sum_{i=1}^{n} x_{i},\\qquad S_{y}=\\sum_{i=1}^{n} y_{i}.\n$$\nThe question asks to determine if the average score after the launch ($\\bar{y}$) is strictly lower than before ($\\bar{x}$). This is equivalent to checking if $\\frac{1}{n}S_y  \\frac{1}{n}S_x$, which simplifies to $S_y  S_x$. Thus, the function Alice and Bob wish to compute is\n$$\nf(x,y)=\\mathbf{1}\\{S_{x}S_{y}\\},\n$$\nthat is, they only need to decide whether $S_{x}$ is greater than $S_{y}$. Therefore, the communication problem reduces to computing the greater-than predicate on two integers known separately to Alice and Bob.\n\nNext, we bound the ranges of $S_{x}$ and $S_{y}$. Since each coordinate satisfies $x_{i},y_{i}\\in\\{1,2,\\dots,M\\}$, we have\n$$\nn\\leq S_{x}\\leq nM,\\qquad n\\leq S_{y}\\leq nM.\n$$\nHence both $S_{x}$ and $S_{y}$ are integers in the interval $[n,nM]$, so each can be represented using\n$$\nk=\\lceil \\log_{2}(nM)\\rceil\n$$\nbits. No communication is required to compute $S_{x}$ and $S_{y}$ locally.\n\nThus, the communication task is exactly the public-coin randomized communication complexity of the greater-than function on $k$-bit integers. It is a standard result in communication complexity that the public-coin randomized complexity of greater-than on $k$-bit inputs satisfies\n$$\nR^{\\mathrm{pub}}(\\mathrm{GT}_{k})=\\Theta(\\log_{2} k).\n$$\nInformally, the upper bound $O(\\log_{2} k)$ follows from protocols that, using public randomness, locate the most significant differing bit with constant error using $O(\\log_{2} k)$ communicated bits. The lower bound $\\Omega(\\log_{2} k)$ follows from standard rectangle/corruption or information-theoretic arguments showing that any constant-error protocol must convey at least on the order of $\\log_{2} k$ bits to distinguish among the possible scales at which the first difference occurs.\n\nApplying this with $k=\\lceil \\log_{2}(nM)\\rceil$ yields\n$$\nC(n,M)=\\Theta\\big(\\log_{2}(\\log_{2}(nM))\\big).\n$$\nTherefore, asymptotically, the optimal worst-case communication is on the order of $\\log(\\log(nM))$, matching option B.", "answer": "$$\\boxed{B}$$", "id": "1440940"}, {"introduction": "Building on the use of modular arithmetic, this problem introduces the concept of \"fingerprinting\" an integer to test for a specific property—in this case, divisibility by a common factor. This hands-on practice is valuable for understanding the nature of one-sided error, a common feature in randomized algorithms where false negatives are impossible but false positives can occur (or vice-versa). You will also calculate the tangible communication cost, linking the size of the numbers involved directly to the number of bits that need to be transmitted [@problem_id:1440982].", "problem": "Alice and Bob are studying randomized communication protocols. They are tasked with determining if their respective integers, $x$ and $y$, share a common prime factor. They devise the following one-way protocol, which relies on a shared public random source:\n\n**Protocol: Common Factor Test**\n1.  A prime number $p$ is selected uniformly at random from the set of all prime numbers less than or equal to a publicly known integer $M$.\n2.  Alice computes $a = x \\pmod p$ and transmits the value of $a$ to Bob.\n3.  Bob receives $a$. He then computes $b = y \\pmod p$.\n4.  Bob's Output Rule: If $a=0$ and $b=0$, Bob outputs that a common factor was found. Otherwise, he outputs that no common factor was found with the chosen prime $p$.\n\nThis protocol is said to have a one-sided error. If the protocol outputs that a common factor was found, it is always correct (i.e., $\\text{gcd}(x,y)  1$). However, if $\\text{gcd}(x,y)  1$, the protocol might fail to find a common factor, resulting in an error.\n\nConsider a specific scenario where the parameter $M=100$. Alice's number is $x = 177$ and Bob's number is $y = 295$. You are given that the prime factorization of these numbers are $x=3 \\times 59$ and $y=5 \\times 59$.\n\nWhat is the communication cost of this protocol, measured in the number of bits Alice must send, and what is the probability of error for this specific pair of inputs $(x, y)$? The probability of error is defined as the probability that the protocol fails to find a common factor, given that one exists.\n\nA. Communication Cost: 6 bits, Error Probability: 24/25\n\nB. Communication Cost: 7 bits, Error Probability: 1/25\n\nC. Communication Cost: 7 bits, Error Probability: 24/25\n\nD. Communication Cost: 8 bits, Error Probability: 24/25\n\nE. Communication Cost: 7 bits, Error Probability: 23/24", "solution": "A prime $p$ is chosen uniformly from the set of primes at most $M=100$. Let this set be $\\mathcal{P}$, with size $|\\mathcal{P}|=\\pi(100)$. The number of primes at most $100$ is $\\pi(100)=25$.\n\nCommunication cost: Alice sends $a=x \\bmod p$, which lies in the set $\\{0,1,\\dots,p-1\\}$. The number of bits needed to encode any such residue is $\\lceil \\log_{2} p \\rceil$. The protocol must work for the largest possible $p \\leq 100$, which is $97$. Since $2^{6}=6497\\leq 2^{7}=128$, it follows that we need to represent numbers up to $p-1=96$. The number of bits required is\n$$\n\\lceil \\log_{2} 97 \\rceil=7,\n$$\nso the communication cost is $7$ bits.\n\nError probability: The protocol outputs “found” if and only if $a=0$ and $b=0$, which is equivalent to $p \\mid x$ and $p \\mid y$, i.e., $p$ divides $\\gcd(x,y)$. Given $x=3 \\times 59$ and $y=5 \\times 59$, we have $\\gcd(x,y)=59$. Therefore the protocol succeeds exactly when $p=59$. Since $p$ is uniform over $\\mathcal{P}$ with $|\\mathcal{P}|=25$, the success probability is\n$$\n\\frac{1}{25},\n$$\nand hence the error probability is\n$$\n1-\\frac{1}{25}=\\frac{24}{25}.\n$$\n\nThus the correct option is “Communication Cost: 7 bits, Error Probability: $24/25$.”", "answer": "$$\\boxed{C}$$", "id": "1440982"}, {"introduction": "This final practice scales up the fingerprinting technique to tackle a classic challenge in bioinformatics and stringology: finding common substrings. The exercise demonstrates how randomized methods can efficiently manage vast amounts of data by comparing compact \"fingerprints\" instead of the large substrings themselves. You will engage in a realistic design scenario, working backwards from a desired error probability to select an appropriate prime modulus, and then calculating the total communication cost for the protocol in a worst-case scenario [@problem_id:1440992].", "problem": "Alice and Bob are collaborating on a large-scale computational biology project. Alice has a Deoxyribonucleic acid (DNA) sequence $x$ and Bob has a DNA sequence $y$, both of length $n$. The sequences are represented as strings over the alphabet $\\{A, C, G, T\\}$. They want to determine if there is a common substring of length exactly $k$ in their sequences. A direct comparison would require transmitting one of the aforementioned sequences, which is costly. They decide to use a randomized communication protocol which is described below.\n\n1.  They publicly agree on a mapping from the alphabet $\\{A, C, G, T\\}$ to the set of integers $\\{0, 1, 2, 3\\}$. This transforms their DNA sequences into integer strings.\n2.  They interpret each substring of length $k$ as the base-4 representation of an integer. For a substring $s = s_1 s_2 \\dots s_k$, where each $s_i$ is the integer corresponding to a DNA base, the associated integer value is $N(s) = \\sum_{i=1}^k s_i 4^{k-i}$.\n3.  To handle potentially large numbers, they also publicly agree on a prime number $p$. Alice calculates a \"fingerprint\" for each of her $n-k+1$ substrings of length $k$. The fingerprint of a substring $s$ is $FP(s) = N(s) \\pmod p$. She collects these into a set $F_x$.\n4.  In a single message, Alice sends the entire set of fingerprints $F_x$ to Bob.\n5.  Bob computes the fingerprints for his own substrings, creating the set $F_y$. He then checks if the intersection $F_x \\cap F_y$ is non-empty. If it is, they conclude that a common substring of length $k$ likely exists. If the intersection is empty, they conclude one does not exist.\n\nThis protocol has a one-sided error: it never fails to detect a common substring if one exists, but it may report one when none exists (a false positive). Suppose $n=1,000,000$ and $k=50$. They want the probability of a false positive to be at most $10^{-6}$. To achieve this, they choose the prime $p$ uniformly at random from the set of primes in an interval $[M, 2M]$. You are given that the number of distinct prime factors of any integer $Z > 1$ is strictly less than $\\log_2(Z)$. They determine that to meet their desired error bound, they must select $M$ to be the smallest integer power of 10 that suffices.\n\nYour task is to calculate the total number of bits Alice must send to Bob in the worst case. To send her set of fingerprints, Alice transmits each unique fingerprint value one by one. The number of bits required for each fingerprint is determined by the largest possible prime they might agree on. Express your final answer for the total number of bits in scientific notation, rounded to three significant figures.", "solution": "Let $n=10^{6}$ and $k=50$. Each length-$k$ substring $s$ maps to an integer $N(s)\\in\\{0,1,\\dots,4^{k}-1\\}$. For strings $x$ and $y$ with no common length-$k$ substring, a false positive occurs iff there exist $s$ from $x$ and $t$ from $y$ with $N(s)\\neq N(t)$ but $N(s)\\equiv N(t)\\pmod p$, i.e., $p$ divides $Z_{s,t} = |N(s)-N(t)|$.\n\nLet $L= n-k+1$ be the number of length-$k$ substrings in each string; here\n$$\nL=n-k+1=10^{6}-49=999{,}951.\n$$\nThere are at most $L^{2}$ ordered pairs $(s,t)$, and for each such pair, $1\\leq Z_{s,t}\\leq 4^{k}-1$. Let $D$ be the set of all such $Z_{s,t}$ for which $Z_{s,t}\\geq 1$. A false positive arises if the chosen prime $p\\in[M,2M]$ divides at least one $Z\\in D$.\n\nBy the given fact, the number of distinct prime factors of any integer $Z1$ is strictly less than $\\log_{2}(Z)$. The number of distinct prime factors across all possible differences $Z \\in D$ can be bounded by the sum of the number of prime factors for each difference. A simpler approach uses the union bound on primes: the total number of distinct prime factors of all $Z \\in D$ is less than $\\log_2(\\prod_{Z \\in D} Z) \\le |D| \\cdot \\log_2(\\max Z)$.\nTherefore, the number of distinct \"bad\" primes that could divide any of these differences is strictly less than\n$$\n|D| \\cdot \\log_{2}(4^k) \\le L^2 \\cdot 2k.\n$$\nThus the number of “bad” primes is strictly less than $2kL^{2}$. If $P(M)$ denotes the number of primes in $[M,2M]$, then choosing $p$ uniformly at random from these primes yields\n$$\n\\Pr[\\text{false positive}]\\leq \\frac{2kL^{2}}{P(M)}.\n$$\nTo ensure this is at most $10^{-6}$, it suffices to have\n$$\nP(M)\\geq 10^{6}\\cdot 2kL^{2}.\n$$\nWith $k=50$ and $L=999{,}951$,\n$$\n2kL^2 = 100 \\times (999,951)^2 \\approx 100 \\times (10^6-50)^2 \\approx 10^{14}.\n$$\nMore precisely, $2kL^2 = 100 \\times 999,902,002,401 = 99,990,200,240,100 \\approx 9.999 \\times 10^{13}$.\nHence a sufficient condition is\n$$\nP(M)\\geq 10^{6}\\cdot (9.999... \\times 10^{13}) \\approx 9.999\\times 10^{19}.\n$$\n\nUsing the prime number theorem as an estimate, the number of primes in $[M,2M]$ satisfies $P(M)\\approx \\frac{M}{\\ln M}$. A conservative lower bound is $P(M)\\gtrsim \\frac{M}{\\ln(2M)}$. We need to choose $M$ as the smallest integer power of $10$ satisfying\n$$\n\\frac{M}{\\ln(2M)}\\geq 9.999\\times 10^{19}.\n$$\nTest $M=10^{21}$:\n$$\n\\frac{10^{21}}{\\ln(2\\times 10^{21})}=\\frac{10^{21}}{\\ln 2+21\\ln 10}\\approx \\frac{10^{21}}{49.05}\\approx 2.04\\times 10^{19}9.999\\times 10^{19},\n$$\nso $10^{21}$ is insufficient. Test $M=10^{22}$:\n$$\n\\frac{10^{22}}{\\ln(2\\times 10^{22})}=\\frac{10^{22}}{\\ln 2+22\\ln 10}\\approx \\frac{10^{22}}{51.35}\\approx 1.95\\times 10^{20}\\geq 9.999\\times 10^{19},\n$$\nso $M=10^{22}$ suffices and is the smallest power of $10$ that does.\n\nThe per-fingerprint bit length is determined by the largest possible agreed prime (at most $2M$), hence\n$$\nb=\\left\\lceil \\log_{2}(2M)\\right\\rceil=\\left\\lceil \\log_{2}(2\\times 10^{22})\\right\\rceil\n=\\left\\lceil 1+22\\log_{2}10\\right\\rceil\n=\\left\\lceil 1+22\\cdot \\frac{\\ln 10}{\\ln 2}\\right\\rceil\n=\\left\\lceil 74.082417\\right\\rceil=75.\n$$\nIn the worst case, all $L$ fingerprints are distinct modulo $p$ since $p\\gg L$, so Alice sends $L$ fingerprints. The total number of bits sent is\n$$\nT=b\\cdot L=75\\cdot 999{,}951=74{,}996{,}325=7.4996325\\times 10^{7}.\n$$\nRounded to three significant figures in scientific notation,\n$$\nT\\approx 7.50\\times 10^{7}.\n$$", "answer": "$$\\boxed{7.50 \\times 10^{7}}$$", "id": "1440992"}]}