{"hands_on_practices": [{"introduction": "The Time Hierarchy Theorem provides a powerful tool for proving that certain complexity classes are distinct. At its core, its application hinges on a specific mathematical condition involving the time-bounding functions, typically expressed as a limit. This first practice problem offers a direct opportunity to apply this condition, helping you build confidence in using the theorem's formal machinery to verify the existence of a hierarchy between two complexity classes.", "problem": "In the field of computational complexity theory, the Time Hierarchy Theorem is a fundamental result demonstrating that with more time, Turing machines can solve more problems. A simplified version of the deterministic Time Hierarchy Theorem can be stated as follows:\n\n**Theorem:** Let $f(n)$ and $g(n)$ be two time-constructible functions. A function $t(n)$ is considered time-constructible if there exists a Turing machine that, given an input of length $n$, computes the value $t(n)$ in time $O(t(n))$. If the following limit condition is satisfied:\n$$ \\lim_{n \\to \\infty} \\frac{f(n) \\log f(n)}{g(n)} = 0 $$\nthen the class of languages decidable in deterministic time $O(f(n))$ is a proper subset of the class of languages decidable in deterministic time $O(g(n))$. This relationship is denoted as $\\text{TIME}(f(n)) \\subsetneq \\text{TIME}(g(n))$. Note that for the purposes of this problem, $\\log(x)$ refers to the natural logarithm of $x$.\n\nConsider the two time-constructible functions $f(n) = n$ and $g(n) = n (\\log n)^2$. Based on the theorem provided, determine the relationship between the complexity classes $\\text{TIME}(f(n))$ and $\\text{TIME}(g(n))$.\n\nA. $\\text{TIME}(n) = \\text{TIME}(n(\\log n)^2)$\n\nB. $\\text{TIME}(n) \\subsetneq \\text{TIME}(n(\\log n)^2)$\n\nC. $\\text{TIME}(n(\\log n)^2) \\subsetneq \\text{TIME}(n)$\n\nD. The theorem is insufficient to determine the relationship.", "solution": "We are given time-constructible functions $f(n)=n$ and $g(n)=n(\\log n)^{2}$. The deterministic Time Hierarchy Theorem applies if\n$$\n\\lim_{n \\to \\infty} \\frac{f(n)\\log f(n)}{g(n)}=0.\n$$\nCompute the limit using $f(n)=n$ and $g(n)=n(\\log n)^{2}$:\n$$\n\\frac{f(n)\\log f(n)}{g(n)}=\\frac{n\\log n}{n(\\log n)^{2}}=\\frac{1}{\\log n}.\n$$\nThen\n$$\n\\lim_{n \\to \\infty} \\frac{1}{\\log n}=0.\n$$\nSince the limit condition holds and both functions are time-constructible as stated, the theorem implies\n$$\n\\text{TIME}(n)\\subsetneq \\text{TIME}\\big(n(\\log n)^{2}\\big).\n$$\nTherefore, the correct option is B.", "answer": "$$\\boxed{B}$$", "id": "1464342"}, {"introduction": "To truly grasp the Time Hierarchy Theorem, we must look beyond its formula and understand the elegant proof technique that underpins it: diagonalization. This exercise invites you to think about the construction of a special \"diagonal\" language, which is designed specifically to be decidable in one time bound but not a smaller one. Understanding this clever construction reveals why giving a Turing machine more time allows it to solve fundamentally new problems.", "problem": "In the study of computational complexity, the Time Hierarchy Theorem establishes that given more computational time, a deterministic Turing Machine can decide a strictly larger class of languages. The proof of this theorem relies on a diagonalization argument, constructing a specific language that is decidable within a certain time bound but not within a smaller one.\n\nConsider a hypothetical machine called the \"Universal Decider\" $D$. This machine takes as input a string $\\langle M \\rangle$, which is the standard encoding of some deterministic single-tape Turing Machine (TM) $M$. Let $n = |\\langle M \\rangle|$ denote the length of the input string.\n\nThe Universal Decider $D$ operates as follows:\n1. On input $\\langle M \\rangle$, it calculates a time limit of $n^2$ computational steps.\n2. It then simulates the behavior of the machine $M$ when given its own description, $\\langle M \\rangle$, as input.\n3. This simulation is run for at most the calculated time limit of $n^2$ steps.\n4. Based on the outcome of this limited simulation, the Universal Decider $D$ either accepts or rejects its input $\\langle M \\rangle$.\n\nWhich of the following statements precisely describes the condition under which the Universal Decider $D$ accepts its input $\\langle M \\rangle$?\n\nA. The Decider $D$ accepts $\\langle M \\rangle$ if and only if the machine $M$, when run on its own description $\\langle M \\rangle$ as input, halts and rejects within a time limit of $|\\langle M \\rangle|^2$ computational steps.\n\nB. The Decider $D$ accepts $\\langle M \\rangle$ if and only if the machine $M$, when run on its own description $\\langle M \\rangle$ as input, halts and accepts within a time limit of $|\\langle M \\rangle|^2$ computational steps.\n\nC. The Decider $D$ accepts $\\langle M \\rangle$ if and only if the machine $M$, when run on its own description $\\langle M \\rangle$ as input, eventually halts and rejects, regardless of the number of steps taken.\n\nD. The Decider $D$ accepts $\\langle M \\rangle$ if and only if the Decider $D$ itself halts and accepts the input $\\langle M \\rangle$ within a time limit of $|\\langle M \\rangle|^2$ computational steps.\n\nE. The Decider $D$ accepts $\\langle M \\rangle$ if and only if the machine $M$ halts and rejects the empty string $\\epsilon$ within a time limit of $|\\langle M \\rangle|^2$ computational steps.", "solution": "Let $M$ be a deterministic single-tape Turing machine and let $\\langle M \\rangle$ be its standard encoding. Let $n = |\\langle M \\rangle|$. By the description, the Universal Decider $D$ on input $\\langle M \\rangle$ computes the time bound $t(n) = n^{2}$ and simulates $M$ on input $\\langle M \\rangle$ for at most $t(n)$ steps. The possible bounded-simulation outcomes are: $M$ halts and accepts within $t(n)$ steps, $M$ halts and rejects within $t(n)$ steps, or $M$ does not halt within $t(n)$ steps. The decision of $D$ must be based solely on these bounded outcomes.\n\nIn the standard diagonalization used in the time hierarchy theorem, $D$ is constructed to disagree with $M$ whenever the simulation halts within the time bound. Concretely, the canonical rule is: if $M$ accepts $\\langle M \\rangle$ within $t(n)$ steps, then $D$ rejects; otherwise (i.e., if $M$ rejects within $t(n)$ steps or fails to halt within $t(n)$ steps), $D$ accepts. Thus, the acceptance condition for $D$ is that the bounded simulation does not accept, which in particular includes the case that $M$ halts and rejects within $t(n)$ steps.\n\nAmong the given options, the only statement that matches a precise condition expressible in terms of the bounded simulation result and consistent with the diagonalization pattern is that $D$ accepts when $M$ halts and rejects within the time bound. Option B asserts the opposite condition (accepts on accept), which contradicts the diagonalization strategy. Option C ignores the time bound and refers to unbounded halting, which $D$ cannot determine under a bounded simulation. Option D is circular and provides no informative condition. Option E refers to the wrong input (the empty string $\\epsilon$) and is unrelated to the described simulation on $\\langle M \\rangle$.\n\nTherefore, the correct description is that $D$ accepts $\\langle M \\rangle$ if and only if $M$ halts and rejects $\\langle M \\rangle$ within the limit of $|\\langle M \\rangle|^{2}$ steps.", "answer": "$$\\boxed{A}$$", "id": "1464344"}, {"introduction": "Knowing how and when to apply a theorem is crucial, but equally important is understanding the precise scope of its conclusions. The Time Hierarchy Theorem makes a powerful *existential* claim; it guarantees that *some* language exists in the larger time class that is not in the smaller one, such as showing $\\mathrm{TIME}(n^2) \\subsetneq \\mathrm{TIME}(n^3)$. This final practice addresses a common pitfall, challenging you to consider whether the theorem provides information about a *specific* problem, thereby honing your ability to interpret its results with scientific precision.", "problem": "Let two functions $f(n)$ and $g(n)$ be time-constructible, where a function $t(n)$ is time-constructible if there exists a Turing Machine that computes the value $t(n)$ from an input of length $n$ in $O(t(n))$ time. The deterministic Time Hierarchy Theorem states that if $f(n) \\log f(n) = o(g(n))$, then the complexity class $TIME(f(n))$ is a strict subset of $TIME(g(n))$. This implies there exists at least one language that can be decided in time $O(g(n))$ but not in time $O(f(n))$.\n\nSuppose a computer scientist, Alice, has developed an algorithm for a specific decision problem, corresponding to a language $L$. Her algorithm runs on a deterministic Turing Machine and has a worst-case time complexity of $O(n^3)$ on inputs of length $n$. Therefore, it is known that $L \\in TIME(n^3)$.\n\nAnother scientist, Bob, claims to have a more efficient algorithm for the *same* language $L$, with a worst-case time complexity of $O(n^2)$.\n\nBased *only* on the deterministic Time Hierarchy Theorem and the information provided, what can be concluded about Bob's claim?\n\nA. The Time Hierarchy Theorem proves that Bob's claim must be false, because $TIME(n^2)$ is a strict subset of $TIME(n^3)$.\n\nB. The Time Hierarchy Theorem proves that Bob's claim must be true, as all problems in $TIME(n^3)$ can be simplified to $TIME(n^2)$.\n\nC. The Time Hierarchy Theorem cannot be applied because the function $n^2 \\log(n^2)$ is not in $o(n^3)$.\n\nD. The Time Hierarchy Theorem guarantees that there are languages in $TIME(n^3)$ that are not in $TIME(n^2)$, but it provides no information about whether the specific language $L$ is one of them.\n\nE. The Time Hierarchy Theorem is irrelevant because the functions $n^2$ and $n^3$ are not time-constructible.", "solution": "Let $f(n) = n^{2}$ and $g(n) = n^{3}$. Polynomials are time-constructible, so both $f$ and $g$ are time-constructible by standard results on simulation of counters on Turing Machines.\n\nCompute $f(n)\\log f(n)$:\n$$\nf(n)\\log f(n) = n^{2}\\log\\!\\big(n^{2}\\big) = 2 n^{2}\\log n.\n$$\nTo check the hypothesis of the deterministic Time Hierarchy Theorem, evaluate the asymptotic ratio:\n$$\n\\frac{f(n)\\log f(n)}{g(n)} = \\frac{2 n^{2}\\log n}{n^{3}} = \\frac{2 \\log n}{n}.\n$$\nSince\n$$\n\\lim_{n\\to\\infty} \\frac{2 \\log n}{n} = 0,\n$$\nit follows that $f(n)\\log f(n) = o\\!\\big(g(n)\\big)$.\n\nBy the deterministic Time Hierarchy Theorem, this implies\n$$\nTIME\\!\\big(n^{2}\\big) \\subsetneq TIME\\!\\big(n^{3}\\big).\n$$\nTherefore, there exist languages that can be decided in time $O\\!\\big(n^{3}\\big)$ but not in time $O\\!\\big(n^{2}\\big)$. However, the theorem is existential: it guarantees the existence of at least one such language but does not identify which languages have this property. Given only that $L \\in TIME\\!\\big(n^{3}\\big)$, the theorem does not allow us to conclude whether $L \\in TIME\\!\\big(n^{2}\\big)$ or $L \\notin TIME\\!\\big(n^{2}\\big)$. Hence, the theorem provides no information about the truth of Bob’s specific claim for $L$.\n\nOption A is incorrect because the strict containment does not imply that every language in $TIME\\!\\big(n^{3}\\big)$ lies outside $TIME\\!\\big(n^{2}\\big)$. Option B is false because the theorem does not collapse $TIME\\!\\big(n^{3}\\big)$ to $TIME\\!\\big(n^{2}\\big)$. Option C is false because $n^{2}\\log\\!\\big(n^{2}\\big) = o\\!\\big(n^{3}\\big)$. Option E is false because $n^{2}$ and $n^{3}$ are time-constructible.\n\nTherefore, the correct conclusion is that the theorem guarantees the existence of languages in $TIME\\!\\big(n^{3}\\big)$ not in $TIME\\!\\big(n^{2}\\big)$, but it does not determine whether the specific language $L$ is one of them.", "answer": "$$\\boxed{D}$$", "id": "1464341"}]}