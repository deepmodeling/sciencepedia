{"hands_on_practices": [{"introduction": "The best way to grasp the power of the Space Hierarchy Theorem is to see it in action. This first practice provides a direct application of the theorem to two complexity classes defined by rapidly growing functions. By confirming that all necessary conditions are met, you will prove a strict separation between $\\text{DSPACE}(2^n)$ and $\\text{DSPACE}(n!)$, developing a concrete understanding of how the theorem establishes a computational hierarchy [@problem_id:1463161].", "problem": "In computational complexity theory, we classify problems based on the computational resources required to solve them. The space complexity of an algorithm is the amount of memory (or space) it requires. The complexity class $\\text{DSPACE}(s(n))$ contains all decision problems that can be solved by a deterministic Turing machine using at most $O(s(n))$ space for an input of size $n$.\n\nA key tool for separating these classes is the Space Hierarchy Theorem. To apply it, certain conditions must be met. A function $s(n)$ is called **space-constructible** if there exists a Turing machine that, given an input of size $n$, computes the value $s(n)$ using at most $O(s(n))$ space.\n\nThe **Space Hierarchy Theorem** states the following:\nFor any two functions $f(n)$ and $s(n)$, if:\n1.  $s(n)$ is a space-constructible function,\n2.  $f(n) = \\Omega(\\log n)$, and\n3.  $f(n) \\in o(s(n))$, meaning $\\lim_{n \\to \\infty} \\frac{f(n)}{s(n)} = 0$,\n\nthen the complexity class $\\text{DSPACE}(f(n))$ is a proper subset of $\\text{DSPACE}(s(n))$, denoted as $\\text{DSPACE}(f(n)) \\subsetneq \\text{DSPACE}(s(n))$.\n\nAssume that the functions $f_1(n) = 2^n$ and $f_2(n) = n!$ are both space-constructible.\n\nBased on the theorem provided, can you conclude that $\\text{DSPACE}(2^n)$ is a proper subset of $\\text{DSPACE}(n!)$?\n\nA. Yes, because $2^n  n!$ for all $n \\ge 4$.\n\nB. No, because the limit $\\lim_{n \\to \\infty} \\frac{2^n}{n!}$ does not exist.\n\nC. Yes, because all conditions of the Space Hierarchy Theorem are satisfied with $f(n)=2^n$ and $s(n)=n!$.\n\nD. No, because $2^n \\notin o(n!)$. The function $2^n$ grows at a similar or faster rate than $n!$.\n\nE. No, because the condition $f(n) = \\Omega(\\log n)$ is not satisfied for $f(n)=2^n$.", "solution": "We apply the Space Hierarchy Theorem with $f(n)=2^{n}$ and $s(n)=n!$. By assumption, both $2^{n}$ and $n!$ are space-constructible, satisfying the first condition.\n\nNext, we verify $f(n)=\\Omega(\\log n)$. Exponential functions dominate logarithms, and more formally, there exist constants $c>0$ and $n_{0}\\in\\mathbb{N}$ such that for all $n\\geq n_{0}$,\n$$\n2^{n}\\geq c\\,\\log_{2}(n),\n$$\nhence $2^{n}=\\Omega(\\log n)$, satisfying the second condition.\n\nFinally, we show $2^{n}\\in o(n!)$ by proving\n$$\n\\lim_{n\\to\\infty}\\frac{2^{n}}{n!}=0.\n$$\nLet $a_{n}=\\frac{2^{n}}{n!}$. Then\n$$\n\\frac{a_{n+1}}{a_{n}}=\\frac{\\frac{2^{n+1}}{(n+1)!}}{\\frac{2^{n}}{n!}}=\\frac{2}{n+1}\\to 0\\quad\\text{as }n\\to\\infty.\n$$\nSince $\\frac{a_{n+1}}{a_{n}}\\to 0$, it follows that $a_{n}\\to 0$, hence $2^{n}\\in o(n!)$. This verifies the third condition.\n\nAll conditions of the Space Hierarchy Theorem are satisfied for $f(n)=2^{n}$ and $s(n)=n!$, so we conclude\n$$\n\\text{DSPACE}(2^{n})\\subsetneq \\text{DSPACE}(n!).\n$$\nTherefore, the correct option is C.", "answer": "$$\\boxed{C}$$", "id": "1463161"}, {"introduction": "After a successful application of the Space Hierarchy Theorem, it is crucial to understand its limitations. This exercise presents a scenario where two functions appear different, but their asymptotic growth rates are too close for the theorem to apply. By rigorously evaluating the little-o condition for functions like $s_1(n) = n^k$ and $s_2(n) = n^k + n^{k-1}\\log(n)$, you will learn why a significant asymptotic gap is a non-negotiable requirement for proving a strict separation between complexity classes [@problem_id:1463147].", "problem": "The Space Hierarchy Theorem is a fundamental result in computational complexity theory that establishes a hierarchy of space complexity classes. The theorem states:\nFor any space-constructible function $s_2(n)$, if $s_1(n)$ is another space-constructible function such that $s_1(n) \\in o(s_2(n))$, then $\\text{DSPACE}(s_1(n)) \\subsetneq \\text{DSPACE}(s_2(n))$.\nThe little-o notation, $s_1(n) \\in o(s_2(n))$, means that the function $s_1(n)$ is asymptotically smaller than $s_2(n)$, which is formally defined as $\\lim_{n \\to \\infty} \\frac{s_1(n)}{s_2(n)} = 0$. A function $f(n)$ is space-constructible if a Turing machine can compute $f(n)$ in space $O(f(n))$ on an input of length $n$. You may assume that all functions presented below are space-constructible.\n\nConsider the complexity classes $C_1 = \\text{DSPACE}(n^k)$ and $C_2 = \\text{DSPACE}(n^k + n^{k-1}\\log(n))$ for a fixed integer $k \\ge 1$. A student claims that because the term $n^{k-1}\\log(n)$ grows slower than $n^k$, the Space Hierarchy Theorem cannot be used to prove that $C_1$ is a proper subset of $C_2$.\n\nIs the student's claim correct?\n\nA. Yes, because $\\lim_{n \\to \\infty} \\frac{n^k}{n^k + n^{k-1}\\log(n)} = 1$.\n\nB. No, because $\\lim_{n \\to \\infty} \\frac{n^k}{n^k + n^{k-1}\\log(n)} = 0$.\n\nC. Yes, because $n^k$ and $n^k + n^{k-1}\\log(n)$ are not space-constructible.\n\nD. No, because the Space Hierarchy Theorem applies as long as the functions are not identical.", "solution": "We apply the Space Hierarchy Theorem, which requires $s_{1}(n) \\in o(s_{2}(n))$, i.e., \n$$\n\\lim_{n\\to\\infty}\\frac{s_{1}(n)}{s_{2}(n)}=0.\n$$\nLet $s_{1}(n)=n^{k}$ and $s_{2}(n)=n^{k}+n^{k-1}\\ln(n)$ (the base of the logarithm is immaterial asymptotically; we use the natural logarithm). Compute\n$$\n\\lim_{n\\to\\infty}\\frac{n^{k}}{n^{k}+n^{k-1}\\ln(n)}=\\lim_{n\\to\\infty}\\frac{1}{1+\\frac{\\ln(n)}{n}}=1,\n$$\nbecause $\\lim_{n\\to\\infty}\\frac{\\ln(n)}{n}=0$. Therefore $n^{k}\\notin o\\!\\left(n^{k}+n^{k-1}\\ln(n)\\right)$, so the hypothesis of the Space Hierarchy Theorem is not met, and the theorem cannot be used to conclude $\\text{DSPACE}(n^{k})\\subsetneq \\text{DSPACE}(n^{k}+n^{k-1}\\ln(n))$.\n\nMoreover, since for sufficiently large $n$ we have $\\ln(n)\\leq n$, it follows that\n$$\nn^{k}\\leq n^{k}+n^{k-1}\\ln(n)\\leq n^{k}+n^{k}=2n^{k},\n$$\nso $O\\!\\left(n^{k}+n^{k-1}\\ln(n)\\right)=O\\!\\left(n^{k}\\right)$ and thus $\\text{DSPACE}(n^{k})=\\text{DSPACE}(n^{k}+n^{k-1}\\ln(n))$. This further reinforces that the Space Hierarchy Theorem is inapplicable here.\n\nHence, the studentâ€™s claim that the theorem cannot be used to prove a proper subset relation is correct, for the reason that the limit of the ratio is $1$, not $0$. The correct option is A.", "answer": "$$\\boxed{A}$$", "id": "1463147"}, {"introduction": "The Space Hierarchy Theorem is more than an abstract result; it is a foundational tool for mapping the landscape of computational complexity. This final practice challenges you to apply the theorem to one of the most important functions in the field: the logarithm. By verifying the space-constructibility of $s(n) = \\lceil \\log_2 n \\rceil$, you will use the theorem to establish the complexity class L $= \\text{DSPACE}(O(\\log n))$ as distinct from classes with asymptotically less space, demonstrating the theorem's role in structuring the known universe of computation [@problem_id:1463176].", "problem": "In computational complexity theory, the deterministic Space Hierarchy Theorem provides a way to prove the existence of a strict hierarchy of complexity classes based on the amount of memory (space) a Turing machine is allowed to use. One version of the theorem can be stated as follows:\n\n**Theorem (Space Hierarchy):** For any space-constructible function $f(n)$ such that $f(n) \\ge \\log_2 n$, we have $\\text{DSPACE}(o(f(n))) \\subsetneq \\text{DSPACE}(O(f(n)))$. This means there are problems solvable with $O(f(n))$ space that cannot be solved with $o(f(n))$ space.\n\nA function $f: \\mathbb{N} \\to \\mathbb{N}$ is called **space-constructible** if there exists a deterministic Turing machine that, given an input of length $n$, uses exactly $O(f(n))$ space on its work tapes to compute and output the value $f(n)$.\n\nLet's consider the logarithmic space complexity class L, formally defined as $\\text{L} = \\text{DSPACE}(O(\\log n))$. Now, consider the function $s(n) = \\lceil \\log_2 n \\rceil$.\n\nWhich of the following statements is the most accurate conclusion derived from applying the Space Hierarchy Theorem using the function $s(n)$?\n\nA. The function $s(n)$ is space-constructible and satisfies $s(n) \\ge \\log_2 n$. The theorem implies that for any function $g(n)$ where $g(n) = o(\\log n)$, the class $\\text{DSPACE}(g(n))$ is a strict subset of $\\text{L}$.\n\nB. The function $s(n)$ is not space-constructible because computing a logarithm is a complex mathematical operation that requires more than logarithmic space. Thus, the Space Hierarchy Theorem cannot be applied with $s(n)$.\n\nC. The theorem can be applied, and it shows that for any constant $c$ such that $0 \\le c  1$, the class $\\text{DSPACE}(c \\cdot \\log n)$ is a strict subset of $\\text{L}$.\n\nD. The theorem cannot be applied because the function $s(n)$ violates the condition $s(n) \\ge \\log_2 n$ for all values of $n$ that are integer powers of 2.\n\nE. The theorem can be applied and it proves that $\\text{L}$ is a strict subset of $\\text{P}$, the class of problems solvable in polynomial time.", "solution": "We are given the deterministic Space Hierarchy Theorem: for any space-constructible function $f(n)$ with $f(n) \\ge \\log_{2} n$, we have\n$$\n\\text{DSPACE}(o(f(n))) \\subsetneq \\text{DSPACE}(O(f(n))).\n$$\nWe consider $s(n) = \\lceil \\log_{2} n \\rceil$ and the class $\\text{L} = \\text{DSPACE}(O(\\log n))$.\n\nStep 1: Verify that $s(n)$ is space-constructible and satisfies the lower bound condition.\n- By definition, $s(n) = \\lceil \\log_{2} n \\rceil$ satisfies\n$$\ns(n) = \\lceil \\log_{2} n \\rceil \\ge \\log_{2} n\n$$\nfor all $n \\in \\mathbb{N}$.\n- To show $s(n)$ is space-constructible, we describe how to compute $s(n)$ in $O(\\log n)$ space on input of length $n$:\n  1. Compute $n$ in binary by scanning the input and maintaining a binary counter. This uses $O(\\log n)$ cells.\n  2. Let $L$ be the bit-length of $n$ in binary; this equals $L = \\lfloor \\log_{2} n \\rfloor + 1$ for $n \\ge 1$. We can compute $L$ by tracking the most significant bit position while incrementing the counter, using $O(\\log n)$ space.\n  3. Test whether $n$ is a power of two by checking whether the binary representation has exactly one $1$ bit; counting $1$ bits uses $O(\\log n)$ space.\n  4. Output $s(n)$ as follows:\n     - If $n$ is a power of two, then $s(n) = \\lceil \\log_{2} n \\rceil = \\log_{2} n = L - 1$.\n     - Otherwise, $s(n) = \\lceil \\log_{2} n \\rceil = L$.\n  All steps use $O(\\log n)$ space, hence $s(n)$ is space-constructible.\n\nStep 2: Apply the Space Hierarchy Theorem with $f(n) = s(n)$.\n- The theorem gives\n$$\n\\text{DSPACE}(o(s(n))) \\subsetneq \\text{DSPACE}(O(s(n))).\n$$\n- Since $s(n) = \\Theta(\\log_{2} n)$, we have $O(s(n)) = O(\\log_{2} n)$ and $o(s(n)) = o(\\log_{2} n)$.\n- Therefore,\n$$\n\\text{DSPACE}(o(\\log_{2} n)) \\subsetneq \\text{DSPACE}(O(\\log_{2} n)) = \\text{L}.\n$$\n- Concretely, for any function $g(n)$ with $g(n) = o(\\log_{2} n)$, we have\n$$\n\\text{DSPACE}(g(n)) \\subseteq \\text{DSPACE}(o(\\log_{2} n)) \\subsetneq \\text{L}.\n$$\n\nStep 3: Evaluate the options.\n- A states exactly the strict inclusion $\\text{DSPACE}(g(n)) \\subsetneq \\text{L}$ for all $g(n) = o(\\log n)$, which follows from the derivation above. Hence A is correct.\n- B is false because $s(n)$ is space-constructible as shown.\n- C is not implied by the theorem: for any fixed constant $c$ with $0 \\le c  1$, we have $c \\log n = \\Theta(\\log n)$, so $\\text{DSPACE}(c \\cdot \\log n) = \\text{DSPACE}(O(\\log n)) = \\text{L}$; the theorem separates $o(\\log n)$ from $O(\\log n)$, not constant factors within $\\Theta(\\log n)$.\n- D is false since $s(n) = \\lceil \\log_{2} n \\rceil \\ge \\log_{2} n$ holds with equality when $n$ is a power of two.\n- E is false because the theorem does not imply $\\text{L} \\subsetneq \\text{P}$; in fact, whether $\\text{L} \\subsetneq \\text{P}$ is unknown.\n\nThus the most accurate conclusion is A.", "answer": "$$\\boxed{A}$$", "id": "1463176"}]}