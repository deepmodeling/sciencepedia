{"hands_on_practices": [{"introduction": "This first practice problem serves as a foundational check on your understanding of the complexity class EXPTIME. The key is to remember that membership in EXPTIME is determined by an *upper bound*, so you will apply the formal definition to a hypothetical algorithm with a sub-exponential runtime of $O(2^{\\sqrt{n}})$. This exercise helps clarify that an algorithm's runtime must be *no more than* exponential, not necessarily exactly matching the growth of $2^{p(n)}$ for some polynomial $p(n)$. [@problem_id:1445385]", "problem": "A research group in theoretical computer science is studying a new algorithm designed to solve the \"Minimum Energy Spin Glass Configuration\" problem. After extensive analysis, they have proven that their algorithm's worst-case time complexity is bounded by $T(n) = O(2^{\\sqrt{n}})$, where $n$ is the number of spins in the system, representing the size of the input.\n\nTo situate their discovery within the landscape of computational complexity, they need to determine its relationship to known complexity classes. The class EXPTIME, short for Exponential Time, is formally defined as the set of all decision problems that can be solved by a deterministic algorithm in $O(2^{p(n)})$ time, where $p(n)$ is any polynomial function of the input size $n$.\n\nGiven the algorithm's time complexity and the formal definition of EXPTIME, which of the following statements is the correct conclusion and justification?\n\nA. The problem is not in EXPTIME because the function in the exponent, $f(n)=\\sqrt{n}$, is not a polynomial.\n\nB. The problem is in EXPTIME because its runtime $O(2^{\\sqrt{n}})$ is upper-bounded by a function of the form $2^{p(n)}$ where $p(n)$ is a polynomial, for instance $p(n)=n$.\n\nC. The problem is not in EXPTIME because any problem in EXPTIME must have a time complexity that grows at least as fast as $2^n$.\n\nD. The problem is in the class P (Polynomial Time) because its time complexity $O(2^{\\sqrt{n}})$ is sub-exponential.\n\nE. The problem's classification relative to EXPTIME cannot be decided without knowing whether P equals NP.", "solution": "We are given an algorithm with worst-case running time $T(n) \\in O\\!\\left(2^{\\sqrt{n}}\\right)$. The class EXPTIME consists of all decision problems solvable by a deterministic algorithm in time $O\\!\\left(2^{p(n)}\\right)$ for some polynomial $p(n)$.\n\nTo determine membership, we exhibit a polynomial $p(n)$ such that $2^{\\sqrt{n}} \\le 2^{p(n)}$ for all sufficiently large $n$. Observe that for all $n \\ge 1$, we have $\\sqrt{n} \\le n$, hence\n$$\n2^{\\sqrt{n}} \\le 2^{n}.\n$$\nTherefore, if $T(n) \\le c \\cdot 2^{\\sqrt{n}}$ for some constants $c>0$ and all $n \\ge n_{0}$ (the definition of big-$O$), then for all $n \\ge \\max\\{n_{0},1\\}$,\n$$\nT(n) \\le c \\cdot 2^{\\sqrt{n}} \\le c \\cdot 2^{n}.\n$$\nThus $T(n) \\in O\\!\\left(2^{n}\\right)$, which is of the form $O\\!\\left(2^{p(n)}\\right)$ with the polynomial $p(n)=n$. By the definition of EXPTIME, this places the problem in EXPTIME.\n\nWe now address the options:\n- A is incorrect because EXPTIME requires an upper bound of the form $2^{p(n)}$ for some polynomial $p$, not that the given exponent must itself be a polynomial. Since $2^{\\sqrt{n}} \\le 2^{n}$, the requirement is satisfied with $p(n)=n$.\n- B is correct by the above argument: $O\\!\\left(2^{\\sqrt{n}}\\right) \\subseteq O\\!\\left(2^{n}\\right)$ with polynomial $p(n)=n$.\n- C is incorrect because EXPTIME is defined by an upper bound; it does not impose a lower bound such as growing at least as fast as $2^{n}$.\n- D is incorrect because $2^{\\sqrt{n}}$ is superpolynomial; for any fixed $k$, $\\frac{2^{\\sqrt{n}}}{n^{k}} \\to \\infty$ as $n \\to \\infty$ (since $\\sqrt{n}\\ln 2$ eventually dominates $k \\ln n$), so this time bound does not imply membership in P.\n- E is incorrect because the classification relative to EXPTIME follows directly from the time bound and the definition of EXPTIME and does not depend on whether P equals NP.\n\nTherefore, the correct choice is B.", "answer": "$$\\boxed{B}$$", "id": "1445385"}, {"introduction": "After cementing the definition, let's explore EXPTIME from a different angle by constructing a hypothetical model of computation. This exercise demonstrates the powerful concept of \"padding\" arguments, where dramatically increasing an input's length allows a polynomial-time algorithm to perform what is effectively an exponential-time computation on the original input. By analyzing the total runtime of this two-stage process, you will discover a fundamental equivalence between this special machine and the class EXPTIME itself. [@problem_id:1445367]", "problem": "In computational complexity theory, we often explore the relationships between different complexity classes by considering hypothetical computational models. Imagine a special type of machine called an \"Exponential Preprocessor.\" This machine operates on a binary input string $x$ in two stages.\n\nFirst, in the preprocessing stage, it takes the input string $x$ of length $n = |x|$ and generates a new, padded string $y$. The string $y$ is created by taking the original string $x$ and appending a special padding character (not in the original binary alphabet) until the total length of $y$ is exactly $2^n$.\n\nSecond, in the computation stage, the machine feeds this padded string $y$ into a standard deterministic algorithm that is known to run in polynomial time with respect to its input length. That is, if the input to this algorithm has length $L$, its running time is bounded by $O(L^k)$ for some fixed constant $k \\ge 1$.\n\nLet $S$ be the set of all decision problems that can be solved by the Exponential Preprocessor, where complexity is measured with respect to the original input size $n$. Which of the following standard complexity classes is equivalent to $S$?\n\nA. P (Polynomial Time)\n\nB. NP (Nondeterministic Polynomial Time)\n\nC. PSPACE (Polynomial Space)\n\nD. EXPTIME (Exponential Time)\n\nE. NEXPTIME (Nondeterministic Exponential Time)", "solution": "To determine the complexity class equivalent to the set of problems $S$ solvable by the \"Exponential Preprocessor,\" we need to analyze the total time taken by the machine as a function of the original input size, $n = |x|$.\n\nStep 1: Analyze the input transformation.\nThe original input is a string $x$ of length $n$. The preprocessor transforms this into a new string $y$ of length $|y| = 2^n$. This padding step itself takes time proportional to the length of the new string, which is $2^n$.\n\nStep 2: Analyze the running time of the computation stage.\nThe problem states that the algorithm running on the padded string $y$ has a time complexity that is polynomial in the length of $y$. Let $|y| = L$. The running time of this algorithm is $T_{algo}(L) = O(L^k)$ for some constant integer $k \\ge 1$.\n\nStep 3: Express the total running time in terms of the original input size $n$.\nWe need to express the running time of the entire process as a function of $n$. The length of the padded string is $L = |y| = 2^n$. Substituting this into the polynomial time complexity expression gives:\n$$T(n) = T_{algo}(|y|) = T_{algo}(2^n) = O\\left((2^n)^k\\right) = O\\left(2^{nk}\\right)$$\nThe time for the padding step is $O(2^n)$, which is dominated by the computational step's time $O(2^{nk})$ for $k \\ge 1$. Thus, the overall time complexity of the Exponential Preprocessor is $O(2^{nk})$ with respect to the original input size $n$.\n\nStep 4: Relate the derived time complexity to standard complexity classes.\nWe now compare this time complexity to the definitions of the given classes.\nThe complexity class EXPTIME (Exponential Time) is defined as the set of all decision problems solvable by a deterministic Turing machine in time $O(2^{p(n)})$, where $p(n)$ is some polynomial in the input size $n$.\n\nIn our case, the running time is $O(2^{nk})$. The exponent, $nk$, is a polynomial in $n$ (specifically, it is a linear polynomial, $p(n) = nk$). Therefore, any problem solvable by the Exponential Preprocessor can be solved in time that fits the definition of EXPTIME. This means $S \\subseteq \\text{EXPTIME}$.\n\nStep 5: Argue for equivalence ($S = \\text{EXPTIME}$).\nTo show that the classes are equivalent, we also need to show that any problem in EXPTIME can be solved by our Exponential Preprocessor.\nLet $A$ be an arbitrary problem in EXPTIME. By definition, there exists a deterministic Turing machine $M$ that solves $A$ in time $O(2^{p(n)})$ for some polynomial $p(n)$.\n\nWe can construct an algorithm for the computation stage of our Exponential Preprocessor to solve $A$. This algorithm takes the padded string $y$ of length $2^n$ as input, extracts the original first $n$ bits to recover $x$, and then simulates the Turing machine $M$ on input $x$.\n\nThe simulation of $M$ on $x$ takes $O(2^{p(n)})$ steps. We need to check if this simulation time is polynomial in the length of the string $y$, which is $L = 2^n$.\nThe simulation time is $T_{sim} = O(2^{p(n)})$.\nThe length of the input to our algorithm is $L = 2^n$.\nIs $T_{sim}$ polynomial in $L$? A polynomial in $L$ looks like $O(L^k) = O((2^n)^k) = O(2^{nk})$ for some constant $k$.\nOur simulation time is $O(2^{p(n)})$. Since $p(n)$ is a polynomial in $n$, we can always find a linear polynomial $nk$ (by choosing a large enough integer $k$) such that $p(n) \\le nk$ for all sufficiently large $n$. For example, if $p(n) = a_d n^d + \\dots + a_0$, we can choose $k > a_d$ and for large enough $n$, $n^d$ will dominate, ensuring the inequality holds.\nTherefore, the simulation time $O(2^{p(n)})$ is bounded by $O(2^{nk})$, which is polynomial in $L = 2^n$. This means that the algorithm we constructed for the computation stage runs in polynomial time with respect to its input $y$.\n\nSince any problem in EXPTIME can be solved by the Exponential Preprocessor, we have EXPTIME $\\subseteq S$.\nCombining the two inclusions ($S \\subseteq \\text{EXPTIME}$ and $\\text{EXPTIME} \\subseteq S$), we conclude that $S = \\text{EXPTIME}$.\n\nThe other options are incorrect:\n- A. P: The runtime is exponential, not polynomial, in $n$.\n- B. NP: NP is contained within EXPTIME, but this procedure can solve problems that are believed to be outside NP (all problems in EXPTIME).\n- C. PSPACE: The procedure requires at least $O(2^n)$ space just to store the padded string $y$. This is exponential space, not polynomial space. So it can solve problems outside of PSPACE.\n- E. NEXPTIME: The described machine is deterministic, so it naturally defines a deterministic time complexity class.\n\nThus, the set of problems $S$ is equivalent to EXPTIME.", "answer": "$$\\boxed{D}$$", "id": "1445367"}, {"introduction": "We now move from defining complexity classes to reasoning about their structure, a central activity in advanced computational theory. This problem presents a hypothetical claim: that an EXPTIME-complete problem can be efficiently 'shrunk' to a much smaller, equivalent instance in polynomial time. Your task is to act as a theorist, evaluating this claim by using the properties of completeness to show how such a \"kernelization\" would trigger a major collapse in the complexity hierarchy, contradicting established theorems. [@problem_id:1445386]", "problem": "In computational complexity theory, the class EXPTIME consists of all decision problems solvable by a deterministic Turing machine in exponential time with respect to the input size $n$. Formally,\n$$ \\text{EXPTIME} = \\bigcup_{c \\ge 1} \\text{DTIME}(2^{n^c}) $$\nwhere DTIME($f(n)$) is the class of problems solvable in $O(f(n))$ time. A problem is EXPTIME-complete if it is in EXPTIME and every problem in EXPTIME can be reduced to it in polynomial time.\n\nA theoretical computer scientist is investigating a famous EXPTIME-complete problem related to game theory, let's call it GENERALIZED HEX. An instance of this problem is a game state, and the question is whether the first player has a guaranteed winning strategy. The size of an instance is denoted by $n$.\n\nThe scientist makes an extraordinary claim. They assert the existence of a deterministic algorithm, let’s call it `Shrink`, that can take any instance $I$ of GENERALIZED HEX of size $n$, and in time polynomial in $n$, produce a new, smaller, but logically equivalent instance $I'$. The crucial part of their claim is the size of the new instance, $|I'|$; they state that it is bounded by a polynomial in the natural logarithm of the original size, i.e., $|I'| \\le c \\left(\\ln n\\right)^d$ for some fixed positive constants $c$ and $d$. Two instances are logically equivalent if the answer to the decision problem (\"Does Player 1 win?\") is the same for both.\n\nIf this claim were true, it would imply a significant collapse of computational complexity classes. Which of the following statements is the most direct and accurate consequence of the scientist's claim?\n\nA. P = NP\n\nB. NP = EXPTIME\n\nC. EXPTIME collapses to the class of problems solvable in quasi-polynomial time, which is the class of problems solvable on a deterministic Turing machine in time $O(n^{(\\ln n)^k})$ for some constant $k$.\n\nD. The Polynomial Hierarchy collapses to its first level ($\\text{PH} = \\Sigma_1^p$).\n\nE. EXPTIME = PSPACE", "solution": "Let GENERALIZED HEX be EXPTIME-complete and let the claimed algorithm Shrink map any instance $I$ of size $n$ to a logically equivalent instance $I'$ of size $|I'| \\le c(\\ln n)^{d}$ in time $n^{O(1)}$, where $c$ and $d$ are fixed positive constants. Because GENERALIZED HEX is in EXPTIME, there exists a deterministic algorithm $\\mathcal{A}$ and a constant $a \\ge 1$ such that on any input of size $m$, $\\mathcal{A}$ decides it in time at most\n$$\nT_{\\mathcal{A}}(m) \\le 2^{m^{a}} = \\exp\\!\\left(m^{a}\\ln 2\\right).\n$$\nGiven an input $I$ of size $n$, we compute $I'$ in time $n^{O(1)}$, and then run $\\mathcal{A}$ on $I'$ whose size $m$ satisfies $m \\le c(\\ln n)^{d}$. The total running time is therefore\n$$\nn^{O(1)} \\;+\\; 2^{(c(\\ln n)^{d})^{a}}\n\\;=\\; n^{O(1)} \\;+\\; 2^{c^{a}(\\ln n)^{ad}}\n\\;\\le\\; 2^{O((\\ln n)^{ad})}.\n$$\nRewrite the exponential in a quasi-polynomial form. For any real $r>0$,\n$$\n2^{(\\ln n)^{r}} \\;=\\; \\exp\\!\\left((\\ln n)^{r}\\ln 2\\right)\n\\;=\\; \\exp\\!\\left((\\ln 2)\\,(\\ln n)^{r-1}\\cdot \\ln n\\right)\n\\;=\\; n^{(\\ln 2)\\,(\\ln n)^{r-1}}.\n$$\nThus, for $r=ad>0$, we obtain\n$$\n2^{O((\\ln n)^{ad})} \\;=\\; n^{O((\\ln n)^{ad-1})},\n$$\nwhich is quasi-polynomial time since there exists a constant $k$ for which $n^{O((\\ln n)^{ad-1})} \\le n^{(\\ln n)^{k}}$ for all sufficiently large $n$.\n\nTherefore, GENERALIZED HEX can be solved in quasi-polynomial time. Because GENERALIZED HEX is EXPTIME-complete under polynomial-time many-one reductions, for any language $L \\in \\text{EXPTIME}$ there is a polynomial-time reduction $f$ such that $x \\in L$ if and only if $f(x) \\in \\text{GENERALIZED HEX}$. On input $x$ of length $N$, compute $y=f(x)$ in time $N^{O(1)}$ with $|y| \\le N^{O(1)}$, then apply Shrink to $y$ and solve the resulting instance in quasi-polynomial time as above. The total time is\n$$\nN^{O(1)} \\;+\\; |y|^{(\\ln |y|)^{k}} \\;\\le\\; N^{O((\\ln N)^{k})},\n$$\nwhich is quasi-polynomial. Hence $\\text{EXPTIME} \\subseteq \\text{QP}$, where $\\text{QP}$ denotes quasi-polynomial time.\n\nConversely, $\\text{QP} \\subseteq \\text{EXPTIME}$ since for any fixed $k$,\n$$\nn^{(\\ln n)^{k}} \\;=\\; \\exp\\!\\left((\\ln n)^{k+1}\\right) \\;\\le\\; \\exp\\!\\left(n\\right) \\;=\\; 2^{n}\n$$\nfor all sufficiently large $n$, and thus quasi-polynomial time is a subclass of EXPTIME. Combining both inclusions yields $\\text{EXPTIME} = \\text{QP}$.\n\nThis is exactly the content of option C: EXPTIME collapses to the class of problems solvable in quasi-polynomial time.", "answer": "$$\\boxed{C}$$", "id": "1445386"}]}