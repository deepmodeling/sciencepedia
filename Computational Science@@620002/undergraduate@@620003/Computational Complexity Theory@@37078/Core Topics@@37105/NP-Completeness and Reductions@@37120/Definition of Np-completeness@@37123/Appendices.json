{"hands_on_practices": [{"introduction": "Proving a problem is NP-complete is a cornerstone of complexity theory, and it relies on satisfying two distinct criteria. This first exercise [@problem_id:1419755] presents a scenario where both conditions have been met: a problem is shown to be in the class $NP$, and a known NP-complete problem is reduced to it. Your task is to apply the definition directly to determine the strongest possible conclusion, reinforcing the fundamental requirements for establishing NP-completeness.", "problem": "A computer science student, Alex, is investigating a new decision problem called `GRAPH-COLOR-VARIANT` (GCV). After weeks of work, Alex has successfully established two key properties of GCV:\n\n1.  GCV belongs to the complexity class NP (Nondeterministic Polynomial time). This was shown by demonstrating that any proposed solution for a \"yes\" instance of GCV has a certificate that can be verified for correctness in polynomial time by a deterministic algorithm.\n2.  Alex has also proven that the `3-SATISFIABILITY` (3-SAT) problem, which is a famous problem known to be NP-complete, is polynomial-time reducible to GCV. This means there exists a polynomial-time algorithm that transforms any instance of 3-SAT into an instance of GCV, such that the 3-SAT instance is satisfiable if and only if the corresponding GCV instance is a \"yes\" instance.\n\nBased on these two established facts, what is the strongest correct conclusion Alex can draw about the computational complexity of the `GRAPH-COLOR-VARIANT` problem?\n\nA. GCV is in the complexity class P.\nB. GCV is NP-hard, but it is not necessarily NP-complete.\nC. GCV is NP-complete.\nD. GCV is solvable, but its specific complexity class among P, NP-hard, or NP-complete cannot be determined from the information provided.\nE. GCV is solvable in exponential time, but nothing more specific can be said about its relationship with P and NP.", "solution": "We are given two facts:\n1) GCV is in NP. Formally, GCV has a polynomial-time verifier for certificates of yes instances, so $\\mathrm{GCV} \\in \\mathrm{NP}$.\n2) There is a polynomial-time many-one reduction from 3-SAT to GCV. Formally, $\\text{3-SAT} \\leq_{p} \\mathrm{GCV}$, and the reduction preserves yes/no answers.\n\nBy definition, a language $A$ is NP-hard if for every language $L \\in \\mathrm{NP}$, $L \\leq_{p} A$. To show that $A$ is NP-hard, it is sufficient to show that some NP-complete problem reduces to $A$ in polynomial time. Since 3-SAT is NP-complete, we have:\n- For every $L \\in \\mathrm{NP}$, $L \\leq_{p} \\text{3-SAT}$ (by NP-completeness of 3-SAT).\n- Given $\\text{3-SAT} \\leq_{p} \\mathrm{GCV}$, by transitivity of polynomial-time many-one reductions, for every $L \\in \\mathrm{NP}$ we have $L \\leq_{p} \\mathrm{GCV}$.\nThus, GCV is NP-hard.\n\nCombining NP-hardness with the given $\\mathrm{GCV} \\in \\mathrm{NP}$, by definition GCV is NP-complete.\n\nTherefore, the strongest correct conclusion is that GCV is NP-complete, which corresponds to option C.", "answer": "$$\\boxed{C}$$", "id": "1419755"}, {"introduction": "After confirming the full definition, let's dissect its components. A polynomial-time reduction is a powerful tool, but it's crucial to understand precisely what it implies. This problem [@problem_id:1419795] provides only one piece of the puzzle: a reduction from the known NP-complete problem `CLIQUE` to a new problem. This will test your ability to distinguish between a problem being NP-hard and being NP-complete, a critical subtlety in complexity arguments.", "problem": "In computational complexity theory, decision problems are often categorized into classes. The class P consists of problems solvable in polynomial time. The class NP (Nondeterministic Polynomial-time) consists of problems for which a \"yes\" answer can be verified in polynomial time if a valid solution (a \"certificate\") is provided. A problem is called NP-hard if it is at least as hard as any problem in NP. A problem is NP-complete if it is both in NP and is NP-hard.\n\nOne of the most famous NP-complete problems is the `CLIQUE` problem. The `CLIQUE` decision problem is defined as follows: Given an undirected graph $G$ and a positive integer $k$, does $G$ contain a clique of size $k$? (A clique is a subset of vertices where every two distinct vertices are adjacent).\n\nNow, consider a new problem called `SOCIAL_NETWORK_CLUSTERING` (SNC). The goal of SNC is to identify a certain type of \"well-connected\" subgroup of a given size within a social network, which is represented as a graph. A computer scientist has just proven that there exists a polynomial-time reduction from the `CLIQUE` problem to the `SNC` problem. Based *only* on this information, what is the strongest correct conclusion you can draw about the computational hardness of the `SNC` problem?\n\nA. `SNC` is in the class NP.\nB. `SNC` is NP-hard.\nC. `SNC` is NP-complete.\nD. `SNC` can be solved in polynomial time (i.e., is in P).\nE. `SNC` is not in the class NP.\nF. No conclusion can be drawn about the hardness of `SNC` from the information given.", "solution": "We use standard notions of polynomial-time many-one reductions. Let $X$ denote the CLIQUE decision problem and let $Y$ denote the SNC problem.\n\n1) By definition of $NP$-completeness of CLIQUE, we have:\n$$\nX \\in NP \\quad \\text{and} \\quad \\forall L \\in NP:\\; L \\leq_{p} X.\n$$\n\n2) We are given that there exists a polynomial-time reduction from CLIQUE to SNC, i.e.:\n$$\nX \\leq_{p} Y.\n$$\n\n3) Polynomial-time many-one reductions are transitive: if $L \\leq_{p} X$ and $X \\leq_{p} Y$, then $L \\leq_{p} Y$. Combining step 1 and step 2 yields:\n$$\n\\forall L \\in NP:\\; L \\leq_{p} Y.\n$$\n\n4) By definition, a problem $Y$ is NP-hard if for every $L \\in NP$ we have $L \\leq_{p} Y$. Therefore, $Y$ (i.e., SNC) is NP-hard.\n\n5) From the information given, we cannot conclude that $Y \\in NP$, so we cannot conclude NP-completeness. Nor can we conclude that $Y \\in P$ or that $Y \\notin NP$.\n\nHence, the strongest correct conclusion is that SNC is NP-hard.", "answer": "$$\\boxed{B}$$", "id": "1419795"}, {"introduction": "Constructing a valid proof of NP-hardness requires careful logic, and one of the most common pitfalls involves getting the direction of the reduction wrong. This final exercise [@problem_id:1419806] presents a flawed proof strategy where a problem $L$ is reduced *to* `3-SAT`. By identifying the fundamental error in this reasoning, you will solidify your understanding of why a reduction demonstrates hardness only when a known hard problem is transformed into the new problem, not the other way around.", "problem": "A student in a computational complexity course is trying to prove that a new decision problem, which she calls $L$, is NP-hard. She knows that the Boolean Satisfiability Problem for 3-conjunctive normal form formulas (3-SAT) is a well-known NP-complete problem.\n\nHer proposed proof strategy is as follows:\n1.  Take an arbitrary instance, $i_L$, of the problem $L$.\n2.  Construct an algorithm that runs in polynomial time with respect to the size of $i_L$.\n3.  This algorithm transforms the instance $i_L$ into an instance of 3-SAT, let's call it $i_{3SAT}$.\n4.  The transformation is designed such that $i_L$ is a \"yes\" instance of $L$ if and only if $i_{3SAT}$ is a satisfiable formula (a \"yes\" instance of 3-SAT).\n\nShe claims that since she can transform her problem into a known NP-complete problem in polynomial time, her problem $L$ must be at least as hard, and is therefore NP-hard.\n\nWhich of the following statements correctly identifies the fundamental logical flaw in her reasoning for proving that $L$ is NP-hard?\n\nA. Her strategy is incomplete. To prove NP-hardness, the reduction must be reversible, meaning she must also demonstrate a polynomial-time reduction from 3-SAT back to her problem $L$.\nB. The reduction is invalid because 3-SAT is in the class NP (Nondeterministic Polynomial time). A problem cannot be proven NP-hard by reducing it to a problem that is known to be in NP.\nC. The direction of the reduction is incorrect. To prove that $L$ is NP-hard, she must show that a known NP-hard problem (like 3-SAT) can be reduced in polynomial time *to* her problem $L$, not the other way around.\nD. This approach is only valid if a satisfying assignment for the resulting 3-SAT instance can be transformed back into a valid solution for the original instance of $L$ in polynomial time. Her proof does not mention this step.\nE. Any reduction to 3-SAT is insufficient for a new problem. To establish NP-hardness from first principles, a problem must be shown to be hard for *all* problems in NP, which requires a reduction from a more general problem like the acceptance problem for non-deterministic Turing machines.", "solution": "Define a polynomial-time many-one reduction from a language $A$ to a language $B$ as a function $f$ computable in time polynomial in $|x|$ such that for all inputs $x$, \n$$x \\in A \\iff f(x) \\in B.$$\nWe denote this by $A \\leq_{p} B$. Intuitively, $A \\leq_{p} B$ means $A$ is no harder than $B$ with respect to polynomial-time solvability, because a polynomial-time decision procedure for $B$ yields a polynomial-time decision procedure for $A$ by computing $f(x)$ and running the procedure for $B$.\n\nA language $L$ is NP-hard if for every language $X \\in \\mathrm{NP}$, \n$$X \\leq_{p} L.$$\nIn practice, to prove $L$ is NP-hard it suffices to show $H \\leq_{p} L$ for some known NP-hard language $H$ (e.g., $3\\text{-SAT}$), because NP-hardness is closed upward under $\\leq_{p}$.\n\nThe studentâ€™s construction produces a reduction \n$$L \\leq_{p} 3\\text{-SAT},$$\ni.e., from an instance $i_{L}$ she computes in polynomial time an instance $i_{3SAT}$ with the property \n$$i_{L} \\in L \\iff i_{3SAT} \\in 3\\text{-SAT}.$$\nThis only shows that $L$ is no harder than $3\\text{-SAT}$. In particular, if $3\\text{-SAT}$ were in $\\mathrm{P}$, then $L$ would be in $\\mathrm{P}$ by composition with the reduction; it does not imply that $L$ is NP-hard. To prove NP-hardness of $L$, the required direction is \n$$3\\text{-SAT} \\leq_{p} L,$$\nso that a polynomial-time algorithm for $L$ would yield one for $3\\text{-SAT}$.\n\nNow evaluate the options:\n- A is incorrect: reversibility is not required; one needs a single reduction from a known NP-hard problem to $L$.\n- B is incorrect: there is no prohibition against using problems in $\\mathrm{NP}$; the issue is the reduction direction, not membership in $\\mathrm{NP}$.\n- C is correct: the reduction direction is reversed; she must show $3\\text{-SAT} \\leq_{p} L$.\n- D is incorrect for Karp (many-one) reductions; only instance mapping with yes/no preservation is required, not solution mapping.\n- E is incorrect: it is sufficient to reduce a known NP-hard problem such as $3\\text{-SAT}$ to $L$.\n\nTherefore, the fundamental flaw is the incorrect direction of the reduction, as stated in C.", "answer": "$$\\boxed{C}$$", "id": "1419806"}]}