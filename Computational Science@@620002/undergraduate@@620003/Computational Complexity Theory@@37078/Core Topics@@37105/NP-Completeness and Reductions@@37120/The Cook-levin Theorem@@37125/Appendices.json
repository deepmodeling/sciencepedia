{"hands_on_practices": [{"introduction": "The Cook-Levin theorem's proof is a marvel of constructive reduction, transforming the abstract process of a Turing Machine computation into a concrete Boolean satisfiability problem. A foundational step in this translation is to build a logical framework, or \"tableau,\" that represents the machine's configuration at every moment. This first practice focuses on a fundamental constraint: at any given time, each tape cell must hold exactly one symbol. This exercise [@problem_id:1405676] will guide you through crafting a \"exactly-one\" constraint using Conjunctive Normal Form (CNF), a critical skill for encoding problems for SAT solvers and a key building block of the theorem's main formula.", "problem": "In the proof of the Cook-Levin theorem, a polynomial-time non-deterministic Turing Machine (TM) computation is converted into a Boolean satisfiability problem. This is done by constructing a formula $\\Phi$ in Conjunctive Normal Form (CNF) that is satisfiable if and only if the TM accepts its input.\n\nConsider a part of this construction for a TM with a tape alphabet $\\Gamma = \\{s_0, s_1, s_B\\}$, where $s_B$ is the blank symbol. The state of the tape is described by a set of Boolean variables $P_{i,j,s}$, where $P_{i,j,s}$ is true if and only if at time step $i$, tape cell $j$ contains the symbol $s$.\n\nOne of the fundamental constraints to enforce is that at any given time, each tape cell must contain exactly one symbol from the alphabet.\n\nFor the specific instance of time step $i=5$ and tape cell $j=2$, let the variables be $A = P_{5,2,s_0}$, $B = P_{5,2,s_1}$, and $C = P_{5,2,s_B}$. Which of the following formulas, written in CNF, correctly expresses the constraint that tape cell 2 holds exactly one symbol from the set $\\{s_0, s_1, s_B\\}$ at time 5?\n\nA. $(A \\lor B \\lor C) \\land (\\lnot A \\lor \\lnot B) \\land (\\lnot A \\lor \\lnot C) \\land (\\lnot B \\lor \\lnot C)$\n\nB. $(A \\lor B \\lor C)$\n\nC. $(\\lnot A \\lor \\lnot B) \\land (\\lnot A \\lor \\lnot C) \\land (\\lnot B \\lor \\lnot C)$\n\nD. $(A \\land B \\land C)$\n\nE. $(A \\lor \\lnot B) \\land (\\lnot A \\lor C) \\land (B \\lor \\lnot C)$", "solution": "We are encoding the Cook-Levin \"exactly one symbol per tape cell at a given time\" constraint using Boolean variables. For time step $i=5$ and tape cell $j=2$, define\n$$\nA = P_{5,2,s_{0}}, \\quad B = P_{5,2,s_{1}}, \\quad C = P_{5,2,s_{B}}.\n$$\nThe requirement that the cell contains exactly one symbol from $\\{s_{0},s_{1},s_{B}\\}$ means:\n1) At least one of $A,B,C$ is true.\n2) At most one of $A,B,C$ is true.\n\nThe \"at least one\" part is the single clause $A \\lor B \\lor C$.\n\nThe \"at most one\" part forbids any pair from being simultaneously true, equivalently\n$$\n\\lnot(A \\land B), \\quad \\lnot(A \\land C), \\quad \\lnot(B \\land C),\n$$\nwhich in CNF is\n$$\n(\\lnot A \\lor \\lnot B) \\land (\\lnot A \\lor \\lnot C) \\land (\\lnot B \\lor \\lnot C).\n$$\nCombining both gives the CNF\n$$\n(A \\lor B \\lor C) \\land (\\lnot A \\lor \\lnot B) \\land (\\lnot A \\lor \\lnot C) \\land (\\lnot B \\lor \\lnot C),\n$$\nwhich corresponds to option A.\n\nTo confirm the other options are incorrect:\n- B includes only the \"at least one\" part and allows multiple symbols simultaneously.\n- C includes only the \"at most one\" part and allows all three to be false.\n- D forces all three to be true, which violates exclusivity.\n- E is not equivalent to exactly-one; for instance, with $A=\\text{false}$, $B=\\text{false}$, $C=\\text{false}$, each clause in E evaluates as\n$$\nA \\lor \\lnot B = \\text{false} \\lor \\text{true} = \\text{true}, \\quad \\lnot A \\lor C = \\text{true} \\lor \\text{false} = \\text{true}, \\quad B \\lor \\lnot C = \\text{false} \\lor \\text{true} = \\text{true},\n$$\nso E is satisfied even though none of $A,B,C$ is true, violating the \"at least one\" requirement.\n\nTherefore, the correct CNF is option A.", "answer": "$$\\boxed{A}$$", "id": "1405676"}, {"introduction": "Once we can describe the static state of the tape, the next challenge is to capture its dynamics—how the machine evolves from one time step to the next. The entire computation is governed by the Turing Machine's transition function, $\\delta$. To simulate this, we must create logical clauses that enforce these rules, effectively creating a chain of valid configurations over time. This practice [@problem_id:1405705] allows you to translate a specific transition rule into a logical implication, which forms the core of the $\\phi_{move}$ sub-formula that drives the simulated computation forward.", "problem": "In the context of the Cook-Levin theorem, a Turing Machine's computation is encoded as a large Boolean satisfiability (SAT) instance. A crucial part of this encoding is creating logical clauses that enforce the machine's transition rules.\n\nConsider a deterministic Turing Machine with a set of states $Q$, a tape alphabet $\\Gamma$, and a transition function $\\delta$. We use the following Boolean variables to describe the machine's configuration at any time step:\n-   $S_{t,q}$: is true if and only if the machine is in state $q \\in Q$ at time step $t$.\n-   $H_{t,j}$: is true if and only if the machine's head is at tape position $j$ at time step $t$.\n-   $T_{t,j,s}$: is true if and only if tape cell $j$ contains the symbol $s \\in \\Gamma$ at time step $t$.\n\nSuppose the machine has a specific transition rule given by:\n$$ \\delta(q_1, a) = (q_2, b, R) $$\nThis rule means that if the machine is in state $q_1$ and reads the symbol $a$ from the tape, it will transition to state $q_2$, write the symbol $b$ in the current tape cell, and move the head one position to the Right (R).\n\nWhich of the following logical formulas correctly ensures that for any time step $t$ and any tape position $j$, the machine's configuration at time $t+1$ is a valid consequence of its configuration at time $t$ according to this specific rule?\n\nA. $(S_{t, q_1} \\land H_{t, j} \\land T_{t, j, a}) \\rightarrow (S_{t+1, q_2} \\land H_{t+1, j+1} \\land T_{t+1, j, b})$\n\nB. $(S_{t, q_1} \\land H_{t, j} \\land T_{t, j, a}) \\land (S_{t+1, q_2} \\land H_{t+1, j+1} \\land T_{t+1, j, b})$\n\nC. $(S_{t+1, q_2} \\land H_{t+1, j+1} \\land T_{t+1, j, b}) \\rightarrow (S_{t, q_1} \\land H_{t, j} \\land T_{t, j, a})$\n\nD. $(S_{t, q_1} \\land H_{t, j} \\land T_{t, j, a}) \\rightarrow (S_{t+1, q_2} \\land H_{t+1, j} \\land T_{t+1, j+1, b})$\n\nE. $(S_{t, q_1} \\lor H_{t, j} \\lor T_{t, j, a}) \\rightarrow (S_{t+1, q_2} \\lor H_{t+1, j+1} \\lor T_{t+1, j, b})$", "solution": "We are given a deterministic Turing Machine with transition function $\\delta$ and Boolean variables $S_{t,q}$, $H_{t,j}$, and $T_{t,j,s}$ describing, respectively, the machine’s state, head position, and tape symbol at time $t$. The specific transition rule is $\\delta(q_{1}, a) = (q_{2}, b, R)$, meaning: if at time $t$ the machine is in state $q_{1}$ with its head on cell $j$ and the symbol under the head is $a$, then at time $t+1$ the machine must be in state $q_{2}$, the head must be at position $j+1$, and the symbol written in cell $j$ must be $b$.\n\nBy the semantics of the variables:\n- $S_{t,q_{1}}$ means the state at time $t$ is $q_{1}$.\n- $H_{t,j}$ means the head is at position $j$ at time $t$.\n- $T_{t,j,a}$ means the tape cell $j$ has symbol $a$ at time $t$.\n- At time $t+1$, the rule requires $S_{t+1,q_{2}}$, $H_{t+1,j+1}$, and $T_{t+1,j,b}$ to hold.\n\nTherefore, the correct logical constraint to enforce this transition “if the left-hand side configuration occurs at time $t$, then the right-hand side consequences must hold at time $t+1$” is the implication\n$$\n\\left(S_{t,q_{1}} \\wedge H_{t,j} \\wedge T_{t,j,a}\\right) \\rightarrow \\left(S_{t+1,q_{2}} \\wedge H_{t+1,j+1} \\wedge T_{t+1,j,b}\\right),\n$$\nto be instantiated for all $t$ and $j$.\n\nNow evaluate the options:\n- A is exactly the implication above, so it correctly enforces the transition.\n- B is a conjunction of antecedent and consequent, which would force the machine to always be in the antecedent configuration whenever the clause is included; it does not express a conditional transition and is too strong.\n- C reverses the implication direction; it would enforce that seeing the $t+1$ configuration implies the specific $t$ configuration, which is not the intended transition constraint.\n- D misplaces the head and the write: it keeps the head at $j$ and writes $b$ at $j+1$, which contradicts $\\delta(q_{1}, a) = (q_{2}, b, R)$.\n- E uses disjunctions, which does not capture the necessary conditional structure; it allows the antecedent or consequent to be partially true, failing to enforce the transition properly.\n\nHence, the correct choice is A.", "answer": "$$\\boxed{A}$$", "id": "1405705"}, {"introduction": "A correct encoding in the Cook-Levin proof must be perfectly faithful to the mechanics of a Turing Machine, leaving no room for impossible behavior. This includes not only what changes, but also what *doesn't* change. The \"frame property\" ensures that tape cells not currently under the head remain unaltered, a rule so intuitive it can be easy to forget. In this final exercise, by analyzing a flawed computational trace resulting from an incomplete formula [@problem_id:1456011], you will see the bizarre, non-physical consequences of omitting these frame axioms, reinforcing why every clause in the construction is absolutely essential.", "problem": "An undergraduate student in theoretical computer science, Aris Thorne, is developing a program to demonstrate the Cook-Levin theorem. His goal is to convert any given Non-deterministic Turing Machine (NTM) $M$ and an input string $w$ into a Boolean satisfiability formula $\\Phi_{M,w}$ which is satisfiable if and only if $M$ accepts $w$.\n\nAris considers a specific deterministic Turing Machine (which is a special case of an NTM) named $M_{search}$. The machine is defined as follows:\n-   Set of states $Q = \\{q_{start}, q_{found}\\}$\n-   Tape alphabet $\\Gamma = \\{\\text{0}, \\text{1}, \\text{B}\\}$, where 'B' is the blank symbol.\n-   Input alphabet $\\Sigma = \\{\\text{0}, \\text{1}\\}$.\n-   Start state $q_{start}$.\n-   Accept state $q_{found}$.\n-   Transition function $\\delta$:\n    -   $\\delta(q_{start}, \\text{0}) = (q_{start}, \\text{0}, R)$ (Move Right)\n    -   $\\delta(q_{start}, \\text{B}) = (q_{start}, \\text{B}, R)$ (Move Right)\n    -   $\\delta(q_{start}, \\text{1}) = (q_{found}, \\text{1}, S)$ (Stay)\n\nThe formula $\\Phi_{M,w}$ is constructed using Boolean variables that describe the machine's configuration at each time step. Aris correctly implements clauses for the initial configuration, clauses ensuring that the machine is in exactly one state and the head is at exactly one position at any given time, and clauses for valid state transitions based on the 2x3 \"window\" of tape cells centered on the head's position.\n\nHowever, Aris makes a critical omission: he forgets to include the clauses that enforce the \"frame property.\" Specifically, his formula lacks the constraints that a tape cell's content must remain unchanged from one time step to the next if the tape head is not at that cell's position.\n\nAris tests his flawed construction for the machine $M_{search}$ with the input string $w = \"00\"$. He bounds the computation to a maximum of 4 time steps and a tape of size 5, with cells indexed 1 through 5. A SAT solver reports that his formula is satisfiable and provides an assignment. The sequence of machine configurations corresponding to this satisfying assignment is shown below. A configuration at step $t$ is given as a tuple: (Current State, Head Position, Tape Contents `[C_1, C_2, C_3, C_4, C_5]`).\n\n-   $t=0$: ($q_{start}$, 1, `[0, 0, B, B, B]`)\n-   $t=1$: ($q_{start}$, 2, `[0, 0, B, B, B]`)\n-   $t=2$: ($q_{start}$, 3, `[0, 0, 1, B, B]`)\n-   $t=3$: ($q_{found}$, 3, `[0, 0, 1, B, B]`)\n-   $t=4$: ($q_{found}$, 3, `[0, 0, 1, B, B]`)\n\nGiven this trace, which one of the following statements accurately describes the *first* event that violates the operational principles of a standard Turing Machine?\n\nA. At $t=1$, the machine transitions from state $q_{start}$ back to $q_{start}$, which is an invalid loop for this machine.\n\nB. Between time step $t=1$ and $t=2$, the symbol at tape position 3 changes from B to 1, while the tape head is located at position 2.\n\nC. At $t=2$, the machine is in state $q_{start}$ and its head is at position 3, which is an unreachable configuration from the state at $t=1$.\n\nD. At $t=3$, the machine transitions to the accept state $q_{found}$ by reading a '1', but the tape head incorrectly remains stationary.\n\nE. The computation does not start at the correct initial configuration for the input string $w = \"00\"$.", "solution": "The operational principles of a standard single-tape Turing Machine require that, at each step, the machine reads the symbol under the head, writes possibly a new symbol to that same tape cell, updates its state, and moves the head according to the transition function. In particular, the frame property enforces that any tape cell not under the head at a given step must retain its symbol into the next step.\n\nThe given machine has transitions:\n$$\n\\delta(q_{start}, 0) = (q_{start}, 0, R), \\quad\n\\delta(q_{start}, B) = (q_{start}, B, R), \\quad\n\\delta(q_{start}, 1) = (q_{found}, 1, S).\n$$\nWe verify the trace step-by-step against these rules and identify the earliest violation.\n\nAt $t=0$, the configuration is $(q_{start}, 1, [0, 0, B, B, B])$, which is the correct initial configuration for input $w=\"00\"$, so option E is false.\n\nFrom $t=0$ to $t=1$: At $t=0$, the head is at position $1$ reading $0$. By $\\delta(q_{start}, 0) = (q_{start}, 0, R)$, the machine remains in $q_{start}$, writes $0$ at position $1$ (no change), and moves the head to position $2$. Thus at $t=1$, $(q_{start}, 2, [0, 0, B, B, B])$ is valid. Therefore, returning to $q_{start}$ at $t=1$ is consistent with $\\delta$, so option A is false.\n\nFrom $t=1$ to $t=2$: At $t=1$, the head is at position $2$ reading $0$. By $\\delta(q_{start}, 0) = (q_{start}, 0, R)$, the machine should write $0$ at position $2$ (no change), remain in $q_{start}$, and move the head to position $3$. Crucially, only the scanned cell (position $2$) may change during this step; all other cells must retain their symbols by the frame property. Therefore, at $t=2$, the tape cell at position $3$ must still be $B$. However, the trace shows $[0, 0, 1, B, B]$ at $t=2$, indicating that cell $3$ changed from $B$ to $1$ while the head was at position $2$ during the transition. This violates the frame property. Hence, option B correctly identifies a violation, and it occurs as early as between $t=1$ and $t=2$.\n\nFor completeness, we check the remaining options are not earlier violations. Option C claims $(q_{start}, 3)$ at $t=2$ is unreachable from $t=1$, but $\\delta(q_{start}, 0)$ indeed moves the head right and keeps the state $q_{start}$, so this configuration is reachable; thus C is false. Option D claims the head incorrectly remains stationary at $t=3$ when transitioning to $q_{found}$ on reading $1$, but $\\delta(q_{start}, 1) = (q_{found}, 1, S)$ explicitly specifies staying put, so D is false.\n\nTherefore, the first event that violates the operational principles is the unauthorized change of tape cell $3$ between $t=1$ and $t=2$, matching option B.", "answer": "$$\\boxed{B}$$", "id": "1456011"}]}