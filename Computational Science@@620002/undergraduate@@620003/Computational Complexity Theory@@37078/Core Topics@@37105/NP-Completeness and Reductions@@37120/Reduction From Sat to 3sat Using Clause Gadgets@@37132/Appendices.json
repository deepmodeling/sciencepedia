{"hands_on_practices": [{"introduction": "The core of the reduction from SAT to 3-SAT lies in a clever technique for handling clauses with more than three literals. This method introduces new auxiliary variables to break a long clause into a 'chain' of smaller, interconnected 3-literal clauses that are collectively satisfiable if and only if the original clause was. This first practice exercise [@problem_id:1443587] will guide you through a direct application of this standard 'clause gadget' mechanism, a foundational skill for understanding NP-completeness proofs.", "problem": "In computational complexity theory, the reduction from the general Boolean Satisfiability Problem (SAT) to 3-Satisfiability (3-SAT) is a cornerstone in proving NP-completeness. A key part of this reduction involves converting clauses in Conjunctive Normal Form (CNF) with more than three literals into a set of clauses each having exactly three literals.\n\nConsider a clause $C = (l_1 \\lor l_2 \\lor \\dots \\lor l_k)$ with $k > 3$ literals. The standard method to convert this into a satisfiability-equivalent 3-CNF formula is to introduce $k-3$ new \"dummy\" variables, which we can label $z_1, z_2, \\dots, z_{k-3}$. The single clause $C$ is then replaced by the conjunction of $k-2$ new clauses, constructed as follows:\n$$\n(l_1 \\lor l_2 \\lor z_1) \\land (\\neg z_1 \\lor l_3 \\lor z_2) \\land (\\neg z_2 \\lor l_4 \\lor z_3) \\land \\dots \\land (\\neg z_{k-3} \\lor l_{k-1} \\lor l_k)\n$$\nThis construction chains the dummy variables, ensuring that the entire set of new clauses is satisfiable if and only if the original clause $C$ was satisfiable.\n\nApply this standard reduction procedure to the following 4-literal clause:\n$$\nC = (x_1 \\lor x_2 \\lor x_3 \\lor x_4)\n$$\nWhich one of the following sets of 3-CNF clauses is the correct result of this conversion? Assume the new dummy variable introduced is named $z_1$.\n\nA. $\\{ (x_1 \\lor x_2 \\lor z_1), (\\neg z_1 \\lor x_3 \\lor x_4) \\}$\n\nB. $\\{ (x_1 \\lor x_2 \\lor \\neg z_1), (z_1 \\lor x_3 \\lor x_4) \\}$\n\nC. $\\{ (x_1 \\lor x_2 \\lor x_3), (\\neg x_3 \\lor x_4 \\lor z_1) \\}$\n\nD. $\\{ (x_1 \\lor x_2 \\lor z_1), (z_1 \\lor x_3 \\lor x_4) \\}$\n\nE. $\\{ (x_1 \\lor z_1), (\\neg z_1 \\lor x_2 \\lor z_2), (\\neg z_2 \\lor x_3 \\lor x_4) \\}$", "solution": "We start from the standard reduction for a clause with $k>3$ literals. Given a clause $C=(l_{1}\\lor l_{2}\\lor \\dots \\lor l_{k})$, introduce $k-3$ new variables $z_{1},\\dots,z_{k-3}$ and replace $C$ by the conjunction of $k-2$ clauses:\n$$\n(l_{1}\\lor l_{2}\\lor z_{1})\\land(\\neg z_{1}\\lor l_{3}\\lor z_{2})\\land \\dots \\land (\\neg z_{k-3}\\lor l_{k-1}\\lor l_{k}).\n$$\nFor $k=4$, we have exactly one new variable $z_{1}$ and two clauses. Applying the construction to $C=(x_{1}\\lor x_{2}\\lor x_{3}\\lor x_{4})$ yields\n$$\n(x_{1}\\lor x_{2}\\lor z_{1})\\land(\\neg z_{1}\\lor x_{3}\\lor x_{4}).\n$$\nTo verify satisfiability equivalence: \n- If $(x_{1}\\lor x_{2}\\lor x_{3}\\lor x_{4})$ is satisfiable, then either $x_{1}\\lor x_{2}$ is true, in which case set $z_{1}=\\text{false}$ so $(x_{1}\\lor x_{2}\\lor z_{1})$ is true and $(\\neg z_{1}\\lor x_{3}\\lor x_{4})$ is true via $\\neg z_{1}$; or $x_{1}$ and $x_{2}$ are both false but $x_{3}\\lor x_{4}$ is true, in which case set $z_{1}=\\text{true}$ so the first clause is true via $z_{1}$ and the second via $x_{3}\\lor x_{4}$. \n- Conversely, any assignment satisfying $(x_{1}\\lor x_{2}\\lor z_{1})\\land(\\neg z_{1}\\lor x_{3}\\lor x_{4})$ must make at least one of $x_{1},x_{2},x_{3},x_{4}$ true: if $x_{1}$ and $x_{2}$ are both false, then the first clause forces $z_{1}=\\text{true}$, hence the second clause forces $x_{3}\\lor x_{4}$ to be true.\n\nTherefore the correct 3-CNF set is $\\{(x_{1}\\lor x_{2}\\lor z_{1}),(\\neg z_{1}\\lor x_{3}\\lor x_{4})\\}$, which corresponds to option A. The other options either negate $z_{1}$ in the first clause, put $z_{1}$ unnegated in the second clause, introduce unnecessary extra variables, or do not follow the chaining pattern, and thus do not implement the standard reduction.", "answer": "$$\\boxed{A}$$", "id": "1443587"}, {"introduction": "A robust reduction must be able to handle any type of clause, not just those with more than three literals. But what about clauses that are shorter? This practice [@problem_id:1443617] explores the standard technique for converting a 2-literal clause into an equisatisfiable set of 3-literal clauses. Mastering this case is crucial for creating a complete and correct reduction from any SAT instance to a 3-SAT instance.", "problem": "In the study of computational complexity, the Boolean Satisfiability Problem (SAT) is a canonical NP-complete problem. A common variant is 3-SAT, where every clause in the Boolean formula must have exactly three literals. A standard technique to prove the NP-completeness of 3-SAT is to provide a polynomial-time reduction from SAT to 3-SAT.\n\nThis reduction process involves transforming each clause of an arbitrary SAT instance into a set of clauses that each have exactly three literals. Consider a clause from an original SAT formula that contains exactly two literals, for instance, $C = (x_1 \\lor x_2)$, where $x_1$ and $x_2$ are literals (either a variable or its negation). To transform this clause into a set of 3-literal clauses, we must introduce a new \"dummy\" variable, let's call it $y$, which does not appear anywhere else in the formula.\n\nA transformation is considered valid if the new set of clauses is satisfiable if and only if the original clause $(x_1 \\lor x_2)$ is satisfied by an assignment to its variables. Which one of the following options represents a valid transformation for the clause $(x_1 \\lor x_2)$ into a set of clauses in 3-Conjunctive Normal Form (3-CNF)?\n\nA. $(x_1 \\lor x_2 \\lor y)$\n\nB. $(x_1 \\lor x_2 \\lor y) \\land (x_1 \\lor x_2 \\lor \\neg y)$\n\nC. $(x_1 \\lor y) \\land (x_2 \\lor \\neg y)$\n\nD. $(x_1 \\lor x_2 \\lor y) \\land (\\neg x_1 \\lor \\neg x_2 \\lor \\neg y)$", "solution": "The goal of the reduction is to replace a clause $C = (x_1 \\lor x_2)$ with a new formula fragment $\\phi'_{C}$ involving a new dummy variable $y$. The crucial property of a valid reduction is that it preserves satisfiability. This means that for any truth assignment to the original variables $x_1$ and $x_2$, the original clause $C$ is true if and only if there exists a truth assignment for the new variable $y$ that makes the new formula fragment $\\phi'_{C}$ true.\n\nLet's analyze each option based on this criterion.\n\n**Analysis of Option A:**\nThe proposed transformation is $\\phi'_{C} = (x_1 \\lor x_2 \\lor y)$.\nLet's check the satisfiability condition.\n- If $(x_1 \\lor x_2)$ is true: The clause $(x_1 \\lor x_2 \\lor y)$ will also be true, regardless of the truth value of $y$. So, if the original clause is satisfied, the new clause is also satisfiable. This direction holds.\n- If $(x_1 \\lor x_2)$ is false: This happens when both $x_1$ and $x_2$ are false. The original clause is not satisfied. The new clause becomes $(F \\lor F \\lor y)$, which simplifies to $y$. This clause can be satisfied by setting $y$ to true.\nThis is a failure of the reduction. An assignment that makes the original clause false leads to a situation where the new formula can be satisfied. For a full formula $\\phi$, if a clause $C$ makes $\\phi$ unsatisfiable, this transformation could make the new formula $\\phi'$ satisfiable, thus breaking the \"if and only if\" condition. So, A is incorrect.\n\n**Analysis of Option B:**\nThe proposed transformation is $\\phi'_{C} = (x_1 \\lor x_2 \\lor y) \\land (x_1 \\lor x_2 \\lor \\neg y)$.\nThis formula is an application of the resolution principle in reverse, or more simply, the law of propositional logic $(P \\lor Q) \\land (P \\lor \\neg Q) \\equiv P$. Let $P = (x_1 \\lor x_2)$. The expression is $(P \\lor y) \\land (P \\lor \\neg y)$, which is logically equivalent to $P$, i.e., $x_1 \\lor x_2$.\nSince $\\phi'_{C}$ is logically equivalent to the original clause $C$, it is satisfied if and only if $C$ is satisfied. Furthermore, the transformation results in two clauses, $(x_1 \\lor x_2 \\lor y)$ and $(x_1 \\lor x_2 \\lor \\neg y)$, both of which have exactly three literals. Therefore, this is a valid transformation. So, B is correct.\n\n**Analysis of Option C:**\nThe proposed transformation is $\\phi'_{C} = (x_1 \\lor y) \\land (x_2 \\lor \\neg y)$.\nThe problem specifies that the transformation must result in a set of clauses where each clause has *exactly three literals*. The clauses produced by this option, $(x_1 \\lor y)$ and $(x_2 \\lor \\neg y)$, have only two literals each. Therefore, this option fails to meet the structural requirement of the 3-SAT problem definition given in the prompt, regardless of whether it preserves satisfiability. So, C is incorrect.\n\n**Analysis of Option D:**\nThe proposed transformation is $\\phi'_{C} = (x_1 \\lor x_2 \\lor y) \\land (\\neg x_1 \\lor \\neg x_2 \\lor \\neg y)$.\nLet's check the satisfiability condition.\n- If $(x_1 \\lor x_2)$ is true: There must exist an assignment for $y$ that satisfies $\\phi'_{C}$. The first clause $(x_1 \\lor x_2 \\lor y)$ is always true. We need to check if we can satisfy the second clause $(\\neg x_1 \\lor \\neg x_2 \\lor \\neg y)$.\n  - Case 1: $x_1$ is true, $x_2$ is false. The second clause becomes $(F \\lor T \\lor \\neg y)$, which is true.\n  - Case 2: $x_1$ is false, $x_2$ is true. The second clause becomes $(T \\lor F \\lor \\neg y)$, which is true.\n  - Case 3: $x_1$ is true, $x_2$ is true. The second clause becomes $(F \\lor F \\lor \\neg y)$, which simplifies to $\\neg y$. We can satisfy this by setting $y$ to false.\n  So, if the original clause is satisfied, the new formula is satisfiable.\n- If $(x_1 \\lor x_2)$ is false: This happens when $x_1$ and $x_2$ are both false. The original clause is not satisfied. The new formula becomes $(F \\lor F \\lor y) \\land (T \\lor T \\lor \\neg y)$, which simplifies to $y \\land T$, which is just $y$. This can be satisfied by setting $y$ to true.\nSimilar to option A, an assignment that makes the original clause false can lead to a satisfiable new formula. This violates the \"if and only if\" condition. So, D is incorrect.\n\nBased on the analysis, only option B provides a valid transformation that produces clauses of the correct size and preserves satisfiability.", "answer": "$$\\boxed{B}$$", "id": "1443617"}, {"introduction": "Understanding not only *how* a reduction works, but *why* it is designed in a specific way, is key to deeper comprehension. It might seem possible to simplify the clause gadget, for instance, by not introducing a new variable. This final practice [@problem_id:1443604] challenges you to act as a proof-checker by finding a specific counterexample that demonstrates why a plausible-sounding but incorrect reduction fails. This exercise will cement your understanding of the strict requirements for a valid, satisfaction-preserving transformation.", "problem": "In computational complexity theory, the reduction from the general Boolean Satisfiability Problem (SAT) to its variant 3-SAT is a cornerstone of proving NP-completeness. This reduction involves converting any clause in a Conjunctive Normal Form (CNF) into a set of new clauses, each having at most 3 literals. A critical requirement for such a transformation is that it must be satisfaction-preserving: the original clause must be satisfiable if and only if the new set of clauses is satisfiable.\n\nA student proposes a method to split a clause with four literals, such as $C = (x_1 \\lor x_2 \\lor x_3 \\lor x_4)$. Their proposal is to replace $C$ with the expression $C' = (x_1 \\lor x_2) \\land (\\neg x_2 \\lor x_3 \\lor x_4)$, which is a conjunction of two new clauses. For this transformation to be valid, the expression $C$ must be logically equivalent to $C'$. However, this proposal is flawed because the two expressions are not equivalent.\n\nYour task is to identify a counterexample that proves this flaw. From the list below, select all truth assignments for the tuple $(x_1, x_2, x_3, x_4)$ that result in the truth value of $C$ being different from the truth value of $C'$.\n\nA. (True, False, False, False)\n\nB. (False, True, False, False)\n\nC. (False, False, True, False)\n\nD. (False, False, False, False)\n\nE. (True, True, True, True)", "solution": "The problem requires us to find all truth assignments from the given options that demonstrate the logical non-equivalence of the clause $C = (x_1 \\lor x_2 \\lor x_3 \\lor x_4)$ and the expression $C' = (x_1 \\lor x_2) \\land (\\neg x_2 \\lor x_3 \\lor x_4)$. A counterexample is any assignment of truth values to $(x_1, x_2, x_3, x_4)$ for which $C$ and $C'$ evaluate to different truth values. We will test each option. Let T represent True and F represent False.\n\nLet's analyze each option:\n\nA. Assignment: $(x_1, x_2, x_3, x_4) = (\\text{T, F, F, F})$\nFirst, we evaluate the original clause $C$:\n$C = (x_1 \\lor x_2 \\lor x_3 \\lor x_4) = (\\text{T} \\lor \\text{F} \\lor \\text{F} \\lor \\text{F}) = \\text{T}$.\nNext, we evaluate the proposed new expression $C'$:\n$C' = (x_1 \\lor x_2) \\land (\\neg x_2 \\lor x_3 \\lor x_4) = (\\text{T} \\lor \\text{F}) \\land (\\neg \\text{F} \\lor \\text{F} \\lor \\text{F}) = (\\text{T}) \\land (\\text{T} \\lor \\text{F} \\lor \\text{F}) = \\text{T} \\land \\text{T} = \\text{T}$.\nIn this case, both $C$ and $C'$ are True. Their truth values are the same, so this is not a counterexample.\n\nB. Assignment: $(x_1, x_2, x_3, x_4) = (\\text{F, T, F, F})$\nEvaluate $C$:\n$C = (x_1 \\lor x_2 \\lor x_3 \\lor x_4) = (\\text{F} \\lor \\text{T} \\lor \\text{F} \\lor \\text{F}) = \\text{T}$.\nEvaluate $C'$:\n$C' = (x_1 \\lor x_2) \\land (\\neg x_2 \\lor x_3 \\lor x_4) = (\\text{F} \\lor \\text{T}) \\land (\\neg \\text{T} \\lor \\text{F} \\lor \\text{F}) = (\\text{T}) \\land (\\text{F} \\lor \\text{F} \\lor \\text{F}) = \\text{T} \\land \\text{F} = \\text{F}$.\nHere, $C$ is True while $C'$ is False. Their truth values are different. Therefore, this is a valid counterexample.\n\nC. Assignment: $(x_1, x_2, x_3, x_4) = (\\text{F, F, T, F})$\nEvaluate $C$:\n$C = (x_1 \\lor x_2 \\lor x_3 \\lor x_4) = (\\text{F} \\lor \\text{F} \\lor \\text{T} \\lor \\text{F}) = \\text{T}$.\nEvaluate $C'$:\n$C' = (x_1 \\lor x_2) \\land (\\neg x_2 \\lor x_3 \\lor x_4) = (\\text{F} \\lor \\text{F}) \\land (\\neg \\text{F} \\lor \\text{T} \\lor \\text{F}) = (\\text{F}) \\land (\\text{T} \\lor \\text{T} \\lor \\text{F}) = \\text{F} \\land \\text{T} = \\text{F}$.\nHere, $C$ is True while $C'$ is False. Their truth values are different. Therefore, this is also a valid counterexample.\n\nD. Assignment: $(x_1, x_2, x_3, x_4) = (\\text{F, F, F, F})$\nEvaluate $C$:\n$C = (x_1 \\lor x_2 \\lor x_3 \\lor x_4) = (\\text{F} \\lor \\text{F} \\lor \\text{F} \\lor \\text{F}) = \\text{F}$.\nEvaluate $C'$:\n$C' = (x_1 \\lor x_2) \\land (\\neg x_2 \\lor x_3 \\lor x_4) = (\\text{F} \\lor \\text{F}) \\land (\\neg \\text{F} \\lor \\text{F} \\lor \\text{F}) = (\\text{F}) \\land (\\text{T} \\lor \\text{F} \\lor \\text{F}) = \\text{F} \\land \\text{T} = \\text{F}$.\nIn this case, both $C$ and $C'$ are False. Their truth values are the same, so this is not a counterexample.\n\nE. Assignment: $(x_1, x_2, x_3, x_4) = (\\text{T, T, T, T})$\nEvaluate $C$:\n$C = (x_1 \\lor x_2 \\lor x_3 \\lor x_4) = (\\text{T} \\lor \\text{T} \\lor \\text{T} \\lor \\text{T}) = \\text{T}$.\nEvaluate $C'$:\n$C' = (x_1 \\lor x_2) \\land (\\neg x_2 \\lor x_3 \\lor x_4) = (\\text{T} \\lor \\text{T}) \\land (\\neg \\text{T} \\lor \\text{T} \\lor \\text{T}) = (\\text{T}) \\land (\\text{F} \\lor \\text{T} \\lor \\text{T}) = \\text{T} \\land \\text{T} = \\text{T}$.\nIn this case, both $C$ and $C'$ are True. Their truth values are the same, so this is not a counterexample.\n\nBased on our step-by-step analysis, the assignments presented in options B and C are the ones that result in different truth values for $C$ and $C'$. Thus, they are the correct counterexamples.", "answer": "$$\\boxed{BC}$$", "id": "1443604"}]}