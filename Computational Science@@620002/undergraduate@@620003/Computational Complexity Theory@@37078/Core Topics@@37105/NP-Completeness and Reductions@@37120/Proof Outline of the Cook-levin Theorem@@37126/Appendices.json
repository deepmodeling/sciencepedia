{"hands_on_practices": [{"introduction": "The Cook-Levin theorem's proof hinges on translating a Turing Machine's computation into a single, large Boolean formula. A natural starting point for this construction is to encode the machine's initial configuration at time $t=0$. This first exercise challenges you to formulate the precise logical expression that establishes the tape head's starting position, a foundational step in building the overall satisfiability problem. [@problem_id:1438663]", "problem": "In the context of the Cook-Levin theorem, a key step is to construct a Boolean formula $\\phi$ that is satisfiable if and only if a given non-deterministic Turing Machine (NTM), $M$, accepts an input string $w$ of length $n$. This is achieved by creating a tableau representing the computation history of $M$ on $w$.\n\nAssume the NTM $M$ is guaranteed to halt within a number of steps bounded by a polynomial $p(n)$. We can model the computation using a tableau of size $p(n) \\times p(n)$, where rows represent time steps $t$ (from $0$ to $p(n)-1$) and columns represent tape cell indices $i$ (from $0$ to $p(n)-1$).\n\nTo describe the state of the machine, we introduce a set of Boolean variables. Let the variable $h_{t,i}$ be true if the machine's tape head is positioned at cell $i$ at time step $t$, and false otherwise. Here, $0 \\le t < p(n)$ and $0 \\le i < p(n)$.\n\nBy convention, an NTM begins its computation at time $t=0$ with its tape head on the first cell of the tape, which is cell $i=0$.\n\nWhich of the following Boolean expressions correctly and completely encodes this specific initial condition for the tape head's position as a part of the overall starting configuration formula $\\phi_{start}$?\n\nA. $h_{0,0} \\land \\left( \\bigwedge_{i=1}^{p(n)-1} \\neg h_{0,i} \\right)$\n\nB. $\\bigvee_{i=0}^{p(n)-1} h_{0,i}$\n\nC. $h_{0,0}$\n\nD. $\\left(\\bigvee_{i=0}^{p(n)-1} h_{0,i}\\right) \\land \\left( \\bigwedge_{0 \\le i < j < p(n)} (\\neg h_{0,i} \\lor \\neg h_{0,j}) \\right)$\n\nE. $\\bigwedge_{i=0}^{p(n)-1} h_{0,i}$", "solution": "We are given Boolean variables $h_{t,i}$ where $h_{t,i}$ is true exactly when the tape head is at cell $i$ at time $t$. The initial condition states that at time $t=0$ the head is at cell $i=0$. To encode this specific condition completely for the time $t=0$, we must assert two things simultaneously:\n- Positivity at the designated cell: $h_{0,0}$ must be true.\n- Negativity at all other cells at the same time: for every $i$ with $1 \\le i \\le p(n)-1$, $h_{0,i}$ must be false.\n\nThese two requirements together are expressed by the conjunction\n$$\nh_{0,0} \\land \\left( \\bigwedge_{i=1}^{p(n)-1} \\neg h_{0,i} \\right).\n$$\nThis formula is both necessary and sufficient to pin the head at exactly cell $0$ at time $0$.\n\nNow evaluate the options:\n- Option A is exactly the formula above, so it correctly and completely encodes the initial head position.\n- Option B, $\\bigvee_{i=0}^{p(n)-1} h_{0,i}$, enforces that the head is somewhere at time $0$ but does not force it to be at $i=0$.\n- Option C, $h_{0,0}$, enforces that the head is at $i=0$ but does not exclude the possibility that some $h_{0,i}$ with $i \\neq 0$ is also true; thus it is incomplete unless mutual exclusivity is enforced elsewhere. The question asks for a complete encoding of this specific initial condition within $\\phi_{start}$, so this is insufficient on its own.\n- Option D, $\\left(\\bigvee_{i=0}^{p(n)-1} h_{0,i}\\right) \\land \\left( \\bigwedge_{0 \\le i < j < p(n)} (\\neg h_{0,i} \\lor \\neg h_{0,j}) \\right)$, expresses that exactly one $h_{0,i}$ is true at time $0$, but it allows that unique position to be any $i$, not necessarily $i=0$.\n- Option E, $\\bigwedge_{i=0}^{p(n)-1} h_{0,i}$, incorrectly forces all positions to be true simultaneously.\n\nTherefore, the correct choice is A.", "answer": "$$\\boxed{A}$$", "id": "1438663"}, {"introduction": "For the simulation to be valid, the tape must only change according to the Turing Machine's rules; it cannot change spontaneously. This principle of locality is enforced by a \"frame axiom,\" a crucial set of clauses in the final formula. This practice asks you to construct the logical clauses that ensure a tape cell's contents remain stable when the tape head is not positioned over it, a key part of ensuring the computation's integrity. [@problem_id:1438617]", "problem": "In the context of the Cook-Levin theorem, a Turing Machine's computation history is encoded into a large Boolean formula. This formula is satisfiable if and only if the machine accepts the input string. A part of this formula must ensure that the machine's configuration changes only according to its transition rules.\n\nThis encoding uses a set of Boolean variables to describe the machine's state at each time step $i$ and tape position $j$. Let the tape alphabet be $\\Sigma$. We define the following variables:\n- $H_{i,j}$ is true if the tape head is at position $j$ at time $i$.\n- $S_{i,j,s}$ is true if the tape cell at position $j$ contains the symbol $s \\in \\Sigma$ at time $i$.\n\nA crucial part of the construction is the \"frame axiom\" or \"locality rule,\" which ensures that tape cells do not change spontaneously. Specifically, it must enforce the following condition:\n\"If the tape head is NOT at position $j$ at time $i$, then the symbol in cell $j$ must remain the same from time $i$ to time $i+1$.\"\n\nThis rule must be translated into a set of clauses in Conjunctive Normal Form (CNF) for every valid time $i$, position $j$, and symbol $s \\in \\Sigma$. Which of the following CNF formulas correctly and completely captures this rule for a single time $i$, position $j$, and symbol $s$?\n\nA. $(H_{i,j} \\lor \\lnot S_{i,j,s} \\lor S_{i+1,j,s}) \\land (H_{i,j} \\lor S_{i,j,s} \\lor \\lnot S_{i+1,j,s})$\n\nB. $(\\lnot H_{i,j} \\lor \\lnot S_{i,j,s} \\lor S_{i+1,j,s}) \\land (\\lnot H_{i,j} \\lor S_{i,j,s} \\lor \\lnot S_{i+1,j,s})$\n\nC. $(H_{i,j} \\lor \\lnot S_{i,j,s} \\lor S_{i+1,j,s})$\n\nD. $(H_{i+1,j} \\lor \\lnot S_{i,j,s} \\lor S_{i+1,j,s}) \\land (H_{i+1,j} \\lor S_{i,j,s} \\lor \\lnot S_{i+1,j,s})$", "solution": "We need to encode the locality rule: if the head is not at position $j$ at time $i$, then the symbol in cell $j$ does not change from time $i$ to time $i+1$. For a fixed $i$, $j$, and $s \\in \\Sigma$, this is the conditional equivalence\n$$\n\\lnot H_{i,j} \\rightarrow \\left(S_{i,j,s} \\leftrightarrow S_{i+1,j,s}\\right).\n$$\nThe equivalence is a conjunction of two implications:\n$$\nS_{i,j,s} \\leftrightarrow S_{i+1,j,s} \\equiv \\left(S_{i,j,s} \\rightarrow S_{i+1,j,s}\\right) \\land \\left(S_{i+1,j,s} \\rightarrow S_{i,j,s}\\right).\n$$\nDistributing the outer implication over the conjunction yields two conditionals:\n$$\n\\lnot H_{i,j} \\rightarrow \\left(S_{i,j,s} \\rightarrow S_{i+1,j,s}\\right), \\quad \\lnot H_{i,j} \\rightarrow \\left(S_{i+1,j,s} \\rightarrow S_{i,j,s}\\right).\n$$\nEach implication $A \\rightarrow B$ is equivalent to $\\lnot A \\lor B$. For the first,\n$$\n\\lnot H_{i,j} \\rightarrow \\left(S_{i,j,s} \\rightarrow S_{i+1,j,s}\\right) \\equiv H_{i,j} \\lor \\lnot S_{i,j,s} \\lor S_{i+1,j,s}.\n$$\nFor the second,\n$$\n\\lnot H_{i,j} \\rightarrow \\left(S_{i+1,j,s} \\rightarrow S_{i,j,s}\\right) \\equiv H_{i,j} \\lor \\lnot S_{i+1,j,s} \\lor S_{i,j,s}.\n$$\nThus, the correct CNF is the conjunction of these two clauses:\n$$\n\\left(H_{i,j} \\lor \\lnot S_{i,j,s} \\lor S_{i+1,j,s}\\right) \\land \\left(H_{i,j} \\lor S_{i,j,s} \\lor \\lnot S_{i+1,j,s}\\right).\n$$\nComparing with the options, this matches option A. Option B incorrectly conditions on $H_{i,j}$ being true (it uses $\\lnot H_{i,j}$ in each clause so the constraints apply when $H_{i,j}$ is true), option C includes only one direction and is incomplete, and option D incorrectly uses $H_{i+1,j}$ instead of $H_{i,j}$.", "answer": "$$\\boxed{A}$$", "id": "1438617"}, {"introduction": "A correct logical encoding must not only permit valid computations but also forbid invalid ones. This thought experiment explores a common pitfall by asking you to identify the consequences of omitting the \"at-most-one\" constraints for the machine's state and head position. Understanding this failure mode deepens your appreciation for why every component of the Cook-Levin construction is essential for a faithful simulation. [@problem_id:1438664]", "problem": "In the context of the Cook-Levin theorem, a standard proof technique involves constructing a propositional logic formula $\\Phi$ that is satisfiable if and only if a given Non-deterministic Turing Machine (NTM) $M$ accepts an input string $w$. This construction simulates the computation of $M$ on $w$ over a polynomial number of time steps, $P(|w|)$.\n\nThe formula typically uses Boolean variables to describe the machine's configuration at each time step $t$, where $0 \\le t \\le P(|w|)$. These variables include:\n- $Q_{t,q}$: True if $M$ is in state $q$ at time step $t$.\n- $H_{t,k}$: True if the tape head of $M$ is at position $k$ at time step $t$.\n- $T_{t,k,s}$: True if tape cell $k$ contains symbol $s$ at time step $t$.\n\nA computer science student is attempting to implement this construction. They correctly create the parts of the formula $\\Phi$ that enforce:\n1.  The machine begins in the correct starting configuration for input $w$.\n2.  The machine's computation eventually reaches an accepting state.\n3.  Each transition from a configuration at time $t$ to one at $t+1$ is valid according to $M$'s transition function.\n4.  At any time $t$, each tape cell $k$ contains *exactly one* symbol.\n5.  At any time $t$, the machine is in *at least one* state and its tape head is at *at least one* position. This is done via clauses like $(Q_{t,q_1} \\lor Q_{t,q_2} \\lor ...)$ for all states $q_i$.\n\nHowever, the student forgets to add the \"uniqueness\" or \"at-most-one\" clauses for the machine's state and head position. Specifically, for any given time $t$, all pairwise negative clauses of the form $(\\lnot Q_{t,q_i} \\lor \\lnot Q_{t,q_j})$ for distinct states $q_i, q_j$ and $(\\lnot H_{t,k_i} \\lor \\lnot H_{t,k_j})$ for distinct positions $k_i, k_j$ have been omitted from the formula $\\Phi$.\n\nWhich of the following describes a potential consequence of this omission, meaning it could be represented by a satisfying assignment for this incomplete formula?\n\nA. The satisfying assignment could correspond to a \"computation\" where the machine is in multiple distinct states at the same time $t$.\n\nB. The satisfying assignment could correspond to a \"computation\" where a transition from time $t$ to $t+1$ is performed that is not allowed by the machine's transition function.\n\nC. The satisfying assignment could correspond to a \"computation\" that does not begin in the correct start state with the input $w$ on the tape.\n\nD. The satisfying assignment could correspond to a \"computation\" where the machine is in no state at all at a particular time $t$.\n\nE. The satisfying assignment could correspond to a \"computation\" that runs for $P(|w|)$ steps but never enters any of the machine's defined accepting states.", "solution": "We analyze the logical consequences of omitting the at-most-one (AMO) clauses for the state variables $Q_{t,q}$ and the head-position variables $H_{t,k}$, while keeping all other parts of the Cook-Levin construction intact.\n\nFirst, we restate the enforced parts:\n1. Start configuration is enforced: at $t=0$, the tape encodes $w$, the head and state are set to the standard start, and all other configuration bits match the initial specification.\n2. Acceptance is enforced: there exists $t \\in \\{0,\\dots,P(|w|)\\}$ such that $Q_{t,q_{\\text{acc}}}$ is true.\n3. Transition validity is enforced: for each $t,k,q,s$, clauses of the form\n$$\n\\left(Q_{t,q} \\land H_{t,k} \\land T_{t,k,s}\\right) \\Rightarrow \\text{Next}_{t+1}(q,s,k),\n$$\nwhere $\\text{Next}_{t+1}(q,s,k)$ asserts the specific updates prescribed by the transition function $\\delta(q,s)=(q',s',d)$, namely $Q_{t+1,q'}$, $H_{t+1,k'}$ with $k'=k+d$, and $T_{t+1,k,s'}$ for the written symbol at cell $k$.\n4. Exactly one tape symbol per cell is enforced: for each $t,k$ we have both an at-least-one clause $\\bigvee_{s} T_{t,k,s}$ and pairwise mutual exclusion clauses $\\left(\\lnot T_{t,k,s} \\lor \\lnot T_{t,k,s'}\\right)$ for all $s \\neq s'$.\n5. At-least-one state and at-least-one head position are enforced: for each $t$, $\\bigvee_{q} Q_{t,q}$ and $\\bigvee_{k} H_{t,k}$ hold.\n\nWhat is omitted are precisely the AMO constraints for $Q$ and $H$: for each fixed $t$, there are no clauses of the form $\\left(\\lnot Q_{t,q_{i}} \\lor \\lnot Q_{t,q_{j}}\\right)$ for $q_{i} \\neq q_{j}$, and no clauses of the form $\\left(\\lnot H_{t,k_{i}} \\lor \\lnot H_{t,k_{j}}\\right)$ for $k_{i} \\neq k_{j}$.\n\nWe now evaluate each option:\n\nA. Multiple distinct states at the same time $t$.\nBecause the AMO constraints on $Q_{t,q}$ are missing, the formula does not syntactically forbid setting $Q_{t,q_{1}}$ and $Q_{t,q_{2}}$ both true at the same $t$. The only way this could be indirectly forbidden is if transition-validity plus tape-symbol exactness created a contradiction. However, there exist machines $M$ and consistent choices of $H_{t,k}$ and $T_{t,k,s}$ such that no contradiction arises. Concretely, suppose at time $t$ the head is at some $k$ with $H_{t,k}$ true and the scanned symbol is $s$ with $T_{t,k,s}$ true. If two distinct states $q_{1},q_{2}$ satisfy that $\\delta(q_{1},s)=(q'_{1},s',d_{1})$ and $\\delta(q_{2},s)=(q'_{2},s',d_{2})$ share the same written symbol $s'$, then the implications\n$$\n\\left(Q_{t,q_{1}} \\land H_{t,k} \\land T_{t,k,s}\\right) \\Rightarrow T_{t+1,k,s'} \\quad \\text{and} \\quad \\left(Q_{t,q_{2}} \\land H_{t,k} \\land T_{t,k,s}\\right) \\Rightarrow T_{t+1,k,s'}\n$$\nare consistent with the exact-one tape-symbol constraints at $t+1$ for cell $k$. The consequences $Q_{t+1,q'_{1}}$ and $Q_{t+1,q'_{2}}$ can both hold because there is no AMO on $Q_{t+1,\\cdot}$, and similarly multiple $H_{t+1,k'}$ can be set because there is no AMO on $H_{t+1,\\cdot}$. Therefore, there exists a satisfying assignment with multiple $Q_{t,q}$ true at the same $t$. Hence A is a potential consequence.\n\nB. An illegal transition from $t$ to $t+1$.\nThe construction includes the transition-validity clauses that, for every enabled antecedent $\\left(Q_{t,q} \\land H_{t,k} \\land T_{t,k,s}\\right)$, enforce exactly the updates permitted by $\\delta(q,s)$. Missing AMO on $Q$ and $H$ does not introduce any clause allowing a transition not in $\\delta$. It may allow multiple simultaneous transitions to fire, but each one is individually allowed. Therefore, the formula still forbids any single transition that is not in the transition function. Hence B is not a consequence.\n\nC. Incorrect starting configuration.\nThe starting configuration clauses remain present and enforce the correct start state, head position, and input on the tape at $t=0$. Missing AMO at other times does not invalidate this. Hence C is not a consequence.\n\nD. No state at some time $t$.\nThe at-least-one-state clause $\\bigvee_{q} Q_{t,q}$ is present for each $t$, so it is impossible to have all $Q_{t,q}$ false at any $t$. Hence D is not a consequence.\n\nE. Never entering an accepting state.\nThe acceptance condition is enforced (e.g., via $\\bigvee_{t \\le P(|w|)} Q_{t,q_{\\text{acc}}}$), so some $Q_{t,q_{\\text{acc}}}$ must be true. Missing AMO does not remove this requirement. Hence E is not a consequence.\n\nTherefore, the omission of the AMO constraints makes it possible for the satisfying assignment to encode a simultaneous occupancy of multiple states (and likewise multiple head positions), without violating the remaining constraints, so A is the correct choice.", "answer": "$$\\boxed{A}$$", "id": "1438664"}]}