{"hands_on_practices": [{"introduction": "Before we can use powerful automated solvers, we must translate logical problems into a standard format they understand: Conjunctive Normal Form (CNF). This exercise guides you through the systematic process of converting a common logical structure, the biconditional equivalence $z \\leftrightarrow (x \\land y)$, into an equivalent set of CNF clauses. Mastering this mechanical conversion [@problem_id:1462173] is a critical hands-on skill, as this type of transformation is fundamental for encoding complex systems, from circuit design to software verification, into a solvable format.", "problem": "In computational logic, converting arbitrary logical formulas into a standardized format is a crucial first step for many algorithms, particularly those designed to solve the Boolean satisfiability problem. One of the most common standard formats is the Conjunctive Normal Form (CNF).\n\nA formula is in CNF if it is a conjunction (AND, denoted by $\\land$) of one or more clauses, where a clause is a disjunction (OR, denoted by $\\lor$) of one or more literals. A literal is either a variable (e.g., $x$) or its negation (e.g., $\\neg x$).\n\nConsider the logical equivalence statement $z \\leftrightarrow (x \\land y)$. This type of statement is a fundamental building block when encoding complex logical circuits into a format suitable for a CNF-based solver. Your task is to convert this statement into a logically equivalent set of clauses.\n\nWhich of the following sets of clauses is logically equivalent to the expression $z \\leftrightarrow (x \\land y)$?\n\nA. $\\{ (\\neg x \\lor z), (\\neg y \\lor z), (\\neg z \\lor x \\lor y) \\}$\n\nB. $\\{ (\\neg x \\lor \\neg y \\lor z), (\\neg z \\lor x), (\\neg z \\lor y) \\}$\n\nC. $\\{ (x \\lor y \\lor \\neg z), (z \\lor \\neg x), (z \\lor \\neg y) \\}$\n\nD. $\\{ (\\neg x \\lor z), (\\neg y \\lor z), (\\neg z \\lor x), (\\neg z \\lor y) \\}$\n\nE. $\\{ (\\neg x \\lor \\neg y \\lor z) \\}$", "solution": "The goal is to convert the logical expression $z \\leftrightarrow (x \\land y)$ into an equivalent Conjunctive Normal Form (CNF). This involves transforming the expression into a conjunction of clauses, where each clause is a disjunction of literals.\n\nStep 1: Expand the biconditional.\nThe biconditional operator $A \\leftrightarrow B$ is logically equivalent to $(A \\rightarrow B) \\land (B \\rightarrow A)$.\nApplying this to our expression, we get:\n$$ (z \\rightarrow (x \\land y)) \\land ((x \\land y) \\rightarrow z) $$\n\nStep 2: Convert implications to disjunctions.\nThe implication operator $A \\rightarrow B$ is logically equivalent to $\\neg A \\lor B$. We apply this rule to both parts of our expression.\nFor the first part, $(z \\rightarrow (x \\land y))$, we get:\n$$ \\neg z \\lor (x \\land y) $$\nFor the second part, $((x \\land y) \\rightarrow z)$, we get:\n$$ \\neg(x \\land y) \\lor z $$\nCombining these, the full expression is now:\n$$ (\\neg z \\lor (x \\land y)) \\land (\\neg(x \\land y) \\lor z) $$\n\nStep 3: Apply De Morgan's Law.\nThe expression is a conjunction of two terms. Let's analyze each term to ensure it is in clause form (a disjunction of literals).\nThe second term, $\\neg(x \\land y) \\lor z$, contains a negation over a conjunction. We use De Morgan's Law, which states that $\\neg(A \\land B) \\equiv (\\neg A \\lor \\neg B)$.\nApplying this, the second term becomes:\n$$ (\\neg x \\lor \\neg y) \\lor z $$\nSince the $\\lor$ operator is associative, we can write this as a single clause:\n$$ (\\neg x \\lor \\neg y \\lor z) $$\n\nStep 4: Apply the Distributive Law.\nThe first term, $\\neg z \\lor (x \\land y)$, contains a conjunction within a disjunction. This is not a valid clause. We must use the distributive law, which states that $A \\lor (B \\land C) \\equiv (A \\lor B) \\land (A \\lor C)$.\nLet $A = \\neg z$, $B = x$, and $C = y$. Applying the law, the first term becomes:\n$$ (\\neg z \\lor x) \\land (\\neg z \\lor y) $$\nThis expression is a conjunction of two valid clauses: $(\\neg z \\lor x)$ and $(\\neg z \\lor y)$.\n\nStep 5: Combine the results.\nNow, we substitute the converted forms back into the main expression from Step 2.\nThe original expression is equivalent to:\n$$ ((\\neg z \\lor x) \\land (\\neg z \\lor y)) \\land (\\neg x \\lor \\neg y \\lor z) $$\nThis is a conjunction of three clauses. The set of clauses is therefore:\n$$ \\{ (\\neg z \\lor x), (\\neg z \\lor y), (\\neg x \\lor \\neg y \\lor z) \\} $$\n\nStep 6: Match with the given options.\nWe compare our resulting set of clauses with the provided options. The set $\\{ (\\neg z \\lor x), (\\neg z \\lor y), (\\neg x \\lor \\neg y \\lor z) \\}$ matches option B, noting that the order of clauses in a set and the order of literals in a clause do not matter.\n\nTherefore, the correct option is B.", "answer": "$$\\boxed{B}$$", "id": "1462173"}, {"introduction": "The true power of the Satisfiability problem lies in its ability to model and solve complex scenarios from various real-world domains. This practice moves from abstract logic to a tangible application, asking you to translate rules for university course registration into a 2-SAT formula. By converting each 2-CNF clause into logical implications, you will build the foundation for the efficient graph-based algorithms that can solve 2-SAT problems, bridging the gap between natural language rules and their precise mathematical representation [@problem_id:1462201].", "problem": "A university is designing an automated course registration system. To ensure students meet prerequisites and avoid conflicts, the system must satisfy a set of logical constraints. For a particular student, let the Boolean variables $A$, $B$, and $C$ represent enrollment in courses 'Advanced Algorithms', 'Bioinformatics', and 'Compilers', respectively. A variable is true if the student enrolls in the course and false otherwise. The registration constraints are as follows:\n\n1.  A student cannot enroll in both 'Advanced Algorithms' and 'Bioinformatics' in the same semester due to a time conflict.\n2.  If a student enrolls in 'Advanced Algorithms', they must also enroll in 'Compilers' as a co-requisite.\n3.  A student must enroll in at least one of 'Bioinformatics' or 'Compilers'.\n\nThese constraints can be modeled as a 2-Satisfiability (2-SAT) problem. In a 2-SAT problem, each logical clause of the form $(L_1 \\vee L_2)$, where $L_1$ and $L_2$ are literals (a variable or its negation), is equivalent to a pair of implications: $(\\neg L_1 \\implies L_2)$ and $(\\neg L_2 \\implies L_1)$. The collection of all such implications derived from all clauses in a formula is used to construct an implication graph.\n\nWhich of the following sets of implications correctly and completely represents the given registration constraints?\n\nA. { $A \\implies \\neg B$, $B \\implies \\neg A$, $A \\implies C$, $\\neg C \\implies \\neg A$, $\\neg B \\implies C$, $\\neg C \\implies B$ }\n\nB. { $A \\implies \\neg B$, $A \\implies C$, $\\neg B \\implies C$ }\n\nC. { $\\neg A \\implies B$, $\\neg B \\implies A$, $\\neg A \\implies C$, $C \\implies A$, $B \\implies C$, $C \\implies B$ }\n\nD. { $\\neg B \\implies A$, $\\neg A \\implies B$, $C \\implies A$, $\\neg A \\implies \\neg C$, $C \\implies \\neg B$, $B \\implies \\neg C$ }", "solution": "We define Boolean variables $A$, $B$, and $C$ for enrollment in 'Advanced Algorithms', 'Bioinformatics', and 'Compilers', respectively. Translate each constraint into a 2-CNF clause and then into implications using the 2-SAT rule that $(L_{1} \\vee L_{2})$ is equivalent to $(\\neg L_{1} \\implies L_{2})$ and $(\\neg L_{2} \\implies L_{1})$.\n\nConstraint 1: A student cannot enroll in both $A$ and $B$. This is $\\neg(A \\wedge B)$, which is equivalent by De Morgan's law to $(\\neg A \\vee \\neg B)$. Let $L_{1}=\\neg A$ and $L_{2}=\\neg B$. The implications are:\n$$\\neg(\\neg A) \\implies \\neg B \\;\\;\\Longleftrightarrow\\;\\; A \\implies \\neg B,$$\n$$\\neg(\\neg B) \\implies \\neg A \\;\\;\\Longleftrightarrow\\;\\; B \\implies \\neg A.$$\n\nConstraint 2: If $A$ then $C$, i.e., $A \\implies C$, which is equivalent to $(\\neg A \\vee C)$. Let $L_{1}=\\neg A$ and $L_{2}=C$. The implications are:\n$$\\neg(\\neg A) \\implies C \\;\\;\\Longleftrightarrow\\;\\; A \\implies C,$$\n$$\\neg C \\implies \\neg A.$$\n\nConstraint 3: At least one of $B$ or $C$: $(B \\vee C)$. Let $L_{1}=B$ and $L_{2}=C$. The implications are:\n$$\\neg B \\implies C,$$\n$$\\neg C \\implies B.$$\n\nCollecting all implications gives the set\n$$\\{\\,A \\implies \\neg B,\\; B \\implies \\neg A,\\; A \\implies C,\\; \\neg C \\implies \\neg A,\\; \\neg B \\implies C,\\; \\neg C \\implies B\\,\\},$$\nwhich matches option A exactly. Option B omits necessary contraposed implications and is incomplete. Option C corresponds to $(A \\vee B)$, $(A \\vee C)$, and $(\\neg B \\vee \\neg C)$, which do not represent the original constraints. Option D similarly does not match the required clauses and introduces implications inconsistent with the constraints.", "answer": "$$\\boxed{A}$$", "id": "1462201"}, {"introduction": "Not all sets of constraints can be satisfied simultaneously; sometimes, a problem is inherently over-constrained. In these cases, the goal shifts from finding a perfect solution to finding the best possible one, leading us to the Maximum Satisfiability (MAX-SAT) problem. This exercise presents an unsatisfiable formula and challenges you to find a truth assignment that satisfies the greatest number of clauses [@problem_id:1462192]. This introduces a crucial optimization perspective on SAT, essential for finding optimal compromises in fields from system diagnostics to artificial intelligence.", "problem": "In digital logic design, a system's behavior can be modeled using Boolean variables and constraints. Consider a simple monitoring system with two binary sensors, whose states are represented by the Boolean variables $x_1$ and $x_2$. A state is `True` if the sensor is active and `False` if it is inactive.\n\nThe system's operational integrity is governed by a set of four constraints, which are expressed as a single Boolean formula in Conjunctive Normal Form (CNF). A CNF formula is a conjunction (AND) of clauses, where each clause is a disjunction (OR) of literals (a variable or its negation). The formula for this system is:\n$$ \\phi = (x_1 \\lor x_2) \\land (x_1 \\lor \\neg x_2) \\land (\\neg x_1 \\lor x_2) \\land (\\neg x_1 \\lor \\neg x_2) $$\nIt has been determined that this set of constraints is logically inconsistent, meaning there is no assignment of `True` or `False` to $x_1$ and $x_2$ that can satisfy all four clauses simultaneously. This is known as an unsatisfiable formula.\n\nYour task is to solve the corresponding Maximum Satisfiability (MAX-SAT) problem. Find the maximum number of clauses in the formula $\\phi$ that can be satisfied by a single assignment of truth values to the variables $x_1$ and $x_2$.\n\nSelect the correct option from the choices below.\n\nA. 0\n\nB. 1\n\nC. 2\n\nD. 3\n\nE. 4", "solution": "We are given a CNF formula with two Boolean variables $x_1$ and $x_2$:\n$$\n\\phi=(x_1 \\lor x_2) \\land (x_1 \\lor \\neg x_2) \\land (\\neg x_1 \\lor x_2) \\land (\\neg x_1 \\lor \\neg x_2).\n$$\nThe MAX-SAT task is to find an assignment to $x_1, x_2 \\in \\{\\text{True}, \\text{False}\\}$ that maximizes the number of satisfied clauses among the four.\n\nLet $C_1 = (x_1 \\lor x_2)$, $C_2 = (x_1 \\lor \\neg x_2)$, $C_3 = (\\neg x_1 \\lor x_2)$, and $C_4 = (\\neg x_1 \\lor \\neg x_2)$. We evaluate all four possible assignments:\n\n1) For $(x_1, x_2) = (\\text{True}, \\text{True})$:\n- $C_1$ is True, since at least one of $x_1, x_2$ is True.\n- $C_2$ is True, since $x_1$ is True.\n- $C_3$ is True, since $x_2$ is True.\n- $C_4$ is False, since both $\\neg x_1$ and $\\neg x_2$ are False.\nTotal satisfied: $3$.\n\n2) For $(x_1, x_2) = (\\text{True}, \\text{False})$:\n- $C_1$ is True, since $x_1$ is True.\n- $C_2$ is True, since $x_1$ is True or $\\neg x_2$ is True.\n- $C_3$ is False, since $\\neg x_1$ is False and $x_2$ is False.\n- $C_4$ is True, since $\\neg x_2$ is True.\nTotal satisfied: $3$.\n\n3) For $(x_1, x_2) = (\\text{False}, \\text{True})$:\n- $C_1$ is True, since $x_2$ is True.\n- $C_2$ is False, since $x_1$ is False and $\\neg x_2$ is False.\n- $C_3$ is True, since $\\neg x_1$ is True or $x_2$ is True.\n- $C_4$ is True, since $\\neg x_1$ is True.\nTotal satisfied: $3$.\n\n4) For $(x_1, x_2) = (\\text{False}, \\text{False})$:\n- $C_1$ is False, since both $x_1$ and $x_2$ are False.\n- $C_2$ is True, since $\\neg x_2$ is True.\n- $C_3$ is True, since $\\neg x_1$ is True.\n- $C_4$ is True, since both $\\neg x_1$ and $\\neg x_2$ are True.\nTotal satisfied: $3$.\n\nTherefore, the maximum number of clauses that can be satisfied by any assignment is $3$. This corresponds to option D.", "answer": "$$\\boxed{D}$$", "id": "1462192"}]}