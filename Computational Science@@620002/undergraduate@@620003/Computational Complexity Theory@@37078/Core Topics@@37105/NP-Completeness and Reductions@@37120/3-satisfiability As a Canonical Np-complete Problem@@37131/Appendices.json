{"hands_on_practices": [{"introduction": "Solving a complex 3-SAT formula often involves more than just brute-force guessing; it relies on logical deduction. This practice explores a fundamental technique known as Boolean Constraint Propagation, where fixing one variable's value can force the values of others to maintain satisfiability. This exercise provides a hands-on feel for this deductive process, revealing the hidden logical chains within a formula and illustrating a core principle used in efficient SAT-solving algorithms. [@problem_id:1410915]", "problem": "In the study of computational complexity, the 3-Satisfiability (3-SAT) problem is a canonical example of an NP-complete problem. An instance of 3-SAT consists of a Boolean formula in 3-Conjunctive Normal Form (3-CNF), which is a conjunction (AND) of clauses, where each clause is a disjunction (OR) of exactly three literals. A literal is a variable or its negation. The problem is to determine if there exists an assignment of `true` or `false` values to the variables that makes the entire formula evaluate to `true`.\n\nConsider the following 3-SAT formula $\\phi$ defined over the set of Boolean variables $\\{x_1, x_2, x_3, x_4, z_1, z_2, z_3\\}$:\n$$ \\phi = C_1 \\land C_2 \\land C_3 \\land C_4 \\land C_5 \\land C_6 $$\nwhere the clauses are:\n$C_1 = (\\neg x_1 \\lor x_2 \\lor z_1)$\n$C_2 = (\\neg x_1 \\lor x_2 \\lor \\neg z_1)$\n$C_3 = (\\neg x_2 \\lor x_3 \\lor z_2)$\n$C_4 = (\\neg x_2 \\lor x_3 \\lor \\neg z_2)$\n$C_5 = (\\neg x_3 \\lor \\neg x_4 \\lor z_3)$\n$C_6 = (\\neg x_3 \\lor \\neg x_4 \\lor \\neg z_3)$\n\nA common strategy in algorithms that solve SAT problems is to tentatively assign a value to a variable and then deduce any logical consequences. This process is often called Boolean Constraint Propagation. Suppose we begin the search for a satisfying assignment for $\\phi$ by making the initial assignment $x_1 = \\text{true}$. This assignment can force the truth values of other variables in the formula if we are to maintain the possibility of satisfying $\\phi$.\n\nWhich of the following options correctly and completely describes the set of all other variable assignments that are logically forced by the initial assumption $x_1 = \\text{true}$?\n\nA. $x_2 = \\text{true}$\n\nB. $x_2 = \\text{true}, x_3 = \\text{true}$\n\nC. $x_2 = \\text{true}, x_3 = \\text{true}, x_4 = \\text{true}$\n\nD. $x_2 = \\text{true}, x_3 = \\text{true}, x_4 = \\text{false}$\n\nE. $x_2 = \\text{true}, x_3 = \\text{true}, x_4 = \\text{false}, z_1=\\text{true}, z_2=\\text{true}, z_3=\\text{true}$\n\nF. No other variable assignments are forced.", "solution": "We start with the 3-CNF formula\n$$\\phi=(\\neg x_{1}\\lor x_{2}\\lor z_{1})\\land(\\neg x_{1}\\lor x_{2}\\lor \\neg z_{1})\\land(\\neg x_{2}\\lor x_{3}\\lor z_{2})\\land(\\neg x_{2}\\lor x_{3}\\lor \\neg z_{2})\\land(\\neg x_{3}\\lor \\neg x_{4}\\lor z_{3})\\land(\\neg x_{3}\\lor \\neg x_{4}\\lor \\neg z_{3}).$$\nAssume $x_{1}=\\text{true}$. Then $\\neg x_{1}=\\text{false}$, so the first two clauses simplify to\n$$(x_{2}\\lor z_{1})\\land(x_{2}\\lor \\neg z_{1}).$$\nFrom $(x_{2}\\lor z_{1})\\land(x_{2}\\lor \\neg z_{1})$ we derive $x_{2}$ by resolution on $z_{1}$, or equivalently by contradiction: assuming $x_{2}=\\text{false}$ forces $z_{1}=\\text{true}$ from the first clause and $z_{1}=\\text{false}$ from the second, which is impossible. Therefore,\n$$x_{2}=\\text{true}.$$\n\nSubstituting $x_{2}=\\text{true}$ into the next two clauses yields\n$$(x_{3}\\lor z_{2})\\land(x_{3}\\lor \\neg z_{2}).$$\nBy the same reasoning as above, this conjunction forces\n$$x_{3}=\\text{true}.$$\n\nSubstituting $x_{3}=\\text{true}$ into the last two clauses gives\n$$(\\neg x_{4}\\lor z_{3})\\land(\\neg x_{4}\\lor \\neg z_{3}).$$\nAgain, by the same reasoning, this conjunction forces\n$$\\neg x_{4}=\\text{true},\\quad\\text{so }x_{4}=\\text{false}.$$\n\nFinally, we check whether any $z_{i}$ is forced. With $x_{2}=\\text{true}$, both $(x_{2}\\lor z_{1})$ and $(x_{2}\\lor \\neg z_{1})$ are satisfied regardless of $z_{1}$. With $x_{3}=\\text{true}$, both $(x_{3}\\lor z_{2})$ and $(x_{3}\\lor \\neg z_{2})$ are satisfied regardless of $z_{2}$. With $x_{4}=\\text{false}$, both $(\\neg x_{4}\\lor z_{3})$ and $(\\neg x_{4}\\lor \\neg z_{3})$ are satisfied regardless of $z_{3}$. Hence none of $z_{1},z_{2},z_{3}$ is logically forced by $x_{1}=\\text{true}$.\n\nTherefore, the complete set of logically forced assignments from $x_{1}=\\text{true}$ is $x_{2}=\\text{true}$, $x_{3}=\\text{true}$, and $x_{4}=\\text{false}$, which corresponds to option D.", "answer": "$$\\boxed{D}$$", "id": "1410915"}, {"introduction": "The central role of 3-SAT in complexity theory stems from its ability to model a vast array of computational problems. The first step in this modeling process is translating specific, real-world constraints into the rigid structure of 3-Conjunctive Normal Form (3-CNF). This exercise challenges you to construct such a formula, building the logical \"gadgets\" necessary to enforce a common constraint—a foundational skill for creating NP-completeness reductions. [@problem_id:1410932]", "problem": "In the design of a safety-critical control system for an industrial robot, there are three mutually exclusive operational modes, represented by Boolean variables: welding ($x_1$), painting ($x_2$), and drilling ($x_3$). A variable $x_i$ is assigned `true` if mode $i$ is active, and `false` otherwise. For the system to operate safely, the control logic must ensure that **exactly one** of these three modes is active at any given time.\n\nThe control logic is implemented as a Boolean formula that evaluates to `true` if and only if the configuration of active modes is valid. For compatibility with the hardware, this formula must be expressed in 3-Conjunctive Normal Form (3-CNF). A formula is in 3-CNF if it is a conjunction (logical AND, denoted by $\\land$) of one or more clauses, where each clause is a disjunction (logical OR, denoted by $\\lor$) of exactly three literals. A literal is a variable or its negation (e.g., $x_1$ or $\\neg x_1$).\n\nWhich of the following 3-CNF formulas correctly represents the constraint that exactly one of the variables $x_1, x_2, x_3$ is `true`?\n\nA. $(x_1 \\lor x_2 \\lor x_3) \\land (\\neg x_1 \\lor \\neg x_2 \\lor \\neg x_3) \\land (x_1 \\lor \\neg x_2 \\lor \\neg x_3) \\land (\\neg x_1 \\lor x_2 \\lor \\neg x_3) \\land (\\neg x_1 \\lor \\neg x_2 \\lor x_3)$\n\nB. $(\\neg x_1 \\lor \\neg x_2 \\lor \\neg x_3) \\land (x_1 \\lor \\neg x_2 \\lor \\neg x_3) \\land (\\neg x_1 \\lor x_2 \\lor \\neg x_3) \\land (\\neg x_1 \\lor \\neg x_2 \\lor x_3)$\n\nC. $(x_1 \\lor x_2 \\lor x_3) \\land (\\neg x_1 \\lor \\neg x_2) \\land (\\neg x_1 \\lor \\neg x_3) \\land (\\neg x_2 \\lor \\neg x_3)$\n\nD. $(x_1 \\lor x_2 \\lor x_3) \\land (x_1 \\lor x_2 \\lor \\neg x_3) \\land (x_1 \\lor \\neg x_2 \\lor x_3) \\land (\\neg x_1 \\lor x_2 \\lor x_3)$", "solution": "We must encode the constraint “exactly one of $x_{1},x_{2},x_{3}$ is true” in 3-CNF, meaning a conjunction of clauses, each clause being a disjunction of exactly three literals.\n\nLogically, “exactly one” is equivalent to the conjunction of “at least one” and “at most one.” The “at least one” part is expressed by the single clause\n$$\n(x_{1} \\lor x_{2} \\lor x_{3}).\n$$\nThe “at most one” part requires that no pair is simultaneously true, which in CNF is\n$$\n(\\neg x_{1} \\lor \\neg x_{2}) \\land (\\neg x_{1} \\lor \\neg x_{3}) \\land (\\neg x_{2} \\lor \\neg x_{3}).\n$$\nHowever, these three clauses each have only two literals, and the problem requires every clause to have exactly three literals. Among the provided options, we must therefore find a conjunction of 3-literal clauses that is equivalent to “exactly one.”\n\nEvaluate each option:\n\n1. Option C includes the correct logical structure “at least one” and the pairwise “at most one,” but the three pairwise clauses have only two literals, so it is not in 3-CNF as defined (exactly three literals per clause). Hence C is invalid by the given form requirement.\n\n2. Option D consists of the clauses\n$$\n(x_{1} \\lor x_{2} \\lor x_{3}) \\land (x_{1} \\lor x_{2} \\lor \\neg x_{3}) \\land (x_{1} \\lor \\neg x_{2} \\lor x_{3}) \\land (\\neg x_{1} \\lor x_{2} \\lor x_{3}).\n$$\nThe assignment $x_{1}=x_{2}=x_{3}=\\text{true}$ satisfies all four clauses, so D allows three trues and thus does not enforce “exactly one.” Hence D is incorrect.\n\n3. Option B consists of four clauses including $(\\neg x_{1} \\lor \\neg x_{2} \\lor \\neg x_{3})$ and the three “one positive, two negated” clauses. The assignment $x_{1}=x_{2}=x_{3}=\\text{false}$ satisfies all clauses, so B allows zero trues and thus does not enforce “exactly one.” Hence B is incorrect.\n\n4. Option A consists of\n$$\n(x_{1} \\lor x_{2} \\lor x_{3}) \\land (\\neg x_{1} \\lor \\neg x_{2} \\lor \\neg x_{3}) \\land (x_{1} \\lor \\neg x_{2} \\lor \\neg x_{3}) \\land (\\neg x_{1} \\lor x_{2} \\lor \\neg x_{3}) \\land (\\neg x_{1} \\lor \\neg x_{2} \\lor x_{3}).\n$$\nWe verify equivalence to “exactly one” by exhaustive logical implications:\n- If exactly one variable is true, say $x_{1}=\\text{true}$ and $x_{2}=x_{3}=\\text{false}$, then the first clause $(x_{1} \\lor x_{2} \\lor x_{3})$ is true; the second clause $(\\neg x_{1} \\lor \\neg x_{2} \\lor \\neg x_{3})$ is true since at least one variable is false; and each of the other three clauses has at least one true literal (indeed, all are satisfied), so the conjunction is true. By symmetry, the same holds when exactly one of $x_{2}$ or $x_{3}$ is true.\n- If zero variables are true, then $(x_{1} \\lor x_{2} \\lor x_{3})$ is false, so the conjunction is false. Thus zero trues are excluded.\n- If two variables are true, say $x_{1}=x_{2}=\\text{true}$ and $x_{3}=\\text{false}$, then the clause $(\\neg x_{1} \\lor \\neg x_{2} \\lor x_{3})$ evaluates to $(\\text{false} \\lor \\text{false} \\lor \\text{false})$, hence the conjunction is false. By symmetry, any assignment with two trues violates one of the last three clauses.\n- If all three variables are true, then $(\\neg x_{1} \\lor \\neg x_{2} \\lor \\neg x_{3})$ is false, so the conjunction is false. Thus three trues are excluded.\n\nTherefore, Option A is satisfied if and only if exactly one of $x_{1},x_{2},x_{3}$ is true, and every clause has exactly three literals, so it is valid 3-CNF meeting the requirement.\n\nConsequently, the correct choice is A.", "answer": "$$\\boxed{A}$$", "id": "1410932"}, {"introduction": "Why is 3-SAT considered a canonical NP-complete problem? A key reason is that any general satisfiability problem can be efficiently transformed into a 3-SAT instance, a process called reduction. This exercise walks you through the mechanics of such a transformation, converting a formula with clauses of varying lengths into an equivalent 3-CNF formula while preserving satisfiability. Mastering this procedure is essential for understanding how the complexity of thousands of different problems can be captured by 3-SAT. [@problem_id:1410956]", "problem": "In the field of digital circuit design, engineers often express system constraints using Boolean formulas. A common format is the Conjunctive Normal Form (CNF), which is a conjunction (AND, denoted by $\\land$) of clauses, where each clause is a disjunction (OR, denoted by $\\lor$) of literals (a variable or its negation). A formula is *satisfiable* if there exists an assignment of True/False values to its variables that makes the entire formula evaluate to True.\n\nAn engineer is working with a legacy hardware description language that can only process formulas in 3-CNF, meaning every clause in the formula must contain exactly three literals. The engineer's initial design constraints are captured by the following Boolean formula $\\phi$ involving two variables, $x_1$ and $x_2$:\n$$ \\phi = (x_1 \\lor x_2) \\land (\\neg x_1) \\land (\\neg x_2) $$\nTo convert this formula into an equivalent 3-CNF formula $\\psi$, the engineer uses a standard expansion procedure that preserves satisfiability. The procedure introduces new, unique \"dummy\" variables for each original clause that needs expansion. The rules are as follows:\n\n1.  A clause with two literals, like $(l_1 \\lor l_2)$, is replaced by the conjunction of two new 3-literal clauses: $(l_1 \\lor l_2 \\lor d_i) \\land (l_1 \\lor l_2 \\lor \\neg d_i)$, where $d_i$ is a new dummy variable.\n2.  A clause with one literal, like $(l_1)$, is replaced by the conjunction of four new 3-literal clauses: $(l_1 \\lor d_j \\lor d_k) \\land (l_1 \\lor d_j \\lor \\neg d_k) \\land (l_1 \\lor \\neg d_j \\lor d_k) \\land (l_1 \\lor \\neg d_j \\lor \\neg d_k)$, where $d_j$ and $d_k$ are two new distinct dummy variables.\n\nLet the clauses of $\\phi$ be indexed in order: $C_1 = (x_1 \\lor x_2)$, $C_2 = (\\neg x_1)$, and $C_3 = (\\neg x_2)$. For the conversion, use a dummy variable $d_1$ for clause $C_1$, dummy variables $d_2$ and $d_3$ for clause $C_2$, and dummy variables $d_4$ and $d_5$ for clause $C_3$. The resulting 3-CNF formula $\\psi$ is the conjunction of all the newly generated clauses.\n\nWhich one of the following statements correctly describes the resulting formula $\\psi$ and its satisfiability?\n\nA. $\\psi = [(x_1 \\lor x_2 \\lor d_1) \\land (x_1 \\lor x_2 \\lor \\neg d_1)] \\land [(\\neg x_1 \\lor d_2 \\lor d_3) \\land (\\neg x_1 \\lor d_2 \\lor \\neg d_3)] \\land [(\\neg x_2 \\lor d_4 \\lor d_5) \\land (\\neg x_2 \\lor d_4 \\lor \\neg d_5)]$, and $\\psi$ is unsatisfiable.\n\nB. $\\psi = [(x_1 \\lor x_2 \\lor d_1) \\land (x_1 \\lor x_2 \\lor \\neg d_1)] \\land [(\\neg x_1 \\lor d_2 \\lor d_3) \\land (\\neg x_1 \\lor d_2 \\lor \\neg d_3) \\land (\\neg x_1 \\lor \\neg d_2 \\lor d_3) \\land (\\neg x_1 \\lor \\neg d_2 \\lor \\neg d_3)] \\land [(\\neg x_2 \\lor d_4 \\lor d_5) \\land (\\neg x_2 \\lor d_4 \\lor \\neg d_5) \\land (\\neg x_2 \\lor \\neg d_4 \\lor d_5) \\land (\\neg x_2 \\lor \\neg d_4 \\lor \\neg d_5)]$, and $\\psi$ is satisfiable.\n\nC. $\\psi = [(x_1 \\lor x_2 \\lor d_1)] \\land [(\\neg x_1 \\lor d_2 \\lor d_3)] \\land [(\\neg x_2 \\lor d_4 \\lor d_5)]$, and $\\psi$ is satisfiable.\n\nD. $\\psi = [(x_1 \\lor x_2 \\lor d_1) \\land (x_1 \\lor x_2 \\lor \\neg d_1)] \\land [(\\neg x_1 \\lor d_2 \\lor d_3) \\land (\\neg x_1 \\lor d_2 \\lor \\neg d_3) \\land (\\neg x_1 \\lor \\neg d_2 \\lor d_3) \\land (\\neg x_1 \\lor \\neg d_2 \\lor \\neg d_3)] \\land [(\\neg x_2 \\lor d_4 \\lor d_5) \\land (\\neg x_2 \\lor d_4 \\lor \\neg d_5) \\land (\\neg x_2 \\lor \\neg d_4 \\lor d_5) \\land (\\neg x_2 \\lor \\neg d_4 \\lor \\neg d_5)]$, and $\\psi$ is unsatisfiable.", "solution": "We start from the given Boolean formula $\\phi$ in CNF:\n$$\n\\phi = (x_{1} \\lor x_{2}) \\land (\\neg x_{1}) \\land (\\neg x_{2}).\n$$\nWe are instructed to convert $\\phi$ into a 3-CNF formula $\\psi$ using the given expansion rules that preserve satisfiability, introducing fresh dummy variables for each clause requiring expansion.\n\nIdentify the clauses: $C_{1} = (x_{1} \\lor x_{2})$, $C_{2} = (\\neg x_{1})$, $C_{3} = (\\neg x_{2})$. According to the problem, use $d_{1}$ for $C_{1}$, $d_{2}, d_{3}$ for $C_{2}$, and $d_{4}, d_{5}$ for $C_{3}$.\n\nApply the expansion rules clause by clause:\n1. For the 2-literal clause $C_{1} = (x_{1} \\lor x_{2})$, rule 1 yields\n$$\n(x_{1} \\lor x_{2} \\lor d_{1}) \\land (x_{1} \\lor x_{2} \\lor \\neg d_{1}).\n$$\n2. For the unit clause $C_{2} = (\\neg x_{1})$, rule 2 yields\n$$\n(\\neg x_{1} \\lor d_{2} \\lor d_{3}) \\land (\\neg x_{1} \\lor d_{2} \\lor \\neg d_{3}) \\land (\\neg x_{1} \\lor \\neg d_{2} \\lor d_{3}) \\land (\\neg x_{1} \\lor \\neg d_{2} \\lor \\neg d_{3}).\n$$\n3. For the unit clause $C_{3} = (\\neg x_{2})$, rule 2 yields\n$$\n(\\neg x_{2} \\lor d_{4} \\lor d_{5}) \\land (\\neg x_{2} \\lor d_{4} \\lor \\neg d_{5}) \\land (\\neg x_{2} \\lor \\neg d_{4} \\lor d_{5}) \\land (\\neg x_{2} \\lor \\neg d_{4} \\lor \\neg d_{5}).\n$$\n\nThus, the resulting $3$-CNF formula $\\psi$ is the conjunction of all these clauses:\n$$\n\\psi = [(x_{1} \\lor x_{2} \\lor d_{1}) \\land (x_{1} \\lor x_{2} \\lor \\neg d_{1})] \\land [(\\neg x_{1} \\lor d_{2} \\lor d_{3}) \\land (\\neg x_{1} \\lor d_{2} \\lor \\neg d_{3}) \\land (\\neg x_{1} \\lor \\neg d_{2} \\lor d_{3}) \\land (\\neg x_{1} \\lor \\neg d_{2} \\lor \\neg d_{3})] \\land [(\\neg x_{2} \\lor d_{4} \\lor d_{5}) \\land (\\neg x_{2} \\lor d_{4} \\lor \\neg d_{5}) \\land (\\neg x_{2} \\lor \\neg d_{4} \\lor d_{5}) \\land (\\neg x_{2} \\lor \\neg d_{4} \\lor \\neg d_{5})].\n$$\n\nNext, we analyze satisfiability. The original formula $\\phi$ is unsatisfiable because $(\\neg x_{1}) \\land (\\neg x_{2})$ forces $x_{1} = \\text{False}$ and $x_{2} = \\text{False}$, which makes $(x_{1} \\lor x_{2})$ evaluate to False, so no assignment satisfies all clauses of $\\phi$.\n\nThe gadgets used preserve satisfiability as follows:\n- For a 2-literal clause $(l_{1} \\lor l_{2})$ replaced by $(l_{1} \\lor l_{2} \\lor d) \\land (l_{1} \\lor l_{2} \\lor \\neg d)$, if $l_{1} \\lor l_{2}$ is True, both clauses are satisfied for any value of $d$; if $l_{1} \\lor l_{2}$ is False, the conjunction becomes $d \\land \\neg d$, which is unsatisfiable.\n- For a unit clause $(l)$ replaced by the four clauses with two dummy variables, if $l$ is True, all four are satisfied; if $l$ is False, the conjunction reduces to\n$$\n(d_{a} \\lor d_{b}) \\land (d_{a} \\lor \\neg d_{b}) \\land (\\neg d_{a} \\lor d_{b}) \\land (\\neg d_{a} \\lor \\neg d_{b}),\n$$\nwhich is unsatisfiable because no assignment to $d_{a}, d_{b}$ satisfies all four simultaneously.\n\nApplying this to our case, the unit-clause gadgets for $(\\neg x_{1})$ and $(\\neg x_{2})$ force $x_{1} = \\text{False}$ and $x_{2} = \\text{False}$ in any satisfying assignment of $\\psi$. Under $x_{1} = \\text{False}$ and $x_{2} = \\text{False}$, the gadget for $(x_{1} \\lor x_{2})$ becomes $(d_{1}) \\land (\\neg d_{1})$, which is unsatisfiable. Therefore, $\\psi$ is unsatisfiable.\n\nComparing to the options: the structurally correct expanded $\\psi$ is the one that uses two clauses for $C_{1}$ and four clauses each for $C_{2}$ and $C_{3}$, and it is unsatisfiable. This matches option D.", "answer": "$$\\boxed{D}$$", "id": "1410956"}]}