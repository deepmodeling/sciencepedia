{"hands_on_practices": [{"introduction": "Reductions are not just for proving problems are hard; they are a fundamental problem-solving technique. This first exercise demonstrates how a seemingly specialized problem, like tiling a custom floor plan with dominoes, can be solved efficiently by translating it into a well-understood problem in graph theory: finding a perfect matching. This practice highlights how recognizing an underlying structural equivalence can unlock powerful, pre-existing algorithmic solutions. [@problem_id:1436237]", "problem": "An architect is designing a floor plan for a room using a grid-based system. The room is represented by a grid of squares. Some squares are designated as \"obstructed\" and cannot be tiled, while the remaining \"available\" squares must be perfectly covered by 1x2 rectangular tiles, commonly known as dominoes. Each domino must cover exactly two available squares that are adjacent (i.e., share a side).\n\nA computer scientist is tasked with creating an algorithm to determine if a given floor plan can be perfectly tiled. It is known from computational complexity theory that the `PERFECT MATCHING` problem can be solved efficiently (in polynomial time). The `PERFECT MATCHING` problem is defined as follows: given a graph $G=(V, E)$, determine if there exists a subset of edges $M \\subseteq E$ such that every vertex in the set of vertices $V$ is an endpoint of exactly one edge in $M$.\n\nYour task is to formalize a polynomial-time reduction from the domino tiling problem to the `PERFECT MATCHING` problem. For a general grid with a set of available squares $S$, which of the following options correctly describes the construction of a graph $G=(V, E)$ such that the existence of a perfect tiling of the available squares is equivalent to the existence of a perfect matching in $G$?\n\nA. Let the set of vertices $V$ be the set of all available squares $S$. An edge $(u, v)$ exists in the set of edges $E$ if and only if the squares corresponding to vertices $u$ and $v$ are adjacent in the grid.\n\nB. Let the set of vertices $V$ be the set of all available squares $S$. An edge $(u, v)$ exists in the set of edges $E$ if and only if the squares corresponding to vertices $u$ and $v$ are in the same row or the same column.\n\nC. Let the set of vertices $V$ consist of one vertex for each row and one vertex for each column of the grid. An edge $(r, c)$ exists in the set of edges $E$ if and only if the square at row $r$ and column $c$ is an available square.\n\nD. Let the set of vertices $V$ be the set of all possible valid placements for a single domino on the grid. An edge $(d_1, d_2)$ exists in the set of edges $E$ if and only if the domino placements $d_1$ and $d_2$ do not overlap.", "solution": "We formalize the reduction from the domino tiling problem on a grid with available squares $S$ to the PERFECT MATCHING problem as follows.\n\nConstruction of the graph: Given a grid and a set of available squares $S$, define a graph $G=(V,E)$ by\n$$\nV=S,\\qquad E=\\{\\{u,v\\}\\subseteq S:\\ u\\text{ and }v\\text{ are adjacent squares in the grid}\\}.\n$$\nAdjacency means that if a square is indexed by integer coordinates $(i,j)$, then $u=(i,j)$ and $v=(i',j')$ are adjacent if and only if $|i-i'|+|j-j'|=1$. This construction can be carried out in time polynomial in $|S|$ by scanning the grid and adding, for each $u\\in S$, edges to its at most four neighbors that also lie in $S$.\n\nCorrectness (tilings correspond to perfect matchings): A domino tiling is a partition of $S$ into disjoint pairs of adjacent squares. A perfect matching in $G$ is a set $M\\subseteq E$ such that every vertex in $V$ is incident to exactly one edge in $M$.\n\nForward direction: Suppose there is a perfect tiling $\\mathcal{T}$ of $S$ by dominoes. Each domino covers exactly two adjacent available squares $\\{u,v\\}$, hence corresponds to an edge $\\{u,v\\}\\in E$. Define\n$$\nM=\\{\\{u,v\\}\\in E:\\ \\{u,v\\}\\text{ is the pair covered by some domino in }\\mathcal{T}\\}.\n$$\nBecause the tiles in $\\mathcal{T}$ are disjoint and cover all squares in $S$, the edges in $M$ are disjoint and cover all vertices in $V=S$. Therefore, $M$ is a perfect matching in $G$.\n\nReverse direction: Suppose $G$ has a perfect matching $M$. Each edge $\\{u,v\\}\\in M$ pairs two adjacent available squares. Since $M$ is perfect, the edges of $M$ are disjoint and cover all vertices in $V=S$. Place a domino on each such adjacent pair $\\{u,v\\}\\in M$; these dominoes are disjoint and cover all of $S$, hence define a perfect tiling.\n\nTherefore, the instance has a perfect tiling if and only if $G$ has a perfect matching. The mapping is computable in polynomial time, so this is a valid polynomial-time many-one reduction.\n\nVerification of the options:\n- Option A matches exactly the construction above and is correct.\n- Option B incorrectly connects all squares in the same row or column, including non-adjacent ones, allowing pairings that do not correspond to valid domino placements; it is incorrect.\n- Option C uses vertices for rows and columns and edges for available squares; a perfect matching there would match every row and every column exactly once, which does not model domino adjacency or coverage of $S$; it is incorrect.\n- Option D makes vertices be domino placements and edges indicate non-overlap; a perfect matching would pair placements rather than select a set covering $S$. The correct structure for choosing a set of non-overlapping placements would be an independent set, not a perfect matching; it is incorrect.\n\nHence, the correct construction is given by Option A.", "answer": "$$\\boxed{A}$$", "id": "1436237"}, {"introduction": "Now we turn to the primary use of reductions in complexity theory: proving NP-hardness. This practice shows how to prove a new problem, `MULTIPLE-CHOICE-SUBSET-SUM`, is at least as hard as the classic NP-hard `SUBSET-SUM` problem. You will analyze a proposed reduction that uses a simple but clever 'gadget'—the choice between an integer $s_i$ and 0—to model the decision of including an element in a subset, a core technique in designing reductions. [@problem_id:1436216]", "problem": "In computational complexity theory, we analyze the difficulty of computational problems. A problem is in the class P if it can be solved in polynomial time by a deterministic Turing machine. A problem is in the class NP (Nondeterministic Polynomial time) if a proposed solution can be verified in polynomial time. A problem is NP-hard if any problem in NP can be reduced to it in polynomial time.\n\nConsider the following two decision problems:\n\n1.  **SUBSET-SUM**: Given a finite set of integers $S = \\{s_1, s_2, \\dots, s_n\\}$ and a target integer $T$, does there exist a subset $S' \\subseteq S$ such that the sum of the elements in $S'$ is exactly equal to $T$? The `SUBSET-SUM` problem is known to be NP-hard.\n\n2.  **MULTIPLE-CHOICE-SUBSET-SUM (MCSS)**: Given a collection of $k$ non-empty lists of integers, $\\mathcal{L} = \\{L_1, L_2, \\dots, L_k\\}$, and a target integer $T'$, is it possible to choose exactly one integer $x_i$ from each list $L_i$ (for $i=1, \\dots, k$) such that $\\sum_{i=1}^{k} x_i = T'$?\n\nTo prove that `MCSS` is NP-hard, a student proposes a polynomial-time reduction from `SUBSET-SUM`. The reduction constructs an instance of `MCSS` from an instance of `SUBSET-SUM` as follows:\n\nGiven a `SUBSET-SUM` instance defined by the set $S = \\{s_1, s_2, \\dots, s_n\\}$ and target $T$, the constructed `MCSS` instance is defined by a collection of $n$ lists $\\mathcal{L} = \\{L_1, L_2, \\dots, L_n\\}$ and a target $T'$. For each integer $s_i$ in the original set $S$, a corresponding list $L_i$ is created as $L_i = \\{s_i, 0\\}$. The target for the `MCSS` instance is set to be $T' = T$.\n\nWhich of the following statements correctly evaluates this proposed reduction as a proof of the NP-hardness of `MCSS`?\n\nA. The construction is a valid polynomial-time reduction, correctly establishing that `MCSS` is NP-hard.\n\nB. The construction is invalid because it only proves one direction of the required logical equivalence; specifically, it shows that if a `SUBSET-SUM` instance has a solution, the constructed `MCSS` instance also has a solution, but it fails to show the reverse.\n\nC. The construction is invalid because the transformation from a `SUBSET-SUM` instance to an `MCSS` instance cannot be computed in polynomial time with respect to the size of the `SUBSET-SUM` input.\n\nD. The construction is invalid because to prove a problem is NP-hard, one must reduce it *to* a known NP-hard problem (i.e., `MCSS` to `SUBSET-SUM`), not the other way around.\n\nE. The construction is invalid because the `MCSS` problem requires selecting one element from *every* list, which does not correctly model the `SUBSET-SUM` problem where an arbitrary number of elements (from zero to $n$) can be chosen for the subset.", "solution": "To prove that a problem $Q$ is NP-hard, it suffices to exhibit a polynomial-time many-one reduction from a known NP-hard problem $P$ to $Q$. Formally, we require a function $f$ computable in time polynomial in the size of the input such that for every instance $x$ of $P$, $x$ is a yes-instance of $P$ if and only if $f(x)$ is a yes-instance of $Q$. This condition ensures that $Q$ is at least as hard as $P$.\n\nHere, $P$ is SUBSET-SUM and $Q$ is MCSS. The proposed reduction maps an instance $(S,T)$ of SUBSET-SUM, where $S=\\{s_{1},\\dots,s_{n}\\}$, to an instance $(\\mathcal{L},T')$ of MCSS defined by $\\mathcal{L}=\\{L_{1},\\dots,L_{n}\\}$ with $L_{i}=\\{s_{i},0\\}$ for each $i$ and $T'=T$.\n\nFirst, the mapping is computable in polynomial time: constructing $n$ lists each containing the two integers $s_{i}$ and $0$, and setting $T'=T$, requires time polynomial in $n$ and in the input size of the integers, hence polynomial in the size of the SUBSET-SUM instance.\n\nSecond, correctness of the reduction follows by a bidirectional implication.\n1. If the SUBSET-SUM instance is a yes-instance, then there exists a subset $S'\\subseteq S$ such that\n$$\n\\sum_{s\\in S'} s \\;=\\; T.\n$$\nDefine a choice $x_{i}\\in L_{i}$ for each $i$ by setting $x_{i}=s_{i}$ if $s_{i}\\in S'$ and $x_{i}=0$ otherwise. Then exactly one element is chosen from each list and\n$$\n\\sum_{i=1}^{n} x_{i} \\;=\\; \\sum_{s\\in S'} s \\;=\\; T \\;=\\; T',\n$$\nso the constructed MCSS instance is a yes-instance.\n\n2. Conversely, if the constructed MCSS instance is a yes-instance, then there exist choices $x_{i}\\in L_{i}$ for $i=1,\\dots,n$ such that\n$$\n\\sum_{i=1}^{n} x_{i} \\;=\\; T'.\n$$\nBy construction, each $x_{i}\\in\\{s_{i},0\\}$. Define $S'=\\{\\,s_{i}\\in S : x_{i}=s_{i}\\,\\}$. Then\n$$\n\\sum_{s\\in S'} s \\;=\\; \\sum_{i=1}^{n} x_{i} \\;=\\; T' \\;=\\; T,\n$$\nso the original SUBSET-SUM instance is a yes-instance.\n\nTherefore, for every instance $(S,T)$, the instance $(\\mathcal{L},T')$ satisfies\n$$\n(S,T)\\in \\text{SUBSET-SUM} \\;\\;\\Longleftrightarrow\\;\\; (\\mathcal{L},T')\\in \\text{MCSS}.\n$$\nThis establishes a valid polynomial-time many-one reduction $\\text{SUBSET-SUM} \\leq_{p} \\text{MCSS}$. Since SUBSET-SUM is NP-hard, MCSS is NP-hard.\n\nThis directly supports option A. Option B is false because the reduction proves the equivalence in both directions. Option C is false because the construction is clearly polynomial-time. Option D is false because the correct direction for proving NP-hardness of MCSS is to reduce a known NP-hard problem to MCSS, not the reverse. Option E is false because requiring a choice from every list is consistent with SUBSET-SUM via the inclusion of $0$ in each list, which models the option of excluding an element from the subset.", "answer": "$$\\boxed{A}$$", "id": "1436216"}, {"introduction": "Reductions can reveal deep connections between problems that appear unrelated on the surface. This final practice challenges you to formalize the famous reduction from `VERTEX-COVER`, a problem on graphs, to `COLUMN-COVER`, a problem on matrices. This exercise is a classic example of a structural reduction, where the components of one problem (vertices and edges) are systematically mapped onto the components of another (columns and rows), demonstrating the abstract nature of computational complexity. [@problem_id:1436236]", "problem": "In computational complexity theory, we establish the relative difficulty of problems by using polynomial-time reductions. A problem $P_1$ is reducible to a problem $P_2$ if any instance of $P_1$ can be transformed in polynomial time into an instance of $P_2$ such that a solution to the $P_2$ instance can be used to solve the original $P_1$ instance.\n\nConsider the following two decision problems:\n\n1.  **VERTEX-COVER**: Given an undirected graph $G=(V, E)$, where $V$ is the set of vertices and $E$ is the set of edges, and a positive integer $k$, does there exist a subset of vertices $V' \\subseteq V$ with $|V'| \\le k$ such that for every edge $(u, v) \\in E$, at least one of $u$ or $v$ is in $V'$? Such a set $V'$ is called a vertex cover.\n\n2.  **COLUMN-COVER**: Given an $m \\times n$ binary matrix $M$ (containing only 0s and 1s) and a positive integer $k'$, does there exist a set of column indices $C'$, with $|C'| \\le k'$, such that every row in $M$ has at least one '1' in a column specified by $C'$?\n\nYour task is to identify the correct polynomial-time reduction that transforms an arbitrary instance of VERTEX-COVER, specified by $(G=(V, E), k)$, into an instance of COLUMN-COVER, specified by $(M, k')$. Let $|V| = n$ and $|E| = m$. The vertices are indexed $v_1, \\dots, v_n$ and the edges are indexed $e_1, \\dots, e_m$.\n\nWhich of the following describes a correct transformation?\n\nA. Construct an $n \\times n$ matrix $M$ corresponding to the adjacency matrix of $G$, where $M_{ij}=1$ if there is an edge between vertex $v_i$ and vertex $v_j$, and $M_{ij}=0$ otherwise. Set the target integer for COLUMN-COVER to $k'=k$.\n\nB. Construct an $m \\times n$ matrix $M$. For each edge $e_i = (v_a, v_b)$, set the entries $M_{ia}=1$ and $M_{ib}=1$. All other entries in the matrix are 0. Set the target integer for COLUMN-COVER to $k'=n-k$.\n\nC. Construct an $n \\times m$ matrix $M$. For each edge $e_j = (v_a, v_b)$, set the entries $M_{aj}=1$ and $M_{bj}=1$. All other entries in the matrix are 0. Set the target integer for COLUMN-COVER to $k'=k$.\n\nD. Construct an $m \\times n$ matrix $M$. For each edge $e_i = (v_a, v_b)$, set the entries $M_{ia}=1$ and $M_{ib}=1$. All other entries in the matrix are 0. Set the target integer for COLUMN-COVER to $k'=k$.", "solution": "The goal is to find a mapping from an instance of VERTEX-COVER, $(G=(V,E), k)$, to an instance of COLUMN-COVER, $(M, k')$, such that the answer to the VERTEX-COVER instance is \"yes\" if and only if the answer to the COLUMN-COVER instance is \"yes\". Let's analyze the proposed transformations.\n\nThe correct transformation is given by option D. Let's describe this construction and prove its correctness.\n\n**Construction (as in Option D):**\nGiven the VERTEX-COVER instance $(G=(V,E), k)$, where $|V|=n$ and $|E|=m$. We construct an instance of COLUMN-COVER, $(M, k')$, as follows:\n1.  Create an $m \\times n$ matrix $M$. The rows of this matrix will correspond to the edges of $G$, and the columns will correspond to the vertices of $G$.\n2.  For each entry $M_{ij}$ (row $i$, column $j$) of the matrix, set $M_{ij} = 1$ if edge $e_i$ is incident on vertex $v_j$. Otherwise, set $M_{ij} = 0$. In an undirected graph, an edge $e_i = (v_a, v_b)$ is incident on two vertices, $v_a$ and $v_b$. So for each row $i$ corresponding to edge $e_i$, exactly two columns will have a '1'.\n3.  Set the integer for the COLUMN-COVER problem to be $k' = k$.\n\nThis construction can be performed in polynomial time. Creating an $m \\times n$ matrix and iterating through all $m$ edges to set two entries per edge takes $O(m \\cdot n)$ time, which is polynomial in the size of the graph representation.\n\n**Correctness Proof:**\nWe must show that $G$ has a vertex cover of size at most $k$ if and only if $M$ has a column cover of size at most $k$.\n\n**Part 1: (VERTEX-COVER $\\implies$ COLUMN-COVER)**\nAssume there exists a vertex cover $V' \\subseteq V$ in $G$ such that $|V'| \\le k$. We need to show that there exists a column cover $C'$ for $M$ with $|C'| \\le k$.\n\nLet's construct the set of columns $C'$ by taking the indices of the columns corresponding to the vertices in $V'$. Formally, $C' = \\{j \\mid v_j \\in V'\\}$. By this construction, $|C'| = |V'| \\le k$.\n\nNow we must show that $C'$ is a valid column cover. Consider any arbitrary row $i$ in matrix $M$. This row corresponds to an edge $e_i = (v_a, v_b)$ in $G$. Since $V'$ is a vertex cover, by definition, it must contain at least one endpoint of $e_i$. That is, either $v_a \\in V'$ or $v_b \\in V'$ (or both).\n\n- If $v_a \\in V'$, then the column index $a$ is in $C'$. By our construction of $M$, the entry $M_{ia}$ is 1. Thus, row $i$ is \"covered\" by column $a \\in C'$.\n- If $v_b \\in V'$, then the column index $b$ is in $C'$. By our construction of $M$, the entry $M_{ib}$ is 1. Thus, row $i$ is \"covered\" by column $b \\in C'$.\n\nSince every edge is covered by $V'$, every row in $M$ has a '1' in a column corresponding to a vertex in $V'$. Therefore, $C'$ is a valid column cover for $M$ of size at most $k$.\n\n**Part 2: (COLUMN-COVER $\\implies$ VERTEX-COVER)**\nAssume there exists a column cover $C'$ for $M$ such that $|C'| \\le k$. We need to show that there exists a vertex cover $V'$ for $G$ with $|V'| \\le k$.\n\nLet's construct the set of vertices $V'$ by taking the vertices corresponding to the column indices in $C'$. Formally, $V' = \\{v_j \\mid j \\in C'\\}$. By this construction, $|V'| = |C'| \\le k$.\n\nNow we must show that $V'$ is a valid vertex cover. Consider any arbitrary edge $e_i = (v_a, v_b)$ in $G$. This edge corresponds to row $i$ in matrix $M$. Since $C'$ is a column cover, row $i$ must have at least one '1' in a column whose index is in $C'$. Let this column be $j \\in C'$.\n\nSo, $M_{ij}=1$ for some $j \\in C'$. By our construction of $M$, $M_{ij}=1$ means that edge $e_i$ is incident on vertex $v_j$. By our construction of $V'$, since $j \\in C'$, the vertex $v_j$ is in $V'$. Therefore, the edge $e_i$ is covered by the vertex $v_j \\in V'$.\n\nSince this holds for any edge in $E$, the set $V'$ is a valid vertex cover for $G$ of size at most $k$.\n\n**Analysis of Incorrect Options:**\n\n- **Option A:** Using the adjacency matrix of $G$ maps VERTEX-COVER to a different problem. In an adjacency matrix, a row $i$ has 1s in columns $j$ where an edge $(v_i, v_j)$ exists. Selecting a set of $k$ columns to cover all rows corresponds to finding a set of $k$ vertices such that every vertex in the graph is adjacent to at least one vertex in the set. This is the definition of the DOMINATING-SET problem, not VERTEX-COVER.\n\n- **Option B:** This uses the correct matrix construction but sets the budget to $k' = n-k$. This is a transformation typically used when reducing a problem to its complement (like CLIQUE to INDEPENDENT-SET). It does not apply here and would lead to incorrect results. For example, a graph with one edge requires a vertex cover of size $k=1$, but this would map to a column cover of size $n-1$, which is generally not equivalent.\n\n- **Option C:** This swaps the roles of vertices and edges. The matrix is $n \\times m$, meaning it has rows for vertices and columns for edges. Selecting $k'$ columns would mean selecting edges. This structure does not map to the VERTEX-COVER problem in a straightforward way. It's the transpose of the correct construction, and selecting $k'$ columns (edges) to cover all rows (vertices) means finding a set of edges that are incident to every vertex, which is a different graph problem.", "answer": "$$\\boxed{D}$$", "id": "1436236"}]}