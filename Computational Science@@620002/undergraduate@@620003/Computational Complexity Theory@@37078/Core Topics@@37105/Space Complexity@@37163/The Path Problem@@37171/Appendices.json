{"hands_on_practices": [{"introduction": "The PATH problem focuses on one-way reachability, but understanding a graph's structure often involves exploring bidirectional paths. This practice [@problem_id:1460978] challenges you to apply the concept of strongly connected components—regions of a graph where every vertex is mutually reachable from every other. By analyzing a concrete network, you will distinguish between simple paths and the more robust connections that define these components.", "problem": "In the study of computational complexity, the `PATH` problem for a directed graph determines if a path exists from a starting vertex $s$ to a target vertex $t$. The concept of strong connectivity is closely related. Two vertices $u$ and $v$ in a directed graph are said to be in the same strongly connected component if there is a path from $u$ to $v$ and also a path from $v$ to $u$.\n\nConsider a directed graph $G = (V, E)$ modeling a network. The set of vertices is $V = \\{A, B, C, D, E, F, G, H\\}$. The set of directed edges is $E = \\{(A,B), (B,C), (C,A), (C,D), (D,E), (E,D), (D,F), (F,G), (G,H), (H,F)\\}$.\n\nFor which of the following pairs of vertices $(s, t)$ is the answer to the PATH problem 'yes' for both the ordered pair $(s, t)$ and the ordered pair $(t, s)$? Select all that apply.\n\nA. (A, D)\n\nB. (B, C)\n\nC. (E, F)\n\nD. (F, A)\n\nE. (H, G)", "solution": "The problem asks to identify pairs of vertices $(s, t)$ such that there is a path from $s$ to $t$ and also a path from $t$ to $s$. This is the definition of two vertices belonging to the same strongly connected component (SCC) of a directed graph. Therefore, our task is to find the SCCs of the given graph $G$ and then check which of the pairs in the options have both vertices in the same SCC.\n\nThe graph is defined by the vertex set $V = \\{A, B, C, D, E, F, G, H\\}$ and the edge set $E = \\{(A,B), (B,C), (C,A), (C,D), (D,E), (E,D), (D,F), (F,G), (G,H), (H,F)\\}$.\n\nLet's identify the SCCs by looking for cycles and mutual reachability.\n\nFirst, consider the vertices $\\{A, B, C\\}$. The edges are $(A,B)$, $(B,C)$, and $(C,A)$. These form a cycle $A \\to B \\to C \\to A$. This means for any two vertices in this set, there is a path in both directions. For example, there's a path from $A$ to $B$ (the edge $(A,B)$) and a path from $B$ to $A$ (the path $B \\to C \\to A$). Thus, $\\{A, B, C\\}$ is a strongly connected component.\n\nNext, consider the vertices $\\{D, E\\}$. The edges are $(D,E)$ and $(E,D)$. These form a cycle $D \\to E \\to D$. There is a path from $D$ to $E$ and a path from $E$ to $D$. Thus, $\\{D, E\\}$ is a strongly connected component.\n\nNow, consider the vertices $\\{F, G, H\\}$. The edges are $(F,G)$, $(G,H)$, and $(H,F)$. These form a cycle $F \\to G \\to H \\to F$. For any two vertices in this set, there is a path in both directions. For instance, there's a path from $G$ to $F$ (the path $G \\to H \\to F$) and a path from $F$ to $G$ (the edge $(F,G)$). Thus, $\\{F, G, H\\}$ is a strongly connected component.\n\nWe have now partitioned all vertices into three sets: $S_1 = \\{A, B, C\\}$, $S_2 = \\{D, E\\}$, and $S_3 = \\{F, G, H\\}$, each being an SCC. The remaining edges, $(C,D)$ and $(D,F)$, are edges that connect these components. Specifically, $(C,D)$ connects $S_1$ to $S_2$, and $(D,F)$ connects $S_2$ to $S_3$. There are no paths leading from $S_2$ to $S_1$, or from $S_3$ to $S_2$ or $S_1$.\n\nNow we can evaluate the given options:\n\nA. (A, D): Vertex $A$ is in $S_1$ and vertex $D$ is in $S_2$. Since they are in different SCCs, there cannot be paths in both directions between them. We can verify this: a path from $A$ to $D$ exists ($A \\to B \\to C \\to D$). However, there is no path from $D$ back to $A$, as all paths leaving $S_2$ lead to $S_3$, never back to $S_1$. So, this option is incorrect.\n\nB. (B, C): Both vertex $B$ and vertex $C$ are in $S_1$. Since they are in the same SCC, there must be paths in both directions. Path from $B$ to $C$ is the edge $(B,C)$. Path from $C$ to $B$ is $C \\to A \\to B$. So, this option is correct.\n\nC. (E, F): Vertex $E$ is in $S_2$ and vertex $F$ is in $S_3$. They are in different SCCs. A path from $E$ to $F$ exists ($E \\to D \\to F$). However, there is no path from $F$ back to $E$, as all paths leaving $S_3$ stay within $S_3$. So, this option is incorrect.\n\nD. (F, A): Vertex $F$ is in $S_3$ and vertex $A$ is in $S_1$. They are in different SCCs. There is no path from $F$ to $A$. So, this option is incorrect.\n\nE. (H, G): Both vertex $H$ and vertex $G$ are in $S_3$. Since they are in the same SCC, there must be paths in both directions. Path from $H$ to $G$ is $H \\to F \\to G$. Path from $G$ to $H$ is the edge $(G,H)$. So, this option is correct.\n\nThe pairs that satisfy the condition are (B, C) and (H, G). Therefore, options B and E are the correct choices.", "answer": "$$\\boxed{BE}$$", "id": "1460978"}, {"introduction": "Beyond direct traversal, we can analyze graph connectivity through the powerful lens of linear algebra. This exercise [@problem_id:1460973] introduces the adjacency matrix representation of a graph, where matrix multiplication reveals deep structural properties. You will calculate the number of paths of various lengths between two vertices, illustrating how an algebraic approach can systematically solve connectivity problems.", "problem": "In the study of computational complexity, the `PATH` problem asks whether a path exists between two vertices in a directed graph. This problem can be analyzed using linear algebra.\n\nConsider a directed graph $G$ with $n=4$ vertices, labeled $\\{1, 2, 3, 4\\}$. The set of directed edges is given by $E = \\{(1,2), (1,3), (2,3), (3,2), (3,4), (4,1)\\}$. The structure of this graph can be represented by its adjacency matrix $A$, which is an $n \\times n$ matrix where the entry $A_{ij}$ is 1 if there is a directed edge from vertex $i$ to vertex $j$, and 0 otherwise.\n\nA matrix $S$ is constructed to analyze the connectivity properties of the graph, defined as the sum of the first $n-1$ powers of the adjacency matrix:\n$$ S = \\sum_{k=1}^{n-1} A^k $$\nCalculate the value of the entry $S_{14}$.", "solution": "We label vertices $\\{1,2,3,4\\}$ and construct the adjacency matrix $A$ with $A_{ij}=1$ if there is a directed edge $i \\to j$ and $A_{ij}=0$ otherwise. From $E=\\{(1,2),(1,3),(2,3),(3,2),(3,4),(4,1)\\}$ we have\n$$\nA=\\begin{pmatrix}\n0 & 1 & 1 & 0 \\\\\n0 & 0 & 1 & 0 \\\\\n0 & 1 & 0 & 1 \\\\\n1 & 0 & 0 & 0\n\\end{pmatrix}.\n$$\nBy standard properties of adjacency matrices, $(A^{k})_{ij}$ equals the number of directed walks of length $k$ from $i$ to $j$. The matrix\n$$\nS=\\sum_{k=1}^{n-1}A^{k}=\\sum_{k=1}^{3}A^{k}\n$$\ntherefore satisfies\n$$\nS_{14}=\\sum_{k=1}^{3}(A^{k})_{14}.\n$$\n\nFirst, read off $(A)_{14}=0$ from $A$ since there is no edge $1 \\to 4$.\n\nNext, compute the first row of $A^{2}$:\n$$\n(A^{2})_{1j}=\\sum_{m=1}^{4}A_{1m}A_{mj}=A_{12}A_{2j}+A_{13}A_{3j}=A_{2j}+A_{3j}.\n$$\nUsing rows $2$ and $3$ of $A$, namely $(0,0,1,0)$ and $(0,1,0,1)$, we obtain\n$$\n(A^{2})_{1\\cdot}=(0,1,1,1),\n$$\nso $(A^{2})_{14}=1$.\n\nThen compute the first row of $A^{3}$:\n$$\n(A^{3})_{1j}=\\sum_{m=1}^{4}(A^{2})_{1m}A_{mj}=(A^{2})_{12}A_{2j}+(A^{2})_{13}A_{3j}+(A^{2})_{14}A_{4j}=A_{2j}+A_{3j}+A_{4j}.\n$$\nSumming rows $2,3,4$ of $A$, i.e., $(0,0,1,0)+(0,1,0,1)+(1,0,0,0)=(1,1,1,1)$, gives\n$$\n(A^{3})_{1\\cdot}=(1,1,1,1),\n$$\nso $(A^{3})_{14}=1$.\n\nTherefore,\n$$\nS_{14}=(A)_{14}+(A^{2})_{14}+(A^{3})_{14}=0+1+1=2.\n$$", "answer": "$$\\boxed{2}$$", "id": "1460973"}, {"introduction": "While the general PATH problem is famously NL-complete, not all graphs are equally difficult to navigate. This exercise [@problem_id:1460950] explores how a simple structural constraint—limiting every vertex's out-degree to at most one—profoundly impacts computational complexity. By analyzing this special case, you will see firsthand how specific properties can make a seemingly complex problem solvable with surprisingly efficient, deterministic algorithms.", "problem": "The directed st-connectivity problem, often denoted as `PATH`, is a fundamental problem in computational complexity. It asks whether a path exists from a specified start vertex $s$ to a target vertex $t$ in a given directed graph $G=(V, E)$. The general version of this problem is known to be complete for the complexity class NL, Nondeterministic Logarithmic Space.\n\nLet us define the relevant complexity classes more formally:\n- **L (Logarithmic Space)**: The class of decision problems that can be solved by a deterministic Turing machine using a read-only input tape and a read-write work tape of size $O(\\log n)$, where $n$ is the size of the input.\n- **NL (Nondeterministic Logarithmic Space)**: The class of decision problems that can be solved by a nondeterministic Turing machine under the same space constraints.\n\nNow, consider a restricted version of the problem, which we will call `U-PATH`. In `U-PATH`, the input consists of a directed graph $G=(V, E)$, a start vertex $s$, and a target vertex $t$. However, the graph $G$ comes with a specific structural promise: every vertex in $V$ has an out-degree of at most one.\n\nBased on an analysis of the computational resources required to solve `U-PATH`, which of the following statements most accurately characterizes its complexity?\n\nA. U-PATH is in L.\nB. U-PATH is NL-complete.\nC. U-PATH is P-complete (under log-space reductions).\nD. U-PATH is undecidable.\nE. U-PATH is in NL but is not known to be in L or to be NL-complete.", "solution": "Let $G=(V,E)$ be a directed graph in which every vertex has out-degree at most one. Equivalently, there exists a partial function $f:V\\to V$ such that for each $u\\in V$, either there is no outgoing edge from $u$, or there is exactly one edge $(u,f(u))\\in E$. Given $s,t\\in V$, there is a directed path from $s$ to $t$ if and only if there exists $k\\in \\mathbb{N}$ such that $f^{k}(s)=t$, where $f^{0}(s)=s$ and $f^{k+1}(s)=f(f^{k}(s))$ whenever $f^{k}$ is defined.\n\nWrite $n=|V|$. Starting from $s$, the sequence $s, f(s), f^{2}(s), \\dots$ either terminates at a vertex with no outgoing edge (a sink) or eventually repeats a vertex, forming a directed cycle. In either case, the number of distinct vertices visited is at most $n$. Therefore, if $t$ is reachable from $s$, there exists $k$ with $0\\leq k\\leq n-1$ such that $f^{k}(s)=t$.\n\nDeterministic logarithmic-space algorithm (membership in L):\n- Maintain two variables on the work tape:\n  - a current vertex $v$, initialized to $s$;\n  - a counter $c$, initialized to $0$, that will range from $0$ to $n$.\n  Both $v$ and $c$ can be stored using $O(\\log_{2} n)$ bits.\n- Repeat the following loop while $c\\leq n$:\n  1. If $v=t$, accept.\n  2. Find the unique outgoing neighbor of $v$, if it exists. This can be done by scanning the read-only input to locate an edge $(v,w)\\in E$. Because the input is read-only and vertices can be indexed, a single scan uses $O(\\log_{2} n)$ bits to hold indices and pointers.\n  3. If no outgoing neighbor exists, reject (since the unique forward walk has ended without reaching $t$).\n  4. Otherwise set $v:=w$ and increment $c:=c+1$.\n- If the loop finishes without accepting, reject.\n\nCorrectness:\n- If a path from $s$ to $t$ exists, then some $k\\leq n-1$ satisfies $f^{k}(s)=t$, so the algorithm accepts at iteration $k$.\n- If no such path exists, then along the unique forward walk from $s$, either a sink is encountered before reaching $t$ (immediate rejection), or a cycle disjoint from $t$ is entered. In the latter case, since there are at most $n$ distinct vertices on the walk, after $n$ increments the algorithm necessarily has not seen $t$ and rejects.\n\nSpace bound:\n- The algorithm stores $v$ and $c$, each using $O(\\log_{2} n)$ bits, and uses $O(\\log_{2} n)$ additional bits to scan the input for an outgoing edge of the current vertex. Thus the total workspace is $O(\\log_{2} n)$, i.e., deterministic logarithmic space.\n\nHence `U-PATH` is solvable in deterministic logarithmic space, so `U-PATH` is in L. Therefore, among the options, the most accurate characterization is option A.\n\nSince `U-PATH` is in L, it cannot be NL-complete unless $\\mathrm{L}=\\mathrm{NL}$, and it is not P-complete unless $\\mathrm{L}=\\mathrm{P}$. The problem is certainly decidable, so D is false, and E is false because we have an explicit L algorithm.", "answer": "$$\\boxed{A}$$", "id": "1460950"}]}