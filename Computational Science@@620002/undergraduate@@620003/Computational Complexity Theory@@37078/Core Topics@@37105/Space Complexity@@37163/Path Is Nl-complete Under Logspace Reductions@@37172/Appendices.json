{"hands_on_practices": [{"introduction": "The power of complexity theory often lies not in solving every new problem from scratch, but in showing how a new problem is \"just like\" an old one. This process, called reduction, is a cornerstone of the field. This first practice problem demonstrates a classic logspace reduction by transforming a variant of the `PATH` problem, where certain vertices are forbidden, into the standard `PATH` problem itself, illustrating the elegant \"vertex-splitting\" technique [@problem_id:1435016].", "problem": "In computational complexity theory, the `PATH` problem asks whether a path exists between two specified vertices, $s$ and $t$, in a given directed graph. A related problem is `AVOID-PATH`, which introduces an additional constraint.\n\nThe `AVOID-PATH` problem is defined as follows: Given a directed graph $G=(V, E)$, a start vertex $s \\in V$, a target vertex $t \\in V$, and a set of \"forbidden\" vertices $F \\subseteq V$, determine if there exists a path from $s$ to $t$ where every vertex on the path (including the start and end vertices, $s$ and $t$) is not in $F$.\n\n`AVOID-PATH` can be solved by transforming any instance of it into an equivalent instance of the standard `PATH` problem using a logspace reduction. Consider the following \"vertex-splitting\" reduction strategy:\n\nAn `AVOID-PATH` instance, described by the tuple $\\langle G=(V,E), s, t, F \\rangle$, is transformed into a `PATH` instance $\\langle G'=(V',E'), s', t' \\rangle$. The new graph $G'$ is constructed as follows:\n1.  For each vertex $v \\in V$, create two new vertices in $V'$, denoted as $v_{in}$ and $v_{out}$.\n2.  For each vertex $v \\in V$ that is **not** in the forbidden set $F$, add a directed edge from $v_{in}$ to $v_{out}$ in $E'$.\n3.  For each directed edge $(u,v) \\in E$ in the original graph, add a directed edge from $u_{out}$ to $v_{in}$ in $E'$.\n4.  The new start and target vertices are set to $s' = s_{in}$ and $t' = t_{out}$, respectively.\n\nLet the original graph $G$ have $n$ vertices (i.e., $|V|=n$) and $m$ edges (i.e., $|E|=m$). Let the set of forbidden vertices $F$ contain $k$ vertices (i.e., $|F|=k$).\n\nYour task is to determine the number of vertices and edges in the newly constructed graph $G'$. Provide your answer as a pair of symbolic expressions in terms of $n$, $m$, and $k$. The first expression should be for the number of vertices, $|V'|$, and the second for the number of edges, $|E'|$.", "solution": "We analyze the construction of $G'$ from $G$ using the vertex-splitting reduction and count vertices and edges by direct enumeration.\n\nFor vertices: For each original vertex $v \\in V$, the construction creates two distinct vertices $v_{in}$ and $v_{out}$ in $V'$. By the rule of product and additivity, the total number of vertices is\n$$\n|V'|=2|V|=2n.\n$$\n\nFor edges: There are two disjoint types of edges added.\n- Internal edges: For each $v \\in V \\setminus F$, one directed edge $v_{in} \\to v_{out}$ is added. The number of such vertices is $|V \\setminus F|=n-k$, so this contributes $n-k$ edges.\n- Transferred edges: For each original directed edge $(u,v) \\in E$, one directed edge $u_{out} \\to v_{in}$ is added. There are $|E|=m$ such edges.\n\nThese two sets of edges are disjoint since internal edges go from $v_{in}$ to $v_{out}$, while transferred edges go from some $u_{out}$ to some $v_{in}$. Therefore, the total number of edges is the sum\n$$\n|E'|=(n-k)+m=m+n-k.\n$$\n\nNo additional vertices or edges are introduced by setting $s'=s_{in}$ and $t'=t_{out}$, as these are only designations of existing vertices.\n\nThus, the counts are $|V'|=2n$ and $|E'|=m+n-k$.", "answer": "$$\\boxed{\\begin{pmatrix} 2n & m+n-k \\end{pmatrix}}$$", "id": "1435016"}, {"introduction": "Building on the idea of reduction, we now tackle a problem with more intricate constraints. The `ALTERNATING-BIPARTITE-PATH` problem requires not only finding a path but ensuring it strictly alternates between two predefined sets of vertices. This exercise introduces a more advanced reduction strategy where we enrich the information encoded in each vertex, a powerful method for capturing state and history within a graph traversal problem [@problem_id:1435018].", "problem": "In computational complexity theory, the `PATH` problem is a cornerstone for the complexity class NL. The `PATH` problem is formally defined as: Given a directed graph $G=(V, E)$, a start vertex $s \\in V$, and a target vertex $t \\in V$, determine if a path exists from $s$ to $t$.\n\nConsider a related problem, which we will call `ALTERNATING-BIPARTITE-PATH`. An instance of this problem is given by a tuple $(G, s, t, A, B)$, where $G=(V,E)$ is a directed graph, $s,t \\in V$ are start and target vertices, and $A,B \\subseteq V$ are two disjoint sets of vertices. A 'yes' instance is one for which there exists a path $P = (v_0, v_1, \\ldots, v_k)$ in $G$ that satisfies all of the following conditions:\n1. The path starts at $s$ and ends at $t$, i.e., $v_0 = s$ and $v_k = t$.\n2. All vertices along the path, including the endpoints, must belong to the union of the sets $A$ and $B$. That is, $\\{v_0, v_1, \\ldots, v_k\\} \\subseteq A \\cup B$.\n3. The path must strictly alternate between vertices in set $A$ and set $B$. Formally, for each step $i \\in \\{0, \\ldots, k-1\\}$, if $v_i \\in A$ then $v_{i+1} \\in B$, and if $v_i \\in B$ then $v_{i+1} \\in A$.\n\nThe `ALTERNATING-BIPARTITE-PATH` problem can be solved by a log-space reduction to the `PATH` problem. The standard reduction involves constructing a new graph $G'=(V', E')$ where the vertices in $V'$ encode not only the position in the original graph $G$ but also whether that position conforms to being in set $A$ or set $B$.\n\nYou are given the following specific instance of `ALTERNATING-BIPARTITE-PATH`:\n- The vertex set is $V = \\{v_1, v_2, v_3, v_4, v_5, v_6\\}$.\n- The disjoint sets are $A = \\{v_1, v_2, v_5\\}$ and $B = \\{v_3, v_4\\}$.\n- The start vertex is $s = v_1$ and the target vertex is $t = v_2$.\n- The edge set is $E = \\{(v_1, v_3), (v_1, v_6), (v_2, v_4), (v_3, v_2), (v_3, v_5), (v_4, v_1), (v_4, v_5), (v_5, v_3), (v_6, v_2)\\}$.\n\nBy applying the standard log-space reduction described above, an instance of `PATH` on a new graph $G'=(V', E')$ is created. Calculate the number of vertices $(|V'|)$ and the number of edges $(|E'|)$ in this new graph $G'$. Present your answer as a pair $(|V'|, |E'|)$.", "solution": "The problem asks us to determine the size of a new graph $G'=(V', E')$ which is the result of a log-space reduction from a given instance of `ALTERNATING-BIPARTITE-PATH` to the standard `PATH` problem.\n\nFirst, let's understand the reduction. The `ALTERNATING-BIPARTITE-PATH` problem has an additional constraint compared to `PATH`: the path must alternate between two sets of vertices, $A$ and $B$. To handle this constraint, we can build a new graph $G'$ whose vertices encode the state of being at a certain vertex in $G$ and belonging to a certain partition ($A$ or $B$).\n\nLet an instance of `ALTERNATING-BIPARTITE-PATH` be $(G=(V, E), s, t, A, B)$. The reduction constructs an instance of `PATH`, $(G'=(V', E'), s', t')$.\n\n**Construction of the new graph $G'$**\n\n1.  **Vertex Set $V'$**: The path in $G$ is constrained to vertices within $A \\cup B$. Therefore, we only need to consider these vertices. For each vertex $v \\in A \\cup B$, we create a \"stateful\" vertex in $G'$. We can represent a vertex in $V'$ as a pair $(v, S)$, where $v \\in A \\cup B$ and $S$ indicates which set ($A$ or $B$) the vertex $v$ belongs to.\n    This means the vertex set $V'$ is the union of two sets of nodes: one copy for vertices in $A$ and another for vertices in $B$.\n    $V' = \\{(v, \\text{'A'}) \\mid v \\in A\\} \\cup \\{(v, \\text{'B'}) \\mid v \\in B\\}$.\n    The total number of vertices in $V'$ is therefore $|V'| = |A| + |B|$.\n\n2.  **Edge Set $E'$**: An edge exists in $G'$ if it represents a valid step in an alternating path in $G$. A valid step from a vertex $u$ to a vertex $v$ requires that $(u,v)$ is an edge in $E$ and that $u$ and $v$ are in different partitions ($A$ and $B$).\n    - If there is an edge $(u, v) \\in E$ where $u \\in A$ and $v \\in B$, we add a directed edge from $(u, \\text{'A'})$ to $(v, \\text{'B'})$ in $E'$.\n    - If there is an edge $(u, v) \\in E$ where $u \\in B$ and $v \\in A$, we add a directed edge from $(u, \\text{'B'})$ to $(v, \\text{'A'})$ in $E'$.\n    No other edges are created. This construction ensures that any path in $G'$ corresponds to a strictly alternating path in $G$.\n\n3.  **Start and Target Vertices $s'$ and $t'$**:\n    - The start vertex $s'$ is $(s, \\text{'A'})$ if $s \\in A$, or $(s, \\text{'B'})$ if $s \\in B$.\n    - The target vertex $t'$ is $(t, \\text{'A'})$ if $t \\in A$, or $(t, \\text{'B'})$ if $t \\in B$.\n    A path from $s'$ to $t'$ in $G'$ exists if and only if a valid alternating path from $s$ to $t$ exists in $G$.\n\n**Applying the construction to the given instance**\n\nThe given instance is:\n- $V = \\{v_1, v_2, v_3, v_4, v_5, v_6\\}$\n- $A = \\{v_1, v_2, v_5\\}$\n- $B = \\{v_3, v_4\\}$\n- $s = v_1$, $t = v_2$\n- $E = \\{(v_1, v_3), (v_1, v_6), (v_2, v_4), (v_3, v_2), (v_3, v_5), (v_4, v_1), (v_4, v_5), (v_5, v_3), (v_6, v_2)\\}$\n- The set of vertices allowed on the path is $A \\cup B = \\{v_1, v_2, v_3, v_4, v_5\\}$. Vertex $v_6$ is not in $A \\cup B$.\n\n**Calculating $|V'|$**\n\nThe number of vertices in $G'$ is the sum of the sizes of sets $A$ and $B$.\n$|A| = 3$\n$|B| = 2$\n$|V'| = |A| + |B| = 3 + 2 = 5$.\nThe vertices in $V'$ are $\\{(v_1, \\text{'A'}), (v_2, \\text{'A'}), (v_5, \\text{'A'}), (v_3, \\text{'B'}), (v_4, \\text{'B'}) \\}$.\n\n**Calculating $|E'|**\n\nWe iterate through each edge $(u, v) \\in E$ and check if it contributes an edge to $E'$. An edge contributes if $u, v \\in A \\cup B$ and they are in different sets.\n\n1.  $(v_1, v_3)$: $v_1 \\in A$, $v_3 \\in B$. This creates an edge $((v_1, \\text{'A'}), (v_3, \\text{'B'}))$. (1)\n2.  $(v_1, v_6)$: $v_6 \\notin A \\cup B$. This edge is ignored.\n3.  $(v_2, v_4)$: $v_2 \\in A$, $v_4 \\in B$. This creates an edge $((v_2, \\text{'A'}), (v_4, \\text{'B'}))$. (2)\n4.  $(v_3, v_2)$: $v_3 \\in B$, $v_2 \\in A$. This creates an edge $((v_3, \\text{'B'}), (v_2, \\text{'A'}))$. (3)\n5.  $(v_3, v_5)$: $v_3 \\in B$, $v_5 \\in A$. This creates an edge $((v_3, \\text{'B'}), (v_5, \\text{'A'}))$. (4)\n6.  $(v_4, v_1)$: $v_4 \\in B$, $v_1 \\in A$. This creates an edge $((v_4, \\text{'B'}), (v_1, \\text{'A'}))$. (5)\n7.  $(v_4, v_5)$: $v_4 \\in B$, $v_5 \\in A$. This creates an edge $((v_4, \\text{'B'}), (v_5, \\text{'A'}))$. (6)\n8.  $(v_5, v_3)$: $v_5 \\in A$, $v_3 \\in B$. This creates an edge $((v_5, \\text{'A'}), (v_3, \\text{'B'}))$. (7)\n9.  $(v_6, v_2)$: $v_6 \\notin A \\cup B$. This edge is ignored.\n\nCounting the created edges, we find there are 7 edges in $E'$.\n$|E'| = 7$.\n\nThe resulting pair is $(|V'|, |E'|) = (5, 7)$.", "answer": "$$\\boxed{\\begin{pmatrix} 5 & 7 \\end{pmatrix}}$$", "id": "1435018"}, {"introduction": "The correctness of a complexity class proof hinges on the flawless execution of its underlying reductions. In this final exercise, we engage in a critical thought experiment to understand *why* this precision is so vital. By analyzing a hypothetical but plausible bug in the logspace reduction used to prove that `PATH` is NL-hard, you will explore the logical consequences of an imperfect transformation and solidify your understanding of what makes a reduction valid [@problem_id:1435034].", "problem": "In computational complexity theory, the problem PATH is a cornerstone for understanding the class NL. The PATH problem asks whether a directed graph $G$ contains a path between two specified vertices, $s$ and $t$. The complexity class NL (Nondeterministic Logarithmic-space) consists of all decision problems that can be solved by a Nondeterministic Turing Machine (NTM) using a work tape of size logarithmic in the length of the input.\n\nTo prove that PATH is NL-hard, one must show that for any language $L \\in \\text{NL}$, there is a logspace reduction from $L$ to PATH. The standard proof proceeds as follows: Let $L$ be a language in NL, decided by a logspace NTM $M$. For any input string $w$, a logspace transducer constructs a \"configuration graph\" $G_M(w)$. The vertices of this graph represent all possible configurations of the machine $M$ on input $w$. A directed edge exists from configuration $C_1$ to $C_2$ if and only if $M$ can transition from $C_1$ to $C_2$ in a single computation step. The problem of determining if $w \\in L$ is then equivalent to determining if there is a path in $G_M(w)$ from the initial configuration $C_{start}$ to the unique accepting configuration $C_{accept}$.\n\nNow, consider a student, Alice, who implements a logspace transducer to perform this reduction. Her transducer has a subtle bug. For any given input $w$ to an NTM $M$:\n- It correctly generates the set of all possible configurations as vertices.\n- It correctly identifies the $C_{start}$ and $C_{accept}$ vertices.\n- However, when generating the edges, if the set of all valid single-step machine transitions is non-empty, her transducer consistently omits exactly one valid transition from the final graph representation. The specific edge that is omitted can differ depending on the input $w$.\n\nGiven this specific flaw in Alice's implementation, how does it affect the validity of her construction as a proof of NL-hardness for the PATH problem?\n\nA. The proof of NL-hardness for PATH remains completely valid. The omission of a single edge is an insignificant error that does not break the fundamental logical equivalence for all possible inputs.\n\nB. The proof is invalid. The flaw could cause a 'no' instance of the language $L$ (i.e., an input $w \\notin L$) to be mapped to a 'yes' instance of PATH, because the erroneous graph might contain a path that shouldn't exist.\n\nC. The proof is invalid. The flaw could cause a 'yes' instance of the language $L$ (i.e., an input $w \\in L$) to be mapped to a 'no' instance of PATH, because the omitted edge might be critical for all accepting computation paths.\n\nD. The proof is invalid, but primarily because the transducer that performs the reduction can no longer be guaranteed to run in logarithmic space due to the additional logic required to select and omit an edge.\n\nE. The proof of NL-hardness for PATH fails, but the construction can now be considered a valid proof that PATH is contained in NL, i.e., PATH $\\in$ NL.", "solution": "We formalize the standard reduction and the effect of the bug.\n\n1) Standard reduction and its correctness condition:\n- Let $L \\in \\text{NL}$ and $M$ be a nondeterministic logspace Turing machine deciding $L$.\n- On input $w$, the logspace transducer constructs the configuration graph $G_{M}(w)=(V,E)$ whose vertices $V$ are all configurations of $M$ on $w$, and where $(C_{1},C_{2}) \\in E$ iff $M$ can move from configuration $C_{1}$ to configuration $C_{2}$ in one step.\n- Let $s=C_{start}$ be the unique start configuration and $t=C_{accept}$ the unique accepting configuration.\n- The standard correctness condition for the reduction to PATH is:\n$$\nw \\in L \\iff \\text{there exists a path from } s \\text{ to } t \\text{ in } G_{M}(w).\n$$\n\n2) Model of Alice’s bug in the reduced instance:\n- Alice’s transducer outputs the same vertex set $V$, the same $s$ and $t$, but an edge set $E'$ obtained by removing exactly one valid transition whenever $E$ is non-empty. Formally, for some edge $e^{*} \\in E$ (possibly depending on $w$),\n$$\nE' \\;=\\; E \\setminus \\{e^{*}\\}.\n$$\n- The produced instance is thus $G'=(V,E')$ with the same $s,t$.\n\n3) Effect on the “no” direction:\n- Suppose $w \\notin L$. Then there is no path from $s$ to $t$ in $G_{M}(w)$:\n$$\nw \\notin L \\implies \\neg\\exists \\text{ path } s \\leadsto t \\text{ in } G_{M}(w).\n$$\n- Removing edges cannot create new paths. Formally, if $E' \\subseteq E$, then any $s \\leadsto t$ path in $(V,E')$ is also an $s \\leadsto t$ path in $(V,E)$. Hence,\n$$\n\\neg\\exists \\text{ path } s \\leadsto t \\text{ in } (V,E) \\;\\implies\\; \\neg\\exists \\text{ path } s \\leadsto t \\text{ in } (V,E').\n$$\n- Therefore, a \"no\" instance cannot be mapped to a \"yes\" instance by Alice’s bug. Option B is false.\n\n4) Existence of “yes” instances that become “no” under the bug:\n- To preserve NL-hardness, the reduction must satisfy for all $w$:\n$$\nw \\in L \\iff \\exists \\text{ path } s \\leadsto t \\text{ in } (V,E').\n$$\n- We show this equivalence can fail. Construct $M$ and $w \\in L$ so that $G_{M}(w)$ has exactly one $s \\leadsto t$ path and no other edges except those on that path. One way is to let $M$ be deterministic on $w$ with a unique accepting run and to define its transition function so that every configuration not on that run is halting (with no outgoing transitions). Then the only edges in $E$ are precisely the edges of the unique $s \\leadsto t$ path.\n- Since Alice’s bug removes exactly one edge $e^{*}$ from $E$ when $E$ is non-empty, it must remove an edge on that unique path. Thus the new graph $(V,E')$ has no $s \\leadsto t$ path:\n$$\nw \\in L \\text{ and } E' = E \\setminus \\{e^{*}\\} \\text{ with } e^{*} \\text{ on the unique } s \\leadsto t \\text{ path } \\implies \\neg\\exists \\text{ path } s \\leadsto t \\text{ in } (V,E').\n$$\n- Therefore, there exist inputs $w \\in L$ for which the buggy reduction outputs a \"no\" instance of PATH. This breaks the required bi-implication and invalidates the reduction. This is exactly the failure described in option C.\n\n5) Remaining options:\n- Option A is incorrect because the equivalence must hold for all inputs; removing a single edge can be fatal when that edge lies on all accepting paths.\n- Option D is incorrect because the space bound is unaffected in principle; the issue is semantic correctness, not space complexity.\n- Option E is irrelevant to NL-hardness; moreover, the flawed reduction does not establish $\\text{PATH} \\in \\text{NL}$ (which is known independently).\n\nConclusion: The flaw can map a \"yes\" instance of $L$ to a \"no\" instance of PATH by deleting an edge critical to all accepting paths, so the proof is invalid for the reason in option C.", "answer": "$$\\boxed{C}$$", "id": "1435034"}]}