{"hands_on_practices": [{"introduction": "Evaluating a Quantified Boolean Formula (QBF) can be thought of as a game between two players. An existential quantifier, $\\exists x$, allows one player to choose a value for $x$ to try and make the formula true, while a universal quantifier, $\\forall x$, challenges an opposing player to find a value for $x$ that makes it false. This first practice problem [@problem_id:1440153] invites you to explore this dynamic by evaluating two similar-looking formulas, which differ only in the order of their quantifiers. By analyzing them, you will develop a crucial intuition for how this order dictates the 'rules of the game' and ultimately determines a statement's truth value.", "problem": "In the study of computational complexity, a Quantified Boolean Formula (QBF) is a formula in classical propositional logic where the variables are quantified. The quantifiers, `∀` (for all) and `∃` (there exists), range over the Boolean domain `{True, False}`. The evaluation of a QBF is a fundamental problem in the complexity class PSPACE.\n\nConsider the logical implication operator `→`, where `A → B` is `False` only if `A` is `True` and `B` is `False`; otherwise, it is `True`.\n\nEvaluate the truth values of the following two QBFs:\n1.  $F_1 = \\forall x \\exists y (x \\to y)$\n2.  $F_2 = \\exists y \\forall x (x \\to y)$\n\nBased on your evaluation, select the correct statement from the options below.\n\nA. $F_1$ is True and $F_2$ is True.\n\nB. $F_1$ is True and $F_2$ is False.\n\nC. $F_1$ is False and $F_2$ is True.\n\nD. $F_1$ is False and $F_2$ is False.", "solution": "We use the propositional equivalence of implication: for any propositions $A$ and $B$, $A \\to B \\equiv \\lnot A \\lor B$.\n\nEvaluate $F_{1}$:\n$$\nF_{1}=\\forall x \\exists y\\,(x \\to y) \\equiv \\forall x \\exists y\\,(\\lnot x \\lor y).\n$$\nConsider the two possible truth values of $x$:\n- If $x$ is true, then $\\lnot x$ is false, so $\\lnot x \\lor y$ reduces to $y$. Then $\\exists y\\,(y)$ is satisfied by choosing $y$ true.\n- If $x$ is false, then $\\lnot x$ is true, so $\\lnot x \\lor y$ is true regardless of $y$, and thus $\\exists y\\,(\\lnot x \\lor y)$ holds.\n\nTherefore, for every $x$ there exists a $y$ making $x \\to y$ true, hence $F_{1}$ is true.\n\nEvaluate $F_{2}$:\n$$\nF_{2}=\\exists y \\forall x\\,(x \\to y) \\equiv \\exists y \\forall x\\,(\\lnot x \\lor y).\n$$\nChoose $y$ true. Then for any $x$, $\\lnot x \\lor y$ is true because $y$ is true. Hence $\\forall x\\,(\\lnot x \\lor y)$ holds for this choice of $y$, so the existential quantifier is satisfied. Therefore $F_{2}$ is true.\n\nBoth $F_{1}$ and $F_{2}$ are true, which corresponds to option A.", "answer": "$$\\boxed{A}$$", "id": "1440153"}, {"introduction": "To analyze QBFs algorithmically, it is often necessary to convert them into a standard format, such as Prenex Normal Form, where all quantifiers are grouped at the beginning. A key skill for this process is the ability to move negation symbols ($\\neg$) inward, so they apply only to individual variables. This exercise [@problem_id:1440133] provides hands-on practice with this essential transformation, requiring you to apply the quantifier equivalents of De Morgan's laws to simplify a QBF into its negated form.", "problem": "In the study of computational complexity, a Quantified Boolean Formula (QBF) is a formula in classical propositional logic extended with quantifiers over the boolean variables. Consider the following QBF, where $x$ and $y$ are boolean variables:\n$$ F = \\neg(\\exists x \\forall y (x \\lor \\neg y)) $$\nYour task is to find an equivalent formula where the negation operator, $\\neg$, is only applied directly to variables. This transformation is often referred to as pushing the negation inward. Which of the following formulas is logically equivalent to $F$?\n\nA. $\\exists x \\forall y (\\neg x \\land y)$\n\nB. $\\forall x \\exists y (\\neg x \\lor y)$\n\nC. $\\forall x \\exists y (\\neg x \\land y)$\n\nD. $\\exists x \\forall y (\\neg x \\lor y)$\n\nE. $\\forall x \\exists y (x \\land \\neg y)$", "solution": "The problem asks us to find a logically equivalent formula for $F = \\neg(\\exists x \\forall y (x \\lor \\neg y))$ by moving the negation operator $(\\neg)$ inward until it only applies to variables. This process involves using De Morgan's laws for quantifiers and propositions.\n\nThe original formula is:\n$$ F = \\neg(\\exists x \\forall y (x \\lor \\neg y)) $$\n\nFirst, we address the outermost negation and the existential quantifier $\\exists x$. De Morgan's law for quantifiers states that $\\neg (\\exists z \\phi) \\equiv \\forall z (\\neg \\phi)$. Applying this rule, we push the negation past the quantifier $\\exists x$, which flips it to a universal quantifier $\\forall x$:\n$$ F \\equiv \\forall x (\\neg(\\forall y (x \\lor \\neg y))) $$\n\nNext, we proceed with the negation that is now inside the scope of the universal quantifier $\\forall x$. We need to push this negation past the universal quantifier $\\forall y$. The corresponding De Morgan's law for quantifiers is $\\neg (\\forall z \\phi) \\equiv \\exists z (\\neg \\phi)$. Applying this rule, we push the negation past the quantifier $\\forall y$, which flips it to an existential quantifier $\\exists y$:\n$$ F \\equiv \\forall x \\exists y (\\neg(x \\lor \\neg y)) $$\n\nNow, the negation is applied to the propositional part of the formula, $(x \\lor \\neg y)$. To push the negation further inward, we use De Morgan's law for propositions, which states that $\\neg(P \\lor Q) \\equiv \\neg P \\land \\neg Q$. In our case, $P=x$ and $Q=\\neg y$. Applying this rule, we get:\n$$ F \\equiv \\forall x \\exists y (\\neg x \\land \\neg(\\neg y)) $$\n\nFinally, we simplify the double negation $\\neg(\\neg y)$ using the law of double negation, which states that $\\neg(\\neg P) \\equiv P$. Applying this rule to $\\neg(\\neg y)$ gives us $y$:\n$$ F \\equiv \\forall x \\exists y (\\neg x \\land y) $$\n\nThis is the final simplified formula where the negation operator only applies to the variable $x$. We now compare this result with the given options. The formula $\\forall x \\exists y (\\neg x \\land y)$ matches option C.", "answer": "$$\\boxed{C}$$", "id": "1440133"}, {"introduction": "Beyond simple evaluation, Quantified Boolean Formulas serve as a powerful language for describing complex problems and properties. This final exercise challenges you to shift from merely interpreting formulas to creating them. Your task in this problem [@problem_id:1464839] is to construct a formula that precisely captures a non-trivial constraint: that a given expression has 'exactly one' satisfying assignment. Successfully doing so demonstrates the remarkable expressive power of QBFs and hints at their central role in modeling problems in computational complexity.", "problem": "In computational complexity theory, a Quantified Boolean Formula (QBF) is a formula in classical propositional logic extended with quantifiers ($\\forall$ for \"for all\" and $\\exists$ for \"there exists\") over boolean variables. A True Quantified Boolean Formula (TQBF) is a QBF with no free variables that evaluates to either true or false.\n\nConsider a propositional formula $\\phi(x_1, x_2)$ that depends on two boolean variables, $x_1$ and $x_2$. Your task is to select the TQBF that is true if and only if $\\phi(x_1, x_2)$ has exactly one satisfying assignment.\n\nFor clarity in the options below, we introduce a shorthand notation for the equality of two assignments. Let the expression $((x_1, x_2) = (y_1, y_2))$ be equivalent to the boolean formula $((x_1 \\iff y_1) \\land (x_2 \\iff y_2))$.\n\nWhich of the following TQBFs correctly expresses the property that $\\phi(x_1, x_2)$ has exactly one satisfying assignment?\n\nA. $\\exists x_1 \\exists x_2 \\left( \\phi(x_1, x_2) \\land \\forall y_1 \\forall y_2 \\left( \\phi(y_1, y_2) \\implies ((x_1, x_2) = (y_1, y_2)) \\right) \\right)$\n\nB. $\\exists x_1 \\exists x_2 \\left( \\phi(x_1, x_2) \\land \\forall y_1 \\forall y_2 \\left( ((x_1, x_2) = (y_1, y_2)) \\implies \\phi(y_1, y_2) \\right) \\right)$\n\nC. $\\exists x_1 \\exists x_2 \\exists y_1 \\exists y_2 \\left( \\phi(x_1,x_2) \\land \\phi(y_1,y_2) \\land \\neg((x_1,x_2)=(y_1,y_2)) \\right)$\n\nD. $\\forall x_1 \\forall x_2 \\forall y_1 \\forall y_2 \\left( (\\phi(x_1,x_2) \\land \\phi(y_1,y_2)) \\implies ((x_1,x_2)=(y_1,y_2)) \\right)$", "solution": "We want a TQBF that is true if and only if there is exactly one assignment $(x_{1},x_{2}) \\in \\{0,1\\}^{2}$ such that $\\phi(x_{1},x_{2})$ is true. The logical specification of “exactly one satisfying assignment” is the conjunction of existence and uniqueness:\n1) Existence: $\\exists x_{1}\\exists x_{2}\\,\\phi(x_{1},x_{2})$.\n2) Uniqueness: $\\forall y_{1}\\forall y_{2}\\,(\\phi(y_{1},y_{2}) \\implies ((x_{1},x_{2})=(y_{1},y_{2})))$ for the particular witness $(x_{1},x_{2})$.\n\nCombining these in a single formula gives:\n$$\n\\exists x_{1}\\exists x_{2}\\left(\\phi(x_{1},x_{2}) \\land \\forall y_{1}\\forall y_{2}\\left(\\phi(y_{1},y_{2}) \\implies ((x_{1},x_{2})=(y_{1},y_{2}))\\right)\\right),\n$$\nwhich matches Option A.\n\nNow verify each option precisely:\n\n- Option A states:\n$$\n\\exists x_{1}\\exists x_{2}\\left(\\phi(x_{1},x_{2}) \\land \\forall y_{1}\\forall y_{2}\\left(\\phi(y_{1},y_{2}) \\implies ((x_{1},x_{2})=(y_{1},y_{2}))\\right)\\right).\n$$\nThis asserts there exists a satisfying assignment $(x_{1},x_{2})$ and that any satisfying assignment $(y_{1},y_{2})$ must be equal to it. This is exactly the definition of having exactly one satisfying assignment.\n\n- Option B states:\n$$\n\\exists x_{1}\\exists x_{2}\\left(\\phi(x_{1},x_{2}) \\land \\forall y_{1}\\forall y_{2}\\left(((x_{1},x_{2})=(y_{1},y_{2})) \\implies \\phi(y_{1},y_{2})\\right)\\right).\n$$\nFor any fixed $(x_{1},x_{2})$ with $\\phi(x_{1},x_{2})$ true, the implication $((x_{1},x_{2})=(y_{1},y_{2})) \\implies \\phi(y_{1},y_{2})$ holds for all $(y_{1},y_{2})$: if $(y_{1},y_{2})=(x_{1},x_{2})$, then $\\phi(y_{1},y_{2})$ is true since $\\phi(x_{1},x_{2})$ is; if $(y_{1},y_{2})\\neq(x_{1},x_{2})$, the antecedent is false and the implication is true. Hence the universal condition is always satisfied given $\\phi(x_{1},x_{2})$, and the whole formula is equivalent to $\\exists x_{1}\\exists x_{2}\\,\\phi(x_{1},x_{2})$, which expresses “at least one satisfying assignment,” not uniqueness.\n\n- Option C states:\n$$\n\\exists x_{1}\\exists x_{2}\\exists y_{1}\\exists y_{2}\\left(\\phi(x_{1},x_{2}) \\land \\phi(y_{1},y_{2}) \\land \\neg((x_{1},x_{2})=(y_{1},y_{2}))\\right),\n$$\nwhich asserts the existence of two distinct satisfying assignments. This expresses “at least two,” the opposite of uniqueness.\n\n- Option D states:\n$$\n\\forall x_{1}\\forall x_{2}\\forall y_{1}\\forall y_{2}\\left((\\phi(x_{1},x_{2}) \\land \\phi(y_{1},y_{2})) \\implies ((x_{1},x_{2})=(y_{1},y_{2}))\\right),\n$$\nwhich asserts that there do not exist two distinct satisfying assignments. This expresses “at most one satisfying assignment,” but does not guarantee existence. Therefore it allows zero satisfying assignments, not exactly one.\n\nTherefore, only Option A correctly expresses that $\\phi(x_{1},x_{2})$ has exactly one satisfying assignment.", "answer": "$$\\boxed{A}$$", "id": "1464839"}]}