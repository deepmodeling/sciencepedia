{"hands_on_practices": [{"introduction": "To understand what makes a problem \"inherently sequential\" and thus P-complete, it is instructive to first examine a problem that appears sequential but is not. This exercise [@problem_id:1433477] explores the evaluation of an expression with arbitrarily nested parentheses, a structure that often implies a fixed order of operations. By analyzing the properties of the `max` operator, you will discover how certain algebraic laws can break this sequential dependency, allowing the problem to be solved efficiently in parallel and placing it in the class NC.", "problem": "In computational complexity theory, we study the resources required to solve computational problems. The class **P** consists of all decision problems that can be solved in polynomial time by a deterministic sequential computer. The class **NC** (Nick's Class) is the set of decision problems solvable in polylogarithmic time on a parallel computer with a polynomial number of processors. Problems in NC are considered \"efficiently parallelizable\". It is widely believed that NC is a strict subset of P.\n\nA problem in P is said to be **P-complete** if it is among the \"hardest\" problems in P. More formally, every other problem in P can be reduced to it using a log-space reduction. P-complete problems are considered \"inherently sequential\" and are very unlikely to be in NC. If any P-complete problem were found to be in NC, it would imply that $P = \\text{NC}$.\n\nConsider the **Max-Expression Evaluation Problem (MEEP)** defined as follows: Given a fully parenthesized expression involving a set of integer variables $x_1, x_2, \\dots, x_n$ and the binary operator `max(,)`, along with the integer values for each variable, compute the final value of the expression. An example of such an expression is $\\max(x_1, \\max(\\max(x_2, x_3), x_4))$.\n\nBased on the definitions provided, determine the most accurate classification for the Max-Expression Evaluation Problem (MEEP).\n\nA. MEEP is P-complete because the arbitrary nesting of parentheses imposes a sequential evaluation order, similar to other P-complete problems like the general Circuit Value Problem.\n\nB. MEEP is in NC because the `max` operator is associative, which allows the computation to be restructured and performed efficiently in parallel, regardless of the initial parenthesization.\n\nC. MEEP is not in P, and therefore cannot be P-complete, because evaluating a deeply nested expression requires a number of steps proportional to the depth, which can be exponential in the number of variables.\n\nD. MEEP is #P-complete, as the problem is equivalent to counting the number of comparisons needed to find the largest element in a set.\n\nE. MEEP is in NC only if the expression corresponds to a balanced binary tree. For arbitrarily nested (unbalanced) expressions, the problem is P-complete.", "solution": "We are given a fully parenthesized expression over the binary operator $\\max(\\cdot,\\cdot)$ on integer variables $x_{1},\\dots,x_{n}$ and asked to compute the final value. The key algebraic property is that $\\max$ is associative and commutative:\n$$\n\\max(a,\\max(b,c))=\\max(\\max(a,b),c)=\\max(a,b,c),\n$$\nand it is also idempotent:\n$$\n\\max(a,a)=a.\n$$\nTherefore, for any fully parenthesized expression $E$ built solely from $\\max$ applied to variables among $\\{x_{1},\\dots,x_{n}\\}$ (possibly with repetitions), its value depends only on the multiset of variables appearing and equals the global maximum of those values. Equivalently,\n$$\n\\mathrm{MEEP}(E)=\\max\\{x_{i} : x_{i} \\text{ appears in } E\\}.\n$$\n\nTo classify the problem, we observe that computing the maximum of $n$ integers is efficiently parallelizable. A standard parallel reduction computes the maximum in $O(\\log n)$ time using $O(n)$ processors: define $y_{i}^{(0)}=x_{i}$ for $1 \\le i \\le n$, and for each round $t \\ge 1$ set\n$$\ny_{i}^{(t)}=\\max\\bigl(y_{2i-1}^{(t-1)},\\,y_{2i}^{(t-1)}\\bigr)\n\\quad \\text{for} \\quad 1 \\le i \\le \\left\\lfloor \\frac{n}{2^{t}} \\right\\rfloor.\n$$\nAfter $T=\\lceil \\log_{2} n \\rceil$ rounds, we obtain\n$$\ny_{1}^{(T)}=\\max_{1 \\le i \\le n} x_{i}.\n$$\nThis algorithm runs in polylogarithmic time with a polynomial number of processors, so it is in $NC$. The initial parenthesization does not constrain the parallel evaluation because associativity guarantees that rebracketing to a balanced reduction tree does not change the result.\n\nConsequently:\n- Option A is incorrect: associativity defeats any purported inherent sequentiality.\n- Option C is incorrect: the depth of any such expression is at most linear in $n$, and in any case we can evaluate in polylogarithmic parallel time.\n- Option D is incorrect: MEEP asks for the maximum value, not a count; it is not a counting problem and there is no reduction to a $\\#P$ function here.\n- Option E is incorrect: even for unbalanced expressions, associativity allows balanced parallel evaluation, so the problem remains in $NC$.\n\nTherefore, the most accurate classification is that MEEP is in $NC$ due to associativity enabling efficient parallel evaluation regardless of initial parenthesization.", "answer": "$$\\boxed{B}$$", "id": "1433477"}, {"introduction": "Having seen how associativity can lead to parallelization, we now turn to a case where this property is absent. This problem [@problem_id:1433489] requires you to evaluate expressions using a custom, non-associative binary operation, where the result is entirely dependent on the specified parenthesization. This hands-on practice provides a tangible feel for the core difficulty of P-complete problems like the Circuit Value Problem, where the computational path is rigidly fixed and must be followed sequentially.", "problem": "Consider a finite algebraic structure defined on a set of elements $S = \\{a, b, c\\}$. A binary operation $\\ast$ is defined on this set by the following rules:\n$a \\ast a = a, \\quad a \\ast b = c, \\quad a \\ast c = b$\n$b \\ast a = a, \\quad b \\ast b = b, \\quad b \\ast c = c$\n$c \\ast a = b, \\quad c \\ast b = a, \\quad c \\ast c = a$\n\nNote that this operation is not necessarily associative. You are given an unparenthesized expression consisting of a sequence of four elements: $E = a \\ast b \\ast c \\ast a$. A valid parenthesization of this expression fully specifies the order in which the operations are performed. For example, one such parenthesization is $((a \\ast b) \\ast c) \\ast a$.\n\nDetermine the total number of distinct parenthesizations of the expression $E$ that evaluate to the element $c$.\n\nA. 0\n\nB. 1\n\nC. 2\n\nD. 3\n\nE. 5", "solution": "We have the set $S=\\{a,b,c\\}$ with the binary operation $\\ast$ defined by:\n$$a \\ast a=a,\\quad a \\ast b=c,\\quad a \\ast c=b,$$\n$$b \\ast a=a,\\quad b \\ast b=b,\\quad b \\ast c=c,$$\n$$c \\ast a=b,\\quad c \\ast b=a,\\quad c \\ast c=a.$$\nConsider $E=a \\ast b \\ast c \\ast a$. All full parenthesizations of four factors are:\n1. $(((a \\ast b) \\ast c) \\ast a)$\n2. $((a \\ast (b \\ast c)) \\ast a)$\n3. $((a \\ast b) \\ast (c \\ast a))$\n4. $(a \\ast ((b \\ast c) \\ast a))$\n5. $(a \\ast (b \\ast (c \\ast a)))$\nEvaluate each:\n1. $a \\ast b=c$, then $(a \\ast b) \\ast c=c \\ast c=a$, then $((a \\ast b) \\ast c) \\ast a=a \\ast a=a$.\n2. $b \\ast c=c$, then $a \\ast (b \\ast c)=a \\ast c=b$, then $(a \\ast (b \\ast c)) \\ast a=b \\ast a=a$.\n3. $a \\ast b=c$ and $c \\ast a=b$, then $(a \\ast b) \\ast (c \\ast a)=c \\ast b=a$.\n4. $b \\ast c=c$, then $(b \\ast c) \\ast a=c \\ast a=b$, then $a \\ast ((b \\ast c) \\ast a)=a \\ast b=c$.\n5. $c \\ast a=b$, then $b \\ast (c \\ast a)=b \\ast b=b$, then $a \\ast (b \\ast (c \\ast a))=a \\ast b=c$.\nExactly two parenthesizations (4 and 5) evaluate to $c$. Therefore, the total number is $2$, corresponding to option C.", "answer": "$$\\boxed{C}$$", "id": "1433489"}]}