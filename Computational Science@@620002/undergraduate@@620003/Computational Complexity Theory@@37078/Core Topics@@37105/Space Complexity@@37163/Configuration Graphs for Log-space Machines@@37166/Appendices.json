{"hands_on_practices": [{"introduction": "Understanding the structure of a configuration graph begins with its most basic property: the connections between vertices. This first exercise asks you to consider the direct consequences of a machine's determinism on the shape of its configuration graph. By analyzing the transition function of a Deterministic Turing Machine (DTM), you can deduce a strict limit on the number of possible next steps from any given configuration, a key feature that simplifies the analysis of its computational paths. [@problem_id:1418038]", "problem": "In the study of computational complexity, we often analyze the behavior of abstract machines by examining their configuration graphs. Consider a Deterministic Turing Machine (DTM) designed to operate on a read-only input tape and a single read/write work tape. The machine is defined by a set of states $Q$, an input alphabet $\\Sigma$, and a work tape alphabet $\\Gamma$. For an input string of length $n$, this machine is constrained to use at most $O(\\log n)$ space on its work tape.\n\nA *configuration* of this DTM is a complete snapshot of its status at a single point in time. It includes the machine's current state from $Q$, the position of its head on the input tape, the entire content of its work tape, and the position of its head on the work tape.\n\nThe *configuration graph* $G_M$ for a specific DTM $M$ is a directed graph where each vertex represents a unique configuration. A directed edge exists from a vertex representing configuration $C_1$ to a vertex representing configuration $C_2$ if and only if the machine $M$ transitions from $C_1$ to $C_2$ in exactly one computational step.\n\nAssuming the machine starts in a configuration from which it does not immediately halt, what is the maximum possible out-degree for any vertex in the configuration graph $G_M$? Your answer should be a single integer.", "solution": "Let $M$ be a deterministic Turing machine with a read-only input tape and a single read/write work tape. Determinism means the transition function is single-valued. Formally, there exists a function\n$$\n\\delta : Q \\times \\Sigma \\times \\Gamma \\to Q \\times \\Gamma \\times D_{i} \\times D_{w},\n$$\nwhere $D_{i}$ and $D_{w}$ are the finite sets of allowed head movements for the input and work tapes, respectively (for example, $D_{i} = D_{w} = \\{L,S,R\\}$). For any non-halting configuration $C$—which consists of the current state in $Q$, the input head position, the complete work tape content, and the work head position—there is exactly one applicable transition prescribed by $\\delta$. This uniquely determines the next configuration $C'$, namely the one obtained by updating the state, writing the specified work-tape symbol, and moving the input and work heads as specified.\n\nIn the configuration graph $G_{M}$, vertices are configurations and there is a directed edge from $C$ to $C'$ iff $C'$ is obtained from $C$ by one step of $M$. Because $\\delta$ is a function, each non-halting configuration has exactly one successor configuration, hence exactly one outgoing edge. Halting configurations have no outgoing edges. Therefore, the out-degree of any vertex is at most $1$, and for non-halting configurations it is exactly $1$.\n\nThe constraint that $M$ uses at most $O(\\log n)$ work-tape space only bounds the total number of distinct configurations and does not affect the determinism of transitions. Thus, the maximum possible out-degree over all vertices in $G_{M}$ is $1$.", "answer": "$$\\boxed{1}$$", "id": "1418038"}, {"introduction": "A pivotal insight in complexity theory is that a log-space machine can only have a polynomial number of unique configurations. This practice problem moves from local edge properties to this global understanding of the graph's size. You will derive the total number of vertices by systematically accounting for every component of a machine's configuration, making tangible the principle that underpins the power of log-space algorithms. [@problem_id:1418082]", "problem": "A computational theorist is analyzing two models of a specialized Turing Machine designed for processing large datasets. These machines feature a read-only input tape and a separate read-write work tape.\n\nA complete configuration of such a machine is uniquely determined by the combination of its current internal state, the position of its head on the read-only input tape, the entire content of its work tape, and the position of its head on the work tape. The vertices of the machine's configuration graph correspond one-to-one with these unique configurations.\n\nThe machines share the following characteristics:\n- The size of the input on the read-only tape is $n$. The input tape head can be at any integer position from $1$ to $n$.\n- The set of internal states is $Q$, with a total of $q = |Q|$ states.\n- The work tape alphabet is $\\Gamma$, with a size of $k = |\\Gamma|$, where $k \\ge 2$.\n\nThe two models differ only in the size of their work tape, which depends on a positive design constant $c$.\n- **Model M1**: Uses a work tape of size $S_1 = c \\log_{2}(n)$. The work tape head can be at any integer position from $1$ to $S_1$.\n- **Model M2**: An upgraded version that uses a work tape of size $S_2 = c (\\log_{2}(n))^2$. The work tape head can be at any integer position from $1$ to $S_2$.\n\nCalculate the ratio of the total number of vertices in the configuration graph of Model M2 to that of Model M1. Express your answer as a symbolic expression in terms of $n$, $k$, and $c$.", "solution": "A configuration is uniquely determined by four components: the internal state, the input head position, the entire work tape content, and the work tape head position. For a work tape of length $S$ over alphabet $\\Gamma$ with $|\\Gamma|=k$, the number of possible work tape contents is $k^{S}$, and the number of work tape head positions is $S$. The input head has $n$ positions, and there are $q$ internal states. Therefore, the total number of configurations is\n$$\nV(S) = q \\cdot n \\cdot k^{S} \\cdot S.\n$$\nFor Model M1, $S_{1} = c \\log_{2}(n)$, so\n$$\nV_{1} = q \\cdot n \\cdot k^{c \\log_{2}(n)} \\cdot c \\log_{2}(n).\n$$\nFor Model M2, $S_{2} = c (\\log_{2}(n))^{2}$, so\n$$\nV_{2} = q \\cdot n \\cdot k^{c (\\log_{2}(n))^{2}} \\cdot c (\\log_{2}(n))^{2}.\n$$\nThe ratio of the number of vertices is\n$$\n\\frac{V_{2}}{V_{1}} = \\frac{q \\cdot n \\cdot k^{S_{2}} \\cdot S_{2}}{q \\cdot n \\cdot k^{S_{1}} \\cdot S_{1}} = k^{S_{2} - S_{1}} \\cdot \\frac{S_{2}}{S_{1}}.\n$$\nSubstituting $S_{2} - S_{1} = c (\\log_{2}(n))^{2} - c \\log_{2}(n) = c \\log_{2}(n) (\\log_{2}(n) - 1)$ and $\\frac{S_{2}}{S_{1}} = \\frac{c (\\log_{2}(n))^{2}}{c \\log_{2}(n)} = \\log_{2}(n)$ gives\n$$\n\\frac{V_{2}}{V_{1}} = k^{c \\log_{2}(n) (\\log_{2}(n) - 1)} \\cdot \\log_{2}(n).\n$$\nThis is the required symbolic ratio in terms of $n$, $k$, and $c$.", "answer": "$$\\boxed{\\log_{2}(n)\\,k^{c\\,\\log_{2}(n)\\,(\\log_{2}(n)-1)}}$$", "id": "1418082"}, {"introduction": "Having established the fundamental properties and polynomial size of configuration graphs, we can now use this framework to analyze computational behavior algorithmically. This final exercise challenges you to determine the complexity of detecting a specific pattern—a 3-cycle—within a log-space machine's computation. It requires synthesizing your understanding of configuration enumeration and graph traversal to design an efficient decision procedure, illustrating how the configuration graph model enables us to solve complex meta-problems about computation itself. [@problem_id:1418024]", "problem": "In the study of computational complexity, the structure of a Turing machine's computation can be represented by a configuration graph. This problem investigates the complexity of identifying a specific small-scale feature within such a graph for a particular class of machines.\n\nConsider a deterministic Turing machine $M$ equipped with a read-only input tape and a single read/write work tape. The machine operates on an input string $w$ of length $n = |w|$. We define this machine as a \"log-space machine\" if there exists a constant $c > 0$ (dependent on $M$ but not on $w$) such that for any input $w$, $M$ never uses more than $c \\log_2 n$ cells on its work tape.\n\nA configuration of such a machine is completely described by the tuple $C = (q, i, \\gamma, j)$, where:\n- $q$ is the current state of $M$'s finite control.\n- $i$ is the position of the head on the input tape ($1 \\le i \\le n$).\n- $\\gamma$ is the entire content of the used portion of the work tape, represented as a string. The length of $\\gamma$ is at most $c \\log_2 n$.\n- $j$ is the position of the head on the work tape ($1 \\le j \\le |\\gamma|$).\n\nThe configuration graph $G(M, w)$ is a directed graph where each vertex represents a unique configuration of $M$ on input $w$. A directed edge exists from configuration $C_a$ to $C_b$ if and only if $M$ transitions from $C_a$ to $C_b$ in a single computation step.\n\nA directed cycle of length 3 (or a 3-cycle) is a sequence of three distinct configurations $C_1, C_2, C_3$ such that there are edges $(C_1, C_2)$, $(C_2, C_3)$, and $(C_3, C_1)$ in $G(M, w)$.\n\nLet's define the decision problem `D3CYCLE` as follows: Given the description of a deterministic log-space Turing machine $M$ and an input string $w$, does the configuration graph $G(M, w)$ contain a directed cycle of length 3?\n\nWhich of the following complexity classes best characterizes the `D3CYCLE` problem?\n\nA. L (Deterministic Logarithmic Space)\n\nB. NL (Nondeterministic Logarithmic Space)\n\nC. P (Polynomial Time)\n\nD. NP (Nondeterministic Polynomial Time)\n\nE. PSPACE (Polynomial Space)", "solution": "Let $n = |w|$, let $Q$ be the finite set of states of $M$ with $|Q| = s$, and let $\\Gamma$ be the finite work-tape alphabet with $|\\Gamma| = g$. The log-space bound asserts that there exists a constant $c > 0$ such that the work tape uses at most $c \\log_{2} n$ cells on input $w$.\n\nA configuration is a tuple $C = (q, i, \\gamma, j)$ with $q \\in Q$, $1 \\leq i \\leq n$, $\\gamma \\in \\Gamma^{\\leq c \\log_{2} n}$, and $1 \\leq j \\leq |\\gamma|$. The total number of possible $\\gamma$ is\n$$\n\\sum_{k=1}^{\\lfloor c \\log_{2} n \\rfloor} g^{k} \\leq \\frac{g^{\\lfloor c \\log_{2} n \\rfloor + 1} - g}{g - 1} = O\\!\\left(g^{c \\log_{2} n}\\right).\n$$\nUsing $a^{\\log_{b} n} = n^{\\log_{b} a}$, we get\n$$\ng^{c \\log_{2} n} = n^{c \\log_{2} g}.\n$$\nThus, the number of configurations is at most\n$$\n|Q| \\cdot n \\cdot \\left(\\sum_{k=1}^{\\lfloor c \\log_{2} n \\rfloor} g^{k}\\right) \\cdot \\lfloor c \\log_{2} n \\rfloor = O\\!\\left(n \\cdot n^{c \\log_{2} g} \\cdot \\log n\\right) = \\text{poly}(n).\n$$\nBecause $M$ is deterministic, the configuration graph $G(M,w)$ has out-degree at most $1$ at every vertex. Let $f$ be the (partial) successor function mapping a configuration to its unique next configuration when it exists. A directed $3$-cycle is present if and only if there exists a configuration $C$ for which $f$ is defined on $C$, $f(C)$, and $f^{2}(C)$, the three configurations $C$, $f(C)$, $f^{2}(C)$ are pairwise distinct, and\n$$\nf^{3}(C) = C.\n$$\n\nWe design a deterministic log-space algorithm to decide whether such a $C$ exists.\n\n1. Enumerate all configurations $C = (q,i,\\gamma,j)$. This can be done in lexicographic order using nested counters over:\n   - $q \\in Q$,\n   - $i \\in \\{1,\\dots,n\\}$,\n   - length $\\ell \\in \\{1,\\dots,\\lfloor c \\log_{2} n \\rfloor\\}$,\n   - $\\gamma \\in \\Gamma^{\\ell}$,\n   - $j \\in \\{1,\\dots,\\ell\\}$.\n   Each counter requires at most $O(\\log n)$ bits in total because the index space is polynomial in $n$. Reconstructing $\\gamma$ from its index uses $O(\\log n)$ space since $|\\gamma| = O(\\log n)$.\n\n2. For each enumerated $C$, compute its successors under $f$ up to three steps:\n   - Compute $C_{1} = f(C)$ if defined by consulting the transition function of $M$ (read from the input), the input symbol at position $i$ in $w$ (read from the input), and the symbol at $j$ in $\\gamma$ (stored locally). If $C_{1}$ is undefined, continue to the next $C$.\n   - Compute $C_{2} = f(C_{1})$ similarly; if undefined, continue.\n   - Compute $C_{3} = f(C_{2})$ similarly; if undefined, continue.\n\n3. Check the $3$-cycle conditions:\n   - Verify $C_{3} = C$ by component-wise comparison of tuples.\n   - Verify $C \\neq C_{1}$ and $C \\neq C_{2}$ (which implies $C_{1} \\neq C_{2}$ in a functional graph when $f^{3}(C) = C$ and $C \\neq C_{1}$).\n\nSpace analysis:\n- Storing one configuration tuple $(q,i,\\gamma,j)$ uses $O(\\log n)$ space because $i$ and $j$ are at most $n$ and $c \\log_{2} n$ respectively, and $\\gamma$ has length $O(\\log n)$ over a constant alphabet.\n- Maintaining enumeration counters over a polynomial range uses $O(\\log n)$ bits.\n- Successor computation uses only the current configuration and the read-only input $(M,w)$, so no extra asymptotic space is needed beyond $O(\\log n)$.\n- To compare $C_{3}$ with $C$, we keep a copy of $C$ while computing successors in another $O(\\log n)$ buffer; the total remains $O(\\log n)$.\n\nTherefore, the entire decision procedure runs in deterministic $O(\\log n)$ space. Consequently, the problem lies in the class L. Since L is contained in all larger listed classes, the tightest characterization among the options is L.\n\nHence, the correct choice is A.", "answer": "$$\\boxed{A}$$", "id": "1418024"}]}