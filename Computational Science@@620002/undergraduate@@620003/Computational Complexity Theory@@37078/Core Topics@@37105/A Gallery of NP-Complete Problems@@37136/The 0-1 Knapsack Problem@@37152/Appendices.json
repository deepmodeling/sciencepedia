{"hands_on_practices": [{"introduction": "Before diving into complex algorithms, it's crucial to build an intuition for why they are necessary. This first practice problem demonstrates that the most obvious or intuitive \"greedy\" strategies do not always yield the best result for the 0-1 knapsack problem. By working through a small, concrete example, you will see firsthand why a more systematic approach is required to guarantee an optimal solution.[@problem_id:1449258]", "problem": "A data scientist is tasked with selecting a batch of computational jobs to run on a server with a limited amount of available Random Access Memory (RAM). The server has an available capacity of 10 GB of RAM. There are three pending jobs, each with a specific RAM requirement and an associated priority value, which represents its importance. The goal is to choose a subset of these jobs to run simultaneously such that their total RAM requirement does not exceed the server's capacity and the sum of the priority values of the chosen jobs is maximized.\n\nThe three jobs are:\n- Job 1: Priority Value = 10, RAM Requirement = 10 GB\n- Job 2: Priority Value = 6, RAM Requirement = 5 GB\n- Job 3: Priority Value = 6, RAM Requirement = 5 GB\n\nConsider a simple greedy strategy for job selection: always select the available job with the highest priority value first, and continue this process until no more jobs can be added without exceeding the RAM capacity.\n\nLet $V_{greedy}$ be the total priority value obtained by applying this \"highest-priority-first\" greedy strategy.\nLet $V_{optimal}$ be the maximum possible total priority value that can be achieved with any valid combination of jobs.\n\nWhich of the following options represents the correct ordered pair $(V_{greedy}, V_{optimal})$?\n\nA. (10, 10)\n\nB. (10, 12)\n\nC. (12, 10)\n\nD. (12, 12)\n\nE. (6, 12)", "solution": "We model the selection as a 0-1 knapsack problem. Let the capacity be $C=10$ and the jobs be items with values and weights $(v_{1},w_{1})=(10,10)$, $(v_{2},w_{2})=(6,5)$, $(v_{3},w_{3})=(6,5)$. The goal is to choose a subset $S$ to maximize\n$$\n\\sum_{i \\in S} v_{i}\n$$\nsubject to the constraint\n$$\n\\sum_{i \\in S} w_{i} \\leq C.\n$$\n\nGreedy strategy (highest priority value first): sort items by $v_{i}$ in nonincreasing order. The order is $1$ then $2$ and $3$ (with a tie between $2$ and $3$). Start with capacity $C=10$.\n- Consider item $1$: $w_{1}=10 \\leq C=10$, so include it. The remaining capacity becomes $C \\leftarrow C - w_{1} = 10 - 10 = 0$.\n- Consider items $2$ and $3$: $w_{2}=w_{3}=5 > 0$, so neither fits in the remaining capacity.\nThus the greedy set is $S_{\\text{greedy}}=\\{1\\}$ with total value\n$$\nV_{\\text{greedy}}=\\sum_{i \\in S_{\\text{greedy}}} v_{i}=10.\n$$\n\nOptimal solution: enumerate feasible subsets and their total values and weights.\n- $S=\\varnothing$: total weight $0 \\leq 10$, total value $0$.\n- $S=\\{1\\}$: total weight $10 \\leq 10$, total value $10$.\n- $S=\\{2\\}$: total weight $5 \\leq 10$, total value $6$.\n- $S=\\{3\\}$: total weight $5 \\leq 10$, total value $6$.\n- $S=\\{2,3\\}$: total weight $5+5=10 \\leq 10$, total value $6+6=12$.\n- $S=\\{1,2\\}$: total weight $10+5=15 > 10$ (infeasible).\n- $S=\\{1,3\\}$: total weight $10+5=15 > 10$ (infeasible).\n- $S=\\{1,2,3\\}$: total weight $10+5+5=20 > 10$ (infeasible).\nThe maximum feasible total value is\n$$\nV_{\\text{optimal}}=12,\n$$\nachieved by $S=\\{2,3\\}$.\n\nTherefore the ordered pair is $(V_{\\text{greedy}},V_{\\text{optimal}})=(10,12)$, which corresponds to option B.\n\nNote: The symbol $V_{optimal}$ in the question is evidently a typographical error for $V_{\\text{optimal}}$.", "answer": "$$\\boxed{B}$$", "id": "1449258"}, {"introduction": "Having seen that simple heuristics can fail, we now turn to a powerful and classic method for finding the exact optimal solution: dynamic programming. This exercise guides you through the mechanics of a memory-efficient version of the dynamic programming algorithm. Tracing the updates to the values array will demystify the process and solidify your understanding of how the principle of optimality is used to build the solution piece by piece.[@problem_id:1449277]", "problem": "An engineer is developing a resource allocation algorithm for a microcontroller with extremely limited memory. The algorithm must solve a variant of the \"knapsack problem\". Given a set of tasks, each with a specific memory \"weight\" and a \"value\" representing its priority, the goal is to select a subset of tasks that maximizes the total priority value without exceeding the microcontroller's total memory capacity.\n\nTo conserve memory, the engineer's algorithm uses only a single one-dimensional array, let's call it $V_{\\max}$, of size $W+1$, where $W$ is the total memory capacity. The array is first initialized with all elements set to zero. The algorithm then processes each task one by one. For a given task $i$ with weight $w_i$ and value $v_i$, the algorithm updates the $V_{\\max}$ array according to the following rule: for each integer capacity $j$ from $W$ down to $w_i$ (inclusive), the element $V_{\\max}[j]$ is updated to be the maximum of its current value and the value $V_{\\max}[j - w_i] + v_i$.\n\nSuppose the total memory capacity is $W = 7$. The available tasks are given in the following table:\n\n| Task ID | Weight `w` | Value `v` |\n|:-------:|:----------:|:---------:|\n|    1    |     3      |     5     |\n|    2    |     5      |     9     |\n|    3    |     2      |     3     |\n\nThe algorithm will first process Task 1, then Task 2, and finally Task 3. Your goal is to determine the state of the $V_{\\max}$ array after the algorithm has finished processing **only the first two tasks** (Task 1 and Task 2). The array $V_{\\max}$ has indices from 0 to 7.\n\nPresent your answer as a row matrix containing the integer values of the elements $V_{\\max}[0]$ through $V_{\\max}[7]$.", "solution": "We solve a 0-1 knapsack using a single array $V_{\\max}[0..W]$ with $W=7$. The update rule for each task with weight $w_{i}$ and value $v_{i}$ is\n$$\nV_{\\max}[j] \\leftarrow \\max\\!\\big(V_{\\max}[j],\\, V_{\\max}[j-w_{i}] + v_{i}\\big)\\quad\\text{for } j=W,W-1,\\ldots,w_{i}.\n$$\nInitialization:\n$$\nV_{\\max}[j]=0\\quad\\text{for } j=0,1,\\ldots,7,\n$$\nwhich we can write as\n$$\n\\begin{pmatrix}\n0 & 0 & 0 & 0 & 0 & 0 & 0 & 0\n\\end{pmatrix}.\n$$\n\nProcess Task 1 with $w_{1}=3$, $v_{1}=5$:\nFor $j=7,6,5,4,3$,\n$$\nV_{\\max}[j]=\\max\\!\\big(V_{\\max}[j],\\, V_{\\max}[j-3]+5\\big).\n$$\nSince $V_{\\max}[j-3]=0$ initially for all these $j$, each update gives\n$$\nV_{\\max}[j]=\\max(0,0+5)=5.\n$$\nIndices $j=0,1,2$ remain zero. After Task 1:\n$$\n\\begin{pmatrix}\n0 & 0 & 0 & 5 & 5 & 5 & 5 & 5\n\\end{pmatrix}.\n$$\n\nProcess Task 2 with $w_{2}=5$, $v_{2}=9$:\nFor $j=7,6,5$,\n$$\nV_{\\max}[j]=\\max\\!\\big(V_{\\max}[j],\\, V_{\\max}[j-5]+9\\big).\n$$\nCompute each:\n- For $j=7$: $V_{\\max}[7]=\\max(5, V_{\\max}[2]+9)=\\max(5, 0+9)=9$.\n- For $j=6$: $V_{\\max}[6]=\\max(5, V_{\\max}[1]+9)=\\max(5, 0+9)=9$.\n- For $j=5$: $V_{\\max}[5]=\\max(5, V_{\\max}[0]+9)=\\max(5, 0+9)=9$.\nEntries $j=0,1,2,3,4$ are unaffected in this pass, so they remain $0,0,0,5,5$ respectively. Therefore, after processing the first two tasks, the array is\n$$\n\\begin{pmatrix}\n0 & 0 & 0 & 5 & 5 & 9 & 9 & 9\n\\end{pmatrix}.\n$$", "answer": "$$\\boxed{\\begin{pmatrix}0 & 0 & 0 & 5 & 5 & 9 & 9 & 9\\end{pmatrix}}$$", "id": "1449277"}, {"introduction": "Beyond dynamic programming, branch-and-bound is another powerful technique for solving combinatorial optimization problems like the 0-1 knapsack. This final practice challenges you to apply this method, which intelligently explores the space of potential solutions. You will learn to use the solution of the related \"fractional\" knapsack problem as an upper bound to prune the search tree, a key concept that makes the search computationally feasible.[@problem_id:1449298]", "problem": "A data scientist is selecting features for a machine learning model. The goal is to maximize the model's predictive power, measured by a total \"impact score,\" without exceeding a \"computational budget.\" Each feature has an associated impact score and a computational cost required to process it. This selection problem can be modeled as a 0-1 knapsack problem.\n\nThe available features, pre-sorted in descending order of their impact-to-cost ratio, are:\n- Feature 1: Impact = 40, Cost = 2\n- Feature 2: Impact = 30, Cost = 5\n- Feature 3: Impact = 50, Cost = 10\n- Feature 4: Impact = 10, Cost = 5\n\nThe total computational budget (knapsack capacity) is 16.\n\nYou are to solve this problem using a branch-and-bound algorithm with the following specifications:\n- The algorithm performs a **best-first search**, always expanding the live node with the highest upper bound.\n- The state-space is a binary tree where nodes represent decisions for each feature. The tree is built by considering features in the order they are listed (Feature 1, then Feature 2, etc.).\n- The upper bound for any node is calculated as the sum of the impact scores of features already included on the path to the node, plus the value obtained by solving the **fractional knapsack problem** for the remaining features and the remaining computational budget.\n- A node is pruned if its upper bound is less than or equal to the total impact score of the best complete solution found so far.\n\nWhat is the maximum total impact score that can be achieved under the given computational budget?", "solution": "Let the features be items indexed by $i \\in \\{1,2,3,4\\}$ with impact (value) $v_{i}$ and computational cost (weight) $c_{i}$, and knapsack capacity $W=16$. The items are already sorted by decreasing impact-to-cost ratio $r_{i}=v_{i}/c_{i}$:\n- Item $1$: $v_{1}=40$, $c_{1}=2$, $r_{1}=20$.\n- Item $2$: $v_{2}=30$, $c_{2}=5$, $r_{2}=6$.\n- Item $3$: $v_{3}=50$, $c_{3}=10$, $r_{3}=5$.\n- Item $4$: $v_{4}=10$, $c_{4}=5$, $r_{4}=2$.\n\nBranch-and-bound uses a best-first search guided by the upper bound computed via the fractional knapsack relaxation. For any node with current cumulative impact $V$, cumulative cost $C$, remaining capacity $R=W-C$, and next item index $k+1$, the upper bound $U$ is computed as follows:\n- Initialize $U \\leftarrow V$, $R \\leftarrow W-C$.\n- For $j$ from $k+1$ to $4$ in order:\n  - If $c_{j} \\leq R$, set $U \\leftarrow U+v_{j}$ and $R \\leftarrow R-c_{j}$.\n  - Else add the fractional value $U \\leftarrow U+v_{j}\\cdot \\frac{R}{c_{j}}$ and stop.\n\nWe expand nodes in order of decreasing $U$, and keep the best complete (leaf) feasible value found so far as $B$; any live node with $U \\leq B$ is pruned.\n\nRoot node (no items decided): $(V=0,C=0,R=16)$. Fractional bound:\n- Take item $1$ fully: $U \\leftarrow 0+40=40$, $R \\leftarrow 14$.\n- Take item $2$ fully: $U \\leftarrow 40+30=70$, $R \\leftarrow 9$.\n- Take fraction $\\frac{9}{10}$ of item $3$: add $50 \\cdot \\frac{9}{10}=45$, capacity full.\nThus $U=115$. Live list: $\\{$root with $U=115\\}$, $B=0$.\n\nExpand root. Generate children for item $1$.\n\nInclude item $1$ (node $N_{1}^{\\text{in}}$): $(V=40,C=2,R=14)$. Bound from items $2,3,4$:\n- Take item $2$ fully: $U \\leftarrow 40+30=70$, $R \\leftarrow 9$.\n- Take fraction $\\frac{9}{10}$ of item $3$: add $45$. Hence $U=115$.\n\nExclude item $1$ (node $N_{1}^{\\text{out}}$): $(V=0,C=0,R=16)$ with items $2,3,4$:\n- Take item $2$ fully: $U \\leftarrow 0+30=30$, $R \\leftarrow 11$.\n- Take item $3$ fully: $U \\leftarrow 30+50=80$, $R \\leftarrow 1$.\n- Take fraction $\\frac{1}{5}$ of item $4$: add $10 \\cdot \\frac{1}{5}=2$. Hence $U=82$.\nLive: $\\{N_{1}^{\\text{in}}(U=115),\\,N_{1}^{\\text{out}}(U=82)\\}$.\n\nExpand $N_{1}^{\\text{in}}$ (highest $U$). Decide item $2$.\n\nInclude item $2$ (node $N_{12}^{\\text{in,in}}$): $(V=70,C=7,R=9)$, items $3,4$:\n- Take fraction $\\frac{9}{10}$ of item $3$: add $45$. Hence $U=70+45=115$.\n\nExclude item $2$ (node $N_{12}^{\\text{in,out}}$): $(V=40,C=2,R=14)$, items $3,4$:\n- Take item $3$ fully: $U \\leftarrow 40+50=90$, $R \\leftarrow 4$.\n- Take fraction $\\frac{4}{5}$ of item $4$: add $10 \\cdot \\frac{4}{5}=8$. Hence $U=98$.\nLive: $\\{N_{12}^{\\text{in,in}}(U=115),\\,N_{12}^{\\text{in,out}}(U=98),\\,N_{1}^{\\text{out}}(U=82)\\}$.\n\nExpand $N_{12}^{\\text{in,in}}$ (highest $U$). Decide item $3$.\n\nInclude item $3$: $(V=120,C=17)$ infeasible since $C>W$; discard.\n\nExclude item $3$ (node $N_{123}^{\\text{in,in,out}}$): $(V=70,C=7,R=9)$, only item $4$ remains:\n- Item $4$ fully fits: $U=70+10=80$.\nLive: $\\{N_{12}^{\\text{in,out}}(U=98),\\,N_{1}^{\\text{out}}(U=82),\\,N_{123}^{\\text{in,in,out}}(U=80)\\}$.\n\nExpand $N_{12}^{\\text{in,out}}$ (highest $U$). Decide item $3$.\n\nInclude item $3$ (node $N_{123}^{\\text{in,out,in}}$): $(V=90,C=12,R=4)$, remaining item $4$:\n- Fractional bound with item $4$: add $10 \\cdot \\frac{4}{5}=8$, so $U=98$.\nThis node corresponds to a feasible partial selection; proceeding to item $4$ will produce a complete solution.\n\nExclude item $3$ (node $N_{123}^{\\text{in,out,out}}$): $(V=40,C=2,R=14)$, remaining item $4$:\n- Item $4$ fully fits: $U=40+10=50$.\nLive: $\\{N_{123}^{\\text{in,out,in}}(U=98),\\,N_{1}^{\\text{out}}(U=82),\\,N_{123}^{\\text{in,in,out}}(U=80),\\,N_{123}^{\\text{in,out,out}}(U=50)\\}$.\n\nExpand $N_{123}^{\\text{in,out,in}}$ (highest $U$). Decide item $4$.\n\nInclude item $4$: $(V=100,C=17)$ infeasible; discard.\n\nExclude item $4$ (leaf): $(V=90,C=12)$, no remaining items, so $U=90$. This is a complete feasible solution with total impact $90$. Set $B=90$.\nLive: $\\{N_{1}^{\\text{out}}(U=82),\\,N_{123}^{\\text{in,in,out}}(U=80),\\,N_{123}^{\\text{in,out,out}}(U=50)\\}$.\n\nExpand $N_{1}^{\\text{out}}$ (next highest $U=82$). Decide item $2$.\n\nInclude item $2$ (node $N_{2}^{\\text{in}}$): $(V=30,C=5,R=11)$, items $3,4$:\n- Take item $3$ fully: $U \\leftarrow 30+50=80$, $R \\leftarrow 1$.\n- Take fraction $\\frac{1}{5}$ of item $4$: add $2$. Hence $U=82$.\n\nExclude item $2$ (node $N_{2}^{\\text{out}}$): $(V=0,C=0,R=16)$, items $3,4$:\n- Take item $3$ fully and item $4$ fully: $U=50+10=60$.\nLive: $\\{N_{2}^{\\text{in}}(U=82),\\,N_{123}^{\\text{in,in,out}}(U=80),\\,N_{2}^{\\text{out}}(U=60),\\,N_{123}^{\\text{in,out,out}}(U=50)\\}$.\n\nExpand $N_{2}^{\\text{in}}$ (highest $U=82$). Decide item $3$.\n\nInclude item $3$ (node $N_{23}^{\\text{in,in}}$): $(V=80,C=15,R=1)$, item $4$ remaining:\n- Fractional bound from item $4$: add $2$, so $U=82$.\n\nExclude item $3$ (node $N_{23}^{\\text{in,out}}$): $(V=30,C=5,R=11)$, only item $4$:\n- Item $4$ fully: $U=30+10=40$.\nLive: $\\{N_{23}^{\\text{in,in}}(U=82),\\,N_{123}^{\\text{in,in,out}}(U=80),\\,N_{2}^{\\text{out}}(U=60),\\,N_{123}^{\\text{in,out,out}}(U=50),\\,N_{23}^{\\text{in,out}}(U=40)\\}$.\n\nExpand $N_{23}^{\\text{in,in}}$ (highest $U=82$). Decide item $4$.\n\nInclude item $4$: $(V=90,C=20)$ infeasible; discard.\n\nExclude item $4$ (leaf): $(V=80,C=15)$ with $U=80$. This is complete with value $80$, which does not improve $B$.\n\nNow every remaining live node has $U \\leq 80$, and by the pruning rule any node with $U \\leq B=90$ is pruned:\n- $N_{123}^{\\text{in,in,out}}$ has $U=80 \\leq 90$; prune.\n- $N_{2}^{\\text{out}}$ has $U=60 \\leq 90$; prune.\n- $N_{123}^{\\text{in,out,out}}$ has $U=50 \\leq 90$; prune.\n- $N_{23}^{\\text{in,out}}$ has $U=40 \\leq 90$; prune.\n\nNo live nodes remain. Therefore, the best complete solution has total impact $B=90$. One achieving selection is items $1$ and $3$ with total cost $2+10=12 \\leq 16$ and total impact $40+50=90$.", "answer": "$$\\boxed{90}$$", "id": "1449298"}]}