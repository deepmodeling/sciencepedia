{"hands_on_practices": [{"introduction": "Understanding the Bin Packing Problem begins with mastering the fundamental algorithms used to approximate solutions. This first practice introduces the First-Fit (FF) algorithm, a simple and intuitive greedy heuristic. By working through a relatable, hypothetical scenario of organizing digital music playlists, you will simulate the FF process step-by-step, solidifying your grasp of its mechanics and its \"online\" nature, where decisions are made for each item without knowledge of future items [@problem_id:1449885].", "problem": "A digital music service is tasked with arranging a new collection of songs onto a series of playlists. Each playlist has a strict maximum duration of 60 minutes. The service uses a specific automated process to assign songs to playlists. The songs are processed one by one in alphabetical order of their titles. For each song, the system attempts to place it into the first-created playlist (Playlist 1, then Playlist 2, and so on) that has enough remaining capacity. If no existing playlist can accommodate the song, a new playlist is created for it.\n\nGiven the following list of songs and their durations, determine the total number of playlists required to store all the songs.\n\n- \"Ambient Awakening\": 18 minutes\n- \"Blockchain Blues\": 25 minutes\n- \"Cybernetic Serenade\": 38 minutes\n- \"Data-driven Dream\": 15 minutes\n- \"Echoes of Entropy\": 22 minutes\n- \"Fractal Fantasy\": 12 minutes\n- \"Glitch in the Grid\": 29 minutes\n- \"Holomorphic Harmony\": 7 minutes", "solution": "We model the process as First-Fit bin packing with bin capacity $C=60$. Songs are processed in alphabetical order as listed. Let $r_{i}$ denote the remaining capacity of Playlist $i$ after each placement.\n\n1) \"Ambient Awakening\" of duration $18$:\n- No playlists exist, create Playlist $1$.\n- Place in Playlist $1$: $r_{1} = 60 - 18 = 42$.\n\n2) \"Blockchain Blues\" of duration $25$:\n- Try Playlist $1$: $25 \\leq r_{1}=42$, fits.\n- Update: $r_{1} = 42 - 25 = 17$.\n\n3) \"Cybernetic Serenade\" of duration $38$:\n- Try Playlist $1$: $38 \\nleq 17$, does not fit.\n- Create Playlist $2$, place there: $r_{2} = 60 - 38 = 22$.\n\n4) \"Data-driven Dream\" of duration $15$:\n- Try Playlist $1$: $15 \\leq r_{1}=17$, fits.\n- Update: $r_{1} = 17 - 15 = 2$.\n\n5) \"Echoes of Entropy\" of duration $22$:\n- Try Playlist $1$: $22 \\nleq 2$, does not fit.\n- Try Playlist $2$: $22 \\leq r_{2}=22$, fits exactly.\n- Update: $r_{2} = 22 - 22 = 0$.\n\n6) \"Fractal Fantasy\" of duration $12$:\n- Try Playlist $1$: $12 \\nleq 2$, does not fit.\n- Try Playlist $2$: $12 \\nleq 0$, does not fit.\n- Create Playlist $3$, place there: $r_{3} = 60 - 12 = 48$.\n\n7) \"Glitch in the Grid\" of duration $29$:\n- Try Playlist $1$: $29 \\nleq 2$, does not fit.\n- Try Playlist $2$: $29 \\nleq 0$, does not fit.\n- Try Playlist $3$: $29 \\leq r_{3}=48$, fits.\n- Update: $r_{3} = 48 - 29 = 19$.\n\n8) \"Holomorphic Harmony\" of duration $7$:\n- Try Playlist $1$: $7 \\nleq 2$, does not fit.\n- Try Playlist $2$: $7 \\nleq 0$, does not fit.\n- Try Playlist $3$: $7 \\leq r_{3}=19$, fits.\n- Update: $r_{3} = 19 - 7 = 12$.\n\nAll songs are placed into Playlists $1$–$3$. Therefore, the total number of playlists required is $3$.", "answer": "$$\\boxed{3}$$", "id": "1449885"}, {"introduction": "While the First-Fit algorithm is straightforward, it is not the only greedy strategy available. This exercise introduces the Best-Fit (BF) algorithm and challenges you to compare its performance directly against FF on the same set of items. By simulating both procedures, you will discover that the choice of heuristic matters, as different greedy rules can lead to different packing configurations and efficiencies [@problem_id:1449928]. This practice is crucial for developing a nuanced understanding of how algorithmic design choices impact outcomes.", "problem": "The bin packing problem is a classic challenge in computer science where the goal is to pack a set of items of various sizes into a minimum number of bins, each with a fixed capacity. Two common online approximation algorithms for this problem are First-Fit and Best-Fit. An online algorithm processes items one by one from a given list, without knowledge of future items.\n\nThe algorithms are defined as follows:\n- **First-Fit (FF)**: For each item in the list, place it into the first bin (i.e., the bin with the lowest index) that has enough remaining capacity. If no existing bin can accommodate the item, open a new bin and place the item inside it.\n- **Best-Fit (BF)**: For each item in the list, place it into the bin that has the smallest sufficient remaining capacity (i.e., the tightest fit). If no existing bin can accommodate the item, open a new bin for it. In case of a tie where multiple bins offer the same best fit, the item is placed in the bin with the lowest index.\n\nConsider a set of identical bins, each with a capacity of $C=10$. You are given an ordered list of items with the following sizes: $L = (4, 8, 2, 4)$.\n\nLet $L_{FF}$ be the ordered list of the final remaining capacities of the bins (from bin 1 to the last-opened bin) after applying the First-Fit algorithm. Similarly, let $L_{BF}$ be the ordered list of final remaining capacities after applying the Best-Fit algorithm. Which of the following statements correctly describes $L_{FF}$ and $L_{BF}$?\n\nA. $L_{FF} = (0, 2)$ and $L_{BF} = (2, 0)$\n\nB. $L_{FF} = (2, 0)$ and $L_{BF} = (0, 2)$\n\nC. $L_{FF} = (0, 2)$ and $L_{BF} = (0, 2)$\n\nD. $L_{FF} = (4, 2)$ and $L_{BF} = (2, 4)$\n\nE. Both algorithms result in opening three bins.", "solution": "We simulate each online algorithm step by step with bin capacity $C=10$ and item list $L=(4,8,2,4)$, maintaining remaining capacities.\n\nFirst-Fit (FF):\n1) Item $4$: No bins exist, open bin $1$. Remaining capacity becomes $10-4=6$. State: $(6)$.\n2) Item $8$: Bin $1$ has $6<8$, so open bin $2$. Remaining capacity becomes $10-8=2$. State: $(6,2)$.\n3) Item $2$: Place in the first bin that fits, which is bin $1$ with $6$. New remaining in bin $1$ is $6-2=4$. State: $(4,2)$.\n4) Item $4$: Place in the first bin that fits, which is bin $1$ with $4$. New remaining in bin $1$ is $4-4=0$. Final state: $(0,2)$.\nThus $L_{FF}=(0,2)$.\n\nBest-Fit (BF):\n1) Item $4$: No bins exist, open bin $1$. Remaining capacity becomes $10-4=6$. State: $(6)$.\n2) Item $8$: Bin $1$ has $6<8$, so open bin $2$. Remaining capacity becomes $10-8=2$. State: $(6,2)$.\n3) Item $2$: Among bins that can fit $2$, choose the one with smallest sufficient remaining capacity. Bin $2$ has $2$ and bin $1$ has $6$, so choose bin $2$. New remaining in bin $2$ is $2-2=0$. State: $(6,0)$.\n4) Item $4$: Among bins that can fit $4$, only bin $1$ with $6$ qualifies. Place it there; new remaining is $6-4=2$. Final state: $(2,0)$.\nThus $L_{BF}=(2,0)$.\n\nComparing with the options, this matches option A.", "answer": "$$\\boxed{A}$$", "id": "1449928"}, {"introduction": "Moving beyond fast but potentially suboptimal heuristics, this final practice explores a more powerful method for finding a guaranteed optimal solution. You will engage with a dynamic programming approach, a technique that solves complex problems by breaking them down into simpler, overlapping subproblems. This exercise demonstrates that while the Bin Packing Problem is NP-hard in general, it can be solved exactly and efficiently when structured in a specific way—in this case, when there are few distinct item sizes [@problem_id:1449858]. This provides a glimpse into advanced topics like fixed-parameter tractability and the trade-offs between computational cost and solution optimality.", "problem": "A deep-space logistics agency is tasked with packing standardized scientific modules for a mission to one of Jupiter's moons. All modules must be placed into identical cargo containers of a fixed capacity. Due to the high cost of transportation, the primary goal is to minimize the total number of containers used.\n\nThe cargo manifest consists of a large number of modules, but they come in only a few distinct sizes. This structure allows for an optimization approach using dynamic programming. Consider a dynamic programming algorithm where a state is defined by a tuple $(c_1, c_2, \\dots, c_k)$, representing a subproblem where exactly $c_i$ modules of size $s_i$ have been packed for each module type $i \\in \\{1, \\dots, k\\}$.\n\nThe value computed for each state, let's call it $DP(c_1, \\dots, c_k)$, is a pair $(B, U)$. Here, $B$ is the minimum number of containers required to pack the specified modules, and $U$ is the total size of the modules placed in the *last* of these $B$ containers. The optimization criterion for comparing two states is lexicographical: a state $(B_1, U_1)$ is considered better than $(B_2, U_2)$ if $B_1 < B_2$, or if $B_1 = B_2$ and $U_1 < U_2$.\n\nThe process begins from the state of having packed no modules, which is defined as $DP(0, 0, \\dots, 0) = (0, 0)$, representing zero containers used.\n\nYour task is to use this dynamic programming framework to solve the following specific instance:\n- The capacity of each container is $C = 10$ units.\n- There are $k=3$ distinct module sizes: $s_1 = 6$, $s_2 = 3$, and $s_3 = 2$.\n- The number of modules of each size are: $n_1 = 2$ of size $s_1$, $n_2 = 3$ of size $s_2$, and $n_3 = 2$ of size $s_3$.\n\nDetermine the minimum number of containers, $B$, required to pack all the modules.", "solution": "The problem asks for the minimum number of bins to solve a specific instance of the bin packing problem, using a provided dynamic programming formulation. The state of the dynamic programming is given by the tuple $(c_1, c_2, c_3)$, representing the number of items of each size ($s_1=6, s_2=3, s_3=2$) that have been packed. The DP function stores a pair $DP(c_1, c_2, c_3) = (B, U)$, where $B$ is the minimum number of bins and $U$ is the usage of the last bin. The goal is to compute $DP(2, 3, 2)$.\n\nThe recurrence relation is derived by considering the addition of one item to a previously solved subproblem. To compute $DP(c_1, c_2, c_3)$, we must have arrived from a state where one fewer item was packed. Let's say we transition from a state with tuple $(c'_1, c'_2, c'_3)$ by adding an item of size $s_j$. This means $(c'_1, \\dots, c'_j, \\dots, c'_3) = (c_1, \\dots, c_j-1, \\dots, c_3)$. Let $DP(c'_1, c'_2, c'_3) = (B', U')$.\n\nWhen we add the item of size $s_j$:\n1.  If $B' = 0$ (the base case), we must start a new bin. The new state is $(1, s_j)$.\n2.  If $B' > 0$ and the item fits in the last bin, i.e., $U' + s_j \\le C$, the new state is $(B', U' + s_j)$.\n3.  If $B' > 0$ and the item does not fit, i.e., $U' + s_j > C$, we must start a new bin. The new state is $(B' + 1, s_j)$.\n\nTo find $DP(c_1, c_2, c_3)$, we compute the resulting state from all possible previous states (i.e., for all $j$ where $c_j>0$) and take the lexicographically smallest result.\n$$DP(c_1, c_2, c_3) = \\min_{\\text{lex}} \\left\\{ \\text{update}(DP(c_1, \\dots, c_j-1, \\dots, c_3), s_j) \\mid j \\text{ s.t. } c_j > 0 \\right\\}$$\n\nLet's compute the values of the DP table bottom-up. $C=10, s_1=6, s_2=3, s_3=2$. We need $DP(c_1, c_2, c_3)$ for $0 \\le c_1 \\le 2, 0 \\le c_2 \\le 3, 0 \\le c_3 \\le 2$.\n\n**Base Case:** $DP(0,0,0) = (0,0)$.\n\n**Total items = 1:**\n- $DP(1,0,0) = (1, 6)$ (from $DP(0,0,0)$ + $s_1$)\n- $DP(0,1,0) = (1, 3)$ (from $DP(0,0,0)$ + $s_2$)\n- $DP(0,0,1) = (1, 2)$ (from $DP(0,0,0)$ + $s_3$)\n\n**Total items = 2:**\n- $DP(1,1,0) = \\min_{\\text{lex}}\\{\\text{update}(DP(0,1,0)=(1,3), s_1), \\text{update}(DP(1,0,0)=(1,6), s_2)\\}$.\n  - From $DP(0,1,0)=(1,3)$, add $s_1=6$. $3+6=9 \\le 10$. Result: $(1,9)$.\n  - From $DP(1,0,0)=(1,6)$, add $s_2=3$. $6+3=9 \\le 10$. Result: $(1,9)$.\n  - $DP(1,1,0) = (1,9)$.\n- $DP(0,2,0)$: from $DP(0,1,0)=(1,3)$, add $s_2=3$. $3+3=6 \\le 10$. Result: $(1,6)$. So $DP(0,2,0) = (1,6)$.\n- By similar calculations, we fill the table. We will show a few key steps leading to the final answer.\n\n**Skipping to a state with multiple choices:**\n- $DP(1,2,0)$:\n  - From $DP(0,2,0)=(1,6)$, add $s_1=6$: $6+6=12 > 10$. New bin. Result: $(2,6)$.\n  - From $DP(1,1,0)=(1,9)$, add $s_2=3$: $9+3=12 > 10$. New bin. Result: $(2,3)$.\n  - $\\min_{\\text{lex}}((2,6), (2,3)) = (2,3)$. So, $DP(1,2,0) = (2,3)$.\n\n**Key values for the final steps:**\nWe need the results for subproblems with a total of 6 items to compute the final state with 7 items. The required previous states are $(1,3,2)$, $(2,2,2)$, and $(2,3,1)$.\n- $DP(1,3,2) = \\min_{\\text{lex}}\\{\\text{update}(DP(0,3,2),s_1), \\text{update}(DP(1,2,2),s_2), \\text{update}(DP(1,3,1),s_3)\\}$. Through systematic calculation (which is lengthy but follows the rules):\n  - $DP(0,3,2)=(2,3)$. Add $s_1=6 \\implies 3+6=9 \\le 10 \\implies (2,9)$.\n  - $DP(1,2,2)=(2,6)$. Add $s_2=3 \\implies 6+3=9 \\le 10 \\implies (2,9)$.\n  - $DP(1,3,1)=(2,8)$. Add $s_3=2 \\implies 8+2=10 \\le 10 \\implies (2,10)$.\n  - $DP(1,3,2) = \\min_{\\text{lex}}((2,9), (2,9), (2,10)) = (2,9)$.\n- Similarly, we find:\n  - $DP(2,2,2) = (3,3)$. This choice comes from update($DP(2,1,2)=(2,9)$, $s_2=3$) which gives $(3,3)$ versus other options leading to $(3,6)$ and $(3,4)$.\n  - $DP(2,3,1) = (3,5)$.\n\n**Final Step: Compute $DP(2,3,2)$**\nWe need to find the state for packing all items: 2 of size 6, 3 of size 3, and 2 of size 2.\nWe consider the three possibilities for the last item packed:\n1.  From $DP(1,3,2)=(2,9)$, add the last item of size $s_1=6$.\n    The last bin of state $(2,9)$ has usage 9. Adding an item of size 6: $9+6=15 > 10$. A new bin is required.\n    The resulting state is $(B', U') = (2+1, 6) = (3,6)$.\n\n2.  From $DP(2,2,2)=(3,3)$, add the last item of size $s_2=3$.\n    The last bin of state $(3,3)$ has usage 3. Adding an item of size 3: $3+3=6 \\le 10$. The item fits.\n    The resulting state is $(B', U') = (3, 3+3) = (3,6)$.\n\n3.  From $DP(2,3,1)=(3,5)$, add the last item of size $s_3=2$.\n    The last bin of state $(3,5)$ has usage 5. Adding an item of size 2: $5+2=7 \\le 10$. The item fits.\n    The resulting state is $(B', U') = (3, 5+2) = (3,7)$.\n\nNow we compare the three candidate final states: $(3,6)$, $(3,6)$, and $(3,7)$.\nThe lexicographically smallest state is $(3,6)$.\nTherefore, $DP(2,3,2) = (3,6)$.\n\nThe problem asks for the minimum number of containers, which is the first component, $B$, of the final state pair.\n$B = 3$.\nThe total size of all items is $2 \\times 6 + 3 \\times 3 + 2 \\times 2 = 12 + 9 + 4 = 25$. The minimum possible number of bins is $\\lceil 25 / 10 \\rceil = 3$, so our DP result achieves this theoretical minimum.\nA possible packing is:\n- Bin 1: {6, 2, 2} (Total: 10)\n- Bin 2: {3, 3, 3} (Total: 9)\n- Bin 3: {6} (Total: 6)\nThis configuration uses 3 bins and matches our DP result of $B=3$.", "answer": "$$\\boxed{3}$$", "id": "1449858"}]}