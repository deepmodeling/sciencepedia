{"hands_on_practices": [{"introduction": "The Set-cover problem is famous for being NP-complete, implying that finding a solution efficiently is generally intractable. However, understanding the boundaries of this complexity is key, as many special cases are surprisingly simple to solve. This first exercise [@problem_id:1462652] explores one such scenario where the cover is restricted to a single set, providing a gentle entry point and highlighting that practical constraints can sometimes make a hard problem easy.", "problem": "A software development startup is building a new application and has identified a universe of required features, denoted by the set $U$. To speed up development, they plan to use third-party modules. They have a collection of available modules, $S = \\{M_1, M_2, \\ldots, M_m\\}$, where each module $M_i$ provides a specific subset of the features in $U$.\n\nThe management wants to determine if it is possible to satisfy all feature requirements by purchasing at most one module, to keep integration simple. This is an instance of the Set-cover decision problem, where the goal is to find if there's a sub-collection of $S$ of size at most $k=1$ whose union covers all of $U$.\n\nAn intern, Alex, is tasked with writing a script to solve this. Alex proposes the following algorithm: \"Iterate through each module $M_i$ in the collection $S$. For each module, check if it contains every single feature listed in the universe $U$. If such a module is found, the answer is 'YES'. If all modules are checked and none satisfy this condition, the answer is 'NO'.\"\n\nConsider the following specific instance:\nThe universe of required features is $U = \\{\\text{user-auth, push-notify, in-app-purchase, analytics, cloud-sync, real-time-chat}\\}$.\nThe collection of available modules is $S = \\{M_1, M_2, M_3, M_4\\}$, where:\n- $M_1 = \\{\\text{user-auth, analytics, cloud-sync}\\}$\n- $M_2 = \\{\\text{user-auth, push-notify, in-app-purchase, analytics, cloud-sync, real-time-chat}\\}$\n- $M_3 = \\{\\text{push-notify, in-app-purchase, real-time-chat}\\}$\n- $M_4 = \\{\\text{user-auth, in-app-purchase, analytics, cloud-sync}\\}$\n\nEvaluate Alex's proposed algorithm and its outcome on this specific instance. Which of the following statements is correct?\n\nA. The algorithm is incorrect because the general Set-cover problem is NP-complete, meaning no polynomial-time algorithm can solve it. Therefore, Alex's algorithm is flawed and may not find a solution even if one exists.\n\nB. The algorithm is correct and runs in polynomial time. For the given instance, the answer is \"NO\", as no single module contains all the required features.\n\nC. The algorithm is correct and runs in polynomial time. For the given instance, the answer is \"YES\", as module $M_2$ covers all required features.\n\nD. The algorithm is correct, but it is not a polynomial-time algorithm. In the worst case, it has to check every feature for every module, which leads to an exponential-time complexity relative to the number of features.\n\nE. The algorithm is correct and runs in polynomial time. For the given instance, the answer is \"YES\", but a more efficient solution would be to combine modules $M_1$ and $M_3$.", "solution": "We formalize the instance as a Set-cover decision problem with parameter $k=1$. For $k=1$, the question “Is there a sub-collection of $S$ of size at most $1$ whose union covers $U$?” is equivalent to “Does there exist an index $i$ such that $U \\subseteq M_{i}$?”, since the union of a single set $\\{M_{i}\\}$ is exactly $M_{i}$. Therefore, the correctness condition for any algorithm solving this case is to check whether there exists $i$ with $U \\subseteq M_{i}$.\n\nAlex’s algorithm iterates over each $M_{i} \\in S$ and checks whether $U \\subseteq M_{i}$. If such an $M_{i}$ is found, it returns YES; otherwise, after exhausting all modules, it returns NO. This is exactly the necessary and sufficient condition for a YES instance when $k=1$, hence the algorithm is correct for this special case. The time complexity is polynomial: for each $M_{i}$, verifying $U \\subseteq M_{i}$ can be done by checking $u \\in M_{i}$ for every $u \\in U$, which is $O(|U|)$ with constant-time membership (e.g., hashing) or at worst $O(|U|+|M_{i}|)$ with standard representations. Over $m$ modules, this yields $O(m|U|)$ or similar, which is polynomial. It is not exponential.\n\nNow apply the algorithm to the given instance. Let\n$$\nU=\\{\\text{user-auth, push-notify, in-app-purchase, analytics, cloud-sync, real-time-chat}\\},\n$$\nand\n$$\n\\begin{aligned}\nM_{1}&=\\{\\text{user-auth, analytics, cloud-sync}\\},\\\\\nM_{2}&=\\{\\text{user-auth, push-notify, in-app-purchase, analytics, cloud-sync, real-time-chat}\\},\\\\\nM_{3}&=\\{\\text{push-notify, in-app-purchase, real-time-chat}\\},\\\\\nM_{4}&=\\{\\text{user-auth, in-app-purchase, analytics, cloud-sync}\\}.\n\\end{aligned}\n$$\nWe check $U \\subseteq M_{i}$ for each $i$. For $M_{2}$, every element of $U$ is present in $M_{2}$, i.e.,\n$$\n\\forall u \\in U,\\quad u \\in M_{2},\n$$\nso $U \\subseteq M_{2}$ holds. Therefore, the algorithm returns YES on this instance.\n\nEvaluate the options:\n- A is incorrect: NP-completeness of general Set-cover does not preclude a polynomial-time algorithm for the special case $k=1$, and Alex’s algorithm is correct for this case.\n- B is incorrect: although the algorithm is correct and polynomial-time, the correct outcome here is YES because $M_{2}$ covers all features.\n- C is correct: the algorithm is correct, runs in polynomial time, and returns YES since $M_{2}$ covers $U$.\n- D is incorrect: the algorithm is polynomial-time, not exponential-time.\n- E is incorrect: while $M_{1} \\cup M_{3}=U$, claiming this is “more efficient” contradicts the $k=1$ objective; moreover, a single module $M_{2}$ already suffices.\n\nHence the correct choice is C.", "answer": "$$\\boxed{C}$$", "id": "1462652"}, {"introduction": "Having seen a simple, solvable case, we now turn to the more general and challenging version of the problem where costs are involved and multiple sets are needed. Since finding the absolute minimum cost solution is computationally hard, we often rely on approximation algorithms that find good, but not necessarily perfect, solutions quickly. This practice [@problem_id:1412438] introduces the standard greedy algorithm, which makes locally optimal choices based on cost-effectiveness, a fundamental strategy in optimization.", "problem": "Consider the problem of finding a minimum cost set cover. You are given a universe of elements $U = \\{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12\\}$ and a collection of five available subsets, labeled A, B, C, D, and E. Each subset has an associated cost.\n\nThe details are as follows:\n- **Set A**: Covers elements `{1, 2, 3, 4, 5}` with a cost of 4.\n- **Set B**: Covers elements `{6, 7, 8, 9, 10, 11, 12}` with a cost of 5.\n- **Set C**: Covers elements `{1, 3, 5, 7, 9, 11}` with a cost of 5.\n- **Set D**: Covers elements `{2, 4, 6, 8, 10, 12}` with a cost of 4.\n- **Set E**: Covers elements `{1, 6, 12}` with a cost of 2.\n\nA standard greedy algorithm is used to solve this problem. The algorithm builds the cover iteratively. In each step, it selects the set that offers the maximum value for the ratio of the number of *newly covered elements* to the set's cost. If there is a tie for this maximum ratio, the algorithm selects the set that comes first in alphabetical order (i.e., A before B, B before C, and so on).\n\nWhich set is the first one to be selected by this greedy algorithm?\n\nA. Set A\n\nB. Set B\n\nC. Set C\n\nD. Set D\n\nE. Set E", "solution": "We apply the greedy set cover rule: at each step select the set that maximizes the ratio of the number of newly covered elements to its cost. At the first step, no elements are covered yet, so the number of newly covered elements by a set is just the size of that set. For a set $X$ with cost $c_{X}$, the ratio is\n$$\nr_{X}=\\frac{|X|}{c_{X}}.\n$$\nCompute these ratios for all sets:\n- For $A$: $|A|=5$, $c_{A}=4$, so $r_{A}=\\frac{5}{4}$.\n- For $B$: $|B|=7$, $c_{B}=5$, so $r_{B}=\\frac{7}{5}$.\n- For $C$: $|C|=6$, $c_{C}=5$, so $r_{C}=\\frac{6}{5}$.\n- For $D$: $|D|=6$, $c_{D}=4$, so $r_{D}=\\frac{6}{4}=\\frac{3}{2}$.\n- For $E$: $|E|=3$, $c_{E}=2$, so $r_{E}=\\frac{3}{2}$.\n\nThe maximum ratio is $\\frac{3}{2}$, achieved by both $D$ and $E$. By the specified alphabetical tie-breaking rule, the algorithm selects $D$ first.", "answer": "$$\\boxed{D}$$", "id": "1412438"}, {"introduction": "The greedy algorithm provides a practical approach to the Set-cover problem, but how reliable is it? A crucial aspect of studying approximation algorithms is understanding their performance limitations. This final practice problem [@problem_id:1462610] presents a carefully constructed scenario where the greedy algorithm's step-by-step logic leads to a demonstrably suboptimal solution, forcing us to compare its result against the true optimum and appreciate the trade-offs involved.", "problem": "A Content Delivery Network (CDN) needs to decide which server configurations to deploy to host a set of 12 popular files, labeled F1 through F12. The goal is to select the minimum number of server configurations necessary to ensure all 12 files are available across the network. There are five available server configurations, C1 through C5, each capable of storing a specific subset of these files:\n\n- C1: `{F1, F2, F3, F4, F5, F6}`\n- C2: `{F7, F8, F9}`\n- C3: `{F10, F11, F12}`\n- C4: `{F1, F2, F3, F7, F8, F9}`\n- C5: `{F4, F5, F6, F10, F11, F12}`\n\nThe company's deployment strategy is based on a greedy algorithm. The algorithm proceeds in steps: in each step, it selects the server configuration that covers the largest number of files not yet covered by previously selected configurations. If there is a tie in the number of new files covered, the algorithm selects the configuration with the smallest index (e.g., C1 is chosen over C2). This process repeats until all 12 files are covered.\n\nAn optimal deployment is one that uses the absolute minimum number of server configurations required to cover all 12 files.\n\nCalculate the ratio of the number of configurations deployed by the greedy algorithm to the number of configurations in an optimal deployment. Express your final answer as a decimal value, rounded to four significant figures.", "solution": "Let the universe of files be $\\mathcal{U}=\\{F_{1},F_{2},\\dots,F_{12}\\}$. The configurations are:\n$$\nC_{1}=\\{F_{1},F_{2},F_{3},F_{4},F_{5},F_{6}\\},\\quad\nC_{2}=\\{F_{7},F_{8},F_{9}\\},\\quad\nC_{3}=\\{F_{10},F_{11},F_{12}\\},\n$$\n$$\nC_{4}=\\{F_{1},F_{2},F_{3},F_{7},F_{8},F_{9}\\},\\quad\nC_{5}=\\{F_{4},F_{5},F_{6},F_{10},F_{11},F_{12}\\}.\n$$\n\nGreedy selection proceeds by choosing at each step the configuration that adds the largest number of uncovered files; ties are broken by the smallest index.\n\nStep 1 (initial): The sizes are $|C_{1}|=6$, $|C_{4}|=6$, $|C_{5}|=6$, $|C_{2}|=3$, $|C_{3}|=3$. There is a three-way tie among $C_{1},C_{4},C_{5}$; by the tie rule, select $C_{1}$. Covered set is now $S_{1}=C_{1}=\\{F_{1},\\dots,F_{6}\\}$ and uncovered is $\\mathcal{U}\\setminus S_{1}=\\{F_{7},F_{8},F_{9},F_{10},F_{11},F_{12}\\}$.\n\nStep 2: The new coverage counts are\n$$\n|C_{2}\\setminus S_{1}|=3,\\quad |C_{3}\\setminus S_{1}|=3,\\quad |C_{4}\\setminus S_{1}|=3,\\quad |C_{5}\\setminus S_{1}|=3.\n$$\nThere is a tie; by the tie rule, select $C_{2}$. Covered set becomes $S_{2}=S_{1}\\cup C_{2}=\\{F_{1},\\dots,F_{9}\\}$, uncovered is $\\{F_{10},F_{11},F_{12}\\}$.\n\nStep 3: The new coverage counts are\n$$\n|C_{3}\\setminus S_{2}|=3,\\quad |C_{5}\\setminus S_{2}|=3,\\quad |C_{1}\\setminus S_{2}|=0,\\quad |C_{2}\\setminus S_{2}|=0,\\quad |C_{4}\\setminus S_{2}|=0.\n$$\nThere is a tie between $C_{3}$ and $C_{5}$; by the tie rule, select $C_{3}$. Then $S_{3}=S_{2}\\cup C_{3}=\\mathcal{U}$. Thus, the greedy algorithm selects $3$ configurations.\n\nTo find an optimal deployment, observe that no single configuration covers all $12$ files since $\\max_{i}|C_{i}|=6<12$. However,\n$$\nC_{4}\\cup C_{5}=\\{F_{1},F_{2},F_{3},F_{7},F_{8},F_{9}\\}\\cup \\{F_{4},F_{5},F_{6},F_{10},F_{11},F_{12}\\}=\\mathcal{U},\n$$\nso $2$ configurations suffice. Therefore, the optimal number is $2$.\n\nThe requested ratio is\n$$\nr=\\frac{\\text{greedy configurations}}{\\text{optimal configurations}}=\\frac{3}{2}=1.5.\n$$\nRounded to four significant figures, this is $1.500$.", "answer": "$$\\boxed{1.500}$$", "id": "1462610"}]}